
../repos/coreutils/src/chmod:     file format elf32-littlearm


Disassembly of section .init:

0001109c <.init>:
   1109c:	push	{r3, lr}
   110a0:	bl	113ec <__assert_fail@plt+0x48>
   110a4:	pop	{r3, pc}

Disassembly of section .plt:

000110a8 <fstatfs64@plt-0x14>:
   110a8:	push	{lr}		; (str lr, [sp, #-4]!)
   110ac:	ldr	lr, [pc, #4]	; 110b8 <fstatfs64@plt-0x4>
   110b0:	add	lr, pc, lr
   110b4:	ldr	pc, [lr, #8]!
   110b8:	andeq	sl, r1, r8, asr #30

000110bc <fstatfs64@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #106496	; 0x1a000
   110c4:	ldr	pc, [ip, #3912]!	; 0xf48

000110c8 <calloc@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #106496	; 0x1a000
   110d0:	ldr	pc, [ip, #3904]!	; 0xf40

000110d4 <fputs_unlocked@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #106496	; 0x1a000
   110dc:	ldr	pc, [ip, #3896]!	; 0xf38

000110e0 <raise@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #106496	; 0x1a000
   110e8:	ldr	pc, [ip, #3888]!	; 0xf30

000110ec <strcmp@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #106496	; 0x1a000
   110f4:	ldr	pc, [ip, #3880]!	; 0xf28

000110f8 <fflush@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #106496	; 0x1a000
   11100:	ldr	pc, [ip, #3872]!	; 0xf20

00011104 <memmove@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #106496	; 0x1a000
   1110c:	ldr	pc, [ip, #3864]!	; 0xf18

00011110 <free@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #106496	; 0x1a000
   11118:	ldr	pc, [ip, #3856]!	; 0xf10

0001111c <_exit@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #106496	; 0x1a000
   11124:	ldr	pc, [ip, #3848]!	; 0xf08

00011128 <memcpy@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #106496	; 0x1a000
   11130:	ldr	pc, [ip, #3840]!	; 0xf00

00011134 <mbsinit@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #106496	; 0x1a000
   1113c:	ldr	pc, [ip, #3832]!	; 0xef8

00011140 <memcmp@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #106496	; 0x1a000
   11148:	ldr	pc, [ip, #3824]!	; 0xef0

0001114c <dcgettext@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #106496	; 0x1a000
   11154:	ldr	pc, [ip, #3816]!	; 0xee8

00011158 <realloc@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #106496	; 0x1a000
   11160:	ldr	pc, [ip, #3808]!	; 0xee0

00011164 <textdomain@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #106496	; 0x1a000
   1116c:	ldr	pc, [ip, #3800]!	; 0xed8

00011170 <__fxstatat64@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #106496	; 0x1a000
   11178:	ldr	pc, [ip, #3792]!	; 0xed0

0001117c <iswprint@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #106496	; 0x1a000
   11184:	ldr	pc, [ip, #3784]!	; 0xec8

00011188 <__fxstat64@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #106496	; 0x1a000
   11190:	ldr	pc, [ip, #3776]!	; 0xec0

00011194 <fwrite@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #106496	; 0x1a000
   1119c:	ldr	pc, [ip, #3768]!	; 0xeb8

000111a0 <lseek64@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #106496	; 0x1a000
   111a8:	ldr	pc, [ip, #3760]!	; 0xeb0

000111ac <__ctype_get_mb_cur_max@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #106496	; 0x1a000
   111b4:	ldr	pc, [ip, #3752]!	; 0xea8

000111b8 <__fpending@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #106496	; 0x1a000
   111c0:	ldr	pc, [ip, #3744]!	; 0xea0

000111c4 <mbrtowc@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #106496	; 0x1a000
   111cc:	ldr	pc, [ip, #3736]!	; 0xe98

000111d0 <error@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #106496	; 0x1a000
   111d8:	ldr	pc, [ip, #3728]!	; 0xe90

000111dc <open64@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #106496	; 0x1a000
   111e4:	ldr	pc, [ip, #3720]!	; 0xe88

000111e8 <malloc@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #106496	; 0x1a000
   111f0:	ldr	pc, [ip, #3712]!	; 0xe80

000111f4 <__libc_start_main@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #106496	; 0x1a000
   111fc:	ldr	pc, [ip, #3704]!	; 0xe78

00011200 <__freading@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #106496	; 0x1a000
   11208:	ldr	pc, [ip, #3696]!	; 0xe70

0001120c <__gmon_start__@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #106496	; 0x1a000
   11214:	ldr	pc, [ip, #3688]!	; 0xe68

00011218 <getopt_long@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #106496	; 0x1a000
   11220:	ldr	pc, [ip, #3680]!	; 0xe60

00011224 <__ctype_b_loc@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #106496	; 0x1a000
   1122c:	ldr	pc, [ip, #3672]!	; 0xe58

00011230 <exit@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #106496	; 0x1a000
   11238:	ldr	pc, [ip, #3664]!	; 0xe50

0001123c <strlen@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #106496	; 0x1a000
   11244:	ldr	pc, [ip, #3656]!	; 0xe48

00011248 <openat64@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #106496	; 0x1a000
   11250:	ldr	pc, [ip, #3648]!	; 0xe40

00011254 <fchmodat@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #106496	; 0x1a000
   1125c:	ldr	pc, [ip, #3640]!	; 0xe38

00011260 <__errno_location@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #106496	; 0x1a000
   11268:	ldr	pc, [ip, #3632]!	; 0xe30

0001126c <__sprintf_chk@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #106496	; 0x1a000
   11274:	ldr	pc, [ip, #3624]!	; 0xe28

00011278 <__cxa_atexit@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #106496	; 0x1a000
   11280:	ldr	pc, [ip, #3616]!	; 0xe20

00011284 <memset@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #106496	; 0x1a000
   1128c:	ldr	pc, [ip, #3608]!	; 0xe18

00011290 <__printf_chk@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #106496	; 0x1a000
   11298:	ldr	pc, [ip, #3600]!	; 0xe10

0001129c <fileno@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #106496	; 0x1a000
   112a4:	ldr	pc, [ip, #3592]!	; 0xe08

000112a8 <__fprintf_chk@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #106496	; 0x1a000
   112b0:	ldr	pc, [ip, #3584]!	; 0xe00

000112b4 <fclose@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #106496	; 0x1a000
   112bc:	ldr	pc, [ip, #3576]!	; 0xdf8

000112c0 <fseeko64@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #106496	; 0x1a000
   112c8:	ldr	pc, [ip, #3568]!	; 0xdf0

000112cc <fcntl64@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #106496	; 0x1a000
   112d4:	ldr	pc, [ip, #3560]!	; 0xde8

000112d8 <setlocale@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #106496	; 0x1a000
   112e0:	ldr	pc, [ip, #3552]!	; 0xde0

000112e4 <strrchr@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #106496	; 0x1a000
   112ec:	ldr	pc, [ip, #3544]!	; 0xdd8

000112f0 <nl_langinfo@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #106496	; 0x1a000
   112f8:	ldr	pc, [ip, #3536]!	; 0xdd0

000112fc <readdir64@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #106496	; 0x1a000
   11304:	ldr	pc, [ip, #3528]!	; 0xdc8

00011308 <fdopendir@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #106496	; 0x1a000
   11310:	ldr	pc, [ip, #3520]!	; 0xdc0

00011314 <dirfd@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #106496	; 0x1a000
   1131c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011320 <fchdir@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #106496	; 0x1a000
   11328:	ldr	pc, [ip, #3504]!	; 0xdb0

0001132c <qsort@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #106496	; 0x1a000
   11334:	ldr	pc, [ip, #3496]!	; 0xda8

00011338 <bindtextdomain@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #106496	; 0x1a000
   11340:	ldr	pc, [ip, #3488]!	; 0xda0

00011344 <umask@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #106496	; 0x1a000
   1134c:	ldr	pc, [ip, #3480]!	; 0xd98

00011350 <chmod@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #106496	; 0x1a000
   11358:	ldr	pc, [ip, #3472]!	; 0xd90

0001135c <__xstat64@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #106496	; 0x1a000
   11364:	ldr	pc, [ip, #3464]!	; 0xd88

00011368 <strncmp@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #106496	; 0x1a000
   11370:	ldr	pc, [ip, #3456]!	; 0xd80

00011374 <abort@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #106496	; 0x1a000
   1137c:	ldr	pc, [ip, #3448]!	; 0xd78

00011380 <close@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #106496	; 0x1a000
   11388:	ldr	pc, [ip, #3440]!	; 0xd70

0001138c <__lxstat64@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #106496	; 0x1a000
   11394:	ldr	pc, [ip, #3432]!	; 0xd68

00011398 <closedir@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #106496	; 0x1a000
   113a0:	ldr	pc, [ip, #3424]!	; 0xd60

000113a4 <__assert_fail@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #106496	; 0x1a000
   113ac:	ldr	pc, [ip, #3416]!	; 0xd58

Disassembly of section .text:

000113b0 <.text>:
   113b0:	mov	fp, #0
   113b4:	mov	lr, #0
   113b8:	pop	{r1}		; (ldr r1, [sp], #4)
   113bc:	mov	r2, sp
   113c0:	push	{r2}		; (str r2, [sp, #-4]!)
   113c4:	push	{r0}		; (str r0, [sp, #-4]!)
   113c8:	ldr	ip, [pc, #16]	; 113e0 <__assert_fail@plt+0x3c>
   113cc:	push	{ip}		; (str ip, [sp, #-4]!)
   113d0:	ldr	r0, [pc, #12]	; 113e4 <__assert_fail@plt+0x40>
   113d4:	ldr	r3, [pc, #12]	; 113e8 <__assert_fail@plt+0x44>
   113d8:	bl	111f4 <__libc_start_main@plt>
   113dc:	bl	11374 <abort@plt>
   113e0:	andeq	sl, r1, r4, asr r6
   113e4:	andeq	r1, r1, r8, ror r7
   113e8:	strdeq	sl, [r1], -r4
   113ec:	ldr	r3, [pc, #20]	; 11408 <__assert_fail@plt+0x64>
   113f0:	ldr	r2, [pc, #20]	; 1140c <__assert_fail@plt+0x68>
   113f4:	add	r3, pc, r3
   113f8:	ldr	r2, [r3, r2]
   113fc:	cmp	r2, #0
   11400:	bxeq	lr
   11404:	b	1120c <__gmon_start__@plt>
   11408:	andeq	sl, r1, r4, lsl #24
   1140c:	andeq	r0, r0, r8, lsl #2
   11410:	ldr	r0, [pc, #24]	; 11430 <__assert_fail@plt+0x8c>
   11414:	ldr	r3, [pc, #24]	; 11434 <__assert_fail@plt+0x90>
   11418:	cmp	r3, r0
   1141c:	bxeq	lr
   11420:	ldr	r3, [pc, #16]	; 11438 <__assert_fail@plt+0x94>
   11424:	cmp	r3, #0
   11428:	bxeq	lr
   1142c:	bx	r3
   11430:	andeq	ip, r2, r8, ror #2
   11434:	andeq	ip, r2, r8, ror #2
   11438:	andeq	r0, r0, r0
   1143c:	ldr	r0, [pc, #36]	; 11468 <__assert_fail@plt+0xc4>
   11440:	ldr	r1, [pc, #36]	; 1146c <__assert_fail@plt+0xc8>
   11444:	sub	r1, r1, r0
   11448:	asr	r1, r1, #2
   1144c:	add	r1, r1, r1, lsr #31
   11450:	asrs	r1, r1, #1
   11454:	bxeq	lr
   11458:	ldr	r3, [pc, #16]	; 11470 <__assert_fail@plt+0xcc>
   1145c:	cmp	r3, #0
   11460:	bxeq	lr
   11464:	bx	r3
   11468:	andeq	ip, r2, r8, ror #2
   1146c:	andeq	ip, r2, r8, ror #2
   11470:	andeq	r0, r0, r0
   11474:	push	{r4, lr}
   11478:	ldr	r4, [pc, #24]	; 11498 <__assert_fail@plt+0xf4>
   1147c:	ldrb	r3, [r4]
   11480:	cmp	r3, #0
   11484:	popne	{r4, pc}
   11488:	bl	11410 <__assert_fail@plt+0x6c>
   1148c:	mov	r3, #1
   11490:	strb	r3, [r4]
   11494:	pop	{r4, pc}
   11498:	andeq	ip, r2, r4, lsl #3
   1149c:	b	1143c <__assert_fail@plt+0x98>
   114a0:	push	{fp, lr}
   114a4:	mov	fp, sp
   114a8:	sub	sp, sp, #64	; 0x40
   114ac:	mov	r4, r0
   114b0:	cmp	r0, #0
   114b4:	bne	11734 <__assert_fail@plt+0x390>
   114b8:	movw	r1, #42667	; 0xa6ab
   114bc:	mov	r0, #0
   114c0:	mov	r2, #5
   114c4:	movt	r1, #1
   114c8:	bl	1114c <dcgettext@plt>
   114cc:	mov	r1, r0
   114d0:	movw	r0, #49584	; 0xc1b0
   114d4:	movt	r0, #2
   114d8:	ldr	r2, [r0]
   114dc:	mov	r0, #1
   114e0:	mov	r3, r2
   114e4:	str	r2, [sp]
   114e8:	bl	11290 <__printf_chk@plt>
   114ec:	movw	r1, #42802	; 0xa732
   114f0:	mov	r0, #0
   114f4:	mov	r2, #5
   114f8:	movt	r1, #1
   114fc:	bl	1114c <dcgettext@plt>
   11500:	movw	r7, #49532	; 0xc17c
   11504:	movt	r7, #2
   11508:	ldr	r1, [r7]
   1150c:	bl	110d4 <fputs_unlocked@plt>
   11510:	movw	r1, #42907	; 0xa79b
   11514:	mov	r0, #0
   11518:	mov	r2, #5
   1151c:	movt	r1, #1
   11520:	bl	1114c <dcgettext@plt>
   11524:	ldr	r1, [r7]
   11528:	bl	110d4 <fputs_unlocked@plt>
   1152c:	movw	r1, #43108	; 0xa864
   11530:	mov	r0, #0
   11534:	mov	r2, #5
   11538:	movt	r1, #1
   1153c:	bl	1114c <dcgettext@plt>
   11540:	ldr	r1, [r7]
   11544:	bl	110d4 <fputs_unlocked@plt>
   11548:	movw	r1, #43236	; 0xa8e4
   1154c:	mov	r0, #0
   11550:	mov	r2, #5
   11554:	movt	r1, #1
   11558:	bl	1114c <dcgettext@plt>
   1155c:	ldr	r1, [r7]
   11560:	bl	110d4 <fputs_unlocked@plt>
   11564:	movw	r1, #43302	; 0xa926
   11568:	mov	r0, #0
   1156c:	mov	r2, #5
   11570:	movt	r1, #1
   11574:	bl	1114c <dcgettext@plt>
   11578:	ldr	r1, [r7]
   1157c:	bl	110d4 <fputs_unlocked@plt>
   11580:	movw	r1, #43369	; 0xa969
   11584:	mov	r0, #0
   11588:	mov	r2, #5
   1158c:	movt	r1, #1
   11590:	bl	1114c <dcgettext@plt>
   11594:	ldr	r1, [r7]
   11598:	bl	110d4 <fputs_unlocked@plt>
   1159c:	movw	r1, #43414	; 0xa996
   115a0:	mov	r0, #0
   115a4:	mov	r2, #5
   115a8:	movt	r1, #1
   115ac:	bl	1114c <dcgettext@plt>
   115b0:	ldr	r1, [r7]
   115b4:	bl	110d4 <fputs_unlocked@plt>
   115b8:	movw	r1, #43468	; 0xa9cc
   115bc:	mov	r0, #0
   115c0:	mov	r2, #5
   115c4:	movt	r1, #1
   115c8:	bl	1114c <dcgettext@plt>
   115cc:	ldr	r1, [r7]
   115d0:	bl	110d4 <fputs_unlocked@plt>
   115d4:	movw	r0, #45152	; 0xb060
   115d8:	mov	r2, #48	; 0x30
   115dc:	add	r6, sp, #8
   115e0:	movw	r5, #43543	; 0xaa17
   115e4:	movt	r0, #1
   115e8:	movt	r5, #1
   115ec:	add	r1, r0, #32
   115f0:	add	r3, r0, #16
   115f4:	vld1.64	{d18-d19}, [r0], r2
   115f8:	vld1.64	{d16-d17}, [r1]
   115fc:	vld1.64	{d20-d21}, [r3]
   11600:	add	r1, r6, #32
   11604:	vldr	d22, [r0]
   11608:	add	r0, r6, #16
   1160c:	vst1.64	{d16-d17}, [r1]
   11610:	movw	r1, #43817	; 0xab29
   11614:	vst1.64	{d20-d21}, [r0]
   11618:	mov	r0, r6
   1161c:	vst1.64	{d18-d19}, [r0], r2
   11620:	movt	r1, #1
   11624:	vstr	d22, [r0]
   11628:	mov	r0, r5
   1162c:	bl	110ec <strcmp@plt>
   11630:	cmp	r0, #0
   11634:	ldrne	r1, [r6, #8]!
   11638:	cmpne	r1, #0
   1163c:	bne	11628 <__assert_fail@plt+0x284>
   11640:	ldr	r6, [r6, #4]
   11644:	movw	r1, #43912	; 0xab88
   11648:	mov	r0, #0
   1164c:	mov	r2, #5
   11650:	movt	r1, #1
   11654:	bl	1114c <dcgettext@plt>
   11658:	movw	r2, #43641	; 0xaa79
   1165c:	movw	r3, #43935	; 0xab9f
   11660:	mov	r1, r0
   11664:	mov	r0, #1
   11668:	movt	r2, #1
   1166c:	movt	r3, #1
   11670:	bl	11290 <__printf_chk@plt>
   11674:	cmp	r6, #0
   11678:	mov	r0, #5
   1167c:	mov	r1, #0
   11680:	moveq	r6, r5
   11684:	bl	112d8 <setlocale@plt>
   11688:	cmp	r0, #0
   1168c:	beq	116c4 <__assert_fail@plt+0x320>
   11690:	movw	r1, #43975	; 0xabc7
   11694:	mov	r2, #3
   11698:	movt	r1, #1
   1169c:	bl	11368 <strncmp@plt>
   116a0:	cmp	r0, #0
   116a4:	beq	116c4 <__assert_fail@plt+0x320>
   116a8:	movw	r1, #43979	; 0xabcb
   116ac:	mov	r0, #0
   116b0:	mov	r2, #5
   116b4:	movt	r1, #1
   116b8:	bl	1114c <dcgettext@plt>
   116bc:	ldr	r1, [r7]
   116c0:	bl	110d4 <fputs_unlocked@plt>
   116c4:	movw	r1, #44050	; 0xac12
   116c8:	mov	r0, #0
   116cc:	mov	r2, #5
   116d0:	movt	r1, #1
   116d4:	bl	1114c <dcgettext@plt>
   116d8:	movw	r2, #43935	; 0xab9f
   116dc:	mov	r1, r0
   116e0:	mov	r0, #1
   116e4:	mov	r3, r5
   116e8:	movt	r2, #1
   116ec:	bl	11290 <__printf_chk@plt>
   116f0:	movw	r1, #44077	; 0xac2d
   116f4:	mov	r0, #0
   116f8:	mov	r2, #5
   116fc:	movt	r1, #1
   11700:	bl	1114c <dcgettext@plt>
   11704:	movw	r3, #42906	; 0xa79a
   11708:	mov	r1, r0
   1170c:	movw	r0, #43845	; 0xab45
   11710:	cmp	r6, r5
   11714:	mov	r2, r6
   11718:	movt	r0, #1
   1171c:	movt	r3, #1
   11720:	moveq	r3, r0
   11724:	mov	r0, #1
   11728:	bl	11290 <__printf_chk@plt>
   1172c:	mov	r0, r4
   11730:	bl	11230 <exit@plt>
   11734:	movw	r0, #49528	; 0xc178
   11738:	movw	r1, #42628	; 0xa684
   1173c:	mov	r2, #5
   11740:	movt	r0, #2
   11744:	movt	r1, #1
   11748:	ldr	r5, [r0]
   1174c:	mov	r0, #0
   11750:	bl	1114c <dcgettext@plt>
   11754:	mov	r2, r0
   11758:	movw	r0, #49584	; 0xc1b0
   1175c:	mov	r1, #1
   11760:	movt	r0, #2
   11764:	ldr	r3, [r0]
   11768:	mov	r0, r5
   1176c:	bl	112a8 <__fprintf_chk@plt>
   11770:	mov	r0, r4
   11774:	bl	11230 <exit@plt>
   11778:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1177c:	add	fp, sp, #28
   11780:	sub	sp, sp, #156	; 0x9c
   11784:	mov	r7, #0
   11788:	mov	r6, r0
   1178c:	mov	r5, r1
   11790:	str	r7, [sp, #36]	; 0x24
   11794:	ldr	r0, [r1]
   11798:	bl	16f40 <__assert_fail@plt+0x5b9c>
   1179c:	movw	r1, #42906	; 0xa79a
   117a0:	mov	r0, #6
   117a4:	movt	r1, #1
   117a8:	bl	112d8 <setlocale@plt>
   117ac:	movw	r4, #43645	; 0xaa7d
   117b0:	movw	r1, #43549	; 0xaa1d
   117b4:	movt	r4, #1
   117b8:	movt	r1, #1
   117bc:	mov	r0, r4
   117c0:	bl	11338 <bindtextdomain@plt>
   117c4:	mov	r0, r4
   117c8:	bl	11164 <textdomain@plt>
   117cc:	movw	r0, #10452	; 0x28d4
   117d0:	movt	r0, #1
   117d4:	bl	1a658 <__assert_fail@plt+0x92b4>
   117d8:	movw	r0, #49544	; 0xc188
   117dc:	mov	r1, #0
   117e0:	mov	r4, #0
   117e4:	str	r6, [sp, #28]
   117e8:	movt	r0, #2
   117ec:	str	r1, [sp, #32]
   117f0:	strh	r7, [r0]
   117f4:	strb	r7, [r0, #2]
   117f8:	mov	r0, #0
   117fc:	str	r0, [sp, #24]
   11800:	mov	r0, #0
   11804:	b	11844 <__assert_fail@plt+0x4a0>
   11808:	mov	r0, #44	; 0x2c
   1180c:	str	r1, [sp, #32]
   11810:	add	r2, r9, #1
   11814:	strb	r0, [r1, r4]
   11818:	add	r0, r1, r5
   1181c:	mov	r1, r8
   11820:	bl	11128 <memcpy@plt>
   11824:	mov	r4, r6
   11828:	ldr	r6, [sp, #28]
   1182c:	movw	r0, #49544	; 0xc188
   11830:	mov	r1, #1
   11834:	mov	r5, r7
   11838:	movt	r0, #2
   1183c:	strb	r1, [r0]
   11840:	mov	r0, sl
   11844:	movw	r2, #43573	; 0xaa35
   11848:	movw	r3, #44976	; 0xafb0
   1184c:	mov	sl, r0
   11850:	mov	r0, #0
   11854:	mov	r1, r5
   11858:	str	r0, [sp]
   1185c:	mov	r0, r6
   11860:	movt	r2, #1
   11864:	movt	r3, #1
   11868:	bl	11218 <getopt_long@plt>
   1186c:	add	r1, r0, #3
   11870:	lsr	r0, r1, #1
   11874:	cmp	r0, #130	; 0x82
   11878:	bhi	12804 <__assert_fail@plt+0x1460>
   1187c:	add	r2, pc, #4
   11880:	mov	r0, #0
   11884:	ldr	pc, [r2, r1, lsl #2]
   11888:	andeq	r2, r1, r0, asr r7
   1188c:	andeq	r2, r1, r4, lsr #15
   11890:	andeq	r1, r1, r8, ror sp
   11894:	andeq	r2, r1, r4, lsl #16
   11898:	andeq	r2, r1, r4, lsl #16
   1189c:	andeq	r2, r1, r4, lsl #16
   118a0:	andeq	r2, r1, r4, lsl #16
   118a4:	andeq	r2, r1, r4, lsl #16
   118a8:	andeq	r2, r1, r4, lsl #16
   118ac:	andeq	r2, r1, r4, lsl #16
   118b0:	andeq	r2, r1, r4, lsl #16
   118b4:	andeq	r2, r1, r4, lsl #16
   118b8:	andeq	r2, r1, r4, lsl #16
   118bc:	andeq	r2, r1, r4, lsl #16
   118c0:	andeq	r2, r1, r4, lsl #16
   118c4:	andeq	r2, r1, r4, lsl #16
   118c8:	andeq	r2, r1, r4, lsl #16
   118cc:	andeq	r2, r1, r4, lsl #16
   118d0:	andeq	r2, r1, r4, lsl #16
   118d4:	andeq	r2, r1, r4, lsl #16
   118d8:	andeq	r2, r1, r4, lsl #16
   118dc:	andeq	r2, r1, r4, lsl #16
   118e0:	andeq	r2, r1, r4, lsl #16
   118e4:	andeq	r2, r1, r4, lsl #16
   118e8:	andeq	r2, r1, r4, lsl #16
   118ec:	andeq	r2, r1, r4, lsl #16
   118f0:	andeq	r2, r1, r4, lsl #16
   118f4:	andeq	r2, r1, r4, lsl #16
   118f8:	andeq	r2, r1, r4, lsl #16
   118fc:	andeq	r2, r1, r4, lsl #16
   11900:	andeq	r2, r1, r4, lsl #16
   11904:	andeq	r2, r1, r4, lsl #16
   11908:	andeq	r2, r1, r4, lsl #16
   1190c:	andeq	r2, r1, r4, lsl #16
   11910:	andeq	r2, r1, r4, lsl #16
   11914:	andeq	r2, r1, r4, lsl #16
   11918:	andeq	r2, r1, r4, lsl #16
   1191c:	andeq	r2, r1, r4, lsl #16
   11920:	andeq	r2, r1, r4, lsl #16
   11924:	andeq	r2, r1, r4, lsl #16
   11928:	andeq	r2, r1, r4, lsl #16
   1192c:	andeq	r2, r1, r4, lsl #16
   11930:	andeq	r2, r1, r4, lsl #16
   11934:	andeq	r2, r1, r4, lsl #16
   11938:	andeq	r2, r1, r4, lsl #16
   1193c:	andeq	r2, r1, r4, lsl #16
   11940:	andeq	r1, r1, r0, lsr #25
   11944:	andeq	r1, r1, r0, lsr #25
   11948:	andeq	r2, r1, r4, lsl #16
   1194c:	andeq	r2, r1, r4, lsl #16
   11950:	andeq	r2, r1, r4, lsl #16
   11954:	andeq	r1, r1, r0, lsr #25
   11958:	andeq	r1, r1, r0, lsr #25
   1195c:	andeq	r1, r1, r0, lsr #25
   11960:	andeq	r1, r1, r0, lsr #25
   11964:	andeq	r1, r1, r0, lsr #25
   11968:	andeq	r1, r1, r0, lsr #25
   1196c:	andeq	r1, r1, r0, lsr #25
   11970:	andeq	r1, r1, r0, lsr #25
   11974:	andeq	r2, r1, r4, lsl #16
   11978:	andeq	r2, r1, r4, lsl #16
   1197c:	andeq	r2, r1, r4, lsl #16
   11980:	andeq	r2, r1, r4, lsl #16
   11984:	andeq	r2, r1, r4, lsl #16
   11988:	andeq	r1, r1, r0, lsr #25
   1198c:	andeq	r2, r1, r4, lsl #16
   11990:	andeq	r2, r1, r4, lsl #16
   11994:	andeq	r2, r1, r4, lsl #16
   11998:	andeq	r2, r1, r4, lsl #16
   1199c:	andeq	r2, r1, r4, lsl #16
   119a0:	andeq	r2, r1, r4, lsl #16
   119a4:	andeq	r2, r1, r4, lsl #16
   119a8:	andeq	r2, r1, r4, lsl #16
   119ac:	andeq	r2, r1, r4, lsl #16
   119b0:	andeq	r2, r1, r4, lsl #16
   119b4:	andeq	r2, r1, r4, lsl #16
   119b8:	andeq	r2, r1, r4, lsl #16
   119bc:	andeq	r2, r1, r4, lsl #16
   119c0:	andeq	r2, r1, r4, lsl #16
   119c4:	andeq	r2, r1, r4, lsl #16
   119c8:	andeq	r2, r1, r4, lsl #16
   119cc:	andeq	r2, r1, r4, lsl #16
   119d0:	andeq	r2, r1, r4, lsl #16
   119d4:	andeq	r2, r1, r4, lsl #16
   119d8:	andeq	r2, r1, r4, lsl #16
   119dc:	andeq	r1, r1, r8, lsr #26
   119e0:	andeq	r2, r1, r4, lsl #16
   119e4:	andeq	r2, r1, r4, lsl #16
   119e8:	andeq	r2, r1, r4, lsl #16
   119ec:	andeq	r2, r1, r4, lsl #16
   119f0:	andeq	r2, r1, r4, lsl #16
   119f4:	andeq	r1, r1, r0, lsr #25
   119f8:	andeq	r2, r1, r4, lsl #16
   119fc:	andeq	r2, r1, r4, lsl #16
   11a00:	andeq	r2, r1, r4, lsl #16
   11a04:	andeq	r2, r1, r4, lsl #16
   11a08:	andeq	r2, r1, r4, lsl #16
   11a0c:	andeq	r2, r1, r4, lsl #16
   11a10:	andeq	r2, r1, r4, lsl #16
   11a14:	andeq	r2, r1, r4, lsl #16
   11a18:	andeq	r1, r1, r0, lsr #25
   11a1c:	andeq	r2, r1, r4, lsl #16
   11a20:	andeq	r1, r1, r0, asr #26
   11a24:	andeq	r2, r1, r4, lsl #16
   11a28:	andeq	r2, r1, r4, lsl #16
   11a2c:	andeq	r1, r1, r0, lsl sp
   11a30:	andeq	r1, r1, r0, lsr #25
   11a34:	andeq	r2, r1, r4, lsl #16
   11a38:	andeq	r2, r1, r4, lsl #16
   11a3c:	andeq	r2, r1, r4, lsl #16
   11a40:	andeq	r2, r1, r4, lsl #16
   11a44:	andeq	r2, r1, r4, lsl #16
   11a48:	andeq	r2, r1, r4, lsl #16
   11a4c:	andeq	r2, r1, r4, lsl #16
   11a50:	andeq	r1, r1, r0, lsr #25
   11a54:	andeq	r2, r1, r4, lsl #16
   11a58:	andeq	r2, r1, r4, lsl #16
   11a5c:	andeq	r1, r1, r0, lsr #25
   11a60:	andeq	r1, r1, r0, lsr #25
   11a64:	andeq	r1, r1, r0, lsr #25
   11a68:	andeq	r1, r1, r0, lsr #25
   11a6c:	andeq	r1, r1, r4, lsl #26
   11a70:	andeq	r1, r1, r0, lsr #25
   11a74:	andeq	r1, r1, r0, lsr #25
   11a78:	andeq	r2, r1, r4, lsl #16
   11a7c:	andeq	r2, r1, r4, lsl #16
   11a80:	andeq	r2, r1, r4, lsl #16
   11a84:	andeq	r2, r1, r4, lsl #16
   11a88:	andeq	r2, r1, r4, lsl #16
   11a8c:	andeq	r2, r1, r4, lsl #16
   11a90:	andeq	r2, r1, r4, lsl #16
   11a94:	andeq	r2, r1, r4, lsl #16
   11a98:	andeq	r2, r1, r4, lsl #16
   11a9c:	andeq	r2, r1, r4, lsl #16
   11aa0:	andeq	r2, r1, r4, lsl #16
   11aa4:	andeq	r2, r1, r4, lsl #16
   11aa8:	andeq	r2, r1, r4, lsl #16
   11aac:	andeq	r2, r1, r4, lsl #16
   11ab0:	andeq	r2, r1, r4, lsl #16
   11ab4:	andeq	r2, r1, r4, lsl #16
   11ab8:	andeq	r2, r1, r4, lsl #16
   11abc:	andeq	r2, r1, r4, lsl #16
   11ac0:	andeq	r2, r1, r4, lsl #16
   11ac4:	andeq	r2, r1, r4, lsl #16
   11ac8:	andeq	r2, r1, r4, lsl #16
   11acc:	andeq	r2, r1, r4, lsl #16
   11ad0:	andeq	r2, r1, r4, lsl #16
   11ad4:	andeq	r2, r1, r4, lsl #16
   11ad8:	andeq	r2, r1, r4, lsl #16
   11adc:	andeq	r2, r1, r4, lsl #16
   11ae0:	andeq	r2, r1, r4, lsl #16
   11ae4:	andeq	r2, r1, r4, lsl #16
   11ae8:	andeq	r2, r1, r4, lsl #16
   11aec:	andeq	r2, r1, r4, lsl #16
   11af0:	andeq	r2, r1, r4, lsl #16
   11af4:	andeq	r2, r1, r4, lsl #16
   11af8:	andeq	r2, r1, r4, lsl #16
   11afc:	andeq	r2, r1, r4, lsl #16
   11b00:	andeq	r2, r1, r4, lsl #16
   11b04:	andeq	r2, r1, r4, lsl #16
   11b08:	andeq	r2, r1, r4, lsl #16
   11b0c:	andeq	r2, r1, r4, lsl #16
   11b10:	andeq	r2, r1, r4, lsl #16
   11b14:	andeq	r2, r1, r4, lsl #16
   11b18:	andeq	r2, r1, r4, lsl #16
   11b1c:	andeq	r2, r1, r4, lsl #16
   11b20:	andeq	r2, r1, r4, lsl #16
   11b24:	andeq	r2, r1, r4, lsl #16
   11b28:	andeq	r2, r1, r4, lsl #16
   11b2c:	andeq	r2, r1, r4, lsl #16
   11b30:	andeq	r2, r1, r4, lsl #16
   11b34:	andeq	r2, r1, r4, lsl #16
   11b38:	andeq	r2, r1, r4, lsl #16
   11b3c:	andeq	r2, r1, r4, lsl #16
   11b40:	andeq	r2, r1, r4, lsl #16
   11b44:	andeq	r2, r1, r4, lsl #16
   11b48:	andeq	r2, r1, r4, lsl #16
   11b4c:	andeq	r2, r1, r4, lsl #16
   11b50:	andeq	r2, r1, r4, lsl #16
   11b54:	andeq	r2, r1, r4, lsl #16
   11b58:	andeq	r2, r1, r4, lsl #16
   11b5c:	andeq	r2, r1, r4, lsl #16
   11b60:	andeq	r2, r1, r4, lsl #16
   11b64:	andeq	r2, r1, r4, lsl #16
   11b68:	andeq	r2, r1, r4, lsl #16
   11b6c:	andeq	r2, r1, r4, lsl #16
   11b70:	andeq	r2, r1, r4, lsl #16
   11b74:	andeq	r2, r1, r4, lsl #16
   11b78:	andeq	r2, r1, r4, lsl #16
   11b7c:	andeq	r2, r1, r4, lsl #16
   11b80:	andeq	r2, r1, r4, lsl #16
   11b84:	andeq	r2, r1, r4, lsl #16
   11b88:	andeq	r2, r1, r4, lsl #16
   11b8c:	andeq	r2, r1, r4, lsl #16
   11b90:	andeq	r2, r1, r4, lsl #16
   11b94:	andeq	r2, r1, r4, lsl #16
   11b98:	andeq	r2, r1, r4, lsl #16
   11b9c:	andeq	r2, r1, r4, lsl #16
   11ba0:	andeq	r2, r1, r4, lsl #16
   11ba4:	andeq	r2, r1, r4, lsl #16
   11ba8:	andeq	r2, r1, r4, lsl #16
   11bac:	andeq	r2, r1, r4, lsl #16
   11bb0:	andeq	r2, r1, r4, lsl #16
   11bb4:	andeq	r2, r1, r4, lsl #16
   11bb8:	andeq	r2, r1, r4, lsl #16
   11bbc:	andeq	r2, r1, r4, lsl #16
   11bc0:	andeq	r2, r1, r4, lsl #16
   11bc4:	andeq	r2, r1, r4, lsl #16
   11bc8:	andeq	r2, r1, r4, lsl #16
   11bcc:	andeq	r2, r1, r4, lsl #16
   11bd0:	andeq	r2, r1, r4, lsl #16
   11bd4:	andeq	r2, r1, r4, lsl #16
   11bd8:	andeq	r2, r1, r4, lsl #16
   11bdc:	andeq	r2, r1, r4, lsl #16
   11be0:	andeq	r2, r1, r4, lsl #16
   11be4:	andeq	r2, r1, r4, lsl #16
   11be8:	andeq	r2, r1, r4, lsl #16
   11bec:	andeq	r2, r1, r4, lsl #16
   11bf0:	andeq	r2, r1, r4, lsl #16
   11bf4:	andeq	r2, r1, r4, lsl #16
   11bf8:	andeq	r2, r1, r4, lsl #16
   11bfc:	andeq	r2, r1, r4, lsl #16
   11c00:	andeq	r2, r1, r4, lsl #16
   11c04:	andeq	r2, r1, r4, lsl #16
   11c08:	andeq	r2, r1, r4, lsl #16
   11c0c:	andeq	r2, r1, r4, lsl #16
   11c10:	andeq	r2, r1, r4, lsl #16
   11c14:	andeq	r2, r1, r4, lsl #16
   11c18:	andeq	r2, r1, r4, lsl #16
   11c1c:	andeq	r2, r1, r4, lsl #16
   11c20:	andeq	r2, r1, r4, lsl #16
   11c24:	andeq	r2, r1, r4, lsl #16
   11c28:	andeq	r2, r1, r4, lsl #16
   11c2c:	andeq	r2, r1, r4, lsl #16
   11c30:	andeq	r2, r1, r4, lsl #16
   11c34:	andeq	r2, r1, r4, lsl #16
   11c38:	andeq	r2, r1, r4, lsl #16
   11c3c:	andeq	r2, r1, r4, lsl #16
   11c40:	andeq	r2, r1, r4, lsl #16
   11c44:	andeq	r2, r1, r4, lsl #16
   11c48:	andeq	r2, r1, r4, lsl #16
   11c4c:	andeq	r2, r1, r4, lsl #16
   11c50:	andeq	r2, r1, r4, lsl #16
   11c54:	andeq	r2, r1, r4, lsl #16
   11c58:	andeq	r2, r1, r4, lsl #16
   11c5c:	andeq	r2, r1, r4, lsl #16
   11c60:	andeq	r2, r1, r4, lsl #16
   11c64:	andeq	r2, r1, r4, lsl #16
   11c68:	andeq	r2, r1, r4, lsl #16
   11c6c:	andeq	r2, r1, r4, lsl #16
   11c70:	andeq	r2, r1, r4, lsl #16
   11c74:	andeq	r2, r1, r4, lsl #16
   11c78:	andeq	r2, r1, r4, lsl #16
   11c7c:	andeq	r2, r1, r4, lsl #16
   11c80:	andeq	r2, r1, r4, lsl #16
   11c84:	andeq	r2, r1, r4, lsl #16
   11c88:	andeq	r2, r1, r4, lsl #16
   11c8c:	andeq	r2, r1, r4, lsl #16
   11c90:	andeq	r2, r1, r4, lsl #16
   11c94:	andeq	r1, r1, r4, asr #16
   11c98:	andeq	r1, r1, r8, asr sp
   11c9c:	andeq	r1, r1, r0, ror #26
   11ca0:	movw	r0, #49520	; 0xc170
   11ca4:	mov	r7, r5
   11ca8:	movt	r0, #2
   11cac:	ldr	r0, [r0]
   11cb0:	add	r0, r5, r0, lsl #2
   11cb4:	ldr	r8, [r0, #-4]
   11cb8:	mov	r0, r8
   11cbc:	bl	1123c <strlen@plt>
   11cc0:	cmp	r4, #0
   11cc4:	mov	r5, r4
   11cc8:	mov	r9, r0
   11ccc:	addne	r5, r5, #1
   11cd0:	add	r6, r0, r5
   11cd4:	ldr	r0, [sp, #36]	; 0x24
   11cd8:	cmp	r0, r6
   11cdc:	bls	11ce8 <__assert_fail@plt+0x944>
   11ce0:	ldr	r1, [sp, #32]
   11ce4:	b	11808 <__assert_fail@plt+0x464>
   11ce8:	add	r0, r6, #1
   11cec:	add	r1, sp, #36	; 0x24
   11cf0:	str	r0, [sp, #36]	; 0x24
   11cf4:	ldr	r0, [sp, #32]
   11cf8:	bl	19764 <__assert_fail@plt+0x83c0>
   11cfc:	mov	r1, r0
   11d00:	b	11808 <__assert_fail@plt+0x464>
   11d04:	movw	r0, #49432	; 0xc118
   11d08:	mov	r1, #0
   11d0c:	b	11d48 <__assert_fail@plt+0x9a4>
   11d10:	movw	r0, #49544	; 0xc188
   11d14:	mov	r1, #1
   11d18:	movt	r0, #2
   11d1c:	strb	r1, [r0, #1]
   11d20:	mov	r0, sl
   11d24:	b	11844 <__assert_fail@plt+0x4a0>
   11d28:	movw	r0, #49544	; 0xc188
   11d2c:	mov	r1, #1
   11d30:	movt	r0, #2
   11d34:	strb	r1, [r0, #2]
   11d38:	mov	r0, sl
   11d3c:	b	11844 <__assert_fail@plt+0x4a0>
   11d40:	movw	r0, #49432	; 0xc118
   11d44:	mov	r1, #1
   11d48:	movt	r0, #2
   11d4c:	str	r1, [r0]
   11d50:	mov	r0, sl
   11d54:	b	11844 <__assert_fail@plt+0x4a0>
   11d58:	mov	r0, #1
   11d5c:	b	11844 <__assert_fail@plt+0x4a0>
   11d60:	movw	r0, #49536	; 0xc180
   11d64:	movt	r0, #2
   11d68:	ldr	r0, [r0]
   11d6c:	str	r0, [sp, #24]
   11d70:	mov	r0, sl
   11d74:	b	11844 <__assert_fail@plt+0x4a0>
   11d78:	ldr	r4, [sp, #24]
   11d7c:	cmp	r4, #0
   11d80:	beq	11da0 <__assert_fail@plt+0x9fc>
   11d84:	ldr	r0, [sp, #32]
   11d88:	mov	r8, #0
   11d8c:	cmp	r0, #0
   11d90:	beq	11dc8 <__assert_fail@plt+0xa24>
   11d94:	movw	r1, #43684	; 0xaaa4
   11d98:	movt	r1, #1
   11d9c:	b	12814 <__assert_fail@plt+0x1470>
   11da0:	ldr	r8, [sp, #32]
   11da4:	cmp	r8, #0
   11da8:	bne	11dc8 <__assert_fail@plt+0xa24>
   11dac:	movw	r0, #49520	; 0xc170
   11db0:	movt	r0, #2
   11db4:	mov	r2, r0
   11db8:	ldr	r0, [r0]
   11dbc:	add	r1, r0, #1
   11dc0:	str	r1, [r2]
   11dc4:	ldr	r8, [r5, r0, lsl #2]
   11dc8:	movw	r0, #49520	; 0xc170
   11dcc:	movw	r7, #49544	; 0xc188
   11dd0:	movt	r0, #2
   11dd4:	movt	r7, #2
   11dd8:	ldr	r0, [r0]
   11ddc:	cmp	r0, r6
   11de0:	bge	127b0 <__assert_fail@plt+0x140c>
   11de4:	cmp	r4, #0
   11de8:	beq	11e68 <__assert_fail@plt+0xac4>
   11dec:	mov	r0, r4
   11df0:	bl	16d2c <__assert_fail@plt+0x5988>
   11df4:	cmp	r0, #0
   11df8:	str	r0, [r7, #4]
   11dfc:	beq	12838 <__assert_fail@plt+0x1494>
   11e00:	ldrb	r0, [r7, #2]
   11e04:	and	r0, sl, r0
   11e08:	tst	r0, #1
   11e0c:	beq	11e98 <__assert_fail@plt+0xaf4>
   11e10:	add	r0, r7, #16
   11e14:	bl	18ed4 <__assert_fail@plt+0x7b30>
   11e18:	cmp	r0, #0
   11e1c:	str	r0, [r7, #12]
   11e20:	bne	11ea0 <__assert_fail@plt+0xafc>
   11e24:	bl	11260 <__errno_location@plt>
   11e28:	ldr	r4, [r0]
   11e2c:	movw	r1, #43769	; 0xaaf9
   11e30:	mov	r0, #0
   11e34:	mov	r2, #5
   11e38:	movt	r1, #1
   11e3c:	bl	1114c <dcgettext@plt>
   11e40:	movw	r1, #46431	; 0xb55f
   11e44:	mov	r5, r0
   11e48:	mov	r0, #4
   11e4c:	movt	r1, #1
   11e50:	bl	18994 <__assert_fail@plt+0x75f0>
   11e54:	mov	r3, r0
   11e58:	mov	r0, #1
   11e5c:	mov	r1, r4
   11e60:	mov	r2, r5
   11e64:	bl	111d0 <error@plt>
   11e68:	mov	r0, r8
   11e6c:	bl	168c4 <__assert_fail@plt+0x5520>
   11e70:	cmp	r0, #0
   11e74:	str	r0, [r7, #4]
   11e78:	beq	12878 <__assert_fail@plt+0x14d4>
   11e7c:	mov	r0, #0
   11e80:	bl	11344 <umask@plt>
   11e84:	str	r0, [r7, #8]
   11e88:	ldrb	r0, [r7, #2]
   11e8c:	and	r0, sl, r0
   11e90:	tst	r0, #1
   11e94:	bne	11e10 <__assert_fail@plt+0xa6c>
   11e98:	mov	r0, #0
   11e9c:	str	r0, [r7, #12]
   11ea0:	movw	r0, #49520	; 0xc170
   11ea4:	movw	r1, #1041	; 0x411
   11ea8:	mov	r2, #0
   11eac:	movt	r0, #2
   11eb0:	ldr	r0, [r0]
   11eb4:	add	r0, r5, r0, lsl #2
   11eb8:	bl	19bd4 <__assert_fail@plt+0x8830>
   11ebc:	str	r0, [sp, #32]
   11ec0:	bl	13724 <__assert_fail@plt+0x2380>
   11ec4:	cmp	r0, #0
   11ec8:	beq	126b8 <__assert_fail@plt+0x1314>
   11ecc:	mov	r8, r0
   11ed0:	sub	r0, fp, #40	; 0x28
   11ed4:	mov	r4, #1
   11ed8:	add	r0, r0, #1
   11edc:	str	r0, [sp, #20]
   11ee0:	add	r0, sp, #40	; 0x28
   11ee4:	add	r0, r0, #1
   11ee8:	str	r0, [sp, #24]
   11eec:	b	11f8c <__assert_fail@plt+0xbe8>
   11ef0:	ldr	r0, [sp, #32]
   11ef4:	mov	r6, #1
   11ef8:	mov	r1, r8
   11efc:	mov	r2, #1
   11f00:	str	r6, [r8, #16]
   11f04:	bl	14fb8 <__assert_fail@plt+0x3c14>
   11f08:	b	1269c <__assert_fail@plt+0x12f8>
   11f0c:	movw	r1, #44506	; 0xadda
   11f10:	mov	r0, #0
   11f14:	mov	r2, #5
   11f18:	movt	r1, #1
   11f1c:	bl	1114c <dcgettext@plt>
   11f20:	mov	r6, r0
   11f24:	mov	r0, #4
   11f28:	mov	r1, r5
   11f2c:	bl	18994 <__assert_fail@plt+0x75f0>
   11f30:	mov	r3, r0
   11f34:	mov	r0, #0
   11f38:	mov	r1, #0
   11f3c:	mov	r2, r6
   11f40:	bl	111d0 <error@plt>
   11f44:	movw	r1, #44609	; 0xae41
   11f48:	mov	r0, #0
   11f4c:	mov	r2, #5
   11f50:	mov	r6, #0
   11f54:	movt	r1, #1
   11f58:	bl	1114c <dcgettext@plt>
   11f5c:	mov	r2, r0
   11f60:	mov	r0, #0
   11f64:	mov	r1, #0
   11f68:	bl	111d0 <error@plt>
   11f6c:	ldr	r5, [sp, #32]
   11f70:	mov	r1, r8
   11f74:	mov	r2, #4
   11f78:	mov	r0, r5
   11f7c:	bl	14fb8 <__assert_fail@plt+0x3c14>
   11f80:	mov	r0, r5
   11f84:	bl	13724 <__assert_fail@plt+0x2380>
   11f88:	b	1269c <__assert_fail@plt+0x12f8>
   11f8c:	ldr	r9, [r8, #24]
   11f90:	ldr	r5, [r8, #28]
   11f94:	ldrh	r0, [r8, #56]	; 0x38
   11f98:	sub	r0, r0, #2
   11f9c:	cmp	r0, #11
   11fa0:	bhi	12038 <__assert_fail@plt+0xc94>
   11fa4:	add	r1, pc, #4
   11fa8:	mov	r6, #1
   11fac:	ldr	pc, [r1, r0, lsl #2]
   11fb0:	andeq	r1, r1, r0, ror #31
   11fb4:	andeq	r2, r1, r8, lsr r0
   11fb8:	andeq	r2, r1, r0, lsl r1
   11fbc:	andeq	r2, r1, r8, lsr r0
   11fc0:	muleq	r1, ip, r6
   11fc4:	andeq	r2, r1, r8, asr #3
   11fc8:	andeq	r2, r1, r8, lsr r0
   11fcc:	andeq	r2, r1, r8, lsr r0
   11fd0:	andeq	r2, r1, r4, lsl r2
   11fd4:	andeq	r2, r1, r8, lsr r0
   11fd8:	andeq	r2, r1, r8, lsr r0
   11fdc:	andeq	r2, r1, r4, ror r1
   11fe0:	ldr	r0, [sp, #32]
   11fe4:	mov	r1, r8
   11fe8:	bl	19c20 <__assert_fail@plt+0x887c>
   11fec:	cmp	r0, #0
   11ff0:	beq	12038 <__assert_fail@plt+0xc94>
   11ff4:	movw	r1, #44320	; 0xad20
   11ff8:	mov	r0, #0
   11ffc:	mov	r2, #5
   12000:	mov	r6, #0
   12004:	movt	r1, #1
   12008:	bl	1114c <dcgettext@plt>
   1200c:	mov	r8, r0
   12010:	mov	r0, #0
   12014:	mov	r1, #3
   12018:	mov	r2, r5
   1201c:	bl	18c10 <__assert_fail@plt+0x786c>
   12020:	mov	r3, r0
   12024:	mov	r0, #0
   12028:	mov	r1, #0
   1202c:	mov	r2, r8
   12030:	bl	111d0 <error@plt>
   12034:	b	1269c <__assert_fail@plt+0x12f8>
   12038:	ldr	r0, [r7, #12]
   1203c:	cmp	r0, #0
   12040:	beq	120ec <__assert_fail@plt+0xd48>
   12044:	ldrd	r2, [r0]
   12048:	ldrd	r6, [r8, #160]	; 0xa0
   1204c:	eor	r1, r7, r3
   12050:	movw	r7, #49544	; 0xc188
   12054:	eor	r2, r6, r2
   12058:	movt	r7, #2
   1205c:	orrs	r1, r2, r1
   12060:	bne	120ec <__assert_fail@plt+0xd48>
   12064:	ldrd	r0, [r0, #8]
   12068:	ldrd	r2, [r8, #64]	; 0x40
   1206c:	eor	r1, r3, r1
   12070:	eor	r0, r2, r0
   12074:	orrs	r0, r0, r1
   12078:	bne	120ec <__assert_fail@plt+0xd48>
   1207c:	movw	r9, #46431	; 0xb55f
   12080:	mov	r0, r5
   12084:	movt	r9, #1
   12088:	mov	r1, r9
   1208c:	bl	110ec <strcmp@plt>
   12090:	cmp	r0, #0
   12094:	beq	11f0c <__assert_fail@plt+0xb68>
   12098:	movw	r1, #44551	; 0xae07
   1209c:	mov	r0, #0
   120a0:	mov	r2, #5
   120a4:	movt	r1, #1
   120a8:	bl	1114c <dcgettext@plt>
   120ac:	mov	sl, r0
   120b0:	mov	r0, #0
   120b4:	mov	r1, #4
   120b8:	mov	r2, r5
   120bc:	bl	188ec <__assert_fail@plt+0x7548>
   120c0:	mov	r6, r0
   120c4:	mov	r0, #1
   120c8:	mov	r1, #4
   120cc:	mov	r2, r9
   120d0:	bl	188ec <__assert_fail@plt+0x7548>
   120d4:	str	r0, [sp]
   120d8:	mov	r0, #0
   120dc:	mov	r1, #0
   120e0:	mov	r2, sl
   120e4:	mov	r3, r6
   120e8:	b	11f40 <__assert_fail@plt+0xb9c>
   120ec:	ldr	sl, [r8, #80]	; 0x50
   120f0:	str	r5, [sp, #28]
   120f4:	and	r0, sl, #61440	; 0xf000
   120f8:	cmp	r0, #40960	; 0xa000
   120fc:	bne	12340 <__assert_fail@plt+0xf9c>
   12100:	mov	r6, #2
   12104:	mov	r5, #0
   12108:	mov	sl, #0
   1210c:	b	12298 <__assert_fail@plt+0xef4>
   12110:	ldrb	r0, [r7, #1]
   12114:	str	r5, [sp, #28]
   12118:	mov	r5, #0
   1211c:	mov	sl, #0
   12120:	mov	r6, #0
   12124:	cmp	r0, #0
   12128:	bne	12298 <__assert_fail@plt+0xef4>
   1212c:	ldr	r6, [r8, #32]
   12130:	movw	r1, #44257	; 0xace1
   12134:	mov	r0, #0
   12138:	mov	r2, #5
   1213c:	mov	r5, #0
   12140:	movt	r1, #1
   12144:	bl	1114c <dcgettext@plt>
   12148:	ldr	r1, [sp, #28]
   1214c:	mov	r7, r0
   12150:	mov	r0, #4
   12154:	bl	18994 <__assert_fail@plt+0x75f0>
   12158:	mov	r2, r7
   1215c:	movw	r7, #49544	; 0xc188
   12160:	mov	r3, r0
   12164:	mov	r0, #0
   12168:	mov	r1, r6
   1216c:	movt	r7, #2
   12170:	b	1228c <__assert_fail@plt+0xee8>
   12174:	ldrb	r0, [r7, #1]
   12178:	str	r5, [sp, #28]
   1217c:	mov	r5, #0
   12180:	mov	sl, #0
   12184:	mov	r6, #0
   12188:	cmp	r0, #0
   1218c:	bne	12298 <__assert_fail@plt+0xef4>
   12190:	movw	r1, #44282	; 0xacfa
   12194:	mov	r0, #0
   12198:	mov	r2, #5
   1219c:	mov	r5, #0
   121a0:	movt	r1, #1
   121a4:	bl	1114c <dcgettext@plt>
   121a8:	ldr	r1, [sp, #28]
   121ac:	mov	r6, r0
   121b0:	mov	r0, #4
   121b4:	bl	18994 <__assert_fail@plt+0x75f0>
   121b8:	mov	r3, r0
   121bc:	mov	r0, #0
   121c0:	mov	r1, #0
   121c4:	b	12288 <__assert_fail@plt+0xee4>
   121c8:	ldrb	r0, [r7, #1]
   121cc:	str	r5, [sp, #28]
   121d0:	mov	r5, #0
   121d4:	mov	sl, #0
   121d8:	mov	r6, #0
   121dc:	cmp	r0, #0
   121e0:	bne	12298 <__assert_fail@plt+0xef4>
   121e4:	ldr	r2, [sp, #28]
   121e8:	ldr	r6, [r8, #32]
   121ec:	mov	r0, #0
   121f0:	mov	r1, #3
   121f4:	mov	r5, #0
   121f8:	bl	18c10 <__assert_fail@plt+0x786c>
   121fc:	movw	r2, #43814	; 0xab26
   12200:	mov	r3, r0
   12204:	mov	r0, #0
   12208:	mov	r1, r6
   1220c:	movt	r2, #1
   12210:	b	1228c <__assert_fail@plt+0xee8>
   12214:	ldr	r0, [r8, #48]	; 0x30
   12218:	cmp	r0, #0
   1221c:	bne	1222c <__assert_fail@plt+0xe88>
   12220:	ldr	r0, [r8, #16]
   12224:	cmp	r0, #0
   12228:	beq	11ef0 <__assert_fail@plt+0xb4c>
   1222c:	ldrb	r0, [r7, #1]
   12230:	str	r5, [sp, #28]
   12234:	mov	r5, #0
   12238:	mov	sl, #0
   1223c:	mov	r6, #0
   12240:	cmp	r0, #0
   12244:	bne	12298 <__assert_fail@plt+0xef4>
   12248:	ldr	r7, [r8, #32]
   1224c:	movw	r1, #44240	; 0xacd0
   12250:	mov	r0, #0
   12254:	mov	r2, #5
   12258:	mov	r5, #0
   1225c:	movt	r1, #1
   12260:	bl	1114c <dcgettext@plt>
   12264:	ldr	r1, [sp, #28]
   12268:	mov	r6, r0
   1226c:	mov	r0, #4
   12270:	bl	18994 <__assert_fail@plt+0x75f0>
   12274:	mov	r1, r7
   12278:	movw	r7, #49544	; 0xc188
   1227c:	mov	r3, r0
   12280:	mov	r0, #0
   12284:	movt	r7, #2
   12288:	mov	r2, r6
   1228c:	bl	111d0 <error@plt>
   12290:	mov	sl, #0
   12294:	mov	r6, #0
   12298:	movw	r0, #49432	; 0xc118
   1229c:	movt	r0, #2
   122a0:	ldr	r0, [r0]
   122a4:	cmp	r0, #2
   122a8:	beq	12664 <__assert_fail@plt+0x12c0>
   122ac:	cmp	r6, #4
   122b0:	bne	1244c <__assert_fail@plt+0x10a8>
   122b4:	tst	r5, #3584	; 0xe00
   122b8:	mov	r0, r5
   122bc:	beq	123ec <__assert_fail@plt+0x1048>
   122c0:	ldr	r0, [sp, #32]
   122c4:	mov	r2, r9
   122c8:	add	r3, sp, #40	; 0x28
   122cc:	ldr	r1, [r0, #32]
   122d0:	mov	r0, #0
   122d4:	str	r0, [sp]
   122d8:	mov	r0, #3
   122dc:	bl	11170 <__fxstatat64@plt>
   122e0:	cmp	r0, #0
   122e4:	beq	123e8 <__assert_fail@plt+0x1044>
   122e8:	ldrb	r0, [r7, #1]
   122ec:	cmp	r0, #0
   122f0:	bne	12448 <__assert_fail@plt+0x10a4>
   122f4:	bl	11260 <__errno_location@plt>
   122f8:	ldr	r6, [r0]
   122fc:	movw	r1, #44720	; 0xaeb0
   12300:	mov	r0, #0
   12304:	mov	r2, #5
   12308:	movt	r1, #1
   1230c:	bl	1114c <dcgettext@plt>
   12310:	ldr	r1, [sp, #28]
   12314:	mov	r7, r0
   12318:	mov	r0, #4
   1231c:	bl	18994 <__assert_fail@plt+0x75f0>
   12320:	mov	r3, r0
   12324:	mov	r2, r7
   12328:	movw	r7, #49544	; 0xc188
   1232c:	mov	r0, #0
   12330:	mov	r1, r6
   12334:	movt	r7, #2
   12338:	bl	111d0 <error@plt>
   1233c:	b	12448 <__assert_fail@plt+0x10a4>
   12340:	ldr	r3, [r7, #4]
   12344:	ldr	r2, [r7, #8]
   12348:	sub	r0, r0, #16384	; 0x4000
   1234c:	mov	r1, #0
   12350:	clz	r0, r0
   12354:	str	r1, [sp]
   12358:	lsr	r1, r0, #5
   1235c:	mov	r0, sl
   12360:	bl	16d90 <__assert_fail@plt+0x59ec>
   12364:	mov	r5, r0
   12368:	ldr	r0, [sp, #32]
   1236c:	mov	r1, r9
   12370:	mov	r3, #0
   12374:	mov	r2, r5
   12378:	ldr	r0, [r0, #32]
   1237c:	bl	129c0 <__assert_fail@plt+0x161c>
   12380:	cmp	r0, #0
   12384:	beq	12618 <__assert_fail@plt+0x1274>
   12388:	ldrb	r0, [r7, #1]
   1238c:	mov	r6, #1
   12390:	cmp	r0, #0
   12394:	bne	12298 <__assert_fail@plt+0xef4>
   12398:	bl	11260 <__errno_location@plt>
   1239c:	ldr	r0, [r0]
   123a0:	movw	r1, #44658	; 0xae72
   123a4:	mov	r2, #5
   123a8:	movt	r1, #1
   123ac:	str	r0, [sp, #16]
   123b0:	mov	r0, #0
   123b4:	bl	1114c <dcgettext@plt>
   123b8:	ldr	r1, [sp, #28]
   123bc:	mov	r7, r0
   123c0:	mov	r0, #4
   123c4:	bl	18994 <__assert_fail@plt+0x75f0>
   123c8:	ldr	r1, [sp, #16]
   123cc:	mov	r3, r0
   123d0:	mov	r2, r7
   123d4:	movw	r7, #49544	; 0xc188
   123d8:	mov	r0, #0
   123dc:	movt	r7, #2
   123e0:	bl	111d0 <error@plt>
   123e4:	b	12298 <__assert_fail@plt+0xef4>
   123e8:	ldr	r0, [sp, #56]	; 0x38
   123ec:	eor	r0, r0, sl
   123f0:	movw	r1, #4095	; 0xfff
   123f4:	tst	r0, r1
   123f8:	beq	12448 <__assert_fail@plt+0x10a4>
   123fc:	ldr	r1, [sp, #28]
   12400:	mov	r0, #4
   12404:	mov	r6, #4
   12408:	bl	18994 <__assert_fail@plt+0x75f0>
   1240c:	mov	r9, r0
   12410:	mov	r0, r5
   12414:	add	r1, sp, #40	; 0x28
   12418:	bl	12b18 <__assert_fail@plt+0x1774>
   1241c:	mov	r7, #0
   12420:	mov	r0, sl
   12424:	sub	r1, fp, #40	; 0x28
   12428:	strb	r7, [sp, #50]	; 0x32
   1242c:	bl	12b18 <__assert_fail@plt+0x1774>
   12430:	movw	r1, #44831	; 0xaf1f
   12434:	strb	r7, [fp, #-30]	; 0xffffffe2
   12438:	mov	r7, r5
   1243c:	bfc	r7, #12, #20
   12440:	movt	r1, #1
   12444:	b	12628 <__assert_fail@plt+0x1284>
   12448:	mov	r6, #3
   1244c:	cmp	r6, #4
   12450:	movwne	r0, #49432	; 0xc118
   12454:	movtne	r0, #2
   12458:	ldrne	r0, [r0]
   1245c:	cmpne	r0, #0
   12460:	bne	12664 <__assert_fail@plt+0x12c0>
   12464:	ldr	r1, [sp, #28]
   12468:	mov	r0, #4
   1246c:	bl	18994 <__assert_fail@plt+0x75f0>
   12470:	mov	r9, r0
   12474:	cmp	r6, #0
   12478:	beq	12570 <__assert_fail@plt+0x11cc>
   1247c:	cmp	r6, #2
   12480:	bne	125a4 <__assert_fail@plt+0x1200>
   12484:	movw	r1, #44749	; 0xaecd
   12488:	mov	r0, #0
   1248c:	mov	r2, #5
   12490:	movt	r1, #1
   12494:	bl	1114c <dcgettext@plt>
   12498:	mov	r1, r0
   1249c:	mov	r0, #1
   124a0:	mov	r2, r9
   124a4:	bl	11290 <__printf_chk@plt>
   124a8:	mov	r6, #2
   124ac:	cmp	r6, #3
   124b0:	bcc	1266c <__assert_fail@plt+0x12c8>
   124b4:	ldrb	r0, [r7]
   124b8:	cmp	r0, #1
   124bc:	bne	1266c <__assert_fail@plt+0x12c8>
   124c0:	mov	r0, #0
   124c4:	ldr	r3, [r7, #4]
   124c8:	mov	r2, #0
   124cc:	str	r0, [sp]
   124d0:	and	r0, sl, #61440	; 0xf000
   124d4:	sub	r0, r0, #16384	; 0x4000
   124d8:	clz	r0, r0
   124dc:	lsr	r1, r0, #5
   124e0:	mov	r0, sl
   124e4:	bl	16d90 <__assert_fail@plt+0x59ec>
   124e8:	mov	r7, r0
   124ec:	mvn	r0, r0
   124f0:	tst	r5, r0
   124f4:	beq	1266c <__assert_fail@plt+0x12c8>
   124f8:	mov	r0, r5
   124fc:	add	r1, sp, #40	; 0x28
   12500:	bl	12b18 <__assert_fail@plt+0x1774>
   12504:	mov	r0, r7
   12508:	sub	r1, fp, #40	; 0x28
   1250c:	bl	12b18 <__assert_fail@plt+0x1774>
   12510:	mov	r0, #0
   12514:	movw	r1, #44685	; 0xae8d
   12518:	mov	r2, #5
   1251c:	strb	r0, [sp, #50]	; 0x32
   12520:	strb	r0, [fp, #-30]	; 0xffffffe2
   12524:	mov	r0, #0
   12528:	movt	r1, #1
   1252c:	bl	1114c <dcgettext@plt>
   12530:	ldr	r2, [sp, #28]
   12534:	mov	r5, r0
   12538:	mov	r0, #0
   1253c:	mov	r1, #3
   12540:	bl	18c10 <__assert_fail@plt+0x786c>
   12544:	mov	r3, r0
   12548:	ldr	r0, [sp, #24]
   1254c:	mov	r1, #0
   12550:	mov	r2, r5
   12554:	str	r0, [sp]
   12558:	ldr	r0, [sp, #20]
   1255c:	str	r0, [sp, #4]
   12560:	mov	r0, #0
   12564:	bl	111d0 <error@plt>
   12568:	mov	r6, #1
   1256c:	b	1266c <__assert_fail@plt+0x12c8>
   12570:	movw	r1, #44805	; 0xaf05
   12574:	mov	r0, #0
   12578:	mov	r2, #5
   1257c:	mov	r6, #0
   12580:	movt	r1, #1
   12584:	bl	1114c <dcgettext@plt>
   12588:	mov	r1, r0
   1258c:	mov	r0, #1
   12590:	mov	r2, r9
   12594:	bl	11290 <__printf_chk@plt>
   12598:	cmp	r6, #3
   1259c:	bcs	124b4 <__assert_fail@plt+0x1110>
   125a0:	b	1266c <__assert_fail@plt+0x12c8>
   125a4:	mov	r0, r5
   125a8:	add	r1, sp, #40	; 0x28
   125ac:	bl	12b18 <__assert_fail@plt+0x1774>
   125b0:	mov	r7, #0
   125b4:	mov	r0, sl
   125b8:	sub	r1, fp, #40	; 0x28
   125bc:	strb	r7, [sp, #50]	; 0x32
   125c0:	bl	12b18 <__assert_fail@plt+0x1774>
   125c4:	strb	r7, [fp, #-30]	; 0xffffffe2
   125c8:	mov	r7, r5
   125cc:	cmp	r6, #1
   125d0:	bfc	r7, #12, #20
   125d4:	beq	12620 <__assert_fail@plt+0x127c>
   125d8:	cmp	r6, #3
   125dc:	bne	127ac <__assert_fail@plt+0x1408>
   125e0:	movw	r1, #44940	; 0xaf8c
   125e4:	mov	r0, #0
   125e8:	mov	r2, #5
   125ec:	movt	r1, #1
   125f0:	bl	1114c <dcgettext@plt>
   125f4:	mov	r1, r0
   125f8:	ldr	r0, [sp, #24]
   125fc:	mov	r2, r9
   12600:	mov	r3, r7
   12604:	str	r0, [sp]
   12608:	mov	r0, #1
   1260c:	bl	11290 <__printf_chk@plt>
   12610:	mov	r6, #3
   12614:	b	1265c <__assert_fail@plt+0x12b8>
   12618:	mov	r6, #4
   1261c:	b	12298 <__assert_fail@plt+0xef4>
   12620:	movw	r1, #44881	; 0xaf51
   12624:	movt	r1, #1
   12628:	mov	r0, #0
   1262c:	mov	r2, #5
   12630:	bl	1114c <dcgettext@plt>
   12634:	mov	r1, r0
   12638:	ldr	r0, [sp, #20]
   1263c:	mov	r3, sl
   12640:	mov	r2, r9
   12644:	bfc	r3, #12, #20
   12648:	stm	sp, {r0, r7}
   1264c:	ldr	r0, [sp, #24]
   12650:	str	r0, [sp, #8]
   12654:	mov	r0, #1
   12658:	bl	11290 <__printf_chk@plt>
   1265c:	movw	r7, #49544	; 0xc188
   12660:	movt	r7, #2
   12664:	cmp	r6, #3
   12668:	bcs	124b4 <__assert_fail@plt+0x1110>
   1266c:	movw	r7, #49544	; 0xc188
   12670:	movt	r7, #2
   12674:	ldrb	r0, [r7, #2]
   12678:	cmp	r0, #0
   1267c:	bne	12690 <__assert_fail@plt+0x12ec>
   12680:	ldr	r0, [sp, #32]
   12684:	mov	r1, r8
   12688:	mov	r2, #4
   1268c:	bl	14fb8 <__assert_fail@plt+0x3c14>
   12690:	cmp	r6, #1
   12694:	mov	r6, #0
   12698:	movwhi	r6, #1
   1269c:	ldr	r0, [sp, #32]
   126a0:	and	r4, r4, r6
   126a4:	bl	13724 <__assert_fail@plt+0x2380>
   126a8:	mov	r8, r0
   126ac:	cmp	r0, #0
   126b0:	bne	11f8c <__assert_fail@plt+0xbe8>
   126b4:	b	126bc <__assert_fail@plt+0x1318>
   126b8:	mov	r4, #1
   126bc:	bl	11260 <__errno_location@plt>
   126c0:	ldr	r6, [r0]
   126c4:	mov	r5, r0
   126c8:	cmp	r6, #0
   126cc:	beq	12708 <__assert_fail@plt+0x1364>
   126d0:	ldrb	r0, [r7, #1]
   126d4:	mov	r4, #0
   126d8:	cmp	r0, #0
   126dc:	bne	12708 <__assert_fail@plt+0x1364>
   126e0:	movw	r1, #44207	; 0xacaf
   126e4:	mov	r0, #0
   126e8:	mov	r2, #5
   126ec:	mov	r4, #0
   126f0:	movt	r1, #1
   126f4:	bl	1114c <dcgettext@plt>
   126f8:	mov	r2, r0
   126fc:	mov	r0, #0
   12700:	mov	r1, r6
   12704:	bl	111d0 <error@plt>
   12708:	ldr	r0, [sp, #32]
   1270c:	bl	1357c <__assert_fail@plt+0x21d8>
   12710:	cmp	r0, #0
   12714:	beq	12744 <__assert_fail@plt+0x13a0>
   12718:	ldr	r5, [r5]
   1271c:	movw	r1, #44223	; 0xacbf
   12720:	mov	r0, #0
   12724:	mov	r2, #5
   12728:	mov	r4, #0
   1272c:	movt	r1, #1
   12730:	bl	1114c <dcgettext@plt>
   12734:	mov	r2, r0
   12738:	mov	r0, #0
   1273c:	mov	r1, r5
   12740:	bl	111d0 <error@plt>
   12744:	eor	r0, r4, #1
   12748:	sub	sp, fp, #28
   1274c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12750:	movw	r0, #49436	; 0xc11c
   12754:	movw	r2, #43671	; 0xaa97
   12758:	mov	r1, #0
   1275c:	movw	r7, #43655	; 0xaa87
   12760:	movt	r0, #2
   12764:	movt	r2, #1
   12768:	str	r1, [sp, #8]
   1276c:	movw	r1, #43543	; 0xaa17
   12770:	movt	r7, #1
   12774:	ldr	r3, [r0]
   12778:	movw	r0, #49532	; 0xc17c
   1277c:	str	r2, [sp, #4]
   12780:	movw	r2, #43641	; 0xaa79
   12784:	movt	r1, #1
   12788:	str	r7, [sp]
   1278c:	movt	r0, #2
   12790:	movt	r2, #1
   12794:	ldr	r0, [r0]
   12798:	bl	193fc <__assert_fail@plt+0x8058>
   1279c:	mov	r0, #0
   127a0:	bl	11230 <exit@plt>
   127a4:	mov	r0, #0
   127a8:	bl	114a0 <__assert_fail@plt+0xfc>
   127ac:	bl	11374 <abort@plt>
   127b0:	cmp	r8, #0
   127b4:	beq	1280c <__assert_fail@plt+0x1468>
   127b8:	add	r0, r5, r0, lsl #2
   127bc:	ldr	r0, [r0, #-4]
   127c0:	cmp	r8, r0
   127c4:	bne	1280c <__assert_fail@plt+0x1468>
   127c8:	movw	r1, #43744	; 0xaae0
   127cc:	mov	r0, #0
   127d0:	mov	r2, #5
   127d4:	mov	r7, r6
   127d8:	movt	r1, #1
   127dc:	bl	1114c <dcgettext@plt>
   127e0:	mov	r6, r0
   127e4:	add	r0, r5, r7, lsl #2
   127e8:	ldr	r0, [r0, #-4]
   127ec:	bl	18ebc <__assert_fail@plt+0x7b18>
   127f0:	mov	r3, r0
   127f4:	mov	r0, #0
   127f8:	mov	r1, #0
   127fc:	mov	r2, r6
   12800:	bl	111d0 <error@plt>
   12804:	mov	r0, #1
   12808:	bl	114a0 <__assert_fail@plt+0xfc>
   1280c:	movw	r1, #43728	; 0xaad0
   12810:	movt	r1, #1
   12814:	mov	r0, #0
   12818:	mov	r2, #5
   1281c:	bl	1114c <dcgettext@plt>
   12820:	mov	r2, r0
   12824:	mov	r0, #0
   12828:	mov	r1, #0
   1282c:	bl	111d0 <error@plt>
   12830:	mov	r0, #1
   12834:	bl	114a0 <__assert_fail@plt+0xfc>
   12838:	bl	11260 <__errno_location@plt>
   1283c:	ldr	r6, [r0]
   12840:	movw	r1, #43769	; 0xaaf9
   12844:	mov	r0, #0
   12848:	mov	r2, #5
   1284c:	movt	r1, #1
   12850:	bl	1114c <dcgettext@plt>
   12854:	mov	r5, r0
   12858:	mov	r0, #4
   1285c:	mov	r1, r4
   12860:	bl	18994 <__assert_fail@plt+0x75f0>
   12864:	mov	r3, r0
   12868:	mov	r0, #1
   1286c:	mov	r1, r6
   12870:	mov	r2, r5
   12874:	bl	111d0 <error@plt>
   12878:	movw	r1, #43800	; 0xab18
   1287c:	mov	r0, #0
   12880:	mov	r2, #5
   12884:	movt	r1, #1
   12888:	bl	1114c <dcgettext@plt>
   1288c:	mov	r5, r0
   12890:	mov	r0, r8
   12894:	bl	18ebc <__assert_fail@plt+0x7b18>
   12898:	mov	r3, r0
   1289c:	mov	r0, #0
   128a0:	mov	r1, #0
   128a4:	mov	r2, r5
   128a8:	bl	111d0 <error@plt>
   128ac:	mov	r0, #1
   128b0:	bl	114a0 <__assert_fail@plt+0xfc>
   128b4:	movw	r1, #49576	; 0xc1a8
   128b8:	movt	r1, #2
   128bc:	str	r0, [r1, #4]
   128c0:	bx	lr
   128c4:	movw	r1, #49576	; 0xc1a8
   128c8:	movt	r1, #2
   128cc:	strb	r0, [r1]
   128d0:	bx	lr
   128d4:	push	{r4, r5, r6, sl, fp, lr}
   128d8:	add	fp, sp, #16
   128dc:	sub	sp, sp, #8
   128e0:	movw	r0, #49532	; 0xc17c
   128e4:	movt	r0, #2
   128e8:	ldr	r0, [r0]
   128ec:	bl	19d28 <__assert_fail@plt+0x8984>
   128f0:	cmp	r0, #0
   128f4:	beq	1291c <__assert_fail@plt+0x1578>
   128f8:	movw	r5, #49576	; 0xc1a8
   128fc:	movt	r5, #2
   12900:	ldrb	r0, [r5]
   12904:	cmp	r0, #0
   12908:	beq	12948 <__assert_fail@plt+0x15a4>
   1290c:	bl	11260 <__errno_location@plt>
   12910:	ldr	r0, [r0]
   12914:	cmp	r0, #32
   12918:	bne	12948 <__assert_fail@plt+0x15a4>
   1291c:	movw	r0, #49528	; 0xc178
   12920:	movt	r0, #2
   12924:	ldr	r0, [r0]
   12928:	bl	19d28 <__assert_fail@plt+0x8984>
   1292c:	cmp	r0, #0
   12930:	subeq	sp, fp, #16
   12934:	popeq	{r4, r5, r6, sl, fp, pc}
   12938:	movw	r0, #49440	; 0xc120
   1293c:	movt	r0, #2
   12940:	ldr	r0, [r0]
   12944:	bl	1111c <_exit@plt>
   12948:	movw	r1, #45223	; 0xb0a7
   1294c:	mov	r0, #0
   12950:	mov	r2, #5
   12954:	movt	r1, #1
   12958:	bl	1114c <dcgettext@plt>
   1295c:	ldr	r6, [r5, #4]
   12960:	mov	r4, r0
   12964:	bl	11260 <__errno_location@plt>
   12968:	ldr	r5, [r0]
   1296c:	cmp	r6, #0
   12970:	bne	1298c <__assert_fail@plt+0x15e8>
   12974:	movw	r2, #43814	; 0xab26
   12978:	mov	r0, #0
   1297c:	mov	r1, r5
   12980:	mov	r3, r4
   12984:	movt	r2, #1
   12988:	b	129ac <__assert_fail@plt+0x1608>
   1298c:	mov	r0, r6
   12990:	bl	18b34 <__assert_fail@plt+0x7790>
   12994:	movw	r2, #45235	; 0xb0b3
   12998:	mov	r3, r0
   1299c:	str	r4, [sp]
   129a0:	mov	r0, #0
   129a4:	mov	r1, r5
   129a8:	movt	r2, #1
   129ac:	bl	111d0 <error@plt>
   129b0:	movw	r0, #49440	; 0xc120
   129b4:	movt	r0, #2
   129b8:	ldr	r0, [r0]
   129bc:	bl	1111c <_exit@plt>
   129c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129c4:	add	fp, sp, #28
   129c8:	sub	sp, sp, #140	; 0x8c
   129cc:	mov	r8, r2
   129d0:	mov	r5, r1
   129d4:	mov	r6, r0
   129d8:	cmp	r3, #256	; 0x100
   129dc:	bne	12ae8 <__assert_fail@plt+0x1744>
   129e0:	mov	r0, r6
   129e4:	mov	r1, r5
   129e8:	mov	r2, #2654208	; 0x288000
   129ec:	bl	11248 <openat64@plt>
   129f0:	mov	r4, r0
   129f4:	cmp	r0, #0
   129f8:	blt	12a4c <__assert_fail@plt+0x16a8>
   129fc:	movw	r2, #42906	; 0xa79a
   12a00:	mov	r0, #4096	; 0x1000
   12a04:	add	r3, sp, #32
   12a08:	mov	r1, r4
   12a0c:	str	r0, [sp]
   12a10:	movt	r2, #1
   12a14:	mov	r0, #3
   12a18:	bl	11170 <__fxstatat64@plt>
   12a1c:	cmp	r0, #0
   12a20:	beq	12a5c <__assert_fail@plt+0x16b8>
   12a24:	bl	11260 <__errno_location@plt>
   12a28:	ldr	r6, [r0]
   12a2c:	mov	r5, r0
   12a30:	mov	r0, r4
   12a34:	bl	11380 <close@plt>
   12a38:	str	r6, [r5]
   12a3c:	mvn	r7, #0
   12a40:	mov	r0, r7
   12a44:	sub	sp, fp, #28
   12a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a4c:	mov	r7, r4
   12a50:	mov	r0, r7
   12a54:	sub	sp, fp, #28
   12a58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a5c:	ldr	r0, [sp, #48]	; 0x30
   12a60:	and	r0, r0, #61440	; 0xf000
   12a64:	cmp	r0, #40960	; 0xa000
   12a68:	bne	12a90 <__assert_fail@plt+0x16ec>
   12a6c:	mov	r0, r4
   12a70:	bl	11380 <close@plt>
   12a74:	bl	11260 <__errno_location@plt>
   12a78:	mov	r1, #95	; 0x5f
   12a7c:	mvn	r7, #0
   12a80:	str	r1, [r0]
   12a84:	mov	r0, r7
   12a88:	sub	sp, fp, #28
   12a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a90:	movw	r3, #45242	; 0xb0ba
   12a94:	add	r7, sp, #6
   12a98:	mov	r1, #1
   12a9c:	mov	r2, #26
   12aa0:	str	r4, [sp]
   12aa4:	movt	r3, #1
   12aa8:	mov	r0, r7
   12aac:	bl	1126c <__sprintf_chk@plt>
   12ab0:	mov	r0, r7
   12ab4:	mov	r1, r8
   12ab8:	bl	11350 <chmod@plt>
   12abc:	mov	r7, r0
   12ac0:	bl	11260 <__errno_location@plt>
   12ac4:	ldr	sl, [r0]
   12ac8:	mov	r9, r0
   12acc:	mov	r0, r4
   12ad0:	bl	11380 <close@plt>
   12ad4:	cmp	r7, #0
   12ad8:	beq	12afc <__assert_fail@plt+0x1758>
   12adc:	cmp	sl, #2
   12ae0:	bne	12b08 <__assert_fail@plt+0x1764>
   12ae4:	mov	r3, #0
   12ae8:	mov	r0, r6
   12aec:	mov	r1, r5
   12af0:	mov	r2, r8
   12af4:	bl	11254 <fchmodat@plt>
   12af8:	mov	r7, r0
   12afc:	mov	r0, r7
   12b00:	sub	sp, fp, #28
   12b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b08:	str	sl, [r9]
   12b0c:	mov	r0, r7
   12b10:	sub	sp, fp, #28
   12b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b18:	and	r2, r0, #61440	; 0xf000
   12b1c:	sub	r2, r2, #4096	; 0x1000
   12b20:	lsr	r3, r2, #12
   12b24:	cmp	r3, #11
   12b28:	bhi	12b78 <__assert_fail@plt+0x17d4>
   12b2c:	add	r2, pc, #4
   12b30:	mov	ip, #45	; 0x2d
   12b34:	ldr	pc, [r2, r3, lsl #2]
   12b38:	andeq	r2, r1, r8, ror #22
   12b3c:	andeq	r2, r1, r0, ror fp
   12b40:	andeq	r2, r1, r8, ror fp
   12b44:	andeq	r2, r1, r0, lsl #23
   12b48:	andeq	r2, r1, r8, ror fp
   12b4c:	muleq	r1, r8, fp
   12b50:	andeq	r2, r1, r8, ror fp
   12b54:	muleq	r1, ip, fp
   12b58:	andeq	r2, r1, r8, ror fp
   12b5c:	andeq	r2, r1, r8, lsl #23
   12b60:	andeq	r2, r1, r8, ror fp
   12b64:	muleq	r1, r0, fp
   12b68:	mov	ip, #112	; 0x70
   12b6c:	b	12b9c <__assert_fail@plt+0x17f8>
   12b70:	mov	ip, #99	; 0x63
   12b74:	b	12b9c <__assert_fail@plt+0x17f8>
   12b78:	mov	ip, #63	; 0x3f
   12b7c:	b	12b9c <__assert_fail@plt+0x17f8>
   12b80:	mov	ip, #100	; 0x64
   12b84:	b	12b9c <__assert_fail@plt+0x17f8>
   12b88:	mov	ip, #108	; 0x6c
   12b8c:	b	12b9c <__assert_fail@plt+0x17f8>
   12b90:	mov	ip, #115	; 0x73
   12b94:	b	12b9c <__assert_fail@plt+0x17f8>
   12b98:	mov	ip, #98	; 0x62
   12b9c:	push	{fp, lr}
   12ba0:	mov	fp, sp
   12ba4:	mov	r2, #32
   12ba8:	tst	r0, #256	; 0x100
   12bac:	mov	r3, #114	; 0x72
   12bb0:	strb	ip, [r1]
   12bb4:	mov	ip, #114	; 0x72
   12bb8:	mov	lr, #45	; 0x2d
   12bbc:	strh	r2, [r1, #10]
   12bc0:	movweq	r3, #45	; 0x2d
   12bc4:	tst	r0, #128	; 0x80
   12bc8:	mov	r2, #119	; 0x77
   12bcc:	movweq	r2, #45	; 0x2d
   12bd0:	strb	r3, [r1, #1]
   12bd4:	tst	r0, #32
   12bd8:	mov	r3, #119	; 0x77
   12bdc:	strb	r2, [r1, #2]
   12be0:	mov	r2, #114	; 0x72
   12be4:	movweq	r2, #45	; 0x2d
   12be8:	tst	r0, #16
   12bec:	strb	r2, [r1, #4]
   12bf0:	mov	r2, #119	; 0x77
   12bf4:	movweq	r2, #45	; 0x2d
   12bf8:	tst	r0, #4
   12bfc:	movweq	ip, #45	; 0x2d
   12c00:	tst	r0, #2
   12c04:	strb	r2, [r1, #5]
   12c08:	movweq	r3, #45	; 0x2d
   12c0c:	strb	ip, [r1, #7]
   12c10:	ands	r2, r0, #64	; 0x40
   12c14:	mov	ip, #45	; 0x2d
   12c18:	strb	r3, [r1, #8]
   12c1c:	mov	r3, #83	; 0x53
   12c20:	movwne	lr, #120	; 0x78
   12c24:	mov	r2, #83	; 0x53
   12c28:	movwne	r3, #115	; 0x73
   12c2c:	tst	r0, #2048	; 0x800
   12c30:	moveq	r3, lr
   12c34:	strb	r3, [r1, #3]
   12c38:	ands	r3, r0, #8
   12c3c:	mov	r3, #45	; 0x2d
   12c40:	movwne	r2, #115	; 0x73
   12c44:	movwne	r3, #120	; 0x78
   12c48:	tst	r0, #1024	; 0x400
   12c4c:	moveq	r2, r3
   12c50:	strb	r2, [r1, #6]
   12c54:	ands	r2, r0, #1
   12c58:	mov	r2, #84	; 0x54
   12c5c:	movwne	ip, #120	; 0x78
   12c60:	movwne	r2, #116	; 0x74
   12c64:	tst	r0, #512	; 0x200
   12c68:	moveq	r2, ip
   12c6c:	strb	r2, [r1, #9]
   12c70:	pop	{fp, pc}
   12c74:	ldr	r0, [r0, #16]
   12c78:	b	12b18 <__assert_fail@plt+0x1774>
   12c7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c80:	add	fp, sp, #28
   12c84:	sub	sp, sp, #28
   12c88:	cmp	r1, #4096	; 0x1000
   12c8c:	bcs	12ca8 <__assert_fail@plt+0x1904>
   12c90:	mov	sl, r0
   12c94:	and	r0, r1, #516	; 0x204
   12c98:	mov	r6, r1
   12c9c:	cmp	r0, #516	; 0x204
   12ca0:	tstne	r6, #18
   12ca4:	bne	12cc4 <__assert_fail@plt+0x1920>
   12ca8:	bl	11260 <__errno_location@plt>
   12cac:	mov	r1, #22
   12cb0:	mov	r4, #0
   12cb4:	str	r1, [r0]
   12cb8:	mov	r0, r4
   12cbc:	sub	sp, fp, #28
   12cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cc4:	mov	r0, #1
   12cc8:	mov	r1, #96	; 0x60
   12ccc:	mov	r5, r2
   12cd0:	bl	19c50 <__assert_fail@plt+0x88ac>
   12cd4:	cmp	r0, #0
   12cd8:	beq	13294 <__assert_fail@plt+0x1ef0>
   12cdc:	mov	r4, r0
   12ce0:	mvn	r0, #99	; 0x63
   12ce4:	tst	r6, #2
   12ce8:	mov	r1, r6
   12cec:	str	r0, [r4, #32]
   12cf0:	bic	r0, r6, #516	; 0x204
   12cf4:	str	r5, [r4, #44]	; 0x2c
   12cf8:	str	r4, [sp, #24]
   12cfc:	orrne	r1, r0, #4
   12d00:	str	r1, [r4, #48]	; 0x30
   12d04:	ldr	r0, [sl]
   12d08:	cmp	r0, #0
   12d0c:	beq	12d70 <__assert_fail@plt+0x19cc>
   12d10:	add	r7, sl, #4
   12d14:	mov	r4, #0
   12d18:	bl	1123c <strlen@plt>
   12d1c:	cmp	r0, r4
   12d20:	movhi	r4, r0
   12d24:	ldr	r0, [r7], #4
   12d28:	cmp	r0, #0
   12d2c:	bne	12d18 <__assert_fail@plt+0x1974>
   12d30:	add	r0, r4, #1
   12d34:	ldr	r4, [sp, #24]
   12d38:	cmp	r0, #4096	; 0x1000
   12d3c:	movls	r0, #4096	; 0x1000
   12d40:	ldr	r1, [r4, #36]	; 0x24
   12d44:	add	r0, r0, #256	; 0x100
   12d48:	adds	r1, r0, r1
   12d4c:	bcc	12d84 <__assert_fail@plt+0x19e0>
   12d50:	ldr	r0, [r4, #24]
   12d54:	bl	1a1cc <__assert_fail@plt+0x8e28>
   12d58:	mov	r0, #0
   12d5c:	str	r0, [r4, #24]
   12d60:	bl	11260 <__errno_location@plt>
   12d64:	mov	r1, #36	; 0x24
   12d68:	str	r1, [r0]
   12d6c:	b	1328c <__assert_fail@plt+0x1ee8>
   12d70:	mov	r0, #4096	; 0x1000
   12d74:	ldr	r1, [r4, #36]	; 0x24
   12d78:	add	r0, r0, #256	; 0x100
   12d7c:	adds	r1, r0, r1
   12d80:	bcs	12d50 <__assert_fail@plt+0x19ac>
   12d84:	str	r1, [r4, #36]	; 0x24
   12d88:	ldr	r0, [r4, #24]
   12d8c:	bl	19cd4 <__assert_fail@plt+0x8930>
   12d90:	cmp	r0, #0
   12d94:	beq	12df8 <__assert_fail@plt+0x1a54>
   12d98:	str	r0, [r4, #24]
   12d9c:	ldr	r0, [sl]
   12da0:	cmp	r0, #0
   12da4:	beq	12e0c <__assert_fail@plt+0x1a68>
   12da8:	mov	r0, #176	; 0xb0
   12dac:	bl	19ca4 <__assert_fail@plt+0x8900>
   12db0:	cmp	r0, #0
   12db4:	beq	13284 <__assert_fail@plt+0x1ee0>
   12db8:	ldr	r1, [r4, #24]
   12dbc:	mov	r7, r0
   12dc0:	mov	r0, #0
   12dc4:	mov	r2, #196608	; 0x30000
   12dc8:	strb	r0, [r7, #168]	; 0xa8
   12dcc:	str	r2, [r7, #58]	; 0x3a
   12dd0:	mvn	r2, #0
   12dd4:	str	r0, [r7, #12]
   12dd8:	str	r0, [r7, #16]
   12ddc:	str	r0, [r7, #20]
   12de0:	str	r4, [r7, #44]	; 0x2c
   12de4:	str	r2, [r7, #48]	; 0x30
   12de8:	str	r0, [r7, #52]	; 0x34
   12dec:	str	r1, [r7, #28]
   12df0:	str	r0, [r7, #32]
   12df4:	b	12e10 <__assert_fail@plt+0x1a6c>
   12df8:	ldr	r0, [r4, #24]
   12dfc:	bl	1a1cc <__assert_fail@plt+0x8e28>
   12e00:	mov	r0, #0
   12e04:	str	r0, [r4, #24]
   12e08:	b	1328c <__assert_fail@plt+0x1ee8>
   12e0c:	mov	r7, #0
   12e10:	cmp	r5, #0
   12e14:	ldrbne	r0, [r4, #49]	; 0x31
   12e18:	ubfxne	r0, r0, #2, #1
   12e1c:	ldr	r4, [sl]
   12e20:	moveq	r0, #1
   12e24:	str	r0, [sp, #12]
   12e28:	cmp	r4, #0
   12e2c:	beq	12f94 <__assert_fail@plt+0x1bf0>
   12e30:	tst	r6, #2048	; 0x800
   12e34:	str	r7, [sp, #20]
   12e38:	str	r5, [sp, #16]
   12e3c:	bne	12fb8 <__assert_fail@plt+0x1c14>
   12e40:	mov	r0, #0
   12e44:	mov	r8, #0
   12e48:	mov	r5, #0
   12e4c:	str	r0, [sp, #8]
   12e50:	mov	r0, r4
   12e54:	bl	1123c <strlen@plt>
   12e58:	mov	r9, r0
   12e5c:	cmp	r0, #3
   12e60:	bcc	12e90 <__assert_fail@plt+0x1aec>
   12e64:	add	r0, r4, r9
   12e68:	ldrb	r0, [r0, #-1]
   12e6c:	cmp	r0, #47	; 0x2f
   12e70:	bne	12e90 <__assert_fail@plt+0x1aec>
   12e74:	sub	r0, r4, #2
   12e78:	ldrb	r1, [r0, r9]
   12e7c:	cmp	r1, #47	; 0x2f
   12e80:	bne	12e90 <__assert_fail@plt+0x1aec>
   12e84:	sub	r9, r9, #1
   12e88:	cmp	r9, #1
   12e8c:	bhi	12e78 <__assert_fail@plt+0x1ad4>
   12e90:	add	r0, r9, #176	; 0xb0
   12e94:	bic	r0, r0, #7
   12e98:	bl	19ca4 <__assert_fail@plt+0x8900>
   12e9c:	cmp	r0, #0
   12ea0:	beq	130f8 <__assert_fail@plt+0x1d54>
   12ea4:	add	r6, r0, #168	; 0xa8
   12ea8:	mov	r7, r0
   12eac:	mov	r1, r4
   12eb0:	mov	r2, r9
   12eb4:	mov	r0, r6
   12eb8:	bl	11128 <memcpy@plt>
   12ebc:	ldr	r0, [sp, #24]
   12ec0:	mov	r4, #0
   12ec4:	mov	r1, #196608	; 0x30000
   12ec8:	cmp	r8, #0
   12ecc:	strb	r4, [r6, r9]
   12ed0:	str	r1, [r7, #58]	; 0x3a
   12ed4:	add	r1, r7, #44	; 0x2c
   12ed8:	ldr	r2, [r0, #24]
   12edc:	stm	r1, {r0, r4, r9}
   12ee0:	ldr	r1, [sp, #20]
   12ee4:	str	r1, [r7, #4]
   12ee8:	str	r4, [r7, #12]
   12eec:	str	r4, [r7, #16]
   12ef0:	str	r4, [r7, #20]
   12ef4:	str	r6, [r7, #24]
   12ef8:	str	r2, [r7, #28]
   12efc:	ldr	r2, [sp, #12]
   12f00:	mov	r1, r8
   12f04:	str	r4, [r7, #32]
   12f08:	movwne	r1, #1
   12f0c:	tst	r2, r1
   12f10:	beq	12f40 <__assert_fail@plt+0x1b9c>
   12f14:	mov	r0, #2
   12f18:	str	r0, [r7, #112]	; 0x70
   12f1c:	mov	r0, #11
   12f20:	str	r4, [r7, #116]	; 0x74
   12f24:	strh	r0, [r7, #56]	; 0x38
   12f28:	ldr	r0, [sp, #16]
   12f2c:	cmp	r0, #0
   12f30:	beq	12f5c <__assert_fail@plt+0x1bb8>
   12f34:	str	r8, [r7, #8]
   12f38:	mov	r8, r7
   12f3c:	b	12f74 <__assert_fail@plt+0x1bd0>
   12f40:	mov	r1, r7
   12f44:	mov	r2, #0
   12f48:	bl	132e0 <__assert_fail@plt+0x1f3c>
   12f4c:	strh	r0, [r7, #56]	; 0x38
   12f50:	ldr	r0, [sp, #16]
   12f54:	cmp	r0, #0
   12f58:	bne	12f34 <__assert_fail@plt+0x1b90>
   12f5c:	cmp	r8, #0
   12f60:	str	r4, [r7, #8]
   12f64:	beq	12f88 <__assert_fail@plt+0x1be4>
   12f68:	ldr	r0, [sp, #8]
   12f6c:	str	r7, [sp, #8]
   12f70:	str	r7, [r0, #8]
   12f74:	ldr	r4, [sl, #4]!
   12f78:	add	r5, r5, #1
   12f7c:	cmp	r4, #0
   12f80:	bne	12e50 <__assert_fail@plt+0x1aac>
   12f84:	b	13108 <__assert_fail@plt+0x1d64>
   12f88:	mov	r0, r7
   12f8c:	str	r7, [sp, #8]
   12f90:	b	12f38 <__assert_fail@plt+0x1b94>
   12f94:	ldr	r4, [sp, #24]
   12f98:	mov	r8, #0
   12f9c:	mov	r0, #176	; 0xb0
   12fa0:	bl	19ca4 <__assert_fail@plt+0x8900>
   12fa4:	cmp	r0, #0
   12fa8:	bne	13164 <__assert_fail@plt+0x1dc0>
   12fac:	mov	r0, #0
   12fb0:	str	r0, [r4]
   12fb4:	b	13248 <__assert_fail@plt+0x1ea4>
   12fb8:	add	r0, sl, #4
   12fbc:	mov	r9, #0
   12fc0:	mov	r8, #0
   12fc4:	mov	r5, #0
   12fc8:	str	r0, [sp, #8]
   12fcc:	ldr	r0, [sp, #12]
   12fd0:	eor	r0, r0, #1
   12fd4:	str	r0, [sp, #12]
   12fd8:	mov	r0, #0
   12fdc:	str	r0, [sp, #4]
   12fe0:	mov	r0, r4
   12fe4:	mov	sl, r5
   12fe8:	bl	1123c <strlen@plt>
   12fec:	mov	r7, r0
   12ff0:	add	r0, r0, #176	; 0xb0
   12ff4:	bic	r0, r0, #7
   12ff8:	bl	19ca4 <__assert_fail@plt+0x8900>
   12ffc:	cmp	r0, #0
   13000:	beq	130f8 <__assert_fail@plt+0x1d54>
   13004:	add	r6, r0, #168	; 0xa8
   13008:	mov	r5, r0
   1300c:	mov	r1, r4
   13010:	mov	r2, r7
   13014:	mov	r0, r6
   13018:	bl	11128 <memcpy@plt>
   1301c:	ldr	r0, [sp, #24]
   13020:	mov	r1, #196608	; 0x30000
   13024:	strb	r9, [r6, r7]
   13028:	str	r1, [r5, #58]	; 0x3a
   1302c:	ldr	r1, [sp, #20]
   13030:	ldr	r2, [r0, #24]
   13034:	str	r0, [r5, #44]	; 0x2c
   13038:	str	r9, [r5, #48]	; 0x30
   1303c:	str	r7, [r5, #52]	; 0x34
   13040:	str	r1, [r5, #4]
   13044:	str	r9, [r5, #12]
   13048:	str	r9, [r5, #16]
   1304c:	str	r9, [r5, #20]
   13050:	str	r6, [r5, #24]
   13054:	clz	r1, r8
   13058:	lsr	r1, r1, #5
   1305c:	str	r2, [r5, #28]
   13060:	ldr	r2, [sp, #12]
   13064:	str	r9, [r5, #32]
   13068:	orrs	r1, r2, r1
   1306c:	bne	1309c <__assert_fail@plt+0x1cf8>
   13070:	mov	r0, #2
   13074:	str	r0, [r5, #112]	; 0x70
   13078:	str	r9, [r5, #116]	; 0x74
   1307c:	mov	r0, #11
   13080:	strh	r0, [r5, #56]	; 0x38
   13084:	ldr	r0, [sp, #16]
   13088:	cmp	r0, #0
   1308c:	beq	130b8 <__assert_fail@plt+0x1d14>
   13090:	str	r8, [r5, #8]
   13094:	mov	r8, r5
   13098:	b	130d0 <__assert_fail@plt+0x1d2c>
   1309c:	mov	r1, r5
   130a0:	mov	r2, #0
   130a4:	bl	132e0 <__assert_fail@plt+0x1f3c>
   130a8:	strh	r0, [r5, #56]	; 0x38
   130ac:	ldr	r0, [sp, #16]
   130b0:	cmp	r0, #0
   130b4:	bne	13090 <__assert_fail@plt+0x1cec>
   130b8:	cmp	r8, #0
   130bc:	str	r9, [r5, #8]
   130c0:	beq	130ec <__assert_fail@plt+0x1d48>
   130c4:	ldr	r0, [sp, #4]
   130c8:	str	r5, [sp, #4]
   130cc:	str	r5, [r0, #8]
   130d0:	ldr	r0, [sp, #8]
   130d4:	mov	r5, sl
   130d8:	add	r5, sl, #1
   130dc:	ldr	r4, [r0, sl, lsl #2]
   130e0:	cmp	r4, #0
   130e4:	bne	12fe0 <__assert_fail@plt+0x1c3c>
   130e8:	b	13108 <__assert_fail@plt+0x1d64>
   130ec:	mov	r0, r5
   130f0:	str	r5, [sp, #4]
   130f4:	b	13094 <__assert_fail@plt+0x1cf0>
   130f8:	ldr	r7, [sp, #20]
   130fc:	cmp	r8, #0
   13100:	bne	13250 <__assert_fail@plt+0x1eac>
   13104:	b	13278 <__assert_fail@plt+0x1ed4>
   13108:	ldr	r0, [sp, #16]
   1310c:	cmp	r0, #0
   13110:	beq	1314c <__assert_fail@plt+0x1da8>
   13114:	ldr	r7, [sp, #20]
   13118:	ldr	r4, [sp, #24]
   1311c:	cmp	r5, #2
   13120:	bcc	13154 <__assert_fail@plt+0x1db0>
   13124:	mov	r0, r4
   13128:	mov	r1, r8
   1312c:	mov	r2, r5
   13130:	bl	13478 <__assert_fail@plt+0x20d4>
   13134:	mov	r8, r0
   13138:	mov	r0, #176	; 0xb0
   1313c:	bl	19ca4 <__assert_fail@plt+0x8900>
   13140:	cmp	r0, #0
   13144:	bne	13164 <__assert_fail@plt+0x1dc0>
   13148:	b	12fac <__assert_fail@plt+0x1c08>
   1314c:	ldr	r7, [sp, #20]
   13150:	ldr	r4, [sp, #24]
   13154:	mov	r0, #176	; 0xb0
   13158:	bl	19ca4 <__assert_fail@plt+0x8900>
   1315c:	cmp	r0, #0
   13160:	beq	12fac <__assert_fail@plt+0x1c08>
   13164:	ldr	r2, [r4, #24]
   13168:	mov	r1, #0
   1316c:	mov	r3, #196608	; 0x30000
   13170:	str	r0, [r4]
   13174:	str	r1, [r0, #52]	; 0x34
   13178:	strb	r1, [r0, #168]	; 0xa8
   1317c:	str	r4, [r0, #44]	; 0x2c
   13180:	str	r3, [r0, #58]	; 0x3a
   13184:	str	r2, [r0, #28]
   13188:	mov	r2, #9
   1318c:	str	r1, [r0, #32]
   13190:	strh	r2, [r0, #56]	; 0x38
   13194:	str	r8, [r0, #8]
   13198:	str	r1, [r0, #12]
   1319c:	str	r1, [r0, #16]
   131a0:	str	r1, [r0, #20]
   131a4:	mov	r1, #1
   131a8:	str	r1, [r0, #48]	; 0x30
   131ac:	ldrh	r0, [r4, #48]	; 0x30
   131b0:	movw	r1, #258	; 0x102
   131b4:	tst	r0, r1
   131b8:	beq	131f4 <__assert_fail@plt+0x1e50>
   131bc:	movw	r0, #41420	; 0xa1cc
   131c0:	movw	r2, #20992	; 0x5200
   131c4:	movw	r3, #21024	; 0x5220
   131c8:	mov	r1, #0
   131cc:	movt	r0, #1
   131d0:	movt	r2, #1
   131d4:	movt	r3, #1
   131d8:	str	r0, [sp]
   131dc:	mov	r0, #31
   131e0:	bl	158c0 <__assert_fail@plt+0x451c>
   131e4:	cmp	r0, #0
   131e8:	str	r0, [r4, #56]	; 0x38
   131ec:	bne	1320c <__assert_fail@plt+0x1e68>
   131f0:	b	13248 <__assert_fail@plt+0x1ea4>
   131f4:	mov	r0, #32
   131f8:	bl	19ca4 <__assert_fail@plt+0x8900>
   131fc:	cmp	r0, #0
   13200:	str	r0, [r4, #56]	; 0x38
   13204:	beq	13248 <__assert_fail@plt+0x1ea4>
   13208:	bl	19dac <__assert_fail@plt+0x8a08>
   1320c:	ldr	r4, [sp, #24]
   13210:	ldr	r0, [r4, #48]	; 0x30
   13214:	tst	r0, #516	; 0x204
   13218:	bne	132c8 <__assert_fail@plt+0x1f24>
   1321c:	mov	r1, #32768	; 0x8000
   13220:	tst	r0, #512	; 0x200
   13224:	and	r1, r1, r0, lsl #11
   13228:	orr	r1, r1, #18688	; 0x4900
   1322c:	orr	r2, r1, #524288	; 0x80000
   13230:	bne	132a4 <__assert_fail@plt+0x1f00>
   13234:	movw	r0, #45260	; 0xb0cc
   13238:	mov	r1, r2
   1323c:	movt	r0, #1
   13240:	bl	1a11c <__assert_fail@plt+0x8d78>
   13244:	b	132b4 <__assert_fail@plt+0x1f10>
   13248:	cmp	r8, #0
   1324c:	beq	13278 <__assert_fail@plt+0x1ed4>
   13250:	ldrd	r4, [r8, #8]
   13254:	cmp	r5, #0
   13258:	beq	13264 <__assert_fail@plt+0x1ec0>
   1325c:	mov	r0, r5
   13260:	bl	11398 <closedir@plt>
   13264:	mov	r0, r8
   13268:	bl	1a1cc <__assert_fail@plt+0x8e28>
   1326c:	cmp	r4, #0
   13270:	mov	r8, r4
   13274:	bne	13250 <__assert_fail@plt+0x1eac>
   13278:	mov	r0, r7
   1327c:	bl	1a1cc <__assert_fail@plt+0x8e28>
   13280:	ldr	r4, [sp, #24]
   13284:	ldr	r0, [r4, #24]
   13288:	bl	1a1cc <__assert_fail@plt+0x8e28>
   1328c:	mov	r0, r4
   13290:	bl	1a1cc <__assert_fail@plt+0x8e28>
   13294:	mov	r4, #0
   13298:	mov	r0, r4
   1329c:	sub	sp, fp, #28
   132a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132a4:	ldr	r0, [r4, #32]
   132a8:	movw	r1, #45260	; 0xb0cc
   132ac:	movt	r1, #1
   132b0:	bl	16ea0 <__assert_fail@plt+0x5afc>
   132b4:	str	r0, [r4, #28]
   132b8:	cmn	r0, #1
   132bc:	ldrle	r0, [r4, #48]	; 0x30
   132c0:	orrle	r0, r0, #4
   132c4:	strle	r0, [r4, #48]	; 0x30
   132c8:	add	r0, r4, #60	; 0x3c
   132cc:	mvn	r1, #0
   132d0:	bl	167f4 <__assert_fail@plt+0x5450>
   132d4:	mov	r0, r4
   132d8:	sub	sp, fp, #28
   132dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132e0:	push	{r4, r5, r6, sl, fp, lr}
   132e4:	add	fp, sp, #16
   132e8:	sub	sp, sp, #8
   132ec:	mov	r4, r1
   132f0:	ldr	r1, [r0, #48]	; 0x30
   132f4:	ldr	r3, [r4, #48]	; 0x30
   132f8:	add	r5, r4, #64	; 0x40
   132fc:	cmp	r3, #0
   13300:	andeq	r3, r1, #1
   13304:	orreq	r2, r3, r2
   13308:	cmp	r2, #0
   1330c:	andseq	r1, r1, #2
   13310:	beq	1336c <__assert_fail@plt+0x1fc8>
   13314:	ldr	r1, [r4, #24]
   13318:	mov	r0, #3
   1331c:	mov	r2, r5
   13320:	bl	1135c <__xstat64@plt>
   13324:	cmp	r0, #0
   13328:	beq	133ec <__assert_fail@plt+0x2048>
   1332c:	bl	11260 <__errno_location@plt>
   13330:	mov	r6, r0
   13334:	ldr	r0, [r0]
   13338:	cmp	r0, #2
   1333c:	bne	1339c <__assert_fail@plt+0x1ff8>
   13340:	ldr	r1, [r4, #24]
   13344:	mov	r0, #3
   13348:	mov	r2, r5
   1334c:	bl	1138c <__lxstat64@plt>
   13350:	cmp	r0, #0
   13354:	bne	13398 <__assert_fail@plt+0x1ff4>
   13358:	mov	r0, #0
   1335c:	str	r0, [r6]
   13360:	mov	r0, #13
   13364:	sub	sp, fp, #16
   13368:	pop	{r4, r5, r6, sl, fp, pc}
   1336c:	ldr	r1, [r0, #32]
   13370:	ldr	r2, [r4, #24]
   13374:	mov	r0, #256	; 0x100
   13378:	mov	r3, r5
   1337c:	str	r0, [sp]
   13380:	mov	r0, #3
   13384:	bl	11170 <__fxstatat64@plt>
   13388:	cmp	r0, #0
   1338c:	beq	133ec <__assert_fail@plt+0x2048>
   13390:	bl	11260 <__errno_location@plt>
   13394:	mov	r6, r0
   13398:	ldr	r0, [r6]
   1339c:	vmov.i32	q8, #0	; 0x00000000
   133a0:	add	r1, r5, #80	; 0x50
   133a4:	str	r0, [r4, #32]
   133a8:	mov	r0, #0
   133ac:	vst1.64	{d16-d17}, [r1]
   133b0:	add	r1, r5, #64	; 0x40
   133b4:	str	r0, [r5, #96]	; 0x60
   133b8:	vst1.64	{d16-d17}, [r1]
   133bc:	add	r1, r5, #48	; 0x30
   133c0:	vst1.64	{d16-d17}, [r1]
   133c4:	add	r1, r5, #32
   133c8:	vst1.64	{d16-d17}, [r1]
   133cc:	add	r1, r5, #16
   133d0:	vst1.64	{d16-d17}, [r1]
   133d4:	mov	r1, #100	; 0x64
   133d8:	vst1.64	{d16-d17}, [r5], r1
   133dc:	str	r0, [r5]
   133e0:	mov	r0, #10
   133e4:	sub	sp, fp, #16
   133e8:	pop	{r4, r5, r6, sl, fp, pc}
   133ec:	ldr	r0, [r4, #80]	; 0x50
   133f0:	and	r0, r0, #61440	; 0xf000
   133f4:	cmp	r0, #40960	; 0xa000
   133f8:	beq	13454 <__assert_fail@plt+0x20b0>
   133fc:	cmp	r0, #32768	; 0x8000
   13400:	moveq	r0, #8
   13404:	subeq	sp, fp, #16
   13408:	popeq	{r4, r5, r6, sl, fp, pc}
   1340c:	cmp	r0, #16384	; 0x4000
   13410:	bne	13448 <__assert_fail@plt+0x20a4>
   13414:	ldrb	r1, [r4, #168]	; 0xa8
   13418:	mov	r0, #1
   1341c:	cmp	r1, #46	; 0x2e
   13420:	bne	13440 <__assert_fail@plt+0x209c>
   13424:	ldrb	r1, [r4, #169]	; 0xa9
   13428:	cmp	r1, #0
   1342c:	beq	13460 <__assert_fail@plt+0x20bc>
   13430:	cmp	r1, #46	; 0x2e
   13434:	ldrbeq	r1, [r4, #170]	; 0xaa
   13438:	cmpeq	r1, #0
   1343c:	beq	13460 <__assert_fail@plt+0x20bc>
   13440:	sub	sp, fp, #16
   13444:	pop	{r4, r5, r6, sl, fp, pc}
   13448:	mov	r0, #3
   1344c:	sub	sp, fp, #16
   13450:	pop	{r4, r5, r6, sl, fp, pc}
   13454:	mov	r0, #12
   13458:	sub	sp, fp, #16
   1345c:	pop	{r4, r5, r6, sl, fp, pc}
   13460:	ldr	r1, [r4, #48]	; 0x30
   13464:	mov	r0, #5
   13468:	cmp	r1, #0
   1346c:	movweq	r0, #1
   13470:	sub	sp, fp, #16
   13474:	pop	{r4, r5, r6, sl, fp, pc}
   13478:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1347c:	add	fp, sp, #24
   13480:	ldrd	r8, [r0, #40]	; 0x28
   13484:	mov	r5, r2
   13488:	mov	r4, r1
   1348c:	mov	r6, r0
   13490:	cmp	r8, r2
   13494:	bcs	134d4 <__assert_fail@plt+0x2130>
   13498:	add	r1, r5, #40	; 0x28
   1349c:	cmn	r1, #-1073741823	; 0xc0000001
   134a0:	str	r1, [r6, #40]	; 0x28
   134a4:	bhi	13560 <__assert_fail@plt+0x21bc>
   134a8:	add	r7, r6, #8
   134ac:	lsl	r1, r1, #2
   134b0:	ldr	r0, [r7]
   134b4:	bl	19cd4 <__assert_fail@plt+0x8930>
   134b8:	cmp	r0, #0
   134bc:	beq	13560 <__assert_fail@plt+0x21bc>
   134c0:	mov	r6, r7
   134c4:	str	r0, [r7]
   134c8:	cmp	r4, #0
   134cc:	bne	134e0 <__assert_fail@plt+0x213c>
   134d0:	b	134f4 <__assert_fail@plt+0x2150>
   134d4:	ldr	r0, [r6, #8]!
   134d8:	cmp	r4, #0
   134dc:	beq	134f4 <__assert_fail@plt+0x2150>
   134e0:	str	r4, [r0], #4
   134e4:	ldr	r4, [r4, #8]
   134e8:	cmp	r4, #0
   134ec:	bne	134e0 <__assert_fail@plt+0x213c>
   134f0:	ldr	r0, [r6]
   134f4:	mov	r1, r5
   134f8:	mov	r2, #4
   134fc:	mov	r3, r9
   13500:	bl	1132c <qsort@plt>
   13504:	ldr	r7, [r6]
   13508:	subs	r0, r5, #1
   1350c:	ldr	r4, [r7]
   13510:	mov	r1, r4
   13514:	beq	13550 <__assert_fail@plt+0x21ac>
   13518:	mov	r1, r7
   1351c:	cmp	r5, #2
   13520:	ldr	r2, [r1, #4]!
   13524:	str	r2, [r4, #8]
   13528:	beq	1354c <__assert_fail@plt+0x21a8>
   1352c:	rsb	r3, r5, #2
   13530:	mov	r2, r1
   13534:	ldr	r6, [r2, #4]!
   13538:	ldr	r1, [r1]
   1353c:	adds	r3, r3, #1
   13540:	str	r6, [r1, #8]
   13544:	mov	r1, r2
   13548:	bne	13534 <__assert_fail@plt+0x2190>
   1354c:	ldr	r1, [r7, r0, lsl #2]
   13550:	mov	r0, #0
   13554:	str	r0, [r1, #8]
   13558:	mov	r0, r4
   1355c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13560:	ldr	r0, [r6, #8]
   13564:	bl	1a1cc <__assert_fail@plt+0x8e28>
   13568:	mov	r0, #0
   1356c:	str	r0, [r6, #40]	; 0x28
   13570:	str	r0, [r6, #8]
   13574:	mov	r0, r4
   13578:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1357c:	push	{r4, r5, r6, r7, fp, lr}
   13580:	add	fp, sp, #16
   13584:	mov	r4, r0
   13588:	ldr	r0, [r0]
   1358c:	cmp	r0, #0
   13590:	beq	135d0 <__assert_fail@plt+0x222c>
   13594:	ldr	r1, [r0, #48]	; 0x30
   13598:	cmp	r1, #0
   1359c:	blt	135c4 <__assert_fail@plt+0x2220>
   135a0:	ldr	r5, [r0, #8]
   135a4:	cmp	r5, #0
   135a8:	ldreq	r5, [r0, #4]
   135ac:	bl	1a1cc <__assert_fail@plt+0x8e28>
   135b0:	ldr	r0, [r5, #48]	; 0x30
   135b4:	cmn	r0, #1
   135b8:	mov	r0, r5
   135bc:	bgt	135a0 <__assert_fail@plt+0x21fc>
   135c0:	b	135c8 <__assert_fail@plt+0x2224>
   135c4:	mov	r5, r0
   135c8:	mov	r0, r5
   135cc:	bl	1a1cc <__assert_fail@plt+0x8e28>
   135d0:	ldr	r5, [r4, #4]
   135d4:	cmp	r5, #0
   135d8:	beq	13604 <__assert_fail@plt+0x2260>
   135dc:	ldrd	r6, [r5, #8]
   135e0:	cmp	r7, #0
   135e4:	beq	135f0 <__assert_fail@plt+0x224c>
   135e8:	mov	r0, r7
   135ec:	bl	11398 <closedir@plt>
   135f0:	mov	r0, r5
   135f4:	bl	1a1cc <__assert_fail@plt+0x8e28>
   135f8:	cmp	r6, #0
   135fc:	mov	r5, r6
   13600:	bne	135dc <__assert_fail@plt+0x2238>
   13604:	ldr	r0, [r4, #8]
   13608:	bl	1a1cc <__assert_fail@plt+0x8e28>
   1360c:	ldr	r0, [r4, #24]
   13610:	bl	1a1cc <__assert_fail@plt+0x8e28>
   13614:	ldr	r0, [r4, #48]	; 0x30
   13618:	tst	r0, #512	; 0x200
   1361c:	bne	13658 <__assert_fail@plt+0x22b4>
   13620:	mov	r6, #0
   13624:	tst	r0, #4
   13628:	bne	1367c <__assert_fail@plt+0x22d8>
   1362c:	ldr	r0, [r4, #28]
   13630:	bl	11320 <fchdir@plt>
   13634:	cmp	r0, #0
   13638:	beq	1370c <__assert_fail@plt+0x2368>
   1363c:	bl	11260 <__errno_location@plt>
   13640:	ldr	r6, [r0]
   13644:	ldr	r0, [r4, #28]
   13648:	bl	11380 <close@plt>
   1364c:	cmp	r6, #0
   13650:	beq	1366c <__assert_fail@plt+0x22c8>
   13654:	b	1367c <__assert_fail@plt+0x22d8>
   13658:	ldr	r0, [r4, #32]
   1365c:	mov	r6, #0
   13660:	cmp	r0, #0
   13664:	blt	1367c <__assert_fail@plt+0x22d8>
   13668:	bl	11380 <close@plt>
   1366c:	cmp	r0, #0
   13670:	beq	1367c <__assert_fail@plt+0x22d8>
   13674:	bl	11260 <__errno_location@plt>
   13678:	ldr	r6, [r0]
   1367c:	add	r5, r4, #60	; 0x3c
   13680:	b	13688 <__assert_fail@plt+0x22e4>
   13684:	bl	11380 <close@plt>
   13688:	mov	r0, r5
   1368c:	bl	16818 <__assert_fail@plt+0x5474>
   13690:	cmp	r0, #0
   13694:	bne	136ac <__assert_fail@plt+0x2308>
   13698:	mov	r0, r5
   1369c:	bl	1686c <__assert_fail@plt+0x54c8>
   136a0:	cmp	r0, #0
   136a4:	bge	13684 <__assert_fail@plt+0x22e0>
   136a8:	b	13688 <__assert_fail@plt+0x22e4>
   136ac:	ldr	r0, [r4, #52]	; 0x34
   136b0:	cmp	r0, #0
   136b4:	beq	136bc <__assert_fail@plt+0x2318>
   136b8:	bl	15bdc <__assert_fail@plt+0x4838>
   136bc:	ldrh	r0, [r4, #48]	; 0x30
   136c0:	movw	r1, #258	; 0x102
   136c4:	tst	r0, r1
   136c8:	beq	136e0 <__assert_fail@plt+0x233c>
   136cc:	ldr	r0, [r4, #56]	; 0x38
   136d0:	cmp	r0, #0
   136d4:	beq	136e8 <__assert_fail@plt+0x2344>
   136d8:	bl	15bdc <__assert_fail@plt+0x4838>
   136dc:	b	136e8 <__assert_fail@plt+0x2344>
   136e0:	ldr	r0, [r4, #56]	; 0x38
   136e4:	bl	1a1cc <__assert_fail@plt+0x8e28>
   136e8:	mov	r0, r4
   136ec:	bl	1a1cc <__assert_fail@plt+0x8e28>
   136f0:	cmp	r6, #0
   136f4:	moveq	r0, #0
   136f8:	popeq	{r4, r5, r6, r7, fp, pc}
   136fc:	bl	11260 <__errno_location@plt>
   13700:	str	r6, [r0]
   13704:	mvn	r0, #0
   13708:	pop	{r4, r5, r6, r7, fp, pc}
   1370c:	mov	r6, #0
   13710:	ldr	r0, [r4, #28]
   13714:	bl	11380 <close@plt>
   13718:	cmp	r6, #0
   1371c:	beq	1366c <__assert_fail@plt+0x22c8>
   13720:	b	1367c <__assert_fail@plt+0x22d8>
   13724:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13728:	add	fp, sp, #28
   1372c:	sub	sp, sp, #4
   13730:	ldr	r6, [r0]
   13734:	mov	sl, #0
   13738:	cmp	r6, #0
   1373c:	beq	13fc4 <__assert_fail@plt+0x2c20>
   13740:	mov	r4, r0
   13744:	ldr	r0, [r0, #48]	; 0x30
   13748:	tst	r0, #8192	; 0x2000
   1374c:	bne	13fc4 <__assert_fail@plt+0x2c20>
   13750:	ldrh	r1, [r6, #60]	; 0x3c
   13754:	mov	r2, #3
   13758:	strh	r2, [r6, #60]	; 0x3c
   1375c:	cmp	r1, #1
   13760:	beq	137e0 <__assert_fail@plt+0x243c>
   13764:	mov	r5, r6
   13768:	cmp	r1, #2
   1376c:	bne	13804 <__assert_fail@plt+0x2460>
   13770:	ldrh	r2, [r5, #56]!	; 0x38
   13774:	movw	r3, #65534	; 0xfffe
   13778:	and	r3, r2, r3
   1377c:	cmp	r3, #12
   13780:	bne	13808 <__assert_fail@plt+0x2464>
   13784:	mov	r0, r4
   13788:	mov	r1, r6
   1378c:	mov	r2, #1
   13790:	bl	132e0 <__assert_fail@plt+0x1f3c>
   13794:	strh	r0, [r6, #56]	; 0x38
   13798:	cmp	r0, #1
   1379c:	ldreq	r0, [r4, #48]	; 0x30
   137a0:	tsteq	r0, #4
   137a4:	bne	13abc <__assert_fail@plt+0x2718>
   137a8:	mov	r1, #32768	; 0x8000
   137ac:	tst	r0, #512	; 0x200
   137b0:	and	r1, r1, r0, lsl #11
   137b4:	orr	r1, r1, #18688	; 0x4900
   137b8:	orr	r2, r1, #524288	; 0x80000
   137bc:	bne	13cd0 <__assert_fail@plt+0x292c>
   137c0:	movw	r0, #45260	; 0xb0cc
   137c4:	mov	r1, r2
   137c8:	movt	r0, #1
   137cc:	bl	1a11c <__assert_fail@plt+0x8d78>
   137d0:	cmn	r0, #1
   137d4:	str	r0, [r6, #36]	; 0x24
   137d8:	bgt	13cec <__assert_fail@plt+0x2948>
   137dc:	b	13d30 <__assert_fail@plt+0x298c>
   137e0:	mov	r0, r4
   137e4:	mov	r1, r6
   137e8:	mov	r2, #0
   137ec:	bl	132e0 <__assert_fail@plt+0x1f3c>
   137f0:	strh	r0, [r6, #56]	; 0x38
   137f4:	mov	sl, r6
   137f8:	mov	r0, sl
   137fc:	sub	sp, fp, #28
   13800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13804:	ldrh	r2, [r5, #56]!	; 0x38
   13808:	cmp	r2, #1
   1380c:	bne	1388c <__assert_fail@plt+0x24e8>
   13810:	cmp	r1, #4
   13814:	bne	138fc <__assert_fail@plt+0x2558>
   13818:	ldrb	r0, [r6, #58]	; 0x3a
   1381c:	tst	r0, #2
   13820:	beq	1382c <__assert_fail@plt+0x2488>
   13824:	ldr	r0, [r6, #36]	; 0x24
   13828:	bl	11380 <close@plt>
   1382c:	ldr	r5, [r4, #4]
   13830:	cmp	r5, #0
   13834:	beq	13868 <__assert_fail@plt+0x24c4>
   13838:	ldrd	r8, [r5, #8]
   1383c:	cmp	r9, #0
   13840:	beq	1384c <__assert_fail@plt+0x24a8>
   13844:	mov	r0, r9
   13848:	bl	11398 <closedir@plt>
   1384c:	mov	r0, r5
   13850:	bl	1a1cc <__assert_fail@plt+0x8e28>
   13854:	cmp	r8, #0
   13858:	mov	r5, r8
   1385c:	bne	13838 <__assert_fail@plt+0x2494>
   13860:	mov	r0, #0
   13864:	str	r0, [r4, #4]
   13868:	mov	r0, #6
   1386c:	strh	r0, [r6, #56]	; 0x38
   13870:	mov	r0, r4
   13874:	mov	r1, r6
   13878:	bl	13fd4 <__assert_fail@plt+0x2c30>
   1387c:	mov	sl, r6
   13880:	mov	r0, sl
   13884:	sub	sp, fp, #28
   13888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1388c:	mov	r7, r6
   13890:	ldr	r6, [r7, #8]
   13894:	cmp	r6, #0
   13898:	beq	1398c <__assert_fail@plt+0x25e8>
   1389c:	mov	r0, r7
   138a0:	str	r6, [r4]
   138a4:	bl	1a1cc <__assert_fail@plt+0x8e28>
   138a8:	ldr	r0, [r6, #48]	; 0x30
   138ac:	cmp	r0, #0
   138b0:	beq	139d4 <__assert_fail@plt+0x2630>
   138b4:	ldrh	r0, [r6, #60]	; 0x3c
   138b8:	mov	r7, r6
   138bc:	cmp	r0, #4
   138c0:	beq	13890 <__assert_fail@plt+0x24ec>
   138c4:	cmp	r0, #2
   138c8:	bne	13a80 <__assert_fail@plt+0x26dc>
   138cc:	mov	r0, r4
   138d0:	mov	r1, r6
   138d4:	mov	r2, #1
   138d8:	bl	132e0 <__assert_fail@plt+0x1f3c>
   138dc:	strh	r0, [r6, #56]	; 0x38
   138e0:	cmp	r0, #1
   138e4:	ldreq	r0, [r4, #48]	; 0x30
   138e8:	tsteq	r0, #4
   138ec:	beq	13ed0 <__assert_fail@plt+0x2b2c>
   138f0:	mov	r0, #3
   138f4:	strh	r0, [r6, #60]	; 0x3c
   138f8:	b	13a80 <__assert_fail@plt+0x26dc>
   138fc:	tst	r0, #64	; 0x40
   13900:	beq	1391c <__assert_fail@plt+0x2578>
   13904:	ldrd	r2, [r4, #16]
   13908:	ldrd	r8, [r6, #64]	; 0x40
   1390c:	eor	r1, r9, r3
   13910:	eor	r2, r8, r2
   13914:	orrs	r1, r2, r1
   13918:	bne	13818 <__assert_fail@plt+0x2474>
   1391c:	ldr	r7, [r4, #4]
   13920:	cmp	r7, #0
   13924:	beq	13a5c <__assert_fail@plt+0x26b8>
   13928:	tst	r0, #4096	; 0x1000
   1392c:	bne	13a24 <__assert_fail@plt+0x2680>
   13930:	ldr	r3, [r6, #24]
   13934:	mov	r0, r4
   13938:	mov	r1, r6
   1393c:	mvn	r2, #0
   13940:	bl	140a4 <__assert_fail@plt+0x2d00>
   13944:	cmp	r0, #0
   13948:	beq	13a74 <__assert_fail@plt+0x26d0>
   1394c:	bl	11260 <__errno_location@plt>
   13950:	ldr	r0, [r0]
   13954:	str	r0, [r6, #32]
   13958:	ldrh	r0, [r6, #58]	; 0x3a
   1395c:	orr	r0, r0, #1
   13960:	strh	r0, [r6, #58]	; 0x3a
   13964:	ldr	r0, [r4, #4]
   13968:	cmp	r0, #0
   1396c:	beq	13a74 <__assert_fail@plt+0x26d0>
   13970:	ldmib	r0, {r1, r2}
   13974:	ldr	r1, [r1, #24]
   13978:	cmp	r2, #0
   1397c:	str	r1, [r0, #24]
   13980:	mov	r0, r2
   13984:	bne	13970 <__assert_fail@plt+0x25cc>
   13988:	b	13a74 <__assert_fail@plt+0x26d0>
   1398c:	ldr	r0, [r7, #4]
   13990:	ldr	r1, [r0, #12]
   13994:	cmp	r1, #0
   13998:	beq	139fc <__assert_fail@plt+0x2658>
   1399c:	str	r0, [r4]
   139a0:	mov	r2, #0
   139a4:	ldr	r1, [r4, #24]
   139a8:	ldr	r0, [r0, #40]	; 0x28
   139ac:	strb	r2, [r1, r0]
   139b0:	mov	r0, r4
   139b4:	mov	r1, #3
   139b8:	bl	1434c <__assert_fail@plt+0x2fa8>
   139bc:	cmp	r0, #0
   139c0:	beq	13c44 <__assert_fail@plt+0x28a0>
   139c4:	mov	r6, r0
   139c8:	mov	r0, r7
   139cc:	bl	1a1cc <__assert_fail@plt+0x8e28>
   139d0:	b	13a80 <__assert_fail@plt+0x26dc>
   139d4:	mov	r0, r4
   139d8:	bl	14f28 <__assert_fail@plt+0x3b84>
   139dc:	ldr	r1, [r4, #48]	; 0x30
   139e0:	cmp	r0, #0
   139e4:	beq	13a04 <__assert_fail@plt+0x2660>
   139e8:	orr	r0, r1, #8192	; 0x2000
   139ec:	str	r0, [r4, #48]	; 0x30
   139f0:	mov	r0, sl
   139f4:	sub	sp, fp, #28
   139f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139fc:	mov	sl, r0
   13a00:	b	13c58 <__assert_fail@plt+0x28b4>
   13a04:	movw	r0, #258	; 0x102
   13a08:	tst	r1, r0
   13a0c:	beq	13d58 <__assert_fail@plt+0x29b4>
   13a10:	ldr	r0, [r4, #56]	; 0x38
   13a14:	cmp	r0, #0
   13a18:	beq	13d60 <__assert_fail@plt+0x29bc>
   13a1c:	bl	15bdc <__assert_fail@plt+0x4838>
   13a20:	b	13d60 <__assert_fail@plt+0x29bc>
   13a24:	bic	r0, r0, #4096	; 0x1000
   13a28:	str	r0, [r4, #48]	; 0x30
   13a2c:	ldrd	r8, [r7, #8]
   13a30:	cmp	r9, #0
   13a34:	beq	13a40 <__assert_fail@plt+0x269c>
   13a38:	mov	r0, r9
   13a3c:	bl	11398 <closedir@plt>
   13a40:	mov	r0, r7
   13a44:	bl	1a1cc <__assert_fail@plt+0x8e28>
   13a48:	cmp	r8, #0
   13a4c:	mov	r7, r8
   13a50:	bne	13a2c <__assert_fail@plt+0x2688>
   13a54:	mov	r0, #0
   13a58:	str	r0, [r4, #4]
   13a5c:	mov	r0, r4
   13a60:	mov	r1, #3
   13a64:	bl	1434c <__assert_fail@plt+0x2fa8>
   13a68:	cmp	r0, #0
   13a6c:	str	r0, [r4, #4]
   13a70:	beq	13c0c <__assert_fail@plt+0x2868>
   13a74:	ldr	r6, [r4, #4]
   13a78:	mov	r0, #0
   13a7c:	str	r0, [r4, #4]
   13a80:	ldr	r0, [r6, #4]
   13a84:	ldr	r1, [r0, #28]
   13a88:	ldr	r0, [r0, #40]	; 0x28
   13a8c:	sub	r2, r0, #1
   13a90:	ldrb	r1, [r1, r2]
   13a94:	cmp	r1, #47	; 0x2f
   13a98:	ldr	r1, [r4, #24]
   13a9c:	moveq	r0, r2
   13aa0:	mov	r2, #47	; 0x2f
   13aa4:	strb	r2, [r1, r0]!
   13aa8:	ldr	r2, [r6, #52]	; 0x34
   13aac:	add	r0, r1, #1
   13ab0:	add	r1, r6, #168	; 0xa8
   13ab4:	add	r2, r2, #1
   13ab8:	bl	11104 <memmove@plt>
   13abc:	str	r6, [r4]
   13ac0:	ldrh	r0, [r6, #56]	; 0x38
   13ac4:	cmp	r0, #11
   13ac8:	bne	13afc <__assert_fail@plt+0x2758>
   13acc:	ldrd	r0, [r6, #112]	; 0x70
   13ad0:	eor	r2, r0, #1
   13ad4:	orrs	r2, r2, r1
   13ad8:	beq	13ba4 <__assert_fail@plt+0x2800>
   13adc:	eor	r0, r0, #2
   13ae0:	orrs	r0, r0, r1
   13ae4:	bne	13fd0 <__assert_fail@plt+0x2c2c>
   13ae8:	mov	r0, r4
   13aec:	mov	r1, r6
   13af0:	mov	r2, #0
   13af4:	bl	132e0 <__assert_fail@plt+0x1f3c>
   13af8:	strh	r0, [r6, #56]	; 0x38
   13afc:	cmp	r0, #1
   13b00:	bne	13b94 <__assert_fail@plt+0x27f0>
   13b04:	ldr	r0, [r6, #48]	; 0x30
   13b08:	cmp	r0, #0
   13b0c:	ldrdeq	r0, [r6, #64]	; 0x40
   13b10:	strdeq	r0, [r4, #16]
   13b14:	movw	r1, #258	; 0x102
   13b18:	ldrh	r0, [r4, #48]	; 0x30
   13b1c:	tst	r0, r1
   13b20:	beq	13bb4 <__assert_fail@plt+0x2810>
   13b24:	mov	r0, #24
   13b28:	bl	19ca4 <__assert_fail@plt+0x8900>
   13b2c:	cmp	r0, #0
   13b30:	beq	13be4 <__assert_fail@plt+0x2840>
   13b34:	mov	r7, r0
   13b38:	ldrd	r0, [r6, #64]	; 0x40
   13b3c:	add	r2, r7, #8
   13b40:	stm	r7, {r0, r1}
   13b44:	ldrd	r0, [r6, #160]	; 0xa0
   13b48:	stm	r2, {r0, r1, r6}
   13b4c:	mov	r1, r7
   13b50:	ldr	r0, [r4, #56]	; 0x38
   13b54:	bl	164f8 <__assert_fail@plt+0x5154>
   13b58:	cmp	r0, r7
   13b5c:	beq	13c34 <__assert_fail@plt+0x2890>
   13b60:	mov	r4, r0
   13b64:	mov	r0, r7
   13b68:	bl	1a1cc <__assert_fail@plt+0x8e28>
   13b6c:	cmp	r4, #0
   13b70:	beq	13be4 <__assert_fail@plt+0x2840>
   13b74:	ldr	r0, [r4, #16]
   13b78:	mov	r1, #2
   13b7c:	mov	sl, r6
   13b80:	strh	r1, [r6, #56]	; 0x38
   13b84:	str	r0, [r6]
   13b88:	mov	r0, sl
   13b8c:	sub	sp, fp, #28
   13b90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b94:	mov	sl, r6
   13b98:	mov	r0, sl
   13b9c:	sub	sp, fp, #28
   13ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ba4:	mov	sl, r6
   13ba8:	mov	r0, sl
   13bac:	sub	sp, fp, #28
   13bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bb4:	ldr	r0, [r4, #56]	; 0x38
   13bb8:	add	r1, r6, #64	; 0x40
   13bbc:	bl	19dc8 <__assert_fail@plt+0x8a24>
   13bc0:	cmp	r0, #0
   13bc4:	beq	13bfc <__assert_fail@plt+0x2858>
   13bc8:	mov	r0, #2
   13bcc:	mov	sl, r6
   13bd0:	strh	r0, [r6, #56]	; 0x38
   13bd4:	str	r6, [r6]
   13bd8:	mov	r0, sl
   13bdc:	sub	sp, fp, #28
   13be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13be4:	bl	11260 <__errno_location@plt>
   13be8:	mov	r1, #12
   13bec:	str	r1, [r0]
   13bf0:	mov	r0, sl
   13bf4:	sub	sp, fp, #28
   13bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bfc:	mov	sl, r6
   13c00:	mov	r0, sl
   13c04:	sub	sp, fp, #28
   13c08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c0c:	ldrb	r0, [r4, #49]	; 0x31
   13c10:	tst	r0, #32
   13c14:	bne	13fc4 <__assert_fail@plt+0x2c20>
   13c18:	ldr	r0, [r6, #32]
   13c1c:	cmp	r0, #0
   13c20:	ldrhne	r0, [r5]
   13c24:	cmpne	r0, #4
   13c28:	movne	r0, #7
   13c2c:	strhne	r0, [r5]
   13c30:	b	13870 <__assert_fail@plt+0x24cc>
   13c34:	mov	sl, r6
   13c38:	mov	r0, sl
   13c3c:	sub	sp, fp, #28
   13c40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c44:	ldrb	r0, [r4, #49]	; 0x31
   13c48:	mov	sl, #0
   13c4c:	tst	r0, #32
   13c50:	bne	13fc4 <__assert_fail@plt+0x2c20>
   13c54:	ldr	sl, [r7, #4]
   13c58:	mov	r0, r7
   13c5c:	str	sl, [r4]
   13c60:	bl	1a1cc <__assert_fail@plt+0x8e28>
   13c64:	ldr	r0, [sl, #48]	; 0x30
   13c68:	cmn	r0, #1
   13c6c:	beq	13d0c <__assert_fail@plt+0x2968>
   13c70:	ldrh	r0, [sl, #56]	; 0x38
   13c74:	cmp	r0, #11
   13c78:	beq	13fd0 <__assert_fail@plt+0x2c2c>
   13c7c:	ldr	r0, [sl, #40]	; 0x28
   13c80:	ldr	r1, [r4, #24]
   13c84:	mov	r2, #0
   13c88:	strb	r2, [r1, r0]
   13c8c:	ldr	r0, [sl, #48]	; 0x30
   13c90:	cmp	r0, #0
   13c94:	beq	13e50 <__assert_fail@plt+0x2aac>
   13c98:	ldrh	r0, [sl, #58]	; 0x3a
   13c9c:	tst	r0, #2
   13ca0:	bne	13e88 <__assert_fail@plt+0x2ae4>
   13ca4:	tst	r0, #1
   13ca8:	bne	13f88 <__assert_fail@plt+0x2be4>
   13cac:	ldr	r1, [sl, #4]
   13cb0:	movw	r3, #45259	; 0xb0cb
   13cb4:	mov	r0, r4
   13cb8:	mvn	r2, #0
   13cbc:	movt	r3, #1
   13cc0:	bl	140a4 <__assert_fail@plt+0x2d00>
   13cc4:	cmp	r0, #0
   13cc8:	bne	13e60 <__assert_fail@plt+0x2abc>
   13ccc:	b	13f88 <__assert_fail@plt+0x2be4>
   13cd0:	ldr	r0, [r4, #32]
   13cd4:	movw	r1, #45260	; 0xb0cc
   13cd8:	movt	r1, #1
   13cdc:	bl	16ea0 <__assert_fail@plt+0x5afc>
   13ce0:	cmn	r0, #1
   13ce4:	str	r0, [r6, #36]	; 0x24
   13ce8:	ble	13d30 <__assert_fail@plt+0x298c>
   13cec:	ldrh	r0, [r6, #58]	; 0x3a
   13cf0:	orr	r0, r0, #2
   13cf4:	strh	r0, [r6, #58]	; 0x3a
   13cf8:	str	r6, [r4]
   13cfc:	ldrh	r0, [r6, #56]	; 0x38
   13d00:	cmp	r0, #11
   13d04:	beq	13acc <__assert_fail@plt+0x2728>
   13d08:	b	13afc <__assert_fail@plt+0x2758>
   13d0c:	mov	r0, sl
   13d10:	bl	1a1cc <__assert_fail@plt+0x8e28>
   13d14:	bl	11260 <__errno_location@plt>
   13d18:	mov	sl, #0
   13d1c:	str	sl, [r0]
   13d20:	str	sl, [r4]
   13d24:	mov	r0, sl
   13d28:	sub	sp, fp, #28
   13d2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d30:	bl	11260 <__errno_location@plt>
   13d34:	ldr	r0, [r0]
   13d38:	mov	r1, #7
   13d3c:	strh	r1, [r6, #56]	; 0x38
   13d40:	str	r0, [r6, #32]
   13d44:	str	r6, [r4]
   13d48:	ldrh	r0, [r6, #56]	; 0x38
   13d4c:	cmp	r0, #11
   13d50:	beq	13acc <__assert_fail@plt+0x2728>
   13d54:	b	13afc <__assert_fail@plt+0x2758>
   13d58:	ldr	r0, [r4, #56]	; 0x38
   13d5c:	bl	1a1cc <__assert_fail@plt+0x8e28>
   13d60:	ldr	r1, [r6, #52]	; 0x34
   13d64:	add	r7, r6, #168	; 0xa8
   13d68:	str	r1, [r6, #40]	; 0x28
   13d6c:	add	r2, r1, #1
   13d70:	mov	r1, r7
   13d74:	ldr	r0, [r4, #24]
   13d78:	bl	11104 <memmove@plt>
   13d7c:	mov	r0, r7
   13d80:	mov	r1, #47	; 0x2f
   13d84:	bl	112e4 <strrchr@plt>
   13d88:	cmp	r0, #0
   13d8c:	beq	13dc8 <__assert_fail@plt+0x2a24>
   13d90:	cmp	r0, r7
   13d94:	bne	13da4 <__assert_fail@plt+0x2a00>
   13d98:	ldrb	r1, [r6, #169]	; 0xa9
   13d9c:	cmp	r1, #0
   13da0:	beq	13dc8 <__assert_fail@plt+0x2a24>
   13da4:	add	r8, r0, #1
   13da8:	mov	r0, r8
   13dac:	bl	1123c <strlen@plt>
   13db0:	mov	r9, r0
   13db4:	add	r2, r0, #1
   13db8:	mov	r0, r7
   13dbc:	mov	r1, r8
   13dc0:	bl	11104 <memmove@plt>
   13dc4:	str	r9, [r6, #52]	; 0x34
   13dc8:	ldr	r0, [r4, #24]
   13dcc:	movw	r1, #258	; 0x102
   13dd0:	str	r0, [r6, #24]
   13dd4:	str	r0, [r6, #28]
   13dd8:	ldrh	r0, [r4, #48]	; 0x30
   13ddc:	tst	r0, r1
   13de0:	beq	13e24 <__assert_fail@plt+0x2a80>
   13de4:	movw	r0, #41420	; 0xa1cc
   13de8:	movw	r2, #20992	; 0x5200
   13dec:	movw	r3, #21024	; 0x5220
   13df0:	mov	r1, #0
   13df4:	movt	r0, #1
   13df8:	movt	r2, #1
   13dfc:	movt	r3, #1
   13e00:	str	r0, [sp]
   13e04:	mov	r0, #31
   13e08:	bl	158c0 <__assert_fail@plt+0x451c>
   13e0c:	str	r0, [r4, #56]	; 0x38
   13e10:	str	r6, [r4]
   13e14:	ldrh	r0, [r6, #56]	; 0x38
   13e18:	cmp	r0, #11
   13e1c:	beq	13acc <__assert_fail@plt+0x2728>
   13e20:	b	13afc <__assert_fail@plt+0x2758>
   13e24:	mov	r0, #32
   13e28:	bl	19ca4 <__assert_fail@plt+0x8900>
   13e2c:	cmp	r0, #0
   13e30:	str	r0, [r4, #56]	; 0x38
   13e34:	beq	13abc <__assert_fail@plt+0x2718>
   13e38:	bl	19dac <__assert_fail@plt+0x8a08>
   13e3c:	str	r6, [r4]
   13e40:	ldrh	r0, [r6, #56]	; 0x38
   13e44:	cmp	r0, #11
   13e48:	beq	13acc <__assert_fail@plt+0x2728>
   13e4c:	b	13afc <__assert_fail@plt+0x2758>
   13e50:	mov	r0, r4
   13e54:	bl	14f28 <__assert_fail@plt+0x3b84>
   13e58:	cmp	r0, #0
   13e5c:	beq	13f88 <__assert_fail@plt+0x2be4>
   13e60:	bl	11260 <__errno_location@plt>
   13e64:	ldr	r0, [r0]
   13e68:	str	r0, [sl, #32]
   13e6c:	ldr	r0, [r4, #48]	; 0x30
   13e70:	orr	r0, r0, #8192	; 0x2000
   13e74:	str	r0, [r4, #48]	; 0x30
   13e78:	ldrh	r0, [sl, #56]	; 0x38
   13e7c:	cmp	r0, #2
   13e80:	bne	13f94 <__assert_fail@plt+0x2bf0>
   13e84:	b	13fb8 <__assert_fail@plt+0x2c14>
   13e88:	ldr	r0, [r4, #48]	; 0x30
   13e8c:	tst	r0, #4
   13e90:	bne	13f08 <__assert_fail@plt+0x2b64>
   13e94:	mov	r5, sl
   13e98:	tst	r0, #512	; 0x200
   13e9c:	ldr	r6, [r5, #36]!	; 0x24
   13ea0:	bne	13f54 <__assert_fail@plt+0x2bb0>
   13ea4:	mov	r0, r6
   13ea8:	bl	11320 <fchdir@plt>
   13eac:	cmp	r0, #0
   13eb0:	beq	13f80 <__assert_fail@plt+0x2bdc>
   13eb4:	bl	11260 <__errno_location@plt>
   13eb8:	ldr	r0, [r0]
   13ebc:	str	r0, [sl, #32]
   13ec0:	ldr	r0, [r4, #48]	; 0x30
   13ec4:	orr	r0, r0, #8192	; 0x2000
   13ec8:	str	r0, [r4, #48]	; 0x30
   13ecc:	b	13f80 <__assert_fail@plt+0x2bdc>
   13ed0:	mov	r1, #32768	; 0x8000
   13ed4:	tst	r0, #512	; 0x200
   13ed8:	and	r1, r1, r0, lsl #11
   13edc:	orr	r1, r1, #18688	; 0x4900
   13ee0:	orr	r2, r1, #524288	; 0x80000
   13ee4:	bne	13f10 <__assert_fail@plt+0x2b6c>
   13ee8:	movw	r0, #45260	; 0xb0cc
   13eec:	mov	r1, r2
   13ef0:	movt	r0, #1
   13ef4:	bl	1a11c <__assert_fail@plt+0x8d78>
   13ef8:	cmn	r0, #1
   13efc:	str	r0, [r6, #36]	; 0x24
   13f00:	bgt	13f2c <__assert_fail@plt+0x2b88>
   13f04:	b	13f3c <__assert_fail@plt+0x2b98>
   13f08:	add	r5, sl, #36	; 0x24
   13f0c:	b	13f80 <__assert_fail@plt+0x2bdc>
   13f10:	ldr	r0, [r4, #32]
   13f14:	movw	r1, #45260	; 0xb0cc
   13f18:	movt	r1, #1
   13f1c:	bl	16ea0 <__assert_fail@plt+0x5afc>
   13f20:	cmn	r0, #1
   13f24:	str	r0, [r6, #36]	; 0x24
   13f28:	ble	13f3c <__assert_fail@plt+0x2b98>
   13f2c:	ldrh	r0, [r6, #58]	; 0x3a
   13f30:	orr	r0, r0, #2
   13f34:	strh	r0, [r6, #58]	; 0x3a
   13f38:	b	138f0 <__assert_fail@plt+0x254c>
   13f3c:	bl	11260 <__errno_location@plt>
   13f40:	ldr	r0, [r0]
   13f44:	mov	r1, #7
   13f48:	strh	r1, [r6, #56]	; 0x38
   13f4c:	str	r0, [r6, #32]
   13f50:	b	138f0 <__assert_fail@plt+0x254c>
   13f54:	ldr	r1, [r4, #32]
   13f58:	cmp	r1, r6
   13f5c:	bne	13f68 <__assert_fail@plt+0x2bc4>
   13f60:	cmn	r1, #100	; 0x64
   13f64:	bne	13fd0 <__assert_fail@plt+0x2c2c>
   13f68:	add	r0, r4, #60	; 0x3c
   13f6c:	bl	16820 <__assert_fail@plt+0x547c>
   13f70:	cmp	r0, #0
   13f74:	blt	13f7c <__assert_fail@plt+0x2bd8>
   13f78:	bl	11380 <close@plt>
   13f7c:	str	r6, [r4, #32]
   13f80:	ldr	r0, [r5]
   13f84:	bl	11380 <close@plt>
   13f88:	ldrh	r0, [sl, #56]	; 0x38
   13f8c:	cmp	r0, #2
   13f90:	beq	13fb8 <__assert_fail@plt+0x2c14>
   13f94:	ldr	r0, [sl, #32]
   13f98:	mov	r1, #7
   13f9c:	cmp	r0, #0
   13fa0:	movweq	r1, #6
   13fa4:	strh	r1, [sl, #56]	; 0x38
   13fa8:	bne	13fb8 <__assert_fail@plt+0x2c14>
   13fac:	mov	r0, r4
   13fb0:	mov	r1, sl
   13fb4:	bl	13fd4 <__assert_fail@plt+0x2c30>
   13fb8:	ldrb	r0, [r4, #49]	; 0x31
   13fbc:	tst	r0, #32
   13fc0:	movne	sl, #0
   13fc4:	mov	r0, sl
   13fc8:	sub	sp, fp, #28
   13fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fd0:	bl	11374 <abort@plt>
   13fd4:	push	{r4, r5, r6, r7, fp, lr}
   13fd8:	add	fp, sp, #16
   13fdc:	sub	sp, sp, #24
   13fe0:	ldrh	r2, [r0, #48]	; 0x30
   13fe4:	movw	r3, #258	; 0x102
   13fe8:	add	lr, r1, #64	; 0x40
   13fec:	tst	r2, r3
   13ff0:	beq	14028 <__assert_fail@plt+0x2c84>
   13ff4:	ldrd	r2, [lr]
   13ff8:	stm	sp, {r2, r3}
   13ffc:	ldrd	r2, [r1, #160]	; 0xa0
   14000:	mov	r1, sp
   14004:	str	r3, [sp, #12]
   14008:	str	r2, [sp, #8]
   1400c:	ldr	r0, [r0, #56]	; 0x38
   14010:	bl	16540 <__assert_fail@plt+0x519c>
   14014:	cmp	r0, #0
   14018:	beq	140a0 <__assert_fail@plt+0x2cfc>
   1401c:	bl	1a1cc <__assert_fail@plt+0x8e28>
   14020:	sub	sp, fp, #16
   14024:	pop	{r4, r5, r6, r7, fp, pc}
   14028:	ldr	r2, [r1, #4]
   1402c:	cmp	r2, #0
   14030:	beq	14098 <__assert_fail@plt+0x2cf4>
   14034:	ldr	r3, [r2, #48]	; 0x30
   14038:	cmp	r3, #0
   1403c:	blt	14098 <__assert_fail@plt+0x2cf4>
   14040:	ldr	ip, [r0, #56]	; 0x38
   14044:	ldrd	r4, [ip, #16]
   14048:	orrs	r3, r4, r5
   1404c:	beq	140a0 <__assert_fail@plt+0x2cfc>
   14050:	ldrd	r4, [r1, #160]	; 0xa0
   14054:	ldrd	r6, [ip]
   14058:	eor	r1, r7, r5
   1405c:	eor	r3, r6, r4
   14060:	orrs	r1, r3, r1
   14064:	bne	14098 <__assert_fail@plt+0x2cf4>
   14068:	ldr	r1, [ip, #8]!
   1406c:	ldrd	r4, [lr]
   14070:	ldr	r3, [ip, #4]
   14074:	eor	r1, r1, r4
   14078:	eor	r3, r3, r5
   1407c:	orrs	r1, r1, r3
   14080:	bne	14098 <__assert_fail@plt+0x2cf4>
   14084:	ldrd	r4, [r2, #64]	; 0x40
   14088:	strd	r4, [ip]
   1408c:	ldr	r0, [r0, #56]	; 0x38
   14090:	ldrd	r2, [r2, #160]	; 0xa0
   14094:	strd	r2, [r0]
   14098:	sub	sp, fp, #16
   1409c:	pop	{r4, r5, r6, r7, fp, pc}
   140a0:	bl	11374 <abort@plt>
   140a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140a8:	add	fp, sp, #28
   140ac:	sub	sp, sp, #108	; 0x6c
   140b0:	mov	r7, r3
   140b4:	mov	r4, r2
   140b8:	mov	r8, r1
   140bc:	mov	sl, r0
   140c0:	cmp	r3, #0
   140c4:	beq	14150 <__assert_fail@plt+0x2dac>
   140c8:	movw	r1, #45259	; 0xb0cb
   140cc:	mov	r0, r7
   140d0:	movt	r1, #1
   140d4:	bl	110ec <strcmp@plt>
   140d8:	mov	r6, r0
   140dc:	cmp	r0, #0
   140e0:	movwne	r6, #1
   140e4:	ldr	r0, [sl, #48]	; 0x30
   140e8:	tst	r0, #4
   140ec:	bne	14160 <__assert_fail@plt+0x2dbc>
   140f0:	cmn	r4, #1
   140f4:	mov	r1, #0
   140f8:	mov	r9, #0
   140fc:	movwgt	r1, #1
   14100:	orrs	r1, r1, r6
   14104:	bne	14188 <__assert_fail@plt+0x2de4>
   14108:	ands	r0, r0, #512	; 0x200
   1410c:	beq	14188 <__assert_fail@plt+0x2de4>
   14110:	add	r4, sl, #60	; 0x3c
   14114:	mov	r0, r4
   14118:	bl	16818 <__assert_fail@plt+0x5474>
   1411c:	cmp	r0, #0
   14120:	bne	14190 <__assert_fail@plt+0x2dec>
   14124:	mov	r0, r4
   14128:	bl	1686c <__assert_fail@plt+0x54c8>
   1412c:	cmn	r0, #1
   14130:	ble	14190 <__assert_fail@plt+0x2dec>
   14134:	mov	r4, r0
   14138:	mov	r9, #0
   1413c:	mov	r7, #0
   14140:	ldr	r5, [sl, #48]	; 0x30
   14144:	tst	r5, #2
   14148:	beq	141d4 <__assert_fail@plt+0x2e30>
   1414c:	b	1421c <__assert_fail@plt+0x2e78>
   14150:	mov	r6, #1
   14154:	ldr	r0, [sl, #48]	; 0x30
   14158:	tst	r0, #4
   1415c:	beq	140f0 <__assert_fail@plt+0x2d4c>
   14160:	mov	r5, #0
   14164:	cmp	r4, #0
   14168:	blt	14210 <__assert_fail@plt+0x2e6c>
   1416c:	ands	r0, r0, #512	; 0x200
   14170:	beq	14210 <__assert_fail@plt+0x2e6c>
   14174:	mov	r0, r4
   14178:	bl	11380 <close@plt>
   1417c:	mov	r0, r5
   14180:	sub	sp, fp, #28
   14184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14188:	cmn	r4, #1
   1418c:	bgt	141c8 <__assert_fail@plt+0x2e24>
   14190:	ldr	r0, [sl, #48]	; 0x30
   14194:	mov	r1, #32768	; 0x8000
   14198:	and	r1, r1, r0, lsl #11
   1419c:	tst	r0, #512	; 0x200
   141a0:	orr	r1, r1, #18688	; 0x4900
   141a4:	orr	r2, r1, #524288	; 0x80000
   141a8:	bne	14244 <__assert_fail@plt+0x2ea0>
   141ac:	mov	r0, r7
   141b0:	mov	r1, r2
   141b4:	bl	1a11c <__assert_fail@plt+0x8d78>
   141b8:	mov	r4, r0
   141bc:	mov	r9, #1
   141c0:	cmp	r0, #0
   141c4:	blt	14260 <__assert_fail@plt+0x2ebc>
   141c8:	ldr	r5, [sl, #48]	; 0x30
   141cc:	tst	r5, #2
   141d0:	bne	1421c <__assert_fail@plt+0x2e78>
   141d4:	cmp	r7, #0
   141d8:	beq	141f4 <__assert_fail@plt+0x2e50>
   141dc:	movw	r1, #45259	; 0xb0cb
   141e0:	mov	r0, r7
   141e4:	movt	r1, #1
   141e8:	bl	110ec <strcmp@plt>
   141ec:	cmp	r0, #0
   141f0:	beq	1421c <__assert_fail@plt+0x2e78>
   141f4:	tst	r5, #512	; 0x200
   141f8:	bne	142b0 <__assert_fail@plt+0x2f0c>
   141fc:	mov	r0, r4
   14200:	bl	11320 <fchdir@plt>
   14204:	mov	r5, r0
   14208:	cmp	r9, #0
   1420c:	bne	142f8 <__assert_fail@plt+0x2f54>
   14210:	mov	r0, r5
   14214:	sub	sp, fp, #28
   14218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1421c:	mov	r2, sp
   14220:	mov	r0, #3
   14224:	mov	r1, r4
   14228:	bl	11188 <__fxstat64@plt>
   1422c:	cmp	r0, #0
   14230:	beq	14270 <__assert_fail@plt+0x2ecc>
   14234:	mvn	r5, #0
   14238:	cmp	r9, #0
   1423c:	beq	14210 <__assert_fail@plt+0x2e6c>
   14240:	b	142f8 <__assert_fail@plt+0x2f54>
   14244:	ldr	r0, [sl, #32]
   14248:	mov	r1, r7
   1424c:	bl	16ea0 <__assert_fail@plt+0x5afc>
   14250:	mov	r4, r0
   14254:	mov	r9, #1
   14258:	cmp	r0, #0
   1425c:	bge	141c8 <__assert_fail@plt+0x2e24>
   14260:	mvn	r5, #0
   14264:	mov	r0, r5
   14268:	sub	sp, fp, #28
   1426c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14270:	ldrd	r0, [r8, #64]	; 0x40
   14274:	ldm	sp, {r2, r3}
   14278:	eor	r1, r1, r3
   1427c:	eor	r0, r0, r2
   14280:	orrs	r0, r0, r1
   14284:	bne	142e0 <__assert_fail@plt+0x2f3c>
   14288:	ldrd	r0, [r8, #160]	; 0xa0
   1428c:	ldr	r2, [sp, #96]	; 0x60
   14290:	ldr	r3, [sp, #100]	; 0x64
   14294:	eor	r1, r1, r3
   14298:	eor	r0, r0, r2
   1429c:	orrs	r0, r0, r1
   142a0:	bne	142e0 <__assert_fail@plt+0x2f3c>
   142a4:	ldr	r5, [sl, #48]	; 0x30
   142a8:	tst	r5, #512	; 0x200
   142ac:	beq	141fc <__assert_fail@plt+0x2e58>
   142b0:	ldr	r1, [sl, #32]
   142b4:	cmp	r1, r4
   142b8:	bne	142c4 <__assert_fail@plt+0x2f20>
   142bc:	cmn	r1, #100	; 0x64
   142c0:	bne	14348 <__assert_fail@plt+0x2fa4>
   142c4:	cmp	r6, #0
   142c8:	beq	1431c <__assert_fail@plt+0x2f78>
   142cc:	add	r0, sl, #60	; 0x3c
   142d0:	bl	16820 <__assert_fail@plt+0x547c>
   142d4:	cmp	r0, #0
   142d8:	bge	14330 <__assert_fail@plt+0x2f8c>
   142dc:	b	14334 <__assert_fail@plt+0x2f90>
   142e0:	bl	11260 <__errno_location@plt>
   142e4:	mov	r1, #2
   142e8:	str	r1, [r0]
   142ec:	mvn	r5, #0
   142f0:	cmp	r9, #0
   142f4:	beq	14210 <__assert_fail@plt+0x2e6c>
   142f8:	bl	11260 <__errno_location@plt>
   142fc:	ldr	r7, [r0]
   14300:	mov	r6, r0
   14304:	mov	r0, r4
   14308:	bl	11380 <close@plt>
   1430c:	str	r7, [r6]
   14310:	mov	r0, r5
   14314:	sub	sp, fp, #28
   14318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1431c:	tst	r5, #4
   14320:	bne	14334 <__assert_fail@plt+0x2f90>
   14324:	cmp	r1, #0
   14328:	blt	14334 <__assert_fail@plt+0x2f90>
   1432c:	mov	r0, r1
   14330:	bl	11380 <close@plt>
   14334:	str	r4, [sl, #32]
   14338:	mov	r5, #0
   1433c:	mov	r0, r5
   14340:	sub	sp, fp, #28
   14344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14348:	bl	11374 <abort@plt>
   1434c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14350:	add	fp, sp, #28
   14354:	sub	sp, sp, #76	; 0x4c
   14358:	ldr	r8, [r0]
   1435c:	mov	r9, r1
   14360:	mov	r5, r0
   14364:	str	r0, [sp, #52]	; 0x34
   14368:	ldr	r4, [r8, #12]
   1436c:	cmp	r4, #0
   14370:	beq	143bc <__assert_fail@plt+0x3018>
   14374:	mov	r0, r4
   14378:	bl	11314 <dirfd@plt>
   1437c:	cmn	r0, #1
   14380:	str	r0, [fp, #-32]	; 0xffffffe0
   14384:	ble	143f4 <__assert_fail@plt+0x3050>
   14388:	mov	r1, r5
   1438c:	mvn	r2, #0
   14390:	str	r4, [sp, #12]
   14394:	str	r9, [sp, #4]
   14398:	mov	ip, #0
   1439c:	ldr	r0, [r1, #44]!	; 0x2c
   143a0:	cmp	r0, #0
   143a4:	str	r1, [fp, #-48]	; 0xffffffd0
   143a8:	add	sl, r1, #4
   143ac:	movweq	r2, #34464	; 0x86a0
   143b0:	movteq	r2, #1
   143b4:	str	r2, [sp, #28]
   143b8:	b	14684 <__assert_fail@plt+0x32e0>
   143bc:	mov	sl, r5
   143c0:	mvn	r0, #99	; 0x63
   143c4:	mov	r2, #0
   143c8:	ldr	r3, [sl, #48]!	; 0x30
   143cc:	and	r1, r3, #516	; 0x204
   143d0:	cmp	r1, #512	; 0x200
   143d4:	ldr	r1, [r8, #24]
   143d8:	ldreq	r0, [r5, #32]
   143dc:	tst	r3, #16
   143e0:	beq	1441c <__assert_fail@plt+0x3078>
   143e4:	tst	r3, #1
   143e8:	bne	14410 <__assert_fail@plt+0x306c>
   143ec:	mov	r2, #32768	; 0x8000
   143f0:	b	1441c <__assert_fail@plt+0x3078>
   143f4:	ldr	r0, [r8, #12]
   143f8:	bl	11398 <closedir@plt>
   143fc:	mov	r6, #0
   14400:	str	r6, [r8, #12]
   14404:	cmp	r9, #3
   14408:	beq	14468 <__assert_fail@plt+0x30c4>
   1440c:	b	14d38 <__assert_fail@plt+0x3994>
   14410:	ldr	r3, [r8, #48]	; 0x30
   14414:	cmp	r3, #0
   14418:	movne	r2, #32768	; 0x8000
   1441c:	sub	r3, fp, #32
   14420:	bl	16ee4 <__assert_fail@plt+0x5b40>
   14424:	cmp	r0, #0
   14428:	str	r0, [r8, #12]
   1442c:	beq	1445c <__assert_fail@plt+0x30b8>
   14430:	ldrh	r0, [r8, #56]	; 0x38
   14434:	cmp	r0, #11
   14438:	bne	14488 <__assert_fail@plt+0x30e4>
   1443c:	mov	r0, r5
   14440:	mov	r1, r8
   14444:	mov	r2, #0
   14448:	bl	132e0 <__assert_fail@plt+0x1f3c>
   1444c:	mov	r7, r8
   14450:	strh	r0, [r8, #56]	; 0x38
   14454:	mov	r6, r5
   14458:	b	1455c <__assert_fail@plt+0x31b8>
   1445c:	mov	r6, #0
   14460:	cmp	r9, #3
   14464:	bne	14d38 <__assert_fail@plt+0x3994>
   14468:	mov	r0, #4
   1446c:	strh	r0, [r8, #56]	; 0x38
   14470:	bl	11260 <__errno_location@plt>
   14474:	ldr	r0, [r0]
   14478:	str	r0, [r8, #32]
   1447c:	mov	r0, r6
   14480:	sub	sp, fp, #28
   14484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14488:	ldrb	r0, [sl, #1]
   1448c:	mov	r7, r8
   14490:	mov	r6, r5
   14494:	tst	r0, #1
   14498:	beq	1455c <__assert_fail@plt+0x31b8>
   1449c:	mov	r0, r6
   144a0:	mov	r1, r7
   144a4:	mov	r5, r7
   144a8:	bl	13fd4 <__assert_fail@plt+0x2c30>
   144ac:	mov	r0, r6
   144b0:	mov	r1, r7
   144b4:	mov	r2, #0
   144b8:	bl	132e0 <__assert_fail@plt+0x1f3c>
   144bc:	ldrh	r0, [r6, #48]	; 0x30
   144c0:	movw	r1, #258	; 0x102
   144c4:	tst	r0, r1
   144c8:	beq	1453c <__assert_fail@plt+0x3198>
   144cc:	mov	r0, #24
   144d0:	bl	19ca4 <__assert_fail@plt+0x8900>
   144d4:	cmp	r0, #0
   144d8:	beq	14ef4 <__assert_fail@plt+0x3b50>
   144dc:	mov	r5, r0
   144e0:	ldrd	r0, [r7, #64]	; 0x40
   144e4:	add	r2, r5, #8
   144e8:	stm	r5, {r0, r1}
   144ec:	ldrd	r0, [r7, #160]	; 0xa0
   144f0:	stm	r2, {r0, r1, r7}
   144f4:	mov	r1, r5
   144f8:	ldr	r6, [sp, #52]	; 0x34
   144fc:	ldr	r0, [r6, #56]	; 0x38
   14500:	bl	164f8 <__assert_fail@plt+0x5154>
   14504:	cmp	r0, r5
   14508:	beq	1455c <__assert_fail@plt+0x31b8>
   1450c:	mov	r8, r0
   14510:	mov	r0, r5
   14514:	bl	1a1cc <__assert_fail@plt+0x8e28>
   14518:	cmp	r8, #0
   1451c:	beq	14ef4 <__assert_fail@plt+0x3b50>
   14520:	ldr	r0, [r8, #16]
   14524:	ldr	r6, [sp, #52]	; 0x34
   14528:	mov	r1, #2
   1452c:	mov	r2, r7
   14530:	strh	r1, [r7, #56]	; 0x38
   14534:	str	r0, [r7]
   14538:	b	1455c <__assert_fail@plt+0x31b8>
   1453c:	ldr	r0, [r6, #56]	; 0x38
   14540:	add	r1, r5, #64	; 0x40
   14544:	bl	19dc8 <__assert_fail@plt+0x8a24>
   14548:	cmp	r0, #0
   1454c:	movne	r0, #2
   14550:	movne	r1, r7
   14554:	strhne	r0, [r7, #56]	; 0x38
   14558:	strne	r7, [r7]
   1455c:	mov	r1, r6
   14560:	mov	r5, r6
   14564:	mov	r8, r7
   14568:	str	r9, [sp, #4]
   1456c:	str	r4, [sp, #12]
   14570:	ldr	r0, [r1, #44]!	; 0x2c
   14574:	str	r1, [fp, #-48]	; 0xffffffd0
   14578:	mvn	r1, #0
   1457c:	cmp	r0, #0
   14580:	movweq	r1, #34464	; 0x86a0
   14584:	movteq	r1, #1
   14588:	cmp	r9, #2
   1458c:	str	r1, [sp, #28]
   14590:	bne	145ac <__assert_fail@plt+0x3208>
   14594:	mov	ip, #1
   14598:	cmp	r9, #3
   1459c:	bne	14684 <__assert_fail@plt+0x32e0>
   145a0:	sub	r0, r9, #3
   145a4:	mov	r5, #0
   145a8:	b	145cc <__assert_fail@plt+0x3228>
   145ac:	ldr	r0, [sl]
   145b0:	and	r0, r0, #56	; 0x38
   145b4:	cmp	r0, #24
   145b8:	ldreq	r0, [r8, #84]	; 0x54
   145bc:	cmpeq	r0, #2
   145c0:	beq	14eb4 <__assert_fail@plt+0x3b10>
   145c4:	sub	r0, r9, #3
   145c8:	mov	r5, #1
   145cc:	clz	r0, r0
   145d0:	lsr	r6, r0, #5
   145d4:	ldrb	r0, [sl, #1]
   145d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   145dc:	tst	r0, #2
   145e0:	beq	145fc <__assert_fail@plt+0x3258>
   145e4:	mov	r0, r2
   145e8:	movw	r1, #1030	; 0x406
   145ec:	mov	r2, #3
   145f0:	bl	19f3c <__assert_fail@plt+0x8b98>
   145f4:	mov	r2, r0
   145f8:	str	r0, [fp, #-32]	; 0xffffffe0
   145fc:	cmp	r2, #0
   14600:	blt	1461c <__assert_fail@plt+0x3278>
   14604:	ldr	r0, [sp, #52]	; 0x34
   14608:	mov	r1, r8
   1460c:	mov	r3, #0
   14610:	bl	140a4 <__assert_fail@plt+0x2d00>
   14614:	cmp	r0, #0
   14618:	beq	1467c <__assert_fail@plt+0x32d8>
   1461c:	and	r0, r6, r5
   14620:	cmp	r0, #1
   14624:	bne	14634 <__assert_fail@plt+0x3290>
   14628:	bl	11260 <__errno_location@plt>
   1462c:	ldr	r0, [r0]
   14630:	str	r0, [r8, #32]
   14634:	ldrh	r0, [r8, #58]	; 0x3a
   14638:	orr	r0, r0, #1
   1463c:	strh	r0, [r8, #58]	; 0x3a
   14640:	ldr	r0, [r8, #12]
   14644:	bl	11398 <closedir@plt>
   14648:	mov	r4, #0
   1464c:	ldr	r5, [sp, #52]	; 0x34
   14650:	str	r4, [r8, #12]
   14654:	ldr	r0, [sl]
   14658:	tst	r0, #512	; 0x200
   1465c:	beq	14670 <__assert_fail@plt+0x32cc>
   14660:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14664:	cmp	r0, #0
   14668:	blt	14670 <__assert_fail@plt+0x32cc>
   1466c:	bl	11380 <close@plt>
   14670:	mov	ip, #1
   14674:	str	r4, [r8, #12]
   14678:	b	14684 <__assert_fail@plt+0x32e0>
   1467c:	ldr	r5, [sp, #52]	; 0x34
   14680:	mov	ip, #0
   14684:	ldr	r0, [r8, #40]	; 0x28
   14688:	ldr	r1, [r8, #28]
   1468c:	mov	r7, #0
   14690:	sub	r2, r0, #1
   14694:	ldrb	r1, [r1, r2]
   14698:	cmp	r1, #47	; 0x2f
   1469c:	ldrb	r1, [sl]
   146a0:	moveq	r0, r2
   146a4:	tst	r1, #4
   146a8:	mov	r1, #0
   146ac:	str	r1, [sp, #40]	; 0x28
   146b0:	beq	146c8 <__assert_fail@plt+0x3324>
   146b4:	ldr	r1, [r5, #24]
   146b8:	mov	r2, #47	; 0x2f
   146bc:	strb	r2, [r1, r0]!
   146c0:	add	r1, r1, #1
   146c4:	str	r1, [sp, #40]	; 0x28
   146c8:	ldr	r6, [r8, #12]
   146cc:	add	r1, r0, #1
   146d0:	str	r1, [fp, #-44]	; 0xffffffd4
   146d4:	cmp	r6, #0
   146d8:	beq	14a78 <__assert_fail@plt+0x36d4>
   146dc:	ldr	r0, [r8, #48]	; 0x30
   146e0:	str	ip, [sp]
   146e4:	add	r0, r0, #1
   146e8:	str	r0, [sp, #20]
   146ec:	ldr	r0, [r5, #36]	; 0x24
   146f0:	mov	r5, #0
   146f4:	sub	r0, r0, r1
   146f8:	str	r0, [sp, #44]	; 0x2c
   146fc:	bl	11260 <__errno_location@plt>
   14700:	str	r0, [sp, #36]	; 0x24
   14704:	mov	r0, #0
   14708:	mov	r7, #0
   1470c:	mov	r4, #0
   14710:	str	r8, [sp, #24]
   14714:	str	sl, [sp, #32]
   14718:	str	r0, [sp, #48]	; 0x30
   1471c:	mov	r0, #0
   14720:	str	r0, [sp, #8]
   14724:	mov	r0, #0
   14728:	str	r0, [sp, #16]
   1472c:	ldr	r0, [sp, #36]	; 0x24
   14730:	str	r7, [fp, #-36]	; 0xffffffdc
   14734:	str	r5, [r0]
   14738:	mov	r0, r6
   1473c:	bl	112fc <readdir64@plt>
   14740:	cmp	r0, #0
   14744:	beq	14bdc <__assert_fail@plt+0x3838>
   14748:	mov	r9, r0
   1474c:	ldrb	r0, [sl]
   14750:	str	r4, [fp, #-40]	; 0xffffffd8
   14754:	mov	r1, sl
   14758:	add	r4, r9, #19
   1475c:	tst	r0, #32
   14760:	ldrbeq	r0, [r4]
   14764:	cmpeq	r0, #46	; 0x2e
   14768:	beq	14864 <__assert_fail@plt+0x34c0>
   1476c:	mov	r0, r4
   14770:	bl	1123c <strlen@plt>
   14774:	mov	r5, r0
   14778:	add	r0, r0, #176	; 0xb0
   1477c:	bic	r0, r0, #7
   14780:	bl	19ca4 <__assert_fail@plt+0x8900>
   14784:	mov	r6, r0
   14788:	cmp	r0, #0
   1478c:	beq	14d98 <__assert_fail@plt+0x39f4>
   14790:	add	sl, r6, #168	; 0xa8
   14794:	mov	r1, r4
   14798:	mov	r2, r5
   1479c:	mov	r0, sl
   147a0:	bl	11128 <memcpy@plt>
   147a4:	ldr	r2, [sp, #52]	; 0x34
   147a8:	mov	r0, #0
   147ac:	mov	r1, #196608	; 0x30000
   147b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   147b4:	strb	r0, [sl, r5]
   147b8:	str	r5, [r6, #52]	; 0x34
   147bc:	str	r2, [r6, #44]	; 0x2c
   147c0:	add	r7, r5, r3
   147c4:	ldr	r4, [r2, #24]
   147c8:	str	r1, [r6, #58]	; 0x3a
   147cc:	str	r0, [r6, #12]
   147d0:	str	r0, [r6, #16]
   147d4:	str	r0, [r6, #20]
   147d8:	str	r4, [r6, #28]
   147dc:	str	r0, [r6, #32]
   147e0:	ldr	r0, [sp, #44]	; 0x2c
   147e4:	cmp	r5, r0
   147e8:	bcs	14800 <__assert_fail@plt+0x345c>
   147ec:	ldr	r4, [fp, #-40]	; 0xffffffd8
   147f0:	mov	r5, r2
   147f4:	cmp	r7, r3
   147f8:	bcs	148b8 <__assert_fail@plt+0x3514>
   147fc:	b	14c3c <__assert_fail@plt+0x3898>
   14800:	ldr	r1, [r2, #36]	; 0x24
   14804:	movw	r0, #257	; 0x101
   14808:	mov	r5, r2
   1480c:	add	r0, r7, r0
   14810:	adds	r1, r0, r1
   14814:	bcs	14d44 <__assert_fail@plt+0x39a0>
   14818:	mov	r0, r4
   1481c:	str	r1, [r5, #36]	; 0x24
   14820:	bl	19cd4 <__assert_fail@plt+0x8930>
   14824:	cmp	r0, #0
   14828:	beq	14d84 <__assert_fail@plt+0x39e0>
   1482c:	cmp	r0, r4
   14830:	str	r0, [r5, #24]
   14834:	beq	1489c <__assert_fail@plt+0x34f8>
   14838:	ldr	r1, [sp, #32]
   1483c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14840:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14844:	ldrb	r1, [r1]
   14848:	tst	r1, #4
   1484c:	ldr	r1, [sp, #40]	; 0x28
   14850:	addne	r1, r0, r3
   14854:	mov	r0, #1
   14858:	str	r1, [sp, #40]	; 0x28
   1485c:	str	r0, [sp, #16]
   14860:	b	148a4 <__assert_fail@plt+0x3500>
   14864:	ldrb	r0, [r9, #20]
   14868:	cmp	r0, #0
   1486c:	beq	14880 <__assert_fail@plt+0x34dc>
   14870:	cmp	r0, #46	; 0x2e
   14874:	ldrbeq	r0, [r9, #21]
   14878:	cmpeq	r0, #0
   1487c:	bne	1476c <__assert_fail@plt+0x33c8>
   14880:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14884:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14888:	mov	r5, #0
   1488c:	ldr	r6, [r8, #12]
   14890:	cmp	r6, #0
   14894:	bne	1472c <__assert_fail@plt+0x3388>
   14898:	b	14a5c <__assert_fail@plt+0x36b8>
   1489c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   148a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   148a4:	ldr	r0, [r5, #36]	; 0x24
   148a8:	sub	r0, r0, r3
   148ac:	str	r0, [sp, #44]	; 0x2c
   148b0:	cmp	r7, r3
   148b4:	bcc	14c3c <__assert_fail@plt+0x3898>
   148b8:	ldr	r0, [sp, #20]
   148bc:	str	r0, [r6, #48]	; 0x30
   148c0:	ldr	r0, [r5]
   148c4:	str	r7, [r6, #40]	; 0x28
   148c8:	str	r0, [r6, #4]
   148cc:	ldrd	r0, [r9]
   148d0:	strd	r0, [r6, #160]	; 0xa0
   148d4:	ldrb	r0, [r5, #48]	; 0x30
   148d8:	tst	r0, #4
   148dc:	bne	148e8 <__assert_fail@plt+0x3544>
   148e0:	str	sl, [r6, #24]
   148e4:	b	14904 <__assert_fail@plt+0x3560>
   148e8:	ldr	r0, [r6, #28]
   148ec:	ldr	r1, [r6, #52]	; 0x34
   148f0:	str	r0, [r6, #24]
   148f4:	ldr	r0, [sp, #40]	; 0x28
   148f8:	add	r2, r1, #1
   148fc:	mov	r1, sl
   14900:	bl	11104 <memmove@plt>
   14904:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14908:	ldr	sl, [sp, #32]
   1490c:	ldr	r8, [sp, #24]
   14910:	ldr	r0, [r0]
   14914:	ldr	r2, [sl]
   14918:	cmp	r0, #0
   1491c:	beq	14948 <__assert_fail@plt+0x35a4>
   14920:	ands	r0, r2, #1024	; 0x400
   14924:	bne	14948 <__assert_fail@plt+0x35a4>
   14928:	mov	r0, r5
   1492c:	mov	r1, r6
   14930:	mov	r2, #0
   14934:	bl	132e0 <__assert_fail@plt+0x1f3c>
   14938:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1493c:	mov	r5, #0
   14940:	strh	r0, [r6, #56]	; 0x38
   14944:	b	149c0 <__assert_fail@plt+0x361c>
   14948:	ldrb	r3, [r9, #18]
   1494c:	mov	r0, #0
   14950:	tst	r2, #8
   14954:	mov	r1, #0
   14958:	beq	1497c <__assert_fail@plt+0x35d8>
   1495c:	orr	r1, r3, #4
   14960:	cmp	r1, #4
   14964:	mov	r1, #0
   14968:	beq	1497c <__assert_fail@plt+0x35d8>
   1496c:	eor	r1, r3, #10
   14970:	and	r2, r2, #16
   14974:	orrs	r1, r2, r1
   14978:	movwne	r1, #1
   1497c:	mov	r2, #11
   14980:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14984:	mov	r5, #0
   14988:	strh	r2, [r6, #56]	; 0x38
   1498c:	sub	r2, r3, #1
   14990:	uxtb	r3, r2
   14994:	cmp	r3, #11
   14998:	sxtbls	r0, r2
   1499c:	movwls	r2, #45264	; 0xb0d0
   149a0:	movtls	r2, #1
   149a4:	ldrls	r0, [r2, r0, lsl #2]
   149a8:	cmp	r1, #0
   149ac:	str	r0, [r6, #80]	; 0x50
   149b0:	mov	r0, #2
   149b4:	movwne	r0, #1
   149b8:	str	r0, [r6, #112]	; 0x70
   149bc:	str	r5, [r6, #116]	; 0x74
   149c0:	cmp	r7, #0
   149c4:	str	r5, [r6, #8]
   149c8:	ldrne	r0, [sp, #48]	; 0x30
   149cc:	moveq	r7, r6
   149d0:	strne	r6, [r0, #8]
   149d4:	movw	r0, #10000	; 0x2710
   149d8:	cmp	r4, r0
   149dc:	bne	14a30 <__assert_fail@plt+0x368c>
   149e0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   149e4:	ldr	r0, [r0]
   149e8:	cmp	r0, #0
   149ec:	bne	14a30 <__assert_fail@plt+0x368c>
   149f0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   149f4:	mov	r0, r8
   149f8:	bl	152a0 <__assert_fail@plt+0x3efc>
   149fc:	mov	r1, #0
   14a00:	str	r1, [sp, #8]
   14a04:	movw	r1, #19778	; 0x4d42
   14a08:	movt	r1, #65363	; 0xff53
   14a0c:	cmp	r0, r1
   14a10:	movwne	r1, #26985	; 0x6969
   14a14:	cmpne	r0, r1
   14a18:	beq	14a30 <__assert_fail@plt+0x368c>
   14a1c:	movw	r1, #6548	; 0x1994
   14a20:	movt	r1, #258	; 0x102
   14a24:	cmp	r0, r1
   14a28:	movne	r0, #1
   14a2c:	strne	r0, [sp, #8]
   14a30:	ldr	r0, [sp, #28]
   14a34:	add	r4, r4, #1
   14a38:	cmp	r0, r4
   14a3c:	mov	r0, #0
   14a40:	movwls	r0, #15
   14a44:	cmp	r0, #0
   14a48:	bne	14cbc <__assert_fail@plt+0x3918>
   14a4c:	str	r6, [sp, #48]	; 0x30
   14a50:	ldr	r6, [r8, #12]
   14a54:	cmp	r6, #0
   14a58:	bne	1472c <__assert_fail@plt+0x3388>
   14a5c:	ldr	r0, [sp, #16]
   14a60:	ldr	ip, [sp]
   14a64:	ldr	r6, [sp, #8]
   14a68:	ldr	r5, [sp, #52]	; 0x34
   14a6c:	tst	r0, #1
   14a70:	beq	14a80 <__assert_fail@plt+0x36dc>
   14a74:	b	14e28 <__assert_fail@plt+0x3a84>
   14a78:	mov	r4, #0
   14a7c:	mov	r6, #0
   14a80:	ldrb	r0, [sl]
   14a84:	tst	r0, #4
   14a88:	beq	14ab4 <__assert_fail@plt+0x3710>
   14a8c:	ldr	r2, [sp, #40]	; 0x28
   14a90:	ldr	r0, [r5, #36]	; 0x24
   14a94:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14a98:	cmp	r3, r0
   14a9c:	sub	r1, r2, #1
   14aa0:	mov	r0, #0
   14aa4:	moveq	r2, r1
   14aa8:	cmp	r4, #0
   14aac:	moveq	r2, r1
   14ab0:	strb	r0, [r2]
   14ab4:	ldr	r0, [sp, #12]
   14ab8:	cmp	r0, #0
   14abc:	movwne	r0, #1
   14ac0:	orrs	r0, r0, ip
   14ac4:	beq	14b28 <__assert_fail@plt+0x3784>
   14ac8:	cmp	r4, #0
   14acc:	bne	14b68 <__assert_fail@plt+0x37c4>
   14ad0:	ldr	r0, [sp, #4]
   14ad4:	cmp	r0, #3
   14ad8:	bne	14af0 <__assert_fail@plt+0x374c>
   14adc:	ldrh	r0, [r8, #56]	; 0x38
   14ae0:	cmp	r0, #4
   14ae4:	cmpne	r0, #7
   14ae8:	movne	r0, #6
   14aec:	strhne	r0, [r8, #56]	; 0x38
   14af0:	mov	r6, #0
   14af4:	cmp	r7, #0
   14af8:	beq	14d38 <__assert_fail@plt+0x3994>
   14afc:	ldrd	r4, [r7, #8]
   14b00:	cmp	r5, #0
   14b04:	beq	14b10 <__assert_fail@plt+0x376c>
   14b08:	mov	r0, r5
   14b0c:	bl	11398 <closedir@plt>
   14b10:	mov	r0, r7
   14b14:	bl	1a1cc <__assert_fail@plt+0x8e28>
   14b18:	cmp	r4, #0
   14b1c:	mov	r7, r4
   14b20:	bne	14afc <__assert_fail@plt+0x3758>
   14b24:	b	14d38 <__assert_fail@plt+0x3994>
   14b28:	ldr	r0, [sp, #4]
   14b2c:	cmp	r0, #1
   14b30:	cmpne	r4, #0
   14b34:	bne	14b68 <__assert_fail@plt+0x37c4>
   14b38:	ldr	r0, [r8, #48]	; 0x30
   14b3c:	cmp	r0, #0
   14b40:	beq	14ce0 <__assert_fail@plt+0x393c>
   14b44:	ldr	r1, [r8, #4]
   14b48:	movw	r3, #45259	; 0xb0cb
   14b4c:	mov	r0, r5
   14b50:	mvn	r2, #0
   14b54:	movt	r3, #1
   14b58:	bl	140a4 <__assert_fail@plt+0x2d00>
   14b5c:	cmp	r0, #0
   14b60:	bne	14cf0 <__assert_fail@plt+0x394c>
   14b64:	b	14ac8 <__assert_fail@plt+0x3724>
   14b68:	tst	r6, #1
   14b6c:	beq	14ba4 <__assert_fail@plt+0x3800>
   14b70:	movw	r0, #21096	; 0x5268
   14b74:	mov	r1, r7
   14b78:	mov	r2, r4
   14b7c:	movt	r0, #1
   14b80:	str	r0, [r5, #44]	; 0x2c
   14b84:	mov	r0, r5
   14b88:	bl	13478 <__assert_fail@plt+0x20d4>
   14b8c:	mov	r6, r0
   14b90:	mov	r0, #0
   14b94:	str	r0, [r5, #44]	; 0x2c
   14b98:	mov	r0, r6
   14b9c:	sub	sp, fp, #28
   14ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ba4:	cmp	r4, #2
   14ba8:	bcc	14d64 <__assert_fail@plt+0x39c0>
   14bac:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14bb0:	ldr	r0, [r0]
   14bb4:	cmp	r0, #0
   14bb8:	beq	14d74 <__assert_fail@plt+0x39d0>
   14bbc:	mov	r0, r5
   14bc0:	mov	r1, r7
   14bc4:	mov	r2, r4
   14bc8:	bl	13478 <__assert_fail@plt+0x20d4>
   14bcc:	mov	r6, r0
   14bd0:	mov	r0, r6
   14bd4:	sub	sp, fp, #28
   14bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bdc:	ldr	r0, [sp, #36]	; 0x24
   14be0:	ldr	r0, [r0]
   14be4:	cmp	r0, #0
   14be8:	beq	14c04 <__assert_fail@plt+0x3860>
   14bec:	str	r0, [r8, #32]
   14bf0:	ldr	r0, [sp, #12]
   14bf4:	orrs	r0, r0, r4
   14bf8:	mov	r0, #4
   14bfc:	movwne	r0, #7
   14c00:	strh	r0, [r8, #56]	; 0x38
   14c04:	ldr	r0, [r8, #12]
   14c08:	ldr	r6, [sp, #8]
   14c0c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14c10:	ldr	r5, [sp, #52]	; 0x34
   14c14:	cmp	r0, #0
   14c18:	beq	14e18 <__assert_fail@plt+0x3a74>
   14c1c:	bl	11398 <closedir@plt>
   14c20:	mov	r0, #0
   14c24:	ldr	ip, [sp]
   14c28:	str	r0, [r8, #12]
   14c2c:	ldr	r0, [sp, #16]
   14c30:	tst	r0, #1
   14c34:	beq	14a80 <__assert_fail@plt+0x36dc>
   14c38:	b	14e28 <__assert_fail@plt+0x3a84>
   14c3c:	mov	r0, r6
   14c40:	bl	1a1cc <__assert_fail@plt+0x8e28>
   14c44:	ldr	r6, [fp, #-36]	; 0xffffffdc
   14c48:	ldr	r7, [sp, #24]
   14c4c:	cmp	r6, #0
   14c50:	beq	14c7c <__assert_fail@plt+0x38d8>
   14c54:	ldrd	r4, [r6, #8]
   14c58:	cmp	r5, #0
   14c5c:	beq	14c68 <__assert_fail@plt+0x38c4>
   14c60:	mov	r0, r5
   14c64:	bl	11398 <closedir@plt>
   14c68:	mov	r0, r6
   14c6c:	bl	1a1cc <__assert_fail@plt+0x8e28>
   14c70:	cmp	r4, #0
   14c74:	mov	r6, r4
   14c78:	bne	14c54 <__assert_fail@plt+0x38b0>
   14c7c:	ldr	r0, [r7, #12]
   14c80:	bl	11398 <closedir@plt>
   14c84:	ldr	r1, [sp, #32]
   14c88:	mov	r6, #0
   14c8c:	mov	r0, #7
   14c90:	str	r6, [r7, #12]
   14c94:	strh	r0, [r7, #56]	; 0x38
   14c98:	ldr	r0, [r1]
   14c9c:	orr	r0, r0, #8192	; 0x2000
   14ca0:	str	r0, [r1]
   14ca4:	ldr	r1, [sp, #36]	; 0x24
   14ca8:	mov	r0, #36	; 0x24
   14cac:	str	r0, [r1]
   14cb0:	mov	r0, r6
   14cb4:	sub	sp, fp, #28
   14cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cbc:	ldr	ip, [sp]
   14cc0:	cmp	r0, #15
   14cc4:	bne	14f00 <__assert_fail@plt+0x3b5c>
   14cc8:	ldr	r6, [sp, #8]
   14ccc:	ldr	r5, [sp, #52]	; 0x34
   14cd0:	ldr	r0, [sp, #16]
   14cd4:	tst	r0, #1
   14cd8:	beq	14a80 <__assert_fail@plt+0x36dc>
   14cdc:	b	14e28 <__assert_fail@plt+0x3a84>
   14ce0:	mov	r0, r5
   14ce4:	bl	14f28 <__assert_fail@plt+0x3b84>
   14ce8:	cmp	r0, #0
   14cec:	beq	14ac8 <__assert_fail@plt+0x3724>
   14cf0:	mov	r0, #7
   14cf4:	mov	r6, #0
   14cf8:	cmp	r7, #0
   14cfc:	strh	r0, [r8, #56]	; 0x38
   14d00:	ldr	r0, [sl]
   14d04:	orr	r0, r0, #8192	; 0x2000
   14d08:	str	r0, [sl]
   14d0c:	beq	14d38 <__assert_fail@plt+0x3994>
   14d10:	ldrd	r4, [r7, #8]
   14d14:	cmp	r5, #0
   14d18:	beq	14d24 <__assert_fail@plt+0x3980>
   14d1c:	mov	r0, r5
   14d20:	bl	11398 <closedir@plt>
   14d24:	mov	r0, r7
   14d28:	bl	1a1cc <__assert_fail@plt+0x8e28>
   14d2c:	cmp	r4, #0
   14d30:	mov	r7, r4
   14d34:	bne	14d10 <__assert_fail@plt+0x396c>
   14d38:	mov	r0, r6
   14d3c:	sub	sp, fp, #28
   14d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d44:	mov	r0, r4
   14d48:	bl	1a1cc <__assert_fail@plt+0x8e28>
   14d4c:	ldr	r1, [sp, #36]	; 0x24
   14d50:	mov	r0, #0
   14d54:	str	r0, [r5, #24]
   14d58:	mov	r0, #36	; 0x24
   14d5c:	str	r0, [r1]
   14d60:	b	14d94 <__assert_fail@plt+0x39f0>
   14d64:	mov	r6, r7
   14d68:	mov	r0, r6
   14d6c:	sub	sp, fp, #28
   14d70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d74:	mov	r6, r7
   14d78:	mov	r0, r6
   14d7c:	sub	sp, fp, #28
   14d80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d84:	ldr	r0, [r5, #24]
   14d88:	bl	1a1cc <__assert_fail@plt+0x8e28>
   14d8c:	mov	r0, #0
   14d90:	str	r0, [r5, #24]
   14d94:	ldr	r8, [sp, #24]
   14d98:	ldr	r0, [sp, #36]	; 0x24
   14d9c:	ldr	r4, [r0]
   14da0:	mov	r0, r6
   14da4:	bl	1a1cc <__assert_fail@plt+0x8e28>
   14da8:	ldr	r5, [fp, #-36]	; 0xffffffdc
   14dac:	cmp	r5, #0
   14db0:	beq	14ddc <__assert_fail@plt+0x3a38>
   14db4:	ldrd	r6, [r5, #8]
   14db8:	cmp	r7, #0
   14dbc:	beq	14dc8 <__assert_fail@plt+0x3a24>
   14dc0:	mov	r0, r7
   14dc4:	bl	11398 <closedir@plt>
   14dc8:	mov	r0, r5
   14dcc:	bl	1a1cc <__assert_fail@plt+0x8e28>
   14dd0:	cmp	r6, #0
   14dd4:	mov	r5, r6
   14dd8:	bne	14db4 <__assert_fail@plt+0x3a10>
   14ddc:	ldr	r0, [r8, #12]
   14de0:	bl	11398 <closedir@plt>
   14de4:	ldr	r1, [sp, #32]
   14de8:	mov	r6, #0
   14dec:	mov	r0, #7
   14df0:	str	r6, [r8, #12]
   14df4:	strh	r0, [r8, #56]	; 0x38
   14df8:	ldr	r0, [r1]
   14dfc:	orr	r0, r0, #8192	; 0x2000
   14e00:	str	r0, [r1]
   14e04:	ldr	r0, [sp, #36]	; 0x24
   14e08:	str	r4, [r0]
   14e0c:	mov	r0, r6
   14e10:	sub	sp, fp, #28
   14e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e18:	ldr	ip, [sp]
   14e1c:	ldr	r0, [sp, #16]
   14e20:	tst	r0, #1
   14e24:	beq	14a80 <__assert_fail@plt+0x36dc>
   14e28:	ldr	r1, [r5, #4]
   14e2c:	ldr	r0, [r5, #24]
   14e30:	cmp	r1, #0
   14e34:	beq	14e64 <__assert_fail@plt+0x3ac0>
   14e38:	ldr	r2, [r1, #24]
   14e3c:	add	r3, r1, #168	; 0xa8
   14e40:	cmp	r2, r3
   14e44:	ldrne	r3, [r1, #28]
   14e48:	subne	r2, r2, r3
   14e4c:	addne	r2, r0, r2
   14e50:	strne	r2, [r1, #24]
   14e54:	str	r0, [r1, #28]
   14e58:	ldr	r1, [r1, #8]
   14e5c:	cmp	r1, #0
   14e60:	bne	14e38 <__assert_fail@plt+0x3a94>
   14e64:	ldr	r1, [r7, #48]	; 0x30
   14e68:	cmp	r1, #0
   14e6c:	blt	14a80 <__assert_fail@plt+0x36dc>
   14e70:	mov	r1, r7
   14e74:	ldr	r2, [r1, #24]
   14e78:	add	r3, r1, #168	; 0xa8
   14e7c:	cmp	r2, r3
   14e80:	ldrne	r3, [r1, #28]
   14e84:	subne	r2, r2, r3
   14e88:	addne	r2, r0, r2
   14e8c:	strne	r2, [r1, #24]
   14e90:	str	r0, [r1, #28]
   14e94:	ldr	r2, [r1, #8]
   14e98:	cmp	r2, #0
   14e9c:	ldreq	r2, [r1, #4]
   14ea0:	ldr	r1, [r2, #48]	; 0x30
   14ea4:	cmn	r1, #1
   14ea8:	mov	r1, r2
   14eac:	bgt	14e74 <__assert_fail@plt+0x3ad0>
   14eb0:	b	14a80 <__assert_fail@plt+0x36dc>
   14eb4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14eb8:	mov	r0, r8
   14ebc:	bl	152a0 <__assert_fail@plt+0x3efc>
   14ec0:	movw	r1, #26984	; 0x6968
   14ec4:	cmp	r0, r1
   14ec8:	ble	14f10 <__assert_fail@plt+0x3b6c>
   14ecc:	movw	r1, #26985	; 0x6969
   14ed0:	cmp	r0, r1
   14ed4:	movwne	r1, #16719	; 0x414f
   14ed8:	movtne	r1, #21318	; 0x5346
   14edc:	cmpne	r0, r1
   14ee0:	beq	145c4 <__assert_fail@plt+0x3220>
   14ee4:	movw	r1, #40864	; 0x9fa0
   14ee8:	cmp	r0, r1
   14eec:	beq	145c4 <__assert_fail@plt+0x3220>
   14ef0:	b	14594 <__assert_fail@plt+0x31f0>
   14ef4:	bl	11260 <__errno_location@plt>
   14ef8:	mov	r1, #12
   14efc:	str	r1, [r0]
   14f00:	mov	r6, #0
   14f04:	mov	r0, r6
   14f08:	sub	sp, fp, #28
   14f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f10:	movw	r1, #19778	; 0x4d42
   14f14:	movt	r1, #65363	; 0xff53
   14f18:	cmp	r0, r1
   14f1c:	cmpne	r0, #0
   14f20:	beq	145c4 <__assert_fail@plt+0x3220>
   14f24:	b	14594 <__assert_fail@plt+0x31f0>
   14f28:	push	{r4, r5, fp, lr}
   14f2c:	add	fp, sp, #8
   14f30:	mov	r5, r0
   14f34:	ldr	r0, [r0, #48]	; 0x30
   14f38:	mov	r4, #0
   14f3c:	tst	r0, #4
   14f40:	bne	14f84 <__assert_fail@plt+0x3be0>
   14f44:	tst	r0, #512	; 0x200
   14f48:	bne	14f64 <__assert_fail@plt+0x3bc0>
   14f4c:	ldr	r0, [r5, #28]
   14f50:	bl	11320 <fchdir@plt>
   14f54:	mov	r4, r0
   14f58:	cmp	r0, #0
   14f5c:	movwne	r4, #1
   14f60:	b	14f84 <__assert_fail@plt+0x3be0>
   14f64:	ldr	r1, [r5, #32]
   14f68:	add	r0, r5, #60	; 0x3c
   14f6c:	bl	16820 <__assert_fail@plt+0x547c>
   14f70:	cmp	r0, #0
   14f74:	blt	14f7c <__assert_fail@plt+0x3bd8>
   14f78:	bl	11380 <close@plt>
   14f7c:	mvn	r0, #99	; 0x63
   14f80:	str	r0, [r5, #32]
   14f84:	add	r5, r5, #60	; 0x3c
   14f88:	b	14f90 <__assert_fail@plt+0x3bec>
   14f8c:	bl	11380 <close@plt>
   14f90:	mov	r0, r5
   14f94:	bl	16818 <__assert_fail@plt+0x5474>
   14f98:	cmp	r0, #0
   14f9c:	movne	r0, r4
   14fa0:	popne	{r4, r5, fp, pc}
   14fa4:	mov	r0, r5
   14fa8:	bl	1686c <__assert_fail@plt+0x54c8>
   14fac:	cmp	r0, #0
   14fb0:	bge	14f8c <__assert_fail@plt+0x3be8>
   14fb4:	b	14f90 <__assert_fail@plt+0x3bec>
   14fb8:	cmp	r2, #5
   14fbc:	movcc	r0, #0
   14fc0:	strhcc	r2, [r1, #60]	; 0x3c
   14fc4:	bxcc	lr
   14fc8:	push	{fp, lr}
   14fcc:	mov	fp, sp
   14fd0:	bl	11260 <__errno_location@plt>
   14fd4:	mov	r1, #22
   14fd8:	str	r1, [r0]
   14fdc:	mov	r0, #1
   14fe0:	pop	{fp, pc}
   14fe4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fe8:	add	fp, sp, #28
   14fec:	sub	sp, sp, #4
   14ff0:	mov	r9, r0
   14ff4:	orr	r0, r1, #4096	; 0x1000
   14ff8:	cmp	r0, #4096	; 0x1000
   14ffc:	bne	15044 <__assert_fail@plt+0x3ca0>
   15000:	ldr	r8, [r9]
   15004:	mov	r7, r1
   15008:	bl	11260 <__errno_location@plt>
   1500c:	mov	r5, #0
   15010:	mov	sl, r0
   15014:	str	r5, [r0]
   15018:	ldrb	r0, [r9, #49]	; 0x31
   1501c:	tst	r0, #32
   15020:	bne	15038 <__assert_fail@plt+0x3c94>
   15024:	ldrh	r0, [r8, #56]	; 0x38
   15028:	cmp	r0, #1
   1502c:	beq	15060 <__assert_fail@plt+0x3cbc>
   15030:	cmp	r0, #9
   15034:	ldreq	r5, [r8, #8]
   15038:	mov	r0, r5
   1503c:	sub	sp, fp, #28
   15040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15044:	bl	11260 <__errno_location@plt>
   15048:	mov	r1, #22
   1504c:	mov	r5, #0
   15050:	str	r1, [r0]
   15054:	mov	r0, r5
   15058:	sub	sp, fp, #28
   1505c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15060:	ldr	r6, [r9, #4]
   15064:	cmp	r6, #0
   15068:	beq	15098 <__assert_fail@plt+0x3cf4>
   1506c:	ldr	r4, [r6, #8]
   15070:	ldr	r1, [r6, #12]
   15074:	cmp	r1, #0
   15078:	beq	15084 <__assert_fail@plt+0x3ce0>
   1507c:	mov	r0, r1
   15080:	bl	11398 <closedir@plt>
   15084:	mov	r0, r6
   15088:	bl	1a1cc <__assert_fail@plt+0x8e28>
   1508c:	cmp	r4, #0
   15090:	mov	r6, r4
   15094:	bne	1506c <__assert_fail@plt+0x3cc8>
   15098:	cmp	r7, #4096	; 0x1000
   1509c:	mov	r4, #1
   150a0:	ldreq	r0, [r9, #48]	; 0x30
   150a4:	moveq	r4, #2
   150a8:	orreq	r0, r0, #4096	; 0x1000
   150ac:	streq	r0, [r9, #48]	; 0x30
   150b0:	ldr	r0, [r8, #48]	; 0x30
   150b4:	cmp	r0, #0
   150b8:	bne	15110 <__assert_fail@plt+0x3d6c>
   150bc:	ldr	r0, [r8, #24]
   150c0:	ldrb	r0, [r0]
   150c4:	cmp	r0, #47	; 0x2f
   150c8:	beq	15110 <__assert_fail@plt+0x3d6c>
   150cc:	ldr	r0, [r9, #48]	; 0x30
   150d0:	tst	r0, #4
   150d4:	bne	15110 <__assert_fail@plt+0x3d6c>
   150d8:	mov	r1, #32768	; 0x8000
   150dc:	tst	r0, #512	; 0x200
   150e0:	and	r1, r1, r0, lsl #11
   150e4:	orr	r1, r1, #18688	; 0x4900
   150e8:	orr	r2, r1, #524288	; 0x80000
   150ec:	bne	15130 <__assert_fail@plt+0x3d8c>
   150f0:	movw	r0, #45260	; 0xb0cc
   150f4:	mov	r1, r2
   150f8:	movt	r0, #1
   150fc:	bl	1a11c <__assert_fail@plt+0x8d78>
   15100:	mov	r8, r0
   15104:	cmn	r0, #1
   15108:	bgt	1514c <__assert_fail@plt+0x3da8>
   1510c:	b	15194 <__assert_fail@plt+0x3df0>
   15110:	mov	r0, r9
   15114:	mov	r1, r4
   15118:	bl	1434c <__assert_fail@plt+0x2fa8>
   1511c:	mov	r5, r0
   15120:	str	r0, [r9, #4]
   15124:	mov	r0, r5
   15128:	sub	sp, fp, #28
   1512c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15130:	ldr	r0, [r9, #32]
   15134:	movw	r1, #45260	; 0xb0cc
   15138:	movt	r1, #1
   1513c:	bl	16ea0 <__assert_fail@plt+0x5afc>
   15140:	mov	r8, r0
   15144:	cmn	r0, #1
   15148:	ble	15194 <__assert_fail@plt+0x3df0>
   1514c:	mov	r0, r9
   15150:	mov	r1, r4
   15154:	bl	1434c <__assert_fail@plt+0x2fa8>
   15158:	str	r0, [r9, #4]
   1515c:	ldrb	r0, [r9, #49]	; 0x31
   15160:	tst	r0, #2
   15164:	bne	151a8 <__assert_fail@plt+0x3e04>
   15168:	mov	r0, r8
   1516c:	bl	11320 <fchdir@plt>
   15170:	cmp	r0, #0
   15174:	beq	151e4 <__assert_fail@plt+0x3e40>
   15178:	ldr	r4, [sl]
   1517c:	mov	r0, r8
   15180:	bl	11380 <close@plt>
   15184:	str	r4, [sl]
   15188:	mov	r0, r5
   1518c:	sub	sp, fp, #28
   15190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15194:	mov	r5, #0
   15198:	str	r5, [r9, #4]
   1519c:	mov	r0, r5
   151a0:	sub	sp, fp, #28
   151a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151a8:	ldr	r1, [r9, #32]
   151ac:	cmp	r1, r8
   151b0:	bne	151bc <__assert_fail@plt+0x3e18>
   151b4:	cmn	r1, #100	; 0x64
   151b8:	bne	151fc <__assert_fail@plt+0x3e58>
   151bc:	add	r0, r9, #60	; 0x3c
   151c0:	bl	16820 <__assert_fail@plt+0x547c>
   151c4:	cmp	r0, #0
   151c8:	blt	151d0 <__assert_fail@plt+0x3e2c>
   151cc:	bl	11380 <close@plt>
   151d0:	str	r8, [r9, #32]
   151d4:	ldr	r5, [r9, #4]
   151d8:	mov	r0, r5
   151dc:	sub	sp, fp, #28
   151e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151e4:	mov	r0, r8
   151e8:	bl	11380 <close@plt>
   151ec:	ldr	r5, [r9, #4]
   151f0:	mov	r0, r5
   151f4:	sub	sp, fp, #28
   151f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151fc:	bl	11374 <abort@plt>
   15200:	push	{fp, lr}
   15204:	mov	fp, sp
   15208:	mov	r2, r1
   1520c:	ldrd	r0, [r0, #8]
   15210:	mov	r3, #0
   15214:	bl	1a480 <__assert_fail@plt+0x90dc>
   15218:	mov	r0, r2
   1521c:	pop	{fp, pc}
   15220:	push	{r4, r5, fp, lr}
   15224:	add	fp, sp, #8
   15228:	ldrd	r2, [r1, #8]
   1522c:	ldrd	r4, [r0, #8]
   15230:	eor	r3, r5, r3
   15234:	eor	r2, r4, r2
   15238:	orrs	r2, r2, r3
   1523c:	mov	r2, #0
   15240:	bne	15260 <__assert_fail@plt+0x3ebc>
   15244:	ldrd	r2, [r1]
   15248:	ldrd	r0, [r0]
   1524c:	eor	r1, r1, r3
   15250:	eor	r0, r0, r2
   15254:	orr	r0, r0, r1
   15258:	clz	r0, r0
   1525c:	lsr	r2, r0, #5
   15260:	mov	r0, r2
   15264:	pop	{r4, r5, fp, pc}
   15268:	push	{r4, r5, fp, lr}
   1526c:	add	fp, sp, #8
   15270:	ldr	r0, [r0]
   15274:	ldrd	r2, [r0, #160]	; 0xa0
   15278:	ldr	r0, [r1]
   1527c:	ldrd	r4, [r0, #160]	; 0xa0
   15280:	mov	r0, #0
   15284:	subs	r1, r4, r2
   15288:	sbcs	r1, r5, r3
   1528c:	movwcc	r0, #1
   15290:	subs	r1, r2, r4
   15294:	sbcs	r1, r3, r5
   15298:	subcc	r0, r0, #1
   1529c:	pop	{r4, r5, fp, pc}
   152a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   152a4:	add	fp, sp, #24
   152a8:	sub	sp, sp, #96	; 0x60
   152ac:	ldr	r7, [r0, #44]	; 0x2c
   152b0:	mov	r4, r0
   152b4:	mov	r5, #0
   152b8:	ldrb	r0, [r7, #49]	; 0x31
   152bc:	tst	r0, #2
   152c0:	beq	15370 <__assert_fail@plt+0x3fcc>
   152c4:	ldr	r6, [r7, #52]	; 0x34
   152c8:	mov	r9, r1
   152cc:	cmp	r6, #0
   152d0:	bne	15310 <__assert_fail@plt+0x3f6c>
   152d4:	movw	r0, #41420	; 0xa1cc
   152d8:	movw	r2, #21468	; 0x53dc
   152dc:	movw	r3, #21500	; 0x53fc
   152e0:	mov	r1, #0
   152e4:	mov	r8, #0
   152e8:	movt	r0, #1
   152ec:	movt	r2, #1
   152f0:	movt	r3, #1
   152f4:	str	r0, [sp]
   152f8:	mov	r0, #13
   152fc:	bl	158c0 <__assert_fail@plt+0x451c>
   15300:	mov	r6, r0
   15304:	cmp	r0, #0
   15308:	str	r0, [r7, #52]	; 0x34
   1530c:	beq	15350 <__assert_fail@plt+0x3fac>
   15310:	ldrd	r0, [r4, #64]	; 0x40
   15314:	str	r1, [sp, #12]
   15318:	str	r0, [sp, #8]
   1531c:	add	r1, sp, #8
   15320:	mov	r0, r6
   15324:	bl	155f8 <__assert_fail@plt+0x4254>
   15328:	cmp	r0, #0
   1532c:	beq	15340 <__assert_fail@plt+0x3f9c>
   15330:	ldr	r5, [r0, #8]
   15334:	mov	r0, r5
   15338:	sub	sp, fp, #24
   1533c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15340:	mov	r8, #1
   15344:	cmp	r9, #0
   15348:	bge	1535c <__assert_fail@plt+0x3fb8>
   1534c:	b	15370 <__assert_fail@plt+0x3fcc>
   15350:	mov	r6, #0
   15354:	cmp	r9, #0
   15358:	blt	15370 <__assert_fail@plt+0x3fcc>
   1535c:	add	r1, sp, #8
   15360:	mov	r0, r9
   15364:	bl	110bc <fstatfs64@plt>
   15368:	cmp	r0, #0
   1536c:	beq	1537c <__assert_fail@plt+0x3fd8>
   15370:	mov	r0, r5
   15374:	sub	sp, fp, #24
   15378:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1537c:	cmp	r8, #0
   15380:	beq	153cc <__assert_fail@plt+0x4028>
   15384:	mov	r0, #16
   15388:	bl	19ca4 <__assert_fail@plt+0x8900>
   1538c:	cmp	r0, #0
   15390:	beq	153cc <__assert_fail@plt+0x4028>
   15394:	mov	r5, r0
   15398:	ldrd	r0, [r4, #64]	; 0x40
   1539c:	ldr	r2, [sp, #8]
   153a0:	stm	r5, {r0, r1, r2}
   153a4:	mov	r0, r6
   153a8:	mov	r1, r5
   153ac:	bl	164f8 <__assert_fail@plt+0x5154>
   153b0:	cmp	r0, #0
   153b4:	beq	153c4 <__assert_fail@plt+0x4020>
   153b8:	cmp	r0, r5
   153bc:	beq	153cc <__assert_fail@plt+0x4028>
   153c0:	bl	11374 <abort@plt>
   153c4:	mov	r0, r5
   153c8:	bl	1a1cc <__assert_fail@plt+0x8e28>
   153cc:	ldr	r5, [sp, #8]
   153d0:	mov	r0, r5
   153d4:	sub	sp, fp, #24
   153d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   153dc:	push	{fp, lr}
   153e0:	mov	fp, sp
   153e4:	mov	r2, r1
   153e8:	ldrd	r0, [r0]
   153ec:	mov	r3, #0
   153f0:	bl	1a480 <__assert_fail@plt+0x90dc>
   153f4:	mov	r0, r2
   153f8:	pop	{fp, pc}
   153fc:	ldrd	r2, [r1]
   15400:	ldrd	r0, [r0]
   15404:	eor	r1, r1, r3
   15408:	eor	r0, r0, r2
   1540c:	orr	r0, r0, r1
   15410:	clz	r0, r0
   15414:	lsr	r0, r0, #5
   15418:	bx	lr
   1541c:	andeq	r0, r0, r0
   15420:	ldr	r0, [r0, #8]
   15424:	bx	lr
   15428:	ldr	r0, [r0, #12]
   1542c:	bx	lr
   15430:	ldr	r0, [r0, #16]
   15434:	bx	lr
   15438:	ldm	r0, {r2, ip}
   1543c:	mov	r0, #0
   15440:	cmp	r2, ip
   15444:	bxcs	lr
   15448:	mov	r0, #0
   1544c:	ldr	r1, [r2]
   15450:	cmp	r1, #0
   15454:	beq	15478 <__assert_fail@plt+0x40d4>
   15458:	mov	r3, #0
   1545c:	mov	r1, r2
   15460:	ldr	r1, [r1, #4]
   15464:	add	r3, r3, #1
   15468:	cmp	r1, #0
   1546c:	bne	15460 <__assert_fail@plt+0x40bc>
   15470:	cmp	r3, r0
   15474:	movhi	r0, r3
   15478:	add	r2, r2, #8
   1547c:	cmp	r2, ip
   15480:	bcc	1544c <__assert_fail@plt+0x40a8>
   15484:	bx	lr
   15488:	push	{fp, lr}
   1548c:	mov	fp, sp
   15490:	ldm	r0, {r3, ip}
   15494:	mov	lr, #0
   15498:	mov	r1, #0
   1549c:	cmp	r3, ip
   154a0:	bcs	154dc <__assert_fail@plt+0x4138>
   154a4:	mov	r1, #0
   154a8:	mov	lr, #0
   154ac:	ldr	r2, [r3]
   154b0:	cmp	r2, #0
   154b4:	beq	154d0 <__assert_fail@plt+0x412c>
   154b8:	mov	r2, r3
   154bc:	ldr	r2, [r2, #4]
   154c0:	add	r1, r1, #1
   154c4:	cmp	r2, #0
   154c8:	bne	154bc <__assert_fail@plt+0x4118>
   154cc:	add	lr, lr, #1
   154d0:	add	r3, r3, #8
   154d4:	cmp	r3, ip
   154d8:	bcc	154ac <__assert_fail@plt+0x4108>
   154dc:	ldr	r2, [r0, #12]
   154e0:	cmp	lr, r2
   154e4:	bne	154fc <__assert_fail@plt+0x4158>
   154e8:	ldr	r2, [r0, #16]
   154ec:	mov	r0, #1
   154f0:	cmp	r1, r2
   154f4:	movne	r0, #0
   154f8:	pop	{fp, pc}
   154fc:	mov	r0, #0
   15500:	pop	{fp, pc}
   15504:	nop	{0}
   15508:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1550c:	add	fp, sp, #24
   15510:	sub	sp, sp, #8
   15514:	ldr	r6, [r0]
   15518:	ldmib	r0, {r2, r7, r8}
   1551c:	ldr	r3, [r0, #16]
   15520:	mov	r4, r1
   15524:	mov	r5, #0
   15528:	cmp	r6, r2
   1552c:	bcs	1556c <__assert_fail@plt+0x41c8>
   15530:	mov	r5, #0
   15534:	ldr	r0, [r6]
   15538:	cmp	r0, #0
   1553c:	beq	15560 <__assert_fail@plt+0x41bc>
   15540:	mov	r0, #0
   15544:	mov	r1, r6
   15548:	ldr	r1, [r1, #4]
   1554c:	add	r0, r0, #1
   15550:	cmp	r1, #0
   15554:	bne	15548 <__assert_fail@plt+0x41a4>
   15558:	cmp	r0, r5
   1555c:	movhi	r5, r0
   15560:	add	r6, r6, #8
   15564:	cmp	r6, r2
   15568:	bcc	15534 <__assert_fail@plt+0x4190>
   1556c:	movw	r2, #45312	; 0xb100
   15570:	mov	r0, r4
   15574:	mov	r1, #1
   15578:	movt	r2, #1
   1557c:	bl	112a8 <__fprintf_chk@plt>
   15580:	movw	r2, #45336	; 0xb118
   15584:	mov	r0, r4
   15588:	mov	r1, #1
   1558c:	mov	r3, r7
   15590:	movt	r2, #1
   15594:	bl	112a8 <__fprintf_chk@plt>
   15598:	vldr	d16, [pc, #80]	; 155f0 <__assert_fail@plt+0x424c>
   1559c:	vmov	s0, r8
   155a0:	movw	r2, #45360	; 0xb130
   155a4:	mov	r0, r4
   155a8:	mov	r1, #1
   155ac:	mov	r3, r8
   155b0:	vcvt.f64.u32	d17, s0
   155b4:	vmov	s0, r7
   155b8:	movt	r2, #1
   155bc:	vcvt.f64.u32	d18, s0
   155c0:	vmul.f64	d16, d17, d16
   155c4:	vdiv.f64	d16, d16, d18
   155c8:	vstr	d16, [sp]
   155cc:	bl	112a8 <__fprintf_chk@plt>
   155d0:	movw	r2, #45393	; 0xb151
   155d4:	mov	r0, r4
   155d8:	mov	r1, #1
   155dc:	mov	r3, r5
   155e0:	movt	r2, #1
   155e4:	sub	sp, fp, #24
   155e8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   155ec:	b	112a8 <__fprintf_chk@plt>
   155f0:	andeq	r0, r0, r0
   155f4:	subsmi	r0, r9, r0
   155f8:	push	{r4, r5, r6, r7, fp, lr}
   155fc:	add	fp, sp, #16
   15600:	mov	r4, r1
   15604:	ldr	r1, [r0, #8]
   15608:	ldr	r2, [r0, #24]
   1560c:	mov	r5, r0
   15610:	mov	r0, r4
   15614:	blx	r2
   15618:	ldr	r1, [r5, #8]
   1561c:	cmp	r0, r1
   15620:	bcs	1568c <__assert_fail@plt+0x42e8>
   15624:	ldr	r7, [r5]
   15628:	mov	r6, #0
   1562c:	ldr	r1, [r7, r0, lsl #3]!
   15630:	cmp	r1, #0
   15634:	cmpne	r7, #0
   15638:	bne	15648 <__assert_fail@plt+0x42a4>
   1563c:	mov	r0, r6
   15640:	pop	{r4, r5, r6, r7, fp, pc}
   15644:	ldr	r1, [r7]
   15648:	cmp	r1, r4
   1564c:	beq	15674 <__assert_fail@plt+0x42d0>
   15650:	ldr	r2, [r5, #28]
   15654:	mov	r0, r4
   15658:	blx	r2
   1565c:	cmp	r0, #0
   15660:	bne	15680 <__assert_fail@plt+0x42dc>
   15664:	ldr	r7, [r7, #4]
   15668:	cmp	r7, #0
   1566c:	bne	15644 <__assert_fail@plt+0x42a0>
   15670:	b	1563c <__assert_fail@plt+0x4298>
   15674:	mov	r6, r4
   15678:	mov	r0, r6
   1567c:	pop	{r4, r5, r6, r7, fp, pc}
   15680:	ldr	r6, [r7]
   15684:	mov	r0, r6
   15688:	pop	{r4, r5, r6, r7, fp, pc}
   1568c:	bl	11374 <abort@plt>
   15690:	ldr	r1, [r0, #16]
   15694:	cmp	r1, #0
   15698:	moveq	r0, #0
   1569c:	bxeq	lr
   156a0:	ldm	r0, {r1, r2}
   156a4:	cmp	r1, r2
   156a8:	bcs	156c0 <__assert_fail@plt+0x431c>
   156ac:	ldr	r0, [r1], #8
   156b0:	cmp	r0, #0
   156b4:	bxne	lr
   156b8:	cmp	r1, r2
   156bc:	bcc	156ac <__assert_fail@plt+0x4308>
   156c0:	push	{fp, lr}
   156c4:	mov	fp, sp
   156c8:	bl	11374 <abort@plt>
   156cc:	push	{r4, r5, fp, lr}
   156d0:	add	fp, sp, #8
   156d4:	mov	r5, r1
   156d8:	ldr	r1, [r0, #8]
   156dc:	ldr	r2, [r0, #24]
   156e0:	mov	r4, r0
   156e4:	mov	r0, r5
   156e8:	blx	r2
   156ec:	ldr	r1, [r4, #8]
   156f0:	cmp	r0, r1
   156f4:	bcs	15750 <__assert_fail@plt+0x43ac>
   156f8:	ldr	r1, [r4]
   156fc:	add	r2, r1, r0, lsl #3
   15700:	ldr	r3, [r2]
   15704:	ldr	r2, [r2, #4]
   15708:	cmp	r3, r5
   1570c:	beq	1571c <__assert_fail@plt+0x4378>
   15710:	cmp	r2, #0
   15714:	bne	15700 <__assert_fail@plt+0x435c>
   15718:	b	15728 <__assert_fail@plt+0x4384>
   1571c:	cmp	r2, #0
   15720:	ldrne	r0, [r2]
   15724:	popne	{r4, r5, fp, pc}
   15728:	ldr	r2, [r4, #4]
   1572c:	add	r0, r1, r0, lsl #3
   15730:	add	r1, r0, #8
   15734:	cmp	r1, r2
   15738:	movcs	r0, #0
   1573c:	popcs	{r4, r5, fp, pc}
   15740:	ldr	r0, [r1], #8
   15744:	cmp	r0, #0
   15748:	popne	{r4, r5, fp, pc}
   1574c:	b	15734 <__assert_fail@plt+0x4390>
   15750:	bl	11374 <abort@plt>
   15754:	push	{r4, r5, fp, lr}
   15758:	add	fp, sp, #8
   1575c:	ldm	r0, {r5, lr}
   15760:	mov	ip, r0
   15764:	mov	r0, #0
   15768:	cmp	r5, lr
   1576c:	bcs	157c8 <__assert_fail@plt+0x4424>
   15770:	mov	r0, #0
   15774:	ldr	r3, [r5]
   15778:	cmp	r3, #0
   1577c:	cmpne	r5, #0
   15780:	bne	15794 <__assert_fail@plt+0x43f0>
   15784:	add	r5, r5, #8
   15788:	cmp	r5, lr
   1578c:	bcc	15774 <__assert_fail@plt+0x43d0>
   15790:	b	157c8 <__assert_fail@plt+0x4424>
   15794:	mov	r3, r5
   15798:	cmp	r0, r2
   1579c:	popcs	{r4, r5, fp, pc}
   157a0:	ldr	r4, [r3]
   157a4:	str	r4, [r1, r0, lsl #2]
   157a8:	add	r0, r0, #1
   157ac:	ldr	r3, [r3, #4]
   157b0:	cmp	r3, #0
   157b4:	bne	15798 <__assert_fail@plt+0x43f4>
   157b8:	ldr	lr, [ip, #4]
   157bc:	add	r5, r5, #8
   157c0:	cmp	r5, lr
   157c4:	bcc	15774 <__assert_fail@plt+0x43d0>
   157c8:	pop	{r4, r5, fp, pc}
   157cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   157d0:	add	fp, sp, #24
   157d4:	mov	r5, r1
   157d8:	ldr	r4, [r0]
   157dc:	ldr	r1, [r0, #4]
   157e0:	mov	r6, #0
   157e4:	cmp	r4, r1
   157e8:	bcs	15864 <__assert_fail@plt+0x44c0>
   157ec:	mov	r9, r2
   157f0:	mov	r8, r0
   157f4:	mov	r6, #0
   157f8:	ldr	r0, [r4]
   157fc:	cmp	r0, #0
   15800:	cmpne	r4, #0
   15804:	bne	15818 <__assert_fail@plt+0x4474>
   15808:	add	r4, r4, #8
   1580c:	cmp	r4, r1
   15810:	bcc	157f8 <__assert_fail@plt+0x4454>
   15814:	b	15864 <__assert_fail@plt+0x44c0>
   15818:	mov	r1, r9
   1581c:	blx	r5
   15820:	cmp	r0, #0
   15824:	beq	15864 <__assert_fail@plt+0x44c0>
   15828:	mov	r7, r4
   1582c:	ldr	r7, [r7, #4]
   15830:	add	r6, r6, #1
   15834:	cmp	r7, #0
   15838:	beq	15854 <__assert_fail@plt+0x44b0>
   1583c:	ldr	r0, [r7]
   15840:	mov	r1, r9
   15844:	blx	r5
   15848:	cmp	r0, #0
   1584c:	bne	1582c <__assert_fail@plt+0x4488>
   15850:	b	15864 <__assert_fail@plt+0x44c0>
   15854:	ldr	r1, [r8, #4]
   15858:	add	r4, r4, #8
   1585c:	cmp	r4, r1
   15860:	bcc	157f8 <__assert_fail@plt+0x4454>
   15864:	mov	r0, r6
   15868:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1586c:	ldrb	r2, [r0]
   15870:	cmp	r2, #0
   15874:	moveq	r0, #0
   15878:	bxeq	lr
   1587c:	add	r3, r0, #1
   15880:	mov	r0, #0
   15884:	rsb	r0, r0, r0, lsl #5
   15888:	uxtab	r0, r0, r2
   1588c:	udiv	r2, r0, r1
   15890:	mls	r0, r2, r1, r0
   15894:	ldrb	r2, [r3], #1
   15898:	cmp	r2, #0
   1589c:	bne	15884 <__assert_fail@plt+0x44e0>
   158a0:	bx	lr
   158a4:	movw	r1, #45424	; 0xb170
   158a8:	movt	r1, #1
   158ac:	vld1.32	{d16-d17}, [r1]!
   158b0:	ldr	r1, [r1]
   158b4:	vst1.32	{d16-d17}, [r0]!
   158b8:	str	r1, [r0]
   158bc:	bx	lr
   158c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   158c4:	add	fp, sp, #24
   158c8:	movw	r9, #23308	; 0x5b0c
   158cc:	movw	r5, #23288	; 0x5af8
   158d0:	cmp	r3, #0
   158d4:	mov	r6, r0
   158d8:	mov	r0, #40	; 0x28
   158dc:	mov	r7, r1
   158e0:	movt	r9, #1
   158e4:	movt	r5, #1
   158e8:	movne	r9, r3
   158ec:	cmp	r2, #0
   158f0:	movne	r5, r2
   158f4:	bl	19ca4 <__assert_fail@plt+0x8900>
   158f8:	mov	r8, #0
   158fc:	cmp	r0, #0
   15900:	beq	15ae0 <__assert_fail@plt+0x473c>
   15904:	mov	r4, r0
   15908:	cmp	r7, #0
   1590c:	beq	159bc <__assert_fail@plt+0x4618>
   15910:	movw	r0, #45424	; 0xb170
   15914:	str	r7, [r4, #20]
   15918:	movt	r0, #1
   1591c:	cmp	r7, r0
   15920:	beq	159c8 <__assert_fail@plt+0x4624>
   15924:	vldr	s2, [pc, #444]	; 15ae8 <__assert_fail@plt+0x4744>
   15928:	vldr	s0, [r7, #8]
   1592c:	vcmpe.f32	s0, s2
   15930:	vmrs	APSR_nzcv, fpscr
   15934:	ble	159a0 <__assert_fail@plt+0x45fc>
   15938:	vldr	s4, [pc, #428]	; 15aec <__assert_fail@plt+0x4748>
   1593c:	vcmpe.f32	s0, s4
   15940:	vmrs	APSR_nzcv, fpscr
   15944:	bpl	159a0 <__assert_fail@plt+0x45fc>
   15948:	vldr	s4, [pc, #416]	; 15af0 <__assert_fail@plt+0x474c>
   1594c:	vldr	s6, [r7, #12]
   15950:	vcmpe.f32	s6, s4
   15954:	vmrs	APSR_nzcv, fpscr
   15958:	ble	159a0 <__assert_fail@plt+0x45fc>
   1595c:	vldr	s4, [r7]
   15960:	vcmpe.f32	s4, #0.0
   15964:	vmrs	APSR_nzcv, fpscr
   15968:	blt	159a0 <__assert_fail@plt+0x45fc>
   1596c:	vadd.f32	s2, s4, s2
   15970:	vcmpe.f32	s2, s0
   15974:	vmrs	APSR_nzcv, fpscr
   15978:	bpl	159a0 <__assert_fail@plt+0x45fc>
   1597c:	vldr	s0, [r7, #4]
   15980:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15984:	vcmpe.f32	s0, s4
   15988:	vmrs	APSR_nzcv, fpscr
   1598c:	bhi	159a0 <__assert_fail@plt+0x45fc>
   15990:	vcmpe.f32	s2, s0
   15994:	mov	r0, r7
   15998:	vmrs	APSR_nzcv, fpscr
   1599c:	bmi	159c8 <__assert_fail@plt+0x4624>
   159a0:	movw	r0, #45424	; 0xb170
   159a4:	movt	r0, #1
   159a8:	str	r0, [r4, #20]
   159ac:	mov	r0, r4
   159b0:	bl	1a1cc <__assert_fail@plt+0x8e28>
   159b4:	mov	r0, r8
   159b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   159bc:	movw	r0, #45424	; 0xb170
   159c0:	movt	r0, #1
   159c4:	str	r0, [r4, #20]
   159c8:	ldrb	r1, [r0, #16]
   159cc:	cmp	r1, #0
   159d0:	bne	159fc <__assert_fail@plt+0x4658>
   159d4:	vldr	s0, [r0, #8]
   159d8:	vldr	s4, [pc, #276]	; 15af4 <__assert_fail@plt+0x4750>
   159dc:	vmov	s2, r6
   159e0:	vcvt.f32.u32	s2, s2
   159e4:	vdiv.f32	s2, s2, s0
   159e8:	vcmpe.f32	s2, s4
   159ec:	vcvt.u32.f32	s0, s2
   159f0:	vmrs	APSR_nzcv, fpscr
   159f4:	bge	15a7c <__assert_fail@plt+0x46d8>
   159f8:	vmov	r6, s0
   159fc:	cmp	r6, #10
   15a00:	movls	r6, #10
   15a04:	orr	r0, r6, #1
   15a08:	cmn	r0, #1
   15a0c:	beq	15a7c <__assert_fail@plt+0x46d8>
   15a10:	ldr	r6, [fp, #8]
   15a14:	mov	r1, #3
   15a18:	cmp	r0, #10
   15a1c:	bcc	15a54 <__assert_fail@plt+0x46b0>
   15a20:	mov	r1, #3
   15a24:	mov	r3, #9
   15a28:	mov	r2, #12
   15a2c:	udiv	r7, r0, r1
   15a30:	mls	r7, r7, r1, r0
   15a34:	cmp	r7, #0
   15a38:	beq	15a54 <__assert_fail@plt+0x46b0>
   15a3c:	add	r3, r3, r2
   15a40:	add	r2, r2, #8
   15a44:	add	r1, r1, #2
   15a48:	add	r3, r3, #4
   15a4c:	cmp	r3, r0
   15a50:	bcc	15a2c <__assert_fail@plt+0x4688>
   15a54:	udiv	r2, r0, r1
   15a58:	mls	r1, r2, r1, r0
   15a5c:	cmp	r1, #0
   15a60:	bne	15a74 <__assert_fail@plt+0x46d0>
   15a64:	add	r0, r0, #2
   15a68:	cmn	r0, #1
   15a6c:	bne	15a14 <__assert_fail@plt+0x4670>
   15a70:	b	15a7c <__assert_fail@plt+0x46d8>
   15a74:	cmp	r0, #536870912	; 0x20000000
   15a78:	bcc	15a94 <__assert_fail@plt+0x46f0>
   15a7c:	mov	r0, #0
   15a80:	str	r0, [r4, #8]
   15a84:	mov	r0, r4
   15a88:	bl	1a1cc <__assert_fail@plt+0x8e28>
   15a8c:	mov	r0, r8
   15a90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15a94:	cmp	r0, #0
   15a98:	str	r0, [r4, #8]
   15a9c:	beq	15a84 <__assert_fail@plt+0x46e0>
   15aa0:	mov	r1, #8
   15aa4:	bl	19c50 <__assert_fail@plt+0x88ac>
   15aa8:	cmp	r0, #0
   15aac:	str	r0, [r4]
   15ab0:	beq	15a84 <__assert_fail@plt+0x46e0>
   15ab4:	mov	r1, #0
   15ab8:	mov	r8, r4
   15abc:	str	r1, [r4, #12]
   15ac0:	str	r1, [r4, #16]
   15ac4:	str	r5, [r4, #24]
   15ac8:	str	r9, [r4, #28]
   15acc:	str	r6, [r4, #32]
   15ad0:	str	r1, [r4, #36]	; 0x24
   15ad4:	ldr	r1, [r4, #8]
   15ad8:	add	r0, r0, r1, lsl #3
   15adc:	str	r0, [r4, #4]
   15ae0:	mov	r0, r8
   15ae4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15ae8:	stclcc	12, cr12, [ip, #820]	; 0x334
   15aec:	svccc	0x00666666
   15af0:	svccc	0x008ccccd
   15af4:	svcmi	0x00800000
   15af8:	ror	r2, r0, #3
   15afc:	udiv	r2, r2, r1
   15b00:	mul	r1, r2, r1
   15b04:	rsb	r0, r1, r0, ror #3
   15b08:	bx	lr
   15b0c:	sub	r0, r0, r1
   15b10:	clz	r0, r0
   15b14:	lsr	r0, r0, #5
   15b18:	bx	lr
   15b1c:	push	{r4, r5, r6, r7, fp, lr}
   15b20:	add	fp, sp, #16
   15b24:	mov	r4, r0
   15b28:	ldr	r5, [r0]
   15b2c:	ldr	r0, [r0, #4]
   15b30:	cmp	r5, r0
   15b34:	bcs	15bcc <__assert_fail@plt+0x4828>
   15b38:	mov	r6, #0
   15b3c:	ldr	r1, [r5]
   15b40:	cmp	r1, #0
   15b44:	beq	15bc0 <__assert_fail@plt+0x481c>
   15b48:	ldr	r1, [r4, #32]
   15b4c:	ldr	r7, [r5, #4]
   15b50:	cmp	r1, #0
   15b54:	mov	r0, r1
   15b58:	movwne	r0, #1
   15b5c:	cmp	r7, #0
   15b60:	beq	15ba4 <__assert_fail@plt+0x4800>
   15b64:	tst	r0, #1
   15b68:	beq	15b78 <__assert_fail@plt+0x47d4>
   15b6c:	ldr	r0, [r7]
   15b70:	blx	r1
   15b74:	ldr	r1, [r4, #32]
   15b78:	str	r6, [r7]
   15b7c:	cmp	r1, #0
   15b80:	ldr	r0, [r4, #36]	; 0x24
   15b84:	ldr	r2, [r7, #4]
   15b88:	str	r0, [r7, #4]
   15b8c:	mov	r0, r1
   15b90:	str	r7, [r4, #36]	; 0x24
   15b94:	mov	r7, r2
   15b98:	movwne	r0, #1
   15b9c:	cmp	r2, #0
   15ba0:	bne	15b64 <__assert_fail@plt+0x47c0>
   15ba4:	cmp	r0, #0
   15ba8:	beq	15bb4 <__assert_fail@plt+0x4810>
   15bac:	ldr	r0, [r5]
   15bb0:	blx	r1
   15bb4:	str	r6, [r5]
   15bb8:	str	r6, [r5, #4]
   15bbc:	ldr	r0, [r4, #4]
   15bc0:	add	r5, r5, #8
   15bc4:	cmp	r5, r0
   15bc8:	bcc	15b3c <__assert_fail@plt+0x4798>
   15bcc:	mov	r0, #0
   15bd0:	str	r0, [r4, #12]
   15bd4:	str	r0, [r4, #16]
   15bd8:	pop	{r4, r5, r6, r7, fp, pc}
   15bdc:	push	{r4, r5, r6, sl, fp, lr}
   15be0:	add	fp, sp, #16
   15be4:	mov	r4, r0
   15be8:	ldr	r0, [r0, #32]
   15bec:	cmp	r0, #0
   15bf0:	ldrne	r0, [r4, #16]
   15bf4:	cmpne	r0, #0
   15bf8:	beq	15c60 <__assert_fail@plt+0x48bc>
   15bfc:	ldr	r5, [r4]
   15c00:	ldr	r1, [r4, #4]
   15c04:	cmp	r5, r1
   15c08:	bcc	15c1c <__assert_fail@plt+0x4878>
   15c0c:	b	15c60 <__assert_fail@plt+0x48bc>
   15c10:	add	r5, r5, #8
   15c14:	cmp	r5, r1
   15c18:	bcs	15c60 <__assert_fail@plt+0x48bc>
   15c1c:	ldr	r0, [r5]
   15c20:	cmp	r0, #0
   15c24:	cmpne	r5, #0
   15c28:	beq	15c10 <__assert_fail@plt+0x486c>
   15c2c:	ldr	r1, [r4, #32]
   15c30:	blx	r1
   15c34:	ldr	r6, [r5, #4]
   15c38:	cmp	r6, #0
   15c3c:	beq	15c58 <__assert_fail@plt+0x48b4>
   15c40:	ldr	r1, [r4, #32]
   15c44:	ldr	r0, [r6]
   15c48:	blx	r1
   15c4c:	ldr	r6, [r6, #4]
   15c50:	cmp	r6, #0
   15c54:	bne	15c40 <__assert_fail@plt+0x489c>
   15c58:	ldr	r1, [r4, #4]
   15c5c:	b	15c10 <__assert_fail@plt+0x486c>
   15c60:	ldr	r5, [r4]
   15c64:	ldr	r1, [r4, #4]
   15c68:	cmp	r5, r1
   15c6c:	bcc	15c80 <__assert_fail@plt+0x48dc>
   15c70:	b	15ca8 <__assert_fail@plt+0x4904>
   15c74:	add	r5, r5, #8
   15c78:	cmp	r5, r1
   15c7c:	bcs	15ca8 <__assert_fail@plt+0x4904>
   15c80:	ldr	r0, [r5, #4]
   15c84:	cmp	r0, #0
   15c88:	beq	15c74 <__assert_fail@plt+0x48d0>
   15c8c:	ldr	r6, [r0, #4]
   15c90:	bl	1a1cc <__assert_fail@plt+0x8e28>
   15c94:	cmp	r6, #0
   15c98:	mov	r0, r6
   15c9c:	bne	15c8c <__assert_fail@plt+0x48e8>
   15ca0:	ldr	r1, [r4, #4]
   15ca4:	b	15c74 <__assert_fail@plt+0x48d0>
   15ca8:	ldr	r0, [r4, #36]	; 0x24
   15cac:	cmp	r0, #0
   15cb0:	beq	15cc8 <__assert_fail@plt+0x4924>
   15cb4:	ldr	r5, [r0, #4]
   15cb8:	bl	1a1cc <__assert_fail@plt+0x8e28>
   15cbc:	cmp	r5, #0
   15cc0:	mov	r0, r5
   15cc4:	bne	15cb4 <__assert_fail@plt+0x4910>
   15cc8:	ldr	r0, [r4]
   15ccc:	bl	1a1cc <__assert_fail@plt+0x8e28>
   15cd0:	mov	r0, r4
   15cd4:	pop	{r4, r5, r6, sl, fp, lr}
   15cd8:	b	1a1cc <__assert_fail@plt+0x8e28>
   15cdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ce0:	add	fp, sp, #28
   15ce4:	sub	sp, sp, #44	; 0x2c
   15ce8:	mov	r7, r0
   15cec:	mov	r4, r0
   15cf0:	ldr	r0, [r7, #20]!
   15cf4:	ldrb	r2, [r0, #16]
   15cf8:	cmp	r2, #0
   15cfc:	bne	15d2c <__assert_fail@plt+0x4988>
   15d00:	vldr	s0, [r0, #8]
   15d04:	vldr	s4, [pc, #576]	; 15f4c <__assert_fail@plt+0x4ba8>
   15d08:	vmov	s2, r1
   15d0c:	mov	r5, #0
   15d10:	vcvt.f32.u32	s2, s2
   15d14:	vdiv.f32	s2, s2, s0
   15d18:	vcmpe.f32	s2, s4
   15d1c:	vcvt.u32.f32	s0, s2
   15d20:	vmrs	APSR_nzcv, fpscr
   15d24:	bge	15e50 <__assert_fail@plt+0x4aac>
   15d28:	vmov	r1, s0
   15d2c:	cmp	r1, #10
   15d30:	mov	r5, #0
   15d34:	movls	r1, #10
   15d38:	orr	r6, r1, #1
   15d3c:	cmn	r6, #1
   15d40:	bne	15d54 <__assert_fail@plt+0x49b0>
   15d44:	b	15e50 <__assert_fail@plt+0x4aac>
   15d48:	add	r6, r6, #2
   15d4c:	cmn	r6, #1
   15d50:	beq	15e50 <__assert_fail@plt+0x4aac>
   15d54:	mov	r0, #3
   15d58:	cmp	r6, #10
   15d5c:	bcc	15d94 <__assert_fail@plt+0x49f0>
   15d60:	mov	r0, #3
   15d64:	mov	r2, #9
   15d68:	mov	r1, #12
   15d6c:	udiv	r3, r6, r0
   15d70:	mls	r3, r3, r0, r6
   15d74:	cmp	r3, #0
   15d78:	beq	15d94 <__assert_fail@plt+0x49f0>
   15d7c:	add	r2, r2, r1
   15d80:	add	r1, r1, #8
   15d84:	add	r0, r0, #2
   15d88:	add	r2, r2, #4
   15d8c:	cmp	r2, r6
   15d90:	bcc	15d6c <__assert_fail@plt+0x49c8>
   15d94:	udiv	r1, r6, r0
   15d98:	mls	r0, r1, r0, r6
   15d9c:	cmp	r0, #0
   15da0:	beq	15d48 <__assert_fail@plt+0x49a4>
   15da4:	sub	r0, r6, #1
   15da8:	cmn	r0, #-536870910	; 0xe0000002
   15dac:	bhi	15e50 <__assert_fail@plt+0x4aac>
   15db0:	ldr	r0, [r4, #8]
   15db4:	cmp	r6, r0
   15db8:	bne	15dcc <__assert_fail@plt+0x4a28>
   15dbc:	mov	r5, #1
   15dc0:	mov	r0, r5
   15dc4:	sub	sp, fp, #28
   15dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dcc:	mov	r0, r6
   15dd0:	mov	r1, #8
   15dd4:	bl	19c50 <__assert_fail@plt+0x88ac>
   15dd8:	cmp	r0, #0
   15ddc:	str	r0, [sp, #4]
   15de0:	beq	15e50 <__assert_fail@plt+0x4aac>
   15de4:	mov	r1, #0
   15de8:	add	r0, r0, r6, lsl #3
   15dec:	str	r6, [sp, #12]
   15df0:	add	r5, sp, #4
   15df4:	mov	sl, r4
   15df8:	mov	r2, #0
   15dfc:	str	r1, [sp, #16]
   15e00:	str	r1, [sp, #20]
   15e04:	str	r0, [sp, #8]
   15e08:	add	r0, r5, #20
   15e0c:	mov	r1, r4
   15e10:	vld1.32	{d16-d17}, [r7]
   15e14:	vst1.32	{d16-d17}, [r0]
   15e18:	ldr	r0, [sl, #36]!	; 0x24
   15e1c:	str	r0, [sp, #40]	; 0x28
   15e20:	mov	r0, r5
   15e24:	bl	15f50 <__assert_fail@plt+0x4bac>
   15e28:	cmp	r0, #0
   15e2c:	beq	15e5c <__assert_fail@plt+0x4ab8>
   15e30:	ldr	r0, [r4]
   15e34:	bl	1a1cc <__assert_fail@plt+0x8e28>
   15e38:	mov	r0, #36	; 0x24
   15e3c:	vld1.32	{d16-d17}, [r5], r0
   15e40:	vst1.32	{d16-d17}, [r4], r0
   15e44:	ldr	r0, [r5]
   15e48:	mov	r5, #1
   15e4c:	str	r0, [r4]
   15e50:	mov	r0, r5
   15e54:	sub	sp, fp, #28
   15e58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e5c:	ldr	r0, [sp, #40]	; 0x28
   15e60:	str	r0, [sl]
   15e64:	ldr	r0, [sp, #8]
   15e68:	ldr	r8, [sp, #4]
   15e6c:	cmp	r8, r0
   15e70:	str	r0, [sp]
   15e74:	bcs	15f18 <__assert_fail@plt+0x4b74>
   15e78:	mov	r9, #0
   15e7c:	ldr	r0, [r8]
   15e80:	cmp	r0, #0
   15e84:	beq	15f08 <__assert_fail@plt+0x4b64>
   15e88:	ldr	r6, [r8, #4]
   15e8c:	cmp	r6, #0
   15e90:	beq	15f04 <__assert_fail@plt+0x4b60>
   15e94:	ldr	r1, [r4, #8]
   15e98:	ldr	r5, [r6]
   15e9c:	ldr	r2, [r4, #24]
   15ea0:	mov	r0, r5
   15ea4:	blx	r2
   15ea8:	ldr	r1, [r4, #8]
   15eac:	cmp	r0, r1
   15eb0:	bcs	15f48 <__assert_fail@plt+0x4ba4>
   15eb4:	ldr	r3, [r4]
   15eb8:	ldr	r2, [r6, #4]
   15ebc:	ldr	r7, [r3, r0, lsl #3]
   15ec0:	cmp	r7, #0
   15ec4:	beq	15ed4 <__assert_fail@plt+0x4b30>
   15ec8:	add	r0, r3, r0, lsl #3
   15ecc:	add	r0, r0, #4
   15ed0:	b	15eec <__assert_fail@plt+0x4b48>
   15ed4:	str	r5, [r3, r0, lsl #3]
   15ed8:	ldr	r0, [r4, #12]
   15edc:	add	r0, r0, #1
   15ee0:	str	r0, [r4, #12]
   15ee4:	mov	r0, sl
   15ee8:	str	r9, [r6]
   15eec:	ldr	r3, [r0]
   15ef0:	cmp	r2, #0
   15ef4:	str	r3, [r6, #4]
   15ef8:	str	r6, [r0]
   15efc:	mov	r6, r2
   15f00:	bne	15e98 <__assert_fail@plt+0x4af4>
   15f04:	str	r9, [r8, #4]
   15f08:	ldr	r0, [sp]
   15f0c:	add	r8, r8, #8
   15f10:	cmp	r8, r0
   15f14:	bcc	15e7c <__assert_fail@plt+0x4ad8>
   15f18:	add	r1, sp, #4
   15f1c:	mov	r0, r4
   15f20:	mov	r2, #0
   15f24:	mov	r5, #0
   15f28:	bl	15f50 <__assert_fail@plt+0x4bac>
   15f2c:	cmp	r0, #0
   15f30:	beq	15f48 <__assert_fail@plt+0x4ba4>
   15f34:	ldr	r0, [sp, #4]
   15f38:	bl	1a1cc <__assert_fail@plt+0x8e28>
   15f3c:	mov	r0, r5
   15f40:	sub	sp, fp, #28
   15f44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f48:	bl	11374 <abort@plt>
   15f4c:	svcmi	0x00800000
   15f50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f54:	add	fp, sp, #28
   15f58:	sub	sp, sp, #4
   15f5c:	ldr	r8, [r1]
   15f60:	ldr	r3, [r1, #4]
   15f64:	mov	r6, r0
   15f68:	mov	r0, #1
   15f6c:	str	r1, [sp]
   15f70:	cmp	r8, r3
   15f74:	bcs	16174 <__assert_fail@plt+0x4dd0>
   15f78:	add	r9, r6, #36	; 0x24
   15f7c:	cmp	r2, #0
   15f80:	beq	1602c <__assert_fail@plt+0x4c88>
   15f84:	mov	sl, #0
   15f88:	ldr	r1, [r8]
   15f8c:	cmp	r1, #0
   15f90:	beq	1601c <__assert_fail@plt+0x4c78>
   15f94:	ldr	r7, [r8, #4]
   15f98:	cmp	r7, #0
   15f9c:	beq	16018 <__assert_fail@plt+0x4c74>
   15fa0:	ldr	r1, [r6, #8]
   15fa4:	ldr	r4, [r7]
   15fa8:	ldr	r2, [r6, #24]
   15fac:	mov	r0, r4
   15fb0:	blx	r2
   15fb4:	ldr	r1, [r6, #8]
   15fb8:	cmp	r0, r1
   15fbc:	bcs	16188 <__assert_fail@plt+0x4de4>
   15fc0:	ldr	r3, [r6]
   15fc4:	ldr	r2, [r7, #4]
   15fc8:	ldr	r5, [r3, r0, lsl #3]
   15fcc:	cmp	r5, #0
   15fd0:	beq	15fe0 <__assert_fail@plt+0x4c3c>
   15fd4:	add	r0, r3, r0, lsl #3
   15fd8:	add	r0, r0, #4
   15fdc:	b	15ff8 <__assert_fail@plt+0x4c54>
   15fe0:	str	r4, [r3, r0, lsl #3]
   15fe4:	ldr	r0, [r6, #12]
   15fe8:	add	r0, r0, #1
   15fec:	str	r0, [r6, #12]
   15ff0:	mov	r0, r9
   15ff4:	str	sl, [r7]
   15ff8:	ldr	r3, [r0]
   15ffc:	cmp	r2, #0
   16000:	str	r3, [r7, #4]
   16004:	str	r7, [r0]
   16008:	mov	r7, r2
   1600c:	bne	15fa4 <__assert_fail@plt+0x4c00>
   16010:	ldr	r0, [sp]
   16014:	ldr	r3, [r0, #4]
   16018:	str	sl, [r8, #4]
   1601c:	add	r8, r8, #8
   16020:	cmp	r8, r3
   16024:	bcc	15f88 <__assert_fail@plt+0x4be4>
   16028:	b	16170 <__assert_fail@plt+0x4dcc>
   1602c:	mov	r5, #0
   16030:	ldr	sl, [r8]
   16034:	cmp	sl, #0
   16038:	beq	16164 <__assert_fail@plt+0x4dc0>
   1603c:	ldr	r7, [r8, #4]
   16040:	ldr	r1, [r6, #8]
   16044:	cmp	r7, #0
   16048:	beq	160c4 <__assert_fail@plt+0x4d20>
   1604c:	mov	sl, #0
   16050:	ldr	r4, [r7]
   16054:	ldr	r2, [r6, #24]
   16058:	mov	r0, r4
   1605c:	blx	r2
   16060:	ldr	r1, [r6, #8]
   16064:	cmp	r0, r1
   16068:	bcs	16188 <__assert_fail@plt+0x4de4>
   1606c:	ldr	r3, [r6]
   16070:	ldr	r2, [r7, #4]
   16074:	ldr	r5, [r3, r0, lsl #3]
   16078:	cmp	r5, #0
   1607c:	beq	1608c <__assert_fail@plt+0x4ce8>
   16080:	add	r0, r3, r0, lsl #3
   16084:	add	r0, r0, #4
   16088:	b	160a4 <__assert_fail@plt+0x4d00>
   1608c:	str	r4, [r3, r0, lsl #3]
   16090:	ldr	r0, [r6, #12]
   16094:	add	r0, r0, #1
   16098:	str	r0, [r6, #12]
   1609c:	mov	r0, r9
   160a0:	str	sl, [r7]
   160a4:	ldr	r3, [r0]
   160a8:	cmp	r2, #0
   160ac:	str	r3, [r7, #4]
   160b0:	str	r7, [r0]
   160b4:	mov	r7, r2
   160b8:	bne	16050 <__assert_fail@plt+0x4cac>
   160bc:	ldr	sl, [r8]
   160c0:	mov	r5, #0
   160c4:	str	r5, [r8, #4]
   160c8:	mov	r0, sl
   160cc:	ldr	r2, [r6, #24]
   160d0:	blx	r2
   160d4:	mov	r4, r0
   160d8:	ldr	r0, [r6, #8]
   160dc:	cmp	r4, r0
   160e0:	bcs	16188 <__assert_fail@plt+0x4de4>
   160e4:	ldr	r7, [r6]
   160e8:	ldr	r0, [r7, r4, lsl #3]
   160ec:	cmp	r0, #0
   160f0:	beq	16110 <__assert_fail@plt+0x4d6c>
   160f4:	ldr	r0, [r9]
   160f8:	cmp	r0, #0
   160fc:	beq	16124 <__assert_fail@plt+0x4d80>
   16100:	mov	r1, r0
   16104:	ldr	r2, [r1, #4]!
   16108:	str	r2, [r9]
   1610c:	b	16138 <__assert_fail@plt+0x4d94>
   16110:	str	sl, [r7, r4, lsl #3]
   16114:	ldr	r0, [r6, #12]
   16118:	add	r0, r0, #1
   1611c:	str	r0, [r6, #12]
   16120:	b	1614c <__assert_fail@plt+0x4da8>
   16124:	mov	r0, #8
   16128:	bl	19ca4 <__assert_fail@plt+0x8900>
   1612c:	cmp	r0, #0
   16130:	beq	1617c <__assert_fail@plt+0x4dd8>
   16134:	add	r1, r0, #4
   16138:	str	sl, [r0]
   1613c:	add	r2, r7, r4, lsl #3
   16140:	ldr	r3, [r2, #4]
   16144:	str	r3, [r1]
   16148:	str	r0, [r2, #4]
   1614c:	ldr	r0, [sp]
   16150:	str	r5, [r8]
   16154:	ldr	r1, [r0, #12]
   16158:	ldr	r3, [r0, #4]
   1615c:	sub	r1, r1, #1
   16160:	str	r1, [r0, #12]
   16164:	add	r8, r8, #8
   16168:	cmp	r8, r3
   1616c:	bcc	16030 <__assert_fail@plt+0x4c8c>
   16170:	mov	r0, #1
   16174:	sub	sp, fp, #28
   16178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1617c:	mov	r0, #0
   16180:	sub	sp, fp, #28
   16184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16188:	bl	11374 <abort@plt>
   1618c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16190:	add	fp, sp, #28
   16194:	sub	sp, sp, #4
   16198:	cmp	r1, #0
   1619c:	beq	164e0 <__assert_fail@plt+0x513c>
   161a0:	mov	r8, r2
   161a4:	mov	sl, r1
   161a8:	ldr	r1, [r0, #8]
   161ac:	ldr	r2, [r0, #24]
   161b0:	mov	r4, r0
   161b4:	mov	r0, sl
   161b8:	blx	r2
   161bc:	mov	r7, r0
   161c0:	ldr	r0, [r4, #8]
   161c4:	cmp	r7, r0
   161c8:	bcs	164e0 <__assert_fail@plt+0x513c>
   161cc:	ldr	r5, [r4]
   161d0:	mov	r9, r5
   161d4:	ldr	r1, [r9, r7, lsl #3]!
   161d8:	cmp	r1, #0
   161dc:	beq	16270 <__assert_fail@plt+0x4ecc>
   161e0:	cmp	r1, sl
   161e4:	beq	16210 <__assert_fail@plt+0x4e6c>
   161e8:	ldr	r2, [r4, #28]
   161ec:	mov	r0, sl
   161f0:	blx	r2
   161f4:	cmp	r0, #0
   161f8:	mov	r6, r9
   161fc:	beq	1622c <__assert_fail@plt+0x4e88>
   16200:	ldr	r0, [r6]
   16204:	cmp	r0, #0
   16208:	bne	16214 <__assert_fail@plt+0x4e70>
   1620c:	b	16270 <__assert_fail@plt+0x4ecc>
   16210:	mov	r0, sl
   16214:	cmp	r8, #0
   16218:	mov	r7, #0
   1621c:	strne	r0, [r8]
   16220:	mov	r0, r7
   16224:	sub	sp, fp, #28
   16228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1622c:	add	r6, r5, r7, lsl #3
   16230:	ldr	r0, [r6, #4]!
   16234:	cmp	r0, #0
   16238:	beq	16270 <__assert_fail@plt+0x4ecc>
   1623c:	ldr	r1, [r0]
   16240:	cmp	r1, sl
   16244:	beq	16264 <__assert_fail@plt+0x4ec0>
   16248:	ldr	r2, [r4, #28]
   1624c:	mov	r0, sl
   16250:	blx	r2
   16254:	ldr	r6, [r6]
   16258:	cmp	r0, #0
   1625c:	beq	16230 <__assert_fail@plt+0x4e8c>
   16260:	b	16200 <__assert_fail@plt+0x4e5c>
   16264:	mov	r0, sl
   16268:	cmp	r0, #0
   1626c:	bne	16214 <__assert_fail@plt+0x4e70>
   16270:	vldr	s0, [r4, #8]
   16274:	vldr	s2, [r4, #12]
   16278:	ldr	r0, [r4, #20]
   1627c:	vcvt.f32.u32	s0, s0
   16280:	vcvt.f32.u32	s4, s2
   16284:	vldr	s2, [r0, #8]
   16288:	vmul.f32	s6, s2, s0
   1628c:	vcmpe.f32	s6, s4
   16290:	vmrs	APSR_nzcv, fpscr
   16294:	bpl	163f8 <__assert_fail@plt+0x5054>
   16298:	movw	r1, #45424	; 0xb170
   1629c:	movt	r1, #1
   162a0:	cmp	r0, r1
   162a4:	beq	16340 <__assert_fail@plt+0x4f9c>
   162a8:	vldr	s6, [pc, #564]	; 164e4 <__assert_fail@plt+0x5140>
   162ac:	vcmpe.f32	s2, s6
   162b0:	vmrs	APSR_nzcv, fpscr
   162b4:	ble	1631c <__assert_fail@plt+0x4f78>
   162b8:	vldr	s8, [pc, #552]	; 164e8 <__assert_fail@plt+0x5144>
   162bc:	vcmpe.f32	s2, s8
   162c0:	vmrs	APSR_nzcv, fpscr
   162c4:	bpl	1631c <__assert_fail@plt+0x4f78>
   162c8:	vldr	s8, [pc, #540]	; 164ec <__assert_fail@plt+0x5148>
   162cc:	vldr	s10, [r0, #12]
   162d0:	vcmpe.f32	s10, s8
   162d4:	vmrs	APSR_nzcv, fpscr
   162d8:	ble	1631c <__assert_fail@plt+0x4f78>
   162dc:	vldr	s8, [r0]
   162e0:	vcmpe.f32	s8, #0.0
   162e4:	vmrs	APSR_nzcv, fpscr
   162e8:	blt	1631c <__assert_fail@plt+0x4f78>
   162ec:	vadd.f32	s6, s8, s6
   162f0:	vcmpe.f32	s6, s2
   162f4:	vmrs	APSR_nzcv, fpscr
   162f8:	bpl	1631c <__assert_fail@plt+0x4f78>
   162fc:	vldr	s8, [r0, #4]
   16300:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16304:	vcmpe.f32	s8, s10
   16308:	vmrs	APSR_nzcv, fpscr
   1630c:	bhi	1631c <__assert_fail@plt+0x4f78>
   16310:	vcmpe.f32	s6, s8
   16314:	vmrs	APSR_nzcv, fpscr
   16318:	bmi	1632c <__assert_fail@plt+0x4f88>
   1631c:	vldr	s2, [pc, #460]	; 164f0 <__assert_fail@plt+0x514c>
   16320:	movw	r0, #45424	; 0xb170
   16324:	movt	r0, #1
   16328:	str	r0, [r4, #20]
   1632c:	vmul.f32	s6, s2, s0
   16330:	vcmpe.f32	s6, s4
   16334:	vmrs	APSR_nzcv, fpscr
   16338:	bmi	16354 <__assert_fail@plt+0x4fb0>
   1633c:	b	163f8 <__assert_fail@plt+0x5054>
   16340:	mov	r0, r1
   16344:	vmul.f32	s6, s2, s0
   16348:	vcmpe.f32	s6, s4
   1634c:	vmrs	APSR_nzcv, fpscr
   16350:	bpl	163f8 <__assert_fail@plt+0x5054>
   16354:	vldr	s4, [r0, #12]
   16358:	ldrb	r0, [r0, #16]
   1635c:	mvn	r7, #0
   16360:	vmul.f32	s0, s4, s0
   16364:	vldr	s4, [pc, #392]	; 164f4 <__assert_fail@plt+0x5150>
   16368:	cmp	r0, #0
   1636c:	vmul.f32	s2, s2, s0
   16370:	vseleq.f32	s0, s2, s0
   16374:	vcmpe.f32	s0, s4
   16378:	vmrs	APSR_nzcv, fpscr
   1637c:	bge	16474 <__assert_fail@plt+0x50d0>
   16380:	vcvt.u32.f32	s0, s0
   16384:	mov	r0, r4
   16388:	vmov	r1, s0
   1638c:	bl	15cdc <__assert_fail@plt+0x4938>
   16390:	cmp	r0, #0
   16394:	beq	16474 <__assert_fail@plt+0x50d0>
   16398:	ldr	r1, [r4, #8]
   1639c:	ldr	r2, [r4, #24]
   163a0:	mov	r0, sl
   163a4:	blx	r2
   163a8:	mov	r7, r0
   163ac:	ldr	r0, [r4, #8]
   163b0:	cmp	r7, r0
   163b4:	bcs	164e0 <__assert_fail@plt+0x513c>
   163b8:	ldr	r5, [r4]
   163bc:	mov	r9, r5
   163c0:	ldr	r1, [r9, r7, lsl #3]!
   163c4:	cmp	r1, #0
   163c8:	beq	16420 <__assert_fail@plt+0x507c>
   163cc:	cmp	r1, sl
   163d0:	mov	r0, sl
   163d4:	beq	163f0 <__assert_fail@plt+0x504c>
   163d8:	ldr	r2, [r4, #28]
   163dc:	mov	r0, sl
   163e0:	blx	r2
   163e4:	cmp	r0, #0
   163e8:	beq	16490 <__assert_fail@plt+0x50ec>
   163ec:	ldr	r0, [r9]
   163f0:	cmp	r0, #0
   163f4:	bne	164e0 <__assert_fail@plt+0x513c>
   163f8:	ldr	r0, [r9]
   163fc:	cmp	r0, #0
   16400:	beq	16420 <__assert_fail@plt+0x507c>
   16404:	ldr	r0, [r4, #36]	; 0x24
   16408:	cmp	r0, #0
   1640c:	beq	16440 <__assert_fail@plt+0x509c>
   16410:	mov	r1, r0
   16414:	ldr	r2, [r1, #4]!
   16418:	str	r2, [r4, #36]	; 0x24
   1641c:	b	16454 <__assert_fail@plt+0x50b0>
   16420:	str	sl, [r9]
   16424:	ldr	r0, [r4, #12]
   16428:	ldr	r1, [r4, #16]
   1642c:	add	r0, r0, #1
   16430:	add	r1, r1, #1
   16434:	str	r0, [r4, #12]
   16438:	str	r1, [r4, #16]
   1643c:	b	16470 <__assert_fail@plt+0x50cc>
   16440:	mov	r0, #8
   16444:	bl	19ca4 <__assert_fail@plt+0x8900>
   16448:	cmp	r0, #0
   1644c:	beq	16480 <__assert_fail@plt+0x50dc>
   16450:	add	r1, r0, #4
   16454:	str	sl, [r0]
   16458:	ldr	r2, [r9, #4]
   1645c:	str	r2, [r1]
   16460:	str	r0, [r9, #4]
   16464:	ldr	r0, [r4, #16]
   16468:	add	r0, r0, #1
   1646c:	str	r0, [r4, #16]
   16470:	mov	r7, #1
   16474:	mov	r0, r7
   16478:	sub	sp, fp, #28
   1647c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16480:	mvn	r7, #0
   16484:	mov	r0, r7
   16488:	sub	sp, fp, #28
   1648c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16490:	add	r6, r5, r7, lsl #3
   16494:	ldr	r0, [r6, #4]!
   16498:	cmp	r0, #0
   1649c:	beq	163f8 <__assert_fail@plt+0x5054>
   164a0:	ldr	r1, [r0]
   164a4:	cmp	r1, sl
   164a8:	beq	164d4 <__assert_fail@plt+0x5130>
   164ac:	ldr	r2, [r4, #28]
   164b0:	mov	r0, sl
   164b4:	blx	r2
   164b8:	ldr	r6, [r6]
   164bc:	cmp	r0, #0
   164c0:	beq	16494 <__assert_fail@plt+0x50f0>
   164c4:	ldr	r0, [r6]
   164c8:	cmp	r0, #0
   164cc:	beq	163f8 <__assert_fail@plt+0x5054>
   164d0:	b	164e0 <__assert_fail@plt+0x513c>
   164d4:	mov	r0, sl
   164d8:	cmp	r0, #0
   164dc:	beq	163f8 <__assert_fail@plt+0x5054>
   164e0:	bl	11374 <abort@plt>
   164e4:	stclcc	12, cr12, [ip, #820]	; 0x334
   164e8:	svccc	0x00666666
   164ec:	svccc	0x008ccccd
   164f0:	svccc	0x004ccccd
   164f4:	svcmi	0x00800000
   164f8:	push	{r4, sl, fp, lr}
   164fc:	add	fp, sp, #8
   16500:	sub	sp, sp, #8
   16504:	add	r2, sp, #4
   16508:	mov	r4, r1
   1650c:	bl	1618c <__assert_fail@plt+0x4de8>
   16510:	cmn	r0, #1
   16514:	beq	16530 <__assert_fail@plt+0x518c>
   16518:	ldr	r1, [sp, #4]
   1651c:	cmp	r0, #0
   16520:	moveq	r4, r1
   16524:	mov	r0, r4
   16528:	sub	sp, fp, #8
   1652c:	pop	{r4, sl, fp, pc}
   16530:	mov	r4, #0
   16534:	mov	r0, r4
   16538:	sub	sp, fp, #8
   1653c:	pop	{r4, sl, fp, pc}
   16540:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16544:	add	fp, sp, #24
   16548:	mov	r9, r1
   1654c:	ldr	r1, [r0, #8]
   16550:	ldr	r2, [r0, #24]
   16554:	mov	r5, r0
   16558:	mov	r0, r9
   1655c:	blx	r2
   16560:	mov	r7, r0
   16564:	ldr	r0, [r5, #8]
   16568:	cmp	r7, r0
   1656c:	bcs	167dc <__assert_fail@plt+0x5438>
   16570:	ldr	r6, [r5]
   16574:	mov	r8, #0
   16578:	mov	r4, r6
   1657c:	ldr	r1, [r4, r7, lsl #3]!
   16580:	cmp	r1, #0
   16584:	beq	16638 <__assert_fail@plt+0x5294>
   16588:	cmp	r1, r9
   1658c:	beq	165a8 <__assert_fail@plt+0x5204>
   16590:	ldr	r2, [r5, #28]
   16594:	mov	r0, r9
   16598:	blx	r2
   1659c:	cmp	r0, #0
   165a0:	beq	165e0 <__assert_fail@plt+0x523c>
   165a4:	ldr	r9, [r4]
   165a8:	add	r0, r6, r7, lsl #3
   165ac:	ldr	r0, [r0, #4]
   165b0:	cmp	r0, #0
   165b4:	beq	16628 <__assert_fail@plt+0x5284>
   165b8:	ldm	r0, {r1, r2}
   165bc:	stm	r4, {r1, r2}
   165c0:	mov	r1, #0
   165c4:	str	r1, [r0]
   165c8:	ldr	r1, [r5, #36]	; 0x24
   165cc:	str	r1, [r0, #4]
   165d0:	str	r0, [r5, #36]	; 0x24
   165d4:	cmp	r9, #0
   165d8:	bne	16670 <__assert_fail@plt+0x52cc>
   165dc:	b	16638 <__assert_fail@plt+0x5294>
   165e0:	add	r7, r6, r7, lsl #3
   165e4:	ldr	r0, [r7, #4]!
   165e8:	cmp	r0, #0
   165ec:	beq	16638 <__assert_fail@plt+0x5294>
   165f0:	ldr	r1, [r0]
   165f4:	cmp	r1, r9
   165f8:	beq	16640 <__assert_fail@plt+0x529c>
   165fc:	ldr	r2, [r5, #28]
   16600:	mov	r0, r9
   16604:	blx	r2
   16608:	ldr	r1, [r7]
   1660c:	cmp	r0, #0
   16610:	bne	16648 <__assert_fail@plt+0x52a4>
   16614:	ldr	r0, [r1, #4]!
   16618:	cmp	r0, #0
   1661c:	mov	r7, r1
   16620:	bne	165f0 <__assert_fail@plt+0x524c>
   16624:	b	16638 <__assert_fail@plt+0x5294>
   16628:	mov	r0, #0
   1662c:	str	r0, [r4]
   16630:	cmp	r9, #0
   16634:	bne	16670 <__assert_fail@plt+0x52cc>
   16638:	mov	r0, r8
   1663c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16640:	mov	r1, r0
   16644:	b	1664c <__assert_fail@plt+0x52a8>
   16648:	ldr	r9, [r1]
   1664c:	ldr	r0, [r1, #4]
   16650:	str	r0, [r7]
   16654:	mov	r0, #0
   16658:	str	r0, [r1]
   1665c:	ldr	r0, [r5, #36]	; 0x24
   16660:	str	r0, [r1, #4]
   16664:	str	r1, [r5, #36]	; 0x24
   16668:	cmp	r9, #0
   1666c:	beq	16638 <__assert_fail@plt+0x5294>
   16670:	ldr	r0, [r5, #16]
   16674:	sub	r0, r0, #1
   16678:	str	r0, [r5, #16]
   1667c:	ldr	r0, [r4]
   16680:	cmp	r0, #0
   16684:	bne	1679c <__assert_fail@plt+0x53f8>
   16688:	ldr	r0, [r5, #12]
   1668c:	vldr	s0, [r5, #8]
   16690:	sub	r1, r0, #1
   16694:	str	r1, [r5, #12]
   16698:	vmov	s2, r1
   1669c:	ldr	r0, [r5, #20]
   166a0:	vcvt.f32.u32	s0, s0
   166a4:	vcvt.f32.u32	s2, s2
   166a8:	vldr	s4, [r0]
   166ac:	vmul.f32	s6, s4, s0
   166b0:	vcmpe.f32	s6, s2
   166b4:	vmrs	APSR_nzcv, fpscr
   166b8:	ble	1679c <__assert_fail@plt+0x53f8>
   166bc:	movw	r1, #45424	; 0xb170
   166c0:	movt	r1, #1
   166c4:	cmp	r0, r1
   166c8:	beq	16730 <__assert_fail@plt+0x538c>
   166cc:	vldr	s8, [pc, #268]	; 167e0 <__assert_fail@plt+0x543c>
   166d0:	vldr	s6, [r0, #8]
   166d4:	vcmpe.f32	s6, s8
   166d8:	vmrs	APSR_nzcv, fpscr
   166dc:	ble	1670c <__assert_fail@plt+0x5368>
   166e0:	vldr	s10, [pc, #252]	; 167e4 <__assert_fail@plt+0x5440>
   166e4:	vcmpe.f32	s6, s10
   166e8:	vmrs	APSR_nzcv, fpscr
   166ec:	bpl	1670c <__assert_fail@plt+0x5368>
   166f0:	vcmpe.f32	s4, #0.0
   166f4:	vmrs	APSR_nzcv, fpscr
   166f8:	vldrge	s10, [r0, #12]
   166fc:	vldrge	s12, [pc, #228]	; 167e8 <__assert_fail@plt+0x5444>
   16700:	vcmpege.f32	s10, s12
   16704:	vmrsge	APSR_nzcv, fpscr
   16708:	bgt	167a8 <__assert_fail@plt+0x5404>
   1670c:	vldr	s4, [pc, #216]	; 167ec <__assert_fail@plt+0x5448>
   16710:	movw	r0, #45424	; 0xb170
   16714:	movt	r0, #1
   16718:	str	r0, [r5, #20]
   1671c:	vmul.f32	s4, s4, s0
   16720:	vcmpe.f32	s4, s2
   16724:	vmrs	APSR_nzcv, fpscr
   16728:	bgt	16744 <__assert_fail@plt+0x53a0>
   1672c:	b	1679c <__assert_fail@plt+0x53f8>
   16730:	mov	r0, r1
   16734:	vmul.f32	s4, s4, s0
   16738:	vcmpe.f32	s4, s2
   1673c:	vmrs	APSR_nzcv, fpscr
   16740:	ble	1679c <__assert_fail@plt+0x53f8>
   16744:	ldrb	r1, [r0, #16]
   16748:	vldr	s2, [r0, #4]
   1674c:	cmp	r1, #0
   16750:	vmul.f32	s0, s2, s0
   16754:	vldreq	s2, [r0, #8]
   16758:	mov	r0, r5
   1675c:	vmuleq.f32	s0, s0, s2
   16760:	vcvt.u32.f32	s0, s0
   16764:	vmov	r1, s0
   16768:	bl	15cdc <__assert_fail@plt+0x4938>
   1676c:	cmp	r0, #0
   16770:	bne	1679c <__assert_fail@plt+0x53f8>
   16774:	ldr	r0, [r5, #36]	; 0x24
   16778:	cmp	r0, #0
   1677c:	beq	16794 <__assert_fail@plt+0x53f0>
   16780:	ldr	r4, [r0, #4]
   16784:	bl	1a1cc <__assert_fail@plt+0x8e28>
   16788:	cmp	r4, #0
   1678c:	mov	r0, r4
   16790:	bne	16780 <__assert_fail@plt+0x53dc>
   16794:	mov	r0, #0
   16798:	str	r0, [r5, #36]	; 0x24
   1679c:	mov	r8, r9
   167a0:	mov	r0, r8
   167a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   167a8:	vadd.f32	s8, s4, s8
   167ac:	vcmpe.f32	s8, s6
   167b0:	vmrs	APSR_nzcv, fpscr
   167b4:	bpl	1670c <__assert_fail@plt+0x5368>
   167b8:	vldr	s6, [r0, #4]
   167bc:	vmov.f32	s10, #112	; 0x3f800000  1.0
   167c0:	vcmpe.f32	s6, s10
   167c4:	vmrs	APSR_nzcv, fpscr
   167c8:	bhi	1670c <__assert_fail@plt+0x5368>
   167cc:	vcmpe.f32	s8, s6
   167d0:	vmrs	APSR_nzcv, fpscr
   167d4:	bmi	16734 <__assert_fail@plt+0x5390>
   167d8:	b	1670c <__assert_fail@plt+0x5368>
   167dc:	bl	11374 <abort@plt>
   167e0:	stclcc	12, cr12, [ip, #820]	; 0x334
   167e4:	svccc	0x00666666
   167e8:	svccc	0x008ccccd
   167ec:	andeq	r0, r0, r0
   167f0:	b	16540 <__assert_fail@plt+0x519c>
   167f4:	mov	r3, #1
   167f8:	mov	r2, #0
   167fc:	vdup.32	q8, r1
   16800:	strb	r3, [r0, #28]
   16804:	str	r2, [r0, #20]
   16808:	str	r2, [r0, #24]
   1680c:	vst1.32	{d16-d17}, [r0]!
   16810:	str	r1, [r0]
   16814:	bx	lr
   16818:	ldrb	r0, [r0, #28]
   1681c:	bx	lr
   16820:	push	{fp, lr}
   16824:	mov	fp, sp
   16828:	ldrb	r3, [r0, #28]
   1682c:	ldr	r2, [r0, #20]
   16830:	eor	lr, r3, #1
   16834:	add	r2, r2, lr
   16838:	and	r3, r2, #3
   1683c:	ldr	ip, [r0, r3, lsl #2]
   16840:	str	r1, [r0, r3, lsl #2]
   16844:	str	r3, [r0, #20]
   16848:	ldr	r1, [r0, #24]
   1684c:	cmp	r3, r1
   16850:	addeq	r1, r2, lr
   16854:	andeq	r1, r1, #3
   16858:	streq	r1, [r0, #24]
   1685c:	mov	r1, #0
   16860:	strb	r1, [r0, #28]
   16864:	mov	r0, ip
   16868:	pop	{fp, pc}
   1686c:	ldrb	r1, [r0, #28]
   16870:	cmp	r1, #0
   16874:	bne	168b8 <__assert_fail@plt+0x5514>
   16878:	ldr	r3, [r0, #20]
   1687c:	ldr	r2, [r0, #16]
   16880:	ldr	r1, [r0, r3, lsl #2]
   16884:	str	r2, [r0, r3, lsl #2]
   16888:	ldr	r2, [r0, #20]
   1688c:	ldr	r3, [r0, #24]
   16890:	cmp	r2, r3
   16894:	moveq	r2, #1
   16898:	strbeq	r2, [r0, #28]
   1689c:	moveq	r0, r1
   168a0:	bxeq	lr
   168a4:	sub	r2, r2, #1
   168a8:	and	r2, r2, #3
   168ac:	str	r2, [r0, #20]
   168b0:	mov	r0, r1
   168b4:	bx	lr
   168b8:	push	{fp, lr}
   168bc:	mov	fp, sp
   168c0:	bl	11374 <abort@plt>
   168c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168c8:	add	fp, sp, #28
   168cc:	sub	sp, sp, #4
   168d0:	ldrb	r1, [r0]
   168d4:	mov	r4, r0
   168d8:	and	r0, r1, #248	; 0xf8
   168dc:	cmp	r0, #48	; 0x30
   168e0:	bne	1692c <__assert_fail@plt+0x5588>
   168e4:	mov	r0, #0
   168e8:	mov	r5, #0
   168ec:	mov	r2, r4
   168f0:	lsl	r3, r5, #3
   168f4:	uxtab	r1, r3, r1
   168f8:	sub	r5, r1, #48	; 0x30
   168fc:	cmp	r0, r5, lsr #12
   16900:	bne	16924 <__assert_fail@plt+0x5580>
   16904:	ldrb	r1, [r2, #1]
   16908:	add	r6, r2, #1
   1690c:	and	r2, r1, #248	; 0xf8
   16910:	cmp	r2, #48	; 0x30
   16914:	mov	r2, r6
   16918:	beq	168f0 <__assert_fail@plt+0x554c>
   1691c:	cmp	r1, #0
   16920:	beq	169ac <__assert_fail@plt+0x5608>
   16924:	sub	sp, fp, #28
   16928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1692c:	movw	sl, #5
   16930:	mov	r2, #1
   16934:	mvn	r3, #42	; 0x2a
   16938:	mov	r7, #1
   1693c:	mov	r0, #1
   16940:	movt	sl, #4
   16944:	uxtab	r6, r3, r1
   16948:	uxtb	r1, r1
   1694c:	cmp	r6, #18
   16950:	bls	16974 <__assert_fail@plt+0x55d0>
   16954:	b	16980 <__assert_fail@plt+0x55dc>
   16958:	ldrb	r1, [r4, r7]
   1695c:	add	r0, r6, r0
   16960:	add	r7, r7, #1
   16964:	uxtab	r6, r3, r1
   16968:	uxtb	r1, r1
   1696c:	cmp	r6, #18
   16970:	bhi	16980 <__assert_fail@plt+0x55dc>
   16974:	tst	sl, r2, lsl r6
   16978:	mov	r6, #1
   1697c:	bne	16958 <__assert_fail@plt+0x55b4>
   16980:	cmp	r1, #0
   16984:	beq	16990 <__assert_fail@plt+0x55ec>
   16988:	mov	r6, #0
   1698c:	b	16958 <__assert_fail@plt+0x55b4>
   16990:	mov	r1, #16
   16994:	bl	19700 <__assert_fail@plt+0x835c>
   16998:	mov	r9, #0
   1699c:	mov	ip, #1
   169a0:	mvn	lr, #87	; 0x57
   169a4:	mov	r8, #0
   169a8:	b	169f8 <__assert_fail@plt+0x5654>
   169ac:	mov	r0, #32
   169b0:	bl	19630 <__assert_fail@plt+0x828c>
   169b4:	movw	r1, #317	; 0x13d
   169b8:	mov	r2, #0
   169bc:	and	r3, r5, #3072	; 0xc00
   169c0:	movw	r7, #1023	; 0x3ff
   169c4:	strh	r1, [r0]
   169c8:	strb	r2, [r0, #17]
   169cc:	sub	r2, r6, r4
   169d0:	movw	r1, #4095	; 0xfff
   169d4:	cmp	r2, #5
   169d8:	str	r1, [r0, #4]
   169dc:	str	r5, [r0, #8]
   169e0:	orrlt	r1, r3, r7
   169e4:	str	r1, [r0, #12]
   169e8:	sub	sp, fp, #28
   169ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169f0:	add	r4, r4, #1
   169f4:	mov	r8, r3
   169f8:	mov	r2, #0
   169fc:	ldrb	r6, [r4]
   16a00:	sub	r3, r6, #97	; 0x61
   16a04:	cmp	r3, #20
   16a08:	bls	16a28 <__assert_fail@plt+0x5684>
   16a0c:	b	16aa0 <__assert_fail@plt+0x56fc>
   16a10:	orr	r2, r2, r1
   16a14:	add	r4, r4, #1
   16a18:	ldrb	r6, [r4]
   16a1c:	sub	r3, r6, #97	; 0x61
   16a20:	cmp	r3, #20
   16a24:	bhi	16aa0 <__assert_fail@plt+0x56fc>
   16a28:	add	r5, pc, #4
   16a2c:	mov	r1, #2496	; 0x9c0
   16a30:	ldr	pc, [r5, r3, lsl #2]
   16a34:	andeq	r6, r1, r8, lsl #21
   16a38:	andeq	r6, r1, ip, lsl sp
   16a3c:	andeq	r6, r1, ip, lsl sp
   16a40:	andeq	r6, r1, ip, lsl sp
   16a44:	andeq	r6, r1, ip, lsl sp
   16a48:	andeq	r6, r1, ip, lsl sp
   16a4c:	muleq	r1, r0, sl
   16a50:	andeq	r6, r1, ip, lsl sp
   16a54:	andeq	r6, r1, ip, lsl sp
   16a58:	andeq	r6, r1, ip, lsl sp
   16a5c:	andeq	r6, r1, ip, lsl sp
   16a60:	andeq	r6, r1, ip, lsl sp
   16a64:	andeq	r6, r1, ip, lsl sp
   16a68:	andeq	r6, r1, ip, lsl sp
   16a6c:	muleq	r1, r8, sl
   16a70:	andeq	r6, r1, ip, lsl sp
   16a74:	andeq	r6, r1, ip, lsl sp
   16a78:	andeq	r6, r1, ip, lsl sp
   16a7c:	andeq	r6, r1, ip, lsl sp
   16a80:	andeq	r6, r1, ip, lsl sp
   16a84:	andeq	r6, r1, r0, lsl sl
   16a88:	movw	r1, #4095	; 0xfff
   16a8c:	b	16a10 <__assert_fail@plt+0x566c>
   16a90:	movw	r1, #1080	; 0x438
   16a94:	b	16a10 <__assert_fail@plt+0x566c>
   16a98:	movw	r1, #519	; 0x207
   16a9c:	b	16a10 <__assert_fail@plt+0x566c>
   16aa0:	sub	r1, r6, #43	; 0x2b
   16aa4:	cmp	r1, #18
   16aa8:	bhi	16d1c <__assert_fail@plt+0x5978>
   16aac:	tst	sl, ip, lsl r1
   16ab0:	beq	16d1c <__assert_fail@plt+0x5978>
   16ab4:	ldrb	r1, [r4, #1]
   16ab8:	sub	r3, r1, #48	; 0x30
   16abc:	cmp	r3, #8
   16ac0:	bcs	16b1c <__assert_fail@plt+0x5778>
   16ac4:	add	r3, r4, #2
   16ac8:	mov	r7, #0
   16acc:	lsl	r4, r7, #3
   16ad0:	uxtab	r1, r4, r1
   16ad4:	sub	r7, r1, #48	; 0x30
   16ad8:	cmp	r9, r7, lsr #12
   16adc:	bne	16d1c <__assert_fail@plt+0x5978>
   16ae0:	ldrb	r1, [r3], #1
   16ae4:	and	r4, r1, #248	; 0xf8
   16ae8:	cmp	r4, #48	; 0x30
   16aec:	beq	16acc <__assert_fail@plt+0x5728>
   16af0:	cmp	r2, #0
   16af4:	bne	16d1c <__assert_fail@plt+0x5978>
   16af8:	sub	r4, r3, #1
   16afc:	mov	r5, #1
   16b00:	movw	r2, #4095	; 0xfff
   16b04:	cmp	r1, #0
   16b08:	beq	16b48 <__assert_fail@plt+0x57a4>
   16b0c:	cmp	r1, #44	; 0x2c
   16b10:	movw	r1, #4095	; 0xfff
   16b14:	beq	16c68 <__assert_fail@plt+0x58c4>
   16b18:	b	16d1c <__assert_fail@plt+0x5978>
   16b1c:	add	r4, r4, #2
   16b20:	cmp	r1, #103	; 0x67
   16b24:	beq	16b50 <__assert_fail@plt+0x57ac>
   16b28:	cmp	r1, #111	; 0x6f
   16b2c:	beq	16b60 <__assert_fail@plt+0x57bc>
   16b30:	cmp	r1, #117	; 0x75
   16b34:	bne	16b70 <__assert_fail@plt+0x57cc>
   16b38:	mov	r5, #3
   16b3c:	mov	r1, #0
   16b40:	mov	r7, #448	; 0x1c0
   16b44:	b	16c68 <__assert_fail@plt+0x58c4>
   16b48:	movw	r1, #4095	; 0xfff
   16b4c:	b	16c68 <__assert_fail@plt+0x58c4>
   16b50:	mov	r5, #3
   16b54:	mov	r1, #0
   16b58:	mov	r7, #56	; 0x38
   16b5c:	b	16c68 <__assert_fail@plt+0x58c4>
   16b60:	mov	r5, #3
   16b64:	mov	r1, #0
   16b68:	mov	r7, #7
   16b6c:	b	16c68 <__assert_fail@plt+0x58c4>
   16b70:	mov	r3, #1
   16b74:	mov	r7, #0
   16b78:	uxtab	r1, lr, r1
   16b7c:	mov	r5, r3
   16b80:	cmp	r1, #32
   16b84:	bls	16ba0 <__assert_fail@plt+0x57fc>
   16b88:	b	16c5c <__assert_fail@plt+0x58b8>
   16b8c:	ldrb	r1, [r4], #1
   16b90:	uxtab	r1, lr, r1
   16b94:	mov	r5, r3
   16b98:	cmp	r1, #32
   16b9c:	bhi	16c5c <__assert_fail@plt+0x58b8>
   16ba0:	add	ip, pc, #4
   16ba4:	mov	r3, #2
   16ba8:	ldr	pc, [ip, r1, lsl #2]
   16bac:	andeq	r6, r1, ip, lsl #23
   16bb0:	andeq	r6, r1, ip, asr ip
   16bb4:	andeq	r6, r1, ip, asr ip
   16bb8:	andeq	r6, r1, ip, asr ip
   16bbc:	andeq	r6, r1, ip, asr ip
   16bc0:	andeq	r6, r1, ip, asr ip
   16bc4:	andeq	r6, r1, ip, asr ip
   16bc8:	andeq	r6, r1, ip, asr ip
   16bcc:	andeq	r6, r1, ip, asr ip
   16bd0:	andeq	r6, r1, ip, asr ip
   16bd4:	andeq	r6, r1, ip, asr ip
   16bd8:	andeq	r6, r1, ip, asr ip
   16bdc:	andeq	r6, r1, ip, asr ip
   16be0:	andeq	r6, r1, ip, asr ip
   16be4:	andeq	r6, r1, ip, asr ip
   16be8:	andeq	r6, r1, ip, asr ip
   16bec:	andeq	r6, r1, ip, asr ip
   16bf0:	andeq	r6, r1, ip, asr ip
   16bf4:	andeq	r6, r1, ip, asr ip
   16bf8:	andeq	r6, r1, ip, asr ip
   16bfc:	andeq	r6, r1, ip, asr ip
   16c00:	andeq	r6, r1, ip, asr ip
   16c04:	andeq	r6, r1, ip, asr ip
   16c08:	andeq	r6, r1, ip, asr ip
   16c0c:	andeq	r6, r1, ip, asr ip
   16c10:	andeq	r6, r1, ip, asr ip
   16c14:	andeq	r6, r1, r0, lsr ip
   16c18:	andeq	r6, r1, r8, lsr ip
   16c1c:	andeq	r6, r1, r0, asr #24
   16c20:	andeq	r6, r1, ip, asr ip
   16c24:	andeq	r6, r1, ip, asr ip
   16c28:	andeq	r6, r1, r8, asr #24
   16c2c:	andeq	r6, r1, r0, asr ip
   16c30:	orr	r7, r7, #292	; 0x124
   16c34:	b	16c54 <__assert_fail@plt+0x58b0>
   16c38:	orr	r7, r7, #3072	; 0xc00
   16c3c:	b	16c54 <__assert_fail@plt+0x58b0>
   16c40:	orr	r7, r7, #512	; 0x200
   16c44:	b	16c54 <__assert_fail@plt+0x58b0>
   16c48:	orr	r7, r7, #146	; 0x92
   16c4c:	b	16c54 <__assert_fail@plt+0x58b0>
   16c50:	orr	r7, r7, #73	; 0x49
   16c54:	mov	r3, r5
   16c58:	b	16b8c <__assert_fail@plt+0x57e8>
   16c5c:	sub	r4, r4, #1
   16c60:	mov	r1, #0
   16c64:	mov	ip, #1
   16c68:	mov	r3, r0
   16c6c:	cmp	r1, #0
   16c70:	strb	r6, [r3, r8, lsl #4]!
   16c74:	strb	r5, [r3, #1]
   16c78:	stmib	r3, {r2, r7}
   16c7c:	bne	16c8c <__assert_fail@plt+0x58e8>
   16c80:	cmp	r2, #0
   16c84:	andne	r7, r7, r2
   16c88:	mov	r1, r7
   16c8c:	add	r7, r0, r8, lsl #4
   16c90:	add	r3, r8, #1
   16c94:	str	r1, [r7, #12]
   16c98:	ldrb	r6, [r4]
   16c9c:	sub	r1, r6, #43	; 0x2b
   16ca0:	cmp	r1, #18
   16ca4:	bhi	16d00 <__assert_fail@plt+0x595c>
   16ca8:	add	r7, pc, #4
   16cac:	mov	r8, r3
   16cb0:	ldr	pc, [r7, r1, lsl #2]
   16cb4:			; <UNDEFINED> instruction: 0x00016ab4
   16cb8:	strdeq	r6, [r1], -r0
   16cbc:			; <UNDEFINED> instruction: 0x00016ab4
   16cc0:	andeq	r6, r1, ip, lsl sp
   16cc4:	andeq	r6, r1, ip, lsl sp
   16cc8:	andeq	r6, r1, ip, lsl sp
   16ccc:	andeq	r6, r1, ip, lsl sp
   16cd0:	andeq	r6, r1, ip, lsl sp
   16cd4:	andeq	r6, r1, ip, lsl sp
   16cd8:	andeq	r6, r1, ip, lsl sp
   16cdc:	andeq	r6, r1, ip, lsl sp
   16ce0:	andeq	r6, r1, ip, lsl sp
   16ce4:	andeq	r6, r1, ip, lsl sp
   16ce8:	andeq	r6, r1, ip, lsl sp
   16cec:	andeq	r6, r1, ip, lsl sp
   16cf0:	andeq	r6, r1, ip, lsl sp
   16cf4:	andeq	r6, r1, ip, lsl sp
   16cf8:	andeq	r6, r1, ip, lsl sp
   16cfc:			; <UNDEFINED> instruction: 0x00016ab4
   16d00:	cmp	r6, #0
   16d04:	bne	16d1c <__assert_fail@plt+0x5978>
   16d08:	add	r1, r0, r3, lsl #4
   16d0c:	mov	r2, #0
   16d10:	strb	r2, [r1, #1]
   16d14:	sub	sp, fp, #28
   16d18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d1c:	bl	1a1cc <__assert_fail@plt+0x8e28>
   16d20:	mov	r0, #0
   16d24:	sub	sp, fp, #28
   16d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d2c:	push	{r4, sl, fp, lr}
   16d30:	add	fp, sp, #8
   16d34:	sub	sp, sp, #104	; 0x68
   16d38:	mov	r1, r0
   16d3c:	mov	r2, sp
   16d40:	mov	r0, #3
   16d44:	bl	1135c <__xstat64@plt>
   16d48:	mov	r1, r0
   16d4c:	mov	r0, #0
   16d50:	cmp	r1, #0
   16d54:	beq	16d60 <__assert_fail@plt+0x59bc>
   16d58:	sub	sp, fp, #8
   16d5c:	pop	{r4, sl, fp, pc}
   16d60:	ldr	r4, [sp, #16]
   16d64:	mov	r0, #32
   16d68:	bl	19630 <__assert_fail@plt+0x828c>
   16d6c:	movw	r1, #317	; 0x13d
   16d70:	strh	r1, [r0]
   16d74:	movw	r1, #4095	; 0xfff
   16d78:	stmib	r0, {r1, r4}
   16d7c:	str	r1, [r0, #12]
   16d80:	mov	r1, #0
   16d84:	strb	r1, [r0, #17]
   16d88:	sub	sp, fp, #8
   16d8c:	pop	{r4, sl, fp, pc}
   16d90:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16d94:	add	fp, sp, #24
   16d98:	ldrb	r4, [r3, #1]
   16d9c:	ldr	ip, [fp, #8]
   16da0:	bfc	r0, #12, #20
   16da4:	cmp	r4, #0
   16da8:	beq	16e90 <__assert_fail@plt+0x5aec>
   16dac:	cmp	r1, #0
   16db0:	mov	lr, r1
   16db4:	add	r3, r3, #8
   16db8:	mov	r9, #0
   16dbc:	movw	r8, #4095	; 0xfff
   16dc0:	movwne	lr, #3072	; 0xc00
   16dc4:	mov	r5, r3
   16dc8:	ldr	r7, [r3, #-4]
   16dcc:	ldr	r3, [r3]
   16dd0:	uxtb	r4, r4
   16dd4:	ldr	r6, [r5, #4]
   16dd8:	cmp	r4, #2
   16ddc:	bic	r6, lr, r6
   16de0:	beq	16e0c <__assert_fail@plt+0x5a68>
   16de4:	cmp	r4, #3
   16de8:	bne	16e18 <__assert_fail@plt+0x5a74>
   16dec:	and	r4, r3, r0
   16df0:	tst	r4, #146	; 0x92
   16df4:	mov	r3, r4
   16df8:	orrne	r3, r3, #146	; 0x92
   16dfc:	tst	r4, #292	; 0x124
   16e00:	orrne	r3, r3, #292	; 0x124
   16e04:	tst	r4, #73	; 0x49
   16e08:	b	16e14 <__assert_fail@plt+0x5a70>
   16e0c:	and	r4, r0, #73	; 0x49
   16e10:	orrs	r4, r4, r1
   16e14:	orrne	r3, r3, #73	; 0x49
   16e18:	cmp	r7, #0
   16e1c:	mov	r4, r7
   16e20:	mvneq	r4, r2
   16e24:	bic	r4, r4, r6
   16e28:	and	r3, r4, r3
   16e2c:	ldrb	r4, [r5, #-8]
   16e30:	cmp	r4, #43	; 0x2b
   16e34:	beq	16e64 <__assert_fail@plt+0x5ac0>
   16e38:	cmp	r4, #45	; 0x2d
   16e3c:	beq	16e6c <__assert_fail@plt+0x5ac8>
   16e40:	cmp	r4, #61	; 0x3d
   16e44:	bne	16e74 <__assert_fail@plt+0x5ad0>
   16e48:	mvn	r4, r7
   16e4c:	cmp	r7, #0
   16e50:	orrne	r6, r6, r4
   16e54:	and	r0, r6, r0
   16e58:	orr	r0, r3, r0
   16e5c:	bic	r3, r8, r6
   16e60:	b	16e70 <__assert_fail@plt+0x5acc>
   16e64:	orr	r0, r3, r0
   16e68:	b	16e70 <__assert_fail@plt+0x5acc>
   16e6c:	bic	r0, r0, r3
   16e70:	orr	r9, r3, r9
   16e74:	ldrb	r4, [r5, #9]
   16e78:	add	r3, r5, #16
   16e7c:	cmp	r4, #0
   16e80:	bne	16dc4 <__assert_fail@plt+0x5a20>
   16e84:	cmp	ip, #0
   16e88:	strne	r9, [ip]
   16e8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16e90:	mov	r9, #0
   16e94:	cmp	ip, #0
   16e98:	strne	r9, [ip]
   16e9c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16ea0:	sub	sp, sp, #4
   16ea4:	push	{fp, lr}
   16ea8:	mov	fp, sp
   16eac:	sub	sp, sp, #4
   16eb0:	str	r3, [fp, #8]
   16eb4:	mov	r3, #0
   16eb8:	tst	r2, #64	; 0x40
   16ebc:	addne	r3, fp, #8
   16ec0:	addne	r3, r3, #4
   16ec4:	strne	r3, [sp]
   16ec8:	ldrne	r3, [fp, #8]
   16ecc:	bl	11248 <openat64@plt>
   16ed0:	bl	18f2c <__assert_fail@plt+0x7b88>
   16ed4:	mov	sp, fp
   16ed8:	pop	{fp, lr}
   16edc:	add	sp, sp, #4
   16ee0:	bx	lr
   16ee4:	push	{r4, r5, r6, sl, fp, lr}
   16ee8:	add	fp, sp, #16
   16eec:	orr	r2, r2, #18688	; 0x4900
   16ef0:	mov	r4, r3
   16ef4:	orr	r2, r2, #524288	; 0x80000
   16ef8:	bl	16ea0 <__assert_fail@plt+0x5afc>
   16efc:	mov	r5, r0
   16f00:	mov	r0, #0
   16f04:	cmp	r5, #0
   16f08:	poplt	{r4, r5, r6, sl, fp, pc}
   16f0c:	mov	r0, r5
   16f10:	bl	11308 <fdopendir@plt>
   16f14:	cmp	r0, #0
   16f18:	strne	r5, [r4]
   16f1c:	popne	{r4, r5, r6, sl, fp, pc}
   16f20:	bl	11260 <__errno_location@plt>
   16f24:	ldr	r6, [r0]
   16f28:	mov	r4, r0
   16f2c:	mov	r0, r5
   16f30:	bl	11380 <close@plt>
   16f34:	mov	r0, #0
   16f38:	str	r6, [r4]
   16f3c:	pop	{r4, r5, r6, sl, fp, pc}
   16f40:	push	{r4, r5, fp, lr}
   16f44:	add	fp, sp, #8
   16f48:	cmp	r0, #0
   16f4c:	beq	16fe0 <__assert_fail@plt+0x5c3c>
   16f50:	mov	r1, #47	; 0x2f
   16f54:	mov	r4, r0
   16f58:	bl	112e4 <strrchr@plt>
   16f5c:	cmp	r0, #0
   16f60:	mov	r5, r4
   16f64:	addne	r5, r0, #1
   16f68:	sub	r0, r5, r4
   16f6c:	cmp	r0, #7
   16f70:	blt	16fc4 <__assert_fail@plt+0x5c20>
   16f74:	movw	r1, #45500	; 0xb1bc
   16f78:	sub	r0, r5, #7
   16f7c:	mov	r2, #7
   16f80:	movt	r1, #1
   16f84:	bl	11368 <strncmp@plt>
   16f88:	cmp	r0, #0
   16f8c:	bne	16fc4 <__assert_fail@plt+0x5c20>
   16f90:	movw	r1, #45508	; 0xb1c4
   16f94:	mov	r0, r5
   16f98:	mov	r2, #3
   16f9c:	movt	r1, #1
   16fa0:	bl	11368 <strncmp@plt>
   16fa4:	cmp	r0, #0
   16fa8:	beq	16fb4 <__assert_fail@plt+0x5c10>
   16fac:	mov	r4, r5
   16fb0:	b	16fc4 <__assert_fail@plt+0x5c20>
   16fb4:	movw	r0, #49512	; 0xc168
   16fb8:	add	r4, r5, #3
   16fbc:	movt	r0, #2
   16fc0:	str	r4, [r0]
   16fc4:	movw	r0, #49516	; 0xc16c
   16fc8:	movt	r0, #2
   16fcc:	str	r4, [r0]
   16fd0:	movw	r0, #49584	; 0xc1b0
   16fd4:	movt	r0, #2
   16fd8:	str	r4, [r0]
   16fdc:	pop	{r4, r5, fp, pc}
   16fe0:	movw	r0, #49528	; 0xc178
   16fe4:	mov	r1, #55	; 0x37
   16fe8:	mov	r2, #1
   16fec:	movt	r0, #2
   16ff0:	ldr	r3, [r0]
   16ff4:	movw	r0, #45444	; 0xb184
   16ff8:	movt	r0, #1
   16ffc:	bl	11194 <fwrite@plt>
   17000:	bl	11374 <abort@plt>
   17004:	push	{r4, r5, r6, sl, fp, lr}
   17008:	add	fp, sp, #16
   1700c:	mov	r4, r0
   17010:	movw	r0, #49592	; 0xc1b8
   17014:	movt	r0, #2
   17018:	cmp	r4, #0
   1701c:	moveq	r4, r0
   17020:	bl	11260 <__errno_location@plt>
   17024:	ldr	r6, [r0]
   17028:	mov	r5, r0
   1702c:	mov	r0, r4
   17030:	mov	r1, #48	; 0x30
   17034:	bl	19a90 <__assert_fail@plt+0x86ec>
   17038:	str	r6, [r5]
   1703c:	pop	{r4, r5, r6, sl, fp, pc}
   17040:	movw	r1, #49592	; 0xc1b8
   17044:	cmp	r0, #0
   17048:	movt	r1, #2
   1704c:	movne	r1, r0
   17050:	ldr	r0, [r1]
   17054:	bx	lr
   17058:	movw	r2, #49592	; 0xc1b8
   1705c:	cmp	r0, #0
   17060:	movt	r2, #2
   17064:	movne	r2, r0
   17068:	str	r1, [r2]
   1706c:	bx	lr
   17070:	movw	r3, #49592	; 0xc1b8
   17074:	cmp	r0, #0
   17078:	movt	r3, #2
   1707c:	movne	r3, r0
   17080:	ubfx	r0, r1, #5, #3
   17084:	and	r1, r1, #31
   17088:	add	r0, r3, r0, lsl #2
   1708c:	ldr	r3, [r0, #8]
   17090:	eor	r2, r2, r3, lsr r1
   17094:	and	r2, r2, #1
   17098:	eor	r2, r3, r2, lsl r1
   1709c:	str	r2, [r0, #8]
   170a0:	mov	r0, #1
   170a4:	and	r0, r0, r3, lsr r1
   170a8:	bx	lr
   170ac:	movw	r2, #49592	; 0xc1b8
   170b0:	cmp	r0, #0
   170b4:	movt	r2, #2
   170b8:	movne	r2, r0
   170bc:	ldr	r0, [r2, #4]
   170c0:	str	r1, [r2, #4]
   170c4:	bx	lr
   170c8:	movw	r3, #49592	; 0xc1b8
   170cc:	cmp	r0, #0
   170d0:	movt	r3, #2
   170d4:	movne	r3, r0
   170d8:	cmp	r1, #0
   170dc:	mov	r0, #10
   170e0:	cmpne	r2, #0
   170e4:	str	r0, [r3]
   170e8:	bne	170f8 <__assert_fail@plt+0x5d54>
   170ec:	push	{fp, lr}
   170f0:	mov	fp, sp
   170f4:	bl	11374 <abort@plt>
   170f8:	str	r1, [r3, #40]	; 0x28
   170fc:	str	r2, [r3, #44]	; 0x2c
   17100:	bx	lr
   17104:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17108:	add	fp, sp, #28
   1710c:	sub	sp, sp, #20
   17110:	mov	r7, r0
   17114:	ldr	r0, [fp, #8]
   17118:	movw	r5, #49592	; 0xc1b8
   1711c:	mov	r8, r3
   17120:	mov	r9, r2
   17124:	mov	sl, r1
   17128:	movt	r5, #2
   1712c:	cmp	r0, #0
   17130:	movne	r5, r0
   17134:	bl	11260 <__errno_location@plt>
   17138:	mov	r4, r0
   1713c:	ldm	r5, {r0, r1}
   17140:	ldr	r2, [r5, #40]	; 0x28
   17144:	ldr	r3, [r5, #44]	; 0x2c
   17148:	add	r5, r5, #8
   1714c:	ldr	r6, [r4]
   17150:	stm	sp, {r0, r1, r5}
   17154:	str	r2, [sp, #12]
   17158:	str	r3, [sp, #16]
   1715c:	mov	r0, r7
   17160:	mov	r1, sl
   17164:	mov	r2, r9
   17168:	mov	r3, r8
   1716c:	bl	1717c <__assert_fail@plt+0x5dd8>
   17170:	str	r6, [r4]
   17174:	sub	sp, fp, #28
   17178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1717c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17180:	add	fp, sp, #28
   17184:	sub	sp, sp, #156	; 0x9c
   17188:	str	r0, [sp, #76]	; 0x4c
   1718c:	ldr	r0, [fp, #12]
   17190:	mov	r6, r1
   17194:	str	r3, [sp, #84]	; 0x54
   17198:	str	r2, [fp, #-84]	; 0xffffffac
   1719c:	and	r1, r0, #4
   171a0:	str	r1, [sp, #24]
   171a4:	and	r1, r0, #1
   171a8:	str	r1, [sp, #28]
   171ac:	ubfx	r8, r0, #1, #1
   171b0:	bl	111ac <__ctype_get_mb_cur_max@plt>
   171b4:	str	r0, [sp, #32]
   171b8:	ldr	r0, [fp, #24]
   171bc:	ldr	r7, [fp, #8]
   171c0:	mov	r1, #0
   171c4:	mov	r2, #0
   171c8:	mov	r4, #1
   171cc:	str	r1, [sp, #52]	; 0x34
   171d0:	str	r0, [sp, #72]	; 0x48
   171d4:	ldr	r0, [fp, #20]
   171d8:	str	r0, [sp, #68]	; 0x44
   171dc:	mov	r0, #0
   171e0:	str	r0, [sp, #48]	; 0x30
   171e4:	mov	r0, #0
   171e8:	str	r0, [sp, #92]	; 0x5c
   171ec:	mov	r0, #0
   171f0:	str	r0, [fp, #-76]	; 0xffffffb4
   171f4:	mov	r0, #0
   171f8:	cmp	r7, #10
   171fc:	bhi	184e4 <__assert_fail@plt+0x7140>
   17200:	add	r1, pc, #28
   17204:	mov	sl, r6
   17208:	ldr	r6, [sp, #76]	; 0x4c
   1720c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17210:	ldr	lr, [sp, #84]	; 0x54
   17214:	mov	r9, #0
   17218:	mov	r3, #1
   1721c:	mov	r5, #0
   17220:	ldr	pc, [r1, r7, lsl #2]
   17224:	strdeq	r7, [r1], -r4
   17228:	andeq	r7, r1, r0, lsr r3
   1722c:	andeq	r7, r1, r4, lsl #6
   17230:	andeq	r7, r1, ip, ror #5
   17234:	andeq	r7, r1, r4, lsr #6
   17238:	andeq	r7, r1, r8, asr r3
   1723c:	andeq	r7, r1, r4, lsl r3
   17240:	andeq	r7, r1, r4, ror #10
   17244:	andeq	r7, r1, r0, asr r2
   17248:	andeq	r7, r1, r0, asr r2
   1724c:	strdeq	r7, [r1], -r8
   17250:	mov	r9, r4
   17254:	movw	r4, #45590	; 0xb216
   17258:	mov	r5, r8
   1725c:	mov	r8, r2
   17260:	mov	r0, #0
   17264:	mov	r2, #5
   17268:	movt	r4, #1
   1726c:	mov	r1, r4
   17270:	bl	1114c <dcgettext@plt>
   17274:	cmp	r0, r4
   17278:	str	r0, [sp, #68]	; 0x44
   1727c:	bne	1740c <__assert_fail@plt+0x6068>
   17280:	bl	1a298 <__assert_fail@plt+0x8ef4>
   17284:	ldrb	r1, [r0]
   17288:	and	r1, r1, #223	; 0xdf
   1728c:	cmp	r1, #71	; 0x47
   17290:	beq	173d8 <__assert_fail@plt+0x6034>
   17294:	cmp	r1, #85	; 0x55
   17298:	bne	173f0 <__assert_fail@plt+0x604c>
   1729c:	ldrb	r1, [r0, #1]
   172a0:	and	r1, r1, #223	; 0xdf
   172a4:	cmp	r1, #84	; 0x54
   172a8:	bne	173f0 <__assert_fail@plt+0x604c>
   172ac:	ldrb	r1, [r0, #2]
   172b0:	and	r1, r1, #223	; 0xdf
   172b4:	cmp	r1, #70	; 0x46
   172b8:	bne	173f0 <__assert_fail@plt+0x604c>
   172bc:	ldrb	r1, [r0, #3]
   172c0:	cmp	r1, #45	; 0x2d
   172c4:	ldrbeq	r1, [r0, #4]
   172c8:	cmpeq	r1, #56	; 0x38
   172cc:	bne	173f0 <__assert_fail@plt+0x604c>
   172d0:	ldrb	r0, [r0, #5]
   172d4:	cmp	r0, #0
   172d8:	movw	r0, #45594	; 0xb21a
   172dc:	movt	r0, #1
   172e0:	str	r0, [sp, #68]	; 0x44
   172e4:	bne	173f0 <__assert_fail@plt+0x604c>
   172e8:	b	1740c <__assert_fail@plt+0x6068>
   172ec:	mov	r0, #1
   172f0:	b	17330 <__assert_fail@plt+0x5f8c>
   172f4:	mov	r7, #0
   172f8:	mov	r9, #0
   172fc:	mov	r3, r0
   17300:	b	173d0 <__assert_fail@plt+0x602c>
   17304:	tst	r8, #1
   17308:	bne	17330 <__assert_fail@plt+0x5f8c>
   1730c:	mov	r3, r0
   17310:	b	17388 <__assert_fail@plt+0x5fe4>
   17314:	mov	r0, #1
   17318:	mov	r9, #0
   1731c:	mov	r7, #5
   17320:	b	1736c <__assert_fail@plt+0x5fc8>
   17324:	mov	r3, #1
   17328:	tst	r8, #1
   1732c:	beq	17388 <__assert_fail@plt+0x5fe4>
   17330:	mov	r1, #1
   17334:	mov	r9, #0
   17338:	mov	r7, #2
   1733c:	mov	r3, r0
   17340:	mov	r5, #1
   17344:	str	r1, [fp, #-76]	; 0xffffffb4
   17348:	movw	r1, #45592	; 0xb218
   1734c:	movt	r1, #1
   17350:	str	r1, [sp, #92]	; 0x5c
   17354:	b	17564 <__assert_fail@plt+0x61c0>
   17358:	mov	r7, #5
   1735c:	tst	r8, #1
   17360:	beq	173a8 <__assert_fail@plt+0x6004>
   17364:	mov	r0, #1
   17368:	mov	r9, #0
   1736c:	str	r0, [fp, #-76]	; 0xffffffb4
   17370:	movw	r0, #45588	; 0xb214
   17374:	mov	r3, #1
   17378:	mov	r5, #1
   1737c:	movt	r0, #1
   17380:	str	r0, [sp, #92]	; 0x5c
   17384:	b	17564 <__assert_fail@plt+0x61c0>
   17388:	cmp	sl, #0
   1738c:	mov	r9, #1
   17390:	mov	r7, #2
   17394:	movne	r0, #39	; 0x27
   17398:	strbne	r0, [r6]
   1739c:	movw	r0, #45592	; 0xb218
   173a0:	movt	r0, #1
   173a4:	b	173c4 <__assert_fail@plt+0x6020>
   173a8:	cmp	sl, #0
   173ac:	mov	r9, #1
   173b0:	mov	r3, #1
   173b4:	movne	r0, #34	; 0x22
   173b8:	strbne	r0, [r6]
   173bc:	movw	r0, #45588	; 0xb214
   173c0:	movt	r0, #1
   173c4:	str	r0, [sp, #92]	; 0x5c
   173c8:	mov	r0, #1
   173cc:	str	r0, [fp, #-76]	; 0xffffffb4
   173d0:	mov	r5, #0
   173d4:	b	17564 <__assert_fail@plt+0x61c0>
   173d8:	ldrb	r1, [r0, #1]
   173dc:	and	r1, r1, #223	; 0xdf
   173e0:	cmp	r1, #66	; 0x42
   173e4:	ldrbeq	r1, [r0, #2]
   173e8:	cmpeq	r1, #49	; 0x31
   173ec:	beq	1830c <__assert_fail@plt+0x6f68>
   173f0:	movw	r0, #45592	; 0xb218
   173f4:	movw	r1, #45588	; 0xb214
   173f8:	cmp	r7, #9
   173fc:	movt	r0, #1
   17400:	movt	r1, #1
   17404:	moveq	r0, r1
   17408:	str	r0, [sp, #68]	; 0x44
   1740c:	movw	r4, #45592	; 0xb218
   17410:	mov	r0, #0
   17414:	mov	r2, #5
   17418:	movt	r4, #1
   1741c:	mov	r1, r4
   17420:	bl	1114c <dcgettext@plt>
   17424:	cmp	r0, r4
   17428:	str	r0, [sp, #72]	; 0x48
   1742c:	beq	1743c <__assert_fail@plt+0x6098>
   17430:	mov	r4, r9
   17434:	mov	r2, r8
   17438:	b	174f4 <__assert_fail@plt+0x6150>
   1743c:	bl	1a298 <__assert_fail@plt+0x8ef4>
   17440:	ldrb	r1, [r0]
   17444:	mov	r4, r9
   17448:	and	r1, r1, #223	; 0xdf
   1744c:	cmp	r1, #71	; 0x47
   17450:	beq	174ac <__assert_fail@plt+0x6108>
   17454:	cmp	r1, #85	; 0x55
   17458:	mov	r2, r8
   1745c:	bne	174d4 <__assert_fail@plt+0x6130>
   17460:	ldrb	r1, [r0, #1]
   17464:	and	r1, r1, #223	; 0xdf
   17468:	cmp	r1, #84	; 0x54
   1746c:	bne	174d4 <__assert_fail@plt+0x6130>
   17470:	ldrb	r1, [r0, #2]
   17474:	and	r1, r1, #223	; 0xdf
   17478:	cmp	r1, #70	; 0x46
   1747c:	ldrbeq	r1, [r0, #3]
   17480:	cmpeq	r1, #45	; 0x2d
   17484:	bne	174d4 <__assert_fail@plt+0x6130>
   17488:	ldrb	r1, [r0, #4]
   1748c:	cmp	r1, #56	; 0x38
   17490:	ldrbeq	r0, [r0, #5]
   17494:	cmpeq	r0, #0
   17498:	bne	174d4 <__assert_fail@plt+0x6130>
   1749c:	movw	r0, #45598	; 0xb21e
   174a0:	movt	r0, #1
   174a4:	str	r0, [sp, #72]	; 0x48
   174a8:	b	174f4 <__assert_fail@plt+0x6150>
   174ac:	ldrb	r1, [r0, #1]
   174b0:	mov	r2, r8
   174b4:	and	r1, r1, #223	; 0xdf
   174b8:	cmp	r1, #66	; 0x42
   174bc:	bne	174d4 <__assert_fail@plt+0x6130>
   174c0:	ldrb	r1, [r0, #2]
   174c4:	cmp	r1, #49	; 0x31
   174c8:	ldrbeq	r1, [r0, #3]
   174cc:	cmpeq	r1, #56	; 0x38
   174d0:	beq	18350 <__assert_fail@plt+0x6fac>
   174d4:	movw	r0, #45592	; 0xb218
   174d8:	cmp	r7, #9
   174dc:	movt	r0, #1
   174e0:	mov	r1, r0
   174e4:	movw	r0, #45588	; 0xb214
   174e8:	movt	r0, #1
   174ec:	moveq	r1, r0
   174f0:	str	r1, [sp, #72]	; 0x48
   174f4:	mov	r8, r5
   174f8:	mov	r9, #0
   174fc:	tst	r8, #1
   17500:	mov	r5, r8
   17504:	str	r2, [fp, #-48]	; 0xffffffd0
   17508:	bne	17540 <__assert_fail@plt+0x619c>
   1750c:	ldr	r0, [sp, #68]	; 0x44
   17510:	ldrb	r0, [r0]
   17514:	cmp	r0, #0
   17518:	beq	17540 <__assert_fail@plt+0x619c>
   1751c:	ldr	r1, [sp, #68]	; 0x44
   17520:	mov	r9, #0
   17524:	add	r1, r1, #1
   17528:	cmp	r9, sl
   1752c:	strbcc	r0, [r6, r9]
   17530:	ldrb	r0, [r1, r9]
   17534:	add	r9, r9, #1
   17538:	cmp	r0, #0
   1753c:	bne	17528 <__assert_fail@plt+0x6184>
   17540:	ldr	r8, [sp, #72]	; 0x48
   17544:	mov	r0, r8
   17548:	bl	1123c <strlen@plt>
   1754c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17550:	ldr	lr, [sp, #84]	; 0x54
   17554:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17558:	str	r0, [fp, #-76]	; 0xffffffb4
   1755c:	str	r8, [sp, #92]	; 0x5c
   17560:	mov	r3, #1
   17564:	ldr	r0, [fp, #16]
   17568:	str	r7, [fp, #-64]	; 0xffffffc0
   1756c:	str	r5, [fp, #-72]	; 0xffffffb8
   17570:	str	r3, [sp, #80]	; 0x50
   17574:	cmp	r0, #0
   17578:	movwne	r0, #1
   1757c:	and	r0, r0, r5
   17580:	str	r0, [fp, #-88]	; 0xffffffa8
   17584:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17588:	cmp	r0, #0
   1758c:	movwne	r0, #1
   17590:	subs	r7, r7, #2
   17594:	and	r1, r0, r5
   17598:	str	r7, [fp, #-80]	; 0xffffffb0
   1759c:	and	r1, r3, r1
   175a0:	str	r1, [sp, #40]	; 0x28
   175a4:	clz	r1, r7
   175a8:	lsr	r1, r1, #5
   175ac:	and	r1, r1, r5
   175b0:	eor	r5, r5, #1
   175b4:	str	r1, [sp, #36]	; 0x24
   175b8:	mov	r1, r7
   175bc:	str	r5, [sp, #88]	; 0x58
   175c0:	mov	r7, #0
   175c4:	movwne	r1, #1
   175c8:	orr	r5, r1, r5
   175cc:	and	r1, r1, r3
   175d0:	and	r0, r0, r1
   175d4:	str	r5, [sp, #60]	; 0x3c
   175d8:	str	r1, [fp, #-68]	; 0xffffffbc
   175dc:	str	r0, [fp, #-60]	; 0xffffffc4
   175e0:	eor	r0, r3, #1
   175e4:	str	r0, [sp, #44]	; 0x2c
   175e8:	cmn	lr, #1
   175ec:	beq	175fc <__assert_fail@plt+0x6258>
   175f0:	cmp	r7, lr
   175f4:	bne	17608 <__assert_fail@plt+0x6264>
   175f8:	b	18280 <__assert_fail@plt+0x6edc>
   175fc:	ldrb	r0, [ip, r7]
   17600:	cmp	r0, #0
   17604:	beq	18288 <__assert_fail@plt+0x6ee4>
   17608:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1760c:	mov	r8, #0
   17610:	str	r4, [fp, #-52]	; 0xffffffcc
   17614:	str	r2, [fp, #-48]	; 0xffffffd0
   17618:	cmp	r0, #0
   1761c:	beq	17650 <__assert_fail@plt+0x62ac>
   17620:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17624:	add	r4, r7, r0
   17628:	cmp	r0, #2
   1762c:	bcc	17648 <__assert_fail@plt+0x62a4>
   17630:	cmn	lr, #1
   17634:	bne	17648 <__assert_fail@plt+0x62a4>
   17638:	mov	r0, ip
   1763c:	bl	1123c <strlen@plt>
   17640:	ldr	ip, [fp, #-84]	; 0xffffffac
   17644:	mov	lr, r0
   17648:	cmp	r4, lr
   1764c:	bls	17668 <__assert_fail@plt+0x62c4>
   17650:	mov	r0, #0
   17654:	str	r0, [fp, #-56]	; 0xffffffc8
   17658:	ldrb	r5, [ip, r7]
   1765c:	cmp	r5, #126	; 0x7e
   17660:	bls	176b8 <__assert_fail@plt+0x6314>
   17664:	b	17ac0 <__assert_fail@plt+0x671c>
   17668:	ldr	r1, [sp, #92]	; 0x5c
   1766c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17670:	add	r0, ip, r7
   17674:	mov	r4, lr
   17678:	bl	11140 <memcmp@plt>
   1767c:	ldr	r2, [sp, #88]	; 0x58
   17680:	cmp	r0, #0
   17684:	mov	r1, r0
   17688:	movwne	r1, #1
   1768c:	orr	r1, r1, r2
   17690:	tst	r1, #1
   17694:	beq	18394 <__assert_fail@plt+0x6ff0>
   17698:	ldr	ip, [fp, #-84]	; 0xffffffac
   1769c:	clz	r0, r0
   176a0:	mov	lr, r4
   176a4:	lsr	r0, r0, #5
   176a8:	str	r0, [fp, #-56]	; 0xffffffc8
   176ac:	ldrb	r5, [ip, r7]
   176b0:	cmp	r5, #126	; 0x7e
   176b4:	bhi	17ac0 <__assert_fail@plt+0x671c>
   176b8:	add	r3, pc, #16
   176bc:	mov	r4, #1
   176c0:	mov	r2, #110	; 0x6e
   176c4:	mov	r0, #97	; 0x61
   176c8:	mov	r1, #0
   176cc:	ldr	pc, [r3, r5, lsl #2]
   176d0:	andeq	r7, r1, r0, lsr #19
   176d4:	andeq	r7, r1, r0, asr #21
   176d8:	andeq	r7, r1, r0, asr #21
   176dc:	andeq	r7, r1, r0, asr #21
   176e0:	andeq	r7, r1, r0, asr #21
   176e4:	andeq	r7, r1, r0, asr #21
   176e8:	andeq	r7, r1, r0, asr #21
   176ec:	muleq	r1, ip, fp
   176f0:	andeq	r7, r1, r0, lsl #19
   176f4:	andeq	r7, r1, r8, ror #18
   176f8:	andeq	r7, r1, ip, lsl #19
   176fc:	andeq	r7, r1, ip, lsl sl
   17700:	andeq	r7, r1, r0, ror #18
   17704:	andeq	r7, r1, r8, lsl #19
   17708:	andeq	r7, r1, r0, asr #21
   1770c:	andeq	r7, r1, r0, asr #21
   17710:	andeq	r7, r1, r0, asr #21
   17714:	andeq	r7, r1, r0, asr #21
   17718:	andeq	r7, r1, r0, asr #21
   1771c:	andeq	r7, r1, r0, asr #21
   17720:	andeq	r7, r1, r0, asr #21
   17724:	andeq	r7, r1, r0, asr #21
   17728:	andeq	r7, r1, r0, asr #21
   1772c:	andeq	r7, r1, r0, asr #21
   17730:	andeq	r7, r1, r0, asr #21
   17734:	andeq	r7, r1, r0, asr #21
   17738:	andeq	r7, r1, r0, asr #21
   1773c:	andeq	r7, r1, r0, asr #21
   17740:	andeq	r7, r1, r0, asr #21
   17744:	andeq	r7, r1, r0, asr #21
   17748:	andeq	r7, r1, r0, asr #21
   1774c:	andeq	r7, r1, r0, asr #21
   17750:	andeq	r7, r1, r8, lsl fp
   17754:	andeq	r7, r1, ip, lsl fp
   17758:	andeq	r7, r1, ip, lsl fp
   1775c:	andeq	r7, r1, ip, ror #17
   17760:	andeq	r7, r1, ip, lsl fp
   17764:	andeq	r7, r1, ip, asr #17
   17768:	andeq	r7, r1, ip, lsl fp
   1776c:	andeq	r7, r1, r4, lsr #20
   17770:	andeq	r7, r1, ip, lsl fp
   17774:	andeq	r7, r1, ip, lsl fp
   17778:	andeq	r7, r1, ip, lsl fp
   1777c:	andeq	r7, r1, ip, asr #17
   17780:	andeq	r7, r1, ip, asr #17
   17784:	andeq	r7, r1, ip, asr #17
   17788:	andeq	r7, r1, ip, asr #17
   1778c:	andeq	r7, r1, ip, asr #17
   17790:	andeq	r7, r1, ip, asr #17
   17794:	andeq	r7, r1, ip, asr #17
   17798:	andeq	r7, r1, ip, asr #17
   1779c:	andeq	r7, r1, ip, asr #17
   177a0:	andeq	r7, r1, ip, asr #17
   177a4:	andeq	r7, r1, ip, asr #17
   177a8:	andeq	r7, r1, ip, asr #17
   177ac:	andeq	r7, r1, ip, asr #17
   177b0:	andeq	r7, r1, ip, asr #17
   177b4:	andeq	r7, r1, ip, asr #17
   177b8:	andeq	r7, r1, ip, asr #17
   177bc:	andeq	r7, r1, ip, lsl fp
   177c0:	andeq	r7, r1, ip, lsl fp
   177c4:	andeq	r7, r1, ip, lsl fp
   177c8:	andeq	r7, r1, ip, lsl fp
   177cc:	andeq	r7, r1, r0, ror #19
   177d0:	andeq	r7, r1, r0, asr #21
   177d4:	andeq	r7, r1, ip, asr #17
   177d8:	andeq	r7, r1, ip, asr #17
   177dc:	andeq	r7, r1, ip, asr #17
   177e0:	andeq	r7, r1, ip, asr #17
   177e4:	andeq	r7, r1, ip, asr #17
   177e8:	andeq	r7, r1, ip, asr #17
   177ec:	andeq	r7, r1, ip, asr #17
   177f0:	andeq	r7, r1, ip, asr #17
   177f4:	andeq	r7, r1, ip, asr #17
   177f8:	andeq	r7, r1, ip, asr #17
   177fc:	andeq	r7, r1, ip, asr #17
   17800:	andeq	r7, r1, ip, asr #17
   17804:	andeq	r7, r1, ip, asr #17
   17808:	andeq	r7, r1, ip, asr #17
   1780c:	andeq	r7, r1, ip, asr #17
   17810:	andeq	r7, r1, ip, asr #17
   17814:	andeq	r7, r1, ip, asr #17
   17818:	andeq	r7, r1, ip, asr #17
   1781c:	andeq	r7, r1, ip, asr #17
   17820:	andeq	r7, r1, ip, asr #17
   17824:	andeq	r7, r1, ip, asr #17
   17828:	andeq	r7, r1, ip, asr #17
   1782c:	andeq	r7, r1, ip, asr #17
   17830:	andeq	r7, r1, ip, asr #17
   17834:	andeq	r7, r1, ip, asr #17
   17838:	andeq	r7, r1, ip, asr #17
   1783c:	andeq	r7, r1, ip, lsl fp
   17840:	andeq	r7, r1, ip, lsr #18
   17844:	andeq	r7, r1, ip, asr #17
   17848:	andeq	r7, r1, ip, lsl fp
   1784c:	andeq	r7, r1, ip, asr #17
   17850:	andeq	r7, r1, ip, lsl fp
   17854:	andeq	r7, r1, ip, asr #17
   17858:	andeq	r7, r1, ip, asr #17
   1785c:	andeq	r7, r1, ip, asr #17
   17860:	andeq	r7, r1, ip, asr #17
   17864:	andeq	r7, r1, ip, asr #17
   17868:	andeq	r7, r1, ip, asr #17
   1786c:	andeq	r7, r1, ip, asr #17
   17870:	andeq	r7, r1, ip, asr #17
   17874:	andeq	r7, r1, ip, asr #17
   17878:	andeq	r7, r1, ip, asr #17
   1787c:	andeq	r7, r1, ip, asr #17
   17880:	andeq	r7, r1, ip, asr #17
   17884:	andeq	r7, r1, ip, asr #17
   17888:	andeq	r7, r1, ip, asr #17
   1788c:	andeq	r7, r1, ip, asr #17
   17890:	andeq	r7, r1, ip, asr #17
   17894:	andeq	r7, r1, ip, asr #17
   17898:	andeq	r7, r1, ip, asr #17
   1789c:	andeq	r7, r1, ip, asr #17
   178a0:	andeq	r7, r1, ip, asr #17
   178a4:	andeq	r7, r1, ip, asr #17
   178a8:	andeq	r7, r1, ip, asr #17
   178ac:	andeq	r7, r1, ip, asr #17
   178b0:	andeq	r7, r1, ip, asr #17
   178b4:	andeq	r7, r1, ip, asr #17
   178b8:	andeq	r7, r1, ip, asr #17
   178bc:	andeq	r7, r1, ip, lsl #18
   178c0:	andeq	r7, r1, ip, lsl fp
   178c4:	andeq	r7, r1, ip, lsl #18
   178c8:	andeq	r7, r1, ip, ror #17
   178cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   178d0:	cmp	r0, #0
   178d4:	beq	17bb0 <__assert_fail@plt+0x680c>
   178d8:	ldr	r0, [fp, #16]
   178dc:	cmp	r0, #0
   178e0:	mov	r0, r5
   178e4:	bne	17bc0 <__assert_fail@plt+0x681c>
   178e8:	b	17be0 <__assert_fail@plt+0x683c>
   178ec:	mov	r4, #0
   178f0:	cmp	r7, #0
   178f4:	beq	17b18 <__assert_fail@plt+0x6774>
   178f8:	mov	r8, #0
   178fc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17900:	cmp	r0, #0
   17904:	bne	178d8 <__assert_fail@plt+0x6534>
   17908:	b	17bb0 <__assert_fail@plt+0x680c>
   1790c:	mov	r4, #0
   17910:	cmn	lr, #1
   17914:	beq	17af0 <__assert_fail@plt+0x674c>
   17918:	cmp	r7, #0
   1791c:	bne	178f8 <__assert_fail@plt+0x6554>
   17920:	cmp	lr, #1
   17924:	beq	17b18 <__assert_fail@plt+0x6774>
   17928:	b	178f8 <__assert_fail@plt+0x6554>
   1792c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17930:	cmp	r0, #2
   17934:	bne	17b48 <__assert_fail@plt+0x67a4>
   17938:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1793c:	tst	r0, #1
   17940:	bne	183a8 <__assert_fail@plt+0x7004>
   17944:	mov	r8, #0
   17948:	mov	r0, #92	; 0x5c
   1794c:	mov	r4, #0
   17950:	cmp	r8, #0
   17954:	beq	17b68 <__assert_fail@plt+0x67c4>
   17958:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1795c:	b	17c5c <__assert_fail@plt+0x68b8>
   17960:	mov	r0, #102	; 0x66
   17964:	b	17b9c <__assert_fail@plt+0x67f8>
   17968:	mov	r2, #116	; 0x74
   1796c:	ldr	r0, [sp, #60]	; 0x3c
   17970:	tst	r0, #1
   17974:	mov	r0, r2
   17978:	bne	17b9c <__assert_fail@plt+0x67f8>
   1797c:	b	183a8 <__assert_fail@plt+0x7004>
   17980:	mov	r0, #98	; 0x62
   17984:	b	17b9c <__assert_fail@plt+0x67f8>
   17988:	mov	r2, #114	; 0x72
   1798c:	ldr	r0, [sp, #60]	; 0x3c
   17990:	tst	r0, #1
   17994:	mov	r0, r2
   17998:	bne	17b9c <__assert_fail@plt+0x67f8>
   1799c:	b	183a8 <__assert_fail@plt+0x7004>
   179a0:	ldr	r0, [sp, #80]	; 0x50
   179a4:	tst	r0, #1
   179a8:	beq	17c84 <__assert_fail@plt+0x68e0>
   179ac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   179b0:	tst	r0, #1
   179b4:	bne	184d0 <__assert_fail@plt+0x712c>
   179b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   179bc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   179c0:	cmp	r0, #2
   179c4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   179c8:	movwne	r0, #1
   179cc:	orr	r0, r0, r2
   179d0:	tst	r0, #1
   179d4:	beq	17f7c <__assert_fail@plt+0x6bd8>
   179d8:	mov	r0, r9
   179dc:	b	17fb0 <__assert_fail@plt+0x6c0c>
   179e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   179e4:	mov	r8, #0
   179e8:	mov	r5, #63	; 0x3f
   179ec:	cmp	r0, #5
   179f0:	beq	17e38 <__assert_fail@plt+0x6a94>
   179f4:	cmp	r0, #2
   179f8:	bne	17ee8 <__assert_fail@plt+0x6b44>
   179fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17a00:	tst	r0, #1
   17a04:	bne	183a8 <__assert_fail@plt+0x7004>
   17a08:	mov	r4, #0
   17a0c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17a10:	cmp	r0, #0
   17a14:	bne	178d8 <__assert_fail@plt+0x6534>
   17a18:	b	17bb0 <__assert_fail@plt+0x680c>
   17a1c:	mov	r0, #118	; 0x76
   17a20:	b	17b9c <__assert_fail@plt+0x67f8>
   17a24:	mov	r0, #1
   17a28:	mov	r5, #39	; 0x27
   17a2c:	str	r0, [sp, #52]	; 0x34
   17a30:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17a34:	cmp	r0, #2
   17a38:	bne	17aac <__assert_fail@plt+0x6708>
   17a3c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17a40:	tst	r0, #1
   17a44:	bne	183a8 <__assert_fail@plt+0x7004>
   17a48:	ldr	r2, [sp, #48]	; 0x30
   17a4c:	clz	r1, sl
   17a50:	mov	r8, #0
   17a54:	lsr	r1, r1, #5
   17a58:	cmp	r2, #0
   17a5c:	mov	r0, r2
   17a60:	movwne	r0, #1
   17a64:	orrs	r0, r0, r1
   17a68:	moveq	r2, sl
   17a6c:	moveq	sl, r0
   17a70:	cmp	r9, sl
   17a74:	str	r2, [sp, #48]	; 0x30
   17a78:	movcc	r0, #39	; 0x27
   17a7c:	strbcc	r0, [r6, r9]
   17a80:	add	r0, r9, #1
   17a84:	cmp	r0, sl
   17a88:	movcc	r1, #92	; 0x5c
   17a8c:	strbcc	r1, [r6, r0]
   17a90:	add	r0, r9, #2
   17a94:	add	r9, r9, #3
   17a98:	cmp	r0, sl
   17a9c:	movcc	r1, #39	; 0x27
   17aa0:	strbcc	r1, [r6, r0]
   17aa4:	mov	r0, #0
   17aa8:	str	r0, [fp, #-48]	; 0xffffffd0
   17aac:	mov	r4, #1
   17ab0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17ab4:	cmp	r0, #0
   17ab8:	bne	178d8 <__assert_fail@plt+0x6534>
   17abc:	b	17bb0 <__assert_fail@plt+0x680c>
   17ac0:	ldr	r0, [sp, #32]
   17ac4:	cmp	r0, #1
   17ac8:	bne	17cb4 <__assert_fail@plt+0x6910>
   17acc:	str	lr, [sp, #84]	; 0x54
   17ad0:	bl	11224 <__ctype_b_loc@plt>
   17ad4:	ldr	r0, [r0]
   17ad8:	ldr	ip, [fp, #-84]	; 0xffffffac
   17adc:	mov	r1, #1
   17ae0:	add	r0, r0, r5, lsl #1
   17ae4:	ldrb	r0, [r0, #1]
   17ae8:	ubfx	r4, r0, #6, #1
   17aec:	b	180ac <__assert_fail@plt+0x6d08>
   17af0:	cmp	r7, #0
   17af4:	ldrbeq	r0, [ip, #1]
   17af8:	cmpeq	r0, #0
   17afc:	beq	17b18 <__assert_fail@plt+0x6774>
   17b00:	mvn	lr, #0
   17b04:	mov	r8, #0
   17b08:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17b0c:	cmp	r0, #0
   17b10:	bne	178d8 <__assert_fail@plt+0x6534>
   17b14:	b	17bb0 <__assert_fail@plt+0x680c>
   17b18:	mov	r1, #1
   17b1c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17b20:	cmp	r0, #2
   17b24:	bne	17b34 <__assert_fail@plt+0x6790>
   17b28:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17b2c:	tst	r0, #1
   17b30:	bne	183a8 <__assert_fail@plt+0x7004>
   17b34:	mov	r4, r1
   17b38:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17b3c:	cmp	r0, #0
   17b40:	bne	178d8 <__assert_fail@plt+0x6534>
   17b44:	b	17bb0 <__assert_fail@plt+0x680c>
   17b48:	ldr	r1, [sp, #40]	; 0x28
   17b4c:	mov	r8, #0
   17b50:	mov	r0, #92	; 0x5c
   17b54:	cmp	r1, #0
   17b58:	beq	17b9c <__assert_fail@plt+0x67f8>
   17b5c:	mov	r4, #0
   17b60:	cmp	r8, #0
   17b64:	bne	17958 <__assert_fail@plt+0x65b4>
   17b68:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17b6c:	tst	r2, #1
   17b70:	beq	17c5c <__assert_fail@plt+0x68b8>
   17b74:	cmp	r9, sl
   17b78:	movcc	r1, #39	; 0x27
   17b7c:	strbcc	r1, [r6, r9]
   17b80:	add	r1, r9, #1
   17b84:	add	r9, r9, #2
   17b88:	cmp	r1, sl
   17b8c:	movcc	r2, #39	; 0x27
   17b90:	strbcc	r2, [r6, r1]
   17b94:	mov	r2, #0
   17b98:	b	17c5c <__assert_fail@plt+0x68b8>
   17b9c:	ldr	r1, [sp, #80]	; 0x50
   17ba0:	mov	r4, #0
   17ba4:	mov	r8, #0
   17ba8:	tst	r1, #1
   17bac:	bne	17bec <__assert_fail@plt+0x6848>
   17bb0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   17bb4:	cmp	r0, #0
   17bb8:	mov	r0, r5
   17bbc:	beq	17be0 <__assert_fail@plt+0x683c>
   17bc0:	ldr	r1, [fp, #16]
   17bc4:	ubfx	r0, r5, #5, #3
   17bc8:	mov	r2, #1
   17bcc:	ldr	r0, [r1, r0, lsl #2]
   17bd0:	and	r1, r5, #31
   17bd4:	tst	r0, r2, lsl r1
   17bd8:	mov	r0, r5
   17bdc:	bne	17bec <__assert_fail@plt+0x6848>
   17be0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17be4:	cmp	r1, #0
   17be8:	beq	18044 <__assert_fail@plt+0x6ca0>
   17bec:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17bf0:	tst	r1, #1
   17bf4:	bne	18388 <__assert_fail@plt+0x6fe4>
   17bf8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17bfc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17c00:	cmp	r1, #2
   17c04:	ldr	r1, [fp, #-80]	; 0xffffffb0
   17c08:	movwne	r1, #1
   17c0c:	orr	r1, r1, r2
   17c10:	tst	r1, #1
   17c14:	bne	17c4c <__assert_fail@plt+0x68a8>
   17c18:	cmp	r9, sl
   17c1c:	movcc	r1, #39	; 0x27
   17c20:	strbcc	r1, [r6, r9]
   17c24:	add	r1, r9, #1
   17c28:	cmp	r1, sl
   17c2c:	movcc	r2, #36	; 0x24
   17c30:	strbcc	r2, [r6, r1]
   17c34:	add	r1, r9, #2
   17c38:	add	r9, r9, #3
   17c3c:	cmp	r1, sl
   17c40:	movcc	r2, #39	; 0x27
   17c44:	strbcc	r2, [r6, r1]
   17c48:	mov	r2, #1
   17c4c:	cmp	r9, sl
   17c50:	movcc	r1, #92	; 0x5c
   17c54:	strbcc	r1, [r6, r9]
   17c58:	add	r9, r9, #1
   17c5c:	cmp	r9, sl
   17c60:	add	r7, r7, #1
   17c64:	strbcc	r0, [r6, r9]
   17c68:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17c6c:	add	r9, r9, #1
   17c70:	and	r0, r0, r4
   17c74:	mov	r4, r0
   17c78:	cmn	lr, #1
   17c7c:	bne	175f0 <__assert_fail@plt+0x624c>
   17c80:	b	175fc <__assert_fail@plt+0x6258>
   17c84:	ldr	r0, [sp, #28]
   17c88:	mov	r4, #0
   17c8c:	mov	r8, #0
   17c90:	mov	r5, #0
   17c94:	cmp	r0, #0
   17c98:	beq	17bb0 <__assert_fail@plt+0x680c>
   17c9c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   17ca0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17ca4:	add	r7, r7, #1
   17ca8:	cmn	lr, #1
   17cac:	bne	175f0 <__assert_fail@plt+0x624c>
   17cb0:	b	175fc <__assert_fail@plt+0x6258>
   17cb4:	mov	r0, #0
   17cb8:	cmn	lr, #1
   17cbc:	str	r0, [fp, #-36]	; 0xffffffdc
   17cc0:	str	r0, [fp, #-40]	; 0xffffffd8
   17cc4:	bne	17cd8 <__assert_fail@plt+0x6934>
   17cc8:	mov	r0, ip
   17ccc:	bl	1123c <strlen@plt>
   17cd0:	ldr	ip, [fp, #-84]	; 0xffffffac
   17cd4:	mov	lr, r0
   17cd8:	ldr	r0, [sp, #36]	; 0x24
   17cdc:	str	sl, [sp, #56]	; 0x38
   17ce0:	str	lr, [sp, #84]	; 0x54
   17ce4:	cmp	r0, #0
   17ce8:	beq	17f00 <__assert_fail@plt+0x6b5c>
   17cec:	add	r0, ip, r7
   17cf0:	mov	r4, #1
   17cf4:	mov	r6, #0
   17cf8:	sub	sl, fp, #40	; 0x28
   17cfc:	str	r0, [sp, #20]
   17d00:	str	r6, [sp, #64]	; 0x40
   17d04:	add	r6, r6, r7
   17d08:	sub	r0, fp, #44	; 0x2c
   17d0c:	mov	r3, sl
   17d10:	add	r1, ip, r6
   17d14:	sub	r2, lr, r6
   17d18:	bl	1a2d0 <__assert_fail@plt+0x8f2c>
   17d1c:	cmn	r0, #2
   17d20:	beq	1805c <__assert_fail@plt+0x6cb8>
   17d24:	ldr	sl, [sp, #56]	; 0x38
   17d28:	cmn	r0, #1
   17d2c:	beq	18050 <__assert_fail@plt+0x6cac>
   17d30:	cmp	r0, #0
   17d34:	beq	18054 <__assert_fail@plt+0x6cb0>
   17d38:	cmp	r0, #2
   17d3c:	bcc	17dfc <__assert_fail@plt+0x6a58>
   17d40:	ldr	r1, [sp, #64]	; 0x40
   17d44:	ldr	r2, [sp, #20]
   17d48:	add	r1, r2, r1
   17d4c:	mov	r2, #1
   17d50:	ldrb	r3, [r1, r2]
   17d54:	sub	r3, r3, #91	; 0x5b
   17d58:	cmp	r3, #33	; 0x21
   17d5c:	bhi	17df0 <__assert_fail@plt+0x6a4c>
   17d60:	add	r6, pc, #0
   17d64:	ldr	pc, [r6, r3, lsl #2]
   17d68:			; <UNDEFINED> instruction: 0x000183b4
   17d6c:			; <UNDEFINED> instruction: 0x000183b4
   17d70:	strdeq	r7, [r1], -r0
   17d74:			; <UNDEFINED> instruction: 0x000183b4
   17d78:	strdeq	r7, [r1], -r0
   17d7c:			; <UNDEFINED> instruction: 0x000183b4
   17d80:	strdeq	r7, [r1], -r0
   17d84:	strdeq	r7, [r1], -r0
   17d88:	strdeq	r7, [r1], -r0
   17d8c:	strdeq	r7, [r1], -r0
   17d90:	strdeq	r7, [r1], -r0
   17d94:	strdeq	r7, [r1], -r0
   17d98:	strdeq	r7, [r1], -r0
   17d9c:	strdeq	r7, [r1], -r0
   17da0:	strdeq	r7, [r1], -r0
   17da4:	strdeq	r7, [r1], -r0
   17da8:	strdeq	r7, [r1], -r0
   17dac:	strdeq	r7, [r1], -r0
   17db0:	strdeq	r7, [r1], -r0
   17db4:	strdeq	r7, [r1], -r0
   17db8:	strdeq	r7, [r1], -r0
   17dbc:	strdeq	r7, [r1], -r0
   17dc0:	strdeq	r7, [r1], -r0
   17dc4:	strdeq	r7, [r1], -r0
   17dc8:	strdeq	r7, [r1], -r0
   17dcc:	strdeq	r7, [r1], -r0
   17dd0:	strdeq	r7, [r1], -r0
   17dd4:	strdeq	r7, [r1], -r0
   17dd8:	strdeq	r7, [r1], -r0
   17ddc:	strdeq	r7, [r1], -r0
   17de0:	strdeq	r7, [r1], -r0
   17de4:	strdeq	r7, [r1], -r0
   17de8:	strdeq	r7, [r1], -r0
   17dec:			; <UNDEFINED> instruction: 0x000183b4
   17df0:	add	r2, r2, #1
   17df4:	cmp	r2, r0
   17df8:	bcc	17d50 <__assert_fail@plt+0x69ac>
   17dfc:	ldr	r6, [sp, #64]	; 0x40
   17e00:	add	r6, r0, r6
   17e04:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17e08:	bl	1117c <iswprint@plt>
   17e0c:	cmp	r0, #0
   17e10:	sub	sl, fp, #40	; 0x28
   17e14:	movwne	r0, #1
   17e18:	and	r4, r4, r0
   17e1c:	mov	r0, sl
   17e20:	bl	11134 <mbsinit@plt>
   17e24:	ldr	ip, [fp, #-84]	; 0xffffffac
   17e28:	ldr	lr, [sp, #84]	; 0x54
   17e2c:	cmp	r0, #0
   17e30:	beq	17d00 <__assert_fail@plt+0x695c>
   17e34:	b	180a0 <__assert_fail@plt+0x6cfc>
   17e38:	ldr	r0, [sp, #24]
   17e3c:	cmp	r0, #0
   17e40:	beq	17ee8 <__assert_fail@plt+0x6b44>
   17e44:	add	r0, r7, #2
   17e48:	cmp	r0, lr
   17e4c:	bcs	17ee8 <__assert_fail@plt+0x6b44>
   17e50:	add	r1, ip, r7
   17e54:	ldrb	r1, [r1, #1]
   17e58:	cmp	r1, #63	; 0x3f
   17e5c:	bne	17ee8 <__assert_fail@plt+0x6b44>
   17e60:	ldrb	r5, [ip, r0]
   17e64:	sub	r1, r5, #33	; 0x21
   17e68:	cmp	r1, #29
   17e6c:	bhi	17ee8 <__assert_fail@plt+0x6b44>
   17e70:	movw	r3, #20929	; 0x51c1
   17e74:	mov	r2, #1
   17e78:	movt	r3, #14336	; 0x3800
   17e7c:	tst	r3, r2, lsl r1
   17e80:	beq	17ee8 <__assert_fail@plt+0x6b44>
   17e84:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17e88:	tst	r1, #1
   17e8c:	bne	184d8 <__assert_fail@plt+0x7134>
   17e90:	cmp	r9, sl
   17e94:	mov	r7, r0
   17e98:	mov	r4, #0
   17e9c:	movcc	r1, #63	; 0x3f
   17ea0:	strbcc	r1, [r6, r9]
   17ea4:	add	r1, r9, #1
   17ea8:	cmp	r1, sl
   17eac:	movcc	r2, #34	; 0x22
   17eb0:	strbcc	r2, [r6, r1]
   17eb4:	add	r1, r9, #2
   17eb8:	cmp	r1, sl
   17ebc:	movcc	r2, #34	; 0x22
   17ec0:	strbcc	r2, [r6, r1]
   17ec4:	add	r1, r9, #3
   17ec8:	add	r9, r9, #4
   17ecc:	cmp	r1, sl
   17ed0:	movcc	r2, #63	; 0x3f
   17ed4:	strbcc	r2, [r6, r1]
   17ed8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17edc:	cmp	r0, #0
   17ee0:	bne	178d8 <__assert_fail@plt+0x6534>
   17ee4:	b	17bb0 <__assert_fail@plt+0x680c>
   17ee8:	mov	r5, #63	; 0x3f
   17eec:	mov	r4, #0
   17ef0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17ef4:	cmp	r0, #0
   17ef8:	bne	178d8 <__assert_fail@plt+0x6534>
   17efc:	b	17bb0 <__assert_fail@plt+0x680c>
   17f00:	mov	r4, #1
   17f04:	mov	r6, #0
   17f08:	sub	sl, fp, #40	; 0x28
   17f0c:	str	r6, [sp, #64]	; 0x40
   17f10:	add	r6, r6, r7
   17f14:	sub	r0, fp, #44	; 0x2c
   17f18:	mov	r3, sl
   17f1c:	add	r1, ip, r6
   17f20:	sub	r2, lr, r6
   17f24:	bl	1a2d0 <__assert_fail@plt+0x8f2c>
   17f28:	cmn	r0, #2
   17f2c:	beq	1805c <__assert_fail@plt+0x6cb8>
   17f30:	cmn	r0, #1
   17f34:	beq	18050 <__assert_fail@plt+0x6cac>
   17f38:	ldr	r6, [sp, #64]	; 0x40
   17f3c:	cmp	r0, #0
   17f40:	beq	1809c <__assert_fail@plt+0x6cf8>
   17f44:	add	r6, r0, r6
   17f48:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17f4c:	bl	1117c <iswprint@plt>
   17f50:	cmp	r0, #0
   17f54:	sub	sl, fp, #40	; 0x28
   17f58:	movwne	r0, #1
   17f5c:	and	r4, r4, r0
   17f60:	mov	r0, sl
   17f64:	bl	11134 <mbsinit@plt>
   17f68:	ldr	ip, [fp, #-84]	; 0xffffffac
   17f6c:	ldr	lr, [sp, #84]	; 0x54
   17f70:	cmp	r0, #0
   17f74:	beq	17f0c <__assert_fail@plt+0x6b68>
   17f78:	b	180a0 <__assert_fail@plt+0x6cfc>
   17f7c:	cmp	r9, sl
   17f80:	mov	r2, #1
   17f84:	movcc	r0, #39	; 0x27
   17f88:	strbcc	r0, [r6, r9]
   17f8c:	add	r0, r9, #1
   17f90:	cmp	r0, sl
   17f94:	movcc	r1, #36	; 0x24
   17f98:	strbcc	r1, [r6, r0]
   17f9c:	add	r0, r9, #2
   17fa0:	cmp	r0, sl
   17fa4:	movcc	r1, #39	; 0x27
   17fa8:	strbcc	r1, [r6, r0]
   17fac:	add	r0, r9, #3
   17fb0:	cmp	r0, sl
   17fb4:	add	r9, r0, #1
   17fb8:	str	r2, [fp, #-48]	; 0xffffffd0
   17fbc:	movcc	r1, #92	; 0x5c
   17fc0:	strbcc	r1, [r6, r0]
   17fc4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17fc8:	cmp	r1, #2
   17fcc:	beq	1802c <__assert_fail@plt+0x6c88>
   17fd0:	add	r1, r7, #1
   17fd4:	mov	r4, #0
   17fd8:	mov	r8, #1
   17fdc:	mov	r5, #48	; 0x30
   17fe0:	cmp	r1, lr
   17fe4:	bcs	178cc <__assert_fail@plt+0x6528>
   17fe8:	ldrb	r1, [ip, r1]
   17fec:	sub	r1, r1, #48	; 0x30
   17ff0:	uxtb	r1, r1
   17ff4:	cmp	r1, #9
   17ff8:	bhi	178cc <__assert_fail@plt+0x6528>
   17ffc:	cmp	r9, sl
   18000:	movcc	r1, #48	; 0x30
   18004:	strbcc	r1, [r6, r9]
   18008:	add	r1, r0, #2
   1800c:	add	r9, r0, #3
   18010:	cmp	r1, sl
   18014:	movcc	r2, #48	; 0x30
   18018:	strbcc	r2, [r6, r1]
   1801c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18020:	cmp	r0, #0
   18024:	bne	178d8 <__assert_fail@plt+0x6534>
   18028:	b	17bb0 <__assert_fail@plt+0x680c>
   1802c:	mov	r0, #48	; 0x30
   18030:	mov	r8, #1
   18034:	mov	r4, #0
   18038:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1803c:	cmp	r1, #0
   18040:	bne	17bec <__assert_fail@plt+0x6848>
   18044:	cmp	r8, #0
   18048:	beq	17b68 <__assert_fail@plt+0x67c4>
   1804c:	b	17958 <__assert_fail@plt+0x65b4>
   18050:	mov	r4, #0
   18054:	ldr	ip, [fp, #-84]	; 0xffffffac
   18058:	b	18094 <__assert_fail@plt+0x6cf0>
   1805c:	ldr	r1, [sp, #84]	; 0x54
   18060:	ldr	ip, [fp, #-84]	; 0xffffffac
   18064:	mov	r4, #0
   18068:	cmp	r6, r1
   1806c:	bcs	18094 <__assert_fail@plt+0x6cf0>
   18070:	ldrb	r0, [ip, r6]
   18074:	cmp	r0, #0
   18078:	beq	18094 <__assert_fail@plt+0x6cf0>
   1807c:	ldr	r0, [sp, #64]	; 0x40
   18080:	add	r0, r0, #1
   18084:	add	r6, r0, r7
   18088:	str	r0, [sp, #64]	; 0x40
   1808c:	cmp	r6, r1
   18090:	bcc	18070 <__assert_fail@plt+0x6ccc>
   18094:	ldr	r6, [sp, #64]	; 0x40
   18098:	b	180a0 <__assert_fail@plt+0x6cfc>
   1809c:	ldr	ip, [fp, #-84]	; 0xffffffac
   180a0:	mov	r1, r6
   180a4:	ldr	r6, [sp, #76]	; 0x4c
   180a8:	ldr	sl, [sp, #56]	; 0x38
   180ac:	ldr	r0, [sp, #44]	; 0x2c
   180b0:	cmp	r1, #1
   180b4:	orr	r2, r4, r0
   180b8:	mov	r0, r1
   180bc:	bhi	180dc <__assert_fail@plt+0x6d38>
   180c0:	tst	r2, #1
   180c4:	beq	180dc <__assert_fail@plt+0x6d38>
   180c8:	ldr	lr, [sp, #84]	; 0x54
   180cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   180d0:	cmp	r0, #0
   180d4:	bne	178d8 <__assert_fail@plt+0x6534>
   180d8:	b	17bb0 <__assert_fail@plt+0x680c>
   180dc:	str	r2, [sp, #64]	; 0x40
   180e0:	add	r0, r0, r7
   180e4:	add	r1, r7, #1
   180e8:	ldr	lr, [sp, #84]	; 0x54
   180ec:	ldr	r7, [fp, #-64]	; 0xffffffc0
   180f0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   180f4:	mov	r3, #0
   180f8:	str	r0, [sp, #56]	; 0x38
   180fc:	ldr	r0, [sp, #64]	; 0x40
   18100:	tst	r0, #1
   18104:	bne	181ec <__assert_fail@plt+0x6e48>
   18108:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1810c:	tst	r0, #1
   18110:	bne	1838c <__assert_fail@plt+0x6fe8>
   18114:	ldr	r3, [fp, #-80]	; 0xffffffb0
   18118:	cmp	r7, #2
   1811c:	movwne	r3, #1
   18120:	orr	r3, r3, r2
   18124:	tst	r3, #1
   18128:	bne	18160 <__assert_fail@plt+0x6dbc>
   1812c:	cmp	r9, sl
   18130:	add	r3, r9, #1
   18134:	movcc	r2, #39	; 0x27
   18138:	strbcc	r2, [r6, r9]
   1813c:	cmp	r3, sl
   18140:	movcc	r2, #36	; 0x24
   18144:	strbcc	r2, [r6, r3]
   18148:	add	r3, r9, #2
   1814c:	add	r9, r9, #3
   18150:	cmp	r3, sl
   18154:	movcc	r2, #39	; 0x27
   18158:	strbcc	r2, [r6, r3]
   1815c:	mov	r2, #1
   18160:	cmp	r9, sl
   18164:	mov	r0, r2
   18168:	movcc	r3, #92	; 0x5c
   1816c:	strbcc	r3, [r6, r9]
   18170:	add	r3, r9, #1
   18174:	cmp	r3, sl
   18178:	andcc	r7, r5, #192	; 0xc0
   1817c:	movcc	r2, #48	; 0x30
   18180:	orrcc	r7, r2, r7, lsr #6
   18184:	strbcc	r7, [r6, r3]
   18188:	add	r3, r9, #2
   1818c:	add	r9, r9, #3
   18190:	cmp	r3, sl
   18194:	lsrcc	r7, r5, #3
   18198:	movcc	r2, #6
   1819c:	bficc	r7, r2, #3, #29
   181a0:	mov	r2, #6
   181a4:	strbcc	r7, [r6, r3]
   181a8:	bfi	r5, r2, #3, #29
   181ac:	mov	r3, #1
   181b0:	mov	r2, r0
   181b4:	ldr	r0, [sp, #56]	; 0x38
   181b8:	and	r8, r3, #1
   181bc:	cmp	r0, r1
   181c0:	bhi	18220 <__assert_fail@plt+0x6e7c>
   181c4:	b	18260 <__assert_fail@plt+0x6ebc>
   181c8:	cmp	r9, sl
   181cc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   181d0:	strbcc	r5, [r6, r9]
   181d4:	add	r9, r9, #1
   181d8:	ldrb	r5, [ip, r1]
   181dc:	add	r1, r1, #1
   181e0:	ldr	r0, [sp, #64]	; 0x40
   181e4:	tst	r0, #1
   181e8:	beq	18108 <__assert_fail@plt+0x6d64>
   181ec:	ldr	r7, [fp, #-56]	; 0xffffffc8
   181f0:	tst	r7, #1
   181f4:	beq	18208 <__assert_fail@plt+0x6e64>
   181f8:	cmp	r9, sl
   181fc:	movcc	r7, #92	; 0x5c
   18200:	strbcc	r7, [r6, r9]
   18204:	add	r9, r9, #1
   18208:	mov	r7, #0
   1820c:	str	r7, [fp, #-56]	; 0xffffffc8
   18210:	ldr	r0, [sp, #56]	; 0x38
   18214:	and	r8, r3, #1
   18218:	cmp	r0, r1
   1821c:	bls	18260 <__assert_fail@plt+0x6ebc>
   18220:	cmp	r8, #0
   18224:	mvn	r7, r2
   18228:	movwne	r8, #1
   1822c:	orr	r7, r7, r8
   18230:	tst	r7, #1
   18234:	bne	181c8 <__assert_fail@plt+0x6e24>
   18238:	cmp	r9, sl
   1823c:	movcc	r7, #39	; 0x27
   18240:	strbcc	r7, [r6, r9]
   18244:	add	r7, r9, #1
   18248:	add	r9, r9, #2
   1824c:	cmp	r7, sl
   18250:	movcc	r2, #39	; 0x27
   18254:	strbcc	r2, [r6, r7]
   18258:	mov	r2, #0
   1825c:	b	181c8 <__assert_fail@plt+0x6e24>
   18260:	cmp	r8, #0
   18264:	sub	r7, r1, #1
   18268:	mov	r0, r5
   1826c:	str	r2, [fp, #-48]	; 0xffffffd0
   18270:	movwne	r8, #1
   18274:	cmp	r8, #0
   18278:	beq	17b68 <__assert_fail@plt+0x67c4>
   1827c:	b	17958 <__assert_fail@plt+0x65b4>
   18280:	mov	lr, r7
   18284:	b	1828c <__assert_fail@plt+0x6ee8>
   18288:	mvn	lr, #0
   1828c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18290:	ldr	r1, [fp, #-72]	; 0xffffffb8
   18294:	eor	r0, r7, #2
   18298:	orr	r0, r0, r9
   1829c:	clz	r0, r0
   182a0:	lsr	r0, r0, #5
   182a4:	tst	r1, r0
   182a8:	bne	183a8 <__assert_fail@plt+0x7004>
   182ac:	mov	r0, r1
   182b0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   182b4:	cmp	r7, #2
   182b8:	movwne	r1, #1
   182bc:	orr	r0, r0, r1
   182c0:	tst	r0, #1
   182c4:	ldreq	r0, [sp, #52]	; 0x34
   182c8:	streq	lr, [sp, #84]	; 0x54
   182cc:	eoreq	r0, r0, #1
   182d0:	tsteq	r0, #1
   182d4:	bne	1846c <__assert_fail@plt+0x70c8>
   182d8:	tst	r4, #1
   182dc:	bne	18428 <__assert_fail@plt+0x7084>
   182e0:	ldr	r6, [sp, #48]	; 0x30
   182e4:	mov	r8, #0
   182e8:	cmp	r6, #0
   182ec:	beq	18464 <__assert_fail@plt+0x70c0>
   182f0:	ldr	r0, [sp, #80]	; 0x50
   182f4:	mov	r1, #0
   182f8:	cmp	sl, #0
   182fc:	mov	r4, #0
   18300:	str	r1, [fp, #-72]	; 0xffffffb8
   18304:	beq	171f8 <__assert_fail@plt+0x5e54>
   18308:	b	1846c <__assert_fail@plt+0x70c8>
   1830c:	ldrb	r1, [r0, #3]
   18310:	cmp	r1, #56	; 0x38
   18314:	ldrbeq	r1, [r0, #4]
   18318:	cmpeq	r1, #48	; 0x30
   1831c:	bne	173f0 <__assert_fail@plt+0x604c>
   18320:	ldrb	r1, [r0, #5]
   18324:	cmp	r1, #51	; 0x33
   18328:	ldrbeq	r1, [r0, #6]
   1832c:	cmpeq	r1, #48	; 0x30
   18330:	bne	173f0 <__assert_fail@plt+0x604c>
   18334:	ldrb	r0, [r0, #7]
   18338:	cmp	r0, #0
   1833c:	movw	r0, #45602	; 0xb222
   18340:	movt	r0, #1
   18344:	str	r0, [sp, #68]	; 0x44
   18348:	bne	173f0 <__assert_fail@plt+0x604c>
   1834c:	b	1740c <__assert_fail@plt+0x6068>
   18350:	ldrb	r1, [r0, #4]
   18354:	cmp	r1, #48	; 0x30
   18358:	ldrbeq	r1, [r0, #5]
   1835c:	cmpeq	r1, #51	; 0x33
   18360:	bne	174d4 <__assert_fail@plt+0x6130>
   18364:	ldrb	r1, [r0, #6]
   18368:	cmp	r1, #48	; 0x30
   1836c:	ldrbeq	r0, [r0, #7]
   18370:	cmpeq	r0, #0
   18374:	bne	174d4 <__assert_fail@plt+0x6130>
   18378:	movw	r0, #45606	; 0xb226
   1837c:	movt	r0, #1
   18380:	str	r0, [sp, #72]	; 0x48
   18384:	b	174f4 <__assert_fail@plt+0x6150>
   18388:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1838c:	ldr	r2, [sp, #80]	; 0x50
   18390:	b	183c8 <__assert_fail@plt+0x7024>
   18394:	ldr	ip, [fp, #-84]	; 0xffffffac
   18398:	mov	r2, #1
   1839c:	mov	lr, r4
   183a0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   183a4:	b	183c8 <__assert_fail@plt+0x7024>
   183a8:	ldr	r2, [sp, #80]	; 0x50
   183ac:	mov	r7, #2
   183b0:	b	183c8 <__assert_fail@plt+0x7024>
   183b4:	ldr	r6, [sp, #76]	; 0x4c
   183b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   183bc:	ldr	lr, [sp, #84]	; 0x54
   183c0:	ldr	r2, [sp, #80]	; 0x50
   183c4:	mov	r7, #2
   183c8:	mov	r0, #0
   183cc:	ldr	r1, [fp, #12]
   183d0:	tst	r2, #1
   183d4:	mov	r2, r7
   183d8:	mov	r3, lr
   183dc:	str	r0, [sp, #8]
   183e0:	ldr	r0, [sp, #68]	; 0x44
   183e4:	movwne	r2, #4
   183e8:	cmp	r7, #2
   183ec:	movne	r2, r7
   183f0:	str	r2, [sp]
   183f4:	mov	r2, ip
   183f8:	bic	r1, r1, #2
   183fc:	str	r0, [sp, #12]
   18400:	ldr	r0, [sp, #72]	; 0x48
   18404:	str	r1, [sp, #4]
   18408:	mov	r1, sl
   1840c:	str	r0, [sp, #16]
   18410:	mov	r0, r6
   18414:	bl	1717c <__assert_fail@plt+0x5dd8>
   18418:	mov	r9, r0
   1841c:	mov	r0, r9
   18420:	sub	sp, fp, #28
   18424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18428:	mov	r0, #5
   1842c:	ldr	r1, [sp, #48]	; 0x30
   18430:	ldr	r2, [fp, #-84]	; 0xffffffac
   18434:	ldr	r3, [sp, #84]	; 0x54
   18438:	str	r0, [sp]
   1843c:	ldr	r0, [fp, #12]
   18440:	str	r0, [sp, #4]
   18444:	ldr	r0, [fp, #16]
   18448:	str	r0, [sp, #8]
   1844c:	ldr	r0, [sp, #68]	; 0x44
   18450:	str	r0, [sp, #12]
   18454:	ldr	r0, [sp, #72]	; 0x48
   18458:	str	r0, [sp, #16]
   1845c:	ldr	r0, [sp, #76]	; 0x4c
   18460:	b	18414 <__assert_fail@plt+0x7070>
   18464:	mov	r0, #0
   18468:	str	r0, [fp, #-72]	; 0xffffffb8
   1846c:	ldr	r1, [sp, #92]	; 0x5c
   18470:	cmp	r1, #0
   18474:	beq	184b4 <__assert_fail@plt+0x7110>
   18478:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1847c:	ldr	r2, [sp, #76]	; 0x4c
   18480:	tst	r0, #1
   18484:	bne	184b8 <__assert_fail@plt+0x7114>
   18488:	ldrb	r0, [r1]
   1848c:	cmp	r0, #0
   18490:	beq	184b8 <__assert_fail@plt+0x7114>
   18494:	add	r1, r1, #1
   18498:	cmp	r9, sl
   1849c:	strbcc	r0, [r2, r9]
   184a0:	add	r9, r9, #1
   184a4:	ldrb	r0, [r1], #1
   184a8:	cmp	r0, #0
   184ac:	bne	18498 <__assert_fail@plt+0x70f4>
   184b0:	b	184b8 <__assert_fail@plt+0x7114>
   184b4:	ldr	r2, [sp, #76]	; 0x4c
   184b8:	cmp	r9, sl
   184bc:	movcc	r0, #0
   184c0:	strbcc	r0, [r2, r9]
   184c4:	mov	r0, r9
   184c8:	sub	sp, fp, #28
   184cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184d0:	mov	r2, #1
   184d4:	b	183a0 <__assert_fail@plt+0x6ffc>
   184d8:	ldr	r2, [sp, #80]	; 0x50
   184dc:	mov	r7, #5
   184e0:	b	183c8 <__assert_fail@plt+0x7024>
   184e4:	bl	11374 <abort@plt>
   184e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184ec:	add	fp, sp, #28
   184f0:	sub	sp, sp, #28
   184f4:	movw	r5, #49592	; 0xc1b8
   184f8:	cmp	r2, #0
   184fc:	mov	r4, r1
   18500:	mov	r7, r0
   18504:	str	r0, [sp, #20]
   18508:	movt	r5, #2
   1850c:	movne	r5, r2
   18510:	bl	11260 <__errno_location@plt>
   18514:	mov	sl, r0
   18518:	ldm	r5, {r0, r1}
   1851c:	ldr	r2, [r5, #40]	; 0x28
   18520:	ldr	r3, [r5, #44]	; 0x2c
   18524:	add	r9, r5, #8
   18528:	ldr	r6, [sl]
   1852c:	orr	r8, r1, #1
   18530:	mov	r1, #0
   18534:	str	r6, [sp, #24]
   18538:	stm	sp, {r0, r8, r9}
   1853c:	str	r2, [sp, #12]
   18540:	str	r3, [sp, #16]
   18544:	mov	r0, #0
   18548:	mov	r2, r7
   1854c:	mov	r3, r4
   18550:	mov	r6, r4
   18554:	bl	1717c <__assert_fail@plt+0x5dd8>
   18558:	add	r7, r0, #1
   1855c:	mov	r0, r7
   18560:	bl	19660 <__assert_fail@plt+0x82bc>
   18564:	mov	r4, r0
   18568:	ldr	r0, [r5]
   1856c:	ldr	r2, [r5, #44]	; 0x2c
   18570:	ldr	r1, [r5, #40]	; 0x28
   18574:	mov	r3, r6
   18578:	stm	sp, {r0, r8, r9}
   1857c:	str	r2, [sp, #16]
   18580:	str	r1, [sp, #12]
   18584:	mov	r0, r4
   18588:	mov	r1, r7
   1858c:	ldr	r2, [sp, #20]
   18590:	bl	1717c <__assert_fail@plt+0x5dd8>
   18594:	ldr	r0, [sp, #24]
   18598:	str	r0, [sl]
   1859c:	mov	r0, r4
   185a0:	sub	sp, fp, #28
   185a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185ac:	add	fp, sp, #28
   185b0:	sub	sp, sp, #36	; 0x24
   185b4:	movw	r8, #49592	; 0xc1b8
   185b8:	cmp	r3, #0
   185bc:	mov	r4, r2
   185c0:	str	r2, [sp, #24]
   185c4:	mov	r5, r1
   185c8:	mov	r6, r0
   185cc:	str	r0, [sp, #20]
   185d0:	movt	r8, #2
   185d4:	movne	r8, r3
   185d8:	bl	11260 <__errno_location@plt>
   185dc:	str	r0, [sp, #28]
   185e0:	cmp	r4, #0
   185e4:	add	sl, r8, #8
   185e8:	ldm	r8, {r3, r9}
   185ec:	ldr	r7, [r0]
   185f0:	ldr	r1, [r8, #40]	; 0x28
   185f4:	ldr	r2, [r8, #44]	; 0x2c
   185f8:	mov	r0, #0
   185fc:	orreq	r9, r9, #1
   18600:	str	r7, [sp, #32]
   18604:	mov	r7, r5
   18608:	stm	sp, {r3, r9, sl}
   1860c:	str	r1, [sp, #12]
   18610:	str	r2, [sp, #16]
   18614:	mov	r1, #0
   18618:	mov	r2, r6
   1861c:	mov	r3, r5
   18620:	bl	1717c <__assert_fail@plt+0x5dd8>
   18624:	add	r4, r0, #1
   18628:	mov	r5, r0
   1862c:	mov	r0, r4
   18630:	bl	19660 <__assert_fail@plt+0x82bc>
   18634:	mov	r6, r0
   18638:	ldr	r0, [r8]
   1863c:	ldr	r2, [r8, #44]	; 0x2c
   18640:	ldr	r1, [r8, #40]	; 0x28
   18644:	mov	r3, r7
   18648:	stm	sp, {r0, r9, sl}
   1864c:	str	r2, [sp, #16]
   18650:	str	r1, [sp, #12]
   18654:	mov	r0, r6
   18658:	mov	r1, r4
   1865c:	ldr	r2, [sp, #20]
   18660:	bl	1717c <__assert_fail@plt+0x5dd8>
   18664:	ldr	r0, [sp, #24]
   18668:	ldr	r1, [sp, #32]
   1866c:	ldr	r2, [sp, #28]
   18670:	cmp	r0, #0
   18674:	str	r1, [r2]
   18678:	strne	r5, [r0]
   1867c:	mov	r0, r6
   18680:	sub	sp, fp, #28
   18684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18688:	push	{r4, r5, r6, r7, fp, lr}
   1868c:	add	fp, sp, #16
   18690:	movw	r4, #49496	; 0xc158
   18694:	movt	r4, #2
   18698:	ldrd	r6, [r4]
   1869c:	cmp	r7, #2
   186a0:	blt	186cc <__assert_fail@plt+0x7328>
   186a4:	add	r5, r6, #12
   186a8:	mov	r7, #0
   186ac:	ldr	r0, [r5, r7, lsl #3]
   186b0:	bl	1a1cc <__assert_fail@plt+0x8e28>
   186b4:	ldr	r1, [r4, #4]
   186b8:	add	r2, r7, #2
   186bc:	add	r0, r7, #1
   186c0:	mov	r7, r0
   186c4:	cmp	r2, r1
   186c8:	blt	186ac <__assert_fail@plt+0x7308>
   186cc:	ldr	r0, [r6, #4]
   186d0:	movw	r5, #49640	; 0xc1e8
   186d4:	movt	r5, #2
   186d8:	cmp	r0, r5
   186dc:	beq	186f0 <__assert_fail@plt+0x734c>
   186e0:	bl	1a1cc <__assert_fail@plt+0x8e28>
   186e4:	mov	r0, #256	; 0x100
   186e8:	str	r0, [r4, #8]
   186ec:	str	r5, [r4, #12]
   186f0:	add	r5, r4, #8
   186f4:	cmp	r6, r5
   186f8:	beq	18708 <__assert_fail@plt+0x7364>
   186fc:	mov	r0, r6
   18700:	bl	1a1cc <__assert_fail@plt+0x8e28>
   18704:	str	r5, [r4]
   18708:	mov	r0, #1
   1870c:	str	r0, [r4, #4]
   18710:	pop	{r4, r5, r6, r7, fp, pc}
   18714:	movw	r3, #49592	; 0xc1b8
   18718:	mvn	r2, #0
   1871c:	movt	r3, #2
   18720:	b	18724 <__assert_fail@plt+0x7380>
   18724:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18728:	add	fp, sp, #28
   1872c:	sub	sp, sp, #44	; 0x2c
   18730:	mov	r7, r3
   18734:	str	r2, [sp, #36]	; 0x24
   18738:	str	r1, [sp, #32]
   1873c:	mov	r5, r0
   18740:	bl	11260 <__errno_location@plt>
   18744:	cmp	r5, #0
   18748:	blt	188ac <__assert_fail@plt+0x7508>
   1874c:	cmn	r5, #-2147483647	; 0x80000001
   18750:	beq	188ac <__assert_fail@plt+0x7508>
   18754:	movw	r8, #49496	; 0xc158
   18758:	mov	r4, r0
   1875c:	movt	r8, #2
   18760:	ldr	r6, [r8]
   18764:	ldr	r1, [r8, #4]
   18768:	ldr	r0, [r0]
   1876c:	str	r4, [sp, #28]
   18770:	cmp	r1, r5
   18774:	str	r0, [sp, #24]
   18778:	ble	18784 <__assert_fail@plt+0x73e0>
   1877c:	mov	sl, r6
   18780:	b	187e8 <__assert_fail@plt+0x7444>
   18784:	mov	r0, #8
   18788:	add	r9, r8, #8
   1878c:	add	r2, r5, #1
   18790:	str	r1, [fp, #-32]	; 0xffffffe0
   18794:	mvn	r3, #-2147483648	; 0x80000000
   18798:	str	r0, [sp]
   1879c:	subs	r0, r6, r9
   187a0:	sub	r2, r2, r1
   187a4:	sub	r1, fp, #32
   187a8:	movne	r0, r6
   187ac:	bl	19860 <__assert_fail@plt+0x84bc>
   187b0:	str	r0, [r8]
   187b4:	cmp	r6, r9
   187b8:	mov	sl, r0
   187bc:	ldrdeq	r0, [r8, #8]
   187c0:	stmeq	sl, {r0, r1}
   187c4:	ldr	r1, [r8, #4]
   187c8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   187cc:	add	r0, sl, r1, lsl #3
   187d0:	sub	r1, r2, r1
   187d4:	lsl	r2, r1, #3
   187d8:	mov	r1, #0
   187dc:	bl	11284 <memset@plt>
   187e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   187e4:	str	r0, [r8, #4]
   187e8:	mov	r9, sl
   187ec:	ldr	r6, [r9, r5, lsl #3]!
   187f0:	ldr	r4, [r9, #4]!
   187f4:	ldm	r7, {r0, r1}
   187f8:	ldr	r2, [r7, #40]	; 0x28
   187fc:	ldr	r3, [r7, #44]	; 0x2c
   18800:	orr	r8, r1, #1
   18804:	add	r1, r7, #8
   18808:	stm	sp, {r0, r8}
   1880c:	add	r0, sp, #8
   18810:	str	r1, [sp, #20]
   18814:	stm	r0, {r1, r2, r3}
   18818:	mov	r0, r4
   1881c:	mov	r1, r6
   18820:	ldr	r2, [sp, #32]
   18824:	ldr	r3, [sp, #36]	; 0x24
   18828:	bl	1717c <__assert_fail@plt+0x5dd8>
   1882c:	cmp	r6, r0
   18830:	bhi	18894 <__assert_fail@plt+0x74f0>
   18834:	add	r6, r0, #1
   18838:	movw	r0, #49640	; 0xc1e8
   1883c:	movt	r0, #2
   18840:	str	r6, [sl, r5, lsl #3]
   18844:	cmp	r4, r0
   18848:	beq	18854 <__assert_fail@plt+0x74b0>
   1884c:	mov	r0, r4
   18850:	bl	1a1cc <__assert_fail@plt+0x8e28>
   18854:	mov	r0, r6
   18858:	bl	19660 <__assert_fail@plt+0x82bc>
   1885c:	str	r0, [r9]
   18860:	mov	r4, r0
   18864:	add	r3, sp, #8
   18868:	ldr	r0, [r7]
   1886c:	ldr	r1, [r7, #40]	; 0x28
   18870:	ldr	r2, [r7, #44]	; 0x2c
   18874:	stm	sp, {r0, r8}
   18878:	ldr	r0, [sp, #20]
   1887c:	stm	r3, {r0, r1, r2}
   18880:	mov	r0, r4
   18884:	mov	r1, r6
   18888:	ldr	r2, [sp, #32]
   1888c:	ldr	r3, [sp, #36]	; 0x24
   18890:	bl	1717c <__assert_fail@plt+0x5dd8>
   18894:	ldr	r1, [sp, #24]
   18898:	ldr	r0, [sp, #28]
   1889c:	str	r1, [r0]
   188a0:	mov	r0, r4
   188a4:	sub	sp, fp, #28
   188a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188ac:	bl	11374 <abort@plt>
   188b0:	movw	r3, #49592	; 0xc1b8
   188b4:	movt	r3, #2
   188b8:	b	18724 <__assert_fail@plt+0x7380>
   188bc:	movw	r3, #49592	; 0xc1b8
   188c0:	mov	r1, r0
   188c4:	mov	r0, #0
   188c8:	mvn	r2, #0
   188cc:	movt	r3, #2
   188d0:	b	18724 <__assert_fail@plt+0x7380>
   188d4:	movw	r3, #49592	; 0xc1b8
   188d8:	mov	r2, r1
   188dc:	mov	r1, r0
   188e0:	mov	r0, #0
   188e4:	movt	r3, #2
   188e8:	b	18724 <__assert_fail@plt+0x7380>
   188ec:	push	{fp, lr}
   188f0:	mov	fp, sp
   188f4:	sub	sp, sp, #48	; 0x30
   188f8:	vmov.i32	q8, #0	; 0x00000000
   188fc:	mov	ip, #32
   18900:	mov	r3, sp
   18904:	mov	lr, r2
   18908:	cmp	r1, #10
   1890c:	add	r2, r3, #16
   18910:	vst1.64	{d16-d17}, [r3], ip
   18914:	vst1.64	{d16-d17}, [r3]
   18918:	vst1.64	{d16-d17}, [r2]
   1891c:	beq	1893c <__assert_fail@plt+0x7598>
   18920:	str	r1, [sp]
   18924:	mov	r3, sp
   18928:	mov	r1, lr
   1892c:	mvn	r2, #0
   18930:	bl	18724 <__assert_fail@plt+0x7380>
   18934:	mov	sp, fp
   18938:	pop	{fp, pc}
   1893c:	bl	11374 <abort@plt>
   18940:	push	{r4, sl, fp, lr}
   18944:	add	fp, sp, #8
   18948:	sub	sp, sp, #48	; 0x30
   1894c:	mov	ip, r3
   18950:	mov	r3, sp
   18954:	vmov.i32	q8, #0	; 0x00000000
   18958:	mov	lr, #32
   1895c:	cmp	r1, #10
   18960:	add	r4, r3, #16
   18964:	vst1.64	{d16-d17}, [r3], lr
   18968:	vst1.64	{d16-d17}, [r3]
   1896c:	vst1.64	{d16-d17}, [r4]
   18970:	beq	18990 <__assert_fail@plt+0x75ec>
   18974:	str	r1, [sp]
   18978:	mov	r1, r2
   1897c:	mov	r3, sp
   18980:	mov	r2, ip
   18984:	bl	18724 <__assert_fail@plt+0x7380>
   18988:	sub	sp, fp, #8
   1898c:	pop	{r4, sl, fp, pc}
   18990:	bl	11374 <abort@plt>
   18994:	push	{fp, lr}
   18998:	mov	fp, sp
   1899c:	sub	sp, sp, #48	; 0x30
   189a0:	mov	r3, sp
   189a4:	vmov.i32	q8, #0	; 0x00000000
   189a8:	mov	ip, #32
   189ac:	cmp	r0, #10
   189b0:	add	r2, r3, #16
   189b4:	vst1.64	{d16-d17}, [r3], ip
   189b8:	vst1.64	{d16-d17}, [r3]
   189bc:	vst1.64	{d16-d17}, [r2]
   189c0:	beq	189e0 <__assert_fail@plt+0x763c>
   189c4:	str	r0, [sp]
   189c8:	mov	r3, sp
   189cc:	mov	r0, #0
   189d0:	mvn	r2, #0
   189d4:	bl	18724 <__assert_fail@plt+0x7380>
   189d8:	mov	sp, fp
   189dc:	pop	{fp, pc}
   189e0:	bl	11374 <abort@plt>
   189e4:	push	{fp, lr}
   189e8:	mov	fp, sp
   189ec:	sub	sp, sp, #48	; 0x30
   189f0:	mov	r3, sp
   189f4:	vmov.i32	q8, #0	; 0x00000000
   189f8:	mov	ip, #32
   189fc:	cmp	r0, #10
   18a00:	add	lr, r3, #16
   18a04:	vst1.64	{d16-d17}, [r3], ip
   18a08:	vst1.64	{d16-d17}, [r3]
   18a0c:	vst1.64	{d16-d17}, [lr]
   18a10:	beq	18a2c <__assert_fail@plt+0x7688>
   18a14:	str	r0, [sp]
   18a18:	mov	r3, sp
   18a1c:	mov	r0, #0
   18a20:	bl	18724 <__assert_fail@plt+0x7380>
   18a24:	mov	sp, fp
   18a28:	pop	{fp, pc}
   18a2c:	bl	11374 <abort@plt>
   18a30:	push	{r4, sl, fp, lr}
   18a34:	add	fp, sp, #8
   18a38:	sub	sp, sp, #48	; 0x30
   18a3c:	mov	lr, r0
   18a40:	movw	r0, #49592	; 0xc1b8
   18a44:	mov	r3, #32
   18a48:	mov	ip, r1
   18a4c:	mov	r4, #1
   18a50:	movt	r0, #2
   18a54:	add	r1, r0, #16
   18a58:	vld1.64	{d16-d17}, [r0], r3
   18a5c:	mov	r3, sp
   18a60:	vld1.64	{d18-d19}, [r1]
   18a64:	add	r1, r3, #16
   18a68:	vld1.64	{d20-d21}, [r0]
   18a6c:	add	r0, r3, #32
   18a70:	vst1.64	{d18-d19}, [r1]
   18a74:	mov	r1, r3
   18a78:	vst1.64	{d20-d21}, [r0]
   18a7c:	mov	r0, #28
   18a80:	and	r0, r0, r2, lsr #3
   18a84:	and	r2, r2, #31
   18a88:	vst1.64	{d16-d17}, [r1], r0
   18a8c:	ldr	r0, [r1, #8]
   18a90:	bic	r4, r4, r0, lsr r2
   18a94:	eor	r0, r0, r4, lsl r2
   18a98:	mov	r2, ip
   18a9c:	str	r0, [r1, #8]
   18aa0:	mov	r0, #0
   18aa4:	mov	r1, lr
   18aa8:	bl	18724 <__assert_fail@plt+0x7380>
   18aac:	sub	sp, fp, #8
   18ab0:	pop	{r4, sl, fp, pc}
   18ab4:	push	{fp, lr}
   18ab8:	mov	fp, sp
   18abc:	sub	sp, sp, #48	; 0x30
   18ac0:	mov	ip, r0
   18ac4:	movw	r0, #49592	; 0xc1b8
   18ac8:	mov	r3, #32
   18acc:	movt	r0, #2
   18ad0:	add	r2, r0, #16
   18ad4:	vld1.64	{d16-d17}, [r0], r3
   18ad8:	mov	r3, sp
   18adc:	vld1.64	{d18-d19}, [r2]
   18ae0:	add	r2, r3, #16
   18ae4:	vld1.64	{d20-d21}, [r0]
   18ae8:	add	r0, r3, #32
   18aec:	vst1.64	{d18-d19}, [r2]
   18af0:	mov	r2, r3
   18af4:	vst1.64	{d20-d21}, [r0]
   18af8:	mov	r0, #28
   18afc:	and	r0, r0, r1, lsr #3
   18b00:	and	r1, r1, #31
   18b04:	vst1.64	{d16-d17}, [r2], r0
   18b08:	mov	r0, #1
   18b0c:	ldr	lr, [r2, #8]
   18b10:	bic	r0, r0, lr, lsr r1
   18b14:	eor	r0, lr, r0, lsl r1
   18b18:	mov	r1, ip
   18b1c:	str	r0, [r2, #8]
   18b20:	mov	r0, #0
   18b24:	mvn	r2, #0
   18b28:	bl	18724 <__assert_fail@plt+0x7380>
   18b2c:	mov	sp, fp
   18b30:	pop	{fp, pc}
   18b34:	push	{fp, lr}
   18b38:	mov	fp, sp
   18b3c:	sub	sp, sp, #48	; 0x30
   18b40:	movw	r2, #49592	; 0xc1b8
   18b44:	mov	r3, #32
   18b48:	mov	r1, r0
   18b4c:	movt	r2, #2
   18b50:	add	r0, r2, #16
   18b54:	vld1.64	{d16-d17}, [r2], r3
   18b58:	mov	r3, sp
   18b5c:	vld1.64	{d18-d19}, [r0]
   18b60:	add	r0, r3, #16
   18b64:	vld1.64	{d20-d21}, [r2]
   18b68:	mov	r2, r3
   18b6c:	vst1.64	{d18-d19}, [r0]
   18b70:	add	r0, r3, #32
   18b74:	vst1.64	{d20-d21}, [r0]
   18b78:	mov	r0, #12
   18b7c:	vst1.64	{d16-d17}, [r2], r0
   18b80:	ldr	r0, [r2]
   18b84:	orr	r0, r0, #67108864	; 0x4000000
   18b88:	str	r0, [r2]
   18b8c:	mov	r0, #0
   18b90:	mvn	r2, #0
   18b94:	bl	18724 <__assert_fail@plt+0x7380>
   18b98:	mov	sp, fp
   18b9c:	pop	{fp, pc}
   18ba0:	push	{fp, lr}
   18ba4:	mov	fp, sp
   18ba8:	sub	sp, sp, #48	; 0x30
   18bac:	mov	ip, r1
   18bb0:	mov	r1, r0
   18bb4:	movw	r0, #49592	; 0xc1b8
   18bb8:	mov	r3, #32
   18bbc:	movt	r0, #2
   18bc0:	add	r2, r0, #16
   18bc4:	vld1.64	{d16-d17}, [r0], r3
   18bc8:	mov	r3, sp
   18bcc:	vld1.64	{d18-d19}, [r2]
   18bd0:	add	r2, r3, #16
   18bd4:	vld1.64	{d20-d21}, [r0]
   18bd8:	add	r0, r3, #32
   18bdc:	vst1.64	{d18-d19}, [r2]
   18be0:	mov	r2, r3
   18be4:	vst1.64	{d20-d21}, [r0]
   18be8:	mov	r0, #12
   18bec:	vst1.64	{d16-d17}, [r2], r0
   18bf0:	ldr	r0, [r2]
   18bf4:	orr	r0, r0, #67108864	; 0x4000000
   18bf8:	str	r0, [r2]
   18bfc:	mov	r0, #0
   18c00:	mov	r2, ip
   18c04:	bl	18724 <__assert_fail@plt+0x7380>
   18c08:	mov	sp, fp
   18c0c:	pop	{fp, pc}
   18c10:	push	{r4, sl, fp, lr}
   18c14:	add	fp, sp, #8
   18c18:	sub	sp, sp, #96	; 0x60
   18c1c:	mov	ip, r2
   18c20:	mov	r2, sp
   18c24:	vmov.i32	q8, #0	; 0x00000000
   18c28:	mov	r4, #28
   18c2c:	cmp	r1, #10
   18c30:	mov	r3, r2
   18c34:	add	lr, r2, #16
   18c38:	vst1.64	{d16-d17}, [r3], r4
   18c3c:	vst1.64	{d16-d17}, [lr]
   18c40:	vst1.32	{d16-d17}, [r3]
   18c44:	beq	18c94 <__assert_fail@plt+0x78f0>
   18c48:	vld1.64	{d16-d17}, [r2], r4
   18c4c:	vld1.64	{d18-d19}, [lr]
   18c50:	add	r3, sp, #48	; 0x30
   18c54:	add	r4, r3, #4
   18c58:	vld1.32	{d20-d21}, [r2]
   18c5c:	add	r2, r3, #20
   18c60:	vst1.32	{d16-d17}, [r4]
   18c64:	vst1.32	{d18-d19}, [r2]
   18c68:	add	r2, r3, #32
   18c6c:	vst1.32	{d20-d21}, [r2]
   18c70:	str	r1, [sp, #48]	; 0x30
   18c74:	mvn	r2, #0
   18c78:	ldr	r1, [sp, #60]	; 0x3c
   18c7c:	orr	r1, r1, #67108864	; 0x4000000
   18c80:	str	r1, [sp, #60]	; 0x3c
   18c84:	mov	r1, ip
   18c88:	bl	18724 <__assert_fail@plt+0x7380>
   18c8c:	sub	sp, fp, #8
   18c90:	pop	{r4, sl, fp, pc}
   18c94:	bl	11374 <abort@plt>
   18c98:	push	{r4, r5, fp, lr}
   18c9c:	add	fp, sp, #8
   18ca0:	sub	sp, sp, #48	; 0x30
   18ca4:	mov	ip, r3
   18ca8:	movw	r3, #49592	; 0xc1b8
   18cac:	mov	lr, #32
   18cb0:	cmp	r1, #0
   18cb4:	mov	r5, sp
   18cb8:	movt	r3, #2
   18cbc:	cmpne	r2, #0
   18cc0:	add	r4, r3, #16
   18cc4:	vld1.64	{d16-d17}, [r3], lr
   18cc8:	vld1.64	{d18-d19}, [r4]
   18ccc:	add	r4, r5, #16
   18cd0:	vld1.64	{d20-d21}, [r3]
   18cd4:	vst1.64	{d16-d17}, [r5], lr
   18cd8:	mov	r3, #10
   18cdc:	vst1.64	{d18-d19}, [r4]
   18ce0:	vst1.64	{d20-d21}, [r5]
   18ce4:	str	r3, [sp]
   18ce8:	bne	18cf0 <__assert_fail@plt+0x794c>
   18cec:	bl	11374 <abort@plt>
   18cf0:	str	r2, [sp, #44]	; 0x2c
   18cf4:	str	r1, [sp, #40]	; 0x28
   18cf8:	mov	r3, sp
   18cfc:	mov	r1, ip
   18d00:	mvn	r2, #0
   18d04:	bl	18724 <__assert_fail@plt+0x7380>
   18d08:	sub	sp, fp, #8
   18d0c:	pop	{r4, r5, fp, pc}
   18d10:	push	{r4, r5, fp, lr}
   18d14:	add	fp, sp, #8
   18d18:	sub	sp, sp, #48	; 0x30
   18d1c:	mov	lr, r3
   18d20:	movw	r3, #49592	; 0xc1b8
   18d24:	mov	ip, #32
   18d28:	cmp	r1, #0
   18d2c:	mov	r5, sp
   18d30:	movt	r3, #2
   18d34:	cmpne	r2, #0
   18d38:	add	r4, r3, #16
   18d3c:	vld1.64	{d16-d17}, [r3], ip
   18d40:	vld1.64	{d18-d19}, [r4]
   18d44:	add	r4, r5, #16
   18d48:	vld1.64	{d20-d21}, [r3]
   18d4c:	vst1.64	{d16-d17}, [r5], ip
   18d50:	mov	r3, #10
   18d54:	vst1.64	{d18-d19}, [r4]
   18d58:	vst1.64	{d20-d21}, [r5]
   18d5c:	str	r3, [sp]
   18d60:	bne	18d68 <__assert_fail@plt+0x79c4>
   18d64:	bl	11374 <abort@plt>
   18d68:	ldr	ip, [fp, #8]
   18d6c:	str	r2, [sp, #44]	; 0x2c
   18d70:	str	r1, [sp, #40]	; 0x28
   18d74:	mov	r3, sp
   18d78:	mov	r1, lr
   18d7c:	mov	r2, ip
   18d80:	bl	18724 <__assert_fail@plt+0x7380>
   18d84:	sub	sp, fp, #8
   18d88:	pop	{r4, r5, fp, pc}
   18d8c:	push	{r4, sl, fp, lr}
   18d90:	add	fp, sp, #8
   18d94:	sub	sp, sp, #48	; 0x30
   18d98:	mov	ip, r2
   18d9c:	movw	r2, #49592	; 0xc1b8
   18da0:	mov	lr, #32
   18da4:	cmp	r0, #0
   18da8:	mov	r4, sp
   18dac:	movt	r2, #2
   18db0:	cmpne	r1, #0
   18db4:	add	r3, r2, #16
   18db8:	vld1.64	{d16-d17}, [r2], lr
   18dbc:	vld1.64	{d18-d19}, [r3]
   18dc0:	add	r3, r4, #16
   18dc4:	vld1.64	{d20-d21}, [r2]
   18dc8:	vst1.64	{d16-d17}, [r4], lr
   18dcc:	mov	r2, #10
   18dd0:	vst1.64	{d18-d19}, [r3]
   18dd4:	vst1.64	{d20-d21}, [r4]
   18dd8:	str	r2, [sp]
   18ddc:	bne	18de4 <__assert_fail@plt+0x7a40>
   18de0:	bl	11374 <abort@plt>
   18de4:	str	r1, [sp, #44]	; 0x2c
   18de8:	str	r0, [sp, #40]	; 0x28
   18dec:	mov	r3, sp
   18df0:	mov	r0, #0
   18df4:	mov	r1, ip
   18df8:	mvn	r2, #0
   18dfc:	bl	18724 <__assert_fail@plt+0x7380>
   18e00:	sub	sp, fp, #8
   18e04:	pop	{r4, sl, fp, pc}
   18e08:	push	{r4, r5, fp, lr}
   18e0c:	add	fp, sp, #8
   18e10:	sub	sp, sp, #48	; 0x30
   18e14:	mov	lr, r2
   18e18:	movw	r2, #49592	; 0xc1b8
   18e1c:	mov	ip, r3
   18e20:	mov	r3, #32
   18e24:	cmp	r0, #0
   18e28:	mov	r5, sp
   18e2c:	movt	r2, #2
   18e30:	cmpne	r1, #0
   18e34:	add	r4, r2, #16
   18e38:	vld1.64	{d16-d17}, [r2], r3
   18e3c:	vld1.64	{d18-d19}, [r4]
   18e40:	add	r4, r5, #16
   18e44:	vld1.64	{d20-d21}, [r2]
   18e48:	vst1.64	{d16-d17}, [r5], r3
   18e4c:	mov	r2, #10
   18e50:	vst1.64	{d18-d19}, [r4]
   18e54:	vst1.64	{d20-d21}, [r5]
   18e58:	str	r2, [sp]
   18e5c:	bne	18e64 <__assert_fail@plt+0x7ac0>
   18e60:	bl	11374 <abort@plt>
   18e64:	str	r1, [sp, #44]	; 0x2c
   18e68:	str	r0, [sp, #40]	; 0x28
   18e6c:	mov	r3, sp
   18e70:	mov	r0, #0
   18e74:	mov	r1, lr
   18e78:	mov	r2, ip
   18e7c:	bl	18724 <__assert_fail@plt+0x7380>
   18e80:	sub	sp, fp, #8
   18e84:	pop	{r4, r5, fp, pc}
   18e88:	movw	r3, #49448	; 0xc128
   18e8c:	movt	r3, #2
   18e90:	b	18724 <__assert_fail@plt+0x7380>
   18e94:	movw	r3, #49448	; 0xc128
   18e98:	mov	r2, r1
   18e9c:	mov	r1, r0
   18ea0:	mov	r0, #0
   18ea4:	movt	r3, #2
   18ea8:	b	18724 <__assert_fail@plt+0x7380>
   18eac:	movw	r3, #49448	; 0xc128
   18eb0:	mvn	r2, #0
   18eb4:	movt	r3, #2
   18eb8:	b	18724 <__assert_fail@plt+0x7380>
   18ebc:	movw	r3, #49448	; 0xc128
   18ec0:	mov	r1, r0
   18ec4:	mov	r0, #0
   18ec8:	mvn	r2, #0
   18ecc:	movt	r3, #2
   18ed0:	b	18724 <__assert_fail@plt+0x7380>
   18ed4:	push	{r4, sl, fp, lr}
   18ed8:	add	fp, sp, #8
   18edc:	sub	sp, sp, #104	; 0x68
   18ee0:	movw	r1, #46431	; 0xb55f
   18ee4:	mov	r4, r0
   18ee8:	mov	r2, sp
   18eec:	mov	r0, #3
   18ef0:	movt	r1, #1
   18ef4:	bl	1138c <__lxstat64@plt>
   18ef8:	mov	r1, r0
   18efc:	mov	r0, #0
   18f00:	cmp	r1, #0
   18f04:	beq	18f10 <__assert_fail@plt+0x7b6c>
   18f08:	sub	sp, fp, #8
   18f0c:	pop	{r4, sl, fp, pc}
   18f10:	ldr	r0, [sp, #96]	; 0x60
   18f14:	ldr	r1, [sp, #100]	; 0x64
   18f18:	ldm	sp, {r2, r3}
   18f1c:	stm	r4, {r0, r1, r2, r3}
   18f20:	mov	r0, r4
   18f24:	sub	sp, fp, #8
   18f28:	pop	{r4, sl, fp, pc}
   18f2c:	push	{r4, r5, r6, r7, fp, lr}
   18f30:	add	fp, sp, #16
   18f34:	mov	r4, r0
   18f38:	cmp	r0, #2
   18f3c:	movhi	r0, r4
   18f40:	pophi	{r4, r5, r6, r7, fp, pc}
   18f44:	mov	r0, r4
   18f48:	bl	1a36c <__assert_fail@plt+0x8fc8>
   18f4c:	mov	r5, r0
   18f50:	bl	11260 <__errno_location@plt>
   18f54:	ldr	r7, [r0]
   18f58:	mov	r6, r0
   18f5c:	mov	r0, r4
   18f60:	bl	11380 <close@plt>
   18f64:	mov	r0, r5
   18f68:	str	r7, [r6]
   18f6c:	pop	{r4, r5, r6, r7, fp, pc}
   18f70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18f74:	add	fp, sp, #24
   18f78:	sub	sp, sp, #32
   18f7c:	ldr	r6, [fp, #12]
   18f80:	ldr	r7, [fp, #8]
   18f84:	mov	r4, r2
   18f88:	mov	r8, r0
   18f8c:	cmp	r1, #0
   18f90:	beq	18fb8 <__assert_fail@plt+0x7c14>
   18f94:	movw	r2, #45696	; 0xb280
   18f98:	mov	r5, r1
   18f9c:	str	r3, [sp, #4]
   18fa0:	str	r4, [sp]
   18fa4:	mov	r0, r8
   18fa8:	mov	r1, #1
   18fac:	movt	r2, #1
   18fb0:	mov	r3, r5
   18fb4:	b	18fd0 <__assert_fail@plt+0x7c2c>
   18fb8:	movw	r2, #45708	; 0xb28c
   18fbc:	str	r3, [sp]
   18fc0:	mov	r0, r8
   18fc4:	mov	r1, #1
   18fc8:	mov	r3, r4
   18fcc:	movt	r2, #1
   18fd0:	bl	112a8 <__fprintf_chk@plt>
   18fd4:	movw	r1, #45715	; 0xb293
   18fd8:	mov	r0, #0
   18fdc:	mov	r2, #5
   18fe0:	movt	r1, #1
   18fe4:	bl	1114c <dcgettext@plt>
   18fe8:	movw	r2, #46433	; 0xb561
   18fec:	mov	r3, r0
   18ff0:	movw	r0, #2022	; 0x7e6
   18ff4:	mov	r1, #1
   18ff8:	str	r0, [sp]
   18ffc:	movt	r2, #1
   19000:	mov	r0, r8
   19004:	bl	112a8 <__fprintf_chk@plt>
   19008:	movw	r4, #42905	; 0xa799
   1900c:	mov	r1, r8
   19010:	movt	r4, #1
   19014:	mov	r0, r4
   19018:	bl	110d4 <fputs_unlocked@plt>
   1901c:	movw	r1, #45719	; 0xb297
   19020:	mov	r0, #0
   19024:	mov	r2, #5
   19028:	movt	r1, #1
   1902c:	bl	1114c <dcgettext@plt>
   19030:	movw	r3, #45890	; 0xb342
   19034:	mov	r2, r0
   19038:	mov	r0, r8
   1903c:	mov	r1, #1
   19040:	movt	r3, #1
   19044:	bl	112a8 <__fprintf_chk@plt>
   19048:	mov	r0, r4
   1904c:	mov	r1, r8
   19050:	bl	110d4 <fputs_unlocked@plt>
   19054:	cmp	r6, #9
   19058:	bhi	19094 <__assert_fail@plt+0x7cf0>
   1905c:	add	r0, pc, #0
   19060:	ldr	pc, [r0, r6, lsl #2]
   19064:	andeq	r9, r1, ip, lsl #1
   19068:	andeq	r9, r1, r0, lsr #1
   1906c:	ldrdeq	r9, [r1], -r0
   19070:	strdeq	r9, [r1], -r8
   19074:	andeq	r9, r1, r0, lsr #2
   19078:	andeq	r9, r1, r8, asr #2
   1907c:	andeq	r9, r1, r0, ror r1
   19080:	andeq	r9, r1, r8, lsr #3
   19084:	andeq	r9, r1, r0, asr r2
   19088:	strdeq	r9, [r1], -r8
   1908c:	sub	sp, fp, #24
   19090:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19094:	movw	r1, #46243	; 0xb4a3
   19098:	movt	r1, #1
   1909c:	b	19200 <__assert_fail@plt+0x7e5c>
   190a0:	movw	r1, #45924	; 0xb364
   190a4:	mov	r0, #0
   190a8:	mov	r2, #5
   190ac:	movt	r1, #1
   190b0:	bl	1114c <dcgettext@plt>
   190b4:	ldr	r3, [r7]
   190b8:	mov	r2, r0
   190bc:	mov	r0, r8
   190c0:	mov	r1, #1
   190c4:	sub	sp, fp, #24
   190c8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   190cc:	b	112a8 <__fprintf_chk@plt>
   190d0:	movw	r1, #45940	; 0xb374
   190d4:	mov	r0, #0
   190d8:	mov	r2, #5
   190dc:	movt	r1, #1
   190e0:	bl	1114c <dcgettext@plt>
   190e4:	mov	r2, r0
   190e8:	ldr	r3, [r7]
   190ec:	ldr	r0, [r7, #4]
   190f0:	str	r0, [sp]
   190f4:	b	191e4 <__assert_fail@plt+0x7e40>
   190f8:	movw	r1, #45963	; 0xb38b
   190fc:	mov	r0, #0
   19100:	mov	r2, #5
   19104:	movt	r1, #1
   19108:	bl	1114c <dcgettext@plt>
   1910c:	ldr	r3, [r7]
   19110:	mov	r2, r0
   19114:	ldmib	r7, {r0, r1}
   19118:	stm	sp, {r0, r1}
   1911c:	b	191e4 <__assert_fail@plt+0x7e40>
   19120:	movw	r1, #45991	; 0xb3a7
   19124:	mov	r0, #0
   19128:	mov	r2, #5
   1912c:	movt	r1, #1
   19130:	bl	1114c <dcgettext@plt>
   19134:	ldr	r3, [r7]
   19138:	mov	r2, r0
   1913c:	ldmib	r7, {r0, r1, r7}
   19140:	stm	sp, {r0, r1, r7}
   19144:	b	191e4 <__assert_fail@plt+0x7e40>
   19148:	movw	r1, #46023	; 0xb3c7
   1914c:	mov	r0, #0
   19150:	mov	r2, #5
   19154:	movt	r1, #1
   19158:	bl	1114c <dcgettext@plt>
   1915c:	ldr	r3, [r7]
   19160:	mov	r2, r0
   19164:	ldmib	r7, {r0, r1, r6, r7}
   19168:	stm	sp, {r0, r1, r6, r7}
   1916c:	b	191e4 <__assert_fail@plt+0x7e40>
   19170:	movw	r1, #46059	; 0xb3eb
   19174:	mov	r0, #0
   19178:	mov	r2, #5
   1917c:	movt	r1, #1
   19180:	bl	1114c <dcgettext@plt>
   19184:	ldr	r3, [r7]
   19188:	mov	r2, r0
   1918c:	ldmib	r7, {r0, r1, r6}
   19190:	ldr	r5, [r7, #16]
   19194:	ldr	r7, [r7, #20]
   19198:	stm	sp, {r0, r1, r6}
   1919c:	str	r5, [sp, #12]
   191a0:	str	r7, [sp, #16]
   191a4:	b	191e4 <__assert_fail@plt+0x7e40>
   191a8:	movw	r1, #46099	; 0xb413
   191ac:	mov	r0, #0
   191b0:	mov	r2, #5
   191b4:	movt	r1, #1
   191b8:	bl	1114c <dcgettext@plt>
   191bc:	ldr	r3, [r7]
   191c0:	mov	r2, r0
   191c4:	ldmib	r7, {r0, r1, r6}
   191c8:	ldr	r5, [r7, #16]
   191cc:	ldr	r4, [r7, #20]
   191d0:	ldr	r7, [r7, #24]
   191d4:	stm	sp, {r0, r1, r6}
   191d8:	str	r5, [sp, #12]
   191dc:	str	r4, [sp, #16]
   191e0:	str	r7, [sp, #20]
   191e4:	mov	r0, r8
   191e8:	mov	r1, #1
   191ec:	bl	112a8 <__fprintf_chk@plt>
   191f0:	sub	sp, fp, #24
   191f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   191f8:	movw	r1, #46191	; 0xb46f
   191fc:	movt	r1, #1
   19200:	mov	r0, #0
   19204:	mov	r2, #5
   19208:	bl	1114c <dcgettext@plt>
   1920c:	mov	ip, r0
   19210:	ldr	r3, [r7]
   19214:	ldr	r0, [r7, #4]
   19218:	ldr	r1, [r7, #8]
   1921c:	ldr	r6, [r7, #12]
   19220:	ldr	r5, [r7, #16]
   19224:	ldr	r4, [r7, #20]
   19228:	ldr	r2, [r7, #24]
   1922c:	ldr	lr, [r7, #28]
   19230:	ldr	r7, [r7, #32]
   19234:	stm	sp, {r0, r1, r6}
   19238:	str	r5, [sp, #12]
   1923c:	str	r4, [sp, #16]
   19240:	str	r2, [sp, #20]
   19244:	str	lr, [sp, #24]
   19248:	str	r7, [sp, #28]
   1924c:	b	19294 <__assert_fail@plt+0x7ef0>
   19250:	movw	r1, #46143	; 0xb43f
   19254:	mov	r0, #0
   19258:	mov	r2, #5
   1925c:	movt	r1, #1
   19260:	bl	1114c <dcgettext@plt>
   19264:	mov	ip, r0
   19268:	ldr	r3, [r7]
   1926c:	ldmib	r7, {r0, r1, r6}
   19270:	ldr	r5, [r7, #16]
   19274:	ldr	r4, [r7, #20]
   19278:	ldr	r2, [r7, #24]
   1927c:	ldr	r7, [r7, #28]
   19280:	stm	sp, {r0, r1, r6}
   19284:	str	r5, [sp, #12]
   19288:	str	r4, [sp, #16]
   1928c:	str	r2, [sp, #20]
   19290:	str	r7, [sp, #24]
   19294:	mov	r0, r8
   19298:	mov	r1, #1
   1929c:	mov	r2, ip
   192a0:	bl	112a8 <__fprintf_chk@plt>
   192a4:	sub	sp, fp, #24
   192a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   192ac:	push	{r4, sl, fp, lr}
   192b0:	add	fp, sp, #8
   192b4:	sub	sp, sp, #8
   192b8:	ldr	ip, [fp, #8]
   192bc:	mov	lr, #0
   192c0:	ldr	r4, [ip, lr, lsl #2]
   192c4:	add	lr, lr, #1
   192c8:	cmp	r4, #0
   192cc:	bne	192c0 <__assert_fail@plt+0x7f1c>
   192d0:	sub	r4, lr, #1
   192d4:	str	ip, [sp]
   192d8:	str	r4, [sp, #4]
   192dc:	bl	18f70 <__assert_fail@plt+0x7bcc>
   192e0:	sub	sp, fp, #8
   192e4:	pop	{r4, sl, fp, pc}
   192e8:	push	{fp, lr}
   192ec:	mov	fp, sp
   192f0:	sub	sp, sp, #48	; 0x30
   192f4:	ldr	ip, [fp, #8]
   192f8:	ldr	lr, [ip]
   192fc:	cmp	lr, #0
   19300:	str	lr, [sp, #8]
   19304:	beq	193a0 <__assert_fail@plt+0x7ffc>
   19308:	ldr	lr, [ip, #4]
   1930c:	cmp	lr, #0
   19310:	str	lr, [sp, #12]
   19314:	beq	193a8 <__assert_fail@plt+0x8004>
   19318:	ldr	lr, [ip, #8]
   1931c:	cmp	lr, #0
   19320:	str	lr, [sp, #16]
   19324:	beq	193b0 <__assert_fail@plt+0x800c>
   19328:	ldr	lr, [ip, #12]
   1932c:	cmp	lr, #0
   19330:	str	lr, [sp, #20]
   19334:	beq	193b8 <__assert_fail@plt+0x8014>
   19338:	ldr	lr, [ip, #16]
   1933c:	cmp	lr, #0
   19340:	str	lr, [sp, #24]
   19344:	beq	193c0 <__assert_fail@plt+0x801c>
   19348:	ldr	lr, [ip, #20]
   1934c:	cmp	lr, #0
   19350:	str	lr, [sp, #28]
   19354:	beq	193c8 <__assert_fail@plt+0x8024>
   19358:	ldr	lr, [ip, #24]
   1935c:	cmp	lr, #0
   19360:	str	lr, [sp, #32]
   19364:	beq	193d0 <__assert_fail@plt+0x802c>
   19368:	ldr	lr, [ip, #28]
   1936c:	cmp	lr, #0
   19370:	str	lr, [sp, #36]	; 0x24
   19374:	beq	193d8 <__assert_fail@plt+0x8034>
   19378:	ldr	lr, [ip, #32]
   1937c:	cmp	lr, #0
   19380:	str	lr, [sp, #40]	; 0x28
   19384:	beq	193e0 <__assert_fail@plt+0x803c>
   19388:	ldr	lr, [ip, #36]	; 0x24
   1938c:	mov	ip, #10
   19390:	cmp	lr, #0
   19394:	str	lr, [sp, #44]	; 0x2c
   19398:	movweq	ip, #9
   1939c:	b	193e4 <__assert_fail@plt+0x8040>
   193a0:	mov	ip, #0
   193a4:	b	193e4 <__assert_fail@plt+0x8040>
   193a8:	mov	ip, #1
   193ac:	b	193e4 <__assert_fail@plt+0x8040>
   193b0:	mov	ip, #2
   193b4:	b	193e4 <__assert_fail@plt+0x8040>
   193b8:	mov	ip, #3
   193bc:	b	193e4 <__assert_fail@plt+0x8040>
   193c0:	mov	ip, #4
   193c4:	b	193e4 <__assert_fail@plt+0x8040>
   193c8:	mov	ip, #5
   193cc:	b	193e4 <__assert_fail@plt+0x8040>
   193d0:	mov	ip, #6
   193d4:	b	193e4 <__assert_fail@plt+0x8040>
   193d8:	mov	ip, #7
   193dc:	b	193e4 <__assert_fail@plt+0x8040>
   193e0:	mov	ip, #8
   193e4:	add	lr, sp, #8
   193e8:	str	ip, [sp, #4]
   193ec:	str	lr, [sp]
   193f0:	bl	18f70 <__assert_fail@plt+0x7bcc>
   193f4:	mov	sp, fp
   193f8:	pop	{fp, pc}
   193fc:	push	{fp, lr}
   19400:	mov	fp, sp
   19404:	sub	sp, sp, #56	; 0x38
   19408:	add	ip, fp, #8
   1940c:	str	ip, [sp, #12]
   19410:	ldr	lr, [fp, #8]
   19414:	cmp	lr, #0
   19418:	str	lr, [sp, #16]
   1941c:	beq	194b8 <__assert_fail@plt+0x8114>
   19420:	ldr	lr, [ip, #4]
   19424:	cmp	lr, #0
   19428:	str	lr, [sp, #20]
   1942c:	beq	194c0 <__assert_fail@plt+0x811c>
   19430:	ldr	lr, [ip, #8]
   19434:	cmp	lr, #0
   19438:	str	lr, [sp, #24]
   1943c:	beq	194c8 <__assert_fail@plt+0x8124>
   19440:	ldr	lr, [ip, #12]
   19444:	cmp	lr, #0
   19448:	str	lr, [sp, #28]
   1944c:	beq	194d0 <__assert_fail@plt+0x812c>
   19450:	ldr	lr, [ip, #16]
   19454:	cmp	lr, #0
   19458:	str	lr, [sp, #32]
   1945c:	beq	194d8 <__assert_fail@plt+0x8134>
   19460:	ldr	lr, [ip, #20]
   19464:	cmp	lr, #0
   19468:	str	lr, [sp, #36]	; 0x24
   1946c:	beq	194e0 <__assert_fail@plt+0x813c>
   19470:	ldr	lr, [ip, #24]
   19474:	cmp	lr, #0
   19478:	str	lr, [sp, #40]	; 0x28
   1947c:	beq	194e8 <__assert_fail@plt+0x8144>
   19480:	ldr	lr, [ip, #28]
   19484:	cmp	lr, #0
   19488:	str	lr, [sp, #44]	; 0x2c
   1948c:	beq	194f0 <__assert_fail@plt+0x814c>
   19490:	ldr	lr, [ip, #32]
   19494:	cmp	lr, #0
   19498:	str	lr, [sp, #48]	; 0x30
   1949c:	beq	194f8 <__assert_fail@plt+0x8154>
   194a0:	ldr	lr, [ip, #36]	; 0x24
   194a4:	mov	ip, #10
   194a8:	cmp	lr, #0
   194ac:	str	lr, [sp, #52]	; 0x34
   194b0:	movweq	ip, #9
   194b4:	b	194fc <__assert_fail@plt+0x8158>
   194b8:	mov	ip, #0
   194bc:	b	194fc <__assert_fail@plt+0x8158>
   194c0:	mov	ip, #1
   194c4:	b	194fc <__assert_fail@plt+0x8158>
   194c8:	mov	ip, #2
   194cc:	b	194fc <__assert_fail@plt+0x8158>
   194d0:	mov	ip, #3
   194d4:	b	194fc <__assert_fail@plt+0x8158>
   194d8:	mov	ip, #4
   194dc:	b	194fc <__assert_fail@plt+0x8158>
   194e0:	mov	ip, #5
   194e4:	b	194fc <__assert_fail@plt+0x8158>
   194e8:	mov	ip, #6
   194ec:	b	194fc <__assert_fail@plt+0x8158>
   194f0:	mov	ip, #7
   194f4:	b	194fc <__assert_fail@plt+0x8158>
   194f8:	mov	ip, #8
   194fc:	add	lr, sp, #16
   19500:	str	ip, [sp, #4]
   19504:	str	lr, [sp]
   19508:	bl	18f70 <__assert_fail@plt+0x7bcc>
   1950c:	mov	sp, fp
   19510:	pop	{fp, pc}
   19514:	push	{fp, lr}
   19518:	mov	fp, sp
   1951c:	movw	r0, #49532	; 0xc17c
   19520:	movt	r0, #2
   19524:	ldr	r1, [r0]
   19528:	movw	r0, #42905	; 0xa799
   1952c:	movt	r0, #1
   19530:	bl	110d4 <fputs_unlocked@plt>
   19534:	movw	r1, #46303	; 0xb4df
   19538:	mov	r0, #0
   1953c:	mov	r2, #5
   19540:	movt	r1, #1
   19544:	bl	1114c <dcgettext@plt>
   19548:	movw	r2, #46323	; 0xb4f3
   1954c:	mov	r1, r0
   19550:	mov	r0, #1
   19554:	movt	r2, #1
   19558:	bl	11290 <__printf_chk@plt>
   1955c:	movw	r1, #46345	; 0xb509
   19560:	mov	r0, #0
   19564:	mov	r2, #5
   19568:	movt	r1, #1
   1956c:	bl	1114c <dcgettext@plt>
   19570:	movw	r2, #43641	; 0xaa79
   19574:	movw	r3, #43935	; 0xab9f
   19578:	mov	r1, r0
   1957c:	mov	r0, #1
   19580:	movt	r2, #1
   19584:	movt	r3, #1
   19588:	bl	11290 <__printf_chk@plt>
   1958c:	movw	r1, #46365	; 0xb51d
   19590:	mov	r0, #0
   19594:	mov	r2, #5
   19598:	movt	r1, #1
   1959c:	bl	1114c <dcgettext@plt>
   195a0:	movw	r2, #46404	; 0xb544
   195a4:	mov	r1, r0
   195a8:	mov	r0, #1
   195ac:	movt	r2, #1
   195b0:	pop	{fp, lr}
   195b4:	b	11290 <__printf_chk@plt>
   195b8:	push	{r4, r5, r6, sl, fp, lr}
   195bc:	add	fp, sp, #16
   195c0:	mov	r4, r2
   195c4:	mov	r5, r1
   195c8:	mov	r6, r0
   195cc:	bl	1a330 <__assert_fail@plt+0x8f8c>
   195d0:	cmp	r0, #0
   195d4:	popne	{r4, r5, r6, sl, fp, pc}
   195d8:	cmp	r6, #0
   195dc:	beq	195f0 <__assert_fail@plt+0x824c>
   195e0:	cmp	r5, #0
   195e4:	cmpne	r4, #0
   195e8:	bne	195f0 <__assert_fail@plt+0x824c>
   195ec:	pop	{r4, r5, r6, sl, fp, pc}
   195f0:	bl	19b90 <__assert_fail@plt+0x87ec>
   195f4:	push	{r4, r5, r6, sl, fp, lr}
   195f8:	add	fp, sp, #16
   195fc:	mov	r4, r2
   19600:	mov	r5, r1
   19604:	mov	r6, r0
   19608:	bl	1a330 <__assert_fail@plt+0x8f8c>
   1960c:	cmp	r0, #0
   19610:	popne	{r4, r5, r6, sl, fp, pc}
   19614:	cmp	r6, #0
   19618:	beq	1962c <__assert_fail@plt+0x8288>
   1961c:	cmp	r5, #0
   19620:	cmpne	r4, #0
   19624:	bne	1962c <__assert_fail@plt+0x8288>
   19628:	pop	{r4, r5, r6, sl, fp, pc}
   1962c:	bl	19b90 <__assert_fail@plt+0x87ec>
   19630:	push	{fp, lr}
   19634:	mov	fp, sp
   19638:	bl	19ca4 <__assert_fail@plt+0x8900>
   1963c:	cmp	r0, #0
   19640:	popne	{fp, pc}
   19644:	bl	19b90 <__assert_fail@plt+0x87ec>
   19648:	push	{fp, lr}
   1964c:	mov	fp, sp
   19650:	bl	19ca4 <__assert_fail@plt+0x8900>
   19654:	cmp	r0, #0
   19658:	popne	{fp, pc}
   1965c:	bl	19b90 <__assert_fail@plt+0x87ec>
   19660:	push	{fp, lr}
   19664:	mov	fp, sp
   19668:	bl	19ca4 <__assert_fail@plt+0x8900>
   1966c:	cmp	r0, #0
   19670:	popne	{fp, pc}
   19674:	bl	19b90 <__assert_fail@plt+0x87ec>
   19678:	push	{r4, r5, fp, lr}
   1967c:	add	fp, sp, #8
   19680:	mov	r4, r1
   19684:	mov	r5, r0
   19688:	bl	19cd4 <__assert_fail@plt+0x8930>
   1968c:	cmp	r0, #0
   19690:	popne	{r4, r5, fp, pc}
   19694:	cmp	r5, #0
   19698:	beq	196a8 <__assert_fail@plt+0x8304>
   1969c:	cmp	r4, #0
   196a0:	bne	196a8 <__assert_fail@plt+0x8304>
   196a4:	pop	{r4, r5, fp, pc}
   196a8:	bl	19b90 <__assert_fail@plt+0x87ec>
   196ac:	push	{fp, lr}
   196b0:	mov	fp, sp
   196b4:	cmp	r1, #0
   196b8:	orreq	r1, r1, #1
   196bc:	bl	19cd4 <__assert_fail@plt+0x8930>
   196c0:	cmp	r0, #0
   196c4:	popne	{fp, pc}
   196c8:	bl	19b90 <__assert_fail@plt+0x87ec>
   196cc:	push	{fp, lr}
   196d0:	mov	fp, sp
   196d4:	clz	r3, r2
   196d8:	lsr	ip, r3, #5
   196dc:	clz	r3, r1
   196e0:	lsr	r3, r3, #5
   196e4:	orrs	r3, r3, ip
   196e8:	movwne	r1, #1
   196ec:	movwne	r2, #1
   196f0:	bl	1a330 <__assert_fail@plt+0x8f8c>
   196f4:	cmp	r0, #0
   196f8:	popne	{fp, pc}
   196fc:	bl	19b90 <__assert_fail@plt+0x87ec>
   19700:	push	{fp, lr}
   19704:	mov	fp, sp
   19708:	mov	r2, r1
   1970c:	mov	r1, r0
   19710:	mov	r0, #0
   19714:	bl	1a330 <__assert_fail@plt+0x8f8c>
   19718:	cmp	r0, #0
   1971c:	popne	{fp, pc}
   19720:	bl	19b90 <__assert_fail@plt+0x87ec>
   19724:	push	{fp, lr}
   19728:	mov	fp, sp
   1972c:	mov	r2, r1
   19730:	mov	r1, r0
   19734:	clz	r0, r2
   19738:	clz	r3, r1
   1973c:	lsr	r0, r0, #5
   19740:	lsr	r3, r3, #5
   19744:	orrs	r0, r3, r0
   19748:	movwne	r1, #1
   1974c:	movwne	r2, #1
   19750:	mov	r0, #0
   19754:	bl	1a330 <__assert_fail@plt+0x8f8c>
   19758:	cmp	r0, #0
   1975c:	popne	{fp, pc}
   19760:	bl	19b90 <__assert_fail@plt+0x87ec>
   19764:	push	{r4, r5, r6, sl, fp, lr}
   19768:	add	fp, sp, #16
   1976c:	ldr	r5, [r1]
   19770:	mov	r4, r1
   19774:	mov	r6, r0
   19778:	cmp	r0, #0
   1977c:	beq	19794 <__assert_fail@plt+0x83f0>
   19780:	mov	r0, #1
   19784:	add	r0, r0, r5, lsr #1
   19788:	adds	r5, r5, r0
   1978c:	bcc	1979c <__assert_fail@plt+0x83f8>
   19790:	b	197d8 <__assert_fail@plt+0x8434>
   19794:	cmp	r5, #0
   19798:	movweq	r5, #64	; 0x40
   1979c:	mov	r0, r6
   197a0:	mov	r1, r5
   197a4:	mov	r2, #1
   197a8:	bl	1a330 <__assert_fail@plt+0x8f8c>
   197ac:	cmp	r5, #0
   197b0:	mov	r1, r5
   197b4:	movwne	r1, #1
   197b8:	cmp	r0, #0
   197bc:	bne	197d0 <__assert_fail@plt+0x842c>
   197c0:	clz	r2, r6
   197c4:	lsr	r2, r2, #5
   197c8:	orrs	r1, r2, r1
   197cc:	bne	197d8 <__assert_fail@plt+0x8434>
   197d0:	str	r5, [r4]
   197d4:	pop	{r4, r5, r6, sl, fp, pc}
   197d8:	bl	19b90 <__assert_fail@plt+0x87ec>
   197dc:	push	{r4, r5, r6, r7, fp, lr}
   197e0:	add	fp, sp, #16
   197e4:	ldr	r5, [r1]
   197e8:	mov	r6, r2
   197ec:	mov	r4, r1
   197f0:	mov	r7, r0
   197f4:	cmp	r0, #0
   197f8:	beq	19810 <__assert_fail@plt+0x846c>
   197fc:	mov	r0, #1
   19800:	add	r0, r0, r5, lsr #1
   19804:	adds	r5, r5, r0
   19808:	bcc	19828 <__assert_fail@plt+0x8484>
   1980c:	b	1985c <__assert_fail@plt+0x84b8>
   19810:	cmp	r5, #0
   19814:	bne	19828 <__assert_fail@plt+0x8484>
   19818:	mov	r0, #64	; 0x40
   1981c:	cmp	r6, #64	; 0x40
   19820:	udiv	r5, r0, r6
   19824:	addhi	r5, r5, #1
   19828:	mov	r0, r7
   1982c:	mov	r1, r5
   19830:	mov	r2, r6
   19834:	bl	1a330 <__assert_fail@plt+0x8f8c>
   19838:	cmp	r0, #0
   1983c:	bne	19854 <__assert_fail@plt+0x84b0>
   19840:	cmp	r7, #0
   19844:	beq	1985c <__assert_fail@plt+0x84b8>
   19848:	cmp	r6, #0
   1984c:	cmpne	r5, #0
   19850:	bne	1985c <__assert_fail@plt+0x84b8>
   19854:	str	r5, [r4]
   19858:	pop	{r4, r5, r6, r7, fp, pc}
   1985c:	bl	19b90 <__assert_fail@plt+0x87ec>
   19860:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19864:	add	fp, sp, #24
   19868:	mov	r8, r1
   1986c:	ldr	r1, [r1]
   19870:	mov	r5, r0
   19874:	add	r0, r1, r1, asr #1
   19878:	cmp	r0, r1
   1987c:	mvnvs	r0, #-2147483648	; 0x80000000
   19880:	cmp	r0, r3
   19884:	mov	r7, r0
   19888:	movgt	r7, r3
   1988c:	cmn	r3, #1
   19890:	movle	r7, r0
   19894:	ldr	r0, [fp, #8]
   19898:	cmn	r0, #1
   1989c:	ble	198c4 <__assert_fail@plt+0x8520>
   198a0:	cmp	r0, #0
   198a4:	beq	19918 <__assert_fail@plt+0x8574>
   198a8:	cmn	r7, #1
   198ac:	ble	198ec <__assert_fail@plt+0x8548>
   198b0:	mvn	r4, #-2147483648	; 0x80000000
   198b4:	udiv	r6, r4, r0
   198b8:	cmp	r6, r7
   198bc:	bge	19918 <__assert_fail@plt+0x8574>
   198c0:	b	19928 <__assert_fail@plt+0x8584>
   198c4:	cmn	r7, #1
   198c8:	ble	19908 <__assert_fail@plt+0x8564>
   198cc:	cmn	r0, #1
   198d0:	beq	19918 <__assert_fail@plt+0x8574>
   198d4:	mov	r6, #-2147483648	; 0x80000000
   198d8:	mvn	r4, #-2147483648	; 0x80000000
   198dc:	sdiv	r6, r6, r0
   198e0:	cmp	r6, r7
   198e4:	bge	19918 <__assert_fail@plt+0x8574>
   198e8:	b	19928 <__assert_fail@plt+0x8584>
   198ec:	beq	19918 <__assert_fail@plt+0x8574>
   198f0:	mov	r6, #-2147483648	; 0x80000000
   198f4:	mvn	r4, #-2147483648	; 0x80000000
   198f8:	sdiv	r6, r6, r7
   198fc:	cmp	r6, r0
   19900:	bge	19918 <__assert_fail@plt+0x8574>
   19904:	b	19928 <__assert_fail@plt+0x8584>
   19908:	mvn	r4, #-2147483648	; 0x80000000
   1990c:	sdiv	r6, r4, r0
   19910:	cmp	r7, r6
   19914:	blt	19928 <__assert_fail@plt+0x8584>
   19918:	mul	r6, r7, r0
   1991c:	mov	r4, #64	; 0x40
   19920:	cmp	r6, #63	; 0x3f
   19924:	bgt	19930 <__assert_fail@plt+0x858c>
   19928:	sdiv	r7, r4, r0
   1992c:	mul	r6, r7, r0
   19930:	cmp	r5, #0
   19934:	moveq	r4, #0
   19938:	streq	r4, [r8]
   1993c:	sub	r4, r7, r1
   19940:	cmp	r4, r2
   19944:	bge	199f0 <__assert_fail@plt+0x864c>
   19948:	add	r7, r1, r2
   1994c:	mov	r6, #0
   19950:	mov	r2, #0
   19954:	cmp	r7, r3
   19958:	movwgt	r6, #1
   1995c:	cmn	r3, #1
   19960:	movwgt	r2, #1
   19964:	cmp	r7, r1
   19968:	bvs	19a24 <__assert_fail@plt+0x8680>
   1996c:	ands	r1, r2, r6
   19970:	bne	19a24 <__assert_fail@plt+0x8680>
   19974:	cmn	r0, #1
   19978:	ble	199a0 <__assert_fail@plt+0x85fc>
   1997c:	cmp	r0, #0
   19980:	beq	199ec <__assert_fail@plt+0x8648>
   19984:	cmn	r7, #1
   19988:	ble	199c4 <__assert_fail@plt+0x8620>
   1998c:	mvn	r1, #-2147483648	; 0x80000000
   19990:	udiv	r1, r1, r0
   19994:	cmp	r1, r7
   19998:	bge	199ec <__assert_fail@plt+0x8648>
   1999c:	b	19a24 <__assert_fail@plt+0x8680>
   199a0:	cmn	r7, #1
   199a4:	ble	199dc <__assert_fail@plt+0x8638>
   199a8:	cmn	r0, #1
   199ac:	beq	199ec <__assert_fail@plt+0x8648>
   199b0:	mov	r1, #-2147483648	; 0x80000000
   199b4:	sdiv	r1, r1, r0
   199b8:	cmp	r1, r7
   199bc:	bge	199ec <__assert_fail@plt+0x8648>
   199c0:	b	19a24 <__assert_fail@plt+0x8680>
   199c4:	beq	199ec <__assert_fail@plt+0x8648>
   199c8:	mov	r1, #-2147483648	; 0x80000000
   199cc:	sdiv	r1, r1, r7
   199d0:	cmp	r1, r0
   199d4:	bge	199ec <__assert_fail@plt+0x8648>
   199d8:	b	19a24 <__assert_fail@plt+0x8680>
   199dc:	mvn	r1, #-2147483648	; 0x80000000
   199e0:	sdiv	r1, r1, r0
   199e4:	cmp	r7, r1
   199e8:	blt	19a24 <__assert_fail@plt+0x8680>
   199ec:	mul	r6, r7, r0
   199f0:	mov	r0, r5
   199f4:	mov	r1, r6
   199f8:	bl	19cd4 <__assert_fail@plt+0x8930>
   199fc:	cmp	r6, #0
   19a00:	movwne	r6, #1
   19a04:	cmp	r0, #0
   19a08:	bne	19a1c <__assert_fail@plt+0x8678>
   19a0c:	clz	r1, r5
   19a10:	lsr	r1, r1, #5
   19a14:	orrs	r1, r1, r6
   19a18:	bne	19a24 <__assert_fail@plt+0x8680>
   19a1c:	str	r7, [r8]
   19a20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19a24:	bl	19b90 <__assert_fail@plt+0x87ec>
   19a28:	push	{fp, lr}
   19a2c:	mov	fp, sp
   19a30:	mov	r1, #1
   19a34:	bl	19c50 <__assert_fail@plt+0x88ac>
   19a38:	cmp	r0, #0
   19a3c:	popne	{fp, pc}
   19a40:	bl	19b90 <__assert_fail@plt+0x87ec>
   19a44:	push	{fp, lr}
   19a48:	mov	fp, sp
   19a4c:	bl	19c50 <__assert_fail@plt+0x88ac>
   19a50:	cmp	r0, #0
   19a54:	popne	{fp, pc}
   19a58:	bl	19b90 <__assert_fail@plt+0x87ec>
   19a5c:	push	{fp, lr}
   19a60:	mov	fp, sp
   19a64:	mov	r1, #1
   19a68:	bl	19c50 <__assert_fail@plt+0x88ac>
   19a6c:	cmp	r0, #0
   19a70:	popne	{fp, pc}
   19a74:	bl	19b90 <__assert_fail@plt+0x87ec>
   19a78:	push	{fp, lr}
   19a7c:	mov	fp, sp
   19a80:	bl	19c50 <__assert_fail@plt+0x88ac>
   19a84:	cmp	r0, #0
   19a88:	popne	{fp, pc}
   19a8c:	bl	19b90 <__assert_fail@plt+0x87ec>
   19a90:	push	{r4, r5, r6, sl, fp, lr}
   19a94:	add	fp, sp, #16
   19a98:	mov	r5, r0
   19a9c:	mov	r0, r1
   19aa0:	mov	r4, r1
   19aa4:	bl	19ca4 <__assert_fail@plt+0x8900>
   19aa8:	cmp	r0, #0
   19aac:	beq	19ac8 <__assert_fail@plt+0x8724>
   19ab0:	mov	r1, r5
   19ab4:	mov	r2, r4
   19ab8:	mov	r6, r0
   19abc:	bl	11128 <memcpy@plt>
   19ac0:	mov	r0, r6
   19ac4:	pop	{r4, r5, r6, sl, fp, pc}
   19ac8:	bl	19b90 <__assert_fail@plt+0x87ec>
   19acc:	push	{r4, r5, r6, sl, fp, lr}
   19ad0:	add	fp, sp, #16
   19ad4:	mov	r5, r0
   19ad8:	mov	r0, r1
   19adc:	mov	r4, r1
   19ae0:	bl	19ca4 <__assert_fail@plt+0x8900>
   19ae4:	cmp	r0, #0
   19ae8:	beq	19b04 <__assert_fail@plt+0x8760>
   19aec:	mov	r1, r5
   19af0:	mov	r2, r4
   19af4:	mov	r6, r0
   19af8:	bl	11128 <memcpy@plt>
   19afc:	mov	r0, r6
   19b00:	pop	{r4, r5, r6, sl, fp, pc}
   19b04:	bl	19b90 <__assert_fail@plt+0x87ec>
   19b08:	push	{r4, r5, r6, sl, fp, lr}
   19b0c:	add	fp, sp, #16
   19b10:	mov	r5, r0
   19b14:	add	r0, r1, #1
   19b18:	mov	r4, r1
   19b1c:	bl	19ca4 <__assert_fail@plt+0x8900>
   19b20:	cmp	r0, #0
   19b24:	beq	19b4c <__assert_fail@plt+0x87a8>
   19b28:	mov	r6, r0
   19b2c:	mov	r0, #0
   19b30:	mov	r1, r5
   19b34:	mov	r2, r4
   19b38:	strb	r0, [r6, r4]
   19b3c:	mov	r0, r6
   19b40:	bl	11128 <memcpy@plt>
   19b44:	mov	r0, r6
   19b48:	pop	{r4, r5, r6, sl, fp, pc}
   19b4c:	bl	19b90 <__assert_fail@plt+0x87ec>
   19b50:	push	{r4, r5, r6, sl, fp, lr}
   19b54:	add	fp, sp, #16
   19b58:	mov	r4, r0
   19b5c:	bl	1123c <strlen@plt>
   19b60:	add	r5, r0, #1
   19b64:	mov	r0, r5
   19b68:	bl	19ca4 <__assert_fail@plt+0x8900>
   19b6c:	cmp	r0, #0
   19b70:	beq	19b8c <__assert_fail@plt+0x87e8>
   19b74:	mov	r1, r4
   19b78:	mov	r2, r5
   19b7c:	mov	r6, r0
   19b80:	bl	11128 <memcpy@plt>
   19b84:	mov	r0, r6
   19b88:	pop	{r4, r5, r6, sl, fp, pc}
   19b8c:	bl	19b90 <__assert_fail@plt+0x87ec>
   19b90:	push	{fp, lr}
   19b94:	mov	fp, sp
   19b98:	movw	r0, #49440	; 0xc120
   19b9c:	movw	r1, #46480	; 0xb590
   19ba0:	mov	r2, #5
   19ba4:	movt	r0, #2
   19ba8:	movt	r1, #1
   19bac:	ldr	r4, [r0]
   19bb0:	mov	r0, #0
   19bb4:	bl	1114c <dcgettext@plt>
   19bb8:	movw	r2, #43814	; 0xab26
   19bbc:	mov	r3, r0
   19bc0:	mov	r0, r4
   19bc4:	mov	r1, #0
   19bc8:	movt	r2, #1
   19bcc:	bl	111d0 <error@plt>
   19bd0:	bl	11374 <abort@plt>
   19bd4:	push	{fp, lr}
   19bd8:	mov	fp, sp
   19bdc:	orr	r1, r1, #512	; 0x200
   19be0:	bl	12c7c <__assert_fail@plt+0x18d8>
   19be4:	cmp	r0, #0
   19be8:	popne	{fp, pc}
   19bec:	bl	11260 <__errno_location@plt>
   19bf0:	ldr	r0, [r0]
   19bf4:	cmp	r0, #22
   19bf8:	bne	19c1c <__assert_fail@plt+0x8878>
   19bfc:	movw	r0, #46497	; 0xb5a1
   19c00:	movw	r1, #46513	; 0xb5b1
   19c04:	movw	r3, #46524	; 0xb5bc
   19c08:	mov	r2, #41	; 0x29
   19c0c:	movt	r0, #1
   19c10:	movt	r1, #1
   19c14:	movt	r3, #1
   19c18:	bl	113a4 <__assert_fail@plt>
   19c1c:	bl	19b90 <__assert_fail@plt+0x87ec>
   19c20:	ldr	r0, [r0, #48]	; 0x30
   19c24:	and	r0, r0, #17
   19c28:	cmp	r0, #16
   19c2c:	moveq	r0, #1
   19c30:	bxeq	lr
   19c34:	cmp	r0, #17
   19c38:	movne	r0, #0
   19c3c:	bxne	lr
   19c40:	ldr	r0, [r1, #48]	; 0x30
   19c44:	cmp	r0, #0
   19c48:	movwne	r0, #1
   19c4c:	bx	lr
   19c50:	clz	r2, r1
   19c54:	clz	r3, r0
   19c58:	lsr	r2, r2, #5
   19c5c:	lsr	r3, r3, #5
   19c60:	orrs	r2, r3, r2
   19c64:	movwne	r1, #1
   19c68:	movwne	r0, #1
   19c6c:	cmp	r1, #0
   19c70:	beq	19ca0 <__assert_fail@plt+0x88fc>
   19c74:	mvn	r2, #-2147483648	; 0x80000000
   19c78:	udiv	r2, r2, r1
   19c7c:	cmp	r2, r0
   19c80:	bcs	19ca0 <__assert_fail@plt+0x88fc>
   19c84:	push	{fp, lr}
   19c88:	mov	fp, sp
   19c8c:	bl	11260 <__errno_location@plt>
   19c90:	mov	r1, #12
   19c94:	str	r1, [r0]
   19c98:	mov	r0, #0
   19c9c:	pop	{fp, pc}
   19ca0:	b	110c8 <calloc@plt>
   19ca4:	cmp	r0, #0
   19ca8:	movweq	r0, #1
   19cac:	cmn	r0, #1
   19cb0:	ble	19cb8 <__assert_fail@plt+0x8914>
   19cb4:	b	111e8 <malloc@plt>
   19cb8:	push	{fp, lr}
   19cbc:	mov	fp, sp
   19cc0:	bl	11260 <__errno_location@plt>
   19cc4:	mov	r1, #12
   19cc8:	str	r1, [r0]
   19ccc:	mov	r0, #0
   19cd0:	pop	{fp, pc}
   19cd4:	push	{fp, lr}
   19cd8:	mov	fp, sp
   19cdc:	cmp	r0, #0
   19ce0:	beq	19cfc <__assert_fail@plt+0x8958>
   19ce4:	cmp	r1, #0
   19ce8:	beq	19d08 <__assert_fail@plt+0x8964>
   19cec:	cmn	r1, #1
   19cf0:	ble	19d14 <__assert_fail@plt+0x8970>
   19cf4:	pop	{fp, lr}
   19cf8:	b	11158 <realloc@plt>
   19cfc:	mov	r0, r1
   19d00:	pop	{fp, lr}
   19d04:	b	19ca4 <__assert_fail@plt+0x8900>
   19d08:	bl	1a1cc <__assert_fail@plt+0x8e28>
   19d0c:	mov	r0, #0
   19d10:	pop	{fp, pc}
   19d14:	bl	11260 <__errno_location@plt>
   19d18:	mov	r1, #12
   19d1c:	str	r1, [r0]
   19d20:	mov	r0, #0
   19d24:	pop	{fp, pc}
   19d28:	push	{r4, r5, r6, sl, fp, lr}
   19d2c:	add	fp, sp, #16
   19d30:	mov	r4, r0
   19d34:	bl	111b8 <__fpending@plt>
   19d38:	ldr	r6, [r4]
   19d3c:	mov	r5, r0
   19d40:	mov	r0, r4
   19d44:	bl	19ea0 <__assert_fail@plt+0x8afc>
   19d48:	tst	r6, #32
   19d4c:	bne	19d84 <__assert_fail@plt+0x89e0>
   19d50:	cmp	r0, #0
   19d54:	mov	r4, r0
   19d58:	mvnne	r4, #0
   19d5c:	cmp	r5, #0
   19d60:	bne	19d90 <__assert_fail@plt+0x89ec>
   19d64:	cmp	r0, #0
   19d68:	beq	19d90 <__assert_fail@plt+0x89ec>
   19d6c:	bl	11260 <__errno_location@plt>
   19d70:	ldr	r0, [r0]
   19d74:	subs	r4, r0, #9
   19d78:	mvnne	r4, #0
   19d7c:	mov	r0, r4
   19d80:	pop	{r4, r5, r6, sl, fp, pc}
   19d84:	mvn	r4, #0
   19d88:	cmp	r0, #0
   19d8c:	beq	19d98 <__assert_fail@plt+0x89f4>
   19d90:	mov	r0, r4
   19d94:	pop	{r4, r5, r6, sl, fp, pc}
   19d98:	bl	11260 <__errno_location@plt>
   19d9c:	mov	r1, #0
   19da0:	str	r1, [r0]
   19da4:	mov	r0, r4
   19da8:	pop	{r4, r5, r6, sl, fp, pc}
   19dac:	movw	r2, #62998	; 0xf616
   19db0:	mov	r1, #0
   19db4:	movt	r2, #149	; 0x95
   19db8:	str	r1, [r0, #16]
   19dbc:	str	r1, [r0, #20]
   19dc0:	str	r2, [r0, #24]
   19dc4:	bx	lr
   19dc8:	push	{r4, r5, r6, r7, fp, lr}
   19dcc:	add	fp, sp, #16
   19dd0:	ldr	r2, [r0, #24]
   19dd4:	movw	r3, #62998	; 0xf616
   19dd8:	movt	r3, #149	; 0x95
   19ddc:	cmp	r2, r3
   19de0:	bne	19e80 <__assert_fail@plt+0x8adc>
   19de4:	mov	r3, r0
   19de8:	ldr	r2, [r3, #16]!
   19dec:	ldr	lr, [r3, #4]
   19df0:	orrs	r5, r2, lr
   19df4:	beq	19e2c <__assert_fail@plt+0x8a88>
   19df8:	ldrd	r4, [r0]
   19dfc:	ldrd	r6, [r1, #96]	; 0x60
   19e00:	eor	r7, r7, r5
   19e04:	eor	r6, r6, r4
   19e08:	orrs	r7, r6, r7
   19e0c:	bne	19e2c <__assert_fail@plt+0x8a88>
   19e10:	ldrd	r4, [r0, #8]
   19e14:	ldrd	r6, [r1]
   19e18:	mov	ip, #1
   19e1c:	eor	r7, r7, r5
   19e20:	eor	r6, r6, r4
   19e24:	orrs	r7, r6, r7
   19e28:	beq	19e4c <__assert_fail@plt+0x8aa8>
   19e2c:	adds	r4, r2, #1
   19e30:	mov	ip, #0
   19e34:	adc	r5, lr, #0
   19e38:	and	r2, r4, r2
   19e3c:	strd	r4, [r3]
   19e40:	and	r3, r5, lr
   19e44:	orrs	r2, r2, r3
   19e48:	beq	19e54 <__assert_fail@plt+0x8ab0>
   19e4c:	mov	r0, ip
   19e50:	pop	{r4, r5, r6, r7, fp, pc}
   19e54:	orrs	r2, r4, r5
   19e58:	moveq	ip, #1
   19e5c:	moveq	r0, ip
   19e60:	popeq	{r4, r5, r6, r7, fp, pc}
   19e64:	ldrd	r2, [r1]
   19e68:	str	r3, [r0, #12]
   19e6c:	str	r2, [r0, #8]
   19e70:	ldrd	r2, [r1, #96]	; 0x60
   19e74:	stm	r0, {r2, r3}
   19e78:	mov	r0, ip
   19e7c:	pop	{r4, r5, r6, r7, fp, pc}
   19e80:	movw	r0, #46602	; 0xb60a
   19e84:	movw	r1, #46626	; 0xb622
   19e88:	movw	r3, #46644	; 0xb634
   19e8c:	mov	r2, #60	; 0x3c
   19e90:	movt	r0, #1
   19e94:	movt	r1, #1
   19e98:	movt	r3, #1
   19e9c:	bl	113a4 <__assert_fail@plt>
   19ea0:	push	{r4, r5, r6, sl, fp, lr}
   19ea4:	add	fp, sp, #16
   19ea8:	sub	sp, sp, #8
   19eac:	mov	r4, r0
   19eb0:	bl	1129c <fileno@plt>
   19eb4:	cmn	r0, #1
   19eb8:	ble	19f2c <__assert_fail@plt+0x8b88>
   19ebc:	mov	r0, r4
   19ec0:	bl	11200 <__freading@plt>
   19ec4:	cmp	r0, #0
   19ec8:	beq	19ef4 <__assert_fail@plt+0x8b50>
   19ecc:	mov	r0, r4
   19ed0:	bl	1129c <fileno@plt>
   19ed4:	mov	r1, #1
   19ed8:	mov	r2, #0
   19edc:	mov	r3, #0
   19ee0:	str	r1, [sp]
   19ee4:	bl	111a0 <lseek64@plt>
   19ee8:	and	r0, r0, r1
   19eec:	cmn	r0, #1
   19ef0:	beq	19f2c <__assert_fail@plt+0x8b88>
   19ef4:	mov	r0, r4
   19ef8:	bl	1a164 <__assert_fail@plt+0x8dc0>
   19efc:	cmp	r0, #0
   19f00:	beq	19f2c <__assert_fail@plt+0x8b88>
   19f04:	bl	11260 <__errno_location@plt>
   19f08:	ldr	r6, [r0]
   19f0c:	mov	r5, r0
   19f10:	mov	r0, r4
   19f14:	bl	112b4 <fclose@plt>
   19f18:	cmp	r6, #0
   19f1c:	strne	r6, [r5]
   19f20:	mvnne	r0, #0
   19f24:	sub	sp, fp, #16
   19f28:	pop	{r4, r5, r6, sl, fp, pc}
   19f2c:	mov	r0, r4
   19f30:	sub	sp, fp, #16
   19f34:	pop	{r4, r5, r6, sl, fp, lr}
   19f38:	b	112b4 <fclose@plt>
   19f3c:	sub	sp, sp, #8
   19f40:	push	{r4, r5, r6, r7, fp, lr}
   19f44:	add	fp, sp, #16
   19f48:	sub	sp, sp, #8
   19f4c:	mov	r5, r0
   19f50:	add	r0, fp, #8
   19f54:	cmp	r1, #11
   19f58:	str	r3, [fp, #12]
   19f5c:	str	r2, [fp, #8]
   19f60:	str	r0, [sp, #4]
   19f64:	bhi	19fa0 <__assert_fail@plt+0x8bfc>
   19f68:	mov	r0, #1
   19f6c:	movw	r2, #1300	; 0x514
   19f70:	tst	r2, r0, lsl r1
   19f74:	bne	1a060 <__assert_fail@plt+0x8cbc>
   19f78:	movw	r2, #2570	; 0xa0a
   19f7c:	tst	r2, r0, lsl r1
   19f80:	bne	19fc8 <__assert_fail@plt+0x8c24>
   19f84:	cmp	r1, #0
   19f88:	bne	19fa0 <__assert_fail@plt+0x8bfc>
   19f8c:	ldr	r0, [sp, #4]
   19f90:	add	r1, r0, #4
   19f94:	str	r1, [sp, #4]
   19f98:	mov	r1, #0
   19f9c:	b	1a06c <__assert_fail@plt+0x8cc8>
   19fa0:	sub	r0, r1, #1024	; 0x400
   19fa4:	cmp	r0, #10
   19fa8:	bhi	1a060 <__assert_fail@plt+0x8cbc>
   19fac:	mov	r2, #1
   19fb0:	movw	r3, #645	; 0x285
   19fb4:	tst	r3, r2, lsl r0
   19fb8:	bne	1a060 <__assert_fail@plt+0x8cbc>
   19fbc:	movw	r3, #1282	; 0x502
   19fc0:	tst	r3, r2, lsl r0
   19fc4:	beq	19fd4 <__assert_fail@plt+0x8c30>
   19fc8:	mov	r0, r5
   19fcc:	bl	112cc <fcntl64@plt>
   19fd0:	b	1a078 <__assert_fail@plt+0x8cd4>
   19fd4:	cmp	r0, #6
   19fd8:	bne	1a060 <__assert_fail@plt+0x8cbc>
   19fdc:	ldr	r0, [sp, #4]
   19fe0:	movw	r7, #49896	; 0xc2e8
   19fe4:	movt	r7, #2
   19fe8:	add	r1, r0, #4
   19fec:	str	r1, [sp, #4]
   19ff0:	ldr	r6, [r0]
   19ff4:	ldr	r0, [r7]
   19ff8:	cmp	r0, #0
   19ffc:	blt	1a09c <__assert_fail@plt+0x8cf8>
   1a000:	mov	r0, r5
   1a004:	movw	r1, #1030	; 0x406
   1a008:	mov	r2, r6
   1a00c:	bl	112cc <fcntl64@plt>
   1a010:	mov	r4, r0
   1a014:	cmn	r0, #1
   1a018:	bgt	1a090 <__assert_fail@plt+0x8cec>
   1a01c:	bl	11260 <__errno_location@plt>
   1a020:	ldr	r0, [r0]
   1a024:	cmp	r0, #22
   1a028:	bne	1a090 <__assert_fail@plt+0x8cec>
   1a02c:	mov	r0, r5
   1a030:	mov	r1, #0
   1a034:	mov	r2, r6
   1a038:	bl	112cc <fcntl64@plt>
   1a03c:	mov	r4, r0
   1a040:	cmp	r0, #0
   1a044:	blt	1a07c <__assert_fail@plt+0x8cd8>
   1a048:	mvn	r0, #0
   1a04c:	str	r0, [r7]
   1a050:	mov	r0, #1
   1a054:	cmp	r0, #0
   1a058:	bne	1a0c8 <__assert_fail@plt+0x8d24>
   1a05c:	b	1a07c <__assert_fail@plt+0x8cd8>
   1a060:	ldr	r0, [sp, #4]
   1a064:	add	r2, r0, #4
   1a068:	str	r2, [sp, #4]
   1a06c:	ldr	r2, [r0]
   1a070:	mov	r0, r5
   1a074:	bl	112cc <fcntl64@plt>
   1a078:	mov	r4, r0
   1a07c:	mov	r0, r4
   1a080:	sub	sp, fp, #16
   1a084:	pop	{r4, r5, r6, r7, fp, lr}
   1a088:	add	sp, sp, #8
   1a08c:	bx	lr
   1a090:	mov	r0, #1
   1a094:	str	r0, [r7]
   1a098:	b	1a07c <__assert_fail@plt+0x8cd8>
   1a09c:	mov	r0, r5
   1a0a0:	mov	r1, #0
   1a0a4:	mov	r2, r6
   1a0a8:	bl	112cc <fcntl64@plt>
   1a0ac:	mov	r4, r0
   1a0b0:	ldr	r0, [r7]
   1a0b4:	add	r0, r0, #1
   1a0b8:	clz	r0, r0
   1a0bc:	lsr	r0, r0, #5
   1a0c0:	cmp	r0, #0
   1a0c4:	beq	1a07c <__assert_fail@plt+0x8cd8>
   1a0c8:	cmp	r4, #0
   1a0cc:	blt	1a07c <__assert_fail@plt+0x8cd8>
   1a0d0:	mov	r0, r4
   1a0d4:	mov	r1, #1
   1a0d8:	bl	112cc <fcntl64@plt>
   1a0dc:	cmp	r0, #0
   1a0e0:	blt	1a0fc <__assert_fail@plt+0x8d58>
   1a0e4:	orr	r2, r0, #1
   1a0e8:	mov	r0, r4
   1a0ec:	mov	r1, #2
   1a0f0:	bl	112cc <fcntl64@plt>
   1a0f4:	cmn	r0, #1
   1a0f8:	bne	1a07c <__assert_fail@plt+0x8cd8>
   1a0fc:	bl	11260 <__errno_location@plt>
   1a100:	ldr	r6, [r0]
   1a104:	mov	r5, r0
   1a108:	mov	r0, r4
   1a10c:	bl	11380 <close@plt>
   1a110:	str	r6, [r5]
   1a114:	mvn	r4, #0
   1a118:	b	1a07c <__assert_fail@plt+0x8cd8>
   1a11c:	sub	sp, sp, #8
   1a120:	push	{fp, lr}
   1a124:	mov	fp, sp
   1a128:	sub	sp, sp, #8
   1a12c:	str	r2, [fp, #8]
   1a130:	mov	r2, #0
   1a134:	tst	r1, #64	; 0x40
   1a138:	str	r3, [fp, #12]
   1a13c:	addne	r2, fp, #8
   1a140:	orrne	r2, r2, #4
   1a144:	strne	r2, [sp, #4]
   1a148:	ldrne	r2, [fp, #8]
   1a14c:	bl	111dc <open64@plt>
   1a150:	bl	18f2c <__assert_fail@plt+0x7b88>
   1a154:	mov	sp, fp
   1a158:	pop	{fp, lr}
   1a15c:	add	sp, sp, #8
   1a160:	bx	lr
   1a164:	push	{r4, sl, fp, lr}
   1a168:	add	fp, sp, #8
   1a16c:	sub	sp, sp, #8
   1a170:	mov	r4, r0
   1a174:	cmp	r0, #0
   1a178:	beq	1a194 <__assert_fail@plt+0x8df0>
   1a17c:	mov	r0, r4
   1a180:	bl	11200 <__freading@plt>
   1a184:	cmp	r0, #0
   1a188:	ldrbne	r0, [r4, #1]
   1a18c:	tstne	r0, #1
   1a190:	bne	1a1a4 <__assert_fail@plt+0x8e00>
   1a194:	mov	r0, r4
   1a198:	sub	sp, fp, #8
   1a19c:	pop	{r4, sl, fp, lr}
   1a1a0:	b	110f8 <fflush@plt>
   1a1a4:	mov	r0, #1
   1a1a8:	mov	r2, #0
   1a1ac:	mov	r3, #0
   1a1b0:	str	r0, [sp]
   1a1b4:	mov	r0, r4
   1a1b8:	bl	1a1f4 <__assert_fail@plt+0x8e50>
   1a1bc:	mov	r0, r4
   1a1c0:	sub	sp, fp, #8
   1a1c4:	pop	{r4, sl, fp, lr}
   1a1c8:	b	110f8 <fflush@plt>
   1a1cc:	push	{r4, r5, r6, sl, fp, lr}
   1a1d0:	add	fp, sp, #16
   1a1d4:	mov	r4, r0
   1a1d8:	bl	11260 <__errno_location@plt>
   1a1dc:	ldr	r6, [r0]
   1a1e0:	mov	r5, r0
   1a1e4:	mov	r0, r4
   1a1e8:	bl	11110 <free@plt>
   1a1ec:	str	r6, [r5]
   1a1f0:	pop	{r4, r5, r6, sl, fp, pc}
   1a1f4:	push	{r4, r5, r6, r7, fp, lr}
   1a1f8:	add	fp, sp, #16
   1a1fc:	sub	sp, sp, #8
   1a200:	mov	r4, r0
   1a204:	ldr	r0, [r0, #4]
   1a208:	mov	r5, r3
   1a20c:	mov	r6, r2
   1a210:	ldr	r1, [r4, #8]
   1a214:	cmp	r1, r0
   1a218:	bne	1a234 <__assert_fail@plt+0x8e90>
   1a21c:	ldrd	r0, [r4, #16]
   1a220:	cmp	r1, r0
   1a224:	bne	1a234 <__assert_fail@plt+0x8e90>
   1a228:	ldr	r0, [r4, #36]	; 0x24
   1a22c:	cmp	r0, #0
   1a230:	beq	1a24c <__assert_fail@plt+0x8ea8>
   1a234:	mov	r0, r4
   1a238:	mov	r2, r6
   1a23c:	mov	r3, r5
   1a240:	sub	sp, fp, #16
   1a244:	pop	{r4, r5, r6, r7, fp, lr}
   1a248:	b	112c0 <fseeko64@plt>
   1a24c:	ldr	r7, [fp, #8]
   1a250:	mov	r0, r4
   1a254:	bl	1129c <fileno@plt>
   1a258:	mov	r2, r6
   1a25c:	mov	r3, r5
   1a260:	str	r7, [sp]
   1a264:	bl	111a0 <lseek64@plt>
   1a268:	and	r2, r0, r1
   1a26c:	cmn	r2, #1
   1a270:	mvneq	r0, #0
   1a274:	subeq	sp, fp, #16
   1a278:	popeq	{r4, r5, r6, r7, fp, pc}
   1a27c:	strd	r0, [r4, #80]	; 0x50
   1a280:	ldr	r0, [r4]
   1a284:	bic	r0, r0, #16
   1a288:	str	r0, [r4]
   1a28c:	mov	r0, #0
   1a290:	sub	sp, fp, #16
   1a294:	pop	{r4, r5, r6, r7, fp, pc}
   1a298:	push	{fp, lr}
   1a29c:	mov	fp, sp
   1a2a0:	mov	r0, #14
   1a2a4:	bl	112f0 <nl_langinfo@plt>
   1a2a8:	movw	r1, #42906	; 0xa79a
   1a2ac:	cmp	r0, #0
   1a2b0:	movt	r1, #1
   1a2b4:	movne	r1, r0
   1a2b8:	movw	r0, #46711	; 0xb677
   1a2bc:	ldrb	r2, [r1]
   1a2c0:	movt	r0, #1
   1a2c4:	cmp	r2, #0
   1a2c8:	movne	r0, r1
   1a2cc:	pop	{fp, pc}
   1a2d0:	push	{r4, r5, r6, r7, fp, lr}
   1a2d4:	add	fp, sp, #16
   1a2d8:	sub	sp, sp, #8
   1a2dc:	add	r5, sp, #4
   1a2e0:	cmp	r0, #0
   1a2e4:	mov	r7, r2
   1a2e8:	mov	r4, r1
   1a2ec:	movne	r5, r0
   1a2f0:	mov	r0, r5
   1a2f4:	bl	111c4 <mbrtowc@plt>
   1a2f8:	mov	r6, r0
   1a2fc:	cmp	r7, #0
   1a300:	beq	1a324 <__assert_fail@plt+0x8f80>
   1a304:	cmn	r6, #2
   1a308:	bcc	1a324 <__assert_fail@plt+0x8f80>
   1a30c:	mov	r0, #0
   1a310:	bl	1a378 <__assert_fail@plt+0x8fd4>
   1a314:	cmp	r0, #0
   1a318:	ldrbeq	r0, [r4]
   1a31c:	moveq	r6, #1
   1a320:	streq	r0, [r5]
   1a324:	mov	r0, r6
   1a328:	sub	sp, fp, #16
   1a32c:	pop	{r4, r5, r6, r7, fp, pc}
   1a330:	cmp	r2, #0
   1a334:	beq	1a364 <__assert_fail@plt+0x8fc0>
   1a338:	mvn	r3, #0
   1a33c:	udiv	r3, r3, r2
   1a340:	cmp	r3, r1
   1a344:	bcs	1a364 <__assert_fail@plt+0x8fc0>
   1a348:	push	{fp, lr}
   1a34c:	mov	fp, sp
   1a350:	bl	11260 <__errno_location@plt>
   1a354:	mov	r1, #12
   1a358:	str	r1, [r0]
   1a35c:	mov	r0, #0
   1a360:	pop	{fp, pc}
   1a364:	mul	r1, r2, r1
   1a368:	b	19cd4 <__assert_fail@plt+0x8930>
   1a36c:	mov	r1, #0
   1a370:	mov	r2, #3
   1a374:	b	19f3c <__assert_fail@plt+0x8b98>
   1a378:	push	{r4, sl, fp, lr}
   1a37c:	add	fp, sp, #8
   1a380:	sub	sp, sp, #264	; 0x108
   1a384:	add	r1, sp, #7
   1a388:	movw	r2, #257	; 0x101
   1a38c:	bl	1a3dc <__assert_fail@plt+0x9038>
   1a390:	mov	r4, #0
   1a394:	cmp	r0, #0
   1a398:	bne	1a3d0 <__assert_fail@plt+0x902c>
   1a39c:	movw	r1, #46717	; 0xb67d
   1a3a0:	add	r0, sp, #7
   1a3a4:	movt	r1, #1
   1a3a8:	bl	110ec <strcmp@plt>
   1a3ac:	cmp	r0, #0
   1a3b0:	beq	1a3d0 <__assert_fail@plt+0x902c>
   1a3b4:	movw	r1, #46719	; 0xb67f
   1a3b8:	add	r0, sp, #7
   1a3bc:	movt	r1, #1
   1a3c0:	bl	110ec <strcmp@plt>
   1a3c4:	mov	r4, r0
   1a3c8:	cmp	r0, #0
   1a3cc:	movwne	r4, #1
   1a3d0:	mov	r0, r4
   1a3d4:	sub	sp, fp, #8
   1a3d8:	pop	{r4, sl, fp, pc}
   1a3dc:	push	{r4, r5, r6, r7, fp, lr}
   1a3e0:	add	fp, sp, #16
   1a3e4:	mov	r4, r1
   1a3e8:	mov	r1, #0
   1a3ec:	mov	r6, r2
   1a3f0:	bl	112d8 <setlocale@plt>
   1a3f4:	cmp	r0, #0
   1a3f8:	beq	1a428 <__assert_fail@plt+0x9084>
   1a3fc:	mov	r7, r0
   1a400:	bl	1123c <strlen@plt>
   1a404:	cmp	r0, r6
   1a408:	bcs	1a448 <__assert_fail@plt+0x90a4>
   1a40c:	add	r2, r0, #1
   1a410:	mov	r0, r4
   1a414:	mov	r1, r7
   1a418:	bl	11128 <memcpy@plt>
   1a41c:	mov	r5, #0
   1a420:	mov	r0, r5
   1a424:	pop	{r4, r5, r6, r7, fp, pc}
   1a428:	cmp	r6, #0
   1a42c:	mov	r5, #22
   1a430:	movne	r0, #0
   1a434:	strbne	r0, [r4]
   1a438:	movne	r0, r5
   1a43c:	popne	{r4, r5, r6, r7, fp, pc}
   1a440:	mov	r0, r5
   1a444:	pop	{r4, r5, r6, r7, fp, pc}
   1a448:	mov	r5, #34	; 0x22
   1a44c:	cmp	r6, #0
   1a450:	beq	1a470 <__assert_fail@plt+0x90cc>
   1a454:	sub	r6, r6, #1
   1a458:	mov	r0, r4
   1a45c:	mov	r1, r7
   1a460:	mov	r2, r6
   1a464:	bl	11128 <memcpy@plt>
   1a468:	mov	r0, #0
   1a46c:	strb	r0, [r4, r6]
   1a470:	mov	r0, r5
   1a474:	pop	{r4, r5, r6, r7, fp, pc}
   1a478:	mov	r1, #0
   1a47c:	b	112d8 <setlocale@plt>
   1a480:	cmp	r3, #0
   1a484:	cmpeq	r2, #0
   1a488:	bne	1a4a0 <__assert_fail@plt+0x90fc>
   1a48c:	cmp	r1, #0
   1a490:	cmpeq	r0, #0
   1a494:	mvnne	r1, #0
   1a498:	mvnne	r0, #0
   1a49c:	b	1a4bc <__assert_fail@plt+0x9118>
   1a4a0:	sub	sp, sp, #8
   1a4a4:	push	{sp, lr}
   1a4a8:	bl	1a4cc <__assert_fail@plt+0x9128>
   1a4ac:	ldr	lr, [sp, #4]
   1a4b0:	add	sp, sp, #8
   1a4b4:	pop	{r2, r3}
   1a4b8:	bx	lr
   1a4bc:	push	{r1, lr}
   1a4c0:	mov	r0, #8
   1a4c4:	bl	110e0 <raise@plt>
   1a4c8:	pop	{r1, pc}
   1a4cc:	cmp	r1, r3
   1a4d0:	cmpeq	r0, r2
   1a4d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4d8:	mov	r4, r0
   1a4dc:	movcc	r0, #0
   1a4e0:	mov	r5, r1
   1a4e4:	ldr	lr, [sp, #36]	; 0x24
   1a4e8:	movcc	r1, r0
   1a4ec:	bcc	1a5e8 <__assert_fail@plt+0x9244>
   1a4f0:	cmp	r3, #0
   1a4f4:	clzeq	ip, r2
   1a4f8:	clzne	ip, r3
   1a4fc:	addeq	ip, ip, #32
   1a500:	cmp	r5, #0
   1a504:	clzeq	r1, r4
   1a508:	addeq	r1, r1, #32
   1a50c:	clzne	r1, r5
   1a510:	sub	ip, ip, r1
   1a514:	sub	sl, ip, #32
   1a518:	lsl	r9, r3, ip
   1a51c:	rsb	fp, ip, #32
   1a520:	orr	r9, r9, r2, lsl sl
   1a524:	orr	r9, r9, r2, lsr fp
   1a528:	lsl	r8, r2, ip
   1a52c:	cmp	r5, r9
   1a530:	cmpeq	r4, r8
   1a534:	movcc	r0, #0
   1a538:	movcc	r1, r0
   1a53c:	bcc	1a558 <__assert_fail@plt+0x91b4>
   1a540:	mov	r0, #1
   1a544:	subs	r4, r4, r8
   1a548:	lsl	r1, r0, sl
   1a54c:	orr	r1, r1, r0, lsr fp
   1a550:	lsl	r0, r0, ip
   1a554:	sbc	r5, r5, r9
   1a558:	cmp	ip, #0
   1a55c:	beq	1a5e8 <__assert_fail@plt+0x9244>
   1a560:	lsr	r6, r8, #1
   1a564:	orr	r6, r6, r9, lsl #31
   1a568:	lsr	r7, r9, #1
   1a56c:	mov	r2, ip
   1a570:	b	1a594 <__assert_fail@plt+0x91f0>
   1a574:	subs	r3, r4, r6
   1a578:	sbc	r8, r5, r7
   1a57c:	adds	r3, r3, r3
   1a580:	adc	r8, r8, r8
   1a584:	adds	r4, r3, #1
   1a588:	adc	r5, r8, #0
   1a58c:	subs	r2, r2, #1
   1a590:	beq	1a5b0 <__assert_fail@plt+0x920c>
   1a594:	cmp	r5, r7
   1a598:	cmpeq	r4, r6
   1a59c:	bcs	1a574 <__assert_fail@plt+0x91d0>
   1a5a0:	adds	r4, r4, r4
   1a5a4:	adc	r5, r5, r5
   1a5a8:	subs	r2, r2, #1
   1a5ac:	bne	1a594 <__assert_fail@plt+0x91f0>
   1a5b0:	lsr	r3, r4, ip
   1a5b4:	orr	r3, r3, r5, lsl fp
   1a5b8:	lsr	r2, r5, ip
   1a5bc:	orr	r3, r3, r5, lsr sl
   1a5c0:	adds	r0, r0, r4
   1a5c4:	mov	r4, r3
   1a5c8:	lsl	r3, r2, ip
   1a5cc:	orr	r3, r3, r4, lsl sl
   1a5d0:	lsl	ip, r4, ip
   1a5d4:	orr	r3, r3, r4, lsr fp
   1a5d8:	adc	r1, r1, r5
   1a5dc:	subs	r0, r0, ip
   1a5e0:	mov	r5, r2
   1a5e4:	sbc	r1, r1, r3
   1a5e8:	cmp	lr, #0
   1a5ec:	strdne	r4, [lr]
   1a5f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a5f8:	mov	r7, r0
   1a5fc:	ldr	r6, [pc, #72]	; 1a64c <__assert_fail@plt+0x92a8>
   1a600:	ldr	r5, [pc, #72]	; 1a650 <__assert_fail@plt+0x92ac>
   1a604:	add	r6, pc, r6
   1a608:	add	r5, pc, r5
   1a60c:	sub	r6, r6, r5
   1a610:	mov	r8, r1
   1a614:	mov	r9, r2
   1a618:	bl	1109c <fstatfs64@plt-0x20>
   1a61c:	asrs	r6, r6, #2
   1a620:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a624:	mov	r4, #0
   1a628:	add	r4, r4, #1
   1a62c:	ldr	r3, [r5], #4
   1a630:	mov	r2, r9
   1a634:	mov	r1, r8
   1a638:	mov	r0, r7
   1a63c:	blx	r3
   1a640:	cmp	r6, r4
   1a644:	bne	1a628 <__assert_fail@plt+0x9284>
   1a648:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a64c:	andeq	r1, r1, r0, lsl #18
   1a650:	strdeq	r1, [r1], -r8
   1a654:	bx	lr
   1a658:	ldr	r3, [pc, #12]	; 1a66c <__assert_fail@plt+0x92c8>
   1a65c:	mov	r1, #0
   1a660:	add	r3, pc, r3
   1a664:	ldr	r2, [r3]
   1a668:	b	11278 <__cxa_atexit@plt>
   1a66c:	andeq	r1, r1, ip, lsr #21

Disassembly of section .fini:

0001a670 <.fini>:
   1a670:	push	{r3, lr}
   1a674:	pop	{r3, pc}
