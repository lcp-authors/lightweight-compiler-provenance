
../repos/coreutils/src/expr:     file format elf32-littlearm


Disassembly of section .init:

00010f24 <.init>:
   10f24:	push	{r3, lr}
   10f28:	bl	11554 <__assert_fail@plt+0x2f8>
   10f2c:	pop	{r3, pc}

Disassembly of section .plt:

00010f30 <pthread_mutex_unlock@plt-0x14>:
   10f30:	push	{lr}		; (str lr, [sp, #-4]!)
   10f34:	ldr	lr, [pc, #4]	; 10f40 <pthread_mutex_unlock@plt-0x4>
   10f38:	add	lr, pc, lr
   10f3c:	ldr	pc, [lr, #8]!
   10f40:	andeq	lr, r2, r0, asr #1

00010f44 <pthread_mutex_unlock@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #188416	; 0x2e000
   10f4c:	ldr	pc, [ip, #192]!	; 0xc0

00010f50 <calloc@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #188416	; 0x2e000
   10f58:	ldr	pc, [ip, #184]!	; 0xb8

00010f5c <fputs_unlocked@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #188416	; 0x2e000
   10f64:	ldr	pc, [ip, #176]!	; 0xb0

00010f68 <wctype@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #188416	; 0x2e000
   10f70:	ldr	pc, [ip, #168]!	; 0xa8

00010f74 <raise@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #188416	; 0x2e000
   10f7c:	ldr	pc, [ip, #160]!	; 0xa0

00010f80 <wcrtomb@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #188416	; 0x2e000
   10f88:	ldr	pc, [ip, #152]!	; 0x98

00010f8c <iswctype@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #188416	; 0x2e000
   10f94:	ldr	pc, [ip, #144]!	; 0x90

00010f98 <strcmp@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #188416	; 0x2e000
   10fa0:	ldr	pc, [ip, #136]!	; 0x88

00010fa4 <strcspn@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #188416	; 0x2e000
   10fac:	ldr	pc, [ip, #128]!	; 0x80

00010fb0 <pthread_mutex_destroy@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #188416	; 0x2e000
   10fb8:	ldr	pc, [ip, #120]!	; 0x78

00010fbc <fflush@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #188416	; 0x2e000
   10fc4:	ldr	pc, [ip, #112]!	; 0x70

00010fc8 <wcwidth@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #188416	; 0x2e000
   10fd0:	ldr	pc, [ip, #104]!	; 0x68

00010fd4 <memmove@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #188416	; 0x2e000
   10fdc:	ldr	pc, [ip, #96]!	; 0x60

00010fe0 <free@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #188416	; 0x2e000
   10fe8:	ldr	pc, [ip, #88]!	; 0x58

00010fec <pthread_mutex_lock@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #188416	; 0x2e000
   10ff4:	ldr	pc, [ip, #80]!	; 0x50

00010ff8 <_exit@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #188416	; 0x2e000
   11000:	ldr	pc, [ip, #72]!	; 0x48

00011004 <memcpy@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #188416	; 0x2e000
   1100c:	ldr	pc, [ip, #64]!	; 0x40

00011010 <pthread_mutex_init@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #188416	; 0x2e000
   11018:	ldr	pc, [ip, #56]!	; 0x38

0001101c <towlower@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #188416	; 0x2e000
   11024:	ldr	pc, [ip, #48]!	; 0x30

00011028 <mbsinit@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #188416	; 0x2e000
   11030:	ldr	pc, [ip, #40]!	; 0x28

00011034 <memcmp@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #188416	; 0x2e000
   1103c:	ldr	pc, [ip, #32]!

00011040 <fputc_unlocked@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #188416	; 0x2e000
   11048:	ldr	pc, [ip, #24]!

0001104c <dcgettext@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #188416	; 0x2e000
   11054:	ldr	pc, [ip, #16]!

00011058 <realloc@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #188416	; 0x2e000
   11060:	ldr	pc, [ip, #8]!

00011064 <textdomain@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #188416	; 0x2e000
   1106c:	ldr	pc, [ip, #0]!

00011070 <iswcntrl@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #184320	; 0x2d000
   11078:	ldr	pc, [ip, #4088]!	; 0xff8

0001107c <iswprint@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #184320	; 0x2d000
   11084:	ldr	pc, [ip, #4080]!	; 0xff0

00011088 <fwrite@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #184320	; 0x2d000
   11090:	ldr	pc, [ip, #4072]!	; 0xfe8

00011094 <lseek64@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #184320	; 0x2d000
   1109c:	ldr	pc, [ip, #4064]!	; 0xfe0

000110a0 <__ctype_get_mb_cur_max@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #184320	; 0x2d000
   110a8:	ldr	pc, [ip, #4056]!	; 0xfd8

000110ac <__fpending@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #184320	; 0x2d000
   110b4:	ldr	pc, [ip, #4048]!	; 0xfd0

000110b8 <mbrtowc@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #184320	; 0x2d000
   110c0:	ldr	pc, [ip, #4040]!	; 0xfc8

000110c4 <error@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #184320	; 0x2d000
   110cc:	ldr	pc, [ip, #4032]!	; 0xfc0

000110d0 <strcoll@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #184320	; 0x2d000
   110d8:	ldr	pc, [ip, #4024]!	; 0xfb8

000110dc <puts@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #184320	; 0x2d000
   110e4:	ldr	pc, [ip, #4016]!	; 0xfb0

000110e8 <malloc@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #184320	; 0x2d000
   110f0:	ldr	pc, [ip, #4008]!	; 0xfa8

000110f4 <__libc_start_main@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #184320	; 0x2d000
   110fc:	ldr	pc, [ip, #4000]!	; 0xfa0

00011100 <__freading@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #184320	; 0x2d000
   11108:	ldr	pc, [ip, #3992]!	; 0xf98

0001110c <__ctype_tolower_loc@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #184320	; 0x2d000
   11114:	ldr	pc, [ip, #3984]!	; 0xf90

00011118 <__ctype_toupper_loc@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #184320	; 0x2d000
   11120:	ldr	pc, [ip, #3976]!	; 0xf88

00011124 <__gmon_start__@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #184320	; 0x2d000
   1112c:	ldr	pc, [ip, #3968]!	; 0xf80

00011130 <mempcpy@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #184320	; 0x2d000
   11138:	ldr	pc, [ip, #3960]!	; 0xf78

0001113c <getopt_long@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #184320	; 0x2d000
   11144:	ldr	pc, [ip, #3952]!	; 0xf70

00011148 <__ctype_b_loc@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #184320	; 0x2d000
   11150:	ldr	pc, [ip, #3944]!	; 0xf68

00011154 <exit@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #184320	; 0x2d000
   1115c:	ldr	pc, [ip, #3936]!	; 0xf60

00011160 <strlen@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #184320	; 0x2d000
   11168:	ldr	pc, [ip, #3928]!	; 0xf58

0001116c <strchr@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #184320	; 0x2d000
   11174:	ldr	pc, [ip, #3920]!	; 0xf50

00011178 <__errno_location@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #184320	; 0x2d000
   11180:	ldr	pc, [ip, #3912]!	; 0xf48

00011184 <iswalnum@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #184320	; 0x2d000
   1118c:	ldr	pc, [ip, #3904]!	; 0xf40

00011190 <__cxa_atexit@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #184320	; 0x2d000
   11198:	ldr	pc, [ip, #3896]!	; 0xf38

0001119c <memset@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #184320	; 0x2d000
   111a4:	ldr	pc, [ip, #3888]!	; 0xf30

000111a8 <btowc@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #184320	; 0x2d000
   111b0:	ldr	pc, [ip, #3880]!	; 0xf28

000111b4 <__printf_chk@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #184320	; 0x2d000
   111bc:	ldr	pc, [ip, #3872]!	; 0xf20

000111c0 <fileno@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #184320	; 0x2d000
   111c8:	ldr	pc, [ip, #3864]!	; 0xf18

000111cc <__fprintf_chk@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #184320	; 0x2d000
   111d4:	ldr	pc, [ip, #3856]!	; 0xf10

000111d8 <memchr@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #184320	; 0x2d000
   111e0:	ldr	pc, [ip, #3848]!	; 0xf08

000111e4 <fclose@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #184320	; 0x2d000
   111ec:	ldr	pc, [ip, #3840]!	; 0xf00

000111f0 <fseeko64@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #184320	; 0x2d000
   111f8:	ldr	pc, [ip, #3832]!	; 0xef8

000111fc <__overflow@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #184320	; 0x2d000
   11204:	ldr	pc, [ip, #3824]!	; 0xef0

00011208 <setlocale@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #184320	; 0x2d000
   11210:	ldr	pc, [ip, #3816]!	; 0xee8

00011214 <strrchr@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #184320	; 0x2d000
   1121c:	ldr	pc, [ip, #3808]!	; 0xee0

00011220 <nl_langinfo@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #184320	; 0x2d000
   11228:	ldr	pc, [ip, #3800]!	; 0xed8

0001122c <bindtextdomain@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #184320	; 0x2d000
   11234:	ldr	pc, [ip, #3792]!	; 0xed0

00011238 <towupper@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #184320	; 0x2d000
   11240:	ldr	pc, [ip, #3784]!	; 0xec8

00011244 <strncmp@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #184320	; 0x2d000
   1124c:	ldr	pc, [ip, #3776]!	; 0xec0

00011250 <abort@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #184320	; 0x2d000
   11258:	ldr	pc, [ip, #3768]!	; 0xeb8

0001125c <__assert_fail@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #184320	; 0x2d000
   11264:	ldr	pc, [ip, #3760]!	; 0xeb0

Disassembly of section .text:

00011268 <.text>:
   11268:	push	{r4, lr}
   1126c:	mov	r2, #5
   11270:	ldr	r1, [pc, #52]	; 112ac <__assert_fail@plt+0x50>
   11274:	mov	r0, #0
   11278:	bl	1104c <dcgettext@plt>
   1127c:	ldr	r3, [pc, #44]	; 112b0 <__assert_fail@plt+0x54>
   11280:	mov	r1, #8
   11284:	ldr	r3, [r3]
   11288:	ldr	r2, [r3, #-4]
   1128c:	mov	r4, r0
   11290:	mov	r0, #0
   11294:	bl	1d7a8 <__assert_fail@plt+0xc54c>
   11298:	mov	r2, r4
   1129c:	mov	r1, #0
   112a0:	mov	r3, r0
   112a4:	mov	r0, #2
   112a8:	bl	110c4 <error@plt>
   112ac:	andeq	ip, r2, r4, ror #13
   112b0:	muleq	r3, r8, r1
   112b4:	ldr	r1, [pc, #24]	; 112d4 <__assert_fail@plt+0x78>
   112b8:	mov	r3, r0
   112bc:	push	{r4, lr}
   112c0:	ldr	r2, [pc, #16]	; 112d8 <__assert_fail@plt+0x7c>
   112c4:	ldr	r0, [r1]
   112c8:	mov	r1, #1
   112cc:	bl	111cc <__fprintf_chk@plt>
   112d0:	bl	11250 <abort@plt>
   112d4:	andeq	pc, r3, r8, lsl #3
   112d8:	andeq	sp, r2, r8, lsl #30
   112dc:	push	{r4, lr}
   112e0:	ldr	r3, [pc, #12]	; 112f4 <__assert_fail@plt+0x98>
   112e4:	ldr	r2, [pc, #12]	; 112f8 <__assert_fail@plt+0x9c>
   112e8:	ldr	r1, [pc, #12]	; 112fc <__assert_fail@plt+0xa0>
   112ec:	ldr	r0, [pc, #12]	; 11300 <__assert_fail@plt+0xa4>
   112f0:	bl	1125c <__assert_fail@plt>
   112f4:			; <UNDEFINED> instruction: 0x0002d2b8
   112f8:			; <UNDEFINED> instruction: 0x000001ba
   112fc:	andeq	sp, r2, r8, ror r5
   11300:	andeq	sp, r2, ip, lsr r6
   11304:	push	{r4, lr}
   11308:	ldr	r3, [pc, #12]	; 1131c <__assert_fail@plt+0xc0>
   1130c:	ldr	r2, [pc, #12]	; 11320 <__assert_fail@plt+0xc4>
   11310:	ldr	r1, [pc, #12]	; 11324 <__assert_fail@plt+0xc8>
   11314:	ldr	r0, [pc, #12]	; 11328 <__assert_fail@plt+0xcc>
   11318:	bl	1125c <__assert_fail@plt>
   1131c:	andeq	sp, r2, r4, asr #5
   11320:	andeq	r0, r0, sp, ror #3
   11324:	andeq	sp, r2, r8, ror r5
   11328:	andeq	sp, r2, ip, lsr r6
   1132c:	push	{r4, r5, r6, lr}
   11330:	mov	r5, r0
   11334:	sub	sp, sp, #24
   11338:	ldr	r0, [r1]
   1133c:	mov	r4, r1
   11340:	bl	1bb94 <__assert_fail@plt+0xa938>
   11344:	ldr	r1, [pc, #392]	; 114d4 <__assert_fail@plt+0x278>
   11348:	mov	r0, #6
   1134c:	bl	11208 <setlocale@plt>
   11350:	ldr	r1, [pc, #384]	; 114d8 <__assert_fail@plt+0x27c>
   11354:	ldr	r0, [pc, #384]	; 114dc <__assert_fail@plt+0x280>
   11358:	bl	1122c <bindtextdomain@plt>
   1135c:	ldr	r0, [pc, #376]	; 114dc <__assert_fail@plt+0x280>
   11360:	bl	11064 <textdomain@plt>
   11364:	ldr	r3, [pc, #372]	; 114e0 <__assert_fail@plt+0x284>
   11368:	mov	r2, #3
   1136c:	ldr	r0, [pc, #368]	; 114e4 <__assert_fail@plt+0x288>
   11370:	str	r2, [r3]
   11374:	bl	2c674 <__assert_fail@plt+0x1b418>
   11378:	ldr	r3, [pc, #360]	; 114e8 <__assert_fail@plt+0x28c>
   1137c:	ldr	lr, [pc, #360]	; 114ec <__assert_fail@plt+0x290>
   11380:	ldr	ip, [pc, #360]	; 114f0 <__assert_fail@plt+0x294>
   11384:	ldr	r2, [pc, #360]	; 114f4 <__assert_fail@plt+0x298>
   11388:	ldr	r6, [pc, #360]	; 114f8 <__assert_fail@plt+0x29c>
   1138c:	str	r3, [sp, #12]
   11390:	mov	r3, #0
   11394:	stm	sp, {r2, ip, lr}
   11398:	mov	r1, r4
   1139c:	str	r3, [sp, #20]
   113a0:	mov	r0, r5
   113a4:	str	r6, [sp, #16]
   113a8:	ldr	r3, [pc, #332]	; 114fc <__assert_fail@plt+0x2a0>
   113ac:	ldr	r2, [pc, #332]	; 11500 <__assert_fail@plt+0x2a4>
   113b0:	bl	1b540 <__assert_fail@plt+0xa2e4>
   113b4:	cmp	r5, #1
   113b8:	bls	1143c <__assert_fail@plt+0x1e0>
   113bc:	ldr	r1, [pc, #320]	; 11504 <__assert_fail@plt+0x2a8>
   113c0:	ldr	r0, [r4, #4]
   113c4:	bl	10f98 <strcmp@plt>
   113c8:	cmp	r0, #0
   113cc:	beq	11430 <__assert_fail@plt+0x1d4>
   113d0:	ldr	r5, [pc, #304]	; 11508 <__assert_fail@plt+0x2ac>
   113d4:	add	r4, r4, #4
   113d8:	mov	r0, #1
   113dc:	str	r4, [r5]
   113e0:	bl	12b1c <__assert_fail@plt+0x18c0>
   113e4:	ldr	r4, [r5]
   113e8:	ldr	r3, [r4]
   113ec:	cmp	r3, #0
   113f0:	mov	r6, r0
   113f4:	beq	11464 <__assert_fail@plt+0x208>
   113f8:	mov	r2, #5
   113fc:	ldr	r1, [pc, #264]	; 1150c <__assert_fail@plt+0x2b0>
   11400:	mov	r0, #0
   11404:	bl	1104c <dcgettext@plt>
   11408:	ldr	r2, [r4]
   1140c:	mov	r1, #8
   11410:	mov	r5, r0
   11414:	mov	r0, #0
   11418:	bl	1d7a8 <__assert_fail@plt+0xc54c>
   1141c:	mov	r2, r5
   11420:	mov	r1, #0
   11424:	mov	r3, r0
   11428:	mov	r0, #2
   1142c:	bl	110c4 <error@plt>
   11430:	cmp	r5, #2
   11434:	add	r4, r4, #4
   11438:	bne	113d0 <__assert_fail@plt+0x174>
   1143c:	mov	r2, #5
   11440:	ldr	r1, [pc, #200]	; 11510 <__assert_fail@plt+0x2b4>
   11444:	mov	r0, #0
   11448:	bl	1104c <dcgettext@plt>
   1144c:	mov	r1, #0
   11450:	mov	r2, r0
   11454:	mov	r0, r1
   11458:	bl	110c4 <error@plt>
   1145c:	mov	r0, #2
   11460:	bl	12bd4 <__assert_fail@plt+0x1978>
   11464:	ldr	r3, [r0]
   11468:	cmp	r3, #0
   1146c:	beq	11490 <__assert_fail@plt+0x234>
   11470:	cmp	r3, #1
   11474:	bne	1148c <__assert_fail@plt+0x230>
   11478:	ldr	r0, [r0, #4]
   1147c:	bl	110dc <puts@plt>
   11480:	mov	r0, r6
   11484:	bl	116f0 <__assert_fail@plt+0x494>
   11488:	bl	11154 <exit@plt>
   1148c:	bl	11250 <abort@plt>
   11490:	ldr	r4, [pc, #124]	; 11514 <__assert_fail@plt+0x2b8>
   11494:	add	r2, r0, #4
   11498:	mov	r1, #10
   1149c:	ldr	r0, [r4]
   114a0:	bl	1b044 <__assert_fail@plt+0x9de8>
   114a4:	ldr	r0, [r4]
   114a8:	ldr	r3, [r0, #20]
   114ac:	ldr	r2, [r0, #24]
   114b0:	cmp	r3, r2
   114b4:	addcc	r1, r3, #1
   114b8:	movcc	r2, #10
   114bc:	strcc	r1, [r0, #20]
   114c0:	strbcc	r2, [r3]
   114c4:	bcc	11480 <__assert_fail@plt+0x224>
   114c8:	mov	r1, #10
   114cc:	bl	111fc <__overflow@plt>
   114d0:	b	11480 <__assert_fail@plt+0x224>
   114d4:	andeq	ip, r2, ip, ror #23
   114d8:	andeq	sp, r2, ip, asr r1
   114dc:	strheq	sp, [r2], -r4
   114e0:	andeq	pc, r3, r4, lsr #2
   114e4:			; <UNDEFINED> instruction: 0x00012fb4
   114e8:	andeq	sp, r2, r0, lsl #3
   114ec:	muleq	r2, r0, r1
   114f0:	ldrdeq	r2, [r1], -r4
   114f4:	muleq	r2, ip, r1
   114f8:	andeq	sp, r2, r4, ror r1
   114fc:	strheq	sp, [r2], -r0
   11500:	andeq	ip, r2, r4, lsl #17
   11504:	andeq	sp, r2, ip, lsr #3
   11508:	muleq	r3, r8, r1
   1150c:	andeq	sp, r2, r0, asr #3
   11510:			; <UNDEFINED> instruction: 0x0002d1b0
   11514:	andeq	pc, r3, ip, lsl #3
   11518:	mov	fp, #0
   1151c:	mov	lr, #0
   11520:	pop	{r1}		; (ldr r1, [sp], #4)
   11524:	mov	r2, sp
   11528:	push	{r2}		; (str r2, [sp, #-4]!)
   1152c:	push	{r0}		; (str r0, [sp, #-4]!)
   11530:	ldr	ip, [pc, #16]	; 11548 <__assert_fail@plt+0x2ec>
   11534:	push	{ip}		; (str ip, [sp, #-4]!)
   11538:	ldr	r0, [pc, #12]	; 1154c <__assert_fail@plt+0x2f0>
   1153c:	ldr	r3, [pc, #12]	; 11550 <__assert_fail@plt+0x2f4>
   11540:	bl	110f4 <__libc_start_main@plt>
   11544:	bl	11250 <abort@plt>
   11548:	andeq	ip, r2, r0, ror r6
   1154c:	andeq	r1, r1, ip, lsr #6
   11550:	andeq	ip, r2, r0, lsl r6
   11554:	ldr	r3, [pc, #20]	; 11570 <__assert_fail@plt+0x314>
   11558:	ldr	r2, [pc, #20]	; 11574 <__assert_fail@plt+0x318>
   1155c:	add	r3, pc, r3
   11560:	ldr	r2, [r3, r2]
   11564:	cmp	r2, #0
   11568:	bxeq	lr
   1156c:	b	11124 <__gmon_start__@plt>
   11570:	muleq	r2, ip, sl
   11574:	andeq	r0, r0, r8, lsl r1
   11578:	ldr	r3, [pc, #28]	; 1159c <__assert_fail@plt+0x340>
   1157c:	ldr	r0, [pc, #28]	; 115a0 <__assert_fail@plt+0x344>
   11580:	sub	r3, r3, r0
   11584:	cmp	r3, #6
   11588:	bxls	lr
   1158c:	ldr	r3, [pc, #16]	; 115a4 <__assert_fail@plt+0x348>
   11590:	cmp	r3, #0
   11594:	bxeq	lr
   11598:	bx	r3
   1159c:	andeq	pc, r3, r7, ror r1	; <UNPREDICTABLE>
   115a0:	andeq	pc, r3, r4, ror r1	; <UNPREDICTABLE>
   115a4:	andeq	r0, r0, r0
   115a8:	ldr	r1, [pc, #36]	; 115d4 <__assert_fail@plt+0x378>
   115ac:	ldr	r0, [pc, #36]	; 115d8 <__assert_fail@plt+0x37c>
   115b0:	sub	r1, r1, r0
   115b4:	asr	r1, r1, #2
   115b8:	add	r1, r1, r1, lsr #31
   115bc:	asrs	r1, r1, #1
   115c0:	bxeq	lr
   115c4:	ldr	r3, [pc, #16]	; 115dc <__assert_fail@plt+0x380>
   115c8:	cmp	r3, #0
   115cc:	bxeq	lr
   115d0:	bx	r3
   115d4:	andeq	pc, r3, r4, ror r1	; <UNPREDICTABLE>
   115d8:	andeq	pc, r3, r4, ror r1	; <UNPREDICTABLE>
   115dc:	andeq	r0, r0, r0
   115e0:	push	{r4, lr}
   115e4:	ldr	r4, [pc, #24]	; 11604 <__assert_fail@plt+0x3a8>
   115e8:	ldrb	r3, [r4]
   115ec:	cmp	r3, #0
   115f0:	popne	{r4, pc}
   115f4:	bl	11578 <__assert_fail@plt+0x31c>
   115f8:	mov	r3, #1
   115fc:	strb	r3, [r4]
   11600:	pop	{r4, pc}
   11604:	muleq	r3, r4, r1
   11608:	ldr	r0, [pc, #40]	; 11638 <__assert_fail@plt+0x3dc>
   1160c:	ldr	r3, [r0]
   11610:	cmp	r3, #0
   11614:	bne	1161c <__assert_fail@plt+0x3c0>
   11618:	b	115a8 <__assert_fail@plt+0x34c>
   1161c:	ldr	r3, [pc, #24]	; 1163c <__assert_fail@plt+0x3e0>
   11620:	cmp	r3, #0
   11624:	beq	11618 <__assert_fail@plt+0x3bc>
   11628:	push	{r4, lr}
   1162c:	blx	r3
   11630:	pop	{r4, lr}
   11634:	b	115a8 <__assert_fail@plt+0x34c>
   11638:	andeq	lr, r3, r4, lsl pc
   1163c:	andeq	r0, r0, r0
   11640:	push	{r4, r5, r6, lr}
   11644:	ldr	r5, [pc, #52]	; 11680 <__assert_fail@plt+0x424>
   11648:	ldr	r4, [r5]
   1164c:	ldr	r3, [r4]
   11650:	cmp	r3, #0
   11654:	beq	11678 <__assert_fail@plt+0x41c>
   11658:	mov	r1, r0
   1165c:	mov	r0, r3
   11660:	bl	10f98 <strcmp@plt>
   11664:	clz	r0, r0
   11668:	lsr	r0, r0, #5
   1166c:	add	r4, r4, r0, lsl #2
   11670:	str	r4, [r5]
   11674:	pop	{r4, r5, r6, pc}
   11678:	mov	r0, r3
   1167c:	pop	{r4, r5, r6, pc}
   11680:	muleq	r3, r8, r1
   11684:	push	{r4, r5, r6, lr}
   11688:	mov	r5, r0
   1168c:	mov	r0, #16
   11690:	bl	2b704 <__assert_fail@plt+0x1a4a8>
   11694:	mov	r3, #1
   11698:	mov	r4, r0
   1169c:	mov	r0, r5
   116a0:	str	r3, [r4]
   116a4:	bl	2bc30 <__assert_fail@plt+0x1a9d4>
   116a8:	str	r0, [r4, #4]
   116ac:	mov	r0, r4
   116b0:	pop	{r4, r5, r6, pc}
   116b4:	ldr	r3, [r0]
   116b8:	push	{r4, lr}
   116bc:	cmp	r3, #1
   116c0:	mov	r4, r0
   116c4:	beq	116dc <__assert_fail@plt+0x480>
   116c8:	add	r0, r0, #4
   116cc:	bl	1580c <__assert_fail@plt+0x45b0>
   116d0:	mov	r0, r4
   116d4:	pop	{r4, lr}
   116d8:	b	13098 <__assert_fail@plt+0x1e3c>
   116dc:	ldr	r0, [r0, #4]
   116e0:	bl	13098 <__assert_fail@plt+0x1e3c>
   116e4:	mov	r0, r4
   116e8:	pop	{r4, lr}
   116ec:	b	13098 <__assert_fail@plt+0x1e3c>
   116f0:	ldr	r3, [r0]
   116f4:	push	{r4, lr}
   116f8:	cmp	r3, #0
   116fc:	beq	11750 <__assert_fail@plt+0x4f4>
   11700:	cmp	r3, #1
   11704:	bne	1174c <__assert_fail@plt+0x4f0>
   11708:	ldr	r1, [r0, #4]
   1170c:	ldrb	r2, [r1]
   11710:	cmp	r2, #0
   11714:	beq	11764 <__assert_fail@plt+0x508>
   11718:	sub	r3, r2, #45	; 0x2d
   1171c:	clz	r3, r3
   11720:	lsr	r3, r3, #5
   11724:	add	r2, r1, r3
   11728:	ldrb	r3, [r1, r3]
   1172c:	b	1173c <__assert_fail@plt+0x4e0>
   11730:	ldrb	r3, [r2, #1]!
   11734:	cmp	r3, #0
   11738:	beq	11764 <__assert_fail@plt+0x508>
   1173c:	cmp	r3, #48	; 0x30
   11740:	beq	11730 <__assert_fail@plt+0x4d4>
   11744:	mov	r0, #0
   11748:	pop	{r4, pc}
   1174c:	bl	11250 <abort@plt>
   11750:	add	r0, r0, #4
   11754:	bl	15f3c <__assert_fail@plt+0x4ce0>
   11758:	clz	r0, r0
   1175c:	lsr	r0, r0, #5
   11760:	pop	{r4, pc}
   11764:	mov	r0, #1
   11768:	pop	{r4, pc}
   1176c:	push	{r4, lr}
   11770:	mov	r4, r0
   11774:	bl	15f3c <__assert_fail@plt+0x4ce0>
   11778:	cmp	r0, #0
   1177c:	bge	11788 <__assert_fail@plt+0x52c>
   11780:	mvn	r0, #0
   11784:	pop	{r4, pc}
   11788:	mov	r0, r4
   1178c:	bl	15960 <__assert_fail@plt+0x4704>
   11790:	cmp	r0, #0
   11794:	bne	117a0 <__assert_fail@plt+0x544>
   11798:	mvn	r0, #1
   1179c:	pop	{r4, pc}
   117a0:	mov	r0, r4
   117a4:	bl	15b2c <__assert_fail@plt+0x48d0>
   117a8:	cmn	r0, #1
   117ac:	beq	11798 <__assert_fail@plt+0x53c>
   117b0:	pop	{r4, pc}
   117b4:	ldr	r3, [r0]
   117b8:	cmp	r3, #0
   117bc:	beq	11814 <__assert_fail@plt+0x5b8>
   117c0:	cmp	r3, #1
   117c4:	push	{r4, r5, r6, lr}
   117c8:	mov	r5, r0
   117cc:	bne	11810 <__assert_fail@plt+0x5b4>
   117d0:	ldr	r6, [r0, #4]
   117d4:	ldrb	r1, [r6]
   117d8:	sub	r1, r1, #45	; 0x2d
   117dc:	clz	r1, r1
   117e0:	lsr	r1, r1, #5
   117e4:	add	r2, r6, r1
   117e8:	ldrb	r4, [r6, r1]
   117ec:	b	117fc <__assert_fail@plt+0x5a0>
   117f0:	ldrb	r4, [r2, #1]!
   117f4:	cmp	r4, #0
   117f8:	beq	1181c <__assert_fail@plt+0x5c0>
   117fc:	sub	r4, r4, #48	; 0x30
   11800:	cmp	r4, #9
   11804:	bls	117f0 <__assert_fail@plt+0x594>
   11808:	mov	r0, #0
   1180c:	pop	{r4, r5, r6, pc}
   11810:	bl	11250 <abort@plt>
   11814:	mov	r0, #1
   11818:	bx	lr
   1181c:	mov	r2, #10
   11820:	mov	r1, r6
   11824:	add	r0, r5, #4
   11828:	bl	1b020 <__assert_fail@plt+0x9dc4>
   1182c:	cmp	r0, #0
   11830:	bne	11848 <__assert_fail@plt+0x5ec>
   11834:	mov	r0, r6
   11838:	bl	13098 <__assert_fail@plt+0x1e3c>
   1183c:	str	r4, [r5]
   11840:	mov	r0, #1
   11844:	pop	{r4, r5, r6, pc}
   11848:	mov	r3, r6
   1184c:	ldr	r2, [pc, #8]	; 1185c <__assert_fail@plt+0x600>
   11850:	mov	r1, #34	; 0x22
   11854:	mov	r0, #3
   11858:	bl	110c4 <error@plt>
   1185c:	andeq	sp, r2, r4, ror #4
   11860:	push	{r4, r5, r6, lr}
   11864:	mov	r4, r0
   11868:	ldr	r0, [r0]
   1186c:	cmp	r0, #0
   11870:	beq	11880 <__assert_fail@plt+0x624>
   11874:	cmp	r0, #1
   11878:	popeq	{r4, r5, r6, pc}
   1187c:	bl	11250 <abort@plt>
   11880:	add	r5, r4, #4
   11884:	mov	r2, r5
   11888:	mov	r1, #10
   1188c:	bl	1aaa4 <__assert_fail@plt+0x9848>
   11890:	mov	r6, r0
   11894:	mov	r0, r5
   11898:	bl	1580c <__assert_fail@plt+0x45b0>
   1189c:	mov	r3, #1
   118a0:	stm	r4, {r3, r6}
   118a4:	pop	{r4, r5, r6, pc}
   118a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   118ac:	mov	r4, r1
   118b0:	sub	sp, sp, #368	; 0x170
   118b4:	mov	r7, r0
   118b8:	bl	11860 <__assert_fail@plt+0x604>
   118bc:	mov	r0, r4
   118c0:	bl	11860 <__assert_fail@plt+0x604>
   118c4:	ldr	r5, [r4, #4]
   118c8:	ldr	r2, [pc, #840]	; 11c18 <__assert_fail@plt+0x9bc>
   118cc:	ldr	r1, [pc, #840]	; 11c1c <__assert_fail@plt+0x9c0>
   118d0:	mov	r4, #0
   118d4:	add	r3, sp, #112	; 0x70
   118d8:	mov	r0, r5
   118dc:	str	r1, [r2]
   118e0:	str	r3, [sp, #40]	; 0x28
   118e4:	str	r4, [sp, #12]
   118e8:	str	r4, [sp, #16]
   118ec:	str	r4, [sp, #20]
   118f0:	str	r4, [sp, #24]
   118f4:	str	r4, [sp, #28]
   118f8:	str	r4, [sp, #44]	; 0x2c
   118fc:	bl	11160 <strlen@plt>
   11900:	add	r2, sp, #24
   11904:	mov	r1, r0
   11908:	mov	r0, r5
   1190c:	bl	2a564 <__assert_fail@plt+0x19308>
   11910:	subs	r8, r0, #0
   11914:	bne	11bbc <__assert_fail@plt+0x960>
   11918:	ldrb	r3, [sp, #52]	; 0x34
   1191c:	ldr	r4, [r7, #4]
   11920:	bic	r3, r3, #128	; 0x80
   11924:	mov	r0, r4
   11928:	strb	r3, [sp, #52]	; 0x34
   1192c:	bl	11160 <strlen@plt>
   11930:	add	r3, sp, #12
   11934:	str	r3, [sp]
   11938:	mov	r1, r4
   1193c:	mov	r3, r8
   11940:	mov	r2, r0
   11944:	add	r0, sp, #24
   11948:	bl	2ae48 <__assert_fail@plt+0x19bec>
   1194c:	subs	r6, r0, #0
   11950:	blt	119c8 <__assert_fail@plt+0x76c>
   11954:	ldr	r5, [sp, #48]	; 0x30
   11958:	cmp	r5, #0
   1195c:	beq	119ec <__assert_fail@plt+0x790>
   11960:	ldr	r3, [sp, #20]
   11964:	ldr	r3, [r3, #4]
   11968:	cmp	r3, #0
   1196c:	blt	119dc <__assert_fail@plt+0x780>
   11970:	ldr	r2, [r7, #4]
   11974:	strb	r8, [r2, r3]
   11978:	ldr	r3, [sp, #16]
   1197c:	ldr	r0, [r7, #4]
   11980:	ldr	r3, [r3, #4]
   11984:	add	r0, r0, r3
   11988:	bl	11684 <__assert_fail@plt+0x428>
   1198c:	mov	r4, r0
   11990:	ldr	r3, [sp, #12]
   11994:	cmp	r3, #0
   11998:	beq	119ac <__assert_fail@plt+0x750>
   1199c:	ldr	r0, [sp, #16]
   119a0:	bl	13098 <__assert_fail@plt+0x1e3c>
   119a4:	ldr	r0, [sp, #20]
   119a8:	bl	13098 <__assert_fail@plt+0x1e3c>
   119ac:	add	r0, sp, #24
   119b0:	mov	r3, #0
   119b4:	str	r3, [sp, #40]	; 0x28
   119b8:	bl	2aca8 <__assert_fail@plt+0x19a4c>
   119bc:	mov	r0, r4
   119c0:	add	sp, sp, #368	; 0x170
   119c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   119c8:	cmn	r6, #1
   119cc:	bne	11bd0 <__assert_fail@plt+0x974>
   119d0:	ldr	r5, [sp, #48]	; 0x30
   119d4:	cmp	r5, #0
   119d8:	beq	11a84 <__assert_fail@plt+0x828>
   119dc:	ldr	r0, [pc, #572]	; 11c20 <__assert_fail@plt+0x9c4>
   119e0:	bl	11684 <__assert_fail@plt+0x428>
   119e4:	mov	r4, r0
   119e8:	b	11990 <__assert_fail@plt+0x734>
   119ec:	bl	110a0 <__ctype_get_mb_cur_max@plt>
   119f0:	cmp	r0, #1
   119f4:	beq	11aa0 <__assert_fail@plt+0x844>
   119f8:	ldr	sl, [pc, #548]	; 11c24 <__assert_fail@plt+0x9c8>
   119fc:	ldr	r9, [r7, #4]
   11a00:	mov	r8, r5
   11a04:	mov	r7, #1
   11a08:	str	r9, [sp, #72]	; 0x48
   11a0c:	strb	r5, [sp, #56]	; 0x38
   11a10:	str	r5, [sp, #60]	; 0x3c
   11a14:	strb	r5, [sp, #68]	; 0x44
   11a18:	str	r5, [sp, #64]	; 0x40
   11a1c:	ldrb	r3, [sp, #56]	; 0x38
   11a20:	ldr	r4, [sp, #72]	; 0x48
   11a24:	cmp	r3, #0
   11a28:	bne	11abc <__assert_fail@plt+0x860>
   11a2c:	ldrb	r3, [r4]
   11a30:	and	r2, r3, #31
   11a34:	lsr	r3, r3, #5
   11a38:	ldr	r3, [sl, r3, lsl #2]
   11a3c:	lsr	r3, r3, r2
   11a40:	tst	r3, #1
   11a44:	beq	11aa8 <__assert_fail@plt+0x84c>
   11a48:	str	r7, [sp, #76]	; 0x4c
   11a4c:	ldrb	r4, [r4]
   11a50:	strb	r7, [sp, #80]	; 0x50
   11a54:	strb	r7, [sp, #68]	; 0x44
   11a58:	cmp	r4, #0
   11a5c:	str	r4, [sp, #84]	; 0x54
   11a60:	bne	11b20 <__assert_fail@plt+0x8c4>
   11a64:	mov	r0, #16
   11a68:	bl	2b704 <__assert_fail@plt+0x1a4a8>
   11a6c:	mov	r3, #0
   11a70:	mov	r1, r5
   11a74:	mov	r4, r0
   11a78:	str	r3, [r0], #4
   11a7c:	bl	15920 <__assert_fail@plt+0x46c4>
   11a80:	b	11990 <__assert_fail@plt+0x734>
   11a84:	mov	r0, #16
   11a88:	bl	2b704 <__assert_fail@plt+0x1a4a8>
   11a8c:	mov	r1, r5
   11a90:	mov	r4, r0
   11a94:	str	r5, [r0], #4
   11a98:	bl	15920 <__assert_fail@plt+0x46c4>
   11a9c:	b	11990 <__assert_fail@plt+0x734>
   11aa0:	mov	r5, r6
   11aa4:	b	11a64 <__assert_fail@plt+0x808>
   11aa8:	add	r0, sp, #60	; 0x3c
   11aac:	bl	11028 <mbsinit@plt>
   11ab0:	cmp	r0, #0
   11ab4:	beq	11ba8 <__assert_fail@plt+0x94c>
   11ab8:	strb	r7, [sp, #56]	; 0x38
   11abc:	bl	110a0 <__ctype_get_mb_cur_max@plt>
   11ac0:	mov	r1, r0
   11ac4:	mov	r0, r4
   11ac8:	bl	2af6c <__assert_fail@plt+0x19d10>
   11acc:	add	r3, sp, #60	; 0x3c
   11ad0:	mov	r1, r4
   11ad4:	mov	r2, r0
   11ad8:	add	r0, sp, #84	; 0x54
   11adc:	bl	1b770 <__assert_fail@plt+0xa514>
   11ae0:	cmn	r0, #1
   11ae4:	str	r0, [sp, #76]	; 0x4c
   11ae8:	beq	11b48 <__assert_fail@plt+0x8ec>
   11aec:	cmn	r0, #2
   11af0:	beq	11b90 <__assert_fail@plt+0x934>
   11af4:	cmp	r0, #0
   11af8:	beq	11b5c <__assert_fail@plt+0x900>
   11afc:	ldr	r4, [sp, #84]	; 0x54
   11b00:	add	r0, sp, #60	; 0x3c
   11b04:	strb	r7, [sp, #80]	; 0x50
   11b08:	bl	11028 <mbsinit@plt>
   11b0c:	strb	r7, [sp, #68]	; 0x44
   11b10:	cmp	r0, #0
   11b14:	strbne	r8, [sp, #56]	; 0x38
   11b18:	cmp	r4, #0
   11b1c:	beq	11a64 <__assert_fail@plt+0x808>
   11b20:	ldr	r4, [sp, #72]	; 0x48
   11b24:	sub	r3, r4, r9
   11b28:	cmp	r6, r3
   11b2c:	bls	11a64 <__assert_fail@plt+0x808>
   11b30:	ldr	r3, [sp, #76]	; 0x4c
   11b34:	add	r5, r5, #1
   11b38:	add	r4, r4, r3
   11b3c:	strb	r8, [sp, #68]	; 0x44
   11b40:	str	r4, [sp, #72]	; 0x48
   11b44:	b	11a1c <__assert_fail@plt+0x7c0>
   11b48:	ldr	r4, [sp, #72]	; 0x48
   11b4c:	str	r7, [sp, #76]	; 0x4c
   11b50:	strb	r8, [sp, #80]	; 0x50
   11b54:	strb	r7, [sp, #68]	; 0x44
   11b58:	b	11b24 <__assert_fail@plt+0x8c8>
   11b5c:	ldr	r4, [sp, #72]	; 0x48
   11b60:	str	r7, [sp, #76]	; 0x4c
   11b64:	ldrb	r3, [r4]
   11b68:	cmp	r3, #0
   11b6c:	bne	11c04 <__assert_fail@plt+0x9a8>
   11b70:	ldr	r4, [sp, #84]	; 0x54
   11b74:	cmp	r4, #0
   11b78:	beq	11b00 <__assert_fail@plt+0x8a4>
   11b7c:	ldr	r3, [pc, #164]	; 11c28 <__assert_fail@plt+0x9cc>
   11b80:	mov	r2, #172	; 0xac
   11b84:	ldr	r1, [pc, #160]	; 11c2c <__assert_fail@plt+0x9d0>
   11b88:	ldr	r0, [pc, #160]	; 11c30 <__assert_fail@plt+0x9d4>
   11b8c:	bl	1125c <__assert_fail@plt>
   11b90:	ldr	r4, [sp, #72]	; 0x48
   11b94:	mov	r0, r4
   11b98:	bl	11160 <strlen@plt>
   11b9c:	strb	r8, [sp, #80]	; 0x50
   11ba0:	str	r0, [sp, #76]	; 0x4c
   11ba4:	b	11b54 <__assert_fail@plt+0x8f8>
   11ba8:	ldr	r3, [pc, #120]	; 11c28 <__assert_fail@plt+0x9cc>
   11bac:	mov	r2, #143	; 0x8f
   11bb0:	ldr	r1, [pc, #116]	; 11c2c <__assert_fail@plt+0x9d0>
   11bb4:	ldr	r0, [pc, #120]	; 11c34 <__assert_fail@plt+0x9d8>
   11bb8:	bl	1125c <__assert_fail@plt>
   11bbc:	mov	r3, r8
   11bc0:	mov	r1, r4
   11bc4:	ldr	r2, [pc, #108]	; 11c38 <__assert_fail@plt+0x9dc>
   11bc8:	mov	r0, #2
   11bcc:	bl	110c4 <error@plt>
   11bd0:	cmn	r6, #2
   11bd4:	movne	r4, #75	; 0x4b
   11bd8:	bne	11be4 <__assert_fail@plt+0x988>
   11bdc:	bl	11178 <__errno_location@plt>
   11be0:	ldr	r4, [r0]
   11be4:	mov	r2, #5
   11be8:	ldr	r1, [pc, #76]	; 11c3c <__assert_fail@plt+0x9e0>
   11bec:	mov	r0, #0
   11bf0:	bl	1104c <dcgettext@plt>
   11bf4:	mov	r1, r4
   11bf8:	mov	r2, r0
   11bfc:	mov	r0, #3
   11c00:	bl	110c4 <error@plt>
   11c04:	ldr	r3, [pc, #28]	; 11c28 <__assert_fail@plt+0x9cc>
   11c08:	mov	r2, #171	; 0xab
   11c0c:	ldr	r1, [pc, #24]	; 11c2c <__assert_fail@plt+0x9d0>
   11c10:	ldr	r0, [pc, #40]	; 11c40 <__assert_fail@plt+0x9e4>
   11c14:	bl	1125c <__assert_fail@plt>
   11c18:	ldrdeq	pc, [r3], -r8
   11c1c:	andeq	r0, r0, r6, asr #5
   11c20:	andeq	ip, r2, ip, ror #23
   11c24:	andeq	sp, r2, r0, asr #22
   11c28:	muleq	r2, r8, r6
   11c2c:	andeq	ip, r2, ip, lsl #14
   11c30:	andeq	ip, r2, ip, asr #14
   11c34:	andeq	ip, r2, ip, lsl r7
   11c38:	andeq	sp, r2, r4, ror #4
   11c3c:	andeq	ip, r2, r0, ror #14
   11c40:	andeq	ip, r2, r4, lsr r7
   11c44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c48:	mov	r7, r0
   11c4c:	sub	sp, sp, #188	; 0xbc
   11c50:	ldr	r0, [pc, #2264]	; 12530 <__assert_fail@plt+0x12d4>
   11c54:	bl	11640 <__assert_fail@plt+0x3e4>
   11c58:	subs	r5, r0, #0
   11c5c:	beq	11c90 <__assert_fail@plt+0xa34>
   11c60:	ldr	r2, [pc, #2252]	; 12534 <__assert_fail@plt+0x12d8>
   11c64:	ldr	r3, [r2]
   11c68:	ldr	r0, [r3]
   11c6c:	cmp	r0, #0
   11c70:	beq	124c0 <__assert_fail@plt+0x1264>
   11c74:	add	r3, r3, #4
   11c78:	str	r3, [r2]
   11c7c:	bl	11684 <__assert_fail@plt+0x428>
   11c80:	mov	r4, r0
   11c84:	mov	r0, r4
   11c88:	add	sp, sp, #188	; 0xbc
   11c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c90:	ldr	r0, [pc, #2208]	; 12538 <__assert_fail@plt+0x12dc>
   11c94:	bl	11640 <__assert_fail@plt+0x3e4>
   11c98:	cmp	r0, #0
   11c9c:	bne	11cf8 <__assert_fail@plt+0xa9c>
   11ca0:	ldr	r0, [pc, #2196]	; 1253c <__assert_fail@plt+0x12e0>
   11ca4:	bl	11640 <__assert_fail@plt+0x3e4>
   11ca8:	subs	r4, r0, #0
   11cac:	beq	11d40 <__assert_fail@plt+0xae4>
   11cb0:	mov	r0, r7
   11cb4:	bl	11c44 <__assert_fail@plt+0x9e8>
   11cb8:	mov	r4, r0
   11cbc:	mov	r0, r7
   11cc0:	bl	11c44 <__assert_fail@plt+0x9e8>
   11cc4:	cmp	r7, #0
   11cc8:	mov	r5, r0
   11ccc:	beq	11cec <__assert_fail@plt+0xa90>
   11cd0:	mov	r1, r0
   11cd4:	mov	r0, r4
   11cd8:	bl	118a8 <__assert_fail@plt+0x64c>
   11cdc:	mov	r6, r0
   11ce0:	mov	r0, r4
   11ce4:	bl	116b4 <__assert_fail@plt+0x458>
   11ce8:	mov	r4, r6
   11cec:	mov	r0, r5
   11cf0:	bl	116b4 <__assert_fail@plt+0x458>
   11cf4:	b	11c84 <__assert_fail@plt+0xa28>
   11cf8:	mov	r0, r7
   11cfc:	bl	11c44 <__assert_fail@plt+0x9e8>
   11d00:	mov	r6, r0
   11d04:	bl	11860 <__assert_fail@plt+0x604>
   11d08:	ldr	r0, [r6, #4]
   11d0c:	bl	1b9c0 <__assert_fail@plt+0xa764>
   11d10:	mov	r7, r0
   11d14:	mov	r0, #16
   11d18:	bl	2b704 <__assert_fail@plt+0x1a4a8>
   11d1c:	mov	r1, r7
   11d20:	mov	r4, r0
   11d24:	str	r5, [r0], #4
   11d28:	bl	15920 <__assert_fail@plt+0x46c4>
   11d2c:	mov	r0, r6
   11d30:	bl	116b4 <__assert_fail@plt+0x458>
   11d34:	mov	r0, r4
   11d38:	add	sp, sp, #188	; 0xbc
   11d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d40:	ldr	r0, [pc, #2040]	; 12540 <__assert_fail@plt+0x12e4>
   11d44:	bl	11640 <__assert_fail@plt+0x3e4>
   11d48:	cmp	r0, #0
   11d4c:	bne	11e5c <__assert_fail@plt+0xc00>
   11d50:	ldr	r0, [pc, #2028]	; 12544 <__assert_fail@plt+0x12e8>
   11d54:	bl	11640 <__assert_fail@plt+0x3e4>
   11d58:	cmp	r0, #0
   11d5c:	bne	11de8 <__assert_fail@plt+0xb8c>
   11d60:	ldr	r5, [pc, #1996]	; 12534 <__assert_fail@plt+0x12d8>
   11d64:	ldr	r3, [r5]
   11d68:	ldr	r3, [r3]
   11d6c:	cmp	r3, #0
   11d70:	beq	124c0 <__assert_fail@plt+0x1264>
   11d74:	ldr	r0, [pc, #1996]	; 12548 <__assert_fail@plt+0x12ec>
   11d78:	bl	11640 <__assert_fail@plt+0x3e4>
   11d7c:	subs	r4, r0, #0
   11d80:	beq	11ecc <__assert_fail@plt+0xc70>
   11d84:	mov	r0, r7
   11d88:	bl	12b1c <__assert_fail@plt+0x18c0>
   11d8c:	ldr	r7, [r5]
   11d90:	ldr	r6, [r7]
   11d94:	cmp	r6, #0
   11d98:	mov	r4, r0
   11d9c:	beq	124ec <__assert_fail@plt+0x1290>
   11da0:	ldr	r0, [pc, #1956]	; 1254c <__assert_fail@plt+0x12f0>
   11da4:	bl	11640 <__assert_fail@plt+0x3e4>
   11da8:	subs	r6, r0, #0
   11dac:	bne	11c84 <__assert_fail@plt+0xa28>
   11db0:	mov	r2, #5
   11db4:	ldr	r1, [pc, #1940]	; 12550 <__assert_fail@plt+0x12f4>
   11db8:	bl	1104c <dcgettext@plt>
   11dbc:	ldr	r3, [r5]
   11dc0:	mov	r1, #8
   11dc4:	ldr	r2, [r3]
   11dc8:	mov	r4, r0
   11dcc:	mov	r0, r6
   11dd0:	bl	1d7a8 <__assert_fail@plt+0xc54c>
   11dd4:	mov	r2, r4
   11dd8:	mov	r1, r6
   11ddc:	mov	r3, r0
   11de0:	mov	r0, #2
   11de4:	bl	110c4 <error@plt>
   11de8:	mov	r0, r7
   11dec:	bl	11c44 <__assert_fail@plt+0x9e8>
   11df0:	mov	r5, r0
   11df4:	mov	r0, r7
   11df8:	bl	11c44 <__assert_fail@plt+0x9e8>
   11dfc:	mov	r6, r0
   11e00:	mov	r0, r7
   11e04:	bl	11c44 <__assert_fail@plt+0x9e8>
   11e08:	mov	r7, r0
   11e0c:	mov	r0, r5
   11e10:	bl	11860 <__assert_fail@plt+0x604>
   11e14:	mov	r0, r6
   11e18:	bl	117b4 <__assert_fail@plt+0x558>
   11e1c:	cmp	r0, #0
   11e20:	beq	11e34 <__assert_fail@plt+0xbd8>
   11e24:	mov	r0, r7
   11e28:	bl	117b4 <__assert_fail@plt+0x558>
   11e2c:	cmp	r0, #0
   11e30:	bne	12210 <__assert_fail@plt+0xfb4>
   11e34:	ldr	r0, [pc, #1816]	; 12554 <__assert_fail@plt+0x12f8>
   11e38:	bl	11684 <__assert_fail@plt+0x428>
   11e3c:	mov	r4, r0
   11e40:	mov	r0, r5
   11e44:	bl	116b4 <__assert_fail@plt+0x458>
   11e48:	mov	r0, r6
   11e4c:	bl	116b4 <__assert_fail@plt+0x458>
   11e50:	mov	r0, r7
   11e54:	bl	116b4 <__assert_fail@plt+0x458>
   11e58:	b	11c84 <__assert_fail@plt+0xa28>
   11e5c:	mov	r0, r7
   11e60:	bl	11c44 <__assert_fail@plt+0x9e8>
   11e64:	mov	r9, r0
   11e68:	mov	r0, r7
   11e6c:	bl	11c44 <__assert_fail@plt+0x9e8>
   11e70:	mov	r8, r0
   11e74:	mov	r0, r9
   11e78:	bl	11860 <__assert_fail@plt+0x604>
   11e7c:	mov	r0, r8
   11e80:	bl	11860 <__assert_fail@plt+0x604>
   11e84:	ldr	r3, [r8, #4]
   11e88:	str	r3, [sp, #4]
   11e8c:	ldrb	r3, [r3]
   11e90:	cmp	r3, #0
   11e94:	bne	11ef8 <__assert_fail@plt+0xc9c>
   11e98:	mov	r7, #0
   11e9c:	mov	r0, #16
   11ea0:	bl	2b704 <__assert_fail@plt+0x1a4a8>
   11ea4:	mov	r3, #0
   11ea8:	mov	r1, r7
   11eac:	mov	r4, r0
   11eb0:	str	r3, [r0], #4
   11eb4:	bl	15920 <__assert_fail@plt+0x46c4>
   11eb8:	mov	r0, r9
   11ebc:	bl	116b4 <__assert_fail@plt+0x458>
   11ec0:	mov	r0, r8
   11ec4:	bl	116b4 <__assert_fail@plt+0x458>
   11ec8:	b	11c84 <__assert_fail@plt+0xa28>
   11ecc:	ldr	r0, [pc, #1656]	; 1254c <__assert_fail@plt+0x12f0>
   11ed0:	bl	11640 <__assert_fail@plt+0x3e4>
   11ed4:	cmp	r0, #0
   11ed8:	bne	12510 <__assert_fail@plt+0x12b4>
   11edc:	ldr	r3, [r5]
   11ee0:	add	r2, r3, #4
   11ee4:	ldr	r0, [r3]
   11ee8:	str	r2, [r5]
   11eec:	bl	11684 <__assert_fail@plt+0x428>
   11ef0:	mov	r4, r0
   11ef4:	b	11c84 <__assert_fail@plt+0xa28>
   11ef8:	ldr	r5, [r9, #4]
   11efc:	bl	110a0 <__ctype_get_mb_cur_max@plt>
   11f00:	cmp	r0, #1
   11f04:	bls	121c0 <__assert_fail@plt+0xf64>
   11f08:	strb	r4, [sp, #16]
   11f0c:	ldrb	r3, [sp, #16]
   11f10:	str	r5, [sp, #32]
   11f14:	mov	r7, r4
   11f18:	cmp	r3, #0
   11f1c:	str	r4, [sp, #20]
   11f20:	strb	r4, [sp, #28]
   11f24:	str	r4, [sp, #24]
   11f28:	mov	r6, r4
   11f2c:	mov	r5, #1
   11f30:	ldr	sl, [pc, #1568]	; 12558 <__assert_fail@plt+0x12fc>
   11f34:	ldr	r4, [sp, #32]
   11f38:	bne	11fc0 <__assert_fail@plt+0xd64>
   11f3c:	ldrb	r3, [r4]
   11f40:	and	r2, r3, #31
   11f44:	lsr	r3, r3, #5
   11f48:	ldr	r3, [sl, r3, lsl #2]
   11f4c:	lsr	r3, r3, r2
   11f50:	tst	r3, #1
   11f54:	beq	121e0 <__assert_fail@plt+0xf84>
   11f58:	str	r5, [sp, #36]	; 0x24
   11f5c:	ldrb	r4, [r4]
   11f60:	strb	r5, [sp, #40]	; 0x28
   11f64:	str	r4, [sp, #44]	; 0x2c
   11f68:	cmp	r4, #0
   11f6c:	strb	r5, [sp, #28]
   11f70:	beq	11e98 <__assert_fail@plt+0xc3c>
   11f74:	ldr	r3, [sp, #36]	; 0x24
   11f78:	add	r7, r7, #1
   11f7c:	cmp	r3, #1
   11f80:	bne	12024 <__assert_fail@plt+0xdc8>
   11f84:	ldr	r4, [sp, #32]
   11f88:	ldr	r0, [sp, #4]
   11f8c:	str	r3, [sp, #8]
   11f90:	ldrb	r1, [r4]
   11f94:	bl	1b7c4 <__assert_fail@plt+0xa568>
   11f98:	ldr	r3, [sp, #8]
   11f9c:	cmp	r0, #0
   11fa0:	bne	11e9c <__assert_fail@plt+0xc40>
   11fa4:	add	r4, r4, r3
   11fa8:	ldrb	r3, [sp, #16]
   11fac:	str	r4, [sp, #32]
   11fb0:	strb	r6, [sp, #28]
   11fb4:	cmp	r3, #0
   11fb8:	ldr	r4, [sp, #32]
   11fbc:	beq	11f3c <__assert_fail@plt+0xce0>
   11fc0:	bl	110a0 <__ctype_get_mb_cur_max@plt>
   11fc4:	mov	r1, r0
   11fc8:	mov	r0, r4
   11fcc:	bl	2af6c <__assert_fail@plt+0x19d10>
   11fd0:	add	r3, sp, #20
   11fd4:	mov	r1, r4
   11fd8:	mov	r2, r0
   11fdc:	add	r0, sp, #44	; 0x2c
   11fe0:	bl	1b770 <__assert_fail@plt+0xa514>
   11fe4:	cmn	r0, #1
   11fe8:	str	r0, [sp, #36]	; 0x24
   11fec:	strbeq	r6, [sp, #40]	; 0x28
   11ff0:	streq	r5, [sp, #36]	; 0x24
   11ff4:	beq	12208 <__assert_fail@plt+0xfac>
   11ff8:	cmn	r0, #2
   11ffc:	beq	121f8 <__assert_fail@plt+0xf9c>
   12000:	cmp	r0, #0
   12004:	beq	1229c <__assert_fail@plt+0x1040>
   12008:	ldr	r4, [sp, #44]	; 0x2c
   1200c:	add	r0, sp, #20
   12010:	strb	r5, [sp, #40]	; 0x28
   12014:	bl	11028 <mbsinit@plt>
   12018:	cmp	r0, #0
   1201c:	strbne	r6, [sp, #16]
   12020:	b	11f68 <__assert_fail@plt+0xd0c>
   12024:	ldr	r3, [sp, #4]
   12028:	strb	r6, [sp, #72]	; 0x48
   1202c:	mov	r4, r3
   12030:	str	r3, [sp, #88]	; 0x58
   12034:	str	r6, [sp, #76]	; 0x4c
   12038:	str	r6, [sp, #80]	; 0x50
   1203c:	strb	r6, [sp, #84]	; 0x54
   12040:	ldrb	r3, [sp, #72]	; 0x48
   12044:	cmp	r3, #0
   12048:	bne	120d0 <__assert_fail@plt+0xe74>
   1204c:	ldrb	r3, [r4]
   12050:	and	r2, r3, #31
   12054:	lsr	r3, r3, #5
   12058:	ldr	r3, [sl, r3, lsl #2]
   1205c:	lsr	r3, r3, r2
   12060:	tst	r3, #1
   12064:	beq	120bc <__assert_fail@plt+0xe60>
   12068:	str	r5, [sp, #92]	; 0x5c
   1206c:	ldrb	r4, [r4]
   12070:	strb	r5, [sp, #96]	; 0x60
   12074:	str	r4, [sp, #100]	; 0x64
   12078:	cmp	r4, #0
   1207c:	strb	r5, [sp, #84]	; 0x54
   12080:	ldreq	r4, [sp, #32]
   12084:	ldreq	r3, [sp, #36]	; 0x24
   12088:	beq	11fa4 <__assert_fail@plt+0xd48>
   1208c:	ldrb	r3, [sp, #40]	; 0x28
   12090:	cmp	r3, #0
   12094:	bne	1212c <__assert_fail@plt+0xed0>
   12098:	ldr	r4, [sp, #88]	; 0x58
   1209c:	ldr	fp, [sp, #92]	; 0x5c
   120a0:	ldr	r2, [sp, #36]	; 0x24
   120a4:	cmp	fp, r2
   120a8:	beq	12144 <__assert_fail@plt+0xee8>
   120ac:	add	r4, r4, fp
   120b0:	str	r4, [sp, #88]	; 0x58
   120b4:	strb	r6, [sp, #84]	; 0x54
   120b8:	b	12040 <__assert_fail@plt+0xde4>
   120bc:	add	r0, sp, #76	; 0x4c
   120c0:	bl	11028 <mbsinit@plt>
   120c4:	cmp	r0, #0
   120c8:	beq	124c4 <__assert_fail@plt+0x1268>
   120cc:	strb	r5, [sp, #72]	; 0x48
   120d0:	bl	110a0 <__ctype_get_mb_cur_max@plt>
   120d4:	mov	r1, r0
   120d8:	mov	r0, r4
   120dc:	bl	2af6c <__assert_fail@plt+0x19d10>
   120e0:	add	r3, sp, #76	; 0x4c
   120e4:	mov	r1, r4
   120e8:	mov	r2, r0
   120ec:	add	r0, sp, #100	; 0x64
   120f0:	bl	1b770 <__assert_fail@plt+0xa514>
   120f4:	cmn	r0, #1
   120f8:	str	r0, [sp, #92]	; 0x5c
   120fc:	beq	12160 <__assert_fail@plt+0xf04>
   12100:	cmn	r0, #2
   12104:	beq	121a8 <__assert_fail@plt+0xf4c>
   12108:	cmp	r0, #0
   1210c:	beq	12174 <__assert_fail@plt+0xf18>
   12110:	ldr	r4, [sp, #100]	; 0x64
   12114:	add	r0, sp, #76	; 0x4c
   12118:	strb	r5, [sp, #96]	; 0x60
   1211c:	bl	11028 <mbsinit@plt>
   12120:	cmp	r0, #0
   12124:	strbne	r6, [sp, #72]	; 0x48
   12128:	b	12078 <__assert_fail@plt+0xe1c>
   1212c:	ldr	r3, [sp, #44]	; 0x2c
   12130:	cmp	r3, r4
   12134:	beq	11e9c <__assert_fail@plt+0xc40>
   12138:	ldr	fp, [sp, #92]	; 0x5c
   1213c:	ldr	r4, [sp, #88]	; 0x58
   12140:	b	120ac <__assert_fail@plt+0xe50>
   12144:	mov	r2, fp
   12148:	ldr	r1, [sp, #32]
   1214c:	mov	r0, r4
   12150:	bl	11034 <memcmp@plt>
   12154:	cmp	r0, #0
   12158:	beq	11e9c <__assert_fail@plt+0xc40>
   1215c:	b	120ac <__assert_fail@plt+0xe50>
   12160:	ldr	r4, [sp, #88]	; 0x58
   12164:	str	r5, [sp, #92]	; 0x5c
   12168:	strb	r6, [sp, #96]	; 0x60
   1216c:	strb	r5, [sp, #84]	; 0x54
   12170:	b	1209c <__assert_fail@plt+0xe40>
   12174:	ldr	r4, [sp, #88]	; 0x58
   12178:	str	r5, [sp, #92]	; 0x5c
   1217c:	ldrb	r3, [r4]
   12180:	cmp	r3, #0
   12184:	bne	124d8 <__assert_fail@plt+0x127c>
   12188:	ldr	r4, [sp, #100]	; 0x64
   1218c:	cmp	r4, #0
   12190:	beq	12114 <__assert_fail@plt+0xeb8>
   12194:	ldr	r3, [pc, #960]	; 1255c <__assert_fail@plt+0x1300>
   12198:	mov	r2, #172	; 0xac
   1219c:	ldr	r1, [pc, #956]	; 12560 <__assert_fail@plt+0x1304>
   121a0:	ldr	r0, [pc, #956]	; 12564 <__assert_fail@plt+0x1308>
   121a4:	bl	1125c <__assert_fail@plt>
   121a8:	ldr	r4, [sp, #88]	; 0x58
   121ac:	mov	r0, r4
   121b0:	bl	11160 <strlen@plt>
   121b4:	strb	r6, [sp, #96]	; 0x60
   121b8:	str	r0, [sp, #92]	; 0x5c
   121bc:	b	1216c <__assert_fail@plt+0xf10>
   121c0:	ldr	r1, [sp, #4]
   121c4:	mov	r0, r5
   121c8:	bl	10fa4 <strcspn@plt>
   121cc:	ldrb	r3, [r5, r0]
   121d0:	cmp	r3, #0
   121d4:	beq	11e98 <__assert_fail@plt+0xc3c>
   121d8:	add	r7, r0, #1
   121dc:	b	11e9c <__assert_fail@plt+0xc40>
   121e0:	add	r0, sp, #20
   121e4:	bl	11028 <mbsinit@plt>
   121e8:	cmp	r0, #0
   121ec:	beq	124c4 <__assert_fail@plt+0x1268>
   121f0:	strb	r5, [sp, #16]
   121f4:	b	11fc0 <__assert_fail@plt+0xd64>
   121f8:	ldr	r0, [sp, #32]
   121fc:	bl	11160 <strlen@plt>
   12200:	strb	r6, [sp, #40]	; 0x28
   12204:	str	r0, [sp, #36]	; 0x24
   12208:	strb	r5, [sp, #28]
   1220c:	b	11f74 <__assert_fail@plt+0xd18>
   12210:	add	r0, r6, #4
   12214:	bl	1176c <__assert_fail@plt+0x510>
   12218:	mov	sl, r0
   1221c:	add	r0, r7, #4
   12220:	bl	1176c <__assert_fail@plt+0x510>
   12224:	ldr	r4, [r5, #4]
   12228:	mov	r9, r0
   1222c:	mov	r0, r4
   12230:	bl	11160 <strlen@plt>
   12234:	mov	r8, r0
   12238:	bl	110a0 <__ctype_get_mb_cur_max@plt>
   1223c:	cmp	r0, #1
   12240:	movls	r0, r8
   12244:	bls	12250 <__assert_fail@plt+0xff4>
   12248:	mov	r0, r4
   1224c:	bl	1b9c0 <__assert_fail@plt+0xa764>
   12250:	clz	r3, sl
   12254:	lsr	r3, r3, #5
   12258:	cmp	sl, r0
   1225c:	orrhi	r3, r3, #1
   12260:	cmp	r3, #0
   12264:	bne	12274 <__assert_fail@plt+0x1018>
   12268:	sub	r2, r9, #1
   1226c:	cmn	r2, #3
   12270:	bls	122c0 <__assert_fail@plt+0x1064>
   12274:	ldr	r0, [pc, #728]	; 12554 <__assert_fail@plt+0x12f8>
   12278:	bl	2bc30 <__assert_fail@plt+0x1a9d4>
   1227c:	str	r0, [sp, #4]
   12280:	ldr	r8, [sp, #4]
   12284:	mov	r0, r8
   12288:	bl	11684 <__assert_fail@plt+0x428>
   1228c:	mov	r4, r0
   12290:	mov	r0, r8
   12294:	bl	13098 <__assert_fail@plt+0x1e3c>
   12298:	b	11e40 <__assert_fail@plt+0xbe4>
   1229c:	ldr	r3, [sp, #32]
   122a0:	str	r5, [sp, #36]	; 0x24
   122a4:	ldrb	r3, [r3]
   122a8:	cmp	r3, #0
   122ac:	bne	124d8 <__assert_fail@plt+0x127c>
   122b0:	ldr	r4, [sp, #44]	; 0x2c
   122b4:	cmp	r4, #0
   122b8:	beq	1200c <__assert_fail@plt+0xdb0>
   122bc:	b	12194 <__assert_fail@plt+0xf38>
   122c0:	rsb	r2, sl, #1
   122c4:	add	r0, r2, r0
   122c8:	cmp	r0, r9
   122cc:	str	r3, [sp, #4]
   122d0:	movcc	r9, r0
   122d4:	bl	110a0 <__ctype_get_mb_cur_max@plt>
   122d8:	ldr	r3, [sp, #4]
   122dc:	cmp	r0, #1
   122e0:	beq	1249c <__assert_fail@plt+0x1240>
   122e4:	add	r0, r8, #1
   122e8:	str	r3, [sp, #8]
   122ec:	bl	2b704 <__assert_fail@plt+0x1a4a8>
   122f0:	ldr	r3, [sp, #8]
   122f4:	add	r2, sp, #184	; 0xb8
   122f8:	str	r5, [sp, #8]
   122fc:	mov	r8, #1
   12300:	mov	fp, r3
   12304:	str	r3, [sp, #132]	; 0x84
   12308:	strb	r3, [r2, #-56]!	; 0xffffffc8
   1230c:	str	r4, [sp, #144]	; 0x90
   12310:	str	r3, [r2, #8]
   12314:	str	r6, [sp, #12]
   12318:	strb	r3, [sp, #140]	; 0x8c
   1231c:	mov	r5, r0
   12320:	str	r0, [sp, #4]
   12324:	ldrb	r3, [sp, #128]	; 0x80
   12328:	ldr	r4, [sp, #144]	; 0x90
   1232c:	cmp	r3, #0
   12330:	bne	123ec <__assert_fail@plt+0x1190>
   12334:	ldrb	r3, [r4]
   12338:	ldr	r1, [pc, #536]	; 12558 <__assert_fail@plt+0x12fc>
   1233c:	and	r2, r3, #31
   12340:	lsr	r3, r3, #5
   12344:	ldr	r3, [r1, r3, lsl #2]
   12348:	lsr	r3, r3, r2
   1234c:	tst	r3, #1
   12350:	beq	123d4 <__assert_fail@plt+0x1178>
   12354:	mov	r3, #1
   12358:	str	r3, [sp, #148]	; 0x94
   1235c:	ldrb	r4, [r4]
   12360:	strb	r3, [sp, #152]	; 0x98
   12364:	str	r4, [sp, #156]	; 0x9c
   12368:	mov	r3, #1
   1236c:	cmp	r4, #0
   12370:	strb	r3, [sp, #140]	; 0x8c
   12374:	bne	123a8 <__assert_fail@plt+0x114c>
   12378:	mov	r2, r5
   1237c:	ldr	r6, [sp, #12]
   12380:	ldr	r5, [sp, #8]
   12384:	mov	r3, #0
   12388:	strb	r3, [r2]
   1238c:	b	12280 <__assert_fail@plt+0x1024>
   12390:	ldr	r0, [sp, #144]	; 0x90
   12394:	bl	11160 <strlen@plt>
   12398:	strb	fp, [sp, #152]	; 0x98
   1239c:	str	r0, [sp, #148]	; 0x94
   123a0:	mov	r3, #1
   123a4:	strb	r3, [sp, #140]	; 0x8c
   123a8:	cmp	r9, #0
   123ac:	beq	12378 <__assert_fail@plt+0x111c>
   123b0:	cmp	sl, r8
   123b4:	ldr	r4, [sp, #144]	; 0x90
   123b8:	ldr	r6, [sp, #148]	; 0x94
   123bc:	bls	12458 <__assert_fail@plt+0x11fc>
   123c0:	add	r4, r4, r6
   123c4:	add	r8, r8, #1
   123c8:	str	r4, [sp, #144]	; 0x90
   123cc:	strb	fp, [sp, #140]	; 0x8c
   123d0:	b	12324 <__assert_fail@plt+0x10c8>
   123d4:	add	r0, sp, #132	; 0x84
   123d8:	bl	11028 <mbsinit@plt>
   123dc:	cmp	r0, #0
   123e0:	beq	124c4 <__assert_fail@plt+0x1268>
   123e4:	mov	r3, #1
   123e8:	strb	r3, [sp, #128]	; 0x80
   123ec:	bl	110a0 <__ctype_get_mb_cur_max@plt>
   123f0:	mov	r1, r0
   123f4:	mov	r0, r4
   123f8:	bl	2af6c <__assert_fail@plt+0x19d10>
   123fc:	add	r3, sp, #132	; 0x84
   12400:	mov	r1, r4
   12404:	mov	r2, r0
   12408:	add	r0, sp, #156	; 0x9c
   1240c:	bl	1b770 <__assert_fail@plt+0xa514>
   12410:	cmn	r0, #1
   12414:	moveq	r3, #1
   12418:	str	r0, [sp, #148]	; 0x94
   1241c:	strbeq	fp, [sp, #152]	; 0x98
   12420:	streq	r3, [sp, #148]	; 0x94
   12424:	beq	123a0 <__assert_fail@plt+0x1144>
   12428:	cmn	r0, #2
   1242c:	beq	12390 <__assert_fail@plt+0x1134>
   12430:	cmp	r0, #0
   12434:	beq	12474 <__assert_fail@plt+0x1218>
   12438:	ldr	r4, [sp, #156]	; 0x9c
   1243c:	mov	r3, #1
   12440:	add	r0, sp, #132	; 0x84
   12444:	strb	r3, [sp, #152]	; 0x98
   12448:	bl	11028 <mbsinit@plt>
   1244c:	cmp	r0, #0
   12450:	strbne	fp, [sp, #128]	; 0x80
   12454:	b	12368 <__assert_fail@plt+0x110c>
   12458:	mov	r0, r5
   1245c:	mov	r1, r4
   12460:	mov	r2, r6
   12464:	bl	11130 <mempcpy@plt>
   12468:	sub	r9, r9, #1
   1246c:	mov	r5, r0
   12470:	b	123c0 <__assert_fail@plt+0x1164>
   12474:	ldr	r3, [sp, #144]	; 0x90
   12478:	mov	r2, #1
   1247c:	str	r2, [sp, #148]	; 0x94
   12480:	ldrb	r3, [r3]
   12484:	cmp	r3, #0
   12488:	bne	124d8 <__assert_fail@plt+0x127c>
   1248c:	ldr	r4, [sp, #156]	; 0x9c
   12490:	cmp	r4, #0
   12494:	beq	1243c <__assert_fail@plt+0x11e0>
   12498:	b	12194 <__assert_fail@plt+0xf38>
   1249c:	add	r0, r9, #1
   124a0:	bl	2b704 <__assert_fail@plt+0x1a4a8>
   124a4:	sub	r1, sl, #1
   124a8:	mov	r2, r9
   124ac:	add	r1, r4, r1
   124b0:	str	r0, [sp, #4]
   124b4:	bl	11130 <mempcpy@plt>
   124b8:	mov	r2, r0
   124bc:	b	12384 <__assert_fail@plt+0x1128>
   124c0:	bl	11268 <__assert_fail@plt+0xc>
   124c4:	ldr	r3, [pc, #144]	; 1255c <__assert_fail@plt+0x1300>
   124c8:	mov	r2, #143	; 0x8f
   124cc:	ldr	r1, [pc, #140]	; 12560 <__assert_fail@plt+0x1304>
   124d0:	ldr	r0, [pc, #144]	; 12568 <__assert_fail@plt+0x130c>
   124d4:	bl	1125c <__assert_fail@plt>
   124d8:	ldr	r3, [pc, #124]	; 1255c <__assert_fail@plt+0x1300>
   124dc:	mov	r2, #171	; 0xab
   124e0:	ldr	r1, [pc, #120]	; 12560 <__assert_fail@plt+0x1304>
   124e4:	ldr	r0, [pc, #128]	; 1256c <__assert_fail@plt+0x1310>
   124e8:	bl	1125c <__assert_fail@plt>
   124ec:	mov	r2, #5
   124f0:	ldr	r1, [pc, #120]	; 12570 <__assert_fail@plt+0x1314>
   124f4:	mov	r0, r6
   124f8:	bl	1104c <dcgettext@plt>
   124fc:	ldr	r2, [r7, #-4]
   12500:	mov	r1, #8
   12504:	mov	r4, r0
   12508:	mov	r0, r6
   1250c:	b	11dd0 <__assert_fail@plt+0xb74>
   12510:	mov	r2, #5
   12514:	ldr	r1, [pc, #88]	; 12574 <__assert_fail@plt+0x1318>
   12518:	mov	r0, r4
   1251c:	bl	1104c <dcgettext@plt>
   12520:	mov	r1, r4
   12524:	mov	r2, r0
   12528:	mov	r0, #2
   1252c:	bl	110c4 <error@plt>
   12530:	andeq	ip, r2, r4, lsl #15
   12534:	muleq	r3, r8, r1
   12538:	andeq	ip, r2, r8, lsl #15
   1253c:	muleq	r2, r0, r7
   12540:	muleq	r2, r8, r7
   12544:	andeq	ip, r2, r0, lsr #15
   12548:	andeq	ip, r2, r8, lsr #15
   1254c:	andeq	sp, r2, r4, ror #18
   12550:	ldrdeq	ip, [r2], -r4
   12554:	andeq	ip, r2, ip, ror #23
   12558:	andeq	sp, r2, r0, asr #22
   1255c:	muleq	r2, r8, r6
   12560:	andeq	ip, r2, ip, lsl #14
   12564:	andeq	ip, r2, ip, asr #14
   12568:	andeq	ip, r2, ip, lsl r7
   1256c:	andeq	ip, r2, r4, lsr r7
   12570:	andeq	ip, r2, ip, lsr #15
   12574:	andeq	ip, r2, r0, lsl #16
   12578:	push	{r4, r5, r6, r7, r8, lr}
   1257c:	mov	r5, r0
   12580:	bl	11c44 <__assert_fail@plt+0x9e8>
   12584:	ldr	r6, [pc, #88]	; 125e4 <__assert_fail@plt+0x1388>
   12588:	mov	r7, r0
   1258c:	b	12598 <__assert_fail@plt+0x133c>
   12590:	mov	r0, r4
   12594:	bl	116b4 <__assert_fail@plt+0x458>
   12598:	mov	r0, r6
   1259c:	bl	11640 <__assert_fail@plt+0x3e4>
   125a0:	cmp	r0, #0
   125a4:	mov	r0, r5
   125a8:	beq	125dc <__assert_fail@plt+0x1380>
   125ac:	bl	11c44 <__assert_fail@plt+0x9e8>
   125b0:	cmp	r5, #0
   125b4:	mov	r4, r0
   125b8:	beq	12590 <__assert_fail@plt+0x1334>
   125bc:	mov	r1, r0
   125c0:	mov	r0, r7
   125c4:	bl	118a8 <__assert_fail@plt+0x64c>
   125c8:	mov	r8, r0
   125cc:	mov	r0, r7
   125d0:	bl	116b4 <__assert_fail@plt+0x458>
   125d4:	mov	r7, r8
   125d8:	b	12590 <__assert_fail@plt+0x1334>
   125dc:	mov	r0, r7
   125e0:	pop	{r4, r5, r6, r7, r8, pc}
   125e4:	andeq	ip, r2, r0, lsr #16
   125e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125ec:	sub	sp, sp, #12
   125f0:	mov	r6, r0
   125f4:	bl	12578 <__assert_fail@plt+0x131c>
   125f8:	ldr	r7, [pc, #292]	; 12724 <__assert_fail@plt+0x14c8>
   125fc:	ldr	r9, [pc, #292]	; 12728 <__assert_fail@plt+0x14cc>
   12600:	ldr	fp, [pc, #292]	; 1272c <__assert_fail@plt+0x14d0>
   12604:	ldr	sl, [pc, #292]	; 12730 <__assert_fail@plt+0x14d4>
   12608:	mov	r8, r0
   1260c:	b	1267c <__assert_fail@plt+0x1420>
   12610:	mov	r0, r9
   12614:	bl	11640 <__assert_fail@plt+0x3e4>
   12618:	cmp	r0, #0
   1261c:	movne	r5, #1
   12620:	beq	12694 <__assert_fail@plt+0x1438>
   12624:	mov	r0, r6
   12628:	bl	12578 <__assert_fail@plt+0x131c>
   1262c:	cmp	r6, #0
   12630:	mov	r4, r0
   12634:	beq	12674 <__assert_fail@plt+0x1418>
   12638:	mov	r0, r8
   1263c:	bl	117b4 <__assert_fail@plt+0x558>
   12640:	cmp	r0, #0
   12644:	beq	126e0 <__assert_fail@plt+0x1484>
   12648:	mov	r0, r4
   1264c:	bl	117b4 <__assert_fail@plt+0x558>
   12650:	cmp	r0, #0
   12654:	beq	126e0 <__assert_fail@plt+0x1484>
   12658:	cmp	r5, #0
   1265c:	add	r2, r4, #4
   12660:	moveq	r3, sl
   12664:	bne	126ac <__assert_fail@plt+0x1450>
   12668:	add	r1, r8, #4
   1266c:	mov	r0, r1
   12670:	blx	r3
   12674:	mov	r0, r4
   12678:	bl	116b4 <__assert_fail@plt+0x458>
   1267c:	mov	r0, r7
   12680:	bl	11640 <__assert_fail@plt+0x3e4>
   12684:	cmp	r0, #0
   12688:	beq	12610 <__assert_fail@plt+0x13b4>
   1268c:	mov	r5, #0
   12690:	b	12624 <__assert_fail@plt+0x13c8>
   12694:	ldr	r0, [pc, #152]	; 12734 <__assert_fail@plt+0x14d8>
   12698:	bl	11640 <__assert_fail@plt+0x3e4>
   1269c:	cmp	r0, #0
   126a0:	beq	126d4 <__assert_fail@plt+0x1478>
   126a4:	mov	r5, #2
   126a8:	b	12624 <__assert_fail@plt+0x13c8>
   126ac:	mov	r0, r2
   126b0:	str	r2, [sp, #4]
   126b4:	bl	15f3c <__assert_fail@plt+0x4ce0>
   126b8:	ldr	r2, [sp, #4]
   126bc:	subs	r3, r0, #0
   126c0:	beq	12700 <__assert_fail@plt+0x14a4>
   126c4:	cmp	r5, #1
   126c8:	ldr	r3, [pc, #104]	; 12738 <__assert_fail@plt+0x14dc>
   126cc:	movne	r3, fp
   126d0:	b	12668 <__assert_fail@plt+0x140c>
   126d4:	mov	r0, r8
   126d8:	add	sp, sp, #12
   126dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126e0:	mov	r2, #5
   126e4:	ldr	r1, [pc, #80]	; 1273c <__assert_fail@plt+0x14e0>
   126e8:	mov	r0, #0
   126ec:	bl	1104c <dcgettext@plt>
   126f0:	mov	r1, #0
   126f4:	mov	r2, r0
   126f8:	mov	r0, #2
   126fc:	bl	110c4 <error@plt>
   12700:	mov	r2, #5
   12704:	ldr	r1, [pc, #52]	; 12740 <__assert_fail@plt+0x14e4>
   12708:	str	r3, [sp, #4]
   1270c:	bl	1104c <dcgettext@plt>
   12710:	ldr	r3, [sp, #4]
   12714:	mov	r1, r3
   12718:	mov	r2, r0
   1271c:	mov	r0, #2
   12720:	bl	110c4 <error@plt>
   12724:	andeq	ip, r2, r4, lsr #16
   12728:	andeq	ip, r2, r8, lsr #16
   1272c:	andeq	r7, r1, r8, lsr #4
   12730:	andeq	r6, r1, r4, ror #23
   12734:	andeq	ip, r2, ip, lsr #16
   12738:	andeq	r7, r1, r8, lsr #3
   1273c:	andeq	ip, r2, r0, lsr r8
   12740:	andeq	ip, r2, r8, asr #16
   12744:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12748:	mov	r5, r0
   1274c:	bl	125e8 <__assert_fail@plt+0x138c>
   12750:	ldr	r6, [pc, #192]	; 12818 <__assert_fail@plt+0x15bc>
   12754:	ldr	r9, [pc, #192]	; 1281c <__assert_fail@plt+0x15c0>
   12758:	ldr	fp, [pc, #192]	; 12820 <__assert_fail@plt+0x15c4>
   1275c:	mov	r8, #0
   12760:	mov	r7, r0
   12764:	b	127d8 <__assert_fail@plt+0x157c>
   12768:	mov	r0, r9
   1276c:	bl	11640 <__assert_fail@plt+0x3e4>
   12770:	cmp	r0, #0
   12774:	beq	127f0 <__assert_fail@plt+0x1594>
   12778:	mov	sl, #1
   1277c:	mov	r0, r5
   12780:	bl	125e8 <__assert_fail@plt+0x138c>
   12784:	cmp	r5, #0
   12788:	mov	r4, r0
   1278c:	beq	127d0 <__assert_fail@plt+0x1574>
   12790:	mov	r0, r7
   12794:	bl	117b4 <__assert_fail@plt+0x558>
   12798:	cmp	r0, #0
   1279c:	beq	127f8 <__assert_fail@plt+0x159c>
   127a0:	mov	r0, r4
   127a4:	bl	117b4 <__assert_fail@plt+0x558>
   127a8:	cmp	r0, #0
   127ac:	beq	127f8 <__assert_fail@plt+0x159c>
   127b0:	ldr	r3, [pc, #108]	; 12824 <__assert_fail@plt+0x15c8>
   127b4:	cmp	sl, #0
   127b8:	add	r1, r7, #4
   127bc:	moveq	r3, fp
   127c0:	mov	r0, r1
   127c4:	add	r2, r4, #4
   127c8:	mov	sl, r3
   127cc:	blx	r3
   127d0:	mov	r0, r4
   127d4:	bl	116b4 <__assert_fail@plt+0x458>
   127d8:	mov	r0, r6
   127dc:	bl	11640 <__assert_fail@plt+0x3e4>
   127e0:	cmp	r0, #0
   127e4:	beq	12768 <__assert_fail@plt+0x150c>
   127e8:	mov	sl, r8
   127ec:	b	1277c <__assert_fail@plt+0x1520>
   127f0:	mov	r0, r7
   127f4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127f8:	mov	r2, #5
   127fc:	ldr	r1, [pc, #36]	; 12828 <__assert_fail@plt+0x15cc>
   12800:	mov	r0, #0
   12804:	bl	1104c <dcgettext@plt>
   12808:	mov	r1, #0
   1280c:	mov	r2, r0
   12810:	mov	r0, #2
   12814:	bl	110c4 <error@plt>
   12818:	andeq	ip, r2, r4, lsl #15
   1281c:	andeq	ip, r2, ip, asr r8
   12820:	andeq	r6, r1, r4, lsl r2
   12824:	andeq	r6, r1, r4, lsl #11
   12828:	andeq	ip, r2, r0, lsr r8
   1282c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12830:	mov	r7, r0
   12834:	bl	12744 <__assert_fail@plt+0x14e8>
   12838:	ldr	r8, [pc, #520]	; 12a48 <__assert_fail@plt+0x17ec>
   1283c:	ldr	r9, [pc, #520]	; 12a4c <__assert_fail@plt+0x17f0>
   12840:	ldr	sl, [pc, #520]	; 12a50 <__assert_fail@plt+0x17f4>
   12844:	ldr	fp, [pc, #520]	; 12a54 <__assert_fail@plt+0x17f8>
   12848:	mov	r4, r0
   1284c:	mov	r0, r8
   12850:	bl	11640 <__assert_fail@plt+0x3e4>
   12854:	cmp	r0, #0
   12858:	bne	12950 <__assert_fail@plt+0x16f4>
   1285c:	mov	r0, r9
   12860:	bl	11640 <__assert_fail@plt+0x3e4>
   12864:	cmp	r0, #0
   12868:	movne	r6, #1
   1286c:	beq	129c4 <__assert_fail@plt+0x1768>
   12870:	mov	r0, r7
   12874:	bl	12744 <__assert_fail@plt+0x14e8>
   12878:	cmp	r7, #0
   1287c:	moveq	r6, r7
   12880:	mov	r5, r0
   12884:	beq	12914 <__assert_fail@plt+0x16b8>
   12888:	mov	r0, r4
   1288c:	bl	11860 <__assert_fail@plt+0x604>
   12890:	mov	r0, r5
   12894:	bl	11860 <__assert_fail@plt+0x604>
   12898:	ldr	r0, [r4, #4]
   1289c:	ldrb	r3, [r0]
   128a0:	sub	r3, r3, #45	; 0x2d
   128a4:	clz	r3, r3
   128a8:	lsr	r3, r3, #5
   128ac:	add	r2, r0, r3
   128b0:	ldrb	r3, [r0, r3]
   128b4:	b	128c4 <__assert_fail@plt+0x1668>
   128b8:	ldrb	r3, [r2, #1]!
   128bc:	cmp	r3, #0
   128c0:	beq	12988 <__assert_fail@plt+0x172c>
   128c4:	sub	r3, r3, #48	; 0x30
   128c8:	cmp	r3, #9
   128cc:	bls	128b8 <__assert_fail@plt+0x165c>
   128d0:	bl	11178 <__errno_location@plt>
   128d4:	mov	r3, #0
   128d8:	str	r3, [r0]
   128dc:	ldr	r1, [r5, #4]
   128e0:	ldr	r0, [r4, #4]
   128e4:	bl	110d0 <strcoll@plt>
   128e8:	sub	r6, r6, #1
   128ec:	cmp	r6, #4
   128f0:	ldrls	pc, [pc, r6, lsl #2]
   128f4:	b	12974 <__assert_fail@plt+0x1718>
   128f8:	andeq	r2, r1, r4, ror #18
   128fc:	andeq	r2, r1, r8, asr r9
   12900:	andeq	r2, r1, ip, ror r9
   12904:	andeq	r2, r1, ip, lsl #18
   12908:	andeq	r2, r1, r4, ror #19
   1290c:	mvn	r6, r0
   12910:	lsr	r6, r6, #31
   12914:	mov	r0, r4
   12918:	bl	116b4 <__assert_fail@plt+0x458>
   1291c:	mov	r0, r5
   12920:	bl	116b4 <__assert_fail@plt+0x458>
   12924:	mov	r0, #16
   12928:	bl	2b704 <__assert_fail@plt+0x1a4a8>
   1292c:	mov	r3, #0
   12930:	mov	r1, r6
   12934:	mov	r4, r0
   12938:	str	r3, [r0], #4
   1293c:	bl	15920 <__assert_fail@plt+0x46c4>
   12940:	mov	r0, r8
   12944:	bl	11640 <__assert_fail@plt+0x3e4>
   12948:	cmp	r0, #0
   1294c:	beq	1285c <__assert_fail@plt+0x1600>
   12950:	mov	r6, #0
   12954:	b	12870 <__assert_fail@plt+0x1614>
   12958:	clz	r6, r0
   1295c:	lsr	r6, r6, #5
   12960:	b	12914 <__assert_fail@plt+0x16b8>
   12964:	cmp	r0, #0
   12968:	movgt	r6, #0
   1296c:	movle	r6, #1
   12970:	b	12914 <__assert_fail@plt+0x16b8>
   12974:	lsr	r6, r0, #31
   12978:	b	12914 <__assert_fail@plt+0x16b8>
   1297c:	adds	r6, r0, #0
   12980:	movne	r6, #1
   12984:	b	12914 <__assert_fail@plt+0x16b8>
   12988:	ldr	r1, [r5, #4]
   1298c:	ldrb	r3, [r1]
   12990:	sub	r3, r3, #45	; 0x2d
   12994:	clz	r3, r3
   12998:	lsr	r3, r3, #5
   1299c:	add	r2, r1, r3
   129a0:	ldrb	r3, [r1, r3]
   129a4:	b	129b4 <__assert_fail@plt+0x1758>
   129a8:	ldrb	r3, [r2, #1]!
   129ac:	cmp	r3, #0
   129b0:	beq	129dc <__assert_fail@plt+0x1780>
   129b4:	sub	r3, r3, #48	; 0x30
   129b8:	cmp	r3, #9
   129bc:	bls	129a8 <__assert_fail@plt+0x174c>
   129c0:	b	128d0 <__assert_fail@plt+0x1674>
   129c4:	mov	r0, sl
   129c8:	bl	11640 <__assert_fail@plt+0x3e4>
   129cc:	cmp	r0, #0
   129d0:	beq	129f4 <__assert_fail@plt+0x1798>
   129d4:	mov	r6, #2
   129d8:	b	12870 <__assert_fail@plt+0x1614>
   129dc:	bl	2af98 <__assert_fail@plt+0x19d3c>
   129e0:	b	128e8 <__assert_fail@plt+0x168c>
   129e4:	cmp	r0, #0
   129e8:	movle	r6, #0
   129ec:	movgt	r6, #1
   129f0:	b	12914 <__assert_fail@plt+0x16b8>
   129f4:	mov	r0, fp
   129f8:	bl	11640 <__assert_fail@plt+0x3e4>
   129fc:	cmp	r0, #0
   12a00:	bne	129d4 <__assert_fail@plt+0x1778>
   12a04:	ldr	r0, [pc, #76]	; 12a58 <__assert_fail@plt+0x17fc>
   12a08:	bl	11640 <__assert_fail@plt+0x3e4>
   12a0c:	cmp	r0, #0
   12a10:	movne	r6, #3
   12a14:	bne	12870 <__assert_fail@plt+0x1614>
   12a18:	ldr	r0, [pc, #60]	; 12a5c <__assert_fail@plt+0x1800>
   12a1c:	bl	11640 <__assert_fail@plt+0x3e4>
   12a20:	cmp	r0, #0
   12a24:	movne	r6, #4
   12a28:	bne	12870 <__assert_fail@plt+0x1614>
   12a2c:	ldr	r0, [pc, #44]	; 12a60 <__assert_fail@plt+0x1804>
   12a30:	bl	11640 <__assert_fail@plt+0x3e4>
   12a34:	cmp	r0, #0
   12a38:	movne	r6, #5
   12a3c:	bne	12870 <__assert_fail@plt+0x1614>
   12a40:	mov	r0, r4
   12a44:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a48:	andeq	ip, r2, r0, ror #16
   12a4c:	andeq	ip, r2, r4, ror #16
   12a50:	andeq	ip, r2, r8, ror #16
   12a54:	andeq	ip, r2, ip, ror #16
   12a58:	andeq	ip, r2, r0, ror r8
   12a5c:	andeq	ip, r2, r4, ror r8
   12a60:	andeq	ip, r2, r8, ror r8
   12a64:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12a68:	mov	r7, r0
   12a6c:	bl	1282c <__assert_fail@plt+0x15d0>
   12a70:	ldr	r6, [pc, #160]	; 12b18 <__assert_fail@plt+0x18bc>
   12a74:	mov	r5, #0
   12a78:	mov	r8, #16
   12a7c:	mov	r4, r0
   12a80:	mov	r0, r6
   12a84:	bl	11640 <__assert_fail@plt+0x3e4>
   12a88:	mov	r3, r5
   12a8c:	cmp	r0, #0
   12a90:	mov	r0, r4
   12a94:	beq	12b10 <__assert_fail@plt+0x18b4>
   12a98:	cmp	r7, #0
   12a9c:	beq	12aac <__assert_fail@plt+0x1850>
   12aa0:	bl	116f0 <__assert_fail@plt+0x494>
   12aa4:	eor	r0, r0, #1
   12aa8:	uxtb	r3, r0
   12aac:	mov	r0, r3
   12ab0:	bl	1282c <__assert_fail@plt+0x15d0>
   12ab4:	mov	r9, r0
   12ab8:	mov	r0, r4
   12abc:	bl	116f0 <__assert_fail@plt+0x494>
   12ac0:	cmp	r0, #0
   12ac4:	mov	r0, r9
   12ac8:	bne	12ad8 <__assert_fail@plt+0x187c>
   12acc:	bl	116f0 <__assert_fail@plt+0x494>
   12ad0:	cmp	r0, #0
   12ad4:	beq	12b04 <__assert_fail@plt+0x18a8>
   12ad8:	mov	r0, r4
   12adc:	bl	116b4 <__assert_fail@plt+0x458>
   12ae0:	mov	r0, r9
   12ae4:	bl	116b4 <__assert_fail@plt+0x458>
   12ae8:	mov	r0, r8
   12aec:	bl	2b704 <__assert_fail@plt+0x1a4a8>
   12af0:	mov	r1, #0
   12af4:	mov	r4, r0
   12af8:	str	r5, [r0], #4
   12afc:	bl	15920 <__assert_fail@plt+0x46c4>
   12b00:	b	12a80 <__assert_fail@plt+0x1824>
   12b04:	mov	r0, r9
   12b08:	bl	116b4 <__assert_fail@plt+0x458>
   12b0c:	b	12a80 <__assert_fail@plt+0x1824>
   12b10:	mov	r0, r4
   12b14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12b18:	andeq	ip, r2, ip, ror r8
   12b1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12b20:	mov	r8, r0
   12b24:	bl	12a64 <__assert_fail@plt+0x1808>
   12b28:	ldr	r7, [pc, #160]	; 12bd0 <__assert_fail@plt+0x1974>
   12b2c:	mov	r6, #0
   12b30:	mov	r9, #16
   12b34:	mov	r4, r0
   12b38:	mov	r0, r7
   12b3c:	bl	11640 <__assert_fail@plt+0x3e4>
   12b40:	mov	r3, r6
   12b44:	cmp	r0, #0
   12b48:	mov	r0, r4
   12b4c:	beq	12bc8 <__assert_fail@plt+0x196c>
   12b50:	cmp	r8, #0
   12b54:	beq	12b60 <__assert_fail@plt+0x1904>
   12b58:	bl	116f0 <__assert_fail@plt+0x494>
   12b5c:	mov	r3, r0
   12b60:	mov	r0, r3
   12b64:	bl	12a64 <__assert_fail@plt+0x1808>
   12b68:	mov	r5, r0
   12b6c:	mov	r0, r4
   12b70:	bl	116f0 <__assert_fail@plt+0x494>
   12b74:	cmp	r0, #0
   12b78:	mov	r0, r4
   12b7c:	beq	12bbc <__assert_fail@plt+0x1960>
   12b80:	bl	116b4 <__assert_fail@plt+0x458>
   12b84:	mov	r0, r5
   12b88:	bl	116f0 <__assert_fail@plt+0x494>
   12b8c:	mov	r4, r5
   12b90:	cmp	r0, #0
   12b94:	beq	12b38 <__assert_fail@plt+0x18dc>
   12b98:	mov	r0, r5
   12b9c:	bl	116b4 <__assert_fail@plt+0x458>
   12ba0:	mov	r0, r9
   12ba4:	bl	2b704 <__assert_fail@plt+0x1a4a8>
   12ba8:	mov	r1, #0
   12bac:	mov	r4, r0
   12bb0:	str	r6, [r0], #4
   12bb4:	bl	15920 <__assert_fail@plt+0x46c4>
   12bb8:	b	12b38 <__assert_fail@plt+0x18dc>
   12bbc:	mov	r0, r5
   12bc0:	bl	116b4 <__assert_fail@plt+0x458>
   12bc4:	b	12b38 <__assert_fail@plt+0x18dc>
   12bc8:	mov	r0, r4
   12bcc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12bd0:	andeq	ip, r2, r0, lsl #17
   12bd4:	push	{r7, lr}
   12bd8:	subs	r7, r0, #0
   12bdc:	sub	sp, sp, #56	; 0x38
   12be0:	beq	12c1c <__assert_fail@plt+0x19c0>
   12be4:	ldr	r3, [pc, #832]	; 12f2c <__assert_fail@plt+0x1cd0>
   12be8:	mov	r2, #5
   12bec:	ldr	r1, [pc, #828]	; 12f30 <__assert_fail@plt+0x1cd4>
   12bf0:	mov	r0, #0
   12bf4:	ldr	r4, [r3]
   12bf8:	bl	1104c <dcgettext@plt>
   12bfc:	ldr	r3, [pc, #816]	; 12f34 <__assert_fail@plt+0x1cd8>
   12c00:	mov	r1, #1
   12c04:	ldr	r3, [r3]
   12c08:	mov	r2, r0
   12c0c:	mov	r0, r4
   12c10:	bl	111cc <__fprintf_chk@plt>
   12c14:	mov	r0, r7
   12c18:	bl	11154 <exit@plt>
   12c1c:	mov	r2, #5
   12c20:	ldr	r1, [pc, #784]	; 12f38 <__assert_fail@plt+0x1cdc>
   12c24:	bl	1104c <dcgettext@plt>
   12c28:	ldr	r3, [pc, #772]	; 12f34 <__assert_fail@plt+0x1cd8>
   12c2c:	ldr	r5, [pc, #776]	; 12f3c <__assert_fail@plt+0x1ce0>
   12c30:	ldr	r3, [r3]
   12c34:	mov	r2, r3
   12c38:	mov	r1, r0
   12c3c:	mov	r0, #1
   12c40:	bl	111b4 <__printf_chk@plt>
   12c44:	ldr	r0, [r5]
   12c48:	ldr	r3, [r0, #20]
   12c4c:	ldr	r2, [r0, #24]
   12c50:	cmp	r3, r2
   12c54:	addcc	r1, r3, #1
   12c58:	movcc	r2, #10
   12c5c:	strcc	r1, [r0, #20]
   12c60:	strbcc	r2, [r3]
   12c64:	bcs	12efc <__assert_fail@plt+0x1ca0>
   12c68:	mov	r2, #5
   12c6c:	ldr	r1, [pc, #716]	; 12f40 <__assert_fail@plt+0x1ce4>
   12c70:	mov	r0, #0
   12c74:	bl	1104c <dcgettext@plt>
   12c78:	ldr	r1, [r5]
   12c7c:	bl	10f5c <fputs_unlocked@plt>
   12c80:	mov	r2, #5
   12c84:	ldr	r1, [pc, #696]	; 12f44 <__assert_fail@plt+0x1ce8>
   12c88:	mov	r0, #0
   12c8c:	bl	1104c <dcgettext@plt>
   12c90:	ldr	r1, [r5]
   12c94:	bl	10f5c <fputs_unlocked@plt>
   12c98:	mov	r2, #5
   12c9c:	ldr	r1, [pc, #676]	; 12f48 <__assert_fail@plt+0x1cec>
   12ca0:	mov	r0, #0
   12ca4:	bl	1104c <dcgettext@plt>
   12ca8:	ldr	r1, [r5]
   12cac:	bl	10f5c <fputs_unlocked@plt>
   12cb0:	mov	r2, #5
   12cb4:	ldr	r1, [pc, #656]	; 12f4c <__assert_fail@plt+0x1cf0>
   12cb8:	mov	r0, #0
   12cbc:	bl	1104c <dcgettext@plt>
   12cc0:	ldr	r1, [r5]
   12cc4:	bl	10f5c <fputs_unlocked@plt>
   12cc8:	mov	r2, #5
   12ccc:	ldr	r1, [pc, #636]	; 12f50 <__assert_fail@plt+0x1cf4>
   12cd0:	mov	r0, #0
   12cd4:	bl	1104c <dcgettext@plt>
   12cd8:	ldr	r1, [r5]
   12cdc:	bl	10f5c <fputs_unlocked@plt>
   12ce0:	mov	r2, #5
   12ce4:	ldr	r1, [pc, #616]	; 12f54 <__assert_fail@plt+0x1cf8>
   12ce8:	mov	r0, #0
   12cec:	bl	1104c <dcgettext@plt>
   12cf0:	ldr	r1, [r5]
   12cf4:	bl	10f5c <fputs_unlocked@plt>
   12cf8:	mov	r2, #5
   12cfc:	ldr	r1, [pc, #596]	; 12f58 <__assert_fail@plt+0x1cfc>
   12d00:	mov	r0, #0
   12d04:	bl	1104c <dcgettext@plt>
   12d08:	ldr	r1, [r5]
   12d0c:	bl	10f5c <fputs_unlocked@plt>
   12d10:	mov	r2, #5
   12d14:	ldr	r1, [pc, #576]	; 12f5c <__assert_fail@plt+0x1d00>
   12d18:	mov	r0, #0
   12d1c:	bl	1104c <dcgettext@plt>
   12d20:	ldr	r1, [r5]
   12d24:	bl	10f5c <fputs_unlocked@plt>
   12d28:	mov	r2, #5
   12d2c:	ldr	r1, [pc, #556]	; 12f60 <__assert_fail@plt+0x1d04>
   12d30:	mov	r0, #0
   12d34:	bl	1104c <dcgettext@plt>
   12d38:	ldr	r4, [pc, #548]	; 12f64 <__assert_fail@plt+0x1d08>
   12d3c:	ldr	r1, [r5]
   12d40:	bl	10f5c <fputs_unlocked@plt>
   12d44:	mov	r2, #5
   12d48:	ldr	r1, [pc, #536]	; 12f68 <__assert_fail@plt+0x1d0c>
   12d4c:	mov	r0, #0
   12d50:	bl	1104c <dcgettext@plt>
   12d54:	ldr	r1, [r5]
   12d58:	bl	10f5c <fputs_unlocked@plt>
   12d5c:	ldm	r4!, {r0, r1, r2, r3}
   12d60:	mov	lr, sp
   12d64:	stmia	lr!, {r0, r1, r2, r3}
   12d68:	ldm	r4!, {r0, r1, r2, r3}
   12d6c:	ldr	ip, [sp]
   12d70:	stmia	lr!, {r0, r1, r2, r3}
   12d74:	cmp	ip, #0
   12d78:	ldm	r4!, {r0, r1, r2, r3}
   12d7c:	stmia	lr!, {r0, r1, r2, r3}
   12d80:	ldm	r4, {r0, r1}
   12d84:	moveq	r4, sp
   12d88:	stm	lr, {r0, r1}
   12d8c:	beq	12dbc <__assert_fail@plt+0x1b60>
   12d90:	ldr	r6, [pc, #468]	; 12f6c <__assert_fail@plt+0x1d10>
   12d94:	mov	r4, sp
   12d98:	b	12da8 <__assert_fail@plt+0x1b4c>
   12d9c:	ldr	ip, [r4, #8]!
   12da0:	cmp	ip, #0
   12da4:	beq	12dbc <__assert_fail@plt+0x1b60>
   12da8:	mov	r1, ip
   12dac:	mov	r0, r6
   12db0:	bl	10f98 <strcmp@plt>
   12db4:	cmp	r0, #0
   12db8:	bne	12d9c <__assert_fail@plt+0x1b40>
   12dbc:	ldr	r4, [r4, #4]
   12dc0:	mov	r2, #5
   12dc4:	cmp	r4, #0
   12dc8:	ldr	r1, [pc, #416]	; 12f70 <__assert_fail@plt+0x1d14>
   12dcc:	beq	12e74 <__assert_fail@plt+0x1c18>
   12dd0:	mov	r0, #0
   12dd4:	bl	1104c <dcgettext@plt>
   12dd8:	ldr	r3, [pc, #404]	; 12f74 <__assert_fail@plt+0x1d18>
   12ddc:	ldr	r2, [pc, #404]	; 12f78 <__assert_fail@plt+0x1d1c>
   12de0:	mov	r1, r0
   12de4:	mov	r0, #1
   12de8:	bl	111b4 <__printf_chk@plt>
   12dec:	mov	r1, #0
   12df0:	mov	r0, #5
   12df4:	bl	11208 <setlocale@plt>
   12df8:	cmp	r0, #0
   12dfc:	ldreq	r6, [pc, #360]	; 12f6c <__assert_fail@plt+0x1d10>
   12e00:	beq	12e1c <__assert_fail@plt+0x1bc0>
   12e04:	mov	r2, #3
   12e08:	ldr	r1, [pc, #364]	; 12f7c <__assert_fail@plt+0x1d20>
   12e0c:	bl	11244 <strncmp@plt>
   12e10:	ldr	r6, [pc, #340]	; 12f6c <__assert_fail@plt+0x1d10>
   12e14:	cmp	r0, #0
   12e18:	bne	12f10 <__assert_fail@plt+0x1cb4>
   12e1c:	mov	r2, #5
   12e20:	ldr	r1, [pc, #344]	; 12f80 <__assert_fail@plt+0x1d24>
   12e24:	mov	r0, #0
   12e28:	bl	1104c <dcgettext@plt>
   12e2c:	ldr	r3, [pc, #312]	; 12f6c <__assert_fail@plt+0x1d10>
   12e30:	ldr	r2, [pc, #316]	; 12f74 <__assert_fail@plt+0x1d18>
   12e34:	mov	r1, r0
   12e38:	mov	r0, #1
   12e3c:	bl	111b4 <__printf_chk@plt>
   12e40:	mov	r2, #5
   12e44:	ldr	r1, [pc, #312]	; 12f84 <__assert_fail@plt+0x1d28>
   12e48:	mov	r0, #0
   12e4c:	bl	1104c <dcgettext@plt>
   12e50:	ldr	r2, [pc, #304]	; 12f88 <__assert_fail@plt+0x1d2c>
   12e54:	cmp	r4, r6
   12e58:	ldr	r3, [pc, #300]	; 12f8c <__assert_fail@plt+0x1d30>
   12e5c:	movne	r3, r2
   12e60:	mov	r1, r0
   12e64:	mov	r2, r4
   12e68:	mov	r0, #1
   12e6c:	bl	111b4 <__printf_chk@plt>
   12e70:	b	12c14 <__assert_fail@plt+0x19b8>
   12e74:	mov	r0, r4
   12e78:	bl	1104c <dcgettext@plt>
   12e7c:	ldr	r3, [pc, #240]	; 12f74 <__assert_fail@plt+0x1d18>
   12e80:	ldr	r2, [pc, #240]	; 12f78 <__assert_fail@plt+0x1d1c>
   12e84:	mov	r1, r0
   12e88:	mov	r0, #1
   12e8c:	bl	111b4 <__printf_chk@plt>
   12e90:	mov	r1, r4
   12e94:	mov	r0, #5
   12e98:	bl	11208 <setlocale@plt>
   12e9c:	cmp	r0, #0
   12ea0:	beq	12eb8 <__assert_fail@plt+0x1c5c>
   12ea4:	mov	r2, #3
   12ea8:	ldr	r1, [pc, #204]	; 12f7c <__assert_fail@plt+0x1d20>
   12eac:	bl	11244 <strncmp@plt>
   12eb0:	cmp	r0, #0
   12eb4:	bne	12f08 <__assert_fail@plt+0x1cac>
   12eb8:	mov	r2, #5
   12ebc:	ldr	r1, [pc, #188]	; 12f80 <__assert_fail@plt+0x1d24>
   12ec0:	mov	r0, #0
   12ec4:	bl	1104c <dcgettext@plt>
   12ec8:	ldr	r3, [pc, #156]	; 12f6c <__assert_fail@plt+0x1d10>
   12ecc:	ldr	r2, [pc, #160]	; 12f74 <__assert_fail@plt+0x1d18>
   12ed0:	mov	r4, r3
   12ed4:	mov	r1, r0
   12ed8:	mov	r0, #1
   12edc:	bl	111b4 <__printf_chk@plt>
   12ee0:	ldr	r1, [pc, #156]	; 12f84 <__assert_fail@plt+0x1d28>
   12ee4:	mov	r2, #5
   12ee8:	mov	r0, #0
   12eec:	bl	1104c <dcgettext@plt>
   12ef0:	ldr	r3, [pc, #148]	; 12f8c <__assert_fail@plt+0x1d30>
   12ef4:	mov	r1, r0
   12ef8:	b	12e64 <__assert_fail@plt+0x1c08>
   12efc:	mov	r1, #10
   12f00:	bl	111fc <__overflow@plt>
   12f04:	b	12c68 <__assert_fail@plt+0x1a0c>
   12f08:	ldr	r6, [pc, #92]	; 12f6c <__assert_fail@plt+0x1d10>
   12f0c:	mov	r4, r6
   12f10:	mov	r2, #5
   12f14:	ldr	r1, [pc, #116]	; 12f90 <__assert_fail@plt+0x1d34>
   12f18:	mov	r0, #0
   12f1c:	bl	1104c <dcgettext@plt>
   12f20:	ldr	r1, [r5]
   12f24:	bl	10f5c <fputs_unlocked@plt>
   12f28:	b	12e1c <__assert_fail@plt+0x1bc0>
   12f2c:	andeq	pc, r3, r8, lsl #3
   12f30:	andeq	ip, r2, ip, lsl #17
   12f34:	andeq	pc, r3, r4, lsr #3
   12f38:			; <UNDEFINED> instruction: 0x0002c8b4
   12f3c:	andeq	pc, r3, ip, lsl #3
   12f40:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   12f44:	andeq	ip, r2, ip, lsl #18
   12f48:	andeq	ip, r2, r4, asr #18
   12f4c:	andeq	ip, r2, r8, asr sl
   12f50:	andeq	ip, r2, ip, ror fp
   12f54:	strdeq	ip, [r2], -r0
   12f58:	andeq	ip, r2, ip, lsr #25
   12f5c:	andeq	ip, r2, r4, ror #27
   12f60:			; <UNDEFINED> instruction: 0x0002ceb0
   12f64:	andeq	ip, r2, ip, lsr #13
   12f68:	ldrdeq	ip, [r2], -r4
   12f6c:	andeq	ip, r2, r4, lsl #17
   12f70:	andeq	sp, r2, r0, ror r0
   12f74:	andeq	sp, r2, r8, lsl #1
   12f78:	strheq	sp, [r2], -r0
   12f7c:	andeq	sp, r2, r0, asr #1
   12f80:	andeq	sp, r2, ip, lsl #2
   12f84:	andeq	sp, r2, r8, lsr #2
   12f88:	andeq	ip, r2, ip, ror #23
   12f8c:	strdeq	sp, [r2], -r0
   12f90:	andeq	sp, r2, r4, asr #1
   12f94:	ldr	r3, [pc, #4]	; 12fa0 <__assert_fail@plt+0x1d44>
   12f98:	str	r0, [r3]
   12f9c:	bx	lr
   12fa0:	muleq	r3, ip, r1
   12fa4:	ldr	r3, [pc, #4]	; 12fb0 <__assert_fail@plt+0x1d54>
   12fa8:	strb	r0, [r3, #4]
   12fac:	bx	lr
   12fb0:	muleq	r3, ip, r1
   12fb4:	ldr	r3, [pc, #192]	; 1307c <__assert_fail@plt+0x1e20>
   12fb8:	push	{r4, r5, r6, lr}
   12fbc:	sub	sp, sp, #8
   12fc0:	ldr	r0, [r3]
   12fc4:	bl	2bd5c <__assert_fail@plt+0x1ab00>
   12fc8:	cmp	r0, #0
   12fcc:	beq	12ff0 <__assert_fail@plt+0x1d94>
   12fd0:	ldr	r4, [pc, #168]	; 13080 <__assert_fail@plt+0x1e24>
   12fd4:	ldrb	r3, [r4, #4]
   12fd8:	cmp	r3, #0
   12fdc:	beq	1300c <__assert_fail@plt+0x1db0>
   12fe0:	bl	11178 <__errno_location@plt>
   12fe4:	ldr	r3, [r0]
   12fe8:	cmp	r3, #32
   12fec:	bne	1300c <__assert_fail@plt+0x1db0>
   12ff0:	ldr	r3, [pc, #140]	; 13084 <__assert_fail@plt+0x1e28>
   12ff4:	ldr	r0, [r3]
   12ff8:	bl	2bd5c <__assert_fail@plt+0x1ab00>
   12ffc:	cmp	r0, #0
   13000:	bne	13054 <__assert_fail@plt+0x1df8>
   13004:	add	sp, sp, #8
   13008:	pop	{r4, r5, r6, pc}
   1300c:	mov	r2, #5
   13010:	ldr	r1, [pc, #112]	; 13088 <__assert_fail@plt+0x1e2c>
   13014:	mov	r0, #0
   13018:	bl	1104c <dcgettext@plt>
   1301c:	ldr	r4, [r4]
   13020:	cmp	r4, #0
   13024:	mov	r5, r0
   13028:	beq	13060 <__assert_fail@plt+0x1e04>
   1302c:	bl	11178 <__errno_location@plt>
   13030:	ldr	r6, [r0]
   13034:	mov	r0, r4
   13038:	bl	1d8bc <__assert_fail@plt+0xc660>
   1303c:	mov	r1, r6
   13040:	str	r5, [sp]
   13044:	ldr	r2, [pc, #64]	; 1308c <__assert_fail@plt+0x1e30>
   13048:	mov	r3, r0
   1304c:	mov	r0, #0
   13050:	bl	110c4 <error@plt>
   13054:	ldr	r3, [pc, #52]	; 13090 <__assert_fail@plt+0x1e34>
   13058:	ldr	r0, [r3]
   1305c:	bl	10ff8 <_exit@plt>
   13060:	bl	11178 <__errno_location@plt>
   13064:	mov	r3, r5
   13068:	ldr	r2, [pc, #36]	; 13094 <__assert_fail@plt+0x1e38>
   1306c:	ldr	r1, [r0]
   13070:	mov	r0, r4
   13074:	bl	110c4 <error@plt>
   13078:	b	13054 <__assert_fail@plt+0x1df8>
   1307c:	andeq	pc, r3, ip, lsl #3
   13080:	muleq	r3, ip, r1
   13084:	andeq	pc, r3, r8, lsl #3
   13088:	andeq	sp, r2, r4, asr r2
   1308c:	andeq	sp, r2, r0, ror #4
   13090:	andeq	pc, r3, r4, lsr #2
   13094:	andeq	sp, r2, r4, ror #4
   13098:	push	{r4, r5, lr}
   1309c:	sub	sp, sp, #12
   130a0:	mov	r5, r0
   130a4:	bl	11178 <__errno_location@plt>
   130a8:	mov	r2, #0
   130ac:	mov	r4, r0
   130b0:	ldr	r3, [r0]
   130b4:	str	r2, [r4]
   130b8:	mov	r0, r5
   130bc:	str	r3, [sp]
   130c0:	str	r3, [sp, #4]
   130c4:	bl	10fe0 <free@plt>
   130c8:	ldr	r3, [r4]
   130cc:	add	r2, sp, #8
   130d0:	cmp	r3, #0
   130d4:	moveq	r3, #4
   130d8:	movne	r3, #0
   130dc:	add	r3, r2, r3
   130e0:	ldr	r3, [r3, #-8]
   130e4:	str	r3, [r4]
   130e8:	add	sp, sp, #12
   130ec:	pop	{r4, r5, pc}
   130f0:	cmp	r0, #16
   130f4:	beq	13178 <__assert_fail@plt+0x1f1c>
   130f8:	bls	13120 <__assert_fail@plt+0x1ec4>
   130fc:	cmp	r0, #64	; 0x40
   13100:	beq	13170 <__assert_fail@plt+0x1f14>
   13104:	bls	13150 <__assert_fail@plt+0x1ef4>
   13108:	cmp	r0, #128	; 0x80
   1310c:	beq	13148 <__assert_fail@plt+0x1eec>
   13110:	cmp	r0, #256	; 0x100
   13114:	bne	13138 <__assert_fail@plt+0x1edc>
   13118:	mov	r0, #8
   1311c:	bx	lr
   13120:	cmp	r0, #4
   13124:	beq	13160 <__assert_fail@plt+0x1f04>
   13128:	cmp	r0, #8
   1312c:	beq	13140 <__assert_fail@plt+0x1ee4>
   13130:	cmp	r0, #2
   13134:	beq	13168 <__assert_fail@plt+0x1f0c>
   13138:	mov	r0, #0
   1313c:	bx	lr
   13140:	mov	r0, #3
   13144:	bx	lr
   13148:	mov	r0, #7
   1314c:	bx	lr
   13150:	cmp	r0, #32
   13154:	bne	13138 <__assert_fail@plt+0x1edc>
   13158:	mov	r0, #5
   1315c:	bx	lr
   13160:	mov	r0, #2
   13164:	bx	lr
   13168:	mov	r0, #1
   1316c:	bx	lr
   13170:	mov	r0, #6
   13174:	bx	lr
   13178:	mov	r0, #4
   1317c:	bx	lr
   13180:	mov	ip, #0
   13184:	push	{r4, r5, lr}
   13188:	add	r2, r1, r2
   1318c:	mov	lr, ip
   13190:	mov	r4, ip
   13194:	cmp	r2, r1
   13198:	beq	131d0 <__assert_fail@plt+0x1f74>
   1319c:	ldrb	r5, [r2, #-1]!
   131a0:	orr	lr, lr, r5, lsl ip
   131a4:	add	ip, ip, r3
   131a8:	cmp	ip, #31
   131ac:	bls	13194 <__assert_fail@plt+0x1f38>
   131b0:	str	lr, [r0, r4, lsl #2]
   131b4:	ldrb	lr, [r2]
   131b8:	sub	ip, ip, #32
   131bc:	sub	r5, r3, ip
   131c0:	cmp	r2, r1
   131c4:	add	r4, r4, #1
   131c8:	lsr	lr, lr, r5
   131cc:	bne	1319c <__assert_fail@plt+0x1f40>
   131d0:	cmp	lr, #0
   131d4:	strne	lr, [r0, r4, lsl #2]
   131d8:	addne	r4, r4, #1
   131dc:	bne	13214 <__assert_fail@plt+0x1fb8>
   131e0:	cmp	r4, #0
   131e4:	beq	13214 <__assert_fail@plt+0x1fb8>
   131e8:	sub	r3, r4, #-1073741823	; 0xc0000001
   131ec:	ldr	r2, [r0, r3, lsl #2]
   131f0:	add	r0, r0, r3, lsl #2
   131f4:	cmp	r2, #0
   131f8:	beq	1320c <__assert_fail@plt+0x1fb0>
   131fc:	b	13214 <__assert_fail@plt+0x1fb8>
   13200:	ldr	r3, [r0, #-4]!
   13204:	cmp	r3, #0
   13208:	bne	13214 <__assert_fail@plt+0x1fb8>
   1320c:	subs	r4, r4, #1
   13210:	bne	13200 <__assert_fail@plt+0x1fa4>
   13214:	mov	r0, r4
   13218:	pop	{r4, r5, pc}
   1321c:	b	13098 <__assert_fail@plt+0x1e3c>
   13220:	push	{r4, lr}
   13224:	mov	r1, r2
   13228:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   1322c:	cmp	r0, #0
   13230:	popne	{r4, pc}
   13234:	ldr	r0, [pc]	; 1323c <__assert_fail@plt+0x1fe0>
   13238:	bl	112b4 <__assert_fail@plt+0x58>
   1323c:	andeq	sp, r2, r8, asr #10
   13240:	push	{r4, lr}
   13244:	ldr	lr, [sp, #8]
   13248:	sub	ip, lr, #1
   1324c:	cmn	ip, #3
   13250:	bls	13308 <__assert_fail@plt+0x20ac>
   13254:	mvn	ip, r1
   13258:	cmp	r1, r3
   1325c:	lsr	ip, ip, #31
   13260:	movgt	ip, #0
   13264:	cmp	ip, #0
   13268:	beq	1331c <__assert_fail@plt+0x20c0>
   1326c:	cmp	r0, #0
   13270:	movne	ip, r1
   13274:	bne	132a8 <__assert_fail@plt+0x204c>
   13278:	add	ip, r1, #1
   1327c:	cmp	r3, ip
   13280:	addne	r2, r2, r1, lsl #2
   13284:	bne	13298 <__assert_fail@plt+0x203c>
   13288:	b	132e8 <__assert_fail@plt+0x208c>
   1328c:	add	ip, ip, #1
   13290:	cmp	r3, ip
   13294:	beq	132e8 <__assert_fail@plt+0x208c>
   13298:	ldr	r0, [r2, #4]!
   1329c:	cmp	lr, r0
   132a0:	beq	1328c <__assert_fail@plt+0x2030>
   132a4:	eor	r0, r0, lr
   132a8:	rsb	r2, r0, #0
   132ac:	and	r0, r0, r2
   132b0:	ands	r3, r0, #-16777216	; 0xff000000
   132b4:	bne	13300 <__assert_fail@plt+0x20a4>
   132b8:	lsl	r0, r0, #8
   132bc:	tst	r0, #-16777216	; 0xff000000
   132c0:	add	r3, r3, #8
   132c4:	beq	132b8 <__assert_fail@plt+0x205c>
   132c8:	cmp	r0, #0
   132cc:	blt	132dc <__assert_fail@plt+0x2080>
   132d0:	lsls	r0, r0, #1
   132d4:	add	r3, r3, #1
   132d8:	bpl	132d0 <__assert_fail@plt+0x2074>
   132dc:	rsb	r3, r3, ip, lsl #5
   132e0:	add	r0, r3, #31
   132e4:	pop	{r4, pc}
   132e8:	cmp	lr, #0
   132ec:	bne	132f8 <__assert_fail@plt+0x209c>
   132f0:	mvn	r0, #0
   132f4:	pop	{r4, pc}
   132f8:	lsl	r0, r3, #5
   132fc:	pop	{r4, pc}
   13300:	mov	r3, #0
   13304:	b	132c8 <__assert_fail@plt+0x206c>
   13308:	ldr	r3, [pc, #32]	; 13330 <__assert_fail@plt+0x20d4>
   1330c:	ldr	r2, [pc, #32]	; 13334 <__assert_fail@plt+0x20d8>
   13310:	ldr	r1, [pc, #32]	; 13338 <__assert_fail@plt+0x20dc>
   13314:	ldr	r0, [pc, #32]	; 1333c <__assert_fail@plt+0x20e0>
   13318:	bl	1125c <__assert_fail@plt>
   1331c:	ldr	r3, [pc, #12]	; 13330 <__assert_fail@plt+0x20d4>
   13320:	mov	r2, #716	; 0x2cc
   13324:	ldr	r1, [pc, #12]	; 13338 <__assert_fail@plt+0x20dc>
   13328:	ldr	r0, [pc, #16]	; 13340 <__assert_fail@plt+0x20e4>
   1332c:	bl	1125c <__assert_fail@plt>
   13330:	andeq	sp, r2, r8, ror #4
   13334:	andeq	r0, r0, fp, asr #5
   13338:	andeq	sp, r2, r8, ror r5
   1333c:	andeq	sp, r2, r8, lsl #11
   13340:	andeq	sp, r2, r8, lsr #11
   13344:	cmp	r1, #0
   13348:	beq	13410 <__assert_fail@plt+0x21b4>
   1334c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13350:	sub	fp, r0, #1
   13354:	ldr	r6, [pc, #208]	; 1342c <__assert_fail@plt+0x21d0>
   13358:	mov	sl, #0
   1335c:	mvn	r0, #0
   13360:	ldr	r5, [r2]
   13364:	ldr	ip, [r2, #12]
   13368:	rsb	r7, r5, #32
   1336c:	and	r3, ip, r6
   13370:	lsr	r4, r1, r7
   13374:	and	lr, r4, r6
   13378:	lsr	r8, r4, #16
   1337c:	lsr	ip, ip, #16
   13380:	mul	r9, r3, r8
   13384:	mul	r3, r3, lr
   13388:	mla	lr, ip, lr, r9
   1338c:	mul	ip, ip, r8
   13390:	add	lr, lr, r3, lsr #16
   13394:	lsl	r1, r1, r5
   13398:	and	r3, r3, r6
   1339c:	cmp	r9, lr
   133a0:	add	r3, r3, lr, lsl #16
   133a4:	add	r4, r4, #1
   133a8:	addhi	ip, ip, #65536	; 0x10000
   133ac:	add	lr, r4, lr, lsr #16
   133b0:	adds	r3, r1, r3
   133b4:	ldr	r4, [r2, #4]
   133b8:	adc	ip, ip, lr
   133bc:	mul	r9, r4, ip
   133c0:	sub	r1, r1, r9
   133c4:	cmp	r3, r1
   133c8:	movcs	r3, #0
   133cc:	movcc	r3, #1
   133d0:	rsb	r9, r3, #0
   133d4:	and	r9, r9, r4
   133d8:	add	r9, r9, r1
   133dc:	cmp	r4, r9
   133e0:	sub	r1, ip, r3
   133e4:	subls	r9, r9, r4
   133e8:	addls	r1, r1, #1
   133ec:	ands	r3, r9, r0, lsr r7
   133f0:	bne	13418 <__assert_fail@plt+0x21bc>
   133f4:	lsr	r5, r9, r5
   133f8:	cmp	r1, #0
   133fc:	strb	r5, [fp, #1]!
   13400:	add	sl, sl, #1
   13404:	bne	13360 <__assert_fail@plt+0x2104>
   13408:	mov	r0, sl
   1340c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13410:	mov	r0, r1
   13414:	bx	lr
   13418:	ldr	r3, [pc, #16]	; 13430 <__assert_fail@plt+0x21d4>
   1341c:	ldr	r2, [pc, #16]	; 13434 <__assert_fail@plt+0x21d8>
   13420:	ldr	r1, [pc, #16]	; 13438 <__assert_fail@plt+0x21dc>
   13424:	ldr	r0, [pc, #16]	; 1343c <__assert_fail@plt+0x21e0>
   13428:	bl	1125c <__assert_fail@plt>
   1342c:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   13430:	andeq	sp, r2, r8, ror r2
   13434:	andeq	r0, r0, fp, ror #9
   13438:	andeq	sp, r2, r8, ror r5
   1343c:			; <UNDEFINED> instruction: 0x0002d5bc
   13440:	ldr	r3, [r0]
   13444:	cmp	r1, #1
   13448:	push	{r4, r5, r6, lr}
   1344c:	movge	r5, r1
   13450:	movlt	r5, #1
   13454:	cmp	r3, #0
   13458:	mov	r4, r0
   1345c:	beq	1349c <__assert_fail@plt+0x2240>
   13460:	ldr	r0, [pc, #76]	; 134b4 <__assert_fail@plt+0x2258>
   13464:	lsl	r1, r3, #2
   13468:	lsl	r2, r5, #2
   1346c:	ldr	r3, [r0]
   13470:	ldr	r0, [r4, #8]
   13474:	blx	r3
   13478:	str	r0, [r4, #8]
   1347c:	ldr	r3, [r4, #4]
   13480:	str	r5, [r4]
   13484:	cmp	r3, #0
   13488:	rsblt	r3, r3, #0
   1348c:	cmp	r5, r3
   13490:	movlt	r3, #0
   13494:	strlt	r3, [r4, #4]
   13498:	pop	{r4, r5, r6, pc}
   1349c:	ldr	r3, [pc, #16]	; 134b4 <__assert_fail@plt+0x2258>
   134a0:	lsl	r0, r5, #2
   134a4:	ldr	r3, [r3, #4]
   134a8:	blx	r3
   134ac:	str	r0, [r4, #8]
   134b0:	b	1347c <__assert_fail@plt+0x2220>
   134b4:	andeq	pc, r3, r8, lsr #2
   134b8:	subs	r3, r0, #0
   134bc:	beq	134f8 <__assert_fail@plt+0x229c>
   134c0:	ands	r0, r3, #-16777216	; 0xff000000
   134c4:	movne	r0, #0
   134c8:	bne	134dc <__assert_fail@plt+0x2280>
   134cc:	lsl	r3, r3, #8
   134d0:	tst	r3, #-16777216	; 0xff000000
   134d4:	add	r0, r0, #8
   134d8:	beq	134cc <__assert_fail@plt+0x2270>
   134dc:	cmp	r3, #0
   134e0:	blt	134f0 <__assert_fail@plt+0x2294>
   134e4:	lsls	r3, r3, #1
   134e8:	add	r0, r0, #1
   134ec:	bpl	134e4 <__assert_fail@plt+0x2288>
   134f0:	rsb	r0, r0, #32
   134f4:	bx	lr
   134f8:	push	{r4, lr}
   134fc:	ldr	r3, [pc, #12]	; 13510 <__assert_fail@plt+0x22b4>
   13500:	ldr	r2, [pc, #12]	; 13514 <__assert_fail@plt+0x22b8>
   13504:	ldr	r1, [pc, #12]	; 13518 <__assert_fail@plt+0x22bc>
   13508:	ldr	r0, [pc, #12]	; 1351c <__assert_fail@plt+0x22c0>
   1350c:	bl	1125c <__assert_fail@plt>
   13510:	andeq	sp, r2, ip, lsl #5
   13514:			; <UNDEFINED> instruction: 0x000004ba
   13518:	andeq	sp, r2, r8, ror r5
   1351c:	strdeq	sp, [r2], -r8
   13520:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13524:	mov	r6, r3
   13528:	sub	r3, r3, #-1073741823	; 0xc0000001
   1352c:	mov	r7, r0
   13530:	ldr	r0, [r2, r3, lsl #2]
   13534:	mov	r5, r1
   13538:	mov	r4, r2
   1353c:	bl	134b8 <__assert_fail@plt+0x225c>
   13540:	add	r3, r5, r6, lsl #5
   13544:	sub	r3, r3, #33	; 0x21
   13548:	mov	r1, r5
   1354c:	add	r0, r3, r0
   13550:	bl	2c1b4 <__assert_fail@plt+0x1af58>
   13554:	mvn	lr, #0
   13558:	mvn	lr, lr, lsl r5
   1355c:	cmp	r0, #0
   13560:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13564:	mov	ip, #0
   13568:	uxtb	lr, lr
   1356c:	mov	r3, ip
   13570:	add	r2, r7, r0
   13574:	ldr	r1, [r4, r3, lsl #2]
   13578:	lsl	r8, r3, #2
   1357c:	lsr	r1, r1, ip
   13580:	add	ip, ip, r5
   13584:	cmp	ip, #31
   13588:	uxtb	r1, r1
   1358c:	bls	135b0 <__assert_fail@plt+0x2354>
   13590:	add	r3, r3, #1
   13594:	cmp	r6, r3
   13598:	add	r8, r4, r8
   1359c:	subgt	ip, ip, #32
   135a0:	ldrgt	r9, [r8, #4]
   135a4:	subgt	r8, r5, ip
   135a8:	orrgt	r1, r1, r9, lsl r8
   135ac:	uxtbgt	r1, r1
   135b0:	and	r1, r1, lr
   135b4:	strb	r1, [r2, #-1]!
   135b8:	cmp	r7, r2
   135bc:	bne	13574 <__assert_fail@plt+0x2318>
   135c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   135c4:	cmp	r0, #0
   135c8:	push	{r4, lr}
   135cc:	beq	135e4 <__assert_fail@plt+0x2388>
   135d0:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   135d4:	cmp	r0, #0
   135d8:	popne	{r4, pc}
   135dc:	ldr	r0, [pc, #20]	; 135f8 <__assert_fail@plt+0x239c>
   135e0:	bl	112b4 <__assert_fail@plt+0x58>
   135e4:	ldr	r3, [pc, #16]	; 135fc <__assert_fail@plt+0x23a0>
   135e8:	ldr	r2, [pc, #16]	; 13600 <__assert_fail@plt+0x23a4>
   135ec:	ldr	r1, [pc, #16]	; 13604 <__assert_fail@plt+0x23a8>
   135f0:	ldr	r0, [pc, #16]	; 13608 <__assert_fail@plt+0x23ac>
   135f4:	bl	1125c <__assert_fail@plt>
   135f8:	andeq	sp, r2, ip, lsl #12
   135fc:	andeq	sp, r2, r4, lsr #5
   13600:	andeq	r0, r0, r3, lsr #2
   13604:	andeq	sp, r2, r8, ror r5
   13608:	andeq	sp, r2, r0, lsl #12
   1360c:	push	{r4, r5, r6, r7, r8, lr}
   13610:	lsr	r7, r1, #5
   13614:	ldr	lr, [r0, #4]
   13618:	and	r1, r1, #31
   1361c:	mov	r4, #1
   13620:	eor	r6, lr, lr, asr #31
   13624:	sub	r6, r6, lr, asr #31
   13628:	cmp	r6, r7
   1362c:	mov	r5, r0
   13630:	lsl	r4, r4, r1
   13634:	bgt	13680 <__assert_fail@plt+0x2424>
   13638:	ldr	r3, [r0]
   1363c:	cmp	r7, r3
   13640:	bge	136ec <__assert_fail@plt+0x2490>
   13644:	ldr	r0, [r0, #8]
   13648:	add	r8, r7, #1
   1364c:	cmp	r6, r7
   13650:	str	r4, [r0, r7, lsl #2]
   13654:	add	r3, r0, r7, lsl #2
   13658:	bge	13670 <__assert_fail@plt+0x2414>
   1365c:	add	r0, r0, r6, lsl #2
   13660:	mov	r2, #0
   13664:	str	r2, [r0], #4
   13668:	cmp	r3, r0
   1366c:	bne	13664 <__assert_fail@plt+0x2408>
   13670:	cmp	lr, #0
   13674:	rsblt	r8, r8, #0
   13678:	str	r8, [r5, #4]
   1367c:	pop	{r4, r5, r6, r7, r8, pc}
   13680:	sub	ip, r6, r7
   13684:	cmp	ip, #0
   13688:	lsl	r3, r7, #2
   1368c:	ldr	r0, [r0, #8]
   13690:	addgt	ip, r3, ip, lsl #2
   13694:	addgt	ip, r0, ip
   13698:	addgt	r3, r0, r3
   1369c:	bgt	136a8 <__assert_fail@plt+0x244c>
   136a0:	b	13714 <__assert_fail@plt+0x24b8>
   136a4:	mov	r4, r1
   136a8:	ldr	r2, [r3]
   136ac:	adds	r2, r4, r2
   136b0:	str	r2, [r3], #4
   136b4:	movcs	r1, #1
   136b8:	movcc	r1, #0
   136bc:	cmp	r3, ip
   136c0:	bne	136a4 <__assert_fail@plt+0x2448>
   136c4:	cmp	r4, r2
   136c8:	movls	r8, r6
   136cc:	bls	13670 <__assert_fail@plt+0x2414>
   136d0:	ldr	r3, [r5]
   136d4:	add	r8, r6, #1
   136d8:	cmp	r6, r3
   136dc:	bge	13700 <__assert_fail@plt+0x24a4>
   136e0:	mov	r3, #1
   136e4:	str	r3, [r0, r6, lsl #2]
   136e8:	b	13670 <__assert_fail@plt+0x2414>
   136ec:	add	r8, r7, #1
   136f0:	mov	r1, r8
   136f4:	bl	13440 <__assert_fail@plt+0x21e4>
   136f8:	ldr	lr, [r5, #4]
   136fc:	b	1364c <__assert_fail@plt+0x23f0>
   13700:	mov	r1, r8
   13704:	mov	r0, r5
   13708:	bl	13440 <__assert_fail@plt+0x21e4>
   1370c:	ldr	lr, [r5, #4]
   13710:	b	136e0 <__assert_fail@plt+0x2484>
   13714:	bl	112dc <__assert_fail@plt+0x80>
   13718:	push	{r4, r5, r6, lr}
   1371c:	lsr	r3, r2, #5
   13720:	ldr	r5, [r0]
   13724:	and	lr, r2, #31
   13728:	mov	r2, #1
   1372c:	eor	ip, r5, r5, asr #31
   13730:	sub	ip, ip, r5, asr #31
   13734:	cmp	ip, r3
   13738:	lsl	r2, r2, lr
   1373c:	ble	137b4 <__assert_fail@plt+0x2558>
   13740:	sub	r6, ip, r3
   13744:	cmp	r6, #0
   13748:	lsl	r3, r3, #2
   1374c:	addgt	r6, r3, r6, lsl #2
   13750:	addgt	r6, r1, r6
   13754:	addgt	r3, r1, r3
   13758:	bgt	13764 <__assert_fail@plt+0x2508>
   1375c:	b	137dc <__assert_fail@plt+0x2580>
   13760:	mov	r2, r4
   13764:	ldr	lr, [r3]
   13768:	sub	r4, lr, r2
   1376c:	cmp	lr, r2
   13770:	str	r4, [r3], #4
   13774:	movcs	r4, #0
   13778:	movcc	r4, #1
   1377c:	cmp	r3, r6
   13780:	bne	13760 <__assert_fail@plt+0x2504>
   13784:	cmp	lr, r2
   13788:	bcc	137c8 <__assert_fail@plt+0x256c>
   1378c:	add	r1, r1, ip, lsl #2
   13790:	ldr	r3, [r1, #-4]!
   13794:	cmp	r3, #0
   13798:	bne	137a4 <__assert_fail@plt+0x2548>
   1379c:	subs	ip, ip, #1
   137a0:	bne	13790 <__assert_fail@plt+0x2534>
   137a4:	cmp	r5, #0
   137a8:	rsblt	ip, ip, #0
   137ac:	str	ip, [r0]
   137b0:	pop	{r4, r5, r6, pc}
   137b4:	ldr	r3, [pc, #36]	; 137e0 <__assert_fail@plt+0x2584>
   137b8:	ldr	r2, [pc, #36]	; 137e4 <__assert_fail@plt+0x2588>
   137bc:	ldr	r1, [pc, #36]	; 137e8 <__assert_fail@plt+0x258c>
   137c0:	ldr	r0, [pc, #36]	; 137ec <__assert_fail@plt+0x2590>
   137c4:	bl	1125c <__assert_fail@plt>
   137c8:	ldr	r3, [pc, #16]	; 137e0 <__assert_fail@plt+0x2584>
   137cc:	ldr	r2, [pc, #28]	; 137f0 <__assert_fail@plt+0x2594>
   137d0:	ldr	r1, [pc, #16]	; 137e8 <__assert_fail@plt+0x258c>
   137d4:	ldr	r0, [pc, #24]	; 137f4 <__assert_fail@plt+0x2598>
   137d8:	bl	1125c <__assert_fail@plt>
   137dc:	bl	11304 <__assert_fail@plt+0xa8>
   137e0:	ldrdeq	sp, [r2], -r0
   137e4:	andeq	r0, r0, r9, lsr #29
   137e8:	andeq	sp, r2, r8, ror r5
   137ec:	andeq	sp, r2, r4, asr #12
   137f0:	andeq	r0, r0, ip, lsr #29
   137f4:	andeq	sp, r2, r4, asr r6
   137f8:	ldr	ip, [r0]
   137fc:	mov	r2, #1
   13800:	cmp	ip, #0
   13804:	push	{r4, lr}
   13808:	mov	r4, r1
   1380c:	str	r2, [r0, #4]
   13810:	ble	13820 <__assert_fail@plt+0x25c4>
   13814:	ldr	r0, [r0, #8]
   13818:	str	r4, [r0]
   1381c:	pop	{r4, pc}
   13820:	mov	r1, r2
   13824:	bl	13440 <__assert_fail@plt+0x21e4>
   13828:	str	r4, [r0]
   1382c:	pop	{r4, pc}
   13830:	vcmpe.f64	d0, #0.0
   13834:	push	{r4, r5, r6, lr}
   13838:	vldr	d7, [pc, #344]	; 13998 <__assert_fail@plt+0x273c>
   1383c:	vpush	{d8-d9}
   13840:	vmrs	APSR_nzcv, fpscr
   13844:	vnegmi.f64	d8, d0
   13848:	vmovpl.f64	d8, d0
   1384c:	vcmpe.f64	d8, d7
   13850:	vmrs	APSR_nzcv, fpscr
   13854:	bmi	1395c <__assert_fail@plt+0x2700>
   13858:	vldr	d7, [pc, #320]	; 139a0 <__assert_fail@plt+0x2744>
   1385c:	vcmpe.f64	d8, d7
   13860:	vmrs	APSR_nzcv, fpscr
   13864:	movlt	r4, #1
   13868:	blt	13888 <__assert_fail@plt+0x262c>
   1386c:	vldr	d6, [pc, #308]	; 139a8 <__assert_fail@plt+0x274c>
   13870:	mov	r4, #1
   13874:	vmul.f64	d8, d8, d6
   13878:	add	r4, r4, #1
   1387c:	vcmpe.f64	d8, d7
   13880:	vmrs	APSR_nzcv, fpscr
   13884:	bge	13874 <__assert_fail@plt+0x2618>
   13888:	ldr	r3, [r0]
   1388c:	mov	r5, r0
   13890:	cmp	r3, r4
   13894:	vmov.f64	d9, d0
   13898:	ldrge	r0, [r0, #8]
   1389c:	blt	13944 <__assert_fail@plt+0x26e8>
   138a0:	vcvt.u32.f64	s15, d8
   138a4:	vldr	d4, [pc, #236]	; 13998 <__assert_fail@plt+0x273c>
   138a8:	vcvt.f64.u32	d6, s15
   138ac:	vsub.f64	d8, d8, d6
   138b0:	vcmpe.f64	d8, d4
   138b4:	vmrs	APSR_nzcv, fpscr
   138b8:	bpl	13980 <__assert_fail@plt+0x2724>
   138bc:	vmov	r1, s15
   138c0:	sub	r2, r4, #1
   138c4:	sub	r3, r4, #2
   138c8:	cmn	r3, #1
   138cc:	str	r1, [r0, r2, lsl #2]
   138d0:	beq	1392c <__assert_fail@plt+0x26d0>
   138d4:	vldr	d3, [pc, #196]	; 139a0 <__assert_fail@plt+0x2744>
   138d8:	vmul.f64	d8, d8, d3
   138dc:	vcvt.u32.f64	s13, d8
   138e0:	vcvt.f64.u32	d7, s13
   138e4:	vsub.f64	d7, d8, d7
   138e8:	vcmpe.f64	d7, d4
   138ec:	vmrs	APSR_nzcv, fpscr
   138f0:	submi	r2, r4, #-1073741823	; 0xc0000001
   138f4:	addmi	r2, r0, r2, lsl #2
   138f8:	bmi	1391c <__assert_fail@plt+0x26c0>
   138fc:	b	1396c <__assert_fail@plt+0x2710>
   13900:	vmul.f64	d7, d7, d3
   13904:	vcvt.u32.f64	s13, d7
   13908:	vcvt.f64.u32	d5, s13
   1390c:	vsub.f64	d7, d7, d5
   13910:	vcmpe.f64	d7, d4
   13914:	vmrs	APSR_nzcv, fpscr
   13918:	bpl	1396c <__assert_fail@plt+0x2710>
   1391c:	sub	r3, r3, #1
   13920:	cmn	r3, #1
   13924:	vstmdb	r2!, {s13}
   13928:	bne	13900 <__assert_fail@plt+0x26a4>
   1392c:	vcmpe.f64	d9, #0.0
   13930:	vmrs	APSR_nzcv, fpscr
   13934:	bmi	13954 <__assert_fail@plt+0x26f8>
   13938:	vpop	{d8-d9}
   1393c:	str	r4, [r5, #4]
   13940:	pop	{r4, r5, r6, pc}
   13944:	mov	r1, r4
   13948:	mov	r0, r5
   1394c:	bl	13440 <__assert_fail@plt+0x21e4>
   13950:	b	138a0 <__assert_fail@plt+0x2644>
   13954:	rsb	r4, r4, #0
   13958:	b	13938 <__assert_fail@plt+0x26dc>
   1395c:	vpop	{d8-d9}
   13960:	mov	r3, #0
   13964:	str	r3, [r0, #4]
   13968:	pop	{r4, r5, r6, pc}
   1396c:	ldr	r3, [pc, #60]	; 139b0 <__assert_fail@plt+0x2754>
   13970:	mov	r2, #1744	; 0x6d0
   13974:	ldr	r1, [pc, #56]	; 139b4 <__assert_fail@plt+0x2758>
   13978:	ldr	r0, [pc, #56]	; 139b8 <__assert_fail@plt+0x275c>
   1397c:	bl	1125c <__assert_fail@plt>
   13980:	ldr	r3, [pc, #40]	; 139b0 <__assert_fail@plt+0x2754>
   13984:	ldr	r2, [pc, #48]	; 139bc <__assert_fail@plt+0x2760>
   13988:	ldr	r1, [pc, #36]	; 139b4 <__assert_fail@plt+0x2758>
   1398c:	ldr	r0, [pc, #36]	; 139b8 <__assert_fail@plt+0x275c>
   13990:	bl	1125c <__assert_fail@plt>
   13994:	nop			; (mov r0, r0)
   13998:	andeq	r0, r0, r0
   1399c:	svccc	0x00f00000	; IMB
   139a0:	andeq	r0, r0, r0
   139a4:	mvnsmi	r0, r0
   139a8:	andeq	r0, r0, r0
   139ac:	ldclcc	0, cr0, [r0]
   139b0:	andeq	sp, r2, r0, ror #5
   139b4:	andeq	sp, r2, r8, ror r5
   139b8:	andeq	sp, r2, r0, ror #12
   139bc:	andeq	r0, r0, r8, asr #13
   139c0:	cmp	r0, #0
   139c4:	ldrne	r3, [pc, #40]	; 139f4 <__assert_fail@plt+0x2798>
   139c8:	ldrne	r3, [r3, #4]
   139cc:	strne	r3, [r0]
   139d0:	cmp	r1, #0
   139d4:	ldrne	r3, [pc, #24]	; 139f4 <__assert_fail@plt+0x2798>
   139d8:	ldrne	r3, [r3]
   139dc:	strne	r3, [r1]
   139e0:	cmp	r2, #0
   139e4:	ldrne	r3, [pc, #8]	; 139f4 <__assert_fail@plt+0x2798>
   139e8:	ldrne	r3, [r3, #8]
   139ec:	strne	r3, [r2]
   139f0:	bx	lr
   139f4:	andeq	pc, r3, r8, lsr #2
   139f8:	push	{r4, lr}
   139fc:	cmp	r0, #0
   13a00:	ldr	r4, [pc, #44]	; 13a34 <__assert_fail@plt+0x27d8>
   13a04:	ldr	lr, [pc, #44]	; 13a38 <__assert_fail@plt+0x27dc>
   13a08:	ldr	r3, [pc, #44]	; 13a3c <__assert_fail@plt+0x27e0>
   13a0c:	moveq	r0, r4
   13a10:	ldr	ip, [pc, #40]	; 13a40 <__assert_fail@plt+0x27e4>
   13a14:	cmp	r1, #0
   13a18:	moveq	r1, lr
   13a1c:	cmp	r2, #0
   13a20:	moveq	r2, ip
   13a24:	str	r0, [r3, #4]
   13a28:	str	r1, [r3]
   13a2c:	str	r2, [r3, #8]
   13a30:	pop	{r4, pc}
   13a34:	andeq	r3, r1, r4, asr #11
   13a38:	andeq	r3, r1, r0, lsr #4
   13a3c:	andeq	pc, r3, r8, lsr #2
   13a40:	andeq	r3, r1, ip, lsl r2
   13a44:	cmp	r2, #0
   13a48:	bxle	lr
   13a4c:	add	r2, r1, r2, lsl #2
   13a50:	sub	r0, r0, #4
   13a54:	ldr	r3, [r1], #4
   13a58:	cmp	r1, r2
   13a5c:	str	r3, [r0, #4]!
   13a60:	bne	13a54 <__assert_fail@plt+0x27f8>
   13a64:	bx	lr
   13a68:	cmp	r2, #0
   13a6c:	bxle	lr
   13a70:	lsl	r2, r2, #2
   13a74:	add	r0, r0, r2
   13a78:	add	r2, r1, r2
   13a7c:	ldr	r3, [r2, #-4]!
   13a80:	cmp	r2, r1
   13a84:	str	r3, [r0, #-4]!
   13a88:	bne	13a7c <__assert_fail@plt+0x2820>
   13a8c:	bx	lr
   13a90:	lsl	r3, r2, #2
   13a94:	add	r0, r0, r3
   13a98:	add	r1, r1, r3
   13a9c:	b	13ab0 <__assert_fail@plt+0x2854>
   13aa0:	ldr	ip, [r0, #-4]!
   13aa4:	ldr	r3, [r1, #-4]!
   13aa8:	cmp	ip, r3
   13aac:	bne	13ac0 <__assert_fail@plt+0x2864>
   13ab0:	subs	r2, r2, #1
   13ab4:	bpl	13aa0 <__assert_fail@plt+0x2844>
   13ab8:	mov	r0, #0
   13abc:	bx	lr
   13ac0:	bls	13acc <__assert_fail@plt+0x2870>
   13ac4:	mov	r0, #1
   13ac8:	bx	lr
   13acc:	mvn	r0, #0
   13ad0:	bx	lr
   13ad4:	cmp	r1, #0
   13ad8:	ble	13b08 <__assert_fail@plt+0x28ac>
   13adc:	sub	r3, r1, #-1073741823	; 0xc0000001
   13ae0:	ldr	r2, [r0, r3, lsl #2]
   13ae4:	add	r0, r0, r3, lsl #2
   13ae8:	cmp	r2, #0
   13aec:	beq	13b00 <__assert_fail@plt+0x28a4>
   13af0:	b	13b08 <__assert_fail@plt+0x28ac>
   13af4:	ldr	r3, [r0, #-4]!
   13af8:	cmp	r3, #0
   13afc:	bne	13b08 <__assert_fail@plt+0x28ac>
   13b00:	subs	r1, r1, #1
   13b04:	bne	13af4 <__assert_fail@plt+0x2898>
   13b08:	clz	r0, r1
   13b0c:	lsr	r0, r0, #5
   13b10:	bx	lr
   13b14:	cmp	r1, #0
   13b18:	bxle	lr
   13b1c:	add	r1, r0, r1, lsl #2
   13b20:	mov	r3, #0
   13b24:	str	r3, [r1, #-4]!
   13b28:	cmp	r1, r0
   13b2c:	bne	13b24 <__assert_fail@plt+0x28c8>
   13b30:	bx	lr
   13b34:	cmp	r2, #0
   13b38:	subgt	r0, r0, #4
   13b3c:	addgt	r2, r1, r2, lsl #2
   13b40:	ble	13b68 <__assert_fail@plt+0x290c>
   13b44:	ldr	ip, [r1], #4
   13b48:	adds	ip, r3, ip
   13b4c:	movcs	r3, #1
   13b50:	movcc	r3, #0
   13b54:	cmp	r1, r2
   13b58:	str	ip, [r0, #4]!
   13b5c:	bne	13b44 <__assert_fail@plt+0x28e8>
   13b60:	mov	r0, r3
   13b64:	bx	lr
   13b68:	push	{r4, lr}
   13b6c:	bl	112dc <__assert_fail@plt+0x80>
   13b70:	cmp	r3, #0
   13b74:	ble	13bc0 <__assert_fail@plt+0x2964>
   13b78:	push	{r4, r5, lr}
   13b7c:	add	r3, r1, r3, lsl #2
   13b80:	sub	r4, r0, #4
   13b84:	sub	r2, r2, #4
   13b88:	mov	r0, #0
   13b8c:	ldr	ip, [r1], #4
   13b90:	ldr	lr, [r2, #4]!
   13b94:	adds	ip, ip, r0
   13b98:	movcs	r5, #1
   13b9c:	movcc	r5, #0
   13ba0:	adds	ip, lr, ip
   13ba4:	movcs	r0, #1
   13ba8:	movcc	r0, #0
   13bac:	cmp	r3, r1
   13bb0:	str	ip, [r4, #4]!
   13bb4:	add	r0, r0, r5
   13bb8:	bne	13b8c <__assert_fail@plt+0x2930>
   13bbc:	pop	{r4, r5, pc}
   13bc0:	mov	r0, #0
   13bc4:	bx	lr
   13bc8:	push	{r4, r5, r6, r7, r8, lr}
   13bcc:	ldr	r7, [sp, #24]
   13bd0:	cmp	r2, r7
   13bd4:	blt	13c6c <__assert_fail@plt+0x2a10>
   13bd8:	cmp	r7, #0
   13bdc:	movle	ip, #0
   13be0:	ble	13c28 <__assert_fail@plt+0x29cc>
   13be4:	sub	r3, r3, #4
   13be8:	mov	r5, r1
   13bec:	sub	r6, r0, #4
   13bf0:	add	r8, r1, r7, lsl #2
   13bf4:	mov	ip, #0
   13bf8:	ldr	lr, [r5], #4
   13bfc:	ldr	r4, [r3, #4]!
   13c00:	adds	lr, lr, ip
   13c04:	movcs	ip, #1
   13c08:	movcc	ip, #0
   13c0c:	adds	lr, r4, lr
   13c10:	movcs	r4, #1
   13c14:	movcc	r4, #0
   13c18:	cmp	r5, r8
   13c1c:	str	lr, [r6, #4]!
   13c20:	add	ip, r4, ip
   13c24:	bne	13bf8 <__assert_fail@plt+0x299c>
   13c28:	cmp	r2, r7
   13c2c:	ble	13c64 <__assert_fail@plt+0x2a08>
   13c30:	sub	r2, r2, r7
   13c34:	lsl	r7, r7, #2
   13c38:	add	r2, r7, r2, lsl #2
   13c3c:	add	r2, r1, r2
   13c40:	add	r0, r0, r7
   13c44:	add	r1, r1, r7
   13c48:	ldr	r3, [r1], #4
   13c4c:	adds	r3, r3, ip
   13c50:	movcs	ip, #1
   13c54:	movcc	ip, #0
   13c58:	cmp	r2, r1
   13c5c:	str	r3, [r0], #4
   13c60:	bne	13c48 <__assert_fail@plt+0x29ec>
   13c64:	mov	r0, ip
   13c68:	pop	{r4, r5, r6, r7, r8, pc}
   13c6c:	ldr	r3, [pc, #12]	; 13c80 <__assert_fail@plt+0x2a24>
   13c70:	mov	r2, #480	; 0x1e0
   13c74:	ldr	r1, [pc, #8]	; 13c84 <__assert_fail@plt+0x2a28>
   13c78:	ldr	r0, [pc, #8]	; 13c88 <__assert_fail@plt+0x2a2c>
   13c7c:	bl	1125c <__assert_fail@plt>
   13c80:	andeq	sp, r2, ip, ror #5
   13c84:	andeq	sp, r2, r8, ror r5
   13c88:	andeq	sp, r2, r8, ror #12
   13c8c:	push	{r4, r5, r6, r7, r8, lr}
   13c90:	mov	r8, r1
   13c94:	ldr	r4, [r1, #4]
   13c98:	ldr	r5, [r2, #4]
   13c9c:	cmp	r4, #0
   13ca0:	rsblt	r4, r4, #0
   13ca4:	cmp	r5, #0
   13ca8:	rsblt	r5, r5, #0
   13cac:	cmp	r4, r5
   13cb0:	sub	sp, sp, #8
   13cb4:	mov	r6, r2
   13cb8:	bge	13cd0 <__assert_fail@plt+0x2a74>
   13cbc:	mov	r2, r4
   13cc0:	mov	r8, r6
   13cc4:	mov	r4, r5
   13cc8:	mov	r6, r1
   13ccc:	mov	r5, r2
   13cd0:	ldr	r3, [r0]
   13cd4:	cmp	r4, r3
   13cd8:	ldrlt	r7, [r0, #8]
   13cdc:	bge	13d08 <__assert_fail@plt+0x2aac>
   13ce0:	ldr	r3, [r6, #8]
   13ce4:	ldr	r1, [r8, #8]
   13ce8:	mov	r2, r4
   13cec:	str	r5, [sp]
   13cf0:	mov	r0, r7
   13cf4:	bl	13bc8 <__assert_fail@plt+0x296c>
   13cf8:	str	r0, [r7, r4, lsl #2]
   13cfc:	add	r0, r0, r4
   13d00:	add	sp, sp, #8
   13d04:	pop	{r4, r5, r6, r7, r8, pc}
   13d08:	add	r1, r4, #1
   13d0c:	bl	13440 <__assert_fail@plt+0x21e4>
   13d10:	mov	r7, r0
   13d14:	b	13ce0 <__assert_fail@plt+0x2a84>
   13d18:	cmp	r2, #0
   13d1c:	push	{r4, lr}
   13d20:	addgt	r2, r1, r2, lsl #2
   13d24:	subgt	r0, r0, #4
   13d28:	ble	13d54 <__assert_fail@plt+0x2af8>
   13d2c:	ldr	ip, [r1], #4
   13d30:	cmp	r3, ip
   13d34:	sub	lr, ip, r3
   13d38:	movls	r3, #0
   13d3c:	movhi	r3, #1
   13d40:	cmp	r1, r2
   13d44:	str	lr, [r0, #4]!
   13d48:	bne	13d2c <__assert_fail@plt+0x2ad0>
   13d4c:	mov	r0, r3
   13d50:	pop	{r4, pc}
   13d54:	bl	11304 <__assert_fail@plt+0xa8>
   13d58:	cmp	r3, #0
   13d5c:	ble	13da4 <__assert_fail@plt+0x2b48>
   13d60:	push	{r4, lr}
   13d64:	add	r3, r1, r3, lsl #2
   13d68:	sub	r4, r0, #4
   13d6c:	sub	r2, r2, #4
   13d70:	mov	r0, #0
   13d74:	ldr	ip, [r2, #4]!
   13d78:	ldr	lr, [r1], #4
   13d7c:	adds	ip, ip, r0
   13d80:	movcs	r0, #1
   13d84:	movcc	r0, #0
   13d88:	cmp	lr, ip
   13d8c:	addcc	r0, r0, #1
   13d90:	sub	ip, lr, ip
   13d94:	cmp	r1, r3
   13d98:	str	ip, [r4, #4]!
   13d9c:	bne	13d74 <__assert_fail@plt+0x2b18>
   13da0:	pop	{r4, pc}
   13da4:	mov	r0, #0
   13da8:	bx	lr
   13dac:	push	{r4, r5, r6, r7, r8, lr}
   13db0:	ldr	r6, [sp, #24]
   13db4:	cmp	r2, r6
   13db8:	blt	13e58 <__assert_fail@plt+0x2bfc>
   13dbc:	cmp	r6, #0
   13dc0:	movle	ip, #0
   13dc4:	ble	13e08 <__assert_fail@plt+0x2bac>
   13dc8:	sub	r3, r3, #4
   13dcc:	mov	r5, r1
   13dd0:	sub	r7, r0, #4
   13dd4:	add	r8, r1, r6, lsl #2
   13dd8:	mov	ip, #0
   13ddc:	ldr	lr, [r3, #4]!
   13de0:	ldr	r4, [r5], #4
   13de4:	adds	lr, lr, ip
   13de8:	movcs	ip, #1
   13dec:	movcc	ip, #0
   13df0:	cmp	r4, lr
   13df4:	addcc	ip, ip, #1
   13df8:	sub	lr, r4, lr
   13dfc:	cmp	r5, r8
   13e00:	str	lr, [r7, #4]!
   13e04:	bne	13ddc <__assert_fail@plt+0x2b80>
   13e08:	cmp	r2, r6
   13e0c:	ble	13e50 <__assert_fail@plt+0x2bf4>
   13e10:	sub	lr, r2, r6
   13e14:	lsl	r6, r6, #2
   13e18:	add	lr, r6, lr, lsl #2
   13e1c:	add	lr, r1, lr
   13e20:	add	r0, r0, r6
   13e24:	add	r1, r1, r6
   13e28:	mov	r2, ip
   13e2c:	ldr	r3, [r1], #4
   13e30:	cmp	r3, ip
   13e34:	movcs	ip, #0
   13e38:	movcc	ip, #1
   13e3c:	sub	r3, r3, r2
   13e40:	cmp	lr, r1
   13e44:	str	r3, [r0], #4
   13e48:	mov	r2, ip
   13e4c:	bne	13e2c <__assert_fail@plt+0x2bd0>
   13e50:	mov	r0, ip
   13e54:	pop	{r4, r5, r6, r7, r8, pc}
   13e58:	ldr	r3, [pc, #12]	; 13e6c <__assert_fail@plt+0x2c10>
   13e5c:	mov	r2, #532	; 0x214
   13e60:	ldr	r1, [pc, #8]	; 13e70 <__assert_fail@plt+0x2c14>
   13e64:	ldr	r0, [pc, #8]	; 13e74 <__assert_fail@plt+0x2c18>
   13e68:	bl	1125c <__assert_fail@plt>
   13e6c:	strdeq	sp, [r2], -r4
   13e70:	andeq	sp, r2, r8, ror r5
   13e74:	andeq	sp, r2, r8, ror #12
   13e78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e7c:	sub	sp, sp, #12
   13e80:	eor	r4, r1, r1, asr #31
   13e84:	ldr	r8, [sp, #48]	; 0x30
   13e88:	eor	r6, r3, r3, asr #31
   13e8c:	sub	r4, r4, r1, asr #31
   13e90:	sub	r6, r6, r3, asr #31
   13e94:	cmp	r4, r6
   13e98:	mov	r7, r1
   13e9c:	mov	r5, r3
   13ea0:	mov	r9, r2
   13ea4:	ldr	r1, [r2]
   13ea8:	ldr	lr, [r8]
   13eac:	beq	13f9c <__assert_fail@plt+0x2d40>
   13eb0:	blt	13f28 <__assert_fail@plt+0x2ccc>
   13eb4:	ldr	r3, [r0]
   13eb8:	cmp	r4, r3
   13ebc:	ldrle	r5, [r0, #8]
   13ec0:	bgt	13fcc <__assert_fail@plt+0x2d70>
   13ec4:	str	r6, [sp]
   13ec8:	mov	r3, lr
   13ecc:	mov	r2, r4
   13ed0:	mov	r0, r5
   13ed4:	bl	13dac <__assert_fail@plt+0x2b50>
   13ed8:	cmp	r0, #0
   13edc:	bne	13ffc <__assert_fail@plt+0x2da0>
   13ee0:	cmp	r7, #0
   13ee4:	beq	13f14 <__assert_fail@plt+0x2cb8>
   13ee8:	sub	r3, r4, #-1073741823	; 0xc0000001
   13eec:	ldr	r2, [r5, r3, lsl #2]
   13ef0:	add	r3, r5, r3, lsl #2
   13ef4:	cmp	r2, #0
   13ef8:	beq	13f0c <__assert_fail@plt+0x2cb0>
   13efc:	b	13f18 <__assert_fail@plt+0x2cbc>
   13f00:	ldr	r2, [r3, #-4]!
   13f04:	cmp	r2, #0
   13f08:	bne	13f18 <__assert_fail@plt+0x2cbc>
   13f0c:	subs	r4, r4, #1
   13f10:	bne	13f00 <__assert_fail@plt+0x2ca4>
   13f14:	mov	r4, #0
   13f18:	mov	r0, r4
   13f1c:	add	sp, sp, #12
   13f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f24:	bhi	13eb4 <__assert_fail@plt+0x2c58>
   13f28:	ldr	r3, [r0]
   13f2c:	cmp	r6, r3
   13f30:	ldrle	r7, [r0, #8]
   13f34:	bgt	13fe4 <__assert_fail@plt+0x2d88>
   13f38:	mov	r3, r1
   13f3c:	str	r4, [sp]
   13f40:	mov	r1, lr
   13f44:	mov	r2, r6
   13f48:	mov	r0, r7
   13f4c:	bl	13dac <__assert_fail@plt+0x2b50>
   13f50:	cmp	r0, #0
   13f54:	bne	14010 <__assert_fail@plt+0x2db4>
   13f58:	cmp	r5, #0
   13f5c:	beq	13f14 <__assert_fail@plt+0x2cb8>
   13f60:	sub	r3, r6, #-1073741823	; 0xc0000001
   13f64:	ldr	r2, [r7, r3, lsl #2]
   13f68:	add	r3, r7, r3, lsl #2
   13f6c:	cmp	r2, #0
   13f70:	rsbne	r4, r6, #0
   13f74:	beq	13f80 <__assert_fail@plt+0x2d24>
   13f78:	b	13f18 <__assert_fail@plt+0x2cbc>
   13f7c:	mov	r6, r4
   13f80:	subs	r4, r6, #1
   13f84:	beq	13f18 <__assert_fail@plt+0x2cbc>
   13f88:	ldr	r2, [r3, #-4]!
   13f8c:	cmp	r2, #0
   13f90:	beq	13f7c <__assert_fail@plt+0x2d20>
   13f94:	rsb	r4, r6, #1
   13f98:	b	13f18 <__assert_fail@plt+0x2cbc>
   13f9c:	lsl	ip, r4, #2
   13fa0:	add	r2, r1, ip
   13fa4:	mov	r3, r4
   13fa8:	add	ip, lr, ip
   13fac:	b	13fc0 <__assert_fail@plt+0x2d64>
   13fb0:	ldr	fp, [r2, #-4]!
   13fb4:	ldr	sl, [ip, #-4]!
   13fb8:	cmp	fp, sl
   13fbc:	bne	13f24 <__assert_fail@plt+0x2cc8>
   13fc0:	subs	r3, r3, #1
   13fc4:	bcs	13fb0 <__assert_fail@plt+0x2d54>
   13fc8:	b	13f14 <__assert_fail@plt+0x2cb8>
   13fcc:	mov	r1, r4
   13fd0:	bl	13440 <__assert_fail@plt+0x21e4>
   13fd4:	ldr	r1, [r9]
   13fd8:	ldr	lr, [r8]
   13fdc:	mov	r5, r0
   13fe0:	b	13ec4 <__assert_fail@plt+0x2c68>
   13fe4:	mov	r1, r6
   13fe8:	bl	13440 <__assert_fail@plt+0x21e4>
   13fec:	ldr	lr, [r8]
   13ff0:	ldr	r1, [r9]
   13ff4:	mov	r7, r0
   13ff8:	b	13f38 <__assert_fail@plt+0x2cdc>
   13ffc:	ldr	r3, [pc, #32]	; 14024 <__assert_fail@plt+0x2dc8>
   14000:	ldr	r2, [pc, #32]	; 14028 <__assert_fail@plt+0x2dcc>
   14004:	ldr	r1, [pc, #32]	; 1402c <__assert_fail@plt+0x2dd0>
   14008:	ldr	r0, [pc, #32]	; 14030 <__assert_fail@plt+0x2dd4>
   1400c:	bl	1125c <__assert_fail@plt>
   14010:	ldr	r3, [pc, #12]	; 14024 <__assert_fail@plt+0x2dc8>
   14014:	ldr	r2, [pc, #24]	; 14034 <__assert_fail@plt+0x2dd8>
   14018:	ldr	r1, [pc, #12]	; 1402c <__assert_fail@plt+0x2dd0>
   1401c:	ldr	r0, [pc, #12]	; 14030 <__assert_fail@plt+0x2dd4>
   14020:	bl	1125c <__assert_fail@plt>
   14024:	strdeq	sp, [r2], -ip
   14028:	ldrdeq	r0, [r0], -r6
   1402c:	andeq	sp, r2, r8, ror r5
   14030:	andeq	sp, r2, r4, asr r6
   14034:	ldrdeq	r0, [r0], -ip
   14038:	cmp	r2, #0
   1403c:	push	{r4, r5, r6, r7, r8, lr}
   14040:	ble	140ac <__assert_fail@plt+0x2e50>
   14044:	ldr	r5, [pc, #116]	; 140c0 <__assert_fail@plt+0x2e64>
   14048:	mov	r6, r0
   1404c:	lsr	r7, r3, #16
   14050:	mov	r0, #0
   14054:	and	r3, r3, r5
   14058:	ldr	lr, [r1], #4
   1405c:	and	r4, lr, r5
   14060:	lsr	lr, lr, #16
   14064:	mul	ip, r3, r4
   14068:	mul	r8, r3, lr
   1406c:	mul	lr, r7, lr
   14070:	mla	r4, r7, r4, r8
   14074:	add	r4, r4, ip, lsr #16
   14078:	and	ip, ip, r5
   1407c:	cmp	r8, r4
   14080:	add	ip, ip, r4, lsl #16
   14084:	addhi	lr, lr, #65536	; 0x10000
   14088:	adds	ip, ip, r0
   1408c:	movcs	r0, #1
   14090:	movcc	r0, #0
   14094:	add	r0, r0, r4, lsr #16
   14098:	subs	r2, r2, #1
   1409c:	str	ip, [r6], #4
   140a0:	add	r0, lr, r0
   140a4:	bne	14058 <__assert_fail@plt+0x2dfc>
   140a8:	pop	{r4, r5, r6, r7, r8, pc}
   140ac:	ldr	r3, [pc, #16]	; 140c4 <__assert_fail@plt+0x2e68>
   140b0:	ldr	r2, [pc, #16]	; 140c8 <__assert_fail@plt+0x2e6c>
   140b4:	ldr	r1, [pc, #16]	; 140cc <__assert_fail@plt+0x2e70>
   140b8:	ldr	r0, [pc, #16]	; 140d0 <__assert_fail@plt+0x2e74>
   140bc:	bl	1125c <__assert_fail@plt>
   140c0:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   140c4:	andeq	sp, r2, r8, lsl #6
   140c8:	andeq	r0, r0, r1, lsr #4
   140cc:	andeq	sp, r2, r8, ror r5
   140d0:	andeq	sp, r2, r4, ror r6
   140d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140d8:	sub	sp, sp, #12
   140dc:	subs	fp, r2, #0
   140e0:	ldr	sl, [sp, #48]	; 0x30
   140e4:	beq	14208 <__assert_fail@plt+0x2fac>
   140e8:	ldr	r2, [sl]
   140ec:	mov	r9, r1
   140f0:	mov	r7, r0
   140f4:	mov	r1, r2
   140f8:	sub	r0, fp, #1
   140fc:	str	r2, [sp, #4]
   14100:	mov	r6, r3
   14104:	bl	2c3a0 <__assert_fail@plt+0x1b144>
   14108:	ldrb	r0, [r9]
   1410c:	ldr	r2, [sp, #4]
   14110:	cmp	r1, #0
   14114:	beq	141ec <__assert_fail@plt+0x2f90>
   14118:	mov	r3, r9
   1411c:	add	lr, r9, r1
   14120:	ldrb	ip, [r3, #1]!
   14124:	cmp	lr, r3
   14128:	mla	r0, r0, r6, ip
   1412c:	bne	14120 <__assert_fail@plt+0x2ec4>
   14130:	add	r5, r1, #1
   14134:	cmp	fp, r5
   14138:	mov	r8, #1
   1413c:	str	r0, [r7]
   14140:	bls	141d8 <__assert_fail@plt+0x2f7c>
   14144:	cmp	r2, #1
   14148:	add	r0, r5, #1
   1414c:	add	r3, r9, r5
   14150:	ldrb	r4, [r9, r5]
   14154:	bls	141d0 <__assert_fail@plt+0x2f74>
   14158:	add	r5, r5, r2
   1415c:	sub	r5, r5, #1
   14160:	add	r5, r9, r5
   14164:	ldrb	r1, [r3, #1]!
   14168:	cmp	r5, r3
   1416c:	mla	r4, r4, r6, r1
   14170:	bne	14164 <__assert_fail@plt+0x2f08>
   14174:	sub	r5, r2, #1
   14178:	add	r5, r5, r0
   1417c:	mov	r2, r8
   14180:	mov	r1, r7
   14184:	ldr	r3, [sl, #4]
   14188:	mov	r0, r7
   1418c:	bl	14038 <__assert_fail@plt+0x2ddc>
   14190:	mov	r2, r7
   14194:	add	r1, r7, r8, lsl #2
   14198:	ldr	r3, [r2]
   1419c:	adds	r4, r4, r3
   141a0:	str	r4, [r2], #4
   141a4:	movcs	r4, #1
   141a8:	movcc	r4, #0
   141ac:	cmp	r2, r1
   141b0:	bne	14198 <__assert_fail@plt+0x2f3c>
   141b4:	adds	r0, r0, r4
   141b8:	addne	r8, r8, #1
   141bc:	strne	r0, [r2]
   141c0:	cmp	fp, r5
   141c4:	bls	141d8 <__assert_fail@plt+0x2f7c>
   141c8:	ldr	r2, [sl]
   141cc:	b	14144 <__assert_fail@plt+0x2ee8>
   141d0:	mov	r5, r0
   141d4:	b	1417c <__assert_fail@plt+0x2f20>
   141d8:	cmp	fp, r5
   141dc:	bne	141f4 <__assert_fail@plt+0x2f98>
   141e0:	mov	r0, r8
   141e4:	add	sp, sp, #12
   141e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141ec:	mov	r5, #1
   141f0:	b	14134 <__assert_fail@plt+0x2ed8>
   141f4:	ldr	r3, [pc, #32]	; 1421c <__assert_fail@plt+0x2fc0>
   141f8:	ldr	r2, [pc, #32]	; 14220 <__assert_fail@plt+0x2fc4>
   141fc:	ldr	r1, [pc, #32]	; 14224 <__assert_fail@plt+0x2fc8>
   14200:	ldr	r0, [pc, #32]	; 14228 <__assert_fail@plt+0x2fcc>
   14204:	bl	1125c <__assert_fail@plt>
   14208:	ldr	r3, [pc, #12]	; 1421c <__assert_fail@plt+0x2fc0>
   1420c:	ldr	r2, [pc, #24]	; 1422c <__assert_fail@plt+0x2fd0>
   14210:	ldr	r1, [pc, #12]	; 14224 <__assert_fail@plt+0x2fc8>
   14214:	ldr	r0, [pc, #20]	; 14230 <__assert_fail@plt+0x2fd4>
   14218:	bl	1125c <__assert_fail@plt>
   1421c:	andeq	sp, r2, r4, lsl r3
   14220:	andeq	r0, r0, r2, ror r5
   14224:	andeq	sp, r2, r8, ror r5
   14228:	andeq	sp, r2, r4, lsl #13
   1422c:	andeq	r0, r0, sl, asr r5
   14230:	andeq	sp, r2, ip, ror r6
   14234:	cmp	r2, #0
   14238:	push	{r4, r5, r6, r7, r8, lr}
   1423c:	ble	142b4 <__assert_fail@plt+0x3058>
   14240:	ldr	r6, [pc, #128]	; 142c8 <__assert_fail@plt+0x306c>
   14244:	lsr	r7, r3, #16
   14248:	mov	r5, #0
   1424c:	and	r3, r3, r6
   14250:	ldr	lr, [r1], #4
   14254:	and	r4, lr, r6
   14258:	lsr	lr, lr, #16
   1425c:	mul	ip, r3, r4
   14260:	mul	r8, r3, lr
   14264:	mul	lr, r7, lr
   14268:	mla	r4, r7, r4, r8
   1426c:	add	r4, r4, ip, lsr #16
   14270:	and	ip, ip, r6
   14274:	add	ip, ip, r4, lsl #16
   14278:	add	ip, ip, r5
   1427c:	cmp	r8, r4
   14280:	addhi	lr, lr, #65536	; 0x10000
   14284:	ldr	r8, [r0]
   14288:	cmp	r5, ip
   1428c:	movls	r5, #0
   14290:	movhi	r5, #1
   14294:	add	r4, r5, r4, lsr #16
   14298:	adds	ip, ip, r8
   1429c:	adc	r5, lr, r4
   142a0:	subs	r2, r2, #1
   142a4:	str	ip, [r0], #4
   142a8:	bne	14250 <__assert_fail@plt+0x2ff4>
   142ac:	mov	r0, r5
   142b0:	pop	{r4, r5, r6, r7, r8, pc}
   142b4:	ldr	r3, [pc, #16]	; 142cc <__assert_fail@plt+0x3070>
   142b8:	mov	r2, #568	; 0x238
   142bc:	ldr	r1, [pc, #12]	; 142d0 <__assert_fail@plt+0x3074>
   142c0:	ldr	r0, [pc, #12]	; 142d4 <__assert_fail@plt+0x3078>
   142c4:	bl	1125c <__assert_fail@plt>
   142c8:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   142cc:	andeq	sp, r2, r8, lsr #6
   142d0:	andeq	sp, r2, r8, ror r5
   142d4:	andeq	sp, r2, r4, ror r6
   142d8:	cmp	r2, #0
   142dc:	push	{r4, r5, r6, r7, r8, lr}
   142e0:	ble	14360 <__assert_fail@plt+0x3104>
   142e4:	ldr	r6, [pc, #136]	; 14374 <__assert_fail@plt+0x3118>
   142e8:	lsr	r7, r3, #16
   142ec:	mov	lr, #0
   142f0:	and	r3, r3, r6
   142f4:	ldr	r4, [r1], #4
   142f8:	and	r5, r4, r6
   142fc:	lsr	r4, r4, #16
   14300:	mul	ip, r3, r5
   14304:	mul	r8, r3, r4
   14308:	mul	r4, r7, r4
   1430c:	mla	r5, r7, r5, r8
   14310:	add	r5, r5, ip, lsr #16
   14314:	and	ip, ip, r6
   14318:	add	ip, ip, r5, lsl #16
   1431c:	add	ip, ip, lr
   14320:	cmp	r8, r5
   14324:	addhi	r4, r4, #65536	; 0x10000
   14328:	ldr	r8, [r0]
   1432c:	cmp	lr, ip
   14330:	movls	lr, #0
   14334:	movhi	lr, #1
   14338:	sub	ip, r8, ip
   1433c:	add	lr, lr, r5, lsr #16
   14340:	cmp	r8, ip
   14344:	addcc	lr, lr, #1
   14348:	subs	r2, r2, #1
   1434c:	add	lr, r4, lr
   14350:	str	ip, [r0], #4
   14354:	bne	142f4 <__assert_fail@plt+0x3098>
   14358:	mov	r0, lr
   1435c:	pop	{r4, r5, r6, r7, r8, pc}
   14360:	ldr	r3, [pc, #16]	; 14378 <__assert_fail@plt+0x311c>
   14364:	ldr	r2, [pc, #16]	; 1437c <__assert_fail@plt+0x3120>
   14368:	ldr	r1, [pc, #16]	; 14380 <__assert_fail@plt+0x3124>
   1436c:	ldr	r0, [pc, #16]	; 14384 <__assert_fail@plt+0x3128>
   14370:	bl	1125c <__assert_fail@plt>
   14374:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   14378:	andeq	sp, r2, r8, lsr r3
   1437c:	andeq	r0, r0, r2, asr r2
   14380:	andeq	sp, r2, r8, ror r5
   14384:	andeq	sp, r2, r4, ror r6
   14388:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1438c:	ldr	r4, [sp, #32]
   14390:	cmp	r2, r4
   14394:	blt	14434 <__assert_fail@plt+0x31d8>
   14398:	cmp	r4, #0
   1439c:	ble	14470 <__assert_fail@plt+0x3214>
   143a0:	mov	r7, r3
   143a4:	add	r3, r2, r4
   143a8:	mov	r8, r2
   143ac:	add	r3, r0, r3, lsl #2
   143b0:	cmp	r3, r1
   143b4:	mov	r5, r0
   143b8:	mov	r9, r1
   143bc:	bls	143cc <__assert_fail@plt+0x3170>
   143c0:	add	r2, r1, r2, lsl #2
   143c4:	cmp	r0, r2
   143c8:	bcc	1445c <__assert_fail@plt+0x3200>
   143cc:	cmp	r3, r7
   143d0:	bls	143e0 <__assert_fail@plt+0x3184>
   143d4:	add	r3, r7, r4, lsl #2
   143d8:	cmp	r5, r3
   143dc:	bcc	14448 <__assert_fail@plt+0x31ec>
   143e0:	ldr	r3, [r7]
   143e4:	mov	r2, r8
   143e8:	mov	r1, r9
   143ec:	mov	r0, r5
   143f0:	bl	14038 <__assert_fail@plt+0x2ddc>
   143f4:	subs	r4, r4, #1
   143f8:	lsl	r6, r8, #2
   143fc:	str	r0, [r5, r8, lsl #2]
   14400:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14404:	add	r6, r6, #4
   14408:	add	r6, r5, r6
   1440c:	add	r5, r5, #4
   14410:	mov	r0, r5
   14414:	ldr	r3, [r7, #4]!
   14418:	mov	r2, r8
   1441c:	mov	r1, r9
   14420:	bl	14234 <__assert_fail@plt+0x2fd8>
   14424:	subs	r4, r4, #1
   14428:	str	r0, [r6], #4
   1442c:	bne	1440c <__assert_fail@plt+0x31b0>
   14430:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14434:	ldr	r3, [pc, #72]	; 14484 <__assert_fail@plt+0x3228>
   14438:	ldr	r2, [pc, #72]	; 14488 <__assert_fail@plt+0x322c>
   1443c:	ldr	r1, [pc, #72]	; 1448c <__assert_fail@plt+0x3230>
   14440:	ldr	r0, [pc, #72]	; 14490 <__assert_fail@plt+0x3234>
   14444:	bl	1125c <__assert_fail@plt>
   14448:	ldr	r3, [pc, #52]	; 14484 <__assert_fail@plt+0x3228>
   1444c:	ldr	r2, [pc, #64]	; 14494 <__assert_fail@plt+0x3238>
   14450:	ldr	r1, [pc, #52]	; 1448c <__assert_fail@plt+0x3230>
   14454:	ldr	r0, [pc, #60]	; 14498 <__assert_fail@plt+0x323c>
   14458:	bl	1125c <__assert_fail@plt>
   1445c:	ldr	r3, [pc, #32]	; 14484 <__assert_fail@plt+0x3228>
   14460:	mov	r2, #620	; 0x26c
   14464:	ldr	r1, [pc, #32]	; 1448c <__assert_fail@plt+0x3230>
   14468:	ldr	r0, [pc, #44]	; 1449c <__assert_fail@plt+0x3240>
   1446c:	bl	1125c <__assert_fail@plt>
   14470:	ldr	r3, [pc, #12]	; 14484 <__assert_fail@plt+0x3228>
   14474:	ldr	r2, [pc, #36]	; 144a0 <__assert_fail@plt+0x3244>
   14478:	ldr	r1, [pc, #12]	; 1448c <__assert_fail@plt+0x3230>
   1447c:	ldr	r0, [pc, #32]	; 144a4 <__assert_fail@plt+0x3248>
   14480:	bl	1125c <__assert_fail@plt>
   14484:	andeq	sp, r2, r8, asr #6
   14488:	andeq	r0, r0, sl, ror #4
   1448c:	andeq	sp, r2, r8, ror r5
   14490:	andeq	sp, r2, ip, lsl #13
   14494:	andeq	r0, r0, sp, ror #4
   14498:	andeq	sp, r2, r8, asr #13
   1449c:	andeq	sp, r2, r0, lsr #13
   144a0:	andeq	r0, r0, fp, ror #4
   144a4:	muleq	r2, r8, r6
   144a8:	push	{lr}		; (str lr, [sp, #-4]!)
   144ac:	sub	sp, sp, #12
   144b0:	mov	ip, r3
   144b4:	str	r3, [sp]
   144b8:	mov	r3, r2
   144bc:	mov	r2, ip
   144c0:	bl	14388 <__assert_fail@plt+0x312c>
   144c4:	add	sp, sp, #12
   144c8:	pop	{pc}		; (ldr pc, [sp], #4)
   144cc:	push	{lr}		; (str lr, [sp, #-4]!)
   144d0:	sub	sp, sp, #12
   144d4:	mov	r3, r1
   144d8:	str	r2, [sp]
   144dc:	bl	14388 <__assert_fail@plt+0x312c>
   144e0:	add	sp, sp, #12
   144e4:	pop	{pc}		; (ldr pc, [sp], #4)
   144e8:	cmp	r2, #0
   144ec:	push	{r4, r5, r6, r7, r8, lr}
   144f0:	ble	1455c <__assert_fail@plt+0x3300>
   144f4:	cmp	r3, #0
   144f8:	beq	14584 <__assert_fail@plt+0x3328>
   144fc:	cmp	r3, #31
   14500:	bhi	14570 <__assert_fail@plt+0x3314>
   14504:	lsl	r8, r2, #2
   14508:	add	lr, r1, r8
   1450c:	rsb	r7, r3, #32
   14510:	ldr	r4, [lr, #-4]
   14514:	subs	ip, r2, #1
   14518:	add	r8, r0, r8
   1451c:	sub	lr, lr, #4
   14520:	lsr	r0, r4, r7
   14524:	lsl	r4, r4, r3
   14528:	beq	14554 <__assert_fail@plt+0x32f8>
   1452c:	mov	r5, r8
   14530:	ldr	r1, [lr, #-4]!
   14534:	subs	ip, ip, #1
   14538:	orr	r6, r4, r1, lsr r7
   1453c:	lsl	r4, r1, r3
   14540:	str	r6, [r5, #-4]!
   14544:	bne	14530 <__assert_fail@plt+0x32d4>
   14548:	rsb	r2, r2, r2, lsl #30
   1454c:	add	r8, r8, r2, lsl #2
   14550:	add	r8, r8, #4
   14554:	str	r4, [r8, #-4]
   14558:	pop	{r4, r5, r6, r7, r8, pc}
   1455c:	ldr	r3, [pc, #52]	; 14598 <__assert_fail@plt+0x333c>
   14560:	ldr	r2, [pc, #52]	; 1459c <__assert_fail@plt+0x3340>
   14564:	ldr	r1, [pc, #52]	; 145a0 <__assert_fail@plt+0x3344>
   14568:	ldr	r0, [pc, #52]	; 145a4 <__assert_fail@plt+0x3348>
   1456c:	bl	1125c <__assert_fail@plt>
   14570:	ldr	r3, [pc, #32]	; 14598 <__assert_fail@plt+0x333c>
   14574:	ldr	r2, [pc, #44]	; 145a8 <__assert_fail@plt+0x334c>
   14578:	ldr	r1, [pc, #32]	; 145a0 <__assert_fail@plt+0x3344>
   1457c:	ldr	r0, [pc, #40]	; 145ac <__assert_fail@plt+0x3350>
   14580:	bl	1125c <__assert_fail@plt>
   14584:	ldr	r3, [pc, #12]	; 14598 <__assert_fail@plt+0x333c>
   14588:	mov	r2, #660	; 0x294
   1458c:	ldr	r1, [pc, #12]	; 145a0 <__assert_fail@plt+0x3344>
   14590:	ldr	r0, [pc, #24]	; 145b0 <__assert_fail@plt+0x3354>
   14594:	bl	1125c <__assert_fail@plt>
   14598:	andeq	sp, r2, r0, asr r3
   1459c:	muleq	r0, r3, r2
   145a0:	andeq	sp, r2, r8, ror r5
   145a4:	andeq	sp, r2, r4, ror r6
   145a8:	muleq	r0, r5, r2
   145ac:	strdeq	sp, [r2], -ip
   145b0:	strdeq	sp, [r2], -r0
   145b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145b8:	sub	sp, sp, #20
   145bc:	mov	r6, r0
   145c0:	str	r3, [sp]
   145c4:	ldr	r3, [r3]
   145c8:	mov	r5, r2
   145cc:	cmp	r3, #0
   145d0:	beq	146dc <__assert_fail@plt+0x3480>
   145d4:	cmp	r0, #0
   145d8:	movne	r2, #0
   145dc:	strne	r0, [sp, #8]
   145e0:	strne	r2, [sp, #4]
   145e4:	lslne	r7, r5, #2
   145e8:	beq	146f0 <__assert_fail@plt+0x3494>
   145ec:	ldr	r8, [sp, #8]
   145f0:	mov	r2, r5
   145f4:	mov	r0, r8
   145f8:	bl	144e8 <__assert_fail@plt+0x328c>
   145fc:	mov	r1, r8
   14600:	mov	r4, r0
   14604:	ldr	r3, [sp]
   14608:	ldr	sl, [pc, #272]	; 14720 <__assert_fail@plt+0x34c4>
   1460c:	add	r1, r1, r7
   14610:	ldr	r9, [r3, #12]
   14614:	ldr	r7, [r3, #4]
   14618:	lsr	fp, r9, #16
   1461c:	and	r9, r9, sl
   14620:	b	14674 <__assert_fail@plt+0x3418>
   14624:	mul	r3, fp, r3
   14628:	ldr	r4, [r1, #-4]!
   1462c:	cmp	lr, r2
   14630:	addhi	r3, r3, #65536	; 0x10000
   14634:	adds	r0, r0, r4
   14638:	adc	r3, r3, ip
   1463c:	mul	r2, r3, r7
   14640:	sub	r4, r4, r2
   14644:	cmp	r0, r4
   14648:	movcs	r0, #0
   1464c:	movcc	r0, #1
   14650:	rsb	r2, r0, #0
   14654:	and	r2, r2, r7
   14658:	add	r4, r2, r4
   1465c:	cmp	r7, r4
   14660:	sub	r3, r3, r0
   14664:	addls	r3, r3, #1
   14668:	subls	r4, r4, r7
   1466c:	cmp	r6, #0
   14670:	strne	r3, [r6, r5, lsl #2]
   14674:	lsr	r3, r4, #16
   14678:	and	r2, r4, sl
   1467c:	mul	lr, r9, r3
   14680:	mul	r8, r9, r2
   14684:	mla	r2, fp, r2, lr
   14688:	add	ip, r4, #1
   1468c:	add	r2, r2, r8, lsr #16
   14690:	and	r0, r8, sl
   14694:	subs	r5, r5, #1
   14698:	add	r0, r0, r2, lsl #16
   1469c:	add	ip, ip, r2, lsr #16
   146a0:	bpl	14624 <__assert_fail@plt+0x33c8>
   146a4:	ldr	r3, [sp, #4]
   146a8:	cmp	r3, #0
   146ac:	beq	146c8 <__assert_fail@plt+0x346c>
   146b0:	ldr	r3, [pc, #108]	; 14724 <__assert_fail@plt+0x34c8>
   146b4:	ldr	r2, [sp, #4]
   146b8:	ldr	r0, [sp, #8]
   146bc:	ldr	r3, [r3, #8]
   146c0:	lsl	r1, r2, #2
   146c4:	blx	r3
   146c8:	ldr	r3, [sp]
   146cc:	ldr	r0, [r3]
   146d0:	lsr	r0, r4, r0
   146d4:	add	sp, sp, #20
   146d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146dc:	str	r3, [sp, #4]
   146e0:	str	r3, [sp, #8]
   146e4:	mov	r4, r3
   146e8:	lsl	r7, r2, #2
   146ec:	b	14604 <__assert_fail@plt+0x33a8>
   146f0:	ldr	r3, [pc, #44]	; 14724 <__assert_fail@plt+0x34c8>
   146f4:	lsl	r7, r5, #2
   146f8:	mov	r0, r7
   146fc:	ldr	r3, [r3, #4]
   14700:	str	r1, [sp, #12]
   14704:	blx	r3
   14708:	ldr	r3, [sp]
   1470c:	str	r5, [sp, #4]
   14710:	ldr	r1, [sp, #12]
   14714:	ldr	r3, [r3]
   14718:	str	r0, [sp, #8]
   1471c:	b	145ec <__assert_fail@plt+0x3390>
   14720:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   14724:	andeq	pc, r3, r8, lsr #2
   14728:	cmp	r2, #0
   1472c:	push	{r4, r5, r6, r7, r8, lr}
   14730:	ble	14790 <__assert_fail@plt+0x3534>
   14734:	cmp	r3, #0
   14738:	beq	147b8 <__assert_fail@plt+0x355c>
   1473c:	cmp	r3, #31
   14740:	bhi	147a4 <__assert_fail@plt+0x3548>
   14744:	ldr	r4, [r1]
   14748:	rsb	r7, r3, #32
   1474c:	subs	ip, r2, #1
   14750:	lsl	r8, r4, r7
   14754:	add	r1, r1, #4
   14758:	lsr	r4, r4, r3
   1475c:	beq	14784 <__assert_fail@plt+0x3528>
   14760:	mov	r5, r0
   14764:	ldr	lr, [r1], #4
   14768:	subs	ip, ip, #1
   1476c:	orr	r6, r4, lr, lsl r7
   14770:	lsr	r4, lr, r3
   14774:	str	r6, [r5], #4
   14778:	bne	14764 <__assert_fail@plt+0x3508>
   1477c:	sub	r2, r2, #-1073741823	; 0xc0000001
   14780:	add	r0, r0, r2, lsl #2
   14784:	str	r4, [r0]
   14788:	mov	r0, r8
   1478c:	pop	{r4, r5, r6, r7, r8, pc}
   14790:	ldr	r3, [pc, #52]	; 147cc <__assert_fail@plt+0x3570>
   14794:	ldr	r2, [pc, #52]	; 147d0 <__assert_fail@plt+0x3574>
   14798:	ldr	r1, [pc, #52]	; 147d4 <__assert_fail@plt+0x3578>
   1479c:	ldr	r0, [pc, #52]	; 147d8 <__assert_fail@plt+0x357c>
   147a0:	bl	1125c <__assert_fail@plt>
   147a4:	ldr	r3, [pc, #32]	; 147cc <__assert_fail@plt+0x3570>
   147a8:	ldr	r2, [pc, #44]	; 147dc <__assert_fail@plt+0x3580>
   147ac:	ldr	r1, [pc, #32]	; 147d4 <__assert_fail@plt+0x3578>
   147b0:	ldr	r0, [pc, #40]	; 147e0 <__assert_fail@plt+0x3584>
   147b4:	bl	1125c <__assert_fail@plt>
   147b8:	ldr	r3, [pc, #12]	; 147cc <__assert_fail@plt+0x3570>
   147bc:	ldr	r2, [pc, #32]	; 147e4 <__assert_fail@plt+0x3588>
   147c0:	ldr	r1, [pc, #12]	; 147d4 <__assert_fail@plt+0x3578>
   147c4:	ldr	r0, [pc, #28]	; 147e8 <__assert_fail@plt+0x358c>
   147c8:	bl	1125c <__assert_fail@plt>
   147cc:	andeq	sp, r2, ip, asr r3
   147d0:			; <UNDEFINED> instruction: 0x000002b1
   147d4:	andeq	sp, r2, r8, ror r5
   147d8:	andeq	sp, r2, r4, ror r6
   147dc:			; <UNDEFINED> instruction: 0x000002b3
   147e0:	strdeq	sp, [r2], -ip
   147e4:			; <UNDEFINED> instruction: 0x000002b2
   147e8:	strdeq	sp, [r2], -r0
   147ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147f0:	sub	sp, sp, #52	; 0x34
   147f4:	str	r3, [sp, #8]
   147f8:	ldr	r3, [sp, #88]	; 0x58
   147fc:	str	r0, [sp, #16]
   14800:	cmp	r3, #0
   14804:	str	r1, [sp, #36]	; 0x24
   14808:	ldr	r5, [sp, #92]	; 0x5c
   1480c:	ble	14e04 <__assert_fail@plt+0x3ba8>
   14810:	ldr	r3, [sp, #88]	; 0x58
   14814:	mov	r4, r2
   14818:	cmp	r3, r2
   1481c:	bgt	14e2c <__assert_fail@plt+0x3bd0>
   14820:	ldr	r3, [sp, #88]	; 0x58
   14824:	cmp	r3, #1
   14828:	beq	14bac <__assert_fail@plt+0x3950>
   1482c:	ldr	r3, [sp, #88]	; 0x58
   14830:	cmp	r3, #2
   14834:	beq	14bc0 <__assert_fail@plt+0x3964>
   14838:	ldr	r3, [sp, #88]	; 0x58
   1483c:	ldr	ip, [sp, #8]
   14840:	sub	r3, r3, #-1073741823	; 0xc0000001
   14844:	mov	r0, r3
   14848:	str	r3, [sp, #44]	; 0x2c
   1484c:	ldr	r9, [r5, #4]
   14850:	ldr	r3, [ip, r3, lsl #2]
   14854:	lsl	r7, r0, #2
   14858:	cmp	r9, r3
   1485c:	bne	14df0 <__assert_fail@plt+0x3b94>
   14860:	ldr	r3, [sp, #8]
   14864:	sub	r7, r7, #4
   14868:	ldr	sl, [r5, #8]
   1486c:	ldr	r3, [r3, r7]
   14870:	ldr	r0, [sp, #88]	; 0x58
   14874:	cmp	sl, r3
   14878:	sub	r8, r0, #-1073741822	; 0xc0000002
   1487c:	bne	14ddc <__assert_fail@plt+0x3b80>
   14880:	cmp	r9, #0
   14884:	bge	14dc8 <__assert_fail@plt+0x3b6c>
   14888:	ldr	r3, [r5]
   1488c:	cmp	r3, #0
   14890:	str	r3, [sp, #40]	; 0x28
   14894:	bne	14b64 <__assert_fail@plt+0x3908>
   14898:	ldr	r3, [sp, #88]	; 0x58
   1489c:	cmp	r3, #2
   148a0:	ldr	r3, [r5, #12]
   148a4:	ldrgt	r6, [sp, #40]	; 0x28
   148a8:	ble	14e18 <__assert_fail@plt+0x3bbc>
   148ac:	ldr	r2, [sp, #88]	; 0x58
   148b0:	ldr	r1, [sp, #36]	; 0x24
   148b4:	sub	r2, r4, r2
   148b8:	add	r8, r8, r2
   148bc:	str	r2, [sp, #4]
   148c0:	add	r7, r1, r2, lsl #2
   148c4:	uxth	r2, r3
   148c8:	lsr	r3, r3, #16
   148cc:	str	r3, [sp, #20]
   148d0:	uxth	r3, sl
   148d4:	str	r3, [sp, #32]
   148d8:	ldr	r3, [sp, #88]	; 0x58
   148dc:	add	r8, r1, r8, lsl #2
   148e0:	sub	fp, r3, #1
   148e4:	lsr	r3, sl, #16
   148e8:	str	r3, [sp, #12]
   148ec:	ldr	r3, [sp, #88]	; 0x58
   148f0:	str	r2, [sp, #24]
   148f4:	sub	r3, r3, #2
   148f8:	str	r3, [sp, #28]
   148fc:	ldr	r3, [r8, #4]
   14900:	cmp	r9, r6
   14904:	cmpeq	r3, sl
   14908:	beq	14ae0 <__assert_fail@plt+0x3884>
   1490c:	ldr	r1, [sp, #24]
   14910:	lsr	r2, r6, #16
   14914:	uxth	r0, r6
   14918:	mul	ip, r1, r2
   1491c:	ldr	lr, [sp, #20]
   14920:	mul	r1, r1, r0
   14924:	mla	r0, lr, r0, ip
   14928:	mul	r2, lr, r2
   1492c:	add	r0, r0, r1, lsr #16
   14930:	uxth	r1, r1
   14934:	cmp	ip, r0
   14938:	add	r1, r1, r0, lsl #16
   1493c:	add	r6, r6, r0, lsr #16
   14940:	addhi	r2, r2, #65536	; 0x10000
   14944:	adds	r1, r3, r1
   14948:	adc	r2, r2, r6
   1494c:	ldr	ip, [sp, #12]
   14950:	uxth	r0, r2
   14954:	ldr	r6, [sp, #32]
   14958:	mul	lr, r0, ip
   1495c:	lsr	r4, r2, #16
   14960:	mul	r5, r2, r9
   14964:	mul	r0, r0, r6
   14968:	mla	ip, r4, r6, lr
   1496c:	sub	r3, r3, r5
   14970:	ldr	r6, [r8]
   14974:	add	ip, ip, r0, lsr #16
   14978:	sub	r3, r3, r9
   1497c:	cmp	r6, sl
   14980:	subcc	r3, r3, #1
   14984:	cmp	lr, ip
   14988:	ldr	lr, [sp, #12]
   1498c:	uxth	r0, r0
   14990:	add	r0, r0, ip, lsl #16
   14994:	mul	r4, r4, lr
   14998:	sub	r6, r6, sl
   1499c:	sub	r3, r3, ip, lsr #16
   149a0:	addhi	r4, r4, #65536	; 0x10000
   149a4:	cmp	r6, r0
   149a8:	subcc	r3, r3, #1
   149ac:	sub	r4, r3, r4
   149b0:	cmp	r1, r4
   149b4:	movhi	r5, #0
   149b8:	movls	r5, #1
   149bc:	rsb	r3, r5, #0
   149c0:	sub	r6, r6, r0
   149c4:	and	r0, r3, sl
   149c8:	adds	r6, r0, r6
   149cc:	and	r3, r3, r9
   149d0:	adc	r4, r4, r3
   149d4:	add	r2, r2, #1
   149d8:	cmp	r9, r4
   149dc:	sub	r5, r2, r5
   149e0:	bhi	14a10 <__assert_fail@plt+0x37b4>
   149e4:	movcc	r3, #1
   149e8:	movcs	r3, #0
   149ec:	cmp	r6, sl
   149f0:	orrcs	r3, r3, #1
   149f4:	cmp	r3, #0
   149f8:	beq	14b04 <__assert_fail@plt+0x38a8>
   149fc:	sub	r4, r4, r9
   14a00:	cmp	r6, sl
   14a04:	subcc	r4, r4, #1
   14a08:	add	r5, r5, #1
   14a0c:	sub	r6, r6, sl
   14a10:	mov	r3, r5
   14a14:	mov	r0, r7
   14a18:	ldr	r2, [sp, #28]
   14a1c:	ldr	r1, [sp, #8]
   14a20:	bl	142d8 <__assert_fail@plt+0x307c>
   14a24:	sub	r7, r7, #4
   14a28:	cmp	r0, r6
   14a2c:	movls	r3, #0
   14a30:	movhi	r3, #1
   14a34:	sub	r0, r6, r0
   14a38:	cmp	r3, r4
   14a3c:	sub	r6, r4, r3
   14a40:	str	r0, [r8]
   14a44:	bls	14a9c <__assert_fail@plt+0x3840>
   14a48:	ldr	r3, [sp, #8]
   14a4c:	mov	ip, r7
   14a50:	sub	r0, r3, #4
   14a54:	mov	r3, #0
   14a58:	mov	r1, r3
   14a5c:	ldr	lr, [ip, #4]
   14a60:	ldr	r2, [r0, #4]!
   14a64:	adds	r3, r3, lr
   14a68:	movcs	lr, #1
   14a6c:	movcc	lr, #0
   14a70:	add	r1, r1, #1
   14a74:	adds	r2, r2, r3
   14a78:	movcs	r3, #1
   14a7c:	movcc	r3, #0
   14a80:	cmp	r1, fp
   14a84:	str	r2, [ip, #4]!
   14a88:	add	r3, r3, lr
   14a8c:	blt	14a5c <__assert_fail@plt+0x3800>
   14a90:	add	r6, r9, r6
   14a94:	add	r6, r3, r6
   14a98:	sub	r5, r5, #1
   14a9c:	ldr	r3, [sp, #16]
   14aa0:	sub	r8, r8, #4
   14aa4:	cmp	r3, #0
   14aa8:	ldrne	r2, [sp, #4]
   14aac:	strne	r5, [r3, r2, lsl #2]
   14ab0:	ldr	r3, [sp, #4]
   14ab4:	subs	r3, r3, #1
   14ab8:	str	r3, [sp, #4]
   14abc:	bpl	148fc <__assert_fail@plt+0x36a0>
   14ac0:	ldr	r3, [sp, #40]	; 0x28
   14ac4:	ldr	r2, [sp, #44]	; 0x2c
   14ac8:	cmp	r3, #0
   14acc:	ldr	r3, [sp, #36]	; 0x24
   14ad0:	str	r6, [r3, r2, lsl #2]
   14ad4:	bne	14b34 <__assert_fail@plt+0x38d8>
   14ad8:	add	sp, sp, #52	; 0x34
   14adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ae0:	mov	r0, r7
   14ae4:	mvn	r3, #0
   14ae8:	ldr	r2, [sp, #88]	; 0x58
   14aec:	ldr	r1, [sp, #8]
   14af0:	bl	142d8 <__assert_fail@plt+0x307c>
   14af4:	mvn	r5, #0
   14af8:	sub	r7, r7, #4
   14afc:	ldr	r6, [r8, #4]
   14b00:	b	14a9c <__assert_fail@plt+0x3840>
   14b04:	mov	r3, r5
   14b08:	mov	r0, r7
   14b0c:	ldr	r2, [sp, #28]
   14b10:	ldr	r1, [sp, #8]
   14b14:	bl	142d8 <__assert_fail@plt+0x307c>
   14b18:	sub	r7, r7, #4
   14b1c:	sub	r3, r6, r0
   14b20:	str	r3, [r8]
   14b24:	cmp	r6, r0
   14b28:	movcs	r6, r4
   14b2c:	subcc	r6, r4, #1
   14b30:	b	14a9c <__assert_fail@plt+0x3840>
   14b34:	ldr	r1, [sp, #36]	; 0x24
   14b38:	ldr	r3, [sp, #40]	; 0x28
   14b3c:	ldr	r2, [sp, #88]	; 0x58
   14b40:	mov	r0, r1
   14b44:	bl	14728 <__assert_fail@plt+0x34cc>
   14b48:	cmp	r0, #0
   14b4c:	beq	14ad8 <__assert_fail@plt+0x387c>
   14b50:	ldr	r3, [pc, #764]	; 14e54 <__assert_fail@plt+0x3bf8>
   14b54:	ldr	r2, [pc, #764]	; 14e58 <__assert_fail@plt+0x3bfc>
   14b58:	ldr	r1, [pc, #764]	; 14e5c <__assert_fail@plt+0x3c00>
   14b5c:	ldr	r0, [pc, #764]	; 14e60 <__assert_fail@plt+0x3c04>
   14b60:	bl	1125c <__assert_fail@plt>
   14b64:	ldr	r0, [sp, #36]	; 0x24
   14b68:	bl	144e8 <__assert_fail@plt+0x328c>
   14b6c:	ldr	r3, [sp, #88]	; 0x58
   14b70:	cmp	r3, #2
   14b74:	ldr	r3, [r5, #12]
   14b78:	mov	r6, r0
   14b7c:	ble	14e18 <__assert_fail@plt+0x3bbc>
   14b80:	ldr	r2, [sp, #8]
   14b84:	ldr	r1, [sp, #44]	; 0x2c
   14b88:	ldr	sl, [r2, r7]
   14b8c:	ldr	r9, [r2, r1, lsl #2]
   14b90:	cmp	r9, #0
   14b94:	blt	148ac <__assert_fail@plt+0x3650>
   14b98:	ldr	r3, [pc, #708]	; 14e64 <__assert_fail@plt+0x3c08>
   14b9c:	ldr	r2, [pc, #708]	; 14e68 <__assert_fail@plt+0x3c0c>
   14ba0:	ldr	r1, [pc, #692]	; 14e5c <__assert_fail@plt+0x3c00>
   14ba4:	ldr	r0, [pc, #704]	; 14e6c <__assert_fail@plt+0x3c10>
   14ba8:	bl	1125c <__assert_fail@plt>
   14bac:	mov	r3, r5
   14bb0:	bl	145b4 <__assert_fail@plt+0x3358>
   14bb4:	ldr	r3, [sp, #36]	; 0x24
   14bb8:	str	r0, [r3]
   14bbc:	b	14ad8 <__assert_fail@plt+0x387c>
   14bc0:	cmp	r2, #1
   14bc4:	ble	14db4 <__assert_fail@plt+0x3b58>
   14bc8:	ldr	r3, [r5]
   14bcc:	ldr	r6, [r5, #4]
   14bd0:	cmp	r3, #0
   14bd4:	str	r3, [sp, #28]
   14bd8:	ldr	r7, [r5, #8]
   14bdc:	ldr	fp, [r5, #12]
   14be0:	bne	14d98 <__assert_fail@plt+0x3b3c>
   14be4:	uxth	r2, fp
   14be8:	mov	r0, r3
   14bec:	lsr	fp, fp, #16
   14bf0:	str	r2, [sp, #24]
   14bf4:	ldr	r2, [sp, #36]	; 0x24
   14bf8:	sub	r3, r4, #-1073741823	; 0xc0000001
   14bfc:	ldr	r8, [pc, #620]	; 14e70 <__assert_fail@plt+0x3c14>
   14c00:	ldr	r1, [sp, #16]
   14c04:	sub	r4, r4, #2
   14c08:	ldr	lr, [r2, r3, lsl #2]
   14c0c:	add	r3, r2, r3, lsl #2
   14c10:	str	r3, [sp, #4]
   14c14:	and	r3, r7, r8
   14c18:	str	r3, [sp, #20]
   14c1c:	add	r9, r1, r4, lsl #2
   14c20:	lsr	r3, r7, #16
   14c24:	mov	r5, r0
   14c28:	str	r3, [sp, #8]
   14c2c:	sub	r3, r1, #4
   14c30:	str	r3, [sp, #12]
   14c34:	ldr	r1, [sp, #24]
   14c38:	lsr	r3, r5, #16
   14c3c:	and	r2, r5, r8
   14c40:	mul	r0, r1, r3
   14c44:	mul	r1, r1, r2
   14c48:	mla	r2, fp, r2, r0
   14c4c:	mul	r3, fp, r3
   14c50:	add	r2, r2, r1, lsr #16
   14c54:	cmp	r0, r2
   14c58:	ldr	r0, [sp, #4]
   14c5c:	and	r1, r1, r8
   14c60:	add	r1, r1, r2, lsl #16
   14c64:	ldr	ip, [r0, #-4]!
   14c68:	add	r5, r5, r2, lsr #16
   14c6c:	addhi	r3, r3, #65536	; 0x10000
   14c70:	adds	r1, r1, lr
   14c74:	adc	r3, r3, r5
   14c78:	ldr	r2, [sp, #8]
   14c7c:	str	r0, [sp, #4]
   14c80:	and	r0, r3, r8
   14c84:	ldr	r4, [sp, #20]
   14c88:	mul	sl, r2, r0
   14c8c:	mul	r2, r3, r6
   14c90:	lsr	r5, r3, #16
   14c94:	mul	r0, r4, r0
   14c98:	sub	r2, lr, r2
   14c9c:	mla	r4, r4, r5, sl
   14ca0:	ldr	lr, [sp, #8]
   14ca4:	add	r4, r4, r0, lsr #16
   14ca8:	sub	r2, r2, r6
   14cac:	mul	r5, lr, r5
   14cb0:	cmp	r7, ip
   14cb4:	subhi	r2, r2, #1
   14cb8:	and	r0, r0, r8
   14cbc:	cmp	sl, r4
   14cc0:	add	r0, r0, r4, lsl #16
   14cc4:	sub	ip, ip, r7
   14cc8:	sub	r4, r2, r4, lsr #16
   14ccc:	addhi	r5, r5, #65536	; 0x10000
   14cd0:	cmp	ip, r0
   14cd4:	subcc	r4, r4, #1
   14cd8:	sub	r5, r4, r5
   14cdc:	cmp	r1, r5
   14ce0:	movhi	r1, #0
   14ce4:	movls	r1, #1
   14ce8:	rsb	r4, r1, #0
   14cec:	and	lr, r7, r4
   14cf0:	sub	ip, ip, r0
   14cf4:	adds	lr, lr, ip
   14cf8:	and	r4, r4, r6
   14cfc:	adc	r5, r5, r4
   14d00:	add	r3, r3, #1
   14d04:	cmp	r6, r5
   14d08:	sub	r1, r3, r1
   14d0c:	bhi	14d3c <__assert_fail@plt+0x3ae0>
   14d10:	movcc	r3, #1
   14d14:	movcs	r3, #0
   14d18:	cmp	r7, lr
   14d1c:	orrls	r3, r3, #1
   14d20:	cmp	r3, #0
   14d24:	beq	14d3c <__assert_fail@plt+0x3ae0>
   14d28:	sub	r5, r5, r6
   14d2c:	cmp	r7, lr
   14d30:	subhi	r5, r5, #1
   14d34:	add	r1, r1, #1
   14d38:	sub	lr, lr, r7
   14d3c:	ldr	r3, [sp, #16]
   14d40:	sub	r9, r9, #4
   14d44:	cmp	r3, #0
   14d48:	ldr	r3, [sp, #12]
   14d4c:	strne	r1, [r9, #4]
   14d50:	cmp	r3, r9
   14d54:	bne	14c34 <__assert_fail@plt+0x39d8>
   14d58:	ldr	r3, [sp, #28]
   14d5c:	mov	r0, r5
   14d60:	cmp	r3, #0
   14d64:	beq	14d88 <__assert_fail@plt+0x3b2c>
   14d68:	rsb	r3, r3, #32
   14d6c:	mvn	r2, #0
   14d70:	ands	r2, lr, r2, lsr r3
   14d74:	bne	14e40 <__assert_fail@plt+0x3be4>
   14d78:	ldr	r2, [sp, #28]
   14d7c:	lsl	r3, r5, r3
   14d80:	lsr	r0, r5, r2
   14d84:	orr	lr, r3, lr, lsr r2
   14d88:	ldr	r3, [sp, #36]	; 0x24
   14d8c:	str	r0, [r3, #4]
   14d90:	str	lr, [r3]
   14d94:	b	14ad8 <__assert_fail@plt+0x387c>
   14d98:	ldr	r3, [sp, #28]
   14d9c:	ldr	r0, [sp, #36]	; 0x24
   14da0:	bl	144e8 <__assert_fail@plt+0x328c>
   14da4:	uxth	r3, fp
   14da8:	str	r3, [sp, #24]
   14dac:	lsr	fp, fp, #16
   14db0:	b	14bf4 <__assert_fail@plt+0x3998>
   14db4:	ldr	r3, [pc, #184]	; 14e74 <__assert_fail@plt+0x3c18>
   14db8:	ldr	r2, [pc, #184]	; 14e78 <__assert_fail@plt+0x3c1c>
   14dbc:	ldr	r1, [pc, #152]	; 14e5c <__assert_fail@plt+0x3c00>
   14dc0:	ldr	r0, [pc, #180]	; 14e7c <__assert_fail@plt+0x3c20>
   14dc4:	bl	1125c <__assert_fail@plt>
   14dc8:	ldr	r3, [pc, #132]	; 14e54 <__assert_fail@plt+0x3bf8>
   14dcc:	ldr	r2, [pc, #172]	; 14e80 <__assert_fail@plt+0x3c24>
   14dd0:	ldr	r1, [pc, #132]	; 14e5c <__assert_fail@plt+0x3c00>
   14dd4:	ldr	r0, [pc, #168]	; 14e84 <__assert_fail@plt+0x3c28>
   14dd8:	bl	1125c <__assert_fail@plt>
   14ddc:	ldr	r3, [pc, #112]	; 14e54 <__assert_fail@plt+0x3bf8>
   14de0:	ldr	r2, [pc, #160]	; 14e88 <__assert_fail@plt+0x3c2c>
   14de4:	ldr	r1, [pc, #112]	; 14e5c <__assert_fail@plt+0x3c00>
   14de8:	ldr	r0, [pc, #156]	; 14e8c <__assert_fail@plt+0x3c30>
   14dec:	bl	1125c <__assert_fail@plt>
   14df0:	ldr	r3, [pc, #92]	; 14e54 <__assert_fail@plt+0x3bf8>
   14df4:	ldr	r2, [pc, #148]	; 14e90 <__assert_fail@plt+0x3c34>
   14df8:	ldr	r1, [pc, #92]	; 14e5c <__assert_fail@plt+0x3c00>
   14dfc:	ldr	r0, [pc, #144]	; 14e94 <__assert_fail@plt+0x3c38>
   14e00:	bl	1125c <__assert_fail@plt>
   14e04:	ldr	r3, [pc, #72]	; 14e54 <__assert_fail@plt+0x3bf8>
   14e08:	ldr	r2, [pc, #136]	; 14e98 <__assert_fail@plt+0x3c3c>
   14e0c:	ldr	r1, [pc, #72]	; 14e5c <__assert_fail@plt+0x3c00>
   14e10:	ldr	r0, [pc, #132]	; 14e9c <__assert_fail@plt+0x3c40>
   14e14:	bl	1125c <__assert_fail@plt>
   14e18:	ldr	r3, [pc, #68]	; 14e64 <__assert_fail@plt+0x3c08>
   14e1c:	ldr	r2, [pc, #124]	; 14ea0 <__assert_fail@plt+0x3c44>
   14e20:	ldr	r1, [pc, #52]	; 14e5c <__assert_fail@plt+0x3c00>
   14e24:	ldr	r0, [pc, #120]	; 14ea4 <__assert_fail@plt+0x3c48>
   14e28:	bl	1125c <__assert_fail@plt>
   14e2c:	ldr	r3, [pc, #32]	; 14e54 <__assert_fail@plt+0x3bf8>
   14e30:	ldr	r2, [pc, #112]	; 14ea8 <__assert_fail@plt+0x3c4c>
   14e34:	ldr	r1, [pc, #32]	; 14e5c <__assert_fail@plt+0x3c00>
   14e38:	ldr	r0, [pc, #108]	; 14eac <__assert_fail@plt+0x3c50>
   14e3c:	bl	1125c <__assert_fail@plt>
   14e40:	ldr	r3, [pc, #44]	; 14e74 <__assert_fail@plt+0x3c18>
   14e44:	ldr	r2, [pc, #100]	; 14eb0 <__assert_fail@plt+0x3c54>
   14e48:	ldr	r1, [pc, #12]	; 14e5c <__assert_fail@plt+0x3c00>
   14e4c:	ldr	r0, [pc, #96]	; 14eb4 <__assert_fail@plt+0x3c58>
   14e50:	bl	1125c <__assert_fail@plt>
   14e54:	andeq	sp, r2, r8, ror #6
   14e58:	andeq	r0, r0, r2, ror r4
   14e5c:	andeq	sp, r2, r8, ror r5
   14e60:	andeq	sp, r2, r4, asr r6
   14e64:	muleq	r2, r0, r3
   14e68:	andeq	r0, r0, r7, lsr #8
   14e6c:			; <UNDEFINED> instruction: 0x0002d7b8
   14e70:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   14e74:	andeq	sp, r2, ip, ror r3
   14e78:	strdeq	r0, [r0], -r1
   14e7c:	andeq	sp, r2, r4, lsr #14
   14e80:	andeq	r0, r0, r7, ror #8
   14e84:	andeq	sp, r2, ip, lsl #15
   14e88:	andeq	r0, r0, r6, ror #8
   14e8c:	andeq	sp, r2, r8, ror r7
   14e90:	andeq	r0, r0, r5, ror #8
   14e94:	andeq	sp, r2, r4, ror #14
   14e98:	andeq	r0, r0, r9, asr r4
   14e9c:	andeq	sp, r2, r0, lsl r7
   14ea0:	andeq	r0, r0, r1, lsr #8
   14ea4:			; <UNDEFINED> instruction: 0x0002d7b0
   14ea8:	andeq	r0, r0, sl, asr r4
   14eac:	andeq	sp, r2, r8, lsl r7
   14eb0:	andeq	r0, r0, ip, lsl #8
   14eb4:	andeq	sp, r2, ip, lsr #14
   14eb8:	lsr	r3, r1, #5
   14ebc:	push	{lr}		; (str lr, [sp, #-4]!)
   14ec0:	mov	r2, r0
   14ec4:	sub	sp, sp, #12
   14ec8:	ldr	r0, [r0, r3, lsl #2]
   14ecc:	mvn	lr, #0
   14ed0:	and	r1, r1, #31
   14ed4:	mov	ip, #0
   14ed8:	and	r0, r0, lr, lsl r1
   14edc:	str	ip, [sp]
   14ee0:	mov	r1, r3
   14ee4:	bl	13240 <__assert_fail@plt+0x1fe4>
   14ee8:	add	sp, sp, #12
   14eec:	pop	{pc}		; (ldr pc, [sp], #4)
   14ef0:	lsr	r3, r1, #5
   14ef4:	mvn	ip, #0
   14ef8:	and	r1, r1, #31
   14efc:	push	{lr}		; (str lr, [sp, #-4]!)
   14f00:	lsl	r1, ip, r1
   14f04:	sub	sp, sp, #12
   14f08:	mov	r2, r0
   14f0c:	ldr	r0, [r0, r3, lsl #2]
   14f10:	str	ip, [sp]
   14f14:	bic	r0, r1, r0
   14f18:	mov	r1, r3
   14f1c:	bl	13240 <__assert_fail@plt+0x1fe4>
   14f20:	add	sp, sp, #12
   14f24:	pop	{pc}		; (ldr pc, [sp], #4)
   14f28:	subs	r2, r2, #1
   14f2c:	bxmi	lr
   14f30:	sub	r0, r0, #4
   14f34:	ldr	r3, [r1], #4
   14f38:	sub	r2, r2, #1
   14f3c:	mvn	r3, r3
   14f40:	cmn	r2, #1
   14f44:	str	r3, [r0, #4]!
   14f48:	bne	14f34 <__assert_fail@plt+0x3cd8>
   14f4c:	bx	lr
   14f50:	ldr	r3, [r1]
   14f54:	push	{lr}		; (str lr, [sp, #-4]!)
   14f58:	cmp	r3, #0
   14f5c:	bne	14f98 <__assert_fail@plt+0x3d3c>
   14f60:	subs	r2, r2, #1
   14f64:	str	r3, [r0]
   14f68:	beq	14fcc <__assert_fail@plt+0x3d70>
   14f6c:	add	ip, r1, #4
   14f70:	add	lr, r0, #4
   14f74:	b	14f84 <__assert_fail@plt+0x3d28>
   14f78:	subs	r2, r2, #1
   14f7c:	str	r3, [lr], #4
   14f80:	beq	14fcc <__assert_fail@plt+0x3d70>
   14f84:	mov	r1, ip
   14f88:	ldr	r3, [ip], #4
   14f8c:	mov	r0, lr
   14f90:	cmp	r3, #0
   14f94:	beq	14f78 <__assert_fail@plt+0x3d1c>
   14f98:	rsb	r3, r3, #0
   14f9c:	subs	r2, r2, #2
   14fa0:	str	r3, [r0]
   14fa4:	add	r1, r1, #4
   14fa8:	bmi	14fc4 <__assert_fail@plt+0x3d68>
   14fac:	ldr	r3, [r1], #4
   14fb0:	sub	r2, r2, #1
   14fb4:	mvn	r3, r3
   14fb8:	cmn	r2, #1
   14fbc:	str	r3, [r0, #4]!
   14fc0:	bne	14fac <__assert_fail@plt+0x3d50>
   14fc4:	mov	r0, #1
   14fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   14fcc:	mov	r0, #0
   14fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   14fd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fd8:	mov	r6, r0
   14fdc:	ldr	r7, [r1, #4]
   14fe0:	sub	sp, sp, #12
   14fe4:	cmp	r2, #0
   14fe8:	cmpne	r7, #0
   14fec:	moveq	r3, #0
   14ff0:	streq	r3, [r0, #4]
   14ff4:	beq	15108 <__assert_fail@plt+0x3eac>
   14ff8:	mov	fp, r2
   14ffc:	add	r8, fp, #31
   15000:	mov	sl, r3
   15004:	lsr	r9, r8, #5
   15008:	cmp	r9, #0
   1500c:	mov	r2, r1
   15010:	mov	r4, r9
   15014:	beq	151b0 <__assert_fail@plt+0x3f54>
   15018:	ldr	r3, [r0]
   1501c:	cmp	r9, r3
   15020:	ldrle	r5, [r0, #8]
   15024:	bgt	15110 <__assert_fail@plt+0x3eb4>
   15028:	bic	r8, r8, #31
   1502c:	sub	r8, r8, fp
   15030:	eor	fp, r7, r7, asr #31
   15034:	mvn	r3, #0
   15038:	sub	fp, fp, r7, asr #31
   1503c:	cmp	r9, fp
   15040:	lsr	r8, r3, r8
   15044:	ble	15088 <__assert_fail@plt+0x3e2c>
   15048:	cmp	r7, #0
   1504c:	movle	r1, #0
   15050:	movgt	r1, #1
   15054:	cmp	sl, r1
   15058:	beq	1514c <__assert_fail@plt+0x3ef0>
   1505c:	cmp	r2, r6
   15060:	beq	15080 <__assert_fail@plt+0x3e24>
   15064:	ldr	r3, [r2, #8]
   15068:	sub	r2, r5, #4
   1506c:	add	r0, r3, fp, lsl #2
   15070:	ldr	r1, [r3], #4
   15074:	cmp	r3, r0
   15078:	str	r1, [r2, #4]!
   1507c:	bne	15070 <__assert_fail@plt+0x3e14>
   15080:	mov	r4, fp
   15084:	b	150e4 <__assert_fail@plt+0x3e88>
   15088:	cmp	r2, r6
   1508c:	ldreq	ip, [r6, #8]
   15090:	beq	150c0 <__assert_fail@plt+0x3e64>
   15094:	cmp	r9, #1
   15098:	ldr	ip, [r2, #8]
   1509c:	beq	150c0 <__assert_fail@plt+0x3e64>
   150a0:	sub	r3, r9, #-1073741822	; 0xc0000002
   150a4:	sub	r2, ip, #4
   150a8:	add	r3, ip, r3, lsl #2
   150ac:	sub	r1, r5, #4
   150b0:	ldr	r0, [r2, #4]!
   150b4:	cmp	r2, r3
   150b8:	str	r0, [r1, #4]!
   150bc:	bne	150b0 <__assert_fail@plt+0x3e54>
   150c0:	sub	fp, r9, #-1073741823	; 0xc0000001
   150c4:	cmp	r7, #0
   150c8:	ldr	r3, [ip, fp, lsl #2]
   150cc:	movle	r2, #0
   150d0:	movgt	r2, #1
   150d4:	and	r3, r3, r8
   150d8:	cmp	sl, r2
   150dc:	str	r3, [r5, fp, lsl #2]
   150e0:	beq	15128 <__assert_fail@plt+0x3ecc>
   150e4:	add	r3, r5, r4, lsl #2
   150e8:	ldr	r2, [r3, #-4]!
   150ec:	cmp	r2, #0
   150f0:	bne	150fc <__assert_fail@plt+0x3ea0>
   150f4:	subs	r4, r4, #1
   150f8:	bne	150e8 <__assert_fail@plt+0x3e8c>
   150fc:	cmp	r7, #0
   15100:	rsblt	r4, r4, #0
   15104:	str	r4, [r6, #4]
   15108:	add	sp, sp, #12
   1510c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15110:	str	r1, [sp, #4]
   15114:	mov	r1, r9
   15118:	bl	13440 <__assert_fail@plt+0x21e4>
   1511c:	ldr	r2, [sp, #4]
   15120:	mov	r5, r0
   15124:	b	15028 <__assert_fail@plt+0x3dcc>
   15128:	mov	r2, r9
   1512c:	mov	r1, r5
   15130:	mov	r0, r5
   15134:	bl	14f50 <__assert_fail@plt+0x3cf4>
   15138:	ldr	r3, [r5, fp, lsl #2]
   1513c:	rsb	r7, r7, #0
   15140:	and	r8, r8, r3
   15144:	str	r8, [r5, fp, lsl #2]
   15148:	b	150e4 <__assert_fail@plt+0x3e88>
   1514c:	ldr	r1, [r2, #8]
   15150:	mov	r0, r5
   15154:	mov	r2, fp
   15158:	str	r3, [sp, #4]
   1515c:	bl	14f50 <__assert_fail@plt+0x3cf4>
   15160:	cmp	r0, #0
   15164:	beq	1519c <__assert_fail@plt+0x3f40>
   15168:	sub	r2, r9, #1
   1516c:	sub	r9, r9, #-1073741823	; 0xc0000001
   15170:	cmp	fp, r2
   15174:	ldr	r3, [sp, #4]
   15178:	addlt	fp, r5, fp, lsl #2
   1517c:	addlt	r2, r5, r9, lsl #2
   15180:	bge	15190 <__assert_fail@plt+0x3f34>
   15184:	str	r3, [fp], #4
   15188:	cmp	r2, fp
   1518c:	bne	15184 <__assert_fail@plt+0x3f28>
   15190:	str	r8, [r5, r9, lsl #2]
   15194:	rsb	r7, r7, #0
   15198:	b	150e4 <__assert_fail@plt+0x3e88>
   1519c:	ldr	r3, [pc, #32]	; 151c4 <__assert_fail@plt+0x3f68>
   151a0:	ldr	r2, [pc, #32]	; 151c8 <__assert_fail@plt+0x3f6c>
   151a4:	ldr	r1, [pc, #32]	; 151cc <__assert_fail@plt+0x3f70>
   151a8:	ldr	r0, [pc, #32]	; 151d0 <__assert_fail@plt+0x3f74>
   151ac:	bl	1125c <__assert_fail@plt>
   151b0:	ldr	r3, [pc, #12]	; 151c4 <__assert_fail@plt+0x3f68>
   151b4:	ldr	r2, [pc, #24]	; 151d4 <__assert_fail@plt+0x3f78>
   151b8:	ldr	r1, [pc, #12]	; 151cc <__assert_fail@plt+0x3f70>
   151bc:	ldr	r0, [pc, #20]	; 151d8 <__assert_fail@plt+0x3f7c>
   151c0:	bl	1125c <__assert_fail@plt>
   151c4:	andeq	sp, r2, r0, lsr #7
   151c8:	andeq	r0, r0, fp, lsl #19
   151cc:	andeq	sp, r2, r8, ror r5
   151d0:	andeq	sp, r2, r4, asr r6
   151d4:	andeq	r0, r0, fp, ror r9
   151d8:	ldrdeq	sp, [r2], -r8
   151dc:	push	{r4, r5, r6, r7, r8, lr}
   151e0:	lsr	r8, r0, #16
   151e4:	mvn	r7, r0
   151e8:	mov	r4, r0
   151ec:	mov	r5, r1
   151f0:	mov	r0, r7
   151f4:	mov	r1, r8
   151f8:	bl	2c1b4 <__assert_fail@plt+0x1af58>
   151fc:	mov	r1, r8
   15200:	mov	r6, r0
   15204:	mov	r0, r7
   15208:	bl	2c3a0 <__assert_fail@plt+0x1b144>
   1520c:	ldr	r3, [pc, #276]	; 15328 <__assert_fail@plt+0x40cc>
   15210:	and	r2, r4, r3
   15214:	mul	r2, r6, r2
   15218:	orr	r1, r3, r1, lsl #16
   1521c:	cmp	r1, r2
   15220:	bcs	1524c <__assert_fail@plt+0x3ff0>
   15224:	add	r1, r1, r4
   15228:	cmp	r2, r1
   1522c:	movhi	r3, #1
   15230:	movls	r3, #0
   15234:	cmp	r4, r1
   15238:	movhi	r3, #0
   1523c:	cmp	r3, #0
   15240:	subeq	r6, r6, #1
   15244:	subne	r6, r6, #2
   15248:	addne	r1, r1, r4
   1524c:	sub	r1, r1, r2
   15250:	lsr	r2, r1, #16
   15254:	lsl	r3, r1, #16
   15258:	mla	r1, r6, r2, r1
   1525c:	add	r3, r3, #65280	; 0xff00
   15260:	add	r3, r3, #255	; 0xff
   15264:	lsr	r2, r1, #16
   15268:	add	r0, r2, #1
   1526c:	mul	ip, r0, r4
   15270:	sub	r3, r3, ip
   15274:	cmp	r3, r1, lsl #16
   15278:	addcs	r3, r3, r4
   1527c:	movcs	r0, r2
   15280:	add	r0, r0, r6, lsl #16
   15284:	cmp	r3, r4
   15288:	addcs	r0, r0, #1
   1528c:	subcs	r3, r3, r4
   15290:	cmp	r5, #0
   15294:	popeq	{r4, r5, r6, r7, r8, pc}
   15298:	mvn	r3, r3
   1529c:	adds	r3, r5, r3
   152a0:	bcc	152b8 <__assert_fail@plt+0x405c>
   152a4:	cmp	r4, r3
   152a8:	subls	r3, r3, r4
   152ac:	subhi	r0, r0, #1
   152b0:	subls	r0, r0, #2
   152b4:	sub	r3, r3, r4
   152b8:	ldr	r2, [pc, #104]	; 15328 <__assert_fail@plt+0x40cc>
   152bc:	lsr	r1, r5, #16
   152c0:	and	ip, r0, r2
   152c4:	and	r2, r2, r5
   152c8:	mul	r6, ip, r1
   152cc:	mov	lr, r1
   152d0:	lsr	r1, r0, #16
   152d4:	mul	ip, ip, r2
   152d8:	mla	r2, r1, r2, r6
   152dc:	mul	r1, r1, lr
   152e0:	add	r2, r2, ip, lsr #16
   152e4:	cmp	r6, r2
   152e8:	addhi	r1, r1, #65536	; 0x10000
   152ec:	add	r1, r1, r2, lsr #16
   152f0:	adds	r3, r3, r1
   152f4:	popcc	{r4, r5, r6, r7, r8, pc}
   152f8:	uxth	ip, ip
   152fc:	add	r2, ip, r2, lsl #16
   15300:	cmp	r5, r2
   15304:	movcs	r5, #0
   15308:	movcc	r5, #1
   1530c:	cmp	r4, r3
   15310:	movne	r5, #0
   15314:	andeq	r5, r5, #1
   15318:	orrcc	r5, r5, #1
   1531c:	sub	r0, r0, #1
   15320:	sub	r0, r0, r5
   15324:	pop	{r4, r5, r6, r7, r8, pc}
   15328:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1532c:	cmp	r1, #0
   15330:	push	{r4, lr}
   15334:	beq	1538c <__assert_fail@plt+0x4130>
   15338:	ands	r2, r1, #-16777216	; 0xff000000
   1533c:	mov	r4, r0
   15340:	mov	r3, r1
   15344:	movne	r2, #0
   15348:	bne	1535c <__assert_fail@plt+0x4100>
   1534c:	lsl	r3, r3, #8
   15350:	tst	r3, #-16777216	; 0xff000000
   15354:	add	r2, r2, #8
   15358:	beq	1534c <__assert_fail@plt+0x40f0>
   1535c:	cmp	r3, #0
   15360:	blt	15370 <__assert_fail@plt+0x4114>
   15364:	lsls	r3, r3, #1
   15368:	add	r2, r2, #1
   1536c:	bpl	15364 <__assert_fail@plt+0x4108>
   15370:	lsl	r0, r1, r2
   15374:	str	r2, [r4]
   15378:	str	r0, [r4, #4]
   1537c:	mov	r1, #0
   15380:	bl	151dc <__assert_fail@plt+0x3f80>
   15384:	str	r0, [r4, #12]
   15388:	pop	{r4, pc}
   1538c:	ldr	r3, [pc, #12]	; 153a0 <__assert_fail@plt+0x4144>
   15390:	ldr	r2, [pc, #12]	; 153a4 <__assert_fail@plt+0x4148>
   15394:	ldr	r1, [pc, #12]	; 153a8 <__assert_fail@plt+0x414c>
   15398:	ldr	r0, [pc, #12]	; 153ac <__assert_fail@plt+0x4150>
   1539c:	bl	1125c <__assert_fail@plt>
   153a0:			; <UNDEFINED> instruction: 0x0002d3b0
   153a4:	andeq	r0, r0, r6, lsl #7
   153a8:	andeq	sp, r2, r8, ror r5
   153ac:	andeq	sp, r2, r0, ror #15
   153b0:	push	{r4, r5, r6, r7, r8, r9, lr}
   153b4:	sub	sp, sp, #36	; 0x24
   153b8:	mov	r7, r0
   153bc:	ldr	r8, [sp, #64]	; 0x40
   153c0:	mov	r0, sp
   153c4:	mov	r5, r2
   153c8:	mov	r9, r3
   153cc:	bl	1532c <__assert_fail@plt+0x40d0>
   153d0:	cmp	r8, #1
   153d4:	movle	r4, #0
   153d8:	ble	15458 <__assert_fail@plt+0x41fc>
   153dc:	add	r0, sp, #16
   153e0:	ldr	r1, [r5, #4]
   153e4:	bl	1532c <__assert_fail@plt+0x40d0>
   153e8:	mov	r4, #0
   153ec:	mov	r6, r4
   153f0:	mov	r2, r8
   153f4:	add	r3, sp, #16
   153f8:	mov	r1, r9
   153fc:	mov	r0, r9
   15400:	bl	145b4 <__assert_fail@plt+0x3358>
   15404:	sub	r3, r8, #-1073741823	; 0xc0000001
   15408:	mov	r2, sp
   1540c:	ldr	r3, [r9, r3, lsl #2]
   15410:	cmp	r3, #0
   15414:	subeq	r8, r8, #1
   15418:	mov	r1, r0
   1541c:	add	r0, r7, r4
   15420:	bl	13344 <__assert_fail@plt+0x20e8>
   15424:	ldr	r3, [r5]
   15428:	cmp	r0, r3
   1542c:	add	r4, r4, r0
   15430:	bcs	15450 <__assert_fail@plt+0x41f4>
   15434:	add	r3, r7, r4
   15438:	strb	r6, [r3], #1
   1543c:	ldr	r2, [r5]
   15440:	add	r0, r0, #1
   15444:	cmp	r2, r0
   15448:	add	r4, r4, #1
   1544c:	bhi	15438 <__assert_fail@plt+0x41dc>
   15450:	cmp	r8, #1
   15454:	bne	153f0 <__assert_fail@plt+0x4194>
   15458:	mov	r2, sp
   1545c:	ldr	r1, [r9]
   15460:	add	r0, r7, r4
   15464:	bl	13344 <__assert_fail@plt+0x20e8>
   15468:	add	r0, r4, r0
   1546c:	cmp	r0, #1
   15470:	bls	1549c <__assert_fail@plt+0x4240>
   15474:	sub	ip, r0, #2
   15478:	sub	r3, r7, #1
   1547c:	add	ip, r7, ip, lsr #1
   15480:	add	r7, r7, r0
   15484:	ldrb	r1, [r7, #-1]
   15488:	ldrb	r2, [r3, #1]
   1548c:	strb	r1, [r3, #1]!
   15490:	cmp	r3, ip
   15494:	strb	r2, [r7, #-1]!
   15498:	bne	15484 <__assert_fail@plt+0x4228>
   1549c:	add	sp, sp, #36	; 0x24
   154a0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   154a4:	cmp	r2, #0
   154a8:	push	{r4, lr}
   154ac:	ble	15600 <__assert_fail@plt+0x43a4>
   154b0:	cmp	r2, #1
   154b4:	beq	15540 <__assert_fail@plt+0x42e4>
   154b8:	cmp	r2, #2
   154bc:	mov	r4, r0
   154c0:	beq	1554c <__assert_fail@plt+0x42f0>
   154c4:	sub	r2, r2, #-1073741823	; 0xc0000001
   154c8:	ldr	r0, [r1, r2, lsl #2]
   154cc:	add	ip, r1, r2, lsl #2
   154d0:	cmp	r0, #0
   154d4:	ldr	r1, [ip, #-4]
   154d8:	beq	155ec <__assert_fail@plt+0x4390>
   154dc:	ands	r2, r0, #-16777216	; 0xff000000
   154e0:	moveq	r3, r0
   154e4:	bne	155a8 <__assert_fail@plt+0x434c>
   154e8:	lsl	r3, r3, #8
   154ec:	tst	r3, #-16777216	; 0xff000000
   154f0:	add	r2, r2, #8
   154f4:	beq	154e8 <__assert_fail@plt+0x428c>
   154f8:	cmp	r3, #0
   154fc:	blt	1550c <__assert_fail@plt+0x42b0>
   15500:	lsls	r3, r3, #1
   15504:	add	r2, r2, #1
   15508:	bpl	15500 <__assert_fail@plt+0x42a4>
   1550c:	cmp	r2, #0
   15510:	str	r2, [r4]
   15514:	beq	15530 <__assert_fail@plt+0x42d4>
   15518:	ldr	ip, [ip, #-8]
   1551c:	rsb	r3, r2, #32
   15520:	lsr	ip, ip, r3
   15524:	lsr	r3, r1, r3
   15528:	orr	r1, ip, r1, lsl r2
   1552c:	orr	r0, r3, r0, lsl r2
   15530:	stmib	r4, {r0, r1}
   15534:	bl	151dc <__assert_fail@plt+0x3f80>
   15538:	str	r0, [r4, #12]
   1553c:	pop	{r4, pc}
   15540:	ldr	r1, [r1]
   15544:	pop	{r4, lr}
   15548:	b	1532c <__assert_fail@plt+0x40d0>
   1554c:	ldr	r0, [r1, #4]
   15550:	ldr	r1, [r1]
   15554:	cmp	r0, #0
   15558:	beq	155d8 <__assert_fail@plt+0x437c>
   1555c:	ands	r2, r0, #-16777216	; 0xff000000
   15560:	moveq	r3, r0
   15564:	bne	155c4 <__assert_fail@plt+0x4368>
   15568:	lsl	r3, r3, #8
   1556c:	tst	r3, #-16777216	; 0xff000000
   15570:	add	r2, r2, #8
   15574:	beq	15568 <__assert_fail@plt+0x430c>
   15578:	cmp	r3, #0
   1557c:	blt	1558c <__assert_fail@plt+0x4330>
   15580:	lsls	r3, r3, #1
   15584:	add	r2, r2, #1
   15588:	bpl	15580 <__assert_fail@plt+0x4324>
   1558c:	cmp	r2, #0
   15590:	str	r2, [r4]
   15594:	lslne	r0, r0, r2
   15598:	rsbne	r3, r2, #32
   1559c:	orrne	r0, r0, r1, lsr r3
   155a0:	lslne	r1, r1, r2
   155a4:	b	15530 <__assert_fail@plt+0x42d4>
   155a8:	cmp	r0, #0
   155ac:	movge	r3, r0
   155b0:	movge	r2, #0
   155b4:	bge	15500 <__assert_fail@plt+0x42a4>
   155b8:	mov	r3, #0
   155bc:	str	r3, [r4]
   155c0:	b	15530 <__assert_fail@plt+0x42d4>
   155c4:	cmp	r0, #0
   155c8:	movge	r3, r0
   155cc:	movge	r2, #0
   155d0:	bge	15580 <__assert_fail@plt+0x4324>
   155d4:	b	155b8 <__assert_fail@plt+0x435c>
   155d8:	ldr	r3, [pc, #52]	; 15614 <__assert_fail@plt+0x43b8>
   155dc:	ldr	r2, [pc, #52]	; 15618 <__assert_fail@plt+0x43bc>
   155e0:	ldr	r1, [pc, #52]	; 1561c <__assert_fail@plt+0x43c0>
   155e4:	ldr	r0, [pc, #52]	; 15620 <__assert_fail@plt+0x43c4>
   155e8:	bl	1125c <__assert_fail@plt>
   155ec:	ldr	r3, [pc, #48]	; 15624 <__assert_fail@plt+0x43c8>
   155f0:	ldr	r2, [pc, #48]	; 15628 <__assert_fail@plt+0x43cc>
   155f4:	ldr	r1, [pc, #32]	; 1561c <__assert_fail@plt+0x43c0>
   155f8:	ldr	r0, [pc, #32]	; 15620 <__assert_fail@plt+0x43c4>
   155fc:	bl	1125c <__assert_fail@plt>
   15600:	ldr	r3, [pc, #28]	; 15624 <__assert_fail@plt+0x43c8>
   15604:	mov	r2, #932	; 0x3a4
   15608:	ldr	r1, [pc, #12]	; 1561c <__assert_fail@plt+0x43c0>
   1560c:	ldr	r0, [pc, #24]	; 1562c <__assert_fail@plt+0x43d0>
   15610:	bl	1125c <__assert_fail@plt>
   15614:	ldrdeq	sp, [r2], -r8
   15618:	muleq	r0, r3, r3
   1561c:	andeq	sp, r2, r8, ror r5
   15620:	andeq	sp, r2, r8, ror #15
   15624:	andeq	sp, r2, r4, asr #7
   15628:			; <UNDEFINED> instruction: 0x000003b1
   1562c:	andeq	sp, r2, r0, lsl r7
   15630:	push	{r4, r5, r6, r7, lr}
   15634:	subs	r6, r3, #0
   15638:	sub	sp, sp, #20
   1563c:	ble	156e8 <__assert_fail@plt+0x448c>
   15640:	sub	r3, r6, #-1073741823	; 0xc0000001
   15644:	mov	r5, r2
   15648:	ldr	r3, [r2, r3, lsl #2]
   1564c:	cmp	r3, #0
   15650:	beq	156d4 <__assert_fail@plt+0x4478>
   15654:	mov	r7, r0
   15658:	mov	r0, r1
   1565c:	mov	r4, r1
   15660:	bl	130f0 <__assert_fail@plt+0x1e94>
   15664:	subs	r1, r0, #0
   15668:	bne	156c0 <__assert_fail@plt+0x4464>
   1566c:	mov	r1, r4
   15670:	mvn	r0, #0
   15674:	bl	2c1b4 <__assert_fail@plt+0x1af58>
   15678:	mov	ip, r4
   1567c:	mov	lr, #1
   15680:	cmp	r4, r0
   15684:	bhi	15698 <__assert_fail@plt+0x443c>
   15688:	mul	ip, r4, ip
   1568c:	add	lr, lr, #1
   15690:	cmp	r0, ip
   15694:	bcs	15688 <__assert_fail@plt+0x442c>
   15698:	str	r6, [sp]
   1569c:	mov	r3, r5
   156a0:	mov	r1, r4
   156a4:	mov	r0, r7
   156a8:	add	r2, sp, #8
   156ac:	str	lr, [sp, #8]
   156b0:	str	ip, [sp, #12]
   156b4:	bl	153b0 <__assert_fail@plt+0x4154>
   156b8:	add	sp, sp, #20
   156bc:	pop	{r4, r5, r6, r7, pc}
   156c0:	mov	r3, r6
   156c4:	mov	r0, r7
   156c8:	bl	13520 <__assert_fail@plt+0x22c4>
   156cc:	add	sp, sp, #20
   156d0:	pop	{r4, r5, r6, r7, pc}
   156d4:	ldr	r3, [pc, #32]	; 156fc <__assert_fail@plt+0x44a0>
   156d8:	ldr	r2, [pc, #32]	; 15700 <__assert_fail@plt+0x44a4>
   156dc:	ldr	r1, [pc, #32]	; 15704 <__assert_fail@plt+0x44a8>
   156e0:	ldr	r0, [pc, #32]	; 15708 <__assert_fail@plt+0x44ac>
   156e4:	bl	1125c <__assert_fail@plt>
   156e8:	ldr	r3, [pc, #12]	; 156fc <__assert_fail@plt+0x44a0>
   156ec:	ldr	r2, [pc, #24]	; 1570c <__assert_fail@plt+0x44b0>
   156f0:	ldr	r1, [pc, #12]	; 15704 <__assert_fail@plt+0x44a8>
   156f4:	ldr	r0, [pc, #20]	; 15710 <__assert_fail@plt+0x44b4>
   156f8:	bl	1125c <__assert_fail@plt>
   156fc:	andeq	sp, r2, ip, ror #7
   15700:	andeq	r0, r0, r5, lsr #10
   15704:	andeq	sp, r2, r8, ror r5
   15708:	strdeq	sp, [r2], -r8
   1570c:	andeq	r0, r0, r4, lsr #10
   15710:	strdeq	sp, [r2], -r0
   15714:	push	{r4, r5, r6, r7, r8, lr}
   15718:	subs	r5, r2, #0
   1571c:	sub	sp, sp, #16
   15720:	moveq	r0, r5
   15724:	beq	15794 <__assert_fail@plt+0x4538>
   15728:	mov	r7, r0
   1572c:	mov	r0, r3
   15730:	mov	r4, r3
   15734:	mov	r6, r1
   15738:	bl	130f0 <__assert_fail@plt+0x1e94>
   1573c:	subs	r3, r0, #0
   15740:	bne	1579c <__assert_fail@plt+0x4540>
   15744:	mov	r1, r4
   15748:	mvn	r0, #0
   1574c:	bl	2c1b4 <__assert_fail@plt+0x1af58>
   15750:	mov	ip, r4
   15754:	mov	lr, #1
   15758:	cmp	r4, r0
   1575c:	bhi	15770 <__assert_fail@plt+0x4514>
   15760:	mul	ip, r4, ip
   15764:	add	lr, lr, #1
   15768:	cmp	r0, ip
   1576c:	bcs	15760 <__assert_fail@plt+0x4504>
   15770:	add	r8, sp, #8
   15774:	mov	r3, r4
   15778:	mov	r2, r5
   1577c:	mov	r1, r6
   15780:	mov	r0, r7
   15784:	str	r8, [sp]
   15788:	str	lr, [sp, #8]
   1578c:	str	ip, [sp, #12]
   15790:	bl	140d4 <__assert_fail@plt+0x2e78>
   15794:	add	sp, sp, #16
   15798:	pop	{r4, r5, r6, r7, r8, pc}
   1579c:	mov	r2, r5
   157a0:	mov	r0, r7
   157a4:	bl	13180 <__assert_fail@plt+0x1f24>
   157a8:	add	sp, sp, #16
   157ac:	pop	{r4, r5, r6, r7, r8, pc}
   157b0:	ldr	r2, [pc, #16]	; 157c8 <__assert_fail@plt+0x456c>
   157b4:	mov	r3, #0
   157b8:	str	r2, [r0, #8]
   157bc:	str	r3, [r0]
   157c0:	str	r3, [r0, #4]
   157c4:	bx	lr
   157c8:	strdeq	sp, [r2], -r8
   157cc:	cmp	r1, #0
   157d0:	subne	r1, r1, #1
   157d4:	ldr	r3, [pc, #44]	; 15808 <__assert_fail@plt+0x45ac>
   157d8:	lsr	r1, r1, #5
   157dc:	push	{r4, lr}
   157e0:	add	r1, r1, #1
   157e4:	mov	r4, r0
   157e8:	mov	r2, #0
   157ec:	str	r1, [r0]
   157f0:	ldr	r3, [r3, #4]
   157f4:	lsl	r0, r1, #2
   157f8:	str	r2, [r4, #4]
   157fc:	blx	r3
   15800:	str	r0, [r4, #8]
   15804:	pop	{r4, pc}
   15808:	andeq	pc, r3, r8, lsr #2
   1580c:	ldr	r1, [r0]
   15810:	cmp	r1, #0
   15814:	bxeq	lr
   15818:	ldr	r3, [pc, #12]	; 1582c <__assert_fail@plt+0x45d0>
   1581c:	lsl	r1, r1, #2
   15820:	ldr	r0, [r0, #8]
   15824:	ldr	r3, [r3, #8]
   15828:	bx	r3
   1582c:	andeq	pc, r3, r8, lsr #2
   15830:	subs	r3, r1, #0
   15834:	blt	15844 <__assert_fail@plt+0x45e8>
   15838:	bne	15870 <__assert_fail@plt+0x4614>
   1583c:	str	r3, [r0, #4]
   15840:	bx	lr
   15844:	ldr	r1, [r0]
   15848:	push	{r4, lr}
   1584c:	cmp	r1, #0
   15850:	mov	r4, r3
   15854:	mvn	r3, #0
   15858:	str	r3, [r0, #4]
   1585c:	ldrgt	r0, [r0, #8]
   15860:	ble	15874 <__assert_fail@plt+0x4618>
   15864:	rsb	r3, r4, #0
   15868:	str	r3, [r0]
   1586c:	pop	{r4, pc}
   15870:	b	137f8 <__assert_fail@plt+0x259c>
   15874:	mov	r1, #1
   15878:	bl	13440 <__assert_fail@plt+0x21e4>
   1587c:	b	15864 <__assert_fail@plt+0x4608>
   15880:	subs	r2, r1, #0
   15884:	beq	1588c <__assert_fail@plt+0x4630>
   15888:	b	137f8 <__assert_fail@plt+0x259c>
   1588c:	str	r2, [r0, #4]
   15890:	bx	lr
   15894:	cmp	r0, r1
   15898:	bxeq	lr
   1589c:	push	{r4, r5, r6, r7, r8, lr}
   158a0:	mov	r5, r0
   158a4:	ldr	r7, [r1, #4]
   158a8:	ldr	r3, [r0]
   158ac:	mov	r6, r1
   158b0:	eor	r4, r7, r7, asr #31
   158b4:	sub	r4, r4, r7, asr #31
   158b8:	cmp	r4, r3
   158bc:	bgt	158f4 <__assert_fail@plt+0x4698>
   158c0:	ldr	r0, [r0, #8]
   158c4:	mov	lr, r7
   158c8:	ldr	r3, [r6, #8]
   158cc:	cmp	r7, #0
   158d0:	addne	ip, r3, r4, lsl #2
   158d4:	subne	r2, r0, #4
   158d8:	beq	158ec <__assert_fail@plt+0x4690>
   158dc:	ldr	r1, [r3], #4
   158e0:	cmp	r3, ip
   158e4:	str	r1, [r2, #4]!
   158e8:	bne	158dc <__assert_fail@plt+0x4680>
   158ec:	str	lr, [r5, #4]
   158f0:	pop	{r4, r5, r6, r7, r8, pc}
   158f4:	mov	r1, r4
   158f8:	bl	13440 <__assert_fail@plt+0x21e4>
   158fc:	ldr	lr, [r6, #4]
   15900:	b	158c8 <__assert_fail@plt+0x466c>
   15904:	ldr	ip, [pc, #16]	; 1591c <__assert_fail@plt+0x46c0>
   15908:	mov	r2, #0
   1590c:	str	ip, [r0, #8]
   15910:	str	r2, [r0]
   15914:	str	r2, [r0, #4]
   15918:	b	15830 <__assert_fail@plt+0x45d4>
   1591c:	strdeq	sp, [r2], -r8
   15920:	ldr	ip, [pc, #24]	; 15940 <__assert_fail@plt+0x46e4>
   15924:	cmp	r1, #0
   15928:	mov	r2, #0
   1592c:	str	ip, [r0, #8]
   15930:	str	r2, [r0]
   15934:	str	r2, [r0, #4]
   15938:	bxeq	lr
   1593c:	b	137f8 <__assert_fail@plt+0x259c>
   15940:	strdeq	sp, [r2], -r8
   15944:	ldr	ip, [pc, #16]	; 1595c <__assert_fail@plt+0x4700>
   15948:	mov	r2, #0
   1594c:	str	ip, [r0, #8]
   15950:	str	r2, [r0]
   15954:	str	r2, [r0, #4]
   15958:	b	15894 <__assert_fail@plt+0x4638>
   1595c:	strdeq	sp, [r2], -r8
   15960:	ldr	r0, [r0, #4]
   15964:	cmp	r0, #1
   15968:	movhi	r0, #0
   1596c:	movls	r0, #1
   15970:	bx	lr
   15974:	ldr	r3, [r0, #4]
   15978:	cmp	r3, #0
   1597c:	blt	159c4 <__assert_fail@plt+0x4768>
   15980:	cmp	r3, #1
   15984:	ble	15990 <__assert_fail@plt+0x4734>
   15988:	mov	r0, #0
   1598c:	bx	lr
   15990:	cmp	r3, #0
   15994:	beq	159bc <__assert_fail@plt+0x4760>
   15998:	ldr	r3, [r0, #8]
   1599c:	ldr	r3, [r3]
   159a0:	cmn	r3, #-2147483646	; 0x80000002
   159a4:	movhi	r0, #0
   159a8:	movls	r0, #1
   159ac:	rsb	r0, r0, r3, lsr #31
   159b0:	subs	r0, r0, #1
   159b4:	movne	r0, #1
   159b8:	bx	lr
   159bc:	mov	r0, #1
   159c0:	bx	lr
   159c4:	cmn	r3, #1
   159c8:	bne	15988 <__assert_fail@plt+0x472c>
   159cc:	ldr	r3, [r0, #8]
   159d0:	ldr	r3, [r3]
   159d4:	mvn	r0, r3
   159d8:	lsr	r0, r0, #31
   159dc:	cmp	r3, #-2147483648	; 0x80000000
   159e0:	rsbls	r0, r0, #0
   159e4:	rsbhi	r0, r0, #1
   159e8:	subs	r0, r0, #1
   159ec:	movne	r0, #1
   159f0:	bx	lr
   159f4:	b	15974 <__assert_fail@plt+0x4718>
   159f8:	ldr	r0, [r0, #4]
   159fc:	cmp	r0, #1
   15a00:	movhi	r0, #0
   15a04:	movls	r0, #1
   15a08:	bx	lr
   15a0c:	ldr	r3, [r0, #4]
   15a10:	cmp	r3, #0
   15a14:	blt	15a68 <__assert_fail@plt+0x480c>
   15a18:	cmp	r3, #1
   15a1c:	ble	15a28 <__assert_fail@plt+0x47cc>
   15a20:	mov	r0, #0
   15a24:	bx	lr
   15a28:	cmp	r3, #0
   15a2c:	beq	15a60 <__assert_fail@plt+0x4804>
   15a30:	ldr	r3, [r0, #8]
   15a34:	ldr	r0, [pc, #96]	; 15a9c <__assert_fail@plt+0x4840>
   15a38:	ldr	r3, [r3]
   15a3c:	cmp	r3, r0
   15a40:	movhi	r0, #0
   15a44:	movls	r0, #1
   15a48:	cmp	r3, #32768	; 0x8000
   15a4c:	rsbcc	r0, r0, #0
   15a50:	rsbcs	r0, r0, #1
   15a54:	subs	r0, r0, #1
   15a58:	movne	r0, #1
   15a5c:	bx	lr
   15a60:	mov	r0, #1
   15a64:	bx	lr
   15a68:	cmn	r3, #1
   15a6c:	bne	15a20 <__assert_fail@plt+0x47c4>
   15a70:	ldr	r3, [r0, #8]
   15a74:	ldr	r3, [r3]
   15a78:	cmp	r3, #32768	; 0x8000
   15a7c:	movcs	r0, #0
   15a80:	movcc	r0, #1
   15a84:	cmp	r3, #32768	; 0x8000
   15a88:	rsbls	r0, r0, #0
   15a8c:	rsbhi	r0, r0, #1
   15a90:	subs	r0, r0, #1
   15a94:	movne	r0, #1
   15a98:	bx	lr
   15a9c:	strdeq	r7, [r0], -lr
   15aa0:	ldr	r3, [r0, #4]
   15aa4:	cmp	r3, #0
   15aa8:	blt	15ab4 <__assert_fail@plt+0x4858>
   15aac:	cmp	r3, #1
   15ab0:	ble	15abc <__assert_fail@plt+0x4860>
   15ab4:	mov	r0, #0
   15ab8:	bx	lr
   15abc:	cmp	r3, #0
   15ac0:	bne	15acc <__assert_fail@plt+0x4870>
   15ac4:	mov	r0, #1
   15ac8:	bx	lr
   15acc:	ldr	r3, [r0, #8]
   15ad0:	ldr	r0, [pc, #36]	; 15afc <__assert_fail@plt+0x48a0>
   15ad4:	ldr	r3, [r3]
   15ad8:	cmp	r3, r0
   15adc:	movhi	r0, #0
   15ae0:	movls	r0, #1
   15ae4:	cmp	r3, #65536	; 0x10000
   15ae8:	rsbcc	r0, r0, #0
   15aec:	rsbcs	r0, r0, #1
   15af0:	subs	r0, r0, #1
   15af4:	movne	r0, #1
   15af8:	bx	lr
   15afc:	strdeq	pc, [r0], -lr
   15b00:	ldr	r3, [r0, #4]
   15b04:	cmp	r3, #0
   15b08:	beq	15b24 <__assert_fail@plt+0x48c8>
   15b0c:	ldr	r3, [r0, #8]
   15b10:	ldr	r0, [r3]
   15b14:	rsblt	r0, r0, #0
   15b18:	bicge	r0, r0, #-2147483648	; 0x80000000
   15b1c:	orrlt	r0, r0, #-2147483648	; 0x80000000
   15b20:	bx	lr
   15b24:	mov	r0, r3
   15b28:	bx	lr
   15b2c:	ldr	r3, [r0, #4]
   15b30:	cmp	r3, #0
   15b34:	ldrne	r3, [r0, #8]
   15b38:	ldrne	r0, [r3]
   15b3c:	moveq	r0, r3
   15b40:	bx	lr
   15b44:	ldr	r0, [r0, #4]
   15b48:	cmp	r0, #0
   15b4c:	rsblt	r0, r0, #0
   15b50:	bx	lr
   15b54:	cmp	r1, #0
   15b58:	blt	15b7c <__assert_fail@plt+0x4920>
   15b5c:	ldr	r3, [r0, #4]
   15b60:	cmp	r3, #0
   15b64:	rsblt	r3, r3, #0
   15b68:	cmp	r1, r3
   15b6c:	bge	15b7c <__assert_fail@plt+0x4920>
   15b70:	ldr	r3, [r0, #8]
   15b74:	ldr	r0, [r3, r1, lsl #2]
   15b78:	bx	lr
   15b7c:	mov	r0, #0
   15b80:	bx	lr
   15b84:	cmp	r1, #0
   15b88:	subne	r1, r1, #1
   15b8c:	lsr	r1, r1, #5
   15b90:	add	r1, r1, #1
   15b94:	b	13440 <__assert_fail@plt+0x21e4>
   15b98:	ldr	r0, [r0, #8]
   15b9c:	bx	lr
   15ba0:	subs	r2, r1, #0
   15ba4:	ble	15bc0 <__assert_fail@plt+0x4964>
   15ba8:	ldr	ip, [r0]
   15bac:	cmp	r2, ip
   15bb0:	bgt	15bbc <__assert_fail@plt+0x4960>
   15bb4:	ldr	r0, [r0, #8]
   15bb8:	bx	lr
   15bbc:	b	13440 <__assert_fail@plt+0x21e4>
   15bc0:	push	{r4, lr}
   15bc4:	ldr	r3, [pc, #12]	; 15bd8 <__assert_fail@plt+0x497c>
   15bc8:	ldr	r2, [pc, #12]	; 15bdc <__assert_fail@plt+0x4980>
   15bcc:	ldr	r1, [pc, #12]	; 15be0 <__assert_fail@plt+0x4984>
   15bd0:	ldr	r0, [pc, #12]	; 15be4 <__assert_fail@plt+0x4988>
   15bd4:	bl	1125c <__assert_fail@plt>
   15bd8:	strdeq	sp, [r2], -ip
   15bdc:	andeq	r0, r0, pc, ror r6
   15be0:	andeq	sp, r2, r8, ror r5
   15be4:	andeq	sp, r2, ip, lsr r6
   15be8:	b	15ba0 <__assert_fail@plt+0x4944>
   15bec:	eor	r3, r1, r1, asr #31
   15bf0:	cmp	r1, #0
   15bf4:	sub	r3, r3, r1, asr #31
   15bf8:	ldr	r2, [r0, #8]
   15bfc:	beq	15c40 <__assert_fail@plt+0x49e4>
   15c00:	sub	ip, r3, #-1073741823	; 0xc0000001
   15c04:	push	{lr}		; (str lr, [sp, #-4]!)
   15c08:	ldr	lr, [r2, ip, lsl #2]
   15c0c:	add	r2, r2, ip, lsl #2
   15c10:	cmp	lr, #0
   15c14:	beq	15c28 <__assert_fail@plt+0x49cc>
   15c18:	b	15c30 <__assert_fail@plt+0x49d4>
   15c1c:	ldr	ip, [r2, #-4]!
   15c20:	cmp	ip, #0
   15c24:	bne	15c30 <__assert_fail@plt+0x49d4>
   15c28:	subs	r3, r3, #1
   15c2c:	bne	15c1c <__assert_fail@plt+0x49c0>
   15c30:	cmp	r1, #0
   15c34:	rsblt	r3, r3, #0
   15c38:	str	r3, [r0, #4]
   15c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c40:	str	r1, [r0, #4]
   15c44:	bx	lr
   15c48:	mov	ip, #0
   15c4c:	eor	r3, r2, r2, asr #31
   15c50:	cmp	r2, ip
   15c54:	sub	r3, r3, r2, asr #31
   15c58:	str	r1, [r0, #8]
   15c5c:	str	ip, [r0]
   15c60:	beq	15ca4 <__assert_fail@plt+0x4a48>
   15c64:	sub	ip, r3, #-1073741823	; 0xc0000001
   15c68:	push	{lr}		; (str lr, [sp, #-4]!)
   15c6c:	ldr	lr, [r1, ip, lsl #2]
   15c70:	add	r1, r1, ip, lsl #2
   15c74:	cmp	lr, #0
   15c78:	beq	15c8c <__assert_fail@plt+0x4a30>
   15c7c:	b	15c94 <__assert_fail@plt+0x4a38>
   15c80:	ldr	ip, [r1, #-4]!
   15c84:	cmp	ip, #0
   15c88:	bne	15c94 <__assert_fail@plt+0x4a38>
   15c8c:	subs	r3, r3, #1
   15c90:	bne	15c80 <__assert_fail@plt+0x4a24>
   15c94:	cmp	r2, #0
   15c98:	rsblt	r3, r3, #0
   15c9c:	str	r3, [r0, #4]
   15ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ca4:	str	r2, [r0, #4]
   15ca8:	bx	lr
   15cac:	vcmp.f64	d0, d0
   15cb0:	mov	r3, r0
   15cb4:	vmrs	APSR_nzcv, fpscr
   15cb8:	bne	15cd4 <__assert_fail@plt+0x4a78>
   15cbc:	vldr	d6, [pc, #28]	; 15ce0 <__assert_fail@plt+0x4a84>
   15cc0:	vmul.f64	d6, d0, d6
   15cc4:	vcmp.f64	d0, d6
   15cc8:	vmrs	APSR_nzcv, fpscr
   15ccc:	beq	15cd4 <__assert_fail@plt+0x4a78>
   15cd0:	b	13830 <__assert_fail@plt+0x25d4>
   15cd4:	mov	r2, #0
   15cd8:	str	r2, [r3, #4]
   15cdc:	bx	lr
   15ce0:	andeq	r0, r0, r0
   15ce4:	svccc	0x00e00000
   15ce8:	vcmp.f64	d0, d0
   15cec:	ldr	r1, [pc, #52]	; 15d28 <__assert_fail@plt+0x4acc>
   15cf0:	mov	r2, #0
   15cf4:	str	r1, [r0, #8]
   15cf8:	vmrs	APSR_nzcv, fpscr
   15cfc:	str	r2, [r0]
   15d00:	str	r2, [r0, #4]
   15d04:	bxne	lr
   15d08:	vldr	d6, [pc, #16]	; 15d20 <__assert_fail@plt+0x4ac4>
   15d0c:	vmul.f64	d6, d0, d6
   15d10:	vcmp.f64	d0, d6
   15d14:	vmrs	APSR_nzcv, fpscr
   15d18:	bxeq	lr
   15d1c:	b	13830 <__assert_fail@plt+0x25d4>
   15d20:	andeq	r0, r0, r0
   15d24:	svccc	0x00e00000
   15d28:	strdeq	sp, [r2], -r8
   15d2c:	push	{r4, lr}
   15d30:	ldr	lr, [r0, #4]
   15d34:	cmp	lr, #0
   15d38:	beq	15de4 <__assert_fail@plt+0x4b88>
   15d3c:	eor	r1, lr, lr, asr #31
   15d40:	ldr	ip, [r0, #8]
   15d44:	sub	r1, r1, lr, asr #31
   15d48:	sub	r1, r1, #1
   15d4c:	ldr	r0, [ip, r1, lsl #2]
   15d50:	ands	r3, r0, #-16777216	; 0xff000000
   15d54:	bne	15dec <__assert_fail@plt+0x4b90>
   15d58:	mov	r2, r0
   15d5c:	lsl	r2, r2, #8
   15d60:	tst	r2, #-16777216	; 0xff000000
   15d64:	add	r3, r3, #8
   15d68:	beq	15d5c <__assert_fail@plt+0x4b00>
   15d6c:	cmp	r2, #0
   15d70:	blt	15d80 <__assert_fail@plt+0x4b24>
   15d74:	lsls	r2, r2, #1
   15d78:	add	r3, r3, #1
   15d7c:	bpl	15d74 <__assert_fail@plt+0x4b18>
   15d80:	adds	r3, r3, #21
   15d84:	rsbmi	r2, r3, #0
   15d88:	mvnmi	r4, #0
   15d8c:	andmi	r0, r0, r4, lsl r2
   15d90:	vmov	s15, r0
   15d94:	vldr	d6, [pc, #108]	; 15e08 <__assert_fail@plt+0x4bac>
   15d98:	mvn	r4, #0
   15d9c:	vcvt.f64.u32	d0, s15
   15da0:	subs	r1, r1, #1
   15da4:	bcc	15dd8 <__assert_fail@plt+0x4b7c>
   15da8:	cmp	r3, #0
   15dac:	vmul.f64	d0, d0, d6
   15db0:	ble	15da0 <__assert_fail@plt+0x4b44>
   15db4:	subs	r3, r3, #32
   15db8:	ldr	r2, [ip, r1, lsl #2]
   15dbc:	rsbmi	r0, r3, #0
   15dc0:	andmi	r2, r2, r4, lsl r0
   15dc4:	subs	r1, r1, #1
   15dc8:	vmov	s15, r2
   15dcc:	vcvt.f64.u32	d7, s15
   15dd0:	vadd.f64	d0, d0, d7
   15dd4:	bcs	15da8 <__assert_fail@plt+0x4b4c>
   15dd8:	cmp	lr, #0
   15ddc:	vneglt.f64	d0, d0
   15de0:	pop	{r4, pc}
   15de4:	vldr	d0, [pc, #36]	; 15e10 <__assert_fail@plt+0x4bb4>
   15de8:	pop	{r4, pc}
   15dec:	cmp	r0, #0
   15df0:	movlt	r3, #21
   15df4:	blt	15d90 <__assert_fail@plt+0x4b34>
   15df8:	mov	r2, r0
   15dfc:	mov	r3, #0
   15e00:	b	15d74 <__assert_fail@plt+0x4b18>
   15e04:	nop			; (mov r0, r0)
   15e08:	andeq	r0, r0, r0
   15e0c:	mvnsmi	r0, r0
	...
   15e18:	vcmpe.f64	d0, #0.0
   15e1c:	ldr	r1, [r0, #4]
   15e20:	vmrs	APSR_nzcv, fpscr
   15e24:	vneglt.f64	d0, d0
   15e28:	cmp	r1, #0
   15e2c:	beq	15ec4 <__assert_fail@plt+0x4c68>
   15e30:	cmp	r1, #0
   15e34:	rsblt	r1, r1, #0
   15e38:	cmp	r1, #1
   15e3c:	beq	15e58 <__assert_fail@plt+0x4bfc>
   15e40:	vldr	d7, [pc, #160]	; 15ee8 <__assert_fail@plt+0x4c8c>
   15e44:	mov	r3, #1
   15e48:	add	r3, r3, #1
   15e4c:	cmp	r1, r3
   15e50:	vmul.f64	d0, d0, d7
   15e54:	bne	15e48 <__assert_fail@plt+0x4bec>
   15e58:	vldr	d6, [pc, #144]	; 15ef0 <__assert_fail@plt+0x4c94>
   15e5c:	vcmpe.f64	d0, d6
   15e60:	vmrs	APSR_nzcv, fpscr
   15e64:	bge	15ed8 <__assert_fail@plt+0x4c7c>
   15e68:	vcvt.u32.f64	s14, d0
   15e6c:	ldr	r2, [r0, #8]
   15e70:	sub	r3, r1, #1
   15e74:	ldr	r0, [r2, r3, lsl #2]
   15e78:	vmov	ip, s14
   15e7c:	cmp	ip, r0
   15e80:	bcc	15ee0 <__assert_fail@plt+0x4c84>
   15e84:	bhi	15ed8 <__assert_fail@plt+0x4c7c>
   15e88:	sub	r1, r1, #-1073741823	; 0xc0000001
   15e8c:	add	r2, r2, r1, lsl #2
   15e90:	b	15eac <__assert_fail@plt+0x4c50>
   15e94:	vcvt.u32.f64	s14, d0
   15e98:	ldr	r1, [r2, #-4]!
   15e9c:	vmov	r0, s14
   15ea0:	cmp	r0, r1
   15ea4:	bcc	15ee0 <__assert_fail@plt+0x4c84>
   15ea8:	bhi	15ed8 <__assert_fail@plt+0x4c7c>
   15eac:	vcvt.f64.u32	d7, s14
   15eb0:	sub	r3, r3, #1
   15eb4:	cmn	r3, #1
   15eb8:	vsub.f64	d0, d0, d7
   15ebc:	vmul.f64	d0, d0, d6
   15ec0:	bne	15e94 <__assert_fail@plt+0x4c38>
   15ec4:	vcmpe.f64	d0, #0.0
   15ec8:	vmrs	APSR_nzcv, fpscr
   15ecc:	mvngt	r0, #0
   15ed0:	movle	r0, #0
   15ed4:	bx	lr
   15ed8:	mvn	r0, #0
   15edc:	bx	lr
   15ee0:	mov	r0, #1
   15ee4:	bx	lr
   15ee8:	andeq	r0, r0, r0
   15eec:	ldclcc	0, cr0, [r0]
   15ef0:	andeq	r0, r0, r0
   15ef4:	mvnsmi	r0, r0
   15ef8:	ldr	r3, [r0, #4]
   15efc:	vcmpe.f64	d0, #0.0
   15f00:	cmp	r3, #0
   15f04:	blt	15f14 <__assert_fail@plt+0x4cb8>
   15f08:	vmrs	APSR_nzcv, fpscr
   15f0c:	bmi	15f2c <__assert_fail@plt+0x4cd0>
   15f10:	b	15e18 <__assert_fail@plt+0x4bbc>
   15f14:	vmrs	APSR_nzcv, fpscr
   15f18:	bge	15f34 <__assert_fail@plt+0x4cd8>
   15f1c:	push	{r4, lr}
   15f20:	bl	15e18 <__assert_fail@plt+0x4bbc>
   15f24:	rsb	r0, r0, #0
   15f28:	pop	{r4, pc}
   15f2c:	mov	r0, #1
   15f30:	bx	lr
   15f34:	mvn	r0, #0
   15f38:	bx	lr
   15f3c:	ldr	r3, [r0, #4]
   15f40:	lsr	r0, r3, #31
   15f44:	cmp	r3, #0
   15f48:	rsble	r0, r0, #0
   15f4c:	rsbgt	r0, r0, #1
   15f50:	bx	lr
   15f54:	cmp	r1, #0
   15f58:	ldr	r3, [r0, #4]
   15f5c:	blt	15fa8 <__assert_fail@plt+0x4d4c>
   15f60:	cmp	r3, #0
   15f64:	blt	15fb8 <__assert_fail@plt+0x4d5c>
   15f68:	cmp	r3, #1
   15f6c:	ble	15f78 <__assert_fail@plt+0x4d1c>
   15f70:	mov	r0, #1
   15f74:	bx	lr
   15f78:	cmp	r3, #0
   15f7c:	moveq	r0, r3
   15f80:	beq	15f98 <__assert_fail@plt+0x4d3c>
   15f84:	ldr	r3, [r0, #8]
   15f88:	ldr	r0, [r3]
   15f8c:	cmp	r1, r0
   15f90:	movcs	r3, #0
   15f94:	movcc	r3, #1
   15f98:	cmp	r1, r0
   15f9c:	movls	r0, r3
   15fa0:	subhi	r0, r3, #1
   15fa4:	bx	lr
   15fa8:	cmp	r3, #0
   15fac:	bge	15f70 <__assert_fail@plt+0x4d14>
   15fb0:	cmn	r3, #1
   15fb4:	beq	15fc0 <__assert_fail@plt+0x4d64>
   15fb8:	mvn	r0, #0
   15fbc:	bx	lr
   15fc0:	ldr	r3, [r0, #8]
   15fc4:	rsb	r1, r1, #0
   15fc8:	ldr	r3, [r3]
   15fcc:	cmp	r1, r3
   15fd0:	movls	r0, #0
   15fd4:	movhi	r0, #1
   15fd8:	cmp	r1, r3
   15fdc:	subcc	r0, r0, #1
   15fe0:	bx	lr
   15fe4:	ldr	r3, [r0, #4]
   15fe8:	cmp	r3, #0
   15fec:	blt	16034 <__assert_fail@plt+0x4dd8>
   15ff0:	cmp	r3, #1
   15ff4:	ble	16000 <__assert_fail@plt+0x4da4>
   15ff8:	mov	r0, #1
   15ffc:	bx	lr
   16000:	cmp	r3, #0
   16004:	moveq	r0, r3
   16008:	bne	1601c <__assert_fail@plt+0x4dc0>
   1600c:	cmp	r1, r0
   16010:	movls	r0, r3
   16014:	subhi	r0, r3, #1
   16018:	bx	lr
   1601c:	ldr	r3, [r0, #8]
   16020:	ldr	r0, [r3]
   16024:	cmp	r1, r0
   16028:	movcs	r3, #0
   1602c:	movcc	r3, #1
   16030:	b	1600c <__assert_fail@plt+0x4db0>
   16034:	mvn	r0, #0
   16038:	bx	lr
   1603c:	ldr	r3, [r0, #4]
   16040:	ldr	r2, [r1, #4]
   16044:	cmp	r3, r2
   16048:	beq	16058 <__assert_fail@plt+0x4dfc>
   1604c:	blt	1609c <__assert_fail@plt+0x4e40>
   16050:	mov	r0, #1
   16054:	bx	lr
   16058:	cmp	r3, #0
   1605c:	blt	160a4 <__assert_fail@plt+0x4e48>
   16060:	ldr	r2, [r1, #8]
   16064:	ldr	r0, [r0, #8]
   16068:	lsl	ip, r3, #2
   1606c:	add	r1, r0, ip
   16070:	add	r2, r2, ip
   16074:	b	16088 <__assert_fail@plt+0x4e2c>
   16078:	ldr	ip, [r1, #-4]!
   1607c:	ldr	r0, [r2, #-4]!
   16080:	cmp	ip, r0
   16084:	bne	16098 <__assert_fail@plt+0x4e3c>
   16088:	subs	r3, r3, #1
   1608c:	bcs	16078 <__assert_fail@plt+0x4e1c>
   16090:	mov	r0, #0
   16094:	bx	lr
   16098:	bhi	16050 <__assert_fail@plt+0x4df4>
   1609c:	mvn	r0, #0
   160a0:	bx	lr
   160a4:	rsb	ip, r3, r3, lsl #30
   160a8:	ldr	r2, [r0, #8]
   160ac:	ldr	r1, [r1, #8]
   160b0:	lsl	r0, ip, #2
   160b4:	add	r1, r1, r0
   160b8:	add	r2, r2, r0
   160bc:	rsb	r3, r3, #0
   160c0:	b	160d4 <__assert_fail@plt+0x4e78>
   160c4:	ldr	ip, [r1, #-4]!
   160c8:	ldr	r0, [r2, #-4]!
   160cc:	cmp	ip, r0
   160d0:	bne	16098 <__assert_fail@plt+0x4e3c>
   160d4:	subs	r3, r3, #1
   160d8:	bcs	160c4 <__assert_fail@plt+0x4e68>
   160dc:	b	16090 <__assert_fail@plt+0x4e34>
   160e0:	ldr	r3, [r0, #4]
   160e4:	eor	r2, r3, r3, asr #31
   160e8:	sub	r2, r2, r3, asr #31
   160ec:	cmp	r2, #1
   160f0:	ble	160fc <__assert_fail@plt+0x4ea0>
   160f4:	mov	r0, #1
   160f8:	bx	lr
   160fc:	cmp	r3, #0
   16100:	moveq	r0, r3
   16104:	bne	16118 <__assert_fail@plt+0x4ebc>
   16108:	cmp	r1, r0
   1610c:	movls	r0, r3
   16110:	subhi	r0, r3, #1
   16114:	bx	lr
   16118:	ldr	r3, [r0, #8]
   1611c:	ldr	r0, [r3]
   16120:	cmp	r1, r0
   16124:	movcs	r3, #0
   16128:	movcc	r3, #1
   1612c:	b	16108 <__assert_fail@plt+0x4eac>
   16130:	ldr	r3, [r0, #4]
   16134:	ldr	r2, [r1, #4]
   16138:	cmp	r3, #0
   1613c:	rsblt	r3, r3, #0
   16140:	cmp	r2, #0
   16144:	rsblt	r2, r2, #0
   16148:	cmp	r3, r2
   1614c:	beq	1615c <__assert_fail@plt+0x4f00>
   16150:	blt	16198 <__assert_fail@plt+0x4f3c>
   16154:	mov	r0, #1
   16158:	bx	lr
   1615c:	ldr	r2, [r1, #8]
   16160:	ldr	r0, [r0, #8]
   16164:	lsl	ip, r3, #2
   16168:	add	r1, r0, ip
   1616c:	add	r2, r2, ip
   16170:	b	16184 <__assert_fail@plt+0x4f28>
   16174:	ldr	ip, [r1, #-4]!
   16178:	ldr	r0, [r2, #-4]!
   1617c:	cmp	ip, r0
   16180:	bne	16194 <__assert_fail@plt+0x4f38>
   16184:	subs	r3, r3, #1
   16188:	bcs	16174 <__assert_fail@plt+0x4f18>
   1618c:	mov	r0, #0
   16190:	bx	lr
   16194:	bhi	16154 <__assert_fail@plt+0x4ef8>
   16198:	mvn	r0, #0
   1619c:	bx	lr
   161a0:	push	{r4, lr}
   161a4:	mov	r4, r0
   161a8:	bl	15894 <__assert_fail@plt+0x4638>
   161ac:	ldr	r3, [r4, #4]
   161b0:	cmp	r3, #0
   161b4:	rsblt	r3, r3, #0
   161b8:	str	r3, [r4, #4]
   161bc:	pop	{r4, pc}
   161c0:	push	{r4, lr}
   161c4:	mov	r4, r0
   161c8:	bl	15894 <__assert_fail@plt+0x4638>
   161cc:	ldr	r3, [r4, #4]
   161d0:	rsb	r3, r3, #0
   161d4:	str	r3, [r4, #4]
   161d8:	pop	{r4, pc}
   161dc:	ldr	ip, [r0]
   161e0:	ldr	r3, [r0, #8]
   161e4:	ldr	r2, [r1, #8]
   161e8:	push	{r4, r5, lr}
   161ec:	ldr	r4, [r0, #4]
   161f0:	ldr	r5, [r1, #4]
   161f4:	ldr	lr, [r1]
   161f8:	str	r5, [r0, #4]
   161fc:	str	r4, [r1, #4]
   16200:	str	lr, [r0]
   16204:	str	ip, [r1]
   16208:	str	r2, [r0, #8]
   1620c:	str	r3, [r1, #8]
   16210:	pop	{r4, r5, pc}
   16214:	push	{r4, r5, lr}
   16218:	mov	r4, r1
   1621c:	ldr	lr, [r1, #4]
   16220:	ldr	r3, [r2, #4]
   16224:	sub	sp, sp, #12
   16228:	teq	lr, r3
   1622c:	mov	r5, r0
   16230:	bmi	16250 <__assert_fail@plt+0x4ff4>
   16234:	bl	13c8c <__assert_fail@plt+0x2a30>
   16238:	ldr	r3, [r4, #4]
   1623c:	cmp	r3, #0
   16240:	rsblt	r0, r0, #0
   16244:	str	r0, [r5, #4]
   16248:	add	sp, sp, #12
   1624c:	pop	{r4, r5, pc}
   16250:	add	ip, r2, #8
   16254:	str	ip, [sp]
   16258:	mov	r1, lr
   1625c:	add	r2, r4, #8
   16260:	bl	13e78 <__assert_fail@plt+0x2c1c>
   16264:	b	16238 <__assert_fail@plt+0x4fdc>
   16268:	push	{r4, r5, r6, lr}
   1626c:	sub	sp, sp, #16
   16270:	ldr	ip, [pc, #104]	; 162e0 <__assert_fail@plt+0x5084>
   16274:	mov	r3, #0
   16278:	cmp	r2, #0
   1627c:	add	r4, sp, #4
   16280:	mov	r5, r0
   16284:	mov	r6, r1
   16288:	str	ip, [sp, #12]
   1628c:	str	r3, [sp, #4]
   16290:	str	r3, [sp, #8]
   16294:	bne	162d0 <__assert_fail@plt+0x5074>
   16298:	mov	r1, r6
   1629c:	mov	r2, r4
   162a0:	mov	r0, r5
   162a4:	bl	16214 <__assert_fail@plt+0x4fb8>
   162a8:	ldr	r1, [sp, #4]
   162ac:	cmp	r1, #0
   162b0:	beq	162c8 <__assert_fail@plt+0x506c>
   162b4:	ldr	r3, [pc, #40]	; 162e4 <__assert_fail@plt+0x5088>
   162b8:	lsl	r1, r1, #2
   162bc:	ldr	r0, [sp, #12]
   162c0:	ldr	r3, [r3, #8]
   162c4:	blx	r3
   162c8:	add	sp, sp, #16
   162cc:	pop	{r4, r5, r6, pc}
   162d0:	mov	r1, r2
   162d4:	mov	r0, r4
   162d8:	bl	137f8 <__assert_fail@plt+0x259c>
   162dc:	b	16298 <__assert_fail@plt+0x503c>
   162e0:	strdeq	sp, [r2], -r8
   162e4:	andeq	pc, r3, r8, lsr #2
   162e8:	push	{r4, r5, r6, lr}
   162ec:	mov	r4, r0
   162f0:	mov	r5, r1
   162f4:	mov	r1, r2
   162f8:	bl	15894 <__assert_fail@plt+0x4638>
   162fc:	ldr	r3, [r4, #4]
   16300:	mov	r2, r5
   16304:	rsb	r3, r3, #0
   16308:	str	r3, [r4, #4]
   1630c:	mov	r1, r4
   16310:	mov	r0, r4
   16314:	pop	{r4, r5, r6, lr}
   16318:	b	16268 <__assert_fail@plt+0x500c>
   1631c:	mov	r3, r2
   16320:	push	{r4, lr}
   16324:	mov	r2, r1
   16328:	mov	r4, r0
   1632c:	mov	r1, r3
   16330:	bl	162e8 <__assert_fail@plt+0x508c>
   16334:	mov	r1, r4
   16338:	mov	r0, r4
   1633c:	bl	15894 <__assert_fail@plt+0x4638>
   16340:	ldr	r3, [r4, #4]
   16344:	rsb	r3, r3, #0
   16348:	str	r3, [r4, #4]
   1634c:	pop	{r4, pc}
   16350:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16354:	subs	r7, r1, #0
   16358:	beq	16410 <__assert_fail@plt+0x51b4>
   1635c:	cmp	r7, #0
   16360:	ldr	r1, [sp, #40]	; 0x28
   16364:	mov	fp, r2
   16368:	eor	r5, r7, r7, asr #31
   1636c:	movle	r2, #0
   16370:	movgt	r2, #1
   16374:	lsr	ip, r3, #5
   16378:	sub	r5, r5, r7, asr #31
   1637c:	cmp	r1, r2
   16380:	mov	r6, r0
   16384:	sub	r5, r5, ip
   16388:	and	r9, r3, #31
   1638c:	mov	r1, ip
   16390:	beq	16418 <__assert_fail@plt+0x51bc>
   16394:	cmp	r5, #0
   16398:	ble	164dc <__assert_fail@plt+0x5280>
   1639c:	lsl	sl, ip, #2
   163a0:	mov	r8, #0
   163a4:	ldr	r3, [r6]
   163a8:	cmp	r5, r3
   163ac:	ldrle	r4, [r6, #8]
   163b0:	bgt	164c8 <__assert_fail@plt+0x526c>
   163b4:	cmp	r9, #0
   163b8:	bne	1649c <__assert_fail@plt+0x5240>
   163bc:	ldr	ip, [fp]
   163c0:	sub	r2, r4, #4
   163c4:	add	ip, ip, sl
   163c8:	mov	r3, r9
   163cc:	add	r3, r3, #1
   163d0:	ldr	r1, [ip], #4
   163d4:	cmp	r5, r3
   163d8:	str	r1, [r2, #4]!
   163dc:	bgt	163cc <__assert_fail@plt+0x5170>
   163e0:	cmp	r8, #0
   163e4:	str	r5, [r6, #4]
   163e8:	bne	16480 <__assert_fail@plt+0x5224>
   163ec:	cmp	r7, #0
   163f0:	popge	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163f4:	mov	r1, r6
   163f8:	mov	r0, r6
   163fc:	bl	15894 <__assert_fail@plt+0x4638>
   16400:	ldr	r3, [r6, #4]
   16404:	rsb	r3, r3, #0
   16408:	str	r3, [r6, #4]
   1640c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16410:	str	r7, [r0, #4]
   16414:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16418:	cmp	r5, #0
   1641c:	ble	16478 <__assert_fail@plt+0x521c>
   16420:	cmp	ip, #0
   16424:	ldr	r0, [fp]
   16428:	beq	1645c <__assert_fail@plt+0x5200>
   1642c:	sub	sl, ip, #-1073741823	; 0xc0000001
   16430:	ldr	r3, [r0, sl, lsl #2]
   16434:	lsl	sl, sl, #2
   16438:	cmp	r3, #0
   1643c:	add	r3, r0, sl
   16440:	beq	16454 <__assert_fail@plt+0x51f8>
   16444:	b	164f0 <__assert_fail@plt+0x5294>
   16448:	ldr	r2, [r3, #-4]!
   1644c:	cmp	r2, #0
   16450:	bne	164f0 <__assert_fail@plt+0x5294>
   16454:	subs	r1, r1, #1
   16458:	bne	16448 <__assert_fail@plt+0x51ec>
   1645c:	ldr	r3, [r0, ip, lsl #2]
   16460:	mvn	r2, #0
   16464:	lsl	sl, ip, #2
   16468:	bics	r3, r3, r2, lsl r9
   1646c:	movne	r8, #1
   16470:	moveq	r8, #0
   16474:	b	163a4 <__assert_fail@plt+0x5148>
   16478:	mov	r3, #0
   1647c:	str	r3, [r0, #4]
   16480:	mov	r2, #1
   16484:	mov	r1, r6
   16488:	mov	r0, r6
   1648c:	bl	16268 <__assert_fail@plt+0x500c>
   16490:	cmp	r7, #0
   16494:	popge	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16498:	b	163f4 <__assert_fail@plt+0x5198>
   1649c:	ldr	r1, [fp]
   164a0:	mov	r3, r9
   164a4:	mov	r2, r5
   164a8:	add	r1, r1, sl
   164ac:	mov	r0, r4
   164b0:	bl	14728 <__assert_fail@plt+0x34cc>
   164b4:	sub	r3, r5, #-1073741823	; 0xc0000001
   164b8:	ldr	r3, [r4, r3, lsl #2]
   164bc:	cmp	r3, #0
   164c0:	subeq	r5, r5, #1
   164c4:	b	163e0 <__assert_fail@plt+0x5184>
   164c8:	mov	r1, r5
   164cc:	mov	r0, r6
   164d0:	bl	13440 <__assert_fail@plt+0x21e4>
   164d4:	mov	r4, r0
   164d8:	b	163b4 <__assert_fail@plt+0x5158>
   164dc:	cmp	r7, #0
   164e0:	mov	r3, #0
   164e4:	str	r3, [r6, #4]
   164e8:	popge	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164ec:	b	163f4 <__assert_fail@plt+0x5198>
   164f0:	add	sl, sl, #4
   164f4:	mov	r8, #1
   164f8:	b	163a4 <__assert_fail@plt+0x5148>
   164fc:	push	{r4, r5, r6, r7, lr}
   16500:	sub	sp, sp, #12
   16504:	ldr	r6, [r0, #4]
   16508:	cmp	r6, #0
   1650c:	ble	16560 <__assert_fail@plt+0x5304>
   16510:	mov	r5, r0
   16514:	mov	r3, #0
   16518:	ldr	r1, [r5, #8]!
   1651c:	mov	r4, r0
   16520:	mov	r2, r1
   16524:	ldr	r0, [r1]
   16528:	str	r3, [sp]
   1652c:	mov	r1, r3
   16530:	bl	13240 <__assert_fail@plt+0x1fe4>
   16534:	mov	ip, #2
   16538:	mov	r2, r5
   1653c:	mov	r1, r6
   16540:	str	ip, [sp]
   16544:	mov	r7, r0
   16548:	mov	r3, r7
   1654c:	mov	r0, r4
   16550:	bl	16350 <__assert_fail@plt+0x50f4>
   16554:	mov	r0, r7
   16558:	add	sp, sp, #12
   1655c:	pop	{r4, r5, r6, r7, pc}
   16560:	ldr	r3, [pc, #12]	; 16574 <__assert_fail@plt+0x5318>
   16564:	ldr	r2, [pc, #12]	; 16578 <__assert_fail@plt+0x531c>
   16568:	ldr	r1, [pc, #12]	; 1657c <__assert_fail@plt+0x5320>
   1656c:	ldr	r0, [pc, #12]	; 16580 <__assert_fail@plt+0x5324>
   16570:	bl	1125c <__assert_fail@plt>
   16574:	andeq	sp, r2, r0, lsl r4
   16578:	andeq	r0, r0, r3, lsr #21
   1657c:	andeq	sp, r2, r8, ror r5
   16580:	andeq	sp, r2, r8, lsl #16
   16584:	push	{r4, r5, lr}
   16588:	mov	r4, r1
   1658c:	ldr	lr, [r1, #4]
   16590:	ldr	r3, [r2, #4]
   16594:	sub	sp, sp, #12
   16598:	teq	lr, r3
   1659c:	mov	r5, r0
   165a0:	bmi	165d0 <__assert_fail@plt+0x5374>
   165a4:	add	ip, r2, #8
   165a8:	str	ip, [sp]
   165ac:	mov	r1, lr
   165b0:	add	r2, r4, #8
   165b4:	bl	13e78 <__assert_fail@plt+0x2c1c>
   165b8:	ldr	r3, [r4, #4]
   165bc:	cmp	r3, #0
   165c0:	rsblt	r0, r0, #0
   165c4:	str	r0, [r5, #4]
   165c8:	add	sp, sp, #12
   165cc:	pop	{r4, r5, pc}
   165d0:	bl	13c8c <__assert_fail@plt+0x2a30>
   165d4:	b	165b8 <__assert_fail@plt+0x535c>
   165d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165dc:	mov	r9, r3
   165e0:	ldr	r5, [r3, #4]
   165e4:	sub	sp, sp, #76	; 0x4c
   165e8:	cmp	r5, #0
   165ec:	ldr	r7, [r2, #4]
   165f0:	beq	16a8c <__assert_fail@plt+0x5830>
   165f4:	cmp	r7, #0
   165f8:	mov	r6, r0
   165fc:	mov	r8, r1
   16600:	bne	16628 <__assert_fail@plt+0x53cc>
   16604:	cmp	r0, #0
   16608:	strne	r7, [r0, #4]
   1660c:	cmp	r1, #0
   16610:	moveq	r7, r1
   16614:	movne	r7, #0
   16618:	strne	r7, [r1, #4]
   1661c:	mov	r0, r7
   16620:	add	sp, sp, #76	; 0x4c
   16624:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16628:	eor	r4, r5, r5, asr #31
   1662c:	eor	sl, r7, r7, asr #31
   16630:	sub	r4, r4, r5, asr #31
   16634:	sub	sl, sl, r7, asr #31
   16638:	cmp	sl, r4
   1663c:	mov	r3, r2
   16640:	eor	r5, r5, r7
   16644:	bge	16724 <__assert_fail@plt+0x54c8>
   16648:	ldr	r2, [sp, #112]	; 0x70
   1664c:	cmp	r5, #0
   16650:	cmpge	r2, #1
   16654:	beq	166b8 <__assert_fail@plt+0x545c>
   16658:	ldr	r2, [sp, #112]	; 0x70
   1665c:	lsr	r5, r5, #31
   16660:	cmp	r2, #0
   16664:	movne	r5, #0
   16668:	andeq	r5, r5, #1
   1666c:	cmp	r5, #0
   16670:	beq	166f4 <__assert_fail@plt+0x5498>
   16674:	cmp	r1, #0
   16678:	beq	1668c <__assert_fail@plt+0x5430>
   1667c:	mov	r2, r9
   16680:	mov	r1, r3
   16684:	mov	r0, r8
   16688:	bl	16214 <__assert_fail@plt+0x4fb8>
   1668c:	cmp	r6, #0
   16690:	beq	16714 <__assert_fail@plt+0x54b8>
   16694:	ldr	r2, [r6]
   16698:	mvn	r3, #0
   1669c:	cmp	r2, #0
   166a0:	str	r3, [r6, #4]
   166a4:	ldrgt	r0, [r6, #8]
   166a8:	ble	16a74 <__assert_fail@plt+0x5818>
   166ac:	mov	r7, #1
   166b0:	str	r7, [r0]
   166b4:	b	1661c <__assert_fail@plt+0x53c0>
   166b8:	cmp	r1, #0
   166bc:	beq	166d0 <__assert_fail@plt+0x5474>
   166c0:	mov	r2, r9
   166c4:	mov	r1, r3
   166c8:	mov	r0, r8
   166cc:	bl	16584 <__assert_fail@plt+0x5328>
   166d0:	cmp	r6, #0
   166d4:	beq	16714 <__assert_fail@plt+0x54b8>
   166d8:	mov	r0, r6
   166dc:	mov	r1, #1
   166e0:	bl	137f8 <__assert_fail@plt+0x259c>
   166e4:	mov	r7, #1
   166e8:	mov	r0, r7
   166ec:	add	sp, sp, #76	; 0x4c
   166f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166f4:	cmp	r1, #0
   166f8:	beq	16708 <__assert_fail@plt+0x54ac>
   166fc:	mov	r1, r3
   16700:	mov	r0, r8
   16704:	bl	15894 <__assert_fail@plt+0x4638>
   16708:	cmp	r6, #0
   1670c:	movne	r3, #0
   16710:	strne	r3, [r6, #4]
   16714:	mov	r7, #1
   16718:	mov	r0, r7
   1671c:	add	sp, sp, #76	; 0x4c
   16720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16724:	ldr	r2, [pc, #904]	; 16ab4 <__assert_fail@plt+0x5858>
   16728:	mov	fp, #0
   1672c:	mov	r1, r3
   16730:	add	r0, sp, #44	; 0x2c
   16734:	str	r2, [sp, #52]	; 0x34
   16738:	str	fp, [sp, #44]	; 0x2c
   1673c:	str	fp, [sp, #48]	; 0x30
   16740:	bl	15894 <__assert_fail@plt+0x4638>
   16744:	sub	r3, sl, r4
   16748:	ldr	r2, [sp, #52]	; 0x34
   1674c:	cmp	r6, fp
   16750:	add	r3, r3, #1
   16754:	str	r3, [sp, #20]
   16758:	str	r2, [sp, #12]
   1675c:	moveq	fp, r6
   16760:	beq	1679c <__assert_fail@plt+0x5540>
   16764:	lsls	r0, r3, #5
   16768:	moveq	r3, fp
   1676c:	movne	r3, #1
   16770:	sub	r0, r0, r3
   16774:	ldr	r3, [pc, #828]	; 16ab8 <__assert_fail@plt+0x585c>
   16778:	lsr	r0, r0, #5
   1677c:	add	r0, r0, #1
   16780:	str	fp, [sp, #36]	; 0x24
   16784:	str	r0, [sp, #32]
   16788:	ldr	r3, [r3, #4]
   1678c:	lsl	r0, r0, #2
   16790:	blx	r3
   16794:	mov	fp, r0
   16798:	str	r0, [sp, #40]	; 0x28
   1679c:	ldr	r3, [r9, #8]
   167a0:	add	r0, sp, #56	; 0x38
   167a4:	mov	r1, r3
   167a8:	mov	r2, r4
   167ac:	str	r3, [sp, #16]
   167b0:	bl	154a4 <__assert_fail@plt+0x4248>
   167b4:	cmp	r4, #2
   167b8:	ldr	r3, [sp, #16]
   167bc:	ble	167cc <__assert_fail@plt+0x5570>
   167c0:	ldr	r2, [sp, #56]	; 0x38
   167c4:	cmp	r2, #0
   167c8:	bne	16974 <__assert_fail@plt+0x5718>
   167cc:	add	r2, sp, #56	; 0x38
   167d0:	str	r2, [sp, #4]
   167d4:	str	r4, [sp]
   167d8:	mov	r2, sl
   167dc:	ldr	r1, [sp, #12]
   167e0:	mov	r0, fp
   167e4:	bl	147ec <__assert_fail@plt+0x3590>
   167e8:	lsl	r3, r4, #2
   167ec:	str	r3, [sp, #16]
   167f0:	cmp	fp, #0
   167f4:	beq	1681c <__assert_fail@plt+0x55c0>
   167f8:	ldr	r2, [sp, #20]
   167fc:	sub	r3, r2, #-1073741823	; 0xc0000001
   16800:	ldr	r3, [fp, r3, lsl #2]
   16804:	cmp	r3, #0
   16808:	subeq	r2, r2, #1
   1680c:	cmp	r5, #0
   16810:	mov	r3, r2
   16814:	rsblt	r3, r2, #0
   16818:	str	r3, [sp, #36]	; 0x24
   1681c:	ldr	r3, [sp, #12]
   16820:	ldr	r2, [sp, #16]
   16824:	add	r3, r3, r2
   16828:	ldr	r2, [r3, #-4]!
   1682c:	cmp	r2, #0
   16830:	bne	168e4 <__assert_fail@plt+0x5688>
   16834:	subs	r4, r4, #1
   16838:	bne	16828 <__assert_fail@plt+0x55cc>
   1683c:	cmp	r7, #0
   16840:	strge	r4, [sp, #48]	; 0x30
   16844:	movge	r7, r4
   16848:	blt	169f4 <__assert_fail@plt+0x5798>
   1684c:	cmp	r6, #0
   16850:	beq	1688c <__assert_fail@plt+0x5630>
   16854:	ldr	r0, [sp, #32]
   16858:	ldr	r1, [r6]
   1685c:	ldr	ip, [sp, #36]	; 0x24
   16860:	ldr	r2, [r6, #4]
   16864:	ldr	r3, [sp, #40]	; 0x28
   16868:	str	r0, [r6]
   1686c:	ldr	r0, [r6, #8]
   16870:	cmp	r1, #0
   16874:	str	r1, [sp, #32]
   16878:	str	ip, [r6, #4]
   1687c:	str	r2, [sp, #36]	; 0x24
   16880:	str	r3, [r6, #8]
   16884:	str	r0, [sp, #40]	; 0x28
   16888:	bne	16960 <__assert_fail@plt+0x5704>
   1688c:	cmp	r8, #0
   16890:	beq	16958 <__assert_fail@plt+0x56fc>
   16894:	ldr	lr, [sp, #48]	; 0x30
   16898:	ldr	ip, [r8, #4]
   1689c:	ldr	r0, [sp, #44]	; 0x2c
   168a0:	ldr	r1, [r8]
   168a4:	ldr	r2, [sp, #52]	; 0x34
   168a8:	ldr	r3, [r8, #8]
   168ac:	str	lr, [r8, #4]
   168b0:	str	ip, [sp, #48]	; 0x30
   168b4:	str	r0, [r8]
   168b8:	str	r1, [sp, #44]	; 0x2c
   168bc:	str	r2, [r8, #8]
   168c0:	str	r3, [sp, #52]	; 0x34
   168c4:	cmp	r1, #0
   168c8:	beq	1661c <__assert_fail@plt+0x53c0>
   168cc:	ldr	r3, [pc, #484]	; 16ab8 <__assert_fail@plt+0x585c>
   168d0:	lsl	r1, r1, #2
   168d4:	ldr	r0, [sp, #52]	; 0x34
   168d8:	ldr	r3, [r3, #8]
   168dc:	blx	r3
   168e0:	b	1661c <__assert_fail@plt+0x53c0>
   168e4:	cmp	r7, #0
   168e8:	blt	16a50 <__assert_fail@plt+0x57f4>
   168ec:	ldr	r2, [sp, #112]	; 0x70
   168f0:	lsr	r3, r5, #31
   168f4:	cmp	r2, #0
   168f8:	movne	r3, #0
   168fc:	andeq	r3, r3, #1
   16900:	cmp	r3, #0
   16904:	str	r4, [sp, #48]	; 0x30
   16908:	beq	16aa8 <__assert_fail@plt+0x584c>
   1690c:	cmp	r6, #0
   16910:	beq	1694c <__assert_fail@plt+0x56f0>
   16914:	add	r1, sp, #32
   16918:	mov	r0, r1
   1691c:	mov	r2, #1
   16920:	bl	1631c <__assert_fail@plt+0x50c0>
   16924:	cmp	r8, #0
   16928:	beq	16a84 <__assert_fail@plt+0x5828>
   1692c:	add	r1, sp, #44	; 0x2c
   16930:	mov	r2, r9
   16934:	mov	r0, r1
   16938:	bl	16214 <__assert_fail@plt+0x4fb8>
   1693c:	mov	r7, #1
   16940:	cmp	r6, #0
   16944:	bne	16854 <__assert_fail@plt+0x55f8>
   16948:	b	16894 <__assert_fail@plt+0x5638>
   1694c:	cmp	r8, #0
   16950:	moveq	r7, #1
   16954:	bne	1692c <__assert_fail@plt+0x56d0>
   16958:	ldr	r1, [sp, #44]	; 0x2c
   1695c:	b	168c4 <__assert_fail@plt+0x5668>
   16960:	ldr	r3, [pc, #336]	; 16ab8 <__assert_fail@plt+0x585c>
   16964:	lsl	r1, r1, #2
   16968:	ldr	r3, [r3, #8]
   1696c:	blx	r3
   16970:	b	1688c <__assert_fail@plt+0x5630>
   16974:	str	r3, [sp, #28]
   16978:	lsl	r3, r4, #2
   1697c:	str	r3, [sp, #16]
   16980:	mov	r0, r3
   16984:	ldr	r3, [pc, #300]	; 16ab8 <__assert_fail@plt+0x585c>
   16988:	ldr	r2, [r3, #4]
   1698c:	blx	r2
   16990:	ldr	r3, [sp, #28]
   16994:	mov	r2, r4
   16998:	mov	r1, r3
   1699c:	ldr	r3, [sp, #56]	; 0x38
   169a0:	str	r0, [sp, #24]
   169a4:	bl	144e8 <__assert_fail@plt+0x328c>
   169a8:	cmp	r0, #0
   169ac:	bne	16a94 <__assert_fail@plt+0x5838>
   169b0:	mov	r2, sl
   169b4:	ldr	sl, [sp, #24]
   169b8:	add	r3, sp, #56	; 0x38
   169bc:	str	r3, [sp, #4]
   169c0:	str	r4, [sp]
   169c4:	mov	r3, sl
   169c8:	ldr	r1, [sp, #12]
   169cc:	mov	r0, fp
   169d0:	bl	147ec <__assert_fail@plt+0x3590>
   169d4:	cmp	sl, #0
   169d8:	beq	167f0 <__assert_fail@plt+0x5594>
   169dc:	ldr	r3, [pc, #212]	; 16ab8 <__assert_fail@plt+0x585c>
   169e0:	mov	r0, sl
   169e4:	ldr	r1, [sp, #16]
   169e8:	ldr	r3, [r3, #8]
   169ec:	blx	r3
   169f0:	b	167f0 <__assert_fail@plt+0x5594>
   169f4:	mov	r7, r4
   169f8:	mov	r3, r4
   169fc:	str	r4, [sp, #48]	; 0x30
   16a00:	ldr	r2, [sp, #112]	; 0x70
   16a04:	cmp	r5, #0
   16a08:	cmpge	r2, #1
   16a0c:	moveq	r5, #1
   16a10:	movne	r5, #0
   16a14:	tst	r3, r5
   16a18:	beq	1684c <__assert_fail@plt+0x55f0>
   16a1c:	cmp	r6, #0
   16a20:	beq	16a68 <__assert_fail@plt+0x580c>
   16a24:	add	r1, sp, #32
   16a28:	mov	r0, r1
   16a2c:	mov	r2, #1
   16a30:	bl	16268 <__assert_fail@plt+0x500c>
   16a34:	cmp	r8, #0
   16a38:	beq	16854 <__assert_fail@plt+0x55f8>
   16a3c:	add	r1, sp, #44	; 0x2c
   16a40:	mov	r2, r9
   16a44:	mov	r0, r1
   16a48:	bl	16584 <__assert_fail@plt+0x5328>
   16a4c:	b	16940 <__assert_fail@plt+0x56e4>
   16a50:	ldr	r3, [sp, #112]	; 0x70
   16a54:	clz	r3, r3
   16a58:	lsr	r3, r3, #5
   16a5c:	rsb	r4, r4, #0
   16a60:	and	r3, r3, r5, lsr #31
   16a64:	b	16900 <__assert_fail@plt+0x56a4>
   16a68:	cmp	r8, #0
   16a6c:	bne	16a3c <__assert_fail@plt+0x57e0>
   16a70:	b	16958 <__assert_fail@plt+0x56fc>
   16a74:	mov	r0, r6
   16a78:	mov	r1, #1
   16a7c:	bl	13440 <__assert_fail@plt+0x21e4>
   16a80:	b	166ac <__assert_fail@plt+0x5450>
   16a84:	mov	r7, #1
   16a88:	b	16854 <__assert_fail@plt+0x55f8>
   16a8c:	ldr	r0, [pc, #40]	; 16abc <__assert_fail@plt+0x5860>
   16a90:	bl	112b4 <__assert_fail@plt+0x58>
   16a94:	ldr	r3, [pc, #36]	; 16ac0 <__assert_fail@plt+0x5864>
   16a98:	ldr	r2, [pc, #36]	; 16ac4 <__assert_fail@plt+0x5868>
   16a9c:	ldr	r1, [pc, #36]	; 16ac8 <__assert_fail@plt+0x586c>
   16aa0:	ldr	r0, [pc, #36]	; 16acc <__assert_fail@plt+0x5870>
   16aa4:	bl	1125c <__assert_fail@plt>
   16aa8:	mov	r7, #1
   16aac:	mov	r3, r7
   16ab0:	b	16a00 <__assert_fail@plt+0x57a4>
   16ab4:	strdeq	sp, [r2], -r8
   16ab8:	andeq	pc, r3, r8, lsr #2
   16abc:	andeq	sp, r2, r8, lsl r8
   16ac0:	andeq	sp, r2, r0, lsr #8
   16ac4:	andeq	r0, r0, r3, lsl #9
   16ac8:	andeq	sp, r2, r8, ror r5
   16acc:	andeq	sp, r2, r4, asr r6
   16ad0:	push	{r4, r5, r6, r7, lr}
   16ad4:	sub	sp, sp, #44	; 0x2c
   16ad8:	ldr	lr, [pc, #252]	; 16bdc <__assert_fail@plt+0x5980>
   16adc:	mov	ip, #0
   16ae0:	cmp	r3, #0
   16ae4:	mov	r6, r0
   16ae8:	mov	r4, r1
   16aec:	str	lr, [sp, #24]
   16af0:	str	lr, [sp, #36]	; 0x24
   16af4:	str	ip, [sp, #16]
   16af8:	str	ip, [sp, #20]
   16afc:	str	ip, [sp, #28]
   16b00:	str	ip, [sp, #32]
   16b04:	ldr	r7, [sp, #64]	; 0x40
   16b08:	addeq	r5, sp, #28
   16b0c:	bne	16bc0 <__assert_fail@plt+0x5964>
   16b10:	add	r1, sp, #16
   16b14:	str	r7, [sp]
   16b18:	mov	r3, r5
   16b1c:	mov	r0, r6
   16b20:	bl	165d8 <__assert_fail@plt+0x537c>
   16b24:	ldr	r1, [sp, #28]
   16b28:	cmp	r1, #0
   16b2c:	bne	16ba8 <__assert_fail@plt+0x594c>
   16b30:	ldr	r3, [sp, #20]
   16b34:	cmp	r3, #0
   16b38:	moveq	r5, r3
   16b3c:	ldrne	r2, [sp, #24]
   16b40:	ldrne	r5, [r2]
   16b44:	cmp	r4, #0
   16b48:	ldreq	r1, [sp, #16]
   16b4c:	beq	16b80 <__assert_fail@plt+0x5924>
   16b50:	ldr	r2, [r4]
   16b54:	ldr	lr, [sp, #16]
   16b58:	ldr	ip, [r4, #4]
   16b5c:	ldr	r0, [r4, #8]
   16b60:	mov	r1, r2
   16b64:	str	r2, [sp, #16]
   16b68:	ldr	r2, [sp, #24]
   16b6c:	str	lr, [r4]
   16b70:	str	ip, [sp, #20]
   16b74:	str	r3, [r4, #4]
   16b78:	str	r0, [sp, #24]
   16b7c:	str	r2, [r4, #8]
   16b80:	cmp	r1, #0
   16b84:	beq	16b9c <__assert_fail@plt+0x5940>
   16b88:	ldr	r3, [pc, #80]	; 16be0 <__assert_fail@plt+0x5984>
   16b8c:	lsl	r1, r1, #2
   16b90:	ldr	r0, [sp, #24]
   16b94:	ldr	r3, [r3, #8]
   16b98:	blx	r3
   16b9c:	mov	r0, r5
   16ba0:	add	sp, sp, #44	; 0x2c
   16ba4:	pop	{r4, r5, r6, r7, pc}
   16ba8:	ldr	r3, [pc, #48]	; 16be0 <__assert_fail@plt+0x5984>
   16bac:	lsl	r1, r1, #2
   16bb0:	ldr	r0, [sp, #36]	; 0x24
   16bb4:	ldr	r3, [r3, #8]
   16bb8:	blx	r3
   16bbc:	b	16b30 <__assert_fail@plt+0x58d4>
   16bc0:	add	r5, sp, #28
   16bc4:	mov	r1, r3
   16bc8:	mov	r0, r5
   16bcc:	str	r2, [sp, #12]
   16bd0:	bl	137f8 <__assert_fail@plt+0x259c>
   16bd4:	ldr	r2, [sp, #12]
   16bd8:	b	16b10 <__assert_fail@plt+0x58b4>
   16bdc:	strdeq	sp, [r2], -r8
   16be0:	andeq	pc, r3, r8, lsr #2
   16be4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16be8:	sub	sp, sp, #20
   16bec:	ldr	r3, [r2, #4]
   16bf0:	ldr	r5, [r1, #4]
   16bf4:	cmp	r3, #0
   16bf8:	cmpne	r5, #0
   16bfc:	moveq	r3, #0
   16c00:	streq	r3, [r0, #4]
   16c04:	bne	16c10 <__assert_fail@plt+0x59b4>
   16c08:	add	sp, sp, #20
   16c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c10:	eor	r9, r3, r3, asr #31
   16c14:	str	r2, [sp, #12]
   16c18:	eor	r2, r5, r5, asr #31
   16c1c:	sub	r9, r9, r3, asr #31
   16c20:	sub	r2, r2, r5, asr #31
   16c24:	add	r7, r2, r9
   16c28:	mov	r8, r1
   16c2c:	lsls	r6, r7, #5
   16c30:	movne	r1, #1
   16c34:	moveq	r1, #0
   16c38:	sub	r6, r6, r1
   16c3c:	ldr	fp, [pc, #152]	; 16cdc <__assert_fail@plt+0x5a80>
   16c40:	lsr	r6, r6, #5
   16c44:	add	r6, r6, #1
   16c48:	mov	r4, r0
   16c4c:	ldr	r1, [fp, #4]
   16c50:	lsl	r0, r6, #2
   16c54:	eor	r5, r5, r3
   16c58:	str	r2, [sp, #8]
   16c5c:	blx	r1
   16c60:	ldr	r2, [sp, #8]
   16c64:	cmp	r2, r9
   16c68:	ldrge	r3, [sp, #12]
   16c6c:	ldrlt	r1, [sp, #12]
   16c70:	ldrge	r1, [r8, #8]
   16c74:	ldrlt	r3, [r8, #8]
   16c78:	ldrge	r3, [r3, #8]
   16c7c:	ldrlt	r1, [r1, #8]
   16c80:	strge	r9, [sp]
   16c84:	strlt	r2, [sp]
   16c88:	movlt	r2, r9
   16c8c:	mov	sl, r0
   16c90:	bl	14388 <__assert_fail@plt+0x312c>
   16c94:	sub	r3, r7, #-1073741823	; 0xc0000001
   16c98:	ldr	r1, [r4]
   16c9c:	ldr	r3, [sl, r3, lsl #2]
   16ca0:	ldr	r0, [r4, #8]
   16ca4:	cmp	r3, #0
   16ca8:	subeq	r7, r7, #1
   16cac:	cmp	r5, #0
   16cb0:	rsblt	r7, r7, #0
   16cb4:	cmp	r1, #0
   16cb8:	str	r7, [r4, #4]
   16cbc:	str	r6, [r4]
   16cc0:	str	sl, [r4, #8]
   16cc4:	beq	16c08 <__assert_fail@plt+0x59ac>
   16cc8:	ldr	r3, [fp, #8]
   16ccc:	lsl	r1, r1, #2
   16cd0:	add	sp, sp, #20
   16cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cd8:	bx	r3
   16cdc:	andeq	pc, r3, r8, lsr #2
   16ce0:	push	{r4, r5, r6, lr}
   16ce4:	sub	sp, sp, #16
   16ce8:	ldr	ip, [pc, #104]	; 16d58 <__assert_fail@plt+0x5afc>
   16cec:	mov	r3, #0
   16cf0:	cmp	r2, #0
   16cf4:	add	r4, sp, #4
   16cf8:	mov	r5, r0
   16cfc:	mov	r6, r1
   16d00:	str	ip, [sp, #12]
   16d04:	str	r3, [sp, #4]
   16d08:	str	r3, [sp, #8]
   16d0c:	bne	16d48 <__assert_fail@plt+0x5aec>
   16d10:	mov	r1, r6
   16d14:	mov	r2, r4
   16d18:	mov	r0, r5
   16d1c:	bl	16be4 <__assert_fail@plt+0x5988>
   16d20:	ldr	r1, [sp, #4]
   16d24:	cmp	r1, #0
   16d28:	beq	16d40 <__assert_fail@plt+0x5ae4>
   16d2c:	ldr	r3, [pc, #40]	; 16d5c <__assert_fail@plt+0x5b00>
   16d30:	lsl	r1, r1, #2
   16d34:	ldr	r0, [sp, #12]
   16d38:	ldr	r3, [r3, #8]
   16d3c:	blx	r3
   16d40:	add	sp, sp, #16
   16d44:	pop	{r4, r5, r6, pc}
   16d48:	mov	r1, r2
   16d4c:	mov	r0, r4
   16d50:	bl	137f8 <__assert_fail@plt+0x259c>
   16d54:	b	16d10 <__assert_fail@plt+0x5ab4>
   16d58:	strdeq	sp, [r2], -r8
   16d5c:	andeq	pc, r3, r8, lsr #2
   16d60:	subs	ip, r2, #0
   16d64:	blt	16d6c <__assert_fail@plt+0x5b10>
   16d68:	b	16ce0 <__assert_fail@plt+0x5a84>
   16d6c:	push	{r4, lr}
   16d70:	rsb	r2, ip, #0
   16d74:	mov	r4, r0
   16d78:	bl	16ce0 <__assert_fail@plt+0x5a84>
   16d7c:	mov	r1, r4
   16d80:	mov	r0, r4
   16d84:	bl	15894 <__assert_fail@plt+0x4638>
   16d88:	ldr	r3, [r4, #4]
   16d8c:	rsb	r3, r3, #0
   16d90:	str	r3, [r4, #4]
   16d94:	pop	{r4, pc}
   16d98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16d9c:	mov	r9, r0
   16da0:	ldr	r5, [r1, #4]
   16da4:	cmp	r5, #0
   16da8:	beq	16e3c <__assert_fail@plt+0x5be0>
   16dac:	cmp	r5, #0
   16db0:	rsblt	r5, r5, #0
   16db4:	lsr	r4, r2, #5
   16db8:	ands	r3, r2, #31
   16dbc:	movne	r3, #1
   16dc0:	mov	r8, r1
   16dc4:	add	r7, r5, r4
   16dc8:	ldr	r1, [r0]
   16dcc:	add	r7, r7, r3
   16dd0:	cmp	r7, r1
   16dd4:	and	sl, r2, #31
   16dd8:	ldrle	r6, [r0, #8]
   16ddc:	bgt	16e6c <__assert_fail@plt+0x5c10>
   16de0:	cmp	sl, #0
   16de4:	bne	16e44 <__assert_fail@plt+0x5be8>
   16de8:	sub	r3, r5, #1
   16dec:	add	r3, r3, r4
   16df0:	ldr	r0, [r8, #8]
   16df4:	add	r3, r6, r3, lsl #2
   16df8:	add	r2, r0, r5, lsl #2
   16dfc:	ldr	r1, [r2, #-4]!
   16e00:	cmp	r2, r0
   16e04:	str	r1, [r3], #-4
   16e08:	bne	16dfc <__assert_fail@plt+0x5ba0>
   16e0c:	cmp	r4, #0
   16e10:	addne	r3, r6, r4, lsl #2
   16e14:	movne	r2, #0
   16e18:	beq	16e28 <__assert_fail@plt+0x5bcc>
   16e1c:	str	r2, [r3, #-4]!
   16e20:	cmp	r6, r3
   16e24:	bne	16e1c <__assert_fail@plt+0x5bc0>
   16e28:	ldr	r3, [r8, #4]
   16e2c:	cmp	r3, #0
   16e30:	blt	16e84 <__assert_fail@plt+0x5c28>
   16e34:	str	r7, [r9, #4]
   16e38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e3c:	str	r5, [r0, #4]
   16e40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e44:	mov	r3, sl
   16e48:	mov	r2, r5
   16e4c:	ldr	r1, [r8, #8]
   16e50:	add	r0, r6, r4, lsl #2
   16e54:	bl	144e8 <__assert_fail@plt+0x328c>
   16e58:	sub	r3, r7, #-1073741823	; 0xc0000001
   16e5c:	cmp	r0, #0
   16e60:	subeq	r7, r7, #1
   16e64:	str	r0, [r6, r3, lsl #2]
   16e68:	b	16e0c <__assert_fail@plt+0x5bb0>
   16e6c:	mov	r1, r7
   16e70:	bl	13440 <__assert_fail@plt+0x21e4>
   16e74:	cmp	sl, #0
   16e78:	mov	r6, r0
   16e7c:	beq	16de8 <__assert_fail@plt+0x5b8c>
   16e80:	b	16e44 <__assert_fail@plt+0x5be8>
   16e84:	rsb	r7, r7, #0
   16e88:	str	r7, [r9, #4]
   16e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e90:	push	{r4, r5, r6, lr}
   16e94:	sub	sp, sp, #16
   16e98:	ldr	ip, [pc, #120]	; 16f18 <__assert_fail@plt+0x5cbc>
   16e9c:	mov	r3, #0
   16ea0:	cmp	r2, #0
   16ea4:	add	r4, sp, #4
   16ea8:	mov	r5, r0
   16eac:	mov	r6, r1
   16eb0:	str	ip, [sp, #12]
   16eb4:	str	r3, [sp, #4]
   16eb8:	str	r3, [sp, #8]
   16ebc:	bne	16f08 <__assert_fail@plt+0x5cac>
   16ec0:	mov	r1, r6
   16ec4:	mov	r2, r4
   16ec8:	mov	r0, r4
   16ecc:	bl	16be4 <__assert_fail@plt+0x5988>
   16ed0:	mov	r1, r5
   16ed4:	mov	r2, r4
   16ed8:	mov	r0, r5
   16edc:	bl	16214 <__assert_fail@plt+0x4fb8>
   16ee0:	ldr	r1, [sp, #4]
   16ee4:	cmp	r1, #0
   16ee8:	beq	16f00 <__assert_fail@plt+0x5ca4>
   16eec:	ldr	r3, [pc, #40]	; 16f1c <__assert_fail@plt+0x5cc0>
   16ef0:	lsl	r1, r1, #2
   16ef4:	ldr	r0, [sp, #12]
   16ef8:	ldr	r3, [r3, #8]
   16efc:	blx	r3
   16f00:	add	sp, sp, #16
   16f04:	pop	{r4, r5, r6, pc}
   16f08:	mov	r1, r2
   16f0c:	mov	r0, r4
   16f10:	bl	137f8 <__assert_fail@plt+0x259c>
   16f14:	b	16ec0 <__assert_fail@plt+0x5c64>
   16f18:	strdeq	sp, [r2], -r8
   16f1c:	andeq	pc, r3, r8, lsr #2
   16f20:	push	{r4, r5, r6, lr}
   16f24:	sub	sp, sp, #16
   16f28:	ldr	ip, [pc, #120]	; 16fa8 <__assert_fail@plt+0x5d4c>
   16f2c:	mov	r3, #0
   16f30:	cmp	r2, #0
   16f34:	add	r4, sp, #4
   16f38:	mov	r5, r0
   16f3c:	mov	r6, r1
   16f40:	str	ip, [sp, #12]
   16f44:	str	r3, [sp, #4]
   16f48:	str	r3, [sp, #8]
   16f4c:	bne	16f98 <__assert_fail@plt+0x5d3c>
   16f50:	mov	r1, r6
   16f54:	mov	r2, r4
   16f58:	mov	r0, r4
   16f5c:	bl	16be4 <__assert_fail@plt+0x5988>
   16f60:	mov	r1, r5
   16f64:	mov	r2, r4
   16f68:	mov	r0, r5
   16f6c:	bl	16584 <__assert_fail@plt+0x5328>
   16f70:	ldr	r1, [sp, #4]
   16f74:	cmp	r1, #0
   16f78:	beq	16f90 <__assert_fail@plt+0x5d34>
   16f7c:	ldr	r3, [pc, #40]	; 16fac <__assert_fail@plt+0x5d50>
   16f80:	lsl	r1, r1, #2
   16f84:	ldr	r0, [sp, #12]
   16f88:	ldr	r3, [r3, #8]
   16f8c:	blx	r3
   16f90:	add	sp, sp, #16
   16f94:	pop	{r4, r5, r6, pc}
   16f98:	mov	r1, r2
   16f9c:	mov	r0, r4
   16fa0:	bl	137f8 <__assert_fail@plt+0x259c>
   16fa4:	b	16f50 <__assert_fail@plt+0x5cf4>
   16fa8:	strdeq	sp, [r2], -r8
   16fac:	andeq	pc, r3, r8, lsr #2
   16fb0:	push	{r4, r5, r6, lr}
   16fb4:	mov	r6, r2
   16fb8:	ldr	r2, [r2, #4]
   16fbc:	sub	sp, sp, #8
   16fc0:	mov	r4, r0
   16fc4:	lsr	r2, r2, #31
   16fc8:	mov	r3, r6
   16fcc:	str	r2, [sp]
   16fd0:	mov	r0, #0
   16fd4:	mov	r2, r1
   16fd8:	mov	r5, r1
   16fdc:	bl	165d8 <__assert_fail@plt+0x537c>
   16fe0:	mov	r2, r4
   16fe4:	mov	r1, r4
   16fe8:	mov	r0, r4
   16fec:	bl	16be4 <__assert_fail@plt+0x5988>
   16ff0:	mov	r1, r5
   16ff4:	mov	r0, r4
   16ff8:	mov	r2, #2
   16ffc:	bl	16f20 <__assert_fail@plt+0x5cc4>
   17000:	mov	r0, #2
   17004:	mov	r2, r4
   17008:	mov	r1, r4
   1700c:	str	r0, [sp]
   17010:	mov	r3, r6
   17014:	mov	r0, #0
   17018:	bl	165d8 <__assert_fail@plt+0x537c>
   1701c:	mov	r2, r5
   17020:	mov	r1, r5
   17024:	mov	r0, r5
   17028:	add	sp, sp, #8
   1702c:	pop	{r4, r5, r6, lr}
   17030:	b	16be4 <__assert_fail@plt+0x5988>
   17034:	push	{r4, lr}
   17038:	sub	sp, sp, #16
   1703c:	ldr	ip, [pc, #80]	; 17094 <__assert_fail@plt+0x5e38>
   17040:	mov	r3, #0
   17044:	mov	r4, r0
   17048:	add	r0, sp, #4
   1704c:	str	ip, [sp, #12]
   17050:	str	r3, [sp, #4]
   17054:	str	r3, [sp, #8]
   17058:	bl	16be4 <__assert_fail@plt+0x5988>
   1705c:	mov	r1, r4
   17060:	add	r2, sp, #4
   17064:	mov	r0, r4
   17068:	bl	16214 <__assert_fail@plt+0x4fb8>
   1706c:	ldr	r1, [sp, #4]
   17070:	cmp	r1, #0
   17074:	beq	1708c <__assert_fail@plt+0x5e30>
   17078:	ldr	r3, [pc, #24]	; 17098 <__assert_fail@plt+0x5e3c>
   1707c:	lsl	r1, r1, #2
   17080:	ldr	r0, [sp, #12]
   17084:	ldr	r3, [r3, #8]
   17088:	blx	r3
   1708c:	add	sp, sp, #16
   17090:	pop	{r4, pc}
   17094:	strdeq	sp, [r2], -r8
   17098:	andeq	pc, r3, r8, lsr #2
   1709c:	push	{r4, lr}
   170a0:	sub	sp, sp, #16
   170a4:	ldr	ip, [pc, #80]	; 170fc <__assert_fail@plt+0x5ea0>
   170a8:	mov	r3, #0
   170ac:	mov	r4, r0
   170b0:	add	r0, sp, #4
   170b4:	str	ip, [sp, #12]
   170b8:	str	r3, [sp, #4]
   170bc:	str	r3, [sp, #8]
   170c0:	bl	16be4 <__assert_fail@plt+0x5988>
   170c4:	mov	r1, r4
   170c8:	add	r2, sp, #4
   170cc:	mov	r0, r4
   170d0:	bl	16584 <__assert_fail@plt+0x5328>
   170d4:	ldr	r1, [sp, #4]
   170d8:	cmp	r1, #0
   170dc:	beq	170f4 <__assert_fail@plt+0x5e98>
   170e0:	ldr	r3, [pc, #24]	; 17100 <__assert_fail@plt+0x5ea4>
   170e4:	lsl	r1, r1, #2
   170e8:	ldr	r0, [sp, #12]
   170ec:	ldr	r3, [r3, #8]
   170f0:	blx	r3
   170f4:	add	sp, sp, #16
   170f8:	pop	{r4, pc}
   170fc:	strdeq	sp, [r2], -r8
   17100:	andeq	pc, r3, r8, lsr #2
   17104:	push	{lr}		; (str lr, [sp, #-4]!)
   17108:	sub	sp, sp, #12
   1710c:	mov	ip, #1
   17110:	str	ip, [sp]
   17114:	bl	165d8 <__assert_fail@plt+0x537c>
   17118:	add	sp, sp, #12
   1711c:	pop	{pc}		; (ldr pc, [sp], #4)
   17120:	push	{lr}		; (str lr, [sp, #-4]!)
   17124:	sub	sp, sp, #12
   17128:	mov	ip, #0
   1712c:	str	ip, [sp]
   17130:	bl	165d8 <__assert_fail@plt+0x537c>
   17134:	add	sp, sp, #12
   17138:	pop	{pc}		; (ldr pc, [sp], #4)
   1713c:	push	{lr}		; (str lr, [sp, #-4]!)
   17140:	sub	sp, sp, #12
   17144:	mov	ip, #2
   17148:	str	ip, [sp]
   1714c:	bl	165d8 <__assert_fail@plt+0x537c>
   17150:	add	sp, sp, #12
   17154:	pop	{pc}		; (ldr pc, [sp], #4)
   17158:	push	{lr}		; (str lr, [sp, #-4]!)
   1715c:	sub	sp, sp, #12
   17160:	mov	ip, #1
   17164:	mov	r3, r2
   17168:	str	ip, [sp]
   1716c:	mov	r2, r1
   17170:	mov	r1, #0
   17174:	bl	165d8 <__assert_fail@plt+0x537c>
   17178:	add	sp, sp, #12
   1717c:	pop	{pc}		; (ldr pc, [sp], #4)
   17180:	push	{lr}		; (str lr, [sp, #-4]!)
   17184:	sub	sp, sp, #12
   17188:	mov	ip, #0
   1718c:	mov	r3, r2
   17190:	str	ip, [sp]
   17194:	mov	r2, r1
   17198:	mov	r1, ip
   1719c:	bl	165d8 <__assert_fail@plt+0x537c>
   171a0:	add	sp, sp, #12
   171a4:	pop	{pc}		; (ldr pc, [sp], #4)
   171a8:	push	{lr}		; (str lr, [sp, #-4]!)
   171ac:	sub	sp, sp, #12
   171b0:	mov	ip, #2
   171b4:	mov	r3, r2
   171b8:	str	ip, [sp]
   171bc:	mov	r2, r1
   171c0:	mov	r1, #0
   171c4:	bl	165d8 <__assert_fail@plt+0x537c>
   171c8:	add	sp, sp, #12
   171cc:	pop	{pc}		; (ldr pc, [sp], #4)
   171d0:	push	{lr}		; (str lr, [sp, #-4]!)
   171d4:	sub	sp, sp, #12
   171d8:	mov	ip, #1
   171dc:	mov	r3, r2
   171e0:	str	ip, [sp]
   171e4:	mov	r2, r1
   171e8:	mov	r1, r0
   171ec:	mov	r0, #0
   171f0:	bl	165d8 <__assert_fail@plt+0x537c>
   171f4:	add	sp, sp, #12
   171f8:	pop	{pc}		; (ldr pc, [sp], #4)
   171fc:	push	{lr}		; (str lr, [sp, #-4]!)
   17200:	sub	sp, sp, #12
   17204:	mov	ip, #0
   17208:	mov	r3, r2
   1720c:	str	ip, [sp]
   17210:	mov	r2, r1
   17214:	mov	r1, r0
   17218:	mov	r0, ip
   1721c:	bl	165d8 <__assert_fail@plt+0x537c>
   17220:	add	sp, sp, #12
   17224:	pop	{pc}		; (ldr pc, [sp], #4)
   17228:	push	{lr}		; (str lr, [sp, #-4]!)
   1722c:	sub	sp, sp, #12
   17230:	mov	ip, #2
   17234:	mov	r3, r2
   17238:	str	ip, [sp]
   1723c:	mov	r2, r1
   17240:	mov	r1, r0
   17244:	mov	r0, #0
   17248:	bl	165d8 <__assert_fail@plt+0x537c>
   1724c:	add	sp, sp, #12
   17250:	pop	{pc}		; (ldr pc, [sp], #4)
   17254:	ldr	ip, [r2, #4]
   17258:	push	{lr}		; (str lr, [sp, #-4]!)
   1725c:	sub	sp, sp, #12
   17260:	lsr	ip, ip, #31
   17264:	mov	r3, r2
   17268:	str	ip, [sp]
   1726c:	mov	r2, r1
   17270:	mov	r1, r0
   17274:	mov	r0, #0
   17278:	bl	165d8 <__assert_fail@plt+0x537c>
   1727c:	add	sp, sp, #12
   17280:	pop	{pc}		; (ldr pc, [sp], #4)
   17284:	push	{lr}		; (str lr, [sp, #-4]!)
   17288:	sub	sp, sp, #12
   1728c:	mov	ip, r1
   17290:	mov	lr, #1
   17294:	ldr	r1, [r1, #4]
   17298:	mov	r3, r2
   1729c:	str	lr, [sp]
   172a0:	add	r2, ip, #8
   172a4:	bl	16350 <__assert_fail@plt+0x50f4>
   172a8:	add	sp, sp, #12
   172ac:	pop	{pc}		; (ldr pc, [sp], #4)
   172b0:	push	{lr}		; (str lr, [sp, #-4]!)
   172b4:	sub	sp, sp, #12
   172b8:	mov	ip, r1
   172bc:	mov	lr, #0
   172c0:	ldr	r1, [r1, #4]
   172c4:	mov	r3, r2
   172c8:	str	lr, [sp]
   172cc:	add	r2, ip, #8
   172d0:	bl	16350 <__assert_fail@plt+0x50f4>
   172d4:	add	sp, sp, #12
   172d8:	pop	{pc}		; (ldr pc, [sp], #4)
   172dc:	push	{lr}		; (str lr, [sp, #-4]!)
   172e0:	sub	sp, sp, #12
   172e4:	mov	ip, r1
   172e8:	mov	lr, #2
   172ec:	ldr	r1, [r1, #4]
   172f0:	mov	r3, r2
   172f4:	str	lr, [sp]
   172f8:	add	r2, ip, #8
   172fc:	bl	16350 <__assert_fail@plt+0x50f4>
   17300:	add	sp, sp, #12
   17304:	pop	{pc}		; (ldr pc, [sp], #4)
   17308:	mov	r3, #1
   1730c:	b	14fd4 <__assert_fail@plt+0x3d78>
   17310:	mov	r3, #0
   17314:	b	14fd4 <__assert_fail@plt+0x3d78>
   17318:	mov	r3, #2
   1731c:	b	14fd4 <__assert_fail@plt+0x3d78>
   17320:	push	{lr}		; (str lr, [sp, #-4]!)
   17324:	sub	sp, sp, #12
   17328:	mov	ip, #2
   1732c:	mov	r3, r2
   17330:	str	ip, [sp]
   17334:	mov	r2, r1
   17338:	mov	r1, #0
   1733c:	bl	165d8 <__assert_fail@plt+0x537c>
   17340:	cmp	r0, #0
   17344:	bne	17350 <__assert_fail@plt+0x60f4>
   17348:	add	sp, sp, #12
   1734c:	pop	{pc}		; (ldr pc, [sp], #4)
   17350:	ldr	r3, [pc, #12]	; 17364 <__assert_fail@plt+0x6108>
   17354:	ldr	r2, [pc, #12]	; 17368 <__assert_fail@plt+0x610c>
   17358:	ldr	r1, [pc, #12]	; 1736c <__assert_fail@plt+0x6110>
   1735c:	ldr	r0, [pc, #12]	; 17370 <__assert_fail@plt+0x6114>
   17360:	bl	1125c <__assert_fail@plt>
   17364:	andeq	sp, r2, ip, lsr #8
   17368:	ldrdeq	r0, [r0], -r9
   1736c:	andeq	sp, r2, r8, ror r5
   17370:	andeq	sp, r2, r4, asr r6
   17374:	push	{lr}		; (str lr, [sp, #-4]!)
   17378:	sub	sp, sp, #12
   1737c:	mov	r3, r1
   17380:	mov	ip, #2
   17384:	mov	r1, #0
   17388:	mov	r2, r0
   1738c:	str	ip, [sp]
   17390:	mov	r0, r1
   17394:	bl	165d8 <__assert_fail@plt+0x537c>
   17398:	clz	r0, r0
   1739c:	lsr	r0, r0, #5
   173a0:	add	sp, sp, #12
   173a4:	pop	{pc}		; (ldr pc, [sp], #4)
   173a8:	ldr	ip, [r2, #4]
   173ac:	push	{r4, r5, lr}
   173b0:	cmp	ip, #0
   173b4:	movle	r3, #0
   173b8:	movgt	r3, #1
   173bc:	cmp	r3, ip, lsr #31
   173c0:	sub	sp, sp, #28
   173c4:	beq	1744c <__assert_fail@plt+0x61f0>
   173c8:	ldr	r3, [pc, #148]	; 17464 <__assert_fail@plt+0x6208>
   173cc:	mov	r5, #0
   173d0:	mov	r4, r2
   173d4:	mov	r2, r1
   173d8:	mov	r1, r0
   173dc:	add	r0, sp, #12
   173e0:	str	r3, [sp, #20]
   173e4:	str	r5, [sp, #12]
   173e8:	str	r5, [sp, #16]
   173ec:	bl	16584 <__assert_fail@plt+0x5328>
   173f0:	mov	ip, #2
   173f4:	mov	r3, r4
   173f8:	mov	r1, r5
   173fc:	add	r2, sp, #12
   17400:	mov	r0, r5
   17404:	str	ip, [sp]
   17408:	bl	165d8 <__assert_fail@plt+0x537c>
   1740c:	ldr	r1, [sp, #12]
   17410:	cmp	r1, r5
   17414:	clz	r4, r0
   17418:	lsr	r4, r4, #5
   1741c:	bne	1742c <__assert_fail@plt+0x61d0>
   17420:	mov	r0, r4
   17424:	add	sp, sp, #28
   17428:	pop	{r4, r5, pc}
   1742c:	ldr	r3, [pc, #52]	; 17468 <__assert_fail@plt+0x620c>
   17430:	ldr	r0, [sp, #20]
   17434:	lsl	r1, r1, #2
   17438:	ldr	r3, [r3, #8]
   1743c:	blx	r3
   17440:	mov	r0, r4
   17444:	add	sp, sp, #28
   17448:	pop	{r4, r5, pc}
   1744c:	bl	1603c <__assert_fail@plt+0x4de0>
   17450:	clz	r4, r0
   17454:	lsr	r4, r4, #5
   17458:	mov	r0, r4
   1745c:	add	sp, sp, #28
   17460:	pop	{r4, r5, pc}
   17464:	strdeq	sp, [r2], -r8
   17468:	andeq	pc, r3, r8, lsr #2
   1746c:	push	{lr}		; (str lr, [sp, #-4]!)
   17470:	sub	sp, sp, #12
   17474:	mov	ip, #1
   17478:	str	ip, [sp]
   1747c:	bl	16ad0 <__assert_fail@plt+0x5874>
   17480:	add	sp, sp, #12
   17484:	pop	{pc}		; (ldr pc, [sp], #4)
   17488:	push	{lr}		; (str lr, [sp, #-4]!)
   1748c:	sub	sp, sp, #12
   17490:	mov	ip, #0
   17494:	str	ip, [sp]
   17498:	bl	16ad0 <__assert_fail@plt+0x5874>
   1749c:	add	sp, sp, #12
   174a0:	pop	{pc}		; (ldr pc, [sp], #4)
   174a4:	push	{lr}		; (str lr, [sp, #-4]!)
   174a8:	sub	sp, sp, #12
   174ac:	mov	ip, #2
   174b0:	str	ip, [sp]
   174b4:	bl	16ad0 <__assert_fail@plt+0x5874>
   174b8:	add	sp, sp, #12
   174bc:	pop	{pc}		; (ldr pc, [sp], #4)
   174c0:	push	{lr}		; (str lr, [sp, #-4]!)
   174c4:	sub	sp, sp, #12
   174c8:	mov	ip, #1
   174cc:	mov	r3, r2
   174d0:	str	ip, [sp]
   174d4:	mov	r2, r1
   174d8:	mov	r1, #0
   174dc:	bl	16ad0 <__assert_fail@plt+0x5874>
   174e0:	add	sp, sp, #12
   174e4:	pop	{pc}		; (ldr pc, [sp], #4)
   174e8:	push	{lr}		; (str lr, [sp, #-4]!)
   174ec:	sub	sp, sp, #12
   174f0:	mov	ip, #0
   174f4:	mov	r3, r2
   174f8:	str	ip, [sp]
   174fc:	mov	r2, r1
   17500:	mov	r1, ip
   17504:	bl	16ad0 <__assert_fail@plt+0x5874>
   17508:	add	sp, sp, #12
   1750c:	pop	{pc}		; (ldr pc, [sp], #4)
   17510:	push	{lr}		; (str lr, [sp, #-4]!)
   17514:	sub	sp, sp, #12
   17518:	mov	ip, #2
   1751c:	mov	r3, r2
   17520:	str	ip, [sp]
   17524:	mov	r2, r1
   17528:	mov	r1, #0
   1752c:	bl	16ad0 <__assert_fail@plt+0x5874>
   17530:	add	sp, sp, #12
   17534:	pop	{pc}		; (ldr pc, [sp], #4)
   17538:	push	{lr}		; (str lr, [sp, #-4]!)
   1753c:	sub	sp, sp, #12
   17540:	mov	ip, #1
   17544:	mov	r3, r2
   17548:	str	ip, [sp]
   1754c:	mov	r2, r1
   17550:	mov	r1, r0
   17554:	mov	r0, #0
   17558:	bl	16ad0 <__assert_fail@plt+0x5874>
   1755c:	add	sp, sp, #12
   17560:	pop	{pc}		; (ldr pc, [sp], #4)
   17564:	push	{lr}		; (str lr, [sp, #-4]!)
   17568:	sub	sp, sp, #12
   1756c:	mov	ip, #2
   17570:	mov	r3, r2
   17574:	str	ip, [sp]
   17578:	mov	r2, r1
   1757c:	mov	r1, r0
   17580:	mov	r0, #0
   17584:	bl	16ad0 <__assert_fail@plt+0x5874>
   17588:	add	sp, sp, #12
   1758c:	pop	{pc}		; (ldr pc, [sp], #4)
   17590:	push	{lr}		; (str lr, [sp, #-4]!)
   17594:	sub	sp, sp, #12
   17598:	mov	r3, r1
   1759c:	mov	ip, #1
   175a0:	mov	r1, #0
   175a4:	mov	r2, r0
   175a8:	str	ip, [sp]
   175ac:	mov	r0, r1
   175b0:	bl	16ad0 <__assert_fail@plt+0x5874>
   175b4:	add	sp, sp, #12
   175b8:	pop	{pc}		; (ldr pc, [sp], #4)
   175bc:	push	{lr}		; (str lr, [sp, #-4]!)
   175c0:	sub	sp, sp, #12
   175c4:	mov	ip, #0
   175c8:	mov	r3, r1
   175cc:	mov	r2, r0
   175d0:	str	ip, [sp]
   175d4:	mov	r1, ip
   175d8:	mov	r0, ip
   175dc:	bl	16ad0 <__assert_fail@plt+0x5874>
   175e0:	add	sp, sp, #12
   175e4:	pop	{pc}		; (ldr pc, [sp], #4)
   175e8:	push	{lr}		; (str lr, [sp, #-4]!)
   175ec:	sub	sp, sp, #12
   175f0:	mov	r3, r1
   175f4:	mov	ip, #2
   175f8:	mov	r1, #0
   175fc:	mov	r2, r0
   17600:	str	ip, [sp]
   17604:	mov	r0, r1
   17608:	bl	16ad0 <__assert_fail@plt+0x5874>
   1760c:	add	sp, sp, #12
   17610:	pop	{pc}		; (ldr pc, [sp], #4)
   17614:	push	{lr}		; (str lr, [sp, #-4]!)
   17618:	sub	sp, sp, #12
   1761c:	mov	ip, #0
   17620:	mov	r3, r2
   17624:	str	ip, [sp]
   17628:	mov	r2, r1
   1762c:	mov	r1, r0
   17630:	mov	r0, ip
   17634:	bl	16ad0 <__assert_fail@plt+0x5874>
   17638:	add	sp, sp, #12
   1763c:	pop	{pc}		; (ldr pc, [sp], #4)
   17640:	b	17614 <__assert_fail@plt+0x63b8>
   17644:	push	{lr}		; (str lr, [sp, #-4]!)
   17648:	sub	sp, sp, #12
   1764c:	mov	ip, #2
   17650:	mov	r3, r2
   17654:	str	ip, [sp]
   17658:	mov	r2, r1
   1765c:	mov	r1, #0
   17660:	bl	16ad0 <__assert_fail@plt+0x5874>
   17664:	cmp	r0, #0
   17668:	bne	17674 <__assert_fail@plt+0x6418>
   1766c:	add	sp, sp, #12
   17670:	pop	{pc}		; (ldr pc, [sp], #4)
   17674:	ldr	r3, [pc, #12]	; 17688 <__assert_fail@plt+0x642c>
   17678:	ldr	r2, [pc, #12]	; 1768c <__assert_fail@plt+0x6430>
   1767c:	ldr	r1, [pc, #12]	; 17690 <__assert_fail@plt+0x6434>
   17680:	ldr	r0, [pc, #12]	; 17694 <__assert_fail@plt+0x6438>
   17684:	bl	1125c <__assert_fail@plt>
   17688:	andeq	sp, r2, ip, lsr r4
   1768c:	andeq	r0, r0, r7, asr sl
   17690:	andeq	sp, r2, r8, ror r5
   17694:	andeq	sp, r2, r4, asr r6
   17698:	push	{lr}		; (str lr, [sp, #-4]!)
   1769c:	sub	sp, sp, #12
   176a0:	mov	r3, r1
   176a4:	mov	ip, #2
   176a8:	mov	r1, #0
   176ac:	mov	r2, r0
   176b0:	str	ip, [sp]
   176b4:	mov	r0, r1
   176b8:	bl	16ad0 <__assert_fail@plt+0x5874>
   176bc:	clz	r0, r0
   176c0:	lsr	r0, r0, #5
   176c4:	add	sp, sp, #12
   176c8:	pop	{pc}		; (ldr pc, [sp], #4)
   176cc:	ldr	r3, [r1, #4]
   176d0:	push	{r4, r5, r6, lr}
   176d4:	cmp	r3, #0
   176d8:	sub	sp, sp, #32
   176dc:	mov	r5, r2
   176e0:	mov	r4, r0
   176e4:	moveq	r1, r2
   176e8:	beq	176f8 <__assert_fail@plt+0x649c>
   176ec:	ldr	r3, [r2, #4]
   176f0:	cmp	r3, #0
   176f4:	bne	17714 <__assert_fail@plt+0x64b8>
   176f8:	bl	15894 <__assert_fail@plt+0x4638>
   176fc:	ldr	r3, [r4, #4]
   17700:	cmp	r3, #0
   17704:	rsblt	r3, r3, #0
   17708:	str	r3, [r4, #4]
   1770c:	add	sp, sp, #32
   17710:	pop	{r4, r5, r6, pc}
   17714:	ldr	r2, [pc, #844]	; 17a68 <__assert_fail@plt+0x680c>
   17718:	mov	r3, #0
   1771c:	add	r0, sp, #8
   17720:	str	r2, [sp, #16]
   17724:	str	r2, [sp, #28]
   17728:	str	r3, [sp, #8]
   1772c:	str	r3, [sp, #12]
   17730:	str	r3, [sp, #20]
   17734:	str	r3, [sp, #24]
   17738:	bl	15894 <__assert_fail@plt+0x4638>
   1773c:	ldr	r3, [sp, #12]
   17740:	add	r0, sp, #8
   17744:	cmp	r3, #0
   17748:	rsblt	r3, r3, #0
   1774c:	str	r3, [sp, #12]
   17750:	bl	164fc <__assert_fail@plt+0x52a0>
   17754:	mov	r1, r5
   17758:	mov	r6, r0
   1775c:	add	r0, sp, #20
   17760:	bl	15894 <__assert_fail@plt+0x4638>
   17764:	ldr	r3, [sp, #24]
   17768:	add	r0, sp, #20
   1776c:	cmp	r3, #0
   17770:	rsblt	r3, r3, #0
   17774:	str	r3, [sp, #24]
   17778:	bl	164fc <__assert_fail@plt+0x52a0>
   1777c:	ldr	r3, [sp, #12]
   17780:	ldr	r2, [sp, #24]
   17784:	cmp	r6, r0
   17788:	movcs	r6, r0
   1778c:	cmp	r3, r2
   17790:	bge	177bc <__assert_fail@plt+0x6560>
   17794:	ldr	r0, [sp, #8]
   17798:	ldr	r1, [sp, #20]
   1779c:	str	r2, [sp, #12]
   177a0:	str	r3, [sp, #24]
   177a4:	ldr	r2, [sp, #16]
   177a8:	ldr	r3, [sp, #28]
   177ac:	str	r0, [sp, #20]
   177b0:	str	r1, [sp, #8]
   177b4:	str	r2, [sp, #28]
   177b8:	str	r3, [sp, #16]
   177bc:	mov	r3, #2
   177c0:	add	r2, sp, #8
   177c4:	str	r3, [sp]
   177c8:	mov	r1, r2
   177cc:	add	r3, sp, #20
   177d0:	mov	r0, #0
   177d4:	bl	165d8 <__assert_fail@plt+0x537c>
   177d8:	ldr	r3, [sp, #12]
   177dc:	cmp	r3, #0
   177e0:	bne	17874 <__assert_fail@plt+0x6618>
   177e4:	ldr	r1, [sp, #20]
   177e8:	ldr	r0, [r4]
   177ec:	str	r1, [r4]
   177f0:	ldr	r1, [sp, #8]
   177f4:	ldr	lr, [r4, #4]
   177f8:	ldr	ip, [sp, #24]
   177fc:	ldr	r2, [r4, #8]
   17800:	ldr	r3, [sp, #28]
   17804:	str	lr, [sp, #24]
   17808:	str	ip, [r4, #4]
   1780c:	str	r0, [sp, #20]
   17810:	str	r2, [sp, #28]
   17814:	str	r3, [r4, #8]
   17818:	cmp	r1, #0
   1781c:	bne	178cc <__assert_fail@plt+0x6670>
   17820:	ldr	r1, [sp, #20]
   17824:	cmp	r1, #0
   17828:	beq	17840 <__assert_fail@plt+0x65e4>
   1782c:	ldr	r3, [pc, #568]	; 17a6c <__assert_fail@plt+0x6810>
   17830:	lsl	r1, r1, #2
   17834:	ldr	r0, [sp, #28]
   17838:	ldr	r3, [r3, #8]
   1783c:	blx	r3
   17840:	mov	r2, r6
   17844:	mov	r1, r4
   17848:	mov	r0, r4
   1784c:	bl	16d98 <__assert_fail@plt+0x5b3c>
   17850:	add	sp, sp, #32
   17854:	pop	{r4, r5, r6, pc}
   17858:	ldr	r5, [sp, #24]
   1785c:	cmp	r5, #1
   17860:	beq	17918 <__assert_fail@plt+0x66bc>
   17864:	add	r1, sp, #8
   17868:	add	r2, sp, #20
   1786c:	mov	r0, r1
   17870:	bl	16584 <__assert_fail@plt+0x5328>
   17874:	add	r0, sp, #8
   17878:	bl	164fc <__assert_fail@plt+0x52a0>
   1787c:	add	r1, sp, #20
   17880:	add	r0, sp, #8
   17884:	bl	1603c <__assert_fail@plt+0x4de0>
   17888:	cmp	r0, #0
   1788c:	beq	178e4 <__assert_fail@plt+0x6688>
   17890:	bge	17858 <__assert_fail@plt+0x65fc>
   17894:	ldr	r3, [sp, #12]
   17898:	ldr	r2, [sp, #24]
   1789c:	ldr	r0, [sp, #8]
   178a0:	ldr	r1, [sp, #20]
   178a4:	mov	r5, r3
   178a8:	str	r3, [sp, #24]
   178ac:	str	r2, [sp, #12]
   178b0:	ldr	r3, [sp, #28]
   178b4:	ldr	r2, [sp, #16]
   178b8:	str	r0, [sp, #20]
   178bc:	str	r1, [sp, #8]
   178c0:	str	r2, [sp, #28]
   178c4:	str	r3, [sp, #16]
   178c8:	b	1785c <__assert_fail@plt+0x6600>
   178cc:	ldr	r3, [pc, #408]	; 17a6c <__assert_fail@plt+0x6810>
   178d0:	lsl	r1, r1, #2
   178d4:	ldr	r0, [sp, #16]
   178d8:	ldr	r3, [r3, #8]
   178dc:	blx	r3
   178e0:	b	17820 <__assert_fail@plt+0x65c4>
   178e4:	ldr	lr, [r4, #4]
   178e8:	ldr	ip, [sp, #12]
   178ec:	ldr	r1, [r4]
   178f0:	ldr	r0, [sp, #8]
   178f4:	ldr	r2, [r4, #8]
   178f8:	ldr	r3, [sp, #16]
   178fc:	str	lr, [sp, #12]
   17900:	str	ip, [r4, #4]
   17904:	str	r1, [sp, #8]
   17908:	str	r0, [r4]
   1790c:	str	r2, [sp, #16]
   17910:	str	r3, [r4, #8]
   17914:	b	17818 <__assert_fail@plt+0x65bc>
   17918:	mov	r2, #2
   1791c:	str	r2, [sp]
   17920:	add	r2, sp, #8
   17924:	add	r3, sp, #20
   17928:	mov	r1, r2
   1792c:	mov	r0, #0
   17930:	bl	165d8 <__assert_fail@plt+0x537c>
   17934:	ldr	r3, [r4]
   17938:	cmp	r3, #0
   1793c:	ldrgt	r0, [r4, #8]
   17940:	ble	17a2c <__assert_fail@plt+0x67d0>
   17944:	ldr	r3, [sp, #16]
   17948:	ldr	r2, [sp, #28]
   1794c:	ldr	r3, [r3]
   17950:	ldr	r2, [r2]
   17954:	orrs	ip, r3, r2
   17958:	beq	17a54 <__assert_fail@plt+0x67f8>
   1795c:	cmp	r3, #0
   17960:	beq	17a00 <__assert_fail@plt+0x67a4>
   17964:	cmp	r2, #0
   17968:	moveq	r2, r3
   1796c:	beq	17a00 <__assert_fail@plt+0x67a4>
   17970:	rsb	r1, ip, #0
   17974:	and	r1, r1, ip
   17978:	ands	ip, r1, #-16777216	; 0xff000000
   1797c:	bne	17a3c <__assert_fail@plt+0x67e0>
   17980:	lsl	r1, r1, #8
   17984:	tst	r1, #-16777216	; 0xff000000
   17988:	add	ip, ip, #8
   1798c:	beq	17980 <__assert_fail@plt+0x6724>
   17990:	cmp	r1, #0
   17994:	blt	179a4 <__assert_fail@plt+0x6748>
   17998:	lsls	r1, r1, #1
   1799c:	add	ip, ip, #1
   179a0:	bpl	17998 <__assert_fail@plt+0x673c>
   179a4:	rsb	ip, ip, #31
   179a8:	lsr	r3, r3, ip
   179ac:	tst	r3, #1
   179b0:	lsr	r2, r2, ip
   179b4:	beq	179cc <__assert_fail@plt+0x6770>
   179b8:	tst	r2, #1
   179bc:	bne	17a44 <__assert_fail@plt+0x67e8>
   179c0:	mov	r1, r2
   179c4:	mov	r2, r3
   179c8:	mov	r3, r1
   179cc:	lsr	r3, r3, #1
   179d0:	tst	r3, #1
   179d4:	beq	179cc <__assert_fail@plt+0x6770>
   179d8:	cmp	r2, r3
   179dc:	beq	179fc <__assert_fail@plt+0x67a0>
   179e0:	cmp	r3, r2
   179e4:	bcs	17a18 <__assert_fail@plt+0x67bc>
   179e8:	sub	r2, r2, r3
   179ec:	lsr	r2, r2, #1
   179f0:	tst	r2, #1
   179f4:	beq	179ec <__assert_fail@plt+0x6790>
   179f8:	b	179d8 <__assert_fail@plt+0x677c>
   179fc:	lsl	r2, r2, ip
   17a00:	adds	r3, r2, #0
   17a04:	movne	r3, #1
   17a08:	str	r2, [r0]
   17a0c:	ldr	r1, [sp, #8]
   17a10:	str	r3, [r4, #4]
   17a14:	b	17818 <__assert_fail@plt+0x65bc>
   17a18:	sub	r3, r3, r2
   17a1c:	lsr	r3, r3, #1
   17a20:	tst	r3, #1
   17a24:	beq	17a1c <__assert_fail@plt+0x67c0>
   17a28:	b	179d8 <__assert_fail@plt+0x677c>
   17a2c:	mov	r1, r5
   17a30:	mov	r0, r4
   17a34:	bl	13440 <__assert_fail@plt+0x21e4>
   17a38:	b	17944 <__assert_fail@plt+0x66e8>
   17a3c:	mov	ip, #0
   17a40:	b	17990 <__assert_fail@plt+0x6734>
   17a44:	mov	r1, r3
   17a48:	mov	r3, r2
   17a4c:	mov	r2, r1
   17a50:	b	179d8 <__assert_fail@plt+0x677c>
   17a54:	ldr	r3, [pc, #20]	; 17a70 <__assert_fail@plt+0x6814>
   17a58:	ldr	r2, [pc, #20]	; 17a74 <__assert_fail@plt+0x6818>
   17a5c:	ldr	r1, [pc, #20]	; 17a78 <__assert_fail@plt+0x681c>
   17a60:	ldr	r0, [pc, #20]	; 17a7c <__assert_fail@plt+0x6820>
   17a64:	bl	1125c <__assert_fail@plt>
   17a68:	strdeq	sp, [r2], -r8
   17a6c:	andeq	pc, r3, r8, lsr #2
   17a70:	andeq	sp, r2, ip, asr #8
   17a74:	andeq	r0, r0, r7, ror #20
   17a78:	andeq	sp, r2, r8, ror r5
   17a7c:	andeq	sp, r2, r4, lsr r8
   17a80:	push	{r4, r5, r6, lr}
   17a84:	sub	sp, sp, #16
   17a88:	ldr	ip, [pc, #188]	; 17b4c <__assert_fail@plt+0x68f0>
   17a8c:	mov	r3, #0
   17a90:	subs	r5, r2, #0
   17a94:	mov	r4, r0
   17a98:	str	ip, [sp, #12]
   17a9c:	str	r3, [sp, #4]
   17aa0:	str	r3, [sp, #8]
   17aa4:	bne	17b18 <__assert_fail@plt+0x68bc>
   17aa8:	add	r2, sp, #4
   17aac:	mov	r0, r2
   17ab0:	bl	176cc <__assert_fail@plt+0x6470>
   17ab4:	cmp	r4, #0
   17ab8:	ldreq	r1, [sp, #4]
   17abc:	beq	17af0 <__assert_fail@plt+0x6894>
   17ac0:	ldr	lr, [sp, #8]
   17ac4:	ldr	ip, [r4, #4]
   17ac8:	ldr	r0, [sp, #4]
   17acc:	ldr	r1, [r4]
   17ad0:	ldr	r2, [sp, #12]
   17ad4:	ldr	r3, [r4, #8]
   17ad8:	str	lr, [r4, #4]
   17adc:	str	ip, [sp, #8]
   17ae0:	str	r0, [r4]
   17ae4:	str	r1, [sp, #4]
   17ae8:	str	r2, [r4, #8]
   17aec:	str	r3, [sp, #12]
   17af0:	cmp	r1, #0
   17af4:	beq	17b0c <__assert_fail@plt+0x68b0>
   17af8:	ldr	r3, [pc, #80]	; 17b50 <__assert_fail@plt+0x68f4>
   17afc:	lsl	r1, r1, #2
   17b00:	ldr	r0, [sp, #12]
   17b04:	ldr	r3, [r3, #8]
   17b08:	blx	r3
   17b0c:	mov	r0, r5
   17b10:	add	sp, sp, #16
   17b14:	pop	{r4, r5, r6, pc}
   17b18:	mov	r6, r1
   17b1c:	add	r0, sp, #4
   17b20:	mov	r1, r5
   17b24:	bl	137f8 <__assert_fail@plt+0x259c>
   17b28:	add	r2, sp, #4
   17b2c:	mov	r1, r6
   17b30:	mov	r0, r2
   17b34:	bl	176cc <__assert_fail@plt+0x6470>
   17b38:	ldr	r5, [sp, #8]
   17b3c:	cmp	r5, #0
   17b40:	ldrne	r3, [sp, #12]
   17b44:	ldrne	r5, [r3]
   17b48:	b	17ab4 <__assert_fail@plt+0x6858>
   17b4c:	strdeq	sp, [r2], -r8
   17b50:	andeq	pc, r3, r8, lsr #2
   17b54:	push	{r4, r5, r6, lr}
   17b58:	sub	sp, sp, #16
   17b5c:	ldr	lr, [r1, #4]
   17b60:	cmp	lr, #0
   17b64:	beq	17b78 <__assert_fail@plt+0x691c>
   17b68:	ldr	lr, [r2, #4]
   17b6c:	mov	r5, r2
   17b70:	cmp	lr, #0
   17b74:	bne	17b88 <__assert_fail@plt+0x692c>
   17b78:	mov	r3, #0
   17b7c:	str	r3, [r0, #4]
   17b80:	add	sp, sp, #16
   17b84:	pop	{r4, r5, r6, pc}
   17b88:	ldr	ip, [pc, #132]	; 17c14 <__assert_fail@plt+0x69b8>
   17b8c:	mov	r3, #0
   17b90:	mov	r6, r0
   17b94:	add	r0, sp, #4
   17b98:	str	ip, [sp, #12]
   17b9c:	str	r3, [sp, #4]
   17ba0:	str	r3, [sp, #8]
   17ba4:	mov	r4, r1
   17ba8:	bl	176cc <__assert_fail@plt+0x6470>
   17bac:	add	r2, sp, #4
   17bb0:	mov	r0, r2
   17bb4:	mov	r1, r4
   17bb8:	bl	17320 <__assert_fail@plt+0x60c4>
   17bbc:	add	r1, sp, #4
   17bc0:	mov	r2, r5
   17bc4:	mov	r0, r6
   17bc8:	bl	16be4 <__assert_fail@plt+0x5988>
   17bcc:	ldr	r1, [sp, #4]
   17bd0:	cmp	r1, #0
   17bd4:	bne	17bfc <__assert_fail@plt+0x69a0>
   17bd8:	mov	r1, r6
   17bdc:	mov	r0, r6
   17be0:	bl	15894 <__assert_fail@plt+0x4638>
   17be4:	ldr	r3, [r6, #4]
   17be8:	cmp	r3, #0
   17bec:	rsblt	r3, r3, #0
   17bf0:	str	r3, [r6, #4]
   17bf4:	add	sp, sp, #16
   17bf8:	pop	{r4, r5, r6, pc}
   17bfc:	ldr	r3, [pc, #20]	; 17c18 <__assert_fail@plt+0x69bc>
   17c00:	lsl	r1, r1, #2
   17c04:	ldr	r0, [sp, #12]
   17c08:	ldr	r3, [r3, #8]
   17c0c:	blx	r3
   17c10:	b	17bd8 <__assert_fail@plt+0x697c>
   17c14:	strdeq	sp, [r2], -r8
   17c18:	andeq	pc, r3, r8, lsr #2
   17c1c:	subs	ip, r2, #0
   17c20:	beq	17c90 <__assert_fail@plt+0x6a34>
   17c24:	push	{r4, r5, r6, lr}
   17c28:	mov	r5, r1
   17c2c:	ldr	lr, [r1, #4]
   17c30:	cmp	lr, #0
   17c34:	bne	17c44 <__assert_fail@plt+0x69e8>
   17c38:	mov	r3, #0
   17c3c:	str	r3, [r0, #4]
   17c40:	pop	{r4, r5, r6, pc}
   17c44:	mov	r4, r0
   17c48:	mov	r0, #0
   17c4c:	mov	r6, ip
   17c50:	bl	17a80 <__assert_fail@plt+0x6824>
   17c54:	mov	r1, r0
   17c58:	mov	r0, r6
   17c5c:	bl	2c1b4 <__assert_fail@plt+0x1af58>
   17c60:	mov	r1, r5
   17c64:	mov	r2, r0
   17c68:	mov	r0, r4
   17c6c:	bl	16ce0 <__assert_fail@plt+0x5a84>
   17c70:	mov	r1, r4
   17c74:	mov	r0, r4
   17c78:	bl	15894 <__assert_fail@plt+0x4638>
   17c7c:	ldr	r3, [r4, #4]
   17c80:	cmp	r3, #0
   17c84:	rsblt	r3, r3, #0
   17c88:	str	r3, [r4, #4]
   17c8c:	pop	{r4, r5, r6, pc}
   17c90:	mov	r3, #0
   17c94:	str	r3, [r0, #4]
   17c98:	bx	lr
   17c9c:	push	{r4, r5, r6, r7, r8, lr}
   17ca0:	sub	sp, sp, #16
   17ca4:	ldr	ip, [pc, #192]	; 17d6c <__assert_fail@plt+0x6b10>
   17ca8:	mov	r3, #0
   17cac:	mov	r8, r0
   17cb0:	mov	r7, r1
   17cb4:	add	r0, sp, #4
   17cb8:	mov	r1, #1
   17cbc:	mov	r6, r2
   17cc0:	str	ip, [sp, #12]
   17cc4:	str	r3, [sp, #4]
   17cc8:	str	r3, [sp, #8]
   17ccc:	mov	r5, #32
   17cd0:	bl	137f8 <__assert_fail@plt+0x259c>
   17cd4:	mov	r4, #-2147483648	; 0x80000000
   17cd8:	b	17ce8 <__assert_fail@plt+0x6a8c>
   17cdc:	subs	r5, r5, #1
   17ce0:	lsr	r4, r4, #1
   17ce4:	beq	17d1c <__assert_fail@plt+0x6ac0>
   17ce8:	add	r2, sp, #4
   17cec:	mov	r1, r2
   17cf0:	mov	r0, r2
   17cf4:	bl	16be4 <__assert_fail@plt+0x5988>
   17cf8:	tst	r4, r6
   17cfc:	beq	17cdc <__assert_fail@plt+0x6a80>
   17d00:	add	r1, sp, #4
   17d04:	mov	r2, r7
   17d08:	mov	r0, r1
   17d0c:	bl	16be4 <__assert_fail@plt+0x5988>
   17d10:	subs	r5, r5, #1
   17d14:	lsr	r4, r4, #1
   17d18:	bne	17ce8 <__assert_fail@plt+0x6a8c>
   17d1c:	ldr	r1, [r8]
   17d20:	ldr	lr, [sp, #4]
   17d24:	ldr	ip, [r8, #4]
   17d28:	ldr	r2, [sp, #8]
   17d2c:	ldr	r0, [r8, #8]
   17d30:	ldr	r3, [sp, #12]
   17d34:	cmp	r1, #0
   17d38:	str	r1, [sp, #4]
   17d3c:	str	lr, [r8]
   17d40:	str	ip, [sp, #8]
   17d44:	str	r2, [r8, #4]
   17d48:	str	r0, [sp, #12]
   17d4c:	str	r3, [r8, #8]
   17d50:	beq	17d64 <__assert_fail@plt+0x6b08>
   17d54:	ldr	r3, [pc, #20]	; 17d70 <__assert_fail@plt+0x6b14>
   17d58:	lsl	r1, r1, #2
   17d5c:	ldr	r3, [r3, #8]
   17d60:	blx	r3
   17d64:	add	sp, sp, #16
   17d68:	pop	{r4, r5, r6, r7, r8, pc}
   17d6c:	strdeq	sp, [r2], -r8
   17d70:	andeq	pc, r3, r8, lsr #2
   17d74:	push	{r4, r5, lr}
   17d78:	sub	sp, sp, #28
   17d7c:	ldr	ip, [pc, #104]	; 17dec <__assert_fail@plt+0x6b90>
   17d80:	mov	r3, #0
   17d84:	cmp	r1, #0
   17d88:	mov	r5, r0
   17d8c:	str	ip, [sp, #20]
   17d90:	str	r3, [sp, #12]
   17d94:	str	r3, [sp, #16]
   17d98:	addeq	r4, sp, #12
   17d9c:	bne	17dd4 <__assert_fail@plt+0x6b78>
   17da0:	mov	r1, r4
   17da4:	mov	r0, r5
   17da8:	bl	17c9c <__assert_fail@plt+0x6a40>
   17dac:	ldr	r1, [sp, #12]
   17db0:	cmp	r1, #0
   17db4:	beq	17dcc <__assert_fail@plt+0x6b70>
   17db8:	ldr	r3, [pc, #48]	; 17df0 <__assert_fail@plt+0x6b94>
   17dbc:	lsl	r1, r1, #2
   17dc0:	ldr	r0, [sp, #20]
   17dc4:	ldr	r3, [r3, #8]
   17dc8:	blx	r3
   17dcc:	add	sp, sp, #28
   17dd0:	pop	{r4, r5, pc}
   17dd4:	add	r4, sp, #12
   17dd8:	mov	r0, r4
   17ddc:	str	r2, [sp, #4]
   17de0:	bl	137f8 <__assert_fail@plt+0x259c>
   17de4:	ldr	r2, [sp, #4]
   17de8:	b	17da0 <__assert_fail@plt+0x6b44>
   17dec:	strdeq	sp, [r2], -r8
   17df0:	andeq	pc, r3, r8, lsr #2
   17df4:	push	{r4, r5, r6, r7, r8, lr}
   17df8:	mov	r4, r1
   17dfc:	cmp	r1, #0
   17e00:	addeq	r1, r1, #1
   17e04:	cmp	r1, #0
   17e08:	mov	r7, r2
   17e0c:	mov	r5, r0
   17e10:	streq	r1, [r0, #4]
   17e14:	bne	17e4c <__assert_fail@plt+0x6bf0>
   17e18:	add	r6, r7, #1
   17e1c:	cmp	r6, #1
   17e20:	popls	{r4, r5, r6, r7, r8, pc}
   17e24:	cmp	r4, r6
   17e28:	popls	{r4, r5, r6, r7, r8, pc}
   17e2c:	sub	r4, r4, r7
   17e30:	mov	r2, r4
   17e34:	mov	r1, r5
   17e38:	mov	r0, r5
   17e3c:	bl	16ce0 <__assert_fail@plt+0x5a84>
   17e40:	cmp	r6, r4
   17e44:	bcc	17e2c <__assert_fail@plt+0x6bd0>
   17e48:	pop	{r4, r5, r6, r7, r8, pc}
   17e4c:	bl	137f8 <__assert_fail@plt+0x259c>
   17e50:	b	17e18 <__assert_fail@plt+0x6bbc>
   17e54:	mov	r2, #2
   17e58:	b	17df4 <__assert_fail@plt+0x6b98>
   17e5c:	mov	r2, #1
   17e60:	b	17df4 <__assert_fail@plt+0x6b98>
   17e64:	cmp	r2, r1
   17e68:	push	{r4, r5, r6, r7, lr}
   17e6c:	mov	r4, r1
   17e70:	sub	sp, sp, #20
   17e74:	mov	r6, r2
   17e78:	mov	r5, r0
   17e7c:	bls	17f44 <__assert_fail@plt+0x6ce8>
   17e80:	mov	r3, #0
   17e84:	cmp	r2, r1, lsr #1
   17e88:	str	r3, [r0, #4]
   17e8c:	bhi	17f1c <__assert_fail@plt+0x6cc0>
   17e90:	ldr	r1, [pc, #192]	; 17f58 <__assert_fail@plt+0x6cfc>
   17e94:	add	r7, sp, #4
   17e98:	mov	r3, #0
   17e9c:	str	r1, [sp, #12]
   17ea0:	mov	r0, r7
   17ea4:	mov	r2, #1
   17ea8:	mov	r1, r6
   17eac:	str	r3, [sp, #4]
   17eb0:	str	r3, [sp, #8]
   17eb4:	bl	17df4 <__assert_fail@plt+0x6b98>
   17eb8:	cmp	r6, #0
   17ebc:	beq	17ee4 <__assert_fail@plt+0x6c88>
   17ec0:	sub	r6, r4, r6
   17ec4:	sub	r3, r4, #1
   17ec8:	mov	r2, r4
   17ecc:	mov	r1, r5
   17ed0:	mov	r4, r3
   17ed4:	mov	r0, r5
   17ed8:	bl	16ce0 <__assert_fail@plt+0x5a84>
   17edc:	cmp	r4, r6
   17ee0:	bne	17ec4 <__assert_fail@plt+0x6c68>
   17ee4:	mov	r1, r5
   17ee8:	mov	r2, r7
   17eec:	mov	r0, r5
   17ef0:	bl	17320 <__assert_fail@plt+0x60c4>
   17ef4:	ldr	r1, [sp, #4]
   17ef8:	cmp	r1, #0
   17efc:	beq	17f14 <__assert_fail@plt+0x6cb8>
   17f00:	ldr	r3, [pc, #84]	; 17f5c <__assert_fail@plt+0x6d00>
   17f04:	lsl	r1, r1, #2
   17f08:	ldr	r0, [sp, #12]
   17f0c:	ldr	r3, [r3, #8]
   17f10:	blx	r3
   17f14:	add	sp, sp, #20
   17f18:	pop	{r4, r5, r6, r7, pc}
   17f1c:	ldr	ip, [pc, #52]	; 17f58 <__assert_fail@plt+0x6cfc>
   17f20:	add	r7, sp, #4
   17f24:	mov	r1, r3
   17f28:	mov	r0, r7
   17f2c:	mov	r2, #1
   17f30:	str	r3, [sp, #4]
   17f34:	str	r3, [sp, #8]
   17f38:	str	ip, [sp, #12]
   17f3c:	bl	17df4 <__assert_fail@plt+0x6b98>
   17f40:	b	17ee4 <__assert_fail@plt+0x6c88>
   17f44:	mov	r1, #1
   17f48:	bl	137f8 <__assert_fail@plt+0x259c>
   17f4c:	cmp	r6, r4, lsr #1
   17f50:	subhi	r6, r4, r6
   17f54:	b	17e90 <__assert_fail@plt+0x6c34>
   17f58:	strdeq	sp, [r2], -r8
   17f5c:	andeq	pc, r3, r8, lsr #2
   17f60:	ldr	ip, [r0, #4]
   17f64:	push	{r4, lr}
   17f68:	lsr	lr, r1, #5
   17f6c:	eor	r3, ip, ip, asr #31
   17f70:	sub	r3, r3, ip, asr #31
   17f74:	cmp	r3, lr
   17f78:	ble	17fd8 <__assert_fail@plt+0x6d7c>
   17f7c:	ldr	r2, [r0, #8]
   17f80:	and	r1, r1, #31
   17f84:	cmp	ip, #0
   17f88:	ldr	r4, [r2, lr, lsl #2]
   17f8c:	add	r2, r2, lr, lsl #2
   17f90:	lsr	ip, r4, r1
   17f94:	and	r0, ip, #1
   17f98:	popge	{r4, pc}
   17f9c:	cmp	r1, #0
   17fa0:	mov	r3, lr
   17fa4:	beq	17fcc <__assert_fail@plt+0x6d70>
   17fa8:	rsb	r1, r1, #32
   17fac:	lsls	r1, r4, r1
   17fb0:	beq	17fcc <__assert_fail@plt+0x6d70>
   17fb4:	mvn	ip, ip
   17fb8:	and	r0, ip, #1
   17fbc:	pop	{r4, pc}
   17fc0:	ldr	r1, [r2, #-4]!
   17fc4:	cmp	r1, #0
   17fc8:	bne	17fb4 <__assert_fail@plt+0x6d58>
   17fcc:	subs	r3, r3, #1
   17fd0:	bcs	17fc0 <__assert_fail@plt+0x6d64>
   17fd4:	pop	{r4, pc}
   17fd8:	lsr	r0, ip, #31
   17fdc:	pop	{r4, pc}
   17fe0:	push	{r4, r5, r6, lr}
   17fe4:	mov	r4, r0
   17fe8:	mov	r5, r1
   17fec:	bl	17f60 <__assert_fail@plt+0x6d04>
   17ff0:	cmp	r0, #0
   17ff4:	popne	{r4, r5, r6, pc}
   17ff8:	ldr	r3, [r4, #4]
   17ffc:	cmp	r3, #0
   18000:	blt	18014 <__assert_fail@plt+0x6db8>
   18004:	mov	r1, r5
   18008:	mov	r0, r4
   1800c:	pop	{r4, r5, r6, lr}
   18010:	b	1360c <__assert_fail@plt+0x23b0>
   18014:	mov	r2, r5
   18018:	ldr	r1, [r4, #8]
   1801c:	add	r0, r4, #4
   18020:	pop	{r4, r5, r6, lr}
   18024:	b	13718 <__assert_fail@plt+0x24bc>
   18028:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1802c:	sub	sp, sp, #92	; 0x5c
   18030:	ldr	r4, [r3, #4]
   18034:	str	r3, [sp, #12]
   18038:	cmp	r4, #0
   1803c:	mov	sl, r1
   18040:	mov	r9, r2
   18044:	mov	fp, r0
   18048:	beq	185b8 <__assert_fail@plt+0x735c>
   1804c:	ldr	r3, [sp, #128]	; 0x80
   18050:	ldr	r3, [r3, #4]
   18054:	cmp	r3, #0
   18058:	bne	180a8 <__assert_fail@plt+0x6e4c>
   1805c:	ldr	r1, [sp, #12]
   18060:	bl	15894 <__assert_fail@plt+0x4638>
   18064:	ldr	r3, [fp, #4]
   18068:	cmp	r3, #0
   1806c:	rsblt	r3, r3, #0
   18070:	cmp	sl, #0
   18074:	str	r3, [fp, #4]
   18078:	beq	18094 <__assert_fail@plt+0x6e38>
   1807c:	lsr	r1, r4, #31
   18080:	mov	r0, sl
   18084:	cmp	r4, #0
   18088:	rsble	r1, r1, #0
   1808c:	rsbgt	r1, r1, #1
   18090:	bl	15830 <__assert_fail@plt+0x45d4>
   18094:	cmp	r9, #0
   18098:	movne	r3, #0
   1809c:	strne	r3, [r9, #4]
   180a0:	add	sp, sp, #92	; 0x5c
   180a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180a8:	ldr	r6, [sp, #12]
   180ac:	ldr	r2, [pc, #1640]	; 1871c <__assert_fail@plt+0x74c0>
   180b0:	mov	r3, #0
   180b4:	mov	r1, r6
   180b8:	add	r0, sp, #16
   180bc:	str	r2, [sp, #24]
   180c0:	str	r2, [sp, #36]	; 0x24
   180c4:	str	r2, [sp, #48]	; 0x30
   180c8:	str	r2, [sp, #60]	; 0x3c
   180cc:	str	r2, [sp, #72]	; 0x48
   180d0:	str	r2, [sp, #84]	; 0x54
   180d4:	str	r3, [sp, #16]
   180d8:	str	r3, [sp, #20]
   180dc:	str	r3, [sp, #28]
   180e0:	str	r3, [sp, #32]
   180e4:	str	r3, [sp, #40]	; 0x28
   180e8:	str	r3, [sp, #44]	; 0x2c
   180ec:	str	r3, [sp, #52]	; 0x34
   180f0:	str	r3, [sp, #56]	; 0x38
   180f4:	str	r3, [sp, #64]	; 0x40
   180f8:	str	r3, [sp, #68]	; 0x44
   180fc:	str	r3, [sp, #76]	; 0x4c
   18100:	str	r3, [sp, #80]	; 0x50
   18104:	bl	15894 <__assert_fail@plt+0x4638>
   18108:	ldr	r3, [sp, #20]
   1810c:	add	r0, sp, #16
   18110:	cmp	r3, #0
   18114:	rsblt	r3, r3, #0
   18118:	str	r3, [sp, #20]
   1811c:	bl	164fc <__assert_fail@plt+0x52a0>
   18120:	ldr	r1, [sp, #128]	; 0x80
   18124:	mov	r4, r0
   18128:	add	r0, sp, #28
   1812c:	bl	15894 <__assert_fail@plt+0x4638>
   18130:	ldr	r3, [sp, #32]
   18134:	add	r0, sp, #28
   18138:	cmp	r3, #0
   1813c:	rsblt	r3, r3, #0
   18140:	str	r3, [sp, #32]
   18144:	bl	164fc <__assert_fail@plt+0x52a0>
   18148:	ldr	r3, [sp, #20]
   1814c:	ldr	r2, [sp, #32]
   18150:	cmp	r4, r0
   18154:	movcc	r5, r4
   18158:	movcs	r5, r0
   1815c:	cmp	r3, r2
   18160:	sub	r4, r4, r5
   18164:	sub	r7, r0, r5
   18168:	blt	18604 <__assert_fail@plt+0x73a8>
   1816c:	add	r2, sp, #16
   18170:	mov	r3, #2
   18174:	mov	r1, r2
   18178:	str	r3, [sp]
   1817c:	add	r0, sp, #76	; 0x4c
   18180:	add	r3, sp, #28
   18184:	bl	165d8 <__assert_fail@plt+0x537c>
   18188:	add	r1, sp, #76	; 0x4c
   1818c:	mov	r0, r1
   18190:	mov	r2, r4
   18194:	bl	16d98 <__assert_fail@plt+0x5b3c>
   18198:	mov	r1, r7
   1819c:	add	r0, sp, #52	; 0x34
   181a0:	bl	17fe0 <__assert_fail@plt+0x6d84>
   181a4:	ldr	r3, [sp, #20]
   181a8:	add	r7, r4, r7
   181ac:	cmp	r3, #0
   181b0:	ble	182b4 <__assert_fail@plt+0x7058>
   181b4:	add	r0, sp, #16
   181b8:	bl	164fc <__assert_fail@plt+0x52a0>
   181bc:	add	r6, sp, #64	; 0x40
   181c0:	add	r1, r4, r0
   181c4:	mov	r8, r0
   181c8:	mov	r0, r6
   181cc:	bl	17fe0 <__assert_fail@plt+0x6d84>
   181d0:	add	r7, r7, r8
   181d4:	add	r4, sp, #40	; 0x28
   181d8:	b	1823c <__assert_fail@plt+0x6fe0>
   181dc:	add	r1, sp, #16
   181e0:	mov	r0, r1
   181e4:	add	r2, sp, #28
   181e8:	bl	16584 <__assert_fail@plt+0x5328>
   181ec:	add	r2, sp, #76	; 0x4c
   181f0:	mov	r0, r2
   181f4:	mov	r1, r6
   181f8:	bl	16214 <__assert_fail@plt+0x4fb8>
   181fc:	add	r2, sp, #52	; 0x34
   18200:	mov	r0, r2
   18204:	mov	r1, r4
   18208:	bl	16214 <__assert_fail@plt+0x4fb8>
   1820c:	add	r0, sp, #16
   18210:	bl	164fc <__assert_fail@plt+0x52a0>
   18214:	mov	r1, r6
   18218:	mov	r2, r0
   1821c:	mov	r8, r0
   18220:	mov	r0, r6
   18224:	bl	16d98 <__assert_fail@plt+0x5b3c>
   18228:	mov	r2, r8
   1822c:	mov	r1, r4
   18230:	mov	r0, r4
   18234:	bl	16d98 <__assert_fail@plt+0x5b3c>
   18238:	add	r7, r7, r8
   1823c:	add	r1, sp, #28
   18240:	add	r0, sp, #16
   18244:	bl	1603c <__assert_fail@plt+0x4de0>
   18248:	cmp	r0, #0
   1824c:	beq	182c8 <__assert_fail@plt+0x706c>
   18250:	bge	181dc <__assert_fail@plt+0x6f80>
   18254:	add	r1, sp, #28
   18258:	add	r2, sp, #16
   1825c:	mov	r0, r1
   18260:	bl	16584 <__assert_fail@plt+0x5328>
   18264:	add	r2, sp, #76	; 0x4c
   18268:	mov	r1, r6
   1826c:	mov	r0, r6
   18270:	bl	16214 <__assert_fail@plt+0x4fb8>
   18274:	add	r2, sp, #52	; 0x34
   18278:	mov	r1, r4
   1827c:	mov	r0, r4
   18280:	bl	16214 <__assert_fail@plt+0x4fb8>
   18284:	add	r0, sp, #28
   18288:	bl	164fc <__assert_fail@plt+0x52a0>
   1828c:	add	r1, sp, #76	; 0x4c
   18290:	mov	r8, r0
   18294:	mov	r2, r0
   18298:	mov	r0, r1
   1829c:	bl	16d98 <__assert_fail@plt+0x5b3c>
   182a0:	add	r1, sp, #52	; 0x34
   182a4:	mov	r2, r8
   182a8:	mov	r0, r1
   182ac:	bl	16d98 <__assert_fail@plt+0x5b3c>
   182b0:	b	18238 <__assert_fail@plt+0x6fdc>
   182b4:	add	r6, sp, #64	; 0x40
   182b8:	mov	r1, r4
   182bc:	mov	r0, r6
   182c0:	bl	17fe0 <__assert_fail@plt+0x6d84>
   182c4:	add	r4, sp, #40	; 0x28
   182c8:	add	r1, sp, #28
   182cc:	mov	r2, r5
   182d0:	mov	r0, r1
   182d4:	bl	16d98 <__assert_fail@plt+0x5b3c>
   182d8:	mov	r1, r4
   182dc:	mov	r0, r4
   182e0:	bl	15894 <__assert_fail@plt+0x4638>
   182e4:	ldr	r3, [sp, #44]	; 0x2c
   182e8:	add	r2, sp, #28
   182ec:	rsb	r3, r3, #0
   182f0:	ldr	r1, [sp, #128]	; 0x80
   182f4:	add	r0, sp, #52	; 0x34
   182f8:	str	r3, [sp, #44]	; 0x2c
   182fc:	bl	17320 <__assert_fail@plt+0x60c4>
   18300:	add	r1, sp, #52	; 0x34
   18304:	mov	r0, r1
   18308:	bl	15894 <__assert_fail@plt+0x4638>
   1830c:	ldr	r3, [sp, #56]	; 0x38
   18310:	add	r2, sp, #28
   18314:	cmp	r3, #0
   18318:	rsblt	r3, r3, #0
   1831c:	ldr	r1, [sp, #12]
   18320:	add	r0, sp, #76	; 0x4c
   18324:	str	r3, [sp, #56]	; 0x38
   18328:	bl	17320 <__assert_fail@plt+0x60c4>
   1832c:	add	r1, sp, #76	; 0x4c
   18330:	mov	r0, r1
   18334:	bl	15894 <__assert_fail@plt+0x4638>
   18338:	ldr	r3, [sp, #80]	; 0x50
   1833c:	sub	r5, r7, #1
   18340:	cmp	r3, #0
   18344:	rsblt	r3, r3, #0
   18348:	cmp	r7, #0
   1834c:	str	r3, [sp, #80]	; 0x50
   18350:	movne	r8, #2
   18354:	movne	r7, #1
   18358:	beq	18434 <__assert_fail@plt+0x71d8>
   1835c:	ldr	r3, [sp, #48]	; 0x30
   18360:	ldr	r1, [sp, #44]	; 0x2c
   18364:	ldr	r3, [r3]
   18368:	cmp	r1, #0
   1836c:	moveq	r3, #0
   18370:	andne	r3, r3, #1
   18374:	cmp	r3, #0
   18378:	bne	1839c <__assert_fail@plt+0x7140>
   1837c:	ldr	r3, [sp, #72]	; 0x48
   18380:	ldr	r2, [sp, #68]	; 0x44
   18384:	ldr	r3, [r3]
   18388:	cmp	r2, #0
   1838c:	moveq	r3, #0
   18390:	andne	r3, r3, #1
   18394:	cmp	r3, #0
   18398:	beq	183fc <__assert_fail@plt+0x71a0>
   1839c:	add	r2, sp, #52	; 0x34
   183a0:	mov	r1, r4
   183a4:	mov	r0, r4
   183a8:	bl	16584 <__assert_fail@plt+0x5328>
   183ac:	add	r2, sp, #76	; 0x4c
   183b0:	mov	r1, r6
   183b4:	mov	r0, r6
   183b8:	bl	16214 <__assert_fail@plt+0x4fb8>
   183bc:	ldr	r3, [sp, #72]	; 0x48
   183c0:	ldr	r2, [sp, #68]	; 0x44
   183c4:	ldr	r3, [r3]
   183c8:	cmp	r2, #0
   183cc:	moveq	r3, #0
   183d0:	andne	r3, r3, #1
   183d4:	cmp	r3, #0
   183d8:	bne	18708 <__assert_fail@plt+0x74ac>
   183dc:	ldr	r3, [sp, #48]	; 0x30
   183e0:	ldr	r1, [sp, #44]	; 0x2c
   183e4:	ldr	r3, [r3]
   183e8:	cmp	r1, #0
   183ec:	moveq	r3, #0
   183f0:	andne	r3, r3, #1
   183f4:	cmp	r3, #0
   183f8:	bne	18708 <__assert_fail@plt+0x74ac>
   183fc:	mov	r3, r7
   18400:	add	r2, sp, #48	; 0x30
   18404:	mov	r0, r4
   18408:	str	r8, [sp]
   1840c:	bl	16350 <__assert_fail@plt+0x50f4>
   18410:	sub	r5, r5, #1
   18414:	ldr	r1, [sp, #68]	; 0x44
   18418:	str	r8, [sp]
   1841c:	mov	r3, r7
   18420:	add	r2, sp, #72	; 0x48
   18424:	mov	r0, r6
   18428:	bl	16350 <__assert_fail@plt+0x50f4>
   1842c:	cmn	r5, #1
   18430:	bne	1835c <__assert_fail@plt+0x7100>
   18434:	add	r2, sp, #52	; 0x34
   18438:	mov	r0, r2
   1843c:	mov	r1, r4
   18440:	bl	16214 <__assert_fail@plt+0x4fb8>
   18444:	add	r1, sp, #52	; 0x34
   18448:	mov	r0, r4
   1844c:	bl	16130 <__assert_fail@plt+0x4ed4>
   18450:	cmp	r0, #0
   18454:	ble	18498 <__assert_fail@plt+0x723c>
   18458:	ldr	r1, [sp, #44]	; 0x2c
   1845c:	ldr	r0, [sp, #56]	; 0x38
   18460:	ldr	r3, [sp, #40]	; 0x28
   18464:	str	r1, [sp, #56]	; 0x38
   18468:	str	r0, [sp, #44]	; 0x2c
   1846c:	ldr	r1, [sp, #52]	; 0x34
   18470:	ldr	r0, [sp, #48]	; 0x30
   18474:	str	r3, [sp, #52]	; 0x34
   18478:	ldr	r3, [sp, #60]	; 0x3c
   1847c:	str	r1, [sp, #40]	; 0x28
   18480:	str	r0, [sp, #60]	; 0x3c
   18484:	add	r2, sp, #76	; 0x4c
   18488:	mov	r1, r6
   1848c:	mov	r0, r6
   18490:	str	r3, [sp, #48]	; 0x30
   18494:	bl	16584 <__assert_fail@plt+0x5328>
   18498:	ldr	r3, [sp, #12]
   1849c:	ldr	r3, [r3, #4]
   184a0:	cmp	r3, #0
   184a4:	blt	186ec <__assert_fail@plt+0x7490>
   184a8:	ldr	r3, [sp, #128]	; 0x80
   184ac:	ldr	r3, [r3, #4]
   184b0:	cmp	r3, #0
   184b4:	blt	186d0 <__assert_fail@plt+0x7474>
   184b8:	ldr	r3, [fp, #4]
   184bc:	ldr	ip, [sp, #32]
   184c0:	ldr	r1, [fp]
   184c4:	ldr	r0, [sp, #28]
   184c8:	ldr	r2, [fp, #8]
   184cc:	str	r3, [sp, #32]
   184d0:	ldr	r3, [sp, #36]	; 0x24
   184d4:	cmp	sl, #0
   184d8:	str	ip, [fp, #4]
   184dc:	str	r1, [sp, #28]
   184e0:	str	r0, [fp]
   184e4:	str	r2, [sp, #36]	; 0x24
   184e8:	str	r3, [fp, #8]
   184ec:	beq	18520 <__assert_fail@plt+0x72c4>
   184f0:	ldr	r3, [sl, #4]
   184f4:	ldr	lr, [sp, #44]	; 0x2c
   184f8:	ldr	ip, [sl]
   184fc:	ldr	r0, [sp, #40]	; 0x28
   18500:	ldr	r2, [sl, #8]
   18504:	str	r3, [sp, #44]	; 0x2c
   18508:	ldr	r3, [sp, #48]	; 0x30
   1850c:	str	lr, [sl, #4]
   18510:	str	ip, [sp, #40]	; 0x28
   18514:	str	r0, [sl]
   18518:	str	r2, [sp, #48]	; 0x30
   1851c:	str	r3, [sl, #8]
   18520:	cmp	r9, #0
   18524:	beq	18558 <__assert_fail@plt+0x72fc>
   18528:	ldr	r4, [r9, #4]
   1852c:	ldr	lr, [sp, #68]	; 0x44
   18530:	ldr	ip, [r9]
   18534:	ldr	r0, [sp, #64]	; 0x40
   18538:	ldr	r2, [r9, #8]
   1853c:	ldr	r3, [sp, #72]	; 0x48
   18540:	str	r4, [sp, #68]	; 0x44
   18544:	str	lr, [r9, #4]
   18548:	str	ip, [sp, #64]	; 0x40
   1854c:	str	r0, [r9]
   18550:	str	r2, [sp, #72]	; 0x48
   18554:	str	r3, [r9, #8]
   18558:	ldr	r3, [sp, #16]
   1855c:	cmp	r3, #0
   18560:	bne	186b4 <__assert_fail@plt+0x7458>
   18564:	cmp	r1, #0
   18568:	bne	1869c <__assert_fail@plt+0x7440>
   1856c:	ldr	r1, [sp, #40]	; 0x28
   18570:	cmp	r1, #0
   18574:	bne	18684 <__assert_fail@plt+0x7428>
   18578:	ldr	r1, [sp, #52]	; 0x34
   1857c:	cmp	r1, #0
   18580:	bne	1866c <__assert_fail@plt+0x7410>
   18584:	ldr	r1, [sp, #64]	; 0x40
   18588:	cmp	r1, #0
   1858c:	bne	18654 <__assert_fail@plt+0x73f8>
   18590:	ldr	r1, [sp, #76]	; 0x4c
   18594:	cmp	r1, #0
   18598:	beq	180a0 <__assert_fail@plt+0x6e44>
   1859c:	ldr	r3, [pc, #380]	; 18720 <__assert_fail@plt+0x74c4>
   185a0:	lsl	r1, r1, #2
   185a4:	ldr	r0, [sp, #84]	; 0x54
   185a8:	ldr	r3, [r3, #8]
   185ac:	blx	r3
   185b0:	add	sp, sp, #92	; 0x5c
   185b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185b8:	ldr	r1, [sp, #128]	; 0x80
   185bc:	ldr	r5, [r1, #4]
   185c0:	bl	15894 <__assert_fail@plt+0x4638>
   185c4:	ldr	r3, [fp, #4]
   185c8:	cmp	r3, #0
   185cc:	rsblt	r3, r3, #0
   185d0:	cmp	sl, #0
   185d4:	str	r3, [fp, #4]
   185d8:	strne	r4, [sl, #4]
   185dc:	cmp	r9, #0
   185e0:	beq	180a0 <__assert_fail@plt+0x6e44>
   185e4:	lsr	r1, r5, #31
   185e8:	mov	r0, r9
   185ec:	cmp	r5, #0
   185f0:	rsble	r1, r1, #0
   185f4:	rsbgt	r1, r1, #1
   185f8:	bl	15830 <__assert_fail@plt+0x45d4>
   185fc:	add	sp, sp, #92	; 0x5c
   18600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18604:	mov	r1, sl
   18608:	ldr	lr, [sp, #128]	; 0x80
   1860c:	ldr	r0, [sp, #16]
   18610:	mov	sl, r9
   18614:	str	r2, [sp, #20]
   18618:	mov	r9, r1
   1861c:	ldr	r2, [sp, #24]
   18620:	ldr	r1, [sp, #28]
   18624:	str	r3, [sp, #32]
   18628:	ldr	r3, [sp, #36]	; 0x24
   1862c:	mov	ip, r4
   18630:	str	lr, [sp, #12]
   18634:	mov	r4, r7
   18638:	str	r6, [sp, #128]	; 0x80
   1863c:	mov	r7, ip
   18640:	str	r0, [sp, #28]
   18644:	str	r1, [sp, #16]
   18648:	str	r2, [sp, #36]	; 0x24
   1864c:	str	r3, [sp, #24]
   18650:	b	1816c <__assert_fail@plt+0x6f10>
   18654:	ldr	r3, [pc, #196]	; 18720 <__assert_fail@plt+0x74c4>
   18658:	lsl	r1, r1, #2
   1865c:	ldr	r0, [sp, #72]	; 0x48
   18660:	ldr	r3, [r3, #8]
   18664:	blx	r3
   18668:	b	18590 <__assert_fail@plt+0x7334>
   1866c:	ldr	r3, [pc, #172]	; 18720 <__assert_fail@plt+0x74c4>
   18670:	lsl	r1, r1, #2
   18674:	ldr	r0, [sp, #60]	; 0x3c
   18678:	ldr	r3, [r3, #8]
   1867c:	blx	r3
   18680:	b	18584 <__assert_fail@plt+0x7328>
   18684:	ldr	r3, [pc, #148]	; 18720 <__assert_fail@plt+0x74c4>
   18688:	lsl	r1, r1, #2
   1868c:	ldr	r0, [sp, #48]	; 0x30
   18690:	ldr	r3, [r3, #8]
   18694:	blx	r3
   18698:	b	18578 <__assert_fail@plt+0x731c>
   1869c:	ldr	r3, [pc, #124]	; 18720 <__assert_fail@plt+0x74c4>
   186a0:	lsl	r1, r1, #2
   186a4:	ldr	r0, [sp, #36]	; 0x24
   186a8:	ldr	r3, [r3, #8]
   186ac:	blx	r3
   186b0:	b	1856c <__assert_fail@plt+0x7310>
   186b4:	ldr	r2, [pc, #100]	; 18720 <__assert_fail@plt+0x74c4>
   186b8:	lsl	r1, r3, #2
   186bc:	ldr	r0, [sp, #24]
   186c0:	ldr	r3, [r2, #8]
   186c4:	blx	r3
   186c8:	ldr	r1, [sp, #28]
   186cc:	b	18564 <__assert_fail@plt+0x7308>
   186d0:	mov	r1, r6
   186d4:	mov	r0, r6
   186d8:	bl	15894 <__assert_fail@plt+0x4638>
   186dc:	ldr	r3, [sp, #68]	; 0x44
   186e0:	rsb	r3, r3, #0
   186e4:	str	r3, [sp, #68]	; 0x44
   186e8:	b	184b8 <__assert_fail@plt+0x725c>
   186ec:	mov	r1, r4
   186f0:	mov	r0, r4
   186f4:	bl	15894 <__assert_fail@plt+0x4638>
   186f8:	ldr	r3, [sp, #44]	; 0x2c
   186fc:	rsb	r3, r3, #0
   18700:	str	r3, [sp, #44]	; 0x2c
   18704:	b	184a8 <__assert_fail@plt+0x724c>
   18708:	ldr	r3, [pc, #20]	; 18724 <__assert_fail@plt+0x74c8>
   1870c:	ldr	r2, [pc, #20]	; 18728 <__assert_fail@plt+0x74cc>
   18710:	ldr	r1, [pc, #20]	; 1872c <__assert_fail@plt+0x74d0>
   18714:	ldr	r0, [pc, #20]	; 18730 <__assert_fail@plt+0x74d4>
   18718:	bl	1125c <__assert_fail@plt>
   1871c:	strdeq	sp, [r2], -r8
   18720:	andeq	pc, r3, r8, lsr #2
   18724:	andeq	sp, r2, r8, asr r4
   18728:	andeq	r0, r0, r6, lsl #23
   1872c:	andeq	sp, r2, r8, ror r5
   18730:	andeq	sp, r2, r0, asr #16
   18734:	push	{r4, r5, r6, lr}
   18738:	sub	sp, sp, #32
   1873c:	ldr	r4, [r1, #4]
   18740:	cmp	r4, #0
   18744:	beq	187c0 <__assert_fail@plt+0x7564>
   18748:	ldr	r4, [r2, #4]
   1874c:	eor	r3, r4, r4, asr #31
   18750:	sub	r3, r3, r4, asr #31
   18754:	cmp	r3, #1
   18758:	ble	187cc <__assert_fail@plt+0x7570>
   1875c:	mov	r4, #0
   18760:	ldr	ip, [pc, #388]	; 188ec <__assert_fail@plt+0x7690>
   18764:	mov	r3, r1
   18768:	str	r2, [sp]
   1876c:	mov	r5, r2
   18770:	mov	r6, r0
   18774:	mov	r2, r4
   18778:	add	r1, sp, #20
   1877c:	add	r0, sp, #8
   18780:	str	r4, [sp, #8]
   18784:	str	r4, [sp, #12]
   18788:	str	r4, [sp, #20]
   1878c:	str	r4, [sp, #24]
   18790:	str	ip, [sp, #16]
   18794:	str	ip, [sp, #28]
   18798:	bl	18028 <__assert_fail@plt+0x6dcc>
   1879c:	ldr	r3, [sp, #12]
   187a0:	cmp	r3, #1
   187a4:	bls	18828 <__assert_fail@plt+0x75cc>
   187a8:	ldr	r1, [sp, #8]
   187ac:	cmp	r1, #0
   187b0:	bne	188a4 <__assert_fail@plt+0x7648>
   187b4:	ldr	r1, [sp, #20]
   187b8:	cmp	r1, #0
   187bc:	bne	18808 <__assert_fail@plt+0x75ac>
   187c0:	mov	r0, r4
   187c4:	add	sp, sp, #32
   187c8:	pop	{r4, r5, r6, pc}
   187cc:	cmp	r4, #0
   187d0:	beq	187c0 <__assert_fail@plt+0x7564>
   187d4:	ldr	r3, [r2, #8]
   187d8:	ldr	ip, [r3]
   187dc:	clz	r3, ip
   187e0:	lsr	r3, r3, #5
   187e4:	cmp	ip, #1
   187e8:	rsbls	r3, r3, #0
   187ec:	rsbhi	r3, r3, #1
   187f0:	cmp	r3, #1
   187f4:	movne	r4, #0
   187f8:	beq	1875c <__assert_fail@plt+0x7500>
   187fc:	mov	r0, r4
   18800:	add	sp, sp, #32
   18804:	pop	{r4, r5, r6, pc}
   18808:	ldr	r3, [pc, #224]	; 188f0 <__assert_fail@plt+0x7694>
   1880c:	ldr	r0, [sp, #28]
   18810:	lsl	r1, r1, #2
   18814:	ldr	r3, [r3, #8]
   18818:	blx	r3
   1881c:	mov	r0, r4
   18820:	add	sp, sp, #32
   18824:	pop	{r4, r5, r6, pc}
   18828:	cmp	r3, #0
   1882c:	moveq	r4, r3
   18830:	beq	187a8 <__assert_fail@plt+0x754c>
   18834:	ldr	r3, [sp, #16]
   18838:	ldr	r3, [r3]
   1883c:	clz	r2, r3
   18840:	cmp	r3, #1
   18844:	movls	r3, #0
   18848:	movhi	r3, #1
   1884c:	lsr	r2, r2, #5
   18850:	cmp	r3, r2
   18854:	moveq	r4, #1
   18858:	movne	r4, #0
   1885c:	bne	187a8 <__assert_fail@plt+0x754c>
   18860:	ldr	r3, [sp, #24]
   18864:	cmp	r3, #0
   18868:	blt	188bc <__assert_fail@plt+0x7660>
   1886c:	ldr	r1, [r6, #8]
   18870:	ldm	r6, {ip, lr}
   18874:	ldr	r2, [sp, #28]
   18878:	str	r1, [sp, #28]
   1887c:	ldr	r1, [sp, #8]
   18880:	ldr	r0, [sp, #20]
   18884:	cmp	r1, #0
   18888:	mov	r4, #1
   1888c:	str	lr, [sp, #24]
   18890:	str	r3, [r6, #4]
   18894:	str	ip, [sp, #20]
   18898:	str	r0, [r6]
   1889c:	str	r2, [r6, #8]
   188a0:	beq	187b4 <__assert_fail@plt+0x7558>
   188a4:	ldr	r3, [pc, #68]	; 188f0 <__assert_fail@plt+0x7694>
   188a8:	lsl	r1, r1, #2
   188ac:	ldr	r0, [sp, #16]
   188b0:	ldr	r3, [r3, #8]
   188b4:	blx	r3
   188b8:	b	187b4 <__assert_fail@plt+0x7558>
   188bc:	ldr	r3, [r5, #4]
   188c0:	add	r1, sp, #20
   188c4:	cmp	r3, #0
   188c8:	mov	r2, r5
   188cc:	mov	r0, r1
   188d0:	blt	188e0 <__assert_fail@plt+0x7684>
   188d4:	bl	16214 <__assert_fail@plt+0x4fb8>
   188d8:	ldr	r3, [sp, #24]
   188dc:	b	1886c <__assert_fail@plt+0x7610>
   188e0:	bl	16584 <__assert_fail@plt+0x5328>
   188e4:	ldr	r3, [sp, #24]
   188e8:	b	1886c <__assert_fail@plt+0x7610>
   188ec:	strdeq	sp, [r2], -r8
   188f0:	andeq	pc, r3, r8, lsr #2
   188f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188f8:	sub	sp, sp, #84	; 0x54
   188fc:	ldr	r6, [r3, #4]
   18900:	mov	r8, r3
   18904:	cmp	r6, #0
   18908:	str	r2, [sp, #20]
   1890c:	ldr	r4, [r2, #4]
   18910:	str	r0, [sp, #32]
   18914:	beq	18d28 <__assert_fail@plt+0x7acc>
   18918:	cmp	r4, #0
   1891c:	beq	18c20 <__assert_fail@plt+0x79c4>
   18920:	ldr	sl, [r3, #8]
   18924:	cmp	r6, #0
   18928:	rsblt	r6, r6, #0
   1892c:	add	fp, sp, #64	; 0x40
   18930:	mov	r5, r1
   18934:	mov	r2, r6
   18938:	mov	r1, sl
   1893c:	mov	r0, fp
   18940:	bl	154a4 <__assert_fail@plt+0x4248>
   18944:	ldr	r3, [sp, #64]	; 0x40
   18948:	cmp	r3, #0
   1894c:	str	r3, [sp, #28]
   18950:	bne	18bd4 <__assert_fail@plt+0x7978>
   18954:	ldr	r3, [sp, #28]
   18958:	str	r3, [sp, #24]
   1895c:	ldr	r3, [sp, #20]
   18960:	ldr	r7, [pc, #976]	; 18d38 <__assert_fail@plt+0x7adc>
   18964:	ldr	r3, [r3, #4]
   18968:	str	r7, [sp, #60]	; 0x3c
   1896c:	cmp	r3, #0
   18970:	mov	r3, #0
   18974:	str	r3, [sp, #52]	; 0x34
   18978:	str	r3, [sp, #56]	; 0x38
   1897c:	blt	18c84 <__assert_fail@plt+0x7a28>
   18980:	add	r9, sp, #52	; 0x34
   18984:	mov	r0, r9
   18988:	mov	r1, r5
   1898c:	str	r3, [sp, #8]
   18990:	bl	15894 <__assert_fail@plt+0x4638>
   18994:	ldr	r0, [sp, #56]	; 0x38
   18998:	ldr	r3, [sp, #8]
   1899c:	eor	r2, r0, r0, asr #31
   189a0:	sub	r2, r2, r0, asr #31
   189a4:	cmp	r6, r2
   189a8:	str	r2, [sp, #56]	; 0x38
   189ac:	ble	18ca8 <__assert_fail@plt+0x7a4c>
   189b0:	ldr	r3, [r5, #4]
   189b4:	cmp	r3, #0
   189b8:	movlt	r5, r2
   189bc:	blt	18cd8 <__assert_fail@plt+0x7a7c>
   189c0:	cmp	r0, #0
   189c4:	ldr	r1, [sp, #60]	; 0x3c
   189c8:	beq	18d30 <__assert_fail@plt+0x7ad4>
   189cc:	mov	r3, r2
   189d0:	sub	r2, r3, #-1073741823	; 0xc0000001
   189d4:	ldr	r0, [r1, r2, lsl #2]
   189d8:	add	r2, r1, r2, lsl #2
   189dc:	cmp	r0, #0
   189e0:	beq	189f4 <__assert_fail@plt+0x7798>
   189e4:	b	189fc <__assert_fail@plt+0x77a0>
   189e8:	ldr	r1, [r2, #-4]!
   189ec:	cmp	r1, #0
   189f0:	bne	189fc <__assert_fail@plt+0x77a0>
   189f4:	subs	r3, r3, #1
   189f8:	bne	189e8 <__assert_fail@plt+0x778c>
   189fc:	str	r3, [sp, #56]	; 0x38
   18a00:	cmp	r4, #0
   18a04:	rsblt	r4, r4, #0
   18a08:	sub	r3, r4, #1
   18a0c:	mov	r2, r3
   18a10:	str	r3, [sp, #12]
   18a14:	sub	r3, r6, #-1073741823	; 0xc0000001
   18a18:	mov	r4, r3
   18a1c:	str	r3, [sp, #36]	; 0x24
   18a20:	lsl	r2, r2, #2
   18a24:	mov	r3, #0
   18a28:	add	r0, sp, #40	; 0x28
   18a2c:	mov	r1, #1
   18a30:	str	r3, [sp, #40]	; 0x28
   18a34:	str	r3, [sp, #44]	; 0x2c
   18a38:	str	r3, [sp, #8]
   18a3c:	str	r7, [sp, #48]	; 0x30
   18a40:	str	r2, [sp, #16]
   18a44:	bl	137f8 <__assert_fail@plt+0x259c>
   18a48:	ldr	r3, [sp, #12]
   18a4c:	lsl	r8, r4, #2
   18a50:	cmn	r3, #1
   18a54:	beq	18b38 <__assert_fail@plt+0x78dc>
   18a58:	ldr	r3, [sp, #20]
   18a5c:	ldr	r2, [sp, #16]
   18a60:	mov	r5, #32
   18a64:	ldr	r3, [r3, #8]
   18a68:	mov	r4, #-2147483648	; 0x80000000
   18a6c:	ldr	r7, [r3, r2]
   18a70:	b	18a8c <__assert_fail@plt+0x7830>
   18a74:	ldr	r2, [sp, #44]	; 0x2c
   18a78:	cmp	r6, r2
   18a7c:	blt	18ac0 <__assert_fail@plt+0x7864>
   18a80:	subs	r5, r5, #1
   18a84:	lsr	r4, r4, #1
   18a88:	beq	18b14 <__assert_fail@plt+0x78b8>
   18a8c:	add	r2, sp, #40	; 0x28
   18a90:	mov	r1, r2
   18a94:	mov	r0, r2
   18a98:	bl	16be4 <__assert_fail@plt+0x5988>
   18a9c:	tst	r4, r7
   18aa0:	beq	18a74 <__assert_fail@plt+0x7818>
   18aa4:	add	r1, sp, #40	; 0x28
   18aa8:	mov	r2, r9
   18aac:	mov	r0, r1
   18ab0:	bl	16be4 <__assert_fail@plt+0x5988>
   18ab4:	ldr	r2, [sp, #44]	; 0x2c
   18ab8:	cmp	r6, r2
   18abc:	bge	18a80 <__assert_fail@plt+0x7824>
   18ac0:	mov	r3, sl
   18ac4:	ldr	r1, [sp, #48]	; 0x30
   18ac8:	stm	sp, {r6, fp}
   18acc:	ldr	r0, [sp, #8]
   18ad0:	bl	147ec <__assert_fail@plt+0x3590>
   18ad4:	ldr	r3, [sp, #48]	; 0x30
   18ad8:	add	r2, r3, r8
   18adc:	ldr	r3, [r3, r8]
   18ae0:	cmp	r3, #0
   18ae4:	mov	r3, r6
   18ae8:	beq	18afc <__assert_fail@plt+0x78a0>
   18aec:	b	18b04 <__assert_fail@plt+0x78a8>
   18af0:	ldr	r1, [r2, #-4]!
   18af4:	cmp	r1, #0
   18af8:	bne	18b04 <__assert_fail@plt+0x78a8>
   18afc:	subs	r3, r3, #1
   18b00:	bne	18af0 <__assert_fail@plt+0x7894>
   18b04:	subs	r5, r5, #1
   18b08:	str	r3, [sp, #44]	; 0x2c
   18b0c:	lsr	r4, r4, #1
   18b10:	bne	18a8c <__assert_fail@plt+0x7830>
   18b14:	ldr	r3, [sp, #16]
   18b18:	sub	r3, r3, #4
   18b1c:	str	r3, [sp, #16]
   18b20:	ldr	r3, [sp, #12]
   18b24:	sub	r3, r3, #1
   18b28:	str	r3, [sp, #12]
   18b2c:	ldr	r3, [sp, #12]
   18b30:	cmn	r3, #1
   18b34:	bne	18a58 <__assert_fail@plt+0x77fc>
   18b38:	ldr	r2, [sp, #44]	; 0x2c
   18b3c:	cmp	r6, r2
   18b40:	ble	18c30 <__assert_fail@plt+0x79d4>
   18b44:	ldr	r0, [sp, #24]
   18b48:	cmp	r0, #0
   18b4c:	beq	18b60 <__assert_fail@plt+0x7904>
   18b50:	ldr	r3, [pc, #484]	; 18d3c <__assert_fail@plt+0x7ae0>
   18b54:	add	r1, r8, #4
   18b58:	ldr	r3, [r3, #8]
   18b5c:	blx	r3
   18b60:	ldr	r4, [sp, #32]
   18b64:	ldr	lr, [sp, #40]	; 0x28
   18b68:	ldr	r2, [sp, #44]	; 0x2c
   18b6c:	ldr	r1, [r4]
   18b70:	ldr	ip, [r4, #4]
   18b74:	ldr	r0, [r4, #8]
   18b78:	ldr	r3, [sp, #48]	; 0x30
   18b7c:	cmp	r1, #0
   18b80:	str	r1, [sp, #40]	; 0x28
   18b84:	str	lr, [r4]
   18b88:	str	ip, [sp, #44]	; 0x2c
   18b8c:	str	r2, [r4, #4]
   18b90:	str	r0, [sp, #48]	; 0x30
   18b94:	str	r3, [r4, #8]
   18b98:	beq	18bac <__assert_fail@plt+0x7950>
   18b9c:	ldr	r3, [pc, #408]	; 18d3c <__assert_fail@plt+0x7ae0>
   18ba0:	lsl	r1, r1, #2
   18ba4:	ldr	r3, [r3, #8]
   18ba8:	blx	r3
   18bac:	ldr	r1, [sp, #52]	; 0x34
   18bb0:	cmp	r1, #0
   18bb4:	beq	18bcc <__assert_fail@plt+0x7970>
   18bb8:	ldr	r3, [pc, #380]	; 18d3c <__assert_fail@plt+0x7ae0>
   18bbc:	lsl	r1, r1, #2
   18bc0:	ldr	r0, [sp, #60]	; 0x3c
   18bc4:	ldr	r3, [r3, #8]
   18bc8:	blx	r3
   18bcc:	add	sp, sp, #84	; 0x54
   18bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bd4:	ldr	r3, [pc, #352]	; 18d3c <__assert_fail@plt+0x7ae0>
   18bd8:	mov	r2, #0
   18bdc:	str	r2, [sp, #64]	; 0x40
   18be0:	ldr	r3, [r3, #4]
   18be4:	lsl	r0, r6, #2
   18be8:	blx	r3
   18bec:	mov	r1, sl
   18bf0:	ldr	r3, [sp, #28]
   18bf4:	mov	r2, r6
   18bf8:	str	r0, [sp, #24]
   18bfc:	bl	144e8 <__assert_fail@plt+0x328c>
   18c00:	cmp	r0, #0
   18c04:	ldreq	sl, [sp, #24]
   18c08:	beq	1895c <__assert_fail@plt+0x7700>
   18c0c:	ldr	r3, [pc, #300]	; 18d40 <__assert_fail@plt+0x7ae4>
   18c10:	ldr	r2, [pc, #300]	; 18d44 <__assert_fail@plt+0x7ae8>
   18c14:	ldr	r1, [pc, #300]	; 18d48 <__assert_fail@plt+0x7aec>
   18c18:	ldr	r0, [pc, #300]	; 18d4c <__assert_fail@plt+0x7af0>
   18c1c:	bl	1125c <__assert_fail@plt>
   18c20:	mov	r1, #1
   18c24:	bl	137f8 <__assert_fail@plt+0x259c>
   18c28:	add	sp, sp, #84	; 0x54
   18c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c30:	ldr	ip, [sp, #28]
   18c34:	ldr	r1, [sp, #48]	; 0x30
   18c38:	mov	r3, sl
   18c3c:	stm	sp, {r6, fp}
   18c40:	mov	r0, #0
   18c44:	str	ip, [sp, #64]	; 0x40
   18c48:	bl	147ec <__assert_fail@plt+0x3590>
   18c4c:	ldr	r2, [sp, #48]	; 0x30
   18c50:	ldr	r1, [sp, #36]	; 0x24
   18c54:	add	r3, r2, r8
   18c58:	ldr	r2, [r2, r1, lsl #2]
   18c5c:	cmp	r2, #0
   18c60:	beq	18c74 <__assert_fail@plt+0x7a18>
   18c64:	b	18c7c <__assert_fail@plt+0x7a20>
   18c68:	ldr	r2, [r3, #-4]!
   18c6c:	cmp	r2, #0
   18c70:	bne	18c7c <__assert_fail@plt+0x7a20>
   18c74:	subs	r6, r6, #1
   18c78:	bne	18c68 <__assert_fail@plt+0x7a0c>
   18c7c:	str	r6, [sp, #44]	; 0x2c
   18c80:	b	18b44 <__assert_fail@plt+0x78e8>
   18c84:	add	r9, sp, #52	; 0x34
   18c88:	mov	r2, r8
   18c8c:	mov	r1, r5
   18c90:	mov	r0, r9
   18c94:	bl	18734 <__assert_fail@plt+0x74d8>
   18c98:	cmp	r0, #0
   18c9c:	bne	18a00 <__assert_fail@plt+0x77a4>
   18ca0:	ldr	r0, [pc, #168]	; 18d50 <__assert_fail@plt+0x7af4>
   18ca4:	bl	112b4 <__assert_fail@plt+0x58>
   18ca8:	mov	r0, r3
   18cac:	ldr	r1, [sp, #60]	; 0x3c
   18cb0:	mov	r3, sl
   18cb4:	stm	sp, {r6, fp}
   18cb8:	bl	147ec <__assert_fail@plt+0x3590>
   18cbc:	ldr	r3, [r5, #4]
   18cc0:	cmp	r3, #0
   18cc4:	blt	18cd4 <__assert_fail@plt+0x7a78>
   18cc8:	ldr	r1, [sp, #60]	; 0x3c
   18ccc:	mov	r3, r6
   18cd0:	b	189d0 <__assert_fail@plt+0x7774>
   18cd4:	mov	r5, r6
   18cd8:	ldr	r3, [sp, #52]	; 0x34
   18cdc:	cmp	r6, r3
   18ce0:	ldrle	r3, [sp, #60]	; 0x3c
   18ce4:	ble	18cf8 <__assert_fail@plt+0x7a9c>
   18ce8:	mov	r1, r6
   18cec:	mov	r0, r9
   18cf0:	bl	13440 <__assert_fail@plt+0x21e4>
   18cf4:	mov	r3, r0
   18cf8:	str	r5, [sp]
   18cfc:	mov	r0, r3
   18d00:	mov	r2, r6
   18d04:	mov	r1, sl
   18d08:	bl	13dac <__assert_fail@plt+0x2b50>
   18d0c:	cmp	r0, #0
   18d10:	beq	18cc8 <__assert_fail@plt+0x7a6c>
   18d14:	ldr	r3, [pc, #36]	; 18d40 <__assert_fail@plt+0x7ae4>
   18d18:	ldr	r2, [pc, #52]	; 18d54 <__assert_fail@plt+0x7af8>
   18d1c:	ldr	r1, [pc, #36]	; 18d48 <__assert_fail@plt+0x7aec>
   18d20:	ldr	r0, [pc, #36]	; 18d4c <__assert_fail@plt+0x7af0>
   18d24:	bl	1125c <__assert_fail@plt>
   18d28:	ldr	r0, [pc, #40]	; 18d58 <__assert_fail@plt+0x7afc>
   18d2c:	bl	112b4 <__assert_fail@plt+0x58>
   18d30:	mov	r3, r0
   18d34:	b	189fc <__assert_fail@plt+0x77a0>
   18d38:	strdeq	sp, [r2], -r8
   18d3c:	andeq	pc, r3, r8, lsr #2
   18d40:	andeq	sp, r2, r4, ror #8
   18d44:	andeq	r0, r0, ip, lsr #24
   18d48:	andeq	sp, r2, r8, ror r5
   18d4c:	andeq	sp, r2, r4, asr r6
   18d50:	andeq	sp, r2, ip, ror r8
   18d54:	andeq	r0, r0, r9, asr #24
   18d58:	andeq	sp, r2, r4, ror #16
   18d5c:	push	{r4, r5, r6, lr}
   18d60:	sub	sp, sp, #24
   18d64:	ldr	lr, [pc, #116]	; 18de0 <__assert_fail@plt+0x7b84>
   18d68:	mov	ip, #0
   18d6c:	cmp	r2, #0
   18d70:	mov	r5, r0
   18d74:	mov	r6, r1
   18d78:	str	lr, [sp, #20]
   18d7c:	str	ip, [sp, #12]
   18d80:	str	ip, [sp, #16]
   18d84:	addeq	r4, sp, #12
   18d88:	bne	18dc4 <__assert_fail@plt+0x7b68>
   18d8c:	mov	r1, r6
   18d90:	mov	r2, r4
   18d94:	mov	r0, r5
   18d98:	bl	188f4 <__assert_fail@plt+0x7698>
   18d9c:	ldr	r1, [sp, #12]
   18da0:	cmp	r1, #0
   18da4:	beq	18dbc <__assert_fail@plt+0x7b60>
   18da8:	ldr	r3, [pc, #52]	; 18de4 <__assert_fail@plt+0x7b88>
   18dac:	lsl	r1, r1, #2
   18db0:	ldr	r0, [sp, #20]
   18db4:	ldr	r3, [r3, #8]
   18db8:	blx	r3
   18dbc:	add	sp, sp, #24
   18dc0:	pop	{r4, r5, r6, pc}
   18dc4:	add	r4, sp, #12
   18dc8:	mov	r1, r2
   18dcc:	mov	r0, r4
   18dd0:	str	r3, [sp, #4]
   18dd4:	bl	137f8 <__assert_fail@plt+0x259c>
   18dd8:	ldr	r3, [sp, #4]
   18ddc:	b	18d8c <__assert_fail@plt+0x7b30>
   18de0:	strdeq	sp, [r2], -r8
   18de4:	andeq	pc, r3, r8, lsr #2
   18de8:	push	{r4, r5, r6, r7, r8, lr}
   18dec:	ldr	r5, [sp, #24]
   18df0:	cmp	r5, #0
   18df4:	beq	18eb0 <__assert_fail@plt+0x7c54>
   18df8:	mov	r4, r2
   18dfc:	mov	r6, r0
   18e00:	mov	r2, r3
   18e04:	mov	r7, r1
   18e08:	mov	r3, r0
   18e0c:	mov	r1, r4
   18e10:	mov	r0, r4
   18e14:	bl	188f4 <__assert_fail@plt+0x7698>
   18e18:	ldr	r3, [r4, #4]
   18e1c:	cmp	r3, #1
   18e20:	bls	18e7c <__assert_fail@plt+0x7c20>
   18e24:	mov	r1, r7
   18e28:	mov	r0, r4
   18e2c:	bl	1603c <__assert_fail@plt+0x4de0>
   18e30:	cmp	r0, #0
   18e34:	movne	r8, #2
   18e38:	bne	18e6c <__assert_fail@plt+0x7c10>
   18e3c:	mov	r0, #1
   18e40:	pop	{r4, r5, r6, r7, r8, pc}
   18e44:	mov	r3, r6
   18e48:	mov	r2, r8
   18e4c:	mov	r1, r4
   18e50:	mov	r0, r4
   18e54:	bl	18d5c <__assert_fail@plt+0x7b00>
   18e58:	mov	r1, r7
   18e5c:	mov	r0, r4
   18e60:	bl	1603c <__assert_fail@plt+0x4de0>
   18e64:	cmp	r0, #0
   18e68:	beq	18e3c <__assert_fail@plt+0x7be0>
   18e6c:	subs	r5, r5, #1
   18e70:	bne	18e44 <__assert_fail@plt+0x7be8>
   18e74:	mov	r0, r5
   18e78:	pop	{r4, r5, r6, r7, r8, pc}
   18e7c:	cmp	r3, #0
   18e80:	beq	18e24 <__assert_fail@plt+0x7bc8>
   18e84:	ldr	r3, [r4, #8]
   18e88:	ldr	r3, [r3]
   18e8c:	clz	r2, r3
   18e90:	cmp	r3, #1
   18e94:	movls	r3, #0
   18e98:	movhi	r3, #1
   18e9c:	lsr	r2, r2, #5
   18ea0:	cmp	r2, r3
   18ea4:	bne	18e24 <__assert_fail@plt+0x7bc8>
   18ea8:	mov	r0, #1
   18eac:	pop	{r4, r5, r6, r7, r8, pc}
   18eb0:	ldr	r3, [pc, #12]	; 18ec4 <__assert_fail@plt+0x7c68>
   18eb4:	ldr	r2, [pc, #12]	; 18ec8 <__assert_fail@plt+0x7c6c>
   18eb8:	ldr	r1, [pc, #12]	; 18ecc <__assert_fail@plt+0x7c70>
   18ebc:	ldr	r0, [pc, #12]	; 18ed0 <__assert_fail@plt+0x7c74>
   18ec0:	bl	1125c <__assert_fail@plt>
   18ec4:	andeq	sp, r2, r0, ror r4
   18ec8:	ldrdeq	r0, [r0], -lr
   18ecc:	andeq	sp, r2, r8, ror r5
   18ed0:			; <UNDEFINED> instruction: 0x0002d8b4
   18ed4:	push	{r4, r5, r6, lr}
   18ed8:	mov	r4, r0
   18edc:	mov	r5, r1
   18ee0:	bl	17f60 <__assert_fail@plt+0x6d04>
   18ee4:	cmp	r0, #0
   18ee8:	popeq	{r4, r5, r6, pc}
   18eec:	ldr	r3, [r4, #4]
   18ef0:	cmp	r3, #0
   18ef4:	blt	18f0c <__assert_fail@plt+0x7cb0>
   18ef8:	mov	r2, r5
   18efc:	ldr	r1, [r4, #8]
   18f00:	add	r0, r4, #4
   18f04:	pop	{r4, r5, r6, lr}
   18f08:	b	13718 <__assert_fail@plt+0x24bc>
   18f0c:	mov	r1, r5
   18f10:	mov	r0, r4
   18f14:	pop	{r4, r5, r6, lr}
   18f18:	b	1360c <__assert_fail@plt+0x23b0>
   18f1c:	push	{r4, r5, r6, lr}
   18f20:	mov	r4, r0
   18f24:	mov	r5, r1
   18f28:	bl	17f60 <__assert_fail@plt+0x6d04>
   18f2c:	ldr	r3, [r4, #4]
   18f30:	cmp	r0, r3, lsr #31
   18f34:	beq	18f4c <__assert_fail@plt+0x7cf0>
   18f38:	mov	r2, r5
   18f3c:	ldr	r1, [r4, #8]
   18f40:	add	r0, r4, #4
   18f44:	pop	{r4, r5, r6, lr}
   18f48:	b	13718 <__assert_fail@plt+0x24bc>
   18f4c:	mov	r1, r5
   18f50:	mov	r0, r4
   18f54:	pop	{r4, r5, r6, lr}
   18f58:	b	1360c <__assert_fail@plt+0x23b0>
   18f5c:	push	{r4, lr}
   18f60:	mov	r2, #1
   18f64:	mov	r4, r0
   18f68:	bl	16268 <__assert_fail@plt+0x500c>
   18f6c:	mov	r1, r4
   18f70:	mov	r0, r4
   18f74:	bl	15894 <__assert_fail@plt+0x4638>
   18f78:	ldr	r3, [r4, #4]
   18f7c:	rsb	r3, r3, #0
   18f80:	str	r3, [r4, #4]
   18f84:	pop	{r4, pc}
   18f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f8c:	sub	sp, sp, #28
   18f90:	ldr	r7, [r1, #4]
   18f94:	ldr	r3, [r2, #4]
   18f98:	cmp	r7, #0
   18f9c:	rsblt	r7, r7, #0
   18fa0:	cmp	r3, #0
   18fa4:	rsblt	r3, r3, #0
   18fa8:	cmp	r7, r3
   18fac:	mov	fp, r1
   18fb0:	str	r3, [sp, #4]
   18fb4:	str	r0, [sp, #8]
   18fb8:	bge	18fd8 <__assert_fail@plt+0x7d7c>
   18fbc:	mov	ip, r3
   18fc0:	mov	r3, fp
   18fc4:	mov	r1, r7
   18fc8:	mov	fp, r2
   18fcc:	mov	r7, ip
   18fd0:	mov	r2, r3
   18fd4:	str	r1, [sp, #4]
   18fd8:	ldr	r3, [sp, #4]
   18fdc:	cmp	r3, #0
   18fe0:	beq	19160 <__assert_fail@plt+0x7f04>
   18fe4:	ldr	r6, [r2, #4]
   18fe8:	ldr	r4, [fp, #4]
   18fec:	ldr	r3, [sp, #8]
   18ff0:	lsr	r6, r6, #31
   18ff4:	ldr	r1, [sp, #4]
   18ff8:	rsb	r9, r6, #0
   18ffc:	lsr	r4, r4, #31
   19000:	cmp	r9, #0
   19004:	moveq	r7, r1
   19008:	and	r5, r4, r6
   1900c:	ldr	r3, [r3]
   19010:	add	r1, r5, r7
   19014:	cmp	r1, r3
   19018:	rsb	r8, r5, #0
   1901c:	rsb	sl, r4, #0
   19020:	bgt	19184 <__assert_fail@plt+0x7f28>
   19024:	ldr	r3, [sp, #8]
   19028:	ldr	r3, [r3, #8]
   1902c:	str	r3, [sp, #12]
   19030:	ldr	r0, [r2, #8]
   19034:	ldr	r2, [sp, #4]
   19038:	ldr	r3, [fp, #8]
   1903c:	sub	r0, r0, #4
   19040:	lsl	r2, r2, #2
   19044:	str	r3, [sp, #16]
   19048:	mov	r1, r3
   1904c:	add	fp, r3, r2
   19050:	ldr	r3, [sp, #12]
   19054:	str	r2, [sp, #20]
   19058:	sub	ip, r3, #4
   1905c:	b	19064 <__assert_fail@plt+0x7e08>
   19060:	mov	r6, lr
   19064:	ldr	r3, [r1], #4
   19068:	ldr	r2, [r0, #4]!
   1906c:	eor	r3, r3, sl
   19070:	adds	r3, r3, r4
   19074:	eor	r2, r2, r9
   19078:	movcs	r4, #1
   1907c:	movcc	r4, #0
   19080:	adds	r2, r2, r6
   19084:	and	r3, r3, r2
   19088:	eor	r3, r3, r8
   1908c:	movcs	lr, #1
   19090:	movcc	lr, #0
   19094:	adds	r3, r3, r5
   19098:	movcs	r5, #1
   1909c:	movcc	r5, #0
   190a0:	cmp	fp, r1
   190a4:	str	r3, [ip, #4]!
   190a8:	bne	19060 <__assert_fail@plt+0x7e04>
   190ac:	cmp	r6, r2
   190b0:	bhi	1919c <__assert_fail@plt+0x7f40>
   190b4:	ldr	r3, [sp, #4]
   190b8:	cmp	r3, r7
   190bc:	bge	19108 <__assert_fail@plt+0x7eac>
   190c0:	ldr	r3, [sp, #12]
   190c4:	ldr	r2, [sp, #20]
   190c8:	add	r2, r3, r2
   190cc:	ldr	r3, [sp, #16]
   190d0:	add	r0, r3, r7, lsl #2
   190d4:	ldr	r3, [r1], #4
   190d8:	eor	r3, r3, sl
   190dc:	adds	r3, r3, r4
   190e0:	and	r3, r3, r9
   190e4:	eor	r3, r3, r8
   190e8:	movcs	r4, #1
   190ec:	movcc	r4, #0
   190f0:	adds	r3, r3, r5
   190f4:	movcs	r5, #1
   190f8:	movcc	r5, #0
   190fc:	cmp	r0, r1
   19100:	str	r3, [r2], #4
   19104:	bne	190d4 <__assert_fail@plt+0x7e78>
   19108:	cmp	r5, #0
   1910c:	bne	19170 <__assert_fail@plt+0x7f14>
   19110:	cmp	r7, #0
   19114:	beq	19148 <__assert_fail@plt+0x7eec>
   19118:	ldr	r2, [sp, #12]
   1911c:	sub	r0, r7, #-1073741823	; 0xc0000001
   19120:	ldr	r3, [r2, r0, lsl #2]
   19124:	add	r0, r2, r0, lsl #2
   19128:	cmp	r3, #0
   1912c:	beq	19140 <__assert_fail@plt+0x7ee4>
   19130:	b	19148 <__assert_fail@plt+0x7eec>
   19134:	ldr	r3, [r0, #-4]!
   19138:	cmp	r3, #0
   1913c:	bne	19148 <__assert_fail@plt+0x7eec>
   19140:	subs	r7, r7, #1
   19144:	bne	19134 <__assert_fail@plt+0x7ed8>
   19148:	ldr	r3, [sp, #8]
   1914c:	cmp	r8, #0
   19150:	rsbne	r7, r7, #0
   19154:	str	r7, [r3, #4]
   19158:	add	sp, sp, #28
   1915c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19160:	ldmib	sp, {r2, r3}
   19164:	str	r2, [r3, #4]
   19168:	add	sp, sp, #28
   1916c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19170:	ldr	r2, [sp, #12]
   19174:	mov	r3, #1
   19178:	str	r3, [r2, r7, lsl #2]
   1917c:	add	r7, r7, r3
   19180:	b	19148 <__assert_fail@plt+0x7eec>
   19184:	ldr	r0, [sp, #8]
   19188:	str	r2, [sp, #16]
   1918c:	bl	13440 <__assert_fail@plt+0x21e4>
   19190:	ldr	r2, [sp, #16]
   19194:	str	r0, [sp, #12]
   19198:	b	19030 <__assert_fail@plt+0x7dd4>
   1919c:	ldr	r3, [pc, #12]	; 191b0 <__assert_fail@plt+0x7f54>
   191a0:	ldr	r2, [pc, #12]	; 191b4 <__assert_fail@plt+0x7f58>
   191a4:	ldr	r1, [pc, #12]	; 191b8 <__assert_fail@plt+0x7f5c>
   191a8:	ldr	r0, [pc, #12]	; 191bc <__assert_fail@plt+0x7f60>
   191ac:	bl	1125c <__assert_fail@plt>
   191b0:	andeq	sp, r2, r0, lsl #9
   191b4:	andeq	r0, r0, lr, lsl #30
   191b8:	andeq	sp, r2, r8, ror r5
   191bc:			; <UNDEFINED> instruction: 0x0002d8bc
   191c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191c4:	sub	sp, sp, #28
   191c8:	ldr	r7, [r1, #4]
   191cc:	ldr	r3, [r2, #4]
   191d0:	cmp	r7, #0
   191d4:	rsblt	r7, r7, #0
   191d8:	cmp	r3, #0
   191dc:	rsblt	r3, r3, #0
   191e0:	cmp	r7, r3
   191e4:	mov	fp, r1
   191e8:	str	r3, [sp, #4]
   191ec:	str	r0, [sp, #8]
   191f0:	bge	19210 <__assert_fail@plt+0x7fb4>
   191f4:	mov	ip, r3
   191f8:	mov	r3, fp
   191fc:	mov	r1, r7
   19200:	mov	fp, r2
   19204:	mov	r7, ip
   19208:	mov	r2, r3
   1920c:	str	r1, [sp, #4]
   19210:	ldr	r3, [sp, #4]
   19214:	cmp	r3, #0
   19218:	beq	193c4 <__assert_fail@plt+0x8168>
   1921c:	ldr	r6, [r2, #4]
   19220:	ldr	r4, [fp, #4]
   19224:	ldr	r3, [sp, #8]
   19228:	lsr	r6, r6, #31
   1922c:	ldr	r1, [sp, #4]
   19230:	rsb	r9, r6, #0
   19234:	lsr	r4, r4, #31
   19238:	cmp	r9, #0
   1923c:	movne	r7, r1
   19240:	orr	r5, r4, r6
   19244:	ldr	r3, [r3]
   19248:	add	r1, r5, r7
   1924c:	cmp	r1, r3
   19250:	rsb	r8, r5, #0
   19254:	rsb	sl, r4, #0
   19258:	bgt	193ac <__assert_fail@plt+0x8150>
   1925c:	ldr	r3, [sp, #8]
   19260:	ldr	r3, [r3, #8]
   19264:	str	r3, [sp, #12]
   19268:	ldr	r0, [r2, #8]
   1926c:	ldr	r2, [sp, #4]
   19270:	ldr	r3, [fp, #8]
   19274:	sub	r0, r0, #4
   19278:	lsl	r2, r2, #2
   1927c:	str	r3, [sp, #16]
   19280:	mov	r1, r3
   19284:	add	fp, r3, r2
   19288:	ldr	r3, [sp, #12]
   1928c:	str	r2, [sp, #20]
   19290:	sub	ip, r3, #4
   19294:	b	1929c <__assert_fail@plt+0x8040>
   19298:	mov	r6, lr
   1929c:	ldr	r3, [r1], #4
   192a0:	ldr	r2, [r0, #4]!
   192a4:	eor	r3, r3, sl
   192a8:	adds	r3, r3, r4
   192ac:	eor	r2, r2, r9
   192b0:	movcs	r4, #1
   192b4:	movcc	r4, #0
   192b8:	adds	r2, r2, r6
   192bc:	orr	r3, r3, r2
   192c0:	eor	r3, r3, r8
   192c4:	movcs	lr, #1
   192c8:	movcc	lr, #0
   192cc:	adds	r3, r3, r5
   192d0:	movcs	r5, #1
   192d4:	movcc	r5, #0
   192d8:	cmp	fp, r1
   192dc:	str	r3, [ip, #4]!
   192e0:	bne	19298 <__assert_fail@plt+0x803c>
   192e4:	cmp	r6, r2
   192e8:	bhi	193d8 <__assert_fail@plt+0x817c>
   192ec:	ldr	r3, [sp, #4]
   192f0:	cmp	r3, r7
   192f4:	bge	19340 <__assert_fail@plt+0x80e4>
   192f8:	ldr	r3, [sp, #12]
   192fc:	ldr	r2, [sp, #20]
   19300:	add	r2, r3, r2
   19304:	ldr	r3, [sp, #16]
   19308:	add	r0, r3, r7, lsl #2
   1930c:	ldr	r3, [r1], #4
   19310:	eor	r3, r3, sl
   19314:	adds	r3, r3, r4
   19318:	orr	r3, r9, r3
   1931c:	eor	r3, r3, r8
   19320:	movcs	r4, #1
   19324:	movcc	r4, #0
   19328:	adds	r3, r3, r5
   1932c:	movcs	r5, #1
   19330:	movcc	r5, #0
   19334:	cmp	r0, r1
   19338:	str	r3, [r2], #4
   1933c:	bne	1930c <__assert_fail@plt+0x80b0>
   19340:	cmp	r5, #0
   19344:	bne	19384 <__assert_fail@plt+0x8128>
   19348:	cmp	r7, #0
   1934c:	beq	19394 <__assert_fail@plt+0x8138>
   19350:	ldr	r2, [sp, #12]
   19354:	sub	r0, r7, #-1073741823	; 0xc0000001
   19358:	ldr	r3, [r2, r0, lsl #2]
   1935c:	add	r0, r2, r0, lsl #2
   19360:	cmp	r3, #0
   19364:	beq	19378 <__assert_fail@plt+0x811c>
   19368:	b	19394 <__assert_fail@plt+0x8138>
   1936c:	ldr	r3, [r0, #-4]!
   19370:	cmp	r3, #0
   19374:	bne	19394 <__assert_fail@plt+0x8138>
   19378:	subs	r7, r7, #1
   1937c:	bne	1936c <__assert_fail@plt+0x8110>
   19380:	b	19394 <__assert_fail@plt+0x8138>
   19384:	ldr	r2, [sp, #12]
   19388:	mov	r3, #1
   1938c:	str	r3, [r2, r7, lsl #2]
   19390:	add	r7, r7, r3
   19394:	ldr	r3, [sp, #8]
   19398:	cmp	r8, #0
   1939c:	rsbne	r7, r7, #0
   193a0:	str	r7, [r3, #4]
   193a4:	add	sp, sp, #28
   193a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193ac:	ldr	r0, [sp, #8]
   193b0:	str	r2, [sp, #16]
   193b4:	bl	13440 <__assert_fail@plt+0x21e4>
   193b8:	ldr	r2, [sp, #16]
   193bc:	str	r0, [sp, #12]
   193c0:	b	19268 <__assert_fail@plt+0x800c>
   193c4:	mov	r1, fp
   193c8:	ldr	r0, [sp, #8]
   193cc:	add	sp, sp, #28
   193d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193d4:	b	15894 <__assert_fail@plt+0x4638>
   193d8:	ldr	r3, [pc, #12]	; 193ec <__assert_fail@plt+0x8190>
   193dc:	ldr	r2, [pc, #12]	; 193f0 <__assert_fail@plt+0x8194>
   193e0:	ldr	r1, [pc, #12]	; 193f4 <__assert_fail@plt+0x8198>
   193e4:	ldr	r0, [pc, #12]	; 193f8 <__assert_fail@plt+0x819c>
   193e8:	bl	1125c <__assert_fail@plt>
   193ec:	andeq	sp, r2, r8, lsl #9
   193f0:	andeq	r0, r0, r7, asr pc
   193f4:	andeq	sp, r2, r8, ror r5
   193f8:			; <UNDEFINED> instruction: 0x0002d8bc
   193fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19400:	sub	sp, sp, #28
   19404:	ldr	r8, [r1, #4]
   19408:	ldr	r3, [r2, #4]
   1940c:	cmp	r8, #0
   19410:	rsblt	r8, r8, #0
   19414:	cmp	r3, #0
   19418:	rsblt	r3, r3, #0
   1941c:	cmp	r8, r3
   19420:	mov	fp, r1
   19424:	str	r3, [sp, #4]
   19428:	str	r0, [sp, #8]
   1942c:	bge	1944c <__assert_fail@plt+0x81f0>
   19430:	mov	ip, r3
   19434:	mov	r3, fp
   19438:	mov	r1, r8
   1943c:	mov	fp, r2
   19440:	mov	r8, ip
   19444:	mov	r2, r3
   19448:	str	r1, [sp, #4]
   1944c:	ldr	r3, [sp, #4]
   19450:	cmp	r3, #0
   19454:	beq	195f0 <__assert_fail@plt+0x8394>
   19458:	ldr	r4, [fp, #4]
   1945c:	ldr	r6, [r2, #4]
   19460:	ldr	r3, [sp, #8]
   19464:	lsr	r4, r4, #31
   19468:	lsr	r6, r6, #31
   1946c:	eor	r5, r4, r6
   19470:	ldr	r3, [r3]
   19474:	add	r1, r5, r8
   19478:	cmp	r1, r3
   1947c:	rsb	r9, r5, #0
   19480:	rsb	r7, r4, #0
   19484:	rsb	sl, r6, #0
   19488:	bgt	195d8 <__assert_fail@plt+0x837c>
   1948c:	ldr	r3, [sp, #8]
   19490:	ldr	r3, [r3, #8]
   19494:	str	r3, [sp, #12]
   19498:	ldr	r0, [r2, #8]
   1949c:	ldr	r2, [sp, #4]
   194a0:	ldr	r3, [fp, #8]
   194a4:	sub	r0, r0, #4
   194a8:	lsl	r2, r2, #2
   194ac:	str	r3, [sp, #16]
   194b0:	mov	r1, r3
   194b4:	add	fp, r3, r2
   194b8:	ldr	r3, [sp, #12]
   194bc:	str	r2, [sp, #20]
   194c0:	sub	ip, r3, #4
   194c4:	b	194cc <__assert_fail@plt+0x8270>
   194c8:	mov	r6, lr
   194cc:	ldr	r3, [r1], #4
   194d0:	ldr	r2, [r0, #4]!
   194d4:	eor	r3, r3, r7
   194d8:	adds	lr, r3, r4
   194dc:	eor	r2, r2, sl
   194e0:	movcs	r4, #1
   194e4:	movcc	r4, #0
   194e8:	adds	r2, r2, r6
   194ec:	eor	r3, r9, r2
   194f0:	eor	r3, r3, lr
   194f4:	movcs	lr, #1
   194f8:	movcc	lr, #0
   194fc:	adds	r3, r3, r5
   19500:	movcs	r5, #1
   19504:	movcc	r5, #0
   19508:	cmp	fp, r1
   1950c:	str	r3, [ip, #4]!
   19510:	bne	194c8 <__assert_fail@plt+0x826c>
   19514:	cmp	r6, r2
   19518:	bhi	19604 <__assert_fail@plt+0x83a8>
   1951c:	ldr	r3, [sp, #4]
   19520:	cmp	r8, r3
   19524:	ble	1956c <__assert_fail@plt+0x8310>
   19528:	ldr	r3, [sp, #12]
   1952c:	ldr	r2, [sp, #20]
   19530:	add	r2, r3, r2
   19534:	ldr	r3, [sp, #16]
   19538:	add	r0, r3, r8, lsl #2
   1953c:	ldr	r3, [r1], #4
   19540:	eor	r3, r3, r7
   19544:	adds	r3, r3, r4
   19548:	eor	r3, r3, r7
   1954c:	movcs	r4, #1
   19550:	movcc	r4, #0
   19554:	adds	r3, r3, r5
   19558:	movcs	r5, #1
   1955c:	movcc	r5, #0
   19560:	cmp	r0, r1
   19564:	str	r3, [r2], #4
   19568:	bne	1953c <__assert_fail@plt+0x82e0>
   1956c:	cmp	r5, #0
   19570:	bne	195b0 <__assert_fail@plt+0x8354>
   19574:	cmp	r8, #0
   19578:	beq	195c0 <__assert_fail@plt+0x8364>
   1957c:	ldr	r2, [sp, #12]
   19580:	sub	r0, r8, #-1073741823	; 0xc0000001
   19584:	ldr	r3, [r2, r0, lsl #2]
   19588:	add	r0, r2, r0, lsl #2
   1958c:	cmp	r3, #0
   19590:	beq	195a4 <__assert_fail@plt+0x8348>
   19594:	b	195c0 <__assert_fail@plt+0x8364>
   19598:	ldr	r3, [r0, #-4]!
   1959c:	cmp	r3, #0
   195a0:	bne	195c0 <__assert_fail@plt+0x8364>
   195a4:	subs	r8, r8, #1
   195a8:	bne	19598 <__assert_fail@plt+0x833c>
   195ac:	b	195c0 <__assert_fail@plt+0x8364>
   195b0:	ldr	r2, [sp, #12]
   195b4:	mov	r3, #1
   195b8:	str	r3, [r2, r8, lsl #2]
   195bc:	add	r8, r8, r3
   195c0:	ldr	r3, [sp, #8]
   195c4:	cmp	r9, #0
   195c8:	rsbne	r8, r8, #0
   195cc:	str	r8, [r3, #4]
   195d0:	add	sp, sp, #28
   195d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195d8:	ldr	r0, [sp, #8]
   195dc:	str	r2, [sp, #16]
   195e0:	bl	13440 <__assert_fail@plt+0x21e4>
   195e4:	ldr	r2, [sp, #16]
   195e8:	str	r0, [sp, #12]
   195ec:	b	19498 <__assert_fail@plt+0x823c>
   195f0:	mov	r1, fp
   195f4:	ldr	r0, [sp, #8]
   195f8:	add	sp, sp, #28
   195fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19600:	b	15894 <__assert_fail@plt+0x4638>
   19604:	ldr	r3, [pc, #12]	; 19618 <__assert_fail@plt+0x83bc>
   19608:	ldr	r2, [pc, #12]	; 1961c <__assert_fail@plt+0x83c0>
   1960c:	ldr	r1, [pc, #12]	; 19620 <__assert_fail@plt+0x83c4>
   19610:	ldr	r0, [pc, #12]	; 19624 <__assert_fail@plt+0x83c8>
   19614:	bl	1125c <__assert_fail@plt>
   19618:	muleq	r2, r0, r4
   1961c:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   19620:	andeq	sp, r2, r8, ror r5
   19624:			; <UNDEFINED> instruction: 0x0002d8bc
   19628:	cmp	r1, #0
   1962c:	ble	196ac <__assert_fail@plt+0x8450>
   19630:	push	{r4, r5, r6, lr}
   19634:	mov	r4, r0
   19638:	ldr	lr, [pc, #116]	; 196b4 <__assert_fail@plt+0x8458>
   1963c:	ldr	ip, [pc, #116]	; 196b8 <__assert_fail@plt+0x845c>
   19640:	add	r5, r0, r1, lsl #2
   19644:	mov	r0, #0
   19648:	ldr	r2, [r4], #4
   1964c:	cmp	r2, #0
   19650:	beq	19698 <__assert_fail@plt+0x843c>
   19654:	mov	r1, #0
   19658:	and	r3, lr, r2, lsr #1
   1965c:	sub	r3, r2, r3
   19660:	and	r6, r3, ip
   19664:	and	r3, ip, r3, lsr #2
   19668:	add	r3, r3, r6
   1966c:	lsrs	r2, r2, #16
   19670:	add	r3, r3, r3, lsr #4
   19674:	and	r6, r3, #15
   19678:	lsl	r3, r3, #20
   1967c:	add	r3, r6, r3, lsr #28
   19680:	add	r1, r1, r3
   19684:	bne	19658 <__assert_fail@plt+0x83fc>
   19688:	cmp	r5, r4
   1968c:	add	r0, r0, r1
   19690:	bne	19648 <__assert_fail@plt+0x83ec>
   19694:	pop	{r4, r5, r6, pc}
   19698:	mov	r1, r2
   1969c:	cmp	r5, r4
   196a0:	add	r0, r0, r1
   196a4:	bne	19648 <__assert_fail@plt+0x83ec>
   196a8:	b	19694 <__assert_fail@plt+0x8438>
   196ac:	mov	r0, #0
   196b0:	bx	lr
   196b4:	andeq	r5, r0, r5, asr r5
   196b8:	andeq	r3, r0, r3, lsr r3
   196bc:	ldr	r1, [r0, #4]
   196c0:	cmp	r1, #0
   196c4:	bge	196d0 <__assert_fail@plt+0x8474>
   196c8:	mvn	r0, #0
   196cc:	bx	lr
   196d0:	ldr	r0, [r0, #8]
   196d4:	b	19628 <__assert_fail@plt+0x83cc>
   196d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196dc:	sub	sp, sp, #12
   196e0:	ldr	r3, [r0, #4]
   196e4:	ldr	r7, [r1, #4]
   196e8:	str	r3, [sp]
   196ec:	teq	r3, r7
   196f0:	bmi	19854 <__assert_fail@plt+0x85f8>
   196f4:	lsr	r5, r3, #31
   196f8:	cmp	r3, #0
   196fc:	rsb	r6, r5, #0
   19700:	blt	19860 <__assert_fail@plt+0x8604>
   19704:	ldr	r3, [sp]
   19708:	ldr	sl, [r1, #8]
   1970c:	cmp	r3, r7
   19710:	ldr	r2, [r0, #8]
   19714:	str	r2, [sp, #4]
   19718:	stmlt	sp, {r7, sl}
   1971c:	movlt	r7, r3
   19720:	movlt	sl, r2
   19724:	cmp	r7, #0
   19728:	ble	1987c <__assert_fail@plt+0x8620>
   1972c:	ldr	r3, [sp, #4]
   19730:	ldr	r4, [pc, #380]	; 198b4 <__assert_fail@plt+0x8658>
   19734:	ldr	lr, [pc, #380]	; 198b8 <__assert_fail@plt+0x865c>
   19738:	sub	sl, sl, #4
   1973c:	mov	r9, r3
   19740:	add	fp, r3, r7, lsl #2
   19744:	mov	r8, r5
   19748:	mov	r0, #0
   1974c:	ldr	r2, [r9], #4
   19750:	ldr	r3, [sl, #4]!
   19754:	eor	r2, r2, r6
   19758:	adds	r2, r2, r5
   1975c:	eor	r3, r3, r6
   19760:	movcs	r5, #1
   19764:	movcc	r5, #0
   19768:	adds	r3, r3, r8
   1976c:	movcs	r8, #1
   19770:	movcc	r8, #0
   19774:	cmp	r2, r3
   19778:	mov	r1, #0
   1977c:	eor	r2, r2, r3
   19780:	beq	197b4 <__assert_fail@plt+0x8558>
   19784:	and	r3, r4, r2, lsr #1
   19788:	sub	r3, r2, r3
   1978c:	and	ip, r3, lr
   19790:	and	r3, lr, r3, lsr #2
   19794:	add	r3, r3, ip
   19798:	lsrs	r2, r2, #16
   1979c:	add	r3, r3, r3, lsr #4
   197a0:	and	ip, r3, #15
   197a4:	lsl	r3, r3, #20
   197a8:	add	r3, ip, r3, lsr #28
   197ac:	add	r1, r1, r3
   197b0:	bne	19784 <__assert_fail@plt+0x8528>
   197b4:	cmp	fp, r9
   197b8:	add	r0, r0, r1
   197bc:	bne	1974c <__assert_fail@plt+0x84f0>
   197c0:	cmp	r8, #0
   197c4:	bne	198a0 <__assert_fail@plt+0x8644>
   197c8:	ldr	r3, [sp]
   197cc:	cmp	r3, r7
   197d0:	ble	1984c <__assert_fail@plt+0x85f0>
   197d4:	ldr	r2, [sp]
   197d8:	ldr	r3, [sp, #4]
   197dc:	ldr	lr, [pc, #208]	; 198b4 <__assert_fail@plt+0x8658>
   197e0:	ldr	ip, [pc, #208]	; 198b8 <__assert_fail@plt+0x865c>
   197e4:	add	r7, r3, r7, lsl #2
   197e8:	add	r8, r3, r2, lsl #2
   197ec:	ldr	r2, [r7], #4
   197f0:	mov	r1, #0
   197f4:	eor	r2, r2, r6
   197f8:	adds	r2, r2, r5
   197fc:	movcs	r5, #1
   19800:	movcc	r5, #0
   19804:	cmp	r6, r2
   19808:	eor	r2, r2, r6
   1980c:	beq	19840 <__assert_fail@plt+0x85e4>
   19810:	and	r3, lr, r2, lsr #1
   19814:	sub	r3, r2, r3
   19818:	and	r4, r3, ip
   1981c:	and	r3, ip, r3, lsr #2
   19820:	add	r3, r3, r4
   19824:	lsrs	r2, r2, #16
   19828:	add	r3, r3, r3, lsr #4
   1982c:	and	r4, r3, #15
   19830:	lsl	r3, r3, #20
   19834:	add	r3, r4, r3, lsr #28
   19838:	add	r1, r1, r3
   1983c:	bne	19810 <__assert_fail@plt+0x85b4>
   19840:	cmp	r8, r7
   19844:	add	r0, r0, r1
   19848:	bne	197ec <__assert_fail@plt+0x8590>
   1984c:	add	sp, sp, #12
   19850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19854:	mvn	r0, #0
   19858:	add	sp, sp, #12
   1985c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19860:	cmp	r7, #0
   19864:	bge	1988c <__assert_fail@plt+0x8630>
   19868:	ldr	r3, [sp]
   1986c:	rsb	r7, r7, #0
   19870:	rsb	r3, r3, #0
   19874:	str	r3, [sp]
   19878:	b	19704 <__assert_fail@plt+0x84a8>
   1987c:	mov	r7, #0
   19880:	mov	r0, r7
   19884:	mov	r8, r5
   19888:	b	197c0 <__assert_fail@plt+0x8564>
   1988c:	ldr	r3, [pc, #40]	; 198bc <__assert_fail@plt+0x8660>
   19890:	ldr	r2, [pc, #40]	; 198c0 <__assert_fail@plt+0x8664>
   19894:	ldr	r1, [pc, #40]	; 198c4 <__assert_fail@plt+0x8668>
   19898:	ldr	r0, [pc, #40]	; 198c8 <__assert_fail@plt+0x866c>
   1989c:	bl	1125c <__assert_fail@plt>
   198a0:	ldr	r3, [pc, #20]	; 198bc <__assert_fail@plt+0x8660>
   198a4:	ldr	r2, [pc, #32]	; 198cc <__assert_fail@plt+0x8670>
   198a8:	ldr	r1, [pc, #20]	; 198c4 <__assert_fail@plt+0x8668>
   198ac:	ldr	r0, [pc, #28]	; 198d0 <__assert_fail@plt+0x8674>
   198b0:	bl	1125c <__assert_fail@plt>
   198b4:	andeq	r5, r0, r5, asr r5
   198b8:	andeq	r3, r0, r3, lsr r3
   198bc:	muleq	r2, r8, r4
   198c0:	andeq	r0, r0, pc, ror #31
   198c4:	andeq	sp, r2, r8, ror r5
   198c8:	andeq	sp, r2, r4, asr #17
   198cc:	andeq	r1, r0, r4
   198d0:			; <UNDEFINED> instruction: 0x0002d8bc
   198d4:	push	{r4, r5, lr}
   198d8:	lsr	ip, r1, #5
   198dc:	ldr	lr, [r0, #4]
   198e0:	sub	sp, sp, #12
   198e4:	eor	r3, lr, lr, asr #31
   198e8:	sub	r3, r3, lr, asr #31
   198ec:	cmp	r3, ip
   198f0:	bgt	19908 <__assert_fail@plt+0x86ac>
   198f4:	cmp	lr, #0
   198f8:	movlt	r0, r1
   198fc:	mvnge	r0, #0
   19900:	add	sp, sp, #12
   19904:	pop	{r4, r5, pc}
   19908:	ldr	r2, [r0, #8]
   1990c:	cmp	r1, #0
   19910:	lsl	r4, ip, #2
   19914:	ldr	r0, [r2, ip, lsl #2]
   19918:	moveq	lr, r1
   1991c:	beq	19938 <__assert_fail@plt+0x86dc>
   19920:	cmp	lr, #0
   19924:	movge	lr, #0
   19928:	blt	1994c <__assert_fail@plt+0x86f0>
   1992c:	and	r1, r1, #31
   19930:	mvn	r4, #0
   19934:	and	r0, r0, r4, lsl r1
   19938:	str	lr, [sp]
   1993c:	mov	r1, ip
   19940:	bl	13240 <__assert_fail@plt+0x1fe4>
   19944:	add	sp, sp, #12
   19948:	pop	{r4, r5, pc}
   1994c:	cmp	ip, #0
   19950:	beq	19984 <__assert_fail@plt+0x8728>
   19954:	sub	lr, r4, #4
   19958:	add	r4, r2, lr
   1995c:	ldr	lr, [r2, lr]
   19960:	cmp	lr, #0
   19964:	bne	1999c <__assert_fail@plt+0x8740>
   19968:	mov	lr, ip
   1996c:	b	1997c <__assert_fail@plt+0x8720>
   19970:	ldr	r5, [r4, #-4]!
   19974:	cmp	r5, #0
   19978:	bne	1999c <__assert_fail@plt+0x8740>
   1997c:	subs	lr, lr, #1
   19980:	bne	19970 <__assert_fail@plt+0x8714>
   19984:	mov	lr, #1
   19988:	mvn	r0, r0
   1998c:	adds	r0, r0, lr
   19990:	mvncc	lr, #0
   19994:	movcs	lr, #0
   19998:	b	1992c <__assert_fail@plt+0x86d0>
   1999c:	mov	lr, #0
   199a0:	b	19988 <__assert_fail@plt+0x872c>
   199a4:	push	{r4, r5, r6, r7, lr}
   199a8:	lsr	r6, r1, #5
   199ac:	ldr	lr, [r0, #4]
   199b0:	sub	sp, sp, #12
   199b4:	cmp	lr, #0
   199b8:	eor	r3, lr, lr, asr #31
   199bc:	sub	r3, r3, lr, asr #31
   199c0:	movlt	lr, #0
   199c4:	mvnge	lr, #0
   199c8:	cmp	r3, r6
   199cc:	bgt	199e4 <__assert_fail@plt+0x8788>
   199d0:	cmp	lr, #0
   199d4:	movne	r0, r1
   199d8:	mvneq	r0, #0
   199dc:	add	sp, sp, #12
   199e0:	pop	{r4, r5, r6, r7, pc}
   199e4:	ldr	r2, [r0, #8]
   199e8:	cmp	lr, #0
   199ec:	lsl	ip, r6, #2
   199f0:	ldr	r7, [r2, r6, lsl #2]
   199f4:	eor	r7, r7, lr
   199f8:	bne	19a3c <__assert_fail@plt+0x87e0>
   199fc:	cmp	r6, #0
   19a00:	beq	19a34 <__assert_fail@plt+0x87d8>
   19a04:	sub	ip, ip, #4
   19a08:	add	r4, r2, ip
   19a0c:	ldr	r0, [r2, ip]
   19a10:	cmp	r0, #0
   19a14:	bne	19a5c <__assert_fail@plt+0x8800>
   19a18:	mov	ip, r6
   19a1c:	b	19a2c <__assert_fail@plt+0x87d0>
   19a20:	ldr	r5, [r4, #-4]!
   19a24:	cmp	r5, #0
   19a28:	bne	19a5c <__assert_fail@plt+0x8800>
   19a2c:	subs	ip, ip, #1
   19a30:	bne	19a20 <__assert_fail@plt+0x87c4>
   19a34:	mov	r0, #1
   19a38:	sub	r7, r7, r0
   19a3c:	and	ip, r1, #31
   19a40:	mvn	r0, #0
   19a44:	str	lr, [sp]
   19a48:	mov	r1, r6
   19a4c:	and	r0, r7, r0, lsl ip
   19a50:	bl	13240 <__assert_fail@plt+0x1fe4>
   19a54:	add	sp, sp, #12
   19a58:	pop	{r4, r5, r6, r7, pc}
   19a5c:	mov	r0, #0
   19a60:	b	19a38 <__assert_fail@plt+0x87dc>
   19a64:	cmp	r1, #1
   19a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a6c:	sub	sp, sp, #20
   19a70:	ble	19c14 <__assert_fail@plt+0x89b8>
   19a74:	cmp	r1, #62	; 0x3e
   19a78:	mov	r6, r1
   19a7c:	bgt	19c28 <__assert_fail@plt+0x89cc>
   19a80:	ldr	r4, [r0, #4]
   19a84:	cmp	r4, #0
   19a88:	moveq	r5, #1
   19a8c:	bne	19a9c <__assert_fail@plt+0x8840>
   19a90:	mov	r0, r5
   19a94:	add	sp, sp, #20
   19a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a9c:	cmp	r4, #0
   19aa0:	rsblt	r4, r4, #0
   19aa4:	ldr	r7, [r0, #8]
   19aa8:	sub	r8, r4, #-1073741823	; 0xc0000001
   19aac:	sub	r5, r4, #1
   19ab0:	ldr	r0, [r7, r8, lsl #2]
   19ab4:	bl	134b8 <__assert_fail@plt+0x225c>
   19ab8:	sub	r3, r6, #2
   19abc:	lsl	sl, r8, #2
   19ac0:	add	r5, r0, r5, lsl #5
   19ac4:	cmp	r3, #30
   19ac8:	ldrls	pc, [pc, r3, lsl #2]
   19acc:	b	19b8c <__assert_fail@plt+0x8930>
   19ad0:	muleq	r1, r0, sl
   19ad4:	andeq	r9, r1, ip, lsl #23
   19ad8:	andeq	r9, r1, r0, lsl #23
   19adc:	andeq	r9, r1, ip, lsl #23
   19ae0:	andeq	r9, r1, ip, lsl #23
   19ae4:	andeq	r9, r1, ip, lsl #23
   19ae8:	andeq	r9, r1, ip, ror #22
   19aec:	andeq	r9, r1, ip, lsl #23
   19af0:	andeq	r9, r1, ip, lsl #23
   19af4:	andeq	r9, r1, ip, lsl #23
   19af8:	andeq	r9, r1, ip, lsl #23
   19afc:	andeq	r9, r1, ip, lsl #23
   19b00:	andeq	r9, r1, ip, lsl #23
   19b04:	andeq	r9, r1, ip, lsl #23
   19b08:	andeq	r9, r1, r0, ror #22
   19b0c:	andeq	r9, r1, ip, lsl #23
   19b10:	andeq	r9, r1, ip, lsl #23
   19b14:	andeq	r9, r1, ip, lsl #23
   19b18:	andeq	r9, r1, ip, lsl #23
   19b1c:	andeq	r9, r1, ip, lsl #23
   19b20:	andeq	r9, r1, ip, lsl #23
   19b24:	andeq	r9, r1, ip, lsl #23
   19b28:	andeq	r9, r1, ip, lsl #23
   19b2c:	andeq	r9, r1, ip, lsl #23
   19b30:	andeq	r9, r1, ip, lsl #23
   19b34:	andeq	r9, r1, ip, lsl #23
   19b38:	andeq	r9, r1, ip, lsl #23
   19b3c:	andeq	r9, r1, ip, lsl #23
   19b40:	andeq	r9, r1, ip, lsl #23
   19b44:	andeq	r9, r1, ip, lsl #23
   19b48:	andeq	r9, r1, ip, asr #22
   19b4c:	ldr	r0, [pc, #232]	; 19c3c <__assert_fail@plt+0x89e0>
   19b50:	add	r5, r5, #4
   19b54:	umull	r3, r5, r0, r5
   19b58:	lsr	r5, r5, #2
   19b5c:	b	19a90 <__assert_fail@plt+0x8834>
   19b60:	add	r5, r5, #3
   19b64:	lsr	r5, r5, #2
   19b68:	b	19a90 <__assert_fail@plt+0x8834>
   19b6c:	ldr	r0, [pc, #204]	; 19c40 <__assert_fail@plt+0x89e4>
   19b70:	add	r5, r5, #2
   19b74:	umull	r3, r5, r0, r5
   19b78:	lsr	r5, r5, #1
   19b7c:	b	19a90 <__assert_fail@plt+0x8834>
   19b80:	add	r5, r5, #1
   19b84:	lsr	r5, r5, #1
   19b88:	b	19a90 <__assert_fail@plt+0x8834>
   19b8c:	ldr	fp, [pc, #176]	; 19c44 <__assert_fail@plt+0x89e8>
   19b90:	add	sl, sl, #4
   19b94:	mov	r0, sl
   19b98:	ldr	r3, [fp, #4]
   19b9c:	blx	r3
   19ba0:	add	r1, r7, sl
   19ba4:	mov	r9, r0
   19ba8:	sub	r3, r0, #4
   19bac:	ldr	r2, [r7], #4
   19bb0:	cmp	r7, r1
   19bb4:	str	r2, [r3, #4]!
   19bb8:	bne	19bac <__assert_fail@plt+0x8950>
   19bbc:	mov	r1, r6
   19bc0:	mov	r0, sp
   19bc4:	bl	1532c <__assert_fail@plt+0x40d0>
   19bc8:	mov	r5, #0
   19bcc:	b	19bd4 <__assert_fail@plt+0x8978>
   19bd0:	sub	r8, r4, #-1073741823	; 0xc0000001
   19bd4:	mov	r3, sp
   19bd8:	mov	r2, r4
   19bdc:	mov	r1, r9
   19be0:	mov	r0, r9
   19be4:	bl	145b4 <__assert_fail@plt+0x3358>
   19be8:	ldr	r3, [r9, r8, lsl #2]
   19bec:	add	r5, r5, #1
   19bf0:	cmp	r3, #0
   19bf4:	subeq	r4, r4, #1
   19bf8:	cmp	r4, #0
   19bfc:	bne	19bd0 <__assert_fail@plt+0x8974>
   19c00:	ldr	r3, [fp, #8]
   19c04:	mov	r1, sl
   19c08:	mov	r0, r9
   19c0c:	blx	r3
   19c10:	b	19a90 <__assert_fail@plt+0x8834>
   19c14:	ldr	r3, [pc, #44]	; 19c48 <__assert_fail@plt+0x89ec>
   19c18:	ldr	r2, [pc, #44]	; 19c4c <__assert_fail@plt+0x89f0>
   19c1c:	ldr	r1, [pc, #44]	; 19c50 <__assert_fail@plt+0x89f4>
   19c20:	ldr	r0, [pc, #44]	; 19c54 <__assert_fail@plt+0x89f8>
   19c24:	bl	1125c <__assert_fail@plt>
   19c28:	ldr	r3, [pc, #24]	; 19c48 <__assert_fail@plt+0x89ec>
   19c2c:	ldr	r2, [pc, #36]	; 19c58 <__assert_fail@plt+0x89fc>
   19c30:	ldr	r1, [pc, #24]	; 19c50 <__assert_fail@plt+0x89f4>
   19c34:	ldr	r0, [pc, #32]	; 19c5c <__assert_fail@plt+0x8a00>
   19c38:	bl	1125c <__assert_fail@plt>
   19c3c:	stclgt	12, cr12, [ip], {205}	; 0xcd
   19c40:	bge	feac46f4 <opterr@@GLIBC_2.4+0xfea85564>
   19c44:	andeq	pc, r3, r8, lsr #2
   19c48:	andeq	sp, r2, r4, lsr #9
   19c4c:	andeq	r1, r0, pc, asr r0
   19c50:	andeq	sp, r2, r8, ror r5
   19c54:	andeq	sp, r2, ip, asr #17
   19c58:	andeq	r1, r0, r0, rrx
   19c5c:	ldrdeq	sp, [r2], -r8
   19c60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c64:	mov	r6, r3
   19c68:	ldr	r7, [r2, #4]
   19c6c:	sub	sp, sp, #52	; 0x34
   19c70:	lsr	r3, r7, #31
   19c74:	bics	r3, r3, r6
   19c78:	bne	19fa0 <__assert_fail@plt+0x8d44>
   19c7c:	cmp	r6, #0
   19c80:	beq	19f98 <__assert_fail@plt+0x8d3c>
   19c84:	eor	r3, r7, r7, asr #31
   19c88:	sub	r3, r3, r7, asr #31
   19c8c:	cmp	r3, #1
   19c90:	mov	r5, r2
   19c94:	mov	sl, r0
   19c98:	mov	fp, r1
   19c9c:	ble	19e60 <__assert_fail@plt+0x8c04>
   19ca0:	ldr	r8, [pc, #768]	; 19fa8 <__assert_fail@plt+0x8d4c>
   19ca4:	mov	r4, #0
   19ca8:	mov	r1, #2
   19cac:	mov	r0, r5
   19cb0:	str	r8, [sp, #32]
   19cb4:	str	r8, [sp, #20]
   19cb8:	str	r4, [sp, #24]
   19cbc:	str	r4, [sp, #28]
   19cc0:	str	r4, [sp, #12]
   19cc4:	str	r4, [sp, #16]
   19cc8:	bl	19a64 <__assert_fail@plt+0x8808>
   19ccc:	mov	r1, r6
   19cd0:	sub	r0, r0, #1
   19cd4:	bl	2c1b4 <__assert_fail@plt+0x1af58>
   19cd8:	add	r1, r0, #1
   19cdc:	add	r0, sp, #12
   19ce0:	bl	17fe0 <__assert_fail@plt+0x6d84>
   19ce4:	cmp	r6, #2
   19ce8:	beq	19eb8 <__assert_fail@plt+0x8c5c>
   19cec:	cmp	r7, #0
   19cf0:	str	r4, [sp, #36]	; 0x24
   19cf4:	str	r4, [sp, #40]	; 0x28
   19cf8:	str	r8, [sp, #44]	; 0x2c
   19cfc:	blt	19f80 <__assert_fail@plt+0x8d24>
   19d00:	ldr	r3, [sp, #16]
   19d04:	sub	r9, r6, #1
   19d08:	add	r4, sp, #24
   19d0c:	mov	r8, #2
   19d10:	mov	r7, #0
   19d14:	b	19d1c <__assert_fail@plt+0x8ac0>
   19d18:	ldr	r3, [sp, #16]
   19d1c:	ldr	r2, [sp, #28]
   19d20:	ldr	r1, [sp, #24]
   19d24:	ldr	r0, [sp, #12]
   19d28:	ldr	lr, [sp, #32]
   19d2c:	ldr	ip, [sp, #20]
   19d30:	str	r2, [sp, #16]
   19d34:	str	r1, [sp, #12]
   19d38:	mov	r2, r9
   19d3c:	mov	r1, r4
   19d40:	str	r0, [sp, #24]
   19d44:	add	r0, sp, #12
   19d48:	str	lr, [sp, #20]
   19d4c:	str	ip, [sp, #32]
   19d50:	str	r3, [sp, #28]
   19d54:	bl	17c9c <__assert_fail@plt+0x6a40>
   19d58:	add	r3, sp, #12
   19d5c:	mov	r0, r3
   19d60:	mov	r2, r5
   19d64:	mov	r1, r7
   19d68:	str	r8, [sp]
   19d6c:	bl	165d8 <__assert_fail@plt+0x537c>
   19d70:	mov	r2, r9
   19d74:	mov	r1, r4
   19d78:	add	r0, sp, #36	; 0x24
   19d7c:	bl	16ce0 <__assert_fail@plt+0x5a84>
   19d80:	add	r1, sp, #12
   19d84:	mov	r0, r1
   19d88:	add	r2, sp, #36	; 0x24
   19d8c:	bl	16214 <__assert_fail@plt+0x4fb8>
   19d90:	add	r2, sp, #12
   19d94:	mov	r3, r6
   19d98:	mov	r1, r7
   19d9c:	mov	r0, r2
   19da0:	str	r8, [sp]
   19da4:	bl	16ad0 <__assert_fail@plt+0x5874>
   19da8:	mov	r1, r4
   19dac:	add	r0, sp, #12
   19db0:	bl	16130 <__assert_fail@plt+0x4ed4>
   19db4:	cmp	r0, #0
   19db8:	blt	19d18 <__assert_fail@plt+0x8abc>
   19dbc:	ldr	r1, [sp, #36]	; 0x24
   19dc0:	cmp	r1, #0
   19dc4:	bne	19f68 <__assert_fail@plt+0x8d0c>
   19dc8:	cmp	fp, #0
   19dcc:	beq	19df0 <__assert_fail@plt+0x8b94>
   19dd0:	mov	r2, r6
   19dd4:	mov	r1, r4
   19dd8:	add	r0, sp, #12
   19ddc:	bl	17c9c <__assert_fail@plt+0x6a40>
   19de0:	add	r2, sp, #12
   19de4:	mov	r1, r5
   19de8:	mov	r0, fp
   19dec:	bl	16584 <__assert_fail@plt+0x5328>
   19df0:	cmp	sl, #0
   19df4:	ldreq	r1, [sp, #24]
   19df8:	beq	19e30 <__assert_fail@plt+0x8bd4>
   19dfc:	ldr	r3, [sl]
   19e00:	ldr	r4, [sp, #24]
   19e04:	ldr	lr, [sl, #4]
   19e08:	ldr	ip, [sp, #28]
   19e0c:	ldr	r0, [sl, #8]
   19e10:	ldr	r2, [sp, #32]
   19e14:	mov	r1, r3
   19e18:	str	r3, [sp, #24]
   19e1c:	str	r4, [sl]
   19e20:	str	lr, [sp, #28]
   19e24:	str	ip, [sl, #4]
   19e28:	str	r0, [sp, #32]
   19e2c:	str	r2, [sl, #8]
   19e30:	cmp	r1, #0
   19e34:	bne	19f50 <__assert_fail@plt+0x8cf4>
   19e38:	ldr	r1, [sp, #12]
   19e3c:	cmp	r1, #0
   19e40:	beq	19e58 <__assert_fail@plt+0x8bfc>
   19e44:	ldr	r3, [pc, #352]	; 19fac <__assert_fail@plt+0x8d50>
   19e48:	lsl	r1, r1, #2
   19e4c:	ldr	r0, [sp, #20]
   19e50:	ldr	r3, [r3, #8]
   19e54:	blx	r3
   19e58:	add	sp, sp, #52	; 0x34
   19e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e60:	cmp	r7, #0
   19e64:	beq	19e8c <__assert_fail@plt+0x8c30>
   19e68:	ldr	r3, [r5, #8]
   19e6c:	ldr	r2, [r3]
   19e70:	clz	r3, r2
   19e74:	lsr	r3, r3, #5
   19e78:	cmp	r2, #1
   19e7c:	rsbls	r3, r3, #0
   19e80:	rsbhi	r3, r3, #1
   19e84:	cmp	r3, #1
   19e88:	beq	19ca0 <__assert_fail@plt+0x8a44>
   19e8c:	cmp	sl, #0
   19e90:	beq	19ea0 <__assert_fail@plt+0x8c44>
   19e94:	mov	r1, r5
   19e98:	mov	r0, sl
   19e9c:	bl	15894 <__assert_fail@plt+0x4638>
   19ea0:	cmp	fp, #0
   19ea4:	beq	19e58 <__assert_fail@plt+0x8bfc>
   19ea8:	mov	r3, #0
   19eac:	str	r3, [fp, #4]
   19eb0:	add	sp, sp, #52	; 0x34
   19eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19eb8:	mov	r7, r4
   19ebc:	mov	r8, r6
   19ec0:	add	r4, sp, #24
   19ec4:	mov	r9, #1
   19ec8:	ldr	ip, [sp, #28]
   19ecc:	ldr	r3, [sp, #16]
   19ed0:	ldr	r2, [sp, #24]
   19ed4:	ldr	r1, [sp, #12]
   19ed8:	ldr	r0, [sp, #32]
   19edc:	str	ip, [sp, #16]
   19ee0:	ldr	ip, [sp, #20]
   19ee4:	str	r3, [sp, #28]
   19ee8:	str	r2, [sp, #12]
   19eec:	mov	r3, r4
   19ef0:	mov	r2, r5
   19ef4:	str	r1, [sp, #24]
   19ef8:	str	r0, [sp, #20]
   19efc:	mov	r1, r7
   19f00:	str	r8, [sp]
   19f04:	add	r0, sp, #12
   19f08:	str	ip, [sp, #32]
   19f0c:	bl	165d8 <__assert_fail@plt+0x537c>
   19f10:	add	r1, sp, #12
   19f14:	mov	r0, r1
   19f18:	mov	r2, r4
   19f1c:	bl	16214 <__assert_fail@plt+0x4fb8>
   19f20:	ldr	r1, [sp, #16]
   19f24:	mov	r3, r9
   19f28:	add	r2, sp, #20
   19f2c:	add	r0, sp, #12
   19f30:	str	r8, [sp]
   19f34:	bl	16350 <__assert_fail@plt+0x50f4>
   19f38:	mov	r1, r4
   19f3c:	add	r0, sp, #12
   19f40:	bl	16130 <__assert_fail@plt+0x4ed4>
   19f44:	cmp	r0, #0
   19f48:	blt	19ec8 <__assert_fail@plt+0x8c6c>
   19f4c:	b	19dc8 <__assert_fail@plt+0x8b6c>
   19f50:	ldr	r3, [pc, #84]	; 19fac <__assert_fail@plt+0x8d50>
   19f54:	lsl	r1, r1, #2
   19f58:	ldr	r0, [sp, #32]
   19f5c:	ldr	r3, [r3, #8]
   19f60:	blx	r3
   19f64:	b	19e38 <__assert_fail@plt+0x8bdc>
   19f68:	ldr	r3, [pc, #60]	; 19fac <__assert_fail@plt+0x8d50>
   19f6c:	lsl	r1, r1, #2
   19f70:	ldr	r0, [sp, #44]	; 0x2c
   19f74:	ldr	r3, [r3, #8]
   19f78:	blx	r3
   19f7c:	b	19dc8 <__assert_fail@plt+0x8b6c>
   19f80:	add	r1, sp, #12
   19f84:	mov	r0, r1
   19f88:	bl	15894 <__assert_fail@plt+0x4638>
   19f8c:	ldr	r3, [sp, #16]
   19f90:	rsb	r3, r3, #0
   19f94:	b	19d04 <__assert_fail@plt+0x8aa8>
   19f98:	ldr	r0, [pc, #16]	; 19fb0 <__assert_fail@plt+0x8d54>
   19f9c:	bl	112b4 <__assert_fail@plt+0x58>
   19fa0:	ldr	r0, [pc, #12]	; 19fb4 <__assert_fail@plt+0x8d58>
   19fa4:	bl	112b4 <__assert_fail@plt+0x58>
   19fa8:	strdeq	sp, [r2], -r8
   19fac:	andeq	pc, r3, r8, lsr #2
   19fb0:	andeq	sp, r2, r4, lsl r9
   19fb4:	andeq	sp, r2, r4, ror #17
   19fb8:	push	{r4, lr}
   19fbc:	sub	sp, sp, #16
   19fc0:	ldr	lr, [pc, #80]	; 1a018 <__assert_fail@plt+0x8dbc>
   19fc4:	mov	ip, #0
   19fc8:	mov	r3, r2
   19fcc:	mov	r2, r1
   19fd0:	add	r1, sp, #4
   19fd4:	str	lr, [sp, #12]
   19fd8:	str	ip, [sp, #4]
   19fdc:	str	ip, [sp, #8]
   19fe0:	bl	19c60 <__assert_fail@plt+0x8a04>
   19fe4:	ldmib	sp, {r1, r4}
   19fe8:	clz	r4, r4
   19fec:	lsr	r4, r4, #5
   19ff0:	cmp	r1, #0
   19ff4:	beq	1a00c <__assert_fail@plt+0x8db0>
   19ff8:	ldr	r3, [pc, #28]	; 1a01c <__assert_fail@plt+0x8dc0>
   19ffc:	lsl	r1, r1, #2
   1a000:	ldr	r0, [sp, #12]
   1a004:	ldr	r3, [r3, #8]
   1a008:	blx	r3
   1a00c:	mov	r0, r4
   1a010:	add	sp, sp, #16
   1a014:	pop	{r4, pc}
   1a018:	strdeq	sp, [r2], -r8
   1a01c:	andeq	pc, r3, r8, lsr #2
   1a020:	ldr	r3, [r0, #4]
   1a024:	cmp	r3, #0
   1a028:	ble	1a03c <__assert_fail@plt+0x8de0>
   1a02c:	mov	r1, r0
   1a030:	mov	r2, #2
   1a034:	mov	r0, #0
   1a038:	b	19fb8 <__assert_fail@plt+0x8d5c>
   1a03c:	moveq	r0, #1
   1a040:	movne	r0, #0
   1a044:	bx	lr
   1a048:	subs	r3, r1, #0
   1a04c:	push	{lr}		; (str lr, [sp, #-4]!)
   1a050:	sub	sp, sp, #20
   1a054:	ble	1a094 <__assert_fail@plt+0x8e38>
   1a058:	sub	r2, r3, #-1073741823	; 0xc0000001
   1a05c:	mov	ip, r0
   1a060:	ldr	r2, [r0, r2, lsl #2]
   1a064:	cmp	r2, #0
   1a068:	beq	1a0a8 <__assert_fail@plt+0x8e4c>
   1a06c:	mov	lr, #0
   1a070:	mov	r0, lr
   1a074:	mov	r2, #2
   1a078:	add	r1, sp, #4
   1a07c:	str	ip, [sp, #12]
   1a080:	str	r3, [sp, #8]
   1a084:	str	lr, [sp, #4]
   1a088:	bl	19fb8 <__assert_fail@plt+0x8d5c>
   1a08c:	add	sp, sp, #20
   1a090:	pop	{pc}		; (ldr pc, [sp], #4)
   1a094:	ldr	r3, [pc, #32]	; 1a0bc <__assert_fail@plt+0x8e60>
   1a098:	ldr	r2, [pc, #32]	; 1a0c0 <__assert_fail@plt+0x8e64>
   1a09c:	ldr	r1, [pc, #32]	; 1a0c4 <__assert_fail@plt+0x8e68>
   1a0a0:	ldr	r0, [pc, #32]	; 1a0c8 <__assert_fail@plt+0x8e6c>
   1a0a4:	bl	1125c <__assert_fail@plt>
   1a0a8:	ldr	r3, [pc, #12]	; 1a0bc <__assert_fail@plt+0x8e60>
   1a0ac:	ldr	r2, [pc, #24]	; 1a0cc <__assert_fail@plt+0x8e70>
   1a0b0:	ldr	r1, [pc, #12]	; 1a0c4 <__assert_fail@plt+0x8e68>
   1a0b4:	ldr	r0, [pc, #20]	; 1a0d0 <__assert_fail@plt+0x8e74>
   1a0b8:	bl	1125c <__assert_fail@plt>
   1a0bc:			; <UNDEFINED> instruction: 0x0002d4b4
   1a0c0:	andeq	r0, r0, r6, ror #25
   1a0c4:	andeq	sp, r2, r8, ror r5
   1a0c8:	andeq	sp, r2, ip, lsr r6
   1a0cc:	andeq	r0, r0, r7, ror #25
   1a0d0:	andeq	sp, r2, r0, lsr r9
   1a0d4:	mov	r3, #2
   1a0d8:	b	19c60 <__assert_fail@plt+0x8a04>
   1a0dc:	mov	r2, r1
   1a0e0:	mov	r3, #2
   1a0e4:	mov	r1, #0
   1a0e8:	b	19c60 <__assert_fail@plt+0x8a04>
   1a0ec:	push	{r4, r5, r6, r7, lr}
   1a0f0:	subs	r6, r3, #0
   1a0f4:	sub	sp, sp, #44	; 0x2c
   1a0f8:	ble	1a238 <__assert_fail@plt+0x8fdc>
   1a0fc:	sub	r3, r6, #-1073741823	; 0xc0000001
   1a100:	mov	r4, r0
   1a104:	ldr	r3, [r2, r3, lsl #2]
   1a108:	mov	r0, r2
   1a10c:	cmp	r3, #0
   1a110:	beq	1a224 <__assert_fail@plt+0x8fc8>
   1a114:	ldr	r7, [pc, #304]	; 1a24c <__assert_fail@plt+0x8ff0>
   1a118:	mov	ip, #0
   1a11c:	mov	r3, #2
   1a120:	str	r0, [sp, #36]	; 0x24
   1a124:	mov	r5, r1
   1a128:	add	r2, sp, #28
   1a12c:	add	r1, sp, #16
   1a130:	add	r0, sp, #4
   1a134:	str	r6, [sp, #32]
   1a138:	str	r7, [sp, #24]
   1a13c:	str	r7, [sp, #12]
   1a140:	str	ip, [sp, #16]
   1a144:	str	ip, [sp, #20]
   1a148:	str	ip, [sp, #4]
   1a14c:	str	ip, [sp, #8]
   1a150:	str	ip, [sp, #28]
   1a154:	add	r6, r6, #1
   1a158:	bl	19c60 <__assert_fail@plt+0x8a04>
   1a15c:	ldr	r3, [sp, #8]
   1a160:	cmp	r3, r6, asr #1
   1a164:	bne	1a210 <__assert_fail@plt+0x8fb4>
   1a168:	cmp	r3, #0
   1a16c:	ldr	r0, [sp, #12]
   1a170:	lslgt	r3, r3, #2
   1a174:	addgt	r2, r4, r3
   1a178:	addgt	r3, r0, r3
   1a17c:	ble	1a190 <__assert_fail@plt+0x8f34>
   1a180:	ldr	r1, [r3, #-4]!
   1a184:	cmp	r3, r0
   1a188:	str	r1, [r2, #-4]!
   1a18c:	bne	1a180 <__assert_fail@plt+0x8f24>
   1a190:	ldr	r1, [sp, #4]
   1a194:	cmp	r1, #0
   1a198:	bne	1a1fc <__assert_fail@plt+0x8fa0>
   1a19c:	cmp	r5, #0
   1a1a0:	ldr	r4, [sp, #20]
   1a1a4:	beq	1a1d0 <__assert_fail@plt+0x8f74>
   1a1a8:	cmp	r4, #0
   1a1ac:	ldr	r0, [sp, #24]
   1a1b0:	ble	1a1d0 <__assert_fail@plt+0x8f74>
   1a1b4:	lsl	r3, r4, #2
   1a1b8:	add	r1, r5, r3
   1a1bc:	add	r3, r0, r3
   1a1c0:	ldr	r2, [r3, #-4]!
   1a1c4:	cmp	r3, r0
   1a1c8:	str	r2, [r1, #-4]!
   1a1cc:	bne	1a1c0 <__assert_fail@plt+0x8f64>
   1a1d0:	ldr	r1, [sp, #16]
   1a1d4:	cmp	r1, #0
   1a1d8:	beq	1a1f0 <__assert_fail@plt+0x8f94>
   1a1dc:	ldr	r3, [pc, #108]	; 1a250 <__assert_fail@plt+0x8ff4>
   1a1e0:	lsl	r1, r1, #2
   1a1e4:	ldr	r0, [sp, #24]
   1a1e8:	ldr	r3, [r3, #8]
   1a1ec:	blx	r3
   1a1f0:	mov	r0, r4
   1a1f4:	add	sp, sp, #44	; 0x2c
   1a1f8:	pop	{r4, r5, r6, r7, pc}
   1a1fc:	ldr	r3, [pc, #76]	; 1a250 <__assert_fail@plt+0x8ff4>
   1a200:	lsl	r1, r1, #2
   1a204:	ldr	r3, [r3, #8]
   1a208:	blx	r3
   1a20c:	b	1a19c <__assert_fail@plt+0x8f40>
   1a210:	add	r3, r7, #212	; 0xd4
   1a214:	ldr	r2, [pc, #56]	; 1a254 <__assert_fail@plt+0x8ff8>
   1a218:	ldr	r1, [pc, #56]	; 1a258 <__assert_fail@plt+0x8ffc>
   1a21c:	ldr	r0, [pc, #56]	; 1a25c <__assert_fail@plt+0x9000>
   1a220:	bl	1125c <__assert_fail@plt>
   1a224:	ldr	r3, [pc, #52]	; 1a260 <__assert_fail@plt+0x9004>
   1a228:	ldr	r2, [pc, #52]	; 1a264 <__assert_fail@plt+0x9008>
   1a22c:	ldr	r1, [pc, #36]	; 1a258 <__assert_fail@plt+0x8ffc>
   1a230:	ldr	r0, [pc, #48]	; 1a268 <__assert_fail@plt+0x900c>
   1a234:	bl	1125c <__assert_fail@plt>
   1a238:	ldr	r3, [pc, #32]	; 1a260 <__assert_fail@plt+0x9004>
   1a23c:	ldr	r2, [pc, #40]	; 1a26c <__assert_fail@plt+0x9010>
   1a240:	ldr	r1, [pc, #16]	; 1a258 <__assert_fail@plt+0x8ffc>
   1a244:	ldr	r0, [pc, #36]	; 1a270 <__assert_fail@plt+0x9014>
   1a248:	bl	1125c <__assert_fail@plt>
   1a24c:	strdeq	sp, [r2], -r8
   1a250:	andeq	pc, r3, r8, lsr #2
   1a254:	strdeq	r0, [r0], -r8
   1a258:	andeq	sp, r2, r8, ror r5
   1a25c:	andeq	sp, r2, r0, asr #18
   1a260:	andeq	sp, r2, ip, asr #9
   1a264:	strdeq	r0, [r0], -r2
   1a268:	andeq	sp, r2, r0, lsr r9
   1a26c:	strdeq	r0, [r0], -r1
   1a270:	andeq	sp, r2, ip, lsr r6
   1a274:	ldr	r2, [r0, #8]
   1a278:	ldr	r3, [r0, #4]
   1a27c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a280:	sub	sp, sp, #100	; 0x64
   1a284:	ldr	r2, [r2]
   1a288:	cmp	r3, #0
   1a28c:	moveq	ip, #0
   1a290:	andne	ip, r2, #1
   1a294:	cmp	ip, #0
   1a298:	bne	1a2bc <__assert_fail@plt+0x9060>
   1a29c:	eor	r1, r3, r3, asr #31
   1a2a0:	sub	r1, r1, r3, asr #31
   1a2a4:	cmp	r1, #1
   1a2a8:	ble	1a43c <__assert_fail@plt+0x91e0>
   1a2ac:	mov	r5, #0
   1a2b0:	mov	r0, r5
   1a2b4:	add	sp, sp, #100	; 0x64
   1a2b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2bc:	cmp	r3, #0
   1a2c0:	rsblt	r3, r3, #0
   1a2c4:	cmp	r3, #1
   1a2c8:	beq	1a400 <__assert_fail@plt+0x91a4>
   1a2cc:	mov	r7, r1
   1a2d0:	mov	r4, r0
   1a2d4:	mov	r1, r0
   1a2d8:	ldr	r2, [pc, #1912]	; 1aa58 <__assert_fail@plt+0x97fc>
   1a2dc:	mov	r0, #0
   1a2e0:	bl	17a80 <__assert_fail@plt+0x6824>
   1a2e4:	cmp	r0, #1
   1a2e8:	bne	1a2ac <__assert_fail@plt+0x9050>
   1a2ec:	ldr	r3, [r4, #4]
   1a2f0:	eor	r2, r3, r3, asr #31
   1a2f4:	sub	r2, r2, r3, asr #31
   1a2f8:	cmp	r2, #1
   1a2fc:	ble	1a474 <__assert_fail@plt+0x9218>
   1a300:	ldr	sl, [pc, #1876]	; 1aa5c <__assert_fail@plt+0x9800>
   1a304:	add	fp, sp, #96	; 0x60
   1a308:	mov	r5, #0
   1a30c:	add	r0, sp, #24
   1a310:	mov	r1, r4
   1a314:	str	sl, [sp, #32]
   1a318:	str	sl, [sp, #44]	; 0x2c
   1a31c:	str	r5, [sp, #24]
   1a320:	str	r5, [sp, #28]
   1a324:	str	r5, [sp, #36]	; 0x24
   1a328:	str	r5, [sp, #40]	; 0x28
   1a32c:	bl	15894 <__assert_fail@plt+0x4638>
   1a330:	ldr	r1, [fp, #-64]!	; 0xffffffc0
   1a334:	ldr	r8, [sp, #28]
   1a338:	mov	r2, r1
   1a33c:	ldr	r3, [r1]
   1a340:	cmp	r8, #0
   1a344:	rsblt	r8, r8, #0
   1a348:	sub	r3, r3, #1
   1a34c:	str	r8, [sp, #28]
   1a350:	mov	r0, r3
   1a354:	str	r3, [r1]
   1a358:	mov	r3, r5
   1a35c:	mov	r1, r5
   1a360:	str	r5, [sp]
   1a364:	bl	13240 <__assert_fail@plt+0x1fe4>
   1a368:	mov	r6, #2
   1a36c:	mov	r2, fp
   1a370:	mov	r1, r8
   1a374:	str	r6, [sp]
   1a378:	mov	r3, r0
   1a37c:	mov	r9, r0
   1a380:	add	r0, sp, #36	; 0x24
   1a384:	bl	16350 <__assert_fail@plt+0x50f4>
   1a388:	mov	r1, r6
   1a38c:	add	r0, sp, #48	; 0x30
   1a390:	str	r5, [sp, #48]	; 0x30
   1a394:	str	r5, [sp, #52]	; 0x34
   1a398:	str	sl, [sp, #56]	; 0x38
   1a39c:	bl	137f8 <__assert_fail@plt+0x259c>
   1a3a0:	str	r9, [sp]
   1a3a4:	add	r3, sp, #36	; 0x24
   1a3a8:	add	r2, sp, #48	; 0x30
   1a3ac:	add	r1, sp, #24
   1a3b0:	mov	r0, r4
   1a3b4:	bl	18de8 <__assert_fail@plt+0x7b8c>
   1a3b8:	cmp	r0, r5
   1a3bc:	bne	1a4ac <__assert_fail@plt+0x9250>
   1a3c0:	mov	r5, #0
   1a3c4:	ldr	r1, [sp, #24]
   1a3c8:	cmp	r1, #0
   1a3cc:	bne	1a6d4 <__assert_fail@plt+0x9478>
   1a3d0:	ldr	r1, [sp, #36]	; 0x24
   1a3d4:	cmp	r1, #0
   1a3d8:	bne	1a6bc <__assert_fail@plt+0x9460>
   1a3dc:	ldr	r1, [sp, #48]	; 0x30
   1a3e0:	cmp	r1, #0
   1a3e4:	beq	1a2b0 <__assert_fail@plt+0x9054>
   1a3e8:	ldr	r3, [pc, #1648]	; 1aa60 <__assert_fail@plt+0x9804>
   1a3ec:	lsl	r1, r1, #2
   1a3f0:	ldr	r0, [sp, #56]	; 0x38
   1a3f4:	ldr	r3, [r3, #8]
   1a3f8:	blx	r3
   1a3fc:	b	1a2b0 <__assert_fail@plt+0x9054>
   1a400:	cmp	r2, #63	; 0x3f
   1a404:	movhi	r3, #0
   1a408:	movls	r3, #1
   1a40c:	cmp	r2, #64	; 0x40
   1a410:	rsbls	r3, r3, #0
   1a414:	rsbhi	r3, r3, #1
   1a418:	cmn	r3, #1
   1a41c:	bne	1a2cc <__assert_fail@plt+0x9070>
   1a420:	ldr	r5, [pc, #1596]	; 1aa64 <__assert_fail@plt+0x9808>
   1a424:	lsr	r2, r2, #1
   1a428:	lsr	r2, r5, r2
   1a42c:	and	r5, r2, #2
   1a430:	mov	r0, r5
   1a434:	add	sp, sp, #100	; 0x64
   1a438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a43c:	cmp	r3, #0
   1a440:	beq	1a2ac <__assert_fail@plt+0x9050>
   1a444:	cmp	r2, #2
   1a448:	movls	r3, #0
   1a44c:	movhi	r3, #1
   1a450:	cmp	r2, #1
   1a454:	movhi	r2, #0
   1a458:	movls	r2, #1
   1a45c:	cmp	r3, r2
   1a460:	bne	1a2ac <__assert_fail@plt+0x9050>
   1a464:	mov	r5, #2
   1a468:	mov	r0, r5
   1a46c:	add	sp, sp, #100	; 0x64
   1a470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a474:	cmp	r3, #0
   1a478:	beq	1a464 <__assert_fail@plt+0x9208>
   1a47c:	ldr	r3, [r4, #8]
   1a480:	ldr	r1, [pc, #1504]	; 1aa68 <__assert_fail@plt+0x980c>
   1a484:	ldr	r2, [r3]
   1a488:	cmp	r2, #960	; 0x3c0
   1a48c:	movhi	r3, #0
   1a490:	movls	r3, #1
   1a494:	cmp	r2, r1
   1a498:	rsbls	r3, r3, #0
   1a49c:	rsbhi	r3, r3, #1
   1a4a0:	cmn	r3, #1
   1a4a4:	beq	1a464 <__assert_fail@plt+0x9208>
   1a4a8:	b	1a300 <__assert_fail@plt+0x90a4>
   1a4ac:	ldr	r2, [r4, #8]
   1a4b0:	ldr	r3, [r4, #4]
   1a4b4:	str	r5, [sp, #72]	; 0x48
   1a4b8:	ldr	r5, [r2]
   1a4bc:	str	r2, [sp, #80]	; 0x50
   1a4c0:	cmp	r3, #0
   1a4c4:	moveq	r5, #0
   1a4c8:	andne	r5, r5, #1
   1a4cc:	cmp	r3, #0
   1a4d0:	rsblt	r3, r3, #0
   1a4d4:	cmp	r5, #0
   1a4d8:	str	r3, [sp, #76]	; 0x4c
   1a4dc:	beq	1a9dc <__assert_fail@plt+0x9780>
   1a4e0:	mov	r2, r6
   1a4e4:	add	r1, sp, #72	; 0x48
   1a4e8:	add	r0, sp, #48	; 0x30
   1a4ec:	bl	19fb8 <__assert_fail@plt+0x8d5c>
   1a4f0:	subs	r6, r0, #0
   1a4f4:	bne	1a3c0 <__assert_fail@plt+0x9164>
   1a4f8:	ldr	r3, [sp, #52]	; 0x34
   1a4fc:	cmp	r3, #1
   1a500:	mvnne	fp, #0
   1a504:	beq	1a96c <__assert_fail@plt+0x9710>
   1a508:	mov	r8, #3
   1a50c:	mov	r3, #2
   1a510:	mov	r1, #0
   1a514:	add	r8, r8, #2
   1a518:	str	r3, [sp]
   1a51c:	add	r2, sp, #72	; 0x48
   1a520:	mov	r3, r8
   1a524:	mov	r0, r1
   1a528:	bl	16ad0 <__assert_fail@plt+0x5874>
   1a52c:	cmp	r0, #0
   1a530:	beq	1a3c0 <__assert_fail@plt+0x9164>
   1a534:	rsb	r3, r0, #0
   1a538:	and	r3, r3, r0
   1a53c:	ands	r2, r3, #-16777216	; 0xff000000
   1a540:	lsr	r1, r8, #1
   1a544:	bne	1a6ec <__assert_fail@plt+0x9490>
   1a548:	lsl	r3, r3, #8
   1a54c:	tst	r3, #-16777216	; 0xff000000
   1a550:	add	r2, r2, #8
   1a554:	beq	1a548 <__assert_fail@plt+0x92ec>
   1a558:	cmp	r3, #0
   1a55c:	blt	1a56c <__assert_fail@plt+0x9310>
   1a560:	lsls	r3, r3, #1
   1a564:	add	r2, r2, #1
   1a568:	bpl	1a560 <__assert_fail@plt+0x9304>
   1a56c:	rsb	r2, r2, #31
   1a570:	lsr	r0, r0, #1
   1a574:	mov	lr, r6
   1a578:	lsr	ip, r1, #1
   1a57c:	lsr	r3, r0, r2
   1a580:	eor	r0, ip, r1
   1a584:	and	r2, r2, r0
   1a588:	cmp	r3, r1
   1a58c:	eor	lr, lr, r2
   1a590:	bcs	1a5ec <__assert_fail@plt+0x9390>
   1a594:	cmp	r3, #0
   1a598:	beq	1a610 <__assert_fail@plt+0x93b4>
   1a59c:	and	r2, r3, r1
   1a5a0:	sub	r0, r1, r3
   1a5a4:	eor	lr, lr, r2
   1a5a8:	mov	r1, r3
   1a5ac:	lsr	ip, r3, #1
   1a5b0:	rsb	r3, r0, #0
   1a5b4:	and	r3, r3, r0
   1a5b8:	ands	r2, r3, #-16777216	; 0xff000000
   1a5bc:	bne	1a608 <__assert_fail@plt+0x93ac>
   1a5c0:	lsl	r3, r3, #8
   1a5c4:	tst	r3, #-16777216	; 0xff000000
   1a5c8:	add	r2, r2, #8
   1a5cc:	beq	1a5c0 <__assert_fail@plt+0x9364>
   1a5d0:	cmp	r3, #0
   1a5d4:	blt	1a5e4 <__assert_fail@plt+0x9388>
   1a5d8:	lsls	r3, r3, #1
   1a5dc:	add	r2, r2, #1
   1a5e0:	bpl	1a5d8 <__assert_fail@plt+0x937c>
   1a5e4:	rsb	r2, r2, #32
   1a5e8:	b	1a57c <__assert_fail@plt+0x9320>
   1a5ec:	subs	r0, r3, r1
   1a5f0:	bne	1a5b0 <__assert_fail@plt+0x9354>
   1a5f4:	ldr	r3, [pc, #1136]	; 1aa6c <__assert_fail@plt+0x9810>
   1a5f8:	ldr	r2, [pc, #1136]	; 1aa70 <__assert_fail@plt+0x9814>
   1a5fc:	ldr	r1, [pc, #1136]	; 1aa74 <__assert_fail@plt+0x9818>
   1a600:	ldr	r0, [pc, #1136]	; 1aa78 <__assert_fail@plt+0x981c>
   1a604:	bl	1125c <__assert_fail@plt>
   1a608:	mov	r2, #0
   1a60c:	b	1a5d0 <__assert_fail@plt+0x9374>
   1a610:	tst	lr, #1
   1a614:	bne	1a6f4 <__assert_fail@plt+0x9498>
   1a618:	cmp	r8, fp
   1a61c:	bcc	1a50c <__assert_fail@plt+0x92b0>
   1a620:	sub	r7, r7, #24
   1a624:	cmp	r7, #0
   1a628:	movle	r8, #0
   1a62c:	movgt	r8, #1
   1a630:	cmp	r8, #0
   1a634:	bne	1a684 <__assert_fail@plt+0x9428>
   1a638:	b	1a3c4 <__assert_fail@plt+0x9168>
   1a63c:	add	r1, sp, #24
   1a640:	add	r0, sp, #48	; 0x30
   1a644:	bl	1603c <__assert_fail@plt+0x4de0>
   1a648:	cmp	r0, #0
   1a64c:	bge	1a6a0 <__assert_fail@plt+0x9444>
   1a650:	add	r3, sp, #36	; 0x24
   1a654:	str	r9, [sp]
   1a658:	add	r2, sp, #48	; 0x30
   1a65c:	add	r1, sp, #24
   1a660:	mov	r0, r4
   1a664:	bl	18de8 <__assert_fail@plt+0x7b8c>
   1a668:	add	r6, r6, #1
   1a66c:	cmp	r6, r7
   1a670:	movge	r3, #0
   1a674:	andlt	r3, r0, #1
   1a678:	cmp	r3, #0
   1a67c:	mov	r5, r0
   1a680:	beq	1a3c4 <__assert_fail@plt+0x9168>
   1a684:	add	r3, r6, #41	; 0x29
   1a688:	mlas	r1, r6, r6, r3
   1a68c:	streq	r1, [sp, #52]	; 0x34
   1a690:	beq	1a63c <__assert_fail@plt+0x93e0>
   1a694:	add	r0, sp, #48	; 0x30
   1a698:	bl	137f8 <__assert_fail@plt+0x259c>
   1a69c:	b	1a63c <__assert_fail@plt+0x93e0>
   1a6a0:	cmp	r6, #29
   1a6a4:	bgt	1a3c4 <__assert_fail@plt+0x9168>
   1a6a8:	ldr	r3, [pc, #972]	; 1aa7c <__assert_fail@plt+0x9820>
   1a6ac:	ldr	r2, [pc, #972]	; 1aa80 <__assert_fail@plt+0x9824>
   1a6b0:	ldr	r1, [pc, #956]	; 1aa74 <__assert_fail@plt+0x9818>
   1a6b4:	ldr	r0, [pc, #968]	; 1aa84 <__assert_fail@plt+0x9828>
   1a6b8:	bl	1125c <__assert_fail@plt>
   1a6bc:	ldr	r3, [pc, #924]	; 1aa60 <__assert_fail@plt+0x9804>
   1a6c0:	lsl	r1, r1, #2
   1a6c4:	ldr	r0, [sp, #44]	; 0x2c
   1a6c8:	ldr	r3, [r3, #8]
   1a6cc:	blx	r3
   1a6d0:	b	1a3dc <__assert_fail@plt+0x9180>
   1a6d4:	ldr	r3, [pc, #900]	; 1aa60 <__assert_fail@plt+0x9804>
   1a6d8:	lsl	r1, r1, #2
   1a6dc:	ldr	r0, [sp, #32]
   1a6e0:	ldr	r3, [r3, #8]
   1a6e4:	blx	r3
   1a6e8:	b	1a3d0 <__assert_fail@plt+0x9174>
   1a6ec:	mov	r2, #0
   1a6f0:	b	1a558 <__assert_fail@plt+0x92fc>
   1a6f4:	ldr	r2, [sp, #80]	; 0x50
   1a6f8:	ldr	fp, [sp, #76]	; 0x4c
   1a6fc:	mov	ip, r3
   1a700:	ldr	r5, [r2]
   1a704:	mvn	r3, #0
   1a708:	str	r3, [sp]
   1a70c:	mov	r1, ip
   1a710:	mvn	r0, r5
   1a714:	mov	r3, fp
   1a718:	str	ip, [sp, #60]	; 0x3c
   1a71c:	str	ip, [sp, #64]	; 0x40
   1a720:	str	sl, [sp, #68]	; 0x44
   1a724:	bl	13240 <__assert_fail@plt+0x1fe4>
   1a728:	tst	r8, #2
   1a72c:	lsrne	r8, r8, #2
   1a730:	addne	r8, r8, #1
   1a734:	str	r0, [sp, #12]
   1a738:	beq	1a9b8 <__assert_fail@plt+0x975c>
   1a73c:	ldr	r3, [sp, #12]
   1a740:	cmp	r3, #0
   1a744:	beq	1aa44 <__assert_fail@plt+0x97e8>
   1a748:	cmp	fp, #0
   1a74c:	blt	1aa0c <__assert_fail@plt+0x97b0>
   1a750:	cmp	fp, #1
   1a754:	ble	1aa04 <__assert_fail@plt+0x97a8>
   1a758:	cmp	fp, #0
   1a75c:	moveq	r5, #0
   1a760:	andne	r5, r5, #1
   1a764:	cmp	r5, #0
   1a768:	beq	1a9f0 <__assert_fail@plt+0x9794>
   1a76c:	add	r0, sp, #84	; 0x54
   1a770:	mov	fp, #0
   1a774:	mov	r1, #1
   1a778:	str	sl, [sp, #92]	; 0x5c
   1a77c:	str	fp, [sp, #84]	; 0x54
   1a780:	str	fp, [sp, #88]	; 0x58
   1a784:	bl	137f8 <__assert_fail@plt+0x259c>
   1a788:	add	r0, sp, #60	; 0x3c
   1a78c:	mov	r1, #1
   1a790:	bl	137f8 <__assert_fail@plt+0x259c>
   1a794:	mov	r1, r8
   1a798:	add	r0, sp, #48	; 0x30
   1a79c:	bl	15830 <__assert_fail@plt+0x45d4>
   1a7a0:	mov	r1, #2
   1a7a4:	add	r0, sp, #72	; 0x48
   1a7a8:	bl	19a64 <__assert_fail@plt+0x8808>
   1a7ac:	ldr	r3, [sp, #12]
   1a7b0:	sub	sl, r0, #2
   1a7b4:	cmp	r3, sl
   1a7b8:	bhi	1a908 <__assert_fail@plt+0x96ac>
   1a7bc:	rsb	r3, r8, r8, lsl #31
   1a7c0:	str	fp, [sp, #16]
   1a7c4:	mov	fp, #2
   1a7c8:	lsl	r3, r3, #1
   1a7cc:	str	r3, [sp, #20]
   1a7d0:	add	r1, sp, #84	; 0x54
   1a7d4:	mov	r0, r1
   1a7d8:	add	r2, sp, #60	; 0x3c
   1a7dc:	bl	16be4 <__assert_fail@plt+0x5988>
   1a7e0:	add	r2, sp, #72	; 0x48
   1a7e4:	add	r1, sp, #48	; 0x30
   1a7e8:	add	r0, sp, #60	; 0x3c
   1a7ec:	bl	16fb0 <__assert_fail@plt+0x5d54>
   1a7f0:	ldr	r3, [sp, #12]
   1a7f4:	cmp	r3, sl
   1a7f8:	beq	1a810 <__assert_fail@plt+0x95b4>
   1a7fc:	mov	r1, sl
   1a800:	add	r0, sp, #72	; 0x48
   1a804:	bl	17f60 <__assert_fail@plt+0x6d04>
   1a808:	cmp	r0, #0
   1a80c:	beq	1a8e0 <__assert_fail@plt+0x9684>
   1a810:	add	r1, sp, #48	; 0x30
   1a814:	mov	r0, r1
   1a818:	mov	r2, r8
   1a81c:	bl	16d60 <__assert_fail@plt+0x5b04>
   1a820:	ldr	r0, [sp, #88]	; 0x58
   1a824:	ldr	r3, [sp, #64]	; 0x40
   1a828:	ldr	r1, [sp, #60]	; 0x3c
   1a82c:	ldr	r2, [sp, #84]	; 0x54
   1a830:	str	r0, [sp, #64]	; 0x40
   1a834:	ldr	r0, [sp, #92]	; 0x5c
   1a838:	str	r3, [sp, #88]	; 0x58
   1a83c:	str	r1, [sp, #84]	; 0x54
   1a840:	ldr	r3, [sp, #68]	; 0x44
   1a844:	add	r1, sp, #84	; 0x54
   1a848:	str	r2, [sp, #60]	; 0x3c
   1a84c:	str	r0, [sp, #68]	; 0x44
   1a850:	add	r2, sp, #60	; 0x3c
   1a854:	mov	r0, r1
   1a858:	str	r3, [sp, #92]	; 0x5c
   1a85c:	bl	16214 <__assert_fail@plt+0x4fb8>
   1a860:	ldr	r3, [sp, #92]	; 0x5c
   1a864:	ldr	r1, [sp, #88]	; 0x58
   1a868:	ldr	r3, [r3]
   1a86c:	cmp	r1, #0
   1a870:	moveq	r3, #0
   1a874:	andne	r3, r3, #1
   1a878:	cmp	r3, #0
   1a87c:	beq	1a894 <__assert_fail@plt+0x9638>
   1a880:	add	r1, sp, #84	; 0x54
   1a884:	mov	r0, r1
   1a888:	add	r2, sp, #72	; 0x48
   1a88c:	bl	16214 <__assert_fail@plt+0x4fb8>
   1a890:	ldr	r1, [sp, #88]	; 0x58
   1a894:	mov	r3, #1
   1a898:	add	r2, sp, #92	; 0x5c
   1a89c:	add	r0, sp, #84	; 0x54
   1a8a0:	str	fp, [sp]
   1a8a4:	bl	16350 <__assert_fail@plt+0x50f4>
   1a8a8:	add	r1, sp, #60	; 0x3c
   1a8ac:	mov	r0, r1
   1a8b0:	ldr	r2, [sp, #20]
   1a8b4:	bl	16d60 <__assert_fail@plt+0x5b04>
   1a8b8:	add	r2, sp, #60	; 0x3c
   1a8bc:	mov	r0, r2
   1a8c0:	add	r1, sp, #84	; 0x54
   1a8c4:	bl	16214 <__assert_fail@plt+0x4fb8>
   1a8c8:	add	r2, sp, #60	; 0x3c
   1a8cc:	str	fp, [sp]
   1a8d0:	add	r3, sp, #72	; 0x48
   1a8d4:	mov	r1, r2
   1a8d8:	ldr	r0, [sp, #16]
   1a8dc:	bl	165d8 <__assert_fail@plt+0x537c>
   1a8e0:	add	r2, sp, #84	; 0x54
   1a8e4:	add	r3, sp, #72	; 0x48
   1a8e8:	str	fp, [sp]
   1a8ec:	mov	r1, r2
   1a8f0:	ldr	r0, [sp, #16]
   1a8f4:	bl	165d8 <__assert_fail@plt+0x537c>
   1a8f8:	ldr	r3, [sp, #12]
   1a8fc:	sub	sl, sl, #1
   1a900:	cmp	r3, sl
   1a904:	bls	1a7d0 <__assert_fail@plt+0x9574>
   1a908:	ldr	r1, [sp, #84]	; 0x54
   1a90c:	ldr	r8, [sp, #88]	; 0x58
   1a910:	cmp	r1, #0
   1a914:	bne	1a9c4 <__assert_fail@plt+0x9768>
   1a918:	cmp	r8, #0
   1a91c:	beq	1a984 <__assert_fail@plt+0x9728>
   1a920:	ldr	r3, [sp, #64]	; 0x40
   1a924:	cmp	r3, #0
   1a928:	beq	1a984 <__assert_fail@plt+0x9728>
   1a92c:	ldr	r3, [sp, #12]
   1a930:	subs	r8, r3, #1
   1a934:	beq	1a95c <__assert_fail@plt+0x9700>
   1a938:	add	r2, sp, #72	; 0x48
   1a93c:	add	r1, sp, #48	; 0x30
   1a940:	add	r0, sp, #60	; 0x3c
   1a944:	bl	16fb0 <__assert_fail@plt+0x5d54>
   1a948:	ldr	r3, [sp, #64]	; 0x40
   1a94c:	cmp	r3, #0
   1a950:	beq	1a984 <__assert_fail@plt+0x9728>
   1a954:	subs	r8, r8, #1
   1a958:	bne	1a938 <__assert_fail@plt+0x96dc>
   1a95c:	sub	r7, r7, #24
   1a960:	mov	r8, r6
   1a964:	mov	r5, r6
   1a968:	b	1a994 <__assert_fail@plt+0x9738>
   1a96c:	ldr	r3, [sp, #56]	; 0x38
   1a970:	ldr	fp, [r3]
   1a974:	sub	fp, fp, #1
   1a978:	cmp	fp, #3
   1a97c:	bhi	1a508 <__assert_fail@plt+0x92ac>
   1a980:	b	1a620 <__assert_fail@plt+0x93c4>
   1a984:	sub	r7, r7, #24
   1a988:	cmp	r7, #0
   1a98c:	movle	r8, #0
   1a990:	movgt	r8, #1
   1a994:	ldr	r1, [sp, #60]	; 0x3c
   1a998:	cmp	r1, #0
   1a99c:	beq	1a630 <__assert_fail@plt+0x93d4>
   1a9a0:	ldr	r3, [pc, #184]	; 1aa60 <__assert_fail@plt+0x9804>
   1a9a4:	lsl	r1, r1, #2
   1a9a8:	ldr	r0, [sp, #68]	; 0x44
   1a9ac:	ldr	r3, [r3, #8]
   1a9b0:	blx	r3
   1a9b4:	b	1a630 <__assert_fail@plt+0x93d4>
   1a9b8:	lsr	r8, r8, #2
   1a9bc:	rsb	r8, r8, #0
   1a9c0:	b	1a73c <__assert_fail@plt+0x94e0>
   1a9c4:	ldr	r3, [pc, #148]	; 1aa60 <__assert_fail@plt+0x9804>
   1a9c8:	lsl	r1, r1, #2
   1a9cc:	ldr	r0, [sp, #92]	; 0x5c
   1a9d0:	ldr	r3, [r3, #8]
   1a9d4:	blx	r3
   1a9d8:	b	1a918 <__assert_fail@plt+0x96bc>
   1a9dc:	add	r3, sl, #224	; 0xe0
   1a9e0:	mov	r2, #3504	; 0xdb0
   1a9e4:	ldr	r1, [pc, #136]	; 1aa74 <__assert_fail@plt+0x9818>
   1a9e8:	ldr	r0, [pc, #152]	; 1aa88 <__assert_fail@plt+0x982c>
   1a9ec:	bl	1125c <__assert_fail@plt>
   1a9f0:	ldr	r3, [pc, #148]	; 1aa8c <__assert_fail@plt+0x9830>
   1a9f4:	ldr	r2, [pc, #148]	; 1aa90 <__assert_fail@plt+0x9834>
   1a9f8:	ldr	r1, [pc, #116]	; 1aa74 <__assert_fail@plt+0x9818>
   1a9fc:	ldr	r0, [pc, #132]	; 1aa88 <__assert_fail@plt+0x982c>
   1aa00:	bl	1125c <__assert_fail@plt>
   1aa04:	cmp	fp, #0
   1aa08:	bne	1aa20 <__assert_fail@plt+0x97c4>
   1aa0c:	ldr	r3, [pc, #120]	; 1aa8c <__assert_fail@plt+0x9830>
   1aa10:	ldr	r2, [pc, #124]	; 1aa94 <__assert_fail@plt+0x9838>
   1aa14:	ldr	r1, [pc, #88]	; 1aa74 <__assert_fail@plt+0x9818>
   1aa18:	ldr	r0, [pc, #120]	; 1aa98 <__assert_fail@plt+0x983c>
   1aa1c:	bl	1125c <__assert_fail@plt>
   1aa20:	cmp	r5, #3
   1aa24:	movhi	r3, #0
   1aa28:	movls	r3, #1
   1aa2c:	cmp	r5, #4
   1aa30:	rsbls	r3, r3, #0
   1aa34:	rsbhi	r3, r3, #1
   1aa38:	cmp	r3, #1
   1aa3c:	beq	1a758 <__assert_fail@plt+0x94fc>
   1aa40:	b	1aa0c <__assert_fail@plt+0x97b0>
   1aa44:	ldr	r3, [pc, #64]	; 1aa8c <__assert_fail@plt+0x9830>
   1aa48:	ldr	r2, [pc, #76]	; 1aa9c <__assert_fail@plt+0x9840>
   1aa4c:	ldr	r1, [pc, #32]	; 1aa74 <__assert_fail@plt+0x9818>
   1aa50:	ldr	r0, [pc, #72]	; 1aaa0 <__assert_fail@plt+0x9844>
   1aa54:	bl	1125c <__assert_fail@plt>
   1aa58:	smullgt	sp, pc, r7, r7	; <UNPREDICTABLE>
   1aa5c:	strdeq	sp, [r2], -r8
   1aa60:	andeq	pc, r3, r8, lsr #2
   1aa64:	stmdbgt	r9!, {r2, r3, r4, r6, r7, r9, sl, ip, pc}^
   1aa68:	andeq	r0, r0, r1, asr #7
   1aa6c:	andeq	sp, r2, r8, ror #9
   1aa70:	andeq	r0, r0, r2, asr sp
   1aa74:	andeq	sp, r2, r8, ror r5
   1aa78:	andeq	sp, r2, r8, ror #18
   1aa7c:	andeq	sp, r2, ip, lsl #10
   1aa80:	andeq	r0, r0, sp, lsr #28
   1aa84:	muleq	r2, r0, r9
   1aa88:	andeq	sp, r2, r8, asr r9
   1aa8c:	strdeq	sp, [r2], -ip
   1aa90:	andeq	r0, r0, r6, ror sp
   1aa94:	andeq	r0, r0, r5, ror sp
   1aa98:	andeq	sp, r2, r8, ror r9
   1aa9c:	andeq	r0, r0, r2, ror sp
   1aaa0:	andeq	sp, r2, r0, ror r9
   1aaa4:	cmp	r1, #1
   1aaa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aaac:	mov	fp, r1
   1aab0:	sub	sp, sp, #28
   1aab4:	mov	r5, r0
   1aab8:	mov	r8, r2
   1aabc:	ble	1ac48 <__assert_fail@plt+0x99ec>
   1aac0:	cmp	r1, #36	; 0x24
   1aac4:	ble	1ab44 <__assert_fail@plt+0x98e8>
   1aac8:	cmp	r1, #62	; 0x3e
   1aacc:	bgt	1aca4 <__assert_fail@plt+0x9a48>
   1aad0:	ldr	r6, [pc, #520]	; 1ace0 <__assert_fail@plt+0x9a84>
   1aad4:	mov	r1, fp
   1aad8:	mov	r0, r8
   1aadc:	bl	19a64 <__assert_fail@plt+0x8808>
   1aae0:	cmp	r5, #0
   1aae4:	movne	r7, #0
   1aae8:	beq	1ac88 <__assert_fail@plt+0x9a2c>
   1aaec:	ldr	r2, [r8, #4]
   1aaf0:	cmp	r2, #0
   1aaf4:	bne	1ab4c <__assert_fail@plt+0x98f0>
   1aaf8:	mov	r8, #1
   1aafc:	mov	r3, #48	; 0x30
   1ab00:	strb	r3, [r5]
   1ab04:	mov	r3, #0
   1ab08:	cmp	r7, #0
   1ab0c:	strb	r3, [r5, r8]
   1ab10:	beq	1ab38 <__assert_fail@plt+0x98dc>
   1ab14:	add	r2, r8, #1
   1ab18:	cmp	r7, r2
   1ab1c:	beq	1ab38 <__assert_fail@plt+0x98dc>
   1ab20:	ldr	r3, [pc, #444]	; 1ace4 <__assert_fail@plt+0x9a88>
   1ab24:	mov	r0, r5
   1ab28:	mov	r1, r7
   1ab2c:	ldr	r3, [r3]
   1ab30:	blx	r3
   1ab34:	mov	r5, r0
   1ab38:	mov	r0, r5
   1ab3c:	add	sp, sp, #28
   1ab40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab44:	ldr	r6, [pc, #412]	; 1ace8 <__assert_fail@plt+0x9a8c>
   1ab48:	b	1aad4 <__assert_fail@plt+0x9878>
   1ab4c:	movlt	r1, #45	; 0x2d
   1ab50:	strblt	r1, [r5]
   1ab54:	movlt	r9, #1
   1ab58:	movge	r9, #0
   1ab5c:	cmp	r2, #0
   1ab60:	rsblt	r2, r2, #0
   1ab64:	mov	r0, fp
   1ab68:	str	r2, [sp, #8]
   1ab6c:	bl	130f0 <__assert_fail@plt+0x1e94>
   1ab70:	subs	r1, r0, #0
   1ab74:	bne	1ac6c <__assert_fail@plt+0x9a10>
   1ab78:	mov	r1, fp
   1ab7c:	mvn	r0, #0
   1ab80:	bl	2c1b4 <__assert_fail@plt+0x1af58>
   1ab84:	cmp	fp, r0
   1ab88:	bhi	1acac <__assert_fail@plt+0x9a50>
   1ab8c:	mov	r2, fp
   1ab90:	mov	r1, #1
   1ab94:	mul	r2, fp, r2
   1ab98:	add	r1, r1, #1
   1ab9c:	cmp	r0, r2
   1aba0:	bcs	1ab94 <__assert_fail@plt+0x9938>
   1aba4:	ldr	r3, [sp, #8]
   1aba8:	ldr	sl, [pc, #308]	; 1ace4 <__assert_fail@plt+0x9a88>
   1abac:	str	r2, [sp, #20]
   1abb0:	lsl	r3, r3, #2
   1abb4:	ldr	r2, [sl, #4]
   1abb8:	str	r3, [sp, #12]
   1abbc:	str	r1, [sp, #16]
   1abc0:	mov	r0, r3
   1abc4:	blx	r2
   1abc8:	ldr	r2, [r8, #8]
   1abcc:	mov	lr, r0
   1abd0:	ldr	r3, [sp, #12]
   1abd4:	sub	r1, lr, #4
   1abd8:	add	ip, r2, r3
   1abdc:	ldr	r0, [r2], #4
   1abe0:	cmp	r2, ip
   1abe4:	str	r0, [r1, #4]!
   1abe8:	bne	1abdc <__assert_fail@plt+0x9980>
   1abec:	ldr	r3, [sp, #8]
   1abf0:	add	r4, r5, r9
   1abf4:	mov	r1, fp
   1abf8:	str	r3, [sp]
   1abfc:	mov	r0, r4
   1ac00:	mov	r3, lr
   1ac04:	add	r2, sp, #16
   1ac08:	mov	fp, lr
   1ac0c:	bl	153b0 <__assert_fail@plt+0x4154>
   1ac10:	ldr	r3, [sl, #8]
   1ac14:	ldr	r1, [sp, #12]
   1ac18:	add	r8, r9, r0
   1ac1c:	mov	r0, fp
   1ac20:	blx	r3
   1ac24:	cmp	r8, r9
   1ac28:	addhi	r2, r5, r8
   1ac2c:	bls	1ab04 <__assert_fail@plt+0x98a8>
   1ac30:	ldrb	r3, [r4]
   1ac34:	ldrb	r3, [r6, r3]
   1ac38:	strb	r3, [r4], #1
   1ac3c:	cmp	r2, r4
   1ac40:	bne	1ac30 <__assert_fail@plt+0x99d4>
   1ac44:	b	1ab04 <__assert_fail@plt+0x98a8>
   1ac48:	cmn	r1, #1
   1ac4c:	ldrge	r6, [pc, #140]	; 1ace0 <__assert_fail@plt+0x9a84>
   1ac50:	movge	fp, #10
   1ac54:	bge	1aad4 <__assert_fail@plt+0x9878>
   1ac58:	cmn	r1, #36	; 0x24
   1ac5c:	rsb	r3, r1, #0
   1ac60:	blt	1aca4 <__assert_fail@plt+0x9a48>
   1ac64:	mov	fp, r3
   1ac68:	b	1aad0 <__assert_fail@plt+0x9874>
   1ac6c:	add	r4, r5, r9
   1ac70:	ldr	r2, [r8, #8]
   1ac74:	ldr	r3, [sp, #8]
   1ac78:	mov	r0, r4
   1ac7c:	bl	13520 <__assert_fail@plt+0x22c4>
   1ac80:	add	r8, r9, r0
   1ac84:	b	1ac24 <__assert_fail@plt+0x99c8>
   1ac88:	ldr	r2, [pc, #84]	; 1ace4 <__assert_fail@plt+0x9a88>
   1ac8c:	add	r7, r0, #2
   1ac90:	mov	r0, r7
   1ac94:	ldr	r2, [r2, #4]
   1ac98:	blx	r2
   1ac9c:	mov	r5, r0
   1aca0:	b	1aaec <__assert_fail@plt+0x9890>
   1aca4:	mov	r5, #0
   1aca8:	b	1ab38 <__assert_fail@plt+0x98dc>
   1acac:	ldr	r3, [sp, #8]
   1acb0:	ldr	sl, [pc, #44]	; 1ace4 <__assert_fail@plt+0x9a88>
   1acb4:	mov	r1, #1
   1acb8:	lsl	r3, r3, #2
   1acbc:	ldr	r2, [sl, #4]
   1acc0:	str	r3, [sp, #12]
   1acc4:	str	fp, [sp, #20]
   1acc8:	str	r1, [sp, #16]
   1accc:	mov	r0, r3
   1acd0:	blx	r2
   1acd4:	ldr	r2, [r8, #8]
   1acd8:	mov	lr, r0
   1acdc:	b	1abd0 <__assert_fail@plt+0x9974>
   1ace0:	muleq	r2, r8, r9
   1ace4:	andeq	pc, r3, r8, lsr #2
   1ace8:	ldrdeq	sp, [r2], -r8
   1acec:	sub	r3, r2, #2
   1acf0:	cmp	r2, #0
   1acf4:	cmpne	r3, #60	; 0x3c
   1acf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1acfc:	sub	sp, sp, #28
   1ad00:	bhi	1afd4 <__assert_fail@plt+0x9d78>
   1ad04:	mov	r4, r1
   1ad08:	mov	sl, r2
   1ad0c:	mov	r8, r0
   1ad10:	bl	11148 <__ctype_b_loc@plt>
   1ad14:	mov	r1, r4
   1ad18:	ldr	ip, [r0]
   1ad1c:	mov	r7, r0
   1ad20:	mov	r0, r1
   1ad24:	ldrb	r4, [r1], #1
   1ad28:	lsl	r3, r4, #1
   1ad2c:	ldrh	r3, [ip, r3]
   1ad30:	tst	r3, #8192	; 0x2000
   1ad34:	bne	1ad20 <__assert_fail@plt+0x9ac4>
   1ad38:	sub	r3, r4, #45	; 0x2d
   1ad3c:	clz	r3, r3
   1ad40:	lsr	r3, r3, #5
   1ad44:	cmp	sl, #0
   1ad48:	add	fp, r0, r3
   1ad4c:	ldrb	r3, [r0, r3]
   1ad50:	bne	1ad8c <__assert_fail@plt+0x9b30>
   1ad54:	cmp	r3, #48	; 0x30
   1ad58:	movne	sl, #10
   1ad5c:	beq	1af60 <__assert_fail@plt+0x9d04>
   1ad60:	cmp	r3, #0
   1ad64:	beq	1ae24 <__assert_fail@plt+0x9bc8>
   1ad68:	mov	r0, fp
   1ad6c:	bl	11160 <strlen@plt>
   1ad70:	ldr	r9, [pc, #644]	; 1affc <__assert_fail@plt+0x9da0>
   1ad74:	ldr	r3, [r9, #4]
   1ad78:	str	r0, [sp, #12]
   1ad7c:	blx	r3
   1ad80:	mov	r6, r0
   1ad84:	mov	r0, #10
   1ad88:	b	1adbc <__assert_fail@plt+0x9b60>
   1ad8c:	cmp	r3, #0
   1ad90:	beq	1ae24 <__assert_fail@plt+0x9bc8>
   1ad94:	mov	r0, fp
   1ad98:	bl	11160 <strlen@plt>
   1ad9c:	ldr	r9, [pc, #600]	; 1affc <__assert_fail@plt+0x9da0>
   1ada0:	ldr	r3, [r9, #4]
   1ada4:	str	r0, [sp, #12]
   1ada8:	blx	r3
   1adac:	cmp	sl, #36	; 0x24
   1adb0:	mov	r6, r0
   1adb4:	movle	r0, #10
   1adb8:	movgt	r0, #36	; 0x24
   1adbc:	ldrb	r1, [fp]
   1adc0:	cmp	r1, #0
   1adc4:	beq	1ae14 <__assert_fail@plt+0x9bb8>
   1adc8:	sub	r0, r0, #97	; 0x61
   1adcc:	mov	r5, #0
   1add0:	ldr	ip, [r7]
   1add4:	lsl	r3, r1, #1
   1add8:	ldrh	r3, [ip, r3]
   1addc:	tst	r3, #8192	; 0x2000
   1ade0:	bne	1ae4c <__assert_fail@plt+0x9bf0>
   1ade4:	sub	r3, r1, #48	; 0x30
   1ade8:	uxtb	ip, r3
   1adec:	cmp	ip, #9
   1adf0:	movls	r1, r3
   1adf4:	bls	1ae3c <__assert_fail@plt+0x9be0>
   1adf8:	sub	r3, r1, #97	; 0x61
   1adfc:	cmp	r3, #25
   1ae00:	addls	r1, r0, r1
   1ae04:	bls	1ae3c <__assert_fail@plt+0x9be0>
   1ae08:	sub	r3, r1, #65	; 0x41
   1ae0c:	cmp	r3, #25
   1ae10:	bls	1ae38 <__assert_fail@plt+0x9bdc>
   1ae14:	ldr	r3, [r9, #8]
   1ae18:	ldr	r1, [sp, #12]
   1ae1c:	mov	r0, r6
   1ae20:	blx	r3
   1ae24:	mov	r3, #0
   1ae28:	mvn	r0, #0
   1ae2c:	str	r3, [r8, #4]
   1ae30:	add	sp, sp, #28
   1ae34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae38:	sub	r1, r1, #55	; 0x37
   1ae3c:	cmp	r1, sl
   1ae40:	bcs	1ae14 <__assert_fail@plt+0x9bb8>
   1ae44:	strb	r1, [r6, r5]
   1ae48:	add	r5, r5, #1
   1ae4c:	ldrb	r1, [fp, #1]!
   1ae50:	cmp	r1, #0
   1ae54:	bne	1add0 <__assert_fail@plt+0x9b74>
   1ae58:	cmp	r5, #0
   1ae5c:	beq	1ae14 <__assert_fail@plt+0x9bb8>
   1ae60:	mov	r0, sl
   1ae64:	bl	130f0 <__assert_fail@plt+0x1e94>
   1ae68:	subs	fp, r0, #0
   1ae6c:	beq	1aed0 <__assert_fail@plt+0x9c74>
   1ae70:	mul	r7, fp, r5
   1ae74:	ldr	r3, [r8]
   1ae78:	add	r7, r7, #31
   1ae7c:	lsr	r7, r7, #5
   1ae80:	cmp	r7, r3
   1ae84:	ldrle	r0, [r8, #8]
   1ae88:	bgt	1af94 <__assert_fail@plt+0x9d38>
   1ae8c:	mov	r2, r5
   1ae90:	mov	r3, fp
   1ae94:	mov	r1, r6
   1ae98:	bl	13180 <__assert_fail@plt+0x1f24>
   1ae9c:	mov	r5, r0
   1aea0:	cmp	r5, r7
   1aea4:	bgt	1afc0 <__assert_fail@plt+0x9d64>
   1aea8:	mov	r0, r6
   1aeac:	ldr	r3, [r9, #8]
   1aeb0:	ldr	r1, [sp, #12]
   1aeb4:	blx	r3
   1aeb8:	cmp	r4, #45	; 0x2d
   1aebc:	rsbeq	r5, r5, #0
   1aec0:	mov	r0, #0
   1aec4:	str	r5, [r8, #4]
   1aec8:	add	sp, sp, #28
   1aecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aed0:	mov	r1, sl
   1aed4:	mvn	r0, #0
   1aed8:	bl	2c1b4 <__assert_fail@plt+0x1af58>
   1aedc:	mov	r3, sl
   1aee0:	mov	r1, #1
   1aee4:	cmp	sl, r0
   1aee8:	bhi	1aefc <__assert_fail@plt+0x9ca0>
   1aeec:	mul	r3, sl, r3
   1aef0:	add	r1, r1, #1
   1aef4:	cmp	r0, r3
   1aef8:	bcs	1aeec <__assert_fail@plt+0x9c90>
   1aefc:	sub	r0, r5, #1
   1af00:	add	r0, r0, r1
   1af04:	str	r3, [sp, #20]
   1af08:	str	r1, [sp, #16]
   1af0c:	bl	2c1b4 <__assert_fail@plt+0x1af58>
   1af10:	ldr	r3, [r8]
   1af14:	cmp	r0, r3
   1af18:	mov	r7, r0
   1af1c:	ldrle	fp, [r8, #8]
   1af20:	bgt	1af80 <__assert_fail@plt+0x9d24>
   1af24:	add	r1, sp, #16
   1af28:	str	r1, [sp]
   1af2c:	mov	r3, sl
   1af30:	mov	r2, r5
   1af34:	mov	r1, r6
   1af38:	mov	r0, fp
   1af3c:	bl	140d4 <__assert_fail@plt+0x2e78>
   1af40:	cmp	r0, #0
   1af44:	ble	1afe8 <__assert_fail@plt+0x9d8c>
   1af48:	sub	r3, r0, #-1073741823	; 0xc0000001
   1af4c:	ldr	r5, [fp, r3, lsl #2]
   1af50:	cmp	r5, #0
   1af54:	movne	r5, r0
   1af58:	subeq	r5, r0, #1
   1af5c:	b	1aea0 <__assert_fail@plt+0x9c44>
   1af60:	ldrb	r3, [fp, #1]
   1af64:	and	r3, r3, #223	; 0xdf
   1af68:	cmp	r3, #88	; 0x58
   1af6c:	bne	1afa4 <__assert_fail@plt+0x9d48>
   1af70:	ldrb	r3, [fp, #2]
   1af74:	mov	sl, #16
   1af78:	add	fp, fp, #2
   1af7c:	b	1ad60 <__assert_fail@plt+0x9b04>
   1af80:	mov	r1, r0
   1af84:	mov	r0, r8
   1af88:	bl	13440 <__assert_fail@plt+0x21e4>
   1af8c:	mov	fp, r0
   1af90:	b	1af24 <__assert_fail@plt+0x9cc8>
   1af94:	mov	r1, r7
   1af98:	mov	r0, r8
   1af9c:	bl	13440 <__assert_fail@plt+0x21e4>
   1afa0:	b	1ae8c <__assert_fail@plt+0x9c30>
   1afa4:	cmp	r3, #66	; 0x42
   1afa8:	moveq	sl, #2
   1afac:	ldrbeq	r3, [fp, #2]
   1afb0:	addeq	fp, fp, sl
   1afb4:	beq	1ad60 <__assert_fail@plt+0x9b04>
   1afb8:	mov	sl, #8
   1afbc:	b	1ad68 <__assert_fail@plt+0x9b0c>
   1afc0:	ldr	r3, [pc, #56]	; 1b000 <__assert_fail@plt+0x9da4>
   1afc4:	ldr	r2, [pc, #56]	; 1b004 <__assert_fail@plt+0x9da8>
   1afc8:	ldr	r1, [pc, #56]	; 1b008 <__assert_fail@plt+0x9dac>
   1afcc:	ldr	r0, [pc, #56]	; 1b00c <__assert_fail@plt+0x9db0>
   1afd0:	bl	1125c <__assert_fail@plt>
   1afd4:	ldr	r3, [pc, #36]	; 1b000 <__assert_fail@plt+0x9da4>
   1afd8:	ldr	r2, [pc, #48]	; 1b010 <__assert_fail@plt+0x9db4>
   1afdc:	ldr	r1, [pc, #36]	; 1b008 <__assert_fail@plt+0x9dac>
   1afe0:	ldr	r0, [pc, #44]	; 1b014 <__assert_fail@plt+0x9db8>
   1afe4:	bl	1125c <__assert_fail@plt>
   1afe8:	ldr	r3, [pc, #16]	; 1b000 <__assert_fail@plt+0x9da4>
   1afec:	ldr	r2, [pc, #36]	; 1b018 <__assert_fail@plt+0x9dbc>
   1aff0:	ldr	r1, [pc, #16]	; 1b008 <__assert_fail@plt+0x9dac>
   1aff4:	ldr	r0, [pc, #32]	; 1b01c <__assert_fail@plt+0x9dc0>
   1aff8:	bl	1125c <__assert_fail@plt>
   1affc:	andeq	pc, r3, r8, lsr #2
   1b000:	andeq	sp, r2, r0, lsr #10
   1b004:	andeq	r1, r0, r8, lsr r1
   1b008:	andeq	sp, r2, r8, ror r5
   1b00c:	andeq	sp, r2, r8, lsr #20
   1b010:	andeq	r1, r0, r0, ror #1
   1b014:	andeq	sp, r2, r0, lsl #20
   1b018:	andeq	r1, r0, r5, lsr r1
   1b01c:	ldrdeq	sp, [r2], -r8
   1b020:	push	{lr}		; (str lr, [sp, #-4]!)
   1b024:	mov	ip, #0
   1b028:	ldr	lr, [pc, #16]	; 1b040 <__assert_fail@plt+0x9de4>
   1b02c:	str	ip, [r0]
   1b030:	str	lr, [r0, #8]
   1b034:	str	ip, [r0, #4]
   1b038:	pop	{lr}		; (ldr lr, [sp], #4)
   1b03c:	b	1acec <__assert_fail@plt+0x9a90>
   1b040:	strdeq	sp, [r2], -r8
   1b044:	push	{r4, r5, r6, lr}
   1b048:	mov	r6, r0
   1b04c:	mov	r0, #0
   1b050:	bl	1aaa4 <__assert_fail@plt+0x9848>
   1b054:	subs	r4, r0, #0
   1b058:	moveq	r6, r4
   1b05c:	beq	1b094 <__assert_fail@plt+0x9e38>
   1b060:	bl	11160 <strlen@plt>
   1b064:	mov	r3, r6
   1b068:	mov	r1, #1
   1b06c:	mov	r5, r0
   1b070:	mov	r2, r0
   1b074:	mov	r0, r4
   1b078:	bl	11088 <fwrite@plt>
   1b07c:	ldr	r3, [pc, #24]	; 1b09c <__assert_fail@plt+0x9e40>
   1b080:	add	r1, r5, #1
   1b084:	ldr	r3, [r3, #8]
   1b088:	mov	r6, r0
   1b08c:	mov	r0, r4
   1b090:	blx	r3
   1b094:	mov	r0, r6
   1b098:	pop	{r4, r5, r6, pc}
   1b09c:	andeq	pc, r3, r8, lsr #2
   1b0a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0a4:	sub	sp, sp, #20
   1b0a8:	ldr	r7, [sp, #60]	; 0x3c
   1b0ac:	str	r0, [sp, #8]
   1b0b0:	cmp	r7, #0
   1b0b4:	ldr	fp, [sp, #56]	; 0x38
   1b0b8:	bne	1b27c <__assert_fail@plt+0xa020>
   1b0bc:	mov	r5, r3
   1b0c0:	add	r3, r2, #1
   1b0c4:	bics	r3, r3, #2
   1b0c8:	bne	1b298 <__assert_fail@plt+0xa03c>
   1b0cc:	mov	r6, r1
   1b0d0:	add	r1, fp, #1
   1b0d4:	cmp	r1, #2
   1b0d8:	bhi	1b284 <__assert_fail@plt+0xa028>
   1b0dc:	cmp	fp, #0
   1b0e0:	beq	1b220 <__assert_fail@plt+0x9fc4>
   1b0e4:	cmp	r2, fp
   1b0e8:	beq	1b274 <__assert_fail@plt+0xa018>
   1b0ec:	lsl	r9, r5, #1
   1b0f0:	cmp	r2, #1
   1b0f4:	subeq	r8, r6, #1
   1b0f8:	ldreq	r3, [sp, #64]	; 0x40
   1b0fc:	rsbeq	r9, r9, #0
   1b100:	mlaeq	r8, r5, r8, r3
   1b104:	ldrne	r8, [sp, #64]	; 0x40
   1b108:	cmp	fp, #1
   1b10c:	subeq	r3, r5, #1
   1b110:	addeq	r8, r8, r3
   1b114:	mul	r3, r6, r5
   1b118:	ldr	r2, [sp, #8]
   1b11c:	add	r3, r3, #3
   1b120:	ldr	r2, [r2]
   1b124:	lsr	r3, r3, #2
   1b128:	cmp	r3, r2
   1b12c:	str	r3, [sp, #12]
   1b130:	bgt	1b23c <__assert_fail@plt+0x9fe0>
   1b134:	ldr	r3, [sp, #8]
   1b138:	cmp	r6, #0
   1b13c:	ldr	r0, [r3, #8]
   1b140:	beq	1b250 <__assert_fail@plt+0x9ff4>
   1b144:	rsb	fp, fp, #0
   1b148:	mov	sl, #0
   1b14c:	mul	r3, fp, r5
   1b150:	mov	r2, sl
   1b154:	mov	lr, sl
   1b158:	str	r3, [sp, #4]
   1b15c:	cmp	r5, #0
   1b160:	movne	r1, r8
   1b164:	movne	r3, #0
   1b168:	beq	1b1a8 <__assert_fail@plt+0x9f4c>
   1b16c:	ldrb	r4, [r1]
   1b170:	lsl	ip, r2, #3
   1b174:	add	r2, r2, #1
   1b178:	cmp	r2, #4
   1b17c:	orr	lr, lr, r4, lsl ip
   1b180:	add	r3, r3, #1
   1b184:	streq	lr, [r0, sl, lsl #2]
   1b188:	moveq	r2, r7
   1b18c:	addeq	sl, sl, #1
   1b190:	moveq	lr, #0
   1b194:	cmp	r5, r3
   1b198:	add	r1, r1, fp
   1b19c:	bne	1b16c <__assert_fail@plt+0x9f10>
   1b1a0:	ldr	r3, [sp, #4]
   1b1a4:	add	r8, r8, r3
   1b1a8:	subs	r6, r6, #1
   1b1ac:	add	r8, r8, r9
   1b1b0:	bne	1b15c <__assert_fail@plt+0x9f00>
   1b1b4:	ldr	r3, [sp, #12]
   1b1b8:	cmp	r2, #0
   1b1bc:	moveq	r2, sl
   1b1c0:	addne	r2, sl, #1
   1b1c4:	cmp	r3, r2
   1b1c8:	bne	1b260 <__assert_fail@plt+0xa004>
   1b1cc:	cmp	lr, #0
   1b1d0:	strne	lr, [r0, sl, lsl #2]
   1b1d4:	addne	sl, sl, #1
   1b1d8:	bne	1b210 <__assert_fail@plt+0x9fb4>
   1b1dc:	cmp	sl, #0
   1b1e0:	beq	1b210 <__assert_fail@plt+0x9fb4>
   1b1e4:	sub	r3, sl, #-1073741823	; 0xc0000001
   1b1e8:	ldr	r2, [r0, r3, lsl #2]
   1b1ec:	add	r0, r0, r3, lsl #2
   1b1f0:	cmp	r2, #0
   1b1f4:	beq	1b208 <__assert_fail@plt+0x9fac>
   1b1f8:	b	1b210 <__assert_fail@plt+0x9fb4>
   1b1fc:	ldr	r3, [r0, #-4]!
   1b200:	cmp	r3, #0
   1b204:	bne	1b210 <__assert_fail@plt+0x9fb4>
   1b208:	subs	sl, sl, #1
   1b20c:	bne	1b1fc <__assert_fail@plt+0x9fa0>
   1b210:	ldr	r3, [sp, #8]
   1b214:	str	sl, [r3, #4]
   1b218:	add	sp, sp, #20
   1b21c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b220:	cmn	r2, #1
   1b224:	mvnne	fp, #0
   1b228:	bne	1b0ec <__assert_fail@plt+0x9e90>
   1b22c:	mov	fp, r2
   1b230:	mov	r9, r3
   1b234:	ldr	r8, [sp, #64]	; 0x40
   1b238:	b	1b114 <__assert_fail@plt+0x9eb8>
   1b23c:	mov	r1, r3
   1b240:	ldr	r0, [sp, #8]
   1b244:	bl	13440 <__assert_fail@plt+0x21e4>
   1b248:	cmp	r6, #0
   1b24c:	bne	1b144 <__assert_fail@plt+0x9ee8>
   1b250:	ldr	r3, [sp, #12]
   1b254:	cmp	r3, #0
   1b258:	ldreq	sl, [sp, #12]
   1b25c:	beq	1b210 <__assert_fail@plt+0x9fb4>
   1b260:	ldr	r3, [pc, #68]	; 1b2ac <__assert_fail@plt+0xa050>
   1b264:	ldr	r2, [pc, #68]	; 1b2b0 <__assert_fail@plt+0xa054>
   1b268:	ldr	r1, [pc, #68]	; 1b2b4 <__assert_fail@plt+0xa058>
   1b26c:	ldr	r0, [pc, #68]	; 1b2b8 <__assert_fail@plt+0xa05c>
   1b270:	bl	1125c <__assert_fail@plt>
   1b274:	mov	r9, r7
   1b278:	b	1b0f0 <__assert_fail@plt+0x9e94>
   1b27c:	ldr	r0, [pc, #56]	; 1b2bc <__assert_fail@plt+0xa060>
   1b280:	bl	112b4 <__assert_fail@plt+0x58>
   1b284:	ldr	r3, [pc, #32]	; 1b2ac <__assert_fail@plt+0xa050>
   1b288:	ldr	r2, [pc, #48]	; 1b2c0 <__assert_fail@plt+0xa064>
   1b28c:	ldr	r1, [pc, #32]	; 1b2b4 <__assert_fail@plt+0xa058>
   1b290:	ldr	r0, [pc, #44]	; 1b2c4 <__assert_fail@plt+0xa068>
   1b294:	bl	1125c <__assert_fail@plt>
   1b298:	ldr	r3, [pc, #12]	; 1b2ac <__assert_fail@plt+0xa050>
   1b29c:	ldr	r2, [pc, #36]	; 1b2c8 <__assert_fail@plt+0xa06c>
   1b2a0:	ldr	r1, [pc, #12]	; 1b2b4 <__assert_fail@plt+0xa058>
   1b2a4:	ldr	r0, [pc, #32]	; 1b2cc <__assert_fail@plt+0xa070>
   1b2a8:	bl	1125c <__assert_fail@plt>
   1b2ac:	andeq	sp, r2, ip, lsr #10
   1b2b0:	muleq	r0, fp, r1
   1b2b4:	andeq	sp, r2, r8, ror r5
   1b2b8:	muleq	r2, r0, sl
   1b2bc:	andeq	sp, r2, r4, lsr sl
   1b2c0:	andeq	r1, r0, r5, ror r1
   1b2c4:	andeq	sp, r2, r4, ror sl
   1b2c8:	andeq	r1, r0, r4, ror r1
   1b2cc:	andeq	sp, r2, r8, asr sl
   1b2d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2d4:	sub	sp, sp, #12
   1b2d8:	ldr	r6, [sp, #52]	; 0x34
   1b2dc:	str	r0, [sp]
   1b2e0:	cmp	r6, #0
   1b2e4:	str	r1, [sp, #4]
   1b2e8:	ldr	fp, [sp, #48]	; 0x30
   1b2ec:	ldr	r7, [sp, #56]	; 0x38
   1b2f0:	bne	1b4bc <__assert_fail@plt+0xa260>
   1b2f4:	mov	r4, r3
   1b2f8:	add	r3, r2, #1
   1b2fc:	bics	r3, r3, #2
   1b300:	mov	r9, r2
   1b304:	bne	1b4a8 <__assert_fail@plt+0xa24c>
   1b308:	add	r3, fp, #1
   1b30c:	cmp	r3, #2
   1b310:	bhi	1b4f4 <__assert_fail@plt+0xa298>
   1b314:	cmp	r4, #0
   1b318:	bne	1b340 <__assert_fail@plt+0xa0e4>
   1b31c:	ldr	r3, [r7, #4]
   1b320:	cmp	r3, #0
   1b324:	bne	1b4e0 <__assert_fail@plt+0xa284>
   1b328:	ldr	r3, [sp, #4]
   1b32c:	cmp	r3, #0
   1b330:	strne	r4, [r3]
   1b334:	ldr	r0, [sp]
   1b338:	add	sp, sp, #12
   1b33c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b340:	ldr	r5, [r7, #4]
   1b344:	cmp	r5, #0
   1b348:	beq	1b4d8 <__assert_fail@plt+0xa27c>
   1b34c:	cmp	r5, #0
   1b350:	rsblt	r5, r5, #0
   1b354:	ldr	r3, [r7, #8]
   1b358:	sub	r2, r5, #-1073741823	; 0xc0000001
   1b35c:	ldr	r3, [r3, r2, lsl #2]
   1b360:	cmp	r3, #0
   1b364:	movne	r2, r6
   1b368:	bne	1b374 <__assert_fail@plt+0xa118>
   1b36c:	b	1b4c4 <__assert_fail@plt+0xa268>
   1b370:	mov	r2, r1
   1b374:	lsrs	r3, r3, #8
   1b378:	add	r1, r2, #1
   1b37c:	bne	1b370 <__assert_fail@plt+0xa114>
   1b380:	sub	r0, r5, #1
   1b384:	mov	r1, r4
   1b388:	add	r0, r4, r0, lsl #2
   1b38c:	add	r0, r0, r2
   1b390:	bl	2c1b4 <__assert_fail@plt+0x1af58>
   1b394:	ldr	r3, [sp]
   1b398:	cmp	r3, #0
   1b39c:	mov	r8, r0
   1b3a0:	beq	1b490 <__assert_fail@plt+0xa234>
   1b3a4:	cmp	fp, #0
   1b3a8:	bne	1b470 <__assert_fail@plt+0xa214>
   1b3ac:	cmn	r9, #1
   1b3b0:	mvnne	fp, #0
   1b3b4:	beq	1b480 <__assert_fail@plt+0xa224>
   1b3b8:	lsl	sl, r4, #1
   1b3bc:	cmp	r9, #1
   1b3c0:	subeq	r3, r8, #1
   1b3c4:	ldreq	r2, [sp]
   1b3c8:	rsbeq	sl, sl, #0
   1b3cc:	mlaeq	r3, r4, r3, r2
   1b3d0:	ldrne	r3, [sp]
   1b3d4:	cmp	fp, #1
   1b3d8:	subeq	r2, r4, #1
   1b3dc:	addeq	r3, r3, r2
   1b3e0:	cmp	r8, #0
   1b3e4:	beq	1b45c <__assert_fail@plt+0xa200>
   1b3e8:	rsb	fp, fp, #0
   1b3ec:	mov	lr, #0
   1b3f0:	mla	sl, r4, fp, sl
   1b3f4:	mov	r2, lr
   1b3f8:	mov	r9, r6
   1b3fc:	mov	r0, r6
   1b400:	mov	r1, r6
   1b404:	mov	ip, r3
   1b408:	cmp	r0, #0
   1b40c:	subne	r0, r0, #1
   1b410:	bne	1b42c <__assert_fail@plt+0xa1d0>
   1b414:	cmp	r5, lr
   1b418:	movgt	r0, #3
   1b41c:	ldrgt	r2, [r7, #8]
   1b420:	movle	r0, #3
   1b424:	ldrgt	r2, [r2, lr, lsl #2]
   1b428:	addgt	lr, lr, #1
   1b42c:	add	r1, r1, #1
   1b430:	cmp	r4, r1
   1b434:	strb	r2, [ip], fp
   1b438:	lsr	r2, r2, #8
   1b43c:	bne	1b408 <__assert_fail@plt+0xa1ac>
   1b440:	add	r9, r9, #1
   1b444:	cmp	r8, r9
   1b448:	add	r3, r3, sl
   1b44c:	bne	1b400 <__assert_fail@plt+0xa1a4>
   1b450:	cmp	lr, r5
   1b454:	moveq	r4, r8
   1b458:	beq	1b328 <__assert_fail@plt+0xa0cc>
   1b45c:	ldr	r3, [pc, #164]	; 1b508 <__assert_fail@plt+0xa2ac>
   1b460:	ldr	r2, [pc, #164]	; 1b50c <__assert_fail@plt+0xa2b0>
   1b464:	ldr	r1, [pc, #164]	; 1b510 <__assert_fail@plt+0xa2b4>
   1b468:	ldr	r0, [pc, #164]	; 1b514 <__assert_fail@plt+0xa2b8>
   1b46c:	bl	1125c <__assert_fail@plt>
   1b470:	cmp	r9, fp
   1b474:	bne	1b3b8 <__assert_fail@plt+0xa15c>
   1b478:	mov	sl, #0
   1b47c:	b	1b3bc <__assert_fail@plt+0xa160>
   1b480:	mov	fp, r9
   1b484:	ldr	r3, [sp]
   1b488:	mov	sl, #0
   1b48c:	b	1b3e0 <__assert_fail@plt+0xa184>
   1b490:	ldr	r3, [pc, #128]	; 1b518 <__assert_fail@plt+0xa2bc>
   1b494:	mul	r0, r0, r4
   1b498:	ldr	r3, [r3, #4]
   1b49c:	blx	r3
   1b4a0:	str	r0, [sp]
   1b4a4:	b	1b3a4 <__assert_fail@plt+0xa148>
   1b4a8:	ldr	r3, [pc, #88]	; 1b508 <__assert_fail@plt+0xa2ac>
   1b4ac:	ldr	r2, [pc, #104]	; 1b51c <__assert_fail@plt+0xa2c0>
   1b4b0:	ldr	r1, [pc, #88]	; 1b510 <__assert_fail@plt+0xa2b4>
   1b4b4:	ldr	r0, [pc, #100]	; 1b520 <__assert_fail@plt+0xa2c4>
   1b4b8:	bl	1125c <__assert_fail@plt>
   1b4bc:	ldr	r0, [pc, #96]	; 1b524 <__assert_fail@plt+0xa2c8>
   1b4c0:	bl	112b4 <__assert_fail@plt+0x58>
   1b4c4:	ldr	r3, [pc, #60]	; 1b508 <__assert_fail@plt+0xa2ac>
   1b4c8:	ldr	r2, [pc, #88]	; 1b528 <__assert_fail@plt+0xa2cc>
   1b4cc:	ldr	r1, [pc, #60]	; 1b510 <__assert_fail@plt+0xa2b4>
   1b4d0:	ldr	r0, [pc, #84]	; 1b52c <__assert_fail@plt+0xa2d0>
   1b4d4:	bl	1125c <__assert_fail@plt>
   1b4d8:	mov	r4, r5
   1b4dc:	b	1b328 <__assert_fail@plt+0xa0cc>
   1b4e0:	ldr	r3, [pc, #32]	; 1b508 <__assert_fail@plt+0xa2ac>
   1b4e4:	ldr	r2, [pc, #68]	; 1b530 <__assert_fail@plt+0xa2d4>
   1b4e8:	ldr	r1, [pc, #32]	; 1b510 <__assert_fail@plt+0xa2b4>
   1b4ec:	ldr	r0, [pc, #64]	; 1b534 <__assert_fail@plt+0xa2d8>
   1b4f0:	bl	1125c <__assert_fail@plt>
   1b4f4:	ldr	r3, [pc, #12]	; 1b508 <__assert_fail@plt+0xa2ac>
   1b4f8:	ldr	r2, [pc, #56]	; 1b538 <__assert_fail@plt+0xa2dc>
   1b4fc:	ldr	r1, [pc, #12]	; 1b510 <__assert_fail@plt+0xa2b4>
   1b500:	ldr	r0, [pc, #52]	; 1b53c <__assert_fail@plt+0xa2e0>
   1b504:	bl	1125c <__assert_fail@plt>
   1b508:	andeq	sp, r2, r8, lsr r5
   1b50c:	andeq	r1, r0, r3, lsl #4
   1b510:	andeq	sp, r2, r8, ror r5
   1b514:	strdeq	sp, [r2], -r8
   1b518:	andeq	pc, r3, r8, lsr #2
   1b51c:	andeq	r1, r0, lr, lsr #3
   1b520:	andeq	sp, r2, r8, asr sl
   1b524:	andeq	sp, r2, r8, lsr #21
   1b528:	andeq	r1, r0, r4, asr #3
   1b52c:	andeq	sp, r2, ip, ror #21
   1b530:			; <UNDEFINED> instruction: 0x000011b0
   1b534:	andeq	sp, r2, ip, asr #21
   1b538:	andeq	r1, r0, pc, lsr #3
   1b53c:	andeq	sp, r2, r4, ror sl
   1b540:	push	{r4, r5, r6, r7, r8, lr}
   1b544:	cmp	r0, #2
   1b548:	ldr	r4, [pc, #148]	; 1b5e4 <__assert_fail@plt+0xa388>
   1b54c:	mov	r5, #0
   1b550:	sub	sp, sp, #16
   1b554:	ldr	r6, [r4]
   1b558:	str	r5, [r4]
   1b55c:	beq	1b578 <__assert_fail@plt+0xa31c>
   1b560:	ldr	r3, [pc, #128]	; 1b5e8 <__assert_fail@plt+0xa38c>
   1b564:	mov	r2, #0
   1b568:	str	r6, [r4]
   1b56c:	str	r2, [r3]
   1b570:	add	sp, sp, #16
   1b574:	pop	{r4, r5, r6, r7, r8, pc}
   1b578:	mov	r8, r3
   1b57c:	mov	r7, r2
   1b580:	str	r5, [sp]
   1b584:	ldr	r3, [pc, #96]	; 1b5ec <__assert_fail@plt+0xa390>
   1b588:	ldr	r2, [pc, #96]	; 1b5f0 <__assert_fail@plt+0xa394>
   1b58c:	bl	1113c <getopt_long@plt>
   1b590:	cmn	r0, #1
   1b594:	beq	1b560 <__assert_fail@plt+0xa304>
   1b598:	cmp	r0, #104	; 0x68
   1b59c:	beq	1b5d4 <__assert_fail@plt+0xa378>
   1b5a0:	cmp	r0, #118	; 0x76
   1b5a4:	bne	1b560 <__assert_fail@plt+0xa304>
   1b5a8:	ldr	r3, [pc, #68]	; 1b5f4 <__assert_fail@plt+0xa398>
   1b5ac:	add	ip, sp, #48	; 0x30
   1b5b0:	mov	r2, r8
   1b5b4:	ldr	r0, [r3]
   1b5b8:	mov	r1, r7
   1b5bc:	str	ip, [sp]
   1b5c0:	ldr	r3, [sp, #40]	; 0x28
   1b5c4:	str	ip, [sp, #12]
   1b5c8:	bl	2b5bc <__assert_fail@plt+0x1a360>
   1b5cc:	mov	r0, r5
   1b5d0:	bl	11154 <exit@plt>
   1b5d4:	mov	r0, r5
   1b5d8:	ldr	r3, [sp, #44]	; 0x2c
   1b5dc:	blx	r3
   1b5e0:	b	1b560 <__assert_fail@plt+0xa304>
   1b5e4:	muleq	r3, r0, r1
   1b5e8:	andeq	pc, r3, r0, lsl #3
   1b5ec:	andeq	sp, r2, r0, lsl #22
   1b5f0:	andeq	ip, r2, r4, lsl #15
   1b5f4:	andeq	pc, r3, ip, lsl #3
   1b5f8:	push	{r4, r5, r6, r7, r8, lr}
   1b5fc:	sub	sp, sp, #16
   1b600:	ldr	r5, [pc, #176]	; 1b6b8 <__assert_fail@plt+0xa45c>
   1b604:	ldrb	r8, [sp, #44]	; 0x2c
   1b608:	ldr	r4, [pc, #172]	; 1b6bc <__assert_fail@plt+0xa460>
   1b60c:	ldr	lr, [pc, #172]	; 1b6c0 <__assert_fail@plt+0xa464>
   1b610:	cmp	r8, #0
   1b614:	mov	r6, r2
   1b618:	movne	r2, r5
   1b61c:	mov	r5, #0
   1b620:	mov	ip, #1
   1b624:	moveq	r2, lr
   1b628:	mov	r7, r3
   1b62c:	str	r5, [sp]
   1b630:	ldr	r3, [pc, #140]	; 1b6c4 <__assert_fail@plt+0xa468>
   1b634:	ldr	r8, [r4]
   1b638:	str	ip, [r4]
   1b63c:	bl	1113c <getopt_long@plt>
   1b640:	cmn	r0, #1
   1b644:	beq	1b694 <__assert_fail@plt+0xa438>
   1b648:	cmp	r0, #104	; 0x68
   1b64c:	beq	1b6a0 <__assert_fail@plt+0xa444>
   1b650:	cmp	r0, #118	; 0x76
   1b654:	bne	1b684 <__assert_fail@plt+0xa428>
   1b658:	ldr	r3, [pc, #104]	; 1b6c8 <__assert_fail@plt+0xa46c>
   1b65c:	add	ip, sp, #52	; 0x34
   1b660:	mov	r2, r7
   1b664:	ldr	r0, [r3]
   1b668:	mov	r1, r6
   1b66c:	str	ip, [sp]
   1b670:	ldr	r3, [sp, #40]	; 0x28
   1b674:	str	ip, [sp, #12]
   1b678:	bl	2b5bc <__assert_fail@plt+0x1a360>
   1b67c:	mov	r0, r5
   1b680:	bl	11154 <exit@plt>
   1b684:	ldr	r3, [pc, #64]	; 1b6cc <__assert_fail@plt+0xa470>
   1b688:	ldr	r0, [r3]
   1b68c:	ldr	r3, [sp, #48]	; 0x30
   1b690:	blx	r3
   1b694:	str	r8, [r4]
   1b698:	add	sp, sp, #16
   1b69c:	pop	{r4, r5, r6, r7, r8, pc}
   1b6a0:	mov	r0, r5
   1b6a4:	ldr	r3, [sp, #48]	; 0x30
   1b6a8:	blx	r3
   1b6ac:	str	r8, [r4]
   1b6b0:	add	sp, sp, #16
   1b6b4:	pop	{r4, r5, r6, r7, r8, pc}
   1b6b8:	andeq	ip, r2, ip, ror #23
   1b6bc:	muleq	r3, r0, r1
   1b6c0:	andeq	ip, r2, r4, lsl #15
   1b6c4:	andeq	sp, r2, r0, lsl #22
   1b6c8:	andeq	pc, r3, ip, lsl #3
   1b6cc:	andeq	pc, r3, r4, lsr #2
   1b6d0:	push	{r4, lr}
   1b6d4:	mov	r4, r0
   1b6d8:	bl	10fc8 <wcwidth@plt>
   1b6dc:	cmp	r0, #0
   1b6e0:	popge	{r4, pc}
   1b6e4:	mov	r0, r4
   1b6e8:	bl	11070 <iswcntrl@plt>
   1b6ec:	clz	r0, r0
   1b6f0:	lsr	r0, r0, #5
   1b6f4:	pop	{r4, pc}
   1b6f8:	mov	r3, r1
   1b6fc:	push	{r4, r5, r6, lr}
   1b700:	mov	r4, r1
   1b704:	ldr	r1, [r3], #16
   1b708:	mov	r5, r0
   1b70c:	cmp	r1, r3
   1b710:	strne	r1, [r0]
   1b714:	beq	1b738 <__assert_fail@plt+0xa4dc>
   1b718:	ldrb	r3, [r4, #8]
   1b71c:	ldr	r2, [r4, #4]
   1b720:	cmp	r3, #0
   1b724:	strb	r3, [r5, #8]
   1b728:	ldrne	r3, [r4, #12]
   1b72c:	str	r2, [r5, #4]
   1b730:	strne	r3, [r5, #12]
   1b734:	pop	{r4, r5, r6, pc}
   1b738:	add	r3, r0, #16
   1b73c:	mov	r0, r3
   1b740:	ldr	r2, [r4, #4]
   1b744:	bl	11004 <memcpy@plt>
   1b748:	str	r0, [r5]
   1b74c:	b	1b718 <__assert_fail@plt+0xa4bc>
   1b750:	ldr	r3, [pc, #20]	; 1b76c <__assert_fail@plt+0xa510>
   1b754:	lsr	r2, r0, #5
   1b758:	and	r0, r0, #31
   1b75c:	ldr	r3, [r3, r2, lsl #2]
   1b760:	lsr	r0, r3, r0
   1b764:	and	r0, r0, #1
   1b768:	bx	lr
   1b76c:	andeq	sp, r2, r0, asr #22
   1b770:	push	{r4, r5, r6, r7, lr}
   1b774:	subs	r6, r0, #0
   1b778:	sub	sp, sp, #12
   1b77c:	addeq	r6, sp, #4
   1b780:	mov	r0, r6
   1b784:	mov	r5, r2
   1b788:	mov	r7, r1
   1b78c:	bl	110b8 <mbrtowc@plt>
   1b790:	cmp	r5, #0
   1b794:	cmnne	r0, #3
   1b798:	mov	r4, r0
   1b79c:	bls	1b7b8 <__assert_fail@plt+0xa55c>
   1b7a0:	mov	r0, #0
   1b7a4:	bl	2c040 <__assert_fail@plt+0x1ade4>
   1b7a8:	cmp	r0, #0
   1b7ac:	moveq	r4, #1
   1b7b0:	ldrbeq	r3, [r7]
   1b7b4:	streq	r3, [r6]
   1b7b8:	mov	r0, r4
   1b7bc:	add	sp, sp, #12
   1b7c0:	pop	{r4, r5, r6, r7, pc}
   1b7c4:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b7c8:	sub	sp, sp, #60	; 0x3c
   1b7cc:	mov	r9, r0
   1b7d0:	mov	r4, r1
   1b7d4:	bl	110a0 <__ctype_get_mb_cur_max@plt>
   1b7d8:	cmp	r0, #1
   1b7dc:	bls	1b7ec <__assert_fail@plt+0xa590>
   1b7e0:	uxtb	r7, r4
   1b7e4:	cmp	r7, #47	; 0x2f
   1b7e8:	bhi	1b800 <__assert_fail@plt+0xa5a4>
   1b7ec:	mov	r1, r4
   1b7f0:	mov	r0, r9
   1b7f4:	add	sp, sp, #60	; 0x3c
   1b7f8:	pop	{r4, r5, r6, r7, r8, r9, lr}
   1b7fc:	b	1116c <strchr@plt>
   1b800:	mov	r3, #0
   1b804:	ldr	r8, [pc, #412]	; 1b9a8 <__assert_fail@plt+0xa74c>
   1b808:	mov	r6, r3
   1b80c:	mov	r5, #1
   1b810:	str	r9, [sp, #16]
   1b814:	strb	r3, [sp]
   1b818:	str	r3, [sp, #4]
   1b81c:	strb	r3, [sp, #12]
   1b820:	str	r3, [sp, #8]
   1b824:	ldrb	r3, [sp]
   1b828:	ldr	r4, [sp, #16]
   1b82c:	cmp	r3, #0
   1b830:	bne	1b88c <__assert_fail@plt+0xa630>
   1b834:	ldrb	r3, [r4]
   1b838:	and	r2, r3, #31
   1b83c:	lsr	r3, r3, #5
   1b840:	ldr	r3, [r8, r3, lsl #2]
   1b844:	lsr	r3, r3, r2
   1b848:	tst	r3, #1
   1b84c:	beq	1b878 <__assert_fail@plt+0xa61c>
   1b850:	str	r5, [sp, #20]
   1b854:	ldrb	r4, [r4]
   1b858:	strb	r5, [sp, #24]
   1b85c:	strb	r5, [sp, #12]
   1b860:	cmp	r4, #0
   1b864:	str	r4, [sp, #28]
   1b868:	bne	1b8f0 <__assert_fail@plt+0xa694>
   1b86c:	mov	r0, r4
   1b870:	add	sp, sp, #60	; 0x3c
   1b874:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b878:	add	r0, sp, #4
   1b87c:	bl	11028 <mbsinit@plt>
   1b880:	cmp	r0, #0
   1b884:	beq	1b980 <__assert_fail@plt+0xa724>
   1b888:	strb	r5, [sp]
   1b88c:	bl	110a0 <__ctype_get_mb_cur_max@plt>
   1b890:	mov	r1, r0
   1b894:	mov	r0, r4
   1b898:	bl	2af6c <__assert_fail@plt+0x19d10>
   1b89c:	add	r3, sp, #4
   1b8a0:	mov	r1, r4
   1b8a4:	mov	r2, r0
   1b8a8:	add	r0, sp, #28
   1b8ac:	bl	1b770 <__assert_fail@plt+0xa514>
   1b8b0:	cmn	r0, #1
   1b8b4:	str	r0, [sp, #20]
   1b8b8:	beq	1b920 <__assert_fail@plt+0xa6c4>
   1b8bc:	cmn	r0, #2
   1b8c0:	beq	1b968 <__assert_fail@plt+0xa70c>
   1b8c4:	cmp	r0, #0
   1b8c8:	beq	1b934 <__assert_fail@plt+0xa6d8>
   1b8cc:	ldr	r4, [sp, #28]
   1b8d0:	add	r0, sp, #4
   1b8d4:	strb	r5, [sp, #24]
   1b8d8:	bl	11028 <mbsinit@plt>
   1b8dc:	strb	r5, [sp, #12]
   1b8e0:	cmp	r0, #0
   1b8e4:	strbne	r6, [sp]
   1b8e8:	cmp	r4, #0
   1b8ec:	beq	1b86c <__assert_fail@plt+0xa610>
   1b8f0:	ldr	r4, [sp, #16]
   1b8f4:	ldr	r0, [sp, #20]
   1b8f8:	cmp	r0, #1
   1b8fc:	beq	1b910 <__assert_fail@plt+0xa6b4>
   1b900:	add	r0, r4, r0
   1b904:	str	r0, [sp, #16]
   1b908:	strb	r6, [sp, #12]
   1b90c:	b	1b824 <__assert_fail@plt+0xa5c8>
   1b910:	ldrb	r3, [r4]
   1b914:	cmp	r3, r7
   1b918:	bne	1b900 <__assert_fail@plt+0xa6a4>
   1b91c:	b	1b86c <__assert_fail@plt+0xa610>
   1b920:	ldr	r4, [sp, #16]
   1b924:	str	r5, [sp, #20]
   1b928:	strb	r6, [sp, #24]
   1b92c:	strb	r5, [sp, #12]
   1b930:	b	1b8f4 <__assert_fail@plt+0xa698>
   1b934:	ldr	r4, [sp, #16]
   1b938:	str	r5, [sp, #20]
   1b93c:	ldrb	r3, [r4]
   1b940:	cmp	r3, #0
   1b944:	bne	1b994 <__assert_fail@plt+0xa738>
   1b948:	ldr	r4, [sp, #28]
   1b94c:	cmp	r4, #0
   1b950:	beq	1b8d0 <__assert_fail@plt+0xa674>
   1b954:	ldr	r3, [pc, #80]	; 1b9ac <__assert_fail@plt+0xa750>
   1b958:	mov	r2, #172	; 0xac
   1b95c:	ldr	r1, [pc, #76]	; 1b9b0 <__assert_fail@plt+0xa754>
   1b960:	ldr	r0, [pc, #76]	; 1b9b4 <__assert_fail@plt+0xa758>
   1b964:	bl	1125c <__assert_fail@plt>
   1b968:	ldr	r4, [sp, #16]
   1b96c:	mov	r0, r4
   1b970:	bl	11160 <strlen@plt>
   1b974:	strb	r6, [sp, #24]
   1b978:	str	r0, [sp, #20]
   1b97c:	b	1b92c <__assert_fail@plt+0xa6d0>
   1b980:	ldr	r3, [pc, #36]	; 1b9ac <__assert_fail@plt+0xa750>
   1b984:	mov	r2, #143	; 0x8f
   1b988:	ldr	r1, [pc, #32]	; 1b9b0 <__assert_fail@plt+0xa754>
   1b98c:	ldr	r0, [pc, #36]	; 1b9b8 <__assert_fail@plt+0xa75c>
   1b990:	bl	1125c <__assert_fail@plt>
   1b994:	ldr	r3, [pc, #16]	; 1b9ac <__assert_fail@plt+0xa750>
   1b998:	mov	r2, #171	; 0xab
   1b99c:	ldr	r1, [pc, #12]	; 1b9b0 <__assert_fail@plt+0xa754>
   1b9a0:	ldr	r0, [pc, #20]	; 1b9bc <__assert_fail@plt+0xa760>
   1b9a4:	bl	1125c <__assert_fail@plt>
   1b9a8:	andeq	sp, r2, r0, asr #22
   1b9ac:	andeq	sp, r2, r0, ror #22
   1b9b0:	andeq	sp, r2, r4, ror fp
   1b9b4:	andeq	ip, r2, ip, asr #14
   1b9b8:	andeq	ip, r2, ip, lsl r7
   1b9bc:	andeq	ip, r2, r4, lsr r7
   1b9c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b9c4:	sub	sp, sp, #60	; 0x3c
   1b9c8:	mov	r9, r0
   1b9cc:	bl	110a0 <__ctype_get_mb_cur_max@plt>
   1b9d0:	cmp	r0, #1
   1b9d4:	bls	1bb3c <__assert_fail@plt+0xa8e0>
   1b9d8:	mov	r3, #0
   1b9dc:	ldr	r8, [pc, #408]	; 1bb7c <__assert_fail@plt+0xa920>
   1b9e0:	mov	r5, r3
   1b9e4:	mov	r4, r9
   1b9e8:	mov	r6, r3
   1b9ec:	mov	r7, #1
   1b9f0:	str	r9, [sp, #16]
   1b9f4:	strb	r3, [sp]
   1b9f8:	str	r3, [sp, #4]
   1b9fc:	strb	r3, [sp, #12]
   1ba00:	str	r3, [sp, #8]
   1ba04:	ldrb	r3, [sp]
   1ba08:	cmp	r3, #0
   1ba0c:	bne	1ba64 <__assert_fail@plt+0xa808>
   1ba10:	ldrb	r3, [r4]
   1ba14:	and	r2, r3, #31
   1ba18:	lsr	r3, r3, #5
   1ba1c:	ldr	r3, [r8, r3, lsl #2]
   1ba20:	lsr	r3, r3, r2
   1ba24:	tst	r3, #1
   1ba28:	beq	1ba50 <__assert_fail@plt+0xa7f4>
   1ba2c:	str	r7, [sp, #20]
   1ba30:	ldrb	r4, [r4]
   1ba34:	strb	r7, [sp, #24]
   1ba38:	cmp	r4, #0
   1ba3c:	str	r4, [sp, #28]
   1ba40:	bne	1bac4 <__assert_fail@plt+0xa868>
   1ba44:	mov	r0, r5
   1ba48:	add	sp, sp, #60	; 0x3c
   1ba4c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ba50:	add	r0, sp, #4
   1ba54:	bl	11028 <mbsinit@plt>
   1ba58:	cmp	r0, #0
   1ba5c:	beq	1bb54 <__assert_fail@plt+0xa8f8>
   1ba60:	strb	r7, [sp]
   1ba64:	bl	110a0 <__ctype_get_mb_cur_max@plt>
   1ba68:	mov	r1, r0
   1ba6c:	mov	r0, r4
   1ba70:	bl	2af6c <__assert_fail@plt+0x19d10>
   1ba74:	add	r3, sp, #4
   1ba78:	mov	r1, r4
   1ba7c:	mov	r2, r0
   1ba80:	add	r0, sp, #28
   1ba84:	bl	1b770 <__assert_fail@plt+0xa514>
   1ba88:	cmn	r0, #1
   1ba8c:	str	r0, [sp, #20]
   1ba90:	beq	1bae0 <__assert_fail@plt+0xa884>
   1ba94:	cmn	r0, #2
   1ba98:	beq	1bb24 <__assert_fail@plt+0xa8c8>
   1ba9c:	cmp	r0, #0
   1baa0:	beq	1baf0 <__assert_fail@plt+0xa894>
   1baa4:	ldr	r4, [sp, #28]
   1baa8:	add	r0, sp, #4
   1baac:	strb	r7, [sp, #24]
   1bab0:	bl	11028 <mbsinit@plt>
   1bab4:	cmp	r0, #0
   1bab8:	strbne	r6, [sp]
   1babc:	cmp	r4, #0
   1bac0:	beq	1ba44 <__assert_fail@plt+0xa7e8>
   1bac4:	ldr	r4, [sp, #16]
   1bac8:	ldr	r3, [sp, #20]
   1bacc:	add	r5, r5, #1
   1bad0:	add	r4, r4, r3
   1bad4:	strb	r6, [sp, #12]
   1bad8:	str	r4, [sp, #16]
   1badc:	b	1ba04 <__assert_fail@plt+0xa7a8>
   1bae0:	str	r7, [sp, #20]
   1bae4:	strb	r6, [sp, #24]
   1bae8:	ldr	r4, [sp, #16]
   1baec:	b	1bac8 <__assert_fail@plt+0xa86c>
   1baf0:	ldr	r4, [sp, #16]
   1baf4:	str	r7, [sp, #20]
   1baf8:	ldrb	r3, [r4]
   1bafc:	cmp	r3, #0
   1bb00:	bne	1bb68 <__assert_fail@plt+0xa90c>
   1bb04:	ldr	r4, [sp, #28]
   1bb08:	cmp	r4, #0
   1bb0c:	beq	1baa8 <__assert_fail@plt+0xa84c>
   1bb10:	ldr	r3, [pc, #104]	; 1bb80 <__assert_fail@plt+0xa924>
   1bb14:	mov	r2, #172	; 0xac
   1bb18:	ldr	r1, [pc, #100]	; 1bb84 <__assert_fail@plt+0xa928>
   1bb1c:	ldr	r0, [pc, #100]	; 1bb88 <__assert_fail@plt+0xa92c>
   1bb20:	bl	1125c <__assert_fail@plt>
   1bb24:	ldr	r4, [sp, #16]
   1bb28:	mov	r0, r4
   1bb2c:	bl	11160 <strlen@plt>
   1bb30:	strb	r6, [sp, #24]
   1bb34:	str	r0, [sp, #20]
   1bb38:	b	1bac8 <__assert_fail@plt+0xa86c>
   1bb3c:	mov	r0, r9
   1bb40:	bl	11160 <strlen@plt>
   1bb44:	mov	r5, r0
   1bb48:	mov	r0, r5
   1bb4c:	add	sp, sp, #60	; 0x3c
   1bb50:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1bb54:	ldr	r3, [pc, #36]	; 1bb80 <__assert_fail@plt+0xa924>
   1bb58:	mov	r2, #143	; 0x8f
   1bb5c:	ldr	r1, [pc, #32]	; 1bb84 <__assert_fail@plt+0xa928>
   1bb60:	ldr	r0, [pc, #36]	; 1bb8c <__assert_fail@plt+0xa930>
   1bb64:	bl	1125c <__assert_fail@plt>
   1bb68:	ldr	r3, [pc, #16]	; 1bb80 <__assert_fail@plt+0xa924>
   1bb6c:	mov	r2, #171	; 0xab
   1bb70:	ldr	r1, [pc, #12]	; 1bb84 <__assert_fail@plt+0xa928>
   1bb74:	ldr	r0, [pc, #20]	; 1bb90 <__assert_fail@plt+0xa934>
   1bb78:	bl	1125c <__assert_fail@plt>
   1bb7c:	andeq	sp, r2, r0, asr #22
   1bb80:	andeq	sp, r2, r4, lsl #23
   1bb84:	andeq	sp, r2, r4, ror fp
   1bb88:	andeq	ip, r2, ip, asr #14
   1bb8c:	andeq	ip, r2, ip, lsl r7
   1bb90:	andeq	ip, r2, r4, lsr r7
   1bb94:	push	{r4, r5, r6, lr}
   1bb98:	subs	r4, r0, #0
   1bb9c:	beq	1bc10 <__assert_fail@plt+0xa9b4>
   1bba0:	mov	r1, #47	; 0x2f
   1bba4:	bl	11214 <strrchr@plt>
   1bba8:	subs	r5, r0, #0
   1bbac:	beq	1bbfc <__assert_fail@plt+0xa9a0>
   1bbb0:	add	r6, r5, #1
   1bbb4:	sub	r3, r6, r4
   1bbb8:	cmp	r3, #6
   1bbbc:	ble	1bbfc <__assert_fail@plt+0xa9a0>
   1bbc0:	mov	r2, #7
   1bbc4:	ldr	r1, [pc, #96]	; 1bc2c <__assert_fail@plt+0xa9d0>
   1bbc8:	sub	r0, r5, #6
   1bbcc:	bl	11244 <strncmp@plt>
   1bbd0:	cmp	r0, #0
   1bbd4:	bne	1bbfc <__assert_fail@plt+0xa9a0>
   1bbd8:	mov	r2, #3
   1bbdc:	ldr	r1, [pc, #76]	; 1bc30 <__assert_fail@plt+0xa9d4>
   1bbe0:	mov	r0, r6
   1bbe4:	bl	11244 <strncmp@plt>
   1bbe8:	cmp	r0, #0
   1bbec:	movne	r4, r6
   1bbf0:	ldreq	r3, [pc, #60]	; 1bc34 <__assert_fail@plt+0xa9d8>
   1bbf4:	addeq	r4, r5, #4
   1bbf8:	streq	r4, [r3]
   1bbfc:	ldr	r2, [pc, #52]	; 1bc38 <__assert_fail@plt+0xa9dc>
   1bc00:	ldr	r3, [pc, #52]	; 1bc3c <__assert_fail@plt+0xa9e0>
   1bc04:	str	r4, [r2]
   1bc08:	str	r4, [r3]
   1bc0c:	pop	{r4, r5, r6, pc}
   1bc10:	ldr	r3, [pc, #40]	; 1bc40 <__assert_fail@plt+0xa9e4>
   1bc14:	mov	r2, #55	; 0x37
   1bc18:	mov	r1, #1
   1bc1c:	ldr	r3, [r3]
   1bc20:	ldr	r0, [pc, #28]	; 1bc44 <__assert_fail@plt+0xa9e8>
   1bc24:	bl	11088 <fwrite@plt>
   1bc28:	bl	11250 <abort@plt>
   1bc2c:	ldrdeq	sp, [r2], -r0
   1bc30:	ldrdeq	sp, [r2], -r8
   1bc34:	andeq	pc, r3, r8, ror r1	; <UNPREDICTABLE>
   1bc38:	andeq	pc, r3, r4, lsr #3
   1bc3c:	andeq	pc, r3, ip, ror r1	; <UNPREDICTABLE>
   1bc40:	andeq	pc, r3, r8, lsl #3
   1bc44:	muleq	r2, r8, fp
   1bc48:	push	{r4, r5, r6, lr}
   1bc4c:	mov	r2, #48	; 0x30
   1bc50:	mov	r4, r1
   1bc54:	mov	r1, #0
   1bc58:	mov	r5, r0
   1bc5c:	bl	1119c <memset@plt>
   1bc60:	cmp	r4, #10
   1bc64:	beq	1bc74 <__assert_fail@plt+0xaa18>
   1bc68:	str	r4, [r5]
   1bc6c:	mov	r0, r5
   1bc70:	pop	{r4, r5, r6, pc}
   1bc74:	bl	11250 <abort@plt>
   1bc78:	push	{r4, r5, r6, lr}
   1bc7c:	mov	r4, r0
   1bc80:	mov	r5, r1
   1bc84:	bl	2c09c <__assert_fail@plt+0x1ae40>
   1bc88:	ldrb	r3, [r0]
   1bc8c:	bic	r3, r3, #32
   1bc90:	cmp	r3, #85	; 0x55
   1bc94:	bne	1bcf4 <__assert_fail@plt+0xaa98>
   1bc98:	ldrb	r3, [r0, #1]
   1bc9c:	bic	r3, r3, #32
   1bca0:	cmp	r3, #84	; 0x54
   1bca4:	bne	1bd30 <__assert_fail@plt+0xaad4>
   1bca8:	ldrb	r3, [r0, #2]
   1bcac:	bic	r3, r3, #32
   1bcb0:	cmp	r3, #70	; 0x46
   1bcb4:	bne	1bd30 <__assert_fail@plt+0xaad4>
   1bcb8:	ldrb	r3, [r0, #3]
   1bcbc:	cmp	r3, #45	; 0x2d
   1bcc0:	bne	1bd30 <__assert_fail@plt+0xaad4>
   1bcc4:	ldrb	r3, [r0, #4]
   1bcc8:	cmp	r3, #56	; 0x38
   1bccc:	bne	1bd30 <__assert_fail@plt+0xaad4>
   1bcd0:	ldrb	r3, [r0, #5]
   1bcd4:	cmp	r3, #0
   1bcd8:	bne	1bd30 <__assert_fail@plt+0xaad4>
   1bcdc:	ldrb	r2, [r4]
   1bce0:	ldr	r3, [pc, #152]	; 1bd80 <__assert_fail@plt+0xab24>
   1bce4:	ldr	r0, [pc, #152]	; 1bd84 <__assert_fail@plt+0xab28>
   1bce8:	cmp	r2, #96	; 0x60
   1bcec:	movne	r0, r3
   1bcf0:	pop	{r4, r5, r6, pc}
   1bcf4:	cmp	r3, #71	; 0x47
   1bcf8:	bne	1bd30 <__assert_fail@plt+0xaad4>
   1bcfc:	ldrb	r3, [r0, #1]
   1bd00:	bic	r3, r3, #32
   1bd04:	cmp	r3, #66	; 0x42
   1bd08:	bne	1bd30 <__assert_fail@plt+0xaad4>
   1bd0c:	ldrb	r3, [r0, #2]
   1bd10:	cmp	r3, #49	; 0x31
   1bd14:	bne	1bd30 <__assert_fail@plt+0xaad4>
   1bd18:	ldrb	r3, [r0, #3]
   1bd1c:	cmp	r3, #56	; 0x38
   1bd20:	bne	1bd30 <__assert_fail@plt+0xaad4>
   1bd24:	ldrb	r3, [r0, #4]
   1bd28:	cmp	r3, #48	; 0x30
   1bd2c:	beq	1bd44 <__assert_fail@plt+0xaae8>
   1bd30:	ldr	r3, [pc, #80]	; 1bd88 <__assert_fail@plt+0xab2c>
   1bd34:	cmp	r5, #9
   1bd38:	ldr	r0, [pc, #76]	; 1bd8c <__assert_fail@plt+0xab30>
   1bd3c:	movne	r0, r3
   1bd40:	pop	{r4, r5, r6, pc}
   1bd44:	ldrb	r3, [r0, #5]
   1bd48:	cmp	r3, #51	; 0x33
   1bd4c:	bne	1bd30 <__assert_fail@plt+0xaad4>
   1bd50:	ldrb	r3, [r0, #6]
   1bd54:	cmp	r3, #48	; 0x30
   1bd58:	bne	1bd30 <__assert_fail@plt+0xaad4>
   1bd5c:	ldrb	r3, [r0, #7]
   1bd60:	cmp	r3, #0
   1bd64:	bne	1bd30 <__assert_fail@plt+0xaad4>
   1bd68:	ldrb	r2, [r4]
   1bd6c:	ldr	r3, [pc, #28]	; 1bd90 <__assert_fail@plt+0xab34>
   1bd70:	ldr	r0, [pc, #28]	; 1bd94 <__assert_fail@plt+0xab38>
   1bd74:	cmp	r2, #96	; 0x60
   1bd78:	movne	r0, r3
   1bd7c:	pop	{r4, r5, r6, pc}
   1bd80:	andeq	sp, r2, r4, lsr ip
   1bd84:	andeq	sp, r2, r0, lsr ip
   1bd88:	andeq	sp, r2, r4, asr #24
   1bd8c:	andeq	sp, r2, r0, asr #24
   1bd90:	andeq	sp, r2, ip, lsr ip
   1bd94:	andeq	sp, r2, r8, lsr ip
   1bd98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd9c:	sub	sp, sp, #116	; 0x74
   1bda0:	mov	sl, r0
   1bda4:	str	r3, [sp, #24]
   1bda8:	mov	r3, #1
   1bdac:	mov	r8, r1
   1bdb0:	str	r2, [sp, #56]	; 0x38
   1bdb4:	str	r3, [sp, #36]	; 0x24
   1bdb8:	bl	110a0 <__ctype_get_mb_cur_max@plt>
   1bdbc:	ldr	r3, [sp, #156]	; 0x9c
   1bdc0:	mov	fp, r8
   1bdc4:	mov	r2, #0
   1bdc8:	lsr	r3, r3, #1
   1bdcc:	and	r3, r3, #1
   1bdd0:	str	r2, [sp, #68]	; 0x44
   1bdd4:	str	r3, [sp, #28]
   1bdd8:	str	r2, [sp, #40]	; 0x28
   1bddc:	str	r2, [sp, #44]	; 0x2c
   1bde0:	str	r2, [sp, #52]	; 0x34
   1bde4:	str	r2, [sp, #64]	; 0x40
   1bde8:	str	r2, [sp, #72]	; 0x48
   1bdec:	str	sl, [sp, #32]
   1bdf0:	str	r0, [sp, #76]	; 0x4c
   1bdf4:	ldr	r3, [sp, #152]	; 0x98
   1bdf8:	cmp	r3, #10
   1bdfc:	ldrls	pc, [pc, r3, lsl #2]
   1be00:	b	1cfc0 <__assert_fail@plt+0xbd64>
   1be04:	andeq	fp, r1, r0, lsr lr
   1be08:	andeq	ip, r1, r8, lsl r1
   1be0c:	andeq	ip, r1, ip, lsr r1
   1be10:	andeq	ip, r1, r0, ror #2
   1be14:	andeq	ip, r1, ip, lsl #5
   1be18:	andeq	ip, r1, r0, ror #4
   1be1c:	andeq	ip, r1, r8, lsr r2
   1be20:	andeq	ip, r1, r4, ror r1
   1be24:	andeq	ip, r1, ip, lsl #3
   1be28:	andeq	ip, r1, ip, lsl #3
   1be2c:	andeq	ip, r1, ip, lsl #3
   1be30:	mov	r3, #0
   1be34:	mov	r7, r3
   1be38:	str	r3, [sp, #28]
   1be3c:	ldr	r3, [sp, #44]	; 0x2c
   1be40:	mov	sl, #0
   1be44:	eor	r3, r3, #1
   1be48:	str	r3, [sp, #60]	; 0x3c
   1be4c:	ldr	r3, [sp, #24]
   1be50:	cmn	r3, #1
   1be54:	beq	1c3b8 <__assert_fail@plt+0xb15c>
   1be58:	ldr	r3, [sp, #24]
   1be5c:	subs	r5, r3, sl
   1be60:	movne	r5, #1
   1be64:	cmp	r5, #0
   1be68:	beq	1c3d0 <__assert_fail@plt+0xb174>
   1be6c:	ldr	r3, [sp, #152]	; 0x98
   1be70:	ldr	r8, [sp, #44]	; 0x2c
   1be74:	cmp	r3, #2
   1be78:	moveq	r8, #0
   1be7c:	andne	r8, r8, #1
   1be80:	ldr	r3, [sp, #52]	; 0x34
   1be84:	adds	r9, r3, #0
   1be88:	movne	r9, #1
   1be8c:	ands	r6, r9, r8
   1be90:	beq	1c838 <__assert_fail@plt+0xb5dc>
   1be94:	ldr	r2, [sp, #52]	; 0x34
   1be98:	ldr	r1, [sp, #24]
   1be9c:	cmp	r2, #1
   1bea0:	mov	r3, r2
   1bea4:	movls	r3, #0
   1bea8:	movhi	r3, #1
   1beac:	cmn	r1, #1
   1beb0:	movne	r3, #0
   1beb4:	cmp	r3, #0
   1beb8:	add	r4, sl, r2
   1bebc:	beq	1becc <__assert_fail@plt+0xac70>
   1bec0:	ldr	r0, [sp, #56]	; 0x38
   1bec4:	bl	11160 <strlen@plt>
   1bec8:	str	r0, [sp, #24]
   1becc:	ldr	r3, [sp, #24]
   1bed0:	cmp	r3, r4
   1bed4:	ldr	r3, [sp, #56]	; 0x38
   1bed8:	add	r3, r3, sl
   1bedc:	str	r3, [sp, #48]	; 0x30
   1bee0:	bcc	1c844 <__assert_fail@plt+0xb5e8>
   1bee4:	mov	r0, r3
   1bee8:	ldr	r2, [sp, #52]	; 0x34
   1beec:	ldr	r1, [sp, #64]	; 0x40
   1bef0:	bl	11034 <memcmp@plt>
   1bef4:	cmp	r0, #0
   1bef8:	bne	1c844 <__assert_fail@plt+0xb5e8>
   1befc:	ldr	r3, [sp, #28]
   1bf00:	cmp	r3, #0
   1bf04:	bne	1d0c0 <__assert_fail@plt+0xbe64>
   1bf08:	ldr	r3, [sp, #48]	; 0x30
   1bf0c:	ldrb	r4, [r3]
   1bf10:	cmp	r4, #126	; 0x7e
   1bf14:	ldrls	pc, [pc, r4, lsl #2]
   1bf18:	b	1c7d8 <__assert_fail@plt+0xb57c>
   1bf1c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bf20:	ldrdeq	ip, [r1], -r8
   1bf24:	ldrdeq	ip, [r1], -r8
   1bf28:	ldrdeq	ip, [r1], -r8
   1bf2c:	ldrdeq	ip, [r1], -r8
   1bf30:	ldrdeq	ip, [r1], -r8
   1bf34:	ldrdeq	ip, [r1], -r8
   1bf38:	andeq	ip, r1, r0, ror #11
   1bf3c:	andeq	ip, r1, r4, asr #11
   1bf40:	andeq	ip, r1, r0, asr #15
   1bf44:	andeq	ip, r1, r4, lsr #10
   1bf48:	andeq	ip, r1, r8, lsl #10
   1bf4c:	muleq	r1, ip, r7
   1bf50:	andeq	ip, r1, r8, ror r7
   1bf54:	ldrdeq	ip, [r1], -r8
   1bf58:	ldrdeq	ip, [r1], -r8
   1bf5c:	ldrdeq	ip, [r1], -r8
   1bf60:	ldrdeq	ip, [r1], -r8
   1bf64:	ldrdeq	ip, [r1], -r8
   1bf68:	ldrdeq	ip, [r1], -r8
   1bf6c:	ldrdeq	ip, [r1], -r8
   1bf70:	ldrdeq	ip, [r1], -r8
   1bf74:	ldrdeq	ip, [r1], -r8
   1bf78:	ldrdeq	ip, [r1], -r8
   1bf7c:	ldrdeq	ip, [r1], -r8
   1bf80:	ldrdeq	ip, [r1], -r8
   1bf84:	ldrdeq	ip, [r1], -r8
   1bf88:	ldrdeq	ip, [r1], -r8
   1bf8c:	ldrdeq	ip, [r1], -r8
   1bf90:	ldrdeq	ip, [r1], -r8
   1bf94:	ldrdeq	ip, [r1], -r8
   1bf98:	ldrdeq	ip, [r1], -r8
   1bf9c:			; <UNDEFINED> instruction: 0x0001c7b8
   1bfa0:	andeq	ip, r1, ip, ror #13
   1bfa4:	andeq	ip, r1, ip, ror #13
   1bfa8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bfac:	andeq	ip, r1, ip, ror #13
   1bfb0:	andeq	ip, r1, r4, lsl #15
   1bfb4:	andeq	ip, r1, ip, ror #13
   1bfb8:	andeq	ip, r1, r8, asr r7
   1bfbc:	andeq	ip, r1, ip, ror #13
   1bfc0:	andeq	ip, r1, ip, ror #13
   1bfc4:	andeq	ip, r1, ip, ror #13
   1bfc8:	andeq	ip, r1, r4, lsl #15
   1bfcc:	andeq	ip, r1, r4, lsl #15
   1bfd0:	andeq	ip, r1, r4, lsl #15
   1bfd4:	andeq	ip, r1, r4, lsl #15
   1bfd8:	andeq	ip, r1, r4, lsl #15
   1bfdc:	andeq	ip, r1, r4, lsl #15
   1bfe0:	andeq	ip, r1, r4, lsl #15
   1bfe4:	andeq	ip, r1, r4, lsl #15
   1bfe8:	andeq	ip, r1, r4, lsl #15
   1bfec:	andeq	ip, r1, r4, lsl #15
   1bff0:	andeq	ip, r1, r4, lsl #15
   1bff4:	andeq	ip, r1, r4, lsl #15
   1bff8:	andeq	ip, r1, r4, lsl #15
   1bffc:	andeq	ip, r1, r4, lsl #15
   1c000:	andeq	ip, r1, r4, lsl #15
   1c004:	andeq	ip, r1, r4, lsl #15
   1c008:	andeq	ip, r1, ip, ror #13
   1c00c:	andeq	ip, r1, ip, ror #13
   1c010:	andeq	ip, r1, ip, ror #13
   1c014:	andeq	ip, r1, ip, ror #13
   1c018:	andeq	ip, r1, r8, lsr #14
   1c01c:	ldrdeq	ip, [r1], -r8
   1c020:	andeq	ip, r1, r4, lsl #15
   1c024:	andeq	ip, r1, r4, lsl #15
   1c028:	andeq	ip, r1, r4, lsl #15
   1c02c:	andeq	ip, r1, r4, lsl #15
   1c030:	andeq	ip, r1, r4, lsl #15
   1c034:	andeq	ip, r1, r4, lsl #15
   1c038:	andeq	ip, r1, r4, lsl #15
   1c03c:	andeq	ip, r1, r4, lsl #15
   1c040:	andeq	ip, r1, r4, lsl #15
   1c044:	andeq	ip, r1, r4, lsl #15
   1c048:	andeq	ip, r1, r4, lsl #15
   1c04c:	andeq	ip, r1, r4, lsl #15
   1c050:	andeq	ip, r1, r4, lsl #15
   1c054:	andeq	ip, r1, r4, lsl #15
   1c058:	andeq	ip, r1, r4, lsl #15
   1c05c:	andeq	ip, r1, r4, lsl #15
   1c060:	andeq	ip, r1, r4, lsl #15
   1c064:	andeq	ip, r1, r4, lsl #15
   1c068:	andeq	ip, r1, r4, lsl #15
   1c06c:	andeq	ip, r1, r4, lsl #15
   1c070:	andeq	ip, r1, r4, lsl #15
   1c074:	andeq	ip, r1, r4, lsl #15
   1c078:	andeq	ip, r1, r4, lsl #15
   1c07c:	andeq	ip, r1, r4, lsl #15
   1c080:	andeq	ip, r1, r4, lsl #15
   1c084:	andeq	ip, r1, r4, lsl #15
   1c088:	andeq	ip, r1, ip, ror #13
   1c08c:	andeq	ip, r1, r8, asr #8
   1c090:	andeq	ip, r1, r4, lsl #15
   1c094:	andeq	ip, r1, ip, ror #13
   1c098:	andeq	ip, r1, r4, lsl #15
   1c09c:	andeq	ip, r1, ip, ror #13
   1c0a0:	andeq	ip, r1, r4, lsl #15
   1c0a4:	andeq	ip, r1, r4, lsl #15
   1c0a8:	andeq	ip, r1, r4, lsl #15
   1c0ac:	andeq	ip, r1, r4, lsl #15
   1c0b0:	andeq	ip, r1, r4, lsl #15
   1c0b4:	andeq	ip, r1, r4, lsl #15
   1c0b8:	andeq	ip, r1, r4, lsl #15
   1c0bc:	andeq	ip, r1, r4, lsl #15
   1c0c0:	andeq	ip, r1, r4, lsl #15
   1c0c4:	andeq	ip, r1, r4, lsl #15
   1c0c8:	andeq	ip, r1, r4, lsl #15
   1c0cc:	andeq	ip, r1, r4, lsl #15
   1c0d0:	andeq	ip, r1, r4, lsl #15
   1c0d4:	andeq	ip, r1, r4, lsl #15
   1c0d8:	andeq	ip, r1, r4, lsl #15
   1c0dc:	andeq	ip, r1, r4, lsl #15
   1c0e0:	andeq	ip, r1, r4, lsl #15
   1c0e4:	andeq	ip, r1, r4, lsl #15
   1c0e8:	andeq	ip, r1, r4, lsl #15
   1c0ec:	andeq	ip, r1, r4, lsl #15
   1c0f0:	andeq	ip, r1, r4, lsl #15
   1c0f4:	andeq	ip, r1, r4, lsl #15
   1c0f8:	andeq	ip, r1, r4, lsl #15
   1c0fc:	andeq	ip, r1, r4, lsl #15
   1c100:	andeq	ip, r1, r4, lsl #15
   1c104:	andeq	ip, r1, r4, lsl #15
   1c108:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c10c:	andeq	ip, r1, ip, ror #13
   1c110:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c114:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c118:	mov	r3, #1
   1c11c:	str	r3, [sp, #28]
   1c120:	str	r3, [sp, #52]	; 0x34
   1c124:	ldr	r3, [pc, #4000]	; 1d0cc <__assert_fail@plt+0xbe70>
   1c128:	mov	r7, #0
   1c12c:	str	r3, [sp, #64]	; 0x40
   1c130:	mov	r3, #2
   1c134:	str	r3, [sp, #152]	; 0x98
   1c138:	b	1be3c <__assert_fail@plt+0xabe0>
   1c13c:	ldr	r3, [sp, #28]
   1c140:	cmp	r3, #0
   1c144:	beq	1c2a0 <__assert_fail@plt+0xb044>
   1c148:	mov	r3, #1
   1c14c:	str	r3, [sp, #52]	; 0x34
   1c150:	ldr	r3, [pc, #3956]	; 1d0cc <__assert_fail@plt+0xbe70>
   1c154:	mov	r7, #0
   1c158:	str	r3, [sp, #64]	; 0x40
   1c15c:	b	1be3c <__assert_fail@plt+0xabe0>
   1c160:	mov	r3, #1
   1c164:	str	r3, [sp, #44]	; 0x2c
   1c168:	str	r3, [sp, #52]	; 0x34
   1c16c:	str	r3, [sp, #28]
   1c170:	b	1c124 <__assert_fail@plt+0xaec8>
   1c174:	mov	r3, #0
   1c178:	str	r3, [sp, #28]
   1c17c:	mov	r3, #1
   1c180:	str	r3, [sp, #44]	; 0x2c
   1c184:	mov	r7, #0
   1c188:	b	1be3c <__assert_fail@plt+0xabe0>
   1c18c:	ldr	r3, [sp, #152]	; 0x98
   1c190:	cmp	r3, #10
   1c194:	beq	1c1d8 <__assert_fail@plt+0xaf7c>
   1c198:	mov	r2, #5
   1c19c:	ldr	r1, [pc, #3884]	; 1d0d0 <__assert_fail@plt+0xbe74>
   1c1a0:	mov	r0, #0
   1c1a4:	bl	1104c <dcgettext@plt>
   1c1a8:	ldr	r2, [pc, #3872]	; 1d0d0 <__assert_fail@plt+0xbe74>
   1c1ac:	cmp	r0, r2
   1c1b0:	str	r0, [sp, #164]	; 0xa4
   1c1b4:	beq	1d1bc <__assert_fail@plt+0xbf60>
   1c1b8:	mov	r2, #5
   1c1bc:	ldr	r1, [pc, #3848]	; 1d0cc <__assert_fail@plt+0xbe70>
   1c1c0:	mov	r0, #0
   1c1c4:	bl	1104c <dcgettext@plt>
   1c1c8:	ldr	r2, [pc, #3836]	; 1d0cc <__assert_fail@plt+0xbe70>
   1c1cc:	cmp	r0, r2
   1c1d0:	str	r0, [sp, #168]	; 0xa8
   1c1d4:	beq	1d1ac <__assert_fail@plt+0xbf50>
   1c1d8:	ldr	r7, [sp, #28]
   1c1dc:	cmp	r7, #0
   1c1e0:	movne	r7, #0
   1c1e4:	bne	1c218 <__assert_fail@plt+0xafbc>
   1c1e8:	ldr	r3, [sp, #164]	; 0xa4
   1c1ec:	ldrb	r3, [r3]
   1c1f0:	cmp	r3, #0
   1c1f4:	beq	1d1cc <__assert_fail@plt+0xbf70>
   1c1f8:	ldr	r2, [sp, #164]	; 0xa4
   1c1fc:	ldr	r1, [sp, #32]
   1c200:	cmp	fp, r7
   1c204:	strbhi	r3, [r1, r7]
   1c208:	ldrb	r3, [r2, #1]!
   1c20c:	add	r7, r7, #1
   1c210:	cmp	r3, #0
   1c214:	bne	1c200 <__assert_fail@plt+0xafa4>
   1c218:	ldr	r0, [sp, #168]	; 0xa8
   1c21c:	bl	11160 <strlen@plt>
   1c220:	ldr	r3, [sp, #168]	; 0xa8
   1c224:	str	r3, [sp, #64]	; 0x40
   1c228:	mov	r3, #1
   1c22c:	str	r3, [sp, #44]	; 0x2c
   1c230:	str	r0, [sp, #52]	; 0x34
   1c234:	b	1be3c <__assert_fail@plt+0xabe0>
   1c238:	mov	r3, #1
   1c23c:	str	r3, [sp, #44]	; 0x2c
   1c240:	str	r3, [sp, #52]	; 0x34
   1c244:	str	r3, [sp, #28]
   1c248:	ldr	r3, [pc, #3716]	; 1d0d4 <__assert_fail@plt+0xbe78>
   1c24c:	mov	r7, #0
   1c250:	str	r3, [sp, #64]	; 0x40
   1c254:	mov	r3, #5
   1c258:	str	r3, [sp, #152]	; 0x98
   1c25c:	b	1be3c <__assert_fail@plt+0xabe0>
   1c260:	ldr	r3, [sp, #28]
   1c264:	cmp	r3, #0
   1c268:	beq	1cf68 <__assert_fail@plt+0xbd0c>
   1c26c:	ldr	r3, [sp, #28]
   1c270:	mov	r7, #0
   1c274:	str	r3, [sp, #44]	; 0x2c
   1c278:	mov	r3, #1
   1c27c:	str	r3, [sp, #52]	; 0x34
   1c280:	ldr	r3, [pc, #3660]	; 1d0d4 <__assert_fail@plt+0xbe78>
   1c284:	str	r3, [sp, #64]	; 0x40
   1c288:	b	1be3c <__assert_fail@plt+0xabe0>
   1c28c:	ldr	r3, [sp, #28]
   1c290:	cmp	r3, #0
   1c294:	mov	r3, #1
   1c298:	streq	r3, [sp, #44]	; 0x2c
   1c29c:	bne	1c120 <__assert_fail@plt+0xaec4>
   1c2a0:	cmp	fp, #0
   1c2a4:	beq	1cf98 <__assert_fail@plt+0xbd3c>
   1c2a8:	ldr	r3, [sp, #32]
   1c2ac:	mov	r2, #39	; 0x27
   1c2b0:	mov	r7, #1
   1c2b4:	strb	r2, [r3]
   1c2b8:	mov	r3, #0
   1c2bc:	str	r3, [sp, #28]
   1c2c0:	mov	r3, #1
   1c2c4:	str	r3, [sp, #52]	; 0x34
   1c2c8:	ldr	r3, [pc, #3580]	; 1d0cc <__assert_fail@plt+0xbe70>
   1c2cc:	str	r3, [sp, #64]	; 0x40
   1c2d0:	mov	r3, #2
   1c2d4:	str	r3, [sp, #152]	; 0x98
   1c2d8:	b	1be3c <__assert_fail@plt+0xabe0>
   1c2dc:	ldr	r3, [sp, #24]
   1c2e0:	cmn	r3, #1
   1c2e4:	beq	1cefc <__assert_fail@plt+0xbca0>
   1c2e8:	ldr	r3, [sp, #24]
   1c2ec:	subs	r3, r3, #1
   1c2f0:	movne	r3, #1
   1c2f4:	cmp	r3, #0
   1c2f8:	bne	1c304 <__assert_fail@plt+0xb0a8>
   1c2fc:	cmp	sl, #0
   1c300:	beq	1c6f0 <__assert_fail@plt+0xb494>
   1c304:	ldr	r3, [sp, #152]	; 0x98
   1c308:	mov	r5, #0
   1c30c:	sub	r2, r3, #2
   1c310:	mov	r8, r5
   1c314:	clz	r2, r2
   1c318:	lsr	r2, r2, #5
   1c31c:	ldr	r3, [sp, #60]	; 0x3c
   1c320:	ldr	r1, [sp, #28]
   1c324:	orr	r3, r2, r3
   1c328:	eor	r3, r3, #1
   1c32c:	orr	r3, r1, r3
   1c330:	tst	r3, #255	; 0xff
   1c334:	bne	1ca60 <__assert_fail@plt+0xb804>
   1c338:	cmp	r6, #0
   1c33c:	bne	1c48c <__assert_fail@plt+0xb230>
   1c340:	ldr	r3, [sp, #40]	; 0x28
   1c344:	eor	r8, r8, #1
   1c348:	and	r8, r8, r3
   1c34c:	add	sl, sl, #1
   1c350:	uxtb	r6, r8
   1c354:	cmp	r6, #0
   1c358:	beq	1c38c <__assert_fail@plt+0xb130>
   1c35c:	cmp	fp, r7
   1c360:	movhi	r2, #39	; 0x27
   1c364:	ldrhi	r3, [sp, #32]
   1c368:	strbhi	r2, [r3, r7]
   1c36c:	add	r3, r7, #1
   1c370:	cmp	fp, r3
   1c374:	movhi	r1, #39	; 0x27
   1c378:	ldrhi	r2, [sp, #32]
   1c37c:	add	r7, r7, #2
   1c380:	strbhi	r1, [r2, r3]
   1c384:	mov	r3, #0
   1c388:	str	r3, [sp, #40]	; 0x28
   1c38c:	cmp	r7, fp
   1c390:	ldrcc	r3, [sp, #32]
   1c394:	strbcc	r4, [r3, r7]
   1c398:	ldr	r3, [sp, #36]	; 0x24
   1c39c:	cmp	r5, #0
   1c3a0:	moveq	r3, #0
   1c3a4:	str	r3, [sp, #36]	; 0x24
   1c3a8:	ldr	r3, [sp, #24]
   1c3ac:	add	r7, r7, #1
   1c3b0:	cmn	r3, #1
   1c3b4:	bne	1be58 <__assert_fail@plt+0xabfc>
   1c3b8:	ldr	r3, [sp, #56]	; 0x38
   1c3bc:	ldrb	r5, [r3, sl]
   1c3c0:	adds	r5, r5, #0
   1c3c4:	movne	r5, #1
   1c3c8:	cmp	r5, #0
   1c3cc:	bne	1be6c <__assert_fail@plt+0xac10>
   1c3d0:	ldr	r3, [sp, #152]	; 0x98
   1c3d4:	ldr	r1, [sp, #28]
   1c3d8:	sub	r3, r3, #2
   1c3dc:	clz	r3, r3
   1c3e0:	lsr	r3, r3, #5
   1c3e4:	and	r9, r1, r3
   1c3e8:	cmp	r7, #0
   1c3ec:	movne	r2, #0
   1c3f0:	andeq	r2, r9, #1
   1c3f4:	cmp	r2, #0
   1c3f8:	bne	1cdd4 <__assert_fail@plt+0xbb78>
   1c3fc:	eor	r2, r1, #1
   1c400:	ands	r3, r3, r2
   1c404:	beq	1d290 <__assert_fail@plt+0xc034>
   1c408:	ldr	r2, [sp, #68]	; 0x44
   1c40c:	cmp	r2, #0
   1c410:	beq	1d27c <__assert_fail@plt+0xc020>
   1c414:	ldr	r3, [sp, #36]	; 0x24
   1c418:	cmp	r3, #0
   1c41c:	bne	1d234 <__assert_fail@plt+0xbfd8>
   1c420:	ldr	r2, [sp, #72]	; 0x48
   1c424:	clz	r3, fp
   1c428:	cmp	r2, #0
   1c42c:	lsr	r3, r3, #5
   1c430:	moveq	r3, #0
   1c434:	cmp	r3, #0
   1c438:	beq	1d1d4 <__assert_fail@plt+0xbf78>
   1c43c:	str	r3, [sp, #68]	; 0x44
   1c440:	ldr	fp, [sp, #72]	; 0x48
   1c444:	b	1bdf4 <__assert_fail@plt+0xab98>
   1c448:	ldr	r3, [sp, #152]	; 0x98
   1c44c:	cmp	r3, #2
   1c450:	beq	1caa4 <__assert_fail@plt+0xb848>
   1c454:	ldr	r3, [sp, #44]	; 0x2c
   1c458:	ldr	r2, [sp, #28]
   1c45c:	and	r2, r3, r2
   1c460:	ands	r2, r9, r2
   1c464:	bne	1cab0 <__assert_fail@plt+0xb854>
   1c468:	mov	r4, #92	; 0x5c
   1c46c:	mov	r3, r4
   1c470:	ldr	r1, [sp, #44]	; 0x2c
   1c474:	cmp	r1, #0
   1c478:	moveq	r5, #0
   1c47c:	moveq	r8, r1
   1c480:	beq	1c31c <__assert_fail@plt+0xb0c0>
   1c484:	mov	r4, r3
   1c488:	mov	r5, #0
   1c48c:	ldr	r3, [sp, #28]
   1c490:	cmp	r3, #0
   1c494:	bne	1ca98 <__assert_fail@plt+0xb83c>
   1c498:	ldr	r3, [sp, #40]	; 0x28
   1c49c:	eor	r9, r3, #1
   1c4a0:	and	r9, r9, r2
   1c4a4:	ands	r9, r9, #255	; 0xff
   1c4a8:	beq	1c4ec <__assert_fail@plt+0xb290>
   1c4ac:	cmp	fp, r7
   1c4b0:	movhi	r2, #39	; 0x27
   1c4b4:	ldrhi	r3, [sp, #32]
   1c4b8:	str	r9, [sp, #40]	; 0x28
   1c4bc:	strbhi	r2, [r3, r7]
   1c4c0:	add	r3, r7, #1
   1c4c4:	cmp	fp, r3
   1c4c8:	movhi	r1, #36	; 0x24
   1c4cc:	ldrhi	r2, [sp, #32]
   1c4d0:	strbhi	r1, [r2, r3]
   1c4d4:	add	r3, r7, #2
   1c4d8:	cmp	fp, r3
   1c4dc:	add	r7, r7, #3
   1c4e0:	ldrhi	r2, [sp, #32]
   1c4e4:	movhi	r1, #39	; 0x27
   1c4e8:	strbhi	r1, [r2, r3]
   1c4ec:	cmp	fp, r7
   1c4f0:	movhi	r2, #92	; 0x5c
   1c4f4:	ldrhi	r3, [sp, #32]
   1c4f8:	add	sl, sl, #1
   1c4fc:	strbhi	r2, [r3, r7]
   1c500:	add	r7, r7, #1
   1c504:	b	1c38c <__assert_fail@plt+0xb130>
   1c508:	ldr	r3, [sp, #152]	; 0x98
   1c50c:	mov	r4, #11
   1c510:	sub	r2, r3, #2
   1c514:	mov	r3, #118	; 0x76
   1c518:	clz	r2, r2
   1c51c:	lsr	r2, r2, #5
   1c520:	b	1c470 <__assert_fail@plt+0xb214>
   1c524:	mov	r4, #10
   1c528:	mov	r3, #110	; 0x6e
   1c52c:	ldr	r2, [sp, #152]	; 0x98
   1c530:	ldr	r1, [sp, #28]
   1c534:	sub	r2, r2, #2
   1c538:	clz	r2, r2
   1c53c:	lsr	r2, r2, #5
   1c540:	ands	r1, r1, r2
   1c544:	beq	1c470 <__assert_fail@plt+0xb214>
   1c548:	ldr	sl, [sp, #32]
   1c54c:	mov	r8, fp
   1c550:	mov	r2, r1
   1c554:	mov	r3, #2
   1c558:	str	r3, [sp, #152]	; 0x98
   1c55c:	ldr	r9, [sp, #44]	; 0x2c
   1c560:	ldr	r3, [sp, #152]	; 0x98
   1c564:	and	r9, r9, r2
   1c568:	tst	r9, #255	; 0xff
   1c56c:	movne	r3, #4
   1c570:	str	r3, [sp, #152]	; 0x98
   1c574:	ldr	r3, [sp, #156]	; 0x9c
   1c578:	mov	ip, #0
   1c57c:	bic	r3, r3, #2
   1c580:	str	r3, [sp, #4]
   1c584:	ldr	r3, [sp, #168]	; 0xa8
   1c588:	ldr	r2, [sp, #56]	; 0x38
   1c58c:	str	r3, [sp, #16]
   1c590:	ldr	r3, [sp, #164]	; 0xa4
   1c594:	mov	r1, r8
   1c598:	str	r3, [sp, #12]
   1c59c:	ldr	r3, [sp, #152]	; 0x98
   1c5a0:	mov	r0, sl
   1c5a4:	str	r3, [sp]
   1c5a8:	str	ip, [sp, #8]
   1c5ac:	ldr	r3, [sp, #24]
   1c5b0:	bl	1bd98 <__assert_fail@plt+0xab3c>
   1c5b4:	mov	fp, r0
   1c5b8:	mov	r0, fp
   1c5bc:	add	sp, sp, #116	; 0x74
   1c5c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c5c4:	ldr	r3, [sp, #152]	; 0x98
   1c5c8:	mov	r4, #8
   1c5cc:	sub	r2, r3, #2
   1c5d0:	mov	r3, #98	; 0x62
   1c5d4:	clz	r2, r2
   1c5d8:	lsr	r2, r2, #5
   1c5dc:	b	1c470 <__assert_fail@plt+0xb214>
   1c5e0:	ldr	r3, [sp, #152]	; 0x98
   1c5e4:	mov	r4, #7
   1c5e8:	sub	r2, r3, #2
   1c5ec:	mov	r3, #97	; 0x61
   1c5f0:	clz	r2, r2
   1c5f4:	lsr	r2, r2, #5
   1c5f8:	b	1c470 <__assert_fail@plt+0xb214>
   1c5fc:	ldr	r3, [sp, #44]	; 0x2c
   1c600:	cmp	r3, #0
   1c604:	beq	1cde8 <__assert_fail@plt+0xbb8c>
   1c608:	ldr	r3, [sp, #28]
   1c60c:	cmp	r3, #0
   1c610:	bne	1d0c0 <__assert_fail@plt+0xbe64>
   1c614:	ldr	r3, [sp, #152]	; 0x98
   1c618:	sub	r2, r3, #2
   1c61c:	ldr	r3, [sp, #40]	; 0x28
   1c620:	clz	r2, r2
   1c624:	eor	r3, r3, #1
   1c628:	lsr	r2, r2, #5
   1c62c:	ands	r3, r2, r3
   1c630:	moveq	r1, r7
   1c634:	beq	1c678 <__assert_fail@plt+0xb41c>
   1c638:	cmp	fp, r7
   1c63c:	movhi	r0, #39	; 0x27
   1c640:	ldrhi	r1, [sp, #32]
   1c644:	str	r3, [sp, #40]	; 0x28
   1c648:	strbhi	r0, [r1, r7]
   1c64c:	add	r1, r7, #1
   1c650:	cmp	fp, r1
   1c654:	movhi	ip, #36	; 0x24
   1c658:	ldrhi	r0, [sp, #32]
   1c65c:	strbhi	ip, [r0, r1]
   1c660:	add	r1, r7, #2
   1c664:	cmp	fp, r1
   1c668:	movhi	ip, #39	; 0x27
   1c66c:	ldrhi	r0, [sp, #32]
   1c670:	strbhi	ip, [r0, r1]
   1c674:	add	r1, r7, #3
   1c678:	cmp	fp, r1
   1c67c:	movhi	r0, #92	; 0x5c
   1c680:	ldrhi	r3, [sp, #32]
   1c684:	add	r7, r1, #1
   1c688:	strbhi	r0, [r3, r1]
   1c68c:	cmp	r8, #0
   1c690:	beq	1cfd4 <__assert_fail@plt+0xbd78>
   1c694:	ldr	r0, [sp, #24]
   1c698:	add	r3, sl, #1
   1c69c:	cmp	r3, r0
   1c6a0:	bcs	1cf10 <__assert_fail@plt+0xbcb4>
   1c6a4:	ldr	r0, [sp, #56]	; 0x38
   1c6a8:	ldrb	r3, [r0, r3]
   1c6ac:	sub	r3, r3, #48	; 0x30
   1c6b0:	cmp	r3, #9
   1c6b4:	bhi	1cf10 <__assert_fail@plt+0xbcb4>
   1c6b8:	cmp	fp, r7
   1c6bc:	movhi	r3, #48	; 0x30
   1c6c0:	ldrhi	r0, [sp, #32]
   1c6c4:	ldr	r5, [sp, #28]
   1c6c8:	mov	r4, #48	; 0x30
   1c6cc:	strbhi	r3, [r0, r7]
   1c6d0:	add	r3, r1, #2
   1c6d4:	cmp	fp, r3
   1c6d8:	movhi	r0, #48	; 0x30
   1c6dc:	ldrhi	ip, [sp, #32]
   1c6e0:	add	r7, r1, #3
   1c6e4:	strbhi	r0, [ip, r3]
   1c6e8:	b	1c31c <__assert_fail@plt+0xb0c0>
   1c6ec:	mov	r5, #0
   1c6f0:	ldr	r3, [sp, #152]	; 0x98
   1c6f4:	sub	r2, r3, #2
   1c6f8:	ldr	r3, [sp, #28]
   1c6fc:	clz	r2, r2
   1c700:	lsr	r2, r2, #5
   1c704:	ands	r8, r3, r2
   1c708:	beq	1c31c <__assert_fail@plt+0xb0c0>
   1c70c:	mov	r3, r8
   1c710:	mov	r2, r3
   1c714:	mov	r3, #2
   1c718:	ldr	sl, [sp, #32]
   1c71c:	mov	r8, fp
   1c720:	str	r3, [sp, #152]	; 0x98
   1c724:	b	1c55c <__assert_fail@plt+0xb300>
   1c728:	ldr	r3, [sp, #152]	; 0x98
   1c72c:	cmp	r3, #2
   1c730:	beq	1ce54 <__assert_fail@plt+0xbbf8>
   1c734:	cmp	r3, #5
   1c738:	beq	1ce14 <__assert_fail@plt+0xbbb8>
   1c73c:	mov	r5, #0
   1c740:	sub	r2, r3, #2
   1c744:	mov	r8, r5
   1c748:	clz	r2, r2
   1c74c:	mov	r4, #63	; 0x3f
   1c750:	lsr	r2, r2, #5
   1c754:	b	1c31c <__assert_fail@plt+0xb0c0>
   1c758:	ldr	r3, [sp, #152]	; 0x98
   1c75c:	cmp	r3, #2
   1c760:	beq	1ce74 <__assert_fail@plt+0xbc18>
   1c764:	mov	r2, #0
   1c768:	str	r5, [sp, #68]	; 0x44
   1c76c:	mov	r8, r2
   1c770:	mov	r4, #39	; 0x27
   1c774:	b	1c31c <__assert_fail@plt+0xb0c0>
   1c778:	mov	r4, #13
   1c77c:	mov	r3, #114	; 0x72
   1c780:	b	1c52c <__assert_fail@plt+0xb2d0>
   1c784:	ldr	r3, [sp, #152]	; 0x98
   1c788:	mov	r8, #0
   1c78c:	sub	r2, r3, #2
   1c790:	clz	r2, r2
   1c794:	lsr	r2, r2, #5
   1c798:	b	1c31c <__assert_fail@plt+0xb0c0>
   1c79c:	ldr	r3, [sp, #152]	; 0x98
   1c7a0:	mov	r4, #12
   1c7a4:	sub	r2, r3, #2
   1c7a8:	mov	r3, #102	; 0x66
   1c7ac:	clz	r2, r2
   1c7b0:	lsr	r2, r2, #5
   1c7b4:	b	1c470 <__assert_fail@plt+0xb214>
   1c7b8:	mov	r5, r6
   1c7bc:	b	1c6f0 <__assert_fail@plt+0xb494>
   1c7c0:	ldr	r3, [sp, #152]	; 0x98
   1c7c4:	sub	r2, r3, #2
   1c7c8:	mov	r3, #116	; 0x74
   1c7cc:	clz	r2, r2
   1c7d0:	lsr	r2, r2, #5
   1c7d4:	b	1c470 <__assert_fail@plt+0xb214>
   1c7d8:	ldr	r8, [sp, #76]	; 0x4c
   1c7dc:	cmp	r8, #1
   1c7e0:	bne	1cc90 <__assert_fail@plt+0xba34>
   1c7e4:	bl	11148 <__ctype_b_loc@plt>
   1c7e8:	sxth	r3, r4
   1c7ec:	mov	ip, r8
   1c7f0:	lsl	r3, r3, #1
   1c7f4:	ldr	r2, [r0]
   1c7f8:	ldrh	r3, [r2, r3]
   1c7fc:	and	r3, r3, #16384	; 0x4000
   1c800:	cmp	r3, #0
   1c804:	movne	r5, #1
   1c808:	moveq	r5, #0
   1c80c:	moveq	r3, #1
   1c810:	movne	r3, #0
   1c814:	ldr	r2, [sp, #44]	; 0x2c
   1c818:	and	r3, r3, r2
   1c81c:	ands	r8, r3, #255	; 0xff
   1c820:	bne	1cb24 <__assert_fail@plt+0xb8c8>
   1c824:	ldr	r3, [sp, #152]	; 0x98
   1c828:	sub	r2, r3, #2
   1c82c:	clz	r2, r2
   1c830:	lsr	r2, r2, #5
   1c834:	b	1c31c <__assert_fail@plt+0xb0c0>
   1c838:	ldr	r3, [sp, #56]	; 0x38
   1c83c:	add	r3, r3, sl
   1c840:	str	r3, [sp, #48]	; 0x30
   1c844:	ldr	r3, [sp, #48]	; 0x30
   1c848:	mov	r6, #0
   1c84c:	ldrb	r4, [r3]
   1c850:	cmp	r4, #126	; 0x7e
   1c854:	ldrls	pc, [pc, r4, lsl #2]
   1c858:	b	1c7d8 <__assert_fail@plt+0xb57c>
   1c85c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c860:	ldrdeq	ip, [r1], -r8
   1c864:	ldrdeq	ip, [r1], -r8
   1c868:	ldrdeq	ip, [r1], -r8
   1c86c:	ldrdeq	ip, [r1], -r8
   1c870:	ldrdeq	ip, [r1], -r8
   1c874:	ldrdeq	ip, [r1], -r8
   1c878:	andeq	ip, r1, r0, ror #11
   1c87c:	andeq	ip, r1, r4, asr #11
   1c880:	andeq	ip, r1, r8, asr sl
   1c884:	andeq	ip, r1, r4, lsr #10
   1c888:	andeq	ip, r1, r8, lsl #10
   1c88c:	muleq	r1, ip, r7
   1c890:	andeq	ip, r1, r8, ror r7
   1c894:	ldrdeq	ip, [r1], -r8
   1c898:	ldrdeq	ip, [r1], -r8
   1c89c:	ldrdeq	ip, [r1], -r8
   1c8a0:	ldrdeq	ip, [r1], -r8
   1c8a4:	ldrdeq	ip, [r1], -r8
   1c8a8:	ldrdeq	ip, [r1], -r8
   1c8ac:	ldrdeq	ip, [r1], -r8
   1c8b0:	ldrdeq	ip, [r1], -r8
   1c8b4:	ldrdeq	ip, [r1], -r8
   1c8b8:	ldrdeq	ip, [r1], -r8
   1c8bc:	ldrdeq	ip, [r1], -r8
   1c8c0:	ldrdeq	ip, [r1], -r8
   1c8c4:	ldrdeq	ip, [r1], -r8
   1c8c8:	ldrdeq	ip, [r1], -r8
   1c8cc:	ldrdeq	ip, [r1], -r8
   1c8d0:	ldrdeq	ip, [r1], -r8
   1c8d4:	ldrdeq	ip, [r1], -r8
   1c8d8:	ldrdeq	ip, [r1], -r8
   1c8dc:	strdeq	ip, [r1], -r0
   1c8e0:	andeq	ip, r1, ip, ror #13
   1c8e4:	andeq	ip, r1, ip, ror #13
   1c8e8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8ec:	andeq	ip, r1, ip, ror #13
   1c8f0:	andeq	ip, r1, r4, lsl #15
   1c8f4:	andeq	ip, r1, ip, ror #13
   1c8f8:	andeq	ip, r1, r8, asr r7
   1c8fc:	andeq	ip, r1, ip, ror #13
   1c900:	andeq	ip, r1, ip, ror #13
   1c904:	andeq	ip, r1, ip, ror #13
   1c908:	andeq	ip, r1, r4, lsl #15
   1c90c:	andeq	ip, r1, r4, lsl #15
   1c910:	andeq	ip, r1, r4, lsl #15
   1c914:	andeq	ip, r1, r4, lsl #15
   1c918:	andeq	ip, r1, r4, lsl #15
   1c91c:	andeq	ip, r1, r4, lsl #15
   1c920:	andeq	ip, r1, r4, lsl #15
   1c924:	andeq	ip, r1, r4, lsl #15
   1c928:	andeq	ip, r1, r4, lsl #15
   1c92c:	andeq	ip, r1, r4, lsl #15
   1c930:	andeq	ip, r1, r4, lsl #15
   1c934:	andeq	ip, r1, r4, lsl #15
   1c938:	andeq	ip, r1, r4, lsl #15
   1c93c:	andeq	ip, r1, r4, lsl #15
   1c940:	andeq	ip, r1, r4, lsl #15
   1c944:	andeq	ip, r1, r4, lsl #15
   1c948:	andeq	ip, r1, ip, ror #13
   1c94c:	andeq	ip, r1, ip, ror #13
   1c950:	andeq	ip, r1, ip, ror #13
   1c954:	andeq	ip, r1, ip, ror #13
   1c958:	andeq	ip, r1, r8, lsr #14
   1c95c:	ldrdeq	ip, [r1], -r8
   1c960:	andeq	ip, r1, r4, lsl #15
   1c964:	andeq	ip, r1, r4, lsl #15
   1c968:	andeq	ip, r1, r4, lsl #15
   1c96c:	andeq	ip, r1, r4, lsl #15
   1c970:	andeq	ip, r1, r4, lsl #15
   1c974:	andeq	ip, r1, r4, lsl #15
   1c978:	andeq	ip, r1, r4, lsl #15
   1c97c:	andeq	ip, r1, r4, lsl #15
   1c980:	andeq	ip, r1, r4, lsl #15
   1c984:	andeq	ip, r1, r4, lsl #15
   1c988:	andeq	ip, r1, r4, lsl #15
   1c98c:	andeq	ip, r1, r4, lsl #15
   1c990:	andeq	ip, r1, r4, lsl #15
   1c994:	andeq	ip, r1, r4, lsl #15
   1c998:	andeq	ip, r1, r4, lsl #15
   1c99c:	andeq	ip, r1, r4, lsl #15
   1c9a0:	andeq	ip, r1, r4, lsl #15
   1c9a4:	andeq	ip, r1, r4, lsl #15
   1c9a8:	andeq	ip, r1, r4, lsl #15
   1c9ac:	andeq	ip, r1, r4, lsl #15
   1c9b0:	andeq	ip, r1, r4, lsl #15
   1c9b4:	andeq	ip, r1, r4, lsl #15
   1c9b8:	andeq	ip, r1, r4, lsl #15
   1c9bc:	andeq	ip, r1, r4, lsl #15
   1c9c0:	andeq	ip, r1, r4, lsl #15
   1c9c4:	andeq	ip, r1, r4, lsl #15
   1c9c8:	andeq	ip, r1, ip, ror #13
   1c9cc:	andeq	ip, r1, r8, asr #8
   1c9d0:	andeq	ip, r1, r4, lsl #15
   1c9d4:	andeq	ip, r1, ip, ror #13
   1c9d8:	andeq	ip, r1, r4, lsl #15
   1c9dc:	andeq	ip, r1, ip, ror #13
   1c9e0:	andeq	ip, r1, r4, lsl #15
   1c9e4:	andeq	ip, r1, r4, lsl #15
   1c9e8:	andeq	ip, r1, r4, lsl #15
   1c9ec:	andeq	ip, r1, r4, lsl #15
   1c9f0:	andeq	ip, r1, r4, lsl #15
   1c9f4:	andeq	ip, r1, r4, lsl #15
   1c9f8:	andeq	ip, r1, r4, lsl #15
   1c9fc:	andeq	ip, r1, r4, lsl #15
   1ca00:	andeq	ip, r1, r4, lsl #15
   1ca04:	andeq	ip, r1, r4, lsl #15
   1ca08:	andeq	ip, r1, r4, lsl #15
   1ca0c:	andeq	ip, r1, r4, lsl #15
   1ca10:	andeq	ip, r1, r4, lsl #15
   1ca14:	andeq	ip, r1, r4, lsl #15
   1ca18:	andeq	ip, r1, r4, lsl #15
   1ca1c:	andeq	ip, r1, r4, lsl #15
   1ca20:	andeq	ip, r1, r4, lsl #15
   1ca24:	andeq	ip, r1, r4, lsl #15
   1ca28:	andeq	ip, r1, r4, lsl #15
   1ca2c:	andeq	ip, r1, r4, lsl #15
   1ca30:	andeq	ip, r1, r4, lsl #15
   1ca34:	andeq	ip, r1, r4, lsl #15
   1ca38:	andeq	ip, r1, r4, lsl #15
   1ca3c:	andeq	ip, r1, r4, lsl #15
   1ca40:	andeq	ip, r1, r4, lsl #15
   1ca44:	andeq	ip, r1, r4, lsl #15
   1ca48:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca4c:	andeq	ip, r1, ip, ror #13
   1ca50:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca54:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca58:	mov	r3, #116	; 0x74
   1ca5c:	b	1c52c <__assert_fail@plt+0xb2d0>
   1ca60:	ldr	r3, [sp, #160]	; 0xa0
   1ca64:	cmp	r3, #0
   1ca68:	beq	1c338 <__assert_fail@plt+0xb0dc>
   1ca6c:	lsr	r3, r4, #5
   1ca70:	ldr	r0, [sp, #160]	; 0xa0
   1ca74:	uxtb	r3, r3
   1ca78:	and	r1, r4, #31
   1ca7c:	ldr	r0, [r0, r3, lsl #2]
   1ca80:	lsr	r3, r0, r1
   1ca84:	tst	r3, #1
   1ca88:	beq	1c338 <__assert_fail@plt+0xb0dc>
   1ca8c:	ldr	r3, [sp, #28]
   1ca90:	cmp	r3, #0
   1ca94:	beq	1c498 <__assert_fail@plt+0xb23c>
   1ca98:	ldr	sl, [sp, #32]
   1ca9c:	mov	r8, fp
   1caa0:	b	1c55c <__assert_fail@plt+0xb300>
   1caa4:	ldr	r3, [sp, #28]
   1caa8:	cmp	r3, #0
   1caac:	bne	1d000 <__assert_fail@plt+0xbda4>
   1cab0:	add	sl, sl, #1
   1cab4:	ldr	r6, [sp, #40]	; 0x28
   1cab8:	mov	r5, #0
   1cabc:	mov	r4, #92	; 0x5c
   1cac0:	b	1c354 <__assert_fail@plt+0xb0f8>
   1cac4:	cmp	r9, r8
   1cac8:	bne	1cd38 <__assert_fail@plt+0xbadc>
   1cacc:	ldr	r0, [sp, #100]	; 0x64
   1cad0:	bl	1107c <iswprint@plt>
   1cad4:	add	r5, r5, r4
   1cad8:	cmp	r0, #0
   1cadc:	add	r0, sp, #104	; 0x68
   1cae0:	moveq	r6, #0
   1cae4:	bl	11028 <mbsinit@plt>
   1cae8:	cmp	r0, #0
   1caec:	beq	1cccc <__assert_fail@plt+0xba70>
   1caf0:	mov	r2, r6
   1caf4:	mov	ip, r5
   1caf8:	eor	r5, r2, #1
   1cafc:	ldr	r4, [sp, #80]	; 0x50
   1cb00:	ldr	r6, [sp, #84]	; 0x54
   1cb04:	ldr	r7, [sp, #88]	; 0x58
   1cb08:	uxtb	r5, r5
   1cb0c:	cmp	ip, #1
   1cb10:	bls	1d010 <__assert_fail@plt+0xbdb4>
   1cb14:	ldr	r3, [sp, #44]	; 0x2c
   1cb18:	and	r8, r3, r5
   1cb1c:	mov	r5, r2
   1cb20:	uxtb	r8, r8
   1cb24:	add	r2, sl, ip
   1cb28:	ldr	r0, [sp, #48]	; 0x30
   1cb2c:	mov	r1, #0
   1cb30:	str	r5, [sp, #48]	; 0x30
   1cb34:	ldr	r9, [sp, #28]
   1cb38:	ldr	ip, [sp, #40]	; 0x28
   1cb3c:	ldr	r3, [sp, #32]
   1cb40:	ldr	r5, [sp, #152]	; 0x98
   1cb44:	b	1cc00 <__assert_fail@plt+0xb9a4>
   1cb48:	cmp	r9, #0
   1cb4c:	bne	1cf24 <__assert_fail@plt+0xbcc8>
   1cb50:	eor	r1, ip, #1
   1cb54:	cmp	r5, #2
   1cb58:	movne	r1, #0
   1cb5c:	andeq	r1, r1, #1
   1cb60:	cmp	r1, #0
   1cb64:	beq	1cb9c <__assert_fail@plt+0xb940>
   1cb68:	cmp	fp, r7
   1cb6c:	movhi	ip, #39	; 0x27
   1cb70:	strbhi	ip, [r3, r7]
   1cb74:	add	ip, r7, #1
   1cb78:	cmp	fp, ip
   1cb7c:	movhi	lr, #36	; 0x24
   1cb80:	strbhi	lr, [r3, ip]
   1cb84:	add	ip, r7, #2
   1cb88:	cmp	fp, ip
   1cb8c:	movhi	lr, #39	; 0x27
   1cb90:	strbhi	lr, [r3, ip]
   1cb94:	add	r7, r7, #3
   1cb98:	mov	ip, r1
   1cb9c:	cmp	fp, r7
   1cba0:	movhi	r1, #92	; 0x5c
   1cba4:	strbhi	r1, [r3, r7]
   1cba8:	add	r1, r7, #1
   1cbac:	cmp	fp, r1
   1cbb0:	lsrhi	lr, r4, #6
   1cbb4:	addhi	lr, lr, #48	; 0x30
   1cbb8:	strbhi	lr, [r3, r1]
   1cbbc:	add	lr, r7, #2
   1cbc0:	cmp	fp, lr
   1cbc4:	lsrhi	r1, r4, #3
   1cbc8:	andhi	r1, r1, #7
   1cbcc:	addhi	r1, r1, #48	; 0x30
   1cbd0:	add	sl, sl, #1
   1cbd4:	strbhi	r1, [r3, lr]
   1cbd8:	and	r4, r4, #7
   1cbdc:	cmp	r2, sl
   1cbe0:	add	r4, r4, #48	; 0x30
   1cbe4:	add	r7, r7, #3
   1cbe8:	bls	1cf48 <__assert_fail@plt+0xbcec>
   1cbec:	mov	r1, r8
   1cbf0:	cmp	fp, r7
   1cbf4:	strbhi	r4, [r3, r7]
   1cbf8:	ldrb	r4, [r0, #1]!
   1cbfc:	add	r7, r7, #1
   1cc00:	cmp	r8, #0
   1cc04:	bne	1cb48 <__assert_fail@plt+0xb8ec>
   1cc08:	cmp	r6, #0
   1cc0c:	bne	1cc5c <__assert_fail@plt+0xba00>
   1cc10:	eor	r6, r1, #1
   1cc14:	and	r6, r6, ip
   1cc18:	add	sl, sl, #1
   1cc1c:	cmp	r2, sl
   1cc20:	uxtb	r6, r6
   1cc24:	bls	1cc84 <__assert_fail@plt+0xba28>
   1cc28:	cmp	r6, #0
   1cc2c:	beq	1cbf0 <__assert_fail@plt+0xb994>
   1cc30:	cmp	fp, r7
   1cc34:	movhi	ip, #39	; 0x27
   1cc38:	strbhi	ip, [r3, r7]
   1cc3c:	add	ip, r7, #1
   1cc40:	cmp	fp, ip
   1cc44:	movhi	lr, #39	; 0x27
   1cc48:	strbhi	lr, [r3, ip]
   1cc4c:	add	r7, r7, #2
   1cc50:	mov	r6, r8
   1cc54:	mov	ip, r8
   1cc58:	b	1cbf0 <__assert_fail@plt+0xb994>
   1cc5c:	cmp	fp, r7
   1cc60:	eor	r6, r1, #1
   1cc64:	movhi	lr, #92	; 0x5c
   1cc68:	and	r6, r6, ip
   1cc6c:	add	sl, sl, #1
   1cc70:	strbhi	lr, [r3, r7]
   1cc74:	cmp	r2, sl
   1cc78:	add	r7, r7, #1
   1cc7c:	uxtb	r6, r6
   1cc80:	bhi	1cc28 <__assert_fail@plt+0xb9cc>
   1cc84:	str	ip, [sp, #40]	; 0x28
   1cc88:	ldr	r5, [sp, #48]	; 0x30
   1cc8c:	b	1c354 <__assert_fail@plt+0xb0f8>
   1cc90:	ldr	r3, [sp, #24]
   1cc94:	cmn	r3, #1
   1cc98:	mov	r3, #0
   1cc9c:	str	r3, [sp, #104]	; 0x68
   1cca0:	str	r3, [sp, #108]	; 0x6c
   1cca4:	beq	1cfc4 <__assert_fail@plt+0xbd68>
   1cca8:	mov	r2, r5
   1ccac:	mov	r3, #0
   1ccb0:	str	r7, [sp, #88]	; 0x58
   1ccb4:	ldr	r7, [sp, #152]	; 0x98
   1ccb8:	str	r5, [sp, #92]	; 0x5c
   1ccbc:	str	r6, [sp, #84]	; 0x54
   1ccc0:	mov	r5, r3
   1ccc4:	mov	r6, r2
   1ccc8:	str	r4, [sp, #80]	; 0x50
   1cccc:	ldr	r3, [sp, #56]	; 0x38
   1ccd0:	add	r9, sl, r5
   1ccd4:	add	r8, r3, r9
   1ccd8:	ldr	r3, [sp, #24]
   1ccdc:	mov	r1, r8
   1cce0:	sub	r2, r3, r9
   1cce4:	add	r0, sp, #100	; 0x64
   1cce8:	add	r3, sp, #104	; 0x68
   1ccec:	bl	1b770 <__assert_fail@plt+0xa514>
   1ccf0:	subs	r4, r0, #0
   1ccf4:	beq	1d09c <__assert_fail@plt+0xbe40>
   1ccf8:	cmn	r4, #1
   1ccfc:	beq	1d07c <__assert_fail@plt+0xbe20>
   1cd00:	cmn	r4, #2
   1cd04:	beq	1d01c <__assert_fail@plt+0xbdc0>
   1cd08:	ldr	r2, [sp, #28]
   1cd0c:	cmp	r7, #2
   1cd10:	movne	r2, #0
   1cd14:	andeq	r2, r2, #1
   1cd18:	cmp	r2, #0
   1cd1c:	beq	1cacc <__assert_fail@plt+0xb870>
   1cd20:	cmp	r4, #1
   1cd24:	beq	1cacc <__assert_fail@plt+0xb870>
   1cd28:	sub	r3, r4, #1
   1cd2c:	add	r9, r3, r9
   1cd30:	ldr	r3, [sp, #56]	; 0x38
   1cd34:	add	r9, r3, r9
   1cd38:	ldrb	r3, [r8, #1]!
   1cd3c:	sub	r3, r3, #91	; 0x5b
   1cd40:	cmp	r3, #33	; 0x21
   1cd44:	ldrls	pc, [pc, r3, lsl #2]
   1cd48:	b	1cac4 <__assert_fail@plt+0xb868>
   1cd4c:	ldrdeq	ip, [r1], -r4
   1cd50:	ldrdeq	ip, [r1], -r4
   1cd54:	andeq	ip, r1, r4, asr #21
   1cd58:	ldrdeq	ip, [r1], -r4
   1cd5c:	andeq	ip, r1, r4, asr #21
   1cd60:	ldrdeq	ip, [r1], -r4
   1cd64:	andeq	ip, r1, r4, asr #21
   1cd68:	andeq	ip, r1, r4, asr #21
   1cd6c:	andeq	ip, r1, r4, asr #21
   1cd70:	andeq	ip, r1, r4, asr #21
   1cd74:	andeq	ip, r1, r4, asr #21
   1cd78:	andeq	ip, r1, r4, asr #21
   1cd7c:	andeq	ip, r1, r4, asr #21
   1cd80:	andeq	ip, r1, r4, asr #21
   1cd84:	andeq	ip, r1, r4, asr #21
   1cd88:	andeq	ip, r1, r4, asr #21
   1cd8c:	andeq	ip, r1, r4, asr #21
   1cd90:	andeq	ip, r1, r4, asr #21
   1cd94:	andeq	ip, r1, r4, asr #21
   1cd98:	andeq	ip, r1, r4, asr #21
   1cd9c:	andeq	ip, r1, r4, asr #21
   1cda0:	andeq	ip, r1, r4, asr #21
   1cda4:	andeq	ip, r1, r4, asr #21
   1cda8:	andeq	ip, r1, r4, asr #21
   1cdac:	andeq	ip, r1, r4, asr #21
   1cdb0:	andeq	ip, r1, r4, asr #21
   1cdb4:	andeq	ip, r1, r4, asr #21
   1cdb8:	andeq	ip, r1, r4, asr #21
   1cdbc:	andeq	ip, r1, r4, asr #21
   1cdc0:	andeq	ip, r1, r4, asr #21
   1cdc4:	andeq	ip, r1, r4, asr #21
   1cdc8:	andeq	ip, r1, r4, asr #21
   1cdcc:	andeq	ip, r1, r4, asr #21
   1cdd0:	ldrdeq	ip, [r1], -r4
   1cdd4:	mov	r3, #2
   1cdd8:	ldr	sl, [sp, #32]
   1cddc:	mov	r8, fp
   1cde0:	str	r3, [sp, #152]	; 0x98
   1cde4:	b	1c55c <__assert_fail@plt+0xb300>
   1cde8:	ldr	r3, [sp, #156]	; 0x9c
   1cdec:	tst	r3, #1
   1cdf0:	bne	1cf1c <__assert_fail@plt+0xbcc0>
   1cdf4:	ldr	r3, [sp, #152]	; 0x98
   1cdf8:	ldr	r4, [sp, #44]	; 0x2c
   1cdfc:	sub	r2, r3, #2
   1ce00:	mov	r5, #0
   1ce04:	clz	r2, r2
   1ce08:	mov	r8, r4
   1ce0c:	lsr	r2, r2, #5
   1ce10:	b	1c31c <__assert_fail@plt+0xb0c0>
   1ce14:	ldr	r3, [sp, #156]	; 0x9c
   1ce18:	ands	r9, r3, #4
   1ce1c:	beq	1cf54 <__assert_fail@plt+0xbcf8>
   1ce20:	ldr	r2, [sp, #24]
   1ce24:	add	r3, sl, #2
   1ce28:	cmp	r3, r2
   1ce2c:	bcs	1ce40 <__assert_fail@plt+0xbbe4>
   1ce30:	ldr	r2, [sp, #48]	; 0x30
   1ce34:	ldrb	r4, [r2, #1]
   1ce38:	cmp	r4, #63	; 0x3f
   1ce3c:	beq	1d0dc <__assert_fail@plt+0xbe80>
   1ce40:	mov	r2, #0
   1ce44:	mov	r8, r2
   1ce48:	mov	r5, r2
   1ce4c:	mov	r4, #63	; 0x3f
   1ce50:	b	1c31c <__assert_fail@plt+0xb0c0>
   1ce54:	ldr	r3, [sp, #28]
   1ce58:	cmp	r3, #0
   1ce5c:	bne	1d180 <__assert_fail@plt+0xbf24>
   1ce60:	mov	r2, r5
   1ce64:	mov	r8, r3
   1ce68:	mov	r5, #0
   1ce6c:	mov	r4, #63	; 0x3f
   1ce70:	b	1c31c <__assert_fail@plt+0xb0c0>
   1ce74:	ldr	r3, [sp, #28]
   1ce78:	cmp	r3, #0
   1ce7c:	bne	1d180 <__assert_fail@plt+0xbf24>
   1ce80:	ldr	r2, [sp, #72]	; 0x48
   1ce84:	adds	r3, fp, #0
   1ce88:	movne	r3, #1
   1ce8c:	cmp	r2, #0
   1ce90:	movne	r3, #0
   1ce94:	cmp	r3, #0
   1ce98:	strne	fp, [sp, #72]	; 0x48
   1ce9c:	movne	fp, #0
   1cea0:	bne	1cedc <__assert_fail@plt+0xbc80>
   1cea4:	cmp	fp, r7
   1cea8:	movhi	r2, #39	; 0x27
   1ceac:	ldrhi	r3, [sp, #32]
   1ceb0:	strbhi	r2, [r3, r7]
   1ceb4:	add	r3, r7, #1
   1ceb8:	cmp	fp, r3
   1cebc:	movhi	r1, #92	; 0x5c
   1cec0:	ldrhi	r2, [sp, #32]
   1cec4:	strbhi	r1, [r2, r3]
   1cec8:	add	r3, r7, #2
   1cecc:	cmp	fp, r3
   1ced0:	movhi	r1, #39	; 0x27
   1ced4:	ldrhi	r2, [sp, #32]
   1ced8:	strbhi	r1, [r2, r3]
   1cedc:	ldr	r3, [sp, #28]
   1cee0:	add	r7, r7, #3
   1cee4:	mov	r2, r5
   1cee8:	mov	r8, r3
   1ceec:	str	r5, [sp, #68]	; 0x44
   1cef0:	str	r3, [sp, #40]	; 0x28
   1cef4:	mov	r4, #39	; 0x27
   1cef8:	b	1c31c <__assert_fail@plt+0xb0c0>
   1cefc:	ldr	r3, [sp, #56]	; 0x38
   1cf00:	ldrb	r3, [r3, #1]
   1cf04:	adds	r3, r3, #0
   1cf08:	movne	r3, #1
   1cf0c:	b	1c2f4 <__assert_fail@plt+0xb098>
   1cf10:	ldr	r5, [sp, #28]
   1cf14:	mov	r4, #48	; 0x30
   1cf18:	b	1c31c <__assert_fail@plt+0xb0c0>
   1cf1c:	add	sl, sl, #1
   1cf20:	b	1be4c <__assert_fail@plt+0xabf0>
   1cf24:	mov	sl, r3
   1cf28:	ldr	r3, [sp, #28]
   1cf2c:	mov	r8, fp
   1cf30:	str	r3, [sp, #44]	; 0x2c
   1cf34:	ldr	r3, [sp, #152]	; 0x98
   1cf38:	sub	r2, r3, #2
   1cf3c:	clz	r2, r2
   1cf40:	lsr	r2, r2, #5
   1cf44:	b	1c55c <__assert_fail@plt+0xb300>
   1cf48:	str	ip, [sp, #40]	; 0x28
   1cf4c:	ldr	r5, [sp, #48]	; 0x30
   1cf50:	b	1c38c <__assert_fail@plt+0xb130>
   1cf54:	mov	r2, r9
   1cf58:	mov	r8, r9
   1cf5c:	mov	r5, #0
   1cf60:	mov	r4, #63	; 0x3f
   1cf64:	b	1c31c <__assert_fail@plt+0xb0c0>
   1cf68:	cmp	fp, #0
   1cf6c:	beq	1cfe4 <__assert_fail@plt+0xbd88>
   1cf70:	ldr	r1, [sp, #32]
   1cf74:	mov	r3, #34	; 0x22
   1cf78:	mov	r2, #1
   1cf7c:	strb	r3, [r1]
   1cf80:	ldr	r3, [pc, #332]	; 1d0d4 <__assert_fail@plt+0xbe78>
   1cf84:	str	r2, [sp, #52]	; 0x34
   1cf88:	mov	r7, r2
   1cf8c:	str	r2, [sp, #44]	; 0x2c
   1cf90:	str	r3, [sp, #64]	; 0x40
   1cf94:	b	1be3c <__assert_fail@plt+0xabe0>
   1cf98:	ldr	r3, [pc, #300]	; 1d0cc <__assert_fail@plt+0xbe70>
   1cf9c:	str	r3, [sp, #64]	; 0x40
   1cfa0:	mov	r3, #0
   1cfa4:	str	r3, [sp, #28]
   1cfa8:	mov	r3, #1
   1cfac:	str	r3, [sp, #52]	; 0x34
   1cfb0:	mov	r7, r3
   1cfb4:	mov	r3, #2
   1cfb8:	str	r3, [sp, #152]	; 0x98
   1cfbc:	b	1be3c <__assert_fail@plt+0xabe0>
   1cfc0:	bl	11250 <abort@plt>
   1cfc4:	ldr	r0, [sp, #56]	; 0x38
   1cfc8:	bl	11160 <strlen@plt>
   1cfcc:	str	r0, [sp, #24]
   1cfd0:	b	1cca8 <__assert_fail@plt+0xba4c>
   1cfd4:	mov	r5, r8
   1cfd8:	mov	r4, #48	; 0x30
   1cfdc:	ldr	r8, [sp, #44]	; 0x2c
   1cfe0:	b	1c31c <__assert_fail@plt+0xb0c0>
   1cfe4:	mov	r3, #1
   1cfe8:	str	r3, [sp, #52]	; 0x34
   1cfec:	mov	r7, r3
   1cff0:	str	r3, [sp, #44]	; 0x2c
   1cff4:	ldr	r3, [pc, #216]	; 1d0d4 <__assert_fail@plt+0xbe78>
   1cff8:	str	r3, [sp, #64]	; 0x40
   1cffc:	b	1be3c <__assert_fail@plt+0xabe0>
   1d000:	ldr	sl, [sp, #32]
   1d004:	mov	r8, fp
   1d008:	mov	r2, r3
   1d00c:	b	1c55c <__assert_fail@plt+0xb300>
   1d010:	mov	r3, r5
   1d014:	mov	r5, r2
   1d018:	b	1c814 <__assert_fail@plt+0xb5b8>
   1d01c:	ldr	r1, [sp, #24]
   1d020:	mov	r2, r5
   1d024:	cmp	r1, r9
   1d028:	mov	ip, r5
   1d02c:	ldr	r4, [sp, #80]	; 0x50
   1d030:	ldr	r5, [sp, #92]	; 0x5c
   1d034:	ldr	r6, [sp, #84]	; 0x54
   1d038:	ldr	r7, [sp, #88]	; 0x58
   1d03c:	bls	1d070 <__assert_fail@plt+0xbe14>
   1d040:	ldrb	r3, [r8]
   1d044:	cmp	r3, #0
   1d048:	bne	1d05c <__assert_fail@plt+0xbe00>
   1d04c:	b	1d074 <__assert_fail@plt+0xbe18>
   1d050:	ldrb	r3, [r8, #1]!
   1d054:	cmp	r3, #0
   1d058:	beq	1d174 <__assert_fail@plt+0xbf18>
   1d05c:	add	r2, r2, #1
   1d060:	add	r3, sl, r2
   1d064:	cmp	r1, r3
   1d068:	bhi	1d050 <__assert_fail@plt+0xbdf4>
   1d06c:	mov	ip, r2
   1d070:	mov	r3, #0
   1d074:	mov	r2, r3
   1d078:	b	1cb0c <__assert_fail@plt+0xb8b0>
   1d07c:	mov	r3, #0
   1d080:	mov	ip, r5
   1d084:	ldr	r4, [sp, #80]	; 0x50
   1d088:	ldr	r5, [sp, #92]	; 0x5c
   1d08c:	ldr	r6, [sp, #84]	; 0x54
   1d090:	ldr	r7, [sp, #88]	; 0x58
   1d094:	mov	r2, r3
   1d098:	b	1cb0c <__assert_fail@plt+0xb8b0>
   1d09c:	mov	r3, r6
   1d0a0:	mov	ip, r5
   1d0a4:	eor	r5, r3, #1
   1d0a8:	mov	r2, r6
   1d0ac:	ldr	r4, [sp, #80]	; 0x50
   1d0b0:	ldr	r6, [sp, #84]	; 0x54
   1d0b4:	ldr	r7, [sp, #88]	; 0x58
   1d0b8:	uxtb	r5, r5
   1d0bc:	b	1cb0c <__assert_fail@plt+0xb8b0>
   1d0c0:	ldr	sl, [sp, #32]
   1d0c4:	mov	r8, fp
   1d0c8:	b	1cf30 <__assert_fail@plt+0xbcd4>
   1d0cc:	andeq	sp, r2, r4, asr #24
   1d0d0:	andeq	sp, r2, r8, asr #24
   1d0d4:	andeq	sp, r2, r0, asr #24
   1d0d8:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1d0dc:	ldr	r2, [sp, #56]	; 0x38
   1d0e0:	ldrb	r1, [r2, r3]
   1d0e4:	sub	r2, r1, #33	; 0x21
   1d0e8:	uxtb	r2, r2
   1d0ec:	cmp	r2, #29
   1d0f0:	bhi	1d190 <__assert_fail@plt+0xbf34>
   1d0f4:	ldr	r0, [pc, #-36]	; 1d0d8 <__assert_fail@plt+0xbe7c>
   1d0f8:	mov	ip, #1
   1d0fc:	ands	r2, r0, ip, lsl r2
   1d100:	beq	1d1a0 <__assert_fail@plt+0xbf44>
   1d104:	ldr	r2, [sp, #28]
   1d108:	cmp	r2, #0
   1d10c:	bne	1d2a0 <__assert_fail@plt+0xc044>
   1d110:	cmp	fp, r7
   1d114:	ldr	r8, [sp, #28]
   1d118:	ldrhi	r2, [sp, #32]
   1d11c:	mov	sl, r3
   1d120:	mov	r5, r8
   1d124:	strbhi	r4, [r2, r7]
   1d128:	add	r2, r7, #1
   1d12c:	cmp	fp, r2
   1d130:	movhi	r0, #34	; 0x22
   1d134:	ldrhi	ip, [sp, #32]
   1d138:	mov	r4, r1
   1d13c:	strbhi	r0, [ip, r2]
   1d140:	add	r2, r7, #2
   1d144:	cmp	fp, r2
   1d148:	movhi	r0, #34	; 0x22
   1d14c:	ldrhi	ip, [sp, #32]
   1d150:	strbhi	r0, [ip, r2]
   1d154:	add	r2, r7, #3
   1d158:	cmp	fp, r2
   1d15c:	movhi	r0, #63	; 0x3f
   1d160:	ldrhi	ip, [sp, #32]
   1d164:	add	r7, r7, #4
   1d168:	strbhi	r0, [ip, r2]
   1d16c:	mov	r2, r8
   1d170:	b	1c31c <__assert_fail@plt+0xb0c0>
   1d174:	mov	ip, r2
   1d178:	mov	r2, r3
   1d17c:	b	1cb0c <__assert_fail@plt+0xb8b0>
   1d180:	ldr	sl, [sp, #32]
   1d184:	mov	r8, fp
   1d188:	ldr	r2, [sp, #28]
   1d18c:	b	1c55c <__assert_fail@plt+0xb300>
   1d190:	mov	r2, #0
   1d194:	mov	r8, r2
   1d198:	mov	r5, r2
   1d19c:	b	1c31c <__assert_fail@plt+0xb0c0>
   1d1a0:	mov	r8, r2
   1d1a4:	mov	r5, #0
   1d1a8:	b	1c31c <__assert_fail@plt+0xb0c0>
   1d1ac:	ldr	r1, [sp, #152]	; 0x98
   1d1b0:	bl	1bc78 <__assert_fail@plt+0xaa1c>
   1d1b4:	str	r0, [sp, #168]	; 0xa8
   1d1b8:	b	1c1d8 <__assert_fail@plt+0xaf7c>
   1d1bc:	ldr	r1, [sp, #152]	; 0x98
   1d1c0:	bl	1bc78 <__assert_fail@plt+0xaa1c>
   1d1c4:	str	r0, [sp, #164]	; 0xa4
   1d1c8:	b	1c1b8 <__assert_fail@plt+0xaf5c>
   1d1cc:	ldr	r7, [sp, #28]
   1d1d0:	b	1c218 <__assert_fail@plt+0xafbc>
   1d1d4:	ldr	sl, [sp, #32]
   1d1d8:	ldr	r2, [sp, #68]	; 0x44
   1d1dc:	mov	r8, fp
   1d1e0:	mov	fp, r7
   1d1e4:	ldr	r3, [sp, #64]	; 0x40
   1d1e8:	cmp	r3, #0
   1d1ec:	moveq	r2, #0
   1d1f0:	andne	r2, r2, #1
   1d1f4:	cmp	r2, #0
   1d1f8:	beq	1d224 <__assert_fail@plt+0xbfc8>
   1d1fc:	mov	r2, r3
   1d200:	ldrb	r3, [r3]
   1d204:	cmp	r3, #0
   1d208:	beq	1d224 <__assert_fail@plt+0xbfc8>
   1d20c:	cmp	r8, fp
   1d210:	strbhi	r3, [sl, fp]
   1d214:	ldrb	r3, [r2, #1]!
   1d218:	add	fp, fp, #1
   1d21c:	cmp	r3, #0
   1d220:	bne	1d20c <__assert_fail@plt+0xbfb0>
   1d224:	cmp	r8, fp
   1d228:	movhi	r3, #0
   1d22c:	strbhi	r3, [sl, fp]
   1d230:	b	1c5b8 <__assert_fail@plt+0xb35c>
   1d234:	ldr	r3, [sp, #168]	; 0xa8
   1d238:	ldr	sl, [sp, #32]
   1d23c:	str	r3, [sp, #16]
   1d240:	ldr	r3, [sp, #164]	; 0xa4
   1d244:	mov	ip, #5
   1d248:	str	r3, [sp, #12]
   1d24c:	ldr	r3, [sp, #160]	; 0xa0
   1d250:	ldr	r2, [sp, #56]	; 0x38
   1d254:	str	r3, [sp, #8]
   1d258:	ldr	r3, [sp, #156]	; 0x9c
   1d25c:	ldr	r1, [sp, #72]	; 0x48
   1d260:	str	r3, [sp, #4]
   1d264:	mov	r0, sl
   1d268:	ldr	r3, [sp, #24]
   1d26c:	str	ip, [sp]
   1d270:	bl	1bd98 <__assert_fail@plt+0xab3c>
   1d274:	mov	fp, r0
   1d278:	b	1c5b8 <__assert_fail@plt+0xb35c>
   1d27c:	mov	r8, fp
   1d280:	ldr	sl, [sp, #32]
   1d284:	mov	fp, r7
   1d288:	mov	r2, r3
   1d28c:	b	1d1e4 <__assert_fail@plt+0xbf88>
   1d290:	mov	r8, fp
   1d294:	ldr	sl, [sp, #32]
   1d298:	mov	fp, r7
   1d29c:	b	1d1e4 <__assert_fail@plt+0xbf88>
   1d2a0:	ldr	sl, [sp, #32]
   1d2a4:	mov	r8, fp
   1d2a8:	b	1c574 <__assert_fail@plt+0xb318>
   1d2ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2b0:	sub	sp, sp, #52	; 0x34
   1d2b4:	mov	r4, r0
   1d2b8:	mov	r5, r3
   1d2bc:	mov	sl, r1
   1d2c0:	mov	fp, r2
   1d2c4:	bl	11178 <__errno_location@plt>
   1d2c8:	ldr	r7, [pc, #412]	; 1d46c <__assert_fail@plt+0xc210>
   1d2cc:	cmn	r4, #-2147483647	; 0x80000001
   1d2d0:	ldr	r6, [r7]
   1d2d4:	mov	r8, r0
   1d2d8:	movne	r0, #0
   1d2dc:	moveq	r0, #1
   1d2e0:	ldr	r3, [r8]
   1d2e4:	orrs	r0, r0, r4, lsr #31
   1d2e8:	str	r3, [sp, #24]
   1d2ec:	bne	1d468 <__assert_fail@plt+0xc20c>
   1d2f0:	ldr	r2, [r7, #4]
   1d2f4:	cmp	r4, r2
   1d2f8:	blt	1d358 <__assert_fail@plt+0xc0fc>
   1d2fc:	add	r9, r7, #8
   1d300:	cmp	r6, r9
   1d304:	str	r2, [sp, #44]	; 0x2c
   1d308:	beq	1d438 <__assert_fail@plt+0xc1dc>
   1d30c:	mov	r3, #8
   1d310:	sub	r2, r4, r2
   1d314:	mov	r0, r6
   1d318:	str	r3, [sp]
   1d31c:	add	r2, r2, #1
   1d320:	mvn	r3, #-2147483648	; 0x80000000
   1d324:	add	r1, sp, #44	; 0x2c
   1d328:	bl	2b890 <__assert_fail@plt+0x1a634>
   1d32c:	mov	r6, r0
   1d330:	str	r0, [r7]
   1d334:	ldr	r0, [r7, #4]
   1d338:	ldr	r2, [sp, #44]	; 0x2c
   1d33c:	mov	r1, #0
   1d340:	sub	r2, r2, r0
   1d344:	add	r0, r6, r0, lsl #3
   1d348:	lsl	r2, r2, #3
   1d34c:	bl	1119c <memset@plt>
   1d350:	ldr	r3, [sp, #44]	; 0x2c
   1d354:	str	r3, [r7, #4]
   1d358:	add	r3, r6, r4, lsl #3
   1d35c:	ldr	r1, [r5, #4]
   1d360:	ldr	r7, [r3, #4]
   1d364:	ldr	r9, [r6, r4, lsl #3]
   1d368:	ldr	r2, [r5, #40]	; 0x28
   1d36c:	ldr	ip, [r5, #44]	; 0x2c
   1d370:	add	r0, r5, #8
   1d374:	str	r3, [sp, #28]
   1d378:	ldr	r3, [r5]
   1d37c:	orr	r1, r1, #1
   1d380:	mov	lr, r0
   1d384:	str	r1, [sp, #32]
   1d388:	str	r0, [sp, #36]	; 0x24
   1d38c:	str	r1, [sp, #4]
   1d390:	str	r2, [sp, #12]
   1d394:	str	r3, [sp]
   1d398:	mov	r0, r7
   1d39c:	mov	r1, r9
   1d3a0:	str	ip, [sp, #16]
   1d3a4:	str	lr, [sp, #8]
   1d3a8:	mov	r3, fp
   1d3ac:	mov	r2, sl
   1d3b0:	bl	1bd98 <__assert_fail@plt+0xab3c>
   1d3b4:	cmp	r9, r0
   1d3b8:	bhi	1d424 <__assert_fail@plt+0xc1c8>
   1d3bc:	ldr	r3, [pc, #172]	; 1d470 <__assert_fail@plt+0xc214>
   1d3c0:	add	r9, r0, #1
   1d3c4:	cmp	r7, r3
   1d3c8:	str	r9, [r6, r4, lsl #3]
   1d3cc:	beq	1d3d8 <__assert_fail@plt+0xc17c>
   1d3d0:	mov	r0, r7
   1d3d4:	bl	13098 <__assert_fail@plt+0x1e3c>
   1d3d8:	mov	r0, r9
   1d3dc:	bl	2b72c <__assert_fail@plt+0x1a4d0>
   1d3e0:	ldr	lr, [sp, #28]
   1d3e4:	ldr	ip, [r5, #44]	; 0x2c
   1d3e8:	ldr	r4, [r5, #40]	; 0x28
   1d3ec:	mov	r3, fp
   1d3f0:	mov	r2, sl
   1d3f4:	mov	r1, r9
   1d3f8:	str	r0, [lr, #4]
   1d3fc:	ldr	lr, [r5]
   1d400:	ldr	r5, [sp, #36]	; 0x24
   1d404:	str	ip, [sp, #16]
   1d408:	str	r5, [sp, #8]
   1d40c:	ldr	r5, [sp, #32]
   1d410:	str	r4, [sp, #12]
   1d414:	str	r5, [sp, #4]
   1d418:	str	lr, [sp]
   1d41c:	mov	r7, r0
   1d420:	bl	1bd98 <__assert_fail@plt+0xab3c>
   1d424:	ldr	r3, [sp, #24]
   1d428:	mov	r0, r7
   1d42c:	str	r3, [r8]
   1d430:	add	sp, sp, #52	; 0x34
   1d434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d438:	mov	r3, #8
   1d43c:	sub	r2, r4, r2
   1d440:	str	r3, [sp]
   1d444:	add	r1, sp, #44	; 0x2c
   1d448:	add	r2, r2, #1
   1d44c:	mvn	r3, #-2147483648	; 0x80000000
   1d450:	bl	2b890 <__assert_fail@plt+0x1a634>
   1d454:	mov	r6, r0
   1d458:	ldm	r9, {r0, r1}
   1d45c:	str	r6, [r7]
   1d460:	stm	r6, {r0, r1}
   1d464:	b	1d334 <__assert_fail@plt+0xc0d8>
   1d468:	bl	11250 <abort@plt>
   1d46c:	andeq	pc, r3, r4, lsr r1	; <UNPREDICTABLE>
   1d470:	andeq	pc, r3, r8, lsr #3
   1d474:	push	{r4, r5, r6, lr}
   1d478:	mov	r5, r0
   1d47c:	bl	11178 <__errno_location@plt>
   1d480:	cmp	r5, #0
   1d484:	mov	r1, #48	; 0x30
   1d488:	mov	r4, r0
   1d48c:	ldr	r0, [pc, #16]	; 1d4a4 <__assert_fail@plt+0xc248>
   1d490:	ldr	r6, [r4]
   1d494:	movne	r0, r5
   1d498:	bl	2bb8c <__assert_fail@plt+0x1a930>
   1d49c:	str	r6, [r4]
   1d4a0:	pop	{r4, r5, r6, pc}
   1d4a4:	andeq	pc, r3, r8, lsr #5
   1d4a8:	ldr	r3, [pc, #12]	; 1d4bc <__assert_fail@plt+0xc260>
   1d4ac:	cmp	r0, #0
   1d4b0:	moveq	r0, r3
   1d4b4:	ldr	r0, [r0]
   1d4b8:	bx	lr
   1d4bc:	andeq	pc, r3, r8, lsr #5
   1d4c0:	ldr	r3, [pc, #12]	; 1d4d4 <__assert_fail@plt+0xc278>
   1d4c4:	cmp	r0, #0
   1d4c8:	moveq	r0, r3
   1d4cc:	str	r1, [r0]
   1d4d0:	bx	lr
   1d4d4:	andeq	pc, r3, r8, lsr #5
   1d4d8:	ldr	r3, [pc, #52]	; 1d514 <__assert_fail@plt+0xc2b8>
   1d4dc:	cmp	r0, #0
   1d4e0:	moveq	r0, r3
   1d4e4:	add	r3, r0, #8
   1d4e8:	push	{lr}		; (str lr, [sp, #-4]!)
   1d4ec:	lsr	lr, r1, #5
   1d4f0:	and	r1, r1, #31
   1d4f4:	ldr	ip, [r3, lr, lsl #2]
   1d4f8:	lsr	r0, ip, r1
   1d4fc:	eor	r2, r2, r0
   1d500:	and	r2, r2, #1
   1d504:	and	r0, r0, #1
   1d508:	eor	r1, ip, r2, lsl r1
   1d50c:	str	r1, [r3, lr, lsl #2]
   1d510:	pop	{pc}		; (ldr pc, [sp], #4)
   1d514:	andeq	pc, r3, r8, lsr #5
   1d518:	ldr	r3, [pc, #16]	; 1d530 <__assert_fail@plt+0xc2d4>
   1d51c:	cmp	r0, #0
   1d520:	movne	r3, r0
   1d524:	ldr	r0, [r3, #4]
   1d528:	str	r1, [r3, #4]
   1d52c:	bx	lr
   1d530:	andeq	pc, r3, r8, lsr #5
   1d534:	ldr	r3, [pc, #44]	; 1d568 <__assert_fail@plt+0xc30c>
   1d538:	cmp	r0, #0
   1d53c:	moveq	r0, r3
   1d540:	mov	ip, #10
   1d544:	cmp	r2, #0
   1d548:	cmpne	r1, #0
   1d54c:	str	ip, [r0]
   1d550:	beq	1d560 <__assert_fail@plt+0xc304>
   1d554:	str	r1, [r0, #40]	; 0x28
   1d558:	str	r2, [r0, #44]	; 0x2c
   1d55c:	bx	lr
   1d560:	push	{r4, lr}
   1d564:	bl	11250 <abort@plt>
   1d568:	andeq	pc, r3, r8, lsr #5
   1d56c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d570:	sub	sp, sp, #24
   1d574:	ldr	ip, [pc, #108]	; 1d5e8 <__assert_fail@plt+0xc38c>
   1d578:	ldr	r4, [sp, #56]	; 0x38
   1d57c:	mov	r9, r2
   1d580:	cmp	r4, #0
   1d584:	moveq	r4, ip
   1d588:	mov	sl, r3
   1d58c:	mov	r7, r0
   1d590:	mov	r8, r1
   1d594:	bl	11178 <__errno_location@plt>
   1d598:	ldr	r3, [r4, #44]	; 0x2c
   1d59c:	mov	r1, r8
   1d5a0:	ldr	r6, [r0]
   1d5a4:	str	r3, [sp, #16]
   1d5a8:	ldr	r2, [r4, #40]	; 0x28
   1d5ac:	add	r3, r4, #8
   1d5b0:	str	r3, [sp, #8]
   1d5b4:	str	r2, [sp, #12]
   1d5b8:	ldr	r2, [r4, #4]
   1d5bc:	mov	r5, r0
   1d5c0:	str	r2, [sp, #4]
   1d5c4:	ldr	ip, [r4]
   1d5c8:	mov	r3, sl
   1d5cc:	mov	r2, r9
   1d5d0:	mov	r0, r7
   1d5d4:	str	ip, [sp]
   1d5d8:	bl	1bd98 <__assert_fail@plt+0xab3c>
   1d5dc:	str	r6, [r5]
   1d5e0:	add	sp, sp, #24
   1d5e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d5e8:	andeq	pc, r3, r8, lsr #5
   1d5ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5f0:	cmp	r3, #0
   1d5f4:	sub	sp, sp, #44	; 0x2c
   1d5f8:	ldr	r4, [pc, #192]	; 1d6c0 <__assert_fail@plt+0xc464>
   1d5fc:	mov	r6, r2
   1d600:	movne	r4, r3
   1d604:	mov	r9, r1
   1d608:	mov	r8, r0
   1d60c:	bl	11178 <__errno_location@plt>
   1d610:	ldr	r3, [r4, #44]	; 0x2c
   1d614:	ldr	r5, [r4, #4]
   1d618:	add	sl, r4, #8
   1d61c:	cmp	r6, #0
   1d620:	orreq	r5, r5, #1
   1d624:	mov	r1, #0
   1d628:	ldr	r2, [r0]
   1d62c:	str	r3, [sp, #16]
   1d630:	ldr	r3, [r4, #40]	; 0x28
   1d634:	stmib	sp, {r5, sl}
   1d638:	str	r3, [sp, #12]
   1d63c:	ldr	r3, [r4]
   1d640:	mov	r7, r0
   1d644:	str	r2, [sp, #28]
   1d648:	str	r3, [sp]
   1d64c:	mov	r2, r8
   1d650:	mov	r3, r9
   1d654:	mov	r0, r1
   1d658:	bl	1bd98 <__assert_fail@plt+0xab3c>
   1d65c:	add	r1, r0, #1
   1d660:	mov	fp, r0
   1d664:	mov	r0, r1
   1d668:	str	r1, [sp, #36]	; 0x24
   1d66c:	bl	2b72c <__assert_fail@plt+0x1a4d0>
   1d670:	ldr	r3, [r4, #44]	; 0x2c
   1d674:	mov	r2, r8
   1d678:	str	r3, [sp, #16]
   1d67c:	ldr	r3, [r4, #40]	; 0x28
   1d680:	str	r5, [sp, #4]
   1d684:	str	r3, [sp, #12]
   1d688:	str	sl, [sp, #8]
   1d68c:	ldr	ip, [r4]
   1d690:	ldr	r1, [sp, #36]	; 0x24
   1d694:	mov	r3, r9
   1d698:	str	ip, [sp]
   1d69c:	str	r0, [sp, #32]
   1d6a0:	bl	1bd98 <__assert_fail@plt+0xab3c>
   1d6a4:	ldr	r2, [sp, #28]
   1d6a8:	cmp	r6, #0
   1d6ac:	str	r2, [r7]
   1d6b0:	ldr	r0, [sp, #32]
   1d6b4:	strne	fp, [r6]
   1d6b8:	add	sp, sp, #44	; 0x2c
   1d6bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d6c0:	andeq	pc, r3, r8, lsr #5
   1d6c4:	mov	r3, r2
   1d6c8:	mov	r2, #0
   1d6cc:	b	1d5ec <__assert_fail@plt+0xc390>
   1d6d0:	push	{r4, r5, r6, r7, r8, lr}
   1d6d4:	ldr	r6, [pc, #116]	; 1d750 <__assert_fail@plt+0xc4f4>
   1d6d8:	ldr	r3, [r6, #4]
   1d6dc:	ldr	r7, [r6]
   1d6e0:	cmp	r3, #1
   1d6e4:	movgt	r5, r7
   1d6e8:	movgt	r4, #1
   1d6ec:	ble	1d70c <__assert_fail@plt+0xc4b0>
   1d6f0:	ldr	r0, [r5, #12]
   1d6f4:	bl	13098 <__assert_fail@plt+0x1e3c>
   1d6f8:	ldr	r3, [r6, #4]
   1d6fc:	add	r4, r4, #1
   1d700:	cmp	r3, r4
   1d704:	add	r5, r5, #8
   1d708:	bgt	1d6f0 <__assert_fail@plt+0xc494>
   1d70c:	ldr	r0, [r7, #4]
   1d710:	ldr	r4, [pc, #60]	; 1d754 <__assert_fail@plt+0xc4f8>
   1d714:	cmp	r0, r4
   1d718:	beq	1d72c <__assert_fail@plt+0xc4d0>
   1d71c:	bl	13098 <__assert_fail@plt+0x1e3c>
   1d720:	mov	r3, #256	; 0x100
   1d724:	str	r4, [r6, #12]
   1d728:	str	r3, [r6, #8]
   1d72c:	ldr	r4, [pc, #36]	; 1d758 <__assert_fail@plt+0xc4fc>
   1d730:	cmp	r7, r4
   1d734:	beq	1d744 <__assert_fail@plt+0xc4e8>
   1d738:	mov	r0, r7
   1d73c:	bl	13098 <__assert_fail@plt+0x1e3c>
   1d740:	str	r4, [r6]
   1d744:	mov	r3, #1
   1d748:	str	r3, [r6, #4]
   1d74c:	pop	{r4, r5, r6, r7, r8, pc}
   1d750:	andeq	pc, r3, r4, lsr r1	; <UNPREDICTABLE>
   1d754:	andeq	pc, r3, r8, lsr #3
   1d758:	andeq	pc, r3, ip, lsr r1	; <UNPREDICTABLE>
   1d75c:	ldr	r3, [pc, #4]	; 1d768 <__assert_fail@plt+0xc50c>
   1d760:	mvn	r2, #0
   1d764:	b	1d2ac <__assert_fail@plt+0xc050>
   1d768:	andeq	pc, r3, r8, lsr #5
   1d76c:	ldr	r3, [pc]	; 1d774 <__assert_fail@plt+0xc518>
   1d770:	b	1d2ac <__assert_fail@plt+0xc050>
   1d774:	andeq	pc, r3, r8, lsr #5
   1d778:	mov	r1, r0
   1d77c:	ldr	r3, [pc, #8]	; 1d78c <__assert_fail@plt+0xc530>
   1d780:	mvn	r2, #0
   1d784:	mov	r0, #0
   1d788:	b	1d2ac <__assert_fail@plt+0xc050>
   1d78c:	andeq	pc, r3, r8, lsr #5
   1d790:	mov	r2, r1
   1d794:	ldr	r3, [pc, #8]	; 1d7a4 <__assert_fail@plt+0xc548>
   1d798:	mov	r1, r0
   1d79c:	mov	r0, #0
   1d7a0:	b	1d2ac <__assert_fail@plt+0xc050>
   1d7a4:	andeq	pc, r3, r8, lsr #5
   1d7a8:	push	{r4, r5, lr}
   1d7ac:	sub	sp, sp, #52	; 0x34
   1d7b0:	mov	r5, r2
   1d7b4:	mov	r4, r0
   1d7b8:	mov	r0, sp
   1d7bc:	bl	1bc48 <__assert_fail@plt+0xa9ec>
   1d7c0:	mov	r3, sp
   1d7c4:	mov	r1, r5
   1d7c8:	mov	r0, r4
   1d7cc:	mvn	r2, #0
   1d7d0:	bl	1d2ac <__assert_fail@plt+0xc050>
   1d7d4:	add	sp, sp, #52	; 0x34
   1d7d8:	pop	{r4, r5, pc}
   1d7dc:	push	{r4, r5, r6, lr}
   1d7e0:	sub	sp, sp, #48	; 0x30
   1d7e4:	mov	r5, r2
   1d7e8:	mov	r6, r3
   1d7ec:	mov	r4, r0
   1d7f0:	mov	r0, sp
   1d7f4:	bl	1bc48 <__assert_fail@plt+0xa9ec>
   1d7f8:	mov	r3, sp
   1d7fc:	mov	r2, r6
   1d800:	mov	r1, r5
   1d804:	mov	r0, r4
   1d808:	bl	1d2ac <__assert_fail@plt+0xc050>
   1d80c:	add	sp, sp, #48	; 0x30
   1d810:	pop	{r4, r5, r6, pc}
   1d814:	mov	r2, r1
   1d818:	mov	r1, r0
   1d81c:	mov	r0, #0
   1d820:	b	1d7a8 <__assert_fail@plt+0xc54c>
   1d824:	mov	r3, r2
   1d828:	mov	r2, r1
   1d82c:	mov	r1, r0
   1d830:	mov	r0, #0
   1d834:	b	1d7dc <__assert_fail@plt+0xc580>
   1d838:	push	{r4, r5, r6, r7, r8, lr}
   1d83c:	mov	r7, r0
   1d840:	ldr	lr, [pc, #100]	; 1d8ac <__assert_fail@plt+0xc650>
   1d844:	mov	r8, r1
   1d848:	mov	r4, r2
   1d84c:	ldm	lr!, {r0, r1, r2, r3}
   1d850:	sub	sp, sp, #48	; 0x30
   1d854:	mov	ip, sp
   1d858:	lsr	r5, r4, #5
   1d85c:	stmia	ip!, {r0, r1, r2, r3}
   1d860:	add	r6, sp, #8
   1d864:	ldm	lr!, {r0, r1, r2, r3}
   1d868:	and	r4, r4, #31
   1d86c:	stmia	ip!, {r0, r1, r2, r3}
   1d870:	ldm	lr, {r0, r1, r2, r3}
   1d874:	stm	ip, {r0, r1, r2, r3}
   1d878:	mov	r2, r8
   1d87c:	ldr	lr, [r6, r5, lsl #2]
   1d880:	mov	r1, r7
   1d884:	mov	r3, sp
   1d888:	lsr	ip, lr, r4
   1d88c:	eor	ip, ip, #1
   1d890:	and	ip, ip, #1
   1d894:	mov	r0, #0
   1d898:	eor	r4, lr, ip, lsl r4
   1d89c:	str	r4, [r6, r5, lsl #2]
   1d8a0:	bl	1d2ac <__assert_fail@plt+0xc050>
   1d8a4:	add	sp, sp, #48	; 0x30
   1d8a8:	pop	{r4, r5, r6, r7, r8, pc}
   1d8ac:	andeq	pc, r3, r8, lsr #5
   1d8b0:	mov	r2, r1
   1d8b4:	mvn	r1, #0
   1d8b8:	b	1d838 <__assert_fail@plt+0xc5dc>
   1d8bc:	mov	r2, #58	; 0x3a
   1d8c0:	mvn	r1, #0
   1d8c4:	b	1d838 <__assert_fail@plt+0xc5dc>
   1d8c8:	mov	r2, #58	; 0x3a
   1d8cc:	b	1d838 <__assert_fail@plt+0xc5dc>
   1d8d0:	push	{r4, r5, r6, r7, lr}
   1d8d4:	sub	sp, sp, #100	; 0x64
   1d8d8:	mov	r6, r0
   1d8dc:	mov	r0, sp
   1d8e0:	mov	r7, r2
   1d8e4:	bl	1bc48 <__assert_fail@plt+0xa9ec>
   1d8e8:	mov	ip, sp
   1d8ec:	add	lr, sp, #48	; 0x30
   1d8f0:	ldm	ip!, {r0, r1, r2, r3}
   1d8f4:	stmia	lr!, {r0, r1, r2, r3}
   1d8f8:	ldm	ip!, {r0, r1, r2, r3}
   1d8fc:	ldr	r5, [sp, #60]	; 0x3c
   1d900:	stmia	lr!, {r0, r1, r2, r3}
   1d904:	mvn	r4, r5
   1d908:	ldm	ip, {r0, r1, r2, r3}
   1d90c:	and	ip, r4, #67108864	; 0x4000000
   1d910:	eor	ip, ip, r5
   1d914:	str	ip, [sp, #60]	; 0x3c
   1d918:	stm	lr, {r0, r1, r2, r3}
   1d91c:	mov	r1, r7
   1d920:	mov	r0, r6
   1d924:	add	r3, sp, #48	; 0x30
   1d928:	mvn	r2, #0
   1d92c:	bl	1d2ac <__assert_fail@plt+0xc050>
   1d930:	add	sp, sp, #100	; 0x64
   1d934:	pop	{r4, r5, r6, r7, pc}
   1d938:	push	{r4, r5, r6, r7, r8, lr}
   1d93c:	mov	r5, r1
   1d940:	ldr	lr, [pc, #100]	; 1d9ac <__assert_fail@plt+0xc750>
   1d944:	mov	r4, r2
   1d948:	mov	r7, r0
   1d94c:	mov	r8, r3
   1d950:	ldm	lr!, {r0, r1, r2, r3}
   1d954:	sub	sp, sp, #48	; 0x30
   1d958:	mov	ip, sp
   1d95c:	mov	r6, #10
   1d960:	stmia	ip!, {r0, r1, r2, r3}
   1d964:	cmp	r4, #0
   1d968:	cmpne	r5, #0
   1d96c:	ldm	lr!, {r0, r1, r2, r3}
   1d970:	str	r6, [sp]
   1d974:	stmia	ip!, {r0, r1, r2, r3}
   1d978:	ldm	lr, {r0, r1, r2, r3}
   1d97c:	stm	ip, {r0, r1, r2, r3}
   1d980:	beq	1d9a8 <__assert_fail@plt+0xc74c>
   1d984:	mov	r3, sp
   1d988:	mov	r1, r8
   1d98c:	mov	r0, r7
   1d990:	ldr	r2, [sp, #72]	; 0x48
   1d994:	str	r5, [sp, #40]	; 0x28
   1d998:	str	r4, [sp, #44]	; 0x2c
   1d99c:	bl	1d2ac <__assert_fail@plt+0xc050>
   1d9a0:	add	sp, sp, #48	; 0x30
   1d9a4:	pop	{r4, r5, r6, r7, r8, pc}
   1d9a8:	bl	11250 <abort@plt>
   1d9ac:	andeq	pc, r3, r8, lsr #5
   1d9b0:	push	{lr}		; (str lr, [sp, #-4]!)
   1d9b4:	sub	sp, sp, #12
   1d9b8:	mvn	ip, #0
   1d9bc:	str	ip, [sp]
   1d9c0:	bl	1d938 <__assert_fail@plt+0xc6dc>
   1d9c4:	add	sp, sp, #12
   1d9c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d9cc:	push	{lr}		; (str lr, [sp, #-4]!)
   1d9d0:	sub	sp, sp, #12
   1d9d4:	mvn	ip, #0
   1d9d8:	mov	r3, r2
   1d9dc:	str	ip, [sp]
   1d9e0:	mov	r2, r1
   1d9e4:	mov	r1, r0
   1d9e8:	mov	r0, #0
   1d9ec:	bl	1d938 <__assert_fail@plt+0xc6dc>
   1d9f0:	add	sp, sp, #12
   1d9f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d9f8:	push	{lr}		; (str lr, [sp, #-4]!)
   1d9fc:	sub	sp, sp, #12
   1da00:	str	r3, [sp]
   1da04:	mov	r3, r2
   1da08:	mov	r2, r1
   1da0c:	mov	r1, r0
   1da10:	mov	r0, #0
   1da14:	bl	1d938 <__assert_fail@plt+0xc6dc>
   1da18:	add	sp, sp, #12
   1da1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1da20:	ldr	r3, [pc]	; 1da28 <__assert_fail@plt+0xc7cc>
   1da24:	b	1d2ac <__assert_fail@plt+0xc050>
   1da28:	andeq	pc, r3, r4, asr #2
   1da2c:	mov	r2, r1
   1da30:	ldr	r3, [pc, #8]	; 1da40 <__assert_fail@plt+0xc7e4>
   1da34:	mov	r1, r0
   1da38:	mov	r0, #0
   1da3c:	b	1d2ac <__assert_fail@plt+0xc050>
   1da40:	andeq	pc, r3, r4, asr #2
   1da44:	ldr	r3, [pc, #4]	; 1da50 <__assert_fail@plt+0xc7f4>
   1da48:	mvn	r2, #0
   1da4c:	b	1d2ac <__assert_fail@plt+0xc050>
   1da50:	andeq	pc, r3, r4, asr #2
   1da54:	mov	r1, r0
   1da58:	ldr	r3, [pc, #8]	; 1da68 <__assert_fail@plt+0xc80c>
   1da5c:	mvn	r2, #0
   1da60:	mov	r0, #0
   1da64:	b	1d2ac <__assert_fail@plt+0xc050>
   1da68:	andeq	pc, r3, r4, asr #2
   1da6c:	mov	ip, r0
   1da70:	ldr	r3, [r1, #40]	; 0x28
   1da74:	ldr	r0, [r1, #56]	; 0x38
   1da78:	cmp	r0, r3
   1da7c:	ble	1daf0 <__assert_fail@plt+0xc894>
   1da80:	push	{r4, lr}
   1da84:	ldr	lr, [r1, #4]
   1da88:	ldrb	r0, [lr, r3]
   1da8c:	strb	r0, [ip]
   1da90:	ldr	r4, [r1, #80]	; 0x50
   1da94:	cmp	r4, #1
   1da98:	ble	1dab8 <__assert_fail@plt+0xc85c>
   1da9c:	ldr	r4, [r1, #28]
   1daa0:	cmp	r3, r4
   1daa4:	beq	1dab8 <__assert_fail@plt+0xc85c>
   1daa8:	ldr	r4, [r1, #8]
   1daac:	ldr	r4, [r4, r3, lsl #2]
   1dab0:	cmn	r4, #1
   1dab4:	beq	1db38 <__assert_fail@plt+0xc8dc>
   1dab8:	cmp	r0, #92	; 0x5c
   1dabc:	beq	1db00 <__assert_fail@plt+0xc8a4>
   1dac0:	cmp	r0, #91	; 0x5b
   1dac4:	beq	1db44 <__assert_fail@plt+0xc8e8>
   1dac8:	cmp	r0, #93	; 0x5d
   1dacc:	beq	1db28 <__assert_fail@plt+0xc8cc>
   1dad0:	cmp	r0, #94	; 0x5e
   1dad4:	beq	1db68 <__assert_fail@plt+0xc90c>
   1dad8:	cmp	r0, #45	; 0x2d
   1dadc:	bne	1db18 <__assert_fail@plt+0xc8bc>
   1dae0:	mov	r3, #22
   1dae4:	strb	r3, [ip, #4]
   1dae8:	mov	r0, #1
   1daec:	pop	{r4, pc}
   1daf0:	mov	r3, #2
   1daf4:	strb	r3, [ip, #4]
   1daf8:	mov	r0, #0
   1dafc:	bx	lr
   1db00:	tst	r2, #1
   1db04:	beq	1db18 <__assert_fail@plt+0xc8bc>
   1db08:	ldr	r2, [r1, #48]	; 0x30
   1db0c:	add	r3, r3, #1
   1db10:	cmp	r3, r2
   1db14:	blt	1dbac <__assert_fail@plt+0xc950>
   1db18:	mov	r3, #1
   1db1c:	mov	r0, r3
   1db20:	strb	r3, [ip, #4]
   1db24:	pop	{r4, pc}
   1db28:	mov	r3, #21
   1db2c:	strb	r3, [ip, #4]
   1db30:	mov	r0, #1
   1db34:	pop	{r4, pc}
   1db38:	mov	r0, #1
   1db3c:	strb	r0, [ip, #4]
   1db40:	pop	{r4, pc}
   1db44:	ldr	r1, [r1, #48]	; 0x30
   1db48:	add	r0, r3, #1
   1db4c:	cmp	r0, r1
   1db50:	blt	1db78 <__assert_fail@plt+0xc91c>
   1db54:	mov	r0, #1
   1db58:	mov	r3, #91	; 0x5b
   1db5c:	strb	r0, [ip, #4]
   1db60:	strb	r3, [ip]
   1db64:	pop	{r4, pc}
   1db68:	mov	r3, #25
   1db6c:	strb	r3, [ip, #4]
   1db70:	mov	r0, #1
   1db74:	pop	{r4, pc}
   1db78:	add	r3, lr, r3
   1db7c:	ldrb	r3, [r3, #1]
   1db80:	cmp	r3, #58	; 0x3a
   1db84:	strb	r3, [ip]
   1db88:	beq	1dbc4 <__assert_fail@plt+0xc968>
   1db8c:	cmp	r3, #61	; 0x3d
   1db90:	beq	1dbdc <__assert_fail@plt+0xc980>
   1db94:	cmp	r3, #46	; 0x2e
   1db98:	bne	1db54 <__assert_fail@plt+0xc8f8>
   1db9c:	mov	r3, #26
   1dba0:	strb	r3, [ip, #4]
   1dba4:	mov	r0, #2
   1dba8:	pop	{r4, pc}
   1dbac:	str	r3, [r1, #40]	; 0x28
   1dbb0:	ldrb	r3, [lr, r3]
   1dbb4:	mov	r0, #1
   1dbb8:	strb	r0, [ip, #4]
   1dbbc:	strb	r3, [ip]
   1dbc0:	pop	{r4, pc}
   1dbc4:	tst	r2, #4
   1dbc8:	beq	1db54 <__assert_fail@plt+0xc8f8>
   1dbcc:	mov	r3, #30
   1dbd0:	strb	r3, [ip, #4]
   1dbd4:	mov	r0, #2
   1dbd8:	pop	{r4, pc}
   1dbdc:	mov	r3, #28
   1dbe0:	strb	r3, [ip, #4]
   1dbe4:	mov	r0, #2
   1dbe8:	pop	{r4, pc}
   1dbec:	ldrb	r3, [r1, #24]
   1dbf0:	cmp	r3, #17
   1dbf4:	bne	1dc0c <__assert_fail@plt+0xc9b0>
   1dbf8:	ldr	r3, [r1, #20]
   1dbfc:	cmp	r0, r3
   1dc00:	ldrbeq	r3, [r1, #26]
   1dc04:	orreq	r3, r3, #8
   1dc08:	strbeq	r3, [r1, #26]
   1dc0c:	mov	r0, #0
   1dc10:	bx	lr
   1dc14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc18:	sub	sp, sp, #52	; 0x34
   1dc1c:	ldr	r8, [r0, #84]	; 0x54
   1dc20:	str	r3, [sp, #40]	; 0x28
   1dc24:	add	r3, r3, r3, lsl #1
   1dc28:	ldr	fp, [r8, #24]
   1dc2c:	str	r1, [sp, #24]
   1dc30:	add	fp, fp, r3, lsl #2
   1dc34:	ldr	r1, [fp, #4]
   1dc38:	cmp	r1, #0
   1dc3c:	ble	1dddc <__assert_fail@plt+0xcb80>
   1dc40:	ldr	r3, [sp, #88]	; 0x58
   1dc44:	mov	r6, r2
   1dc48:	mov	r2, #1
   1dc4c:	mov	sl, r0
   1dc50:	add	r3, r3, r3, lsl r2
   1dc54:	lsl	r2, r2, r6
   1dc58:	lsl	r3, r3, #3
   1dc5c:	add	r3, r3, #24
   1dc60:	str	r3, [sp, #44]	; 0x2c
   1dc64:	ldr	r3, [sp, #24]
   1dc68:	str	r2, [sp, #16]
   1dc6c:	mvn	r2, r2
   1dc70:	str	r2, [sp, #20]
   1dc74:	and	r2, r3, #1
   1dc78:	and	r3, r3, #2
   1dc7c:	mov	r7, #0
   1dc80:	str	r2, [sp, #28]
   1dc84:	str	r3, [sp, #12]
   1dc88:	b	1dca8 <__assert_fail@plt+0xca4c>
   1dc8c:	cmp	r3, #9
   1dc90:	beq	1ddf0 <__assert_fail@plt+0xcb94>
   1dc94:	cmp	r3, #4
   1dc98:	beq	1dce8 <__assert_fail@plt+0xca8c>
   1dc9c:	add	r7, r7, #1
   1dca0:	cmp	r1, r7
   1dca4:	ble	1dddc <__assert_fail@plt+0xcb80>
   1dca8:	ldr	r3, [fp, #8]
   1dcac:	ldr	r2, [r8]
   1dcb0:	ldr	r5, [r3, r7, lsl #2]
   1dcb4:	add	r3, r2, r5, lsl #3
   1dcb8:	ldrb	r3, [r3, #4]
   1dcbc:	cmp	r3, #8
   1dcc0:	bne	1dc8c <__assert_fail@plt+0xca30>
   1dcc4:	ldr	r3, [sp, #28]
   1dcc8:	cmp	r3, #0
   1dccc:	beq	1dc9c <__assert_fail@plt+0xca40>
   1dcd0:	ldr	r3, [r2, r5, lsl #3]
   1dcd4:	cmp	r3, r6
   1dcd8:	bne	1dc9c <__assert_fail@plt+0xca40>
   1dcdc:	mvn	r0, #0
   1dce0:	add	sp, sp, #52	; 0x34
   1dce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dce8:	ldr	r3, [sp, #88]	; 0x58
   1dcec:	cmn	r3, #1
   1dcf0:	beq	1dc9c <__assert_fail@plt+0xca40>
   1dcf4:	add	r9, r5, r5, lsl #1
   1dcf8:	ldr	r4, [sl, #116]	; 0x74
   1dcfc:	ldr	r3, [sp, #44]	; 0x2c
   1dd00:	str	fp, [sp, #32]
   1dd04:	str	r7, [sp, #36]	; 0x24
   1dd08:	lsl	r9, r9, #2
   1dd0c:	add	r4, r4, r3
   1dd10:	ldr	fp, [sp, #24]
   1dd14:	ldr	r7, [sp, #40]	; 0x28
   1dd18:	b	1dd2c <__assert_fail@plt+0xcad0>
   1dd1c:	add	r4, r4, #24
   1dd20:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1dd24:	cmp	r3, #0
   1dd28:	beq	1ddc4 <__assert_fail@plt+0xcb68>
   1dd2c:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1dd30:	cmp	r5, r3
   1dd34:	bne	1dd1c <__assert_fail@plt+0xcac0>
   1dd38:	cmp	r6, #31
   1dd3c:	mov	r2, r6
   1dd40:	mov	r1, fp
   1dd44:	mov	r0, sl
   1dd48:	bgt	1dd5c <__assert_fail@plt+0xcb00>
   1dd4c:	ldr	r3, [r4, #-8]
   1dd50:	ldr	ip, [sp, #16]
   1dd54:	tst	ip, r3
   1dd58:	beq	1dd1c <__assert_fail@plt+0xcac0>
   1dd5c:	ldr	r3, [r8, #20]
   1dd60:	add	r3, r3, r9
   1dd64:	ldr	r3, [r3, #8]
   1dd68:	ldr	ip, [r3]
   1dd6c:	cmp	r7, ip
   1dd70:	mov	r3, ip
   1dd74:	beq	1de14 <__assert_fail@plt+0xcbb8>
   1dd78:	ldr	ip, [sp, #88]	; 0x58
   1dd7c:	str	ip, [sp]
   1dd80:	bl	1dc14 <__assert_fail@plt+0xc9b8>
   1dd84:	cmn	r0, #1
   1dd88:	beq	1dcdc <__assert_fail@plt+0xca80>
   1dd8c:	cmp	r0, #0
   1dd90:	bne	1dda0 <__assert_fail@plt+0xcb44>
   1dd94:	ldr	r3, [sp, #12]
   1dd98:	cmp	r3, #0
   1dd9c:	bne	1de08 <__assert_fail@plt+0xcbac>
   1dda0:	cmp	r6, #31
   1dda4:	add	r4, r4, #24
   1dda8:	ldrle	r3, [r4, #-32]	; 0xffffffe0
   1ddac:	ldrle	r2, [sp, #20]
   1ddb0:	andle	r3, r3, r2
   1ddb4:	strle	r3, [r4, #-32]	; 0xffffffe0
   1ddb8:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1ddbc:	cmp	r3, #0
   1ddc0:	bne	1dd2c <__assert_fail@plt+0xcad0>
   1ddc4:	ldr	fp, [sp, #32]
   1ddc8:	ldr	r7, [sp, #36]	; 0x24
   1ddcc:	ldr	r1, [fp, #4]
   1ddd0:	add	r7, r7, #1
   1ddd4:	cmp	r1, r7
   1ddd8:	bgt	1dca8 <__assert_fail@plt+0xca4c>
   1dddc:	ldr	r3, [sp, #24]
   1dde0:	lsr	r0, r3, #1
   1dde4:	and	r0, r0, #1
   1dde8:	add	sp, sp, #52	; 0x34
   1ddec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ddf0:	ldr	r3, [sp, #12]
   1ddf4:	cmp	r3, #0
   1ddf8:	beq	1dc9c <__assert_fail@plt+0xca40>
   1ddfc:	ldr	r3, [r2, r5, lsl #3]
   1de00:	cmp	r6, r3
   1de04:	bne	1dc9c <__assert_fail@plt+0xca40>
   1de08:	mov	r0, #0
   1de0c:	add	sp, sp, #52	; 0x34
   1de10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de14:	ldr	r3, [sp, #24]
   1de18:	ands	r0, r3, #1
   1de1c:	mvnne	r0, #0
   1de20:	add	sp, sp, #52	; 0x34
   1de24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de28:	add	r1, r1, r1, lsl #1
   1de2c:	ldr	ip, [r0, #116]	; 0x74
   1de30:	push	{r4, lr}
   1de34:	add	ip, ip, r1, lsl #3
   1de38:	ldr	lr, [sp, #8]
   1de3c:	ldr	r1, [ip, #8]
   1de40:	ldr	r4, [sp, #12]
   1de44:	cmp	r1, lr
   1de48:	bgt	1de98 <__assert_fail@plt+0xcc3c>
   1de4c:	ldr	ip, [ip, #12]
   1de50:	cmp	lr, ip
   1de54:	bgt	1de8c <__assert_fail@plt+0xcc30>
   1de58:	cmp	lr, ip
   1de5c:	moveq	ip, #2
   1de60:	movne	ip, #0
   1de64:	cmp	r1, lr
   1de68:	movne	r1, ip
   1de6c:	orreq	r1, ip, #1
   1de70:	cmp	r1, #0
   1de74:	bne	1de80 <__assert_fail@plt+0xcc24>
   1de78:	mov	r0, r1
   1de7c:	pop	{r4, pc}
   1de80:	str	r4, [sp, #8]
   1de84:	pop	{r4, lr}
   1de88:	b	1dc14 <__assert_fail@plt+0xc9b8>
   1de8c:	mov	r1, #1
   1de90:	mov	r0, r1
   1de94:	pop	{r4, pc}
   1de98:	mvn	r1, #0
   1de9c:	b	1de78 <__assert_fail@plt+0xcc1c>
   1dea0:	push	{r4, r5, r6, lr}
   1dea4:	mov	r4, r0
   1dea8:	mov	r6, r1
   1deac:	mov	r5, r2
   1deb0:	b	1deb8 <__assert_fail@plt+0xcc5c>
   1deb4:	mov	r4, r3
   1deb8:	ldr	r3, [r4, #4]
   1debc:	cmp	r3, #0
   1dec0:	bne	1deb4 <__assert_fail@plt+0xcc58>
   1dec4:	ldr	r3, [r4, #8]
   1dec8:	cmp	r3, #0
   1decc:	bne	1deb4 <__assert_fail@plt+0xcc58>
   1ded0:	mov	r1, r4
   1ded4:	mov	r0, r5
   1ded8:	blx	r6
   1dedc:	cmp	r0, #0
   1dee0:	popne	{r4, r5, r6, pc}
   1dee4:	ldr	r2, [r4]
   1dee8:	cmp	r2, #0
   1deec:	popeq	{r4, r5, r6, pc}
   1def0:	ldr	r3, [r2, #8]
   1def4:	cmp	r4, r3
   1def8:	cmpne	r3, #0
   1defc:	moveq	r4, #1
   1df00:	movne	r4, #0
   1df04:	cmp	r4, #0
   1df08:	mov	r4, r2
   1df0c:	bne	1ded0 <__assert_fail@plt+0xcc74>
   1df10:	b	1deb4 <__assert_fail@plt+0xcc58>
   1df14:	push	{r4, r5, r6, r7, r8, lr}
   1df18:	mov	r4, r0
   1df1c:	mov	r6, r1
   1df20:	mov	r5, r2
   1df24:	mov	r7, #0
   1df28:	b	1df30 <__assert_fail@plt+0xccd4>
   1df2c:	mov	r4, r3
   1df30:	mov	r1, r4
   1df34:	mov	r0, r5
   1df38:	blx	r6
   1df3c:	cmp	r0, #0
   1df40:	popne	{r4, r5, r6, r7, r8, pc}
   1df44:	ldr	r3, [r4, #4]
   1df48:	cmp	r3, #0
   1df4c:	moveq	r2, r7
   1df50:	bne	1df2c <__assert_fail@plt+0xccd0>
   1df54:	ldr	r3, [r4, #8]
   1df58:	cmp	r3, #0
   1df5c:	cmpne	r2, r3
   1df60:	bne	1df2c <__assert_fail@plt+0xccd0>
   1df64:	ldr	r3, [r4]
   1df68:	mov	r2, r4
   1df6c:	subs	r4, r3, #0
   1df70:	popeq	{r4, r5, r6, r7, r8, pc}
   1df74:	ldr	r3, [r4, #8]
   1df78:	cmp	r3, #0
   1df7c:	cmpne	r2, r3
   1df80:	beq	1df64 <__assert_fail@plt+0xcd08>
   1df84:	b	1df2c <__assert_fail@plt+0xccd0>
   1df88:	ldr	r3, [r0, #80]	; 0x50
   1df8c:	push	{r4, r5, r6, lr}
   1df90:	cmp	r3, #1
   1df94:	mov	r4, r0
   1df98:	mov	r5, r1
   1df9c:	ble	1dfe4 <__assert_fail@plt+0xcd88>
   1dfa0:	cmn	r1, #-1073741823	; 0xc0000001
   1dfa4:	bhi	1e014 <__assert_fail@plt+0xcdb8>
   1dfa8:	lsl	r6, r1, #2
   1dfac:	mov	r1, r6
   1dfb0:	ldr	r0, [r0, #8]
   1dfb4:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   1dfb8:	subs	r3, r0, #0
   1dfbc:	beq	1e014 <__assert_fail@plt+0xcdb8>
   1dfc0:	ldr	r0, [r4, #12]
   1dfc4:	str	r3, [r4, #8]
   1dfc8:	cmp	r0, #0
   1dfcc:	beq	1dfe4 <__assert_fail@plt+0xcd88>
   1dfd0:	mov	r1, r6
   1dfd4:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   1dfd8:	cmp	r0, #0
   1dfdc:	beq	1e014 <__assert_fail@plt+0xcdb8>
   1dfe0:	str	r0, [r4, #12]
   1dfe4:	ldrb	r3, [r4, #75]	; 0x4b
   1dfe8:	cmp	r3, #0
   1dfec:	bne	1dffc <__assert_fail@plt+0xcda0>
   1dff0:	mov	r0, #0
   1dff4:	str	r5, [r4, #36]	; 0x24
   1dff8:	pop	{r4, r5, r6, pc}
   1dffc:	mov	r1, r5
   1e000:	ldr	r0, [r4, #4]
   1e004:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   1e008:	cmp	r0, #0
   1e00c:	strne	r0, [r4, #4]
   1e010:	bne	1dff0 <__assert_fail@plt+0xcd94>
   1e014:	mov	r0, #12
   1e018:	pop	{r4, r5, r6, pc}
   1e01c:	push	{r4, r5, r6, lr}
   1e020:	mov	r5, r1
   1e024:	ldr	r3, [r0]
   1e028:	ldr	r1, [r0, #4]
   1e02c:	mov	r4, r0
   1e030:	cmp	r3, r1
   1e034:	beq	1e050 <__assert_fail@plt+0xcdf4>
   1e038:	ldr	r3, [r0, #8]
   1e03c:	add	r2, r1, #1
   1e040:	str	r2, [r4, #4]
   1e044:	mov	r0, #1
   1e048:	str	r5, [r3, r1, lsl #2]
   1e04c:	pop	{r4, r5, r6, pc}
   1e050:	add	r1, r1, #1
   1e054:	ldr	r0, [r0, #8]
   1e058:	lsl	r3, r1, #1
   1e05c:	str	r3, [r4]
   1e060:	lsl	r1, r1, #3
   1e064:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   1e068:	subs	r3, r0, #0
   1e06c:	ldrne	r1, [r4, #4]
   1e070:	strne	r3, [r4, #8]
   1e074:	bne	1e03c <__assert_fail@plt+0xcde0>
   1e078:	mov	r0, r3
   1e07c:	pop	{r4, r5, r6, pc}
   1e080:	ldr	r3, [r1, #8]
   1e084:	push	{r4, r5, r6, r7, r8, lr}
   1e088:	mov	r5, r1
   1e08c:	mov	r4, #0
   1e090:	str	r2, [r5], #16
   1e094:	mov	r8, r0
   1e098:	str	r3, [r1, #16]
   1e09c:	lsl	r0, r3, #2
   1e0a0:	str	r4, [r1, #20]
   1e0a4:	mov	r7, r1
   1e0a8:	mov	r6, r2
   1e0ac:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   1e0b0:	cmp	r0, r4
   1e0b4:	str	r0, [r7, #24]
   1e0b8:	beq	1e154 <__assert_fail@plt+0xcef8>
   1e0bc:	ldr	r0, [r7, #8]
   1e0c0:	cmp	r0, #0
   1e0c4:	bgt	1e0d8 <__assert_fail@plt+0xce7c>
   1e0c8:	b	1e114 <__assert_fail@plt+0xceb8>
   1e0cc:	add	r4, r4, #1
   1e0d0:	cmp	r0, r4
   1e0d4:	ble	1e114 <__assert_fail@plt+0xceb8>
   1e0d8:	ldr	r2, [r7, #12]
   1e0dc:	ldr	r3, [r8]
   1e0e0:	ldr	r1, [r2, r4, lsl #2]
   1e0e4:	add	r3, r3, r1, lsl #3
   1e0e8:	ldrb	r3, [r3, #4]
   1e0ec:	tst	r3, #8
   1e0f0:	bne	1e0cc <__assert_fail@plt+0xce70>
   1e0f4:	mov	r0, r5
   1e0f8:	bl	1e01c <__assert_fail@plt+0xcdc0>
   1e0fc:	cmp	r0, #0
   1e100:	beq	1e154 <__assert_fail@plt+0xcef8>
   1e104:	ldr	r0, [r7, #8]
   1e108:	add	r4, r4, #1
   1e10c:	cmp	r0, r4
   1e110:	bgt	1e0d8 <__assert_fail@plt+0xce7c>
   1e114:	ldr	r4, [r8, #68]	; 0x44
   1e118:	ldr	r5, [r8, #32]
   1e11c:	and	r6, r6, r4
   1e120:	add	r6, r6, r6, lsl #1
   1e124:	lsl	r4, r6, #2
   1e128:	add	r6, r5, r4
   1e12c:	ldr	r3, [r5, r4]
   1e130:	ldr	r2, [r6, #4]
   1e134:	cmp	r2, r3
   1e138:	ldrgt	r2, [r6, #8]
   1e13c:	ble	1e15c <__assert_fail@plt+0xcf00>
   1e140:	add	r1, r3, #1
   1e144:	str	r1, [r5, r4]
   1e148:	mov	r0, #0
   1e14c:	str	r7, [r2, r3, lsl #2]
   1e150:	pop	{r4, r5, r6, r7, r8, pc}
   1e154:	mov	r0, #12
   1e158:	pop	{r4, r5, r6, r7, r8, pc}
   1e15c:	add	r3, r3, #1
   1e160:	ldr	r0, [r6, #8]
   1e164:	lsl	r1, r3, #3
   1e168:	lsl	r8, r3, #1
   1e16c:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   1e170:	subs	r2, r0, #0
   1e174:	beq	1e154 <__assert_fail@plt+0xcef8>
   1e178:	ldr	r3, [r5, r4]
   1e17c:	str	r2, [r6, #8]
   1e180:	str	r8, [r6, #4]
   1e184:	b	1e140 <__assert_fail@plt+0xcee4>
   1e188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e18c:	mov	r5, r0
   1e190:	ldr	r9, [r0, #36]	; 0x24
   1e194:	ldr	r3, [r0, #48]	; 0x30
   1e198:	ldr	r4, [r0, #28]
   1e19c:	cmp	r9, r3
   1e1a0:	movge	r9, r3
   1e1a4:	cmp	r9, r4
   1e1a8:	sub	sp, sp, #84	; 0x54
   1e1ac:	ble	1e24c <__assert_fail@plt+0xcff0>
   1e1b0:	add	r7, r0, #16
   1e1b4:	add	r8, sp, #8
   1e1b8:	mov	sl, #1
   1e1bc:	mvn	r6, #0
   1e1c0:	ldm	r7, {r0, r1}
   1e1c4:	ldr	ip, [r5, #64]	; 0x40
   1e1c8:	sub	r2, r9, r4
   1e1cc:	cmp	ip, #0
   1e1d0:	stm	r8, {r0, r1}
   1e1d4:	bne	1e290 <__assert_fail@plt+0xd034>
   1e1d8:	ldr	r3, [r5, #24]
   1e1dc:	ldr	r1, [r5]
   1e1e0:	add	r3, r4, r3
   1e1e4:	add	r1, r1, r3
   1e1e8:	mov	r3, r7
   1e1ec:	add	r0, sp, #4
   1e1f0:	bl	1b770 <__assert_fail@plt+0xa514>
   1e1f4:	sub	r2, r0, #1
   1e1f8:	cmn	r2, #3
   1e1fc:	mov	r3, r0
   1e200:	bhi	1e25c <__assert_fail@plt+0xd000>
   1e204:	cmn	r0, #2
   1e208:	ldrne	r2, [sp, #4]
   1e20c:	beq	1e2f0 <__assert_fail@plt+0xd094>
   1e210:	ldr	r1, [r5, #8]
   1e214:	add	r0, r4, r3
   1e218:	add	ip, r4, #1
   1e21c:	cmp	ip, r0
   1e220:	str	r2, [r1, r4, lsl #2]
   1e224:	add	r3, r1, r4, lsl #2
   1e228:	bge	1e318 <__assert_fail@plt+0xd0bc>
   1e22c:	sub	r2, r0, #-1073741823	; 0xc0000001
   1e230:	add	r2, r1, r2, lsl #2
   1e234:	str	r6, [r3, #4]!
   1e238:	cmp	r2, r3
   1e23c:	bne	1e234 <__assert_fail@plt+0xcfd8>
   1e240:	mov	r4, r0
   1e244:	cmp	r9, r4
   1e248:	bgt	1e1c0 <__assert_fail@plt+0xcf64>
   1e24c:	str	r4, [r5, #28]
   1e250:	str	r4, [r5, #32]
   1e254:	add	sp, sp, #84	; 0x54
   1e258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e25c:	ldr	r3, [r5]
   1e260:	ldr	r2, [r5, #24]
   1e264:	add	r3, r3, r4
   1e268:	ldr	r1, [r5, #64]	; 0x40
   1e26c:	ldrb	r2, [r3, r2]
   1e270:	cmp	r1, #0
   1e274:	mov	r3, sl
   1e278:	str	r2, [sp, #4]
   1e27c:	ldrbne	r2, [r1, r2]
   1e280:	ldm	r8, {r0, r1}
   1e284:	strne	r2, [sp, #4]
   1e288:	stm	r7, {r0, r1}
   1e28c:	b	1e210 <__assert_fail@plt+0xcfb4>
   1e290:	ldr	r3, [r5, #80]	; 0x50
   1e294:	cmp	r3, #0
   1e298:	ble	1e2e8 <__assert_fail@plt+0xd08c>
   1e29c:	add	r0, sp, #15
   1e2a0:	mov	r3, #0
   1e2a4:	b	1e2ac <__assert_fail@plt+0xd050>
   1e2a8:	ldr	ip, [r5, #64]	; 0x40
   1e2ac:	ldr	r1, [r5]
   1e2b0:	ldr	lr, [r5, #24]
   1e2b4:	add	r1, r1, r4
   1e2b8:	add	r1, r1, r3
   1e2bc:	ldr	fp, [r5, #4]
   1e2c0:	ldrb	lr, [r1, lr]
   1e2c4:	add	r1, fp, r4
   1e2c8:	ldrb	ip, [ip, lr]
   1e2cc:	strb	ip, [r1, r3]
   1e2d0:	ldr	r1, [r5, #80]	; 0x50
   1e2d4:	add	r3, r3, #1
   1e2d8:	cmp	r1, r3
   1e2dc:	cmpgt	r2, r3
   1e2e0:	strb	ip, [r0, #1]!
   1e2e4:	bgt	1e2a8 <__assert_fail@plt+0xd04c>
   1e2e8:	add	r1, sp, #16
   1e2ec:	b	1e1e8 <__assert_fail@plt+0xcf8c>
   1e2f0:	ldr	r2, [r5, #36]	; 0x24
   1e2f4:	ldr	r3, [r5, #48]	; 0x30
   1e2f8:	cmp	r2, r3
   1e2fc:	bge	1e25c <__assert_fail@plt+0xd000>
   1e300:	ldm	r8, {r0, r1}
   1e304:	stm	r7, {r0, r1}
   1e308:	str	r4, [r5, #28]
   1e30c:	str	r4, [r5, #32]
   1e310:	add	sp, sp, #84	; 0x54
   1e314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e318:	mov	r4, ip
   1e31c:	b	1e244 <__assert_fail@plt+0xcfe8>
   1e320:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e324:	mov	r5, r0
   1e328:	ldr	r7, [r0, #36]	; 0x24
   1e32c:	ldr	r3, [r0, #48]	; 0x30
   1e330:	ldrb	r2, [r0, #74]	; 0x4a
   1e334:	cmp	r7, r3
   1e338:	movge	r7, r3
   1e33c:	cmp	r2, #0
   1e340:	sub	sp, sp, #100	; 0x64
   1e344:	ldr	r6, [r0, #28]
   1e348:	bne	1e358 <__assert_fail@plt+0xd0fc>
   1e34c:	ldr	r3, [r0, #64]	; 0x40
   1e350:	cmp	r3, #0
   1e354:	beq	1e48c <__assert_fail@plt+0xd230>
   1e358:	ldr	r4, [r5, #32]
   1e35c:	cmp	r6, r7
   1e360:	bge	1e478 <__assert_fail@plt+0xd21c>
   1e364:	sub	r3, r7, r6
   1e368:	str	r3, [sp, #4]
   1e36c:	add	sl, r5, #16
   1e370:	add	r3, sp, #24
   1e374:	str	r3, [sp]
   1e378:	add	r3, sp, #20
   1e37c:	str	r3, [sp, #8]
   1e380:	ldm	sl, {r0, r1}
   1e384:	ldr	r2, [r5, #64]	; 0x40
   1e388:	ldr	r3, [sp]
   1e38c:	cmp	r2, #0
   1e390:	stm	r3, {r0, r1}
   1e394:	bne	1e5d8 <__assert_fail@plt+0xd37c>
   1e398:	ldr	r3, [r5, #24]
   1e39c:	ldr	r2, [r5]
   1e3a0:	add	r3, r4, r3
   1e3a4:	add	r3, r2, r3
   1e3a8:	str	r3, [sp, #12]
   1e3ac:	mov	r3, sl
   1e3b0:	ldr	r2, [sp, #4]
   1e3b4:	ldr	r0, [sp, #8]
   1e3b8:	ldr	r1, [sp, #12]
   1e3bc:	bl	1b770 <__assert_fail@plt+0xa514>
   1e3c0:	sub	r3, r0, #1
   1e3c4:	cmn	r3, #4
   1e3c8:	mov	r8, r0
   1e3cc:	str	r3, [sp, #4]
   1e3d0:	bhi	1e6e8 <__assert_fail@plt+0xd48c>
   1e3d4:	ldr	fp, [sp, #20]
   1e3d8:	mov	r0, fp
   1e3dc:	bl	11238 <towupper@plt>
   1e3e0:	cmp	fp, r0
   1e3e4:	mov	r9, r0
   1e3e8:	beq	1e6d0 <__assert_fail@plt+0xd474>
   1e3ec:	add	r0, sp, #32
   1e3f0:	ldr	r2, [sp]
   1e3f4:	mov	r1, r9
   1e3f8:	bl	10f80 <wcrtomb@plt>
   1e3fc:	cmp	r8, r0
   1e400:	mov	fp, r0
   1e404:	bne	1e788 <__assert_fail@plt+0xd52c>
   1e408:	ldr	r0, [r5, #4]
   1e40c:	add	r1, sp, #32
   1e410:	add	r0, r0, r6
   1e414:	mov	r2, r8
   1e418:	bl	11004 <memcpy@plt>
   1e41c:	ldrb	r3, [r5, #76]	; 0x4c
   1e420:	cmp	r3, #0
   1e424:	bne	1e760 <__assert_fail@plt+0xd504>
   1e428:	add	r2, r8, r4
   1e42c:	ldr	r3, [r5, #8]
   1e430:	add	r8, r6, r8
   1e434:	add	r1, r6, #1
   1e438:	cmp	r1, r8
   1e43c:	mov	r4, r2
   1e440:	str	r9, [r3, r6, lsl #2]
   1e444:	bge	1e780 <__assert_fail@plt+0xd524>
   1e448:	sub	r2, r8, #-1073741823	; 0xc0000001
   1e44c:	add	r6, r3, r6, lsl #2
   1e450:	add	r3, r3, r2, lsl #2
   1e454:	mvn	r2, #0
   1e458:	str	r2, [r6, #4]!
   1e45c:	cmp	r3, r6
   1e460:	bne	1e458 <__assert_fail@plt+0xd1fc>
   1e464:	mov	r6, r8
   1e468:	b	1e35c <__assert_fail@plt+0xd100>
   1e46c:	ldr	r3, [sp]
   1e470:	ldm	r3, {r0, r1}
   1e474:	stm	sl, {r0, r1}
   1e478:	mov	r0, #0
   1e47c:	str	r6, [r5, #28]
   1e480:	str	r4, [r5, #32]
   1e484:	add	sp, sp, #100	; 0x64
   1e488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e48c:	ldrb	r3, [r0, #76]	; 0x4c
   1e490:	cmp	r3, #0
   1e494:	bne	1e358 <__assert_fail@plt+0xd0fc>
   1e498:	cmp	r6, r7
   1e49c:	bge	1e6c0 <__assert_fail@plt+0xd464>
   1e4a0:	add	sl, r0, #16
   1e4a4:	mvn	r9, #0
   1e4a8:	b	1e4d8 <__assert_fail@plt+0xd27c>
   1e4ac:	mov	r0, fp
   1e4b0:	bl	11238 <towupper@plt>
   1e4b4:	bics	r3, r0, #127	; 0x7f
   1e4b8:	bne	1e500 <__assert_fail@plt+0xd2a4>
   1e4bc:	ldr	r3, [r5, #4]
   1e4c0:	strb	r0, [r3, r6]
   1e4c4:	ldr	r3, [r5, #8]
   1e4c8:	str	r0, [r3, r6, lsl #2]
   1e4cc:	add	r6, r6, #1
   1e4d0:	cmp	r7, r6
   1e4d4:	ble	1e6c0 <__assert_fail@plt+0xd464>
   1e4d8:	ldr	r8, [r5]
   1e4dc:	ldr	r4, [r5, #24]
   1e4e0:	add	r3, r8, r4
   1e4e4:	ldrb	fp, [r3, r6]
   1e4e8:	tst	fp, #128	; 0x80
   1e4ec:	bne	1e500 <__assert_fail@plt+0xd2a4>
   1e4f0:	mov	r0, sl
   1e4f4:	bl	11028 <mbsinit@plt>
   1e4f8:	cmp	r0, #0
   1e4fc:	bne	1e4ac <__assert_fail@plt+0xd250>
   1e500:	ldm	sl, {r0, r1}
   1e504:	add	r2, sp, #24
   1e508:	sub	r3, r7, r6
   1e50c:	add	r4, r4, r6
   1e510:	stm	r2, {r0, r1}
   1e514:	str	r3, [sp, #4]
   1e518:	mov	r2, r3
   1e51c:	add	r1, r8, r4
   1e520:	mov	r3, sl
   1e524:	add	r0, sp, #20
   1e528:	bl	1b770 <__assert_fail@plt+0xa514>
   1e52c:	add	r2, sp, #24
   1e530:	str	r2, [sp]
   1e534:	add	r2, sp, #20
   1e538:	mov	r4, r6
   1e53c:	str	r2, [sp, #8]
   1e540:	sub	r3, r0, #1
   1e544:	cmn	r3, #4
   1e548:	mov	r8, r0
   1e54c:	bhi	1e654 <__assert_fail@plt+0xd3f8>
   1e550:	ldr	r3, [sp, #20]
   1e554:	mov	r0, r3
   1e558:	str	r3, [sp, #12]
   1e55c:	bl	11238 <towupper@plt>
   1e560:	ldr	r3, [sp, #12]
   1e564:	cmp	r3, r0
   1e568:	mov	fp, r0
   1e56c:	beq	1e630 <__assert_fail@plt+0xd3d4>
   1e570:	mov	r1, r0
   1e574:	add	r2, sp, #24
   1e578:	add	r0, sp, #32
   1e57c:	bl	10f80 <wcrtomb@plt>
   1e580:	cmp	r8, r0
   1e584:	bne	1e684 <__assert_fail@plt+0xd428>
   1e588:	ldr	r0, [r5, #4]
   1e58c:	mov	r2, r8
   1e590:	add	r0, r0, r6
   1e594:	add	r1, sp, #32
   1e598:	bl	11004 <memcpy@plt>
   1e59c:	add	r6, r6, #1
   1e5a0:	ldr	r2, [r5, #8]
   1e5a4:	sub	r3, r6, #1
   1e5a8:	add	r8, r3, r8
   1e5ac:	cmp	r6, r8
   1e5b0:	str	fp, [r2, r4, lsl #2]
   1e5b4:	add	r4, r2, r4, lsl #2
   1e5b8:	bge	1e4d0 <__assert_fail@plt+0xd274>
   1e5bc:	sub	r3, r8, #-1073741823	; 0xc0000001
   1e5c0:	add	r3, r2, r3, lsl #2
   1e5c4:	str	r9, [r4, #4]!
   1e5c8:	cmp	r4, r3
   1e5cc:	bne	1e5c4 <__assert_fail@plt+0xd368>
   1e5d0:	mov	r6, r8
   1e5d4:	b	1e4d0 <__assert_fail@plt+0xd274>
   1e5d8:	ldr	lr, [r5, #80]	; 0x50
   1e5dc:	cmp	lr, #0
   1e5e0:	ble	1e624 <__assert_fail@plt+0xd3c8>
   1e5e4:	ldr	r3, [r5, #24]
   1e5e8:	ldr	r0, [sp, #4]
   1e5ec:	ldr	r1, [r5]
   1e5f0:	add	r3, r4, r3
   1e5f4:	cmp	lr, r0
   1e5f8:	sub	r3, r3, #1
   1e5fc:	movge	lr, r0
   1e600:	add	r1, r1, r3
   1e604:	add	r0, sp, #31
   1e608:	mov	r3, #0
   1e60c:	ldrb	ip, [r1, #1]!
   1e610:	add	r3, r3, #1
   1e614:	cmp	r3, lr
   1e618:	ldrb	ip, [r2, ip]
   1e61c:	strb	ip, [r0, #1]!
   1e620:	blt	1e60c <__assert_fail@plt+0xd3b0>
   1e624:	add	r3, sp, #32
   1e628:	str	r3, [sp, #12]
   1e62c:	b	1e3ac <__assert_fail@plt+0xd150>
   1e630:	ldr	r3, [r5, #24]
   1e634:	ldr	r1, [r5]
   1e638:	ldr	r0, [r5, #4]
   1e63c:	add	r3, r6, r3
   1e640:	add	r1, r1, r3
   1e644:	add	r0, r0, r6
   1e648:	mov	r2, r8
   1e64c:	bl	11004 <memcpy@plt>
   1e650:	b	1e59c <__assert_fail@plt+0xd340>
   1e654:	cmn	r3, #3
   1e658:	bne	1e68c <__assert_fail@plt+0xd430>
   1e65c:	ldr	r2, [r5, #36]	; 0x24
   1e660:	ldr	r3, [r5, #48]	; 0x30
   1e664:	cmp	r2, r3
   1e668:	blt	1e6b4 <__assert_fail@plt+0xd458>
   1e66c:	ldr	r3, [r5, #4]
   1e670:	strb	fp, [r3, r6]
   1e674:	ldr	r3, [r5, #8]
   1e678:	add	r6, r6, #1
   1e67c:	str	fp, [r3, r4, lsl #2]
   1e680:	b	1e4d0 <__assert_fail@plt+0xd274>
   1e684:	mov	r4, r6
   1e688:	b	1e380 <__assert_fail@plt+0xd124>
   1e68c:	ldr	r3, [r5, #4]
   1e690:	cmn	r0, #1
   1e694:	strb	fp, [r3, r6]
   1e698:	ldr	r3, [r5, #8]
   1e69c:	add	r6, r6, #1
   1e6a0:	str	fp, [r3, r4, lsl #2]
   1e6a4:	addeq	r3, sp, #24
   1e6a8:	ldmeq	r3, {r0, r1}
   1e6ac:	stmeq	sl, {r0, r1}
   1e6b0:	b	1e4d0 <__assert_fail@plt+0xd274>
   1e6b4:	add	r3, sp, #24
   1e6b8:	ldm	r3, {r0, r1}
   1e6bc:	stm	sl, {r0, r1}
   1e6c0:	str	r6, [r5, #28]
   1e6c4:	str	r6, [r5, #32]
   1e6c8:	mov	r0, #0
   1e6cc:	b	1e484 <__assert_fail@plt+0xd228>
   1e6d0:	ldr	r0, [r5, #4]
   1e6d4:	ldr	r1, [sp, #12]
   1e6d8:	add	r0, r0, r6
   1e6dc:	mov	r2, r8
   1e6e0:	bl	11004 <memcpy@plt>
   1e6e4:	b	1e41c <__assert_fail@plt+0xd1c0>
   1e6e8:	ldr	r3, [sp, #4]
   1e6ec:	cmn	r3, #3
   1e6f0:	bne	1e704 <__assert_fail@plt+0xd4a8>
   1e6f4:	ldr	r2, [r5, #36]	; 0x24
   1e6f8:	ldr	r3, [r5, #48]	; 0x30
   1e6fc:	cmp	r2, r3
   1e700:	blt	1e46c <__assert_fail@plt+0xd210>
   1e704:	ldr	r3, [r5]
   1e708:	ldr	r1, [r5, #24]
   1e70c:	add	r3, r3, r4
   1e710:	ldr	r2, [r5, #64]	; 0x40
   1e714:	ldrb	r3, [r3, r1]
   1e718:	cmp	r2, #0
   1e71c:	mov	r1, r6
   1e720:	ldrbne	r3, [r2, r3]
   1e724:	ldr	r2, [r5, #4]
   1e728:	strb	r3, [r2, r6]
   1e72c:	ldrb	r2, [r5, #76]	; 0x4c
   1e730:	cmp	r2, #0
   1e734:	ldrne	r2, [r5, #12]
   1e738:	strne	r4, [r2, r6, lsl #2]
   1e73c:	ldr	r2, [r5, #8]
   1e740:	cmn	r8, #1
   1e744:	add	r4, r4, #1
   1e748:	add	r6, r6, #1
   1e74c:	str	r3, [r2, r1, lsl #2]
   1e750:	ldreq	r3, [sp]
   1e754:	ldmeq	r3, {r0, r1}
   1e758:	stmeq	sl, {r0, r1}
   1e75c:	b	1e35c <__assert_fail@plt+0xd100>
   1e760:	ldr	r3, [r5, #12]
   1e764:	add	r2, r8, r4
   1e768:	add	r3, r3, r6, lsl #2
   1e76c:	str	r4, [r3], #4
   1e770:	add	r4, r4, #1
   1e774:	cmp	r2, r4
   1e778:	bne	1e76c <__assert_fail@plt+0xd510>
   1e77c:	b	1e42c <__assert_fail@plt+0xd1d0>
   1e780:	mov	r6, r1
   1e784:	b	1e35c <__assert_fail@plt+0xd100>
   1e788:	cmn	r0, #1
   1e78c:	beq	1e6d0 <__assert_fail@plt+0xd474>
   1e790:	ldr	r0, [r5, #36]	; 0x24
   1e794:	add	r7, r6, fp
   1e798:	cmp	r7, r0
   1e79c:	bhi	1e46c <__assert_fail@plt+0xd210>
   1e7a0:	ldr	r3, [r5, #12]
   1e7a4:	cmp	r3, #0
   1e7a8:	beq	1e884 <__assert_fail@plt+0xd628>
   1e7ac:	ldrb	r3, [r5, #76]	; 0x4c
   1e7b0:	cmp	r3, #0
   1e7b4:	bne	1e7e0 <__assert_fail@plt+0xd584>
   1e7b8:	cmp	r6, #0
   1e7bc:	ldrne	r2, [r5, #12]
   1e7c0:	subne	r2, r2, #4
   1e7c4:	beq	1e7d8 <__assert_fail@plt+0xd57c>
   1e7c8:	str	r3, [r2, #4]!
   1e7cc:	add	r3, r3, #1
   1e7d0:	cmp	r6, r3
   1e7d4:	bne	1e7c8 <__assert_fail@plt+0xd56c>
   1e7d8:	mov	r3, #1
   1e7dc:	strb	r3, [r5, #76]	; 0x4c
   1e7e0:	ldr	r0, [r5, #4]
   1e7e4:	add	r1, sp, #32
   1e7e8:	mov	r2, fp
   1e7ec:	add	r0, r0, r6
   1e7f0:	bl	11004 <memcpy@plt>
   1e7f4:	ldr	r3, [r5, #8]
   1e7f8:	ldr	r1, [r5, #12]
   1e7fc:	lsl	r2, r6, #2
   1e800:	cmp	fp, #1
   1e804:	str	r9, [r3, r6, lsl #2]
   1e808:	add	r3, r3, r2
   1e80c:	str	r4, [r1, r6, lsl #2]
   1e810:	add	r2, r1, r2
   1e814:	bls	1e844 <__assert_fail@plt+0xd5e8>
   1e818:	mov	r1, #1
   1e81c:	mvn	ip, #0
   1e820:	cmp	r1, r8
   1e824:	ldr	r0, [sp, #4]
   1e828:	movcc	r0, r1
   1e82c:	add	r1, r1, #1
   1e830:	add	r0, r0, r4
   1e834:	cmp	r1, fp
   1e838:	str	r0, [r2, #4]!
   1e83c:	str	ip, [r3, #4]!
   1e840:	bne	1e820 <__assert_fail@plt+0xd5c4>
   1e844:	ldr	r2, [r5, #52]	; 0x34
   1e848:	ldr	r3, [r5, #48]	; 0x30
   1e84c:	cmp	r4, r2
   1e850:	sub	fp, fp, r8
   1e854:	ldrlt	r2, [r5, #56]	; 0x38
   1e858:	add	r3, fp, r3
   1e85c:	addlt	fp, r2, fp
   1e860:	ldr	r2, [r5, #36]	; 0x24
   1e864:	strlt	fp, [r5, #56]	; 0x38
   1e868:	cmp	r3, r2
   1e86c:	mov	r6, r7
   1e870:	str	r3, [r5, #48]	; 0x30
   1e874:	add	r4, r8, r4
   1e878:	movlt	r7, r3
   1e87c:	movge	r7, r2
   1e880:	b	1e35c <__assert_fail@plt+0xd100>
   1e884:	lsl	r0, r0, #2
   1e888:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   1e88c:	cmp	r0, #0
   1e890:	str	r0, [r5, #12]
   1e894:	moveq	r0, #12
   1e898:	bne	1e7ac <__assert_fail@plt+0xd550>
   1e89c:	b	1e484 <__assert_fail@plt+0xd228>
   1e8a0:	push	{r4, r5, r6, lr}
   1e8a4:	mov	r5, r0
   1e8a8:	ldr	r6, [r0, #36]	; 0x24
   1e8ac:	ldr	r3, [r0, #48]	; 0x30
   1e8b0:	ldr	r4, [r0, #28]
   1e8b4:	cmp	r6, r3
   1e8b8:	movge	r6, r3
   1e8bc:	cmp	r6, r4
   1e8c0:	ble	1e904 <__assert_fail@plt+0xd6a8>
   1e8c4:	bl	11118 <__ctype_toupper_loc@plt>
   1e8c8:	ldr	r3, [r5]
   1e8cc:	ldr	r2, [r5, #24]
   1e8d0:	add	r3, r3, r4
   1e8d4:	ldr	r1, [r5, #64]	; 0x40
   1e8d8:	ldrb	r2, [r3, r2]
   1e8dc:	cmp	r1, #0
   1e8e0:	ldr	r3, [r5, #4]
   1e8e4:	ldrbne	r2, [r1, r2]
   1e8e8:	ldr	r1, [r0]
   1e8ec:	add	r3, r3, r4
   1e8f0:	add	r4, r4, #1
   1e8f4:	ldr	r2, [r1, r2, lsl #2]
   1e8f8:	cmp	r6, r4
   1e8fc:	strb	r2, [r3]
   1e900:	bne	1e8c8 <__assert_fail@plt+0xd66c>
   1e904:	str	r4, [r5, #28]
   1e908:	str	r4, [r5, #32]
   1e90c:	pop	{r4, r5, r6, pc}
   1e910:	ldr	r3, [r0, #36]	; 0x24
   1e914:	push	{r4, r5, r6, lr}
   1e918:	cmn	r3, #-536870910	; 0xe0000002
   1e91c:	bhi	1ea04 <__assert_fail@plt+0xd7a8>
   1e920:	ldr	r2, [r0, #48]	; 0x30
   1e924:	lsl	r3, r3, #1
   1e928:	cmp	r3, r2
   1e92c:	movge	r3, r2
   1e930:	cmp	r3, r1
   1e934:	movge	r1, r3
   1e938:	mov	r4, r0
   1e93c:	bl	1df88 <__assert_fail@plt+0xcd2c>
   1e940:	subs	r5, r0, #0
   1e944:	bne	1e9fc <__assert_fail@plt+0xd7a0>
   1e948:	ldr	r0, [r4, #100]	; 0x64
   1e94c:	cmp	r0, #0
   1e950:	beq	1e970 <__assert_fail@plt+0xd714>
   1e954:	ldr	r1, [r4, #36]	; 0x24
   1e958:	add	r1, r1, #1
   1e95c:	lsl	r1, r1, #2
   1e960:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   1e964:	cmp	r0, #0
   1e968:	beq	1ea04 <__assert_fail@plt+0xd7a8>
   1e96c:	str	r0, [r4, #100]	; 0x64
   1e970:	ldrb	r3, [r4, #72]	; 0x48
   1e974:	cmp	r3, #0
   1e978:	ldr	r3, [r4, #80]	; 0x50
   1e97c:	beq	1e994 <__assert_fail@plt+0xd738>
   1e980:	cmp	r3, #1
   1e984:	mov	r0, r4
   1e988:	ble	1ea20 <__assert_fail@plt+0xd7c4>
   1e98c:	pop	{r4, r5, r6, lr}
   1e990:	b	1e320 <__assert_fail@plt+0xd0c4>
   1e994:	cmp	r3, #1
   1e998:	bgt	1ea10 <__assert_fail@plt+0xd7b4>
   1e99c:	ldr	r1, [r4, #64]	; 0x40
   1e9a0:	cmp	r1, #0
   1e9a4:	beq	1e9fc <__assert_fail@plt+0xd7a0>
   1e9a8:	ldr	lr, [r4, #36]	; 0x24
   1e9ac:	ldr	r2, [r4, #48]	; 0x30
   1e9b0:	ldr	r3, [r4, #28]
   1e9b4:	cmp	lr, r2
   1e9b8:	movge	lr, r2
   1e9bc:	cmp	lr, r3
   1e9c0:	bgt	1e9cc <__assert_fail@plt+0xd770>
   1e9c4:	b	1e9f4 <__assert_fail@plt+0xd798>
   1e9c8:	ldr	r1, [r4, #64]	; 0x40
   1e9cc:	ldr	r2, [r4]
   1e9d0:	ldr	ip, [r4, #24]
   1e9d4:	add	r2, r2, r3
   1e9d8:	ldr	r0, [r4, #4]
   1e9dc:	ldrb	r2, [r2, ip]
   1e9e0:	ldrb	r2, [r1, r2]
   1e9e4:	strb	r2, [r0, r3]
   1e9e8:	add	r3, r3, #1
   1e9ec:	cmp	lr, r3
   1e9f0:	bne	1e9c8 <__assert_fail@plt+0xd76c>
   1e9f4:	str	r3, [r4, #28]
   1e9f8:	str	r3, [r4, #32]
   1e9fc:	mov	r0, r5
   1ea00:	pop	{r4, r5, r6, pc}
   1ea04:	mov	r5, #12
   1ea08:	mov	r0, r5
   1ea0c:	pop	{r4, r5, r6, pc}
   1ea10:	mov	r0, r4
   1ea14:	bl	1e188 <__assert_fail@plt+0xcf2c>
   1ea18:	mov	r0, r5
   1ea1c:	pop	{r4, r5, r6, pc}
   1ea20:	bl	1e8a0 <__assert_fail@plt+0xd644>
   1ea24:	b	1e9fc <__assert_fail@plt+0xd7a0>
   1ea28:	push	{r4, lr}
   1ea2c:	mov	r4, r0
   1ea30:	ldr	r0, [r0]
   1ea34:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ea38:	ldr	r0, [r4, #4]
   1ea3c:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ea40:	ldr	r0, [r4, #8]
   1ea44:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ea48:	ldr	r0, [r4, #12]
   1ea4c:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ea50:	mov	r0, r4
   1ea54:	pop	{r4, lr}
   1ea58:	b	13098 <__assert_fail@plt+0x1e3c>
   1ea5c:	ldr	r3, [pc, #36]	; 1ea88 <__assert_fail@plt+0xd82c>
   1ea60:	ldr	r2, [r0, #4]
   1ea64:	and	r3, r3, r2
   1ea68:	cmp	r3, #6
   1ea6c:	beq	1ea80 <__assert_fail@plt+0xd824>
   1ea70:	cmp	r3, #3
   1ea74:	bxne	lr
   1ea78:	ldr	r0, [r0]
   1ea7c:	b	13098 <__assert_fail@plt+0x1e3c>
   1ea80:	ldr	r0, [r0]
   1ea84:	b	1ea28 <__assert_fail@plt+0xd7cc>
   1ea88:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   1ea8c:	add	r0, r1, #20
   1ea90:	push	{r4, lr}
   1ea94:	bl	1ea5c <__assert_fail@plt+0xd800>
   1ea98:	mov	r0, #0
   1ea9c:	pop	{r4, pc}
   1eaa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eaa4:	sub	sp, sp, #12
   1eaa8:	ldmib	r0, {r5, ip}
   1eaac:	stm	sp, {r1, r2}
   1eab0:	mov	r4, r0
   1eab4:	cmp	ip, r5
   1eab8:	mov	r8, sp
   1eabc:	ldrb	r6, [sp, #4]
   1eac0:	bcs	1eb80 <__assert_fail@plt+0xd924>
   1eac4:	ldr	r7, [r0, #12]
   1eac8:	ldr	r5, [r0, #20]
   1eacc:	ldm	r8, {r0, r1}
   1ead0:	ldr	r3, [r4]
   1ead4:	cmp	r6, #5
   1ead8:	add	r3, r3, ip, lsl #3
   1eadc:	bic	r2, r1, #261120	; 0x3fc00
   1eae0:	bic	r2, r2, #768	; 0x300
   1eae4:	stm	r3, {r0, r1}
   1eae8:	str	r2, [r3, #4]
   1eaec:	beq	1eb6c <__assert_fail@plt+0xd910>
   1eaf0:	sub	r6, r6, #6
   1eaf4:	clz	r6, r6
   1eaf8:	lsr	r6, r6, #5
   1eafc:	ldrb	r2, [r3, #6]
   1eb00:	mvn	r1, #0
   1eb04:	bic	r2, r2, #16
   1eb08:	orr	r2, r2, r6, lsl #4
   1eb0c:	strb	r2, [r3, #6]
   1eb10:	str	r1, [r7, ip, lsl #2]
   1eb14:	ldr	r3, [r4, #8]
   1eb18:	mov	r2, #0
   1eb1c:	add	r3, r3, r3, lsl #1
   1eb20:	lsl	r3, r3, #2
   1eb24:	add	r1, r5, r3
   1eb28:	str	r2, [r5, r3]
   1eb2c:	str	r2, [r1, #4]
   1eb30:	str	r2, [r1, #8]
   1eb34:	ldr	r3, [r4, #8]
   1eb38:	ldr	r0, [r4, #24]
   1eb3c:	add	r3, r3, r3, lsl #1
   1eb40:	lsl	r3, r3, #2
   1eb44:	add	r1, r0, r3
   1eb48:	str	r2, [r0, r3]
   1eb4c:	str	r2, [r1, #4]
   1eb50:	str	r2, [r1, #8]
   1eb54:	ldr	r3, [r4, #8]
   1eb58:	mov	r0, r3
   1eb5c:	add	r3, r3, #1
   1eb60:	str	r3, [r4, #8]
   1eb64:	add	sp, sp, #12
   1eb68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb6c:	ldr	r6, [r4, #92]	; 0x5c
   1eb70:	cmp	r6, #1
   1eb74:	movle	r6, #0
   1eb78:	movgt	r6, #1
   1eb7c:	b	1eafc <__assert_fail@plt+0xd8a0>
   1eb80:	ldr	r3, [pc, #200]	; 1ec50 <__assert_fail@plt+0xd9f4>
   1eb84:	lsl	r9, r5, #1
   1eb88:	cmp	r9, r3
   1eb8c:	bhi	1ec48 <__assert_fail@plt+0xd9ec>
   1eb90:	lsl	r1, r5, #4
   1eb94:	ldr	r0, [r0]
   1eb98:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   1eb9c:	cmp	r0, #0
   1eba0:	beq	1ec48 <__assert_fail@plt+0xd9ec>
   1eba4:	lsl	sl, r5, #3
   1eba8:	mov	r1, sl
   1ebac:	str	r0, [r4]
   1ebb0:	ldr	r0, [r4, #12]
   1ebb4:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   1ebb8:	mov	r1, sl
   1ebbc:	add	r5, r9, r5, lsl #2
   1ebc0:	lsl	sl, r5, #2
   1ebc4:	mov	r7, r0
   1ebc8:	ldr	r0, [r4, #16]
   1ebcc:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   1ebd0:	mov	r1, sl
   1ebd4:	mov	fp, r0
   1ebd8:	ldr	r0, [r4, #20]
   1ebdc:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   1ebe0:	mov	r1, sl
   1ebe4:	mov	r5, r0
   1ebe8:	ldr	r0, [r4, #24]
   1ebec:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   1ebf0:	cmp	fp, #0
   1ebf4:	cmpne	r7, #0
   1ebf8:	mov	sl, r0
   1ebfc:	beq	1ec28 <__assert_fail@plt+0xd9cc>
   1ec00:	cmp	r0, #0
   1ec04:	cmpne	r5, #0
   1ec08:	beq	1ec28 <__assert_fail@plt+0xd9cc>
   1ec0c:	ldr	ip, [r4, #8]
   1ec10:	str	r7, [r4, #12]
   1ec14:	str	fp, [r4, #16]
   1ec18:	str	r5, [r4, #20]
   1ec1c:	str	r0, [r4, #24]
   1ec20:	str	r9, [r4, #4]
   1ec24:	b	1eacc <__assert_fail@plt+0xd870>
   1ec28:	mov	r0, r7
   1ec2c:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ec30:	mov	r0, fp
   1ec34:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ec38:	mov	r0, r5
   1ec3c:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ec40:	mov	r0, sl
   1ec44:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ec48:	mvn	r0, #0
   1ec4c:	b	1eb64 <__assert_fail@plt+0xd908>
   1ec50:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   1ec54:	ldr	r3, [r0]
   1ec58:	push	{r4, r5, r6, r7, r8, lr}
   1ec5c:	lsl	r7, r1, #3
   1ec60:	add	r3, r3, r7
   1ec64:	mov	r5, r1
   1ec68:	mov	r6, r2
   1ec6c:	ldm	r3, {r1, r2}
   1ec70:	mov	r4, r0
   1ec74:	bl	1eaa0 <__assert_fail@plt+0xd844>
   1ec78:	cmn	r0, #1
   1ec7c:	popeq	{r4, r5, r6, r7, r8, pc}
   1ec80:	ldr	lr, [r4]
   1ec84:	ldr	ip, [pc, #80]	; 1ecdc <__assert_fail@plt+0xda80>
   1ec88:	add	r1, lr, r0, lsl #3
   1ec8c:	ldr	r8, [pc, #76]	; 1ece0 <__assert_fail@plt+0xda84>
   1ec90:	ldr	r3, [r1, #4]
   1ec94:	and	r2, r6, ip
   1ec98:	add	r7, lr, r7
   1ec9c:	bic	r3, r3, r8
   1eca0:	orr	r3, r3, r2, lsl #8
   1eca4:	str	r3, [r1, #4]
   1eca8:	ldr	lr, [r7, #4]
   1ecac:	bic	r3, r3, r8
   1ecb0:	and	ip, ip, lr, lsr #8
   1ecb4:	orr	r2, r2, ip
   1ecb8:	orr	r3, r3, r2, lsl #8
   1ecbc:	str	r3, [r1, #4]
   1ecc0:	lsr	r3, r3, #16
   1ecc4:	uxtb	r3, r3
   1ecc8:	orr	r3, r3, #4
   1eccc:	strb	r3, [r1, #6]
   1ecd0:	ldr	r3, [r4, #16]
   1ecd4:	str	r5, [r3, r0, lsl #2]
   1ecd8:	pop	{r4, r5, r6, r7, r8, pc}
   1ecdc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1ece0:	andeq	pc, r3, r0, lsl #30
   1ece4:	push	{r4, lr}
   1ece8:	mov	r4, r0
   1ecec:	ldr	r0, [r0, #24]
   1ecf0:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ecf4:	ldr	r0, [r4, #36]	; 0x24
   1ecf8:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ecfc:	ldr	r3, [r4, #40]	; 0x28
   1ed00:	add	r2, r4, #4
   1ed04:	cmp	r3, r2
   1ed08:	beq	1ed1c <__assert_fail@plt+0xdac0>
   1ed0c:	ldr	r0, [r3, #8]
   1ed10:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ed14:	ldr	r0, [r4, #40]	; 0x28
   1ed18:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ed1c:	ldr	r0, [r4, #12]
   1ed20:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ed24:	ldr	r0, [r4, #48]	; 0x30
   1ed28:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ed2c:	ldr	r0, [r4, #44]	; 0x2c
   1ed30:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ed34:	mov	r0, r4
   1ed38:	pop	{r4, lr}
   1ed3c:	b	13098 <__assert_fail@plt+0x1e3c>
   1ed40:	push	{r4, lr}
   1ed44:	mov	r4, r0
   1ed48:	ldr	r0, [r0, #8]
   1ed4c:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ed50:	ldr	r0, [r4, #12]
   1ed54:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ed58:	ldrb	r3, [r4, #75]	; 0x4b
   1ed5c:	cmp	r3, #0
   1ed60:	popeq	{r4, pc}
   1ed64:	ldr	r0, [r4, #4]
   1ed68:	pop	{r4, lr}
   1ed6c:	b	13098 <__assert_fail@plt+0x1e3c>
   1ed70:	push	{r4, r5, r6, r7, r8, lr}
   1ed74:	mov	r6, r0
   1ed78:	ldr	r0, [r0]
   1ed7c:	cmp	r0, #0
   1ed80:	beq	1edb4 <__assert_fail@plt+0xdb58>
   1ed84:	ldr	r3, [r6, #8]
   1ed88:	cmp	r3, #0
   1ed8c:	beq	1edb4 <__assert_fail@plt+0xdb58>
   1ed90:	mov	r4, #0
   1ed94:	b	1ed9c <__assert_fail@plt+0xdb40>
   1ed98:	ldr	r0, [r6]
   1ed9c:	add	r0, r0, r4, lsl #3
   1eda0:	bl	1ea5c <__assert_fail@plt+0xd800>
   1eda4:	ldr	r3, [r6, #8]
   1eda8:	add	r4, r4, #1
   1edac:	cmp	r3, r4
   1edb0:	bhi	1ed98 <__assert_fail@plt+0xdb3c>
   1edb4:	ldr	r0, [r6, #12]
   1edb8:	bl	13098 <__assert_fail@plt+0x1e3c>
   1edbc:	ldr	r3, [r6, #8]
   1edc0:	cmp	r3, #0
   1edc4:	movne	r4, #0
   1edc8:	movne	r5, r4
   1edcc:	beq	1ee2c <__assert_fail@plt+0xdbd0>
   1edd0:	ldr	r3, [r6, #24]
   1edd4:	add	r5, r5, #1
   1edd8:	cmp	r3, #0
   1eddc:	add	r2, r3, r4
   1ede0:	beq	1edec <__assert_fail@plt+0xdb90>
   1ede4:	ldr	r0, [r2, #8]
   1ede8:	bl	13098 <__assert_fail@plt+0x1e3c>
   1edec:	ldr	r3, [r6, #28]
   1edf0:	cmp	r3, #0
   1edf4:	add	r2, r3, r4
   1edf8:	beq	1ee04 <__assert_fail@plt+0xdba8>
   1edfc:	ldr	r0, [r2, #8]
   1ee00:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ee04:	ldr	r3, [r6, #20]
   1ee08:	cmp	r3, #0
   1ee0c:	add	r2, r3, r4
   1ee10:	beq	1ee1c <__assert_fail@plt+0xdbc0>
   1ee14:	ldr	r0, [r2, #8]
   1ee18:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ee1c:	ldr	r3, [r6, #8]
   1ee20:	add	r4, r4, #12
   1ee24:	cmp	r3, r5
   1ee28:	bhi	1edd0 <__assert_fail@plt+0xdb74>
   1ee2c:	ldr	r0, [r6, #20]
   1ee30:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ee34:	ldr	r0, [r6, #24]
   1ee38:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ee3c:	ldr	r0, [r6, #28]
   1ee40:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ee44:	ldr	r0, [r6]
   1ee48:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ee4c:	ldr	r0, [r6, #32]
   1ee50:	cmp	r0, #0
   1ee54:	beq	1eeb4 <__assert_fail@plt+0xdc58>
   1ee58:	mov	r7, #0
   1ee5c:	mov	r8, r7
   1ee60:	ldr	r3, [r0, r7]
   1ee64:	add	r5, r0, r7
   1ee68:	cmp	r3, #0
   1ee6c:	movgt	r4, #0
   1ee70:	ble	1ee90 <__assert_fail@plt+0xdc34>
   1ee74:	ldr	r3, [r5, #8]
   1ee78:	ldr	r0, [r3, r4, lsl #2]
   1ee7c:	bl	1ece4 <__assert_fail@plt+0xda88>
   1ee80:	ldr	r3, [r5]
   1ee84:	add	r4, r4, #1
   1ee88:	cmp	r3, r4
   1ee8c:	bgt	1ee74 <__assert_fail@plt+0xdc18>
   1ee90:	ldr	r0, [r5, #8]
   1ee94:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ee98:	ldr	r3, [r6, #68]	; 0x44
   1ee9c:	add	r8, r8, #1
   1eea0:	cmp	r3, r8
   1eea4:	add	r7, r7, #12
   1eea8:	ldrcs	r0, [r6, #32]
   1eeac:	bcs	1ee60 <__assert_fail@plt+0xdc04>
   1eeb0:	ldr	r0, [r6, #32]
   1eeb4:	bl	13098 <__assert_fail@plt+0x1e3c>
   1eeb8:	ldr	r0, [r6, #60]	; 0x3c
   1eebc:	ldr	r3, [pc, #28]	; 1eee0 <__assert_fail@plt+0xdc84>
   1eec0:	cmp	r0, r3
   1eec4:	beq	1eecc <__assert_fail@plt+0xdc70>
   1eec8:	bl	13098 <__assert_fail@plt+0x1e3c>
   1eecc:	ldr	r0, [r6, #132]	; 0x84
   1eed0:	bl	13098 <__assert_fail@plt+0x1e3c>
   1eed4:	mov	r0, r6
   1eed8:	pop	{r4, r5, r6, r7, r8, lr}
   1eedc:	b	13098 <__assert_fail@plt+0x1e3c>
   1eee0:			; <UNDEFINED> instruction: 0x0002dcb4
   1eee4:	ldr	r3, [r0, #124]	; 0x7c
   1eee8:	push	{r4, r5, r6, r7, r8, lr}
   1eeec:	cmp	r3, #0
   1eef0:	mov	r8, r0
   1eef4:	movgt	r7, #0
   1eef8:	ble	1ef78 <__assert_fail@plt+0xdd1c>
   1eefc:	ldr	r3, [r8, #132]	; 0x84
   1ef00:	ldr	r6, [r3, r7, lsl #2]
   1ef04:	ldr	r3, [r6, #16]
   1ef08:	cmp	r3, #0
   1ef0c:	movgt	r4, #0
   1ef10:	ble	1ef3c <__assert_fail@plt+0xdce0>
   1ef14:	ldr	r3, [r6, #20]
   1ef18:	ldr	r5, [r3, r4, lsl #2]
   1ef1c:	add	r4, r4, #1
   1ef20:	ldr	r0, [r5, #16]
   1ef24:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ef28:	mov	r0, r5
   1ef2c:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ef30:	ldr	r3, [r6, #16]
   1ef34:	cmp	r3, r4
   1ef38:	bgt	1ef14 <__assert_fail@plt+0xdcb8>
   1ef3c:	ldr	r0, [r6, #20]
   1ef40:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ef44:	ldr	r3, [r6, #8]
   1ef48:	cmp	r3, #0
   1ef4c:	beq	1ef60 <__assert_fail@plt+0xdd04>
   1ef50:	ldr	r0, [r3, #8]
   1ef54:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ef58:	ldr	r0, [r6, #8]
   1ef5c:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ef60:	mov	r0, r6
   1ef64:	bl	13098 <__assert_fail@plt+0x1e3c>
   1ef68:	ldr	r3, [r8, #124]	; 0x7c
   1ef6c:	add	r7, r7, #1
   1ef70:	cmp	r3, r7
   1ef74:	bgt	1eefc <__assert_fail@plt+0xdca0>
   1ef78:	mov	r3, #0
   1ef7c:	str	r3, [r8, #124]	; 0x7c
   1ef80:	str	r3, [r8, #108]	; 0x6c
   1ef84:	pop	{r4, r5, r6, r7, r8, pc}
   1ef88:	push	{r4, r5, r6, lr}
   1ef8c:	subs	r5, r0, #0
   1ef90:	beq	1efe4 <__assert_fail@plt+0xdd88>
   1ef94:	ldr	r3, [r5]
   1ef98:	cmp	r3, #0
   1ef9c:	movgt	r4, #0
   1efa0:	movgt	r6, r4
   1efa4:	ble	1efdc <__assert_fail@plt+0xdd80>
   1efa8:	ldr	r3, [r5, #8]
   1efac:	add	r6, r6, #1
   1efb0:	add	r3, r3, r4
   1efb4:	ldr	r0, [r3, #20]
   1efb8:	bl	13098 <__assert_fail@plt+0x1e3c>
   1efbc:	ldr	r3, [r5, #8]
   1efc0:	add	r3, r3, r4
   1efc4:	add	r4, r4, #24
   1efc8:	ldr	r0, [r3, #8]
   1efcc:	bl	13098 <__assert_fail@plt+0x1e3c>
   1efd0:	ldr	r3, [r5]
   1efd4:	cmp	r3, r6
   1efd8:	bgt	1efa8 <__assert_fail@plt+0xdd4c>
   1efdc:	ldr	r0, [r5, #8]
   1efe0:	bl	13098 <__assert_fail@plt+0x1e3c>
   1efe4:	mov	r0, #0
   1efe8:	pop	{r4, r5, r6, pc}
   1efec:	ldr	r3, [r0]
   1eff0:	push	{r4, r5, r6, lr}
   1eff4:	cmp	r3, #0
   1eff8:	mov	r4, r0
   1effc:	mov	r6, r1
   1f000:	beq	1f02c <__assert_fail@plt+0xddd0>
   1f004:	ldr	r1, [r0, #4]
   1f008:	cmp	r1, #0
   1f00c:	bne	1f05c <__assert_fail@plt+0xde00>
   1f010:	ldr	r3, [r0, #8]
   1f014:	mov	r0, #1
   1f018:	str	r6, [r3]
   1f01c:	ldr	r3, [r4, #4]
   1f020:	add	r3, r3, r0
   1f024:	str	r3, [r4, #4]
   1f028:	pop	{r4, r5, r6, pc}
   1f02c:	mov	r5, #1
   1f030:	str	r5, [r0]
   1f034:	str	r5, [r0, #4]
   1f038:	mov	r0, #4
   1f03c:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   1f040:	cmp	r0, #0
   1f044:	str	r0, [r4, #8]
   1f048:	strne	r6, [r0]
   1f04c:	streq	r0, [r4, #4]
   1f050:	streq	r0, [r4]
   1f054:	movne	r0, r5
   1f058:	pop	{r4, r5, r6, pc}
   1f05c:	cmp	r3, r1
   1f060:	beq	1f0e0 <__assert_fail@plt+0xde84>
   1f064:	ldr	r0, [r0, #8]
   1f068:	ldr	r3, [r0]
   1f06c:	cmp	r6, r3
   1f070:	bge	1f0ac <__assert_fail@plt+0xde50>
   1f074:	cmp	r1, #0
   1f078:	ble	1f094 <__assert_fail@plt+0xde38>
   1f07c:	add	r1, r0, r1, lsl #2
   1f080:	ldr	r3, [r1, #-4]
   1f084:	str	r3, [r1], #-4
   1f088:	cmp	r0, r1
   1f08c:	bne	1f080 <__assert_fail@plt+0xde24>
   1f090:	mov	r1, #0
   1f094:	str	r6, [r0, r1, lsl #2]
   1f098:	ldr	r3, [r4, #4]
   1f09c:	mov	r0, #1
   1f0a0:	add	r3, r3, r0
   1f0a4:	str	r3, [r4, #4]
   1f0a8:	pop	{r4, r5, r6, pc}
   1f0ac:	sub	r3, r1, #-1073741823	; 0xc0000001
   1f0b0:	ldr	r2, [r0, r3, lsl #2]
   1f0b4:	lsl	r3, r3, #2
   1f0b8:	cmp	r6, r2
   1f0bc:	bge	1f094 <__assert_fail@plt+0xde38>
   1f0c0:	add	r3, r3, #4
   1f0c4:	add	r3, r0, r3
   1f0c8:	str	r2, [r3], #-4
   1f0cc:	ldr	r2, [r3, #-4]
   1f0d0:	sub	r1, r1, #1
   1f0d4:	cmp	r6, r2
   1f0d8:	blt	1f0c8 <__assert_fail@plt+0xde6c>
   1f0dc:	b	1f094 <__assert_fail@plt+0xde38>
   1f0e0:	lsl	r3, r1, #1
   1f0e4:	str	r3, [r0]
   1f0e8:	lsl	r1, r1, #3
   1f0ec:	ldr	r0, [r0, #8]
   1f0f0:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   1f0f4:	cmp	r0, #0
   1f0f8:	popeq	{r4, r5, r6, pc}
   1f0fc:	ldr	r1, [r4, #4]
   1f100:	str	r0, [r4, #8]
   1f104:	b	1f068 <__assert_fail@plt+0xde0c>
   1f108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f10c:	sub	sp, sp, #20
   1f110:	ldr	r8, [pc, #680]	; 1f3c0 <__assert_fail@plt+0xe164>
   1f114:	ldr	r7, [sp, #56]	; 0x38
   1f118:	mov	r6, r0
   1f11c:	mov	fp, r1
   1f120:	mov	r9, r2
   1f124:	str	r3, [sp, #12]
   1f128:	ldr	sl, [r6]
   1f12c:	add	r3, sl, fp, lsl #3
   1f130:	ldrb	r2, [r3, #4]
   1f134:	cmp	r2, #4
   1f138:	beq	1f328 <__assert_fail@plt+0xe0cc>
   1f13c:	add	r4, fp, fp, lsl #1
   1f140:	ldr	r0, [r6, #20]
   1f144:	lsl	r4, r4, #2
   1f148:	add	ip, r0, r4
   1f14c:	ldr	r2, [ip, #4]
   1f150:	cmp	r2, #0
   1f154:	beq	1f394 <__assert_fail@plt+0xe138>
   1f158:	cmp	r2, #1
   1f15c:	beq	1f2a8 <__assert_fail@plt+0xe04c>
   1f160:	ldr	r2, [r6, #8]
   1f164:	add	r9, r9, r9, lsl #1
   1f168:	sub	r1, r2, #1
   1f16c:	cmp	r1, #0
   1f170:	add	r3, sl, r1, lsl #3
   1f174:	lsl	r5, r9, #2
   1f178:	ldrb	lr, [r3, #6]
   1f17c:	ldr	r9, [ip, #8]
   1f180:	add	r0, r0, r5
   1f184:	movle	ip, #0
   1f188:	movgt	ip, #1
   1f18c:	ands	ip, ip, lr, lsr #2
   1f190:	mov	ip, #0
   1f194:	ldr	r9, [r9]
   1f198:	str	ip, [r0, #4]
   1f19c:	beq	1f250 <__assert_fail@plt+0xdff4>
   1f1a0:	ldr	ip, [r6, #16]
   1f1a4:	rsb	fp, r3, r2, lsl #3
   1f1a8:	sub	fp, fp, #16
   1f1ac:	add	r2, ip, r2, lsl #2
   1f1b0:	b	1f1d4 <__assert_fail@plt+0xdf78>
   1f1b4:	add	r3, sl, lr
   1f1b8:	sub	r1, r1, #1
   1f1bc:	ldrb	lr, [r3, #6]
   1f1c0:	cmp	r1, #0
   1f1c4:	movle	ip, #0
   1f1c8:	movgt	ip, #1
   1f1cc:	ands	ip, ip, lr, lsr #2
   1f1d0:	beq	1f250 <__assert_fail@plt+0xdff4>
   1f1d4:	ldr	ip, [r2, #-4]!
   1f1d8:	add	lr, r3, fp
   1f1dc:	cmp	r9, ip
   1f1e0:	bne	1f1b4 <__assert_fail@plt+0xdf58>
   1f1e4:	ldr	r3, [r3, #4]
   1f1e8:	and	r3, r8, r3, lsr #8
   1f1ec:	cmp	r7, r3
   1f1f0:	bne	1f1b4 <__assert_fail@plt+0xdf58>
   1f1f4:	bl	1efec <__assert_fail@plt+0xdd90>
   1f1f8:	cmp	r0, #0
   1f1fc:	beq	1f244 <__assert_fail@plt+0xdfe8>
   1f200:	ldr	r3, [r6, #20]
   1f204:	mov	r2, r7
   1f208:	add	r4, r3, r4
   1f20c:	mov	r0, r6
   1f210:	ldr	r3, [r4, #8]
   1f214:	ldr	fp, [r3, #4]
   1f218:	mov	r1, fp
   1f21c:	bl	1ec54 <__assert_fail@plt+0xd9f8>
   1f220:	cmn	r0, #1
   1f224:	mov	r9, r0
   1f228:	beq	1f244 <__assert_fail@plt+0xdfe8>
   1f22c:	ldr	r0, [r6, #20]
   1f230:	mov	r1, r9
   1f234:	add	r0, r0, r5
   1f238:	bl	1efec <__assert_fail@plt+0xdd90>
   1f23c:	cmp	r0, #0
   1f240:	bne	1f128 <__assert_fail@plt+0xdecc>
   1f244:	mov	r0, #12
   1f248:	add	sp, sp, #20
   1f24c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f250:	mov	r2, r7
   1f254:	mov	r1, r9
   1f258:	mov	r0, r6
   1f25c:	bl	1ec54 <__assert_fail@plt+0xd9f8>
   1f260:	cmn	r0, #1
   1f264:	mov	sl, r0
   1f268:	beq	1f244 <__assert_fail@plt+0xdfe8>
   1f26c:	ldr	r0, [r6, #20]
   1f270:	mov	r1, sl
   1f274:	add	r0, r0, r5
   1f278:	bl	1efec <__assert_fail@plt+0xdd90>
   1f27c:	cmp	r0, #0
   1f280:	beq	1f244 <__assert_fail@plt+0xdfe8>
   1f284:	str	r7, [sp]
   1f288:	mov	r2, sl
   1f28c:	mov	r1, r9
   1f290:	ldr	r3, [sp, #12]
   1f294:	mov	r0, r6
   1f298:	bl	1f108 <__assert_fail@plt+0xdeac>
   1f29c:	cmp	r0, #0
   1f2a0:	beq	1f200 <__assert_fail@plt+0xdfa4>
   1f2a4:	b	1f248 <__assert_fail@plt+0xdfec>
   1f2a8:	add	r4, r9, r9, lsl #1
   1f2ac:	ldr	r2, [ip, #8]
   1f2b0:	ldr	r1, [sp, #12]
   1f2b4:	cmp	fp, r9
   1f2b8:	lsl	r4, r4, #2
   1f2bc:	sub	r1, fp, r1
   1f2c0:	add	r0, r0, r4
   1f2c4:	clz	r1, r1
   1f2c8:	lsr	r1, r1, #5
   1f2cc:	moveq	r1, #0
   1f2d0:	ldr	fp, [r2]
   1f2d4:	cmp	r1, #0
   1f2d8:	mov	r2, #0
   1f2dc:	str	r2, [r0, #4]
   1f2e0:	bne	1f3a8 <__assert_fail@plt+0xe14c>
   1f2e4:	ldr	r3, [r3, #4]
   1f2e8:	mov	r1, fp
   1f2ec:	mov	r0, r6
   1f2f0:	and	r3, r8, r3, lsr #8
   1f2f4:	orr	r7, r7, r3
   1f2f8:	mov	r2, r7
   1f2fc:	bl	1ec54 <__assert_fail@plt+0xd9f8>
   1f300:	cmn	r0, #1
   1f304:	mov	r9, r0
   1f308:	beq	1f244 <__assert_fail@plt+0xdfe8>
   1f30c:	ldr	r0, [r6, #20]
   1f310:	mov	r1, r9
   1f314:	add	r0, r0, r4
   1f318:	bl	1efec <__assert_fail@plt+0xdd90>
   1f31c:	cmp	r0, #0
   1f320:	bne	1f128 <__assert_fail@plt+0xdecc>
   1f324:	b	1f244 <__assert_fail@plt+0xdfe8>
   1f328:	ldr	r2, [r6, #12]
   1f32c:	add	r4, r9, r9, lsl #1
   1f330:	ldr	r3, [r6, #20]
   1f334:	lsl	r4, r4, #2
   1f338:	add	r3, r3, r4
   1f33c:	lsl	sl, fp, #2
   1f340:	ldr	fp, [r2, fp, lsl #2]
   1f344:	mov	r1, #0
   1f348:	str	r1, [r3, #4]
   1f34c:	mov	r2, r7
   1f350:	mov	r1, fp
   1f354:	mov	r0, r6
   1f358:	bl	1ec54 <__assert_fail@plt+0xd9f8>
   1f35c:	mov	r5, r9
   1f360:	cmn	r0, #1
   1f364:	mov	r9, r0
   1f368:	beq	1f244 <__assert_fail@plt+0xdfe8>
   1f36c:	ldr	r3, [r6, #12]
   1f370:	ldr	r0, [r6, #20]
   1f374:	mov	r1, r9
   1f378:	ldr	r2, [r3, sl]
   1f37c:	add	r0, r0, r4
   1f380:	str	r2, [r3, r5, lsl #2]
   1f384:	bl	1efec <__assert_fail@plt+0xdd90>
   1f388:	cmp	r0, #0
   1f38c:	bne	1f128 <__assert_fail@plt+0xdecc>
   1f390:	b	1f244 <__assert_fail@plt+0xdfe8>
   1f394:	ldr	r3, [r6, #12]
   1f398:	mov	r0, r2
   1f39c:	ldr	r2, [r3, fp, lsl #2]
   1f3a0:	str	r2, [r3, r9, lsl #2]
   1f3a4:	b	1f248 <__assert_fail@plt+0xdfec>
   1f3a8:	mov	r1, fp
   1f3ac:	bl	1efec <__assert_fail@plt+0xdd90>
   1f3b0:	cmp	r0, #0
   1f3b4:	movne	r0, #0
   1f3b8:	bne	1f248 <__assert_fail@plt+0xdfec>
   1f3bc:	b	1f244 <__assert_fail@plt+0xdfe8>
   1f3c0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1f3c4:	ldr	r3, [r0, #36]	; 0x24
   1f3c8:	push	{r4, r5, r6, lr}
   1f3cc:	cmp	r3, r1
   1f3d0:	mov	r4, r0
   1f3d4:	mov	r5, r1
   1f3d8:	ldr	r6, [r0, #104]	; 0x68
   1f3dc:	bgt	1f430 <__assert_fail@plt+0xe1d4>
   1f3e0:	ldr	r2, [r0, #48]	; 0x30
   1f3e4:	cmp	r3, r2
   1f3e8:	bge	1f430 <__assert_fail@plt+0xe1d4>
   1f3ec:	add	r1, r5, #1
   1f3f0:	mov	r0, r4
   1f3f4:	bl	1e910 <__assert_fail@plt+0xd6b4>
   1f3f8:	cmp	r0, #0
   1f3fc:	bne	1f454 <__assert_fail@plt+0xe1f8>
   1f400:	cmp	r6, r5
   1f404:	bge	1f44c <__assert_fail@plt+0xe1f0>
   1f408:	sub	r2, r5, r6
   1f40c:	ldr	r0, [r4, #100]	; 0x64
   1f410:	add	r6, r6, #1
   1f414:	lsl	r2, r2, #2
   1f418:	add	r0, r0, r6, lsl #2
   1f41c:	mov	r1, #0
   1f420:	bl	1119c <memset@plt>
   1f424:	mov	r0, #0
   1f428:	str	r5, [r4, #104]	; 0x68
   1f42c:	pop	{r4, r5, r6, pc}
   1f430:	ldr	r3, [r4, #28]
   1f434:	cmp	r5, r3
   1f438:	blt	1f400 <__assert_fail@plt+0xe1a4>
   1f43c:	ldr	r2, [r4, #48]	; 0x30
   1f440:	cmp	r3, r2
   1f444:	bge	1f400 <__assert_fail@plt+0xe1a4>
   1f448:	b	1f3ec <__assert_fail@plt+0xe190>
   1f44c:	mov	r0, #0
   1f450:	pop	{r4, r5, r6, pc}
   1f454:	pop	{r4, r5, r6, pc}
   1f458:	push	{r4, r5, r6, r7, r8, lr}
   1f45c:	subs	r4, r0, #0
   1f460:	ldr	r7, [sp, #28]
   1f464:	beq	1f500 <__assert_fail@plt+0xe2a4>
   1f468:	ldr	ip, [r4]
   1f46c:	cmp	ip, #0
   1f470:	beq	1f500 <__assert_fail@plt+0xe2a4>
   1f474:	sub	ip, ip, #1
   1f478:	ldr	lr, [r4, #8]
   1f47c:	add	r5, ip, ip, lsl #1
   1f480:	lsl	r6, r2, #3
   1f484:	lsl	r5, r5, #3
   1f488:	add	r2, lr, r5
   1f48c:	mov	r0, r3
   1f490:	mov	r8, r1
   1f494:	ldr	r3, [lr, r5]
   1f498:	ldr	r1, [r2, #8]
   1f49c:	str	ip, [r4]
   1f4a0:	mov	r2, r6
   1f4a4:	str	r3, [r8]
   1f4a8:	bl	11004 <memcpy@plt>
   1f4ac:	ldr	r3, [r4, #8]
   1f4b0:	mov	r2, r6
   1f4b4:	add	r3, r3, r5
   1f4b8:	ldr	r0, [sp, #24]
   1f4bc:	ldr	r1, [r3, #8]
   1f4c0:	add	r1, r1, r6
   1f4c4:	bl	11004 <memcpy@plt>
   1f4c8:	ldr	r0, [r7, #8]
   1f4cc:	bl	13098 <__assert_fail@plt+0x1e3c>
   1f4d0:	ldr	r3, [r4, #8]
   1f4d4:	add	r3, r3, r5
   1f4d8:	ldr	r0, [r3, #8]
   1f4dc:	bl	13098 <__assert_fail@plt+0x1e3c>
   1f4e0:	ldr	r3, [r4, #8]
   1f4e4:	add	r5, r3, r5
   1f4e8:	add	r3, r5, #12
   1f4ec:	ldr	ip, [r5, #4]
   1f4f0:	ldm	r3, {r0, r1, r2}
   1f4f4:	stm	r7, {r0, r1, r2}
   1f4f8:	mov	r0, ip
   1f4fc:	pop	{r4, r5, r6, r7, r8, pc}
   1f500:	mvn	ip, #0
   1f504:	b	1f4f8 <__assert_fail@plt+0xe29c>
   1f508:	ldr	r2, [r0, #4]
   1f50c:	ldr	r3, [r1, #4]
   1f510:	cmp	r2, r3
   1f514:	beq	1f520 <__assert_fail@plt+0xe2c4>
   1f518:	mov	r0, #0
   1f51c:	bx	lr
   1f520:	sub	r2, r2, #1
   1f524:	cmp	r2, #0
   1f528:	lsl	r3, r2, #2
   1f52c:	sub	r2, r2, #1
   1f530:	blt	1f574 <__assert_fail@plt+0xe318>
   1f534:	push	{lr}		; (str lr, [sp, #-4]!)
   1f538:	b	1f548 <__assert_fail@plt+0xe2ec>
   1f53c:	cmp	r2, #0
   1f540:	sub	r2, r2, #1
   1f544:	blt	1f56c <__assert_fail@plt+0xe310>
   1f548:	ldr	lr, [r0, #8]
   1f54c:	ldr	ip, [r1, #8]
   1f550:	ldr	lr, [lr, r3]
   1f554:	ldr	ip, [ip, r3]
   1f558:	sub	r3, r3, #4
   1f55c:	cmp	lr, ip
   1f560:	beq	1f53c <__assert_fail@plt+0xe2e0>
   1f564:	mov	r0, #0
   1f568:	pop	{pc}		; (ldr pc, [sp], #4)
   1f56c:	mov	r0, #1
   1f570:	pop	{pc}		; (ldr pc, [sp], #4)
   1f574:	mov	r0, #1
   1f578:	bx	lr
   1f57c:	cmp	r0, #0
   1f580:	ble	1f604 <__assert_fail@plt+0xe3a8>
   1f584:	push	{lr}		; (str lr, [sp, #-4]!)
   1f588:	sub	ip, r0, #1
   1f58c:	ldr	lr, [r1]
   1f590:	mov	r0, #0
   1f594:	cmp	r0, ip
   1f598:	bcs	1f5d4 <__assert_fail@plt+0xe378>
   1f59c:	add	r1, r0, ip
   1f5a0:	lsr	r1, r1, #1
   1f5a4:	ldr	r3, [lr, r1, lsl #2]
   1f5a8:	cmp	r2, r3
   1f5ac:	ble	1f5c4 <__assert_fail@plt+0xe368>
   1f5b0:	b	1f5e8 <__assert_fail@plt+0xe38c>
   1f5b4:	ldr	ip, [lr, r3, lsl #2]
   1f5b8:	cmp	ip, r2
   1f5bc:	blt	1f5f0 <__assert_fail@plt+0xe394>
   1f5c0:	mov	r1, r3
   1f5c4:	add	r3, r0, r1
   1f5c8:	cmp	r0, r1
   1f5cc:	lsr	r3, r3, #1
   1f5d0:	bcc	1f5b4 <__assert_fail@plt+0xe358>
   1f5d4:	ldr	r3, [lr, r0, lsl #2]
   1f5d8:	cmp	r2, r3
   1f5dc:	beq	1f5fc <__assert_fail@plt+0xe3a0>
   1f5e0:	mov	r0, #0
   1f5e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f5e8:	mov	r3, r1
   1f5ec:	mov	r1, ip
   1f5f0:	add	r0, r3, #1
   1f5f4:	mov	ip, r1
   1f5f8:	b	1f594 <__assert_fail@plt+0xe338>
   1f5fc:	add	r0, r0, #1
   1f600:	pop	{pc}		; (ldr pc, [sp], #4)
   1f604:	mov	r0, #0
   1f608:	bx	lr
   1f60c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1f610:	sub	sp, sp, #12
   1f614:	mov	r5, r1
   1f618:	mov	r6, r0
   1f61c:	mov	r4, r2
   1f620:	mov	r9, r3
   1f624:	add	r8, r1, #8
   1f628:	ldr	r7, [sp, #40]	; 0x28
   1f62c:	b	1f638 <__assert_fail@plt+0xe3dc>
   1f630:	ldr	r3, [r3, #8]
   1f634:	ldr	r4, [r3]
   1f638:	mov	r1, r8
   1f63c:	mov	r2, r4
   1f640:	ldr	r0, [r5, #4]
   1f644:	bl	1f57c <__assert_fail@plt+0xe320>
   1f648:	mov	r1, r4
   1f64c:	cmp	r0, #0
   1f650:	mov	r0, r5
   1f654:	bne	1f700 <__assert_fail@plt+0xe4a4>
   1f658:	ldr	r3, [r6]
   1f65c:	add	r2, r3, r4, lsl #3
   1f660:	ldrb	r2, [r2, #4]
   1f664:	cmp	r2, r7
   1f668:	bne	1f678 <__assert_fail@plt+0xe41c>
   1f66c:	ldr	r3, [r3, r4, lsl #3]
   1f670:	cmp	r9, r3
   1f674:	beq	1f6d8 <__assert_fail@plt+0xe47c>
   1f678:	bl	1efec <__assert_fail@plt+0xdd90>
   1f67c:	add	r4, r4, r4, lsl #1
   1f680:	lsl	r4, r4, #2
   1f684:	cmp	r0, #0
   1f688:	beq	1f6f4 <__assert_fail@plt+0xe498>
   1f68c:	ldr	r3, [r6, #20]
   1f690:	add	r3, r3, r4
   1f694:	ldr	r2, [r3, #4]
   1f698:	cmp	r2, #0
   1f69c:	beq	1f700 <__assert_fail@plt+0xe4a4>
   1f6a0:	cmp	r2, #2
   1f6a4:	bne	1f630 <__assert_fail@plt+0xe3d4>
   1f6a8:	ldr	r2, [r3, #8]
   1f6ac:	mov	r1, r5
   1f6b0:	mov	r3, r9
   1f6b4:	ldr	r2, [r2, #4]
   1f6b8:	mov	r0, r6
   1f6bc:	str	r7, [sp]
   1f6c0:	bl	1f60c <__assert_fail@plt+0xe3b0>
   1f6c4:	cmp	r0, #0
   1f6c8:	bne	1f6f8 <__assert_fail@plt+0xe49c>
   1f6cc:	ldr	r3, [r6, #20]
   1f6d0:	add	r3, r3, r4
   1f6d4:	b	1f630 <__assert_fail@plt+0xe3d4>
   1f6d8:	cmp	r7, #9
   1f6dc:	bne	1f700 <__assert_fail@plt+0xe4a4>
   1f6e0:	mov	r1, r4
   1f6e4:	mov	r0, r5
   1f6e8:	bl	1efec <__assert_fail@plt+0xdd90>
   1f6ec:	cmp	r0, #0
   1f6f0:	bne	1f700 <__assert_fail@plt+0xe4a4>
   1f6f4:	mov	r0, #12
   1f6f8:	add	sp, sp, #12
   1f6fc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f700:	mov	r0, #0
   1f704:	add	sp, sp, #12
   1f708:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f70c:	ldr	r3, [r0]
   1f710:	cmp	r2, r3
   1f714:	bxge	lr
   1f718:	ldr	r3, [r1]
   1f71c:	add	r3, r3, r2, lsl #2
   1f720:	ldr	r1, [r3, #4]
   1f724:	add	r2, r2, #1
   1f728:	str	r1, [r3], #4
   1f72c:	ldr	r1, [r0]
   1f730:	cmp	r2, r1
   1f734:	blt	1f720 <__assert_fail@plt+0xe4c4>
   1f738:	bx	lr
   1f73c:	ldrb	r3, [r1, #24]
   1f740:	cmp	r3, #4
   1f744:	beq	1f7b0 <__assert_fail@plt+0xe554>
   1f748:	cmp	r3, #17
   1f74c:	beq	1f758 <__assert_fail@plt+0xe4fc>
   1f750:	mov	r0, #0
   1f754:	bx	lr
   1f758:	ldr	r3, [r1, #4]
   1f75c:	cmp	r3, #0
   1f760:	beq	1f750 <__assert_fail@plt+0xe4f4>
   1f764:	ldrb	r2, [r3, #24]
   1f768:	cmp	r2, #17
   1f76c:	bne	1f750 <__assert_fail@plt+0xe4f4>
   1f770:	ldr	r2, [r3, #4]
   1f774:	ldr	r3, [r3, #20]
   1f778:	cmp	r2, #0
   1f77c:	str	r2, [r1, #4]
   1f780:	strne	r1, [r2]
   1f784:	ldr	r2, [r0, #132]	; 0x84
   1f788:	ldr	r1, [r1, #20]
   1f78c:	cmp	r3, #31
   1f790:	ldr	r1, [r2, r1, lsl #2]
   1f794:	str	r1, [r2, r3, lsl #2]
   1f798:	ldrle	r2, [r0, #80]	; 0x50
   1f79c:	movle	r1, #1
   1f7a0:	bicle	r3, r2, r1, lsl r3
   1f7a4:	strle	r3, [r0, #80]	; 0x50
   1f7a8:	mov	r0, #0
   1f7ac:	bx	lr
   1f7b0:	ldr	r2, [r0, #132]	; 0x84
   1f7b4:	cmp	r2, #0
   1f7b8:	beq	1f750 <__assert_fail@plt+0xe4f4>
   1f7bc:	ldr	r3, [r1, #20]
   1f7c0:	mov	ip, #1
   1f7c4:	ldr	r2, [r2, r3, lsl #2]
   1f7c8:	str	r2, [r1, #20]
   1f7cc:	ldr	r3, [r0, #80]	; 0x50
   1f7d0:	orr	r3, r3, ip, lsl r2
   1f7d4:	str	r3, [r0, #80]	; 0x50
   1f7d8:	mov	r0, #0
   1f7dc:	bx	lr
   1f7e0:	ldrb	r3, [r1, #24]
   1f7e4:	cmp	r3, #11
   1f7e8:	beq	1f838 <__assert_fail@plt+0xe5dc>
   1f7ec:	cmp	r3, #16
   1f7f0:	beq	1f81c <__assert_fail@plt+0xe5c0>
   1f7f4:	ldr	r3, [r1, #4]
   1f7f8:	mov	r0, #0
   1f7fc:	cmp	r3, #0
   1f800:	ldrne	r2, [r1, #16]
   1f804:	strne	r2, [r3, #16]
   1f808:	ldr	r3, [r1, #8]
   1f80c:	cmp	r3, #0
   1f810:	ldrne	r2, [r1, #16]
   1f814:	strne	r2, [r3, #16]
   1f818:	bx	lr
   1f81c:	ldmib	r1, {r2, r3}
   1f820:	ldr	r0, [r3, #12]
   1f824:	str	r0, [r2, #16]
   1f828:	ldr	r2, [r1, #16]
   1f82c:	mov	r0, #0
   1f830:	str	r2, [r3, #16]
   1f834:	bx	lr
   1f838:	ldr	r3, [r1, #4]
   1f83c:	mov	r0, #0
   1f840:	str	r1, [r3, #16]
   1f844:	bx	lr
   1f848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f84c:	sub	sp, sp, #28
   1f850:	ldr	r9, [r0, #108]	; 0x6c
   1f854:	ldr	r6, [sp, #64]	; 0x40
   1f858:	ldr	r7, [sp, #72]	; 0x48
   1f85c:	ldr	lr, [r0, #84]	; 0x54
   1f860:	mov	ip, r9
   1f864:	mov	r4, #0
   1f868:	str	lr, [sp, #8]
   1f86c:	cmp	r4, ip
   1f870:	bge	1f8cc <__assert_fail@plt+0xe670>
   1f874:	add	lr, r4, ip
   1f878:	ldr	r5, [r0, #116]	; 0x74
   1f87c:	add	lr, lr, lr, lsr #31
   1f880:	asr	lr, lr, #1
   1f884:	add	r8, lr, lr, lsl #1
   1f888:	add	r8, r5, r8, lsl #3
   1f88c:	ldr	r8, [r8, #4]
   1f890:	cmp	r6, r8
   1f894:	ble	1f8bc <__assert_fail@plt+0xe660>
   1f898:	b	1fa18 <__assert_fail@plt+0xe7bc>
   1f89c:	asr	ip, ip, #1
   1f8a0:	mov	sl, ip
   1f8a4:	add	r8, ip, ip, lsl #1
   1f8a8:	add	r8, r5, r8, lsl #3
   1f8ac:	ldr	r8, [r8, #4]
   1f8b0:	cmp	r8, r6
   1f8b4:	blt	1fa20 <__assert_fail@plt+0xe7c4>
   1f8b8:	mov	lr, ip
   1f8bc:	add	ip, r4, lr
   1f8c0:	cmp	r4, lr
   1f8c4:	add	ip, ip, ip, lsr #31
   1f8c8:	blt	1f89c <__assert_fail@plt+0xe640>
   1f8cc:	cmp	r9, r4
   1f8d0:	mvnle	r4, #0
   1f8d4:	ble	1f8f0 <__assert_fail@plt+0xe694>
   1f8d8:	add	lr, r4, r4, lsl #1
   1f8dc:	ldr	ip, [r0, #116]	; 0x74
   1f8e0:	add	ip, ip, lr, lsl #3
   1f8e4:	ldr	ip, [ip, #4]
   1f8e8:	cmp	r6, ip
   1f8ec:	mvnne	r4, #0
   1f8f0:	mov	ip, r9
   1f8f4:	mov	r5, #0
   1f8f8:	cmp	r5, ip
   1f8fc:	bge	1f958 <__assert_fail@plt+0xe6fc>
   1f900:	add	lr, r5, ip
   1f904:	ldr	r8, [r0, #116]	; 0x74
   1f908:	add	lr, lr, lr, lsr #31
   1f90c:	asr	lr, lr, #1
   1f910:	add	sl, lr, lr, lsl #1
   1f914:	add	sl, r8, sl, lsl #3
   1f918:	ldr	sl, [sl, #4]
   1f91c:	cmp	r7, sl
   1f920:	ble	1f948 <__assert_fail@plt+0xe6ec>
   1f924:	b	1fa2c <__assert_fail@plt+0xe7d0>
   1f928:	asr	ip, ip, #1
   1f92c:	mov	fp, ip
   1f930:	add	sl, ip, ip, lsl #1
   1f934:	add	sl, r8, sl, lsl #3
   1f938:	ldr	sl, [sl, #4]
   1f93c:	cmp	sl, r7
   1f940:	blt	1fa34 <__assert_fail@plt+0xe7d8>
   1f944:	mov	lr, ip
   1f948:	add	ip, r5, lr
   1f94c:	cmp	r5, lr
   1f950:	add	ip, ip, ip, lsr #31
   1f954:	blt	1f928 <__assert_fail@plt+0xe6cc>
   1f958:	cmp	r9, r5
   1f95c:	mvnle	r5, #0
   1f960:	ble	1f97c <__assert_fail@plt+0xe720>
   1f964:	add	lr, r5, r5, lsl #1
   1f968:	ldr	ip, [r0, #116]	; 0x74
   1f96c:	add	ip, ip, lr, lsl #3
   1f970:	ldr	ip, [ip, #4]
   1f974:	cmp	r7, ip
   1f978:	mvnne	r5, #0
   1f97c:	ldr	ip, [r1]
   1f980:	cmp	ip, #0
   1f984:	ble	1fa54 <__assert_fail@plt+0xe7f8>
   1f988:	mov	r9, r2
   1f98c:	mov	r8, r0
   1f990:	mov	fp, #0
   1f994:	str	r3, [sp, #12]
   1f998:	str	r1, [sp, #20]
   1f99c:	str	r4, [sp, #16]
   1f9a0:	ldr	r3, [r9]
   1f9a4:	ldr	r2, [sp, #8]
   1f9a8:	ldr	lr, [r8, #116]	; 0x74
   1f9ac:	mov	r0, r8
   1f9b0:	ldr	ip, [r2]
   1f9b4:	ldr	r2, [r3, fp, lsl #2]
   1f9b8:	ldr	r3, [sp, #12]
   1f9bc:	mov	r1, r2
   1f9c0:	add	r2, r2, r2, lsl #1
   1f9c4:	ldr	r2, [lr, r2, lsl #3]
   1f9c8:	ldr	r4, [ip, r2, lsl #3]
   1f9cc:	ldr	r2, [sp, #16]
   1f9d0:	str	r6, [sp]
   1f9d4:	str	r2, [sp, #4]
   1f9d8:	mov	r2, r4
   1f9dc:	bl	1de28 <__assert_fail@plt+0xcbcc>
   1f9e0:	ldr	r1, [r9]
   1f9e4:	mov	r2, r4
   1f9e8:	ldr	r3, [sp, #68]	; 0x44
   1f9ec:	ldr	r1, [r1, fp, lsl #2]
   1f9f0:	str	r5, [sp, #4]
   1f9f4:	str	r7, [sp]
   1f9f8:	mov	sl, r0
   1f9fc:	mov	r0, r8
   1fa00:	bl	1de28 <__assert_fail@plt+0xcbcc>
   1fa04:	cmp	sl, r0
   1fa08:	beq	1fa40 <__assert_fail@plt+0xe7e4>
   1fa0c:	mov	r0, #1
   1fa10:	add	sp, sp, #28
   1fa14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa18:	mov	sl, lr
   1fa1c:	mov	lr, ip
   1fa20:	add	r4, sl, #1
   1fa24:	mov	ip, lr
   1fa28:	b	1f86c <__assert_fail@plt+0xe610>
   1fa2c:	mov	fp, lr
   1fa30:	mov	lr, ip
   1fa34:	add	r5, fp, #1
   1fa38:	mov	ip, lr
   1fa3c:	b	1f8f8 <__assert_fail@plt+0xe69c>
   1fa40:	ldr	r3, [sp, #20]
   1fa44:	add	fp, fp, #1
   1fa48:	ldr	r3, [r3]
   1fa4c:	cmp	fp, r3
   1fa50:	blt	1f9a0 <__assert_fail@plt+0xe744>
   1fa54:	mov	r0, #0
   1fa58:	b	1fa10 <__assert_fail@plt+0xe7b4>
   1fa5c:	ldr	ip, [r1, #4]
   1fa60:	cmp	ip, #0
   1fa64:	beq	1fb94 <__assert_fail@plt+0xe938>
   1fa68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1fa6c:	ldr	lr, [r2, #4]
   1fa70:	cmp	lr, #0
   1fa74:	beq	1fb70 <__assert_fail@plt+0xe914>
   1fa78:	ldr	r3, [r0, #4]
   1fa7c:	mov	r9, r2
   1fa80:	ldr	r4, [r0]
   1fa84:	add	r2, ip, lr
   1fa88:	mov	r8, r1
   1fa8c:	add	r1, r2, r3
   1fa90:	cmp	r1, r4
   1fa94:	mov	r7, r0
   1fa98:	bgt	1fbd8 <__assert_fail@plt+0xe97c>
   1fa9c:	ldr	r0, [r0, #8]
   1faa0:	ldr	sl, [r8, #8]
   1faa4:	ldr	r2, [r9, #8]
   1faa8:	sub	r5, ip, #1
   1faac:	sub	r6, lr, #1
   1fab0:	add	r1, r3, ip
   1fab4:	ldr	r4, [r2, r6, lsl #2]
   1fab8:	ldr	ip, [sl, r5, lsl #2]
   1fabc:	add	r1, r1, lr
   1fac0:	sub	r3, r3, #1
   1fac4:	cmp	ip, r4
   1fac8:	beq	1fae4 <__assert_fail@plt+0xe888>
   1facc:	bge	1fb78 <__assert_fail@plt+0xe91c>
   1fad0:	subs	r6, r6, #1
   1fad4:	bmi	1fb30 <__assert_fail@plt+0xe8d4>
   1fad8:	ldr	r4, [r2, r6, lsl #2]
   1fadc:	cmp	ip, r4
   1fae0:	bne	1facc <__assert_fail@plt+0xe870>
   1fae4:	cmp	r3, #0
   1fae8:	blt	1fb14 <__assert_fail@plt+0xe8b8>
   1faec:	ldr	lr, [r0, r3, lsl #2]
   1faf0:	add	ip, r0, r3, lsl #2
   1faf4:	cmp	lr, r4
   1faf8:	bgt	1fb0c <__assert_fail@plt+0xe8b0>
   1fafc:	b	1fb88 <__assert_fail@plt+0xe92c>
   1fb00:	ldr	lr, [ip, #-4]!
   1fb04:	cmp	lr, r4
   1fb08:	ble	1fb88 <__assert_fail@plt+0xe92c>
   1fb0c:	subs	r3, r3, #1
   1fb10:	bcs	1fb00 <__assert_fail@plt+0xe8a4>
   1fb14:	sub	r1, r1, #1
   1fb18:	str	r4, [r0, r1, lsl #2]
   1fb1c:	subs	r5, r5, #1
   1fb20:	bmi	1fb30 <__assert_fail@plt+0xe8d4>
   1fb24:	subs	r6, r6, #1
   1fb28:	ldrpl	ip, [sl, r5, lsl #2]
   1fb2c:	bpl	1fad8 <__assert_fail@plt+0xe87c>
   1fb30:	ldr	lr, [r7, #4]
   1fb34:	ldr	ip, [r8, #4]
   1fb38:	ldr	r3, [r9, #4]
   1fb3c:	add	ip, lr, ip
   1fb40:	add	ip, ip, r3
   1fb44:	sub	r2, ip, r1
   1fb48:	sub	r3, lr, #1
   1fb4c:	cmp	r3, #0
   1fb50:	cmpge	r2, #0
   1fb54:	add	lr, lr, r2
   1fb58:	sub	ip, ip, #1
   1fb5c:	str	lr, [r7, #4]
   1fb60:	bgt	1fbac <__assert_fail@plt+0xe950>
   1fb64:	lsl	r2, r2, #2
   1fb68:	add	r1, r0, r1, lsl #2
   1fb6c:	bl	11004 <memcpy@plt>
   1fb70:	mov	r0, #0
   1fb74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fb78:	subs	r5, r5, #1
   1fb7c:	bmi	1fb30 <__assert_fail@plt+0xe8d4>
   1fb80:	ldr	ip, [sl, r5, lsl #2]
   1fb84:	b	1fac4 <__assert_fail@plt+0xe868>
   1fb88:	cmp	lr, r4
   1fb8c:	bne	1fb14 <__assert_fail@plt+0xe8b8>
   1fb90:	b	1fb1c <__assert_fail@plt+0xe8c0>
   1fb94:	mov	r0, ip
   1fb98:	bx	lr
   1fb9c:	sub	r3, r3, #1
   1fba0:	cmn	r3, #1
   1fba4:	str	lr, [r0, r6, lsl #2]
   1fba8:	beq	1fb64 <__assert_fail@plt+0xe908>
   1fbac:	ldr	r4, [r0, ip, lsl #2]
   1fbb0:	ldr	lr, [r0, r3, lsl #2]
   1fbb4:	add	r6, r3, r2
   1fbb8:	cmp	r4, lr
   1fbbc:	mov	r5, r6
   1fbc0:	ble	1fb9c <__assert_fail@plt+0xe940>
   1fbc4:	subs	r2, r2, #1
   1fbc8:	sub	ip, ip, #1
   1fbcc:	str	r4, [r0, r6, lsl #2]
   1fbd0:	bne	1fbac <__assert_fail@plt+0xe950>
   1fbd4:	b	1fb68 <__assert_fail@plt+0xe90c>
   1fbd8:	add	r4, r2, r4
   1fbdc:	ldr	r0, [r0, #8]
   1fbe0:	lsl	r1, r4, #2
   1fbe4:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   1fbe8:	cmp	r0, #0
   1fbec:	beq	1fc08 <__assert_fail@plt+0xe9ac>
   1fbf0:	ldr	ip, [r8, #4]
   1fbf4:	ldr	lr, [r9, #4]
   1fbf8:	ldr	r3, [r7, #4]
   1fbfc:	str	r0, [r7, #8]
   1fc00:	str	r4, [r7]
   1fc04:	b	1faa0 <__assert_fail@plt+0xe844>
   1fc08:	mov	r0, #12
   1fc0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fc10:	push	{r4, r5, r6, lr}
   1fc14:	mov	r5, r0
   1fc18:	ldr	r0, [r1]
   1fc1c:	sub	sp, sp, #16
   1fc20:	cmp	r0, #31
   1fc24:	beq	1fc98 <__assert_fail@plt+0xea3c>
   1fc28:	lsl	ip, r0, #5
   1fc2c:	ldr	r4, [r5]
   1fc30:	add	r0, r0, #1
   1fc34:	add	r6, ip, #4
   1fc38:	str	r0, [r1]
   1fc3c:	ldr	r1, [sp, #32]
   1fc40:	add	ip, r4, ip
   1fc44:	mov	r5, #0
   1fc48:	str	r2, [ip, #8]
   1fc4c:	str	r3, [ip, #12]
   1fc50:	str	r5, [ip, #4]
   1fc54:	ldm	r1, {r0, r1}
   1fc58:	add	lr, ip, #24
   1fc5c:	cmp	r2, r5
   1fc60:	stm	lr, {r0, r1}
   1fc64:	ldrb	r1, [ip, #30]
   1fc68:	mvn	lr, #0
   1fc6c:	add	r0, r4, r6
   1fc70:	and	r1, r1, #243	; 0xf3
   1fc74:	str	r5, [ip, #16]
   1fc78:	str	r5, [ip, #20]
   1fc7c:	strb	r1, [ip, #30]
   1fc80:	str	lr, [ip, #32]
   1fc84:	strne	r0, [r2]
   1fc88:	cmp	r3, #0
   1fc8c:	strne	r0, [r3]
   1fc90:	add	sp, sp, #16
   1fc94:	pop	{r4, r5, r6, pc}
   1fc98:	mov	r0, #996	; 0x3e4
   1fc9c:	stmib	sp, {r1, r2, r3}
   1fca0:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   1fca4:	subs	r4, r0, #0
   1fca8:	beq	1fccc <__assert_fail@plt+0xea70>
   1fcac:	ldr	ip, [r5]
   1fcb0:	mov	r6, #4
   1fcb4:	str	ip, [r4]
   1fcb8:	mov	r0, #1
   1fcbc:	mov	ip, #0
   1fcc0:	str	r4, [r5]
   1fcc4:	ldmib	sp, {r1, r2, r3}
   1fcc8:	b	1fc38 <__assert_fail@plt+0xe9dc>
   1fccc:	mov	r0, r4
   1fcd0:	b	1fc90 <__assert_fail@plt+0xea34>
   1fcd4:	push	{r4, r5, r6, r7, r8, r9, lr}
   1fcd8:	sub	sp, sp, #20
   1fcdc:	mov	r4, r0
   1fce0:	ldr	r5, [r0]
   1fce4:	add	r8, r1, #56	; 0x38
   1fce8:	add	r6, r1, #64	; 0x40
   1fcec:	add	r9, sp, #12
   1fcf0:	mov	r7, #0
   1fcf4:	b	1fd00 <__assert_fail@plt+0xeaa4>
   1fcf8:	mov	r4, r3
   1fcfc:	add	r9, r5, #4
   1fd00:	add	r3, r4, #20
   1fd04:	str	r3, [sp]
   1fd08:	mov	r2, #0
   1fd0c:	mov	r3, r7
   1fd10:	mov	r1, r6
   1fd14:	mov	r0, r8
   1fd18:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   1fd1c:	cmp	r0, #0
   1fd20:	str	r0, [r9]
   1fd24:	beq	1fd88 <__assert_fail@plt+0xeb2c>
   1fd28:	str	r5, [r0]
   1fd2c:	ldr	r5, [r9]
   1fd30:	ldrb	r3, [r5, #26]
   1fd34:	orr	r3, r3, #4
   1fd38:	strb	r3, [r5, #26]
   1fd3c:	ldr	r3, [r4, #4]
   1fd40:	cmp	r3, #0
   1fd44:	bne	1fcf8 <__assert_fail@plt+0xea9c>
   1fd48:	mov	r2, r7
   1fd4c:	b	1fd68 <__assert_fail@plt+0xeb0c>
   1fd50:	ldr	r3, [r4]
   1fd54:	mov	r2, r4
   1fd58:	cmp	r3, #0
   1fd5c:	ldr	r5, [r5]
   1fd60:	mov	r4, r3
   1fd64:	beq	1fd84 <__assert_fail@plt+0xeb28>
   1fd68:	ldr	r3, [r4, #8]
   1fd6c:	cmp	r3, #0
   1fd70:	cmpne	r2, r3
   1fd74:	beq	1fd50 <__assert_fail@plt+0xeaf4>
   1fd78:	mov	r4, r3
   1fd7c:	add	r9, r5, #8
   1fd80:	b	1fd00 <__assert_fail@plt+0xeaa4>
   1fd84:	ldr	r0, [sp, #12]
   1fd88:	add	sp, sp, #20
   1fd8c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1fd90:	ldrb	r3, [r1, #28]
   1fd94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd98:	sub	sp, sp, #28
   1fd9c:	ands	r9, r3, #16
   1fda0:	mov	r7, r2
   1fda4:	str	r0, [sp, #12]
   1fda8:	ldr	r4, [r1]
   1fdac:	ldr	r5, [r2, #4]
   1fdb0:	beq	1fef8 <__assert_fail@plt+0xec9c>
   1fdb4:	cmp	r5, #0
   1fdb8:	beq	1ff88 <__assert_fail@plt+0xed2c>
   1fdbc:	ldr	r3, [r2, #20]
   1fdc0:	cmp	r3, #31
   1fdc4:	bgt	1feec <__assert_fail@plt+0xec90>
   1fdc8:	ldr	r2, [r4, #80]	; 0x50
   1fdcc:	lsr	r3, r2, r3
   1fdd0:	tst	r3, #1
   1fdd4:	beq	1feec <__assert_fail@plt+0xec90>
   1fdd8:	add	r6, sp, #16
   1fddc:	mov	r9, #0
   1fde0:	add	sl, r4, #56	; 0x38
   1fde4:	add	r4, r4, #64	; 0x40
   1fde8:	mov	r3, r9
   1fdec:	mov	r2, r9
   1fdf0:	mov	ip, #8
   1fdf4:	str	r6, [sp]
   1fdf8:	mov	r1, r4
   1fdfc:	str	r9, [r6, #4]
   1fe00:	mov	r0, sl
   1fe04:	str	r9, [sp, #16]
   1fe08:	strb	ip, [sp, #20]
   1fe0c:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   1fe10:	str	r6, [sp]
   1fe14:	mov	r3, r9
   1fe18:	str	r9, [r6, #4]
   1fe1c:	mov	r2, r9
   1fe20:	mov	ip, #9
   1fe24:	mov	r1, r4
   1fe28:	str	r9, [sp, #16]
   1fe2c:	strb	ip, [sp, #20]
   1fe30:	mov	r8, r0
   1fe34:	mov	r0, sl
   1fe38:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   1fe3c:	mov	r9, r0
   1fe40:	mov	r0, #0
   1fe44:	str	r6, [sp]
   1fe48:	mov	ip, #16
   1fe4c:	str	r0, [r6, #4]
   1fe50:	str	r0, [sp, #16]
   1fe54:	mov	r2, r5
   1fe58:	mov	r3, r9
   1fe5c:	mov	r1, r4
   1fe60:	mov	r0, sl
   1fe64:	strb	ip, [sp, #20]
   1fe68:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   1fe6c:	mov	fp, r0
   1fe70:	mov	r2, #0
   1fe74:	str	r6, [sp]
   1fe78:	mov	ip, #16
   1fe7c:	str	r2, [r6, #4]
   1fe80:	str	r2, [sp, #16]
   1fe84:	mov	r1, r4
   1fe88:	mov	r0, sl
   1fe8c:	mov	r3, fp
   1fe90:	mov	r2, r8
   1fe94:	strb	ip, [sp, #20]
   1fe98:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   1fe9c:	cmp	fp, #0
   1fea0:	cmpne	r0, #0
   1fea4:	mov	r5, r0
   1fea8:	beq	1ff6c <__assert_fail@plt+0xed10>
   1feac:	cmp	r9, #0
   1feb0:	cmpne	r8, #0
   1feb4:	beq	1ff6c <__assert_fail@plt+0xed10>
   1feb8:	ldr	r3, [r7, #20]
   1febc:	str	r3, [r9, #20]
   1fec0:	str	r3, [r8, #20]
   1fec4:	ldrb	r3, [r7, #26]
   1fec8:	ldrb	r2, [r9, #26]
   1fecc:	and	r3, r3, #8
   1fed0:	bic	r2, r2, #8
   1fed4:	orr	r2, r3, r2
   1fed8:	strb	r2, [r9, #26]
   1fedc:	ldrb	r2, [r8, #26]
   1fee0:	bic	r2, r2, #8
   1fee4:	orr	r3, r3, r2
   1fee8:	strb	r3, [r8, #26]
   1feec:	mov	r0, r5
   1fef0:	add	sp, sp, #28
   1fef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fef8:	add	r6, sp, #16
   1fefc:	add	sl, r4, #56	; 0x38
   1ff00:	add	r4, r4, #64	; 0x40
   1ff04:	mov	ip, #8
   1ff08:	mov	r3, r9
   1ff0c:	mov	r2, r9
   1ff10:	str	r6, [sp]
   1ff14:	mov	r1, r4
   1ff18:	str	r9, [r6, #4]
   1ff1c:	mov	r0, sl
   1ff20:	str	r9, [sp, #16]
   1ff24:	strb	ip, [sp, #20]
   1ff28:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   1ff2c:	str	r6, [sp]
   1ff30:	mov	ip, #9
   1ff34:	str	r9, [r6, #4]
   1ff38:	mov	r3, r9
   1ff3c:	mov	r2, r9
   1ff40:	mov	r1, r4
   1ff44:	str	r9, [sp, #16]
   1ff48:	strb	ip, [sp, #20]
   1ff4c:	mov	r8, r0
   1ff50:	mov	r0, sl
   1ff54:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   1ff58:	cmp	r5, #0
   1ff5c:	mov	r9, r0
   1ff60:	moveq	fp, r0
   1ff64:	bne	1fe40 <__assert_fail@plt+0xebe4>
   1ff68:	b	1fe70 <__assert_fail@plt+0xec14>
   1ff6c:	ldr	r2, [sp, #12]
   1ff70:	mov	r3, #12
   1ff74:	mov	r5, #0
   1ff78:	mov	r0, r5
   1ff7c:	str	r3, [r2]
   1ff80:	add	sp, sp, #28
   1ff84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff88:	add	r6, sp, #16
   1ff8c:	add	sl, r4, #56	; 0x38
   1ff90:	add	r4, r4, #64	; 0x40
   1ff94:	mov	ip, #8
   1ff98:	str	r6, [sp]
   1ff9c:	mov	r1, r4
   1ffa0:	mov	r3, r5
   1ffa4:	mov	r2, r5
   1ffa8:	str	r5, [r6, #4]
   1ffac:	mov	r0, sl
   1ffb0:	strb	ip, [sp, #20]
   1ffb4:	str	r5, [sp, #16]
   1ffb8:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   1ffbc:	str	r6, [sp]
   1ffc0:	mov	ip, #9
   1ffc4:	str	r5, [r6, #4]
   1ffc8:	mov	r1, r4
   1ffcc:	mov	r3, r5
   1ffd0:	mov	r2, r5
   1ffd4:	str	r5, [sp, #16]
   1ffd8:	strb	ip, [sp, #20]
   1ffdc:	mov	r8, r0
   1ffe0:	mov	r0, sl
   1ffe4:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   1ffe8:	mov	fp, r0
   1ffec:	mov	r9, r0
   1fff0:	b	1fe70 <__assert_fail@plt+0xec14>
   1fff4:	ldr	r2, [r1, #4]
   1fff8:	push	{r4, r5, lr}
   1fffc:	mov	r3, #0
   20000:	sub	sp, sp, #12
   20004:	cmp	r2, r3
   20008:	mov	r4, r1
   2000c:	mov	r5, r0
   20010:	str	r3, [sp, #4]
   20014:	beq	20024 <__assert_fail@plt+0xedc8>
   20018:	ldrb	r3, [r2, #24]
   2001c:	cmp	r3, #17
   20020:	beq	2006c <__assert_fail@plt+0xee10>
   20024:	ldr	r2, [r4, #8]
   20028:	cmp	r2, #0
   2002c:	beq	2003c <__assert_fail@plt+0xede0>
   20030:	ldrb	r3, [r2, #24]
   20034:	cmp	r3, #17
   20038:	beq	20048 <__assert_fail@plt+0xedec>
   2003c:	ldr	r0, [sp, #4]
   20040:	add	sp, sp, #12
   20044:	pop	{r4, r5, pc}
   20048:	mov	r1, r5
   2004c:	add	r0, sp, #4
   20050:	bl	1fd90 <__assert_fail@plt+0xeb34>
   20054:	cmp	r0, #0
   20058:	str	r0, [r4, #8]
   2005c:	strne	r4, [r0]
   20060:	ldr	r0, [sp, #4]
   20064:	add	sp, sp, #12
   20068:	pop	{r4, r5, pc}
   2006c:	mov	r1, r0
   20070:	add	r0, sp, #4
   20074:	bl	1fd90 <__assert_fail@plt+0xeb34>
   20078:	cmp	r0, #0
   2007c:	str	r0, [r4, #4]
   20080:	strne	r4, [r0]
   20084:	b	20024 <__assert_fail@plt+0xedc8>
   20088:	push	{r4, r5, r6, lr}
   2008c:	mov	r4, r0
   20090:	ldr	r0, [r1, #4]
   20094:	str	r0, [r4, #4]
   20098:	ldr	r2, [r1, #4]
   2009c:	cmp	r2, #0
   200a0:	ble	200d8 <__assert_fail@plt+0xee7c>
   200a4:	str	r0, [r4]
   200a8:	lsl	r0, r0, #2
   200ac:	mov	r5, r1
   200b0:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   200b4:	cmp	r0, #0
   200b8:	str	r0, [r4, #8]
   200bc:	beq	200f0 <__assert_fail@plt+0xee94>
   200c0:	ldr	r2, [r5, #4]
   200c4:	ldr	r1, [r5, #8]
   200c8:	lsl	r2, r2, #2
   200cc:	bl	11004 <memcpy@plt>
   200d0:	mov	r0, #0
   200d4:	pop	{r4, r5, r6, pc}
   200d8:	mov	r2, #0
   200dc:	mov	r0, r2
   200e0:	str	r2, [r4]
   200e4:	str	r2, [r4, #4]
   200e8:	str	r2, [r4, #8]
   200ec:	pop	{r4, r5, r6, pc}
   200f0:	str	r0, [r4, #4]
   200f4:	str	r0, [r4]
   200f8:	mov	r0, #12
   200fc:	pop	{r4, r5, r6, pc}
   20100:	cmp	r1, #0
   20104:	beq	201d0 <__assert_fail@plt+0xef74>
   20108:	ldr	r3, [r1, #4]
   2010c:	cmp	r2, #0
   20110:	cmpne	r3, #0
   20114:	ble	201c8 <__assert_fail@plt+0xef6c>
   20118:	ldr	ip, [r2, #4]
   2011c:	cmp	ip, #0
   20120:	ble	201e8 <__assert_fail@plt+0xef8c>
   20124:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20128:	mov	r8, r0
   2012c:	add	r0, r3, ip
   20130:	str	r0, [r8]
   20134:	lsl	r0, r0, #2
   20138:	mov	r5, r2
   2013c:	mov	r7, r1
   20140:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   20144:	cmp	r0, #0
   20148:	str	r0, [r8, #8]
   2014c:	beq	20244 <__assert_fail@plt+0xefe8>
   20150:	mov	r3, #0
   20154:	mov	ip, r3
   20158:	ldr	r9, [r7, #4]
   2015c:	ldr	sl, [r5, #4]
   20160:	mov	r4, r0
   20164:	mov	lr, #1
   20168:	b	201a8 <__assert_fail@plt+0xef4c>
   2016c:	cmp	r3, sl
   20170:	bge	20204 <__assert_fail@plt+0xefa8>
   20174:	ldr	r2, [r7, #8]
   20178:	ldr	r1, [r5, #8]
   2017c:	ldr	r2, [r2, ip, lsl #2]
   20180:	ldr	r6, [r1, r3, lsl #2]
   20184:	cmp	r2, r6
   20188:	addgt	r3, r3, #1
   2018c:	strgt	r6, [r4]
   20190:	bgt	201a0 <__assert_fail@plt+0xef44>
   20194:	add	ip, ip, #1
   20198:	addeq	r3, r3, #1
   2019c:	str	r2, [r4]
   201a0:	add	lr, lr, #1
   201a4:	add	r4, r4, #4
   201a8:	cmp	ip, r9
   201ac:	sub	r6, lr, #1
   201b0:	blt	2016c <__assert_fail@plt+0xef10>
   201b4:	cmp	r3, sl
   201b8:	blt	20224 <__assert_fail@plt+0xefc8>
   201bc:	str	r6, [r8, #4]
   201c0:	mov	r0, #0
   201c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   201c8:	cmp	r3, #0
   201cc:	bgt	201e8 <__assert_fail@plt+0xef8c>
   201d0:	cmp	r2, #0
   201d4:	beq	201ec <__assert_fail@plt+0xef90>
   201d8:	ldr	r3, [r2, #4]
   201dc:	cmp	r3, #0
   201e0:	ble	201ec <__assert_fail@plt+0xef90>
   201e4:	mov	r1, r2
   201e8:	b	20088 <__assert_fail@plt+0xee2c>
   201ec:	mov	r3, #0
   201f0:	str	r3, [r0]
   201f4:	str	r3, [r0, #4]
   201f8:	str	r3, [r0, #8]
   201fc:	mov	r0, r3
   20200:	bx	lr
   20204:	sub	r9, r9, ip
   20208:	ldr	r1, [r7, #8]
   2020c:	add	r0, r0, r6, lsl #2
   20210:	add	r1, r1, ip, lsl #2
   20214:	lsl	r2, r9, #2
   20218:	add	r6, r6, r9
   2021c:	bl	11004 <memcpy@plt>
   20220:	b	201bc <__assert_fail@plt+0xef60>
   20224:	sub	sl, sl, r3
   20228:	ldr	r1, [r5, #8]
   2022c:	add	r0, r0, r6, lsl #2
   20230:	add	r1, r1, r3, lsl #2
   20234:	lsl	r2, sl, #2
   20238:	bl	11004 <memcpy@plt>
   2023c:	add	r6, r6, sl
   20240:	b	201bc <__assert_fail@plt+0xef60>
   20244:	mov	r0, #12
   20248:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2024c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20250:	mov	ip, #0
   20254:	ldr	r4, [r2, #4]
   20258:	sub	sp, sp, #36	; 0x24
   2025c:	cmp	r4, ip
   20260:	str	ip, [r0]
   20264:	beq	20314 <__assert_fail@plt+0xf0b8>
   20268:	add	r7, r3, r4
   2026c:	ble	20288 <__assert_fail@plt+0xf02c>
   20270:	ldr	ip, [r2, #8]
   20274:	add	r4, ip, r4, lsl #2
   20278:	ldr	lr, [ip], #4
   2027c:	cmp	r4, ip
   20280:	add	r7, r7, lr
   20284:	bne	20278 <__assert_fail@plt+0xf01c>
   20288:	mov	fp, r3
   2028c:	ldr	r3, [r1, #68]	; 0x44
   20290:	mov	r8, r2
   20294:	and	r3, r3, r7
   20298:	ldr	r2, [r1, #32]
   2029c:	add	r3, r3, r3, lsl #1
   202a0:	mov	r9, r1
   202a4:	lsl	r3, r3, #2
   202a8:	str	r0, [sp, #24]
   202ac:	ldr	sl, [r2, r3]
   202b0:	add	r1, r2, r3
   202b4:	cmp	sl, #0
   202b8:	ble	20320 <__assert_fail@plt+0xf0c4>
   202bc:	ldr	r6, [r1, #8]
   202c0:	mov	r5, #0
   202c4:	sub	r6, r6, #4
   202c8:	b	202d4 <__assert_fail@plt+0xf078>
   202cc:	cmp	r5, sl
   202d0:	beq	20320 <__assert_fail@plt+0xf0c4>
   202d4:	ldr	r4, [r6, #4]!
   202d8:	add	r5, r5, #1
   202dc:	ldr	r3, [r4]
   202e0:	cmp	r3, r7
   202e4:	bne	202cc <__assert_fail@plt+0xf070>
   202e8:	ldrb	r3, [r4, #52]	; 0x34
   202ec:	and	r3, r3, #15
   202f0:	cmp	fp, r3
   202f4:	bne	202cc <__assert_fail@plt+0xf070>
   202f8:	ldr	r3, [r4, #40]	; 0x28
   202fc:	mov	r1, r8
   20300:	subs	r0, r3, #0
   20304:	beq	202cc <__assert_fail@plt+0xf070>
   20308:	bl	1f508 <__assert_fail@plt+0xe2ac>
   2030c:	cmp	r0, #0
   20310:	beq	202cc <__assert_fail@plt+0xf070>
   20314:	mov	r0, r4
   20318:	add	sp, sp, #36	; 0x24
   2031c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20320:	mov	r1, #1
   20324:	mov	r0, #56	; 0x38
   20328:	bl	2bc8c <__assert_fail@plt+0x1aa30>
   2032c:	subs	r4, r0, #0
   20330:	beq	204f0 <__assert_fail@plt+0xf294>
   20334:	add	r3, r4, #4
   20338:	mov	r0, r3
   2033c:	mov	r1, r8
   20340:	str	r3, [sp, #4]
   20344:	bl	20088 <__assert_fail@plt+0xee2c>
   20348:	ldr	r3, [sp, #4]
   2034c:	subs	sl, r0, #0
   20350:	bne	20568 <__assert_fail@plt+0xf30c>
   20354:	ldrb	r1, [r4, #52]	; 0x34
   20358:	ldr	ip, [r8, #4]
   2035c:	and	r2, fp, #15
   20360:	bic	r1, r1, #15
   20364:	orr	r2, r2, r1
   20368:	cmp	ip, #0
   2036c:	str	r3, [r4, #40]	; 0x28
   20370:	strb	r2, [r4, #52]	; 0x34
   20374:	ble	204d0 <__assert_fail@plt+0xf274>
   20378:	add	r2, r4, #12
   2037c:	str	r2, [sp, #12]
   20380:	add	r2, r4, #8
   20384:	str	r2, [sp, #16]
   20388:	and	r2, fp, #4
   2038c:	str	r2, [sp, #8]
   20390:	and	r2, fp, #2
   20394:	and	fp, fp, #1
   20398:	str	r7, [sp, #20]
   2039c:	ldr	r6, [pc, #464]	; 20574 <__assert_fail@plt+0xf318>
   203a0:	mov	r7, fp
   203a4:	mov	r5, sl
   203a8:	str	r2, [sp, #4]
   203ac:	mov	fp, r3
   203b0:	b	203fc <__assert_fail@plt+0xf1a0>
   203b4:	cmp	r7, #0
   203b8:	beq	204a4 <__assert_fail@plt+0xf248>
   203bc:	tst	r2, #2
   203c0:	bne	204a4 <__assert_fail@plt+0xf248>
   203c4:	tst	r2, #16
   203c8:	beq	203d8 <__assert_fail@plt+0xf17c>
   203cc:	ldr	r3, [sp, #4]
   203d0:	cmp	r3, #0
   203d4:	beq	204a4 <__assert_fail@plt+0xf248>
   203d8:	tst	r2, #64	; 0x40
   203dc:	beq	203ec <__assert_fail@plt+0xf190>
   203e0:	ldr	r3, [sp, #8]
   203e4:	cmp	r3, #0
   203e8:	beq	204a4 <__assert_fail@plt+0xf248>
   203ec:	ldr	ip, [r8, #4]
   203f0:	add	r5, r5, #1
   203f4:	cmp	r5, ip
   203f8:	bge	204cc <__assert_fail@plt+0xf270>
   203fc:	ldr	r2, [r8, #8]
   20400:	ldr	r1, [r9]
   20404:	ldr	r2, [r2, r5, lsl #2]
   20408:	add	r1, r1, r2, lsl #3
   2040c:	ldr	r2, [r1, #4]
   20410:	ldrb	r0, [r1, #4]
   20414:	ands	r2, r6, r2, lsr #8
   20418:	moveq	lr, #1
   2041c:	movne	lr, #0
   20420:	cmp	r0, #1
   20424:	movne	lr, #0
   20428:	andeq	lr, lr, #1
   2042c:	cmp	lr, #0
   20430:	bne	203f0 <__assert_fail@plt+0xf194>
   20434:	ldrb	r1, [r1, #6]
   20438:	ldrb	lr, [r4, #52]	; 0x34
   2043c:	cmp	r0, #2
   20440:	lsr	r1, r1, #4
   20444:	orr	r1, r1, lr, lsr #5
   20448:	and	r1, r1, #1
   2044c:	bic	lr, lr, #32
   20450:	orr	r1, lr, r1, lsl #5
   20454:	strb	r1, [r4, #52]	; 0x34
   20458:	uxtbeq	r1, r1
   2045c:	orreq	r1, r1, #16
   20460:	strbeq	r1, [r4, #52]	; 0x34
   20464:	beq	20478 <__assert_fail@plt+0xf21c>
   20468:	cmp	r0, #4
   2046c:	ldrbeq	r1, [r4, #52]	; 0x34
   20470:	orreq	r1, r1, #64	; 0x40
   20474:	strbeq	r1, [r4, #52]	; 0x34
   20478:	cmp	r2, #0
   2047c:	beq	203f0 <__assert_fail@plt+0xf194>
   20480:	ldr	r1, [r4, #40]	; 0x28
   20484:	cmp	fp, r1
   20488:	beq	20524 <__assert_fail@plt+0xf2c8>
   2048c:	tst	r2, #1
   20490:	bne	203b4 <__assert_fail@plt+0xf158>
   20494:	tst	r2, #2
   20498:	beq	203c4 <__assert_fail@plt+0xf168>
   2049c:	cmp	r7, #0
   204a0:	beq	203c4 <__assert_fail@plt+0xf168>
   204a4:	subs	r2, r5, sl
   204a8:	bmi	204b8 <__assert_fail@plt+0xf25c>
   204ac:	ldr	r1, [r4, #8]
   204b0:	cmp	r2, r1
   204b4:	blt	2050c <__assert_fail@plt+0xf2b0>
   204b8:	ldr	ip, [r8, #4]
   204bc:	add	r5, r5, #1
   204c0:	cmp	r5, ip
   204c4:	add	sl, sl, #1
   204c8:	blt	203fc <__assert_fail@plt+0xf1a0>
   204cc:	ldr	r7, [sp, #20]
   204d0:	mov	r2, r7
   204d4:	mov	r0, r9
   204d8:	mov	r1, r4
   204dc:	bl	1e080 <__assert_fail@plt+0xce24>
   204e0:	cmp	r0, #0
   204e4:	beq	20314 <__assert_fail@plt+0xf0b8>
   204e8:	mov	r0, r4
   204ec:	bl	1ece4 <__assert_fail@plt+0xda88>
   204f0:	ldr	r2, [sp, #24]
   204f4:	mov	r3, #12
   204f8:	mov	r4, #0
   204fc:	mov	r0, r4
   20500:	str	r3, [r2]
   20504:	add	sp, sp, #36	; 0x24
   20508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2050c:	sub	r1, r1, #1
   20510:	str	r1, [r4, #8]
   20514:	ldr	r0, [sp, #16]
   20518:	ldr	r1, [sp, #12]
   2051c:	bl	1f70c <__assert_fail@plt+0xe4b0>
   20520:	b	204b8 <__assert_fail@plt+0xf25c>
   20524:	mov	r0, #12
   20528:	str	r2, [sp, #28]
   2052c:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   20530:	ldr	r2, [sp, #28]
   20534:	subs	r1, r0, #0
   20538:	beq	204e8 <__assert_fail@plt+0xf28c>
   2053c:	str	r1, [r4, #40]	; 0x28
   20540:	mov	r1, r8
   20544:	str	r2, [sp, #28]
   20548:	bl	20088 <__assert_fail@plt+0xee2c>
   2054c:	ldr	r2, [sp, #28]
   20550:	subs	sl, r0, #0
   20554:	bne	204e8 <__assert_fail@plt+0xf28c>
   20558:	ldrb	r1, [r4, #52]	; 0x34
   2055c:	orr	r1, r1, #128	; 0x80
   20560:	strb	r1, [r4, #52]	; 0x34
   20564:	b	2048c <__assert_fail@plt+0xf230>
   20568:	mov	r0, r4
   2056c:	bl	13098 <__assert_fail@plt+0x1e3c>
   20570:	b	204f0 <__assert_fail@plt+0xf294>
   20574:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   20578:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2057c:	mov	r3, #0
   20580:	ldr	r6, [r2, #4]
   20584:	str	r3, [r0]
   20588:	cmp	r6, r3
   2058c:	beq	20764 <__assert_fail@plt+0xf508>
   20590:	ble	205ac <__assert_fail@plt+0xf350>
   20594:	ldr	r3, [r2, #8]
   20598:	add	lr, r3, r6, lsl #2
   2059c:	ldr	ip, [r3], #4
   205a0:	cmp	lr, r3
   205a4:	add	r6, r6, ip
   205a8:	bne	2059c <__assert_fail@plt+0xf340>
   205ac:	ldr	r3, [r1, #68]	; 0x44
   205b0:	mov	sl, r2
   205b4:	and	r3, r3, r6
   205b8:	ldr	r2, [r1, #32]
   205bc:	add	r3, r3, r3, lsl #1
   205c0:	mov	r7, r1
   205c4:	lsl	r3, r3, #2
   205c8:	mov	r8, r0
   205cc:	ldr	fp, [r2, r3]
   205d0:	add	r1, r2, r3
   205d4:	cmp	fp, #0
   205d8:	ble	20624 <__assert_fail@plt+0xf3c8>
   205dc:	ldr	r9, [r1, #8]
   205e0:	mov	r5, #0
   205e4:	sub	r9, r9, #4
   205e8:	b	205f4 <__assert_fail@plt+0xf398>
   205ec:	cmp	r5, fp
   205f0:	beq	20624 <__assert_fail@plt+0xf3c8>
   205f4:	ldr	r4, [r9, #4]!
   205f8:	add	r5, r5, #1
   205fc:	ldr	r3, [r4]
   20600:	cmp	r3, r6
   20604:	bne	205ec <__assert_fail@plt+0xf390>
   20608:	mov	r1, sl
   2060c:	add	r0, r4, #4
   20610:	bl	1f508 <__assert_fail@plt+0xe2ac>
   20614:	cmp	r0, #0
   20618:	beq	205ec <__assert_fail@plt+0xf390>
   2061c:	mov	r0, r4
   20620:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20624:	mov	r1, #1
   20628:	mov	r0, #56	; 0x38
   2062c:	bl	2bc8c <__assert_fail@plt+0x1aa30>
   20630:	subs	r4, r0, #0
   20634:	beq	20740 <__assert_fail@plt+0xf4e4>
   20638:	add	r5, r4, #4
   2063c:	mov	r0, r5
   20640:	mov	r1, sl
   20644:	bl	20088 <__assert_fail@plt+0xee2c>
   20648:	cmp	r0, #0
   2064c:	bne	20770 <__assert_fail@plt+0xf514>
   20650:	ldr	lr, [sl, #4]
   20654:	str	r5, [r4, #40]	; 0x28
   20658:	cmp	lr, #0
   2065c:	ble	20720 <__assert_fail@plt+0xf4c4>
   20660:	ldr	ip, [sl, #8]
   20664:	ldr	r5, [r7]
   20668:	ldr	r9, [pc, #268]	; 2077c <__assert_fail@plt+0xf520>
   2066c:	add	lr, ip, lr, lsl #2
   20670:	b	206cc <__assert_fail@plt+0xf470>
   20674:	ldrb	r3, [r2, #6]
   20678:	ldrb	r1, [r4, #52]	; 0x34
   2067c:	cmp	r0, #2
   20680:	lsr	r3, r3, #4
   20684:	orr	r3, r3, r1, lsr #5
   20688:	and	r3, r3, #1
   2068c:	bic	r1, r1, #32
   20690:	orr	r3, r1, r3, lsl #5
   20694:	strb	r3, [r4, #52]	; 0x34
   20698:	uxtbeq	r3, r3
   2069c:	orreq	r3, r3, #16
   206a0:	strbeq	r3, [r4, #52]	; 0x34
   206a4:	beq	206c4 <__assert_fail@plt+0xf468>
   206a8:	cmp	r0, #4
   206ac:	beq	20754 <__assert_fail@plt+0xf4f8>
   206b0:	cmp	r0, #12
   206b4:	beq	2070c <__assert_fail@plt+0xf4b0>
   206b8:	ldr	r3, [r2, #4]
   206bc:	tst	r3, r9
   206c0:	bne	2070c <__assert_fail@plt+0xf4b0>
   206c4:	cmp	lr, ip
   206c8:	beq	20720 <__assert_fail@plt+0xf4c4>
   206cc:	ldr	r2, [ip], #4
   206d0:	add	r2, r5, r2, lsl #3
   206d4:	ldrb	r0, [r2, #4]
   206d8:	cmp	r0, #1
   206dc:	bne	20674 <__assert_fail@plt+0xf418>
   206e0:	ldr	r3, [r2, #4]
   206e4:	tst	r3, r9
   206e8:	beq	206c4 <__assert_fail@plt+0xf468>
   206ec:	ldrb	r3, [r2, #6]
   206f0:	ldrb	r2, [r4, #52]	; 0x34
   206f4:	lsr	r3, r3, #4
   206f8:	orr	r3, r3, r2, lsr #5
   206fc:	and	r3, r3, #1
   20700:	bic	r2, r2, #32
   20704:	orr	r3, r2, r3, lsl #5
   20708:	strb	r3, [r4, #52]	; 0x34
   2070c:	ldrb	r3, [r4, #52]	; 0x34
   20710:	cmp	lr, ip
   20714:	orr	r3, r3, #128	; 0x80
   20718:	strb	r3, [r4, #52]	; 0x34
   2071c:	bne	206cc <__assert_fail@plt+0xf470>
   20720:	mov	r2, r6
   20724:	mov	r0, r7
   20728:	mov	r1, r4
   2072c:	bl	1e080 <__assert_fail@plt+0xce24>
   20730:	cmp	r0, #0
   20734:	beq	2061c <__assert_fail@plt+0xf3c0>
   20738:	mov	r0, r4
   2073c:	bl	1ece4 <__assert_fail@plt+0xda88>
   20740:	mov	r4, #0
   20744:	mov	r3, #12
   20748:	str	r3, [r8]
   2074c:	mov	r0, r4
   20750:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20754:	ldrb	r3, [r4, #52]	; 0x34
   20758:	orr	r3, r3, #64	; 0x40
   2075c:	strb	r3, [r4, #52]	; 0x34
   20760:	b	206c4 <__assert_fail@plt+0xf468>
   20764:	mov	r4, r6
   20768:	mov	r0, r4
   2076c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20770:	mov	r0, r4
   20774:	bl	13098 <__assert_fail@plt+0x1e3c>
   20778:	b	20740 <__assert_fail@plt+0xf4e4>
   2077c:	andeq	pc, r3, r0, lsl #30
   20780:	push	{r4, r5, r6, r7, r8, lr}
   20784:	subs	r7, r3, #0
   20788:	sub	sp, sp, #16
   2078c:	movgt	r8, r0
   20790:	movgt	r4, r1
   20794:	movgt	r5, r2
   20798:	movgt	r6, #0
   2079c:	bgt	207d4 <__assert_fail@plt+0xf578>
   207a0:	b	20828 <__assert_fail@plt+0xf5cc>
   207a4:	bl	20578 <__assert_fail@plt+0xf31c>
   207a8:	str	r0, [r4]
   207ac:	ldr	r0, [sp, #12]
   207b0:	bl	13098 <__assert_fail@plt+0x1e3c>
   207b4:	ldr	ip, [sp]
   207b8:	cmp	ip, #0
   207bc:	bne	2081c <__assert_fail@plt+0xf5c0>
   207c0:	add	r6, r6, #1
   207c4:	cmp	r7, r6
   207c8:	add	r4, r4, #4
   207cc:	add	r5, r5, #4
   207d0:	beq	20828 <__assert_fail@plt+0xf5cc>
   207d4:	ldr	r2, [r4]
   207d8:	ldr	r3, [r5]
   207dc:	cmp	r2, #0
   207e0:	add	r0, sp, #4
   207e4:	add	r1, r2, #4
   207e8:	streq	r3, [r4]
   207ec:	beq	207c0 <__assert_fail@plt+0xf564>
   207f0:	cmp	r3, #0
   207f4:	add	r2, r3, #4
   207f8:	beq	207c0 <__assert_fail@plt+0xf564>
   207fc:	bl	20100 <__assert_fail@plt+0xeea4>
   20800:	add	r2, sp, #4
   20804:	mov	r1, r8
   20808:	mov	ip, r0
   2080c:	cmp	ip, #0
   20810:	mov	r0, sp
   20814:	str	ip, [sp]
   20818:	beq	207a4 <__assert_fail@plt+0xf548>
   2081c:	mov	r0, ip
   20820:	add	sp, sp, #16
   20824:	pop	{r4, r5, r6, r7, r8, pc}
   20828:	mov	ip, #0
   2082c:	mov	r0, ip
   20830:	add	sp, sp, #16
   20834:	pop	{r4, r5, r6, r7, r8, pc}
   20838:	ldrb	r2, [r1, #24]
   2083c:	cmp	r2, #16
   20840:	beq	208b0 <__assert_fail@plt+0xf654>
   20844:	push	{r4, r5, r6, lr}
   20848:	add	r3, r1, #20
   2084c:	mov	r4, r1
   20850:	mov	r5, r0
   20854:	str	r1, [r4, #12]
   20858:	ldm	r3, {r1, r2}
   2085c:	bl	1eaa0 <__assert_fail@plt+0xd844>
   20860:	cmn	r0, #1
   20864:	str	r0, [r4, #28]
   20868:	beq	208cc <__assert_fail@plt+0xf670>
   2086c:	ldrb	r3, [r4, #24]
   20870:	cmp	r3, #12
   20874:	beq	20880 <__assert_fail@plt+0xf624>
   20878:	mov	r0, #0
   2087c:	pop	{r4, r5, r6, pc}
   20880:	ldr	r1, [r5]
   20884:	ldr	r2, [r4, #20]
   20888:	add	r1, r1, r0, lsl #3
   2088c:	mov	r0, #0
   20890:	ldr	r3, [r1, #4]
   20894:	lsl	r2, r2, #22
   20898:	bic	r3, r3, #261120	; 0x3fc00
   2089c:	lsr	r2, r2, #22
   208a0:	bic	r3, r3, #768	; 0x300
   208a4:	orr	r3, r3, r2, lsl #8
   208a8:	str	r3, [r1, #4]
   208ac:	pop	{r4, r5, r6, pc}
   208b0:	ldr	r3, [r1, #4]
   208b4:	mov	r0, #0
   208b8:	ldr	r2, [r3, #12]
   208bc:	ldr	r3, [r3, #28]
   208c0:	str	r2, [r1, #12]
   208c4:	str	r3, [r1, #28]
   208c8:	bx	lr
   208cc:	mov	r0, #12
   208d0:	pop	{r4, r5, r6, pc}
   208d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   208d8:	mov	r9, r1
   208dc:	ldr	r7, [r0, #28]
   208e0:	add	r1, r1, r1, lsl #1
   208e4:	sub	sp, sp, #36	; 0x24
   208e8:	add	r7, r7, r1, lsl #2
   208ec:	mov	r5, #0
   208f0:	str	r5, [sp, #24]
   208f4:	str	r5, [sp, #20]
   208f8:	str	r5, [sp, #28]
   208fc:	ldr	r6, [r7, #4]
   20900:	str	r3, [sp, #12]
   20904:	cmp	r6, r5
   20908:	ble	20af0 <__assert_fail@plt+0xf894>
   2090c:	add	r3, r7, #8
   20910:	str	r3, [sp]
   20914:	add	r3, r2, #8
   20918:	mov	r8, r0
   2091c:	str	r3, [sp, #8]
   20920:	str	r2, [sp, #4]
   20924:	b	20970 <__assert_fail@plt+0xf714>
   20928:	ldr	r3, [sp, #4]
   2092c:	mov	r2, fp
   20930:	ldr	r1, [sp, #8]
   20934:	ldr	r0, [r3, #4]
   20938:	bl	1f57c <__assert_fail@plt+0xe320>
   2093c:	cmp	r0, #0
   20940:	beq	209cc <__assert_fail@plt+0xf770>
   20944:	ldr	r2, [r8, #28]
   20948:	ldr	r1, [sp, #12]
   2094c:	add	r2, r2, r4
   20950:	add	r0, sp, #20
   20954:	bl	1fa5c <__assert_fail@plt+0xe800>
   20958:	cmp	r0, #0
   2095c:	bne	20ad8 <__assert_fail@plt+0xf87c>
   20960:	ldr	r6, [r7, #4]
   20964:	add	r5, r5, #1
   20968:	cmp	r6, r5
   2096c:	ble	20a2c <__assert_fail@plt+0xf7d0>
   20970:	ldr	r3, [r7, #8]
   20974:	ldr	r4, [r3, r5, lsl #2]
   20978:	cmp	r9, r4
   2097c:	beq	20964 <__assert_fail@plt+0xf708>
   20980:	ldr	r3, [r8]
   20984:	add	r3, r3, r4, lsl #3
   20988:	ldrb	r3, [r3, #4]
   2098c:	tst	r3, #8
   20990:	beq	20964 <__assert_fail@plt+0xf708>
   20994:	add	r4, r4, r4, lsl #1
   20998:	ldr	r3, [r8, #20]
   2099c:	lsl	r4, r4, #2
   209a0:	add	r3, r3, r4
   209a4:	ldr	r1, [sp]
   209a8:	ldmib	r3, {r3, sl}
   209ac:	mov	r0, r6
   209b0:	ldr	fp, [sl]
   209b4:	cmp	r3, #1
   209b8:	mov	r2, fp
   209bc:	ble	20a10 <__assert_fail@plt+0xf7b4>
   209c0:	bl	1f57c <__assert_fail@plt+0xe320>
   209c4:	cmp	r0, #0
   209c8:	beq	20928 <__assert_fail@plt+0xf6cc>
   209cc:	ldr	sl, [sl, #4]
   209d0:	cmp	sl, #0
   209d4:	ble	20964 <__assert_fail@plt+0xf708>
   209d8:	mov	r2, sl
   209dc:	ldr	r1, [sp]
   209e0:	mov	r0, r6
   209e4:	bl	1f57c <__assert_fail@plt+0xe320>
   209e8:	cmp	r0, #0
   209ec:	bne	20964 <__assert_fail@plt+0xf708>
   209f0:	mov	r2, sl
   209f4:	ldr	r3, [sp, #4]
   209f8:	ldr	r1, [sp, #8]
   209fc:	ldr	r0, [r3, #4]
   20a00:	bl	1f57c <__assert_fail@plt+0xe320>
   20a04:	cmp	r0, #0
   20a08:	beq	20964 <__assert_fail@plt+0xf708>
   20a0c:	b	20944 <__assert_fail@plt+0xf6e8>
   20a10:	bl	1f57c <__assert_fail@plt+0xe320>
   20a14:	cmp	r0, #0
   20a18:	moveq	r2, fp
   20a1c:	beq	209f4 <__assert_fail@plt+0xf798>
   20a20:	add	r5, r5, #1
   20a24:	cmp	r6, r5
   20a28:	bgt	20970 <__assert_fail@plt+0xf714>
   20a2c:	cmp	r6, #0
   20a30:	ldr	fp, [sp, #4]
   20a34:	ble	20ac0 <__assert_fail@plt+0xf864>
   20a38:	mov	r4, #0
   20a3c:	add	r8, fp, #8
   20a40:	add	r9, fp, #4
   20a44:	b	20a50 <__assert_fail@plt+0xf7f4>
   20a48:	cmp	r6, r4
   20a4c:	ble	20ac0 <__assert_fail@plt+0xf864>
   20a50:	ldr	r3, [r7, #8]
   20a54:	add	r1, sp, #28
   20a58:	ldr	r0, [sp, #24]
   20a5c:	ldr	r5, [r3, r4, lsl #2]
   20a60:	add	r4, r4, #1
   20a64:	mov	r2, r5
   20a68:	bl	1f57c <__assert_fail@plt+0xe320>
   20a6c:	mov	r2, r5
   20a70:	mov	r1, r8
   20a74:	cmp	r0, #0
   20a78:	bne	20a48 <__assert_fail@plt+0xf7ec>
   20a7c:	ldr	r5, [fp, #4]
   20a80:	mov	r0, r5
   20a84:	bl	1f57c <__assert_fail@plt+0xe320>
   20a88:	sub	r2, r0, #1
   20a8c:	cmp	r2, r5
   20a90:	movlt	r3, #0
   20a94:	movge	r3, #1
   20a98:	orrs	r3, r3, r2, lsr #31
   20a9c:	bne	20a48 <__assert_fail@plt+0xf7ec>
   20aa0:	sub	r5, r5, #1
   20aa4:	str	r5, [fp, #4]
   20aa8:	mov	r1, r8
   20aac:	mov	r0, r9
   20ab0:	bl	1f70c <__assert_fail@plt+0xe4b0>
   20ab4:	ldr	r6, [r7, #4]
   20ab8:	cmp	r6, r4
   20abc:	bgt	20a50 <__assert_fail@plt+0xf7f4>
   20ac0:	ldr	r0, [sp, #28]
   20ac4:	bl	13098 <__assert_fail@plt+0x1e3c>
   20ac8:	mov	r4, #0
   20acc:	mov	r0, r4
   20ad0:	add	sp, sp, #36	; 0x24
   20ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ad8:	mov	r4, r0
   20adc:	ldr	r0, [sp, #28]
   20ae0:	bl	13098 <__assert_fail@plt+0x1e3c>
   20ae4:	mov	r0, r4
   20ae8:	add	sp, sp, #36	; 0x24
   20aec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20af0:	mov	r0, r5
   20af4:	b	20ac4 <__assert_fail@plt+0xf868>
   20af8:	push	{r4, r5, r6, r7, r8, lr}
   20afc:	subs	r6, r1, #0
   20b00:	beq	20bf4 <__assert_fail@plt+0xf998>
   20b04:	ldr	r2, [r6, #4]
   20b08:	cmp	r2, #0
   20b0c:	mov	ip, r2
   20b10:	beq	20bf4 <__assert_fail@plt+0xf998>
   20b14:	ldm	r0, {r1, r3}
   20b18:	mov	r5, r0
   20b1c:	add	r4, r3, r2, lsl #1
   20b20:	cmp	r1, r4
   20b24:	blt	20c1c <__assert_fail@plt+0xf9c0>
   20b28:	cmp	r3, #0
   20b2c:	beq	20c5c <__assert_fail@plt+0xfa00>
   20b30:	sub	r2, r2, #1
   20b34:	sub	r3, r3, #1
   20b38:	mvn	r7, r2
   20b3c:	mvn	lr, r3
   20b40:	tst	r7, lr
   20b44:	bpl	20b80 <__assert_fail@plt+0xf924>
   20b48:	ldr	r1, [r5, #8]
   20b4c:	ldr	r0, [r6, #8]
   20b50:	ldr	ip, [r1, r3, lsl #2]
   20b54:	ldr	r0, [r0, r2, lsl #2]
   20b58:	cmp	ip, r0
   20b5c:	beq	20b30 <__assert_fail@plt+0xf8d4>
   20b60:	sublt	r4, r4, #1
   20b64:	sublt	r2, r2, #1
   20b68:	subge	r3, r3, #1
   20b6c:	mvnlt	r7, r2
   20b70:	mvnge	lr, r3
   20b74:	strlt	r0, [r1, r4, lsl #2]
   20b78:	tst	r7, lr
   20b7c:	bmi	20b48 <__assert_fail@plt+0xf8ec>
   20b80:	cmp	r2, #0
   20b84:	blt	20ba4 <__assert_fail@plt+0xf948>
   20b88:	add	r2, r2, #1
   20b8c:	sub	r4, r4, r2
   20b90:	ldr	r0, [r5, #8]
   20b94:	lsl	r2, r2, #2
   20b98:	add	r0, r0, r4, lsl #2
   20b9c:	ldr	r1, [r6, #8]
   20ba0:	bl	11004 <memcpy@plt>
   20ba4:	ldr	r1, [r6, #4]
   20ba8:	ldr	ip, [r5, #4]
   20bac:	add	r1, ip, r1, lsl #1
   20bb0:	subs	r2, r1, r4
   20bb4:	sub	r1, r1, #1
   20bb8:	beq	20bf4 <__assert_fail@plt+0xf998>
   20bbc:	ldr	r0, [r5, #8]
   20bc0:	sub	r3, ip, #1
   20bc4:	add	ip, ip, r2
   20bc8:	str	ip, [r5, #4]
   20bcc:	ldr	lr, [r0, r1, lsl #2]
   20bd0:	ldr	ip, [r0, r3, lsl #2]
   20bd4:	add	r6, r3, r2
   20bd8:	cmp	lr, ip
   20bdc:	mov	r5, r6
   20be0:	ble	20bfc <__assert_fail@plt+0xf9a0>
   20be4:	subs	r2, r2, #1
   20be8:	sub	r1, r1, #1
   20bec:	str	lr, [r0, r6, lsl #2]
   20bf0:	bne	20bcc <__assert_fail@plt+0xf970>
   20bf4:	mov	r0, #0
   20bf8:	pop	{r4, r5, r6, r7, r8, pc}
   20bfc:	subs	r3, r3, #1
   20c00:	str	ip, [r0, r6, lsl #2]
   20c04:	bpl	20bcc <__assert_fail@plt+0xf970>
   20c08:	lsl	r2, r2, #2
   20c0c:	add	r1, r0, r4, lsl #2
   20c10:	bl	11004 <memcpy@plt>
   20c14:	mov	r0, #0
   20c18:	pop	{r4, r5, r6, r7, r8, pc}
   20c1c:	add	r2, r2, r1
   20c20:	ldr	r0, [r0, #8]
   20c24:	lsl	r1, r2, #3
   20c28:	lsl	r4, r2, #1
   20c2c:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   20c30:	cmp	r0, #0
   20c34:	beq	20c78 <__assert_fail@plt+0xfa1c>
   20c38:	ldr	r3, [r5, #4]
   20c3c:	str	r0, [r5, #8]
   20c40:	cmp	r3, #0
   20c44:	str	r4, [r5]
   20c48:	ldreq	ip, [r6, #4]
   20c4c:	beq	20c60 <__assert_fail@plt+0xfa04>
   20c50:	ldr	r2, [r6, #4]
   20c54:	add	r4, r3, r2, lsl #1
   20c58:	b	20b30 <__assert_fail@plt+0xf8d4>
   20c5c:	ldr	r0, [r0, #8]
   20c60:	str	ip, [r5, #4]
   20c64:	ldr	r2, [r6, #4]
   20c68:	ldr	r1, [r6, #8]
   20c6c:	lsl	r2, r2, #2
   20c70:	bl	11004 <memcpy@plt>
   20c74:	b	20bf4 <__assert_fail@plt+0xf998>
   20c78:	mov	r0, #12
   20c7c:	pop	{r4, r5, r6, r7, r8, pc}
   20c80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c84:	add	r7, r2, r2, lsl #1
   20c88:	mov	r4, r2
   20c8c:	ldr	r2, [r1, #20]
   20c90:	lsl	r7, r7, #2
   20c94:	add	r2, r2, r7
   20c98:	mov	r6, r1
   20c9c:	ldr	r1, [r2, #4]
   20ca0:	sub	sp, sp, #44	; 0x2c
   20ca4:	add	r1, r1, #1
   20ca8:	mov	r2, #0
   20cac:	mov	sl, r0
   20cb0:	lsl	r0, r1, #2
   20cb4:	str	r3, [sp, #12]
   20cb8:	str	r1, [sp, #16]
   20cbc:	str	r2, [sp, #20]
   20cc0:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   20cc4:	cmp	r0, #0
   20cc8:	str	r0, [sp, #24]
   20ccc:	beq	20ea8 <__assert_fail@plt+0xfc4c>
   20cd0:	ldr	r8, [r6]
   20cd4:	ldr	r3, [sp, #20]
   20cd8:	lsl	r5, r4, #3
   20cdc:	add	lr, r8, r5
   20ce0:	str	r4, [r0, r3, lsl #2]
   20ce4:	ldr	r1, [r6, #24]
   20ce8:	ldr	r0, [lr, #4]
   20cec:	ldr	r2, [pc, #452]	; 20eb8 <__assert_fail@plt+0xfc5c>
   20cf0:	add	ip, r1, r7
   20cf4:	and	r2, r2, r0
   20cf8:	add	r3, r3, #1
   20cfc:	cmp	r2, #0
   20d00:	mvn	r2, #0
   20d04:	str	r3, [sp, #20]
   20d08:	str	r2, [ip, #4]
   20d0c:	beq	20d3c <__assert_fail@plt+0xfae0>
   20d10:	ldr	r3, [r6, #20]
   20d14:	add	r3, r3, r7
   20d18:	ldr	r2, [r3, #4]
   20d1c:	cmp	r2, #0
   20d20:	beq	20e0c <__assert_fail@plt+0xfbb0>
   20d24:	ldr	r3, [r3, #8]
   20d28:	ldr	r3, [r3]
   20d2c:	add	r8, r8, r3, lsl #3
   20d30:	ldrb	r3, [r8, #6]
   20d34:	tst	r3, #4
   20d38:	beq	20e70 <__assert_fail@plt+0xfc14>
   20d3c:	ldrb	r3, [lr, #4]
   20d40:	tst	r3, #8
   20d44:	beq	20e08 <__assert_fail@plt+0xfbac>
   20d48:	ldr	ip, [r6, #20]
   20d4c:	add	r3, ip, r7
   20d50:	ldr	r2, [r3, #4]
   20d54:	cmp	r2, #0
   20d58:	ble	20e08 <__assert_fail@plt+0xfbac>
   20d5c:	mov	r9, #0
   20d60:	mov	r5, r9
   20d64:	mov	fp, #1
   20d68:	add	r8, sp, #28
   20d6c:	b	20dc0 <__assert_fail@plt+0xfb64>
   20d70:	cmp	r0, #0
   20d74:	beq	20e30 <__assert_fail@plt+0xfbd4>
   20d78:	ldm	r3, {r0, r1, r2}
   20d7c:	stm	r8, {r0, r1, r2}
   20d80:	mov	r1, r8
   20d84:	add	r0, sp, #16
   20d88:	bl	20af8 <__assert_fail@plt+0xf89c>
   20d8c:	cmp	r0, #0
   20d90:	bne	20e48 <__assert_fail@plt+0xfbec>
   20d94:	ldr	r1, [r6, #24]
   20d98:	add	r4, r1, r4
   20d9c:	ldr	r3, [r4, #4]
   20da0:	cmp	r3, #0
   20da4:	beq	20e58 <__assert_fail@plt+0xfbfc>
   20da8:	ldr	ip, [r6, #20]
   20dac:	add	r3, ip, r7
   20db0:	add	r5, r5, #1
   20db4:	ldr	r2, [r3, #4]
   20db8:	cmp	r2, r5
   20dbc:	ble	20de8 <__assert_fail@plt+0xfb8c>
   20dc0:	ldr	r3, [r3, #8]
   20dc4:	ldr	r2, [r3, r5, lsl #2]
   20dc8:	add	r4, r2, r2, lsl #1
   20dcc:	lsl	r4, r4, #2
   20dd0:	add	r3, r1, r4
   20dd4:	ldr	r0, [r3, #4]
   20dd8:	cmn	r0, #1
   20ddc:	bne	20d70 <__assert_fail@plt+0xfb14>
   20de0:	mov	r9, fp
   20de4:	b	20dac <__assert_fail@plt+0xfb50>
   20de8:	ldr	r3, [sp, #12]
   20dec:	eor	r3, r3, #1
   20df0:	tst	r9, r3
   20df4:	addne	r7, r1, r7
   20df8:	movne	r3, #0
   20dfc:	strne	r3, [r7, #4]
   20e00:	addne	lr, sp, #16
   20e04:	bne	20e18 <__assert_fail@plt+0xfbbc>
   20e08:	add	ip, r1, r7
   20e0c:	add	lr, sp, #16
   20e10:	ldm	lr, {r0, r1, r2}
   20e14:	stm	ip, {r0, r1, r2}
   20e18:	mov	r3, #0
   20e1c:	ldm	lr, {r0, r1, r2}
   20e20:	stm	sl, {r0, r1, r2}
   20e24:	mov	r0, r3
   20e28:	add	sp, sp, #44	; 0x2c
   20e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e30:	mov	r3, #0
   20e34:	mov	r1, r6
   20e38:	mov	r0, r8
   20e3c:	bl	20c80 <__assert_fail@plt+0xfa24>
   20e40:	cmp	r0, #0
   20e44:	beq	20d80 <__assert_fail@plt+0xfb24>
   20e48:	mov	r3, r0
   20e4c:	mov	r0, r3
   20e50:	add	sp, sp, #44	; 0x2c
   20e54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e58:	ldr	r0, [sp, #36]	; 0x24
   20e5c:	bl	13098 <__assert_fail@plt+0x1e3c>
   20e60:	mov	r9, fp
   20e64:	ldr	r1, [r6, #24]
   20e68:	ldr	ip, [r6, #20]
   20e6c:	b	20dac <__assert_fail@plt+0xfb50>
   20e70:	ldr	r2, [pc, #68]	; 20ebc <__assert_fail@plt+0xfc60>
   20e74:	mov	r3, r4
   20e78:	and	r0, r2, r0, lsr #8
   20e7c:	str	r0, [sp]
   20e80:	mov	r2, r4
   20e84:	mov	r1, r4
   20e88:	mov	r0, r6
   20e8c:	bl	1f108 <__assert_fail@plt+0xdeac>
   20e90:	subs	r3, r0, #0
   20e94:	bne	20e24 <__assert_fail@plt+0xfbc8>
   20e98:	ldr	lr, [r6]
   20e9c:	ldr	r1, [r6, #24]
   20ea0:	add	lr, lr, r5
   20ea4:	b	20d3c <__assert_fail@plt+0xfae0>
   20ea8:	mov	r3, #12
   20eac:	mov	r0, r3
   20eb0:	add	sp, sp, #44	; 0x2c
   20eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20eb8:	andeq	pc, r3, r0, lsl #30
   20ebc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   20ec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ec4:	mov	r8, r1
   20ec8:	ldr	r1, [r1, #4]
   20ecc:	sub	sp, sp, #28
   20ed0:	mov	r6, #0
   20ed4:	mov	r7, r0
   20ed8:	lsl	r0, r1, #2
   20edc:	mov	r5, r2
   20ee0:	mov	r4, r3
   20ee4:	str	r1, [sp, #12]
   20ee8:	str	r6, [sp, #16]
   20eec:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   20ef0:	cmp	r0, r6
   20ef4:	str	r0, [sp, #20]
   20ef8:	beq	20fe4 <__assert_fail@plt+0xfd88>
   20efc:	ldr	r3, [r8, #4]
   20f00:	add	r9, sp, #12
   20f04:	cmp	r3, r6
   20f08:	ble	20fa0 <__assert_fail@plt+0xfd44>
   20f0c:	ldr	r3, [r8, #8]
   20f10:	ldr	r1, [r7, #24]
   20f14:	ldr	r2, [r3, r6, lsl #2]
   20f18:	add	r3, r2, r2, lsl #1
   20f1c:	add	r1, r1, r3, lsl #2
   20f20:	ldr	fp, [r1, #4]
   20f24:	cmp	fp, #0
   20f28:	ble	20fc0 <__assert_fail@plt+0xfd64>
   20f2c:	ldr	ip, [r1, #8]
   20f30:	ldr	sl, [r7]
   20f34:	sub	ip, ip, #4
   20f38:	mov	r3, #0
   20f3c:	b	20f48 <__assert_fail@plt+0xfcec>
   20f40:	cmp	fp, r3
   20f44:	beq	20fc0 <__assert_fail@plt+0xfd64>
   20f48:	ldr	r0, [ip, #4]!
   20f4c:	add	r3, r3, #1
   20f50:	add	lr, sl, r0, lsl #3
   20f54:	ldrb	lr, [lr, #4]
   20f58:	cmp	r4, lr
   20f5c:	bne	20f40 <__assert_fail@plt+0xfce4>
   20f60:	ldr	lr, [sl, r0, lsl #3]
   20f64:	cmp	r5, lr
   20f68:	bne	20f40 <__assert_fail@plt+0xfce4>
   20f6c:	cmn	r0, #1
   20f70:	beq	20fc0 <__assert_fail@plt+0xfd64>
   20f74:	str	r4, [sp]
   20f78:	mov	r3, r5
   20f7c:	mov	r1, r9
   20f80:	mov	r0, r7
   20f84:	bl	1f60c <__assert_fail@plt+0xe3b0>
   20f88:	subs	sl, r0, #0
   20f8c:	bne	20fd0 <__assert_fail@plt+0xfd74>
   20f90:	ldr	r3, [r8, #4]
   20f94:	add	r6, r6, #1
   20f98:	cmp	r3, r6
   20f9c:	bgt	20f0c <__assert_fail@plt+0xfcb0>
   20fa0:	ldr	r0, [r8, #8]
   20fa4:	bl	13098 <__assert_fail@plt+0x1e3c>
   20fa8:	ldm	r9, {r0, r1, r2}
   20fac:	mov	sl, #0
   20fb0:	stm	r8, {r0, r1, r2}
   20fb4:	mov	r0, sl
   20fb8:	add	sp, sp, #28
   20fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20fc0:	mov	r0, r9
   20fc4:	bl	20af8 <__assert_fail@plt+0xf89c>
   20fc8:	subs	sl, r0, #0
   20fcc:	beq	20f90 <__assert_fail@plt+0xfd34>
   20fd0:	ldr	r0, [sp, #20]
   20fd4:	bl	13098 <__assert_fail@plt+0x1e3c>
   20fd8:	mov	r0, sl
   20fdc:	add	sp, sp, #28
   20fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20fe4:	mov	sl, #12
   20fe8:	mov	r0, sl
   20fec:	add	sp, sp, #28
   20ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ff4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ff8:	mov	r5, #0
   20ffc:	ldr	r6, [r0, #108]	; 0x6c
   21000:	sub	sp, sp, #44	; 0x2c
   21004:	mov	r4, r6
   21008:	cmp	r5, r4
   2100c:	bge	21068 <__assert_fail@plt+0xfe0c>
   21010:	add	lr, r5, r4
   21014:	ldr	r7, [r0, #116]	; 0x74
   21018:	add	lr, lr, lr, lsr #31
   2101c:	asr	lr, lr, #1
   21020:	add	ip, lr, lr, lsl #1
   21024:	add	ip, r7, ip, lsl #3
   21028:	ldr	ip, [ip, #4]
   2102c:	cmp	r2, ip
   21030:	ble	21058 <__assert_fail@plt+0xfdfc>
   21034:	b	21288 <__assert_fail@plt+0x1002c>
   21038:	asr	ip, ip, #1
   2103c:	mov	r8, ip
   21040:	add	r4, ip, ip, lsl #1
   21044:	add	r4, r7, r4, lsl #3
   21048:	ldr	r4, [r4, #4]
   2104c:	cmp	r2, r4
   21050:	bgt	21290 <__assert_fail@plt+0x10034>
   21054:	mov	lr, ip
   21058:	add	ip, r5, lr
   2105c:	cmp	r5, lr
   21060:	add	ip, ip, ip, lsr #31
   21064:	blt	21038 <__assert_fail@plt+0xfddc>
   21068:	cmp	r6, r5
   2106c:	ble	2127c <__assert_fail@plt+0x10020>
   21070:	add	ip, r5, r5, lsl #1
   21074:	ldr	r4, [r0, #116]	; 0x74
   21078:	lsl	ip, ip, #3
   2107c:	add	lr, r4, ip
   21080:	cmn	r5, #1
   21084:	ldr	lr, [lr, #4]
   21088:	movne	r5, #0
   2108c:	moveq	r5, #1
   21090:	cmp	lr, r2
   21094:	orrne	r5, r5, #1
   21098:	cmp	r5, #0
   2109c:	bne	2127c <__assert_fail@plt+0x10020>
   210a0:	ldr	fp, [r0, #84]	; 0x54
   210a4:	mov	r8, r1
   210a8:	mov	r9, r0
   210ac:	add	r7, r1, #8
   210b0:	str	r3, [sp, #16]
   210b4:	add	r3, ip, #24
   210b8:	str	r2, [sp, #8]
   210bc:	str	r3, [sp, #12]
   210c0:	str	r5, [sp, #20]
   210c4:	ldr	r3, [sp, #12]
   210c8:	add	r4, r4, r3
   210cc:	b	21118 <__assert_fail@plt+0xfebc>
   210d0:	ldr	r3, [r9, #100]	; 0x64
   210d4:	ldr	r2, [fp, #12]
   210d8:	ldr	r3, [r3, r5, lsl #2]
   210dc:	ldr	sl, [r2, sl, lsl #2]
   210e0:	cmp	r3, #0
   210e4:	beq	2129c <__assert_fail@plt+0x10040>
   210e8:	add	r1, r3, #12
   210ec:	ldr	r0, [r3, #8]
   210f0:	mov	r2, sl
   210f4:	str	r3, [sp, #4]
   210f8:	bl	1f57c <__assert_fail@plt+0xe320>
   210fc:	ldr	r3, [sp, #4]
   21100:	cmp	r0, #0
   21104:	beq	211fc <__assert_fail@plt+0xffa0>
   21108:	add	r4, r4, #24
   2110c:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   21110:	cmp	r3, #0
   21114:	beq	2127c <__assert_fail@plt+0x10020>
   21118:	ldr	sl, [r4, #-24]	; 0xffffffe8
   2111c:	ldr	r6, [r8, #4]
   21120:	mov	r2, sl
   21124:	mov	r0, r6
   21128:	mov	r1, r7
   2112c:	bl	1f57c <__assert_fail@plt+0xe320>
   21130:	cmp	r0, #0
   21134:	beq	21108 <__assert_fail@plt+0xfeac>
   21138:	ldr	r3, [sp, #8]
   2113c:	ldr	r5, [r4, #-12]
   21140:	ldr	r2, [r4, #-16]
   21144:	add	r5, r3, r5
   21148:	sub	r5, r5, r2
   2114c:	cmp	r3, r5
   21150:	bne	210d0 <__assert_fail@plt+0xfe74>
   21154:	ldr	r2, [fp, #20]
   21158:	add	sl, sl, sl, lsl #1
   2115c:	mov	r0, r6
   21160:	add	sl, r2, sl, lsl #2
   21164:	mov	r1, r7
   21168:	ldr	r3, [sl, #8]
   2116c:	ldr	r5, [r3]
   21170:	mov	r2, r5
   21174:	bl	1f57c <__assert_fail@plt+0xe320>
   21178:	cmp	r0, #0
   2117c:	bne	21108 <__assert_fail@plt+0xfeac>
   21180:	mov	r3, #1
   21184:	mov	r0, #4
   21188:	str	r3, [sp, #28]
   2118c:	str	r3, [sp, #32]
   21190:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   21194:	ldr	r3, [sp, #80]	; 0x50
   21198:	ldr	r2, [sp, #16]
   2119c:	add	r1, sp, #28
   211a0:	cmp	r0, #0
   211a4:	strne	r5, [r0]
   211a8:	ldrne	ip, [sp, #20]
   211ac:	streq	r0, [sp, #32]
   211b0:	streq	r0, [sp, #28]
   211b4:	moveq	ip, #12
   211b8:	str	r0, [sp, #36]	; 0x24
   211bc:	mov	r0, fp
   211c0:	str	ip, [sp, #24]
   211c4:	bl	20ec0 <__assert_fail@plt+0xfc64>
   211c8:	add	r1, sp, #28
   211cc:	mov	r4, r0
   211d0:	mov	r0, r8
   211d4:	bl	20af8 <__assert_fail@plt+0xf89c>
   211d8:	mov	r5, r0
   211dc:	ldr	r0, [sp, #36]	; 0x24
   211e0:	bl	13098 <__assert_fail@plt+0x1e3c>
   211e4:	ldr	r0, [sp, #24]
   211e8:	orr	r3, r4, r5
   211ec:	orrs	r3, r3, r0
   211f0:	bne	212f0 <__assert_fail@plt+0x10094>
   211f4:	ldr	r4, [r9, #116]	; 0x74
   211f8:	b	210c4 <__assert_fail@plt+0xfe68>
   211fc:	add	r1, r3, #4
   21200:	add	r0, sp, #28
   21204:	bl	20088 <__assert_fail@plt+0xee2c>
   21208:	mov	r1, sl
   2120c:	str	r0, [sp, #24]
   21210:	add	r0, sp, #28
   21214:	bl	1efec <__assert_fail@plt+0xdd90>
   21218:	ldr	r3, [sp, #24]
   2121c:	eor	r0, r0, #1
   21220:	cmp	r3, #0
   21224:	orrne	r0, r0, #1
   21228:	tst	r0, #255	; 0xff
   2122c:	bne	212d0 <__assert_fail@plt+0x10074>
   21230:	add	r2, sp, #28
   21234:	mov	r1, fp
   21238:	add	r0, sp, #24
   2123c:	ldr	sl, [r9, #100]	; 0x64
   21240:	bl	20578 <__assert_fail@plt+0xf31c>
   21244:	str	r0, [sl, r5, lsl #2]
   21248:	ldr	r0, [sp, #36]	; 0x24
   2124c:	bl	13098 <__assert_fail@plt+0x1e3c>
   21250:	ldr	r3, [r9, #100]	; 0x64
   21254:	ldr	r3, [r3, r5, lsl #2]
   21258:	cmp	r3, #0
   2125c:	bne	21108 <__assert_fail@plt+0xfeac>
   21260:	ldr	r0, [sp, #24]
   21264:	cmp	r0, #0
   21268:	bne	21280 <__assert_fail@plt+0x10024>
   2126c:	add	r4, r4, #24
   21270:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   21274:	cmp	r3, #0
   21278:	bne	21118 <__assert_fail@plt+0xfebc>
   2127c:	mov	r0, #0
   21280:	add	sp, sp, #44	; 0x2c
   21284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21288:	mov	r8, lr
   2128c:	mov	lr, r4
   21290:	add	r5, r8, #1
   21294:	mov	r4, lr
   21298:	b	21008 <__assert_fail@plt+0xfdac>
   2129c:	str	r3, [sp, #4]
   212a0:	mov	r0, #4
   212a4:	mov	r3, #1
   212a8:	str	r3, [sp, #28]
   212ac:	str	r3, [sp, #32]
   212b0:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   212b4:	cmp	r0, #0
   212b8:	str	r0, [sp, #36]	; 0x24
   212bc:	beq	212e4 <__assert_fail@plt+0x10088>
   212c0:	ldr	r3, [sp, #4]
   212c4:	str	sl, [r0]
   212c8:	str	r3, [sp, #24]
   212cc:	b	21230 <__assert_fail@plt+0xffd4>
   212d0:	ldr	r0, [sp, #36]	; 0x24
   212d4:	bl	13098 <__assert_fail@plt+0x1e3c>
   212d8:	ldr	r0, [sp, #24]
   212dc:	cmp	r0, #0
   212e0:	bne	21280 <__assert_fail@plt+0x10024>
   212e4:	mov	r0, #12
   212e8:	add	sp, sp, #44	; 0x2c
   212ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212f0:	cmp	r0, #0
   212f4:	bne	21280 <__assert_fail@plt+0x10024>
   212f8:	cmp	r4, #0
   212fc:	movne	r0, r4
   21300:	moveq	r0, r5
   21304:	b	21280 <__assert_fail@plt+0x10024>
   21308:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2130c:	sub	sp, sp, #14400	; 0x3840
   21310:	sub	sp, sp, #28
   21314:	mov	r4, #0
   21318:	mov	r5, r1
   2131c:	str	r1, [sp, #8]
   21320:	str	r4, [r1, #44]	; 0x2c
   21324:	str	r4, [r1, #48]	; 0x30
   21328:	mov	r8, r0
   2132c:	mov	r1, r4
   21330:	add	r0, sp, #88	; 0x58
   21334:	mov	r2, #32
   21338:	bl	1119c <memset@plt>
   2133c:	ldr	r1, [r5, #8]
   21340:	cmp	r1, r4
   21344:	ble	21c9c <__assert_fail@plt+0x10a40>
   21348:	add	r2, sp, #6208	; 0x1840
   2134c:	add	r2, r2, #24
   21350:	sub	r2, r2, #4
   21354:	str	r2, [sp, #32]
   21358:	str	r8, [sp, #28]
   2135c:	add	r2, r8, #128	; 0x80
   21360:	mov	r8, r4
   21364:	str	r4, [sp, #16]
   21368:	str	r2, [sp, #36]	; 0x24
   2136c:	ldr	r3, [sp, #8]
   21370:	ldr	r0, [sp, #16]
   21374:	ldr	r2, [r3, #12]
   21378:	ldr	r3, [sp, #28]
   2137c:	lsl	ip, r0, #2
   21380:	ldr	r2, [r2, r0, lsl #2]
   21384:	ldr	r3, [r3]
   21388:	str	ip, [sp, #12]
   2138c:	add	r0, r3, r2, lsl #3
   21390:	str	r0, [sp, #20]
   21394:	ldrb	ip, [r0, #4]
   21398:	ldr	r4, [r0, #4]
   2139c:	ldr	r0, [pc, #2548]	; 21d98 <__assert_fail@plt+0x10b3c>
   213a0:	cmp	ip, #1
   213a4:	str	ip, [sp, #4]
   213a8:	and	r4, r0, r4, lsr #8
   213ac:	beq	21520 <__assert_fail@plt+0x102c4>
   213b0:	ldr	r0, [sp, #4]
   213b4:	cmp	r0, #3
   213b8:	beq	21800 <__assert_fail@plt+0x105a4>
   213bc:	ldr	r3, [sp, #4]
   213c0:	cmp	r3, #5
   213c4:	beq	2182c <__assert_fail@plt+0x105d0>
   213c8:	ldr	r3, [sp, #4]
   213cc:	cmp	r3, #7
   213d0:	beq	21ae4 <__assert_fail@plt+0x10888>
   213d4:	ldr	r3, [sp, #16]
   213d8:	add	r3, r3, #1
   213dc:	cmp	r3, r1
   213e0:	str	r3, [sp, #16]
   213e4:	blt	2136c <__assert_fail@plt+0x10110>
   213e8:	str	r8, [sp, #4]
   213ec:	ldr	r3, [sp, #4]
   213f0:	ldr	r8, [sp, #28]
   213f4:	cmp	r3, #0
   213f8:	ble	21c98 <__assert_fail@plt+0x10a3c>
   213fc:	ldr	r3, [sp, #4]
   21400:	add	r6, sp, #2128	; 0x850
   21404:	add	r3, r3, #1
   21408:	add	r6, r6, #8
   2140c:	mov	r4, #0
   21410:	lsl	r0, r3, #2
   21414:	str	r3, [r6, #-2092]	; 0xfffff7d4
   21418:	str	r4, [r6, #-2088]	; 0xfffff7d8
   2141c:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   21420:	cmp	r0, r4
   21424:	str	r0, [r6, #-2084]	; 0xfffff7dc
   21428:	beq	21b98 <__assert_fail@plt+0x1093c>
   2142c:	add	r3, sp, #3152	; 0xc50
   21430:	add	r3, r3, #8
   21434:	mov	r1, r4
   21438:	add	r0, sp, #56	; 0x38
   2143c:	mov	r2, #32
   21440:	mov	r5, r3
   21444:	str	r4, [sp, #20]
   21448:	str	r3, [sp, #24]
   2144c:	str	r4, [r6, #-2096]	; 0xfffff7d0
   21450:	bl	1119c <memset@plt>
   21454:	add	r3, sp, #6208	; 0x1840
   21458:	add	r3, r3, #24
   2145c:	add	sl, sp, #1104	; 0x450
   21460:	mov	r9, r4
   21464:	mov	fp, r4
   21468:	add	sl, sl, #8
   2146c:	mov	r4, r5
   21470:	sub	r5, r3, #4
   21474:	add	r3, sp, #84	; 0x54
   21478:	str	r3, [sp, #12]
   2147c:	add	r3, sp, #40	; 0x28
   21480:	str	r3, [sp, #16]
   21484:	ldr	r2, [r4, #4]
   21488:	str	r9, [r6, #-2088]	; 0xfffff7d8
   2148c:	cmp	r2, #0
   21490:	movgt	r7, #0
   21494:	bgt	214ac <__assert_fail@plt+0x10250>
   21498:	b	21920 <__assert_fail@plt+0x106c4>
   2149c:	ldr	r2, [r4, #4]
   214a0:	add	r7, r7, #1
   214a4:	cmp	r2, r7
   214a8:	ble	21920 <__assert_fail@plt+0x106c4>
   214ac:	ldr	r1, [r4, #8]
   214b0:	ldr	r3, [r8, #12]
   214b4:	add	r0, sp, #44	; 0x2c
   214b8:	ldr	r1, [r1, r7, lsl #2]
   214bc:	ldr	r1, [r3, r1, lsl #2]
   214c0:	cmn	r1, #1
   214c4:	add	r1, r1, r1, lsl #1
   214c8:	beq	214a0 <__assert_fail@plt+0x10244>
   214cc:	ldr	r3, [r8, #24]
   214d0:	add	r1, r3, r1, lsl #2
   214d4:	bl	20af8 <__assert_fail@plt+0xf89c>
   214d8:	cmp	r0, #0
   214dc:	str	r0, [r6, #-2096]	; 0xfffff7d0
   214e0:	beq	2149c <__assert_fail@plt+0x10240>
   214e4:	ldr	r0, [r6, #-2084]	; 0xfffff7dc
   214e8:	bl	13098 <__assert_fail@plt+0x1e3c>
   214ec:	ldr	r5, [sp, #24]
   214f0:	ldr	r6, [sp, #4]
   214f4:	mov	r4, #0
   214f8:	ldr	r0, [r5, #8]
   214fc:	add	r4, r4, #1
   21500:	bl	13098 <__assert_fail@plt+0x1e3c>
   21504:	cmp	r4, r6
   21508:	add	r5, r5, #12
   2150c:	bne	214f8 <__assert_fail@plt+0x1029c>
   21510:	mov	r0, #0
   21514:	add	sp, sp, #14400	; 0x3840
   21518:	add	sp, sp, #28
   2151c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21520:	ldrb	r3, [r3, r2, lsl #3]
   21524:	add	r2, sp, #88	; 0x58
   21528:	and	r1, r3, #31
   2152c:	asr	r3, r3, #5
   21530:	ldr	r2, [r2, r3, lsl #2]
   21534:	orr	r2, r2, ip, lsl r1
   21538:	add	r1, sp, #88	; 0x58
   2153c:	str	r2, [r1, r3, lsl #2]
   21540:	cmp	r4, #0
   21544:	beq	2162c <__assert_fail@plt+0x103d0>
   21548:	tst	r4, #32
   2154c:	bne	21894 <__assert_fail@plt+0x10638>
   21550:	tst	r4, #128	; 0x80
   21554:	bne	218c4 <__assert_fail@plt+0x10668>
   21558:	tst	r4, #4
   2155c:	beq	215c4 <__assert_fail@plt+0x10368>
   21560:	ldr	r3, [sp, #4]
   21564:	cmp	r3, #1
   21568:	beq	21b84 <__assert_fail@plt+0x10928>
   2156c:	ldr	r2, [sp, #28]
   21570:	ldr	r3, [r2, #92]	; 0x5c
   21574:	cmp	r3, #1
   21578:	ble	21bb0 <__assert_fail@plt+0x10954>
   2157c:	ldr	lr, [r2, #60]	; 0x3c
   21580:	ldr	r6, [sp, #36]	; 0x24
   21584:	add	r0, sp, #88	; 0x58
   21588:	sub	lr, lr, #4
   2158c:	add	r1, r2, #96	; 0x60
   21590:	mov	ip, #0
   21594:	ldr	r3, [lr, #4]!
   21598:	ldr	r5, [r1], #4
   2159c:	ldr	r2, [r0]
   215a0:	mvn	r3, r3
   215a4:	orr	r3, r3, r5
   215a8:	and	r3, r3, r2
   215ac:	cmp	r6, r1
   215b0:	str	r3, [r0], #4
   215b4:	orr	ip, ip, r3
   215b8:	bne	21594 <__assert_fail@plt+0x10338>
   215bc:	cmp	ip, #0
   215c0:	beq	21788 <__assert_fail@plt+0x1052c>
   215c4:	tst	r4, #8
   215c8:	beq	2162c <__assert_fail@plt+0x103d0>
   215cc:	ldr	r3, [sp, #4]
   215d0:	cmp	r3, #1
   215d4:	beq	218d8 <__assert_fail@plt+0x1067c>
   215d8:	ldr	r2, [sp, #28]
   215dc:	ldr	r3, [r2, #92]	; 0x5c
   215e0:	cmp	r3, #1
   215e4:	ble	218ec <__assert_fail@plt+0x10690>
   215e8:	ldr	lr, [r2, #60]	; 0x3c
   215ec:	ldr	r5, [sp, #36]	; 0x24
   215f0:	add	ip, sp, #88	; 0x58
   215f4:	sub	lr, lr, #4
   215f8:	add	r0, r2, #96	; 0x60
   215fc:	mov	r1, #0
   21600:	ldr	r2, [r0], #4
   21604:	ldr	r4, [lr, #4]!
   21608:	ldr	r3, [ip]
   2160c:	and	r2, r2, r4
   21610:	bic	r3, r3, r2
   21614:	cmp	r5, r0
   21618:	str	r3, [ip], #4
   2161c:	orr	r1, r1, r3
   21620:	bne	21600 <__assert_fail@plt+0x103a4>
   21624:	cmp	r1, #0
   21628:	beq	21788 <__assert_fail@plt+0x1052c>
   2162c:	cmp	r8, #0
   21630:	movle	r6, #0
   21634:	ble	21780 <__assert_fail@plt+0x10524>
   21638:	add	r3, sp, #3152	; 0xc50
   2163c:	add	r3, r3, #8
   21640:	ldr	ip, [sp, #32]
   21644:	mov	r7, r3
   21648:	mov	r6, #0
   2164c:	str	r3, [sp, #24]
   21650:	ldr	r3, [sp, #4]
   21654:	cmp	r3, #1
   21658:	beq	21794 <__assert_fail@plt+0x10538>
   2165c:	add	r0, sp, #88	; 0x58
   21660:	add	r9, sp, #1104	; 0x450
   21664:	add	r9, r9, #8
   21668:	add	r4, ip, #32
   2166c:	mov	r1, ip
   21670:	mov	r5, r0
   21674:	mov	lr, #0
   21678:	ldr	r2, [r1, #4]!
   2167c:	ldr	r3, [r5], #4
   21680:	cmp	r1, r4
   21684:	and	r3, r3, r2
   21688:	str	r3, [r9], #4
   2168c:	orr	lr, lr, r3
   21690:	bne	21678 <__assert_fail@plt+0x1041c>
   21694:	cmp	lr, #0
   21698:	beq	2176c <__assert_fail@plt+0x10510>
   2169c:	mov	r5, #0
   216a0:	add	fp, sp, #2128	; 0x850
   216a4:	mov	sl, r5
   216a8:	add	fp, fp, #8
   216ac:	mov	lr, ip
   216b0:	ldr	r3, [r0]
   216b4:	ldr	r9, [lr, #4]!
   216b8:	bic	r2, r9, r3
   216bc:	cmp	r1, lr
   216c0:	bic	r3, r3, r9
   216c4:	str	r2, [fp], #4
   216c8:	orr	sl, sl, r2
   216cc:	str	r3, [r0], #4
   216d0:	orr	r5, r5, r3
   216d4:	bne	216b0 <__assert_fail@plt+0x10454>
   216d8:	cmp	sl, #0
   216dc:	beq	21744 <__assert_fail@plt+0x104e8>
   216e0:	add	sl, sp, #2128	; 0x850
   216e4:	add	sl, sl, #8
   216e8:	add	lr, sp, #14400	; 0x3840
   216ec:	ldm	sl!, {r0, r1, r2, r3}
   216f0:	add	lr, lr, #24
   216f4:	add	lr, lr, r8, lsl #5
   216f8:	sub	lr, lr, #8192	; 0x2000
   216fc:	add	r9, sp, #1104	; 0x450
   21700:	stmia	lr!, {r0, r1, r2, r3}
   21704:	add	r9, r9, #8
   21708:	ldm	sl, {r0, r1, r2, r3}
   2170c:	add	ip, ip, #4
   21710:	add	fp, r8, r8, lsl #1
   21714:	stm	lr, {r0, r1, r2, r3}
   21718:	ldm	r9!, {r0, r1, r2, r3}
   2171c:	stmia	ip!, {r0, r1, r2, r3}
   21720:	ldm	r9, {r0, r1, r2, r3}
   21724:	stm	ip, {r0, r1, r2, r3}
   21728:	mov	r1, r7
   2172c:	ldr	r3, [sp, #24]
   21730:	add	r0, r3, fp, lsl #2
   21734:	bl	20088 <__assert_fail@plt+0xee2c>
   21738:	cmp	r0, #0
   2173c:	bne	217d4 <__assert_fail@plt+0x10578>
   21740:	add	r8, r8, #1
   21744:	ldr	r3, [sp, #8]
   21748:	ldr	r2, [sp, #12]
   2174c:	mov	r0, r7
   21750:	ldr	r3, [r3, #12]
   21754:	ldr	r1, [r3, r2]
   21758:	bl	1efec <__assert_fail@plt+0xdd90>
   2175c:	cmp	r0, #0
   21760:	beq	217d4 <__assert_fail@plt+0x10578>
   21764:	cmp	r5, #0
   21768:	beq	21780 <__assert_fail@plt+0x10524>
   2176c:	add	r6, r6, #1
   21770:	cmp	r6, r8
   21774:	mov	ip, r4
   21778:	add	r7, r7, #12
   2177c:	blt	21650 <__assert_fail@plt+0x103f4>
   21780:	cmp	r8, r6
   21784:	beq	21bf4 <__assert_fail@plt+0x10998>
   21788:	ldr	r3, [sp, #8]
   2178c:	ldr	r1, [r3, #8]
   21790:	b	213d4 <__assert_fail@plt+0x10178>
   21794:	ldr	r3, [sp, #20]
   21798:	ldrb	r1, [r3]
   2179c:	lsl	r3, r6, #5
   217a0:	and	r2, r1, #31
   217a4:	asr	r1, r1, #5
   217a8:	add	r3, r3, r1, lsl #2
   217ac:	add	r1, sp, #14400	; 0x3840
   217b0:	add	r1, r1, #24
   217b4:	add	r3, r1, r3
   217b8:	sub	r3, r3, #8192	; 0x2000
   217bc:	ldr	r3, [r3]
   217c0:	lsr	r2, r3, r2
   217c4:	tst	r2, #1
   217c8:	addeq	r4, ip, #32
   217cc:	beq	2176c <__assert_fail@plt+0x10510>
   217d0:	b	2165c <__assert_fail@plt+0x10400>
   217d4:	str	r8, [sp, #4]
   217d8:	ldr	r5, [sp, #24]
   217dc:	ldr	r6, [sp, #4]
   217e0:	mov	r4, #0
   217e4:	ldr	r0, [r5, #8]
   217e8:	add	r4, r4, #1
   217ec:	bl	13098 <__assert_fail@plt+0x1e3c>
   217f0:	cmp	r4, r6
   217f4:	add	r5, r5, #12
   217f8:	bne	217e4 <__assert_fail@plt+0x10588>
   217fc:	b	21510 <__assert_fail@plt+0x102b4>
   21800:	ldr	r0, [r3, r2, lsl #3]
   21804:	add	r1, sp, #88	; 0x58
   21808:	sub	r2, r0, #4
   2180c:	add	r0, r0, #28
   21810:	ldr	r3, [r1]
   21814:	ldr	ip, [r2, #4]!
   21818:	orr	r3, r3, ip
   2181c:	cmp	r2, r0
   21820:	str	r3, [r1], #4
   21824:	bne	21810 <__assert_fail@plt+0x105b4>
   21828:	b	21540 <__assert_fail@plt+0x102e4>
   2182c:	ldr	r2, [sp, #28]
   21830:	ldr	r3, [r2, #92]	; 0x5c
   21834:	cmp	r3, #1
   21838:	ble	21c84 <__assert_fail@plt+0x10a28>
   2183c:	ldr	r0, [r2, #60]	; 0x3c
   21840:	add	r1, sp, #88	; 0x58
   21844:	sub	r2, r0, #4
   21848:	add	r0, r0, #28
   2184c:	ldr	r3, [r1]
   21850:	ldr	ip, [r2, #4]!
   21854:	orr	r3, r3, ip
   21858:	cmp	r2, r0
   2185c:	str	r3, [r1], #4
   21860:	bne	2184c <__assert_fail@plt+0x105f0>
   21864:	ldr	r3, [sp, #28]
   21868:	ldr	r3, [r3, #128]	; 0x80
   2186c:	tst	r3, #64	; 0x40
   21870:	ldreq	r2, [sp, #88]	; 0x58
   21874:	biceq	r2, r2, #1024	; 0x400
   21878:	streq	r2, [sp, #88]	; 0x58
   2187c:	tst	r3, #128	; 0x80
   21880:	beq	21540 <__assert_fail@plt+0x102e4>
   21884:	ldr	r3, [sp, #88]	; 0x58
   21888:	bic	r3, r3, #1
   2188c:	str	r3, [sp, #88]	; 0x58
   21890:	b	21540 <__assert_fail@plt+0x102e4>
   21894:	ldr	r5, [sp, #88]	; 0x58
   21898:	mov	r2, #32
   2189c:	mov	r1, #0
   218a0:	and	r5, r5, #1024	; 0x400
   218a4:	add	r0, sp, #88	; 0x58
   218a8:	bl	1119c <memset@plt>
   218ac:	cmp	r5, #0
   218b0:	beq	21788 <__assert_fail@plt+0x1052c>
   218b4:	mov	r3, #1024	; 0x400
   218b8:	tst	r4, #128	; 0x80
   218bc:	str	r3, [sp, #88]	; 0x58
   218c0:	beq	21558 <__assert_fail@plt+0x102fc>
   218c4:	mov	r2, #32
   218c8:	mov	r1, #0
   218cc:	add	r0, sp, #88	; 0x58
   218d0:	bl	1119c <memset@plt>
   218d4:	b	21788 <__assert_fail@plt+0x1052c>
   218d8:	ldr	r3, [sp, #20]
   218dc:	ldrb	r3, [r3, #6]
   218e0:	tst	r3, #64	; 0x40
   218e4:	beq	215d8 <__assert_fail@plt+0x1037c>
   218e8:	b	218c4 <__assert_fail@plt+0x10668>
   218ec:	ldr	r3, [sp, #28]
   218f0:	ldr	lr, [sp, #36]	; 0x24
   218f4:	add	ip, sp, #88	; 0x58
   218f8:	add	r0, r3, #96	; 0x60
   218fc:	mov	r1, #0
   21900:	ldr	r2, [r0], #4
   21904:	ldr	r3, [ip]
   21908:	cmp	lr, r0
   2190c:	bic	r3, r3, r2
   21910:	str	r3, [ip], #4
   21914:	orr	r1, r1, r3
   21918:	bne	21900 <__assert_fail@plt+0x106a4>
   2191c:	b	21624 <__assert_fail@plt+0x103c8>
   21920:	mov	r3, r9
   21924:	add	r2, sp, #44	; 0x2c
   21928:	mov	r1, r8
   2192c:	ldr	r0, [sp, #16]
   21930:	bl	2024c <__assert_fail@plt+0xeff0>
   21934:	ldr	r3, [sp, #12]
   21938:	cmp	r0, #0
   2193c:	str	r0, [r3, #4]!
   21940:	mov	r7, r0
   21944:	str	r3, [sp, #12]
   21948:	beq	21be4 <__assert_fail@plt+0x10988>
   2194c:	ldrsb	r3, [r7, #52]	; 0x34
   21950:	cmp	r3, #0
   21954:	strge	r7, [sl]
   21958:	strge	r7, [r6, fp, lsl #2]
   2195c:	blt	21b18 <__assert_fail@plt+0x108bc>
   21960:	add	r7, sp, #56	; 0x38
   21964:	add	r0, r5, #32
   21968:	mov	r1, r7
   2196c:	ldr	r3, [r1]
   21970:	ldr	r2, [r5, #4]!
   21974:	orr	r3, r3, r2
   21978:	cmp	r0, r5
   2197c:	str	r3, [r1], #4
   21980:	bne	2196c <__assert_fail@plt+0x10710>
   21984:	ldr	r3, [sp, #4]
   21988:	add	fp, fp, #1
   2198c:	cmp	fp, r3
   21990:	add	r4, r4, #12
   21994:	add	sl, sl, #4
   21998:	mov	r5, r0
   2199c:	bne	21484 <__assert_fail@plt+0x10228>
   219a0:	ldr	r3, [sp, #20]
   219a4:	cmp	r3, #0
   219a8:	bne	21cec <__assert_fail@plt+0x10a90>
   219ac:	mov	r1, #256	; 0x100
   219b0:	mov	r0, #4
   219b4:	bl	2bc8c <__assert_fail@plt+0x1aa30>
   219b8:	ldr	r3, [sp, #8]
   219bc:	cmp	r0, #0
   219c0:	str	r0, [r3, #44]	; 0x2c
   219c4:	beq	214e4 <__assert_fail@plt+0x10288>
   219c8:	add	ip, sp, #6208	; 0x1840
   219cc:	add	r9, r8, #96	; 0x60
   219d0:	mov	r5, r0
   219d4:	add	ip, ip, #24
   219d8:	add	sl, r0, #1024	; 0x400
   219dc:	ldr	r1, [r7], #4
   219e0:	cmp	r1, #0
   219e4:	movne	lr, r5
   219e8:	movne	r2, #1
   219ec:	bne	21a04 <__assert_fail@plt+0x107a8>
   219f0:	b	21a50 <__assert_fail@plt+0x107f4>
   219f4:	lsrs	r1, r1, #1
   219f8:	lsl	r2, r2, #1
   219fc:	add	lr, lr, #4
   21a00:	beq	21a50 <__assert_fail@plt+0x107f4>
   21a04:	tst	r1, #1
   21a08:	beq	219f4 <__assert_fail@plt+0x10798>
   21a0c:	ldr	r3, [ip]
   21a10:	ands	r3, r2, r3
   21a14:	bne	21ce4 <__assert_fail@plt+0x10a88>
   21a18:	add	r3, r3, #1
   21a1c:	ldr	r4, [ip, r3, lsl #5]
   21a20:	tst	r2, r4
   21a24:	beq	21a18 <__assert_fail@plt+0x107bc>
   21a28:	ldr	r4, [r9]
   21a2c:	add	r3, r6, r3, lsl #2
   21a30:	tst	r2, r4
   21a34:	add	lr, lr, #4
   21a38:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   21a3c:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   21a40:	lsrs	r1, r1, #1
   21a44:	str	r3, [lr, #-4]
   21a48:	lsl	r2, r2, #1
   21a4c:	bne	21a04 <__assert_fail@plt+0x107a8>
   21a50:	add	r5, r5, #128	; 0x80
   21a54:	cmp	sl, r5
   21a58:	add	r9, r9, #4
   21a5c:	add	ip, ip, #4
   21a60:	bne	219dc <__assert_fail@plt+0x10780>
   21a64:	ldr	r3, [r6, #-2080]	; 0xfffff7e0
   21a68:	tst	r3, #1024	; 0x400
   21a6c:	beq	21aac <__assert_fail@plt+0x10850>
   21a70:	mov	r3, #0
   21a74:	b	21a84 <__assert_fail@plt+0x10828>
   21a78:	add	r3, r3, #1
   21a7c:	cmp	fp, r3
   21a80:	beq	21aac <__assert_fail@plt+0x10850>
   21a84:	add	r2, sp, #6208	; 0x1840
   21a88:	add	r2, r2, #24
   21a8c:	ldr	r2, [r2, r3, lsl #5]
   21a90:	tst	r2, #1024	; 0x400
   21a94:	beq	21a78 <__assert_fail@plt+0x1081c>
   21a98:	ldr	r2, [sp, #20]
   21a9c:	ldr	r3, [r6, r3, lsl #2]
   21aa0:	cmp	r2, #0
   21aa4:	str	r3, [r0, #40]	; 0x28
   21aa8:	strne	r3, [r0, #1064]	; 0x428
   21aac:	ldr	r0, [r6, #-2084]	; 0xfffff7dc
   21ab0:	add	r8, fp, fp, lsl #1
   21ab4:	bl	13098 <__assert_fail@plt+0x1e3c>
   21ab8:	ldr	r5, [sp, #24]
   21abc:	mov	r4, #0
   21ac0:	lsl	r8, r8, #2
   21ac4:	add	r3, r5, r4
   21ac8:	add	r4, r4, #12
   21acc:	ldr	r0, [r3, #8]
   21ad0:	bl	13098 <__assert_fail@plt+0x1e3c>
   21ad4:	cmp	r8, r4
   21ad8:	bne	21ac4 <__assert_fail@plt+0x10868>
   21adc:	mov	r0, #1
   21ae0:	b	21514 <__assert_fail@plt+0x102b8>
   21ae4:	ldr	r3, [sp, #28]
   21ae8:	ldr	r2, [r3, #128]	; 0x80
   21aec:	mvn	r3, #0
   21af0:	tst	r2, #64	; 0x40
   21af4:	str	r3, [sp, #88]	; 0x58
   21af8:	str	r3, [sp, #92]	; 0x5c
   21afc:	str	r3, [sp, #96]	; 0x60
   21b00:	str	r3, [sp, #100]	; 0x64
   21b04:	biceq	r3, r3, #1024	; 0x400
   21b08:	streq	r3, [sp, #88]	; 0x58
   21b0c:	tst	r2, #128	; 0x80
   21b10:	beq	21540 <__assert_fail@plt+0x102e4>
   21b14:	b	21884 <__assert_fail@plt+0x10628>
   21b18:	mov	r3, #1
   21b1c:	add	r2, sp, #44	; 0x2c
   21b20:	mov	r1, r8
   21b24:	ldr	r0, [sp, #16]
   21b28:	bl	2024c <__assert_fail@plt+0xeff0>
   21b2c:	cmp	r0, #0
   21b30:	str	r0, [sl]
   21b34:	beq	21cd4 <__assert_fail@plt+0x10a78>
   21b38:	cmp	r7, r0
   21b3c:	beq	21b54 <__assert_fail@plt+0x108f8>
   21b40:	ldr	r3, [r8, #92]	; 0x5c
   21b44:	ldr	r2, [sp, #20]
   21b48:	cmp	r3, #1
   21b4c:	movgt	r2, #1
   21b50:	str	r2, [sp, #20]
   21b54:	mov	r3, #2
   21b58:	add	r2, sp, #44	; 0x2c
   21b5c:	mov	r1, r8
   21b60:	ldr	r0, [sp, #16]
   21b64:	bl	2024c <__assert_fail@plt+0xeff0>
   21b68:	cmp	r0, #0
   21b6c:	str	r0, [r6, fp, lsl #2]
   21b70:	bne	21960 <__assert_fail@plt+0x10704>
   21b74:	ldr	r3, [r6, #-2096]	; 0xfffff7d0
   21b78:	cmp	r3, #0
   21b7c:	beq	21960 <__assert_fail@plt+0x10704>
   21b80:	b	214e4 <__assert_fail@plt+0x10288>
   21b84:	ldr	r3, [sp, #20]
   21b88:	ldrb	r3, [r3, #6]
   21b8c:	tst	r3, #64	; 0x40
   21b90:	bne	2156c <__assert_fail@plt+0x10310>
   21b94:	b	218c4 <__assert_fail@plt+0x10668>
   21b98:	mov	r3, #12
   21b9c:	str	r3, [r6, #-2096]	; 0xfffff7d0
   21ba0:	add	r3, sp, #3152	; 0xc50
   21ba4:	add	r3, r3, #8
   21ba8:	str	r3, [sp, #24]
   21bac:	b	214e8 <__assert_fail@plt+0x1028c>
   21bb0:	ldr	r3, [sp, #28]
   21bb4:	ldr	lr, [sp, #36]	; 0x24
   21bb8:	add	r1, sp, #88	; 0x58
   21bbc:	add	r2, r3, #96	; 0x60
   21bc0:	mov	ip, #0
   21bc4:	ldr	r3, [r2], #4
   21bc8:	ldr	r0, [r1]
   21bcc:	cmp	r2, lr
   21bd0:	and	r3, r3, r0
   21bd4:	str	r3, [r1], #4
   21bd8:	orr	ip, ip, r3
   21bdc:	bne	21bc4 <__assert_fail@plt+0x10968>
   21be0:	b	215bc <__assert_fail@plt+0x10360>
   21be4:	ldr	r3, [r6, #-2096]	; 0xfffff7d0
   21be8:	cmp	r3, #0
   21bec:	beq	2194c <__assert_fail@plt+0x106f0>
   21bf0:	b	214e4 <__assert_fail@plt+0x10288>
   21bf4:	add	r4, sp, #88	; 0x58
   21bf8:	add	ip, sp, #14400	; 0x3840
   21bfc:	ldm	r4!, {r0, r1, r2, r3}
   21c00:	add	ip, ip, #24
   21c04:	add	ip, ip, r8, lsl #5
   21c08:	sub	ip, ip, #8192	; 0x2000
   21c0c:	ldr	r5, [sp, #8]
   21c10:	stmia	ip!, {r0, r1, r2, r3}
   21c14:	add	r3, sp, #3152	; 0xc50
   21c18:	add	r3, r3, #8
   21c1c:	mov	r6, r3
   21c20:	str	r3, [sp, #24]
   21c24:	ldm	r4, {r0, r1, r2, r3}
   21c28:	add	lr, r8, r8, lsl #1
   21c2c:	ldr	r5, [r5, #12]
   21c30:	add	r4, r6, lr, lsl #2
   21c34:	stm	ip, {r0, r1, r2, r3}
   21c38:	mov	r3, #1
   21c3c:	ldr	r2, [sp, #12]
   21c40:	mov	r0, #4
   21c44:	ldr	r5, [r5, r2]
   21c48:	str	r3, [r6, lr, lsl #2]
   21c4c:	str	r3, [r4, #4]
   21c50:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   21c54:	cmp	r0, #0
   21c58:	str	r0, [r4, #8]
   21c5c:	beq	21cbc <__assert_fail@plt+0x10a60>
   21c60:	mov	r1, #0
   21c64:	str	r5, [r0]
   21c68:	mov	r2, #32
   21c6c:	add	r0, sp, #88	; 0x58
   21c70:	bl	1119c <memset@plt>
   21c74:	ldr	r3, [sp, #8]
   21c78:	add	r8, r8, #1
   21c7c:	ldr	r1, [r3, #8]
   21c80:	b	213d4 <__assert_fail@plt+0x10178>
   21c84:	mov	r2, #32
   21c88:	mvn	r1, #0
   21c8c:	add	r0, sp, #88	; 0x58
   21c90:	bl	1119c <memset@plt>
   21c94:	b	21864 <__assert_fail@plt+0x10608>
   21c98:	bne	21510 <__assert_fail@plt+0x102b4>
   21c9c:	mov	r1, #256	; 0x100
   21ca0:	mov	r0, #4
   21ca4:	bl	2bc8c <__assert_fail@plt+0x1aa30>
   21ca8:	ldr	r3, [sp, #8]
   21cac:	str	r0, [r3, #44]	; 0x2c
   21cb0:	adds	r0, r0, #0
   21cb4:	movne	r0, #1
   21cb8:	b	21514 <__assert_fail@plt+0x102b8>
   21cbc:	cmp	r8, #0
   21cc0:	str	r8, [sp, #4]
   21cc4:	str	r0, [r4, #4]
   21cc8:	str	r0, [r4]
   21ccc:	beq	21510 <__assert_fail@plt+0x102b4>
   21cd0:	b	217d8 <__assert_fail@plt+0x1057c>
   21cd4:	ldr	r3, [r6, #-2096]	; 0xfffff7d0
   21cd8:	cmp	r3, #0
   21cdc:	beq	21b40 <__assert_fail@plt+0x108e4>
   21ce0:	b	214e4 <__assert_fail@plt+0x10288>
   21ce4:	mov	r3, #0
   21ce8:	b	21a28 <__assert_fail@plt+0x107cc>
   21cec:	mov	r1, #512	; 0x200
   21cf0:	mov	r0, #4
   21cf4:	bl	2bc8c <__assert_fail@plt+0x1aa30>
   21cf8:	ldr	r3, [sp, #8]
   21cfc:	cmp	r0, #0
   21d00:	str	r0, [r3, #48]	; 0x30
   21d04:	beq	214e4 <__assert_fail@plt+0x10288>
   21d08:	add	r1, sp, #6208	; 0x1840
   21d0c:	mov	lr, r0
   21d10:	add	r1, r1, #24
   21d14:	add	r5, r0, #1024	; 0x400
   21d18:	ldr	ip, [r7], #4
   21d1c:	cmp	ip, #0
   21d20:	movne	r4, lr
   21d24:	movne	r2, #1
   21d28:	bne	21d40 <__assert_fail@plt+0x10ae4>
   21d2c:	b	21d7c <__assert_fail@plt+0x10b20>
   21d30:	lsrs	ip, ip, #1
   21d34:	lsl	r2, r2, #1
   21d38:	add	r4, r4, #4
   21d3c:	beq	21d7c <__assert_fail@plt+0x10b20>
   21d40:	tst	ip, #1
   21d44:	beq	21d30 <__assert_fail@plt+0x10ad4>
   21d48:	ldr	r3, [r1]
   21d4c:	ands	r3, r2, r3
   21d50:	bne	21d90 <__assert_fail@plt+0x10b34>
   21d54:	add	r3, r3, #1
   21d58:	ldr	r8, [r1, r3, lsl #5]
   21d5c:	tst	r2, r8
   21d60:	beq	21d54 <__assert_fail@plt+0x10af8>
   21d64:	add	r3, r6, r3, lsl #2
   21d68:	ldr	r8, [r3, #-2048]	; 0xfffff800
   21d6c:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   21d70:	str	r8, [r4]
   21d74:	str	r3, [r4, #1024]	; 0x400
   21d78:	b	21d30 <__assert_fail@plt+0x10ad4>
   21d7c:	add	lr, lr, #128	; 0x80
   21d80:	cmp	r5, lr
   21d84:	add	r1, r1, #4
   21d88:	bne	21d18 <__assert_fail@plt+0x10abc>
   21d8c:	b	21a64 <__assert_fail@plt+0x10808>
   21d90:	mov	r3, #0
   21d94:	b	21d64 <__assert_fail@plt+0x10b08>
   21d98:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   21d9c:	cmp	r1, #0
   21da0:	push	{r4, r5, r6, lr}
   21da4:	mov	r5, r0
   21da8:	blt	21e04 <__assert_fail@plt+0x10ba8>
   21dac:	ldr	r3, [r0, #48]	; 0x30
   21db0:	cmp	r1, r3
   21db4:	beq	21e78 <__assert_fail@plt+0x10c1c>
   21db8:	ldr	r3, [r0, #80]	; 0x50
   21dbc:	cmp	r3, #1
   21dc0:	ble	21e0c <__assert_fail@plt+0x10bb0>
   21dc4:	ldr	r3, [r0, #8]
   21dc8:	add	r3, r3, r1, lsl #2
   21dcc:	b	21dd8 <__assert_fail@plt+0x10b7c>
   21dd0:	cmn	r1, #1
   21dd4:	beq	21e04 <__assert_fail@plt+0x10ba8>
   21dd8:	ldr	r4, [r3], #-4
   21ddc:	sub	r1, r1, #1
   21de0:	cmn	r4, #1
   21de4:	beq	21dd0 <__assert_fail@plt+0x10b74>
   21de8:	ldrb	r3, [r5, #78]	; 0x4e
   21dec:	cmp	r3, #0
   21df0:	bne	21e4c <__assert_fail@plt+0x10bf0>
   21df4:	cmp	r4, #10
   21df8:	beq	21e38 <__assert_fail@plt+0x10bdc>
   21dfc:	mov	r0, #0
   21e00:	pop	{r4, r5, r6, pc}
   21e04:	ldr	r0, [r5, #60]	; 0x3c
   21e08:	pop	{r4, r5, r6, pc}
   21e0c:	ldr	r3, [r0, #4]
   21e10:	ldr	r0, [r0, #68]	; 0x44
   21e14:	ldrb	r3, [r3, r1]
   21e18:	and	r2, r3, #31
   21e1c:	asr	r1, r3, #5
   21e20:	ldr	r0, [r0, r1, lsl #2]
   21e24:	lsr	r0, r0, r2
   21e28:	ands	r0, r0, #1
   21e2c:	bne	21e70 <__assert_fail@plt+0x10c14>
   21e30:	cmp	r3, #10
   21e34:	popne	{r4, r5, r6, pc}
   21e38:	ldrb	r0, [r5, #77]	; 0x4d
   21e3c:	cmp	r0, #0
   21e40:	movne	r0, #2
   21e44:	moveq	r0, #0
   21e48:	pop	{r4, r5, r6, pc}
   21e4c:	mov	r0, r4
   21e50:	bl	11184 <iswalnum@plt>
   21e54:	sub	r3, r4, #95	; 0x5f
   21e58:	clz	r3, r3
   21e5c:	lsr	r3, r3, #5
   21e60:	cmp	r0, #0
   21e64:	orrne	r3, r3, #1
   21e68:	cmp	r3, #0
   21e6c:	beq	21df4 <__assert_fail@plt+0x10b98>
   21e70:	mov	r0, #1
   21e74:	pop	{r4, r5, r6, pc}
   21e78:	tst	r2, #2
   21e7c:	moveq	r0, #10
   21e80:	movne	r0, #8
   21e84:	pop	{r4, r5, r6, pc}
   21e88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e8c:	mov	r4, r0
   21e90:	ldr	r5, [r0, #24]
   21e94:	sub	sp, sp, #36	; 0x24
   21e98:	cmp	r5, r1
   21e9c:	mov	r6, r1
   21ea0:	mov	r7, r2
   21ea4:	suble	r5, r1, r5
   21ea8:	ble	21f0c <__assert_fail@plt+0x10cb0>
   21eac:	ldr	r3, [r0, #80]	; 0x50
   21eb0:	ldr	r1, [r0, #44]	; 0x2c
   21eb4:	cmp	r3, #1
   21eb8:	ldrb	r3, [r0, #75]	; 0x4b
   21ebc:	movgt	r2, #0
   21ec0:	strgt	r2, [r0, #16]
   21ec4:	strgt	r2, [r0, #20]
   21ec8:	tst	r7, #1
   21ecc:	ldr	r2, [r0, #52]	; 0x34
   21ed0:	moveq	r0, #6
   21ed4:	movne	r0, #4
   21ed8:	cmp	r3, #0
   21edc:	mov	r3, #0
   21ee0:	str	r3, [r4, #28]
   21ee4:	str	r3, [r4, #24]
   21ee8:	str	r3, [r4, #32]
   21eec:	strb	r3, [r4, #76]	; 0x4c
   21ef0:	moveq	r5, r6
   21ef4:	ldreq	r3, [r4]
   21ef8:	movne	r5, r6
   21efc:	str	r0, [r4, #60]	; 0x3c
   21f00:	str	r1, [r4, #48]	; 0x30
   21f04:	str	r2, [r4, #56]	; 0x38
   21f08:	streq	r3, [r4, #4]
   21f0c:	cmp	r5, #0
   21f10:	ldreq	r3, [r4, #80]	; 0x50
   21f14:	beq	21fa4 <__assert_fail@plt+0x10d48>
   21f18:	ldr	r2, [r4, #32]
   21f1c:	ldrb	r3, [r4, #76]	; 0x4c
   21f20:	cmp	r5, r2
   21f24:	bge	22074 <__assert_fail@plt+0x10e18>
   21f28:	cmp	r3, #0
   21f2c:	bne	22138 <__assert_fail@plt+0x10edc>
   21f30:	mov	r2, r7
   21f34:	sub	r1, r5, #1
   21f38:	mov	r0, r4
   21f3c:	bl	21d9c <__assert_fail@plt+0x10b40>
   21f40:	ldr	r3, [r4, #80]	; 0x50
   21f44:	cmp	r3, #1
   21f48:	str	r0, [r4, #60]	; 0x3c
   21f4c:	ble	21f68 <__assert_fail@plt+0x10d0c>
   21f50:	ldr	r2, [r4, #28]
   21f54:	ldr	r0, [r4, #8]
   21f58:	sub	r2, r2, r5
   21f5c:	add	r1, r0, r5, lsl #2
   21f60:	lsl	r2, r2, #2
   21f64:	bl	10fd4 <memmove@plt>
   21f68:	ldrb	r3, [r4, #75]	; 0x4b
   21f6c:	cmp	r3, #0
   21f70:	bne	22278 <__assert_fail@plt+0x1101c>
   21f74:	ldr	r0, [r4, #28]
   21f78:	ldr	r1, [r4, #32]
   21f7c:	mov	r2, r3
   21f80:	ldr	r3, [r4, #80]	; 0x50
   21f84:	sub	r0, r0, r5
   21f88:	sub	r1, r1, r5
   21f8c:	str	r0, [r4, #28]
   21f90:	str	r1, [r4, #32]
   21f94:	cmp	r2, #0
   21f98:	ldreq	r2, [r4, #4]
   21f9c:	addeq	r2, r2, r5
   21fa0:	streq	r2, [r4, #4]
   21fa4:	ldr	r2, [r4, #48]	; 0x30
   21fa8:	ldr	r1, [r4, #56]	; 0x38
   21fac:	cmp	r3, #1
   21fb0:	sub	r3, r2, r5
   21fb4:	sub	r5, r1, r5
   21fb8:	str	r6, [r4, #24]
   21fbc:	str	r3, [r4, #48]	; 0x30
   21fc0:	str	r5, [r4, #56]	; 0x38
   21fc4:	ble	21ffc <__assert_fail@plt+0x10da0>
   21fc8:	ldrb	r3, [r4, #72]	; 0x48
   21fcc:	mov	r0, r4
   21fd0:	cmp	r3, #0
   21fd4:	bne	21fec <__assert_fail@plt+0x10d90>
   21fd8:	bl	1e188 <__assert_fail@plt+0xcf2c>
   21fdc:	mov	r0, #0
   21fe0:	str	r0, [r4, #40]	; 0x28
   21fe4:	add	sp, sp, #36	; 0x24
   21fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21fec:	bl	1e320 <__assert_fail@plt+0xd0c4>
   21ff0:	cmp	r0, #0
   21ff4:	beq	21fdc <__assert_fail@plt+0x10d80>
   21ff8:	b	21fe4 <__assert_fail@plt+0x10d88>
   21ffc:	ldrb	r2, [r4, #75]	; 0x4b
   22000:	cmp	r2, #0
   22004:	streq	r3, [r4, #28]
   22008:	beq	21fdc <__assert_fail@plt+0x10d80>
   2200c:	ldrb	r2, [r4, #72]	; 0x48
   22010:	cmp	r2, #0
   22014:	bne	2255c <__assert_fail@plt+0x11300>
   22018:	ldr	r0, [r4, #64]	; 0x40
   2201c:	cmp	r0, #0
   22020:	beq	21fdc <__assert_fail@plt+0x10d80>
   22024:	ldr	r1, [r4, #36]	; 0x24
   22028:	ldr	r2, [r4, #28]
   2202c:	cmp	r3, r1
   22030:	movge	r3, r1
   22034:	cmp	r3, r2
   22038:	bgt	22048 <__assert_fail@plt+0x10dec>
   2203c:	b	22068 <__assert_fail@plt+0x10e0c>
   22040:	ldr	r6, [r4, #24]
   22044:	ldr	r0, [r4, #64]	; 0x40
   22048:	ldm	r4, {r1, ip}
   2204c:	add	r1, r1, r2
   22050:	ldrb	r1, [r1, r6]
   22054:	ldrb	r1, [r0, r1]
   22058:	strb	r1, [ip, r2]
   2205c:	add	r2, r2, #1
   22060:	cmp	r3, r2
   22064:	bne	22040 <__assert_fail@plt+0x10de4>
   22068:	str	r2, [r4, #28]
   2206c:	str	r2, [r4, #32]
   22070:	b	21fdc <__assert_fail@plt+0x10d80>
   22074:	ldr	r1, [r4, #28]
   22078:	cmp	r3, #0
   2207c:	str	r1, [sp]
   22080:	bne	22498 <__assert_fail@plt+0x1123c>
   22084:	ldr	r3, [r4, #80]	; 0x50
   22088:	mov	r1, #0
   2208c:	cmp	r3, #1
   22090:	str	r1, [r4, #28]
   22094:	ble	223b8 <__assert_fail@plt+0x1115c>
   22098:	ldrb	r1, [r4, #73]	; 0x49
   2209c:	cmp	r1, #0
   220a0:	bne	222ec <__assert_fail@plt+0x11090>
   220a4:	ldr	r8, [r4, #24]
   220a8:	add	r8, r8, r2
   220ac:	cmp	r6, r8
   220b0:	ble	22640 <__assert_fail@plt+0x113e4>
   220b4:	add	r3, sp, #16
   220b8:	add	sl, r4, #16
   220bc:	add	fp, sp, #24
   220c0:	str	r5, [sp, #4]
   220c4:	mov	r9, r3
   220c8:	b	220d8 <__assert_fail@plt+0x10e7c>
   220cc:	add	r8, r8, r3
   220d0:	cmp	r6, r8
   220d4:	ble	224c4 <__assert_fail@plt+0x11268>
   220d8:	ldm	sl, {r0, r1}
   220dc:	ldr	r5, [r4, #44]	; 0x2c
   220e0:	ldr	ip, [r4]
   220e4:	sub	r5, r5, r8
   220e8:	stm	fp, {r0, r1}
   220ec:	mov	r2, r5
   220f0:	mov	r3, sl
   220f4:	add	r1, ip, r8
   220f8:	mov	r0, r9
   220fc:	bl	1b770 <__assert_fail@plt+0xa514>
   22100:	sub	r2, r0, #1
   22104:	cmn	r2, #4
   22108:	mov	r3, r0
   2210c:	ldrls	r2, [sp, #16]
   22110:	bls	220cc <__assert_fail@plt+0x10e70>
   22114:	mov	r2, #0
   22118:	cmp	r5, r2
   2211c:	cmpne	r0, r2
   22120:	ldm	fp, {r0, r1}
   22124:	ldrne	r3, [r4]
   22128:	ldrbne	r2, [r3, r8]
   2212c:	mov	r3, #1
   22130:	stm	sl, {r0, r1}
   22134:	b	220cc <__assert_fail@plt+0x10e70>
   22138:	ldr	sl, [r4, #28]
   2213c:	ldr	r9, [r4, #12]
   22140:	mov	r3, sl
   22144:	mov	r2, #0
   22148:	b	2215c <__assert_fail@plt+0x10f00>
   2214c:	ble	22184 <__assert_fail@plt+0x10f28>
   22150:	add	r2, r8, #1
   22154:	cmp	r2, r3
   22158:	bge	2217c <__assert_fail@plt+0x10f20>
   2215c:	add	r1, r2, r3
   22160:	add	r1, r1, r1, lsr #31
   22164:	asr	r8, r1, #1
   22168:	ldr	r1, [r9, r8, lsl #2]
   2216c:	cmp	r5, r1
   22170:	bge	2214c <__assert_fail@plt+0x10ef0>
   22174:	mov	r3, r8
   22178:	b	22154 <__assert_fail@plt+0x10ef8>
   2217c:	cmp	r5, r1
   22180:	addgt	r8, r8, #1
   22184:	sub	fp, r8, #1
   22188:	mov	r2, r7
   2218c:	mov	r1, fp
   22190:	mov	r0, r4
   22194:	bl	21d9c <__assert_fail@plt+0x10b40>
   22198:	cmp	r5, sl
   2219c:	movge	r3, #0
   221a0:	movlt	r3, #1
   221a4:	cmp	r5, r8
   221a8:	movne	r3, #0
   221ac:	cmp	r3, #0
   221b0:	str	r0, [r4, #60]	; 0x3c
   221b4:	bne	22410 <__assert_fail@plt+0x111b4>
   221b8:	ldr	r2, [r4, #44]	; 0x2c
   221bc:	ldr	r3, [r4, #52]	; 0x34
   221c0:	sub	r2, r2, r6
   221c4:	add	r2, r2, r5
   221c8:	sub	r3, r3, r6
   221cc:	add	r3, r3, r5
   221d0:	str	r2, [r4, #48]	; 0x30
   221d4:	cmp	r8, #0
   221d8:	mov	r2, #0
   221dc:	str	r3, [r4, #56]	; 0x38
   221e0:	strb	r2, [r4, #76]	; 0x4c
   221e4:	ble	2221c <__assert_fail@plt+0x10fc0>
   221e8:	sub	r3, r8, #-1073741823	; 0xc0000001
   221ec:	ldr	r2, [r9, r3, lsl #2]
   221f0:	add	r3, r9, r3, lsl #2
   221f4:	cmp	r5, r2
   221f8:	beq	22210 <__assert_fail@plt+0x10fb4>
   221fc:	b	2221c <__assert_fail@plt+0x10fc0>
   22200:	ldr	r2, [r3, #-4]!
   22204:	sub	fp, fp, #1
   22208:	cmp	r5, r2
   2220c:	bne	2221c <__assert_fail@plt+0x10fc0>
   22210:	cmp	fp, #0
   22214:	mov	r8, fp
   22218:	bne	22200 <__assert_fail@plt+0x10fa4>
   2221c:	cmp	sl, r8
   22220:	ble	22294 <__assert_fail@plt+0x11038>
   22224:	ldr	r1, [r4, #8]
   22228:	lsl	r0, r8, #2
   2222c:	add	r3, r1, r0
   22230:	ldr	r2, [r1, r8, lsl #2]
   22234:	cmn	r2, #1
   22238:	rsbeq	r1, r1, #4
   2223c:	beq	22250 <__assert_fail@plt+0x10ff4>
   22240:	b	2229c <__assert_fail@plt+0x11040>
   22244:	ldr	r2, [r3, #4]!
   22248:	cmn	r2, #1
   2224c:	bne	2229c <__assert_fail@plt+0x11040>
   22250:	add	r8, r8, #1
   22254:	cmp	sl, r8
   22258:	add	r0, r1, r3
   2225c:	bne	22244 <__assert_fail@plt+0x10fe8>
   22260:	mov	r2, #0
   22264:	str	r2, [r4, #28]
   22268:	str	r2, [r4, #32]
   2226c:	ldrb	r2, [r4, #75]	; 0x4b
   22270:	ldr	r3, [r4, #80]	; 0x50
   22274:	b	21f94 <__assert_fail@plt+0x10d38>
   22278:	ldr	r0, [r4, #4]
   2227c:	ldr	r2, [r4, #28]
   22280:	add	r1, r0, r5
   22284:	sub	r2, r2, r5
   22288:	bl	10fd4 <memmove@plt>
   2228c:	ldrb	r3, [r4, #75]	; 0x4b
   22290:	b	21f74 <__assert_fail@plt+0x10d18>
   22294:	beq	22260 <__assert_fail@plt+0x11004>
   22298:	lsl	r0, r8, #2
   2229c:	ldr	r2, [r9, r0]
   222a0:	sub	r2, r2, r5
   222a4:	cmp	r2, #0
   222a8:	str	r2, [r4, #28]
   222ac:	beq	22268 <__assert_fail@plt+0x1100c>
   222b0:	ble	222d8 <__assert_fail@plt+0x1107c>
   222b4:	ldr	r1, [r4, #8]
   222b8:	mov	r3, #0
   222bc:	sub	r1, r1, #4
   222c0:	mvn	r0, #0
   222c4:	str	r0, [r1, #4]!
   222c8:	ldr	r2, [r4, #28]
   222cc:	add	r3, r3, #1
   222d0:	cmp	r2, r3
   222d4:	bgt	222c4 <__assert_fail@plt+0x11068>
   222d8:	mov	r1, #255	; 0xff
   222dc:	ldr	r0, [r4, #4]
   222e0:	bl	1119c <memset@plt>
   222e4:	ldr	r2, [r4, #28]
   222e8:	b	22268 <__assert_fail@plt+0x1100c>
   222ec:	ldr	ip, [r4]
   222f0:	ldr	r8, [r4, #24]
   222f4:	sub	r3, r5, r3
   222f8:	add	r9, ip, r8
   222fc:	add	r3, r9, r3
   22300:	cmp	ip, r3
   22304:	sub	r0, r5, #1
   22308:	movcc	ip, r3
   2230c:	add	r1, r9, r0
   22310:	cmp	r1, ip
   22314:	bcc	220a8 <__assert_fail@plt+0x10e4c>
   22318:	ldrb	r3, [r9, r0]
   2231c:	and	r3, r3, #192	; 0xc0
   22320:	cmp	r3, #128	; 0x80
   22324:	subeq	r3, r1, #1
   22328:	subeq	ip, ip, #1
   2232c:	bne	22350 <__assert_fail@plt+0x110f4>
   22330:	cmp	ip, r3
   22334:	mov	r1, r3
   22338:	beq	220a8 <__assert_fail@plt+0x10e4c>
   2233c:	ldrb	r0, [r1]
   22340:	sub	r3, r3, #1
   22344:	and	r0, r0, #192	; 0xc0
   22348:	cmp	r0, #128	; 0x80
   2234c:	beq	22330 <__assert_fail@plt+0x110d4>
   22350:	ldr	r2, [r4, #48]	; 0x30
   22354:	ldr	r3, [r4, #64]	; 0x40
   22358:	add	r2, r9, r2
   2235c:	cmp	r3, #0
   22360:	mov	r8, r1
   22364:	sub	r2, r2, r1
   22368:	bne	225f8 <__assert_fail@plt+0x1139c>
   2236c:	add	fp, sp, #24
   22370:	mov	r3, fp
   22374:	mov	sl, #0
   22378:	add	r0, sp, #12
   2237c:	str	sl, [sp, #24]
   22380:	str	sl, [sp, #28]
   22384:	bl	1b770 <__assert_fail@plt+0xa514>
   22388:	add	r9, r9, r5
   2238c:	sub	r8, r9, r8
   22390:	cmp	r0, r8
   22394:	movcc	r3, #0
   22398:	movcs	r3, #1
   2239c:	cmn	r0, #3
   223a0:	movhi	r3, #0
   223a4:	cmp	r3, sl
   223a8:	bne	2250c <__assert_fail@plt+0x112b0>
   223ac:	ldr	r8, [r4, #24]
   223b0:	ldr	r2, [r4, #32]
   223b4:	b	220a8 <__assert_fail@plt+0x10e4c>
   223b8:	ldr	r2, [r4]
   223bc:	ldr	r0, [r4, #24]
   223c0:	add	r2, r2, r5
   223c4:	add	r2, r2, r0
   223c8:	ldr	ip, [r4, #64]	; 0x40
   223cc:	ldrb	r0, [r2, #-1]
   223d0:	cmp	ip, #0
   223d4:	str	r1, [r4, #32]
   223d8:	ldrbne	r0, [ip, r0]
   223dc:	ldr	ip, [r4, #68]	; 0x44
   223e0:	and	r2, r0, #31
   223e4:	asr	r1, r0, #5
   223e8:	ldr	r1, [ip, r1, lsl #2]
   223ec:	lsr	r2, r1, r2
   223f0:	ands	r1, r2, #1
   223f4:	movne	r1, #1
   223f8:	bne	22404 <__assert_fail@plt+0x111a8>
   223fc:	cmp	r0, #10
   22400:	beq	225cc <__assert_fail@plt+0x11370>
   22404:	ldrb	r2, [r4, #75]	; 0x4b
   22408:	str	r1, [r4, #60]	; 0x3c
   2240c:	b	21f94 <__assert_fail@plt+0x10d38>
   22410:	ldr	r3, [r9, r8, lsl #2]
   22414:	cmp	r5, r3
   22418:	bne	221b8 <__assert_fail@plt+0x10f5c>
   2241c:	ldr	r0, [r4, #8]
   22420:	sub	r2, sl, r5
   22424:	lsl	r7, r5, #2
   22428:	lsl	r2, r2, #2
   2242c:	add	r1, r0, r7
   22430:	bl	10fd4 <memmove@plt>
   22434:	ldr	r0, [r4, #4]
   22438:	ldr	r2, [r4, #28]
   2243c:	add	r1, r0, r5
   22440:	sub	r2, r2, r5
   22444:	bl	10fd4 <memmove@plt>
   22448:	ldr	r3, [r4, #28]
   2244c:	ldr	r2, [r4, #32]
   22450:	sub	r3, r3, r5
   22454:	sub	r2, r2, r5
   22458:	cmp	r3, #0
   2245c:	str	r3, [r4, #28]
   22460:	str	r2, [r4, #32]
   22464:	ble	2226c <__assert_fail@plt+0x11010>
   22468:	ldr	r1, [r4, #12]
   2246c:	mov	r2, #0
   22470:	add	r0, r1, r7
   22474:	sub	r1, r1, #4
   22478:	ldr	r3, [r0], #4
   2247c:	add	r2, r2, #1
   22480:	sub	r3, r3, r5
   22484:	str	r3, [r1, #4]!
   22488:	ldr	r3, [r4, #28]
   2248c:	cmp	r3, r2
   22490:	bgt	22478 <__assert_fail@plt+0x1121c>
   22494:	b	2226c <__assert_fail@plt+0x11010>
   22498:	ldr	r1, [r4, #44]	; 0x2c
   2249c:	ldr	r3, [r4, #52]	; 0x34
   224a0:	sub	r1, r1, r6
   224a4:	add	r1, r1, r5
   224a8:	sub	r3, r3, r6
   224ac:	add	r3, r3, r5
   224b0:	str	r1, [r4, #48]	; 0x30
   224b4:	mov	r1, #0
   224b8:	str	r3, [r4, #56]	; 0x38
   224bc:	strb	r1, [r4, #76]	; 0x4c
   224c0:	b	22084 <__assert_fail@plt+0x10e28>
   224c4:	sub	r8, r8, r6
   224c8:	cmn	r2, #1
   224cc:	ldr	r5, [sp, #4]
   224d0:	mov	r9, r2
   224d4:	str	r8, [r4, #28]
   224d8:	bne	22528 <__assert_fail@plt+0x112cc>
   224dc:	ldr	r3, [sp]
   224e0:	mov	r2, r7
   224e4:	sub	r1, r3, #1
   224e8:	mov	r0, r4
   224ec:	bl	21d9c <__assert_fail@plt+0x10b40>
   224f0:	str	r0, [r4, #60]	; 0x3c
   224f4:	cmp	r8, #0
   224f8:	bne	22568 <__assert_fail@plt+0x1130c>
   224fc:	ldrb	r2, [r4, #75]	; 0x4b
   22500:	str	r8, [r4, #32]
   22504:	ldr	r3, [r4, #80]	; 0x50
   22508:	b	21f94 <__assert_fail@plt+0x10d38>
   2250c:	ldr	r9, [sp, #12]
   22510:	sub	r8, r0, r8
   22514:	cmn	r9, #1
   22518:	str	sl, [r4, #16]
   2251c:	str	sl, [r4, #20]
   22520:	str	r8, [r4, #28]
   22524:	beq	223ac <__assert_fail@plt+0x11150>
   22528:	ldrb	r3, [r4, #78]	; 0x4e
   2252c:	cmp	r3, #0
   22530:	bne	225a4 <__assert_fail@plt+0x11348>
   22534:	cmp	r9, #10
   22538:	movne	r3, #0
   2253c:	beq	22548 <__assert_fail@plt+0x112ec>
   22540:	str	r3, [r4, #60]	; 0x3c
   22544:	b	224f4 <__assert_fail@plt+0x11298>
   22548:	ldrb	r3, [r4, #77]	; 0x4d
   2254c:	cmp	r3, #0
   22550:	movne	r3, #2
   22554:	moveq	r3, #0
   22558:	b	22540 <__assert_fail@plt+0x112e4>
   2255c:	mov	r0, r4
   22560:	bl	1e8a0 <__assert_fail@plt+0xd644>
   22564:	b	21fdc <__assert_fail@plt+0x10d80>
   22568:	ble	22590 <__assert_fail@plt+0x11334>
   2256c:	ldr	r2, [r4, #8]
   22570:	mov	r3, #0
   22574:	sub	r2, r2, #4
   22578:	mvn	r1, #0
   2257c:	str	r1, [r2, #4]!
   22580:	ldr	r8, [r4, #28]
   22584:	add	r3, r3, #1
   22588:	cmp	r8, r3
   2258c:	bgt	2257c <__assert_fail@plt+0x11320>
   22590:	ldrb	r2, [r4, #75]	; 0x4b
   22594:	cmp	r2, #0
   22598:	bne	225e0 <__assert_fail@plt+0x11384>
   2259c:	ldr	r8, [r4, #28]
   225a0:	b	22500 <__assert_fail@plt+0x112a4>
   225a4:	mov	r0, r9
   225a8:	bl	11184 <iswalnum@plt>
   225ac:	cmp	r9, #95	; 0x5f
   225b0:	clz	r0, r0
   225b4:	lsr	r0, r0, #5
   225b8:	moveq	r0, #0
   225bc:	cmp	r0, #0
   225c0:	moveq	r3, #1
   225c4:	bne	22534 <__assert_fail@plt+0x112d8>
   225c8:	b	22540 <__assert_fail@plt+0x112e4>
   225cc:	ldrb	r1, [r4, #77]	; 0x4d
   225d0:	cmp	r1, #0
   225d4:	movne	r1, #2
   225d8:	moveq	r1, #0
   225dc:	b	22404 <__assert_fail@plt+0x111a8>
   225e0:	mov	r2, r8
   225e4:	mov	r1, #255	; 0xff
   225e8:	ldr	r0, [r4, #4]
   225ec:	bl	1119c <memset@plt>
   225f0:	ldrb	r2, [r4, #75]	; 0x4b
   225f4:	b	2259c <__assert_fail@plt+0x11340>
   225f8:	cmp	r2, #6
   225fc:	movlt	r0, r2
   22600:	movge	r0, #6
   22604:	cmp	r0, #0
   22608:	ble	2264c <__assert_fail@plt+0x113f0>
   2260c:	add	ip, sp, #16
   22610:	mov	lr, ip
   22614:	mov	sl, ip
   22618:	sub	ip, r0, #1
   2261c:	add	ip, lr, ip
   22620:	add	r0, r1, r0
   22624:	ldrb	lr, [r0, #-1]!
   22628:	cmp	r1, r0
   2262c:	ldrb	lr, [r3, lr]
   22630:	strb	lr, [ip], #-1
   22634:	bne	22624 <__assert_fail@plt+0x113c8>
   22638:	mov	r1, sl
   2263c:	b	2236c <__assert_fail@plt+0x11110>
   22640:	sub	r8, r8, r6
   22644:	str	r8, [r4, #28]
   22648:	b	224dc <__assert_fail@plt+0x11280>
   2264c:	add	r3, sp, #16
   22650:	mov	sl, r3
   22654:	b	22638 <__assert_fail@plt+0x113dc>
   22658:	ldrb	ip, [r1, #4]
   2265c:	ldr	r3, [r0, #4]
   22660:	push	{r4, lr}
   22664:	sub	ip, ip, #1
   22668:	ldrb	r3, [r3, r2]
   2266c:	cmp	ip, #6
   22670:	ldrls	pc, [pc, ip, lsl #2]
   22674:	b	226a0 <__assert_fail@plt+0x11444>
   22678:	muleq	r2, r4, r6
   2267c:	andeq	r2, r2, r0, lsr #13
   22680:	andeq	r2, r2, r4, lsr r7
   22684:	andeq	r2, r2, r0, lsr #13
   22688:			; <UNDEFINED> instruction: 0x000226b0
   2268c:	andeq	r2, r2, r0, lsr #13
   22690:	andeq	r2, r2, r8, lsr #13
   22694:	ldrb	ip, [r1]
   22698:	cmp	ip, r3
   2269c:	beq	226d0 <__assert_fail@plt+0x11474>
   226a0:	mov	r0, #0
   226a4:	pop	{r4, pc}
   226a8:	tst	r3, #128	; 0x80
   226ac:	bne	226a0 <__assert_fail@plt+0x11444>
   226b0:	cmp	r3, #10
   226b4:	beq	22770 <__assert_fail@plt+0x11514>
   226b8:	cmp	r3, #0
   226bc:	bne	226d0 <__assert_fail@plt+0x11474>
   226c0:	ldr	ip, [r0, #84]	; 0x54
   226c4:	ldr	ip, [ip, #128]	; 0x80
   226c8:	tst	ip, #128	; 0x80
   226cc:	bne	226a0 <__assert_fail@plt+0x11444>
   226d0:	ldr	r4, [r1, #4]
   226d4:	ldr	r3, [pc, #168]	; 22784 <__assert_fail@plt+0x11528>
   226d8:	and	r3, r3, r4
   226dc:	cmp	r3, #0
   226e0:	beq	22754 <__assert_fail@plt+0x114f8>
   226e4:	mov	r1, r2
   226e8:	ldr	r2, [r0, #88]	; 0x58
   226ec:	bl	21d9c <__assert_fail@plt+0x10b40>
   226f0:	ldr	r1, [pc, #144]	; 22788 <__assert_fail@plt+0x1152c>
   226f4:	and	r1, r1, r4, lsr #8
   226f8:	ands	r2, r1, #4
   226fc:	bne	2275c <__assert_fail@plt+0x11500>
   22700:	tst	r1, #8
   22704:	beq	22710 <__assert_fail@plt+0x114b4>
   22708:	tst	r0, #1
   2270c:	bne	226a0 <__assert_fail@plt+0x11444>
   22710:	tst	r1, #32
   22714:	beq	22720 <__assert_fail@plt+0x114c4>
   22718:	ands	r3, r0, #2
   2271c:	beq	226a0 <__assert_fail@plt+0x11444>
   22720:	tst	r1, #128	; 0x80
   22724:	beq	22754 <__assert_fail@plt+0x114f8>
   22728:	lsr	r0, r0, #3
   2272c:	and	r0, r0, #1
   22730:	pop	{r4, pc}
   22734:	ldr	ip, [r1]
   22738:	asr	lr, r3, #5
   2273c:	and	r3, r3, #31
   22740:	ldr	ip, [ip, lr, lsl #2]
   22744:	lsr	r3, ip, r3
   22748:	ands	r3, r3, #1
   2274c:	bne	226d0 <__assert_fail@plt+0x11474>
   22750:	b	226a0 <__assert_fail@plt+0x11444>
   22754:	mov	r0, #1
   22758:	pop	{r4, pc}
   2275c:	ands	r3, r0, #1
   22760:	beq	226a0 <__assert_fail@plt+0x11444>
   22764:	tst	r1, #8
   22768:	bne	226a0 <__assert_fail@plt+0x11444>
   2276c:	b	22710 <__assert_fail@plt+0x114b4>
   22770:	ldr	r3, [r0, #84]	; 0x54
   22774:	ldr	r3, [r3, #128]	; 0x80
   22778:	ands	r3, r3, #64	; 0x40
   2277c:	bne	226d0 <__assert_fail@plt+0x11474>
   22780:	b	226a0 <__assert_fail@plt+0x11444>
   22784:	andeq	pc, r3, r0, lsl #30
   22788:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2278c:	push	{r4, r5, r6, r7, r8, lr}
   22790:	mov	r4, r1
   22794:	mov	r1, r2
   22798:	ldr	r2, [r0, #88]	; 0x58
   2279c:	mov	r5, r0
   227a0:	bl	21d9c <__assert_fail@plt+0x10b40>
   227a4:	ldr	lr, [r4, #8]
   227a8:	cmp	lr, #0
   227ac:	ble	2284c <__assert_fail@plt+0x115f0>
   227b0:	ldr	r3, [r5, #84]	; 0x54
   227b4:	ldr	r1, [r4, #12]
   227b8:	ldr	r5, [pc, #168]	; 22868 <__assert_fail@plt+0x1160c>
   227bc:	ldr	r4, [r3]
   227c0:	sub	r1, r1, #4
   227c4:	mov	r2, #0
   227c8:	and	r8, r0, #8
   227cc:	and	r7, r0, #2
   227d0:	and	r6, r0, #1
   227d4:	b	227e4 <__assert_fail@plt+0x11588>
   227d8:	add	r2, r2, #1
   227dc:	cmp	r2, lr
   227e0:	beq	2284c <__assert_fail@plt+0x115f0>
   227e4:	ldr	r0, [r1, #4]!
   227e8:	add	r3, r4, r0, lsl #3
   227ec:	ldrb	ip, [r3, #4]
   227f0:	ldr	r3, [r3, #4]
   227f4:	cmp	ip, #2
   227f8:	and	r3, r5, r3, lsr #8
   227fc:	bne	227d8 <__assert_fail@plt+0x1157c>
   22800:	cmp	r3, #0
   22804:	popeq	{r4, r5, r6, r7, r8, pc}
   22808:	tst	r3, #4
   2280c:	beq	22854 <__assert_fail@plt+0x115f8>
   22810:	cmp	r6, #0
   22814:	beq	227d8 <__assert_fail@plt+0x1157c>
   22818:	tst	r3, #8
   2281c:	bne	227d8 <__assert_fail@plt+0x1157c>
   22820:	tst	r3, #32
   22824:	beq	22830 <__assert_fail@plt+0x115d4>
   22828:	cmp	r7, #0
   2282c:	beq	227d8 <__assert_fail@plt+0x1157c>
   22830:	tst	r3, #128	; 0x80
   22834:	popeq	{r4, r5, r6, r7, r8, pc}
   22838:	cmp	r8, #0
   2283c:	popne	{r4, r5, r6, r7, r8, pc}
   22840:	add	r2, r2, #1
   22844:	cmp	r2, lr
   22848:	bne	227e4 <__assert_fail@plt+0x11588>
   2284c:	mov	r0, #0
   22850:	pop	{r4, r5, r6, r7, r8, pc}
   22854:	tst	r3, #8
   22858:	beq	22820 <__assert_fail@plt+0x115c4>
   2285c:	cmp	r6, #0
   22860:	beq	22820 <__assert_fail@plt+0x115c4>
   22864:	b	227d8 <__assert_fail@plt+0x1157c>
   22868:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2286c:	ldr	ip, [r1]
   22870:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22874:	cmp	ip, #0
   22878:	sub	sp, sp, #20
   2287c:	ldr	r6, [r0, #84]	; 0x54
   22880:	ble	2294c <__assert_fail@plt+0x116f0>
   22884:	mov	r7, r2
   22888:	str	r3, [sp, #8]
   2288c:	mov	r8, r0
   22890:	str	r1, [sp, #4]
   22894:	mov	r4, #0
   22898:	mov	r2, #24
   2289c:	mov	r9, #1
   228a0:	b	228ac <__assert_fail@plt+0x11650>
   228a4:	cmp	r4, ip
   228a8:	bge	2294c <__assert_fail@plt+0x116f0>
   228ac:	ldr	r1, [r7]
   228b0:	ldr	r3, [r6]
   228b4:	ldr	r5, [r1, r4, lsl #2]
   228b8:	add	r4, r4, #1
   228bc:	add	r1, r3, r5, lsl #3
   228c0:	ldrb	r1, [r1, #4]
   228c4:	cmp	r1, #8
   228c8:	bne	228a4 <__assert_fail@plt+0x11648>
   228cc:	ldr	r3, [r3, r5, lsl #3]
   228d0:	cmp	r3, #31
   228d4:	bgt	228a4 <__assert_fail@plt+0x11648>
   228d8:	ldr	r1, [r6, #80]	; 0x50
   228dc:	lsr	r3, r1, r3
   228e0:	tst	r3, #1
   228e4:	beq	228a4 <__assert_fail@plt+0x11648>
   228e8:	ldr	sl, [r8, #124]	; 0x7c
   228ec:	ldr	r3, [r8, #128]	; 0x80
   228f0:	ldr	fp, [r8, #132]	; 0x84
   228f4:	cmp	r3, sl
   228f8:	beq	22960 <__assert_fail@plt+0x11704>
   228fc:	mov	r1, r2
   22900:	mov	r0, r9
   22904:	str	r2, [sp, #12]
   22908:	bl	2bc8c <__assert_fail@plt+0x1aa30>
   2290c:	ldr	r3, [r8, #124]	; 0x7c
   22910:	ldr	r1, [r8, #132]	; 0x84
   22914:	add	ip, r3, #1
   22918:	str	r0, [fp, sl, lsl #2]
   2291c:	ldr	r3, [r1, r3, lsl #2]
   22920:	cmp	r3, #0
   22924:	beq	22958 <__assert_fail@plt+0x116fc>
   22928:	ldr	r2, [sp, #8]
   2292c:	str	r5, [r3, #4]
   22930:	str	ip, [r8, #124]	; 0x7c
   22934:	str	r2, [r3]
   22938:	ldr	r3, [sp, #4]
   2293c:	ldr	r2, [sp, #12]
   22940:	ldr	ip, [r3]
   22944:	cmp	r4, ip
   22948:	blt	228ac <__assert_fail@plt+0x11650>
   2294c:	mov	r0, #0
   22950:	add	sp, sp, #20
   22954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22958:	mov	r0, #12
   2295c:	b	22950 <__assert_fail@plt+0x116f4>
   22960:	mov	r0, fp
   22964:	lsl	r1, sl, #3
   22968:	str	r2, [sp, #12]
   2296c:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   22970:	lsl	r3, sl, #1
   22974:	ldr	r2, [sp, #12]
   22978:	subs	fp, r0, #0
   2297c:	beq	22958 <__assert_fail@plt+0x116fc>
   22980:	ldr	sl, [r8, #124]	; 0x7c
   22984:	str	fp, [r8, #132]	; 0x84
   22988:	str	r3, [r8, #128]	; 0x80
   2298c:	b	228fc <__assert_fail@plt+0x116a0>
   22990:	push	{r4, r5, r6, lr}
   22994:	mov	r5, r0
   22998:	mov	r0, r1
   2299c:	mov	r4, r1
   229a0:	bl	11160 <strlen@plt>
   229a4:	cmp	r0, #1
   229a8:	moveq	r1, #0
   229ac:	ldrbeq	r3, [r4]
   229b0:	movne	r1, #3
   229b4:	andeq	ip, r3, #31
   229b8:	asreq	r3, r3, #5
   229bc:	ldreq	r2, [r5, r3, lsl #2]
   229c0:	orreq	r2, r2, r0, lsl ip
   229c4:	mov	r0, r1
   229c8:	streq	r2, [r5, r3, lsl #2]
   229cc:	pop	{r4, r5, r6, pc}
   229d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   229d4:	mov	r6, r0
   229d8:	ldr	ip, [sp, #40]	; 0x28
   229dc:	mov	r5, r1
   229e0:	tst	ip, #4194304	; 0x400000
   229e4:	mov	sl, r2
   229e8:	mov	r7, r3
   229ec:	ldr	r9, [sp, #32]
   229f0:	beq	22a10 <__assert_fail@plt+0x117b4>
   229f4:	ldr	r1, [pc, #2196]	; 23290 <__assert_fail@plt+0x12034>
   229f8:	ldr	r0, [sp, #36]	; 0x24
   229fc:	bl	10f98 <strcmp@plt>
   22a00:	cmp	r0, #0
   22a04:	bne	22af0 <__assert_fail@plt+0x11894>
   22a08:	ldr	r3, [pc, #2180]	; 23294 <__assert_fail@plt+0x12038>
   22a0c:	str	r3, [sp, #36]	; 0x24
   22a10:	ldr	r4, [r7]
   22a14:	ldr	r3, [r9]
   22a18:	cmp	r3, r4
   22a1c:	beq	22b20 <__assert_fail@plt+0x118c4>
   22a20:	ldr	r8, [sl]
   22a24:	add	r3, r4, #1
   22a28:	str	r3, [r7]
   22a2c:	ldr	r0, [sp, #36]	; 0x24
   22a30:	bl	10f68 <wctype@plt>
   22a34:	ldr	r1, [pc, #2140]	; 23298 <__assert_fail@plt+0x1203c>
   22a38:	str	r0, [r8, r4, lsl #2]
   22a3c:	ldr	r0, [sp, #36]	; 0x24
   22a40:	bl	10f98 <strcmp@plt>
   22a44:	subs	r4, r0, #0
   22a48:	beq	22aa8 <__assert_fail@plt+0x1184c>
   22a4c:	ldr	r1, [pc, #2120]	; 2329c <__assert_fail@plt+0x12040>
   22a50:	ldr	r0, [sp, #36]	; 0x24
   22a54:	bl	10f98 <strcmp@plt>
   22a58:	subs	r4, r0, #0
   22a5c:	bne	22b4c <__assert_fail@plt+0x118f0>
   22a60:	cmp	r6, #0
   22a64:	bne	22d00 <__assert_fail@plt+0x11aa4>
   22a68:	bl	11148 <__ctype_b_loc@plt>
   22a6c:	mov	ip, #1
   22a70:	ldr	r3, [r0]
   22a74:	sub	r3, r3, #2
   22a78:	ldrh	r2, [r3, #2]!
   22a7c:	asr	r1, r4, #5
   22a80:	and	r0, r4, #31
   22a84:	tst	r2, #2
   22a88:	add	r4, r4, #1
   22a8c:	ldrne	r2, [r5, r1, lsl #2]
   22a90:	orrne	r2, r2, ip, lsl r0
   22a94:	strne	r2, [r5, r1, lsl #2]
   22a98:	cmp	r4, #256	; 0x100
   22a9c:	bne	22a78 <__assert_fail@plt+0x1181c>
   22aa0:	mov	r0, #0
   22aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22aa8:	cmp	r6, #0
   22aac:	bne	22c6c <__assert_fail@plt+0x11a10>
   22ab0:	bl	11148 <__ctype_b_loc@plt>
   22ab4:	mov	lr, #1
   22ab8:	ldr	r3, [r0]
   22abc:	sub	r3, r3, #2
   22ac0:	ldrh	r0, [r3, #2]!
   22ac4:	asr	r2, r4, #5
   22ac8:	and	ip, r4, #31
   22acc:	tst	r0, #8
   22ad0:	add	r4, r4, #1
   22ad4:	ldrne	r1, [r5, r2, lsl #2]
   22ad8:	orrne	r1, r1, lr, lsl ip
   22adc:	strne	r1, [r5, r2, lsl #2]
   22ae0:	cmp	r4, #256	; 0x100
   22ae4:	bne	22ac0 <__assert_fail@plt+0x11864>
   22ae8:	mov	r0, #0
   22aec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22af0:	ldr	r0, [sp, #36]	; 0x24
   22af4:	ldr	r1, [pc, #1956]	; 232a0 <__assert_fail@plt+0x12044>
   22af8:	bl	10f98 <strcmp@plt>
   22afc:	ldr	r3, [pc, #1936]	; 23294 <__assert_fail@plt+0x12038>
   22b00:	ldr	r2, [sp, #36]	; 0x24
   22b04:	ldr	r4, [r7]
   22b08:	cmp	r0, #0
   22b0c:	moveq	r2, r3
   22b10:	ldr	r3, [r9]
   22b14:	str	r2, [sp, #36]	; 0x24
   22b18:	cmp	r3, r4
   22b1c:	bne	22a20 <__assert_fail@plt+0x117c4>
   22b20:	lsl	r4, r4, #1
   22b24:	add	r4, r4, #1
   22b28:	ldr	r0, [sl]
   22b2c:	lsl	r1, r4, #2
   22b30:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   22b34:	subs	r8, r0, #0
   22b38:	beq	22df8 <__assert_fail@plt+0x11b9c>
   22b3c:	str	r8, [sl]
   22b40:	str	r4, [r9]
   22b44:	ldr	r4, [r7]
   22b48:	b	22a24 <__assert_fail@plt+0x117c8>
   22b4c:	ldr	r1, [pc, #1868]	; 232a0 <__assert_fail@plt+0x12044>
   22b50:	ldr	r0, [sp, #36]	; 0x24
   22b54:	bl	10f98 <strcmp@plt>
   22b58:	subs	r4, r0, #0
   22b5c:	beq	22bb8 <__assert_fail@plt+0x1195c>
   22b60:	ldr	r1, [pc, #1852]	; 232a4 <__assert_fail@plt+0x12048>
   22b64:	ldr	r0, [sp, #36]	; 0x24
   22b68:	bl	10f98 <strcmp@plt>
   22b6c:	subs	r4, r0, #0
   22b70:	bne	22c00 <__assert_fail@plt+0x119a4>
   22b74:	cmp	r6, #0
   22b78:	bne	22e58 <__assert_fail@plt+0x11bfc>
   22b7c:	bl	11148 <__ctype_b_loc@plt>
   22b80:	mov	ip, #1
   22b84:	ldr	r3, [r0]
   22b88:	sub	r3, r3, #2
   22b8c:	ldrh	r2, [r3, #2]!
   22b90:	asr	r1, r4, #5
   22b94:	and	r0, r4, #31
   22b98:	tst	r2, #8192	; 0x2000
   22b9c:	add	r4, r4, #1
   22ba0:	ldrne	r2, [r5, r1, lsl #2]
   22ba4:	orrne	r2, r2, ip, lsl r0
   22ba8:	strne	r2, [r5, r1, lsl #2]
   22bac:	cmp	r4, #256	; 0x100
   22bb0:	bne	22b8c <__assert_fail@plt+0x11930>
   22bb4:	b	22aa0 <__assert_fail@plt+0x11844>
   22bb8:	cmp	r6, #0
   22bbc:	bne	22da8 <__assert_fail@plt+0x11b4c>
   22bc0:	bl	11148 <__ctype_b_loc@plt>
   22bc4:	mov	ip, #1
   22bc8:	ldr	r3, [r0]
   22bcc:	sub	r3, r3, #2
   22bd0:	ldrh	r2, [r3, #2]!
   22bd4:	asr	r1, r4, #5
   22bd8:	and	r0, r4, #31
   22bdc:	tst	r2, #512	; 0x200
   22be0:	add	r4, r4, #1
   22be4:	ldrne	r2, [r5, r1, lsl #2]
   22be8:	orrne	r2, r2, ip, lsl r0
   22bec:	strne	r2, [r5, r1, lsl #2]
   22bf0:	cmp	r4, #256	; 0x100
   22bf4:	bne	22bd0 <__assert_fail@plt+0x11974>
   22bf8:	mov	r0, #0
   22bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22c00:	ldr	r1, [pc, #1676]	; 23294 <__assert_fail@plt+0x12038>
   22c04:	ldr	r0, [sp, #36]	; 0x24
   22c08:	bl	10f98 <strcmp@plt>
   22c0c:	subs	r4, r0, #0
   22c10:	beq	22cbc <__assert_fail@plt+0x11a60>
   22c14:	ldr	r1, [pc, #1676]	; 232a8 <__assert_fail@plt+0x1204c>
   22c18:	ldr	r0, [sp, #36]	; 0x24
   22c1c:	bl	10f98 <strcmp@plt>
   22c20:	subs	r4, r0, #0
   22c24:	bne	22d50 <__assert_fail@plt+0x11af4>
   22c28:	cmp	r6, #0
   22c2c:	bne	23048 <__assert_fail@plt+0x11dec>
   22c30:	bl	11148 <__ctype_b_loc@plt>
   22c34:	mov	ip, #1
   22c38:	ldr	r3, [r0]
   22c3c:	sub	r3, r3, #2
   22c40:	ldrh	r1, [r3, #2]!
   22c44:	asr	r2, r4, #5
   22c48:	and	r0, r4, #31
   22c4c:	tst	r1, #2048	; 0x800
   22c50:	add	r4, r4, #1
   22c54:	ldrne	r1, [r5, r2, lsl #2]
   22c58:	orrne	r1, r1, ip, lsl r0
   22c5c:	strne	r1, [r5, r2, lsl #2]
   22c60:	cmp	r4, #256	; 0x100
   22c64:	bne	22c40 <__assert_fail@plt+0x119e4>
   22c68:	b	22aa0 <__assert_fail@plt+0x11844>
   22c6c:	bl	11148 <__ctype_b_loc@plt>
   22c70:	mov	r4, #1
   22c74:	mov	r1, r6
   22c78:	ldr	r3, [r0]
   22c7c:	add	ip, r3, #508	; 0x1fc
   22c80:	add	ip, ip, #2
   22c84:	sub	r3, r3, #2
   22c88:	ldrh	r2, [r3, #2]!
   22c8c:	tst	r2, #8
   22c90:	beq	22cac <__assert_fail@plt+0x11a50>
   22c94:	ldrb	r2, [r1]
   22c98:	and	lr, r2, #31
   22c9c:	asr	r2, r2, #5
   22ca0:	ldr	r0, [r5, r2, lsl #2]
   22ca4:	orr	r0, r0, r4, lsl lr
   22ca8:	str	r0, [r5, r2, lsl #2]
   22cac:	cmp	ip, r3
   22cb0:	add	r1, r1, #1
   22cb4:	bne	22c88 <__assert_fail@plt+0x11a2c>
   22cb8:	b	22aa0 <__assert_fail@plt+0x11844>
   22cbc:	cmp	r6, #0
   22cc0:	bne	22ea8 <__assert_fail@plt+0x11c4c>
   22cc4:	bl	11148 <__ctype_b_loc@plt>
   22cc8:	mov	ip, #1
   22ccc:	ldr	r3, [r0]
   22cd0:	sub	r3, r3, #2
   22cd4:	ldrh	r2, [r3, #2]!
   22cd8:	asr	r1, r4, #5
   22cdc:	and	r0, r4, #31
   22ce0:	tst	r2, #1024	; 0x400
   22ce4:	add	r4, r4, #1
   22ce8:	ldrne	r2, [r5, r1, lsl #2]
   22cec:	orrne	r2, r2, ip, lsl r0
   22cf0:	strne	r2, [r5, r1, lsl #2]
   22cf4:	cmp	r4, #256	; 0x100
   22cf8:	bne	22cd4 <__assert_fail@plt+0x11a78>
   22cfc:	b	22aa0 <__assert_fail@plt+0x11844>
   22d00:	bl	11148 <__ctype_b_loc@plt>
   22d04:	mov	r4, #1
   22d08:	mov	r1, r6
   22d0c:	ldr	r3, [r0]
   22d10:	add	ip, r3, #508	; 0x1fc
   22d14:	add	ip, ip, #2
   22d18:	sub	r3, r3, #2
   22d1c:	ldrh	r2, [r3, #2]!
   22d20:	tst	r2, #2
   22d24:	beq	22d40 <__assert_fail@plt+0x11ae4>
   22d28:	ldrb	r2, [r1]
   22d2c:	and	lr, r2, #31
   22d30:	asr	r2, r2, #5
   22d34:	ldr	r0, [r5, r2, lsl #2]
   22d38:	orr	r0, r0, r4, lsl lr
   22d3c:	str	r0, [r5, r2, lsl #2]
   22d40:	cmp	ip, r3
   22d44:	add	r1, r1, #1
   22d48:	bne	22d1c <__assert_fail@plt+0x11ac0>
   22d4c:	b	22aa0 <__assert_fail@plt+0x11844>
   22d50:	ldr	r1, [pc, #1364]	; 232ac <__assert_fail@plt+0x12050>
   22d54:	ldr	r0, [sp, #36]	; 0x24
   22d58:	bl	10f98 <strcmp@plt>
   22d5c:	subs	r4, r0, #0
   22d60:	bne	22e00 <__assert_fail@plt+0x11ba4>
   22d64:	cmp	r6, #0
   22d68:	bne	23098 <__assert_fail@plt+0x11e3c>
   22d6c:	bl	11148 <__ctype_b_loc@plt>
   22d70:	mov	ip, #1
   22d74:	ldr	r3, [r0]
   22d78:	sub	r3, r3, #2
   22d7c:	ldrh	r2, [r3, #2]!
   22d80:	asr	r1, r4, #5
   22d84:	and	r0, r4, #31
   22d88:	tst	r2, #16384	; 0x4000
   22d8c:	add	r4, r4, #1
   22d90:	ldrne	r2, [r5, r1, lsl #2]
   22d94:	orrne	r2, r2, ip, lsl r0
   22d98:	strne	r2, [r5, r1, lsl #2]
   22d9c:	cmp	r4, #256	; 0x100
   22da0:	bne	22d7c <__assert_fail@plt+0x11b20>
   22da4:	b	22aa0 <__assert_fail@plt+0x11844>
   22da8:	bl	11148 <__ctype_b_loc@plt>
   22dac:	mov	r4, #1
   22db0:	mov	r1, r6
   22db4:	ldr	r3, [r0]
   22db8:	add	ip, r3, #508	; 0x1fc
   22dbc:	add	ip, ip, #2
   22dc0:	sub	r3, r3, #2
   22dc4:	ldrh	r2, [r3, #2]!
   22dc8:	tst	r2, #512	; 0x200
   22dcc:	beq	22de8 <__assert_fail@plt+0x11b8c>
   22dd0:	ldrb	r2, [r1]
   22dd4:	and	lr, r2, #31
   22dd8:	asr	r2, r2, #5
   22ddc:	ldr	r0, [r5, r2, lsl #2]
   22de0:	orr	r0, r0, r4, lsl lr
   22de4:	str	r0, [r5, r2, lsl #2]
   22de8:	cmp	ip, r3
   22dec:	add	r1, r1, #1
   22df0:	bne	22dc4 <__assert_fail@plt+0x11b68>
   22df4:	b	22aa0 <__assert_fail@plt+0x11844>
   22df8:	mov	r0, #12
   22dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22e00:	ldr	r1, [pc, #1160]	; 23290 <__assert_fail@plt+0x12034>
   22e04:	ldr	r0, [sp, #36]	; 0x24
   22e08:	bl	10f98 <strcmp@plt>
   22e0c:	subs	r4, r0, #0
   22e10:	bne	22ef8 <__assert_fail@plt+0x11c9c>
   22e14:	cmp	r6, #0
   22e18:	bne	22f50 <__assert_fail@plt+0x11cf4>
   22e1c:	bl	11148 <__ctype_b_loc@plt>
   22e20:	mov	ip, #1
   22e24:	ldr	r3, [r0]
   22e28:	sub	r3, r3, #2
   22e2c:	ldrh	r2, [r3, #2]!
   22e30:	asr	r1, r4, #5
   22e34:	and	r0, r4, #31
   22e38:	tst	r2, #256	; 0x100
   22e3c:	add	r4, r4, #1
   22e40:	ldrne	r2, [r5, r1, lsl #2]
   22e44:	orrne	r2, r2, ip, lsl r0
   22e48:	strne	r2, [r5, r1, lsl #2]
   22e4c:	cmp	r4, #256	; 0x100
   22e50:	bne	22e2c <__assert_fail@plt+0x11bd0>
   22e54:	b	22aa0 <__assert_fail@plt+0x11844>
   22e58:	bl	11148 <__ctype_b_loc@plt>
   22e5c:	mov	r4, #1
   22e60:	mov	r1, r6
   22e64:	ldr	r3, [r0]
   22e68:	add	ip, r3, #508	; 0x1fc
   22e6c:	add	ip, ip, #2
   22e70:	sub	r3, r3, #2
   22e74:	ldrh	r2, [r3, #2]!
   22e78:	tst	r2, #8192	; 0x2000
   22e7c:	beq	22e98 <__assert_fail@plt+0x11c3c>
   22e80:	ldrb	r2, [r1]
   22e84:	and	lr, r2, #31
   22e88:	asr	r2, r2, #5
   22e8c:	ldr	r0, [r5, r2, lsl #2]
   22e90:	orr	r0, r0, r4, lsl lr
   22e94:	str	r0, [r5, r2, lsl #2]
   22e98:	cmp	r3, ip
   22e9c:	add	r1, r1, #1
   22ea0:	bne	22e74 <__assert_fail@plt+0x11c18>
   22ea4:	b	22aa0 <__assert_fail@plt+0x11844>
   22ea8:	bl	11148 <__ctype_b_loc@plt>
   22eac:	mov	r4, #1
   22eb0:	mov	r1, r6
   22eb4:	ldr	r3, [r0]
   22eb8:	add	ip, r3, #508	; 0x1fc
   22ebc:	add	ip, ip, #2
   22ec0:	sub	r3, r3, #2
   22ec4:	ldrh	r2, [r3, #2]!
   22ec8:	tst	r2, #1024	; 0x400
   22ecc:	beq	22ee8 <__assert_fail@plt+0x11c8c>
   22ed0:	ldrb	r2, [r1]
   22ed4:	and	lr, r2, #31
   22ed8:	asr	r2, r2, #5
   22edc:	ldr	r0, [r5, r2, lsl #2]
   22ee0:	orr	r0, r0, r4, lsl lr
   22ee4:	str	r0, [r5, r2, lsl #2]
   22ee8:	cmp	ip, r3
   22eec:	add	r1, r1, #1
   22ef0:	bne	22ec4 <__assert_fail@plt+0x11c68>
   22ef4:	b	22aa0 <__assert_fail@plt+0x11844>
   22ef8:	ldr	r1, [pc, #944]	; 232b0 <__assert_fail@plt+0x12054>
   22efc:	ldr	r0, [sp, #36]	; 0x24
   22f00:	bl	10f98 <strcmp@plt>
   22f04:	subs	r4, r0, #0
   22f08:	bne	22ff0 <__assert_fail@plt+0x11d94>
   22f0c:	cmp	r6, #0
   22f10:	bne	22fa0 <__assert_fail@plt+0x11d44>
   22f14:	bl	11148 <__ctype_b_loc@plt>
   22f18:	mov	ip, #1
   22f1c:	ldr	r3, [r0]
   22f20:	sub	r3, r3, #2
   22f24:	ldrh	r2, [r3, #2]!
   22f28:	asr	r1, r4, #5
   22f2c:	and	r0, r4, #31
   22f30:	tst	r2, #1
   22f34:	add	r4, r4, #1
   22f38:	ldrne	r2, [r5, r1, lsl #2]
   22f3c:	orrne	r2, r2, ip, lsl r0
   22f40:	strne	r2, [r5, r1, lsl #2]
   22f44:	cmp	r4, #256	; 0x100
   22f48:	bne	22f24 <__assert_fail@plt+0x11cc8>
   22f4c:	b	22aa0 <__assert_fail@plt+0x11844>
   22f50:	bl	11148 <__ctype_b_loc@plt>
   22f54:	mov	r1, r6
   22f58:	mov	lr, #1
   22f5c:	ldr	r3, [r0]
   22f60:	add	r0, r3, #508	; 0x1fc
   22f64:	add	r0, r0, #2
   22f68:	sub	r3, r3, #2
   22f6c:	ldrh	r2, [r3, #2]!
   22f70:	tst	r2, #256	; 0x100
   22f74:	beq	22f90 <__assert_fail@plt+0x11d34>
   22f78:	ldrb	r2, [r1]
   22f7c:	and	r4, r2, #31
   22f80:	asr	r2, r2, #5
   22f84:	ldr	ip, [r5, r2, lsl #2]
   22f88:	orr	ip, ip, lr, lsl r4
   22f8c:	str	ip, [r5, r2, lsl #2]
   22f90:	cmp	r0, r3
   22f94:	add	r1, r1, #1
   22f98:	bne	22f6c <__assert_fail@plt+0x11d10>
   22f9c:	b	22aa0 <__assert_fail@plt+0x11844>
   22fa0:	bl	11148 <__ctype_b_loc@plt>
   22fa4:	mov	r1, r6
   22fa8:	mov	lr, #1
   22fac:	ldr	r3, [r0]
   22fb0:	add	r0, r3, #508	; 0x1fc
   22fb4:	add	r0, r0, #2
   22fb8:	sub	r3, r3, #2
   22fbc:	ldrh	r2, [r3, #2]!
   22fc0:	tst	r2, #1
   22fc4:	beq	22fe0 <__assert_fail@plt+0x11d84>
   22fc8:	ldrb	r2, [r1]
   22fcc:	and	r4, r2, #31
   22fd0:	asr	r2, r2, #5
   22fd4:	ldr	ip, [r5, r2, lsl #2]
   22fd8:	orr	ip, ip, lr, lsl r4
   22fdc:	str	ip, [r5, r2, lsl #2]
   22fe0:	cmp	r0, r3
   22fe4:	add	r1, r1, #1
   22fe8:	bne	22fbc <__assert_fail@plt+0x11d60>
   22fec:	b	22aa0 <__assert_fail@plt+0x11844>
   22ff0:	ldr	r1, [pc, #700]	; 232b4 <__assert_fail@plt+0x12058>
   22ff4:	ldr	r0, [sp, #36]	; 0x24
   22ff8:	bl	10f98 <strcmp@plt>
   22ffc:	subs	r4, r0, #0
   23000:	bne	23138 <__assert_fail@plt+0x11edc>
   23004:	cmp	r6, #0
   23008:	bne	230e8 <__assert_fail@plt+0x11e8c>
   2300c:	bl	11148 <__ctype_b_loc@plt>
   23010:	mov	ip, #1
   23014:	ldr	r3, [r0]
   23018:	sub	r3, r3, #2
   2301c:	ldrsh	r2, [r3, #2]!
   23020:	cmp	r2, #0
   23024:	asrlt	r0, r4, #5
   23028:	andlt	r1, r4, #31
   2302c:	ldrlt	r2, [r5, r0, lsl #2]
   23030:	add	r4, r4, #1
   23034:	orrlt	r2, r2, ip, lsl r1
   23038:	strlt	r2, [r5, r0, lsl #2]
   2303c:	cmp	r4, #256	; 0x100
   23040:	bne	2301c <__assert_fail@plt+0x11dc0>
   23044:	b	22aa0 <__assert_fail@plt+0x11844>
   23048:	bl	11148 <__ctype_b_loc@plt>
   2304c:	mov	r1, r6
   23050:	mov	lr, #1
   23054:	ldr	r3, [r0]
   23058:	add	r2, r3, #508	; 0x1fc
   2305c:	add	r2, r2, #2
   23060:	sub	r3, r3, #2
   23064:	ldrh	r0, [r3, #2]!
   23068:	tst	r0, #2048	; 0x800
   2306c:	beq	23088 <__assert_fail@plt+0x11e2c>
   23070:	ldrb	r0, [r1]
   23074:	and	r4, r0, #31
   23078:	asr	r0, r0, #5
   2307c:	ldr	ip, [r5, r0, lsl #2]
   23080:	orr	ip, ip, lr, lsl r4
   23084:	str	ip, [r5, r0, lsl #2]
   23088:	cmp	r2, r3
   2308c:	add	r1, r1, #1
   23090:	bne	23064 <__assert_fail@plt+0x11e08>
   23094:	b	22aa0 <__assert_fail@plt+0x11844>
   23098:	bl	11148 <__ctype_b_loc@plt>
   2309c:	mov	r1, r6
   230a0:	mov	lr, #1
   230a4:	ldr	r3, [r0]
   230a8:	add	r0, r3, #508	; 0x1fc
   230ac:	add	r0, r0, #2
   230b0:	sub	r3, r3, #2
   230b4:	ldrh	r2, [r3, #2]!
   230b8:	tst	r2, #16384	; 0x4000
   230bc:	beq	230d8 <__assert_fail@plt+0x11e7c>
   230c0:	ldrb	r2, [r1]
   230c4:	and	r4, r2, #31
   230c8:	asr	r2, r2, #5
   230cc:	ldr	ip, [r5, r2, lsl #2]
   230d0:	orr	ip, ip, lr, lsl r4
   230d4:	str	ip, [r5, r2, lsl #2]
   230d8:	cmp	r0, r3
   230dc:	add	r1, r1, #1
   230e0:	bne	230b4 <__assert_fail@plt+0x11e58>
   230e4:	b	22aa0 <__assert_fail@plt+0x11844>
   230e8:	bl	11148 <__ctype_b_loc@plt>
   230ec:	mov	r1, r6
   230f0:	mov	lr, #1
   230f4:	ldr	r3, [r0]
   230f8:	add	r0, r3, #508	; 0x1fc
   230fc:	add	r0, r0, #2
   23100:	sub	r3, r3, #2
   23104:	ldrsh	r2, [r3, #2]!
   23108:	cmp	r2, #0
   2310c:	bge	23128 <__assert_fail@plt+0x11ecc>
   23110:	ldrb	r2, [r1]
   23114:	and	r4, r2, #31
   23118:	asr	r2, r2, #5
   2311c:	ldr	ip, [r5, r2, lsl #2]
   23120:	orr	ip, ip, lr, lsl r4
   23124:	str	ip, [r5, r2, lsl #2]
   23128:	cmp	r0, r3
   2312c:	add	r1, r1, #1
   23130:	bne	23104 <__assert_fail@plt+0x11ea8>
   23134:	b	22aa0 <__assert_fail@plt+0x11844>
   23138:	ldr	r1, [pc, #376]	; 232b8 <__assert_fail@plt+0x1205c>
   2313c:	ldr	r0, [sp, #36]	; 0x24
   23140:	bl	10f98 <strcmp@plt>
   23144:	subs	r4, r0, #0
   23148:	bne	23190 <__assert_fail@plt+0x11f34>
   2314c:	cmp	r6, #0
   23150:	bne	231ac <__assert_fail@plt+0x11f50>
   23154:	bl	11148 <__ctype_b_loc@plt>
   23158:	mov	ip, #1
   2315c:	ldr	r3, [r0]
   23160:	sub	r3, r3, #2
   23164:	ldrh	r2, [r3, #2]!
   23168:	asr	r1, r4, #5
   2316c:	and	r0, r4, #31
   23170:	tst	r2, #4
   23174:	add	r4, r4, #1
   23178:	ldrne	r2, [r5, r1, lsl #2]
   2317c:	orrne	r2, r2, ip, lsl r0
   23180:	strne	r2, [r5, r1, lsl #2]
   23184:	cmp	r4, #256	; 0x100
   23188:	bne	23164 <__assert_fail@plt+0x11f08>
   2318c:	b	22aa0 <__assert_fail@plt+0x11844>
   23190:	ldr	r1, [pc, #292]	; 232bc <__assert_fail@plt+0x12060>
   23194:	ldr	r0, [sp, #36]	; 0x24
   23198:	bl	10f98 <strcmp@plt>
   2319c:	subs	r4, r0, #0
   231a0:	beq	231fc <__assert_fail@plt+0x11fa0>
   231a4:	mov	r0, #4
   231a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   231ac:	bl	11148 <__ctype_b_loc@plt>
   231b0:	mov	r1, r6
   231b4:	mov	lr, #1
   231b8:	ldr	r3, [r0]
   231bc:	add	r0, r3, #508	; 0x1fc
   231c0:	add	r0, r0, #2
   231c4:	sub	r3, r3, #2
   231c8:	ldrh	r2, [r3, #2]!
   231cc:	tst	r2, #4
   231d0:	beq	231ec <__assert_fail@plt+0x11f90>
   231d4:	ldrb	r2, [r1]
   231d8:	and	r4, r2, #31
   231dc:	asr	r2, r2, #5
   231e0:	ldr	ip, [r5, r2, lsl #2]
   231e4:	orr	ip, ip, lr, lsl r4
   231e8:	str	ip, [r5, r2, lsl #2]
   231ec:	cmp	r3, r0
   231f0:	add	r1, r1, #1
   231f4:	bne	231c8 <__assert_fail@plt+0x11f6c>
   231f8:	b	22aa0 <__assert_fail@plt+0x11844>
   231fc:	cmp	r6, #0
   23200:	bne	23240 <__assert_fail@plt+0x11fe4>
   23204:	bl	11148 <__ctype_b_loc@plt>
   23208:	mov	ip, #1
   2320c:	ldr	r3, [r0]
   23210:	sub	r3, r3, #2
   23214:	ldrh	r2, [r3, #2]!
   23218:	asr	r1, r4, #5
   2321c:	and	r0, r4, #31
   23220:	tst	r2, #4096	; 0x1000
   23224:	add	r4, r4, #1
   23228:	ldrne	r2, [r5, r1, lsl #2]
   2322c:	orrne	r2, r2, ip, lsl r0
   23230:	strne	r2, [r5, r1, lsl #2]
   23234:	cmp	r4, #256	; 0x100
   23238:	bne	23214 <__assert_fail@plt+0x11fb8>
   2323c:	b	22aa0 <__assert_fail@plt+0x11844>
   23240:	bl	11148 <__ctype_b_loc@plt>
   23244:	mov	r1, r6
   23248:	mov	lr, #1
   2324c:	ldr	r3, [r0]
   23250:	add	r0, r3, #508	; 0x1fc
   23254:	add	r0, r0, #2
   23258:	sub	r3, r3, #2
   2325c:	ldrh	r2, [r3, #2]!
   23260:	tst	r2, #4096	; 0x1000
   23264:	beq	23280 <__assert_fail@plt+0x12024>
   23268:	ldrb	r2, [r1]
   2326c:	and	r4, r2, #31
   23270:	asr	r2, r2, #5
   23274:	ldr	ip, [r5, r2, lsl #2]
   23278:	orr	ip, ip, lr, lsl r4
   2327c:	str	ip, [r5, r2, lsl #2]
   23280:	cmp	r0, r3
   23284:	add	r1, r1, #1
   23288:	bne	2325c <__assert_fail@plt+0x12000>
   2328c:	b	22aa0 <__assert_fail@plt+0x11844>
   23290:	andeq	sp, r2, r0, lsr #29
   23294:	muleq	r2, r8, lr
   23298:			; <UNDEFINED> instruction: 0x0002deb0
   2329c:			; <UNDEFINED> instruction: 0x0002deb8
   232a0:	andeq	sp, r2, r8, lsr #29
   232a4:	andeq	sp, r2, r0, asr #29
   232a8:	andeq	sp, r2, r8, asr #29
   232ac:	ldrdeq	sp, [r2], -r0
   232b0:	ldrdeq	sp, [r2], -r8
   232b4:	andeq	sp, r2, r0, ror #29
   232b8:	andeq	sp, r2, r8, ror #29
   232bc:	strdeq	sp, [r2], -r0
   232c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   232c4:	sub	sp, sp, #44	; 0x2c
   232c8:	mov	r6, r0
   232cc:	mov	fp, r1
   232d0:	mov	r9, #0
   232d4:	mov	r1, #1
   232d8:	mov	r0, #32
   232dc:	mov	sl, r2
   232e0:	mov	r5, r3
   232e4:	str	r9, [sp, #20]
   232e8:	ldrb	r8, [sp, #80]	; 0x50
   232ec:	bl	2bc8c <__assert_fail@plt+0x1aa30>
   232f0:	subs	r4, r0, #0
   232f4:	beq	234d0 <__assert_fail@plt+0x12274>
   232f8:	mov	r1, #1
   232fc:	mov	r0, #40	; 0x28
   23300:	bl	2bc8c <__assert_fail@plt+0x1aa30>
   23304:	subs	r7, r0, #0
   23308:	beq	234ec <__assert_fail@plt+0x12290>
   2330c:	ldrb	r2, [r7, #16]
   23310:	and	r3, r8, #1
   23314:	mov	r0, fp
   23318:	bic	r2, r2, #1
   2331c:	orr	r3, r3, r2
   23320:	add	r2, sp, #20
   23324:	strb	r3, [r7, #16]
   23328:	mov	r1, r4
   2332c:	stm	sp, {r2, sl}
   23330:	add	r3, r7, #36	; 0x24
   23334:	str	r9, [sp, #8]
   23338:	add	r2, r7, #12
   2333c:	bl	229d0 <__assert_fail@plt+0x11774>
   23340:	subs	sl, r0, #0
   23344:	bne	23508 <__assert_fail@plt+0x122ac>
   23348:	ldrb	r3, [r5]
   2334c:	cmp	r3, #0
   23350:	movne	ip, #1
   23354:	beq	23378 <__assert_fail@plt+0x1211c>
   23358:	asr	r1, r3, #5
   2335c:	and	r0, r3, #31
   23360:	ldr	r2, [r4, r1, lsl #2]
   23364:	ldrb	r3, [r5, #1]!
   23368:	orr	r2, r2, ip, lsl r0
   2336c:	cmp	r3, #0
   23370:	str	r2, [r4, r1, lsl #2]
   23374:	bne	23358 <__assert_fail@plt+0x120fc>
   23378:	cmp	r8, #0
   2337c:	bne	23470 <__assert_fail@plt+0x12214>
   23380:	ldr	r3, [r6, #92]	; 0x5c
   23384:	cmp	r3, #1
   23388:	ble	233b4 <__assert_fail@plt+0x12158>
   2338c:	ldr	r1, [r6, #60]	; 0x3c
   23390:	sub	r3, r4, #4
   23394:	sub	r1, r1, #4
   23398:	add	ip, r4, #28
   2339c:	ldr	r2, [r3, #4]
   233a0:	ldr	r0, [r1, #4]!
   233a4:	and	r2, r2, r0
   233a8:	str	r2, [r3, #4]!
   233ac:	cmp	ip, r3
   233b0:	bne	2339c <__assert_fail@plt+0x12140>
   233b4:	add	r8, sp, #24
   233b8:	mov	r5, #0
   233bc:	add	sl, r6, #56	; 0x38
   233c0:	add	fp, r6, #64	; 0x40
   233c4:	str	r8, [sp]
   233c8:	mov	ip, #3
   233cc:	str	r5, [r8, #4]
   233d0:	mov	r3, r5
   233d4:	mov	r2, r5
   233d8:	mov	r0, sl
   233dc:	mov	r1, fp
   233e0:	str	r4, [sp, #24]
   233e4:	strb	ip, [sp, #28]
   233e8:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   233ec:	subs	r9, r0, #0
   233f0:	beq	23490 <__assert_fail@plt+0x12234>
   233f4:	ldr	r3, [r6, #92]	; 0x5c
   233f8:	cmp	r3, #1
   233fc:	ble	234bc <__assert_fail@plt+0x12260>
   23400:	ldrb	r3, [r6, #88]	; 0x58
   23404:	mov	ip, #6
   23408:	str	r8, [sp]
   2340c:	orr	r3, r3, #2
   23410:	strb	r3, [r6, #88]	; 0x58
   23414:	mov	r2, r5
   23418:	mov	r3, r5
   2341c:	mov	r1, fp
   23420:	mov	r0, sl
   23424:	str	r7, [sp, #24]
   23428:	strb	ip, [sp, #28]
   2342c:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   23430:	subs	r3, r0, #0
   23434:	beq	23490 <__assert_fail@plt+0x12234>
   23438:	add	ip, sp, #32
   2343c:	mov	r2, r9
   23440:	mov	lr, #10
   23444:	mov	r1, fp
   23448:	mov	r0, sl
   2344c:	str	ip, [sp]
   23450:	str	r5, [sp, #36]	; 0x24
   23454:	str	r5, [sp, #32]
   23458:	strb	lr, [sp, #36]	; 0x24
   2345c:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   23460:	mov	r9, r0
   23464:	mov	r0, r9
   23468:	add	sp, sp, #44	; 0x2c
   2346c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23470:	sub	r3, r4, #4
   23474:	add	r1, r4, #28
   23478:	ldr	r2, [r3, #4]
   2347c:	mvn	r2, r2
   23480:	str	r2, [r3, #4]!
   23484:	cmp	r1, r3
   23488:	bne	23478 <__assert_fail@plt+0x1221c>
   2348c:	b	23380 <__assert_fail@plt+0x12124>
   23490:	mov	r0, r4
   23494:	bl	13098 <__assert_fail@plt+0x1e3c>
   23498:	mov	r0, r7
   2349c:	bl	1ea28 <__assert_fail@plt+0xd7cc>
   234a0:	ldr	r2, [sp, #84]	; 0x54
   234a4:	mov	r9, #0
   234a8:	mov	r3, #12
   234ac:	mov	r0, r9
   234b0:	str	r3, [r2]
   234b4:	add	sp, sp, #44	; 0x2c
   234b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   234bc:	mov	r0, r7
   234c0:	bl	1ea28 <__assert_fail@plt+0xd7cc>
   234c4:	mov	r0, r9
   234c8:	add	sp, sp, #44	; 0x2c
   234cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   234d0:	ldr	r2, [sp, #84]	; 0x54
   234d4:	mov	r3, #12
   234d8:	mov	r9, r4
   234dc:	mov	r0, r9
   234e0:	str	r3, [r2]
   234e4:	add	sp, sp, #44	; 0x2c
   234e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   234ec:	mov	r0, r4
   234f0:	bl	13098 <__assert_fail@plt+0x1e3c>
   234f4:	ldr	r2, [sp, #84]	; 0x54
   234f8:	mov	r3, #12
   234fc:	mov	r9, r7
   23500:	str	r3, [r2]
   23504:	b	23464 <__assert_fail@plt+0x12208>
   23508:	mov	r0, r4
   2350c:	bl	13098 <__assert_fail@plt+0x1e3c>
   23510:	mov	r0, r7
   23514:	bl	1ea28 <__assert_fail@plt+0xd7cc>
   23518:	ldr	r3, [sp, #84]	; 0x54
   2351c:	str	sl, [r3]
   23520:	b	23464 <__assert_fail@plt+0x12208>
   23524:	ldr	ip, [r0]
   23528:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2352c:	sub	sp, sp, #308	; 0x134
   23530:	str	ip, [sp, #12]
   23534:	ldr	ip, [ip, #92]	; 0x5c
   23538:	cmp	ip, #1
   2353c:	ldr	ip, [r1]
   23540:	ldreq	r6, [r0, #12]
   23544:	movne	r6, #0
   23548:	lsreq	r6, r6, #22
   2354c:	andeq	r6, r6, #1
   23550:	cmp	ip, #0
   23554:	ble	238d0 <__assert_fail@plt+0x12674>
   23558:	mov	r7, r3
   2355c:	mov	r3, #0
   23560:	str	r2, [sp, #20]
   23564:	str	r1, [sp, #24]
   23568:	str	r0, [sp, #28]
   2356c:	str	r3, [sp, #8]
   23570:	mov	r5, #1
   23574:	b	235b0 <__assert_fail@plt+0x12354>
   23578:	cmp	r4, #3
   2357c:	beq	236f0 <__assert_fail@plt+0x12494>
   23580:	cmp	r4, #6
   23584:	beq	23770 <__assert_fail@plt+0x12514>
   23588:	and	r3, r4, #253	; 0xfd
   2358c:	cmp	r3, #5
   23590:	beq	23914 <__assert_fail@plt+0x126b8>
   23594:	cmp	r4, #2
   23598:	beq	238b0 <__assert_fail@plt+0x12654>
   2359c:	ldr	r3, [sp, #8]
   235a0:	add	r3, r3, #1
   235a4:	cmp	r3, ip
   235a8:	str	r3, [sp, #8]
   235ac:	bge	238d0 <__assert_fail@plt+0x12674>
   235b0:	ldr	r3, [sp, #20]
   235b4:	ldr	r1, [sp, #8]
   235b8:	ldr	r2, [r3]
   235bc:	ldr	r3, [sp, #12]
   235c0:	ldr	r8, [r2, r1, lsl #2]
   235c4:	ldr	r3, [r3]
   235c8:	lsl	r2, r8, #3
   235cc:	str	r2, [sp, #16]
   235d0:	add	r2, r3, r2
   235d4:	ldrb	r4, [r2, #4]
   235d8:	cmp	r4, #1
   235dc:	bne	23578 <__assert_fail@plt+0x1231c>
   235e0:	ldrb	fp, [r3, r8, lsl #3]
   235e4:	cmp	r6, #0
   235e8:	strb	r4, [r7, fp]
   235ec:	beq	23600 <__assert_fail@plt+0x123a4>
   235f0:	bl	1110c <__ctype_tolower_loc@plt>
   235f4:	ldr	r3, [r0]
   235f8:	ldr	r3, [r3, fp, lsl #2]
   235fc:	strb	r4, [r7, r3]
   23600:	ldr	r3, [sp, #28]
   23604:	ldr	r3, [r3, #12]
   23608:	tst	r3, #4194304	; 0x400000
   2360c:	beq	236e4 <__assert_fail@plt+0x12488>
   23610:	ldr	r3, [sp, #12]
   23614:	ldr	r3, [r3, #92]	; 0x5c
   23618:	cmp	r3, #1
   2361c:	ble	236e4 <__assert_fail@plt+0x12488>
   23620:	ldr	r0, [sp, #12]
   23624:	add	r1, r8, #1
   23628:	ldr	r3, [r0]
   2362c:	ldrb	r2, [r3, r8, lsl #3]
   23630:	strb	r2, [sp, #48]	; 0x30
   23634:	ldr	r2, [r0, #8]
   23638:	cmp	r2, r1
   2363c:	bls	2390c <__assert_fail@plt+0x126b0>
   23640:	ldr	ip, [sp, #16]
   23644:	ldr	lr, [pc, #744]	; 23934 <__assert_fail@plt+0x126d8>
   23648:	add	r2, ip, #8
   2364c:	add	r3, r3, r2
   23650:	ldr	r2, [r3, #4]
   23654:	bic	r2, r2, #-16777216	; 0xff000000
   23658:	bic	r2, r2, #14614528	; 0xdf0000
   2365c:	bic	r2, r2, #65280	; 0xff00
   23660:	cmp	r2, lr
   23664:	bne	2390c <__assert_fail@plt+0x126b0>
   23668:	add	r9, ip, #16
   2366c:	add	r4, sp, #49	; 0x31
   23670:	b	2369c <__assert_fail@plt+0x12440>
   23674:	ldr	r3, [r0]
   23678:	ldr	ip, [pc, #692]	; 23934 <__assert_fail@plt+0x126d8>
   2367c:	add	r3, r3, r9
   23680:	add	r9, r9, #8
   23684:	ldr	r2, [r3, #4]
   23688:	bic	r2, r2, #-16777216	; 0xff000000
   2368c:	bic	r2, r2, #14614528	; 0xdf0000
   23690:	bic	r2, r2, #65280	; 0xff00
   23694:	cmp	r2, ip
   23698:	bne	236b4 <__assert_fail@plt+0x12458>
   2369c:	ldrb	r3, [r3]
   236a0:	add	r1, r1, #1
   236a4:	strb	r3, [r4], #1
   236a8:	ldr	r3, [r0, #8]
   236ac:	cmp	r1, r3
   236b0:	bcc	23674 <__assert_fail@plt+0x12418>
   236b4:	add	r3, sp, #48	; 0x30
   236b8:	sub	r4, r4, r3
   236bc:	mov	ip, #0
   236c0:	mov	r2, r4
   236c4:	add	r3, sp, #40	; 0x28
   236c8:	add	r1, sp, #48	; 0x30
   236cc:	add	r0, sp, #36	; 0x24
   236d0:	str	ip, [sp, #40]	; 0x28
   236d4:	str	ip, [sp, #44]	; 0x2c
   236d8:	bl	1b770 <__assert_fail@plt+0xa514>
   236dc:	cmp	r4, r0
   236e0:	beq	238d8 <__assert_fail@plt+0x1267c>
   236e4:	ldr	r3, [sp, #24]
   236e8:	ldr	ip, [r3]
   236ec:	b	2359c <__assert_fail@plt+0x12340>
   236f0:	mov	r8, #0
   236f4:	str	r7, [sp, #4]
   236f8:	ldr	r2, [sp, #16]
   236fc:	ldr	r9, [sp, #4]
   23700:	lsl	sl, r8, #5
   23704:	ldr	r2, [r3, r2]
   23708:	mov	r4, #0
   2370c:	ldr	fp, [r2, r8]
   23710:	lsr	r3, fp, r4
   23714:	tst	r3, #1
   23718:	add	r4, r4, #1
   2371c:	beq	2373c <__assert_fail@plt+0x124e0>
   23720:	cmp	r6, #0
   23724:	strb	r5, [r9]
   23728:	beq	2373c <__assert_fail@plt+0x124e0>
   2372c:	bl	1110c <__ctype_tolower_loc@plt>
   23730:	ldr	r3, [r0]
   23734:	ldr	r3, [r3, sl]
   23738:	strb	r5, [r7, r3]
   2373c:	cmp	r4, #32
   23740:	add	r9, r9, #1
   23744:	add	sl, sl, #4
   23748:	bne	23710 <__assert_fail@plt+0x124b4>
   2374c:	ldr	r3, [sp, #4]
   23750:	add	r8, r8, #4
   23754:	add	r3, r3, #32
   23758:	cmp	r8, #32
   2375c:	str	r3, [sp, #4]
   23760:	beq	236e4 <__assert_fail@plt+0x12488>
   23764:	ldr	r3, [sp, #12]
   23768:	ldr	r3, [r3]
   2376c:	b	236f8 <__assert_fail@plt+0x1249c>
   23770:	ldr	r3, [sp, #12]
   23774:	ldr	r8, [r2]
   23778:	ldr	r3, [r3, #92]	; 0x5c
   2377c:	cmp	r3, #1
   23780:	ble	237a8 <__assert_fail@plt+0x1254c>
   23784:	ldr	r3, [r8, #36]	; 0x24
   23788:	cmp	r3, #0
   2378c:	bne	23868 <__assert_fail@plt+0x1260c>
   23790:	ldrb	r3, [r8, #16]
   23794:	tst	r3, #1
   23798:	bne	23868 <__assert_fail@plt+0x1260c>
   2379c:	ldr	r3, [r8, #32]
   237a0:	cmp	r3, #0
   237a4:	bne	23868 <__assert_fail@plt+0x1260c>
   237a8:	ldr	r3, [r8, #20]
   237ac:	cmp	r3, #0
   237b0:	ble	2359c <__assert_fail@plt+0x12340>
   237b4:	ldr	sl, [sp, #12]
   237b8:	ldr	r9, [sp, #28]
   237bc:	mov	r4, #0
   237c0:	mov	r3, #0
   237c4:	str	r3, [sp, #40]	; 0x28
   237c8:	str	r3, [sp, #44]	; 0x2c
   237cc:	ldr	r3, [r8]
   237d0:	add	r2, sp, #40	; 0x28
   237d4:	add	r0, sp, #48	; 0x30
   237d8:	ldr	r1, [r3, r4, lsl #2]
   237dc:	bl	10f80 <wcrtomb@plt>
   237e0:	lsl	r2, r4, #2
   237e4:	add	r4, r4, #1
   237e8:	cmn	r0, #1
   237ec:	beq	23818 <__assert_fail@plt+0x125bc>
   237f0:	ldrb	fp, [sp, #48]	; 0x30
   237f4:	cmp	r6, #0
   237f8:	strb	r5, [r7, fp]
   237fc:	beq	23818 <__assert_fail@plt+0x125bc>
   23800:	str	r2, [sp, #4]
   23804:	bl	1110c <__ctype_tolower_loc@plt>
   23808:	ldr	r2, [sp, #4]
   2380c:	ldr	r3, [r0]
   23810:	ldr	r3, [r3, fp, lsl #2]
   23814:	strb	r5, [r7, r3]
   23818:	ldr	r3, [r9, #12]
   2381c:	tst	r3, #4194304	; 0x400000
   23820:	beq	23858 <__assert_fail@plt+0x125fc>
   23824:	ldr	r3, [sl, #92]	; 0x5c
   23828:	cmp	r3, #1
   2382c:	ble	23858 <__assert_fail@plt+0x125fc>
   23830:	ldr	r3, [r8]
   23834:	ldr	r0, [r3, r2]
   23838:	bl	1101c <towlower@plt>
   2383c:	add	r2, sp, #40	; 0x28
   23840:	mov	r1, r0
   23844:	add	r0, sp, #48	; 0x30
   23848:	bl	10f80 <wcrtomb@plt>
   2384c:	cmn	r0, #1
   23850:	ldrbne	r3, [sp, #48]	; 0x30
   23854:	strbne	r5, [r7, r3]
   23858:	ldr	r3, [r8, #20]
   2385c:	cmp	r4, r3
   23860:	blt	237c0 <__assert_fail@plt+0x12564>
   23864:	b	236e4 <__assert_fail@plt+0x12488>
   23868:	mov	r3, #0
   2386c:	strb	r3, [sp, #40]	; 0x28
   23870:	mov	r0, #0
   23874:	add	r3, sp, #48	; 0x30
   23878:	mov	r2, r5
   2387c:	add	r1, sp, #40	; 0x28
   23880:	str	r0, [sp, #48]	; 0x30
   23884:	str	r0, [sp, #52]	; 0x34
   23888:	bl	1b770 <__assert_fail@plt+0xa514>
   2388c:	ldrb	r3, [sp, #40]	; 0x28
   23890:	cmn	r0, #2
   23894:	strbeq	r5, [r7, r3]
   23898:	add	r3, r3, #1
   2389c:	uxtb	r3, r3
   238a0:	cmp	r3, #0
   238a4:	strb	r3, [sp, #40]	; 0x28
   238a8:	bne	23870 <__assert_fail@plt+0x12614>
   238ac:	b	236e4 <__assert_fail@plt+0x12488>
   238b0:	mov	r0, r7
   238b4:	mov	r2, #256	; 0x100
   238b8:	mov	r1, #1
   238bc:	bl	1119c <memset@plt>
   238c0:	ldr	r2, [sp, #28]
   238c4:	ldrb	r3, [r2, #28]
   238c8:	orr	r3, r3, #1
   238cc:	strb	r3, [r2, #28]
   238d0:	add	sp, sp, #308	; 0x134
   238d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   238d8:	ldr	r0, [sp, #36]	; 0x24
   238dc:	bl	1101c <towlower@plt>
   238e0:	add	r2, sp, #40	; 0x28
   238e4:	mov	r1, r0
   238e8:	add	r0, sp, #48	; 0x30
   238ec:	bl	10f80 <wcrtomb@plt>
   238f0:	cmn	r0, #1
   238f4:	beq	236e4 <__assert_fail@plt+0x12488>
   238f8:	ldrb	r3, [sp, #48]	; 0x30
   238fc:	strb	r5, [r7, r3]
   23900:	ldr	r3, [sp, #24]
   23904:	ldr	ip, [r3]
   23908:	b	2359c <__assert_fail@plt+0x12340>
   2390c:	add	r4, sp, #49	; 0x31
   23910:	b	236b4 <__assert_fail@plt+0x12458>
   23914:	mov	r0, r7
   23918:	mov	r2, #256	; 0x100
   2391c:	mov	r1, #1
   23920:	bl	1119c <memset@plt>
   23924:	cmp	r4, #2
   23928:	beq	238c0 <__assert_fail@plt+0x12664>
   2392c:	add	sp, sp, #308	; 0x134
   23930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23934:	eoreq	r0, r0, r1
   23938:	add	ip, r0, r2, lsl #3
   2393c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23940:	ldrb	r6, [ip, #4]
   23944:	ldr	r7, [sp, #32]
   23948:	cmp	r6, #7
   2394c:	beq	23a2c <__assert_fail@plt+0x127d0>
   23950:	ldr	ip, [r3, #80]	; 0x50
   23954:	cmp	ip, #1
   23958:	beq	23a40 <__assert_fail@plt+0x127e4>
   2395c:	ldr	r5, [r3, #28]
   23960:	add	lr, r7, #1
   23964:	cmp	r5, lr
   23968:	ble	23a40 <__assert_fail@plt+0x127e4>
   2396c:	ldr	r8, [r3, #8]
   23970:	add	ip, r8, lr, lsl #2
   23974:	ldr	lr, [r8, lr, lsl #2]
   23978:	cmn	lr, #1
   2397c:	subeq	r5, r5, r7
   23980:	moveq	r4, #1
   23984:	beq	23998 <__assert_fail@plt+0x1273c>
   23988:	b	23a40 <__assert_fail@plt+0x127e4>
   2398c:	ldr	lr, [ip, #4]!
   23990:	cmn	lr, #1
   23994:	bne	239a4 <__assert_fail@plt+0x12748>
   23998:	add	r4, r4, #1
   2399c:	cmp	r4, r5
   239a0:	bne	2398c <__assert_fail@plt+0x12730>
   239a4:	cmp	r6, #5
   239a8:	beq	23a4c <__assert_fail@plt+0x127f0>
   239ac:	cmp	r4, #1
   239b0:	sub	r6, r6, #6
   239b4:	clz	r6, r6
   239b8:	lsr	r6, r6, #5
   239bc:	moveq	r6, #0
   239c0:	cmp	r6, #0
   239c4:	beq	23a40 <__assert_fail@plt+0x127e4>
   239c8:	ldr	r9, [r0, r2, lsl #3]
   239cc:	ldr	ip, [r9, #32]
   239d0:	cmp	ip, #0
   239d4:	beq	23a88 <__assert_fail@plt+0x1282c>
   239d8:	ldr	r0, [r9, #20]
   239dc:	cmp	r0, #0
   239e0:	ldr	r5, [r8, r7, lsl #2]
   239e4:	ble	23a18 <__assert_fail@plt+0x127bc>
   239e8:	ldr	r2, [r9]
   239ec:	ldr	r3, [r2]
   239f0:	cmp	r5, r3
   239f4:	movne	r3, #0
   239f8:	bne	23a0c <__assert_fail@plt+0x127b0>
   239fc:	b	23ad8 <__assert_fail@plt+0x1287c>
   23a00:	ldr	r1, [r2, #4]!
   23a04:	cmp	r5, r1
   23a08:	beq	23ad8 <__assert_fail@plt+0x1287c>
   23a0c:	add	r3, r3, #1
   23a10:	cmp	r3, r0
   23a14:	bne	23a00 <__assert_fail@plt+0x127a4>
   23a18:	ldr	r3, [r9, #36]	; 0x24
   23a1c:	cmp	r3, #0
   23a20:	ble	23b1c <__assert_fail@plt+0x128c0>
   23a24:	mov	r6, #0
   23a28:	b	23abc <__assert_fail@plt+0x12860>
   23a2c:	ldr	r2, [r3, #4]
   23a30:	add	r0, r2, r7
   23a34:	ldrb	r1, [r2, r7]
   23a38:	cmp	r1, #193	; 0xc1
   23a3c:	bhi	23ae8 <__assert_fail@plt+0x1288c>
   23a40:	mov	r4, #0
   23a44:	mov	r0, r4
   23a48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23a4c:	ldr	r2, [r1]
   23a50:	tst	r2, #64	; 0x40
   23a54:	beq	23a74 <__assert_fail@plt+0x12818>
   23a58:	tst	r2, #128	; 0x80
   23a5c:	beq	23a44 <__assert_fail@plt+0x127e8>
   23a60:	ldr	r3, [r3, #4]
   23a64:	ldrb	r3, [r3, r7]
   23a68:	cmp	r3, #0
   23a6c:	beq	23a40 <__assert_fail@plt+0x127e4>
   23a70:	b	23a44 <__assert_fail@plt+0x127e8>
   23a74:	ldr	r1, [r3, #4]
   23a78:	ldrb	r1, [r1, r7]
   23a7c:	cmp	r1, #10
   23a80:	bne	23a58 <__assert_fail@plt+0x127fc>
   23a84:	b	23a40 <__assert_fail@plt+0x127e4>
   23a88:	ldr	r3, [r9, #36]	; 0x24
   23a8c:	ldr	r0, [r9, #20]
   23a90:	cmp	r3, #0
   23a94:	bne	239dc <__assert_fail@plt+0x12780>
   23a98:	cmp	r0, #0
   23a9c:	bne	239dc <__assert_fail@plt+0x12780>
   23aa0:	ldrb	r3, [r9, #16]
   23aa4:	tst	r3, #1
   23aa8:	bne	23a44 <__assert_fail@plt+0x127e8>
   23aac:	b	23a40 <__assert_fail@plt+0x127e4>
   23ab0:	ldr	r3, [r9, #36]	; 0x24
   23ab4:	cmp	r6, r3
   23ab8:	bge	23b18 <__assert_fail@plt+0x128bc>
   23abc:	ldr	r3, [r9, #12]
   23ac0:	mov	r0, r5
   23ac4:	ldr	r1, [r3, r6, lsl #2]
   23ac8:	bl	10f8c <iswctype@plt>
   23acc:	add	r6, r6, #1
   23ad0:	cmp	r0, #0
   23ad4:	beq	23ab0 <__assert_fail@plt+0x12854>
   23ad8:	ldrb	r3, [r9, #16]
   23adc:	tst	r3, #1
   23ae0:	beq	23a44 <__assert_fail@plt+0x127e8>
   23ae4:	b	23a40 <__assert_fail@plt+0x127e4>
   23ae8:	ldr	ip, [r3, #48]	; 0x30
   23aec:	add	r3, r7, #1
   23af0:	cmp	r3, ip
   23af4:	bge	23a40 <__assert_fail@plt+0x127e4>
   23af8:	cmp	r1, #223	; 0xdf
   23afc:	ldrb	r3, [r0, #1]
   23b00:	bhi	23b60 <__assert_fail@plt+0x12904>
   23b04:	eor	r3, r3, #128	; 0x80
   23b08:	cmp	r3, #63	; 0x3f
   23b0c:	movls	r4, #2
   23b10:	bls	23a44 <__assert_fail@plt+0x127e8>
   23b14:	b	23a40 <__assert_fail@plt+0x127e4>
   23b18:	ldr	ip, [r9, #32]
   23b1c:	cmp	ip, #0
   23b20:	ble	23aa0 <__assert_fail@plt+0x12844>
   23b24:	ldr	r2, [r9, #4]
   23b28:	mov	r3, #0
   23b2c:	sub	r2, r2, #4
   23b30:	b	23b40 <__assert_fail@plt+0x128e4>
   23b34:	add	r3, r3, #1
   23b38:	cmp	r3, ip
   23b3c:	beq	23aa0 <__assert_fail@plt+0x12844>
   23b40:	ldr	r1, [r2, #4]!
   23b44:	cmp	r5, r1
   23b48:	bcc	23b34 <__assert_fail@plt+0x128d8>
   23b4c:	ldr	r1, [r9, #8]
   23b50:	ldr	r1, [r1, r3, lsl #2]
   23b54:	cmp	r5, r1
   23b58:	bhi	23b34 <__assert_fail@plt+0x128d8>
   23b5c:	b	23ad8 <__assert_fail@plt+0x1287c>
   23b60:	cmp	r1, #239	; 0xef
   23b64:	bhi	23bb0 <__assert_fail@plt+0x12954>
   23b68:	cmp	r3, #159	; 0x9f
   23b6c:	cmpls	r1, #224	; 0xe0
   23b70:	movne	r4, #3
   23b74:	beq	23a40 <__assert_fail@plt+0x127e4>
   23b78:	add	r3, r7, r4
   23b7c:	cmp	ip, r3
   23b80:	blt	23a40 <__assert_fail@plt+0x127e4>
   23b84:	sub	r3, r7, #1
   23b88:	add	r3, r3, r4
   23b8c:	add	r2, r2, r3
   23b90:	b	23b9c <__assert_fail@plt+0x12940>
   23b94:	cmp	r2, r0
   23b98:	beq	23a44 <__assert_fail@plt+0x127e8>
   23b9c:	ldrb	r3, [r0, #1]!
   23ba0:	eor	r3, r3, #128	; 0x80
   23ba4:	cmp	r3, #63	; 0x3f
   23ba8:	bls	23b94 <__assert_fail@plt+0x12938>
   23bac:	b	23a40 <__assert_fail@plt+0x127e4>
   23bb0:	cmp	r1, #247	; 0xf7
   23bb4:	bhi	23bcc <__assert_fail@plt+0x12970>
   23bb8:	cmp	r3, #143	; 0x8f
   23bbc:	cmpls	r1, #240	; 0xf0
   23bc0:	movne	r4, #4
   23bc4:	bne	23b78 <__assert_fail@plt+0x1291c>
   23bc8:	b	23a40 <__assert_fail@plt+0x127e4>
   23bcc:	cmp	r1, #251	; 0xfb
   23bd0:	bhi	23be8 <__assert_fail@plt+0x1298c>
   23bd4:	cmp	r3, #135	; 0x87
   23bd8:	cmpls	r1, #248	; 0xf8
   23bdc:	movne	r4, #5
   23be0:	bne	23b78 <__assert_fail@plt+0x1291c>
   23be4:	b	23a40 <__assert_fail@plt+0x127e4>
   23be8:	cmp	r1, #253	; 0xfd
   23bec:	bhi	23a40 <__assert_fail@plt+0x127e4>
   23bf0:	cmp	r3, #131	; 0x83
   23bf4:	cmpls	r1, #252	; 0xfc
   23bf8:	beq	23a40 <__assert_fail@plt+0x127e4>
   23bfc:	mov	r4, #6
   23c00:	b	23b78 <__assert_fail@plt+0x1291c>
   23c04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c08:	mov	r5, r0
   23c0c:	ldr	r0, [r0, #84]	; 0x54
   23c10:	sub	sp, sp, #84	; 0x54
   23c14:	mov	ip, r1
   23c18:	str	r0, [sp, #28]
   23c1c:	ldr	r0, [r0]
   23c20:	mov	r8, r2
   23c24:	str	r1, [sp, #36]	; 0x24
   23c28:	ldr	r2, [sp, #124]	; 0x7c
   23c2c:	ldr	r1, [r5, #120]	; 0x78
   23c30:	ldr	r4, [ip, #4]
   23c34:	mov	r7, #0
   23c38:	add	r2, r2, r1
   23c3c:	mov	r6, r3
   23c40:	str	r7, [sp, #48]	; 0x30
   23c44:	ldr	r3, [r0, r8, lsl #3]
   23c48:	cmp	r2, r4
   23c4c:	str	r3, [sp, #32]
   23c50:	bge	24158 <__assert_fail@plt+0x12efc>
   23c54:	ldr	r3, [sp, #36]	; 0x24
   23c58:	ldr	r4, [r3]
   23c5c:	cmp	r4, #0
   23c60:	beq	2402c <__assert_fail@plt+0x12dd0>
   23c64:	ldr	r9, [r3, #8]
   23c68:	ldr	r3, [r5, #100]	; 0x64
   23c6c:	ldr	r2, [r5, #88]	; 0x58
   23c70:	str	r3, [sp, #40]	; 0x28
   23c74:	ldr	r3, [r5, #40]	; 0x28
   23c78:	str	r9, [r5, #100]	; 0x64
   23c7c:	str	r4, [r5, #40]	; 0x28
   23c80:	sub	r1, r4, #1
   23c84:	mov	r0, r5
   23c88:	str	r3, [sp, #44]	; 0x2c
   23c8c:	bl	21d9c <__assert_fail@plt+0x10b40>
   23c90:	cmp	r4, r6
   23c94:	mov	r7, r0
   23c98:	beq	24060 <__assert_fail@plt+0x12e04>
   23c9c:	ldr	r8, [r9, r4, lsl #2]
   23ca0:	cmp	r8, #0
   23ca4:	beq	241ac <__assert_fail@plt+0x12f50>
   23ca8:	ldrb	r3, [r8, #52]	; 0x34
   23cac:	add	fp, sp, #56	; 0x38
   23cb0:	ands	r2, r3, #64	; 0x40
   23cb4:	streq	r2, [sp, #56]	; 0x38
   23cb8:	streq	r2, [fp, #4]
   23cbc:	streq	r2, [fp, #8]
   23cc0:	bne	24138 <__assert_fail@plt+0x12edc>
   23cc4:	tst	r3, #64	; 0x40
   23cc8:	beq	23d24 <__assert_fail@plt+0x12ac8>
   23ccc:	ldr	r3, [sp, #60]	; 0x3c
   23cd0:	cmp	r3, #0
   23cd4:	beq	23d00 <__assert_fail@plt+0x12aa4>
   23cd8:	ldr	r3, [sp, #128]	; 0x80
   23cdc:	mov	r2, r4
   23ce0:	str	r3, [sp]
   23ce4:	mov	r1, fp
   23ce8:	ldr	r3, [sp, #32]
   23cec:	mov	r0, r5
   23cf0:	bl	20ff4 <__assert_fail@plt+0xfd98>
   23cf4:	cmp	r0, #0
   23cf8:	str	r0, [sp, #48]	; 0x30
   23cfc:	bne	240c8 <__assert_fail@plt+0x12e6c>
   23d00:	mov	r3, r7
   23d04:	mov	r2, fp
   23d08:	ldr	r1, [sp, #28]
   23d0c:	add	r0, sp, #48	; 0x30
   23d10:	bl	2024c <__assert_fail@plt+0xeff0>
   23d14:	subs	r8, r0, #0
   23d18:	beq	241c0 <__assert_fail@plt+0x12f64>
   23d1c:	ldr	r3, [r5, #100]	; 0x64
   23d20:	str	r8, [r3, r4, lsl #2]
   23d24:	ldr	r3, [sp, #124]	; 0x7c
   23d28:	cmp	r3, r4
   23d2c:	ble	23fd8 <__assert_fail@plt+0x12d7c>
   23d30:	ldr	r3, [r5, #120]	; 0x78
   23d34:	cmp	r3, #0
   23d38:	blt	23fd8 <__assert_fail@plt+0x12d7c>
   23d3c:	mov	r3, #0
   23d40:	add	r4, r4, #1
   23d44:	str	r3, [sp, #24]
   23d48:	ldr	r3, [r5, #100]	; 0x64
   23d4c:	lsl	r2, r4, #2
   23d50:	str	r2, [sp, #12]
   23d54:	str	r4, [sp, #8]
   23d58:	ldr	r2, [sp, #12]
   23d5c:	ldr	r1, [r3, r2]
   23d60:	mov	r3, #0
   23d64:	str	r3, [sp, #60]	; 0x3c
   23d68:	cmp	r1, r3
   23d6c:	ldr	r3, [sp, #8]
   23d70:	sub	sl, r3, #1
   23d74:	beq	240ec <__assert_fail@plt+0x12e90>
   23d78:	add	r1, r1, #4
   23d7c:	mov	r0, fp
   23d80:	bl	20af8 <__assert_fail@plt+0xf89c>
   23d84:	cmp	r0, #0
   23d88:	str	r0, [sp, #48]	; 0x30
   23d8c:	bne	240c8 <__assert_fail@plt+0x12e6c>
   23d90:	cmp	r8, #0
   23d94:	beq	23f0c <__assert_fail@plt+0x12cb0>
   23d98:	ldr	r3, [r8, #20]
   23d9c:	mov	r2, #0
   23da0:	cmp	r3, r2
   23da4:	str	r2, [sp, #52]	; 0x34
   23da8:	str	r2, [sp, #68]	; 0x44
   23dac:	str	r2, [sp, #72]	; 0x48
   23db0:	str	r2, [sp, #76]	; 0x4c
   23db4:	ldr	r9, [r5, #84]	; 0x54
   23db8:	ble	241d8 <__assert_fail@plt+0x12f7c>
   23dbc:	ldr	r3, [r8, #24]
   23dc0:	mov	r4, #0
   23dc4:	ldr	r6, [r3]
   23dc8:	mov	r3, r9
   23dcc:	ldr	r0, [r3], #128	; 0x80
   23dd0:	lsl	r7, r6, #3
   23dd4:	str	r3, [sp, #16]
   23dd8:	add	r3, r0, r7
   23ddc:	b	23e38 <__assert_fail@plt+0x12bdc>
   23de0:	add	r1, r0, r7
   23de4:	mov	r2, sl
   23de8:	mov	r0, r5
   23dec:	bl	22658 <__assert_fail@plt+0x113fc>
   23df0:	cmp	r0, #0
   23df4:	beq	23e14 <__assert_fail@plt+0x12bb8>
   23df8:	lsl	r7, r6, #2
   23dfc:	ldr	r2, [r9, #12]
   23e00:	mov	r0, fp
   23e04:	ldr	r1, [r2, r7]
   23e08:	bl	1efec <__assert_fail@plt+0xdd90>
   23e0c:	cmp	r0, #0
   23e10:	beq	240b8 <__assert_fail@plt+0x12e5c>
   23e14:	ldr	r3, [r8, #20]
   23e18:	add	r4, r4, #1
   23e1c:	cmp	r4, r3
   23e20:	bge	240fc <__assert_fail@plt+0x12ea0>
   23e24:	ldr	r3, [r8, #24]
   23e28:	ldr	r0, [r9]
   23e2c:	ldr	r6, [r3, r4, lsl #2]
   23e30:	lsl	r7, r6, #3
   23e34:	add	r3, r0, r7
   23e38:	ldrb	r3, [r3, #6]
   23e3c:	tst	r3, #16
   23e40:	beq	23de0 <__assert_fail@plt+0x12b84>
   23e44:	str	sl, [sp]
   23e48:	mov	r3, r5
   23e4c:	mov	r2, r6
   23e50:	ldr	r1, [sp, #16]
   23e54:	bl	23938 <__assert_fail@plt+0x126dc>
   23e58:	cmp	r0, #1
   23e5c:	ble	240dc <__assert_fail@plt+0x12e80>
   23e60:	add	r2, r0, sl
   23e64:	ldr	r3, [r5, #100]	; 0x64
   23e68:	mov	r1, r2
   23e6c:	str	r2, [sp, #20]
   23e70:	ldr	r1, [r3, r1, lsl #2]
   23e74:	ldr	r2, [r9, #12]
   23e78:	mov	r3, #0
   23e7c:	cmp	r1, #0
   23e80:	lsl	r7, r6, #2
   23e84:	ldr	r6, [r2, r6, lsl #2]
   23e88:	str	r3, [sp, #72]	; 0x48
   23e8c:	beq	23ea8 <__assert_fail@plt+0x12c4c>
   23e90:	add	r1, r1, #4
   23e94:	add	r0, sp, #68	; 0x44
   23e98:	bl	20af8 <__assert_fail@plt+0xf89c>
   23e9c:	cmp	r0, #0
   23ea0:	str	r0, [sp, #52]	; 0x34
   23ea4:	bne	23ef4 <__assert_fail@plt+0x12c98>
   23ea8:	mov	r1, r6
   23eac:	add	r0, sp, #68	; 0x44
   23eb0:	bl	1efec <__assert_fail@plt+0xdd90>
   23eb4:	cmp	r0, #0
   23eb8:	beq	240b8 <__assert_fail@plt+0x12e5c>
   23ebc:	add	r2, sp, #68	; 0x44
   23ec0:	mov	r1, r9
   23ec4:	add	r0, sp, #52	; 0x34
   23ec8:	ldr	r6, [r5, #100]	; 0x64
   23ecc:	bl	20578 <__assert_fail@plt+0xf31c>
   23ed0:	ldr	r2, [r5, #100]	; 0x64
   23ed4:	ldr	r3, [sp, #20]
   23ed8:	str	r0, [r6, r3, lsl #2]
   23edc:	ldr	r2, [r2, r3, lsl #2]
   23ee0:	cmp	r2, #0
   23ee4:	bne	23dfc <__assert_fail@plt+0x12ba0>
   23ee8:	ldr	r2, [sp, #52]	; 0x34
   23eec:	cmp	r2, #0
   23ef0:	beq	23dfc <__assert_fail@plt+0x12ba0>
   23ef4:	ldr	r0, [sp, #76]	; 0x4c
   23ef8:	bl	13098 <__assert_fail@plt+0x1e3c>
   23efc:	ldr	r3, [sp, #52]	; 0x34
   23f00:	cmp	r3, #0
   23f04:	str	r3, [sp, #48]	; 0x30
   23f08:	bne	240c8 <__assert_fail@plt+0x12e6c>
   23f0c:	ldr	r3, [sp, #60]	; 0x3c
   23f10:	ldr	r4, [sp, #8]
   23f14:	cmp	r3, #0
   23f18:	beq	23f64 <__assert_fail@plt+0x12d08>
   23f1c:	ldr	r3, [sp, #128]	; 0x80
   23f20:	ldr	r2, [sp, #32]
   23f24:	mov	r1, fp
   23f28:	ldr	r0, [sp, #28]
   23f2c:	bl	20ec0 <__assert_fail@plt+0xfc64>
   23f30:	cmp	r0, #0
   23f34:	str	r0, [sp, #48]	; 0x30
   23f38:	bne	240c8 <__assert_fail@plt+0x12e6c>
   23f3c:	ldr	r3, [sp, #128]	; 0x80
   23f40:	ldr	r2, [sp, #8]
   23f44:	str	r3, [sp]
   23f48:	mov	r1, fp
   23f4c:	ldr	r3, [sp, #32]
   23f50:	mov	r0, r5
   23f54:	bl	20ff4 <__assert_fail@plt+0xfd98>
   23f58:	cmp	r0, #0
   23f5c:	str	r0, [sp, #48]	; 0x30
   23f60:	bne	240c8 <__assert_fail@plt+0x12e6c>
   23f64:	ldr	r2, [r5, #88]	; 0x58
   23f68:	mov	r1, sl
   23f6c:	mov	r0, r5
   23f70:	bl	21d9c <__assert_fail@plt+0x10b40>
   23f74:	mov	r2, fp
   23f78:	ldr	r1, [sp, #28]
   23f7c:	mov	r3, r0
   23f80:	add	r0, sp, #48	; 0x30
   23f84:	bl	2024c <__assert_fail@plt+0xeff0>
   23f88:	subs	r8, r0, #0
   23f8c:	beq	24110 <__assert_fail@plt+0x12eb4>
   23f90:	mov	r2, #0
   23f94:	str	r2, [sp, #24]
   23f98:	ldr	r3, [r5, #100]	; 0x64
   23f9c:	ldr	r2, [sp, #12]
   23fa0:	str	r8, [r3, r2]
   23fa4:	ldr	r0, [sp, #124]	; 0x7c
   23fa8:	ldr	r1, [sp, #8]
   23fac:	cmp	r0, r1
   23fb0:	ble	23fd8 <__assert_fail@plt+0x12d7c>
   23fb4:	ldr	r0, [sp, #12]
   23fb8:	ldr	r2, [r5, #120]	; 0x78
   23fbc:	add	r0, r0, #4
   23fc0:	str	r0, [sp, #12]
   23fc4:	ldr	r0, [sp, #24]
   23fc8:	cmp	r0, r2
   23fcc:	add	r2, r1, #1
   23fd0:	str	r2, [sp, #8]
   23fd4:	ble	23d58 <__assert_fail@plt+0x12afc>
   23fd8:	ldr	r0, [sp, #64]	; 0x40
   23fdc:	bl	13098 <__assert_fail@plt+0x1e3c>
   23fe0:	ldr	r3, [r5, #100]	; 0x64
   23fe4:	ldr	r2, [sp, #124]	; 0x7c
   23fe8:	ldr	r3, [r3, r2, lsl #2]
   23fec:	cmp	r3, #0
   23ff0:	beq	241e0 <__assert_fail@plt+0x12f84>
   23ff4:	ldr	r2, [sp, #36]	; 0x24
   23ff8:	add	r1, r3, #12
   23ffc:	str	r4, [r2]
   24000:	ldr	r2, [sp, #44]	; 0x2c
   24004:	str	r2, [r5, #40]	; 0x28
   24008:	ldr	r2, [sp, #40]	; 0x28
   2400c:	ldr	r0, [r3, #8]
   24010:	str	r2, [r5, #100]	; 0x64
   24014:	ldr	r2, [sp, #120]	; 0x78
   24018:	bl	1f57c <__assert_fail@plt+0xe320>
   2401c:	clz	r0, r0
   24020:	lsr	r0, r0, #5
   24024:	add	sp, sp, #84	; 0x54
   24028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2402c:	ldr	r3, [sp, #36]	; 0x24
   24030:	ldr	r2, [r5, #100]	; 0x64
   24034:	sub	r1, r6, #1
   24038:	ldr	r3, [r3, #8]
   2403c:	str	r2, [sp, #40]	; 0x28
   24040:	ldr	r2, [r5, #40]	; 0x28
   24044:	str	r3, [r5, #100]	; 0x64
   24048:	str	r2, [sp, #44]	; 0x2c
   2404c:	str	r6, [r5, #40]	; 0x28
   24050:	ldr	r2, [r5, #88]	; 0x58
   24054:	mov	r0, r5
   24058:	bl	21d9c <__assert_fail@plt+0x10b40>
   2405c:	mov	r7, r0
   24060:	mov	r3, #1
   24064:	mov	r0, #4
   24068:	str	r3, [sp, #56]	; 0x38
   2406c:	str	r3, [sp, #60]	; 0x3c
   24070:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   24074:	cmp	r0, #0
   24078:	str	r0, [sp, #64]	; 0x40
   2407c:	beq	241d0 <__assert_fail@plt+0x12f74>
   24080:	add	fp, sp, #56	; 0x38
   24084:	mov	ip, #0
   24088:	str	r8, [r0]
   2408c:	mov	r1, fp
   24090:	ldr	r3, [sp, #128]	; 0x80
   24094:	ldr	r2, [sp, #32]
   24098:	ldr	r0, [sp, #28]
   2409c:	str	ip, [sp, #48]	; 0x30
   240a0:	bl	20ec0 <__assert_fail@plt+0xfc64>
   240a4:	cmp	r0, #0
   240a8:	str	r0, [sp, #48]	; 0x30
   240ac:	moveq	r4, r6
   240b0:	beq	23ccc <__assert_fail@plt+0x12a70>
   240b4:	b	240c8 <__assert_fail@plt+0x12e6c>
   240b8:	ldr	r0, [sp, #76]	; 0x4c
   240bc:	bl	13098 <__assert_fail@plt+0x1e3c>
   240c0:	mov	r3, #12
   240c4:	str	r3, [sp, #48]	; 0x30
   240c8:	ldr	r0, [sp, #64]	; 0x40
   240cc:	bl	13098 <__assert_fail@plt+0x1e3c>
   240d0:	ldr	r0, [sp, #48]	; 0x30
   240d4:	add	sp, sp, #84	; 0x54
   240d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   240dc:	cmp	r0, #0
   240e0:	bne	23df8 <__assert_fail@plt+0x12b9c>
   240e4:	ldr	r0, [r9]
   240e8:	b	23de0 <__assert_fail@plt+0x12b84>
   240ec:	cmp	r8, #0
   240f0:	bne	23d98 <__assert_fail@plt+0x12b3c>
   240f4:	ldr	r4, [sp, #8]
   240f8:	b	23f64 <__assert_fail@plt+0x12d08>
   240fc:	ldr	r0, [sp, #76]	; 0x4c
   24100:	bl	13098 <__assert_fail@plt+0x1e3c>
   24104:	mov	r3, #0
   24108:	str	r3, [sp, #48]	; 0x30
   2410c:	b	23f0c <__assert_fail@plt+0x12cb0>
   24110:	ldr	r3, [sp, #48]	; 0x30
   24114:	cmp	r3, #0
   24118:	bne	240c8 <__assert_fail@plt+0x12e6c>
   2411c:	ldr	r2, [sp, #24]
   24120:	ldr	r3, [r5, #100]	; 0x64
   24124:	add	r2, r2, #1
   24128:	str	r2, [sp, #24]
   2412c:	ldr	r2, [sp, #12]
   24130:	str	r8, [r3, r2]
   24134:	b	23fa4 <__assert_fail@plt+0x12d48>
   24138:	mov	r0, fp
   2413c:	add	r1, r8, #4
   24140:	bl	20088 <__assert_fail@plt+0xee2c>
   24144:	cmp	r0, #0
   24148:	str	r0, [sp, #48]	; 0x30
   2414c:	bne	240d4 <__assert_fail@plt+0x12e78>
   24150:	ldrb	r3, [r8, #52]	; 0x34
   24154:	b	23cc4 <__assert_fail@plt+0x12a68>
   24158:	mvn	r3, #-2147483648	; 0x80000000
   2415c:	add	r9, r2, #1
   24160:	sub	r3, r3, r4
   24164:	cmp	r9, r3
   24168:	bgt	241d0 <__assert_fail@plt+0x12f74>
   2416c:	add	sl, r4, r9
   24170:	cmn	sl, #-1073741823	; 0xc0000001
   24174:	bhi	241d0 <__assert_fail@plt+0x12f74>
   24178:	ldr	fp, [sp, #36]	; 0x24
   2417c:	lsl	r1, sl, #2
   24180:	ldr	r0, [fp, #8]
   24184:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   24188:	cmp	r0, #0
   2418c:	beq	241d0 <__assert_fail@plt+0x12f74>
   24190:	str	r0, [fp, #8]
   24194:	str	sl, [fp, #4]
   24198:	lsl	r2, r9, #2
   2419c:	mov	r1, r7
   241a0:	add	r0, r0, r4, lsl #2
   241a4:	bl	1119c <memset@plt>
   241a8:	b	23c54 <__assert_fail@plt+0x129f8>
   241ac:	add	fp, sp, #56	; 0x38
   241b0:	str	r8, [sp, #56]	; 0x38
   241b4:	str	r8, [fp, #4]
   241b8:	str	r8, [fp, #8]
   241bc:	b	23d24 <__assert_fail@plt+0x12ac8>
   241c0:	ldr	r3, [sp, #48]	; 0x30
   241c4:	cmp	r3, #0
   241c8:	beq	23d1c <__assert_fail@plt+0x12ac0>
   241cc:	b	240c8 <__assert_fail@plt+0x12e6c>
   241d0:	mov	r0, #12
   241d4:	b	240d4 <__assert_fail@plt+0x12e78>
   241d8:	mov	r0, #0
   241dc:	b	24100 <__assert_fail@plt+0x12ea4>
   241e0:	ldr	r3, [sp, #36]	; 0x24
   241e4:	mov	r0, #1
   241e8:	str	r4, [r3]
   241ec:	ldr	r3, [sp, #40]	; 0x28
   241f0:	str	r3, [r5, #100]	; 0x64
   241f4:	ldr	r3, [sp, #44]	; 0x2c
   241f8:	str	r3, [r5, #40]	; 0x28
   241fc:	b	240d4 <__assert_fail@plt+0x12e78>
   24200:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24204:	sub	sp, sp, #20
   24208:	mov	ip, r2
   2420c:	ldr	r5, [sp, #56]	; 0x38
   24210:	ldr	r4, [r2, #4]
   24214:	mov	lr, #8
   24218:	mov	r6, r2
   2421c:	ldr	r2, [ip], #8
   24220:	mov	r7, r3
   24224:	str	r3, [sp]
   24228:	mov	r8, r1
   2422c:	mov	r3, r4
   24230:	mov	r1, ip
   24234:	stmib	sp, {r5, lr}
   24238:	mov	r4, r0
   2423c:	bl	23c04 <__assert_fail@plt+0x129a8>
   24240:	subs	fp, r0, #0
   24244:	beq	24254 <__assert_fail@plt+0x12ff8>
   24248:	mov	r0, fp
   2424c:	add	sp, sp, #20
   24250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24254:	ldr	r3, [r4, #108]	; 0x6c
   24258:	ldr	r1, [r4, #112]	; 0x70
   2425c:	ldr	r9, [r6, #4]
   24260:	cmp	r3, r1
   24264:	ldr	sl, [r8]
   24268:	movlt	lr, r9
   2426c:	bge	242f8 <__assert_fail@plt+0x1309c>
   24270:	add	r2, r3, r3, lsl #1
   24274:	cmp	r3, #0
   24278:	ldr	ip, [r4, #116]	; 0x74
   2427c:	lsl	r2, r2, #3
   24280:	ble	2429c <__assert_fail@plt+0x13040>
   24284:	sub	r0, r2, #24
   24288:	add	r0, ip, r0
   2428c:	ldr	r1, [r0, #4]
   24290:	cmp	r5, r1
   24294:	moveq	r1, #1
   24298:	strbeq	r1, [r0, #20]
   2429c:	add	r0, ip, r2
   242a0:	cmp	sl, r9
   242a4:	str	r7, [ip, r2]
   242a8:	movne	r1, #0
   242ac:	mvneq	r1, #0
   242b0:	add	r3, r3, #1
   242b4:	mov	r2, #0
   242b8:	stmib	r0, {r5, sl}
   242bc:	str	r9, [r0, #12]
   242c0:	str	r1, [r0, #16]
   242c4:	str	r3, [r4, #108]	; 0x6c
   242c8:	strb	r2, [r0, #20]
   242cc:	ldr	r3, [r4, #120]	; 0x78
   242d0:	sub	r9, r9, sl
   242d4:	cmp	r3, r9
   242d8:	strlt	r9, [r4, #120]	; 0x78
   242dc:	ldr	r1, [r8]
   242e0:	add	r5, r5, lr
   242e4:	sub	r1, r5, r1
   242e8:	mov	r0, r4
   242ec:	add	sp, sp, #20
   242f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   242f4:	b	1f3c4 <__assert_fail@plt+0xe168>
   242f8:	add	r1, r1, r1, lsl #1
   242fc:	ldr	r0, [r4, #116]	; 0x74
   24300:	lsl	r1, r1, #4
   24304:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   24308:	cmp	r0, #0
   2430c:	beq	2434c <__assert_fail@plt+0x130f0>
   24310:	ldr	r2, [r4, #112]	; 0x70
   24314:	ldr	r3, [r4, #108]	; 0x6c
   24318:	str	r0, [r4, #116]	; 0x74
   2431c:	add	r2, r2, r2, lsl #1
   24320:	add	r3, r3, r3, lsl #1
   24324:	lsl	r2, r2, #3
   24328:	add	r0, r0, r3, lsl #3
   2432c:	mov	r1, fp
   24330:	bl	1119c <memset@plt>
   24334:	ldr	r2, [r4, #112]	; 0x70
   24338:	ldr	lr, [r6, #4]
   2433c:	ldr	r3, [r4, #108]	; 0x6c
   24340:	lsl	r2, r2, #1
   24344:	str	r2, [r4, #112]	; 0x70
   24348:	b	24270 <__assert_fail@plt+0x13014>
   2434c:	ldr	r0, [r4, #116]	; 0x74
   24350:	bl	13098 <__assert_fail@plt+0x1e3c>
   24354:	mov	fp, #12
   24358:	b	24248 <__assert_fail@plt+0x12fec>
   2435c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24360:	sub	sp, sp, #92	; 0x5c
   24364:	ldr	r6, [r1]
   24368:	ldr	r3, [r0, #84]	; 0x54
   2436c:	cmp	r6, #0
   24370:	str	r3, [sp, #32]
   24374:	ldr	sl, [r0, #40]	; 0x28
   24378:	ble	248a0 <__assert_fail@plt+0x13644>
   2437c:	mov	r3, #0
   24380:	str	r3, [sp, #20]
   24384:	lsl	r3, sl, #2
   24388:	str	r2, [sp, #36]	; 0x24
   2438c:	mov	fp, r0
   24390:	str	r1, [sp, #60]	; 0x3c
   24394:	str	r3, [sp, #48]	; 0x30
   24398:	b	243b0 <__assert_fail@plt+0x13154>
   2439c:	ldr	r3, [sp, #20]
   243a0:	add	r3, r3, #1
   243a4:	cmp	r3, r6
   243a8:	str	r3, [sp, #20]
   243ac:	bge	248a0 <__assert_fail@plt+0x13644>
   243b0:	ldr	r3, [sp, #36]	; 0x24
   243b4:	ldr	r1, [sp, #20]
   243b8:	ldr	r2, [r3]
   243bc:	ldr	r3, [sp, #32]
   243c0:	ldr	r9, [r2, r1, lsl #2]
   243c4:	ldr	r3, [r3]
   243c8:	add	r3, r3, r9, lsl #3
   243cc:	ldrb	r2, [r3, #4]
   243d0:	cmp	r2, #4
   243d4:	bne	2439c <__assert_fail@plt+0x13140>
   243d8:	ldr	r4, [r3, #4]
   243dc:	ldr	r3, [pc, #1804]	; 24af0 <__assert_fail@plt+0x13894>
   243e0:	tst	r4, r3
   243e4:	beq	24438 <__assert_fail@plt+0x131dc>
   243e8:	ldr	r2, [fp, #88]	; 0x58
   243ec:	mov	r1, sl
   243f0:	mov	r0, fp
   243f4:	bl	21d9c <__assert_fail@plt+0x10b40>
   243f8:	ldr	r3, [pc, #1780]	; 24af4 <__assert_fail@plt+0x13898>
   243fc:	and	r4, r3, r4, lsr #8
   24400:	tst	r4, #4
   24404:	beq	24698 <__assert_fail@plt+0x1343c>
   24408:	tst	r0, #1
   2440c:	beq	2439c <__assert_fail@plt+0x13140>
   24410:	tst	r4, #8
   24414:	bne	2439c <__assert_fail@plt+0x13140>
   24418:	tst	r4, #32
   2441c:	beq	24428 <__assert_fail@plt+0x131cc>
   24420:	tst	r0, #2
   24424:	beq	2439c <__assert_fail@plt+0x13140>
   24428:	tst	r4, #128	; 0x80
   2442c:	beq	24438 <__assert_fail@plt+0x131dc>
   24430:	tst	r0, #8
   24434:	beq	2439c <__assert_fail@plt+0x13140>
   24438:	ldr	ip, [fp, #108]	; 0x6c
   2443c:	mov	r0, #0
   24440:	mov	r5, ip
   24444:	mov	r3, ip
   24448:	cmp	r0, r3
   2444c:	bge	244a8 <__assert_fail@plt+0x1324c>
   24450:	add	r2, r0, r3
   24454:	ldr	lr, [fp, #116]	; 0x74
   24458:	add	r2, r2, r2, lsr #31
   2445c:	asr	r2, r2, #1
   24460:	add	r1, r2, r2, lsl #1
   24464:	add	r1, lr, r1, lsl #3
   24468:	ldr	r1, [r1, #4]
   2446c:	cmp	sl, r1
   24470:	ble	24498 <__assert_fail@plt+0x1323c>
   24474:	b	24684 <__assert_fail@plt+0x13428>
   24478:	asr	r3, r3, #1
   2447c:	mov	r4, r3
   24480:	add	r1, r3, r3, lsl #1
   24484:	add	r1, lr, r1, lsl #3
   24488:	ldr	r1, [r1, #4]
   2448c:	cmp	sl, r1
   24490:	bgt	2468c <__assert_fail@plt+0x13430>
   24494:	mov	r2, r3
   24498:	add	r3, r2, r0
   2449c:	cmp	r2, r0
   244a0:	add	r3, r3, r3, lsr #31
   244a4:	bgt	24478 <__assert_fail@plt+0x1321c>
   244a8:	cmp	ip, r0
   244ac:	ble	246ac <__assert_fail@plt+0x13450>
   244b0:	add	r2, r0, r0, lsl #1
   244b4:	ldr	r3, [fp, #116]	; 0x74
   244b8:	cmn	r0, #1
   244bc:	add	r3, r3, r2, lsl #3
   244c0:	ldr	r2, [r3, #4]
   244c4:	sub	r2, r2, sl
   244c8:	clz	r2, r2
   244cc:	lsr	r2, r2, #5
   244d0:	moveq	r2, #0
   244d4:	cmp	r2, #0
   244d8:	beq	246ac <__assert_fail@plt+0x13450>
   244dc:	add	r3, r3, #24
   244e0:	b	244f0 <__assert_fail@plt+0x13294>
   244e4:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   244e8:	cmp	r2, #0
   244ec:	beq	246ac <__assert_fail@plt+0x13450>
   244f0:	ldr	r2, [r3, #-24]	; 0xffffffe8
   244f4:	add	r3, r3, #24
   244f8:	cmp	r9, r2
   244fc:	bne	244e4 <__assert_fail@plt+0x13288>
   24500:	mov	r3, #0
   24504:	str	r3, [sp, #72]	; 0x48
   24508:	cmp	r5, ip
   2450c:	lsl	r3, r9, #2
   24510:	str	r3, [sp, #52]	; 0x34
   24514:	bge	24678 <__assert_fail@plt+0x1341c>
   24518:	add	r3, r9, r9, lsl #1
   2451c:	add	r4, r5, r5, lsl #1
   24520:	lsl	r3, r3, #2
   24524:	str	r3, [sp, #56]	; 0x38
   24528:	lsl	r4, r4, #3
   2452c:	ldr	r7, [sp, #32]
   24530:	b	24544 <__assert_fail@plt+0x132e8>
   24534:	add	r5, r5, #1
   24538:	cmp	r5, ip
   2453c:	add	r4, r4, #24
   24540:	bge	24678 <__assert_fail@plt+0x1341c>
   24544:	ldr	r3, [fp, #116]	; 0x74
   24548:	add	r2, r3, r4
   2454c:	ldr	r3, [r3, r4]
   24550:	cmp	r9, r3
   24554:	bne	24534 <__assert_fail@plt+0x132d8>
   24558:	ldr	r3, [r2, #4]
   2455c:	cmp	sl, r3
   24560:	bne	24534 <__assert_fail@plt+0x132d8>
   24564:	ldr	r3, [r2, #12]
   24568:	ldr	r6, [r2, #8]
   2456c:	subs	r2, r3, r6
   24570:	str	r2, [sp, #28]
   24574:	ldreq	r0, [sp, #56]	; 0x38
   24578:	ldreq	r2, [r7, #20]
   2457c:	ldrne	r2, [r7, #12]
   24580:	addeq	r2, r2, r0
   24584:	ldrne	r0, [sp, #52]	; 0x34
   24588:	ldreq	r2, [r2, #8]
   2458c:	ldreq	r1, [r7, #24]
   24590:	ldrne	r2, [r2, r0]
   24594:	ldreq	r2, [r2]
   24598:	ldrne	r1, [r7, #24]
   2459c:	add	r3, sl, r3
   245a0:	add	r2, r2, r2, lsl #1
   245a4:	sub	r6, r3, r6
   245a8:	add	r2, r1, r2, lsl #2
   245ac:	str	r2, [sp, #24]
   245b0:	sub	r1, r6, #1
   245b4:	ldr	r2, [fp, #88]	; 0x58
   245b8:	mov	r0, fp
   245bc:	bl	21d9c <__assert_fail@plt+0x10b40>
   245c0:	ldr	r8, [fp, #100]	; 0x64
   245c4:	ldr	r2, [sp, #48]	; 0x30
   245c8:	ldr	r1, [r8, r2]
   245cc:	ldr	r2, [r8, r6, lsl #2]
   245d0:	cmp	r1, #0
   245d4:	moveq	r1, #0
   245d8:	ldrne	r1, [r1, #8]
   245dc:	cmp	r2, #0
   245e0:	str	r1, [sp, #44]	; 0x2c
   245e4:	mov	r3, r0
   245e8:	beq	2480c <__assert_fail@plt+0x135b0>
   245ec:	str	r0, [sp, #40]	; 0x28
   245f0:	ldr	r1, [r2, #40]	; 0x28
   245f4:	add	r0, sp, #76	; 0x4c
   245f8:	ldr	r2, [sp, #24]
   245fc:	bl	20100 <__assert_fail@plt+0xeea4>
   24600:	ldr	r3, [sp, #40]	; 0x28
   24604:	cmp	r0, #0
   24608:	str	r0, [sp, #72]	; 0x48
   2460c:	bne	2488c <__assert_fail@plt+0x13630>
   24610:	add	r2, sp, #76	; 0x4c
   24614:	mov	r1, r7
   24618:	add	r0, sp, #72	; 0x48
   2461c:	ldr	r8, [fp, #100]	; 0x64
   24620:	bl	2024c <__assert_fail@plt+0xeff0>
   24624:	str	r0, [r8, r6, lsl #2]
   24628:	ldr	r0, [sp, #84]	; 0x54
   2462c:	bl	13098 <__assert_fail@plt+0x1e3c>
   24630:	ldr	r3, [fp, #100]	; 0x64
   24634:	ldr	r2, [r3, r6, lsl #2]
   24638:	cmp	r2, #0
   2463c:	beq	24830 <__assert_fail@plt+0x135d4>
   24640:	ldr	r2, [sp, #28]
   24644:	cmp	r2, #0
   24648:	bne	24664 <__assert_fail@plt+0x13408>
   2464c:	ldr	r2, [sp, #48]	; 0x30
   24650:	ldr	r3, [r3, r2]
   24654:	ldr	r2, [sp, #44]	; 0x2c
   24658:	ldr	r3, [r3, #8]
   2465c:	cmp	r3, r2
   24660:	bgt	24840 <__assert_fail@plt+0x135e4>
   24664:	ldr	ip, [fp, #108]	; 0x6c
   24668:	add	r5, r5, #1
   2466c:	cmp	r5, ip
   24670:	add	r4, r4, #24
   24674:	blt	24544 <__assert_fail@plt+0x132e8>
   24678:	ldr	r3, [sp, #60]	; 0x3c
   2467c:	ldr	r6, [r3]
   24680:	b	2439c <__assert_fail@plt+0x13140>
   24684:	mov	r4, r2
   24688:	mov	r2, r3
   2468c:	add	r0, r4, #1
   24690:	mov	r3, r2
   24694:	b	24448 <__assert_fail@plt+0x131ec>
   24698:	tst	r4, #8
   2469c:	beq	24418 <__assert_fail@plt+0x131bc>
   246a0:	tst	r0, #1
   246a4:	beq	24418 <__assert_fail@plt+0x131bc>
   246a8:	b	2439c <__assert_fail@plt+0x13140>
   246ac:	ldr	r3, [fp, #84]	; 0x54
   246b0:	ldr	r1, [fp, #124]	; 0x7c
   246b4:	str	r3, [sp, #56]	; 0x38
   246b8:	ldr	r3, [r3]
   246bc:	cmp	r1, #0
   246c0:	ldr	r2, [r3, r9, lsl #3]
   246c4:	str	r2, [sp, #52]	; 0x34
   246c8:	ble	24500 <__assert_fail@plt+0x132a4>
   246cc:	ldr	r2, [fp, #4]
   246d0:	str	r9, [sp, #44]	; 0x2c
   246d4:	mov	r9, r2
   246d8:	mov	r0, #0
   246dc:	str	r0, [sp, #40]	; 0x28
   246e0:	str	sl, [sp, #28]
   246e4:	str	r5, [sp, #68]	; 0x44
   246e8:	ldr	r2, [fp, #132]	; 0x84
   246ec:	ldr	r0, [sp, #40]	; 0x28
   246f0:	ldr	r4, [r2, r0, lsl #2]
   246f4:	ldr	r2, [r4, #4]
   246f8:	ldr	r3, [r3, r2, lsl #3]
   246fc:	ldr	r2, [sp, #52]	; 0x34
   24700:	cmp	r2, r3
   24704:	beq	24728 <__assert_fail@plt+0x134cc>
   24708:	ldr	r3, [sp, #40]	; 0x28
   2470c:	add	r3, r3, #1
   24710:	cmp	r3, r1
   24714:	str	r3, [sp, #40]	; 0x28
   24718:	bge	24a9c <__assert_fail@plt+0x13840>
   2471c:	ldr	r3, [sp, #56]	; 0x38
   24720:	ldr	r3, [r3]
   24724:	b	246e8 <__assert_fail@plt+0x1348c>
   24728:	ldr	ip, [r4, #16]
   2472c:	ldr	r6, [r4]
   24730:	cmp	ip, #0
   24734:	ble	24ae0 <__assert_fail@plt+0x13884>
   24738:	ldr	r8, [sp, #28]
   2473c:	mov	r5, #0
   24740:	mov	r3, r6
   24744:	b	2475c <__assert_fail@plt+0x13500>
   24748:	ldr	ip, [r4, #16]
   2474c:	mov	r3, r6
   24750:	cmp	r5, ip
   24754:	mov	r8, r7
   24758:	bge	248ac <__assert_fail@plt+0x13650>
   2475c:	ldr	r2, [r4, #20]
   24760:	ldr	sl, [r2, r5, lsl #2]
   24764:	ldr	r6, [sl, #4]
   24768:	sub	r2, r6, r3
   2476c:	cmp	r2, #0
   24770:	add	r7, r2, r8
   24774:	ble	247a0 <__assert_fail@plt+0x13544>
   24778:	ldr	r1, [fp, #28]
   2477c:	cmp	r7, r1
   24780:	bgt	247d4 <__assert_fail@plt+0x13578>
   24784:	add	r1, r9, r3
   24788:	add	r0, r9, r8
   2478c:	str	r3, [sp, #24]
   24790:	bl	11034 <memcmp@plt>
   24794:	ldr	r3, [sp, #24]
   24798:	cmp	r0, #0
   2479c:	bne	24a20 <__assert_fail@plt+0x137c4>
   247a0:	ldr	r3, [sp, #28]
   247a4:	mov	r2, sl
   247a8:	str	r3, [sp]
   247ac:	mov	r1, r4
   247b0:	ldr	r3, [sp, #44]	; 0x2c
   247b4:	mov	r0, fp
   247b8:	bl	24200 <__assert_fail@plt+0x12fa4>
   247bc:	add	r5, r5, #1
   247c0:	ldr	r9, [fp, #4]
   247c4:	cmp	r0, #1
   247c8:	bls	24748 <__assert_fail@plt+0x134ec>
   247cc:	add	sp, sp, #92	; 0x5c
   247d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   247d4:	ldr	lr, [fp, #48]	; 0x30
   247d8:	str	r2, [sp, #64]	; 0x40
   247dc:	cmp	r7, lr
   247e0:	mov	r1, r7
   247e4:	mov	r0, fp
   247e8:	bgt	24ae8 <__assert_fail@plt+0x1388c>
   247ec:	str	r3, [sp, #24]
   247f0:	bl	1f3c4 <__assert_fail@plt+0xe168>
   247f4:	cmp	r0, #0
   247f8:	bne	247cc <__assert_fail@plt+0x13570>
   247fc:	ldr	r9, [fp, #4]
   24800:	ldr	r2, [sp, #64]	; 0x40
   24804:	ldr	r3, [sp, #24]
   24808:	b	24784 <__assert_fail@plt+0x13528>
   2480c:	ldr	r2, [sp, #24]
   24810:	mov	r1, r7
   24814:	add	r0, sp, #72	; 0x48
   24818:	bl	2024c <__assert_fail@plt+0xeff0>
   2481c:	ldr	r3, [fp, #100]	; 0x64
   24820:	str	r0, [r8, r6, lsl #2]
   24824:	ldr	r2, [r3, r6, lsl #2]
   24828:	cmp	r2, #0
   2482c:	bne	24640 <__assert_fail@plt+0x133e4>
   24830:	ldr	r0, [sp, #72]	; 0x48
   24834:	cmp	r0, #0
   24838:	beq	24640 <__assert_fail@plt+0x133e4>
   2483c:	b	247cc <__assert_fail@plt+0x13570>
   24840:	ldr	r3, [sp, #24]
   24844:	mov	r0, fp
   24848:	add	r6, r3, #4
   2484c:	add	r8, r3, #8
   24850:	mov	r2, r8
   24854:	mov	r1, r6
   24858:	mov	r3, sl
   2485c:	bl	2286c <__assert_fail@plt+0x11610>
   24860:	cmp	r0, #0
   24864:	str	r0, [sp, #72]	; 0x48
   24868:	bne	247cc <__assert_fail@plt+0x13570>
   2486c:	mov	r2, r8
   24870:	mov	r1, r6
   24874:	mov	r0, fp
   24878:	bl	2435c <__assert_fail@plt+0x13100>
   2487c:	cmp	r0, #0
   24880:	str	r0, [sp, #72]	; 0x48
   24884:	beq	24664 <__assert_fail@plt+0x13408>
   24888:	b	247cc <__assert_fail@plt+0x13570>
   2488c:	ldr	r0, [sp, #84]	; 0x54
   24890:	bl	13098 <__assert_fail@plt+0x1e3c>
   24894:	ldr	r0, [sp, #72]	; 0x48
   24898:	add	sp, sp, #92	; 0x5c
   2489c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   248a0:	mov	r0, #0
   248a4:	add	sp, sp, #92	; 0x5c
   248a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   248ac:	mov	sl, r6
   248b0:	add	r6, sl, #1
   248b4:	ldr	r3, [sp, #28]
   248b8:	cmp	r3, r6
   248bc:	blt	24a18 <__assert_fail@plt+0x137bc>
   248c0:	ldr	sl, [sp, #52]	; 0x34
   248c4:	lsl	r8, r6, #2
   248c8:	ldr	r3, [r4]
   248cc:	sub	r3, r6, r3
   248d0:	cmp	r3, #0
   248d4:	ble	24900 <__assert_fail@plt+0x136a4>
   248d8:	ldr	r3, [fp, #28]
   248dc:	cmp	r3, r7
   248e0:	ble	24a70 <__assert_fail@plt+0x13814>
   248e4:	add	r5, r7, #1
   248e8:	add	r3, r9, r6
   248ec:	ldrb	r2, [r9, r7]
   248f0:	ldrb	r3, [r3, #-1]
   248f4:	cmp	r2, r3
   248f8:	bne	24a18 <__assert_fail@plt+0x137bc>
   248fc:	mov	r7, r5
   24900:	ldr	r3, [fp, #100]	; 0x64
   24904:	ldr	r3, [r3, r8]
   24908:	cmp	r3, #0
   2490c:	beq	24a04 <__assert_fail@plt+0x137a8>
   24910:	ldr	ip, [r3, #8]
   24914:	cmp	ip, #0
   24918:	ble	24a04 <__assert_fail@plt+0x137a8>
   2491c:	ldr	r2, [r3, #12]
   24920:	ldr	r3, [sp, #56]	; 0x38
   24924:	sub	r2, r2, #4
   24928:	ldr	r0, [r3]
   2492c:	mov	r3, #0
   24930:	b	2493c <__assert_fail@plt+0x136e0>
   24934:	cmp	ip, r3
   24938:	beq	24a04 <__assert_fail@plt+0x137a8>
   2493c:	ldr	r5, [r2, #4]!
   24940:	add	r3, r3, #1
   24944:	add	r1, r0, r5, lsl #3
   24948:	ldrb	r1, [r1, #4]
   2494c:	cmp	r1, #9
   24950:	bne	24934 <__assert_fail@plt+0x136d8>
   24954:	ldr	r1, [r0, r5, lsl #3]
   24958:	cmp	sl, r1
   2495c:	bne	24934 <__assert_fail@plt+0x136d8>
   24960:	cmn	r5, #1
   24964:	beq	24a04 <__assert_fail@plt+0x137a8>
   24968:	ldr	r1, [r4, #8]
   2496c:	cmp	r1, #0
   24970:	beq	24a48 <__assert_fail@plt+0x137ec>
   24974:	mov	r0, #9
   24978:	ldr	r3, [r4]
   2497c:	ldr	r2, [r4, #4]
   24980:	str	r0, [sp, #8]
   24984:	stm	sp, {r5, r6}
   24988:	mov	r0, fp
   2498c:	bl	23c04 <__assert_fail@plt+0x129a8>
   24990:	cmp	r0, #1
   24994:	beq	24a04 <__assert_fail@plt+0x137a8>
   24998:	cmp	r0, #0
   2499c:	bne	247cc <__assert_fail@plt+0x13570>
   249a0:	ldr	r3, [r4, #16]
   249a4:	ldr	r2, [r4, #12]
   249a8:	cmp	r3, r2
   249ac:	beq	24ab8 <__assert_fail@plt+0x1385c>
   249b0:	mov	r1, #20
   249b4:	mov	r0, #1
   249b8:	bl	2bc8c <__assert_fail@plt+0x1aa30>
   249bc:	cmp	r0, #0
   249c0:	beq	24ab0 <__assert_fail@plt+0x13854>
   249c4:	ldr	r3, [r4, #16]
   249c8:	ldr	r2, [r4, #20]
   249cc:	add	r1, r3, #1
   249d0:	str	r0, [r2, r3, lsl #2]
   249d4:	stm	r0, {r5, r6}
   249d8:	mov	r2, r0
   249dc:	ldr	r0, [sp, #28]
   249e0:	str	r1, [r4, #16]
   249e4:	ldr	r3, [sp, #44]	; 0x2c
   249e8:	str	r0, [sp]
   249ec:	mov	r1, r4
   249f0:	mov	r0, fp
   249f4:	bl	24200 <__assert_fail@plt+0x12fa4>
   249f8:	ldr	r9, [fp, #4]
   249fc:	cmp	r0, #1
   24a00:	bhi	247cc <__assert_fail@plt+0x13570>
   24a04:	ldr	r3, [sp, #28]
   24a08:	add	r6, r6, #1
   24a0c:	cmp	r3, r6
   24a10:	add	r8, r8, #4
   24a14:	bge	248c8 <__assert_fail@plt+0x1366c>
   24a18:	ldr	r1, [fp, #124]	; 0x7c
   24a1c:	b	24708 <__assert_fail@plt+0x134ac>
   24a20:	ldr	ip, [r4, #16]
   24a24:	mov	r6, r3
   24a28:	cmp	ip, r5
   24a2c:	bgt	24a18 <__assert_fail@plt+0x137bc>
   24a30:	cmp	r5, #0
   24a34:	movle	r7, r8
   24a38:	ble	248b4 <__assert_fail@plt+0x13658>
   24a3c:	mov	sl, r6
   24a40:	mov	r7, r8
   24a44:	b	248b0 <__assert_fail@plt+0x13654>
   24a48:	ldr	r1, [r4]
   24a4c:	mov	r0, #12
   24a50:	sub	r1, r6, r1
   24a54:	add	r1, r1, #1
   24a58:	bl	2bc8c <__assert_fail@plt+0x1aa30>
   24a5c:	cmp	r0, #0
   24a60:	str	r0, [r4, #8]
   24a64:	beq	24ab0 <__assert_fail@plt+0x13854>
   24a68:	mov	r1, r0
   24a6c:	b	24974 <__assert_fail@plt+0x13718>
   24a70:	ldr	r3, [fp, #48]	; 0x30
   24a74:	cmp	r3, r7
   24a78:	ble	24a18 <__assert_fail@plt+0x137bc>
   24a7c:	add	r5, r7, #1
   24a80:	mov	r1, r5
   24a84:	mov	r0, fp
   24a88:	bl	1e910 <__assert_fail@plt+0xd6b4>
   24a8c:	cmp	r0, #0
   24a90:	bne	247cc <__assert_fail@plt+0x13570>
   24a94:	ldr	r9, [fp, #4]
   24a98:	b	248e8 <__assert_fail@plt+0x1368c>
   24a9c:	ldr	sl, [sp, #28]
   24aa0:	ldr	r9, [sp, #44]	; 0x2c
   24aa4:	ldr	r5, [sp, #68]	; 0x44
   24aa8:	ldr	ip, [fp, #108]	; 0x6c
   24aac:	b	24500 <__assert_fail@plt+0x132a4>
   24ab0:	mov	r0, #12
   24ab4:	b	247cc <__assert_fail@plt+0x13570>
   24ab8:	lsl	r3, r3, #1
   24abc:	add	r9, r3, #1
   24ac0:	ldr	r0, [r4, #20]
   24ac4:	lsl	r1, r9, #2
   24ac8:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   24acc:	cmp	r0, #0
   24ad0:	beq	24ab0 <__assert_fail@plt+0x13854>
   24ad4:	str	r0, [r4, #20]
   24ad8:	str	r9, [r4, #12]
   24adc:	b	249b0 <__assert_fail@plt+0x13754>
   24ae0:	ldr	r7, [sp, #28]
   24ae4:	b	248b4 <__assert_fail@plt+0x13658>
   24ae8:	mov	r6, r3
   24aec:	b	24a28 <__assert_fail@plt+0x137cc>
   24af0:	andeq	pc, r3, r0, lsl #30
   24af4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   24af8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24afc:	mov	r4, r1
   24b00:	ldr	r5, [r1, #40]	; 0x28
   24b04:	ldr	r3, [r1, #104]	; 0x68
   24b08:	sub	sp, sp, #16
   24b0c:	cmp	r5, r3
   24b10:	mov	r8, r0
   24b14:	ldr	r7, [r1, #84]	; 0x54
   24b18:	ble	24b44 <__assert_fail@plt+0x138e8>
   24b1c:	ldr	r3, [r1, #100]	; 0x64
   24b20:	mov	r6, r2
   24b24:	str	r2, [r3, r5, lsl #2]
   24b28:	str	r5, [r1, #104]	; 0x68
   24b2c:	ldr	r3, [r7, #76]	; 0x4c
   24b30:	cmp	r3, #0
   24b34:	bne	24c0c <__assert_fail@plt+0x139b0>
   24b38:	mov	r0, r6
   24b3c:	add	sp, sp, #16
   24b40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24b44:	ldr	r9, [r1, #100]	; 0x64
   24b48:	ldr	r3, [r9, r5, lsl #2]
   24b4c:	cmp	r3, #0
   24b50:	streq	r2, [r9, r5, lsl #2]
   24b54:	moveq	r6, r2
   24b58:	beq	24b2c <__assert_fail@plt+0x138d0>
   24b5c:	cmp	r2, #0
   24b60:	ldr	r3, [r3, #40]	; 0x28
   24b64:	beq	24bd0 <__assert_fail@plt+0x13974>
   24b68:	ldr	r9, [r2, #40]	; 0x28
   24b6c:	add	r0, sp, #4
   24b70:	mov	r2, r3
   24b74:	mov	r1, r9
   24b78:	bl	20100 <__assert_fail@plt+0xeea4>
   24b7c:	cmp	r0, #0
   24b80:	str	r0, [r8]
   24b84:	bne	24c6c <__assert_fail@plt+0x13a10>
   24b88:	ldr	r1, [r4, #40]	; 0x28
   24b8c:	ldr	r2, [r4, #88]	; 0x58
   24b90:	sub	r1, r1, #1
   24b94:	mov	r0, r4
   24b98:	bl	21d9c <__assert_fail@plt+0x10b40>
   24b9c:	add	r2, sp, #4
   24ba0:	mov	r1, r7
   24ba4:	ldr	sl, [r4, #100]	; 0x64
   24ba8:	mov	r3, r0
   24bac:	mov	r0, r8
   24bb0:	bl	2024c <__assert_fail@plt+0xeff0>
   24bb4:	cmp	r9, #0
   24bb8:	mov	r6, r0
   24bbc:	str	r0, [sl, r5, lsl #2]
   24bc0:	beq	24b2c <__assert_fail@plt+0x138d0>
   24bc4:	ldr	r0, [sp, #12]
   24bc8:	bl	13098 <__assert_fail@plt+0x1e3c>
   24bcc:	b	24b2c <__assert_fail@plt+0x138d0>
   24bd0:	ldm	r3, {r0, r1, r2}
   24bd4:	add	r6, sp, #4
   24bd8:	stm	r6, {r0, r1, r2}
   24bdc:	sub	r1, r5, #1
   24be0:	ldr	r2, [r4, #88]	; 0x58
   24be4:	mov	r0, r4
   24be8:	bl	21d9c <__assert_fail@plt+0x10b40>
   24bec:	mov	r2, r6
   24bf0:	mov	r1, r7
   24bf4:	mov	r3, r0
   24bf8:	mov	r0, r8
   24bfc:	bl	2024c <__assert_fail@plt+0xeff0>
   24c00:	mov	r6, r0
   24c04:	str	r0, [r9, r5, lsl #2]
   24c08:	b	24b2c <__assert_fail@plt+0x138d0>
   24c0c:	cmp	r6, #0
   24c10:	beq	24c6c <__assert_fail@plt+0x13a10>
   24c14:	add	r7, r6, #8
   24c18:	add	r9, r6, #12
   24c1c:	mov	r1, r7
   24c20:	mov	r2, r9
   24c24:	mov	r3, r5
   24c28:	mov	r0, r4
   24c2c:	bl	2286c <__assert_fail@plt+0x11610>
   24c30:	cmp	r0, #0
   24c34:	str	r0, [r8]
   24c38:	bne	24c6c <__assert_fail@plt+0x13a10>
   24c3c:	ldrb	r3, [r6, #52]	; 0x34
   24c40:	tst	r3, #64	; 0x40
   24c44:	beq	24b38 <__assert_fail@plt+0x138dc>
   24c48:	mov	r2, r9
   24c4c:	mov	r1, r7
   24c50:	mov	r0, r4
   24c54:	bl	2435c <__assert_fail@plt+0x13100>
   24c58:	cmp	r0, #0
   24c5c:	str	r0, [r8]
   24c60:	ldreq	r3, [r4, #100]	; 0x64
   24c64:	ldreq	r6, [r3, r5, lsl #2]
   24c68:	beq	24b38 <__assert_fail@plt+0x138dc>
   24c6c:	mov	r6, #0
   24c70:	b	24b38 <__assert_fail@plt+0x138dc>
   24c74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24c78:	sub	sp, sp, #68	; 0x44
   24c7c:	mov	r4, #1
   24c80:	mov	sl, r0
   24c84:	mov	r0, #4
   24c88:	ldr	fp, [r1, #12]
   24c8c:	mov	r9, r1
   24c90:	ldr	r5, [r1, #8]
   24c94:	str	r4, [sp, #52]	; 0x34
   24c98:	str	r4, [sp, #56]	; 0x38
   24c9c:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   24ca0:	lsl	r3, fp, #2
   24ca4:	str	r3, [sp, #16]
   24ca8:	cmp	r0, #0
   24cac:	str	r0, [sp, #60]	; 0x3c
   24cb0:	beq	24f24 <__assert_fail@plt+0x13cc8>
   24cb4:	add	r3, sp, #52	; 0x34
   24cb8:	str	r5, [r0]
   24cbc:	mov	r2, fp
   24cc0:	mov	r1, r9
   24cc4:	mov	r0, sl
   24cc8:	bl	2695c <__assert_fail@plt+0x15700>
   24ccc:	subs	r3, r0, #0
   24cd0:	str	r3, [sp, #44]	; 0x2c
   24cd4:	bne	24ef4 <__assert_fail@plt+0x13c98>
   24cd8:	cmp	fp, #0
   24cdc:	ble	24ef4 <__assert_fail@plt+0x13c98>
   24ce0:	ldr	r3, [sp, #44]	; 0x2c
   24ce4:	str	r4, [sp, #40]	; 0x28
   24ce8:	str	r3, [sp, #36]	; 0x24
   24cec:	add	r3, r9, #24
   24cf0:	str	r3, [sp, #28]
   24cf4:	add	r3, r9, #20
   24cf8:	str	r3, [sp, #32]
   24cfc:	ldr	r0, [r9]
   24d00:	ldr	r3, [sp, #16]
   24d04:	ldr	r3, [r0, r3]
   24d08:	cmp	r3, #0
   24d0c:	movne	r3, #0
   24d10:	ldreq	r3, [sp, #36]	; 0x24
   24d14:	addeq	r3, r3, #1
   24d18:	str	r3, [sp, #36]	; 0x24
   24d1c:	ldr	r2, [sp, #36]	; 0x24
   24d20:	ldr	r3, [sl, #120]	; 0x78
   24d24:	cmp	r2, r3
   24d28:	bgt	24f34 <__assert_fail@plt+0x13cd8>
   24d2c:	mov	r2, #0
   24d30:	ldr	r3, [sl, #100]	; 0x64
   24d34:	str	r2, [sp, #56]	; 0x38
   24d38:	ldr	r2, [sp, #16]
   24d3c:	sub	fp, fp, #1
   24d40:	add	r3, r3, r2
   24d44:	ldr	r7, [r3, #-4]
   24d48:	cmp	r7, #0
   24d4c:	beq	24ec4 <__assert_fail@plt+0x13c68>
   24d50:	ldr	r3, [r7, #20]
   24d54:	ldr	r8, [sl, #84]	; 0x54
   24d58:	cmp	r3, #0
   24d5c:	ble	24ec4 <__assert_fail@plt+0x13c68>
   24d60:	ldr	r3, [r7, #24]
   24d64:	ldr	r1, [r8]
   24d68:	mov	r4, #0
   24d6c:	ldr	r5, [r3]
   24d70:	lsl	r6, r5, #3
   24d74:	add	r3, r1, r6
   24d78:	b	24e34 <__assert_fail@plt+0x13bd8>
   24d7c:	add	r1, r1, r6
   24d80:	mov	r2, fp
   24d84:	mov	r0, sl
   24d88:	bl	22658 <__assert_fail@plt+0x113fc>
   24d8c:	cmp	r0, #0
   24d90:	beq	24e10 <__assert_fail@plt+0x13bb4>
   24d94:	ldr	r3, [r9]
   24d98:	ldr	r2, [sp, #16]
   24d9c:	ldr	r3, [r3, r2]
   24da0:	cmp	r3, #0
   24da4:	beq	24e10 <__assert_fail@plt+0x13bb4>
   24da8:	ldr	r2, [r8, #12]
   24dac:	add	r1, r3, #12
   24db0:	ldr	r0, [r3, #8]
   24db4:	ldr	r2, [r2, r5, lsl #2]
   24db8:	bl	1f57c <__assert_fail@plt+0xe320>
   24dbc:	cmp	r0, #0
   24dc0:	beq	24e10 <__assert_fail@plt+0x13bb4>
   24dc4:	ldr	r3, [sp, #40]	; 0x28
   24dc8:	ldr	r2, [r9, #20]
   24dcc:	cmp	r2, #0
   24dd0:	beq	24dfc <__assert_fail@plt+0x13ba0>
   24dd4:	ldr	r1, [r8, #12]
   24dd8:	add	r0, fp, r3
   24ddc:	ldr	r2, [sp, #28]
   24de0:	ldr	r3, [r1, r5, lsl #2]
   24de4:	stm	sp, {r0, r5, fp}
   24de8:	mov	r0, sl
   24dec:	ldr	r1, [sp, #32]
   24df0:	bl	1f848 <__assert_fail@plt+0xe5ec>
   24df4:	cmp	r0, #0
   24df8:	bne	24e10 <__assert_fail@plt+0x13bb4>
   24dfc:	mov	r1, r5
   24e00:	add	r0, sp, #52	; 0x34
   24e04:	bl	1efec <__assert_fail@plt+0xdd90>
   24e08:	cmp	r0, #0
   24e0c:	beq	24f04 <__assert_fail@plt+0x13ca8>
   24e10:	ldr	r3, [r7, #20]
   24e14:	add	r4, r4, #1
   24e18:	cmp	r4, r3
   24e1c:	bge	24ec4 <__assert_fail@plt+0x13c68>
   24e20:	ldr	r3, [r7, #24]
   24e24:	ldr	r1, [r8]
   24e28:	ldr	r5, [r3, r4, lsl #2]
   24e2c:	lsl	r6, r5, #3
   24e30:	add	r3, r1, r6
   24e34:	ldrb	r3, [r3, #6]
   24e38:	tst	r3, #16
   24e3c:	beq	24d7c <__assert_fail@plt+0x13b20>
   24e40:	ldr	r3, [sl, #84]	; 0x54
   24e44:	mov	r2, r3
   24e48:	str	r3, [sp, #24]
   24e4c:	ldr	r0, [r2]
   24e50:	str	fp, [sp]
   24e54:	ldr	ip, [r9, #12]
   24e58:	mov	r3, sl
   24e5c:	add	r1, r2, #128	; 0x80
   24e60:	mov	r2, r5
   24e64:	str	ip, [sp, #20]
   24e68:	bl	23938 <__assert_fail@plt+0x126dc>
   24e6c:	subs	r3, r0, #0
   24e70:	ble	24efc <__assert_fail@plt+0x13ca0>
   24e74:	ldr	ip, [sp, #20]
   24e78:	add	r2, fp, r3
   24e7c:	cmp	ip, r2
   24e80:	blt	24dc8 <__assert_fail@plt+0x13b6c>
   24e84:	ldr	r1, [r9]
   24e88:	ldr	r2, [r1, r2, lsl #2]
   24e8c:	cmp	r2, #0
   24e90:	beq	24ebc <__assert_fail@plt+0x13c60>
   24e94:	str	r3, [sp, #20]
   24e98:	ldr	r3, [sp, #24]
   24e9c:	add	r1, r2, #12
   24ea0:	ldr	r0, [r2, #8]
   24ea4:	ldr	ip, [r3, #12]
   24ea8:	ldr	r2, [ip, r5, lsl #2]
   24eac:	bl	1f57c <__assert_fail@plt+0xe320>
   24eb0:	ldr	r3, [sp, #20]
   24eb4:	cmp	r0, #0
   24eb8:	bne	24dc8 <__assert_fail@plt+0x13b6c>
   24ebc:	ldr	r1, [r8]
   24ec0:	b	24d7c <__assert_fail@plt+0x13b20>
   24ec4:	add	r3, sp, #52	; 0x34
   24ec8:	mov	r2, fp
   24ecc:	mov	r1, r9
   24ed0:	mov	r0, sl
   24ed4:	bl	2695c <__assert_fail@plt+0x15700>
   24ed8:	cmp	r0, #0
   24edc:	bne	24f1c <__assert_fail@plt+0x13cc0>
   24ee0:	ldr	r3, [sp, #16]
   24ee4:	cmp	fp, #0
   24ee8:	sub	r3, r3, #4
   24eec:	str	r3, [sp, #16]
   24ef0:	bne	24cfc <__assert_fail@plt+0x13aa0>
   24ef4:	ldr	r4, [sp, #44]	; 0x2c
   24ef8:	b	24f08 <__assert_fail@plt+0x13cac>
   24efc:	beq	24ebc <__assert_fail@plt+0x13c60>
   24f00:	b	24dc8 <__assert_fail@plt+0x13b6c>
   24f04:	mov	r4, #12
   24f08:	ldr	r0, [sp, #60]	; 0x3c
   24f0c:	bl	13098 <__assert_fail@plt+0x1e3c>
   24f10:	mov	r0, r4
   24f14:	add	sp, sp, #68	; 0x44
   24f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f1c:	mov	r4, r0
   24f20:	b	24f08 <__assert_fail@plt+0x13cac>
   24f24:	mov	r4, #12
   24f28:	mov	r0, r4
   24f2c:	add	sp, sp, #68	; 0x44
   24f30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f34:	ldr	r2, [sp, #16]
   24f38:	mov	r1, #0
   24f3c:	bl	1119c <memset@plt>
   24f40:	ldr	r0, [sp, #60]	; 0x3c
   24f44:	ldr	r4, [sp, #44]	; 0x2c
   24f48:	bl	13098 <__assert_fail@plt+0x1e3c>
   24f4c:	b	24f10 <__assert_fail@plt+0x13cb4>
   24f50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24f54:	mov	r7, r0
   24f58:	sub	sp, sp, #428	; 0x1ac
   24f5c:	mov	r6, r3
   24f60:	ldr	r3, [r7]
   24f64:	str	r0, [sp, #44]	; 0x2c
   24f68:	str	r1, [sp, #56]	; 0x38
   24f6c:	str	r2, [sp, #72]	; 0x48
   24f70:	mov	r1, #0
   24f74:	add	r0, sp, #148	; 0x94
   24f78:	mov	r2, #136	; 0x88
   24f7c:	mov	r8, r3
   24f80:	str	r3, [sp, #28]
   24f84:	ldr	r4, [sp, #464]	; 0x1d0
   24f88:	ldr	r5, [sp, #472]	; 0x1d8
   24f8c:	bl	1119c <memset@plt>
   24f90:	ldr	r1, [r7, #16]
   24f94:	str	r8, [sp, #232]	; 0xe8
   24f98:	cmp	r1, #0
   24f9c:	streq	r1, [sp, #60]	; 0x3c
   24fa0:	beq	24fcc <__assert_fail@plt+0x13d70>
   24fa4:	ldrb	r2, [r7, #28]
   24fa8:	subs	r3, r6, r4
   24fac:	movne	r3, #1
   24fb0:	ands	r3, r3, r2, lsr #3
   24fb4:	streq	r3, [sp, #60]	; 0x3c
   24fb8:	beq	24fcc <__assert_fail@plt+0x13d70>
   24fbc:	tst	r2, #1
   24fc0:	moveq	r3, r1
   24fc4:	movne	r3, #0
   24fc8:	str	r3, [sp, #60]	; 0x3c
   24fcc:	ldr	r3, [sp, #44]	; 0x2c
   24fd0:	ldr	r3, [r3, #24]
   24fd4:	cmp	r3, r5
   24fd8:	subcc	r2, r5, #1
   24fdc:	subcc	r3, r2, r3
   24fe0:	ldr	r2, [sp, #44]	; 0x2c
   24fe4:	movcs	r3, #0
   24fe8:	str	r3, [sp, #96]	; 0x60
   24fec:	ldr	r2, [r2, #8]
   24ff0:	cmp	r2, #0
   24ff4:	beq	25624 <__assert_fail@plt+0x143c8>
   24ff8:	ldr	r2, [sp, #28]
   24ffc:	ldr	r2, [r2, #36]	; 0x24
   25000:	cmp	r2, #0
   25004:	beq	25624 <__assert_fail@plt+0x143c8>
   25008:	ldr	r1, [sp, #28]
   2500c:	ldr	r1, [r1, #40]	; 0x28
   25010:	cmp	r1, #0
   25014:	beq	25624 <__assert_fail@plt+0x143c8>
   25018:	ldr	r0, [sp, #28]
   2501c:	ldr	ip, [r0, #44]	; 0x2c
   25020:	cmp	ip, #0
   25024:	beq	25624 <__assert_fail@plt+0x143c8>
   25028:	ldr	r0, [r0, #48]	; 0x30
   2502c:	cmp	r0, #0
   25030:	beq	25624 <__assert_fail@plt+0x143c8>
   25034:	ldr	r2, [r2, #8]
   25038:	cmp	r2, #0
   2503c:	bne	25080 <__assert_fail@plt+0x13e24>
   25040:	ldr	r2, [r1, #8]
   25044:	cmp	r2, #0
   25048:	bne	25080 <__assert_fail@plt+0x13e24>
   2504c:	ldr	r2, [ip, #8]
   25050:	cmp	r2, #0
   25054:	beq	25068 <__assert_fail@plt+0x13e0c>
   25058:	ldr	r2, [sp, #44]	; 0x2c
   2505c:	ldrsb	r2, [r2, #28]
   25060:	cmp	r2, #0
   25064:	blt	25080 <__assert_fail@plt+0x13e24>
   25068:	cmp	r6, #0
   2506c:	cmpne	r4, #0
   25070:	movne	r4, #1
   25074:	moveq	r4, #0
   25078:	bne	25624 <__assert_fail@plt+0x143c8>
   2507c:	mov	r6, r4
   25080:	subs	r3, r5, r3
   25084:	str	r3, [sp, #76]	; 0x4c
   25088:	movne	r3, #1
   2508c:	strne	r3, [sp, #40]	; 0x28
   25090:	beq	25358 <__assert_fail@plt+0x140fc>
   25094:	ldr	r1, [sp, #28]
   25098:	ldr	lr, [sp, #44]	; 0x2c
   2509c:	ldr	r7, [sp, #56]	; 0x38
   250a0:	ldr	r2, [r1, #8]
   250a4:	ldr	ip, [r1, #92]	; 0x5c
   250a8:	ldrb	r0, [r1, #88]	; 0x58
   250ac:	ldr	r1, [lr, #20]
   250b0:	add	r2, r2, #1
   250b4:	ldr	r3, [lr, #12]
   250b8:	ldr	lr, [sp, #72]	; 0x48
   250bc:	cmp	r2, ip
   250c0:	mov	r5, r1
   250c4:	movlt	r2, ip
   250c8:	str	r1, [sp, #88]	; 0x58
   250cc:	str	lr, [sp, #196]	; 0xc4
   250d0:	add	r1, lr, #1
   250d4:	str	lr, [sp, #192]	; 0xc0
   250d8:	str	lr, [sp, #204]	; 0xcc
   250dc:	str	lr, [sp, #200]	; 0xc8
   250e0:	mov	lr, r5
   250e4:	adds	r5, r5, #0
   250e8:	movne	r5, #1
   250ec:	lsr	r3, r3, #22
   250f0:	cmp	r2, r1
   250f4:	movlt	r1, r2
   250f8:	and	r3, r3, #1
   250fc:	str	ip, [sp, #228]	; 0xe4
   25100:	lsr	r2, r0, #3
   25104:	lsr	ip, r0, #2
   25108:	and	ip, ip, #1
   2510c:	and	r2, r2, #1
   25110:	strb	r3, [sp, #220]	; 0xdc
   25114:	add	r0, sp, #148	; 0x94
   25118:	orr	r3, r3, r5
   2511c:	strb	r3, [sp, #223]	; 0xdf
   25120:	str	r7, [sp, #148]	; 0x94
   25124:	str	lr, [sp, #212]	; 0xd4
   25128:	strb	ip, [sp, #221]	; 0xdd
   2512c:	strb	r2, [sp, #222]	; 0xde
   25130:	bl	1df88 <__assert_fail@plt+0xcd2c>
   25134:	subs	r3, r0, #0
   25138:	str	r3, [sp, #48]	; 0x30
   2513c:	bne	260e0 <__assert_fail@plt+0x14e84>
   25140:	ldr	r1, [sp, #28]
   25144:	ldrb	r2, [sp, #223]	; 0xdf
   25148:	add	r1, r1, #96	; 0x60
   2514c:	ldrb	r3, [r1, #-8]
   25150:	cmp	r2, #0
   25154:	str	r1, [sp, #216]	; 0xd8
   25158:	lsr	r3, r3, #4
   2515c:	and	r3, r3, #1
   25160:	strb	r3, [sp, #226]	; 0xe2
   25164:	bne	25180 <__assert_fail@plt+0x13f24>
   25168:	ldr	r3, [sp, #28]
   2516c:	ldr	r2, [sp, #56]	; 0x38
   25170:	ldr	r3, [r3, #92]	; 0x5c
   25174:	str	r2, [sp, #152]	; 0x98
   25178:	cmp	r3, #1
   2517c:	ble	26068 <__assert_fail@plt+0x14e0c>
   25180:	mov	r1, #0
   25184:	ldr	r3, [sp, #44]	; 0x2c
   25188:	mvn	r2, #0
   2518c:	str	r1, [sp, #176]	; 0xb0
   25190:	ldrb	r3, [r3, #28]
   25194:	str	r1, [sp, #180]	; 0xb4
   25198:	lsr	r3, r3, #7
   2519c:	strb	r3, [sp, #225]	; 0xe1
   251a0:	ldr	r3, [sp, #28]
   251a4:	ldr	r8, [r3, #76]	; 0x4c
   251a8:	ldr	r3, [sp, #468]	; 0x1d4
   251ac:	str	r2, [sp, #240]	; 0xf0
   251b0:	str	r3, [sp, #204]	; 0xcc
   251b4:	str	r3, [sp, #200]	; 0xc8
   251b8:	lsl	r7, r8, #1
   251bc:	ldr	r3, [sp, #480]	; 0x1e0
   251c0:	cmp	r7, #0
   251c4:	str	r3, [sp, #236]	; 0xec
   251c8:	ble	25204 <__assert_fail@plt+0x13fa8>
   251cc:	ldr	r3, [pc, #4068]	; 261b8 <__assert_fail@plt+0x14f5c>
   251d0:	cmp	r7, r3
   251d4:	bgt	25b70 <__assert_fail@plt+0x14914>
   251d8:	add	r0, r7, r8, lsl #2
   251dc:	lsl	r0, r0, #3
   251e0:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   251e4:	str	r0, [sp, #264]	; 0x108
   251e8:	lsl	r0, r8, #3
   251ec:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   251f0:	ldr	r3, [sp, #264]	; 0x108
   251f4:	cmp	r0, #0
   251f8:	cmpne	r3, #0
   251fc:	str	r0, [sp, #280]	; 0x118
   25200:	beq	25b70 <__assert_fail@plt+0x14914>
   25204:	ldr	r3, [sp, #76]	; 0x4c
   25208:	str	r7, [sp, #260]	; 0x104
   2520c:	cmp	r3, #1
   25210:	mov	r3, #1
   25214:	str	r7, [sp, #276]	; 0x114
   25218:	str	r3, [sp, #268]	; 0x10c
   2521c:	bls	261e4 <__assert_fail@plt+0x14f88>
   25220:	ldr	r3, [sp, #184]	; 0xb8
   25224:	cmn	r3, #-1073741822	; 0xc0000002
   25228:	bhi	25b70 <__assert_fail@plt+0x14914>
   2522c:	add	r3, r3, #1
   25230:	lsl	r0, r3, #2
   25234:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   25238:	cmp	r0, #0
   2523c:	str	r0, [sp, #248]	; 0xf8
   25240:	beq	25ba8 <__assert_fail@plt+0x1494c>
   25244:	ldr	r3, [sp, #480]	; 0x1e0
   25248:	str	r6, [sp, #116]	; 0x74
   2524c:	tst	r3, #1
   25250:	moveq	r3, #6
   25254:	movne	r3, #4
   25258:	cmp	r6, r4
   2525c:	movle	r2, #1
   25260:	mvngt	r2, #0
   25264:	str	r2, [sp, #92]	; 0x5c
   25268:	str	r3, [sp, #208]	; 0xd0
   2526c:	movlt	r2, r6
   25270:	movge	r2, r4
   25274:	ldr	r3, [sp, #28]
   25278:	str	r2, [sp, #68]	; 0x44
   2527c:	movge	r2, r6
   25280:	movlt	r2, r4
   25284:	str	r2, [sp, #52]	; 0x34
   25288:	ldr	r2, [sp, #60]	; 0x3c
   2528c:	ldr	r3, [r3, #92]	; 0x5c
   25290:	cmp	r2, #0
   25294:	str	r3, [sp, #80]	; 0x50
   25298:	beq	262a8 <__assert_fail@plt+0x1504c>
   2529c:	ldr	r3, [sp, #80]	; 0x50
   252a0:	cmp	r3, #1
   252a4:	moveq	r3, #4
   252a8:	beq	252d0 <__assert_fail@plt+0x14074>
   252ac:	ldr	r3, [sp, #44]	; 0x2c
   252b0:	ldr	r2, [sp, #88]	; 0x58
   252b4:	ldr	r3, [r3, #12]
   252b8:	lsr	r3, r3, #22
   252bc:	eor	r3, r3, #1
   252c0:	cmp	r2, #0
   252c4:	movne	r3, #0
   252c8:	andeq	r3, r3, #1
   252cc:	lsl	r3, r3, #2
   252d0:	cmp	r6, r4
   252d4:	orr	r3, r5, r3
   252d8:	movle	r2, #2
   252dc:	movgt	r2, #0
   252e0:	orr	r3, r3, r2
   252e4:	ldr	r2, [sp, #68]	; 0x44
   252e8:	ldr	r1, [sp, #52]	; 0x34
   252ec:	cmp	r6, r2
   252f0:	movge	r2, #0
   252f4:	movlt	r2, #1
   252f8:	cmp	r6, r1
   252fc:	orrgt	r2, r2, #1
   25300:	cmp	r2, #0
   25304:	str	r2, [sp, #108]	; 0x6c
   25308:	bne	25614 <__assert_fail@plt+0x143b8>
   2530c:	sub	r3, r3, #4
   25310:	cmp	r6, r4
   25314:	str	r3, [sp, #84]	; 0x54
   25318:	add	r3, sp, #424	; 0x1a8
   2531c:	suble	r3, r3, #308	; 0x134
   25320:	movgt	r3, #0
   25324:	str	r3, [sp, #100]	; 0x64
   25328:	movle	r3, #1
   2532c:	movgt	r3, #0
   25330:	str	r3, [sp, #104]	; 0x68
   25334:	ldr	r3, [sp, #84]	; 0x54
   25338:	cmp	r3, #4
   2533c:	ldrls	pc, [pc, r3, lsl #2]
   25340:	b	260e8 <__assert_fail@plt+0x14e8c>
   25344:	ldrdeq	r5, [r2], -r8
   25348:	ldrdeq	r5, [r2], -r8
   2534c:	andeq	r5, r2, r0, ror r3
   25350:	andeq	r5, r2, ip, ror #30
   25354:	andeq	r5, r2, r8, lsl r4
   25358:	ldr	r3, [sp, #28]
   2535c:	ldr	r3, [r3, #76]	; 0x4c
   25360:	adds	r3, r3, #0
   25364:	movne	r3, #1
   25368:	str	r3, [sp, #40]	; 0x28
   2536c:	b	25094 <__assert_fail@plt+0x13e38>
   25370:	ldr	r3, [sp, #52]	; 0x34
   25374:	cmp	r3, r6
   25378:	ble	253d0 <__assert_fail@plt+0x14174>
   2537c:	ldr	r3, [sp, #56]	; 0x38
   25380:	ldr	r1, [sp, #60]	; 0x3c
   25384:	ldrb	r2, [r3, r6]
   25388:	add	r3, r3, r6
   2538c:	ldrb	r2, [r1, r2]
   25390:	cmp	r2, #0
   25394:	bne	25418 <__assert_fail@plt+0x141bc>
   25398:	add	r2, r6, #1
   2539c:	ldr	ip, [sp, #60]	; 0x3c
   253a0:	ldr	r0, [sp, #52]	; 0x34
   253a4:	b	253bc <__assert_fail@plt+0x14160>
   253a8:	ldrb	r1, [r3, #1]!
   253ac:	add	r2, r2, #1
   253b0:	ldrb	r1, [ip, r1]
   253b4:	cmp	r1, #0
   253b8:	bne	2625c <__assert_fail@plt+0x15000>
   253bc:	cmp	r2, r0
   253c0:	mov	r6, r2
   253c4:	bne	253a8 <__assert_fail@plt+0x1414c>
   253c8:	ldr	r3, [sp, #52]	; 0x34
   253cc:	str	r3, [sp, #116]	; 0x74
   253d0:	ldr	r3, [sp, #52]	; 0x34
   253d4:	cmp	r3, r6
   253d8:	bne	25418 <__assert_fail@plt+0x141bc>
   253dc:	ldr	r2, [sp, #72]	; 0x48
   253e0:	ldr	r1, [sp, #88]	; 0x58
   253e4:	cmp	r2, r3
   253e8:	movle	r3, #0
   253ec:	ldrgt	r2, [sp, #56]	; 0x38
   253f0:	ldrbgt	r3, [r2, r3]
   253f4:	cmp	r1, #0
   253f8:	mov	r2, r3
   253fc:	movne	r2, r1
   25400:	ldrbne	r2, [r2, r3]
   25404:	ldr	r3, [sp, #60]	; 0x3c
   25408:	ldrb	r3, [r3, r2]
   2540c:	cmp	r3, #0
   25410:	beq	25614 <__assert_fail@plt+0x143b8>
   25414:	ldr	r6, [sp, #52]	; 0x34
   25418:	ldr	r2, [sp, #480]	; 0x1e0
   2541c:	mov	r1, r6
   25420:	add	r0, sp, #148	; 0x94
   25424:	bl	21e88 <__assert_fail@plt+0x10c2c>
   25428:	subs	r3, r0, #0
   2542c:	str	r3, [sp, #48]	; 0x30
   25430:	bne	260e0 <__assert_fail@plt+0x14e84>
   25434:	ldr	r3, [sp, #80]	; 0x50
   25438:	cmp	r3, #1
   2543c:	beq	2545c <__assert_fail@plt+0x14200>
   25440:	ldr	r3, [sp, #176]	; 0xb0
   25444:	cmp	r3, #0
   25448:	beq	2545c <__assert_fail@plt+0x14200>
   2544c:	ldr	r3, [sp, #156]	; 0x9c
   25450:	ldr	r3, [r3]
   25454:	cmn	r3, #1
   25458:	beq	255e4 <__assert_fail@plt+0x14388>
   2545c:	ldr	r4, [sp, #232]	; 0xe8
   25460:	mov	r3, #0
   25464:	str	r3, [sp, #268]	; 0x10c
   25468:	ldr	fp, [r4, #36]	; 0x24
   2546c:	str	r3, [sp, #256]	; 0x100
   25470:	str	r3, [sp, #252]	; 0xfc
   25474:	str	r3, [sp, #124]	; 0x7c
   25478:	ldrsb	r3, [fp, #52]	; 0x34
   2547c:	ldr	r2, [sp, #188]	; 0xbc
   25480:	cmp	r3, #0
   25484:	str	r2, [sp, #12]
   25488:	blt	26178 <__assert_fail@plt+0x14f1c>
   2548c:	ldr	r3, [sp, #248]	; 0xf8
   25490:	cmp	r3, #0
   25494:	beq	26224 <__assert_fail@plt+0x14fc8>
   25498:	ldr	r2, [r4, #76]	; 0x4c
   2549c:	ldr	r1, [sp, #12]
   254a0:	cmp	r2, #0
   254a4:	str	fp, [r3, r1, lsl #2]
   254a8:	bne	262b0 <__assert_fail@plt+0x15054>
   254ac:	ldrb	r3, [fp, #52]	; 0x34
   254b0:	ldr	r2, [sp, #104]	; 0x68
   254b4:	str	r2, [sp, #16]
   254b8:	tst	r3, #16
   254bc:	bne	26274 <__assert_fail@plt+0x15018>
   254c0:	mvn	r3, #0
   254c4:	str	r3, [sp, #20]
   254c8:	mov	r3, #0
   254cc:	str	r3, [sp, #36]	; 0x24
   254d0:	ldr	r3, [sp, #100]	; 0x64
   254d4:	ldr	r5, [sp, #188]	; 0xbc
   254d8:	str	r3, [sp, #32]
   254dc:	b	254e8 <__assert_fail@plt+0x1428c>
   254e0:	ldr	r5, [sp, #188]	; 0xbc
   254e4:	mov	fp, r4
   254e8:	ldr	r3, [sp, #204]	; 0xcc
   254ec:	cmp	r3, r5
   254f0:	ble	256a4 <__assert_fail@plt+0x14448>
   254f4:	ldr	r3, [sp, #184]	; 0xb8
   254f8:	add	r9, r5, #1
   254fc:	cmp	r9, r3
   25500:	bge	25a5c <__assert_fail@plt+0x14800>
   25504:	ldr	r3, [sp, #176]	; 0xb0
   25508:	cmp	r9, r3
   2550c:	bge	25ab8 <__assert_fail@plt+0x1485c>
   25510:	ldrb	r3, [fp, #52]	; 0x34
   25514:	tst	r3, #32
   25518:	bne	25894 <__assert_fail@plt+0x14638>
   2551c:	ldr	r3, [sp, #152]	; 0x98
   25520:	add	r2, r5, #1
   25524:	str	r2, [sp, #188]	; 0xbc
   25528:	ldrb	r4, [r3, r5]
   2552c:	ldr	r3, [fp, #44]	; 0x2c
   25530:	cmp	r3, #0
   25534:	beq	25a88 <__assert_fail@plt+0x1482c>
   25538:	ldr	r4, [r3, r4, lsl #2]
   2553c:	ldr	r3, [sp, #248]	; 0xf8
   25540:	cmp	r3, #0
   25544:	beq	2555c <__assert_fail@plt+0x14300>
   25548:	mov	r2, r4
   2554c:	add	r1, sp, #148	; 0x94
   25550:	add	r0, sp, #124	; 0x7c
   25554:	bl	24af8 <__assert_fail@plt+0x1389c>
   25558:	mov	r4, r0
   2555c:	cmp	r4, #0
   25560:	beq	25638 <__assert_fail@plt+0x143dc>
   25564:	ldr	r2, [sp, #16]
   25568:	ldrb	r3, [r4, #52]	; 0x34
   2556c:	cmp	fp, r4
   25570:	movne	r2, #0
   25574:	andeq	r2, r2, #1
   25578:	ldr	r1, [sp, #12]
   2557c:	cmp	r2, #0
   25580:	movne	r1, r9
   25584:	tst	r3, #16
   25588:	str	r2, [sp, #16]
   2558c:	str	r1, [sp, #12]
   25590:	beq	254e0 <__assert_fail@plt+0x14284>
   25594:	tst	r3, #128	; 0x80
   25598:	bne	25840 <__assert_fail@plt+0x145e4>
   2559c:	ldr	r3, [sp, #188]	; 0xbc
   255a0:	str	r3, [sp, #20]
   255a4:	ldr	r3, [sp, #40]	; 0x28
   255a8:	cmp	r3, #0
   255ac:	beq	256c4 <__assert_fail@plt+0x14468>
   255b0:	mov	r3, #1
   255b4:	str	r3, [sp, #36]	; 0x24
   255b8:	mov	r3, #0
   255bc:	ldr	r5, [sp, #20]
   255c0:	str	r3, [sp, #32]
   255c4:	b	254e4 <__assert_fail@plt+0x14288>
   255c8:	mov	r0, r5
   255cc:	bl	13098 <__assert_fail@plt+0x1e3c>
   255d0:	mov	r0, #0
   255d4:	bl	13098 <__assert_fail@plt+0x1e3c>
   255d8:	add	r0, sp, #148	; 0x94
   255dc:	bl	1eee4 <__assert_fail@plt+0xdc88>
   255e0:	ldr	r6, [sp, #116]	; 0x74
   255e4:	ldr	r3, [sp, #92]	; 0x5c
   255e8:	ldr	r2, [sp, #68]	; 0x44
   255ec:	add	r6, r6, r3
   255f0:	ldr	r3, [sp, #52]	; 0x34
   255f4:	str	r6, [sp, #116]	; 0x74
   255f8:	cmp	r3, r6
   255fc:	movge	r3, #0
   25600:	movlt	r3, #1
   25604:	cmp	r2, r6
   25608:	orrgt	r3, r3, #1
   2560c:	cmp	r3, #0
   25610:	beq	25334 <__assert_fail@plt+0x140d8>
   25614:	mov	r3, #1
   25618:	ldr	r7, [sp, #248]	; 0xf8
   2561c:	str	r3, [sp, #48]	; 0x30
   25620:	b	25b7c <__assert_fail@plt+0x14920>
   25624:	mov	r3, #1
   25628:	str	r3, [sp, #48]	; 0x30
   2562c:	ldr	r0, [sp, #48]	; 0x30
   25630:	add	sp, sp, #428	; 0x1ac
   25634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25638:	ldr	r3, [sp, #124]	; 0x7c
   2563c:	cmp	r3, #0
   25640:	bne	262a0 <__assert_fail@plt+0x15044>
   25644:	ldr	r2, [sp, #248]	; 0xf8
   25648:	cmp	r2, #0
   2564c:	beq	256a4 <__assert_fail@plt+0x14448>
   25650:	ldr	r3, [sp, #40]	; 0x28
   25654:	eor	r5, r3, #1
   25658:	ldr	r3, [sp, #36]	; 0x24
   2565c:	ands	r5, r5, r3
   25660:	bne	256a4 <__assert_fail@plt+0x14448>
   25664:	ldr	r3, [sp, #188]	; 0xbc
   25668:	ldr	lr, [sp, #252]	; 0xfc
   2566c:	mov	ip, r3
   25670:	add	r2, r2, r3, lsl #2
   25674:	mov	r0, r5
   25678:	b	25690 <__assert_fail@plt+0x14434>
   2567c:	ldr	r1, [r2, #4]!
   25680:	add	ip, ip, #1
   25684:	cmp	r1, #0
   25688:	mov	r0, #1
   2568c:	bne	25864 <__assert_fail@plt+0x14608>
   25690:	add	r3, r3, #1
   25694:	cmp	lr, r3
   25698:	bge	2567c <__assert_fail@plt+0x14420>
   2569c:	cmp	r0, #0
   256a0:	strne	ip, [sp, #188]	; 0xbc
   256a4:	ldr	r3, [sp, #32]
   256a8:	cmp	r3, #0
   256ac:	beq	256c4 <__assert_fail@plt+0x14468>
   256b0:	ldr	r2, [sp, #32]
   256b4:	ldr	r1, [sp, #12]
   256b8:	ldr	r3, [r2]
   256bc:	add	r3, r3, r1
   256c0:	str	r3, [r2]
   256c4:	ldr	r3, [sp, #20]
   256c8:	cmn	r3, #1
   256cc:	beq	255d8 <__assert_fail@plt+0x1437c>
   256d0:	cmn	r3, #2
   256d4:	beq	25b70 <__assert_fail@plt+0x14914>
   256d8:	ldr	r3, [sp, #44]	; 0x2c
   256dc:	ldr	r2, [sp, #20]
   256e0:	ldrb	r3, [r3, #28]
   256e4:	str	r2, [sp, #240]	; 0xf0
   256e8:	ldr	r2, [sp, #76]	; 0x4c
   256ec:	lsr	r3, r3, #4
   256f0:	eor	r3, r3, #1
   256f4:	cmp	r2, #1
   256f8:	movls	r3, #0
   256fc:	andhi	r3, r3, #1
   25700:	cmp	r3, #0
   25704:	beq	25b1c <__assert_fail@plt+0x148c0>
   25708:	ldr	r3, [sp, #20]
   2570c:	ldr	r7, [sp, #248]	; 0xf8
   25710:	mov	r2, r3
   25714:	add	r0, sp, #148	; 0x94
   25718:	ldr	r1, [r7, r3, lsl #2]
   2571c:	bl	2278c <__assert_fail@plt+0x11530>
   25720:	ldr	r3, [sp, #28]
   25724:	ldrb	r3, [r3, #88]	; 0x58
   25728:	tst	r3, #1
   2572c:	str	r0, [sp, #244]	; 0xf4
   25730:	beq	26054 <__assert_fail@plt+0x14df8>
   25734:	ldr	r3, [sp, #20]
   25738:	ldr	fp, [sp, #232]	; 0xe8
   2573c:	cmn	r3, #-1073741822	; 0xc0000002
   25740:	ldr	r9, [sp, #244]	; 0xf4
   25744:	bhi	25bac <__assert_fail@plt+0x14950>
   25748:	ldr	r3, [sp, #20]
   2574c:	add	r7, r3, #1
   25750:	lsl	r4, r7, #2
   25754:	mov	r0, r4
   25758:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   2575c:	subs	r5, r0, #0
   25760:	beq	26390 <__assert_fail@plt+0x15134>
   25764:	ldr	r3, [fp, #76]	; 0x4c
   25768:	cmp	r3, #0
   2576c:	beq	25bb8 <__assert_fail@plt+0x1495c>
   25770:	mov	r0, r4
   25774:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   25778:	subs	r6, r0, #0
   2577c:	beq	262f0 <__assert_fail@plt+0x15094>
   25780:	ldr	r4, [sp, #20]
   25784:	str	fp, [sp, #12]
   25788:	add	sl, sp, #300	; 0x12c
   2578c:	mov	fp, r7
   25790:	lsl	r8, fp, #2
   25794:	mov	r2, r8
   25798:	mov	r1, #0
   2579c:	mov	r0, r6
   257a0:	bl	1119c <memset@plt>
   257a4:	mov	r3, #0
   257a8:	str	r5, [sp, #284]	; 0x11c
   257ac:	str	r6, [sp, #288]	; 0x120
   257b0:	str	r9, [sp, #292]	; 0x124
   257b4:	str	r4, [sp, #296]	; 0x128
   257b8:	add	r1, sp, #284	; 0x11c
   257bc:	str	r3, [sl]
   257c0:	str	r3, [sl, #4]
   257c4:	str	r3, [sl, #8]
   257c8:	add	r0, sp, #148	; 0x94
   257cc:	bl	24c74 <__assert_fail@plt+0x13a18>
   257d0:	mov	r7, r0
   257d4:	ldr	r0, [sp, #308]	; 0x134
   257d8:	bl	13098 <__assert_fail@plt+0x1e3c>
   257dc:	cmp	r7, #0
   257e0:	bne	263c4 <__assert_fail@plt+0x15168>
   257e4:	ldr	r2, [r5]
   257e8:	cmp	r2, #0
   257ec:	bne	26310 <__assert_fail@plt+0x150b4>
   257f0:	ldr	r2, [r6]
   257f4:	cmp	r2, #0
   257f8:	bne	26310 <__assert_fail@plt+0x150b4>
   257fc:	ldr	r3, [sp, #248]	; 0xf8
   25800:	sub	r8, r8, #4
   25804:	add	r3, r3, r8
   25808:	subs	r4, r4, #1
   2580c:	bcc	261c4 <__assert_fail@plt+0x14f68>
   25810:	ldr	r1, [r3, #-4]!
   25814:	cmp	r1, #0
   25818:	beq	25808 <__assert_fail@plt+0x145ac>
   2581c:	ldrb	r2, [r1, #52]	; 0x34
   25820:	tst	r2, #16
   25824:	beq	25808 <__assert_fail@plt+0x145ac>
   25828:	mov	r2, r4
   2582c:	add	r0, sp, #148	; 0x94
   25830:	bl	2278c <__assert_fail@plt+0x11530>
   25834:	add	fp, r4, #1
   25838:	mov	r9, r0
   2583c:	b	25790 <__assert_fail@plt+0x14534>
   25840:	ldr	r5, [sp, #188]	; 0xbc
   25844:	mov	r1, r4
   25848:	mov	r2, r5
   2584c:	add	r0, sp, #148	; 0x94
   25850:	bl	2278c <__assert_fail@plt+0x11530>
   25854:	cmp	r0, #0
   25858:	beq	254e4 <__assert_fail@plt+0x14288>
   2585c:	str	r5, [sp, #20]
   25860:	b	255a4 <__assert_fail@plt+0x14348>
   25864:	mov	r2, #0
   25868:	add	r1, sp, #148	; 0x94
   2586c:	add	r0, sp, #124	; 0x7c
   25870:	str	ip, [sp, #188]	; 0xbc
   25874:	bl	24af8 <__assert_fail@plt+0x1389c>
   25878:	ldr	r3, [sp, #124]	; 0x7c
   2587c:	cmp	r3, #0
   25880:	bne	263ac <__assert_fail@plt+0x15150>
   25884:	cmp	r0, #0
   25888:	bne	263bc <__assert_fail@plt+0x15160>
   2588c:	ldr	r2, [sp, #248]	; 0xf8
   25890:	b	25664 <__assert_fail@plt+0x14408>
   25894:	ldr	r3, [fp, #8]
   25898:	ldr	sl, [sp, #232]	; 0xe8
   2589c:	cmp	r3, #0
   258a0:	ble	2598c <__assert_fail@plt+0x14730>
   258a4:	add	r2, sl, #128	; 0x80
   258a8:	str	r9, [sp, #64]	; 0x40
   258ac:	mov	r4, #0
   258b0:	str	r2, [sp, #24]
   258b4:	mov	r9, r3
   258b8:	b	25920 <__assert_fail@plt+0x146c4>
   258bc:	tst	r0, #1
   258c0:	beq	25914 <__assert_fail@plt+0x146b8>
   258c4:	tst	r6, #8
   258c8:	bne	25914 <__assert_fail@plt+0x146b8>
   258cc:	tst	r6, #32
   258d0:	beq	258dc <__assert_fail@plt+0x14680>
   258d4:	tst	r0, #2
   258d8:	beq	25914 <__assert_fail@plt+0x146b8>
   258dc:	tst	r6, #128	; 0x80
   258e0:	beq	258ec <__assert_fail@plt+0x14690>
   258e4:	tst	r0, #8
   258e8:	beq	25914 <__assert_fail@plt+0x146b8>
   258ec:	str	r5, [sp]
   258f0:	mov	r0, r8
   258f4:	add	r3, sp, #148	; 0x94
   258f8:	mov	r2, r7
   258fc:	ldr	r1, [sp, #24]
   25900:	bl	23938 <__assert_fail@plt+0x126dc>
   25904:	cmp	r0, #0
   25908:	bne	25998 <__assert_fail@plt+0x1473c>
   2590c:	ldr	r5, [sp, #188]	; 0xbc
   25910:	ldr	r9, [fp, #8]
   25914:	add	r4, r4, #1
   25918:	cmp	r4, r9
   2591c:	bge	25988 <__assert_fail@plt+0x1472c>
   25920:	ldr	r2, [fp, #12]
   25924:	ldr	r8, [sl]
   25928:	ldr	r7, [r2, r4, lsl #2]
   2592c:	add	r2, r8, r7, lsl #3
   25930:	ldrb	r1, [r2, #6]
   25934:	tst	r1, #16
   25938:	beq	25914 <__assert_fail@plt+0x146b8>
   2593c:	ldr	r6, [r2, #4]
   25940:	ldr	r3, [pc, #2164]	; 261bc <__assert_fail@plt+0x14f60>
   25944:	tst	r6, r3
   25948:	beq	258ec <__assert_fail@plt+0x14690>
   2594c:	ldr	r2, [sp, #236]	; 0xec
   25950:	mov	r1, r5
   25954:	add	r0, sp, #148	; 0x94
   25958:	bl	21d9c <__assert_fail@plt+0x10b40>
   2595c:	ldr	r3, [pc, #2140]	; 261c0 <__assert_fail@plt+0x14f64>
   25960:	and	r6, r3, r6, lsr #8
   25964:	tst	r6, #4
   25968:	bne	258bc <__assert_fail@plt+0x14660>
   2596c:	tst	r6, #8
   25970:	beq	258cc <__assert_fail@plt+0x14670>
   25974:	tst	r0, #1
   25978:	beq	258cc <__assert_fail@plt+0x14670>
   2597c:	add	r4, r4, #1
   25980:	cmp	r4, r9
   25984:	blt	25920 <__assert_fail@plt+0x146c4>
   25988:	ldr	r9, [sp, #64]	; 0x40
   2598c:	mov	r3, #0
   25990:	str	r3, [sp, #124]	; 0x7c
   25994:	b	2551c <__assert_fail@plt+0x142c0>
   25998:	ldr	r3, [sp, #268]	; 0x10c
   2599c:	ldr	r6, [sp, #188]	; 0xbc
   259a0:	cmp	r3, r0
   259a4:	add	r6, r0, r6
   259a8:	movlt	r3, r0
   259ac:	mov	r1, r6
   259b0:	add	r0, sp, #148	; 0x94
   259b4:	str	r3, [sp, #268]	; 0x10c
   259b8:	bl	1f3c4 <__assert_fail@plt+0xe168>
   259bc:	cmp	r0, #0
   259c0:	str	r0, [sp, #136]	; 0x88
   259c4:	bne	25b00 <__assert_fail@plt+0x148a4>
   259c8:	ldr	r3, [sl, #12]
   259cc:	ldr	r8, [sp, #248]	; 0xf8
   259d0:	ldr	r2, [sl, #24]
   259d4:	ldr	r3, [r3, r7, lsl #2]
   259d8:	ldr	r1, [r8, r6, lsl #2]
   259dc:	add	r3, r3, r3, lsl #1
   259e0:	cmp	r1, #0
   259e4:	add	r2, r2, r3, lsl #2
   259e8:	beq	25ac8 <__assert_fail@plt+0x1486c>
   259ec:	ldr	r1, [r1, #40]	; 0x28
   259f0:	add	r0, sp, #284	; 0x11c
   259f4:	bl	20100 <__assert_fail@plt+0xeea4>
   259f8:	cmp	r0, #0
   259fc:	str	r0, [sp, #136]	; 0x88
   25a00:	bne	25b00 <__assert_fail@plt+0x148a4>
   25a04:	ldr	r2, [sp, #236]	; 0xec
   25a08:	sub	r1, r6, #1
   25a0c:	add	r0, sp, #148	; 0x94
   25a10:	bl	21d9c <__assert_fail@plt+0x10b40>
   25a14:	add	r2, sp, #284	; 0x11c
   25a18:	mov	r1, sl
   25a1c:	ldr	r7, [sp, #248]	; 0xf8
   25a20:	mov	r3, r0
   25a24:	add	r0, sp, #136	; 0x88
   25a28:	bl	2024c <__assert_fail@plt+0xeff0>
   25a2c:	str	r0, [r7, r6, lsl #2]
   25a30:	ldr	r0, [sp, #292]	; 0x124
   25a34:	bl	13098 <__assert_fail@plt+0x1e3c>
   25a38:	ldr	r7, [sp, #248]	; 0xf8
   25a3c:	ldr	r3, [r7, r6, lsl #2]
   25a40:	cmp	r3, #0
   25a44:	bne	2590c <__assert_fail@plt+0x146b0>
   25a48:	ldr	r0, [sp, #136]	; 0x88
   25a4c:	cmp	r0, #0
   25a50:	beq	2590c <__assert_fail@plt+0x146b0>
   25a54:	ldr	r9, [sp, #64]	; 0x40
   25a58:	b	25b08 <__assert_fail@plt+0x148ac>
   25a5c:	ldr	r2, [sp, #196]	; 0xc4
   25a60:	cmp	r3, r2
   25a64:	bge	25504 <__assert_fail@plt+0x142a8>
   25a68:	add	r1, r5, #2
   25a6c:	add	r0, sp, #148	; 0x94
   25a70:	bl	1e910 <__assert_fail@plt+0xd6b4>
   25a74:	cmp	r0, #0
   25a78:	str	r0, [sp, #124]	; 0x7c
   25a7c:	bne	25b70 <__assert_fail@plt+0x14914>
   25a80:	ldr	r5, [sp, #188]	; 0xbc
   25a84:	b	25510 <__assert_fail@plt+0x142b4>
   25a88:	ldr	r5, [fp, #48]	; 0x30
   25a8c:	cmp	r5, #0
   25a90:	beq	261f8 <__assert_fail@plt+0x14f9c>
   25a94:	ldr	r1, [sp, #188]	; 0xbc
   25a98:	ldr	r2, [sp, #236]	; 0xec
   25a9c:	sub	r1, r1, #1
   25aa0:	add	r0, sp, #148	; 0x94
   25aa4:	bl	21d9c <__assert_fail@plt+0x10b40>
   25aa8:	tst	r0, #1
   25aac:	addne	r4, r4, #256	; 0x100
   25ab0:	ldr	r4, [r5, r4, lsl #2]
   25ab4:	b	2553c <__assert_fail@plt+0x142e0>
   25ab8:	ldr	r2, [sp, #196]	; 0xc4
   25abc:	cmp	r3, r2
   25ac0:	bge	25510 <__assert_fail@plt+0x142b4>
   25ac4:	b	25a68 <__assert_fail@plt+0x1480c>
   25ac8:	ldm	r2, {r0, r1, r2}
   25acc:	add	r3, sp, #284	; 0x11c
   25ad0:	stm	r3, {r0, r1, r2}
   25ad4:	sub	r1, r6, #1
   25ad8:	ldr	r2, [sp, #236]	; 0xec
   25adc:	add	r0, sp, #148	; 0x94
   25ae0:	bl	21d9c <__assert_fail@plt+0x10b40>
   25ae4:	add	r2, sp, #284	; 0x11c
   25ae8:	mov	r1, sl
   25aec:	mov	r3, r0
   25af0:	add	r0, sp, #136	; 0x88
   25af4:	bl	2024c <__assert_fail@plt+0xeff0>
   25af8:	str	r0, [r8, r6, lsl #2]
   25afc:	b	25a38 <__assert_fail@plt+0x147dc>
   25b00:	ldr	r9, [sp, #64]	; 0x40
   25b04:	ldr	r7, [sp, #248]	; 0xf8
   25b08:	cmp	r7, #0
   25b0c:	str	r0, [sp, #124]	; 0x7c
   25b10:	beq	25bac <__assert_fail@plt+0x14950>
   25b14:	mov	r4, #0
   25b18:	b	25548 <__assert_fail@plt+0x142ec>
   25b1c:	ldr	r3, [sp, #28]
   25b20:	ldr	r7, [sp, #248]	; 0xf8
   25b24:	ldr	r4, [r3, #76]	; 0x4c
   25b28:	cmp	r4, #0
   25b2c:	beq	25c30 <__assert_fail@plt+0x149d4>
   25b30:	ldr	r3, [sp, #20]
   25b34:	add	r0, sp, #148	; 0x94
   25b38:	mov	r2, r3
   25b3c:	ldr	r1, [r7, r3, lsl #2]
   25b40:	bl	2278c <__assert_fail@plt+0x11530>
   25b44:	str	r0, [sp, #244]	; 0xf4
   25b48:	b	2605c <__assert_fail@plt+0x14e00>
   25b4c:	tst	r0, #4
   25b50:	beq	2548c <__assert_fail@plt+0x14230>
   25b54:	mov	r3, r0
   25b58:	ldr	r2, [fp, #40]	; 0x28
   25b5c:	mov	r1, r4
   25b60:	add	r0, sp, #124	; 0x7c
   25b64:	bl	2024c <__assert_fail@plt+0xeff0>
   25b68:	subs	fp, r0, #0
   25b6c:	bne	2548c <__assert_fail@plt+0x14230>
   25b70:	ldr	r7, [sp, #248]	; 0xf8
   25b74:	mov	r3, #12
   25b78:	str	r3, [sp, #48]	; 0x30
   25b7c:	mov	r0, r7
   25b80:	bl	13098 <__assert_fail@plt+0x1e3c>
   25b84:	ldr	r3, [sp, #28]
   25b88:	ldr	r3, [r3, #76]	; 0x4c
   25b8c:	cmp	r3, #0
   25b90:	bne	2619c <__assert_fail@plt+0x14f40>
   25b94:	add	r0, sp, #148	; 0x94
   25b98:	bl	1ed40 <__assert_fail@plt+0xdae4>
   25b9c:	ldr	r0, [sp, #48]	; 0x30
   25ba0:	add	sp, sp, #428	; 0x1ac
   25ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25ba8:	mov	r7, r0
   25bac:	mov	r3, #12
   25bb0:	str	r3, [sp, #48]	; 0x30
   25bb4:	b	25b7c <__assert_fail@plt+0x14920>
   25bb8:	ldr	r2, [sp, #20]
   25bbc:	add	r1, sp, #284	; 0x11c
   25bc0:	add	r0, sp, #148	; 0x94
   25bc4:	str	r3, [sp, #288]	; 0x120
   25bc8:	str	r2, [sp, #296]	; 0x128
   25bcc:	str	r3, [sp, #300]	; 0x12c
   25bd0:	str	r3, [sp, #304]	; 0x130
   25bd4:	str	r3, [sp, #308]	; 0x134
   25bd8:	str	r5, [sp, #284]	; 0x11c
   25bdc:	str	r9, [sp, #292]	; 0x124
   25be0:	bl	24c74 <__assert_fail@plt+0x13a18>
   25be4:	mov	r8, r0
   25be8:	ldr	r0, [sp, #308]	; 0x134
   25bec:	bl	13098 <__assert_fail@plt+0x1e3c>
   25bf0:	cmp	r8, #0
   25bf4:	bne	26344 <__assert_fail@plt+0x150e8>
   25bf8:	ldr	r3, [r5]
   25bfc:	cmp	r3, #0
   25c00:	beq	255c8 <__assert_fail@plt+0x1436c>
   25c04:	ldr	r0, [sp, #248]	; 0xf8
   25c08:	bl	13098 <__assert_fail@plt+0x1e3c>
   25c0c:	ldr	r3, [sp, #20]
   25c10:	mov	r0, #0
   25c14:	str	r3, [sp, #240]	; 0xf0
   25c18:	str	r5, [sp, #248]	; 0xf8
   25c1c:	str	r9, [sp, #244]	; 0xf4
   25c20:	bl	13098 <__assert_fail@plt+0x1e3c>
   25c24:	mov	r0, #0
   25c28:	bl	13098 <__assert_fail@plt+0x1e3c>
   25c2c:	ldr	r7, [sp, #248]	; 0xf8
   25c30:	ldr	r3, [sp, #76]	; 0x4c
   25c34:	cmp	r3, #0
   25c38:	beq	25b7c <__assert_fail@plt+0x14920>
   25c3c:	cmp	r3, #1
   25c40:	bls	25c68 <__assert_fail@plt+0x14a0c>
   25c44:	ldr	r3, [sp, #76]	; 0x4c
   25c48:	mvn	r1, #0
   25c4c:	sub	r2, r3, #-536870911	; 0xe0000001
   25c50:	ldr	r3, [sp, #476]	; 0x1dc
   25c54:	add	r2, r3, r2, lsl #3
   25c58:	str	r1, [r3, #12]
   25c5c:	str	r1, [r3, #8]!
   25c60:	cmp	r2, r3
   25c64:	bne	25c58 <__assert_fail@plt+0x149fc>
   25c68:	ldr	r3, [sp, #44]	; 0x2c
   25c6c:	ldr	r1, [sp, #476]	; 0x1dc
   25c70:	ldr	r2, [sp, #240]	; 0xf0
   25c74:	ldrb	r3, [r3, #28]
   25c78:	str	r2, [r1, #4]
   25c7c:	ldr	r2, [sp, #76]	; 0x4c
   25c80:	mov	r4, #0
   25c84:	lsr	r3, r3, #4
   25c88:	eor	r3, r3, #1
   25c8c:	cmp	r2, #1
   25c90:	moveq	r3, #0
   25c94:	andne	r3, r3, #1
   25c98:	cmp	r3, #0
   25c9c:	mov	r3, r1
   25ca0:	moveq	r3, r2
   25ca4:	str	r4, [r1]
   25ca8:	lsleq	r3, r3, #3
   25cac:	streq	r3, [sp, #20]
   25cb0:	beq	25e6c <__assert_fail@plt+0x14c10>
   25cb4:	ldr	r2, [sp, #28]
   25cb8:	ldrb	r3, [r2, #88]	; 0x58
   25cbc:	tst	r3, #1
   25cc0:	beq	265a4 <__assert_fail@plt+0x15348>
   25cc4:	ldr	r3, [r2, #76]	; 0x4c
   25cc8:	cmp	r3, #0
   25ccc:	ble	265a4 <__assert_fail@plt+0x15348>
   25cd0:	ldr	r1, [sp, #44]	; 0x2c
   25cd4:	mov	r2, #2
   25cd8:	mov	r3, #16
   25cdc:	ldr	r1, [r1]
   25ce0:	add	r8, sp, #296	; 0x128
   25ce4:	mov	r0, #48	; 0x30
   25ce8:	str	r1, [sp, #24]
   25cec:	str	r4, [sp, #136]	; 0x88
   25cf0:	str	r4, [sp, #144]	; 0x90
   25cf4:	str	r4, [sp, #284]	; 0x11c
   25cf8:	str	r2, [sp, #140]	; 0x8c
   25cfc:	str	r3, [sp, #288]	; 0x120
   25d00:	str	r8, [sp, #292]	; 0x124
   25d04:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   25d08:	cmp	r0, #0
   25d0c:	str	r0, [sp, #144]	; 0x90
   25d10:	beq	26850 <__assert_fail@plt+0x155f4>
   25d14:	ldr	r3, [sp, #284]	; 0x11c
   25d18:	ldr	r2, [sp, #76]	; 0x4c
   25d1c:	add	r9, sp, #124	; 0x7c
   25d20:	cmp	r2, r3
   25d24:	ldr	r3, [sp, #24]
   25d28:	ldr	fp, [r3, #72]	; 0x48
   25d2c:	str	r4, [sp, #124]	; 0x7c
   25d30:	str	r4, [r9, #4]
   25d34:	str	r4, [r9, #8]
   25d38:	bhi	26848 <__assert_fail@plt+0x155ec>
   25d3c:	ldr	r3, [sp, #76]	; 0x4c
   25d40:	add	sl, sp, #136	; 0x88
   25d44:	str	r3, [sp, #284]	; 0x11c
   25d48:	ldr	r5, [sp, #76]	; 0x4c
   25d4c:	ldr	r3, [sp, #292]	; 0x124
   25d50:	ldr	r1, [sp, #476]	; 0x1dc
   25d54:	mov	r0, r3
   25d58:	str	r3, [sp, #16]
   25d5c:	lsl	r3, r5, #3
   25d60:	mov	r2, r3
   25d64:	str	r3, [sp, #20]
   25d68:	bl	11004 <memcpy@plt>
   25d6c:	add	r3, sp, #424	; 0x1a8
   25d70:	mov	r2, r3
   25d74:	ldr	r3, [sp, #476]	; 0x1dc
   25d78:	str	r8, [sp, #12]
   25d7c:	mov	r8, r5
   25d80:	ldr	r4, [r3]
   25d84:	lsl	r1, r5, #4
   25d88:	str	r4, [r2, #-304]!	; 0xfffffed0
   25d8c:	str	r1, [sp, #44]	; 0x2c
   25d90:	str	r2, [sp, #40]	; 0x28
   25d94:	ldr	r3, [sp, #476]	; 0x1dc
   25d98:	ldr	r3, [r3, #4]
   25d9c:	cmp	r4, r3
   25da0:	bgt	25e28 <__assert_fail@plt+0x14bcc>
   25da4:	ldr	r2, [sp, #24]
   25da8:	lsl	r6, fp, #3
   25dac:	mov	r7, fp
   25db0:	ldr	r0, [r2]
   25db4:	add	r1, r0, r6
   25db8:	ldrb	r2, [r1, #4]
   25dbc:	cmp	r2, #8
   25dc0:	beq	26698 <__assert_fail@plt+0x1543c>
   25dc4:	cmp	r2, #9
   25dc8:	beq	26648 <__assert_fail@plt+0x153ec>
   25dcc:	cmp	r3, r4
   25dd0:	beq	2658c <__assert_fail@plt+0x15330>
   25dd4:	cmp	sl, #0
   25dd8:	beq	26428 <__assert_fail@plt+0x151cc>
   25ddc:	mov	r2, fp
   25de0:	add	r1, sp, #132	; 0x84
   25de4:	ldr	r0, [sp, #128]	; 0x80
   25de8:	bl	1f57c <__assert_fail@plt+0xe320>
   25dec:	cmp	r0, #0
   25df0:	beq	26428 <__assert_fail@plt+0x151cc>
   25df4:	ldr	r2, [sp, #476]	; 0x1dc
   25df8:	mov	r3, #0
   25dfc:	ldr	r1, [sp, #476]	; 0x1dc
   25e00:	ldr	r1, [r1, r3, lsl #3]
   25e04:	add	r3, r3, #1
   25e08:	cmp	r1, #0
   25e0c:	blt	25e1c <__assert_fail@plt+0x14bc0>
   25e10:	ldr	r1, [r2, #4]
   25e14:	cmn	r1, #1
   25e18:	beq	263f8 <__assert_fail@plt+0x1519c>
   25e1c:	cmp	r8, r3
   25e20:	add	r2, r2, #8
   25e24:	bne	25dfc <__assert_fail@plt+0x14ba0>
   25e28:	ldr	r0, [sp, #132]	; 0x84
   25e2c:	ldr	r8, [sp, #12]
   25e30:	bl	13098 <__assert_fail@plt+0x1e3c>
   25e34:	ldr	r0, [sp, #292]	; 0x124
   25e38:	cmp	r0, r8
   25e3c:	beq	25e44 <__assert_fail@plt+0x14be8>
   25e40:	bl	13098 <__assert_fail@plt+0x1e3c>
   25e44:	mov	r2, #0
   25e48:	mov	r3, #16
   25e4c:	mov	r0, sl
   25e50:	str	r8, [sp, #292]	; 0x124
   25e54:	str	r2, [sp, #284]	; 0x11c
   25e58:	str	r3, [sp, #288]	; 0x120
   25e5c:	bl	1ef88 <__assert_fail@plt+0xdd2c>
   25e60:	cmp	r0, #0
   25e64:	bne	263cc <__assert_fail@plt+0x15170>
   25e68:	ldr	r7, [sp, #248]	; 0xf8
   25e6c:	ldr	r3, [sp, #476]	; 0x1dc
   25e70:	ldr	r2, [sp, #20]
   25e74:	ldrb	r6, [sp, #224]	; 0xe0
   25e78:	ldr	r5, [sp, #176]	; 0xb0
   25e7c:	ldr	r8, [sp, #160]	; 0xa0
   25e80:	ldr	r9, [sp, #180]	; 0xb4
   25e84:	ldr	lr, [sp, #116]	; 0x74
   25e88:	add	r4, r3, r2
   25e8c:	mov	ip, r3
   25e90:	add	r1, r3, #4
   25e94:	ldr	r2, [r1, #-4]
   25e98:	cmn	r2, #1
   25e9c:	beq	25ebc <__assert_fail@plt+0x14c60>
   25ea0:	cmp	r6, #0
   25ea4:	bne	26564 <__assert_fail@plt+0x15308>
   25ea8:	ldr	r0, [r3, #4]
   25eac:	add	r2, lr, r2
   25eb0:	add	r0, lr, r0
   25eb4:	str	r2, [r1, #-4]
   25eb8:	str	r0, [r3, #4]
   25ebc:	add	r3, r3, #8
   25ec0:	cmp	r4, r3
   25ec4:	add	r1, r1, #8
   25ec8:	bne	25e94 <__assert_fail@plt+0x14c38>
   25ecc:	ldr	r2, [sp, #96]	; 0x60
   25ed0:	cmp	r2, #0
   25ed4:	ble	25f04 <__assert_fail@plt+0x14ca8>
   25ed8:	ldr	r2, [sp, #96]	; 0x60
   25edc:	ldr	r1, [sp, #76]	; 0x4c
   25ee0:	ldr	r0, [sp, #476]	; 0x1dc
   25ee4:	add	r1, r2, r1
   25ee8:	mvn	r2, #0
   25eec:	add	r1, r0, r1, lsl #3
   25ef0:	str	r2, [r3]
   25ef4:	str	r2, [r3, #4]
   25ef8:	add	r3, r3, #8
   25efc:	cmp	r3, r1
   25f00:	bne	25ef0 <__assert_fail@plt+0x14c94>
   25f04:	ldr	r3, [sp, #28]
   25f08:	ldr	r3, [r3, #132]	; 0x84
   25f0c:	cmp	r3, #0
   25f10:	beq	25b7c <__assert_fail@plt+0x14920>
   25f14:	mov	r2, #0
   25f18:	ldr	lr, [sp, #76]	; 0x4c
   25f1c:	b	25f5c <__assert_fail@plt+0x14d00>
   25f20:	ldr	r0, [r3]
   25f24:	cmp	r2, r0
   25f28:	add	r4, r0, #1
   25f2c:	mov	r2, r1
   25f30:	beq	25f54 <__assert_fail@plt+0x14cf8>
   25f34:	ldr	r1, [sp, #476]	; 0x1dc
   25f38:	ldr	r0, [sp, #476]	; 0x1dc
   25f3c:	ldr	r1, [r1, r4, lsl #3]
   25f40:	str	r1, [ip, #8]
   25f44:	ldr	r1, [r3]
   25f48:	add	r1, r0, r1, lsl #3
   25f4c:	ldr	r1, [r1, #12]
   25f50:	str	r1, [ip, #12]
   25f54:	add	r3, r3, #4
   25f58:	add	ip, ip, #8
   25f5c:	add	r1, r2, #1
   25f60:	cmp	r1, lr
   25f64:	bne	25f20 <__assert_fail@plt+0x14cc4>
   25f68:	b	25b7c <__assert_fail@plt+0x14920>
   25f6c:	ldr	r3, [sp, #52]	; 0x34
   25f70:	cmp	r3, r6
   25f74:	ble	253d0 <__assert_fail@plt+0x14174>
   25f78:	ldr	r3, [sp, #56]	; 0x38
   25f7c:	ldr	r1, [sp, #88]	; 0x58
   25f80:	ldrb	r2, [r3, r6]
   25f84:	add	r3, r3, r6
   25f88:	ldrb	r2, [r1, r2]
   25f8c:	ldr	r1, [sp, #60]	; 0x3c
   25f90:	ldrb	r2, [r1, r2]
   25f94:	cmp	r2, #0
   25f98:	bne	25418 <__assert_fail@plt+0x141bc>
   25f9c:	add	r2, r6, #1
   25fa0:	ldr	ip, [sp, #60]	; 0x3c
   25fa4:	ldr	lr, [sp, #88]	; 0x58
   25fa8:	ldr	r0, [sp, #52]	; 0x34
   25fac:	b	25fc8 <__assert_fail@plt+0x14d6c>
   25fb0:	ldrb	r1, [r3, #1]!
   25fb4:	add	r2, r2, #1
   25fb8:	ldrb	r1, [lr, r1]
   25fbc:	ldrb	r1, [ip, r1]
   25fc0:	cmp	r1, #0
   25fc4:	bne	2625c <__assert_fail@plt+0x15000>
   25fc8:	cmp	r0, r2
   25fcc:	mov	r6, r2
   25fd0:	bne	25fb0 <__assert_fail@plt+0x14d54>
   25fd4:	b	253c8 <__assert_fail@plt+0x1416c>
   25fd8:	ldr	r3, [sp, #68]	; 0x44
   25fdc:	cmp	r3, r6
   25fe0:	bgt	25614 <__assert_fail@plt+0x143b8>
   25fe4:	ldr	ip, [sp, #116]	; 0x74
   25fe8:	ldr	r1, [sp, #108]	; 0x6c
   25fec:	mov	r0, ip
   25ff0:	ldr	r4, [sp, #60]	; 0x3c
   25ff4:	ldr	lr, [sp, #88]	; 0x58
   25ff8:	ldr	r7, [sp, #68]	; 0x44
   25ffc:	ldr	r8, [sp, #56]	; 0x38
   26000:	ldr	r5, [sp, #72]	; 0x48
   26004:	b	26018 <__assert_fail@plt+0x14dbc>
   26008:	cmp	r7, r6
   2600c:	mov	r0, r6
   26010:	mov	r1, #1
   26014:	bgt	26264 <__assert_fail@plt+0x15008>
   26018:	cmp	r5, r6
   2601c:	mov	r3, #0
   26020:	ldrbgt	r3, [r8, r6]
   26024:	cmp	lr, #0
   26028:	sub	r6, r6, #1
   2602c:	mov	r2, r3
   26030:	ldrbne	r2, [lr, r3]
   26034:	ldrb	r3, [r4, r2]
   26038:	cmp	r3, #0
   2603c:	beq	26008 <__assert_fail@plt+0x14dac>
   26040:	cmp	r1, #0
   26044:	movne	ip, r0
   26048:	strne	r0, [sp, #116]	; 0x74
   2604c:	mov	r6, ip
   26050:	b	25418 <__assert_fail@plt+0x141bc>
   26054:	ldr	r3, [sp, #28]
   26058:	ldr	r4, [r3, #76]	; 0x4c
   2605c:	cmp	r4, #0
   26060:	bne	25734 <__assert_fail@plt+0x144d8>
   26064:	b	25c30 <__assert_fail@plt+0x149d4>
   26068:	ldr	r1, [sp, #72]	; 0x48
   2606c:	b	25184 <__assert_fail@plt+0x13f28>
   26070:	cmp	sl, #0
   26074:	beq	267c4 <__assert_fail@plt+0x15568>
   26078:	ldr	r3, [sp, #16]
   2607c:	str	r9, [sp, #4]
   26080:	str	r3, [sp]
   26084:	mov	r2, r8
   26088:	ldr	r3, [sp, #476]	; 0x1dc
   2608c:	ldr	r1, [sp, #40]	; 0x28
   26090:	mov	r0, sl
   26094:	bl	1f458 <__assert_fail@plt+0xe1fc>
   26098:	subs	fp, r0, #0
   2609c:	bge	264d8 <__assert_fail@plt+0x1527c>
   260a0:	ldr	r0, [sp, #132]	; 0x84
   260a4:	ldr	r8, [sp, #12]
   260a8:	bl	13098 <__assert_fail@plt+0x1e3c>
   260ac:	ldr	r0, [sp, #292]	; 0x124
   260b0:	cmp	r0, r8
   260b4:	beq	260bc <__assert_fail@plt+0x14e60>
   260b8:	bl	13098 <__assert_fail@plt+0x1e3c>
   260bc:	mov	r3, #16
   260c0:	mov	r2, #0
   260c4:	str	r3, [sp, #288]	; 0x120
   260c8:	mov	r0, sl
   260cc:	mov	r3, #1
   260d0:	str	r8, [sp, #292]	; 0x124
   260d4:	str	r2, [sp, #284]	; 0x11c
   260d8:	str	r3, [sp, #48]	; 0x30
   260dc:	bl	1ef88 <__assert_fail@plt+0xdd2c>
   260e0:	ldr	r7, [sp, #248]	; 0xf8
   260e4:	b	25b7c <__assert_fail@plt+0x14920>
   260e8:	ldr	r1, [sp, #172]	; 0xac
   260ec:	ldr	r4, [sp, #60]	; 0x3c
   260f0:	ldr	r5, [sp, #92]	; 0x5c
   260f4:	ldr	r7, [sp, #68]	; 0x44
   260f8:	ldr	r8, [sp, #52]	; 0x34
   260fc:	b	26144 <__assert_fail@plt+0x14ee8>
   26100:	ldr	r0, [sp, #176]	; 0xb0
   26104:	mov	r2, #0
   26108:	cmp	r3, r0
   2610c:	ldrcc	r2, [sp, #152]	; 0x98
   26110:	ldrbcc	r2, [r2, r3]
   26114:	ldrb	r3, [r4, r2]
   26118:	cmp	r3, #0
   2611c:	bne	25418 <__assert_fail@plt+0x141bc>
   26120:	add	r6, r6, r5
   26124:	cmp	r8, r6
   26128:	movge	r3, #0
   2612c:	movlt	r3, #1
   26130:	cmp	r7, r6
   26134:	orrgt	r3, r3, #1
   26138:	cmp	r3, #0
   2613c:	str	r6, [sp, #116]	; 0x74
   26140:	bne	25614 <__assert_fail@plt+0x143b8>
   26144:	ldr	r2, [sp, #180]	; 0xb4
   26148:	sub	r3, r6, r1
   2614c:	cmp	r3, r2
   26150:	bcc	26100 <__assert_fail@plt+0x14ea4>
   26154:	ldr	r2, [sp, #480]	; 0x1e0
   26158:	mov	r1, r6
   2615c:	add	r0, sp, #148	; 0x94
   26160:	bl	21e88 <__assert_fail@plt+0x10c2c>
   26164:	cmp	r0, #0
   26168:	bne	263cc <__assert_fail@plt+0x15170>
   2616c:	ldr	r1, [sp, #172]	; 0xac
   26170:	sub	r3, r6, r1
   26174:	b	26100 <__assert_fail@plt+0x14ea4>
   26178:	ldr	r3, [sp, #12]
   2617c:	ldr	r2, [sp, #236]	; 0xec
   26180:	sub	r1, r3, #1
   26184:	add	r0, sp, #148	; 0x94
   26188:	bl	21d9c <__assert_fail@plt+0x10b40>
   2618c:	tst	r0, #1
   26190:	beq	26234 <__assert_fail@plt+0x14fd8>
   26194:	ldr	fp, [r4, #40]	; 0x28
   26198:	b	2548c <__assert_fail@plt+0x14230>
   2619c:	add	r0, sp, #148	; 0x94
   261a0:	bl	1eee4 <__assert_fail@plt+0xdc88>
   261a4:	ldr	r0, [sp, #280]	; 0x118
   261a8:	bl	13098 <__assert_fail@plt+0x1e3c>
   261ac:	ldr	r0, [sp, #264]	; 0x108
   261b0:	bl	13098 <__assert_fail@plt+0x1e3c>
   261b4:	b	25b94 <__assert_fail@plt+0x14938>
   261b8:	beq	fead0c68 <opterr@@GLIBC_2.4+0xfea91ad8>
   261bc:	andeq	pc, r3, r0, lsl #30
   261c0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   261c4:	mov	r0, r5
   261c8:	bl	13098 <__assert_fail@plt+0x1e3c>
   261cc:	mov	r0, r6
   261d0:	bl	13098 <__assert_fail@plt+0x1e3c>
   261d4:	add	r0, sp, #148	; 0x94
   261d8:	bl	1eee4 <__assert_fail@plt+0xdc88>
   261dc:	ldr	r6, [sp, #116]	; 0x74
   261e0:	b	255e4 <__assert_fail@plt+0x14388>
   261e4:	ldr	r3, [sp, #28]
   261e8:	ldrb	r3, [r3, #88]	; 0x58
   261ec:	tst	r3, #2
   261f0:	bne	25220 <__assert_fail@plt+0x13fc4>
   261f4:	b	25244 <__assert_fail@plt+0x13fe8>
   261f8:	mov	r1, fp
   261fc:	ldr	r0, [sp, #232]	; 0xe8
   26200:	bl	21308 <__assert_fail@plt+0x100ac>
   26204:	cmp	r0, #0
   26208:	bne	2552c <__assert_fail@plt+0x142d0>
   2620c:	ldr	r7, [sp, #248]	; 0xf8
   26210:	mov	r3, #12
   26214:	cmp	r7, #0
   26218:	str	r3, [sp, #124]	; 0x7c
   2621c:	bne	25b14 <__assert_fail@plt+0x148b8>
   26220:	b	25bac <__assert_fail@plt+0x14950>
   26224:	ldr	r3, [sp, #104]	; 0x68
   26228:	str	r3, [sp, #16]
   2622c:	ldrb	r3, [fp, #52]	; 0x34
   26230:	b	254b8 <__assert_fail@plt+0x1425c>
   26234:	cmp	r0, #0
   26238:	beq	2548c <__assert_fail@plt+0x14230>
   2623c:	and	r3, r0, #6
   26240:	cmp	r3, #6
   26244:	ldreq	fp, [r4, #48]	; 0x30
   26248:	beq	2548c <__assert_fail@plt+0x14230>
   2624c:	tst	r0, #2
   26250:	beq	25b4c <__assert_fail@plt+0x148f0>
   26254:	ldr	fp, [r4, #44]	; 0x2c
   26258:	b	2548c <__assert_fail@plt+0x14230>
   2625c:	str	r6, [sp, #116]	; 0x74
   26260:	b	25418 <__assert_fail@plt+0x141bc>
   26264:	str	r6, [sp, #116]	; 0x74
   26268:	ldr	r7, [sp, #248]	; 0xf8
   2626c:	str	r1, [sp, #48]	; 0x30
   26270:	b	25b7c <__assert_fail@plt+0x14920>
   26274:	ldrsb	r3, [fp, #52]	; 0x34
   26278:	cmp	r3, #0
   2627c:	blt	2636c <__assert_fail@plt+0x15110>
   26280:	ldr	r3, [sp, #40]	; 0x28
   26284:	cmp	r3, #0
   26288:	ldr	r3, [sp, #12]
   2628c:	str	r3, [sp, #20]
   26290:	movne	r3, #1
   26294:	strne	r3, [sp, #36]	; 0x24
   26298:	bne	254d0 <__assert_fail@plt+0x14274>
   2629c:	b	256c4 <__assert_fail@plt+0x14468>
   262a0:	ldr	r7, [sp, #248]	; 0xf8
   262a4:	b	25bac <__assert_fail@plt+0x14950>
   262a8:	mov	r3, #8
   262ac:	b	252e4 <__assert_fail@plt+0x14088>
   262b0:	add	r4, fp, #8
   262b4:	add	r5, fp, #12
   262b8:	mov	r1, r4
   262bc:	mov	r2, r5
   262c0:	mov	r3, #0
   262c4:	add	r0, sp, #148	; 0x94
   262c8:	bl	2286c <__assert_fail@plt+0x11610>
   262cc:	cmp	r0, #0
   262d0:	str	r0, [sp, #124]	; 0x7c
   262d4:	bne	26388 <__assert_fail@plt+0x1512c>
   262d8:	ldrb	r3, [fp, #52]	; 0x34
   262dc:	tst	r3, #64	; 0x40
   262e0:	bne	263d4 <__assert_fail@plt+0x15178>
   262e4:	ldr	r2, [sp, #108]	; 0x6c
   262e8:	str	r2, [sp, #16]
   262ec:	b	254b8 <__assert_fail@plt+0x1425c>
   262f0:	mov	r0, r5
   262f4:	bl	13098 <__assert_fail@plt+0x1e3c>
   262f8:	mov	r0, r6
   262fc:	bl	13098 <__assert_fail@plt+0x1e3c>
   26300:	mov	r3, #12
   26304:	str	r3, [sp, #48]	; 0x30
   26308:	ldr	r7, [sp, #248]	; 0xf8
   2630c:	b	25b7c <__assert_fail@plt+0x14920>
   26310:	mov	r7, fp
   26314:	ldr	fp, [sp, #12]
   26318:	mov	r3, r7
   2631c:	mov	r2, r6
   26320:	mov	r1, r5
   26324:	mov	r0, fp
   26328:	str	r4, [sp, #20]
   2632c:	bl	20780 <__assert_fail@plt+0xf524>
   26330:	mov	r8, r0
   26334:	mov	r0, r6
   26338:	bl	13098 <__assert_fail@plt+0x1e3c>
   2633c:	cmp	r8, #0
   26340:	beq	25c04 <__assert_fail@plt+0x149a8>
   26344:	mov	r6, #0
   26348:	mov	r0, r5
   2634c:	bl	13098 <__assert_fail@plt+0x1e3c>
   26350:	mov	r0, r6
   26354:	bl	13098 <__assert_fail@plt+0x1e3c>
   26358:	cmp	r8, #1
   2635c:	beq	255d8 <__assert_fail@plt+0x1437c>
   26360:	str	r8, [sp, #48]	; 0x30
   26364:	ldr	r7, [sp, #248]	; 0xf8
   26368:	b	25b7c <__assert_fail@plt+0x14920>
   2636c:	ldr	r2, [sp, #12]
   26370:	mov	r1, fp
   26374:	add	r0, sp, #148	; 0x94
   26378:	bl	2278c <__assert_fail@plt+0x11530>
   2637c:	cmp	r0, #0
   26380:	beq	254c0 <__assert_fail@plt+0x14264>
   26384:	b	26280 <__assert_fail@plt+0x15024>
   26388:	str	r0, [sp, #20]
   2638c:	b	256c4 <__assert_fail@plt+0x14468>
   26390:	bl	13098 <__assert_fail@plt+0x1e3c>
   26394:	mov	r0, r5
   26398:	bl	13098 <__assert_fail@plt+0x1e3c>
   2639c:	mov	r3, #12
   263a0:	str	r3, [sp, #48]	; 0x30
   263a4:	ldr	r7, [sp, #248]	; 0xf8
   263a8:	b	25b7c <__assert_fail@plt+0x14920>
   263ac:	cmp	r0, #0
   263b0:	mov	r4, r0
   263b4:	bne	25564 <__assert_fail@plt+0x14308>
   263b8:	b	256a4 <__assert_fail@plt+0x14448>
   263bc:	mov	r4, r0
   263c0:	b	25564 <__assert_fail@plt+0x14308>
   263c4:	mov	r8, r7
   263c8:	b	26348 <__assert_fail@plt+0x150ec>
   263cc:	str	r0, [sp, #48]	; 0x30
   263d0:	b	260e0 <__assert_fail@plt+0x14e84>
   263d4:	mov	r2, r5
   263d8:	mov	r1, r4
   263dc:	add	r0, sp, #148	; 0x94
   263e0:	bl	2435c <__assert_fail@plt+0x13100>
   263e4:	cmp	r0, #0
   263e8:	str	r0, [sp, #124]	; 0x7c
   263ec:	bne	26388 <__assert_fail@plt+0x1512c>
   263f0:	ldrb	r3, [fp, #52]	; 0x34
   263f4:	b	262e4 <__assert_fail@plt+0x15088>
   263f8:	ldr	r3, [sp, #16]
   263fc:	str	r9, [sp, #4]
   26400:	str	r3, [sp]
   26404:	mov	r2, r8
   26408:	ldr	r3, [sp, #476]	; 0x1dc
   2640c:	ldr	r1, [sp, #40]	; 0x28
   26410:	mov	r0, sl
   26414:	bl	1f458 <__assert_fail@plt+0xe1fc>
   26418:	subs	fp, r0, #0
   2641c:	blt	25e28 <__assert_fail@plt+0x14bcc>
   26420:	mov	r7, fp
   26424:	lsl	r6, fp, #3
   26428:	ldr	r5, [sp, #232]	; 0xe8
   2642c:	ldr	r0, [r5]
   26430:	add	r1, r0, r6
   26434:	ldrb	r3, [r1, #4]
   26438:	tst	r3, #8
   2643c:	beq	264e0 <__assert_fail@plt+0x15284>
   26440:	ldr	ip, [sp, #120]	; 0x78
   26444:	ldr	r3, [sp, #248]	; 0xf8
   26448:	mov	r2, fp
   2644c:	add	r1, sp, #132	; 0x84
   26450:	ldr	r0, [sp, #128]	; 0x80
   26454:	ldr	r4, [r3, ip, lsl #2]
   26458:	bl	1f57c <__assert_fail@plt+0xe320>
   2645c:	ldr	r5, [r5, #20]
   26460:	cmp	r0, #0
   26464:	beq	26824 <__assert_fail@plt+0x155c8>
   26468:	add	fp, fp, fp, lsl #1
   2646c:	add	r2, r5, fp, lsl #2
   26470:	ldr	r7, [r2, #4]
   26474:	cmp	r7, #0
   26478:	ble	26078 <__assert_fail@plt+0x14e1c>
   2647c:	ldr	r3, [r4, #8]
   26480:	ldr	r5, [r2, #8]
   26484:	str	r3, [sp, #32]
   26488:	sub	r5, r5, #4
   2648c:	add	r3, r4, #12
   26490:	mvn	fp, #0
   26494:	mov	r4, #0
   26498:	str	r3, [sp, #36]	; 0x24
   2649c:	ldr	r6, [r5, #4]!
   264a0:	ldr	r1, [sp, #36]	; 0x24
   264a4:	mov	r2, r6
   264a8:	ldr	r0, [sp, #32]
   264ac:	bl	1f57c <__assert_fail@plt+0xe320>
   264b0:	add	r4, r4, #1
   264b4:	cmp	r0, #0
   264b8:	beq	264c8 <__assert_fail@plt+0x1526c>
   264bc:	cmn	fp, #1
   264c0:	bne	2685c <__assert_fail@plt+0x15600>
   264c4:	mov	fp, r6
   264c8:	cmp	r4, r7
   264cc:	bne	2649c <__assert_fail@plt+0x15240>
   264d0:	cmp	fp, #0
   264d4:	blt	2691c <__assert_fail@plt+0x156c0>
   264d8:	ldr	r4, [sp, #120]	; 0x78
   264dc:	b	25d94 <__assert_fail@plt+0x14b38>
   264e0:	ldrb	r2, [r1, #6]
   264e4:	tst	r2, #16
   264e8:	bne	2678c <__assert_fail@plt+0x15530>
   264ec:	cmp	r3, #4
   264f0:	beq	26704 <__assert_fail@plt+0x154a8>
   264f4:	ldr	r4, [sp, #120]	; 0x78
   264f8:	mov	r2, r4
   264fc:	add	r0, sp, #148	; 0x94
   26500:	bl	22658 <__assert_fail@plt+0x113fc>
   26504:	cmp	r0, #0
   26508:	beq	26078 <__assert_fail@plt+0x14e1c>
   2650c:	ldr	r3, [r5, #12]
   26510:	add	r4, r4, #1
   26514:	ldr	fp, [r3, r7, lsl #2]
   26518:	cmp	sl, #0
   2651c:	str	r4, [sp, #120]	; 0x78
   26520:	beq	26558 <__assert_fail@plt+0x152fc>
   26524:	ldr	r3, [sp, #240]	; 0xf0
   26528:	cmp	r4, r3
   2652c:	bgt	26078 <__assert_fail@plt+0x14e1c>
   26530:	ldr	r3, [sp, #248]	; 0xf8
   26534:	ldr	r3, [r3, r4, lsl #2]
   26538:	cmp	r3, #0
   2653c:	beq	26078 <__assert_fail@plt+0x14e1c>
   26540:	mov	r2, fp
   26544:	add	r1, r3, #12
   26548:	ldr	r0, [r3, #8]
   2654c:	bl	1f57c <__assert_fail@plt+0xe320>
   26550:	cmp	r0, #0
   26554:	beq	26078 <__assert_fail@plt+0x14e1c>
   26558:	mov	r3, #0
   2655c:	str	r3, [sp, #128]	; 0x80
   26560:	b	264d0 <__assert_fail@plt+0x15274>
   26564:	cmp	r2, r5
   26568:	moveq	r2, r9
   2656c:	ldrne	r2, [r8, r2, lsl #2]
   26570:	str	r2, [r1, #-4]
   26574:	ldr	r0, [r3, #4]
   26578:	cmp	r5, r0
   2657c:	moveq	r0, r9
   26580:	ldrne	r0, [r8, r0, lsl #2]
   26584:	str	r0, [r3, #4]
   26588:	b	25eac <__assert_fail@plt+0x14c50>
   2658c:	ldr	r3, [sp, #244]	; 0xf4
   26590:	cmp	fp, r3
   26594:	bne	25dd4 <__assert_fail@plt+0x14b78>
   26598:	cmp	sl, #0
   2659c:	beq	25e28 <__assert_fail@plt+0x14bcc>
   265a0:	b	25df4 <__assert_fail@plt+0x14b98>
   265a4:	ldr	r3, [sp, #44]	; 0x2c
   265a8:	add	r9, sp, #124	; 0x7c
   265ac:	mov	r1, #16
   265b0:	ldr	r3, [r3]
   265b4:	add	r8, sp, #296	; 0x128
   265b8:	mov	r0, r3
   265bc:	str	r3, [sp, #24]
   265c0:	mov	r3, #0
   265c4:	mov	sl, r3
   265c8:	mov	r2, #2
   265cc:	str	r3, [sp, #284]	; 0x11c
   265d0:	str	r1, [sp, #288]	; 0x120
   265d4:	str	r8, [sp, #292]	; 0x124
   265d8:	str	r3, [sp, #136]	; 0x88
   265dc:	ldr	fp, [r0, #72]	; 0x48
   265e0:	str	r3, [sp, #144]	; 0x90
   265e4:	str	r3, [sp, #124]	; 0x7c
   265e8:	str	r2, [sp, #140]	; 0x8c
   265ec:	str	r3, [r9, #4]
   265f0:	str	r3, [r9, #8]
   265f4:	mov	r3, #8
   265f8:	mov	r2, r8
   265fc:	ldr	r1, [sp, #76]	; 0x4c
   26600:	add	r0, sp, #284	; 0x11c
   26604:	bl	2bdd8 <__assert_fail@plt+0x1ab7c>
   26608:	cmp	r0, #0
   2660c:	bne	25d48 <__assert_fail@plt+0x14aec>
   26610:	ldr	r0, [sp, #292]	; 0x124
   26614:	cmp	r0, r8
   26618:	beq	26620 <__assert_fail@plt+0x153c4>
   2661c:	bl	13098 <__assert_fail@plt+0x1e3c>
   26620:	mov	r3, #16
   26624:	mov	r2, #0
   26628:	str	r3, [sp, #288]	; 0x120
   2662c:	mov	r0, sl
   26630:	mov	r3, #12
   26634:	str	r8, [sp, #292]	; 0x124
   26638:	str	r2, [sp, #284]	; 0x11c
   2663c:	str	r3, [sp, #48]	; 0x30
   26640:	bl	1ef88 <__assert_fail@plt+0xdd2c>
   26644:	b	260e0 <__assert_fail@plt+0x14e84>
   26648:	ldr	r2, [r1]
   2664c:	add	r2, r2, #1
   26650:	cmp	r8, r2
   26654:	ble	25dcc <__assert_fail@plt+0x14b70>
   26658:	ldr	r3, [sp, #476]	; 0x1dc
   2665c:	ldr	r0, [r3, r2, lsl #3]
   26660:	add	r3, r3, r2, lsl #3
   26664:	cmp	r4, r0
   26668:	bgt	266c8 <__assert_fail@plt+0x1546c>
   2666c:	ldrb	r1, [r1, #6]
   26670:	tst	r1, #8
   26674:	beq	26688 <__assert_fail@plt+0x1542c>
   26678:	ldr	r1, [sp, #16]
   2667c:	ldr	r2, [r1, r2, lsl #3]
   26680:	cmn	r2, #1
   26684:	bne	266ec <__assert_fail@plt+0x15490>
   26688:	str	r4, [r3, #4]
   2668c:	ldr	r3, [sp, #476]	; 0x1dc
   26690:	ldr	r3, [r3, #4]
   26694:	b	25dcc <__assert_fail@plt+0x14b70>
   26698:	ldr	r2, [r0, fp, lsl #3]
   2669c:	add	r2, r2, #1
   266a0:	cmp	r8, r2
   266a4:	ble	25dcc <__assert_fail@plt+0x14b70>
   266a8:	ldr	r1, [sp, #476]	; 0x1dc
   266ac:	ldr	r3, [sp, #476]	; 0x1dc
   266b0:	add	r3, r3, r2, lsl #3
   266b4:	str	r4, [r1, r2, lsl #3]
   266b8:	mvn	r2, #0
   266bc:	str	r2, [r3, #4]
   266c0:	ldr	r3, [r1, #4]
   266c4:	b	25dcc <__assert_fail@plt+0x14b70>
   266c8:	str	r4, [r3, #4]
   266cc:	ldr	r2, [sp, #20]
   266d0:	ldr	r1, [sp, #476]	; 0x1dc
   266d4:	ldr	r0, [sp, #16]
   266d8:	bl	11004 <memcpy@plt>
   266dc:	ldr	r3, [sp, #476]	; 0x1dc
   266e0:	ldr	r4, [sp, #120]	; 0x78
   266e4:	ldr	r3, [r3, #4]
   266e8:	b	25dcc <__assert_fail@plt+0x14b70>
   266ec:	ldr	r2, [sp, #20]
   266f0:	ldr	r0, [sp, #476]	; 0x1dc
   266f4:	bl	11004 <memcpy@plt>
   266f8:	ldr	r3, [sp, #476]	; 0x1dc
   266fc:	ldr	r3, [r3, #4]
   26700:	b	25dcc <__assert_fail@plt+0x14b70>
   26704:	ldr	r3, [r1]
   26708:	add	r3, r3, #1
   2670c:	cmp	r8, r3
   26710:	ble	26070 <__assert_fail@plt+0x14e14>
   26714:	ldr	r2, [sp, #476]	; 0x1dc
   26718:	ldr	r1, [sp, #476]	; 0x1dc
   2671c:	add	r2, r2, r3, lsl #3
   26720:	cmp	sl, #0
   26724:	ldr	r0, [r1, r3, lsl #3]
   26728:	ldr	r3, [r2, #4]
   2672c:	sub	r4, r3, r0
   26730:	beq	267bc <__assert_fail@plt+0x15560>
   26734:	cmn	r0, #1
   26738:	beq	26078 <__assert_fail@plt+0x14e1c>
   2673c:	cmn	r3, #1
   26740:	beq	26078 <__assert_fail@plt+0x14e1c>
   26744:	cmp	r4, #0
   26748:	beq	267c4 <__assert_fail@plt+0x15568>
   2674c:	ldr	r6, [sp, #120]	; 0x78
   26750:	ldr	r3, [sp, #176]	; 0xb0
   26754:	ldr	r1, [sp, #152]	; 0x98
   26758:	sub	r3, r3, r6
   2675c:	cmp	r4, r3
   26760:	bgt	26078 <__assert_fail@plt+0x14e1c>
   26764:	add	r0, r1, r0
   26768:	mov	r2, r4
   2676c:	add	r1, r1, r6
   26770:	bl	11034 <memcmp@plt>
   26774:	cmp	r0, #0
   26778:	bne	26078 <__assert_fail@plt+0x14e1c>
   2677c:	ldr	r3, [r5, #12]
   26780:	add	r4, r6, r4
   26784:	ldr	fp, [r3, fp, lsl #2]
   26788:	b	26518 <__assert_fail@plt+0x152bc>
   2678c:	ldr	r3, [sp, #120]	; 0x78
   26790:	mov	r2, fp
   26794:	str	r3, [sp]
   26798:	add	r1, r5, #128	; 0x80
   2679c:	add	r3, sp, #148	; 0x94
   267a0:	bl	23938 <__assert_fail@plt+0x126dc>
   267a4:	subs	r4, r0, #0
   267a8:	bne	2681c <__assert_fail@plt+0x155c0>
   267ac:	ldr	r1, [r5]
   267b0:	ldr	r4, [sp, #120]	; 0x78
   267b4:	add	r1, r1, r6
   267b8:	b	264f8 <__assert_fail@plt+0x1529c>
   267bc:	cmp	r4, #0
   267c0:	bne	2681c <__assert_fail@plt+0x155c0>
   267c4:	mov	r1, fp
   267c8:	mov	r0, r9
   267cc:	bl	1efec <__assert_fail@plt+0xdd90>
   267d0:	cmp	r0, #0
   267d4:	beq	26838 <__assert_fail@plt+0x155dc>
   267d8:	add	fp, fp, fp, lsl #1
   267dc:	ldr	r3, [r5, #20]
   267e0:	ldr	r1, [sp, #248]	; 0xf8
   267e4:	add	r3, r3, fp, lsl #2
   267e8:	ldr	r4, [sp, #120]	; 0x78
   267ec:	ldr	r2, [r3, #8]
   267f0:	ldr	r3, [r1, r4, lsl #2]
   267f4:	ldr	fp, [r2]
   267f8:	add	r1, r3, #12
   267fc:	mov	r2, fp
   26800:	ldr	r0, [r3, #8]
   26804:	bl	1f57c <__assert_fail@plt+0xe320>
   26808:	cmp	r0, #0
   2680c:	bne	264d0 <__assert_fail@plt+0x15274>
   26810:	ldr	r1, [r5]
   26814:	add	r1, r1, r6
   26818:	b	264f8 <__assert_fail@plt+0x1529c>
   2681c:	ldr	r6, [sp, #120]	; 0x78
   26820:	b	2677c <__assert_fail@plt+0x15520>
   26824:	mov	r1, fp
   26828:	mov	r0, r9
   2682c:	bl	1efec <__assert_fail@plt+0xdd90>
   26830:	cmp	r0, #0
   26834:	bne	26468 <__assert_fail@plt+0x1520c>
   26838:	ldr	r0, [sp, #132]	; 0x84
   2683c:	ldr	r8, [sp, #12]
   26840:	bl	13098 <__assert_fail@plt+0x1e3c>
   26844:	b	26610 <__assert_fail@plt+0x153b4>
   26848:	add	sl, sp, #136	; 0x88
   2684c:	b	265f4 <__assert_fail@plt+0x15398>
   26850:	mov	r3, #12
   26854:	str	r3, [sp, #48]	; 0x30
   26858:	b	260e0 <__assert_fail@plt+0x14e84>
   2685c:	mov	r2, fp
   26860:	add	r1, sp, #132	; 0x84
   26864:	ldr	r0, [sp, #128]	; 0x80
   26868:	bl	1f57c <__assert_fail@plt+0xe320>
   2686c:	cmp	r0, #0
   26870:	bne	26954 <__assert_fail@plt+0x156f8>
   26874:	cmp	sl, #0
   26878:	beq	264d0 <__assert_fail@plt+0x15274>
   2687c:	ldr	r4, [sl]
   26880:	ldr	r3, [sl, #4]
   26884:	add	r1, r4, #1
   26888:	cmp	r1, r3
   2688c:	str	r1, [sl]
   26890:	ldr	r5, [sp, #120]	; 0x78
   26894:	beq	26928 <__assert_fail@plt+0x156cc>
   26898:	ldr	r3, [sl, #8]
   2689c:	add	r2, r4, r4, lsl #1
   268a0:	ldr	r0, [sp, #44]	; 0x2c
   268a4:	lsl	r4, r2, #3
   268a8:	str	r5, [r3, r2, lsl #3]
   268ac:	add	r5, r3, r4
   268b0:	str	r6, [r5, #4]
   268b4:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   268b8:	ldr	r3, [sl, #8]
   268bc:	add	r3, r3, r4
   268c0:	str	r0, [r5, #8]
   268c4:	ldr	r0, [r3, #8]
   268c8:	cmp	r0, #0
   268cc:	beq	26838 <__assert_fail@plt+0x155dc>
   268d0:	ldr	r5, [sp, #20]
   268d4:	ldr	r1, [sp, #476]	; 0x1dc
   268d8:	mov	r2, r5
   268dc:	bl	11004 <memcpy@plt>
   268e0:	ldr	r3, [sl, #8]
   268e4:	mov	r2, r5
   268e8:	add	r3, r3, r4
   268ec:	ldr	r1, [sp, #16]
   268f0:	ldr	r0, [r3, #8]
   268f4:	add	r0, r0, r5
   268f8:	bl	11004 <memcpy@plt>
   268fc:	ldr	r0, [sl, #8]
   26900:	mov	r1, r9
   26904:	add	r0, r0, r4
   26908:	add	r0, r0, #12
   2690c:	bl	20088 <__assert_fail@plt+0xee2c>
   26910:	cmp	r0, #0
   26914:	beq	264d0 <__assert_fail@plt+0x15274>
   26918:	b	26838 <__assert_fail@plt+0x155dc>
   2691c:	cmn	fp, #2
   26920:	bne	26078 <__assert_fail@plt+0x14e1c>
   26924:	b	26838 <__assert_fail@plt+0x155dc>
   26928:	add	r1, r1, r1, lsl #1
   2692c:	ldr	r0, [sl, #8]
   26930:	lsl	r1, r1, #4
   26934:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   26938:	subs	r3, r0, #0
   2693c:	beq	26838 <__assert_fail@plt+0x155dc>
   26940:	ldr	r2, [sl, #4]
   26944:	str	r3, [sl, #8]
   26948:	lsl	r2, r2, #1
   2694c:	str	r2, [sl, #4]
   26950:	b	2689c <__assert_fail@plt+0x15640>
   26954:	mov	fp, r6
   26958:	b	264d0 <__assert_fail@plt+0x15274>
   2695c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26960:	mov	fp, r2
   26964:	ldr	r2, [r0, #100]	; 0x64
   26968:	sub	sp, sp, #100	; 0x64
   2696c:	mov	ip, #0
   26970:	ldr	r2, [r2, fp, lsl #2]
   26974:	mov	r4, r3
   26978:	cmp	r2, ip
   2697c:	lsl	r3, fp, #2
   26980:	str	r3, [sp, #40]	; 0x28
   26984:	str	r0, [sp, #32]
   26988:	mov	r9, r1
   2698c:	ldr	r5, [r0, #84]	; 0x54
   26990:	str	ip, [sp, #64]	; 0x40
   26994:	ldr	r3, [r4, #4]
   26998:	beq	26e0c <__assert_fail@plt+0x15bb0>
   2699c:	add	r2, r2, #4
   269a0:	cmp	r3, ip
   269a4:	str	r2, [sp, #24]
   269a8:	bne	269e8 <__assert_fail@plt+0x1578c>
   269ac:	ldr	r3, [r9]
   269b0:	mov	r2, #0
   269b4:	str	r2, [r3, fp, lsl #2]
   269b8:	ldr	r3, [sp, #24]
   269bc:	cmp	r3, #0
   269c0:	beq	26b48 <__assert_fail@plt+0x158ec>
   269c4:	ldr	r3, [sp, #32]
   269c8:	ldr	r3, [r3, #100]	; 0x64
   269cc:	ldr	r3, [r3, fp, lsl #2]
   269d0:	ldrb	r3, [r3, #52]	; 0x34
   269d4:	ands	r3, r3, #64	; 0x40
   269d8:	bne	26a9c <__assert_fail@plt+0x15840>
   269dc:	mov	r0, r3
   269e0:	add	sp, sp, #100	; 0x64
   269e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   269e8:	add	r0, sp, #96	; 0x60
   269ec:	mov	r2, r4
   269f0:	str	ip, [r0, #-28]!	; 0xffffffe4
   269f4:	mov	r1, r5
   269f8:	bl	20578 <__assert_fail@plt+0xf31c>
   269fc:	ldr	r3, [sp, #68]	; 0x44
   26a00:	cmp	r3, #0
   26a04:	mov	r6, r0
   26a08:	bne	269dc <__assert_fail@plt+0x15780>
   26a0c:	ldr	r7, [r0, #28]
   26a10:	cmp	r7, #0
   26a14:	addne	r6, r0, #28
   26a18:	bne	26b58 <__assert_fail@plt+0x158fc>
   26a1c:	ldr	r0, [r4, #4]
   26a20:	str	r7, [r6, #32]
   26a24:	str	r0, [r6, #28]
   26a28:	lsl	r0, r0, #2
   26a2c:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   26a30:	add	r6, r6, #28
   26a34:	cmp	r0, #0
   26a38:	str	r0, [r6, #8]
   26a3c:	beq	26a8c <__assert_fail@plt+0x15830>
   26a40:	ldr	r3, [r4, #4]
   26a44:	str	r7, [sp, #68]	; 0x44
   26a48:	cmp	r3, #0
   26a4c:	bgt	26a60 <__assert_fail@plt+0x15804>
   26a50:	b	26b58 <__assert_fail@plt+0x158fc>
   26a54:	ldr	r3, [r4, #4]
   26a58:	cmp	r7, r3
   26a5c:	bge	26b58 <__assert_fail@plt+0x158fc>
   26a60:	ldr	r3, [r4, #8]
   26a64:	ldr	r1, [r5, #28]
   26a68:	mov	r0, r6
   26a6c:	ldr	r3, [r3, r7, lsl #2]
   26a70:	add	r7, r7, #1
   26a74:	add	r3, r3, r3, lsl #1
   26a78:	add	r1, r1, r3, lsl #2
   26a7c:	bl	20af8 <__assert_fail@plt+0xf89c>
   26a80:	cmp	r0, #0
   26a84:	str	r0, [sp, #68]	; 0x44
   26a88:	beq	26a54 <__assert_fail@plt+0x157f8>
   26a8c:	mov	r3, #12
   26a90:	mov	r0, r3
   26a94:	add	sp, sp, #100	; 0x64
   26a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26a9c:	ldr	r3, [sp, #32]
   26aa0:	ldr	ip, [r3, #108]	; 0x6c
   26aa4:	mov	r3, #0
   26aa8:	mov	r0, r3
   26aac:	mov	r3, ip
   26ab0:	cmp	r0, r3
   26ab4:	bge	26b14 <__assert_fail@plt+0x158b8>
   26ab8:	add	r2, r0, r3
   26abc:	ldr	r1, [sp, #32]
   26ac0:	add	r2, r2, r2, lsr #31
   26ac4:	asr	r2, r2, #1
   26ac8:	ldr	lr, [r1, #116]	; 0x74
   26acc:	add	r1, r2, r2, lsl #1
   26ad0:	add	r1, lr, r1, lsl #3
   26ad4:	ldr	r1, [r1, #4]
   26ad8:	cmp	fp, r1
   26adc:	ble	26b04 <__assert_fail@plt+0x158a8>
   26ae0:	b	26bac <__assert_fail@plt+0x15950>
   26ae4:	asr	r3, r3, #1
   26ae8:	mov	r4, r3
   26aec:	add	r1, r3, r3, lsl #1
   26af0:	add	r1, lr, r1, lsl #3
   26af4:	ldr	r1, [r1, #4]
   26af8:	cmp	fp, r1
   26afc:	bgt	26bb4 <__assert_fail@plt+0x15958>
   26b00:	mov	r2, r3
   26b04:	add	r3, r0, r2
   26b08:	cmp	r0, r2
   26b0c:	add	r3, r3, r3, lsr #31
   26b10:	blt	26ae4 <__assert_fail@plt+0x15888>
   26b14:	str	r0, [sp, #44]	; 0x2c
   26b18:	ldr	r3, [sp, #44]	; 0x2c
   26b1c:	cmp	ip, r3
   26b20:	ble	26b48 <__assert_fail@plt+0x158ec>
   26b24:	add	r2, r3, r3, lsl #1
   26b28:	ldr	r3, [sp, #32]
   26b2c:	lsl	r2, r2, #3
   26b30:	str	r2, [sp, #56]	; 0x38
   26b34:	ldr	r3, [r3, #116]	; 0x74
   26b38:	add	r3, r3, r2
   26b3c:	ldr	r3, [r3, #4]
   26b40:	cmp	fp, r3
   26b44:	beq	26bc0 <__assert_fail@plt+0x15964>
   26b48:	mov	r3, #0
   26b4c:	mov	r0, r3
   26b50:	add	sp, sp, #100	; 0x64
   26b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26b58:	mov	r2, r6
   26b5c:	ldr	r1, [sp, #24]
   26b60:	mov	r0, r4
   26b64:	bl	1fa5c <__assert_fail@plt+0xe800>
   26b68:	cmp	r0, #0
   26b6c:	mov	r3, r0
   26b70:	str	r0, [sp, #64]	; 0x40
   26b74:	bne	269dc <__assert_fail@plt+0x15780>
   26b78:	ldr	r2, [r9, #20]
   26b7c:	cmp	r2, #0
   26b80:	bne	26e20 <__assert_fail@plt+0x15bc4>
   26b84:	mov	r2, r4
   26b88:	mov	r1, r5
   26b8c:	add	r0, sp, #64	; 0x40
   26b90:	ldr	r4, [r9]
   26b94:	bl	20578 <__assert_fail@plt+0xf31c>
   26b98:	ldr	r3, [sp, #64]	; 0x40
   26b9c:	cmp	r3, #0
   26ba0:	str	r0, [r4, fp, lsl #2]
   26ba4:	beq	269b8 <__assert_fail@plt+0x1575c>
   26ba8:	b	269dc <__assert_fail@plt+0x15780>
   26bac:	mov	r4, r2
   26bb0:	mov	r2, r3
   26bb4:	add	r0, r4, #1
   26bb8:	mov	r3, r2
   26bbc:	b	26ab0 <__assert_fail@plt+0x15854>
   26bc0:	ldr	r3, [sp, #44]	; 0x2c
   26bc4:	cmn	r3, #1
   26bc8:	beq	26b48 <__assert_fail@plt+0x158ec>
   26bcc:	ldr	r3, [sp, #24]
   26bd0:	ldr	r2, [sp, #32]
   26bd4:	ldr	r0, [r3, #4]
   26bd8:	mov	r3, #0
   26bdc:	cmp	r0, r3
   26be0:	str	r3, [sp, #68]	; 0x44
   26be4:	ldr	sl, [r2, #84]	; 0x54
   26be8:	ble	26b48 <__assert_fail@plt+0x158ec>
   26bec:	str	r3, [sp, #16]
   26bf0:	add	r3, r9, #24
   26bf4:	str	r3, [sp, #48]	; 0x30
   26bf8:	add	r3, r9, #20
   26bfc:	str	r3, [sp, #52]	; 0x34
   26c00:	add	r3, fp, #1
   26c04:	str	r3, [sp, #60]	; 0x3c
   26c08:	b	26c28 <__assert_fail@plt+0x159cc>
   26c0c:	cmp	r3, #4
   26c10:	beq	26c64 <__assert_fail@plt+0x15a08>
   26c14:	ldr	r3, [sp, #16]
   26c18:	add	r3, r3, #1
   26c1c:	cmp	r3, r0
   26c20:	str	r3, [sp, #16]
   26c24:	bge	270dc <__assert_fail@plt+0x15e80>
   26c28:	ldr	r3, [sp, #24]
   26c2c:	ldr	ip, [sp, #16]
   26c30:	ldr	r2, [r9, #8]
   26c34:	ldr	r1, [r3, #8]
   26c38:	ldr	r3, [sl]
   26c3c:	ldr	r8, [r1, ip, lsl #2]
   26c40:	cmp	r8, r2
   26c44:	add	r3, r3, r8, lsl #3
   26c48:	ldrb	r3, [r3, #4]
   26c4c:	bne	26c0c <__assert_fail@plt+0x159b0>
   26c50:	ldr	r2, [r9, #12]
   26c54:	cmp	fp, r2
   26c58:	beq	26c14 <__assert_fail@plt+0x159b8>
   26c5c:	cmp	r3, #4
   26c60:	bne	26c14 <__assert_fail@plt+0x159b8>
   26c64:	ldr	r3, [sp, #32]
   26c68:	ldr	r2, [sp, #56]	; 0x38
   26c6c:	ldr	r6, [sp, #44]	; 0x2c
   26c70:	ldr	r4, [r3, #116]	; 0x74
   26c74:	add	r3, r8, r8, lsl #1
   26c78:	add	r4, r4, r2
   26c7c:	lsl	r3, r3, #2
   26c80:	str	r3, [sp, #36]	; 0x24
   26c84:	lsl	r3, r8, #2
   26c88:	str	r3, [sp, #28]
   26c8c:	mov	r7, r2
   26c90:	b	26cac <__assert_fail@plt+0x15a50>
   26c94:	ldrb	r3, [r4, #20]
   26c98:	add	r6, r6, #1
   26c9c:	add	r7, r7, #24
   26ca0:	cmp	r3, #0
   26ca4:	add	r4, r4, #24
   26ca8:	beq	26e00 <__assert_fail@plt+0x15ba4>
   26cac:	ldr	r3, [r4]
   26cb0:	cmp	r8, r3
   26cb4:	bne	26c94 <__assert_fail@plt+0x15a38>
   26cb8:	ldr	r3, [r4, #8]
   26cbc:	ldr	r5, [r4, #12]
   26cc0:	sub	r5, r5, r3
   26cc4:	cmp	r5, #0
   26cc8:	add	r5, fp, r5
   26ccc:	ldreq	r3, [sl, #20]
   26cd0:	ldreq	r2, [sp, #36]	; 0x24
   26cd4:	ldrne	r2, [sp, #28]
   26cd8:	addeq	r3, r3, r2
   26cdc:	ldrne	r3, [sl, #12]
   26ce0:	ldreq	r3, [r3, #8]
   26ce4:	ldrne	r3, [r3, r2]
   26ce8:	ldr	r2, [r9, #12]
   26cec:	ldreq	r3, [r3]
   26cf0:	cmp	r5, r2
   26cf4:	bgt	26c94 <__assert_fail@plt+0x15a38>
   26cf8:	ldr	r2, [r9]
   26cfc:	ldr	r0, [r2, r5, lsl #2]
   26d00:	cmp	r0, #0
   26d04:	beq	26c94 <__assert_fail@plt+0x15a38>
   26d08:	mov	r2, r3
   26d0c:	add	r1, r0, #12
   26d10:	ldr	r0, [r0, #8]
   26d14:	str	r3, [sp, #20]
   26d18:	bl	1f57c <__assert_fail@plt+0xe320>
   26d1c:	ldr	r3, [sp, #20]
   26d20:	cmp	r0, #0
   26d24:	beq	26c94 <__assert_fail@plt+0x15a38>
   26d28:	stmib	sp, {r3, r5}
   26d2c:	str	fp, [sp]
   26d30:	mov	r3, r8
   26d34:	ldr	r2, [sp, #48]	; 0x30
   26d38:	ldr	r1, [sp, #52]	; 0x34
   26d3c:	ldr	r0, [sp, #32]
   26d40:	bl	1f848 <__assert_fail@plt+0xe5ec>
   26d44:	cmp	r0, #0
   26d48:	bne	26c94 <__assert_fail@plt+0x15a38>
   26d4c:	ldr	r3, [sp, #68]	; 0x44
   26d50:	cmp	r3, #0
   26d54:	beq	27064 <__assert_fail@plt+0x15e08>
   26d58:	mov	r1, r6
   26d5c:	add	r0, sp, #84	; 0x54
   26d60:	str	r8, [sp, #76]	; 0x4c
   26d64:	str	fp, [sp, #80]	; 0x50
   26d68:	bl	1efec <__assert_fail@plt+0xdd90>
   26d6c:	cmp	r0, #0
   26d70:	beq	270f0 <__assert_fail@plt+0x15e94>
   26d74:	ldr	r3, [sp, #68]	; 0x44
   26d78:	ldr	r2, [sp, #40]	; 0x28
   26d7c:	add	r1, sp, #68	; 0x44
   26d80:	ldr	r0, [sp, #32]
   26d84:	ldr	r4, [r3, r2]
   26d88:	bl	24c74 <__assert_fail@plt+0x13a18>
   26d8c:	cmp	r0, #0
   26d90:	bne	27090 <__assert_fail@plt+0x15e34>
   26d94:	ldr	r1, [r9, #4]
   26d98:	cmp	r1, #0
   26d9c:	beq	26db8 <__assert_fail@plt+0x15b5c>
   26da0:	ldr	r3, [sp, #60]	; 0x3c
   26da4:	ldr	r2, [sp, #68]	; 0x44
   26da8:	mov	r0, sl
   26dac:	bl	20780 <__assert_fail@plt+0xf524>
   26db0:	cmp	r0, #0
   26db4:	bne	27090 <__assert_fail@plt+0x15e34>
   26db8:	ldr	r3, [sp, #68]	; 0x44
   26dbc:	ldr	r1, [sp, #40]	; 0x28
   26dc0:	ldr	r5, [sp, #88]	; 0x58
   26dc4:	mov	r2, r6
   26dc8:	str	r4, [r3, r1]
   26dcc:	mov	r0, r5
   26dd0:	add	r1, sp, #92	; 0x5c
   26dd4:	bl	1f57c <__assert_fail@plt+0xe320>
   26dd8:	sub	r2, r0, #1
   26ddc:	cmp	r5, r2
   26de0:	movgt	r3, #0
   26de4:	movle	r3, #1
   26de8:	orrs	r3, r3, r2, lsr #31
   26dec:	beq	270bc <__assert_fail@plt+0x15e60>
   26df0:	ldr	r3, [sp, #32]
   26df4:	ldr	r4, [r3, #116]	; 0x74
   26df8:	add	r4, r4, r7
   26dfc:	b	26c94 <__assert_fail@plt+0x15a38>
   26e00:	ldr	r3, [sp, #24]
   26e04:	ldr	r0, [r3, #4]
   26e08:	b	26c14 <__assert_fail@plt+0x159b8>
   26e0c:	cmp	r3, #0
   26e10:	strne	r2, [sp, #24]
   26e14:	bne	26b84 <__assert_fail@plt+0x15928>
   26e18:	str	r3, [sp, #24]
   26e1c:	b	269ac <__assert_fail@plt+0x15750>
   26e20:	ldr	r2, [sp, #32]
   26e24:	ldr	r2, [r2, #116]	; 0x74
   26e28:	str	r2, [sp, #20]
   26e2c:	ble	26f10 <__assert_fail@plt+0x15cb4>
   26e30:	mov	r8, r0
   26e34:	str	fp, [sp, #16]
   26e38:	ldr	r3, [r9, #24]
   26e3c:	ldr	r2, [sp, #20]
   26e40:	ldr	r0, [sp, #16]
   26e44:	ldr	r3, [r3, r8, lsl #2]
   26e48:	add	r3, r3, r3, lsl #1
   26e4c:	add	r2, r2, r3, lsl #3
   26e50:	ldr	r1, [r2, #8]
   26e54:	cmp	r0, r1
   26e58:	ble	26efc <__assert_fail@plt+0x15ca0>
   26e5c:	ldr	r1, [r2, #4]
   26e60:	ldr	r0, [sp, #16]
   26e64:	cmp	r0, r1
   26e68:	bgt	26efc <__assert_fail@plt+0x15ca0>
   26e6c:	ldr	r1, [sp, #20]
   26e70:	ldr	r2, [r2, #12]
   26e74:	ldr	r7, [r4, #4]
   26e78:	ldr	r1, [r1, r3, lsl #3]
   26e7c:	ldr	r3, [r5]
   26e80:	cmp	r0, r2
   26e84:	ldr	r6, [r3, r1, lsl #3]
   26e88:	beq	26f1c <__assert_fail@plt+0x15cc0>
   26e8c:	cmp	r7, #0
   26e90:	ble	26efc <__assert_fail@plt+0x15ca0>
   26e94:	mov	sl, #0
   26e98:	b	26eac <__assert_fail@plt+0x15c50>
   26e9c:	add	sl, sl, #1
   26ea0:	cmp	sl, r7
   26ea4:	bge	26efc <__assert_fail@plt+0x15ca0>
   26ea8:	ldr	r3, [r5]
   26eac:	ldr	r2, [r4, #8]
   26eb0:	ldr	r1, [r2, sl, lsl #2]
   26eb4:	add	r2, r3, r1, lsl #3
   26eb8:	ldrb	r2, [r2, #4]
   26ebc:	sub	r2, r2, #8
   26ec0:	cmp	r2, #1
   26ec4:	bhi	26e9c <__assert_fail@plt+0x15c40>
   26ec8:	ldr	r3, [r3, r1, lsl #3]
   26ecc:	cmp	r6, r3
   26ed0:	bne	26e9c <__assert_fail@plt+0x15c40>
   26ed4:	ldr	r3, [sp, #24]
   26ed8:	mov	r2, r4
   26edc:	mov	r0, r5
   26ee0:	bl	208d4 <__assert_fail@plt+0xf678>
   26ee4:	cmp	r0, #0
   26ee8:	bne	27104 <__assert_fail@plt+0x15ea8>
   26eec:	ldr	r7, [r4, #4]
   26ef0:	add	sl, sl, #1
   26ef4:	cmp	sl, r7
   26ef8:	blt	26ea8 <__assert_fail@plt+0x15c4c>
   26efc:	ldr	r3, [r9, #20]
   26f00:	add	r8, r8, #1
   26f04:	cmp	r8, r3
   26f08:	blt	26e38 <__assert_fail@plt+0x15bdc>
   26f0c:	ldr	fp, [sp, #16]
   26f10:	mov	r3, #0
   26f14:	str	r3, [sp, #64]	; 0x40
   26f18:	b	26b84 <__assert_fail@plt+0x15928>
   26f1c:	cmp	r7, #0
   26f20:	ble	26efc <__assert_fail@plt+0x15ca0>
   26f24:	ldr	ip, [r4, #8]
   26f28:	mvn	r2, #0
   26f2c:	mov	fp, r2
   26f30:	add	sl, ip, r7, lsl #2
   26f34:	mov	r2, ip
   26f38:	str	ip, [sp, #28]
   26f3c:	mov	ip, fp
   26f40:	b	26f60 <__assert_fail@plt+0x15d04>
   26f44:	cmp	r0, #9
   26f48:	bne	26f58 <__assert_fail@plt+0x15cfc>
   26f4c:	ldr	r0, [lr]
   26f50:	cmp	r6, r0
   26f54:	moveq	fp, r1
   26f58:	cmp	sl, r2
   26f5c:	beq	26f88 <__assert_fail@plt+0x15d2c>
   26f60:	ldr	r1, [r2], #4
   26f64:	add	lr, r3, r1, lsl #3
   26f68:	ldrb	r0, [lr, #4]
   26f6c:	cmp	r0, #8
   26f70:	bne	26f44 <__assert_fail@plt+0x15ce8>
   26f74:	ldr	r0, [r3, r1, lsl #3]
   26f78:	cmp	r6, r0
   26f7c:	moveq	ip, r1
   26f80:	cmp	sl, r2
   26f84:	bne	26f60 <__assert_fail@plt+0x15d04>
   26f88:	mov	r3, ip
   26f8c:	cmp	r3, #0
   26f90:	mov	r6, fp
   26f94:	ldr	ip, [sp, #28]
   26f98:	blt	270f8 <__assert_fail@plt+0x15e9c>
   26f9c:	mov	r1, r3
   26fa0:	mov	r2, r4
   26fa4:	ldr	r3, [sp, #24]
   26fa8:	mov	r0, r5
   26fac:	bl	208d4 <__assert_fail@plt+0xf678>
   26fb0:	cmp	r0, #0
   26fb4:	bne	27104 <__assert_fail@plt+0x15ea8>
   26fb8:	cmp	fp, #0
   26fbc:	blt	26efc <__assert_fail@plt+0x15ca0>
   26fc0:	ldr	r7, [r4, #4]
   26fc4:	cmp	r7, #0
   26fc8:	ble	26efc <__assert_fail@plt+0x15ca0>
   26fcc:	ldr	ip, [r4, #8]
   26fd0:	mov	sl, #0
   26fd4:	str	r8, [sp, #28]
   26fd8:	mov	fp, r6
   26fdc:	b	26ff0 <__assert_fail@plt+0x15d94>
   26fe0:	add	sl, sl, #1
   26fe4:	cmp	sl, r7
   26fe8:	bge	270d4 <__assert_fail@plt+0x15e78>
   26fec:	ldr	ip, [r4, #8]
   26ff0:	ldr	r8, [ip, sl, lsl #2]
   26ff4:	ldr	r0, [r5, #28]
   26ff8:	mov	r2, fp
   26ffc:	add	r6, r8, r8, lsl #1
   27000:	lsl	r6, r6, #2
   27004:	add	r0, r0, r6
   27008:	add	r1, r0, #8
   2700c:	ldr	r0, [r0, #4]
   27010:	bl	1f57c <__assert_fail@plt+0xe320>
   27014:	mov	r2, fp
   27018:	cmp	r0, #0
   2701c:	bne	26fe0 <__assert_fail@plt+0x15d84>
   27020:	ldr	r1, [r5, #24]
   27024:	add	r6, r1, r6
   27028:	add	r1, r6, #8
   2702c:	ldr	r0, [r6, #4]
   27030:	bl	1f57c <__assert_fail@plt+0xe320>
   27034:	cmp	r0, #0
   27038:	bne	26fe0 <__assert_fail@plt+0x15d84>
   2703c:	mov	r1, r8
   27040:	ldr	r3, [sp, #24]
   27044:	mov	r2, r4
   27048:	mov	r0, r5
   2704c:	bl	208d4 <__assert_fail@plt+0xf678>
   27050:	sub	sl, sl, #1
   27054:	cmp	r0, #0
   27058:	bne	27104 <__assert_fail@plt+0x15ea8>
   2705c:	ldr	r7, [r4, #4]
   27060:	b	26fe0 <__assert_fail@plt+0x15d84>
   27064:	mov	ip, r9
   27068:	add	lr, sp, #68	; 0x44
   2706c:	ldm	ip!, {r0, r1, r2, r3}
   27070:	stmia	lr!, {r0, r1, r2, r3}
   27074:	ldm	ip, {r0, r1, r2}
   27078:	stm	lr, {r0, r1, r2}
   2707c:	mov	r1, ip
   27080:	add	r0, sp, #84	; 0x54
   27084:	bl	20088 <__assert_fail@plt+0xee2c>
   27088:	cmp	r0, #0
   2708c:	beq	26d58 <__assert_fail@plt+0x15afc>
   27090:	mov	r3, r0
   27094:	ldr	r2, [sp, #68]	; 0x44
   27098:	cmp	r2, #0
   2709c:	beq	269dc <__assert_fail@plt+0x15780>
   270a0:	ldr	r0, [sp, #92]	; 0x5c
   270a4:	str	r3, [sp, #16]
   270a8:	bl	13098 <__assert_fail@plt+0x1e3c>
   270ac:	ldr	r3, [sp, #16]
   270b0:	mov	r0, r3
   270b4:	add	sp, sp, #100	; 0x64
   270b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   270bc:	add	r0, sp, #96	; 0x60
   270c0:	sub	r5, r5, #1
   270c4:	str	r5, [r0, #-8]!
   270c8:	add	r1, sp, #92	; 0x5c
   270cc:	bl	1f70c <__assert_fail@plt+0xe4b0>
   270d0:	b	26df0 <__assert_fail@plt+0x15b94>
   270d4:	ldr	r8, [sp, #28]
   270d8:	b	26efc <__assert_fail@plt+0x15ca0>
   270dc:	ldr	r3, [sp, #68]	; 0x44
   270e0:	cmp	r3, #0
   270e4:	movne	r3, #0
   270e8:	bne	270a0 <__assert_fail@plt+0x15e44>
   270ec:	b	26b48 <__assert_fail@plt+0x158ec>
   270f0:	mov	r3, #12
   270f4:	b	27094 <__assert_fail@plt+0x15e38>
   270f8:	cmp	fp, #0
   270fc:	bge	26fd0 <__assert_fail@plt+0x15d74>
   27100:	b	26efc <__assert_fail@plt+0x15ca0>
   27104:	mov	r3, r0
   27108:	b	269dc <__assert_fail@plt+0x15780>
   2710c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27110:	sub	sp, sp, #8
   27114:	ldr	r6, [r1, #40]	; 0x28
   27118:	ldr	r3, [r1, #56]	; 0x38
   2711c:	cmp	r3, r6
   27120:	ble	27394 <__assert_fail@plt+0x16138>
   27124:	ldr	sl, [r1, #4]
   27128:	ldrb	r3, [r0, #6]
   2712c:	mov	r8, r2
   27130:	ldrb	r7, [sl, r6]
   27134:	and	r3, r3, #159	; 0x9f
   27138:	strb	r3, [r0, #6]
   2713c:	strb	r7, [r0]
   27140:	ldr	r3, [r1, #80]	; 0x50
   27144:	mov	r5, r0
   27148:	cmp	r3, #1
   2714c:	mov	r4, r1
   27150:	ble	273a8 <__assert_fail@plt+0x1614c>
   27154:	ldr	r2, [r1, #28]
   27158:	cmp	r6, r2
   2715c:	beq	27170 <__assert_fail@plt+0x15f14>
   27160:	ldr	r2, [r1, #8]
   27164:	ldr	r2, [r2, r6, lsl #2]
   27168:	cmn	r2, #1
   2716c:	beq	27608 <__assert_fail@plt+0x163ac>
   27170:	cmp	r7, #92	; 0x5c
   27174:	beq	27410 <__assert_fail@plt+0x161b4>
   27178:	ldr	r3, [r4, #8]
   2717c:	mov	r2, #1
   27180:	strb	r2, [r5, #4]
   27184:	ldr	r9, [r3, r6, lsl #2]
   27188:	mov	r0, r9
   2718c:	bl	11184 <iswalnum@plt>
   27190:	ldrb	r3, [r5, #6]
   27194:	sub	r9, r9, #95	; 0x5f
   27198:	clz	r9, r9
   2719c:	lsr	r9, r9, #5
   271a0:	bic	r3, r3, #64	; 0x40
   271a4:	cmp	r0, #0
   271a8:	orrne	r9, r9, #1
   271ac:	orr	r9, r3, r9, lsl #6
   271b0:	strb	r9, [r5, #6]
   271b4:	sub	r7, r7, #10
   271b8:	cmp	r7, #115	; 0x73
   271bc:	ldrls	pc, [pc, r7, lsl #2]
   271c0:	b	27404 <__assert_fail@plt+0x161a8>
   271c4:	andeq	r7, r2, ip, asr #12
   271c8:	andeq	r7, r2, r4, lsl #8
   271cc:	andeq	r7, r2, r4, lsl #8
   271d0:	andeq	r7, r2, r4, lsl #8
   271d4:	andeq	r7, r2, r4, lsl #8
   271d8:	andeq	r7, r2, r4, lsl #8
   271dc:	andeq	r7, r2, r4, lsl #8
   271e0:	andeq	r7, r2, r4, lsl #8
   271e4:	andeq	r7, r2, r4, lsl #8
   271e8:	andeq	r7, r2, r4, lsl #8
   271ec:	andeq	r7, r2, r4, lsl #8
   271f0:	andeq	r7, r2, r4, lsl #8
   271f4:	andeq	r7, r2, r4, lsl #8
   271f8:	andeq	r7, r2, r4, lsl #8
   271fc:	andeq	r7, r2, r4, lsl #8
   27200:	andeq	r7, r2, r4, lsl #8
   27204:	andeq	r7, r2, r4, lsl #8
   27208:	andeq	r7, r2, r4, lsl #8
   2720c:	andeq	r7, r2, r4, lsl #8
   27210:	andeq	r7, r2, r4, lsl #8
   27214:	andeq	r7, r2, r4, lsl #8
   27218:	andeq	r7, r2, r4, lsl #8
   2721c:	andeq	r7, r2, r4, lsl #8
   27220:	andeq	r7, r2, r4, lsl #8
   27224:	andeq	r7, r2, r4, lsl #8
   27228:	andeq	r7, r2, r4, lsl #8
   2722c:	andeq	r7, r2, r4, ror #12
   27230:	andeq	r7, r2, r4, lsl #8
   27234:	andeq	r7, r2, r4, lsl #8
   27238:	andeq	r7, r2, r4, lsl #8
   2723c:	andeq	r7, r2, r4, asr #13
   27240:	ldrdeq	r7, [r2], -ip
   27244:	strdeq	r7, [r2], -r4
   27248:	andeq	r7, r2, r4, lsl #14
   2724c:	andeq	r7, r2, r4, lsl #8
   27250:	andeq	r7, r2, r4, lsl #8
   27254:	andeq	r7, r2, r4, lsr #14
   27258:	andeq	r7, r2, r4, lsl #8
   2725c:	andeq	r7, r2, r4, lsl #8
   27260:	andeq	r7, r2, r4, lsl #8
   27264:	andeq	r7, r2, r4, lsl #8
   27268:	andeq	r7, r2, r4, lsl #8
   2726c:	andeq	r7, r2, r4, lsl #8
   27270:	andeq	r7, r2, r4, lsl #8
   27274:	andeq	r7, r2, r4, lsl #8
   27278:	andeq	r7, r2, r4, lsl #8
   2727c:	andeq	r7, r2, r4, lsl #8
   27280:	andeq	r7, r2, r4, lsl #8
   27284:	andeq	r7, r2, r4, lsl #8
   27288:	andeq	r7, r2, r4, lsl #8
   2728c:	andeq	r7, r2, r4, lsl #8
   27290:	andeq	r7, r2, r4, lsl #8
   27294:	andeq	r7, r2, r4, lsl #8
   27298:	andeq	r7, r2, r4, lsr r7
   2729c:	andeq	r7, r2, r4, lsl #8
   272a0:	andeq	r7, r2, r4, lsl #8
   272a4:	andeq	r7, r2, r4, lsl #8
   272a8:	andeq	r7, r2, r4, lsl #8
   272ac:	andeq	r7, r2, r4, lsl #8
   272b0:	andeq	r7, r2, r4, lsl #8
   272b4:	andeq	r7, r2, r4, lsl #8
   272b8:	andeq	r7, r2, r4, lsl #8
   272bc:	andeq	r7, r2, r4, lsl #8
   272c0:	andeq	r7, r2, r4, lsl #8
   272c4:	andeq	r7, r2, r4, lsl #8
   272c8:	andeq	r7, r2, r4, lsl #8
   272cc:	andeq	r7, r2, r4, lsl #8
   272d0:	andeq	r7, r2, r4, lsl #8
   272d4:	andeq	r7, r2, r4, lsl #8
   272d8:	andeq	r7, r2, r4, lsl #8
   272dc:	andeq	r7, r2, r4, lsl #8
   272e0:	andeq	r7, r2, r4, lsl #8
   272e4:	andeq	r7, r2, r4, lsl #8
   272e8:	andeq	r7, r2, r4, lsl #8
   272ec:	andeq	r7, r2, r4, lsl #8
   272f0:	andeq	r7, r2, r4, lsl #8
   272f4:	andeq	r7, r2, r4, lsl #8
   272f8:	andeq	r7, r2, r4, lsl #8
   272fc:	andeq	r7, r2, r4, lsl #8
   27300:	andeq	r7, r2, r4, lsl #8
   27304:	andeq	r7, r2, r4, lsl #8
   27308:	andeq	r7, r2, r4, asr r7
   2730c:	andeq	r7, r2, r4, lsl #8
   27310:	andeq	r7, r2, r4, lsl #8
   27314:	andeq	r7, r2, r4, ror #14
   27318:	andeq	r7, r2, r4, lsl #8
   2731c:	andeq	r7, r2, r4, lsl #8
   27320:	andeq	r7, r2, r4, lsl #8
   27324:	andeq	r7, r2, r4, lsl #8
   27328:	andeq	r7, r2, r4, lsl #8
   2732c:	andeq	r7, r2, r4, lsl #8
   27330:	andeq	r7, r2, r4, lsl #8
   27334:	andeq	r7, r2, r4, lsl #8
   27338:	andeq	r7, r2, r4, lsl #8
   2733c:	andeq	r7, r2, r4, lsl #8
   27340:	andeq	r7, r2, r4, lsl #8
   27344:	andeq	r7, r2, r4, lsl #8
   27348:	andeq	r7, r2, r4, lsl #8
   2734c:	andeq	r7, r2, r4, lsl #8
   27350:	andeq	r7, r2, r4, lsl #8
   27354:	andeq	r7, r2, r4, lsl #8
   27358:	andeq	r7, r2, r4, lsl #8
   2735c:	andeq	r7, r2, r4, lsl #8
   27360:	andeq	r7, r2, r4, lsl #8
   27364:	andeq	r7, r2, r4, lsl #8
   27368:	andeq	r7, r2, r4, lsl #8
   2736c:	andeq	r7, r2, r4, lsl #8
   27370:	andeq	r7, r2, r4, lsl #8
   27374:	andeq	r7, r2, r4, lsl #8
   27378:	andeq	r7, r2, r4, lsl #8
   2737c:	andeq	r7, r2, r4, lsl #8
   27380:	andeq	r7, r2, r4, lsl #8
   27384:	andeq	r7, r2, r4, lsl #8
   27388:	andeq	r7, r2, ip, ror #7
   2738c:			; <UNDEFINED> instruction: 0x000277bc
   27390:	andeq	r7, r2, r0, lsr r6
   27394:	mov	r3, #2
   27398:	strb	r3, [r0, #4]
   2739c:	mov	r0, #0
   273a0:	add	sp, sp, #8
   273a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   273a8:	cmp	r7, #92	; 0x5c
   273ac:	beq	27410 <__assert_fail@plt+0x161b4>
   273b0:	mov	r3, #1
   273b4:	strb	r3, [r5, #4]
   273b8:	bl	11148 <__ctype_b_loc@plt>
   273bc:	lsl	r1, r7, #1
   273c0:	ldrb	r2, [r5, #6]
   273c4:	bic	r2, r2, #64	; 0x40
   273c8:	ldr	r3, [r0]
   273cc:	ldrh	r3, [r3, r1]
   273d0:	lsr	r3, r3, #3
   273d4:	and	r3, r3, #1
   273d8:	cmp	r7, #95	; 0x5f
   273dc:	orreq	r3, r3, #1
   273e0:	orr	r3, r2, r3, lsl #6
   273e4:	strb	r3, [r5, #6]
   273e8:	b	271b4 <__assert_fail@plt+0x15f58>
   273ec:	and	r8, r8, #4608	; 0x1200
   273f0:	cmp	r8, #4608	; 0x1200
   273f4:	moveq	r3, #23
   273f8:	strbeq	r3, [r5, #4]
   273fc:	moveq	r0, #1
   27400:	beq	273a0 <__assert_fail@plt+0x16144>
   27404:	mov	r0, #1
   27408:	add	sp, sp, #8
   2740c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27410:	ldr	r1, [r4, #48]	; 0x30
   27414:	add	r2, r6, #1
   27418:	cmp	r2, r1
   2741c:	bge	27620 <__assert_fail@plt+0x163c4>
   27420:	ldrb	r1, [r4, #75]	; 0x4b
   27424:	cmp	r1, #0
   27428:	bne	279dc <__assert_fail@plt+0x16780>
   2742c:	ldrb	r6, [sl, r2]
   27430:	cmp	r3, #1
   27434:	mov	r3, #1
   27438:	strb	r6, [r5]
   2743c:	strb	r3, [r5, #4]
   27440:	ble	279a8 <__assert_fail@plt+0x1674c>
   27444:	ldr	r1, [r4, #8]
   27448:	add	r1, r1, r2, lsl #2
   2744c:	ldr	r4, [r1]
   27450:	mov	r0, r4
   27454:	bl	11184 <iswalnum@plt>
   27458:	ldrb	r3, [r5, #6]
   2745c:	sub	r4, r4, #95	; 0x5f
   27460:	clz	r4, r4
   27464:	lsr	r4, r4, #5
   27468:	bic	r3, r3, #64	; 0x40
   2746c:	cmp	r0, #0
   27470:	orrne	r4, r4, #1
   27474:	orr	r4, r3, r4, lsl #6
   27478:	strb	r4, [r5, #6]
   2747c:	sub	r3, r6, #39	; 0x27
   27480:	cmp	r3, #86	; 0x56
   27484:	ldrls	pc, [pc, r3, lsl #2]
   27488:	b	27600 <__assert_fail@plt+0x163a4>
   2748c:	andeq	r7, r2, r4, ror #15
   27490:	andeq	r7, r2, ip, asr #15
   27494:	muleq	r2, r0, r9
   27498:	andeq	r7, r2, r0, lsl #12
   2749c:	andeq	r7, r2, r4, ror r9
   274a0:	andeq	r7, r2, r0, lsl #12
   274a4:	andeq	r7, r2, r0, lsl #12
   274a8:	andeq	r7, r2, r0, lsl #12
   274ac:	andeq	r7, r2, r0, lsl #12
   274b0:	andeq	r7, r2, r0, lsl #12
   274b4:	andeq	r7, r2, r4, asr r9
   274b8:	andeq	r7, r2, r4, asr r9
   274bc:	andeq	r7, r2, r4, asr r9
   274c0:	andeq	r7, r2, r4, asr r9
   274c4:	andeq	r7, r2, r4, asr r9
   274c8:	andeq	r7, r2, r4, asr r9
   274cc:	andeq	r7, r2, r4, asr r9
   274d0:	andeq	r7, r2, r4, asr r9
   274d4:	andeq	r7, r2, r4, asr r9
   274d8:	andeq	r7, r2, r0, lsl #12
   274dc:	andeq	r7, r2, r0, lsl #12
   274e0:	andeq	r7, r2, r4, lsr r9
   274e4:	andeq	r7, r2, r0, lsl #12
   274e8:	andeq	r7, r2, r4, lsl r9
   274ec:	strdeq	r7, [r2], -r8
   274f0:	andeq	r7, r2, r0, lsl #12
   274f4:	andeq	r7, r2, r0, lsl #12
   274f8:	ldrdeq	r7, [r2], -r8
   274fc:	andeq	r7, r2, r0, lsl #12
   27500:	andeq	r7, r2, r0, lsl #12
   27504:	andeq	r7, r2, r0, lsl #12
   27508:	andeq	r7, r2, r0, lsl #12
   2750c:	andeq	r7, r2, r0, lsl #12
   27510:	andeq	r7, r2, r0, lsl #12
   27514:	andeq	r7, r2, r0, lsl #12
   27518:	andeq	r7, r2, r0, lsl #12
   2751c:	andeq	r7, r2, r0, lsl #12
   27520:	andeq	r7, r2, r0, lsl #12
   27524:	andeq	r7, r2, r0, lsl #12
   27528:	andeq	r7, r2, r0, lsl #12
   2752c:	andeq	r7, r2, r0, lsl #12
   27530:	andeq	r7, r2, r0, lsl #12
   27534:	andeq	r7, r2, r0, lsl #12
   27538:	andeq	r7, r2, r0, lsl #12
   2753c:	andeq	r7, r2, r0, asr #17
   27540:	andeq	r7, r2, r0, lsl #12
   27544:	andeq	r7, r2, r0, lsl #12
   27548:	andeq	r7, r2, r0, lsl #12
   2754c:	andeq	r7, r2, r8, lsr #17
   27550:	andeq	r7, r2, r0, lsl #12
   27554:	andeq	r7, r2, r0, lsl #12
   27558:	andeq	r7, r2, r0, lsl #12
   2755c:	andeq	r7, r2, r0, lsl #12
   27560:	andeq	r7, r2, r0, lsl #12
   27564:	andeq	r7, r2, r0, lsl #12
   27568:	andeq	r7, r2, r0, lsl #12
   2756c:	andeq	r7, r2, r0, lsl #12
   27570:	andeq	r7, r2, r8, lsl #17
   27574:	andeq	r7, r2, r0, lsl #12
   27578:	andeq	r7, r2, r8, ror #16
   2757c:	andeq	r7, r2, r0, lsl #12
   27580:	andeq	r7, r2, r0, lsl #12
   27584:	andeq	r7, r2, r0, lsl #12
   27588:	andeq	r7, r2, r0, lsl #12
   2758c:	andeq	r7, r2, r0, lsl #12
   27590:	andeq	r7, r2, r0, lsl #12
   27594:	andeq	r7, r2, r0, lsl #12
   27598:	andeq	r7, r2, r0, lsl #12
   2759c:	andeq	r7, r2, r0, lsl #12
   275a0:	andeq	r7, r2, r0, lsl #12
   275a4:	andeq	r7, r2, r0, lsl #12
   275a8:	andeq	r7, r2, r0, lsl #12
   275ac:	andeq	r7, r2, r0, lsl #12
   275b0:	andeq	r7, r2, r0, lsl #12
   275b4:	andeq	r7, r2, r0, lsl #12
   275b8:	andeq	r7, r2, r0, lsl #12
   275bc:	andeq	r7, r2, r0, asr r8
   275c0:	andeq	r7, r2, r0, lsl #12
   275c4:	andeq	r7, r2, r0, lsl #12
   275c8:	andeq	r7, r2, r0, lsl #12
   275cc:	andeq	r7, r2, r8, lsr r8
   275d0:	andeq	r7, r2, r0, lsl #12
   275d4:	andeq	r7, r2, r0, lsl #12
   275d8:	andeq	r7, r2, r0, lsl #12
   275dc:	andeq	r7, r2, r8, ror #11
   275e0:	andeq	r7, r2, r0, lsr #16
   275e4:	andeq	r7, r2, r4, lsl #16
   275e8:	and	r8, r8, #4608	; 0x1200
   275ec:	cmp	r8, #512	; 0x200
   275f0:	moveq	r3, #23
   275f4:	strbeq	r3, [r5, #4]
   275f8:	moveq	r0, #2
   275fc:	beq	273a0 <__assert_fail@plt+0x16144>
   27600:	mov	r0, #2
   27604:	b	273a0 <__assert_fail@plt+0x16144>
   27608:	ldrb	r3, [r0, #6]
   2760c:	mov	r0, #1
   27610:	strb	r0, [r5, #4]
   27614:	orr	r3, r3, #32
   27618:	strb	r3, [r5, #6]
   2761c:	b	273a0 <__assert_fail@plt+0x16144>
   27620:	mov	r3, #36	; 0x24
   27624:	strb	r3, [r5, #4]
   27628:	mov	r0, #1
   2762c:	b	273a0 <__assert_fail@plt+0x16144>
   27630:	and	r8, r8, #4608	; 0x1200
   27634:	cmp	r8, #4608	; 0x1200
   27638:	moveq	r3, #24
   2763c:	strbeq	r3, [r5, #4]
   27640:	moveq	r0, #1
   27644:	bne	27404 <__assert_fail@plt+0x161a8>
   27648:	b	273a0 <__assert_fail@plt+0x16144>
   2764c:	tst	r8, #2048	; 0x800
   27650:	beq	27404 <__assert_fail@plt+0x161a8>
   27654:	mov	r3, #10
   27658:	strb	r3, [r5, #4]
   2765c:	mov	r0, #1
   27660:	b	273a0 <__assert_fail@plt+0x16144>
   27664:	tst	r8, #8
   27668:	bne	276ac <__assert_fail@plt+0x16450>
   2766c:	ldr	r3, [r4, #48]	; 0x30
   27670:	add	r6, r6, #1
   27674:	cmp	r6, r3
   27678:	beq	276ac <__assert_fail@plt+0x16450>
   2767c:	mov	r2, r8
   27680:	str	r6, [r4, #40]	; 0x28
   27684:	mov	r1, r4
   27688:	mov	r0, sp
   2768c:	bl	2710c <__assert_fail@plt+0x15eb0>
   27690:	ldrb	r2, [sp, #4]
   27694:	ldr	r3, [r4, #40]	; 0x28
   27698:	sub	r2, r2, #9
   2769c:	sub	r3, r3, #1
   276a0:	cmp	r2, #1
   276a4:	str	r3, [r4, #40]	; 0x28
   276a8:	bhi	27404 <__assert_fail@plt+0x161a8>
   276ac:	mov	r2, #12
   276b0:	mov	r3, #32
   276b4:	strb	r2, [r5, #4]
   276b8:	str	r3, [r5]
   276bc:	mov	r0, #1
   276c0:	b	273a0 <__assert_fail@plt+0x16144>
   276c4:	tst	r8, #8192	; 0x2000
   276c8:	beq	27404 <__assert_fail@plt+0x161a8>
   276cc:	mov	r3, #8
   276d0:	strb	r3, [r5, #4]
   276d4:	mov	r0, #1
   276d8:	b	273a0 <__assert_fail@plt+0x16144>
   276dc:	tst	r8, #8192	; 0x2000
   276e0:	beq	27404 <__assert_fail@plt+0x161a8>
   276e4:	mov	r3, #9
   276e8:	strb	r3, [r5, #4]
   276ec:	mov	r0, #1
   276f0:	b	273a0 <__assert_fail@plt+0x16144>
   276f4:	mov	r3, #11
   276f8:	strb	r3, [r5, #4]
   276fc:	mov	r0, #1
   27700:	b	273a0 <__assert_fail@plt+0x16144>
   27704:	ldr	r3, [pc, #864]	; 27a6c <__assert_fail@plt+0x16810>
   27708:	and	r3, r3, r8
   2770c:	cmp	r3, #0
   27710:	bne	27404 <__assert_fail@plt+0x161a8>
   27714:	mov	r3, #18
   27718:	strb	r3, [r5, #4]
   2771c:	mov	r0, #1
   27720:	b	273a0 <__assert_fail@plt+0x16144>
   27724:	mov	r3, #5
   27728:	strb	r3, [r5, #4]
   2772c:	mov	r0, #1
   27730:	b	273a0 <__assert_fail@plt+0x16144>
   27734:	ldr	r3, [pc, #816]	; 27a6c <__assert_fail@plt+0x16810>
   27738:	and	r3, r3, r8
   2773c:	cmp	r3, #0
   27740:	bne	27404 <__assert_fail@plt+0x161a8>
   27744:	mov	r3, #19
   27748:	strb	r3, [r5, #4]
   2774c:	mov	r0, #1
   27750:	b	273a0 <__assert_fail@plt+0x16144>
   27754:	mov	r3, #20
   27758:	strb	r3, [r5, #4]
   2775c:	mov	r0, #1
   27760:	b	273a0 <__assert_fail@plt+0x16144>
   27764:	ldr	r3, [pc, #772]	; 27a70 <__assert_fail@plt+0x16814>
   27768:	cmp	r6, #0
   2776c:	and	r3, r3, r8
   27770:	clz	r3, r3
   27774:	lsr	r3, r3, #5
   27778:	moveq	r3, #0
   2777c:	cmp	r3, #0
   27780:	beq	277a4 <__assert_fail@plt+0x16548>
   27784:	add	r6, sl, r6
   27788:	lsr	r3, r8, #11
   2778c:	ldrb	r2, [r6, #-1]
   27790:	eor	r3, r3, #1
   27794:	cmp	r2, #10
   27798:	orrne	r3, r3, #1
   2779c:	tst	r3, #1
   277a0:	bne	27404 <__assert_fail@plt+0x161a8>
   277a4:	mov	r2, #12
   277a8:	mov	r3, #16
   277ac:	strb	r2, [r5, #4]
   277b0:	str	r3, [r5]
   277b4:	mov	r0, #1
   277b8:	b	273a0 <__assert_fail@plt+0x16144>
   277bc:	and	r8, r8, #33792	; 0x8400
   277c0:	cmp	r8, #32768	; 0x8000
   277c4:	bne	27404 <__assert_fail@plt+0x161a8>
   277c8:	b	27654 <__assert_fail@plt+0x163f8>
   277cc:	tst	r8, #8192	; 0x2000
   277d0:	bne	27600 <__assert_fail@plt+0x163a4>
   277d4:	mov	r3, #8
   277d8:	strb	r3, [r5, #4]
   277dc:	mov	r0, #2
   277e0:	b	273a0 <__assert_fail@plt+0x16144>
   277e4:	tst	r8, #524288	; 0x80000
   277e8:	bne	27600 <__assert_fail@plt+0x163a4>
   277ec:	mov	r2, #12
   277f0:	mov	r3, #128	; 0x80
   277f4:	strb	r2, [r5, #4]
   277f8:	str	r3, [r5]
   277fc:	mov	r0, #2
   27800:	b	273a0 <__assert_fail@plt+0x16144>
   27804:	and	r8, r8, #4608	; 0x1200
   27808:	cmp	r8, #512	; 0x200
   2780c:	moveq	r3, #24
   27810:	strbeq	r3, [r5, #4]
   27814:	moveq	r0, #2
   27818:	bne	27600 <__assert_fail@plt+0x163a4>
   2781c:	b	273a0 <__assert_fail@plt+0x16144>
   27820:	tst	r8, #33792	; 0x8400
   27824:	bne	27600 <__assert_fail@plt+0x163a4>
   27828:	mov	r3, #10
   2782c:	strb	r3, [r5, #4]
   27830:	mov	r0, #2
   27834:	b	273a0 <__assert_fail@plt+0x16144>
   27838:	tst	r8, #524288	; 0x80000
   2783c:	bne	27600 <__assert_fail@plt+0x163a4>
   27840:	mov	r3, #32
   27844:	strb	r3, [r5, #4]
   27848:	mov	r0, #2
   2784c:	b	273a0 <__assert_fail@plt+0x16144>
   27850:	tst	r8, #524288	; 0x80000
   27854:	bne	27600 <__assert_fail@plt+0x163a4>
   27858:	mov	r3, #34	; 0x22
   2785c:	strb	r3, [r5, #4]
   27860:	mov	r0, #2
   27864:	b	273a0 <__assert_fail@plt+0x16144>
   27868:	tst	r8, #524288	; 0x80000
   2786c:	bne	27600 <__assert_fail@plt+0x163a4>
   27870:	mov	r2, #12
   27874:	mov	r3, #256	; 0x100
   27878:	strb	r2, [r5, #4]
   2787c:	str	r3, [r5]
   27880:	mov	r0, #2
   27884:	b	273a0 <__assert_fail@plt+0x16144>
   27888:	tst	r8, #524288	; 0x80000
   2788c:	bne	27600 <__assert_fail@plt+0x163a4>
   27890:	mov	r2, #12
   27894:	mov	r3, #64	; 0x40
   27898:	strb	r2, [r5, #4]
   2789c:	str	r3, [r5]
   278a0:	mov	r0, #2
   278a4:	b	273a0 <__assert_fail@plt+0x16144>
   278a8:	tst	r8, #524288	; 0x80000
   278ac:	bne	27600 <__assert_fail@plt+0x163a4>
   278b0:	mov	r3, #33	; 0x21
   278b4:	strb	r3, [r5, #4]
   278b8:	mov	r0, #2
   278bc:	b	273a0 <__assert_fail@plt+0x16144>
   278c0:	tst	r8, #524288	; 0x80000
   278c4:	bne	27600 <__assert_fail@plt+0x163a4>
   278c8:	mov	r3, #35	; 0x23
   278cc:	strb	r3, [r5, #4]
   278d0:	mov	r0, #2
   278d4:	b	273a0 <__assert_fail@plt+0x16144>
   278d8:	tst	r8, #524288	; 0x80000
   278dc:	bne	27600 <__assert_fail@plt+0x163a4>
   278e0:	mov	r2, #12
   278e4:	mov	r3, #512	; 0x200
   278e8:	strb	r2, [r5, #4]
   278ec:	str	r3, [r5]
   278f0:	mov	r0, #2
   278f4:	b	273a0 <__assert_fail@plt+0x16144>
   278f8:	ldr	r0, [pc, #364]	; 27a6c <__assert_fail@plt+0x16810>
   278fc:	and	r0, r0, r8
   27900:	cmp	r0, #2
   27904:	moveq	r3, #19
   27908:	strbeq	r3, [r5, #4]
   2790c:	bne	27600 <__assert_fail@plt+0x163a4>
   27910:	b	273a0 <__assert_fail@plt+0x16144>
   27914:	tst	r8, #524288	; 0x80000
   27918:	bne	27600 <__assert_fail@plt+0x163a4>
   2791c:	mov	r2, #12
   27920:	mov	r3, #9
   27924:	strb	r2, [r5, #4]
   27928:	str	r3, [r5]
   2792c:	mov	r0, #2
   27930:	b	273a0 <__assert_fail@plt+0x16144>
   27934:	tst	r8, #524288	; 0x80000
   27938:	bne	27600 <__assert_fail@plt+0x163a4>
   2793c:	mov	r2, #12
   27940:	mov	r3, #6
   27944:	strb	r2, [r5, #4]
   27948:	str	r3, [r5]
   2794c:	mov	r0, #2
   27950:	b	273a0 <__assert_fail@plt+0x16144>
   27954:	tst	r8, #16384	; 0x4000
   27958:	bne	27600 <__assert_fail@plt+0x163a4>
   2795c:	sub	r6, r6, #49	; 0x31
   27960:	mov	r3, #4
   27964:	str	r6, [r5]
   27968:	strb	r3, [r5, #4]
   2796c:	mov	r0, #2
   27970:	b	273a0 <__assert_fail@plt+0x16144>
   27974:	ldr	r0, [pc, #240]	; 27a6c <__assert_fail@plt+0x16810>
   27978:	and	r0, r0, r8
   2797c:	cmp	r0, #2
   27980:	moveq	r3, #18
   27984:	strbeq	r3, [r5, #4]
   27988:	bne	27600 <__assert_fail@plt+0x163a4>
   2798c:	b	273a0 <__assert_fail@plt+0x16144>
   27990:	tst	r8, #8192	; 0x2000
   27994:	bne	27600 <__assert_fail@plt+0x163a4>
   27998:	mov	r3, #9
   2799c:	strb	r3, [r5, #4]
   279a0:	mov	r0, #2
   279a4:	b	273a0 <__assert_fail@plt+0x16144>
   279a8:	bl	11148 <__ctype_b_loc@plt>
   279ac:	lsl	r3, r6, #1
   279b0:	ldrb	r2, [r5, #6]
   279b4:	bic	r2, r2, #64	; 0x40
   279b8:	ldr	r1, [r0]
   279bc:	ldrh	r3, [r1, r3]
   279c0:	lsr	r3, r3, #3
   279c4:	and	r3, r3, #1
   279c8:	cmp	r6, #95	; 0x5f
   279cc:	orreq	r3, r3, #1
   279d0:	orr	r3, r2, r3, lsl #6
   279d4:	strb	r3, [r5, #6]
   279d8:	b	2747c <__assert_fail@plt+0x16220>
   279dc:	cmp	r3, #1
   279e0:	ble	27a14 <__assert_fail@plt+0x167b8>
   279e4:	ldr	r0, [r4, #8]
   279e8:	add	r1, r0, r2, lsl #2
   279ec:	ldr	r0, [r0, r2, lsl #2]
   279f0:	cmn	r0, #1
   279f4:	beq	27a58 <__assert_fail@plt+0x167fc>
   279f8:	ldr	r0, [r4, #28]
   279fc:	add	r6, r6, #2
   27a00:	cmp	r0, r6
   27a04:	beq	27a14 <__assert_fail@plt+0x167b8>
   27a08:	ldr	r0, [r1, #4]
   27a0c:	cmn	r0, #1
   27a10:	beq	27a58 <__assert_fail@plt+0x167fc>
   27a14:	ldrb	r1, [r4, #76]	; 0x4c
   27a18:	cmp	r1, #0
   27a1c:	bne	27a34 <__assert_fail@plt+0x167d8>
   27a20:	ldr	r1, [r4]
   27a24:	ldr	r0, [r4, #24]
   27a28:	add	r1, r1, r2
   27a2c:	ldrb	r6, [r1, r0]
   27a30:	b	27430 <__assert_fail@plt+0x161d4>
   27a34:	ldr	ip, [r4, #12]
   27a38:	ldr	r1, [r4]
   27a3c:	ldr	r0, [r4, #24]
   27a40:	ldr	ip, [ip, r2, lsl #2]
   27a44:	add	r1, r1, ip
   27a48:	ldrb	r6, [r1, r0]
   27a4c:	tst	r6, #128	; 0x80
   27a50:	bne	2742c <__assert_fail@plt+0x161d0>
   27a54:	b	27430 <__assert_fail@plt+0x161d4>
   27a58:	ldrb	r6, [sl, r2]
   27a5c:	mov	r3, #1
   27a60:	strb	r3, [r5, #4]
   27a64:	strb	r6, [r5]
   27a68:	b	2744c <__assert_fail@plt+0x161f0>
   27a6c:	andeq	r0, r0, r2, lsl #8
   27a70:	addeq	r0, r0, r8
   27a74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27a78:	mov	sl, r0
   27a7c:	ldr	r8, [pc, #172]	; 27b30 <__assert_fail@plt+0x168d4>
   27a80:	mov	r4, r1
   27a84:	mov	r6, r2
   27a88:	mvn	r5, #0
   27a8c:	mov	r9, #32768	; 0x8000
   27a90:	mvn	r7, #1
   27a94:	mov	r2, r6
   27a98:	mov	r1, sl
   27a9c:	mov	r0, r4
   27aa0:	bl	2710c <__assert_fail@plt+0x15eb0>
   27aa4:	ldrb	r2, [r4, #4]
   27aa8:	ldr	r3, [sl, #40]	; 0x28
   27aac:	cmp	r2, #2
   27ab0:	add	r0, r3, r0
   27ab4:	str	r0, [sl, #40]	; 0x28
   27ab8:	ldrb	r3, [r4]
   27abc:	beq	27b24 <__assert_fail@plt+0x168c8>
   27ac0:	cmp	r3, #44	; 0x2c
   27ac4:	cmpne	r2, #24
   27ac8:	beq	27b28 <__assert_fail@plt+0x168cc>
   27acc:	cmp	r2, #1
   27ad0:	beq	27adc <__assert_fail@plt+0x16880>
   27ad4:	mov	r5, r7
   27ad8:	b	27a94 <__assert_fail@plt+0x16838>
   27adc:	sub	r1, r3, #48	; 0x30
   27ae0:	uxtb	r2, r1
   27ae4:	cmp	r2, #9
   27ae8:	movhi	r2, #0
   27aec:	movls	r2, #1
   27af0:	cmn	r5, #2
   27af4:	moveq	r2, #0
   27af8:	cmp	r2, #0
   27afc:	beq	27ad4 <__assert_fail@plt+0x16878>
   27b00:	cmn	r5, #1
   27b04:	moveq	r5, r1
   27b08:	beq	27a94 <__assert_fail@plt+0x16838>
   27b0c:	add	r5, r5, r5, lsl #2
   27b10:	add	r3, r3, r5, lsl #1
   27b14:	cmp	r3, r8
   27b18:	suble	r5, r3, #48	; 0x30
   27b1c:	movgt	r5, r9
   27b20:	b	27a94 <__assert_fail@plt+0x16838>
   27b24:	mvn	r5, #1
   27b28:	mov	r0, r5
   27b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27b30:	andeq	r8, r0, r0, lsr r0
   27b34:	ldr	ip, [r1, #80]	; 0x50
   27b38:	push	{r4, r5, r6, r7, r8, r9, lr}
   27b3c:	sub	sp, sp, #12
   27b40:	cmp	ip, #1
   27b44:	ldr	r4, [r1, #40]	; 0x28
   27b48:	ldrb	r7, [sp, #44]	; 0x2c
   27b4c:	beq	27bc0 <__assert_fail@plt+0x16964>
   27b50:	ldr	lr, [r1, #28]
   27b54:	add	ip, r4, #1
   27b58:	cmp	ip, lr
   27b5c:	bge	27bc0 <__assert_fail@plt+0x16964>
   27b60:	ldr	r5, [r1, #8]
   27b64:	add	r6, r5, ip, lsl #2
   27b68:	ldr	ip, [r5, ip, lsl #2]
   27b6c:	cmn	ip, #1
   27b70:	subeq	lr, lr, r4
   27b74:	moveq	r2, r6
   27b78:	moveq	r3, #1
   27b7c:	beq	27b90 <__assert_fail@plt+0x16934>
   27b80:	b	27bc0 <__assert_fail@plt+0x16964>
   27b84:	ldr	ip, [r2, #4]!
   27b88:	cmn	ip, #1
   27b8c:	bne	27ba0 <__assert_fail@plt+0x16944>
   27b90:	add	r3, r3, #1
   27b94:	cmp	r3, lr
   27b98:	add	r5, r3, r4
   27b9c:	bne	27b84 <__assert_fail@plt+0x16928>
   27ba0:	ldr	ip, [r6, #-4]
   27ba4:	mov	r2, #1
   27ba8:	mov	r3, #0
   27bac:	stm	r0, {r2, ip}
   27bb0:	str	r5, [r1, #40]	; 0x28
   27bb4:	mov	r0, r3
   27bb8:	add	sp, sp, #12
   27bbc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   27bc0:	ldrb	ip, [r2, #4]
   27bc4:	add	r4, r4, r3
   27bc8:	str	r4, [r1, #40]	; 0x28
   27bcc:	and	r3, ip, #251	; 0xfb
   27bd0:	cmp	ip, #28
   27bd4:	cmpne	r3, #26
   27bd8:	beq	27c14 <__assert_fail@plt+0x169b8>
   27bdc:	cmp	ip, #22
   27be0:	moveq	ip, r7
   27be4:	orrne	ip, r7, #1
   27be8:	cmp	ip, #0
   27bec:	mov	r5, r2
   27bf0:	mov	r4, r0
   27bf4:	beq	27c28 <__assert_fail@plt+0x169cc>
   27bf8:	mov	r3, #0
   27bfc:	str	r3, [r4]
   27c00:	ldrb	r2, [r5]
   27c04:	mov	r0, r3
   27c08:	strb	r2, [r4, #4]
   27c0c:	add	sp, sp, #12
   27c10:	pop	{r4, r5, r6, r7, r8, r9, pc}
   27c14:	ldr	r5, [r1, #56]	; 0x38
   27c18:	cmp	r4, r5
   27c1c:	blt	27c48 <__assert_fail@plt+0x169ec>
   27c20:	mov	r3, #7
   27c24:	b	27bb4 <__assert_fail@plt+0x16958>
   27c28:	ldr	r2, [sp, #40]	; 0x28
   27c2c:	mov	r0, sp
   27c30:	bl	1da6c <__assert_fail@plt+0xc810>
   27c34:	ldrb	r3, [sp, #4]
   27c38:	cmp	r3, #21
   27c3c:	movne	r3, #11
   27c40:	bne	27bb4 <__assert_fail@plt+0x16958>
   27c44:	b	27bf8 <__assert_fail@plt+0x1699c>
   27c48:	ldrb	r6, [r2]
   27c4c:	mov	lr, #0
   27c50:	b	27c74 <__assert_fail@plt+0x16a18>
   27c54:	ldr	r3, [r0, #4]
   27c58:	strb	ip, [r3, lr]
   27c5c:	add	lr, lr, #1
   27c60:	cmp	lr, #32
   27c64:	beq	27c20 <__assert_fail@plt+0x169c4>
   27c68:	ldrb	ip, [r2, #4]
   27c6c:	ldr	r4, [r1, #40]	; 0x28
   27c70:	ldr	r5, [r1, #56]	; 0x38
   27c74:	cmp	ip, #30
   27c78:	beq	27ce4 <__assert_fail@plt+0x16a88>
   27c7c:	ldr	ip, [r1, #4]
   27c80:	add	r3, r4, #1
   27c84:	str	r3, [r1, #40]	; 0x28
   27c88:	ldrb	ip, [ip, r4]
   27c8c:	cmp	r5, r3
   27c90:	ble	27c20 <__assert_fail@plt+0x169c4>
   27c94:	cmp	r6, ip
   27c98:	bne	27c54 <__assert_fail@plt+0x169f8>
   27c9c:	ldr	r4, [r1, #4]
   27ca0:	ldrb	r4, [r4, r3]
   27ca4:	cmp	r4, #93	; 0x5d
   27ca8:	bne	27c54 <__assert_fail@plt+0x169f8>
   27cac:	add	r3, r3, #1
   27cb0:	str	r3, [r1, #40]	; 0x28
   27cb4:	ldr	r1, [r0, #4]
   27cb8:	mov	r3, #0
   27cbc:	strb	r3, [r1, lr]
   27cc0:	ldrb	r2, [r2, #4]
   27cc4:	cmp	r2, #28
   27cc8:	beq	27dc4 <__assert_fail@plt+0x16b68>
   27ccc:	cmp	r2, #30
   27cd0:	beq	27db8 <__assert_fail@plt+0x16b5c>
   27cd4:	cmp	r2, #26
   27cd8:	moveq	r2, #3
   27cdc:	streq	r2, [r0]
   27ce0:	b	27bb4 <__assert_fail@plt+0x16958>
   27ce4:	ldrb	r3, [r1, #75]	; 0x4b
   27ce8:	cmp	r3, #0
   27cec:	beq	27c7c <__assert_fail@plt+0x16a20>
   27cf0:	ldrb	r3, [r1, #76]	; 0x4c
   27cf4:	cmp	r3, #0
   27cf8:	beq	27d94 <__assert_fail@plt+0x16b38>
   27cfc:	ldr	r8, [r1, #28]
   27d00:	cmp	r4, r8
   27d04:	beq	27db0 <__assert_fail@plt+0x16b54>
   27d08:	ldr	r3, [r1, #8]
   27d0c:	lsl	ip, r4, #2
   27d10:	ldr	r3, [r3, r4, lsl #2]
   27d14:	cmn	r3, #1
   27d18:	beq	27c7c <__assert_fail@plt+0x16a20>
   27d1c:	ldr	r7, [r1, #12]
   27d20:	ldr	r3, [r1]
   27d24:	ldr	r7, [r7, ip]
   27d28:	ldr	ip, [r1, #24]
   27d2c:	add	r3, r3, r7
   27d30:	ldrb	ip, [r3, ip]
   27d34:	tst	ip, #128	; 0x80
   27d38:	bne	27c7c <__assert_fail@plt+0x16a20>
   27d3c:	ldr	r3, [r1, #80]	; 0x50
   27d40:	cmp	r3, #1
   27d44:	add	r3, r4, #1
   27d48:	beq	27d8c <__assert_fail@plt+0x16b30>
   27d4c:	cmp	r8, r3
   27d50:	ble	27d8c <__assert_fail@plt+0x16b30>
   27d54:	ldr	r9, [r1, #8]
   27d58:	add	r7, r9, r3, lsl #2
   27d5c:	ldr	r9, [r9, r3, lsl #2]
   27d60:	cmn	r9, #1
   27d64:	addeq	r4, r4, #2
   27d68:	beq	27d80 <__assert_fail@plt+0x16b24>
   27d6c:	b	27d8c <__assert_fail@plt+0x16b30>
   27d70:	ldr	r9, [r7, #4]!
   27d74:	add	r4, r4, #1
   27d78:	cmn	r9, #1
   27d7c:	bne	27d8c <__assert_fail@plt+0x16b30>
   27d80:	cmp	r4, r8
   27d84:	mov	r3, r4
   27d88:	bne	27d70 <__assert_fail@plt+0x16b14>
   27d8c:	str	r3, [r1, #40]	; 0x28
   27d90:	b	27c8c <__assert_fail@plt+0x16a30>
   27d94:	ldr	ip, [r1]
   27d98:	ldr	r7, [r1, #24]
   27d9c:	add	ip, ip, r4
   27da0:	add	r3, r4, #1
   27da4:	str	r3, [r1, #40]	; 0x28
   27da8:	ldrb	ip, [ip, r7]
   27dac:	b	27c8c <__assert_fail@plt+0x16a30>
   27db0:	lsl	ip, r4, #2
   27db4:	b	27d1c <__assert_fail@plt+0x16ac0>
   27db8:	mov	r2, #4
   27dbc:	str	r2, [r0]
   27dc0:	b	27bb4 <__assert_fail@plt+0x16958>
   27dc4:	mov	r2, #2
   27dc8:	str	r2, [r0]
   27dcc:	b	27bb4 <__assert_fail@plt+0x16958>
   27dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27dd4:	sub	sp, sp, #164	; 0xa4
   27dd8:	mov	r4, r1
   27ddc:	str	r2, [sp, #20]
   27de0:	ldrb	r2, [r2, #4]
   27de4:	ldr	r1, [r1]
   27de8:	str	r3, [sp, #28]
   27dec:	sub	r3, r2, #1
   27df0:	mov	sl, r0
   27df4:	str	r1, [sp, #24]
   27df8:	cmp	r3, #35	; 0x23
   27dfc:	ldrls	pc, [pc, r3, lsl #2]
   27e00:	b	28a28 <__assert_fail@plt+0x177cc>
   27e04:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   27e08:			; <UNDEFINED> instruction: 0x00027eb0
   27e0c:	andeq	r8, r2, r8, lsr #20
   27e10:	andeq	r8, r2, r4, lsl #17
   27e14:	andeq	r8, r2, ip, lsr r4
   27e18:	andeq	r8, r2, r8, lsr #20
   27e1c:	andeq	r8, r2, r8, lsr #20
   27e20:	andeq	r8, r2, r0, lsl #9
   27e24:	andeq	r8, r2, r8, lsr sl
   27e28:			; <UNDEFINED> instruction: 0x00027eb0
   27e2c:	ldrdeq	r7, [r2], -r0
   27e30:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   27e34:	andeq	r8, r2, r8, lsr #20
   27e38:	andeq	r8, r2, r8, lsr #20
   27e3c:	andeq	r8, r2, r8, lsr #20
   27e40:	andeq	r8, r2, r8, lsr #20
   27e44:	andeq	r8, r2, r8, lsr #20
   27e48:	ldrdeq	r7, [r2], -r0
   27e4c:	ldrdeq	r7, [r2], -r0
   27e50:	andeq	r8, r2, r4, lsr r7
   27e54:	andeq	r8, r2, r8, lsr #20
   27e58:	andeq	r8, r2, r8, lsr #20
   27e5c:	andeq	r7, r2, r4, asr #29
   27e60:	andeq	r7, r2, ip, ror #29
   27e64:	andeq	r8, r2, r8, lsr #20
   27e68:	andeq	r8, r2, r8, lsr #20
   27e6c:	andeq	r8, r2, r8, lsr #20
   27e70:	andeq	r8, r2, r8, lsr #20
   27e74:	andeq	r8, r2, r8, lsr #20
   27e78:	andeq	r8, r2, r8, lsr #20
   27e7c:	andeq	r8, r2, r8, lsr #20
   27e80:	andeq	r8, r2, r0, lsl #20
   27e84:	andeq	r8, r2, r0, lsl #20
   27e88:	andeq	r8, r2, ip, ror #10
   27e8c:	andeq	r8, r2, ip, ror #10
   27e90:	andeq	r8, r2, r0, asr #11
   27e94:	cmp	r0, #0
   27e98:	beq	27ea4 <__assert_fail@plt+0x16c48>
   27e9c:	ldr	r1, [pc, #4032]	; 28e64 <__assert_fail@plt+0x17c08>
   27ea0:	bl	1dea0 <__assert_fail@plt+0xcc44>
   27ea4:	ldr	r2, [sp, #204]	; 0xcc
   27ea8:	mov	r3, #8
   27eac:	str	r3, [r2]
   27eb0:	mov	r3, #0
   27eb4:	str	r3, [sp, #32]
   27eb8:	ldr	r0, [sp, #32]
   27ebc:	add	sp, sp, #164	; 0xa4
   27ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27ec4:	ldr	r3, [sp, #28]
   27ec8:	tst	r3, #16777216	; 0x1000000
   27ecc:	bne	28168 <__assert_fail@plt+0x16f0c>
   27ed0:	ldr	r3, [sp, #28]
   27ed4:	tst	r3, #32
   27ed8:	bne	28168 <__assert_fail@plt+0x16f0c>
   27edc:	tst	r3, #16
   27ee0:	bne	28bf8 <__assert_fail@plt+0x1799c>
   27ee4:	cmp	r2, #9
   27ee8:	beq	28a38 <__assert_fail@plt+0x177dc>
   27eec:	ldr	r1, [sp, #20]
   27ef0:	ldr	r0, [sp, #24]
   27ef4:	mov	r3, #0
   27ef8:	mov	r2, #1
   27efc:	str	r1, [sp]
   27f00:	strb	r2, [r1, #4]
   27f04:	mov	r2, r3
   27f08:	add	r1, r0, #64	; 0x40
   27f0c:	add	r0, r0, #56	; 0x38
   27f10:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   27f14:	subs	r3, r0, #0
   27f18:	str	r3, [sp, #32]
   27f1c:	beq	289e8 <__assert_fail@plt+0x1778c>
   27f20:	ldr	r4, [sp, #20]
   27f24:	ldr	r2, [sp, #28]
   27f28:	mov	r1, sl
   27f2c:	mov	r0, r4
   27f30:	bl	2710c <__assert_fail@plt+0x15eb0>
   27f34:	ldr	r2, [sl, #40]	; 0x28
   27f38:	mov	fp, #0
   27f3c:	ldrb	r3, [r4, #4]
   27f40:	add	r2, r2, r0
   27f44:	str	r2, [sl, #40]	; 0x28
   27f48:	cmp	r3, #23
   27f4c:	bhi	27eb8 <__assert_fail@plt+0x16c5c>
   27f50:	ldr	r2, [pc, #3856]	; 28e68 <__assert_fail@plt+0x17c0c>
   27f54:	sub	r6, r3, #18
   27f58:	clz	r6, r6
   27f5c:	mvn	r2, r2, lsr r3
   27f60:	tst	r2, #1
   27f64:	lsr	r6, r6, #5
   27f68:	bne	27eb8 <__assert_fail@plt+0x16c5c>
   27f6c:	ldr	r2, [sp, #20]
   27f70:	cmp	r3, #23
   27f74:	ldr	r4, [sl, #40]	; 0x28
   27f78:	ldm	r2, {r0, r1}
   27f7c:	add	r2, sp, #96	; 0x60
   27f80:	stm	r2, {r0, r1}
   27f84:	beq	28238 <__assert_fail@plt+0x16fdc>
   27f88:	cmp	r3, #19
   27f8c:	moveq	r3, #1
   27f90:	mvnne	r3, #0
   27f94:	ldr	r2, [sp, #28]
   27f98:	mov	r1, sl
   27f9c:	ldr	r0, [sp, #20]
   27fa0:	str	r3, [sp, #16]
   27fa4:	bl	2710c <__assert_fail@plt+0x15eb0>
   27fa8:	ldr	r3, [sl, #40]	; 0x28
   27fac:	ldr	r2, [sp, #32]
   27fb0:	cmp	r2, #0
   27fb4:	add	r0, r3, r0
   27fb8:	str	r0, [sl, #40]	; 0x28
   27fbc:	beq	282a8 <__assert_fail@plt+0x1704c>
   27fc0:	cmp	r6, #0
   27fc4:	strle	fp, [sp, #36]	; 0x24
   27fc8:	ldrle	r5, [sp, #32]
   27fcc:	bgt	28188 <__assert_fail@plt+0x16f2c>
   27fd0:	ldrb	r3, [r5, #24]
   27fd4:	cmp	r3, #17
   27fd8:	beq	282c0 <__assert_fail@plt+0x17064>
   27fdc:	ldr	r3, [sp, #24]
   27fe0:	ldr	r2, [sp, #16]
   27fe4:	add	r4, sp, #128	; 0x80
   27fe8:	cmn	r2, #1
   27fec:	add	r7, r3, #56	; 0x38
   27ff0:	add	r8, r3, #64	; 0x40
   27ff4:	movne	ip, #10
   27ff8:	moveq	ip, #11
   27ffc:	str	r4, [sp]
   28000:	mov	r0, r7
   28004:	str	fp, [r4, #4]
   28008:	mov	r1, r8
   2800c:	mov	r3, #0
   28010:	mov	r2, r5
   28014:	str	fp, [sp, #128]	; 0x80
   28018:	strb	ip, [sp, #132]	; 0x84
   2801c:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   28020:	subs	r9, r0, #0
   28024:	beq	2820c <__assert_fail@plt+0x16fb0>
   28028:	ldr	r2, [sp, #16]
   2802c:	add	r6, r6, #2
   28030:	cmp	r6, r2
   28034:	bgt	280d8 <__assert_fail@plt+0x16e7c>
   28038:	str	sl, [sp, #40]	; 0x28
   2803c:	mov	sl, r9
   28040:	ldr	r9, [sp, #24]
   28044:	mov	r0, r5
   28048:	mov	r1, r9
   2804c:	bl	1fcd4 <__assert_fail@plt+0xea78>
   28050:	mov	ip, #16
   28054:	str	r4, [sp]
   28058:	mov	r2, sl
   2805c:	str	fp, [r4, #4]
   28060:	mov	r1, r8
   28064:	str	fp, [r4]
   28068:	strb	ip, [sp, #132]	; 0x84
   2806c:	mov	r5, r0
   28070:	mov	r3, r0
   28074:	mov	r0, r7
   28078:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   2807c:	cmp	r0, #0
   28080:	cmpne	r5, #0
   28084:	moveq	ip, #1
   28088:	movne	ip, #0
   2808c:	beq	2820c <__assert_fail@plt+0x16fb0>
   28090:	str	r4, [sp]
   28094:	mov	r2, r0
   28098:	str	ip, [r4, #4]
   2809c:	str	ip, [r4]
   280a0:	mov	r3, fp
   280a4:	mov	ip, #10
   280a8:	mov	r1, r8
   280ac:	mov	r0, r7
   280b0:	strb	ip, [sp, #132]	; 0x84
   280b4:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   280b8:	subs	sl, r0, #0
   280bc:	beq	2820c <__assert_fail@plt+0x16fb0>
   280c0:	ldr	r3, [sp, #16]
   280c4:	add	r6, r6, #1
   280c8:	cmp	r6, r3
   280cc:	ble	28044 <__assert_fail@plt+0x16de8>
   280d0:	mov	r9, sl
   280d4:	ldr	sl, [sp, #40]	; 0x28
   280d8:	ldr	r2, [sp, #36]	; 0x24
   280dc:	cmp	r2, #0
   280e0:	beq	283d8 <__assert_fail@plt+0x1717c>
   280e4:	str	r4, [sp]
   280e8:	mov	ip, #16
   280ec:	str	fp, [r4, #4]
   280f0:	mov	r3, r9
   280f4:	mov	r1, r8
   280f8:	mov	r0, r7
   280fc:	str	fp, [r4]
   28100:	strb	ip, [sp, #132]	; 0x84
   28104:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   28108:	ldr	r3, [sp, #204]	; 0xcc
   2810c:	ldr	r3, [r3]
   28110:	adds	r3, r3, #0
   28114:	movne	r3, #1
   28118:	cmp	r0, #0
   2811c:	movne	r3, #0
   28120:	cmp	r3, #0
   28124:	bne	28218 <__assert_fail@plt+0x16fbc>
   28128:	str	r0, [sp, #32]
   2812c:	ldr	r3, [sp, #28]
   28130:	tst	r3, #16777216	; 0x1000000
   28134:	ldr	r3, [sp, #20]
   28138:	ldrb	r3, [r3, #4]
   2813c:	beq	27f48 <__assert_fail@plt+0x16cec>
   28140:	cmp	r3, #23
   28144:	cmpne	r3, #11
   28148:	bne	27f48 <__assert_fail@plt+0x16cec>
   2814c:	ldr	r3, [sp, #32]
   28150:	cmp	r3, #0
   28154:	beq	28168 <__assert_fail@plt+0x16f0c>
   28158:	mov	r0, r3
   2815c:	mov	r2, #0
   28160:	ldr	r1, [pc, #3324]	; 28e64 <__assert_fail@plt+0x17c08>
   28164:	bl	1dea0 <__assert_fail@plt+0xcc44>
   28168:	ldr	r2, [sp, #204]	; 0xcc
   2816c:	mov	r3, #13
   28170:	str	r3, [r2]
   28174:	mov	r3, #0
   28178:	str	r3, [sp, #32]
   2817c:	ldr	r0, [sp, #32]
   28180:	add	sp, sp, #164	; 0xa4
   28184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28188:	cmp	r6, #1
   2818c:	beq	28a28 <__assert_fail@plt+0x177cc>
   28190:	ldr	r3, [sp, #24]
   28194:	ldr	r5, [sp, #32]
   28198:	add	r2, r3, #56	; 0x38
   2819c:	str	sl, [sp, #40]	; 0x28
   281a0:	str	r2, [sp, #36]	; 0x24
   281a4:	add	r9, r3, #64	; 0x40
   281a8:	mov	r7, #2
   281ac:	add	r4, sp, #128	; 0x80
   281b0:	mov	r8, #16
   281b4:	mov	sl, r5
   281b8:	b	281c8 <__assert_fail@plt+0x16f6c>
   281bc:	add	r7, r7, #1
   281c0:	cmp	r7, r6
   281c4:	bgt	28410 <__assert_fail@plt+0x171b4>
   281c8:	mov	r0, r5
   281cc:	ldr	r1, [sp, #24]
   281d0:	bl	1fcd4 <__assert_fail@plt+0xea78>
   281d4:	str	r4, [sp]
   281d8:	mov	r2, sl
   281dc:	str	fp, [r4, #4]
   281e0:	mov	r1, r9
   281e4:	str	fp, [r4]
   281e8:	strb	r8, [sp, #132]	; 0x84
   281ec:	mov	r5, r0
   281f0:	mov	r3, r0
   281f4:	ldr	r0, [sp, #36]	; 0x24
   281f8:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   281fc:	cmp	r0, #0
   28200:	cmpne	r5, #0
   28204:	mov	sl, r0
   28208:	bne	281bc <__assert_fail@plt+0x16f60>
   2820c:	ldr	r2, [sp, #204]	; 0xcc
   28210:	mov	r3, #12
   28214:	str	r3, [r2]
   28218:	ldr	r3, [sp, #32]
   2821c:	cmp	r3, #0
   28220:	beq	27eb0 <__assert_fail@plt+0x16c54>
   28224:	mov	r0, r3
   28228:	mov	r2, #0
   2822c:	ldr	r1, [pc, #3120]	; 28e64 <__assert_fail@plt+0x17c08>
   28230:	bl	1dea0 <__assert_fail@plt+0xcc44>
   28234:	b	27eb0 <__assert_fail@plt+0x16c54>
   28238:	ldr	r2, [sp, #28]
   2823c:	ldr	r1, [sp, #20]
   28240:	mov	r0, sl
   28244:	bl	27a74 <__assert_fail@plt+0x16818>
   28248:	cmn	r0, #1
   2824c:	str	r0, [sp, #16]
   28250:	beq	282d4 <__assert_fail@plt+0x17078>
   28254:	ldr	r3, [sp, #16]
   28258:	cmn	r3, #2
   2825c:	beq	28278 <__assert_fail@plt+0x1701c>
   28260:	ldr	r3, [sp, #20]
   28264:	ldrb	r3, [r3, #4]
   28268:	cmp	r3, #24
   2826c:	beq	283e0 <__assert_fail@plt+0x17184>
   28270:	cmp	r3, #1
   28274:	beq	283a8 <__assert_fail@plt+0x1714c>
   28278:	ldr	r3, [sp, #28]
   2827c:	tst	r3, #2097152	; 0x200000
   28280:	beq	28e44 <__assert_fail@plt+0x17be8>
   28284:	add	r3, sp, #96	; 0x60
   28288:	ldr	r2, [sp, #20]
   2828c:	ldm	r3, {r0, r1}
   28290:	mov	r3, #1
   28294:	str	r4, [sl, #40]	; 0x28
   28298:	stm	r2, {r0, r1}
   2829c:	ldr	r0, [sp, #32]
   282a0:	strb	r3, [r2, #4]
   282a4:	b	28108 <__assert_fail@plt+0x16eac>
   282a8:	ldr	r3, [sp, #204]	; 0xcc
   282ac:	ldr	r3, [r3]
   282b0:	cmp	r3, #0
   282b4:	bne	28218 <__assert_fail@plt+0x16fbc>
   282b8:	str	fp, [sp, #32]
   282bc:	b	2812c <__assert_fail@plt+0x16ed0>
   282c0:	ldr	r2, [r5, #20]
   282c4:	ldr	r1, [pc, #2976]	; 28e6c <__assert_fail@plt+0x17c10>
   282c8:	mov	r0, r5
   282cc:	bl	1dea0 <__assert_fail@plt+0xcc44>
   282d0:	b	27fdc <__assert_fail@plt+0x16d80>
   282d4:	ldr	r3, [sp, #20]
   282d8:	ldrb	r3, [r3, #4]
   282dc:	cmp	r3, #1
   282e0:	bne	283c4 <__assert_fail@plt+0x17168>
   282e4:	ldr	r3, [sp, #20]
   282e8:	ldrb	r3, [r3]
   282ec:	cmp	r3, #44	; 0x2c
   282f0:	bne	283c4 <__assert_fail@plt+0x17168>
   282f4:	mov	r6, fp
   282f8:	ldr	r2, [sp, #28]
   282fc:	ldr	r1, [sp, #20]
   28300:	mov	r0, sl
   28304:	bl	27a74 <__assert_fail@plt+0x16818>
   28308:	cmn	r0, #2
   2830c:	str	r0, [sp, #16]
   28310:	beq	28278 <__assert_fail@plt+0x1701c>
   28314:	ldr	r2, [sp, #16]
   28318:	cmn	r2, #1
   2831c:	cmpne	r6, r2
   28320:	bgt	283c4 <__assert_fail@plt+0x17168>
   28324:	ldr	r3, [sp, #20]
   28328:	ldrb	r3, [r3, #4]
   2832c:	cmp	r3, #24
   28330:	bne	283c4 <__assert_fail@plt+0x17168>
   28334:	cmn	r2, #1
   28338:	beq	283e8 <__assert_fail@plt+0x1718c>
   2833c:	ldr	r3, [sp, #16]
   28340:	ldr	r2, [pc, #2856]	; 28e70 <__assert_fail@plt+0x17c14>
   28344:	cmp	r3, r2
   28348:	movle	r3, #0
   2834c:	movgt	r3, #1
   28350:	cmp	r3, #0
   28354:	bne	28400 <__assert_fail@plt+0x171a4>
   28358:	ldr	r2, [sp, #28]
   2835c:	mov	r1, sl
   28360:	ldr	r0, [sp, #20]
   28364:	bl	2710c <__assert_fail@plt+0x15eb0>
   28368:	ldr	r3, [sl, #40]	; 0x28
   2836c:	ldr	ip, [sp, #32]
   28370:	cmp	ip, #0
   28374:	add	r0, r3, r0
   28378:	str	r0, [sl, #40]	; 0x28
   2837c:	beq	282a8 <__assert_fail@plt+0x1704c>
   28380:	ldr	r3, [sp, #16]
   28384:	orrs	r3, r6, r3
   28388:	bne	27fc0 <__assert_fail@plt+0x16d64>
   2838c:	mov	r2, fp
   28390:	ldr	r1, [pc, #2764]	; 28e64 <__assert_fail@plt+0x17c08>
   28394:	mov	r0, ip
   28398:	bl	1dea0 <__assert_fail@plt+0xcc44>
   2839c:	ldr	r3, [sp, #204]	; 0xcc
   283a0:	ldr	r3, [r3]
   283a4:	b	282b0 <__assert_fail@plt+0x17054>
   283a8:	ldr	r3, [sp, #20]
   283ac:	ldrb	r3, [r3]
   283b0:	cmp	r3, #44	; 0x2c
   283b4:	beq	29308 <__assert_fail@plt+0x180ac>
   283b8:	ldr	r3, [sp, #28]
   283bc:	tst	r3, #2097152	; 0x200000
   283c0:	bne	28284 <__assert_fail@plt+0x17028>
   283c4:	ldr	r2, [sp, #204]	; 0xcc
   283c8:	mov	r3, #10
   283cc:	str	r3, [r2]
   283d0:	b	28218 <__assert_fail@plt+0x16fbc>
   283d4:	ldr	r9, [sp, #36]	; 0x24
   283d8:	str	r9, [sp, #32]
   283dc:	b	2812c <__assert_fail@plt+0x16ed0>
   283e0:	ldr	r6, [sp, #16]
   283e4:	b	2833c <__assert_fail@plt+0x170e0>
   283e8:	add	r3, r2, #32768	; 0x8000
   283ec:	cmp	r6, r3
   283f0:	movle	r3, #0
   283f4:	movgt	r3, #1
   283f8:	cmp	r3, #0
   283fc:	beq	28358 <__assert_fail@plt+0x170fc>
   28400:	ldr	r2, [sp, #204]	; 0xcc
   28404:	mov	r3, #15
   28408:	str	r3, [r2]
   2840c:	b	28218 <__assert_fail@plt+0x16fbc>
   28410:	ldr	sl, [sp, #40]	; 0x28
   28414:	str	r0, [sp, #36]	; 0x24
   28418:	ldr	r3, [sp, #16]
   2841c:	cmp	r6, r3
   28420:	beq	283d4 <__assert_fail@plt+0x17178>
   28424:	mov	r0, r5
   28428:	ldr	r1, [sp, #24]
   2842c:	bl	1fcd4 <__assert_fail@plt+0xea78>
   28430:	subs	r5, r0, #0
   28434:	bne	27fd0 <__assert_fail@plt+0x16d74>
   28438:	b	2820c <__assert_fail@plt+0x16fb0>
   2843c:	ldr	r2, [sp, #20]
   28440:	ldr	r4, [sp, #24]
   28444:	mov	r3, #0
   28448:	str	r2, [sp]
   2844c:	add	r1, r4, #64	; 0x40
   28450:	mov	r2, r3
   28454:	add	r0, r4, #56	; 0x38
   28458:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   2845c:	subs	r3, r0, #0
   28460:	str	r3, [sp, #32]
   28464:	beq	289e8 <__assert_fail@plt+0x1778c>
   28468:	ldr	r3, [r4, #92]	; 0x5c
   2846c:	cmp	r3, #1
   28470:	ldrbgt	r3, [r4, #88]	; 0x58
   28474:	orrgt	r3, r3, #2
   28478:	strbgt	r3, [r4, #88]	; 0x58
   2847c:	b	27f20 <__assert_fail@plt+0x16cc4>
   28480:	ldr	r5, [r4, #24]
   28484:	ldr	r6, [sp, #20]
   28488:	ldr	r7, [sp, #28]
   2848c:	add	r3, r5, #1
   28490:	orr	r2, r7, #8388608	; 0x800000
   28494:	str	r3, [r4, #24]
   28498:	mov	r1, r0
   2849c:	mov	r0, r6
   284a0:	bl	2710c <__assert_fail@plt+0x15eb0>
   284a4:	ldrb	r2, [r6, #4]
   284a8:	ldr	r3, [sl, #40]	; 0x28
   284ac:	cmp	r2, #9
   284b0:	add	r3, r3, r0
   284b4:	str	r3, [sl, #40]	; 0x28
   284b8:	beq	28a58 <__assert_fail@plt+0x177fc>
   284bc:	ldr	r3, [sp, #200]	; 0xc8
   284c0:	ldr	r2, [sp, #204]	; 0xcc
   284c4:	add	r3, r3, #1
   284c8:	str	r2, [sp, #4]
   284cc:	str	r3, [sp]
   284d0:	mov	r2, r6
   284d4:	mov	r3, r7
   284d8:	mov	r1, r4
   284dc:	mov	r0, sl
   284e0:	bl	294c0 <__assert_fail@plt+0x18264>
   284e4:	ldr	r2, [sp, #204]	; 0xcc
   284e8:	ldr	r2, [r2]
   284ec:	cmp	r2, #0
   284f0:	mov	r3, r0
   284f4:	bne	27eb0 <__assert_fail@plt+0x16c54>
   284f8:	ldr	r1, [sp, #20]
   284fc:	ldrb	r1, [r1, #4]
   28500:	cmp	r1, #9
   28504:	bne	27e94 <__assert_fail@plt+0x16c38>
   28508:	cmp	r5, #8
   2850c:	bhi	28524 <__assert_fail@plt+0x172c8>
   28510:	ldr	r0, [sp, #24]
   28514:	mov	r1, #1
   28518:	ldr	r2, [r0, #84]	; 0x54
   2851c:	orr	r2, r2, r1, lsl r5
   28520:	str	r2, [r0, #84]	; 0x54
   28524:	add	ip, sp, #128	; 0x80
   28528:	str	ip, [sp]
   2852c:	ldr	ip, [sp, #24]
   28530:	mov	r0, #0
   28534:	str	r0, [sp, #132]	; 0x84
   28538:	mov	r2, r3
   2853c:	mov	lr, #17
   28540:	mov	r3, r0
   28544:	str	r0, [sp, #128]	; 0x80
   28548:	add	r1, ip, #64	; 0x40
   2854c:	add	r0, ip, #56	; 0x38
   28550:	strb	lr, [sp, #132]	; 0x84
   28554:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   28558:	subs	r3, r0, #0
   2855c:	str	r3, [sp, #32]
   28560:	beq	289e8 <__assert_fail@plt+0x1778c>
   28564:	str	r5, [r3, #20]
   28568:	b	27f20 <__assert_fail@plt+0x16cc4>
   2856c:	ldr	r3, [sp, #204]	; 0xcc
   28570:	sub	r2, r2, #35	; 0x23
   28574:	clz	r2, r2
   28578:	lsr	r2, r2, #5
   2857c:	ldr	r1, [r0, #64]	; 0x40
   28580:	str	r2, [sp]
   28584:	str	r3, [sp, #4]
   28588:	ldr	r2, [pc, #2276]	; 28e74 <__assert_fail@plt+0x17c18>
   2858c:	ldr	r3, [pc, #2276]	; 28e78 <__assert_fail@plt+0x17c1c>
   28590:	ldr	r0, [sp, #24]
   28594:	bl	232c0 <__assert_fail@plt+0x12064>
   28598:	ldr	r3, [sp, #204]	; 0xcc
   2859c:	ldr	r3, [r3]
   285a0:	adds	r3, r3, #0
   285a4:	movne	r3, #1
   285a8:	cmp	r0, #0
   285ac:	movne	r3, #0
   285b0:	cmp	r3, #0
   285b4:	str	r0, [sp, #32]
   285b8:	beq	27f20 <__assert_fail@plt+0x16cc4>
   285bc:	b	27eb0 <__assert_fail@plt+0x16c54>
   285c0:	ldr	r2, [sp, #204]	; 0xcc
   285c4:	mov	r3, #5
   285c8:	str	r3, [r2]
   285cc:	mov	r3, #0
   285d0:	str	r3, [sp, #32]
   285d4:	b	27eb8 <__assert_fail@plt+0x16c5c>
   285d8:	ldr	r3, [sp, #20]
   285dc:	ldr	r2, [r3]
   285e0:	ldr	r3, [pc, #2196]	; 28e7c <__assert_fail@plt+0x17c20>
   285e4:	and	r3, r3, r2
   285e8:	cmp	r3, #0
   285ec:	beq	28654 <__assert_fail@plt+0x173f8>
   285f0:	ldr	r3, [sp, #24]
   285f4:	ldrb	r3, [r3, #88]	; 0x58
   285f8:	ands	r4, r3, #16
   285fc:	bne	28654 <__assert_fail@plt+0x173f8>
   28600:	ldr	r0, [sp, #24]
   28604:	orr	r3, r3, #16
   28608:	ands	r2, r3, #8
   2860c:	mov	r1, r3
   28610:	strb	r3, [r0, #88]	; 0x58
   28614:	bne	29110 <__assert_fail@plt+0x17eb4>
   28618:	ldr	r3, [pc, #2144]	; 28e80 <__assert_fail@plt+0x17c24>
   2861c:	tst	r1, #4
   28620:	str	r3, [r0, #100]	; 0x64
   28624:	mvn	r1, #2013265921	; 0x78000001
   28628:	mvn	r3, #-134217727	; 0xf8000001
   2862c:	str	r2, [r0, #96]	; 0x60
   28630:	str	r1, [r0, #104]	; 0x68
   28634:	str	r3, [r0, #108]	; 0x6c
   28638:	beq	29088 <__assert_fail@plt+0x17e2c>
   2863c:	ldr	r3, [sp, #20]
   28640:	str	r2, [r0, #112]	; 0x70
   28644:	str	r2, [r0, #116]	; 0x74
   28648:	str	r2, [r0, #120]	; 0x78
   2864c:	str	r2, [r0, #124]	; 0x7c
   28650:	ldr	r2, [r3]
   28654:	sub	r3, r2, #256	; 0x100
   28658:	bics	r3, r3, #256	; 0x100
   2865c:	bne	28c48 <__assert_fail@plt+0x179ec>
   28660:	cmp	r2, #256	; 0x100
   28664:	beq	28b60 <__assert_fail@plt+0x17904>
   28668:	ldr	r1, [sp, #24]
   2866c:	ldr	r7, [sp, #20]
   28670:	mov	r2, #5
   28674:	add	r5, r1, #56	; 0x38
   28678:	add	r6, r1, #64	; 0x40
   2867c:	str	r7, [sp]
   28680:	mov	r1, r6
   28684:	str	r2, [r7]
   28688:	mov	r0, r5
   2868c:	mov	r2, r3
   28690:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   28694:	mov	r3, #10
   28698:	str	r3, [r7]
   2869c:	mov	r4, r0
   286a0:	ldr	r2, [sp, #20]
   286a4:	mov	r3, #0
   286a8:	str	r2, [sp]
   286ac:	mov	r1, r6
   286b0:	mov	r2, r3
   286b4:	mov	r0, r5
   286b8:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   286bc:	add	r2, sp, #128	; 0x80
   286c0:	mov	ip, #0
   286c4:	str	r2, [sp]
   286c8:	mov	lr, #10
   286cc:	mov	r1, r6
   286d0:	mov	r2, r4
   286d4:	str	ip, [sp, #132]	; 0x84
   286d8:	str	ip, [sp, #128]	; 0x80
   286dc:	strb	lr, [sp, #132]	; 0x84
   286e0:	mov	r7, r0
   286e4:	mov	r3, r7
   286e8:	mov	r0, r5
   286ec:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   286f0:	cmp	r7, #0
   286f4:	cmpne	r4, #0
   286f8:	moveq	r3, #1
   286fc:	movne	r3, #0
   28700:	cmp	r0, #0
   28704:	orreq	r3, r3, #1
   28708:	cmp	r3, #0
   2870c:	str	r0, [sp, #32]
   28710:	bne	289e8 <__assert_fail@plt+0x1778c>
   28714:	ldr	r2, [sp, #28]
   28718:	ldr	r0, [sp, #20]
   2871c:	mov	r1, sl
   28720:	bl	2710c <__assert_fail@plt+0x15eb0>
   28724:	ldr	r3, [sl, #40]	; 0x28
   28728:	add	r3, r3, r0
   2872c:	str	r3, [sl, #40]	; 0x28
   28730:	b	27eb8 <__assert_fail@plt+0x16c5c>
   28734:	mov	r3, #0
   28738:	mov	r1, #1
   2873c:	mov	r0, #32
   28740:	str	r3, [sp, #68]	; 0x44
   28744:	bl	2bc8c <__assert_fail@plt+0x1aa30>
   28748:	mov	r1, #1
   2874c:	mov	r9, r0
   28750:	mov	r0, #40	; 0x28
   28754:	bl	2bc8c <__assert_fail@plt+0x1aa30>
   28758:	cmp	r0, #0
   2875c:	cmpne	r9, #0
   28760:	moveq	r3, #1
   28764:	movne	r3, #0
   28768:	mov	r6, r0
   2876c:	str	r3, [sp, #36]	; 0x24
   28770:	beq	28e08 <__assert_fail@plt+0x17bac>
   28774:	ldr	r4, [sp, #20]
   28778:	ldr	r2, [sp, #28]
   2877c:	mov	r1, sl
   28780:	mov	r0, r4
   28784:	bl	1da6c <__assert_fail@plt+0xc810>
   28788:	ldrb	r3, [r4, #4]
   2878c:	cmp	r3, #2
   28790:	mov	fp, r0
   28794:	beq	28e28 <__assert_fail@plt+0x17bcc>
   28798:	cmp	r3, #25
   2879c:	beq	28b9c <__assert_fail@plt+0x17940>
   287a0:	ldr	r2, [sp, #36]	; 0x24
   287a4:	str	r2, [sp, #40]	; 0x28
   287a8:	cmp	r3, #21
   287ac:	ldr	r1, [sp, #28]
   287b0:	ldreq	r2, [sp, #20]
   287b4:	moveq	r3, #1
   287b8:	ldr	r4, [sp, #20]
   287bc:	strbeq	r3, [r2, #4]
   287c0:	mov	r3, #0
   287c4:	mov	r2, r3
   287c8:	str	r3, [sp, #32]
   287cc:	lsr	r3, r1, #16
   287d0:	and	r3, r3, #1
   287d4:	str	r2, [sp, #16]
   287d8:	str	r3, [sp, #52]	; 0x34
   287dc:	add	r2, r6, #36	; 0x24
   287e0:	mov	r8, r9
   287e4:	mov	r3, #1
   287e8:	mov	r9, r1
   287ec:	str	r2, [sp, #44]	; 0x2c
   287f0:	add	r2, r6, #12
   287f4:	str	r2, [sp, #48]	; 0x30
   287f8:	add	ip, sp, #96	; 0x60
   287fc:	str	r3, [sp, #4]
   28800:	str	ip, [sp, #76]	; 0x4c
   28804:	str	r9, [sp]
   28808:	mov	ip, #3
   2880c:	mov	r3, fp
   28810:	mov	r2, r4
   28814:	mov	r1, sl
   28818:	add	r0, sp, #72	; 0x48
   2881c:	str	ip, [sp, #72]	; 0x48
   28820:	bl	27b34 <__assert_fail@plt+0x168d8>
   28824:	cmp	r0, #0
   28828:	bne	28c78 <__assert_fail@plt+0x17a1c>
   2882c:	mov	r2, r9
   28830:	mov	r1, sl
   28834:	mov	r0, r4
   28838:	bl	1da6c <__assert_fail@plt+0xc810>
   2883c:	ldr	r3, [sp, #72]	; 0x48
   28840:	sub	r2, r3, #2
   28844:	bics	r2, r2, #2
   28848:	mov	fp, r0
   2884c:	beq	28864 <__assert_fail@plt+0x17608>
   28850:	ldrb	r2, [r4, #4]
   28854:	cmp	r2, #2
   28858:	beq	28c90 <__assert_fail@plt+0x17a34>
   2885c:	cmp	r2, #22
   28860:	beq	28ca4 <__assert_fail@plt+0x17a48>
   28864:	cmp	r3, #4
   28868:	ldrls	pc, [pc, r3, lsl #2]
   2886c:	b	28c90 <__assert_fail@plt+0x17a34>
   28870:	andeq	r8, r2, r0, asr #22
   28874:	andeq	r8, r2, r8, lsl fp
   28878:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   2887c:			; <UNDEFINED> instruction: 0x00028ab0
   28880:	andeq	r8, r2, r0, ror #20
   28884:	ldr	r3, [sp, #20]
   28888:	mov	r2, #1
   2888c:	ldr	r1, [r3]
   28890:	ldr	r3, [sp, #24]
   28894:	lsl	r2, r2, r1
   28898:	ldr	r3, [r3, #84]	; 0x54
   2889c:	ands	r3, r2, r3
   288a0:	beq	28df4 <__assert_fail@plt+0x17b98>
   288a4:	ldr	r4, [sp, #24]
   288a8:	ldr	r0, [sp, #20]
   288ac:	mov	r3, #0
   288b0:	ldr	r1, [r4, #80]	; 0x50
   288b4:	orr	r2, r1, r2
   288b8:	str	r2, [r4, #80]	; 0x50
   288bc:	add	r1, r4, #64	; 0x40
   288c0:	mov	r2, r3
   288c4:	str	r0, [sp]
   288c8:	add	r0, r4, #56	; 0x38
   288cc:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   288d0:	subs	r3, r0, #0
   288d4:	str	r3, [sp, #32]
   288d8:	beq	289e8 <__assert_fail@plt+0x1778c>
   288dc:	ldrb	r2, [r4, #88]	; 0x58
   288e0:	ldr	r3, [r4, #76]	; 0x4c
   288e4:	orr	r2, r2, #2
   288e8:	add	r3, r3, #1
   288ec:	strb	r2, [r4, #88]	; 0x58
   288f0:	str	r3, [r4, #76]	; 0x4c
   288f4:	b	27f20 <__assert_fail@plt+0x16cc4>
   288f8:	ldr	r3, [sp, #24]
   288fc:	ldr	r2, [sp, #20]
   28900:	add	r8, r3, #56	; 0x38
   28904:	add	r7, r3, #64	; 0x40
   28908:	mov	r3, #0
   2890c:	str	r2, [sp]
   28910:	mov	r0, r8
   28914:	mov	r2, r3
   28918:	mov	r1, r7
   2891c:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   28920:	subs	r3, r0, #0
   28924:	str	r3, [sp, #32]
   28928:	beq	289e8 <__assert_fail@plt+0x1778c>
   2892c:	ldr	r3, [sp, #24]
   28930:	ldr	r3, [r3, #92]	; 0x5c
   28934:	cmp	r3, #1
   28938:	ble	27f20 <__assert_fail@plt+0x16cc4>
   2893c:	ldr	r6, [sp, #32]
   28940:	mov	r5, #0
   28944:	add	r4, sp, #128	; 0x80
   28948:	mov	r9, #16
   2894c:	ldr	r3, [sl, #40]	; 0x28
   28950:	ldr	r2, [sl, #56]	; 0x38
   28954:	cmp	r2, r3
   28958:	ble	28c88 <__assert_fail@plt+0x17a2c>
   2895c:	ldr	r2, [sl, #28]
   28960:	cmp	r3, r2
   28964:	beq	28c88 <__assert_fail@plt+0x17a2c>
   28968:	ldr	r2, [sl, #8]
   2896c:	ldr	r3, [r2, r3, lsl #2]
   28970:	cmn	r3, #1
   28974:	bne	28c88 <__assert_fail@plt+0x17a2c>
   28978:	ldr	fp, [sp, #20]
   2897c:	ldr	r2, [sp, #28]
   28980:	mov	r1, sl
   28984:	mov	r0, fp
   28988:	bl	2710c <__assert_fail@plt+0x15eb0>
   2898c:	ldr	ip, [sl, #40]	; 0x28
   28990:	mov	r3, r5
   28994:	str	fp, [sp]
   28998:	mov	r2, #0
   2899c:	mov	r1, r7
   289a0:	add	r0, ip, r0
   289a4:	str	r0, [sl, #40]	; 0x28
   289a8:	mov	r0, r8
   289ac:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   289b0:	str	r4, [sp]
   289b4:	mov	r2, r6
   289b8:	str	r5, [r4, #4]
   289bc:	mov	r1, r7
   289c0:	str	r5, [r4]
   289c4:	strb	r9, [sp, #132]	; 0x84
   289c8:	mov	fp, r0
   289cc:	mov	r3, r0
   289d0:	mov	r0, r8
   289d4:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   289d8:	cmp	r0, #0
   289dc:	cmpne	fp, #0
   289e0:	mov	r6, r0
   289e4:	bne	2894c <__assert_fail@plt+0x176f0>
   289e8:	ldr	r2, [sp, #204]	; 0xcc
   289ec:	mov	r3, #12
   289f0:	str	r3, [r2]
   289f4:	mov	r3, #0
   289f8:	str	r3, [sp, #32]
   289fc:	b	27eb8 <__assert_fail@plt+0x16c5c>
   28a00:	ldr	r3, [sp, #204]	; 0xcc
   28a04:	sub	r2, r2, #33	; 0x21
   28a08:	clz	r2, r2
   28a0c:	lsr	r2, r2, #5
   28a10:	ldr	r1, [r0, #64]	; 0x40
   28a14:	str	r2, [sp]
   28a18:	str	r3, [sp, #4]
   28a1c:	ldr	r2, [pc, #1120]	; 28e84 <__assert_fail@plt+0x17c28>
   28a20:	ldr	r3, [pc, #1120]	; 28e88 <__assert_fail@plt+0x17c2c>
   28a24:	b	28590 <__assert_fail@plt+0x17334>
   28a28:	ldr	r3, [sp, #32]
   28a2c:	str	r3, [sp, #36]	; 0x24
   28a30:	mov	r5, r3
   28a34:	b	28418 <__assert_fail@plt+0x171bc>
   28a38:	ldr	r3, [sp, #28]
   28a3c:	ands	r2, r3, #131072	; 0x20000
   28a40:	bne	27eec <__assert_fail@plt+0x16c90>
   28a44:	str	r2, [sp, #32]
   28a48:	ldr	r2, [sp, #204]	; 0xcc
   28a4c:	mov	r3, #16
   28a50:	str	r3, [r2]
   28a54:	b	27eb8 <__assert_fail@plt+0x16c5c>
   28a58:	mov	r3, #0
   28a5c:	b	28508 <__assert_fail@plt+0x172ac>
   28a60:	ldr	r3, [sp, #76]	; 0x4c
   28a64:	add	r2, sp, #68	; 0x44
   28a68:	ldr	r0, [sl, #64]	; 0x40
   28a6c:	mov	r1, r8
   28a70:	stm	sp, {r2, r3}
   28a74:	str	r9, [sp, #8]
   28a78:	ldr	r3, [sp, #44]	; 0x2c
   28a7c:	ldr	r2, [sp, #48]	; 0x30
   28a80:	bl	229d0 <__assert_fail@plt+0x11774>
   28a84:	ldr	r3, [sp, #204]	; 0xcc
   28a88:	cmp	r0, #0
   28a8c:	str	r0, [r3]
   28a90:	bne	28acc <__assert_fail@plt+0x17870>
   28a94:	ldrb	r3, [r4, #4]
   28a98:	cmp	r3, #2
   28a9c:	beq	28c90 <__assert_fail@plt+0x17a34>
   28aa0:	cmp	r3, #21
   28aa4:	beq	29118 <__assert_fail@plt+0x17ebc>
   28aa8:	ldr	r3, [sp, #36]	; 0x24
   28aac:	b	287f8 <__assert_fail@plt+0x1759c>
   28ab0:	ldr	r1, [sp, #76]	; 0x4c
   28ab4:	mov	r0, r8
   28ab8:	bl	22990 <__assert_fail@plt+0x11734>
   28abc:	ldr	r3, [sp, #204]	; 0xcc
   28ac0:	cmp	r0, #0
   28ac4:	str	r0, [r3]
   28ac8:	beq	28a94 <__assert_fail@plt+0x17838>
   28acc:	mov	r9, r8
   28ad0:	mov	r0, r9
   28ad4:	bl	13098 <__assert_fail@plt+0x1e3c>
   28ad8:	mov	r0, r6
   28adc:	bl	1ea28 <__assert_fail@plt+0xd7cc>
   28ae0:	ldr	r3, [sp, #204]	; 0xcc
   28ae4:	ldr	r3, [r3]
   28ae8:	cmp	r3, #0
   28aec:	bne	27eb0 <__assert_fail@plt+0x16c54>
   28af0:	str	r3, [sp, #32]
   28af4:	b	27f20 <__assert_fail@plt+0x16cc4>
   28af8:	ldr	r1, [sp, #76]	; 0x4c
   28afc:	mov	r0, r8
   28b00:	bl	22990 <__assert_fail@plt+0x11734>
   28b04:	ldr	r3, [sp, #204]	; 0xcc
   28b08:	cmp	r0, #0
   28b0c:	str	r0, [r3]
   28b10:	beq	28a94 <__assert_fail@plt+0x17838>
   28b14:	b	28acc <__assert_fail@plt+0x17870>
   28b18:	ldr	r3, [r6, #20]
   28b1c:	ldr	r2, [sp, #16]
   28b20:	cmp	r3, r2
   28b24:	beq	28f0c <__assert_fail@plt+0x17cb0>
   28b28:	ldr	r0, [r6]
   28b2c:	ldr	r2, [sp, #76]	; 0x4c
   28b30:	add	r1, r3, #1
   28b34:	str	r1, [r6, #20]
   28b38:	str	r2, [r0, r3, lsl #2]
   28b3c:	b	28a94 <__assert_fail@plt+0x17838>
   28b40:	ldrb	r3, [sp, #76]	; 0x4c
   28b44:	mov	r0, #1
   28b48:	and	r1, r3, #31
   28b4c:	asr	r3, r3, #5
   28b50:	ldr	r2, [r8, r3, lsl #2]
   28b54:	orr	r2, r2, r0, lsl r1
   28b58:	str	r2, [r8, r3, lsl #2]
   28b5c:	b	28a94 <__assert_fail@plt+0x17838>
   28b60:	ldr	r1, [sp, #24]
   28b64:	ldr	r7, [sp, #20]
   28b68:	mov	r2, #6
   28b6c:	add	r5, r1, #56	; 0x38
   28b70:	add	r6, r1, #64	; 0x40
   28b74:	str	r7, [sp]
   28b78:	mov	r1, r6
   28b7c:	str	r2, [r7]
   28b80:	mov	r0, r5
   28b84:	mov	r2, r3
   28b88:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   28b8c:	mov	r3, #9
   28b90:	str	r3, [r7]
   28b94:	mov	r4, r0
   28b98:	b	286a0 <__assert_fail@plt+0x17444>
   28b9c:	ldrb	r3, [r6, #16]
   28ba0:	ldr	r2, [sp, #28]
   28ba4:	ldr	r4, [sp, #20]
   28ba8:	tst	r2, #256	; 0x100
   28bac:	orr	r3, r3, #1
   28bb0:	strb	r3, [r6, #16]
   28bb4:	ldrne	r3, [r9]
   28bb8:	ldr	r2, [sp, #28]
   28bbc:	orrne	r3, r3, #1024	; 0x400
   28bc0:	strne	r3, [r9]
   28bc4:	ldr	r3, [sl, #40]	; 0x28
   28bc8:	mov	r1, sl
   28bcc:	add	r3, r3, r0
   28bd0:	str	r3, [sl, #40]	; 0x28
   28bd4:	mov	r0, r4
   28bd8:	bl	1da6c <__assert_fail@plt+0xc810>
   28bdc:	ldrb	r3, [r4, #4]
   28be0:	cmp	r3, #2
   28be4:	mov	fp, r0
   28be8:	beq	28e28 <__assert_fail@plt+0x17bcc>
   28bec:	mov	r2, #1
   28bf0:	str	r2, [sp, #40]	; 0x28
   28bf4:	b	287a8 <__assert_fail@plt+0x1754c>
   28bf8:	ldr	r5, [sp, #20]
   28bfc:	mov	r2, r3
   28c00:	mov	r1, sl
   28c04:	mov	r0, r5
   28c08:	mov	r6, r3
   28c0c:	bl	2710c <__assert_fail@plt+0x15eb0>
   28c10:	ldr	r3, [sp, #204]	; 0xcc
   28c14:	ldr	ip, [sl, #40]	; 0x28
   28c18:	str	r3, [sp, #4]
   28c1c:	ldr	r3, [sp, #200]	; 0xc8
   28c20:	mov	r2, r5
   28c24:	str	r3, [sp]
   28c28:	mov	r1, r4
   28c2c:	mov	r3, r6
   28c30:	add	r0, ip, r0
   28c34:	str	r0, [sl, #40]	; 0x28
   28c38:	mov	r0, sl
   28c3c:	bl	27dd0 <__assert_fail@plt+0x16b74>
   28c40:	str	r0, [sp, #32]
   28c44:	b	27eb8 <__assert_fail@plt+0x16c5c>
   28c48:	ldr	r2, [sp, #20]
   28c4c:	ldr	r0, [sp, #24]
   28c50:	mov	r3, #0
   28c54:	str	r2, [sp]
   28c58:	add	r1, r0, #64	; 0x40
   28c5c:	mov	r2, r3
   28c60:	add	r0, r0, #56	; 0x38
   28c64:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   28c68:	subs	r3, r0, #0
   28c6c:	str	r3, [sp, #32]
   28c70:	bne	28714 <__assert_fail@plt+0x174b8>
   28c74:	b	289e8 <__assert_fail@plt+0x1778c>
   28c78:	ldr	r3, [sp, #204]	; 0xcc
   28c7c:	mov	r9, r8
   28c80:	str	r0, [r3]
   28c84:	b	28ad0 <__assert_fail@plt+0x17874>
   28c88:	str	r6, [sp, #32]
   28c8c:	b	27f20 <__assert_fail@plt+0x16cc4>
   28c90:	ldr	r2, [sp, #204]	; 0xcc
   28c94:	mov	r3, #7
   28c98:	mov	r9, r8
   28c9c:	str	r3, [r2]
   28ca0:	b	28ad0 <__assert_fail@plt+0x17874>
   28ca4:	ldr	r3, [sl, #40]	; 0x28
   28ca8:	mov	r2, r9
   28cac:	add	r3, r3, r0
   28cb0:	str	r3, [sl, #40]	; 0x28
   28cb4:	add	r0, sp, #88	; 0x58
   28cb8:	mov	r1, sl
   28cbc:	bl	1da6c <__assert_fail@plt+0xc810>
   28cc0:	ldrb	r2, [sp, #92]	; 0x5c
   28cc4:	cmp	r2, #2
   28cc8:	mov	r3, r0
   28ccc:	beq	28c90 <__assert_fail@plt+0x17a34>
   28cd0:	cmp	r2, #21
   28cd4:	beq	28f3c <__assert_fail@plt+0x17ce0>
   28cd8:	add	r0, sp, #160	; 0xa0
   28cdc:	mov	ip, #1
   28ce0:	mov	r1, #3
   28ce4:	str	r9, [sp]
   28ce8:	add	r2, sp, #88	; 0x58
   28cec:	str	r1, [r0, #-80]!	; 0xffffffb0
   28cf0:	str	ip, [sp, #4]
   28cf4:	mov	r1, sl
   28cf8:	add	ip, sp, #128	; 0x80
   28cfc:	str	ip, [sp, #84]	; 0x54
   28d00:	bl	27b34 <__assert_fail@plt+0x168d8>
   28d04:	cmp	r0, #0
   28d08:	bne	28c78 <__assert_fail@plt+0x17a1c>
   28d0c:	mov	r2, r9
   28d10:	mov	r1, sl
   28d14:	mov	r0, r4
   28d18:	bl	1da6c <__assert_fail@plt+0xc810>
   28d1c:	ldr	r2, [sp, #72]	; 0x48
   28d20:	sub	r3, r2, #2
   28d24:	bics	r3, r3, #2
   28d28:	mov	fp, r0
   28d2c:	beq	28de0 <__assert_fail@plt+0x17b84>
   28d30:	ldr	r3, [sp, #80]	; 0x50
   28d34:	cmp	r3, #2
   28d38:	beq	28de0 <__assert_fail@plt+0x17b84>
   28d3c:	cmp	r3, #4
   28d40:	beq	28e38 <__assert_fail@plt+0x17bdc>
   28d44:	cmp	r2, #3
   28d48:	beq	28e8c <__assert_fail@plt+0x17c30>
   28d4c:	cmp	r3, #3
   28d50:	beq	28ed4 <__assert_fail@plt+0x17c78>
   28d54:	cmp	r2, #0
   28d58:	bne	28ec0 <__assert_fail@plt+0x17c64>
   28d5c:	ldrb	r5, [sp, #76]	; 0x4c
   28d60:	cmp	r3, #0
   28d64:	bne	29320 <__assert_fail@plt+0x180c4>
   28d68:	ldrb	r7, [sp, #84]	; 0x54
   28d6c:	cmp	r2, #0
   28d70:	cmpne	r2, #3
   28d74:	bne	29318 <__assert_fail@plt+0x180bc>
   28d78:	ldr	r2, [sp, #24]
   28d7c:	ldr	r2, [r2, #92]	; 0x5c
   28d80:	cmp	r2, #1
   28d84:	ble	28f58 <__assert_fail@plt+0x17cfc>
   28d88:	mov	r0, r5
   28d8c:	bl	111a8 <btowc@plt>
   28d90:	ldr	r3, [sp, #80]	; 0x50
   28d94:	mov	r5, r0
   28d98:	cmp	r3, #3
   28d9c:	cmpne	r3, #0
   28da0:	bne	29310 <__assert_fail@plt+0x180b4>
   28da4:	ldr	r3, [sp, #24]
   28da8:	ldr	r3, [r3, #92]	; 0x5c
   28dac:	cmp	r3, #1
   28db0:	ble	28dc0 <__assert_fail@plt+0x17b64>
   28db4:	mov	r0, r7
   28db8:	bl	111a8 <btowc@plt>
   28dbc:	mov	r7, r0
   28dc0:	cmn	r5, #1
   28dc4:	cmnne	r7, #1
   28dc8:	bne	28f64 <__assert_fail@plt+0x17d08>
   28dcc:	mov	r9, r8
   28dd0:	mov	r3, #3
   28dd4:	ldr	r2, [sp, #204]	; 0xcc
   28dd8:	str	r3, [r2]
   28ddc:	b	28ad0 <__assert_fail@plt+0x17874>
   28de0:	mov	r9, r8
   28de4:	mov	r8, #11
   28de8:	ldr	r3, [sp, #204]	; 0xcc
   28dec:	str	r8, [r3]
   28df0:	b	28ad0 <__assert_fail@plt+0x17874>
   28df4:	str	r3, [sp, #32]
   28df8:	ldr	r3, [sp, #204]	; 0xcc
   28dfc:	mov	r2, #6
   28e00:	str	r2, [r3]
   28e04:	b	27eb8 <__assert_fail@plt+0x16c5c>
   28e08:	mov	r0, r9
   28e0c:	bl	13098 <__assert_fail@plt+0x1e3c>
   28e10:	mov	r0, r6
   28e14:	bl	13098 <__assert_fail@plt+0x1e3c>
   28e18:	ldr	r2, [sp, #204]	; 0xcc
   28e1c:	mov	r3, #12
   28e20:	str	r3, [r2]
   28e24:	b	27eb0 <__assert_fail@plt+0x16c54>
   28e28:	ldr	r2, [sp, #204]	; 0xcc
   28e2c:	mov	r3, #2
   28e30:	str	r3, [r2]
   28e34:	b	28ad0 <__assert_fail@plt+0x17874>
   28e38:	mov	r9, r8
   28e3c:	mov	r3, #11
   28e40:	b	28dd4 <__assert_fail@plt+0x17b78>
   28e44:	ldr	r3, [sp, #20]
   28e48:	ldrb	r3, [r3, #4]
   28e4c:	cmp	r3, #2
   28e50:	bne	283c4 <__assert_fail@plt+0x17168>
   28e54:	ldr	r2, [sp, #204]	; 0xcc
   28e58:	mov	r3, #9
   28e5c:	str	r3, [r2]
   28e60:	b	28218 <__assert_fail@plt+0x16fbc>
   28e64:	andeq	lr, r1, ip, lsl #21
   28e68:	addeq	r0, ip, r0, lsl #16
   28e6c:	andeq	sp, r1, ip, ror #23
   28e70:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   28e74:	andeq	sp, r2, r0, asr #29
   28e78:	andeq	ip, r2, ip, ror #23
   28e7c:	andeq	r0, r0, pc, lsl #6
   28e80:	mvnseq	r0, #0
   28e84:			; <UNDEFINED> instruction: 0x0002deb0
   28e88:	strdeq	sp, [r2], -r8
   28e8c:	ldr	r5, [sp, #76]	; 0x4c
   28e90:	str	r2, [sp, #60]	; 0x3c
   28e94:	mov	r0, r5
   28e98:	str	r3, [sp, #56]	; 0x38
   28e9c:	bl	11160 <strlen@plt>
   28ea0:	ldr	r3, [sp, #56]	; 0x38
   28ea4:	ldr	r2, [sp, #60]	; 0x3c
   28ea8:	cmp	r0, #1
   28eac:	bhi	28f00 <__assert_fail@plt+0x17ca4>
   28eb0:	cmp	r3, #3
   28eb4:	beq	28ed4 <__assert_fail@plt+0x17c78>
   28eb8:	ldrb	r5, [r5]
   28ebc:	b	28d60 <__assert_fail@plt+0x17b04>
   28ec0:	cmp	r2, #3
   28ec4:	movne	r5, #0
   28ec8:	bne	28d60 <__assert_fail@plt+0x17b04>
   28ecc:	ldr	r5, [sp, #76]	; 0x4c
   28ed0:	b	28eb8 <__assert_fail@plt+0x17c5c>
   28ed4:	ldr	r0, [sp, #84]	; 0x54
   28ed8:	str	r2, [sp, #60]	; 0x3c
   28edc:	str	r3, [sp, #56]	; 0x38
   28ee0:	bl	11160 <strlen@plt>
   28ee4:	ldr	r3, [sp, #56]	; 0x38
   28ee8:	ldr	r2, [sp, #60]	; 0x3c
   28eec:	cmp	r0, #1
   28ef0:	bls	28d54 <__assert_fail@plt+0x17af8>
   28ef4:	mov	r9, r8
   28ef8:	mov	r8, #3
   28efc:	b	28de8 <__assert_fail@plt+0x17b8c>
   28f00:	mov	r9, r8
   28f04:	mov	r8, r2
   28f08:	b	28de8 <__assert_fail@plt+0x17b8c>
   28f0c:	ldr	r3, [sp, #16]
   28f10:	ldr	r0, [r6]
   28f14:	lsl	r3, r3, #1
   28f18:	add	r3, r3, #1
   28f1c:	str	r3, [sp, #16]
   28f20:	lsl	r1, r3, #2
   28f24:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   28f28:	cmp	r0, #0
   28f2c:	beq	29008 <__assert_fail@plt+0x17dac>
   28f30:	ldr	r3, [r6, #20]
   28f34:	str	r0, [r6]
   28f38:	b	28b2c <__assert_fail@plt+0x178d0>
   28f3c:	ldr	r3, [sl, #40]	; 0x28
   28f40:	mov	r2, #1
   28f44:	sub	r3, r3, fp
   28f48:	str	r3, [sl, #40]	; 0x28
   28f4c:	strb	r2, [r4, #4]
   28f50:	ldr	r3, [sp, #72]	; 0x48
   28f54:	b	28864 <__assert_fail@plt+0x17608>
   28f58:	cmp	r3, #0
   28f5c:	cmpne	r3, #3
   28f60:	bne	29310 <__assert_fail@plt+0x180b4>
   28f64:	ldr	r3, [sp, #52]	; 0x34
   28f68:	cmp	r7, r5
   28f6c:	movcs	r3, #0
   28f70:	andcc	r3, r3, #1
   28f74:	cmp	r3, #0
   28f78:	bne	28e38 <__assert_fail@plt+0x17bdc>
   28f7c:	ldr	r3, [sp, #24]
   28f80:	ldr	r3, [r3, #92]	; 0x5c
   28f84:	cmp	r3, #1
   28f88:	ble	28fb8 <__assert_fail@plt+0x17d5c>
   28f8c:	ldr	r2, [r6, #32]
   28f90:	ldr	r3, [sp, #32]
   28f94:	cmp	r2, r3
   28f98:	beq	29014 <__assert_fail@plt+0x17db8>
   28f9c:	ldr	r3, [r6, #4]
   28fa0:	ldr	r0, [r6, #8]
   28fa4:	str	r5, [r3, r2, lsl #2]
   28fa8:	ldr	r3, [r6, #32]
   28fac:	add	r2, r3, #1
   28fb0:	str	r2, [r6, #32]
   28fb4:	str	r7, [r0, r3, lsl #2]
   28fb8:	mov	r3, #0
   28fbc:	mov	ip, #1
   28fc0:	cmp	r5, r3
   28fc4:	movhi	r2, #0
   28fc8:	movls	r2, #1
   28fcc:	cmp	r7, r3
   28fd0:	movcc	r2, #0
   28fd4:	cmp	r2, #0
   28fd8:	asrne	r0, r3, #5
   28fdc:	andne	r1, r3, #31
   28fe0:	ldrne	r2, [r8, r0, lsl #2]
   28fe4:	add	r3, r3, #1
   28fe8:	orrne	r2, r2, ip, lsl r1
   28fec:	strne	r2, [r8, r0, lsl #2]
   28ff0:	cmp	r3, #256	; 0x100
   28ff4:	bne	28fc0 <__assert_fail@plt+0x17d64>
   28ff8:	ldr	r2, [sp, #204]	; 0xcc
   28ffc:	mov	r3, #0
   29000:	str	r3, [r2]
   29004:	b	28a94 <__assert_fail@plt+0x17838>
   29008:	mov	r9, r8
   2900c:	mov	r3, #12
   29010:	b	28dd4 <__assert_fail@plt+0x17b78>
   29014:	ldr	r3, [sp, #32]
   29018:	ldr	r0, [r6, #4]
   2901c:	lsl	r3, r3, #1
   29020:	add	r3, r3, #1
   29024:	str	r3, [sp, #32]
   29028:	lsl	r2, r3, #2
   2902c:	mov	r1, r2
   29030:	str	r2, [sp, #60]	; 0x3c
   29034:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   29038:	ldr	r2, [sp, #60]	; 0x3c
   2903c:	mov	r1, r2
   29040:	str	r0, [sp, #56]	; 0x38
   29044:	ldr	r0, [r6, #8]
   29048:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   2904c:	ldr	r3, [sp, #56]	; 0x38
   29050:	cmp	r0, #0
   29054:	cmpne	r3, #0
   29058:	ldrne	r2, [r6, #32]
   2905c:	strne	r3, [r6, #4]
   29060:	strne	r0, [r6, #8]
   29064:	bne	28fa4 <__assert_fail@plt+0x17d48>
   29068:	mov	r9, r8
   2906c:	mov	r8, r0
   29070:	mov	r0, r3
   29074:	bl	13098 <__assert_fail@plt+0x1e3c>
   29078:	mov	r0, r8
   2907c:	bl	13098 <__assert_fail@plt+0x1e3c>
   29080:	mov	r3, #12
   29084:	b	28dd4 <__assert_fail@plt+0x17b78>
   29088:	mov	r4, #128	; 0x80
   2908c:	mov	r5, #4
   29090:	bl	11148 <__ctype_b_loc@plt>
   29094:	sub	r3, r4, #-2147483647	; 0x80000001
   29098:	mov	lr, #1
   2909c:	add	ip, r5, #24
   290a0:	ldr	r2, [sp, #24]
   290a4:	add	ip, r2, ip, lsl #2
   290a8:	ldr	r6, [r0]
   290ac:	add	r6, r6, r3, lsl lr
   290b0:	mov	r0, r6
   290b4:	mov	r1, #0
   290b8:	ldrh	r2, [r0, #2]!
   290bc:	add	r3, r4, r1
   290c0:	lsr	r2, r2, #3
   290c4:	cmp	r3, #95	; 0x5f
   290c8:	movne	r3, r2
   290cc:	orreq	r3, r2, #1
   290d0:	tst	r3, #1
   290d4:	ldrne	r3, [ip]
   290d8:	orrne	r3, r3, lr, lsl r1
   290dc:	add	r1, r1, #1
   290e0:	strne	r3, [ip]
   290e4:	cmp	r1, #32
   290e8:	bne	290b8 <__assert_fail@plt+0x17e5c>
   290ec:	add	r5, r5, #1
   290f0:	cmp	r5, #8
   290f4:	add	r4, r4, #32
   290f8:	add	r6, r6, #64	; 0x40
   290fc:	add	ip, ip, #4
   29100:	bne	290b0 <__assert_fail@plt+0x17e54>
   29104:	ldr	r3, [sp, #20]
   29108:	ldr	r2, [r3]
   2910c:	b	28654 <__assert_fail@plt+0x173f8>
   29110:	mov	r5, r4
   29114:	b	29090 <__assert_fail@plt+0x17e34>
   29118:	ldr	r3, [sl, #40]	; 0x28
   2911c:	ldr	r2, [sp, #40]	; 0x28
   29120:	add	r3, r3, fp
   29124:	cmp	r2, #0
   29128:	mov	r9, r8
   2912c:	str	r3, [sl, #40]	; 0x28
   29130:	bne	292e8 <__assert_fail@plt+0x1808c>
   29134:	ldr	r3, [sp, #24]
   29138:	ldr	r0, [r3, #92]	; 0x5c
   2913c:	cmp	r0, #1
   29140:	ble	29170 <__assert_fail@plt+0x17f14>
   29144:	ldr	r3, [sp, #24]
   29148:	sub	r1, r9, #4
   2914c:	add	ip, r9, #28
   29150:	ldr	r2, [r3, #60]	; 0x3c
   29154:	sub	r2, r2, #4
   29158:	ldr	r3, [r1, #4]
   2915c:	ldr	lr, [r2, #4]!
   29160:	and	r3, r3, lr
   29164:	str	r3, [r1, #4]!
   29168:	cmp	ip, r1
   2916c:	bne	29158 <__assert_fail@plt+0x17efc>
   29170:	ldr	r3, [r6, #20]
   29174:	cmp	r3, #0
   29178:	bne	291c0 <__assert_fail@plt+0x17f64>
   2917c:	ldr	r3, [r6, #24]
   29180:	cmp	r3, #0
   29184:	bne	291c0 <__assert_fail@plt+0x17f64>
   29188:	ldr	r3, [r6, #28]
   2918c:	cmp	r3, #0
   29190:	bne	291c0 <__assert_fail@plt+0x17f64>
   29194:	ldr	r3, [r6, #32]
   29198:	cmp	r3, #0
   2919c:	bne	291c0 <__assert_fail@plt+0x17f64>
   291a0:	cmp	r0, #1
   291a4:	ble	29298 <__assert_fail@plt+0x1803c>
   291a8:	ldr	r3, [r6, #36]	; 0x24
   291ac:	cmp	r3, #0
   291b0:	bne	291c0 <__assert_fail@plt+0x17f64>
   291b4:	ldrb	r3, [r6, #16]
   291b8:	tst	r3, #1
   291bc:	beq	29298 <__assert_fail@plt+0x1803c>
   291c0:	ldr	r1, [sp, #24]
   291c4:	mov	r3, #0
   291c8:	add	r4, r1, #56	; 0x38
   291cc:	ldrb	r2, [r1, #88]	; 0x58
   291d0:	add	r5, r1, #64	; 0x40
   291d4:	mov	ip, #6
   291d8:	orr	r2, r2, #2
   291dc:	strb	r2, [r1, #88]	; 0x58
   291e0:	add	r2, sp, #96	; 0x60
   291e4:	str	r2, [sp]
   291e8:	mov	r0, r4
   291ec:	mov	r2, r3
   291f0:	mov	r1, r5
   291f4:	str	r6, [sp, #96]	; 0x60
   291f8:	strb	ip, [sp, #100]	; 0x64
   291fc:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   29200:	subs	r3, r0, #0
   29204:	str	r3, [sp, #32]
   29208:	beq	2900c <__assert_fail@plt+0x17db0>
   2920c:	sub	r3, r9, #4
   29210:	add	r2, r9, #28
   29214:	b	29220 <__assert_fail@plt+0x17fc4>
   29218:	cmp	r2, r3
   2921c:	beq	292dc <__assert_fail@plt+0x18080>
   29220:	ldr	r1, [r3, #4]!
   29224:	cmp	r1, #0
   29228:	beq	29218 <__assert_fail@plt+0x17fbc>
   2922c:	mov	r3, #0
   29230:	add	r2, sp, #96	; 0x60
   29234:	str	r2, [sp]
   29238:	mov	ip, #3
   2923c:	mov	r2, r3
   29240:	mov	r1, r5
   29244:	mov	r0, r4
   29248:	str	r9, [sp, #96]	; 0x60
   2924c:	strb	ip, [sp, #100]	; 0x64
   29250:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   29254:	subs	r2, r0, #0
   29258:	beq	2900c <__assert_fail@plt+0x17db0>
   2925c:	add	ip, sp, #128	; 0x80
   29260:	mov	lr, #0
   29264:	ldr	r3, [sp, #32]
   29268:	mov	r0, r4
   2926c:	mov	r1, r5
   29270:	str	ip, [sp]
   29274:	mov	r4, #10
   29278:	str	lr, [sp, #132]	; 0x84
   2927c:	str	lr, [sp, #128]	; 0x80
   29280:	strb	r4, [sp, #132]	; 0x84
   29284:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   29288:	subs	r3, r0, #0
   2928c:	str	r3, [sp, #32]
   29290:	bne	27f20 <__assert_fail@plt+0x16cc4>
   29294:	b	2900c <__assert_fail@plt+0x17db0>
   29298:	mov	r0, r6
   2929c:	bl	1ea28 <__assert_fail@plt+0xd7cc>
   292a0:	ldr	r0, [sp, #24]
   292a4:	mov	r3, #0
   292a8:	add	r2, sp, #96	; 0x60
   292ac:	str	r2, [sp]
   292b0:	mov	ip, #3
   292b4:	mov	r2, r3
   292b8:	add	r1, r0, #64	; 0x40
   292bc:	add	r0, r0, #56	; 0x38
   292c0:	str	r9, [sp, #96]	; 0x60
   292c4:	strb	ip, [sp, #100]	; 0x64
   292c8:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   292cc:	subs	r3, r0, #0
   292d0:	str	r3, [sp, #32]
   292d4:	bne	27f20 <__assert_fail@plt+0x16cc4>
   292d8:	b	2900c <__assert_fail@plt+0x17db0>
   292dc:	mov	r0, r9
   292e0:	bl	13098 <__assert_fail@plt+0x1e3c>
   292e4:	b	27f20 <__assert_fail@plt+0x16cc4>
   292e8:	sub	r3, r8, #4
   292ec:	add	r1, r8, #28
   292f0:	ldr	r2, [r3, #4]
   292f4:	mvn	r2, r2
   292f8:	str	r2, [r3, #4]!
   292fc:	cmp	r1, r3
   29300:	bne	292f0 <__assert_fail@plt+0x18094>
   29304:	b	29134 <__assert_fail@plt+0x17ed8>
   29308:	ldr	r6, [sp, #16]
   2930c:	b	282f8 <__assert_fail@plt+0x1709c>
   29310:	ldr	r7, [sp, #84]	; 0x54
   29314:	b	28dc0 <__assert_fail@plt+0x17b64>
   29318:	ldr	r5, [sp, #76]	; 0x4c
   2931c:	b	28d98 <__assert_fail@plt+0x17b3c>
   29320:	cmp	r3, #3
   29324:	movne	r7, #0
   29328:	ldreq	r1, [sp, #84]	; 0x54
   2932c:	ldrbeq	r7, [r1]
   29330:	b	28d6c <__assert_fail@plt+0x17b10>
   29334:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29338:	sub	sp, sp, #28
   2933c:	mov	sl, r3
   29340:	ldr	r5, [sp, #68]	; 0x44
   29344:	ldr	r6, [sp, #64]	; 0x40
   29348:	str	r5, [sp, #4]
   2934c:	str	r6, [sp]
   29350:	mov	r8, r1
   29354:	ldr	fp, [r1]
   29358:	mov	r9, r0
   2935c:	mov	r7, r2
   29360:	bl	27dd0 <__assert_fail@plt+0x16b74>
   29364:	ldr	r3, [r5]
   29368:	adds	r3, r3, #0
   2936c:	movne	r3, #1
   29370:	cmp	r0, #0
   29374:	movne	r3, #0
   29378:	cmp	r3, #0
   2937c:	bne	29464 <__assert_fail@plt+0x18208>
   29380:	add	r3, fp, #64	; 0x40
   29384:	mov	r4, r0
   29388:	str	r3, [sp, #8]
   2938c:	add	r3, fp, #56	; 0x38
   29390:	str	r3, [sp, #12]
   29394:	ldrb	lr, [r7, #4]
   29398:	clz	ip, r6
   2939c:	mov	r3, sl
   293a0:	and	fp, lr, #247	; 0xf7
   293a4:	cmp	fp, #2
   293a8:	mov	r2, r7
   293ac:	mov	r1, r8
   293b0:	mov	r0, r9
   293b4:	lsr	ip, ip, #5
   293b8:	beq	29468 <__assert_fail@plt+0x1820c>
   293bc:	cmp	lr, #9
   293c0:	orrne	ip, ip, #1
   293c4:	cmp	ip, #0
   293c8:	beq	29468 <__assert_fail@plt+0x1820c>
   293cc:	str	r5, [sp, #4]
   293d0:	str	r6, [sp]
   293d4:	bl	27dd0 <__assert_fail@plt+0x16b74>
   293d8:	ldr	ip, [r5]
   293dc:	adds	ip, ip, #0
   293e0:	movne	ip, #1
   293e4:	cmp	r0, #0
   293e8:	movne	ip, #0
   293ec:	cmp	ip, #0
   293f0:	mov	fp, r0
   293f4:	bne	2944c <__assert_fail@plt+0x181f0>
   293f8:	cmp	r4, #0
   293fc:	cmpne	r0, #0
   29400:	bne	29410 <__assert_fail@plt+0x181b4>
   29404:	cmp	r4, #0
   29408:	moveq	r4, r0
   2940c:	b	29394 <__assert_fail@plt+0x18138>
   29410:	add	r3, sp, #16
   29414:	str	ip, [sp, #20]
   29418:	str	r3, [sp]
   2941c:	str	ip, [sp, #16]
   29420:	mov	r3, r0
   29424:	mov	ip, #16
   29428:	mov	r2, r4
   2942c:	ldr	r1, [sp, #8]
   29430:	ldr	r0, [sp, #12]
   29434:	strb	ip, [sp, #20]
   29438:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   2943c:	cmp	r0, #0
   29440:	beq	29474 <__assert_fail@plt+0x18218>
   29444:	mov	r4, r0
   29448:	b	29394 <__assert_fail@plt+0x18138>
   2944c:	cmp	r4, #0
   29450:	beq	29464 <__assert_fail@plt+0x18208>
   29454:	mov	r0, r4
   29458:	mov	r2, #0
   2945c:	ldr	r1, [pc, #88]	; 294bc <__assert_fail@plt+0x18260>
   29460:	bl	1dea0 <__assert_fail@plt+0xcc44>
   29464:	mov	r4, #0
   29468:	mov	r0, r4
   2946c:	add	sp, sp, #28
   29470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29474:	mov	r3, r0
   29478:	mov	r2, r3
   2947c:	mov	r0, fp
   29480:	ldr	r1, [pc, #52]	; 294bc <__assert_fail@plt+0x18260>
   29484:	str	r3, [sp, #8]
   29488:	bl	1dea0 <__assert_fail@plt+0xcc44>
   2948c:	ldr	r3, [sp, #8]
   29490:	mov	r0, r4
   29494:	mov	r2, r3
   29498:	ldr	r1, [pc, #28]	; 294bc <__assert_fail@plt+0x18260>
   2949c:	bl	1dea0 <__assert_fail@plt+0xcc44>
   294a0:	ldr	r3, [sp, #8]
   294a4:	mov	r2, #12
   294a8:	mov	r4, r3
   294ac:	mov	r0, r4
   294b0:	str	r2, [r5]
   294b4:	add	sp, sp, #28
   294b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   294bc:	andeq	lr, r1, ip, lsl #21
   294c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   294c4:	sub	sp, sp, #44	; 0x2c
   294c8:	ldr	r8, [r1]
   294cc:	ldr	fp, [sp, #84]	; 0x54
   294d0:	str	r1, [sp, #16]
   294d4:	ldr	ip, [r8, #84]	; 0x54
   294d8:	str	fp, [sp, #4]
   294dc:	str	ip, [sp, #28]
   294e0:	ldr	ip, [sp, #80]	; 0x50
   294e4:	mov	r5, r0
   294e8:	str	ip, [sp]
   294ec:	mov	r4, r2
   294f0:	str	r3, [sp, #8]
   294f4:	bl	29334 <__assert_fail@plt+0x180d8>
   294f8:	ldr	r6, [fp]
   294fc:	adds	r6, r6, #0
   29500:	movne	r6, #1
   29504:	cmp	r0, #0
   29508:	movne	r6, #0
   2950c:	cmp	r6, #0
   29510:	bne	29640 <__assert_fail@plt+0x183e4>
   29514:	ldr	r3, [sp, #8]
   29518:	mov	r9, r0
   2951c:	orr	r3, r3, #8388608	; 0x800000
   29520:	str	r3, [sp, #12]
   29524:	add	r3, r8, #64	; 0x40
   29528:	str	r3, [sp, #20]
   2952c:	add	r3, r8, #56	; 0x38
   29530:	add	r7, sp, #32
   29534:	str	r3, [sp, #24]
   29538:	str	fp, [sp, #84]	; 0x54
   2953c:	b	295cc <__assert_fail@plt+0x18370>
   29540:	cmp	sl, #9
   29544:	orrne	ip, ip, #1
   29548:	cmp	ip, #0
   2954c:	beq	29620 <__assert_fail@plt+0x183c4>
   29550:	ldr	ip, [sp, #28]
   29554:	ldr	sl, [r8, #84]	; 0x54
   29558:	str	ip, [r8, #84]	; 0x54
   2955c:	ldr	ip, [sp, #84]	; 0x54
   29560:	str	ip, [sp, #4]
   29564:	ldr	ip, [sp, #80]	; 0x50
   29568:	str	ip, [sp]
   2956c:	bl	29334 <__assert_fail@plt+0x180d8>
   29570:	ldr	r3, [sp, #84]	; 0x54
   29574:	ldr	r3, [r3]
   29578:	adds	r3, r3, #0
   2957c:	movne	r3, #1
   29580:	cmp	r0, #0
   29584:	movne	r3, #0
   29588:	cmp	r3, #0
   2958c:	mov	r3, r0
   29590:	bne	29628 <__assert_fail@plt+0x183cc>
   29594:	ldr	r2, [r8, #84]	; 0x54
   29598:	orr	sl, r2, sl
   2959c:	str	sl, [r8, #84]	; 0x54
   295a0:	str	r7, [sp]
   295a4:	mov	r2, r9
   295a8:	str	r6, [r7, #4]
   295ac:	mov	ip, #10
   295b0:	ldr	r1, [sp, #20]
   295b4:	ldr	r0, [sp, #24]
   295b8:	str	r6, [r7]
   295bc:	strb	ip, [sp, #36]	; 0x24
   295c0:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   295c4:	subs	r9, r0, #0
   295c8:	beq	29650 <__assert_fail@plt+0x183f4>
   295cc:	ldrb	r3, [r4, #4]
   295d0:	ldr	r2, [sp, #12]
   295d4:	mov	r1, r5
   295d8:	cmp	r3, #10
   295dc:	mov	r0, r4
   295e0:	bne	29644 <__assert_fail@plt+0x183e8>
   295e4:	bl	2710c <__assert_fail@plt+0x15eb0>
   295e8:	ldrb	sl, [r4, #4]
   295ec:	ldr	lr, [r5, #40]	; 0x28
   295f0:	ldr	ip, [sp, #80]	; 0x50
   295f4:	and	fp, sl, #247	; 0xf7
   295f8:	cmp	fp, #2
   295fc:	clz	ip, ip
   29600:	ldr	r3, [sp, #8]
   29604:	mov	r2, r4
   29608:	ldr	r1, [sp, #16]
   2960c:	lsr	ip, ip, #5
   29610:	add	lr, lr, r0
   29614:	str	lr, [r5, #40]	; 0x28
   29618:	mov	r0, r5
   2961c:	bne	29540 <__assert_fail@plt+0x182e4>
   29620:	mov	r3, r6
   29624:	b	295a0 <__assert_fail@plt+0x18344>
   29628:	cmp	r9, #0
   2962c:	beq	29640 <__assert_fail@plt+0x183e4>
   29630:	mov	r0, r9
   29634:	mov	r2, #0
   29638:	ldr	r1, [pc, #40]	; 29668 <__assert_fail@plt+0x1840c>
   2963c:	bl	1dea0 <__assert_fail@plt+0xcc44>
   29640:	mov	r9, #0
   29644:	mov	r0, r9
   29648:	add	sp, sp, #44	; 0x2c
   2964c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29650:	ldr	fp, [sp, #84]	; 0x54
   29654:	mov	r3, #12
   29658:	mov	r0, r9
   2965c:	str	r3, [fp]
   29660:	add	sp, sp, #44	; 0x2c
   29664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29668:	andeq	lr, r1, ip, lsl #21
   2966c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29670:	mov	r8, r0
   29674:	ldrb	r0, [r0, #28]
   29678:	ldr	ip, [r8, #4]
   2967c:	sub	sp, sp, #148	; 0x94
   29680:	mov	r7, r3
   29684:	and	r0, r0, #144	; 0x90
   29688:	mov	r3, #0
   2968c:	cmp	ip, #159	; 0x9f
   29690:	str	r7, [r8, #12]
   29694:	str	r1, [sp, #12]
   29698:	mov	r5, r2
   2969c:	strb	r0, [r8, #28]
   296a0:	str	r3, [r8, #8]
   296a4:	str	r3, [sp, #36]	; 0x24
   296a8:	str	r3, [r8, #24]
   296ac:	ldr	r4, [r8]
   296b0:	bls	2a29c <__assert_fail@plt+0x19040>
   296b4:	mov	r2, #160	; 0xa0
   296b8:	str	r2, [r8, #8]
   296bc:	mov	r1, #0
   296c0:	mov	r0, r4
   296c4:	bl	1119c <memset@plt>
   296c8:	ldr	r2, [pc, #3696]	; 2a540 <__assert_fail@plt+0x192e4>
   296cc:	mov	r3, #31
   296d0:	cmp	r5, r2
   296d4:	str	r3, [r4, #64]	; 0x40
   296d8:	bhi	29cd8 <__assert_fail@plt+0x18a7c>
   296dc:	add	r3, r5, #1
   296e0:	str	r3, [r4, #4]
   296e4:	lsl	r0, r3, #3
   296e8:	str	r3, [sp, #20]
   296ec:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   296f0:	cmp	r5, #0
   296f4:	str	r0, [r4]
   296f8:	beq	2a338 <__assert_fail@plt+0x190dc>
   296fc:	mov	r1, #1
   29700:	lsl	r1, r1, #1
   29704:	cmp	r5, r1
   29708:	bcs	29700 <__assert_fail@plt+0x184a4>
   2970c:	sub	sl, r1, #1
   29710:	mov	r0, #12
   29714:	bl	2bc8c <__assert_fail@plt+0x1aa30>
   29718:	str	sl, [r4, #68]	; 0x44
   2971c:	str	r0, [r4, #32]
   29720:	bl	110a0 <__ctype_get_mb_cur_max@plt>
   29724:	str	r0, [r4, #92]	; 0x5c
   29728:	mov	r0, #14
   2972c:	bl	11220 <nl_langinfo@plt>
   29730:	ldrb	r3, [r0]
   29734:	and	r3, r3, #223	; 0xdf
   29738:	cmp	r3, #85	; 0x55
   2973c:	bne	29760 <__assert_fail@plt+0x18504>
   29740:	ldrb	r3, [r0, #1]
   29744:	and	r3, r3, #223	; 0xdf
   29748:	cmp	r3, #84	; 0x54
   2974c:	bne	29760 <__assert_fail@plt+0x18504>
   29750:	ldrb	r3, [r0, #2]
   29754:	and	r3, r3, #223	; 0xdf
   29758:	cmp	r3, #70	; 0x46
   2975c:	beq	29fc8 <__assert_fail@plt+0x18d6c>
   29760:	ldrb	r3, [r4, #88]	; 0x58
   29764:	ldr	r2, [r4, #92]	; 0x5c
   29768:	bic	r3, r3, #8
   2976c:	cmp	r2, #1
   29770:	strb	r3, [r4, #88]	; 0x58
   29774:	ble	2978c <__assert_fail@plt+0x18530>
   29778:	uxtb	r3, r3
   2977c:	ands	r6, r3, #4
   29780:	beq	29f14 <__assert_fail@plt+0x18cb8>
   29784:	ldr	r3, [pc, #3512]	; 2a544 <__assert_fail@plt+0x192e8>
   29788:	str	r3, [r4, #60]	; 0x3c
   2978c:	ldr	r3, [r4]
   29790:	cmp	r3, #0
   29794:	beq	29cd8 <__assert_fail@plt+0x18a7c>
   29798:	ldr	r3, [r4, #32]
   2979c:	cmp	r3, #0
   297a0:	beq	29cd8 <__assert_fail@plt+0x18a7c>
   297a4:	ldr	r2, [pc, #3484]	; 2a548 <__assert_fail@plt+0x192ec>
   297a8:	mov	r3, #0
   297ac:	ldr	r1, [pc, #3480]	; 2a54c <__assert_fail@plt+0x192f0>
   297b0:	cmp	r2, r3
   297b4:	str	r3, [sp, #36]	; 0x24
   297b8:	mov	r3, #1
   297bc:	moveq	r3, r2
   297c0:	cmp	r1, #0
   297c4:	mov	r2, #1
   297c8:	moveq	r2, r1
   297cc:	orr	r3, r3, r2
   297d0:	ands	r3, r3, #255	; 0xff
   297d4:	str	r3, [sp, #24]
   297d8:	beq	297fc <__assert_fail@plt+0x185a0>
   297dc:	mov	r1, #0
   297e0:	add	r0, r4, #136	; 0x88
   297e4:	bl	11010 <pthread_mutex_init@plt>
   297e8:	cmp	r0, #0
   297ec:	bne	29cd8 <__assert_fail@plt+0x18a7c>
   297f0:	ldr	r3, [sp, #36]	; 0x24
   297f4:	cmp	r3, #0
   297f8:	bne	29ce0 <__assert_fail@plt+0x18a84>
   297fc:	ands	r3, r7, #4194304	; 0x400000
   29800:	mov	r1, #0
   29804:	mov	r2, #84	; 0x54
   29808:	add	r0, sp, #60	; 0x3c
   2980c:	moveq	fp, r1
   29810:	movne	fp, #1
   29814:	ldr	sl, [r8, #20]
   29818:	str	r3, [sp, #16]
   2981c:	bl	1119c <memset@plt>
   29820:	ldrb	r2, [r4, #88]	; 0x58
   29824:	ldr	ip, [sp, #12]
   29828:	ldr	r1, [r4, #92]	; 0x5c
   2982c:	cmp	sl, #0
   29830:	moveq	r3, fp
   29834:	orrne	r3, fp, #1
   29838:	lsr	r0, r2, #2
   2983c:	lsr	r2, r2, #3
   29840:	and	r0, r0, #1
   29844:	and	r2, r2, #1
   29848:	cmp	r5, #0
   2984c:	str	ip, [sp, #60]	; 0x3c
   29850:	strb	fp, [sp, #132]	; 0x84
   29854:	strb	r3, [sp, #135]	; 0x87
   29858:	str	sl, [sp, #124]	; 0x7c
   2985c:	str	r5, [sp, #108]	; 0x6c
   29860:	str	r5, [sp, #104]	; 0x68
   29864:	str	r5, [sp, #116]	; 0x74
   29868:	str	r5, [sp, #112]	; 0x70
   2986c:	mov	ip, r3
   29870:	strb	r0, [sp, #133]	; 0x85
   29874:	strb	r2, [sp, #134]	; 0x86
   29878:	str	r1, [sp, #140]	; 0x8c
   2987c:	beq	298a4 <__assert_fail@plt+0x18648>
   29880:	ldr	r1, [sp, #20]
   29884:	add	r0, sp, #60	; 0x3c
   29888:	str	r3, [sp, #28]
   2988c:	bl	1df88 <__assert_fail@plt+0xcd2c>
   29890:	cmp	r0, #0
   29894:	bne	29910 <__assert_fail@plt+0x186b4>
   29898:	ldrb	ip, [sp, #135]	; 0x87
   2989c:	ldr	r1, [r4, #92]	; 0x5c
   298a0:	ldr	r3, [sp, #28]
   298a4:	cmp	ip, #0
   298a8:	ldrne	r6, [sp, #64]	; 0x40
   298ac:	ldreq	r6, [sp, #12]
   298b0:	ands	r2, r7, #4194304	; 0x400000
   298b4:	cmp	r2, #0
   298b8:	str	r6, [sp, #64]	; 0x40
   298bc:	beq	29990 <__assert_fail@plt+0x18734>
   298c0:	cmp	r1, #1
   298c4:	ble	2a3b4 <__assert_fail@plt+0x19158>
   298c8:	add	r0, sp, #60	; 0x3c
   298cc:	bl	1e320 <__assert_fail@plt+0xd0c4>
   298d0:	cmp	r0, #0
   298d4:	bne	29910 <__assert_fail@plt+0x186b4>
   298d8:	ldr	r3, [sp, #92]	; 0x5c
   298dc:	cmp	r5, r3
   298e0:	ble	299c4 <__assert_fail@plt+0x18768>
   298e4:	ldr	r3, [sp, #88]	; 0x58
   298e8:	ldr	r2, [r4, #92]	; 0x5c
   298ec:	ldr	r1, [sp, #96]	; 0x60
   298f0:	add	r3, r3, r2
   298f4:	cmp	r1, r3
   298f8:	bgt	299c4 <__assert_fail@plt+0x18768>
   298fc:	lsl	r1, r1, #1
   29900:	add	r0, sp, #60	; 0x3c
   29904:	bl	1df88 <__assert_fail@plt+0xcd2c>
   29908:	cmp	r0, #0
   2990c:	beq	298c8 <__assert_fail@plt+0x1866c>
   29910:	str	r0, [sp, #36]	; 0x24
   29914:	ldr	r6, [r8]
   29918:	ldr	r0, [r6, #56]	; 0x38
   2991c:	cmp	r0, #0
   29920:	beq	29934 <__assert_fail@plt+0x186d8>
   29924:	ldr	r5, [r0]
   29928:	bl	13098 <__assert_fail@plt+0x1e3c>
   2992c:	subs	r0, r5, #0
   29930:	bne	29924 <__assert_fail@plt+0x186c8>
   29934:	mov	r5, #0
   29938:	mov	r3, #31
   2993c:	str	r3, [r6, #64]	; 0x40
   29940:	ldr	r0, [r6, #16]
   29944:	str	r5, [r6, #56]	; 0x38
   29948:	str	r5, [r6, #52]	; 0x34
   2994c:	bl	13098 <__assert_fail@plt+0x1e3c>
   29950:	str	r5, [r6, #16]
   29954:	add	r0, sp, #60	; 0x3c
   29958:	bl	1ed40 <__assert_fail@plt+0xdae4>
   2995c:	ldr	r3, [sp, #24]
   29960:	cmp	r3, r5
   29964:	beq	29970 <__assert_fail@plt+0x18714>
   29968:	add	r0, r4, #136	; 0x88
   2996c:	bl	10fb0 <pthread_mutex_destroy@plt>
   29970:	mov	r0, r4
   29974:	bl	1ed70 <__assert_fail@plt+0xdb14>
   29978:	ldr	r0, [sp, #36]	; 0x24
   2997c:	mov	r3, #0
   29980:	str	r3, [r8]
   29984:	str	r3, [r8, #4]
   29988:	add	sp, sp, #148	; 0x94
   2998c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29990:	cmp	r1, #1
   29994:	bgt	2a06c <__assert_fail@plt+0x18e10>
   29998:	cmp	r3, #0
   2999c:	beq	2a3ac <__assert_fail@plt+0x19150>
   299a0:	ldr	ip, [sp, #96]	; 0x60
   299a4:	ldr	r2, [sp, #108]	; 0x6c
   299a8:	ldr	r3, [sp, #88]	; 0x58
   299ac:	cmp	ip, r2
   299b0:	movge	ip, r2
   299b4:	cmp	ip, r3
   299b8:	bgt	29c50 <__assert_fail@plt+0x189f4>
   299bc:	str	r3, [sp, #88]	; 0x58
   299c0:	str	r3, [sp, #92]	; 0x5c
   299c4:	ldr	r5, [r8]
   299c8:	mov	r6, #0
   299cc:	orr	r2, r7, #8388608	; 0x800000
   299d0:	str	r6, [r8, #24]
   299d4:	add	r1, sp, #60	; 0x3c
   299d8:	str	r7, [r5, #128]	; 0x80
   299dc:	add	r0, sp, #40	; 0x28
   299e0:	str	r6, [sp, #36]	; 0x24
   299e4:	bl	2710c <__assert_fail@plt+0x15eb0>
   299e8:	ldr	ip, [sp, #100]	; 0x64
   299ec:	add	r2, sp, #36	; 0x24
   299f0:	mov	r3, r7
   299f4:	str	r2, [sp, #4]
   299f8:	str	r6, [sp]
   299fc:	add	r2, sp, #40	; 0x28
   29a00:	mov	r1, r8
   29a04:	add	ip, ip, r0
   29a08:	add	r0, sp, #60	; 0x3c
   29a0c:	str	ip, [sp, #100]	; 0x64
   29a10:	bl	294c0 <__assert_fail@plt+0x18264>
   29a14:	ldr	r3, [sp, #36]	; 0x24
   29a18:	cmp	r3, r6
   29a1c:	mov	r7, r0
   29a20:	bne	2a344 <__assert_fail@plt+0x190e8>
   29a24:	add	fp, sp, #48	; 0x30
   29a28:	add	r9, r5, #56	; 0x38
   29a2c:	add	r5, r5, #64	; 0x40
   29a30:	str	fp, [sp]
   29a34:	mov	ip, #2
   29a38:	str	r3, [fp, #4]
   29a3c:	mov	r1, r5
   29a40:	mov	r0, r9
   29a44:	mov	r2, r3
   29a48:	str	r3, [sp, #48]	; 0x30
   29a4c:	strb	ip, [sp, #52]	; 0x34
   29a50:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   29a54:	cmp	r7, #0
   29a58:	mov	r6, r0
   29a5c:	beq	29a8c <__assert_fail@plt+0x18830>
   29a60:	mov	r3, #0
   29a64:	str	fp, [sp]
   29a68:	mov	ip, #16
   29a6c:	str	r3, [fp, #4]
   29a70:	str	r3, [sp, #48]	; 0x30
   29a74:	mov	r2, r7
   29a78:	mov	r1, r5
   29a7c:	mov	r0, r9
   29a80:	mov	r3, r6
   29a84:	strb	ip, [sp, #52]	; 0x34
   29a88:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   29a8c:	cmp	r0, #0
   29a90:	cmpne	r6, #0
   29a94:	moveq	r3, #1
   29a98:	movne	r3, #0
   29a9c:	str	r3, [sp, #12]
   29aa0:	moveq	r3, #12
   29aa4:	streq	r3, [sp, #36]	; 0x24
   29aa8:	beq	2a2c0 <__assert_fail@plt+0x19064>
   29aac:	ldr	r6, [r8]
   29ab0:	str	r0, [r4, #52]	; 0x34
   29ab4:	ldr	r0, [r6, #4]
   29ab8:	lsl	r0, r0, #2
   29abc:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   29ac0:	ldr	r3, [r6, #4]
   29ac4:	str	r0, [r6, #12]
   29ac8:	lsl	r0, r3, #2
   29acc:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   29ad0:	ldr	r3, [r6, #4]
   29ad4:	add	r3, r3, r3, lsl #1
   29ad8:	str	r0, [r6, #16]
   29adc:	lsl	r0, r3, #2
   29ae0:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   29ae4:	ldr	r3, [r6, #4]
   29ae8:	add	r3, r3, r3, lsl #1
   29aec:	str	r0, [r6, #20]
   29af0:	lsl	r0, r3, #2
   29af4:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   29af8:	ldr	r3, [r6, #12]
   29afc:	cmp	r3, #0
   29b00:	str	r0, [r6, #24]
   29b04:	beq	29dfc <__assert_fail@plt+0x18ba0>
   29b08:	ldr	r3, [r6, #16]
   29b0c:	cmp	r3, #0
   29b10:	beq	29dfc <__assert_fail@plt+0x18ba0>
   29b14:	ldr	r3, [r6, #20]
   29b18:	cmp	r3, #0
   29b1c:	beq	2a290 <__assert_fail@plt+0x19034>
   29b20:	cmp	r0, #0
   29b24:	beq	29dfc <__assert_fail@plt+0x18ba0>
   29b28:	ldr	r0, [r8, #24]
   29b2c:	lsl	r0, r0, #2
   29b30:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   29b34:	cmp	r0, #0
   29b38:	str	r0, [r6, #132]	; 0x84
   29b3c:	beq	29bb0 <__assert_fail@plt+0x18954>
   29b40:	ldr	r1, [r8, #24]
   29b44:	cmp	r1, #0
   29b48:	subne	r2, r0, #4
   29b4c:	ldrne	r3, [sp, #12]
   29b50:	beq	29b64 <__assert_fail@plt+0x18908>
   29b54:	str	r3, [r2, #4]!
   29b58:	add	r3, r3, #1
   29b5c:	cmp	r3, r1
   29b60:	bne	29b54 <__assert_fail@plt+0x188f8>
   29b64:	ldr	r1, [pc, #2532]	; 2a550 <__assert_fail@plt+0x192f4>
   29b68:	mov	r2, r6
   29b6c:	ldr	r0, [r6, #52]	; 0x34
   29b70:	bl	1df14 <__assert_fail@plt+0xccb8>
   29b74:	ldr	r1, [r8, #24]
   29b78:	cmp	r1, #0
   29b7c:	beq	2a398 <__assert_fail@plt+0x1913c>
   29b80:	ldr	r0, [r6, #132]	; 0x84
   29b84:	ldr	r3, [r0]
   29b88:	cmp	r3, #0
   29b8c:	beq	29ba0 <__assert_fail@plt+0x18944>
   29b90:	b	29bb0 <__assert_fail@plt+0x18954>
   29b94:	ldr	r2, [r0, r3, lsl #2]
   29b98:	cmp	r2, r3
   29b9c:	bne	29bb0 <__assert_fail@plt+0x18954>
   29ba0:	add	r3, r3, #1
   29ba4:	cmp	r3, r1
   29ba8:	bcc	29b94 <__assert_fail@plt+0x18938>
   29bac:	beq	2a39c <__assert_fail@plt+0x19140>
   29bb0:	mov	r2, r8
   29bb4:	ldr	r1, [pc, #2456]	; 2a554 <__assert_fail@plt+0x192f8>
   29bb8:	ldr	r0, [r6, #52]	; 0x34
   29bbc:	bl	1dea0 <__assert_fail@plt+0xcc44>
   29bc0:	subs	r3, r0, #0
   29bc4:	bne	29cd0 <__assert_fail@plt+0x18a74>
   29bc8:	mov	r2, r6
   29bcc:	ldr	r1, [pc, #2436]	; 2a558 <__assert_fail@plt+0x192fc>
   29bd0:	ldr	r0, [r6, #52]	; 0x34
   29bd4:	bl	1dea0 <__assert_fail@plt+0xcc44>
   29bd8:	subs	r3, r0, #0
   29bdc:	bne	29cd0 <__assert_fail@plt+0x18a74>
   29be0:	mov	r2, r6
   29be4:	ldr	r1, [pc, #2416]	; 2a55c <__assert_fail@plt+0x19300>
   29be8:	ldr	r0, [r6, #52]	; 0x34
   29bec:	str	r3, [sp, #20]
   29bf0:	bl	1df14 <__assert_fail@plt+0xccb8>
   29bf4:	ldr	r7, [r6, #52]	; 0x34
   29bf8:	ldrb	r3, [r7, #24]
   29bfc:	ldr	r2, [r7, #28]
   29c00:	sub	r3, r3, #2
   29c04:	cmp	r3, #14
   29c08:	ldrls	pc, [pc, r3, lsl #2]
   29c0c:	b	29ff8 <__assert_fail@plt+0x18d9c>
   29c10:	andeq	r9, r2, ip, lsl #29
   29c14:	strdeq	r9, [r2], -r8
   29c18:	andeq	r9, r2, ip, ror ip
   29c1c:	strdeq	r9, [r2], -r8
   29c20:	strdeq	r9, [r2], -r8
   29c24:	strdeq	r9, [r2], -r8
   29c28:	andeq	r9, r2, ip, lsl #31
   29c2c:	andeq	r9, r2, ip, lsl #31
   29c30:	andeq	r9, r2, r8, lsl #28
   29c34:	andeq	r9, r2, r8, lsl #28
   29c38:	andeq	r9, r2, ip, lsl #31
   29c3c:	strdeq	r9, [r2], -r8
   29c40:	strdeq	r9, [r2], -r8
   29c44:	strdeq	r9, [r2], -r8
   29c48:	andeq	r9, r2, ip, lsl #29
   29c4c:	ldr	r6, [sp, #64]	; 0x40
   29c50:	ldr	r2, [sp, #60]	; 0x3c
   29c54:	ldr	r0, [sp, #84]	; 0x54
   29c58:	add	r2, r2, r3
   29c5c:	ldr	r1, [sp, #124]	; 0x7c
   29c60:	ldrb	r2, [r2, r0]
   29c64:	ldrb	r2, [r1, r2]
   29c68:	strb	r2, [r6, r3]
   29c6c:	add	r3, r3, #1
   29c70:	cmp	ip, r3
   29c74:	bne	29c4c <__assert_fail@plt+0x189f0>
   29c78:	b	299bc <__assert_fail@plt+0x18760>
   29c7c:	ldr	r1, [r7, #16]
   29c80:	ldr	r3, [r6, #12]
   29c84:	ldr	r5, [r1, #28]
   29c88:	str	r5, [r3, r2, lsl #2]
   29c8c:	ldrb	r3, [r7, #24]
   29c90:	cmp	r3, #4
   29c94:	bne	29e8c <__assert_fail@plt+0x18c30>
   29c98:	ldr	r3, [r6, #20]
   29c9c:	add	r2, r2, r2, lsl #1
   29ca0:	mov	r1, #1
   29ca4:	add	sl, r3, r2, lsl #2
   29ca8:	str	r1, [r3, r2, lsl #2]
   29cac:	mov	r0, #4
   29cb0:	str	r1, [sl, #4]
   29cb4:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   29cb8:	cmp	r0, #0
   29cbc:	str	r0, [sl, #8]
   29cc0:	bne	29fc0 <__assert_fail@plt+0x18d64>
   29cc4:	mov	r3, #12
   29cc8:	str	r0, [sl, #4]
   29ccc:	str	r0, [sl]
   29cd0:	str	r3, [sp, #36]	; 0x24
   29cd4:	b	29914 <__assert_fail@plt+0x186b8>
   29cd8:	mov	r3, #12
   29cdc:	str	r3, [sp, #36]	; 0x24
   29ce0:	mov	r0, r4
   29ce4:	bl	1ed70 <__assert_fail@plt+0xdb14>
   29ce8:	mov	r3, #0
   29cec:	ldr	r0, [sp, #36]	; 0x24
   29cf0:	str	r3, [r8]
   29cf4:	str	r3, [r8, #4]
   29cf8:	add	sp, sp, #148	; 0x94
   29cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29d00:	ldrb	r3, [r8, #28]
   29d04:	tst	r3, #16
   29d08:	bne	29d18 <__assert_fail@plt+0x18abc>
   29d0c:	ldr	r3, [r8, #24]
   29d10:	cmp	r3, #0
   29d14:	bne	2a388 <__assert_fail@plt+0x1912c>
   29d18:	ldr	r3, [r6, #76]	; 0x4c
   29d1c:	cmp	r3, #0
   29d20:	beq	2a090 <__assert_fail@plt+0x18e34>
   29d24:	add	r0, r0, r0, lsl #1
   29d28:	lsl	r0, r0, #2
   29d2c:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   29d30:	cmp	r0, #0
   29d34:	str	r0, [r6, #28]
   29d38:	beq	29dfc <__assert_fail@plt+0x18ba0>
   29d3c:	ldr	r3, [r6, #8]
   29d40:	cmp	r3, #0
   29d44:	beq	2a090 <__assert_fail@plt+0x18e34>
   29d48:	mov	r3, #0
   29d4c:	mov	r2, r0
   29d50:	mov	r1, r3
   29d54:	mov	r0, r3
   29d58:	b	29d60 <__assert_fail@plt+0x18b04>
   29d5c:	ldr	r2, [r6, #28]
   29d60:	add	ip, r2, r3
   29d64:	str	r1, [r2, r3]
   29d68:	str	r1, [ip, #4]
   29d6c:	str	r1, [ip, #8]
   29d70:	ldr	r2, [r6, #8]
   29d74:	add	r0, r0, #1
   29d78:	cmp	r0, r2
   29d7c:	add	r3, r3, #12
   29d80:	bcc	29d5c <__assert_fail@plt+0x18b00>
   29d84:	cmp	r2, #0
   29d88:	beq	2a090 <__assert_fail@plt+0x18e34>
   29d8c:	mov	r5, #0
   29d90:	ldr	r3, [r6, #24]
   29d94:	str	r4, [sp, #12]
   29d98:	mov	sl, r5
   29d9c:	mov	r4, r6
   29da0:	mov	ip, r2
   29da4:	add	r1, r3, r5
   29da8:	ldmib	r1, {r0, r6}
   29dac:	cmp	r0, #0
   29db0:	subgt	r6, r6, #4
   29db4:	movgt	r7, #0
   29db8:	bgt	29dd8 <__assert_fail@plt+0x18b7c>
   29dbc:	b	2a07c <__assert_fail@plt+0x18e20>
   29dc0:	ldr	r3, [r4, #24]
   29dc4:	add	r7, r7, #1
   29dc8:	add	r2, r3, r5
   29dcc:	ldr	r2, [r2, #4]
   29dd0:	cmp	r7, r2
   29dd4:	bge	2a078 <__assert_fail@plt+0x18e1c>
   29dd8:	ldr	r3, [r6, #4]!
   29ddc:	ldr	r0, [r4, #28]
   29de0:	mov	r1, sl
   29de4:	add	r3, r3, r3, lsl #1
   29de8:	add	r0, r0, r3, lsl #2
   29dec:	bl	1e01c <__assert_fail@plt+0xcdc0>
   29df0:	cmp	r0, #0
   29df4:	bne	29dc0 <__assert_fail@plt+0x18b64>
   29df8:	ldr	r4, [sp, #12]
   29dfc:	mov	r3, #12
   29e00:	str	r3, [sp, #36]	; 0x24
   29e04:	b	29914 <__assert_fail@plt+0x186b8>
   29e08:	ldrb	r3, [r6, #88]	; 0x58
   29e0c:	ldr	r5, [r6, #20]
   29e10:	add	r2, r2, r2, lsl #1
   29e14:	orr	r3, r3, #1
   29e18:	strb	r3, [r6, #88]	; 0x58
   29e1c:	ldr	r3, [r7, #4]
   29e20:	mov	r0, #8
   29e24:	cmp	r3, #0
   29e28:	ldrne	r3, [r3, #12]
   29e2c:	ldreq	r3, [r7, #16]
   29e30:	ldr	r9, [r3, #28]
   29e34:	ldr	r3, [r7, #8]
   29e38:	cmp	r3, #0
   29e3c:	ldrne	r3, [r3, #12]
   29e40:	ldreq	r3, [r7, #16]
   29e44:	ldr	sl, [r3, #28]
   29e48:	mov	r3, #2
   29e4c:	str	r3, [r5, r2, lsl #2]
   29e50:	add	r5, r5, r2, lsl r3
   29e54:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   29e58:	cmp	r0, #0
   29e5c:	str	r0, [r5, #8]
   29e60:	beq	29dfc <__assert_fail@plt+0x18ba0>
   29e64:	cmp	r9, sl
   29e68:	moveq	r3, #1
   29e6c:	streq	r3, [r5, #4]
   29e70:	streq	r9, [r0]
   29e74:	beq	29e8c <__assert_fail@plt+0x18c30>
   29e78:	mov	r3, #2
   29e7c:	str	r3, [r5, #4]
   29e80:	stmlt	r0, {r9, sl}
   29e84:	strge	sl, [r0]
   29e88:	strge	r9, [r0, #4]
   29e8c:	ldr	r3, [r7, #4]
   29e90:	cmp	r3, #0
   29e94:	ldreq	r2, [sp, #20]
   29e98:	beq	29ea8 <__assert_fail@plt+0x18c4c>
   29e9c:	mov	r7, r3
   29ea0:	b	29bf8 <__assert_fail@plt+0x1899c>
   29ea4:	mov	r7, r5
   29ea8:	ldr	r3, [r7, #8]
   29eac:	cmp	r3, #0
   29eb0:	cmpne	r3, r2
   29eb4:	moveq	sl, #1
   29eb8:	movne	sl, #0
   29ebc:	bne	29e9c <__assert_fail@plt+0x18c40>
   29ec0:	ldr	r5, [r7]
   29ec4:	mov	r2, r7
   29ec8:	cmp	r5, #0
   29ecc:	bne	29ea4 <__assert_fail@plt+0x18c48>
   29ed0:	ldr	r9, [sp, #12]
   29ed4:	ldr	r3, [r6, #24]
   29ed8:	add	r7, r5, r5, lsl #1
   29edc:	lsl	r7, r7, #2
   29ee0:	add	r2, r3, r7
   29ee4:	ldr	r2, [r2, #4]
   29ee8:	cmp	r2, #0
   29eec:	beq	2a00c <__assert_fail@plt+0x18db0>
   29ef0:	ldr	r0, [r6, #8]
   29ef4:	add	r5, r5, #1
   29ef8:	cmp	r0, r5
   29efc:	bne	29ed8 <__assert_fail@plt+0x18c7c>
   29f00:	cmp	r9, #0
   29f04:	beq	29d00 <__assert_fail@plt+0x18aa4>
   29f08:	ldr	r9, [sp, #12]
   29f0c:	mov	r5, #0
   29f10:	b	29ed8 <__assert_fail@plt+0x18c7c>
   29f14:	mov	r1, #1
   29f18:	mov	r0, #32
   29f1c:	bl	2bc8c <__assert_fail@plt+0x1aa30>
   29f20:	cmp	r0, #0
   29f24:	str	r0, [r4, #60]	; 0x3c
   29f28:	beq	29cd8 <__assert_fail@plt+0x18a7c>
   29f2c:	mov	fp, #1
   29f30:	lsl	r9, r6, #3
   29f34:	mov	sl, #0
   29f38:	mov	r0, r9
   29f3c:	bl	111a8 <btowc@plt>
   29f40:	cmn	r0, #1
   29f44:	ldrne	r2, [r4, #60]	; 0x3c
   29f48:	ldrne	r3, [r2, r6]
   29f4c:	orrne	r3, r3, fp, lsl sl
   29f50:	strne	r3, [r2, r6]
   29f54:	bics	r3, r9, #127	; 0x7f
   29f58:	bne	29f6c <__assert_fail@plt+0x18d10>
   29f5c:	cmp	r0, r9
   29f60:	ldrbne	r3, [r4, #88]	; 0x58
   29f64:	orrne	r3, r3, #8
   29f68:	strbne	r3, [r4, #88]	; 0x58
   29f6c:	add	sl, sl, #1
   29f70:	cmp	sl, #32
   29f74:	add	r9, r9, #1
   29f78:	bne	29f38 <__assert_fail@plt+0x18cdc>
   29f7c:	add	r6, r6, #4
   29f80:	cmp	r6, #32
   29f84:	bne	29f30 <__assert_fail@plt+0x18cd4>
   29f88:	b	2978c <__assert_fail@plt+0x18530>
   29f8c:	ldr	r1, [r7, #16]
   29f90:	ldr	r3, [r6, #20]
   29f94:	add	r2, r2, r2, lsl #1
   29f98:	ldr	r5, [r1, #28]
   29f9c:	add	r9, r3, r2, lsl #2
   29fa0:	mov	r1, #1
   29fa4:	str	r1, [r3, r2, lsl #2]
   29fa8:	mov	r0, #4
   29fac:	str	r1, [r9, #4]
   29fb0:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   29fb4:	cmp	r0, #0
   29fb8:	str	r0, [r9, #8]
   29fbc:	beq	2a3d0 <__assert_fail@plt+0x19174>
   29fc0:	str	r5, [r0]
   29fc4:	b	29e8c <__assert_fail@plt+0x18c30>
   29fc8:	ldrb	r3, [r0, #3]
   29fcc:	ldr	r1, [pc, #1420]	; 2a560 <__assert_fail@plt+0x19304>
   29fd0:	cmp	r3, #45	; 0x2d
   29fd4:	moveq	r3, #4
   29fd8:	movne	r3, #3
   29fdc:	add	r0, r0, r3
   29fe0:	bl	10f98 <strcmp@plt>
   29fe4:	cmp	r0, #0
   29fe8:	ldrbeq	r3, [r4, #88]	; 0x58
   29fec:	orreq	r3, r3, #4
   29ff0:	strbeq	r3, [r4, #88]	; 0x58
   29ff4:	b	29760 <__assert_fail@plt+0x18504>
   29ff8:	ldr	r1, [r7, #16]
   29ffc:	ldr	r3, [r6, #12]
   2a000:	ldr	r1, [r1, #28]
   2a004:	str	r1, [r3, r2, lsl #2]
   2a008:	b	29e8c <__assert_fail@plt+0x18c30>
   2a00c:	mov	r3, #1
   2a010:	mov	r2, r5
   2a014:	mov	r1, r6
   2a018:	mov	r0, fp
   2a01c:	bl	20c80 <__assert_fail@plt+0xfa24>
   2a020:	cmp	r0, #0
   2a024:	bne	2a284 <__assert_fail@plt+0x19028>
   2a028:	ldr	r3, [r6, #24]
   2a02c:	add	r7, r3, r7
   2a030:	ldr	r7, [r7, #4]
   2a034:	cmp	r7, #0
   2a038:	bne	29ef0 <__assert_fail@plt+0x18c94>
   2a03c:	ldr	r0, [sp, #56]	; 0x38
   2a040:	bl	13098 <__assert_fail@plt+0x1e3c>
   2a044:	ldr	r3, [r6, #8]
   2a048:	add	r5, r5, #1
   2a04c:	cmp	r3, r5
   2a050:	movne	r9, sl
   2a054:	beq	2a060 <__assert_fail@plt+0x18e04>
   2a058:	ldr	r3, [r6, #24]
   2a05c:	b	29ed8 <__assert_fail@plt+0x18c7c>
   2a060:	mov	r5, r7
   2a064:	ldr	r9, [sp, #12]
   2a068:	b	2a058 <__assert_fail@plt+0x18dfc>
   2a06c:	add	r0, sp, #60	; 0x3c
   2a070:	bl	1e188 <__assert_fail@plt+0xcf2c>
   2a074:	b	299c4 <__assert_fail@plt+0x18768>
   2a078:	ldr	ip, [r4, #8]
   2a07c:	add	sl, sl, #1
   2a080:	cmp	sl, ip
   2a084:	add	r5, r5, #12
   2a088:	bcc	29da4 <__assert_fail@plt+0x18b48>
   2a08c:	ldr	r4, [sp, #12]
   2a090:	ldrb	r2, [r4, #88]	; 0x58
   2a094:	ldr	r3, [sp, #16]
   2a098:	clz	r3, r3
   2a09c:	lsr	r3, r3, #5
   2a0a0:	mov	r1, #0
   2a0a4:	ands	r3, r3, r2, lsr #2
   2a0a8:	str	r1, [sp, #36]	; 0x24
   2a0ac:	beq	2a0bc <__assert_fail@plt+0x18e60>
   2a0b0:	ldr	r2, [r8, #20]
   2a0b4:	cmp	r2, #0
   2a0b8:	beq	2a3e0 <__assert_fail@plt+0x19184>
   2a0bc:	ldr	r3, [r4, #52]	; 0x34
   2a0c0:	ldr	r1, [r4, #24]
   2a0c4:	mov	r0, fp
   2a0c8:	ldr	r3, [r3, #12]
   2a0cc:	ldr	r3, [r3, #28]
   2a0d0:	str	r3, [r4, #72]	; 0x48
   2a0d4:	add	r3, r3, r3, lsl #1
   2a0d8:	add	r1, r1, r3, lsl #2
   2a0dc:	bl	20088 <__assert_fail@plt+0xee2c>
   2a0e0:	cmp	r0, #0
   2a0e4:	mov	r6, r0
   2a0e8:	str	r0, [sp, #40]	; 0x28
   2a0ec:	bne	2a214 <__assert_fail@plt+0x18fb8>
   2a0f0:	ldr	r3, [r4, #76]	; 0x4c
   2a0f4:	cmp	r3, #0
   2a0f8:	ble	2a1d4 <__assert_fail@plt+0x18f78>
   2a0fc:	ldr	r5, [sp, #52]	; 0x34
   2a100:	cmp	r5, #0
   2a104:	ble	2a1d4 <__assert_fail@plt+0x18f78>
   2a108:	mov	r7, r0
   2a10c:	b	2a11c <__assert_fail@plt+0x18ec0>
   2a110:	add	r7, r7, #1
   2a114:	cmp	r7, r5
   2a118:	bge	2a1d4 <__assert_fail@plt+0x18f78>
   2a11c:	ldr	r2, [sp, #56]	; 0x38
   2a120:	ldr	ip, [r4]
   2a124:	ldr	r9, [r2, r7, lsl #2]
   2a128:	add	lr, ip, r9, lsl #3
   2a12c:	ldrb	r3, [lr, #4]
   2a130:	cmp	r3, #4
   2a134:	bne	2a110 <__assert_fail@plt+0x18eb4>
   2a138:	cmp	r5, #0
   2a13c:	ble	2a27c <__assert_fail@plt+0x19020>
   2a140:	sub	r2, r2, #4
   2a144:	mov	r3, #0
   2a148:	b	2a158 <__assert_fail@plt+0x18efc>
   2a14c:	add	r3, r3, #1
   2a150:	cmp	r5, r3
   2a154:	beq	2a110 <__assert_fail@plt+0x18eb4>
   2a158:	ldr	r1, [r2, #4]!
   2a15c:	add	r0, ip, r1, lsl #3
   2a160:	ldrb	r0, [r0, #4]
   2a164:	cmp	r0, #9
   2a168:	bne	2a14c <__assert_fail@plt+0x18ef0>
   2a16c:	ldr	r0, [ip, r1, lsl #3]
   2a170:	ldr	r1, [lr]
   2a174:	cmp	r0, r1
   2a178:	bne	2a14c <__assert_fail@plt+0x18ef0>
   2a17c:	ldr	r3, [r4, #20]
   2a180:	add	r9, r9, r9, lsl #1
   2a184:	add	r1, sp, #56	; 0x38
   2a188:	add	r9, r3, r9, lsl #2
   2a18c:	mov	r0, r5
   2a190:	ldr	r3, [r9, #8]
   2a194:	ldr	r9, [r3]
   2a198:	mov	r2, r9
   2a19c:	bl	1f57c <__assert_fail@plt+0xe320>
   2a1a0:	cmp	r0, #0
   2a1a4:	bne	2a110 <__assert_fail@plt+0x18eb4>
   2a1a8:	ldr	r1, [r4, #24]
   2a1ac:	add	r9, r9, r9, lsl #1
   2a1b0:	mov	r0, fp
   2a1b4:	add	r1, r1, r9, lsl #2
   2a1b8:	bl	20af8 <__assert_fail@plt+0xf89c>
   2a1bc:	cmp	r0, #0
   2a1c0:	bne	2a3c8 <__assert_fail@plt+0x1916c>
   2a1c4:	ldr	r5, [sp, #52]	; 0x34
   2a1c8:	mov	r7, #1
   2a1cc:	cmp	r7, r5
   2a1d0:	blt	2a11c <__assert_fail@plt+0x18ec0>
   2a1d4:	mov	r3, #0
   2a1d8:	mov	r2, fp
   2a1dc:	mov	r1, r4
   2a1e0:	add	r0, sp, #40	; 0x28
   2a1e4:	bl	2024c <__assert_fail@plt+0xeff0>
   2a1e8:	cmp	r0, #0
   2a1ec:	str	r0, [r4, #36]	; 0x24
   2a1f0:	beq	2a330 <__assert_fail@plt+0x190d4>
   2a1f4:	ldrsb	r3, [r0, #52]	; 0x34
   2a1f8:	cmp	r3, #0
   2a1fc:	strge	r0, [r4, #48]	; 0x30
   2a200:	strge	r0, [r4, #44]	; 0x2c
   2a204:	strge	r0, [r4, #40]	; 0x28
   2a208:	blt	2a2cc <__assert_fail@plt+0x19070>
   2a20c:	ldr	r0, [sp, #56]	; 0x38
   2a210:	bl	13098 <__assert_fail@plt+0x1e3c>
   2a214:	ldr	r7, [r8]
   2a218:	str	r6, [sp, #36]	; 0x24
   2a21c:	ldr	r0, [r7, #56]	; 0x38
   2a220:	cmp	r0, #0
   2a224:	beq	2a238 <__assert_fail@plt+0x18fdc>
   2a228:	ldr	r5, [r0]
   2a22c:	bl	13098 <__assert_fail@plt+0x1e3c>
   2a230:	subs	r0, r5, #0
   2a234:	bne	2a228 <__assert_fail@plt+0x18fcc>
   2a238:	mov	r5, #0
   2a23c:	mov	r3, #31
   2a240:	str	r3, [r7, #64]	; 0x40
   2a244:	ldr	r0, [r7, #16]
   2a248:	str	r5, [r7, #56]	; 0x38
   2a24c:	str	r5, [r7, #52]	; 0x34
   2a250:	bl	13098 <__assert_fail@plt+0x1e3c>
   2a254:	add	r0, sp, #60	; 0x3c
   2a258:	str	r5, [r7, #16]
   2a25c:	bl	1ed40 <__assert_fail@plt+0xdae4>
   2a260:	ldr	r0, [sp, #36]	; 0x24
   2a264:	cmp	r0, r5
   2a268:	beq	29988 <__assert_fail@plt+0x1872c>
   2a26c:	ldr	r3, [sp, #24]
   2a270:	cmp	r3, #0
   2a274:	bne	29968 <__assert_fail@plt+0x1870c>
   2a278:	b	29970 <__assert_fail@plt+0x18714>
   2a27c:	bne	2a17c <__assert_fail@plt+0x18f20>
   2a280:	b	2a110 <__assert_fail@plt+0x18eb4>
   2a284:	mov	r3, r0
   2a288:	str	r3, [sp, #36]	; 0x24
   2a28c:	b	29914 <__assert_fail@plt+0x186b8>
   2a290:	mov	r3, #12
   2a294:	str	r3, [sp, #36]	; 0x24
   2a298:	b	29914 <__assert_fail@plt+0x186b8>
   2a29c:	mov	r0, r4
   2a2a0:	mov	r1, #160	; 0xa0
   2a2a4:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   2a2a8:	subs	r4, r0, #0
   2a2ac:	beq	2a3c0 <__assert_fail@plt+0x19164>
   2a2b0:	mov	r3, #160	; 0xa0
   2a2b4:	str	r4, [r8]
   2a2b8:	str	r3, [r8, #4]
   2a2bc:	b	296b4 <__assert_fail@plt+0x18458>
   2a2c0:	mov	r3, #0
   2a2c4:	str	r3, [r4, #52]	; 0x34
   2a2c8:	b	29914 <__assert_fail@plt+0x186b8>
   2a2cc:	mov	r3, #1
   2a2d0:	mov	r2, fp
   2a2d4:	mov	r1, r4
   2a2d8:	add	r0, sp, #40	; 0x28
   2a2dc:	bl	2024c <__assert_fail@plt+0xeff0>
   2a2e0:	mov	r3, #2
   2a2e4:	mov	r2, fp
   2a2e8:	mov	r1, r4
   2a2ec:	str	r0, [r4, #40]	; 0x28
   2a2f0:	add	r0, sp, #40	; 0x28
   2a2f4:	bl	2024c <__assert_fail@plt+0xeff0>
   2a2f8:	mov	r3, #6
   2a2fc:	mov	r2, fp
   2a300:	mov	r1, r4
   2a304:	str	r0, [r4, #44]	; 0x2c
   2a308:	add	r0, sp, #40	; 0x28
   2a30c:	bl	2024c <__assert_fail@plt+0xeff0>
   2a310:	ldr	r3, [r4, #40]	; 0x28
   2a314:	cmp	r3, #0
   2a318:	str	r0, [r4, #48]	; 0x30
   2a31c:	beq	2a330 <__assert_fail@plt+0x190d4>
   2a320:	ldr	r3, [r4, #44]	; 0x2c
   2a324:	cmp	r0, #0
   2a328:	cmpne	r3, #0
   2a32c:	bne	2a20c <__assert_fail@plt+0x18fb0>
   2a330:	ldr	r6, [sp, #40]	; 0x28
   2a334:	b	2a214 <__assert_fail@plt+0x18fb8>
   2a338:	mov	sl, r5
   2a33c:	mov	r1, #1
   2a340:	b	29710 <__assert_fail@plt+0x184b4>
   2a344:	cmp	r7, #0
   2a348:	beq	2a2c0 <__assert_fail@plt+0x19064>
   2a34c:	add	fp, sp, #48	; 0x30
   2a350:	add	r9, r5, #56	; 0x38
   2a354:	add	r5, r5, #64	; 0x40
   2a358:	str	fp, [sp]
   2a35c:	mov	ip, #2
   2a360:	str	r6, [fp, #4]
   2a364:	mov	r3, r6
   2a368:	mov	r2, r6
   2a36c:	mov	r1, r5
   2a370:	mov	r0, r9
   2a374:	str	r6, [sp, #48]	; 0x30
   2a378:	strb	ip, [sp, #52]	; 0x34
   2a37c:	bl	1fc10 <__assert_fail@plt+0xe9b4>
   2a380:	mov	r6, r0
   2a384:	b	29a60 <__assert_fail@plt+0x18804>
   2a388:	ldrb	r3, [r6, #88]	; 0x58
   2a38c:	tst	r3, #1
   2a390:	bne	29d24 <__assert_fail@plt+0x18ac8>
   2a394:	b	29d18 <__assert_fail@plt+0x18abc>
   2a398:	ldr	r0, [r6, #132]	; 0x84
   2a39c:	bl	13098 <__assert_fail@plt+0x1e3c>
   2a3a0:	mov	r3, #0
   2a3a4:	str	r3, [r6, #132]	; 0x84
   2a3a8:	b	29bb0 <__assert_fail@plt+0x18954>
   2a3ac:	ldr	r3, [sp, #96]	; 0x60
   2a3b0:	b	299bc <__assert_fail@plt+0x18760>
   2a3b4:	add	r0, sp, #60	; 0x3c
   2a3b8:	bl	1e8a0 <__assert_fail@plt+0xd644>
   2a3bc:	b	299c4 <__assert_fail@plt+0x18768>
   2a3c0:	mov	r0, #12
   2a3c4:	b	29988 <__assert_fail@plt+0x1872c>
   2a3c8:	mov	r6, r0
   2a3cc:	b	2a214 <__assert_fail@plt+0x18fb8>
   2a3d0:	str	r0, [r9, #4]
   2a3d4:	str	r0, [r9]
   2a3d8:	mov	r3, #12
   2a3dc:	b	29cd0 <__assert_fail@plt+0x18a74>
   2a3e0:	ldr	r7, [r4, #8]
   2a3e4:	cmp	r7, #0
   2a3e8:	beq	2a510 <__assert_fail@plt+0x192b4>
   2a3ec:	ldr	r1, [r4]
   2a3f0:	mov	lr, r9
   2a3f4:	mov	r0, r1
   2a3f8:	mov	r5, r1
   2a3fc:	ldrb	ip, [r5, #4]
   2a400:	sub	ip, ip, #1
   2a404:	cmp	ip, #11
   2a408:	ldrls	pc, [pc, ip, lsl #2]
   2a40c:	b	2a4ac <__assert_fail@plt+0x19250>
   2a410:	andeq	sl, r2, r0, asr #8
   2a414:	andeq	sl, r2, ip, asr #8
   2a418:	ldrdeq	sl, [r2], -ip
   2a41c:	andeq	sl, r2, ip, asr #8
   2a420:	ldrdeq	sl, [r2], -r4
   2a424:	strheq	sl, [r2], -ip
   2a428:	andeq	sl, r2, ip, lsr #9
   2a42c:	andeq	sl, r2, ip, asr #8
   2a430:	andeq	sl, r2, ip, asr #8
   2a434:	andeq	sl, r2, ip, asr #8
   2a438:	andeq	sl, r2, ip, asr #8
   2a43c:			; <UNDEFINED> instruction: 0x0002a4b0
   2a440:	ldrb	ip, [r1, r2, lsl #3]
   2a444:	lsrs	ip, ip, #7
   2a448:	movne	r9, r3
   2a44c:	add	r2, r2, #1
   2a450:	cmp	r2, r7
   2a454:	add	r5, r5, #8
   2a458:	bne	2a3fc <__assert_fail@plt+0x191a0>
   2a45c:	orr	r9, r9, lr
   2a460:	ands	r9, r9, #255	; 0xff
   2a464:	beq	2a510 <__assert_fail@plt+0x192b4>
   2a468:	add	r2, r1, r2, lsl #3
   2a46c:	mov	r1, #7
   2a470:	b	2a488 <__assert_fail@plt+0x1922c>
   2a474:	cmp	r3, #5
   2a478:	strbeq	r1, [r0, #4]
   2a47c:	add	r0, r0, #8
   2a480:	cmp	r0, r2
   2a484:	beq	2a50c <__assert_fail@plt+0x192b0>
   2a488:	ldrb	r3, [r0, #4]
   2a48c:	cmp	r3, #1
   2a490:	bne	2a474 <__assert_fail@plt+0x19218>
   2a494:	ldrsb	r3, [r0]
   2a498:	cmp	r3, #0
   2a49c:	ldrblt	r3, [r0, #6]
   2a4a0:	biclt	r3, r3, #32
   2a4a4:	strblt	r3, [r0, #6]
   2a4a8:	b	2a47c <__assert_fail@plt+0x19220>
   2a4ac:	bl	11250 <abort@plt>
   2a4b0:	ldr	ip, [r1, r2, lsl #3]
   2a4b4:	cmp	ip, #32
   2a4b8:	beq	2a44c <__assert_fail@plt+0x191f0>
   2a4bc:	bls	2a500 <__assert_fail@plt+0x192a4>
   2a4c0:	cmp	ip, #64	; 0x40
   2a4c4:	beq	2a44c <__assert_fail@plt+0x191f0>
   2a4c8:	cmp	ip, #128	; 0x80
   2a4cc:	beq	2a44c <__assert_fail@plt+0x191f0>
   2a4d0:	b	2a0bc <__assert_fail@plt+0x18e60>
   2a4d4:	mov	lr, r3
   2a4d8:	b	2a44c <__assert_fail@plt+0x191f0>
   2a4dc:	ldr	ip, [r1, r2, lsl #3]
   2a4e0:	add	r6, ip, #12
   2a4e4:	add	ip, ip, #28
   2a4e8:	ldr	sl, [r6, #4]!
   2a4ec:	cmp	sl, #0
   2a4f0:	bne	2a0bc <__assert_fail@plt+0x18e60>
   2a4f4:	cmp	r6, ip
   2a4f8:	bne	2a4e8 <__assert_fail@plt+0x1928c>
   2a4fc:	b	2a44c <__assert_fail@plt+0x191f0>
   2a500:	cmp	ip, #16
   2a504:	beq	2a44c <__assert_fail@plt+0x191f0>
   2a508:	b	2a0bc <__assert_fail@plt+0x18e60>
   2a50c:	mov	r9, lr
   2a510:	ldr	r2, [r4, #76]	; 0x4c
   2a514:	ldrb	r3, [r4, #88]	; 0x58
   2a518:	cmp	r2, #0
   2a51c:	movle	r2, r9
   2a520:	orrgt	r2, r9, #1
   2a524:	and	r2, r2, #1
   2a528:	and	r3, r3, #249	; 0xf9
   2a52c:	orr	r3, r3, r2, lsl #1
   2a530:	mov	r2, #1
   2a534:	strb	r3, [r4, #88]	; 0x58
   2a538:	str	r2, [r4, #92]	; 0x5c
   2a53c:	b	2a0bc <__assert_fail@plt+0x18e60>
   2a540:	beq	fead4fec <opterr@@GLIBC_2.4+0xfea95e5c>
   2a544:			; <UNDEFINED> instruction: 0x0002dcb4
	...
   2a550:	andeq	pc, r1, ip, lsr r7	; <UNPREDICTABLE>
   2a554:	strdeq	pc, [r1], -r4
   2a558:	andeq	r0, r2, r8, lsr r8
   2a55c:	andeq	pc, r1, r0, ror #15
   2a560:	strdeq	sp, [r2], -ip
   2a564:	ldr	r3, [pc, #96]	; 2a5cc <__assert_fail@plt+0x19370>
   2a568:	push	{r4, lr}
   2a56c:	mov	lr, r2
   2a570:	ldr	r3, [r3]
   2a574:	ldrb	ip, [lr, #28]
   2a578:	mov	r2, r1
   2a57c:	mov	r1, r0
   2a580:	lsr	r0, r3, #21
   2a584:	and	r4, r0, #16
   2a588:	and	r0, ip, #239	; 0xef
   2a58c:	orr	r0, r0, r4
   2a590:	orr	r0, r0, #128	; 0x80
   2a594:	strb	r0, [lr, #28]
   2a598:	mov	r0, lr
   2a59c:	bl	2966c <__assert_fail@plt+0x18410>
   2a5a0:	subs	r3, r0, #0
   2a5a4:	popeq	{r4, pc}
   2a5a8:	ldr	r1, [pc, #32]	; 2a5d0 <__assert_fail@plt+0x19374>
   2a5ac:	mov	r2, #5
   2a5b0:	add	r3, r1, r3, lsl #2
   2a5b4:	add	r1, r1, #32
   2a5b8:	ldr	r3, [r3, #416]	; 0x1a0
   2a5bc:	mov	r0, #0
   2a5c0:	add	r1, r1, r3
   2a5c4:	pop	{r4, lr}
   2a5c8:	b	1104c <dcgettext@plt>
   2a5cc:	ldrdeq	pc, [r3], -r8
   2a5d0:			; <UNDEFINED> instruction: 0x0002dcb4
   2a5d4:	ldr	r3, [pc, #12]	; 2a5e8 <__assert_fail@plt+0x1938c>
   2a5d8:	ldr	r2, [r3]
   2a5dc:	str	r0, [r3]
   2a5e0:	mov	r0, r2
   2a5e4:	bx	lr
   2a5e8:	ldrdeq	pc, [r3], -r8
   2a5ec:	push	{r4, r5, r6, lr}
   2a5f0:	mov	r2, #256	; 0x100
   2a5f4:	ldr	r5, [r0]
   2a5f8:	ldr	r6, [r0, #16]
   2a5fc:	mov	r4, r0
   2a600:	mov	r1, #0
   2a604:	mov	r0, r6
   2a608:	bl	1119c <memset@plt>
   2a60c:	ldr	r1, [r5, #36]	; 0x24
   2a610:	mov	r3, r6
   2a614:	add	r2, r1, #12
   2a618:	mov	r0, r4
   2a61c:	add	r1, r1, #8
   2a620:	bl	23524 <__assert_fail@plt+0x122c8>
   2a624:	ldr	r0, [r5, #40]	; 0x28
   2a628:	ldr	r3, [r5, #36]	; 0x24
   2a62c:	cmp	r3, r0
   2a630:	beq	2a64c <__assert_fail@plt+0x193f0>
   2a634:	add	r2, r0, #12
   2a638:	add	r1, r0, #8
   2a63c:	mov	r3, r6
   2a640:	mov	r0, r4
   2a644:	bl	23524 <__assert_fail@plt+0x122c8>
   2a648:	ldr	r0, [r5, #36]	; 0x24
   2a64c:	ldr	r1, [r5, #44]	; 0x2c
   2a650:	cmp	r1, r0
   2a654:	beq	2a670 <__assert_fail@plt+0x19414>
   2a658:	add	r2, r1, #12
   2a65c:	mov	r0, r4
   2a660:	mov	r3, r6
   2a664:	add	r1, r1, #8
   2a668:	bl	23524 <__assert_fail@plt+0x122c8>
   2a66c:	ldr	r0, [r5, #36]	; 0x24
   2a670:	ldr	r1, [r5, #48]	; 0x30
   2a674:	cmp	r1, r0
   2a678:	beq	2a690 <__assert_fail@plt+0x19434>
   2a67c:	add	r2, r1, #12
   2a680:	mov	r3, r6
   2a684:	add	r1, r1, #8
   2a688:	mov	r0, r4
   2a68c:	bl	23524 <__assert_fail@plt+0x122c8>
   2a690:	ldrb	r3, [r4, #28]
   2a694:	mov	r0, #0
   2a698:	orr	r3, r3, #8
   2a69c:	strb	r3, [r4, #28]
   2a6a0:	pop	{r4, r5, r6, pc}
   2a6a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a6a8:	cmp	r3, r2
   2a6ac:	mov	r5, r3
   2a6b0:	sub	sp, sp, #52	; 0x34
   2a6b4:	movle	r3, #0
   2a6b8:	movgt	r3, #1
   2a6bc:	orrs	r3, r3, r5, lsr #31
   2a6c0:	ldrb	r3, [sp, #100]	; 0x64
   2a6c4:	ldr	ip, [sp, #88]	; 0x58
   2a6c8:	ldr	sl, [r0]
   2a6cc:	add	r8, r5, ip
   2a6d0:	ldr	r7, [sp, #96]	; 0x60
   2a6d4:	str	r3, [sp, #32]
   2a6d8:	bne	2a980 <__assert_fail@plt+0x19724>
   2a6dc:	cmp	r8, r2
   2a6e0:	bgt	2a978 <__assert_fail@plt+0x1971c>
   2a6e4:	cmp	ip, #0
   2a6e8:	cmpge	r5, r8
   2a6ec:	movgt	lr, #1
   2a6f0:	movle	lr, #0
   2a6f4:	bgt	2a978 <__assert_fail@plt+0x1971c>
   2a6f8:	cmp	r8, #0
   2a6fc:	blt	2aa0c <__assert_fail@plt+0x197b0>
   2a700:	cmp	r5, r8
   2a704:	movgt	lr, #0
   2a708:	movle	lr, #1
   2a70c:	ands	r3, lr, ip, lsr #31
   2a710:	movne	r8, #0
   2a714:	ldr	lr, [pc, #796]	; 2aa38 <__assert_fail@plt+0x197dc>
   2a718:	ldr	r4, [pc, #796]	; 2aa3c <__assert_fail@plt+0x197e0>
   2a71c:	cmp	lr, #0
   2a720:	mov	ip, #1
   2a724:	moveq	ip, lr
   2a728:	cmp	r4, #0
   2a72c:	mov	lr, #1
   2a730:	moveq	lr, r4
   2a734:	str	r2, [sp, #40]	; 0x28
   2a738:	orr	r2, ip, lr
   2a73c:	ands	r3, r2, #255	; 0xff
   2a740:	str	r1, [sp, #44]	; 0x2c
   2a744:	mov	r6, r0
   2a748:	str	r3, [sp, #28]
   2a74c:	beq	2a758 <__assert_fail@plt+0x194fc>
   2a750:	add	r0, sl, #136	; 0x88
   2a754:	bl	10fec <pthread_mutex_lock@plt>
   2a758:	ldrb	r2, [r6, #28]
   2a75c:	cmp	r8, r5
   2a760:	lsr	fp, r2, #5
   2a764:	and	r3, fp, #3
   2a768:	str	r3, [sp, #36]	; 0x24
   2a76c:	bgt	2a820 <__assert_fail@plt+0x195c4>
   2a770:	lsr	r1, r2, #4
   2a774:	and	r1, r1, #1
   2a778:	cmp	r7, #0
   2a77c:	orreq	r1, r1, #1
   2a780:	cmp	r1, #0
   2a784:	bne	2aa14 <__assert_fail@plt+0x197b8>
   2a788:	and	r2, r2, #6
   2a78c:	cmp	r2, #4
   2a790:	ldrne	r0, [r6, #24]
   2a794:	beq	2a9dc <__assert_fail@plt+0x19780>
   2a798:	add	fp, r0, #1
   2a79c:	mov	r4, fp
   2a7a0:	lsl	r0, fp, #3
   2a7a4:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   2a7a8:	subs	r9, r0, #0
   2a7ac:	beq	2a990 <__assert_fail@plt+0x19734>
   2a7b0:	ldr	r3, [sp, #36]	; 0x24
   2a7b4:	str	r9, [sp, #12]
   2a7b8:	str	r3, [sp, #16]
   2a7bc:	ldr	r3, [sp, #92]	; 0x5c
   2a7c0:	str	fp, [sp, #8]
   2a7c4:	str	r3, [sp, #4]
   2a7c8:	str	r8, [sp]
   2a7cc:	ldr	r2, [sp, #40]	; 0x28
   2a7d0:	ldr	r1, [sp, #44]	; 0x2c
   2a7d4:	mov	r3, r5
   2a7d8:	mov	r0, r6
   2a7dc:	bl	24f50 <__assert_fail@plt+0x13cf4>
   2a7e0:	cmp	r0, #0
   2a7e4:	beq	2a844 <__assert_fail@plt+0x195e8>
   2a7e8:	cmp	r0, #1
   2a7ec:	mvneq	r5, #0
   2a7f0:	beq	2a7f8 <__assert_fail@plt+0x1959c>
   2a7f4:	mvn	r5, #1
   2a7f8:	mov	r0, r9
   2a7fc:	bl	13098 <__assert_fail@plt+0x1e3c>
   2a800:	ldr	r3, [sp, #28]
   2a804:	cmp	r3, #0
   2a808:	beq	2a814 <__assert_fail@plt+0x195b8>
   2a80c:	add	r0, sl, #136	; 0x88
   2a810:	bl	10f44 <pthread_mutex_unlock@plt>
   2a814:	mov	r0, r5
   2a818:	add	sp, sp, #52	; 0x34
   2a81c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a820:	ldr	r1, [r6, #16]
   2a824:	cmp	r1, #0
   2a828:	beq	2a770 <__assert_fail@plt+0x19514>
   2a82c:	tst	r2, #8
   2a830:	bne	2a770 <__assert_fail@plt+0x19514>
   2a834:	mov	r0, r6
   2a838:	bl	2a5ec <__assert_fail@plt+0x19390>
   2a83c:	ldrb	r2, [r6, #28]
   2a840:	b	2a770 <__assert_fail@plt+0x19514>
   2a844:	cmp	r7, #0
   2a848:	beq	2a8f0 <__assert_fail@plt+0x19694>
   2a84c:	ldrb	r8, [r6, #28]
   2a850:	add	fp, r4, #1
   2a854:	lsr	r8, r8, #1
   2a858:	ands	r8, r8, #3
   2a85c:	beq	2a998 <__assert_fail@plt+0x1973c>
   2a860:	cmp	r8, #1
   2a864:	movne	r8, #2
   2a868:	beq	2a90c <__assert_fail@plt+0x196b0>
   2a86c:	cmp	r4, #0
   2a870:	ble	2aa28 <__assert_fail@plt+0x197cc>
   2a874:	ldmib	r7, {r1, r2}
   2a878:	mov	r3, r9
   2a87c:	add	ip, r9, r4, lsl #3
   2a880:	sub	r1, r1, #4
   2a884:	sub	r2, r2, #4
   2a888:	ldr	r0, [r3]
   2a88c:	add	r3, r3, #8
   2a890:	str	r0, [r1, #4]!
   2a894:	ldr	r0, [r3, #-4]
   2a898:	cmp	ip, r3
   2a89c:	str	r0, [r2, #4]!
   2a8a0:	bne	2a888 <__assert_fail@plt+0x1962c>
   2a8a4:	ldr	r2, [r7]
   2a8a8:	mov	r3, r4
   2a8ac:	cmp	r2, r4
   2a8b0:	bls	2a8d8 <__assert_fail@plt+0x1967c>
   2a8b4:	ldmib	r7, {r0, r1}
   2a8b8:	mvn	r2, #0
   2a8bc:	str	r2, [r1, r3, lsl #2]
   2a8c0:	str	r2, [r0, r3, lsl #2]
   2a8c4:	ldr	r3, [r7]
   2a8c8:	add	r4, r4, #1
   2a8cc:	cmp	r4, r3
   2a8d0:	mov	r3, r4
   2a8d4:	bcc	2a8bc <__assert_fail@plt+0x19660>
   2a8d8:	ldrb	r3, [r6, #28]
   2a8dc:	bic	r3, r3, #6
   2a8e0:	orr	r8, r3, r8, lsl #1
   2a8e4:	tst	r8, #6
   2a8e8:	strb	r8, [r6, #28]
   2a8ec:	beq	2a7f4 <__assert_fail@plt+0x19598>
   2a8f0:	ldr	r3, [sp, #32]
   2a8f4:	cmp	r3, #0
   2a8f8:	ldrne	r3, [r9, #4]
   2a8fc:	subne	r5, r3, r5
   2a900:	bne	2a7f8 <__assert_fail@plt+0x1959c>
   2a904:	ldr	r5, [r9]
   2a908:	b	2a7f8 <__assert_fail@plt+0x1959c>
   2a90c:	ldr	r3, [r7]
   2a910:	cmp	r3, fp
   2a914:	bcs	2a86c <__assert_fail@plt+0x19610>
   2a918:	lsl	r2, fp, #2
   2a91c:	mov	r1, r2
   2a920:	ldr	r0, [r7, #4]
   2a924:	str	r2, [sp, #40]	; 0x28
   2a928:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   2a92c:	subs	r3, r0, #0
   2a930:	str	r3, [sp, #36]	; 0x24
   2a934:	beq	2aa30 <__assert_fail@plt+0x197d4>
   2a938:	ldr	r2, [sp, #40]	; 0x28
   2a93c:	ldr	r0, [r7, #8]
   2a940:	mov	r1, r2
   2a944:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   2a948:	ldr	r3, [sp, #36]	; 0x24
   2a94c:	subs	r2, r0, #0
   2a950:	strne	r3, [r7, #4]
   2a954:	strne	r2, [r7, #8]
   2a958:	strne	fp, [r7]
   2a95c:	bne	2a86c <__assert_fail@plt+0x19610>
   2a960:	mov	r0, r3
   2a964:	str	r2, [sp, #36]	; 0x24
   2a968:	bl	13098 <__assert_fail@plt+0x1e3c>
   2a96c:	ldr	r2, [sp, #36]	; 0x24
   2a970:	mov	r8, r2
   2a974:	b	2a8d8 <__assert_fail@plt+0x1967c>
   2a978:	mov	r8, r2
   2a97c:	b	2a714 <__assert_fail@plt+0x194b8>
   2a980:	mvn	r5, #0
   2a984:	mov	r0, r5
   2a988:	add	sp, sp, #52	; 0x34
   2a98c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a990:	mvn	r5, #1
   2a994:	b	2a800 <__assert_fail@plt+0x195a4>
   2a998:	lsl	r8, fp, #2
   2a99c:	mov	r0, r8
   2a9a0:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   2a9a4:	cmp	r0, #0
   2a9a8:	str	r0, [r7, #4]
   2a9ac:	beq	2aa30 <__assert_fail@plt+0x197d4>
   2a9b0:	mov	r0, r8
   2a9b4:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   2a9b8:	cmp	r0, #0
   2a9bc:	mov	r8, r0
   2a9c0:	str	r0, [r7, #8]
   2a9c4:	strne	fp, [r7]
   2a9c8:	movne	r8, #1
   2a9cc:	bne	2a86c <__assert_fail@plt+0x19610>
   2a9d0:	ldr	r0, [r7, #4]
   2a9d4:	bl	13098 <__assert_fail@plt+0x1e3c>
   2a9d8:	b	2a8d8 <__assert_fail@plt+0x1967c>
   2a9dc:	ldr	fp, [r7]
   2a9e0:	ldr	r0, [r6, #24]
   2a9e4:	cmp	fp, r0
   2a9e8:	bhi	2a798 <__assert_fail@plt+0x1953c>
   2a9ec:	cmp	fp, #0
   2a9f0:	mov	r4, fp
   2a9f4:	bgt	2a7a0 <__assert_fail@plt+0x19544>
   2a9f8:	mov	fp, #1
   2a9fc:	mov	r7, r1
   2aa00:	mov	r4, fp
   2aa04:	mov	r0, #8
   2aa08:	b	2a7a4 <__assert_fail@plt+0x19548>
   2aa0c:	mov	r8, lr
   2aa10:	b	2a714 <__assert_fail@plt+0x194b8>
   2aa14:	mov	fp, #1
   2aa18:	mov	r4, fp
   2aa1c:	mov	r0, #8
   2aa20:	mov	r7, #0
   2aa24:	b	2a7a4 <__assert_fail@plt+0x19548>
   2aa28:	mov	r4, #0
   2aa2c:	b	2a8a4 <__assert_fail@plt+0x19648>
   2aa30:	mov	r8, #0
   2aa34:	b	2a8d8 <__assert_fail@plt+0x1967c>
	...
   2aa40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aa44:	sub	sp, sp, #28
   2aa48:	mov	r5, r2
   2aa4c:	ldr	r6, [sp, #80]	; 0x50
   2aa50:	ldr	r4, [sp, #64]	; 0x40
   2aa54:	orr	r2, r2, r6
   2aa58:	orrs	r2, r2, r4
   2aa5c:	ldrb	fp, [sp, #84]	; 0x54
   2aa60:	bmi	2aa84 <__assert_fail@plt+0x19828>
   2aa64:	cmp	r4, #0
   2aa68:	mov	sl, r0
   2aa6c:	mov	r7, r3
   2aa70:	blt	2aa94 <__assert_fail@plt+0x19838>
   2aa74:	mvn	r3, #-2147483648	; 0x80000000
   2aa78:	sub	r3, r3, r4
   2aa7c:	cmp	r5, r3
   2aa80:	ble	2aa94 <__assert_fail@plt+0x19838>
   2aa84:	mvn	r4, #1
   2aa88:	mov	r0, r4
   2aa8c:	add	sp, sp, #28
   2aa90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aa94:	cmp	r4, #0
   2aa98:	add	r9, r5, r4
   2aa9c:	ble	2ab28 <__assert_fail@plt+0x198cc>
   2aaa0:	cmp	r5, #0
   2aaa4:	str	r1, [sp, #20]
   2aaa8:	beq	2ab20 <__assert_fail@plt+0x198c4>
   2aaac:	mov	r0, r9
   2aab0:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   2aab4:	subs	r8, r0, #0
   2aab8:	beq	2aa84 <__assert_fail@plt+0x19828>
   2aabc:	ldr	r1, [sp, #20]
   2aac0:	mov	r2, r5
   2aac4:	bl	11004 <memcpy@plt>
   2aac8:	mov	r1, r7
   2aacc:	mov	r2, r4
   2aad0:	add	r0, r8, r5
   2aad4:	bl	11004 <memcpy@plt>
   2aad8:	mov	r7, r8
   2aadc:	ldr	r3, [sp, #76]	; 0x4c
   2aae0:	mov	r2, r9
   2aae4:	str	r3, [sp, #8]
   2aae8:	ldr	r3, [sp, #72]	; 0x48
   2aaec:	mov	r1, r7
   2aaf0:	str	r3, [sp]
   2aaf4:	str	fp, [sp, #12]
   2aaf8:	ldr	r3, [sp, #68]	; 0x44
   2aafc:	str	r6, [sp, #4]
   2ab00:	mov	r0, sl
   2ab04:	bl	2a6a4 <__assert_fail@plt+0x19448>
   2ab08:	mov	r4, r0
   2ab0c:	mov	r0, r8
   2ab10:	bl	13098 <__assert_fail@plt+0x1e3c>
   2ab14:	mov	r0, r4
   2ab18:	add	sp, sp, #28
   2ab1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ab20:	mov	r8, r5
   2ab24:	b	2aadc <__assert_fail@plt+0x19880>
   2ab28:	mov	r7, r1
   2ab2c:	mov	r8, #0
   2ab30:	b	2aadc <__assert_fail@plt+0x19880>
   2ab34:	push	{r4, r5, r6, r7, r8, lr}
   2ab38:	mov	r5, r2
   2ab3c:	ldr	r3, [pc, #228]	; 2ac28 <__assert_fail@plt+0x199cc>
   2ab40:	mov	r2, #0
   2ab44:	tst	r5, #1
   2ab48:	mov	r4, r0
   2ab4c:	str	r2, [r0]
   2ab50:	str	r2, [r0, #4]
   2ab54:	str	r2, [r0, #8]
   2ab58:	mov	r0, #256	; 0x100
   2ab5c:	ldr	r6, [pc, #200]	; 2ac2c <__assert_fail@plt+0x199d0>
   2ab60:	mov	r7, r1
   2ab64:	moveq	r6, r3
   2ab68:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   2ab6c:	cmp	r0, #0
   2ab70:	str	r0, [r4, #16]
   2ab74:	beq	2ac20 <__assert_fail@plt+0x199c4>
   2ab78:	tst	r5, #2
   2ab7c:	movne	r3, #4194304	; 0x400000
   2ab80:	moveq	r3, #0
   2ab84:	orr	r6, r6, r3
   2ab88:	ldrb	r3, [r4, #28]
   2ab8c:	tst	r5, #4
   2ab90:	lsl	r5, r5, #1
   2ab94:	orrne	r3, r3, #128	; 0x80
   2ab98:	biceq	r3, r3, #128	; 0x80
   2ab9c:	strb	r3, [r4, #28]
   2aba0:	ldrb	r2, [r4, #28]
   2aba4:	and	r5, r5, #16
   2aba8:	mov	r3, #0
   2abac:	bic	r2, r2, #16
   2abb0:	orr	r5, r5, r2
   2abb4:	bicne	r6, r6, #64	; 0x40
   2abb8:	strb	r5, [r4, #28]
   2abbc:	str	r3, [r4, #20]
   2abc0:	mov	r0, r7
   2abc4:	orrne	r6, r6, #256	; 0x100
   2abc8:	bl	11160 <strlen@plt>
   2abcc:	mov	r3, r6
   2abd0:	mov	r1, r7
   2abd4:	mov	r2, r0
   2abd8:	mov	r0, r4
   2abdc:	bl	2966c <__assert_fail@plt+0x18410>
   2abe0:	cmp	r0, #16
   2abe4:	mov	r5, r0
   2abe8:	beq	2ac04 <__assert_fail@plt+0x199a8>
   2abec:	cmp	r0, #0
   2abf0:	bne	2ac08 <__assert_fail@plt+0x199ac>
   2abf4:	mov	r0, r4
   2abf8:	bl	2a5ec <__assert_fail@plt+0x19390>
   2abfc:	mov	r0, r5
   2ac00:	pop	{r4, r5, r6, r7, r8, pc}
   2ac04:	mov	r5, #8
   2ac08:	ldr	r0, [r4, #16]
   2ac0c:	bl	13098 <__assert_fail@plt+0x1e3c>
   2ac10:	mov	r3, #0
   2ac14:	mov	r0, r5
   2ac18:	str	r3, [r4, #16]
   2ac1c:	pop	{r4, r5, r6, r7, r8, pc}
   2ac20:	mov	r0, #12
   2ac24:	pop	{r4, r5, r6, r7, r8, pc}
   2ac28:	smlabteq	r1, r6, r2, r0
   2ac2c:	strdeq	fp, [r3], -ip
   2ac30:	cmp	r0, #16
   2ac34:	push	{r4, r5, r6, r7, r8, lr}
   2ac38:	bhi	2aca0 <__assert_fail@plt+0x19a44>
   2ac3c:	ldr	r1, [pc, #96]	; 2aca4 <__assert_fail@plt+0x19a48>
   2ac40:	mov	r4, r3
   2ac44:	add	r0, r1, r0, lsl #2
   2ac48:	add	r1, r1, #32
   2ac4c:	ldr	r3, [r0, #416]	; 0x1a0
   2ac50:	mov	r6, r2
   2ac54:	add	r1, r1, r3
   2ac58:	mov	r2, #5
   2ac5c:	mov	r0, #0
   2ac60:	bl	1104c <dcgettext@plt>
   2ac64:	mov	r7, r0
   2ac68:	bl	11160 <strlen@plt>
   2ac6c:	cmp	r4, #0
   2ac70:	add	r5, r0, #1
   2ac74:	beq	2ac98 <__assert_fail@plt+0x19a3c>
   2ac78:	cmp	r5, r4
   2ac7c:	subhi	r2, r4, #1
   2ac80:	movhi	r3, #0
   2ac84:	strbhi	r3, [r6, r2]
   2ac88:	movls	r2, r5
   2ac8c:	mov	r1, r7
   2ac90:	mov	r0, r6
   2ac94:	bl	11004 <memcpy@plt>
   2ac98:	mov	r0, r5
   2ac9c:	pop	{r4, r5, r6, r7, r8, pc}
   2aca0:	bl	11250 <abort@plt>
   2aca4:			; <UNDEFINED> instruction: 0x0002dcb4
   2aca8:	push	{r4, r5, r6, lr}
   2acac:	mov	r4, r0
   2acb0:	ldr	r5, [r0]
   2acb4:	cmp	r5, #0
   2acb8:	beq	2acf8 <__assert_fail@plt+0x19a9c>
   2acbc:	ldr	r2, [pc, #92]	; 2ad20 <__assert_fail@plt+0x19ac4>
   2acc0:	ldr	r1, [pc, #92]	; 2ad24 <__assert_fail@plt+0x19ac8>
   2acc4:	cmp	r2, #0
   2acc8:	mov	r3, #1
   2accc:	moveq	r3, r2
   2acd0:	cmp	r1, #0
   2acd4:	mov	r2, #1
   2acd8:	moveq	r2, r1
   2acdc:	orr	r3, r3, r2
   2ace0:	tst	r3, #1
   2ace4:	beq	2acf0 <__assert_fail@plt+0x19a94>
   2ace8:	add	r0, r5, #136	; 0x88
   2acec:	bl	10fb0 <pthread_mutex_destroy@plt>
   2acf0:	mov	r0, r5
   2acf4:	bl	1ed70 <__assert_fail@plt+0xdb14>
   2acf8:	mov	r5, #0
   2acfc:	ldr	r0, [r4, #16]
   2ad00:	str	r5, [r4]
   2ad04:	str	r5, [r4, #4]
   2ad08:	bl	13098 <__assert_fail@plt+0x1e3c>
   2ad0c:	str	r5, [r4, #16]
   2ad10:	ldr	r0, [r4, #20]
   2ad14:	bl	13098 <__assert_fail@plt+0x1e3c>
   2ad18:	str	r5, [r4, #20]
   2ad1c:	pop	{r4, r5, r6, pc}
	...
   2ad28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ad2c:	sub	sp, sp, #36	; 0x24
   2ad30:	ldr	r4, [sp, #72]	; 0x48
   2ad34:	bics	ip, r4, #7
   2ad38:	movne	r0, #2
   2ad3c:	beq	2ad48 <__assert_fail@plt+0x19aec>
   2ad40:	add	sp, sp, #36	; 0x24
   2ad44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ad48:	ands	fp, r4, #4
   2ad4c:	mov	r8, r3
   2ad50:	str	r2, [sp, #28]
   2ad54:	mov	r7, r1
   2ad58:	mov	r5, r0
   2ad5c:	bne	2ae00 <__assert_fail@plt+0x19ba4>
   2ad60:	mov	r0, r1
   2ad64:	bl	11160 <strlen@plt>
   2ad68:	mov	r9, r0
   2ad6c:	ldr	r3, [pc, #204]	; 2ae40 <__assert_fail@plt+0x19be4>
   2ad70:	ldr	r1, [pc, #204]	; 2ae44 <__assert_fail@plt+0x19be8>
   2ad74:	cmp	r3, #0
   2ad78:	mov	r6, #1
   2ad7c:	moveq	r6, r3
   2ad80:	cmp	r1, #0
   2ad84:	mov	r3, #1
   2ad88:	moveq	r3, r1
   2ad8c:	orr	r6, r6, r3
   2ad90:	ands	r6, r6, #255	; 0xff
   2ad94:	ldr	sl, [r5]
   2ad98:	beq	2ada4 <__assert_fail@plt+0x19b48>
   2ad9c:	add	r0, sl, #136	; 0x88
   2ada0:	bl	10fec <pthread_mutex_lock@plt>
   2ada4:	ldrb	r3, [r5, #28]
   2ada8:	tst	r3, #16
   2adac:	beq	2ae0c <__assert_fail@plt+0x19bb0>
   2adb0:	mov	ip, #0
   2adb4:	str	r4, [sp, #16]
   2adb8:	str	r9, [sp, #4]
   2adbc:	str	r9, [sp]
   2adc0:	mov	r3, fp
   2adc4:	mov	r2, r9
   2adc8:	mov	r1, r7
   2adcc:	mov	r0, r5
   2add0:	str	ip, [sp, #12]
   2add4:	str	ip, [sp, #8]
   2add8:	bl	24f50 <__assert_fail@plt+0x13cf4>
   2addc:	mov	r4, r0
   2ade0:	cmp	r6, #0
   2ade4:	beq	2adf0 <__assert_fail@plt+0x19b94>
   2ade8:	add	r0, sl, #136	; 0x88
   2adec:	bl	10f44 <pthread_mutex_unlock@plt>
   2adf0:	adds	r0, r4, #0
   2adf4:	movne	r0, #1
   2adf8:	add	sp, sp, #36	; 0x24
   2adfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ae00:	ldr	fp, [r3]
   2ae04:	ldr	r9, [r3, #4]
   2ae08:	b	2ad6c <__assert_fail@plt+0x19b10>
   2ae0c:	ldr	r3, [sp, #28]
   2ae10:	str	r4, [sp, #16]
   2ae14:	str	r3, [sp, #8]
   2ae18:	str	r8, [sp, #12]
   2ae1c:	str	r9, [sp, #4]
   2ae20:	str	r9, [sp]
   2ae24:	mov	r3, fp
   2ae28:	mov	r2, r9
   2ae2c:	mov	r1, r7
   2ae30:	mov	r0, r5
   2ae34:	bl	24f50 <__assert_fail@plt+0x13cf4>
   2ae38:	mov	r4, r0
   2ae3c:	b	2ade0 <__assert_fail@plt+0x19b84>
	...
   2ae48:	push	{r4, lr}
   2ae4c:	sub	sp, sp, #16
   2ae50:	mov	lr, #1
   2ae54:	ldr	r4, [sp, #24]
   2ae58:	mov	ip, #0
   2ae5c:	str	ip, [sp]
   2ae60:	stmib	sp, {r2, r4, lr}
   2ae64:	bl	2a6a4 <__assert_fail@plt+0x19448>
   2ae68:	add	sp, sp, #16
   2ae6c:	pop	{r4, pc}
   2ae70:	push	{r4, lr}
   2ae74:	sub	sp, sp, #16
   2ae78:	mov	ip, #0
   2ae7c:	ldr	r4, [sp, #24]
   2ae80:	ldr	lr, [sp, #28]
   2ae84:	str	r2, [sp, #4]
   2ae88:	str	r4, [sp]
   2ae8c:	str	lr, [sp, #8]
   2ae90:	str	ip, [sp, #12]
   2ae94:	bl	2a6a4 <__assert_fail@plt+0x19448>
   2ae98:	add	sp, sp, #16
   2ae9c:	pop	{r4, pc}
   2aea0:	push	{r4, r5, lr}
   2aea4:	sub	sp, sp, #28
   2aea8:	ldr	lr, [sp, #40]	; 0x28
   2aeac:	ldr	ip, [sp, #44]	; 0x2c
   2aeb0:	ldr	r5, [sp, #48]	; 0x30
   2aeb4:	ldr	r4, [sp, #52]	; 0x34
   2aeb8:	str	lr, [sp]
   2aebc:	str	ip, [sp, #4]
   2aec0:	mov	lr, #1
   2aec4:	mov	ip, #0
   2aec8:	str	r5, [sp, #12]
   2aecc:	str	r4, [sp, #16]
   2aed0:	str	lr, [sp, #20]
   2aed4:	str	ip, [sp, #8]
   2aed8:	bl	2aa40 <__assert_fail@plt+0x197e4>
   2aedc:	add	sp, sp, #28
   2aee0:	pop	{r4, r5, pc}
   2aee4:	push	{r4, r5, lr}
   2aee8:	sub	sp, sp, #28
   2aeec:	ldr	lr, [sp, #40]	; 0x28
   2aef0:	ldr	ip, [sp, #44]	; 0x2c
   2aef4:	ldr	r5, [sp, #48]	; 0x30
   2aef8:	ldr	r4, [sp, #52]	; 0x34
   2aefc:	str	lr, [sp]
   2af00:	ldr	lr, [sp, #56]	; 0x38
   2af04:	str	ip, [sp, #4]
   2af08:	mov	ip, #0
   2af0c:	str	r5, [sp, #8]
   2af10:	str	r4, [sp, #12]
   2af14:	str	lr, [sp, #16]
   2af18:	str	ip, [sp, #20]
   2af1c:	bl	2aa40 <__assert_fail@plt+0x197e4>
   2af20:	add	sp, sp, #28
   2af24:	pop	{r4, r5, pc}
   2af28:	cmp	r2, #0
   2af2c:	bne	2af4c <__assert_fail@plt+0x19cf0>
   2af30:	ldrb	r3, [r0, #28]
   2af34:	bic	r3, r3, #6
   2af38:	strb	r3, [r0, #28]
   2af3c:	str	r2, [r1]
   2af40:	str	r2, [r1, #8]
   2af44:	str	r2, [r1, #4]
   2af48:	bx	lr
   2af4c:	ldrb	ip, [r0, #28]
   2af50:	bic	ip, ip, #4
   2af54:	orr	ip, ip, #2
   2af58:	strb	ip, [r0, #28]
   2af5c:	stm	r1, {r2, r3}
   2af60:	ldr	r3, [sp]
   2af64:	str	r3, [r1, #8]
   2af68:	bx	lr
   2af6c:	push	{r4, r5, r6, lr}
   2af70:	mov	r2, r1
   2af74:	mov	r4, r1
   2af78:	mov	r1, #0
   2af7c:	mov	r5, r0
   2af80:	bl	111d8 <memchr@plt>
   2af84:	cmp	r0, #0
   2af88:	subne	r0, r0, r5
   2af8c:	addne	r0, r0, #1
   2af90:	moveq	r0, r4
   2af94:	pop	{r4, r5, r6, pc}
   2af98:	push	{r4, r5, lr}
   2af9c:	mov	r2, r0
   2afa0:	ldrb	r3, [r0]
   2afa4:	ldrb	r0, [r1]
   2afa8:	cmp	r3, #45	; 0x2d
   2afac:	beq	2b00c <__assert_fail@plt+0x19db0>
   2afb0:	cmp	r0, #45	; 0x2d
   2afb4:	beq	2b048 <__assert_fail@plt+0x19dec>
   2afb8:	cmp	r3, #48	; 0x30
   2afbc:	beq	2b110 <__assert_fail@plt+0x19eb4>
   2afc0:	cmp	r0, #48	; 0x30
   2afc4:	beq	2b108 <__assert_fail@plt+0x19eac>
   2afc8:	cmp	r3, r0
   2afcc:	subne	r5, r0, #48	; 0x30
   2afd0:	subne	r0, r3, r0
   2afd4:	subne	r3, r3, #48	; 0x30
   2afd8:	bne	2b12c <__assert_fail@plt+0x19ed0>
   2afdc:	sub	r3, r3, #48	; 0x30
   2afe0:	cmp	r3, #9
   2afe4:	bhi	2b004 <__assert_fail@plt+0x19da8>
   2afe8:	ldrb	r3, [r2, #1]!
   2afec:	ldrb	r0, [r1, #1]!
   2aff0:	sub	ip, r3, #48	; 0x30
   2aff4:	cmp	r3, r0
   2aff8:	bne	2b120 <__assert_fail@plt+0x19ec4>
   2affc:	cmp	ip, #9
   2b000:	bls	2afe8 <__assert_fail@plt+0x19d8c>
   2b004:	mov	r0, #0
   2b008:	pop	{r4, r5, pc}
   2b00c:	ldrb	ip, [r2, #1]!
   2b010:	cmp	ip, #48	; 0x30
   2b014:	beq	2b00c <__assert_fail@plt+0x19db0>
   2b018:	cmp	r0, #45	; 0x2d
   2b01c:	beq	2b07c <__assert_fail@plt+0x19e20>
   2b020:	sub	ip, ip, #48	; 0x30
   2b024:	cmp	ip, #9
   2b028:	bls	2b100 <__assert_fail@plt+0x19ea4>
   2b02c:	cmp	r0, #48	; 0x30
   2b030:	beq	2b118 <__assert_fail@plt+0x19ebc>
   2b034:	sub	r0, r0, #48	; 0x30
   2b038:	cmp	r0, #9
   2b03c:	movhi	r0, #0
   2b040:	mvnls	r0, #0
   2b044:	pop	{r4, r5, pc}
   2b048:	ldrb	r0, [r1, #1]!
   2b04c:	cmp	r0, #48	; 0x30
   2b050:	beq	2b048 <__assert_fail@plt+0x19dec>
   2b054:	sub	r0, r0, #48	; 0x30
   2b058:	cmp	r0, #9
   2b05c:	bls	2b180 <__assert_fail@plt+0x19f24>
   2b060:	cmp	r3, #48	; 0x30
   2b064:	beq	2b188 <__assert_fail@plt+0x19f2c>
   2b068:	sub	r3, r3, #48	; 0x30
   2b06c:	cmp	r3, #9
   2b070:	movhi	r0, #0
   2b074:	movls	r0, #1
   2b078:	pop	{r4, r5, pc}
   2b07c:	ldrb	r5, [r1, #1]!
   2b080:	cmp	r5, #48	; 0x30
   2b084:	bne	2b09c <__assert_fail@plt+0x19e40>
   2b088:	b	2b07c <__assert_fail@plt+0x19e20>
   2b08c:	cmp	r3, #9
   2b090:	bhi	2b19c <__assert_fail@plt+0x19f40>
   2b094:	ldrb	ip, [r2, #1]!
   2b098:	ldrb	r5, [r1, #1]!
   2b09c:	cmp	ip, r5
   2b0a0:	sub	r3, ip, #48	; 0x30
   2b0a4:	beq	2b08c <__assert_fail@plt+0x19e30>
   2b0a8:	cmp	r3, #9
   2b0ac:	bhi	2b19c <__assert_fail@plt+0x19f40>
   2b0b0:	mov	lr, r2
   2b0b4:	add	lr, lr, #1
   2b0b8:	ldrb	r4, [lr]
   2b0bc:	sub	r0, lr, r2
   2b0c0:	sub	r4, r4, #48	; 0x30
   2b0c4:	cmp	r4, #9
   2b0c8:	bls	2b0b4 <__assert_fail@plt+0x19e58>
   2b0cc:	sub	r3, r5, #48	; 0x30
   2b0d0:	cmp	r3, #9
   2b0d4:	bhi	2b1bc <__assert_fail@plt+0x19f60>
   2b0d8:	mov	r2, r1
   2b0dc:	add	r2, r2, #1
   2b0e0:	ldrb	lr, [r2]
   2b0e4:	sub	r3, r2, r1
   2b0e8:	sub	lr, lr, #48	; 0x30
   2b0ec:	cmp	lr, #9
   2b0f0:	bls	2b0dc <__assert_fail@plt+0x19e80>
   2b0f4:	cmp	r3, r0
   2b0f8:	beq	2b1b0 <__assert_fail@plt+0x19f54>
   2b0fc:	bhi	2b180 <__assert_fail@plt+0x19f24>
   2b100:	mvn	r0, #0
   2b104:	pop	{r4, r5, pc}
   2b108:	ldrb	r0, [r1, #1]!
   2b10c:	b	2afc0 <__assert_fail@plt+0x19d64>
   2b110:	ldrb	r3, [r2, #1]!
   2b114:	b	2afb8 <__assert_fail@plt+0x19d5c>
   2b118:	ldrb	r0, [r1, #1]!
   2b11c:	b	2b02c <__assert_fail@plt+0x19dd0>
   2b120:	sub	r5, r0, #48	; 0x30
   2b124:	sub	r0, r3, r0
   2b128:	mov	r3, ip
   2b12c:	cmp	r3, #9
   2b130:	bhi	2b1d4 <__assert_fail@plt+0x19f78>
   2b134:	mov	ip, r2
   2b138:	add	ip, ip, #1
   2b13c:	ldrb	lr, [ip]
   2b140:	sub	r4, ip, r2
   2b144:	sub	lr, lr, #48	; 0x30
   2b148:	cmp	lr, #9
   2b14c:	bls	2b138 <__assert_fail@plt+0x19edc>
   2b150:	cmp	r5, #9
   2b154:	bhi	2b1c8 <__assert_fail@plt+0x19f6c>
   2b158:	mov	r2, r1
   2b15c:	add	r2, r2, #1
   2b160:	ldrb	ip, [r2]
   2b164:	sub	lr, r2, r1
   2b168:	sub	ip, ip, #48	; 0x30
   2b16c:	cmp	ip, #9
   2b170:	bls	2b15c <__assert_fail@plt+0x19f00>
   2b174:	cmp	lr, r4
   2b178:	beq	2b190 <__assert_fail@plt+0x19f34>
   2b17c:	bhi	2b100 <__assert_fail@plt+0x19ea4>
   2b180:	mov	r0, #1
   2b184:	pop	{r4, r5, pc}
   2b188:	ldrb	r3, [r2, #1]!
   2b18c:	b	2b060 <__assert_fail@plt+0x19e04>
   2b190:	cmp	r4, #0
   2b194:	moveq	r0, #0
   2b198:	pop	{r4, r5, pc}
   2b19c:	sub	r3, r5, #48	; 0x30
   2b1a0:	cmp	r3, #9
   2b1a4:	mov	r0, #0
   2b1a8:	bls	2b0d8 <__assert_fail@plt+0x19e7c>
   2b1ac:	pop	{r4, r5, pc}
   2b1b0:	cmp	r0, #0
   2b1b4:	subne	r0, r5, ip
   2b1b8:	pop	{r4, r5, pc}
   2b1bc:	adds	r0, r0, #0
   2b1c0:	mvnne	r0, #0
   2b1c4:	pop	{r4, r5, pc}
   2b1c8:	adds	r0, r4, #0
   2b1cc:	movne	r0, #1
   2b1d0:	pop	{r4, r5, pc}
   2b1d4:	cmp	r5, #9
   2b1d8:	movls	r4, #0
   2b1dc:	bls	2b158 <__assert_fail@plt+0x19efc>
   2b1e0:	b	2b004 <__assert_fail@plt+0x19da8>
   2b1e4:	push	{r4, r5, r6, lr}
   2b1e8:	sub	sp, sp, #32
   2b1ec:	cmp	r1, #0
   2b1f0:	mov	r4, r0
   2b1f4:	ldr	r5, [sp, #48]	; 0x30
   2b1f8:	ldr	r6, [sp, #52]	; 0x34
   2b1fc:	beq	2b514 <__assert_fail@plt+0x1a2b8>
   2b200:	stm	sp, {r2, r3}
   2b204:	mov	r3, r1
   2b208:	ldr	r2, [pc, #808]	; 2b538 <__assert_fail@plt+0x1a2dc>
   2b20c:	mov	r1, #1
   2b210:	bl	111cc <__fprintf_chk@plt>
   2b214:	mov	r2, #5
   2b218:	ldr	r1, [pc, #796]	; 2b53c <__assert_fail@plt+0x1a2e0>
   2b21c:	mov	r0, #0
   2b220:	bl	1104c <dcgettext@plt>
   2b224:	ldr	r3, [pc, #788]	; 2b540 <__assert_fail@plt+0x1a2e4>
   2b228:	ldr	r2, [pc, #788]	; 2b544 <__assert_fail@plt+0x1a2e8>
   2b22c:	str	r3, [sp]
   2b230:	mov	r1, #1
   2b234:	mov	r3, r0
   2b238:	mov	r0, r4
   2b23c:	bl	111cc <__fprintf_chk@plt>
   2b240:	mov	r1, r4
   2b244:	mov	r0, #10
   2b248:	bl	11040 <fputc_unlocked@plt>
   2b24c:	mov	r2, #5
   2b250:	ldr	r1, [pc, #752]	; 2b548 <__assert_fail@plt+0x1a2ec>
   2b254:	mov	r0, #0
   2b258:	bl	1104c <dcgettext@plt>
   2b25c:	mov	r1, #1
   2b260:	ldr	r3, [pc, #740]	; 2b54c <__assert_fail@plt+0x1a2f0>
   2b264:	mov	r2, r0
   2b268:	mov	r0, r4
   2b26c:	bl	111cc <__fprintf_chk@plt>
   2b270:	mov	r1, r4
   2b274:	mov	r0, #10
   2b278:	bl	11040 <fputc_unlocked@plt>
   2b27c:	cmp	r6, #9
   2b280:	ldrls	pc, [pc, r6, lsl #2]
   2b284:	b	2b52c <__assert_fail@plt+0x1a2d0>
   2b288:	andeq	fp, r2, ip, lsl #6
   2b28c:	andeq	fp, r2, r4, lsl r3
   2b290:	andeq	fp, r2, r0, asr #6
   2b294:	andeq	fp, r2, r4, ror r3
   2b298:			; <UNDEFINED> instruction: 0x0002b3b0
   2b29c:	andeq	fp, r2, ip, ror #7
   2b2a0:	andeq	fp, r2, r8, lsr #8
   2b2a4:	andeq	fp, r2, ip, ror #8
   2b2a8:			; <UNDEFINED> instruction: 0x0002b4bc
   2b2ac:			; <UNDEFINED> instruction: 0x0002b2b0
   2b2b0:	ldr	r1, [pc, #664]	; 2b550 <__assert_fail@plt+0x1a2f4>
   2b2b4:	mov	r2, #5
   2b2b8:	mov	r0, #0
   2b2bc:	bl	1104c <dcgettext@plt>
   2b2c0:	ldr	ip, [r5, #32]
   2b2c4:	ldr	r1, [r5, #28]
   2b2c8:	ldr	r2, [r5, #24]
   2b2cc:	ldr	r3, [r5]
   2b2d0:	ldr	r6, [r5, #20]
   2b2d4:	str	ip, [sp, #28]
   2b2d8:	ldr	lr, [r5, #16]
   2b2dc:	str	r1, [sp, #24]
   2b2e0:	ldr	ip, [r5, #12]
   2b2e4:	str	r2, [sp, #20]
   2b2e8:	ldr	r1, [r5, #8]
   2b2ec:	ldr	r2, [r5, #4]
   2b2f0:	str	r6, [sp, #16]
   2b2f4:	stmib	sp, {r1, ip, lr}
   2b2f8:	mov	r1, #1
   2b2fc:	str	r2, [sp]
   2b300:	mov	r2, r0
   2b304:	mov	r0, r4
   2b308:	bl	111cc <__fprintf_chk@plt>
   2b30c:	add	sp, sp, #32
   2b310:	pop	{r4, r5, r6, pc}
   2b314:	mov	r2, #5
   2b318:	ldr	r1, [pc, #564]	; 2b554 <__assert_fail@plt+0x1a2f8>
   2b31c:	mov	r0, #0
   2b320:	bl	1104c <dcgettext@plt>
   2b324:	ldr	r3, [r5]
   2b328:	mov	r1, #1
   2b32c:	mov	r2, r0
   2b330:	mov	r0, r4
   2b334:	add	sp, sp, #32
   2b338:	pop	{r4, r5, r6, lr}
   2b33c:	b	111cc <__fprintf_chk@plt>
   2b340:	mov	r2, #5
   2b344:	ldr	r1, [pc, #524]	; 2b558 <__assert_fail@plt+0x1a2fc>
   2b348:	mov	r0, #0
   2b34c:	bl	1104c <dcgettext@plt>
   2b350:	ldr	r2, [r5, #4]
   2b354:	ldr	r3, [r5]
   2b358:	mov	r1, #1
   2b35c:	str	r2, [sp, #48]	; 0x30
   2b360:	mov	r2, r0
   2b364:	mov	r0, r4
   2b368:	add	sp, sp, #32
   2b36c:	pop	{r4, r5, r6, lr}
   2b370:	b	111cc <__fprintf_chk@plt>
   2b374:	mov	r2, #5
   2b378:	ldr	r1, [pc, #476]	; 2b55c <__assert_fail@plt+0x1a300>
   2b37c:	mov	r0, #0
   2b380:	bl	1104c <dcgettext@plt>
   2b384:	ldr	r1, [r5, #8]
   2b388:	ldr	r2, [r5, #4]
   2b38c:	ldr	r3, [r5]
   2b390:	str	r1, [sp, #52]	; 0x34
   2b394:	str	r2, [sp, #48]	; 0x30
   2b398:	mov	r1, #1
   2b39c:	mov	r2, r0
   2b3a0:	mov	r0, r4
   2b3a4:	add	sp, sp, #32
   2b3a8:	pop	{r4, r5, r6, lr}
   2b3ac:	b	111cc <__fprintf_chk@plt>
   2b3b0:	mov	r2, #5
   2b3b4:	ldr	r1, [pc, #420]	; 2b560 <__assert_fail@plt+0x1a304>
   2b3b8:	mov	r0, #0
   2b3bc:	bl	1104c <dcgettext@plt>
   2b3c0:	ldr	r1, [r5, #8]
   2b3c4:	ldr	ip, [r5, #12]
   2b3c8:	ldr	r2, [r5, #4]
   2b3cc:	ldr	r3, [r5]
   2b3d0:	stmib	sp, {r1, ip}
   2b3d4:	str	r2, [sp]
   2b3d8:	mov	r1, #1
   2b3dc:	mov	r2, r0
   2b3e0:	mov	r0, r4
   2b3e4:	bl	111cc <__fprintf_chk@plt>
   2b3e8:	b	2b30c <__assert_fail@plt+0x1a0b0>
   2b3ec:	mov	r2, #5
   2b3f0:	ldr	r1, [pc, #364]	; 2b564 <__assert_fail@plt+0x1a308>
   2b3f4:	mov	r0, #0
   2b3f8:	bl	1104c <dcgettext@plt>
   2b3fc:	add	r1, r5, #8
   2b400:	ldr	r2, [r5, #4]
   2b404:	ldm	r1, {r1, ip, lr}
   2b408:	ldr	r3, [r5]
   2b40c:	str	r2, [sp]
   2b410:	stmib	sp, {r1, ip, lr}
   2b414:	mov	r1, #1
   2b418:	mov	r2, r0
   2b41c:	mov	r0, r4
   2b420:	bl	111cc <__fprintf_chk@plt>
   2b424:	b	2b30c <__assert_fail@plt+0x1a0b0>
   2b428:	mov	r2, #5
   2b42c:	ldr	r1, [pc, #308]	; 2b568 <__assert_fail@plt+0x1a30c>
   2b430:	mov	r0, #0
   2b434:	bl	1104c <dcgettext@plt>
   2b438:	add	r1, r5, #8
   2b43c:	ldr	r2, [r5, #4]
   2b440:	ldm	r1, {r1, ip, lr}
   2b444:	ldr	r6, [r5, #20]
   2b448:	ldr	r3, [r5]
   2b44c:	stmib	sp, {r1, ip, lr}
   2b450:	mov	r1, #1
   2b454:	str	r2, [sp]
   2b458:	str	r6, [sp, #16]
   2b45c:	mov	r2, r0
   2b460:	mov	r0, r4
   2b464:	bl	111cc <__fprintf_chk@plt>
   2b468:	b	2b30c <__assert_fail@plt+0x1a0b0>
   2b46c:	mov	r2, #5
   2b470:	ldr	r1, [pc, #244]	; 2b56c <__assert_fail@plt+0x1a310>
   2b474:	mov	r0, #0
   2b478:	bl	1104c <dcgettext@plt>
   2b47c:	ldr	r2, [r5, #24]
   2b480:	ldr	r3, [r5]
   2b484:	ldr	r6, [r5, #20]
   2b488:	ldr	lr, [r5, #16]
   2b48c:	ldr	ip, [r5, #12]
   2b490:	str	r2, [sp, #20]
   2b494:	ldr	r1, [r5, #8]
   2b498:	ldr	r2, [r5, #4]
   2b49c:	str	r6, [sp, #16]
   2b4a0:	stmib	sp, {r1, ip, lr}
   2b4a4:	mov	r1, #1
   2b4a8:	str	r2, [sp]
   2b4ac:	mov	r2, r0
   2b4b0:	mov	r0, r4
   2b4b4:	bl	111cc <__fprintf_chk@plt>
   2b4b8:	b	2b30c <__assert_fail@plt+0x1a0b0>
   2b4bc:	mov	r2, #5
   2b4c0:	ldr	r1, [pc, #168]	; 2b570 <__assert_fail@plt+0x1a314>
   2b4c4:	mov	r0, #0
   2b4c8:	bl	1104c <dcgettext@plt>
   2b4cc:	ldr	r1, [r5, #28]
   2b4d0:	ldr	r2, [r5, #24]
   2b4d4:	ldr	r3, [r5]
   2b4d8:	ldr	r6, [r5, #20]
   2b4dc:	ldr	lr, [r5, #16]
   2b4e0:	str	r1, [sp, #24]
   2b4e4:	ldr	ip, [r5, #12]
   2b4e8:	str	r2, [sp, #20]
   2b4ec:	ldr	r1, [r5, #8]
   2b4f0:	ldr	r2, [r5, #4]
   2b4f4:	str	r6, [sp, #16]
   2b4f8:	stmib	sp, {r1, ip, lr}
   2b4fc:	mov	r1, #1
   2b500:	str	r2, [sp]
   2b504:	mov	r2, r0
   2b508:	mov	r0, r4
   2b50c:	bl	111cc <__fprintf_chk@plt>
   2b510:	b	2b30c <__assert_fail@plt+0x1a0b0>
   2b514:	str	r3, [sp]
   2b518:	mov	r1, #1
   2b51c:	mov	r3, r2
   2b520:	ldr	r2, [pc, #76]	; 2b574 <__assert_fail@plt+0x1a318>
   2b524:	bl	111cc <__fprintf_chk@plt>
   2b528:	b	2b214 <__assert_fail@plt+0x19fb8>
   2b52c:	mov	r2, #5
   2b530:	ldr	r1, [pc, #64]	; 2b578 <__assert_fail@plt+0x1a31c>
   2b534:	b	2b2b8 <__assert_fail@plt+0x1a05c>
   2b538:	andeq	sp, r2, r0, lsl #30
   2b53c:	andeq	sp, r2, r4, lsl pc
   2b540:	andeq	r0, r0, r6, ror #15
   2b544:	andeq	lr, r2, ip, ror #3
   2b548:	andeq	sp, r2, r8, lsl pc
   2b54c:	andeq	sp, r2, r4, asr #31
   2b550:	strdeq	lr, [r2], -r4
   2b554:	andeq	sp, r2, r8, ror #31
   2b558:	strdeq	sp, [r2], -r8
   2b55c:	andeq	lr, r2, r0, lsl r0
   2b560:	andeq	lr, r2, ip, lsr #32
   2b564:	andeq	lr, r2, ip, asr #32
   2b568:	andeq	lr, r2, r0, ror r0
   2b56c:	muleq	r2, r8, r0
   2b570:	andeq	lr, r2, r4, asr #1
   2b574:	andeq	sp, r2, ip, lsl #30
   2b578:	andeq	lr, r2, r8, lsr #2
   2b57c:	push	{r4, r5, lr}
   2b580:	sub	sp, sp, #12
   2b584:	ldr	r5, [sp, #24]
   2b588:	ldr	ip, [r5]
   2b58c:	cmp	ip, #0
   2b590:	beq	2b5ac <__assert_fail@plt+0x1a350>
   2b594:	mov	lr, r5
   2b598:	mov	ip, #0
   2b59c:	ldr	r4, [lr, #4]!
   2b5a0:	add	ip, ip, #1
   2b5a4:	cmp	r4, #0
   2b5a8:	bne	2b59c <__assert_fail@plt+0x1a340>
   2b5ac:	stm	sp, {r5, ip}
   2b5b0:	bl	2b1e4 <__assert_fail@plt+0x19f88>
   2b5b4:	add	sp, sp, #12
   2b5b8:	pop	{r4, r5, pc}
   2b5bc:	push	{r4, r5, lr}
   2b5c0:	sub	sp, sp, #52	; 0x34
   2b5c4:	add	r5, sp, #4
   2b5c8:	ldr	r4, [sp, #64]	; 0x40
   2b5cc:	mov	ip, #0
   2b5d0:	sub	r4, r4, #4
   2b5d4:	ldr	lr, [r4, #4]!
   2b5d8:	cmp	lr, #0
   2b5dc:	str	lr, [r5, #4]!
   2b5e0:	beq	2b5f0 <__assert_fail@plt+0x1a394>
   2b5e4:	add	ip, ip, #1
   2b5e8:	cmp	ip, #10
   2b5ec:	bne	2b5d4 <__assert_fail@plt+0x1a378>
   2b5f0:	add	lr, sp, #8
   2b5f4:	str	ip, [sp, #4]
   2b5f8:	str	lr, [sp]
   2b5fc:	bl	2b1e4 <__assert_fail@plt+0x19f88>
   2b600:	add	sp, sp, #52	; 0x34
   2b604:	pop	{r4, r5, pc}
   2b608:	push	{r3}		; (str r3, [sp, #-4]!)
   2b60c:	push	{r4, lr}
   2b610:	sub	sp, sp, #60	; 0x3c
   2b614:	add	lr, sp, #56	; 0x38
   2b618:	add	r3, sp, #72	; 0x48
   2b61c:	str	r3, [lr, #-44]!	; 0xffffffd4
   2b620:	add	r4, sp, #68	; 0x44
   2b624:	mov	r3, #0
   2b628:	ldr	ip, [r4, #4]!
   2b62c:	cmp	ip, #0
   2b630:	str	ip, [lr, #4]!
   2b634:	beq	2b644 <__assert_fail@plt+0x1a3e8>
   2b638:	add	r3, r3, #1
   2b63c:	cmp	r3, #10
   2b640:	bne	2b628 <__assert_fail@plt+0x1a3cc>
   2b644:	add	ip, sp, #16
   2b648:	str	r3, [sp, #4]
   2b64c:	str	ip, [sp]
   2b650:	ldr	r3, [sp, #68]	; 0x44
   2b654:	bl	2b1e4 <__assert_fail@plt+0x19f88>
   2b658:	add	sp, sp, #60	; 0x3c
   2b65c:	pop	{r4, lr}
   2b660:	add	sp, sp, #4
   2b664:	bx	lr
   2b668:	ldr	r3, [pc, #116]	; 2b6e4 <__assert_fail@plt+0x1a488>
   2b66c:	push	{r4, lr}
   2b670:	mov	r0, #10
   2b674:	ldr	r1, [r3]
   2b678:	bl	11040 <fputc_unlocked@plt>
   2b67c:	mov	r2, #5
   2b680:	ldr	r1, [pc, #96]	; 2b6e8 <__assert_fail@plt+0x1a48c>
   2b684:	mov	r0, #0
   2b688:	bl	1104c <dcgettext@plt>
   2b68c:	ldr	r2, [pc, #88]	; 2b6ec <__assert_fail@plt+0x1a490>
   2b690:	mov	r1, r0
   2b694:	mov	r0, #1
   2b698:	bl	111b4 <__printf_chk@plt>
   2b69c:	mov	r2, #5
   2b6a0:	ldr	r1, [pc, #72]	; 2b6f0 <__assert_fail@plt+0x1a494>
   2b6a4:	mov	r0, #0
   2b6a8:	bl	1104c <dcgettext@plt>
   2b6ac:	ldr	r3, [pc, #64]	; 2b6f4 <__assert_fail@plt+0x1a498>
   2b6b0:	ldr	r2, [pc, #64]	; 2b6f8 <__assert_fail@plt+0x1a49c>
   2b6b4:	mov	r1, r0
   2b6b8:	mov	r0, #1
   2b6bc:	bl	111b4 <__printf_chk@plt>
   2b6c0:	mov	r2, #5
   2b6c4:	ldr	r1, [pc, #48]	; 2b6fc <__assert_fail@plt+0x1a4a0>
   2b6c8:	mov	r0, #0
   2b6cc:	bl	1104c <dcgettext@plt>
   2b6d0:	ldr	r2, [pc, #40]	; 2b700 <__assert_fail@plt+0x1a4a4>
   2b6d4:	pop	{r4, lr}
   2b6d8:	mov	r1, r0
   2b6dc:	mov	r0, #1
   2b6e0:	b	111b4 <__printf_chk@plt>
   2b6e4:	andeq	pc, r3, ip, lsl #3
   2b6e8:	andeq	lr, r2, r4, ror #2
   2b6ec:	andeq	lr, r2, r8, ror r1
   2b6f0:	muleq	r2, r0, r1
   2b6f4:	andeq	sp, r2, r8, lsl #1
   2b6f8:	strheq	sp, [r2], -r0
   2b6fc:	andeq	lr, r2, r4, lsr #3
   2b700:	andeq	lr, r2, ip, asr #3
   2b704:	push	{r4, lr}
   2b708:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   2b70c:	cmp	r0, #0
   2b710:	popne	{r4, pc}
   2b714:	bl	2bc4c <__assert_fail@plt+0x1a9f0>
   2b718:	push	{r4, lr}
   2b71c:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   2b720:	cmp	r0, #0
   2b724:	popne	{r4, pc}
   2b728:	bl	2bc4c <__assert_fail@plt+0x1a9f0>
   2b72c:	push	{r4, lr}
   2b730:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   2b734:	cmp	r0, #0
   2b738:	popne	{r4, pc}
   2b73c:	bl	2bc4c <__assert_fail@plt+0x1a9f0>
   2b740:	push	{r4, r5, r6, lr}
   2b744:	mov	r5, r0
   2b748:	mov	r4, r1
   2b74c:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   2b750:	cmp	r0, #0
   2b754:	popne	{r4, r5, r6, pc}
   2b758:	adds	r4, r4, #0
   2b75c:	movne	r4, #1
   2b760:	cmp	r5, #0
   2b764:	orreq	r4, r4, #1
   2b768:	cmp	r4, #0
   2b76c:	popeq	{r4, r5, r6, pc}
   2b770:	bl	2bc4c <__assert_fail@plt+0x1a9f0>
   2b774:	push	{r4, lr}
   2b778:	cmp	r1, #0
   2b77c:	orreq	r1, r1, #1
   2b780:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   2b784:	cmp	r0, #0
   2b788:	popne	{r4, pc}
   2b78c:	bl	2bc4c <__assert_fail@plt+0x1a9f0>
   2b790:	push	{r4, r5, r6, lr}
   2b794:	mov	r6, r0
   2b798:	mov	r5, r1
   2b79c:	mov	r4, r2
   2b7a0:	bl	2c0d0 <__assert_fail@plt+0x1ae74>
   2b7a4:	cmp	r0, #0
   2b7a8:	popne	{r4, r5, r6, pc}
   2b7ac:	cmp	r6, #0
   2b7b0:	beq	2b7c0 <__assert_fail@plt+0x1a564>
   2b7b4:	cmp	r5, #0
   2b7b8:	cmpne	r4, #0
   2b7bc:	popeq	{r4, r5, r6, pc}
   2b7c0:	bl	2bc4c <__assert_fail@plt+0x1a9f0>
   2b7c4:	b	2b790 <__assert_fail@plt+0x1a534>
   2b7c8:	cmp	r2, #0
   2b7cc:	cmpne	r1, #0
   2b7d0:	moveq	r2, #1
   2b7d4:	moveq	r1, r2
   2b7d8:	push	{r4, lr}
   2b7dc:	bl	2c0d0 <__assert_fail@plt+0x1ae74>
   2b7e0:	cmp	r0, #0
   2b7e4:	popne	{r4, pc}
   2b7e8:	bl	2bc4c <__assert_fail@plt+0x1a9f0>
   2b7ec:	mov	r2, r1
   2b7f0:	mov	r1, r0
   2b7f4:	mov	r0, #0
   2b7f8:	b	2b790 <__assert_fail@plt+0x1a534>
   2b7fc:	mov	r2, r1
   2b800:	mov	r1, r0
   2b804:	mov	r0, #0
   2b808:	b	2b7c8 <__assert_fail@plt+0x1a56c>
   2b80c:	push	{r4, r5, r6, lr}
   2b810:	subs	r6, r0, #0
   2b814:	sub	sp, sp, #8
   2b818:	mov	r5, r1
   2b81c:	ldr	r4, [r1]
   2b820:	beq	2b85c <__assert_fail@plt+0x1a600>
   2b824:	lsr	r1, r4, #1
   2b828:	add	r3, r1, #1
   2b82c:	mvn	r3, r3
   2b830:	cmp	r4, r3
   2b834:	bhi	2b858 <__assert_fail@plt+0x1a5fc>
   2b838:	add	r4, r4, #1
   2b83c:	add	r4, r4, r1
   2b840:	mov	r0, r6
   2b844:	mov	r1, r4
   2b848:	bl	2b790 <__assert_fail@plt+0x1a534>
   2b84c:	str	r4, [r5]
   2b850:	add	sp, sp, #8
   2b854:	pop	{r4, r5, r6, pc}
   2b858:	bl	2bc4c <__assert_fail@plt+0x1a9f0>
   2b85c:	cmp	r4, #0
   2b860:	bne	2b840 <__assert_fail@plt+0x1a5e4>
   2b864:	mov	r1, r2
   2b868:	mov	r0, #64	; 0x40
   2b86c:	str	r2, [sp, #4]
   2b870:	bl	2c1b4 <__assert_fail@plt+0x1af58>
   2b874:	ldr	r2, [sp, #4]
   2b878:	cmp	r0, #0
   2b87c:	movne	r4, r0
   2b880:	addeq	r4, r0, #1
   2b884:	b	2b840 <__assert_fail@plt+0x1a5e4>
   2b888:	mov	r2, #1
   2b88c:	b	2b80c <__assert_fail@plt+0x1a5b0>
   2b890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b894:	sub	sp, sp, #12
   2b898:	ldr	r6, [r1]
   2b89c:	mov	sl, r1
   2b8a0:	mov	r9, r0
   2b8a4:	asrs	r4, r6, #1
   2b8a8:	mov	r5, r2
   2b8ac:	mov	fp, r3
   2b8b0:	ldr	r7, [sp, #48]	; 0x30
   2b8b4:	bmi	2ba20 <__assert_fail@plt+0x1a7c4>
   2b8b8:	mvn	r3, #-2147483648	; 0x80000000
   2b8bc:	sub	r3, r3, r4
   2b8c0:	cmp	r6, r3
   2b8c4:	movle	r3, #0
   2b8c8:	movgt	r3, #1
   2b8cc:	mvn	r8, fp
   2b8d0:	cmp	r3, #0
   2b8d4:	addeq	r4, r4, r6
   2b8d8:	mvnne	r4, #-2147483648	; 0x80000000
   2b8dc:	lsr	r8, r8, #31
   2b8e0:	cmp	fp, r4
   2b8e4:	movge	r3, #0
   2b8e8:	andlt	r3, r8, #1
   2b8ec:	cmp	r3, #0
   2b8f0:	beq	2b9d8 <__assert_fail@plt+0x1a77c>
   2b8f4:	cmp	r7, #0
   2b8f8:	blt	2baa8 <__assert_fail@plt+0x1a84c>
   2b8fc:	bne	2baa0 <__assert_fail@plt+0x1a844>
   2b900:	mov	r2, #64	; 0x40
   2b904:	mov	r1, r7
   2b908:	mov	r0, r2
   2b90c:	str	r2, [sp, #4]
   2b910:	bl	2c3c0 <__assert_fail@plt+0x1b164>
   2b914:	ldr	r2, [sp, #4]
   2b918:	mov	r1, r7
   2b91c:	mov	r4, r0
   2b920:	mov	r0, r2
   2b924:	bl	2c5e0 <__assert_fail@plt+0x1b384>
   2b928:	ldr	r2, [sp, #4]
   2b92c:	sub	r1, r2, r1
   2b930:	cmp	r9, #0
   2b934:	sub	r3, r4, r6
   2b938:	streq	r9, [sl]
   2b93c:	cmp	r3, r5
   2b940:	bge	2b9c4 <__assert_fail@plt+0x1a768>
   2b944:	cmp	r5, #0
   2b948:	blt	2ba34 <__assert_fail@plt+0x1a7d8>
   2b94c:	cmp	r6, #0
   2b950:	blt	2b970 <__assert_fail@plt+0x1a714>
   2b954:	mvn	r3, #-2147483648	; 0x80000000
   2b958:	sub	r3, r3, r5
   2b95c:	cmp	r6, r3
   2b960:	movle	r3, #0
   2b964:	movgt	r3, #1
   2b968:	cmp	r3, #0
   2b96c:	bne	2bb30 <__assert_fail@plt+0x1a8d4>
   2b970:	add	r5, r6, r5
   2b974:	cmp	fp, r5
   2b978:	movge	r8, #0
   2b97c:	andlt	r8, r8, #1
   2b980:	cmp	r8, #0
   2b984:	mov	r4, r5
   2b988:	bne	2bb30 <__assert_fail@plt+0x1a8d4>
   2b98c:	cmp	r7, #0
   2b990:	blt	2ba48 <__assert_fail@plt+0x1a7ec>
   2b994:	beq	2b9c0 <__assert_fail@plt+0x1a764>
   2b998:	cmp	r5, #0
   2b99c:	blt	2baf0 <__assert_fail@plt+0x1a894>
   2b9a0:	mov	r1, r7
   2b9a4:	mvn	r0, #-2147483648	; 0x80000000
   2b9a8:	bl	2c3c0 <__assert_fail@plt+0x1b164>
   2b9ac:	cmp	r5, r0
   2b9b0:	movle	r0, #0
   2b9b4:	movgt	r0, #1
   2b9b8:	cmp	r0, #0
   2b9bc:	bne	2bb30 <__assert_fail@plt+0x1a8d4>
   2b9c0:	mul	r1, r5, r7
   2b9c4:	mov	r0, r9
   2b9c8:	bl	2b740 <__assert_fail@plt+0x1a4e4>
   2b9cc:	str	r4, [sl]
   2b9d0:	add	sp, sp, #12
   2b9d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b9d8:	cmp	r7, #0
   2b9dc:	blt	2ba74 <__assert_fail@plt+0x1a818>
   2b9e0:	beq	2b900 <__assert_fail@plt+0x1a6a4>
   2b9e4:	cmp	r4, #0
   2b9e8:	blt	2bab0 <__assert_fail@plt+0x1a854>
   2b9ec:	mov	r1, r7
   2b9f0:	mvn	r0, #-2147483648	; 0x80000000
   2b9f4:	bl	2c3c0 <__assert_fail@plt+0x1b164>
   2b9f8:	cmp	r0, r4
   2b9fc:	movge	r0, #0
   2ba00:	movlt	r0, #1
   2ba04:	cmp	r0, #0
   2ba08:	mvnne	r2, #-2147483648	; 0x80000000
   2ba0c:	bne	2b904 <__assert_fail@plt+0x1a6a8>
   2ba10:	mul	r1, r7, r4
   2ba14:	cmp	r1, #63	; 0x3f
   2ba18:	bgt	2b930 <__assert_fail@plt+0x1a6d4>
   2ba1c:	b	2b900 <__assert_fail@plt+0x1a6a4>
   2ba20:	rsb	r3, r4, #-2147483648	; 0x80000000
   2ba24:	cmp	r6, r3
   2ba28:	movge	r3, #0
   2ba2c:	movlt	r3, #1
   2ba30:	b	2b8cc <__assert_fail@plt+0x1a670>
   2ba34:	rsb	r3, r5, #-2147483648	; 0x80000000
   2ba38:	cmp	r6, r3
   2ba3c:	movge	r3, #0
   2ba40:	movlt	r3, #1
   2ba44:	b	2b968 <__assert_fail@plt+0x1a70c>
   2ba48:	cmp	r5, #0
   2ba4c:	blt	2bad4 <__assert_fail@plt+0x1a878>
   2ba50:	cmn	r7, #1
   2ba54:	beq	2b9c0 <__assert_fail@plt+0x1a764>
   2ba58:	mov	r1, r7
   2ba5c:	mov	r0, #-2147483648	; 0x80000000
   2ba60:	bl	2c3c0 <__assert_fail@plt+0x1b164>
   2ba64:	cmp	r5, r0
   2ba68:	movle	r0, #0
   2ba6c:	movgt	r0, #1
   2ba70:	b	2b9b8 <__assert_fail@plt+0x1a75c>
   2ba74:	cmp	r4, #0
   2ba78:	blt	2bb14 <__assert_fail@plt+0x1a8b8>
   2ba7c:	cmn	r7, #1
   2ba80:	beq	2ba10 <__assert_fail@plt+0x1a7b4>
   2ba84:	mov	r1, r7
   2ba88:	mov	r0, #-2147483648	; 0x80000000
   2ba8c:	bl	2c3c0 <__assert_fail@plt+0x1b164>
   2ba90:	cmp	r0, r4
   2ba94:	movge	r0, #0
   2ba98:	movlt	r0, #1
   2ba9c:	b	2ba04 <__assert_fail@plt+0x1a7a8>
   2baa0:	mov	r4, fp
   2baa4:	b	2b9ec <__assert_fail@plt+0x1a790>
   2baa8:	mov	r4, fp
   2baac:	b	2ba7c <__assert_fail@plt+0x1a820>
   2bab0:	cmn	r4, #1
   2bab4:	beq	2ba10 <__assert_fail@plt+0x1a7b4>
   2bab8:	mov	r1, r4
   2babc:	mov	r0, #-2147483648	; 0x80000000
   2bac0:	bl	2c3c0 <__assert_fail@plt+0x1b164>
   2bac4:	cmp	r7, r0
   2bac8:	movle	r0, #0
   2bacc:	movgt	r0, #1
   2bad0:	b	2ba04 <__assert_fail@plt+0x1a7a8>
   2bad4:	mov	r1, r7
   2bad8:	mvn	r0, #-2147483648	; 0x80000000
   2badc:	bl	2c3c0 <__assert_fail@plt+0x1b164>
   2bae0:	cmp	r5, r0
   2bae4:	movge	r0, #0
   2bae8:	movlt	r0, #1
   2baec:	b	2b9b8 <__assert_fail@plt+0x1a75c>
   2baf0:	cmn	r5, #1
   2baf4:	beq	2b9c0 <__assert_fail@plt+0x1a764>
   2baf8:	mov	r1, r5
   2bafc:	mov	r0, #-2147483648	; 0x80000000
   2bb00:	bl	2c3c0 <__assert_fail@plt+0x1b164>
   2bb04:	cmp	r7, r0
   2bb08:	movle	r0, #0
   2bb0c:	movgt	r0, #1
   2bb10:	b	2b9b8 <__assert_fail@plt+0x1a75c>
   2bb14:	mov	r1, r7
   2bb18:	mvn	r0, #-2147483648	; 0x80000000
   2bb1c:	bl	2c3c0 <__assert_fail@plt+0x1b164>
   2bb20:	cmp	r0, r4
   2bb24:	movle	r0, #0
   2bb28:	movgt	r0, #1
   2bb2c:	b	2ba04 <__assert_fail@plt+0x1a7a8>
   2bb30:	bl	2bc4c <__assert_fail@plt+0x1a9f0>
   2bb34:	push	{r4, lr}
   2bb38:	mov	r1, #1
   2bb3c:	bl	2bc8c <__assert_fail@plt+0x1aa30>
   2bb40:	cmp	r0, #0
   2bb44:	popne	{r4, pc}
   2bb48:	bl	2bc4c <__assert_fail@plt+0x1a9f0>
   2bb4c:	push	{r4, lr}
   2bb50:	mov	r1, #1
   2bb54:	bl	2bc8c <__assert_fail@plt+0x1aa30>
   2bb58:	cmp	r0, #0
   2bb5c:	popne	{r4, pc}
   2bb60:	bl	2bc4c <__assert_fail@plt+0x1a9f0>
   2bb64:	push	{r4, lr}
   2bb68:	bl	2bc8c <__assert_fail@plt+0x1aa30>
   2bb6c:	cmp	r0, #0
   2bb70:	popne	{r4, pc}
   2bb74:	bl	2bc4c <__assert_fail@plt+0x1a9f0>
   2bb78:	push	{r4, lr}
   2bb7c:	bl	2bc8c <__assert_fail@plt+0x1aa30>
   2bb80:	cmp	r0, #0
   2bb84:	popne	{r4, pc}
   2bb88:	bl	2bc4c <__assert_fail@plt+0x1a9f0>
   2bb8c:	push	{r4, r5, r6, lr}
   2bb90:	mov	r6, r0
   2bb94:	mov	r0, r1
   2bb98:	mov	r4, r1
   2bb9c:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   2bba0:	subs	r5, r0, #0
   2bba4:	beq	2bbbc <__assert_fail@plt+0x1a960>
   2bba8:	mov	r2, r4
   2bbac:	mov	r1, r6
   2bbb0:	bl	11004 <memcpy@plt>
   2bbb4:	mov	r0, r5
   2bbb8:	pop	{r4, r5, r6, pc}
   2bbbc:	bl	2bc4c <__assert_fail@plt+0x1a9f0>
   2bbc0:	push	{r4, r5, r6, lr}
   2bbc4:	mov	r6, r0
   2bbc8:	mov	r0, r1
   2bbcc:	mov	r4, r1
   2bbd0:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   2bbd4:	subs	r5, r0, #0
   2bbd8:	beq	2bbf0 <__assert_fail@plt+0x1a994>
   2bbdc:	mov	r2, r4
   2bbe0:	mov	r1, r6
   2bbe4:	bl	11004 <memcpy@plt>
   2bbe8:	mov	r0, r5
   2bbec:	pop	{r4, r5, r6, pc}
   2bbf0:	bl	2bc4c <__assert_fail@plt+0x1a9f0>
   2bbf4:	push	{r4, r5, r6, lr}
   2bbf8:	mov	r6, r0
   2bbfc:	add	r0, r1, #1
   2bc00:	mov	r4, r1
   2bc04:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   2bc08:	subs	r5, r0, #0
   2bc0c:	beq	2bc2c <__assert_fail@plt+0x1a9d0>
   2bc10:	mov	r3, #0
   2bc14:	mov	r1, r6
   2bc18:	strb	r3, [r5, r4]
   2bc1c:	mov	r2, r4
   2bc20:	bl	11004 <memcpy@plt>
   2bc24:	mov	r0, r5
   2bc28:	pop	{r4, r5, r6, pc}
   2bc2c:	bl	2bc4c <__assert_fail@plt+0x1a9f0>
   2bc30:	push	{r4, lr}
   2bc34:	mov	r4, r0
   2bc38:	bl	11160 <strlen@plt>
   2bc3c:	add	r1, r0, #1
   2bc40:	mov	r0, r4
   2bc44:	pop	{r4, lr}
   2bc48:	b	2bb8c <__assert_fail@plt+0x1a930>
   2bc4c:	ldr	r3, [pc, #44]	; 2bc80 <__assert_fail@plt+0x1aa24>
   2bc50:	push	{r4, lr}
   2bc54:	mov	r2, #5
   2bc58:	ldr	r1, [pc, #36]	; 2bc84 <__assert_fail@plt+0x1aa28>
   2bc5c:	mov	r0, #0
   2bc60:	ldr	r4, [r3]
   2bc64:	bl	1104c <dcgettext@plt>
   2bc68:	ldr	r2, [pc, #24]	; 2bc88 <__assert_fail@plt+0x1aa2c>
   2bc6c:	mov	r1, #0
   2bc70:	mov	r3, r0
   2bc74:	mov	r0, r4
   2bc78:	bl	110c4 <error@plt>
   2bc7c:	bl	11250 <abort@plt>
   2bc80:	andeq	pc, r3, r4, lsr #2
   2bc84:	andeq	lr, r2, ip, lsl r2
   2bc88:	andeq	sp, r2, r4, ror #4
   2bc8c:	cmp	r1, #0
   2bc90:	cmpne	r0, #0
   2bc94:	moveq	r1, #1
   2bc98:	moveq	r0, r1
   2bc9c:	umull	r2, r3, r0, r1
   2bca0:	adds	r3, r3, #0
   2bca4:	movne	r3, #1
   2bca8:	cmp	r2, #0
   2bcac:	blt	2bcbc <__assert_fail@plt+0x1aa60>
   2bcb0:	cmp	r3, #0
   2bcb4:	bne	2bcbc <__assert_fail@plt+0x1aa60>
   2bcb8:	b	10f50 <calloc@plt>
   2bcbc:	push	{r4, lr}
   2bcc0:	bl	11178 <__errno_location@plt>
   2bcc4:	mov	r3, #12
   2bcc8:	str	r3, [r0]
   2bccc:	mov	r0, #0
   2bcd0:	pop	{r4, pc}
   2bcd4:	cmp	r0, #0
   2bcd8:	moveq	r0, #1
   2bcdc:	cmp	r0, #0
   2bce0:	blt	2bce8 <__assert_fail@plt+0x1aa8c>
   2bce4:	b	110e8 <malloc@plt>
   2bce8:	push	{r4, lr}
   2bcec:	bl	11178 <__errno_location@plt>
   2bcf0:	mov	r3, #12
   2bcf4:	str	r3, [r0]
   2bcf8:	mov	r0, #0
   2bcfc:	pop	{r4, pc}
   2bd00:	cmp	r0, #0
   2bd04:	beq	2bd28 <__assert_fail@plt+0x1aacc>
   2bd08:	cmp	r1, #0
   2bd0c:	push	{lr}		; (str lr, [sp, #-4]!)
   2bd10:	sub	sp, sp, #12
   2bd14:	beq	2bd30 <__assert_fail@plt+0x1aad4>
   2bd18:	blt	2bd48 <__assert_fail@plt+0x1aaec>
   2bd1c:	add	sp, sp, #12
   2bd20:	pop	{lr}		; (ldr lr, [sp], #4)
   2bd24:	b	11058 <realloc@plt>
   2bd28:	mov	r0, r1
   2bd2c:	b	2bcd4 <__assert_fail@plt+0x1aa78>
   2bd30:	str	r1, [sp, #4]
   2bd34:	bl	13098 <__assert_fail@plt+0x1e3c>
   2bd38:	ldr	r3, [sp, #4]
   2bd3c:	mov	r0, r3
   2bd40:	add	sp, sp, #12
   2bd44:	pop	{pc}		; (ldr pc, [sp], #4)
   2bd48:	bl	11178 <__errno_location@plt>
   2bd4c:	mov	r2, #12
   2bd50:	mov	r3, #0
   2bd54:	str	r2, [r0]
   2bd58:	b	2bd3c <__assert_fail@plt+0x1aae0>
   2bd5c:	push	{r4, r5, r6, lr}
   2bd60:	mov	r4, r0
   2bd64:	bl	110ac <__fpending@plt>
   2bd68:	ldr	r5, [r4]
   2bd6c:	and	r5, r5, #32
   2bd70:	mov	r6, r0
   2bd74:	mov	r0, r4
   2bd78:	bl	2bea0 <__assert_fail@plt+0x1ac44>
   2bd7c:	cmp	r5, #0
   2bd80:	mov	r4, r0
   2bd84:	bne	2bda4 <__assert_fail@plt+0x1ab48>
   2bd88:	cmp	r0, #0
   2bd8c:	beq	2bd9c <__assert_fail@plt+0x1ab40>
   2bd90:	cmp	r6, #0
   2bd94:	beq	2bdc0 <__assert_fail@plt+0x1ab64>
   2bd98:	mvn	r4, #0
   2bd9c:	mov	r0, r4
   2bda0:	pop	{r4, r5, r6, pc}
   2bda4:	cmp	r0, #0
   2bda8:	bne	2bd98 <__assert_fail@plt+0x1ab3c>
   2bdac:	bl	11178 <__errno_location@plt>
   2bdb0:	str	r4, [r0]
   2bdb4:	mvn	r4, #0
   2bdb8:	mov	r0, r4
   2bdbc:	pop	{r4, r5, r6, pc}
   2bdc0:	bl	11178 <__errno_location@plt>
   2bdc4:	ldr	r4, [r0]
   2bdc8:	subs	r4, r4, #9
   2bdcc:	mvnne	r4, #0
   2bdd0:	mov	r0, r4
   2bdd4:	pop	{r4, r5, r6, pc}
   2bdd8:	ldr	ip, [r0, #4]
   2bddc:	cmp	ip, r1
   2bde0:	bcs	2be5c <__assert_fail@plt+0x1ac00>
   2bde4:	cmp	r3, #0
   2bde8:	push	{r4, r5, r6, r7, r8, lr}
   2bdec:	mov	r6, r3
   2bdf0:	mov	r7, r2
   2bdf4:	mov	r5, r1
   2bdf8:	mov	r4, r0
   2bdfc:	bne	2be30 <__assert_fail@plt+0x1abd4>
   2be00:	ldr	r0, [r4, #8]
   2be04:	mul	r1, r6, r5
   2be08:	cmp	r0, r7
   2be0c:	beq	2be6c <__assert_fail@plt+0x1ac10>
   2be10:	bl	2bd00 <__assert_fail@plt+0x1aaa4>
   2be14:	subs	r7, r0, #0
   2be18:	beq	2be98 <__assert_fail@plt+0x1ac3c>
   2be1c:	mov	r3, #1
   2be20:	stmib	r4, {r5, r7}
   2be24:	str	r5, [r4]
   2be28:	mov	r0, r3
   2be2c:	pop	{r4, r5, r6, r7, r8, pc}
   2be30:	mov	r1, r3
   2be34:	mvn	r0, #0
   2be38:	bl	2c1b4 <__assert_fail@plt+0x1af58>
   2be3c:	cmp	r5, r0
   2be40:	bls	2be00 <__assert_fail@plt+0x1aba4>
   2be44:	bl	11178 <__errno_location@plt>
   2be48:	mov	r3, #0
   2be4c:	mov	r2, #12
   2be50:	str	r2, [r0]
   2be54:	mov	r0, r3
   2be58:	pop	{r4, r5, r6, r7, r8, pc}
   2be5c:	mov	r3, #1
   2be60:	str	r1, [r0]
   2be64:	mov	r0, r3
   2be68:	bx	lr
   2be6c:	mov	r0, r1
   2be70:	bl	2bcd4 <__assert_fail@plt+0x1aa78>
   2be74:	subs	r7, r0, #0
   2be78:	beq	2be98 <__assert_fail@plt+0x1ac3c>
   2be7c:	ldr	r1, [r4, #8]
   2be80:	cmp	r1, #0
   2be84:	beq	2be1c <__assert_fail@plt+0x1abc0>
   2be88:	ldr	r2, [r4]
   2be8c:	mul	r2, r2, r6
   2be90:	bl	11004 <memcpy@plt>
   2be94:	b	2be1c <__assert_fail@plt+0x1abc0>
   2be98:	mov	r3, #0
   2be9c:	b	2be28 <__assert_fail@plt+0x1abcc>
   2bea0:	push	{r4, r5, lr}
   2bea4:	sub	sp, sp, #12
   2bea8:	mov	r4, r0
   2beac:	bl	111c0 <fileno@plt>
   2beb0:	cmp	r0, #0
   2beb4:	mov	r0, r4
   2beb8:	blt	2bf34 <__assert_fail@plt+0x1acd8>
   2bebc:	bl	11100 <__freading@plt>
   2bec0:	cmp	r0, #0
   2bec4:	bne	2bf00 <__assert_fail@plt+0x1aca4>
   2bec8:	mov	r0, r4
   2becc:	bl	2bf40 <__assert_fail@plt+0x1ace4>
   2bed0:	cmp	r0, #0
   2bed4:	beq	2bf30 <__assert_fail@plt+0x1acd4>
   2bed8:	bl	11178 <__errno_location@plt>
   2bedc:	mov	r5, r0
   2bee0:	mov	r0, r4
   2bee4:	ldr	r4, [r5]
   2bee8:	bl	111e4 <fclose@plt>
   2beec:	cmp	r4, #0
   2bef0:	mvnne	r0, #0
   2bef4:	strne	r4, [r5]
   2bef8:	add	sp, sp, #12
   2befc:	pop	{r4, r5, pc}
   2bf00:	mov	r0, r4
   2bf04:	bl	111c0 <fileno@plt>
   2bf08:	mov	r3, #1
   2bf0c:	str	r3, [sp]
   2bf10:	mov	r2, #0
   2bf14:	mov	r3, #0
   2bf18:	bl	11094 <lseek64@plt>
   2bf1c:	mvn	r3, #0
   2bf20:	mvn	r2, #0
   2bf24:	cmp	r1, r3
   2bf28:	cmpeq	r0, r2
   2bf2c:	bne	2bec8 <__assert_fail@plt+0x1ac6c>
   2bf30:	mov	r0, r4
   2bf34:	add	sp, sp, #12
   2bf38:	pop	{r4, r5, lr}
   2bf3c:	b	111e4 <fclose@plt>
   2bf40:	push	{r4, lr}
   2bf44:	subs	r4, r0, #0
   2bf48:	sub	sp, sp, #8
   2bf4c:	beq	2bf68 <__assert_fail@plt+0x1ad0c>
   2bf50:	bl	11100 <__freading@plt>
   2bf54:	cmp	r0, #0
   2bf58:	beq	2bf68 <__assert_fail@plt+0x1ad0c>
   2bf5c:	ldr	r3, [r4]
   2bf60:	tst	r3, #256	; 0x100
   2bf64:	bne	2bf78 <__assert_fail@plt+0x1ad1c>
   2bf68:	mov	r0, r4
   2bf6c:	add	sp, sp, #8
   2bf70:	pop	{r4, lr}
   2bf74:	b	10fbc <fflush@plt>
   2bf78:	mov	r3, #1
   2bf7c:	str	r3, [sp]
   2bf80:	mov	r2, #0
   2bf84:	mov	r3, #0
   2bf88:	mov	r0, r4
   2bf8c:	bl	2bfa0 <__assert_fail@plt+0x1ad44>
   2bf90:	mov	r0, r4
   2bf94:	add	sp, sp, #8
   2bf98:	pop	{r4, lr}
   2bf9c:	b	10fbc <fflush@plt>
   2bfa0:	push	{r4, r5, r6, r7, r8, lr}
   2bfa4:	sub	sp, sp, #8
   2bfa8:	ldmib	r0, {ip, lr}
   2bfac:	mov	r4, r0
   2bfb0:	ldr	r5, [sp, #32]
   2bfb4:	cmp	lr, ip
   2bfb8:	beq	2bfd0 <__assert_fail@plt+0x1ad74>
   2bfbc:	str	r5, [sp, #32]
   2bfc0:	mov	r0, r4
   2bfc4:	add	sp, sp, #8
   2bfc8:	pop	{r4, r5, r6, r7, r8, lr}
   2bfcc:	b	111f0 <fseeko64@plt>
   2bfd0:	ldr	lr, [r0, #20]
   2bfd4:	ldr	ip, [r0, #16]
   2bfd8:	cmp	lr, ip
   2bfdc:	bne	2bfbc <__assert_fail@plt+0x1ad60>
   2bfe0:	ldr	r8, [r0, #36]	; 0x24
   2bfe4:	cmp	r8, #0
   2bfe8:	bne	2bfbc <__assert_fail@plt+0x1ad60>
   2bfec:	mov	r6, r2
   2bff0:	mov	r7, r3
   2bff4:	bl	111c0 <fileno@plt>
   2bff8:	mov	r2, r6
   2bffc:	mov	r3, r7
   2c000:	str	r5, [sp]
   2c004:	bl	11094 <lseek64@plt>
   2c008:	mvn	r3, #0
   2c00c:	mvn	r2, #0
   2c010:	cmp	r1, r3
   2c014:	cmpeq	r0, r2
   2c018:	beq	2c038 <__assert_fail@plt+0x1addc>
   2c01c:	ldr	r3, [r4]
   2c020:	strd	r0, [r4, #80]	; 0x50
   2c024:	mov	r0, r8
   2c028:	bic	r3, r3, #16
   2c02c:	str	r3, [r4]
   2c030:	add	sp, sp, #8
   2c034:	pop	{r4, r5, r6, r7, r8, pc}
   2c038:	mvn	r0, #0
   2c03c:	b	2c030 <__assert_fail@plt+0x1add4>
   2c040:	push	{lr}		; (str lr, [sp, #-4]!)
   2c044:	sub	sp, sp, #268	; 0x10c
   2c048:	add	r1, sp, #4
   2c04c:	ldr	r2, [pc, #60]	; 2c090 <__assert_fail@plt+0x1ae34>
   2c050:	bl	2c11c <__assert_fail@plt+0x1aec0>
   2c054:	cmp	r0, #0
   2c058:	movne	r0, #0
   2c05c:	bne	2c088 <__assert_fail@plt+0x1ae2c>
   2c060:	ldr	r1, [pc, #44]	; 2c094 <__assert_fail@plt+0x1ae38>
   2c064:	add	r0, sp, #4
   2c068:	bl	10f98 <strcmp@plt>
   2c06c:	cmp	r0, #0
   2c070:	beq	2c088 <__assert_fail@plt+0x1ae2c>
   2c074:	add	r0, sp, #4
   2c078:	ldr	r1, [pc, #24]	; 2c098 <__assert_fail@plt+0x1ae3c>
   2c07c:	bl	10f98 <strcmp@plt>
   2c080:	adds	r0, r0, #0
   2c084:	movne	r0, #1
   2c088:	add	sp, sp, #268	; 0x10c
   2c08c:	pop	{pc}		; (ldr pc, [sp], #4)
   2c090:	andeq	r0, r0, r1, lsl #2
   2c094:	andeq	lr, r2, r0, lsr r2
   2c098:	andeq	lr, r2, r4, lsr r2
   2c09c:	push	{r4, lr}
   2c0a0:	mov	r0, #14
   2c0a4:	bl	11220 <nl_langinfo@plt>
   2c0a8:	cmp	r0, #0
   2c0ac:	beq	2c0c4 <__assert_fail@plt+0x1ae68>
   2c0b0:	ldrb	r2, [r0]
   2c0b4:	ldr	r3, [pc, #16]	; 2c0cc <__assert_fail@plt+0x1ae70>
   2c0b8:	cmp	r2, #0
   2c0bc:	moveq	r0, r3
   2c0c0:	pop	{r4, pc}
   2c0c4:	ldr	r0, [pc]	; 2c0cc <__assert_fail@plt+0x1ae70>
   2c0c8:	pop	{r4, pc}
   2c0cc:	andeq	lr, r2, ip, lsr r2
   2c0d0:	push	{r4, r5, r6, lr}
   2c0d4:	subs	r4, r2, #0
   2c0d8:	mov	r6, r0
   2c0dc:	mov	r5, r1
   2c0e0:	beq	2c10c <__assert_fail@plt+0x1aeb0>
   2c0e4:	mov	r1, r4
   2c0e8:	mvn	r0, #0
   2c0ec:	bl	2c1b4 <__assert_fail@plt+0x1af58>
   2c0f0:	cmp	r0, r5
   2c0f4:	bcs	2c10c <__assert_fail@plt+0x1aeb0>
   2c0f8:	bl	11178 <__errno_location@plt>
   2c0fc:	mov	r3, #12
   2c100:	str	r3, [r0]
   2c104:	mov	r0, #0
   2c108:	pop	{r4, r5, r6, pc}
   2c10c:	mul	r1, r5, r4
   2c110:	mov	r0, r6
   2c114:	pop	{r4, r5, r6, lr}
   2c118:	b	2bd00 <__assert_fail@plt+0x1aaa4>
   2c11c:	push	{r4, r5, r6, lr}
   2c120:	mov	r5, r1
   2c124:	mov	r1, #0
   2c128:	mov	r4, r2
   2c12c:	bl	11208 <setlocale@plt>
   2c130:	subs	r6, r0, #0
   2c134:	beq	2c190 <__assert_fail@plt+0x1af34>
   2c138:	bl	11160 <strlen@plt>
   2c13c:	cmp	r4, r0
   2c140:	bhi	2c178 <__assert_fail@plt+0x1af1c>
   2c144:	cmp	r4, #0
   2c148:	bne	2c154 <__assert_fail@plt+0x1aef8>
   2c14c:	mov	r0, #34	; 0x22
   2c150:	pop	{r4, r5, r6, pc}
   2c154:	sub	r4, r4, #1
   2c158:	mov	r1, r6
   2c15c:	mov	r2, r4
   2c160:	mov	r0, r5
   2c164:	bl	11004 <memcpy@plt>
   2c168:	mov	r3, #0
   2c16c:	strb	r3, [r5, r4]
   2c170:	mov	r0, #34	; 0x22
   2c174:	pop	{r4, r5, r6, pc}
   2c178:	add	r2, r0, #1
   2c17c:	mov	r1, r6
   2c180:	mov	r0, r5
   2c184:	bl	11004 <memcpy@plt>
   2c188:	mov	r0, #0
   2c18c:	pop	{r4, r5, r6, pc}
   2c190:	cmp	r4, #0
   2c194:	beq	2c1a4 <__assert_fail@plt+0x1af48>
   2c198:	strb	r6, [r5]
   2c19c:	mov	r0, #22
   2c1a0:	pop	{r4, r5, r6, pc}
   2c1a4:	mov	r0, #22
   2c1a8:	pop	{r4, r5, r6, pc}
   2c1ac:	mov	r1, #0
   2c1b0:	b	11208 <setlocale@plt>
   2c1b4:	subs	r2, r1, #1
   2c1b8:	bxeq	lr
   2c1bc:	bcc	2c394 <__assert_fail@plt+0x1b138>
   2c1c0:	cmp	r0, r1
   2c1c4:	bls	2c378 <__assert_fail@plt+0x1b11c>
   2c1c8:	tst	r1, r2
   2c1cc:	beq	2c384 <__assert_fail@plt+0x1b128>
   2c1d0:	clz	r3, r0
   2c1d4:	clz	r2, r1
   2c1d8:	sub	r3, r2, r3
   2c1dc:	rsbs	r3, r3, #31
   2c1e0:	addne	r3, r3, r3, lsl #1
   2c1e4:	mov	r2, #0
   2c1e8:	addne	pc, pc, r3, lsl #2
   2c1ec:	nop			; (mov r0, r0)
   2c1f0:	cmp	r0, r1, lsl #31
   2c1f4:	adc	r2, r2, r2
   2c1f8:	subcs	r0, r0, r1, lsl #31
   2c1fc:	cmp	r0, r1, lsl #30
   2c200:	adc	r2, r2, r2
   2c204:	subcs	r0, r0, r1, lsl #30
   2c208:	cmp	r0, r1, lsl #29
   2c20c:	adc	r2, r2, r2
   2c210:	subcs	r0, r0, r1, lsl #29
   2c214:	cmp	r0, r1, lsl #28
   2c218:	adc	r2, r2, r2
   2c21c:	subcs	r0, r0, r1, lsl #28
   2c220:	cmp	r0, r1, lsl #27
   2c224:	adc	r2, r2, r2
   2c228:	subcs	r0, r0, r1, lsl #27
   2c22c:	cmp	r0, r1, lsl #26
   2c230:	adc	r2, r2, r2
   2c234:	subcs	r0, r0, r1, lsl #26
   2c238:	cmp	r0, r1, lsl #25
   2c23c:	adc	r2, r2, r2
   2c240:	subcs	r0, r0, r1, lsl #25
   2c244:	cmp	r0, r1, lsl #24
   2c248:	adc	r2, r2, r2
   2c24c:	subcs	r0, r0, r1, lsl #24
   2c250:	cmp	r0, r1, lsl #23
   2c254:	adc	r2, r2, r2
   2c258:	subcs	r0, r0, r1, lsl #23
   2c25c:	cmp	r0, r1, lsl #22
   2c260:	adc	r2, r2, r2
   2c264:	subcs	r0, r0, r1, lsl #22
   2c268:	cmp	r0, r1, lsl #21
   2c26c:	adc	r2, r2, r2
   2c270:	subcs	r0, r0, r1, lsl #21
   2c274:	cmp	r0, r1, lsl #20
   2c278:	adc	r2, r2, r2
   2c27c:	subcs	r0, r0, r1, lsl #20
   2c280:	cmp	r0, r1, lsl #19
   2c284:	adc	r2, r2, r2
   2c288:	subcs	r0, r0, r1, lsl #19
   2c28c:	cmp	r0, r1, lsl #18
   2c290:	adc	r2, r2, r2
   2c294:	subcs	r0, r0, r1, lsl #18
   2c298:	cmp	r0, r1, lsl #17
   2c29c:	adc	r2, r2, r2
   2c2a0:	subcs	r0, r0, r1, lsl #17
   2c2a4:	cmp	r0, r1, lsl #16
   2c2a8:	adc	r2, r2, r2
   2c2ac:	subcs	r0, r0, r1, lsl #16
   2c2b0:	cmp	r0, r1, lsl #15
   2c2b4:	adc	r2, r2, r2
   2c2b8:	subcs	r0, r0, r1, lsl #15
   2c2bc:	cmp	r0, r1, lsl #14
   2c2c0:	adc	r2, r2, r2
   2c2c4:	subcs	r0, r0, r1, lsl #14
   2c2c8:	cmp	r0, r1, lsl #13
   2c2cc:	adc	r2, r2, r2
   2c2d0:	subcs	r0, r0, r1, lsl #13
   2c2d4:	cmp	r0, r1, lsl #12
   2c2d8:	adc	r2, r2, r2
   2c2dc:	subcs	r0, r0, r1, lsl #12
   2c2e0:	cmp	r0, r1, lsl #11
   2c2e4:	adc	r2, r2, r2
   2c2e8:	subcs	r0, r0, r1, lsl #11
   2c2ec:	cmp	r0, r1, lsl #10
   2c2f0:	adc	r2, r2, r2
   2c2f4:	subcs	r0, r0, r1, lsl #10
   2c2f8:	cmp	r0, r1, lsl #9
   2c2fc:	adc	r2, r2, r2
   2c300:	subcs	r0, r0, r1, lsl #9
   2c304:	cmp	r0, r1, lsl #8
   2c308:	adc	r2, r2, r2
   2c30c:	subcs	r0, r0, r1, lsl #8
   2c310:	cmp	r0, r1, lsl #7
   2c314:	adc	r2, r2, r2
   2c318:	subcs	r0, r0, r1, lsl #7
   2c31c:	cmp	r0, r1, lsl #6
   2c320:	adc	r2, r2, r2
   2c324:	subcs	r0, r0, r1, lsl #6
   2c328:	cmp	r0, r1, lsl #5
   2c32c:	adc	r2, r2, r2
   2c330:	subcs	r0, r0, r1, lsl #5
   2c334:	cmp	r0, r1, lsl #4
   2c338:	adc	r2, r2, r2
   2c33c:	subcs	r0, r0, r1, lsl #4
   2c340:	cmp	r0, r1, lsl #3
   2c344:	adc	r2, r2, r2
   2c348:	subcs	r0, r0, r1, lsl #3
   2c34c:	cmp	r0, r1, lsl #2
   2c350:	adc	r2, r2, r2
   2c354:	subcs	r0, r0, r1, lsl #2
   2c358:	cmp	r0, r1, lsl #1
   2c35c:	adc	r2, r2, r2
   2c360:	subcs	r0, r0, r1, lsl #1
   2c364:	cmp	r0, r1
   2c368:	adc	r2, r2, r2
   2c36c:	subcs	r0, r0, r1
   2c370:	mov	r0, r2
   2c374:	bx	lr
   2c378:	moveq	r0, #1
   2c37c:	movne	r0, #0
   2c380:	bx	lr
   2c384:	clz	r2, r1
   2c388:	rsb	r2, r2, #31
   2c38c:	lsr	r0, r0, r2
   2c390:	bx	lr
   2c394:	cmp	r0, #0
   2c398:	mvnne	r0, #0
   2c39c:	b	2c600 <__assert_fail@plt+0x1b3a4>
   2c3a0:	cmp	r1, #0
   2c3a4:	beq	2c394 <__assert_fail@plt+0x1b138>
   2c3a8:	push	{r0, r1, lr}
   2c3ac:	bl	2c1b4 <__assert_fail@plt+0x1af58>
   2c3b0:	pop	{r1, r2, lr}
   2c3b4:	mul	r3, r2, r0
   2c3b8:	sub	r1, r1, r3
   2c3bc:	bx	lr
   2c3c0:	cmp	r1, #0
   2c3c4:	beq	2c5d0 <__assert_fail@plt+0x1b374>
   2c3c8:	eor	ip, r0, r1
   2c3cc:	rsbmi	r1, r1, #0
   2c3d0:	subs	r2, r1, #1
   2c3d4:	beq	2c59c <__assert_fail@plt+0x1b340>
   2c3d8:	movs	r3, r0
   2c3dc:	rsbmi	r3, r0, #0
   2c3e0:	cmp	r3, r1
   2c3e4:	bls	2c5a8 <__assert_fail@plt+0x1b34c>
   2c3e8:	tst	r1, r2
   2c3ec:	beq	2c5b8 <__assert_fail@plt+0x1b35c>
   2c3f0:	clz	r2, r3
   2c3f4:	clz	r0, r1
   2c3f8:	sub	r2, r0, r2
   2c3fc:	rsbs	r2, r2, #31
   2c400:	addne	r2, r2, r2, lsl #1
   2c404:	mov	r0, #0
   2c408:	addne	pc, pc, r2, lsl #2
   2c40c:	nop			; (mov r0, r0)
   2c410:	cmp	r3, r1, lsl #31
   2c414:	adc	r0, r0, r0
   2c418:	subcs	r3, r3, r1, lsl #31
   2c41c:	cmp	r3, r1, lsl #30
   2c420:	adc	r0, r0, r0
   2c424:	subcs	r3, r3, r1, lsl #30
   2c428:	cmp	r3, r1, lsl #29
   2c42c:	adc	r0, r0, r0
   2c430:	subcs	r3, r3, r1, lsl #29
   2c434:	cmp	r3, r1, lsl #28
   2c438:	adc	r0, r0, r0
   2c43c:	subcs	r3, r3, r1, lsl #28
   2c440:	cmp	r3, r1, lsl #27
   2c444:	adc	r0, r0, r0
   2c448:	subcs	r3, r3, r1, lsl #27
   2c44c:	cmp	r3, r1, lsl #26
   2c450:	adc	r0, r0, r0
   2c454:	subcs	r3, r3, r1, lsl #26
   2c458:	cmp	r3, r1, lsl #25
   2c45c:	adc	r0, r0, r0
   2c460:	subcs	r3, r3, r1, lsl #25
   2c464:	cmp	r3, r1, lsl #24
   2c468:	adc	r0, r0, r0
   2c46c:	subcs	r3, r3, r1, lsl #24
   2c470:	cmp	r3, r1, lsl #23
   2c474:	adc	r0, r0, r0
   2c478:	subcs	r3, r3, r1, lsl #23
   2c47c:	cmp	r3, r1, lsl #22
   2c480:	adc	r0, r0, r0
   2c484:	subcs	r3, r3, r1, lsl #22
   2c488:	cmp	r3, r1, lsl #21
   2c48c:	adc	r0, r0, r0
   2c490:	subcs	r3, r3, r1, lsl #21
   2c494:	cmp	r3, r1, lsl #20
   2c498:	adc	r0, r0, r0
   2c49c:	subcs	r3, r3, r1, lsl #20
   2c4a0:	cmp	r3, r1, lsl #19
   2c4a4:	adc	r0, r0, r0
   2c4a8:	subcs	r3, r3, r1, lsl #19
   2c4ac:	cmp	r3, r1, lsl #18
   2c4b0:	adc	r0, r0, r0
   2c4b4:	subcs	r3, r3, r1, lsl #18
   2c4b8:	cmp	r3, r1, lsl #17
   2c4bc:	adc	r0, r0, r0
   2c4c0:	subcs	r3, r3, r1, lsl #17
   2c4c4:	cmp	r3, r1, lsl #16
   2c4c8:	adc	r0, r0, r0
   2c4cc:	subcs	r3, r3, r1, lsl #16
   2c4d0:	cmp	r3, r1, lsl #15
   2c4d4:	adc	r0, r0, r0
   2c4d8:	subcs	r3, r3, r1, lsl #15
   2c4dc:	cmp	r3, r1, lsl #14
   2c4e0:	adc	r0, r0, r0
   2c4e4:	subcs	r3, r3, r1, lsl #14
   2c4e8:	cmp	r3, r1, lsl #13
   2c4ec:	adc	r0, r0, r0
   2c4f0:	subcs	r3, r3, r1, lsl #13
   2c4f4:	cmp	r3, r1, lsl #12
   2c4f8:	adc	r0, r0, r0
   2c4fc:	subcs	r3, r3, r1, lsl #12
   2c500:	cmp	r3, r1, lsl #11
   2c504:	adc	r0, r0, r0
   2c508:	subcs	r3, r3, r1, lsl #11
   2c50c:	cmp	r3, r1, lsl #10
   2c510:	adc	r0, r0, r0
   2c514:	subcs	r3, r3, r1, lsl #10
   2c518:	cmp	r3, r1, lsl #9
   2c51c:	adc	r0, r0, r0
   2c520:	subcs	r3, r3, r1, lsl #9
   2c524:	cmp	r3, r1, lsl #8
   2c528:	adc	r0, r0, r0
   2c52c:	subcs	r3, r3, r1, lsl #8
   2c530:	cmp	r3, r1, lsl #7
   2c534:	adc	r0, r0, r0
   2c538:	subcs	r3, r3, r1, lsl #7
   2c53c:	cmp	r3, r1, lsl #6
   2c540:	adc	r0, r0, r0
   2c544:	subcs	r3, r3, r1, lsl #6
   2c548:	cmp	r3, r1, lsl #5
   2c54c:	adc	r0, r0, r0
   2c550:	subcs	r3, r3, r1, lsl #5
   2c554:	cmp	r3, r1, lsl #4
   2c558:	adc	r0, r0, r0
   2c55c:	subcs	r3, r3, r1, lsl #4
   2c560:	cmp	r3, r1, lsl #3
   2c564:	adc	r0, r0, r0
   2c568:	subcs	r3, r3, r1, lsl #3
   2c56c:	cmp	r3, r1, lsl #2
   2c570:	adc	r0, r0, r0
   2c574:	subcs	r3, r3, r1, lsl #2
   2c578:	cmp	r3, r1, lsl #1
   2c57c:	adc	r0, r0, r0
   2c580:	subcs	r3, r3, r1, lsl #1
   2c584:	cmp	r3, r1
   2c588:	adc	r0, r0, r0
   2c58c:	subcs	r3, r3, r1
   2c590:	cmp	ip, #0
   2c594:	rsbmi	r0, r0, #0
   2c598:	bx	lr
   2c59c:	teq	ip, r0
   2c5a0:	rsbmi	r0, r0, #0
   2c5a4:	bx	lr
   2c5a8:	movcc	r0, #0
   2c5ac:	asreq	r0, ip, #31
   2c5b0:	orreq	r0, r0, #1
   2c5b4:	bx	lr
   2c5b8:	clz	r2, r1
   2c5bc:	rsb	r2, r2, #31
   2c5c0:	cmp	ip, #0
   2c5c4:	lsr	r0, r3, r2
   2c5c8:	rsbmi	r0, r0, #0
   2c5cc:	bx	lr
   2c5d0:	cmp	r0, #0
   2c5d4:	mvngt	r0, #-2147483648	; 0x80000000
   2c5d8:	movlt	r0, #-2147483648	; 0x80000000
   2c5dc:	b	2c600 <__assert_fail@plt+0x1b3a4>
   2c5e0:	cmp	r1, #0
   2c5e4:	beq	2c5d0 <__assert_fail@plt+0x1b374>
   2c5e8:	push	{r0, r1, lr}
   2c5ec:	bl	2c3c8 <__assert_fail@plt+0x1b16c>
   2c5f0:	pop	{r1, r2, lr}
   2c5f4:	mul	r3, r2, r0
   2c5f8:	sub	r1, r1, r3
   2c5fc:	bx	lr
   2c600:	push	{r1, lr}
   2c604:	mov	r0, #8
   2c608:	bl	10f74 <raise@plt>
   2c60c:	pop	{r1, pc}
   2c610:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c614:	mov	r7, r0
   2c618:	ldr	r6, [pc, #72]	; 2c668 <__assert_fail@plt+0x1b40c>
   2c61c:	ldr	r5, [pc, #72]	; 2c66c <__assert_fail@plt+0x1b410>
   2c620:	add	r6, pc, r6
   2c624:	add	r5, pc, r5
   2c628:	sub	r6, r6, r5
   2c62c:	mov	r8, r1
   2c630:	mov	r9, r2
   2c634:	bl	10f24 <pthread_mutex_unlock@plt-0x20>
   2c638:	asrs	r6, r6, #2
   2c63c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c640:	mov	r4, #0
   2c644:	add	r4, r4, #1
   2c648:	ldr	r3, [r5], #4
   2c64c:	mov	r2, r9
   2c650:	mov	r1, r8
   2c654:	mov	r0, r7
   2c658:	blx	r3
   2c65c:	cmp	r6, r4
   2c660:	bne	2c644 <__assert_fail@plt+0x1b3e8>
   2c664:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c668:	andeq	r2, r1, r8, ror #17
   2c66c:	andeq	r2, r1, r0, ror #17
   2c670:	bx	lr
   2c674:	ldr	r3, [pc, #12]	; 2c688 <__assert_fail@plt+0x1b42c>
   2c678:	mov	r1, #0
   2c67c:	add	r3, pc, r3
   2c680:	ldr	r2, [r3]
   2c684:	b	11190 <__cxa_atexit@plt>
   2c688:	muleq	r1, ip, sl

Disassembly of section .fini:

0002c68c <.fini>:
   2c68c:	push	{r3, lr}
   2c690:	pop	{r3, pc}
