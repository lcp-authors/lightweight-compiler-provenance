
../repos/coreutils/src/echo:     file format elf32-littlearm


Disassembly of section .init:

00010adc <.init>:
   10adc:	push	{r3, lr}
   10ae0:	bl	113cc <__assert_fail@plt+0x6c0>
   10ae4:	pop	{r3, pc}

Disassembly of section .plt:

00010ae8 <calloc@plt-0x14>:
   10ae8:	push	{lr}		; (str lr, [sp, #-4]!)
   10aec:	ldr	lr, [pc, #4]	; 10af8 <calloc@plt-0x4>
   10af0:	add	lr, pc, lr
   10af4:	ldr	pc, [lr, #8]!
   10af8:	andeq	r5, r1, r8, lsl #10

00010afc <calloc@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #86016	; 0x15000
   10b04:	ldr	pc, [ip, #1288]!	; 0x508

00010b08 <fputs_unlocked@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #86016	; 0x15000
   10b10:	ldr	pc, [ip, #1280]!	; 0x500

00010b14 <raise@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #86016	; 0x15000
   10b1c:	ldr	pc, [ip, #1272]!	; 0x4f8

00010b20 <strcmp@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #86016	; 0x15000
   10b28:	ldr	pc, [ip, #1264]!	; 0x4f0

00010b2c <fflush@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #86016	; 0x15000
   10b34:	ldr	pc, [ip, #1256]!	; 0x4e8

00010b38 <free@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #86016	; 0x15000
   10b40:	ldr	pc, [ip, #1248]!	; 0x4e0

00010b44 <_exit@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #86016	; 0x15000
   10b4c:	ldr	pc, [ip, #1240]!	; 0x4d8

00010b50 <memcpy@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #86016	; 0x15000
   10b58:	ldr	pc, [ip, #1232]!	; 0x4d0

00010b5c <mbsinit@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #86016	; 0x15000
   10b64:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b68 <memcmp@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #86016	; 0x15000
   10b70:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b74 <fputc_unlocked@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #86016	; 0x15000
   10b7c:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b80 <dcgettext@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #86016	; 0x15000
   10b88:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b8c <realloc@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #86016	; 0x15000
   10b94:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b98 <textdomain@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #86016	; 0x15000
   10ba0:	ldr	pc, [ip, #1184]!	; 0x4a0

00010ba4 <iswprint@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #86016	; 0x15000
   10bac:	ldr	pc, [ip, #1176]!	; 0x498

00010bb0 <fwrite@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #86016	; 0x15000
   10bb8:	ldr	pc, [ip, #1168]!	; 0x490

00010bbc <lseek64@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #86016	; 0x15000
   10bc4:	ldr	pc, [ip, #1160]!	; 0x488

00010bc8 <__ctype_get_mb_cur_max@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #86016	; 0x15000
   10bd0:	ldr	pc, [ip, #1152]!	; 0x480

00010bd4 <__fpending@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #86016	; 0x15000
   10bdc:	ldr	pc, [ip, #1144]!	; 0x478

00010be0 <mbrtowc@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #86016	; 0x15000
   10be8:	ldr	pc, [ip, #1136]!	; 0x470

00010bec <error@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #86016	; 0x15000
   10bf4:	ldr	pc, [ip, #1128]!	; 0x468

00010bf8 <getenv@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #86016	; 0x15000
   10c00:	ldr	pc, [ip, #1120]!	; 0x460

00010c04 <malloc@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #86016	; 0x15000
   10c0c:	ldr	pc, [ip, #1112]!	; 0x458

00010c10 <__libc_start_main@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #86016	; 0x15000
   10c18:	ldr	pc, [ip, #1104]!	; 0x450

00010c1c <__freading@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #86016	; 0x15000
   10c24:	ldr	pc, [ip, #1096]!	; 0x448

00010c28 <__gmon_start__@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #86016	; 0x15000
   10c30:	ldr	pc, [ip, #1088]!	; 0x440

00010c34 <__ctype_b_loc@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #86016	; 0x15000
   10c3c:	ldr	pc, [ip, #1080]!	; 0x438

00010c40 <exit@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #86016	; 0x15000
   10c48:	ldr	pc, [ip, #1072]!	; 0x430

00010c4c <strlen@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #86016	; 0x15000
   10c54:	ldr	pc, [ip, #1064]!	; 0x428

00010c58 <__errno_location@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #86016	; 0x15000
   10c60:	ldr	pc, [ip, #1056]!	; 0x420

00010c64 <__cxa_atexit@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #86016	; 0x15000
   10c6c:	ldr	pc, [ip, #1048]!	; 0x418

00010c70 <memset@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #86016	; 0x15000
   10c78:	ldr	pc, [ip, #1040]!	; 0x410

00010c7c <__printf_chk@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #86016	; 0x15000
   10c84:	ldr	pc, [ip, #1032]!	; 0x408

00010c88 <fileno@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #86016	; 0x15000
   10c90:	ldr	pc, [ip, #1024]!	; 0x400

00010c94 <__fprintf_chk@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #86016	; 0x15000
   10c9c:	ldr	pc, [ip, #1016]!	; 0x3f8

00010ca0 <fclose@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #86016	; 0x15000
   10ca8:	ldr	pc, [ip, #1008]!	; 0x3f0

00010cac <fseeko64@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #86016	; 0x15000
   10cb4:	ldr	pc, [ip, #1000]!	; 0x3e8

00010cb8 <__overflow@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #86016	; 0x15000
   10cc0:	ldr	pc, [ip, #992]!	; 0x3e0

00010cc4 <setlocale@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #86016	; 0x15000
   10ccc:	ldr	pc, [ip, #984]!	; 0x3d8

00010cd0 <strrchr@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #86016	; 0x15000
   10cd8:	ldr	pc, [ip, #976]!	; 0x3d0

00010cdc <nl_langinfo@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #86016	; 0x15000
   10ce4:	ldr	pc, [ip, #968]!	; 0x3c8

00010ce8 <bindtextdomain@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #86016	; 0x15000
   10cf0:	ldr	pc, [ip, #960]!	; 0x3c0

00010cf4 <strncmp@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #86016	; 0x15000
   10cfc:	ldr	pc, [ip, #952]!	; 0x3b8

00010d00 <abort@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #86016	; 0x15000
   10d08:	ldr	pc, [ip, #944]!	; 0x3b0

00010d0c <__assert_fail@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #86016	; 0x15000
   10d14:	ldr	pc, [ip, #936]!	; 0x3a8

Disassembly of section .text:

00010d18 <.text>:
   10d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d1c:	mov	r6, r0
   10d20:	sub	sp, sp, #28
   10d24:	ldr	r0, [pc, #1580]	; 11358 <__assert_fail@plt+0x64c>
   10d28:	mov	r8, r1
   10d2c:	bl	10bf8 <getenv@plt>
   10d30:	subs	r9, r0, #0
   10d34:	movne	r4, #1
   10d38:	moveq	r4, #0
   10d3c:	beq	10d5c <__assert_fail@plt+0x50>
   10d40:	cmp	r6, #1
   10d44:	ble	10fc0 <__assert_fail@plt+0x2b4>
   10d48:	ldr	r1, [pc, #1548]	; 1135c <__assert_fail@plt+0x650>
   10d4c:	ldr	r0, [r8, #4]
   10d50:	bl	10b20 <strcmp@plt>
   10d54:	cmp	r0, #0
   10d58:	bne	10fc0 <__assert_fail@plt+0x2b4>
   10d5c:	ldr	r0, [r8]
   10d60:	bl	119fc <__assert_fail@plt+0xcf0>
   10d64:	ldr	r1, [pc, #1524]	; 11360 <__assert_fail@plt+0x654>
   10d68:	mov	r0, #6
   10d6c:	bl	10cc4 <setlocale@plt>
   10d70:	ldr	r1, [pc, #1516]	; 11364 <__assert_fail@plt+0x658>
   10d74:	ldr	r0, [pc, #1516]	; 11368 <__assert_fail@plt+0x65c>
   10d78:	bl	10ce8 <bindtextdomain@plt>
   10d7c:	ldr	r0, [pc, #1508]	; 11368 <__assert_fail@plt+0x65c>
   10d80:	bl	10b98 <textdomain@plt>
   10d84:	ldr	r0, [pc, #1504]	; 1136c <__assert_fail@plt+0x660>
   10d88:	bl	14d48 <__assert_fail@plt+0x403c>
   10d8c:	cmp	r6, #2
   10d90:	bne	11310 <__assert_fail@plt+0x604>
   10d94:	ldr	r5, [r8, #4]
   10d98:	ldr	r1, [pc, #1488]	; 11370 <__assert_fail@plt+0x664>
   10d9c:	mov	r0, r5
   10da0:	bl	10b20 <strcmp@plt>
   10da4:	cmp	r0, #0
   10da8:	beq	11354 <__assert_fail@plt+0x648>
   10dac:	ldr	r1, [pc, #1472]	; 11374 <__assert_fail@plt+0x668>
   10db0:	mov	r0, r5
   10db4:	bl	10b20 <strcmp@plt>
   10db8:	cmp	r0, #0
   10dbc:	addne	r7, r8, #4
   10dc0:	movne	r6, #1
   10dc4:	beq	11014 <__assert_fail@plt+0x308>
   10dc8:	ldrb	r3, [r5]
   10dcc:	mov	r0, r5
   10dd0:	cmp	r3, #45	; 0x2d
   10dd4:	bne	11344 <__assert_fail@plt+0x638>
   10dd8:	mov	r1, #0
   10ddc:	mov	ip, r1
   10de0:	mov	r9, #1
   10de4:	ldrb	r3, [r0, #1]
   10de8:	add	r2, r0, #1
   10dec:	cmp	r3, #0
   10df0:	beq	10e0c <__assert_fail@plt+0x100>
   10df4:	cmp	r3, #101	; 0x65
   10df8:	beq	111d0 <__assert_fail@plt+0x4c4>
   10dfc:	cmp	r3, #110	; 0x6e
   10e00:	beq	111d0 <__assert_fail@plt+0x4c4>
   10e04:	cmp	r3, #69	; 0x45
   10e08:	beq	111d0 <__assert_fail@plt+0x4c4>
   10e0c:	orr	r1, r4, r1
   10e10:	tst	r1, #255	; 0xff
   10e14:	beq	11180 <__assert_fail@plt+0x474>
   10e18:	ldr	fp, [pc, #1368]	; 11378 <__assert_fail@plt+0x66c>
   10e1c:	sub	r7, r7, #4
   10e20:	str	r9, [sp, #20]
   10e24:	ldr	r1, [r7, #4]!
   10e28:	mov	r4, #7
   10e2c:	mov	r8, #0
   10e30:	mov	r5, #11
   10e34:	mov	sl, r1
   10e38:	b	10e64 <__assert_fail@plt+0x158>
   10e3c:	mov	r1, r3
   10e40:	ldr	r0, [fp]
   10e44:	ldr	r2, [r0, #20]
   10e48:	ldr	ip, [r0, #24]
   10e4c:	cmp	r2, ip
   10e50:	addcc	r1, r2, #1
   10e54:	strcc	r1, [r0, #20]
   10e58:	strbcc	r3, [r2]
   10e5c:	bcs	11244 <__assert_fail@plt+0x538>
   10e60:	mov	sl, r9
   10e64:	ldrb	r3, [sl]
   10e68:	add	r9, sl, #1
   10e6c:	cmp	r3, #0
   10e70:	beq	1124c <__assert_fail@plt+0x540>
   10e74:	cmp	r3, #92	; 0x5c
   10e78:	bne	10e3c <__assert_fail@plt+0x130>
   10e7c:	ldrb	r2, [sl, #1]
   10e80:	cmp	r2, #0
   10e84:	beq	10e3c <__assert_fail@plt+0x130>
   10e88:	sub	r3, r2, #48	; 0x30
   10e8c:	add	r9, sl, #2
   10e90:	cmp	r3, #72	; 0x48
   10e94:	ldrls	pc, [pc, r3, lsl #2]
   10e98:	b	11108 <__assert_fail@plt+0x3fc>
   10e9c:	andeq	r1, r1, r4, asr #1
   10ea0:	andeq	r1, r1, ip, asr r0
   10ea4:	andeq	r1, r1, ip, asr r0
   10ea8:	andeq	r1, r1, ip, asr r0
   10eac:	andeq	r1, r1, ip, asr r0
   10eb0:	andeq	r1, r1, ip, asr r0
   10eb4:	andeq	r1, r1, ip, asr r0
   10eb8:	andeq	r1, r1, ip, asr r0
   10ebc:	andeq	r1, r1, r8, lsl #2
   10ec0:	andeq	r1, r1, r8, lsl #2
   10ec4:	andeq	r1, r1, r8, lsl #2
   10ec8:	andeq	r1, r1, r8, lsl #2
   10ecc:	andeq	r1, r1, r8, lsl #2
   10ed0:	andeq	r1, r1, r8, lsl #2
   10ed4:	andeq	r1, r1, r8, lsl #2
   10ed8:	andeq	r1, r1, r8, lsl #2
   10edc:	andeq	r1, r1, r8, lsl #2
   10ee0:	andeq	r1, r1, r8, lsl #2
   10ee4:	andeq	r1, r1, r8, lsl #2
   10ee8:	andeq	r1, r1, r8, lsl #2
   10eec:	andeq	r1, r1, r8, lsl #2
   10ef0:	andeq	r1, r1, r8, lsl #2
   10ef4:	andeq	r1, r1, r8, lsl #2
   10ef8:	andeq	r1, r1, r8, lsl #2
   10efc:	andeq	r1, r1, r8, lsl #2
   10f00:	andeq	r1, r1, r8, lsl #2
   10f04:	andeq	r1, r1, r8, lsl #2
   10f08:	andeq	r1, r1, r8, lsl #2
   10f0c:	andeq	r1, r1, r8, lsl #2
   10f10:	andeq	r1, r1, r8, lsl #2
   10f14:	andeq	r1, r1, r8, lsl #2
   10f18:	andeq	r1, r1, r8, lsl #2
   10f1c:	andeq	r1, r1, r8, lsl #2
   10f20:	andeq	r1, r1, r8, lsl #2
   10f24:	andeq	r1, r1, r8, lsl #2
   10f28:	andeq	r1, r1, r8, lsl #2
   10f2c:	andeq	r1, r1, r8, lsl #2
   10f30:	andeq	r1, r1, r8, lsl #2
   10f34:	andeq	r1, r1, r8, lsl #2
   10f38:	andeq	r1, r1, r8, lsl #2
   10f3c:	andeq	r1, r1, r8, lsl #2
   10f40:	andeq	r1, r1, r8, lsl #2
   10f44:	andeq	r1, r1, r8, lsl #2
   10f48:	andeq	r1, r1, r8, lsl #2
   10f4c:	strheq	r1, [r1], -r8
   10f50:	andeq	r1, r1, r8, lsl #2
   10f54:	andeq	r1, r1, r8, lsl #2
   10f58:	andeq	r1, r1, r8, lsl #2
   10f5c:	andeq	r1, r1, r8, lsl #2
   10f60:	andeq	r1, r1, r0, asr r0
   10f64:	andeq	r1, r1, ip, lsr #1
   10f68:	andeq	r1, r1, r4, asr #32
   10f6c:	andeq	r1, r1, r8, lsl #2
   10f70:	andeq	r1, r1, r4, ror r1
   10f74:	andeq	r1, r1, r8, ror #2
   10f78:	andeq	r1, r1, r8, lsl #2
   10f7c:	andeq	r1, r1, r8, lsl #2
   10f80:	andeq	r1, r1, r8, lsl #2
   10f84:	andeq	r1, r1, r8, lsl #2
   10f88:	andeq	r1, r1, r8, lsl #2
   10f8c:	andeq	r1, r1, r8, lsl #2
   10f90:	andeq	r1, r1, r8, lsl #2
   10f94:	andeq	r1, r1, ip, asr r1
   10f98:	andeq	r1, r1, r8, lsl #2
   10f9c:	andeq	r1, r1, r8, lsl #2
   10fa0:	andeq	r1, r1, r8, lsl #2
   10fa4:	andeq	r1, r1, r0, asr r1
   10fa8:	andeq	r1, r1, r8, lsl #2
   10fac:	andeq	r1, r1, r4, asr #2
   10fb0:	andeq	r1, r1, r8, lsl #2
   10fb4:	andeq	r1, r1, r8, lsr r1
   10fb8:	andeq	r1, r1, r8, lsl #2
   10fbc:	andeq	r1, r1, r4, ror #1
   10fc0:	mov	r7, r8
   10fc4:	sub	r6, r6, #1
   10fc8:	ldr	r0, [r7], #4
   10fcc:	bl	119fc <__assert_fail@plt+0xcf0>
   10fd0:	ldr	r1, [pc, #904]	; 11360 <__assert_fail@plt+0x654>
   10fd4:	mov	r0, #6
   10fd8:	bl	10cc4 <setlocale@plt>
   10fdc:	ldr	r1, [pc, #896]	; 11364 <__assert_fail@plt+0x658>
   10fe0:	ldr	r0, [pc, #896]	; 11368 <__assert_fail@plt+0x65c>
   10fe4:	bl	10ce8 <bindtextdomain@plt>
   10fe8:	ldr	r0, [pc, #888]	; 11368 <__assert_fail@plt+0x65c>
   10fec:	bl	10b98 <textdomain@plt>
   10ff0:	ldr	r0, [pc, #884]	; 1136c <__assert_fail@plt+0x660>
   10ff4:	bl	14d48 <__assert_fail@plt+0x403c>
   10ff8:	cmp	r9, #0
   10ffc:	moveq	r9, #1
   11000:	beq	11180 <__assert_fail@plt+0x474>
   11004:	cmp	r6, #0
   11008:	ble	11290 <__assert_fail@plt+0x584>
   1100c:	mov	r9, #1
   11010:	b	10e18 <__assert_fail@plt+0x10c>
   11014:	ldr	r3, [pc, #864]	; 1137c <__assert_fail@plt+0x670>
   11018:	ldr	ip, [pc, #856]	; 11378 <__assert_fail@plt+0x66c>
   1101c:	ldr	r1, [pc, #860]	; 11380 <__assert_fail@plt+0x674>
   11020:	ldr	r2, [pc, #860]	; 11384 <__assert_fail@plt+0x678>
   11024:	str	r0, [sp, #8]
   11028:	ldr	r3, [r3]
   1102c:	ldr	r0, [ip]
   11030:	str	r1, [sp, #4]
   11034:	str	r2, [sp]
   11038:	ldr	r1, [pc, #840]	; 11388 <__assert_fail@plt+0x67c>
   1103c:	ldr	r2, [pc, #840]	; 1138c <__assert_fail@plt+0x680>
   11040:	bl	13cf8 <__assert_fail@plt+0x2fec>
   11044:	mov	r0, #0
   11048:	add	sp, sp, #28
   1104c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11050:	mov	r1, r4
   11054:	mov	r3, r4
   11058:	b	10e40 <__assert_fail@plt+0x134>
   1105c:	mov	r1, r2
   11060:	ldrb	r3, [r9]
   11064:	sub	r1, r1, #48	; 0x30
   11068:	sub	r2, r3, #48	; 0x30
   1106c:	uxtb	r3, r1
   11070:	uxtb	r2, r2
   11074:	cmp	r2, #7
   11078:	bhi	10e3c <__assert_fail@plt+0x130>
   1107c:	ldrb	r1, [r9, #1]
   11080:	add	r3, r2, r3, lsl #3
   11084:	and	r3, r3, #255	; 0xff
   11088:	sub	r2, r1, #48	; 0x30
   1108c:	uxtb	r2, r2
   11090:	cmp	r2, #7
   11094:	addls	r3, r2, r3, lsl #3
   11098:	andls	r3, r3, #255	; 0xff
   1109c:	addhi	r9, r9, #1
   110a0:	addls	r9, r9, #2
   110a4:	mov	r1, r3
   110a8:	b	10e40 <__assert_fail@plt+0x134>
   110ac:	mov	r1, #8
   110b0:	mov	r3, r1
   110b4:	b	10e40 <__assert_fail@plt+0x134>
   110b8:	mov	r1, #92	; 0x5c
   110bc:	mov	r3, r1
   110c0:	b	10e40 <__assert_fail@plt+0x134>
   110c4:	ldrb	r1, [sl, #2]
   110c8:	sub	r3, r1, #48	; 0x30
   110cc:	cmp	r3, #7
   110d0:	addls	r9, sl, #3
   110d4:	bls	11060 <__assert_fail@plt+0x354>
   110d8:	mov	r1, r8
   110dc:	mov	r3, r8
   110e0:	b	10e40 <__assert_fail@plt+0x134>
   110e4:	str	r2, [sp, #16]
   110e8:	bl	10c34 <__ctype_b_loc@plt>
   110ec:	ldrb	r3, [sl, #2]
   110f0:	ldr	r2, [sp, #16]
   110f4:	lsl	ip, r3, #1
   110f8:	ldr	r1, [r0]
   110fc:	ldrh	r0, [r1, ip]
   11100:	tst	r0, #4096	; 0x1000
   11104:	bne	112c4 <__assert_fail@plt+0x5b8>
   11108:	ldr	r0, [fp]
   1110c:	ldr	ip, [r0, #20]
   11110:	ldr	r3, [r0, #24]
   11114:	cmp	r3, ip
   11118:	bls	11328 <__assert_fail@plt+0x61c>
   1111c:	mov	r1, r2
   11120:	add	r3, ip, #1
   11124:	mov	r2, #92	; 0x5c
   11128:	str	r3, [r0, #20]
   1112c:	mov	r3, r1
   11130:	strb	r2, [ip]
   11134:	b	10e40 <__assert_fail@plt+0x134>
   11138:	mov	r1, r5
   1113c:	mov	r3, #11
   11140:	b	10e40 <__assert_fail@plt+0x134>
   11144:	mov	r1, #9
   11148:	mov	r3, r1
   1114c:	b	10e40 <__assert_fail@plt+0x134>
   11150:	mov	r1, #13
   11154:	mov	r3, r1
   11158:	b	10e40 <__assert_fail@plt+0x134>
   1115c:	mov	r1, #10
   11160:	mov	r3, r1
   11164:	b	10e40 <__assert_fail@plt+0x134>
   11168:	mov	r1, #12
   1116c:	mov	r3, r1
   11170:	b	10e40 <__assert_fail@plt+0x134>
   11174:	mov	r1, #27
   11178:	mov	r3, r1
   1117c:	b	10e40 <__assert_fail@plt+0x134>
   11180:	cmp	r6, #0
   11184:	ble	11288 <__assert_fail@plt+0x57c>
   11188:	ldr	r4, [pc, #488]	; 11378 <__assert_fail@plt+0x66c>
   1118c:	mov	r5, #32
   11190:	ldr	r1, [r4]
   11194:	ldr	r0, [r7], #4
   11198:	bl	10b08 <fputs_unlocked@plt>
   1119c:	subs	r6, r6, #1
   111a0:	beq	11288 <__assert_fail@plt+0x57c>
   111a4:	ldr	r0, [r4]
   111a8:	ldr	r3, [r0, #20]
   111ac:	ldr	r2, [r0, #24]
   111b0:	cmp	r3, r2
   111b4:	addcc	r2, r3, #1
   111b8:	strcc	r2, [r0, #20]
   111bc:	strbcc	r5, [r3]
   111c0:	bcc	11190 <__assert_fail@plt+0x484>
   111c4:	mov	r1, r5
   111c8:	bl	10cb8 <__overflow@plt>
   111cc:	b	11190 <__assert_fail@plt+0x484>
   111d0:	ldrb	r3, [r2, #1]!
   111d4:	cmp	r3, #0
   111d8:	bne	10df4 <__assert_fail@plt+0xe8>
   111dc:	mov	r2, r0
   111e0:	ldrb	r3, [r2, #1]!
   111e4:	cmp	r3, #0
   111e8:	beq	11218 <__assert_fail@plt+0x50c>
   111ec:	cmp	r3, #101	; 0x65
   111f0:	moveq	r1, #1
   111f4:	beq	111e0 <__assert_fail@plt+0x4d4>
   111f8:	cmp	r3, #110	; 0x6e
   111fc:	moveq	r9, ip
   11200:	beq	111e0 <__assert_fail@plt+0x4d4>
   11204:	cmp	r3, #69	; 0x45
   11208:	ldrb	r3, [r2, #1]!
   1120c:	moveq	r1, #0
   11210:	cmp	r3, #0
   11214:	bne	111ec <__assert_fail@plt+0x4e0>
   11218:	subs	r6, r6, #1
   1121c:	add	r7, r7, #4
   11220:	beq	11288 <__assert_fail@plt+0x57c>
   11224:	ldr	r0, [r7]
   11228:	ldrb	r3, [r0]
   1122c:	cmp	r3, #45	; 0x2d
   11230:	beq	10de4 <__assert_fail@plt+0xd8>
   11234:	orr	r1, r1, r4
   11238:	tst	r1, #255	; 0xff
   1123c:	beq	11188 <__assert_fail@plt+0x47c>
   11240:	b	10e18 <__assert_fail@plt+0x10c>
   11244:	bl	10cb8 <__overflow@plt>
   11248:	b	10e60 <__assert_fail@plt+0x154>
   1124c:	subs	r6, r6, #1
   11250:	beq	11284 <__assert_fail@plt+0x578>
   11254:	ldr	r0, [fp]
   11258:	ldr	r3, [r0, #20]
   1125c:	ldr	r2, [r0, #24]
   11260:	cmp	r3, r2
   11264:	addcc	r1, r3, #1
   11268:	movcc	r2, #32
   1126c:	strcc	r1, [r0, #20]
   11270:	strbcc	r2, [r3]
   11274:	bcc	10e24 <__assert_fail@plt+0x118>
   11278:	mov	r1, #32
   1127c:	bl	10cb8 <__overflow@plt>
   11280:	b	10e24 <__assert_fail@plt+0x118>
   11284:	ldr	r9, [sp, #20]
   11288:	cmp	r9, #0
   1128c:	beq	11044 <__assert_fail@plt+0x338>
   11290:	ldr	r3, [pc, #224]	; 11378 <__assert_fail@plt+0x66c>
   11294:	ldr	r0, [r3]
   11298:	ldr	r3, [r0, #20]
   1129c:	ldr	r2, [r0, #24]
   112a0:	cmp	r3, r2
   112a4:	addcc	r1, r3, #1
   112a8:	movcc	r2, #10
   112ac:	strcc	r1, [r0, #20]
   112b0:	strbcc	r2, [r3]
   112b4:	bcc	11044 <__assert_fail@plt+0x338>
   112b8:	mov	r1, #10
   112bc:	bl	10cb8 <__overflow@plt>
   112c0:	b	11044 <__assert_fail@plt+0x338>
   112c4:	mov	r0, r3
   112c8:	bl	114b8 <__assert_fail@plt+0x7ac>
   112cc:	ldrb	r2, [sl, #3]
   112d0:	lsl	r3, r2, #1
   112d4:	ldrh	r3, [r1, r3]
   112d8:	tst	r3, #4096	; 0x1000
   112dc:	uxtb	r3, r0
   112e0:	addeq	r9, sl, #3
   112e4:	moveq	r1, r3
   112e8:	beq	10e40 <__assert_fail@plt+0x134>
   112ec:	lsl	r3, r3, #4
   112f0:	mov	r0, r2
   112f4:	uxtb	r2, r3
   112f8:	bl	114b8 <__assert_fail@plt+0x7ac>
   112fc:	add	r9, sl, #4
   11300:	add	r3, r2, r0
   11304:	uxtb	r3, r3
   11308:	mov	r1, r3
   1130c:	b	10e40 <__assert_fail@plt+0x134>
   11310:	sub	r6, r6, #1
   11314:	cmp	r6, #0
   11318:	add	r7, r8, #4
   1131c:	ldrgt	r5, [r8, #4]
   11320:	ble	11290 <__assert_fail@plt+0x584>
   11324:	b	10dc8 <__assert_fail@plt+0xbc>
   11328:	mov	r1, #92	; 0x5c
   1132c:	str	r2, [sp, #16]
   11330:	bl	10cb8 <__overflow@plt>
   11334:	ldr	r2, [sp, #16]
   11338:	mov	r1, r2
   1133c:	mov	r3, r2
   11340:	b	10e40 <__assert_fail@plt+0x134>
   11344:	cmp	r9, #0
   11348:	moveq	r9, #1
   1134c:	bne	1100c <__assert_fail@plt+0x300>
   11350:	b	11188 <__assert_fail@plt+0x47c>
   11354:	bl	11598 <__assert_fail@plt+0x88c>
   11358:	andeq	r5, r1, r4, lsl r3
   1135c:	andeq	r5, r1, r4, lsr #6
   11360:	andeq	r5, r1, r4, lsr #4
   11364:	andeq	r5, r1, r8, lsr #6
   11368:	andeq	r5, r1, ip, ror #4
   1136c:	andeq	r1, r1, r8, lsl r9
   11370:	andeq	r5, r1, r0, asr #6
   11374:	andeq	r5, r1, r8, asr #6
   11378:	andeq	r6, r2, r4, lsr #2
   1137c:	andeq	r6, r2, ip, asr #1
   11380:	andeq	r5, r1, r4, asr r3
   11384:	andeq	r5, r1, r0, ror #6
   11388:	andeq	r4, r1, ip, lsr #27
   1138c:	andeq	r5, r1, r8, ror #4
   11390:	mov	fp, #0
   11394:	mov	lr, #0
   11398:	pop	{r1}		; (ldr r1, [sp], #4)
   1139c:	mov	r2, sp
   113a0:	push	{r2}		; (str r2, [sp, #-4]!)
   113a4:	push	{r0}		; (str r0, [sp, #-4]!)
   113a8:	ldr	ip, [pc, #16]	; 113c0 <__assert_fail@plt+0x6b4>
   113ac:	push	{ip}		; (str ip, [sp, #-4]!)
   113b0:	ldr	r0, [pc, #12]	; 113c4 <__assert_fail@plt+0x6b8>
   113b4:	ldr	r3, [pc, #12]	; 113c8 <__assert_fail@plt+0x6bc>
   113b8:	bl	10c10 <__libc_start_main@plt>
   113bc:	bl	10d00 <abort@plt>
   113c0:	andeq	r4, r1, r4, asr #26
   113c4:	andeq	r0, r1, r8, lsl sp
   113c8:	andeq	r4, r1, r4, ror #25
   113cc:	ldr	r3, [pc, #20]	; 113e8 <__assert_fail@plt+0x6dc>
   113d0:	ldr	r2, [pc, #20]	; 113ec <__assert_fail@plt+0x6e0>
   113d4:	add	r3, pc, r3
   113d8:	ldr	r2, [r3, r2]
   113dc:	cmp	r2, #0
   113e0:	bxeq	lr
   113e4:	b	10c28 <__gmon_start__@plt>
   113e8:	andeq	r4, r1, r4, lsr #24
   113ec:	andeq	r0, r0, r0, asr #1
   113f0:	ldr	r3, [pc, #28]	; 11414 <__assert_fail@plt+0x708>
   113f4:	ldr	r0, [pc, #28]	; 11418 <__assert_fail@plt+0x70c>
   113f8:	sub	r3, r3, r0
   113fc:	cmp	r3, #6
   11400:	bxls	lr
   11404:	ldr	r3, [pc, #16]	; 1141c <__assert_fail@plt+0x710>
   11408:	cmp	r3, #0
   1140c:	bxeq	lr
   11410:	bx	r3
   11414:	andeq	r6, r2, r7, lsl r1
   11418:	andeq	r6, r2, r4, lsl r1
   1141c:	andeq	r0, r0, r0
   11420:	ldr	r1, [pc, #36]	; 1144c <__assert_fail@plt+0x740>
   11424:	ldr	r0, [pc, #36]	; 11450 <__assert_fail@plt+0x744>
   11428:	sub	r1, r1, r0
   1142c:	asr	r1, r1, #2
   11430:	add	r1, r1, r1, lsr #31
   11434:	asrs	r1, r1, #1
   11438:	bxeq	lr
   1143c:	ldr	r3, [pc, #16]	; 11454 <__assert_fail@plt+0x748>
   11440:	cmp	r3, #0
   11444:	bxeq	lr
   11448:	bx	r3
   1144c:	andeq	r6, r2, r4, lsl r1
   11450:	andeq	r6, r2, r4, lsl r1
   11454:	andeq	r0, r0, r0
   11458:	push	{r4, lr}
   1145c:	ldr	r4, [pc, #24]	; 1147c <__assert_fail@plt+0x770>
   11460:	ldrb	r3, [r4]
   11464:	cmp	r3, #0
   11468:	popne	{r4, pc}
   1146c:	bl	113f0 <__assert_fail@plt+0x6e4>
   11470:	mov	r3, #1
   11474:	strb	r3, [r4]
   11478:	pop	{r4, pc}
   1147c:	andeq	r6, r2, r8, lsr #2
   11480:	ldr	r0, [pc, #40]	; 114b0 <__assert_fail@plt+0x7a4>
   11484:	ldr	r3, [r0]
   11488:	cmp	r3, #0
   1148c:	bne	11494 <__assert_fail@plt+0x788>
   11490:	b	11420 <__assert_fail@plt+0x714>
   11494:	ldr	r3, [pc, #24]	; 114b4 <__assert_fail@plt+0x7a8>
   11498:	cmp	r3, #0
   1149c:	beq	11490 <__assert_fail@plt+0x784>
   114a0:	push	{r4, lr}
   114a4:	blx	r3
   114a8:	pop	{r4, lr}
   114ac:	b	11420 <__assert_fail@plt+0x714>
   114b0:	andeq	r5, r2, r4, lsl pc
   114b4:	andeq	r0, r0, r0
   114b8:	sub	r3, r0, #65	; 0x41
   114bc:	cmp	r3, #37	; 0x25
   114c0:	ldrls	pc, [pc, r3, lsl #2]
   114c4:	b	11590 <__assert_fail@plt+0x884>
   114c8:	andeq	r1, r1, r0, ror #10
   114cc:	andeq	r1, r1, r8, ror #10
   114d0:	andeq	r1, r1, r0, ror r5
   114d4:	andeq	r1, r1, r8, ror r5
   114d8:	andeq	r1, r1, r0, lsl #11
   114dc:	andeq	r1, r1, r8, lsl #11
   114e0:	muleq	r1, r0, r5
   114e4:	muleq	r1, r0, r5
   114e8:	muleq	r1, r0, r5
   114ec:	muleq	r1, r0, r5
   114f0:	muleq	r1, r0, r5
   114f4:	muleq	r1, r0, r5
   114f8:	muleq	r1, r0, r5
   114fc:	muleq	r1, r0, r5
   11500:	muleq	r1, r0, r5
   11504:	muleq	r1, r0, r5
   11508:	muleq	r1, r0, r5
   1150c:	muleq	r1, r0, r5
   11510:	muleq	r1, r0, r5
   11514:	muleq	r1, r0, r5
   11518:	muleq	r1, r0, r5
   1151c:	muleq	r1, r0, r5
   11520:	muleq	r1, r0, r5
   11524:	muleq	r1, r0, r5
   11528:	muleq	r1, r0, r5
   1152c:	muleq	r1, r0, r5
   11530:	muleq	r1, r0, r5
   11534:	muleq	r1, r0, r5
   11538:	muleq	r1, r0, r5
   1153c:	muleq	r1, r0, r5
   11540:	muleq	r1, r0, r5
   11544:	muleq	r1, r0, r5
   11548:	andeq	r1, r1, r0, ror #10
   1154c:	andeq	r1, r1, r8, ror #10
   11550:	andeq	r1, r1, r0, ror r5
   11554:	andeq	r1, r1, r8, ror r5
   11558:	andeq	r1, r1, r0, lsl #11
   1155c:	andeq	r1, r1, r8, lsl #11
   11560:	mov	r0, #10
   11564:	bx	lr
   11568:	mov	r0, #11
   1156c:	bx	lr
   11570:	mov	r0, #12
   11574:	bx	lr
   11578:	mov	r0, #13
   1157c:	bx	lr
   11580:	mov	r0, #14
   11584:	bx	lr
   11588:	mov	r0, #15
   1158c:	bx	lr
   11590:	sub	r0, r0, #48	; 0x30
   11594:	bx	lr
   11598:	subs	r4, r0, #0
   1159c:	push	{lr}		; (str lr, [sp, #-4]!)
   115a0:	sub	sp, sp, #60	; 0x3c
   115a4:	beq	115bc <__assert_fail@plt+0x8b0>
   115a8:	ldr	r3, [pc, #736]	; 11890 <__assert_fail@plt+0xb84>
   115ac:	mov	r2, #40	; 0x28
   115b0:	ldr	r1, [pc, #732]	; 11894 <__assert_fail@plt+0xb88>
   115b4:	ldr	r0, [pc, #732]	; 11898 <__assert_fail@plt+0xb8c>
   115b8:	bl	10d0c <__assert_fail@plt>
   115bc:	mov	r2, #5
   115c0:	ldr	r1, [pc, #724]	; 1189c <__assert_fail@plt+0xb90>
   115c4:	bl	10b80 <dcgettext@plt>
   115c8:	ldr	r3, [pc, #720]	; 118a0 <__assert_fail@plt+0xb94>
   115cc:	ldr	r6, [pc, #720]	; 118a4 <__assert_fail@plt+0xb98>
   115d0:	ldr	r3, [r3]
   115d4:	mov	r2, r3
   115d8:	mov	r1, r0
   115dc:	mov	r0, #1
   115e0:	bl	10c7c <__printf_chk@plt>
   115e4:	mov	r2, #5
   115e8:	ldr	r1, [pc, #696]	; 118a8 <__assert_fail@plt+0xb9c>
   115ec:	mov	r0, r4
   115f0:	bl	10b80 <dcgettext@plt>
   115f4:	ldr	r1, [r6]
   115f8:	bl	10b08 <fputs_unlocked@plt>
   115fc:	mov	r2, #5
   11600:	ldr	r1, [pc, #676]	; 118ac <__assert_fail@plt+0xba0>
   11604:	mov	r0, r4
   11608:	bl	10b80 <dcgettext@plt>
   1160c:	ldr	r1, [r6]
   11610:	bl	10b08 <fputs_unlocked@plt>
   11614:	mov	r2, #5
   11618:	ldr	r1, [pc, #656]	; 118b0 <__assert_fail@plt+0xba4>
   1161c:	mov	r0, r4
   11620:	bl	10b80 <dcgettext@plt>
   11624:	ldr	r1, [r6]
   11628:	bl	10b08 <fputs_unlocked@plt>
   1162c:	mov	r2, #5
   11630:	ldr	r1, [pc, #636]	; 118b4 <__assert_fail@plt+0xba8>
   11634:	mov	r0, r4
   11638:	bl	10b80 <dcgettext@plt>
   1163c:	ldr	r1, [r6]
   11640:	bl	10b08 <fputs_unlocked@plt>
   11644:	mov	r2, #5
   11648:	ldr	r1, [pc, #616]	; 118b8 <__assert_fail@plt+0xbac>
   1164c:	mov	r0, r4
   11650:	bl	10b80 <dcgettext@plt>
   11654:	ldr	r1, [r6]
   11658:	bl	10b08 <fputs_unlocked@plt>
   1165c:	mov	r2, #5
   11660:	ldr	r1, [pc, #596]	; 118bc <__assert_fail@plt+0xbb0>
   11664:	mov	r0, r4
   11668:	bl	10b80 <dcgettext@plt>
   1166c:	ldr	r1, [r6]
   11670:	bl	10b08 <fputs_unlocked@plt>
   11674:	mov	r2, #5
   11678:	ldr	r1, [pc, #576]	; 118c0 <__assert_fail@plt+0xbb4>
   1167c:	mov	r0, r4
   11680:	bl	10b80 <dcgettext@plt>
   11684:	ldr	r1, [r6]
   11688:	bl	10b08 <fputs_unlocked@plt>
   1168c:	mov	r2, #5
   11690:	ldr	r1, [pc, #556]	; 118c4 <__assert_fail@plt+0xbb8>
   11694:	mov	r0, r4
   11698:	bl	10b80 <dcgettext@plt>
   1169c:	ldr	r2, [pc, #548]	; 118c8 <__assert_fail@plt+0xbbc>
   116a0:	mov	r1, r0
   116a4:	mov	r0, #1
   116a8:	bl	10c7c <__printf_chk@plt>
   116ac:	mov	r0, r4
   116b0:	ldr	r4, [pc, #532]	; 118cc <__assert_fail@plt+0xbc0>
   116b4:	mov	r2, #5
   116b8:	ldr	r1, [pc, #528]	; 118d0 <__assert_fail@plt+0xbc4>
   116bc:	bl	10b80 <dcgettext@plt>
   116c0:	ldr	r1, [r6]
   116c4:	bl	10b08 <fputs_unlocked@plt>
   116c8:	ldm	r4!, {r0, r1, r2, r3}
   116cc:	mov	lr, sp
   116d0:	stmia	lr!, {r0, r1, r2, r3}
   116d4:	ldm	r4!, {r0, r1, r2, r3}
   116d8:	ldr	ip, [sp]
   116dc:	stmia	lr!, {r0, r1, r2, r3}
   116e0:	cmp	ip, #0
   116e4:	ldm	r4!, {r0, r1, r2, r3}
   116e8:	stmia	lr!, {r0, r1, r2, r3}
   116ec:	ldm	r4, {r0, r1}
   116f0:	moveq	r4, sp
   116f4:	stm	lr, {r0, r1}
   116f8:	beq	11728 <__assert_fail@plt+0xa1c>
   116fc:	ldr	r5, [pc, #452]	; 118c8 <__assert_fail@plt+0xbbc>
   11700:	mov	r4, sp
   11704:	b	11714 <__assert_fail@plt+0xa08>
   11708:	ldr	ip, [r4, #8]!
   1170c:	cmp	ip, #0
   11710:	beq	11728 <__assert_fail@plt+0xa1c>
   11714:	mov	r1, ip
   11718:	mov	r0, r5
   1171c:	bl	10b20 <strcmp@plt>
   11720:	cmp	r0, #0
   11724:	bne	11708 <__assert_fail@plt+0x9fc>
   11728:	ldr	r4, [r4, #4]
   1172c:	mov	r2, #5
   11730:	cmp	r4, #0
   11734:	ldr	r1, [pc, #408]	; 118d4 <__assert_fail@plt+0xbc8>
   11738:	beq	117e4 <__assert_fail@plt+0xad8>
   1173c:	mov	r0, #0
   11740:	bl	10b80 <dcgettext@plt>
   11744:	ldr	r3, [pc, #396]	; 118d8 <__assert_fail@plt+0xbcc>
   11748:	ldr	r2, [pc, #396]	; 118dc <__assert_fail@plt+0xbd0>
   1174c:	mov	r1, r0
   11750:	mov	r0, #1
   11754:	bl	10c7c <__printf_chk@plt>
   11758:	mov	r1, #0
   1175c:	mov	r0, #5
   11760:	bl	10cc4 <setlocale@plt>
   11764:	cmp	r0, #0
   11768:	ldreq	r5, [pc, #344]	; 118c8 <__assert_fail@plt+0xbbc>
   1176c:	beq	11788 <__assert_fail@plt+0xa7c>
   11770:	mov	r2, #3
   11774:	ldr	r1, [pc, #356]	; 118e0 <__assert_fail@plt+0xbd4>
   11778:	bl	10cf4 <strncmp@plt>
   1177c:	ldr	r5, [pc, #324]	; 118c8 <__assert_fail@plt+0xbbc>
   11780:	cmp	r0, #0
   11784:	bne	11874 <__assert_fail@plt+0xb68>
   11788:	mov	r2, #5
   1178c:	ldr	r1, [pc, #336]	; 118e4 <__assert_fail@plt+0xbd8>
   11790:	mov	r0, #0
   11794:	bl	10b80 <dcgettext@plt>
   11798:	ldr	r3, [pc, #296]	; 118c8 <__assert_fail@plt+0xbbc>
   1179c:	ldr	r2, [pc, #308]	; 118d8 <__assert_fail@plt+0xbcc>
   117a0:	mov	r1, r0
   117a4:	mov	r0, #1
   117a8:	bl	10c7c <__printf_chk@plt>
   117ac:	mov	r2, #5
   117b0:	ldr	r1, [pc, #304]	; 118e8 <__assert_fail@plt+0xbdc>
   117b4:	mov	r0, #0
   117b8:	bl	10b80 <dcgettext@plt>
   117bc:	ldr	r2, [pc, #296]	; 118ec <__assert_fail@plt+0xbe0>
   117c0:	cmp	r4, r5
   117c4:	ldr	r3, [pc, #292]	; 118f0 <__assert_fail@plt+0xbe4>
   117c8:	movne	r3, r2
   117cc:	mov	r1, r0
   117d0:	mov	r2, r4
   117d4:	mov	r0, #1
   117d8:	bl	10c7c <__printf_chk@plt>
   117dc:	mov	r0, #0
   117e0:	bl	10c40 <exit@plt>
   117e4:	mov	r0, r4
   117e8:	bl	10b80 <dcgettext@plt>
   117ec:	ldr	r3, [pc, #228]	; 118d8 <__assert_fail@plt+0xbcc>
   117f0:	ldr	r2, [pc, #228]	; 118dc <__assert_fail@plt+0xbd0>
   117f4:	mov	r1, r0
   117f8:	mov	r0, #1
   117fc:	bl	10c7c <__printf_chk@plt>
   11800:	mov	r1, r4
   11804:	mov	r0, #5
   11808:	bl	10cc4 <setlocale@plt>
   1180c:	cmp	r0, #0
   11810:	beq	11828 <__assert_fail@plt+0xb1c>
   11814:	mov	r2, #3
   11818:	ldr	r1, [pc, #192]	; 118e0 <__assert_fail@plt+0xbd4>
   1181c:	bl	10cf4 <strncmp@plt>
   11820:	cmp	r0, #0
   11824:	bne	1186c <__assert_fail@plt+0xb60>
   11828:	mov	r2, #5
   1182c:	ldr	r1, [pc, #176]	; 118e4 <__assert_fail@plt+0xbd8>
   11830:	mov	r0, #0
   11834:	bl	10b80 <dcgettext@plt>
   11838:	ldr	r3, [pc, #136]	; 118c8 <__assert_fail@plt+0xbbc>
   1183c:	ldr	r2, [pc, #148]	; 118d8 <__assert_fail@plt+0xbcc>
   11840:	mov	r4, r3
   11844:	mov	r1, r0
   11848:	mov	r0, #1
   1184c:	bl	10c7c <__printf_chk@plt>
   11850:	ldr	r1, [pc, #144]	; 118e8 <__assert_fail@plt+0xbdc>
   11854:	mov	r2, #5
   11858:	mov	r0, #0
   1185c:	bl	10b80 <dcgettext@plt>
   11860:	ldr	r3, [pc, #136]	; 118f0 <__assert_fail@plt+0xbe4>
   11864:	mov	r1, r0
   11868:	b	117d0 <__assert_fail@plt+0xac4>
   1186c:	ldr	r5, [pc, #84]	; 118c8 <__assert_fail@plt+0xbbc>
   11870:	mov	r4, r5
   11874:	mov	r2, #5
   11878:	ldr	r1, [pc, #116]	; 118f4 <__assert_fail@plt+0xbe8>
   1187c:	mov	r0, #0
   11880:	bl	10b80 <dcgettext@plt>
   11884:	ldr	r1, [r6]
   11888:	bl	10b08 <fputs_unlocked@plt>
   1188c:	b	11788 <__assert_fail@plt+0xa7c>
   11890:	andeq	r4, r1, ip, ror #26
   11894:			; <UNDEFINED> instruction: 0x00014db4
   11898:	andeq	r4, r1, r0, asr #27
   1189c:	ldrdeq	r4, [r1], -r8
   118a0:	andeq	r6, r2, r4, lsr r1
   118a4:	andeq	r6, r2, r4, lsr #2
   118a8:	andeq	r4, r1, r8, lsl lr
   118ac:	andeq	r4, r1, r8, ror lr
   118b0:	strdeq	r4, [r1], -ip
   118b4:	andeq	r4, r1, ip, lsr #30
   118b8:	andeq	r4, r1, r4, ror #30
   118bc:	andeq	r4, r1, r4, lsr #31
   118c0:	andeq	r5, r1, ip, lsl #1
   118c4:	strdeq	r5, [r1], -ip
   118c8:	andeq	r4, r1, ip, lsr #27
   118cc:	andeq	r4, r1, r4, ror sp
   118d0:			; <UNDEFINED> instruction: 0x000151bc
   118d4:	andeq	r5, r1, r8, lsr #4
   118d8:	andeq	r5, r1, r0, asr #4
   118dc:	andeq	r5, r1, r8, ror #4
   118e0:	andeq	r5, r1, r8, ror r2
   118e4:	andeq	r5, r1, r4, asr #5
   118e8:	andeq	r5, r1, r0, ror #5
   118ec:	andeq	r5, r1, r4, lsr #4
   118f0:	andeq	r5, r1, r4, ror r3
   118f4:	andeq	r5, r1, ip, ror r2
   118f8:	ldr	r3, [pc, #4]	; 11904 <__assert_fail@plt+0xbf8>
   118fc:	str	r0, [r3]
   11900:	bx	lr
   11904:	andeq	r6, r2, ip, lsr #2
   11908:	ldr	r3, [pc, #4]	; 11914 <__assert_fail@plt+0xc08>
   1190c:	strb	r0, [r3, #4]
   11910:	bx	lr
   11914:	andeq	r6, r2, ip, lsr #2
   11918:	ldr	r3, [pc, #192]	; 119e0 <__assert_fail@plt+0xcd4>
   1191c:	push	{r4, r5, r6, lr}
   11920:	sub	sp, sp, #8
   11924:	ldr	r0, [r3]
   11928:	bl	1444c <__assert_fail@plt+0x3740>
   1192c:	cmp	r0, #0
   11930:	beq	11954 <__assert_fail@plt+0xc48>
   11934:	ldr	r4, [pc, #168]	; 119e4 <__assert_fail@plt+0xcd8>
   11938:	ldrb	r3, [r4, #4]
   1193c:	cmp	r3, #0
   11940:	beq	11970 <__assert_fail@plt+0xc64>
   11944:	bl	10c58 <__errno_location@plt>
   11948:	ldr	r3, [r0]
   1194c:	cmp	r3, #32
   11950:	bne	11970 <__assert_fail@plt+0xc64>
   11954:	ldr	r3, [pc, #140]	; 119e8 <__assert_fail@plt+0xcdc>
   11958:	ldr	r0, [r3]
   1195c:	bl	1444c <__assert_fail@plt+0x3740>
   11960:	cmp	r0, #0
   11964:	bne	119b8 <__assert_fail@plt+0xcac>
   11968:	add	sp, sp, #8
   1196c:	pop	{r4, r5, r6, pc}
   11970:	mov	r2, #5
   11974:	ldr	r1, [pc, #112]	; 119ec <__assert_fail@plt+0xce0>
   11978:	mov	r0, #0
   1197c:	bl	10b80 <dcgettext@plt>
   11980:	ldr	r4, [r4]
   11984:	cmp	r4, #0
   11988:	mov	r5, r0
   1198c:	beq	119c4 <__assert_fail@plt+0xcb8>
   11990:	bl	10c58 <__errno_location@plt>
   11994:	ldr	r6, [r0]
   11998:	mov	r0, r4
   1199c:	bl	13724 <__assert_fail@plt+0x2a18>
   119a0:	mov	r1, r6
   119a4:	str	r5, [sp]
   119a8:	ldr	r2, [pc, #64]	; 119f0 <__assert_fail@plt+0xce4>
   119ac:	mov	r3, r0
   119b0:	mov	r0, #0
   119b4:	bl	10bec <error@plt>
   119b8:	ldr	r3, [pc, #52]	; 119f4 <__assert_fail@plt+0xce8>
   119bc:	ldr	r0, [r3]
   119c0:	bl	10b44 <_exit@plt>
   119c4:	bl	10c58 <__errno_location@plt>
   119c8:	mov	r3, r5
   119cc:	ldr	r2, [pc, #36]	; 119f8 <__assert_fail@plt+0xcec>
   119d0:	ldr	r1, [r0]
   119d4:	mov	r0, r4
   119d8:	bl	10bec <error@plt>
   119dc:	b	119b8 <__assert_fail@plt+0xcac>
   119e0:	andeq	r6, r2, r4, lsr #2
   119e4:	andeq	r6, r2, ip, lsr #2
   119e8:	andeq	r6, r2, r0, lsr #2
   119ec:	andeq	r5, r1, r8, ror #7
   119f0:	strdeq	r5, [r1], -r4
   119f4:	ldrdeq	r6, [r2], -r0
   119f8:	strdeq	r5, [r1], -r8
   119fc:	push	{r4, r5, r6, lr}
   11a00:	subs	r4, r0, #0
   11a04:	beq	11a78 <__assert_fail@plt+0xd6c>
   11a08:	mov	r1, #47	; 0x2f
   11a0c:	bl	10cd0 <strrchr@plt>
   11a10:	subs	r5, r0, #0
   11a14:	beq	11a64 <__assert_fail@plt+0xd58>
   11a18:	add	r6, r5, #1
   11a1c:	sub	r3, r6, r4
   11a20:	cmp	r3, #6
   11a24:	ble	11a64 <__assert_fail@plt+0xd58>
   11a28:	mov	r2, #7
   11a2c:	ldr	r1, [pc, #96]	; 11a94 <__assert_fail@plt+0xd88>
   11a30:	sub	r0, r5, #6
   11a34:	bl	10cf4 <strncmp@plt>
   11a38:	cmp	r0, #0
   11a3c:	bne	11a64 <__assert_fail@plt+0xd58>
   11a40:	mov	r2, #3
   11a44:	ldr	r1, [pc, #76]	; 11a98 <__assert_fail@plt+0xd8c>
   11a48:	mov	r0, r6
   11a4c:	bl	10cf4 <strncmp@plt>
   11a50:	cmp	r0, #0
   11a54:	movne	r4, r6
   11a58:	ldreq	r3, [pc, #60]	; 11a9c <__assert_fail@plt+0xd90>
   11a5c:	addeq	r4, r5, #4
   11a60:	streq	r4, [r3]
   11a64:	ldr	r2, [pc, #52]	; 11aa0 <__assert_fail@plt+0xd94>
   11a68:	ldr	r3, [pc, #52]	; 11aa4 <__assert_fail@plt+0xd98>
   11a6c:	str	r4, [r2]
   11a70:	str	r4, [r3]
   11a74:	pop	{r4, r5, r6, pc}
   11a78:	ldr	r3, [pc, #40]	; 11aa8 <__assert_fail@plt+0xd9c>
   11a7c:	mov	r2, #55	; 0x37
   11a80:	mov	r1, #1
   11a84:	ldr	r3, [r3]
   11a88:	ldr	r0, [pc, #28]	; 11aac <__assert_fail@plt+0xda0>
   11a8c:	bl	10bb0 <fwrite@plt>
   11a90:	bl	10d00 <abort@plt>
   11a94:	andeq	r5, r1, r4, lsr r4
   11a98:	andeq	r5, r1, ip, lsr r4
   11a9c:	andeq	r6, r2, r8, lsl r1
   11aa0:	andeq	r6, r2, r4, lsr r1
   11aa4:	andeq	r6, r2, ip, lsl r1
   11aa8:	andeq	r6, r2, r0, lsr #2
   11aac:	strdeq	r5, [r1], -ip
   11ab0:	push	{r4, r5, r6, lr}
   11ab4:	mov	r2, #48	; 0x30
   11ab8:	mov	r4, r1
   11abc:	mov	r1, #0
   11ac0:	mov	r5, r0
   11ac4:	bl	10c70 <memset@plt>
   11ac8:	cmp	r4, #10
   11acc:	beq	11adc <__assert_fail@plt+0xdd0>
   11ad0:	str	r4, [r5]
   11ad4:	mov	r0, r5
   11ad8:	pop	{r4, r5, r6, pc}
   11adc:	bl	10d00 <abort@plt>
   11ae0:	push	{r4, r5, r6, lr}
   11ae4:	mov	r4, r0
   11ae8:	mov	r5, r1
   11aec:	bl	146c0 <__assert_fail@plt+0x39b4>
   11af0:	ldrb	r3, [r0]
   11af4:	bic	r3, r3, #32
   11af8:	cmp	r3, #85	; 0x55
   11afc:	bne	11b5c <__assert_fail@plt+0xe50>
   11b00:	ldrb	r3, [r0, #1]
   11b04:	bic	r3, r3, #32
   11b08:	cmp	r3, #84	; 0x54
   11b0c:	bne	11b98 <__assert_fail@plt+0xe8c>
   11b10:	ldrb	r3, [r0, #2]
   11b14:	bic	r3, r3, #32
   11b18:	cmp	r3, #70	; 0x46
   11b1c:	bne	11b98 <__assert_fail@plt+0xe8c>
   11b20:	ldrb	r3, [r0, #3]
   11b24:	cmp	r3, #45	; 0x2d
   11b28:	bne	11b98 <__assert_fail@plt+0xe8c>
   11b2c:	ldrb	r3, [r0, #4]
   11b30:	cmp	r3, #56	; 0x38
   11b34:	bne	11b98 <__assert_fail@plt+0xe8c>
   11b38:	ldrb	r3, [r0, #5]
   11b3c:	cmp	r3, #0
   11b40:	bne	11b98 <__assert_fail@plt+0xe8c>
   11b44:	ldrb	r2, [r4]
   11b48:	ldr	r3, [pc, #152]	; 11be8 <__assert_fail@plt+0xedc>
   11b4c:	ldr	r0, [pc, #152]	; 11bec <__assert_fail@plt+0xee0>
   11b50:	cmp	r2, #96	; 0x60
   11b54:	movne	r0, r3
   11b58:	pop	{r4, r5, r6, pc}
   11b5c:	cmp	r3, #71	; 0x47
   11b60:	bne	11b98 <__assert_fail@plt+0xe8c>
   11b64:	ldrb	r3, [r0, #1]
   11b68:	bic	r3, r3, #32
   11b6c:	cmp	r3, #66	; 0x42
   11b70:	bne	11b98 <__assert_fail@plt+0xe8c>
   11b74:	ldrb	r3, [r0, #2]
   11b78:	cmp	r3, #49	; 0x31
   11b7c:	bne	11b98 <__assert_fail@plt+0xe8c>
   11b80:	ldrb	r3, [r0, #3]
   11b84:	cmp	r3, #56	; 0x38
   11b88:	bne	11b98 <__assert_fail@plt+0xe8c>
   11b8c:	ldrb	r3, [r0, #4]
   11b90:	cmp	r3, #48	; 0x30
   11b94:	beq	11bac <__assert_fail@plt+0xea0>
   11b98:	ldr	r3, [pc, #80]	; 11bf0 <__assert_fail@plt+0xee4>
   11b9c:	cmp	r5, #9
   11ba0:	ldr	r0, [pc, #76]	; 11bf4 <__assert_fail@plt+0xee8>
   11ba4:	movne	r0, r3
   11ba8:	pop	{r4, r5, r6, pc}
   11bac:	ldrb	r3, [r0, #5]
   11bb0:	cmp	r3, #51	; 0x33
   11bb4:	bne	11b98 <__assert_fail@plt+0xe8c>
   11bb8:	ldrb	r3, [r0, #6]
   11bbc:	cmp	r3, #48	; 0x30
   11bc0:	bne	11b98 <__assert_fail@plt+0xe8c>
   11bc4:	ldrb	r3, [r0, #7]
   11bc8:	cmp	r3, #0
   11bcc:	bne	11b98 <__assert_fail@plt+0xe8c>
   11bd0:	ldrb	r2, [r4]
   11bd4:	ldr	r3, [pc, #28]	; 11bf8 <__assert_fail@plt+0xeec>
   11bd8:	ldr	r0, [pc, #28]	; 11bfc <__assert_fail@plt+0xef0>
   11bdc:	cmp	r2, #96	; 0x60
   11be0:	movne	r0, r3
   11be4:	pop	{r4, r5, r6, pc}
   11be8:	muleq	r1, r8, r4
   11bec:	muleq	r1, r4, r4
   11bf0:	andeq	r5, r1, r8, lsr #9
   11bf4:	andeq	r5, r1, r4, lsr #9
   11bf8:	andeq	r5, r1, r0, lsr #9
   11bfc:	muleq	r1, ip, r4
   11c00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c04:	sub	sp, sp, #116	; 0x74
   11c08:	mov	sl, r0
   11c0c:	str	r3, [sp, #24]
   11c10:	mov	r3, #1
   11c14:	mov	r8, r1
   11c18:	str	r2, [sp, #56]	; 0x38
   11c1c:	str	r3, [sp, #36]	; 0x24
   11c20:	bl	10bc8 <__ctype_get_mb_cur_max@plt>
   11c24:	ldr	r3, [sp, #156]	; 0x9c
   11c28:	mov	fp, r8
   11c2c:	mov	r2, #0
   11c30:	lsr	r3, r3, #1
   11c34:	and	r3, r3, #1
   11c38:	str	r2, [sp, #68]	; 0x44
   11c3c:	str	r3, [sp, #28]
   11c40:	str	r2, [sp, #40]	; 0x28
   11c44:	str	r2, [sp, #44]	; 0x2c
   11c48:	str	r2, [sp, #52]	; 0x34
   11c4c:	str	r2, [sp, #64]	; 0x40
   11c50:	str	r2, [sp, #72]	; 0x48
   11c54:	str	sl, [sp, #32]
   11c58:	str	r0, [sp, #76]	; 0x4c
   11c5c:	ldr	r3, [sp, #152]	; 0x98
   11c60:	cmp	r3, #10
   11c64:	ldrls	pc, [pc, r3, lsl #2]
   11c68:	b	12e28 <__assert_fail@plt+0x211c>
   11c6c:	muleq	r1, r8, ip
   11c70:	andeq	r1, r1, r0, lsl #31
   11c74:	andeq	r1, r1, r4, lsr #31
   11c78:	andeq	r1, r1, r8, asr #31
   11c7c:	strdeq	r2, [r1], -r4
   11c80:	andeq	r2, r1, r8, asr #1
   11c84:	andeq	r2, r1, r0, lsr #1
   11c88:	ldrdeq	r1, [r1], -ip
   11c8c:	strdeq	r1, [r1], -r4
   11c90:	strdeq	r1, [r1], -r4
   11c94:	strdeq	r1, [r1], -r4
   11c98:	mov	r3, #0
   11c9c:	mov	r7, r3
   11ca0:	str	r3, [sp, #28]
   11ca4:	ldr	r3, [sp, #44]	; 0x2c
   11ca8:	mov	sl, #0
   11cac:	eor	r3, r3, #1
   11cb0:	str	r3, [sp, #60]	; 0x3c
   11cb4:	ldr	r3, [sp, #24]
   11cb8:	cmn	r3, #1
   11cbc:	beq	12220 <__assert_fail@plt+0x1514>
   11cc0:	ldr	r3, [sp, #24]
   11cc4:	subs	r5, r3, sl
   11cc8:	movne	r5, #1
   11ccc:	cmp	r5, #0
   11cd0:	beq	12238 <__assert_fail@plt+0x152c>
   11cd4:	ldr	r3, [sp, #152]	; 0x98
   11cd8:	ldr	r8, [sp, #44]	; 0x2c
   11cdc:	cmp	r3, #2
   11ce0:	moveq	r8, #0
   11ce4:	andne	r8, r8, #1
   11ce8:	ldr	r3, [sp, #52]	; 0x34
   11cec:	adds	r9, r3, #0
   11cf0:	movne	r9, #1
   11cf4:	ands	r6, r9, r8
   11cf8:	beq	126a0 <__assert_fail@plt+0x1994>
   11cfc:	ldr	r2, [sp, #52]	; 0x34
   11d00:	ldr	r1, [sp, #24]
   11d04:	cmp	r2, #1
   11d08:	mov	r3, r2
   11d0c:	movls	r3, #0
   11d10:	movhi	r3, #1
   11d14:	cmn	r1, #1
   11d18:	movne	r3, #0
   11d1c:	cmp	r3, #0
   11d20:	add	r4, sl, r2
   11d24:	beq	11d34 <__assert_fail@plt+0x1028>
   11d28:	ldr	r0, [sp, #56]	; 0x38
   11d2c:	bl	10c4c <strlen@plt>
   11d30:	str	r0, [sp, #24]
   11d34:	ldr	r3, [sp, #24]
   11d38:	cmp	r3, r4
   11d3c:	ldr	r3, [sp, #56]	; 0x38
   11d40:	add	r3, r3, sl
   11d44:	str	r3, [sp, #48]	; 0x30
   11d48:	bcc	126ac <__assert_fail@plt+0x19a0>
   11d4c:	mov	r0, r3
   11d50:	ldr	r2, [sp, #52]	; 0x34
   11d54:	ldr	r1, [sp, #64]	; 0x40
   11d58:	bl	10b68 <memcmp@plt>
   11d5c:	cmp	r0, #0
   11d60:	bne	126ac <__assert_fail@plt+0x19a0>
   11d64:	ldr	r3, [sp, #28]
   11d68:	cmp	r3, #0
   11d6c:	bne	12f28 <__assert_fail@plt+0x221c>
   11d70:	ldr	r3, [sp, #48]	; 0x30
   11d74:	ldrb	r4, [r3]
   11d78:	cmp	r4, #126	; 0x7e
   11d7c:	ldrls	pc, [pc, r4, lsl #2]
   11d80:	b	12640 <__assert_fail@plt+0x1934>
   11d84:	andeq	r2, r1, r4, ror #8
   11d88:	andeq	r2, r1, r0, asr #12
   11d8c:	andeq	r2, r1, r0, asr #12
   11d90:	andeq	r2, r1, r0, asr #12
   11d94:	andeq	r2, r1, r0, asr #12
   11d98:	andeq	r2, r1, r0, asr #12
   11d9c:	andeq	r2, r1, r0, asr #12
   11da0:	andeq	r2, r1, r8, asr #8
   11da4:	andeq	r2, r1, ip, lsr #8
   11da8:	andeq	r2, r1, r8, lsr #12
   11dac:	andeq	r2, r1, ip, lsl #7
   11db0:	andeq	r2, r1, r0, ror r3
   11db4:	andeq	r2, r1, r4, lsl #12
   11db8:	andeq	r2, r1, r0, ror #11
   11dbc:	andeq	r2, r1, r0, asr #12
   11dc0:	andeq	r2, r1, r0, asr #12
   11dc4:	andeq	r2, r1, r0, asr #12
   11dc8:	andeq	r2, r1, r0, asr #12
   11dcc:	andeq	r2, r1, r0, asr #12
   11dd0:	andeq	r2, r1, r0, asr #12
   11dd4:	andeq	r2, r1, r0, asr #12
   11dd8:	andeq	r2, r1, r0, asr #12
   11ddc:	andeq	r2, r1, r0, asr #12
   11de0:	andeq	r2, r1, r0, asr #12
   11de4:	andeq	r2, r1, r0, asr #12
   11de8:	andeq	r2, r1, r0, asr #12
   11dec:	andeq	r2, r1, r0, asr #12
   11df0:	andeq	r2, r1, r0, asr #12
   11df4:	andeq	r2, r1, r0, asr #12
   11df8:	andeq	r2, r1, r0, asr #12
   11dfc:	andeq	r2, r1, r0, asr #12
   11e00:	andeq	r2, r1, r0, asr #12
   11e04:	andeq	r2, r1, r0, lsr #12
   11e08:	andeq	r2, r1, r4, asr r5
   11e0c:	andeq	r2, r1, r4, asr r5
   11e10:	andeq	r2, r1, r4, ror #2
   11e14:	andeq	r2, r1, r4, asr r5
   11e18:	andeq	r2, r1, ip, ror #11
   11e1c:	andeq	r2, r1, r4, asr r5
   11e20:	andeq	r2, r1, r0, asr #11
   11e24:	andeq	r2, r1, r4, asr r5
   11e28:	andeq	r2, r1, r4, asr r5
   11e2c:	andeq	r2, r1, r4, asr r5
   11e30:	andeq	r2, r1, ip, ror #11
   11e34:	andeq	r2, r1, ip, ror #11
   11e38:	andeq	r2, r1, ip, ror #11
   11e3c:	andeq	r2, r1, ip, ror #11
   11e40:	andeq	r2, r1, ip, ror #11
   11e44:	andeq	r2, r1, ip, ror #11
   11e48:	andeq	r2, r1, ip, ror #11
   11e4c:	andeq	r2, r1, ip, ror #11
   11e50:	andeq	r2, r1, ip, ror #11
   11e54:	andeq	r2, r1, ip, ror #11
   11e58:	andeq	r2, r1, ip, ror #11
   11e5c:	andeq	r2, r1, ip, ror #11
   11e60:	andeq	r2, r1, ip, ror #11
   11e64:	andeq	r2, r1, ip, ror #11
   11e68:	andeq	r2, r1, ip, ror #11
   11e6c:	andeq	r2, r1, ip, ror #11
   11e70:	andeq	r2, r1, r4, asr r5
   11e74:	andeq	r2, r1, r4, asr r5
   11e78:	andeq	r2, r1, r4, asr r5
   11e7c:	andeq	r2, r1, r4, asr r5
   11e80:	muleq	r1, r0, r5
   11e84:	andeq	r2, r1, r0, asr #12
   11e88:	andeq	r2, r1, ip, ror #11
   11e8c:	andeq	r2, r1, ip, ror #11
   11e90:	andeq	r2, r1, ip, ror #11
   11e94:	andeq	r2, r1, ip, ror #11
   11e98:	andeq	r2, r1, ip, ror #11
   11e9c:	andeq	r2, r1, ip, ror #11
   11ea0:	andeq	r2, r1, ip, ror #11
   11ea4:	andeq	r2, r1, ip, ror #11
   11ea8:	andeq	r2, r1, ip, ror #11
   11eac:	andeq	r2, r1, ip, ror #11
   11eb0:	andeq	r2, r1, ip, ror #11
   11eb4:	andeq	r2, r1, ip, ror #11
   11eb8:	andeq	r2, r1, ip, ror #11
   11ebc:	andeq	r2, r1, ip, ror #11
   11ec0:	andeq	r2, r1, ip, ror #11
   11ec4:	andeq	r2, r1, ip, ror #11
   11ec8:	andeq	r2, r1, ip, ror #11
   11ecc:	andeq	r2, r1, ip, ror #11
   11ed0:	andeq	r2, r1, ip, ror #11
   11ed4:	andeq	r2, r1, ip, ror #11
   11ed8:	andeq	r2, r1, ip, ror #11
   11edc:	andeq	r2, r1, ip, ror #11
   11ee0:	andeq	r2, r1, ip, ror #11
   11ee4:	andeq	r2, r1, ip, ror #11
   11ee8:	andeq	r2, r1, ip, ror #11
   11eec:	andeq	r2, r1, ip, ror #11
   11ef0:	andeq	r2, r1, r4, asr r5
   11ef4:			; <UNDEFINED> instruction: 0x000122b0
   11ef8:	andeq	r2, r1, ip, ror #11
   11efc:	andeq	r2, r1, r4, asr r5
   11f00:	andeq	r2, r1, ip, ror #11
   11f04:	andeq	r2, r1, r4, asr r5
   11f08:	andeq	r2, r1, ip, ror #11
   11f0c:	andeq	r2, r1, ip, ror #11
   11f10:	andeq	r2, r1, ip, ror #11
   11f14:	andeq	r2, r1, ip, ror #11
   11f18:	andeq	r2, r1, ip, ror #11
   11f1c:	andeq	r2, r1, ip, ror #11
   11f20:	andeq	r2, r1, ip, ror #11
   11f24:	andeq	r2, r1, ip, ror #11
   11f28:	andeq	r2, r1, ip, ror #11
   11f2c:	andeq	r2, r1, ip, ror #11
   11f30:	andeq	r2, r1, ip, ror #11
   11f34:	andeq	r2, r1, ip, ror #11
   11f38:	andeq	r2, r1, ip, ror #11
   11f3c:	andeq	r2, r1, ip, ror #11
   11f40:	andeq	r2, r1, ip, ror #11
   11f44:	andeq	r2, r1, ip, ror #11
   11f48:	andeq	r2, r1, ip, ror #11
   11f4c:	andeq	r2, r1, ip, ror #11
   11f50:	andeq	r2, r1, ip, ror #11
   11f54:	andeq	r2, r1, ip, ror #11
   11f58:	andeq	r2, r1, ip, ror #11
   11f5c:	andeq	r2, r1, ip, ror #11
   11f60:	andeq	r2, r1, ip, ror #11
   11f64:	andeq	r2, r1, ip, ror #11
   11f68:	andeq	r2, r1, ip, ror #11
   11f6c:	andeq	r2, r1, ip, ror #11
   11f70:	andeq	r2, r1, r4, asr #2
   11f74:	andeq	r2, r1, r4, asr r5
   11f78:	andeq	r2, r1, r4, asr #2
   11f7c:	andeq	r2, r1, r4, ror #2
   11f80:	mov	r3, #1
   11f84:	str	r3, [sp, #28]
   11f88:	str	r3, [sp, #52]	; 0x34
   11f8c:	ldr	r3, [pc, #4000]	; 12f34 <__assert_fail@plt+0x2228>
   11f90:	mov	r7, #0
   11f94:	str	r3, [sp, #64]	; 0x40
   11f98:	mov	r3, #2
   11f9c:	str	r3, [sp, #152]	; 0x98
   11fa0:	b	11ca4 <__assert_fail@plt+0xf98>
   11fa4:	ldr	r3, [sp, #28]
   11fa8:	cmp	r3, #0
   11fac:	beq	12108 <__assert_fail@plt+0x13fc>
   11fb0:	mov	r3, #1
   11fb4:	str	r3, [sp, #52]	; 0x34
   11fb8:	ldr	r3, [pc, #3956]	; 12f34 <__assert_fail@plt+0x2228>
   11fbc:	mov	r7, #0
   11fc0:	str	r3, [sp, #64]	; 0x40
   11fc4:	b	11ca4 <__assert_fail@plt+0xf98>
   11fc8:	mov	r3, #1
   11fcc:	str	r3, [sp, #44]	; 0x2c
   11fd0:	str	r3, [sp, #52]	; 0x34
   11fd4:	str	r3, [sp, #28]
   11fd8:	b	11f8c <__assert_fail@plt+0x1280>
   11fdc:	mov	r3, #0
   11fe0:	str	r3, [sp, #28]
   11fe4:	mov	r3, #1
   11fe8:	str	r3, [sp, #44]	; 0x2c
   11fec:	mov	r7, #0
   11ff0:	b	11ca4 <__assert_fail@plt+0xf98>
   11ff4:	ldr	r3, [sp, #152]	; 0x98
   11ff8:	cmp	r3, #10
   11ffc:	beq	12040 <__assert_fail@plt+0x1334>
   12000:	mov	r2, #5
   12004:	ldr	r1, [pc, #3884]	; 12f38 <__assert_fail@plt+0x222c>
   12008:	mov	r0, #0
   1200c:	bl	10b80 <dcgettext@plt>
   12010:	ldr	r2, [pc, #3872]	; 12f38 <__assert_fail@plt+0x222c>
   12014:	cmp	r0, r2
   12018:	str	r0, [sp, #164]	; 0xa4
   1201c:	beq	13024 <__assert_fail@plt+0x2318>
   12020:	mov	r2, #5
   12024:	ldr	r1, [pc, #3848]	; 12f34 <__assert_fail@plt+0x2228>
   12028:	mov	r0, #0
   1202c:	bl	10b80 <dcgettext@plt>
   12030:	ldr	r2, [pc, #3836]	; 12f34 <__assert_fail@plt+0x2228>
   12034:	cmp	r0, r2
   12038:	str	r0, [sp, #168]	; 0xa8
   1203c:	beq	13014 <__assert_fail@plt+0x2308>
   12040:	ldr	r7, [sp, #28]
   12044:	cmp	r7, #0
   12048:	movne	r7, #0
   1204c:	bne	12080 <__assert_fail@plt+0x1374>
   12050:	ldr	r3, [sp, #164]	; 0xa4
   12054:	ldrb	r3, [r3]
   12058:	cmp	r3, #0
   1205c:	beq	13034 <__assert_fail@plt+0x2328>
   12060:	ldr	r2, [sp, #164]	; 0xa4
   12064:	ldr	r1, [sp, #32]
   12068:	cmp	fp, r7
   1206c:	strbhi	r3, [r1, r7]
   12070:	ldrb	r3, [r2, #1]!
   12074:	add	r7, r7, #1
   12078:	cmp	r3, #0
   1207c:	bne	12068 <__assert_fail@plt+0x135c>
   12080:	ldr	r0, [sp, #168]	; 0xa8
   12084:	bl	10c4c <strlen@plt>
   12088:	ldr	r3, [sp, #168]	; 0xa8
   1208c:	str	r3, [sp, #64]	; 0x40
   12090:	mov	r3, #1
   12094:	str	r3, [sp, #44]	; 0x2c
   12098:	str	r0, [sp, #52]	; 0x34
   1209c:	b	11ca4 <__assert_fail@plt+0xf98>
   120a0:	mov	r3, #1
   120a4:	str	r3, [sp, #44]	; 0x2c
   120a8:	str	r3, [sp, #52]	; 0x34
   120ac:	str	r3, [sp, #28]
   120b0:	ldr	r3, [pc, #3716]	; 12f3c <__assert_fail@plt+0x2230>
   120b4:	mov	r7, #0
   120b8:	str	r3, [sp, #64]	; 0x40
   120bc:	mov	r3, #5
   120c0:	str	r3, [sp, #152]	; 0x98
   120c4:	b	11ca4 <__assert_fail@plt+0xf98>
   120c8:	ldr	r3, [sp, #28]
   120cc:	cmp	r3, #0
   120d0:	beq	12dd0 <__assert_fail@plt+0x20c4>
   120d4:	ldr	r3, [sp, #28]
   120d8:	mov	r7, #0
   120dc:	str	r3, [sp, #44]	; 0x2c
   120e0:	mov	r3, #1
   120e4:	str	r3, [sp, #52]	; 0x34
   120e8:	ldr	r3, [pc, #3660]	; 12f3c <__assert_fail@plt+0x2230>
   120ec:	str	r3, [sp, #64]	; 0x40
   120f0:	b	11ca4 <__assert_fail@plt+0xf98>
   120f4:	ldr	r3, [sp, #28]
   120f8:	cmp	r3, #0
   120fc:	mov	r3, #1
   12100:	streq	r3, [sp, #44]	; 0x2c
   12104:	bne	11f88 <__assert_fail@plt+0x127c>
   12108:	cmp	fp, #0
   1210c:	beq	12e00 <__assert_fail@plt+0x20f4>
   12110:	ldr	r3, [sp, #32]
   12114:	mov	r2, #39	; 0x27
   12118:	mov	r7, #1
   1211c:	strb	r2, [r3]
   12120:	mov	r3, #0
   12124:	str	r3, [sp, #28]
   12128:	mov	r3, #1
   1212c:	str	r3, [sp, #52]	; 0x34
   12130:	ldr	r3, [pc, #3580]	; 12f34 <__assert_fail@plt+0x2228>
   12134:	str	r3, [sp, #64]	; 0x40
   12138:	mov	r3, #2
   1213c:	str	r3, [sp, #152]	; 0x98
   12140:	b	11ca4 <__assert_fail@plt+0xf98>
   12144:	ldr	r3, [sp, #24]
   12148:	cmn	r3, #1
   1214c:	beq	12d64 <__assert_fail@plt+0x2058>
   12150:	ldr	r3, [sp, #24]
   12154:	subs	r3, r3, #1
   12158:	movne	r3, #1
   1215c:	cmp	r3, #0
   12160:	bne	1216c <__assert_fail@plt+0x1460>
   12164:	cmp	sl, #0
   12168:	beq	12558 <__assert_fail@plt+0x184c>
   1216c:	ldr	r3, [sp, #152]	; 0x98
   12170:	mov	r5, #0
   12174:	sub	r2, r3, #2
   12178:	mov	r8, r5
   1217c:	clz	r2, r2
   12180:	lsr	r2, r2, #5
   12184:	ldr	r3, [sp, #60]	; 0x3c
   12188:	ldr	r1, [sp, #28]
   1218c:	orr	r3, r2, r3
   12190:	eor	r3, r3, #1
   12194:	orr	r3, r1, r3
   12198:	tst	r3, #255	; 0xff
   1219c:	bne	128c8 <__assert_fail@plt+0x1bbc>
   121a0:	cmp	r6, #0
   121a4:	bne	122f4 <__assert_fail@plt+0x15e8>
   121a8:	ldr	r3, [sp, #40]	; 0x28
   121ac:	eor	r8, r8, #1
   121b0:	and	r8, r8, r3
   121b4:	add	sl, sl, #1
   121b8:	uxtb	r6, r8
   121bc:	cmp	r6, #0
   121c0:	beq	121f4 <__assert_fail@plt+0x14e8>
   121c4:	cmp	fp, r7
   121c8:	movhi	r2, #39	; 0x27
   121cc:	ldrhi	r3, [sp, #32]
   121d0:	strbhi	r2, [r3, r7]
   121d4:	add	r3, r7, #1
   121d8:	cmp	fp, r3
   121dc:	movhi	r1, #39	; 0x27
   121e0:	ldrhi	r2, [sp, #32]
   121e4:	add	r7, r7, #2
   121e8:	strbhi	r1, [r2, r3]
   121ec:	mov	r3, #0
   121f0:	str	r3, [sp, #40]	; 0x28
   121f4:	cmp	r7, fp
   121f8:	ldrcc	r3, [sp, #32]
   121fc:	strbcc	r4, [r3, r7]
   12200:	ldr	r3, [sp, #36]	; 0x24
   12204:	cmp	r5, #0
   12208:	moveq	r3, #0
   1220c:	str	r3, [sp, #36]	; 0x24
   12210:	ldr	r3, [sp, #24]
   12214:	add	r7, r7, #1
   12218:	cmn	r3, #1
   1221c:	bne	11cc0 <__assert_fail@plt+0xfb4>
   12220:	ldr	r3, [sp, #56]	; 0x38
   12224:	ldrb	r5, [r3, sl]
   12228:	adds	r5, r5, #0
   1222c:	movne	r5, #1
   12230:	cmp	r5, #0
   12234:	bne	11cd4 <__assert_fail@plt+0xfc8>
   12238:	ldr	r3, [sp, #152]	; 0x98
   1223c:	ldr	r1, [sp, #28]
   12240:	sub	r3, r3, #2
   12244:	clz	r3, r3
   12248:	lsr	r3, r3, #5
   1224c:	and	r9, r1, r3
   12250:	cmp	r7, #0
   12254:	movne	r2, #0
   12258:	andeq	r2, r9, #1
   1225c:	cmp	r2, #0
   12260:	bne	12c3c <__assert_fail@plt+0x1f30>
   12264:	eor	r2, r1, #1
   12268:	ands	r3, r3, r2
   1226c:	beq	130f8 <__assert_fail@plt+0x23ec>
   12270:	ldr	r2, [sp, #68]	; 0x44
   12274:	cmp	r2, #0
   12278:	beq	130e4 <__assert_fail@plt+0x23d8>
   1227c:	ldr	r3, [sp, #36]	; 0x24
   12280:	cmp	r3, #0
   12284:	bne	1309c <__assert_fail@plt+0x2390>
   12288:	ldr	r2, [sp, #72]	; 0x48
   1228c:	clz	r3, fp
   12290:	cmp	r2, #0
   12294:	lsr	r3, r3, #5
   12298:	moveq	r3, #0
   1229c:	cmp	r3, #0
   122a0:	beq	1303c <__assert_fail@plt+0x2330>
   122a4:	str	r3, [sp, #68]	; 0x44
   122a8:	ldr	fp, [sp, #72]	; 0x48
   122ac:	b	11c5c <__assert_fail@plt+0xf50>
   122b0:	ldr	r3, [sp, #152]	; 0x98
   122b4:	cmp	r3, #2
   122b8:	beq	1290c <__assert_fail@plt+0x1c00>
   122bc:	ldr	r3, [sp, #44]	; 0x2c
   122c0:	ldr	r2, [sp, #28]
   122c4:	and	r2, r3, r2
   122c8:	ands	r2, r9, r2
   122cc:	bne	12918 <__assert_fail@plt+0x1c0c>
   122d0:	mov	r4, #92	; 0x5c
   122d4:	mov	r3, r4
   122d8:	ldr	r1, [sp, #44]	; 0x2c
   122dc:	cmp	r1, #0
   122e0:	moveq	r5, #0
   122e4:	moveq	r8, r1
   122e8:	beq	12184 <__assert_fail@plt+0x1478>
   122ec:	mov	r4, r3
   122f0:	mov	r5, #0
   122f4:	ldr	r3, [sp, #28]
   122f8:	cmp	r3, #0
   122fc:	bne	12900 <__assert_fail@plt+0x1bf4>
   12300:	ldr	r3, [sp, #40]	; 0x28
   12304:	eor	r9, r3, #1
   12308:	and	r9, r9, r2
   1230c:	ands	r9, r9, #255	; 0xff
   12310:	beq	12354 <__assert_fail@plt+0x1648>
   12314:	cmp	fp, r7
   12318:	movhi	r2, #39	; 0x27
   1231c:	ldrhi	r3, [sp, #32]
   12320:	str	r9, [sp, #40]	; 0x28
   12324:	strbhi	r2, [r3, r7]
   12328:	add	r3, r7, #1
   1232c:	cmp	fp, r3
   12330:	movhi	r1, #36	; 0x24
   12334:	ldrhi	r2, [sp, #32]
   12338:	strbhi	r1, [r2, r3]
   1233c:	add	r3, r7, #2
   12340:	cmp	fp, r3
   12344:	add	r7, r7, #3
   12348:	ldrhi	r2, [sp, #32]
   1234c:	movhi	r1, #39	; 0x27
   12350:	strbhi	r1, [r2, r3]
   12354:	cmp	fp, r7
   12358:	movhi	r2, #92	; 0x5c
   1235c:	ldrhi	r3, [sp, #32]
   12360:	add	sl, sl, #1
   12364:	strbhi	r2, [r3, r7]
   12368:	add	r7, r7, #1
   1236c:	b	121f4 <__assert_fail@plt+0x14e8>
   12370:	ldr	r3, [sp, #152]	; 0x98
   12374:	mov	r4, #11
   12378:	sub	r2, r3, #2
   1237c:	mov	r3, #118	; 0x76
   12380:	clz	r2, r2
   12384:	lsr	r2, r2, #5
   12388:	b	122d8 <__assert_fail@plt+0x15cc>
   1238c:	mov	r4, #10
   12390:	mov	r3, #110	; 0x6e
   12394:	ldr	r2, [sp, #152]	; 0x98
   12398:	ldr	r1, [sp, #28]
   1239c:	sub	r2, r2, #2
   123a0:	clz	r2, r2
   123a4:	lsr	r2, r2, #5
   123a8:	ands	r1, r1, r2
   123ac:	beq	122d8 <__assert_fail@plt+0x15cc>
   123b0:	ldr	sl, [sp, #32]
   123b4:	mov	r8, fp
   123b8:	mov	r2, r1
   123bc:	mov	r3, #2
   123c0:	str	r3, [sp, #152]	; 0x98
   123c4:	ldr	r9, [sp, #44]	; 0x2c
   123c8:	ldr	r3, [sp, #152]	; 0x98
   123cc:	and	r9, r9, r2
   123d0:	tst	r9, #255	; 0xff
   123d4:	movne	r3, #4
   123d8:	str	r3, [sp, #152]	; 0x98
   123dc:	ldr	r3, [sp, #156]	; 0x9c
   123e0:	mov	ip, #0
   123e4:	bic	r3, r3, #2
   123e8:	str	r3, [sp, #4]
   123ec:	ldr	r3, [sp, #168]	; 0xa8
   123f0:	ldr	r2, [sp, #56]	; 0x38
   123f4:	str	r3, [sp, #16]
   123f8:	ldr	r3, [sp, #164]	; 0xa4
   123fc:	mov	r1, r8
   12400:	str	r3, [sp, #12]
   12404:	ldr	r3, [sp, #152]	; 0x98
   12408:	mov	r0, sl
   1240c:	str	r3, [sp]
   12410:	str	ip, [sp, #8]
   12414:	ldr	r3, [sp, #24]
   12418:	bl	11c00 <__assert_fail@plt+0xef4>
   1241c:	mov	fp, r0
   12420:	mov	r0, fp
   12424:	add	sp, sp, #116	; 0x74
   12428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1242c:	ldr	r3, [sp, #152]	; 0x98
   12430:	mov	r4, #8
   12434:	sub	r2, r3, #2
   12438:	mov	r3, #98	; 0x62
   1243c:	clz	r2, r2
   12440:	lsr	r2, r2, #5
   12444:	b	122d8 <__assert_fail@plt+0x15cc>
   12448:	ldr	r3, [sp, #152]	; 0x98
   1244c:	mov	r4, #7
   12450:	sub	r2, r3, #2
   12454:	mov	r3, #97	; 0x61
   12458:	clz	r2, r2
   1245c:	lsr	r2, r2, #5
   12460:	b	122d8 <__assert_fail@plt+0x15cc>
   12464:	ldr	r3, [sp, #44]	; 0x2c
   12468:	cmp	r3, #0
   1246c:	beq	12c50 <__assert_fail@plt+0x1f44>
   12470:	ldr	r3, [sp, #28]
   12474:	cmp	r3, #0
   12478:	bne	12f28 <__assert_fail@plt+0x221c>
   1247c:	ldr	r3, [sp, #152]	; 0x98
   12480:	sub	r2, r3, #2
   12484:	ldr	r3, [sp, #40]	; 0x28
   12488:	clz	r2, r2
   1248c:	eor	r3, r3, #1
   12490:	lsr	r2, r2, #5
   12494:	ands	r3, r2, r3
   12498:	moveq	r1, r7
   1249c:	beq	124e0 <__assert_fail@plt+0x17d4>
   124a0:	cmp	fp, r7
   124a4:	movhi	r0, #39	; 0x27
   124a8:	ldrhi	r1, [sp, #32]
   124ac:	str	r3, [sp, #40]	; 0x28
   124b0:	strbhi	r0, [r1, r7]
   124b4:	add	r1, r7, #1
   124b8:	cmp	fp, r1
   124bc:	movhi	ip, #36	; 0x24
   124c0:	ldrhi	r0, [sp, #32]
   124c4:	strbhi	ip, [r0, r1]
   124c8:	add	r1, r7, #2
   124cc:	cmp	fp, r1
   124d0:	movhi	ip, #39	; 0x27
   124d4:	ldrhi	r0, [sp, #32]
   124d8:	strbhi	ip, [r0, r1]
   124dc:	add	r1, r7, #3
   124e0:	cmp	fp, r1
   124e4:	movhi	r0, #92	; 0x5c
   124e8:	ldrhi	r3, [sp, #32]
   124ec:	add	r7, r1, #1
   124f0:	strbhi	r0, [r3, r1]
   124f4:	cmp	r8, #0
   124f8:	beq	12e3c <__assert_fail@plt+0x2130>
   124fc:	ldr	r0, [sp, #24]
   12500:	add	r3, sl, #1
   12504:	cmp	r3, r0
   12508:	bcs	12d78 <__assert_fail@plt+0x206c>
   1250c:	ldr	r0, [sp, #56]	; 0x38
   12510:	ldrb	r3, [r0, r3]
   12514:	sub	r3, r3, #48	; 0x30
   12518:	cmp	r3, #9
   1251c:	bhi	12d78 <__assert_fail@plt+0x206c>
   12520:	cmp	fp, r7
   12524:	movhi	r3, #48	; 0x30
   12528:	ldrhi	r0, [sp, #32]
   1252c:	ldr	r5, [sp, #28]
   12530:	mov	r4, #48	; 0x30
   12534:	strbhi	r3, [r0, r7]
   12538:	add	r3, r1, #2
   1253c:	cmp	fp, r3
   12540:	movhi	r0, #48	; 0x30
   12544:	ldrhi	ip, [sp, #32]
   12548:	add	r7, r1, #3
   1254c:	strbhi	r0, [ip, r3]
   12550:	b	12184 <__assert_fail@plt+0x1478>
   12554:	mov	r5, #0
   12558:	ldr	r3, [sp, #152]	; 0x98
   1255c:	sub	r2, r3, #2
   12560:	ldr	r3, [sp, #28]
   12564:	clz	r2, r2
   12568:	lsr	r2, r2, #5
   1256c:	ands	r8, r3, r2
   12570:	beq	12184 <__assert_fail@plt+0x1478>
   12574:	mov	r3, r8
   12578:	mov	r2, r3
   1257c:	mov	r3, #2
   12580:	ldr	sl, [sp, #32]
   12584:	mov	r8, fp
   12588:	str	r3, [sp, #152]	; 0x98
   1258c:	b	123c4 <__assert_fail@plt+0x16b8>
   12590:	ldr	r3, [sp, #152]	; 0x98
   12594:	cmp	r3, #2
   12598:	beq	12cbc <__assert_fail@plt+0x1fb0>
   1259c:	cmp	r3, #5
   125a0:	beq	12c7c <__assert_fail@plt+0x1f70>
   125a4:	mov	r5, #0
   125a8:	sub	r2, r3, #2
   125ac:	mov	r8, r5
   125b0:	clz	r2, r2
   125b4:	mov	r4, #63	; 0x3f
   125b8:	lsr	r2, r2, #5
   125bc:	b	12184 <__assert_fail@plt+0x1478>
   125c0:	ldr	r3, [sp, #152]	; 0x98
   125c4:	cmp	r3, #2
   125c8:	beq	12cdc <__assert_fail@plt+0x1fd0>
   125cc:	mov	r2, #0
   125d0:	str	r5, [sp, #68]	; 0x44
   125d4:	mov	r8, r2
   125d8:	mov	r4, #39	; 0x27
   125dc:	b	12184 <__assert_fail@plt+0x1478>
   125e0:	mov	r4, #13
   125e4:	mov	r3, #114	; 0x72
   125e8:	b	12394 <__assert_fail@plt+0x1688>
   125ec:	ldr	r3, [sp, #152]	; 0x98
   125f0:	mov	r8, #0
   125f4:	sub	r2, r3, #2
   125f8:	clz	r2, r2
   125fc:	lsr	r2, r2, #5
   12600:	b	12184 <__assert_fail@plt+0x1478>
   12604:	ldr	r3, [sp, #152]	; 0x98
   12608:	mov	r4, #12
   1260c:	sub	r2, r3, #2
   12610:	mov	r3, #102	; 0x66
   12614:	clz	r2, r2
   12618:	lsr	r2, r2, #5
   1261c:	b	122d8 <__assert_fail@plt+0x15cc>
   12620:	mov	r5, r6
   12624:	b	12558 <__assert_fail@plt+0x184c>
   12628:	ldr	r3, [sp, #152]	; 0x98
   1262c:	sub	r2, r3, #2
   12630:	mov	r3, #116	; 0x74
   12634:	clz	r2, r2
   12638:	lsr	r2, r2, #5
   1263c:	b	122d8 <__assert_fail@plt+0x15cc>
   12640:	ldr	r8, [sp, #76]	; 0x4c
   12644:	cmp	r8, #1
   12648:	bne	12af8 <__assert_fail@plt+0x1dec>
   1264c:	bl	10c34 <__ctype_b_loc@plt>
   12650:	sxth	r3, r4
   12654:	mov	ip, r8
   12658:	lsl	r3, r3, #1
   1265c:	ldr	r2, [r0]
   12660:	ldrh	r3, [r2, r3]
   12664:	and	r3, r3, #16384	; 0x4000
   12668:	cmp	r3, #0
   1266c:	movne	r5, #1
   12670:	moveq	r5, #0
   12674:	moveq	r3, #1
   12678:	movne	r3, #0
   1267c:	ldr	r2, [sp, #44]	; 0x2c
   12680:	and	r3, r3, r2
   12684:	ands	r8, r3, #255	; 0xff
   12688:	bne	1298c <__assert_fail@plt+0x1c80>
   1268c:	ldr	r3, [sp, #152]	; 0x98
   12690:	sub	r2, r3, #2
   12694:	clz	r2, r2
   12698:	lsr	r2, r2, #5
   1269c:	b	12184 <__assert_fail@plt+0x1478>
   126a0:	ldr	r3, [sp, #56]	; 0x38
   126a4:	add	r3, r3, sl
   126a8:	str	r3, [sp, #48]	; 0x30
   126ac:	ldr	r3, [sp, #48]	; 0x30
   126b0:	mov	r6, #0
   126b4:	ldrb	r4, [r3]
   126b8:	cmp	r4, #126	; 0x7e
   126bc:	ldrls	pc, [pc, r4, lsl #2]
   126c0:	b	12640 <__assert_fail@plt+0x1934>
   126c4:	andeq	r2, r1, r4, ror #8
   126c8:	andeq	r2, r1, r0, asr #12
   126cc:	andeq	r2, r1, r0, asr #12
   126d0:	andeq	r2, r1, r0, asr #12
   126d4:	andeq	r2, r1, r0, asr #12
   126d8:	andeq	r2, r1, r0, asr #12
   126dc:	andeq	r2, r1, r0, asr #12
   126e0:	andeq	r2, r1, r8, asr #8
   126e4:	andeq	r2, r1, ip, lsr #8
   126e8:	andeq	r2, r1, r0, asr #17
   126ec:	andeq	r2, r1, ip, lsl #7
   126f0:	andeq	r2, r1, r0, ror r3
   126f4:	andeq	r2, r1, r4, lsl #12
   126f8:	andeq	r2, r1, r0, ror #11
   126fc:	andeq	r2, r1, r0, asr #12
   12700:	andeq	r2, r1, r0, asr #12
   12704:	andeq	r2, r1, r0, asr #12
   12708:	andeq	r2, r1, r0, asr #12
   1270c:	andeq	r2, r1, r0, asr #12
   12710:	andeq	r2, r1, r0, asr #12
   12714:	andeq	r2, r1, r0, asr #12
   12718:	andeq	r2, r1, r0, asr #12
   1271c:	andeq	r2, r1, r0, asr #12
   12720:	andeq	r2, r1, r0, asr #12
   12724:	andeq	r2, r1, r0, asr #12
   12728:	andeq	r2, r1, r0, asr #12
   1272c:	andeq	r2, r1, r0, asr #12
   12730:	andeq	r2, r1, r0, asr #12
   12734:	andeq	r2, r1, r0, asr #12
   12738:	andeq	r2, r1, r0, asr #12
   1273c:	andeq	r2, r1, r0, asr #12
   12740:	andeq	r2, r1, r0, asr #12
   12744:	andeq	r2, r1, r8, asr r5
   12748:	andeq	r2, r1, r4, asr r5
   1274c:	andeq	r2, r1, r4, asr r5
   12750:	andeq	r2, r1, r4, ror #2
   12754:	andeq	r2, r1, r4, asr r5
   12758:	andeq	r2, r1, ip, ror #11
   1275c:	andeq	r2, r1, r4, asr r5
   12760:	andeq	r2, r1, r0, asr #11
   12764:	andeq	r2, r1, r4, asr r5
   12768:	andeq	r2, r1, r4, asr r5
   1276c:	andeq	r2, r1, r4, asr r5
   12770:	andeq	r2, r1, ip, ror #11
   12774:	andeq	r2, r1, ip, ror #11
   12778:	andeq	r2, r1, ip, ror #11
   1277c:	andeq	r2, r1, ip, ror #11
   12780:	andeq	r2, r1, ip, ror #11
   12784:	andeq	r2, r1, ip, ror #11
   12788:	andeq	r2, r1, ip, ror #11
   1278c:	andeq	r2, r1, ip, ror #11
   12790:	andeq	r2, r1, ip, ror #11
   12794:	andeq	r2, r1, ip, ror #11
   12798:	andeq	r2, r1, ip, ror #11
   1279c:	andeq	r2, r1, ip, ror #11
   127a0:	andeq	r2, r1, ip, ror #11
   127a4:	andeq	r2, r1, ip, ror #11
   127a8:	andeq	r2, r1, ip, ror #11
   127ac:	andeq	r2, r1, ip, ror #11
   127b0:	andeq	r2, r1, r4, asr r5
   127b4:	andeq	r2, r1, r4, asr r5
   127b8:	andeq	r2, r1, r4, asr r5
   127bc:	andeq	r2, r1, r4, asr r5
   127c0:	muleq	r1, r0, r5
   127c4:	andeq	r2, r1, r0, asr #12
   127c8:	andeq	r2, r1, ip, ror #11
   127cc:	andeq	r2, r1, ip, ror #11
   127d0:	andeq	r2, r1, ip, ror #11
   127d4:	andeq	r2, r1, ip, ror #11
   127d8:	andeq	r2, r1, ip, ror #11
   127dc:	andeq	r2, r1, ip, ror #11
   127e0:	andeq	r2, r1, ip, ror #11
   127e4:	andeq	r2, r1, ip, ror #11
   127e8:	andeq	r2, r1, ip, ror #11
   127ec:	andeq	r2, r1, ip, ror #11
   127f0:	andeq	r2, r1, ip, ror #11
   127f4:	andeq	r2, r1, ip, ror #11
   127f8:	andeq	r2, r1, ip, ror #11
   127fc:	andeq	r2, r1, ip, ror #11
   12800:	andeq	r2, r1, ip, ror #11
   12804:	andeq	r2, r1, ip, ror #11
   12808:	andeq	r2, r1, ip, ror #11
   1280c:	andeq	r2, r1, ip, ror #11
   12810:	andeq	r2, r1, ip, ror #11
   12814:	andeq	r2, r1, ip, ror #11
   12818:	andeq	r2, r1, ip, ror #11
   1281c:	andeq	r2, r1, ip, ror #11
   12820:	andeq	r2, r1, ip, ror #11
   12824:	andeq	r2, r1, ip, ror #11
   12828:	andeq	r2, r1, ip, ror #11
   1282c:	andeq	r2, r1, ip, ror #11
   12830:	andeq	r2, r1, r4, asr r5
   12834:			; <UNDEFINED> instruction: 0x000122b0
   12838:	andeq	r2, r1, ip, ror #11
   1283c:	andeq	r2, r1, r4, asr r5
   12840:	andeq	r2, r1, ip, ror #11
   12844:	andeq	r2, r1, r4, asr r5
   12848:	andeq	r2, r1, ip, ror #11
   1284c:	andeq	r2, r1, ip, ror #11
   12850:	andeq	r2, r1, ip, ror #11
   12854:	andeq	r2, r1, ip, ror #11
   12858:	andeq	r2, r1, ip, ror #11
   1285c:	andeq	r2, r1, ip, ror #11
   12860:	andeq	r2, r1, ip, ror #11
   12864:	andeq	r2, r1, ip, ror #11
   12868:	andeq	r2, r1, ip, ror #11
   1286c:	andeq	r2, r1, ip, ror #11
   12870:	andeq	r2, r1, ip, ror #11
   12874:	andeq	r2, r1, ip, ror #11
   12878:	andeq	r2, r1, ip, ror #11
   1287c:	andeq	r2, r1, ip, ror #11
   12880:	andeq	r2, r1, ip, ror #11
   12884:	andeq	r2, r1, ip, ror #11
   12888:	andeq	r2, r1, ip, ror #11
   1288c:	andeq	r2, r1, ip, ror #11
   12890:	andeq	r2, r1, ip, ror #11
   12894:	andeq	r2, r1, ip, ror #11
   12898:	andeq	r2, r1, ip, ror #11
   1289c:	andeq	r2, r1, ip, ror #11
   128a0:	andeq	r2, r1, ip, ror #11
   128a4:	andeq	r2, r1, ip, ror #11
   128a8:	andeq	r2, r1, ip, ror #11
   128ac:	andeq	r2, r1, ip, ror #11
   128b0:	andeq	r2, r1, r4, asr #2
   128b4:	andeq	r2, r1, r4, asr r5
   128b8:	andeq	r2, r1, r4, asr #2
   128bc:	andeq	r2, r1, r4, ror #2
   128c0:	mov	r3, #116	; 0x74
   128c4:	b	12394 <__assert_fail@plt+0x1688>
   128c8:	ldr	r3, [sp, #160]	; 0xa0
   128cc:	cmp	r3, #0
   128d0:	beq	121a0 <__assert_fail@plt+0x1494>
   128d4:	lsr	r3, r4, #5
   128d8:	ldr	r0, [sp, #160]	; 0xa0
   128dc:	uxtb	r3, r3
   128e0:	and	r1, r4, #31
   128e4:	ldr	r0, [r0, r3, lsl #2]
   128e8:	lsr	r3, r0, r1
   128ec:	tst	r3, #1
   128f0:	beq	121a0 <__assert_fail@plt+0x1494>
   128f4:	ldr	r3, [sp, #28]
   128f8:	cmp	r3, #0
   128fc:	beq	12300 <__assert_fail@plt+0x15f4>
   12900:	ldr	sl, [sp, #32]
   12904:	mov	r8, fp
   12908:	b	123c4 <__assert_fail@plt+0x16b8>
   1290c:	ldr	r3, [sp, #28]
   12910:	cmp	r3, #0
   12914:	bne	12e68 <__assert_fail@plt+0x215c>
   12918:	add	sl, sl, #1
   1291c:	ldr	r6, [sp, #40]	; 0x28
   12920:	mov	r5, #0
   12924:	mov	r4, #92	; 0x5c
   12928:	b	121bc <__assert_fail@plt+0x14b0>
   1292c:	cmp	r9, r8
   12930:	bne	12ba0 <__assert_fail@plt+0x1e94>
   12934:	ldr	r0, [sp, #100]	; 0x64
   12938:	bl	10ba4 <iswprint@plt>
   1293c:	add	r5, r5, r4
   12940:	cmp	r0, #0
   12944:	add	r0, sp, #104	; 0x68
   12948:	moveq	r6, #0
   1294c:	bl	10b5c <mbsinit@plt>
   12950:	cmp	r0, #0
   12954:	beq	12b34 <__assert_fail@plt+0x1e28>
   12958:	mov	r2, r6
   1295c:	mov	ip, r5
   12960:	eor	r5, r2, #1
   12964:	ldr	r4, [sp, #80]	; 0x50
   12968:	ldr	r6, [sp, #84]	; 0x54
   1296c:	ldr	r7, [sp, #88]	; 0x58
   12970:	uxtb	r5, r5
   12974:	cmp	ip, #1
   12978:	bls	12e78 <__assert_fail@plt+0x216c>
   1297c:	ldr	r3, [sp, #44]	; 0x2c
   12980:	and	r8, r3, r5
   12984:	mov	r5, r2
   12988:	uxtb	r8, r8
   1298c:	add	r2, sl, ip
   12990:	ldr	r0, [sp, #48]	; 0x30
   12994:	mov	r1, #0
   12998:	str	r5, [sp, #48]	; 0x30
   1299c:	ldr	r9, [sp, #28]
   129a0:	ldr	ip, [sp, #40]	; 0x28
   129a4:	ldr	r3, [sp, #32]
   129a8:	ldr	r5, [sp, #152]	; 0x98
   129ac:	b	12a68 <__assert_fail@plt+0x1d5c>
   129b0:	cmp	r9, #0
   129b4:	bne	12d8c <__assert_fail@plt+0x2080>
   129b8:	eor	r1, ip, #1
   129bc:	cmp	r5, #2
   129c0:	movne	r1, #0
   129c4:	andeq	r1, r1, #1
   129c8:	cmp	r1, #0
   129cc:	beq	12a04 <__assert_fail@plt+0x1cf8>
   129d0:	cmp	fp, r7
   129d4:	movhi	ip, #39	; 0x27
   129d8:	strbhi	ip, [r3, r7]
   129dc:	add	ip, r7, #1
   129e0:	cmp	fp, ip
   129e4:	movhi	lr, #36	; 0x24
   129e8:	strbhi	lr, [r3, ip]
   129ec:	add	ip, r7, #2
   129f0:	cmp	fp, ip
   129f4:	movhi	lr, #39	; 0x27
   129f8:	strbhi	lr, [r3, ip]
   129fc:	add	r7, r7, #3
   12a00:	mov	ip, r1
   12a04:	cmp	fp, r7
   12a08:	movhi	r1, #92	; 0x5c
   12a0c:	strbhi	r1, [r3, r7]
   12a10:	add	r1, r7, #1
   12a14:	cmp	fp, r1
   12a18:	lsrhi	lr, r4, #6
   12a1c:	addhi	lr, lr, #48	; 0x30
   12a20:	strbhi	lr, [r3, r1]
   12a24:	add	lr, r7, #2
   12a28:	cmp	fp, lr
   12a2c:	lsrhi	r1, r4, #3
   12a30:	andhi	r1, r1, #7
   12a34:	addhi	r1, r1, #48	; 0x30
   12a38:	add	sl, sl, #1
   12a3c:	strbhi	r1, [r3, lr]
   12a40:	and	r4, r4, #7
   12a44:	cmp	r2, sl
   12a48:	add	r4, r4, #48	; 0x30
   12a4c:	add	r7, r7, #3
   12a50:	bls	12db0 <__assert_fail@plt+0x20a4>
   12a54:	mov	r1, r8
   12a58:	cmp	fp, r7
   12a5c:	strbhi	r4, [r3, r7]
   12a60:	ldrb	r4, [r0, #1]!
   12a64:	add	r7, r7, #1
   12a68:	cmp	r8, #0
   12a6c:	bne	129b0 <__assert_fail@plt+0x1ca4>
   12a70:	cmp	r6, #0
   12a74:	bne	12ac4 <__assert_fail@plt+0x1db8>
   12a78:	eor	r6, r1, #1
   12a7c:	and	r6, r6, ip
   12a80:	add	sl, sl, #1
   12a84:	cmp	r2, sl
   12a88:	uxtb	r6, r6
   12a8c:	bls	12aec <__assert_fail@plt+0x1de0>
   12a90:	cmp	r6, #0
   12a94:	beq	12a58 <__assert_fail@plt+0x1d4c>
   12a98:	cmp	fp, r7
   12a9c:	movhi	ip, #39	; 0x27
   12aa0:	strbhi	ip, [r3, r7]
   12aa4:	add	ip, r7, #1
   12aa8:	cmp	fp, ip
   12aac:	movhi	lr, #39	; 0x27
   12ab0:	strbhi	lr, [r3, ip]
   12ab4:	add	r7, r7, #2
   12ab8:	mov	r6, r8
   12abc:	mov	ip, r8
   12ac0:	b	12a58 <__assert_fail@plt+0x1d4c>
   12ac4:	cmp	fp, r7
   12ac8:	eor	r6, r1, #1
   12acc:	movhi	lr, #92	; 0x5c
   12ad0:	and	r6, r6, ip
   12ad4:	add	sl, sl, #1
   12ad8:	strbhi	lr, [r3, r7]
   12adc:	cmp	r2, sl
   12ae0:	add	r7, r7, #1
   12ae4:	uxtb	r6, r6
   12ae8:	bhi	12a90 <__assert_fail@plt+0x1d84>
   12aec:	str	ip, [sp, #40]	; 0x28
   12af0:	ldr	r5, [sp, #48]	; 0x30
   12af4:	b	121bc <__assert_fail@plt+0x14b0>
   12af8:	ldr	r3, [sp, #24]
   12afc:	cmn	r3, #1
   12b00:	mov	r3, #0
   12b04:	str	r3, [sp, #104]	; 0x68
   12b08:	str	r3, [sp, #108]	; 0x6c
   12b0c:	beq	12e2c <__assert_fail@plt+0x2120>
   12b10:	mov	r2, r5
   12b14:	mov	r3, #0
   12b18:	str	r7, [sp, #88]	; 0x58
   12b1c:	ldr	r7, [sp, #152]	; 0x98
   12b20:	str	r5, [sp, #92]	; 0x5c
   12b24:	str	r6, [sp, #84]	; 0x54
   12b28:	mov	r5, r3
   12b2c:	mov	r6, r2
   12b30:	str	r4, [sp, #80]	; 0x50
   12b34:	ldr	r3, [sp, #56]	; 0x38
   12b38:	add	r9, sl, r5
   12b3c:	add	r8, r3, r9
   12b40:	ldr	r3, [sp, #24]
   12b44:	mov	r1, r8
   12b48:	sub	r2, r3, r9
   12b4c:	add	r0, sp, #100	; 0x64
   12b50:	add	r3, sp, #104	; 0x68
   12b54:	bl	146f4 <__assert_fail@plt+0x39e8>
   12b58:	subs	r4, r0, #0
   12b5c:	beq	12f04 <__assert_fail@plt+0x21f8>
   12b60:	cmn	r4, #1
   12b64:	beq	12ee4 <__assert_fail@plt+0x21d8>
   12b68:	cmn	r4, #2
   12b6c:	beq	12e84 <__assert_fail@plt+0x2178>
   12b70:	ldr	r2, [sp, #28]
   12b74:	cmp	r7, #2
   12b78:	movne	r2, #0
   12b7c:	andeq	r2, r2, #1
   12b80:	cmp	r2, #0
   12b84:	beq	12934 <__assert_fail@plt+0x1c28>
   12b88:	cmp	r4, #1
   12b8c:	beq	12934 <__assert_fail@plt+0x1c28>
   12b90:	sub	r3, r4, #1
   12b94:	add	r9, r3, r9
   12b98:	ldr	r3, [sp, #56]	; 0x38
   12b9c:	add	r9, r3, r9
   12ba0:	ldrb	r3, [r8, #1]!
   12ba4:	sub	r3, r3, #91	; 0x5b
   12ba8:	cmp	r3, #33	; 0x21
   12bac:	ldrls	pc, [pc, r3, lsl #2]
   12bb0:	b	1292c <__assert_fail@plt+0x1c20>
   12bb4:	andeq	r2, r1, ip, lsr ip
   12bb8:	andeq	r2, r1, ip, lsr ip
   12bbc:	andeq	r2, r1, ip, lsr #18
   12bc0:	andeq	r2, r1, ip, lsr ip
   12bc4:	andeq	r2, r1, ip, lsr #18
   12bc8:	andeq	r2, r1, ip, lsr ip
   12bcc:	andeq	r2, r1, ip, lsr #18
   12bd0:	andeq	r2, r1, ip, lsr #18
   12bd4:	andeq	r2, r1, ip, lsr #18
   12bd8:	andeq	r2, r1, ip, lsr #18
   12bdc:	andeq	r2, r1, ip, lsr #18
   12be0:	andeq	r2, r1, ip, lsr #18
   12be4:	andeq	r2, r1, ip, lsr #18
   12be8:	andeq	r2, r1, ip, lsr #18
   12bec:	andeq	r2, r1, ip, lsr #18
   12bf0:	andeq	r2, r1, ip, lsr #18
   12bf4:	andeq	r2, r1, ip, lsr #18
   12bf8:	andeq	r2, r1, ip, lsr #18
   12bfc:	andeq	r2, r1, ip, lsr #18
   12c00:	andeq	r2, r1, ip, lsr #18
   12c04:	andeq	r2, r1, ip, lsr #18
   12c08:	andeq	r2, r1, ip, lsr #18
   12c0c:	andeq	r2, r1, ip, lsr #18
   12c10:	andeq	r2, r1, ip, lsr #18
   12c14:	andeq	r2, r1, ip, lsr #18
   12c18:	andeq	r2, r1, ip, lsr #18
   12c1c:	andeq	r2, r1, ip, lsr #18
   12c20:	andeq	r2, r1, ip, lsr #18
   12c24:	andeq	r2, r1, ip, lsr #18
   12c28:	andeq	r2, r1, ip, lsr #18
   12c2c:	andeq	r2, r1, ip, lsr #18
   12c30:	andeq	r2, r1, ip, lsr #18
   12c34:	andeq	r2, r1, ip, lsr #18
   12c38:	andeq	r2, r1, ip, lsr ip
   12c3c:	mov	r3, #2
   12c40:	ldr	sl, [sp, #32]
   12c44:	mov	r8, fp
   12c48:	str	r3, [sp, #152]	; 0x98
   12c4c:	b	123c4 <__assert_fail@plt+0x16b8>
   12c50:	ldr	r3, [sp, #156]	; 0x9c
   12c54:	tst	r3, #1
   12c58:	bne	12d84 <__assert_fail@plt+0x2078>
   12c5c:	ldr	r3, [sp, #152]	; 0x98
   12c60:	ldr	r4, [sp, #44]	; 0x2c
   12c64:	sub	r2, r3, #2
   12c68:	mov	r5, #0
   12c6c:	clz	r2, r2
   12c70:	mov	r8, r4
   12c74:	lsr	r2, r2, #5
   12c78:	b	12184 <__assert_fail@plt+0x1478>
   12c7c:	ldr	r3, [sp, #156]	; 0x9c
   12c80:	ands	r9, r3, #4
   12c84:	beq	12dbc <__assert_fail@plt+0x20b0>
   12c88:	ldr	r2, [sp, #24]
   12c8c:	add	r3, sl, #2
   12c90:	cmp	r3, r2
   12c94:	bcs	12ca8 <__assert_fail@plt+0x1f9c>
   12c98:	ldr	r2, [sp, #48]	; 0x30
   12c9c:	ldrb	r4, [r2, #1]
   12ca0:	cmp	r4, #63	; 0x3f
   12ca4:	beq	12f44 <__assert_fail@plt+0x2238>
   12ca8:	mov	r2, #0
   12cac:	mov	r8, r2
   12cb0:	mov	r5, r2
   12cb4:	mov	r4, #63	; 0x3f
   12cb8:	b	12184 <__assert_fail@plt+0x1478>
   12cbc:	ldr	r3, [sp, #28]
   12cc0:	cmp	r3, #0
   12cc4:	bne	12fe8 <__assert_fail@plt+0x22dc>
   12cc8:	mov	r2, r5
   12ccc:	mov	r8, r3
   12cd0:	mov	r5, #0
   12cd4:	mov	r4, #63	; 0x3f
   12cd8:	b	12184 <__assert_fail@plt+0x1478>
   12cdc:	ldr	r3, [sp, #28]
   12ce0:	cmp	r3, #0
   12ce4:	bne	12fe8 <__assert_fail@plt+0x22dc>
   12ce8:	ldr	r2, [sp, #72]	; 0x48
   12cec:	adds	r3, fp, #0
   12cf0:	movne	r3, #1
   12cf4:	cmp	r2, #0
   12cf8:	movne	r3, #0
   12cfc:	cmp	r3, #0
   12d00:	strne	fp, [sp, #72]	; 0x48
   12d04:	movne	fp, #0
   12d08:	bne	12d44 <__assert_fail@plt+0x2038>
   12d0c:	cmp	fp, r7
   12d10:	movhi	r2, #39	; 0x27
   12d14:	ldrhi	r3, [sp, #32]
   12d18:	strbhi	r2, [r3, r7]
   12d1c:	add	r3, r7, #1
   12d20:	cmp	fp, r3
   12d24:	movhi	r1, #92	; 0x5c
   12d28:	ldrhi	r2, [sp, #32]
   12d2c:	strbhi	r1, [r2, r3]
   12d30:	add	r3, r7, #2
   12d34:	cmp	fp, r3
   12d38:	movhi	r1, #39	; 0x27
   12d3c:	ldrhi	r2, [sp, #32]
   12d40:	strbhi	r1, [r2, r3]
   12d44:	ldr	r3, [sp, #28]
   12d48:	add	r7, r7, #3
   12d4c:	mov	r2, r5
   12d50:	mov	r8, r3
   12d54:	str	r5, [sp, #68]	; 0x44
   12d58:	str	r3, [sp, #40]	; 0x28
   12d5c:	mov	r4, #39	; 0x27
   12d60:	b	12184 <__assert_fail@plt+0x1478>
   12d64:	ldr	r3, [sp, #56]	; 0x38
   12d68:	ldrb	r3, [r3, #1]
   12d6c:	adds	r3, r3, #0
   12d70:	movne	r3, #1
   12d74:	b	1215c <__assert_fail@plt+0x1450>
   12d78:	ldr	r5, [sp, #28]
   12d7c:	mov	r4, #48	; 0x30
   12d80:	b	12184 <__assert_fail@plt+0x1478>
   12d84:	add	sl, sl, #1
   12d88:	b	11cb4 <__assert_fail@plt+0xfa8>
   12d8c:	mov	sl, r3
   12d90:	ldr	r3, [sp, #28]
   12d94:	mov	r8, fp
   12d98:	str	r3, [sp, #44]	; 0x2c
   12d9c:	ldr	r3, [sp, #152]	; 0x98
   12da0:	sub	r2, r3, #2
   12da4:	clz	r2, r2
   12da8:	lsr	r2, r2, #5
   12dac:	b	123c4 <__assert_fail@plt+0x16b8>
   12db0:	str	ip, [sp, #40]	; 0x28
   12db4:	ldr	r5, [sp, #48]	; 0x30
   12db8:	b	121f4 <__assert_fail@plt+0x14e8>
   12dbc:	mov	r2, r9
   12dc0:	mov	r8, r9
   12dc4:	mov	r5, #0
   12dc8:	mov	r4, #63	; 0x3f
   12dcc:	b	12184 <__assert_fail@plt+0x1478>
   12dd0:	cmp	fp, #0
   12dd4:	beq	12e4c <__assert_fail@plt+0x2140>
   12dd8:	ldr	r1, [sp, #32]
   12ddc:	mov	r3, #34	; 0x22
   12de0:	mov	r2, #1
   12de4:	strb	r3, [r1]
   12de8:	ldr	r3, [pc, #332]	; 12f3c <__assert_fail@plt+0x2230>
   12dec:	str	r2, [sp, #52]	; 0x34
   12df0:	mov	r7, r2
   12df4:	str	r2, [sp, #44]	; 0x2c
   12df8:	str	r3, [sp, #64]	; 0x40
   12dfc:	b	11ca4 <__assert_fail@plt+0xf98>
   12e00:	ldr	r3, [pc, #300]	; 12f34 <__assert_fail@plt+0x2228>
   12e04:	str	r3, [sp, #64]	; 0x40
   12e08:	mov	r3, #0
   12e0c:	str	r3, [sp, #28]
   12e10:	mov	r3, #1
   12e14:	str	r3, [sp, #52]	; 0x34
   12e18:	mov	r7, r3
   12e1c:	mov	r3, #2
   12e20:	str	r3, [sp, #152]	; 0x98
   12e24:	b	11ca4 <__assert_fail@plt+0xf98>
   12e28:	bl	10d00 <abort@plt>
   12e2c:	ldr	r0, [sp, #56]	; 0x38
   12e30:	bl	10c4c <strlen@plt>
   12e34:	str	r0, [sp, #24]
   12e38:	b	12b10 <__assert_fail@plt+0x1e04>
   12e3c:	mov	r5, r8
   12e40:	mov	r4, #48	; 0x30
   12e44:	ldr	r8, [sp, #44]	; 0x2c
   12e48:	b	12184 <__assert_fail@plt+0x1478>
   12e4c:	mov	r3, #1
   12e50:	str	r3, [sp, #52]	; 0x34
   12e54:	mov	r7, r3
   12e58:	str	r3, [sp, #44]	; 0x2c
   12e5c:	ldr	r3, [pc, #216]	; 12f3c <__assert_fail@plt+0x2230>
   12e60:	str	r3, [sp, #64]	; 0x40
   12e64:	b	11ca4 <__assert_fail@plt+0xf98>
   12e68:	ldr	sl, [sp, #32]
   12e6c:	mov	r8, fp
   12e70:	mov	r2, r3
   12e74:	b	123c4 <__assert_fail@plt+0x16b8>
   12e78:	mov	r3, r5
   12e7c:	mov	r5, r2
   12e80:	b	1267c <__assert_fail@plt+0x1970>
   12e84:	ldr	r1, [sp, #24]
   12e88:	mov	r2, r5
   12e8c:	cmp	r1, r9
   12e90:	mov	ip, r5
   12e94:	ldr	r4, [sp, #80]	; 0x50
   12e98:	ldr	r5, [sp, #92]	; 0x5c
   12e9c:	ldr	r6, [sp, #84]	; 0x54
   12ea0:	ldr	r7, [sp, #88]	; 0x58
   12ea4:	bls	12ed8 <__assert_fail@plt+0x21cc>
   12ea8:	ldrb	r3, [r8]
   12eac:	cmp	r3, #0
   12eb0:	bne	12ec4 <__assert_fail@plt+0x21b8>
   12eb4:	b	12edc <__assert_fail@plt+0x21d0>
   12eb8:	ldrb	r3, [r8, #1]!
   12ebc:	cmp	r3, #0
   12ec0:	beq	12fdc <__assert_fail@plt+0x22d0>
   12ec4:	add	r2, r2, #1
   12ec8:	add	r3, sl, r2
   12ecc:	cmp	r1, r3
   12ed0:	bhi	12eb8 <__assert_fail@plt+0x21ac>
   12ed4:	mov	ip, r2
   12ed8:	mov	r3, #0
   12edc:	mov	r2, r3
   12ee0:	b	12974 <__assert_fail@plt+0x1c68>
   12ee4:	mov	r3, #0
   12ee8:	mov	ip, r5
   12eec:	ldr	r4, [sp, #80]	; 0x50
   12ef0:	ldr	r5, [sp, #92]	; 0x5c
   12ef4:	ldr	r6, [sp, #84]	; 0x54
   12ef8:	ldr	r7, [sp, #88]	; 0x58
   12efc:	mov	r2, r3
   12f00:	b	12974 <__assert_fail@plt+0x1c68>
   12f04:	mov	r3, r6
   12f08:	mov	ip, r5
   12f0c:	eor	r5, r3, #1
   12f10:	mov	r2, r6
   12f14:	ldr	r4, [sp, #80]	; 0x50
   12f18:	ldr	r6, [sp, #84]	; 0x54
   12f1c:	ldr	r7, [sp, #88]	; 0x58
   12f20:	uxtb	r5, r5
   12f24:	b	12974 <__assert_fail@plt+0x1c68>
   12f28:	ldr	sl, [sp, #32]
   12f2c:	mov	r8, fp
   12f30:	b	12d98 <__assert_fail@plt+0x208c>
   12f34:	andeq	r5, r1, r8, lsr #9
   12f38:	andeq	r5, r1, ip, lsr #9
   12f3c:	andeq	r5, r1, r4, lsr #9
   12f40:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12f44:	ldr	r2, [sp, #56]	; 0x38
   12f48:	ldrb	r1, [r2, r3]
   12f4c:	sub	r2, r1, #33	; 0x21
   12f50:	uxtb	r2, r2
   12f54:	cmp	r2, #29
   12f58:	bhi	12ff8 <__assert_fail@plt+0x22ec>
   12f5c:	ldr	r0, [pc, #-36]	; 12f40 <__assert_fail@plt+0x2234>
   12f60:	mov	ip, #1
   12f64:	ands	r2, r0, ip, lsl r2
   12f68:	beq	13008 <__assert_fail@plt+0x22fc>
   12f6c:	ldr	r2, [sp, #28]
   12f70:	cmp	r2, #0
   12f74:	bne	13108 <__assert_fail@plt+0x23fc>
   12f78:	cmp	fp, r7
   12f7c:	ldr	r8, [sp, #28]
   12f80:	ldrhi	r2, [sp, #32]
   12f84:	mov	sl, r3
   12f88:	mov	r5, r8
   12f8c:	strbhi	r4, [r2, r7]
   12f90:	add	r2, r7, #1
   12f94:	cmp	fp, r2
   12f98:	movhi	r0, #34	; 0x22
   12f9c:	ldrhi	ip, [sp, #32]
   12fa0:	mov	r4, r1
   12fa4:	strbhi	r0, [ip, r2]
   12fa8:	add	r2, r7, #2
   12fac:	cmp	fp, r2
   12fb0:	movhi	r0, #34	; 0x22
   12fb4:	ldrhi	ip, [sp, #32]
   12fb8:	strbhi	r0, [ip, r2]
   12fbc:	add	r2, r7, #3
   12fc0:	cmp	fp, r2
   12fc4:	movhi	r0, #63	; 0x3f
   12fc8:	ldrhi	ip, [sp, #32]
   12fcc:	add	r7, r7, #4
   12fd0:	strbhi	r0, [ip, r2]
   12fd4:	mov	r2, r8
   12fd8:	b	12184 <__assert_fail@plt+0x1478>
   12fdc:	mov	ip, r2
   12fe0:	mov	r2, r3
   12fe4:	b	12974 <__assert_fail@plt+0x1c68>
   12fe8:	ldr	sl, [sp, #32]
   12fec:	mov	r8, fp
   12ff0:	ldr	r2, [sp, #28]
   12ff4:	b	123c4 <__assert_fail@plt+0x16b8>
   12ff8:	mov	r2, #0
   12ffc:	mov	r8, r2
   13000:	mov	r5, r2
   13004:	b	12184 <__assert_fail@plt+0x1478>
   13008:	mov	r8, r2
   1300c:	mov	r5, #0
   13010:	b	12184 <__assert_fail@plt+0x1478>
   13014:	ldr	r1, [sp, #152]	; 0x98
   13018:	bl	11ae0 <__assert_fail@plt+0xdd4>
   1301c:	str	r0, [sp, #168]	; 0xa8
   13020:	b	12040 <__assert_fail@plt+0x1334>
   13024:	ldr	r1, [sp, #152]	; 0x98
   13028:	bl	11ae0 <__assert_fail@plt+0xdd4>
   1302c:	str	r0, [sp, #164]	; 0xa4
   13030:	b	12020 <__assert_fail@plt+0x1314>
   13034:	ldr	r7, [sp, #28]
   13038:	b	12080 <__assert_fail@plt+0x1374>
   1303c:	ldr	sl, [sp, #32]
   13040:	ldr	r2, [sp, #68]	; 0x44
   13044:	mov	r8, fp
   13048:	mov	fp, r7
   1304c:	ldr	r3, [sp, #64]	; 0x40
   13050:	cmp	r3, #0
   13054:	moveq	r2, #0
   13058:	andne	r2, r2, #1
   1305c:	cmp	r2, #0
   13060:	beq	1308c <__assert_fail@plt+0x2380>
   13064:	mov	r2, r3
   13068:	ldrb	r3, [r3]
   1306c:	cmp	r3, #0
   13070:	beq	1308c <__assert_fail@plt+0x2380>
   13074:	cmp	r8, fp
   13078:	strbhi	r3, [sl, fp]
   1307c:	ldrb	r3, [r2, #1]!
   13080:	add	fp, fp, #1
   13084:	cmp	r3, #0
   13088:	bne	13074 <__assert_fail@plt+0x2368>
   1308c:	cmp	r8, fp
   13090:	movhi	r3, #0
   13094:	strbhi	r3, [sl, fp]
   13098:	b	12420 <__assert_fail@plt+0x1714>
   1309c:	ldr	r3, [sp, #168]	; 0xa8
   130a0:	ldr	sl, [sp, #32]
   130a4:	str	r3, [sp, #16]
   130a8:	ldr	r3, [sp, #164]	; 0xa4
   130ac:	mov	ip, #5
   130b0:	str	r3, [sp, #12]
   130b4:	ldr	r3, [sp, #160]	; 0xa0
   130b8:	ldr	r2, [sp, #56]	; 0x38
   130bc:	str	r3, [sp, #8]
   130c0:	ldr	r3, [sp, #156]	; 0x9c
   130c4:	ldr	r1, [sp, #72]	; 0x48
   130c8:	str	r3, [sp, #4]
   130cc:	mov	r0, sl
   130d0:	ldr	r3, [sp, #24]
   130d4:	str	ip, [sp]
   130d8:	bl	11c00 <__assert_fail@plt+0xef4>
   130dc:	mov	fp, r0
   130e0:	b	12420 <__assert_fail@plt+0x1714>
   130e4:	mov	r8, fp
   130e8:	ldr	sl, [sp, #32]
   130ec:	mov	fp, r7
   130f0:	mov	r2, r3
   130f4:	b	1304c <__assert_fail@plt+0x2340>
   130f8:	mov	r8, fp
   130fc:	ldr	sl, [sp, #32]
   13100:	mov	fp, r7
   13104:	b	1304c <__assert_fail@plt+0x2340>
   13108:	ldr	sl, [sp, #32]
   1310c:	mov	r8, fp
   13110:	b	123dc <__assert_fail@plt+0x16d0>
   13114:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13118:	sub	sp, sp, #52	; 0x34
   1311c:	mov	r4, r0
   13120:	mov	r5, r3
   13124:	mov	sl, r1
   13128:	mov	fp, r2
   1312c:	bl	10c58 <__errno_location@plt>
   13130:	ldr	r7, [pc, #412]	; 132d4 <__assert_fail@plt+0x25c8>
   13134:	cmn	r4, #-2147483647	; 0x80000001
   13138:	ldr	r6, [r7]
   1313c:	mov	r8, r0
   13140:	movne	r0, #0
   13144:	moveq	r0, #1
   13148:	ldr	r3, [r8]
   1314c:	orrs	r0, r0, r4, lsr #31
   13150:	str	r3, [sp, #24]
   13154:	bne	132d0 <__assert_fail@plt+0x25c4>
   13158:	ldr	r2, [r7, #4]
   1315c:	cmp	r4, r2
   13160:	blt	131c0 <__assert_fail@plt+0x24b4>
   13164:	add	r9, r7, #8
   13168:	cmp	r6, r9
   1316c:	str	r2, [sp, #44]	; 0x2c
   13170:	beq	132a0 <__assert_fail@plt+0x2594>
   13174:	mov	r3, #8
   13178:	sub	r2, r4, r2
   1317c:	mov	r0, r6
   13180:	str	r3, [sp]
   13184:	add	r2, r2, #1
   13188:	mvn	r3, #-2147483648	; 0x80000000
   1318c:	add	r1, sp, #44	; 0x2c
   13190:	bl	13f80 <__assert_fail@plt+0x3274>
   13194:	mov	r6, r0
   13198:	str	r0, [r7]
   1319c:	ldr	r0, [r7, #4]
   131a0:	ldr	r2, [sp, #44]	; 0x2c
   131a4:	mov	r1, #0
   131a8:	sub	r2, r2, r0
   131ac:	add	r0, r6, r0, lsl #3
   131b0:	lsl	r2, r2, #3
   131b4:	bl	10c70 <memset@plt>
   131b8:	ldr	r3, [sp, #44]	; 0x2c
   131bc:	str	r3, [r7, #4]
   131c0:	add	r3, r6, r4, lsl #3
   131c4:	ldr	r1, [r5, #4]
   131c8:	ldr	r7, [r3, #4]
   131cc:	ldr	r9, [r6, r4, lsl #3]
   131d0:	ldr	r2, [r5, #40]	; 0x28
   131d4:	ldr	ip, [r5, #44]	; 0x2c
   131d8:	add	r0, r5, #8
   131dc:	str	r3, [sp, #28]
   131e0:	ldr	r3, [r5]
   131e4:	orr	r1, r1, #1
   131e8:	mov	lr, r0
   131ec:	str	r1, [sp, #32]
   131f0:	str	r0, [sp, #36]	; 0x24
   131f4:	str	r1, [sp, #4]
   131f8:	str	r2, [sp, #12]
   131fc:	str	r3, [sp]
   13200:	mov	r0, r7
   13204:	mov	r1, r9
   13208:	str	ip, [sp, #16]
   1320c:	str	lr, [sp, #8]
   13210:	mov	r3, fp
   13214:	mov	r2, sl
   13218:	bl	11c00 <__assert_fail@plt+0xef4>
   1321c:	cmp	r9, r0
   13220:	bhi	1328c <__assert_fail@plt+0x2580>
   13224:	ldr	r3, [pc, #172]	; 132d8 <__assert_fail@plt+0x25cc>
   13228:	add	r9, r0, #1
   1322c:	cmp	r7, r3
   13230:	str	r9, [r6, r4, lsl #3]
   13234:	beq	13240 <__assert_fail@plt+0x2534>
   13238:	mov	r0, r7
   1323c:	bl	145c8 <__assert_fail@plt+0x38bc>
   13240:	mov	r0, r9
   13244:	bl	13e1c <__assert_fail@plt+0x3110>
   13248:	ldr	lr, [sp, #28]
   1324c:	ldr	ip, [r5, #44]	; 0x2c
   13250:	ldr	r4, [r5, #40]	; 0x28
   13254:	mov	r3, fp
   13258:	mov	r2, sl
   1325c:	mov	r1, r9
   13260:	str	r0, [lr, #4]
   13264:	ldr	lr, [r5]
   13268:	ldr	r5, [sp, #36]	; 0x24
   1326c:	str	ip, [sp, #16]
   13270:	str	r5, [sp, #8]
   13274:	ldr	r5, [sp, #32]
   13278:	str	r4, [sp, #12]
   1327c:	str	r5, [sp, #4]
   13280:	str	lr, [sp]
   13284:	mov	r7, r0
   13288:	bl	11c00 <__assert_fail@plt+0xef4>
   1328c:	ldr	r3, [sp, #24]
   13290:	mov	r0, r7
   13294:	str	r3, [r8]
   13298:	add	sp, sp, #52	; 0x34
   1329c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132a0:	mov	r3, #8
   132a4:	sub	r2, r4, r2
   132a8:	str	r3, [sp]
   132ac:	add	r1, sp, #44	; 0x2c
   132b0:	add	r2, r2, #1
   132b4:	mvn	r3, #-2147483648	; 0x80000000
   132b8:	bl	13f80 <__assert_fail@plt+0x3274>
   132bc:	mov	r6, r0
   132c0:	ldm	r9, {r0, r1}
   132c4:	str	r6, [r7]
   132c8:	stm	r6, {r0, r1}
   132cc:	b	1319c <__assert_fail@plt+0x2490>
   132d0:	bl	10d00 <abort@plt>
   132d4:	ldrdeq	r6, [r2], -r4
   132d8:	andeq	r6, r2, r8, lsr r1
   132dc:	push	{r4, r5, r6, lr}
   132e0:	mov	r5, r0
   132e4:	bl	10c58 <__errno_location@plt>
   132e8:	cmp	r5, #0
   132ec:	mov	r1, #48	; 0x30
   132f0:	mov	r4, r0
   132f4:	ldr	r0, [pc, #16]	; 1330c <__assert_fail@plt+0x2600>
   132f8:	ldr	r6, [r4]
   132fc:	movne	r0, r5
   13300:	bl	1427c <__assert_fail@plt+0x3570>
   13304:	str	r6, [r4]
   13308:	pop	{r4, r5, r6, pc}
   1330c:	andeq	r6, r2, r8, lsr r2
   13310:	ldr	r3, [pc, #12]	; 13324 <__assert_fail@plt+0x2618>
   13314:	cmp	r0, #0
   13318:	moveq	r0, r3
   1331c:	ldr	r0, [r0]
   13320:	bx	lr
   13324:	andeq	r6, r2, r8, lsr r2
   13328:	ldr	r3, [pc, #12]	; 1333c <__assert_fail@plt+0x2630>
   1332c:	cmp	r0, #0
   13330:	moveq	r0, r3
   13334:	str	r1, [r0]
   13338:	bx	lr
   1333c:	andeq	r6, r2, r8, lsr r2
   13340:	ldr	r3, [pc, #52]	; 1337c <__assert_fail@plt+0x2670>
   13344:	cmp	r0, #0
   13348:	moveq	r0, r3
   1334c:	add	r3, r0, #8
   13350:	push	{lr}		; (str lr, [sp, #-4]!)
   13354:	lsr	lr, r1, #5
   13358:	and	r1, r1, #31
   1335c:	ldr	ip, [r3, lr, lsl #2]
   13360:	lsr	r0, ip, r1
   13364:	eor	r2, r2, r0
   13368:	and	r2, r2, #1
   1336c:	and	r0, r0, #1
   13370:	eor	r1, ip, r2, lsl r1
   13374:	str	r1, [r3, lr, lsl #2]
   13378:	pop	{pc}		; (ldr pc, [sp], #4)
   1337c:	andeq	r6, r2, r8, lsr r2
   13380:	ldr	r3, [pc, #16]	; 13398 <__assert_fail@plt+0x268c>
   13384:	cmp	r0, #0
   13388:	movne	r3, r0
   1338c:	ldr	r0, [r3, #4]
   13390:	str	r1, [r3, #4]
   13394:	bx	lr
   13398:	andeq	r6, r2, r8, lsr r2
   1339c:	ldr	r3, [pc, #44]	; 133d0 <__assert_fail@plt+0x26c4>
   133a0:	cmp	r0, #0
   133a4:	moveq	r0, r3
   133a8:	mov	ip, #10
   133ac:	cmp	r2, #0
   133b0:	cmpne	r1, #0
   133b4:	str	ip, [r0]
   133b8:	beq	133c8 <__assert_fail@plt+0x26bc>
   133bc:	str	r1, [r0, #40]	; 0x28
   133c0:	str	r2, [r0, #44]	; 0x2c
   133c4:	bx	lr
   133c8:	push	{r4, lr}
   133cc:	bl	10d00 <abort@plt>
   133d0:	andeq	r6, r2, r8, lsr r2
   133d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   133d8:	sub	sp, sp, #24
   133dc:	ldr	ip, [pc, #108]	; 13450 <__assert_fail@plt+0x2744>
   133e0:	ldr	r4, [sp, #56]	; 0x38
   133e4:	mov	r9, r2
   133e8:	cmp	r4, #0
   133ec:	moveq	r4, ip
   133f0:	mov	sl, r3
   133f4:	mov	r7, r0
   133f8:	mov	r8, r1
   133fc:	bl	10c58 <__errno_location@plt>
   13400:	ldr	r3, [r4, #44]	; 0x2c
   13404:	mov	r1, r8
   13408:	ldr	r6, [r0]
   1340c:	str	r3, [sp, #16]
   13410:	ldr	r2, [r4, #40]	; 0x28
   13414:	add	r3, r4, #8
   13418:	str	r3, [sp, #8]
   1341c:	str	r2, [sp, #12]
   13420:	ldr	r2, [r4, #4]
   13424:	mov	r5, r0
   13428:	str	r2, [sp, #4]
   1342c:	ldr	ip, [r4]
   13430:	mov	r3, sl
   13434:	mov	r2, r9
   13438:	mov	r0, r7
   1343c:	str	ip, [sp]
   13440:	bl	11c00 <__assert_fail@plt+0xef4>
   13444:	str	r6, [r5]
   13448:	add	sp, sp, #24
   1344c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13450:	andeq	r6, r2, r8, lsr r2
   13454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13458:	cmp	r3, #0
   1345c:	sub	sp, sp, #44	; 0x2c
   13460:	ldr	r4, [pc, #192]	; 13528 <__assert_fail@plt+0x281c>
   13464:	mov	r6, r2
   13468:	movne	r4, r3
   1346c:	mov	r9, r1
   13470:	mov	r8, r0
   13474:	bl	10c58 <__errno_location@plt>
   13478:	ldr	r3, [r4, #44]	; 0x2c
   1347c:	ldr	r5, [r4, #4]
   13480:	add	sl, r4, #8
   13484:	cmp	r6, #0
   13488:	orreq	r5, r5, #1
   1348c:	mov	r1, #0
   13490:	ldr	r2, [r0]
   13494:	str	r3, [sp, #16]
   13498:	ldr	r3, [r4, #40]	; 0x28
   1349c:	stmib	sp, {r5, sl}
   134a0:	str	r3, [sp, #12]
   134a4:	ldr	r3, [r4]
   134a8:	mov	r7, r0
   134ac:	str	r2, [sp, #28]
   134b0:	str	r3, [sp]
   134b4:	mov	r2, r8
   134b8:	mov	r3, r9
   134bc:	mov	r0, r1
   134c0:	bl	11c00 <__assert_fail@plt+0xef4>
   134c4:	add	r1, r0, #1
   134c8:	mov	fp, r0
   134cc:	mov	r0, r1
   134d0:	str	r1, [sp, #36]	; 0x24
   134d4:	bl	13e1c <__assert_fail@plt+0x3110>
   134d8:	ldr	r3, [r4, #44]	; 0x2c
   134dc:	mov	r2, r8
   134e0:	str	r3, [sp, #16]
   134e4:	ldr	r3, [r4, #40]	; 0x28
   134e8:	str	r5, [sp, #4]
   134ec:	str	r3, [sp, #12]
   134f0:	str	sl, [sp, #8]
   134f4:	ldr	ip, [r4]
   134f8:	ldr	r1, [sp, #36]	; 0x24
   134fc:	mov	r3, r9
   13500:	str	ip, [sp]
   13504:	str	r0, [sp, #32]
   13508:	bl	11c00 <__assert_fail@plt+0xef4>
   1350c:	ldr	r2, [sp, #28]
   13510:	cmp	r6, #0
   13514:	str	r2, [r7]
   13518:	ldr	r0, [sp, #32]
   1351c:	strne	fp, [r6]
   13520:	add	sp, sp, #44	; 0x2c
   13524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13528:	andeq	r6, r2, r8, lsr r2
   1352c:	mov	r3, r2
   13530:	mov	r2, #0
   13534:	b	13454 <__assert_fail@plt+0x2748>
   13538:	push	{r4, r5, r6, r7, r8, lr}
   1353c:	ldr	r6, [pc, #116]	; 135b8 <__assert_fail@plt+0x28ac>
   13540:	ldr	r3, [r6, #4]
   13544:	ldr	r7, [r6]
   13548:	cmp	r3, #1
   1354c:	movgt	r5, r7
   13550:	movgt	r4, #1
   13554:	ble	13574 <__assert_fail@plt+0x2868>
   13558:	ldr	r0, [r5, #12]
   1355c:	bl	145c8 <__assert_fail@plt+0x38bc>
   13560:	ldr	r3, [r6, #4]
   13564:	add	r4, r4, #1
   13568:	cmp	r3, r4
   1356c:	add	r5, r5, #8
   13570:	bgt	13558 <__assert_fail@plt+0x284c>
   13574:	ldr	r0, [r7, #4]
   13578:	ldr	r4, [pc, #60]	; 135bc <__assert_fail@plt+0x28b0>
   1357c:	cmp	r0, r4
   13580:	beq	13594 <__assert_fail@plt+0x2888>
   13584:	bl	145c8 <__assert_fail@plt+0x38bc>
   13588:	mov	r3, #256	; 0x100
   1358c:	str	r4, [r6, #12]
   13590:	str	r3, [r6, #8]
   13594:	ldr	r4, [pc, #36]	; 135c0 <__assert_fail@plt+0x28b4>
   13598:	cmp	r7, r4
   1359c:	beq	135ac <__assert_fail@plt+0x28a0>
   135a0:	mov	r0, r7
   135a4:	bl	145c8 <__assert_fail@plt+0x38bc>
   135a8:	str	r4, [r6]
   135ac:	mov	r3, #1
   135b0:	str	r3, [r6, #4]
   135b4:	pop	{r4, r5, r6, r7, r8, pc}
   135b8:	ldrdeq	r6, [r2], -r4
   135bc:	andeq	r6, r2, r8, lsr r1
   135c0:	ldrdeq	r6, [r2], -ip
   135c4:	ldr	r3, [pc, #4]	; 135d0 <__assert_fail@plt+0x28c4>
   135c8:	mvn	r2, #0
   135cc:	b	13114 <__assert_fail@plt+0x2408>
   135d0:	andeq	r6, r2, r8, lsr r2
   135d4:	ldr	r3, [pc]	; 135dc <__assert_fail@plt+0x28d0>
   135d8:	b	13114 <__assert_fail@plt+0x2408>
   135dc:	andeq	r6, r2, r8, lsr r2
   135e0:	mov	r1, r0
   135e4:	ldr	r3, [pc, #8]	; 135f4 <__assert_fail@plt+0x28e8>
   135e8:	mvn	r2, #0
   135ec:	mov	r0, #0
   135f0:	b	13114 <__assert_fail@plt+0x2408>
   135f4:	andeq	r6, r2, r8, lsr r2
   135f8:	mov	r2, r1
   135fc:	ldr	r3, [pc, #8]	; 1360c <__assert_fail@plt+0x2900>
   13600:	mov	r1, r0
   13604:	mov	r0, #0
   13608:	b	13114 <__assert_fail@plt+0x2408>
   1360c:	andeq	r6, r2, r8, lsr r2
   13610:	push	{r4, r5, lr}
   13614:	sub	sp, sp, #52	; 0x34
   13618:	mov	r5, r2
   1361c:	mov	r4, r0
   13620:	mov	r0, sp
   13624:	bl	11ab0 <__assert_fail@plt+0xda4>
   13628:	mov	r3, sp
   1362c:	mov	r1, r5
   13630:	mov	r0, r4
   13634:	mvn	r2, #0
   13638:	bl	13114 <__assert_fail@plt+0x2408>
   1363c:	add	sp, sp, #52	; 0x34
   13640:	pop	{r4, r5, pc}
   13644:	push	{r4, r5, r6, lr}
   13648:	sub	sp, sp, #48	; 0x30
   1364c:	mov	r5, r2
   13650:	mov	r6, r3
   13654:	mov	r4, r0
   13658:	mov	r0, sp
   1365c:	bl	11ab0 <__assert_fail@plt+0xda4>
   13660:	mov	r3, sp
   13664:	mov	r2, r6
   13668:	mov	r1, r5
   1366c:	mov	r0, r4
   13670:	bl	13114 <__assert_fail@plt+0x2408>
   13674:	add	sp, sp, #48	; 0x30
   13678:	pop	{r4, r5, r6, pc}
   1367c:	mov	r2, r1
   13680:	mov	r1, r0
   13684:	mov	r0, #0
   13688:	b	13610 <__assert_fail@plt+0x2904>
   1368c:	mov	r3, r2
   13690:	mov	r2, r1
   13694:	mov	r1, r0
   13698:	mov	r0, #0
   1369c:	b	13644 <__assert_fail@plt+0x2938>
   136a0:	push	{r4, r5, r6, r7, r8, lr}
   136a4:	mov	r7, r0
   136a8:	ldr	lr, [pc, #100]	; 13714 <__assert_fail@plt+0x2a08>
   136ac:	mov	r8, r1
   136b0:	mov	r4, r2
   136b4:	ldm	lr!, {r0, r1, r2, r3}
   136b8:	sub	sp, sp, #48	; 0x30
   136bc:	mov	ip, sp
   136c0:	lsr	r5, r4, #5
   136c4:	stmia	ip!, {r0, r1, r2, r3}
   136c8:	add	r6, sp, #8
   136cc:	ldm	lr!, {r0, r1, r2, r3}
   136d0:	and	r4, r4, #31
   136d4:	stmia	ip!, {r0, r1, r2, r3}
   136d8:	ldm	lr, {r0, r1, r2, r3}
   136dc:	stm	ip, {r0, r1, r2, r3}
   136e0:	mov	r2, r8
   136e4:	ldr	lr, [r6, r5, lsl #2]
   136e8:	mov	r1, r7
   136ec:	mov	r3, sp
   136f0:	lsr	ip, lr, r4
   136f4:	eor	ip, ip, #1
   136f8:	and	ip, ip, #1
   136fc:	mov	r0, #0
   13700:	eor	r4, lr, ip, lsl r4
   13704:	str	r4, [r6, r5, lsl #2]
   13708:	bl	13114 <__assert_fail@plt+0x2408>
   1370c:	add	sp, sp, #48	; 0x30
   13710:	pop	{r4, r5, r6, r7, r8, pc}
   13714:	andeq	r6, r2, r8, lsr r2
   13718:	mov	r2, r1
   1371c:	mvn	r1, #0
   13720:	b	136a0 <__assert_fail@plt+0x2994>
   13724:	mov	r2, #58	; 0x3a
   13728:	mvn	r1, #0
   1372c:	b	136a0 <__assert_fail@plt+0x2994>
   13730:	mov	r2, #58	; 0x3a
   13734:	b	136a0 <__assert_fail@plt+0x2994>
   13738:	push	{r4, r5, r6, r7, lr}
   1373c:	sub	sp, sp, #100	; 0x64
   13740:	mov	r6, r0
   13744:	mov	r0, sp
   13748:	mov	r7, r2
   1374c:	bl	11ab0 <__assert_fail@plt+0xda4>
   13750:	mov	ip, sp
   13754:	add	lr, sp, #48	; 0x30
   13758:	ldm	ip!, {r0, r1, r2, r3}
   1375c:	stmia	lr!, {r0, r1, r2, r3}
   13760:	ldm	ip!, {r0, r1, r2, r3}
   13764:	ldr	r5, [sp, #60]	; 0x3c
   13768:	stmia	lr!, {r0, r1, r2, r3}
   1376c:	mvn	r4, r5
   13770:	ldm	ip, {r0, r1, r2, r3}
   13774:	and	ip, r4, #67108864	; 0x4000000
   13778:	eor	ip, ip, r5
   1377c:	str	ip, [sp, #60]	; 0x3c
   13780:	stm	lr, {r0, r1, r2, r3}
   13784:	mov	r1, r7
   13788:	mov	r0, r6
   1378c:	add	r3, sp, #48	; 0x30
   13790:	mvn	r2, #0
   13794:	bl	13114 <__assert_fail@plt+0x2408>
   13798:	add	sp, sp, #100	; 0x64
   1379c:	pop	{r4, r5, r6, r7, pc}
   137a0:	push	{r4, r5, r6, r7, r8, lr}
   137a4:	mov	r5, r1
   137a8:	ldr	lr, [pc, #100]	; 13814 <__assert_fail@plt+0x2b08>
   137ac:	mov	r4, r2
   137b0:	mov	r7, r0
   137b4:	mov	r8, r3
   137b8:	ldm	lr!, {r0, r1, r2, r3}
   137bc:	sub	sp, sp, #48	; 0x30
   137c0:	mov	ip, sp
   137c4:	mov	r6, #10
   137c8:	stmia	ip!, {r0, r1, r2, r3}
   137cc:	cmp	r4, #0
   137d0:	cmpne	r5, #0
   137d4:	ldm	lr!, {r0, r1, r2, r3}
   137d8:	str	r6, [sp]
   137dc:	stmia	ip!, {r0, r1, r2, r3}
   137e0:	ldm	lr, {r0, r1, r2, r3}
   137e4:	stm	ip, {r0, r1, r2, r3}
   137e8:	beq	13810 <__assert_fail@plt+0x2b04>
   137ec:	mov	r3, sp
   137f0:	mov	r1, r8
   137f4:	mov	r0, r7
   137f8:	ldr	r2, [sp, #72]	; 0x48
   137fc:	str	r5, [sp, #40]	; 0x28
   13800:	str	r4, [sp, #44]	; 0x2c
   13804:	bl	13114 <__assert_fail@plt+0x2408>
   13808:	add	sp, sp, #48	; 0x30
   1380c:	pop	{r4, r5, r6, r7, r8, pc}
   13810:	bl	10d00 <abort@plt>
   13814:	andeq	r6, r2, r8, lsr r2
   13818:	push	{lr}		; (str lr, [sp, #-4]!)
   1381c:	sub	sp, sp, #12
   13820:	mvn	ip, #0
   13824:	str	ip, [sp]
   13828:	bl	137a0 <__assert_fail@plt+0x2a94>
   1382c:	add	sp, sp, #12
   13830:	pop	{pc}		; (ldr pc, [sp], #4)
   13834:	push	{lr}		; (str lr, [sp, #-4]!)
   13838:	sub	sp, sp, #12
   1383c:	mvn	ip, #0
   13840:	mov	r3, r2
   13844:	str	ip, [sp]
   13848:	mov	r2, r1
   1384c:	mov	r1, r0
   13850:	mov	r0, #0
   13854:	bl	137a0 <__assert_fail@plt+0x2a94>
   13858:	add	sp, sp, #12
   1385c:	pop	{pc}		; (ldr pc, [sp], #4)
   13860:	push	{lr}		; (str lr, [sp, #-4]!)
   13864:	sub	sp, sp, #12
   13868:	str	r3, [sp]
   1386c:	mov	r3, r2
   13870:	mov	r2, r1
   13874:	mov	r1, r0
   13878:	mov	r0, #0
   1387c:	bl	137a0 <__assert_fail@plt+0x2a94>
   13880:	add	sp, sp, #12
   13884:	pop	{pc}		; (ldr pc, [sp], #4)
   13888:	ldr	r3, [pc]	; 13890 <__assert_fail@plt+0x2b84>
   1388c:	b	13114 <__assert_fail@plt+0x2408>
   13890:	andeq	r6, r2, r4, ror #1
   13894:	mov	r2, r1
   13898:	ldr	r3, [pc, #8]	; 138a8 <__assert_fail@plt+0x2b9c>
   1389c:	mov	r1, r0
   138a0:	mov	r0, #0
   138a4:	b	13114 <__assert_fail@plt+0x2408>
   138a8:	andeq	r6, r2, r4, ror #1
   138ac:	ldr	r3, [pc, #4]	; 138b8 <__assert_fail@plt+0x2bac>
   138b0:	mvn	r2, #0
   138b4:	b	13114 <__assert_fail@plt+0x2408>
   138b8:	andeq	r6, r2, r4, ror #1
   138bc:	mov	r1, r0
   138c0:	ldr	r3, [pc, #8]	; 138d0 <__assert_fail@plt+0x2bc4>
   138c4:	mvn	r2, #0
   138c8:	mov	r0, #0
   138cc:	b	13114 <__assert_fail@plt+0x2408>
   138d0:	andeq	r6, r2, r4, ror #1
   138d4:	push	{r4, r5, r6, lr}
   138d8:	sub	sp, sp, #32
   138dc:	cmp	r1, #0
   138e0:	mov	r4, r0
   138e4:	ldr	r5, [sp, #48]	; 0x30
   138e8:	ldr	r6, [sp, #52]	; 0x34
   138ec:	beq	13c04 <__assert_fail@plt+0x2ef8>
   138f0:	stm	sp, {r2, r3}
   138f4:	mov	r3, r1
   138f8:	ldr	r2, [pc, #808]	; 13c28 <__assert_fail@plt+0x2f1c>
   138fc:	mov	r1, #1
   13900:	bl	10c94 <__fprintf_chk@plt>
   13904:	mov	r2, #5
   13908:	ldr	r1, [pc, #796]	; 13c2c <__assert_fail@plt+0x2f20>
   1390c:	mov	r0, #0
   13910:	bl	10b80 <dcgettext@plt>
   13914:	ldr	r3, [pc, #788]	; 13c30 <__assert_fail@plt+0x2f24>
   13918:	ldr	r2, [pc, #788]	; 13c34 <__assert_fail@plt+0x2f28>
   1391c:	str	r3, [sp]
   13920:	mov	r1, #1
   13924:	mov	r3, r0
   13928:	mov	r0, r4
   1392c:	bl	10c94 <__fprintf_chk@plt>
   13930:	mov	r1, r4
   13934:	mov	r0, #10
   13938:	bl	10b74 <fputc_unlocked@plt>
   1393c:	mov	r2, #5
   13940:	ldr	r1, [pc, #752]	; 13c38 <__assert_fail@plt+0x2f2c>
   13944:	mov	r0, #0
   13948:	bl	10b80 <dcgettext@plt>
   1394c:	mov	r1, #1
   13950:	ldr	r3, [pc, #740]	; 13c3c <__assert_fail@plt+0x2f30>
   13954:	mov	r2, r0
   13958:	mov	r0, r4
   1395c:	bl	10c94 <__fprintf_chk@plt>
   13960:	mov	r1, r4
   13964:	mov	r0, #10
   13968:	bl	10b74 <fputc_unlocked@plt>
   1396c:	cmp	r6, #9
   13970:	ldrls	pc, [pc, r6, lsl #2]
   13974:	b	13c1c <__assert_fail@plt+0x2f10>
   13978:	strdeq	r3, [r1], -ip
   1397c:	andeq	r3, r1, r4, lsl #20
   13980:	andeq	r3, r1, r0, lsr sl
   13984:	andeq	r3, r1, r4, ror #20
   13988:	andeq	r3, r1, r0, lsr #21
   1398c:	ldrdeq	r3, [r1], -ip
   13990:	andeq	r3, r1, r8, lsl fp
   13994:	andeq	r3, r1, ip, asr fp
   13998:	andeq	r3, r1, ip, lsr #23
   1399c:	andeq	r3, r1, r0, lsr #19
   139a0:	ldr	r1, [pc, #664]	; 13c40 <__assert_fail@plt+0x2f34>
   139a4:	mov	r2, #5
   139a8:	mov	r0, #0
   139ac:	bl	10b80 <dcgettext@plt>
   139b0:	ldr	ip, [r5, #32]
   139b4:	ldr	r1, [r5, #28]
   139b8:	ldr	r2, [r5, #24]
   139bc:	ldr	r3, [r5]
   139c0:	ldr	r6, [r5, #20]
   139c4:	str	ip, [sp, #28]
   139c8:	ldr	lr, [r5, #16]
   139cc:	str	r1, [sp, #24]
   139d0:	ldr	ip, [r5, #12]
   139d4:	str	r2, [sp, #20]
   139d8:	ldr	r1, [r5, #8]
   139dc:	ldr	r2, [r5, #4]
   139e0:	str	r6, [sp, #16]
   139e4:	stmib	sp, {r1, ip, lr}
   139e8:	mov	r1, #1
   139ec:	str	r2, [sp]
   139f0:	mov	r2, r0
   139f4:	mov	r0, r4
   139f8:	bl	10c94 <__fprintf_chk@plt>
   139fc:	add	sp, sp, #32
   13a00:	pop	{r4, r5, r6, pc}
   13a04:	mov	r2, #5
   13a08:	ldr	r1, [pc, #564]	; 13c44 <__assert_fail@plt+0x2f38>
   13a0c:	mov	r0, #0
   13a10:	bl	10b80 <dcgettext@plt>
   13a14:	ldr	r3, [r5]
   13a18:	mov	r1, #1
   13a1c:	mov	r2, r0
   13a20:	mov	r0, r4
   13a24:	add	sp, sp, #32
   13a28:	pop	{r4, r5, r6, lr}
   13a2c:	b	10c94 <__fprintf_chk@plt>
   13a30:	mov	r2, #5
   13a34:	ldr	r1, [pc, #524]	; 13c48 <__assert_fail@plt+0x2f3c>
   13a38:	mov	r0, #0
   13a3c:	bl	10b80 <dcgettext@plt>
   13a40:	ldr	r2, [r5, #4]
   13a44:	ldr	r3, [r5]
   13a48:	mov	r1, #1
   13a4c:	str	r2, [sp, #48]	; 0x30
   13a50:	mov	r2, r0
   13a54:	mov	r0, r4
   13a58:	add	sp, sp, #32
   13a5c:	pop	{r4, r5, r6, lr}
   13a60:	b	10c94 <__fprintf_chk@plt>
   13a64:	mov	r2, #5
   13a68:	ldr	r1, [pc, #476]	; 13c4c <__assert_fail@plt+0x2f40>
   13a6c:	mov	r0, #0
   13a70:	bl	10b80 <dcgettext@plt>
   13a74:	ldr	r1, [r5, #8]
   13a78:	ldr	r2, [r5, #4]
   13a7c:	ldr	r3, [r5]
   13a80:	str	r1, [sp, #52]	; 0x34
   13a84:	str	r2, [sp, #48]	; 0x30
   13a88:	mov	r1, #1
   13a8c:	mov	r2, r0
   13a90:	mov	r0, r4
   13a94:	add	sp, sp, #32
   13a98:	pop	{r4, r5, r6, lr}
   13a9c:	b	10c94 <__fprintf_chk@plt>
   13aa0:	mov	r2, #5
   13aa4:	ldr	r1, [pc, #420]	; 13c50 <__assert_fail@plt+0x2f44>
   13aa8:	mov	r0, #0
   13aac:	bl	10b80 <dcgettext@plt>
   13ab0:	ldr	r1, [r5, #8]
   13ab4:	ldr	ip, [r5, #12]
   13ab8:	ldr	r2, [r5, #4]
   13abc:	ldr	r3, [r5]
   13ac0:	stmib	sp, {r1, ip}
   13ac4:	str	r2, [sp]
   13ac8:	mov	r1, #1
   13acc:	mov	r2, r0
   13ad0:	mov	r0, r4
   13ad4:	bl	10c94 <__fprintf_chk@plt>
   13ad8:	b	139fc <__assert_fail@plt+0x2cf0>
   13adc:	mov	r2, #5
   13ae0:	ldr	r1, [pc, #364]	; 13c54 <__assert_fail@plt+0x2f48>
   13ae4:	mov	r0, #0
   13ae8:	bl	10b80 <dcgettext@plt>
   13aec:	add	r1, r5, #8
   13af0:	ldr	r2, [r5, #4]
   13af4:	ldm	r1, {r1, ip, lr}
   13af8:	ldr	r3, [r5]
   13afc:	str	r2, [sp]
   13b00:	stmib	sp, {r1, ip, lr}
   13b04:	mov	r1, #1
   13b08:	mov	r2, r0
   13b0c:	mov	r0, r4
   13b10:	bl	10c94 <__fprintf_chk@plt>
   13b14:	b	139fc <__assert_fail@plt+0x2cf0>
   13b18:	mov	r2, #5
   13b1c:	ldr	r1, [pc, #308]	; 13c58 <__assert_fail@plt+0x2f4c>
   13b20:	mov	r0, #0
   13b24:	bl	10b80 <dcgettext@plt>
   13b28:	add	r1, r5, #8
   13b2c:	ldr	r2, [r5, #4]
   13b30:	ldm	r1, {r1, ip, lr}
   13b34:	ldr	r6, [r5, #20]
   13b38:	ldr	r3, [r5]
   13b3c:	stmib	sp, {r1, ip, lr}
   13b40:	mov	r1, #1
   13b44:	str	r2, [sp]
   13b48:	str	r6, [sp, #16]
   13b4c:	mov	r2, r0
   13b50:	mov	r0, r4
   13b54:	bl	10c94 <__fprintf_chk@plt>
   13b58:	b	139fc <__assert_fail@plt+0x2cf0>
   13b5c:	mov	r2, #5
   13b60:	ldr	r1, [pc, #244]	; 13c5c <__assert_fail@plt+0x2f50>
   13b64:	mov	r0, #0
   13b68:	bl	10b80 <dcgettext@plt>
   13b6c:	ldr	r2, [r5, #24]
   13b70:	ldr	r3, [r5]
   13b74:	ldr	r6, [r5, #20]
   13b78:	ldr	lr, [r5, #16]
   13b7c:	ldr	ip, [r5, #12]
   13b80:	str	r2, [sp, #20]
   13b84:	ldr	r1, [r5, #8]
   13b88:	ldr	r2, [r5, #4]
   13b8c:	str	r6, [sp, #16]
   13b90:	stmib	sp, {r1, ip, lr}
   13b94:	mov	r1, #1
   13b98:	str	r2, [sp]
   13b9c:	mov	r2, r0
   13ba0:	mov	r0, r4
   13ba4:	bl	10c94 <__fprintf_chk@plt>
   13ba8:	b	139fc <__assert_fail@plt+0x2cf0>
   13bac:	mov	r2, #5
   13bb0:	ldr	r1, [pc, #168]	; 13c60 <__assert_fail@plt+0x2f54>
   13bb4:	mov	r0, #0
   13bb8:	bl	10b80 <dcgettext@plt>
   13bbc:	ldr	r1, [r5, #28]
   13bc0:	ldr	r2, [r5, #24]
   13bc4:	ldr	r3, [r5]
   13bc8:	ldr	r6, [r5, #20]
   13bcc:	ldr	lr, [r5, #16]
   13bd0:	str	r1, [sp, #24]
   13bd4:	ldr	ip, [r5, #12]
   13bd8:	str	r2, [sp, #20]
   13bdc:	ldr	r1, [r5, #8]
   13be0:	ldr	r2, [r5, #4]
   13be4:	str	r6, [sp, #16]
   13be8:	stmib	sp, {r1, ip, lr}
   13bec:	mov	r1, #1
   13bf0:	str	r2, [sp]
   13bf4:	mov	r2, r0
   13bf8:	mov	r0, r4
   13bfc:	bl	10c94 <__fprintf_chk@plt>
   13c00:	b	139fc <__assert_fail@plt+0x2cf0>
   13c04:	str	r3, [sp]
   13c08:	mov	r1, #1
   13c0c:	mov	r3, r2
   13c10:	ldr	r2, [pc, #76]	; 13c64 <__assert_fail@plt+0x2f58>
   13c14:	bl	10c94 <__fprintf_chk@plt>
   13c18:	b	13904 <__assert_fail@plt+0x2bf8>
   13c1c:	mov	r2, #5
   13c20:	ldr	r1, [pc, #64]	; 13c68 <__assert_fail@plt+0x2f5c>
   13c24:	b	139a8 <__assert_fail@plt+0x2c9c>
   13c28:	andeq	r5, r1, r8, lsl r5
   13c2c:	andeq	r5, r1, ip, lsr #10
   13c30:	andeq	r0, r0, r6, ror #15
   13c34:	andeq	r5, r1, r4, lsl #16
   13c38:	andeq	r5, r1, r0, lsr r5
   13c3c:	ldrdeq	r5, [r1], -ip
   13c40:	andeq	r5, r1, ip, lsl #14
   13c44:	andeq	r5, r1, r0, lsl #12
   13c48:	andeq	r5, r1, r0, lsl r6
   13c4c:	andeq	r5, r1, r8, lsr #12
   13c50:	andeq	r5, r1, r4, asr #12
   13c54:	andeq	r5, r1, r4, ror #12
   13c58:	andeq	r5, r1, r8, lsl #13
   13c5c:			; <UNDEFINED> instruction: 0x000156b0
   13c60:	ldrdeq	r5, [r1], -ip
   13c64:	andeq	r5, r1, r4, lsr #10
   13c68:	andeq	r5, r1, r0, asr #14
   13c6c:	push	{r4, r5, lr}
   13c70:	sub	sp, sp, #12
   13c74:	ldr	r5, [sp, #24]
   13c78:	ldr	ip, [r5]
   13c7c:	cmp	ip, #0
   13c80:	beq	13c9c <__assert_fail@plt+0x2f90>
   13c84:	mov	lr, r5
   13c88:	mov	ip, #0
   13c8c:	ldr	r4, [lr, #4]!
   13c90:	add	ip, ip, #1
   13c94:	cmp	r4, #0
   13c98:	bne	13c8c <__assert_fail@plt+0x2f80>
   13c9c:	stm	sp, {r5, ip}
   13ca0:	bl	138d4 <__assert_fail@plt+0x2bc8>
   13ca4:	add	sp, sp, #12
   13ca8:	pop	{r4, r5, pc}
   13cac:	push	{r4, r5, lr}
   13cb0:	sub	sp, sp, #52	; 0x34
   13cb4:	add	r5, sp, #4
   13cb8:	ldr	r4, [sp, #64]	; 0x40
   13cbc:	mov	ip, #0
   13cc0:	sub	r4, r4, #4
   13cc4:	ldr	lr, [r4, #4]!
   13cc8:	cmp	lr, #0
   13ccc:	str	lr, [r5, #4]!
   13cd0:	beq	13ce0 <__assert_fail@plt+0x2fd4>
   13cd4:	add	ip, ip, #1
   13cd8:	cmp	ip, #10
   13cdc:	bne	13cc4 <__assert_fail@plt+0x2fb8>
   13ce0:	add	lr, sp, #8
   13ce4:	str	ip, [sp, #4]
   13ce8:	str	lr, [sp]
   13cec:	bl	138d4 <__assert_fail@plt+0x2bc8>
   13cf0:	add	sp, sp, #52	; 0x34
   13cf4:	pop	{r4, r5, pc}
   13cf8:	push	{r3}		; (str r3, [sp, #-4]!)
   13cfc:	push	{r4, lr}
   13d00:	sub	sp, sp, #60	; 0x3c
   13d04:	add	lr, sp, #56	; 0x38
   13d08:	add	r3, sp, #72	; 0x48
   13d0c:	str	r3, [lr, #-44]!	; 0xffffffd4
   13d10:	add	r4, sp, #68	; 0x44
   13d14:	mov	r3, #0
   13d18:	ldr	ip, [r4, #4]!
   13d1c:	cmp	ip, #0
   13d20:	str	ip, [lr, #4]!
   13d24:	beq	13d34 <__assert_fail@plt+0x3028>
   13d28:	add	r3, r3, #1
   13d2c:	cmp	r3, #10
   13d30:	bne	13d18 <__assert_fail@plt+0x300c>
   13d34:	add	ip, sp, #16
   13d38:	str	r3, [sp, #4]
   13d3c:	str	ip, [sp]
   13d40:	ldr	r3, [sp, #68]	; 0x44
   13d44:	bl	138d4 <__assert_fail@plt+0x2bc8>
   13d48:	add	sp, sp, #60	; 0x3c
   13d4c:	pop	{r4, lr}
   13d50:	add	sp, sp, #4
   13d54:	bx	lr
   13d58:	ldr	r3, [pc, #116]	; 13dd4 <__assert_fail@plt+0x30c8>
   13d5c:	push	{r4, lr}
   13d60:	mov	r0, #10
   13d64:	ldr	r1, [r3]
   13d68:	bl	10b74 <fputc_unlocked@plt>
   13d6c:	mov	r2, #5
   13d70:	ldr	r1, [pc, #96]	; 13dd8 <__assert_fail@plt+0x30cc>
   13d74:	mov	r0, #0
   13d78:	bl	10b80 <dcgettext@plt>
   13d7c:	ldr	r2, [pc, #88]	; 13ddc <__assert_fail@plt+0x30d0>
   13d80:	mov	r1, r0
   13d84:	mov	r0, #1
   13d88:	bl	10c7c <__printf_chk@plt>
   13d8c:	mov	r2, #5
   13d90:	ldr	r1, [pc, #72]	; 13de0 <__assert_fail@plt+0x30d4>
   13d94:	mov	r0, #0
   13d98:	bl	10b80 <dcgettext@plt>
   13d9c:	ldr	r3, [pc, #64]	; 13de4 <__assert_fail@plt+0x30d8>
   13da0:	ldr	r2, [pc, #64]	; 13de8 <__assert_fail@plt+0x30dc>
   13da4:	mov	r1, r0
   13da8:	mov	r0, #1
   13dac:	bl	10c7c <__printf_chk@plt>
   13db0:	mov	r2, #5
   13db4:	ldr	r1, [pc, #48]	; 13dec <__assert_fail@plt+0x30e0>
   13db8:	mov	r0, #0
   13dbc:	bl	10b80 <dcgettext@plt>
   13dc0:	ldr	r2, [pc, #40]	; 13df0 <__assert_fail@plt+0x30e4>
   13dc4:	pop	{r4, lr}
   13dc8:	mov	r1, r0
   13dcc:	mov	r0, #1
   13dd0:	b	10c7c <__printf_chk@plt>
   13dd4:	andeq	r6, r2, r4, lsr #2
   13dd8:	andeq	r5, r1, ip, ror r7
   13ddc:	muleq	r1, r0, r7
   13de0:	andeq	r5, r1, r8, lsr #15
   13de4:	andeq	r5, r1, r0, asr #4
   13de8:	andeq	r5, r1, r8, ror #4
   13dec:			; <UNDEFINED> instruction: 0x000157bc
   13df0:	andeq	r5, r1, r4, ror #15
   13df4:	push	{r4, lr}
   13df8:	bl	143c4 <__assert_fail@plt+0x36b8>
   13dfc:	cmp	r0, #0
   13e00:	popne	{r4, pc}
   13e04:	bl	1433c <__assert_fail@plt+0x3630>
   13e08:	push	{r4, lr}
   13e0c:	bl	143c4 <__assert_fail@plt+0x36b8>
   13e10:	cmp	r0, #0
   13e14:	popne	{r4, pc}
   13e18:	bl	1433c <__assert_fail@plt+0x3630>
   13e1c:	push	{r4, lr}
   13e20:	bl	143c4 <__assert_fail@plt+0x36b8>
   13e24:	cmp	r0, #0
   13e28:	popne	{r4, pc}
   13e2c:	bl	1433c <__assert_fail@plt+0x3630>
   13e30:	push	{r4, r5, r6, lr}
   13e34:	mov	r5, r0
   13e38:	mov	r4, r1
   13e3c:	bl	143f0 <__assert_fail@plt+0x36e4>
   13e40:	cmp	r0, #0
   13e44:	popne	{r4, r5, r6, pc}
   13e48:	adds	r4, r4, #0
   13e4c:	movne	r4, #1
   13e50:	cmp	r5, #0
   13e54:	orreq	r4, r4, #1
   13e58:	cmp	r4, #0
   13e5c:	popeq	{r4, r5, r6, pc}
   13e60:	bl	1433c <__assert_fail@plt+0x3630>
   13e64:	push	{r4, lr}
   13e68:	cmp	r1, #0
   13e6c:	orreq	r1, r1, #1
   13e70:	bl	143f0 <__assert_fail@plt+0x36e4>
   13e74:	cmp	r0, #0
   13e78:	popne	{r4, pc}
   13e7c:	bl	1433c <__assert_fail@plt+0x3630>
   13e80:	push	{r4, r5, r6, lr}
   13e84:	mov	r6, r0
   13e88:	mov	r5, r1
   13e8c:	mov	r4, r2
   13e90:	bl	14748 <__assert_fail@plt+0x3a3c>
   13e94:	cmp	r0, #0
   13e98:	popne	{r4, r5, r6, pc}
   13e9c:	cmp	r6, #0
   13ea0:	beq	13eb0 <__assert_fail@plt+0x31a4>
   13ea4:	cmp	r5, #0
   13ea8:	cmpne	r4, #0
   13eac:	popeq	{r4, r5, r6, pc}
   13eb0:	bl	1433c <__assert_fail@plt+0x3630>
   13eb4:	b	13e80 <__assert_fail@plt+0x3174>
   13eb8:	cmp	r2, #0
   13ebc:	cmpne	r1, #0
   13ec0:	moveq	r2, #1
   13ec4:	moveq	r1, r2
   13ec8:	push	{r4, lr}
   13ecc:	bl	14748 <__assert_fail@plt+0x3a3c>
   13ed0:	cmp	r0, #0
   13ed4:	popne	{r4, pc}
   13ed8:	bl	1433c <__assert_fail@plt+0x3630>
   13edc:	mov	r2, r1
   13ee0:	mov	r1, r0
   13ee4:	mov	r0, #0
   13ee8:	b	13e80 <__assert_fail@plt+0x3174>
   13eec:	mov	r2, r1
   13ef0:	mov	r1, r0
   13ef4:	mov	r0, #0
   13ef8:	b	13eb8 <__assert_fail@plt+0x31ac>
   13efc:	push	{r4, r5, r6, lr}
   13f00:	subs	r6, r0, #0
   13f04:	sub	sp, sp, #8
   13f08:	mov	r5, r1
   13f0c:	ldr	r4, [r1]
   13f10:	beq	13f4c <__assert_fail@plt+0x3240>
   13f14:	lsr	r1, r4, #1
   13f18:	add	r3, r1, #1
   13f1c:	mvn	r3, r3
   13f20:	cmp	r4, r3
   13f24:	bhi	13f48 <__assert_fail@plt+0x323c>
   13f28:	add	r4, r4, #1
   13f2c:	add	r4, r4, r1
   13f30:	mov	r0, r6
   13f34:	mov	r1, r4
   13f38:	bl	13e80 <__assert_fail@plt+0x3174>
   13f3c:	str	r4, [r5]
   13f40:	add	sp, sp, #8
   13f44:	pop	{r4, r5, r6, pc}
   13f48:	bl	1433c <__assert_fail@plt+0x3630>
   13f4c:	cmp	r4, #0
   13f50:	bne	13f30 <__assert_fail@plt+0x3224>
   13f54:	mov	r1, r2
   13f58:	mov	r0, #64	; 0x40
   13f5c:	str	r2, [sp, #4]
   13f60:	bl	14888 <__assert_fail@plt+0x3b7c>
   13f64:	ldr	r2, [sp, #4]
   13f68:	cmp	r0, #0
   13f6c:	movne	r4, r0
   13f70:	addeq	r4, r0, #1
   13f74:	b	13f30 <__assert_fail@plt+0x3224>
   13f78:	mov	r2, #1
   13f7c:	b	13efc <__assert_fail@plt+0x31f0>
   13f80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f84:	sub	sp, sp, #12
   13f88:	ldr	r6, [r1]
   13f8c:	mov	sl, r1
   13f90:	mov	r9, r0
   13f94:	asrs	r4, r6, #1
   13f98:	mov	r5, r2
   13f9c:	mov	fp, r3
   13fa0:	ldr	r7, [sp, #48]	; 0x30
   13fa4:	bmi	14110 <__assert_fail@plt+0x3404>
   13fa8:	mvn	r3, #-2147483648	; 0x80000000
   13fac:	sub	r3, r3, r4
   13fb0:	cmp	r6, r3
   13fb4:	movle	r3, #0
   13fb8:	movgt	r3, #1
   13fbc:	mvn	r8, fp
   13fc0:	cmp	r3, #0
   13fc4:	addeq	r4, r4, r6
   13fc8:	mvnne	r4, #-2147483648	; 0x80000000
   13fcc:	lsr	r8, r8, #31
   13fd0:	cmp	fp, r4
   13fd4:	movge	r3, #0
   13fd8:	andlt	r3, r8, #1
   13fdc:	cmp	r3, #0
   13fe0:	beq	140c8 <__assert_fail@plt+0x33bc>
   13fe4:	cmp	r7, #0
   13fe8:	blt	14198 <__assert_fail@plt+0x348c>
   13fec:	bne	14190 <__assert_fail@plt+0x3484>
   13ff0:	mov	r2, #64	; 0x40
   13ff4:	mov	r1, r7
   13ff8:	mov	r0, r2
   13ffc:	str	r2, [sp, #4]
   14000:	bl	14a94 <__assert_fail@plt+0x3d88>
   14004:	ldr	r2, [sp, #4]
   14008:	mov	r1, r7
   1400c:	mov	r4, r0
   14010:	mov	r0, r2
   14014:	bl	14cb4 <__assert_fail@plt+0x3fa8>
   14018:	ldr	r2, [sp, #4]
   1401c:	sub	r1, r2, r1
   14020:	cmp	r9, #0
   14024:	sub	r3, r4, r6
   14028:	streq	r9, [sl]
   1402c:	cmp	r3, r5
   14030:	bge	140b4 <__assert_fail@plt+0x33a8>
   14034:	cmp	r5, #0
   14038:	blt	14124 <__assert_fail@plt+0x3418>
   1403c:	cmp	r6, #0
   14040:	blt	14060 <__assert_fail@plt+0x3354>
   14044:	mvn	r3, #-2147483648	; 0x80000000
   14048:	sub	r3, r3, r5
   1404c:	cmp	r6, r3
   14050:	movle	r3, #0
   14054:	movgt	r3, #1
   14058:	cmp	r3, #0
   1405c:	bne	14220 <__assert_fail@plt+0x3514>
   14060:	add	r5, r6, r5
   14064:	cmp	fp, r5
   14068:	movge	r8, #0
   1406c:	andlt	r8, r8, #1
   14070:	cmp	r8, #0
   14074:	mov	r4, r5
   14078:	bne	14220 <__assert_fail@plt+0x3514>
   1407c:	cmp	r7, #0
   14080:	blt	14138 <__assert_fail@plt+0x342c>
   14084:	beq	140b0 <__assert_fail@plt+0x33a4>
   14088:	cmp	r5, #0
   1408c:	blt	141e0 <__assert_fail@plt+0x34d4>
   14090:	mov	r1, r7
   14094:	mvn	r0, #-2147483648	; 0x80000000
   14098:	bl	14a94 <__assert_fail@plt+0x3d88>
   1409c:	cmp	r5, r0
   140a0:	movle	r0, #0
   140a4:	movgt	r0, #1
   140a8:	cmp	r0, #0
   140ac:	bne	14220 <__assert_fail@plt+0x3514>
   140b0:	mul	r1, r5, r7
   140b4:	mov	r0, r9
   140b8:	bl	13e30 <__assert_fail@plt+0x3124>
   140bc:	str	r4, [sl]
   140c0:	add	sp, sp, #12
   140c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140c8:	cmp	r7, #0
   140cc:	blt	14164 <__assert_fail@plt+0x3458>
   140d0:	beq	13ff0 <__assert_fail@plt+0x32e4>
   140d4:	cmp	r4, #0
   140d8:	blt	141a0 <__assert_fail@plt+0x3494>
   140dc:	mov	r1, r7
   140e0:	mvn	r0, #-2147483648	; 0x80000000
   140e4:	bl	14a94 <__assert_fail@plt+0x3d88>
   140e8:	cmp	r0, r4
   140ec:	movge	r0, #0
   140f0:	movlt	r0, #1
   140f4:	cmp	r0, #0
   140f8:	mvnne	r2, #-2147483648	; 0x80000000
   140fc:	bne	13ff4 <__assert_fail@plt+0x32e8>
   14100:	mul	r1, r7, r4
   14104:	cmp	r1, #63	; 0x3f
   14108:	bgt	14020 <__assert_fail@plt+0x3314>
   1410c:	b	13ff0 <__assert_fail@plt+0x32e4>
   14110:	rsb	r3, r4, #-2147483648	; 0x80000000
   14114:	cmp	r6, r3
   14118:	movge	r3, #0
   1411c:	movlt	r3, #1
   14120:	b	13fbc <__assert_fail@plt+0x32b0>
   14124:	rsb	r3, r5, #-2147483648	; 0x80000000
   14128:	cmp	r6, r3
   1412c:	movge	r3, #0
   14130:	movlt	r3, #1
   14134:	b	14058 <__assert_fail@plt+0x334c>
   14138:	cmp	r5, #0
   1413c:	blt	141c4 <__assert_fail@plt+0x34b8>
   14140:	cmn	r7, #1
   14144:	beq	140b0 <__assert_fail@plt+0x33a4>
   14148:	mov	r1, r7
   1414c:	mov	r0, #-2147483648	; 0x80000000
   14150:	bl	14a94 <__assert_fail@plt+0x3d88>
   14154:	cmp	r5, r0
   14158:	movle	r0, #0
   1415c:	movgt	r0, #1
   14160:	b	140a8 <__assert_fail@plt+0x339c>
   14164:	cmp	r4, #0
   14168:	blt	14204 <__assert_fail@plt+0x34f8>
   1416c:	cmn	r7, #1
   14170:	beq	14100 <__assert_fail@plt+0x33f4>
   14174:	mov	r1, r7
   14178:	mov	r0, #-2147483648	; 0x80000000
   1417c:	bl	14a94 <__assert_fail@plt+0x3d88>
   14180:	cmp	r0, r4
   14184:	movge	r0, #0
   14188:	movlt	r0, #1
   1418c:	b	140f4 <__assert_fail@plt+0x33e8>
   14190:	mov	r4, fp
   14194:	b	140dc <__assert_fail@plt+0x33d0>
   14198:	mov	r4, fp
   1419c:	b	1416c <__assert_fail@plt+0x3460>
   141a0:	cmn	r4, #1
   141a4:	beq	14100 <__assert_fail@plt+0x33f4>
   141a8:	mov	r1, r4
   141ac:	mov	r0, #-2147483648	; 0x80000000
   141b0:	bl	14a94 <__assert_fail@plt+0x3d88>
   141b4:	cmp	r7, r0
   141b8:	movle	r0, #0
   141bc:	movgt	r0, #1
   141c0:	b	140f4 <__assert_fail@plt+0x33e8>
   141c4:	mov	r1, r7
   141c8:	mvn	r0, #-2147483648	; 0x80000000
   141cc:	bl	14a94 <__assert_fail@plt+0x3d88>
   141d0:	cmp	r5, r0
   141d4:	movge	r0, #0
   141d8:	movlt	r0, #1
   141dc:	b	140a8 <__assert_fail@plt+0x339c>
   141e0:	cmn	r5, #1
   141e4:	beq	140b0 <__assert_fail@plt+0x33a4>
   141e8:	mov	r1, r5
   141ec:	mov	r0, #-2147483648	; 0x80000000
   141f0:	bl	14a94 <__assert_fail@plt+0x3d88>
   141f4:	cmp	r7, r0
   141f8:	movle	r0, #0
   141fc:	movgt	r0, #1
   14200:	b	140a8 <__assert_fail@plt+0x339c>
   14204:	mov	r1, r7
   14208:	mvn	r0, #-2147483648	; 0x80000000
   1420c:	bl	14a94 <__assert_fail@plt+0x3d88>
   14210:	cmp	r0, r4
   14214:	movle	r0, #0
   14218:	movgt	r0, #1
   1421c:	b	140f4 <__assert_fail@plt+0x33e8>
   14220:	bl	1433c <__assert_fail@plt+0x3630>
   14224:	push	{r4, lr}
   14228:	mov	r1, #1
   1422c:	bl	1437c <__assert_fail@plt+0x3670>
   14230:	cmp	r0, #0
   14234:	popne	{r4, pc}
   14238:	bl	1433c <__assert_fail@plt+0x3630>
   1423c:	push	{r4, lr}
   14240:	mov	r1, #1
   14244:	bl	1437c <__assert_fail@plt+0x3670>
   14248:	cmp	r0, #0
   1424c:	popne	{r4, pc}
   14250:	bl	1433c <__assert_fail@plt+0x3630>
   14254:	push	{r4, lr}
   14258:	bl	1437c <__assert_fail@plt+0x3670>
   1425c:	cmp	r0, #0
   14260:	popne	{r4, pc}
   14264:	bl	1433c <__assert_fail@plt+0x3630>
   14268:	push	{r4, lr}
   1426c:	bl	1437c <__assert_fail@plt+0x3670>
   14270:	cmp	r0, #0
   14274:	popne	{r4, pc}
   14278:	bl	1433c <__assert_fail@plt+0x3630>
   1427c:	push	{r4, r5, r6, lr}
   14280:	mov	r6, r0
   14284:	mov	r0, r1
   14288:	mov	r4, r1
   1428c:	bl	143c4 <__assert_fail@plt+0x36b8>
   14290:	subs	r5, r0, #0
   14294:	beq	142ac <__assert_fail@plt+0x35a0>
   14298:	mov	r2, r4
   1429c:	mov	r1, r6
   142a0:	bl	10b50 <memcpy@plt>
   142a4:	mov	r0, r5
   142a8:	pop	{r4, r5, r6, pc}
   142ac:	bl	1433c <__assert_fail@plt+0x3630>
   142b0:	push	{r4, r5, r6, lr}
   142b4:	mov	r6, r0
   142b8:	mov	r0, r1
   142bc:	mov	r4, r1
   142c0:	bl	143c4 <__assert_fail@plt+0x36b8>
   142c4:	subs	r5, r0, #0
   142c8:	beq	142e0 <__assert_fail@plt+0x35d4>
   142cc:	mov	r2, r4
   142d0:	mov	r1, r6
   142d4:	bl	10b50 <memcpy@plt>
   142d8:	mov	r0, r5
   142dc:	pop	{r4, r5, r6, pc}
   142e0:	bl	1433c <__assert_fail@plt+0x3630>
   142e4:	push	{r4, r5, r6, lr}
   142e8:	mov	r6, r0
   142ec:	add	r0, r1, #1
   142f0:	mov	r4, r1
   142f4:	bl	143c4 <__assert_fail@plt+0x36b8>
   142f8:	subs	r5, r0, #0
   142fc:	beq	1431c <__assert_fail@plt+0x3610>
   14300:	mov	r3, #0
   14304:	mov	r1, r6
   14308:	strb	r3, [r5, r4]
   1430c:	mov	r2, r4
   14310:	bl	10b50 <memcpy@plt>
   14314:	mov	r0, r5
   14318:	pop	{r4, r5, r6, pc}
   1431c:	bl	1433c <__assert_fail@plt+0x3630>
   14320:	push	{r4, lr}
   14324:	mov	r4, r0
   14328:	bl	10c4c <strlen@plt>
   1432c:	add	r1, r0, #1
   14330:	mov	r0, r4
   14334:	pop	{r4, lr}
   14338:	b	1427c <__assert_fail@plt+0x3570>
   1433c:	ldr	r3, [pc, #44]	; 14370 <__assert_fail@plt+0x3664>
   14340:	push	{r4, lr}
   14344:	mov	r2, #5
   14348:	ldr	r1, [pc, #36]	; 14374 <__assert_fail@plt+0x3668>
   1434c:	mov	r0, #0
   14350:	ldr	r4, [r3]
   14354:	bl	10b80 <dcgettext@plt>
   14358:	ldr	r2, [pc, #24]	; 14378 <__assert_fail@plt+0x366c>
   1435c:	mov	r1, #0
   14360:	mov	r3, r0
   14364:	mov	r0, r4
   14368:	bl	10bec <error@plt>
   1436c:	bl	10d00 <abort@plt>
   14370:	ldrdeq	r6, [r2], -r0
   14374:	andeq	r5, r1, r4, lsr r8
   14378:	strdeq	r5, [r1], -r8
   1437c:	cmp	r1, #0
   14380:	cmpne	r0, #0
   14384:	moveq	r1, #1
   14388:	moveq	r0, r1
   1438c:	umull	r2, r3, r0, r1
   14390:	adds	r3, r3, #0
   14394:	movne	r3, #1
   14398:	cmp	r2, #0
   1439c:	blt	143ac <__assert_fail@plt+0x36a0>
   143a0:	cmp	r3, #0
   143a4:	bne	143ac <__assert_fail@plt+0x36a0>
   143a8:	b	10afc <calloc@plt>
   143ac:	push	{r4, lr}
   143b0:	bl	10c58 <__errno_location@plt>
   143b4:	mov	r3, #12
   143b8:	str	r3, [r0]
   143bc:	mov	r0, #0
   143c0:	pop	{r4, pc}
   143c4:	cmp	r0, #0
   143c8:	moveq	r0, #1
   143cc:	cmp	r0, #0
   143d0:	blt	143d8 <__assert_fail@plt+0x36cc>
   143d4:	b	10c04 <malloc@plt>
   143d8:	push	{r4, lr}
   143dc:	bl	10c58 <__errno_location@plt>
   143e0:	mov	r3, #12
   143e4:	str	r3, [r0]
   143e8:	mov	r0, #0
   143ec:	pop	{r4, pc}
   143f0:	cmp	r0, #0
   143f4:	beq	14418 <__assert_fail@plt+0x370c>
   143f8:	cmp	r1, #0
   143fc:	push	{lr}		; (str lr, [sp, #-4]!)
   14400:	sub	sp, sp, #12
   14404:	beq	14420 <__assert_fail@plt+0x3714>
   14408:	blt	14438 <__assert_fail@plt+0x372c>
   1440c:	add	sp, sp, #12
   14410:	pop	{lr}		; (ldr lr, [sp], #4)
   14414:	b	10b8c <realloc@plt>
   14418:	mov	r0, r1
   1441c:	b	143c4 <__assert_fail@plt+0x36b8>
   14420:	str	r1, [sp, #4]
   14424:	bl	145c8 <__assert_fail@plt+0x38bc>
   14428:	ldr	r3, [sp, #4]
   1442c:	mov	r0, r3
   14430:	add	sp, sp, #12
   14434:	pop	{pc}		; (ldr pc, [sp], #4)
   14438:	bl	10c58 <__errno_location@plt>
   1443c:	mov	r2, #12
   14440:	mov	r3, #0
   14444:	str	r2, [r0]
   14448:	b	1442c <__assert_fail@plt+0x3720>
   1444c:	push	{r4, r5, r6, lr}
   14450:	mov	r4, r0
   14454:	bl	10bd4 <__fpending@plt>
   14458:	ldr	r5, [r4]
   1445c:	and	r5, r5, #32
   14460:	mov	r6, r0
   14464:	mov	r0, r4
   14468:	bl	144c8 <__assert_fail@plt+0x37bc>
   1446c:	cmp	r5, #0
   14470:	mov	r4, r0
   14474:	bne	14494 <__assert_fail@plt+0x3788>
   14478:	cmp	r0, #0
   1447c:	beq	1448c <__assert_fail@plt+0x3780>
   14480:	cmp	r6, #0
   14484:	beq	144b0 <__assert_fail@plt+0x37a4>
   14488:	mvn	r4, #0
   1448c:	mov	r0, r4
   14490:	pop	{r4, r5, r6, pc}
   14494:	cmp	r0, #0
   14498:	bne	14488 <__assert_fail@plt+0x377c>
   1449c:	bl	10c58 <__errno_location@plt>
   144a0:	str	r4, [r0]
   144a4:	mvn	r4, #0
   144a8:	mov	r0, r4
   144ac:	pop	{r4, r5, r6, pc}
   144b0:	bl	10c58 <__errno_location@plt>
   144b4:	ldr	r4, [r0]
   144b8:	subs	r4, r4, #9
   144bc:	mvnne	r4, #0
   144c0:	mov	r0, r4
   144c4:	pop	{r4, r5, r6, pc}
   144c8:	push	{r4, r5, lr}
   144cc:	sub	sp, sp, #12
   144d0:	mov	r4, r0
   144d4:	bl	10c88 <fileno@plt>
   144d8:	cmp	r0, #0
   144dc:	mov	r0, r4
   144e0:	blt	1455c <__assert_fail@plt+0x3850>
   144e4:	bl	10c1c <__freading@plt>
   144e8:	cmp	r0, #0
   144ec:	bne	14528 <__assert_fail@plt+0x381c>
   144f0:	mov	r0, r4
   144f4:	bl	14568 <__assert_fail@plt+0x385c>
   144f8:	cmp	r0, #0
   144fc:	beq	14558 <__assert_fail@plt+0x384c>
   14500:	bl	10c58 <__errno_location@plt>
   14504:	mov	r5, r0
   14508:	mov	r0, r4
   1450c:	ldr	r4, [r5]
   14510:	bl	10ca0 <fclose@plt>
   14514:	cmp	r4, #0
   14518:	mvnne	r0, #0
   1451c:	strne	r4, [r5]
   14520:	add	sp, sp, #12
   14524:	pop	{r4, r5, pc}
   14528:	mov	r0, r4
   1452c:	bl	10c88 <fileno@plt>
   14530:	mov	r3, #1
   14534:	str	r3, [sp]
   14538:	mov	r2, #0
   1453c:	mov	r3, #0
   14540:	bl	10bbc <lseek64@plt>
   14544:	mvn	r3, #0
   14548:	mvn	r2, #0
   1454c:	cmp	r1, r3
   14550:	cmpeq	r0, r2
   14554:	bne	144f0 <__assert_fail@plt+0x37e4>
   14558:	mov	r0, r4
   1455c:	add	sp, sp, #12
   14560:	pop	{r4, r5, lr}
   14564:	b	10ca0 <fclose@plt>
   14568:	push	{r4, lr}
   1456c:	subs	r4, r0, #0
   14570:	sub	sp, sp, #8
   14574:	beq	14590 <__assert_fail@plt+0x3884>
   14578:	bl	10c1c <__freading@plt>
   1457c:	cmp	r0, #0
   14580:	beq	14590 <__assert_fail@plt+0x3884>
   14584:	ldr	r3, [r4]
   14588:	tst	r3, #256	; 0x100
   1458c:	bne	145a0 <__assert_fail@plt+0x3894>
   14590:	mov	r0, r4
   14594:	add	sp, sp, #8
   14598:	pop	{r4, lr}
   1459c:	b	10b2c <fflush@plt>
   145a0:	mov	r3, #1
   145a4:	str	r3, [sp]
   145a8:	mov	r2, #0
   145ac:	mov	r3, #0
   145b0:	mov	r0, r4
   145b4:	bl	14620 <__assert_fail@plt+0x3914>
   145b8:	mov	r0, r4
   145bc:	add	sp, sp, #8
   145c0:	pop	{r4, lr}
   145c4:	b	10b2c <fflush@plt>
   145c8:	push	{r4, r5, lr}
   145cc:	sub	sp, sp, #12
   145d0:	mov	r5, r0
   145d4:	bl	10c58 <__errno_location@plt>
   145d8:	mov	r2, #0
   145dc:	mov	r4, r0
   145e0:	ldr	r3, [r0]
   145e4:	str	r2, [r4]
   145e8:	mov	r0, r5
   145ec:	str	r3, [sp]
   145f0:	str	r3, [sp, #4]
   145f4:	bl	10b38 <free@plt>
   145f8:	ldr	r3, [r4]
   145fc:	add	r2, sp, #8
   14600:	cmp	r3, #0
   14604:	moveq	r3, #4
   14608:	movne	r3, #0
   1460c:	add	r3, r2, r3
   14610:	ldr	r3, [r3, #-8]
   14614:	str	r3, [r4]
   14618:	add	sp, sp, #12
   1461c:	pop	{r4, r5, pc}
   14620:	push	{r4, r5, r6, r7, r8, lr}
   14624:	sub	sp, sp, #8
   14628:	ldmib	r0, {ip, lr}
   1462c:	mov	r4, r0
   14630:	ldr	r5, [sp, #32]
   14634:	cmp	lr, ip
   14638:	beq	14650 <__assert_fail@plt+0x3944>
   1463c:	str	r5, [sp, #32]
   14640:	mov	r0, r4
   14644:	add	sp, sp, #8
   14648:	pop	{r4, r5, r6, r7, r8, lr}
   1464c:	b	10cac <fseeko64@plt>
   14650:	ldr	lr, [r0, #20]
   14654:	ldr	ip, [r0, #16]
   14658:	cmp	lr, ip
   1465c:	bne	1463c <__assert_fail@plt+0x3930>
   14660:	ldr	r8, [r0, #36]	; 0x24
   14664:	cmp	r8, #0
   14668:	bne	1463c <__assert_fail@plt+0x3930>
   1466c:	mov	r6, r2
   14670:	mov	r7, r3
   14674:	bl	10c88 <fileno@plt>
   14678:	mov	r2, r6
   1467c:	mov	r3, r7
   14680:	str	r5, [sp]
   14684:	bl	10bbc <lseek64@plt>
   14688:	mvn	r3, #0
   1468c:	mvn	r2, #0
   14690:	cmp	r1, r3
   14694:	cmpeq	r0, r2
   14698:	beq	146b8 <__assert_fail@plt+0x39ac>
   1469c:	ldr	r3, [r4]
   146a0:	strd	r0, [r4, #80]	; 0x50
   146a4:	mov	r0, r8
   146a8:	bic	r3, r3, #16
   146ac:	str	r3, [r4]
   146b0:	add	sp, sp, #8
   146b4:	pop	{r4, r5, r6, r7, r8, pc}
   146b8:	mvn	r0, #0
   146bc:	b	146b0 <__assert_fail@plt+0x39a4>
   146c0:	push	{r4, lr}
   146c4:	mov	r0, #14
   146c8:	bl	10cdc <nl_langinfo@plt>
   146cc:	cmp	r0, #0
   146d0:	beq	146e8 <__assert_fail@plt+0x39dc>
   146d4:	ldrb	r2, [r0]
   146d8:	ldr	r3, [pc, #16]	; 146f0 <__assert_fail@plt+0x39e4>
   146dc:	cmp	r2, #0
   146e0:	moveq	r0, r3
   146e4:	pop	{r4, pc}
   146e8:	ldr	r0, [pc]	; 146f0 <__assert_fail@plt+0x39e4>
   146ec:	pop	{r4, pc}
   146f0:	andeq	r5, r1, r8, asr #16
   146f4:	push	{r4, r5, r6, r7, lr}
   146f8:	subs	r6, r0, #0
   146fc:	sub	sp, sp, #12
   14700:	addeq	r6, sp, #4
   14704:	mov	r0, r6
   14708:	mov	r5, r2
   1470c:	mov	r7, r1
   14710:	bl	10be0 <mbrtowc@plt>
   14714:	cmp	r5, #0
   14718:	cmnne	r0, #3
   1471c:	mov	r4, r0
   14720:	bls	1473c <__assert_fail@plt+0x3a30>
   14724:	mov	r0, #0
   14728:	bl	14794 <__assert_fail@plt+0x3a88>
   1472c:	cmp	r0, #0
   14730:	moveq	r4, #1
   14734:	ldrbeq	r3, [r7]
   14738:	streq	r3, [r6]
   1473c:	mov	r0, r4
   14740:	add	sp, sp, #12
   14744:	pop	{r4, r5, r6, r7, pc}
   14748:	push	{r4, r5, r6, lr}
   1474c:	subs	r4, r2, #0
   14750:	mov	r6, r0
   14754:	mov	r5, r1
   14758:	beq	14784 <__assert_fail@plt+0x3a78>
   1475c:	mov	r1, r4
   14760:	mvn	r0, #0
   14764:	bl	14888 <__assert_fail@plt+0x3b7c>
   14768:	cmp	r0, r5
   1476c:	bcs	14784 <__assert_fail@plt+0x3a78>
   14770:	bl	10c58 <__errno_location@plt>
   14774:	mov	r3, #12
   14778:	str	r3, [r0]
   1477c:	mov	r0, #0
   14780:	pop	{r4, r5, r6, pc}
   14784:	mul	r1, r5, r4
   14788:	mov	r0, r6
   1478c:	pop	{r4, r5, r6, lr}
   14790:	b	143f0 <__assert_fail@plt+0x36e4>
   14794:	push	{lr}		; (str lr, [sp, #-4]!)
   14798:	sub	sp, sp, #268	; 0x10c
   1479c:	add	r1, sp, #4
   147a0:	ldr	r2, [pc, #60]	; 147e4 <__assert_fail@plt+0x3ad8>
   147a4:	bl	147f0 <__assert_fail@plt+0x3ae4>
   147a8:	cmp	r0, #0
   147ac:	movne	r0, #0
   147b0:	bne	147dc <__assert_fail@plt+0x3ad0>
   147b4:	ldr	r1, [pc, #44]	; 147e8 <__assert_fail@plt+0x3adc>
   147b8:	add	r0, sp, #4
   147bc:	bl	10b20 <strcmp@plt>
   147c0:	cmp	r0, #0
   147c4:	beq	147dc <__assert_fail@plt+0x3ad0>
   147c8:	add	r0, sp, #4
   147cc:	ldr	r1, [pc, #24]	; 147ec <__assert_fail@plt+0x3ae0>
   147d0:	bl	10b20 <strcmp@plt>
   147d4:	adds	r0, r0, #0
   147d8:	movne	r0, #1
   147dc:	add	sp, sp, #268	; 0x10c
   147e0:	pop	{pc}		; (ldr pc, [sp], #4)
   147e4:	andeq	r0, r0, r1, lsl #2
   147e8:	andeq	r5, r1, r0, asr r8
   147ec:	andeq	r5, r1, r4, asr r8
   147f0:	push	{r4, r5, r6, lr}
   147f4:	mov	r5, r1
   147f8:	mov	r1, #0
   147fc:	mov	r4, r2
   14800:	bl	10cc4 <setlocale@plt>
   14804:	subs	r6, r0, #0
   14808:	beq	14864 <__assert_fail@plt+0x3b58>
   1480c:	bl	10c4c <strlen@plt>
   14810:	cmp	r4, r0
   14814:	bhi	1484c <__assert_fail@plt+0x3b40>
   14818:	cmp	r4, #0
   1481c:	bne	14828 <__assert_fail@plt+0x3b1c>
   14820:	mov	r0, #34	; 0x22
   14824:	pop	{r4, r5, r6, pc}
   14828:	sub	r4, r4, #1
   1482c:	mov	r1, r6
   14830:	mov	r2, r4
   14834:	mov	r0, r5
   14838:	bl	10b50 <memcpy@plt>
   1483c:	mov	r3, #0
   14840:	strb	r3, [r5, r4]
   14844:	mov	r0, #34	; 0x22
   14848:	pop	{r4, r5, r6, pc}
   1484c:	add	r2, r0, #1
   14850:	mov	r1, r6
   14854:	mov	r0, r5
   14858:	bl	10b50 <memcpy@plt>
   1485c:	mov	r0, #0
   14860:	pop	{r4, r5, r6, pc}
   14864:	cmp	r4, #0
   14868:	beq	14878 <__assert_fail@plt+0x3b6c>
   1486c:	strb	r6, [r5]
   14870:	mov	r0, #22
   14874:	pop	{r4, r5, r6, pc}
   14878:	mov	r0, #22
   1487c:	pop	{r4, r5, r6, pc}
   14880:	mov	r1, #0
   14884:	b	10cc4 <setlocale@plt>
   14888:	subs	r2, r1, #1
   1488c:	bxeq	lr
   14890:	bcc	14a68 <__assert_fail@plt+0x3d5c>
   14894:	cmp	r0, r1
   14898:	bls	14a4c <__assert_fail@plt+0x3d40>
   1489c:	tst	r1, r2
   148a0:	beq	14a58 <__assert_fail@plt+0x3d4c>
   148a4:	clz	r3, r0
   148a8:	clz	r2, r1
   148ac:	sub	r3, r2, r3
   148b0:	rsbs	r3, r3, #31
   148b4:	addne	r3, r3, r3, lsl #1
   148b8:	mov	r2, #0
   148bc:	addne	pc, pc, r3, lsl #2
   148c0:	nop			; (mov r0, r0)
   148c4:	cmp	r0, r1, lsl #31
   148c8:	adc	r2, r2, r2
   148cc:	subcs	r0, r0, r1, lsl #31
   148d0:	cmp	r0, r1, lsl #30
   148d4:	adc	r2, r2, r2
   148d8:	subcs	r0, r0, r1, lsl #30
   148dc:	cmp	r0, r1, lsl #29
   148e0:	adc	r2, r2, r2
   148e4:	subcs	r0, r0, r1, lsl #29
   148e8:	cmp	r0, r1, lsl #28
   148ec:	adc	r2, r2, r2
   148f0:	subcs	r0, r0, r1, lsl #28
   148f4:	cmp	r0, r1, lsl #27
   148f8:	adc	r2, r2, r2
   148fc:	subcs	r0, r0, r1, lsl #27
   14900:	cmp	r0, r1, lsl #26
   14904:	adc	r2, r2, r2
   14908:	subcs	r0, r0, r1, lsl #26
   1490c:	cmp	r0, r1, lsl #25
   14910:	adc	r2, r2, r2
   14914:	subcs	r0, r0, r1, lsl #25
   14918:	cmp	r0, r1, lsl #24
   1491c:	adc	r2, r2, r2
   14920:	subcs	r0, r0, r1, lsl #24
   14924:	cmp	r0, r1, lsl #23
   14928:	adc	r2, r2, r2
   1492c:	subcs	r0, r0, r1, lsl #23
   14930:	cmp	r0, r1, lsl #22
   14934:	adc	r2, r2, r2
   14938:	subcs	r0, r0, r1, lsl #22
   1493c:	cmp	r0, r1, lsl #21
   14940:	adc	r2, r2, r2
   14944:	subcs	r0, r0, r1, lsl #21
   14948:	cmp	r0, r1, lsl #20
   1494c:	adc	r2, r2, r2
   14950:	subcs	r0, r0, r1, lsl #20
   14954:	cmp	r0, r1, lsl #19
   14958:	adc	r2, r2, r2
   1495c:	subcs	r0, r0, r1, lsl #19
   14960:	cmp	r0, r1, lsl #18
   14964:	adc	r2, r2, r2
   14968:	subcs	r0, r0, r1, lsl #18
   1496c:	cmp	r0, r1, lsl #17
   14970:	adc	r2, r2, r2
   14974:	subcs	r0, r0, r1, lsl #17
   14978:	cmp	r0, r1, lsl #16
   1497c:	adc	r2, r2, r2
   14980:	subcs	r0, r0, r1, lsl #16
   14984:	cmp	r0, r1, lsl #15
   14988:	adc	r2, r2, r2
   1498c:	subcs	r0, r0, r1, lsl #15
   14990:	cmp	r0, r1, lsl #14
   14994:	adc	r2, r2, r2
   14998:	subcs	r0, r0, r1, lsl #14
   1499c:	cmp	r0, r1, lsl #13
   149a0:	adc	r2, r2, r2
   149a4:	subcs	r0, r0, r1, lsl #13
   149a8:	cmp	r0, r1, lsl #12
   149ac:	adc	r2, r2, r2
   149b0:	subcs	r0, r0, r1, lsl #12
   149b4:	cmp	r0, r1, lsl #11
   149b8:	adc	r2, r2, r2
   149bc:	subcs	r0, r0, r1, lsl #11
   149c0:	cmp	r0, r1, lsl #10
   149c4:	adc	r2, r2, r2
   149c8:	subcs	r0, r0, r1, lsl #10
   149cc:	cmp	r0, r1, lsl #9
   149d0:	adc	r2, r2, r2
   149d4:	subcs	r0, r0, r1, lsl #9
   149d8:	cmp	r0, r1, lsl #8
   149dc:	adc	r2, r2, r2
   149e0:	subcs	r0, r0, r1, lsl #8
   149e4:	cmp	r0, r1, lsl #7
   149e8:	adc	r2, r2, r2
   149ec:	subcs	r0, r0, r1, lsl #7
   149f0:	cmp	r0, r1, lsl #6
   149f4:	adc	r2, r2, r2
   149f8:	subcs	r0, r0, r1, lsl #6
   149fc:	cmp	r0, r1, lsl #5
   14a00:	adc	r2, r2, r2
   14a04:	subcs	r0, r0, r1, lsl #5
   14a08:	cmp	r0, r1, lsl #4
   14a0c:	adc	r2, r2, r2
   14a10:	subcs	r0, r0, r1, lsl #4
   14a14:	cmp	r0, r1, lsl #3
   14a18:	adc	r2, r2, r2
   14a1c:	subcs	r0, r0, r1, lsl #3
   14a20:	cmp	r0, r1, lsl #2
   14a24:	adc	r2, r2, r2
   14a28:	subcs	r0, r0, r1, lsl #2
   14a2c:	cmp	r0, r1, lsl #1
   14a30:	adc	r2, r2, r2
   14a34:	subcs	r0, r0, r1, lsl #1
   14a38:	cmp	r0, r1
   14a3c:	adc	r2, r2, r2
   14a40:	subcs	r0, r0, r1
   14a44:	mov	r0, r2
   14a48:	bx	lr
   14a4c:	moveq	r0, #1
   14a50:	movne	r0, #0
   14a54:	bx	lr
   14a58:	clz	r2, r1
   14a5c:	rsb	r2, r2, #31
   14a60:	lsr	r0, r0, r2
   14a64:	bx	lr
   14a68:	cmp	r0, #0
   14a6c:	mvnne	r0, #0
   14a70:	b	14cd4 <__assert_fail@plt+0x3fc8>
   14a74:	cmp	r1, #0
   14a78:	beq	14a68 <__assert_fail@plt+0x3d5c>
   14a7c:	push	{r0, r1, lr}
   14a80:	bl	14888 <__assert_fail@plt+0x3b7c>
   14a84:	pop	{r1, r2, lr}
   14a88:	mul	r3, r2, r0
   14a8c:	sub	r1, r1, r3
   14a90:	bx	lr
   14a94:	cmp	r1, #0
   14a98:	beq	14ca4 <__assert_fail@plt+0x3f98>
   14a9c:	eor	ip, r0, r1
   14aa0:	rsbmi	r1, r1, #0
   14aa4:	subs	r2, r1, #1
   14aa8:	beq	14c70 <__assert_fail@plt+0x3f64>
   14aac:	movs	r3, r0
   14ab0:	rsbmi	r3, r0, #0
   14ab4:	cmp	r3, r1
   14ab8:	bls	14c7c <__assert_fail@plt+0x3f70>
   14abc:	tst	r1, r2
   14ac0:	beq	14c8c <__assert_fail@plt+0x3f80>
   14ac4:	clz	r2, r3
   14ac8:	clz	r0, r1
   14acc:	sub	r2, r0, r2
   14ad0:	rsbs	r2, r2, #31
   14ad4:	addne	r2, r2, r2, lsl #1
   14ad8:	mov	r0, #0
   14adc:	addne	pc, pc, r2, lsl #2
   14ae0:	nop			; (mov r0, r0)
   14ae4:	cmp	r3, r1, lsl #31
   14ae8:	adc	r0, r0, r0
   14aec:	subcs	r3, r3, r1, lsl #31
   14af0:	cmp	r3, r1, lsl #30
   14af4:	adc	r0, r0, r0
   14af8:	subcs	r3, r3, r1, lsl #30
   14afc:	cmp	r3, r1, lsl #29
   14b00:	adc	r0, r0, r0
   14b04:	subcs	r3, r3, r1, lsl #29
   14b08:	cmp	r3, r1, lsl #28
   14b0c:	adc	r0, r0, r0
   14b10:	subcs	r3, r3, r1, lsl #28
   14b14:	cmp	r3, r1, lsl #27
   14b18:	adc	r0, r0, r0
   14b1c:	subcs	r3, r3, r1, lsl #27
   14b20:	cmp	r3, r1, lsl #26
   14b24:	adc	r0, r0, r0
   14b28:	subcs	r3, r3, r1, lsl #26
   14b2c:	cmp	r3, r1, lsl #25
   14b30:	adc	r0, r0, r0
   14b34:	subcs	r3, r3, r1, lsl #25
   14b38:	cmp	r3, r1, lsl #24
   14b3c:	adc	r0, r0, r0
   14b40:	subcs	r3, r3, r1, lsl #24
   14b44:	cmp	r3, r1, lsl #23
   14b48:	adc	r0, r0, r0
   14b4c:	subcs	r3, r3, r1, lsl #23
   14b50:	cmp	r3, r1, lsl #22
   14b54:	adc	r0, r0, r0
   14b58:	subcs	r3, r3, r1, lsl #22
   14b5c:	cmp	r3, r1, lsl #21
   14b60:	adc	r0, r0, r0
   14b64:	subcs	r3, r3, r1, lsl #21
   14b68:	cmp	r3, r1, lsl #20
   14b6c:	adc	r0, r0, r0
   14b70:	subcs	r3, r3, r1, lsl #20
   14b74:	cmp	r3, r1, lsl #19
   14b78:	adc	r0, r0, r0
   14b7c:	subcs	r3, r3, r1, lsl #19
   14b80:	cmp	r3, r1, lsl #18
   14b84:	adc	r0, r0, r0
   14b88:	subcs	r3, r3, r1, lsl #18
   14b8c:	cmp	r3, r1, lsl #17
   14b90:	adc	r0, r0, r0
   14b94:	subcs	r3, r3, r1, lsl #17
   14b98:	cmp	r3, r1, lsl #16
   14b9c:	adc	r0, r0, r0
   14ba0:	subcs	r3, r3, r1, lsl #16
   14ba4:	cmp	r3, r1, lsl #15
   14ba8:	adc	r0, r0, r0
   14bac:	subcs	r3, r3, r1, lsl #15
   14bb0:	cmp	r3, r1, lsl #14
   14bb4:	adc	r0, r0, r0
   14bb8:	subcs	r3, r3, r1, lsl #14
   14bbc:	cmp	r3, r1, lsl #13
   14bc0:	adc	r0, r0, r0
   14bc4:	subcs	r3, r3, r1, lsl #13
   14bc8:	cmp	r3, r1, lsl #12
   14bcc:	adc	r0, r0, r0
   14bd0:	subcs	r3, r3, r1, lsl #12
   14bd4:	cmp	r3, r1, lsl #11
   14bd8:	adc	r0, r0, r0
   14bdc:	subcs	r3, r3, r1, lsl #11
   14be0:	cmp	r3, r1, lsl #10
   14be4:	adc	r0, r0, r0
   14be8:	subcs	r3, r3, r1, lsl #10
   14bec:	cmp	r3, r1, lsl #9
   14bf0:	adc	r0, r0, r0
   14bf4:	subcs	r3, r3, r1, lsl #9
   14bf8:	cmp	r3, r1, lsl #8
   14bfc:	adc	r0, r0, r0
   14c00:	subcs	r3, r3, r1, lsl #8
   14c04:	cmp	r3, r1, lsl #7
   14c08:	adc	r0, r0, r0
   14c0c:	subcs	r3, r3, r1, lsl #7
   14c10:	cmp	r3, r1, lsl #6
   14c14:	adc	r0, r0, r0
   14c18:	subcs	r3, r3, r1, lsl #6
   14c1c:	cmp	r3, r1, lsl #5
   14c20:	adc	r0, r0, r0
   14c24:	subcs	r3, r3, r1, lsl #5
   14c28:	cmp	r3, r1, lsl #4
   14c2c:	adc	r0, r0, r0
   14c30:	subcs	r3, r3, r1, lsl #4
   14c34:	cmp	r3, r1, lsl #3
   14c38:	adc	r0, r0, r0
   14c3c:	subcs	r3, r3, r1, lsl #3
   14c40:	cmp	r3, r1, lsl #2
   14c44:	adc	r0, r0, r0
   14c48:	subcs	r3, r3, r1, lsl #2
   14c4c:	cmp	r3, r1, lsl #1
   14c50:	adc	r0, r0, r0
   14c54:	subcs	r3, r3, r1, lsl #1
   14c58:	cmp	r3, r1
   14c5c:	adc	r0, r0, r0
   14c60:	subcs	r3, r3, r1
   14c64:	cmp	ip, #0
   14c68:	rsbmi	r0, r0, #0
   14c6c:	bx	lr
   14c70:	teq	ip, r0
   14c74:	rsbmi	r0, r0, #0
   14c78:	bx	lr
   14c7c:	movcc	r0, #0
   14c80:	asreq	r0, ip, #31
   14c84:	orreq	r0, r0, #1
   14c88:	bx	lr
   14c8c:	clz	r2, r1
   14c90:	rsb	r2, r2, #31
   14c94:	cmp	ip, #0
   14c98:	lsr	r0, r3, r2
   14c9c:	rsbmi	r0, r0, #0
   14ca0:	bx	lr
   14ca4:	cmp	r0, #0
   14ca8:	mvngt	r0, #-2147483648	; 0x80000000
   14cac:	movlt	r0, #-2147483648	; 0x80000000
   14cb0:	b	14cd4 <__assert_fail@plt+0x3fc8>
   14cb4:	cmp	r1, #0
   14cb8:	beq	14ca4 <__assert_fail@plt+0x3f98>
   14cbc:	push	{r0, r1, lr}
   14cc0:	bl	14a9c <__assert_fail@plt+0x3d90>
   14cc4:	pop	{r1, r2, lr}
   14cc8:	mul	r3, r2, r0
   14ccc:	sub	r1, r1, r3
   14cd0:	bx	lr
   14cd4:	push	{r1, lr}
   14cd8:	mov	r0, #8
   14cdc:	bl	10b14 <raise@plt>
   14ce0:	pop	{r1, pc}
   14ce4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14ce8:	mov	r7, r0
   14cec:	ldr	r6, [pc, #72]	; 14d3c <__assert_fail@plt+0x4030>
   14cf0:	ldr	r5, [pc, #72]	; 14d40 <__assert_fail@plt+0x4034>
   14cf4:	add	r6, pc, r6
   14cf8:	add	r5, pc, r5
   14cfc:	sub	r6, r6, r5
   14d00:	mov	r8, r1
   14d04:	mov	r9, r2
   14d08:	bl	10adc <calloc@plt-0x20>
   14d0c:	asrs	r6, r6, #2
   14d10:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d14:	mov	r4, #0
   14d18:	add	r4, r4, #1
   14d1c:	ldr	r3, [r5], #4
   14d20:	mov	r2, r9
   14d24:	mov	r1, r8
   14d28:	mov	r0, r7
   14d2c:	blx	r3
   14d30:	cmp	r6, r4
   14d34:	bne	14d18 <__assert_fail@plt+0x400c>
   14d38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d3c:	andeq	r1, r1, r4, lsl r2
   14d40:	andeq	r1, r1, ip, lsl #4
   14d44:	bx	lr
   14d48:	ldr	r3, [pc, #12]	; 14d5c <__assert_fail@plt+0x4050>
   14d4c:	mov	r1, #0
   14d50:	add	r3, pc, r3
   14d54:	ldr	r2, [r3]
   14d58:	b	10c64 <__cxa_atexit@plt>
   14d5c:	andeq	r1, r1, r0, ror r3

Disassembly of section .fini:

00014d60 <.fini>:
   14d60:	push	{r3, lr}
   14d64:	pop	{r3, pc}
