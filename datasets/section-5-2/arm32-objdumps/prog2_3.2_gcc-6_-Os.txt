
../repos/prog2/3.2:     file format elf32-littlearm


Disassembly of section .init:

00010690 <.init>:
   10690:	push	{r3, lr}
   10694:	bl	10a08 <_start@@Base+0x3c>
   10698:	pop	{r3, pc}

Disassembly of section .plt:

0001069c <printf@plt-0x14>:
   1069c:	push	{lr}		; (str lr, [sp, #-4]!)
   106a0:	ldr	lr, [pc, #4]	; 106ac <printf@plt-0x4>
   106a4:	add	lr, pc, lr
   106a8:	ldr	pc, [lr, #8]!
   106ac:	andeq	r0, r1, r4, asr r9

000106b0 <printf@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2388]!	; 0x954

000106bc <puts@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #16, 20	; 0x10000
   106c4:	ldr	pc, [ip, #2380]!	; 0x94c

000106c8 <__libc_start_main@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2372]!	; 0x944

000106d4 <__gmon_start__@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2364]!	; 0x93c

000106e0 <strlen@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #16, 20	; 0x10000
   106e8:	ldr	pc, [ip, #2356]!	; 0x934

000106ec <abort@plt>:
   106ec:	add	ip, pc, #0, 12
   106f0:	add	ip, ip, #16, 20	; 0x10000
   106f4:	ldr	pc, [ip, #2348]!	; 0x92c

Disassembly of section .text:

000106f8 <main@@Base>:
   106f8:	push	{r4, r5, r6, r7, lr}
   106fc:	sub	sp, sp, #76	; 0x4c
   10700:	ldr	lr, [pc, #648]	; 10990 <main@@Base+0x298>
   10704:	add	ip, sp, #24
   10708:	add	r4, sp, #24
   1070c:	ldm	lr!, {r0, r1, r2, r3}
   10710:	mov	r5, #0
   10714:	ldr	r6, [pc, #632]	; 10994 <main@@Base+0x29c>
   10718:	stmia	ip!, {r0, r1, r2, r3}
   1071c:	ldm	lr, {r0, r1}
   10720:	add	lr, sp, #48	; 0x30
   10724:	stm	ip, {r0, r1}
   10728:	ldm	r4!, {r0, r1, r2, r3}
   1072c:	add	r4, sp, #48	; 0x30
   10730:	stmia	lr!, {r0, r1, r2, r3}
   10734:	ldm	ip, {r0, r1}
   10738:	stm	lr, {r0, r1}
   1073c:	ldr	r0, [pc, #596]	; 10998 <main@@Base+0x2a0>
   10740:	bl	106bc <puts@plt>
   10744:	ldr	r0, [pc, #592]	; 1099c <main@@Base+0x2a4>
   10748:	bl	106b0 <printf@plt>
   1074c:	ldr	r1, [r4, r5, lsl #2]
   10750:	mov	r0, r6
   10754:	add	r5, r5, #1
   10758:	bl	106b0 <printf@plt>
   1075c:	cmp	r5, #6
   10760:	bne	1074c <main@@Base+0x54>
   10764:	ldr	r0, [pc, #564]	; 109a0 <main@@Base+0x2a8>
   10768:	bl	106bc <puts@plt>
   1076c:	mov	r1, r5
   10770:	ldr	r3, [pc, #556]	; 109a4 <main@@Base+0x2ac>
   10774:	mov	r2, #4
   10778:	mov	r0, r4
   1077c:	bl	10b80 <sort@@Base>
   10780:	ldr	r0, [pc, #544]	; 109a8 <main@@Base+0x2b0>
   10784:	bl	106b0 <printf@plt>
   10788:	ldr	r6, [pc, #516]	; 10994 <main@@Base+0x29c>
   1078c:	mov	r5, #0
   10790:	ldr	r1, [r4, r5, lsl #2]
   10794:	mov	r0, r6
   10798:	add	r5, r5, #1
   1079c:	bl	106b0 <printf@plt>
   107a0:	cmp	r5, #6
   107a4:	bne	10790 <main@@Base+0x98>
   107a8:	ldr	r0, [pc, #496]	; 109a0 <main@@Base+0x2a8>
   107ac:	bl	106bc <puts@plt>
   107b0:	add	lr, sp, #24
   107b4:	mov	ip, r4
   107b8:	ldm	lr!, {r0, r1, r2, r3}
   107bc:	add	r6, sp, #72	; 0x48
   107c0:	ldr	r7, [pc, #476]	; 109a4 <main@@Base+0x2ac>
   107c4:	stmia	ip!, {r0, r1, r2, r3}
   107c8:	ldm	lr, {r0, r1}
   107cc:	stm	ip, {r0, r1}
   107d0:	ldr	r0, [pc, #468]	; 109ac <main@@Base+0x2b4>
   107d4:	bl	106bc <puts@plt>
   107d8:	mov	r3, #4
   107dc:	str	r3, [r6, #-60]!	; 0xffffffc4
   107e0:	mov	r2, r5
   107e4:	str	r7, [sp]
   107e8:	mov	r1, r4
   107ec:	mov	r0, r6
   107f0:	bl	10c04 <linear_search@@Base>
   107f4:	subs	r2, r0, #0
   107f8:	beq	10970 <main@@Base+0x278>
   107fc:	sub	r2, r2, r4
   10800:	ldr	r1, [sp, #12]
   10804:	asr	r2, r2, #2
   10808:	ldr	r0, [pc, #416]	; 109b0 <main@@Base+0x2b8>
   1080c:	bl	106b0 <printf@plt>
   10810:	add	lr, sp, #24
   10814:	mov	ip, r4
   10818:	ldm	lr!, {r0, r1, r2, r3}
   1081c:	stmia	ip!, {r0, r1, r2, r3}
   10820:	mov	r2, #4
   10824:	ldm	lr, {r0, r1}
   10828:	ldr	r3, [pc, #372]	; 109a4 <main@@Base+0x2ac>
   1082c:	stm	ip, {r0, r1}
   10830:	mov	r1, #6
   10834:	mov	r0, r4
   10838:	bl	10b80 <sort@@Base>
   1083c:	ldr	r0, [pc, #368]	; 109b4 <main@@Base+0x2bc>
   10840:	bl	106bc <puts@plt>
   10844:	mov	r2, #6
   10848:	str	r7, [sp]
   1084c:	mov	r3, #4
   10850:	mov	r1, r4
   10854:	mov	r0, r6
   10858:	bl	10c5c <binary_search@@Base>
   1085c:	subs	r2, r0, #0
   10860:	beq	10980 <main@@Base+0x288>
   10864:	sub	r2, r2, r4
   10868:	ldr	r1, [sp, #12]
   1086c:	asr	r2, r2, #2
   10870:	ldr	r0, [pc, #312]	; 109b0 <main@@Base+0x2b8>
   10874:	bl	106b0 <printf@plt>
   10878:	add	ip, sp, #24
   1087c:	mov	lr, r4
   10880:	ldm	ip!, {r0, r1, r2, r3}
   10884:	mov	r5, #0
   10888:	ldr	r6, [pc, #260]	; 10994 <main@@Base+0x29c>
   1088c:	stmia	lr!, {r0, r1, r2, r3}
   10890:	ldm	ip, {r0, r1}
   10894:	stm	lr, {r0, r1}
   10898:	ldr	r0, [pc, #280]	; 109b8 <main@@Base+0x2c0>
   1089c:	bl	106bc <puts@plt>
   108a0:	ldr	r0, [pc, #244]	; 1099c <main@@Base+0x2a4>
   108a4:	bl	106b0 <printf@plt>
   108a8:	ldr	r1, [r4, r5, lsl #2]
   108ac:	mov	r0, r6
   108b0:	add	r5, r5, #1
   108b4:	bl	106b0 <printf@plt>
   108b8:	cmp	r5, #6
   108bc:	bne	108a8 <main@@Base+0x1b0>
   108c0:	ldr	r0, [pc, #216]	; 109a0 <main@@Base+0x2a8>
   108c4:	bl	106bc <puts@plt>
   108c8:	mov	r1, r5
   108cc:	ldr	r3, [pc, #208]	; 109a4 <main@@Base+0x2ac>
   108d0:	mov	r2, #4
   108d4:	mov	r0, r4
   108d8:	bl	10ccc <insertion_sort@@Base>
   108dc:	ldr	r0, [pc, #196]	; 109a8 <main@@Base+0x2b0>
   108e0:	bl	106b0 <printf@plt>
   108e4:	ldr	r6, [pc, #168]	; 10994 <main@@Base+0x29c>
   108e8:	mov	r5, #0
   108ec:	ldr	r1, [r4, r5, lsl #2]
   108f0:	mov	r0, r6
   108f4:	add	r5, r5, #1
   108f8:	bl	106b0 <printf@plt>
   108fc:	cmp	r5, #6
   10900:	bne	108ec <main@@Base+0x1f4>
   10904:	ldr	r0, [pc, #148]	; 109a0 <main@@Base+0x2a8>
   10908:	bl	106bc <puts@plt>
   1090c:	ldr	r0, [pc, #168]	; 109bc <main@@Base+0x2c4>
   10910:	bl	106bc <puts@plt>
   10914:	ldr	r3, [pc, #164]	; 109c0 <main@@Base+0x2c8>
   10918:	ldr	r0, [r3]
   1091c:	ldrb	r3, [r3, #4]
   10920:	str	r0, [sp, #16]
   10924:	ldr	r0, [pc, #112]	; 1099c <main@@Base+0x2a4>
   10928:	strb	r3, [sp, #20]
   1092c:	bl	106b0 <printf@plt>
   10930:	add	r0, sp, #16
   10934:	bl	106bc <puts@plt>
   10938:	add	r0, sp, #16
   1093c:	bl	106e0 <strlen@plt>
   10940:	ldr	r3, [pc, #124]	; 109c4 <main@@Base+0x2cc>
   10944:	mov	r2, #1
   10948:	mov	r1, r0
   1094c:	add	r0, sp, #16
   10950:	bl	10b80 <sort@@Base>
   10954:	ldr	r0, [pc, #76]	; 109a8 <main@@Base+0x2b0>
   10958:	bl	106b0 <printf@plt>
   1095c:	add	r0, sp, #16
   10960:	bl	106bc <puts@plt>
   10964:	mov	r0, #0
   10968:	add	sp, sp, #76	; 0x4c
   1096c:	pop	{r4, r5, r6, r7, pc}
   10970:	ldr	r1, [sp, #12]
   10974:	ldr	r0, [pc, #76]	; 109c8 <main@@Base+0x2d0>
   10978:	bl	106b0 <printf@plt>
   1097c:	b	10810 <main@@Base+0x118>
   10980:	ldr	r1, [sp, #12]
   10984:	ldr	r0, [pc, #60]	; 109c8 <main@@Base+0x2d0>
   10988:	bl	106b0 <printf@plt>
   1098c:	b	10878 <main@@Base+0x180>
   10990:			; <UNDEFINED> instruction: 0x00010db8
   10994:	andeq	r0, r1, r5, ror #27
   10998:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   1099c:	ldrdeq	r0, [r1], -lr
   109a0:	andeq	r0, r1, r7, lsr #28
   109a4:	strdeq	r0, [r1], -r4
   109a8:	andeq	r0, r1, r9, ror #27
   109ac:	strdeq	r0, [r1], -r1
   109b0:	strdeq	r0, [r1], -fp
   109b4:	andeq	r0, r1, sl, asr #28
   109b8:	andeq	r0, r1, r4, asr lr
   109bc:	andeq	r0, r1, lr, asr lr
   109c0:	andeq	r0, r1, r8, ror #28
   109c4:	andeq	r0, r1, r8, lsl fp
   109c8:	andeq	r0, r1, r8, lsr #28

000109cc <_start@@Base>:
   109cc:	mov	fp, #0
   109d0:	mov	lr, #0
   109d4:	pop	{r1}		; (ldr r1, [sp], #4)
   109d8:	mov	r2, sp
   109dc:	push	{r2}		; (str r2, [sp, #-4]!)
   109e0:	push	{r0}		; (str r0, [sp, #-4]!)
   109e4:	ldr	ip, [pc, #16]	; 109fc <_start@@Base+0x30>
   109e8:	push	{ip}		; (str ip, [sp, #-4]!)
   109ec:	ldr	r0, [pc, #12]	; 10a00 <_start@@Base+0x34>
   109f0:	ldr	r3, [pc, #12]	; 10a04 <_start@@Base+0x38>
   109f4:	bl	106c8 <__libc_start_main@plt>
   109f8:	bl	106ec <abort@plt>
   109fc:	andeq	r0, r1, r8, lsr #27
   10a00:	strdeq	r0, [r1], -r8
   10a04:	andeq	r0, r1, r8, asr #26
   10a08:	ldr	r3, [pc, #20]	; 10a24 <_start@@Base+0x58>
   10a0c:	ldr	r2, [pc, #20]	; 10a28 <_start@@Base+0x5c>
   10a10:	add	r3, pc, r3
   10a14:	ldr	r2, [r3, r2]
   10a18:	cmp	r2, #0
   10a1c:	bxeq	lr
   10a20:	b	106d4 <__gmon_start__@plt>
   10a24:	andeq	r0, r1, r8, ror #11
   10a28:	andeq	r0, r0, r4, lsr #32
   10a2c:	ldr	r3, [pc, #28]	; 10a50 <_start@@Base+0x84>
   10a30:	ldr	r0, [pc, #28]	; 10a54 <_start@@Base+0x88>
   10a34:	sub	r3, r3, r0
   10a38:	cmp	r3, #6
   10a3c:	bxls	lr
   10a40:	ldr	r3, [pc, #16]	; 10a58 <_start@@Base+0x8c>
   10a44:	cmp	r3, #0
   10a48:	bxeq	lr
   10a4c:	bx	r3
   10a50:	andeq	r1, r2, r3, lsr r0
   10a54:	andeq	r1, r2, r0, lsr r0
   10a58:	andeq	r0, r0, r0
   10a5c:	ldr	r1, [pc, #36]	; 10a88 <_start@@Base+0xbc>
   10a60:	ldr	r0, [pc, #36]	; 10a8c <_start@@Base+0xc0>
   10a64:	sub	r1, r1, r0
   10a68:	asr	r1, r1, #2
   10a6c:	add	r1, r1, r1, lsr #31
   10a70:	asrs	r1, r1, #1
   10a74:	bxeq	lr
   10a78:	ldr	r3, [pc, #16]	; 10a90 <_start@@Base+0xc4>
   10a7c:	cmp	r3, #0
   10a80:	bxeq	lr
   10a84:	bx	r3
   10a88:	andeq	r1, r2, r0, lsr r0
   10a8c:	andeq	r1, r2, r0, lsr r0
   10a90:	andeq	r0, r0, r0
   10a94:	push	{r4, lr}
   10a98:	ldr	r4, [pc, #24]	; 10ab8 <_start@@Base+0xec>
   10a9c:	ldrb	r3, [r4]
   10aa0:	cmp	r3, #0
   10aa4:	popne	{r4, pc}
   10aa8:	bl	10a2c <_start@@Base+0x60>
   10aac:	mov	r3, #1
   10ab0:	strb	r3, [r4]
   10ab4:	pop	{r4, pc}
   10ab8:	andeq	r1, r2, r0, lsr r0
   10abc:	ldr	r0, [pc, #40]	; 10aec <_start@@Base+0x120>
   10ac0:	ldr	r3, [r0]
   10ac4:	cmp	r3, #0
   10ac8:	bne	10ad0 <_start@@Base+0x104>
   10acc:	b	10a5c <_start@@Base+0x90>
   10ad0:	ldr	r3, [pc, #24]	; 10af0 <_start@@Base+0x124>
   10ad4:	cmp	r3, #0
   10ad8:	beq	10acc <_start@@Base+0x100>
   10adc:	push	{r4, lr}
   10ae0:	blx	r3
   10ae4:	pop	{r4, lr}
   10ae8:	b	10a5c <_start@@Base+0x90>
   10aec:	andeq	r0, r2, r4, lsl pc
   10af0:	andeq	r0, r0, r0

00010af4 <comp_int_asc@@Base>:
   10af4:	ldr	r2, [r0]
   10af8:	ldr	r3, [r1]
   10afc:	cmp	r2, r3
   10b00:	blt	10b10 <comp_int_asc@@Base+0x1c>
   10b04:	movgt	r0, #1
   10b08:	movle	r0, #0
   10b0c:	bx	lr
   10b10:	mvn	r0, #0
   10b14:	bx	lr

00010b18 <comp_char_desc@@Base>:
   10b18:	ldrb	r2, [r0]
   10b1c:	ldrb	r3, [r1]
   10b20:	cmp	r2, r3
   10b24:	bcc	10b34 <comp_char_desc@@Base+0x1c>
   10b28:	mvnhi	r0, #0
   10b2c:	movls	r0, #0
   10b30:	bx	lr
   10b34:	mov	r0, #1
   10b38:	bx	lr

00010b3c <get_elem@@Base>:
   10b3c:	mla	r0, r2, r1, r0
   10b40:	bx	lr

00010b44 <swap@@Base>:
   10b44:	sub	ip, r1, r1
   10b48:	cmp	r2, ip
   10b4c:	sub	r0, r0, #1
   10b50:	mov	r3, r1
   10b54:	bgt	10b5c <swap@@Base+0x18>
   10b58:	bx	lr
   10b5c:	push	{lr}		; (str lr, [sp, #-4]!)
   10b60:	ldrb	ip, [r0, #1]
   10b64:	ldrb	lr, [r3]
   10b68:	strb	lr, [r0, #1]!
   10b6c:	strb	ip, [r3], #1
   10b70:	sub	ip, r3, r1
   10b74:	cmp	r2, ip
   10b78:	bgt	10b60 <swap@@Base+0x1c>
   10b7c:	pop	{pc}		; (ldr pc, [sp], #4)

00010b80 <sort@@Base>:
   10b80:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b84:	mov	sl, r1
   10b88:	mov	r8, r2
   10b8c:	mov	fp, r3
   10b90:	mov	r5, r0
   10b94:	mov	r4, #0
   10b98:	cmp	r4, sl
   10b9c:	blt	10ba8 <sort@@Base+0x28>
   10ba0:	add	sp, sp, #12
   10ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ba8:	mov	r3, r5
   10bac:	add	r4, r4, #1
   10bb0:	add	r5, r5, r8
   10bb4:	mov	r7, r5
   10bb8:	mov	r6, r3
   10bbc:	mov	r9, r4
   10bc0:	cmp	r9, sl
   10bc4:	bne	10bdc <sort@@Base+0x5c>
   10bc8:	mov	r2, r8
   10bcc:	mov	r1, r3
   10bd0:	mov	r0, r6
   10bd4:	bl	10b44 <swap@@Base>
   10bd8:	b	10b98 <sort@@Base+0x18>
   10bdc:	str	r3, [sp, #4]
   10be0:	mov	r1, r6
   10be4:	mov	r0, r7
   10be8:	blx	fp
   10bec:	add	r9, r9, #1
   10bf0:	ldr	r3, [sp, #4]
   10bf4:	cmp	r0, #0
   10bf8:	movlt	r6, r7
   10bfc:	add	r7, r7, r8
   10c00:	b	10bc0 <sort@@Base+0x40>

00010c04 <linear_search@@Base>:
   10c04:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10c08:	mov	r8, r0
   10c0c:	ldr	sl, [sp, #32]
   10c10:	mov	r7, r1
   10c14:	mov	r6, r2
   10c18:	mov	r9, r3
   10c1c:	mov	r5, r1
   10c20:	mov	r4, #0
   10c24:	cmp	r4, r6
   10c28:	blt	10c34 <linear_search@@Base+0x30>
   10c2c:	mov	r0, #0
   10c30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10c34:	mov	r0, r5
   10c38:	mov	r1, r8
   10c3c:	blx	sl
   10c40:	add	r5, r5, r6
   10c44:	cmp	r0, #0
   10c48:	bne	10c54 <linear_search@@Base+0x50>
   10c4c:	mla	r0, r9, r4, r7
   10c50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10c54:	add	r4, r4, #1
   10c58:	b	10c24 <linear_search@@Base+0x20>

00010c5c <binary_search@@Base>:
   10c5c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c60:	mov	r6, r0
   10c64:	ldr	r7, [sp, #40]	; 0x28
   10c68:	mov	r8, r1
   10c6c:	mov	r9, r3
   10c70:	sub	sl, r2, #1
   10c74:	mov	fp, #0
   10c78:	cmp	fp, sl
   10c7c:	ble	10c8c <binary_search@@Base+0x30>
   10c80:	mov	r5, #0
   10c84:	mov	r0, r5
   10c88:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c8c:	add	r4, fp, sl
   10c90:	mov	r0, r6
   10c94:	add	r4, r4, r4, lsr #31
   10c98:	asr	r4, r4, #1
   10c9c:	mla	r5, r9, r4, r8
   10ca0:	mov	r1, r5
   10ca4:	blx	r7
   10ca8:	cmp	r0, #0
   10cac:	bne	10c84 <binary_search@@Base+0x28>
   10cb0:	mov	r1, r5
   10cb4:	mov	r0, r6
   10cb8:	blx	r7
   10cbc:	cmn	r0, #1
   10cc0:	subeq	sl, r4, #1
   10cc4:	addne	fp, r4, #1
   10cc8:	b	10c78 <binary_search@@Base+0x1c>

00010ccc <insertion_sort@@Base>:
   10ccc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10cd0:	mov	sl, r1
   10cd4:	mov	r8, r2
   10cd8:	mov	fp, r3
   10cdc:	mov	r4, #0
   10ce0:	mov	r5, #1
   10ce4:	str	r0, [sp, #4]
   10ce8:	cmp	r5, sl
   10cec:	bge	10d40 <insertion_sort@@Base+0x74>
   10cf0:	ldr	r3, [sp, #4]
   10cf4:	add	r4, r4, r8
   10cf8:	add	r6, r3, r4
   10cfc:	mov	r7, r5
   10d00:	sub	r9, r6, r8
   10d04:	mov	r1, r9
   10d08:	mov	r0, r6
   10d0c:	blx	fp
   10d10:	sub	r7, r7, #1
   10d14:	cmn	r0, #1
   10d18:	bne	10d38 <insertion_sort@@Base+0x6c>
   10d1c:	mov	r0, r6
   10d20:	mov	r2, r8
   10d24:	mov	r1, r9
   10d28:	bl	10b44 <swap@@Base>
   10d2c:	cmp	r7, #0
   10d30:	mov	r6, r9
   10d34:	bne	10d00 <insertion_sort@@Base+0x34>
   10d38:	add	r5, r5, #1
   10d3c:	b	10ce8 <insertion_sort@@Base+0x1c>
   10d40:	add	sp, sp, #12
   10d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010d48 <__libc_csu_init@@Base>:
   10d48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10d4c:	mov	r7, r0
   10d50:	ldr	r6, [pc, #72]	; 10da0 <__libc_csu_init@@Base+0x58>
   10d54:	ldr	r5, [pc, #72]	; 10da4 <__libc_csu_init@@Base+0x5c>
   10d58:	add	r6, pc, r6
   10d5c:	add	r5, pc, r5
   10d60:	sub	r6, r6, r5
   10d64:	mov	r8, r1
   10d68:	mov	r9, r2
   10d6c:	bl	10690 <printf@plt-0x20>
   10d70:	asrs	r6, r6, #2
   10d74:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10d78:	mov	r4, #0
   10d7c:	add	r4, r4, #1
   10d80:	ldr	r3, [r5], #4
   10d84:	mov	r2, r9
   10d88:	mov	r1, r8
   10d8c:	mov	r0, r7
   10d90:	blx	r3
   10d94:	cmp	r6, r4
   10d98:	bne	10d7c <__libc_csu_init@@Base+0x34>
   10d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10da0:			; <UNDEFINED> instruction: 0x000101b0
   10da4:	andeq	r0, r1, r8, lsr #3

00010da8 <__libc_csu_fini@@Base>:
   10da8:	bx	lr

Disassembly of section .fini:

00010dac <.fini>:
   10dac:	push	{r3, lr}
   10db0:	pop	{r3, pc}
