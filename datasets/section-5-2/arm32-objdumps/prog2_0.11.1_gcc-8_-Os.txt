
../repos/prog2/0.11.1:     file format elf32-littlearm


Disassembly of section .init:

00010574 <.init>:
   10574:	push	{r3, lr}
   10578:	bl	10690 <_start@@Base+0x3c>
   1057c:	pop	{r3, pc}

Disassembly of section .plt:

00010580 <printf@plt-0x14>:
   10580:	push	{lr}		; (str lr, [sp, #-4]!)
   10584:	ldr	lr, [pc, #4]	; 10590 <printf@plt-0x4>
   10588:	add	lr, pc, lr
   1058c:	ldr	pc, [lr, #8]!
   10590:	andeq	r0, r1, r0, ror sl

00010594 <printf@plt>:
   10594:	add	ip, pc, #0, 12
   10598:	add	ip, ip, #16, 20	; 0x10000
   1059c:	ldr	pc, [ip, #2672]!	; 0xa70

000105a0 <__libc_start_main@plt>:
   105a0:	add	ip, pc, #0, 12
   105a4:	add	ip, ip, #16, 20	; 0x10000
   105a8:	ldr	pc, [ip, #2664]!	; 0xa68

000105ac <__gmon_start__@plt>:
   105ac:	add	ip, pc, #0, 12
   105b0:	add	ip, ip, #16, 20	; 0x10000
   105b4:	ldr	pc, [ip, #2656]!	; 0xa60

000105b8 <__isoc99_scanf@plt>:
   105b8:	add	ip, pc, #0, 12
   105bc:	add	ip, ip, #16, 20	; 0x10000
   105c0:	ldr	pc, [ip, #2648]!	; 0xa58

000105c4 <abort@plt>:
   105c4:	add	ip, pc, #0, 12
   105c8:	add	ip, ip, #16, 20	; 0x10000
   105cc:	ldr	pc, [ip, #2640]!	; 0xa50

Disassembly of section .text:

000105d0 <main@@Base>:
   105d0:	push	{r4, r5, r6, r7, lr}
   105d4:	sub	sp, sp, #20
   105d8:	mov	r4, #0
   105dc:	add	r1, sp, #4
   105e0:	ldr	r5, [pc, #96]	; 10648 <main@@Base+0x78>
   105e4:	ldr	r6, [pc, #96]	; 1064c <main@@Base+0x7c>
   105e8:	ldr	r0, [pc, #96]	; 10650 <main@@Base+0x80>
   105ec:	bl	105b8 <__isoc99_scanf@plt>
   105f0:	ldr	r3, [sp, #4]
   105f4:	cmp	r3, r4
   105f8:	bgt	10608 <main@@Base+0x38>
   105fc:	mov	r0, #0
   10600:	add	sp, sp, #20
   10604:	pop	{r4, r5, r6, r7, pc}
   10608:	add	r1, sp, #8
   1060c:	add	r2, sp, #12
   10610:	mov	r0, r5
   10614:	add	r4, r4, #1
   10618:	bl	105b8 <__isoc99_scanf@plt>
   1061c:	ldr	r0, [sp, #8]
   10620:	bl	10744 <invert@@Base>
   10624:	mov	r7, r0
   10628:	ldr	r0, [sp, #12]
   1062c:	bl	10744 <invert@@Base>
   10630:	add	r0, r7, r0
   10634:	bl	10744 <invert@@Base>
   10638:	mov	r1, r0
   1063c:	mov	r0, r6
   10640:	bl	10594 <printf@plt>
   10644:	b	105f0 <main@@Base+0x20>
   10648:	ldrdeq	r0, [r1], -ip
   1064c:	andeq	r0, r1, r2, ror #15
   10650:	ldrdeq	r0, [r1], -pc	; <UNPREDICTABLE>

00010654 <_start@@Base>:
   10654:	mov	fp, #0
   10658:	mov	lr, #0
   1065c:	pop	{r1}		; (ldr r1, [sp], #4)
   10660:	mov	r2, sp
   10664:	push	{r2}		; (str r2, [sp, #-4]!)
   10668:	push	{r0}		; (str r0, [sp, #-4]!)
   1066c:	ldr	ip, [pc, #16]	; 10684 <_start@@Base+0x30>
   10670:	push	{ip}		; (str ip, [sp, #-4]!)
   10674:	ldr	r0, [pc, #12]	; 10688 <_start@@Base+0x34>
   10678:	ldr	r3, [pc, #12]	; 1068c <_start@@Base+0x38>
   1067c:	bl	105a0 <__libc_start_main@plt>
   10680:	bl	105c4 <abort@plt>
   10684:	andeq	r0, r1, ip, asr #15
   10688:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   1068c:	andeq	r0, r1, ip, ror #14
   10690:	ldr	r3, [pc, #20]	; 106ac <_start@@Base+0x58>
   10694:	ldr	r2, [pc, #20]	; 106b0 <_start@@Base+0x5c>
   10698:	add	r3, pc, r3
   1069c:	ldr	r2, [r3, r2]
   106a0:	cmp	r2, #0
   106a4:	bxeq	lr
   106a8:	b	105ac <__gmon_start__@plt>
   106ac:	andeq	r0, r1, r0, ror #18
   106b0:	andeq	r0, r0, r0, lsr #32
   106b4:	ldr	r0, [pc, #24]	; 106d4 <_start@@Base+0x80>
   106b8:	ldr	r3, [pc, #24]	; 106d8 <_start@@Base+0x84>
   106bc:	cmp	r3, r0
   106c0:	bxeq	lr
   106c4:	ldr	r3, [pc, #16]	; 106dc <_start@@Base+0x88>
   106c8:	cmp	r3, #0
   106cc:	bxeq	lr
   106d0:	bx	r3
   106d4:	andeq	r1, r2, ip, lsr #32
   106d8:	andeq	r1, r2, ip, lsr #32
   106dc:	andeq	r0, r0, r0
   106e0:	ldr	r0, [pc, #36]	; 1070c <_start@@Base+0xb8>
   106e4:	ldr	r1, [pc, #36]	; 10710 <_start@@Base+0xbc>
   106e8:	sub	r1, r1, r0
   106ec:	asr	r1, r1, #2
   106f0:	add	r1, r1, r1, lsr #31
   106f4:	asrs	r1, r1, #1
   106f8:	bxeq	lr
   106fc:	ldr	r3, [pc, #16]	; 10714 <_start@@Base+0xc0>
   10700:	cmp	r3, #0
   10704:	bxeq	lr
   10708:	bx	r3
   1070c:	andeq	r1, r2, ip, lsr #32
   10710:	andeq	r1, r2, ip, lsr #32
   10714:	andeq	r0, r0, r0
   10718:	push	{r4, lr}
   1071c:	ldr	r4, [pc, #24]	; 1073c <_start@@Base+0xe8>
   10720:	ldrb	r3, [r4]
   10724:	cmp	r3, #0
   10728:	popne	{r4, pc}
   1072c:	bl	106b4 <_start@@Base+0x60>
   10730:	mov	r3, #1
   10734:	strb	r3, [r4]
   10738:	pop	{r4, pc}
   1073c:	andeq	r1, r2, ip, lsr #32
   10740:	b	106e0 <_start@@Base+0x8c>

00010744 <invert@@Base>:
   10744:	mov	r3, r0
   10748:	mov	r2, #10
   1074c:	mov	r0, #0
   10750:	cmp	r3, #0
   10754:	bxeq	lr
   10758:	sdiv	r1, r3, r2
   1075c:	mls	r3, r2, r1, r3
   10760:	mla	r0, r2, r0, r3
   10764:	mov	r3, r1
   10768:	b	10750 <invert@@Base+0xc>

0001076c <__libc_csu_init@@Base>:
   1076c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10770:	mov	r7, r0
   10774:	ldr	r6, [pc, #72]	; 107c4 <__libc_csu_init@@Base+0x58>
   10778:	ldr	r5, [pc, #72]	; 107c8 <__libc_csu_init@@Base+0x5c>
   1077c:	add	r6, pc, r6
   10780:	add	r5, pc, r5
   10784:	sub	r6, r6, r5
   10788:	mov	r8, r1
   1078c:	mov	r9, r2
   10790:	bl	10574 <printf@plt-0x20>
   10794:	asrs	r6, r6, #2
   10798:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1079c:	mov	r4, #0
   107a0:	add	r4, r4, #1
   107a4:	ldr	r3, [r5], #4
   107a8:	mov	r2, r9
   107ac:	mov	r1, r8
   107b0:	mov	r0, r7
   107b4:	blx	r3
   107b8:	cmp	r6, r4
   107bc:	bne	107a0 <__libc_csu_init@@Base+0x34>
   107c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   107c4:	muleq	r1, r0, r7
   107c8:	andeq	r0, r1, r8, lsl #15

000107cc <__libc_csu_fini@@Base>:
   107cc:	bx	lr

Disassembly of section .fini:

000107d0 <.fini>:
   107d0:	push	{r3, lr}
   107d4:	pop	{r3, pc}
