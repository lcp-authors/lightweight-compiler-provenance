
../repos/coreutils/src/nproc:     file format elf32-littlearm


Disassembly of section .init:

00010dc4 <.init>:
   10dc4:	push	{r3, lr}
   10dc8:	bl	11084 <__assert_fail@plt+0x48>
   10dcc:	pop	{r3, pc}

Disassembly of section .plt:

00010dd0 <calloc@plt-0x14>:
   10dd0:	push	{lr}		; (str lr, [sp, #-4]!)
   10dd4:	ldr	lr, [pc, #4]	; 10de0 <calloc@plt-0x4>
   10dd8:	add	lr, pc, lr
   10ddc:	ldr	pc, [lr, #8]!
   10de0:	andeq	r5, r1, r0, lsr #4

00010de4 <calloc@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #86016	; 0x15000
   10dec:	ldr	pc, [ip, #544]!	; 0x220

00010df0 <fputs_unlocked@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #86016	; 0x15000
   10df8:	ldr	pc, [ip, #536]!	; 0x218

00010dfc <raise@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #86016	; 0x15000
   10e04:	ldr	pc, [ip, #528]!	; 0x210

00010e08 <strcmp@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #520]!	; 0x208

00010e14 <fflush@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #86016	; 0x15000
   10e1c:	ldr	pc, [ip, #512]!	; 0x200

00010e20 <free@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #86016	; 0x15000
   10e28:	ldr	pc, [ip, #504]!	; 0x1f8

00010e2c <_exit@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #86016	; 0x15000
   10e34:	ldr	pc, [ip, #496]!	; 0x1f0

00010e38 <memcpy@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #86016	; 0x15000
   10e40:	ldr	pc, [ip, #488]!	; 0x1e8

00010e44 <mbsinit@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #86016	; 0x15000
   10e4c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e50 <__sched_cpucount@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #86016	; 0x15000
   10e58:	ldr	pc, [ip, #472]!	; 0x1d8

00010e5c <memcmp@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #464]!	; 0x1d0

00010e68 <dcgettext@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #456]!	; 0x1c8

00010e74 <sysconf@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #448]!	; 0x1c0

00010e80 <realloc@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #440]!	; 0x1b8

00010e8c <textdomain@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #432]!	; 0x1b0

00010e98 <iswprint@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #86016	; 0x15000
   10ea0:	ldr	pc, [ip, #424]!	; 0x1a8

00010ea4 <lseek64@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #86016	; 0x15000
   10eac:	ldr	pc, [ip, #416]!	; 0x1a0

00010eb0 <__ctype_get_mb_cur_max@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #86016	; 0x15000
   10eb8:	ldr	pc, [ip, #408]!	; 0x198

00010ebc <__fpending@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #400]!	; 0x190

00010ec8 <ferror_unlocked@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #86016	; 0x15000
   10ed0:	ldr	pc, [ip, #392]!	; 0x188

00010ed4 <mbrtowc@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #86016	; 0x15000
   10edc:	ldr	pc, [ip, #384]!	; 0x180

00010ee0 <error@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #86016	; 0x15000
   10ee8:	ldr	pc, [ip, #376]!	; 0x178

00010eec <getenv@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #86016	; 0x15000
   10ef4:	ldr	pc, [ip, #368]!	; 0x170

00010ef8 <malloc@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #86016	; 0x15000
   10f00:	ldr	pc, [ip, #360]!	; 0x168

00010f04 <__libc_start_main@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #86016	; 0x15000
   10f0c:	ldr	pc, [ip, #352]!	; 0x160

00010f10 <__freading@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #86016	; 0x15000
   10f18:	ldr	pc, [ip, #344]!	; 0x158

00010f1c <__gmon_start__@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #86016	; 0x15000
   10f24:	ldr	pc, [ip, #336]!	; 0x150

00010f28 <getopt_long@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #86016	; 0x15000
   10f30:	ldr	pc, [ip, #328]!	; 0x148

00010f34 <__ctype_b_loc@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #320]!	; 0x140

00010f40 <exit@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #86016	; 0x15000
   10f48:	ldr	pc, [ip, #312]!	; 0x138

00010f4c <strtoul@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #86016	; 0x15000
   10f54:	ldr	pc, [ip, #304]!	; 0x130

00010f58 <strlen@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #86016	; 0x15000
   10f60:	ldr	pc, [ip, #296]!	; 0x128

00010f64 <strchr@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #86016	; 0x15000
   10f6c:	ldr	pc, [ip, #288]!	; 0x120

00010f70 <__errno_location@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #86016	; 0x15000
   10f78:	ldr	pc, [ip, #280]!	; 0x118

00010f7c <__cxa_atexit@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #86016	; 0x15000
   10f84:	ldr	pc, [ip, #272]!	; 0x110

00010f88 <memset@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #86016	; 0x15000
   10f90:	ldr	pc, [ip, #264]!	; 0x108

00010f94 <__printf_chk@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #86016	; 0x15000
   10f9c:	ldr	pc, [ip, #256]!	; 0x100

00010fa0 <fileno@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #86016	; 0x15000
   10fa8:	ldr	pc, [ip, #248]!	; 0xf8

00010fac <strtoumax@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #86016	; 0x15000
   10fb4:	ldr	pc, [ip, #240]!	; 0xf0

00010fb8 <__fprintf_chk@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #86016	; 0x15000
   10fc0:	ldr	pc, [ip, #232]!	; 0xe8

00010fc4 <fclose@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #86016	; 0x15000
   10fcc:	ldr	pc, [ip, #224]!	; 0xe0

00010fd0 <fseeko64@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #86016	; 0x15000
   10fd8:	ldr	pc, [ip, #216]!	; 0xd8

00010fdc <setlocale@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #86016	; 0x15000
   10fe4:	ldr	pc, [ip, #208]!	; 0xd0

00010fe8 <strrchr@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #86016	; 0x15000
   10ff0:	ldr	pc, [ip, #200]!	; 0xc8

00010ff4 <nl_langinfo@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #86016	; 0x15000
   10ffc:	ldr	pc, [ip, #192]!	; 0xc0

00011000 <sched_getaffinity@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #86016	; 0x15000
   11008:	ldr	pc, [ip, #184]!	; 0xb8

0001100c <bindtextdomain@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #86016	; 0x15000
   11014:	ldr	pc, [ip, #176]!	; 0xb0

00011018 <fputs@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #86016	; 0x15000
   11020:	ldr	pc, [ip, #168]!	; 0xa8

00011024 <strncmp@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #86016	; 0x15000
   1102c:	ldr	pc, [ip, #160]!	; 0xa0

00011030 <abort@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #86016	; 0x15000
   11038:	ldr	pc, [ip, #152]!	; 0x98

0001103c <__assert_fail@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #86016	; 0x15000
   11044:	ldr	pc, [ip, #144]!	; 0x90

Disassembly of section .text:

00011048 <.text>:
   11048:	mov	fp, #0
   1104c:	mov	lr, #0
   11050:	pop	{r1}		; (ldr r1, [sp], #4)
   11054:	mov	r2, sp
   11058:	push	{r2}		; (str r2, [sp, #-4]!)
   1105c:	push	{r0}		; (str r0, [sp, #-4]!)
   11060:	ldr	ip, [pc, #16]	; 11078 <__assert_fail@plt+0x3c>
   11064:	push	{ip}		; (str ip, [sp, #-4]!)
   11068:	ldr	r0, [pc, #12]	; 1107c <__assert_fail@plt+0x40>
   1106c:	ldr	r3, [pc, #12]	; 11080 <__assert_fail@plt+0x44>
   11070:	bl	10f04 <__libc_start_main@plt>
   11074:	bl	11030 <abort@plt>
   11078:	andeq	r4, r1, r0, lsr fp
   1107c:	andeq	r1, r1, r8, ror r3
   11080:	ldrdeq	r4, [r1], -r0
   11084:	ldr	r3, [pc, #20]	; 110a0 <__assert_fail@plt+0x64>
   11088:	ldr	r2, [pc, #20]	; 110a4 <__assert_fail@plt+0x68>
   1108c:	add	r3, pc, r3
   11090:	ldr	r2, [r3, r2]
   11094:	cmp	r2, #0
   11098:	bxeq	lr
   1109c:	b	10f1c <__gmon_start__@plt>
   110a0:	andeq	r4, r1, ip, ror #30
   110a4:	ldrdeq	r0, [r0], -r8
   110a8:	ldr	r0, [pc, #24]	; 110c8 <__assert_fail@plt+0x8c>
   110ac:	ldr	r3, [pc, #24]	; 110cc <__assert_fail@plt+0x90>
   110b0:	cmp	r3, r0
   110b4:	bxeq	lr
   110b8:	ldr	r3, [pc, #16]	; 110d0 <__assert_fail@plt+0x94>
   110bc:	cmp	r3, #0
   110c0:	bxeq	lr
   110c4:	bx	r3
   110c8:	andeq	r6, r2, r0, lsr r1
   110cc:	andeq	r6, r2, r0, lsr r1
   110d0:	andeq	r0, r0, r0
   110d4:	ldr	r0, [pc, #36]	; 11100 <__assert_fail@plt+0xc4>
   110d8:	ldr	r1, [pc, #36]	; 11104 <__assert_fail@plt+0xc8>
   110dc:	sub	r1, r1, r0
   110e0:	asr	r1, r1, #2
   110e4:	add	r1, r1, r1, lsr #31
   110e8:	asrs	r1, r1, #1
   110ec:	bxeq	lr
   110f0:	ldr	r3, [pc, #16]	; 11108 <__assert_fail@plt+0xcc>
   110f4:	cmp	r3, #0
   110f8:	bxeq	lr
   110fc:	bx	r3
   11100:	andeq	r6, r2, r0, lsr r1
   11104:	andeq	r6, r2, r0, lsr r1
   11108:	andeq	r0, r0, r0
   1110c:	push	{r4, lr}
   11110:	ldr	r4, [pc, #24]	; 11130 <__assert_fail@plt+0xf4>
   11114:	ldrb	r3, [r4]
   11118:	cmp	r3, #0
   1111c:	popne	{r4, pc}
   11120:	bl	110a8 <__assert_fail@plt+0x6c>
   11124:	mov	r3, #1
   11128:	strb	r3, [r4]
   1112c:	pop	{r4, pc}
   11130:	andeq	r6, r2, ip, asr #2
   11134:	b	110d4 <__assert_fail@plt+0x98>
   11138:	push	{fp, lr}
   1113c:	mov	fp, sp
   11140:	sub	sp, sp, #56	; 0x38
   11144:	mov	r8, r0
   11148:	cmp	r0, #0
   1114c:	bne	11338 <__assert_fail@plt+0x2fc>
   11150:	movw	r1, #19331	; 0x4b83
   11154:	mov	r0, #0
   11158:	mov	r2, #5
   1115c:	movt	r1, #1
   11160:	bl	10e68 <dcgettext@plt>
   11164:	mov	r1, r0
   11168:	movw	r0, #24920	; 0x6158
   1116c:	movt	r0, #2
   11170:	ldr	r2, [r0]
   11174:	mov	r0, #1
   11178:	bl	10f94 <__printf_chk@plt>
   1117c:	movw	r1, #19354	; 0x4b9a
   11180:	mov	r0, #0
   11184:	mov	r2, #5
   11188:	movt	r1, #1
   1118c:	bl	10e68 <dcgettext@plt>
   11190:	movw	r9, #24900	; 0x6144
   11194:	movt	r9, #2
   11198:	ldr	r1, [r9]
   1119c:	bl	10df0 <fputs_unlocked@plt>
   111a0:	movw	r1, #19482	; 0x4c1a
   111a4:	mov	r0, #0
   111a8:	mov	r2, #5
   111ac:	movt	r1, #1
   111b0:	bl	10e68 <dcgettext@plt>
   111b4:	ldr	r1, [r9]
   111b8:	bl	10df0 <fputs_unlocked@plt>
   111bc:	movw	r1, #19599	; 0x4c8f
   111c0:	mov	r0, #0
   111c4:	mov	r2, #5
   111c8:	movt	r1, #1
   111cc:	bl	10e68 <dcgettext@plt>
   111d0:	ldr	r1, [r9]
   111d4:	bl	10df0 <fputs_unlocked@plt>
   111d8:	movw	r1, #19644	; 0x4cbc
   111dc:	mov	r0, #0
   111e0:	mov	r2, #5
   111e4:	movt	r1, #1
   111e8:	bl	10e68 <dcgettext@plt>
   111ec:	ldr	r1, [r9]
   111f0:	bl	10df0 <fputs_unlocked@plt>
   111f4:	movw	r0, #20216	; 0x4ef8
   111f8:	mov	r6, sp
   111fc:	movt	r0, #1
   11200:	mov	r1, r6
   11204:	ldm	r0!, {r2, r3, r4, r5}
   11208:	stmia	r1!, {r2, r3, r4, r5}
   1120c:	ldm	r0!, {r2, r3, r4, r5, r7}
   11210:	stmia	r1!, {r2, r3, r4, r5, r7}
   11214:	ldm	r0, {r2, r3, r4, r5, r7}
   11218:	stm	r1, {r2, r3, r4, r5, r7}
   1121c:	movw	r1, #19797	; 0x4d55
   11220:	movw	r5, #19698	; 0x4cf2
   11224:	movt	r1, #1
   11228:	movt	r5, #1
   1122c:	mov	r0, r5
   11230:	bl	10e08 <strcmp@plt>
   11234:	cmp	r0, #0
   11238:	ldrne	r1, [r6, #8]!
   1123c:	cmpne	r1, #0
   11240:	bne	1122c <__assert_fail@plt+0x1f0>
   11244:	ldr	r6, [r6, #4]
   11248:	movw	r1, #19892	; 0x4db4
   1124c:	mov	r0, #0
   11250:	mov	r2, #5
   11254:	movt	r1, #1
   11258:	bl	10e68 <dcgettext@plt>
   1125c:	movw	r2, #19728	; 0x4d10
   11260:	movw	r3, #19915	; 0x4dcb
   11264:	mov	r1, r0
   11268:	mov	r0, #1
   1126c:	movt	r2, #1
   11270:	movt	r3, #1
   11274:	bl	10f94 <__printf_chk@plt>
   11278:	cmp	r6, #0
   1127c:	mov	r0, #5
   11280:	mov	r1, #0
   11284:	moveq	r6, r5
   11288:	bl	10fdc <setlocale@plt>
   1128c:	cmp	r0, #0
   11290:	beq	112c8 <__assert_fail@plt+0x28c>
   11294:	movw	r1, #19955	; 0x4df3
   11298:	mov	r2, #3
   1129c:	movt	r1, #1
   112a0:	bl	11024 <strncmp@plt>
   112a4:	cmp	r0, #0
   112a8:	beq	112c8 <__assert_fail@plt+0x28c>
   112ac:	movw	r1, #19959	; 0x4df7
   112b0:	mov	r0, #0
   112b4:	mov	r2, #5
   112b8:	movt	r1, #1
   112bc:	bl	10e68 <dcgettext@plt>
   112c0:	ldr	r1, [r9]
   112c4:	bl	10df0 <fputs_unlocked@plt>
   112c8:	movw	r1, #20030	; 0x4e3e
   112cc:	mov	r0, #0
   112d0:	mov	r2, #5
   112d4:	movt	r1, #1
   112d8:	bl	10e68 <dcgettext@plt>
   112dc:	movw	r2, #19915	; 0x4dcb
   112e0:	mov	r1, r0
   112e4:	mov	r0, #1
   112e8:	mov	r3, r5
   112ec:	movt	r2, #1
   112f0:	bl	10f94 <__printf_chk@plt>
   112f4:	movw	r1, #20057	; 0x4e59
   112f8:	mov	r0, #0
   112fc:	mov	r2, #5
   11300:	movt	r1, #1
   11304:	bl	10e68 <dcgettext@plt>
   11308:	movw	r3, #19481	; 0x4c19
   1130c:	mov	r1, r0
   11310:	movw	r0, #19825	; 0x4d71
   11314:	cmp	r6, r5
   11318:	mov	r2, r6
   1131c:	movt	r0, #1
   11320:	movt	r3, #1
   11324:	moveq	r3, r0
   11328:	mov	r0, #1
   1132c:	bl	10f94 <__printf_chk@plt>
   11330:	mov	r0, r8
   11334:	bl	10f40 <exit@plt>
   11338:	movw	r0, #24896	; 0x6140
   1133c:	movw	r1, #19292	; 0x4b5c
   11340:	mov	r2, #5
   11344:	movt	r0, #2
   11348:	movt	r1, #1
   1134c:	ldr	r5, [r0]
   11350:	mov	r0, #0
   11354:	bl	10e68 <dcgettext@plt>
   11358:	mov	r2, r0
   1135c:	movw	r0, #24920	; 0x6158
   11360:	mov	r1, #1
   11364:	movt	r0, #2
   11368:	ldr	r3, [r0]
   1136c:	mov	r0, r5
   11370:	bl	10fb8 <__fprintf_chk@plt>
   11374:	b	11330 <__assert_fail@plt+0x2f4>
   11378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1137c:	add	fp, sp, #28
   11380:	sub	sp, sp, #20
   11384:	mov	r5, r0
   11388:	ldr	r0, [r1]
   1138c:	mov	r4, r1
   11390:	bl	11834 <__assert_fail@plt+0x7f8>
   11394:	movw	sl, #19481	; 0x4c19
   11398:	mov	r0, #6
   1139c:	movt	sl, #1
   113a0:	mov	r1, sl
   113a4:	bl	10fdc <setlocale@plt>
   113a8:	movw	r6, #19732	; 0x4d14
   113ac:	movw	r1, #19704	; 0x4cf8
   113b0:	movt	r6, #1
   113b4:	movt	r1, #1
   113b8:	mov	r0, r6
   113bc:	bl	1100c <bindtextdomain@plt>
   113c0:	mov	r0, r6
   113c4:	bl	10e8c <textdomain@plt>
   113c8:	movw	r0, #5504	; 0x1580
   113cc:	movt	r0, #1
   113d0:	bl	14b34 <__assert_fail@plt+0x3af8>
   113d4:	movw	r8, #20136	; 0x4ea8
   113d8:	mov	r7, #2
   113dc:	mov	r6, #0
   113e0:	movt	r8, #1
   113e4:	b	1144c <__assert_fail@plt+0x410>
   113e8:	cmp	r0, #256	; 0x100
   113ec:	beq	1144c <__assert_fail@plt+0x410>
   113f0:	movw	r1, #257	; 0x101
   113f4:	cmp	r0, r1
   113f8:	bne	11558 <__assert_fail@plt+0x51c>
   113fc:	movw	r0, #24904	; 0x6148
   11400:	movw	r1, #19760	; 0x4d30
   11404:	mov	r2, #5
   11408:	movt	r0, #2
   1140c:	movt	r1, #1
   11410:	ldr	r6, [r0]
   11414:	mov	r0, #0
   11418:	bl	10e68 <dcgettext@plt>
   1141c:	mvn	r1, #0
   11420:	mov	r2, #0
   11424:	mov	r3, #0
   11428:	str	r1, [sp]
   1142c:	mov	r1, #0
   11430:	stmib	sp, {r1, sl}
   11434:	str	r0, [sp, #12]
   11438:	mov	r0, r6
   1143c:	str	r1, [sp, #16]
   11440:	bl	13db8 <__assert_fail@plt+0x2d7c>
   11444:	mov	r6, r0
   11448:	mov	r7, r9
   1144c:	mov	r9, r7
   11450:	mov	r7, #0
   11454:	mov	r0, r5
   11458:	mov	r1, r4
   1145c:	mov	r2, sl
   11460:	mov	r3, r8
   11464:	str	r7, [sp]
   11468:	bl	10f28 <getopt_long@plt>
   1146c:	cmp	r0, #255	; 0xff
   11470:	bgt	113e8 <__assert_fail@plt+0x3ac>
   11474:	cmn	r0, #1
   11478:	bne	114c0 <__assert_fail@plt+0x484>
   1147c:	movw	r7, #24888	; 0x6138
   11480:	movt	r7, #2
   11484:	ldr	r0, [r7]
   11488:	cmp	r0, r5
   1148c:	bne	11520 <__assert_fail@plt+0x4e4>
   11490:	mov	r0, r9
   11494:	bl	11668 <__assert_fail@plt+0x62c>
   11498:	movw	r1, #19792	; 0x4d50
   1149c:	subs	r2, r0, r6
   114a0:	mov	r0, #1
   114a4:	movls	r2, r0
   114a8:	movt	r1, #1
   114ac:	mov	r0, #1
   114b0:	bl	10f94 <__printf_chk@plt>
   114b4:	mov	r0, #0
   114b8:	sub	sp, fp, #28
   114bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114c0:	cmn	r0, #3
   114c4:	bne	11510 <__assert_fail@plt+0x4d4>
   114c8:	movw	r0, #24808	; 0x60e8
   114cc:	movw	r2, #19742	; 0x4d1e
   114d0:	mov	r1, #0
   114d4:	movt	r0, #2
   114d8:	movt	r2, #1
   114dc:	str	r1, [sp, #4]
   114e0:	movw	r1, #19698	; 0x4cf2
   114e4:	ldr	r3, [r0]
   114e8:	movw	r0, #24900	; 0x6144
   114ec:	str	r2, [sp]
   114f0:	movw	r2, #19728	; 0x4d10
   114f4:	movt	r1, #1
   114f8:	movt	r0, #2
   114fc:	movt	r2, #1
   11500:	ldr	r0, [r0]
   11504:	bl	13724 <__assert_fail@plt+0x26e8>
   11508:	mov	r0, #0
   1150c:	bl	10f40 <exit@plt>
   11510:	cmn	r0, #2
   11514:	bne	11558 <__assert_fail@plt+0x51c>
   11518:	mov	r0, #0
   1151c:	bl	11138 <__assert_fail@plt+0xfc>
   11520:	movw	r1, #19775	; 0x4d3f
   11524:	mov	r0, #0
   11528:	mov	r2, #5
   1152c:	movt	r1, #1
   11530:	bl	10e68 <dcgettext@plt>
   11534:	mov	r5, r0
   11538:	ldr	r0, [r7]
   1153c:	ldr	r0, [r4, r0, lsl #2]
   11540:	bl	13238 <__assert_fail@plt+0x21fc>
   11544:	mov	r3, r0
   11548:	mov	r0, #0
   1154c:	mov	r1, #0
   11550:	mov	r2, r5
   11554:	bl	10ee0 <error@plt>
   11558:	mov	r0, #1
   1155c:	bl	11138 <__assert_fail@plt+0xfc>
   11560:	movw	r1, #24912	; 0x6150
   11564:	movt	r1, #2
   11568:	str	r0, [r1]
   1156c:	bx	lr
   11570:	movw	r1, #24916	; 0x6154
   11574:	movt	r1, #2
   11578:	strb	r0, [r1]
   1157c:	bx	lr
   11580:	push	{r4, r5, r6, sl, fp, lr}
   11584:	add	fp, sp, #16
   11588:	sub	sp, sp, #8
   1158c:	movw	r0, #24900	; 0x6144
   11590:	movt	r0, #2
   11594:	ldr	r0, [r0]
   11598:	bl	1454c <__assert_fail@plt+0x3510>
   1159c:	cmp	r0, #0
   115a0:	beq	115c8 <__assert_fail@plt+0x58c>
   115a4:	movw	r0, #24916	; 0x6154
   115a8:	movt	r0, #2
   115ac:	ldrb	r0, [r0]
   115b0:	cmp	r0, #0
   115b4:	beq	115e8 <__assert_fail@plt+0x5ac>
   115b8:	bl	10f70 <__errno_location@plt>
   115bc:	ldr	r0, [r0]
   115c0:	cmp	r0, #32
   115c4:	bne	115e8 <__assert_fail@plt+0x5ac>
   115c8:	movw	r0, #24896	; 0x6140
   115cc:	movt	r0, #2
   115d0:	ldr	r0, [r0]
   115d4:	bl	1454c <__assert_fail@plt+0x3510>
   115d8:	cmp	r0, #0
   115dc:	subeq	sp, fp, #16
   115e0:	popeq	{r4, r5, r6, sl, fp, pc}
   115e4:	b	11658 <__assert_fail@plt+0x61c>
   115e8:	movw	r1, #20287	; 0x4f3f
   115ec:	mov	r0, #0
   115f0:	mov	r2, #5
   115f4:	movt	r1, #1
   115f8:	bl	10e68 <dcgettext@plt>
   115fc:	mov	r4, r0
   11600:	movw	r0, #24912	; 0x6150
   11604:	movt	r0, #2
   11608:	ldr	r6, [r0]
   1160c:	bl	10f70 <__errno_location@plt>
   11610:	ldr	r5, [r0]
   11614:	cmp	r6, #0
   11618:	bne	11634 <__assert_fail@plt+0x5f8>
   1161c:	movw	r2, #20303	; 0x4f4f
   11620:	mov	r0, #0
   11624:	mov	r1, r5
   11628:	mov	r3, r4
   1162c:	movt	r2, #1
   11630:	b	11654 <__assert_fail@plt+0x618>
   11634:	mov	r0, r6
   11638:	bl	12ff8 <__assert_fail@plt+0x1fbc>
   1163c:	movw	r2, #20299	; 0x4f4b
   11640:	mov	r3, r0
   11644:	str	r4, [sp]
   11648:	mov	r0, #0
   1164c:	mov	r1, r5
   11650:	movt	r2, #1
   11654:	bl	10ee0 <error@plt>
   11658:	movw	r0, #24812	; 0x60ec
   1165c:	movt	r0, #2
   11660:	ldr	r0, [r0]
   11664:	bl	10e2c <_exit@plt>
   11668:	push	{r4, r5, fp, lr}
   1166c:	add	fp, sp, #8
   11670:	mvn	r4, #0
   11674:	cmp	r0, #2
   11678:	bne	116c8 <__assert_fail@plt+0x68c>
   1167c:	movw	r0, #20306	; 0x4f52
   11680:	movt	r0, #1
   11684:	bl	10eec <getenv@plt>
   11688:	bl	11744 <__assert_fail@plt+0x708>
   1168c:	mov	r5, r0
   11690:	movw	r0, #20322	; 0x4f62
   11694:	movt	r0, #1
   11698:	bl	10eec <getenv@plt>
   1169c:	bl	11744 <__assert_fail@plt+0x708>
   116a0:	mov	r1, r0
   116a4:	cmp	r0, #0
   116a8:	mvneq	r1, #0
   116ac:	cmp	r5, r1
   116b0:	mov	r4, r1
   116b4:	movcc	r4, r5
   116b8:	cmp	r5, #0
   116bc:	bne	1173c <__assert_fail@plt+0x700>
   116c0:	mov	r0, #1
   116c4:	mov	r4, r1
   116c8:	cmp	r0, #1
   116cc:	bne	116f8 <__assert_fail@plt+0x6bc>
   116d0:	bl	117ec <__assert_fail@plt+0x7b0>
   116d4:	mov	r5, r0
   116d8:	cmp	r0, #0
   116dc:	bne	11734 <__assert_fail@plt+0x6f8>
   116e0:	mov	r0, #84	; 0x54
   116e4:	bl	10e74 <sysconf@plt>
   116e8:	mov	r5, r0
   116ec:	cmp	r0, #0
   116f0:	movle	r5, #1
   116f4:	b	11734 <__assert_fail@plt+0x6f8>
   116f8:	mov	r0, #83	; 0x53
   116fc:	bl	10e74 <sysconf@plt>
   11700:	mov	r5, r0
   11704:	sub	r0, r0, #1
   11708:	cmp	r0, #1
   1170c:	bhi	11720 <__assert_fail@plt+0x6e4>
   11710:	bl	117ec <__assert_fail@plt+0x7b0>
   11714:	cmp	r0, r5
   11718:	bhi	11724 <__assert_fail@plt+0x6e8>
   1171c:	b	11734 <__assert_fail@plt+0x6f8>
   11720:	mov	r0, r5
   11724:	cmp	r0, #0
   11728:	mov	r5, r0
   1172c:	bgt	11734 <__assert_fail@plt+0x6f8>
   11730:	mov	r5, #1
   11734:	cmp	r5, r4
   11738:	movcc	r4, r5
   1173c:	mov	r0, r4
   11740:	pop	{r4, r5, fp, pc}
   11744:	push	{fp, lr}
   11748:	mov	fp, sp
   1174c:	sub	sp, sp, #8
   11750:	mov	r2, r0
   11754:	mov	r0, #0
   11758:	cmp	r2, #0
   1175c:	beq	117e4 <__assert_fail@plt+0x7a8>
   11760:	ldrb	r1, [r2]
   11764:	sub	r3, r1, #9
   11768:	cmp	r3, #5
   1176c:	bcs	11778 <__assert_fail@plt+0x73c>
   11770:	add	r2, r2, #1
   11774:	b	11760 <__assert_fail@plt+0x724>
   11778:	cmp	r1, #32
   1177c:	beq	11770 <__assert_fail@plt+0x734>
   11780:	sub	r1, r1, #48	; 0x30
   11784:	cmp	r1, #9
   11788:	bhi	117e4 <__assert_fail@plt+0x7a8>
   1178c:	mov	r0, #0
   11790:	add	r1, sp, #4
   11794:	str	r0, [sp, #4]
   11798:	mov	r0, r2
   1179c:	mov	r2, #10
   117a0:	bl	10f4c <strtoul@plt>
   117a4:	ldr	r1, [sp, #4]
   117a8:	cmp	r1, #0
   117ac:	beq	117e0 <__assert_fail@plt+0x7a4>
   117b0:	ldrb	r2, [r1]
   117b4:	sub	r3, r2, #9
   117b8:	cmp	r3, #5
   117bc:	bcs	117c8 <__assert_fail@plt+0x78c>
   117c0:	add	r1, r1, #1
   117c4:	b	117b0 <__assert_fail@plt+0x774>
   117c8:	cmp	r2, #32
   117cc:	beq	117c0 <__assert_fail@plt+0x784>
   117d0:	cmp	r2, #0
   117d4:	cmpne	r2, #44	; 0x2c
   117d8:	beq	117e4 <__assert_fail@plt+0x7a8>
   117dc:	str	r1, [sp, #4]
   117e0:	mov	r0, #0
   117e4:	mov	sp, fp
   117e8:	pop	{fp, pc}
   117ec:	push	{r4, sl, fp, lr}
   117f0:	add	fp, sp, #8
   117f4:	sub	sp, sp, #128	; 0x80
   117f8:	mov	r2, sp
   117fc:	mov	r0, #0
   11800:	mov	r1, #128	; 0x80
   11804:	mov	r4, #0
   11808:	bl	11000 <sched_getaffinity@plt>
   1180c:	cmp	r0, #0
   11810:	bne	11828 <__assert_fail@plt+0x7ec>
   11814:	mov	r1, sp
   11818:	mov	r0, #128	; 0x80
   1181c:	bl	10e50 <__sched_cpucount@plt>
   11820:	cmp	r0, #0
   11824:	movne	r4, r0
   11828:	mov	r0, r4
   1182c:	sub	sp, fp, #8
   11830:	pop	{r4, sl, fp, pc}
   11834:	push	{r4, r5, fp, lr}
   11838:	add	fp, sp, #8
   1183c:	cmp	r0, #0
   11840:	beq	118d4 <__assert_fail@plt+0x898>
   11844:	mov	r1, #47	; 0x2f
   11848:	mov	r4, r0
   1184c:	bl	10fe8 <strrchr@plt>
   11850:	cmp	r0, #0
   11854:	mov	r5, r4
   11858:	addne	r5, r0, #1
   1185c:	sub	r0, r5, r4
   11860:	cmp	r0, #7
   11864:	blt	118b8 <__assert_fail@plt+0x87c>
   11868:	movw	r1, #20395	; 0x4fab
   1186c:	sub	r0, r5, #7
   11870:	mov	r2, #7
   11874:	movt	r1, #1
   11878:	bl	11024 <strncmp@plt>
   1187c:	cmp	r0, #0
   11880:	bne	118b8 <__assert_fail@plt+0x87c>
   11884:	movw	r1, #20403	; 0x4fb3
   11888:	mov	r0, r5
   1188c:	mov	r2, #3
   11890:	movt	r1, #1
   11894:	bl	11024 <strncmp@plt>
   11898:	cmp	r0, #0
   1189c:	beq	118a8 <__assert_fail@plt+0x86c>
   118a0:	mov	r4, r5
   118a4:	b	118b8 <__assert_fail@plt+0x87c>
   118a8:	movw	r0, #24880	; 0x6130
   118ac:	add	r4, r5, #3
   118b0:	movt	r0, #2
   118b4:	str	r4, [r0]
   118b8:	movw	r0, #24884	; 0x6134
   118bc:	movt	r0, #2
   118c0:	str	r4, [r0]
   118c4:	movw	r0, #24920	; 0x6158
   118c8:	movt	r0, #2
   118cc:	str	r4, [r0]
   118d0:	pop	{r4, r5, fp, pc}
   118d4:	movw	r0, #24896	; 0x6140
   118d8:	movt	r0, #2
   118dc:	ldr	r1, [r0]
   118e0:	movw	r0, #20339	; 0x4f73
   118e4:	movt	r0, #1
   118e8:	bl	11018 <fputs@plt>
   118ec:	bl	11030 <abort@plt>
   118f0:	push	{r4, r5, r6, sl, fp, lr}
   118f4:	add	fp, sp, #16
   118f8:	mov	r4, r0
   118fc:	movw	r0, #24928	; 0x6160
   11900:	movt	r0, #2
   11904:	cmp	r4, #0
   11908:	moveq	r4, r0
   1190c:	bl	10f70 <__errno_location@plt>
   11910:	ldr	r6, [r0]
   11914:	mov	r5, r0
   11918:	mov	r0, r4
   1191c:	mov	r1, #48	; 0x30
   11920:	bl	13b7c <__assert_fail@plt+0x2b40>
   11924:	str	r6, [r5]
   11928:	pop	{r4, r5, r6, sl, fp, pc}
   1192c:	movw	r1, #24928	; 0x6160
   11930:	cmp	r0, #0
   11934:	movt	r1, #2
   11938:	movne	r1, r0
   1193c:	ldr	r0, [r1]
   11940:	bx	lr
   11944:	movw	r2, #24928	; 0x6160
   11948:	cmp	r0, #0
   1194c:	movt	r2, #2
   11950:	movne	r2, r0
   11954:	str	r1, [r2]
   11958:	bx	lr
   1195c:	movw	r3, #24928	; 0x6160
   11960:	cmp	r0, #0
   11964:	movt	r3, #2
   11968:	movne	r3, r0
   1196c:	ubfx	r0, r1, #5, #3
   11970:	and	r1, r1, #31
   11974:	add	r0, r3, r0, lsl #2
   11978:	ldr	r3, [r0, #8]
   1197c:	eor	r2, r2, r3, lsr r1
   11980:	and	r2, r2, #1
   11984:	eor	r2, r3, r2, lsl r1
   11988:	str	r2, [r0, #8]
   1198c:	mov	r0, #1
   11990:	and	r0, r0, r3, lsr r1
   11994:	bx	lr
   11998:	movw	r2, #24928	; 0x6160
   1199c:	cmp	r0, #0
   119a0:	movt	r2, #2
   119a4:	movne	r2, r0
   119a8:	ldr	r0, [r2, #4]
   119ac:	str	r1, [r2, #4]
   119b0:	bx	lr
   119b4:	movw	r3, #24928	; 0x6160
   119b8:	cmp	r0, #0
   119bc:	movt	r3, #2
   119c0:	movne	r3, r0
   119c4:	cmp	r1, #0
   119c8:	mov	r0, #10
   119cc:	cmpne	r2, #0
   119d0:	str	r0, [r3]
   119d4:	bne	119e4 <__assert_fail@plt+0x9a8>
   119d8:	push	{fp, lr}
   119dc:	mov	fp, sp
   119e0:	bl	11030 <abort@plt>
   119e4:	str	r1, [r3, #40]	; 0x28
   119e8:	str	r2, [r3, #44]	; 0x2c
   119ec:	bx	lr
   119f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119f4:	add	fp, sp, #28
   119f8:	sub	sp, sp, #20
   119fc:	mov	r7, r0
   11a00:	ldr	r0, [fp, #8]
   11a04:	movw	r5, #24928	; 0x6160
   11a08:	mov	r8, r3
   11a0c:	mov	r9, r2
   11a10:	mov	sl, r1
   11a14:	movt	r5, #2
   11a18:	cmp	r0, #0
   11a1c:	movne	r5, r0
   11a20:	bl	10f70 <__errno_location@plt>
   11a24:	mov	r4, r0
   11a28:	ldm	r5, {r0, r1}
   11a2c:	ldr	r2, [r5, #40]	; 0x28
   11a30:	ldr	r3, [r5, #44]	; 0x2c
   11a34:	add	r5, r5, #8
   11a38:	ldr	r6, [r4]
   11a3c:	stm	sp, {r0, r1, r5}
   11a40:	str	r2, [sp, #12]
   11a44:	str	r3, [sp, #16]
   11a48:	mov	r0, r7
   11a4c:	mov	r1, sl
   11a50:	mov	r2, r9
   11a54:	mov	r3, r8
   11a58:	bl	11a68 <__assert_fail@plt+0xa2c>
   11a5c:	str	r6, [r4]
   11a60:	sub	sp, fp, #28
   11a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a6c:	add	fp, sp, #28
   11a70:	sub	sp, sp, #156	; 0x9c
   11a74:	str	r0, [fp, #-56]	; 0xffffffc8
   11a78:	ldr	r0, [fp, #12]
   11a7c:	mov	r4, r1
   11a80:	str	r3, [sp, #80]	; 0x50
   11a84:	str	r2, [fp, #-84]	; 0xffffffac
   11a88:	and	r1, r0, #4
   11a8c:	str	r1, [sp, #24]
   11a90:	and	r1, r0, #1
   11a94:	str	r1, [sp, #28]
   11a98:	ubfx	r7, r0, #1, #1
   11a9c:	bl	10eb0 <__ctype_get_mb_cur_max@plt>
   11aa0:	str	r0, [sp, #32]
   11aa4:	ldr	r0, [fp, #24]
   11aa8:	ldr	r9, [fp, #8]
   11aac:	mov	r2, #0
   11ab0:	mov	r1, #0
   11ab4:	mov	r5, #0
   11ab8:	str	r2, [sp, #52]	; 0x34
   11abc:	mov	r2, #1
   11ac0:	str	r0, [sp, #72]	; 0x48
   11ac4:	ldr	r0, [fp, #20]
   11ac8:	str	r0, [sp, #64]	; 0x40
   11acc:	mov	r0, #0
   11ad0:	str	r0, [sp, #92]	; 0x5c
   11ad4:	mov	r0, #0
   11ad8:	str	r0, [fp, #-76]	; 0xffffffb4
   11adc:	mov	r0, #0
   11ae0:	cmp	r9, #10
   11ae4:	str	r1, [sp, #68]	; 0x44
   11ae8:	bhi	12ae8 <__assert_fail@plt+0x1aac>
   11aec:	add	r1, pc, #28
   11af0:	ldr	ip, [fp, #-84]	; 0xffffffac
   11af4:	ldr	lr, [sp, #80]	; 0x50
   11af8:	mov	r6, r4
   11afc:	mov	r8, #0
   11b00:	mov	r3, #1
   11b04:	mov	sl, #0
   11b08:	mov	r4, r2
   11b0c:	ldr	pc, [r1, r9, lsl #2]
   11b10:	andeq	r1, r1, r0, ror #23
   11b14:	andeq	r1, r1, ip, lsl ip
   11b18:	strdeq	r1, [r1], -r0
   11b1c:	ldrdeq	r1, [r1], -r8
   11b20:	andeq	r1, r1, r0, lsl ip
   11b24:	andeq	r1, r1, r8, ror #24
   11b28:	andeq	r1, r1, r0, lsl #24
   11b2c:	andeq	r1, r1, r8, asr #25
   11b30:	andeq	r1, r1, ip, lsr fp
   11b34:	andeq	r1, r1, ip, lsr fp
   11b38:	andeq	r1, r1, r4, ror #22
   11b3c:	movw	r0, #20485	; 0x5005
   11b40:	mov	r1, r9
   11b44:	movt	r0, #1
   11b48:	bl	13250 <__assert_fail@plt+0x2214>
   11b4c:	str	r0, [sp, #64]	; 0x40
   11b50:	movw	r0, #20487	; 0x5007
   11b54:	mov	r1, r9
   11b58:	movt	r0, #1
   11b5c:	bl	13250 <__assert_fail@plt+0x2214>
   11b60:	str	r0, [sp, #72]	; 0x48
   11b64:	mov	r8, #0
   11b68:	mov	sl, r7
   11b6c:	tst	r7, #1
   11b70:	str	r5, [fp, #-48]	; 0xffffffd0
   11b74:	bne	11bb0 <__assert_fail@plt+0xb74>
   11b78:	ldr	r0, [sp, #64]	; 0x40
   11b7c:	ldrb	r0, [r0]
   11b80:	cmp	r0, #0
   11b84:	beq	11bb0 <__assert_fail@plt+0xb74>
   11b88:	ldr	r1, [sp, #64]	; 0x40
   11b8c:	mov	r8, #0
   11b90:	add	r1, r1, #1
   11b94:	cmp	r8, r6
   11b98:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   11b9c:	strbcc	r0, [r2, r8]
   11ba0:	ldrb	r0, [r1, r8]
   11ba4:	add	r8, r8, #1
   11ba8:	cmp	r0, #0
   11bac:	bne	11b94 <__assert_fail@plt+0xb58>
   11bb0:	ldr	r7, [sp, #72]	; 0x48
   11bb4:	mov	r0, r7
   11bb8:	bl	10f58 <strlen@plt>
   11bbc:	ldr	ip, [fp, #-84]	; 0xffffffac
   11bc0:	ldr	lr, [sp, #80]	; 0x50
   11bc4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   11bc8:	str	r0, [fp, #-76]	; 0xffffffb4
   11bcc:	str	r7, [sp, #92]	; 0x5c
   11bd0:	mov	r3, #1
   11bd4:	b	11cc8 <__assert_fail@plt+0xc8c>
   11bd8:	mov	r0, #1
   11bdc:	b	11c1c <__assert_fail@plt+0xbe0>
   11be0:	mov	r9, #0
   11be4:	mov	r8, #0
   11be8:	mov	r3, r0
   11bec:	b	11cc4 <__assert_fail@plt+0xc88>
   11bf0:	tst	r7, #1
   11bf4:	bne	11c1c <__assert_fail@plt+0xbe0>
   11bf8:	mov	r3, r0
   11bfc:	b	11c44 <__assert_fail@plt+0xc08>
   11c00:	mov	r0, #1
   11c04:	mov	r8, #0
   11c08:	mov	r9, #5
   11c0c:	b	11c7c <__assert_fail@plt+0xc40>
   11c10:	mov	r3, #1
   11c14:	tst	r7, #1
   11c18:	beq	11c44 <__assert_fail@plt+0xc08>
   11c1c:	mov	r1, #1
   11c20:	mov	r8, #0
   11c24:	mov	r9, #2
   11c28:	mov	r3, r0
   11c2c:	mov	sl, #1
   11c30:	str	r1, [fp, #-76]	; 0xffffffb4
   11c34:	movw	r1, #20487	; 0x5007
   11c38:	movt	r1, #1
   11c3c:	str	r1, [sp, #92]	; 0x5c
   11c40:	b	11cc8 <__assert_fail@plt+0xc8c>
   11c44:	cmp	r6, #0
   11c48:	mov	r8, #1
   11c4c:	mov	r9, #2
   11c50:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   11c54:	movne	r0, #39	; 0x27
   11c58:	strbne	r0, [r1]
   11c5c:	movw	r0, #20487	; 0x5007
   11c60:	movt	r0, #1
   11c64:	b	11cb8 <__assert_fail@plt+0xc7c>
   11c68:	mov	r9, #5
   11c6c:	tst	r7, #1
   11c70:	beq	11c98 <__assert_fail@plt+0xc5c>
   11c74:	mov	r0, #1
   11c78:	mov	r8, #0
   11c7c:	str	r0, [fp, #-76]	; 0xffffffb4
   11c80:	movw	r0, #20483	; 0x5003
   11c84:	mov	r3, #1
   11c88:	mov	sl, #1
   11c8c:	movt	r0, #1
   11c90:	str	r0, [sp, #92]	; 0x5c
   11c94:	b	11cc8 <__assert_fail@plt+0xc8c>
   11c98:	cmp	r6, #0
   11c9c:	mov	r8, #1
   11ca0:	mov	r3, #1
   11ca4:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   11ca8:	movne	r0, #34	; 0x22
   11cac:	strbne	r0, [r1]
   11cb0:	movw	r0, #20483	; 0x5003
   11cb4:	movt	r0, #1
   11cb8:	str	r0, [sp, #92]	; 0x5c
   11cbc:	mov	r0, #1
   11cc0:	str	r0, [fp, #-76]	; 0xffffffb4
   11cc4:	mov	sl, #0
   11cc8:	ldr	r0, [fp, #16]
   11ccc:	mov	r7, #0
   11cd0:	str	r9, [fp, #-64]	; 0xffffffc0
   11cd4:	str	sl, [fp, #-72]	; 0xffffffb8
   11cd8:	str	r3, [sp, #84]	; 0x54
   11cdc:	cmp	r0, #0
   11ce0:	movwne	r0, #1
   11ce4:	and	r0, r0, sl
   11ce8:	str	r0, [fp, #-88]	; 0xffffffa8
   11cec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11cf0:	cmp	r0, #0
   11cf4:	movwne	r0, #1
   11cf8:	subs	r2, r9, #2
   11cfc:	and	r1, r0, sl
   11d00:	str	r2, [fp, #-80]	; 0xffffffb0
   11d04:	and	r1, r3, r1
   11d08:	str	r1, [sp, #44]	; 0x2c
   11d0c:	clz	r1, r2
   11d10:	lsr	r1, r1, #5
   11d14:	and	r1, r1, sl
   11d18:	str	r1, [sp, #56]	; 0x38
   11d1c:	mov	r1, r2
   11d20:	eor	r2, sl, #1
   11d24:	movwne	r1, #1
   11d28:	str	r2, [sp, #88]	; 0x58
   11d2c:	orr	r2, r1, r2
   11d30:	and	r1, r1, r3
   11d34:	and	r0, r0, r1
   11d38:	str	r2, [sp, #60]	; 0x3c
   11d3c:	str	r1, [fp, #-68]	; 0xffffffbc
   11d40:	str	r0, [fp, #-60]	; 0xffffffc4
   11d44:	eor	r0, r3, #1
   11d48:	str	r0, [sp, #48]	; 0x30
   11d4c:	cmn	lr, #1
   11d50:	beq	11d60 <__assert_fail@plt+0xd24>
   11d54:	cmp	r7, lr
   11d58:	bne	11d6c <__assert_fail@plt+0xd30>
   11d5c:	b	12918 <__assert_fail@plt+0x18dc>
   11d60:	ldrb	r0, [ip, r7]
   11d64:	cmp	r0, #0
   11d68:	beq	12920 <__assert_fail@plt+0x18e4>
   11d6c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11d70:	mov	r9, #0
   11d74:	str	r5, [fp, #-48]	; 0xffffffd0
   11d78:	str	r6, [fp, #-52]	; 0xffffffcc
   11d7c:	cmp	r0, #0
   11d80:	beq	11dc0 <__assert_fail@plt+0xd84>
   11d84:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11d88:	mov	r5, r4
   11d8c:	add	r4, r7, r0
   11d90:	cmp	r0, #2
   11d94:	bcc	11db0 <__assert_fail@plt+0xd74>
   11d98:	cmn	lr, #1
   11d9c:	bne	11db0 <__assert_fail@plt+0xd74>
   11da0:	mov	r0, ip
   11da4:	bl	10f58 <strlen@plt>
   11da8:	ldr	ip, [fp, #-84]	; 0xffffffac
   11dac:	mov	lr, r0
   11db0:	cmp	r4, lr
   11db4:	bls	11dc8 <__assert_fail@plt+0xd8c>
   11db8:	mov	r6, #0
   11dbc:	b	11e08 <__assert_fail@plt+0xdcc>
   11dc0:	mov	r6, #0
   11dc4:	b	11e0c <__assert_fail@plt+0xdd0>
   11dc8:	ldr	r1, [sp, #92]	; 0x5c
   11dcc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   11dd0:	add	r0, ip, r7
   11dd4:	mov	r4, lr
   11dd8:	bl	10e5c <memcmp@plt>
   11ddc:	ldr	r2, [sp, #88]	; 0x58
   11de0:	cmp	r0, #0
   11de4:	mov	r1, r0
   11de8:	movwne	r1, #1
   11dec:	orr	r1, r1, r2
   11df0:	tst	r1, #1
   11df4:	beq	129b4 <__assert_fail@plt+0x1978>
   11df8:	ldr	ip, [fp, #-84]	; 0xffffffac
   11dfc:	clz	r0, r0
   11e00:	mov	lr, r4
   11e04:	lsr	r6, r0, #5
   11e08:	mov	r4, r5
   11e0c:	ldrb	r5, [ip, r7]
   11e10:	cmp	r5, #126	; 0x7e
   11e14:	bhi	121dc <__assert_fail@plt+0x11a0>
   11e18:	add	r3, pc, #16
   11e1c:	mov	sl, #1
   11e20:	mov	r2, #110	; 0x6e
   11e24:	mov	r0, #97	; 0x61
   11e28:	mov	r1, #0
   11e2c:	ldr	pc, [r3, r5, lsl #2]
   11e30:	andeq	r2, r1, r0, asr #1
   11e34:	ldrdeq	r2, [r1], -ip
   11e38:	ldrdeq	r2, [r1], -ip
   11e3c:	ldrdeq	r2, [r1], -ip
   11e40:	ldrdeq	r2, [r1], -ip
   11e44:	ldrdeq	r2, [r1], -ip
   11e48:	ldrdeq	r2, [r1], -ip
   11e4c:	andeq	r2, r1, r0, lsl #5
   11e50:	andeq	r2, r1, r0, lsr #1
   11e54:	muleq	r1, r8, r0
   11e58:	andeq	r2, r1, ip, lsr #1
   11e5c:	andeq	r2, r1, r0, lsr r1
   11e60:	muleq	r1, r0, r0
   11e64:	andeq	r2, r1, r8, lsr #1
   11e68:	ldrdeq	r2, [r1], -ip
   11e6c:	ldrdeq	r2, [r1], -ip
   11e70:	ldrdeq	r2, [r1], -ip
   11e74:	ldrdeq	r2, [r1], -ip
   11e78:	ldrdeq	r2, [r1], -ip
   11e7c:	ldrdeq	r2, [r1], -ip
   11e80:	ldrdeq	r2, [r1], -ip
   11e84:	ldrdeq	r2, [r1], -ip
   11e88:	ldrdeq	r2, [r1], -ip
   11e8c:	ldrdeq	r2, [r1], -ip
   11e90:	ldrdeq	r2, [r1], -ip
   11e94:	ldrdeq	r2, [r1], -ip
   11e98:	ldrdeq	r2, [r1], -ip
   11e9c:	ldrdeq	r2, [r1], -ip
   11ea0:	ldrdeq	r2, [r1], -ip
   11ea4:	ldrdeq	r2, [r1], -ip
   11ea8:	ldrdeq	r2, [r1], -ip
   11eac:	ldrdeq	r2, [r1], -ip
   11eb0:	andeq	r2, r1, r0, asr #4
   11eb4:	andeq	r2, r1, r4, asr #4
   11eb8:	andeq	r2, r1, r4, asr #4
   11ebc:	andeq	r2, r1, r0, asr #32
   11ec0:	andeq	r2, r1, r4, asr #4
   11ec4:	andeq	r2, r1, ip, lsr #32
   11ec8:	andeq	r2, r1, r4, asr #4
   11ecc:	andeq	r2, r1, r8, lsr r1
   11ed0:	andeq	r2, r1, r4, asr #4
   11ed4:	andeq	r2, r1, r4, asr #4
   11ed8:	andeq	r2, r1, r4, asr #4
   11edc:	andeq	r2, r1, ip, lsr #32
   11ee0:	andeq	r2, r1, ip, lsr #32
   11ee4:	andeq	r2, r1, ip, lsr #32
   11ee8:	andeq	r2, r1, ip, lsr #32
   11eec:	andeq	r2, r1, ip, lsr #32
   11ef0:	andeq	r2, r1, ip, lsr #32
   11ef4:	andeq	r2, r1, ip, lsr #32
   11ef8:	andeq	r2, r1, ip, lsr #32
   11efc:	andeq	r2, r1, ip, lsr #32
   11f00:	andeq	r2, r1, ip, lsr #32
   11f04:	andeq	r2, r1, ip, lsr #32
   11f08:	andeq	r2, r1, ip, lsr #32
   11f0c:	andeq	r2, r1, ip, lsr #32
   11f10:	andeq	r2, r1, ip, lsr #32
   11f14:	andeq	r2, r1, ip, lsr #32
   11f18:	andeq	r2, r1, ip, lsr #32
   11f1c:	andeq	r2, r1, r4, asr #4
   11f20:	andeq	r2, r1, r4, asr #4
   11f24:	andeq	r2, r1, r4, asr #4
   11f28:	andeq	r2, r1, r4, asr #4
   11f2c:	andeq	r2, r1, r4, lsl #2
   11f30:	ldrdeq	r2, [r1], -ip
   11f34:	andeq	r2, r1, ip, lsr #32
   11f38:	andeq	r2, r1, ip, lsr #32
   11f3c:	andeq	r2, r1, ip, lsr #32
   11f40:	andeq	r2, r1, ip, lsr #32
   11f44:	andeq	r2, r1, ip, lsr #32
   11f48:	andeq	r2, r1, ip, lsr #32
   11f4c:	andeq	r2, r1, ip, lsr #32
   11f50:	andeq	r2, r1, ip, lsr #32
   11f54:	andeq	r2, r1, ip, lsr #32
   11f58:	andeq	r2, r1, ip, lsr #32
   11f5c:	andeq	r2, r1, ip, lsr #32
   11f60:	andeq	r2, r1, ip, lsr #32
   11f64:	andeq	r2, r1, ip, lsr #32
   11f68:	andeq	r2, r1, ip, lsr #32
   11f6c:	andeq	r2, r1, ip, lsr #32
   11f70:	andeq	r2, r1, ip, lsr #32
   11f74:	andeq	r2, r1, ip, lsr #32
   11f78:	andeq	r2, r1, ip, lsr #32
   11f7c:	andeq	r2, r1, ip, lsr #32
   11f80:	andeq	r2, r1, ip, lsr #32
   11f84:	andeq	r2, r1, ip, lsr #32
   11f88:	andeq	r2, r1, ip, lsr #32
   11f8c:	andeq	r2, r1, ip, lsr #32
   11f90:	andeq	r2, r1, ip, lsr #32
   11f94:	andeq	r2, r1, ip, lsr #32
   11f98:	andeq	r2, r1, ip, lsr #32
   11f9c:	andeq	r2, r1, r4, asr #4
   11fa0:	andeq	r2, r1, ip, rrx
   11fa4:	andeq	r2, r1, ip, lsr #32
   11fa8:	andeq	r2, r1, r4, asr #4
   11fac:	andeq	r2, r1, ip, lsr #32
   11fb0:	andeq	r2, r1, r4, asr #4
   11fb4:	andeq	r2, r1, ip, lsr #32
   11fb8:	andeq	r2, r1, ip, lsr #32
   11fbc:	andeq	r2, r1, ip, lsr #32
   11fc0:	andeq	r2, r1, ip, lsr #32
   11fc4:	andeq	r2, r1, ip, lsr #32
   11fc8:	andeq	r2, r1, ip, lsr #32
   11fcc:	andeq	r2, r1, ip, lsr #32
   11fd0:	andeq	r2, r1, ip, lsr #32
   11fd4:	andeq	r2, r1, ip, lsr #32
   11fd8:	andeq	r2, r1, ip, lsr #32
   11fdc:	andeq	r2, r1, ip, lsr #32
   11fe0:	andeq	r2, r1, ip, lsr #32
   11fe4:	andeq	r2, r1, ip, lsr #32
   11fe8:	andeq	r2, r1, ip, lsr #32
   11fec:	andeq	r2, r1, ip, lsr #32
   11ff0:	andeq	r2, r1, ip, lsr #32
   11ff4:	andeq	r2, r1, ip, lsr #32
   11ff8:	andeq	r2, r1, ip, lsr #32
   11ffc:	andeq	r2, r1, ip, lsr #32
   12000:	andeq	r2, r1, ip, lsr #32
   12004:	andeq	r2, r1, ip, lsr #32
   12008:	andeq	r2, r1, ip, lsr #32
   1200c:	andeq	r2, r1, ip, lsr #32
   12010:	andeq	r2, r1, ip, lsr #32
   12014:	andeq	r2, r1, ip, lsr #32
   12018:	andeq	r2, r1, ip, lsr #32
   1201c:	andeq	r2, r1, r0, asr r0
   12020:	andeq	r2, r1, r4, asr #4
   12024:	andeq	r2, r1, r0, asr r0
   12028:	andeq	r2, r1, r0, asr #32
   1202c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12030:	cmp	r0, #0
   12034:	beq	12294 <__assert_fail@plt+0x1258>
   12038:	ldr	r0, [fp, #16]
   1203c:	b	12298 <__assert_fail@plt+0x125c>
   12040:	mov	sl, #0
   12044:	cmp	r7, #0
   12048:	bne	124b0 <__assert_fail@plt+0x1474>
   1204c:	b	12240 <__assert_fail@plt+0x1204>
   12050:	mov	sl, #0
   12054:	cmn	lr, #1
   12058:	beq	1222c <__assert_fail@plt+0x11f0>
   1205c:	cmp	r7, #0
   12060:	cmpeq	lr, #1
   12064:	bne	124b0 <__assert_fail@plt+0x1474>
   12068:	b	12240 <__assert_fail@plt+0x1204>
   1206c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12070:	cmp	r0, #2
   12074:	bne	12264 <__assert_fail@plt+0x1228>
   12078:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1207c:	tst	r0, #1
   12080:	bne	129d0 <__assert_fail@plt+0x1994>
   12084:	mov	r9, #0
   12088:	mov	r0, #92	; 0x5c
   1208c:	b	12278 <__assert_fail@plt+0x123c>
   12090:	mov	r0, #102	; 0x66
   12094:	b	12280 <__assert_fail@plt+0x1244>
   12098:	mov	r2, #116	; 0x74
   1209c:	b	120ac <__assert_fail@plt+0x1070>
   120a0:	mov	r0, #98	; 0x62
   120a4:	b	12280 <__assert_fail@plt+0x1244>
   120a8:	mov	r2, #114	; 0x72
   120ac:	ldr	r0, [sp, #60]	; 0x3c
   120b0:	tst	r0, #1
   120b4:	mov	r0, r2
   120b8:	bne	12280 <__assert_fail@plt+0x1244>
   120bc:	b	129d0 <__assert_fail@plt+0x1994>
   120c0:	ldr	r0, [sp, #84]	; 0x54
   120c4:	tst	r0, #1
   120c8:	beq	1236c <__assert_fail@plt+0x1330>
   120cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   120d0:	tst	r0, #1
   120d4:	bne	12ad8 <__assert_fail@plt+0x1a9c>
   120d8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   120dc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   120e0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   120e4:	cmp	r0, #2
   120e8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   120ec:	movwne	r0, #1
   120f0:	orr	r0, r0, r3
   120f4:	tst	r0, #1
   120f8:	beq	127ec <__assert_fail@plt+0x17b0>
   120fc:	mov	r0, r8
   12100:	b	1282c <__assert_fail@plt+0x17f0>
   12104:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12108:	mov	r9, #0
   1210c:	mov	r5, #63	; 0x3f
   12110:	cmp	r0, #5
   12114:	beq	124b8 <__assert_fail@plt+0x147c>
   12118:	cmp	r0, #2
   1211c:	bne	12578 <__assert_fail@plt+0x153c>
   12120:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12124:	tst	r0, #1
   12128:	beq	1257c <__assert_fail@plt+0x1540>
   1212c:	b	129d0 <__assert_fail@plt+0x1994>
   12130:	mov	r0, #118	; 0x76
   12134:	b	12280 <__assert_fail@plt+0x1244>
   12138:	mov	r0, #1
   1213c:	mov	r5, #39	; 0x27
   12140:	str	r0, [sp, #52]	; 0x34
   12144:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12148:	cmp	r0, #2
   1214c:	bne	121d4 <__assert_fail@plt+0x1198>
   12150:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12154:	tst	r0, #1
   12158:	bne	129d0 <__assert_fail@plt+0x1994>
   1215c:	ldr	r3, [sp, #68]	; 0x44
   12160:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12164:	mov	r9, #0
   12168:	clz	r1, r2
   1216c:	cmp	r3, #0
   12170:	mov	r0, r3
   12174:	movwne	r0, #1
   12178:	lsr	r1, r1, #5
   1217c:	orrs	r0, r0, r1
   12180:	moveq	r3, r2
   12184:	moveq	r2, r0
   12188:	cmp	r8, r2
   1218c:	str	r3, [sp, #68]	; 0x44
   12190:	str	r2, [fp, #-52]	; 0xffffffcc
   12194:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   12198:	movcc	r0, #39	; 0x27
   1219c:	strbcc	r0, [r1, r8]
   121a0:	add	r0, r8, #1
   121a4:	cmp	r0, r2
   121a8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   121ac:	movcc	r1, #92	; 0x5c
   121b0:	strbcc	r1, [r3, r0]
   121b4:	add	r0, r8, #2
   121b8:	add	r8, r8, #3
   121bc:	cmp	r0, r2
   121c0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   121c4:	movcc	r1, #39	; 0x27
   121c8:	strbcc	r1, [r2, r0]
   121cc:	mov	r0, #0
   121d0:	str	r0, [fp, #-48]	; 0xffffffd0
   121d4:	mov	sl, #1
   121d8:	b	1202c <__assert_fail@plt+0xff0>
   121dc:	ldr	r0, [sp, #32]
   121e0:	cmp	r0, #1
   121e4:	bne	12390 <__assert_fail@plt+0x1354>
   121e8:	str	lr, [sp, #80]	; 0x50
   121ec:	bl	10f34 <__ctype_b_loc@plt>
   121f0:	ldr	r0, [r0]
   121f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   121f8:	mov	r1, #1
   121fc:	add	r0, r0, r5, lsl #1
   12200:	ldrb	r0, [r0, #1]
   12204:	ubfx	sl, r0, #6, #1
   12208:	ldr	r0, [sp, #48]	; 0x30
   1220c:	mov	r2, r1
   12210:	cmp	r1, #1
   12214:	orr	r0, sl, r0
   12218:	bhi	12584 <__assert_fail@plt+0x1548>
   1221c:	tst	r0, #1
   12220:	beq	12584 <__assert_fail@plt+0x1548>
   12224:	ldr	lr, [sp, #80]	; 0x50
   12228:	b	1202c <__assert_fail@plt+0xff0>
   1222c:	cmp	r7, #0
   12230:	bne	124ac <__assert_fail@plt+0x1470>
   12234:	ldrb	r0, [ip, #1]
   12238:	cmp	r0, #0
   1223c:	bne	124ac <__assert_fail@plt+0x1470>
   12240:	mov	r1, #1
   12244:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12248:	cmp	r0, #2
   1224c:	bne	1225c <__assert_fail@plt+0x1220>
   12250:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12254:	tst	r0, #1
   12258:	bne	129d0 <__assert_fail@plt+0x1994>
   1225c:	mov	sl, r1
   12260:	b	1202c <__assert_fail@plt+0xff0>
   12264:	ldr	r1, [sp, #44]	; 0x2c
   12268:	mov	r9, #0
   1226c:	mov	r0, #92	; 0x5c
   12270:	cmp	r1, #0
   12274:	beq	12280 <__assert_fail@plt+0x1244>
   12278:	mov	sl, #0
   1227c:	b	12798 <__assert_fail@plt+0x175c>
   12280:	ldr	r1, [sp, #84]	; 0x54
   12284:	mov	sl, #0
   12288:	mov	r9, #0
   1228c:	tst	r1, #1
   12290:	bne	122cc <__assert_fail@plt+0x1290>
   12294:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12298:	cmp	r0, #0
   1229c:	mov	r0, r5
   122a0:	beq	122c4 <__assert_fail@plt+0x1288>
   122a4:	ldr	r1, [fp, #16]
   122a8:	ubfx	r0, r5, #5, #3
   122ac:	mov	r2, #1
   122b0:	ldr	r0, [r1, r0, lsl #2]
   122b4:	and	r1, r5, #31
   122b8:	tst	r0, r2, lsl r1
   122bc:	mov	r0, r5
   122c0:	bne	122cc <__assert_fail@plt+0x1290>
   122c4:	cmp	r6, #0
   122c8:	beq	12798 <__assert_fail@plt+0x175c>
   122cc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   122d0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   122d4:	tst	r1, #1
   122d8:	bne	129ac <__assert_fail@plt+0x1970>
   122dc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   122e0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   122e4:	cmp	r1, #2
   122e8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   122ec:	movwne	r1, #1
   122f0:	orr	r1, r1, r5
   122f4:	tst	r1, #1
   122f8:	bne	1233c <__assert_fail@plt+0x1300>
   122fc:	cmp	r8, r6
   12300:	mov	r5, #1
   12304:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12308:	movcc	r1, #39	; 0x27
   1230c:	strbcc	r1, [r2, r8]
   12310:	add	r1, r8, #1
   12314:	cmp	r1, r6
   12318:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1231c:	movcc	r2, #36	; 0x24
   12320:	strbcc	r2, [r3, r1]
   12324:	add	r1, r8, #2
   12328:	add	r8, r8, #3
   1232c:	cmp	r1, r6
   12330:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12334:	movcc	r2, #39	; 0x27
   12338:	strbcc	r2, [r3, r1]
   1233c:	cmp	r8, r6
   12340:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12344:	movcc	r1, #92	; 0x5c
   12348:	strbcc	r1, [r2, r8]
   1234c:	add	r8, r8, #1
   12350:	cmp	r8, r6
   12354:	and	r4, r4, sl
   12358:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   1235c:	strbcc	r0, [r1, r8]
   12360:	add	r8, r8, #1
   12364:	add	r7, r7, #1
   12368:	b	11d4c <__assert_fail@plt+0xd10>
   1236c:	ldr	r0, [sp, #28]
   12370:	mov	sl, #0
   12374:	mov	r9, #0
   12378:	mov	r5, #0
   1237c:	cmp	r0, #0
   12380:	beq	12294 <__assert_fail@plt+0x1258>
   12384:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12388:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1238c:	b	12364 <__assert_fail@plt+0x1328>
   12390:	mov	r0, #0
   12394:	cmn	lr, #1
   12398:	str	r6, [sp, #76]	; 0x4c
   1239c:	str	r4, [sp, #20]
   123a0:	str	r0, [fp, #-36]	; 0xffffffdc
   123a4:	str	r0, [fp, #-40]	; 0xffffffd8
   123a8:	bne	123bc <__assert_fail@plt+0x1380>
   123ac:	mov	r0, ip
   123b0:	bl	10f58 <strlen@plt>
   123b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   123b8:	mov	lr, r0
   123bc:	add	r0, ip, r7
   123c0:	mov	sl, #1
   123c4:	mov	r6, #0
   123c8:	sub	r4, fp, #40	; 0x28
   123cc:	str	lr, [sp, #80]	; 0x50
   123d0:	str	r0, [sp, #36]	; 0x24
   123d4:	str	r6, [sp, #40]	; 0x28
   123d8:	add	r6, r6, r7
   123dc:	sub	r0, fp, #44	; 0x2c
   123e0:	mov	r3, r4
   123e4:	add	r1, ip, r6
   123e8:	sub	r2, lr, r6
   123ec:	bl	147c8 <__assert_fail@plt+0x378c>
   123f0:	cmp	r0, #0
   123f4:	beq	12900 <__assert_fail@plt+0x18c4>
   123f8:	cmn	r0, #1
   123fc:	beq	128c0 <__assert_fail@plt+0x1884>
   12400:	ldr	lr, [sp, #80]	; 0x50
   12404:	cmn	r0, #2
   12408:	beq	128c8 <__assert_fail@plt+0x188c>
   1240c:	ldr	r2, [sp, #56]	; 0x38
   12410:	cmp	r0, #2
   12414:	mov	r1, #0
   12418:	movwcc	r1, #1
   1241c:	eor	r2, r2, #1
   12420:	orrs	r1, r2, r1
   12424:	bne	12470 <__assert_fail@plt+0x1434>
   12428:	ldr	r1, [sp, #40]	; 0x28
   1242c:	ldr	r2, [sp, #36]	; 0x24
   12430:	add	ip, r2, r1
   12434:	mov	r2, #1
   12438:	ldrb	r3, [ip, r2]
   1243c:	sub	r6, r3, #94	; 0x5e
   12440:	cmp	r6, #30
   12444:	bhi	12458 <__assert_fail@plt+0x141c>
   12448:	mov	r4, #1
   1244c:	mov	r1, #1073741829	; 0x40000005
   12450:	tst	r1, r4, lsl r6
   12454:	bne	129cc <__assert_fail@plt+0x1990>
   12458:	sub	r3, r3, #91	; 0x5b
   1245c:	cmp	r3, #2
   12460:	bcc	129cc <__assert_fail@plt+0x1990>
   12464:	add	r2, r2, #1
   12468:	cmp	r2, r0
   1246c:	bcc	12438 <__assert_fail@plt+0x13fc>
   12470:	ldr	r6, [sp, #40]	; 0x28
   12474:	add	r6, r0, r6
   12478:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1247c:	bl	10e98 <iswprint@plt>
   12480:	cmp	r0, #0
   12484:	sub	r4, fp, #40	; 0x28
   12488:	movwne	r0, #1
   1248c:	and	sl, sl, r0
   12490:	mov	r0, r4
   12494:	bl	10e44 <mbsinit@plt>
   12498:	ldr	lr, [sp, #80]	; 0x50
   1249c:	ldr	ip, [fp, #-84]	; 0xffffffac
   124a0:	cmp	r0, #0
   124a4:	beq	123d4 <__assert_fail@plt+0x1398>
   124a8:	b	12908 <__assert_fail@plt+0x18cc>
   124ac:	mvn	lr, #0
   124b0:	mov	r9, #0
   124b4:	b	1202c <__assert_fail@plt+0xff0>
   124b8:	ldr	r0, [sp, #24]
   124bc:	cmp	r0, #0
   124c0:	beq	12578 <__assert_fail@plt+0x153c>
   124c4:	add	r0, r7, #2
   124c8:	cmp	r0, lr
   124cc:	bcs	12578 <__assert_fail@plt+0x153c>
   124d0:	add	r1, ip, r7
   124d4:	ldrb	r1, [r1, #1]
   124d8:	cmp	r1, #63	; 0x3f
   124dc:	bne	12578 <__assert_fail@plt+0x153c>
   124e0:	ldrb	r5, [ip, r0]
   124e4:	sub	r1, r5, #33	; 0x21
   124e8:	cmp	r1, #29
   124ec:	bhi	12578 <__assert_fail@plt+0x153c>
   124f0:	movw	r3, #20929	; 0x51c1
   124f4:	mov	r2, #1
   124f8:	movt	r3, #14336	; 0x3800
   124fc:	tst	r3, r2, lsl r1
   12500:	beq	12578 <__assert_fail@plt+0x153c>
   12504:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12508:	tst	r1, #1
   1250c:	bne	12ae0 <__assert_fail@plt+0x1aa4>
   12510:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12514:	mov	r7, r0
   12518:	cmp	r8, r1
   1251c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12520:	movcc	r1, #63	; 0x3f
   12524:	strbcc	r1, [r2, r8]
   12528:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1252c:	add	r1, r8, #1
   12530:	cmp	r1, r2
   12534:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12538:	movcc	r2, #34	; 0x22
   1253c:	strbcc	r2, [r3, r1]
   12540:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12544:	add	r1, r8, #2
   12548:	cmp	r1, r2
   1254c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12550:	movcc	r2, #34	; 0x22
   12554:	strbcc	r2, [r3, r1]
   12558:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1255c:	add	r1, r8, #3
   12560:	add	r8, r8, #4
   12564:	cmp	r1, r2
   12568:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1256c:	movcc	r2, #63	; 0x3f
   12570:	strbcc	r2, [r3, r1]
   12574:	b	1257c <__assert_fail@plt+0x1540>
   12578:	mov	r5, #63	; 0x3f
   1257c:	mov	sl, #0
   12580:	b	1202c <__assert_fail@plt+0xff0>
   12584:	str	r0, [sp, #40]	; 0x28
   12588:	add	r0, r2, r7
   1258c:	str	r6, [sp, #76]	; 0x4c
   12590:	add	r1, r7, #1
   12594:	ldr	lr, [sp, #80]	; 0x50
   12598:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1259c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   125a0:	mov	r3, #0
   125a4:	str	r0, [sp, #36]	; 0x24
   125a8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   125ac:	b	12640 <__assert_fail@plt+0x1604>
   125b0:	str	r0, [sp, #76]	; 0x4c
   125b4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   125b8:	cmp	r9, #0
   125bc:	movwne	r9, #1
   125c0:	mvn	r7, r0
   125c4:	orr	r7, r7, r9
   125c8:	tst	r7, #1
   125cc:	bne	1261c <__assert_fail@plt+0x15e0>
   125d0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   125d4:	cmp	r8, r6
   125d8:	bcs	125f0 <__assert_fail@plt+0x15b4>
   125dc:	ldr	r7, [fp, #-56]	; 0xffffffc8
   125e0:	mov	r2, r4
   125e4:	mov	r4, #39	; 0x27
   125e8:	strb	r4, [r7, r8]
   125ec:	mov	r4, r2
   125f0:	add	r7, r8, #1
   125f4:	cmp	r7, r6
   125f8:	bcs	12610 <__assert_fail@plt+0x15d4>
   125fc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12600:	mov	r2, r4
   12604:	mov	r4, #39	; 0x27
   12608:	strb	r4, [r0, r7]
   1260c:	mov	r4, r2
   12610:	add	r8, r8, #2
   12614:	mov	r0, #0
   12618:	b	12624 <__assert_fail@plt+0x15e8>
   1261c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12620:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12624:	cmp	r8, r6
   12628:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1262c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12630:	strbcc	r5, [r2, r8]
   12634:	add	r8, r8, #1
   12638:	ldrb	r5, [ip, r1]
   1263c:	add	r1, r1, #1
   12640:	ldr	r2, [sp, #40]	; 0x28
   12644:	tst	r2, #1
   12648:	beq	12684 <__assert_fail@plt+0x1648>
   1264c:	ldr	r2, [sp, #76]	; 0x4c
   12650:	str	r0, [fp, #-48]	; 0xffffffd0
   12654:	tst	r2, #1
   12658:	beq	1267c <__assert_fail@plt+0x1640>
   1265c:	cmp	r8, r6
   12660:	bcs	12678 <__assert_fail@plt+0x163c>
   12664:	ldr	r6, [fp, #-56]	; 0xffffffc8
   12668:	mov	r2, r4
   1266c:	mov	r4, #92	; 0x5c
   12670:	strb	r4, [r6, r8]
   12674:	mov	r4, r2
   12678:	add	r8, r8, #1
   1267c:	mov	r0, #0
   12680:	b	12778 <__assert_fail@plt+0x173c>
   12684:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12688:	tst	r2, #1
   1268c:	bne	129d8 <__assert_fail@plt+0x199c>
   12690:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12694:	cmp	r7, #2
   12698:	movwne	r3, #1
   1269c:	orr	r3, r3, r0
   126a0:	tst	r3, #1
   126a4:	bne	12700 <__assert_fail@plt+0x16c4>
   126a8:	cmp	r8, r6
   126ac:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   126b0:	movcc	r3, #39	; 0x27
   126b4:	strbcc	r3, [r2, r8]
   126b8:	add	r3, r8, #1
   126bc:	cmp	r3, r6
   126c0:	bcs	126d8 <__assert_fail@plt+0x169c>
   126c4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   126c8:	mov	r7, r4
   126cc:	mov	r4, #36	; 0x24
   126d0:	strb	r4, [r2, r3]
   126d4:	mov	r4, r7
   126d8:	add	r3, r8, #2
   126dc:	cmp	r3, r6
   126e0:	bcs	126f8 <__assert_fail@plt+0x16bc>
   126e4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   126e8:	mov	r7, r4
   126ec:	mov	r4, #39	; 0x27
   126f0:	strb	r4, [r2, r3]
   126f4:	mov	r4, r7
   126f8:	add	r8, r8, #3
   126fc:	mov	r0, #1
   12700:	cmp	r8, r6
   12704:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12708:	movcc	r3, #92	; 0x5c
   1270c:	strbcc	r3, [r2, r8]
   12710:	add	r3, r8, #1
   12714:	cmp	r3, r6
   12718:	bcs	12738 <__assert_fail@plt+0x16fc>
   1271c:	mov	r2, r4
   12720:	and	r7, r5, #192	; 0xc0
   12724:	mov	r4, #48	; 0x30
   12728:	orr	r7, r4, r7, lsr #6
   1272c:	mov	r4, r2
   12730:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12734:	strb	r7, [r2, r3]
   12738:	add	r3, r8, #2
   1273c:	cmp	r3, r6
   12740:	bcs	12760 <__assert_fail@plt+0x1724>
   12744:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12748:	mov	r6, r4
   1274c:	lsr	r7, r5, #3
   12750:	mov	r4, #6
   12754:	bfi	r7, r4, #3, #29
   12758:	mov	r4, r6
   1275c:	strb	r7, [r2, r3]
   12760:	str	r0, [fp, #-48]	; 0xffffffd0
   12764:	ldr	r0, [sp, #76]	; 0x4c
   12768:	mov	r3, #6
   1276c:	add	r8, r8, #3
   12770:	bfi	r5, r3, #3, #29
   12774:	mov	r3, #1
   12778:	ldr	r2, [sp, #36]	; 0x24
   1277c:	and	r9, r3, #1
   12780:	cmp	r2, r1
   12784:	bhi	125b0 <__assert_fail@plt+0x1574>
   12788:	cmp	r9, #0
   1278c:	sub	r7, r1, #1
   12790:	mov	r0, r5
   12794:	movwne	r9, #1
   12798:	cmp	r9, #0
   1279c:	bne	127e0 <__assert_fail@plt+0x17a4>
   127a0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   127a4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   127a8:	tst	r5, #1
   127ac:	beq	12350 <__assert_fail@plt+0x1314>
   127b0:	cmp	r8, r6
   127b4:	mov	r5, #0
   127b8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   127bc:	movcc	r1, #39	; 0x27
   127c0:	strbcc	r1, [r2, r8]
   127c4:	add	r1, r8, #1
   127c8:	add	r8, r8, #2
   127cc:	cmp	r1, r6
   127d0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   127d4:	movcc	r2, #39	; 0x27
   127d8:	strbcc	r2, [r3, r1]
   127dc:	b	12350 <__assert_fail@plt+0x1314>
   127e0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   127e4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   127e8:	b	12350 <__assert_fail@plt+0x1314>
   127ec:	cmp	r8, r1
   127f0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   127f4:	movcc	r0, #39	; 0x27
   127f8:	strbcc	r0, [r2, r8]
   127fc:	add	r0, r8, #1
   12800:	cmp	r0, r1
   12804:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12808:	movcc	r2, #36	; 0x24
   1280c:	strbcc	r2, [r3, r0]
   12810:	add	r0, r8, #2
   12814:	cmp	r0, r1
   12818:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1281c:	movcc	r2, #39	; 0x27
   12820:	strbcc	r2, [r3, r0]
   12824:	add	r0, r8, #3
   12828:	mov	r3, #1
   1282c:	cmp	r0, r1
   12830:	add	r8, r0, #1
   12834:	str	r3, [fp, #-48]	; 0xffffffd0
   12838:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1283c:	movcc	r1, #92	; 0x5c
   12840:	strbcc	r1, [r2, r0]
   12844:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12848:	cmp	r1, #2
   1284c:	beq	128b0 <__assert_fail@plt+0x1874>
   12850:	add	r1, r7, #1
   12854:	mov	sl, #0
   12858:	mov	r9, #1
   1285c:	mov	r5, #48	; 0x30
   12860:	cmp	r1, lr
   12864:	bcs	1202c <__assert_fail@plt+0xff0>
   12868:	ldrb	r1, [ip, r1]
   1286c:	sub	r1, r1, #48	; 0x30
   12870:	uxtb	r1, r1
   12874:	cmp	r1, #9
   12878:	bhi	1202c <__assert_fail@plt+0xff0>
   1287c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12880:	cmp	r8, r1
   12884:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12888:	movcc	r1, #48	; 0x30
   1288c:	strbcc	r1, [r2, r8]
   12890:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12894:	add	r1, r0, #2
   12898:	add	r8, r0, #3
   1289c:	cmp	r1, r2
   128a0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   128a4:	movcc	r2, #48	; 0x30
   128a8:	strbcc	r2, [r3, r1]
   128ac:	b	1202c <__assert_fail@plt+0xff0>
   128b0:	mov	r0, #48	; 0x30
   128b4:	mov	r9, #1
   128b8:	mov	sl, #0
   128bc:	b	122c4 <__assert_fail@plt+0x1288>
   128c0:	mov	sl, #0
   128c4:	b	12900 <__assert_fail@plt+0x18c4>
   128c8:	mov	sl, #0
   128cc:	cmp	lr, r6
   128d0:	bls	12900 <__assert_fail@plt+0x18c4>
   128d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   128d8:	ldr	r6, [sp, #40]	; 0x28
   128dc:	ldr	r0, [sp, #36]	; 0x24
   128e0:	ldrb	r0, [r0, r6]
   128e4:	cmp	r0, #0
   128e8:	beq	12908 <__assert_fail@plt+0x18cc>
   128ec:	add	r6, r6, #1
   128f0:	add	r0, r7, r6
   128f4:	cmp	r0, lr
   128f8:	bcc	128dc <__assert_fail@plt+0x18a0>
   128fc:	b	12908 <__assert_fail@plt+0x18cc>
   12900:	ldr	ip, [fp, #-84]	; 0xffffffac
   12904:	ldr	r6, [sp, #40]	; 0x28
   12908:	mov	r1, r6
   1290c:	ldr	r4, [sp, #20]
   12910:	ldr	r6, [sp, #76]	; 0x4c
   12914:	b	12208 <__assert_fail@plt+0x11cc>
   12918:	mov	lr, r7
   1291c:	b	12924 <__assert_fail@plt+0x18e8>
   12920:	mvn	lr, #0
   12924:	ldr	r9, [fp, #-64]	; 0xffffffc0
   12928:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1292c:	eor	r0, r9, #2
   12930:	orr	r0, r0, r8
   12934:	clz	r0, r0
   12938:	lsr	r0, r0, #5
   1293c:	tst	r1, r0
   12940:	bne	12a3c <__assert_fail@plt+0x1a00>
   12944:	mov	r0, r1
   12948:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1294c:	cmp	r9, #2
   12950:	movwne	r1, #1
   12954:	orr	r0, r0, r1
   12958:	tst	r0, #1
   1295c:	bne	12a7c <__assert_fail@plt+0x1a40>
   12960:	ldr	r0, [sp, #52]	; 0x34
   12964:	ldr	r1, [sp, #68]	; 0x44
   12968:	str	lr, [sp, #80]	; 0x50
   1296c:	eor	r0, r0, #1
   12970:	tst	r0, #1
   12974:	bne	12a7c <__assert_fail@plt+0x1a40>
   12978:	tst	r4, #1
   1297c:	bne	12a44 <__assert_fail@plt+0x1a08>
   12980:	mov	r7, #0
   12984:	cmp	r1, #0
   12988:	beq	12a74 <__assert_fail@plt+0x1a38>
   1298c:	ldr	r0, [sp, #84]	; 0x54
   12990:	mov	r3, #0
   12994:	cmp	r6, #0
   12998:	mov	r2, #0
   1299c:	mov	r4, r1
   129a0:	str	r3, [fp, #-72]	; 0xffffffb8
   129a4:	beq	11ae0 <__assert_fail@plt+0xaa4>
   129a8:	b	12a7c <__assert_fail@plt+0x1a40>
   129ac:	ldr	r7, [fp, #-64]	; 0xffffffc0
   129b0:	b	129d8 <__assert_fail@plt+0x199c>
   129b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   129b8:	mov	r2, #1
   129bc:	mov	lr, r4
   129c0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   129c4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   129c8:	b	129dc <__assert_fail@plt+0x19a0>
   129cc:	ldr	ip, [fp, #-84]	; 0xffffffac
   129d0:	mov	r7, #2
   129d4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   129d8:	ldr	r2, [sp, #84]	; 0x54
   129dc:	mov	r0, #0
   129e0:	ldr	r1, [fp, #12]
   129e4:	tst	r2, #1
   129e8:	mov	r2, r7
   129ec:	mov	r3, lr
   129f0:	str	r0, [sp, #8]
   129f4:	ldr	r0, [sp, #64]	; 0x40
   129f8:	movwne	r2, #4
   129fc:	cmp	r7, #2
   12a00:	movne	r2, r7
   12a04:	str	r2, [sp]
   12a08:	mov	r2, ip
   12a0c:	bic	r1, r1, #2
   12a10:	str	r0, [sp, #12]
   12a14:	ldr	r0, [sp, #72]	; 0x48
   12a18:	str	r1, [sp, #4]
   12a1c:	mov	r1, r6
   12a20:	str	r0, [sp, #16]
   12a24:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12a28:	bl	11a68 <__assert_fail@plt+0xa2c>
   12a2c:	mov	r8, r0
   12a30:	mov	r0, r8
   12a34:	sub	sp, fp, #28
   12a38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a3c:	mov	r7, #2
   12a40:	b	129d8 <__assert_fail@plt+0x199c>
   12a44:	mov	r0, #5
   12a48:	ldr	r2, [fp, #-84]	; 0xffffffac
   12a4c:	ldr	r3, [sp, #80]	; 0x50
   12a50:	str	r0, [sp]
   12a54:	ldr	r0, [fp, #12]
   12a58:	str	r0, [sp, #4]
   12a5c:	ldr	r0, [fp, #16]
   12a60:	str	r0, [sp, #8]
   12a64:	ldr	r0, [sp, #64]	; 0x40
   12a68:	str	r0, [sp, #12]
   12a6c:	ldr	r0, [sp, #72]	; 0x48
   12a70:	b	12a20 <__assert_fail@plt+0x19e4>
   12a74:	mov	r0, #0
   12a78:	str	r0, [fp, #-72]	; 0xffffffb8
   12a7c:	ldr	r1, [sp, #92]	; 0x5c
   12a80:	cmp	r1, #0
   12a84:	beq	12ac4 <__assert_fail@plt+0x1a88>
   12a88:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12a8c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12a90:	tst	r0, #1
   12a94:	bne	12ac8 <__assert_fail@plt+0x1a8c>
   12a98:	ldrb	r0, [r1]
   12a9c:	cmp	r0, #0
   12aa0:	beq	12ac8 <__assert_fail@plt+0x1a8c>
   12aa4:	add	r1, r1, #1
   12aa8:	cmp	r8, r6
   12aac:	strbcc	r0, [r2, r8]
   12ab0:	add	r8, r8, #1
   12ab4:	ldrb	r0, [r1], #1
   12ab8:	cmp	r0, #0
   12abc:	bne	12aa8 <__assert_fail@plt+0x1a6c>
   12ac0:	b	12ac8 <__assert_fail@plt+0x1a8c>
   12ac4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12ac8:	cmp	r8, r6
   12acc:	movcc	r0, #0
   12ad0:	strbcc	r0, [r2, r8]
   12ad4:	b	12a30 <__assert_fail@plt+0x19f4>
   12ad8:	mov	r2, #1
   12adc:	b	129c0 <__assert_fail@plt+0x1984>
   12ae0:	mov	r7, #5
   12ae4:	b	129d4 <__assert_fail@plt+0x1998>
   12ae8:	bl	11030 <abort@plt>
   12aec:	mov	r3, r2
   12af0:	mov	r2, #0
   12af4:	b	12af8 <__assert_fail@plt+0x1abc>
   12af8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12afc:	add	fp, sp, #28
   12b00:	sub	sp, sp, #36	; 0x24
   12b04:	movw	r8, #24928	; 0x6160
   12b08:	cmp	r3, #0
   12b0c:	mov	r4, r2
   12b10:	str	r2, [sp, #24]
   12b14:	mov	r5, r1
   12b18:	mov	r6, r0
   12b1c:	str	r0, [sp, #20]
   12b20:	movt	r8, #2
   12b24:	movne	r8, r3
   12b28:	bl	10f70 <__errno_location@plt>
   12b2c:	str	r0, [sp, #28]
   12b30:	cmp	r4, #0
   12b34:	add	sl, r8, #8
   12b38:	ldm	r8, {r3, r9}
   12b3c:	ldr	r7, [r0]
   12b40:	ldr	r1, [r8, #40]	; 0x28
   12b44:	ldr	r2, [r8, #44]	; 0x2c
   12b48:	mov	r0, #0
   12b4c:	orreq	r9, r9, #1
   12b50:	str	r7, [sp, #32]
   12b54:	mov	r7, r5
   12b58:	stm	sp, {r3, r9, sl}
   12b5c:	str	r1, [sp, #12]
   12b60:	str	r2, [sp, #16]
   12b64:	mov	r1, #0
   12b68:	mov	r2, r6
   12b6c:	mov	r3, r5
   12b70:	bl	11a68 <__assert_fail@plt+0xa2c>
   12b74:	add	r4, r0, #1
   12b78:	mov	r5, r0
   12b7c:	mov	r0, r4
   12b80:	bl	1385c <__assert_fail@plt+0x2820>
   12b84:	mov	r6, r0
   12b88:	ldr	r0, [r8]
   12b8c:	ldr	r2, [r8, #44]	; 0x2c
   12b90:	ldr	r1, [r8, #40]	; 0x28
   12b94:	mov	r3, r7
   12b98:	stm	sp, {r0, r9, sl}
   12b9c:	str	r2, [sp, #16]
   12ba0:	str	r1, [sp, #12]
   12ba4:	mov	r0, r6
   12ba8:	mov	r1, r4
   12bac:	ldr	r2, [sp, #20]
   12bb0:	bl	11a68 <__assert_fail@plt+0xa2c>
   12bb4:	ldr	r0, [sp, #24]
   12bb8:	ldr	r1, [sp, #32]
   12bbc:	ldr	r2, [sp, #28]
   12bc0:	cmp	r0, #0
   12bc4:	str	r1, [r2]
   12bc8:	strne	r5, [r0]
   12bcc:	mov	r0, r6
   12bd0:	sub	sp, fp, #28
   12bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bd8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12bdc:	add	fp, sp, #24
   12be0:	movw	r5, #24820	; 0x60f4
   12be4:	movw	r8, #24816	; 0x60f0
   12be8:	movt	r5, #2
   12bec:	movt	r8, #2
   12bf0:	ldr	r0, [r5]
   12bf4:	ldr	r4, [r8]
   12bf8:	cmp	r0, #2
   12bfc:	blt	12c28 <__assert_fail@plt+0x1bec>
   12c00:	add	r7, r4, #12
   12c04:	mov	r6, #0
   12c08:	ldr	r0, [r7, r6, lsl #3]
   12c0c:	bl	146c4 <__assert_fail@plt+0x3688>
   12c10:	ldr	r1, [r5]
   12c14:	add	r2, r6, #2
   12c18:	add	r0, r6, #1
   12c1c:	mov	r6, r0
   12c20:	cmp	r2, r1
   12c24:	blt	12c08 <__assert_fail@plt+0x1bcc>
   12c28:	ldr	r0, [r4, #4]
   12c2c:	movw	r7, #24976	; 0x6190
   12c30:	movt	r7, #2
   12c34:	cmp	r0, r7
   12c38:	beq	12c50 <__assert_fail@plt+0x1c14>
   12c3c:	bl	146c4 <__assert_fail@plt+0x3688>
   12c40:	movw	r0, #24824	; 0x60f8
   12c44:	mov	r6, #256	; 0x100
   12c48:	movt	r0, #2
   12c4c:	strd	r6, [r0]
   12c50:	movw	r6, #24824	; 0x60f8
   12c54:	movt	r6, #2
   12c58:	cmp	r4, r6
   12c5c:	beq	12c6c <__assert_fail@plt+0x1c30>
   12c60:	mov	r0, r4
   12c64:	bl	146c4 <__assert_fail@plt+0x3688>
   12c68:	str	r6, [r8]
   12c6c:	mov	r0, #1
   12c70:	str	r0, [r5]
   12c74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12c78:	movw	r3, #24928	; 0x6160
   12c7c:	mvn	r2, #0
   12c80:	movt	r3, #2
   12c84:	b	12c88 <__assert_fail@plt+0x1c4c>
   12c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c8c:	add	fp, sp, #28
   12c90:	sub	sp, sp, #44	; 0x2c
   12c94:	mov	r7, r3
   12c98:	str	r2, [sp, #36]	; 0x24
   12c9c:	str	r1, [sp, #32]
   12ca0:	mov	r5, r0
   12ca4:	bl	10f70 <__errno_location@plt>
   12ca8:	cmp	r5, #0
   12cac:	blt	12e18 <__assert_fail@plt+0x1ddc>
   12cb0:	cmn	r5, #-2147483647	; 0x80000001
   12cb4:	beq	12e18 <__assert_fail@plt+0x1ddc>
   12cb8:	movw	r8, #24820	; 0x60f4
   12cbc:	movw	r4, #24816	; 0x60f0
   12cc0:	str	r0, [sp, #28]
   12cc4:	ldr	r0, [r0]
   12cc8:	movt	r8, #2
   12ccc:	movt	r4, #2
   12cd0:	ldr	r1, [r8]
   12cd4:	ldr	r6, [r4]
   12cd8:	str	r0, [sp, #24]
   12cdc:	cmp	r1, r5
   12ce0:	ble	12cec <__assert_fail@plt+0x1cb0>
   12ce4:	mov	sl, r6
   12ce8:	b	12d54 <__assert_fail@plt+0x1d18>
   12cec:	movw	r9, #24824	; 0x60f8
   12cf0:	mov	r0, #8
   12cf4:	add	r2, r5, #1
   12cf8:	str	r1, [fp, #-32]	; 0xffffffe0
   12cfc:	mvn	r3, #-2147483648	; 0x80000000
   12d00:	movt	r9, #2
   12d04:	str	r0, [sp]
   12d08:	sub	r2, r2, r1
   12d0c:	sub	r1, fp, #32
   12d10:	subs	r0, r6, r9
   12d14:	movne	r0, r6
   12d18:	bl	1398c <__assert_fail@plt+0x2950>
   12d1c:	cmp	r6, r9
   12d20:	mov	sl, r0
   12d24:	str	r0, [r4]
   12d28:	ldrdeq	r0, [r9]
   12d2c:	stmeq	sl, {r0, r1}
   12d30:	ldr	r1, [r8]
   12d34:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12d38:	add	r0, sl, r1, lsl #3
   12d3c:	sub	r1, r2, r1
   12d40:	lsl	r2, r1, #3
   12d44:	mov	r1, #0
   12d48:	bl	10f88 <memset@plt>
   12d4c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d50:	str	r0, [r8]
   12d54:	mov	r9, sl
   12d58:	ldr	r6, [r9, r5, lsl #3]!
   12d5c:	ldr	r4, [r9, #4]!
   12d60:	ldm	r7, {r0, r1}
   12d64:	ldr	r2, [r7, #40]	; 0x28
   12d68:	ldr	r3, [r7, #44]	; 0x2c
   12d6c:	orr	r8, r1, #1
   12d70:	add	r1, r7, #8
   12d74:	stm	sp, {r0, r8}
   12d78:	add	r0, sp, #8
   12d7c:	str	r1, [sp, #20]
   12d80:	stm	r0, {r1, r2, r3}
   12d84:	mov	r0, r4
   12d88:	mov	r1, r6
   12d8c:	ldr	r2, [sp, #32]
   12d90:	ldr	r3, [sp, #36]	; 0x24
   12d94:	bl	11a68 <__assert_fail@plt+0xa2c>
   12d98:	cmp	r6, r0
   12d9c:	bhi	12e00 <__assert_fail@plt+0x1dc4>
   12da0:	add	r6, r0, #1
   12da4:	movw	r0, #24976	; 0x6190
   12da8:	movt	r0, #2
   12dac:	str	r6, [sl, r5, lsl #3]
   12db0:	cmp	r4, r0
   12db4:	beq	12dc0 <__assert_fail@plt+0x1d84>
   12db8:	mov	r0, r4
   12dbc:	bl	146c4 <__assert_fail@plt+0x3688>
   12dc0:	mov	r0, r6
   12dc4:	bl	1385c <__assert_fail@plt+0x2820>
   12dc8:	str	r0, [r9]
   12dcc:	mov	r4, r0
   12dd0:	add	r3, sp, #8
   12dd4:	ldr	r0, [r7]
   12dd8:	ldr	r1, [r7, #40]	; 0x28
   12ddc:	ldr	r2, [r7, #44]	; 0x2c
   12de0:	stm	sp, {r0, r8}
   12de4:	ldr	r0, [sp, #20]
   12de8:	stm	r3, {r0, r1, r2}
   12dec:	mov	r0, r4
   12df0:	mov	r1, r6
   12df4:	ldr	r2, [sp, #32]
   12df8:	ldr	r3, [sp, #36]	; 0x24
   12dfc:	bl	11a68 <__assert_fail@plt+0xa2c>
   12e00:	ldr	r0, [sp, #28]
   12e04:	ldr	r1, [sp, #24]
   12e08:	str	r1, [r0]
   12e0c:	mov	r0, r4
   12e10:	sub	sp, fp, #28
   12e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e18:	bl	11030 <abort@plt>
   12e1c:	movw	r3, #24928	; 0x6160
   12e20:	movt	r3, #2
   12e24:	b	12c88 <__assert_fail@plt+0x1c4c>
   12e28:	movw	r3, #24928	; 0x6160
   12e2c:	mov	r1, r0
   12e30:	mov	r0, #0
   12e34:	mvn	r2, #0
   12e38:	movt	r3, #2
   12e3c:	b	12c88 <__assert_fail@plt+0x1c4c>
   12e40:	movw	r3, #24928	; 0x6160
   12e44:	mov	r2, r1
   12e48:	mov	r1, r0
   12e4c:	mov	r0, #0
   12e50:	movt	r3, #2
   12e54:	b	12c88 <__assert_fail@plt+0x1c4c>
   12e58:	push	{fp, lr}
   12e5c:	mov	fp, sp
   12e60:	sub	sp, sp, #48	; 0x30
   12e64:	vmov.i32	q8, #0	; 0x00000000
   12e68:	mov	ip, #32
   12e6c:	mov	r3, sp
   12e70:	mov	lr, r2
   12e74:	cmp	r1, #10
   12e78:	add	r2, r3, #16
   12e7c:	vst1.64	{d16-d17}, [r3], ip
   12e80:	vst1.64	{d16-d17}, [r3]
   12e84:	vst1.64	{d16-d17}, [r2]
   12e88:	beq	12ea8 <__assert_fail@plt+0x1e6c>
   12e8c:	str	r1, [sp]
   12e90:	mov	r3, sp
   12e94:	mov	r1, lr
   12e98:	mvn	r2, #0
   12e9c:	bl	12c88 <__assert_fail@plt+0x1c4c>
   12ea0:	mov	sp, fp
   12ea4:	pop	{fp, pc}
   12ea8:	bl	11030 <abort@plt>
   12eac:	push	{r4, sl, fp, lr}
   12eb0:	add	fp, sp, #8
   12eb4:	sub	sp, sp, #48	; 0x30
   12eb8:	mov	ip, r3
   12ebc:	mov	r3, sp
   12ec0:	vmov.i32	q8, #0	; 0x00000000
   12ec4:	mov	lr, #32
   12ec8:	cmp	r1, #10
   12ecc:	add	r4, r3, #16
   12ed0:	vst1.64	{d16-d17}, [r3], lr
   12ed4:	vst1.64	{d16-d17}, [r3]
   12ed8:	vst1.64	{d16-d17}, [r4]
   12edc:	beq	12efc <__assert_fail@plt+0x1ec0>
   12ee0:	str	r1, [sp]
   12ee4:	mov	r1, r2
   12ee8:	mov	r3, sp
   12eec:	mov	r2, ip
   12ef0:	bl	12c88 <__assert_fail@plt+0x1c4c>
   12ef4:	sub	sp, fp, #8
   12ef8:	pop	{r4, sl, fp, pc}
   12efc:	bl	11030 <abort@plt>
   12f00:	mov	r2, r1
   12f04:	mov	r1, r0
   12f08:	mov	r0, #0
   12f0c:	b	12e58 <__assert_fail@plt+0x1e1c>
   12f10:	mov	r3, r2
   12f14:	mov	r2, r1
   12f18:	mov	r1, r0
   12f1c:	mov	r0, #0
   12f20:	b	12eac <__assert_fail@plt+0x1e70>
   12f24:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12f28:	add	fp, sp, #24
   12f2c:	sub	sp, sp, #48	; 0x30
   12f30:	movw	r8, #24928	; 0x6160
   12f34:	mov	lr, r0
   12f38:	mov	r3, sp
   12f3c:	mov	ip, r1
   12f40:	movt	r8, #2
   12f44:	mov	r1, r3
   12f48:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   12f4c:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   12f50:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   12f54:	stm	r1, {r0, r4, r5, r6, r7, r9}
   12f58:	ubfx	r0, r2, #5, #3
   12f5c:	and	r2, r2, #31
   12f60:	mov	r4, #1
   12f64:	add	r0, r3, r0, lsl #2
   12f68:	ldr	r1, [r0, #8]
   12f6c:	bic	r4, r4, r1, lsr r2
   12f70:	eor	r1, r1, r4, lsl r2
   12f74:	mov	r2, ip
   12f78:	str	r1, [r0, #8]
   12f7c:	mov	r0, #0
   12f80:	mov	r1, lr
   12f84:	bl	12c88 <__assert_fail@plt+0x1c4c>
   12f88:	sub	sp, fp, #24
   12f8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12f90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12f94:	add	fp, sp, #24
   12f98:	sub	sp, sp, #48	; 0x30
   12f9c:	movw	lr, #24928	; 0x6160
   12fa0:	mov	ip, r0
   12fa4:	mov	r3, sp
   12fa8:	movt	lr, #2
   12fac:	mov	r2, r3
   12fb0:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   12fb4:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   12fb8:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   12fbc:	stm	r2, {r0, r4, r5, r6, r7, r8}
   12fc0:	ubfx	r0, r1, #5, #3
   12fc4:	and	r1, r1, #31
   12fc8:	mov	r7, #1
   12fcc:	add	r0, r3, r0, lsl #2
   12fd0:	ldr	r2, [r0, #8]
   12fd4:	bic	r7, r7, r2, lsr r1
   12fd8:	eor	r1, r2, r7, lsl r1
   12fdc:	mvn	r2, #0
   12fe0:	str	r1, [r0, #8]
   12fe4:	mov	r0, #0
   12fe8:	mov	r1, ip
   12fec:	bl	12c88 <__assert_fail@plt+0x1c4c>
   12ff0:	sub	sp, fp, #24
   12ff4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12ff8:	push	{r4, r5, r6, r7, fp, lr}
   12ffc:	add	fp, sp, #16
   13000:	sub	sp, sp, #48	; 0x30
   13004:	movw	lr, #24928	; 0x6160
   13008:	mov	ip, r0
   1300c:	mov	r3, sp
   13010:	movt	lr, #2
   13014:	mov	r2, r3
   13018:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   1301c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13020:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   13024:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13028:	mov	r1, ip
   1302c:	mvn	r2, #0
   13030:	ldr	r0, [sp, #12]
   13034:	orr	r0, r0, #67108864	; 0x4000000
   13038:	str	r0, [sp, #12]
   1303c:	mov	r0, #0
   13040:	bl	12c88 <__assert_fail@plt+0x1c4c>
   13044:	sub	sp, fp, #16
   13048:	pop	{r4, r5, r6, r7, fp, pc}
   1304c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13050:	add	fp, sp, #24
   13054:	sub	sp, sp, #48	; 0x30
   13058:	movw	r8, #24928	; 0x6160
   1305c:	mov	ip, r1
   13060:	mov	lr, r0
   13064:	mov	r3, sp
   13068:	movt	r8, #2
   1306c:	mov	r2, r3
   13070:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   13074:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13078:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   1307c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13080:	mov	r1, lr
   13084:	mov	r2, ip
   13088:	ldr	r0, [sp, #12]
   1308c:	orr	r0, r0, #67108864	; 0x4000000
   13090:	str	r0, [sp, #12]
   13094:	mov	r0, #0
   13098:	bl	12c88 <__assert_fail@plt+0x1c4c>
   1309c:	sub	sp, fp, #24
   130a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   130a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   130a8:	add	fp, sp, #24
   130ac:	sub	sp, sp, #96	; 0x60
   130b0:	mov	lr, sp
   130b4:	vmov.i32	q8, #0	; 0x00000000
   130b8:	mov	ip, r2
   130bc:	cmp	r1, #10
   130c0:	add	r3, lr, #16
   130c4:	mov	r2, lr
   130c8:	vst1.64	{d16-d17}, [r3]
   130cc:	mov	r3, #28
   130d0:	vst1.64	{d16-d17}, [r2], r3
   130d4:	vst1.32	{d16-d17}, [r2]
   130d8:	beq	13118 <__assert_fail@plt+0x20dc>
   130dc:	str	r1, [sp, #48]	; 0x30
   130e0:	add	r3, sp, #48	; 0x30
   130e4:	ldm	lr!, {r2, r4, r5, r6, r7}
   130e8:	add	r1, r3, #4
   130ec:	stmia	r1!, {r2, r4, r5, r6, r7}
   130f0:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   130f4:	stm	r1, {r2, r4, r5, r6, r7, r8}
   130f8:	mvn	r2, #0
   130fc:	ldr	r1, [sp, #60]	; 0x3c
   13100:	orr	r1, r1, #67108864	; 0x4000000
   13104:	str	r1, [sp, #60]	; 0x3c
   13108:	mov	r1, ip
   1310c:	bl	12c88 <__assert_fail@plt+0x1c4c>
   13110:	sub	sp, fp, #24
   13114:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13118:	bl	11030 <abort@plt>
   1311c:	push	{fp, lr}
   13120:	mov	fp, sp
   13124:	sub	sp, sp, #8
   13128:	mvn	ip, #0
   1312c:	str	ip, [sp]
   13130:	bl	1313c <__assert_fail@plt+0x2100>
   13134:	mov	sp, fp
   13138:	pop	{fp, pc}
   1313c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13140:	add	fp, sp, #24
   13144:	sub	sp, sp, #48	; 0x30
   13148:	movw	ip, #24928	; 0x6160
   1314c:	mov	lr, r3
   13150:	mov	r3, sp
   13154:	cmp	r1, #0
   13158:	movt	ip, #2
   1315c:	cmpne	r2, #0
   13160:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   13164:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   13168:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   1316c:	stm	r3, {r4, r5, r6, r7, r8, r9}
   13170:	mov	r3, #10
   13174:	str	r3, [sp]
   13178:	bne	13180 <__assert_fail@plt+0x2144>
   1317c:	bl	11030 <abort@plt>
   13180:	ldr	ip, [fp, #8]
   13184:	str	r2, [sp, #44]	; 0x2c
   13188:	str	r1, [sp, #40]	; 0x28
   1318c:	mov	r3, sp
   13190:	mov	r1, lr
   13194:	mov	r2, ip
   13198:	bl	12c88 <__assert_fail@plt+0x1c4c>
   1319c:	sub	sp, fp, #24
   131a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   131a4:	push	{fp, lr}
   131a8:	mov	fp, sp
   131ac:	sub	sp, sp, #8
   131b0:	mov	r3, r2
   131b4:	mov	r2, r1
   131b8:	mov	r1, r0
   131bc:	mvn	r0, #0
   131c0:	str	r0, [sp]
   131c4:	mov	r0, #0
   131c8:	bl	1313c <__assert_fail@plt+0x2100>
   131cc:	mov	sp, fp
   131d0:	pop	{fp, pc}
   131d4:	push	{fp, lr}
   131d8:	mov	fp, sp
   131dc:	sub	sp, sp, #8
   131e0:	mov	ip, r2
   131e4:	mov	r2, r1
   131e8:	mov	r1, r0
   131ec:	str	r3, [sp]
   131f0:	mov	r0, #0
   131f4:	mov	r3, ip
   131f8:	bl	1313c <__assert_fail@plt+0x2100>
   131fc:	mov	sp, fp
   13200:	pop	{fp, pc}
   13204:	movw	r3, #24832	; 0x6100
   13208:	movt	r3, #2
   1320c:	b	12c88 <__assert_fail@plt+0x1c4c>
   13210:	movw	r3, #24832	; 0x6100
   13214:	mov	r2, r1
   13218:	mov	r1, r0
   1321c:	mov	r0, #0
   13220:	movt	r3, #2
   13224:	b	12c88 <__assert_fail@plt+0x1c4c>
   13228:	movw	r3, #24832	; 0x6100
   1322c:	mvn	r2, #0
   13230:	movt	r3, #2
   13234:	b	12c88 <__assert_fail@plt+0x1c4c>
   13238:	movw	r3, #24832	; 0x6100
   1323c:	mov	r1, r0
   13240:	mov	r0, #0
   13244:	mvn	r2, #0
   13248:	movt	r3, #2
   1324c:	b	12c88 <__assert_fail@plt+0x1c4c>
   13250:	push	{r4, r5, fp, lr}
   13254:	add	fp, sp, #8
   13258:	mov	r5, r0
   1325c:	mov	r4, r1
   13260:	mov	r0, #0
   13264:	mov	r2, #5
   13268:	mov	r1, r5
   1326c:	bl	10e68 <dcgettext@plt>
   13270:	cmp	r0, r5
   13274:	popne	{r4, r5, fp, pc}
   13278:	bl	14790 <__assert_fail@plt+0x3754>
   1327c:	ldrb	r1, [r0]
   13280:	and	r1, r1, #223	; 0xdf
   13284:	cmp	r1, #71	; 0x47
   13288:	beq	132f0 <__assert_fail@plt+0x22b4>
   1328c:	cmp	r1, #85	; 0x55
   13290:	bne	13314 <__assert_fail@plt+0x22d8>
   13294:	ldrb	r1, [r0, #1]
   13298:	and	r1, r1, #223	; 0xdf
   1329c:	cmp	r1, #84	; 0x54
   132a0:	bne	13314 <__assert_fail@plt+0x22d8>
   132a4:	ldrb	r1, [r0, #2]
   132a8:	and	r1, r1, #223	; 0xdf
   132ac:	cmp	r1, #70	; 0x46
   132b0:	ldrbeq	r1, [r0, #3]
   132b4:	cmpeq	r1, #45	; 0x2d
   132b8:	bne	13314 <__assert_fail@plt+0x22d8>
   132bc:	ldrb	r1, [r0, #4]
   132c0:	cmp	r1, #56	; 0x38
   132c4:	ldrbeq	r0, [r0, #5]
   132c8:	cmpeq	r0, #0
   132cc:	bne	13314 <__assert_fail@plt+0x22d8>
   132d0:	ldrb	r1, [r5]
   132d4:	movw	r2, #20489	; 0x5009
   132d8:	movw	r0, #20493	; 0x500d
   132dc:	movt	r2, #1
   132e0:	movt	r0, #1
   132e4:	cmp	r1, #96	; 0x60
   132e8:	moveq	r0, r2
   132ec:	pop	{r4, r5, fp, pc}
   132f0:	ldrb	r1, [r0, #1]
   132f4:	and	r1, r1, #223	; 0xdf
   132f8:	cmp	r1, #66	; 0x42
   132fc:	bne	13314 <__assert_fail@plt+0x22d8>
   13300:	ldrb	r1, [r0, #2]
   13304:	cmp	r1, #49	; 0x31
   13308:	ldrbeq	r1, [r0, #3]
   1330c:	cmpeq	r1, #56	; 0x38
   13310:	beq	13330 <__assert_fail@plt+0x22f4>
   13314:	movw	r1, #20483	; 0x5003
   13318:	movw	r0, #20487	; 0x5007
   1331c:	cmp	r4, #9
   13320:	movt	r1, #1
   13324:	movt	r0, #1
   13328:	moveq	r0, r1
   1332c:	pop	{r4, r5, fp, pc}
   13330:	ldrb	r1, [r0, #4]
   13334:	cmp	r1, #48	; 0x30
   13338:	ldrbeq	r1, [r0, #5]
   1333c:	cmpeq	r1, #51	; 0x33
   13340:	bne	13314 <__assert_fail@plt+0x22d8>
   13344:	ldrb	r1, [r0, #6]
   13348:	cmp	r1, #48	; 0x30
   1334c:	ldrbeq	r0, [r0, #7]
   13350:	cmpeq	r0, #0
   13354:	bne	13314 <__assert_fail@plt+0x22d8>
   13358:	ldrb	r1, [r5]
   1335c:	movw	r2, #20497	; 0x5011
   13360:	movw	r0, #20501	; 0x5015
   13364:	movt	r2, #1
   13368:	movt	r0, #1
   1336c:	b	132e4 <__assert_fail@plt+0x22a8>
   13370:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13374:	add	fp, sp, #24
   13378:	sub	sp, sp, #32
   1337c:	ldr	r6, [fp, #12]
   13380:	ldr	r7, [fp, #8]
   13384:	mov	r4, r2
   13388:	mov	r8, r0
   1338c:	cmp	r1, #0
   13390:	beq	133b8 <__assert_fail@plt+0x237c>
   13394:	movw	r2, #20588	; 0x506c
   13398:	mov	r5, r1
   1339c:	str	r3, [sp, #4]
   133a0:	str	r4, [sp]
   133a4:	mov	r0, r8
   133a8:	mov	r1, #1
   133ac:	movt	r2, #1
   133b0:	mov	r3, r5
   133b4:	b	133d0 <__assert_fail@plt+0x2394>
   133b8:	movw	r2, #20600	; 0x5078
   133bc:	str	r3, [sp]
   133c0:	mov	r0, r8
   133c4:	mov	r1, #1
   133c8:	mov	r3, r4
   133cc:	movt	r2, #1
   133d0:	bl	10fb8 <__fprintf_chk@plt>
   133d4:	movw	r1, #20607	; 0x507f
   133d8:	mov	r0, #0
   133dc:	mov	r2, #5
   133e0:	movt	r1, #1
   133e4:	bl	10e68 <dcgettext@plt>
   133e8:	movw	r2, #21325	; 0x534d
   133ec:	mov	r3, r0
   133f0:	movw	r0, #2022	; 0x7e6
   133f4:	mov	r1, #1
   133f8:	str	r0, [sp]
   133fc:	movt	r2, #1
   13400:	mov	r0, r8
   13404:	bl	10fb8 <__fprintf_chk@plt>
   13408:	movw	r4, #19480	; 0x4c18
   1340c:	mov	r1, r8
   13410:	movt	r4, #1
   13414:	mov	r0, r4
   13418:	bl	10df0 <fputs_unlocked@plt>
   1341c:	movw	r1, #20611	; 0x5083
   13420:	mov	r0, #0
   13424:	mov	r2, #5
   13428:	movt	r1, #1
   1342c:	bl	10e68 <dcgettext@plt>
   13430:	movw	r3, #20782	; 0x512e
   13434:	mov	r2, r0
   13438:	mov	r0, r8
   1343c:	mov	r1, #1
   13440:	movt	r3, #1
   13444:	bl	10fb8 <__fprintf_chk@plt>
   13448:	mov	r0, r4
   1344c:	mov	r1, r8
   13450:	bl	10df0 <fputs_unlocked@plt>
   13454:	cmp	r6, #9
   13458:	bhi	134bc <__assert_fail@plt+0x2480>
   1345c:	add	r0, pc, #0
   13460:	ldr	pc, [r0, r6, lsl #2]
   13464:	muleq	r1, r4, r6
   13468:	andeq	r3, r1, ip, lsl #9
   1346c:	andeq	r3, r1, r8, asr #9
   13470:	strdeq	r3, [r1], -r0
   13474:	andeq	r3, r1, r8, lsl r5
   13478:	andeq	r3, r1, r0, asr #10
   1347c:	andeq	r3, r1, r8, ror #10
   13480:	andeq	r3, r1, r0, lsr #11
   13484:	andeq	r3, r1, r0, asr #12
   13488:	andeq	r3, r1, r8, ror #11
   1348c:	movw	r1, #20816	; 0x5150
   13490:	mov	r0, #0
   13494:	mov	r2, #5
   13498:	movt	r1, #1
   1349c:	bl	10e68 <dcgettext@plt>
   134a0:	ldr	r3, [r7]
   134a4:	mov	r2, r0
   134a8:	mov	r0, r8
   134ac:	mov	r1, #1
   134b0:	sub	sp, fp, #24
   134b4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   134b8:	b	10fb8 <__fprintf_chk@plt>
   134bc:	movw	r1, #21135	; 0x528f
   134c0:	movt	r1, #1
   134c4:	b	135f0 <__assert_fail@plt+0x25b4>
   134c8:	movw	r1, #20832	; 0x5160
   134cc:	mov	r0, #0
   134d0:	mov	r2, #5
   134d4:	movt	r1, #1
   134d8:	bl	10e68 <dcgettext@plt>
   134dc:	mov	r2, r0
   134e0:	ldr	r3, [r7]
   134e4:	ldr	r0, [r7, #4]
   134e8:	str	r0, [sp]
   134ec:	b	135dc <__assert_fail@plt+0x25a0>
   134f0:	movw	r1, #20855	; 0x5177
   134f4:	mov	r0, #0
   134f8:	mov	r2, #5
   134fc:	movt	r1, #1
   13500:	bl	10e68 <dcgettext@plt>
   13504:	ldr	r3, [r7]
   13508:	mov	r2, r0
   1350c:	ldmib	r7, {r0, r1}
   13510:	stm	sp, {r0, r1}
   13514:	b	135dc <__assert_fail@plt+0x25a0>
   13518:	movw	r1, #20883	; 0x5193
   1351c:	mov	r0, #0
   13520:	mov	r2, #5
   13524:	movt	r1, #1
   13528:	bl	10e68 <dcgettext@plt>
   1352c:	ldr	r3, [r7]
   13530:	mov	r2, r0
   13534:	ldmib	r7, {r0, r1, r7}
   13538:	stm	sp, {r0, r1, r7}
   1353c:	b	135dc <__assert_fail@plt+0x25a0>
   13540:	movw	r1, #20915	; 0x51b3
   13544:	mov	r0, #0
   13548:	mov	r2, #5
   1354c:	movt	r1, #1
   13550:	bl	10e68 <dcgettext@plt>
   13554:	ldr	r3, [r7]
   13558:	mov	r2, r0
   1355c:	ldmib	r7, {r0, r1, r6, r7}
   13560:	stm	sp, {r0, r1, r6, r7}
   13564:	b	135dc <__assert_fail@plt+0x25a0>
   13568:	movw	r1, #20951	; 0x51d7
   1356c:	mov	r0, #0
   13570:	mov	r2, #5
   13574:	movt	r1, #1
   13578:	bl	10e68 <dcgettext@plt>
   1357c:	ldr	r3, [r7]
   13580:	mov	r2, r0
   13584:	ldmib	r7, {r0, r1, r6}
   13588:	ldr	r5, [r7, #16]
   1358c:	ldr	r7, [r7, #20]
   13590:	stm	sp, {r0, r1, r6}
   13594:	str	r5, [sp, #12]
   13598:	str	r7, [sp, #16]
   1359c:	b	135dc <__assert_fail@plt+0x25a0>
   135a0:	movw	r1, #20991	; 0x51ff
   135a4:	mov	r0, #0
   135a8:	mov	r2, #5
   135ac:	movt	r1, #1
   135b0:	bl	10e68 <dcgettext@plt>
   135b4:	ldr	r3, [r7]
   135b8:	mov	r2, r0
   135bc:	ldmib	r7, {r0, r1, r6}
   135c0:	ldr	r5, [r7, #16]
   135c4:	ldr	r4, [r7, #20]
   135c8:	ldr	r7, [r7, #24]
   135cc:	stm	sp, {r0, r1, r6}
   135d0:	str	r5, [sp, #12]
   135d4:	str	r4, [sp, #16]
   135d8:	str	r7, [sp, #20]
   135dc:	mov	r0, r8
   135e0:	mov	r1, #1
   135e4:	b	13690 <__assert_fail@plt+0x2654>
   135e8:	movw	r1, #21083	; 0x525b
   135ec:	movt	r1, #1
   135f0:	mov	r0, #0
   135f4:	mov	r2, #5
   135f8:	bl	10e68 <dcgettext@plt>
   135fc:	mov	ip, r0
   13600:	ldr	r3, [r7]
   13604:	ldr	r0, [r7, #4]
   13608:	ldr	r1, [r7, #8]
   1360c:	ldr	r6, [r7, #12]
   13610:	ldr	r5, [r7, #16]
   13614:	ldr	r4, [r7, #20]
   13618:	ldr	r2, [r7, #24]
   1361c:	ldr	lr, [r7, #28]
   13620:	ldr	r7, [r7, #32]
   13624:	stm	sp, {r0, r1, r6}
   13628:	str	r5, [sp, #12]
   1362c:	str	r4, [sp, #16]
   13630:	str	r2, [sp, #20]
   13634:	str	lr, [sp, #24]
   13638:	str	r7, [sp, #28]
   1363c:	b	13684 <__assert_fail@plt+0x2648>
   13640:	movw	r1, #21035	; 0x522b
   13644:	mov	r0, #0
   13648:	mov	r2, #5
   1364c:	movt	r1, #1
   13650:	bl	10e68 <dcgettext@plt>
   13654:	mov	ip, r0
   13658:	ldr	r3, [r7]
   1365c:	ldmib	r7, {r0, r1, r6}
   13660:	ldr	r5, [r7, #16]
   13664:	ldr	r4, [r7, #20]
   13668:	ldr	r2, [r7, #24]
   1366c:	ldr	r7, [r7, #28]
   13670:	stm	sp, {r0, r1, r6}
   13674:	str	r5, [sp, #12]
   13678:	str	r4, [sp, #16]
   1367c:	str	r2, [sp, #20]
   13680:	str	r7, [sp, #24]
   13684:	mov	r0, r8
   13688:	mov	r1, #1
   1368c:	mov	r2, ip
   13690:	bl	10fb8 <__fprintf_chk@plt>
   13694:	sub	sp, fp, #24
   13698:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1369c:	push	{r4, sl, fp, lr}
   136a0:	add	fp, sp, #8
   136a4:	sub	sp, sp, #8
   136a8:	ldr	ip, [fp, #8]
   136ac:	mov	lr, #0
   136b0:	ldr	r4, [ip, lr, lsl #2]
   136b4:	add	lr, lr, #1
   136b8:	cmp	r4, #0
   136bc:	bne	136b0 <__assert_fail@plt+0x2674>
   136c0:	sub	r4, lr, #1
   136c4:	str	ip, [sp]
   136c8:	str	r4, [sp, #4]
   136cc:	bl	13370 <__assert_fail@plt+0x2334>
   136d0:	sub	sp, fp, #8
   136d4:	pop	{r4, sl, fp, pc}
   136d8:	push	{r4, r5, fp, lr}
   136dc:	add	fp, sp, #8
   136e0:	sub	sp, sp, #48	; 0x30
   136e4:	ldr	r4, [fp, #8]
   136e8:	mov	ip, #0
   136ec:	add	lr, sp, #8
   136f0:	ldr	r5, [r4]
   136f4:	cmp	r5, #0
   136f8:	str	r5, [lr, ip, lsl #2]
   136fc:	beq	13710 <__assert_fail@plt+0x26d4>
   13700:	add	ip, ip, #1
   13704:	add	r4, r4, #4
   13708:	cmp	ip, #10
   1370c:	bcc	136f0 <__assert_fail@plt+0x26b4>
   13710:	str	lr, [sp]
   13714:	str	ip, [sp, #4]
   13718:	bl	13370 <__assert_fail@plt+0x2334>
   1371c:	sub	sp, fp, #8
   13720:	pop	{r4, r5, fp, pc}
   13724:	push	{fp, lr}
   13728:	mov	fp, sp
   1372c:	sub	sp, sp, #8
   13730:	add	ip, fp, #8
   13734:	str	ip, [sp, #4]
   13738:	str	ip, [sp]
   1373c:	bl	136d8 <__assert_fail@plt+0x269c>
   13740:	mov	sp, fp
   13744:	pop	{fp, pc}
   13748:	push	{fp, lr}
   1374c:	mov	fp, sp
   13750:	movw	r0, #24900	; 0x6144
   13754:	movt	r0, #2
   13758:	ldr	r1, [r0]
   1375c:	movw	r0, #19480	; 0x4c18
   13760:	movt	r0, #1
   13764:	bl	10df0 <fputs_unlocked@plt>
   13768:	movw	r1, #21195	; 0x52cb
   1376c:	mov	r0, #0
   13770:	mov	r2, #5
   13774:	movt	r1, #1
   13778:	bl	10e68 <dcgettext@plt>
   1377c:	movw	r2, #21215	; 0x52df
   13780:	mov	r1, r0
   13784:	mov	r0, #1
   13788:	movt	r2, #1
   1378c:	bl	10f94 <__printf_chk@plt>
   13790:	movw	r1, #21237	; 0x52f5
   13794:	mov	r0, #0
   13798:	mov	r2, #5
   1379c:	movt	r1, #1
   137a0:	bl	10e68 <dcgettext@plt>
   137a4:	movw	r2, #19728	; 0x4d10
   137a8:	movw	r3, #19915	; 0x4dcb
   137ac:	mov	r1, r0
   137b0:	mov	r0, #1
   137b4:	movt	r2, #1
   137b8:	movt	r3, #1
   137bc:	bl	10f94 <__printf_chk@plt>
   137c0:	movw	r1, #21257	; 0x5309
   137c4:	mov	r0, #0
   137c8:	mov	r2, #5
   137cc:	movt	r1, #1
   137d0:	bl	10e68 <dcgettext@plt>
   137d4:	movw	r2, #21296	; 0x5330
   137d8:	mov	r1, r0
   137dc:	mov	r0, #1
   137e0:	movt	r2, #1
   137e4:	pop	{fp, lr}
   137e8:	b	10f94 <__printf_chk@plt>
   137ec:	b	137f0 <__assert_fail@plt+0x27b4>
   137f0:	push	{r4, r5, r6, sl, fp, lr}
   137f4:	add	fp, sp, #16
   137f8:	mov	r4, r2
   137fc:	mov	r5, r1
   13800:	mov	r6, r0
   13804:	bl	14828 <__assert_fail@plt+0x37ec>
   13808:	cmp	r0, #0
   1380c:	popne	{r4, r5, r6, sl, fp, pc}
   13810:	cmp	r6, #0
   13814:	beq	13828 <__assert_fail@plt+0x27ec>
   13818:	cmp	r5, #0
   1381c:	cmpne	r4, #0
   13820:	bne	13828 <__assert_fail@plt+0x27ec>
   13824:	pop	{r4, r5, r6, sl, fp, pc}
   13828:	bl	13c7c <__assert_fail@plt+0x2c40>
   1382c:	push	{fp, lr}
   13830:	mov	fp, sp
   13834:	bl	144cc <__assert_fail@plt+0x3490>
   13838:	cmp	r0, #0
   1383c:	popne	{fp, pc}
   13840:	bl	13c7c <__assert_fail@plt+0x2c40>
   13844:	push	{fp, lr}
   13848:	mov	fp, sp
   1384c:	bl	144cc <__assert_fail@plt+0x3490>
   13850:	cmp	r0, #0
   13854:	popne	{fp, pc}
   13858:	bl	13c7c <__assert_fail@plt+0x2c40>
   1385c:	push	{fp, lr}
   13860:	mov	fp, sp
   13864:	bl	144cc <__assert_fail@plt+0x3490>
   13868:	cmp	r0, #0
   1386c:	popne	{fp, pc}
   13870:	bl	13c7c <__assert_fail@plt+0x2c40>
   13874:	push	{r4, r5, fp, lr}
   13878:	add	fp, sp, #8
   1387c:	mov	r4, r1
   13880:	mov	r5, r0
   13884:	bl	144fc <__assert_fail@plt+0x34c0>
   13888:	cmp	r0, #0
   1388c:	popne	{r4, r5, fp, pc}
   13890:	cmp	r5, #0
   13894:	beq	138a4 <__assert_fail@plt+0x2868>
   13898:	cmp	r4, #0
   1389c:	bne	138a4 <__assert_fail@plt+0x2868>
   138a0:	pop	{r4, r5, fp, pc}
   138a4:	bl	13c7c <__assert_fail@plt+0x2c40>
   138a8:	push	{fp, lr}
   138ac:	mov	fp, sp
   138b0:	cmp	r1, #0
   138b4:	orreq	r1, r1, #1
   138b8:	bl	144fc <__assert_fail@plt+0x34c0>
   138bc:	cmp	r0, #0
   138c0:	popne	{fp, pc}
   138c4:	bl	13c7c <__assert_fail@plt+0x2c40>
   138c8:	push	{fp, lr}
   138cc:	mov	fp, sp
   138d0:	clz	r3, r2
   138d4:	lsr	ip, r3, #5
   138d8:	clz	r3, r1
   138dc:	lsr	r3, r3, #5
   138e0:	orrs	r3, r3, ip
   138e4:	movwne	r1, #1
   138e8:	movwne	r2, #1
   138ec:	bl	14828 <__assert_fail@plt+0x37ec>
   138f0:	cmp	r0, #0
   138f4:	popne	{fp, pc}
   138f8:	bl	13c7c <__assert_fail@plt+0x2c40>
   138fc:	push	{fp, lr}
   13900:	mov	fp, sp
   13904:	mov	r2, r1
   13908:	mov	r1, r0
   1390c:	mov	r0, #0
   13910:	bl	14828 <__assert_fail@plt+0x37ec>
   13914:	cmp	r0, #0
   13918:	popne	{fp, pc}
   1391c:	bl	13c7c <__assert_fail@plt+0x2c40>
   13920:	mov	r2, r1
   13924:	mov	r1, r0
   13928:	mov	r0, #0
   1392c:	b	138c8 <__assert_fail@plt+0x288c>
   13930:	mov	r2, #1
   13934:	b	13938 <__assert_fail@plt+0x28fc>
   13938:	push	{r4, r5, fp, lr}
   1393c:	add	fp, sp, #8
   13940:	ldr	r5, [r1]
   13944:	mov	r4, r1
   13948:	cmp	r0, #0
   1394c:	beq	13964 <__assert_fail@plt+0x2928>
   13950:	mov	r1, #1
   13954:	add	r1, r1, r5, lsr #1
   13958:	adds	r5, r5, r1
   1395c:	bcc	1397c <__assert_fail@plt+0x2940>
   13960:	bl	13c7c <__assert_fail@plt+0x2c40>
   13964:	cmp	r5, #0
   13968:	bne	1397c <__assert_fail@plt+0x2940>
   1396c:	mov	r1, #64	; 0x40
   13970:	cmp	r2, #64	; 0x40
   13974:	udiv	r5, r1, r2
   13978:	addhi	r5, r5, #1
   1397c:	mov	r1, r5
   13980:	bl	137f0 <__assert_fail@plt+0x27b4>
   13984:	str	r5, [r4]
   13988:	pop	{r4, r5, fp, pc}
   1398c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13990:	add	fp, sp, #24
   13994:	ldr	r6, [r1]
   13998:	mov	r8, r1
   1399c:	ldr	r4, [fp, #8]
   139a0:	add	r1, r6, r6, asr #1
   139a4:	cmp	r1, r6
   139a8:	mvnvs	r1, #-2147483648	; 0x80000000
   139ac:	cmp	r1, r3
   139b0:	mov	r5, r1
   139b4:	movgt	r5, r3
   139b8:	cmn	r3, #1
   139bc:	movle	r5, r1
   139c0:	cmn	r4, #1
   139c4:	ble	139e4 <__assert_fail@plt+0x29a8>
   139c8:	cmp	r4, #0
   139cc:	beq	13a38 <__assert_fail@plt+0x29fc>
   139d0:	cmn	r5, #1
   139d4:	ble	13a0c <__assert_fail@plt+0x29d0>
   139d8:	mvn	r7, #-2147483648	; 0x80000000
   139dc:	udiv	r1, r7, r4
   139e0:	b	13a00 <__assert_fail@plt+0x29c4>
   139e4:	cmn	r5, #1
   139e8:	ble	13a28 <__assert_fail@plt+0x29ec>
   139ec:	cmn	r4, #1
   139f0:	beq	13a38 <__assert_fail@plt+0x29fc>
   139f4:	mov	r1, #-2147483648	; 0x80000000
   139f8:	mvn	r7, #-2147483648	; 0x80000000
   139fc:	sdiv	r1, r1, r4
   13a00:	cmp	r1, r5
   13a04:	bge	13a38 <__assert_fail@plt+0x29fc>
   13a08:	b	13a48 <__assert_fail@plt+0x2a0c>
   13a0c:	beq	13a38 <__assert_fail@plt+0x29fc>
   13a10:	mov	r1, #-2147483648	; 0x80000000
   13a14:	mvn	r7, #-2147483648	; 0x80000000
   13a18:	sdiv	r1, r1, r5
   13a1c:	cmp	r1, r4
   13a20:	bge	13a38 <__assert_fail@plt+0x29fc>
   13a24:	b	13a48 <__assert_fail@plt+0x2a0c>
   13a28:	mvn	r7, #-2147483648	; 0x80000000
   13a2c:	sdiv	r1, r7, r4
   13a30:	cmp	r5, r1
   13a34:	blt	13a48 <__assert_fail@plt+0x2a0c>
   13a38:	mul	r1, r5, r4
   13a3c:	mov	r7, #64	; 0x40
   13a40:	cmp	r1, #63	; 0x3f
   13a44:	bgt	13a50 <__assert_fail@plt+0x2a14>
   13a48:	sdiv	r5, r7, r4
   13a4c:	mul	r1, r5, r4
   13a50:	cmp	r0, #0
   13a54:	moveq	r7, #0
   13a58:	streq	r7, [r8]
   13a5c:	sub	r7, r5, r6
   13a60:	cmp	r7, r2
   13a64:	bge	13b08 <__assert_fail@plt+0x2acc>
   13a68:	add	r5, r6, r2
   13a6c:	mov	r2, #0
   13a70:	mov	r1, #0
   13a74:	cmp	r5, r3
   13a78:	movwgt	r2, #1
   13a7c:	cmn	r3, #1
   13a80:	movwgt	r1, #1
   13a84:	cmp	r5, r6
   13a88:	bvs	13af0 <__assert_fail@plt+0x2ab4>
   13a8c:	ands	r1, r1, r2
   13a90:	bne	13af0 <__assert_fail@plt+0x2ab4>
   13a94:	cmn	r4, #1
   13a98:	ble	13ab8 <__assert_fail@plt+0x2a7c>
   13a9c:	cmp	r4, #0
   13aa0:	beq	13b04 <__assert_fail@plt+0x2ac8>
   13aa4:	cmn	r5, #1
   13aa8:	ble	13adc <__assert_fail@plt+0x2aa0>
   13aac:	mvn	r1, #-2147483648	; 0x80000000
   13ab0:	udiv	r1, r1, r4
   13ab4:	b	13ad0 <__assert_fail@plt+0x2a94>
   13ab8:	cmn	r5, #1
   13abc:	ble	13af4 <__assert_fail@plt+0x2ab8>
   13ac0:	cmn	r4, #1
   13ac4:	beq	13b04 <__assert_fail@plt+0x2ac8>
   13ac8:	mov	r1, #-2147483648	; 0x80000000
   13acc:	sdiv	r1, r1, r4
   13ad0:	cmp	r1, r5
   13ad4:	bge	13b04 <__assert_fail@plt+0x2ac8>
   13ad8:	b	13af0 <__assert_fail@plt+0x2ab4>
   13adc:	beq	13b04 <__assert_fail@plt+0x2ac8>
   13ae0:	mov	r1, #-2147483648	; 0x80000000
   13ae4:	sdiv	r1, r1, r5
   13ae8:	cmp	r1, r4
   13aec:	bge	13b04 <__assert_fail@plt+0x2ac8>
   13af0:	bl	13c7c <__assert_fail@plt+0x2c40>
   13af4:	mvn	r1, #-2147483648	; 0x80000000
   13af8:	sdiv	r1, r1, r4
   13afc:	cmp	r5, r1
   13b00:	blt	13af0 <__assert_fail@plt+0x2ab4>
   13b04:	mul	r1, r5, r4
   13b08:	bl	13874 <__assert_fail@plt+0x2838>
   13b0c:	str	r5, [r8]
   13b10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b14:	push	{fp, lr}
   13b18:	mov	fp, sp
   13b1c:	mov	r1, #1
   13b20:	bl	14478 <__assert_fail@plt+0x343c>
   13b24:	cmp	r0, #0
   13b28:	popne	{fp, pc}
   13b2c:	bl	13c7c <__assert_fail@plt+0x2c40>
   13b30:	push	{fp, lr}
   13b34:	mov	fp, sp
   13b38:	bl	14478 <__assert_fail@plt+0x343c>
   13b3c:	cmp	r0, #0
   13b40:	popne	{fp, pc}
   13b44:	bl	13c7c <__assert_fail@plt+0x2c40>
   13b48:	push	{fp, lr}
   13b4c:	mov	fp, sp
   13b50:	mov	r1, #1
   13b54:	bl	14478 <__assert_fail@plt+0x343c>
   13b58:	cmp	r0, #0
   13b5c:	popne	{fp, pc}
   13b60:	bl	13c7c <__assert_fail@plt+0x2c40>
   13b64:	push	{fp, lr}
   13b68:	mov	fp, sp
   13b6c:	bl	14478 <__assert_fail@plt+0x343c>
   13b70:	cmp	r0, #0
   13b74:	popne	{fp, pc}
   13b78:	bl	13c7c <__assert_fail@plt+0x2c40>
   13b7c:	push	{r4, r5, r6, sl, fp, lr}
   13b80:	add	fp, sp, #16
   13b84:	mov	r5, r0
   13b88:	mov	r0, r1
   13b8c:	mov	r4, r1
   13b90:	bl	144cc <__assert_fail@plt+0x3490>
   13b94:	cmp	r0, #0
   13b98:	beq	13bb4 <__assert_fail@plt+0x2b78>
   13b9c:	mov	r1, r5
   13ba0:	mov	r2, r4
   13ba4:	mov	r6, r0
   13ba8:	bl	10e38 <memcpy@plt>
   13bac:	mov	r0, r6
   13bb0:	pop	{r4, r5, r6, sl, fp, pc}
   13bb4:	bl	13c7c <__assert_fail@plt+0x2c40>
   13bb8:	push	{r4, r5, r6, sl, fp, lr}
   13bbc:	add	fp, sp, #16
   13bc0:	mov	r5, r0
   13bc4:	mov	r0, r1
   13bc8:	mov	r4, r1
   13bcc:	bl	144cc <__assert_fail@plt+0x3490>
   13bd0:	cmp	r0, #0
   13bd4:	beq	13bf0 <__assert_fail@plt+0x2bb4>
   13bd8:	mov	r1, r5
   13bdc:	mov	r2, r4
   13be0:	mov	r6, r0
   13be4:	bl	10e38 <memcpy@plt>
   13be8:	mov	r0, r6
   13bec:	pop	{r4, r5, r6, sl, fp, pc}
   13bf0:	bl	13c7c <__assert_fail@plt+0x2c40>
   13bf4:	push	{r4, r5, r6, sl, fp, lr}
   13bf8:	add	fp, sp, #16
   13bfc:	mov	r5, r0
   13c00:	add	r0, r1, #1
   13c04:	mov	r4, r1
   13c08:	bl	144cc <__assert_fail@plt+0x3490>
   13c0c:	cmp	r0, #0
   13c10:	beq	13c38 <__assert_fail@plt+0x2bfc>
   13c14:	mov	r6, r0
   13c18:	mov	r0, #0
   13c1c:	mov	r1, r5
   13c20:	mov	r2, r4
   13c24:	strb	r0, [r6, r4]
   13c28:	mov	r0, r6
   13c2c:	bl	10e38 <memcpy@plt>
   13c30:	mov	r0, r6
   13c34:	pop	{r4, r5, r6, sl, fp, pc}
   13c38:	bl	13c7c <__assert_fail@plt+0x2c40>
   13c3c:	push	{r4, r5, r6, sl, fp, lr}
   13c40:	add	fp, sp, #16
   13c44:	mov	r4, r0
   13c48:	bl	10f58 <strlen@plt>
   13c4c:	add	r5, r0, #1
   13c50:	mov	r0, r5
   13c54:	bl	144cc <__assert_fail@plt+0x3490>
   13c58:	cmp	r0, #0
   13c5c:	beq	13c78 <__assert_fail@plt+0x2c3c>
   13c60:	mov	r1, r4
   13c64:	mov	r2, r5
   13c68:	mov	r6, r0
   13c6c:	bl	10e38 <memcpy@plt>
   13c70:	mov	r0, r6
   13c74:	pop	{r4, r5, r6, sl, fp, pc}
   13c78:	bl	13c7c <__assert_fail@plt+0x2c40>
   13c7c:	push	{fp, lr}
   13c80:	mov	fp, sp
   13c84:	movw	r0, #24812	; 0x60ec
   13c88:	movw	r1, #21372	; 0x537c
   13c8c:	mov	r2, #5
   13c90:	movt	r0, #2
   13c94:	movt	r1, #1
   13c98:	ldr	r4, [r0]
   13c9c:	mov	r0, #0
   13ca0:	bl	10e68 <dcgettext@plt>
   13ca4:	movw	r2, #20303	; 0x4f4f
   13ca8:	mov	r3, r0
   13cac:	mov	r0, r4
   13cb0:	mov	r1, #0
   13cb4:	movt	r2, #1
   13cb8:	bl	10ee0 <error@plt>
   13cbc:	bl	11030 <abort@plt>
   13cc0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13cc4:	add	fp, sp, #24
   13cc8:	sub	sp, sp, #16
   13ccc:	mov	r8, r0
   13cd0:	ldr	r0, [fp, #16]
   13cd4:	mov	r5, r3
   13cd8:	mov	r6, r2
   13cdc:	mov	r2, r1
   13ce0:	add	r3, sp, #8
   13ce4:	mov	r1, #0
   13ce8:	str	r0, [sp]
   13cec:	mov	r0, r8
   13cf0:	bl	13dc0 <__assert_fail@plt+0x2d84>
   13cf4:	cmp	r0, #0
   13cf8:	bne	13d8c <__assert_fail@plt+0x2d50>
   13cfc:	ldr	r4, [sp, #8]
   13d00:	ldr	r7, [sp, #12]
   13d04:	subs	r0, r4, r6
   13d08:	sbcs	r0, r7, r5
   13d0c:	bcc	13d30 <__assert_fail@plt+0x2cf4>
   13d10:	ldr	r1, [fp, #8]
   13d14:	ldr	r0, [fp, #12]
   13d18:	subs	r1, r1, r4
   13d1c:	sbcs	r0, r0, r7
   13d20:	movcs	r0, r4
   13d24:	movcs	r1, r7
   13d28:	subcs	sp, fp, #24
   13d2c:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   13d30:	bl	10f70 <__errno_location@plt>
   13d34:	subs	r1, r4, #1073741824	; 0x40000000
   13d38:	sbcs	r1, r7, #0
   13d3c:	bcc	13d48 <__assert_fail@plt+0x2d0c>
   13d40:	mov	r1, #75	; 0x4b
   13d44:	b	13d4c <__assert_fail@plt+0x2d10>
   13d48:	mov	r1, #34	; 0x22
   13d4c:	str	r1, [r0]
   13d50:	ldr	r6, [r0]
   13d54:	ldr	r4, [fp, #24]
   13d58:	ldr	r5, [fp, #20]
   13d5c:	mov	r0, r8
   13d60:	bl	13238 <__assert_fail@plt+0x21fc>
   13d64:	subs	r1, r6, #22
   13d68:	movw	r2, #20299	; 0x4f4b
   13d6c:	str	r0, [sp]
   13d70:	mov	r3, r5
   13d74:	movne	r1, r6
   13d78:	cmp	r4, #0
   13d7c:	movt	r2, #1
   13d80:	movweq	r4, #1
   13d84:	mov	r0, r4
   13d88:	bl	10ee0 <error@plt>
   13d8c:	cmp	r0, #1
   13d90:	beq	13da8 <__assert_fail@plt+0x2d6c>
   13d94:	cmp	r0, #3
   13d98:	bne	13db0 <__assert_fail@plt+0x2d74>
   13d9c:	bl	10f70 <__errno_location@plt>
   13da0:	mov	r1, #0
   13da4:	b	13d4c <__assert_fail@plt+0x2d10>
   13da8:	bl	10f70 <__errno_location@plt>
   13dac:	b	13d40 <__assert_fail@plt+0x2d04>
   13db0:	bl	10f70 <__errno_location@plt>
   13db4:	b	13d50 <__assert_fail@plt+0x2d14>
   13db8:	mov	r1, #10
   13dbc:	b	13cc0 <__assert_fail@plt+0x2c84>
   13dc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dc4:	add	fp, sp, #28
   13dc8:	sub	sp, sp, #20
   13dcc:	cmp	r2, #37	; 0x25
   13dd0:	bcs	14458 <__assert_fail@plt+0x341c>
   13dd4:	mov	r8, r3
   13dd8:	mov	r5, r2
   13ddc:	mov	r6, r1
   13de0:	mov	r4, r0
   13de4:	bl	10f70 <__errno_location@plt>
   13de8:	mov	r7, r0
   13dec:	mov	r0, #0
   13df0:	str	r0, [r7]
   13df4:	bl	10f34 <__ctype_b_loc@plt>
   13df8:	ldr	r1, [r0]
   13dfc:	mov	r2, r4
   13e00:	ldrb	r0, [r2], #1
   13e04:	add	r3, r1, r0, lsl #1
   13e08:	ldrb	r3, [r3, #1]
   13e0c:	tst	r3, #32
   13e10:	bne	13e00 <__assert_fail@plt+0x2dc4>
   13e14:	add	sl, sp, #16
   13e18:	cmp	r6, #0
   13e1c:	movne	sl, r6
   13e20:	mov	r6, #4
   13e24:	cmp	r0, #45	; 0x2d
   13e28:	beq	1444c <__assert_fail@plt+0x3410>
   13e2c:	mov	r0, r4
   13e30:	mov	r1, sl
   13e34:	mov	r2, r5
   13e38:	str	r8, [sp, #12]
   13e3c:	bl	10fac <strtoumax@plt>
   13e40:	ldr	r5, [sl]
   13e44:	cmp	r5, r4
   13e48:	beq	13e70 <__assert_fail@plt+0x2e34>
   13e4c:	mov	r8, r0
   13e50:	ldr	r0, [r7]
   13e54:	mov	r9, r1
   13e58:	cmp	r0, #0
   13e5c:	beq	13ea0 <__assert_fail@plt+0x2e64>
   13e60:	cmp	r0, #34	; 0x22
   13e64:	bne	1444c <__assert_fail@plt+0x3410>
   13e68:	mov	r6, #1
   13e6c:	b	13ea4 <__assert_fail@plt+0x2e68>
   13e70:	ldr	r0, [fp, #8]
   13e74:	cmp	r0, #0
   13e78:	ldrbne	r1, [r4]
   13e7c:	cmpne	r1, #0
   13e80:	beq	1444c <__assert_fail@plt+0x3410>
   13e84:	bl	10f64 <strchr@plt>
   13e88:	cmp	r0, #0
   13e8c:	beq	1444c <__assert_fail@plt+0x3410>
   13e90:	mov	r6, #0
   13e94:	mov	r8, #1
   13e98:	mov	r9, #0
   13e9c:	b	13eb0 <__assert_fail@plt+0x2e74>
   13ea0:	mov	r6, r0
   13ea4:	ldr	r0, [fp, #8]
   13ea8:	cmp	r0, #0
   13eac:	beq	14444 <__assert_fail@plt+0x3408>
   13eb0:	ldrb	r7, [r5]
   13eb4:	cmp	r7, #0
   13eb8:	beq	14444 <__assert_fail@plt+0x3408>
   13ebc:	ldr	r0, [fp, #8]
   13ec0:	mov	r1, r7
   13ec4:	bl	10f64 <strchr@plt>
   13ec8:	cmp	r0, #0
   13ecc:	beq	13fd4 <__assert_fail@plt+0x2f98>
   13ed0:	sub	r0, r7, #69	; 0x45
   13ed4:	mov	r1, #1
   13ed8:	mov	r3, #0
   13edc:	mov	r4, #1024	; 0x400
   13ee0:	cmp	r0, #21
   13ee4:	str	r1, [sp, #8]
   13ee8:	bhi	13f00 <__assert_fail@plt+0x2ec4>
   13eec:	movw	r2, #35141	; 0x8945
   13ef0:	mov	r1, #1
   13ef4:	movt	r2, #48	; 0x30
   13ef8:	tst	r2, r1, lsl r0
   13efc:	bne	13f1c <__assert_fail@plt+0x2ee0>
   13f00:	sub	r0, r7, #103	; 0x67
   13f04:	cmp	r0, #13
   13f08:	bhi	13f50 <__assert_fail@plt+0x2f14>
   13f0c:	mov	r1, #1
   13f10:	movw	r2, #8273	; 0x2051
   13f14:	tst	r2, r1, lsl r0
   13f18:	beq	13f50 <__assert_fail@plt+0x2f14>
   13f1c:	ldr	r0, [fp, #8]
   13f20:	mov	r1, #48	; 0x30
   13f24:	bl	10f64 <strchr@plt>
   13f28:	cmp	r0, #0
   13f2c:	beq	13f4c <__assert_fail@plt+0x2f10>
   13f30:	ldrb	r0, [r5, #1]
   13f34:	cmp	r0, #66	; 0x42
   13f38:	cmpne	r0, #68	; 0x44
   13f3c:	bne	14064 <__assert_fail@plt+0x3028>
   13f40:	mov	r4, #1000	; 0x3e8
   13f44:	mov	r0, #2
   13f48:	str	r0, [sp, #8]
   13f4c:	mov	r3, #0
   13f50:	cmp	r7, #89	; 0x59
   13f54:	stm	sp, {r5, r6}
   13f58:	bgt	13fe0 <__assert_fail@plt+0x2fa4>
   13f5c:	sub	r0, r7, #66	; 0x42
   13f60:	cmp	r0, #14
   13f64:	bhi	14088 <__assert_fail@plt+0x304c>
   13f68:	add	r1, pc, #0
   13f6c:	ldr	pc, [r1, r0, lsl #2]
   13f70:	andeq	r3, r1, ip, lsr #31
   13f74:	andeq	r4, r1, r8, lsr r3
   13f78:	andeq	r4, r1, r8, lsr r3
   13f7c:	andeq	r4, r1, ip, asr #6
   13f80:	andeq	r4, r1, r8, lsr r3
   13f84:	andeq	r4, r1, ip, lsr r1
   13f88:	andeq	r4, r1, r8, lsr r3
   13f8c:	andeq	r4, r1, r8, lsr r3
   13f90:	andeq	r4, r1, r8, lsr r3
   13f94:	andeq	r4, r1, r8, lsr #3
   13f98:	andeq	r4, r1, r8, lsr r3
   13f9c:	andeq	r4, r1, ip, ror #3
   13fa0:	andeq	r4, r1, r8, lsr r3
   13fa4:	andeq	r4, r1, r8, lsr r3
   13fa8:			; <UNDEFINED> instruction: 0x000143b8
   13fac:	mov	r1, #0
   13fb0:	lsl	r3, r9, #10
   13fb4:	lsl	r0, r8, #10
   13fb8:	lsr	r2, r9, #22
   13fbc:	cmp	r1, r9, lsr #22
   13fc0:	orr	r3, r3, r8, lsr #22
   13fc4:	mvnne	r0, #0
   13fc8:	movwne	r2, #1
   13fcc:	cmp	r1, r9, lsr #22
   13fd0:	b	14054 <__assert_fail@plt+0x3018>
   13fd4:	ldr	r0, [sp, #12]
   13fd8:	orr	r6, r6, #2
   13fdc:	b	14448 <__assert_fail@plt+0x340c>
   13fe0:	cmp	r7, #115	; 0x73
   13fe4:	bgt	14104 <__assert_fail@plt+0x30c8>
   13fe8:	sub	r0, r7, #98	; 0x62
   13fec:	cmp	r0, #11
   13ff0:	bhi	142c4 <__assert_fail@plt+0x3288>
   13ff4:	add	r1, pc, #4
   13ff8:	mov	r2, #0
   13ffc:	ldr	pc, [r1, r0, lsl #2]
   14000:	andeq	r4, r1, r0, lsr r0
   14004:	andeq	r4, r1, r0, lsr #8
   14008:	andeq	r4, r1, r8, lsr r3
   1400c:	andeq	r4, r1, r8, lsr r3
   14010:	andeq	r4, r1, r8, lsr r3
   14014:	andeq	r4, r1, ip, lsr r1
   14018:	andeq	r4, r1, r8, lsr r3
   1401c:	andeq	r4, r1, r8, lsr r3
   14020:	andeq	r4, r1, r8, lsr r3
   14024:	andeq	r4, r1, r8, lsr #3
   14028:	andeq	r4, r1, r8, lsr r3
   1402c:	andeq	r4, r1, ip, ror #3
   14030:	mov	r1, #0
   14034:	lsl	r3, r9, #9
   14038:	lsl	r0, r8, #9
   1403c:	lsr	r2, r9, #23
   14040:	cmp	r1, r9, lsr #23
   14044:	orr	r3, r3, r8, lsr #23
   14048:	mvnne	r0, #0
   1404c:	movwne	r2, #1
   14050:	cmp	r1, r9, lsr #23
   14054:	mvnne	r3, #0
   14058:	mov	r8, r0
   1405c:	mov	r9, r3
   14060:	b	14420 <__assert_fail@plt+0x33e4>
   14064:	cmp	r0, #105	; 0x69
   14068:	mov	r3, #0
   1406c:	bne	13f50 <__assert_fail@plt+0x2f14>
   14070:	ldrb	r0, [r5, #2]
   14074:	mov	r1, #1
   14078:	cmp	r0, #66	; 0x42
   1407c:	movweq	r1, #3
   14080:	str	r1, [sp, #8]
   14084:	b	13f50 <__assert_fail@plt+0x2f14>
   14088:	cmp	r7, #84	; 0x54
   1408c:	beq	14258 <__assert_fail@plt+0x321c>
   14090:	cmp	r7, #89	; 0x59
   14094:	bne	14338 <__assert_fail@plt+0x32fc>
   14098:	mvn	r0, #0
   1409c:	mvn	r1, #0
   140a0:	mov	r2, r4
   140a4:	mov	r5, r3
   140a8:	bl	1495c <__assert_fail@plt+0x3920>
   140ac:	mov	ip, r5
   140b0:	mvn	lr, #0
   140b4:	mov	r2, #0
   140b8:	mvn	r3, #7
   140bc:	mov	r5, r8
   140c0:	mov	r7, r9
   140c4:	umull	r8, r6, r5, r4
   140c8:	mvn	r9, #0
   140cc:	mla	r6, r5, ip, r6
   140d0:	subs	r5, r0, r5
   140d4:	sbcs	r5, r1, r7
   140d8:	mov	r5, #0
   140dc:	movwcc	r5, #1
   140e0:	cmp	r5, #0
   140e4:	mlaeq	r9, r7, r4, r6
   140e8:	movne	r8, lr
   140ec:	orrne	r2, r2, #1
   140f0:	adds	r3, r3, #1
   140f4:	mov	r5, r8
   140f8:	mov	r7, r9
   140fc:	bne	140c4 <__assert_fail@plt+0x3088>
   14100:	b	14420 <__assert_fail@plt+0x33e4>
   14104:	cmp	r7, #116	; 0x74
   14108:	beq	14258 <__assert_fail@plt+0x321c>
   1410c:	cmp	r7, #119	; 0x77
   14110:	bne	14338 <__assert_fail@plt+0x32fc>
   14114:	lsl	r1, r9, #1
   14118:	lsl	r0, r8, #1
   1411c:	cmp	r9, #0
   14120:	lsr	r2, r9, #31
   14124:	orr	r1, r1, r8, lsr #31
   14128:	mvnlt	r0, #0
   1412c:	mvnlt	r1, #0
   14130:	mov	r8, r0
   14134:	mov	r9, r1
   14138:	b	14420 <__assert_fail@plt+0x33e4>
   1413c:	mvn	r0, #0
   14140:	mvn	r1, #0
   14144:	mov	r2, r4
   14148:	mov	r5, r3
   1414c:	bl	1495c <__assert_fail@plt+0x3920>
   14150:	mov	ip, r5
   14154:	mvn	lr, #0
   14158:	mov	r2, #0
   1415c:	mvn	r3, #2
   14160:	mov	r6, r8
   14164:	mov	r5, r9
   14168:	umull	r8, r7, r6, r4
   1416c:	mvn	r9, #0
   14170:	mla	r7, r6, ip, r7
   14174:	subs	r6, r0, r6
   14178:	sbcs	r6, r1, r5
   1417c:	mov	r6, #0
   14180:	movwcc	r6, #1
   14184:	cmp	r6, #0
   14188:	mlaeq	r9, r5, r4, r7
   1418c:	movne	r8, lr
   14190:	orrne	r2, r2, #1
   14194:	adds	r3, r3, #1
   14198:	mov	r6, r8
   1419c:	mov	r5, r9
   141a0:	bne	14168 <__assert_fail@plt+0x312c>
   141a4:	b	14420 <__assert_fail@plt+0x33e4>
   141a8:	mvn	r0, #0
   141ac:	mvn	r1, #0
   141b0:	mov	r2, r4
   141b4:	mov	r5, r3
   141b8:	bl	1495c <__assert_fail@plt+0x3920>
   141bc:	subs	r0, r0, r8
   141c0:	mov	r2, #0
   141c4:	sbcs	r0, r1, r9
   141c8:	movwcc	r2, #1
   141cc:	umull	r0, r1, r8, r4
   141d0:	mla	r1, r8, r5, r1
   141d4:	cmp	r2, #0
   141d8:	mla	r9, r9, r4, r1
   141dc:	mvnne	r0, #0
   141e0:	mvnne	r9, #0
   141e4:	mov	r8, r0
   141e8:	b	14420 <__assert_fail@plt+0x33e4>
   141ec:	mvn	r0, #0
   141f0:	mvn	r1, #0
   141f4:	mov	r2, r4
   141f8:	mov	r5, r3
   141fc:	bl	1495c <__assert_fail@plt+0x3920>
   14200:	mov	ip, r5
   14204:	mvn	lr, #0
   14208:	mov	r2, #0
   1420c:	mvn	r3, #1
   14210:	mov	r6, r8
   14214:	mov	r5, r9
   14218:	umull	r8, r7, r6, r4
   1421c:	mvn	r9, #0
   14220:	mla	r7, r6, ip, r7
   14224:	subs	r6, r0, r6
   14228:	sbcs	r6, r1, r5
   1422c:	mov	r6, #0
   14230:	movwcc	r6, #1
   14234:	cmp	r6, #0
   14238:	mlaeq	r9, r5, r4, r7
   1423c:	movne	r8, lr
   14240:	orrne	r2, r2, #1
   14244:	adds	r3, r3, #1
   14248:	mov	r6, r8
   1424c:	mov	r5, r9
   14250:	bne	14218 <__assert_fail@plt+0x31dc>
   14254:	b	14420 <__assert_fail@plt+0x33e4>
   14258:	mvn	r0, #0
   1425c:	mvn	r1, #0
   14260:	mov	r2, r4
   14264:	mov	r5, r3
   14268:	bl	1495c <__assert_fail@plt+0x3920>
   1426c:	mov	ip, r5
   14270:	mvn	lr, #0
   14274:	mov	r2, #0
   14278:	mvn	r3, #3
   1427c:	mov	r6, r8
   14280:	mov	r5, r9
   14284:	umull	r8, r7, r6, r4
   14288:	mvn	r9, #0
   1428c:	mla	r7, r6, ip, r7
   14290:	subs	r6, r0, r6
   14294:	sbcs	r6, r1, r5
   14298:	mov	r6, #0
   1429c:	movwcc	r6, #1
   142a0:	cmp	r6, #0
   142a4:	mlaeq	r9, r5, r4, r7
   142a8:	movne	r8, lr
   142ac:	orrne	r2, r2, #1
   142b0:	adds	r3, r3, #1
   142b4:	mov	r6, r8
   142b8:	mov	r5, r9
   142bc:	bne	14284 <__assert_fail@plt+0x3248>
   142c0:	b	14420 <__assert_fail@plt+0x33e4>
   142c4:	cmp	r7, #90	; 0x5a
   142c8:	bne	14338 <__assert_fail@plt+0x32fc>
   142cc:	mvn	r0, #0
   142d0:	mvn	r1, #0
   142d4:	mov	r2, r4
   142d8:	mov	r5, r3
   142dc:	bl	1495c <__assert_fail@plt+0x3920>
   142e0:	mov	ip, r5
   142e4:	mvn	lr, #0
   142e8:	mov	r2, #0
   142ec:	mvn	r3, #6
   142f0:	mov	r5, r8
   142f4:	mov	r7, r9
   142f8:	umull	r8, r6, r5, r4
   142fc:	mvn	r9, #0
   14300:	mla	r6, r5, ip, r6
   14304:	subs	r5, r0, r5
   14308:	sbcs	r5, r1, r7
   1430c:	mov	r5, #0
   14310:	movwcc	r5, #1
   14314:	cmp	r5, #0
   14318:	mlaeq	r9, r7, r4, r6
   1431c:	movne	r8, lr
   14320:	orrne	r2, r2, #1
   14324:	adds	r3, r3, #1
   14328:	mov	r5, r8
   1432c:	mov	r7, r9
   14330:	bne	142f8 <__assert_fail@plt+0x32bc>
   14334:	b	14420 <__assert_fail@plt+0x33e4>
   14338:	ldr	r0, [sp, #12]
   1433c:	strd	r8, [r0]
   14340:	ldr	r6, [sp, #4]
   14344:	orr	r6, r6, #2
   14348:	b	1444c <__assert_fail@plt+0x3410>
   1434c:	mvn	r0, #0
   14350:	mvn	r1, #0
   14354:	mov	r2, r4
   14358:	mov	r5, r3
   1435c:	bl	1495c <__assert_fail@plt+0x3920>
   14360:	mov	ip, r5
   14364:	mvn	lr, #0
   14368:	mov	r2, #0
   1436c:	mvn	r3, #5
   14370:	mov	r5, r8
   14374:	mov	r7, r9
   14378:	umull	r8, r6, r5, r4
   1437c:	mvn	r9, #0
   14380:	mla	r6, r5, ip, r6
   14384:	subs	r5, r0, r5
   14388:	sbcs	r5, r1, r7
   1438c:	mov	r5, #0
   14390:	movwcc	r5, #1
   14394:	cmp	r5, #0
   14398:	mlaeq	r9, r7, r4, r6
   1439c:	movne	r8, lr
   143a0:	orrne	r2, r2, #1
   143a4:	adds	r3, r3, #1
   143a8:	mov	r5, r8
   143ac:	mov	r7, r9
   143b0:	bne	14378 <__assert_fail@plt+0x333c>
   143b4:	b	14420 <__assert_fail@plt+0x33e4>
   143b8:	mvn	r0, #0
   143bc:	mvn	r1, #0
   143c0:	mov	r2, r4
   143c4:	mov	r5, r3
   143c8:	bl	1495c <__assert_fail@plt+0x3920>
   143cc:	mov	ip, r5
   143d0:	mvn	lr, #0
   143d4:	mov	r2, #0
   143d8:	mvn	r3, #4
   143dc:	mov	r5, r8
   143e0:	mov	r7, r9
   143e4:	umull	r8, r6, r5, r4
   143e8:	mvn	r9, #0
   143ec:	mla	r6, r5, ip, r6
   143f0:	subs	r5, r0, r5
   143f4:	sbcs	r5, r1, r7
   143f8:	mov	r5, #0
   143fc:	movwcc	r5, #1
   14400:	cmp	r5, #0
   14404:	mlaeq	r9, r7, r4, r6
   14408:	movne	r8, lr
   1440c:	orrne	r2, r2, #1
   14410:	adds	r3, r3, #1
   14414:	mov	r5, r8
   14418:	mov	r7, r9
   1441c:	bne	143e4 <__assert_fail@plt+0x33a8>
   14420:	ldr	r1, [sp]
   14424:	ldr	r3, [sp, #8]
   14428:	ldr	r6, [sp, #4]
   1442c:	add	r0, r1, r3
   14430:	orr	r6, r2, r6
   14434:	str	r0, [sl]
   14438:	ldrb	r0, [r1, r3]
   1443c:	cmp	r0, #0
   14440:	orrne	r6, r6, #2
   14444:	ldr	r0, [sp, #12]
   14448:	strd	r8, [r0]
   1444c:	mov	r0, r6
   14450:	sub	sp, fp, #28
   14454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14458:	movw	r0, #21389	; 0x538d
   1445c:	movw	r1, #21427	; 0x53b3
   14460:	movw	r3, #21443	; 0x53c3
   14464:	mov	r2, #85	; 0x55
   14468:	movt	r0, #1
   1446c:	movt	r1, #1
   14470:	movt	r3, #1
   14474:	bl	1103c <__assert_fail@plt>
   14478:	clz	r2, r1
   1447c:	clz	r3, r0
   14480:	lsr	r2, r2, #5
   14484:	lsr	r3, r3, #5
   14488:	orrs	r2, r3, r2
   1448c:	movwne	r1, #1
   14490:	movwne	r0, #1
   14494:	cmp	r1, #0
   14498:	beq	144c8 <__assert_fail@plt+0x348c>
   1449c:	mvn	r2, #-2147483648	; 0x80000000
   144a0:	udiv	r2, r2, r1
   144a4:	cmp	r2, r0
   144a8:	bcs	144c8 <__assert_fail@plt+0x348c>
   144ac:	push	{fp, lr}
   144b0:	mov	fp, sp
   144b4:	bl	10f70 <__errno_location@plt>
   144b8:	mov	r1, #12
   144bc:	str	r1, [r0]
   144c0:	mov	r0, #0
   144c4:	pop	{fp, pc}
   144c8:	b	10de4 <calloc@plt>
   144cc:	cmp	r0, #0
   144d0:	movweq	r0, #1
   144d4:	cmn	r0, #1
   144d8:	ble	144e0 <__assert_fail@plt+0x34a4>
   144dc:	b	10ef8 <malloc@plt>
   144e0:	push	{fp, lr}
   144e4:	mov	fp, sp
   144e8:	bl	10f70 <__errno_location@plt>
   144ec:	mov	r1, #12
   144f0:	str	r1, [r0]
   144f4:	mov	r0, #0
   144f8:	pop	{fp, pc}
   144fc:	push	{fp, lr}
   14500:	mov	fp, sp
   14504:	cmp	r0, #0
   14508:	beq	14524 <__assert_fail@plt+0x34e8>
   1450c:	cmp	r1, #0
   14510:	beq	14530 <__assert_fail@plt+0x34f4>
   14514:	cmn	r1, #1
   14518:	ble	14538 <__assert_fail@plt+0x34fc>
   1451c:	pop	{fp, lr}
   14520:	b	10e80 <realloc@plt>
   14524:	mov	r0, r1
   14528:	pop	{fp, lr}
   1452c:	b	144cc <__assert_fail@plt+0x3490>
   14530:	bl	146c4 <__assert_fail@plt+0x3688>
   14534:	b	14544 <__assert_fail@plt+0x3508>
   14538:	bl	10f70 <__errno_location@plt>
   1453c:	mov	r1, #12
   14540:	str	r1, [r0]
   14544:	mov	r0, #0
   14548:	pop	{fp, pc}
   1454c:	push	{r4, r5, r6, sl, fp, lr}
   14550:	add	fp, sp, #16
   14554:	mov	r4, r0
   14558:	bl	10ebc <__fpending@plt>
   1455c:	mov	r5, r0
   14560:	mov	r0, r4
   14564:	bl	10ec8 <ferror_unlocked@plt>
   14568:	mov	r6, r0
   1456c:	mov	r0, r4
   14570:	bl	145cc <__assert_fail@plt+0x3590>
   14574:	cmp	r6, #0
   14578:	beq	14598 <__assert_fail@plt+0x355c>
   1457c:	mvn	r4, #0
   14580:	cmp	r0, #0
   14584:	bne	145c4 <__assert_fail@plt+0x3588>
   14588:	bl	10f70 <__errno_location@plt>
   1458c:	mov	r1, #0
   14590:	str	r1, [r0]
   14594:	b	145c4 <__assert_fail@plt+0x3588>
   14598:	cmp	r0, #0
   1459c:	mov	r4, r0
   145a0:	mvnne	r4, #0
   145a4:	cmp	r5, #0
   145a8:	bne	145c4 <__assert_fail@plt+0x3588>
   145ac:	cmp	r0, #0
   145b0:	beq	145c4 <__assert_fail@plt+0x3588>
   145b4:	bl	10f70 <__errno_location@plt>
   145b8:	ldr	r0, [r0]
   145bc:	subs	r4, r0, #9
   145c0:	mvnne	r4, #0
   145c4:	mov	r0, r4
   145c8:	pop	{r4, r5, r6, sl, fp, pc}
   145cc:	push	{r4, r5, r6, sl, fp, lr}
   145d0:	add	fp, sp, #16
   145d4:	sub	sp, sp, #8
   145d8:	mov	r4, r0
   145dc:	bl	10fa0 <fileno@plt>
   145e0:	cmn	r0, #1
   145e4:	ble	14658 <__assert_fail@plt+0x361c>
   145e8:	mov	r0, r4
   145ec:	bl	10f10 <__freading@plt>
   145f0:	cmp	r0, #0
   145f4:	beq	14620 <__assert_fail@plt+0x35e4>
   145f8:	mov	r0, r4
   145fc:	bl	10fa0 <fileno@plt>
   14600:	mov	r1, #1
   14604:	mov	r2, #0
   14608:	mov	r3, #0
   1460c:	str	r1, [sp]
   14610:	bl	10ea4 <lseek64@plt>
   14614:	and	r0, r0, r1
   14618:	cmn	r0, #1
   1461c:	beq	14658 <__assert_fail@plt+0x361c>
   14620:	mov	r0, r4
   14624:	bl	14668 <__assert_fail@plt+0x362c>
   14628:	cmp	r0, #0
   1462c:	beq	14658 <__assert_fail@plt+0x361c>
   14630:	bl	10f70 <__errno_location@plt>
   14634:	ldr	r6, [r0]
   14638:	mov	r5, r0
   1463c:	mov	r0, r4
   14640:	bl	10fc4 <fclose@plt>
   14644:	cmp	r6, #0
   14648:	strne	r6, [r5]
   1464c:	mvnne	r0, #0
   14650:	sub	sp, fp, #16
   14654:	pop	{r4, r5, r6, sl, fp, pc}
   14658:	mov	r0, r4
   1465c:	sub	sp, fp, #16
   14660:	pop	{r4, r5, r6, sl, fp, lr}
   14664:	b	10fc4 <fclose@plt>
   14668:	push	{r4, sl, fp, lr}
   1466c:	add	fp, sp, #8
   14670:	sub	sp, sp, #8
   14674:	mov	r4, r0
   14678:	cmp	r0, #0
   1467c:	beq	14698 <__assert_fail@plt+0x365c>
   14680:	mov	r0, r4
   14684:	bl	10f10 <__freading@plt>
   14688:	cmp	r0, #0
   1468c:	ldrbne	r0, [r4, #1]
   14690:	tstne	r0, #1
   14694:	bne	146a8 <__assert_fail@plt+0x366c>
   14698:	mov	r0, r4
   1469c:	sub	sp, fp, #8
   146a0:	pop	{r4, sl, fp, lr}
   146a4:	b	10e14 <fflush@plt>
   146a8:	mov	r0, #1
   146ac:	mov	r2, #0
   146b0:	mov	r3, #0
   146b4:	str	r0, [sp]
   146b8:	mov	r0, r4
   146bc:	bl	146ec <__assert_fail@plt+0x36b0>
   146c0:	b	14698 <__assert_fail@plt+0x365c>
   146c4:	push	{r4, r5, r6, sl, fp, lr}
   146c8:	add	fp, sp, #16
   146cc:	mov	r4, r0
   146d0:	bl	10f70 <__errno_location@plt>
   146d4:	ldr	r6, [r0]
   146d8:	mov	r5, r0
   146dc:	mov	r0, r4
   146e0:	bl	10e20 <free@plt>
   146e4:	str	r6, [r5]
   146e8:	pop	{r4, r5, r6, sl, fp, pc}
   146ec:	push	{r4, r5, r6, r7, fp, lr}
   146f0:	add	fp, sp, #16
   146f4:	sub	sp, sp, #8
   146f8:	mov	r4, r0
   146fc:	ldr	r0, [r0, #4]
   14700:	mov	r5, r3
   14704:	mov	r6, r2
   14708:	ldr	r1, [r4, #8]
   1470c:	cmp	r1, r0
   14710:	bne	1472c <__assert_fail@plt+0x36f0>
   14714:	ldrd	r0, [r4, #16]
   14718:	cmp	r1, r0
   1471c:	bne	1472c <__assert_fail@plt+0x36f0>
   14720:	ldr	r0, [r4, #36]	; 0x24
   14724:	cmp	r0, #0
   14728:	beq	14744 <__assert_fail@plt+0x3708>
   1472c:	mov	r0, r4
   14730:	mov	r2, r6
   14734:	mov	r3, r5
   14738:	sub	sp, fp, #16
   1473c:	pop	{r4, r5, r6, r7, fp, lr}
   14740:	b	10fd0 <fseeko64@plt>
   14744:	ldr	r7, [fp, #8]
   14748:	mov	r0, r4
   1474c:	bl	10fa0 <fileno@plt>
   14750:	mov	r2, r6
   14754:	mov	r3, r5
   14758:	str	r7, [sp]
   1475c:	bl	10ea4 <lseek64@plt>
   14760:	and	r2, r0, r1
   14764:	cmn	r2, #1
   14768:	beq	14784 <__assert_fail@plt+0x3748>
   1476c:	strd	r0, [r4, #80]	; 0x50
   14770:	ldr	r0, [r4]
   14774:	bic	r0, r0, #16
   14778:	str	r0, [r4]
   1477c:	mov	r0, #0
   14780:	b	14788 <__assert_fail@plt+0x374c>
   14784:	mvn	r0, #0
   14788:	sub	sp, fp, #16
   1478c:	pop	{r4, r5, r6, r7, fp, pc}
   14790:	push	{fp, lr}
   14794:	mov	fp, sp
   14798:	mov	r0, #14
   1479c:	bl	10ff4 <nl_langinfo@plt>
   147a0:	movw	r1, #19481	; 0x4c19
   147a4:	cmp	r0, #0
   147a8:	movt	r1, #1
   147ac:	movne	r1, r0
   147b0:	movw	r0, #21522	; 0x5412
   147b4:	ldrb	r2, [r1]
   147b8:	movt	r0, #1
   147bc:	cmp	r2, #0
   147c0:	movne	r0, r1
   147c4:	pop	{fp, pc}
   147c8:	push	{r4, r5, r6, r7, fp, lr}
   147cc:	add	fp, sp, #16
   147d0:	sub	sp, sp, #8
   147d4:	add	r5, sp, #4
   147d8:	cmp	r0, #0
   147dc:	mov	r7, r2
   147e0:	mov	r4, r1
   147e4:	movne	r5, r0
   147e8:	mov	r0, r5
   147ec:	bl	10ed4 <mbrtowc@plt>
   147f0:	mov	r6, r0
   147f4:	cmp	r7, #0
   147f8:	beq	1481c <__assert_fail@plt+0x37e0>
   147fc:	cmn	r6, #2
   14800:	bcc	1481c <__assert_fail@plt+0x37e0>
   14804:	mov	r0, #0
   14808:	bl	14864 <__assert_fail@plt+0x3828>
   1480c:	cmp	r0, #0
   14810:	ldrbeq	r0, [r4]
   14814:	moveq	r6, #1
   14818:	streq	r0, [r5]
   1481c:	mov	r0, r6
   14820:	sub	sp, fp, #16
   14824:	pop	{r4, r5, r6, r7, fp, pc}
   14828:	cmp	r2, #0
   1482c:	beq	1485c <__assert_fail@plt+0x3820>
   14830:	mvn	r3, #0
   14834:	udiv	r3, r3, r2
   14838:	cmp	r3, r1
   1483c:	bcs	1485c <__assert_fail@plt+0x3820>
   14840:	push	{fp, lr}
   14844:	mov	fp, sp
   14848:	bl	10f70 <__errno_location@plt>
   1484c:	mov	r1, #12
   14850:	str	r1, [r0]
   14854:	mov	r0, #0
   14858:	pop	{fp, pc}
   1485c:	mul	r1, r2, r1
   14860:	b	144fc <__assert_fail@plt+0x34c0>
   14864:	push	{r4, sl, fp, lr}
   14868:	add	fp, sp, #8
   1486c:	sub	sp, sp, #264	; 0x108
   14870:	add	r1, sp, #7
   14874:	movw	r2, #257	; 0x101
   14878:	bl	148c8 <__assert_fail@plt+0x388c>
   1487c:	mov	r4, #0
   14880:	cmp	r0, #0
   14884:	bne	148bc <__assert_fail@plt+0x3880>
   14888:	movw	r1, #21528	; 0x5418
   1488c:	add	r0, sp, #7
   14890:	movt	r1, #1
   14894:	bl	10e08 <strcmp@plt>
   14898:	cmp	r0, #0
   1489c:	beq	148bc <__assert_fail@plt+0x3880>
   148a0:	movw	r1, #21530	; 0x541a
   148a4:	add	r0, sp, #7
   148a8:	movt	r1, #1
   148ac:	bl	10e08 <strcmp@plt>
   148b0:	mov	r4, r0
   148b4:	cmp	r0, #0
   148b8:	movwne	r4, #1
   148bc:	mov	r0, r4
   148c0:	sub	sp, fp, #8
   148c4:	pop	{r4, sl, fp, pc}
   148c8:	push	{r4, r5, r6, r7, fp, lr}
   148cc:	add	fp, sp, #16
   148d0:	mov	r4, r1
   148d4:	mov	r1, #0
   148d8:	mov	r6, r2
   148dc:	bl	10fdc <setlocale@plt>
   148e0:	cmp	r0, #0
   148e4:	beq	14910 <__assert_fail@plt+0x38d4>
   148e8:	mov	r7, r0
   148ec:	bl	10f58 <strlen@plt>
   148f0:	cmp	r0, r6
   148f4:	bcs	14924 <__assert_fail@plt+0x38e8>
   148f8:	add	r2, r0, #1
   148fc:	mov	r0, r4
   14900:	mov	r1, r7
   14904:	bl	10e38 <memcpy@plt>
   14908:	mov	r5, #0
   1490c:	b	1494c <__assert_fail@plt+0x3910>
   14910:	cmp	r6, #0
   14914:	mov	r5, #22
   14918:	movne	r0, #0
   1491c:	strbne	r0, [r4]
   14920:	b	1494c <__assert_fail@plt+0x3910>
   14924:	mov	r5, #34	; 0x22
   14928:	cmp	r6, #0
   1492c:	beq	1494c <__assert_fail@plt+0x3910>
   14930:	sub	r6, r6, #1
   14934:	mov	r0, r4
   14938:	mov	r1, r7
   1493c:	mov	r2, r6
   14940:	bl	10e38 <memcpy@plt>
   14944:	mov	r0, #0
   14948:	strb	r0, [r4, r6]
   1494c:	mov	r0, r5
   14950:	pop	{r4, r5, r6, r7, fp, pc}
   14954:	mov	r1, #0
   14958:	b	10fdc <setlocale@plt>
   1495c:	cmp	r3, #0
   14960:	cmpeq	r2, #0
   14964:	bne	1497c <__assert_fail@plt+0x3940>
   14968:	cmp	r1, #0
   1496c:	cmpeq	r0, #0
   14970:	mvnne	r1, #0
   14974:	mvnne	r0, #0
   14978:	b	14998 <__assert_fail@plt+0x395c>
   1497c:	sub	sp, sp, #8
   14980:	push	{sp, lr}
   14984:	bl	149a8 <__assert_fail@plt+0x396c>
   14988:	ldr	lr, [sp, #4]
   1498c:	add	sp, sp, #8
   14990:	pop	{r2, r3}
   14994:	bx	lr
   14998:	push	{r1, lr}
   1499c:	mov	r0, #8
   149a0:	bl	10dfc <raise@plt>
   149a4:	pop	{r1, pc}
   149a8:	cmp	r1, r3
   149ac:	cmpeq	r0, r2
   149b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149b4:	mov	r4, r0
   149b8:	movcc	r0, #0
   149bc:	mov	r5, r1
   149c0:	ldr	lr, [sp, #36]	; 0x24
   149c4:	movcc	r1, r0
   149c8:	bcc	14ac4 <__assert_fail@plt+0x3a88>
   149cc:	cmp	r3, #0
   149d0:	clzeq	ip, r2
   149d4:	clzne	ip, r3
   149d8:	addeq	ip, ip, #32
   149dc:	cmp	r5, #0
   149e0:	clzeq	r1, r4
   149e4:	addeq	r1, r1, #32
   149e8:	clzne	r1, r5
   149ec:	sub	ip, ip, r1
   149f0:	sub	sl, ip, #32
   149f4:	lsl	r9, r3, ip
   149f8:	rsb	fp, ip, #32
   149fc:	orr	r9, r9, r2, lsl sl
   14a00:	orr	r9, r9, r2, lsr fp
   14a04:	lsl	r8, r2, ip
   14a08:	cmp	r5, r9
   14a0c:	cmpeq	r4, r8
   14a10:	movcc	r0, #0
   14a14:	movcc	r1, r0
   14a18:	bcc	14a34 <__assert_fail@plt+0x39f8>
   14a1c:	mov	r0, #1
   14a20:	subs	r4, r4, r8
   14a24:	lsl	r1, r0, sl
   14a28:	orr	r1, r1, r0, lsr fp
   14a2c:	lsl	r0, r0, ip
   14a30:	sbc	r5, r5, r9
   14a34:	cmp	ip, #0
   14a38:	beq	14ac4 <__assert_fail@plt+0x3a88>
   14a3c:	lsr	r6, r8, #1
   14a40:	orr	r6, r6, r9, lsl #31
   14a44:	lsr	r7, r9, #1
   14a48:	mov	r2, ip
   14a4c:	b	14a70 <__assert_fail@plt+0x3a34>
   14a50:	subs	r3, r4, r6
   14a54:	sbc	r8, r5, r7
   14a58:	adds	r3, r3, r3
   14a5c:	adc	r8, r8, r8
   14a60:	adds	r4, r3, #1
   14a64:	adc	r5, r8, #0
   14a68:	subs	r2, r2, #1
   14a6c:	beq	14a8c <__assert_fail@plt+0x3a50>
   14a70:	cmp	r5, r7
   14a74:	cmpeq	r4, r6
   14a78:	bcs	14a50 <__assert_fail@plt+0x3a14>
   14a7c:	adds	r4, r4, r4
   14a80:	adc	r5, r5, r5
   14a84:	subs	r2, r2, #1
   14a88:	bne	14a70 <__assert_fail@plt+0x3a34>
   14a8c:	lsr	r3, r4, ip
   14a90:	orr	r3, r3, r5, lsl fp
   14a94:	lsr	r2, r5, ip
   14a98:	orr	r3, r3, r5, lsr sl
   14a9c:	adds	r0, r0, r4
   14aa0:	mov	r4, r3
   14aa4:	lsl	r3, r2, ip
   14aa8:	orr	r3, r3, r4, lsl sl
   14aac:	lsl	ip, r4, ip
   14ab0:	orr	r3, r3, r4, lsr fp
   14ab4:	adc	r1, r1, r5
   14ab8:	subs	r0, r0, ip
   14abc:	mov	r5, r2
   14ac0:	sbc	r1, r1, r3
   14ac4:	cmp	lr, #0
   14ac8:	strdne	r4, [lr]
   14acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ad0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14ad4:	mov	r7, r0
   14ad8:	ldr	r6, [pc, #72]	; 14b28 <__assert_fail@plt+0x3aec>
   14adc:	ldr	r5, [pc, #72]	; 14b2c <__assert_fail@plt+0x3af0>
   14ae0:	add	r6, pc, r6
   14ae4:	add	r5, pc, r5
   14ae8:	sub	r6, r6, r5
   14aec:	mov	r8, r1
   14af0:	mov	r9, r2
   14af4:	bl	10dc4 <calloc@plt-0x20>
   14af8:	asrs	r6, r6, #2
   14afc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b00:	mov	r4, #0
   14b04:	add	r4, r4, #1
   14b08:	ldr	r3, [r5], #4
   14b0c:	mov	r2, r9
   14b10:	mov	r1, r8
   14b14:	mov	r0, r7
   14b18:	blx	r3
   14b1c:	cmp	r6, r4
   14b20:	bne	14b04 <__assert_fail@plt+0x3ac8>
   14b24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b28:	andeq	r1, r1, r4, lsr #8
   14b2c:	andeq	r1, r1, ip, lsl r4
   14b30:	bx	lr
   14b34:	ldr	r3, [pc, #12]	; 14b48 <__assert_fail@plt+0x3b0c>
   14b38:	mov	r1, #0
   14b3c:	add	r3, pc, r3
   14b40:	ldr	r2, [r3]
   14b44:	b	10f7c <__cxa_atexit@plt>
   14b48:	andeq	r1, r1, r0, lsr #11

Disassembly of section .fini:

00014b4c <.fini>:
   14b4c:	push	{r3, lr}
   14b50:	pop	{r3, pc}
