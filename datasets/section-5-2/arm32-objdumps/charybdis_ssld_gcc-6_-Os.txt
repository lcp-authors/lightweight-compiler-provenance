
../repos/charybdis/ssld/.libs/ssld:     file format elf32-littlearm


Disassembly of section .init:

00010f4c <.init>:
   10f4c:	push	{r3, lr}
   10f50:	bl	11640 <fputs@plt+0x3b0>
   10f54:	pop	{r3, pc}

Disassembly of section .plt:

00010f58 <open@plt-0x14>:
   10f58:	push	{lr}		; (str lr, [sp, #-4]!)
   10f5c:	ldr	lr, [pc, #4]	; 10f68 <open@plt-0x4>
   10f60:	add	lr, pc, lr
   10f64:	ldr	pc, [lr, #8]!
   10f68:	muleq	r1, r8, r0

00010f6c <open@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #77824	; 0x13000
   10f74:	ldr	pc, [ip, #152]!	; 0x98

00010f78 <sigemptyset@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #77824	; 0x13000
   10f80:	ldr	pc, [ip, #144]!	; 0x90

00010f84 <strerror@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #77824	; 0x13000
   10f8c:	ldr	pc, [ip, #136]!	; 0x88

00010f90 <rb_get_type@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #77824	; 0x13000
   10f98:	ldr	pc, [ip, #128]!	; 0x80

00010f9c <zError@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #77824	; 0x13000
   10fa4:	ldr	pc, [ip, #120]!	; 0x78

00010fa8 <abort@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #77824	; 0x13000
   10fb0:	ldr	pc, [ip, #112]!	; 0x70

00010fb4 <rb_event_addish@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #77824	; 0x13000
   10fbc:	ldr	pc, [ip, #104]!	; 0x68

00010fc0 <rb_ignore_errno@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #77824	; 0x13000
   10fc8:	ldr	pc, [ip, #96]!	; 0x60

00010fcc <rb_lib_version@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #77824	; 0x13000
   10fd4:	ldr	pc, [ip, #88]!	; 0x58

00010fd8 <inflateEnd@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #77824	; 0x13000
   10fe0:	ldr	pc, [ip, #80]!	; 0x50

00010fe4 <__libc_start_main@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #77824	; 0x13000
   10fec:	ldr	pc, [ip, #72]!	; 0x48

00010ff0 <rb_setselect@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #77824	; 0x13000
   10ff8:	ldr	pc, [ip, #64]!	; 0x40

00010ffc <__gmon_start__@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #77824	; 0x13000
   11004:	ldr	pc, [ip, #56]!	; 0x38

00011008 <rb_ssl_handshake_count@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #77824	; 0x13000
   11010:	ldr	pc, [ip, #48]!	; 0x30

00011014 <rb_send_fd_buf@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #77824	; 0x13000
   1101c:	ldr	pc, [ip, #40]!	; 0x28

00011020 <vsnprintf@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #77824	; 0x13000
   11028:	ldr	pc, [ip, #32]!

0001102c <strncpy@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #77824	; 0x13000
   11034:	ldr	pc, [ip, #24]!

00011038 <getenv@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #77824	; 0x13000
   11040:	ldr	pc, [ip, #16]!

00011044 <deflate@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #77824	; 0x13000
   1104c:	ldr	pc, [ip, #8]!

00011050 <deflateInit_@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #77824	; 0x13000
   11058:	ldr	pc, [ip, #0]!

0001105c <calloc@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #73728	; 0x12000
   11064:	ldr	pc, [ip, #4088]!	; 0xff8

00011068 <rb_set_nb@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #73728	; 0x12000
   11070:	ldr	pc, [ip, #4080]!	; 0xff0

00011074 <memset@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #73728	; 0x12000
   1107c:	ldr	pc, [ip, #4072]!	; 0xfe8

00011080 <__assert_fail@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #73728	; 0x12000
   11088:	ldr	pc, [ip, #4064]!	; 0xfe0

0001108c <rb_strlcpy@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #73728	; 0x12000
   11094:	ldr	pc, [ip, #4056]!	; 0xfd8

00011098 <rb_get_ssl_certfp@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #73728	; 0x12000
   110a0:	ldr	pc, [ip, #4048]!	; 0xfd0

000110a4 <inflate@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #73728	; 0x12000
   110ac:	ldr	pc, [ip, #4040]!	; 0xfc8

000110b0 <rb_init_rawbuffers@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #73728	; 0x12000
   110b8:	ldr	pc, [ip, #4032]!	; 0xfc0

000110bc <free@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #73728	; 0x12000
   110c4:	ldr	pc, [ip, #4024]!	; 0xfb8

000110c8 <rb_lib_loop@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #73728	; 0x12000
   110d0:	ldr	pc, [ip, #4016]!	; 0xfb0

000110d4 <deflateEnd@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #73728	; 0x12000
   110dc:	ldr	pc, [ip, #4008]!	; 0xfa8

000110e0 <rb_read@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #73728	; 0x12000
   110e8:	ldr	pc, [ip, #4000]!	; 0xfa0

000110ec <rb_set_type@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #73728	; 0x12000
   110f4:	ldr	pc, [ip, #3992]!	; 0xf98

000110f8 <strlen@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #73728	; 0x12000
   11100:	ldr	pc, [ip, #3984]!	; 0xf90

00011104 <rb_ssl_get_cipher@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #73728	; 0x12000
   1110c:	ldr	pc, [ip, #3976]!	; 0xf88

00011110 <memcpy@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #73728	; 0x12000
   11118:	ldr	pc, [ip, #3968]!	; 0xf80

0001111c <rb_close@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #73728	; 0x12000
   11124:	ldr	pc, [ip, #3960]!	; 0xf78

00011128 <sigaddset@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #73728	; 0x12000
   11130:	ldr	pc, [ip, #3952]!	; 0xf70

00011134 <strcpy@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #73728	; 0x12000
   1113c:	ldr	pc, [ip, #3944]!	; 0xf68

00011140 <rb_ssl_clear_handshake_count@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #73728	; 0x12000
   11148:	ldr	pc, [ip, #3936]!	; 0xf60

0001114c <raise@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #73728	; 0x12000
   11154:	ldr	pc, [ip, #3928]!	; 0xf58

00011158 <atoi@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #73728	; 0x12000
   11160:	ldr	pc, [ip, #3920]!	; 0xf50

00011164 <rb_rawbuf_length@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #73728	; 0x12000
   1116c:	ldr	pc, [ip, #3912]!	; 0xf48

00011170 <rb_free_rawbuffer@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #73728	; 0x12000
   11178:	ldr	pc, [ip, #3904]!	; 0xf40

0001117c <rb_get_ssl_strerror@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #73728	; 0x12000
   11184:	ldr	pc, [ip, #3896]!	; 0xf38

00011188 <close@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #73728	; 0x12000
   11190:	ldr	pc, [ip, #3888]!	; 0xf30

00011194 <rb_init_prng@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #73728	; 0x12000
   1119c:	ldr	pc, [ip, #3880]!	; 0xf28

000111a0 <rb_outofmemory@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #73728	; 0x12000
   111a8:	ldr	pc, [ip, #3872]!	; 0xf20

000111ac <rb_supports_ssl@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #73728	; 0x12000
   111b4:	ldr	pc, [ip, #3864]!	; 0xf18

000111b8 <sigaction@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #73728	; 0x12000
   111c0:	ldr	pc, [ip, #3856]!	; 0xf10

000111c4 <rb_ssl_start_connected@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #73728	; 0x12000
   111cc:	ldr	pc, [ip, #3848]!	; 0xf08

000111d0 <rb_lib_init@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #73728	; 0x12000
   111d8:	ldr	pc, [ip, #3840]!	; 0xf00

000111dc <rb_new_rawbuffer@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #73728	; 0x12000
   111e4:	ldr	pc, [ip, #3832]!	; 0xef8

000111e8 <rb_open@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #73728	; 0x12000
   111f0:	ldr	pc, [ip, #3824]!	; 0xef0

000111f4 <inflateInit_@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #73728	; 0x12000
   111fc:	ldr	pc, [ip, #3816]!	; 0xee8

00011200 <rb_recv_fd_buf@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #73728	; 0x12000
   11208:	ldr	pc, [ip, #3808]!	; 0xee0

0001120c <rb_ssl_start_accepted@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #73728	; 0x12000
   11214:	ldr	pc, [ip, #3800]!	; 0xed8

00011218 <dup2@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #73728	; 0x12000
   11220:	ldr	pc, [ip, #3792]!	; 0xed0

00011224 <rb_event_add@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #73728	; 0x12000
   1122c:	ldr	pc, [ip, #3784]!	; 0xec8

00011230 <snprintf@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #73728	; 0x12000
   11238:	ldr	pc, [ip, #3776]!	; 0xec0

0001123c <strncmp@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #73728	; 0x12000
   11244:	ldr	pc, [ip, #3768]!	; 0xeb8

00011248 <getrlimit@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #73728	; 0x12000
   11250:	ldr	pc, [ip, #3760]!	; 0xeb0

00011254 <rb_rawbuf_append@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #73728	; 0x12000
   1125c:	ldr	pc, [ip, #3752]!	; 0xea8

00011260 <rb_rawbuf_flush@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #73728	; 0x12000
   11268:	ldr	pc, [ip, #3744]!	; 0xea0

0001126c <rb_setup_ssl_server@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #73728	; 0x12000
   11274:	ldr	pc, [ip, #3736]!	; 0xe98

00011278 <exit@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #73728	; 0x12000
   11280:	ldr	pc, [ip, #3728]!	; 0xe90

00011284 <__errno_location@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #73728	; 0x12000
   1128c:	ldr	pc, [ip, #3720]!	; 0xe88

00011290 <fputs@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #73728	; 0x12000
   11298:	ldr	pc, [ip, #3712]!	; 0xe80

Disassembly of section .text:

0001129c <.text>:
   1129c:	push	{r4, r5, r6, r7, r8, r9, lr}
   112a0:	sub	sp, sp, #276	; 0x114
   112a4:	add	r1, sp, #16
   112a8:	mov	r0, #7
   112ac:	bl	11248 <getrlimit@plt>
   112b0:	cmp	r0, #0
   112b4:	ldr	r0, [pc, #772]	; 115c0 <fputs@plt+0x330>
   112b8:	ldreq	r8, [sp, #16]
   112bc:	ldrne	r8, [pc, #768]	; 115c4 <fputs@plt+0x334>
   112c0:	bl	11038 <getenv@plt>
   112c4:	mov	r6, r0
   112c8:	ldr	r0, [pc, #760]	; 115c8 <fputs@plt+0x338>
   112cc:	bl	11038 <getenv@plt>
   112d0:	mov	r5, r0
   112d4:	ldr	r0, [pc, #752]	; 115cc <fputs@plt+0x33c>
   112d8:	bl	11038 <getenv@plt>
   112dc:	cmp	r5, #0
   112e0:	cmpne	r6, #0
   112e4:	moveq	r3, #1
   112e8:	movne	r3, #0
   112ec:	cmp	r0, #0
   112f0:	orreq	r3, r3, #1
   112f4:	cmp	r3, #0
   112f8:	mov	r4, r0
   112fc:	beq	11324 <fputs@plt+0x94>
   11300:	ldr	r4, [pc, #712]	; 115d0 <fputs@plt+0x340>
   11304:	ldr	r0, [pc, #712]	; 115d4 <fputs@plt+0x344>
   11308:	ldr	r1, [r4]
   1130c:	bl	11290 <fputs@plt>
   11310:	ldr	r1, [r4]
   11314:	ldr	r0, [pc, #700]	; 115d8 <fputs@plt+0x348>
   11318:	bl	11290 <fputs@plt>
   1131c:	mov	r0, #1
   11320:	bl	11278 <exit@plt>
   11324:	mov	r0, r6
   11328:	bl	11158 <atoi@plt>
   1132c:	mov	r7, r0
   11330:	mov	r0, r5
   11334:	bl	11158 <atoi@plt>
   11338:	mov	r6, r0
   1133c:	mov	r0, r4
   11340:	bl	11158 <atoi@plt>
   11344:	ldr	r3, [pc, #656]	; 115dc <fputs@plt+0x34c>
   11348:	mov	r4, #3
   1134c:	str	r0, [r3, #12]
   11350:	cmp	r4, r8
   11354:	blt	115a4 <fputs@plt+0x314>
   11358:	mov	r1, #2
   1135c:	ldr	r0, [pc, #636]	; 115e0 <fputs@plt+0x350>
   11360:	bl	10f6c <open@plt>
   11364:	subs	r4, r0, #0
   11368:	blt	113c0 <fputs@plt+0x130>
   1136c:	cmp	r7, #0
   11370:	cmpne	r6, #0
   11374:	beq	11380 <fputs@plt+0xf0>
   11378:	mov	r1, #0
   1137c:	bl	11218 <dup2@plt>
   11380:	cmp	r7, #1
   11384:	cmpne	r6, #1
   11388:	beq	11398 <fputs@plt+0x108>
   1138c:	mov	r1, #1
   11390:	mov	r0, r4
   11394:	bl	11218 <dup2@plt>
   11398:	cmp	r7, #2
   1139c:	cmpne	r6, #2
   113a0:	beq	113b0 <fputs@plt+0x120>
   113a4:	mov	r1, #2
   113a8:	mov	r0, r4
   113ac:	bl	11218 <dup2@plt>
   113b0:	cmp	r4, #2
   113b4:	ble	113c0 <fputs@plt+0x130>
   113b8:	mov	r0, r4
   113bc:	bl	11188 <close@plt>
   113c0:	add	r5, sp, #20
   113c4:	mov	r4, #0
   113c8:	mov	r9, #1
   113cc:	mov	r0, r5
   113d0:	str	r4, [sp, #148]	; 0x94
   113d4:	str	r9, [sp, #16]
   113d8:	bl	10f78 <sigemptyset@plt>
   113dc:	mov	r1, #13
   113e0:	mov	r0, r5
   113e4:	bl	11128 <sigaddset@plt>
   113e8:	mov	r1, #14
   113ec:	mov	r0, r5
   113f0:	bl	11128 <sigaddset@plt>
   113f4:	mov	r1, #5
   113f8:	mov	r0, r5
   113fc:	bl	11128 <sigaddset@plt>
   11400:	mov	r1, #28
   11404:	mov	r0, r5
   11408:	bl	11128 <sigaddset@plt>
   1140c:	mov	r2, r4
   11410:	add	r1, sp, #16
   11414:	mov	r0, #28
   11418:	bl	111b8 <sigaction@plt>
   1141c:	mov	r2, r4
   11420:	add	r1, sp, #16
   11424:	mov	r0, #13
   11428:	bl	111b8 <sigaction@plt>
   1142c:	mov	r2, r4
   11430:	add	r1, sp, #16
   11434:	mov	r0, #5
   11438:	bl	111b8 <sigaction@plt>
   1143c:	ldr	r3, [pc, #416]	; 115e4 <fputs@plt+0x354>
   11440:	mov	r2, r4
   11444:	add	r1, sp, #16
   11448:	mov	r0, #14
   1144c:	mov	r5, #1024	; 0x400
   11450:	str	r3, [sp, #16]
   11454:	bl	111b8 <sigaction@plt>
   11458:	mov	r3, #4096	; 0x1000
   1145c:	mov	r2, r4
   11460:	mov	r1, r4
   11464:	str	r3, [sp, #8]
   11468:	str	r5, [sp, #4]
   1146c:	mov	r3, r4
   11470:	str	r8, [sp]
   11474:	mov	r0, r4
   11478:	bl	111d0 <rb_lib_init@plt>
   1147c:	mov	r0, r5
   11480:	bl	110b0 <rb_init_rawbuffers@plt>
   11484:	mov	r1, r9
   11488:	mov	r0, r4
   1148c:	bl	11194 <rb_init_prng@plt>
   11490:	bl	111ac <rb_supports_ssl@plt>
   11494:	ldr	r5, [pc, #332]	; 115e8 <fputs@plt+0x358>
   11498:	subs	r0, r0, r4
   1149c:	movne	r0, #1
   114a0:	strb	r0, [r5, #-532]	; 0xfffffdec
   114a4:	mov	r0, #48	; 0x30
   114a8:	bl	11838 <fputs@plt+0x5a8>
   114ac:	ldr	r2, [pc, #312]	; 115ec <fputs@plt+0x35c>
   114b0:	mov	r1, #4
   114b4:	mov	r8, r0
   114b8:	str	r0, [r5, #-528]	; 0xfffffdf0
   114bc:	mov	r0, r7
   114c0:	bl	111e8 <rb_open@plt>
   114c4:	ldr	r2, [pc, #292]	; 115f0 <fputs@plt+0x360>
   114c8:	mov	r1, #8
   114cc:	ldr	r7, [r5, #-528]	; 0xfffffdf0
   114d0:	str	r0, [r8, #16]
   114d4:	mov	r0, r6
   114d8:	bl	111e8 <rb_open@plt>
   114dc:	ldr	r3, [r5, #-528]	; 0xfffffdf0
   114e0:	str	r0, [r7, #20]
   114e4:	ldr	r0, [r3, #16]
   114e8:	bl	11068 <rb_set_nb@plt>
   114ec:	ldr	r3, [r5, #-528]	; 0xfffffdf0
   114f0:	ldr	r0, [r3, #20]
   114f4:	bl	11068 <rb_set_nb@plt>
   114f8:	mov	r3, #10
   114fc:	mov	r2, r4
   11500:	ldr	r1, [pc, #236]	; 115f4 <fputs@plt+0x364>
   11504:	ldr	r0, [pc, #236]	; 115f8 <fputs@plt+0x368>
   11508:	bl	10fb4 <rb_event_addish@plt>
   1150c:	mov	r2, r4
   11510:	mov	r3, #10
   11514:	ldr	r1, [pc, #224]	; 115fc <fputs@plt+0x36c>
   11518:	ldr	r0, [pc, #224]	; 11600 <fputs@plt+0x370>
   1151c:	bl	11224 <rb_event_add@plt>
   11520:	ldr	r3, [r5, #-528]	; 0xfffffdf0
   11524:	mov	r1, r4
   11528:	ldr	r0, [r3, #20]
   1152c:	bl	11730 <fputs@plt+0x4a0>
   11530:	ldr	r1, [r5, #-528]	; 0xfffffdf0
   11534:	ldr	r0, [r1, #16]
   11538:	bl	128d4 <fputs@plt+0x1644>
   1153c:	mov	r2, #256	; 0x100
   11540:	mov	r1, r4
   11544:	add	r0, sp, #16
   11548:	ldr	r6, [r5, #-528]	; 0xfffffdf0
   1154c:	bl	11074 <memset@plt>
   11550:	mov	r3, #86	; 0x56
   11554:	strb	r3, [sp, #16]
   11558:	bl	10fcc <rb_lib_version@plt>
   1155c:	add	r3, sp, #16
   11560:	mov	r2, #254	; 0xfe
   11564:	mov	r1, r0
   11568:	add	r0, r3, r9
   1156c:	bl	1102c <strncpy@plt>
   11570:	add	r0, sp, #16
   11574:	bl	110f8 <strlen@plt>
   11578:	add	r1, sp, #16
   1157c:	mov	r2, r0
   11580:	mov	r0, r6
   11584:	bl	11c84 <fputs@plt+0x9f4>
   11588:	ldrb	r1, [r5, #-532]	; 0xfffffdec
   1158c:	cmp	r1, r4
   11590:	bne	1159c <fputs@plt+0x30c>
   11594:	ldr	r0, [r5, #-528]	; 0xfffffdf0
   11598:	bl	11f88 <fputs@plt+0xcf8>
   1159c:	mov	r0, #0
   115a0:	bl	110c8 <rb_lib_loop@plt>
   115a4:	cmp	r4, r7
   115a8:	cmpne	r4, r6
   115ac:	beq	115b8 <fputs@plt+0x328>
   115b0:	mov	r0, r4
   115b4:	bl	11188 <close@plt>
   115b8:	add	r4, r4, #1
   115bc:	b	11350 <fputs@plt+0xc0>
   115c0:	andeq	r3, r1, r7, lsl r2
   115c4:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   115c8:	andeq	r3, r1, lr, lsl r2
   115cc:	andeq	r3, r1, r7, lsr #4
   115d0:	andeq	r4, r2, r8, lsr #2
   115d4:	andeq	r3, r1, r0, lsr r2
   115d8:	andeq	r3, r1, r3, ror #4
   115dc:	andeq	r4, r2, r0, lsr r1
   115e0:	muleq	r1, r5, r2
   115e4:	andeq	r1, r1, ip, lsr #14
   115e8:	andeq	sl, r2, r8, lsl r1
   115ec:	muleq	r1, pc, r2	; <UNPREDICTABLE>
   115f0:			; <UNDEFINED> instruction: 0x000132b3
   115f4:			; <UNDEFINED> instruction: 0x000117b4
   115f8:			; <UNDEFINED> instruction: 0x000132bd
   115fc:	andeq	r1, r1, r0, lsr #28
   11600:	andeq	r3, r1, lr, asr #5
   11604:	mov	fp, #0
   11608:	mov	lr, #0
   1160c:	pop	{r1}		; (ldr r1, [sp], #4)
   11610:	mov	r2, sp
   11614:	push	{r2}		; (str r2, [sp, #-4]!)
   11618:	push	{r0}		; (str r0, [sp, #-4]!)
   1161c:	ldr	ip, [pc, #16]	; 11634 <fputs@plt+0x3a4>
   11620:	push	{ip}		; (str ip, [sp, #-4]!)
   11624:	ldr	r0, [pc, #12]	; 11638 <fputs@plt+0x3a8>
   11628:	ldr	r3, [pc, #12]	; 1163c <fputs@plt+0x3ac>
   1162c:	bl	10fe4 <__libc_start_main@plt>
   11630:	bl	10fa8 <abort@plt>
   11634:	andeq	r3, r1, ip, lsr r0
   11638:	muleq	r1, ip, r2
   1163c:	ldrdeq	r2, [r1], -ip
   11640:	ldr	r3, [pc, #20]	; 1165c <fputs@plt+0x3cc>
   11644:	ldr	r2, [pc, #20]	; 11660 <fputs@plt+0x3d0>
   11648:	add	r3, pc, r3
   1164c:	ldr	r2, [r3, r2]
   11650:	cmp	r2, #0
   11654:	bxeq	lr
   11658:	b	10ffc <__gmon_start__@plt>
   1165c:			; <UNDEFINED> instruction: 0x000129b0
   11660:	andeq	r0, r0, ip, lsl r1
   11664:	ldr	r3, [pc, #28]	; 11688 <fputs@plt+0x3f8>
   11668:	ldr	r0, [pc, #28]	; 1168c <fputs@plt+0x3fc>
   1166c:	sub	r3, r3, r0
   11670:	cmp	r3, #6
   11674:	bxls	lr
   11678:	ldr	r3, [pc, #16]	; 11690 <fputs@plt+0x400>
   1167c:	cmp	r3, #0
   11680:	bxeq	lr
   11684:	bx	r3
   11688:	andeq	r4, r2, fp, lsr #2
   1168c:	andeq	r4, r2, r8, lsr #2
   11690:	andeq	r0, r0, r0
   11694:	ldr	r1, [pc, #36]	; 116c0 <fputs@plt+0x430>
   11698:	ldr	r0, [pc, #36]	; 116c4 <fputs@plt+0x434>
   1169c:	sub	r1, r1, r0
   116a0:	asr	r1, r1, #2
   116a4:	add	r1, r1, r1, lsr #31
   116a8:	asrs	r1, r1, #1
   116ac:	bxeq	lr
   116b0:	ldr	r3, [pc, #16]	; 116c8 <fputs@plt+0x438>
   116b4:	cmp	r3, #0
   116b8:	bxeq	lr
   116bc:	bx	r3
   116c0:	andeq	r4, r2, r8, lsr #2
   116c4:	andeq	r4, r2, r8, lsr #2
   116c8:	andeq	r0, r0, r0
   116cc:	push	{r4, lr}
   116d0:	ldr	r4, [pc, #24]	; 116f0 <fputs@plt+0x460>
   116d4:	ldrb	r3, [r4]
   116d8:	cmp	r3, #0
   116dc:	popne	{r4, pc}
   116e0:	bl	11664 <fputs@plt+0x3d4>
   116e4:	mov	r3, #1
   116e8:	strb	r3, [r4]
   116ec:	pop	{r4, pc}
   116f0:	andeq	r4, r2, ip, lsr #2
   116f4:	ldr	r0, [pc, #40]	; 11724 <fputs@plt+0x494>
   116f8:	ldr	r3, [r0]
   116fc:	cmp	r3, #0
   11700:	bne	11708 <fputs@plt+0x478>
   11704:	b	11694 <fputs@plt+0x404>
   11708:	ldr	r3, [pc, #24]	; 11728 <fputs@plt+0x498>
   1170c:	cmp	r3, #0
   11710:	beq	11704 <fputs@plt+0x474>
   11714:	push	{r4, lr}
   11718:	blx	r3
   1171c:	pop	{r4, lr}
   11720:	b	11694 <fputs@plt+0x404>
   11724:	strdeq	r3, [r2], -r4
   11728:	andeq	r0, r0, r0
   1172c:	bx	lr
   11730:	push	{r4, r5, lr}
   11734:	sub	sp, sp, #16384	; 0x4000
   11738:	sub	sp, sp, #4
   1173c:	mov	r4, r0
   11740:	mov	r5, #16384	; 0x4000
   11744:	mov	r2, r5
   11748:	mov	r1, sp
   1174c:	mov	r0, r4
   11750:	bl	110e0 <rb_read@plt>
   11754:	cmp	r0, #0
   11758:	bgt	11744 <fputs@plt+0x4b4>
   1175c:	bne	11768 <fputs@plt+0x4d8>
   11760:	mov	r0, #0
   11764:	bl	11278 <exit@plt>
   11768:	bl	11284 <__errno_location@plt>
   1176c:	ldr	r0, [r0]
   11770:	bl	10fc0 <rb_ignore_errno@plt>
   11774:	cmp	r0, #0
   11778:	beq	11760 <fputs@plt+0x4d0>
   1177c:	mov	r3, #0
   11780:	ldr	r2, [pc, #20]	; 1179c <fputs@plt+0x50c>
   11784:	mov	r1, #1
   11788:	mov	r0, r4
   1178c:	bl	10ff0 <rb_setselect@plt>
   11790:	add	sp, sp, #16384	; 0x4000
   11794:	add	sp, sp, #4
   11798:	pop	{r4, r5, pc}
   1179c:	andeq	r1, r1, r0, lsr r7
   117a0:	cmp	r0, #0
   117a4:	bxeq	lr
   117a8:	b	110bc <free@plt>
   117ac:	mov	r0, r1
   117b0:	b	117a0 <fputs@plt+0x510>
   117b4:	push	{r4, r5, r6, r7, r8, lr}
   117b8:	ldr	r4, [pc, #116]	; 11834 <fputs@plt+0x5a4>
   117bc:	ldr	r3, [r4]
   117c0:	cmp	r3, #0
   117c4:	ldrne	r6, [r3, #8]
   117c8:	bne	117dc <fputs@plt+0x54c>
   117cc:	mov	r3, #0
   117d0:	str	r3, [r4]
   117d4:	str	r3, [r4, #4]
   117d8:	pop	{r4, r5, r6, r7, r8, pc}
   117dc:	ldr	r5, [r3]
   117e0:	ldr	r0, [r5, #16]
   117e4:	bl	11170 <rb_free_rawbuffer@plt>
   117e8:	ldr	r0, [r5, #20]
   117ec:	bl	11170 <rb_free_rawbuffer@plt>
   117f0:	ldrb	r3, [r5, #72]	; 0x48
   117f4:	tst	r3, #2
   117f8:	beq	11818 <fputs@plt+0x588>
   117fc:	ldr	r7, [r5, #76]	; 0x4c
   11800:	mov	r0, r7
   11804:	bl	10fd8 <inflateEnd@plt>
   11808:	add	r0, r7, #56	; 0x38
   1180c:	bl	110d4 <deflateEnd@plt>
   11810:	mov	r0, r7
   11814:	bl	117a0 <fputs@plt+0x510>
   11818:	mov	r0, r5
   1181c:	bl	117a0 <fputs@plt+0x510>
   11820:	cmp	r6, #0
   11824:	beq	117cc <fputs@plt+0x53c>
   11828:	mov	r3, r6
   1182c:	ldr	r6, [r6, #8]
   11830:	b	117dc <fputs@plt+0x54c>
   11834:	andeq	r4, r2, r0, lsr r1
   11838:	push	{r4, lr}
   1183c:	mov	r1, r0
   11840:	mov	r0, #1
   11844:	bl	1105c <calloc@plt>
   11848:	cmp	r0, #0
   1184c:	popne	{r4, pc}
   11850:	bl	111a0 <rb_outofmemory@plt>
   11854:	mul	r0, r2, r1
   11858:	b	11838 <fputs@plt+0x5a8>
   1185c:	push	{r4, r5, r6, r7, r8, lr}
   11860:	mov	r7, r0
   11864:	mov	r0, #80	; 0x50
   11868:	mov	r6, r1
   1186c:	mov	r5, r2
   11870:	bl	11838 <fputs@plt+0x5a8>
   11874:	str	r7, [r0, #12]
   11878:	mov	r4, r0
   1187c:	bl	111dc <rb_new_rawbuffer@plt>
   11880:	str	r0, [r4, #16]
   11884:	bl	111dc <rb_new_rawbuffer@plt>
   11888:	mvn	r3, #0
   1188c:	str	r3, [r4, #24]
   11890:	mov	r3, #0
   11894:	str	r3, [r4, #76]	; 0x4c
   11898:	str	r6, [r4, #28]
   1189c:	str	r5, [r4, #32]
   118a0:	str	r0, [r4, #20]
   118a4:	mov	r0, r6
   118a8:	bl	11068 <rb_set_nb@plt>
   118ac:	mov	r0, r5
   118b0:	bl	11068 <rb_set_nb@plt>
   118b4:	mov	r0, r4
   118b8:	pop	{r4, r5, r6, r7, r8, pc}
   118bc:	push	{r4, r5, r6, lr}
   118c0:	mov	r5, r0
   118c4:	add	r6, r0, #20
   118c8:	mov	r4, #0
   118cc:	ldr	r3, [r5, #36]	; 0x24
   118d0:	cmp	r4, r3
   118d4:	blt	118dc <fputs@plt+0x64c>
   118d8:	pop	{r4, r5, r6, pc}
   118dc:	ldr	r0, [r6], #4
   118e0:	bl	1111c <rb_close@plt>
   118e4:	add	r4, r4, #1
   118e8:	b	118cc <fputs@plt+0x63c>
   118ec:	cmp	r0, #0
   118f0:	push	{r4, lr}
   118f4:	bne	1190c <fputs@plt+0x67c>
   118f8:	ldr	r3, [pc, #100]	; 11964 <fputs@plt+0x6d4>
   118fc:	ldr	r1, [pc, #100]	; 11968 <fputs@plt+0x6d8>
   11900:	ldr	r0, [pc, #100]	; 1196c <fputs@plt+0x6dc>
   11904:	mov	r2, #235	; 0xeb
   11908:	bl	11080 <__assert_fail@plt>
   1190c:	cmp	r1, #0
   11910:	ldreq	r3, [pc, #76]	; 11964 <fputs@plt+0x6d4>
   11914:	moveq	r2, #236	; 0xec
   11918:	ldreq	r1, [pc, #72]	; 11968 <fputs@plt+0x6d8>
   1191c:	ldreq	r0, [pc, #76]	; 11970 <fputs@plt+0x6e0>
   11920:	beq	11908 <fputs@plt+0x678>
   11924:	ldr	r3, [r0, #8]
   11928:	ldr	r2, [r0, #4]
   1192c:	cmp	r3, #0
   11930:	strne	r2, [r3, #4]
   11934:	streq	r2, [r1, #4]
   11938:	ldr	r2, [r0, #4]
   1193c:	cmp	r2, #0
   11940:	strne	r3, [r2, #8]
   11944:	streq	r3, [r1]
   11948:	mov	r3, #0
   1194c:	str	r3, [r0, #4]
   11950:	str	r3, [r0, #8]
   11954:	ldr	r3, [r1, #8]
   11958:	sub	r3, r3, #1
   1195c:	str	r3, [r1, #8]
   11960:	pop	{r4, pc}
   11964:	andeq	r3, r1, ip, asr #32
   11968:	andeq	r3, r1, r7, ror r0
   1196c:	muleq	r1, r3, r0
   11970:	muleq	r1, sp, r0
   11974:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   11978:	mov	r5, r1
   1197c:	ldr	r6, [r1, #36]	; 0x24
   11980:	cmp	r6, #0
   11984:	bne	119b0 <fputs@plt+0x720>
   11988:	ldr	r3, [r5, #44]	; 0x2c
   1198c:	cmp	r3, #0
   11990:	beq	11a68 <fputs@plt+0x7d8>
   11994:	mov	r3, r5
   11998:	ldr	r2, [pc, #208]	; 11a70 <fputs@plt+0x7e0>
   1199c:	mov	r1, #2
   119a0:	ldr	r0, [r5, #16]
   119a4:	add	sp, sp, #8
   119a8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   119ac:	b	10ff0 <rb_setselect@plt>
   119b0:	ldr	r8, [r6, #8]
   119b4:	ldr	r9, [pc, #184]	; 11a74 <fputs@plt+0x7e4>
   119b8:	add	sl, r1, #36	; 0x24
   119bc:	ldr	r4, [r6]
   119c0:	ldr	r3, [r9, #12]
   119c4:	add	r7, r4, #20
   119c8:	str	r3, [sp, #4]
   119cc:	ldr	r3, [r4, #16]
   119d0:	mov	r1, r7
   119d4:	str	r3, [sp]
   119d8:	ldr	r0, [r5, #16]
   119dc:	ldr	r3, [r4, #12]
   119e0:	ldr	r2, [r4, #36]	; 0x24
   119e4:	bl	11014 <rb_send_fd_buf@plt>
   119e8:	cmp	r0, #0
   119ec:	ble	11a40 <fputs@plt+0x7b0>
   119f0:	mov	r0, r6
   119f4:	mov	r1, sl
   119f8:	bl	118ec <fputs@plt+0x65c>
   119fc:	mov	r6, #0
   11a00:	ldr	r3, [r4, #36]	; 0x24
   11a04:	cmp	r6, r3
   11a08:	blt	11a30 <fputs@plt+0x7a0>
   11a0c:	ldr	r0, [r4, #12]
   11a10:	bl	117a0 <fputs@plt+0x510>
   11a14:	mov	r0, r4
   11a18:	bl	117a0 <fputs@plt+0x510>
   11a1c:	cmp	r8, #0
   11a20:	beq	11988 <fputs@plt+0x6f8>
   11a24:	mov	r6, r8
   11a28:	ldr	r8, [r8, #8]
   11a2c:	b	119bc <fputs@plt+0x72c>
   11a30:	ldr	r0, [r7], #4
   11a34:	bl	1111c <rb_close@plt>
   11a38:	add	r6, r6, #1
   11a3c:	b	11a00 <fputs@plt+0x770>
   11a40:	bne	11a4c <fputs@plt+0x7bc>
   11a44:	mov	r0, #0
   11a48:	bl	11278 <exit@plt>
   11a4c:	bge	11a1c <fputs@plt+0x78c>
   11a50:	bl	11284 <__errno_location@plt>
   11a54:	ldr	r0, [r0]
   11a58:	bl	10fc0 <rb_ignore_errno@plt>
   11a5c:	cmp	r0, #0
   11a60:	bne	11a1c <fputs@plt+0x78c>
   11a64:	b	11a44 <fputs@plt+0x7b4>
   11a68:	add	sp, sp, #8
   11a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11a70:	andeq	r1, r1, r4, ror r9
   11a74:	andeq	r4, r2, r0, lsr r1
   11a78:	cmp	r0, #0
   11a7c:	push	{r4, lr}
   11a80:	bne	11a98 <fputs@plt+0x808>
   11a84:	ldr	r3, [pc, #124]	; 11b08 <fputs@plt+0x878>
   11a88:	ldr	r1, [pc, #124]	; 11b0c <fputs@plt+0x87c>
   11a8c:	ldr	r0, [pc, #124]	; 11b10 <fputs@plt+0x880>
   11a90:	mov	r2, #143	; 0x8f
   11a94:	bl	11080 <__assert_fail@plt>
   11a98:	cmp	r1, #0
   11a9c:	ldreq	r3, [pc, #100]	; 11b08 <fputs@plt+0x878>
   11aa0:	moveq	r2, #144	; 0x90
   11aa4:	ldreq	r1, [pc, #96]	; 11b0c <fputs@plt+0x87c>
   11aa8:	ldreq	r0, [pc, #100]	; 11b14 <fputs@plt+0x884>
   11aac:	beq	11a94 <fputs@plt+0x804>
   11ab0:	cmp	r2, #0
   11ab4:	ldreq	r3, [pc, #76]	; 11b08 <fputs@plt+0x878>
   11ab8:	moveq	r2, #145	; 0x91
   11abc:	ldreq	r1, [pc, #72]	; 11b0c <fputs@plt+0x87c>
   11ac0:	ldreq	r0, [pc, #80]	; 11b18 <fputs@plt+0x888>
   11ac4:	beq	11a94 <fputs@plt+0x804>
   11ac8:	mov	r3, #0
   11acc:	str	r3, [r1, #4]
   11ad0:	ldr	r3, [r2]
   11ad4:	str	r0, [r1]
   11ad8:	cmp	r3, #0
   11adc:	str	r3, [r1, #8]
   11ae0:	strne	r1, [r3, #4]
   11ae4:	bne	11af4 <fputs@plt+0x864>
   11ae8:	ldr	r3, [r2, #4]
   11aec:	cmp	r3, #0
   11af0:	streq	r1, [r2, #4]
   11af4:	ldr	r3, [r2, #8]
   11af8:	str	r1, [r2]
   11afc:	add	r3, r3, #1
   11b00:	str	r3, [r2, #8]
   11b04:	pop	{r4, pc}
   11b08:	andeq	r3, r1, fp, asr r0
   11b0c:	andeq	r3, r1, r7, ror r0
   11b10:	andeq	r3, r1, sl, lsr #1
   11b14:	muleq	r1, r3, r0
   11b18:	muleq	r1, sp, r0
   11b1c:	push	{r4, lr}
   11b20:	mov	r4, r0
   11b24:	mov	r0, r1
   11b28:	str	r1, [r4, #24]
   11b2c:	mov	r1, #2000	; 0x7d0
   11b30:	bl	12fac <fputs@plt+0x1d1c>
   11b34:	mov	r2, #12
   11b38:	ldr	r3, [pc, #16]	; 11b50 <fputs@plt+0x8c0>
   11b3c:	mov	r0, r4
   11b40:	mla	r2, r2, r1, r3
   11b44:	mov	r1, r4
   11b48:	pop	{r4, lr}
   11b4c:	b	11a78 <fputs@plt+0x7e8>
   11b50:	andeq	r4, r2, r0, asr #2
   11b54:	push	{r4, r5, lr}
   11b58:	subs	r4, r1, #0
   11b5c:	sub	sp, sp, #16384	; 0x4000
   11b60:	sub	sp, sp, #4
   11b64:	beq	11b9c <fputs@plt+0x90c>
   11b68:	mov	r5, #16384	; 0x4000
   11b6c:	mov	r2, r5
   11b70:	mov	r1, sp
   11b74:	ldr	r0, [r4, #32]
   11b78:	bl	110e0 <rb_read@plt>
   11b7c:	cmp	r0, #0
   11b80:	bne	11ba8 <fputs@plt+0x918>
   11b84:	ldr	r0, [r4, #32]
   11b88:	bl	1111c <rb_close@plt>
   11b8c:	ldr	r2, [pc, #68]	; 11bd8 <fputs@plt+0x948>
   11b90:	mov	r1, r4
   11b94:	mov	r0, r4
   11b98:	bl	11a78 <fputs@plt+0x7e8>
   11b9c:	add	sp, sp, #16384	; 0x4000
   11ba0:	add	sp, sp, #4
   11ba4:	pop	{r4, r5, pc}
   11ba8:	bge	11b6c <fputs@plt+0x8dc>
   11bac:	bl	11284 <__errno_location@plt>
   11bb0:	ldr	r0, [r0]
   11bb4:	bl	10fc0 <rb_ignore_errno@plt>
   11bb8:	cmp	r0, #0
   11bbc:	beq	11b84 <fputs@plt+0x8f4>
   11bc0:	mov	r3, r4
   11bc4:	ldr	r2, [pc, #16]	; 11bdc <fputs@plt+0x94c>
   11bc8:	mov	r1, #1
   11bcc:	ldr	r0, [r4, #32]
   11bd0:	bl	10ff0 <rb_setselect@plt>
   11bd4:	b	11b9c <fputs@plt+0x90c>
   11bd8:	andeq	r4, r2, r0, lsr r1
   11bdc:	andeq	r1, r1, r4, asr fp
   11be0:	cmp	r1, #0
   11be4:	push	{r4, lr}
   11be8:	bne	11c00 <fputs@plt+0x970>
   11bec:	ldr	r3, [pc, #124]	; 11c70 <fputs@plt+0x9e0>
   11bf0:	ldr	r1, [pc, #124]	; 11c74 <fputs@plt+0x9e4>
   11bf4:	ldr	r0, [pc, #124]	; 11c78 <fputs@plt+0x9e8>
   11bf8:	mov	r2, #211	; 0xd3
   11bfc:	bl	11080 <__assert_fail@plt>
   11c00:	cmp	r2, #0
   11c04:	ldreq	r3, [pc, #100]	; 11c70 <fputs@plt+0x9e0>
   11c08:	moveq	r2, #212	; 0xd4
   11c0c:	ldreq	r1, [pc, #96]	; 11c74 <fputs@plt+0x9e4>
   11c10:	ldreq	r0, [pc, #100]	; 11c7c <fputs@plt+0x9ec>
   11c14:	beq	11bfc <fputs@plt+0x96c>
   11c18:	cmp	r0, #0
   11c1c:	ldreq	r3, [pc, #76]	; 11c70 <fputs@plt+0x9e0>
   11c20:	moveq	r2, #213	; 0xd5
   11c24:	ldreq	r1, [pc, #72]	; 11c74 <fputs@plt+0x9e4>
   11c28:	ldreq	r0, [pc, #80]	; 11c80 <fputs@plt+0x9f0>
   11c2c:	beq	11bfc <fputs@plt+0x96c>
   11c30:	mov	r3, #0
   11c34:	str	r3, [r1, #8]
   11c38:	ldr	r3, [r2, #4]
   11c3c:	str	r0, [r1]
   11c40:	cmp	r3, #0
   11c44:	str	r3, [r1, #4]
   11c48:	strne	r1, [r3, #8]
   11c4c:	bne	11c5c <fputs@plt+0x9cc>
   11c50:	ldr	r3, [r2]
   11c54:	cmp	r3, #0
   11c58:	streq	r1, [r2]
   11c5c:	ldr	r3, [r2, #8]
   11c60:	str	r1, [r2, #4]
   11c64:	add	r3, r3, #1
   11c68:	str	r3, [r2, #8]
   11c6c:	pop	{r4, pc}
   11c70:	andeq	r3, r1, r7, rrx
   11c74:	andeq	r3, r1, r7, ror r0
   11c78:	muleq	r1, r3, r0
   11c7c:	muleq	r1, sp, r0
   11c80:	andeq	r3, r1, sl, lsr #1
   11c84:	push	{r4, r5, r6, r7, r8, lr}
   11c88:	mov	r6, r0
   11c8c:	mov	r0, #40	; 0x28
   11c90:	mov	r5, r2
   11c94:	mov	r7, r1
   11c98:	bl	11838 <fputs@plt+0x5a8>
   11c9c:	mov	r4, r0
   11ca0:	mov	r0, r5
   11ca4:	bl	11838 <fputs@plt+0x5a8>
   11ca8:	mov	r2, r5
   11cac:	mov	r1, r7
   11cb0:	str	r5, [r4, #16]
   11cb4:	str	r0, [r4, #12]
   11cb8:	bl	11110 <memcpy@plt>
   11cbc:	mov	r3, #0
   11cc0:	mov	r1, r4
   11cc4:	mov	r0, r4
   11cc8:	str	r3, [r4, #36]	; 0x24
   11ccc:	add	r2, r6, #36	; 0x24
   11cd0:	bl	11be0 <fputs@plt+0x950>
   11cd4:	mov	r1, r6
   11cd8:	ldr	r0, [r6, #16]
   11cdc:	pop	{r4, r5, r6, r7, r8, lr}
   11ce0:	b	11974 <fputs@plt+0x6e4>
   11ce4:	push	{r2, r3}
   11ce8:	push	{r4, r5, r6, lr}
   11cec:	sub	sp, sp, #392	; 0x188
   11cf0:	ldrb	r3, [r0, #72]	; 0x48
   11cf4:	ldr	r6, [sp, #408]	; 0x198
   11cf8:	tst	r3, #8
   11cfc:	bne	11d88 <fputs@plt+0xaf8>
   11d00:	mov	r4, r0
   11d04:	mov	r5, r1
   11d08:	ldr	r1, [r0, #28]
   11d0c:	ldr	r0, [r0, #16]
   11d10:	bl	11260 <rb_rawbuf_flush@plt>
   11d14:	ldr	r1, [r4, #32]
   11d18:	ldr	r0, [r4, #20]
   11d1c:	bl	11260 <rb_rawbuf_flush@plt>
   11d20:	ldr	r0, [r4, #28]
   11d24:	bl	1111c <rb_close@plt>
   11d28:	ldrb	r3, [r4, #72]	; 0x48
   11d2c:	orr	r2, r3, #8
   11d30:	tst	r3, #64	; 0x40
   11d34:	strb	r2, [r4, #72]	; 0x48
   11d38:	bne	11d5c <fputs@plt+0xacc>
   11d3c:	mov	r1, #2000	; 0x7d0
   11d40:	ldr	r0, [r4, #24]
   11d44:	bl	12fac <fputs@plt+0x1d1c>
   11d48:	mov	r2, #12
   11d4c:	ldr	r3, [pc, #192]	; 11e14 <fputs@plt+0xb84>
   11d50:	mov	r0, r4
   11d54:	mla	r1, r2, r1, r3
   11d58:	bl	118ec <fputs@plt+0x65c>
   11d5c:	cmp	r6, #0
   11d60:	cmpne	r5, #0
   11d64:	moveq	r5, #1
   11d68:	movne	r5, #0
   11d6c:	bne	11d98 <fputs@plt+0xb08>
   11d70:	ldr	r0, [r4, #32]
   11d74:	bl	1111c <rb_close@plt>
   11d78:	ldr	r2, [pc, #152]	; 11e18 <fputs@plt+0xb88>
   11d7c:	mov	r1, r4
   11d80:	mov	r0, r4
   11d84:	bl	11a78 <fputs@plt+0x7e8>
   11d88:	add	sp, sp, #392	; 0x188
   11d8c:	pop	{r4, r5, r6, lr}
   11d90:	add	sp, sp, #8
   11d94:	bx	lr
   11d98:	mov	r3, r4
   11d9c:	ldr	r0, [r4, #32]
   11da0:	ldr	r2, [pc, #116]	; 11e1c <fputs@plt+0xb8c>
   11da4:	mov	r1, #1
   11da8:	bl	10ff0 <rb_setselect@plt>
   11dac:	mov	r3, r5
   11db0:	mov	r2, r5
   11db4:	ldr	r0, [r4, #32]
   11db8:	mov	r1, #2
   11dbc:	bl	10ff0 <rb_setselect@plt>
   11dc0:	add	r3, sp, #412	; 0x19c
   11dc4:	mov	r2, r6
   11dc8:	mov	r1, #128	; 0x80
   11dcc:	add	r0, sp, #8
   11dd0:	str	r3, [sp, #4]
   11dd4:	bl	11020 <vsnprintf@plt>
   11dd8:	mov	r3, #68	; 0x44
   11ddc:	strb	r3, [sp, #136]	; 0x88
   11de0:	ldr	r3, [r4, #24]
   11de4:	add	r1, sp, #8
   11de8:	mov	r2, #251	; 0xfb
   11dec:	add	r0, sp, #141	; 0x8d
   11df0:	str	r3, [sp, #137]	; 0x89
   11df4:	bl	1108c <rb_strlcpy@plt>
   11df8:	add	r0, sp, #8
   11dfc:	bl	110f8 <strlen@plt>
   11e00:	add	r1, sp, #136	; 0x88
   11e04:	add	r2, r0, #6
   11e08:	ldr	r0, [r4, #12]
   11e0c:	bl	11c84 <fputs@plt+0x9f4>
   11e10:	b	11d88 <fputs@plt+0xaf8>
   11e14:	andeq	r4, r2, r0, asr #2
   11e18:	andeq	r4, r2, r0, lsr r1
   11e1c:	andeq	r1, r1, r4, asr fp
   11e20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11e24:	mov	r5, #0
   11e28:	ldr	r7, [pc, #120]	; 11ea8 <fputs@plt+0xc18>
   11e2c:	ldr	sl, [pc, #120]	; 11eac <fputs@plt+0xc1c>
   11e30:	ldr	r8, [pc, #120]	; 11eb0 <fputs@plt+0xc20>
   11e34:	ldr	r3, [r5, r7]
   11e38:	cmp	r3, #0
   11e3c:	movne	r9, #1
   11e40:	ldrne	r4, [r3, #8]
   11e44:	bne	11e58 <fputs@plt+0xbc8>
   11e48:	add	r5, r5, #12
   11e4c:	cmp	r5, r8
   11e50:	bne	11e34 <fputs@plt+0xba4>
   11e54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e58:	ldr	r6, [r3]
   11e5c:	ldrb	r3, [r6, #72]	; 0x48
   11e60:	tst	r3, #1
   11e64:	beq	11e88 <fputs@plt+0xbf8>
   11e68:	ldr	r0, [r6, #28]
   11e6c:	bl	11008 <rb_ssl_handshake_count@plt>
   11e70:	cmp	r0, #2
   11e74:	bls	11e9c <fputs@plt+0xc0c>
   11e78:	mov	r2, sl
   11e7c:	mov	r1, r9
   11e80:	mov	r0, r6
   11e84:	bl	11ce4 <fputs@plt+0xa54>
   11e88:	cmp	r4, #0
   11e8c:	beq	11e48 <fputs@plt+0xbb8>
   11e90:	mov	r3, r4
   11e94:	ldr	r4, [r4, #8]
   11e98:	b	11e58 <fputs@plt+0xbc8>
   11e9c:	ldr	r0, [r6, #28]
   11ea0:	bl	11140 <rb_ssl_clear_handshake_count@plt>
   11ea4:	b	11e88 <fputs@plt+0xbf8>
   11ea8:	andeq	r4, r2, r0, asr #2
   11eac:	strheq	r3, [r1], -r7
   11eb0:	andeq	r5, r0, r0, asr #27
   11eb4:	ldrb	r3, [r0, #72]	; 0x48
   11eb8:	tst	r3, #1
   11ebc:	bxeq	lr
   11ec0:	push	{r4, lr}
   11ec4:	mov	r4, r0
   11ec8:	sub	sp, sp, #768	; 0x300
   11ecc:	ldr	r0, [r0, #28]
   11ed0:	bl	11104 <rb_ssl_get_cipher@plt>
   11ed4:	subs	r1, r0, #0
   11ed8:	beq	11f20 <fputs@plt+0xc90>
   11edc:	mov	r2, #256	; 0x100
   11ee0:	mov	r0, sp
   11ee4:	bl	1108c <rb_strlcpy@plt>
   11ee8:	mov	r3, #67	; 0x43
   11eec:	strb	r3, [sp, #256]	; 0x100
   11ef0:	ldr	r3, [r4, #24]
   11ef4:	mov	r1, sp
   11ef8:	str	r3, [sp, #257]	; 0x101
   11efc:	add	r3, sp, #256	; 0x100
   11f00:	add	r0, r3, #5
   11f04:	bl	11134 <strcpy@plt>
   11f08:	mov	r0, sp
   11f0c:	bl	110f8 <strlen@plt>
   11f10:	add	r1, sp, #256	; 0x100
   11f14:	add	r2, r0, #6
   11f18:	ldr	r0, [r4, #12]
   11f1c:	bl	11c84 <fputs@plt+0x9f4>
   11f20:	add	sp, sp, #768	; 0x300
   11f24:	pop	{r4, pc}
   11f28:	push	{r4, r5, lr}
   11f2c:	sub	sp, sp, #84	; 0x54
   11f30:	ldr	r5, [pc, #76]	; 11f84 <fputs@plt+0xcf4>
   11f34:	mov	r4, r0
   11f38:	add	r1, sp, #13
   11f3c:	ldr	r2, [r5, #-536]	; 0xfffffde8
   11f40:	ldr	r0, [r0, #28]
   11f44:	bl	11098 <rb_get_ssl_certfp@plt>
   11f48:	subs	r2, r0, #0
   11f4c:	beq	11f7c <fputs@plt+0xcec>
   11f50:	mov	r3, #70	; 0x46
   11f54:	strb	r3, [sp]
   11f58:	ldr	r3, [r4, #24]
   11f5c:	str	r2, [sp, #9]
   11f60:	str	r3, [sp, #1]
   11f64:	ldr	r3, [r5, #-536]	; 0xfffffde8
   11f68:	add	r2, r2, #13
   11f6c:	mov	r1, sp
   11f70:	ldr	r0, [r4, #12]
   11f74:	str	r3, [sp, #5]
   11f78:	bl	11c84 <fputs@plt+0x9f4>
   11f7c:	add	sp, sp, #84	; 0x54
   11f80:	pop	{r4, r5, pc}
   11f84:	andeq	sl, r2, r8, lsl r1
   11f88:	push	{r4, r5, r6, lr}
   11f8c:	subs	r4, r1, #0
   11f90:	mov	r5, r0
   11f94:	beq	11fc4 <fputs@plt+0xd34>
   11f98:	ldr	r2, [r4, #24]
   11f9c:	ldr	r1, [r4, #20]
   11fa0:	bl	1185c <fputs@plt+0x5cc>
   11fa4:	ldr	r3, [r4, #12]
   11fa8:	ldr	r1, [r3, #1]
   11fac:	mov	r6, r0
   11fb0:	bl	11b1c <fputs@plt+0x88c>
   11fb4:	ldr	r2, [pc, #28]	; 11fd8 <fputs@plt+0xd48>
   11fb8:	mov	r1, #1
   11fbc:	mov	r0, r6
   11fc0:	bl	11ce4 <fputs@plt+0xa54>
   11fc4:	mov	r0, r5
   11fc8:	mov	r2, #1
   11fcc:	ldr	r1, [pc, #8]	; 11fdc <fputs@plt+0xd4c>
   11fd0:	pop	{r4, r5, r6, lr}
   11fd4:	b	11c84 <fputs@plt+0x9f4>
   11fd8:	andeq	r3, r1, sl, asr #1
   11fdc:	andeq	r3, r1, pc, ror #1
   11fe0:	ldrb	r3, [r1, #72]	; 0x48
   11fe4:	tst	r3, #8
   11fe8:	beq	1202c <fputs@plt+0xd9c>
   11fec:	bx	lr
   11ff0:	ldrd	r2, [r4, #64]	; 0x40
   11ff4:	adds	r2, r2, r0
   11ff8:	adc	r3, r3, r0, asr #31
   11ffc:	strd	r2, [r4, #64]	; 0x40
   12000:	mov	r1, r5
   12004:	ldr	r0, [r4, #20]
   12008:	bl	11260 <rb_rawbuf_flush@plt>
   1200c:	cmp	r0, #0
   12010:	bgt	11ff0 <fputs@plt+0xd60>
   12014:	bne	1203c <fputs@plt+0xdac>
   12018:	mov	r2, #0
   1201c:	mov	r0, r4
   12020:	mov	r1, r2
   12024:	pop	{r4, r5, r6, lr}
   12028:	b	11ce4 <fputs@plt+0xa54>
   1202c:	push	{r4, r5, r6, lr}
   12030:	mov	r5, r0
   12034:	mov	r4, r1
   12038:	b	12000 <fputs@plt+0xd70>
   1203c:	bl	11284 <__errno_location@plt>
   12040:	ldr	r0, [r0]
   12044:	bl	10fc0 <rb_ignore_errno@plt>
   12048:	cmp	r0, #0
   1204c:	beq	12018 <fputs@plt+0xd88>
   12050:	ldr	r0, [r4, #20]
   12054:	bl	11164 <rb_rawbuf_length@plt>
   12058:	cmp	r0, #0
   1205c:	movgt	r3, r4
   12060:	movle	r3, #0
   12064:	ldrle	r0, [r4, #32]
   12068:	ldrgt	r2, [pc, #20]	; 12084 <fputs@plt+0xdf4>
   1206c:	movgt	r1, #2
   12070:	ldrgt	r0, [r3, #32]
   12074:	movle	r2, r3
   12078:	movle	r1, #2
   1207c:	pop	{r4, r5, r6, lr}
   12080:	b	10ff0 <rb_setselect@plt>
   12084:	andeq	r1, r1, r0, ror #31
   12088:	push	{r4, r5, r6, r7, lr}
   1208c:	mov	r6, r0
   12090:	ldr	r7, [r1, #1]
   12094:	sub	sp, sp, #548	; 0x224
   12098:	mov	r5, r1
   1209c:	mov	r0, r7
   120a0:	mov	r1, #2000	; 0x7d0
   120a4:	bl	12fac <fputs@plt+0x1d1c>
   120a8:	mov	r2, #12
   120ac:	ldr	r3, [pc, #160]	; 12154 <fputs@plt+0xec4>
   120b0:	mla	r1, r2, r1, r3
   120b4:	ldr	r2, [r1, #16]
   120b8:	cmp	r2, #0
   120bc:	bne	120c8 <fputs@plt+0xe38>
   120c0:	add	sp, sp, #548	; 0x224
   120c4:	pop	{r4, r5, r6, r7, pc}
   120c8:	ldr	r4, [r2]
   120cc:	ldr	r3, [r4, #24]
   120d0:	cmp	r7, r3
   120d4:	bne	120e4 <fputs@plt+0xe54>
   120d8:	ldrb	r3, [r4, #72]	; 0x48
   120dc:	tst	r3, #8
   120e0:	beq	120ec <fputs@plt+0xe5c>
   120e4:	ldr	r2, [r2, #8]
   120e8:	b	120b8 <fputs@plt+0xe28>
   120ec:	ldrd	r2, [r4, #40]	; 0x28
   120f0:	mov	r1, #512	; 0x200
   120f4:	add	r0, sp, #32
   120f8:	strd	r2, [sp, #24]
   120fc:	ldrd	r2, [r4, #56]	; 0x38
   12100:	strd	r2, [sp, #16]
   12104:	ldrd	r2, [r4, #48]	; 0x30
   12108:	strd	r2, [sp, #8]
   1210c:	ldrd	r2, [r4, #64]	; 0x40
   12110:	strd	r2, [sp]
   12114:	add	r3, r5, #5
   12118:	ldr	r2, [pc, #56]	; 12158 <fputs@plt+0xec8>
   1211c:	bl	11230 <snprintf@plt>
   12120:	mov	r2, #0
   12124:	mov	r3, #0
   12128:	add	r0, sp, #32
   1212c:	strd	r2, [r4, #64]	; 0x40
   12130:	strd	r2, [r4, #56]	; 0x38
   12134:	strd	r2, [r4, #48]	; 0x30
   12138:	strd	r2, [r4, #40]	; 0x28
   1213c:	bl	110f8 <strlen@plt>
   12140:	add	r1, sp, #32
   12144:	add	r2, r0, #1
   12148:	mov	r0, r6
   1214c:	bl	11c84 <fputs@plt+0x9f4>
   12150:	b	120c0 <fputs@plt+0xe30>
   12154:	andeq	r4, r2, r0, lsr r1
   12158:	strdeq	r3, [r1], -r1
   1215c:	ldr	r3, [r0, #76]	; 0x4c
   12160:	push	{r4, r5, r6, r7, r8, lr}
   12164:	mov	r4, r0
   12168:	mov	r6, r1
   1216c:	mov	r7, #0
   12170:	sub	sp, sp, #16384	; 0x4000
   12174:	mov	r5, #16384	; 0x4000
   12178:	stm	r3, {r1, r2}
   1217c:	str	sp, [r3, #12]
   12180:	str	r5, [r3, #16]
   12184:	mov	r2, r7
   12188:	ldr	r0, [r4, #76]	; 0x4c
   1218c:	ldr	r3, [r0, #4]
   12190:	cmp	r3, #0
   12194:	bne	121bc <fputs@plt+0xf2c>
   12198:	cmp	r2, #0
   1219c:	beq	121f4 <fputs@plt+0xf64>
   121a0:	ldrb	r3, [r4, #72]	; 0x48
   121a4:	tst	r3, #8
   121a8:	bne	121f4 <fputs@plt+0xf64>
   121ac:	mov	r1, sp
   121b0:	ldr	r0, [r4, #20]
   121b4:	bl	11254 <rb_rawbuf_append@plt>
   121b8:	b	121f4 <fputs@plt+0xf64>
   121bc:	mov	r1, r7
   121c0:	bl	110a4 <inflate@plt>
   121c4:	subs	r8, r0, #0
   121c8:	beq	1221c <fputs@plt+0xf8c>
   121cc:	mov	r2, #6
   121d0:	mov	r1, r6
   121d4:	ldr	r0, [pc, #128]	; 1225c <fputs@plt+0xfcc>
   121d8:	bl	1123c <strncmp@plt>
   121dc:	cmp	r0, #0
   121e0:	bne	121fc <fputs@plt+0xf6c>
   121e4:	ldr	r2, [pc, #116]	; 12260 <fputs@plt+0xfd0>
   121e8:	mov	r1, #1
   121ec:	mov	r0, r4
   121f0:	bl	11ce4 <fputs@plt+0xa54>
   121f4:	add	sp, sp, #16384	; 0x4000
   121f8:	pop	{r4, r5, r6, r7, r8, pc}
   121fc:	mov	r0, r8
   12200:	bl	10f9c <zError@plt>
   12204:	ldr	r2, [pc, #88]	; 12264 <fputs@plt+0xfd4>
   12208:	mov	r1, #1
   1220c:	mov	r3, r0
   12210:	mov	r0, r4
   12214:	bl	11ce4 <fputs@plt+0xa54>
   12218:	b	121f4 <fputs@plt+0xf64>
   1221c:	ldr	r3, [r4, #76]	; 0x4c
   12220:	ldr	r2, [r3, #16]
   12224:	ldr	r3, [r3, #4]
   12228:	rsb	r2, r2, #16384	; 0x4000
   1222c:	cmp	r3, #0
   12230:	beq	12188 <fputs@plt+0xef8>
   12234:	ldrb	r3, [r4, #72]	; 0x48
   12238:	tst	r3, #8
   1223c:	bne	1224c <fputs@plt+0xfbc>
   12240:	mov	r1, sp
   12244:	ldr	r0, [r4, #20]
   12248:	bl	11254 <rb_rawbuf_append@plt>
   1224c:	ldr	r3, [r4, #76]	; 0x4c
   12250:	str	sp, [r3, #12]
   12254:	str	r5, [r3, #16]
   12258:	b	12184 <fputs@plt+0xef4>
   1225c:	andeq	r3, r1, sl, lsl #2
   12260:	andeq	r3, r1, r1, lsl r1
   12264:	andeq	r3, r1, sp, lsr #2
   12268:	push	{r4, r5, r6, r7, lr}
   1226c:	sub	sp, sp, #16384	; 0x4000
   12270:	sub	sp, sp, #4
   12274:	mov	r4, r0
   12278:	mov	r7, #16384	; 0x4000
   1227c:	ldrb	r3, [r4, #72]	; 0x48
   12280:	ands	r6, r3, #8
   12284:	bne	12320 <fputs@plt+0x1090>
   12288:	mov	r2, r7
   1228c:	mov	r1, sp
   12290:	ldr	r0, [r4, #28]
   12294:	bl	110e0 <rb_read@plt>
   12298:	subs	r5, r0, #0
   1229c:	beq	12340 <fputs@plt+0x10b0>
   122a0:	bge	1238c <fputs@plt+0x10fc>
   122a4:	bl	11284 <__errno_location@plt>
   122a8:	mov	r7, r0
   122ac:	ldr	r0, [r0]
   122b0:	bl	10fc0 <rb_ignore_errno@plt>
   122b4:	cmp	r0, #0
   122b8:	bne	1234c <fputs@plt+0x10bc>
   122bc:	ldrb	r3, [r4, #72]	; 0x48
   122c0:	cmn	r5, #2
   122c4:	movne	r5, #0
   122c8:	moveq	r5, #1
   122cc:	tst	r3, r5
   122d0:	beq	122f4 <fputs@plt+0x1064>
   122d4:	ldr	r0, [r4, #28]
   122d8:	bl	1117c <rb_get_ssl_strerror@plt>
   122dc:	ldr	r2, [pc, #224]	; 123c4 <fputs@plt+0x1134>
   122e0:	mov	r3, r0
   122e4:	mov	r1, #1
   122e8:	mov	r0, r4
   122ec:	bl	11ce4 <fputs@plt+0xa54>
   122f0:	b	12320 <fputs@plt+0x1090>
   122f4:	ldr	r0, [r7]
   122f8:	bl	10f84 <strerror@plt>
   122fc:	b	122dc <fputs@plt+0x104c>
   12300:	mov	r3, r4
   12304:	ldr	r2, [pc, #188]	; 123c8 <fputs@plt+0x1138>
   12308:	mov	r1, #1
   1230c:	ldr	r0, [r4, #28]
   12310:	bl	10ff0 <rb_setselect@plt>
   12314:	mov	r1, r4
   12318:	ldr	r0, [r4, #32]
   1231c:	bl	11fe0 <fputs@plt+0xd50>
   12320:	add	sp, sp, #16384	; 0x4000
   12324:	add	sp, sp, #4
   12328:	pop	{r4, r5, r6, r7, pc}
   1232c:	mov	r2, r5
   12330:	mov	r1, sp
   12334:	mov	r0, r4
   12338:	bl	1215c <fputs@plt+0xecc>
   1233c:	b	1227c <fputs@plt+0xfec>
   12340:	ldr	r3, [pc, #132]	; 123cc <fputs@plt+0x113c>
   12344:	ldr	r2, [pc, #132]	; 123d0 <fputs@plt+0x1140>
   12348:	b	122e4 <fputs@plt+0x1054>
   1234c:	cmn	r5, #4
   12350:	bne	12300 <fputs@plt+0x1070>
   12354:	mov	r3, r6
   12358:	mov	r2, r6
   1235c:	mov	r1, #1
   12360:	ldr	r0, [r4, #28]
   12364:	bl	10ff0 <rb_setselect@plt>
   12368:	mov	r3, r4
   1236c:	ldr	r2, [pc, #84]	; 123c8 <fputs@plt+0x1138>
   12370:	mov	r1, #2
   12374:	ldr	r0, [r4, #28]
   12378:	bl	10ff0 <rb_setselect@plt>
   1237c:	ldrb	r3, [r4, #72]	; 0x48
   12380:	orr	r3, r3, #32
   12384:	strb	r3, [r4, #72]	; 0x48
   12388:	b	12314 <fputs@plt+0x1084>
   1238c:	ldrd	r2, [r4, #48]	; 0x30
   12390:	adds	r2, r2, r5
   12394:	adc	r3, r3, r5, asr #31
   12398:	strd	r2, [r4, #48]	; 0x30
   1239c:	ldrb	r3, [r4, #72]	; 0x48
   123a0:	tst	r3, #2
   123a4:	bne	1232c <fputs@plt+0x109c>
   123a8:	tst	r3, #8
   123ac:	bne	1227c <fputs@plt+0xfec>
   123b0:	mov	r2, r5
   123b4:	mov	r1, sp
   123b8:	ldr	r0, [r4, #20]
   123bc:	bl	11254 <rb_rawbuf_append@plt>
   123c0:	b	1227c <fputs@plt+0xfec>
   123c4:	andeq	r3, r1, r0, asr #2
   123c8:	andeq	r2, r1, r0, ror #14
   123cc:	andeq	r3, r1, pc, asr #2
   123d0:	andeq	r3, r1, r1, lsl #3
   123d4:	push	{r4, r5, r6, r7, r8, r9, lr}
   123d8:	sub	sp, sp, #32768	; 0x8000
   123dc:	sub	sp, sp, #4
   123e0:	ldr	r9, [pc, #372]	; 1255c <fputs@plt+0x12cc>
   123e4:	mov	r4, r0
   123e8:	add	r8, sp, #16384	; 0x4000
   123ec:	ldrb	r3, [r4, #72]	; 0x48
   123f0:	tst	r3, #8
   123f4:	bne	12420 <fputs@plt+0x1190>
   123f8:	mov	r2, #16384	; 0x4000
   123fc:	mov	r1, sp
   12400:	ldr	r0, [r4, #32]
   12404:	bl	110e0 <rb_read@plt>
   12408:	subs	r2, r0, #0
   1240c:	bne	1242c <fputs@plt+0x119c>
   12410:	mov	r2, #0
   12414:	mov	r1, r2
   12418:	mov	r0, r4
   1241c:	bl	11ce4 <fputs@plt+0xa54>
   12420:	add	sp, sp, #32768	; 0x8000
   12424:	add	sp, sp, #4
   12428:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1242c:	bge	12530 <fputs@plt+0x12a0>
   12430:	bl	11284 <__errno_location@plt>
   12434:	ldr	r0, [r0]
   12438:	bl	10fc0 <rb_ignore_errno@plt>
   1243c:	cmp	r0, #0
   12440:	movne	r3, r4
   12444:	ldrne	r2, [pc, #276]	; 12560 <fputs@plt+0x12d0>
   12448:	beq	12410 <fputs@plt+0x1180>
   1244c:	ldr	r0, [r4, #32]
   12450:	mov	r1, #1
   12454:	bl	10ff0 <rb_setselect@plt>
   12458:	mov	r1, r4
   1245c:	ldr	r0, [r4, #28]
   12460:	bl	125d4 <fputs@plt+0x1344>
   12464:	b	12420 <fputs@plt+0x1190>
   12468:	ldr	r5, [r4, #76]	; 0x4c
   1246c:	mov	r3, #16384	; 0x4000
   12470:	mov	r1, #2
   12474:	str	sp, [r5, #56]	; 0x38
   12478:	str	r2, [r5, #60]	; 0x3c
   1247c:	str	r8, [r5, #68]	; 0x44
   12480:	str	r3, [r5, #72]	; 0x48
   12484:	add	r0, r5, #56	; 0x38
   12488:	bl	11044 <deflate@plt>
   1248c:	cmp	r0, #0
   12490:	beq	124e0 <fputs@plt+0x1250>
   12494:	bl	10f9c <zError@plt>
   12498:	ldr	r2, [pc, #196]	; 12564 <fputs@plt+0x12d4>
   1249c:	mov	r1, #1
   124a0:	mov	r3, r0
   124a4:	mov	r0, r4
   124a8:	bl	11ce4 <fputs@plt+0xa54>
   124ac:	ldrb	r3, [r4, #72]	; 0x48
   124b0:	ands	r5, r3, #8
   124b4:	bne	12420 <fputs@plt+0x1190>
   124b8:	ldr	r0, [r4, #16]
   124bc:	bl	11164 <rb_rawbuf_length@plt>
   124c0:	cmp	r0, r9
   124c4:	ble	123ec <fputs@plt+0x115c>
   124c8:	ldrb	r3, [r4, #72]	; 0x48
   124cc:	mov	r2, r5
   124d0:	orr	r3, r3, #4
   124d4:	strb	r3, [r4, #72]	; 0x48
   124d8:	mov	r3, r5
   124dc:	b	1244c <fputs@plt+0x11bc>
   124e0:	ldr	r2, [r5, #72]	; 0x48
   124e4:	cmp	r2, #0
   124e8:	ldreq	r2, [pc, #120]	; 12568 <fputs@plt+0x12d8>
   124ec:	beq	12500 <fputs@plt+0x1270>
   124f0:	ldr	r3, [r5, #60]	; 0x3c
   124f4:	cmp	r3, #0
   124f8:	beq	12510 <fputs@plt+0x1280>
   124fc:	ldr	r2, [pc, #104]	; 1256c <fputs@plt+0x12dc>
   12500:	mov	r1, #1
   12504:	mov	r0, r4
   12508:	bl	11ce4 <fputs@plt+0xa54>
   1250c:	b	124ac <fputs@plt+0x121c>
   12510:	ldrb	r3, [r4, #72]	; 0x48
   12514:	tst	r3, #8
   12518:	rsbeq	r2, r2, #16384	; 0x4000
   1251c:	moveq	r1, r8
   12520:	bne	124ac <fputs@plt+0x121c>
   12524:	ldr	r0, [r4, #16]
   12528:	bl	11254 <rb_rawbuf_append@plt>
   1252c:	b	124ac <fputs@plt+0x121c>
   12530:	ldrd	r6, [r4, #56]	; 0x38
   12534:	ldrb	r3, [r4, #72]	; 0x48
   12538:	adds	r6, r6, r2
   1253c:	adc	r7, r7, r2, asr #31
   12540:	tst	r3, #2
   12544:	strd	r6, [r4, #56]	; 0x38
   12548:	bne	12468 <fputs@plt+0x11d8>
   1254c:	tst	r3, #8
   12550:	bne	124ac <fputs@plt+0x121c>
   12554:	mov	r1, sp
   12558:	b	12524 <fputs@plt+0x1294>
   1255c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12560:	andeq	r2, r1, r0, ror r5
   12564:	andeq	r3, r1, r1, ror r1
   12568:	andeq	r3, r1, r4, lsl #3
   1256c:	andeq	r3, r1, fp, lsr #3
   12570:	push	{r4, r5, r6, lr}
   12574:	subs	r4, r1, #0
   12578:	popeq	{r4, r5, r6, pc}
   1257c:	ldrb	r3, [r4, #72]	; 0x48
   12580:	ands	r5, r3, #8
   12584:	popne	{r4, r5, r6, pc}
   12588:	ldr	r0, [r4, #16]
   1258c:	bl	11164 <rb_rawbuf_length@plt>
   12590:	cmp	r0, #4096	; 0x1000
   12594:	blt	125c8 <fputs@plt+0x1338>
   12598:	ldrb	r3, [r4, #72]	; 0x48
   1259c:	ldr	r0, [r4, #32]
   125a0:	mov	r2, r5
   125a4:	orr	r3, r3, #4
   125a8:	strb	r3, [r4, #72]	; 0x48
   125ac:	mov	r1, #1
   125b0:	mov	r3, r5
   125b4:	bl	10ff0 <rb_setselect@plt>
   125b8:	mov	r1, r4
   125bc:	ldr	r0, [r4, #28]
   125c0:	pop	{r4, r5, r6, lr}
   125c4:	b	125d4 <fputs@plt+0x1344>
   125c8:	mov	r0, r4
   125cc:	pop	{r4, r5, r6, lr}
   125d0:	b	123d4 <fputs@plt+0x1144>
   125d4:	ldrb	r3, [r1, #72]	; 0x48
   125d8:	tst	r3, #8
   125dc:	bxne	lr
   125e0:	tst	r3, #16
   125e4:	push	{r4, r5, r6, lr}
   125e8:	mov	r4, r1
   125ec:	mov	r6, r0
   125f0:	beq	12624 <fputs@plt+0x1394>
   125f4:	bic	r3, r3, #16
   125f8:	strb	r3, [r1, #72]	; 0x48
   125fc:	ldr	r0, [r1, #28]
   12600:	bl	12760 <fputs@plt+0x14d0>
   12604:	ldrb	r3, [r4, #72]	; 0x48
   12608:	tst	r3, #8
   1260c:	beq	12624 <fputs@plt+0x1394>
   12610:	pop	{r4, r5, r6, pc}
   12614:	ldrd	r2, [r4, #40]	; 0x28
   12618:	adds	r2, r2, r5
   1261c:	adc	r3, r3, r5, asr #31
   12620:	strd	r2, [r4, #40]	; 0x28
   12624:	mov	r1, r6
   12628:	ldr	r0, [r4, #16]
   1262c:	bl	11260 <rb_rawbuf_flush@plt>
   12630:	subs	r5, r0, #0
   12634:	bgt	12614 <fputs@plt+0x1384>
   12638:	beq	12738 <fputs@plt+0x14a8>
   1263c:	bl	11284 <__errno_location@plt>
   12640:	ldr	r0, [r0]
   12644:	bl	10fc0 <rb_ignore_errno@plt>
   12648:	cmp	r0, #0
   1264c:	bne	12698 <fputs@plt+0x1408>
   12650:	ldrb	r3, [r4, #72]	; 0x48
   12654:	cmn	r5, #2
   12658:	movne	r5, #0
   1265c:	moveq	r5, #1
   12660:	tst	r3, r5
   12664:	beq	12688 <fputs@plt+0x13f8>
   12668:	ldr	r0, [r4, #28]
   1266c:	bl	1117c <rb_get_ssl_strerror@plt>
   12670:	mov	r3, r0
   12674:	ldr	r2, [pc, #212]	; 12750 <fputs@plt+0x14c0>
   12678:	mov	r0, r4
   1267c:	mov	r1, #1
   12680:	pop	{r4, r5, r6, lr}
   12684:	b	11ce4 <fputs@plt+0xa54>
   12688:	bl	11284 <__errno_location@plt>
   1268c:	ldr	r0, [r0]
   12690:	bl	10f84 <strerror@plt>
   12694:	b	12670 <fputs@plt+0x13e0>
   12698:	ldr	r0, [r4, #16]
   1269c:	bl	11164 <rb_rawbuf_length@plt>
   126a0:	cmp	r0, #0
   126a4:	ble	1272c <fputs@plt+0x149c>
   126a8:	cmn	r5, #3
   126ac:	mov	r3, r4
   126b0:	ldr	r2, [pc, #156]	; 12754 <fputs@plt+0x14c4>
   126b4:	beq	126c8 <fputs@plt+0x1438>
   126b8:	mov	r1, #2
   126bc:	ldr	r0, [r4, #28]
   126c0:	bl	10ff0 <rb_setselect@plt>
   126c4:	b	126f4 <fputs@plt+0x1464>
   126c8:	mov	r1, #1
   126cc:	ldr	r0, [r4, #28]
   126d0:	bl	10ff0 <rb_setselect@plt>
   126d4:	mov	r3, #0
   126d8:	mov	r2, r3
   126dc:	mov	r1, #2
   126e0:	ldr	r0, [r4, #28]
   126e4:	bl	10ff0 <rb_setselect@plt>
   126e8:	ldrb	r3, [r4, #72]	; 0x48
   126ec:	orr	r3, r3, #16
   126f0:	strb	r3, [r4, #72]	; 0x48
   126f4:	ldrb	r3, [r4, #72]	; 0x48
   126f8:	tst	r3, #4
   126fc:	popeq	{r4, r5, r6, pc}
   12700:	ldr	r0, [r4, #16]
   12704:	bl	11164 <rb_rawbuf_length@plt>
   12708:	cmp	r0, #0
   1270c:	popne	{r4, r5, r6, pc}
   12710:	ldrb	r3, [r4, #72]	; 0x48
   12714:	mov	r1, r4
   12718:	ldr	r0, [r4, #32]
   1271c:	bic	r3, r3, #4
   12720:	strb	r3, [r4, #72]	; 0x48
   12724:	pop	{r4, r5, r6, lr}
   12728:	b	12570 <fputs@plt+0x12e0>
   1272c:	mov	r3, #0
   12730:	mov	r2, r3
   12734:	b	126b8 <fputs@plt+0x1428>
   12738:	ldr	r3, [pc, #24]	; 12758 <fputs@plt+0x14c8>
   1273c:	ldr	r2, [pc, #24]	; 1275c <fputs@plt+0x14cc>
   12740:	mov	r1, #1
   12744:	mov	r0, r4
   12748:	bl	11ce4 <fputs@plt+0xa54>
   1274c:	b	12650 <fputs@plt+0x13c0>
   12750:	ldrdeq	r3, [r1], -r1
   12754:	ldrdeq	r2, [r1], -r4
   12758:	andeq	r3, r1, pc, asr #2
   1275c:	andeq	r3, r1, r1, lsl #3
   12760:	push	{r4, lr}
   12764:	subs	r4, r1, #0
   12768:	popeq	{r4, pc}
   1276c:	ldrb	r3, [r4, #72]	; 0x48
   12770:	tst	r3, #8
   12774:	popne	{r4, pc}
   12778:	tst	r3, #32
   1277c:	bne	1278c <fputs@plt+0x14fc>
   12780:	mov	r0, r4
   12784:	pop	{r4, lr}
   12788:	b	12268 <fputs@plt+0xfd8>
   1278c:	bic	r3, r3, #32
   12790:	strb	r3, [r4, #72]	; 0x48
   12794:	ldr	r0, [r4, #28]
   12798:	bl	125d4 <fputs@plt+0x1344>
   1279c:	ldrb	r3, [r4, #72]	; 0x48
   127a0:	tst	r3, #8
   127a4:	beq	12780 <fputs@plt+0x14f0>
   127a8:	pop	{r4, pc}
   127ac:	push	{r0, r1, r4, lr}
   127b0:	cmp	r1, #0
   127b4:	ldr	r4, [sp, #16]
   127b8:	bne	1280c <fputs@plt+0x157c>
   127bc:	mov	r0, r4
   127c0:	bl	11eb4 <fputs@plt+0xc24>
   127c4:	mov	r0, r4
   127c8:	bl	11f28 <fputs@plt+0xc98>
   127cc:	mov	r3, #79	; 0x4f
   127d0:	strb	r3, [sp]
   127d4:	ldr	r3, [r4, #24]
   127d8:	mov	r2, #5
   127dc:	mov	r1, sp
   127e0:	ldr	r0, [r4, #12]
   127e4:	str	r3, [sp, #1]
   127e8:	bl	11c84 <fputs@plt+0x9f4>
   127ec:	mov	r1, r4
   127f0:	ldr	r0, [r4, #28]
   127f4:	bl	12760 <fputs@plt+0x14d0>
   127f8:	mov	r1, r4
   127fc:	ldr	r0, [r4, #32]
   12800:	bl	12570 <fputs@plt+0x12e0>
   12804:	add	sp, sp, #8
   12808:	pop	{r4, pc}
   1280c:	mov	r2, #0
   12810:	mov	r1, r2
   12814:	mov	r0, r4
   12818:	bl	11ce4 <fputs@plt+0xa54>
   1281c:	b	12804 <fputs@plt+0x1574>
   12820:	push	{r0, r1, r4, lr}
   12824:	cmp	r1, #0
   12828:	mov	r4, r2
   1282c:	bne	12880 <fputs@plt+0x15f0>
   12830:	mov	r0, r2
   12834:	bl	11eb4 <fputs@plt+0xc24>
   12838:	mov	r0, r4
   1283c:	bl	11f28 <fputs@plt+0xc98>
   12840:	mov	r3, #79	; 0x4f
   12844:	strb	r3, [sp]
   12848:	ldr	r3, [r4, #24]
   1284c:	mov	r2, #5
   12850:	mov	r1, sp
   12854:	ldr	r0, [r4, #12]
   12858:	str	r3, [sp, #1]
   1285c:	bl	11c84 <fputs@plt+0x9f4>
   12860:	mov	r1, r4
   12864:	ldr	r0, [r4, #28]
   12868:	bl	12760 <fputs@plt+0x14d0>
   1286c:	mov	r1, r4
   12870:	ldr	r0, [r4, #32]
   12874:	bl	12570 <fputs@plt+0x12e0>
   12878:	add	sp, sp, #8
   1287c:	pop	{r4, pc}
   12880:	cmp	r1, #3
   12884:	ldreq	r2, [pc, #60]	; 128c8 <fputs@plt+0x1638>
   12888:	beq	128b8 <fputs@plt+0x1628>
   1288c:	cmp	r1, #6
   12890:	ldrne	r2, [pc, #52]	; 128cc <fputs@plt+0x163c>
   12894:	bne	128b8 <fputs@plt+0x1628>
   12898:	ldr	r0, [r4, #28]
   1289c:	bl	1117c <rb_get_ssl_strerror@plt>
   128a0:	ldr	r2, [pc, #40]	; 128d0 <fputs@plt+0x1640>
   128a4:	mov	r1, #1
   128a8:	mov	r3, r0
   128ac:	mov	r0, r4
   128b0:	bl	11ce4 <fputs@plt+0xa54>
   128b4:	b	12878 <fputs@plt+0x15e8>
   128b8:	mov	r1, #1
   128bc:	mov	r0, r4
   128c0:	bl	11ce4 <fputs@plt+0xa54>
   128c4:	b	12878 <fputs@plt+0x15e8>
   128c8:	andeq	r3, r1, r1, ror #3
   128cc:	strdeq	r3, [r1], -r9
   128d0:	andeq	r3, r1, r1, lsl #3
   128d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128d8:	mov	r5, r1
   128dc:	sub	sp, sp, #28
   128e0:	mov	r7, #16384	; 0x4000
   128e4:	mov	r8, #4
   128e8:	add	r9, r1, #24
   128ec:	mov	r0, #40	; 0x28
   128f0:	bl	11838 <fputs@plt+0x5a8>
   128f4:	mov	r4, r0
   128f8:	mov	r0, r7
   128fc:	bl	11838 <fputs@plt+0x5a8>
   12900:	add	r6, r4, #20
   12904:	str	r7, [r4, #16]
   12908:	mov	r3, r6
   1290c:	mov	r2, #16384	; 0x4000
   12910:	str	r0, [r4, #12]
   12914:	mov	r1, r0
   12918:	str	r8, [sp]
   1291c:	ldr	r0, [r5, #16]
   12920:	bl	11200 <rb_recv_fd_buf@plt>
   12924:	subs	sl, r0, #0
   12928:	bgt	1294c <fputs@plt+0x16bc>
   1292c:	ldr	r0, [r4, #12]
   12930:	bl	117a0 <fputs@plt+0x510>
   12934:	mov	r0, r4
   12938:	bl	117a0 <fputs@plt+0x510>
   1293c:	cmp	sl, #0
   12940:	bne	12984 <fputs@plt+0x16f4>
   12944:	mov	r0, #0
   12948:	bl	11278 <exit@plt>
   1294c:	str	sl, [r4, #16]
   12950:	mov	r2, r9
   12954:	mov	r1, r4
   12958:	mov	r0, r4
   1295c:	bl	11be0 <fputs@plt+0x950>
   12960:	mov	r3, #0
   12964:	ldr	r2, [r6], #4
   12968:	cmp	r2, #0
   1296c:	beq	1297c <fputs@plt+0x16ec>
   12970:	add	r3, r3, #1
   12974:	cmp	r3, #4
   12978:	bne	12964 <fputs@plt+0x16d4>
   1297c:	str	r3, [r4, #36]	; 0x24
   12980:	b	128ec <fputs@plt+0x165c>
   12984:	bl	11284 <__errno_location@plt>
   12988:	ldr	r0, [r0]
   1298c:	bl	10fc0 <rb_ignore_errno@plt>
   12990:	cmp	r0, #0
   12994:	beq	12944 <fputs@plt+0x16b4>
   12998:	ldr	r8, [r5, #24]
   1299c:	cmp	r8, #0
   129a0:	ldrne	r9, [r8, #8]
   129a4:	ldrne	sl, [pc, #1012]	; 12da0 <fputs@plt+0x1b10>
   129a8:	bne	129c8 <fputs@plt+0x1738>
   129ac:	mov	r3, r5
   129b0:	ldr	r2, [pc, #1004]	; 12da4 <fputs@plt+0x1b14>
   129b4:	mov	r1, #1
   129b8:	ldr	r0, [r5, #16]
   129bc:	add	sp, sp, #28
   129c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129c4:	b	10ff0 <rb_setselect@plt>
   129c8:	ldr	r4, [r8]
   129cc:	ldr	r1, [r4, #12]
   129d0:	ldrb	r3, [r1]
   129d4:	cmp	r3, #70	; 0x46
   129d8:	beq	12c24 <fputs@plt+0x1994>
   129dc:	bhi	12a20 <fputs@plt+0x1790>
   129e0:	cmp	r3, #65	; 0x41
   129e4:	beq	12ad4 <fputs@plt+0x1844>
   129e8:	cmp	r3, #67	; 0x43
   129ec:	beq	12b90 <fputs@plt+0x1900>
   129f0:	add	r1, r5, #24
   129f4:	mov	r0, r8
   129f8:	bl	118ec <fputs@plt+0x65c>
   129fc:	ldr	r0, [r4, #12]
   12a00:	bl	117a0 <fputs@plt+0x510>
   12a04:	mov	r0, r4
   12a08:	bl	117a0 <fputs@plt+0x510>
   12a0c:	cmp	r9, #0
   12a10:	beq	129ac <fputs@plt+0x171c>
   12a14:	mov	r8, r9
   12a18:	ldr	r9, [r9, #8]
   12a1c:	b	129c8 <fputs@plt+0x1738>
   12a20:	cmp	r3, #83	; 0x53
   12a24:	beq	12c3c <fputs@plt+0x19ac>
   12a28:	cmp	r3, #90	; 0x5a
   12a2c:	beq	12c48 <fputs@plt+0x19b8>
   12a30:	cmp	r3, #75	; 0x4b
   12a34:	bne	129f0 <fputs@plt+0x1760>
   12a38:	ldrb	r3, [sl, #-532]	; 0xfffffdec
   12a3c:	cmp	r3, #0
   12a40:	beq	12b04 <fputs@plt+0x1874>
   12a44:	add	r6, r1, #2
   12a48:	mov	r0, r6
   12a4c:	bl	110f8 <strlen@plt>
   12a50:	add	r1, r0, #1
   12a54:	add	r7, r6, r1
   12a58:	mov	r0, r7
   12a5c:	str	r1, [sp, #12]
   12a60:	bl	110f8 <strlen@plt>
   12a64:	add	r0, r0, #1
   12a68:	add	fp, r7, r0
   12a6c:	mov	r0, fp
   12a70:	bl	110f8 <strlen@plt>
   12a74:	ldr	r1, [sp, #12]
   12a78:	ldrb	r2, [fp]
   12a7c:	ldrb	r1, [r6, r1]
   12a80:	add	r0, r0, #1
   12a84:	add	r0, fp, r0
   12a88:	ldrb	r3, [r0]
   12a8c:	cmp	r3, #0
   12a90:	movne	r3, r0
   12a94:	moveq	r3, #0
   12a98:	cmp	r2, #0
   12a9c:	movne	r2, fp
   12aa0:	moveq	r2, #0
   12aa4:	cmp	r1, #0
   12aa8:	movne	r1, r7
   12aac:	moveq	r1, r6
   12ab0:	mov	r0, r6
   12ab4:	bl	1126c <rb_setup_ssl_server@plt>
   12ab8:	cmp	r0, #0
   12abc:	bne	129f0 <fputs@plt+0x1760>
   12ac0:	mov	r2, #1
   12ac4:	ldr	r1, [pc, #732]	; 12da8 <fputs@plt+0x1b18>
   12ac8:	mov	r0, r5
   12acc:	bl	11c84 <fputs@plt+0x9f4>
   12ad0:	b	129f0 <fputs@plt+0x1760>
   12ad4:	ldr	r3, [r4, #36]	; 0x24
   12ad8:	cmp	r3, #2
   12adc:	bne	12aec <fputs@plt+0x185c>
   12ae0:	ldr	r3, [r4, #16]
   12ae4:	cmp	r3, #5
   12ae8:	beq	12af8 <fputs@plt+0x1868>
   12aec:	mov	r0, r4
   12af0:	bl	118bc <fputs@plt+0x62c>
   12af4:	b	129f0 <fputs@plt+0x1760>
   12af8:	ldrb	r3, [sl, #-532]	; 0xfffffdec
   12afc:	cmp	r3, #0
   12b00:	bne	12b14 <fputs@plt+0x1884>
   12b04:	mov	r1, r4
   12b08:	mov	r0, r5
   12b0c:	bl	11f88 <fputs@plt+0xcf8>
   12b10:	b	129f0 <fputs@plt+0x1760>
   12b14:	ldr	r2, [r4, #24]
   12b18:	ldr	r1, [r4, #20]
   12b1c:	mov	r0, r5
   12b20:	bl	1185c <fputs@plt+0x5cc>
   12b24:	ldr	r3, [r4, #12]
   12b28:	ldr	r1, [r3, #1]
   12b2c:	mov	r6, r0
   12b30:	bl	11b1c <fputs@plt+0x88c>
   12b34:	ldrb	r3, [r6, #72]	; 0x48
   12b38:	ldr	r0, [r6, #28]
   12b3c:	orr	r3, r3, #1
   12b40:	strb	r3, [r6, #72]	; 0x48
   12b44:	bl	10f90 <rb_get_type@plt>
   12b48:	tst	r0, #64	; 0x40
   12b4c:	beq	12b5c <fputs@plt+0x18cc>
   12b50:	mov	r1, #4
   12b54:	ldr	r0, [r6, #28]
   12b58:	bl	110ec <rb_set_type@plt>
   12b5c:	ldr	r0, [r6, #32]
   12b60:	bl	10f90 <rb_get_type@plt>
   12b64:	cmp	r0, #64	; 0x40
   12b68:	bne	12b78 <fputs@plt+0x18e8>
   12b6c:	mov	r1, #4
   12b70:	ldr	r0, [r6, #32]
   12b74:	bl	110ec <rb_set_type@plt>
   12b78:	mov	r3, #10
   12b7c:	mov	r2, r6
   12b80:	ldr	r1, [pc, #548]	; 12dac <fputs@plt+0x1b1c>
   12b84:	ldr	r0, [r4, #20]
   12b88:	bl	1120c <rb_ssl_start_accepted@plt>
   12b8c:	b	129f0 <fputs@plt+0x1760>
   12b90:	ldr	r3, [r4, #16]
   12b94:	cmp	r3, #5
   12b98:	bne	12aec <fputs@plt+0x185c>
   12b9c:	ldrb	r3, [sl, #-532]	; 0xfffffdec
   12ba0:	cmp	r3, #0
   12ba4:	beq	12b04 <fputs@plt+0x1874>
   12ba8:	ldr	r2, [r4, #24]
   12bac:	ldr	r1, [r4, #20]
   12bb0:	mov	r0, r5
   12bb4:	bl	1185c <fputs@plt+0x5cc>
   12bb8:	ldr	r3, [r4, #12]
   12bbc:	ldr	r1, [r3, #1]
   12bc0:	mov	r6, r0
   12bc4:	bl	11b1c <fputs@plt+0x88c>
   12bc8:	ldrb	r3, [r6, #72]	; 0x48
   12bcc:	ldr	r0, [r6, #28]
   12bd0:	orr	r3, r3, #1
   12bd4:	strb	r3, [r6, #72]	; 0x48
   12bd8:	bl	10f90 <rb_get_type@plt>
   12bdc:	cmp	r0, #64	; 0x40
   12be0:	bne	12bf0 <fputs@plt+0x1960>
   12be4:	mov	r1, #4
   12be8:	ldr	r0, [r6, #28]
   12bec:	bl	110ec <rb_set_type@plt>
   12bf0:	ldr	r0, [r6, #32]
   12bf4:	bl	10f90 <rb_get_type@plt>
   12bf8:	cmp	r0, #64	; 0x40
   12bfc:	bne	12c0c <fputs@plt+0x197c>
   12c00:	mov	r1, #4
   12c04:	ldr	r0, [r6, #32]
   12c08:	bl	110ec <rb_set_type@plt>
   12c0c:	mov	r3, #10
   12c10:	mov	r2, r6
   12c14:	ldr	r1, [pc, #404]	; 12db0 <fputs@plt+0x1b20>
   12c18:	ldr	r0, [r4, #20]
   12c1c:	bl	111c4 <rb_ssl_start_connected@plt>
   12c20:	b	129f0 <fputs@plt+0x1760>
   12c24:	ldr	r3, [r4, #16]
   12c28:	cmp	r3, #5
   12c2c:	ldreq	r3, [r1, #1]
   12c30:	streq	r3, [sl, #-536]	; 0xfffffde8
   12c34:	bne	12aec <fputs@plt+0x185c>
   12c38:	b	129f0 <fputs@plt+0x1760>
   12c3c:	mov	r0, r5
   12c40:	bl	12088 <fputs@plt+0xdf8>
   12c44:	b	129f0 <fputs@plt+0x1760>
   12c48:	ldr	r3, [r4, #36]	; 0x24
   12c4c:	cmp	r3, #2
   12c50:	bne	12aec <fputs@plt+0x185c>
   12c54:	ldr	r3, [r4, #16]
   12c58:	cmp	r3, #5
   12c5c:	bls	12aec <fputs@plt+0x185c>
   12c60:	ldr	r2, [r4, #24]
   12c64:	ldr	r1, [r4, #20]
   12c68:	mov	r0, r5
   12c6c:	bl	1185c <fputs@plt+0x5cc>
   12c70:	mov	r6, r0
   12c74:	ldr	r0, [r0, #28]
   12c78:	bl	10f90 <rb_get_type@plt>
   12c7c:	cmp	r0, #64	; 0x40
   12c80:	bne	12c90 <fputs@plt+0x1a00>
   12c84:	mov	r1, #4
   12c88:	ldr	r0, [r6, #28]
   12c8c:	bl	110ec <rb_set_type@plt>
   12c90:	ldr	r0, [r6, #32]
   12c94:	bl	10f90 <rb_get_type@plt>
   12c98:	cmp	r0, #64	; 0x40
   12c9c:	bne	12cac <fputs@plt+0x1a1c>
   12ca0:	mov	r1, #4
   12ca4:	ldr	r0, [r6, #32]
   12ca8:	bl	110ec <rb_set_type@plt>
   12cac:	ldr	r3, [r4, #12]
   12cb0:	mov	r0, r6
   12cb4:	ldr	r1, [r3, #1]
   12cb8:	bl	11b1c <fputs@plt+0x88c>
   12cbc:	ldr	r3, [r4, #12]
   12cc0:	ldr	fp, [r4, #16]
   12cc4:	str	r3, [sp, #12]
   12cc8:	ldrb	r3, [r3, #5]
   12ccc:	mov	r0, #112	; 0x70
   12cd0:	sub	fp, fp, #6
   12cd4:	str	r3, [sp, #16]
   12cd8:	ldrb	r3, [r6, #72]	; 0x48
   12cdc:	orr	r3, r3, #2
   12ce0:	strb	r3, [r6, #72]	; 0x48
   12ce4:	bl	11838 <fputs@plt+0x5a8>
   12ce8:	mov	r3, #0
   12cec:	str	r3, [sp, #20]
   12cf0:	mov	r2, #56	; 0x38
   12cf4:	ldr	r1, [pc, #184]	; 12db4 <fputs@plt+0x1b24>
   12cf8:	str	r0, [r6, #76]	; 0x4c
   12cfc:	str	r3, [r0, #8]
   12d00:	str	r3, [r0, #20]
   12d04:	ldr	r3, [pc, #172]	; 12db8 <fputs@plt+0x1b28>
   12d08:	mov	r7, r0
   12d0c:	str	r3, [r0, #32]
   12d10:	ldr	r3, [pc, #164]	; 12dbc <fputs@plt+0x1b2c>
   12d14:	str	r3, [r0, #36]	; 0x24
   12d18:	mov	r3, #1
   12d1c:	str	r3, [r0, #44]	; 0x2c
   12d20:	bl	111f4 <inflateInit_@plt>
   12d24:	ldr	r3, [sp, #20]
   12d28:	ldr	r1, [sp, #16]
   12d2c:	str	r3, [r7, #64]	; 0x40
   12d30:	str	r3, [r7, #76]	; 0x4c
   12d34:	ldr	r3, [pc, #124]	; 12db8 <fputs@plt+0x1b28>
   12d38:	ldr	r0, [r6, #76]	; 0x4c
   12d3c:	str	r3, [r7, #88]	; 0x58
   12d40:	ldr	r3, [pc, #116]	; 12dbc <fputs@plt+0x1b2c>
   12d44:	cmp	r1, #9
   12d48:	str	r3, [r7, #92]	; 0x5c
   12d4c:	mov	r3, #1
   12d50:	str	r3, [r7, #100]	; 0x64
   12d54:	mov	r3, #56	; 0x38
   12d58:	movhi	r1, #255	; 0xff
   12d5c:	ldr	r2, [pc, #80]	; 12db4 <fputs@plt+0x1b24>
   12d60:	add	r0, r0, r3
   12d64:	bl	11050 <deflateInit_@plt>
   12d68:	cmp	fp, #0
   12d6c:	beq	12d84 <fputs@plt+0x1af4>
   12d70:	ldr	r3, [sp, #12]
   12d74:	mov	r2, fp
   12d78:	add	r1, r3, #6
   12d7c:	mov	r0, r6
   12d80:	bl	1215c <fputs@plt+0xecc>
   12d84:	mov	r1, r6
   12d88:	ldr	r0, [r6, #28]
   12d8c:	bl	12760 <fputs@plt+0x14d0>
   12d90:	mov	r1, r6
   12d94:	ldr	r0, [r6, #32]
   12d98:	bl	12570 <fputs@plt+0x12e0>
   12d9c:	b	129f0 <fputs@plt+0x1760>
   12da0:	andeq	sl, r2, r8, lsl r1
   12da4:	ldrdeq	r2, [r1], -r4
   12da8:	andeq	r3, r1, lr, lsl #4
   12dac:	andeq	r2, r1, ip, lsr #15
   12db0:	andeq	r2, r1, r0, lsr #16
   12db4:	andeq	r3, r1, r0, lsl r2
   12db8:	andeq	r1, r1, r4, asr r8
   12dbc:	andeq	r1, r1, ip, lsr #15
   12dc0:	subs	r2, r1, #1
   12dc4:	bxeq	lr
   12dc8:	bcc	12fa0 <fputs@plt+0x1d10>
   12dcc:	cmp	r0, r1
   12dd0:	bls	12f84 <fputs@plt+0x1cf4>
   12dd4:	tst	r1, r2
   12dd8:	beq	12f90 <fputs@plt+0x1d00>
   12ddc:	clz	r3, r0
   12de0:	clz	r2, r1
   12de4:	sub	r3, r2, r3
   12de8:	rsbs	r3, r3, #31
   12dec:	addne	r3, r3, r3, lsl #1
   12df0:	mov	r2, #0
   12df4:	addne	pc, pc, r3, lsl #2
   12df8:	nop			; (mov r0, r0)
   12dfc:	cmp	r0, r1, lsl #31
   12e00:	adc	r2, r2, r2
   12e04:	subcs	r0, r0, r1, lsl #31
   12e08:	cmp	r0, r1, lsl #30
   12e0c:	adc	r2, r2, r2
   12e10:	subcs	r0, r0, r1, lsl #30
   12e14:	cmp	r0, r1, lsl #29
   12e18:	adc	r2, r2, r2
   12e1c:	subcs	r0, r0, r1, lsl #29
   12e20:	cmp	r0, r1, lsl #28
   12e24:	adc	r2, r2, r2
   12e28:	subcs	r0, r0, r1, lsl #28
   12e2c:	cmp	r0, r1, lsl #27
   12e30:	adc	r2, r2, r2
   12e34:	subcs	r0, r0, r1, lsl #27
   12e38:	cmp	r0, r1, lsl #26
   12e3c:	adc	r2, r2, r2
   12e40:	subcs	r0, r0, r1, lsl #26
   12e44:	cmp	r0, r1, lsl #25
   12e48:	adc	r2, r2, r2
   12e4c:	subcs	r0, r0, r1, lsl #25
   12e50:	cmp	r0, r1, lsl #24
   12e54:	adc	r2, r2, r2
   12e58:	subcs	r0, r0, r1, lsl #24
   12e5c:	cmp	r0, r1, lsl #23
   12e60:	adc	r2, r2, r2
   12e64:	subcs	r0, r0, r1, lsl #23
   12e68:	cmp	r0, r1, lsl #22
   12e6c:	adc	r2, r2, r2
   12e70:	subcs	r0, r0, r1, lsl #22
   12e74:	cmp	r0, r1, lsl #21
   12e78:	adc	r2, r2, r2
   12e7c:	subcs	r0, r0, r1, lsl #21
   12e80:	cmp	r0, r1, lsl #20
   12e84:	adc	r2, r2, r2
   12e88:	subcs	r0, r0, r1, lsl #20
   12e8c:	cmp	r0, r1, lsl #19
   12e90:	adc	r2, r2, r2
   12e94:	subcs	r0, r0, r1, lsl #19
   12e98:	cmp	r0, r1, lsl #18
   12e9c:	adc	r2, r2, r2
   12ea0:	subcs	r0, r0, r1, lsl #18
   12ea4:	cmp	r0, r1, lsl #17
   12ea8:	adc	r2, r2, r2
   12eac:	subcs	r0, r0, r1, lsl #17
   12eb0:	cmp	r0, r1, lsl #16
   12eb4:	adc	r2, r2, r2
   12eb8:	subcs	r0, r0, r1, lsl #16
   12ebc:	cmp	r0, r1, lsl #15
   12ec0:	adc	r2, r2, r2
   12ec4:	subcs	r0, r0, r1, lsl #15
   12ec8:	cmp	r0, r1, lsl #14
   12ecc:	adc	r2, r2, r2
   12ed0:	subcs	r0, r0, r1, lsl #14
   12ed4:	cmp	r0, r1, lsl #13
   12ed8:	adc	r2, r2, r2
   12edc:	subcs	r0, r0, r1, lsl #13
   12ee0:	cmp	r0, r1, lsl #12
   12ee4:	adc	r2, r2, r2
   12ee8:	subcs	r0, r0, r1, lsl #12
   12eec:	cmp	r0, r1, lsl #11
   12ef0:	adc	r2, r2, r2
   12ef4:	subcs	r0, r0, r1, lsl #11
   12ef8:	cmp	r0, r1, lsl #10
   12efc:	adc	r2, r2, r2
   12f00:	subcs	r0, r0, r1, lsl #10
   12f04:	cmp	r0, r1, lsl #9
   12f08:	adc	r2, r2, r2
   12f0c:	subcs	r0, r0, r1, lsl #9
   12f10:	cmp	r0, r1, lsl #8
   12f14:	adc	r2, r2, r2
   12f18:	subcs	r0, r0, r1, lsl #8
   12f1c:	cmp	r0, r1, lsl #7
   12f20:	adc	r2, r2, r2
   12f24:	subcs	r0, r0, r1, lsl #7
   12f28:	cmp	r0, r1, lsl #6
   12f2c:	adc	r2, r2, r2
   12f30:	subcs	r0, r0, r1, lsl #6
   12f34:	cmp	r0, r1, lsl #5
   12f38:	adc	r2, r2, r2
   12f3c:	subcs	r0, r0, r1, lsl #5
   12f40:	cmp	r0, r1, lsl #4
   12f44:	adc	r2, r2, r2
   12f48:	subcs	r0, r0, r1, lsl #4
   12f4c:	cmp	r0, r1, lsl #3
   12f50:	adc	r2, r2, r2
   12f54:	subcs	r0, r0, r1, lsl #3
   12f58:	cmp	r0, r1, lsl #2
   12f5c:	adc	r2, r2, r2
   12f60:	subcs	r0, r0, r1, lsl #2
   12f64:	cmp	r0, r1, lsl #1
   12f68:	adc	r2, r2, r2
   12f6c:	subcs	r0, r0, r1, lsl #1
   12f70:	cmp	r0, r1
   12f74:	adc	r2, r2, r2
   12f78:	subcs	r0, r0, r1
   12f7c:	mov	r0, r2
   12f80:	bx	lr
   12f84:	moveq	r0, #1
   12f88:	movne	r0, #0
   12f8c:	bx	lr
   12f90:	clz	r2, r1
   12f94:	rsb	r2, r2, #31
   12f98:	lsr	r0, r0, r2
   12f9c:	bx	lr
   12fa0:	cmp	r0, #0
   12fa4:	mvnne	r0, #0
   12fa8:	b	12fcc <fputs@plt+0x1d3c>
   12fac:	cmp	r1, #0
   12fb0:	beq	12fa0 <fputs@plt+0x1d10>
   12fb4:	push	{r0, r1, lr}
   12fb8:	bl	12dc0 <fputs@plt+0x1b30>
   12fbc:	pop	{r1, r2, lr}
   12fc0:	mul	r3, r2, r0
   12fc4:	sub	r1, r1, r3
   12fc8:	bx	lr
   12fcc:	push	{r1, lr}
   12fd0:	mov	r0, #8
   12fd4:	bl	1114c <raise@plt>
   12fd8:	pop	{r1, pc}
   12fdc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12fe0:	mov	r7, r0
   12fe4:	ldr	r6, [pc, #72]	; 13034 <fputs@plt+0x1da4>
   12fe8:	ldr	r5, [pc, #72]	; 13038 <fputs@plt+0x1da8>
   12fec:	add	r6, pc, r6
   12ff0:	add	r5, pc, r5
   12ff4:	sub	r6, r6, r5
   12ff8:	mov	r8, r1
   12ffc:	mov	r9, r2
   13000:	bl	10f4c <open@plt-0x20>
   13004:	asrs	r6, r6, #2
   13008:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1300c:	mov	r4, #0
   13010:	add	r4, r4, #1
   13014:	ldr	r3, [r5], #4
   13018:	mov	r2, r9
   1301c:	mov	r1, r8
   13020:	mov	r0, r7
   13024:	blx	r3
   13028:	cmp	r6, r4
   1302c:	bne	13010 <fputs@plt+0x1d80>
   13030:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13034:	strdeq	r0, [r1], -ip
   13038:	strdeq	r0, [r1], -r4
   1303c:	bx	lr

Disassembly of section .fini:

00013040 <.fini>:
   13040:	push	{r3, lr}
   13044:	pop	{r3, pc}
