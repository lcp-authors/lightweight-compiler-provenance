
../repos/coreutils/src/head:     file format elf32-littlearm


Disassembly of section .init:

00010cd4 <.init>:
   10cd4:	push	{r3, lr}
   10cd8:	bl	11f9c <__assert_fail@plt+0x1014>
   10cdc:	pop	{r3, pc}

Disassembly of section .plt:

00010ce0 <calloc@plt-0x14>:
   10ce0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ce4:	ldr	lr, [pc, #4]	; 10cf0 <calloc@plt-0x4>
   10ce8:	add	lr, pc, lr
   10cec:	ldr	pc, [lr, #8]!
   10cf0:	andeq	r6, r1, r0, lsl r3

00010cf4 <calloc@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #90112	; 0x16000
   10cfc:	ldr	pc, [ip, #784]!	; 0x310

00010d00 <fputs_unlocked@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #90112	; 0x16000
   10d08:	ldr	pc, [ip, #776]!	; 0x308

00010d0c <raise@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #90112	; 0x16000
   10d14:	ldr	pc, [ip, #768]!	; 0x300

00010d18 <strcmp@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #90112	; 0x16000
   10d20:	ldr	pc, [ip, #760]!	; 0x2f8

00010d24 <read@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #90112	; 0x16000
   10d2c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d30 <fflush@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #90112	; 0x16000
   10d38:	ldr	pc, [ip, #744]!	; 0x2e8

00010d3c <free@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #90112	; 0x16000
   10d44:	ldr	pc, [ip, #736]!	; 0x2e0

00010d48 <_exit@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #90112	; 0x16000
   10d50:	ldr	pc, [ip, #728]!	; 0x2d8

00010d54 <memcpy@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #90112	; 0x16000
   10d5c:	ldr	pc, [ip, #720]!	; 0x2d0

00010d60 <mbsinit@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #90112	; 0x16000
   10d68:	ldr	pc, [ip, #712]!	; 0x2c8

00010d6c <fwrite_unlocked@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #90112	; 0x16000
   10d74:	ldr	pc, [ip, #704]!	; 0x2c0

00010d78 <memcmp@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #90112	; 0x16000
   10d80:	ldr	pc, [ip, #696]!	; 0x2b8

00010d84 <fputc_unlocked@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #90112	; 0x16000
   10d8c:	ldr	pc, [ip, #688]!	; 0x2b0

00010d90 <dcgettext@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #90112	; 0x16000
   10d98:	ldr	pc, [ip, #680]!	; 0x2a8

00010d9c <realloc@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #90112	; 0x16000
   10da4:	ldr	pc, [ip, #672]!	; 0x2a0

00010da8 <textdomain@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #90112	; 0x16000
   10db0:	ldr	pc, [ip, #664]!	; 0x298

00010db4 <rawmemchr@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #90112	; 0x16000
   10dbc:	ldr	pc, [ip, #656]!	; 0x290

00010dc0 <iswprint@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #90112	; 0x16000
   10dc8:	ldr	pc, [ip, #648]!	; 0x288

00010dcc <__fxstat64@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #90112	; 0x16000
   10dd4:	ldr	pc, [ip, #640]!	; 0x280

00010dd8 <lseek64@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #90112	; 0x16000
   10de0:	ldr	pc, [ip, #632]!	; 0x278

00010de4 <__ctype_get_mb_cur_max@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #90112	; 0x16000
   10dec:	ldr	pc, [ip, #624]!	; 0x270

00010df0 <__fpending@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #90112	; 0x16000
   10df8:	ldr	pc, [ip, #616]!	; 0x268

00010dfc <ferror_unlocked@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #90112	; 0x16000
   10e04:	ldr	pc, [ip, #608]!	; 0x260

00010e08 <mbrtowc@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #90112	; 0x16000
   10e10:	ldr	pc, [ip, #600]!	; 0x258

00010e14 <error@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #90112	; 0x16000
   10e1c:	ldr	pc, [ip, #592]!	; 0x250

00010e20 <open64@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #90112	; 0x16000
   10e28:	ldr	pc, [ip, #584]!	; 0x248

00010e2c <malloc@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #90112	; 0x16000
   10e34:	ldr	pc, [ip, #576]!	; 0x240

00010e38 <__libc_start_main@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #90112	; 0x16000
   10e40:	ldr	pc, [ip, #568]!	; 0x238

00010e44 <__freading@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #90112	; 0x16000
   10e4c:	ldr	pc, [ip, #560]!	; 0x230

00010e50 <__gmon_start__@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #90112	; 0x16000
   10e58:	ldr	pc, [ip, #552]!	; 0x228

00010e5c <getopt_long@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #90112	; 0x16000
   10e64:	ldr	pc, [ip, #544]!	; 0x220

00010e68 <__ctype_b_loc@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #90112	; 0x16000
   10e70:	ldr	pc, [ip, #536]!	; 0x218

00010e74 <exit@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #528]!	; 0x210

00010e80 <strlen@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #520]!	; 0x208

00010e8c <strchr@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #512]!	; 0x200

00010e98 <memrchr@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #504]!	; 0x1f8

00010ea4 <__errno_location@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #496]!	; 0x1f0

00010eb0 <__cxa_atexit@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #488]!	; 0x1e8

00010ebc <memset@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #480]!	; 0x1e0

00010ec8 <__printf_chk@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #472]!	; 0x1d8

00010ed4 <fileno@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #464]!	; 0x1d0

00010ee0 <strtoumax@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #456]!	; 0x1c8

00010eec <__fprintf_chk@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #448]!	; 0x1c0

00010ef8 <memchr@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #440]!	; 0x1b8

00010f04 <fclose@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #432]!	; 0x1b0

00010f10 <fseeko64@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #424]!	; 0x1a8

00010f1c <setlocale@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #416]!	; 0x1a0

00010f28 <strrchr@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #408]!	; 0x198

00010f34 <nl_langinfo@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #400]!	; 0x190

00010f40 <clearerr_unlocked@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #392]!	; 0x188

00010f4c <bindtextdomain@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #384]!	; 0x180

00010f58 <fputs@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #376]!	; 0x178

00010f64 <strncmp@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #368]!	; 0x170

00010f70 <abort@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #360]!	; 0x168

00010f7c <close@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #352]!	; 0x160

00010f88 <__assert_fail@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #344]!	; 0x158

Disassembly of section .text:

00010f94 <.text>:
   10f94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f98:	mov	r7, r0
   10f9c:	sub	sp, sp, #236	; 0xec
   10fa0:	ldr	r0, [r1]
   10fa4:	mov	r5, r1
   10fa8:	bl	12e20 <__assert_fail@plt+0x1e98>
   10fac:	ldr	r1, [pc, #3872]	; 11ed4 <__assert_fail@plt+0xf4c>
   10fb0:	mov	r0, #6
   10fb4:	bl	10f1c <setlocale@plt>
   10fb8:	ldr	r1, [pc, #3864]	; 11ed8 <__assert_fail@plt+0xf50>
   10fbc:	ldr	r0, [pc, #3864]	; 11edc <__assert_fail@plt+0xf54>
   10fc0:	bl	10f4c <bindtextdomain@plt>
   10fc4:	ldr	r6, [pc, #3860]	; 11ee0 <__assert_fail@plt+0xf58>
   10fc8:	ldr	r0, [pc, #3852]	; 11edc <__assert_fail@plt+0xf54>
   10fcc:	bl	10da8 <textdomain@plt>
   10fd0:	ldr	r0, [pc, #3852]	; 11ee4 <__assert_fail@plt+0xf5c>
   10fd4:	bl	15f68 <__assert_fail@plt+0x4fe0>
   10fd8:	mov	r4, #0
   10fdc:	mov	r3, #10
   10fe0:	cmp	r7, #1
   10fe4:	strb	r4, [r6, #1]
   10fe8:	strb	r4, [r6, #2]
   10fec:	strb	r3, [r6]
   10ff0:	ble	11240 <__assert_fail@plt+0x2b8>
   10ff4:	ldr	r1, [r5, #4]
   10ff8:	ldrb	r3, [r1]
   10ffc:	cmp	r3, #45	; 0x2d
   11000:	bne	11240 <__assert_fail@plt+0x2b8>
   11004:	ldrb	r3, [r1, #1]
   11008:	sub	r3, r3, #48	; 0x30
   1100c:	cmp	r3, #9
   11010:	bhi	11240 <__assert_fail@plt+0x2b8>
   11014:	add	r8, r1, #1
   11018:	mov	r2, r8
   1101c:	ldrb	r3, [r2, #1]!
   11020:	sub	r3, r3, #48	; 0x30
   11024:	cmp	r3, #9
   11028:	bls	1101c <__assert_fail@plt+0x94>
   1102c:	mov	r3, #0
   11030:	mov	ip, #1
   11034:	mov	lr, r2
   11038:	mov	r0, #10
   1103c:	mov	r1, r3
   11040:	mov	r4, r3
   11044:	mov	r9, ip
   11048:	mov	sl, r3
   1104c:	str	ip, [sp, #24]
   11050:	str	lr, [sp, #16]
   11054:	ldrb	ip, [lr], #1
   11058:	cmp	ip, #0
   1105c:	bne	11154 <__assert_fail@plt+0x1cc>
   11060:	cmp	r3, #0
   11064:	strbne	r0, [r6]
   11068:	cmp	r1, #0
   1106c:	movne	r3, #0
   11070:	strb	r1, [r2]
   11074:	strbne	r3, [r2, #1]
   11078:	mov	r1, r8
   1107c:	ldr	r0, [sp, #24]
   11080:	bl	12088 <__assert_fail@plt+0x1100>
   11084:	sub	r7, r7, #1
   11088:	ldr	r3, [r5]
   1108c:	str	r3, [r5, #4]!
   11090:	strd	r0, [sp, #16]
   11094:	mov	r3, #0
   11098:	ldr	r8, [pc, #3656]	; 11ee8 <__assert_fail@plt+0xf60>
   1109c:	mov	r9, r3
   110a0:	str	r3, [sp, #48]	; 0x30
   110a4:	str	r9, [sp]
   110a8:	ldr	r3, [pc, #3644]	; 11eec <__assert_fail@plt+0xf64>
   110ac:	ldr	r2, [pc, #3644]	; 11ef0 <__assert_fail@plt+0xf68>
   110b0:	mov	r1, r5
   110b4:	mov	r0, r7
   110b8:	bl	10e5c <getopt_long@plt>
   110bc:	cmn	r0, #1
   110c0:	mov	sl, r0
   110c4:	bne	11258 <__assert_fail@plt+0x2d0>
   110c8:	cmp	r4, #1
   110cc:	ldr	r2, [pc, #3616]	; 11ef4 <__assert_fail@plt+0xf6c>
   110d0:	beq	110ec <__assert_fail@plt+0x164>
   110d4:	cmp	r4, #0
   110d8:	bne	110f4 <__assert_fail@plt+0x16c>
   110dc:	ldr	r1, [r2]
   110e0:	sub	r3, r7, #1
   110e4:	cmp	r3, r1
   110e8:	ble	110f4 <__assert_fail@plt+0x16c>
   110ec:	mov	r3, #1
   110f0:	strb	r3, [r6, #2]
   110f4:	ldr	r3, [sp, #24]
   110f8:	ldr	r1, [sp, #48]	; 0x30
   110fc:	eor	r3, r3, #1
   11100:	tst	r1, r3
   11104:	beq	1139c <__assert_fail@plt+0x414>
   11108:	ldrd	r0, [sp, #16]
   1110c:	cmp	r0, #0
   11110:	sbcs	r3, r1, #0
   11114:	bge	1139c <__assert_fail@plt+0x414>
   11118:	mov	r2, #5
   1111c:	ldr	r1, [pc, #3540]	; 11ef8 <__assert_fail@plt+0xf70>
   11120:	mov	r0, #0
   11124:	bl	10d90 <dcgettext@plt>
   11128:	add	r2, sp, #128	; 0x80
   1112c:	mov	r4, r0
   11130:	ldrd	r0, [sp, #16]
   11134:	bl	12db8 <__assert_fail@plt+0x1e30>
   11138:	bl	14450 <__assert_fail@plt+0x34c8>
   1113c:	mov	r3, r4
   11140:	ldr	r2, [pc, #3508]	; 11efc <__assert_fail@plt+0xf74>
   11144:	mov	r1, #75	; 0x4b
   11148:	str	r0, [sp]
   1114c:	mov	r0, #1
   11150:	bl	10e14 <error@plt>
   11154:	sub	fp, ip, #98	; 0x62
   11158:	cmp	fp, #24
   1115c:	ldrls	pc, [pc, fp, lsl #2]
   11160:	b	111f0 <__assert_fail@plt+0x268>
   11164:	andeq	r1, r1, r8, asr #3
   11168:	andeq	r1, r1, r8, lsr #4
   1116c:	strdeq	r1, [r1], -r0
   11170:	strdeq	r1, [r1], -r0
   11174:	strdeq	r1, [r1], -r0
   11178:	strdeq	r1, [r1], -r0
   1117c:	strdeq	r1, [r1], -r0
   11180:	strdeq	r1, [r1], -r0
   11184:	strdeq	r1, [r1], -r0
   11188:	andeq	r1, r1, r8, asr #3
   1118c:	andeq	r1, r1, r8, lsr r2
   11190:	andeq	r1, r1, r8, asr #3
   11194:	strdeq	r1, [r1], -r0
   11198:	strdeq	r1, [r1], -r0
   1119c:	strdeq	r1, [r1], -r0
   111a0:	ldrdeq	r1, [r1], -r4
   111a4:	strdeq	r1, [r1], -r0
   111a8:	strdeq	r1, [r1], -r0
   111ac:	strdeq	r1, [r1], -r0
   111b0:	strdeq	r1, [r1], -r0
   111b4:	ldrdeq	r1, [r1], -ip
   111b8:	strdeq	r1, [r1], -r0
   111bc:	strdeq	r1, [r1], -r0
   111c0:	strdeq	r1, [r1], -r0
   111c4:	andeq	r1, r1, r4, ror #3
   111c8:	mov	r1, ip
   111cc:	str	sl, [sp, #24]
   111d0:	b	11050 <__assert_fail@plt+0xc8>
   111d4:	mov	r4, #2
   111d8:	b	11050 <__assert_fail@plt+0xc8>
   111dc:	mov	r4, r9
   111e0:	b	11050 <__assert_fail@plt+0xc8>
   111e4:	mov	r3, r9
   111e8:	mov	r0, sl
   111ec:	b	11050 <__assert_fail@plt+0xc8>
   111f0:	cmp	r3, #0
   111f4:	strbne	r0, [r6]
   111f8:	mov	r2, #5
   111fc:	ldr	r1, [pc, #3324]	; 11f00 <__assert_fail@plt+0xf78>
   11200:	mov	r0, #0
   11204:	bl	10d90 <dcgettext@plt>
   11208:	ldr	r3, [sp, #16]
   1120c:	ldrb	r3, [r3]
   11210:	mov	r1, #0
   11214:	mov	r2, r0
   11218:	mov	r0, r1
   1121c:	bl	10e14 <error@plt>
   11220:	mov	r0, #1
   11224:	b	11390 <__assert_fail@plt+0x408>
   11228:	mov	ip, #0
   1122c:	mov	r1, sl
   11230:	str	ip, [sp, #24]
   11234:	b	11050 <__assert_fail@plt+0xc8>
   11238:	str	r9, [sp, #24]
   1123c:	b	11050 <__assert_fail@plt+0xc8>
   11240:	mov	r3, #1
   11244:	str	r3, [sp, #24]
   11248:	mov	r2, #10
   1124c:	mov	r3, #0
   11250:	strd	r2, [sp, #16]
   11254:	b	11094 <__assert_fail@plt+0x10c>
   11258:	cmp	sl, #110	; 0x6e
   1125c:	beq	11348 <__assert_fail@plt+0x3c0>
   11260:	bgt	112b4 <__assert_fail@plt+0x32c>
   11264:	cmn	sl, #2
   11268:	beq	1138c <__assert_fail@plt+0x404>
   1126c:	cmp	sl, #99	; 0x63
   11270:	beq	11310 <__assert_fail@plt+0x388>
   11274:	cmn	sl, #3
   11278:	bne	112c8 <__assert_fail@plt+0x340>
   1127c:	ldr	r3, [pc, #3200]	; 11f04 <__assert_fail@plt+0xf7c>
   11280:	ldr	r0, [pc, #3200]	; 11f08 <__assert_fail@plt+0xf80>
   11284:	str	r3, [sp, #4]
   11288:	ldr	r3, [pc, #3196]	; 11f0c <__assert_fail@plt+0xf84>
   1128c:	str	r9, [sp, #8]
   11290:	str	r3, [sp]
   11294:	ldr	r3, [pc, #3188]	; 11f10 <__assert_fail@plt+0xf88>
   11298:	ldr	r0, [r0]
   1129c:	ldr	r2, [pc, #3184]	; 11f14 <__assert_fail@plt+0xf8c>
   112a0:	ldr	r3, [r3]
   112a4:	ldr	r1, [pc, #3180]	; 11f18 <__assert_fail@plt+0xf90>
   112a8:	bl	1490c <__assert_fail@plt+0x3984>
   112ac:	mov	r0, #0
   112b0:	bl	10e74 <exit@plt>
   112b4:	cmp	sl, #118	; 0x76
   112b8:	beq	11308 <__assert_fail@plt+0x380>
   112bc:	bgt	112ec <__assert_fail@plt+0x364>
   112c0:	cmp	sl, #113	; 0x71
   112c4:	beq	11394 <__assert_fail@plt+0x40c>
   112c8:	sub	r3, sl, #48	; 0x30
   112cc:	cmp	r3, #9
   112d0:	bhi	11220 <__assert_fail@plt+0x298>
   112d4:	mov	r2, #5
   112d8:	ldr	r1, [pc, #3104]	; 11f00 <__assert_fail@plt+0xf78>
   112dc:	mov	r0, #0
   112e0:	bl	10d90 <dcgettext@plt>
   112e4:	mov	r3, sl
   112e8:	b	11210 <__assert_fail@plt+0x288>
   112ec:	cmp	sl, #122	; 0x7a
   112f0:	beq	11384 <__assert_fail@plt+0x3fc>
   112f4:	cmp	sl, #256	; 0x100
   112f8:	bne	112c8 <__assert_fail@plt+0x340>
   112fc:	mov	r3, #1
   11300:	strb	r3, [r6, #3]
   11304:	b	110a4 <__assert_fail@plt+0x11c>
   11308:	mov	r4, #1
   1130c:	b	110a4 <__assert_fail@plt+0x11c>
   11310:	ldr	r3, [r8]
   11314:	mov	r0, r9
   11318:	ldrb	r2, [r3]
   1131c:	cmp	r2, #45	; 0x2d
   11320:	addeq	r3, r3, #1
   11324:	moveq	r2, #1
   11328:	movne	r2, #0
   1132c:	streq	r3, [r8]
   11330:	ldr	r1, [r8]
   11334:	str	r2, [sp, #48]	; 0x30
   11338:	bl	12088 <__assert_fail@plt+0x1100>
   1133c:	str	r9, [sp, #24]
   11340:	strd	r0, [sp, #16]
   11344:	b	110a4 <__assert_fail@plt+0x11c>
   11348:	ldr	r3, [r8]
   1134c:	mov	r0, #1
   11350:	ldrb	r2, [r3]
   11354:	cmp	r2, #45	; 0x2d
   11358:	addeq	r3, r3, #1
   1135c:	streq	r3, [r8]
   11360:	moveq	r2, #1
   11364:	movne	r2, #0
   11368:	ldr	r1, [r8]
   1136c:	str	r2, [sp, #48]	; 0x30
   11370:	bl	12088 <__assert_fail@plt+0x1100>
   11374:	mov	r3, #1
   11378:	str	r3, [sp, #24]
   1137c:	strd	r0, [sp, #16]
   11380:	b	110a4 <__assert_fail@plt+0x11c>
   11384:	strb	r9, [r6]
   11388:	b	110a4 <__assert_fail@plt+0x11c>
   1138c:	mov	r0, #0
   11390:	bl	12854 <__assert_fail@plt+0x18cc>
   11394:	mov	r4, #2
   11398:	b	110a4 <__assert_fail@plt+0x11c>
   1139c:	ldr	r3, [r2]
   113a0:	ldr	r2, [sp, #16]
   113a4:	cmp	r3, r7
   113a8:	addlt	r5, r5, r3, lsl #2
   113ac:	ldr	r3, [sp, #16]
   113b0:	ldrge	r5, [pc, #2916]	; 11f1c <__assert_fail@plt+0xf94>
   113b4:	str	r3, [sp, #52]	; 0x34
   113b8:	lsl	r3, r3, #19
   113bc:	lsr	r3, r3, #19
   113c0:	str	r3, [sp, #68]	; 0x44
   113c4:	rsb	r3, r3, #8192	; 0x2000
   113c8:	str	r3, [sp, #60]	; 0x3c
   113cc:	add	r3, r3, r2
   113d0:	lsr	r3, r3, #13
   113d4:	add	r3, r3, #1
   113d8:	str	r3, [sp, #56]	; 0x38
   113dc:	lsr	r3, r3, #1
   113e0:	str	r3, [sp, #84]	; 0x54
   113e4:	sub	r3, r5, #4
   113e8:	str	r3, [sp, #76]	; 0x4c
   113ec:	mov	r3, #1
   113f0:	str	r3, [sp, #72]	; 0x48
   113f4:	ldrd	r2, [sp, #16]
   113f8:	adds	r2, r2, #8192	; 0x2000
   113fc:	adc	r3, r3, #0
   11400:	strd	r2, [sp, #88]	; 0x58
   11404:	ldr	r3, [sp, #76]	; 0x4c
   11408:	ldr	r9, [r3, #4]!
   1140c:	cmp	r9, #0
   11410:	str	r3, [sp, #76]	; 0x4c
   11414:	bne	1144c <__assert_fail@plt+0x4c4>
   11418:	ldr	r3, [pc, #2752]	; 11ee0 <__assert_fail@plt+0xf58>
   1141c:	ldrb	r3, [r3, #1]
   11420:	cmp	r3, #0
   11424:	beq	11f50 <__assert_fail@plt+0xfc8>
   11428:	mov	r0, r9
   1142c:	bl	10f7c <close@plt>
   11430:	cmp	r0, #0
   11434:	bge	11f50 <__assert_fail@plt+0xfc8>
   11438:	bl	10ea4 <__errno_location@plt>
   1143c:	ldr	r2, [pc, #2780]	; 11f20 <__assert_fail@plt+0xf98>
   11440:	ldr	r1, [r0]
   11444:	mov	r0, #1
   11448:	bl	10e14 <error@plt>
   1144c:	ldr	r1, [pc, #2764]	; 11f20 <__assert_fail@plt+0xf98>
   11450:	mov	r0, r9
   11454:	bl	10d18 <strcmp@plt>
   11458:	subs	r3, r0, #0
   1145c:	str	r3, [sp, #80]	; 0x50
   11460:	bne	1152c <__assert_fail@plt+0x5a4>
   11464:	ldr	r2, [pc, #2676]	; 11ee0 <__assert_fail@plt+0xf58>
   11468:	mov	r3, #1
   1146c:	ldr	r1, [pc, #2736]	; 11f24 <__assert_fail@plt+0xf9c>
   11470:	strb	r3, [r2, #1]
   11474:	mov	r2, #5
   11478:	bl	10d90 <dcgettext@plt>
   1147c:	ldr	r3, [sp, #80]	; 0x50
   11480:	str	r3, [sp, #28]
   11484:	mov	r9, r0
   11488:	ldr	r3, [pc, #2640]	; 11ee0 <__assert_fail@plt+0xf58>
   1148c:	ldrb	r3, [r3, #2]
   11490:	cmp	r3, #0
   11494:	beq	114c8 <__assert_fail@plt+0x540>
   11498:	ldr	r4, [pc, #2696]	; 11f28 <__assert_fail@plt+0xfa0>
   1149c:	ldr	r1, [pc, #2696]	; 11f2c <__assert_fail@plt+0xfa4>
   114a0:	mov	r3, r9
   114a4:	ldrb	r0, [r4]
   114a8:	ldr	r2, [pc, #2596]	; 11ed4 <__assert_fail@plt+0xf4c>
   114ac:	cmp	r0, #0
   114b0:	moveq	r2, r1
   114b4:	mov	r0, #1
   114b8:	ldr	r1, [pc, #2672]	; 11f30 <__assert_fail@plt+0xfa8>
   114bc:	bl	10ec8 <__printf_chk@plt>
   114c0:	mov	r3, #0
   114c4:	strb	r3, [r4]
   114c8:	ldr	r3, [sp, #48]	; 0x30
   114cc:	cmp	r3, #0
   114d0:	beq	11dc8 <__assert_fail@plt+0xe40>
   114d4:	add	r1, sp, #128	; 0x80
   114d8:	ldr	r0, [sp, #28]
   114dc:	bl	15f80 <__assert_fail@plt+0x4ff8>
   114e0:	cmp	r0, #0
   114e4:	beq	11594 <__assert_fail@plt+0x60c>
   114e8:	bl	10ea4 <__errno_location@plt>
   114ec:	mov	r2, #5
   114f0:	ldr	r1, [pc, #2620]	; 11f34 <__assert_fail@plt+0xfac>
   114f4:	ldr	r4, [r0]
   114f8:	mov	r0, #0
   114fc:	bl	10d90 <dcgettext@plt>
   11500:	mov	r1, r9
   11504:	mov	r5, r0
   11508:	mov	r0, #4
   1150c:	bl	1426c <__assert_fail@plt+0x32e4>
   11510:	mov	r2, r5
   11514:	mov	r1, r4
   11518:	mov	r3, r0
   1151c:	mov	r0, #0
   11520:	bl	10e14 <error@plt>
   11524:	mov	r4, #0
   11528:	b	1184c <__assert_fail@plt+0x8c4>
   1152c:	mov	r1, #0
   11530:	mov	r0, r9
   11534:	bl	10e20 <open64@plt>
   11538:	subs	r3, r0, #0
   1153c:	str	r3, [sp, #28]
   11540:	bge	11488 <__assert_fail@plt+0x500>
   11544:	bl	10ea4 <__errno_location@plt>
   11548:	ldr	r1, [pc, #2536]	; 11f38 <__assert_fail@plt+0xfb0>
   1154c:	mov	r2, #5
   11550:	ldr	r4, [r0]
   11554:	mov	r0, #0
   11558:	bl	10d90 <dcgettext@plt>
   1155c:	mov	r1, r9
   11560:	mov	r5, r0
   11564:	mov	r0, #4
   11568:	bl	1426c <__assert_fail@plt+0x32e4>
   1156c:	mov	r1, r4
   11570:	mov	r2, r5
   11574:	mov	r4, #0
   11578:	mov	r3, r0
   1157c:	mov	r0, #0
   11580:	bl	10e14 <error@plt>
   11584:	ldr	r3, [sp, #72]	; 0x48
   11588:	and	r3, r3, r4
   1158c:	str	r3, [sp, #72]	; 0x48
   11590:	b	11404 <__assert_fail@plt+0x47c>
   11594:	ldr	r3, [pc, #2372]	; 11ee0 <__assert_fail@plt+0xf58>
   11598:	ldrb	r3, [r3, #3]
   1159c:	cmp	r3, #0
   115a0:	bne	11df4 <__assert_fail@plt+0xe6c>
   115a4:	ldr	r3, [sp, #144]	; 0x90
   115a8:	and	r3, r3, #53248	; 0xd000
   115ac:	cmp	r3, #32768	; 0x8000
   115b0:	bne	11df4 <__assert_fail@plt+0xe6c>
   115b4:	mov	r4, #1
   115b8:	mov	r3, #0
   115bc:	str	r9, [sp, #4]
   115c0:	str	r4, [sp]
   115c4:	mov	r2, #0
   115c8:	ldr	r0, [sp, #28]
   115cc:	bl	120f0 <__assert_fail@plt+0x1168>
   115d0:	mov	r3, r1
   115d4:	cmp	r0, #0
   115d8:	sbcs	r3, r3, #0
   115dc:	strd	r0, [sp, #32]
   115e0:	blt	11524 <__assert_fail@plt+0x59c>
   115e4:	ldr	r3, [sp, #24]
   115e8:	cmp	r3, #0
   115ec:	beq	11e0c <__assert_fail@plt+0xe84>
   115f0:	ldr	r3, [pc, #2280]	; 11ee0 <__assert_fail@plt+0xf58>
   115f4:	ldrb	r3, [r3, #3]
   115f8:	cmp	r3, #0
   115fc:	bne	11624 <__assert_fail@plt+0x69c>
   11600:	ldr	r2, [sp, #184]	; 0xb8
   11604:	ldrd	r0, [sp, #176]	; 0xb0
   11608:	sub	r3, r2, #1
   1160c:	cmn	r3, #-536870911	; 0xe0000001
   11610:	movhi	r2, #512	; 0x200
   11614:	cmp	r2, r0
   11618:	asr	r3, r2, #31
   1161c:	sbcs	r3, r3, r1
   11620:	blt	1199c <__assert_fail@plt+0xa14>
   11624:	ldrd	r2, [sp, #32]
   11628:	ldr	r0, [pc, #2316]	; 11f3c <__assert_fail@plt+0xfb4>
   1162c:	mov	r4, #0
   11630:	strd	r2, [sp, #40]	; 0x28
   11634:	bl	149d4 <__assert_fail@plt+0x3a4c>
   11638:	add	r3, r0, #8192	; 0x2000
   1163c:	mov	r7, r0
   11640:	str	r4, [r3, #8]
   11644:	str	r4, [r3, #4]
   11648:	str	r4, [r3, #12]
   1164c:	ldr	r0, [pc, #2280]	; 11f3c <__assert_fail@plt+0xfb4>
   11650:	bl	149d4 <__assert_fail@plt+0x3a4c>
   11654:	mov	r6, r7
   11658:	mov	r5, r0
   1165c:	mov	r2, #8192	; 0x2000
   11660:	mov	r1, r5
   11664:	ldr	r0, [sp, #28]
   11668:	bl	1445c <__assert_fail@plt+0x34d4>
   1166c:	sub	r3, r0, #1
   11670:	cmn	r3, #3
   11674:	mov	fp, r0
   11678:	bhi	117c0 <__assert_fail@plt+0x838>
   1167c:	ldrd	r2, [sp, #16]
   11680:	orrs	r3, r2, r3
   11684:	bne	116a8 <__assert_fail@plt+0x720>
   11688:	ldrd	r2, [sp, #40]	; 0x28
   1168c:	mov	r1, r0
   11690:	adds	r2, r2, r0
   11694:	adc	r3, r3, #0
   11698:	mov	r0, r5
   1169c:	strd	r2, [sp, #40]	; 0x28
   116a0:	bl	1219c <__assert_fail@plt+0x1214>
   116a4:	b	1165c <__assert_fail@plt+0x6d4>
   116a8:	ldr	r2, [pc, #2096]	; 11ee0 <__assert_fail@plt+0xf58>
   116ac:	add	r8, r5, #8192	; 0x2000
   116b0:	mov	r3, #0
   116b4:	ldrb	sl, [r2]
   116b8:	str	r0, [r8, #4]
   116bc:	str	r3, [r8, #8]
   116c0:	str	r3, [r8, #12]
   116c4:	mov	fp, r8
   116c8:	add	r3, r5, r0
   116cc:	strb	sl, [r5, r0]
   116d0:	mov	r0, r5
   116d4:	mov	r1, sl
   116d8:	str	r3, [sp, #64]	; 0x40
   116dc:	bl	10db4 <rawmemchr@plt>
   116e0:	ldr	r3, [sp, #64]	; 0x40
   116e4:	cmp	r3, r0
   116e8:	bhi	11740 <__assert_fail@plt+0x7b8>
   116ec:	add	sl, r7, #8192	; 0x2000
   116f0:	ldr	r3, [r8, #8]
   116f4:	ldr	r2, [r8, #4]
   116f8:	ldr	r0, [sl, #4]
   116fc:	ldr	r1, [pc, #2108]	; 11f40 <__assert_fail@plt+0xfb8>
   11700:	add	r4, r4, r3
   11704:	add	r3, r2, r0
   11708:	cmp	r3, r1
   1170c:	bhi	11754 <__assert_fail@plt+0x7cc>
   11710:	mov	r1, r5
   11714:	add	r0, r7, r0
   11718:	bl	10d54 <memcpy@plt>
   1171c:	ldr	r2, [r8, #4]
   11720:	ldr	r3, [sl, #4]
   11724:	add	r3, r3, r2
   11728:	str	r3, [sl, #4]
   1172c:	ldr	r2, [r8, #8]
   11730:	ldr	r3, [sl, #8]
   11734:	add	r3, r3, r2
   11738:	str	r3, [sl, #8]
   1173c:	b	1165c <__assert_fail@plt+0x6d4>
   11740:	ldr	r2, [fp, #8]
   11744:	add	r0, r0, #1
   11748:	add	r2, r2, #1
   1174c:	str	r2, [fp, #8]
   11750:	b	116d4 <__assert_fail@plt+0x74c>
   11754:	add	r8, r6, #8192	; 0x2000
   11758:	ldrd	r0, [sp, #16]
   1175c:	ldr	r2, [r8, #8]
   11760:	mov	r3, #0
   11764:	sub	r2, r4, r2
   11768:	cmp	r1, r3
   1176c:	cmpeq	r0, r2
   11770:	str	r5, [sl, #12]
   11774:	bcs	117ac <__assert_fail@plt+0x824>
   11778:	ldrd	r2, [sp, #40]	; 0x28
   1177c:	ldr	r1, [r8, #4]
   11780:	mov	r0, r6
   11784:	adds	r2, r2, r1
   11788:	adc	r3, r3, #0
   1178c:	mov	r7, r5
   11790:	strd	r2, [sp, #40]	; 0x28
   11794:	bl	1219c <__assert_fail@plt+0x1214>
   11798:	ldr	r3, [r8, #8]
   1179c:	mov	r5, r6
   117a0:	sub	r4, r4, r3
   117a4:	ldr	r6, [r8, #12]
   117a8:	b	1165c <__assert_fail@plt+0x6d4>
   117ac:	ldr	r0, [pc, #1928]	; 11f3c <__assert_fail@plt+0xfb4>
   117b0:	bl	149d4 <__assert_fail@plt+0x3a4c>
   117b4:	mov	r7, r5
   117b8:	mov	r5, r0
   117bc:	b	1165c <__assert_fail@plt+0x6d4>
   117c0:	mov	r0, r5
   117c4:	bl	12c34 <__assert_fail@plt+0x1cac>
   117c8:	cmn	fp, #1
   117cc:	bne	1187c <__assert_fail@plt+0x8f4>
   117d0:	bl	10ea4 <__errno_location@plt>
   117d4:	mov	r2, #5
   117d8:	ldr	r1, [pc, #1892]	; 11f44 <__assert_fail@plt+0xfbc>
   117dc:	ldr	r4, [r0]
   117e0:	mov	r0, #0
   117e4:	bl	10d90 <dcgettext@plt>
   117e8:	mov	r1, r9
   117ec:	mov	r5, r0
   117f0:	mov	r0, #4
   117f4:	bl	1426c <__assert_fail@plt+0x32e4>
   117f8:	mov	r1, r4
   117fc:	mov	r2, r5
   11800:	mov	r4, #0
   11804:	mov	r3, r0
   11808:	mov	r0, #0
   1180c:	bl	10e14 <error@plt>
   11810:	cmp	r6, #0
   11814:	bne	11984 <__assert_fail@plt+0x9fc>
   11818:	ldrd	r0, [sp, #32]
   1181c:	mvn	r3, #0
   11820:	mvn	r2, #0
   11824:	cmp	r1, r3
   11828:	cmpeq	r0, r2
   1182c:	beq	1184c <__assert_fail@plt+0x8c4>
   11830:	stm	sp, {r6, r9}
   11834:	ldrd	r2, [sp, #40]	; 0x28
   11838:	ldr	r0, [sp, #28]
   1183c:	bl	120f0 <__assert_fail@plt+0x1168>
   11840:	cmp	r0, #0
   11844:	sbcs	r3, r1, #0
   11848:	blt	11524 <__assert_fail@plt+0x59c>
   1184c:	ldr	r3, [sp, #80]	; 0x50
   11850:	cmp	r3, #0
   11854:	beq	11584 <__assert_fail@plt+0x5fc>
   11858:	ldr	r0, [sp, #28]
   1185c:	bl	10f7c <close@plt>
   11860:	cmp	r0, #0
   11864:	beq	11584 <__assert_fail@plt+0x5fc>
   11868:	bl	10ea4 <__errno_location@plt>
   1186c:	mov	r2, #5
   11870:	ldr	r1, [pc, #1744]	; 11f48 <__assert_fail@plt+0xfc0>
   11874:	ldr	r4, [r0]
   11878:	b	11554 <__assert_fail@plt+0x5cc>
   1187c:	add	r3, r7, #8192	; 0x2000
   11880:	ldr	r2, [r3, #4]
   11884:	cmp	r2, #0
   11888:	beq	118b0 <__assert_fail@plt+0x928>
   1188c:	add	r7, r7, r2
   11890:	ldr	r2, [pc, #1608]	; 11ee0 <__assert_fail@plt+0xf58>
   11894:	ldrb	r1, [r7, #-1]
   11898:	ldrb	r2, [r2]
   1189c:	cmp	r1, r2
   118a0:	addne	r4, r4, #1
   118a4:	ldrne	r2, [r3, #8]
   118a8:	addne	r2, r2, #1
   118ac:	strne	r2, [r3, #8]
   118b0:	mov	r7, r6
   118b4:	add	r5, r7, #8192	; 0x2000
   118b8:	ldrd	r0, [sp, #16]
   118bc:	ldr	r2, [r5, #8]
   118c0:	mov	r3, #0
   118c4:	sub	r2, r4, r2
   118c8:	cmp	r1, r3
   118cc:	cmpeq	r0, r2
   118d0:	bcc	11940 <__assert_fail@plt+0x9b8>
   118d4:	mov	r3, #0
   118d8:	cmp	r1, r3
   118dc:	cmpeq	r0, r4
   118e0:	bcs	11938 <__assert_fail@plt+0x9b0>
   118e4:	ldr	r3, [sp, #52]	; 0x34
   118e8:	ldr	r8, [r5, #4]
   118ec:	sub	r4, r4, r3
   118f0:	ldr	r3, [pc, #1512]	; 11ee0 <__assert_fail@plt+0xf58>
   118f4:	add	r8, r7, r8
   118f8:	mov	r0, r7
   118fc:	ldrb	sl, [r3]
   11900:	cmp	r4, #0
   11904:	beq	1191c <__assert_fail@plt+0x994>
   11908:	sub	r2, r8, r0
   1190c:	mov	r1, sl
   11910:	bl	10ef8 <memchr@plt>
   11914:	cmp	r0, #0
   11918:	bne	1196c <__assert_fail@plt+0x9e4>
   1191c:	ldrd	r2, [sp, #40]	; 0x28
   11920:	sub	r1, r0, r7
   11924:	mov	r0, r7
   11928:	adds	r2, r2, r1
   1192c:	adc	r3, r3, r1, asr #31
   11930:	strd	r2, [sp, #40]	; 0x28
   11934:	bl	1219c <__assert_fail@plt+0x1214>
   11938:	ldr	r4, [sp, #48]	; 0x30
   1193c:	b	11810 <__assert_fail@plt+0x888>
   11940:	ldrd	r2, [sp, #40]	; 0x28
   11944:	ldr	r1, [r5, #4]
   11948:	mov	r0, r7
   1194c:	adds	r2, r2, r1
   11950:	adc	r3, r3, #0
   11954:	strd	r2, [sp, #40]	; 0x28
   11958:	bl	1219c <__assert_fail@plt+0x1214>
   1195c:	ldr	r3, [r5, #8]
   11960:	ldr	r7, [r5, #12]
   11964:	sub	r4, r4, r3
   11968:	b	118b4 <__assert_fail@plt+0x92c>
   1196c:	ldr	r3, [r5, #8]
   11970:	add	r0, r0, #1
   11974:	add	r3, r3, #1
   11978:	str	r3, [r5, #8]
   1197c:	sub	r4, r4, #1
   11980:	b	11900 <__assert_fail@plt+0x978>
   11984:	add	r3, r6, #8192	; 0x2000
   11988:	mov	r0, r6
   1198c:	ldr	r5, [r3, #12]
   11990:	bl	12c34 <__assert_fail@plt+0x1cac>
   11994:	mov	r6, r5
   11998:	b	11810 <__assert_fail@plt+0x888>
   1199c:	ldrd	r2, [sp, #32]
   119a0:	cmp	r2, r0
   119a4:	sbcs	r3, r3, r1
   119a8:	movge	r0, r4
   119ac:	bge	119cc <__assert_fail@plt+0xa44>
   119b0:	ldrd	r2, [sp, #32]
   119b4:	strd	r0, [sp, #8]
   119b8:	ldr	r1, [sp, #28]
   119bc:	strd	r2, [sp]
   119c0:	mov	r0, r9
   119c4:	ldrd	r2, [sp, #16]
   119c8:	bl	12570 <__assert_fail@plt+0x15e8>
   119cc:	and	r4, r0, #1
   119d0:	b	1184c <__assert_fail@plt+0x8c4>
   119d4:	ldr	r3, [sp, #52]	; 0x34
   119d8:	cmp	r3, #1048576	; 0x100000
   119dc:	bhi	11b4c <__assert_fail@plt+0xbc4>
   119e0:	add	r5, r3, #8192	; 0x2000
   119e4:	mov	r1, r5
   119e8:	mov	r0, #2
   119ec:	bl	14aac <__assert_fail@plt+0x3b24>
   119f0:	mov	sl, #0
   119f4:	ldr	r4, [sp, #48]	; 0x30
   119f8:	mov	r6, sl
   119fc:	mov	r7, r0
   11a00:	add	r3, r0, r5
   11a04:	str	r0, [sp, #104]	; 0x68
   11a08:	str	r3, [sp, #108]	; 0x6c
   11a0c:	add	r3, sp, #232	; 0xe8
   11a10:	add	r3, r3, sl, lsl #2
   11a14:	mov	r2, r5
   11a18:	ldr	r8, [r3, #-128]	; 0xffffff80
   11a1c:	ldr	r0, [sp, #28]
   11a20:	mov	r1, r8
   11a24:	bl	12c88 <__assert_fail@plt+0x1d00>
   11a28:	cmp	r5, r0
   11a2c:	mov	fp, r0
   11a30:	bls	11ae0 <__assert_fail@plt+0xb58>
   11a34:	bl	10ea4 <__errno_location@plt>
   11a38:	ldr	r3, [r0]
   11a3c:	cmp	r3, #0
   11a40:	str	r3, [sp, #64]	; 0x40
   11a44:	beq	11ab0 <__assert_fail@plt+0xb28>
   11a48:	mov	r2, #5
   11a4c:	ldr	r1, [pc, #1264]	; 11f44 <__assert_fail@plt+0xfbc>
   11a50:	mov	r0, #0
   11a54:	bl	10d90 <dcgettext@plt>
   11a58:	mov	r1, r9
   11a5c:	mov	r4, r0
   11a60:	mov	r0, #4
   11a64:	bl	1426c <__assert_fail@plt+0x32e4>
   11a68:	mov	r2, r4
   11a6c:	ldr	r1, [sp, #64]	; 0x40
   11a70:	mov	r4, #0
   11a74:	mov	r3, r0
   11a78:	mov	r0, #0
   11a7c:	bl	10e14 <error@plt>
   11a80:	mov	r0, r7
   11a84:	bl	12c34 <__assert_fail@plt+0x1cac>
   11a88:	ldrd	r0, [sp, #32]
   11a8c:	mvn	r3, #0
   11a90:	mvn	r2, #0
   11a94:	cmp	r1, r3
   11a98:	cmpeq	r0, r2
   11a9c:	movne	r3, #0
   11aa0:	strne	r9, [sp, #4]
   11aa4:	strne	r3, [sp]
   11aa8:	bne	11834 <__assert_fail@plt+0x8ac>
   11aac:	b	1184c <__assert_fail@plt+0x8c4>
   11ab0:	ldr	r3, [sp, #52]	; 0x34
   11ab4:	cmp	r3, fp
   11ab8:	bcc	11eac <__assert_fail@plt+0xf24>
   11abc:	cmp	r4, #0
   11ac0:	subeq	r1, r3, fp
   11ac4:	ldreq	r4, [sp, #48]	; 0x30
   11ac8:	beq	11aec <__assert_fail@plt+0xb64>
   11acc:	cmp	r4, #0
   11ad0:	eor	sl, sl, #1
   11ad4:	bne	11a80 <__assert_fail@plt+0xaf8>
   11ad8:	mov	r4, r6
   11adc:	b	11a0c <__assert_fail@plt+0xa84>
   11ae0:	cmp	r4, #0
   11ae4:	bne	11ebc <__assert_fail@plt+0xf34>
   11ae8:	mov	r1, r6
   11aec:	ldr	r3, [sp, #52]	; 0x34
   11af0:	sub	r1, r3, r1
   11af4:	ldrd	r2, [sp, #40]	; 0x28
   11af8:	adds	r2, r2, r1
   11afc:	adc	r3, r3, #0
   11b00:	strd	r2, [sp, #40]	; 0x28
   11b04:	eor	r3, sl, #1
   11b08:	add	r2, sp, #232	; 0xe8
   11b0c:	add	r3, r2, r3, lsl #2
   11b10:	ldr	r0, [r3, #-128]	; 0xffffff80
   11b14:	add	r0, r0, #8192	; 0x2000
   11b18:	bl	1219c <__assert_fail@plt+0x1214>
   11b1c:	ldr	r3, [sp, #52]	; 0x34
   11b20:	cmp	r3, fp
   11b24:	bcs	11acc <__assert_fail@plt+0xb44>
   11b28:	ldr	r3, [sp, #52]	; 0x34
   11b2c:	mov	r0, r8
   11b30:	sub	r1, fp, r3
   11b34:	ldrd	r2, [sp, #40]	; 0x28
   11b38:	adds	r2, r2, r1
   11b3c:	adc	r3, r3, #0
   11b40:	strd	r2, [sp, #40]	; 0x28
   11b44:	bl	1219c <__assert_fail@plt+0x1214>
   11b48:	b	11acc <__assert_fail@plt+0xb44>
   11b4c:	ldr	r3, [sp, #56]	; 0x38
   11b50:	mov	r8, #0
   11b54:	cmp	r3, #16
   11b58:	mov	sl, #1
   11b5c:	mov	fp, r8
   11b60:	mov	r5, r8
   11b64:	mov	r6, r8
   11b68:	movcs	r3, #16
   11b6c:	str	r8, [sp, #64]	; 0x40
   11b70:	str	r3, [sp, #96]	; 0x60
   11b74:	ldr	r3, [sp, #64]	; 0x40
   11b78:	cmp	r6, r3
   11b7c:	bne	11bb4 <__assert_fail@plt+0xc2c>
   11b80:	cmp	r6, #0
   11b84:	ldreq	r3, [sp, #96]	; 0x60
   11b88:	beq	11b9c <__assert_fail@plt+0xc14>
   11b8c:	ldr	r3, [sp, #84]	; 0x54
   11b90:	cmp	r3, r6
   11b94:	lslcs	r3, r6, #1
   11b98:	ldrcc	r3, [sp, #56]	; 0x38
   11b9c:	str	r3, [sp, #64]	; 0x40
   11ba0:	mov	r0, r5
   11ba4:	mov	r2, #4
   11ba8:	ldr	r1, [sp, #64]	; 0x40
   11bac:	bl	14a50 <__assert_fail@plt+0x3ac8>
   11bb0:	mov	r5, r0
   11bb4:	cmp	fp, #0
   11bb8:	bne	11bcc <__assert_fail@plt+0xc44>
   11bbc:	mov	r0, #8192	; 0x2000
   11bc0:	bl	149d4 <__assert_fail@plt+0x3a4c>
   11bc4:	add	r8, r6, #1
   11bc8:	str	r0, [r5, r6, lsl #2]
   11bcc:	mov	r2, #8192	; 0x2000
   11bd0:	ldr	r1, [r5, r6, lsl #2]
   11bd4:	ldr	r0, [sp, #28]
   11bd8:	bl	12c88 <__assert_fail@plt+0x1d00>
   11bdc:	ldr	r3, [pc, #860]	; 11f40 <__assert_fail@plt+0xfb8>
   11be0:	cmp	r0, r3
   11be4:	mov	r7, r0
   11be8:	bhi	11c50 <__assert_fail@plt+0xcc8>
   11bec:	bl	10ea4 <__errno_location@plt>
   11bf0:	ldr	r4, [r0]
   11bf4:	cmp	r4, #0
   11bf8:	beq	11d18 <__assert_fail@plt+0xd90>
   11bfc:	mov	r2, #5
   11c00:	ldr	r1, [pc, #828]	; 11f44 <__assert_fail@plt+0xfbc>
   11c04:	mov	r0, #0
   11c08:	bl	10d90 <dcgettext@plt>
   11c0c:	mov	r1, r9
   11c10:	mov	r6, r0
   11c14:	mov	r0, #4
   11c18:	bl	1426c <__assert_fail@plt+0x32e4>
   11c1c:	mov	r1, r4
   11c20:	mov	r2, r6
   11c24:	mov	r4, #0
   11c28:	mov	r3, r0
   11c2c:	mov	r0, #0
   11c30:	bl	10e14 <error@plt>
   11c34:	mov	r6, #0
   11c38:	cmp	r6, r8
   11c3c:	bne	11d50 <__assert_fail@plt+0xdc8>
   11c40:	mov	r0, r5
   11c44:	b	11a84 <__assert_fail@plt+0xafc>
   11c48:	mov	sl, r3
   11c4c:	b	11b74 <__assert_fail@plt+0xbec>
   11c50:	mov	r4, #0
   11c54:	ldr	r3, [sp, #56]	; 0x38
   11c58:	add	r6, r6, #1
   11c5c:	cmp	r3, r6
   11c60:	beq	11c6c <__assert_fail@plt+0xce4>
   11c64:	cmp	fp, #0
   11c68:	beq	11c8c <__assert_fail@plt+0xd04>
   11c6c:	ldrd	r2, [sp, #40]	; 0x28
   11c70:	mov	r1, r7
   11c74:	ldr	r0, [r5, sl, lsl #2]
   11c78:	adds	r2, r2, r7
   11c7c:	adc	r3, r3, #0
   11c80:	strd	r2, [sp, #40]	; 0x28
   11c84:	bl	1219c <__assert_fail@plt+0x1214>
   11c88:	ldr	fp, [sp, #48]	; 0x30
   11c8c:	add	r2, sl, #1
   11c90:	mov	r0, r2
   11c94:	ldr	r1, [sp, #56]	; 0x38
   11c98:	str	r2, [sp, #100]	; 0x64
   11c9c:	bl	15a5c <__assert_fail@plt+0x4ad4>
   11ca0:	cmp	r4, #0
   11ca4:	mov	r6, sl
   11ca8:	ldr	r2, [sp, #100]	; 0x64
   11cac:	mov	r3, r1
   11cb0:	beq	11c48 <__assert_fail@plt+0xcc0>
   11cb4:	cmp	fp, #0
   11cb8:	beq	11d20 <__assert_fail@plt+0xd98>
   11cbc:	ldrd	r0, [sp, #40]	; 0x28
   11cc0:	ldr	r2, [sp, #60]	; 0x3c
   11cc4:	rsb	r4, r7, #8192	; 0x2000
   11cc8:	adds	r0, r0, r2
   11ccc:	adc	r1, r1, #0
   11cd0:	cmp	r2, r4
   11cd4:	strd	r0, [sp, #40]	; 0x28
   11cd8:	ldrcc	r0, [r5, sl, lsl #2]
   11cdc:	movcc	r1, r2
   11ce0:	addcc	r0, r0, r7
   11ce4:	bcc	11d0c <__assert_fail@plt+0xd84>
   11ce8:	ldr	r0, [r5, sl, lsl #2]
   11cec:	mov	r1, r4
   11cf0:	add	r0, r0, r7
   11cf4:	str	r3, [sp, #64]	; 0x40
   11cf8:	bl	1219c <__assert_fail@plt+0x1214>
   11cfc:	ldr	r3, [sp, #60]	; 0x3c
   11d00:	sub	r1, r3, r4
   11d04:	ldr	r3, [sp, #64]	; 0x40
   11d08:	ldr	r0, [r5, r3, lsl #2]
   11d0c:	bl	1219c <__assert_fail@plt+0x1214>
   11d10:	mov	r4, fp
   11d14:	b	11c34 <__assert_fail@plt+0xcac>
   11d18:	ldr	r4, [sp, #48]	; 0x30
   11d1c:	b	11c54 <__assert_fail@plt+0xccc>
   11d20:	ldr	r1, [sp, #56]	; 0x38
   11d24:	cmp	r1, r2
   11d28:	bne	11c34 <__assert_fail@plt+0xcac>
   11d2c:	ldr	r2, [sp, #68]	; 0x44
   11d30:	ldr	r0, [r5, r3, lsl #2]
   11d34:	sub	r1, r7, r2
   11d38:	ldrd	r6, [sp, #40]	; 0x28
   11d3c:	adds	r6, r6, r1
   11d40:	adc	r7, r7, #0
   11d44:	strd	r6, [sp, #40]	; 0x28
   11d48:	bl	1219c <__assert_fail@plt+0x1214>
   11d4c:	b	11c34 <__assert_fail@plt+0xcac>
   11d50:	ldr	r0, [r5, r6, lsl #2]
   11d54:	bl	12c34 <__assert_fail@plt+0x1cac>
   11d58:	add	r6, r6, #1
   11d5c:	b	11c38 <__assert_fail@plt+0xcb0>
   11d60:	ldrd	r0, [sp, #32]
   11d64:	subs	r0, r2, r0
   11d68:	sbc	r1, r3, r1
   11d6c:	mov	r3, r1
   11d70:	cmp	r0, #0
   11d74:	sbcs	r1, r3, #0
   11d78:	mov	r2, r0
   11d7c:	blt	11d90 <__assert_fail@plt+0xe08>
   11d80:	ldrd	r0, [sp, #16]
   11d84:	cmp	r1, r3
   11d88:	cmpeq	r0, r2
   11d8c:	bcc	11d98 <__assert_fail@plt+0xe10>
   11d90:	ldr	r4, [sp, #48]	; 0x30
   11d94:	b	1184c <__assert_fail@plt+0x8c4>
   11d98:	ldrd	r0, [sp, #16]
   11d9c:	subs	r0, r2, r0
   11da0:	sbc	r1, r3, r1
   11da4:	mov	r2, r0
   11da8:	mov	r3, r1
   11dac:	ldr	r0, [sp, #28]
   11db0:	bl	12214 <__assert_fail@plt+0x128c>
   11db4:	cmp	r0, #0
   11db8:	beq	11d90 <__assert_fail@plt+0xe08>
   11dbc:	mov	r1, r9
   11dc0:	bl	124dc <__assert_fail@plt+0x1554>
   11dc4:	b	1184c <__assert_fail@plt+0x8c4>
   11dc8:	ldr	r3, [sp, #24]
   11dcc:	ldr	r1, [sp, #28]
   11dd0:	cmp	r3, #0
   11dd4:	mov	r0, r9
   11dd8:	ldrd	r2, [sp, #16]
   11ddc:	beq	11dec <__assert_fail@plt+0xe64>
   11de0:	bl	122b0 <__assert_fail@plt+0x1328>
   11de4:	mov	r4, r0
   11de8:	b	1184c <__assert_fail@plt+0x8c4>
   11dec:	bl	12410 <__assert_fail@plt+0x1488>
   11df0:	b	11de4 <__assert_fail@plt+0xe5c>
   11df4:	ldr	r3, [sp, #24]
   11df8:	mvn	r2, #0
   11dfc:	cmp	r3, #0
   11e00:	mvn	r3, #0
   11e04:	strd	r2, [sp, #32]
   11e08:	bne	11624 <__assert_fail@plt+0x69c>
   11e0c:	ldr	r3, [sp, #32]
   11e10:	ldr	r2, [sp, #36]	; 0x24
   11e14:	and	r4, r3, r2
   11e18:	ldr	r3, [pc, #192]	; 11ee0 <__assert_fail@plt+0xf58>
   11e1c:	cmn	r4, #1
   11e20:	movne	r4, #0
   11e24:	ldrb	r0, [r3, #3]
   11e28:	moveq	r4, #1
   11e2c:	orrs	r4, r4, r0
   11e30:	bne	11e58 <__assert_fail@plt+0xed0>
   11e34:	ldr	r0, [sp, #184]	; 0xb8
   11e38:	sub	r3, r0, #1
   11e3c:	cmn	r3, #-536870911	; 0xe0000001
   11e40:	ldrd	r2, [sp, #176]	; 0xb0
   11e44:	movhi	r0, #512	; 0x200
   11e48:	cmp	r0, r2
   11e4c:	asr	r1, r0, #31
   11e50:	sbcs	r1, r1, r3
   11e54:	blt	11d60 <__assert_fail@plt+0xdd8>
   11e58:	ldrd	r2, [sp, #32]
   11e5c:	ldrd	r0, [sp, #88]	; 0x58
   11e60:	strd	r2, [sp, #40]	; 0x28
   11e64:	mov	r3, #0
   11e68:	mvn	r2, #0
   11e6c:	cmp	r1, r3
   11e70:	cmpeq	r0, r2
   11e74:	bls	119d4 <__assert_fail@plt+0xa4c>
   11e78:	mov	r2, #5
   11e7c:	ldr	r1, [pc, #200]	; 11f4c <__assert_fail@plt+0xfc4>
   11e80:	mov	r0, #0
   11e84:	bl	10d90 <dcgettext@plt>
   11e88:	add	r2, sp, #104	; 0x68
   11e8c:	mov	r4, r0
   11e90:	ldrd	r0, [sp, #16]
   11e94:	bl	12db8 <__assert_fail@plt+0x1e30>
   11e98:	mov	r2, r4
   11e9c:	mov	r1, #0
   11ea0:	mov	r3, r0
   11ea4:	mov	r0, #1
   11ea8:	bl	10e14 <error@plt>
   11eac:	cmp	r4, #0
   11eb0:	ldreq	r4, [sp, #48]	; 0x30
   11eb4:	bne	11b28 <__assert_fail@plt+0xba0>
   11eb8:	b	11ae8 <__assert_fail@plt+0xb60>
   11ebc:	ldr	r3, [sp, #52]	; 0x34
   11ec0:	cmp	r3, r0
   11ec4:	eorcs	sl, sl, #1
   11ec8:	bcs	11ad8 <__assert_fail@plt+0xb50>
   11ecc:	mov	r4, r6
   11ed0:	b	11b28 <__assert_fail@plt+0xba0>
   11ed4:	andeq	r6, r1, sp, lsl #14
   11ed8:	andeq	r6, r1, lr, lsl #14
   11edc:	andeq	r6, r1, fp, ror #12
   11ee0:	andeq	r7, r2, r5, ror #2
   11ee4:	andeq	r2, r1, r0, asr fp
   11ee8:	andeq	r7, r2, r0, ror #2
   11eec:	ldrdeq	r5, [r1], -ip
   11ef0:	andeq	r6, r1, r1, ror #14
   11ef4:	andeq	r7, r2, r0, asr r1
   11ef8:	muleq	r1, r4, r0
   11efc:	andeq	r6, r1, r3, ror r7
   11f00:	andeq	r6, r1, r6, lsr #14
   11f04:	andeq	r6, r1, r4, asr #14
   11f08:	andeq	r7, r2, ip, asr r1
   11f0c:	andeq	r6, r1, r1, asr r7
   11f10:	strdeq	r7, [r2], -ip
   11f14:	andeq	r6, r1, r7, ror #12
   11f18:	andeq	r6, r1, fp, asr #2
   11f1c:	ldrdeq	r5, [r1], -r4
   11f20:	strdeq	r6, [r1], -r8
   11f24:	andeq	r6, r1, sl, ror r7
   11f28:	strdeq	r7, [r2], -r8
   11f2c:	andeq	r6, r1, ip, lsl #14
   11f30:	andeq	r6, r1, r4, lsr #15
   11f34:			; <UNDEFINED> instruction: 0x000167b2
   11f38:	andeq	r6, r1, r9, lsl #15
   11f3c:	andeq	r2, r0, r0, lsl r0
   11f40:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   11f44:	andeq	r6, r1, sp, lsl r1
   11f48:	andeq	r6, r1, r3, ror #15
   11f4c:	andeq	r6, r1, r2, asr #15
   11f50:	ldr	r3, [sp, #72]	; 0x48
   11f54:	eor	r0, r3, #1
   11f58:	add	sp, sp, #236	; 0xec
   11f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f60:	mov	fp, #0
   11f64:	mov	lr, #0
   11f68:	pop	{r1}		; (ldr r1, [sp], #4)
   11f6c:	mov	r2, sp
   11f70:	push	{r2}		; (str r2, [sp, #-4]!)
   11f74:	push	{r0}		; (str r0, [sp, #-4]!)
   11f78:	ldr	ip, [pc, #16]	; 11f90 <__assert_fail@plt+0x1008>
   11f7c:	push	{ip}		; (str ip, [sp, #-4]!)
   11f80:	ldr	r0, [pc, #12]	; 11f94 <__assert_fail@plt+0x100c>
   11f84:	ldr	r3, [pc, #12]	; 11f98 <__assert_fail@plt+0x1010>
   11f88:	bl	10e38 <__libc_start_main@plt>
   11f8c:	bl	10f70 <abort@plt>
   11f90:	andeq	r5, r1, r4, ror #30
   11f94:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11f98:	andeq	r5, r1, r4, lsl #30
   11f9c:	ldr	r3, [pc, #20]	; 11fb8 <__assert_fail@plt+0x1030>
   11fa0:	ldr	r2, [pc, #20]	; 11fbc <__assert_fail@plt+0x1034>
   11fa4:	add	r3, pc, r3
   11fa8:	ldr	r2, [r3, r2]
   11fac:	cmp	r2, #0
   11fb0:	bxeq	lr
   11fb4:	b	10e50 <__gmon_start__@plt>
   11fb8:	andeq	r5, r1, r4, asr r0
   11fbc:	andeq	r0, r0, ip, ror #1
   11fc0:	ldr	r3, [pc, #28]	; 11fe4 <__assert_fail@plt+0x105c>
   11fc4:	ldr	r0, [pc, #28]	; 11fe8 <__assert_fail@plt+0x1060>
   11fc8:	sub	r3, r3, r0
   11fcc:	cmp	r3, #6
   11fd0:	bxls	lr
   11fd4:	ldr	r3, [pc, #16]	; 11fec <__assert_fail@plt+0x1064>
   11fd8:	cmp	r3, #0
   11fdc:	bxeq	lr
   11fe0:	bx	r3
   11fe4:	andeq	r7, r2, r7, asr #2
   11fe8:	andeq	r7, r2, r4, asr #2
   11fec:	andeq	r0, r0, r0
   11ff0:	ldr	r1, [pc, #36]	; 1201c <__assert_fail@plt+0x1094>
   11ff4:	ldr	r0, [pc, #36]	; 12020 <__assert_fail@plt+0x1098>
   11ff8:	sub	r1, r1, r0
   11ffc:	asr	r1, r1, #2
   12000:	add	r1, r1, r1, lsr #31
   12004:	asrs	r1, r1, #1
   12008:	bxeq	lr
   1200c:	ldr	r3, [pc, #16]	; 12024 <__assert_fail@plt+0x109c>
   12010:	cmp	r3, #0
   12014:	bxeq	lr
   12018:	bx	r3
   1201c:	andeq	r7, r2, r4, asr #2
   12020:	andeq	r7, r2, r4, asr #2
   12024:	andeq	r0, r0, r0
   12028:	push	{r4, lr}
   1202c:	ldr	r4, [pc, #24]	; 1204c <__assert_fail@plt+0x10c4>
   12030:	ldrb	r3, [r4]
   12034:	cmp	r3, #0
   12038:	popne	{r4, pc}
   1203c:	bl	11fc0 <__assert_fail@plt+0x1038>
   12040:	mov	r3, #1
   12044:	strb	r3, [r4]
   12048:	pop	{r4, pc}
   1204c:	andeq	r7, r2, r4, ror #2
   12050:	ldr	r0, [pc, #40]	; 12080 <__assert_fail@plt+0x10f8>
   12054:	ldr	r3, [r0]
   12058:	cmp	r3, #0
   1205c:	bne	12064 <__assert_fail@plt+0x10dc>
   12060:	b	11ff0 <__assert_fail@plt+0x1068>
   12064:	ldr	r3, [pc, #24]	; 12084 <__assert_fail@plt+0x10fc>
   12068:	cmp	r3, #0
   1206c:	beq	12060 <__assert_fail@plt+0x10d8>
   12070:	push	{r4, lr}
   12074:	blx	r3
   12078:	pop	{r4, lr}
   1207c:	b	11ff0 <__assert_fail@plt+0x1068>
   12080:	andeq	r6, r2, r4, lsl pc
   12084:	andeq	r0, r0, r0
   12088:	cmp	r0, #0
   1208c:	push	{r4, lr}
   12090:	movne	r0, #0
   12094:	sub	sp, sp, #24
   12098:	mov	r4, r1
   1209c:	mov	r2, #5
   120a0:	ldrne	r1, [pc, #60]	; 120e4 <__assert_fail@plt+0x115c>
   120a4:	ldreq	r1, [pc, #60]	; 120e8 <__assert_fail@plt+0x1160>
   120a8:	bl	10d90 <dcgettext@plt>
   120ac:	mov	r3, #0
   120b0:	str	r3, [sp, #16]
   120b4:	ldr	r3, [pc, #48]	; 120ec <__assert_fail@plt+0x1164>
   120b8:	mvn	r2, #0
   120bc:	str	r3, [sp, #8]
   120c0:	mvn	r3, #0
   120c4:	strd	r2, [sp]
   120c8:	mov	r2, #0
   120cc:	mov	r3, #0
   120d0:	str	r0, [sp, #12]
   120d4:	mov	r0, r4
   120d8:	bl	14fd4 <__assert_fail@plt+0x404c>
   120dc:	add	sp, sp, #24
   120e0:	pop	{r4, pc}
   120e4:	andeq	r6, r1, ip, ror r0
   120e8:	muleq	r1, r4, r0
   120ec:	andeq	r6, r1, ip, lsr #1
   120f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   120f4:	sub	sp, sp, #32
   120f8:	mov	r9, r3
   120fc:	ldr	r6, [sp, #64]	; 0x40
   12100:	mov	r8, r2
   12104:	str	r6, [sp]
   12108:	bl	10dd8 <lseek64@plt>
   1210c:	cmp	r0, #0
   12110:	sbcs	r3, r1, #0
   12114:	mov	r4, r0
   12118:	mov	r5, r1
   1211c:	bge	12184 <__assert_fail@plt+0x11fc>
   12120:	bl	10ea4 <__errno_location@plt>
   12124:	ldr	r3, [pc, #104]	; 12194 <__assert_fail@plt+0x120c>
   12128:	cmp	r6, #0
   1212c:	ldr	r1, [pc, #100]	; 12198 <__assert_fail@plt+0x1210>
   12130:	mov	r2, #5
   12134:	movne	r1, r3
   12138:	ldr	r7, [r0]
   1213c:	mov	r0, #0
   12140:	bl	10d90 <dcgettext@plt>
   12144:	ldr	r2, [sp, #68]	; 0x44
   12148:	mov	r1, #3
   1214c:	mov	r6, r0
   12150:	mov	r0, #0
   12154:	bl	14310 <__assert_fail@plt+0x3388>
   12158:	add	r2, sp, #8
   1215c:	mov	r1, r9
   12160:	mov	sl, r0
   12164:	mov	r0, r8
   12168:	bl	12ce8 <__assert_fail@plt+0x1d60>
   1216c:	mov	r3, sl
   12170:	mov	r2, r6
   12174:	mov	r1, r7
   12178:	str	r0, [sp]
   1217c:	mov	r0, #0
   12180:	bl	10e14 <error@plt>
   12184:	mov	r0, r4
   12188:	mov	r1, r5
   1218c:	add	sp, sp, #32
   12190:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12194:	ldrdeq	r6, [r1], -r6	; <UNPREDICTABLE>
   12198:	strheq	r6, [r1], -r9
   1219c:	push	{r4, r5, r6, lr}
   121a0:	subs	r4, r1, #0
   121a4:	popeq	{r4, r5, r6, pc}
   121a8:	ldr	r5, [pc, #88]	; 12208 <__assert_fail@plt+0x1280>
   121ac:	mov	r2, r4
   121b0:	mov	r1, #1
   121b4:	ldr	r3, [r5]
   121b8:	bl	10d6c <fwrite_unlocked@plt>
   121bc:	cmp	r4, r0
   121c0:	popls	{r4, r5, r6, pc}
   121c4:	ldr	r0, [r5]
   121c8:	bl	10f40 <clearerr_unlocked@plt>
   121cc:	bl	10ea4 <__errno_location@plt>
   121d0:	mov	r2, #5
   121d4:	ldr	r1, [pc, #48]	; 1220c <__assert_fail@plt+0x1284>
   121d8:	ldr	r4, [r0]
   121dc:	mov	r0, #0
   121e0:	bl	10d90 <dcgettext@plt>
   121e4:	ldr	r1, [pc, #36]	; 12210 <__assert_fail@plt+0x1288>
   121e8:	mov	r5, r0
   121ec:	mov	r0, #4
   121f0:	bl	1426c <__assert_fail@plt+0x32e4>
   121f4:	mov	r2, r5
   121f8:	mov	r1, r4
   121fc:	mov	r3, r0
   12200:	mov	r0, #1
   12204:	bl	10e14 <error@plt>
   12208:	andeq	r7, r2, ip, asr r1
   1220c:	strdeq	r6, [r1], -ip
   12210:	andeq	r6, r1, sp, lsl #2
   12214:	push	{r4, r5, r6, r7, lr}
   12218:	sub	sp, sp, #8192	; 0x2000
   1221c:	sub	sp, sp, #4
   12220:	mov	r6, r0
   12224:	mov	r4, r2
   12228:	mov	r5, r3
   1222c:	mov	r7, #8192	; 0x2000
   12230:	orrs	r3, r4, r5
   12234:	bne	12248 <__assert_fail@plt+0x12c0>
   12238:	mov	r0, #0
   1223c:	add	sp, sp, #8192	; 0x2000
   12240:	add	sp, sp, #4
   12244:	pop	{r4, r5, r6, r7, pc}
   12248:	cmp	r5, #0
   1224c:	cmpeq	r4, #8192	; 0x2000
   12250:	mov	r2, r4
   12254:	mov	r1, sp
   12258:	movhi	r2, r7
   1225c:	mov	r0, r6
   12260:	bl	1445c <__assert_fail@plt+0x34d4>
   12264:	cmn	r0, #1
   12268:	mov	r1, r0
   1226c:	beq	122a0 <__assert_fail@plt+0x1318>
   12270:	subs	r4, r4, r0
   12274:	sbc	r5, r5, #0
   12278:	orr	r2, r4, r5
   1227c:	cmp	r2, #0
   12280:	clz	r3, r0
   12284:	lsr	r3, r3, #5
   12288:	moveq	r3, #0
   1228c:	cmp	r3, #0
   12290:	bne	122a8 <__assert_fail@plt+0x1320>
   12294:	mov	r0, sp
   12298:	bl	1219c <__assert_fail@plt+0x1214>
   1229c:	b	12230 <__assert_fail@plt+0x12a8>
   122a0:	mov	r0, #1
   122a4:	b	1223c <__assert_fail@plt+0x12b4>
   122a8:	mov	r0, #2
   122ac:	b	1223c <__assert_fail@plt+0x12b4>
   122b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122b4:	sub	sp, sp, #8256	; 0x2040
   122b8:	sub	sp, sp, #52	; 0x34
   122bc:	mov	fp, r0
   122c0:	mov	r8, r1
   122c4:	mov	r6, r2
   122c8:	mov	r7, r3
   122cc:	orrs	r3, r6, r7
   122d0:	beq	12344 <__assert_fail@plt+0x13bc>
   122d4:	add	r9, sp, #112	; 0x70
   122d8:	mov	r2, #8192	; 0x2000
   122dc:	mov	r1, r9
   122e0:	mov	r0, r8
   122e4:	bl	1445c <__assert_fail@plt+0x34d4>
   122e8:	cmn	r0, #1
   122ec:	bne	1233c <__assert_fail@plt+0x13b4>
   122f0:	bl	10ea4 <__errno_location@plt>
   122f4:	mov	r2, #5
   122f8:	ldr	r1, [pc, #264]	; 12408 <__assert_fail@plt+0x1480>
   122fc:	ldr	r4, [r0]
   12300:	mov	r0, #0
   12304:	bl	10d90 <dcgettext@plt>
   12308:	mov	r1, fp
   1230c:	mov	r5, r0
   12310:	mov	r0, #4
   12314:	bl	1426c <__assert_fail@plt+0x32e4>
   12318:	mov	r2, r5
   1231c:	mov	r1, r4
   12320:	mov	r3, r0
   12324:	mov	r0, #0
   12328:	bl	10e14 <error@plt>
   1232c:	mov	r0, #0
   12330:	add	sp, sp, #8256	; 0x2040
   12334:	add	sp, sp, #52	; 0x34
   12338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1233c:	cmp	r0, #0
   12340:	bne	1234c <__assert_fail@plt+0x13c4>
   12344:	mov	r0, #1
   12348:	b	12330 <__assert_fail@plt+0x13a8>
   1234c:	ldr	r3, [pc, #184]	; 1240c <__assert_fail@plt+0x1484>
   12350:	ldrb	r2, [r3]
   12354:	mov	r3, #0
   12358:	add	sl, r3, #1
   1235c:	ldrb	r3, [r9, r3]
   12360:	cmp	r3, r2
   12364:	bne	123f8 <__assert_fail@plt+0x1470>
   12368:	subs	r6, r6, #1
   1236c:	sbc	r7, r7, #0
   12370:	orrs	r3, r6, r7
   12374:	bne	123f8 <__assert_fail@plt+0x1470>
   12378:	sub	r0, r0, sl
   1237c:	rsbs	r4, r0, #0
   12380:	sbc	r5, r5, r5
   12384:	mov	r3, #1
   12388:	str	r3, [sp]
   1238c:	mov	r2, r4
   12390:	mov	r3, r5
   12394:	mov	r0, r8
   12398:	bl	10dd8 <lseek64@plt>
   1239c:	cmp	r0, #0
   123a0:	sbcs	r3, r1, #0
   123a4:	bge	123e8 <__assert_fail@plt+0x1460>
   123a8:	add	r1, sp, #8
   123ac:	mov	r0, r8
   123b0:	bl	15f80 <__assert_fail@plt+0x4ff8>
   123b4:	cmp	r0, #0
   123b8:	bne	123cc <__assert_fail@plt+0x1444>
   123bc:	ldr	r3, [r9, #-88]	; 0xffffffa8
   123c0:	and	r3, r3, #61440	; 0xf000
   123c4:	cmp	r3, #32768	; 0x8000
   123c8:	bne	123e8 <__assert_fail@plt+0x1460>
   123cc:	mov	r3, #1
   123d0:	str	r3, [sp]
   123d4:	str	fp, [sp, #4]
   123d8:	mov	r2, r4
   123dc:	mov	r3, r5
   123e0:	mov	r0, r8
   123e4:	bl	120f0 <__assert_fail@plt+0x1168>
   123e8:	mov	r1, sl
   123ec:	mov	r0, r9
   123f0:	bl	1219c <__assert_fail@plt+0x1214>
   123f4:	b	122cc <__assert_fail@plt+0x1344>
   123f8:	cmp	r0, sl
   123fc:	mov	r3, sl
   12400:	bne	12358 <__assert_fail@plt+0x13d0>
   12404:	b	123e8 <__assert_fail@plt+0x1460>
   12408:	andeq	r6, r1, sp, lsl r1
   1240c:	andeq	r7, r2, r5, ror #2
   12410:	push	{r4, r5, r6, r7, r8, r9, lr}
   12414:	sub	sp, sp, #8192	; 0x2000
   12418:	sub	sp, sp, #4
   1241c:	mov	r8, r0
   12420:	mov	r9, r1
   12424:	mov	r4, r2
   12428:	mov	r5, r3
   1242c:	mov	r6, #8192	; 0x2000
   12430:	orrs	r3, r4, r5
   12434:	beq	124b8 <__assert_fail@plt+0x1530>
   12438:	mov	r3, #0
   1243c:	cmp	r5, r3
   12440:	cmpeq	r4, r6
   12444:	movcc	r6, r4
   12448:	mov	r2, r6
   1244c:	mov	r1, sp
   12450:	mov	r0, r9
   12454:	bl	1445c <__assert_fail@plt+0x34d4>
   12458:	cmn	r0, #1
   1245c:	mov	r7, r0
   12460:	bne	124b0 <__assert_fail@plt+0x1528>
   12464:	bl	10ea4 <__errno_location@plt>
   12468:	mov	r2, #5
   1246c:	ldr	r1, [pc, #100]	; 124d8 <__assert_fail@plt+0x1550>
   12470:	ldr	r4, [r0]
   12474:	mov	r0, #0
   12478:	bl	10d90 <dcgettext@plt>
   1247c:	mov	r1, r8
   12480:	mov	r5, r0
   12484:	mov	r0, #4
   12488:	bl	1426c <__assert_fail@plt+0x32e4>
   1248c:	mov	r2, r5
   12490:	mov	r1, r4
   12494:	mov	r3, r0
   12498:	mov	r0, #0
   1249c:	bl	10e14 <error@plt>
   124a0:	mov	r0, #0
   124a4:	add	sp, sp, #8192	; 0x2000
   124a8:	add	sp, sp, #4
   124ac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   124b0:	cmp	r0, #0
   124b4:	bne	124c0 <__assert_fail@plt+0x1538>
   124b8:	mov	r0, #1
   124bc:	b	124a4 <__assert_fail@plt+0x151c>
   124c0:	mov	r1, r0
   124c4:	mov	r0, sp
   124c8:	bl	1219c <__assert_fail@plt+0x1214>
   124cc:	subs	r4, r4, r7
   124d0:	sbc	r5, r5, #0
   124d4:	b	12430 <__assert_fail@plt+0x14a8>
   124d8:	andeq	r6, r1, sp, lsl r1
   124dc:	cmp	r0, #1
   124e0:	push	{r4, r5, r6, lr}
   124e4:	mov	r4, r1
   124e8:	beq	124f8 <__assert_fail@plt+0x1570>
   124ec:	cmp	r0, #2
   124f0:	beq	12538 <__assert_fail@plt+0x15b0>
   124f4:	bl	10f70 <abort@plt>
   124f8:	bl	10ea4 <__errno_location@plt>
   124fc:	ldr	r1, [pc, #100]	; 12568 <__assert_fail@plt+0x15e0>
   12500:	mov	r2, #5
   12504:	ldr	r5, [r0]
   12508:	mov	r0, #0
   1250c:	bl	10d90 <dcgettext@plt>
   12510:	mov	r1, r4
   12514:	mov	r6, r0
   12518:	mov	r0, #4
   1251c:	bl	1426c <__assert_fail@plt+0x32e4>
   12520:	mov	r3, r0
   12524:	mov	r2, r6
   12528:	mov	r1, r5
   1252c:	mov	r0, #0
   12530:	pop	{r4, r5, r6, lr}
   12534:	b	10e14 <error@plt>
   12538:	bl	10ea4 <__errno_location@plt>
   1253c:	mov	r2, #5
   12540:	ldr	r1, [pc, #36]	; 1256c <__assert_fail@plt+0x15e4>
   12544:	ldr	r5, [r0]
   12548:	mov	r0, #0
   1254c:	bl	10d90 <dcgettext@plt>
   12550:	mov	r2, r4
   12554:	mov	r1, #3
   12558:	mov	r6, r0
   1255c:	mov	r0, #0
   12560:	bl	14310 <__assert_fail@plt+0x3388>
   12564:	b	12520 <__assert_fail@plt+0x1598>
   12568:	andeq	r6, r1, sp, lsl r1
   1256c:	andeq	r6, r1, lr, lsr #2
   12570:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12574:	sub	sp, sp, #8192	; 0x2000
   12578:	sub	sp, sp, #20
   1257c:	mov	fp, r3
   12580:	add	r3, sp, #8256	; 0x2040
   12584:	mov	r8, r0
   12588:	ldrd	r6, [r3]
   1258c:	add	r3, sp, #8192	; 0x2000
   12590:	add	r3, r3, #56	; 0x38
   12594:	mov	r9, r1
   12598:	ldrd	r0, [r3]
   1259c:	mov	sl, r2
   125a0:	ldr	r2, [pc, #668]	; 12844 <__assert_fail@plt+0x18bc>
   125a4:	subs	r0, r6, r0
   125a8:	sbc	r1, r7, r1
   125ac:	mov	r3, #-2147483648	; 0x80000000
   125b0:	and	r2, r2, r0
   125b4:	and	r3, r3, r1
   125b8:	cmp	r2, #0
   125bc:	sbcs	r1, r3, #0
   125c0:	bge	125d4 <__assert_fail@plt+0x164c>
   125c4:	ldr	r0, [pc, #636]	; 12848 <__assert_fail@plt+0x18c0>
   125c8:	subs	r2, r2, #1
   125cc:	orr	r2, r2, r0
   125d0:	adds	r2, r2, #1
   125d4:	cmp	r2, #0
   125d8:	movne	r5, r2
   125dc:	moveq	r5, #8192	; 0x2000
   125e0:	subs	r6, r6, r5
   125e4:	sbc	r7, r7, #0
   125e8:	mov	r4, #0
   125ec:	mov	r3, r7
   125f0:	str	r8, [sp, #4]
   125f4:	str	r4, [sp]
   125f8:	mov	r2, r6
   125fc:	mov	r0, r9
   12600:	bl	120f0 <__assert_fail@plt+0x1168>
   12604:	cmp	r0, #0
   12608:	sbcs	r3, r1, #0
   1260c:	bge	12624 <__assert_fail@plt+0x169c>
   12610:	mov	r4, #0
   12614:	mov	r0, r4
   12618:	add	sp, sp, #8192	; 0x2000
   1261c:	add	sp, sp, #20
   12620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12624:	mov	r2, r5
   12628:	add	r1, sp, #16
   1262c:	mov	r0, r9
   12630:	bl	1445c <__assert_fail@plt+0x34d4>
   12634:	cmn	r0, #1
   12638:	mov	r5, r0
   1263c:	bne	12680 <__assert_fail@plt+0x16f8>
   12640:	bl	10ea4 <__errno_location@plt>
   12644:	mov	r2, #5
   12648:	ldr	r1, [pc, #508]	; 1284c <__assert_fail@plt+0x18c4>
   1264c:	ldr	r5, [r0]
   12650:	mov	r0, r4
   12654:	bl	10d90 <dcgettext@plt>
   12658:	mov	r1, r8
   1265c:	mov	r6, r0
   12660:	mov	r0, #4
   12664:	bl	1426c <__assert_fail@plt+0x32e4>
   12668:	mov	r2, r6
   1266c:	mov	r1, r5
   12670:	mov	r3, r0
   12674:	mov	r0, r4
   12678:	bl	10e14 <error@plt>
   1267c:	b	12614 <__assert_fail@plt+0x168c>
   12680:	orr	r3, sl, fp
   12684:	cmp	r0, #0
   12688:	cmpne	r3, #0
   1268c:	beq	1270c <__assert_fail@plt+0x1784>
   12690:	add	r3, sp, #16
   12694:	add	r3, r3, r0
   12698:	ldrb	r2, [r3, #-1]
   1269c:	ldr	r3, [pc, #428]	; 12850 <__assert_fail@plt+0x18c8>
   126a0:	ldrb	r3, [r3]
   126a4:	cmp	r2, r3
   126a8:	beq	1270c <__assert_fail@plt+0x1784>
   126ac:	subs	r2, sl, #1
   126b0:	sbc	r3, fp, #0
   126b4:	strd	r2, [sp, #8]
   126b8:	ldr	r3, [pc, #400]	; 12850 <__assert_fail@plt+0x18c8>
   126bc:	ldrb	r4, [r3]
   126c0:	cmp	r5, #0
   126c4:	beq	126ec <__assert_fail@plt+0x1764>
   126c8:	orrs	r3, sl, fp
   126cc:	subeq	r5, r5, #1
   126d0:	beq	1271c <__assert_fail@plt+0x1794>
   126d4:	mov	r2, r5
   126d8:	mov	r1, r4
   126dc:	add	r0, sp, #16
   126e0:	bl	10e98 <memrchr@plt>
   126e4:	cmp	r0, #0
   126e8:	bne	12714 <__assert_fail@plt+0x178c>
   126ec:	add	r3, sp, #8192	; 0x2000
   126f0:	add	r3, r3, #56	; 0x38
   126f4:	ldrd	r2, [r3]
   126f8:	cmp	r7, r3
   126fc:	cmpeq	r6, r2
   12700:	bne	127ec <__assert_fail@plt+0x1864>
   12704:	mov	r4, #1
   12708:	b	12614 <__assert_fail@plt+0x168c>
   1270c:	strd	sl, [sp, #8]
   12710:	b	126b8 <__assert_fail@plt+0x1730>
   12714:	add	r3, sp, #16
   12718:	sub	r5, r0, r3
   1271c:	ldrd	r2, [sp, #8]
   12720:	ldrd	r0, [sp, #8]
   12724:	subs	r2, r2, #1
   12728:	sbc	r3, r3, #0
   1272c:	orrs	r1, r0, r1
   12730:	bne	127e4 <__assert_fail@plt+0x185c>
   12734:	add	r3, sp, #8192	; 0x2000
   12738:	add	r3, r3, #56	; 0x38
   1273c:	ldrd	r2, [r3]
   12740:	cmp	r2, r6
   12744:	sbcs	r3, r3, r7
   12748:	bge	127a8 <__assert_fail@plt+0x1820>
   1274c:	add	r3, sp, #8192	; 0x2000
   12750:	add	r3, r3, #56	; 0x38
   12754:	mov	r4, #0
   12758:	str	r8, [sp, #4]
   1275c:	str	r4, [sp]
   12760:	mov	r0, r9
   12764:	ldrd	r2, [r3]
   12768:	bl	120f0 <__assert_fail@plt+0x1168>
   1276c:	cmp	r0, #0
   12770:	sbcs	r3, r1, #0
   12774:	blt	12610 <__assert_fail@plt+0x1688>
   12778:	add	r3, sp, #8192	; 0x2000
   1277c:	add	r3, r3, #56	; 0x38
   12780:	mov	r0, r9
   12784:	ldrd	r2, [r3]
   12788:	subs	r2, r6, r2
   1278c:	sbc	r3, r7, r3
   12790:	bl	12214 <__assert_fail@plt+0x128c>
   12794:	cmp	r0, r4
   12798:	beq	127a8 <__assert_fail@plt+0x1820>
   1279c:	mov	r1, r8
   127a0:	bl	124dc <__assert_fail@plt+0x1554>
   127a4:	b	12614 <__assert_fail@plt+0x168c>
   127a8:	add	r1, r5, #1
   127ac:	add	r0, sp, #16
   127b0:	bl	1219c <__assert_fail@plt+0x1214>
   127b4:	adds	r2, r6, r5
   127b8:	adc	r3, r7, #0
   127bc:	mov	r1, #0
   127c0:	adds	r2, r2, #1
   127c4:	str	r8, [sp, #4]
   127c8:	str	r1, [sp]
   127cc:	adc	r3, r3, #0
   127d0:	mov	r0, r9
   127d4:	bl	120f0 <__assert_fail@plt+0x1168>
   127d8:	mvn	r4, r1
   127dc:	lsr	r4, r4, #31
   127e0:	b	12614 <__assert_fail@plt+0x168c>
   127e4:	strd	r2, [sp, #8]
   127e8:	b	126c0 <__assert_fail@plt+0x1738>
   127ec:	subs	r6, r6, #8192	; 0x2000
   127f0:	sbc	r7, r7, #0
   127f4:	mov	r4, #0
   127f8:	mov	r3, r7
   127fc:	str	r8, [sp, #4]
   12800:	str	r4, [sp]
   12804:	mov	r2, r6
   12808:	mov	r0, r9
   1280c:	bl	120f0 <__assert_fail@plt+0x1168>
   12810:	cmp	r0, #0
   12814:	sbcs	r3, r1, #0
   12818:	blt	12610 <__assert_fail@plt+0x1688>
   1281c:	mov	r2, #8192	; 0x2000
   12820:	add	r1, sp, #16
   12824:	mov	r0, r9
   12828:	bl	1445c <__assert_fail@plt+0x34d4>
   1282c:	cmn	r0, #1
   12830:	mov	r5, r0
   12834:	beq	12640 <__assert_fail@plt+0x16b8>
   12838:	cmp	r0, #0
   1283c:	bne	126b8 <__assert_fail@plt+0x1730>
   12840:	b	12704 <__assert_fail@plt+0x177c>
   12844:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   12848:			; <UNDEFINED> instruction: 0xffffe000
   1284c:	andeq	r6, r1, sp, lsl r1
   12850:	andeq	r7, r2, r5, ror #2
   12854:	subs	r4, r0, #0
   12858:	push	{r7, lr}
   1285c:	sub	sp, sp, #56	; 0x38
   12860:	ldr	r5, [pc, #612]	; 12acc <__assert_fail@plt+0x1b44>
   12864:	beq	1289c <__assert_fail@plt+0x1914>
   12868:	ldr	r3, [pc, #608]	; 12ad0 <__assert_fail@plt+0x1b48>
   1286c:	mov	r2, #5
   12870:	ldr	r1, [pc, #604]	; 12ad4 <__assert_fail@plt+0x1b4c>
   12874:	mov	r0, #0
   12878:	ldr	r6, [r3]
   1287c:	bl	10d90 <dcgettext@plt>
   12880:	ldr	r3, [r5]
   12884:	mov	r1, #1
   12888:	mov	r2, r0
   1288c:	mov	r0, r6
   12890:	bl	10eec <__fprintf_chk@plt>
   12894:	mov	r0, r4
   12898:	bl	10e74 <exit@plt>
   1289c:	mov	r2, #5
   128a0:	ldr	r1, [pc, #560]	; 12ad8 <__assert_fail@plt+0x1b50>
   128a4:	bl	10d90 <dcgettext@plt>
   128a8:	ldr	r2, [r5]
   128ac:	ldr	r5, [pc, #552]	; 12adc <__assert_fail@plt+0x1b54>
   128b0:	ldr	r8, [pc, #552]	; 12ae0 <__assert_fail@plt+0x1b58>
   128b4:	mov	r6, r4
   128b8:	mov	r1, r0
   128bc:	mov	r0, #1
   128c0:	bl	10ec8 <__printf_chk@plt>
   128c4:	mov	r2, #5
   128c8:	ldr	r1, [pc, #532]	; 12ae4 <__assert_fail@plt+0x1b5c>
   128cc:	mov	r0, r4
   128d0:	bl	10d90 <dcgettext@plt>
   128d4:	mov	r2, #10
   128d8:	mov	r1, r0
   128dc:	mov	r0, #1
   128e0:	bl	10ec8 <__printf_chk@plt>
   128e4:	mov	r2, #5
   128e8:	ldr	r1, [pc, #504]	; 12ae8 <__assert_fail@plt+0x1b60>
   128ec:	mov	r0, r4
   128f0:	bl	10d90 <dcgettext@plt>
   128f4:	ldr	r1, [r5]
   128f8:	bl	10d00 <fputs_unlocked@plt>
   128fc:	mov	r2, #5
   12900:	ldr	r1, [pc, #484]	; 12aec <__assert_fail@plt+0x1b64>
   12904:	mov	r0, r4
   12908:	bl	10d90 <dcgettext@plt>
   1290c:	ldr	r1, [r5]
   12910:	bl	10d00 <fputs_unlocked@plt>
   12914:	mov	r2, #5
   12918:	ldr	r1, [pc, #464]	; 12af0 <__assert_fail@plt+0x1b68>
   1291c:	mov	r0, r4
   12920:	bl	10d90 <dcgettext@plt>
   12924:	mov	r2, #10
   12928:	mov	r1, r0
   1292c:	mov	r0, #1
   12930:	bl	10ec8 <__printf_chk@plt>
   12934:	mov	r2, #5
   12938:	ldr	r1, [pc, #436]	; 12af4 <__assert_fail@plt+0x1b6c>
   1293c:	mov	r0, r4
   12940:	bl	10d90 <dcgettext@plt>
   12944:	ldr	r1, [r5]
   12948:	bl	10d00 <fputs_unlocked@plt>
   1294c:	mov	r2, #5
   12950:	ldr	r1, [pc, #416]	; 12af8 <__assert_fail@plt+0x1b70>
   12954:	mov	r0, r4
   12958:	bl	10d90 <dcgettext@plt>
   1295c:	ldr	r1, [r5]
   12960:	bl	10d00 <fputs_unlocked@plt>
   12964:	mov	r2, #5
   12968:	ldr	r1, [pc, #396]	; 12afc <__assert_fail@plt+0x1b74>
   1296c:	mov	r0, r4
   12970:	bl	10d90 <dcgettext@plt>
   12974:	ldr	r1, [r5]
   12978:	bl	10d00 <fputs_unlocked@plt>
   1297c:	mov	r2, #5
   12980:	ldr	r1, [pc, #376]	; 12b00 <__assert_fail@plt+0x1b78>
   12984:	mov	r0, r4
   12988:	bl	10d90 <dcgettext@plt>
   1298c:	ldr	r1, [r5]
   12990:	bl	10d00 <fputs_unlocked@plt>
   12994:	mov	r2, #5
   12998:	ldr	r1, [pc, #356]	; 12b04 <__assert_fail@plt+0x1b7c>
   1299c:	mov	r0, r4
   129a0:	bl	10d90 <dcgettext@plt>
   129a4:	ldr	r1, [r5]
   129a8:	bl	10d00 <fputs_unlocked@plt>
   129ac:	ldr	lr, [pc, #340]	; 12b08 <__assert_fail@plt+0x1b80>
   129b0:	mov	ip, sp
   129b4:	ldm	lr!, {r0, r1, r2, r3}
   129b8:	stmia	ip!, {r0, r1, r2, r3}
   129bc:	ldm	lr!, {r0, r1, r2, r3}
   129c0:	stmia	ip!, {r0, r1, r2, r3}
   129c4:	ldm	lr!, {r0, r1, r2, r3}
   129c8:	stmia	ip!, {r0, r1, r2, r3}
   129cc:	ldm	lr, {r0, r1}
   129d0:	stm	ip, {r0, r1}
   129d4:	ldr	r1, [sp, r6]
   129d8:	add	r7, sp, r6
   129dc:	cmp	r1, #0
   129e0:	bne	12a84 <__assert_fail@plt+0x1afc>
   129e4:	ldr	r6, [r7, #4]
   129e8:	ldr	r7, [pc, #240]	; 12ae0 <__assert_fail@plt+0x1b58>
   129ec:	cmp	r6, #0
   129f0:	mov	r2, #5
   129f4:	ldr	r1, [pc, #272]	; 12b0c <__assert_fail@plt+0x1b84>
   129f8:	mov	r0, #0
   129fc:	moveq	r6, r7
   12a00:	bl	10d90 <dcgettext@plt>
   12a04:	ldr	r3, [pc, #260]	; 12b10 <__assert_fail@plt+0x1b88>
   12a08:	ldr	r2, [pc, #260]	; 12b14 <__assert_fail@plt+0x1b8c>
   12a0c:	mov	r1, r0
   12a10:	mov	r0, #1
   12a14:	bl	10ec8 <__printf_chk@plt>
   12a18:	mov	r1, #0
   12a1c:	mov	r0, #5
   12a20:	bl	10f1c <setlocale@plt>
   12a24:	cmp	r0, #0
   12a28:	bne	12a9c <__assert_fail@plt+0x1b14>
   12a2c:	mov	r2, #5
   12a30:	ldr	r1, [pc, #224]	; 12b18 <__assert_fail@plt+0x1b90>
   12a34:	mov	r0, #0
   12a38:	bl	10d90 <dcgettext@plt>
   12a3c:	ldr	r3, [pc, #156]	; 12ae0 <__assert_fail@plt+0x1b58>
   12a40:	ldr	r2, [pc, #200]	; 12b10 <__assert_fail@plt+0x1b88>
   12a44:	mov	r1, r0
   12a48:	mov	r0, #1
   12a4c:	bl	10ec8 <__printf_chk@plt>
   12a50:	mov	r2, #5
   12a54:	ldr	r1, [pc, #192]	; 12b1c <__assert_fail@plt+0x1b94>
   12a58:	mov	r0, #0
   12a5c:	bl	10d90 <dcgettext@plt>
   12a60:	ldr	r2, [pc, #184]	; 12b20 <__assert_fail@plt+0x1b98>
   12a64:	cmp	r6, r7
   12a68:	ldr	r3, [pc, #180]	; 12b24 <__assert_fail@plt+0x1b9c>
   12a6c:	moveq	r3, r2
   12a70:	mov	r2, r6
   12a74:	mov	r1, r0
   12a78:	mov	r0, #1
   12a7c:	bl	10ec8 <__printf_chk@plt>
   12a80:	b	12894 <__assert_fail@plt+0x190c>
   12a84:	mov	r0, r8
   12a88:	bl	10d18 <strcmp@plt>
   12a8c:	add	r6, r6, #8
   12a90:	cmp	r0, #0
   12a94:	bne	129d4 <__assert_fail@plt+0x1a4c>
   12a98:	b	129e4 <__assert_fail@plt+0x1a5c>
   12a9c:	mov	r2, #3
   12aa0:	ldr	r1, [pc, #128]	; 12b28 <__assert_fail@plt+0x1ba0>
   12aa4:	bl	10f64 <strncmp@plt>
   12aa8:	cmp	r0, #0
   12aac:	beq	12a2c <__assert_fail@plt+0x1aa4>
   12ab0:	mov	r2, #5
   12ab4:	ldr	r1, [pc, #112]	; 12b2c <__assert_fail@plt+0x1ba4>
   12ab8:	mov	r0, #0
   12abc:	bl	10d90 <dcgettext@plt>
   12ac0:	ldr	r1, [r5]
   12ac4:	bl	10d00 <fputs_unlocked@plt>
   12ac8:	b	12a2c <__assert_fail@plt+0x1aa4>
   12acc:	andeq	r7, r2, r4, ror r1
   12ad0:	andeq	r7, r2, r8, asr r1
   12ad4:	andeq	r6, r1, r0, asr r1
   12ad8:	andeq	r6, r1, r7, ror r1
   12adc:	andeq	r7, r2, ip, asr r1
   12ae0:	andeq	r6, r1, fp, asr #2
   12ae4:	muleq	r1, r8, r1
   12ae8:	andeq	r6, r1, sp, lsl r2
   12aec:	andeq	r6, r1, r5, asr r2
   12af0:	andeq	r6, r1, r0, lsr #5
   12af4:	andeq	r6, r1, lr, lsr #8
   12af8:			; <UNDEFINED> instruction: 0x000164b2
   12afc:	strdeq	r6, [r1], -r1
   12b00:	andeq	r6, r1, lr, lsl r5
   12b04:	andeq	r6, r1, r4, asr r5
   12b08:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12b0c:	andeq	r6, r1, r8, lsr #12
   12b10:	andeq	r6, r1, pc, lsr r6
   12b14:	andeq	r6, r1, r7, ror #12
   12b18:	andeq	r6, r1, r0, asr #13
   12b1c:	ldrdeq	r6, [r1], -fp
   12b20:	andeq	r6, r1, r2, lsl r8
   12b24:	andeq	r6, r1, sp, lsl #14
   12b28:	andeq	r6, r1, r5, ror r6
   12b2c:	andeq	r6, r1, r9, ror r6
   12b30:	ldr	r3, [pc, #4]	; 12b3c <__assert_fail@plt+0x1bb4>
   12b34:	str	r0, [r3]
   12b38:	bx	lr
   12b3c:	andeq	r7, r2, ip, ror #2
   12b40:	ldr	r3, [pc, #4]	; 12b4c <__assert_fail@plt+0x1bc4>
   12b44:	strb	r0, [r3, #4]
   12b48:	bx	lr
   12b4c:	andeq	r7, r2, ip, ror #2
   12b50:	ldr	r3, [pc, #192]	; 12c18 <__assert_fail@plt+0x1c90>
   12b54:	push	{r0, r1, r4, r5, r6, lr}
   12b58:	ldr	r0, [r3]
   12b5c:	bl	154c4 <__assert_fail@plt+0x453c>
   12b60:	cmp	r0, #0
   12b64:	beq	12bfc <__assert_fail@plt+0x1c74>
   12b68:	ldr	r3, [pc, #172]	; 12c1c <__assert_fail@plt+0x1c94>
   12b6c:	mov	r4, r3
   12b70:	ldrb	r2, [r3, #4]
   12b74:	cmp	r2, #0
   12b78:	beq	12b8c <__assert_fail@plt+0x1c04>
   12b7c:	bl	10ea4 <__errno_location@plt>
   12b80:	ldr	r3, [r0]
   12b84:	cmp	r3, #32
   12b88:	beq	12bfc <__assert_fail@plt+0x1c74>
   12b8c:	mov	r2, #5
   12b90:	ldr	r1, [pc, #136]	; 12c20 <__assert_fail@plt+0x1c98>
   12b94:	mov	r0, #0
   12b98:	bl	10d90 <dcgettext@plt>
   12b9c:	ldr	r4, [r4]
   12ba0:	cmp	r4, #0
   12ba4:	mov	r5, r0
   12ba8:	beq	12be0 <__assert_fail@plt+0x1c58>
   12bac:	bl	10ea4 <__errno_location@plt>
   12bb0:	ldr	r6, [r0]
   12bb4:	mov	r0, r4
   12bb8:	bl	14300 <__assert_fail@plt+0x3378>
   12bbc:	str	r5, [sp]
   12bc0:	ldr	r2, [pc, #92]	; 12c24 <__assert_fail@plt+0x1c9c>
   12bc4:	mov	r1, r6
   12bc8:	mov	r3, r0
   12bcc:	mov	r0, #0
   12bd0:	bl	10e14 <error@plt>
   12bd4:	ldr	r3, [pc, #76]	; 12c28 <__assert_fail@plt+0x1ca0>
   12bd8:	ldr	r0, [r3]
   12bdc:	bl	10d48 <_exit@plt>
   12be0:	bl	10ea4 <__errno_location@plt>
   12be4:	mov	r3, r5
   12be8:	ldr	r2, [pc, #60]	; 12c2c <__assert_fail@plt+0x1ca4>
   12bec:	ldr	r1, [r0]
   12bf0:	mov	r0, r4
   12bf4:	bl	10e14 <error@plt>
   12bf8:	b	12bd4 <__assert_fail@plt+0x1c4c>
   12bfc:	ldr	r3, [pc, #44]	; 12c30 <__assert_fail@plt+0x1ca8>
   12c00:	ldr	r0, [r3]
   12c04:	bl	154c4 <__assert_fail@plt+0x453c>
   12c08:	cmp	r0, #0
   12c0c:	bne	12bd4 <__assert_fail@plt+0x1c4c>
   12c10:	add	sp, sp, #8
   12c14:	pop	{r4, r5, r6, pc}
   12c18:	andeq	r7, r2, ip, asr r1
   12c1c:	andeq	r7, r2, ip, ror #2
   12c20:	andeq	r6, r1, sl, lsr #17
   12c24:	andeq	r6, r1, r3, ror r7
   12c28:	andeq	r7, r2, r0, lsl #2
   12c2c:	andeq	r6, r1, r7, ror r7
   12c30:	andeq	r7, r2, r8, asr r1
   12c34:	push	{r0, r1, r2, r4, r5, lr}
   12c38:	mov	r5, r0
   12c3c:	bl	10ea4 <__errno_location@plt>
   12c40:	ldr	r3, [r0]
   12c44:	mov	r4, r0
   12c48:	str	r3, [sp]
   12c4c:	str	r3, [sp, #4]
   12c50:	mov	r3, #0
   12c54:	str	r3, [r0]
   12c58:	mov	r0, r5
   12c5c:	bl	10d3c <free@plt>
   12c60:	ldr	r3, [r4]
   12c64:	add	r2, sp, #8
   12c68:	cmp	r3, #0
   12c6c:	moveq	r3, #4
   12c70:	movne	r3, #0
   12c74:	add	r3, r2, r3
   12c78:	ldr	r3, [r3, #-8]
   12c7c:	str	r3, [r4]
   12c80:	add	sp, sp, #12
   12c84:	pop	{r4, r5, pc}
   12c88:	push	{r4, r5, r6, r7, r8, lr}
   12c8c:	mov	r8, r0
   12c90:	mov	r5, r2
   12c94:	mov	r7, r1
   12c98:	mov	r6, #0
   12c9c:	cmp	r5, #0
   12ca0:	beq	12cd0 <__assert_fail@plt+0x1d48>
   12ca4:	mov	r2, r5
   12ca8:	mov	r1, r7
   12cac:	mov	r0, r8
   12cb0:	bl	1445c <__assert_fail@plt+0x34d4>
   12cb4:	cmn	r0, #1
   12cb8:	mov	r4, r0
   12cbc:	beq	12cd0 <__assert_fail@plt+0x1d48>
   12cc0:	cmp	r0, #0
   12cc4:	bne	12cd8 <__assert_fail@plt+0x1d50>
   12cc8:	bl	10ea4 <__errno_location@plt>
   12ccc:	str	r4, [r0]
   12cd0:	mov	r0, r6
   12cd4:	pop	{r4, r5, r6, r7, r8, pc}
   12cd8:	add	r6, r6, r0
   12cdc:	add	r7, r7, r0
   12ce0:	sub	r5, r5, r0
   12ce4:	b	12c9c <__assert_fail@plt+0x1d14>
   12ce8:	mov	r3, #0
   12cec:	cmp	r0, #0
   12cf0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12cf4:	mov	r4, r0
   12cf8:	strb	r3, [r2, #20]
   12cfc:	sbcs	r3, r1, #0
   12d00:	mov	r5, r1
   12d04:	add	r6, r2, #20
   12d08:	mov	r8, #10
   12d0c:	mov	r9, #0
   12d10:	bge	12d74 <__assert_fail@plt+0x1dec>
   12d14:	mov	r0, r4
   12d18:	mov	r1, r5
   12d1c:	mov	r2, r8
   12d20:	mov	r3, r9
   12d24:	bl	15cbc <__assert_fail@plt+0x4d34>
   12d28:	mov	r3, r9
   12d2c:	mov	r0, r4
   12d30:	mov	r1, r5
   12d34:	sub	r7, r6, #1
   12d38:	rsb	r2, r2, #48	; 0x30
   12d3c:	strb	r2, [r6, #-1]
   12d40:	mov	r2, r8
   12d44:	bl	15cbc <__assert_fail@plt+0x4d34>
   12d48:	mov	r4, r0
   12d4c:	mov	r5, r1
   12d50:	orrs	r3, r4, r5
   12d54:	bne	12d6c <__assert_fail@plt+0x1de4>
   12d58:	sub	r6, r6, #2
   12d5c:	mov	r3, #45	; 0x2d
   12d60:	strb	r3, [r7, #-1]
   12d64:	mov	r0, r6
   12d68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d6c:	mov	r6, r7
   12d70:	b	12d14 <__assert_fail@plt+0x1d8c>
   12d74:	mov	r0, r4
   12d78:	mov	r1, r5
   12d7c:	mov	r2, r8
   12d80:	mov	r3, r9
   12d84:	bl	15cbc <__assert_fail@plt+0x4d34>
   12d88:	mov	r3, r9
   12d8c:	mov	r0, r4
   12d90:	mov	r1, r5
   12d94:	add	r2, r2, #48	; 0x30
   12d98:	strb	r2, [r6, #-1]!
   12d9c:	mov	r2, r8
   12da0:	bl	15cbc <__assert_fail@plt+0x4d34>
   12da4:	mov	r4, r0
   12da8:	mov	r5, r1
   12dac:	orrs	r3, r4, r5
   12db0:	bne	12d74 <__assert_fail@plt+0x1dec>
   12db4:	b	12d64 <__assert_fail@plt+0x1ddc>
   12db8:	push	{r4, r5, r6, r8, r9, lr}
   12dbc:	mov	r4, r0
   12dc0:	mov	r5, r1
   12dc4:	add	r6, r2, #20
   12dc8:	mov	r8, #10
   12dcc:	mov	r9, #0
   12dd0:	mov	r3, #0
   12dd4:	strb	r3, [r2, #20]
   12dd8:	mov	r0, r4
   12ddc:	mov	r1, r5
   12de0:	mov	r2, r8
   12de4:	mov	r3, r9
   12de8:	bl	15d90 <__assert_fail@plt+0x4e08>
   12dec:	mov	r3, r9
   12df0:	mov	r0, r4
   12df4:	mov	r1, r5
   12df8:	add	r2, r2, #48	; 0x30
   12dfc:	strb	r2, [r6, #-1]!
   12e00:	mov	r2, r8
   12e04:	bl	15d90 <__assert_fail@plt+0x4e08>
   12e08:	mov	r4, r0
   12e0c:	mov	r5, r1
   12e10:	orrs	r3, r4, r5
   12e14:	bne	12dd8 <__assert_fail@plt+0x1e50>
   12e18:	mov	r0, r6
   12e1c:	pop	{r4, r5, r6, r8, r9, pc}
   12e20:	push	{r4, r5, r6, lr}
   12e24:	subs	r5, r0, #0
   12e28:	bne	12e40 <__assert_fail@plt+0x1eb8>
   12e2c:	ldr	r3, [pc, #124]	; 12eb0 <__assert_fail@plt+0x1f28>
   12e30:	ldr	r0, [pc, #124]	; 12eb4 <__assert_fail@plt+0x1f2c>
   12e34:	ldr	r1, [r3]
   12e38:	bl	10f58 <fputs@plt>
   12e3c:	bl	10f70 <abort@plt>
   12e40:	mov	r1, #47	; 0x2f
   12e44:	bl	10f28 <strrchr@plt>
   12e48:	cmp	r0, #0
   12e4c:	addne	r4, r0, #1
   12e50:	moveq	r4, r5
   12e54:	sub	r3, r4, r5
   12e58:	cmp	r3, #6
   12e5c:	ble	12e9c <__assert_fail@plt+0x1f14>
   12e60:	mov	r2, #7
   12e64:	ldr	r1, [pc, #76]	; 12eb8 <__assert_fail@plt+0x1f30>
   12e68:	sub	r0, r4, #7
   12e6c:	bl	10f64 <strncmp@plt>
   12e70:	cmp	r0, #0
   12e74:	bne	12e9c <__assert_fail@plt+0x1f14>
   12e78:	mov	r2, #3
   12e7c:	ldr	r1, [pc, #56]	; 12ebc <__assert_fail@plt+0x1f34>
   12e80:	mov	r0, r4
   12e84:	bl	10f64 <strncmp@plt>
   12e88:	cmp	r0, #0
   12e8c:	movne	r5, r4
   12e90:	ldreq	r3, [pc, #40]	; 12ec0 <__assert_fail@plt+0x1f38>
   12e94:	addeq	r5, r4, #3
   12e98:	streq	r5, [r3]
   12e9c:	ldr	r3, [pc, #32]	; 12ec4 <__assert_fail@plt+0x1f3c>
   12ea0:	str	r5, [r3]
   12ea4:	ldr	r3, [pc, #28]	; 12ec8 <__assert_fail@plt+0x1f40>
   12ea8:	str	r5, [r3]
   12eac:	pop	{r4, r5, r6, pc}
   12eb0:	andeq	r7, r2, r8, asr r1
   12eb4:			; <UNDEFINED> instruction: 0x000168b6
   12eb8:	andeq	r6, r1, lr, ror #17
   12ebc:	strdeq	r6, [r1], -r6	; <UNPREDICTABLE>
   12ec0:	andeq	r7, r2, r8, asr #2
   12ec4:	andeq	r7, r2, r4, ror r1
   12ec8:	andeq	r7, r2, ip, asr #2
   12ecc:	push	{r4, r5, r6, lr}
   12ed0:	mov	r2, #48	; 0x30
   12ed4:	mov	r5, r1
   12ed8:	mov	r1, #0
   12edc:	mov	r4, r0
   12ee0:	bl	10ebc <memset@plt>
   12ee4:	cmp	r5, #10
   12ee8:	bne	12ef0 <__assert_fail@plt+0x1f68>
   12eec:	bl	10f70 <abort@plt>
   12ef0:	str	r5, [r4]
   12ef4:	mov	r0, r4
   12ef8:	pop	{r4, r5, r6, pc}
   12efc:	push	{r4, r5, r6, lr}
   12f00:	mov	r4, r0
   12f04:	mov	r5, r1
   12f08:	bl	156c0 <__assert_fail@plt+0x4738>
   12f0c:	ldrb	r3, [r0]
   12f10:	bic	r3, r3, #32
   12f14:	cmp	r3, #85	; 0x55
   12f18:	bne	12f88 <__assert_fail@plt+0x2000>
   12f1c:	ldrb	r3, [r0, #1]
   12f20:	bic	r3, r3, #32
   12f24:	cmp	r3, #84	; 0x54
   12f28:	bne	12f60 <__assert_fail@plt+0x1fd8>
   12f2c:	ldrb	r3, [r0, #2]
   12f30:	bic	r3, r3, #32
   12f34:	cmp	r3, #70	; 0x46
   12f38:	bne	12f60 <__assert_fail@plt+0x1fd8>
   12f3c:	ldrb	r3, [r0, #3]
   12f40:	cmp	r3, #45	; 0x2d
   12f44:	bne	12f60 <__assert_fail@plt+0x1fd8>
   12f48:	ldrb	r3, [r0, #4]
   12f4c:	cmp	r3, #56	; 0x38
   12f50:	bne	12f60 <__assert_fail@plt+0x1fd8>
   12f54:	ldrb	r3, [r0, #5]
   12f58:	cmp	r3, #0
   12f5c:	beq	12f74 <__assert_fail@plt+0x1fec>
   12f60:	ldr	r1, [pc, #144]	; 12ff8 <__assert_fail@plt+0x2070>
   12f64:	ldr	r0, [pc, #144]	; 12ffc <__assert_fail@plt+0x2074>
   12f68:	cmp	r5, #9
   12f6c:	movne	r0, r1
   12f70:	pop	{r4, r5, r6, pc}
   12f74:	ldrb	r3, [r4]
   12f78:	ldr	r1, [pc, #128]	; 13000 <__assert_fail@plt+0x2078>
   12f7c:	ldr	r0, [pc, #128]	; 13004 <__assert_fail@plt+0x207c>
   12f80:	cmp	r3, #96	; 0x60
   12f84:	b	12f6c <__assert_fail@plt+0x1fe4>
   12f88:	cmp	r3, #71	; 0x47
   12f8c:	bne	12f60 <__assert_fail@plt+0x1fd8>
   12f90:	ldrb	r3, [r0, #1]
   12f94:	bic	r3, r3, #32
   12f98:	cmp	r3, #66	; 0x42
   12f9c:	bne	12f60 <__assert_fail@plt+0x1fd8>
   12fa0:	ldrb	r3, [r0, #2]
   12fa4:	cmp	r3, #49	; 0x31
   12fa8:	bne	12f60 <__assert_fail@plt+0x1fd8>
   12fac:	ldrb	r3, [r0, #3]
   12fb0:	cmp	r3, #56	; 0x38
   12fb4:	bne	12f60 <__assert_fail@plt+0x1fd8>
   12fb8:	ldrb	r3, [r0, #4]
   12fbc:	cmp	r3, #48	; 0x30
   12fc0:	bne	12f60 <__assert_fail@plt+0x1fd8>
   12fc4:	ldrb	r3, [r0, #5]
   12fc8:	cmp	r3, #51	; 0x33
   12fcc:	bne	12f60 <__assert_fail@plt+0x1fd8>
   12fd0:	ldrb	r3, [r0, #6]
   12fd4:	cmp	r3, #48	; 0x30
   12fd8:	bne	12f60 <__assert_fail@plt+0x1fd8>
   12fdc:	ldrb	r3, [r0, #7]
   12fe0:	cmp	r3, #0
   12fe4:	bne	12f60 <__assert_fail@plt+0x1fd8>
   12fe8:	ldrb	r3, [r4]
   12fec:	ldr	r1, [pc, #20]	; 13008 <__assert_fail@plt+0x2080>
   12ff0:	ldr	r0, [pc, #20]	; 1300c <__assert_fail@plt+0x2084>
   12ff4:	b	12f80 <__assert_fail@plt+0x1ff8>
   12ff8:	andeq	r6, r1, r1, ror #18
   12ffc:	andeq	r6, r1, pc, asr r9
   13000:	andeq	r6, r1, r4, asr r9
   13004:	andeq	r6, r1, r0, asr r9
   13008:	andeq	r6, r1, ip, asr r9
   1300c:	andeq	r6, r1, r8, asr r9
   13010:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13014:	sub	sp, sp, #108	; 0x6c
   13018:	mov	r8, r0
   1301c:	str	r3, [sp, #36]	; 0x24
   13020:	mov	r5, r1
   13024:	str	r2, [sp, #44]	; 0x2c
   13028:	ldr	sl, [sp, #144]	; 0x90
   1302c:	bl	10de4 <__ctype_get_mb_cur_max@plt>
   13030:	ldr	r3, [sp, #148]	; 0x94
   13034:	mov	r7, #0
   13038:	str	r7, [sp, #48]	; 0x30
   1303c:	lsr	r6, r3, #1
   13040:	and	r6, r6, #1
   13044:	mov	r3, #1
   13048:	str	r3, [sp, #72]	; 0x48
   1304c:	str	r7, [sp, #24]
   13050:	str	r7, [sp, #32]
   13054:	str	r7, [sp, #40]	; 0x28
   13058:	str	r7, [sp, #60]	; 0x3c
   1305c:	str	r0, [sp, #76]	; 0x4c
   13060:	cmp	sl, #10
   13064:	ldrls	pc, [pc, sl, lsl #2]
   13068:	b	132a4 <__assert_fail@plt+0x231c>
   1306c:	muleq	r1, r8, r0
   13070:	andeq	r3, r1, ip, lsr #26
   13074:	andeq	r3, r1, r0, ror r2
   13078:			; <UNDEFINED> instruction: 0x000132bc
   1307c:	andeq	r3, r1, ip, asr #4
   13080:	andeq	r3, r1, r4, lsr #1
   13084:	andeq	r3, r1, ip, lsl #26
   13088:	andeq	r3, r1, r8, lsr #5
   1308c:	muleq	r1, ip, r1
   13090:	muleq	r1, ip, r1
   13094:	muleq	r1, ip, r1
   13098:	mov	r6, #0
   1309c:	mov	r4, #0
   130a0:	b	130d0 <__assert_fail@plt+0x2148>
   130a4:	cmp	r6, #0
   130a8:	bne	132cc <__assert_fail@plt+0x2344>
   130ac:	cmp	r5, #0
   130b0:	movne	r3, #34	; 0x22
   130b4:	strbne	r3, [r8]
   130b8:	mov	r3, #1
   130bc:	str	r3, [sp, #24]
   130c0:	str	r3, [sp, #32]
   130c4:	mov	r4, #1
   130c8:	ldr	r3, [pc, #3172]	; 13d34 <__assert_fail@plt+0x2dac>
   130cc:	str	r3, [sp, #40]	; 0x28
   130d0:	mov	r9, r5
   130d4:	mov	r3, #0
   130d8:	str	r7, [sp, #68]	; 0x44
   130dc:	str	r3, [sp, #28]
   130e0:	ldr	r3, [sp, #36]	; 0x24
   130e4:	cmn	r3, #1
   130e8:	bne	13c78 <__assert_fail@plt+0x2cf0>
   130ec:	ldr	r3, [sp, #44]	; 0x2c
   130f0:	ldr	r2, [sp, #28]
   130f4:	ldrb	r3, [r3, r2]
   130f8:	adds	r3, r3, #0
   130fc:	movne	r3, #1
   13100:	str	r3, [sp, #52]	; 0x34
   13104:	ldr	r3, [sp, #52]	; 0x34
   13108:	cmp	r3, #0
   1310c:	bne	132f4 <__assert_fail@plt+0x236c>
   13110:	sub	r2, sl, #2
   13114:	clz	r2, r2
   13118:	lsr	r2, r2, #5
   1311c:	and	r3, r6, r2
   13120:	cmp	r4, #0
   13124:	movne	r3, #0
   13128:	andeq	r3, r3, #1
   1312c:	cmp	r3, #0
   13130:	bne	134bc <__assert_fail@plt+0x2534>
   13134:	eor	r3, r6, #1
   13138:	ands	r2, r2, r3
   1313c:	beq	13cb0 <__assert_fail@plt+0x2d28>
   13140:	ldr	r3, [sp, #68]	; 0x44
   13144:	cmp	r3, #0
   13148:	beq	13ce8 <__assert_fail@plt+0x2d60>
   1314c:	ldr	r3, [sp, #72]	; 0x48
   13150:	cmp	r3, #0
   13154:	beq	13c8c <__assert_fail@plt+0x2d04>
   13158:	ldr	r3, [sp, #160]	; 0xa0
   1315c:	ldr	r2, [sp, #44]	; 0x2c
   13160:	str	r3, [sp, #16]
   13164:	ldr	r3, [sp, #156]	; 0x9c
   13168:	ldr	r1, [sp, #60]	; 0x3c
   1316c:	str	r3, [sp, #12]
   13170:	ldr	r3, [sp, #152]	; 0x98
   13174:	str	r3, [sp, #8]
   13178:	ldr	r3, [sp, #148]	; 0x94
   1317c:	str	r3, [sp, #4]
   13180:	mov	r3, #5
   13184:	str	r3, [sp]
   13188:	ldr	r3, [sp, #36]	; 0x24
   1318c:	mov	r0, r8
   13190:	bl	13010 <__assert_fail@plt+0x2088>
   13194:	mov	r4, r0
   13198:	b	13cdc <__assert_fail@plt+0x2d54>
   1319c:	cmp	sl, #10
   131a0:	beq	131fc <__assert_fail@plt+0x2274>
   131a4:	ldr	r4, [pc, #2956]	; 13d38 <__assert_fail@plt+0x2db0>
   131a8:	mov	r2, #5
   131ac:	mov	r1, r4
   131b0:	mov	r0, #0
   131b4:	bl	10d90 <dcgettext@plt>
   131b8:	cmp	r0, r4
   131bc:	str	r0, [sp, #156]	; 0x9c
   131c0:	bne	131d0 <__assert_fail@plt+0x2248>
   131c4:	mov	r1, sl
   131c8:	bl	12efc <__assert_fail@plt+0x1f74>
   131cc:	str	r0, [sp, #156]	; 0x9c
   131d0:	ldr	r4, [pc, #2916]	; 13d3c <__assert_fail@plt+0x2db4>
   131d4:	mov	r2, #5
   131d8:	mov	r1, r4
   131dc:	mov	r0, #0
   131e0:	bl	10d90 <dcgettext@plt>
   131e4:	cmp	r0, r4
   131e8:	str	r0, [sp, #160]	; 0xa0
   131ec:	bne	131fc <__assert_fail@plt+0x2274>
   131f0:	mov	r1, sl
   131f4:	bl	12efc <__assert_fail@plt+0x1f74>
   131f8:	str	r0, [sp, #160]	; 0xa0
   131fc:	cmp	r6, #0
   13200:	moveq	r4, r6
   13204:	beq	1321c <__assert_fail@plt+0x2294>
   13208:	mov	r4, #0
   1320c:	b	1322c <__assert_fail@plt+0x22a4>
   13210:	cmp	r5, r4
   13214:	strbhi	r3, [r8, r4]
   13218:	add	r4, r4, #1
   1321c:	ldr	r3, [sp, #156]	; 0x9c
   13220:	ldrb	r3, [r3, r4]
   13224:	cmp	r3, #0
   13228:	bne	13210 <__assert_fail@plt+0x2288>
   1322c:	ldr	r0, [sp, #160]	; 0xa0
   13230:	bl	10e80 <strlen@plt>
   13234:	ldr	r3, [sp, #160]	; 0xa0
   13238:	str	r3, [sp, #40]	; 0x28
   1323c:	mov	r3, #1
   13240:	str	r3, [sp, #24]
   13244:	str	r0, [sp, #32]
   13248:	b	130d0 <__assert_fail@plt+0x2148>
   1324c:	mov	r3, #1
   13250:	cmp	r6, #0
   13254:	streq	r3, [sp, #24]
   13258:	beq	13278 <__assert_fail@plt+0x22f0>
   1325c:	str	r3, [sp, #32]
   13260:	ldr	r3, [pc, #2772]	; 13d3c <__assert_fail@plt+0x2db4>
   13264:	mov	r4, #0
   13268:	str	r3, [sp, #40]	; 0x28
   1326c:	b	1329c <__assert_fail@plt+0x2314>
   13270:	cmp	r6, #0
   13274:	bne	132e4 <__assert_fail@plt+0x235c>
   13278:	cmp	r5, #0
   1327c:	movne	r3, #39	; 0x27
   13280:	strbne	r3, [r8]
   13284:	mov	r3, #1
   13288:	str	r3, [sp, #32]
   1328c:	mov	r6, #0
   13290:	ldr	r3, [pc, #2724]	; 13d3c <__assert_fail@plt+0x2db4>
   13294:	mov	r4, #1
   13298:	str	r3, [sp, #40]	; 0x28
   1329c:	mov	sl, #2
   132a0:	b	130d0 <__assert_fail@plt+0x2148>
   132a4:	bl	10f70 <abort@plt>
   132a8:	mov	r6, #0
   132ac:	mov	r3, #1
   132b0:	str	r3, [sp, #24]
   132b4:	mov	r4, r6
   132b8:	b	130d0 <__assert_fail@plt+0x2148>
   132bc:	mov	r6, #1
   132c0:	str	r6, [sp, #24]
   132c4:	str	r6, [sp, #32]
   132c8:	b	13260 <__assert_fail@plt+0x22d8>
   132cc:	mov	r3, #1
   132d0:	str	r3, [sp, #32]
   132d4:	ldr	r3, [pc, #2648]	; 13d34 <__assert_fail@plt+0x2dac>
   132d8:	str	r6, [sp, #24]
   132dc:	str	r3, [sp, #40]	; 0x28
   132e0:	b	1309c <__assert_fail@plt+0x2114>
   132e4:	mov	r3, #1
   132e8:	str	r3, [sp, #32]
   132ec:	ldr	r3, [pc, #2632]	; 13d3c <__assert_fail@plt+0x2db4>
   132f0:	b	132dc <__assert_fail@plt+0x2354>
   132f4:	ldr	r3, [sp, #32]
   132f8:	ldr	fp, [sp, #24]
   132fc:	cmp	sl, #2
   13300:	moveq	fp, #0
   13304:	andne	fp, fp, #1
   13308:	adds	r5, r3, #0
   1330c:	movne	r5, #1
   13310:	ands	r3, r5, fp
   13314:	str	r3, [sp, #64]	; 0x40
   13318:	beq	133e8 <__assert_fail@plt+0x2460>
   1331c:	ldr	r2, [sp, #32]
   13320:	ldr	r3, [sp, #28]
   13324:	add	r7, r3, r2
   13328:	mov	r3, r2
   1332c:	ldr	r2, [sp, #36]	; 0x24
   13330:	cmp	r3, #1
   13334:	movls	r3, #0
   13338:	movhi	r3, #1
   1333c:	cmn	r2, #1
   13340:	movne	r3, #0
   13344:	cmp	r3, #0
   13348:	beq	13358 <__assert_fail@plt+0x23d0>
   1334c:	ldr	r0, [sp, #44]	; 0x2c
   13350:	bl	10e80 <strlen@plt>
   13354:	str	r0, [sp, #36]	; 0x24
   13358:	ldr	r3, [sp, #36]	; 0x24
   1335c:	cmp	r3, r7
   13360:	bcc	133e0 <__assert_fail@plt+0x2458>
   13364:	ldr	r3, [sp, #44]	; 0x2c
   13368:	ldr	r0, [sp, #28]
   1336c:	ldr	r2, [sp, #32]
   13370:	ldr	r1, [sp, #40]	; 0x28
   13374:	add	r0, r3, r0
   13378:	bl	10d78 <memcmp@plt>
   1337c:	cmp	r0, #0
   13380:	bne	133e0 <__assert_fail@plt+0x2458>
   13384:	cmp	r6, #0
   13388:	beq	133e8 <__assert_fail@plt+0x2460>
   1338c:	str	r6, [sp, #24]
   13390:	ldr	r3, [sp, #24]
   13394:	ldr	r2, [sp, #44]	; 0x2c
   13398:	cmp	sl, #2
   1339c:	movne	r3, #0
   133a0:	andeq	r3, r3, #1
   133a4:	cmp	r3, #0
   133a8:	ldr	r3, [sp, #160]	; 0xa0
   133ac:	movne	sl, #4
   133b0:	str	r3, [sp, #16]
   133b4:	ldr	r3, [sp, #156]	; 0x9c
   133b8:	str	sl, [sp]
   133bc:	str	r3, [sp, #12]
   133c0:	mov	r3, #0
   133c4:	str	r3, [sp, #8]
   133c8:	ldr	r3, [sp, #148]	; 0x94
   133cc:	mov	r1, r9
   133d0:	bic	r3, r3, #2
   133d4:	str	r3, [sp, #4]
   133d8:	ldr	r3, [sp, #36]	; 0x24
   133dc:	b	1318c <__assert_fail@plt+0x2204>
   133e0:	mov	r3, #0
   133e4:	str	r3, [sp, #64]	; 0x40
   133e8:	ldr	r2, [sp, #28]
   133ec:	ldr	r3, [sp, #44]	; 0x2c
   133f0:	add	r3, r3, r2
   133f4:	str	r3, [sp, #80]	; 0x50
   133f8:	ldr	r3, [sp, #44]	; 0x2c
   133fc:	ldrb	r7, [r3, r2]
   13400:	cmp	r7, #58	; 0x3a
   13404:	bhi	1356c <__assert_fail@plt+0x25e4>
   13408:	cmp	r7, #43	; 0x2b
   1340c:	bcs	135c0 <__assert_fail@plt+0x2638>
   13410:	cmp	r7, #32
   13414:	beq	13618 <__assert_fail@plt+0x2690>
   13418:	bhi	134c4 <__assert_fail@plt+0x253c>
   1341c:	cmp	r7, #9
   13420:	beq	138cc <__assert_fail@plt+0x2944>
   13424:	bhi	13488 <__assert_fail@plt+0x2500>
   13428:	cmp	r7, #7
   1342c:	beq	13978 <__assert_fail@plt+0x29f0>
   13430:	bhi	13634 <__assert_fail@plt+0x26ac>
   13434:	cmp	r7, #0
   13438:	beq	13650 <__assert_fail@plt+0x26c8>
   1343c:	ldr	r3, [sp, #76]	; 0x4c
   13440:	cmp	r3, #1
   13444:	bne	139bc <__assert_fail@plt+0x2a34>
   13448:	bl	10e68 <__ctype_b_loc@plt>
   1344c:	sxth	r3, r7
   13450:	lsl	r3, r3, #1
   13454:	ldr	r2, [r0]
   13458:	ldrh	r5, [r2, r3]
   1345c:	ldr	r3, [sp, #76]	; 0x4c
   13460:	str	r3, [sp, #56]	; 0x38
   13464:	lsr	r5, r5, #14
   13468:	and	r5, r5, #1
   1346c:	ldr	r3, [sp, #24]
   13470:	eor	fp, r5, #1
   13474:	and	fp, fp, r3
   13478:	ands	fp, fp, #255	; 0xff
   1347c:	beq	13804 <__assert_fail@plt+0x287c>
   13480:	mov	r5, #0
   13484:	b	13a68 <__assert_fail@plt+0x2ae0>
   13488:	cmp	r7, #11
   1348c:	beq	138d4 <__assert_fail@plt+0x294c>
   13490:	bcc	13970 <__assert_fail@plt+0x29e8>
   13494:	cmp	r7, #12
   13498:	beq	13980 <__assert_fail@plt+0x29f8>
   1349c:	cmp	r7, #13
   134a0:	moveq	r3, #114	; 0x72
   134a4:	bne	1343c <__assert_fail@plt+0x24b4>
   134a8:	cmp	sl, #2
   134ac:	movne	r2, #0
   134b0:	andeq	r2, r6, #1
   134b4:	cmp	r2, #0
   134b8:	beq	13638 <__assert_fail@plt+0x26b0>
   134bc:	mov	sl, #2
   134c0:	b	13390 <__assert_fail@plt+0x2408>
   134c4:	cmp	r7, #37	; 0x25
   134c8:	beq	135c0 <__assert_fail@plt+0x2638>
   134cc:	bhi	134e0 <__assert_fail@plt+0x2558>
   134d0:	cmp	r7, #35	; 0x23
   134d4:	beq	1360c <__assert_fail@plt+0x2684>
   134d8:	mov	r5, #0
   134dc:	b	1361c <__assert_fail@plt+0x2694>
   134e0:	cmp	r7, #39	; 0x27
   134e4:	bne	134d8 <__assert_fail@plt+0x2550>
   134e8:	cmp	sl, #2
   134ec:	ldrne	r5, [sp, #52]	; 0x34
   134f0:	movne	r3, r5
   134f4:	strne	r3, [sp, #68]	; 0x44
   134f8:	bne	135c4 <__assert_fail@plt+0x263c>
   134fc:	cmp	r6, #0
   13500:	bne	13390 <__assert_fail@plt+0x2408>
   13504:	ldr	r2, [sp, #60]	; 0x3c
   13508:	adds	r3, r9, #0
   1350c:	movne	r3, #1
   13510:	cmp	r2, #0
   13514:	movne	r3, #0
   13518:	cmp	r3, #0
   1351c:	strne	r9, [sp, #60]	; 0x3c
   13520:	movne	r9, #0
   13524:	bne	13534 <__assert_fail@plt+0x25ac>
   13528:	cmp	r9, r4
   1352c:	movhi	r3, #39	; 0x27
   13530:	strbhi	r3, [r8, r4]
   13534:	add	r3, r4, #1
   13538:	cmp	r3, r9
   1353c:	movcc	r2, #92	; 0x5c
   13540:	strbcc	r2, [r8, r3]
   13544:	add	r3, r4, #2
   13548:	cmp	r3, r9
   1354c:	ldr	r5, [sp, #52]	; 0x34
   13550:	movcc	r2, #39	; 0x27
   13554:	strbcc	r2, [r8, r3]
   13558:	add	r4, r4, #3
   1355c:	mov	fp, r6
   13560:	str	r5, [sp, #68]	; 0x44
   13564:	str	r6, [sp, #48]	; 0x30
   13568:	b	13804 <__assert_fail@plt+0x287c>
   1356c:	cmp	r7, #94	; 0x5e
   13570:	beq	134d8 <__assert_fail@plt+0x2550>
   13574:	bhi	135cc <__assert_fail@plt+0x2644>
   13578:	cmp	r7, #90	; 0x5a
   1357c:	bhi	135b4 <__assert_fail@plt+0x262c>
   13580:	cmp	r7, #65	; 0x41
   13584:	bcs	135c0 <__assert_fail@plt+0x2638>
   13588:	cmp	r7, #62	; 0x3e
   1358c:	bls	134d8 <__assert_fail@plt+0x2550>
   13590:	cmp	r7, #63	; 0x3f
   13594:	bne	1343c <__assert_fail@plt+0x24b4>
   13598:	cmp	sl, #2
   1359c:	beq	13740 <__assert_fail@plt+0x27b8>
   135a0:	cmp	sl, #5
   135a4:	beq	13750 <__assert_fail@plt+0x27c8>
   135a8:	mov	fp, #0
   135ac:	mov	r5, fp
   135b0:	b	13804 <__assert_fail@plt+0x287c>
   135b4:	cmp	r7, #92	; 0x5c
   135b8:	beq	138dc <__assert_fail@plt+0x2954>
   135bc:	bls	134d8 <__assert_fail@plt+0x2550>
   135c0:	ldr	r5, [sp, #52]	; 0x34
   135c4:	mov	fp, #0
   135c8:	b	13804 <__assert_fail@plt+0x287c>
   135cc:	cmp	r7, #122	; 0x7a
   135d0:	bhi	135f0 <__assert_fail@plt+0x2668>
   135d4:	cmp	r7, #97	; 0x61
   135d8:	bcs	135c0 <__assert_fail@plt+0x2638>
   135dc:	cmp	r7, #95	; 0x5f
   135e0:	beq	135c0 <__assert_fail@plt+0x2638>
   135e4:	cmp	r7, #96	; 0x60
   135e8:	bne	1343c <__assert_fail@plt+0x24b4>
   135ec:	b	134d8 <__assert_fail@plt+0x2550>
   135f0:	cmp	r7, #124	; 0x7c
   135f4:	beq	134d8 <__assert_fail@plt+0x2550>
   135f8:	bcc	13988 <__assert_fail@plt+0x2a00>
   135fc:	cmp	r7, #125	; 0x7d
   13600:	beq	13988 <__assert_fail@plt+0x2a00>
   13604:	cmp	r7, #126	; 0x7e
   13608:	bne	1343c <__assert_fail@plt+0x24b4>
   1360c:	ldr	r3, [sp, #28]
   13610:	cmp	r3, #0
   13614:	bne	13748 <__assert_fail@plt+0x27c0>
   13618:	ldr	r5, [sp, #52]	; 0x34
   1361c:	cmp	sl, #2
   13620:	movne	fp, #0
   13624:	andeq	fp, r6, #1
   13628:	cmp	fp, #0
   1362c:	beq	13804 <__assert_fail@plt+0x287c>
   13630:	b	134bc <__assert_fail@plt+0x2534>
   13634:	mov	r3, #98	; 0x62
   13638:	ldr	r2, [sp, #24]
   1363c:	cmp	r2, #0
   13640:	beq	13748 <__assert_fail@plt+0x27c0>
   13644:	mov	r7, r3
   13648:	mov	r5, #0
   1364c:	b	1385c <__assert_fail@plt+0x28d4>
   13650:	ldr	r3, [sp, #24]
   13654:	cmp	r3, #0
   13658:	beq	13724 <__assert_fail@plt+0x279c>
   1365c:	cmp	r6, #0
   13660:	bne	1338c <__assert_fail@plt+0x2404>
   13664:	ldr	r3, [sp, #48]	; 0x30
   13668:	eor	r2, r3, #1
   1366c:	cmp	sl, #2
   13670:	movne	r2, #0
   13674:	andeq	r2, r2, #1
   13678:	cmp	r2, #0
   1367c:	moveq	r3, r4
   13680:	beq	136b8 <__assert_fail@plt+0x2730>
   13684:	cmp	r9, r4
   13688:	movhi	r3, #39	; 0x27
   1368c:	strbhi	r3, [r8, r4]
   13690:	add	r3, r4, #1
   13694:	cmp	r9, r3
   13698:	movhi	r1, #36	; 0x24
   1369c:	strbhi	r1, [r8, r3]
   136a0:	add	r3, r4, #2
   136a4:	cmp	r9, r3
   136a8:	movhi	r1, #39	; 0x27
   136ac:	strbhi	r1, [r8, r3]
   136b0:	add	r3, r4, #3
   136b4:	str	r2, [sp, #48]	; 0x30
   136b8:	cmp	r9, r3
   136bc:	movhi	r2, #92	; 0x5c
   136c0:	strbhi	r2, [r8, r3]
   136c4:	cmp	fp, #0
   136c8:	add	r4, r3, #1
   136cc:	beq	13c5c <__assert_fail@plt+0x2cd4>
   136d0:	ldr	r2, [sp, #28]
   136d4:	ldr	r1, [sp, #36]	; 0x24
   136d8:	add	r2, r2, #1
   136dc:	cmp	r1, r2
   136e0:	bls	1371c <__assert_fail@plt+0x2794>
   136e4:	ldr	r1, [sp, #44]	; 0x2c
   136e8:	mov	r7, #48	; 0x30
   136ec:	ldrb	r2, [r1, r2]
   136f0:	sub	r2, r2, #48	; 0x30
   136f4:	cmp	r2, #9
   136f8:	movhi	r5, r6
   136fc:	bhi	13804 <__assert_fail@plt+0x287c>
   13700:	cmp	r9, r4
   13704:	add	r2, r3, #2
   13708:	strbhi	r7, [r8, r4]
   1370c:	cmp	r9, r2
   13710:	add	r4, r3, #3
   13714:	movhi	r1, #48	; 0x30
   13718:	strbhi	r1, [r8, r2]
   1371c:	mov	r5, r6
   13720:	b	13c64 <__assert_fail@plt+0x2cdc>
   13724:	ldr	r3, [sp, #148]	; 0x94
   13728:	tst	r3, #1
   1372c:	ldreq	r5, [sp, #24]
   13730:	beq	13c70 <__assert_fail@plt+0x2ce8>
   13734:	ldr	r3, [sp, #28]
   13738:	add	r3, r3, #1
   1373c:	b	130dc <__assert_fail@plt+0x2154>
   13740:	cmp	r6, #0
   13744:	bne	13390 <__assert_fail@plt+0x2408>
   13748:	mov	r5, #0
   1374c:	b	135c4 <__assert_fail@plt+0x263c>
   13750:	ldr	r3, [sp, #148]	; 0x94
   13754:	tst	r3, #4
   13758:	beq	13748 <__assert_fail@plt+0x27c0>
   1375c:	ldr	r3, [sp, #28]
   13760:	add	r2, r3, #2
   13764:	ldr	r3, [sp, #36]	; 0x24
   13768:	cmp	r3, r2
   1376c:	bls	13748 <__assert_fail@plt+0x27c0>
   13770:	ldr	r3, [sp, #44]	; 0x2c
   13774:	ldr	r1, [sp, #28]
   13778:	add	r3, r3, r1
   1377c:	ldrb	r0, [r3, #1]
   13780:	cmp	r0, #63	; 0x3f
   13784:	bne	13748 <__assert_fail@plt+0x27c0>
   13788:	ldr	r3, [sp, #44]	; 0x2c
   1378c:	ldrb	r1, [r3, r2]
   13790:	sub	r3, r1, #33	; 0x21
   13794:	uxtb	r3, r3
   13798:	cmp	r3, #29
   1379c:	bhi	13c6c <__assert_fail@plt+0x2ce4>
   137a0:	mov	ip, #1
   137a4:	ldr	r5, [pc, #1428]	; 13d40 <__assert_fail@plt+0x2db8>
   137a8:	ands	r5, r5, ip, lsl r3
   137ac:	beq	135c4 <__assert_fail@plt+0x263c>
   137b0:	cmp	r6, #0
   137b4:	bne	13390 <__assert_fail@plt+0x2408>
   137b8:	add	r3, r4, #1
   137bc:	cmp	r9, r4
   137c0:	strbhi	r0, [r8, r4]
   137c4:	cmp	r9, r3
   137c8:	movhi	r0, #34	; 0x22
   137cc:	strbhi	r0, [r8, r3]
   137d0:	add	r3, r4, #2
   137d4:	cmp	r9, r3
   137d8:	movhi	r0, #34	; 0x22
   137dc:	strbhi	r0, [r8, r3]
   137e0:	add	r3, r4, #3
   137e4:	cmp	r9, r3
   137e8:	add	r4, r4, #4
   137ec:	mov	r5, r6
   137f0:	mov	fp, r6
   137f4:	mov	r7, r1
   137f8:	movhi	r0, #63	; 0x3f
   137fc:	strbhi	r0, [r8, r3]
   13800:	str	r2, [sp, #28]
   13804:	ldr	r3, [sp, #24]
   13808:	eor	r3, r3, #1
   1380c:	cmp	sl, #2
   13810:	orreq	r3, r3, #1
   13814:	eor	r3, r3, #1
   13818:	orr	r3, r6, r3
   1381c:	tst	r3, #255	; 0xff
   13820:	beq	13850 <__assert_fail@plt+0x28c8>
   13824:	ldr	r3, [sp, #152]	; 0x98
   13828:	cmp	r3, #0
   1382c:	beq	13850 <__assert_fail@plt+0x28c8>
   13830:	lsr	r2, r7, #5
   13834:	ldr	r1, [sp, #152]	; 0x98
   13838:	uxtb	r2, r2
   1383c:	and	r3, r7, #31
   13840:	ldr	r2, [r1, r2, lsl #2]
   13844:	lsr	r3, r2, r3
   13848:	tst	r3, #1
   1384c:	bne	1385c <__assert_fail@plt+0x28d4>
   13850:	ldr	r3, [sp, #64]	; 0x40
   13854:	cmp	r3, #0
   13858:	beq	138f4 <__assert_fail@plt+0x296c>
   1385c:	cmp	r6, #0
   13860:	bne	13390 <__assert_fail@plt+0x2408>
   13864:	ldr	r3, [sp, #48]	; 0x30
   13868:	eor	r3, r3, #1
   1386c:	cmp	sl, #2
   13870:	movne	r3, #0
   13874:	andeq	r3, r3, #1
   13878:	cmp	r3, #0
   1387c:	beq	138b4 <__assert_fail@plt+0x292c>
   13880:	cmp	r9, r4
   13884:	movhi	r2, #39	; 0x27
   13888:	strbhi	r2, [r8, r4]
   1388c:	add	r2, r4, #1
   13890:	cmp	r9, r2
   13894:	movhi	r1, #36	; 0x24
   13898:	strbhi	r1, [r8, r2]
   1389c:	add	r2, r4, #2
   138a0:	cmp	r9, r2
   138a4:	add	r4, r4, #3
   138a8:	movhi	r1, #39	; 0x27
   138ac:	strbhi	r1, [r8, r2]
   138b0:	str	r3, [sp, #48]	; 0x30
   138b4:	cmp	r9, r4
   138b8:	movhi	r3, #92	; 0x5c
   138bc:	strbhi	r3, [r8, r4]
   138c0:	ldr	fp, [sp, #52]	; 0x34
   138c4:	add	r4, r4, #1
   138c8:	b	138f4 <__assert_fail@plt+0x296c>
   138cc:	mov	r3, #116	; 0x74
   138d0:	b	134a8 <__assert_fail@plt+0x2520>
   138d4:	mov	r3, #118	; 0x76
   138d8:	b	13638 <__assert_fail@plt+0x26b0>
   138dc:	cmp	sl, #2
   138e0:	bne	13950 <__assert_fail@plt+0x29c8>
   138e4:	cmp	r6, #0
   138e8:	bne	13390 <__assert_fail@plt+0x2408>
   138ec:	mov	r5, r6
   138f0:	mov	fp, r6
   138f4:	ldr	r3, [sp, #48]	; 0x30
   138f8:	eor	fp, fp, #1
   138fc:	and	fp, fp, r3
   13900:	tst	fp, #255	; 0xff
   13904:	beq	13930 <__assert_fail@plt+0x29a8>
   13908:	cmp	r9, r4
   1390c:	movhi	r3, #39	; 0x27
   13910:	strbhi	r3, [r8, r4]
   13914:	add	r3, r4, #1
   13918:	cmp	r9, r3
   1391c:	movhi	r2, #39	; 0x27
   13920:	add	r4, r4, #2
   13924:	strbhi	r2, [r8, r3]
   13928:	mov	r3, #0
   1392c:	str	r3, [sp, #48]	; 0x30
   13930:	cmp	r9, r4
   13934:	strbhi	r7, [r8, r4]
   13938:	ldr	r3, [sp, #72]	; 0x48
   1393c:	cmp	r5, #0
   13940:	moveq	r3, #0
   13944:	add	r4, r4, #1
   13948:	str	r3, [sp, #72]	; 0x48
   1394c:	b	13734 <__assert_fail@plt+0x27ac>
   13950:	ldr	r3, [sp, #24]
   13954:	and	r3, r3, r6
   13958:	tst	r5, r3
   1395c:	moveq	r3, r7
   13960:	beq	134a8 <__assert_fail@plt+0x2520>
   13964:	mov	fp, #0
   13968:	mov	r5, fp
   1396c:	b	138f4 <__assert_fail@plt+0x296c>
   13970:	mov	r3, #110	; 0x6e
   13974:	b	134a8 <__assert_fail@plt+0x2520>
   13978:	mov	r3, #97	; 0x61
   1397c:	b	13638 <__assert_fail@plt+0x26b0>
   13980:	mov	r3, #102	; 0x66
   13984:	b	13638 <__assert_fail@plt+0x26b0>
   13988:	ldr	r3, [sp, #36]	; 0x24
   1398c:	cmn	r3, #1
   13990:	bne	139b0 <__assert_fail@plt+0x2a28>
   13994:	ldr	r3, [sp, #44]	; 0x2c
   13998:	ldrb	r3, [r3, #1]
   1399c:	adds	r3, r3, #0
   139a0:	movne	r3, #1
   139a4:	cmp	r3, #0
   139a8:	bne	13748 <__assert_fail@plt+0x27c0>
   139ac:	b	1360c <__assert_fail@plt+0x2684>
   139b0:	ldr	r3, [sp, #36]	; 0x24
   139b4:	subs	r3, r3, #1
   139b8:	b	139a0 <__assert_fail@plt+0x2a18>
   139bc:	mov	r3, #0
   139c0:	str	r3, [sp, #96]	; 0x60
   139c4:	str	r3, [sp, #100]	; 0x64
   139c8:	ldr	r3, [sp, #36]	; 0x24
   139cc:	cmn	r3, #1
   139d0:	bne	139e0 <__assert_fail@plt+0x2a58>
   139d4:	ldr	r0, [sp, #44]	; 0x2c
   139d8:	bl	10e80 <strlen@plt>
   139dc:	str	r0, [sp, #36]	; 0x24
   139e0:	ldr	r5, [sp, #52]	; 0x34
   139e4:	mov	r3, #0
   139e8:	str	r3, [sp, #56]	; 0x38
   139ec:	ldr	r3, [sp, #28]
   139f0:	ldr	r2, [sp, #56]	; 0x38
   139f4:	ldr	r1, [sp, #36]	; 0x24
   139f8:	add	r2, r3, r2
   139fc:	ldr	r3, [sp, #44]	; 0x2c
   13a00:	add	r0, sp, #92	; 0x5c
   13a04:	add	fp, r3, r2
   13a08:	sub	r2, r1, r2
   13a0c:	add	r3, sp, #96	; 0x60
   13a10:	mov	r1, fp
   13a14:	bl	156f4 <__assert_fail@plt+0x476c>
   13a18:	subs	r2, r0, #0
   13a1c:	beq	13a5c <__assert_fail@plt+0x2ad4>
   13a20:	cmn	r2, #1
   13a24:	beq	13c34 <__assert_fail@plt+0x2cac>
   13a28:	cmn	r2, #2
   13a2c:	bne	13ba4 <__assert_fail@plt+0x2c1c>
   13a30:	ldr	r2, [sp, #56]	; 0x38
   13a34:	ldr	r3, [sp, #28]
   13a38:	add	r3, r3, r2
   13a3c:	ldr	r2, [sp, #36]	; 0x24
   13a40:	cmp	r2, r3
   13a44:	bls	13c34 <__assert_fail@plt+0x2cac>
   13a48:	ldr	r3, [sp, #80]	; 0x50
   13a4c:	ldr	r2, [sp, #56]	; 0x38
   13a50:	ldrb	r5, [r3, r2]
   13a54:	cmp	r5, #0
   13a58:	bne	13b94 <__assert_fail@plt+0x2c0c>
   13a5c:	ldr	r3, [sp, #56]	; 0x38
   13a60:	cmp	r3, #1
   13a64:	bls	1346c <__assert_fail@plt+0x24e4>
   13a68:	ldr	r2, [sp, #56]	; 0x38
   13a6c:	ldr	r3, [sp, #28]
   13a70:	mov	fp, #0
   13a74:	add	r3, r3, r2
   13a78:	ldr	r2, [sp, #24]
   13a7c:	str	r3, [sp, #52]	; 0x34
   13a80:	eor	r3, r5, #1
   13a84:	and	r3, r3, r2
   13a88:	mov	ip, #92	; 0x5c
   13a8c:	uxtb	r3, r3
   13a90:	mov	r2, #39	; 0x27
   13a94:	cmp	r3, #0
   13a98:	beq	13c3c <__assert_fail@plt+0x2cb4>
   13a9c:	cmp	r6, #0
   13aa0:	bne	1338c <__assert_fail@plt+0x2404>
   13aa4:	ldr	r1, [sp, #48]	; 0x30
   13aa8:	eor	r1, r1, #1
   13aac:	cmp	sl, #2
   13ab0:	movne	r1, #0
   13ab4:	andeq	r1, r1, #1
   13ab8:	cmp	r1, #0
   13abc:	beq	13aec <__assert_fail@plt+0x2b64>
   13ac0:	add	r0, r4, #1
   13ac4:	cmp	r9, r4
   13ac8:	strbhi	r2, [r8, r4]
   13acc:	cmp	r9, r0
   13ad0:	movhi	lr, #36	; 0x24
   13ad4:	strbhi	lr, [r8, r0]
   13ad8:	add	r0, r4, #2
   13adc:	add	r4, r4, #3
   13ae0:	cmp	r9, r0
   13ae4:	strbhi	r2, [r8, r0]
   13ae8:	str	r1, [sp, #48]	; 0x30
   13aec:	add	r0, r4, #1
   13af0:	cmp	r9, r4
   13af4:	strbhi	ip, [r8, r4]
   13af8:	cmp	r9, r0
   13afc:	lsrhi	r1, r7, #6
   13b00:	addhi	r1, r1, #48	; 0x30
   13b04:	strbhi	r1, [r8, r0]
   13b08:	add	r0, r4, #2
   13b0c:	cmp	r9, r0
   13b10:	lsrhi	r1, r7, #3
   13b14:	and	r7, r7, #7
   13b18:	andhi	r1, r1, #7
   13b1c:	add	r4, r4, #3
   13b20:	add	r7, r7, #48	; 0x30
   13b24:	mov	fp, r3
   13b28:	addhi	r1, r1, #48	; 0x30
   13b2c:	strbhi	r1, [r8, r0]
   13b30:	ldr	r1, [sp, #28]
   13b34:	ldr	r0, [sp, #52]	; 0x34
   13b38:	add	r1, r1, #1
   13b3c:	cmp	r0, r1
   13b40:	bls	138f4 <__assert_fail@plt+0x296c>
   13b44:	ldr	lr, [sp, #48]	; 0x30
   13b48:	eor	r0, fp, #1
   13b4c:	and	r0, r0, lr
   13b50:	tst	r0, #255	; 0xff
   13b54:	beq	13b78 <__assert_fail@plt+0x2bf0>
   13b58:	add	r0, r4, #1
   13b5c:	cmp	r9, r4
   13b60:	strbhi	r2, [r8, r4]
   13b64:	cmp	r9, r0
   13b68:	add	r4, r4, #2
   13b6c:	strbhi	r2, [r8, r0]
   13b70:	mov	r0, #0
   13b74:	str	r0, [sp, #48]	; 0x30
   13b78:	ldr	r0, [sp, #44]	; 0x2c
   13b7c:	cmp	r9, r4
   13b80:	strbhi	r7, [r8, r4]
   13b84:	str	r1, [sp, #28]
   13b88:	add	r4, r4, #1
   13b8c:	ldrb	r7, [r0, r1]
   13b90:	b	13a94 <__assert_fail@plt+0x2b0c>
   13b94:	ldr	r3, [sp, #56]	; 0x38
   13b98:	add	r3, r3, #1
   13b9c:	str	r3, [sp, #56]	; 0x38
   13ba0:	b	13a30 <__assert_fail@plt+0x2aa8>
   13ba4:	cmp	sl, #2
   13ba8:	movne	r3, #0
   13bac:	andeq	r3, r6, #1
   13bb0:	cmp	r3, #0
   13bb4:	movne	r1, #1
   13bb8:	bne	13c14 <__assert_fail@plt+0x2c8c>
   13bbc:	ldr	r0, [sp, #92]	; 0x5c
   13bc0:	str	r2, [sp, #84]	; 0x54
   13bc4:	bl	10dc0 <iswprint@plt>
   13bc8:	ldr	r3, [sp, #56]	; 0x38
   13bcc:	ldr	r2, [sp, #84]	; 0x54
   13bd0:	add	r3, r3, r2
   13bd4:	str	r3, [sp, #56]	; 0x38
   13bd8:	cmp	r0, #0
   13bdc:	add	r0, sp, #96	; 0x60
   13be0:	moveq	r5, #0
   13be4:	bl	10d60 <mbsinit@plt>
   13be8:	cmp	r0, #0
   13bec:	beq	139ec <__assert_fail@plt+0x2a64>
   13bf0:	b	13a5c <__assert_fail@plt+0x2ad4>
   13bf4:	ldrb	r3, [fp, r1]
   13bf8:	cmp	r3, #94	; 0x5e
   13bfc:	beq	134bc <__assert_fail@plt+0x2534>
   13c00:	bhi	13c20 <__assert_fail@plt+0x2c98>
   13c04:	sub	r3, r3, #91	; 0x5b
   13c08:	cmp	r3, #1
   13c0c:	bls	134bc <__assert_fail@plt+0x2534>
   13c10:	add	r1, r1, #1
   13c14:	cmp	r1, r2
   13c18:	bne	13bf4 <__assert_fail@plt+0x2c6c>
   13c1c:	b	13bbc <__assert_fail@plt+0x2c34>
   13c20:	cmp	r3, #96	; 0x60
   13c24:	beq	134bc <__assert_fail@plt+0x2534>
   13c28:	cmp	r3, #124	; 0x7c
   13c2c:	bne	13c10 <__assert_fail@plt+0x2c88>
   13c30:	b	134bc <__assert_fail@plt+0x2534>
   13c34:	mov	r5, #0
   13c38:	b	13a5c <__assert_fail@plt+0x2ad4>
   13c3c:	ldr	r1, [sp, #64]	; 0x40
   13c40:	cmp	r1, #0
   13c44:	beq	13b30 <__assert_fail@plt+0x2ba8>
   13c48:	cmp	r9, r4
   13c4c:	strbhi	ip, [r8, r4]
   13c50:	str	r3, [sp, #64]	; 0x40
   13c54:	add	r4, r4, #1
   13c58:	b	13b30 <__assert_fail@plt+0x2ba8>
   13c5c:	mov	r5, fp
   13c60:	ldr	fp, [sp, #24]
   13c64:	mov	r7, #48	; 0x30
   13c68:	b	13804 <__assert_fail@plt+0x287c>
   13c6c:	mov	r5, #0
   13c70:	mov	fp, r5
   13c74:	b	13804 <__assert_fail@plt+0x287c>
   13c78:	ldr	r3, [sp, #36]	; 0x24
   13c7c:	ldr	r2, [sp, #28]
   13c80:	subs	r3, r3, r2
   13c84:	movne	r3, #1
   13c88:	b	13100 <__assert_fail@plt+0x2178>
   13c8c:	ldr	r3, [sp, #60]	; 0x3c
   13c90:	clz	r7, r9
   13c94:	cmp	r3, #0
   13c98:	lsr	r7, r7, #5
   13c9c:	moveq	r7, #0
   13ca0:	cmp	r7, #0
   13ca4:	mov	r5, r3
   13ca8:	bne	13060 <__assert_fail@plt+0x20d8>
   13cac:	ldr	r3, [sp, #68]	; 0x44
   13cb0:	ldr	r2, [sp, #40]	; 0x28
   13cb4:	cmp	r2, #0
   13cb8:	moveq	r3, #0
   13cbc:	andne	r3, r3, #1
   13cc0:	cmp	r3, #0
   13cc4:	movne	r3, r2
   13cc8:	subne	r2, r3, #1
   13ccc:	bne	13cfc <__assert_fail@plt+0x2d74>
   13cd0:	cmp	r9, r4
   13cd4:	movhi	r3, #0
   13cd8:	strbhi	r3, [r8, r4]
   13cdc:	mov	r0, r4
   13ce0:	add	sp, sp, #108	; 0x6c
   13ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ce8:	mov	r3, r2
   13cec:	b	13cb0 <__assert_fail@plt+0x2d28>
   13cf0:	cmp	r9, r4
   13cf4:	strbhi	r3, [r8, r4]
   13cf8:	add	r4, r4, #1
   13cfc:	ldrb	r3, [r2, #1]!
   13d00:	cmp	r3, #0
   13d04:	bne	13cf0 <__assert_fail@plt+0x2d68>
   13d08:	b	13cd0 <__assert_fail@plt+0x2d48>
   13d0c:	ldr	r3, [pc, #32]	; 13d34 <__assert_fail@plt+0x2dac>
   13d10:	mov	r6, #1
   13d14:	str	r6, [sp, #24]
   13d18:	str	r6, [sp, #32]
   13d1c:	str	r3, [sp, #40]	; 0x28
   13d20:	mov	r4, #0
   13d24:	mov	sl, #5
   13d28:	b	130d0 <__assert_fail@plt+0x2148>
   13d2c:	mov	r6, #1
   13d30:	b	132c4 <__assert_fail@plt+0x233c>
   13d34:	andeq	r6, r1, pc, asr r9
   13d38:	andeq	r6, r1, r3, ror #18
   13d3c:	andeq	r6, r1, r1, ror #18
   13d40:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13d44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d48:	sub	sp, sp, #52	; 0x34
   13d4c:	mov	r6, r0
   13d50:	mov	r5, r3
   13d54:	mov	r8, r1
   13d58:	mov	r9, r2
   13d5c:	bl	10ea4 <__errno_location@plt>
   13d60:	ldr	r7, [pc, #380]	; 13ee4 <__assert_fail@plt+0x2f5c>
   13d64:	cmn	r6, #-2147483647	; 0x80000001
   13d68:	ldr	r4, [r7]
   13d6c:	ldr	r3, [r0]
   13d70:	str	r0, [sp, #24]
   13d74:	str	r3, [sp, #32]
   13d78:	movne	r3, #0
   13d7c:	moveq	r3, #1
   13d80:	orrs	r3, r3, r6, lsr #31
   13d84:	beq	13d8c <__assert_fail@plt+0x2e04>
   13d88:	bl	10f70 <abort@plt>
   13d8c:	ldr	r2, [r7, #4]
   13d90:	cmp	r6, r2
   13d94:	blt	13e04 <__assert_fail@plt+0x2e7c>
   13d98:	add	r1, sp, #48	; 0x30
   13d9c:	add	sl, r7, #8
   13da0:	str	r2, [r1, #-4]!
   13da4:	cmp	r4, sl
   13da8:	mov	r3, #8
   13dac:	sub	r2, r6, r2
   13db0:	movne	r0, r4
   13db4:	str	r3, [sp]
   13db8:	add	r2, r2, #1
   13dbc:	mvn	r3, #-2147483648	; 0x80000000
   13dc0:	moveq	r0, #0
   13dc4:	bl	14b44 <__assert_fail@plt+0x3bbc>
   13dc8:	cmp	r4, sl
   13dcc:	ldr	r2, [sp, #44]	; 0x2c
   13dd0:	mov	fp, r0
   13dd4:	str	r0, [r7]
   13dd8:	ldmeq	r4, {r0, r1}
   13ddc:	mov	r4, fp
   13de0:	stmeq	fp, {r0, r1}
   13de4:	ldr	r0, [r7, #4]
   13de8:	mov	r1, #0
   13dec:	sub	r2, r2, r0
   13df0:	add	r0, fp, r0, lsl #3
   13df4:	lsl	r2, r2, #3
   13df8:	bl	10ebc <memset@plt>
   13dfc:	ldr	r3, [sp, #44]	; 0x2c
   13e00:	str	r3, [r7, #4]
   13e04:	ldr	r3, [r5, #4]
   13e08:	add	sl, r4, r6, lsl #3
   13e0c:	orr	r3, r3, #1
   13e10:	str	r3, [sp, #28]
   13e14:	add	r3, r5, #8
   13e18:	str	r3, [sp, #36]	; 0x24
   13e1c:	ldr	r3, [r5, #44]	; 0x2c
   13e20:	ldr	fp, [r4, r6, lsl #3]
   13e24:	ldr	r7, [sl, #4]
   13e28:	str	r3, [sp, #16]
   13e2c:	ldr	r3, [r5, #40]	; 0x28
   13e30:	mov	r2, r8
   13e34:	str	r3, [sp, #12]
   13e38:	add	r3, r5, #8
   13e3c:	str	r3, [sp, #8]
   13e40:	ldr	r3, [sp, #28]
   13e44:	mov	r1, fp
   13e48:	str	r3, [sp, #4]
   13e4c:	ldr	r3, [r5]
   13e50:	mov	r0, r7
   13e54:	str	r3, [sp]
   13e58:	mov	r3, r9
   13e5c:	bl	13010 <__assert_fail@plt+0x2088>
   13e60:	cmp	fp, r0
   13e64:	bhi	13ecc <__assert_fail@plt+0x2f44>
   13e68:	ldr	r3, [pc, #120]	; 13ee8 <__assert_fail@plt+0x2f60>
   13e6c:	add	fp, r0, #1
   13e70:	cmp	r7, r3
   13e74:	str	fp, [r4, r6, lsl #3]
   13e78:	beq	13e84 <__assert_fail@plt+0x2efc>
   13e7c:	mov	r0, r7
   13e80:	bl	12c34 <__assert_fail@plt+0x1cac>
   13e84:	mov	r0, fp
   13e88:	bl	149fc <__assert_fail@plt+0x3a74>
   13e8c:	ldr	r3, [r5, #44]	; 0x2c
   13e90:	mov	r2, r8
   13e94:	mov	r1, fp
   13e98:	str	r0, [sl, #4]
   13e9c:	str	r3, [sp, #16]
   13ea0:	ldr	r3, [r5, #40]	; 0x28
   13ea4:	mov	r7, r0
   13ea8:	str	r3, [sp, #12]
   13eac:	add	r3, r5, #8
   13eb0:	str	r3, [sp, #8]
   13eb4:	ldr	r3, [sp, #28]
   13eb8:	str	r3, [sp, #4]
   13ebc:	ldr	r3, [r5]
   13ec0:	str	r3, [sp]
   13ec4:	mov	r3, r9
   13ec8:	bl	13010 <__assert_fail@plt+0x2088>
   13ecc:	ldr	r3, [sp, #24]
   13ed0:	ldr	r2, [sp, #32]
   13ed4:	mov	r0, r7
   13ed8:	str	r2, [r3]
   13edc:	add	sp, sp, #52	; 0x34
   13ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ee4:	andeq	r7, r2, r4, lsl #2
   13ee8:	andeq	r7, r2, r8, ror r1
   13eec:	push	{r4, r5, r6, lr}
   13ef0:	mov	r5, r0
   13ef4:	bl	10ea4 <__errno_location@plt>
   13ef8:	cmp	r5, #0
   13efc:	mov	r1, #48	; 0x30
   13f00:	ldr	r6, [r0]
   13f04:	mov	r4, r0
   13f08:	ldr	r0, [pc, #12]	; 13f1c <__assert_fail@plt+0x2f94>
   13f0c:	movne	r0, r5
   13f10:	bl	14dd8 <__assert_fail@plt+0x3e50>
   13f14:	str	r6, [r4]
   13f18:	pop	{r4, r5, r6, pc}
   13f1c:	andeq	r7, r2, r8, ror r2
   13f20:	ldr	r3, [pc, #12]	; 13f34 <__assert_fail@plt+0x2fac>
   13f24:	cmp	r0, #0
   13f28:	moveq	r0, r3
   13f2c:	ldr	r0, [r0]
   13f30:	bx	lr
   13f34:	andeq	r7, r2, r8, ror r2
   13f38:	ldr	r3, [pc, #12]	; 13f4c <__assert_fail@plt+0x2fc4>
   13f3c:	cmp	r0, #0
   13f40:	moveq	r0, r3
   13f44:	str	r1, [r0]
   13f48:	bx	lr
   13f4c:	andeq	r7, r2, r8, ror r2
   13f50:	ldr	r3, [pc, #52]	; 13f8c <__assert_fail@plt+0x3004>
   13f54:	cmp	r0, #0
   13f58:	moveq	r0, r3
   13f5c:	add	r3, r0, #8
   13f60:	push	{lr}		; (str lr, [sp, #-4]!)
   13f64:	lsr	lr, r1, #5
   13f68:	and	r1, r1, #31
   13f6c:	ldr	ip, [r3, lr, lsl #2]
   13f70:	lsr	r0, ip, r1
   13f74:	eor	r2, r2, r0
   13f78:	and	r2, r2, #1
   13f7c:	and	r0, r0, #1
   13f80:	eor	r1, ip, r2, lsl r1
   13f84:	str	r1, [r3, lr, lsl #2]
   13f88:	pop	{pc}		; (ldr pc, [sp], #4)
   13f8c:	andeq	r7, r2, r8, ror r2
   13f90:	ldr	r3, [pc, #16]	; 13fa8 <__assert_fail@plt+0x3020>
   13f94:	cmp	r0, #0
   13f98:	movne	r3, r0
   13f9c:	ldr	r0, [r3, #4]
   13fa0:	str	r1, [r3, #4]
   13fa4:	bx	lr
   13fa8:	andeq	r7, r2, r8, ror r2
   13fac:	ldr	r3, [pc, #44]	; 13fe0 <__assert_fail@plt+0x3058>
   13fb0:	cmp	r0, #0
   13fb4:	moveq	r0, r3
   13fb8:	mov	r3, #10
   13fbc:	cmp	r2, #0
   13fc0:	cmpne	r1, #0
   13fc4:	str	r3, [r0]
   13fc8:	bne	13fd4 <__assert_fail@plt+0x304c>
   13fcc:	push	{r4, lr}
   13fd0:	bl	10f70 <abort@plt>
   13fd4:	str	r1, [r0, #40]	; 0x28
   13fd8:	str	r2, [r0, #44]	; 0x2c
   13fdc:	bx	lr
   13fe0:	andeq	r7, r2, r8, ror r2
   13fe4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13fe8:	sub	sp, sp, #24
   13fec:	mov	sl, r3
   13ff0:	ldr	r4, [sp, #56]	; 0x38
   13ff4:	ldr	r3, [pc, #100]	; 14060 <__assert_fail@plt+0x30d8>
   13ff8:	cmp	r4, #0
   13ffc:	moveq	r4, r3
   14000:	mov	r7, r0
   14004:	mov	r8, r1
   14008:	mov	r9, r2
   1400c:	bl	10ea4 <__errno_location@plt>
   14010:	ldr	r3, [r4, #44]	; 0x2c
   14014:	mov	r2, r9
   14018:	mov	r1, r8
   1401c:	ldr	r6, [r0]
   14020:	str	r3, [sp, #16]
   14024:	ldr	r3, [r4, #40]	; 0x28
   14028:	mov	r5, r0
   1402c:	str	r3, [sp, #12]
   14030:	add	r3, r4, #8
   14034:	str	r3, [sp, #8]
   14038:	ldr	r3, [r4, #4]
   1403c:	mov	r0, r7
   14040:	str	r3, [sp, #4]
   14044:	ldr	r3, [r4]
   14048:	str	r3, [sp]
   1404c:	mov	r3, sl
   14050:	bl	13010 <__assert_fail@plt+0x2088>
   14054:	str	r6, [r5]
   14058:	add	sp, sp, #24
   1405c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14060:	andeq	r7, r2, r8, ror r2
   14064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14068:	cmp	r3, #0
   1406c:	sub	sp, sp, #44	; 0x2c
   14070:	ldr	r4, [pc, #188]	; 14134 <__assert_fail@plt+0x31ac>
   14074:	mov	r6, r2
   14078:	movne	r4, r3
   1407c:	mov	sl, r1
   14080:	mov	r9, r0
   14084:	bl	10ea4 <__errno_location@plt>
   14088:	ldr	r5, [r4, #4]
   1408c:	add	fp, r4, #8
   14090:	cmp	r6, #0
   14094:	orreq	r5, r5, #1
   14098:	mov	r1, #0
   1409c:	mov	r2, r9
   140a0:	ldr	r3, [r0]
   140a4:	mov	r8, r0
   140a8:	str	r3, [sp, #28]
   140ac:	ldr	r3, [r4, #44]	; 0x2c
   140b0:	mov	r0, r1
   140b4:	str	r3, [sp, #16]
   140b8:	ldr	r3, [r4, #40]	; 0x28
   140bc:	stmib	sp, {r5, fp}
   140c0:	str	r3, [sp, #12]
   140c4:	ldr	r3, [r4]
   140c8:	str	r3, [sp]
   140cc:	mov	r3, sl
   140d0:	bl	13010 <__assert_fail@plt+0x2088>
   140d4:	add	r1, r0, #1
   140d8:	mov	r7, r0
   140dc:	mov	r0, r1
   140e0:	str	r1, [sp, #36]	; 0x24
   140e4:	bl	149fc <__assert_fail@plt+0x3a74>
   140e8:	ldr	r3, [r4, #44]	; 0x2c
   140ec:	mov	r2, r9
   140f0:	str	r3, [sp, #16]
   140f4:	ldr	r3, [r4, #40]	; 0x28
   140f8:	stmib	sp, {r5, fp}
   140fc:	str	r3, [sp, #12]
   14100:	ldr	r3, [r4]
   14104:	ldr	r1, [sp, #36]	; 0x24
   14108:	str	r3, [sp]
   1410c:	mov	r3, sl
   14110:	str	r0, [sp, #32]
   14114:	bl	13010 <__assert_fail@plt+0x2088>
   14118:	ldr	r3, [sp, #28]
   1411c:	cmp	r6, #0
   14120:	str	r3, [r8]
   14124:	ldr	r0, [sp, #32]
   14128:	strne	r7, [r6]
   1412c:	add	sp, sp, #44	; 0x2c
   14130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14134:	andeq	r7, r2, r8, ror r2
   14138:	mov	r3, r2
   1413c:	mov	r2, #0
   14140:	b	14064 <__assert_fail@plt+0x30dc>
   14144:	push	{r4, r5, r6, r7, r8, lr}
   14148:	mov	r6, #1
   1414c:	ldr	r4, [pc, #104]	; 141bc <__assert_fail@plt+0x3234>
   14150:	ldr	r5, [r4]
   14154:	add	r7, r5, #12
   14158:	ldr	r3, [r4, #4]
   1415c:	add	r7, r7, #8
   14160:	cmp	r6, r3
   14164:	blt	141ac <__assert_fail@plt+0x3224>
   14168:	ldr	r0, [r5, #4]
   1416c:	ldr	r6, [pc, #76]	; 141c0 <__assert_fail@plt+0x3238>
   14170:	cmp	r0, r6
   14174:	beq	14188 <__assert_fail@plt+0x3200>
   14178:	bl	12c34 <__assert_fail@plt+0x1cac>
   1417c:	mov	r3, #256	; 0x100
   14180:	str	r3, [r4, #8]
   14184:	str	r6, [r4, #12]
   14188:	ldr	r6, [pc, #52]	; 141c4 <__assert_fail@plt+0x323c>
   1418c:	cmp	r5, r6
   14190:	beq	141a0 <__assert_fail@plt+0x3218>
   14194:	mov	r0, r5
   14198:	bl	12c34 <__assert_fail@plt+0x1cac>
   1419c:	str	r6, [r4]
   141a0:	mov	r3, #1
   141a4:	str	r3, [r4, #4]
   141a8:	pop	{r4, r5, r6, r7, r8, pc}
   141ac:	ldr	r0, [r7, #-8]
   141b0:	bl	12c34 <__assert_fail@plt+0x1cac>
   141b4:	add	r6, r6, #1
   141b8:	b	14158 <__assert_fail@plt+0x31d0>
   141bc:	andeq	r7, r2, r4, lsl #2
   141c0:	andeq	r7, r2, r8, ror r1
   141c4:	andeq	r7, r2, ip, lsl #2
   141c8:	ldr	r3, [pc, #4]	; 141d4 <__assert_fail@plt+0x324c>
   141cc:	mvn	r2, #0
   141d0:	b	13d44 <__assert_fail@plt+0x2dbc>
   141d4:	andeq	r7, r2, r8, ror r2
   141d8:	ldr	r3, [pc]	; 141e0 <__assert_fail@plt+0x3258>
   141dc:	b	13d44 <__assert_fail@plt+0x2dbc>
   141e0:	andeq	r7, r2, r8, ror r2
   141e4:	mov	r1, r0
   141e8:	mov	r0, #0
   141ec:	b	141c8 <__assert_fail@plt+0x3240>
   141f0:	mov	r2, r1
   141f4:	mov	r1, r0
   141f8:	mov	r0, #0
   141fc:	b	141d8 <__assert_fail@plt+0x3250>
   14200:	push	{r4, r5, lr}
   14204:	sub	sp, sp, #52	; 0x34
   14208:	mov	r5, r2
   1420c:	mov	r4, r0
   14210:	mov	r0, sp
   14214:	bl	12ecc <__assert_fail@plt+0x1f44>
   14218:	mov	r3, sp
   1421c:	mvn	r2, #0
   14220:	mov	r1, r5
   14224:	mov	r0, r4
   14228:	bl	13d44 <__assert_fail@plt+0x2dbc>
   1422c:	add	sp, sp, #52	; 0x34
   14230:	pop	{r4, r5, pc}
   14234:	push	{r4, r5, r6, lr}
   14238:	sub	sp, sp, #48	; 0x30
   1423c:	mov	r5, r2
   14240:	mov	r6, r3
   14244:	mov	r4, r0
   14248:	mov	r0, sp
   1424c:	bl	12ecc <__assert_fail@plt+0x1f44>
   14250:	mov	r3, sp
   14254:	mov	r2, r6
   14258:	mov	r1, r5
   1425c:	mov	r0, r4
   14260:	bl	13d44 <__assert_fail@plt+0x2dbc>
   14264:	add	sp, sp, #48	; 0x30
   14268:	pop	{r4, r5, r6, pc}
   1426c:	mov	r2, r1
   14270:	mov	r1, r0
   14274:	mov	r0, #0
   14278:	b	14200 <__assert_fail@plt+0x3278>
   1427c:	mov	r3, r2
   14280:	mov	r2, r1
   14284:	mov	r1, r0
   14288:	mov	r0, #0
   1428c:	b	14234 <__assert_fail@plt+0x32ac>
   14290:	push	{r4, r5, r6, lr}
   14294:	mov	r4, r0
   14298:	ldr	lr, [pc, #80]	; 142f0 <__assert_fail@plt+0x3368>
   1429c:	mov	r5, r1
   142a0:	mov	r6, r2
   142a4:	ldm	lr!, {r0, r1, r2, r3}
   142a8:	sub	sp, sp, #48	; 0x30
   142ac:	mov	ip, sp
   142b0:	stmia	ip!, {r0, r1, r2, r3}
   142b4:	ldm	lr!, {r0, r1, r2, r3}
   142b8:	stmia	ip!, {r0, r1, r2, r3}
   142bc:	ldm	lr, {r0, r1, r2, r3}
   142c0:	stm	ip, {r0, r1, r2, r3}
   142c4:	mov	r1, r6
   142c8:	mov	r2, #1
   142cc:	mov	r0, sp
   142d0:	bl	13f50 <__assert_fail@plt+0x2fc8>
   142d4:	mov	r3, sp
   142d8:	mov	r2, r5
   142dc:	mov	r1, r4
   142e0:	mov	r0, #0
   142e4:	bl	13d44 <__assert_fail@plt+0x2dbc>
   142e8:	add	sp, sp, #48	; 0x30
   142ec:	pop	{r4, r5, r6, pc}
   142f0:	andeq	r7, r2, r8, ror r2
   142f4:	mov	r2, r1
   142f8:	mvn	r1, #0
   142fc:	b	14290 <__assert_fail@plt+0x3308>
   14300:	mov	r1, #58	; 0x3a
   14304:	b	142f4 <__assert_fail@plt+0x336c>
   14308:	mov	r2, #58	; 0x3a
   1430c:	b	14290 <__assert_fail@plt+0x3308>
   14310:	push	{r4, r5, lr}
   14314:	sub	sp, sp, #100	; 0x64
   14318:	mov	r4, r0
   1431c:	mov	r0, sp
   14320:	mov	r5, r2
   14324:	bl	12ecc <__assert_fail@plt+0x1f44>
   14328:	mov	ip, sp
   1432c:	add	lr, sp, #48	; 0x30
   14330:	ldm	ip!, {r0, r1, r2, r3}
   14334:	stmia	lr!, {r0, r1, r2, r3}
   14338:	ldm	ip!, {r0, r1, r2, r3}
   1433c:	stmia	lr!, {r0, r1, r2, r3}
   14340:	ldm	ip, {r0, r1, r2, r3}
   14344:	stm	lr, {r0, r1, r2, r3}
   14348:	mov	r2, #1
   1434c:	mov	r1, #58	; 0x3a
   14350:	add	r0, sp, #48	; 0x30
   14354:	bl	13f50 <__assert_fail@plt+0x2fc8>
   14358:	add	r3, sp, #48	; 0x30
   1435c:	mvn	r2, #0
   14360:	mov	r1, r5
   14364:	mov	r0, r4
   14368:	bl	13d44 <__assert_fail@plt+0x2dbc>
   1436c:	add	sp, sp, #100	; 0x64
   14370:	pop	{r4, r5, pc}
   14374:	push	{r4, r5, r6, r7, lr}
   14378:	mov	r4, r0
   1437c:	ldr	lr, [pc, #84]	; 143d8 <__assert_fail@plt+0x3450>
   14380:	mov	r6, r1
   14384:	mov	r7, r2
   14388:	mov	r5, r3
   1438c:	ldm	lr!, {r0, r1, r2, r3}
   14390:	sub	sp, sp, #52	; 0x34
   14394:	mov	ip, sp
   14398:	stmia	ip!, {r0, r1, r2, r3}
   1439c:	ldm	lr!, {r0, r1, r2, r3}
   143a0:	stmia	ip!, {r0, r1, r2, r3}
   143a4:	ldm	lr, {r0, r1, r2, r3}
   143a8:	stm	ip, {r0, r1, r2, r3}
   143ac:	mov	r2, r7
   143b0:	mov	r1, r6
   143b4:	mov	r0, sp
   143b8:	bl	13fac <__assert_fail@plt+0x3024>
   143bc:	mov	r3, sp
   143c0:	ldr	r2, [sp, #72]	; 0x48
   143c4:	mov	r1, r5
   143c8:	mov	r0, r4
   143cc:	bl	13d44 <__assert_fail@plt+0x2dbc>
   143d0:	add	sp, sp, #52	; 0x34
   143d4:	pop	{r4, r5, r6, r7, pc}
   143d8:	andeq	r7, r2, r8, ror r2
   143dc:	mvn	ip, #0
   143e0:	push	{r0, r1, r2, lr}
   143e4:	str	ip, [sp]
   143e8:	bl	14374 <__assert_fail@plt+0x33ec>
   143ec:	add	sp, sp, #12
   143f0:	pop	{pc}		; (ldr pc, [sp], #4)
   143f4:	mov	r3, r2
   143f8:	mov	r2, r1
   143fc:	mov	r1, r0
   14400:	mov	r0, #0
   14404:	b	143dc <__assert_fail@plt+0x3454>
   14408:	push	{r0, r1, r2, lr}
   1440c:	str	r3, [sp]
   14410:	mov	r3, r2
   14414:	mov	r2, r1
   14418:	mov	r1, r0
   1441c:	mov	r0, #0
   14420:	bl	14374 <__assert_fail@plt+0x33ec>
   14424:	add	sp, sp, #12
   14428:	pop	{pc}		; (ldr pc, [sp], #4)
   1442c:	ldr	r3, [pc]	; 14434 <__assert_fail@plt+0x34ac>
   14430:	b	13d44 <__assert_fail@plt+0x2dbc>
   14434:	andeq	r7, r2, r4, lsl r1
   14438:	mov	r2, r1
   1443c:	mov	r1, r0
   14440:	mov	r0, #0
   14444:	b	1442c <__assert_fail@plt+0x34a4>
   14448:	mvn	r2, #0
   1444c:	b	1442c <__assert_fail@plt+0x34a4>
   14450:	mov	r1, r0
   14454:	mov	r0, #0
   14458:	b	14448 <__assert_fail@plt+0x34c0>
   1445c:	push	{r4, r5, r6, r7, r8, lr}
   14460:	mov	r7, r0
   14464:	ldr	r5, [pc, #88]	; 144c4 <__assert_fail@plt+0x353c>
   14468:	mov	r8, r1
   1446c:	mov	r4, r2
   14470:	mov	r2, r4
   14474:	mov	r1, r8
   14478:	mov	r0, r7
   1447c:	bl	10d24 <read@plt>
   14480:	subs	r6, r0, #0
   14484:	bge	144b4 <__assert_fail@plt+0x352c>
   14488:	bl	10ea4 <__errno_location@plt>
   1448c:	ldr	r3, [r0]
   14490:	cmp	r3, #4
   14494:	beq	14470 <__assert_fail@plt+0x34e8>
   14498:	cmp	r4, r5
   1449c:	movls	r4, #0
   144a0:	movhi	r4, #1
   144a4:	cmp	r3, #22
   144a8:	movne	r4, #0
   144ac:	cmp	r4, #0
   144b0:	bne	144bc <__assert_fail@plt+0x3534>
   144b4:	mov	r0, r6
   144b8:	pop	{r4, r5, r6, r7, r8, pc}
   144bc:	mov	r4, r5
   144c0:	b	14470 <__assert_fail@plt+0x34e8>
   144c4:	svcvc	0x00f00000	; IMB
   144c8:	push	{r4, r5, r6, lr}
   144cc:	sub	sp, sp, #32
   144d0:	cmp	r1, #0
   144d4:	mov	r5, r0
   144d8:	ldr	r4, [sp, #48]	; 0x30
   144dc:	ldr	r6, [sp, #52]	; 0x34
   144e0:	beq	14594 <__assert_fail@plt+0x360c>
   144e4:	stm	sp, {r2, r3}
   144e8:	mov	r3, r1
   144ec:	ldr	r2, [pc, #860]	; 14850 <__assert_fail@plt+0x38c8>
   144f0:	mov	r1, #1
   144f4:	bl	10eec <__fprintf_chk@plt>
   144f8:	mov	r2, #5
   144fc:	ldr	r1, [pc, #848]	; 14854 <__assert_fail@plt+0x38cc>
   14500:	mov	r0, #0
   14504:	bl	10d90 <dcgettext@plt>
   14508:	ldr	r3, [pc, #840]	; 14858 <__assert_fail@plt+0x38d0>
   1450c:	ldr	r2, [pc, #840]	; 1485c <__assert_fail@plt+0x38d4>
   14510:	str	r3, [sp]
   14514:	mov	r1, #1
   14518:	mov	r3, r0
   1451c:	mov	r0, r5
   14520:	bl	10eec <__fprintf_chk@plt>
   14524:	mov	r1, r5
   14528:	mov	r0, #10
   1452c:	bl	10d84 <fputc_unlocked@plt>
   14530:	mov	r2, #5
   14534:	ldr	r1, [pc, #804]	; 14860 <__assert_fail@plt+0x38d8>
   14538:	mov	r0, #0
   1453c:	bl	10d90 <dcgettext@plt>
   14540:	mov	r1, #1
   14544:	ldr	r3, [pc, #792]	; 14864 <__assert_fail@plt+0x38dc>
   14548:	mov	r2, r0
   1454c:	mov	r0, r5
   14550:	bl	10eec <__fprintf_chk@plt>
   14554:	mov	r1, r5
   14558:	mov	r0, #10
   1455c:	bl	10d84 <fputc_unlocked@plt>
   14560:	cmp	r6, #9
   14564:	ldrls	pc, [pc, r6, lsl #2]
   14568:	b	14844 <__assert_fail@plt+0x38bc>
   1456c:	andeq	r4, r1, r4, lsl #13
   14570:	andeq	r4, r1, ip, lsr #11
   14574:	ldrdeq	r4, [r1], -r8
   14578:	andeq	r4, r1, ip, lsl #12
   1457c:	andeq	r4, r1, r8, asr #12
   14580:	andeq	r4, r1, ip, lsl #13
   14584:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14588:	andeq	r4, r1, r4, lsr #14
   1458c:	andeq	r4, r1, ip, ror r7
   14590:	ldrdeq	r4, [r1], -ip
   14594:	str	r3, [sp]
   14598:	mov	r1, #1
   1459c:	mov	r3, r2
   145a0:	ldr	r2, [pc, #704]	; 14868 <__assert_fail@plt+0x38e0>
   145a4:	bl	10eec <__fprintf_chk@plt>
   145a8:	b	144f8 <__assert_fail@plt+0x3570>
   145ac:	mov	r2, #5
   145b0:	ldr	r1, [pc, #692]	; 1486c <__assert_fail@plt+0x38e4>
   145b4:	mov	r0, #0
   145b8:	bl	10d90 <dcgettext@plt>
   145bc:	ldr	r3, [r4]
   145c0:	mov	r1, #1
   145c4:	mov	r2, r0
   145c8:	mov	r0, r5
   145cc:	add	sp, sp, #32
   145d0:	pop	{r4, r5, r6, lr}
   145d4:	b	10eec <__fprintf_chk@plt>
   145d8:	mov	r2, #5
   145dc:	ldr	r1, [pc, #652]	; 14870 <__assert_fail@plt+0x38e8>
   145e0:	mov	r0, #0
   145e4:	bl	10d90 <dcgettext@plt>
   145e8:	ldr	r3, [r4, #4]
   145ec:	mov	r1, #1
   145f0:	str	r3, [sp, #48]	; 0x30
   145f4:	ldr	r3, [r4]
   145f8:	mov	r2, r0
   145fc:	mov	r0, r5
   14600:	add	sp, sp, #32
   14604:	pop	{r4, r5, r6, lr}
   14608:	b	10eec <__fprintf_chk@plt>
   1460c:	mov	r2, #5
   14610:	ldr	r1, [pc, #604]	; 14874 <__assert_fail@plt+0x38ec>
   14614:	mov	r0, #0
   14618:	bl	10d90 <dcgettext@plt>
   1461c:	ldr	r3, [r4, #8]
   14620:	mov	r1, #1
   14624:	str	r3, [sp, #52]	; 0x34
   14628:	ldr	r3, [r4, #4]
   1462c:	str	r3, [sp, #48]	; 0x30
   14630:	ldr	r3, [r4]
   14634:	mov	r2, r0
   14638:	mov	r0, r5
   1463c:	add	sp, sp, #32
   14640:	pop	{r4, r5, r6, lr}
   14644:	b	10eec <__fprintf_chk@plt>
   14648:	mov	r2, #5
   1464c:	ldr	r1, [pc, #548]	; 14878 <__assert_fail@plt+0x38f0>
   14650:	mov	r0, #0
   14654:	bl	10d90 <dcgettext@plt>
   14658:	ldr	r3, [r4, #12]
   1465c:	mov	r1, #1
   14660:	str	r3, [sp, #8]
   14664:	ldr	r3, [r4, #8]
   14668:	str	r3, [sp, #4]
   1466c:	ldr	r3, [r4, #4]
   14670:	str	r3, [sp]
   14674:	ldr	r3, [r4]
   14678:	mov	r2, r0
   1467c:	mov	r0, r5
   14680:	bl	10eec <__fprintf_chk@plt>
   14684:	add	sp, sp, #32
   14688:	pop	{r4, r5, r6, pc}
   1468c:	mov	r2, #5
   14690:	ldr	r1, [pc, #484]	; 1487c <__assert_fail@plt+0x38f4>
   14694:	mov	r0, #0
   14698:	bl	10d90 <dcgettext@plt>
   1469c:	ldr	r3, [r4, #16]
   146a0:	mov	r1, #1
   146a4:	str	r3, [sp, #12]
   146a8:	ldr	r3, [r4, #12]
   146ac:	str	r3, [sp, #8]
   146b0:	ldr	r3, [r4, #8]
   146b4:	str	r3, [sp, #4]
   146b8:	ldr	r3, [r4, #4]
   146bc:	str	r3, [sp]
   146c0:	ldr	r3, [r4]
   146c4:	mov	r2, r0
   146c8:	mov	r0, r5
   146cc:	bl	10eec <__fprintf_chk@plt>
   146d0:	b	14684 <__assert_fail@plt+0x36fc>
   146d4:	mov	r2, #5
   146d8:	ldr	r1, [pc, #416]	; 14880 <__assert_fail@plt+0x38f8>
   146dc:	mov	r0, #0
   146e0:	bl	10d90 <dcgettext@plt>
   146e4:	ldr	r3, [r4, #20]
   146e8:	mov	r1, #1
   146ec:	str	r3, [sp, #16]
   146f0:	ldr	r3, [r4, #16]
   146f4:	str	r3, [sp, #12]
   146f8:	ldr	r3, [r4, #12]
   146fc:	str	r3, [sp, #8]
   14700:	ldr	r3, [r4, #8]
   14704:	str	r3, [sp, #4]
   14708:	ldr	r3, [r4, #4]
   1470c:	str	r3, [sp]
   14710:	ldr	r3, [r4]
   14714:	mov	r2, r0
   14718:	mov	r0, r5
   1471c:	bl	10eec <__fprintf_chk@plt>
   14720:	b	14684 <__assert_fail@plt+0x36fc>
   14724:	mov	r2, #5
   14728:	ldr	r1, [pc, #340]	; 14884 <__assert_fail@plt+0x38fc>
   1472c:	mov	r0, #0
   14730:	bl	10d90 <dcgettext@plt>
   14734:	ldr	r3, [r4, #24]
   14738:	mov	r1, #1
   1473c:	str	r3, [sp, #20]
   14740:	ldr	r3, [r4, #20]
   14744:	str	r3, [sp, #16]
   14748:	ldr	r3, [r4, #16]
   1474c:	str	r3, [sp, #12]
   14750:	ldr	r3, [r4, #12]
   14754:	str	r3, [sp, #8]
   14758:	ldr	r3, [r4, #8]
   1475c:	str	r3, [sp, #4]
   14760:	ldr	r3, [r4, #4]
   14764:	str	r3, [sp]
   14768:	ldr	r3, [r4]
   1476c:	mov	r2, r0
   14770:	mov	r0, r5
   14774:	bl	10eec <__fprintf_chk@plt>
   14778:	b	14684 <__assert_fail@plt+0x36fc>
   1477c:	mov	r2, #5
   14780:	ldr	r1, [pc, #256]	; 14888 <__assert_fail@plt+0x3900>
   14784:	mov	r0, #0
   14788:	bl	10d90 <dcgettext@plt>
   1478c:	ldr	r3, [r4, #28]
   14790:	mov	r1, #1
   14794:	str	r3, [sp, #24]
   14798:	ldr	r3, [r4, #24]
   1479c:	str	r3, [sp, #20]
   147a0:	ldr	r3, [r4, #20]
   147a4:	str	r3, [sp, #16]
   147a8:	ldr	r3, [r4, #16]
   147ac:	str	r3, [sp, #12]
   147b0:	ldr	r3, [r4, #12]
   147b4:	str	r3, [sp, #8]
   147b8:	ldr	r3, [r4, #8]
   147bc:	str	r3, [sp, #4]
   147c0:	ldr	r3, [r4, #4]
   147c4:	str	r3, [sp]
   147c8:	ldr	r3, [r4]
   147cc:	mov	r2, r0
   147d0:	mov	r0, r5
   147d4:	bl	10eec <__fprintf_chk@plt>
   147d8:	b	14684 <__assert_fail@plt+0x36fc>
   147dc:	ldr	r1, [pc, #168]	; 1488c <__assert_fail@plt+0x3904>
   147e0:	mov	r2, #5
   147e4:	mov	r0, #0
   147e8:	bl	10d90 <dcgettext@plt>
   147ec:	ldr	r3, [r4, #32]
   147f0:	mov	r1, #1
   147f4:	str	r3, [sp, #28]
   147f8:	ldr	r3, [r4, #28]
   147fc:	str	r3, [sp, #24]
   14800:	ldr	r3, [r4, #24]
   14804:	str	r3, [sp, #20]
   14808:	ldr	r3, [r4, #20]
   1480c:	str	r3, [sp, #16]
   14810:	ldr	r3, [r4, #16]
   14814:	str	r3, [sp, #12]
   14818:	ldr	r3, [r4, #12]
   1481c:	str	r3, [sp, #8]
   14820:	ldr	r3, [r4, #8]
   14824:	str	r3, [sp, #4]
   14828:	ldr	r3, [r4, #4]
   1482c:	str	r3, [sp]
   14830:	ldr	r3, [r4]
   14834:	mov	r2, r0
   14838:	mov	r0, r5
   1483c:	bl	10eec <__fprintf_chk@plt>
   14840:	b	14684 <__assert_fail@plt+0x36fc>
   14844:	mov	r2, #5
   14848:	ldr	r1, [pc, #64]	; 14890 <__assert_fail@plt+0x3908>
   1484c:	b	147e4 <__assert_fail@plt+0x385c>
   14850:			; <UNDEFINED> instruction: 0x000169b1
   14854:	andeq	r6, r1, r4, asr #19
   14858:	andeq	r0, r0, r6, ror #15
   1485c:	muleq	r1, r2, ip
   14860:	andeq	r6, r1, r8, asr #19
   14864:	andeq	r6, r1, r3, ror sl
   14868:			; <UNDEFINED> instruction: 0x000169bd
   1486c:	muleq	r1, r5, sl
   14870:	andeq	r6, r1, r5, lsr #21
   14874:			; <UNDEFINED> instruction: 0x00016abc
   14878:	ldrdeq	r6, [r1], -r8
   1487c:	strdeq	r6, [r1], -r8
   14880:	andeq	r6, r1, ip, lsl fp
   14884:	andeq	r6, r1, r4, asr #22
   14888:	andeq	r6, r1, r0, ror fp
   1488c:	andeq	r6, r1, r0, lsr #23
   14890:	ldrdeq	r6, [r1], -r4
   14894:	push	{r0, r1, r4, lr}
   14898:	mov	ip, #0
   1489c:	ldr	lr, [sp, #16]
   148a0:	ldr	r4, [lr, ip, lsl #2]
   148a4:	cmp	r4, #0
   148a8:	bne	148c0 <__assert_fail@plt+0x3938>
   148ac:	str	ip, [sp, #4]
   148b0:	str	lr, [sp]
   148b4:	bl	144c8 <__assert_fail@plt+0x3540>
   148b8:	add	sp, sp, #8
   148bc:	pop	{r4, pc}
   148c0:	add	ip, ip, #1
   148c4:	b	148a0 <__assert_fail@plt+0x3918>
   148c8:	push	{r4, r5, lr}
   148cc:	sub	sp, sp, #52	; 0x34
   148d0:	mov	ip, #0
   148d4:	ldr	r5, [sp, #64]	; 0x40
   148d8:	add	lr, sp, #8
   148dc:	ldr	r4, [r5, ip, lsl #2]
   148e0:	cmp	r4, #0
   148e4:	str	r4, [lr, ip, lsl #2]
   148e8:	beq	148f8 <__assert_fail@plt+0x3970>
   148ec:	add	ip, ip, #1
   148f0:	cmp	ip, #10
   148f4:	bne	148dc <__assert_fail@plt+0x3954>
   148f8:	str	ip, [sp, #4]
   148fc:	str	lr, [sp]
   14900:	bl	144c8 <__assert_fail@plt+0x3540>
   14904:	add	sp, sp, #52	; 0x34
   14908:	pop	{r4, r5, pc}
   1490c:	push	{r3}		; (str r3, [sp, #-4]!)
   14910:	push	{r0, r1, r2, r3, lr}
   14914:	add	r3, sp, #24
   14918:	str	r3, [sp, #12]
   1491c:	str	r3, [sp]
   14920:	ldr	r3, [sp, #20]
   14924:	bl	148c8 <__assert_fail@plt+0x3940>
   14928:	add	sp, sp, #16
   1492c:	pop	{lr}		; (ldr lr, [sp], #4)
   14930:	add	sp, sp, #4
   14934:	bx	lr
   14938:	ldr	r3, [pc, #116]	; 149b4 <__assert_fail@plt+0x3a2c>
   1493c:	push	{r4, lr}
   14940:	mov	r0, #10
   14944:	ldr	r1, [r3]
   14948:	bl	10d84 <fputc_unlocked@plt>
   1494c:	mov	r2, #5
   14950:	ldr	r1, [pc, #96]	; 149b8 <__assert_fail@plt+0x3a30>
   14954:	mov	r0, #0
   14958:	bl	10d90 <dcgettext@plt>
   1495c:	ldr	r2, [pc, #88]	; 149bc <__assert_fail@plt+0x3a34>
   14960:	mov	r1, r0
   14964:	mov	r0, #1
   14968:	bl	10ec8 <__printf_chk@plt>
   1496c:	mov	r2, #5
   14970:	ldr	r1, [pc, #72]	; 149c0 <__assert_fail@plt+0x3a38>
   14974:	mov	r0, #0
   14978:	bl	10d90 <dcgettext@plt>
   1497c:	ldr	r3, [pc, #64]	; 149c4 <__assert_fail@plt+0x3a3c>
   14980:	ldr	r2, [pc, #64]	; 149c8 <__assert_fail@plt+0x3a40>
   14984:	mov	r1, r0
   14988:	mov	r0, #1
   1498c:	bl	10ec8 <__printf_chk@plt>
   14990:	mov	r2, #5
   14994:	ldr	r1, [pc, #48]	; 149cc <__assert_fail@plt+0x3a44>
   14998:	mov	r0, #0
   1499c:	bl	10d90 <dcgettext@plt>
   149a0:	ldr	r2, [pc, #40]	; 149d0 <__assert_fail@plt+0x3a48>
   149a4:	pop	{r4, lr}
   149a8:	mov	r1, r0
   149ac:	mov	r0, #1
   149b0:	b	10ec8 <__printf_chk@plt>
   149b4:	andeq	r7, r2, ip, asr r1
   149b8:	andeq	r6, r1, r0, lsl ip
   149bc:	andeq	r6, r1, r4, lsr #24
   149c0:	andeq	r6, r1, sl, lsr ip
   149c4:	andeq	r6, r1, pc, lsr r6
   149c8:	andeq	r6, r1, r7, ror #12
   149cc:	andeq	r6, r1, lr, asr #24
   149d0:	andeq	r6, r1, r5, ror ip
   149d4:	push	{r4, lr}
   149d8:	bl	15428 <__assert_fail@plt+0x44a0>
   149dc:	cmp	r0, #0
   149e0:	popne	{r4, pc}
   149e4:	bl	14e68 <__assert_fail@plt+0x3ee0>
   149e8:	push	{r4, lr}
   149ec:	bl	15428 <__assert_fail@plt+0x44a0>
   149f0:	cmp	r0, #0
   149f4:	popne	{r4, pc}
   149f8:	bl	14e68 <__assert_fail@plt+0x3ee0>
   149fc:	b	149d4 <__assert_fail@plt+0x3a4c>
   14a00:	push	{r4, r5, r6, lr}
   14a04:	mov	r5, r0
   14a08:	mov	r4, r1
   14a0c:	bl	15468 <__assert_fail@plt+0x44e0>
   14a10:	cmp	r0, #0
   14a14:	popne	{r4, r5, r6, pc}
   14a18:	adds	r4, r4, #0
   14a1c:	movne	r4, #1
   14a20:	cmp	r5, #0
   14a24:	orreq	r4, r4, #1
   14a28:	cmp	r4, #0
   14a2c:	popeq	{r4, r5, r6, pc}
   14a30:	bl	14e68 <__assert_fail@plt+0x3ee0>
   14a34:	push	{r4, lr}
   14a38:	cmp	r1, #0
   14a3c:	orreq	r1, r1, #1
   14a40:	bl	15468 <__assert_fail@plt+0x44e0>
   14a44:	cmp	r0, #0
   14a48:	popne	{r4, pc}
   14a4c:	bl	14e68 <__assert_fail@plt+0x3ee0>
   14a50:	push	{r4, r5, r6, lr}
   14a54:	mov	r6, r0
   14a58:	mov	r5, r1
   14a5c:	mov	r4, r2
   14a60:	bl	15744 <__assert_fail@plt+0x47bc>
   14a64:	cmp	r0, #0
   14a68:	popne	{r4, r5, r6, pc}
   14a6c:	cmp	r6, #0
   14a70:	beq	14a80 <__assert_fail@plt+0x3af8>
   14a74:	cmp	r5, #0
   14a78:	cmpne	r4, #0
   14a7c:	popeq	{r4, r5, r6, pc}
   14a80:	bl	14e68 <__assert_fail@plt+0x3ee0>
   14a84:	b	14a50 <__assert_fail@plt+0x3ac8>
   14a88:	cmp	r2, #0
   14a8c:	cmpne	r1, #0
   14a90:	moveq	r2, #1
   14a94:	moveq	r1, r2
   14a98:	push	{r4, lr}
   14a9c:	bl	15744 <__assert_fail@plt+0x47bc>
   14aa0:	cmp	r0, #0
   14aa4:	popne	{r4, pc}
   14aa8:	bl	14e68 <__assert_fail@plt+0x3ee0>
   14aac:	mov	r2, r1
   14ab0:	mov	r1, r0
   14ab4:	mov	r0, #0
   14ab8:	b	14a50 <__assert_fail@plt+0x3ac8>
   14abc:	mov	r2, r1
   14ac0:	mov	r1, r0
   14ac4:	mov	r0, #0
   14ac8:	b	14a88 <__assert_fail@plt+0x3b00>
   14acc:	push	{r4, r5, r6, r7, r8, lr}
   14ad0:	subs	r7, r0, #0
   14ad4:	mov	r5, r1
   14ad8:	mov	r6, r2
   14adc:	ldr	r4, [r1]
   14ae0:	bne	14b1c <__assert_fail@plt+0x3b94>
   14ae4:	cmp	r4, #0
   14ae8:	bne	14b04 <__assert_fail@plt+0x3b7c>
   14aec:	mov	r1, r2
   14af0:	mov	r0, #64	; 0x40
   14af4:	bl	15870 <__assert_fail@plt+0x48e8>
   14af8:	cmp	r0, #0
   14afc:	movne	r4, r0
   14b00:	addeq	r4, r0, #1
   14b04:	mov	r2, r6
   14b08:	mov	r1, r4
   14b0c:	mov	r0, r7
   14b10:	bl	14a50 <__assert_fail@plt+0x3ac8>
   14b14:	str	r4, [r5]
   14b18:	pop	{r4, r5, r6, r7, r8, pc}
   14b1c:	lsr	r2, r4, #1
   14b20:	add	r3, r2, #1
   14b24:	mvn	r3, r3
   14b28:	cmp	r4, r3
   14b2c:	addls	r4, r4, #1
   14b30:	addls	r4, r4, r2
   14b34:	bls	14b04 <__assert_fail@plt+0x3b7c>
   14b38:	bl	14e68 <__assert_fail@plt+0x3ee0>
   14b3c:	mov	r2, #1
   14b40:	b	14acc <__assert_fail@plt+0x3b44>
   14b44:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b48:	mov	sl, r0
   14b4c:	ldr	r8, [r1]
   14b50:	mov	fp, r1
   14b54:	mov	r5, r2
   14b58:	asrs	r4, r8, #1
   14b5c:	mov	r9, r3
   14b60:	ldr	r7, [sp, #48]	; 0x30
   14b64:	bpl	14c00 <__assert_fail@plt+0x3c78>
   14b68:	rsb	r2, r4, #-2147483648	; 0x80000000
   14b6c:	cmp	r8, r2
   14b70:	movge	r2, #0
   14b74:	movlt	r2, #1
   14b78:	mvn	r3, r9
   14b7c:	cmp	r2, #0
   14b80:	lsr	r3, r3, #31
   14b84:	addeq	r4, r4, r8
   14b88:	mvnne	r4, #-2147483648	; 0x80000000
   14b8c:	mov	r0, r3
   14b90:	cmp	r9, r4
   14b94:	movge	r0, #0
   14b98:	andlt	r0, r0, #1
   14b9c:	cmp	r0, #0
   14ba0:	str	r3, [sp, #4]
   14ba4:	bne	14d74 <__assert_fail@plt+0x3dec>
   14ba8:	cmp	r7, #0
   14bac:	bge	14cc0 <__assert_fail@plt+0x3d38>
   14bb0:	cmp	r4, #0
   14bb4:	bge	14c18 <__assert_fail@plt+0x3c90>
   14bb8:	mov	r1, r7
   14bbc:	mvn	r0, #-2147483648	; 0x80000000
   14bc0:	bl	15a7c <__assert_fail@plt+0x4af4>
   14bc4:	cmp	r0, r4
   14bc8:	movle	r0, #0
   14bcc:	movgt	r0, #1
   14bd0:	cmp	r0, #0
   14bd4:	mvnne	r6, #-2147483648	; 0x80000000
   14bd8:	beq	14c28 <__assert_fail@plt+0x3ca0>
   14bdc:	mov	r1, r7
   14be0:	mov	r0, r6
   14be4:	bl	15a7c <__assert_fail@plt+0x4af4>
   14be8:	mov	r1, r7
   14bec:	mov	r4, r0
   14bf0:	mov	r0, r6
   14bf4:	bl	15c9c <__assert_fail@plt+0x4d14>
   14bf8:	sub	r1, r6, r1
   14bfc:	b	14c38 <__assert_fail@plt+0x3cb0>
   14c00:	mvn	r2, #-2147483648	; 0x80000000
   14c04:	sub	r2, r2, r4
   14c08:	cmp	r8, r2
   14c0c:	movle	r2, #0
   14c10:	movgt	r2, #1
   14c14:	b	14b78 <__assert_fail@plt+0x3bf0>
   14c18:	cmn	r7, #1
   14c1c:	movne	r1, r7
   14c20:	movne	r0, #-2147483648	; 0x80000000
   14c24:	bne	14d8c <__assert_fail@plt+0x3e04>
   14c28:	mul	r1, r7, r4
   14c2c:	cmp	r1, #63	; 0x3f
   14c30:	movle	r6, #64	; 0x40
   14c34:	ble	14bdc <__assert_fail@plt+0x3c54>
   14c38:	cmp	sl, #0
   14c3c:	sub	r2, r4, r8
   14c40:	streq	sl, [fp]
   14c44:	cmp	r2, r5
   14c48:	bge	14d1c <__assert_fail@plt+0x3d94>
   14c4c:	cmp	r5, #0
   14c50:	bge	14ce8 <__assert_fail@plt+0x3d60>
   14c54:	rsb	r2, r5, #-2147483648	; 0x80000000
   14c58:	cmp	r8, r2
   14c5c:	movge	r2, #0
   14c60:	movlt	r2, #1
   14c64:	cmp	r2, #0
   14c68:	bne	14cbc <__assert_fail@plt+0x3d34>
   14c6c:	ldr	r0, [sp, #4]
   14c70:	add	r5, r8, r5
   14c74:	cmp	r9, r5
   14c78:	movge	r0, #0
   14c7c:	andlt	r0, r0, #1
   14c80:	cmp	r0, #0
   14c84:	mov	r4, r5
   14c88:	bne	14cbc <__assert_fail@plt+0x3d34>
   14c8c:	cmp	r7, #0
   14c90:	bge	14d30 <__assert_fail@plt+0x3da8>
   14c94:	cmp	r5, #0
   14c98:	bge	14d08 <__assert_fail@plt+0x3d80>
   14c9c:	mov	r1, r7
   14ca0:	mvn	r0, #-2147483648	; 0x80000000
   14ca4:	bl	15a7c <__assert_fail@plt+0x4af4>
   14ca8:	cmp	r5, r0
   14cac:	movge	r0, #0
   14cb0:	movlt	r0, #1
   14cb4:	cmp	r0, #0
   14cb8:	beq	14d18 <__assert_fail@plt+0x3d90>
   14cbc:	bl	14e68 <__assert_fail@plt+0x3ee0>
   14cc0:	beq	14c28 <__assert_fail@plt+0x3ca0>
   14cc4:	cmp	r4, #0
   14cc8:	bge	14d84 <__assert_fail@plt+0x3dfc>
   14ccc:	cmn	r4, #1
   14cd0:	beq	14c28 <__assert_fail@plt+0x3ca0>
   14cd4:	mov	r1, r4
   14cd8:	mov	r0, #-2147483648	; 0x80000000
   14cdc:	bl	15a7c <__assert_fail@plt+0x4af4>
   14ce0:	cmp	r7, r0
   14ce4:	b	14bc8 <__assert_fail@plt+0x3c40>
   14ce8:	cmp	r8, #0
   14cec:	blt	14c6c <__assert_fail@plt+0x3ce4>
   14cf0:	mvn	r2, #-2147483648	; 0x80000000
   14cf4:	sub	r2, r2, r5
   14cf8:	cmp	r8, r2
   14cfc:	movle	r2, #0
   14d00:	movgt	r2, #1
   14d04:	b	14c64 <__assert_fail@plt+0x3cdc>
   14d08:	cmn	r7, #1
   14d0c:	movne	r1, r7
   14d10:	movne	r0, #-2147483648	; 0x80000000
   14d14:	bne	14d68 <__assert_fail@plt+0x3de0>
   14d18:	mul	r1, r5, r7
   14d1c:	mov	r0, sl
   14d20:	bl	14a00 <__assert_fail@plt+0x3a78>
   14d24:	str	r4, [fp]
   14d28:	add	sp, sp, #12
   14d2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d30:	beq	14d18 <__assert_fail@plt+0x3d90>
   14d34:	cmp	r5, #0
   14d38:	movge	r1, r7
   14d3c:	mvnge	r0, #-2147483648	; 0x80000000
   14d40:	bge	14d68 <__assert_fail@plt+0x3de0>
   14d44:	cmn	r5, #1
   14d48:	beq	14d18 <__assert_fail@plt+0x3d90>
   14d4c:	mov	r1, r5
   14d50:	mov	r0, #-2147483648	; 0x80000000
   14d54:	bl	15a7c <__assert_fail@plt+0x4af4>
   14d58:	cmp	r7, r0
   14d5c:	movle	r0, #0
   14d60:	movgt	r0, #1
   14d64:	b	14cb4 <__assert_fail@plt+0x3d2c>
   14d68:	bl	15a7c <__assert_fail@plt+0x4af4>
   14d6c:	cmp	r5, r0
   14d70:	b	14d5c <__assert_fail@plt+0x3dd4>
   14d74:	cmp	r7, #0
   14d78:	mov	r4, r9
   14d7c:	blt	14c18 <__assert_fail@plt+0x3c90>
   14d80:	beq	14c28 <__assert_fail@plt+0x3ca0>
   14d84:	mov	r1, r7
   14d88:	mvn	r0, #-2147483648	; 0x80000000
   14d8c:	bl	15a7c <__assert_fail@plt+0x4af4>
   14d90:	cmp	r0, r4
   14d94:	movge	r0, #0
   14d98:	movlt	r0, #1
   14d9c:	b	14bd0 <__assert_fail@plt+0x3c48>
   14da0:	push	{r4, lr}
   14da4:	bl	153e0 <__assert_fail@plt+0x4458>
   14da8:	cmp	r0, #0
   14dac:	popne	{r4, pc}
   14db0:	bl	14e68 <__assert_fail@plt+0x3ee0>
   14db4:	mov	r1, #1
   14db8:	b	14da0 <__assert_fail@plt+0x3e18>
   14dbc:	push	{r4, lr}
   14dc0:	bl	153e0 <__assert_fail@plt+0x4458>
   14dc4:	cmp	r0, #0
   14dc8:	popne	{r4, pc}
   14dcc:	bl	14e68 <__assert_fail@plt+0x3ee0>
   14dd0:	mov	r1, #1
   14dd4:	b	14dbc <__assert_fail@plt+0x3e34>
   14dd8:	push	{r4, r5, r6, lr}
   14ddc:	mov	r4, r1
   14de0:	mov	r5, r0
   14de4:	mov	r0, r1
   14de8:	bl	149d4 <__assert_fail@plt+0x3a4c>
   14dec:	mov	r2, r4
   14df0:	mov	r1, r5
   14df4:	pop	{r4, r5, r6, lr}
   14df8:	b	10d54 <memcpy@plt>
   14dfc:	push	{r4, r5, r6, lr}
   14e00:	mov	r4, r1
   14e04:	mov	r5, r0
   14e08:	mov	r0, r1
   14e0c:	bl	149e8 <__assert_fail@plt+0x3a60>
   14e10:	mov	r2, r4
   14e14:	mov	r1, r5
   14e18:	pop	{r4, r5, r6, lr}
   14e1c:	b	10d54 <memcpy@plt>
   14e20:	push	{r4, r5, r6, lr}
   14e24:	mov	r5, r0
   14e28:	add	r0, r1, #1
   14e2c:	mov	r4, r1
   14e30:	bl	149e8 <__assert_fail@plt+0x3a60>
   14e34:	mov	r2, #0
   14e38:	mov	r1, r5
   14e3c:	strb	r2, [r0, r4]
   14e40:	mov	r2, r4
   14e44:	pop	{r4, r5, r6, lr}
   14e48:	b	10d54 <memcpy@plt>
   14e4c:	push	{r4, lr}
   14e50:	mov	r4, r0
   14e54:	bl	10e80 <strlen@plt>
   14e58:	add	r1, r0, #1
   14e5c:	mov	r0, r4
   14e60:	pop	{r4, lr}
   14e64:	b	14dd8 <__assert_fail@plt+0x3e50>
   14e68:	ldr	r3, [pc, #44]	; 14e9c <__assert_fail@plt+0x3f14>
   14e6c:	push	{r4, lr}
   14e70:	mov	r2, #5
   14e74:	ldr	r1, [pc, #36]	; 14ea0 <__assert_fail@plt+0x3f18>
   14e78:	mov	r0, #0
   14e7c:	ldr	r4, [r3]
   14e80:	bl	10d90 <dcgettext@plt>
   14e84:	ldr	r2, [pc, #24]	; 14ea4 <__assert_fail@plt+0x3f1c>
   14e88:	mov	r1, #0
   14e8c:	mov	r3, r0
   14e90:	mov	r0, r4
   14e94:	bl	10e14 <error@plt>
   14e98:	bl	10f70 <abort@plt>
   14e9c:	andeq	r7, r2, r0, lsl #2
   14ea0:	andeq	r6, r1, r1, asr #25
   14ea4:	andeq	r6, r1, r7, ror r7
   14ea8:	push	{r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
   14eac:	mov	r9, r3
   14eb0:	ldr	r3, [sp, #48]	; 0x30
   14eb4:	mov	r8, r2
   14eb8:	str	r3, [sp]
   14ebc:	mov	r2, r1
   14ec0:	add	r3, sp, #8
   14ec4:	mov	r1, #0
   14ec8:	mov	r6, r0
   14ecc:	ldr	r4, [sp, #56]	; 0x38
   14ed0:	bl	150b4 <__assert_fail@plt+0x412c>
   14ed4:	cmp	r0, #0
   14ed8:	bne	14f4c <__assert_fail@plt+0x3fc4>
   14edc:	ldrd	r0, [sp, #8]
   14ee0:	ldrd	r2, [sp, #40]	; 0x28
   14ee4:	cmp	r1, r9
   14ee8:	cmpeq	r0, r8
   14eec:	movcc	ip, #1
   14ef0:	movcs	ip, #0
   14ef4:	cmp	r1, r3
   14ef8:	cmpeq	r0, r2
   14efc:	movls	r3, ip
   14f00:	orrhi	r3, ip, #1
   14f04:	cmp	r3, #0
   14f08:	beq	14fc8 <__assert_fail@plt+0x4040>
   14f0c:	mov	r3, #0
   14f10:	mvn	r2, #-1073741824	; 0xc0000000
   14f14:	cmp	r1, r3
   14f18:	cmpeq	r0, r2
   14f1c:	bls	14f40 <__assert_fail@plt+0x3fb8>
   14f20:	bl	10ea4 <__errno_location@plt>
   14f24:	mov	r3, #75	; 0x4b
   14f28:	cmp	r4, #0
   14f2c:	str	r3, [r0]
   14f30:	beq	14f94 <__assert_fail@plt+0x400c>
   14f34:	bl	10ea4 <__errno_location@plt>
   14f38:	ldr	r5, [r0]
   14f3c:	b	14fa8 <__assert_fail@plt+0x4020>
   14f40:	bl	10ea4 <__errno_location@plt>
   14f44:	mov	r3, #34	; 0x22
   14f48:	b	14f28 <__assert_fail@plt+0x3fa0>
   14f4c:	cmp	r0, #1
   14f50:	bne	14f78 <__assert_fail@plt+0x3ff0>
   14f54:	bl	10ea4 <__errno_location@plt>
   14f58:	mov	r3, #75	; 0x4b
   14f5c:	cmp	r4, #0
   14f60:	str	r3, [r0]
   14f64:	bne	14f98 <__assert_fail@plt+0x4010>
   14f68:	bl	10ea4 <__errno_location@plt>
   14f6c:	mov	r4, #1
   14f70:	ldr	r5, [r0]
   14f74:	b	14fa8 <__assert_fail@plt+0x4020>
   14f78:	cmp	r0, #3
   14f7c:	bne	14f8c <__assert_fail@plt+0x4004>
   14f80:	bl	10ea4 <__errno_location@plt>
   14f84:	mov	r3, #0
   14f88:	b	14f5c <__assert_fail@plt+0x3fd4>
   14f8c:	cmp	r4, #0
   14f90:	bne	14f98 <__assert_fail@plt+0x4010>
   14f94:	mov	r4, #1
   14f98:	bl	10ea4 <__errno_location@plt>
   14f9c:	ldr	r5, [r0]
   14fa0:	cmp	r5, #22
   14fa4:	moveq	r5, #0
   14fa8:	mov	r0, r6
   14fac:	bl	14450 <__assert_fail@plt+0x34c8>
   14fb0:	ldr	r3, [sp, #52]	; 0x34
   14fb4:	ldr	r2, [pc, #20]	; 14fd0 <__assert_fail@plt+0x4048>
   14fb8:	mov	r1, r5
   14fbc:	str	r0, [sp]
   14fc0:	mov	r0, r4
   14fc4:	bl	10e14 <error@plt>
   14fc8:	add	sp, sp, #16
   14fcc:	pop	{r4, r5, r6, r8, r9, pc}
   14fd0:	andeq	r6, r1, r3, ror r7
   14fd4:	push	{r4, r5}
   14fd8:	mov	r1, #10
   14fdc:	pop	{r4, r5}
   14fe0:	b	14ea8 <__assert_fail@plt+0x3f20>
   14fe4:	push	{r4, r5, r6, lr}
   14fe8:	subs	r5, r1, #0
   14fec:	mov	r4, r0
   14ff0:	bge	15030 <__assert_fail@plt+0x40a8>
   14ff4:	ldm	r0, {r0, r3}
   14ff8:	orr	r0, r0, r3
   14ffc:	adds	r0, r0, #0
   15000:	movne	r0, #1
   15004:	cmp	r0, #0
   15008:	bne	15064 <__assert_fail@plt+0x40dc>
   1500c:	ldr	r2, [r4]
   15010:	asr	r3, r5, #31
   15014:	ldr	r1, [r4, #4]
   15018:	mul	r3, r3, r2
   1501c:	mla	r1, r5, r1, r3
   15020:	umull	r2, r3, r2, r5
   15024:	add	r3, r1, r3
   15028:	strd	r2, [r4]
   1502c:	pop	{r4, r5, r6, pc}
   15030:	moveq	r0, r5
   15034:	beq	15004 <__assert_fail@plt+0x407c>
   15038:	mov	r2, r5
   1503c:	asr	r3, r5, #31
   15040:	mvn	r0, #0
   15044:	mvn	r1, #0
   15048:	bl	15d90 <__assert_fail@plt+0x4e08>
   1504c:	ldrd	r2, [r4]
   15050:	cmp	r1, r3
   15054:	cmpeq	r0, r2
   15058:	movcc	r0, #1
   1505c:	movcs	r0, #0
   15060:	b	15004 <__assert_fail@plt+0x407c>
   15064:	mvn	r2, #0
   15068:	mvn	r3, #0
   1506c:	mov	r0, #1
   15070:	strd	r2, [r4]
   15074:	pop	{r4, r5, r6, pc}
   15078:	push	{r4, r5, r6, r7, r8, lr}
   1507c:	mov	r6, r0
   15080:	mov	r7, r1
   15084:	mov	r5, r2
   15088:	mov	r4, #0
   1508c:	cmp	r5, #0
   15090:	bne	1509c <__assert_fail@plt+0x4114>
   15094:	mov	r0, r4
   15098:	pop	{r4, r5, r6, r7, r8, pc}
   1509c:	mov	r1, r7
   150a0:	mov	r0, r6
   150a4:	bl	14fe4 <__assert_fail@plt+0x405c>
   150a8:	sub	r5, r5, #1
   150ac:	orr	r4, r4, r0
   150b0:	b	1508c <__assert_fail@plt+0x4104>
   150b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150b8:	sub	sp, sp, #20
   150bc:	cmp	r2, #36	; 0x24
   150c0:	ldr	r9, [sp, #56]	; 0x38
   150c4:	bls	150dc <__assert_fail@plt+0x4154>
   150c8:	ldr	r3, [pc, #772]	; 153d4 <__assert_fail@plt+0x444c>
   150cc:	mov	r2, #85	; 0x55
   150d0:	ldr	r1, [pc, #768]	; 153d8 <__assert_fail@plt+0x4450>
   150d4:	ldr	r0, [pc, #768]	; 153dc <__assert_fail@plt+0x4454>
   150d8:	bl	10f88 <__assert_fail@plt>
   150dc:	cmp	r1, #0
   150e0:	mov	r7, r1
   150e4:	mov	r4, r0
   150e8:	mov	fp, r2
   150ec:	mov	r8, r3
   150f0:	addeq	r7, sp, #4
   150f4:	bl	10ea4 <__errno_location@plt>
   150f8:	mov	r3, #0
   150fc:	str	r3, [r0]
   15100:	mov	sl, r0
   15104:	bl	10e68 <__ctype_b_loc@plt>
   15108:	ldrb	r6, [r4]
   1510c:	mov	r3, r4
   15110:	ldr	r1, [r0]
   15114:	lsl	r2, r6, #1
   15118:	ldrh	r5, [r1, r2]
   1511c:	ands	r5, r5, #8192	; 0x2000
   15120:	bne	1513c <__assert_fail@plt+0x41b4>
   15124:	cmp	r6, #45	; 0x2d
   15128:	bne	15144 <__assert_fail@plt+0x41bc>
   1512c:	mov	r5, #4
   15130:	mov	r0, r5
   15134:	add	sp, sp, #20
   15138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1513c:	ldrb	r6, [r3, #1]!
   15140:	b	15114 <__assert_fail@plt+0x418c>
   15144:	mov	r2, fp
   15148:	mov	r1, r7
   1514c:	mov	r0, r4
   15150:	bl	10ee0 <strtoumax@plt>
   15154:	ldr	r6, [r7]
   15158:	cmp	r4, r6
   1515c:	strd	r0, [sp, #8]
   15160:	bne	151c4 <__assert_fail@plt+0x423c>
   15164:	cmp	r9, #0
   15168:	beq	1512c <__assert_fail@plt+0x41a4>
   1516c:	ldrb	r1, [r6]
   15170:	cmp	r1, #0
   15174:	beq	1512c <__assert_fail@plt+0x41a4>
   15178:	mov	r0, r9
   1517c:	bl	10e8c <strchr@plt>
   15180:	cmp	r0, #0
   15184:	beq	1512c <__assert_fail@plt+0x41a4>
   15188:	mov	r2, #1
   1518c:	mov	r3, #0
   15190:	strd	r2, [sp, #8]
   15194:	ldrb	r4, [r6]
   15198:	cmp	r4, #0
   1519c:	beq	152d4 <__assert_fail@plt+0x434c>
   151a0:	mov	r1, r4
   151a4:	mov	r0, r9
   151a8:	bl	10e8c <strchr@plt>
   151ac:	cmp	r0, #0
   151b0:	bne	151ec <__assert_fail@plt+0x4264>
   151b4:	ldrd	r2, [sp, #8]
   151b8:	orr	r5, r5, #2
   151bc:	strd	r2, [r8]
   151c0:	b	15130 <__assert_fail@plt+0x41a8>
   151c4:	ldr	r5, [sl]
   151c8:	cmp	r5, #0
   151cc:	beq	151dc <__assert_fail@plt+0x4254>
   151d0:	cmp	r5, #34	; 0x22
   151d4:	bne	1512c <__assert_fail@plt+0x41a4>
   151d8:	mov	r5, #1
   151dc:	cmp	r9, #0
   151e0:	bne	15194 <__assert_fail@plt+0x420c>
   151e4:	strd	r0, [r8]
   151e8:	b	15130 <__assert_fail@plt+0x41a8>
   151ec:	cmp	r4, #84	; 0x54
   151f0:	beq	15244 <__assert_fail@plt+0x42bc>
   151f4:	bhi	1522c <__assert_fail@plt+0x42a4>
   151f8:	cmp	r4, #75	; 0x4b
   151fc:	beq	15244 <__assert_fail@plt+0x42bc>
   15200:	bhi	1521c <__assert_fail@plt+0x4294>
   15204:	cmp	r4, #69	; 0x45
   15208:	beq	15244 <__assert_fail@plt+0x42bc>
   1520c:	cmp	r4, #71	; 0x47
   15210:	beq	15244 <__assert_fail@plt+0x42bc>
   15214:	mov	r6, #1
   15218:	b	15308 <__assert_fail@plt+0x4380>
   1521c:	cmp	r4, #77	; 0x4d
   15220:	beq	15244 <__assert_fail@plt+0x42bc>
   15224:	cmp	r4, #80	; 0x50
   15228:	b	15210 <__assert_fail@plt+0x4288>
   1522c:	cmp	r4, #103	; 0x67
   15230:	beq	15244 <__assert_fail@plt+0x42bc>
   15234:	bhi	152e0 <__assert_fail@plt+0x4358>
   15238:	sub	r3, r4, #89	; 0x59
   1523c:	cmp	r3, #1
   15240:	bhi	15214 <__assert_fail@plt+0x428c>
   15244:	mov	r1, #48	; 0x30
   15248:	mov	r0, r9
   1524c:	bl	10e8c <strchr@plt>
   15250:	cmp	r0, #0
   15254:	beq	15214 <__assert_fail@plt+0x428c>
   15258:	ldrb	r3, [r6, #1]
   1525c:	cmp	r3, #68	; 0x44
   15260:	beq	15274 <__assert_fail@plt+0x42ec>
   15264:	cmp	r3, #105	; 0x69
   15268:	beq	152f8 <__assert_fail@plt+0x4370>
   1526c:	cmp	r3, #66	; 0x42
   15270:	bne	15214 <__assert_fail@plt+0x428c>
   15274:	mov	r6, #2
   15278:	mov	r1, #1000	; 0x3e8
   1527c:	cmp	r4, #89	; 0x59
   15280:	beq	153bc <__assert_fail@plt+0x4434>
   15284:	bhi	15330 <__assert_fail@plt+0x43a8>
   15288:	cmp	r4, #75	; 0x4b
   1528c:	beq	15370 <__assert_fail@plt+0x43e8>
   15290:	bhi	15310 <__assert_fail@plt+0x4388>
   15294:	cmp	r4, #69	; 0x45
   15298:	beq	15398 <__assert_fail@plt+0x4410>
   1529c:	cmp	r4, #71	; 0x47
   152a0:	beq	153a4 <__assert_fail@plt+0x441c>
   152a4:	cmp	r4, #66	; 0x42
   152a8:	moveq	r1, #1024	; 0x400
   152ac:	bne	151b4 <__assert_fail@plt+0x422c>
   152b0:	add	r0, sp, #8
   152b4:	bl	14fe4 <__assert_fail@plt+0x405c>
   152b8:	ldr	r3, [r7]
   152bc:	orr	r5, r5, r0
   152c0:	add	r2, r3, r6
   152c4:	str	r2, [r7]
   152c8:	ldrb	r3, [r3, r6]
   152cc:	cmp	r3, #0
   152d0:	orrne	r5, r5, #2
   152d4:	ldrd	r2, [sp, #8]
   152d8:	strd	r2, [r8]
   152dc:	b	15130 <__assert_fail@plt+0x41a8>
   152e0:	cmp	r4, #109	; 0x6d
   152e4:	beq	15244 <__assert_fail@plt+0x42bc>
   152e8:	cmp	r4, #116	; 0x74
   152ec:	beq	15244 <__assert_fail@plt+0x42bc>
   152f0:	cmp	r4, #107	; 0x6b
   152f4:	b	15210 <__assert_fail@plt+0x4288>
   152f8:	ldrb	r6, [r6, #2]
   152fc:	cmp	r6, #66	; 0x42
   15300:	movne	r6, #1
   15304:	moveq	r6, #3
   15308:	mov	r1, #1024	; 0x400
   1530c:	b	1527c <__assert_fail@plt+0x42f4>
   15310:	cmp	r4, #80	; 0x50
   15314:	beq	153ac <__assert_fail@plt+0x4424>
   15318:	cmp	r4, #84	; 0x54
   1531c:	beq	153b4 <__assert_fail@plt+0x442c>
   15320:	cmp	r4, #77	; 0x4d
   15324:	bne	151b4 <__assert_fail@plt+0x422c>
   15328:	mov	r2, #2
   1532c:	b	1539c <__assert_fail@plt+0x4414>
   15330:	cmp	r4, #103	; 0x67
   15334:	beq	153a4 <__assert_fail@plt+0x441c>
   15338:	bhi	1535c <__assert_fail@plt+0x43d4>
   1533c:	cmp	r4, #98	; 0x62
   15340:	beq	15390 <__assert_fail@plt+0x4408>
   15344:	cmp	r4, #99	; 0x63
   15348:	beq	153cc <__assert_fail@plt+0x4444>
   1534c:	cmp	r4, #90	; 0x5a
   15350:	bne	151b4 <__assert_fail@plt+0x422c>
   15354:	mov	r2, #7
   15358:	b	1539c <__assert_fail@plt+0x4414>
   1535c:	cmp	r4, #109	; 0x6d
   15360:	beq	15328 <__assert_fail@plt+0x43a0>
   15364:	bhi	15378 <__assert_fail@plt+0x43f0>
   15368:	cmp	r4, #107	; 0x6b
   1536c:	bne	151b4 <__assert_fail@plt+0x422c>
   15370:	mov	r2, #1
   15374:	b	1539c <__assert_fail@plt+0x4414>
   15378:	cmp	r4, #116	; 0x74
   1537c:	beq	153b4 <__assert_fail@plt+0x442c>
   15380:	cmp	r4, #119	; 0x77
   15384:	moveq	r1, #2
   15388:	beq	152b0 <__assert_fail@plt+0x4328>
   1538c:	b	151b4 <__assert_fail@plt+0x422c>
   15390:	mov	r1, #512	; 0x200
   15394:	b	152b0 <__assert_fail@plt+0x4328>
   15398:	mov	r2, #6
   1539c:	add	r0, sp, #8
   153a0:	b	153c4 <__assert_fail@plt+0x443c>
   153a4:	mov	r2, #3
   153a8:	b	1539c <__assert_fail@plt+0x4414>
   153ac:	mov	r2, #5
   153b0:	b	1539c <__assert_fail@plt+0x4414>
   153b4:	mov	r2, #4
   153b8:	b	1539c <__assert_fail@plt+0x4414>
   153bc:	mov	r2, #8
   153c0:	add	r0, sp, r2
   153c4:	bl	15078 <__assert_fail@plt+0x40f0>
   153c8:	b	152b8 <__assert_fail@plt+0x4330>
   153cc:	mov	r0, #0
   153d0:	b	152b8 <__assert_fail@plt+0x4330>
   153d4:	ldrdeq	r6, [r1], -r2
   153d8:	ldrdeq	r6, [r1], -sp
   153dc:	andeq	r6, r1, fp, ror #25
   153e0:	cmp	r1, #0
   153e4:	cmpne	r0, #0
   153e8:	moveq	r1, #1
   153ec:	moveq	r0, r1
   153f0:	umull	r2, r3, r0, r1
   153f4:	adds	r3, r3, #0
   153f8:	movne	r3, #1
   153fc:	cmp	r2, #0
   15400:	blt	15410 <__assert_fail@plt+0x4488>
   15404:	cmp	r3, #0
   15408:	bne	15410 <__assert_fail@plt+0x4488>
   1540c:	b	10cf4 <calloc@plt>
   15410:	push	{r4, lr}
   15414:	bl	10ea4 <__errno_location@plt>
   15418:	mov	r3, #12
   1541c:	str	r3, [r0]
   15420:	mov	r0, #0
   15424:	pop	{r4, pc}
   15428:	cmp	r0, #0
   1542c:	mov	r3, #0
   15430:	moveq	r0, #1
   15434:	adds	r3, r3, #0
   15438:	movne	r3, #1
   1543c:	cmp	r0, #0
   15440:	blt	15450 <__assert_fail@plt+0x44c8>
   15444:	cmp	r3, #0
   15448:	bne	15450 <__assert_fail@plt+0x44c8>
   1544c:	b	10e2c <malloc@plt>
   15450:	push	{r4, lr}
   15454:	bl	10ea4 <__errno_location@plt>
   15458:	mov	r3, #12
   1545c:	str	r3, [r0]
   15460:	mov	r0, #0
   15464:	pop	{r4, pc}
   15468:	cmp	r0, #0
   1546c:	push	{r4, lr}
   15470:	mov	r4, r1
   15474:	bne	15484 <__assert_fail@plt+0x44fc>
   15478:	mov	r0, r1
   1547c:	pop	{r4, lr}
   15480:	b	15428 <__assert_fail@plt+0x44a0>
   15484:	cmp	r1, #0
   15488:	bne	15498 <__assert_fail@plt+0x4510>
   1548c:	bl	12c34 <__assert_fail@plt+0x1cac>
   15490:	mov	r0, #0
   15494:	pop	{r4, pc}
   15498:	cmp	r1, #0
   1549c:	blt	154ac <__assert_fail@plt+0x4524>
   154a0:	mov	r3, #0
   154a4:	cmp	r3, r3
   154a8:	beq	154bc <__assert_fail@plt+0x4534>
   154ac:	bl	10ea4 <__errno_location@plt>
   154b0:	mov	r3, #12
   154b4:	str	r3, [r0]
   154b8:	b	15490 <__assert_fail@plt+0x4508>
   154bc:	pop	{r4, lr}
   154c0:	b	10d9c <realloc@plt>
   154c4:	push	{r4, r5, r6, lr}
   154c8:	mov	r4, r0
   154cc:	bl	10df0 <__fpending@plt>
   154d0:	mov	r5, r0
   154d4:	mov	r0, r4
   154d8:	bl	10dfc <ferror_unlocked@plt>
   154dc:	mov	r6, r0
   154e0:	mov	r0, r4
   154e4:	bl	15534 <__assert_fail@plt+0x45ac>
   154e8:	cmp	r6, #0
   154ec:	mov	r4, r0
   154f0:	bne	1551c <__assert_fail@plt+0x4594>
   154f4:	cmp	r0, #0
   154f8:	beq	15514 <__assert_fail@plt+0x458c>
   154fc:	cmp	r5, #0
   15500:	bne	1552c <__assert_fail@plt+0x45a4>
   15504:	bl	10ea4 <__errno_location@plt>
   15508:	ldr	r4, [r0]
   1550c:	subs	r4, r4, #9
   15510:	mvnne	r4, #0
   15514:	mov	r0, r4
   15518:	pop	{r4, r5, r6, pc}
   1551c:	cmp	r0, #0
   15520:	bne	1552c <__assert_fail@plt+0x45a4>
   15524:	bl	10ea4 <__errno_location@plt>
   15528:	str	r4, [r0]
   1552c:	mvn	r4, #0
   15530:	b	15514 <__assert_fail@plt+0x458c>
   15534:	push	{r0, r1, r2, r4, r5, lr}
   15538:	mov	r4, r0
   1553c:	bl	10ed4 <fileno@plt>
   15540:	cmp	r0, #0
   15544:	mov	r0, r4
   15548:	bge	15558 <__assert_fail@plt+0x45d0>
   1554c:	add	sp, sp, #12
   15550:	pop	{r4, r5, lr}
   15554:	b	10f04 <fclose@plt>
   15558:	bl	10e44 <__freading@plt>
   1555c:	cmp	r0, #0
   15560:	bne	1559c <__assert_fail@plt+0x4614>
   15564:	mov	r0, r4
   15568:	bl	155dc <__assert_fail@plt+0x4654>
   1556c:	cmp	r0, #0
   15570:	bne	155d0 <__assert_fail@plt+0x4648>
   15574:	mov	r5, #0
   15578:	mov	r0, r4
   1557c:	bl	10f04 <fclose@plt>
   15580:	cmp	r5, #0
   15584:	beq	15594 <__assert_fail@plt+0x460c>
   15588:	bl	10ea4 <__errno_location@plt>
   1558c:	str	r5, [r0]
   15590:	mvn	r0, #0
   15594:	add	sp, sp, #12
   15598:	pop	{r4, r5, pc}
   1559c:	mov	r0, r4
   155a0:	bl	10ed4 <fileno@plt>
   155a4:	mov	r3, #1
   155a8:	str	r3, [sp]
   155ac:	mov	r2, #0
   155b0:	mov	r3, #0
   155b4:	bl	10dd8 <lseek64@plt>
   155b8:	mvn	r3, #0
   155bc:	mvn	r2, #0
   155c0:	cmp	r1, r3
   155c4:	cmpeq	r0, r2
   155c8:	bne	15564 <__assert_fail@plt+0x45dc>
   155cc:	b	15574 <__assert_fail@plt+0x45ec>
   155d0:	bl	10ea4 <__errno_location@plt>
   155d4:	ldr	r5, [r0]
   155d8:	b	15578 <__assert_fail@plt+0x45f0>
   155dc:	push	{r0, r1, r4, lr}
   155e0:	subs	r4, r0, #0
   155e4:	bne	155f8 <__assert_fail@plt+0x4670>
   155e8:	mov	r0, r4
   155ec:	add	sp, sp, #8
   155f0:	pop	{r4, lr}
   155f4:	b	10d30 <fflush@plt>
   155f8:	bl	10e44 <__freading@plt>
   155fc:	cmp	r0, #0
   15600:	beq	155e8 <__assert_fail@plt+0x4660>
   15604:	ldr	r3, [r4]
   15608:	tst	r3, #256	; 0x100
   1560c:	beq	155e8 <__assert_fail@plt+0x4660>
   15610:	mov	r3, #1
   15614:	str	r3, [sp]
   15618:	mov	r2, #0
   1561c:	mov	r3, #0
   15620:	mov	r0, r4
   15624:	bl	1562c <__assert_fail@plt+0x46a4>
   15628:	b	155e8 <__assert_fail@plt+0x4660>
   1562c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   15630:	mov	r4, r0
   15634:	ldmib	r0, {ip, lr}
   15638:	ldr	r8, [sp, #32]
   1563c:	cmp	lr, ip
   15640:	bne	156ac <__assert_fail@plt+0x4724>
   15644:	ldr	lr, [r0, #20]
   15648:	ldr	ip, [r0, #16]
   1564c:	cmp	lr, ip
   15650:	bne	156ac <__assert_fail@plt+0x4724>
   15654:	ldr	r5, [r0, #36]	; 0x24
   15658:	cmp	r5, #0
   1565c:	bne	156ac <__assert_fail@plt+0x4724>
   15660:	mov	r6, r2
   15664:	mov	r7, r3
   15668:	bl	10ed4 <fileno@plt>
   1566c:	mov	r2, r6
   15670:	mov	r3, r7
   15674:	str	r8, [sp]
   15678:	bl	10dd8 <lseek64@plt>
   1567c:	mvn	r3, #0
   15680:	mvn	r2, #0
   15684:	cmp	r1, r3
   15688:	cmpeq	r0, r2
   1568c:	mvneq	r0, #0
   15690:	ldrne	r3, [r4]
   15694:	strdne	r0, [r4, #80]	; 0x50
   15698:	movne	r0, r5
   1569c:	bicne	r3, r3, #16
   156a0:	strne	r3, [r4]
   156a4:	add	sp, sp, #8
   156a8:	pop	{r4, r5, r6, r7, r8, pc}
   156ac:	str	r8, [sp, #32]
   156b0:	mov	r0, r4
   156b4:	add	sp, sp, #8
   156b8:	pop	{r4, r5, r6, r7, r8, lr}
   156bc:	b	10f10 <fseeko64@plt>
   156c0:	push	{r4, lr}
   156c4:	mov	r0, #14
   156c8:	bl	10f34 <nl_langinfo@plt>
   156cc:	ldr	r3, [pc, #24]	; 156ec <__assert_fail@plt+0x4764>
   156d0:	cmp	r0, #0
   156d4:	moveq	r0, r3
   156d8:	ldr	r3, [pc, #16]	; 156f0 <__assert_fail@plt+0x4768>
   156dc:	ldrb	r2, [r0]
   156e0:	cmp	r2, #0
   156e4:	moveq	r0, r3
   156e8:	pop	{r4, pc}
   156ec:	andeq	r6, r1, sp, lsl #14
   156f0:	andeq	r6, r1, r1, lsl sp
   156f4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   156f8:	subs	r5, r0, #0
   156fc:	addeq	r5, sp, #4
   15700:	mov	r0, r5
   15704:	mov	r7, r2
   15708:	mov	r6, r1
   1570c:	bl	10e08 <mbrtowc@plt>
   15710:	cmp	r7, #0
   15714:	cmnne	r0, #3
   15718:	mov	r4, r0
   1571c:	bls	15738 <__assert_fail@plt+0x47b0>
   15720:	mov	r0, #0
   15724:	bl	15790 <__assert_fail@plt+0x4808>
   15728:	cmp	r0, #0
   1572c:	moveq	r4, #1
   15730:	ldrbeq	r3, [r6]
   15734:	streq	r3, [r5]
   15738:	mov	r0, r4
   1573c:	add	sp, sp, #12
   15740:	pop	{r4, r5, r6, r7, pc}
   15744:	push	{r4, r5, r6, lr}
   15748:	subs	r4, r2, #0
   1574c:	mov	r6, r0
   15750:	mov	r5, r1
   15754:	beq	1576c <__assert_fail@plt+0x47e4>
   15758:	mov	r1, r4
   1575c:	mvn	r0, #0
   15760:	bl	15870 <__assert_fail@plt+0x48e8>
   15764:	cmp	r0, r5
   15768:	bcc	1577c <__assert_fail@plt+0x47f4>
   1576c:	mul	r1, r5, r4
   15770:	mov	r0, r6
   15774:	pop	{r4, r5, r6, lr}
   15778:	b	15468 <__assert_fail@plt+0x44e0>
   1577c:	bl	10ea4 <__errno_location@plt>
   15780:	mov	r3, #12
   15784:	str	r3, [r0]
   15788:	mov	r0, #0
   1578c:	pop	{r4, r5, r6, pc}
   15790:	push	{lr}		; (str lr, [sp, #-4]!)
   15794:	sub	sp, sp, #268	; 0x10c
   15798:	ldr	r2, [pc, #64]	; 157e0 <__assert_fail@plt+0x4858>
   1579c:	add	r1, sp, #4
   157a0:	bl	157ec <__assert_fail@plt+0x4864>
   157a4:	cmp	r0, #0
   157a8:	movne	r0, #0
   157ac:	bne	157d8 <__assert_fail@plt+0x4850>
   157b0:	ldr	r1, [pc, #44]	; 157e4 <__assert_fail@plt+0x485c>
   157b4:	add	r0, sp, #4
   157b8:	bl	10d18 <strcmp@plt>
   157bc:	cmp	r0, #0
   157c0:	beq	157d8 <__assert_fail@plt+0x4850>
   157c4:	ldr	r1, [pc, #28]	; 157e8 <__assert_fail@plt+0x4860>
   157c8:	add	r0, sp, #4
   157cc:	bl	10d18 <strcmp@plt>
   157d0:	adds	r0, r0, #0
   157d4:	movne	r0, #1
   157d8:	add	sp, sp, #268	; 0x10c
   157dc:	pop	{pc}		; (ldr pc, [sp], #4)
   157e0:	andeq	r0, r0, r1, lsl #2
   157e4:	andeq	r6, r1, r7, lsl sp
   157e8:	andeq	r6, r1, r9, lsl sp
   157ec:	push	{r4, r5, r6, lr}
   157f0:	mov	r5, r1
   157f4:	mov	r1, #0
   157f8:	mov	r4, r2
   157fc:	bl	10f1c <setlocale@plt>
   15800:	subs	r6, r0, #0
   15804:	bne	15818 <__assert_fail@plt+0x4890>
   15808:	cmp	r4, #0
   1580c:	strbne	r6, [r5]
   15810:	mov	r0, #22
   15814:	pop	{r4, r5, r6, pc}
   15818:	bl	10e80 <strlen@plt>
   1581c:	cmp	r4, r0
   15820:	bls	1583c <__assert_fail@plt+0x48b4>
   15824:	add	r2, r0, #1
   15828:	mov	r1, r6
   1582c:	mov	r0, r5
   15830:	bl	10d54 <memcpy@plt>
   15834:	mov	r0, #0
   15838:	pop	{r4, r5, r6, pc}
   1583c:	cmp	r4, #0
   15840:	beq	15860 <__assert_fail@plt+0x48d8>
   15844:	sub	r4, r4, #1
   15848:	mov	r2, r4
   1584c:	mov	r1, r6
   15850:	mov	r0, r5
   15854:	bl	10d54 <memcpy@plt>
   15858:	mov	r3, #0
   1585c:	strb	r3, [r5, r4]
   15860:	mov	r0, #34	; 0x22
   15864:	pop	{r4, r5, r6, pc}
   15868:	mov	r1, #0
   1586c:	b	10f1c <setlocale@plt>
   15870:	subs	r2, r1, #1
   15874:	bxeq	lr
   15878:	bcc	15a50 <__assert_fail@plt+0x4ac8>
   1587c:	cmp	r0, r1
   15880:	bls	15a34 <__assert_fail@plt+0x4aac>
   15884:	tst	r1, r2
   15888:	beq	15a40 <__assert_fail@plt+0x4ab8>
   1588c:	clz	r3, r0
   15890:	clz	r2, r1
   15894:	sub	r3, r2, r3
   15898:	rsbs	r3, r3, #31
   1589c:	addne	r3, r3, r3, lsl #1
   158a0:	mov	r2, #0
   158a4:	addne	pc, pc, r3, lsl #2
   158a8:	nop			; (mov r0, r0)
   158ac:	cmp	r0, r1, lsl #31
   158b0:	adc	r2, r2, r2
   158b4:	subcs	r0, r0, r1, lsl #31
   158b8:	cmp	r0, r1, lsl #30
   158bc:	adc	r2, r2, r2
   158c0:	subcs	r0, r0, r1, lsl #30
   158c4:	cmp	r0, r1, lsl #29
   158c8:	adc	r2, r2, r2
   158cc:	subcs	r0, r0, r1, lsl #29
   158d0:	cmp	r0, r1, lsl #28
   158d4:	adc	r2, r2, r2
   158d8:	subcs	r0, r0, r1, lsl #28
   158dc:	cmp	r0, r1, lsl #27
   158e0:	adc	r2, r2, r2
   158e4:	subcs	r0, r0, r1, lsl #27
   158e8:	cmp	r0, r1, lsl #26
   158ec:	adc	r2, r2, r2
   158f0:	subcs	r0, r0, r1, lsl #26
   158f4:	cmp	r0, r1, lsl #25
   158f8:	adc	r2, r2, r2
   158fc:	subcs	r0, r0, r1, lsl #25
   15900:	cmp	r0, r1, lsl #24
   15904:	adc	r2, r2, r2
   15908:	subcs	r0, r0, r1, lsl #24
   1590c:	cmp	r0, r1, lsl #23
   15910:	adc	r2, r2, r2
   15914:	subcs	r0, r0, r1, lsl #23
   15918:	cmp	r0, r1, lsl #22
   1591c:	adc	r2, r2, r2
   15920:	subcs	r0, r0, r1, lsl #22
   15924:	cmp	r0, r1, lsl #21
   15928:	adc	r2, r2, r2
   1592c:	subcs	r0, r0, r1, lsl #21
   15930:	cmp	r0, r1, lsl #20
   15934:	adc	r2, r2, r2
   15938:	subcs	r0, r0, r1, lsl #20
   1593c:	cmp	r0, r1, lsl #19
   15940:	adc	r2, r2, r2
   15944:	subcs	r0, r0, r1, lsl #19
   15948:	cmp	r0, r1, lsl #18
   1594c:	adc	r2, r2, r2
   15950:	subcs	r0, r0, r1, lsl #18
   15954:	cmp	r0, r1, lsl #17
   15958:	adc	r2, r2, r2
   1595c:	subcs	r0, r0, r1, lsl #17
   15960:	cmp	r0, r1, lsl #16
   15964:	adc	r2, r2, r2
   15968:	subcs	r0, r0, r1, lsl #16
   1596c:	cmp	r0, r1, lsl #15
   15970:	adc	r2, r2, r2
   15974:	subcs	r0, r0, r1, lsl #15
   15978:	cmp	r0, r1, lsl #14
   1597c:	adc	r2, r2, r2
   15980:	subcs	r0, r0, r1, lsl #14
   15984:	cmp	r0, r1, lsl #13
   15988:	adc	r2, r2, r2
   1598c:	subcs	r0, r0, r1, lsl #13
   15990:	cmp	r0, r1, lsl #12
   15994:	adc	r2, r2, r2
   15998:	subcs	r0, r0, r1, lsl #12
   1599c:	cmp	r0, r1, lsl #11
   159a0:	adc	r2, r2, r2
   159a4:	subcs	r0, r0, r1, lsl #11
   159a8:	cmp	r0, r1, lsl #10
   159ac:	adc	r2, r2, r2
   159b0:	subcs	r0, r0, r1, lsl #10
   159b4:	cmp	r0, r1, lsl #9
   159b8:	adc	r2, r2, r2
   159bc:	subcs	r0, r0, r1, lsl #9
   159c0:	cmp	r0, r1, lsl #8
   159c4:	adc	r2, r2, r2
   159c8:	subcs	r0, r0, r1, lsl #8
   159cc:	cmp	r0, r1, lsl #7
   159d0:	adc	r2, r2, r2
   159d4:	subcs	r0, r0, r1, lsl #7
   159d8:	cmp	r0, r1, lsl #6
   159dc:	adc	r2, r2, r2
   159e0:	subcs	r0, r0, r1, lsl #6
   159e4:	cmp	r0, r1, lsl #5
   159e8:	adc	r2, r2, r2
   159ec:	subcs	r0, r0, r1, lsl #5
   159f0:	cmp	r0, r1, lsl #4
   159f4:	adc	r2, r2, r2
   159f8:	subcs	r0, r0, r1, lsl #4
   159fc:	cmp	r0, r1, lsl #3
   15a00:	adc	r2, r2, r2
   15a04:	subcs	r0, r0, r1, lsl #3
   15a08:	cmp	r0, r1, lsl #2
   15a0c:	adc	r2, r2, r2
   15a10:	subcs	r0, r0, r1, lsl #2
   15a14:	cmp	r0, r1, lsl #1
   15a18:	adc	r2, r2, r2
   15a1c:	subcs	r0, r0, r1, lsl #1
   15a20:	cmp	r0, r1
   15a24:	adc	r2, r2, r2
   15a28:	subcs	r0, r0, r1
   15a2c:	mov	r0, r2
   15a30:	bx	lr
   15a34:	moveq	r0, #1
   15a38:	movne	r0, #0
   15a3c:	bx	lr
   15a40:	clz	r2, r1
   15a44:	rsb	r2, r2, #31
   15a48:	lsr	r0, r0, r2
   15a4c:	bx	lr
   15a50:	cmp	r0, #0
   15a54:	mvnne	r0, #0
   15a58:	b	15dcc <__assert_fail@plt+0x4e44>
   15a5c:	cmp	r1, #0
   15a60:	beq	15a50 <__assert_fail@plt+0x4ac8>
   15a64:	push	{r0, r1, lr}
   15a68:	bl	15870 <__assert_fail@plt+0x48e8>
   15a6c:	pop	{r1, r2, lr}
   15a70:	mul	r3, r2, r0
   15a74:	sub	r1, r1, r3
   15a78:	bx	lr
   15a7c:	cmp	r1, #0
   15a80:	beq	15c8c <__assert_fail@plt+0x4d04>
   15a84:	eor	ip, r0, r1
   15a88:	rsbmi	r1, r1, #0
   15a8c:	subs	r2, r1, #1
   15a90:	beq	15c58 <__assert_fail@plt+0x4cd0>
   15a94:	movs	r3, r0
   15a98:	rsbmi	r3, r0, #0
   15a9c:	cmp	r3, r1
   15aa0:	bls	15c64 <__assert_fail@plt+0x4cdc>
   15aa4:	tst	r1, r2
   15aa8:	beq	15c74 <__assert_fail@plt+0x4cec>
   15aac:	clz	r2, r3
   15ab0:	clz	r0, r1
   15ab4:	sub	r2, r0, r2
   15ab8:	rsbs	r2, r2, #31
   15abc:	addne	r2, r2, r2, lsl #1
   15ac0:	mov	r0, #0
   15ac4:	addne	pc, pc, r2, lsl #2
   15ac8:	nop			; (mov r0, r0)
   15acc:	cmp	r3, r1, lsl #31
   15ad0:	adc	r0, r0, r0
   15ad4:	subcs	r3, r3, r1, lsl #31
   15ad8:	cmp	r3, r1, lsl #30
   15adc:	adc	r0, r0, r0
   15ae0:	subcs	r3, r3, r1, lsl #30
   15ae4:	cmp	r3, r1, lsl #29
   15ae8:	adc	r0, r0, r0
   15aec:	subcs	r3, r3, r1, lsl #29
   15af0:	cmp	r3, r1, lsl #28
   15af4:	adc	r0, r0, r0
   15af8:	subcs	r3, r3, r1, lsl #28
   15afc:	cmp	r3, r1, lsl #27
   15b00:	adc	r0, r0, r0
   15b04:	subcs	r3, r3, r1, lsl #27
   15b08:	cmp	r3, r1, lsl #26
   15b0c:	adc	r0, r0, r0
   15b10:	subcs	r3, r3, r1, lsl #26
   15b14:	cmp	r3, r1, lsl #25
   15b18:	adc	r0, r0, r0
   15b1c:	subcs	r3, r3, r1, lsl #25
   15b20:	cmp	r3, r1, lsl #24
   15b24:	adc	r0, r0, r0
   15b28:	subcs	r3, r3, r1, lsl #24
   15b2c:	cmp	r3, r1, lsl #23
   15b30:	adc	r0, r0, r0
   15b34:	subcs	r3, r3, r1, lsl #23
   15b38:	cmp	r3, r1, lsl #22
   15b3c:	adc	r0, r0, r0
   15b40:	subcs	r3, r3, r1, lsl #22
   15b44:	cmp	r3, r1, lsl #21
   15b48:	adc	r0, r0, r0
   15b4c:	subcs	r3, r3, r1, lsl #21
   15b50:	cmp	r3, r1, lsl #20
   15b54:	adc	r0, r0, r0
   15b58:	subcs	r3, r3, r1, lsl #20
   15b5c:	cmp	r3, r1, lsl #19
   15b60:	adc	r0, r0, r0
   15b64:	subcs	r3, r3, r1, lsl #19
   15b68:	cmp	r3, r1, lsl #18
   15b6c:	adc	r0, r0, r0
   15b70:	subcs	r3, r3, r1, lsl #18
   15b74:	cmp	r3, r1, lsl #17
   15b78:	adc	r0, r0, r0
   15b7c:	subcs	r3, r3, r1, lsl #17
   15b80:	cmp	r3, r1, lsl #16
   15b84:	adc	r0, r0, r0
   15b88:	subcs	r3, r3, r1, lsl #16
   15b8c:	cmp	r3, r1, lsl #15
   15b90:	adc	r0, r0, r0
   15b94:	subcs	r3, r3, r1, lsl #15
   15b98:	cmp	r3, r1, lsl #14
   15b9c:	adc	r0, r0, r0
   15ba0:	subcs	r3, r3, r1, lsl #14
   15ba4:	cmp	r3, r1, lsl #13
   15ba8:	adc	r0, r0, r0
   15bac:	subcs	r3, r3, r1, lsl #13
   15bb0:	cmp	r3, r1, lsl #12
   15bb4:	adc	r0, r0, r0
   15bb8:	subcs	r3, r3, r1, lsl #12
   15bbc:	cmp	r3, r1, lsl #11
   15bc0:	adc	r0, r0, r0
   15bc4:	subcs	r3, r3, r1, lsl #11
   15bc8:	cmp	r3, r1, lsl #10
   15bcc:	adc	r0, r0, r0
   15bd0:	subcs	r3, r3, r1, lsl #10
   15bd4:	cmp	r3, r1, lsl #9
   15bd8:	adc	r0, r0, r0
   15bdc:	subcs	r3, r3, r1, lsl #9
   15be0:	cmp	r3, r1, lsl #8
   15be4:	adc	r0, r0, r0
   15be8:	subcs	r3, r3, r1, lsl #8
   15bec:	cmp	r3, r1, lsl #7
   15bf0:	adc	r0, r0, r0
   15bf4:	subcs	r3, r3, r1, lsl #7
   15bf8:	cmp	r3, r1, lsl #6
   15bfc:	adc	r0, r0, r0
   15c00:	subcs	r3, r3, r1, lsl #6
   15c04:	cmp	r3, r1, lsl #5
   15c08:	adc	r0, r0, r0
   15c0c:	subcs	r3, r3, r1, lsl #5
   15c10:	cmp	r3, r1, lsl #4
   15c14:	adc	r0, r0, r0
   15c18:	subcs	r3, r3, r1, lsl #4
   15c1c:	cmp	r3, r1, lsl #3
   15c20:	adc	r0, r0, r0
   15c24:	subcs	r3, r3, r1, lsl #3
   15c28:	cmp	r3, r1, lsl #2
   15c2c:	adc	r0, r0, r0
   15c30:	subcs	r3, r3, r1, lsl #2
   15c34:	cmp	r3, r1, lsl #1
   15c38:	adc	r0, r0, r0
   15c3c:	subcs	r3, r3, r1, lsl #1
   15c40:	cmp	r3, r1
   15c44:	adc	r0, r0, r0
   15c48:	subcs	r3, r3, r1
   15c4c:	cmp	ip, #0
   15c50:	rsbmi	r0, r0, #0
   15c54:	bx	lr
   15c58:	teq	ip, r0
   15c5c:	rsbmi	r0, r0, #0
   15c60:	bx	lr
   15c64:	movcc	r0, #0
   15c68:	asreq	r0, ip, #31
   15c6c:	orreq	r0, r0, #1
   15c70:	bx	lr
   15c74:	clz	r2, r1
   15c78:	rsb	r2, r2, #31
   15c7c:	cmp	ip, #0
   15c80:	lsr	r0, r3, r2
   15c84:	rsbmi	r0, r0, #0
   15c88:	bx	lr
   15c8c:	cmp	r0, #0
   15c90:	mvngt	r0, #-2147483648	; 0x80000000
   15c94:	movlt	r0, #-2147483648	; 0x80000000
   15c98:	b	15dcc <__assert_fail@plt+0x4e44>
   15c9c:	cmp	r1, #0
   15ca0:	beq	15c8c <__assert_fail@plt+0x4d04>
   15ca4:	push	{r0, r1, lr}
   15ca8:	bl	15a84 <__assert_fail@plt+0x4afc>
   15cac:	pop	{r1, r2, lr}
   15cb0:	mul	r3, r2, r0
   15cb4:	sub	r1, r1, r3
   15cb8:	bx	lr
   15cbc:	cmp	r3, #0
   15cc0:	cmpeq	r2, #0
   15cc4:	bne	15ce8 <__assert_fail@plt+0x4d60>
   15cc8:	cmp	r1, #0
   15ccc:	movlt	r1, #-2147483648	; 0x80000000
   15cd0:	movlt	r0, #0
   15cd4:	blt	15ce4 <__assert_fail@plt+0x4d5c>
   15cd8:	cmpeq	r0, #0
   15cdc:	mvnne	r1, #-2147483648	; 0x80000000
   15ce0:	mvnne	r0, #0
   15ce4:	b	15dcc <__assert_fail@plt+0x4e44>
   15ce8:	sub	sp, sp, #8
   15cec:	push	{sp, lr}
   15cf0:	cmp	r1, #0
   15cf4:	blt	15d14 <__assert_fail@plt+0x4d8c>
   15cf8:	cmp	r3, #0
   15cfc:	blt	15d48 <__assert_fail@plt+0x4dc0>
   15d00:	bl	15ddc <__assert_fail@plt+0x4e54>
   15d04:	ldr	lr, [sp, #4]
   15d08:	add	sp, sp, #8
   15d0c:	pop	{r2, r3}
   15d10:	bx	lr
   15d14:	rsbs	r0, r0, #0
   15d18:	sbc	r1, r1, r1, lsl #1
   15d1c:	cmp	r3, #0
   15d20:	blt	15d6c <__assert_fail@plt+0x4de4>
   15d24:	bl	15ddc <__assert_fail@plt+0x4e54>
   15d28:	ldr	lr, [sp, #4]
   15d2c:	add	sp, sp, #8
   15d30:	pop	{r2, r3}
   15d34:	rsbs	r0, r0, #0
   15d38:	sbc	r1, r1, r1, lsl #1
   15d3c:	rsbs	r2, r2, #0
   15d40:	sbc	r3, r3, r3, lsl #1
   15d44:	bx	lr
   15d48:	rsbs	r2, r2, #0
   15d4c:	sbc	r3, r3, r3, lsl #1
   15d50:	bl	15ddc <__assert_fail@plt+0x4e54>
   15d54:	ldr	lr, [sp, #4]
   15d58:	add	sp, sp, #8
   15d5c:	pop	{r2, r3}
   15d60:	rsbs	r0, r0, #0
   15d64:	sbc	r1, r1, r1, lsl #1
   15d68:	bx	lr
   15d6c:	rsbs	r2, r2, #0
   15d70:	sbc	r3, r3, r3, lsl #1
   15d74:	bl	15ddc <__assert_fail@plt+0x4e54>
   15d78:	ldr	lr, [sp, #4]
   15d7c:	add	sp, sp, #8
   15d80:	pop	{r2, r3}
   15d84:	rsbs	r2, r2, #0
   15d88:	sbc	r3, r3, r3, lsl #1
   15d8c:	bx	lr
   15d90:	cmp	r3, #0
   15d94:	cmpeq	r2, #0
   15d98:	bne	15db0 <__assert_fail@plt+0x4e28>
   15d9c:	cmp	r1, #0
   15da0:	cmpeq	r0, #0
   15da4:	mvnne	r1, #0
   15da8:	mvnne	r0, #0
   15dac:	b	15dcc <__assert_fail@plt+0x4e44>
   15db0:	sub	sp, sp, #8
   15db4:	push	{sp, lr}
   15db8:	bl	15ddc <__assert_fail@plt+0x4e54>
   15dbc:	ldr	lr, [sp, #4]
   15dc0:	add	sp, sp, #8
   15dc4:	pop	{r2, r3}
   15dc8:	bx	lr
   15dcc:	push	{r1, lr}
   15dd0:	mov	r0, #8
   15dd4:	bl	10d0c <raise@plt>
   15dd8:	pop	{r1, pc}
   15ddc:	cmp	r1, r3
   15de0:	push	{r4, r5, r6, r7, r8, r9, lr}
   15de4:	cmpeq	r0, r2
   15de8:	mov	r4, r0
   15dec:	mov	r5, r1
   15df0:	ldr	r9, [sp, #28]
   15df4:	movcc	r0, #0
   15df8:	movcc	r1, #0
   15dfc:	bcc	15ef4 <__assert_fail@plt+0x4f6c>
   15e00:	cmp	r3, #0
   15e04:	clzeq	ip, r2
   15e08:	clzne	ip, r3
   15e0c:	addeq	ip, ip, #32
   15e10:	cmp	r5, #0
   15e14:	clzeq	r1, r4
   15e18:	addeq	r1, r1, #32
   15e1c:	clzne	r1, r5
   15e20:	sub	ip, ip, r1
   15e24:	sub	lr, ip, #32
   15e28:	lsl	r7, r3, ip
   15e2c:	rsb	r8, ip, #32
   15e30:	orr	r7, r7, r2, lsl lr
   15e34:	orr	r7, r7, r2, lsr r8
   15e38:	lsl	r6, r2, ip
   15e3c:	cmp	r5, r7
   15e40:	cmpeq	r4, r6
   15e44:	movcc	r0, #0
   15e48:	movcc	r1, #0
   15e4c:	bcc	15e68 <__assert_fail@plt+0x4ee0>
   15e50:	mov	r3, #1
   15e54:	subs	r4, r4, r6
   15e58:	lsl	r1, r3, lr
   15e5c:	lsl	r0, r3, ip
   15e60:	orr	r1, r1, r3, lsr r8
   15e64:	sbc	r5, r5, r7
   15e68:	cmp	ip, #0
   15e6c:	beq	15ef4 <__assert_fail@plt+0x4f6c>
   15e70:	lsrs	r3, r7, #1
   15e74:	rrx	r2, r6
   15e78:	mov	r6, ip
   15e7c:	b	15ea0 <__assert_fail@plt+0x4f18>
   15e80:	subs	r4, r4, r2
   15e84:	sbc	r5, r5, r3
   15e88:	adds	r4, r4, r4
   15e8c:	adc	r5, r5, r5
   15e90:	adds	r4, r4, #1
   15e94:	adc	r5, r5, #0
   15e98:	subs	r6, r6, #1
   15e9c:	beq	15ebc <__assert_fail@plt+0x4f34>
   15ea0:	cmp	r5, r3
   15ea4:	cmpeq	r4, r2
   15ea8:	bcs	15e80 <__assert_fail@plt+0x4ef8>
   15eac:	adds	r4, r4, r4
   15eb0:	adc	r5, r5, r5
   15eb4:	subs	r6, r6, #1
   15eb8:	bne	15ea0 <__assert_fail@plt+0x4f18>
   15ebc:	lsr	r6, r4, ip
   15ec0:	lsr	r7, r5, ip
   15ec4:	orr	r6, r6, r5, lsl r8
   15ec8:	adds	r2, r0, r4
   15ecc:	orr	r6, r6, r5, lsr lr
   15ed0:	adc	r3, r1, r5
   15ed4:	lsl	r1, r7, ip
   15ed8:	orr	r1, r1, r6, lsl lr
   15edc:	lsl	r0, r6, ip
   15ee0:	orr	r1, r1, r6, lsr r8
   15ee4:	subs	r0, r2, r0
   15ee8:	mov	r4, r6
   15eec:	mov	r5, r7
   15ef0:	sbc	r1, r3, r1
   15ef4:	cmp	r9, #0
   15ef8:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   15efc:	strd	r4, [r9]
   15f00:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15f04:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15f08:	mov	r7, r0
   15f0c:	ldr	r6, [pc, #72]	; 15f5c <__assert_fail@plt+0x4fd4>
   15f10:	ldr	r5, [pc, #72]	; 15f60 <__assert_fail@plt+0x4fd8>
   15f14:	add	r6, pc, r6
   15f18:	add	r5, pc, r5
   15f1c:	sub	r6, r6, r5
   15f20:	mov	r8, r1
   15f24:	mov	r9, r2
   15f28:	bl	10cd4 <calloc@plt-0x20>
   15f2c:	asrs	r6, r6, #2
   15f30:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f34:	mov	r4, #0
   15f38:	add	r4, r4, #1
   15f3c:	ldr	r3, [r5], #4
   15f40:	mov	r2, r9
   15f44:	mov	r1, r8
   15f48:	mov	r0, r7
   15f4c:	blx	r3
   15f50:	cmp	r6, r4
   15f54:	bne	15f38 <__assert_fail@plt+0x4fb0>
   15f58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f5c:	strdeq	r0, [r1], -r4
   15f60:	andeq	r0, r1, ip, ror #31
   15f64:	bx	lr
   15f68:	ldr	r3, [pc, #12]	; 15f7c <__assert_fail@plt+0x4ff4>
   15f6c:	mov	r1, #0
   15f70:	add	r3, pc, r3
   15f74:	ldr	r2, [r3]
   15f78:	b	10eb0 <__cxa_atexit@plt>
   15f7c:	andeq	r1, r1, ip, ror r1
   15f80:	mov	r2, r1
   15f84:	mov	r1, r0
   15f88:	mov	r0, #3
   15f8c:	b	10dcc <__fxstat64@plt>

Disassembly of section .fini:

00015f90 <.fini>:
   15f90:	push	{r3, lr}
   15f94:	pop	{r3, pc}
