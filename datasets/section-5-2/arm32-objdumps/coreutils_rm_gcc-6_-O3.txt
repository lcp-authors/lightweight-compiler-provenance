
../repos/coreutils/src/rm:     file format elf32-littlearm


Disassembly of section .init:

00010f80 <.init>:
   10f80:	push	{r3, lr}
   10f84:	bl	119a4 <__assert_fail@plt+0x6d4>
   10f88:	pop	{r3, pc}

Disassembly of section .plt:

00010f8c <fstatfs64@plt-0x14>:
   10f8c:	push	{lr}		; (str lr, [sp, #-4]!)
   10f90:	ldr	lr, [pc, #4]	; 10f9c <fstatfs64@plt-0x4>
   10f94:	add	lr, pc, lr
   10f98:	ldr	pc, [lr, #8]!
   10f9c:	andeq	pc, r1, r4, rrx

00010fa0 <fstatfs64@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #126976	; 0x1f000
   10fa8:	ldr	pc, [ip, #100]!	; 0x64

00010fac <calloc@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #126976	; 0x1f000
   10fb4:	ldr	pc, [ip, #92]!	; 0x5c

00010fb8 <fputs_unlocked@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #126976	; 0x1f000
   10fc0:	ldr	pc, [ip, #84]!	; 0x54

00010fc4 <raise@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #126976	; 0x1f000
   10fcc:	ldr	pc, [ip, #76]!	; 0x4c

00010fd0 <__getdelim@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #126976	; 0x1f000
   10fd8:	ldr	pc, [ip, #68]!	; 0x44

00010fdc <strcmp@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #126976	; 0x1f000
   10fe4:	ldr	pc, [ip, #60]!	; 0x3c

00010fe8 <fflush@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #126976	; 0x1f000
   10ff0:	ldr	pc, [ip, #52]!	; 0x34

00010ff4 <unlinkat@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #126976	; 0x1f000
   10ffc:	ldr	pc, [ip, #44]!	; 0x2c

00011000 <memmove@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #126976	; 0x1f000
   11008:	ldr	pc, [ip, #36]!	; 0x24

0001100c <free@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #126976	; 0x1f000
   11014:	ldr	pc, [ip, #28]!

00011018 <faccessat@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #126976	; 0x1f000
   11020:	ldr	pc, [ip, #20]!

00011024 <_exit@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #126976	; 0x1f000
   1102c:	ldr	pc, [ip, #12]!

00011030 <memcpy@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #126976	; 0x1f000
   11038:	ldr	pc, [ip, #4]!

0001103c <mbsinit@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #122880	; 0x1e000
   11044:	ldr	pc, [ip, #4092]!	; 0xffc

00011048 <memcmp@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #122880	; 0x1e000
   11050:	ldr	pc, [ip, #4084]!	; 0xff4

00011054 <fputc_unlocked@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #122880	; 0x1e000
   1105c:	ldr	pc, [ip, #4076]!	; 0xfec

00011060 <dcgettext@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #122880	; 0x1e000
   11068:	ldr	pc, [ip, #4068]!	; 0xfe4

0001106c <realloc@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #122880	; 0x1e000
   11074:	ldr	pc, [ip, #4060]!	; 0xfdc

00011078 <textdomain@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #122880	; 0x1e000
   11080:	ldr	pc, [ip, #4052]!	; 0xfd4

00011084 <geteuid@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #122880	; 0x1e000
   1108c:	ldr	pc, [ip, #4044]!	; 0xfcc

00011090 <__fxstatat64@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #122880	; 0x1e000
   11098:	ldr	pc, [ip, #4036]!	; 0xfc4

0001109c <iswprint@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #122880	; 0x1e000
   110a4:	ldr	pc, [ip, #4028]!	; 0xfbc

000110a8 <__fxstat64@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #122880	; 0x1e000
   110b0:	ldr	pc, [ip, #4020]!	; 0xfb4

000110b4 <fwrite@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #122880	; 0x1e000
   110bc:	ldr	pc, [ip, #4012]!	; 0xfac

000110c0 <lseek64@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #122880	; 0x1e000
   110c8:	ldr	pc, [ip, #4004]!	; 0xfa4

000110cc <__ctype_get_mb_cur_max@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #122880	; 0x1e000
   110d4:	ldr	pc, [ip, #3996]!	; 0xf9c

000110d8 <__fpending@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #122880	; 0x1e000
   110e0:	ldr	pc, [ip, #3988]!	; 0xf94

000110e4 <mbrtowc@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #122880	; 0x1e000
   110ec:	ldr	pc, [ip, #3980]!	; 0xf8c

000110f0 <error@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #122880	; 0x1e000
   110f8:	ldr	pc, [ip, #3972]!	; 0xf84

000110fc <open64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #122880	; 0x1e000
   11104:	ldr	pc, [ip, #3964]!	; 0xf7c

00011108 <malloc@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #122880	; 0x1e000
   11110:	ldr	pc, [ip, #3956]!	; 0xf74

00011114 <__libc_start_main@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #122880	; 0x1e000
   1111c:	ldr	pc, [ip, #3948]!	; 0xf6c

00011120 <__freading@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #122880	; 0x1e000
   11128:	ldr	pc, [ip, #3940]!	; 0xf64

0001112c <__gmon_start__@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #122880	; 0x1e000
   11134:	ldr	pc, [ip, #3932]!	; 0xf5c

00011138 <mempcpy@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #122880	; 0x1e000
   11140:	ldr	pc, [ip, #3924]!	; 0xf54

00011144 <getopt_long@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #122880	; 0x1e000
   1114c:	ldr	pc, [ip, #3916]!	; 0xf4c

00011150 <__ctype_b_loc@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #122880	; 0x1e000
   11158:	ldr	pc, [ip, #3908]!	; 0xf44

0001115c <exit@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #122880	; 0x1e000
   11164:	ldr	pc, [ip, #3900]!	; 0xf3c

00011168 <strlen@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #122880	; 0x1e000
   11170:	ldr	pc, [ip, #3892]!	; 0xf34

00011174 <openat64@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #122880	; 0x1e000
   1117c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011180 <__errno_location@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #122880	; 0x1e000
   11188:	ldr	pc, [ip, #3876]!	; 0xf24

0001118c <__cxa_atexit@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #122880	; 0x1e000
   11194:	ldr	pc, [ip, #3868]!	; 0xf1c

00011198 <memset@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #122880	; 0x1e000
   111a0:	ldr	pc, [ip, #3860]!	; 0xf14

000111a4 <__printf_chk@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #122880	; 0x1e000
   111ac:	ldr	pc, [ip, #3852]!	; 0xf0c

000111b0 <fileno@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #122880	; 0x1e000
   111b8:	ldr	pc, [ip, #3844]!	; 0xf04

000111bc <__fprintf_chk@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #122880	; 0x1e000
   111c4:	ldr	pc, [ip, #3836]!	; 0xefc

000111c8 <fclose@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #122880	; 0x1e000
   111d0:	ldr	pc, [ip, #3828]!	; 0xef4

000111d4 <fseeko64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #122880	; 0x1e000
   111dc:	ldr	pc, [ip, #3820]!	; 0xeec

000111e0 <fcntl64@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #122880	; 0x1e000
   111e8:	ldr	pc, [ip, #3812]!	; 0xee4

000111ec <rpmatch@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #122880	; 0x1e000
   111f4:	ldr	pc, [ip, #3804]!	; 0xedc

000111f8 <__overflow@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #122880	; 0x1e000
   11200:	ldr	pc, [ip, #3796]!	; 0xed4

00011204 <setlocale@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #122880	; 0x1e000
   1120c:	ldr	pc, [ip, #3788]!	; 0xecc

00011210 <strrchr@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #122880	; 0x1e000
   11218:	ldr	pc, [ip, #3780]!	; 0xec4

0001121c <nl_langinfo@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #122880	; 0x1e000
   11224:	ldr	pc, [ip, #3772]!	; 0xebc

00011228 <readdir64@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #122880	; 0x1e000
   11230:	ldr	pc, [ip, #3764]!	; 0xeb4

00011234 <fdopendir@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #122880	; 0x1e000
   1123c:	ldr	pc, [ip, #3756]!	; 0xeac

00011240 <dirfd@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #122880	; 0x1e000
   11248:	ldr	pc, [ip, #3748]!	; 0xea4

0001124c <fchdir@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #122880	; 0x1e000
   11254:	ldr	pc, [ip, #3740]!	; 0xe9c

00011258 <qsort@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #122880	; 0x1e000
   11260:	ldr	pc, [ip, #3732]!	; 0xe94

00011264 <bindtextdomain@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #122880	; 0x1e000
   1126c:	ldr	pc, [ip, #3724]!	; 0xe8c

00011270 <__xstat64@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #122880	; 0x1e000
   11278:	ldr	pc, [ip, #3716]!	; 0xe84

0001127c <isatty@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #122880	; 0x1e000
   11284:	ldr	pc, [ip, #3708]!	; 0xe7c

00011288 <strncmp@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #122880	; 0x1e000
   11290:	ldr	pc, [ip, #3700]!	; 0xe74

00011294 <abort@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #122880	; 0x1e000
   1129c:	ldr	pc, [ip, #3692]!	; 0xe6c

000112a0 <close@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #122880	; 0x1e000
   112a8:	ldr	pc, [ip, #3684]!	; 0xe64

000112ac <__lxstat64@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #122880	; 0x1e000
   112b4:	ldr	pc, [ip, #3676]!	; 0xe5c

000112b8 <dcngettext@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #122880	; 0x1e000
   112c0:	ldr	pc, [ip, #3668]!	; 0xe54

000112c4 <closedir@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #122880	; 0x1e000
   112cc:	ldr	pc, [ip, #3660]!	; 0xe4c

000112d0 <__assert_fail@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #122880	; 0x1e000
   112d8:	ldr	pc, [ip, #3652]!	; 0xe44

Disassembly of section .text:

000112e0 <.text>:
   112e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112e4:	mov	r4, r0
   112e8:	sub	sp, sp, #164	; 0xa4
   112ec:	ldr	r0, [r1]
   112f0:	mov	r6, r1
   112f4:	bl	17d70 <__assert_fail@plt+0x6aa0>
   112f8:	ldr	r1, [pc, #1476]	; 118c4 <__assert_fail@plt+0x5f4>
   112fc:	mov	r0, #6
   11300:	bl	11204 <setlocale@plt>
   11304:	ldr	r1, [pc, #1468]	; 118c8 <__assert_fail@plt+0x5f8>
   11308:	ldr	r0, [pc, #1468]	; 118cc <__assert_fail@plt+0x5fc>
   1130c:	bl	11264 <bindtextdomain@plt>
   11310:	ldr	r0, [pc, #1460]	; 118cc <__assert_fail@plt+0x5fc>
   11314:	mov	r5, #0
   11318:	bl	11078 <textdomain@plt>
   1131c:	ldr	r0, [pc, #1452]	; 118d0 <__assert_fail@plt+0x600>
   11320:	bl	1dd1c <__assert_fail@plt+0xca4c>
   11324:	mov	r3, #4
   11328:	mov	r0, r5
   1132c:	strb	r5, [sp, #36]	; 0x24
   11330:	strb	r5, [sp, #44]	; 0x2c
   11334:	strb	r5, [sp, #46]	; 0x2e
   11338:	strb	r5, [sp, #45]	; 0x2d
   1133c:	str	r5, [sp, #48]	; 0x30
   11340:	strb	r5, [sp, #52]	; 0x34
   11344:	str	r3, [sp, #40]	; 0x28
   11348:	bl	1127c <isatty@plt>
   1134c:	ldr	fp, [pc, #1408]	; 118d4 <__assert_fail@plt+0x604>
   11350:	mov	r9, #1
   11354:	ldr	r7, [pc, #1404]	; 118d8 <__assert_fail@plt+0x608>
   11358:	add	r8, fp, #108	; 0x6c
   1135c:	mov	sl, r9
   11360:	strb	r5, [sp, #54]	; 0x36
   11364:	strb	r5, [sp, #55]	; 0x37
   11368:	str	r5, [sp, #28]
   1136c:	subs	r0, r0, r5
   11370:	movne	r0, #1
   11374:	strb	r0, [sp, #53]	; 0x35
   11378:	mov	r5, #0
   1137c:	str	r5, [sp]
   11380:	mov	r3, r8
   11384:	mov	r2, r7
   11388:	mov	r1, r6
   1138c:	mov	r0, r4
   11390:	bl	11144 <getopt_long@plt>
   11394:	cmn	r0, #1
   11398:	beq	11670 <__assert_fail@plt+0x3a0>
   1139c:	cmp	r0, #105	; 0x69
   113a0:	beq	11648 <__assert_fail@plt+0x378>
   113a4:	ble	113d8 <__assert_fail@plt+0x108>
   113a8:	ldr	r3, [pc, #1324]	; 118dc <__assert_fail@plt+0x60c>
   113ac:	cmp	r0, r3
   113b0:	beq	11640 <__assert_fail@plt+0x370>
   113b4:	ble	11408 <__assert_fail@plt+0x138>
   113b8:	ldr	r3, [pc, #1312]	; 118e0 <__assert_fail@plt+0x610>
   113bc:	cmp	r0, r3
   113c0:	beq	11614 <__assert_fail@plt+0x344>
   113c4:	blt	114e0 <__assert_fail@plt+0x210>
   113c8:	cmp	r0, #260	; 0x104
   113cc:	bne	11528 <__assert_fail@plt+0x258>
   113d0:	strb	sl, [sp, #53]	; 0x35
   113d4:	b	11378 <__assert_fail@plt+0xa8>
   113d8:	cmp	r0, #73	; 0x49
   113dc:	beq	11600 <__assert_fail@plt+0x330>
   113e0:	ble	11488 <__assert_fail@plt+0x1b8>
   113e4:	cmp	r0, #100	; 0x64
   113e8:	beq	115f8 <__assert_fail@plt+0x328>
   113ec:	cmp	r0, #102	; 0x66
   113f0:	bne	115e0 <__assert_fail@plt+0x310>
   113f4:	mov	r3, #5
   113f8:	strb	sl, [sp, #36]	; 0x24
   113fc:	str	r5, [sp, #28]
   11400:	str	r3, [sp, #40]	; 0x28
   11404:	b	11378 <__assert_fail@plt+0xa8>
   11408:	cmp	r0, #118	; 0x76
   1140c:	beq	115f0 <__assert_fail@plt+0x320>
   11410:	cmp	r0, #256	; 0x100
   11414:	bne	11520 <__assert_fail@plt+0x250>
   11418:	ldr	r3, [pc, #1220]	; 118e4 <__assert_fail@plt+0x614>
   1141c:	ldr	r1, [r3]
   11420:	cmp	r1, #0
   11424:	beq	11470 <__assert_fail@plt+0x1a0>
   11428:	ldr	r2, [pc, #1208]	; 118e8 <__assert_fail@plt+0x618>
   1142c:	ldr	r3, [pc, #1208]	; 118ec <__assert_fail@plt+0x61c>
   11430:	mov	r0, #1
   11434:	ldr	r2, [r2]
   11438:	str	r0, [sp, #8]
   1143c:	mov	r0, #4
   11440:	str	r2, [sp, #4]
   11444:	str	r0, [sp]
   11448:	add	r2, r3, #24
   1144c:	ldr	r0, [pc, #1180]	; 118f0 <__assert_fail@plt+0x620>
   11450:	bl	133c4 <__assert_fail@plt+0x20f4>
   11454:	add	r0, fp, r0, lsl #2
   11458:	ldr	r3, [r0, #56]	; 0x38
   1145c:	cmp	r3, #1
   11460:	beq	1165c <__assert_fail@plt+0x38c>
   11464:	bcc	11768 <__assert_fail@plt+0x498>
   11468:	cmp	r3, #2
   1146c:	bne	11378 <__assert_fail@plt+0xa8>
   11470:	mov	r3, #0
   11474:	mov	r2, #3
   11478:	str	r2, [sp, #40]	; 0x28
   1147c:	strb	r3, [sp, #36]	; 0x24
   11480:	str	r3, [sp, #28]
   11484:	b	11378 <__assert_fail@plt+0xa8>
   11488:	cmn	r0, #3
   1148c:	beq	114a0 <__assert_fail@plt+0x1d0>
   11490:	cmn	r0, #2
   11494:	bne	11528 <__assert_fail@plt+0x258>
   11498:	mov	r0, r5
   1149c:	bl	11a90 <__assert_fail@plt+0x7c0>
   114a0:	ldr	lr, [pc, #1100]	; 118f4 <__assert_fail@plt+0x624>
   114a4:	ldr	ip, [pc, #1100]	; 118f8 <__assert_fail@plt+0x628>
   114a8:	ldr	r1, [pc, #1100]	; 118fc <__assert_fail@plt+0x62c>
   114ac:	ldr	r3, [pc, #1100]	; 11900 <__assert_fail@plt+0x630>
   114b0:	ldr	r0, [pc, #1100]	; 11904 <__assert_fail@plt+0x634>
   114b4:	ldr	r2, [pc, #1100]	; 11908 <__assert_fail@plt+0x638>
   114b8:	str	r5, [sp, #16]
   114bc:	ldr	r0, [r0]
   114c0:	ldr	r3, [r3]
   114c4:	stmib	sp, {r1, ip, lr}
   114c8:	str	r2, [sp]
   114cc:	ldr	r1, [pc, #1080]	; 1190c <__assert_fail@plt+0x63c>
   114d0:	ldr	r2, [pc, #1080]	; 11910 <__assert_fail@plt+0x640>
   114d4:	bl	1c69c <__assert_fail@plt+0xb3cc>
   114d8:	mov	r0, r5
   114dc:	bl	1115c <exit@plt>
   114e0:	ldr	r3, [pc, #1068]	; 11914 <__assert_fail@plt+0x644>
   114e4:	ldr	r1, [pc, #1068]	; 11918 <__assert_fail@plt+0x648>
   114e8:	ldr	r3, [r3]
   114ec:	sub	r3, r3, #-1073741823	; 0xc0000001
   114f0:	ldr	r0, [r6, r3, lsl #2]
   114f4:	bl	10fdc <strcmp@plt>
   114f8:	subs	r9, r0, #0
   114fc:	beq	11378 <__assert_fail@plt+0xa8>
   11500:	mov	r2, #5
   11504:	ldr	r1, [pc, #1040]	; 1191c <__assert_fail@plt+0x64c>
   11508:	mov	r0, r5
   1150c:	bl	11060 <dcgettext@plt>
   11510:	mov	r1, r5
   11514:	mov	r2, r0
   11518:	mov	r0, #1
   1151c:	bl	110f0 <error@plt>
   11520:	cmp	r0, #114	; 0x72
   11524:	beq	115e8 <__assert_fail@plt+0x318>
   11528:	cmp	r4, #1
   1152c:	movgt	r8, r6
   11530:	movgt	r5, #1
   11534:	movgt	r9, #3
   11538:	bgt	1154c <__assert_fail@plt+0x27c>
   1153c:	b	115d8 <__assert_fail@plt+0x308>
   11540:	add	r5, r5, #1
   11544:	cmp	r4, r5
   11548:	beq	115d8 <__assert_fail@plt+0x308>
   1154c:	ldr	r7, [r8, #4]!
   11550:	ldrb	r3, [r7]
   11554:	cmp	r3, #45	; 0x2d
   11558:	bne	11540 <__assert_fail@plt+0x270>
   1155c:	ldrb	r3, [r7, #1]
   11560:	cmp	r3, #0
   11564:	beq	11540 <__assert_fail@plt+0x270>
   11568:	add	r2, sp, #56	; 0x38
   1156c:	mov	r1, r7
   11570:	mov	r0, r9
   11574:	bl	112ac <__lxstat64@plt>
   11578:	cmp	r0, #0
   1157c:	bne	11540 <__assert_fail@plt+0x270>
   11580:	ldr	r3, [pc, #920]	; 11920 <__assert_fail@plt+0x650>
   11584:	mov	r2, #5
   11588:	ldr	r1, [pc, #916]	; 11924 <__assert_fail@plt+0x654>
   1158c:	ldr	r4, [r3]
   11590:	bl	11060 <dcgettext@plt>
   11594:	mov	r2, r7
   11598:	mov	r1, #3
   1159c:	ldr	r6, [r6]
   115a0:	mov	r5, r0
   115a4:	mov	r0, #1
   115a8:	bl	19eec <__assert_fail@plt+0x8c1c>
   115ac:	mov	r1, r7
   115b0:	mov	r8, r0
   115b4:	mov	r0, #4
   115b8:	bl	1a2cc <__assert_fail@plt+0x8ffc>
   115bc:	str	r8, [sp]
   115c0:	mov	r3, r6
   115c4:	mov	r2, r5
   115c8:	mov	r1, #1
   115cc:	str	r0, [sp, #4]
   115d0:	mov	r0, r4
   115d4:	bl	111bc <__fprintf_chk@plt>
   115d8:	mov	r0, #1
   115dc:	bl	11a90 <__assert_fail@plt+0x7c0>
   115e0:	cmp	r0, #82	; 0x52
   115e4:	bne	11528 <__assert_fail@plt+0x258>
   115e8:	strb	sl, [sp, #45]	; 0x2d
   115ec:	b	11378 <__assert_fail@plt+0xa8>
   115f0:	strb	sl, [sp, #54]	; 0x36
   115f4:	b	11378 <__assert_fail@plt+0xa8>
   115f8:	strb	sl, [sp, #46]	; 0x2e
   115fc:	b	11378 <__assert_fail@plt+0xa8>
   11600:	mov	r3, #4
   11604:	strb	r5, [sp, #36]	; 0x24
   11608:	str	r3, [sp, #40]	; 0x28
   1160c:	str	sl, [sp, #28]
   11610:	b	11378 <__assert_fail@plt+0xa8>
   11614:	ldr	r3, [pc, #712]	; 118e4 <__assert_fail@plt+0x614>
   11618:	ldr	r0, [r3]
   1161c:	cmp	r0, #0
   11620:	beq	11790 <__assert_fail@plt+0x4c0>
   11624:	ldr	r1, [pc, #764]	; 11928 <__assert_fail@plt+0x658>
   11628:	bl	10fdc <strcmp@plt>
   1162c:	cmp	r0, #0
   11630:	bne	1188c <__assert_fail@plt+0x5bc>
   11634:	strb	sl, [sp, #52]	; 0x34
   11638:	mov	r9, #1
   1163c:	b	11378 <__assert_fail@plt+0xa8>
   11640:	strb	sl, [sp, #44]	; 0x2c
   11644:	b	11378 <__assert_fail@plt+0xa8>
   11648:	mov	r3, #3
   1164c:	strb	r5, [sp, #36]	; 0x24
   11650:	str	r5, [sp, #28]
   11654:	str	r3, [sp, #40]	; 0x28
   11658:	b	11378 <__assert_fail@plt+0xa8>
   1165c:	mov	r3, #4
   11660:	str	r3, [sp, #40]	; 0x28
   11664:	strb	r5, [sp, #36]	; 0x24
   11668:	str	sl, [sp, #28]
   1166c:	b	11378 <__assert_fail@plt+0xa8>
   11670:	ldr	r5, [pc, #668]	; 11914 <__assert_fail@plt+0x644>
   11674:	ldr	r3, [r5]
   11678:	cmp	r4, r3
   1167c:	ble	1177c <__assert_fail@plt+0x4ac>
   11680:	ldrb	r3, [sp, #45]	; 0x2d
   11684:	tst	r9, r3
   11688:	bne	117f0 <__assert_fail@plt+0x520>
   1168c:	ldr	r3, [r5]
   11690:	ldr	r2, [sp, #28]
   11694:	cmp	r2, #0
   11698:	add	r6, r6, r3, lsl #2
   1169c:	beq	1173c <__assert_fail@plt+0x46c>
   116a0:	ldrb	r2, [sp, #45]	; 0x2d
   116a4:	sub	r4, r4, r3
   116a8:	mov	r8, r4
   116ac:	cmp	r2, #0
   116b0:	asr	r9, r4, #31
   116b4:	bne	11798 <__assert_fail@plt+0x4c8>
   116b8:	cmp	r9, #0
   116bc:	cmpeq	r4, #3
   116c0:	bls	1173c <__assert_fail@plt+0x46c>
   116c4:	ldr	r3, [pc, #596]	; 11920 <__assert_fail@plt+0x650>
   116c8:	mov	r1, #0
   116cc:	mvn	r0, #0
   116d0:	cmp	r9, r1
   116d4:	cmpeq	r4, r0
   116d8:	ldr	r5, [r3]
   116dc:	bls	11844 <__assert_fail@plt+0x574>
   116e0:	ldr	r2, [pc, #580]	; 1192c <__assert_fail@plt+0x65c>
   116e4:	mov	r3, #0
   116e8:	mov	r0, r8
   116ec:	mov	r1, r9
   116f0:	bl	1db44 <__assert_fail@plt+0xc874>
   116f4:	add	r3, r2, #999424	; 0xf4000
   116f8:	add	r3, r3, #576	; 0x240
   116fc:	mov	r2, #5
   11700:	str	r2, [sp]
   11704:	ldr	r1, [pc, #548]	; 11930 <__assert_fail@plt+0x660>
   11708:	ldr	r2, [pc, #548]	; 11934 <__assert_fail@plt+0x664>
   1170c:	mov	r0, #0
   11710:	bl	112b8 <dcngettext@plt>
   11714:	mov	r2, r0
   11718:	ldr	r3, [pc, #536]	; 11938 <__assert_fail@plt+0x668>
   1171c:	strd	r8, [sp]
   11720:	mov	r1, #1
   11724:	ldr	r3, [r3]
   11728:	mov	r0, r5
   1172c:	bl	111bc <__fprintf_chk@plt>
   11730:	bl	1cfc8 <__assert_fail@plt+0xbcf8>
   11734:	cmp	r0, #0
   11738:	beq	11788 <__assert_fail@plt+0x4b8>
   1173c:	mov	r0, r6
   11740:	add	r1, sp, #36	; 0x24
   11744:	bl	12018 <__assert_fail@plt+0xd48>
   11748:	sub	r3, r0, #2
   1174c:	cmp	r3, #2
   11750:	subls	r0, r0, #4
   11754:	clzls	r0, r0
   11758:	lsrls	r0, r0, #5
   1175c:	bhi	11854 <__assert_fail@plt+0x584>
   11760:	add	sp, sp, #164	; 0xa4
   11764:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11768:	mov	r3, #5
   1176c:	str	r3, [sp, #40]	; 0x28
   11770:	mov	r3, #0
   11774:	str	r3, [sp, #28]
   11778:	b	11378 <__assert_fail@plt+0xa8>
   1177c:	ldrb	r4, [sp, #36]	; 0x24
   11780:	cmp	r4, #0
   11784:	beq	11868 <__assert_fail@plt+0x598>
   11788:	mov	r0, #0
   1178c:	b	11760 <__assert_fail@plt+0x490>
   11790:	mov	r9, sl
   11794:	b	11378 <__assert_fail@plt+0xa8>
   11798:	mov	r3, #0
   1179c:	mvn	r2, #0
   117a0:	cmp	r9, r3
   117a4:	cmpeq	r4, r2
   117a8:	bls	1184c <__assert_fail@plt+0x57c>
   117ac:	ldr	r2, [pc, #376]	; 1192c <__assert_fail@plt+0x65c>
   117b0:	mov	r3, #0
   117b4:	mov	r0, r8
   117b8:	mov	r1, r9
   117bc:	bl	1db44 <__assert_fail@plt+0xc874>
   117c0:	add	r3, r2, #999424	; 0xf4000
   117c4:	add	r3, r3, #576	; 0x240
   117c8:	ldr	ip, [pc, #336]	; 11920 <__assert_fail@plt+0x650>
   117cc:	mov	r2, #5
   117d0:	str	r2, [sp]
   117d4:	ldr	r1, [pc, #352]	; 1193c <__assert_fail@plt+0x66c>
   117d8:	ldr	r2, [pc, #352]	; 11940 <__assert_fail@plt+0x670>
   117dc:	mov	r0, #0
   117e0:	ldr	r5, [ip]
   117e4:	bl	112b8 <dcngettext@plt>
   117e8:	mov	r2, r0
   117ec:	b	11718 <__assert_fail@plt+0x448>
   117f0:	ldr	r0, [pc, #332]	; 11944 <__assert_fail@plt+0x674>
   117f4:	bl	1bdbc <__assert_fail@plt+0xaaec>
   117f8:	cmp	r0, #0
   117fc:	mov	r7, r0
   11800:	str	r0, [sp, #48]	; 0x30
   11804:	bne	1168c <__assert_fail@plt+0x3bc>
   11808:	bl	11180 <__errno_location@plt>
   1180c:	mov	r2, #5
   11810:	ldr	r1, [pc, #304]	; 11948 <__assert_fail@plt+0x678>
   11814:	ldr	r4, [r0]
   11818:	mov	r0, r7
   1181c:	bl	11060 <dcgettext@plt>
   11820:	ldr	r1, [pc, #292]	; 1194c <__assert_fail@plt+0x67c>
   11824:	mov	r5, r0
   11828:	mov	r0, #4
   1182c:	bl	1a2cc <__assert_fail@plt+0x8ffc>
   11830:	mov	r2, r5
   11834:	mov	r1, r4
   11838:	mov	r3, r0
   1183c:	mov	r0, #1
   11840:	bl	110f0 <error@plt>
   11844:	mov	r3, r4
   11848:	b	116fc <__assert_fail@plt+0x42c>
   1184c:	mov	r3, r4
   11850:	b	117c8 <__assert_fail@plt+0x4f8>
   11854:	ldr	r3, [pc, #244]	; 11950 <__assert_fail@plt+0x680>
   11858:	ldr	r2, [pc, #244]	; 11954 <__assert_fail@plt+0x684>
   1185c:	ldr	r1, [pc, #244]	; 11958 <__assert_fail@plt+0x688>
   11860:	ldr	r0, [pc, #244]	; 1195c <__assert_fail@plt+0x68c>
   11864:	bl	112d0 <__assert_fail@plt>
   11868:	mov	r2, #5
   1186c:	ldr	r1, [pc, #236]	; 11960 <__assert_fail@plt+0x690>
   11870:	mov	r0, r4
   11874:	bl	11060 <dcgettext@plt>
   11878:	mov	r1, r4
   1187c:	mov	r2, r0
   11880:	mov	r0, r4
   11884:	bl	110f0 <error@plt>
   11888:	b	115d8 <__assert_fail@plt+0x308>
   1188c:	mov	r2, #5
   11890:	ldr	r1, [pc, #204]	; 11964 <__assert_fail@plt+0x694>
   11894:	mov	r0, r5
   11898:	bl	11060 <dcgettext@plt>
   1189c:	ldr	r3, [pc, #64]	; 118e4 <__assert_fail@plt+0x614>
   118a0:	ldr	r1, [r3]
   118a4:	mov	r4, r0
   118a8:	mov	r0, #4
   118ac:	bl	1a2cc <__assert_fail@plt+0x8ffc>
   118b0:	mov	r2, r4
   118b4:	mov	r1, r5
   118b8:	mov	r3, r0
   118bc:	mov	r0, #1
   118c0:	bl	110f0 <error@plt>
   118c4:	andeq	lr, r1, r8, lsl #30
   118c8:	andeq	lr, r1, r0, asr #13
   118cc:	andeq	lr, r1, r8, lsl r6
   118d0:	andeq	r3, r1, r8, lsr #14
   118d4:	andeq	sp, r1, r0, asr #26
   118d8:	andeq	lr, r1, ip, asr #15
   118dc:	andeq	r0, r0, r1, lsl #2
   118e0:	andeq	r0, r0, r3, lsl #2
   118e4:	muleq	r3, r8, r1
   118e8:	andeq	r0, r3, r0, lsr r1
   118ec:	andeq	sp, r1, r8, ror sp
   118f0:	ldrdeq	lr, [r1], -r8
   118f4:	andeq	lr, r1, r4, ror #14
   118f8:	andeq	lr, r1, r4, ror r7
   118fc:	andeq	lr, r1, r8, lsl #15
   11900:	andeq	r0, r3, ip, lsr #2
   11904:	muleq	r3, r4, r1
   11908:	muleq	r1, r8, r7
   1190c:	andeq	sp, r1, r4, ror lr
   11910:	andeq	lr, r1, r4, lsl r6
   11914:	andeq	r0, r3, r0, lsl #3
   11918:	andeq	lr, r1, r8, ror #13
   1191c:	strdeq	lr, [r1], -ip
   11920:	andeq	r0, r3, r8, lsl #3
   11924:	andeq	lr, r1, r4, lsr #15
   11928:	andeq	lr, r1, r4, lsr r7
   1192c:	andeq	r4, pc, r0, asr #4
   11930:	andeq	lr, r1, r4, ror r8
   11934:	andeq	lr, r1, r8, asr r8
   11938:			; <UNDEFINED> instruction: 0x000301bc
   1193c:	andeq	lr, r1, r0, lsr r8
   11940:	andeq	lr, r1, r8, lsl #16
   11944:	andeq	r0, r3, r0, lsr #3
   11948:	andeq	lr, r1, r4, ror #15
   1194c:	andeq	lr, r1, r4, lsl #16
   11950:	andeq	sp, r1, ip, ror #28
   11954:	andeq	r0, r0, r3, ror r1
   11958:	muleq	r1, r0, r8
   1195c:	muleq	r1, ip, r8
   11960:	ldrdeq	lr, [r1], -r4
   11964:	andeq	lr, r1, r8, lsr r7
   11968:	mov	fp, #0
   1196c:	mov	lr, #0
   11970:	pop	{r1}		; (ldr r1, [sp], #4)
   11974:	mov	r2, sp
   11978:	push	{r2}		; (str r2, [sp, #-4]!)
   1197c:	push	{r0}		; (str r0, [sp, #-4]!)
   11980:	ldr	ip, [pc, #16]	; 11998 <__assert_fail@plt+0x6c8>
   11984:	push	{ip}		; (str ip, [sp, #-4]!)
   11988:	ldr	r0, [pc, #12]	; 1199c <__assert_fail@plt+0x6cc>
   1198c:	ldr	r3, [pc, #12]	; 119a0 <__assert_fail@plt+0x6d0>
   11990:	bl	11114 <__libc_start_main@plt>
   11994:	bl	11294 <abort@plt>
   11998:	andeq	sp, r1, r8, lsl sp
   1199c:	andeq	r1, r1, r0, ror #5
   119a0:			; <UNDEFINED> instruction: 0x0001dcb8
   119a4:	ldr	r3, [pc, #20]	; 119c0 <__assert_fail@plt+0x6f0>
   119a8:	ldr	r2, [pc, #20]	; 119c4 <__assert_fail@plt+0x6f4>
   119ac:	add	r3, pc, r3
   119b0:	ldr	r2, [r3, r2]
   119b4:	cmp	r2, #0
   119b8:	bxeq	lr
   119bc:	b	1112c <__gmon_start__@plt>
   119c0:	andeq	lr, r1, ip, asr #12
   119c4:	andeq	r0, r0, r0, lsr #2
   119c8:	ldr	r3, [pc, #28]	; 119ec <__assert_fail@plt+0x71c>
   119cc:	ldr	r0, [pc, #28]	; 119f0 <__assert_fail@plt+0x720>
   119d0:	sub	r3, r3, r0
   119d4:	cmp	r3, #6
   119d8:	bxls	lr
   119dc:	ldr	r3, [pc, #16]	; 119f4 <__assert_fail@plt+0x724>
   119e0:	cmp	r3, #0
   119e4:	bxeq	lr
   119e8:	bx	r3
   119ec:	andeq	r0, r3, fp, ror r1
   119f0:	andeq	r0, r3, r8, ror r1
   119f4:	andeq	r0, r0, r0
   119f8:	ldr	r1, [pc, #36]	; 11a24 <__assert_fail@plt+0x754>
   119fc:	ldr	r0, [pc, #36]	; 11a28 <__assert_fail@plt+0x758>
   11a00:	sub	r1, r1, r0
   11a04:	asr	r1, r1, #2
   11a08:	add	r1, r1, r1, lsr #31
   11a0c:	asrs	r1, r1, #1
   11a10:	bxeq	lr
   11a14:	ldr	r3, [pc, #16]	; 11a2c <__assert_fail@plt+0x75c>
   11a18:	cmp	r3, #0
   11a1c:	bxeq	lr
   11a20:	bx	r3
   11a24:	andeq	r0, r3, r8, ror r1
   11a28:	andeq	r0, r3, r8, ror r1
   11a2c:	andeq	r0, r0, r0
   11a30:	push	{r4, lr}
   11a34:	ldr	r4, [pc, #24]	; 11a54 <__assert_fail@plt+0x784>
   11a38:	ldrb	r3, [r4]
   11a3c:	cmp	r3, #0
   11a40:	popne	{r4, pc}
   11a44:	bl	119c8 <__assert_fail@plt+0x6f8>
   11a48:	mov	r3, #1
   11a4c:	strb	r3, [r4]
   11a50:	pop	{r4, pc}
   11a54:	muleq	r3, ip, r1
   11a58:	ldr	r0, [pc, #40]	; 11a88 <__assert_fail@plt+0x7b8>
   11a5c:	ldr	r3, [r0]
   11a60:	cmp	r3, #0
   11a64:	bne	11a6c <__assert_fail@plt+0x79c>
   11a68:	b	119f8 <__assert_fail@plt+0x728>
   11a6c:	ldr	r3, [pc, #24]	; 11a8c <__assert_fail@plt+0x7bc>
   11a70:	cmp	r3, #0
   11a74:	beq	11a68 <__assert_fail@plt+0x798>
   11a78:	push	{r4, lr}
   11a7c:	blx	r3
   11a80:	pop	{r4, lr}
   11a84:	b	119f8 <__assert_fail@plt+0x728>
   11a88:	andeq	pc, r2, r4, lsl pc	; <UNPREDICTABLE>
   11a8c:	andeq	r0, r0, r0
   11a90:	subs	r5, r0, #0
   11a94:	push	{r7, lr}
   11a98:	sub	sp, sp, #56	; 0x38
   11a9c:	beq	11ad8 <__assert_fail@plt+0x808>
   11aa0:	ldr	r3, [pc, #792]	; 11dc0 <__assert_fail@plt+0xaf0>
   11aa4:	mov	r2, #5
   11aa8:	ldr	r1, [pc, #788]	; 11dc4 <__assert_fail@plt+0xaf4>
   11aac:	mov	r0, #0
   11ab0:	ldr	r4, [r3]
   11ab4:	bl	11060 <dcgettext@plt>
   11ab8:	ldr	r3, [pc, #776]	; 11dc8 <__assert_fail@plt+0xaf8>
   11abc:	mov	r1, #1
   11ac0:	ldr	r3, [r3]
   11ac4:	mov	r2, r0
   11ac8:	mov	r0, r4
   11acc:	bl	111bc <__fprintf_chk@plt>
   11ad0:	mov	r0, r5
   11ad4:	bl	1115c <exit@plt>
   11ad8:	mov	r2, #5
   11adc:	ldr	r1, [pc, #744]	; 11dcc <__assert_fail@plt+0xafc>
   11ae0:	bl	11060 <dcgettext@plt>
   11ae4:	ldr	r4, [pc, #732]	; 11dc8 <__assert_fail@plt+0xaf8>
   11ae8:	ldr	r7, [pc, #736]	; 11dd0 <__assert_fail@plt+0xb00>
   11aec:	ldr	r2, [r4]
   11af0:	mov	r1, r0
   11af4:	mov	r0, #1
   11af8:	bl	111a4 <__printf_chk@plt>
   11afc:	mov	r2, #5
   11b00:	ldr	r1, [pc, #716]	; 11dd4 <__assert_fail@plt+0xb04>
   11b04:	mov	r0, r5
   11b08:	bl	11060 <dcgettext@plt>
   11b0c:	ldr	r1, [r7]
   11b10:	bl	10fb8 <fputs_unlocked@plt>
   11b14:	mov	r2, #5
   11b18:	ldr	r1, [pc, #696]	; 11dd8 <__assert_fail@plt+0xb08>
   11b1c:	mov	r0, r5
   11b20:	bl	11060 <dcgettext@plt>
   11b24:	ldr	r1, [r7]
   11b28:	bl	10fb8 <fputs_unlocked@plt>
   11b2c:	mov	r2, #5
   11b30:	ldr	r1, [pc, #676]	; 11ddc <__assert_fail@plt+0xb0c>
   11b34:	mov	r0, r5
   11b38:	bl	11060 <dcgettext@plt>
   11b3c:	ldr	r1, [r7]
   11b40:	bl	10fb8 <fputs_unlocked@plt>
   11b44:	mov	r2, #5
   11b48:	ldr	r1, [pc, #656]	; 11de0 <__assert_fail@plt+0xb10>
   11b4c:	mov	r0, r5
   11b50:	bl	11060 <dcgettext@plt>
   11b54:	ldr	r1, [r7]
   11b58:	bl	10fb8 <fputs_unlocked@plt>
   11b5c:	mov	r2, #5
   11b60:	ldr	r1, [pc, #636]	; 11de4 <__assert_fail@plt+0xb14>
   11b64:	mov	r0, r5
   11b68:	bl	11060 <dcgettext@plt>
   11b6c:	ldr	r1, [r7]
   11b70:	bl	10fb8 <fputs_unlocked@plt>
   11b74:	mov	r2, #5
   11b78:	ldr	r1, [pc, #616]	; 11de8 <__assert_fail@plt+0xb18>
   11b7c:	mov	r0, r5
   11b80:	bl	11060 <dcgettext@plt>
   11b84:	ldr	r1, [r7]
   11b88:	bl	10fb8 <fputs_unlocked@plt>
   11b8c:	mov	r2, #5
   11b90:	ldr	r1, [pc, #596]	; 11dec <__assert_fail@plt+0xb1c>
   11b94:	mov	r0, r5
   11b98:	bl	11060 <dcgettext@plt>
   11b9c:	ldr	r1, [r7]
   11ba0:	bl	10fb8 <fputs_unlocked@plt>
   11ba4:	mov	r2, #5
   11ba8:	ldr	r1, [pc, #576]	; 11df0 <__assert_fail@plt+0xb20>
   11bac:	mov	r0, r5
   11bb0:	bl	11060 <dcgettext@plt>
   11bb4:	ldr	r1, [r7]
   11bb8:	bl	10fb8 <fputs_unlocked@plt>
   11bbc:	mov	r2, #5
   11bc0:	ldr	r1, [pc, #556]	; 11df4 <__assert_fail@plt+0xb24>
   11bc4:	mov	r0, r5
   11bc8:	bl	11060 <dcgettext@plt>
   11bcc:	ldr	r3, [r4]
   11bd0:	ldr	r4, [pc, #544]	; 11df8 <__assert_fail@plt+0xb28>
   11bd4:	mov	r2, r3
   11bd8:	mov	r1, r0
   11bdc:	mov	r0, #1
   11be0:	bl	111a4 <__printf_chk@plt>
   11be4:	mov	r2, #5
   11be8:	ldr	r1, [pc, #524]	; 11dfc <__assert_fail@plt+0xb2c>
   11bec:	mov	r0, r5
   11bf0:	bl	11060 <dcgettext@plt>
   11bf4:	ldr	r1, [r7]
   11bf8:	bl	10fb8 <fputs_unlocked@plt>
   11bfc:	ldm	r4!, {r0, r1, r2, r3}
   11c00:	mov	lr, sp
   11c04:	stmia	lr!, {r0, r1, r2, r3}
   11c08:	ldm	r4!, {r0, r1, r2, r3}
   11c0c:	ldr	ip, [sp]
   11c10:	stmia	lr!, {r0, r1, r2, r3}
   11c14:	cmp	ip, #0
   11c18:	ldm	r4!, {r0, r1, r2, r3}
   11c1c:	stmia	lr!, {r0, r1, r2, r3}
   11c20:	ldm	r4, {r0, r1}
   11c24:	moveq	r4, sp
   11c28:	stm	lr, {r0, r1}
   11c2c:	beq	11c5c <__assert_fail@plt+0x98c>
   11c30:	ldr	r6, [pc, #456]	; 11e00 <__assert_fail@plt+0xb30>
   11c34:	mov	r4, sp
   11c38:	b	11c48 <__assert_fail@plt+0x978>
   11c3c:	ldr	ip, [r4, #8]!
   11c40:	cmp	ip, #0
   11c44:	beq	11c5c <__assert_fail@plt+0x98c>
   11c48:	mov	r1, ip
   11c4c:	mov	r0, r6
   11c50:	bl	10fdc <strcmp@plt>
   11c54:	cmp	r0, #0
   11c58:	bne	11c3c <__assert_fail@plt+0x96c>
   11c5c:	ldr	r4, [r4, #4]
   11c60:	mov	r2, #5
   11c64:	cmp	r4, #0
   11c68:	ldr	r1, [pc, #404]	; 11e04 <__assert_fail@plt+0xb34>
   11c6c:	beq	11d14 <__assert_fail@plt+0xa44>
   11c70:	mov	r0, #0
   11c74:	bl	11060 <dcgettext@plt>
   11c78:	ldr	r3, [pc, #392]	; 11e08 <__assert_fail@plt+0xb38>
   11c7c:	ldr	r2, [pc, #392]	; 11e0c <__assert_fail@plt+0xb3c>
   11c80:	mov	r1, r0
   11c84:	mov	r0, #1
   11c88:	bl	111a4 <__printf_chk@plt>
   11c8c:	mov	r1, #0
   11c90:	mov	r0, #5
   11c94:	bl	11204 <setlocale@plt>
   11c98:	cmp	r0, #0
   11c9c:	ldreq	r6, [pc, #348]	; 11e00 <__assert_fail@plt+0xb30>
   11ca0:	beq	11cbc <__assert_fail@plt+0x9ec>
   11ca4:	mov	r2, #3
   11ca8:	ldr	r1, [pc, #352]	; 11e10 <__assert_fail@plt+0xb40>
   11cac:	bl	11288 <strncmp@plt>
   11cb0:	ldr	r6, [pc, #328]	; 11e00 <__assert_fail@plt+0xb30>
   11cb4:	cmp	r0, #0
   11cb8:	bne	11da4 <__assert_fail@plt+0xad4>
   11cbc:	mov	r2, #5
   11cc0:	ldr	r1, [pc, #332]	; 11e14 <__assert_fail@plt+0xb44>
   11cc4:	mov	r0, #0
   11cc8:	bl	11060 <dcgettext@plt>
   11ccc:	ldr	r3, [pc, #300]	; 11e00 <__assert_fail@plt+0xb30>
   11cd0:	ldr	r2, [pc, #304]	; 11e08 <__assert_fail@plt+0xb38>
   11cd4:	mov	r1, r0
   11cd8:	mov	r0, #1
   11cdc:	bl	111a4 <__printf_chk@plt>
   11ce0:	mov	r2, #5
   11ce4:	ldr	r1, [pc, #300]	; 11e18 <__assert_fail@plt+0xb48>
   11ce8:	mov	r0, #0
   11cec:	bl	11060 <dcgettext@plt>
   11cf0:	ldr	r2, [pc, #292]	; 11e1c <__assert_fail@plt+0xb4c>
   11cf4:	cmp	r4, r6
   11cf8:	ldr	r3, [pc, #288]	; 11e20 <__assert_fail@plt+0xb50>
   11cfc:	movne	r3, r2
   11d00:	mov	r1, r0
   11d04:	mov	r2, r4
   11d08:	mov	r0, #1
   11d0c:	bl	111a4 <__printf_chk@plt>
   11d10:	b	11ad0 <__assert_fail@plt+0x800>
   11d14:	mov	r0, r4
   11d18:	bl	11060 <dcgettext@plt>
   11d1c:	ldr	r3, [pc, #228]	; 11e08 <__assert_fail@plt+0xb38>
   11d20:	ldr	r2, [pc, #228]	; 11e0c <__assert_fail@plt+0xb3c>
   11d24:	mov	r1, r0
   11d28:	mov	r0, #1
   11d2c:	bl	111a4 <__printf_chk@plt>
   11d30:	mov	r1, r4
   11d34:	mov	r0, #5
   11d38:	bl	11204 <setlocale@plt>
   11d3c:	cmp	r0, #0
   11d40:	beq	11d58 <__assert_fail@plt+0xa88>
   11d44:	mov	r2, #3
   11d48:	ldr	r1, [pc, #192]	; 11e10 <__assert_fail@plt+0xb40>
   11d4c:	bl	11288 <strncmp@plt>
   11d50:	cmp	r0, #0
   11d54:	bne	11d9c <__assert_fail@plt+0xacc>
   11d58:	mov	r2, #5
   11d5c:	ldr	r1, [pc, #176]	; 11e14 <__assert_fail@plt+0xb44>
   11d60:	mov	r0, #0
   11d64:	bl	11060 <dcgettext@plt>
   11d68:	ldr	r3, [pc, #144]	; 11e00 <__assert_fail@plt+0xb30>
   11d6c:	ldr	r2, [pc, #148]	; 11e08 <__assert_fail@plt+0xb38>
   11d70:	mov	r4, r3
   11d74:	mov	r1, r0
   11d78:	mov	r0, #1
   11d7c:	bl	111a4 <__printf_chk@plt>
   11d80:	ldr	r1, [pc, #144]	; 11e18 <__assert_fail@plt+0xb48>
   11d84:	mov	r2, #5
   11d88:	mov	r0, #0
   11d8c:	bl	11060 <dcgettext@plt>
   11d90:	ldr	r3, [pc, #136]	; 11e20 <__assert_fail@plt+0xb50>
   11d94:	mov	r1, r0
   11d98:	b	11d04 <__assert_fail@plt+0xa34>
   11d9c:	ldr	r6, [pc, #92]	; 11e00 <__assert_fail@plt+0xb30>
   11da0:	mov	r4, r6
   11da4:	mov	r2, #5
   11da8:	ldr	r1, [pc, #116]	; 11e24 <__assert_fail@plt+0xb54>
   11dac:	mov	r0, #0
   11db0:	bl	11060 <dcgettext@plt>
   11db4:	ldr	r1, [r7]
   11db8:	bl	10fb8 <fputs_unlocked@plt>
   11dbc:	b	11cbc <__assert_fail@plt+0x9ec>
   11dc0:	andeq	r0, r3, r8, lsl #3
   11dc4:	andeq	sp, r1, r8, ror lr
   11dc8:			; <UNDEFINED> instruction: 0x000301bc
   11dcc:	andeq	sp, r1, r0, lsr #29
   11dd0:	muleq	r3, r4, r1
   11dd4:	andeq	sp, r1, r4, asr #29
   11dd8:	andeq	sp, r1, r4, ror #30
   11ddc:	ldrdeq	lr, [r1], -ip
   11de0:			; <UNDEFINED> instruction: 0x0001e1bc
   11de4:			; <UNDEFINED> instruction: 0x0001e2bc
   11de8:	andeq	lr, r1, ip, ror #6
   11dec:	muleq	r1, ip, r3
   11df0:	ldrdeq	lr, [r1], -r4
   11df4:	andeq	lr, r1, r0, ror r4
   11df8:	andeq	sp, r1, r0, asr #26
   11dfc:	andeq	lr, r1, ip, ror #9
   11e00:	andeq	sp, r1, r4, ror lr
   11e04:	ldrdeq	lr, [r1], -r4
   11e08:	andeq	lr, r1, ip, ror #11
   11e0c:	andeq	lr, r1, r4, lsl r6
   11e10:	andeq	lr, r1, r4, lsr #12
   11e14:	andeq	lr, r1, r0, ror r6
   11e18:	andeq	lr, r1, ip, lsl #13
   11e1c:	andeq	lr, r1, r8, lsl #30
   11e20:			; <UNDEFINED> instruction: 0x0001e8bc
   11e24:	andeq	lr, r1, r8, lsr #12
   11e28:	cmp	r3, #0
   11e2c:	push	{r4, r5, r6, r7, r8, lr}
   11e30:	mov	r6, r2
   11e34:	sub	sp, sp, #112	; 0x70
   11e38:	movne	r2, #512	; 0x200
   11e3c:	moveq	r2, #0
   11e40:	mov	r5, r0
   11e44:	mov	r4, r1
   11e48:	ldr	r0, [r0]
   11e4c:	ldr	r1, [r1, #24]
   11e50:	mov	r7, r3
   11e54:	bl	10ff4 <unlinkat@plt>
   11e58:	cmp	r0, #0
   11e5c:	bne	11eac <__assert_fail@plt+0xbdc>
   11e60:	ldrb	r3, [r6, #18]
   11e64:	cmp	r3, #0
   11e68:	beq	11f78 <__assert_fail@plt+0xca8>
   11e6c:	cmp	r7, #0
   11e70:	mov	r2, #5
   11e74:	ldrne	r1, [pc, #396]	; 12008 <__assert_fail@plt+0xd38>
   11e78:	ldreq	r1, [pc, #396]	; 1200c <__assert_fail@plt+0xd3c>
   11e7c:	bl	11060 <dcgettext@plt>
   11e80:	ldr	r1, [r4, #28]
   11e84:	mov	r5, r0
   11e88:	mov	r0, #4
   11e8c:	bl	1a2cc <__assert_fail@plt+0x8ffc>
   11e90:	mov	r1, r5
   11e94:	mov	r2, r0
   11e98:	mov	r0, #1
   11e9c:	bl	111a4 <__printf_chk@plt>
   11ea0:	mov	r0, #2
   11ea4:	add	sp, sp, #112	; 0x70
   11ea8:	pop	{r4, r5, r6, r7, r8, pc}
   11eac:	bl	11180 <__errno_location@plt>
   11eb0:	ldr	r7, [r0]
   11eb4:	mov	r8, r0
   11eb8:	cmp	r7, #30
   11ebc:	beq	11f90 <__assert_fail@plt+0xcc0>
   11ec0:	ldrb	r3, [r6]
   11ec4:	cmp	r3, #0
   11ec8:	bne	11f5c <__assert_fail@plt+0xc8c>
   11ecc:	ldrh	r3, [r4, #56]	; 0x38
   11ed0:	cmp	r3, #4
   11ed4:	beq	11fc0 <__assert_fail@plt+0xcf0>
   11ed8:	mov	r2, #5
   11edc:	ldr	r1, [pc, #300]	; 12010 <__assert_fail@plt+0xd40>
   11ee0:	mov	r0, #0
   11ee4:	bl	11060 <dcgettext@plt>
   11ee8:	ldr	r1, [r4, #28]
   11eec:	mov	r5, r0
   11ef0:	mov	r0, #4
   11ef4:	bl	1a2cc <__assert_fail@plt+0x8ffc>
   11ef8:	mov	r2, r5
   11efc:	mov	r1, r7
   11f00:	mov	r3, r0
   11f04:	mov	r0, #0
   11f08:	bl	110f0 <error@plt>
   11f0c:	ldr	r3, [r4, #4]
   11f10:	ldr	r2, [r3, #48]	; 0x30
   11f14:	cmp	r2, #0
   11f18:	blt	11f50 <__assert_fail@plt+0xc80>
   11f1c:	ldr	r2, [r3, #16]
   11f20:	cmp	r2, #0
   11f24:	moveq	r1, #1
   11f28:	beq	11f3c <__assert_fail@plt+0xc6c>
   11f2c:	b	11f50 <__assert_fail@plt+0xc80>
   11f30:	ldr	r2, [r3, #16]
   11f34:	cmp	r2, #0
   11f38:	bne	11f50 <__assert_fail@plt+0xc80>
   11f3c:	str	r1, [r3, #16]
   11f40:	ldr	r3, [r3, #4]
   11f44:	ldr	r2, [r3, #48]	; 0x30
   11f48:	cmp	r2, #0
   11f4c:	bge	11f30 <__assert_fail@plt+0xc60>
   11f50:	mov	r0, #4
   11f54:	add	sp, sp, #112	; 0x70
   11f58:	pop	{r4, r5, r6, r7, r8, pc}
   11f5c:	cmp	r7, #20
   11f60:	beq	11f78 <__assert_fail@plt+0xca8>
   11f64:	ble	11f84 <__assert_fail@plt+0xcb4>
   11f68:	cmp	r7, #22
   11f6c:	beq	11f78 <__assert_fail@plt+0xca8>
   11f70:	cmp	r7, #84	; 0x54
   11f74:	bne	11ecc <__assert_fail@plt+0xbfc>
   11f78:	mov	r0, #2
   11f7c:	add	sp, sp, #112	; 0x70
   11f80:	pop	{r4, r5, r6, r7, r8, pc}
   11f84:	cmp	r7, #2
   11f88:	bne	11ecc <__assert_fail@plt+0xbfc>
   11f8c:	b	11f78 <__assert_fail@plt+0xca8>
   11f90:	mov	r3, #256	; 0x100
   11f94:	ldr	r1, [r5]
   11f98:	ldr	r2, [r4, #24]
   11f9c:	mov	r0, #3
   11fa0:	str	r3, [sp]
   11fa4:	add	r3, sp, #8
   11fa8:	bl	11090 <__fxstatat64@plt>
   11fac:	cmp	r0, #0
   11fb0:	bne	11ff4 <__assert_fail@plt+0xd24>
   11fb4:	mov	r3, #30
   11fb8:	str	r3, [r8]
   11fbc:	b	11ec0 <__assert_fail@plt+0xbf0>
   11fc0:	sub	r2, r7, #17
   11fc4:	cmp	r2, #22
   11fc8:	bhi	11ed8 <__assert_fail@plt+0xc08>
   11fcc:	ldr	r3, [pc, #64]	; 12014 <__assert_fail@plt+0xd44>
   11fd0:	mvn	r3, r3, lsr r2
   11fd4:	tst	r3, #1
   11fd8:	bne	11ed8 <__assert_fail@plt+0xc08>
   11fdc:	ldr	r3, [r4, #32]
   11fe0:	cmp	r3, #13
   11fe4:	cmpne	r3, #1
   11fe8:	moveq	r7, r3
   11fec:	streq	r3, [r8]
   11ff0:	b	11ed8 <__assert_fail@plt+0xc08>
   11ff4:	ldr	r3, [r8]
   11ff8:	cmp	r3, #2
   11ffc:	moveq	r7, r3
   12000:	bne	11fb4 <__assert_fail@plt+0xce4>
   12004:	b	11ec0 <__assert_fail@plt+0xbf0>
   12008:	ldrdeq	lr, [r1], -r0
   1200c:	andeq	lr, r1, r8, ror #19
   12010:	strdeq	lr, [r1], -r4
   12014:	subeq	r0, r0, r9, lsl r0
   12018:	ldr	r3, [r0]
   1201c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12020:	cmp	r3, #0
   12024:	sub	sp, sp, #140	; 0x8c
   12028:	beq	126f8 <__assert_fail@plt+0x1428>
   1202c:	mov	r8, r1
   12030:	ldrb	r1, [r1, #8]
   12034:	mov	r2, #0
   12038:	ldr	r9, [pc, #3960]	; 12fb8 <__assert_fail@plt+0x1ce8>
   1203c:	cmp	r1, r2
   12040:	movne	r1, #600	; 0x258
   12044:	moveq	r1, #536	; 0x218
   12048:	bl	1cf48 <__assert_fail@plt+0xbc78>
   1204c:	mov	fp, #2
   12050:	mov	sl, r0
   12054:	mov	r0, sl
   12058:	bl	15810 <__assert_fail@plt+0x4540>
   1205c:	subs	r4, r0, #0
   12060:	beq	12114 <__assert_fail@plt+0xe44>
   12064:	ldrh	r5, [r4, #56]	; 0x38
   12068:	sub	r3, r5, #1
   1206c:	cmp	r3, #12
   12070:	ldrls	pc, [pc, r3, lsl #2]
   12074:	b	123dc <__assert_fail@plt+0x110c>
   12078:	andeq	r2, r1, r4, asr #6
   1207c:	andeq	r2, r1, r8, lsl #6
   12080:	andeq	r2, r1, r4, ror #2
   12084:	andeq	r2, r1, r4, ror #2
   12088:	ldrdeq	r2, [r1], -ip
   1208c:	andeq	r2, r1, r4, ror #2
   12090:	andeq	r2, r1, ip, lsr #1
   12094:	andeq	r2, r1, r4, ror #2
   12098:	ldrdeq	r2, [r1], -ip
   1209c:	andeq	r2, r1, r4, ror #2
   120a0:	andeq	r2, r1, r4, ror #2
   120a4:	andeq	r2, r1, r4, ror #2
   120a8:	andeq	r2, r1, r4, ror #2
   120ac:	mov	r2, #5
   120b0:	ldr	r1, [pc, #3844]	; 12fbc <__assert_fail@plt+0x1cec>
   120b4:	mov	r0, #0
   120b8:	ldr	r5, [r4, #32]
   120bc:	bl	11060 <dcgettext@plt>
   120c0:	ldr	r2, [r4, #28]
   120c4:	mov	r1, #3
   120c8:	mov	r6, r0
   120cc:	mov	r0, #0
   120d0:	bl	1ad48 <__assert_fail@plt+0x9a78>
   120d4:	mov	r2, r6
   120d8:	mov	r1, r5
   120dc:	mov	r3, r0
   120e0:	mov	r0, #0
   120e4:	bl	110f0 <error@plt>
   120e8:	mov	r1, r4
   120ec:	mov	r2, #4
   120f0:	mov	r0, sl
   120f4:	bl	16168 <__assert_fail@plt+0x4e98>
   120f8:	mov	r0, sl
   120fc:	bl	15810 <__assert_fail@plt+0x4540>
   12100:	mov	r0, sl
   12104:	bl	15810 <__assert_fail@plt+0x4540>
   12108:	mov	fp, #4
   1210c:	subs	r4, r0, #0
   12110:	bne	12064 <__assert_fail@plt+0xd94>
   12114:	bl	11180 <__errno_location@plt>
   12118:	ldr	r6, [r0]
   1211c:	mov	r5, r0
   12120:	cmp	r6, #0
   12124:	bne	12af4 <__assert_fail@plt+0x1824>
   12128:	mov	r0, sl
   1212c:	bl	15648 <__assert_fail@plt+0x4378>
   12130:	cmp	r0, #0
   12134:	beq	126fc <__assert_fail@plt+0x142c>
   12138:	mov	r2, #5
   1213c:	ldr	r1, [pc, #3708]	; 12fc0 <__assert_fail@plt+0x1cf0>
   12140:	mov	r0, #0
   12144:	ldr	r4, [r5]
   12148:	bl	11060 <dcgettext@plt>
   1214c:	mov	r1, r4
   12150:	mov	fp, #4
   12154:	mov	r2, r0
   12158:	mov	r0, #0
   1215c:	bl	110f0 <error@plt>
   12160:	b	126fc <__assert_fail@plt+0x142c>
   12164:	cmp	r5, #6
   12168:	beq	125f4 <__assert_fail@plt+0x1324>
   1216c:	mvn	r3, #0
   12170:	bic	r5, r5, #2
   12174:	mvn	r2, #0
   12178:	uxth	r5, r5
   1217c:	ldr	r1, [r4, #24]
   12180:	ldr	r7, [r4, #28]
   12184:	strd	r2, [sp, #80]	; 0x50
   12188:	ldr	r3, [sl, #32]
   1218c:	cmp	r5, #4
   12190:	str	r3, [sp, #16]
   12194:	movne	r3, #1
   12198:	moveq	r3, #0
   1219c:	strne	r3, [sp, #12]
   121a0:	streq	r3, [sp, #12]
   121a4:	ldr	r3, [r4, #16]
   121a8:	movne	r6, #0
   121ac:	movne	r5, r6
   121b0:	moveq	r6, #1
   121b4:	cmp	r3, #0
   121b8:	str	r1, [sp, #20]
   121bc:	bne	126dc <__assert_fail@plt+0x140c>
   121c0:	ldr	r3, [r8, #4]
   121c4:	cmp	r3, #5
   121c8:	beq	122c4 <__assert_fail@plt+0xff4>
   121cc:	ldrb	r2, [r8]
   121d0:	cmp	r2, #0
   121d4:	bne	121fc <__assert_fail@plt+0xf2c>
   121d8:	cmp	r3, #3
   121dc:	beq	121ec <__assert_fail@plt+0xf1c>
   121e0:	ldrb	r3, [r8, #17]
   121e4:	cmp	r3, #0
   121e8:	beq	122c4 <__assert_fail@plt+0xff4>
   121ec:	bl	1c850 <__assert_fail@plt+0xb580>
   121f0:	cmp	r0, #0
   121f4:	beq	129a0 <__assert_fail@plt+0x16d0>
   121f8:	ldr	r3, [r8, #4]
   121fc:	cmp	r3, #3
   12200:	moveq	r3, #0
   12204:	streq	r3, [sp, #24]
   12208:	bne	122c4 <__assert_fail@plt+0xff4>
   1220c:	ldr	r3, [sp, #12]
   12210:	cmp	r3, #0
   12214:	bne	12a48 <__assert_fail@plt+0x1778>
   12218:	cmp	r5, #4
   1221c:	bne	12234 <__assert_fail@plt+0xf64>
   12220:	ldrb	r3, [r8, #9]
   12224:	cmp	r3, #0
   12228:	moveq	r3, #21
   1222c:	streq	r3, [sp, #24]
   12230:	beq	12a0c <__assert_fail@plt+0x173c>
   12234:	mov	r1, r7
   12238:	mov	r0, #4
   1223c:	bl	1a2cc <__assert_fail@plt+0x8ffc>
   12240:	ldrd	r2, [sp, #80]	; 0x50
   12244:	mvn	r1, #0
   12248:	cmp	r3, r1
   1224c:	mov	r7, r0
   12250:	mvn	r0, #0
   12254:	cmpeq	r2, r0
   12258:	beq	12edc <__assert_fail@plt+0x1c0c>
   1225c:	cmp	r2, #0
   12260:	sbcs	r3, r3, #0
   12264:	blt	130a0 <__assert_fail@plt+0x1dd0>
   12268:	ldr	r3, [sp, #24]
   1226c:	cmp	r3, #0
   12270:	ldr	r3, [pc, #3404]	; 12fc4 <__assert_fail@plt+0x1cf4>
   12274:	ldr	r5, [r3]
   12278:	beq	12cfc <__assert_fail@plt+0x1a2c>
   1227c:	mov	r2, #5
   12280:	ldr	r1, [pc, #3392]	; 12fc8 <__assert_fail@plt+0x1cf8>
   12284:	mov	r0, #0
   12288:	bl	11060 <dcgettext@plt>
   1228c:	str	r0, [sp, #12]
   12290:	add	r0, sp, #32
   12294:	bl	139ac <__assert_fail@plt+0x26dc>
   12298:	ldr	r3, [pc, #3372]	; 12fcc <__assert_fail@plt+0x1cfc>
   1229c:	ldr	r2, [sp, #12]
   122a0:	mov	r1, #1
   122a4:	ldr	r3, [r3]
   122a8:	str	r7, [sp, #4]
   122ac:	str	r0, [sp]
   122b0:	mov	r0, r5
   122b4:	bl	111bc <__fprintf_chk@plt>
   122b8:	bl	1cfc8 <__assert_fail@plt+0xbcf8>
   122bc:	cmp	r0, #0
   122c0:	beq	126dc <__assert_fail@plt+0x140c>
   122c4:	mov	r3, r6
   122c8:	mov	r1, r4
   122cc:	mov	r2, r8
   122d0:	add	r0, sl, #32
   122d4:	bl	11e28 <__assert_fail@plt+0xb58>
   122d8:	mov	r5, r0
   122dc:	sub	r6, r0, #2
   122e0:	cmp	r6, #2
   122e4:	bhi	13074 <__assert_fail@plt+0x1da4>
   122e8:	cmp	r5, #4
   122ec:	moveq	fp, r5
   122f0:	beq	12054 <__assert_fail@plt+0xd84>
   122f4:	cmp	r5, #3
   122f8:	cmpeq	fp, #2
   122fc:	moveq	r3, #1
   12300:	movne	r3, #0
   12304:	b	126ec <__assert_fail@plt+0x141c>
   12308:	mov	r1, r9
   1230c:	mov	r2, #5
   12310:	mov	r0, #0
   12314:	bl	11060 <dcgettext@plt>
   12318:	ldr	r2, [r4, #28]
   1231c:	mov	r1, #3
   12320:	mov	r5, r0
   12324:	mov	r0, #0
   12328:	bl	1ad48 <__assert_fail@plt+0x9a78>
   1232c:	mov	r1, #0
   12330:	mov	r2, r5
   12334:	mov	r3, r0
   12338:	mov	r0, r1
   1233c:	bl	110f0 <error@plt>
   12340:	b	120e8 <__assert_fail@plt+0xe18>
   12344:	ldrb	r5, [r8, #9]
   12348:	cmp	r5, #0
   1234c:	bne	1243c <__assert_fail@plt+0x116c>
   12350:	ldrb	r3, [r8, #10]
   12354:	cmp	r3, #0
   12358:	bne	128e8 <__assert_fail@plt+0x1618>
   1235c:	mov	r6, #21
   12360:	mov	r2, #5
   12364:	ldr	r1, [pc, #3236]	; 13010 <__assert_fail@plt+0x1d40>
   12368:	mov	r0, #0
   1236c:	bl	11060 <dcgettext@plt>
   12370:	ldr	r1, [r4, #28]
   12374:	mov	r5, r0
   12378:	mov	r0, #4
   1237c:	bl	1a2cc <__assert_fail@plt+0x8ffc>
   12380:	mov	r2, r5
   12384:	mov	r1, r6
   12388:	mov	r3, r0
   1238c:	mov	r0, #0
   12390:	bl	110f0 <error@plt>
   12394:	ldr	r3, [r4, #4]
   12398:	ldr	r2, [r3, #48]	; 0x30
   1239c:	cmp	r2, #0
   123a0:	blt	120e8 <__assert_fail@plt+0xe18>
   123a4:	ldr	r2, [r3, #16]
   123a8:	cmp	r2, #0
   123ac:	moveq	r1, #1
   123b0:	beq	123c4 <__assert_fail@plt+0x10f4>
   123b4:	b	120e8 <__assert_fail@plt+0xe18>
   123b8:	ldr	r2, [r3, #16]
   123bc:	cmp	r2, #0
   123c0:	bne	120e8 <__assert_fail@plt+0xe18>
   123c4:	str	r1, [r3, #16]
   123c8:	ldr	r3, [r3, #4]
   123cc:	ldr	r2, [r3, #48]	; 0x30
   123d0:	cmp	r2, #0
   123d4:	bge	123b8 <__assert_fail@plt+0x10e8>
   123d8:	b	120e8 <__assert_fail@plt+0xe18>
   123dc:	mov	r2, #5
   123e0:	ldr	r1, [pc, #3048]	; 12fd0 <__assert_fail@plt+0x1d00>
   123e4:	mov	r0, #0
   123e8:	bl	11060 <dcgettext@plt>
   123ec:	ldr	r2, [r4, #28]
   123f0:	mov	r1, #3
   123f4:	ldrh	r4, [r4, #56]	; 0x38
   123f8:	mov	r5, r0
   123fc:	mov	r0, #0
   12400:	bl	1ad48 <__assert_fail@plt+0x9a78>
   12404:	ldr	ip, [pc, #3016]	; 12fd4 <__assert_fail@plt+0x1d04>
   12408:	mov	r1, #0
   1240c:	mov	r3, r4
   12410:	mov	r2, r5
   12414:	stm	sp, {r0, ip}
   12418:	mov	r0, r1
   1241c:	bl	110f0 <error@plt>
   12420:	bl	11294 <abort@plt>
   12424:	ldr	r5, [r7]
   12428:	mov	r0, r6
   1242c:	bl	112c4 <closedir@plt>
   12430:	cmp	r5, #0
   12434:	str	r5, [r7]
   12438:	bne	1296c <__assert_fail@plt+0x169c>
   1243c:	ldr	r6, [r4, #48]	; 0x30
   12440:	cmp	r6, #0
   12444:	bne	127b0 <__assert_fail@plt+0x14e0>
   12448:	ldr	r5, [r4, #24]
   1244c:	mov	r0, r5
   12450:	bl	1366c <__assert_fail@plt+0x239c>
   12454:	ldrb	r3, [r0]
   12458:	cmp	r3, #46	; 0x2e
   1245c:	beq	12708 <__assert_fail@plt+0x1438>
   12460:	ldr	ip, [r8, #12]
   12464:	cmp	ip, #0
   12468:	beq	12480 <__assert_fail@plt+0x11b0>
   1246c:	ldrd	r0, [r4, #160]	; 0xa0
   12470:	ldrd	r2, [ip]
   12474:	cmp	r1, r3
   12478:	cmpeq	r0, r2
   1247c:	beq	12b1c <__assert_fail@plt+0x184c>
   12480:	ldrb	r3, [r8, #16]
   12484:	cmp	r3, #0
   12488:	str	r3, [sp, #12]
   1248c:	bne	12b98 <__assert_fail@plt+0x18c8>
   12490:	ldr	r3, [sl, #32]
   12494:	mvn	r7, #0
   12498:	str	r3, [sp, #20]
   1249c:	mov	r0, r3
   124a0:	mvn	r6, #0
   124a4:	ldr	r3, [r4, #28]
   124a8:	mov	r2, #51456	; 0xc900
   124ac:	mov	r1, r5
   124b0:	strd	r6, [sp, #80]	; 0x50
   124b4:	str	r3, [sp, #16]
   124b8:	bl	11174 <openat64@plt>
   124bc:	str	r5, [sp, #24]
   124c0:	subs	r7, r0, #0
   124c4:	bge	127ec <__assert_fail@plt+0x151c>
   124c8:	mov	r5, #3
   124cc:	ldr	r3, [r4, #16]
   124d0:	cmp	r3, #0
   124d4:	bne	12880 <__assert_fail@plt+0x15b0>
   124d8:	ldr	r3, [r8, #4]
   124dc:	cmp	r3, #5
   124e0:	beq	125ac <__assert_fail@plt+0x12dc>
   124e4:	ldrb	r2, [r8]
   124e8:	cmp	r2, #0
   124ec:	beq	12980 <__assert_fail@plt+0x16b0>
   124f0:	cmp	r3, #3
   124f4:	moveq	r7, #0
   124f8:	bne	125ac <__assert_fail@plt+0x12dc>
   124fc:	ldrb	r3, [r8, #9]
   12500:	cmp	r3, #0
   12504:	bne	12c20 <__assert_fail@plt+0x1950>
   12508:	ldrb	r3, [r8, #10]
   1250c:	ldr	r2, [sp, #12]
   12510:	tst	r2, r3
   12514:	moveq	r7, #21
   12518:	beq	12d64 <__assert_fail@plt+0x1a94>
   1251c:	ldr	r1, [sp, #16]
   12520:	mov	r0, #4
   12524:	bl	1a2cc <__assert_fail@plt+0x8ffc>
   12528:	str	r0, [sp, #16]
   1252c:	ldrd	r2, [sp, #80]	; 0x50
   12530:	mvn	r1, #0
   12534:	mvn	r0, #0
   12538:	cmp	r3, r1
   1253c:	cmpeq	r2, r0
   12540:	beq	12f08 <__assert_fail@plt+0x1c38>
   12544:	cmp	r2, #0
   12548:	sbcs	r3, r3, #0
   1254c:	blt	13094 <__assert_fail@plt+0x1dc4>
   12550:	ldr	r3, [pc, #2668]	; 12fc4 <__assert_fail@plt+0x1cf4>
   12554:	cmp	r7, #0
   12558:	ldr	r6, [r3]
   1255c:	beq	12db8 <__assert_fail@plt+0x1ae8>
   12560:	mov	r2, #5
   12564:	ldr	r1, [pc, #2652]	; 12fc8 <__assert_fail@plt+0x1cf8>
   12568:	mov	r0, #0
   1256c:	bl	11060 <dcgettext@plt>
   12570:	mov	r7, r0
   12574:	add	r0, sp, #32
   12578:	bl	139ac <__assert_fail@plt+0x26dc>
   1257c:	ldr	r3, [pc, #2632]	; 12fcc <__assert_fail@plt+0x1cfc>
   12580:	ldr	r2, [sp, #16]
   12584:	mov	r1, #1
   12588:	ldr	r3, [r3]
   1258c:	str	r2, [sp, #4]
   12590:	mov	r2, r7
   12594:	str	r0, [sp]
   12598:	mov	r0, r6
   1259c:	bl	111bc <__fprintf_chk@plt>
   125a0:	bl	1cfc8 <__assert_fail@plt+0xbcf8>
   125a4:	cmp	r0, #0
   125a8:	beq	12880 <__assert_fail@plt+0x15b0>
   125ac:	cmp	r5, #4
   125b0:	bne	12054 <__assert_fail@plt+0xd84>
   125b4:	mov	r3, #1
   125b8:	mov	r2, r8
   125bc:	mov	r1, r4
   125c0:	add	r0, sl, #32
   125c4:	bl	11e28 <__assert_fail@plt+0xb58>
   125c8:	cmp	r0, #2
   125cc:	mov	r5, r0
   125d0:	subne	r6, r0, #2
   125d4:	bne	12888 <__assert_fail@plt+0x15b8>
   125d8:	mov	r1, r4
   125dc:	mov	r2, #4
   125e0:	mov	r0, sl
   125e4:	bl	16168 <__assert_fail@plt+0x4e98>
   125e8:	mov	r0, sl
   125ec:	bl	15810 <__assert_fail@plt+0x4540>
   125f0:	b	12054 <__assert_fail@plt+0xd84>
   125f4:	ldrb	r3, [r8, #8]
   125f8:	cmp	r3, #0
   125fc:	beq	126a0 <__assert_fail@plt+0x13d0>
   12600:	ldr	r3, [r4, #48]	; 0x30
   12604:	cmp	r3, #0
   12608:	ble	126a0 <__assert_fail@plt+0x13d0>
   1260c:	ldrd	r0, [r4, #64]	; 0x40
   12610:	ldrd	r2, [sl, #16]
   12614:	cmp	r1, r3
   12618:	cmpeq	r0, r2
   1261c:	beq	126a0 <__assert_fail@plt+0x13d0>
   12620:	ldr	r3, [r4, #4]
   12624:	ldr	r2, [r3, #48]	; 0x30
   12628:	cmp	r2, #0
   1262c:	blt	12664 <__assert_fail@plt+0x1394>
   12630:	ldr	r2, [r3, #16]
   12634:	cmp	r2, #0
   12638:	moveq	r1, #1
   1263c:	beq	12650 <__assert_fail@plt+0x1380>
   12640:	b	12664 <__assert_fail@plt+0x1394>
   12644:	ldr	r2, [r3, #16]
   12648:	cmp	r2, #0
   1264c:	bne	12664 <__assert_fail@plt+0x1394>
   12650:	str	r1, [r3, #16]
   12654:	ldr	r3, [r3, #4]
   12658:	ldr	r2, [r3, #48]	; 0x30
   1265c:	cmp	r2, #0
   12660:	bge	12644 <__assert_fail@plt+0x1374>
   12664:	mov	r2, #5
   12668:	ldr	r1, [pc, #2408]	; 12fd8 <__assert_fail@plt+0x1d08>
   1266c:	mov	r0, #0
   12670:	bl	11060 <dcgettext@plt>
   12674:	ldr	r1, [r4, #28]
   12678:	mov	fp, #4
   1267c:	mov	r5, r0
   12680:	mov	r0, #4
   12684:	bl	1a2cc <__assert_fail@plt+0x8ffc>
   12688:	mov	r1, #0
   1268c:	mov	r2, r5
   12690:	mov	r3, r0
   12694:	mov	r0, r1
   12698:	bl	110f0 <error@plt>
   1269c:	b	12054 <__assert_fail@plt+0xd84>
   126a0:	mvn	r3, #0
   126a4:	mvn	r2, #0
   126a8:	ldr	r1, [r4, #24]
   126ac:	ldr	r7, [r4, #28]
   126b0:	strd	r2, [sp, #80]	; 0x50
   126b4:	mov	r3, #0
   126b8:	str	r3, [sp, #12]
   126bc:	ldr	r3, [r4, #16]
   126c0:	str	r1, [sp, #20]
   126c4:	ldr	r1, [sl, #32]
   126c8:	cmp	r3, #0
   126cc:	str	r1, [sp, #16]
   126d0:	mov	r6, #1
   126d4:	mov	r5, #4
   126d8:	beq	121c0 <__assert_fail@plt+0xef0>
   126dc:	sub	r3, fp, #2
   126e0:	mov	r5, #3
   126e4:	clz	r3, r3
   126e8:	lsr	r3, r3, #5
   126ec:	cmp	r3, #0
   126f0:	movne	fp, r5
   126f4:	b	12054 <__assert_fail@plt+0xd84>
   126f8:	mov	fp, #2
   126fc:	mov	r0, fp
   12700:	add	sp, sp, #140	; 0x8c
   12704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12708:	ldrb	r3, [r0, #1]
   1270c:	cmp	r3, #46	; 0x2e
   12710:	movne	r3, #1
   12714:	moveq	r3, #2
   12718:	ldrb	r3, [r0, r3]
   1271c:	cmp	r3, #47	; 0x2f
   12720:	cmpne	r3, #0
   12724:	bne	12460 <__assert_fail@plt+0x1190>
   12728:	mov	r2, #5
   1272c:	ldr	r1, [pc, #2216]	; 12fdc <__assert_fail@plt+0x1d0c>
   12730:	mov	r0, r6
   12734:	bl	11060 <dcgettext@plt>
   12738:	ldr	r2, [pc, #2208]	; 12fe0 <__assert_fail@plt+0x1d10>
   1273c:	mov	r1, #4
   12740:	mov	r5, r0
   12744:	mov	r0, r6
   12748:	bl	19eec <__assert_fail@plt+0x8c1c>
   1274c:	ldr	r2, [pc, #2192]	; 12fe4 <__assert_fail@plt+0x1d14>
   12750:	mov	r1, #4
   12754:	mov	r7, r0
   12758:	mov	r0, #1
   1275c:	bl	19eec <__assert_fail@plt+0x8c1c>
   12760:	ldr	r2, [r4, #28]
   12764:	mov	r1, #4
   12768:	mov	fp, r0
   1276c:	mov	r0, #2
   12770:	bl	19eec <__assert_fail@plt+0x8c1c>
   12774:	str	fp, [sp]
   12778:	mov	r3, r7
   1277c:	mov	r2, r5
   12780:	mov	r1, r6
   12784:	mov	fp, #4
   12788:	str	r0, [sp, #4]
   1278c:	mov	r0, r6
   12790:	bl	110f0 <error@plt>
   12794:	mov	r1, r4
   12798:	mov	r2, fp
   1279c:	mov	r0, sl
   127a0:	bl	16168 <__assert_fail@plt+0x4e98>
   127a4:	mov	r0, sl
   127a8:	bl	15810 <__assert_fail@plt+0x4540>
   127ac:	b	12054 <__assert_fail@plt+0xd84>
   127b0:	ldr	r3, [sl, #32]
   127b4:	ldr	r2, [r4, #24]
   127b8:	str	r3, [sp, #20]
   127bc:	mvn	r7, #0
   127c0:	mov	r0, r3
   127c4:	mvn	r6, #0
   127c8:	ldr	r3, [r4, #28]
   127cc:	str	r2, [sp, #24]
   127d0:	mov	r1, r2
   127d4:	mov	r2, #51456	; 0xc900
   127d8:	strd	r6, [sp, #80]	; 0x50
   127dc:	str	r3, [sp, #16]
   127e0:	bl	11174 <openat64@plt>
   127e4:	subs	r7, r0, #0
   127e8:	blt	12a88 <__assert_fail@plt+0x17b8>
   127ec:	mov	r0, r7
   127f0:	bl	11234 <fdopendir@plt>
   127f4:	subs	r5, r0, #0
   127f8:	beq	12da4 <__assert_fail@plt+0x1ad4>
   127fc:	bl	11180 <__errno_location@plt>
   12800:	mov	r3, #0
   12804:	mov	r7, r0
   12808:	str	r3, [r0]
   1280c:	b	12838 <__assert_fail@plt+0x1568>
   12810:	ldrb	r3, [r0, #20]
   12814:	cmp	r3, #46	; 0x2e
   12818:	movne	r3, #1
   1281c:	moveq	r3, #2
   12820:	ldrb	r6, [r2, r3]
   12824:	cmp	r6, #47	; 0x2f
   12828:	cmpne	r6, #0
   1282c:	moveq	r6, #1
   12830:	movne	r6, #0
   12834:	bne	12ad0 <__assert_fail@plt+0x1800>
   12838:	mov	r0, r5
   1283c:	bl	11228 <readdir64@plt>
   12840:	cmp	r0, #0
   12844:	beq	12a94 <__assert_fail@plt+0x17c4>
   12848:	ldrb	r3, [r0, #19]
   1284c:	add	r2, r0, #19
   12850:	cmp	r3, #46	; 0x2e
   12854:	beq	12810 <__assert_fail@plt+0x1540>
   12858:	ldr	r3, [r7]
   1285c:	mov	r0, r5
   12860:	str	r3, [sp, #28]
   12864:	bl	112c4 <closedir@plt>
   12868:	mov	r3, #0
   1286c:	str	r3, [sp, #12]
   12870:	ldr	r3, [sp, #28]
   12874:	mov	r5, #3
   12878:	str	r3, [r7]
   1287c:	b	124cc <__assert_fail@plt+0x11fc>
   12880:	mov	r6, #1
   12884:	mov	r5, #3
   12888:	ldr	r3, [r4, #4]
   1288c:	ldr	r2, [r3, #48]	; 0x30
   12890:	cmp	r2, #0
   12894:	blt	128cc <__assert_fail@plt+0x15fc>
   12898:	ldr	r2, [r3, #16]
   1289c:	cmp	r2, #0
   128a0:	moveq	r1, #1
   128a4:	beq	128b8 <__assert_fail@plt+0x15e8>
   128a8:	b	128cc <__assert_fail@plt+0x15fc>
   128ac:	ldr	r2, [r3, #16]
   128b0:	cmp	r2, #0
   128b4:	bne	128cc <__assert_fail@plt+0x15fc>
   128b8:	str	r1, [r3, #16]
   128bc:	ldr	r3, [r3, #4]
   128c0:	ldr	r2, [r3, #48]	; 0x30
   128c4:	cmp	r2, #0
   128c8:	bge	128ac <__assert_fail@plt+0x15dc>
   128cc:	mov	r1, r4
   128d0:	mov	r2, #4
   128d4:	mov	r0, sl
   128d8:	bl	16168 <__assert_fail@plt+0x4e98>
   128dc:	mov	r0, sl
   128e0:	bl	15810 <__assert_fail@plt+0x4540>
   128e4:	b	122e0 <__assert_fail@plt+0x1010>
   128e8:	mov	r2, #51456	; 0xc900
   128ec:	ldr	r1, [r4, #24]
   128f0:	ldr	r0, [sl, #32]
   128f4:	bl	11174 <openat64@plt>
   128f8:	subs	r7, r0, #0
   128fc:	blt	1296c <__assert_fail@plt+0x169c>
   12900:	bl	11234 <fdopendir@plt>
   12904:	subs	r6, r0, #0
   12908:	beq	12f60 <__assert_fail@plt+0x1c90>
   1290c:	bl	11180 <__errno_location@plt>
   12910:	mov	r7, r0
   12914:	str	r5, [r0]
   12918:	b	1293c <__assert_fail@plt+0x166c>
   1291c:	ldrb	r3, [r0, #20]
   12920:	cmp	r3, #46	; 0x2e
   12924:	movne	r3, #1
   12928:	moveq	r3, #2
   1292c:	ldrb	r3, [r2, r3]
   12930:	cmp	r3, #47	; 0x2f
   12934:	cmpne	r3, #0
   12938:	bne	1295c <__assert_fail@plt+0x168c>
   1293c:	mov	r0, r6
   12940:	bl	11228 <readdir64@plt>
   12944:	cmp	r0, #0
   12948:	beq	12424 <__assert_fail@plt+0x1154>
   1294c:	ldrb	r3, [r0, #19]
   12950:	add	r2, r0, #19
   12954:	cmp	r3, #46	; 0x2e
   12958:	beq	1291c <__assert_fail@plt+0x164c>
   1295c:	ldr	r5, [r7]
   12960:	mov	r0, r6
   12964:	bl	112c4 <closedir@plt>
   12968:	str	r5, [r7]
   1296c:	ldrb	r3, [r8, #10]
   12970:	cmp	r3, #0
   12974:	movne	r6, #39	; 0x27
   12978:	bne	12360 <__assert_fail@plt+0x1090>
   1297c:	b	1235c <__assert_fail@plt+0x108c>
   12980:	cmp	r3, #3
   12984:	beq	12c8c <__assert_fail@plt+0x19bc>
   12988:	ldrb	r3, [r8, #17]
   1298c:	cmp	r3, #0
   12990:	bne	12c8c <__assert_fail@plt+0x19bc>
   12994:	cmp	r5, #4
   12998:	bne	12054 <__assert_fail@plt+0xd84>
   1299c:	b	125b4 <__assert_fail@plt+0x12e4>
   129a0:	ldrd	r2, [sp, #80]	; 0x50
   129a4:	mvn	r1, #0
   129a8:	mvn	r0, #0
   129ac:	cmp	r3, r1
   129b0:	cmpeq	r2, r0
   129b4:	beq	12f34 <__assert_fail@plt+0x1c64>
   129b8:	cmp	r2, #0
   129bc:	sbcs	r3, r3, #0
   129c0:	blt	13088 <__assert_fail@plt+0x1db8>
   129c4:	ldr	r3, [sp, #48]	; 0x30
   129c8:	and	r3, r3, #61440	; 0xf000
   129cc:	cmp	r3, #40960	; 0xa000
   129d0:	beq	121f8 <__assert_fail@plt+0xf28>
   129d4:	mov	r3, #512	; 0x200
   129d8:	mov	r2, #2
   129dc:	ldr	r1, [sp, #20]
   129e0:	ldr	r0, [sp, #16]
   129e4:	bl	11018 <faccessat@plt>
   129e8:	cmp	r0, #0
   129ec:	beq	121f8 <__assert_fail@plt+0xf28>
   129f0:	bl	11180 <__errno_location@plt>
   129f4:	ldr	r3, [r0]
   129f8:	cmp	r3, #13
   129fc:	str	r3, [sp, #24]
   12a00:	moveq	r3, #1
   12a04:	streq	r3, [sp, #24]
   12a08:	beq	1220c <__assert_fail@plt+0xf3c>
   12a0c:	mov	r1, r7
   12a10:	mov	r0, #4
   12a14:	bl	1a2cc <__assert_fail@plt+0x8ffc>
   12a18:	mov	r2, #5
   12a1c:	ldr	r1, [pc, #1516]	; 13010 <__assert_fail@plt+0x1d40>
   12a20:	mov	fp, #4
   12a24:	mov	r4, r0
   12a28:	mov	r0, #0
   12a2c:	bl	11060 <dcgettext@plt>
   12a30:	mov	r3, r4
   12a34:	ldr	r1, [sp, #24]
   12a38:	mov	r2, r0
   12a3c:	mov	r0, #0
   12a40:	bl	110f0 <error@plt>
   12a44:	b	12054 <__assert_fail@plt+0xd84>
   12a48:	ldrd	r2, [sp, #80]	; 0x50
   12a4c:	mvn	r1, #0
   12a50:	mvn	r0, #0
   12a54:	cmp	r3, r1
   12a58:	cmpeq	r2, r0
   12a5c:	beq	12e38 <__assert_fail@plt+0x1b68>
   12a60:	cmp	r2, #0
   12a64:	sbcs	r3, r3, #0
   12a68:	blt	13088 <__assert_fail@plt+0x1db8>
   12a6c:	ldr	r3, [sp, #48]	; 0x30
   12a70:	and	r3, r3, #61440	; 0xf000
   12a74:	cmp	r3, #40960	; 0xa000
   12a78:	beq	12ac0 <__assert_fail@plt+0x17f0>
   12a7c:	cmp	r3, #16384	; 0x4000
   12a80:	bne	12234 <__assert_fail@plt+0xf64>
   12a84:	b	12220 <__assert_fail@plt+0xf50>
   12a88:	mov	r3, #0
   12a8c:	str	r3, [sp, #12]
   12a90:	b	124c8 <__assert_fail@plt+0x11f8>
   12a94:	mov	r0, r5
   12a98:	ldr	r6, [r7]
   12a9c:	bl	112c4 <closedir@plt>
   12aa0:	cmp	r6, #0
   12aa4:	moveq	r3, #1
   12aa8:	movne	r3, #0
   12aac:	str	r6, [r7]
   12ab0:	moveq	r5, #4
   12ab4:	movne	r5, #3
   12ab8:	str	r3, [sp, #12]
   12abc:	b	124cc <__assert_fail@plt+0x11fc>
   12ac0:	ldr	r3, [r8, #4]
   12ac4:	cmp	r3, #3
   12ac8:	bne	122c4 <__assert_fail@plt+0xff4>
   12acc:	b	12234 <__assert_fail@plt+0xf64>
   12ad0:	ldr	r3, [r7]
   12ad4:	mov	r0, r5
   12ad8:	str	r3, [sp, #28]
   12adc:	str	r6, [sp, #12]
   12ae0:	bl	112c4 <closedir@plt>
   12ae4:	ldr	r3, [sp, #28]
   12ae8:	mov	r5, #3
   12aec:	str	r3, [r7]
   12af0:	b	124cc <__assert_fail@plt+0x11fc>
   12af4:	mov	r2, #5
   12af8:	ldr	r1, [pc, #1256]	; 12fe8 <__assert_fail@plt+0x1d18>
   12afc:	mov	r0, r4
   12b00:	bl	11060 <dcgettext@plt>
   12b04:	mov	r1, r6
   12b08:	mov	fp, #4
   12b0c:	mov	r2, r0
   12b10:	mov	r0, r4
   12b14:	bl	110f0 <error@plt>
   12b18:	b	12128 <__assert_fail@plt+0xe58>
   12b1c:	ldrd	r0, [r4, #64]	; 0x40
   12b20:	ldrd	r2, [ip, #8]
   12b24:	cmp	r1, r3
   12b28:	cmpeq	r0, r2
   12b2c:	bne	12480 <__assert_fail@plt+0x11b0>
   12b30:	ldr	r1, [pc, #1204]	; 12fec <__assert_fail@plt+0x1d1c>
   12b34:	ldr	r0, [r4, #28]
   12b38:	bl	10fdc <strcmp@plt>
   12b3c:	mov	r2, #5
   12b40:	subs	r5, r0, #0
   12b44:	bne	12e64 <__assert_fail@plt+0x1b94>
   12b48:	ldr	r1, [pc, #1184]	; 12ff0 <__assert_fail@plt+0x1d20>
   12b4c:	bl	11060 <dcgettext@plt>
   12b50:	ldr	r1, [r4, #28]
   12b54:	mov	r6, r0
   12b58:	mov	r0, #4
   12b5c:	bl	1a2cc <__assert_fail@plt+0x8ffc>
   12b60:	mov	r2, r6
   12b64:	mov	r1, r5
   12b68:	mov	r3, r0
   12b6c:	mov	r0, r5
   12b70:	bl	110f0 <error@plt>
   12b74:	ldr	r1, [pc, #1144]	; 12ff4 <__assert_fail@plt+0x1d24>
   12b78:	mov	r2, #5
   12b7c:	mov	r0, #0
   12b80:	bl	11060 <dcgettext@plt>
   12b84:	mov	r1, #0
   12b88:	mov	r2, r0
   12b8c:	mov	r0, r1
   12b90:	bl	110f0 <error@plt>
   12b94:	b	120e8 <__assert_fail@plt+0xe18>
   12b98:	mov	r0, r5
   12b9c:	mov	r2, #0
   12ba0:	ldr	r1, [pc, #1084]	; 12fe4 <__assert_fail@plt+0x1d14>
   12ba4:	bl	13a90 <__assert_fail@plt+0x27c0>
   12ba8:	add	r2, sp, #32
   12bac:	mov	r1, r0
   12bb0:	mov	r6, r0
   12bb4:	mov	r0, #3
   12bb8:	bl	112ac <__lxstat64@plt>
   12bbc:	subs	r5, r0, #0
   12bc0:	bne	12ca0 <__assert_fail@plt+0x19d0>
   12bc4:	mov	r0, r6
   12bc8:	bl	13bb0 <__assert_fail@plt+0x28e0>
   12bcc:	ldrd	r0, [sl, #16]
   12bd0:	ldrd	r2, [sp, #32]
   12bd4:	cmp	r1, r3
   12bd8:	cmpeq	r0, r2
   12bdc:	beq	127b0 <__assert_fail@plt+0x14e0>
   12be0:	mov	r2, #5
   12be4:	ldr	r1, [pc, #1004]	; 12fd8 <__assert_fail@plt+0x1d08>
   12be8:	mov	r0, r5
   12bec:	bl	11060 <dcgettext@plt>
   12bf0:	ldr	r1, [r4, #28]
   12bf4:	mov	r6, r0
   12bf8:	mov	r0, #4
   12bfc:	bl	1a2cc <__assert_fail@plt+0x8ffc>
   12c00:	mov	r2, r6
   12c04:	mov	r1, r5
   12c08:	mov	r3, r0
   12c0c:	mov	r0, r5
   12c10:	bl	110f0 <error@plt>
   12c14:	mov	r2, #5
   12c18:	ldr	r1, [pc, #984]	; 12ff8 <__assert_fail@plt+0x1d28>
   12c1c:	b	12b7c <__assert_fail@plt+0x18ac>
   12c20:	ldr	r1, [sp, #16]
   12c24:	mov	r0, #4
   12c28:	bl	1a2cc <__assert_fail@plt+0x8ffc>
   12c2c:	ldr	r3, [sp, #12]
   12c30:	cmp	r3, #0
   12c34:	str	r0, [sp, #16]
   12c38:	bne	1252c <__assert_fail@plt+0x125c>
   12c3c:	ldr	r3, [pc, #896]	; 12fc4 <__assert_fail@plt+0x1cf4>
   12c40:	cmp	r7, #0
   12c44:	movne	r2, #5
   12c48:	ldr	r3, [r3]
   12c4c:	ldrne	r1, [pc, #936]	; 12ffc <__assert_fail@plt+0x1d2c>
   12c50:	moveq	r2, #5
   12c54:	ldreq	r1, [pc, #932]	; 13000 <__assert_fail@plt+0x1d30>
   12c58:	ldrne	r0, [sp, #12]
   12c5c:	moveq	r0, r7
   12c60:	mov	r6, r3
   12c64:	bl	11060 <dcgettext@plt>
   12c68:	ldr	r3, [pc, #860]	; 12fcc <__assert_fail@plt+0x1cfc>
   12c6c:	ldr	r1, [sp, #16]
   12c70:	ldr	r3, [r3]
   12c74:	str	r1, [sp]
   12c78:	mov	r1, #1
   12c7c:	mov	r2, r0
   12c80:	mov	r0, r6
   12c84:	bl	111bc <__fprintf_chk@plt>
   12c88:	b	125a0 <__assert_fail@plt+0x12d0>
   12c8c:	bl	1c850 <__assert_fail@plt+0xb580>
   12c90:	cmp	r0, #0
   12c94:	beq	12dd0 <__assert_fail@plt+0x1b00>
   12c98:	ldr	r3, [r8, #4]
   12c9c:	b	124f0 <__assert_fail@plt+0x1220>
   12ca0:	mov	r2, #5
   12ca4:	ldr	r1, [pc, #856]	; 13004 <__assert_fail@plt+0x1d34>
   12ca8:	mov	r0, #0
   12cac:	bl	11060 <dcgettext@plt>
   12cb0:	mov	r2, r6
   12cb4:	mov	r1, #4
   12cb8:	mov	r5, r0
   12cbc:	mov	r0, #0
   12cc0:	bl	19eec <__assert_fail@plt+0x8c1c>
   12cc4:	ldr	r2, [r4, #24]
   12cc8:	mov	r1, #4
   12ccc:	mov	r7, r0
   12cd0:	mov	r0, #1
   12cd4:	bl	19eec <__assert_fail@plt+0x8c1c>
   12cd8:	mov	r1, #0
   12cdc:	mov	r3, r7
   12ce0:	mov	r2, r5
   12ce4:	str	r0, [sp]
   12ce8:	mov	r0, r1
   12cec:	bl	110f0 <error@plt>
   12cf0:	mov	r0, r6
   12cf4:	bl	13bb0 <__assert_fail@plt+0x28e0>
   12cf8:	b	120e8 <__assert_fail@plt+0xe18>
   12cfc:	ldr	r0, [sp, #24]
   12d00:	mov	r2, #5
   12d04:	ldr	r1, [pc, #764]	; 13008 <__assert_fail@plt+0x1d38>
   12d08:	bl	11060 <dcgettext@plt>
   12d0c:	str	r0, [sp, #12]
   12d10:	b	12290 <__assert_fail@plt+0xfc0>
   12d14:	mov	r3, #256	; 0x100
   12d18:	str	r3, [sp]
   12d1c:	ldr	r2, [sp, #24]
   12d20:	add	r3, sp, #32
   12d24:	ldr	r1, [sp, #20]
   12d28:	mov	r0, #3
   12d2c:	bl	11090 <__fxstatat64@plt>
   12d30:	ldrd	r2, [sp, #80]	; 0x50
   12d34:	cmp	r0, #0
   12d38:	beq	12de8 <__assert_fail@plt+0x1b18>
   12d3c:	mvn	r2, #1
   12d40:	mvn	r3, #0
   12d44:	strd	r2, [sp, #80]	; 0x50
   12d48:	bl	11180 <__errno_location@plt>
   12d4c:	ldr	r2, [r0]
   12d50:	asr	r3, r2, #31
   12d54:	strd	r2, [sp, #128]	; 0x80
   12d58:	bl	11180 <__errno_location@plt>
   12d5c:	ldr	r7, [sp, #128]	; 0x80
   12d60:	str	r7, [r0]
   12d64:	ldr	r1, [sp, #16]
   12d68:	mov	r0, #4
   12d6c:	bl	1a2cc <__assert_fail@plt+0x8ffc>
   12d70:	mov	r2, #5
   12d74:	ldr	r1, [pc, #660]	; 13010 <__assert_fail@plt+0x1d40>
   12d78:	mov	r5, #4
   12d7c:	mov	r6, r0
   12d80:	mov	r0, #0
   12d84:	bl	11060 <dcgettext@plt>
   12d88:	mov	r3, r6
   12d8c:	mov	r1, r7
   12d90:	mov	r6, #2
   12d94:	mov	r2, r0
   12d98:	mov	r0, #0
   12d9c:	bl	110f0 <error@plt>
   12da0:	b	12888 <__assert_fail@plt+0x15b8>
   12da4:	mov	r0, r7
   12da8:	bl	112a0 <close@plt>
   12dac:	str	r5, [sp, #12]
   12db0:	mov	r5, #3
   12db4:	b	124cc <__assert_fail@plt+0x11fc>
   12db8:	mov	r0, r7
   12dbc:	mov	r2, #5
   12dc0:	ldr	r1, [pc, #576]	; 13008 <__assert_fail@plt+0x1d38>
   12dc4:	bl	11060 <dcgettext@plt>
   12dc8:	mov	r7, r0
   12dcc:	b	12574 <__assert_fail@plt+0x12a4>
   12dd0:	ldrd	r2, [sp, #80]	; 0x50
   12dd4:	mvn	r1, #0
   12dd8:	mvn	r0, #0
   12ddc:	cmp	r3, r1
   12de0:	cmpeq	r2, r0
   12de4:	beq	12d14 <__assert_fail@plt+0x1a44>
   12de8:	cmp	r2, #0
   12dec:	sbcs	r3, r3, #0
   12df0:	blt	12d58 <__assert_fail@plt+0x1a88>
   12df4:	ldr	r3, [sp, #48]	; 0x30
   12df8:	and	r3, r3, #61440	; 0xf000
   12dfc:	cmp	r3, #40960	; 0xa000
   12e00:	beq	12c98 <__assert_fail@plt+0x19c8>
   12e04:	mov	r3, #512	; 0x200
   12e08:	mov	r2, #2
   12e0c:	ldr	r1, [sp, #24]
   12e10:	ldr	r0, [sp, #20]
   12e14:	bl	11018 <faccessat@plt>
   12e18:	cmp	r0, #0
   12e1c:	beq	12c98 <__assert_fail@plt+0x19c8>
   12e20:	bl	11180 <__errno_location@plt>
   12e24:	ldr	r7, [r0]
   12e28:	cmp	r7, #13
   12e2c:	moveq	r7, #1
   12e30:	beq	124fc <__assert_fail@plt+0x122c>
   12e34:	b	12d64 <__assert_fail@plt+0x1a94>
   12e38:	mov	r3, #256	; 0x100
   12e3c:	str	r3, [sp]
   12e40:	ldr	r2, [sp, #20]
   12e44:	add	r3, sp, #32
   12e48:	ldr	r1, [sp, #16]
   12e4c:	mov	r0, #3
   12e50:	bl	11090 <__fxstatat64@plt>
   12e54:	cmp	r0, #0
   12e58:	bne	12eb4 <__assert_fail@plt+0x1be4>
   12e5c:	ldrd	r2, [sp, #80]	; 0x50
   12e60:	b	12a60 <__assert_fail@plt+0x1790>
   12e64:	ldr	r1, [pc, #416]	; 1300c <__assert_fail@plt+0x1d3c>
   12e68:	mov	r0, #0
   12e6c:	bl	11060 <dcgettext@plt>
   12e70:	ldr	r2, [r4, #28]
   12e74:	mov	r1, #4
   12e78:	mov	r5, r0
   12e7c:	mov	r0, #0
   12e80:	bl	19eec <__assert_fail@plt+0x8c1c>
   12e84:	ldr	r2, [pc, #352]	; 12fec <__assert_fail@plt+0x1d1c>
   12e88:	mov	r1, #4
   12e8c:	mov	r6, r0
   12e90:	mov	r0, #1
   12e94:	bl	19eec <__assert_fail@plt+0x8c1c>
   12e98:	mov	r1, #0
   12e9c:	mov	r3, r6
   12ea0:	mov	r2, r5
   12ea4:	str	r0, [sp]
   12ea8:	mov	r0, r1
   12eac:	bl	110f0 <error@plt>
   12eb0:	b	12b74 <__assert_fail@plt+0x18a4>
   12eb4:	mvn	r2, #1
   12eb8:	mvn	r3, #0
   12ebc:	strd	r2, [sp, #80]	; 0x50
   12ec0:	bl	11180 <__errno_location@plt>
   12ec4:	ldr	r2, [r0]
   12ec8:	asr	r3, r2, #31
   12ecc:	strd	r2, [sp, #128]	; 0x80
   12ed0:	str	r2, [r0]
   12ed4:	str	r2, [sp, #24]
   12ed8:	b	12a0c <__assert_fail@plt+0x173c>
   12edc:	mov	r3, #256	; 0x100
   12ee0:	str	r3, [sp]
   12ee4:	ldr	r2, [sp, #20]
   12ee8:	ldr	r1, [sp, #16]
   12eec:	add	r3, sp, #32
   12ef0:	mov	r0, #3
   12ef4:	bl	11090 <__fxstatat64@plt>
   12ef8:	cmp	r0, #0
   12efc:	bne	12f6c <__assert_fail@plt+0x1c9c>
   12f00:	ldrd	r2, [sp, #80]	; 0x50
   12f04:	b	1225c <__assert_fail@plt+0xf8c>
   12f08:	mov	r3, #256	; 0x100
   12f0c:	str	r3, [sp]
   12f10:	ldr	r2, [sp, #24]
   12f14:	ldr	r1, [sp, #20]
   12f18:	add	r3, sp, #32
   12f1c:	mov	r0, #3
   12f20:	bl	11090 <__fxstatat64@plt>
   12f24:	cmp	r0, #0
   12f28:	bne	13024 <__assert_fail@plt+0x1d54>
   12f2c:	ldrd	r2, [sp, #80]	; 0x50
   12f30:	b	12544 <__assert_fail@plt+0x1274>
   12f34:	mov	r3, #256	; 0x100
   12f38:	str	r3, [sp]
   12f3c:	ldr	r2, [sp, #20]
   12f40:	add	r3, sp, #32
   12f44:	ldr	r1, [sp, #16]
   12f48:	mov	r0, #3
   12f4c:	bl	11090 <__fxstatat64@plt>
   12f50:	cmp	r0, #0
   12f54:	bne	12eb4 <__assert_fail@plt+0x1be4>
   12f58:	ldrd	r2, [sp, #80]	; 0x50
   12f5c:	b	129b8 <__assert_fail@plt+0x16e8>
   12f60:	mov	r0, r7
   12f64:	bl	112a0 <close@plt>
   12f68:	b	1296c <__assert_fail@plt+0x169c>
   12f6c:	mvn	r2, #1
   12f70:	mvn	r3, #0
   12f74:	strd	r2, [sp, #80]	; 0x50
   12f78:	bl	11180 <__errno_location@plt>
   12f7c:	ldr	r4, [r0]
   12f80:	asr	r5, r4, #31
   12f84:	strd	r4, [sp, #128]	; 0x80
   12f88:	str	r4, [r0]
   12f8c:	mov	r2, #5
   12f90:	ldr	r1, [pc, #120]	; 13010 <__assert_fail@plt+0x1d40>
   12f94:	mov	r0, #0
   12f98:	bl	11060 <dcgettext@plt>
   12f9c:	mov	r3, r7
   12fa0:	mov	r1, r4
   12fa4:	mov	fp, #4
   12fa8:	mov	r2, r0
   12fac:	mov	r0, #0
   12fb0:	bl	110f0 <error@plt>
   12fb4:	b	12054 <__assert_fail@plt+0xd84>
   12fb8:	strdeq	lr, [r1], -r4
   12fbc:			; <UNDEFINED> instruction: 0x0001ecb0
   12fc0:	andeq	lr, r1, ip, lsr sp
   12fc4:	andeq	r0, r3, r8, lsl #3
   12fc8:			; <UNDEFINED> instruction: 0x0001ebbc
   12fcc:			; <UNDEFINED> instruction: 0x000301bc
   12fd0:	andeq	lr, r1, r8, asr #25
   12fd4:	andeq	lr, r1, r0, lsl #26
   12fd8:	andeq	lr, r1, r4, lsl fp
   12fdc:	andeq	lr, r1, r8, lsl sl
   12fe0:	andeq	lr, r1, ip, asr #20
   12fe4:	andeq	lr, r1, r0, asr sl
   12fe8:	andeq	lr, r1, r8, lsl #20
   12fec:	andeq	lr, r1, r4, lsl #16
   12ff0:	andeq	lr, r1, r4, asr sl
   12ff4:	andeq	lr, r1, r0, asr #21
   12ff8:	andeq	lr, r1, r4, asr #22
   12ffc:	andeq	lr, r1, ip, ror #22
   13000:	muleq	r1, ip, fp
   13004:	strdeq	lr, [r1], -r4
   13008:	andeq	lr, r1, r0, ror #23
   1300c:	andeq	lr, r1, r4, lsl #21
   13010:	strdeq	lr, [r1], -r4
   13014:	andeq	lr, r1, ip, asr #19
   13018:	andeq	r0, r0, r2, ror #4
   1301c:	andeq	lr, r1, r8, lsl sp
   13020:	andeq	lr, r1, r8, lsr #26
   13024:	mvn	r2, #1
   13028:	mvn	r3, #0
   1302c:	strd	r2, [sp, #80]	; 0x50
   13030:	bl	11180 <__errno_location@plt>
   13034:	ldr	r6, [r0]
   13038:	asr	r7, r6, #31
   1303c:	strd	r6, [sp, #128]	; 0x80
   13040:	str	r6, [r0]
   13044:	mov	r2, #5
   13048:	ldr	r1, [pc, #-64]	; 13010 <__assert_fail@plt+0x1d40>
   1304c:	mov	r0, #0
   13050:	bl	11060 <dcgettext@plt>
   13054:	mov	r1, r6
   13058:	ldr	r3, [sp, #16]
   1305c:	mov	r6, #2
   13060:	mov	r5, #4
   13064:	mov	r2, r0
   13068:	mov	r0, #0
   1306c:	bl	110f0 <error@plt>
   13070:	b	12888 <__assert_fail@plt+0x15b8>
   13074:	ldr	r3, [pc, #-104]	; 13014 <__assert_fail@plt+0x1d44>
   13078:	ldr	r2, [pc, #-104]	; 13018 <__assert_fail@plt+0x1d48>
   1307c:	ldr	r1, [pc, #-104]	; 1301c <__assert_fail@plt+0x1d4c>
   13080:	ldr	r0, [pc, #-104]	; 13020 <__assert_fail@plt+0x1d50>
   13084:	bl	112d0 <__assert_fail@plt>
   13088:	bl	11180 <__errno_location@plt>
   1308c:	ldrd	r2, [sp, #128]	; 0x80
   13090:	b	12ed0 <__assert_fail@plt+0x1c00>
   13094:	bl	11180 <__errno_location@plt>
   13098:	ldrd	r6, [sp, #128]	; 0x80
   1309c:	b	13040 <__assert_fail@plt+0x1d70>
   130a0:	bl	11180 <__errno_location@plt>
   130a4:	ldrd	r4, [sp, #128]	; 0x80
   130a8:	b	12f88 <__assert_fail@plt+0x1cb8>
   130ac:	mov	r0, #1
   130b0:	b	11a90 <__assert_fail@plt+0x7c0>
   130b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130b8:	mov	r4, r1
   130bc:	sub	sp, sp, #12
   130c0:	mov	r5, r2
   130c4:	str	r2, [sp, #4]
   130c8:	mov	r7, r3
   130cc:	mov	sl, r0
   130d0:	bl	11168 <strlen@plt>
   130d4:	ldr	fp, [r4]
   130d8:	cmp	fp, #0
   130dc:	beq	131f0 <__assert_fail@plt+0x1f20>
   130e0:	cmp	r5, #0
   130e4:	mov	r8, r0
   130e8:	mov	r3, r5
   130ec:	beq	13198 <__assert_fail@plt+0x1ec8>
   130f0:	mov	r2, #0
   130f4:	mov	r5, r2
   130f8:	mov	r6, r3
   130fc:	mvn	r9, #0
   13100:	str	r2, [sp]
   13104:	mov	r2, r8
   13108:	mov	r1, sl
   1310c:	mov	r0, fp
   13110:	bl	11288 <strncmp@plt>
   13114:	cmp	r0, #0
   13118:	mov	r0, fp
   1311c:	bne	1315c <__assert_fail@plt+0x1e8c>
   13120:	bl	11168 <strlen@plt>
   13124:	ldr	r3, [sp, #4]
   13128:	mov	r2, r7
   1312c:	mov	r1, r6
   13130:	cmp	r8, r0
   13134:	mla	r0, r7, r9, r3
   13138:	beq	13188 <__assert_fail@plt+0x1eb8>
   1313c:	cmn	r9, #1
   13140:	moveq	r9, r5
   13144:	beq	1315c <__assert_fail@plt+0x1e8c>
   13148:	bl	11048 <memcmp@plt>
   1314c:	ldr	r3, [sp]
   13150:	cmp	r0, #0
   13154:	movne	r3, #1
   13158:	str	r3, [sp]
   1315c:	ldr	fp, [r4, #4]!
   13160:	add	r5, r5, #1
   13164:	cmp	fp, #0
   13168:	add	r6, r6, r7
   1316c:	bne	13104 <__assert_fail@plt+0x1e34>
   13170:	ldr	r3, [sp]
   13174:	cmp	r3, #0
   13178:	mvnne	r9, #1
   1317c:	mov	r0, r9
   13180:	add	sp, sp, #12
   13184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13188:	mov	r9, r5
   1318c:	mov	r0, r9
   13190:	add	sp, sp, #12
   13194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13198:	mov	r6, r5
   1319c:	mvn	r9, #0
   131a0:	mov	r2, r8
   131a4:	mov	r1, sl
   131a8:	mov	r0, fp
   131ac:	bl	11288 <strncmp@plt>
   131b0:	cmp	r0, #0
   131b4:	mov	r0, fp
   131b8:	bne	131d4 <__assert_fail@plt+0x1f04>
   131bc:	bl	11168 <strlen@plt>
   131c0:	cmp	r8, r0
   131c4:	beq	13188 <__assert_fail@plt+0x1eb8>
   131c8:	cmn	r9, #1
   131cc:	moveq	r9, r5
   131d0:	movne	r6, #1
   131d4:	ldr	fp, [r4, #4]!
   131d8:	add	r5, r5, #1
   131dc:	cmp	fp, #0
   131e0:	bne	131a0 <__assert_fail@plt+0x1ed0>
   131e4:	str	r6, [sp]
   131e8:	mov	r3, r6
   131ec:	b	13174 <__assert_fail@plt+0x1ea4>
   131f0:	mvn	r9, #0
   131f4:	b	1317c <__assert_fail@plt+0x1eac>
   131f8:	push	{r4, r5, r6, lr}
   131fc:	mov	r6, r0
   13200:	ldr	r0, [r1]
   13204:	cmp	r0, #0
   13208:	beq	13240 <__assert_fail@plt+0x1f70>
   1320c:	mov	r4, r1
   13210:	mov	r5, #0
   13214:	b	13228 <__assert_fail@plt+0x1f58>
   13218:	ldr	r0, [r4, #4]!
   1321c:	add	r5, r5, #1
   13220:	cmp	r0, #0
   13224:	beq	13240 <__assert_fail@plt+0x1f70>
   13228:	mov	r1, r6
   1322c:	bl	10fdc <strcmp@plt>
   13230:	cmp	r0, #0
   13234:	bne	13218 <__assert_fail@plt+0x1f48>
   13238:	mov	r0, r5
   1323c:	pop	{r4, r5, r6, pc}
   13240:	mvn	r0, #0
   13244:	pop	{r4, r5, r6, pc}
   13248:	cmn	r2, #1
   1324c:	push	{r4, r5, r6, lr}
   13250:	mov	r2, #5
   13254:	sub	sp, sp, #8
   13258:	mov	r4, r1
   1325c:	mov	r5, r0
   13260:	ldreq	r1, [pc, #76]	; 132b4 <__assert_fail@plt+0x1fe4>
   13264:	ldrne	r1, [pc, #76]	; 132b8 <__assert_fail@plt+0x1fe8>
   13268:	mov	r0, #0
   1326c:	bl	11060 <dcgettext@plt>
   13270:	mov	r2, r4
   13274:	mov	r1, #8
   13278:	mov	r6, r0
   1327c:	mov	r0, #0
   13280:	bl	19eec <__assert_fail@plt+0x8c1c>
   13284:	mov	r1, r5
   13288:	mov	r4, r0
   1328c:	mov	r0, #1
   13290:	bl	1ba88 <__assert_fail@plt+0xa7b8>
   13294:	mov	r1, #0
   13298:	mov	r3, r4
   1329c:	mov	r2, r6
   132a0:	str	r0, [sp]
   132a4:	mov	r0, r1
   132a8:	bl	110f0 <error@plt>
   132ac:	add	sp, sp, #8
   132b0:	pop	{r4, r5, r6, pc}
   132b4:	andeq	lr, r1, r0, ror #26
   132b8:	andeq	lr, r1, ip, ror sp
   132bc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132c0:	mov	r6, r0
   132c4:	ldr	r9, [pc, #232]	; 133b4 <__assert_fail@plt+0x20e4>
   132c8:	mov	r4, r1
   132cc:	mov	r7, r2
   132d0:	ldr	r1, [pc, #224]	; 133b8 <__assert_fail@plt+0x20e8>
   132d4:	mov	r2, #5
   132d8:	mov	r0, #0
   132dc:	bl	11060 <dcgettext@plt>
   132e0:	ldr	r1, [r9]
   132e4:	bl	10fb8 <fputs_unlocked@plt>
   132e8:	ldr	fp, [r6]
   132ec:	cmp	fp, #0
   132f0:	movne	r8, #0
   132f4:	movne	r5, r8
   132f8:	movne	sl, #1
   132fc:	bne	1333c <__assert_fail@plt+0x206c>
   13300:	b	13380 <__assert_fail@plt+0x20b0>
   13304:	mov	r0, fp
   13308:	ldr	r8, [r9]
   1330c:	bl	1bc3c <__assert_fail@plt+0xa96c>
   13310:	ldr	r2, [pc, #164]	; 133bc <__assert_fail@plt+0x20ec>
   13314:	mov	r1, sl
   13318:	mov	r3, r0
   1331c:	mov	r0, r8
   13320:	bl	111bc <__fprintf_chk@plt>
   13324:	mov	r8, r4
   13328:	ldr	fp, [r6, #4]!
   1332c:	add	r5, r5, #1
   13330:	cmp	fp, #0
   13334:	add	r4, r4, r7
   13338:	beq	13380 <__assert_fail@plt+0x20b0>
   1333c:	cmp	r5, #0
   13340:	mov	r1, r4
   13344:	mov	r2, r7
   13348:	mov	r0, r8
   1334c:	beq	13304 <__assert_fail@plt+0x2034>
   13350:	bl	11048 <memcmp@plt>
   13354:	cmp	r0, #0
   13358:	bne	13304 <__assert_fail@plt+0x2034>
   1335c:	mov	r0, fp
   13360:	ldr	fp, [r9]
   13364:	bl	1bc3c <__assert_fail@plt+0xa96c>
   13368:	ldr	r2, [pc, #80]	; 133c0 <__assert_fail@plt+0x20f0>
   1336c:	mov	r1, sl
   13370:	mov	r3, r0
   13374:	mov	r0, fp
   13378:	bl	111bc <__fprintf_chk@plt>
   1337c:	b	13328 <__assert_fail@plt+0x2058>
   13380:	ldr	r0, [r9]
   13384:	ldr	r3, [r0, #20]
   13388:	ldr	r2, [r0, #24]
   1338c:	cmp	r3, r2
   13390:	bcs	133a8 <__assert_fail@plt+0x20d8>
   13394:	add	r1, r3, #1
   13398:	mov	r2, #10
   1339c:	str	r1, [r0, #20]
   133a0:	strb	r2, [r3]
   133a4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133a8:	mov	r1, #10
   133ac:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133b0:	b	111f8 <__overflow@plt>
   133b4:	andeq	r0, r3, r8, lsl #3
   133b8:	muleq	r1, ip, sp
   133bc:			; <UNDEFINED> instruction: 0x0001edb4
   133c0:			; <UNDEFINED> instruction: 0x0001edbc
   133c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133c8:	sub	sp, sp, #36	; 0x24
   133cc:	mov	r6, r1
   133d0:	ldrb	ip, [sp, #80]	; 0x50
   133d4:	str	r0, [sp, #28]
   133d8:	str	r2, [sp, #24]
   133dc:	cmp	ip, #0
   133e0:	str	ip, [sp, #20]
   133e4:	str	r3, [sp, #12]
   133e8:	ldr	r7, [sp, #72]	; 0x48
   133ec:	bne	134a4 <__assert_fail@plt+0x21d4>
   133f0:	ldr	r0, [r2]
   133f4:	cmp	r0, #0
   133f8:	movne	sl, ip
   133fc:	movne	r4, r2
   13400:	bne	13488 <__assert_fail@plt+0x21b8>
   13404:	mov	r2, #5
   13408:	ldr	r1, [pc, #512]	; 13610 <__assert_fail@plt+0x2340>
   1340c:	mov	r0, #0
   13410:	bl	11060 <dcgettext@plt>
   13414:	mov	r4, r0
   13418:	mov	r2, r6
   1341c:	mov	r1, #8
   13420:	mov	r0, #0
   13424:	bl	19eec <__assert_fail@plt+0x8c1c>
   13428:	ldr	r1, [sp, #28]
   1342c:	mvn	sl, #0
   13430:	mov	r5, r0
   13434:	mov	r0, #1
   13438:	bl	1ba88 <__assert_fail@plt+0xa7b8>
   1343c:	mov	r1, #0
   13440:	mov	r3, r5
   13444:	mov	r2, r4
   13448:	str	r0, [sp]
   1344c:	mov	r0, r1
   13450:	bl	110f0 <error@plt>
   13454:	ldr	r0, [sp, #24]
   13458:	mov	r2, r7
   1345c:	ldr	r1, [sp, #12]
   13460:	bl	132bc <__assert_fail@plt+0x1fec>
   13464:	ldr	r3, [sp, #76]	; 0x4c
   13468:	blx	r3
   1346c:	mov	r0, sl
   13470:	add	sp, sp, #36	; 0x24
   13474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13478:	ldr	r0, [r4, #4]!
   1347c:	add	sl, sl, #1
   13480:	cmp	r0, #0
   13484:	beq	13404 <__assert_fail@plt+0x2134>
   13488:	mov	r1, r6
   1348c:	bl	10fdc <strcmp@plt>
   13490:	cmp	r0, #0
   13494:	bne	13478 <__assert_fail@plt+0x21a8>
   13498:	mov	r0, sl
   1349c:	add	sp, sp, #36	; 0x24
   134a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134a4:	mov	r0, r1
   134a8:	bl	11168 <strlen@plt>
   134ac:	ldr	r3, [sp, #24]
   134b0:	ldr	fp, [r3]
   134b4:	cmp	fp, #0
   134b8:	mov	r9, r0
   134bc:	beq	13404 <__assert_fail@plt+0x2134>
   134c0:	ldr	r2, [sp, #12]
   134c4:	cmp	r2, #0
   134c8:	beq	13584 <__assert_fail@plt+0x22b4>
   134cc:	mov	r1, #0
   134d0:	mov	r4, r1
   134d4:	mov	r8, r3
   134d8:	mov	r5, r2
   134dc:	mvn	sl, #0
   134e0:	str	r1, [sp, #16]
   134e4:	mov	r2, r9
   134e8:	mov	r1, r6
   134ec:	mov	r0, fp
   134f0:	bl	11288 <strncmp@plt>
   134f4:	cmp	r0, #0
   134f8:	mov	r0, fp
   134fc:	bne	13540 <__assert_fail@plt+0x2270>
   13500:	bl	11168 <strlen@plt>
   13504:	ldr	r3, [sp, #12]
   13508:	mov	r2, r7
   1350c:	mov	r1, r5
   13510:	cmp	r9, r0
   13514:	mla	r0, r7, sl, r3
   13518:	beq	13574 <__assert_fail@plt+0x22a4>
   1351c:	cmn	sl, #1
   13520:	moveq	sl, r4
   13524:	beq	13540 <__assert_fail@plt+0x2270>
   13528:	bl	11048 <memcmp@plt>
   1352c:	ldr	r2, [sp, #20]
   13530:	ldr	r3, [sp, #16]
   13534:	cmp	r0, #0
   13538:	movne	r3, r2
   1353c:	str	r3, [sp, #16]
   13540:	ldr	fp, [r8, #4]!
   13544:	add	r4, r4, #1
   13548:	cmp	fp, #0
   1354c:	add	r5, r5, r7
   13550:	bne	134e4 <__assert_fail@plt+0x2214>
   13554:	ldr	r3, [sp, #16]
   13558:	cmp	r3, #0
   1355c:	bne	135f8 <__assert_fail@plt+0x2328>
   13560:	cmn	sl, #1
   13564:	beq	13404 <__assert_fail@plt+0x2134>
   13568:	mov	r0, sl
   1356c:	add	sp, sp, #36	; 0x24
   13570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13574:	mov	sl, r4
   13578:	mov	r0, sl
   1357c:	add	sp, sp, #36	; 0x24
   13580:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13584:	mov	r5, r3
   13588:	ldr	r3, [sp, #12]
   1358c:	str	r7, [sp, #72]	; 0x48
   13590:	mov	r7, fp
   13594:	ldr	fp, [sp, #20]
   13598:	mov	r8, r3
   1359c:	mvn	sl, #0
   135a0:	mov	r4, r3
   135a4:	mov	r2, r9
   135a8:	mov	r1, r6
   135ac:	mov	r0, r7
   135b0:	bl	11288 <strncmp@plt>
   135b4:	cmp	r0, #0
   135b8:	mov	r0, r7
   135bc:	bne	135d8 <__assert_fail@plt+0x2308>
   135c0:	bl	11168 <strlen@plt>
   135c4:	cmp	r9, r0
   135c8:	beq	13574 <__assert_fail@plt+0x22a4>
   135cc:	cmn	sl, #1
   135d0:	moveq	sl, r4
   135d4:	movne	r8, fp
   135d8:	ldr	r7, [r5, #4]!
   135dc:	add	r4, r4, #1
   135e0:	cmp	r7, #0
   135e4:	bne	135a4 <__assert_fail@plt+0x22d4>
   135e8:	str	r8, [sp, #16]
   135ec:	ldr	r7, [sp, #72]	; 0x48
   135f0:	mov	r3, r8
   135f4:	b	13558 <__assert_fail@plt+0x2288>
   135f8:	mov	r2, #5
   135fc:	ldr	r1, [pc, #16]	; 13614 <__assert_fail@plt+0x2344>
   13600:	mov	r0, #0
   13604:	bl	11060 <dcgettext@plt>
   13608:	mov	r4, r0
   1360c:	b	13418 <__assert_fail@plt+0x2148>
   13610:	andeq	lr, r1, r0, ror #26
   13614:	andeq	lr, r1, ip, ror sp
   13618:	push	{r4, r5, r6, r7, r8, lr}
   1361c:	ldr	r7, [r1]
   13620:	cmp	r7, #0
   13624:	beq	13664 <__assert_fail@plt+0x2394>
   13628:	mov	r6, r3
   1362c:	mov	r8, r0
   13630:	mov	r4, r2
   13634:	mov	r5, r1
   13638:	b	13648 <__assert_fail@plt+0x2378>
   1363c:	ldr	r7, [r5, #4]!
   13640:	cmp	r7, #0
   13644:	beq	13664 <__assert_fail@plt+0x2394>
   13648:	mov	r1, r4
   1364c:	mov	r2, r6
   13650:	mov	r0, r8
   13654:	bl	11048 <memcmp@plt>
   13658:	add	r4, r4, r6
   1365c:	cmp	r0, #0
   13660:	bne	1363c <__assert_fail@plt+0x236c>
   13664:	mov	r0, r7
   13668:	pop	{r4, r5, r6, r7, r8, pc}
   1366c:	ldrb	r3, [r0]
   13670:	cmp	r3, #47	; 0x2f
   13674:	bne	13684 <__assert_fail@plt+0x23b4>
   13678:	ldrb	r3, [r0, #1]!
   1367c:	cmp	r3, #47	; 0x2f
   13680:	beq	13678 <__assert_fail@plt+0x23a8>
   13684:	cmp	r3, #0
   13688:	bxeq	lr
   1368c:	mov	r2, #0
   13690:	push	{lr}		; (str lr, [sp, #-4]!)
   13694:	mov	ip, r2
   13698:	mov	r1, r0
   1369c:	mov	lr, #1
   136a0:	cmp	r3, #47	; 0x2f
   136a4:	moveq	r2, lr
   136a8:	beq	136b8 <__assert_fail@plt+0x23e8>
   136ac:	cmp	r2, #0
   136b0:	movne	r0, r1
   136b4:	movne	r2, ip
   136b8:	ldrb	r3, [r1, #1]!
   136bc:	cmp	r3, #0
   136c0:	bne	136a0 <__assert_fail@plt+0x23d0>
   136c4:	pop	{pc}		; (ldr pc, [sp], #4)
   136c8:	push	{r4, lr}
   136cc:	mov	r4, r0
   136d0:	bl	11168 <strlen@plt>
   136d4:	cmp	r0, #1
   136d8:	popls	{r4, pc}
   136dc:	sub	r3, r0, #1
   136e0:	add	r2, r4, r3
   136e4:	ldrb	r1, [r4, r3]
   136e8:	cmp	r1, #47	; 0x2f
   136ec:	popne	{r4, pc}
   136f0:	cmp	r3, #1
   136f4:	beq	13708 <__assert_fail@plt+0x2438>
   136f8:	ldrb	r1, [r2, #-1]!
   136fc:	sub	r0, r3, #1
   13700:	cmp	r1, #47	; 0x2f
   13704:	beq	13710 <__assert_fail@plt+0x2440>
   13708:	mov	r0, r3
   1370c:	pop	{r4, pc}
   13710:	mov	r3, r0
   13714:	b	136f0 <__assert_fail@plt+0x2420>
   13718:	ldr	r3, [pc, #4]	; 13724 <__assert_fail@plt+0x2454>
   1371c:	str	r0, [r3]
   13720:	bx	lr
   13724:			; <UNDEFINED> instruction: 0x000301b0
   13728:	push	{r4, r5, r6, lr}
   1372c:	sub	sp, sp, #8
   13730:	ldr	r4, [pc, #248]	; 13830 <__assert_fail@plt+0x2560>
   13734:	ldr	r5, [r4]
   13738:	mov	r0, r5
   1373c:	bl	13b74 <__assert_fail@plt+0x28a4>
   13740:	cmp	r0, #0
   13744:	moveq	r4, r0
   13748:	bne	13774 <__assert_fail@plt+0x24a4>
   1374c:	mov	r0, r5
   13750:	bl	1d10c <__assert_fail@plt+0xbe3c>
   13754:	cmp	r0, #0
   13758:	moveq	r0, r4
   1375c:	orrne	r0, r4, #1
   13760:	cmp	r0, #0
   13764:	bne	137a0 <__assert_fail@plt+0x24d0>
   13768:	add	sp, sp, #8
   1376c:	pop	{r4, r5, r6, lr}
   13770:	b	13868 <__assert_fail@plt+0x2598>
   13774:	mov	r3, #1
   13778:	str	r3, [sp]
   1377c:	mov	r0, r5
   13780:	mov	r2, #0
   13784:	mov	r3, #0
   13788:	bl	13c08 <__assert_fail@plt+0x2938>
   1378c:	cmp	r0, #0
   13790:	beq	137fc <__assert_fail@plt+0x252c>
   13794:	ldr	r5, [r4]
   13798:	mov	r4, #0
   1379c:	b	1374c <__assert_fail@plt+0x247c>
   137a0:	mov	r2, #5
   137a4:	ldr	r1, [pc, #136]	; 13834 <__assert_fail@plt+0x2564>
   137a8:	mov	r0, #0
   137ac:	bl	11060 <dcgettext@plt>
   137b0:	ldr	r2, [pc, #128]	; 13838 <__assert_fail@plt+0x2568>
   137b4:	ldr	r4, [r2]
   137b8:	cmp	r4, #0
   137bc:	mov	r5, r0
   137c0:	beq	13814 <__assert_fail@plt+0x2544>
   137c4:	bl	11180 <__errno_location@plt>
   137c8:	ldr	r6, [r0]
   137cc:	mov	r0, r4
   137d0:	bl	1a9dc <__assert_fail@plt+0x970c>
   137d4:	mov	r1, r6
   137d8:	str	r5, [sp]
   137dc:	ldr	r2, [pc, #88]	; 1383c <__assert_fail@plt+0x256c>
   137e0:	mov	r3, r0
   137e4:	mov	r0, #0
   137e8:	bl	110f0 <error@plt>
   137ec:	bl	13868 <__assert_fail@plt+0x2598>
   137f0:	ldr	r3, [pc, #72]	; 13840 <__assert_fail@plt+0x2570>
   137f4:	ldr	r0, [r3]
   137f8:	bl	11024 <_exit@plt>
   137fc:	ldr	r0, [r4]
   13800:	bl	1394c <__assert_fail@plt+0x267c>
   13804:	ldr	r5, [r4]
   13808:	adds	r4, r0, #0
   1380c:	movne	r4, #1
   13810:	b	1374c <__assert_fail@plt+0x247c>
   13814:	bl	11180 <__errno_location@plt>
   13818:	mov	r3, r5
   1381c:	ldr	r2, [pc, #32]	; 13844 <__assert_fail@plt+0x2574>
   13820:	ldr	r1, [r0]
   13824:	mov	r0, r4
   13828:	bl	110f0 <error@plt>
   1382c:	b	137ec <__assert_fail@plt+0x251c>
   13830:	muleq	r3, r0, r1
   13834:	andeq	lr, r1, r4, asr #27
   13838:			; <UNDEFINED> instruction: 0x000301b0
   1383c:	ldrdeq	lr, [r1], -r8
   13840:	andeq	r0, r3, r4, lsr r1
   13844:	ldrdeq	lr, [r1], -ip
   13848:	ldr	r3, [pc, #4]	; 13854 <__assert_fail@plt+0x2584>
   1384c:	str	r0, [r3]
   13850:	bx	lr
   13854:			; <UNDEFINED> instruction: 0x000301b4
   13858:	ldr	r3, [pc, #4]	; 13864 <__assert_fail@plt+0x2594>
   1385c:	strb	r0, [r3, #4]
   13860:	bx	lr
   13864:			; <UNDEFINED> instruction: 0x000301b4
   13868:	ldr	r3, [pc, #192]	; 13930 <__assert_fail@plt+0x2660>
   1386c:	push	{r4, r5, r6, lr}
   13870:	sub	sp, sp, #8
   13874:	ldr	r0, [r3]
   13878:	bl	1d10c <__assert_fail@plt+0xbe3c>
   1387c:	cmp	r0, #0
   13880:	beq	138a4 <__assert_fail@plt+0x25d4>
   13884:	ldr	r4, [pc, #168]	; 13934 <__assert_fail@plt+0x2664>
   13888:	ldrb	r3, [r4, #4]
   1388c:	cmp	r3, #0
   13890:	beq	138c0 <__assert_fail@plt+0x25f0>
   13894:	bl	11180 <__errno_location@plt>
   13898:	ldr	r3, [r0]
   1389c:	cmp	r3, #32
   138a0:	bne	138c0 <__assert_fail@plt+0x25f0>
   138a4:	ldr	r3, [pc, #140]	; 13938 <__assert_fail@plt+0x2668>
   138a8:	ldr	r0, [r3]
   138ac:	bl	1d10c <__assert_fail@plt+0xbe3c>
   138b0:	cmp	r0, #0
   138b4:	bne	13908 <__assert_fail@plt+0x2638>
   138b8:	add	sp, sp, #8
   138bc:	pop	{r4, r5, r6, pc}
   138c0:	mov	r2, #5
   138c4:	ldr	r1, [pc, #112]	; 1393c <__assert_fail@plt+0x266c>
   138c8:	mov	r0, #0
   138cc:	bl	11060 <dcgettext@plt>
   138d0:	ldr	r4, [r4]
   138d4:	cmp	r4, #0
   138d8:	mov	r5, r0
   138dc:	beq	13914 <__assert_fail@plt+0x2644>
   138e0:	bl	11180 <__errno_location@plt>
   138e4:	ldr	r6, [r0]
   138e8:	mov	r0, r4
   138ec:	bl	1a9dc <__assert_fail@plt+0x970c>
   138f0:	mov	r1, r6
   138f4:	str	r5, [sp]
   138f8:	ldr	r2, [pc, #64]	; 13940 <__assert_fail@plt+0x2670>
   138fc:	mov	r3, r0
   13900:	mov	r0, #0
   13904:	bl	110f0 <error@plt>
   13908:	ldr	r3, [pc, #52]	; 13944 <__assert_fail@plt+0x2674>
   1390c:	ldr	r0, [r3]
   13910:	bl	11024 <_exit@plt>
   13914:	bl	11180 <__errno_location@plt>
   13918:	mov	r3, r5
   1391c:	ldr	r2, [pc, #36]	; 13948 <__assert_fail@plt+0x2678>
   13920:	ldr	r1, [r0]
   13924:	mov	r0, r4
   13928:	bl	110f0 <error@plt>
   1392c:	b	13908 <__assert_fail@plt+0x2638>
   13930:	muleq	r3, r4, r1
   13934:			; <UNDEFINED> instruction: 0x000301b4
   13938:	andeq	r0, r3, r8, lsl #3
   1393c:	andeq	lr, r1, r0, ror #27
   13940:	ldrdeq	lr, [r1], -r8
   13944:	andeq	r0, r3, r4, lsr r1
   13948:	ldrdeq	lr, [r1], -ip
   1394c:	push	{r4, lr}
   13950:	subs	r4, r0, #0
   13954:	sub	sp, sp, #8
   13958:	beq	13974 <__assert_fail@plt+0x26a4>
   1395c:	bl	11120 <__freading@plt>
   13960:	cmp	r0, #0
   13964:	beq	13974 <__assert_fail@plt+0x26a4>
   13968:	ldr	r3, [r4]
   1396c:	tst	r3, #256	; 0x100
   13970:	bne	13984 <__assert_fail@plt+0x26b4>
   13974:	mov	r0, r4
   13978:	add	sp, sp, #8
   1397c:	pop	{r4, lr}
   13980:	b	10fe8 <fflush@plt>
   13984:	mov	r3, #1
   13988:	str	r3, [sp]
   1398c:	mov	r2, #0
   13990:	mov	r3, #0
   13994:	mov	r0, r4
   13998:	bl	13c08 <__assert_fail@plt+0x2938>
   1399c:	mov	r0, r4
   139a0:	add	sp, sp, #8
   139a4:	pop	{r4, lr}
   139a8:	b	10fe8 <fflush@plt>
   139ac:	ldr	r3, [r0, #16]
   139b0:	and	r3, r3, #61440	; 0xf000
   139b4:	cmp	r3, #32768	; 0x8000
   139b8:	beq	139fc <__assert_fail@plt+0x272c>
   139bc:	cmp	r3, #16384	; 0x4000
   139c0:	mov	r2, #5
   139c4:	beq	13a30 <__assert_fail@plt+0x2760>
   139c8:	cmp	r3, #40960	; 0xa000
   139cc:	beq	13a3c <__assert_fail@plt+0x276c>
   139d0:	cmp	r3, #24576	; 0x6000
   139d4:	beq	13a48 <__assert_fail@plt+0x2778>
   139d8:	cmp	r3, #8192	; 0x2000
   139dc:	beq	13a54 <__assert_fail@plt+0x2784>
   139e0:	cmp	r3, #4096	; 0x1000
   139e4:	beq	13a60 <__assert_fail@plt+0x2790>
   139e8:	cmp	r3, #49152	; 0xc000
   139ec:	beq	13a24 <__assert_fail@plt+0x2754>
   139f0:	ldr	r1, [pc, #116]	; 13a6c <__assert_fail@plt+0x279c>
   139f4:	mov	r0, #0
   139f8:	b	11060 <dcgettext@plt>
   139fc:	ldrd	r2, [r0, #48]	; 0x30
   13a00:	orrs	r3, r2, r3
   13a04:	mov	r2, #5
   13a08:	bne	13a18 <__assert_fail@plt+0x2748>
   13a0c:	ldr	r1, [pc, #92]	; 13a70 <__assert_fail@plt+0x27a0>
   13a10:	mov	r0, #0
   13a14:	b	11060 <dcgettext@plt>
   13a18:	ldr	r1, [pc, #84]	; 13a74 <__assert_fail@plt+0x27a4>
   13a1c:	mov	r0, #0
   13a20:	b	11060 <dcgettext@plt>
   13a24:	ldr	r1, [pc, #76]	; 13a78 <__assert_fail@plt+0x27a8>
   13a28:	mov	r0, #0
   13a2c:	b	11060 <dcgettext@plt>
   13a30:	ldr	r1, [pc, #68]	; 13a7c <__assert_fail@plt+0x27ac>
   13a34:	mov	r0, #0
   13a38:	b	11060 <dcgettext@plt>
   13a3c:	ldr	r1, [pc, #60]	; 13a80 <__assert_fail@plt+0x27b0>
   13a40:	mov	r0, #0
   13a44:	b	11060 <dcgettext@plt>
   13a48:	ldr	r1, [pc, #52]	; 13a84 <__assert_fail@plt+0x27b4>
   13a4c:	mov	r0, #0
   13a50:	b	11060 <dcgettext@plt>
   13a54:	ldr	r1, [pc, #44]	; 13a88 <__assert_fail@plt+0x27b8>
   13a58:	mov	r0, #0
   13a5c:	b	11060 <dcgettext@plt>
   13a60:	ldr	r1, [pc, #36]	; 13a8c <__assert_fail@plt+0x27bc>
   13a64:	mov	r0, #0
   13a68:	b	11060 <dcgettext@plt>
   13a6c:	andeq	lr, r1, r8, ror #28
   13a70:	andeq	lr, r1, ip, ror #27
   13a74:	andeq	lr, r1, r0, lsl #28
   13a78:	andeq	lr, r1, r0, ror #28
   13a7c:	andeq	lr, r1, r0, lsl lr
   13a80:	andeq	lr, r1, ip, lsl lr
   13a84:	andeq	lr, r1, ip, lsr #28
   13a88:	andeq	lr, r1, r0, asr #28
   13a8c:	andeq	lr, r1, r8, asr lr
   13a90:	push	{r4, lr}
   13a94:	bl	13aa4 <__assert_fail@plt+0x27d4>
   13a98:	cmp	r0, #0
   13a9c:	popne	{r4, pc}
   13aa0:	bl	1cf08 <__assert_fail@plt+0xbc38>
   13aa4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13aa8:	mov	r6, r1
   13aac:	mov	r8, r2
   13ab0:	mov	fp, r0
   13ab4:	bl	1366c <__assert_fail@plt+0x239c>
   13ab8:	mov	r4, r0
   13abc:	bl	136c8 <__assert_fail@plt+0x23f8>
   13ac0:	sub	r4, r4, fp
   13ac4:	mov	r5, r0
   13ac8:	mov	r0, r6
   13acc:	bl	11168 <strlen@plt>
   13ad0:	cmp	r5, #0
   13ad4:	add	r4, r4, r5
   13ad8:	mov	r7, r0
   13adc:	beq	13b50 <__assert_fail@plt+0x2880>
   13ae0:	add	r3, fp, r4
   13ae4:	ldrb	r3, [r3, #-1]
   13ae8:	cmp	r3, #47	; 0x2f
   13aec:	beq	13b68 <__assert_fail@plt+0x2898>
   13af0:	ldrb	r3, [r6]
   13af4:	cmp	r3, #47	; 0x2f
   13af8:	beq	13b68 <__assert_fail@plt+0x2898>
   13afc:	mov	r5, #1
   13b00:	mov	sl, #47	; 0x2f
   13b04:	add	r0, r7, #1
   13b08:	add	r0, r0, r4
   13b0c:	add	r0, r0, r5
   13b10:	bl	1d084 <__assert_fail@plt+0xbdb4>
   13b14:	subs	r9, r0, #0
   13b18:	beq	13b48 <__assert_fail@plt+0x2878>
   13b1c:	mov	r2, r4
   13b20:	mov	r1, fp
   13b24:	bl	11138 <mempcpy@plt>
   13b28:	cmp	r8, #0
   13b2c:	mov	r2, r7
   13b30:	mov	r1, r6
   13b34:	strb	sl, [r0], r5
   13b38:	strne	r0, [r8]
   13b3c:	bl	11138 <mempcpy@plt>
   13b40:	mov	r3, #0
   13b44:	strb	r3, [r0]
   13b48:	mov	r0, r9
   13b4c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b50:	ldrb	r3, [r6]
   13b54:	cmp	r3, #47	; 0x2f
   13b58:	moveq	r5, #1
   13b5c:	moveq	sl, #46	; 0x2e
   13b60:	movne	sl, r5
   13b64:	b	13b04 <__assert_fail@plt+0x2834>
   13b68:	mov	r5, #0
   13b6c:	mov	sl, r5
   13b70:	b	13b04 <__assert_fail@plt+0x2834>
   13b74:	ldr	r2, [r0, #20]
   13b78:	ldr	r3, [r0, #16]
   13b7c:	cmp	r2, r3
   13b80:	bhi	13ba8 <__assert_fail@plt+0x28d8>
   13b84:	ldr	r3, [r0]
   13b88:	ldmib	r0, {r1, r2}
   13b8c:	ands	r3, r3, #256	; 0x100
   13b90:	ldrne	r3, [r0, #44]	; 0x2c
   13b94:	ldrne	r0, [r0, #36]	; 0x24
   13b98:	sub	r2, r2, r1
   13b9c:	subne	r3, r3, r0
   13ba0:	add	r0, r3, r2
   13ba4:	bx	lr
   13ba8:	mov	r0, #0
   13bac:	bx	lr
   13bb0:	push	{r4, r5, lr}
   13bb4:	sub	sp, sp, #12
   13bb8:	mov	r5, r0
   13bbc:	bl	11180 <__errno_location@plt>
   13bc0:	mov	r2, #0
   13bc4:	mov	r4, r0
   13bc8:	ldr	r3, [r0]
   13bcc:	str	r2, [r4]
   13bd0:	mov	r0, r5
   13bd4:	str	r3, [sp]
   13bd8:	str	r3, [sp, #4]
   13bdc:	bl	1100c <free@plt>
   13be0:	ldr	r3, [r4]
   13be4:	add	r2, sp, #8
   13be8:	cmp	r3, #0
   13bec:	moveq	r3, #4
   13bf0:	movne	r3, #0
   13bf4:	add	r3, r2, r3
   13bf8:	ldr	r3, [r3, #-8]
   13bfc:	str	r3, [r4]
   13c00:	add	sp, sp, #12
   13c04:	pop	{r4, r5, pc}
   13c08:	push	{r4, r5, r6, r7, r8, lr}
   13c0c:	sub	sp, sp, #8
   13c10:	ldmib	r0, {ip, lr}
   13c14:	mov	r4, r0
   13c18:	ldr	r5, [sp, #32]
   13c1c:	cmp	lr, ip
   13c20:	beq	13c38 <__assert_fail@plt+0x2968>
   13c24:	str	r5, [sp, #32]
   13c28:	mov	r0, r4
   13c2c:	add	sp, sp, #8
   13c30:	pop	{r4, r5, r6, r7, r8, lr}
   13c34:	b	111d4 <fseeko64@plt>
   13c38:	ldr	lr, [r0, #20]
   13c3c:	ldr	ip, [r0, #16]
   13c40:	cmp	lr, ip
   13c44:	bne	13c24 <__assert_fail@plt+0x2954>
   13c48:	ldr	r8, [r0, #36]	; 0x24
   13c4c:	cmp	r8, #0
   13c50:	bne	13c24 <__assert_fail@plt+0x2954>
   13c54:	mov	r6, r2
   13c58:	mov	r7, r3
   13c5c:	bl	111b0 <fileno@plt>
   13c60:	mov	r2, r6
   13c64:	mov	r3, r7
   13c68:	str	r5, [sp]
   13c6c:	bl	110c0 <lseek64@plt>
   13c70:	mvn	r3, #0
   13c74:	mvn	r2, #0
   13c78:	cmp	r1, r3
   13c7c:	cmpeq	r0, r2
   13c80:	beq	13ca0 <__assert_fail@plt+0x29d0>
   13c84:	ldr	r3, [r4]
   13c88:	strd	r0, [r4, #80]	; 0x50
   13c8c:	mov	r0, r8
   13c90:	bic	r3, r3, #16
   13c94:	str	r3, [r4]
   13c98:	add	sp, sp, #8
   13c9c:	pop	{r4, r5, r6, r7, r8, pc}
   13ca0:	mvn	r0, #0
   13ca4:	b	13c98 <__assert_fail@plt+0x29c8>
   13ca8:	ldrd	r2, [r1, #8]
   13cac:	push	{r4, r5}
   13cb0:	ldrd	r4, [r0, #8]
   13cb4:	cmp	r5, r3
   13cb8:	cmpeq	r4, r2
   13cbc:	movne	r0, #0
   13cc0:	beq	13ccc <__assert_fail@plt+0x29fc>
   13cc4:	pop	{r4, r5}
   13cc8:	bx	lr
   13ccc:	ldrd	r4, [r0]
   13cd0:	ldrd	r2, [r1]
   13cd4:	cmp	r5, r3
   13cd8:	cmpeq	r4, r2
   13cdc:	moveq	r0, #1
   13ce0:	movne	r0, #0
   13ce4:	pop	{r4, r5}
   13ce8:	bx	lr
   13cec:	push	{r4, lr}
   13cf0:	mov	r2, r1
   13cf4:	mov	r3, #0
   13cf8:	ldrd	r0, [r0, #8]
   13cfc:	bl	1db44 <__assert_fail@plt+0xc874>
   13d00:	mov	r0, r2
   13d04:	pop	{r4, pc}
   13d08:	push	{r4, lr}
   13d0c:	mov	r2, r1
   13d10:	mov	r3, #0
   13d14:	ldrd	r0, [r0]
   13d18:	bl	1db44 <__assert_fail@plt+0xc874>
   13d1c:	mov	r0, r2
   13d20:	pop	{r4, pc}
   13d24:	push	{r4, r5}
   13d28:	ldrd	r2, [r1]
   13d2c:	ldrd	r4, [r0]
   13d30:	cmp	r5, r3
   13d34:	cmpeq	r4, r2
   13d38:	moveq	r0, #1
   13d3c:	movne	r0, #0
   13d40:	pop	{r4, r5}
   13d44:	bx	lr
   13d48:	ldr	r2, [r0]
   13d4c:	ldr	r3, [r1]
   13d50:	ldrd	r0, [r2, #160]	; 0xa0
   13d54:	ldrd	r2, [r3, #160]	; 0xa0
   13d58:	cmp	r1, r3
   13d5c:	cmpeq	r0, r2
   13d60:	movhi	r0, #1
   13d64:	movls	r0, #0
   13d68:	movcc	r3, #1
   13d6c:	movcs	r3, #0
   13d70:	sub	r0, r0, r3
   13d74:	bx	lr
   13d78:	push	{r4, r5, r6, r7, lr}
   13d7c:	sub	sp, sp, #100	; 0x64
   13d80:	ldr	r4, [r0, #44]	; 0x2c
   13d84:	ldr	r3, [r4, #48]	; 0x30
   13d88:	tst	r3, #512	; 0x200
   13d8c:	beq	13e00 <__assert_fail@plt+0x2b30>
   13d90:	ldr	r6, [r4, #52]	; 0x34
   13d94:	mov	r7, r1
   13d98:	cmp	r6, #0
   13d9c:	mov	r5, r0
   13da0:	beq	13dcc <__assert_fail@plt+0x2afc>
   13da4:	ldrd	r2, [r5, #64]	; 0x40
   13da8:	add	r1, sp, #96	; 0x60
   13dac:	mov	r0, r6
   13db0:	strd	r2, [r1, #-88]!	; 0xffffffa8
   13db4:	bl	16838 <__assert_fail@plt+0x5568>
   13db8:	cmp	r0, #0
   13dbc:	beq	13df8 <__assert_fail@plt+0x2b28>
   13dc0:	ldr	r0, [r0, #8]
   13dc4:	add	sp, sp, #100	; 0x64
   13dc8:	pop	{r4, r5, r6, r7, pc}
   13dcc:	ldr	r3, [pc, #168]	; 13e7c <__assert_fail@plt+0x2bac>
   13dd0:	mov	r1, r6
   13dd4:	str	r3, [sp]
   13dd8:	ldr	r2, [pc, #160]	; 13e80 <__assert_fail@plt+0x2bb0>
   13ddc:	ldr	r3, [pc, #160]	; 13e84 <__assert_fail@plt+0x2bb4>
   13de0:	mov	r0, #13
   13de4:	bl	16b18 <__assert_fail@plt+0x5848>
   13de8:	cmp	r0, #0
   13dec:	mov	r6, r0
   13df0:	str	r0, [r4, #52]	; 0x34
   13df4:	bne	13da4 <__assert_fail@plt+0x2ad4>
   13df8:	cmp	r7, #0
   13dfc:	bge	13e0c <__assert_fail@plt+0x2b3c>
   13e00:	mov	r0, #0
   13e04:	add	sp, sp, #100	; 0x64
   13e08:	pop	{r4, r5, r6, r7, pc}
   13e0c:	mov	r0, r7
   13e10:	add	r1, sp, #8
   13e14:	bl	10fa0 <fstatfs64@plt>
   13e18:	cmp	r0, #0
   13e1c:	bne	13e00 <__assert_fail@plt+0x2b30>
   13e20:	cmp	r6, #0
   13e24:	beq	13e70 <__assert_fail@plt+0x2ba0>
   13e28:	mov	r0, #16
   13e2c:	bl	1d084 <__assert_fail@plt+0xbdb4>
   13e30:	subs	r4, r0, #0
   13e34:	beq	13e70 <__assert_fail@plt+0x2ba0>
   13e38:	ldrd	r2, [r5, #64]	; 0x40
   13e3c:	ldr	r1, [sp, #8]
   13e40:	mov	r0, r6
   13e44:	str	r1, [r4, #8]
   13e48:	strd	r2, [r4]
   13e4c:	mov	r1, r4
   13e50:	bl	17480 <__assert_fail@plt+0x61b0>
   13e54:	cmp	r0, #0
   13e58:	beq	13e68 <__assert_fail@plt+0x2b98>
   13e5c:	cmp	r4, r0
   13e60:	beq	13e70 <__assert_fail@plt+0x2ba0>
   13e64:	bl	11294 <abort@plt>
   13e68:	mov	r0, r4
   13e6c:	bl	13bb0 <__assert_fail@plt+0x28e0>
   13e70:	ldr	r0, [sp, #8]
   13e74:	add	sp, sp, #100	; 0x64
   13e78:	pop	{r4, r5, r6, r7, pc}
   13e7c:			; <UNDEFINED> instruction: 0x00013bb0
   13e80:	andeq	r3, r1, r8, lsl #26
   13e84:	andeq	r3, r1, r4, lsr #26
   13e88:	push	{r4, r5, r6, lr}
   13e8c:	mov	r4, r2
   13e90:	ldr	r2, [r2, #48]	; 0x30
   13e94:	sub	sp, sp, #8
   13e98:	cmp	r2, #0
   13e9c:	add	r5, r4, #64	; 0x40
   13ea0:	bne	13ef8 <__assert_fail@plt+0x2c28>
   13ea4:	tst	r1, #1
   13ea8:	beq	13ef8 <__assert_fail@plt+0x2c28>
   13eac:	mov	r2, r5
   13eb0:	ldr	r1, [r4, #24]
   13eb4:	mov	r0, #3
   13eb8:	bl	11270 <__xstat64@plt>
   13ebc:	cmp	r0, #0
   13ec0:	beq	13f34 <__assert_fail@plt+0x2c64>
   13ec4:	bl	11180 <__errno_location@plt>
   13ec8:	ldr	r3, [r0]
   13ecc:	mov	r6, r0
   13ed0:	cmp	r3, #2
   13ed4:	beq	13fac <__assert_fail@plt+0x2cdc>
   13ed8:	str	r3, [r4, #32]
   13edc:	mov	r0, r5
   13ee0:	mov	r2, #104	; 0x68
   13ee4:	mov	r1, #0
   13ee8:	bl	11198 <memset@plt>
   13eec:	mov	r0, #10
   13ef0:	add	sp, sp, #8
   13ef4:	pop	{r4, r5, r6, pc}
   13ef8:	lsl	r1, r1, #30
   13efc:	orrs	r3, r3, r1, lsr #31
   13f00:	bne	13eac <__assert_fail@plt+0x2bdc>
   13f04:	mov	r3, #256	; 0x100
   13f08:	ldr	r2, [r4, #24]
   13f0c:	mov	r1, r0
   13f10:	str	r3, [sp]
   13f14:	mov	r0, #3
   13f18:	mov	r3, r5
   13f1c:	bl	11090 <__fxstatat64@plt>
   13f20:	cmp	r0, #0
   13f24:	beq	13f34 <__assert_fail@plt+0x2c64>
   13f28:	bl	11180 <__errno_location@plt>
   13f2c:	ldr	r3, [r0]
   13f30:	b	13ed8 <__assert_fail@plt+0x2c08>
   13f34:	ldr	r0, [r4, #80]	; 0x50
   13f38:	and	r0, r0, #61440	; 0xf000
   13f3c:	cmp	r0, #16384	; 0x4000
   13f40:	beq	13f64 <__assert_fail@plt+0x2c94>
   13f44:	cmp	r0, #40960	; 0xa000
   13f48:	moveq	r0, #12
   13f4c:	beq	13ef0 <__assert_fail@plt+0x2c20>
   13f50:	cmp	r0, #32768	; 0x8000
   13f54:	movne	r0, #3
   13f58:	moveq	r0, #8
   13f5c:	add	sp, sp, #8
   13f60:	pop	{r4, r5, r6, pc}
   13f64:	ldrb	r3, [r4, #168]	; 0xa8
   13f68:	cmp	r3, #46	; 0x2e
   13f6c:	beq	13f78 <__assert_fail@plt+0x2ca8>
   13f70:	mov	r0, #1
   13f74:	b	13ef0 <__assert_fail@plt+0x2c20>
   13f78:	ldrb	r3, [r4, #169]	; 0xa9
   13f7c:	cmp	r3, #0
   13f80:	beq	13f98 <__assert_fail@plt+0x2cc8>
   13f84:	ldr	r3, [r4, #168]	; 0xa8
   13f88:	bic	r3, r3, #-16777216	; 0xff000000
   13f8c:	bic	r3, r3, #255	; 0xff
   13f90:	cmp	r3, #11776	; 0x2e00
   13f94:	bne	13f70 <__assert_fail@plt+0x2ca0>
   13f98:	ldr	r0, [r4, #48]	; 0x30
   13f9c:	cmp	r0, #0
   13fa0:	movne	r0, #5
   13fa4:	moveq	r0, #1
   13fa8:	b	13ef0 <__assert_fail@plt+0x2c20>
   13fac:	mov	r2, r5
   13fb0:	ldr	r1, [r4, #24]
   13fb4:	mov	r0, #3
   13fb8:	bl	112ac <__lxstat64@plt>
   13fbc:	cmp	r0, #0
   13fc0:	streq	r0, [r6]
   13fc4:	moveq	r0, #13
   13fc8:	beq	13ef0 <__assert_fail@plt+0x2c20>
   13fcc:	ldr	r3, [r6]
   13fd0:	b	13ed8 <__assert_fail@plt+0x2c08>
   13fd4:	ldr	r3, [pc, #172]	; 14088 <__assert_fail@plt+0x2db8>
   13fd8:	push	{r4, r5, lr}
   13fdc:	and	r3, r3, r0
   13fe0:	cmp	r3, #0
   13fe4:	sub	sp, sp, #28
   13fe8:	bne	14030 <__assert_fail@plt+0x2d60>
   13fec:	ldr	r3, [r2, #4]
   13ff0:	cmp	r3, #0
   13ff4:	beq	14028 <__assert_fail@plt+0x2d58>
   13ff8:	ldr	r0, [r3, #48]	; 0x30
   13ffc:	cmp	r0, #0
   14000:	blt	14028 <__assert_fail@plt+0x2d58>
   14004:	ldr	ip, [r1]
   14008:	ldrd	r0, [ip, #16]
   1400c:	orrs	r1, r0, r1
   14010:	beq	14084 <__assert_fail@plt+0x2db4>
   14014:	ldrd	r4, [ip]
   14018:	ldrd	r0, [r2, #160]	; 0xa0
   1401c:	cmp	r5, r1
   14020:	cmpeq	r4, r0
   14024:	beq	14060 <__assert_fail@plt+0x2d90>
   14028:	add	sp, sp, #28
   1402c:	pop	{r4, r5, pc}
   14030:	ldrd	r4, [r2, #64]	; 0x40
   14034:	ldrd	r2, [r2, #160]	; 0xa0
   14038:	ldr	r0, [r1]
   1403c:	mov	r1, sp
   14040:	strd	r4, [sp]
   14044:	strd	r2, [sp, #8]
   14048:	bl	17744 <__assert_fail@plt+0x6474>
   1404c:	cmp	r0, #0
   14050:	beq	14084 <__assert_fail@plt+0x2db4>
   14054:	bl	13bb0 <__assert_fail@plt+0x28e0>
   14058:	add	sp, sp, #28
   1405c:	pop	{r4, r5, pc}
   14060:	ldrd	r0, [ip, #8]
   14064:	ldrd	r4, [r2, #64]	; 0x40
   14068:	cmp	r1, r5
   1406c:	cmpeq	r0, r4
   14070:	ldrdeq	r0, [r3, #64]	; 0x40
   14074:	ldrdeq	r2, [r3, #160]	; 0xa0
   14078:	strdeq	r0, [ip, #8]
   1407c:	strdeq	r2, [ip]
   14080:	b	14028 <__assert_fail@plt+0x2d58>
   14084:	bl	11294 <abort@plt>
   14088:	andeq	r0, r0, r2, lsl #2
   1408c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14090:	subs	sl, r3, #0
   14094:	sub	sp, sp, #104	; 0x68
   14098:	mov	r5, r0
   1409c:	mov	r6, r1
   140a0:	mov	r4, r2
   140a4:	ldr	r9, [r0, #48]	; 0x30
   140a8:	beq	14124 <__assert_fail@plt+0x2e54>
   140ac:	ldr	r1, [pc, #612]	; 14318 <__assert_fail@plt+0x3048>
   140b0:	mov	r0, sl
   140b4:	bl	10fdc <strcmp@plt>
   140b8:	cmp	r0, #0
   140bc:	bne	14124 <__assert_fail@plt+0x2e54>
   140c0:	tst	r9, #4
   140c4:	bne	1412c <__assert_fail@plt+0x2e5c>
   140c8:	cmp	r4, #0
   140cc:	bge	14304 <__assert_fail@plt+0x3034>
   140d0:	tst	r9, #512	; 0x200
   140d4:	beq	14218 <__assert_fail@plt+0x2f48>
   140d8:	add	r7, r5, #60	; 0x3c
   140dc:	mov	r0, r7
   140e0:	bl	17c50 <__assert_fail@plt+0x6980>
   140e4:	cmp	r0, #0
   140e8:	beq	14294 <__assert_fail@plt+0x2fc4>
   140ec:	ldr	r2, [pc, #552]	; 1431c <__assert_fail@plt+0x304c>
   140f0:	tst	r9, #16
   140f4:	ldr	r1, [pc, #548]	; 14320 <__assert_fail@plt+0x3050>
   140f8:	mov	r8, #1
   140fc:	movne	r1, r2
   14100:	mov	r2, r1
   14104:	ldr	r0, [r5, #32]
   14108:	mov	r1, sl
   1410c:	bl	17ce4 <__assert_fail@plt+0x6a14>
   14110:	mov	r7, r0
   14114:	cmp	r7, #0
   14118:	blt	142d8 <__assert_fail@plt+0x3008>
   1411c:	ldr	r9, [r5, #48]	; 0x30
   14120:	b	14160 <__assert_fail@plt+0x2e90>
   14124:	ands	r8, r9, #4
   14128:	beq	14154 <__assert_fail@plt+0x2e84>
   1412c:	mvn	r3, r4
   14130:	lsr	r3, r3, #31
   14134:	ands	r9, r3, r9, lsr #9
   14138:	beq	14148 <__assert_fail@plt+0x2e78>
   1413c:	mov	r0, r4
   14140:	bl	112a0 <close@plt>
   14144:	mov	r9, #0
   14148:	mov	r0, r9
   1414c:	add	sp, sp, #104	; 0x68
   14150:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14154:	cmp	r4, #0
   14158:	movge	r7, r4
   1415c:	blt	142e4 <__assert_fail@plt+0x3014>
   14160:	tst	r9, #2
   14164:	bne	14184 <__assert_fail@plt+0x2eb4>
   14168:	cmp	sl, #0
   1416c:	beq	141dc <__assert_fail@plt+0x2f0c>
   14170:	mov	r0, sl
   14174:	ldr	r1, [pc, #412]	; 14318 <__assert_fail@plt+0x3048>
   14178:	bl	10fdc <strcmp@plt>
   1417c:	cmp	r0, #0
   14180:	bne	141dc <__assert_fail@plt+0x2f0c>
   14184:	mov	r2, sp
   14188:	mov	r1, r7
   1418c:	mov	r0, #3
   14190:	bl	110a8 <__fxstat64@plt>
   14194:	cmp	r0, #0
   14198:	beq	141f4 <__assert_fail@plt+0x2f24>
   1419c:	mvn	r9, #0
   141a0:	cmp	r4, #0
   141a4:	bge	14148 <__assert_fail@plt+0x2e78>
   141a8:	bl	11180 <__errno_location@plt>
   141ac:	mov	r4, r0
   141b0:	mov	r0, r7
   141b4:	ldr	r5, [r4]
   141b8:	bl	112a0 <close@plt>
   141bc:	str	r5, [r4]
   141c0:	b	14148 <__assert_fail@plt+0x2e78>
   141c4:	ldrd	r0, [r6, #160]	; 0xa0
   141c8:	ldrd	r2, [sp, #96]	; 0x60
   141cc:	cmp	r1, r3
   141d0:	cmpeq	r0, r2
   141d4:	bne	14208 <__assert_fail@plt+0x2f38>
   141d8:	ldr	r9, [r5, #48]	; 0x30
   141dc:	tst	r9, #512	; 0x200
   141e0:	bne	1423c <__assert_fail@plt+0x2f6c>
   141e4:	mov	r0, r7
   141e8:	bl	1124c <fchdir@plt>
   141ec:	mov	r9, r0
   141f0:	b	141a0 <__assert_fail@plt+0x2ed0>
   141f4:	ldrd	r0, [r6, #64]	; 0x40
   141f8:	ldrd	r2, [sp]
   141fc:	cmp	r1, r3
   14200:	cmpeq	r0, r2
   14204:	beq	141c4 <__assert_fail@plt+0x2ef4>
   14208:	bl	11180 <__errno_location@plt>
   1420c:	mov	r3, #2
   14210:	str	r3, [r0]
   14214:	b	1419c <__assert_fail@plt+0x2ecc>
   14218:	ldr	r2, [pc, #252]	; 1431c <__assert_fail@plt+0x304c>
   1421c:	tst	r9, #16
   14220:	ldr	r1, [pc, #248]	; 14320 <__assert_fail@plt+0x3050>
   14224:	mov	r8, #1
   14228:	movne	r1, r2
   1422c:	mov	r0, sl
   14230:	bl	1d4ec <__assert_fail@plt+0xc21c>
   14234:	mov	r7, r0
   14238:	b	14114 <__assert_fail@plt+0x2e44>
   1423c:	ldr	r1, [r5, #32]
   14240:	cmn	r1, #100	; 0x64
   14244:	sub	r3, r7, r1
   14248:	clz	r3, r3
   1424c:	lsr	r3, r3, #5
   14250:	moveq	r3, #0
   14254:	cmp	r3, #0
   14258:	bne	142e0 <__assert_fail@plt+0x3010>
   1425c:	cmp	r8, #0
   14260:	beq	142c4 <__assert_fail@plt+0x2ff4>
   14264:	lsr	r3, r9, #2
   14268:	eor	r3, r3, #1
   1426c:	cmp	r1, #0
   14270:	movlt	r3, #0
   14274:	andge	r3, r3, #1
   14278:	cmp	r3, #0
   1427c:	beq	14288 <__assert_fail@plt+0x2fb8>
   14280:	mov	r0, r1
   14284:	bl	112a0 <close@plt>
   14288:	str	r7, [r5, #32]
   1428c:	mov	r9, #0
   14290:	b	14148 <__assert_fail@plt+0x2e78>
   14294:	mov	r0, r7
   14298:	bl	17c9c <__assert_fail@plt+0x69cc>
   1429c:	ldr	r9, [r5, #48]	; 0x30
   142a0:	subs	r7, r0, #0
   142a4:	movlt	r8, #1
   142a8:	andlt	r3, r9, #512	; 0x200
   142ac:	blt	142e8 <__assert_fail@plt+0x3018>
   142b0:	tst	r9, #2
   142b4:	mov	r4, r7
   142b8:	mov	r8, #1
   142bc:	beq	141dc <__assert_fail@plt+0x2f0c>
   142c0:	b	14184 <__assert_fail@plt+0x2eb4>
   142c4:	add	r0, r5, #60	; 0x3c
   142c8:	bl	17c58 <__assert_fail@plt+0x6988>
   142cc:	cmp	r0, #0
   142d0:	bge	14284 <__assert_fail@plt+0x2fb4>
   142d4:	b	14288 <__assert_fail@plt+0x2fb8>
   142d8:	mvn	r9, #0
   142dc:	b	14148 <__assert_fail@plt+0x2e78>
   142e0:	bl	11294 <abort@plt>
   142e4:	and	r3, r9, #512	; 0x200
   142e8:	ldr	r2, [pc, #48]	; 14320 <__assert_fail@plt+0x3050>
   142ec:	tst	r9, #16
   142f0:	ldr	r1, [pc, #36]	; 1431c <__assert_fail@plt+0x304c>
   142f4:	moveq	r1, r2
   142f8:	cmp	r3, #0
   142fc:	bne	14100 <__assert_fail@plt+0x2e30>
   14300:	b	1422c <__assert_fail@plt+0x2f5c>
   14304:	tst	r9, #2
   14308:	mov	r7, r4
   1430c:	mov	r8, #1
   14310:	beq	14170 <__assert_fail@plt+0x2ea0>
   14314:	b	14184 <__assert_fail@plt+0x2eb4>
   14318:	andeq	lr, r1, r0, asr sl
   1431c:	andeq	ip, r8, r0, lsl #18
   14320:	andeq	r4, r8, r0, lsl #18
   14324:	ldr	r3, [r0]
   14328:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1432c:	sub	sp, sp, #68	; 0x44
   14330:	mov	r6, r0
   14334:	str	r3, [sp, #8]
   14338:	ldr	r3, [r3, #12]
   1433c:	str	r1, [sp, #40]	; 0x28
   14340:	cmp	r3, #0
   14344:	str	r3, [sp, #44]	; 0x2c
   14348:	beq	14930 <__assert_fail@plt+0x3660>
   1434c:	mov	r0, r3
   14350:	bl	11240 <dirfd@plt>
   14354:	cmp	r0, #0
   14358:	str	r0, [sp, #60]	; 0x3c
   1435c:	blt	14d6c <__assert_fail@plt+0x3a9c>
   14360:	ldr	r3, [r6, #44]	; 0x2c
   14364:	cmp	r3, #0
   14368:	beq	14ff0 <__assert_fail@plt+0x3d20>
   1436c:	mvn	r3, #0
   14370:	str	r3, [sp, #24]
   14374:	ldr	r0, [r6, #48]	; 0x30
   14378:	ldr	r2, [sp, #8]
   1437c:	mov	r3, #1
   14380:	str	r3, [sp, #52]	; 0x34
   14384:	ldr	r3, [r2, #40]	; 0x28
   14388:	ldr	r1, [r2, #28]
   1438c:	sub	r2, r3, #1
   14390:	ldrb	r1, [r1, r2]
   14394:	cmp	r1, #47	; 0x2f
   14398:	moveq	r3, r2
   1439c:	ands	r0, r0, #4
   143a0:	movne	r0, #47	; 0x2f
   143a4:	ldrne	r2, [r6, #24]
   143a8:	streq	r0, [sp, #32]
   143ac:	addne	r1, r2, r3
   143b0:	strbne	r0, [r2, r3]
   143b4:	addne	r2, r1, #1
   143b8:	strne	r2, [sp, #32]
   143bc:	ldr	r2, [sp, #8]
   143c0:	add	r3, r3, #1
   143c4:	ldr	r1, [r6, #36]	; 0x24
   143c8:	ldr	r2, [r2, #48]	; 0x30
   143cc:	mov	r0, r3
   143d0:	str	r3, [sp, #12]
   143d4:	sub	r1, r1, r0
   143d8:	mov	r3, #0
   143dc:	add	r2, r2, #1
   143e0:	mov	r7, r3
   143e4:	str	r3, [sp, #48]	; 0x30
   143e8:	str	r1, [sp, #20]
   143ec:	str	r2, [sp, #28]
   143f0:	str	r3, [sp, #36]	; 0x24
   143f4:	str	r3, [sp]
   143f8:	mov	sl, r3
   143fc:	str	r3, [sp, #16]
   14400:	b	14484 <__assert_fail@plt+0x31b4>
   14404:	tst	r3, #251	; 0xfb
   14408:	beq	14598 <__assert_fail@plt+0x32c8>
   1440c:	lsr	r2, r1, #4
   14410:	cmp	r3, #10
   14414:	orrne	r2, r2, #1
   14418:	tst	r2, #1
   1441c:	beq	14a5c <__assert_fail@plt+0x378c>
   14420:	sub	r3, r3, #1
   14424:	mov	r2, #11
   14428:	cmp	r3, #11
   1442c:	strh	r2, [r4, #56]	; 0x38
   14430:	bhi	1500c <__assert_fail@plt+0x3d3c>
   14434:	ldr	r2, [pc, #3040]	; 1501c <__assert_fail@plt+0x3d4c>
   14438:	ldr	r1, [r2, r3, lsl #2]
   1443c:	mov	r2, #1
   14440:	mov	r3, #0
   14444:	str	r1, [r4, #80]	; 0x50
   14448:	strd	r2, [r4, #112]	; 0x70
   1444c:	ldr	r3, [sp, #16]
   14450:	str	r7, [r4, #8]
   14454:	cmp	r3, #0
   14458:	streq	r4, [sp, #16]
   1445c:	ldrne	r3, [sp]
   14460:	strne	r4, [r3, #8]
   14464:	ldr	r3, [pc, #2996]	; 15020 <__assert_fail@plt+0x3d50>
   14468:	cmp	sl, r3
   1446c:	beq	146e8 <__assert_fail@plt+0x3418>
   14470:	ldr	r3, [sp, #24]
   14474:	add	sl, sl, #1
   14478:	cmp	r3, sl
   1447c:	bls	14800 <__assert_fail@plt+0x3530>
   14480:	str	r4, [sp]
   14484:	ldr	r3, [sp, #8]
   14488:	ldr	r4, [r3, #12]
   1448c:	cmp	r4, #0
   14490:	beq	14800 <__assert_fail@plt+0x3530>
   14494:	bl	11180 <__errno_location@plt>
   14498:	mov	fp, r0
   1449c:	mov	r0, r4
   144a0:	str	r7, [fp]
   144a4:	bl	11228 <readdir64@plt>
   144a8:	subs	r8, r0, #0
   144ac:	beq	14bfc <__assert_fail@plt+0x392c>
   144b0:	ldr	r3, [r6, #48]	; 0x30
   144b4:	tst	r3, #32
   144b8:	bne	144c8 <__assert_fail@plt+0x31f8>
   144bc:	ldrb	r3, [r8, #19]
   144c0:	cmp	r3, #46	; 0x2e
   144c4:	beq	1474c <__assert_fail@plt+0x347c>
   144c8:	add	r1, r8, #19
   144cc:	mov	r0, r1
   144d0:	str	r1, [sp, #4]
   144d4:	bl	11168 <strlen@plt>
   144d8:	mov	r5, r0
   144dc:	add	r0, r0, #176	; 0xb0
   144e0:	bic	r0, r0, #7
   144e4:	bl	1d084 <__assert_fail@plt+0xbdb4>
   144e8:	subs	r4, r0, #0
   144ec:	beq	147f4 <__assert_fail@plt+0x3524>
   144f0:	add	r9, r4, #168	; 0xa8
   144f4:	ldr	r1, [sp, #4]
   144f8:	mov	r2, r5
   144fc:	mov	r0, r9
   14500:	bl	11030 <memcpy@plt>
   14504:	ldr	r3, [sp, #20]
   14508:	add	r1, r4, r5
   1450c:	ldr	r2, [r6, #24]
   14510:	mov	r0, #196608	; 0x30000
   14514:	cmp	r3, r5
   14518:	strb	r7, [r1, #168]	; 0xa8
   1451c:	str	r5, [r4, #52]	; 0x34
   14520:	str	r6, [r4, #44]	; 0x2c
   14524:	str	r7, [r4, #32]
   14528:	str	r7, [r4, #12]
   1452c:	str	r7, [r4, #16]
   14530:	str	r7, [r4, #20]
   14534:	str	r2, [r4, #28]
   14538:	str	r0, [r4, #58]	; 0x3a
   1453c:	bls	145d0 <__assert_fail@plt+0x3300>
   14540:	ldr	r3, [sp, #12]
   14544:	adds	r5, r3, r5
   14548:	bcs	14650 <__assert_fail@plt+0x3380>
   1454c:	ldrd	r2, [r8]
   14550:	ldr	r1, [r6, #48]	; 0x30
   14554:	ldr	r0, [sp, #28]
   14558:	strd	r2, [r4, #160]	; 0xa0
   1455c:	ldr	r3, [r6]
   14560:	tst	r1, #4
   14564:	str	r0, [r4, #48]	; 0x30
   14568:	str	r5, [r4, #40]	; 0x28
   1456c:	str	r3, [r4, #4]
   14570:	streq	r9, [r4, #24]
   14574:	bne	146c4 <__assert_fail@plt+0x33f4>
   14578:	ldr	r3, [r6, #44]	; 0x2c
   1457c:	cmp	r3, #0
   14580:	beq	1458c <__assert_fail@plt+0x32bc>
   14584:	tst	r1, #1024	; 0x400
   14588:	beq	14734 <__assert_fail@plt+0x3464>
   1458c:	tst	r1, #8
   14590:	ldrb	r3, [r8, #18]
   14594:	bne	14404 <__assert_fail@plt+0x3134>
   14598:	sub	r3, r3, #1
   1459c:	cmp	r3, #11
   145a0:	mov	r2, #11
   145a4:	strh	r2, [r4, #56]	; 0x38
   145a8:	strhi	r7, [r4, #80]	; 0x50
   145ac:	movhi	r2, #2
   145b0:	movhi	r3, #0
   145b4:	bhi	14448 <__assert_fail@plt+0x3178>
   145b8:	ldr	r2, [pc, #2652]	; 1501c <__assert_fail@plt+0x3d4c>
   145bc:	ldr	r1, [r2, r3, lsl #2]
   145c0:	mov	r2, #2
   145c4:	mov	r3, #0
   145c8:	str	r1, [r4, #80]	; 0x50
   145cc:	b	14448 <__assert_fail@plt+0x3178>
   145d0:	ldr	r0, [r6, #36]	; 0x24
   145d4:	ldr	r3, [sp, #12]
   145d8:	add	r1, r0, #256	; 0x100
   145dc:	add	r1, r1, #1
   145e0:	add	r1, r1, r3
   145e4:	add	r1, r1, r5
   145e8:	cmp	r0, r1
   145ec:	bhi	1476c <__assert_fail@plt+0x349c>
   145f0:	mov	r0, r2
   145f4:	str	r1, [r6, #36]	; 0x24
   145f8:	str	r2, [sp, #4]
   145fc:	bl	1d0b0 <__assert_fail@plt+0xbde0>
   14600:	ldr	r2, [sp, #4]
   14604:	cmp	r0, #0
   14608:	beq	14de8 <__assert_fail@plt+0x3b18>
   1460c:	cmp	r2, r0
   14610:	str	r0, [r6, #24]
   14614:	beq	14634 <__assert_fail@plt+0x3364>
   14618:	ldr	r2, [r6, #48]	; 0x30
   1461c:	tst	r2, #4
   14620:	ldrne	r3, [sp, #12]
   14624:	addne	r3, r0, r3
   14628:	strne	r3, [sp, #32]
   1462c:	mov	r3, #1
   14630:	str	r3, [sp, #36]	; 0x24
   14634:	ldr	r2, [r6, #36]	; 0x24
   14638:	ldr	r3, [sp, #12]
   1463c:	sub	r3, r2, r3
   14640:	str	r3, [sp, #20]
   14644:	ldr	r3, [sp, #12]
   14648:	adds	r5, r3, r5
   1464c:	bcc	1454c <__assert_fail@plt+0x327c>
   14650:	ldr	r8, [sp, #16]
   14654:	mov	r0, r4
   14658:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1465c:	cmp	r8, #0
   14660:	beq	14688 <__assert_fail@plt+0x33b8>
   14664:	ldr	r3, [r8, #12]
   14668:	ldr	r4, [r8, #8]
   1466c:	subs	r0, r3, #0
   14670:	beq	14678 <__assert_fail@plt+0x33a8>
   14674:	bl	112c4 <closedir@plt>
   14678:	mov	r0, r8
   1467c:	bl	13bb0 <__assert_fail@plt+0x28e0>
   14680:	subs	r8, r4, #0
   14684:	bne	14664 <__assert_fail@plt+0x3394>
   14688:	ldr	r4, [sp, #8]
   1468c:	mov	r8, #0
   14690:	ldr	r0, [r4, #12]
   14694:	bl	112c4 <closedir@plt>
   14698:	ldr	r3, [r6, #48]	; 0x30
   1469c:	mov	r1, #7
   146a0:	orr	r3, r3, #8192	; 0x2000
   146a4:	mov	r2, #36	; 0x24
   146a8:	str	r8, [r4, #12]
   146ac:	strh	r1, [r4, #56]	; 0x38
   146b0:	str	r3, [r6, #48]	; 0x30
   146b4:	str	r2, [fp]
   146b8:	mov	r0, r8
   146bc:	add	sp, sp, #68	; 0x44
   146c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146c4:	ldr	r0, [r4, #28]
   146c8:	ldr	r2, [r4, #52]	; 0x34
   146cc:	mov	r1, r9
   146d0:	str	r0, [r4, #24]
   146d4:	add	r2, r2, #1
   146d8:	ldr	r0, [sp, #32]
   146dc:	bl	11000 <memmove@plt>
   146e0:	ldr	r1, [r6, #48]	; 0x30
   146e4:	b	14578 <__assert_fail@plt+0x32a8>
   146e8:	ldr	r3, [r6, #44]	; 0x2c
   146ec:	cmp	r3, #0
   146f0:	bne	14470 <__assert_fail@plt+0x31a0>
   146f4:	ldr	r1, [sp, #60]	; 0x3c
   146f8:	ldr	r0, [sp, #8]
   146fc:	bl	13d78 <__assert_fail@plt+0x2aa8>
   14700:	ldr	r3, [pc, #2332]	; 15024 <__assert_fail@plt+0x3d54>
   14704:	cmp	r0, r3
   14708:	beq	1472c <__assert_fail@plt+0x345c>
   1470c:	ldr	r3, [pc, #2324]	; 15028 <__assert_fail@plt+0x3d58>
   14710:	cmp	r0, r3
   14714:	beq	1472c <__assert_fail@plt+0x345c>
   14718:	ldr	r3, [pc, #2316]	; 1502c <__assert_fail@plt+0x3d5c>
   1471c:	cmp	r0, r3
   14720:	movne	r3, #1
   14724:	strne	r3, [sp, #48]	; 0x30
   14728:	bne	14470 <__assert_fail@plt+0x31a0>
   1472c:	str	r7, [sp, #48]	; 0x30
   14730:	b	14470 <__assert_fail@plt+0x31a0>
   14734:	mov	r3, r7
   14738:	mov	r2, r4
   1473c:	ldr	r0, [r6, #32]
   14740:	bl	13e88 <__assert_fail@plt+0x2bb8>
   14744:	strh	r0, [r4, #56]	; 0x38
   14748:	b	1444c <__assert_fail@plt+0x317c>
   1474c:	ldrb	r3, [r8, #20]
   14750:	cmp	r3, #0
   14754:	beq	14764 <__assert_fail@plt+0x3494>
   14758:	ldrh	r3, [r8, #20]
   1475c:	cmp	r3, #46	; 0x2e
   14760:	bne	144c8 <__assert_fail@plt+0x31f8>
   14764:	ldr	r4, [sp]
   14768:	b	14480 <__assert_fail@plt+0x31b0>
   1476c:	mov	r0, r2
   14770:	ldr	r8, [sp, #16]
   14774:	bl	13bb0 <__assert_fail@plt+0x28e0>
   14778:	mov	r3, #36	; 0x24
   1477c:	mov	r5, r3
   14780:	str	r7, [r6, #24]
   14784:	str	r3, [fp]
   14788:	mov	r0, r4
   1478c:	bl	13bb0 <__assert_fail@plt+0x28e0>
   14790:	cmp	r8, #0
   14794:	beq	147bc <__assert_fail@plt+0x34ec>
   14798:	ldr	r3, [r8, #12]
   1479c:	ldr	r4, [r8, #8]
   147a0:	subs	r0, r3, #0
   147a4:	beq	147ac <__assert_fail@plt+0x34dc>
   147a8:	bl	112c4 <closedir@plt>
   147ac:	mov	r0, r8
   147b0:	bl	13bb0 <__assert_fail@plt+0x28e0>
   147b4:	subs	r8, r4, #0
   147b8:	bne	14798 <__assert_fail@plt+0x34c8>
   147bc:	ldr	r4, [sp, #8]
   147c0:	mov	r8, #0
   147c4:	ldr	r0, [r4, #12]
   147c8:	bl	112c4 <closedir@plt>
   147cc:	ldr	r3, [r6, #48]	; 0x30
   147d0:	mov	r2, #7
   147d4:	orr	r3, r3, #8192	; 0x2000
   147d8:	str	r8, [r4, #12]
   147dc:	strh	r2, [r4, #56]	; 0x38
   147e0:	mov	r0, r8
   147e4:	str	r3, [r6, #48]	; 0x30
   147e8:	str	r5, [fp]
   147ec:	add	sp, sp, #68	; 0x44
   147f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147f4:	ldr	r8, [sp, #16]
   147f8:	ldr	r5, [fp]
   147fc:	b	14788 <__assert_fail@plt+0x34b8>
   14800:	ldr	r8, [sp, #16]
   14804:	ldr	r3, [sp, #36]	; 0x24
   14808:	cmp	r3, #0
   1480c:	bne	14c54 <__assert_fail@plt+0x3984>
   14810:	ldr	r3, [r6, #48]	; 0x30
   14814:	tst	r3, #4
   14818:	beq	14844 <__assert_fail@plt+0x3574>
   1481c:	ldr	r3, [r6, #36]	; 0x24
   14820:	ldr	r2, [sp, #12]
   14824:	cmp	sl, #0
   14828:	cmpne	r3, r2
   1482c:	ldreq	r3, [sp, #32]
   14830:	subeq	r3, r3, #1
   14834:	streq	r3, [sp, #32]
   14838:	ldr	r2, [sp, #32]
   1483c:	mov	r3, #0
   14840:	strb	r3, [r2]
   14844:	ldr	r3, [sp, #52]	; 0x34
   14848:	ldr	r2, [sp, #44]	; 0x2c
   1484c:	cmp	r2, #0
   14850:	movne	r3, #0
   14854:	andeq	r3, r3, #1
   14858:	cmp	r3, #0
   1485c:	beq	148ec <__assert_fail@plt+0x361c>
   14860:	ldr	r3, [sp, #40]	; 0x28
   14864:	cmp	sl, #0
   14868:	cmpne	r3, #1
   1486c:	beq	14af8 <__assert_fail@plt+0x3828>
   14870:	ldr	r3, [sp, #48]	; 0x30
   14874:	cmp	r3, #0
   14878:	bne	14cd8 <__assert_fail@plt+0x3a08>
   1487c:	ldr	r4, [r6, #44]	; 0x2c
   14880:	cmp	r4, #0
   14884:	cmpne	sl, #1
   14888:	bls	146b8 <__assert_fail@plt+0x33e8>
   1488c:	ldr	r3, [r6, #40]	; 0x28
   14890:	cmp	sl, r3
   14894:	bls	14a8c <__assert_fail@plt+0x37bc>
   14898:	add	r1, sl, #40	; 0x28
   1489c:	cmn	r1, #-1073741823	; 0xc0000001
   148a0:	str	r1, [r6, #40]	; 0x28
   148a4:	bhi	14dd0 <__assert_fail@plt+0x3b00>
   148a8:	lsl	r1, r1, #2
   148ac:	ldr	r0, [r6, #8]
   148b0:	bl	1d0b0 <__assert_fail@plt+0xbde0>
   148b4:	cmp	r0, #0
   148b8:	beq	14dd0 <__assert_fail@plt+0x3b00>
   148bc:	str	r0, [r6, #8]
   148c0:	b	14a90 <__assert_fail@plt+0x37c0>
   148c4:	ldr	r1, [sp, #8]
   148c8:	ldr	r3, [pc, #1888]	; 15030 <__assert_fail@plt+0x3d60>
   148cc:	mvn	r2, #0
   148d0:	ldr	r1, [r1, #4]
   148d4:	mov	r0, r6
   148d8:	bl	1408c <__assert_fail@plt+0x2dbc>
   148dc:	adds	r5, r0, #0
   148e0:	movne	r5, #1
   148e4:	cmp	r5, #0
   148e8:	bne	14e94 <__assert_fail@plt+0x3bc4>
   148ec:	cmp	sl, #0
   148f0:	bne	14870 <__assert_fail@plt+0x35a0>
   148f4:	ldr	r3, [sp, #40]	; 0x28
   148f8:	cmp	r3, #3
   148fc:	beq	14e5c <__assert_fail@plt+0x3b8c>
   14900:	cmp	r8, #0
   14904:	beq	14d8c <__assert_fail@plt+0x3abc>
   14908:	ldr	r3, [r8, #12]
   1490c:	ldr	r4, [r8, #8]
   14910:	subs	r0, r3, #0
   14914:	beq	1491c <__assert_fail@plt+0x364c>
   14918:	bl	112c4 <closedir@plt>
   1491c:	mov	r0, r8
   14920:	bl	13bb0 <__assert_fail@plt+0x28e0>
   14924:	subs	r8, r4, #0
   14928:	bne	14908 <__assert_fail@plt+0x3638>
   1492c:	b	14d8c <__assert_fail@plt+0x3abc>
   14930:	ldr	r3, [r0, #48]	; 0x30
   14934:	ldr	ip, [sp, #8]
   14938:	and	r2, r3, #516	; 0x204
   1493c:	cmp	r2, #512	; 0x200
   14940:	mvnne	r0, #99	; 0x63
   14944:	ldreq	r0, [r0, #32]
   14948:	ands	r2, r3, #16
   1494c:	ldr	r1, [ip, #24]
   14950:	bne	14a6c <__assert_fail@plt+0x379c>
   14954:	add	r3, sp, #60	; 0x3c
   14958:	bl	17d1c <__assert_fail@plt+0x6a4c>
   1495c:	ldr	r3, [sp, #8]
   14960:	cmp	r0, #0
   14964:	mov	r8, r0
   14968:	str	r0, [r3, #12]
   1496c:	beq	14edc <__assert_fail@plt+0x3c0c>
   14970:	ldrh	r3, [r3, #56]	; 0x38
   14974:	cmp	r3, #11
   14978:	beq	14f04 <__assert_fail@plt+0x3c34>
   1497c:	ldr	r0, [r6, #48]	; 0x30
   14980:	tst	r0, #256	; 0x100
   14984:	bne	14b60 <__assert_fail@plt+0x3890>
   14988:	ldr	r2, [r6, #44]	; 0x2c
   1498c:	ldr	r3, [pc, #1696]	; 15034 <__assert_fail@plt+0x3d64>
   14990:	cmp	r2, #0
   14994:	mvnne	r3, #0
   14998:	str	r3, [sp, #24]
   1499c:	ldr	r3, [sp, #40]	; 0x28
   149a0:	cmp	r3, #2
   149a4:	beq	14e08 <__assert_fail@plt+0x3b38>
   149a8:	ldr	r3, [r6, #48]	; 0x30
   149ac:	and	r3, r3, #56	; 0x38
   149b0:	cmp	r3, #24
   149b4:	beq	14f24 <__assert_fail@plt+0x3c54>
   149b8:	ldr	r3, [sp, #40]	; 0x28
   149bc:	mov	r4, #1
   149c0:	sub	r5, r3, #3
   149c4:	clz	r5, r5
   149c8:	lsr	r5, r5, #5
   149cc:	ldr	r3, [r6, #48]	; 0x30
   149d0:	tst	r3, #512	; 0x200
   149d4:	bne	14e78 <__assert_fail@plt+0x3ba8>
   149d8:	ldr	r2, [sp, #60]	; 0x3c
   149dc:	cmp	r2, #0
   149e0:	blt	149fc <__assert_fail@plt+0x372c>
   149e4:	mov	r3, #0
   149e8:	ldr	r1, [sp, #8]
   149ec:	mov	r0, r6
   149f0:	bl	1408c <__assert_fail@plt+0x2dbc>
   149f4:	cmp	r0, #0
   149f8:	beq	14374 <__assert_fail@plt+0x30a4>
   149fc:	tst	r4, r5
   14a00:	bne	14f7c <__assert_fail@plt+0x3cac>
   14a04:	ldr	r4, [sp, #8]
   14a08:	ldrh	r3, [r4, #58]	; 0x3a
   14a0c:	ldr	r0, [r4, #12]
   14a10:	orr	r3, r3, #1
   14a14:	strh	r3, [r4, #58]	; 0x3a
   14a18:	bl	112c4 <closedir@plt>
   14a1c:	ldr	r0, [r6, #48]	; 0x30
   14a20:	mov	r3, #0
   14a24:	tst	r0, #512	; 0x200
   14a28:	str	r3, [r4, #12]
   14a2c:	beq	14a48 <__assert_fail@plt+0x3778>
   14a30:	ldr	r3, [sp, #60]	; 0x3c
   14a34:	cmp	r3, #0
   14a38:	blt	14a48 <__assert_fail@plt+0x3778>
   14a3c:	mov	r0, r3
   14a40:	bl	112a0 <close@plt>
   14a44:	ldr	r0, [r6, #48]	; 0x30
   14a48:	ldr	r2, [sp, #8]
   14a4c:	mov	r3, #0
   14a50:	str	r3, [sp, #52]	; 0x34
   14a54:	str	r3, [r2, #12]
   14a58:	b	14384 <__assert_fail@plt+0x30b4>
   14a5c:	mov	r3, #11
   14a60:	strh	r3, [r4, #56]	; 0x38
   14a64:	mov	r3, #9
   14a68:	b	145b8 <__assert_fail@plt+0x32e8>
   14a6c:	tst	r3, #1
   14a70:	moveq	r2, #32768	; 0x8000
   14a74:	beq	14954 <__assert_fail@plt+0x3684>
   14a78:	ldr	r2, [ip, #48]	; 0x30
   14a7c:	cmp	r2, #0
   14a80:	movne	r2, #32768	; 0x8000
   14a84:	moveq	r2, #0
   14a88:	b	14954 <__assert_fail@plt+0x3684>
   14a8c:	ldr	r0, [r6, #8]
   14a90:	cmp	r8, #0
   14a94:	movne	r2, r0
   14a98:	beq	14aac <__assert_fail@plt+0x37dc>
   14a9c:	str	r8, [r2], #4
   14aa0:	ldr	r8, [r8, #8]
   14aa4:	cmp	r8, #0
   14aa8:	bne	14a9c <__assert_fail@plt+0x37cc>
   14aac:	mov	r3, r4
   14ab0:	mov	r2, #4
   14ab4:	mov	r1, sl
   14ab8:	bl	11258 <qsort@plt>
   14abc:	ldr	ip, [r6, #8]
   14ac0:	sub	r3, sl, #1
   14ac4:	mov	r2, ip
   14ac8:	ldr	r8, [ip]
   14acc:	ldr	r1, [r2]
   14ad0:	ldr	r0, [r2, #4]!
   14ad4:	subs	r3, r3, #1
   14ad8:	str	r0, [r1, #8]
   14adc:	bne	14acc <__assert_fail@plt+0x37fc>
   14ae0:	add	sl, ip, sl, lsl #2
   14ae4:	mov	r0, r8
   14ae8:	ldr	r2, [sl, #-4]
   14aec:	str	r3, [r2, #8]
   14af0:	add	sp, sp, #68	; 0x44
   14af4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14af8:	ldr	r3, [sp, #8]
   14afc:	ldr	r3, [r3, #48]	; 0x30
   14b00:	cmp	r3, #0
   14b04:	bne	148c4 <__assert_fail@plt+0x35f4>
   14b08:	ldr	r2, [r6, #48]	; 0x30
   14b0c:	tst	r2, #4
   14b10:	movne	r5, r3
   14b14:	addne	r4, r6, #60	; 0x3c
   14b18:	bne	14b48 <__assert_fail@plt+0x3878>
   14b1c:	tst	r2, #512	; 0x200
   14b20:	bne	14f94 <__assert_fail@plt+0x3cc4>
   14b24:	ldr	r0, [r6, #28]
   14b28:	bl	1124c <fchdir@plt>
   14b2c:	add	r4, r6, #60	; 0x3c
   14b30:	adds	r5, r0, #0
   14b34:	movne	r5, #1
   14b38:	b	14b48 <__assert_fail@plt+0x3878>
   14b3c:	bl	17c9c <__assert_fail@plt+0x69cc>
   14b40:	cmp	r0, #0
   14b44:	bge	14dc8 <__assert_fail@plt+0x3af8>
   14b48:	mov	r0, r4
   14b4c:	bl	17c50 <__assert_fail@plt+0x6980>
   14b50:	cmp	r0, #0
   14b54:	mov	r0, r4
   14b58:	beq	14b3c <__assert_fail@plt+0x386c>
   14b5c:	b	148e4 <__assert_fail@plt+0x3614>
   14b60:	ldr	r5, [sp, #8]
   14b64:	add	r1, r6, #56	; 0x38
   14b68:	mov	r2, r5
   14b6c:	bl	13fd4 <__assert_fail@plt+0x2d04>
   14b70:	mov	r3, #0
   14b74:	mov	r2, r5
   14b78:	ldr	r1, [r6, #48]	; 0x30
   14b7c:	ldr	r0, [r6, #32]
   14b80:	bl	13e88 <__assert_fail@plt+0x2bb8>
   14b84:	ldr	r2, [r6, #48]	; 0x30
   14b88:	ldr	r3, [pc, #1192]	; 15038 <__assert_fail@plt+0x3d68>
   14b8c:	mov	r7, r5
   14b90:	and	r3, r3, r2
   14b94:	cmp	r3, #0
   14b98:	beq	14e1c <__assert_fail@plt+0x3b4c>
   14b9c:	mov	r0, #24
   14ba0:	bl	1d084 <__assert_fail@plt+0xbdb4>
   14ba4:	subs	r4, r0, #0
   14ba8:	beq	14fc0 <__assert_fail@plt+0x3cf0>
   14bac:	ldrd	r0, [r5, #160]	; 0xa0
   14bb0:	ldrd	r2, [r5, #64]	; 0x40
   14bb4:	str	r5, [r4, #16]
   14bb8:	strd	r0, [r4, #8]
   14bbc:	strd	r2, [r4]
   14bc0:	mov	r1, r4
   14bc4:	ldr	r0, [r6, #56]	; 0x38
   14bc8:	bl	17480 <__assert_fail@plt+0x61b0>
   14bcc:	cmp	r4, r0
   14bd0:	mov	r5, r0
   14bd4:	beq	14988 <__assert_fail@plt+0x36b8>
   14bd8:	mov	r0, r4
   14bdc:	bl	13bb0 <__assert_fail@plt+0x28e0>
   14be0:	cmp	r5, #0
   14be4:	beq	14fc0 <__assert_fail@plt+0x3cf0>
   14be8:	ldr	r2, [r5, #16]
   14bec:	mov	r3, #2
   14bf0:	str	r2, [r7]
   14bf4:	strh	r3, [r7, #56]	; 0x38
   14bf8:	b	14988 <__assert_fail@plt+0x36b8>
   14bfc:	ldr	r3, [fp]
   14c00:	ldr	r8, [sp, #16]
   14c04:	cmp	r3, #0
   14c08:	beq	14c2c <__assert_fail@plt+0x395c>
   14c0c:	ldr	r2, [sp, #44]	; 0x2c
   14c10:	ldr	r1, [sp, #8]
   14c14:	cmp	sl, #0
   14c18:	cmpeq	r2, #0
   14c1c:	moveq	r2, #4
   14c20:	movne	r2, #7
   14c24:	str	r3, [r1, #32]
   14c28:	strh	r2, [r1, #56]	; 0x38
   14c2c:	ldr	r4, [sp, #8]
   14c30:	ldr	r0, [r4, #12]
   14c34:	cmp	r0, #0
   14c38:	beq	14804 <__assert_fail@plt+0x3534>
   14c3c:	bl	112c4 <closedir@plt>
   14c40:	mov	r3, #0
   14c44:	str	r3, [r4, #12]
   14c48:	ldr	r3, [sp, #36]	; 0x24
   14c4c:	cmp	r3, #0
   14c50:	beq	14810 <__assert_fail@plt+0x3540>
   14c54:	ldr	r1, [r6, #4]
   14c58:	ldr	r0, [r6, #24]
   14c5c:	cmp	r1, #0
   14c60:	beq	14c90 <__assert_fail@plt+0x39c0>
   14c64:	ldr	r3, [r1, #24]
   14c68:	add	r2, r1, #168	; 0xa8
   14c6c:	cmp	r3, r2
   14c70:	ldrne	r2, [r1, #28]
   14c74:	str	r0, [r1, #28]
   14c78:	subne	r3, r3, r2
   14c7c:	addne	r3, r0, r3
   14c80:	strne	r3, [r1, #24]
   14c84:	ldr	r1, [r1, #8]
   14c88:	cmp	r1, #0
   14c8c:	bne	14c64 <__assert_fail@plt+0x3994>
   14c90:	mov	r3, r8
   14c94:	b	14cc4 <__assert_fail@plt+0x39f4>
   14c98:	ldr	r2, [r3, #24]
   14c9c:	cmp	r2, r1
   14ca0:	ldrne	r1, [r3, #28]
   14ca4:	str	r0, [r3, #28]
   14ca8:	subne	r2, r2, r1
   14cac:	addne	r2, r0, r2
   14cb0:	strne	r2, [r3, #24]
   14cb4:	ldr	r2, [r3, #8]
   14cb8:	cmp	r2, #0
   14cbc:	ldreq	r2, [r3, #4]
   14cc0:	mov	r3, r2
   14cc4:	ldr	r2, [r3, #48]	; 0x30
   14cc8:	add	r1, r3, #168	; 0xa8
   14ccc:	cmp	r2, #0
   14cd0:	bge	14c98 <__assert_fail@plt+0x39c8>
   14cd4:	b	14810 <__assert_fail@plt+0x3540>
   14cd8:	ldr	r2, [r6, #40]	; 0x28
   14cdc:	ldr	r3, [pc, #856]	; 1503c <__assert_fail@plt+0x3d6c>
   14ce0:	cmp	sl, r2
   14ce4:	str	r3, [r6, #44]	; 0x2c
   14ce8:	bhi	14d9c <__assert_fail@plt+0x3acc>
   14cec:	ldr	r0, [r6, #8]
   14cf0:	cmp	r8, #0
   14cf4:	movne	r3, r0
   14cf8:	beq	14d0c <__assert_fail@plt+0x3a3c>
   14cfc:	str	r8, [r3], #4
   14d00:	ldr	r8, [r8, #8]
   14d04:	cmp	r8, #0
   14d08:	bne	14cfc <__assert_fail@plt+0x3a2c>
   14d0c:	ldr	r3, [pc, #808]	; 1503c <__assert_fail@plt+0x3d6c>
   14d10:	mov	r2, #4
   14d14:	mov	r1, sl
   14d18:	bl	11258 <qsort@plt>
   14d1c:	ldr	ip, [r6, #8]
   14d20:	subs	r3, sl, #1
   14d24:	ldr	r8, [ip]
   14d28:	moveq	r3, r8
   14d2c:	beq	14d50 <__assert_fail@plt+0x3a80>
   14d30:	mov	r2, ip
   14d34:	ldr	r1, [r2]
   14d38:	ldr	r0, [r2, #4]!
   14d3c:	subs	r3, r3, #1
   14d40:	str	r0, [r1, #8]
   14d44:	bne	14d34 <__assert_fail@plt+0x3a64>
   14d48:	add	ip, ip, sl, lsl #2
   14d4c:	ldr	r3, [ip, #-4]
   14d50:	mov	r2, #0
   14d54:	str	r2, [r3, #8]
   14d58:	mov	r3, #0
   14d5c:	mov	r0, r8
   14d60:	str	r3, [r6, #44]	; 0x2c
   14d64:	add	sp, sp, #68	; 0x44
   14d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d6c:	ldr	r4, [sp, #8]
   14d70:	mov	r8, #0
   14d74:	ldr	r0, [r4, #12]
   14d78:	bl	112c4 <closedir@plt>
   14d7c:	ldr	r3, [sp, #40]	; 0x28
   14d80:	str	r8, [r4, #12]
   14d84:	cmp	r3, #3
   14d88:	beq	14ee8 <__assert_fail@plt+0x3c18>
   14d8c:	mov	r8, #0
   14d90:	mov	r0, r8
   14d94:	add	sp, sp, #68	; 0x44
   14d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d9c:	add	r1, sl, #40	; 0x28
   14da0:	cmn	r1, #-1073741823	; 0xc0000001
   14da4:	str	r1, [r6, #40]	; 0x28
   14da8:	bhi	14e44 <__assert_fail@plt+0x3b74>
   14dac:	lsl	r1, r1, #2
   14db0:	ldr	r0, [r6, #8]
   14db4:	bl	1d0b0 <__assert_fail@plt+0xbde0>
   14db8:	cmp	r0, #0
   14dbc:	beq	14e44 <__assert_fail@plt+0x3b74>
   14dc0:	str	r0, [r6, #8]
   14dc4:	b	14cf0 <__assert_fail@plt+0x3a20>
   14dc8:	bl	112a0 <close@plt>
   14dcc:	b	14b48 <__assert_fail@plt+0x3878>
   14dd0:	ldr	r0, [r6, #8]
   14dd4:	bl	13bb0 <__assert_fail@plt+0x28e0>
   14dd8:	mov	r3, #0
   14ddc:	str	r3, [r6, #8]
   14de0:	str	r3, [r6, #40]	; 0x28
   14de4:	b	146b8 <__assert_fail@plt+0x33e8>
   14de8:	str	r0, [sp]
   14dec:	ldr	r0, [r6, #24]
   14df0:	ldr	r8, [sp, #16]
   14df4:	bl	13bb0 <__assert_fail@plt+0x28e0>
   14df8:	ldr	r1, [sp]
   14dfc:	ldr	r5, [fp]
   14e00:	str	r1, [r6, #24]
   14e04:	b	14788 <__assert_fail@plt+0x34b8>
   14e08:	mov	r3, #0
   14e0c:	str	r3, [sp, #52]	; 0x34
   14e10:	ldr	r0, [r6, #48]	; 0x30
   14e14:	ldr	r2, [sp, #8]
   14e18:	b	14384 <__assert_fail@plt+0x30b4>
   14e1c:	ldr	r4, [sp, #8]
   14e20:	ldr	r0, [r6, #56]	; 0x38
   14e24:	add	r1, r4, #64	; 0x40
   14e28:	bl	1d1ac <__assert_fail@plt+0xbedc>
   14e2c:	cmp	r0, #0
   14e30:	movne	r2, r4
   14e34:	movne	r3, #2
   14e38:	strne	r4, [r2]
   14e3c:	strhne	r3, [r4, #56]	; 0x38
   14e40:	b	14988 <__assert_fail@plt+0x36b8>
   14e44:	ldr	r0, [r6, #8]
   14e48:	bl	13bb0 <__assert_fail@plt+0x28e0>
   14e4c:	mov	r3, #0
   14e50:	str	r3, [r6, #8]
   14e54:	str	r3, [r6, #40]	; 0x28
   14e58:	b	14d58 <__assert_fail@plt+0x3a88>
   14e5c:	ldr	r2, [sp, #8]
   14e60:	ldrh	r3, [r2, #56]	; 0x38
   14e64:	cmp	r3, #7
   14e68:	cmpne	r3, #4
   14e6c:	movne	r3, #6
   14e70:	strhne	r3, [r2, #56]	; 0x38
   14e74:	b	14900 <__assert_fail@plt+0x3630>
   14e78:	mov	r2, #3
   14e7c:	ldr	r1, [pc, #444]	; 15040 <__assert_fail@plt+0x3d70>
   14e80:	ldr	r0, [sp, #60]	; 0x3c
   14e84:	bl	1d318 <__assert_fail@plt+0xc048>
   14e88:	mov	r2, r0
   14e8c:	str	r0, [sp, #60]	; 0x3c
   14e90:	b	149dc <__assert_fail@plt+0x370c>
   14e94:	ldr	r3, [r6, #48]	; 0x30
   14e98:	ldr	r1, [sp, #8]
   14e9c:	orr	r3, r3, #8192	; 0x2000
   14ea0:	mov	r2, #7
   14ea4:	cmp	r8, #0
   14ea8:	strh	r2, [r1, #56]	; 0x38
   14eac:	str	r3, [r6, #48]	; 0x30
   14eb0:	beq	14d8c <__assert_fail@plt+0x3abc>
   14eb4:	ldr	r3, [r8, #12]
   14eb8:	ldr	r4, [r8, #8]
   14ebc:	subs	r0, r3, #0
   14ec0:	beq	14ec8 <__assert_fail@plt+0x3bf8>
   14ec4:	bl	112c4 <closedir@plt>
   14ec8:	mov	r0, r8
   14ecc:	bl	13bb0 <__assert_fail@plt+0x28e0>
   14ed0:	subs	r8, r4, #0
   14ed4:	bne	14eb4 <__assert_fail@plt+0x3be4>
   14ed8:	b	14d8c <__assert_fail@plt+0x3abc>
   14edc:	ldr	r3, [sp, #40]	; 0x28
   14ee0:	cmp	r3, #3
   14ee4:	bne	14d8c <__assert_fail@plt+0x3abc>
   14ee8:	ldr	r4, [sp, #8]
   14eec:	mov	r3, #4
   14ef0:	strh	r3, [r4, #56]	; 0x38
   14ef4:	bl	11180 <__errno_location@plt>
   14ef8:	ldr	r3, [r0]
   14efc:	str	r3, [r4, #32]
   14f00:	b	146b8 <__assert_fail@plt+0x33e8>
   14f04:	ldr	r4, [sp, #8]
   14f08:	mov	r3, #0
   14f0c:	mov	r2, r4
   14f10:	ldr	r1, [r6, #48]	; 0x30
   14f14:	ldr	r0, [r6, #32]
   14f18:	bl	13e88 <__assert_fail@plt+0x2bb8>
   14f1c:	strh	r0, [r4, #56]	; 0x38
   14f20:	b	14988 <__assert_fail@plt+0x36b8>
   14f24:	ldr	r3, [sp, #8]
   14f28:	ldr	r3, [r3, #84]	; 0x54
   14f2c:	cmp	r3, #2
   14f30:	bne	149b8 <__assert_fail@plt+0x36e8>
   14f34:	ldr	r1, [sp, #60]	; 0x3c
   14f38:	ldr	r0, [sp, #8]
   14f3c:	bl	13d78 <__assert_fail@plt+0x2aa8>
   14f40:	ldr	r3, [pc, #220]	; 15024 <__assert_fail@plt+0x3d54>
   14f44:	cmp	r0, r3
   14f48:	beq	149b8 <__assert_fail@plt+0x36e8>
   14f4c:	bgt	14fd4 <__assert_fail@plt+0x3d04>
   14f50:	ldr	r3, [pc, #212]	; 1502c <__assert_fail@plt+0x3d5c>
   14f54:	cmp	r0, r3
   14f58:	beq	149b8 <__assert_fail@plt+0x36e8>
   14f5c:	cmp	r0, #0
   14f60:	beq	149b8 <__assert_fail@plt+0x36e8>
   14f64:	ldr	r3, [sp, #40]	; 0x28
   14f68:	cmp	r3, #3
   14f6c:	bne	14e08 <__assert_fail@plt+0x3b38>
   14f70:	mov	r5, #1
   14f74:	mov	r4, #0
   14f78:	b	149cc <__assert_fail@plt+0x36fc>
   14f7c:	bl	11180 <__errno_location@plt>
   14f80:	ldr	r2, [sp, #8]
   14f84:	mov	r4, r2
   14f88:	ldr	r3, [r0]
   14f8c:	str	r3, [r2, #32]
   14f90:	b	14a08 <__assert_fail@plt+0x3738>
   14f94:	add	r4, r6, #60	; 0x3c
   14f98:	mov	r0, r4
   14f9c:	ldr	r1, [r6, #32]
   14fa0:	bl	17c58 <__assert_fail@plt+0x6988>
   14fa4:	cmp	r0, #0
   14fa8:	blt	14fb0 <__assert_fail@plt+0x3ce0>
   14fac:	bl	112a0 <close@plt>
   14fb0:	mvn	r3, #99	; 0x63
   14fb4:	str	r3, [r6, #32]
   14fb8:	mov	r5, #0
   14fbc:	b	14b48 <__assert_fail@plt+0x3878>
   14fc0:	bl	11180 <__errno_location@plt>
   14fc4:	mov	r3, #12
   14fc8:	mov	r8, #0
   14fcc:	str	r3, [r0]
   14fd0:	b	146b8 <__assert_fail@plt+0x33e8>
   14fd4:	ldr	r3, [pc, #104]	; 15044 <__assert_fail@plt+0x3d74>
   14fd8:	cmp	r0, r3
   14fdc:	beq	149b8 <__assert_fail@plt+0x36e8>
   14fe0:	ldr	r3, [pc, #96]	; 15048 <__assert_fail@plt+0x3d78>
   14fe4:	cmp	r0, r3
   14fe8:	bne	14f64 <__assert_fail@plt+0x3c94>
   14fec:	b	149b8 <__assert_fail@plt+0x36e8>
   14ff0:	ldr	r3, [pc, #60]	; 15034 <__assert_fail@plt+0x3d64>
   14ff4:	ldr	r0, [r6, #48]	; 0x30
   14ff8:	str	r3, [sp, #24]
   14ffc:	mov	r3, #1
   15000:	str	r3, [sp, #52]	; 0x34
   15004:	ldr	r2, [sp, #8]
   15008:	b	14384 <__assert_fail@plt+0x30b4>
   1500c:	str	r7, [r4, #80]	; 0x50
   15010:	mov	r2, #1
   15014:	mov	r3, #0
   15018:	b	14448 <__assert_fail@plt+0x3178>
   1501c:	andeq	lr, r1, r4, ror lr
   15020:	andeq	r2, r0, r0, lsl r7
   15024:	andeq	r6, r0, r9, ror #18
   15028:			; <UNDEFINED> instruction: 0x01021994
   1502c:			; <UNDEFINED> instruction: 0xff534d42
   15030:	andeq	lr, r1, r0, asr sl
   15034:	andeq	r8, r1, r0, lsr #13
   15038:	andeq	r0, r0, r2, lsl #2
   1503c:	andeq	r3, r1, r8, asr #26
   15040:	andeq	r0, r0, r6, lsl #8
   15044:	andeq	r9, r0, r0, lsr #31
   15048:	movtpl	r4, #24911	; 0x614f
   1504c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15050:	bic	r8, r1, #4080	; 0xff0
   15054:	sub	sp, sp, #36	; 0x24
   15058:	bic	r8, r8, #15
   1505c:	cmp	r8, #0
   15060:	str	r2, [sp, #12]
   15064:	bne	1550c <__assert_fail@plt+0x423c>
   15068:	and	r3, r1, #516	; 0x204
   1506c:	cmp	r3, #516	; 0x204
   15070:	mov	r5, r1
   15074:	beq	15470 <__assert_fail@plt+0x41a0>
   15078:	ands	r8, r1, #18
   1507c:	beq	15470 <__assert_fail@plt+0x41a0>
   15080:	mov	r9, r0
   15084:	mov	r1, #96	; 0x60
   15088:	mov	r0, #1
   1508c:	bl	1d03c <__assert_fail@plt+0xbd6c>
   15090:	subs	r8, r0, #0
   15094:	beq	153c8 <__assert_fail@plt+0x40f8>
   15098:	ldr	r3, [sp, #12]
   1509c:	tst	r5, #2
   150a0:	str	r3, [r8, #44]	; 0x2c
   150a4:	bicne	r3, r5, #512	; 0x200
   150a8:	orrne	r3, r3, #4
   150ac:	strne	r3, [r8, #48]	; 0x30
   150b0:	ldr	r3, [r9]
   150b4:	streq	r5, [r8, #48]	; 0x30
   150b8:	mvn	r2, #99	; 0x63
   150bc:	cmp	r3, #0
   150c0:	str	r2, [r8, #32]
   150c4:	beq	15570 <__assert_fail@plt+0x42a0>
   150c8:	mov	r6, r9
   150cc:	mov	r4, #0
   150d0:	mov	r0, r3
   150d4:	bl	11168 <strlen@plt>
   150d8:	ldr	r3, [r6, #4]!
   150dc:	cmp	r4, r0
   150e0:	movcc	r4, r0
   150e4:	cmp	r3, #0
   150e8:	bne	150d0 <__assert_fail@plt+0x3e00>
   150ec:	add	r4, r4, #1
   150f0:	cmp	r4, #4096	; 0x1000
   150f4:	movcc	r4, #4096	; 0x1000
   150f8:	ldr	r3, [r8, #36]	; 0x24
   150fc:	add	r1, r3, #256	; 0x100
   15100:	add	r1, r1, r4
   15104:	cmp	r3, r1
   15108:	bhi	1543c <__assert_fail@plt+0x416c>
   1510c:	str	r1, [r8, #36]	; 0x24
   15110:	ldr	r0, [r8, #24]
   15114:	bl	1d0b0 <__assert_fail@plt+0xbde0>
   15118:	subs	r4, r0, #0
   1511c:	beq	1560c <__assert_fail@plt+0x433c>
   15120:	ldr	fp, [r9]
   15124:	str	r4, [r8, #24]
   15128:	cmp	fp, #0
   1512c:	beq	154f0 <__assert_fail@plt+0x4220>
   15130:	mov	r0, #176	; 0xb0
   15134:	bl	1d084 <__assert_fail@plt+0xbdb4>
   15138:	subs	r3, r0, #0
   1513c:	mov	r0, r3
   15140:	str	r3, [sp, #16]
   15144:	beq	15430 <__assert_fail@plt+0x4160>
   15148:	ldr	r2, [r8, #24]
   1514c:	ldr	r3, [sp, #12]
   15150:	mov	r1, #196608	; 0x30000
   15154:	cmp	r3, #0
   15158:	str	r2, [r0, #28]
   1515c:	mov	r3, #0
   15160:	mvn	r2, #0
   15164:	str	r8, [r0, #44]	; 0x2c
   15168:	strb	r3, [r0, #168]	; 0xa8
   1516c:	str	r3, [r0, #52]	; 0x34
   15170:	str	r3, [r0, #32]
   15174:	str	r3, [r0, #12]
   15178:	str	r3, [r0, #16]
   1517c:	str	r3, [r0, #20]
   15180:	str	r1, [r0, #58]	; 0x3a
   15184:	str	r2, [r0, #48]	; 0x30
   15188:	ldr	fp, [r9]
   1518c:	beq	15564 <__assert_fail@plt+0x4294>
   15190:	ldr	r3, [r8, #48]	; 0x30
   15194:	lsr	r3, r3, #10
   15198:	and	r3, r3, #1
   1519c:	str	r3, [sp, #24]
   151a0:	cmp	fp, #0
   151a4:	beq	15624 <__assert_fail@plt+0x4354>
   151a8:	lsr	r5, r5, #11
   151ac:	mov	r3, #0
   151b0:	eor	r5, r5, #1
   151b4:	mov	r6, r3
   151b8:	str	r3, [sp, #28]
   151bc:	and	r3, r5, #1
   151c0:	str	r3, [sp, #20]
   151c4:	mov	sl, r6
   151c8:	mov	r7, r6
   151cc:	b	1520c <__assert_fail@plt+0x3f3c>
   151d0:	mov	r3, #11
   151d4:	strh	r3, [r4, #56]	; 0x38
   151d8:	mov	r2, #2
   151dc:	mov	r3, #0
   151e0:	strd	r2, [r4, #112]	; 0x70
   151e4:	ldr	r3, [sp, #12]
   151e8:	cmp	r3, #0
   151ec:	beq	152ec <__assert_fail@plt+0x401c>
   151f0:	ldr	fp, [r9, #4]!
   151f4:	str	r7, [r4, #8]
   151f8:	cmp	fp, #0
   151fc:	mov	r7, r4
   15200:	add	r4, sl, #1
   15204:	beq	15318 <__assert_fail@plt+0x4048>
   15208:	mov	sl, r4
   1520c:	mov	r0, fp
   15210:	bl	11168 <strlen@plt>
   15214:	ldr	r3, [sp, #20]
   15218:	cmp	r0, #2
   1521c:	movls	r3, #0
   15220:	andhi	r3, r3, #1
   15224:	cmp	r3, #0
   15228:	mov	r5, r0
   1522c:	beq	15244 <__assert_fail@plt+0x3f74>
   15230:	sub	r2, r0, #1
   15234:	add	r3, fp, r2
   15238:	ldrb	r2, [fp, r2]
   1523c:	cmp	r2, #47	; 0x2f
   15240:	beq	153d4 <__assert_fail@plt+0x4104>
   15244:	add	r0, r5, #176	; 0xb0
   15248:	bic	r0, r0, #7
   1524c:	bl	1d084 <__assert_fail@plt+0xbdb4>
   15250:	subs	r4, r0, #0
   15254:	beq	153fc <__assert_fail@plt+0x412c>
   15258:	add	r3, r4, #168	; 0xa8
   1525c:	mov	r1, fp
   15260:	mov	r0, r3
   15264:	mov	r2, r5
   15268:	bl	11030 <memcpy@plt>
   1526c:	add	r1, r4, r5
   15270:	ldr	r2, [r8, #24]
   15274:	strb	r6, [r1, #168]	; 0xa8
   15278:	str	r5, [r4, #52]	; 0x34
   1527c:	str	r8, [r4, #44]	; 0x2c
   15280:	str	r6, [r4, #32]
   15284:	str	r6, [r4, #12]
   15288:	str	r6, [r4, #16]
   1528c:	str	r6, [r4, #20]
   15290:	str	r6, [r4, #48]	; 0x30
   15294:	str	r2, [r4, #28]
   15298:	mov	r3, r0
   1529c:	ldr	r0, [sp, #24]
   152a0:	str	r3, [r4, #24]
   152a4:	mov	r3, #196608	; 0x30000
   152a8:	cmp	r7, #0
   152ac:	moveq	r0, #0
   152b0:	andne	r0, r0, #1
   152b4:	str	r3, [r4, #58]	; 0x3a
   152b8:	ldr	r3, [sp, #16]
   152bc:	cmp	r0, #0
   152c0:	str	r3, [r4, #4]
   152c4:	bne	151d0 <__assert_fail@plt+0x3f00>
   152c8:	mov	r3, r6
   152cc:	mov	r2, r4
   152d0:	ldr	r1, [r8, #48]	; 0x30
   152d4:	ldr	r0, [r8, #32]
   152d8:	bl	13e88 <__assert_fail@plt+0x2bb8>
   152dc:	ldr	r3, [sp, #12]
   152e0:	cmp	r3, #0
   152e4:	strh	r0, [r4, #56]	; 0x38
   152e8:	bne	151f0 <__assert_fail@plt+0x3f20>
   152ec:	cmp	r7, #0
   152f0:	str	r3, [r4, #8]
   152f4:	ldrne	r3, [sp, #28]
   152f8:	ldr	fp, [r9, #4]!
   152fc:	strne	r4, [sp, #28]
   15300:	strne	r4, [r3, #8]
   15304:	streq	r4, [sp, #28]
   15308:	moveq	r7, r4
   1530c:	cmp	fp, #0
   15310:	add	r4, sl, #1
   15314:	bne	15208 <__assert_fail@plt+0x3f38>
   15318:	ldr	r3, [sp, #12]
   1531c:	cmp	r3, #0
   15320:	cmpne	r4, #1
   15324:	bhi	15528 <__assert_fail@plt+0x4258>
   15328:	mov	r0, #176	; 0xb0
   1532c:	bl	1d084 <__assert_fail@plt+0xbdb4>
   15330:	cmp	r0, #0
   15334:	beq	1561c <__assert_fail@plt+0x434c>
   15338:	ldr	r2, [r8, #48]	; 0x30
   1533c:	ldr	r3, [pc, #744]	; 1562c <__assert_fail@plt+0x435c>
   15340:	ldr	lr, [r8, #24]
   15344:	and	r3, r3, r2
   15348:	mov	r1, #0
   1534c:	cmp	r3, #0
   15350:	mov	ip, #3
   15354:	mov	r2, #9
   15358:	mov	r3, #1
   1535c:	str	r8, [r0, #44]	; 0x2c
   15360:	str	r0, [r8]
   15364:	str	r7, [r0, #8]
   15368:	str	lr, [r0, #28]
   1536c:	strb	r1, [r0, #168]	; 0xa8
   15370:	str	r1, [r0, #52]	; 0x34
   15374:	str	r1, [r0, #32]
   15378:	str	r1, [r0, #12]
   1537c:	strh	r1, [r0, #58]	; 0x3a
   15380:	str	r1, [r0, #16]
   15384:	str	r1, [r0, #20]
   15388:	strh	ip, [r0, #60]	; 0x3c
   1538c:	strh	r2, [r0, #56]	; 0x38
   15390:	str	r3, [r0, #48]	; 0x30
   15394:	bne	15488 <__assert_fail@plt+0x41b8>
   15398:	mov	r0, #32
   1539c:	bl	1d084 <__assert_fail@plt+0xbdb4>
   153a0:	cmp	r0, #0
   153a4:	str	r0, [r8, #56]	; 0x38
   153a8:	beq	153fc <__assert_fail@plt+0x412c>
   153ac:	bl	1d188 <__assert_fail@plt+0xbeb8>
   153b0:	ldr	r3, [r8, #48]	; 0x30
   153b4:	tst	r3, #516	; 0x204
   153b8:	beq	154b8 <__assert_fail@plt+0x41e8>
   153bc:	mvn	r1, #0
   153c0:	add	r0, r8, #60	; 0x3c
   153c4:	bl	17c24 <__assert_fail@plt+0x6954>
   153c8:	mov	r0, r8
   153cc:	add	sp, sp, #36	; 0x24
   153d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153d4:	ldrb	r2, [r3, #-1]!
   153d8:	cmp	r2, #47	; 0x2f
   153dc:	bne	15244 <__assert_fail@plt+0x3f74>
   153e0:	sub	r5, r5, #1
   153e4:	cmp	r5, #1
   153e8:	bne	153d4 <__assert_fail@plt+0x4104>
   153ec:	mov	r0, #176	; 0xb0
   153f0:	bl	1d084 <__assert_fail@plt+0xbdb4>
   153f4:	subs	r4, r0, #0
   153f8:	bne	15258 <__assert_fail@plt+0x3f88>
   153fc:	cmp	r7, #0
   15400:	beq	15428 <__assert_fail@plt+0x4158>
   15404:	ldr	r3, [r7, #12]
   15408:	ldr	r4, [r7, #8]
   1540c:	subs	r0, r3, #0
   15410:	beq	15418 <__assert_fail@plt+0x4148>
   15414:	bl	112c4 <closedir@plt>
   15418:	mov	r0, r7
   1541c:	bl	13bb0 <__assert_fail@plt+0x28e0>
   15420:	subs	r7, r4, #0
   15424:	bne	15404 <__assert_fail@plt+0x4134>
   15428:	ldr	r0, [sp, #16]
   1542c:	bl	13bb0 <__assert_fail@plt+0x28e0>
   15430:	ldr	r0, [r8, #24]
   15434:	bl	13bb0 <__assert_fail@plt+0x28e0>
   15438:	b	15458 <__assert_fail@plt+0x4188>
   1543c:	ldr	r0, [r8, #24]
   15440:	bl	13bb0 <__assert_fail@plt+0x28e0>
   15444:	mov	r3, #0
   15448:	str	r3, [r8, #24]
   1544c:	bl	11180 <__errno_location@plt>
   15450:	mov	r3, #36	; 0x24
   15454:	str	r3, [r0]
   15458:	mov	r0, r8
   1545c:	bl	13bb0 <__assert_fail@plt+0x28e0>
   15460:	mov	r8, #0
   15464:	mov	r0, r8
   15468:	add	sp, sp, #36	; 0x24
   1546c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15470:	bl	11180 <__errno_location@plt>
   15474:	mov	r3, #22
   15478:	str	r3, [r0]
   1547c:	mov	r0, r8
   15480:	add	sp, sp, #36	; 0x24
   15484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15488:	ldr	r3, [pc, #416]	; 15630 <__assert_fail@plt+0x4360>
   1548c:	ldr	r2, [pc, #416]	; 15634 <__assert_fail@plt+0x4364>
   15490:	str	r3, [sp]
   15494:	mov	r0, #31
   15498:	ldr	r3, [pc, #408]	; 15638 <__assert_fail@plt+0x4368>
   1549c:	bl	16b18 <__assert_fail@plt+0x5848>
   154a0:	cmp	r0, #0
   154a4:	str	r0, [r8, #56]	; 0x38
   154a8:	beq	153fc <__assert_fail@plt+0x412c>
   154ac:	ldr	r3, [r8, #48]	; 0x30
   154b0:	tst	r3, #516	; 0x204
   154b4:	bne	153bc <__assert_fail@plt+0x40ec>
   154b8:	ldr	r2, [pc, #380]	; 1563c <__assert_fail@plt+0x436c>
   154bc:	tst	r3, #16
   154c0:	ldr	r1, [pc, #376]	; 15640 <__assert_fail@plt+0x4370>
   154c4:	moveq	r1, r2
   154c8:	tst	r3, #512	; 0x200
   154cc:	bne	155e0 <__assert_fail@plt+0x4310>
   154d0:	ldr	r0, [pc, #364]	; 15644 <__assert_fail@plt+0x4374>
   154d4:	bl	1d4ec <__assert_fail@plt+0xc21c>
   154d8:	cmp	r0, #0
   154dc:	str	r0, [r8, #28]
   154e0:	ldrlt	r3, [r8, #48]	; 0x30
   154e4:	orrlt	r3, r3, #4
   154e8:	strlt	r3, [r8, #48]	; 0x30
   154ec:	b	153bc <__assert_fail@plt+0x40ec>
   154f0:	ldr	r3, [sp, #12]
   154f4:	cmp	r3, #0
   154f8:	strne	fp, [sp, #16]
   154fc:	bne	15190 <__assert_fail@plt+0x3ec0>
   15500:	str	r3, [sp, #16]
   15504:	mov	r7, r3
   15508:	b	15328 <__assert_fail@plt+0x4058>
   1550c:	bl	11180 <__errno_location@plt>
   15510:	mov	r8, #0
   15514:	mov	r3, #22
   15518:	str	r3, [r0]
   1551c:	mov	r0, r8
   15520:	add	sp, sp, #36	; 0x24
   15524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15528:	ldr	r2, [r8, #40]	; 0x28
   1552c:	ldr	r5, [r8, #44]	; 0x2c
   15530:	cmp	r4, r2
   15534:	bls	15578 <__assert_fail@plt+0x42a8>
   15538:	add	r1, sl, #41	; 0x29
   1553c:	cmn	r1, #-1073741823	; 0xc0000001
   15540:	str	r1, [r8, #40]	; 0x28
   15544:	bhi	155f4 <__assert_fail@plt+0x4324>
   15548:	lsl	r1, r1, #2
   1554c:	ldr	r0, [r8, #8]
   15550:	bl	1d0b0 <__assert_fail@plt+0xbde0>
   15554:	cmp	r0, #0
   15558:	beq	155f4 <__assert_fail@plt+0x4324>
   1555c:	str	r0, [r8, #8]
   15560:	b	1557c <__assert_fail@plt+0x42ac>
   15564:	mov	r3, #1
   15568:	str	r3, [sp, #24]
   1556c:	b	151a0 <__assert_fail@plt+0x3ed0>
   15570:	mov	r4, #4096	; 0x1000
   15574:	b	150f8 <__assert_fail@plt+0x3e28>
   15578:	ldr	r0, [r8, #8]
   1557c:	mov	r2, r0
   15580:	str	r7, [r2], #4
   15584:	ldr	r7, [r7, #8]
   15588:	cmp	r7, #0
   1558c:	bne	15580 <__assert_fail@plt+0x42b0>
   15590:	mov	r3, r5
   15594:	mov	r1, r4
   15598:	mov	r2, #4
   1559c:	bl	11258 <qsort@plt>
   155a0:	ldr	ip, [r8, #8]
   155a4:	cmp	sl, #0
   155a8:	ldr	r7, [ip]
   155ac:	moveq	r3, r7
   155b0:	beq	155d4 <__assert_fail@plt+0x4304>
   155b4:	mov	r2, sl
   155b8:	mov	r3, ip
   155bc:	ldr	r1, [r3]
   155c0:	ldr	r0, [r3, #4]!
   155c4:	subs	r2, r2, #1
   155c8:	str	r0, [r1, #8]
   155cc:	bne	155bc <__assert_fail@plt+0x42ec>
   155d0:	ldr	r3, [ip, sl, lsl #2]
   155d4:	mov	r2, #0
   155d8:	str	r2, [r3, #8]
   155dc:	b	15328 <__assert_fail@plt+0x4058>
   155e0:	mov	r2, r1
   155e4:	ldr	r0, [r8, #32]
   155e8:	ldr	r1, [pc, #84]	; 15644 <__assert_fail@plt+0x4374>
   155ec:	bl	17ce4 <__assert_fail@plt+0x6a14>
   155f0:	b	154d8 <__assert_fail@plt+0x4208>
   155f4:	ldr	r0, [r8, #8]
   155f8:	bl	13bb0 <__assert_fail@plt+0x28e0>
   155fc:	mov	r3, #0
   15600:	str	r3, [r8, #8]
   15604:	str	r3, [r8, #40]	; 0x28
   15608:	b	15328 <__assert_fail@plt+0x4058>
   1560c:	ldr	r0, [r8, #24]
   15610:	bl	13bb0 <__assert_fail@plt+0x28e0>
   15614:	str	r4, [r8, #24]
   15618:	b	15458 <__assert_fail@plt+0x4188>
   1561c:	str	r0, [r8]
   15620:	b	153fc <__assert_fail@plt+0x412c>
   15624:	mov	r7, fp
   15628:	b	15328 <__assert_fail@plt+0x4058>
   1562c:	andeq	r0, r0, r2, lsl #2
   15630:			; <UNDEFINED> instruction: 0x00013bb0
   15634:	andeq	r3, r1, ip, ror #25
   15638:	andeq	r3, r1, r8, lsr #25
   1563c:	andeq	r4, r8, r0, lsl #18
   15640:	andeq	ip, r8, r0, lsl #18
   15644:	andeq	lr, r1, ip, asr #20
   15648:	ldr	r3, [r0]
   1564c:	push	{r4, r5, r6, lr}
   15650:	cmp	r3, #0
   15654:	mov	r6, r0
   15658:	beq	15694 <__assert_fail@plt+0x43c4>
   1565c:	ldr	r2, [r3, #48]	; 0x30
   15660:	cmp	r2, #0
   15664:	blt	157d4 <__assert_fail@plt+0x4504>
   15668:	ldr	r4, [r3, #8]
   1566c:	mov	r0, r3
   15670:	cmp	r4, #0
   15674:	ldreq	r4, [r3, #4]
   15678:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1567c:	mov	r3, r4
   15680:	ldr	r2, [r4, #48]	; 0x30
   15684:	cmp	r2, #0
   15688:	bge	15668 <__assert_fail@plt+0x4398>
   1568c:	mov	r0, r4
   15690:	bl	13bb0 <__assert_fail@plt+0x28e0>
   15694:	ldr	r4, [r6, #4]
   15698:	cmp	r4, #0
   1569c:	beq	156c4 <__assert_fail@plt+0x43f4>
   156a0:	ldr	r3, [r4, #12]
   156a4:	ldr	r5, [r4, #8]
   156a8:	subs	r0, r3, #0
   156ac:	beq	156b4 <__assert_fail@plt+0x43e4>
   156b0:	bl	112c4 <closedir@plt>
   156b4:	mov	r0, r4
   156b8:	bl	13bb0 <__assert_fail@plt+0x28e0>
   156bc:	subs	r4, r5, #0
   156c0:	bne	156a0 <__assert_fail@plt+0x43d0>
   156c4:	ldr	r0, [r6, #8]
   156c8:	bl	13bb0 <__assert_fail@plt+0x28e0>
   156cc:	ldr	r0, [r6, #24]
   156d0:	bl	13bb0 <__assert_fail@plt+0x28e0>
   156d4:	ldr	r3, [r6, #48]	; 0x30
   156d8:	tst	r3, #512	; 0x200
   156dc:	beq	15778 <__assert_fail@plt+0x44a8>
   156e0:	ldr	r0, [r6, #32]
   156e4:	cmp	r0, #0
   156e8:	blt	156f8 <__assert_fail@plt+0x4428>
   156ec:	bl	112a0 <close@plt>
   156f0:	cmp	r0, #0
   156f4:	bne	157c8 <__assert_fail@plt+0x44f8>
   156f8:	mov	r5, #0
   156fc:	add	r4, r6, #60	; 0x3c
   15700:	b	15710 <__assert_fail@plt+0x4440>
   15704:	bl	17c9c <__assert_fail@plt+0x69cc>
   15708:	cmp	r0, #0
   1570c:	bge	15770 <__assert_fail@plt+0x44a0>
   15710:	mov	r0, r4
   15714:	bl	17c50 <__assert_fail@plt+0x6980>
   15718:	cmp	r0, #0
   1571c:	mov	r0, r4
   15720:	beq	15704 <__assert_fail@plt+0x4434>
   15724:	ldr	r0, [r6, #52]	; 0x34
   15728:	cmp	r0, #0
   1572c:	beq	15734 <__assert_fail@plt+0x4464>
   15730:	bl	16e08 <__assert_fail@plt+0x5b38>
   15734:	ldr	r2, [r6, #48]	; 0x30
   15738:	ldr	r3, [pc, #204]	; 1580c <__assert_fail@plt+0x453c>
   1573c:	ldr	r0, [r6, #56]	; 0x38
   15740:	and	r3, r3, r2
   15744:	cmp	r3, #0
   15748:	beq	157c0 <__assert_fail@plt+0x44f0>
   1574c:	cmp	r0, #0
   15750:	beq	15758 <__assert_fail@plt+0x4488>
   15754:	bl	16e08 <__assert_fail@plt+0x5b38>
   15758:	mov	r0, r6
   1575c:	bl	13bb0 <__assert_fail@plt+0x28e0>
   15760:	cmp	r5, #0
   15764:	bne	157fc <__assert_fail@plt+0x452c>
   15768:	mov	r0, r5
   1576c:	pop	{r4, r5, r6, pc}
   15770:	bl	112a0 <close@plt>
   15774:	b	15710 <__assert_fail@plt+0x4440>
   15778:	tst	r3, #4
   1577c:	bne	156f8 <__assert_fail@plt+0x4428>
   15780:	ldr	r0, [r6, #28]
   15784:	bl	1124c <fchdir@plt>
   15788:	cmp	r0, #0
   1578c:	beq	157dc <__assert_fail@plt+0x450c>
   15790:	bl	11180 <__errno_location@plt>
   15794:	mov	r4, r0
   15798:	ldr	r0, [r6, #28]
   1579c:	ldr	r5, [r4]
   157a0:	bl	112a0 <close@plt>
   157a4:	adds	r0, r0, #0
   157a8:	movne	r0, #1
   157ac:	cmp	r5, #0
   157b0:	movne	r0, #0
   157b4:	cmp	r0, #0
   157b8:	beq	156fc <__assert_fail@plt+0x442c>
   157bc:	b	157f4 <__assert_fail@plt+0x4524>
   157c0:	bl	13bb0 <__assert_fail@plt+0x28e0>
   157c4:	b	15758 <__assert_fail@plt+0x4488>
   157c8:	bl	11180 <__errno_location@plt>
   157cc:	ldr	r5, [r0]
   157d0:	b	156fc <__assert_fail@plt+0x442c>
   157d4:	mov	r4, r3
   157d8:	b	1568c <__assert_fail@plt+0x43bc>
   157dc:	ldr	r0, [r6, #28]
   157e0:	bl	112a0 <close@plt>
   157e4:	cmp	r0, #0
   157e8:	beq	156f8 <__assert_fail@plt+0x4428>
   157ec:	bl	11180 <__errno_location@plt>
   157f0:	mov	r4, r0
   157f4:	ldr	r5, [r4]
   157f8:	b	156fc <__assert_fail@plt+0x442c>
   157fc:	bl	11180 <__errno_location@plt>
   15800:	str	r5, [r0]
   15804:	mvn	r5, #0
   15808:	b	15768 <__assert_fail@plt+0x4498>
   1580c:	andeq	r0, r0, r2, lsl #2
   15810:	push	{r4, r5, r6, r7, r8, r9, lr}
   15814:	sub	sp, sp, #12
   15818:	ldr	r4, [r0]
   1581c:	cmp	r4, #0
   15820:	beq	15954 <__assert_fail@plt+0x4684>
   15824:	ldr	r1, [r0, #48]	; 0x30
   15828:	ands	r5, r1, #8192	; 0x2000
   1582c:	bne	15954 <__assert_fail@plt+0x4684>
   15830:	ldrh	r3, [r4, #60]	; 0x3c
   15834:	mov	r2, #3
   15838:	mov	r7, r0
   1583c:	cmp	r3, #1
   15840:	strh	r2, [r4, #60]	; 0x3c
   15844:	beq	15ccc <__assert_fail@plt+0x49fc>
   15848:	cmp	r3, #2
   1584c:	beq	15964 <__assert_fail@plt+0x4694>
   15850:	ldrh	r2, [r4, #56]	; 0x38
   15854:	cmp	r2, #1
   15858:	bne	15890 <__assert_fail@plt+0x45c0>
   1585c:	cmp	r3, #4
   15860:	bne	1597c <__assert_fail@plt+0x46ac>
   15864:	b	15998 <__assert_fail@plt+0x46c8>
   15868:	str	r6, [r7]
   1586c:	mov	r0, r4
   15870:	bl	13bb0 <__assert_fail@plt+0x28e0>
   15874:	ldr	r3, [r6, #48]	; 0x30
   15878:	cmp	r3, #0
   1587c:	beq	15a04 <__assert_fail@plt+0x4734>
   15880:	ldrh	r3, [r6, #60]	; 0x3c
   15884:	mov	r4, r6
   15888:	cmp	r3, #4
   1588c:	bne	15bb8 <__assert_fail@plt+0x48e8>
   15890:	ldr	r6, [r4, #8]
   15894:	cmp	r6, #0
   15898:	bne	15868 <__assert_fail@plt+0x4598>
   1589c:	ldr	r6, [r4, #4]
   158a0:	ldr	r3, [r6, #12]
   158a4:	cmp	r3, #0
   158a8:	bne	15f5c <__assert_fail@plt+0x4c8c>
   158ac:	str	r6, [r7]
   158b0:	mov	r0, r4
   158b4:	bl	13bb0 <__assert_fail@plt+0x28e0>
   158b8:	ldr	r3, [r6, #48]	; 0x30
   158bc:	cmn	r3, #1
   158c0:	beq	15e4c <__assert_fail@plt+0x4b7c>
   158c4:	ldrh	r3, [r6, #56]	; 0x38
   158c8:	cmp	r3, #11
   158cc:	beq	15c2c <__assert_fail@plt+0x495c>
   158d0:	ldr	r3, [r6, #40]	; 0x28
   158d4:	ldr	r2, [r7, #24]
   158d8:	mov	r1, #0
   158dc:	strb	r1, [r2, r3]
   158e0:	ldr	r3, [r6, #48]	; 0x30
   158e4:	cmp	r3, r1
   158e8:	beq	15d48 <__assert_fail@plt+0x4a78>
   158ec:	ldrh	r3, [r6, #58]	; 0x3a
   158f0:	tst	r3, #2
   158f4:	beq	15d08 <__assert_fail@plt+0x4a38>
   158f8:	ldr	r3, [r7, #48]	; 0x30
   158fc:	tst	r3, #4
   15900:	beq	15dbc <__assert_fail@plt+0x4aec>
   15904:	ldr	r0, [r6, #36]	; 0x24
   15908:	bl	112a0 <close@plt>
   1590c:	ldr	r3, [r7, #48]	; 0x30
   15910:	ldrh	r2, [r6, #56]	; 0x38
   15914:	cmp	r2, #2
   15918:	beq	1594c <__assert_fail@plt+0x467c>
   1591c:	ldr	r2, [r6, #32]
   15920:	cmp	r2, #0
   15924:	movne	r2, #7
   15928:	strhne	r2, [r6, #56]	; 0x38
   1592c:	bne	1594c <__assert_fail@plt+0x467c>
   15930:	mov	r2, #6
   15934:	mov	r0, r3
   15938:	strh	r2, [r6, #56]	; 0x38
   1593c:	add	r1, r7, #56	; 0x38
   15940:	mov	r2, r6
   15944:	bl	13fd4 <__assert_fail@plt+0x2d04>
   15948:	ldr	r3, [r7, #48]	; 0x30
   1594c:	tst	r3, #8192	; 0x2000
   15950:	beq	159f8 <__assert_fail@plt+0x4728>
   15954:	mov	r6, #0
   15958:	mov	r0, r6
   1595c:	add	sp, sp, #12
   15960:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15964:	ldrh	r3, [r4, #56]	; 0x38
   15968:	sub	r2, r3, #12
   1596c:	cmp	r2, #1
   15970:	bls	15e04 <__assert_fail@plt+0x4b34>
   15974:	cmp	r3, #1
   15978:	bne	15890 <__assert_fail@plt+0x45c0>
   1597c:	tst	r1, #64	; 0x40
   15980:	beq	15c38 <__assert_fail@plt+0x4968>
   15984:	ldrd	r8, [r4, #64]	; 0x40
   15988:	ldrd	r2, [r7, #16]
   1598c:	cmp	r9, r3
   15990:	cmpeq	r8, r2
   15994:	beq	15c38 <__assert_fail@plt+0x4968>
   15998:	ldrh	r3, [r4, #58]	; 0x3a
   1599c:	tst	r3, #2
   159a0:	bne	15f50 <__assert_fail@plt+0x4c80>
   159a4:	ldr	r5, [r7, #4]
   159a8:	cmp	r5, #0
   159ac:	beq	159dc <__assert_fail@plt+0x470c>
   159b0:	ldr	r0, [r5, #12]
   159b4:	ldr	r6, [r5, #8]
   159b8:	cmp	r0, #0
   159bc:	beq	159c4 <__assert_fail@plt+0x46f4>
   159c0:	bl	112c4 <closedir@plt>
   159c4:	mov	r0, r5
   159c8:	bl	13bb0 <__assert_fail@plt+0x28e0>
   159cc:	cmp	r6, #0
   159d0:	mov	r5, r6
   159d4:	bne	159b0 <__assert_fail@plt+0x46e0>
   159d8:	str	r6, [r7, #4]
   159dc:	mov	r3, #6
   159e0:	strh	r3, [r4, #56]	; 0x38
   159e4:	mov	r2, r4
   159e8:	add	r1, r7, #56	; 0x38
   159ec:	ldr	r0, [r7, #48]	; 0x30
   159f0:	mov	r6, r4
   159f4:	bl	13fd4 <__assert_fail@plt+0x2d04>
   159f8:	mov	r0, r6
   159fc:	add	sp, sp, #12
   15a00:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15a04:	ldr	r3, [r7, #48]	; 0x30
   15a08:	ands	r8, r3, #4
   15a0c:	addne	r4, r7, #60	; 0x3c
   15a10:	bne	15a44 <__assert_fail@plt+0x4774>
   15a14:	tst	r3, #512	; 0x200
   15a18:	bne	15e6c <__assert_fail@plt+0x4b9c>
   15a1c:	ldr	r0, [r7, #28]
   15a20:	bl	1124c <fchdir@plt>
   15a24:	add	r4, r7, #60	; 0x3c
   15a28:	adds	r5, r0, #0
   15a2c:	movne	r5, #1
   15a30:	b	15a44 <__assert_fail@plt+0x4774>
   15a34:	mov	r0, r4
   15a38:	bl	17c9c <__assert_fail@plt+0x69cc>
   15a3c:	cmp	r0, #0
   15a40:	bge	15c30 <__assert_fail@plt+0x4960>
   15a44:	mov	r0, r4
   15a48:	bl	17c50 <__assert_fail@plt+0x6980>
   15a4c:	cmp	r0, #0
   15a50:	beq	15a34 <__assert_fail@plt+0x4764>
   15a54:	cmp	r5, #0
   15a58:	bne	15f2c <__assert_fail@plt+0x4c5c>
   15a5c:	ldr	r2, [r7, #48]	; 0x30
   15a60:	ldr	r3, [pc, #1760]	; 16148 <__assert_fail@plt+0x4e78>
   15a64:	ldr	r0, [r7, #56]	; 0x38
   15a68:	and	r3, r3, r2
   15a6c:	cmp	r3, #0
   15a70:	beq	15f24 <__assert_fail@plt+0x4c54>
   15a74:	cmp	r0, #0
   15a78:	beq	15a80 <__assert_fail@plt+0x47b0>
   15a7c:	bl	16e08 <__assert_fail@plt+0x5b38>
   15a80:	ldr	r2, [r6, #52]	; 0x34
   15a84:	add	r5, r6, #168	; 0xa8
   15a88:	str	r2, [r6, #40]	; 0x28
   15a8c:	mov	r1, r5
   15a90:	add	r2, r2, #1
   15a94:	ldr	r0, [r7, #24]
   15a98:	bl	11000 <memmove@plt>
   15a9c:	mov	r0, r5
   15aa0:	mov	r1, #47	; 0x2f
   15aa4:	bl	11210 <strrchr@plt>
   15aa8:	cmp	r0, #0
   15aac:	beq	15adc <__assert_fail@plt+0x480c>
   15ab0:	cmp	r5, r0
   15ab4:	beq	15f40 <__assert_fail@plt+0x4c70>
   15ab8:	add	r4, r0, #1
   15abc:	mov	r0, r4
   15ac0:	bl	11168 <strlen@plt>
   15ac4:	mov	r1, r4
   15ac8:	mov	r8, r0
   15acc:	add	r2, r8, #1
   15ad0:	mov	r0, r5
   15ad4:	bl	11000 <memmove@plt>
   15ad8:	str	r8, [r6, #52]	; 0x34
   15adc:	ldr	r1, [r7, #48]	; 0x30
   15ae0:	ldr	r3, [pc, #1632]	; 16148 <__assert_fail@plt+0x4e78>
   15ae4:	ldr	r2, [r7, #24]
   15ae8:	and	r3, r3, r1
   15aec:	cmp	r3, #0
   15af0:	str	r2, [r6, #28]
   15af4:	str	r2, [r6, #24]
   15af8:	beq	15ce8 <__assert_fail@plt+0x4a18>
   15afc:	ldr	r2, [pc, #1608]	; 1614c <__assert_fail@plt+0x4e7c>
   15b00:	ldr	r3, [pc, #1608]	; 16150 <__assert_fail@plt+0x4e80>
   15b04:	str	r2, [sp]
   15b08:	mov	r1, #0
   15b0c:	ldr	r2, [pc, #1600]	; 16154 <__assert_fail@plt+0x4e84>
   15b10:	mov	r0, #31
   15b14:	bl	16b18 <__assert_fail@plt+0x5848>
   15b18:	ldrh	r3, [r6, #56]	; 0x38
   15b1c:	str	r0, [r7, #56]	; 0x38
   15b20:	cmp	r3, #11
   15b24:	str	r6, [r7]
   15b28:	beq	15c10 <__assert_fail@plt+0x4940>
   15b2c:	cmp	r3, #1
   15b30:	bne	159f8 <__assert_fail@plt+0x4728>
   15b34:	ldr	r3, [r6, #48]	; 0x30
   15b38:	cmp	r3, #0
   15b3c:	ldrdeq	r2, [r6, #64]	; 0x40
   15b40:	strdeq	r2, [r7, #16]
   15b44:	ldr	r2, [r7, #48]	; 0x30
   15b48:	ldr	r3, [pc, #1528]	; 16148 <__assert_fail@plt+0x4e78>
   15b4c:	and	r3, r3, r2
   15b50:	cmp	r3, #0
   15b54:	beq	15cac <__assert_fail@plt+0x49dc>
   15b58:	mov	r0, #24
   15b5c:	bl	1d084 <__assert_fail@plt+0xbdb4>
   15b60:	subs	r8, r0, #0
   15b64:	beq	15e38 <__assert_fail@plt+0x4b68>
   15b68:	ldrd	r4, [r6, #64]	; 0x40
   15b6c:	ldrd	r2, [r6, #160]	; 0xa0
   15b70:	ldr	r0, [r7, #56]	; 0x38
   15b74:	strd	r4, [r8]
   15b78:	strd	r2, [r8, #8]
   15b7c:	str	r6, [r8, #16]
   15b80:	mov	r1, r8
   15b84:	bl	17480 <__assert_fail@plt+0x61b0>
   15b88:	cmp	r8, r0
   15b8c:	mov	r4, r0
   15b90:	beq	159f8 <__assert_fail@plt+0x4728>
   15b94:	mov	r0, r8
   15b98:	bl	13bb0 <__assert_fail@plt+0x28e0>
   15b9c:	cmp	r4, #0
   15ba0:	beq	15e38 <__assert_fail@plt+0x4b68>
   15ba4:	ldr	r2, [r4, #16]
   15ba8:	mov	r3, #2
   15bac:	str	r2, [r6]
   15bb0:	strh	r3, [r6, #56]	; 0x38
   15bb4:	b	159f8 <__assert_fail@plt+0x4728>
   15bb8:	cmp	r3, #2
   15bbc:	beq	15f90 <__assert_fail@plt+0x4cc0>
   15bc0:	ldr	r3, [r6, #4]
   15bc4:	mov	ip, #47	; 0x2f
   15bc8:	ldr	r2, [r7, #24]
   15bcc:	ldr	r0, [r3, #40]	; 0x28
   15bd0:	ldr	lr, [r3, #28]
   15bd4:	sub	r3, r0, #1
   15bd8:	add	r1, r6, #168	; 0xa8
   15bdc:	ldrb	lr, [lr, r3]
   15be0:	cmp	lr, ip
   15be4:	movne	r3, r0
   15be8:	add	r0, r2, r3
   15bec:	strb	ip, [r2, r3]
   15bf0:	ldr	r2, [r6, #52]	; 0x34
   15bf4:	add	r0, r0, #1
   15bf8:	add	r2, r2, #1
   15bfc:	bl	11000 <memmove@plt>
   15c00:	ldrh	r3, [r6, #56]	; 0x38
   15c04:	str	r6, [r7]
   15c08:	cmp	r3, #11
   15c0c:	bne	15b2c <__assert_fail@plt+0x485c>
   15c10:	ldrd	r2, [r6, #112]	; 0x70
   15c14:	cmp	r3, #0
   15c18:	cmpeq	r2, #2
   15c1c:	beq	15fbc <__assert_fail@plt+0x4cec>
   15c20:	cmp	r3, #0
   15c24:	cmpeq	r2, #1
   15c28:	beq	159f8 <__assert_fail@plt+0x4728>
   15c2c:	bl	11294 <abort@plt>
   15c30:	bl	112a0 <close@plt>
   15c34:	b	15a44 <__assert_fail@plt+0x4774>
   15c38:	ldr	r5, [r7, #4]
   15c3c:	cmp	r5, #0
   15c40:	beq	15ecc <__assert_fail@plt+0x4bfc>
   15c44:	tst	r1, #4096	; 0x1000
   15c48:	bne	15e98 <__assert_fail@plt+0x4bc8>
   15c4c:	ldr	r3, [r4, #24]
   15c50:	mvn	r2, #0
   15c54:	mov	r1, r4
   15c58:	mov	r0, r7
   15c5c:	bl	1408c <__assert_fail@plt+0x2dbc>
   15c60:	cmp	r0, #0
   15c64:	beq	15dac <__assert_fail@plt+0x4adc>
   15c68:	bl	11180 <__errno_location@plt>
   15c6c:	ldrh	r3, [r4, #58]	; 0x3a
   15c70:	ldr	r6, [r7, #4]
   15c74:	orr	r3, r3, #1
   15c78:	cmp	r6, #0
   15c7c:	ldr	r2, [r0]
   15c80:	strh	r3, [r4, #58]	; 0x3a
   15c84:	str	r2, [r4, #32]
   15c88:	beq	15db0 <__assert_fail@plt+0x4ae0>
   15c8c:	mov	r3, r6
   15c90:	ldr	r2, [r3, #4]
   15c94:	ldr	r2, [r2, #24]
   15c98:	str	r2, [r3, #24]
   15c9c:	ldr	r3, [r3, #8]
   15ca0:	cmp	r3, #0
   15ca4:	bne	15c90 <__assert_fail@plt+0x49c0>
   15ca8:	b	15db0 <__assert_fail@plt+0x4ae0>
   15cac:	ldr	r0, [r7, #56]	; 0x38
   15cb0:	add	r1, r6, #64	; 0x40
   15cb4:	bl	1d1ac <__assert_fail@plt+0xbedc>
   15cb8:	cmp	r0, #0
   15cbc:	movne	r3, #2
   15cc0:	strne	r6, [r6]
   15cc4:	strhne	r3, [r6, #56]	; 0x38
   15cc8:	b	159f8 <__assert_fail@plt+0x4728>
   15ccc:	mov	r3, r5
   15cd0:	ldr	r0, [r0, #32]
   15cd4:	mov	r2, r4
   15cd8:	bl	13e88 <__assert_fail@plt+0x2bb8>
   15cdc:	mov	r6, r4
   15ce0:	strh	r0, [r4, #56]	; 0x38
   15ce4:	b	159f8 <__assert_fail@plt+0x4728>
   15ce8:	mov	r0, #32
   15cec:	bl	1d084 <__assert_fail@plt+0xbdb4>
   15cf0:	cmp	r0, #0
   15cf4:	str	r0, [r7, #56]	; 0x38
   15cf8:	beq	15c00 <__assert_fail@plt+0x4930>
   15cfc:	bl	1d188 <__assert_fail@plt+0xbeb8>
   15d00:	ldrh	r3, [r6, #56]	; 0x38
   15d04:	b	15b20 <__assert_fail@plt+0x4850>
   15d08:	tst	r3, #1
   15d0c:	bne	1590c <__assert_fail@plt+0x463c>
   15d10:	ldr	r3, [pc, #1088]	; 16158 <__assert_fail@plt+0x4e88>
   15d14:	mvn	r2, #0
   15d18:	ldr	r1, [r6, #4]
   15d1c:	mov	r0, r7
   15d20:	bl	1408c <__assert_fail@plt+0x2dbc>
   15d24:	cmp	r0, #0
   15d28:	beq	1590c <__assert_fail@plt+0x463c>
   15d2c:	bl	11180 <__errno_location@plt>
   15d30:	ldr	r3, [r7, #48]	; 0x30
   15d34:	orr	r3, r3, #8192	; 0x2000
   15d38:	ldr	r2, [r0]
   15d3c:	str	r2, [r6, #32]
   15d40:	str	r3, [r7, #48]	; 0x30
   15d44:	b	15910 <__assert_fail@plt+0x4640>
   15d48:	ldr	r3, [r7, #48]	; 0x30
   15d4c:	ands	r8, r3, #4
   15d50:	addne	r4, r7, #60	; 0x3c
   15d54:	bne	15d88 <__assert_fail@plt+0x4ab8>
   15d58:	tst	r3, #512	; 0x200
   15d5c:	bne	16008 <__assert_fail@plt+0x4d38>
   15d60:	ldr	r0, [r7, #28]
   15d64:	bl	1124c <fchdir@plt>
   15d68:	add	r4, r7, #60	; 0x3c
   15d6c:	adds	r5, r0, #0
   15d70:	movne	r5, #1
   15d74:	b	15d88 <__assert_fail@plt+0x4ab8>
   15d78:	mov	r0, r4
   15d7c:	bl	17c9c <__assert_fail@plt+0x69cc>
   15d80:	cmp	r0, #0
   15d84:	bge	15da4 <__assert_fail@plt+0x4ad4>
   15d88:	mov	r0, r4
   15d8c:	bl	17c50 <__assert_fail@plt+0x6980>
   15d90:	cmp	r0, #0
   15d94:	beq	15d78 <__assert_fail@plt+0x4aa8>
   15d98:	cmp	r5, #0
   15d9c:	bne	15d2c <__assert_fail@plt+0x4a5c>
   15da0:	b	1590c <__assert_fail@plt+0x463c>
   15da4:	bl	112a0 <close@plt>
   15da8:	b	15d88 <__assert_fail@plt+0x4ab8>
   15dac:	ldr	r6, [r7, #4]
   15db0:	mov	r3, #0
   15db4:	str	r3, [r7, #4]
   15db8:	b	15bc0 <__assert_fail@plt+0x48f0>
   15dbc:	tst	r3, #512	; 0x200
   15dc0:	beq	15fdc <__assert_fail@plt+0x4d0c>
   15dc4:	ldr	r1, [r7, #32]
   15dc8:	ldr	r4, [r6, #36]	; 0x24
   15dcc:	cmn	r1, #100	; 0x64
   15dd0:	sub	r3, r4, r1
   15dd4:	clz	r3, r3
   15dd8:	lsr	r3, r3, #5
   15ddc:	moveq	r3, #0
   15de0:	cmp	r3, #0
   15de4:	bne	15c2c <__assert_fail@plt+0x495c>
   15de8:	add	r0, r7, #60	; 0x3c
   15dec:	bl	17c58 <__assert_fail@plt+0x6988>
   15df0:	cmp	r0, #0
   15df4:	blt	15dfc <__assert_fail@plt+0x4b2c>
   15df8:	bl	112a0 <close@plt>
   15dfc:	str	r4, [r7, #32]
   15e00:	b	15904 <__assert_fail@plt+0x4634>
   15e04:	mov	r3, #1
   15e08:	mov	r2, r4
   15e0c:	ldr	r0, [r0, #32]
   15e10:	bl	13e88 <__assert_fail@plt+0x2bb8>
   15e14:	cmp	r0, #1
   15e18:	strh	r0, [r4, #56]	; 0x38
   15e1c:	mov	r3, r0
   15e20:	beq	16048 <__assert_fail@plt+0x4d78>
   15e24:	cmp	r0, #11
   15e28:	mov	r6, r4
   15e2c:	str	r4, [r7]
   15e30:	bne	159f8 <__assert_fail@plt+0x4728>
   15e34:	b	15c10 <__assert_fail@plt+0x4940>
   15e38:	bl	11180 <__errno_location@plt>
   15e3c:	mov	r3, #12
   15e40:	mov	r6, #0
   15e44:	str	r3, [r0]
   15e48:	b	159f8 <__assert_fail@plt+0x4728>
   15e4c:	mov	r0, r6
   15e50:	bl	13bb0 <__assert_fail@plt+0x28e0>
   15e54:	bl	11180 <__errno_location@plt>
   15e58:	mov	r3, #0
   15e5c:	mov	r6, r3
   15e60:	str	r3, [r0]
   15e64:	str	r3, [r7]
   15e68:	b	159f8 <__assert_fail@plt+0x4728>
   15e6c:	add	r4, r7, #60	; 0x3c
   15e70:	mov	r0, r4
   15e74:	ldr	r1, [r7, #32]
   15e78:	bl	17c58 <__assert_fail@plt+0x6988>
   15e7c:	cmp	r0, #0
   15e80:	blt	15e88 <__assert_fail@plt+0x4bb8>
   15e84:	bl	112a0 <close@plt>
   15e88:	mvn	r3, #99	; 0x63
   15e8c:	mov	r5, r8
   15e90:	str	r3, [r7, #32]
   15e94:	b	15a44 <__assert_fail@plt+0x4774>
   15e98:	bic	ip, r1, #4096	; 0x1000
   15e9c:	str	ip, [r7, #48]	; 0x30
   15ea0:	ldr	r0, [r5, #12]
   15ea4:	ldr	r6, [r5, #8]
   15ea8:	cmp	r0, #0
   15eac:	beq	15eb4 <__assert_fail@plt+0x4be4>
   15eb0:	bl	112c4 <closedir@plt>
   15eb4:	mov	r0, r5
   15eb8:	bl	13bb0 <__assert_fail@plt+0x28e0>
   15ebc:	cmp	r6, #0
   15ec0:	mov	r5, r6
   15ec4:	bne	15ea0 <__assert_fail@plt+0x4bd0>
   15ec8:	str	r6, [r7, #4]
   15ecc:	mov	r1, #3
   15ed0:	mov	r0, r7
   15ed4:	bl	14324 <__assert_fail@plt+0x3054>
   15ed8:	cmp	r0, #0
   15edc:	mov	r6, r0
   15ee0:	str	r0, [r7, #4]
   15ee4:	bne	15db0 <__assert_fail@plt+0x4ae0>
   15ee8:	ldr	r0, [r7, #48]	; 0x30
   15eec:	tst	r0, #8192	; 0x2000
   15ef0:	bne	15954 <__assert_fail@plt+0x4684>
   15ef4:	ldr	r3, [r4, #32]
   15ef8:	cmp	r3, #0
   15efc:	beq	15f10 <__assert_fail@plt+0x4c40>
   15f00:	ldrh	r3, [r4, #56]	; 0x38
   15f04:	cmp	r3, #4
   15f08:	movne	r3, #7
   15f0c:	strhne	r3, [r4, #56]	; 0x38
   15f10:	add	r1, r7, #56	; 0x38
   15f14:	mov	r2, r4
   15f18:	bl	13fd4 <__assert_fail@plt+0x2d04>
   15f1c:	mov	r6, r4
   15f20:	b	159f8 <__assert_fail@plt+0x4728>
   15f24:	bl	13bb0 <__assert_fail@plt+0x28e0>
   15f28:	b	15a80 <__assert_fail@plt+0x47b0>
   15f2c:	ldr	r3, [r7, #48]	; 0x30
   15f30:	mov	r6, #0
   15f34:	orr	r3, r3, #8192	; 0x2000
   15f38:	str	r3, [r7, #48]	; 0x30
   15f3c:	b	159f8 <__assert_fail@plt+0x4728>
   15f40:	ldrb	r3, [r6, #169]	; 0xa9
   15f44:	cmp	r3, #0
   15f48:	bne	15ab8 <__assert_fail@plt+0x47e8>
   15f4c:	b	15adc <__assert_fail@plt+0x480c>
   15f50:	ldr	r0, [r4, #36]	; 0x24
   15f54:	bl	112a0 <close@plt>
   15f58:	b	159a4 <__assert_fail@plt+0x46d4>
   15f5c:	ldr	r3, [r6, #40]	; 0x28
   15f60:	ldr	r2, [r7, #24]
   15f64:	mov	r0, #0
   15f68:	str	r6, [r7]
   15f6c:	mov	r1, #3
   15f70:	strb	r0, [r2, r3]
   15f74:	mov	r0, r7
   15f78:	bl	14324 <__assert_fail@plt+0x3054>
   15f7c:	subs	r6, r0, #0
   15f80:	beq	16034 <__assert_fail@plt+0x4d64>
   15f84:	mov	r0, r4
   15f88:	bl	13bb0 <__assert_fail@plt+0x28e0>
   15f8c:	b	15bc0 <__assert_fail@plt+0x48f0>
   15f90:	mov	r3, #1
   15f94:	mov	r2, r6
   15f98:	ldr	r1, [r7, #48]	; 0x30
   15f9c:	ldr	r0, [r7, #32]
   15fa0:	bl	13e88 <__assert_fail@plt+0x2bb8>
   15fa4:	cmp	r0, #1
   15fa8:	strh	r0, [r6, #56]	; 0x38
   15fac:	beq	16060 <__assert_fail@plt+0x4d90>
   15fb0:	mov	r3, #3
   15fb4:	strh	r3, [r6, #60]	; 0x3c
   15fb8:	b	15bc0 <__assert_fail@plt+0x48f0>
   15fbc:	mov	r3, #0
   15fc0:	mov	r2, r6
   15fc4:	ldr	r1, [r7, #48]	; 0x30
   15fc8:	ldr	r0, [r7, #32]
   15fcc:	bl	13e88 <__assert_fail@plt+0x2bb8>
   15fd0:	mov	r3, r0
   15fd4:	strh	r0, [r6, #56]	; 0x38
   15fd8:	b	15b2c <__assert_fail@plt+0x485c>
   15fdc:	ldr	r0, [r6, #36]	; 0x24
   15fe0:	bl	1124c <fchdir@plt>
   15fe4:	cmp	r0, #0
   15fe8:	beq	15904 <__assert_fail@plt+0x4634>
   15fec:	bl	11180 <__errno_location@plt>
   15ff0:	ldr	r3, [r7, #48]	; 0x30
   15ff4:	orr	r3, r3, #8192	; 0x2000
   15ff8:	ldr	r2, [r0]
   15ffc:	str	r2, [r6, #32]
   16000:	str	r3, [r7, #48]	; 0x30
   16004:	b	15904 <__assert_fail@plt+0x4634>
   16008:	add	r4, r7, #60	; 0x3c
   1600c:	mov	r0, r4
   16010:	ldr	r1, [r7, #32]
   16014:	bl	17c58 <__assert_fail@plt+0x6988>
   16018:	cmp	r0, #0
   1601c:	blt	16024 <__assert_fail@plt+0x4d54>
   16020:	bl	112a0 <close@plt>
   16024:	mvn	r3, #99	; 0x63
   16028:	mov	r5, r8
   1602c:	str	r3, [r7, #32]
   16030:	b	15d88 <__assert_fail@plt+0x4ab8>
   16034:	ldr	r3, [r7, #48]	; 0x30
   16038:	tst	r3, #8192	; 0x2000
   1603c:	bne	15954 <__assert_fail@plt+0x4684>
   16040:	ldr	r6, [r4, #4]
   16044:	b	158ac <__assert_fail@plt+0x45dc>
   16048:	ldr	r1, [r7, #48]	; 0x30
   1604c:	tst	r1, #4
   16050:	beq	160ac <__assert_fail@plt+0x4ddc>
   16054:	str	r4, [r7]
   16058:	mov	r6, r4
   1605c:	b	15b2c <__assert_fail@plt+0x485c>
   16060:	ldr	r3, [r7, #48]	; 0x30
   16064:	tst	r3, #4
   16068:	bne	15fb0 <__assert_fail@plt+0x4ce0>
   1606c:	ldr	r1, [pc, #232]	; 1615c <__assert_fail@plt+0x4e8c>
   16070:	tst	r3, #16
   16074:	ldr	r2, [pc, #228]	; 16160 <__assert_fail@plt+0x4e90>
   16078:	movne	r2, r1
   1607c:	tst	r3, #512	; 0x200
   16080:	bne	1610c <__assert_fail@plt+0x4e3c>
   16084:	mov	r1, r2
   16088:	ldr	r0, [pc, #212]	; 16164 <__assert_fail@plt+0x4e94>
   1608c:	bl	1d4ec <__assert_fail@plt+0xc21c>
   16090:	cmp	r0, #0
   16094:	str	r0, [r6, #36]	; 0x24
   16098:	blt	160f4 <__assert_fail@plt+0x4e24>
   1609c:	ldrh	r3, [r6, #58]	; 0x3a
   160a0:	orr	r3, r3, #2
   160a4:	strh	r3, [r6, #58]	; 0x3a
   160a8:	b	15fb0 <__assert_fail@plt+0x4ce0>
   160ac:	ldr	r3, [pc, #168]	; 1615c <__assert_fail@plt+0x4e8c>
   160b0:	tst	r1, #16
   160b4:	ldr	r2, [pc, #164]	; 16160 <__assert_fail@plt+0x4e90>
   160b8:	movne	r2, r3
   160bc:	tst	r1, #512	; 0x200
   160c0:	bne	16138 <__assert_fail@plt+0x4e68>
   160c4:	mov	r1, r2
   160c8:	ldr	r0, [pc, #148]	; 16164 <__assert_fail@plt+0x4e94>
   160cc:	bl	1d4ec <__assert_fail@plt+0xc21c>
   160d0:	cmp	r0, #0
   160d4:	str	r0, [r4, #36]	; 0x24
   160d8:	blt	1611c <__assert_fail@plt+0x4e4c>
   160dc:	ldrh	r2, [r4, #58]	; 0x3a
   160e0:	ldrh	r3, [r4, #56]	; 0x38
   160e4:	mov	r6, r4
   160e8:	orr	r2, r2, #2
   160ec:	strh	r2, [r4, #58]	; 0x3a
   160f0:	b	15b20 <__assert_fail@plt+0x4850>
   160f4:	bl	11180 <__errno_location@plt>
   160f8:	mov	r2, #7
   160fc:	ldr	r3, [r0]
   16100:	strh	r2, [r6, #56]	; 0x38
   16104:	str	r3, [r6, #32]
   16108:	b	15fb0 <__assert_fail@plt+0x4ce0>
   1610c:	ldr	r1, [pc, #80]	; 16164 <__assert_fail@plt+0x4e94>
   16110:	ldr	r0, [r7, #32]
   16114:	bl	17ce4 <__assert_fail@plt+0x6a14>
   16118:	b	16090 <__assert_fail@plt+0x4dc0>
   1611c:	bl	11180 <__errno_location@plt>
   16120:	mov	r2, #7
   16124:	mov	r3, r2
   16128:	ldr	r1, [r0]
   1612c:	strh	r2, [r4, #56]	; 0x38
   16130:	str	r1, [r4, #32]
   16134:	b	16054 <__assert_fail@plt+0x4d84>
   16138:	ldr	r1, [pc, #36]	; 16164 <__assert_fail@plt+0x4e94>
   1613c:	ldr	r0, [r7, #32]
   16140:	bl	17ce4 <__assert_fail@plt+0x6a14>
   16144:	b	160d0 <__assert_fail@plt+0x4e00>
   16148:	andeq	r0, r0, r2, lsl #2
   1614c:			; <UNDEFINED> instruction: 0x00013bb0
   16150:	andeq	r3, r1, r8, lsr #25
   16154:	andeq	r3, r1, ip, ror #25
   16158:	andeq	lr, r1, r0, asr sl
   1615c:	andeq	ip, r8, r0, lsl #18
   16160:	andeq	r4, r8, r0, lsl #18
   16164:	andeq	lr, r1, ip, asr #20
   16168:	cmp	r2, #4
   1616c:	bhi	16180 <__assert_fail@plt+0x4eb0>
   16170:	mov	r3, #0
   16174:	strh	r2, [r1, #60]	; 0x3c
   16178:	mov	r0, r3
   1617c:	bx	lr
   16180:	push	{r4, lr}
   16184:	bl	11180 <__errno_location@plt>
   16188:	mov	r2, #22
   1618c:	mov	r3, #1
   16190:	str	r2, [r0]
   16194:	mov	r0, r3
   16198:	pop	{r4, pc}
   1619c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   161a0:	bics	r4, r1, #4096	; 0x1000
   161a4:	bne	16318 <__assert_fail@plt+0x5048>
   161a8:	mov	r6, r0
   161ac:	mov	r7, r1
   161b0:	bl	11180 <__errno_location@plt>
   161b4:	ldr	r8, [r6]
   161b8:	str	r4, [r0]
   161bc:	ldr	r3, [r6, #48]	; 0x30
   161c0:	mov	r9, r0
   161c4:	ands	r3, r3, #8192	; 0x2000
   161c8:	bne	16330 <__assert_fail@plt+0x5060>
   161cc:	ldrh	r2, [r8, #56]	; 0x38
   161d0:	cmp	r2, #9
   161d4:	ldreq	r3, [r8, #8]
   161d8:	beq	1625c <__assert_fail@plt+0x4f8c>
   161dc:	cmp	r2, #1
   161e0:	bne	1625c <__assert_fail@plt+0x4f8c>
   161e4:	ldr	r4, [r6, #4]
   161e8:	cmp	r4, #0
   161ec:	beq	16214 <__assert_fail@plt+0x4f44>
   161f0:	ldr	r0, [r4, #12]
   161f4:	ldr	r5, [r4, #8]
   161f8:	cmp	r0, #0
   161fc:	beq	16204 <__assert_fail@plt+0x4f34>
   16200:	bl	112c4 <closedir@plt>
   16204:	mov	r0, r4
   16208:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1620c:	subs	r4, r5, #0
   16210:	bne	161f0 <__assert_fail@plt+0x4f20>
   16214:	cmp	r7, #4096	; 0x1000
   16218:	movne	r4, #1
   1621c:	beq	16264 <__assert_fail@plt+0x4f94>
   16220:	ldr	r3, [r8, #48]	; 0x30
   16224:	cmp	r3, #0
   16228:	bne	16248 <__assert_fail@plt+0x4f78>
   1622c:	ldr	r3, [r8, #24]
   16230:	ldrb	r3, [r3]
   16234:	cmp	r3, #47	; 0x2f
   16238:	beq	16248 <__assert_fail@plt+0x4f78>
   1623c:	ldr	r3, [r6, #48]	; 0x30
   16240:	tst	r3, #4
   16244:	beq	16284 <__assert_fail@plt+0x4fb4>
   16248:	mov	r1, r4
   1624c:	mov	r0, r6
   16250:	bl	14324 <__assert_fail@plt+0x3054>
   16254:	mov	r3, r0
   16258:	str	r0, [r6, #4]
   1625c:	mov	r0, r3
   16260:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16264:	ldr	r3, [r6, #48]	; 0x30
   16268:	mov	r4, #2
   1626c:	orr	r3, r3, #4096	; 0x1000
   16270:	str	r3, [r6, #48]	; 0x30
   16274:	ldr	r3, [r8, #48]	; 0x30
   16278:	cmp	r3, #0
   1627c:	beq	1622c <__assert_fail@plt+0x4f5c>
   16280:	b	16248 <__assert_fail@plt+0x4f78>
   16284:	ldr	r2, [pc, #252]	; 16388 <__assert_fail@plt+0x50b8>
   16288:	tst	r3, #16
   1628c:	ldr	r1, [pc, #248]	; 1638c <__assert_fail@plt+0x50bc>
   16290:	moveq	r1, r2
   16294:	tst	r3, #512	; 0x200
   16298:	bne	16354 <__assert_fail@plt+0x5084>
   1629c:	ldr	r0, [pc, #236]	; 16390 <__assert_fail@plt+0x50c0>
   162a0:	bl	1d4ec <__assert_fail@plt+0xc21c>
   162a4:	mov	r5, r0
   162a8:	cmp	r5, #0
   162ac:	movlt	r3, #0
   162b0:	strlt	r3, [r6, #4]
   162b4:	blt	1625c <__assert_fail@plt+0x4f8c>
   162b8:	mov	r1, r4
   162bc:	mov	r0, r6
   162c0:	bl	14324 <__assert_fail@plt+0x3054>
   162c4:	ldr	r3, [r6, #48]	; 0x30
   162c8:	ands	r4, r3, #512	; 0x200
   162cc:	str	r0, [r6, #4]
   162d0:	beq	16338 <__assert_fail@plt+0x5068>
   162d4:	ldr	r1, [r6, #32]
   162d8:	cmn	r1, #100	; 0x64
   162dc:	sub	r3, r5, r1
   162e0:	clz	r3, r3
   162e4:	lsr	r3, r3, #5
   162e8:	moveq	r3, #0
   162ec:	cmp	r3, #0
   162f0:	bne	16384 <__assert_fail@plt+0x50b4>
   162f4:	add	r0, r6, #60	; 0x3c
   162f8:	bl	17c58 <__assert_fail@plt+0x6988>
   162fc:	cmp	r0, #0
   16300:	blt	16308 <__assert_fail@plt+0x5038>
   16304:	bl	112a0 <close@plt>
   16308:	str	r5, [r6, #32]
   1630c:	ldr	r3, [r6, #4]
   16310:	mov	r0, r3
   16314:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16318:	bl	11180 <__errno_location@plt>
   1631c:	mov	r2, #22
   16320:	mov	r3, #0
   16324:	str	r2, [r0]
   16328:	mov	r0, r3
   1632c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16330:	mov	r3, r4
   16334:	b	1625c <__assert_fail@plt+0x4f8c>
   16338:	mov	r0, r5
   1633c:	bl	1124c <fchdir@plt>
   16340:	cmp	r0, #0
   16344:	bne	1636c <__assert_fail@plt+0x509c>
   16348:	mov	r0, r5
   1634c:	bl	112a0 <close@plt>
   16350:	b	1630c <__assert_fail@plt+0x503c>
   16354:	mov	r2, r1
   16358:	ldr	r0, [r6, #32]
   1635c:	ldr	r1, [pc, #44]	; 16390 <__assert_fail@plt+0x50c0>
   16360:	bl	17ce4 <__assert_fail@plt+0x6a14>
   16364:	mov	r5, r0
   16368:	b	162a8 <__assert_fail@plt+0x4fd8>
   1636c:	ldr	r6, [r9]
   16370:	mov	r0, r5
   16374:	bl	112a0 <close@plt>
   16378:	str	r6, [r9]
   1637c:	mov	r3, r4
   16380:	b	1625c <__assert_fail@plt+0x4f8c>
   16384:	bl	11294 <abort@plt>
   16388:	andeq	r4, r8, r0, lsl #18
   1638c:	andeq	ip, r8, r0, lsl #18
   16390:	andeq	lr, r1, ip, asr #20
   16394:	andeq	r0, r0, r0
   16398:	push	{r4, lr}
   1639c:	ror	r0, r0, #3
   163a0:	bl	1d8e4 <__assert_fail@plt+0xc614>
   163a4:	mov	r0, r1
   163a8:	pop	{r4, pc}
   163ac:	sub	r0, r1, r0
   163b0:	clz	r0, r0
   163b4:	lsr	r0, r0, #5
   163b8:	bx	lr
   163bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   163c0:	mov	r5, r1
   163c4:	mov	r6, r0
   163c8:	ldr	r4, [r0, #24]
   163cc:	ldr	r1, [r0, #8]
   163d0:	mov	r0, r5
   163d4:	mov	r8, r3
   163d8:	mov	sl, r2
   163dc:	blx	r4
   163e0:	ldr	r3, [r6, #8]
   163e4:	cmp	r0, r3
   163e8:	bcs	164d8 <__assert_fail@plt+0x5208>
   163ec:	ldr	r9, [r6]
   163f0:	mov	r7, r0
   163f4:	add	r4, r9, r0, lsl #3
   163f8:	str	r4, [sl]
   163fc:	ldr	r3, [r9, r0, lsl #3]
   16400:	cmp	r3, #0
   16404:	beq	16498 <__assert_fail@plt+0x51c8>
   16408:	cmp	r5, r3
   1640c:	beq	1642c <__assert_fail@plt+0x515c>
   16410:	mov	r1, r3
   16414:	mov	r0, r5
   16418:	ldr	r3, [r6, #28]
   1641c:	blx	r3
   16420:	cmp	r0, #0
   16424:	beq	1648c <__assert_fail@plt+0x51bc>
   16428:	ldr	r3, [r9, r7, lsl #3]
   1642c:	cmp	r8, #0
   16430:	beq	1645c <__assert_fail@plt+0x518c>
   16434:	ldr	r2, [r4, #4]
   16438:	cmp	r2, #0
   1643c:	movne	ip, #0
   16440:	ldmne	r2, {r0, r1}
   16444:	streq	r2, [r9, r7, lsl #3]
   16448:	stmne	r4, {r0, r1}
   1644c:	strne	ip, [r2]
   16450:	ldrne	r1, [r6, #36]	; 0x24
   16454:	strne	r1, [r2, #4]
   16458:	strne	r2, [r6, #36]	; 0x24
   1645c:	mov	r0, r3
   16460:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16464:	ldr	r3, [r2]
   16468:	cmp	r5, r3
   1646c:	beq	164ac <__assert_fail@plt+0x51dc>
   16470:	mov	r1, r3
   16474:	mov	r0, r5
   16478:	ldr	r3, [r6, #28]
   1647c:	blx	r3
   16480:	cmp	r0, #0
   16484:	bne	164a4 <__assert_fail@plt+0x51d4>
   16488:	ldr	r4, [r4, #4]
   1648c:	ldr	r2, [r4, #4]
   16490:	cmp	r2, #0
   16494:	bne	16464 <__assert_fail@plt+0x5194>
   16498:	mov	r3, #0
   1649c:	mov	r0, r3
   164a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   164a4:	ldr	r2, [r4, #4]
   164a8:	ldr	r3, [r2]
   164ac:	cmp	r8, #0
   164b0:	beq	1645c <__assert_fail@plt+0x518c>
   164b4:	ldr	r0, [r2, #4]
   164b8:	mov	r1, #0
   164bc:	str	r0, [r4, #4]
   164c0:	str	r1, [r2]
   164c4:	ldr	r1, [r6, #36]	; 0x24
   164c8:	mov	r0, r3
   164cc:	str	r1, [r2, #4]
   164d0:	str	r2, [r6, #36]	; 0x24
   164d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   164d8:	bl	11294 <abort@plt>
   164dc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164e0:	ldr	r6, [r1]
   164e4:	ldr	r3, [r1, #4]
   164e8:	cmp	r6, r3
   164ec:	bcs	165bc <__assert_fail@plt+0x52ec>
   164f0:	mov	r9, r2
   164f4:	mov	r5, r0
   164f8:	mov	r8, r1
   164fc:	add	r6, r6, #8
   16500:	mov	sl, #0
   16504:	ldr	fp, [r6, #-8]
   16508:	mov	r7, r6
   1650c:	cmp	fp, #0
   16510:	beq	165b0 <__assert_fail@plt+0x52e0>
   16514:	ldr	r4, [r6, #-4]
   16518:	cmp	r4, #0
   1651c:	beq	165a0 <__assert_fail@plt+0x52d0>
   16520:	ldr	r1, [r5, #8]
   16524:	b	16540 <__assert_fail@plt+0x5270>
   16528:	ldr	r3, [ip, #4]
   1652c:	cmp	r2, #0
   16530:	str	r3, [r4, #4]
   16534:	str	r4, [ip, #4]
   16538:	beq	1659c <__assert_fail@plt+0x52cc>
   1653c:	mov	r4, r2
   16540:	ldr	fp, [r4]
   16544:	ldr	r3, [r5, #24]
   16548:	mov	r0, fp
   1654c:	blx	r3
   16550:	ldr	r1, [r5, #8]
   16554:	cmp	r0, r1
   16558:	bcs	1665c <__assert_fail@plt+0x538c>
   1655c:	ldr	r3, [r5]
   16560:	ldr	r2, [r4, #4]
   16564:	add	ip, r3, r0, lsl #3
   16568:	ldr	lr, [r3, r0, lsl #3]
   1656c:	cmp	lr, #0
   16570:	bne	16528 <__assert_fail@plt+0x5258>
   16574:	ldr	ip, [r5, #12]
   16578:	str	fp, [r3, r0, lsl #3]
   1657c:	add	r3, ip, #1
   16580:	str	r3, [r5, #12]
   16584:	str	lr, [r4]
   16588:	ldr	r3, [r5, #36]	; 0x24
   1658c:	cmp	r2, #0
   16590:	str	r3, [r4, #4]
   16594:	str	r4, [r5, #36]	; 0x24
   16598:	bne	1653c <__assert_fail@plt+0x526c>
   1659c:	ldr	fp, [r6, #-8]
   165a0:	cmp	r9, #0
   165a4:	str	sl, [r6, #-4]
   165a8:	beq	165c4 <__assert_fail@plt+0x52f4>
   165ac:	ldr	r3, [r8, #4]
   165b0:	cmp	r3, r7
   165b4:	add	r6, r6, #8
   165b8:	bhi	16504 <__assert_fail@plt+0x5234>
   165bc:	mov	r0, #1
   165c0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165c4:	ldr	r3, [r5, #24]
   165c8:	ldr	r1, [r5, #8]
   165cc:	mov	r0, fp
   165d0:	blx	r3
   165d4:	ldr	r3, [r5, #8]
   165d8:	cmp	r0, r3
   165dc:	bcs	1665c <__assert_fail@plt+0x538c>
   165e0:	ldr	r3, [r5]
   165e4:	add	r4, r3, r0, lsl #3
   165e8:	ldr	r2, [r3, r0, lsl #3]
   165ec:	cmp	r2, #0
   165f0:	beq	16630 <__assert_fail@plt+0x5360>
   165f4:	ldr	r0, [r5, #36]	; 0x24
   165f8:	cmp	r0, #0
   165fc:	beq	16644 <__assert_fail@plt+0x5374>
   16600:	ldr	r3, [r0, #4]
   16604:	str	r3, [r5, #36]	; 0x24
   16608:	ldr	r3, [r4, #4]
   1660c:	str	fp, [r0]
   16610:	str	r3, [r0, #4]
   16614:	str	r0, [r4, #4]
   16618:	ldr	r2, [r8, #12]
   1661c:	str	sl, [r6, #-8]
   16620:	sub	r2, r2, #1
   16624:	ldr	r3, [r8, #4]
   16628:	str	r2, [r8, #12]
   1662c:	b	165b0 <__assert_fail@plt+0x52e0>
   16630:	ldr	r2, [r5, #12]
   16634:	str	fp, [r3, r0, lsl #3]
   16638:	add	r3, r2, #1
   1663c:	str	r3, [r5, #12]
   16640:	b	16618 <__assert_fail@plt+0x5348>
   16644:	mov	r0, #8
   16648:	bl	1d084 <__assert_fail@plt+0xbdb4>
   1664c:	cmp	r0, #0
   16650:	bne	16608 <__assert_fail@plt+0x5338>
   16654:	mov	r0, r9
   16658:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1665c:	bl	11294 <abort@plt>
   16660:	ldr	r0, [r0, #8]
   16664:	bx	lr
   16668:	ldr	r0, [r0, #12]
   1666c:	bx	lr
   16670:	ldr	r0, [r0, #16]
   16674:	bx	lr
   16678:	ldm	r0, {r1, ip}
   1667c:	mov	r0, #0
   16680:	cmp	r1, ip
   16684:	bcs	166cc <__assert_fail@plt+0x53fc>
   16688:	ldr	r3, [r1]
   1668c:	cmp	r3, #0
   16690:	beq	166bc <__assert_fail@plt+0x53ec>
   16694:	ldr	r3, [r1, #4]
   16698:	mov	r2, #1
   1669c:	cmp	r3, #0
   166a0:	beq	166b4 <__assert_fail@plt+0x53e4>
   166a4:	ldr	r3, [r3, #4]
   166a8:	add	r2, r2, #1
   166ac:	cmp	r3, #0
   166b0:	bne	166a4 <__assert_fail@plt+0x53d4>
   166b4:	cmp	r0, r2
   166b8:	movcc	r0, r2
   166bc:	add	r1, r1, #8
   166c0:	cmp	r1, ip
   166c4:	bcc	16688 <__assert_fail@plt+0x53b8>
   166c8:	bx	lr
   166cc:	bx	lr
   166d0:	push	{lr}		; (str lr, [sp, #-4]!)
   166d4:	mov	r2, #0
   166d8:	ldm	r0, {r1, lr}
   166dc:	mov	ip, r2
   166e0:	cmp	r1, lr
   166e4:	bcs	16724 <__assert_fail@plt+0x5454>
   166e8:	ldr	r3, [r1]
   166ec:	cmp	r3, #0
   166f0:	beq	16718 <__assert_fail@plt+0x5448>
   166f4:	ldr	r3, [r1, #4]
   166f8:	add	ip, ip, #1
   166fc:	cmp	r3, #0
   16700:	add	r2, r2, #1
   16704:	beq	16718 <__assert_fail@plt+0x5448>
   16708:	ldr	r3, [r3, #4]
   1670c:	add	r2, r2, #1
   16710:	cmp	r3, #0
   16714:	bne	16708 <__assert_fail@plt+0x5438>
   16718:	add	r1, r1, #8
   1671c:	cmp	r1, lr
   16720:	bcc	166e8 <__assert_fail@plt+0x5418>
   16724:	ldr	r3, [r0, #12]
   16728:	cmp	r3, ip
   1672c:	ldreq	r0, [r0, #16]
   16730:	subeq	r0, r0, r2
   16734:	clzeq	r0, r0
   16738:	lsreq	r0, r0, #5
   1673c:	movne	r0, #0
   16740:	pop	{pc}		; (ldr pc, [sp], #4)
   16744:	push	{r4, r5, r6, r7, lr}
   16748:	mov	r5, r1
   1674c:	ldm	r0, {ip, lr}
   16750:	sub	sp, sp, #12
   16754:	ldr	r3, [r0, #16]
   16758:	cmp	ip, lr
   1675c:	mov	r4, #0
   16760:	ldr	r6, [r0, #8]
   16764:	ldr	r7, [r0, #12]
   16768:	bcs	167ac <__assert_fail@plt+0x54dc>
   1676c:	ldr	r2, [ip]
   16770:	cmp	r2, #0
   16774:	beq	167a0 <__assert_fail@plt+0x54d0>
   16778:	ldr	r2, [ip, #4]
   1677c:	mov	r1, #1
   16780:	cmp	r2, #0
   16784:	beq	16798 <__assert_fail@plt+0x54c8>
   16788:	ldr	r2, [r2, #4]
   1678c:	add	r1, r1, #1
   16790:	cmp	r2, #0
   16794:	bne	16788 <__assert_fail@plt+0x54b8>
   16798:	cmp	r4, r1
   1679c:	movcc	r4, r1
   167a0:	add	ip, ip, #8
   167a4:	cmp	ip, lr
   167a8:	bcc	1676c <__assert_fail@plt+0x549c>
   167ac:	ldr	r2, [pc, #116]	; 16828 <__assert_fail@plt+0x5558>
   167b0:	mov	r1, #1
   167b4:	mov	r0, r5
   167b8:	bl	111bc <__fprintf_chk@plt>
   167bc:	mov	r3, r6
   167c0:	ldr	r2, [pc, #100]	; 1682c <__assert_fail@plt+0x555c>
   167c4:	mov	r1, #1
   167c8:	mov	r0, r5
   167cc:	bl	111bc <__fprintf_chk@plt>
   167d0:	vmov	s15, r7
   167d4:	vldr	d5, [pc, #68]	; 16820 <__assert_fail@plt+0x5550>
   167d8:	mov	r3, r7
   167dc:	ldr	r2, [pc, #76]	; 16830 <__assert_fail@plt+0x5560>
   167e0:	vcvt.f64.u32	d6, s15
   167e4:	vmov	s15, r6
   167e8:	mov	r1, #1
   167ec:	mov	r0, r5
   167f0:	vcvt.f64.u32	d7, s15
   167f4:	vmul.f64	d6, d6, d5
   167f8:	vdiv.f64	d5, d6, d7
   167fc:	vstr	d5, [sp]
   16800:	bl	111bc <__fprintf_chk@plt>
   16804:	mov	r3, r4
   16808:	mov	r0, r5
   1680c:	ldr	r2, [pc, #32]	; 16834 <__assert_fail@plt+0x5564>
   16810:	mov	r1, #1
   16814:	add	sp, sp, #12
   16818:	pop	{r4, r5, r6, r7, lr}
   1681c:	b	111bc <__fprintf_chk@plt>
   16820:	andeq	r0, r0, r0
   16824:	subsmi	r0, r9, r0
   16828:			; <UNDEFINED> instruction: 0x0001eeb8
   1682c:	ldrdeq	lr, [r1], -r0
   16830:	andeq	lr, r1, r8, ror #29
   16834:	andeq	lr, r1, ip, lsl #30
   16838:	push	{r4, r5, r6, lr}
   1683c:	mov	r5, r1
   16840:	ldr	r3, [r0, #24]
   16844:	mov	r6, r0
   16848:	ldr	r1, [r0, #8]
   1684c:	mov	r0, r5
   16850:	blx	r3
   16854:	ldr	r3, [r6, #8]
   16858:	cmp	r0, r3
   1685c:	bcs	168bc <__assert_fail@plt+0x55ec>
   16860:	ldr	r3, [r6]
   16864:	add	r4, r3, r0, lsl #3
   16868:	ldr	r1, [r3, r0, lsl #3]
   1686c:	cmp	r1, #0
   16870:	bne	1687c <__assert_fail@plt+0x55ac>
   16874:	b	168a4 <__assert_fail@plt+0x55d4>
   16878:	ldr	r1, [r4]
   1687c:	cmp	r5, r1
   16880:	beq	168ac <__assert_fail@plt+0x55dc>
   16884:	ldr	r3, [r6, #28]
   16888:	mov	r0, r5
   1688c:	blx	r3
   16890:	cmp	r0, #0
   16894:	bne	168b4 <__assert_fail@plt+0x55e4>
   16898:	ldr	r4, [r4, #4]
   1689c:	cmp	r4, #0
   168a0:	bne	16878 <__assert_fail@plt+0x55a8>
   168a4:	mov	r0, #0
   168a8:	pop	{r4, r5, r6, pc}
   168ac:	mov	r0, r5
   168b0:	pop	{r4, r5, r6, pc}
   168b4:	ldr	r0, [r4]
   168b8:	pop	{r4, r5, r6, pc}
   168bc:	bl	11294 <abort@plt>
   168c0:	ldr	r3, [r0, #16]
   168c4:	cmp	r3, #0
   168c8:	beq	168fc <__assert_fail@plt+0x562c>
   168cc:	ldr	r3, [r0]
   168d0:	ldr	r2, [r0, #4]
   168d4:	cmp	r3, r2
   168d8:	bcc	168ec <__assert_fail@plt+0x561c>
   168dc:	b	16904 <__assert_fail@plt+0x5634>
   168e0:	add	r3, r3, #8
   168e4:	cmp	r3, r2
   168e8:	bcs	16904 <__assert_fail@plt+0x5634>
   168ec:	ldr	r0, [r3]
   168f0:	cmp	r0, #0
   168f4:	beq	168e0 <__assert_fail@plt+0x5610>
   168f8:	bx	lr
   168fc:	mov	r0, r3
   16900:	bx	lr
   16904:	push	{r4, lr}
   16908:	bl	11294 <abort@plt>
   1690c:	push	{r4, r5, r6, lr}
   16910:	mov	r4, r1
   16914:	ldr	r3, [r0, #24]
   16918:	mov	r5, r0
   1691c:	ldr	r1, [r0, #8]
   16920:	mov	r0, r4
   16924:	blx	r3
   16928:	ldr	r3, [r5, #8]
   1692c:	cmp	r0, r3
   16930:	bcs	16994 <__assert_fail@plt+0x56c4>
   16934:	ldr	r3, [r5]
   16938:	add	r0, r3, r0, lsl #3
   1693c:	mov	r3, r0
   16940:	b	1694c <__assert_fail@plt+0x567c>
   16944:	cmp	r3, #0
   16948:	beq	16960 <__assert_fail@plt+0x5690>
   1694c:	ldm	r3, {r2, r3}
   16950:	cmp	r4, r2
   16954:	bne	16944 <__assert_fail@plt+0x5674>
   16958:	cmp	r3, #0
   1695c:	bne	1698c <__assert_fail@plt+0x56bc>
   16960:	ldr	r2, [r5, #4]
   16964:	mov	r3, r0
   16968:	b	16978 <__assert_fail@plt+0x56a8>
   1696c:	ldr	r0, [r3]
   16970:	cmp	r0, #0
   16974:	popne	{r4, r5, r6, pc}
   16978:	add	r3, r3, #8
   1697c:	cmp	r3, r2
   16980:	bcc	1696c <__assert_fail@plt+0x569c>
   16984:	mov	r0, #0
   16988:	pop	{r4, r5, r6, pc}
   1698c:	ldr	r0, [r3]
   16990:	pop	{r4, r5, r6, pc}
   16994:	bl	11294 <abort@plt>
   16998:	push	{r4, r5, r6, lr}
   1699c:	mov	r5, r0
   169a0:	ldr	r4, [r0]
   169a4:	ldr	r0, [r0, #4]
   169a8:	cmp	r4, r0
   169ac:	bcs	16a28 <__assert_fail@plt+0x5758>
   169b0:	add	r4, r4, #8
   169b4:	mov	ip, #0
   169b8:	ldr	r3, [r4, #-8]
   169bc:	mov	r6, r4
   169c0:	cmp	r3, #0
   169c4:	beq	16a10 <__assert_fail@plt+0x5740>
   169c8:	cmp	r2, ip
   169cc:	bls	16a1c <__assert_fail@plt+0x574c>
   169d0:	str	r3, [r1, ip, lsl #2]
   169d4:	ldr	r3, [r4, #-4]
   169d8:	add	r0, ip, #1
   169dc:	cmp	r3, #0
   169e0:	add	ip, r1, ip, lsl #2
   169e4:	beq	16a08 <__assert_fail@plt+0x5738>
   169e8:	cmp	r2, r0
   169ec:	beq	16a24 <__assert_fail@plt+0x5754>
   169f0:	ldr	lr, [r3]
   169f4:	add	r0, r0, #1
   169f8:	str	lr, [ip, #4]!
   169fc:	ldr	r3, [r3, #4]
   16a00:	cmp	r3, #0
   16a04:	bne	169e8 <__assert_fail@plt+0x5718>
   16a08:	mov	ip, r0
   16a0c:	ldr	r0, [r5, #4]
   16a10:	cmp	r0, r6
   16a14:	add	r4, r4, #8
   16a18:	bhi	169b8 <__assert_fail@plt+0x56e8>
   16a1c:	mov	r0, ip
   16a20:	pop	{r4, r5, r6, pc}
   16a24:	pop	{r4, r5, r6, pc}
   16a28:	mov	r0, #0
   16a2c:	pop	{r4, r5, r6, pc}
   16a30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16a34:	ldr	r3, [r0, #4]
   16a38:	ldr	r8, [r0]
   16a3c:	cmp	r8, r3
   16a40:	bcs	16aa4 <__assert_fail@plt+0x57d4>
   16a44:	mov	r7, r2
   16a48:	mov	r6, r1
   16a4c:	mov	r9, r0
   16a50:	mov	r5, #0
   16a54:	ldr	r0, [r8]
   16a58:	cmp	r0, #0
   16a5c:	beq	16a90 <__assert_fail@plt+0x57c0>
   16a60:	mov	r4, r8
   16a64:	b	16a6c <__assert_fail@plt+0x579c>
   16a68:	ldr	r0, [r4]
   16a6c:	mov	r1, r7
   16a70:	blx	r6
   16a74:	cmp	r0, #0
   16a78:	beq	16a9c <__assert_fail@plt+0x57cc>
   16a7c:	ldr	r4, [r4, #4]
   16a80:	add	r5, r5, #1
   16a84:	cmp	r4, #0
   16a88:	bne	16a68 <__assert_fail@plt+0x5798>
   16a8c:	ldr	r3, [r9, #4]
   16a90:	add	r8, r8, #8
   16a94:	cmp	r3, r8
   16a98:	bhi	16a54 <__assert_fail@plt+0x5784>
   16a9c:	mov	r0, r5
   16aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16aa4:	mov	r5, #0
   16aa8:	b	16a9c <__assert_fail@plt+0x57cc>
   16aac:	push	{r4, r5, r6, lr}
   16ab0:	mov	r4, r0
   16ab4:	ldrb	r0, [r0]
   16ab8:	cmp	r0, #0
   16abc:	beq	16aec <__assert_fail@plt+0x581c>
   16ac0:	mov	r5, r1
   16ac4:	mov	r1, #0
   16ac8:	rsb	r1, r1, r1, lsl #5
   16acc:	add	r0, r1, r0
   16ad0:	mov	r1, r5
   16ad4:	bl	1d8e4 <__assert_fail@plt+0xc614>
   16ad8:	ldrb	r0, [r4, #1]!
   16adc:	cmp	r0, #0
   16ae0:	bne	16ac8 <__assert_fail@plt+0x57f8>
   16ae4:	mov	r0, r1
   16ae8:	pop	{r4, r5, r6, pc}
   16aec:	mov	r1, r0
   16af0:	b	16ae4 <__assert_fail@plt+0x5814>
   16af4:	push	{lr}		; (str lr, [sp, #-4]!)
   16af8:	mov	ip, r0
   16afc:	ldr	lr, [pc, #16]	; 16b14 <__assert_fail@plt+0x5844>
   16b00:	ldm	lr!, {r0, r1, r2, r3}
   16b04:	ldr	lr, [lr]
   16b08:	stmia	ip!, {r0, r1, r2, r3}
   16b0c:	str	lr, [ip]
   16b10:	pop	{pc}		; (ldr pc, [sp], #4)
   16b14:	andeq	lr, r1, r4, lsr #29
   16b18:	cmp	r2, #0
   16b1c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b20:	mov	r4, r0
   16b24:	ldr	sl, [pc, #548]	; 16d50 <__assert_fail@plt+0x5a80>
   16b28:	mov	r0, #40	; 0x28
   16b2c:	movne	sl, r2
   16b30:	cmp	r3, #0
   16b34:	ldr	fp, [pc, #536]	; 16d54 <__assert_fail@plt+0x5a84>
   16b38:	mov	r5, r1
   16b3c:	movne	fp, r3
   16b40:	bl	1d084 <__assert_fail@plt+0xbdb4>
   16b44:	subs	r8, r0, #0
   16b48:	beq	16be0 <__assert_fail@plt+0x5910>
   16b4c:	cmp	r5, #0
   16b50:	ldr	r3, [pc, #512]	; 16d58 <__assert_fail@plt+0x5a88>
   16b54:	beq	16be8 <__assert_fail@plt+0x5918>
   16b58:	cmp	r5, r3
   16b5c:	str	r5, [r8, #20]
   16b60:	beq	16bec <__assert_fail@plt+0x591c>
   16b64:	vldr	s15, [r5, #8]
   16b68:	vldr	s14, [pc, #456]	; 16d38 <__assert_fail@plt+0x5a68>
   16b6c:	vcmpe.f32	s15, s14
   16b70:	vmrs	APSR_nzcv, fpscr
   16b74:	ble	16bd0 <__assert_fail@plt+0x5900>
   16b78:	vldr	s13, [pc, #444]	; 16d3c <__assert_fail@plt+0x5a6c>
   16b7c:	vcmpe.f32	s15, s13
   16b80:	vmrs	APSR_nzcv, fpscr
   16b84:	bpl	16bd0 <__assert_fail@plt+0x5900>
   16b88:	vldr	s13, [pc, #432]	; 16d40 <__assert_fail@plt+0x5a70>
   16b8c:	vldr	s12, [r5, #12]
   16b90:	vcmpe.f32	s12, s13
   16b94:	vmrs	APSR_nzcv, fpscr
   16b98:	ble	16bd0 <__assert_fail@plt+0x5900>
   16b9c:	vldr	s13, [r5]
   16ba0:	vcmpe.f32	s13, #0.0
   16ba4:	vmrs	APSR_nzcv, fpscr
   16ba8:	blt	16bd0 <__assert_fail@plt+0x5900>
   16bac:	vadd.f32	s14, s13, s14
   16bb0:	vldr	s13, [r5, #4]
   16bb4:	vcmpe.f32	s14, s13
   16bb8:	vmrs	APSR_nzcv, fpscr
   16bbc:	bpl	16bd0 <__assert_fail@plt+0x5900>
   16bc0:	vldr	s12, [pc, #380]	; 16d44 <__assert_fail@plt+0x5a74>
   16bc4:	vcmpe.f32	s13, s12
   16bc8:	vmrs	APSR_nzcv, fpscr
   16bcc:	bls	16d1c <__assert_fail@plt+0x5a4c>
   16bd0:	str	r3, [r8, #20]
   16bd4:	mov	r0, r8
   16bd8:	bl	13bb0 <__assert_fail@plt+0x28e0>
   16bdc:	mov	r8, #0
   16be0:	mov	r0, r8
   16be4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16be8:	str	r3, [r8, #20]
   16bec:	vldr	s15, [pc, #340]	; 16d48 <__assert_fail@plt+0x5a78>
   16bf0:	vmov	s14, r4
   16bf4:	vldr	s13, [pc, #336]	; 16d4c <__assert_fail@plt+0x5a7c>
   16bf8:	vcvt.f32.u32	s12, s14
   16bfc:	vdiv.f32	s14, s12, s15
   16c00:	vcmpe.f32	s14, s13
   16c04:	vmrs	APSR_nzcv, fpscr
   16c08:	bge	16d08 <__assert_fail@plt+0x5a38>
   16c0c:	vcvt.u32.f32	s15, s14
   16c10:	vmov	r4, s15
   16c14:	cmp	r4, #10
   16c18:	movcc	r4, #10
   16c1c:	orr	r7, r4, #1
   16c20:	cmn	r7, #1
   16c24:	ldrne	r9, [pc, #304]	; 16d5c <__assert_fail@plt+0x5a8c>
   16c28:	beq	16ca0 <__assert_fail@plt+0x59d0>
   16c2c:	cmp	r7, #9
   16c30:	bls	16d14 <__assert_fail@plt+0x5a44>
   16c34:	umull	r2, r3, r9, r7
   16c38:	lsr	r3, r3, #1
   16c3c:	add	r3, r3, r3, lsl #1
   16c40:	cmp	r7, r3
   16c44:	beq	16c94 <__assert_fail@plt+0x59c4>
   16c48:	mov	r6, #16
   16c4c:	mov	r5, #9
   16c50:	mov	r4, #3
   16c54:	b	16c68 <__assert_fail@plt+0x5998>
   16c58:	bl	1d8e4 <__assert_fail@plt+0xc614>
   16c5c:	add	r6, r6, #8
   16c60:	cmp	r1, #0
   16c64:	beq	16c94 <__assert_fail@plt+0x59c4>
   16c68:	add	r5, r5, r6
   16c6c:	add	r4, r4, #2
   16c70:	cmp	r5, r7
   16c74:	mov	r0, r7
   16c78:	mov	r1, r4
   16c7c:	bcc	16c58 <__assert_fail@plt+0x5988>
   16c80:	mov	r1, r4
   16c84:	mov	r0, r7
   16c88:	bl	1d8e4 <__assert_fail@plt+0xc614>
   16c8c:	cmp	r1, #0
   16c90:	bne	16ca0 <__assert_fail@plt+0x59d0>
   16c94:	add	r7, r7, #2
   16c98:	cmn	r7, #1
   16c9c:	bne	16c2c <__assert_fail@plt+0x595c>
   16ca0:	lsrs	r3, r7, #30
   16ca4:	movne	r4, #1
   16ca8:	moveq	r4, #0
   16cac:	tst	r7, #536870912	; 0x20000000
   16cb0:	bne	16d08 <__assert_fail@plt+0x5a38>
   16cb4:	cmp	r4, #0
   16cb8:	bne	16d08 <__assert_fail@plt+0x5a38>
   16cbc:	str	r7, [r8, #8]
   16cc0:	mov	r0, r7
   16cc4:	mov	r1, #8
   16cc8:	bl	1d03c <__assert_fail@plt+0xbd6c>
   16ccc:	cmp	r0, #0
   16cd0:	str	r0, [r8]
   16cd4:	beq	16bd4 <__assert_fail@plt+0x5904>
   16cd8:	ldr	r3, [r8, #8]
   16cdc:	str	r4, [r8, #12]
   16ce0:	str	r4, [r8, #16]
   16ce4:	add	r0, r0, r3, lsl #3
   16ce8:	ldr	r3, [sp, #40]	; 0x28
   16cec:	str	r0, [r8, #4]
   16cf0:	str	sl, [r8, #24]
   16cf4:	str	fp, [r8, #28]
   16cf8:	str	r3, [r8, #32]
   16cfc:	str	r4, [r8, #36]	; 0x24
   16d00:	mov	r0, r8
   16d04:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d08:	mov	r3, #0
   16d0c:	str	r3, [r8, #8]
   16d10:	b	16bd4 <__assert_fail@plt+0x5904>
   16d14:	mov	r4, #3
   16d18:	b	16c80 <__assert_fail@plt+0x59b0>
   16d1c:	vcmpe.f32	s15, s14
   16d20:	vmrs	APSR_nzcv, fpscr
   16d24:	ble	16bd0 <__assert_fail@plt+0x5900>
   16d28:	ldrb	r3, [r5, #16]
   16d2c:	cmp	r3, #0
   16d30:	bne	16c14 <__assert_fail@plt+0x5944>
   16d34:	b	16bf0 <__assert_fail@plt+0x5920>
   16d38:	stclcc	12, cr12, [ip, #820]	; 0x334
   16d3c:	svccc	0x00666666
   16d40:	svccc	0x008ccccd
   16d44:	svccc	0x00800000
   16d48:	svccc	0x004ccccd
   16d4c:	svcmi	0x00800000
   16d50:	muleq	r1, r8, r3
   16d54:	andeq	r6, r1, ip, lsr #7
   16d58:	andeq	lr, r1, r4, lsr #29
   16d5c:	bge	feac1810 <optarg@@GLIBC_2.4+0xfea91678>
   16d60:	push	{r4, r5, r6, r7, r8, lr}
   16d64:	mov	r5, r0
   16d68:	ldr	r7, [r0]
   16d6c:	ldr	r3, [r0, #4]
   16d70:	cmp	r7, r3
   16d74:	addcc	r7, r7, #8
   16d78:	movcc	r6, #0
   16d7c:	bcs	16df8 <__assert_fail@plt+0x5b28>
   16d80:	ldr	r2, [r7, #-8]
   16d84:	mov	r8, r7
   16d88:	cmp	r2, #0
   16d8c:	beq	16dec <__assert_fail@plt+0x5b1c>
   16d90:	ldr	r4, [r7, #-4]
   16d94:	ldr	r2, [r5, #32]
   16d98:	cmp	r4, #0
   16d9c:	beq	16dd0 <__assert_fail@plt+0x5b00>
   16da0:	cmp	r2, #0
   16da4:	beq	16db4 <__assert_fail@plt+0x5ae4>
   16da8:	ldr	r0, [r4]
   16dac:	blx	r2
   16db0:	ldr	r2, [r5, #32]
   16db4:	ldr	r3, [r4, #4]
   16db8:	ldr	r1, [r5, #36]	; 0x24
   16dbc:	str	r6, [r4]
   16dc0:	str	r1, [r4, #4]
   16dc4:	str	r4, [r5, #36]	; 0x24
   16dc8:	subs	r4, r3, #0
   16dcc:	bne	16da0 <__assert_fail@plt+0x5ad0>
   16dd0:	cmp	r2, #0
   16dd4:	beq	16de0 <__assert_fail@plt+0x5b10>
   16dd8:	ldr	r0, [r7, #-8]
   16ddc:	blx	r2
   16de0:	str	r6, [r7, #-8]
   16de4:	str	r6, [r7, #-4]
   16de8:	ldr	r3, [r5, #4]
   16dec:	cmp	r3, r8
   16df0:	add	r7, r7, #8
   16df4:	bhi	16d80 <__assert_fail@plt+0x5ab0>
   16df8:	mov	r3, #0
   16dfc:	str	r3, [r5, #12]
   16e00:	str	r3, [r5, #16]
   16e04:	pop	{r4, r5, r6, r7, r8, pc}
   16e08:	ldr	r3, [r0, #32]
   16e0c:	push	{r4, r5, r6, lr}
   16e10:	cmp	r3, #0
   16e14:	mov	r5, r0
   16e18:	beq	16e78 <__assert_fail@plt+0x5ba8>
   16e1c:	ldr	r3, [r0, #16]
   16e20:	cmp	r3, #0
   16e24:	beq	16e78 <__assert_fail@plt+0x5ba8>
   16e28:	ldr	r6, [r0]
   16e2c:	ldr	r3, [r0, #4]
   16e30:	cmp	r6, r3
   16e34:	bcs	16eb4 <__assert_fail@plt+0x5be4>
   16e38:	ldr	r0, [r6]
   16e3c:	cmp	r0, #0
   16e40:	beq	16e68 <__assert_fail@plt+0x5b98>
   16e44:	mov	r4, r6
   16e48:	b	16e50 <__assert_fail@plt+0x5b80>
   16e4c:	ldr	r0, [r4]
   16e50:	ldr	r3, [r5, #32]
   16e54:	blx	r3
   16e58:	ldr	r4, [r4, #4]
   16e5c:	cmp	r4, #0
   16e60:	bne	16e4c <__assert_fail@plt+0x5b7c>
   16e64:	ldr	r3, [r5, #4]
   16e68:	add	r6, r6, #8
   16e6c:	cmp	r3, r6
   16e70:	bhi	16e38 <__assert_fail@plt+0x5b68>
   16e74:	b	16e7c <__assert_fail@plt+0x5bac>
   16e78:	ldr	r3, [r5, #4]
   16e7c:	ldr	r6, [r5]
   16e80:	cmp	r6, r3
   16e84:	bcs	16eb4 <__assert_fail@plt+0x5be4>
   16e88:	ldr	r0, [r6, #4]
   16e8c:	cmp	r0, #0
   16e90:	beq	16ea8 <__assert_fail@plt+0x5bd8>
   16e94:	ldr	r4, [r0, #4]
   16e98:	bl	13bb0 <__assert_fail@plt+0x28e0>
   16e9c:	subs	r0, r4, #0
   16ea0:	bne	16e94 <__assert_fail@plt+0x5bc4>
   16ea4:	ldr	r3, [r5, #4]
   16ea8:	add	r6, r6, #8
   16eac:	cmp	r3, r6
   16eb0:	bhi	16e88 <__assert_fail@plt+0x5bb8>
   16eb4:	ldr	r0, [r5, #36]	; 0x24
   16eb8:	cmp	r0, #0
   16ebc:	beq	16ed0 <__assert_fail@plt+0x5c00>
   16ec0:	ldr	r4, [r0, #4]
   16ec4:	bl	13bb0 <__assert_fail@plt+0x28e0>
   16ec8:	subs	r0, r4, #0
   16ecc:	bne	16ec0 <__assert_fail@plt+0x5bf0>
   16ed0:	ldr	r0, [r5]
   16ed4:	bl	13bb0 <__assert_fail@plt+0x28e0>
   16ed8:	mov	r0, r5
   16edc:	pop	{r4, r5, r6, lr}
   16ee0:	b	13bb0 <__assert_fail@plt+0x28e0>
   16ee4:	ldr	r3, [r0, #20]
   16ee8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16eec:	mov	r8, r0
   16ef0:	ldrb	r2, [r3, #16]
   16ef4:	sub	sp, sp, #40	; 0x28
   16ef8:	cmp	r2, #0
   16efc:	bne	16f28 <__assert_fail@plt+0x5c58>
   16f00:	vmov	s15, r1
   16f04:	vldr	s13, [r3, #8]
   16f08:	vldr	s14, [pc, #648]	; 17198 <__assert_fail@plt+0x5ec8>
   16f0c:	vcvt.f32.u32	s12, s15
   16f10:	vdiv.f32	s15, s12, s13
   16f14:	vcmpe.f32	s15, s14
   16f18:	vmrs	APSR_nzcv, fpscr
   16f1c:	bge	17150 <__assert_fail@plt+0x5e80>
   16f20:	vcvt.u32.f32	s15, s15
   16f24:	vmov	r1, s15
   16f28:	cmp	r1, #10
   16f2c:	movcc	r1, #10
   16f30:	orr	r7, r1, #1
   16f34:	cmn	r7, #1
   16f38:	ldrne	r9, [pc, #604]	; 1719c <__assert_fail@plt+0x5ecc>
   16f3c:	beq	16fb4 <__assert_fail@plt+0x5ce4>
   16f40:	cmp	r7, #9
   16f44:	bls	17160 <__assert_fail@plt+0x5e90>
   16f48:	umull	r2, r3, r9, r7
   16f4c:	lsr	r3, r3, #1
   16f50:	add	r3, r3, r3, lsl #1
   16f54:	cmp	r7, r3
   16f58:	beq	16fa8 <__assert_fail@plt+0x5cd8>
   16f5c:	mov	r6, #16
   16f60:	mov	r5, #9
   16f64:	mov	r4, #3
   16f68:	b	16f84 <__assert_fail@plt+0x5cb4>
   16f6c:	mov	r1, r4
   16f70:	mov	r0, r7
   16f74:	bl	1d8e4 <__assert_fail@plt+0xc614>
   16f78:	add	r6, r6, #8
   16f7c:	cmp	r1, #0
   16f80:	beq	16fa8 <__assert_fail@plt+0x5cd8>
   16f84:	add	r5, r5, r6
   16f88:	cmp	r5, r7
   16f8c:	add	r4, r4, #2
   16f90:	bcc	16f6c <__assert_fail@plt+0x5c9c>
   16f94:	mov	r1, r4
   16f98:	mov	r0, r7
   16f9c:	bl	1d8e4 <__assert_fail@plt+0xc614>
   16fa0:	cmp	r1, #0
   16fa4:	bne	16fb4 <__assert_fail@plt+0x5ce4>
   16fa8:	add	r7, r7, #2
   16fac:	cmn	r7, #1
   16fb0:	bne	16f40 <__assert_fail@plt+0x5c70>
   16fb4:	lsrs	r3, r7, #30
   16fb8:	movne	r4, #1
   16fbc:	moveq	r4, #0
   16fc0:	tst	r7, #536870912	; 0x20000000
   16fc4:	bne	17150 <__assert_fail@plt+0x5e80>
   16fc8:	cmp	r4, #0
   16fcc:	bne	17150 <__assert_fail@plt+0x5e80>
   16fd0:	ldr	r3, [r8, #8]
   16fd4:	cmp	r3, r7
   16fd8:	beq	17140 <__assert_fail@plt+0x5e70>
   16fdc:	mov	r1, #8
   16fe0:	mov	r0, r7
   16fe4:	bl	1d03c <__assert_fail@plt+0xbd6c>
   16fe8:	cmp	r0, #0
   16fec:	str	r0, [sp]
   16ff0:	beq	17150 <__assert_fail@plt+0x5e80>
   16ff4:	ldr	r1, [r8, #24]
   16ff8:	ldr	r5, [r8, #20]
   16ffc:	ldr	lr, [r8, #28]
   17000:	ldr	ip, [r8, #32]
   17004:	add	r0, r0, r7, lsl #3
   17008:	ldr	r3, [r8, #36]	; 0x24
   1700c:	str	r0, [sp, #4]
   17010:	str	r1, [sp, #24]
   17014:	mov	r2, r4
   17018:	mov	r0, sp
   1701c:	mov	r1, r8
   17020:	str	r7, [sp, #8]
   17024:	str	r4, [sp, #12]
   17028:	str	r4, [sp, #16]
   1702c:	str	r5, [sp, #20]
   17030:	str	lr, [sp, #28]
   17034:	str	ip, [sp, #32]
   17038:	str	r3, [sp, #36]	; 0x24
   1703c:	bl	164dc <__assert_fail@plt+0x520c>
   17040:	subs	r9, r0, #0
   17044:	bne	17168 <__assert_fail@plt+0x5e98>
   17048:	ldr	r5, [sp]
   1704c:	ldr	r2, [sp, #4]
   17050:	ldr	r3, [sp, #36]	; 0x24
   17054:	cmp	r5, r2
   17058:	str	r3, [r8, #36]	; 0x24
   1705c:	addcc	r5, r5, #8
   17060:	movcc	r7, r9
   17064:	bcs	17114 <__assert_fail@plt+0x5e44>
   17068:	ldr	r3, [r5, #-8]
   1706c:	mov	r6, r5
   17070:	cmp	r3, #0
   17074:	beq	17108 <__assert_fail@plt+0x5e38>
   17078:	ldr	r4, [r5, #-4]
   1707c:	cmp	r4, #0
   17080:	beq	17104 <__assert_fail@plt+0x5e34>
   17084:	ldr	r1, [r8, #8]
   17088:	b	170a4 <__assert_fail@plt+0x5dd4>
   1708c:	ldr	r3, [ip, #4]
   17090:	cmp	r2, #0
   17094:	str	r3, [r4, #4]
   17098:	str	r4, [ip, #4]
   1709c:	beq	17100 <__assert_fail@plt+0x5e30>
   170a0:	mov	r4, r2
   170a4:	ldr	sl, [r4]
   170a8:	ldr	r3, [r8, #24]
   170ac:	mov	r0, sl
   170b0:	blx	r3
   170b4:	ldr	r1, [r8, #8]
   170b8:	cmp	r0, r1
   170bc:	bcs	17194 <__assert_fail@plt+0x5ec4>
   170c0:	ldr	r3, [r8]
   170c4:	ldr	r2, [r4, #4]
   170c8:	add	ip, r3, r0, lsl #3
   170cc:	ldr	lr, [r3, r0, lsl #3]
   170d0:	cmp	lr, #0
   170d4:	bne	1708c <__assert_fail@plt+0x5dbc>
   170d8:	ldr	ip, [r8, #12]
   170dc:	str	sl, [r3, r0, lsl #3]
   170e0:	add	r3, ip, #1
   170e4:	str	r3, [r8, #12]
   170e8:	str	lr, [r4]
   170ec:	ldr	r3, [r8, #36]	; 0x24
   170f0:	cmp	r2, #0
   170f4:	str	r3, [r4, #4]
   170f8:	str	r4, [r8, #36]	; 0x24
   170fc:	bne	170a0 <__assert_fail@plt+0x5dd0>
   17100:	ldr	r2, [sp, #4]
   17104:	str	r7, [r5, #-4]
   17108:	cmp	r6, r2
   1710c:	add	r5, r5, #8
   17110:	bcc	17068 <__assert_fail@plt+0x5d98>
   17114:	mov	r1, sp
   17118:	mov	r0, r8
   1711c:	mov	r2, #0
   17120:	bl	164dc <__assert_fail@plt+0x520c>
   17124:	cmp	r0, #0
   17128:	beq	17194 <__assert_fail@plt+0x5ec4>
   1712c:	ldr	r0, [sp]
   17130:	bl	13bb0 <__assert_fail@plt+0x28e0>
   17134:	mov	r0, r9
   17138:	add	sp, sp, #40	; 0x28
   1713c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17140:	mov	r9, #1
   17144:	mov	r0, r9
   17148:	add	sp, sp, #40	; 0x28
   1714c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17150:	mov	r9, #0
   17154:	mov	r0, r9
   17158:	add	sp, sp, #40	; 0x28
   1715c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17160:	mov	r4, #3
   17164:	b	16f94 <__assert_fail@plt+0x5cc4>
   17168:	ldr	r0, [r8]
   1716c:	bl	13bb0 <__assert_fail@plt+0x28e0>
   17170:	ldmib	sp, {r0, r1, r2}
   17174:	ldr	ip, [sp]
   17178:	ldr	r3, [sp, #36]	; 0x24
   1717c:	stmib	r8, {r0, r1, r2}
   17180:	mov	r0, r9
   17184:	str	ip, [r8]
   17188:	str	r3, [r8, #36]	; 0x24
   1718c:	add	sp, sp, #40	; 0x28
   17190:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17194:	bl	11294 <abort@plt>
   17198:	svcmi	0x00800000
   1719c:	bge	feac1c50 <optarg@@GLIBC_2.4+0xfea91ab8>
   171a0:	push	{r4, r5, r6, r7, r8, r9, lr}
   171a4:	subs	r5, r1, #0
   171a8:	sub	sp, sp, #12
   171ac:	beq	173c8 <__assert_fail@plt+0x60f8>
   171b0:	ldr	r3, [r0, #24]
   171b4:	mov	r6, r0
   171b8:	ldr	r1, [r0, #8]
   171bc:	mov	r0, r5
   171c0:	mov	r7, r2
   171c4:	blx	r3
   171c8:	ldr	r3, [r6, #8]
   171cc:	cmp	r0, r3
   171d0:	mov	r8, r0
   171d4:	bcs	173c8 <__assert_fail@plt+0x60f8>
   171d8:	ldr	r9, [r6]
   171dc:	add	r4, r9, r0, lsl #3
   171e0:	ldr	r1, [r9, r0, lsl #3]
   171e4:	str	r4, [sp, #4]
   171e8:	cmp	r1, #0
   171ec:	beq	173cc <__assert_fail@plt+0x60fc>
   171f0:	cmp	r5, r1
   171f4:	beq	1724c <__assert_fail@plt+0x5f7c>
   171f8:	ldr	r3, [r6, #28]
   171fc:	mov	r0, r5
   17200:	blx	r3
   17204:	cmp	r0, #0
   17208:	bne	17260 <__assert_fail@plt+0x5f90>
   1720c:	ldr	r3, [r4, #4]
   17210:	cmp	r3, #0
   17214:	bne	17240 <__assert_fail@plt+0x5f70>
   17218:	b	1726c <__assert_fail@plt+0x5f9c>
   1721c:	ldr	r3, [r6, #28]
   17220:	mov	r0, r5
   17224:	blx	r3
   17228:	cmp	r0, #0
   1722c:	bne	172e0 <__assert_fail@plt+0x6010>
   17230:	ldr	r4, [r4, #4]
   17234:	ldr	r3, [r4, #4]
   17238:	cmp	r3, #0
   1723c:	beq	1726c <__assert_fail@plt+0x5f9c>
   17240:	ldr	r1, [r3]
   17244:	cmp	r5, r1
   17248:	bne	1721c <__assert_fail@plt+0x5f4c>
   1724c:	mov	r0, #0
   17250:	cmp	r7, #0
   17254:	strne	r1, [r7]
   17258:	add	sp, sp, #12
   1725c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17260:	ldr	r1, [r9, r8, lsl #3]
   17264:	cmp	r1, #0
   17268:	bne	1724c <__assert_fail@plt+0x5f7c>
   1726c:	vldr	s15, [r6, #8]
   17270:	ldr	r3, [r6, #20]
   17274:	vldr	s14, [r6, #12]
   17278:	vcvt.f32.u32	s15, s15
   1727c:	vldr	s13, [r3, #8]
   17280:	vcvt.f32.u32	s14, s14
   17284:	vmul.f32	s12, s13, s15
   17288:	vcmpe.f32	s14, s12
   1728c:	vmrs	APSR_nzcv, fpscr
   17290:	bgt	172ec <__assert_fail@plt+0x601c>
   17294:	ldr	r4, [sp, #4]
   17298:	ldr	r3, [r4]
   1729c:	cmp	r3, #0
   172a0:	beq	17430 <__assert_fail@plt+0x6160>
   172a4:	ldr	r3, [r6, #36]	; 0x24
   172a8:	cmp	r3, #0
   172ac:	beq	17418 <__assert_fail@plt+0x6148>
   172b0:	ldr	r2, [r3, #4]
   172b4:	str	r2, [r6, #36]	; 0x24
   172b8:	ldr	r2, [r6, #16]
   172bc:	ldr	r1, [r4, #4]
   172c0:	add	r2, r2, #1
   172c4:	str	r5, [r3]
   172c8:	str	r1, [r3, #4]
   172cc:	mov	r0, #1
   172d0:	str	r3, [r4, #4]
   172d4:	str	r2, [r6, #16]
   172d8:	add	sp, sp, #12
   172dc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   172e0:	ldr	r3, [r4, #4]
   172e4:	ldr	r1, [r3]
   172e8:	b	17264 <__assert_fail@plt+0x5f94>
   172ec:	ldr	r2, [pc, #392]	; 1747c <__assert_fail@plt+0x61ac>
   172f0:	cmp	r3, r2
   172f4:	beq	17378 <__assert_fail@plt+0x60a8>
   172f8:	vldr	s12, [pc, #352]	; 17460 <__assert_fail@plt+0x6190>
   172fc:	vcmpe.f32	s13, s12
   17300:	vmrs	APSR_nzcv, fpscr
   17304:	ble	17360 <__assert_fail@plt+0x6090>
   17308:	vldr	s11, [pc, #340]	; 17464 <__assert_fail@plt+0x6194>
   1730c:	vcmpe.f32	s13, s11
   17310:	vmrs	APSR_nzcv, fpscr
   17314:	bpl	17360 <__assert_fail@plt+0x6090>
   17318:	vldr	s11, [r3, #12]
   1731c:	vldr	s10, [pc, #324]	; 17468 <__assert_fail@plt+0x6198>
   17320:	vcmpe.f32	s11, s10
   17324:	vmrs	APSR_nzcv, fpscr
   17328:	ble	17360 <__assert_fail@plt+0x6090>
   1732c:	vldr	s10, [r3]
   17330:	vcmpe.f32	s10, #0.0
   17334:	vmrs	APSR_nzcv, fpscr
   17338:	blt	17360 <__assert_fail@plt+0x6090>
   1733c:	vadd.f32	s12, s10, s12
   17340:	vldr	s10, [r3, #4]
   17344:	vcmpe.f32	s12, s10
   17348:	vmrs	APSR_nzcv, fpscr
   1734c:	bpl	17360 <__assert_fail@plt+0x6090>
   17350:	vldr	s9, [pc, #276]	; 1746c <__assert_fail@plt+0x619c>
   17354:	vcmpe.f32	s10, s9
   17358:	vmrs	APSR_nzcv, fpscr
   1735c:	bls	17440 <__assert_fail@plt+0x6170>
   17360:	vldr	s13, [pc, #264]	; 17470 <__assert_fail@plt+0x61a0>
   17364:	str	r2, [r6, #20]
   17368:	vmul.f32	s12, s15, s13
   1736c:	vcmpe.f32	s12, s14
   17370:	vmrs	APSR_nzcv, fpscr
   17374:	bpl	17294 <__assert_fail@plt+0x5fc4>
   17378:	vldr	s11, [pc, #244]	; 17474 <__assert_fail@plt+0x61a4>
   1737c:	vmul.f32	s15, s15, s11
   17380:	vmul.f32	s15, s15, s13
   17384:	vldr	s14, [pc, #236]	; 17478 <__assert_fail@plt+0x61a8>
   17388:	vcmpe.f32	s15, s14
   1738c:	vmrs	APSR_nzcv, fpscr
   17390:	bge	17438 <__assert_fail@plt+0x6168>
   17394:	vcvt.u32.f32	s15, s15
   17398:	mov	r0, r6
   1739c:	vmov	r1, s15
   173a0:	bl	16ee4 <__assert_fail@plt+0x5c14>
   173a4:	cmp	r0, #0
   173a8:	beq	17438 <__assert_fail@plt+0x6168>
   173ac:	mov	r3, #0
   173b0:	add	r2, sp, #4
   173b4:	mov	r1, r5
   173b8:	mov	r0, r6
   173bc:	bl	163bc <__assert_fail@plt+0x50ec>
   173c0:	cmp	r0, #0
   173c4:	beq	17294 <__assert_fail@plt+0x5fc4>
   173c8:	bl	11294 <abort@plt>
   173cc:	vmov	s15, r3
   173d0:	ldr	r2, [r6, #12]
   173d4:	ldr	r3, [r6, #20]
   173d8:	vcvt.f32.u32	s15, s15
   173dc:	vldr	s13, [r3, #8]
   173e0:	vmov	s14, r2
   173e4:	vcvt.f32.u32	s14, s14
   173e8:	vmul.f32	s12, s13, s15
   173ec:	vcmpe.f32	s14, s12
   173f0:	vmrs	APSR_nzcv, fpscr
   173f4:	bgt	172ec <__assert_fail@plt+0x601c>
   173f8:	ldr	r3, [r6, #16]
   173fc:	add	r2, r2, #1
   17400:	add	r3, r3, #1
   17404:	str	r5, [r4]
   17408:	mov	r0, #1
   1740c:	str	r2, [r6, #12]
   17410:	str	r3, [r6, #16]
   17414:	b	17258 <__assert_fail@plt+0x5f88>
   17418:	mov	r0, #8
   1741c:	bl	1d084 <__assert_fail@plt+0xbdb4>
   17420:	subs	r3, r0, #0
   17424:	beq	17438 <__assert_fail@plt+0x6168>
   17428:	ldr	r4, [sp, #4]
   1742c:	b	172b8 <__assert_fail@plt+0x5fe8>
   17430:	ldr	r2, [r6, #12]
   17434:	b	173f8 <__assert_fail@plt+0x6128>
   17438:	mvn	r0, #0
   1743c:	b	17258 <__assert_fail@plt+0x5f88>
   17440:	vcmpe.f32	s12, s13
   17444:	vmrs	APSR_nzcv, fpscr
   17448:	bpl	17360 <__assert_fail@plt+0x6090>
   1744c:	ldrb	r3, [r3, #16]
   17450:	cmp	r3, #0
   17454:	vmulne.f32	s15, s11, s15
   17458:	bne	17384 <__assert_fail@plt+0x60b4>
   1745c:	b	1737c <__assert_fail@plt+0x60ac>
   17460:	stclcc	12, cr12, [ip, #820]	; 0x334
   17464:	svccc	0x00666666
   17468:	svccc	0x008ccccd
   1746c:	svccc	0x00800000
   17470:	svccc	0x004ccccd
   17474:	svccc	0x00b4fdf4
   17478:	svcmi	0x00800000
   1747c:	andeq	lr, r1, r4, lsr #29
   17480:	push	{r4, r5, r6, r7, r8, lr}
   17484:	subs	r5, r1, #0
   17488:	sub	sp, sp, #8
   1748c:	beq	17690 <__assert_fail@plt+0x63c0>
   17490:	ldr	r3, [r0, #24]
   17494:	mov	r6, r0
   17498:	ldr	r1, [r0, #8]
   1749c:	mov	r0, r5
   174a0:	blx	r3
   174a4:	ldr	r3, [r6, #8]
   174a8:	cmp	r0, r3
   174ac:	mov	r7, r0
   174b0:	bcs	17690 <__assert_fail@plt+0x63c0>
   174b4:	ldr	r8, [r6]
   174b8:	add	r4, r8, r0, lsl #3
   174bc:	ldr	r1, [r8, r0, lsl #3]
   174c0:	str	r4, [sp, #4]
   174c4:	cmp	r1, #0
   174c8:	beq	17694 <__assert_fail@plt+0x63c4>
   174cc:	cmp	r5, r1
   174d0:	beq	174f4 <__assert_fail@plt+0x6224>
   174d4:	ldr	r3, [r6, #28]
   174d8:	mov	r0, r5
   174dc:	blx	r3
   174e0:	cmp	r0, #0
   174e4:	beq	17524 <__assert_fail@plt+0x6254>
   174e8:	ldr	r1, [r8, r7, lsl #3]
   174ec:	cmp	r1, #0
   174f0:	beq	17530 <__assert_fail@plt+0x6260>
   174f4:	mov	r0, r1
   174f8:	add	sp, sp, #8
   174fc:	pop	{r4, r5, r6, r7, r8, pc}
   17500:	ldr	r1, [r3]
   17504:	cmp	r5, r1
   17508:	beq	174f4 <__assert_fail@plt+0x6224>
   1750c:	ldr	r3, [r6, #28]
   17510:	mov	r0, r5
   17514:	blx	r3
   17518:	cmp	r0, #0
   1751c:	bne	175a8 <__assert_fail@plt+0x62d8>
   17520:	ldr	r4, [r4, #4]
   17524:	ldr	r3, [r4, #4]
   17528:	cmp	r3, #0
   1752c:	bne	17500 <__assert_fail@plt+0x6230>
   17530:	vldr	s15, [r6, #8]
   17534:	ldr	r3, [r6, #20]
   17538:	vldr	s14, [r6, #12]
   1753c:	vcvt.f32.u32	s15, s15
   17540:	vldr	s13, [r3, #8]
   17544:	vcvt.f32.u32	s14, s14
   17548:	vmul.f32	s12, s13, s15
   1754c:	vcmpe.f32	s14, s12
   17550:	vmrs	APSR_nzcv, fpscr
   17554:	bgt	175b4 <__assert_fail@plt+0x62e4>
   17558:	ldr	r4, [sp, #4]
   1755c:	ldr	r3, [r4]
   17560:	cmp	r3, #0
   17564:	beq	176f4 <__assert_fail@plt+0x6424>
   17568:	ldr	r0, [r6, #36]	; 0x24
   1756c:	cmp	r0, #0
   17570:	beq	176dc <__assert_fail@plt+0x640c>
   17574:	ldr	r3, [r0, #4]
   17578:	str	r3, [r6, #36]	; 0x24
   1757c:	ldr	r3, [r6, #16]
   17580:	ldr	r2, [r4, #4]
   17584:	add	r3, r3, #1
   17588:	str	r5, [r0]
   1758c:	str	r2, [r0, #4]
   17590:	str	r0, [r4, #4]
   17594:	str	r3, [r6, #16]
   17598:	mov	r1, r5
   1759c:	mov	r0, r1
   175a0:	add	sp, sp, #8
   175a4:	pop	{r4, r5, r6, r7, r8, pc}
   175a8:	ldr	r3, [r4, #4]
   175ac:	ldr	r1, [r3]
   175b0:	b	174ec <__assert_fail@plt+0x621c>
   175b4:	ldr	r2, [pc, #388]	; 17740 <__assert_fail@plt+0x6470>
   175b8:	cmp	r3, r2
   175bc:	beq	17640 <__assert_fail@plt+0x6370>
   175c0:	vldr	s12, [pc, #348]	; 17724 <__assert_fail@plt+0x6454>
   175c4:	vcmpe.f32	s13, s12
   175c8:	vmrs	APSR_nzcv, fpscr
   175cc:	ble	17628 <__assert_fail@plt+0x6358>
   175d0:	vldr	s11, [pc, #336]	; 17728 <__assert_fail@plt+0x6458>
   175d4:	vcmpe.f32	s13, s11
   175d8:	vmrs	APSR_nzcv, fpscr
   175dc:	bpl	17628 <__assert_fail@plt+0x6358>
   175e0:	vldr	s11, [r3, #12]
   175e4:	vldr	s10, [pc, #320]	; 1772c <__assert_fail@plt+0x645c>
   175e8:	vcmpe.f32	s11, s10
   175ec:	vmrs	APSR_nzcv, fpscr
   175f0:	ble	17628 <__assert_fail@plt+0x6358>
   175f4:	vldr	s10, [r3]
   175f8:	vcmpe.f32	s10, #0.0
   175fc:	vmrs	APSR_nzcv, fpscr
   17600:	blt	17628 <__assert_fail@plt+0x6358>
   17604:	vadd.f32	s12, s10, s12
   17608:	vldr	s10, [r3, #4]
   1760c:	vcmpe.f32	s12, s10
   17610:	vmrs	APSR_nzcv, fpscr
   17614:	bpl	17628 <__assert_fail@plt+0x6358>
   17618:	vldr	s9, [pc, #272]	; 17730 <__assert_fail@plt+0x6460>
   1761c:	vcmpe.f32	s10, s9
   17620:	vmrs	APSR_nzcv, fpscr
   17624:	bls	17704 <__assert_fail@plt+0x6434>
   17628:	vldr	s13, [pc, #260]	; 17734 <__assert_fail@plt+0x6464>
   1762c:	str	r2, [r6, #20]
   17630:	vmul.f32	s12, s15, s13
   17634:	vcmpe.f32	s12, s14
   17638:	vmrs	APSR_nzcv, fpscr
   1763c:	bpl	17558 <__assert_fail@plt+0x6288>
   17640:	vldr	s11, [pc, #240]	; 17738 <__assert_fail@plt+0x6468>
   17644:	vmul.f32	s15, s15, s11
   17648:	vmul.f32	s15, s15, s13
   1764c:	vldr	s14, [pc, #232]	; 1773c <__assert_fail@plt+0x646c>
   17650:	vcmpe.f32	s15, s14
   17654:	vmrs	APSR_nzcv, fpscr
   17658:	bge	176fc <__assert_fail@plt+0x642c>
   1765c:	vcvt.u32.f32	s15, s15
   17660:	mov	r0, r6
   17664:	vmov	r1, s15
   17668:	bl	16ee4 <__assert_fail@plt+0x5c14>
   1766c:	cmp	r0, #0
   17670:	beq	176fc <__assert_fail@plt+0x642c>
   17674:	mov	r3, #0
   17678:	add	r2, sp, #4
   1767c:	mov	r1, r5
   17680:	mov	r0, r6
   17684:	bl	163bc <__assert_fail@plt+0x50ec>
   17688:	cmp	r0, #0
   1768c:	beq	17558 <__assert_fail@plt+0x6288>
   17690:	bl	11294 <abort@plt>
   17694:	vmov	s15, r3
   17698:	ldr	r2, [r6, #12]
   1769c:	ldr	r3, [r6, #20]
   176a0:	vcvt.f32.u32	s15, s15
   176a4:	vldr	s13, [r3, #8]
   176a8:	vmov	s14, r2
   176ac:	vcvt.f32.u32	s14, s14
   176b0:	vmul.f32	s12, s15, s13
   176b4:	vcmpe.f32	s12, s14
   176b8:	vmrs	APSR_nzcv, fpscr
   176bc:	bmi	175b4 <__assert_fail@plt+0x62e4>
   176c0:	ldr	r3, [r6, #16]
   176c4:	add	r2, r2, #1
   176c8:	add	r3, r3, #1
   176cc:	str	r5, [r4]
   176d0:	str	r2, [r6, #12]
   176d4:	str	r3, [r6, #16]
   176d8:	b	17598 <__assert_fail@plt+0x62c8>
   176dc:	mov	r0, #8
   176e0:	bl	1d084 <__assert_fail@plt+0xbdb4>
   176e4:	cmp	r0, #0
   176e8:	beq	176fc <__assert_fail@plt+0x642c>
   176ec:	ldr	r4, [sp, #4]
   176f0:	b	1757c <__assert_fail@plt+0x62ac>
   176f4:	ldr	r2, [r6, #12]
   176f8:	b	176c0 <__assert_fail@plt+0x63f0>
   176fc:	mov	r1, #0
   17700:	b	174f4 <__assert_fail@plt+0x6224>
   17704:	vcmpe.f32	s12, s13
   17708:	vmrs	APSR_nzcv, fpscr
   1770c:	bpl	17628 <__assert_fail@plt+0x6358>
   17710:	ldrb	r3, [r3, #16]
   17714:	cmp	r3, #0
   17718:	vmulne.f32	s15, s11, s15
   1771c:	bne	1764c <__assert_fail@plt+0x637c>
   17720:	b	17644 <__assert_fail@plt+0x6374>
   17724:	stclcc	12, cr12, [ip, #820]	; 0x334
   17728:	svccc	0x00666666
   1772c:	svccc	0x008ccccd
   17730:	svccc	0x00800000
   17734:	svccc	0x004ccccd
   17738:	svccc	0x00b4fdf4
   1773c:	svcmi	0x00800000
   17740:	andeq	lr, r1, r4, lsr #29
   17744:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17748:	mov	r7, r1
   1774c:	ldr	r3, [r0, #24]
   17750:	mov	r6, r0
   17754:	ldr	r1, [r0, #8]
   17758:	mov	r0, r7
   1775c:	blx	r3
   17760:	ldr	r3, [r6, #8]
   17764:	cmp	r0, r3
   17768:	bcs	17994 <__assert_fail@plt+0x66c4>
   1776c:	ldr	r9, [r6]
   17770:	mov	r8, r0
   17774:	add	r5, r9, r0, lsl #3
   17778:	ldr	r4, [r9, r0, lsl #3]
   1777c:	cmp	r4, #0
   17780:	beq	1782c <__assert_fail@plt+0x655c>
   17784:	cmp	r7, r4
   17788:	beq	177a8 <__assert_fail@plt+0x64d8>
   1778c:	mov	r1, r4
   17790:	ldr	r3, [r6, #28]
   17794:	mov	r0, r7
   17798:	blx	r3
   1779c:	cmp	r0, #0
   177a0:	beq	17820 <__assert_fail@plt+0x6550>
   177a4:	ldr	r4, [r9, r8, lsl #3]
   177a8:	ldr	r3, [r5, #4]
   177ac:	cmp	r3, #0
   177b0:	movne	r2, #0
   177b4:	ldmne	r3, {r0, r1}
   177b8:	streq	r3, [r9, r8, lsl #3]
   177bc:	stmne	r5, {r0, r1}
   177c0:	strne	r2, [r3]
   177c4:	ldrne	r2, [r6, #36]	; 0x24
   177c8:	strne	r2, [r3, #4]
   177cc:	strne	r3, [r6, #36]	; 0x24
   177d0:	cmp	r4, #0
   177d4:	beq	1782c <__assert_fail@plt+0x655c>
   177d8:	ldr	r2, [r9, r8, lsl #3]
   177dc:	ldr	r3, [r6, #16]
   177e0:	cmp	r2, #0
   177e4:	sub	r3, r3, #1
   177e8:	str	r3, [r6, #16]
   177ec:	beq	17860 <__assert_fail@plt+0x6590>
   177f0:	mov	r0, r4
   177f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   177f8:	ldr	r4, [r3]
   177fc:	cmp	r7, r4
   17800:	beq	17840 <__assert_fail@plt+0x6570>
   17804:	mov	r1, r4
   17808:	ldr	r3, [r6, #28]
   1780c:	mov	r0, r7
   17810:	blx	r3
   17814:	cmp	r0, #0
   17818:	bne	17838 <__assert_fail@plt+0x6568>
   1781c:	ldr	r5, [r5, #4]
   17820:	ldr	r3, [r5, #4]
   17824:	cmp	r3, #0
   17828:	bne	177f8 <__assert_fail@plt+0x6528>
   1782c:	mov	r4, #0
   17830:	mov	r0, r4
   17834:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17838:	ldr	r3, [r5, #4]
   1783c:	ldr	r4, [r3]
   17840:	ldr	r1, [r3, #4]
   17844:	mov	r2, #0
   17848:	str	r1, [r5, #4]
   1784c:	str	r2, [r3]
   17850:	ldr	r2, [r6, #36]	; 0x24
   17854:	str	r2, [r3, #4]
   17858:	str	r3, [r6, #36]	; 0x24
   1785c:	b	177d0 <__assert_fail@plt+0x6500>
   17860:	vldr	s15, [r6, #8]
   17864:	ldr	r3, [r6, #12]
   17868:	ldr	r2, [r6, #20]
   1786c:	sub	r3, r3, #1
   17870:	vcvt.f32.u32	s14, s15
   17874:	vldr	s13, [r2]
   17878:	vmov	s15, r3
   1787c:	str	r3, [r6, #12]
   17880:	vcvt.f32.u32	s15, s15
   17884:	vmul.f32	s12, s13, s14
   17888:	vcmpe.f32	s15, s12
   1788c:	vmrs	APSR_nzcv, fpscr
   17890:	bpl	177f0 <__assert_fail@plt+0x6520>
   17894:	ldr	r3, [pc, #276]	; 179b0 <__assert_fail@plt+0x66e0>
   17898:	cmp	r2, r3
   1789c:	beq	1797c <__assert_fail@plt+0x66ac>
   178a0:	vldr	s12, [r2, #8]
   178a4:	vldr	s11, [pc, #236]	; 17998 <__assert_fail@plt+0x66c8>
   178a8:	vcmpe.f32	s12, s11
   178ac:	vmrs	APSR_nzcv, fpscr
   178b0:	ble	17964 <__assert_fail@plt+0x6694>
   178b4:	vldr	s10, [pc, #224]	; 1799c <__assert_fail@plt+0x66cc>
   178b8:	vcmpe.f32	s12, s10
   178bc:	vmrs	APSR_nzcv, fpscr
   178c0:	bpl	17964 <__assert_fail@plt+0x6694>
   178c4:	vldr	s10, [pc, #212]	; 179a0 <__assert_fail@plt+0x66d0>
   178c8:	vldr	s9, [r2, #12]
   178cc:	vcmpe.f32	s9, s10
   178d0:	vmrs	APSR_nzcv, fpscr
   178d4:	ble	17964 <__assert_fail@plt+0x6694>
   178d8:	vcmpe.f32	s13, #0.0
   178dc:	vmrs	APSR_nzcv, fpscr
   178e0:	blt	17964 <__assert_fail@plt+0x6694>
   178e4:	vadd.f32	s13, s13, s11
   178e8:	vldr	s11, [r2, #4]
   178ec:	vcmpe.f32	s13, s11
   178f0:	vmrs	APSR_nzcv, fpscr
   178f4:	bpl	17964 <__assert_fail@plt+0x6694>
   178f8:	vldr	s10, [pc, #164]	; 179a4 <__assert_fail@plt+0x66d4>
   178fc:	vcmpe.f32	s11, s10
   17900:	vmrs	APSR_nzcv, fpscr
   17904:	bhi	17964 <__assert_fail@plt+0x6694>
   17908:	vcmpe.f32	s12, s13
   1790c:	vmrs	APSR_nzcv, fpscr
   17910:	ble	17964 <__assert_fail@plt+0x6694>
   17914:	ldrb	r3, [r2, #16]
   17918:	cmp	r3, #0
   1791c:	beq	17984 <__assert_fail@plt+0x66b4>
   17920:	vmul.f32	s15, s14, s11
   17924:	vcvt.u32.f32	s15, s15
   17928:	vmov	r1, s15
   1792c:	mov	r0, r6
   17930:	bl	16ee4 <__assert_fail@plt+0x5c14>
   17934:	cmp	r0, #0
   17938:	bne	177f0 <__assert_fail@plt+0x6520>
   1793c:	ldr	r0, [r6, #36]	; 0x24
   17940:	cmp	r0, #0
   17944:	beq	17958 <__assert_fail@plt+0x6688>
   17948:	ldr	r5, [r0, #4]
   1794c:	bl	13bb0 <__assert_fail@plt+0x28e0>
   17950:	subs	r0, r5, #0
   17954:	bne	17948 <__assert_fail@plt+0x6678>
   17958:	mov	r3, #0
   1795c:	str	r3, [r6, #36]	; 0x24
   17960:	b	177f0 <__assert_fail@plt+0x6520>
   17964:	vldr	s13, [pc, #60]	; 179a8 <__assert_fail@plt+0x66d8>
   17968:	str	r3, [r6, #20]
   1796c:	vmul.f32	s13, s14, s13
   17970:	vcmpe.f32	s15, s13
   17974:	vmrs	APSR_nzcv, fpscr
   17978:	bpl	177f0 <__assert_fail@plt+0x6520>
   1797c:	vldr	s12, [pc, #40]	; 179ac <__assert_fail@plt+0x66dc>
   17980:	vldr	s11, [pc, #28]	; 179a4 <__assert_fail@plt+0x66d4>
   17984:	vmul.f32	s15, s14, s11
   17988:	vmul.f32	s15, s15, s12
   1798c:	vcvt.u32.f32	s15, s15
   17990:	b	17928 <__assert_fail@plt+0x6658>
   17994:	bl	11294 <abort@plt>
   17998:	stclcc	12, cr12, [ip, #820]	; 0x334
   1799c:	svccc	0x00666666
   179a0:	svccc	0x008ccccd
   179a4:	svccc	0x00800000
   179a8:	andeq	r0, r0, r0
   179ac:	svccc	0x004ccccd
   179b0:	andeq	lr, r1, r4, lsr #29
   179b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   179b8:	mov	r7, r1
   179bc:	ldr	r3, [r0, #24]
   179c0:	mov	r6, r0
   179c4:	ldr	r1, [r0, #8]
   179c8:	mov	r0, r7
   179cc:	blx	r3
   179d0:	ldr	r3, [r6, #8]
   179d4:	cmp	r0, r3
   179d8:	bcs	17c04 <__assert_fail@plt+0x6934>
   179dc:	ldr	r9, [r6]
   179e0:	mov	r8, r0
   179e4:	add	r5, r9, r0, lsl #3
   179e8:	ldr	r4, [r9, r0, lsl #3]
   179ec:	cmp	r4, #0
   179f0:	beq	17a9c <__assert_fail@plt+0x67cc>
   179f4:	cmp	r7, r4
   179f8:	beq	17a18 <__assert_fail@plt+0x6748>
   179fc:	mov	r1, r4
   17a00:	ldr	r3, [r6, #28]
   17a04:	mov	r0, r7
   17a08:	blx	r3
   17a0c:	cmp	r0, #0
   17a10:	beq	17a90 <__assert_fail@plt+0x67c0>
   17a14:	ldr	r4, [r9, r8, lsl #3]
   17a18:	ldr	r3, [r5, #4]
   17a1c:	cmp	r3, #0
   17a20:	movne	r2, #0
   17a24:	ldmne	r3, {r0, r1}
   17a28:	streq	r3, [r9, r8, lsl #3]
   17a2c:	stmne	r5, {r0, r1}
   17a30:	strne	r2, [r3]
   17a34:	ldrne	r2, [r6, #36]	; 0x24
   17a38:	strne	r2, [r3, #4]
   17a3c:	strne	r3, [r6, #36]	; 0x24
   17a40:	cmp	r4, #0
   17a44:	beq	17a9c <__assert_fail@plt+0x67cc>
   17a48:	ldr	r2, [r9, r8, lsl #3]
   17a4c:	ldr	r3, [r6, #16]
   17a50:	cmp	r2, #0
   17a54:	sub	r3, r3, #1
   17a58:	str	r3, [r6, #16]
   17a5c:	beq	17ad0 <__assert_fail@plt+0x6800>
   17a60:	mov	r0, r4
   17a64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17a68:	ldr	r4, [r3]
   17a6c:	cmp	r7, r4
   17a70:	beq	17ab0 <__assert_fail@plt+0x67e0>
   17a74:	mov	r1, r4
   17a78:	ldr	r3, [r6, #28]
   17a7c:	mov	r0, r7
   17a80:	blx	r3
   17a84:	cmp	r0, #0
   17a88:	bne	17aa8 <__assert_fail@plt+0x67d8>
   17a8c:	ldr	r5, [r5, #4]
   17a90:	ldr	r3, [r5, #4]
   17a94:	cmp	r3, #0
   17a98:	bne	17a68 <__assert_fail@plt+0x6798>
   17a9c:	mov	r4, #0
   17aa0:	mov	r0, r4
   17aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17aa8:	ldr	r3, [r5, #4]
   17aac:	ldr	r4, [r3]
   17ab0:	ldr	r1, [r3, #4]
   17ab4:	mov	r2, #0
   17ab8:	str	r1, [r5, #4]
   17abc:	str	r2, [r3]
   17ac0:	ldr	r2, [r6, #36]	; 0x24
   17ac4:	str	r2, [r3, #4]
   17ac8:	str	r3, [r6, #36]	; 0x24
   17acc:	b	17a40 <__assert_fail@plt+0x6770>
   17ad0:	vldr	s15, [r6, #8]
   17ad4:	ldr	r3, [r6, #12]
   17ad8:	ldr	r2, [r6, #20]
   17adc:	sub	r3, r3, #1
   17ae0:	vcvt.f32.u32	s14, s15
   17ae4:	vldr	s13, [r2]
   17ae8:	vmov	s15, r3
   17aec:	str	r3, [r6, #12]
   17af0:	vcvt.f32.u32	s15, s15
   17af4:	vmul.f32	s12, s13, s14
   17af8:	vcmpe.f32	s15, s12
   17afc:	vmrs	APSR_nzcv, fpscr
   17b00:	bpl	17a60 <__assert_fail@plt+0x6790>
   17b04:	ldr	r3, [pc, #276]	; 17c20 <__assert_fail@plt+0x6950>
   17b08:	cmp	r2, r3
   17b0c:	beq	17bec <__assert_fail@plt+0x691c>
   17b10:	vldr	s12, [r2, #8]
   17b14:	vldr	s11, [pc, #236]	; 17c08 <__assert_fail@plt+0x6938>
   17b18:	vcmpe.f32	s12, s11
   17b1c:	vmrs	APSR_nzcv, fpscr
   17b20:	ble	17bd4 <__assert_fail@plt+0x6904>
   17b24:	vldr	s10, [pc, #224]	; 17c0c <__assert_fail@plt+0x693c>
   17b28:	vcmpe.f32	s12, s10
   17b2c:	vmrs	APSR_nzcv, fpscr
   17b30:	bpl	17bd4 <__assert_fail@plt+0x6904>
   17b34:	vldr	s10, [pc, #212]	; 17c10 <__assert_fail@plt+0x6940>
   17b38:	vldr	s9, [r2, #12]
   17b3c:	vcmpe.f32	s9, s10
   17b40:	vmrs	APSR_nzcv, fpscr
   17b44:	ble	17bd4 <__assert_fail@plt+0x6904>
   17b48:	vcmpe.f32	s13, #0.0
   17b4c:	vmrs	APSR_nzcv, fpscr
   17b50:	blt	17bd4 <__assert_fail@plt+0x6904>
   17b54:	vadd.f32	s13, s13, s11
   17b58:	vldr	s11, [r2, #4]
   17b5c:	vcmpe.f32	s13, s11
   17b60:	vmrs	APSR_nzcv, fpscr
   17b64:	bpl	17bd4 <__assert_fail@plt+0x6904>
   17b68:	vldr	s10, [pc, #164]	; 17c14 <__assert_fail@plt+0x6944>
   17b6c:	vcmpe.f32	s11, s10
   17b70:	vmrs	APSR_nzcv, fpscr
   17b74:	bhi	17bd4 <__assert_fail@plt+0x6904>
   17b78:	vcmpe.f32	s12, s13
   17b7c:	vmrs	APSR_nzcv, fpscr
   17b80:	ble	17bd4 <__assert_fail@plt+0x6904>
   17b84:	ldrb	r3, [r2, #16]
   17b88:	cmp	r3, #0
   17b8c:	beq	17bf4 <__assert_fail@plt+0x6924>
   17b90:	vmul.f32	s15, s14, s11
   17b94:	vcvt.u32.f32	s15, s15
   17b98:	vmov	r1, s15
   17b9c:	mov	r0, r6
   17ba0:	bl	16ee4 <__assert_fail@plt+0x5c14>
   17ba4:	cmp	r0, #0
   17ba8:	bne	17a60 <__assert_fail@plt+0x6790>
   17bac:	ldr	r0, [r6, #36]	; 0x24
   17bb0:	cmp	r0, #0
   17bb4:	beq	17bc8 <__assert_fail@plt+0x68f8>
   17bb8:	ldr	r5, [r0, #4]
   17bbc:	bl	13bb0 <__assert_fail@plt+0x28e0>
   17bc0:	subs	r0, r5, #0
   17bc4:	bne	17bb8 <__assert_fail@plt+0x68e8>
   17bc8:	mov	r3, #0
   17bcc:	str	r3, [r6, #36]	; 0x24
   17bd0:	b	17a60 <__assert_fail@plt+0x6790>
   17bd4:	vldr	s13, [pc, #60]	; 17c18 <__assert_fail@plt+0x6948>
   17bd8:	str	r3, [r6, #20]
   17bdc:	vmul.f32	s13, s14, s13
   17be0:	vcmpe.f32	s15, s13
   17be4:	vmrs	APSR_nzcv, fpscr
   17be8:	bpl	17a60 <__assert_fail@plt+0x6790>
   17bec:	vldr	s12, [pc, #40]	; 17c1c <__assert_fail@plt+0x694c>
   17bf0:	vldr	s11, [pc, #28]	; 17c14 <__assert_fail@plt+0x6944>
   17bf4:	vmul.f32	s15, s14, s11
   17bf8:	vmul.f32	s15, s15, s12
   17bfc:	vcvt.u32.f32	s15, s15
   17c00:	b	17b98 <__assert_fail@plt+0x68c8>
   17c04:	bl	11294 <abort@plt>
   17c08:	stclcc	12, cr12, [ip, #820]	; 0x334
   17c0c:	svccc	0x00666666
   17c10:	svccc	0x008ccccd
   17c14:	svccc	0x00800000
   17c18:	andeq	r0, r0, r0
   17c1c:	svccc	0x004ccccd
   17c20:	andeq	lr, r1, r4, lsr #29
   17c24:	mov	r3, #0
   17c28:	mov	r2, #1
   17c2c:	str	r1, [r0]
   17c30:	str	r1, [r0, #4]
   17c34:	str	r1, [r0, #8]
   17c38:	str	r1, [r0, #12]
   17c3c:	str	r1, [r0, #16]
   17c40:	strb	r2, [r0, #28]
   17c44:	str	r3, [r0, #20]
   17c48:	str	r3, [r0, #24]
   17c4c:	bx	lr
   17c50:	ldrb	r0, [r0, #28]
   17c54:	bx	lr
   17c58:	ldrb	ip, [r0, #28]
   17c5c:	ldr	r3, [r0, #20]
   17c60:	mov	r2, r0
   17c64:	eor	ip, ip, #1
   17c68:	add	r3, ip, r3
   17c6c:	and	r3, r3, #3
   17c70:	ldr	r0, [r0, r3, lsl #2]
   17c74:	str	r1, [r2, r3, lsl #2]
   17c78:	ldr	r1, [r2, #24]
   17c7c:	str	r3, [r2, #20]
   17c80:	cmp	r3, r1
   17c84:	addeq	r3, ip, r3
   17c88:	andeq	r3, r3, #3
   17c8c:	streq	r3, [r2, #24]
   17c90:	mov	r3, #0
   17c94:	strb	r3, [r2, #28]
   17c98:	bx	lr
   17c9c:	ldrb	r3, [r0, #28]
   17ca0:	cmp	r3, #0
   17ca4:	bne	17cdc <__assert_fail@plt+0x6a0c>
   17ca8:	ldr	r3, [r0, #20]
   17cac:	ldr	r1, [r0, #16]
   17cb0:	ldr	r2, [r0, r3, lsl #2]
   17cb4:	str	r1, [r0, r3, lsl #2]
   17cb8:	ldr	r1, [r0, #24]
   17cbc:	cmp	r3, r1
   17cc0:	addne	r3, r3, #3
   17cc4:	moveq	r3, #1
   17cc8:	andne	r3, r3, #3
   17ccc:	strbeq	r3, [r0, #28]
   17cd0:	strne	r3, [r0, #20]
   17cd4:	mov	r0, r2
   17cd8:	bx	lr
   17cdc:	push	{r4, lr}
   17ce0:	bl	11294 <abort@plt>
   17ce4:	push	{r2, r3}
   17ce8:	push	{lr}		; (str lr, [sp, #-4]!)
   17cec:	sub	sp, sp, #12
   17cf0:	ldr	r2, [sp, #16]
   17cf4:	ands	r3, r2, #64	; 0x40
   17cf8:	addne	r3, sp, #20
   17cfc:	strne	r3, [sp, #4]
   17d00:	ldrne	r3, [sp, #20]
   17d04:	bl	11174 <openat64@plt>
   17d08:	bl	1be0c <__assert_fail@plt+0xab3c>
   17d0c:	add	sp, sp, #12
   17d10:	pop	{lr}		; (ldr lr, [sp], #4)
   17d14:	add	sp, sp, #8
   17d18:	bx	lr
   17d1c:	orr	r2, r2, #540672	; 0x84000
   17d20:	push	{r4, r5, r6, lr}
   17d24:	orr	r2, r2, #2304	; 0x900
   17d28:	mov	r6, r3
   17d2c:	bl	17ce4 <__assert_fail@plt+0x6a14>
   17d30:	subs	r5, r0, #0
   17d34:	blt	17d68 <__assert_fail@plt+0x6a98>
   17d38:	bl	11234 <fdopendir@plt>
   17d3c:	subs	r4, r0, #0
   17d40:	beq	17d50 <__assert_fail@plt+0x6a80>
   17d44:	str	r5, [r6]
   17d48:	mov	r0, r4
   17d4c:	pop	{r4, r5, r6, pc}
   17d50:	bl	11180 <__errno_location@plt>
   17d54:	mov	r6, r0
   17d58:	mov	r0, r5
   17d5c:	ldr	r5, [r6]
   17d60:	bl	112a0 <close@plt>
   17d64:	b	17d44 <__assert_fail@plt+0x6a74>
   17d68:	mov	r4, #0
   17d6c:	b	17d48 <__assert_fail@plt+0x6a78>
   17d70:	push	{r4, r5, r6, lr}
   17d74:	subs	r4, r0, #0
   17d78:	beq	17dec <__assert_fail@plt+0x6b1c>
   17d7c:	mov	r1, #47	; 0x2f
   17d80:	bl	11210 <strrchr@plt>
   17d84:	subs	r5, r0, #0
   17d88:	beq	17dd8 <__assert_fail@plt+0x6b08>
   17d8c:	add	r6, r5, #1
   17d90:	sub	r3, r6, r4
   17d94:	cmp	r3, #6
   17d98:	ble	17dd8 <__assert_fail@plt+0x6b08>
   17d9c:	mov	r2, #7
   17da0:	ldr	r1, [pc, #96]	; 17e08 <__assert_fail@plt+0x6b38>
   17da4:	sub	r0, r5, #6
   17da8:	bl	11288 <strncmp@plt>
   17dac:	cmp	r0, #0
   17db0:	bne	17dd8 <__assert_fail@plt+0x6b08>
   17db4:	mov	r2, #3
   17db8:	ldr	r1, [pc, #76]	; 17e0c <__assert_fail@plt+0x6b3c>
   17dbc:	mov	r0, r6
   17dc0:	bl	11288 <strncmp@plt>
   17dc4:	cmp	r0, #0
   17dc8:	movne	r4, r6
   17dcc:	ldreq	r3, [pc, #60]	; 17e10 <__assert_fail@plt+0x6b40>
   17dd0:	addeq	r4, r5, #4
   17dd4:	streq	r4, [r3]
   17dd8:	ldr	r2, [pc, #52]	; 17e14 <__assert_fail@plt+0x6b44>
   17ddc:	ldr	r3, [pc, #52]	; 17e18 <__assert_fail@plt+0x6b48>
   17de0:	str	r4, [r2]
   17de4:	str	r4, [r3]
   17de8:	pop	{r4, r5, r6, pc}
   17dec:	ldr	r3, [pc, #40]	; 17e1c <__assert_fail@plt+0x6b4c>
   17df0:	mov	r2, #55	; 0x37
   17df4:	mov	r1, #1
   17df8:	ldr	r3, [r3]
   17dfc:	ldr	r0, [pc, #28]	; 17e20 <__assert_fail@plt+0x6b50>
   17e00:	bl	110b4 <fwrite@plt>
   17e04:	bl	11294 <abort@plt>
   17e08:	andeq	lr, r1, ip, asr pc
   17e0c:	andeq	lr, r1, r4, ror #30
   17e10:	andeq	r0, r3, r8, ror r1
   17e14:			; <UNDEFINED> instruction: 0x000301bc
   17e18:	andeq	r0, r3, ip, ror r1
   17e1c:	andeq	r0, r3, r8, lsl #3
   17e20:	andeq	lr, r1, r4, lsr #30
   17e24:	push	{r4, r5, r6, lr}
   17e28:	mov	r4, r0
   17e2c:	mov	r5, r1
   17e30:	bl	1d524 <__assert_fail@plt+0xc254>
   17e34:	ldrb	r3, [r0]
   17e38:	bic	r3, r3, #32
   17e3c:	cmp	r3, #85	; 0x55
   17e40:	bne	17ea0 <__assert_fail@plt+0x6bd0>
   17e44:	ldrb	r3, [r0, #1]
   17e48:	bic	r3, r3, #32
   17e4c:	cmp	r3, #84	; 0x54
   17e50:	bne	17edc <__assert_fail@plt+0x6c0c>
   17e54:	ldrb	r3, [r0, #2]
   17e58:	bic	r3, r3, #32
   17e5c:	cmp	r3, #70	; 0x46
   17e60:	bne	17edc <__assert_fail@plt+0x6c0c>
   17e64:	ldrb	r3, [r0, #3]
   17e68:	cmp	r3, #45	; 0x2d
   17e6c:	bne	17edc <__assert_fail@plt+0x6c0c>
   17e70:	ldrb	r3, [r0, #4]
   17e74:	cmp	r3, #56	; 0x38
   17e78:	bne	17edc <__assert_fail@plt+0x6c0c>
   17e7c:	ldrb	r3, [r0, #5]
   17e80:	cmp	r3, #0
   17e84:	bne	17edc <__assert_fail@plt+0x6c0c>
   17e88:	ldrb	r2, [r4]
   17e8c:	ldr	r3, [pc, #152]	; 17f2c <__assert_fail@plt+0x6c5c>
   17e90:	ldr	r0, [pc, #152]	; 17f30 <__assert_fail@plt+0x6c60>
   17e94:	cmp	r2, #96	; 0x60
   17e98:	movne	r0, r3
   17e9c:	pop	{r4, r5, r6, pc}
   17ea0:	cmp	r3, #71	; 0x47
   17ea4:	bne	17edc <__assert_fail@plt+0x6c0c>
   17ea8:	ldrb	r3, [r0, #1]
   17eac:	bic	r3, r3, #32
   17eb0:	cmp	r3, #66	; 0x42
   17eb4:	bne	17edc <__assert_fail@plt+0x6c0c>
   17eb8:	ldrb	r3, [r0, #2]
   17ebc:	cmp	r3, #49	; 0x31
   17ec0:	bne	17edc <__assert_fail@plt+0x6c0c>
   17ec4:	ldrb	r3, [r0, #3]
   17ec8:	cmp	r3, #56	; 0x38
   17ecc:	bne	17edc <__assert_fail@plt+0x6c0c>
   17ed0:	ldrb	r3, [r0, #4]
   17ed4:	cmp	r3, #48	; 0x30
   17ed8:	beq	17ef0 <__assert_fail@plt+0x6c20>
   17edc:	ldr	r3, [pc, #80]	; 17f34 <__assert_fail@plt+0x6c64>
   17ee0:	cmp	r5, #9
   17ee4:	ldr	r0, [pc, #76]	; 17f38 <__assert_fail@plt+0x6c68>
   17ee8:	movne	r0, r3
   17eec:	pop	{r4, r5, r6, pc}
   17ef0:	ldrb	r3, [r0, #5]
   17ef4:	cmp	r3, #51	; 0x33
   17ef8:	bne	17edc <__assert_fail@plt+0x6c0c>
   17efc:	ldrb	r3, [r0, #6]
   17f00:	cmp	r3, #48	; 0x30
   17f04:	bne	17edc <__assert_fail@plt+0x6c0c>
   17f08:	ldrb	r3, [r0, #7]
   17f0c:	cmp	r3, #0
   17f10:	bne	17edc <__assert_fail@plt+0x6c0c>
   17f14:	ldrb	r2, [r4]
   17f18:	ldr	r3, [pc, #28]	; 17f3c <__assert_fail@plt+0x6c6c>
   17f1c:	ldr	r0, [pc, #28]	; 17f40 <__assert_fail@plt+0x6c70>
   17f20:	cmp	r2, #96	; 0x60
   17f24:	movne	r0, r3
   17f28:	pop	{r4, r5, r6, pc}
   17f2c:	andeq	lr, r1, r0, asr #31
   17f30:			; <UNDEFINED> instruction: 0x0001efbc
   17f34:	ldrdeq	lr, [r1], -r0
   17f38:	andeq	lr, r1, ip, asr #31
   17f3c:	andeq	lr, r1, r8, asr #31
   17f40:	andeq	lr, r1, r4, asr #31
   17f44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f48:	sub	sp, sp, #140	; 0x8c
   17f4c:	mov	r9, r1
   17f50:	str	r3, [sp, #24]
   17f54:	mov	r3, #1
   17f58:	mov	sl, r0
   17f5c:	str	r2, [sp, #44]	; 0x2c
   17f60:	str	r3, [sp, #28]
   17f64:	bl	110cc <__ctype_get_mb_cur_max@plt>
   17f68:	ldr	r3, [sp, #180]	; 0xb4
   17f6c:	mov	fp, r9
   17f70:	mov	r9, sl
   17f74:	lsr	r3, r3, #1
   17f78:	and	r3, r3, #1
   17f7c:	str	r3, [sp, #40]	; 0x28
   17f80:	ldr	r3, [sp, #180]	; 0xb4
   17f84:	mov	r2, #0
   17f88:	and	r3, r3, #4
   17f8c:	str	r3, [sp, #100]	; 0x64
   17f90:	ldr	r3, [sp, #180]	; 0xb4
   17f94:	str	r2, [sp, #76]	; 0x4c
   17f98:	and	r3, r3, #1
   17f9c:	str	r3, [sp, #96]	; 0x60
   17fa0:	str	r2, [sp, #36]	; 0x24
   17fa4:	str	r2, [sp, #56]	; 0x38
   17fa8:	str	r2, [sp, #68]	; 0x44
   17fac:	str	r2, [sp, #72]	; 0x48
   17fb0:	str	r2, [sp, #84]	; 0x54
   17fb4:	str	r0, [sp, #80]	; 0x50
   17fb8:	ldr	r3, [sp, #176]	; 0xb0
   17fbc:	cmp	r3, #10
   17fc0:	ldrls	pc, [pc, r3, lsl #2]
   17fc4:	b	1919c <__assert_fail@plt+0x7ecc>
   17fc8:	strdeq	r7, [r1], -r4
   17fcc:	andeq	r8, r1, r4, lsl r3
   17fd0:	andeq	r8, r1, ip, ror #8
   17fd4:	andeq	r8, r1, r8, asr #6
   17fd8:	andeq	r8, r1, r0, asr #9
   17fdc:	andeq	r8, r1, r0, lsr #9
   17fe0:	andeq	r8, r1, r8, ror #6
   17fe4:	andeq	r8, r1, ip, lsl #7
   17fe8:			; <UNDEFINED> instruction: 0x000183b4
   17fec:			; <UNDEFINED> instruction: 0x000183b4
   17ff0:			; <UNDEFINED> instruction: 0x000183b4
   17ff4:	mov	r3, #0
   17ff8:	ldr	r1, [sp, #56]	; 0x38
   17ffc:	ldr	r2, [sp, #176]	; 0xb0
   18000:	ldr	lr, [sp, #176]	; 0xb0
   18004:	mov	r8, r3
   18008:	mov	ip, r3
   1800c:	str	r3, [sp, #40]	; 0x28
   18010:	mov	r3, r1
   18014:	cmp	r2, #2
   18018:	moveq	r3, #0
   1801c:	andne	r3, r3, #1
   18020:	mov	r0, r3
   18024:	str	r3, [sp, #92]	; 0x5c
   18028:	ldr	r3, [sp, #68]	; 0x44
   1802c:	sub	lr, lr, #2
   18030:	adds	r2, r3, #0
   18034:	movne	r2, #1
   18038:	and	r3, r1, ip
   1803c:	and	r3, r2, r3
   18040:	clz	lr, lr
   18044:	str	r3, [sp, #88]	; 0x58
   18048:	lsr	lr, lr, #5
   1804c:	mov	r3, ip
   18050:	and	r3, r3, lr
   18054:	mov	sl, #0
   18058:	and	r0, r2, r0
   1805c:	str	r3, [sp, #64]	; 0x40
   18060:	eor	r3, r1, #1
   18064:	str	lr, [sp, #52]	; 0x34
   18068:	str	r0, [sp, #48]	; 0x30
   1806c:	str	r3, [sp, #60]	; 0x3c
   18070:	ldr	r3, [sp, #24]
   18074:	cmn	r3, #1
   18078:	beq	185a8 <__assert_fail@plt+0x72d8>
   1807c:	subs	r7, r3, sl
   18080:	movne	r7, #1
   18084:	cmp	r7, #0
   18088:	beq	185c0 <__assert_fail@plt+0x72f0>
   1808c:	ldr	r3, [sp, #48]	; 0x30
   18090:	cmp	r3, #0
   18094:	beq	1892c <__assert_fail@plt+0x765c>
   18098:	ldr	r2, [sp, #68]	; 0x44
   1809c:	ldr	r1, [sp, #24]
   180a0:	cmp	r2, #1
   180a4:	mov	r3, r2
   180a8:	movls	r3, #0
   180ac:	movhi	r3, #1
   180b0:	cmn	r1, #1
   180b4:	movne	r3, #0
   180b8:	cmp	r3, #0
   180bc:	add	r4, sl, r2
   180c0:	beq	180d0 <__assert_fail@plt+0x6e00>
   180c4:	ldr	r0, [sp, #44]	; 0x2c
   180c8:	bl	11168 <strlen@plt>
   180cc:	str	r0, [sp, #24]
   180d0:	ldr	r3, [sp, #24]
   180d4:	cmp	r3, r4
   180d8:	ldr	r3, [sp, #44]	; 0x2c
   180dc:	add	r5, r3, sl
   180e0:	bcc	18934 <__assert_fail@plt+0x7664>
   180e4:	mov	r0, r5
   180e8:	ldr	r2, [sp, #68]	; 0x44
   180ec:	ldr	r1, [sp, #72]	; 0x48
   180f0:	bl	11048 <memcmp@plt>
   180f4:	cmp	r0, #0
   180f8:	bne	18934 <__assert_fail@plt+0x7664>
   180fc:	ldr	r3, [sp, #40]	; 0x28
   18100:	cmp	r3, #0
   18104:	bne	192f0 <__assert_fail@plt+0x8020>
   18108:	ldrb	r4, [r5]
   1810c:	cmp	r4, #126	; 0x7e
   18110:	ldrls	pc, [pc, r4, lsl #2]
   18114:	b	1922c <__assert_fail@plt+0x7f5c>
   18118:	andeq	r8, r1, ip, ror #15
   1811c:	andeq	r9, r1, ip, lsr #4
   18120:	andeq	r9, r1, ip, lsr #4
   18124:	andeq	r9, r1, ip, lsr #4
   18128:	andeq	r9, r1, ip, lsr #4
   1812c:	andeq	r9, r1, ip, lsr #4
   18130:	andeq	r9, r1, ip, lsr #4
   18134:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18138:	andeq	r8, r1, r4, asr #15
   1813c:	andeq	r8, r1, r0, lsr #15
   18140:	andeq	r8, r1, r0, lsl #15
   18144:			; <UNDEFINED> instruction: 0x000187b0
   18148:	andeq	r8, r1, r8, ror #13
   1814c:	andeq	r8, r1, ip, lsl r9
   18150:	andeq	r9, r1, ip, lsr #4
   18154:	andeq	r9, r1, ip, lsr #4
   18158:	andeq	r9, r1, ip, lsr #4
   1815c:	andeq	r9, r1, ip, lsr #4
   18160:	andeq	r9, r1, ip, lsr #4
   18164:	andeq	r9, r1, ip, lsr #4
   18168:	andeq	r9, r1, ip, lsr #4
   1816c:	andeq	r9, r1, ip, lsr #4
   18170:	andeq	r9, r1, ip, lsr #4
   18174:	andeq	r9, r1, ip, lsr #4
   18178:	andeq	r9, r1, ip, lsr #4
   1817c:	andeq	r9, r1, ip, lsr #4
   18180:	andeq	r9, r1, ip, lsr #4
   18184:	andeq	r9, r1, ip, lsr #4
   18188:	andeq	r9, r1, ip, lsr #4
   1818c:	andeq	r9, r1, ip, lsr #4
   18190:	andeq	r9, r1, ip, lsr #4
   18194:	andeq	r9, r1, ip, lsr #4
   18198:	andeq	r8, r1, ip, lsl #18
   1819c:	andeq	r8, r1, ip, ror #17
   181a0:	andeq	r8, r1, ip, ror #17
   181a4:	andeq	r8, r1, ip, asr #17
   181a8:	andeq	r8, r1, ip, ror #17
   181ac:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181b0:	andeq	r8, r1, ip, ror #17
   181b4:			; <UNDEFINED> instruction: 0x000186b4
   181b8:	andeq	r8, r1, ip, ror #17
   181bc:	andeq	r8, r1, ip, ror #17
   181c0:	andeq	r8, r1, ip, ror #17
   181c4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181c8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181cc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181d0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181d4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181d8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181dc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181e0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181e4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181e8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181ec:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181f0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181f4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181f8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181fc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18200:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18204:	andeq	r8, r1, ip, ror #17
   18208:	andeq	r8, r1, ip, ror #17
   1820c:	andeq	r8, r1, ip, ror #17
   18210:	andeq	r8, r1, ip, ror #17
   18214:	andeq	r8, r1, r4, ror #12
   18218:	andeq	r9, r1, ip, lsr #4
   1821c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18220:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18224:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18228:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1822c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18230:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18234:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18238:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1823c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18240:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18244:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18248:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1824c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18250:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18254:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18258:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1825c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18260:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18264:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18268:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1826c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18270:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18274:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18278:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1827c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18280:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18284:	andeq	r8, r1, ip, ror #17
   18288:	andeq	r8, r1, r0, lsr r6
   1828c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18290:	andeq	r8, r1, ip, ror #17
   18294:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18298:	andeq	r8, r1, ip, ror #17
   1829c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182a0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182a4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182a8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182ac:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182b0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182b4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182b8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182bc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182c0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182c4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182c8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182cc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182d0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182d4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182d8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182dc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182e0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182e4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182e8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182ec:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182f0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182f4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182f8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   182fc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18300:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18304:	andeq	r8, r1, r8, ror #9
   18308:	andeq	r8, r1, ip, ror #17
   1830c:	andeq	r8, r1, r8, ror #9
   18310:	andeq	r8, r1, ip, asr #17
   18314:	mov	r3, #1
   18318:	str	r3, [sp, #40]	; 0x28
   1831c:	str	r3, [sp, #68]	; 0x44
   18320:	mov	r8, #0
   18324:	ldr	r3, [pc, #4056]	; 19304 <__assert_fail@plt+0x8034>
   18328:	str	r3, [sp, #72]	; 0x48
   1832c:	mov	r3, #2
   18330:	str	r3, [sp, #176]	; 0xb0
   18334:	ldr	r1, [sp, #56]	; 0x38
   18338:	mov	r2, r3
   1833c:	ldr	ip, [sp, #40]	; 0x28
   18340:	mov	lr, r3
   18344:	b	18010 <__assert_fail@plt+0x6d40>
   18348:	mov	r3, #1
   1834c:	str	r3, [sp, #56]	; 0x38
   18350:	str	r3, [sp, #68]	; 0x44
   18354:	str	r3, [sp, #40]	; 0x28
   18358:	ldr	r3, [pc, #4004]	; 19304 <__assert_fail@plt+0x8034>
   1835c:	mov	r8, #0
   18360:	str	r3, [sp, #72]	; 0x48
   18364:	b	1832c <__assert_fail@plt+0x705c>
   18368:	mov	r3, #1
   1836c:	str	r3, [sp, #56]	; 0x38
   18370:	str	r3, [sp, #68]	; 0x44
   18374:	str	r3, [sp, #40]	; 0x28
   18378:	ldr	r3, [pc, #3976]	; 19308 <__assert_fail@plt+0x8038>
   1837c:	mov	r8, #0
   18380:	str	r3, [sp, #72]	; 0x48
   18384:	mov	r3, #5
   18388:	b	18330 <__assert_fail@plt+0x7060>
   1838c:	mov	r3, #0
   18390:	str	r3, [sp, #40]	; 0x28
   18394:	mov	r3, #1
   18398:	str	r3, [sp, #56]	; 0x38
   1839c:	mov	r8, #0
   183a0:	mov	r1, r3
   183a4:	ldr	r2, [sp, #176]	; 0xb0
   183a8:	ldr	ip, [sp, #40]	; 0x28
   183ac:	ldr	lr, [sp, #176]	; 0xb0
   183b0:	b	18010 <__assert_fail@plt+0x6d40>
   183b4:	ldr	r3, [sp, #176]	; 0xb0
   183b8:	cmp	r3, #10
   183bc:	beq	18400 <__assert_fail@plt+0x7130>
   183c0:	mov	r2, #5
   183c4:	ldr	r1, [pc, #3904]	; 1930c <__assert_fail@plt+0x803c>
   183c8:	mov	r0, #0
   183cc:	bl	11060 <dcgettext@plt>
   183d0:	ldr	r2, [pc, #3892]	; 1930c <__assert_fail@plt+0x803c>
   183d4:	cmp	r0, r2
   183d8:	str	r0, [sp, #188]	; 0xbc
   183dc:	beq	19498 <__assert_fail@plt+0x81c8>
   183e0:	mov	r2, #5
   183e4:	ldr	r1, [pc, #3864]	; 19304 <__assert_fail@plt+0x8034>
   183e8:	mov	r0, #0
   183ec:	bl	11060 <dcgettext@plt>
   183f0:	ldr	r2, [pc, #3852]	; 19304 <__assert_fail@plt+0x8034>
   183f4:	cmp	r0, r2
   183f8:	str	r0, [sp, #192]	; 0xc0
   183fc:	beq	19488 <__assert_fail@plt+0x81b8>
   18400:	ldr	r8, [sp, #40]	; 0x28
   18404:	cmp	r8, #0
   18408:	movne	r8, #0
   1840c:	bne	1843c <__assert_fail@plt+0x716c>
   18410:	ldr	r3, [sp, #188]	; 0xbc
   18414:	ldrb	r3, [r3]
   18418:	cmp	r3, #0
   1841c:	beq	1843c <__assert_fail@plt+0x716c>
   18420:	ldr	r2, [sp, #188]	; 0xbc
   18424:	cmp	fp, r8
   18428:	strbhi	r3, [r9, r8]
   1842c:	ldrb	r3, [r2, #1]!
   18430:	add	r8, r8, #1
   18434:	cmp	r3, #0
   18438:	bne	18424 <__assert_fail@plt+0x7154>
   1843c:	ldr	r0, [sp, #192]	; 0xc0
   18440:	bl	11168 <strlen@plt>
   18444:	ldr	r3, [sp, #192]	; 0xc0
   18448:	ldr	r2, [sp, #176]	; 0xb0
   1844c:	str	r3, [sp, #72]	; 0x48
   18450:	mov	r3, #1
   18454:	str	r3, [sp, #56]	; 0x38
   18458:	mov	r1, r3
   1845c:	ldr	ip, [sp, #40]	; 0x28
   18460:	ldr	lr, [sp, #176]	; 0xb0
   18464:	str	r0, [sp, #68]	; 0x44
   18468:	b	18010 <__assert_fail@plt+0x6d40>
   1846c:	ldr	r3, [sp, #40]	; 0x28
   18470:	cmp	r3, #0
   18474:	beq	1911c <__assert_fail@plt+0x7e4c>
   18478:	mov	r3, #1
   1847c:	str	r3, [sp, #68]	; 0x44
   18480:	ldr	r3, [pc, #3708]	; 19304 <__assert_fail@plt+0x8034>
   18484:	str	r3, [sp, #72]	; 0x48
   18488:	mov	r8, #0
   1848c:	ldr	r1, [sp, #56]	; 0x38
   18490:	ldr	r2, [sp, #176]	; 0xb0
   18494:	ldr	ip, [sp, #40]	; 0x28
   18498:	ldr	lr, [sp, #176]	; 0xb0
   1849c:	b	18010 <__assert_fail@plt+0x6d40>
   184a0:	ldr	r3, [sp, #40]	; 0x28
   184a4:	cmp	r3, #0
   184a8:	beq	191a0 <__assert_fail@plt+0x7ed0>
   184ac:	str	r3, [sp, #56]	; 0x38
   184b0:	mov	r3, #1
   184b4:	str	r3, [sp, #68]	; 0x44
   184b8:	ldr	r3, [pc, #3656]	; 19308 <__assert_fail@plt+0x8038>
   184bc:	b	18484 <__assert_fail@plt+0x71b4>
   184c0:	ldr	r3, [sp, #40]	; 0x28
   184c4:	cmp	r3, #0
   184c8:	mov	r3, #1
   184cc:	streq	r3, [sp, #56]	; 0x38
   184d0:	beq	1911c <__assert_fail@plt+0x7e4c>
   184d4:	str	r3, [sp, #68]	; 0x44
   184d8:	ldr	r3, [pc, #3620]	; 19304 <__assert_fail@plt+0x8034>
   184dc:	mov	r8, #0
   184e0:	str	r3, [sp, #72]	; 0x48
   184e4:	b	1832c <__assert_fail@plt+0x705c>
   184e8:	ldr	r3, [sp, #24]
   184ec:	ldr	r6, [sp, #48]	; 0x30
   184f0:	cmn	r3, #1
   184f4:	beq	18b50 <__assert_fail@plt+0x7880>
   184f8:	subs	r3, r3, #1
   184fc:	movne	r3, #1
   18500:	cmp	r3, #0
   18504:	beq	188d0 <__assert_fail@plt+0x7600>
   18508:	ldr	r1, [sp, #52]	; 0x34
   1850c:	mov	r7, r3
   18510:	mov	r3, #0
   18514:	str	r3, [sp, #32]
   18518:	ldr	r3, [sp, #60]	; 0x3c
   1851c:	orr	r2, r1, r3
   18520:	ldr	r3, [sp, #40]	; 0x28
   18524:	eor	r2, r2, #1
   18528:	orr	r2, r3, r2
   1852c:	tst	r2, #255	; 0xff
   18530:	bne	18e54 <__assert_fail@plt+0x7b84>
   18534:	cmp	r6, #0
   18538:	bne	18714 <__assert_fail@plt+0x7444>
   1853c:	ldr	r3, [sp, #36]	; 0x24
   18540:	add	sl, sl, #1
   18544:	and	r3, r3, r7
   18548:	uxtb	r6, r3
   1854c:	cmp	r6, #0
   18550:	beq	1857c <__assert_fail@plt+0x72ac>
   18554:	cmp	fp, r8
   18558:	movhi	r3, #39	; 0x27
   1855c:	strbhi	r3, [r9, r8]
   18560:	add	r3, r8, #1
   18564:	cmp	fp, r3
   18568:	movhi	r2, #39	; 0x27
   1856c:	add	r8, r8, #2
   18570:	strbhi	r2, [r9, r3]
   18574:	mov	r3, #0
   18578:	str	r3, [sp, #36]	; 0x24
   1857c:	ldr	r2, [sp, #32]
   18580:	cmp	r8, fp
   18584:	ldr	r3, [sp, #28]
   18588:	strbcc	r4, [r9, r8]
   1858c:	cmp	r2, #0
   18590:	moveq	r3, #0
   18594:	str	r3, [sp, #28]
   18598:	ldr	r3, [sp, #24]
   1859c:	add	r8, r8, #1
   185a0:	cmn	r3, #1
   185a4:	bne	1807c <__assert_fail@plt+0x6dac>
   185a8:	ldr	r3, [sp, #44]	; 0x2c
   185ac:	ldrb	r3, [r3, sl]
   185b0:	adds	r7, r3, #0
   185b4:	movne	r7, #1
   185b8:	cmp	r7, #0
   185bc:	bne	1808c <__assert_fail@plt+0x6dbc>
   185c0:	ldr	r3, [sp, #64]	; 0x40
   185c4:	cmp	r8, #0
   185c8:	movne	r3, #0
   185cc:	andeq	r3, r3, #1
   185d0:	cmp	r3, #0
   185d4:	str	r3, [sp, #64]	; 0x40
   185d8:	bne	1907c <__assert_fail@plt+0x7dac>
   185dc:	ldr	r3, [sp, #40]	; 0x28
   185e0:	ldr	r2, [sp, #52]	; 0x34
   185e4:	eor	r3, r3, #1
   185e8:	ands	r2, r2, r3
   185ec:	beq	194a8 <__assert_fail@plt+0x81d8>
   185f0:	ldr	r3, [sp, #76]	; 0x4c
   185f4:	cmp	r3, #0
   185f8:	beq	19478 <__assert_fail@plt+0x81a8>
   185fc:	ldr	r3, [sp, #28]
   18600:	cmp	r3, #0
   18604:	bne	19434 <__assert_fail@plt+0x8164>
   18608:	ldr	r2, [sp, #84]	; 0x54
   1860c:	clz	r3, fp
   18610:	cmp	r2, #0
   18614:	lsr	r3, r3, #5
   18618:	moveq	r3, #0
   1861c:	cmp	r3, #0
   18620:	beq	193d4 <__assert_fail@plt+0x8104>
   18624:	mov	fp, r2
   18628:	str	r3, [sp, #76]	; 0x4c
   1862c:	b	17fb8 <__assert_fail@plt+0x6ce8>
   18630:	ldr	r3, [sp, #176]	; 0xb0
   18634:	ldr	r6, [sp, #48]	; 0x30
   18638:	cmp	r3, #2
   1863c:	beq	18b74 <__assert_fail@plt+0x78a4>
   18640:	ldr	r3, [sp, #88]	; 0x58
   18644:	cmp	r3, #0
   18648:	beq	190f8 <__assert_fail@plt+0x7e28>
   1864c:	mov	r3, #0
   18650:	add	sl, sl, #1
   18654:	ldr	r6, [sp, #36]	; 0x24
   18658:	str	r3, [sp, #32]
   1865c:	mov	r4, #92	; 0x5c
   18660:	b	1854c <__assert_fail@plt+0x727c>
   18664:	ldr	r3, [sp, #176]	; 0xb0
   18668:	ldr	r6, [sp, #48]	; 0x30
   1866c:	cmp	r3, #2
   18670:	beq	18ba4 <__assert_fail@plt+0x78d4>
   18674:	cmp	r3, #5
   18678:	bne	19108 <__assert_fail@plt+0x7e38>
   1867c:	ldr	r3, [sp, #100]	; 0x64
   18680:	cmp	r3, #0
   18684:	beq	1916c <__assert_fail@plt+0x7e9c>
   18688:	ldr	r2, [sp, #24]
   1868c:	add	r3, sl, #2
   18690:	cmp	r2, r3
   18694:	bls	186a4 <__assert_fail@plt+0x73d4>
   18698:	ldrb	r4, [r5, #1]
   1869c:	cmp	r4, #63	; 0x3f
   186a0:	beq	19314 <__assert_fail@plt+0x8044>
   186a4:	mov	r1, #0
   186a8:	str	r1, [sp, #32]
   186ac:	mov	r4, #63	; 0x3f
   186b0:	b	18518 <__assert_fail@plt+0x7248>
   186b4:	ldr	r3, [sp, #176]	; 0xb0
   186b8:	ldr	r6, [sp, #48]	; 0x30
   186bc:	cmp	r3, #2
   186c0:	beq	18bd0 <__assert_fail@plt+0x7900>
   186c4:	str	r7, [sp, #32]
   186c8:	str	r7, [sp, #76]	; 0x4c
   186cc:	mov	r1, #0
   186d0:	mov	r4, #39	; 0x27
   186d4:	b	18518 <__assert_fail@plt+0x7248>
   186d8:	ldr	r6, [sp, #48]	; 0x30
   186dc:	ldr	r1, [sp, #52]	; 0x34
   186e0:	str	r7, [sp, #32]
   186e4:	b	18518 <__assert_fail@plt+0x7248>
   186e8:	ldr	r6, [sp, #48]	; 0x30
   186ec:	ldr	r1, [sp, #52]	; 0x34
   186f0:	mov	r4, #12
   186f4:	mov	r3, #102	; 0x66
   186f8:	ldr	r2, [sp, #56]	; 0x38
   186fc:	cmp	r2, #0
   18700:	streq	r2, [sp, #32]
   18704:	beq	18518 <__assert_fail@plt+0x7248>
   18708:	mov	r4, r3
   1870c:	mov	r3, #0
   18710:	str	r3, [sp, #32]
   18714:	ldr	r3, [sp, #40]	; 0x28
   18718:	cmp	r3, #0
   1871c:	bne	18e8c <__assert_fail@plt+0x7bbc>
   18720:	ldr	r3, [sp, #36]	; 0x24
   18724:	eor	r3, r3, #1
   18728:	and	r3, r3, r1
   1872c:	ands	r3, r3, #255	; 0xff
   18730:	beq	18768 <__assert_fail@plt+0x7498>
   18734:	cmp	fp, r8
   18738:	movhi	r2, #39	; 0x27
   1873c:	strbhi	r2, [r9, r8]
   18740:	add	r2, r8, #1
   18744:	cmp	fp, r2
   18748:	movhi	r1, #36	; 0x24
   1874c:	strbhi	r1, [r9, r2]
   18750:	add	r2, r8, #2
   18754:	cmp	fp, r2
   18758:	add	r8, r8, #3
   1875c:	movhi	r1, #39	; 0x27
   18760:	strbhi	r1, [r9, r2]
   18764:	str	r3, [sp, #36]	; 0x24
   18768:	cmp	fp, r8
   1876c:	movhi	r3, #92	; 0x5c
   18770:	strbhi	r3, [r9, r8]
   18774:	add	sl, sl, #1
   18778:	add	r8, r8, #1
   1877c:	b	1857c <__assert_fail@plt+0x72ac>
   18780:	ldr	r6, [sp, #48]	; 0x30
   18784:	mov	r4, #10
   18788:	mov	r3, #110	; 0x6e
   1878c:	ldr	r2, [sp, #64]	; 0x40
   18790:	cmp	r2, #0
   18794:	bne	19214 <__assert_fail@plt+0x7f44>
   18798:	ldr	r1, [sp, #52]	; 0x34
   1879c:	b	186f8 <__assert_fail@plt+0x7428>
   187a0:	ldr	r6, [sp, #48]	; 0x30
   187a4:	ldr	r1, [sp, #52]	; 0x34
   187a8:	mov	r3, #116	; 0x74
   187ac:	b	186f8 <__assert_fail@plt+0x7428>
   187b0:	ldr	r6, [sp, #48]	; 0x30
   187b4:	ldr	r1, [sp, #52]	; 0x34
   187b8:	mov	r4, #11
   187bc:	mov	r3, #118	; 0x76
   187c0:	b	186f8 <__assert_fail@plt+0x7428>
   187c4:	ldr	r6, [sp, #48]	; 0x30
   187c8:	ldr	r1, [sp, #52]	; 0x34
   187cc:	mov	r4, #8
   187d0:	mov	r3, #98	; 0x62
   187d4:	b	186f8 <__assert_fail@plt+0x7428>
   187d8:	ldr	r6, [sp, #48]	; 0x30
   187dc:	ldr	r1, [sp, #52]	; 0x34
   187e0:	mov	r4, #7
   187e4:	mov	r3, #97	; 0x61
   187e8:	b	186f8 <__assert_fail@plt+0x7428>
   187ec:	ldr	r3, [sp, #56]	; 0x38
   187f0:	ldr	r6, [sp, #48]	; 0x30
   187f4:	cmp	r3, #0
   187f8:	beq	18cbc <__assert_fail@plt+0x79ec>
   187fc:	ldr	r3, [sp, #40]	; 0x28
   18800:	cmp	r3, #0
   18804:	bne	192f0 <__assert_fail@plt+0x8020>
   18808:	ldr	r3, [sp, #36]	; 0x24
   1880c:	ldr	r2, [sp, #52]	; 0x34
   18810:	eor	r3, r3, #1
   18814:	ands	r3, r2, r3
   18818:	moveq	r2, r8
   1881c:	beq	18854 <__assert_fail@plt+0x7584>
   18820:	cmp	fp, r8
   18824:	movhi	r2, #39	; 0x27
   18828:	strbhi	r2, [r9, r8]
   1882c:	add	r2, r8, #1
   18830:	cmp	fp, r2
   18834:	movhi	r1, #36	; 0x24
   18838:	strbhi	r1, [r9, r2]
   1883c:	add	r2, r8, #2
   18840:	cmp	fp, r2
   18844:	movhi	r1, #39	; 0x27
   18848:	strbhi	r1, [r9, r2]
   1884c:	add	r2, r8, #3
   18850:	str	r3, [sp, #36]	; 0x24
   18854:	cmp	fp, r2
   18858:	movhi	r3, #92	; 0x5c
   1885c:	strbhi	r3, [r9, r2]
   18860:	ldr	r3, [sp, #92]	; 0x5c
   18864:	add	r8, r2, #1
   18868:	cmp	r3, #0
   1886c:	beq	191f0 <__assert_fail@plt+0x7f20>
   18870:	ldr	r1, [sp, #24]
   18874:	add	r3, sl, #1
   18878:	cmp	r1, r3
   1887c:	bls	188b4 <__assert_fail@plt+0x75e4>
   18880:	ldr	r1, [sp, #44]	; 0x2c
   18884:	ldrb	r3, [r1, r3]
   18888:	sub	r3, r3, #48	; 0x30
   1888c:	cmp	r3, #9
   18890:	bhi	188b4 <__assert_fail@plt+0x75e4>
   18894:	cmp	fp, r8
   18898:	movhi	r3, #48	; 0x30
   1889c:	strbhi	r3, [r9, r8]
   188a0:	add	r3, r2, #2
   188a4:	cmp	fp, r3
   188a8:	add	r8, r2, #3
   188ac:	movhi	r1, #48	; 0x30
   188b0:	strbhi	r1, [r9, r3]
   188b4:	ldr	r3, [sp, #40]	; 0x28
   188b8:	ldr	r1, [sp, #52]	; 0x34
   188bc:	mov	r7, r3
   188c0:	str	r3, [sp, #32]
   188c4:	mov	r4, #48	; 0x30
   188c8:	b	18518 <__assert_fail@plt+0x7248>
   188cc:	ldr	r6, [sp, #48]	; 0x30
   188d0:	cmp	sl, #0
   188d4:	streq	r7, [sp, #32]
   188d8:	beq	188f8 <__assert_fail@plt+0x7628>
   188dc:	mov	r3, #0
   188e0:	ldr	r1, [sp, #52]	; 0x34
   188e4:	str	r3, [sp, #32]
   188e8:	b	18518 <__assert_fail@plt+0x7248>
   188ec:	ldr	r6, [sp, #48]	; 0x30
   188f0:	mov	r3, #0
   188f4:	str	r3, [sp, #32]
   188f8:	ldr	r3, [sp, #64]	; 0x40
   188fc:	cmp	r3, #0
   18900:	bne	1907c <__assert_fail@plt+0x7dac>
   18904:	ldr	r1, [sp, #52]	; 0x34
   18908:	b	18518 <__assert_fail@plt+0x7248>
   1890c:	ldr	r3, [sp, #48]	; 0x30
   18910:	mov	r6, r3
   18914:	str	r3, [sp, #32]
   18918:	b	188f8 <__assert_fail@plt+0x7628>
   1891c:	ldr	r6, [sp, #48]	; 0x30
   18920:	mov	r4, #13
   18924:	mov	r3, #114	; 0x72
   18928:	b	1878c <__assert_fail@plt+0x74bc>
   1892c:	ldr	r3, [sp, #44]	; 0x2c
   18930:	add	r5, r3, sl
   18934:	ldrb	r4, [r5]
   18938:	cmp	r4, #126	; 0x7e
   1893c:	ldrls	pc, [pc, r4, lsl #2]
   18940:	b	18cdc <__assert_fail@plt+0x7a0c>
   18944:	andeq	r8, r1, ip, lsr #25
   18948:	ldrdeq	r8, [r1], -ip
   1894c:	ldrdeq	r8, [r1], -ip
   18950:	ldrdeq	r8, [r1], -ip
   18954:	ldrdeq	r8, [r1], -ip
   18958:	ldrdeq	r8, [r1], -ip
   1895c:	ldrdeq	r8, [r1], -ip
   18960:	andeq	r8, r1, r4, lsr #25
   18964:	muleq	r1, ip, ip
   18968:	muleq	r1, r0, ip
   1896c:	andeq	r8, r1, r8, lsl #25
   18970:	andeq	r8, r1, r0, lsl #25
   18974:	andeq	r8, r1, r8, ror ip
   18978:	andeq	r8, r1, r0, ror ip
   1897c:	ldrdeq	r8, [r1], -ip
   18980:	ldrdeq	r8, [r1], -ip
   18984:	ldrdeq	r8, [r1], -ip
   18988:	ldrdeq	r8, [r1], -ip
   1898c:	ldrdeq	r8, [r1], -ip
   18990:	ldrdeq	r8, [r1], -ip
   18994:	ldrdeq	r8, [r1], -ip
   18998:	ldrdeq	r8, [r1], -ip
   1899c:	ldrdeq	r8, [r1], -ip
   189a0:	ldrdeq	r8, [r1], -ip
   189a4:	ldrdeq	r8, [r1], -ip
   189a8:	ldrdeq	r8, [r1], -ip
   189ac:	ldrdeq	r8, [r1], -ip
   189b0:	ldrdeq	r8, [r1], -ip
   189b4:	ldrdeq	r8, [r1], -ip
   189b8:	ldrdeq	r8, [r1], -ip
   189bc:	ldrdeq	r8, [r1], -ip
   189c0:	ldrdeq	r8, [r1], -ip
   189c4:	andeq	r8, r1, r4, ror #24
   189c8:	andeq	r8, r1, ip, asr ip
   189cc:	andeq	r8, r1, ip, asr ip
   189d0:	andeq	r8, r1, r4, asr ip
   189d4:	andeq	r8, r1, ip, asr ip
   189d8:	andeq	r8, r1, ip, asr #24
   189dc:	andeq	r8, r1, ip, asr ip
   189e0:	andeq	r8, r1, r0, asr #23
   189e4:	andeq	r8, r1, ip, asr ip
   189e8:	andeq	r8, r1, ip, asr ip
   189ec:	andeq	r8, r1, ip, asr ip
   189f0:	andeq	r8, r1, ip, asr #24
   189f4:	andeq	r8, r1, ip, asr #24
   189f8:	andeq	r8, r1, ip, asr #24
   189fc:	andeq	r8, r1, ip, asr #24
   18a00:	andeq	r8, r1, ip, asr #24
   18a04:	andeq	r8, r1, ip, asr #24
   18a08:	andeq	r8, r1, ip, asr #24
   18a0c:	andeq	r8, r1, ip, asr #24
   18a10:	andeq	r8, r1, ip, asr #24
   18a14:	andeq	r8, r1, ip, asr #24
   18a18:	andeq	r8, r1, ip, asr #24
   18a1c:	andeq	r8, r1, ip, asr #24
   18a20:	andeq	r8, r1, ip, asr #24
   18a24:	andeq	r8, r1, ip, asr #24
   18a28:	andeq	r8, r1, ip, asr #24
   18a2c:	andeq	r8, r1, ip, asr #24
   18a30:	andeq	r8, r1, ip, asr ip
   18a34:	andeq	r8, r1, ip, asr ip
   18a38:	andeq	r8, r1, ip, asr ip
   18a3c:	andeq	r8, r1, ip, asr ip
   18a40:	muleq	r1, r4, fp
   18a44:	ldrdeq	r8, [r1], -ip
   18a48:	andeq	r8, r1, ip, asr #24
   18a4c:	andeq	r8, r1, ip, asr #24
   18a50:	andeq	r8, r1, ip, asr #24
   18a54:	andeq	r8, r1, ip, asr #24
   18a58:	andeq	r8, r1, ip, asr #24
   18a5c:	andeq	r8, r1, ip, asr #24
   18a60:	andeq	r8, r1, ip, asr #24
   18a64:	andeq	r8, r1, ip, asr #24
   18a68:	andeq	r8, r1, ip, asr #24
   18a6c:	andeq	r8, r1, ip, asr #24
   18a70:	andeq	r8, r1, ip, asr #24
   18a74:	andeq	r8, r1, ip, asr #24
   18a78:	andeq	r8, r1, ip, asr #24
   18a7c:	andeq	r8, r1, ip, asr #24
   18a80:	andeq	r8, r1, ip, asr #24
   18a84:	andeq	r8, r1, ip, asr #24
   18a88:	andeq	r8, r1, ip, asr #24
   18a8c:	andeq	r8, r1, ip, asr #24
   18a90:	andeq	r8, r1, ip, asr #24
   18a94:	andeq	r8, r1, ip, asr #24
   18a98:	andeq	r8, r1, ip, asr #24
   18a9c:	andeq	r8, r1, ip, asr #24
   18aa0:	andeq	r8, r1, ip, asr #24
   18aa4:	andeq	r8, r1, ip, asr #24
   18aa8:	andeq	r8, r1, ip, asr #24
   18aac:	andeq	r8, r1, ip, asr #24
   18ab0:	andeq	r8, r1, ip, asr ip
   18ab4:	andeq	r8, r1, r4, ror #22
   18ab8:	andeq	r8, r1, ip, asr #24
   18abc:	andeq	r8, r1, ip, asr ip
   18ac0:	andeq	r8, r1, ip, asr #24
   18ac4:	andeq	r8, r1, ip, asr ip
   18ac8:	andeq	r8, r1, ip, asr #24
   18acc:	andeq	r8, r1, ip, asr #24
   18ad0:	andeq	r8, r1, ip, asr #24
   18ad4:	andeq	r8, r1, ip, asr #24
   18ad8:	andeq	r8, r1, ip, asr #24
   18adc:	andeq	r8, r1, ip, asr #24
   18ae0:	andeq	r8, r1, ip, asr #24
   18ae4:	andeq	r8, r1, ip, asr #24
   18ae8:	andeq	r8, r1, ip, asr #24
   18aec:	andeq	r8, r1, ip, asr #24
   18af0:	andeq	r8, r1, ip, asr #24
   18af4:	andeq	r8, r1, ip, asr #24
   18af8:	andeq	r8, r1, ip, asr #24
   18afc:	andeq	r8, r1, ip, asr #24
   18b00:	andeq	r8, r1, ip, asr #24
   18b04:	andeq	r8, r1, ip, asr #24
   18b08:	andeq	r8, r1, ip, asr #24
   18b0c:	andeq	r8, r1, ip, asr #24
   18b10:	andeq	r8, r1, ip, asr #24
   18b14:	andeq	r8, r1, ip, asr #24
   18b18:	andeq	r8, r1, ip, asr #24
   18b1c:	andeq	r8, r1, ip, asr #24
   18b20:	andeq	r8, r1, ip, asr #24
   18b24:	andeq	r8, r1, ip, asr #24
   18b28:	andeq	r8, r1, ip, asr #24
   18b2c:	andeq	r8, r1, ip, asr #24
   18b30:	andeq	r8, r1, r0, asr #22
   18b34:	andeq	r8, r1, ip, asr ip
   18b38:	andeq	r8, r1, r0, asr #22
   18b3c:	andeq	r8, r1, r4, asr ip
   18b40:	ldr	r3, [sp, #24]
   18b44:	mov	r6, #0
   18b48:	cmn	r3, #1
   18b4c:	bne	184f8 <__assert_fail@plt+0x7228>
   18b50:	ldr	r3, [sp, #44]	; 0x2c
   18b54:	ldrb	r3, [r3, #1]
   18b58:	adds	r3, r3, #0
   18b5c:	movne	r3, #1
   18b60:	b	18500 <__assert_fail@plt+0x7230>
   18b64:	ldr	r3, [sp, #176]	; 0xb0
   18b68:	mov	r6, #0
   18b6c:	cmp	r3, #2
   18b70:	bne	18640 <__assert_fail@plt+0x7370>
   18b74:	ldr	r3, [sp, #64]	; 0x40
   18b78:	cmp	r3, #0
   18b7c:	bne	193b4 <__assert_fail@plt+0x80e4>
   18b80:	add	sl, sl, #1
   18b84:	ldr	r6, [sp, #36]	; 0x24
   18b88:	str	r3, [sp, #32]
   18b8c:	mov	r4, #92	; 0x5c
   18b90:	b	1854c <__assert_fail@plt+0x727c>
   18b94:	ldr	r3, [sp, #176]	; 0xb0
   18b98:	mov	r6, #0
   18b9c:	cmp	r3, #2
   18ba0:	bne	18674 <__assert_fail@plt+0x73a4>
   18ba4:	ldr	r3, [sp, #40]	; 0x28
   18ba8:	cmp	r3, #0
   18bac:	bne	18e90 <__assert_fail@plt+0x7bc0>
   18bb0:	mov	r1, r7
   18bb4:	str	r3, [sp, #32]
   18bb8:	mov	r4, #63	; 0x3f
   18bbc:	b	18518 <__assert_fail@plt+0x7248>
   18bc0:	ldr	r3, [sp, #176]	; 0xb0
   18bc4:	mov	r6, #0
   18bc8:	cmp	r3, #2
   18bcc:	bne	186c4 <__assert_fail@plt+0x73f4>
   18bd0:	ldr	r3, [sp, #64]	; 0x40
   18bd4:	cmp	r3, #0
   18bd8:	bne	193b4 <__assert_fail@plt+0x80e4>
   18bdc:	ldr	r2, [sp, #84]	; 0x54
   18be0:	adds	r3, fp, #0
   18be4:	movne	r3, #1
   18be8:	cmp	r2, #0
   18bec:	movne	r3, #0
   18bf0:	cmp	r3, #0
   18bf4:	strne	fp, [sp, #84]	; 0x54
   18bf8:	movne	fp, #0
   18bfc:	bne	18c2c <__assert_fail@plt+0x795c>
   18c00:	cmp	fp, r8
   18c04:	movhi	r3, #39	; 0x27
   18c08:	strbhi	r3, [r9, r8]
   18c0c:	add	r3, r8, #1
   18c10:	cmp	fp, r3
   18c14:	movhi	r2, #92	; 0x5c
   18c18:	strbhi	r2, [r9, r3]
   18c1c:	add	r3, r8, #2
   18c20:	cmp	fp, r3
   18c24:	movhi	r2, #39	; 0x27
   18c28:	strbhi	r2, [r9, r3]
   18c2c:	ldr	r3, [sp, #64]	; 0x40
   18c30:	add	r8, r8, #3
   18c34:	mov	r1, r7
   18c38:	str	r7, [sp, #32]
   18c3c:	str	r7, [sp, #76]	; 0x4c
   18c40:	str	r3, [sp, #36]	; 0x24
   18c44:	mov	r4, #39	; 0x27
   18c48:	b	18518 <__assert_fail@plt+0x7248>
   18c4c:	mov	r6, #0
   18c50:	b	186dc <__assert_fail@plt+0x740c>
   18c54:	mov	r6, #0
   18c58:	b	188d0 <__assert_fail@plt+0x7600>
   18c5c:	mov	r6, #0
   18c60:	b	188f0 <__assert_fail@plt+0x7620>
   18c64:	str	r7, [sp, #32]
   18c68:	mov	r6, #0
   18c6c:	b	188f8 <__assert_fail@plt+0x7628>
   18c70:	mov	r6, #0
   18c74:	b	18920 <__assert_fail@plt+0x7650>
   18c78:	mov	r6, #0
   18c7c:	b	186ec <__assert_fail@plt+0x741c>
   18c80:	mov	r6, #0
   18c84:	b	187b4 <__assert_fail@plt+0x74e4>
   18c88:	mov	r6, #0
   18c8c:	b	18784 <__assert_fail@plt+0x74b4>
   18c90:	mov	r6, #0
   18c94:	mov	r3, #116	; 0x74
   18c98:	b	1878c <__assert_fail@plt+0x74bc>
   18c9c:	mov	r6, #0
   18ca0:	b	187c8 <__assert_fail@plt+0x74f8>
   18ca4:	mov	r6, #0
   18ca8:	b	187dc <__assert_fail@plt+0x750c>
   18cac:	ldr	r3, [sp, #56]	; 0x38
   18cb0:	mov	r6, #0
   18cb4:	cmp	r3, #0
   18cb8:	bne	187fc <__assert_fail@plt+0x752c>
   18cbc:	ldr	r3, [sp, #96]	; 0x60
   18cc0:	cmp	r3, #0
   18cc4:	addne	sl, sl, #1
   18cc8:	bne	18070 <__assert_fail@plt+0x6da0>
   18ccc:	ldr	r1, [sp, #52]	; 0x34
   18cd0:	str	r3, [sp, #32]
   18cd4:	mov	r4, r3
   18cd8:	b	18518 <__assert_fail@plt+0x7248>
   18cdc:	mov	r6, #0
   18ce0:	ldr	r3, [sp, #80]	; 0x50
   18ce4:	cmp	r3, #1
   18ce8:	bne	18ed8 <__assert_fail@plt+0x7c08>
   18cec:	bl	11150 <__ctype_b_loc@plt>
   18cf0:	ldr	r2, [sp, #80]	; 0x50
   18cf4:	sxth	r3, r4
   18cf8:	mov	r1, r2
   18cfc:	lsl	r3, r3, #1
   18d00:	ldr	r2, [r0]
   18d04:	ldrh	r3, [r2, r3]
   18d08:	and	r3, r3, #16384	; 0x4000
   18d0c:	cmp	r3, #0
   18d10:	movne	r3, #1
   18d14:	moveq	r3, #0
   18d18:	str	r3, [sp, #32]
   18d1c:	moveq	r3, #1
   18d20:	movne	r3, #0
   18d24:	ldr	r2, [sp, #56]	; 0x38
   18d28:	and	r3, r3, r2
   18d2c:	ands	r3, r3, #255	; 0xff
   18d30:	beq	18904 <__assert_fail@plt+0x7634>
   18d34:	add	r1, sl, r1
   18d38:	mov	r0, #0
   18d3c:	ldr	r7, [sp, #40]	; 0x28
   18d40:	ldr	r2, [sp, #36]	; 0x24
   18d44:	ldr	lr, [sp, #52]	; 0x34
   18d48:	b	18df8 <__assert_fail@plt+0x7b28>
   18d4c:	cmp	r7, #0
   18d50:	bne	1914c <__assert_fail@plt+0x7e7c>
   18d54:	eor	r0, r2, #1
   18d58:	ands	r0, lr, r0
   18d5c:	beq	18d94 <__assert_fail@plt+0x7ac4>
   18d60:	cmp	fp, r8
   18d64:	movhi	r2, #39	; 0x27
   18d68:	strbhi	r2, [r9, r8]
   18d6c:	add	r2, r8, #1
   18d70:	cmp	fp, r2
   18d74:	movhi	ip, #36	; 0x24
   18d78:	strbhi	ip, [r9, r2]
   18d7c:	add	r2, r8, #2
   18d80:	cmp	fp, r2
   18d84:	movhi	ip, #39	; 0x27
   18d88:	strbhi	ip, [r9, r2]
   18d8c:	add	r8, r8, #3
   18d90:	mov	r2, r0
   18d94:	cmp	fp, r8
   18d98:	movhi	r0, #92	; 0x5c
   18d9c:	strbhi	r0, [r9, r8]
   18da0:	add	r0, r8, #1
   18da4:	cmp	fp, r0
   18da8:	lsrhi	ip, r4, #6
   18dac:	addhi	ip, ip, #48	; 0x30
   18db0:	strbhi	ip, [r9, r0]
   18db4:	add	ip, r8, #2
   18db8:	cmp	fp, ip
   18dbc:	lsrhi	r0, r4, #3
   18dc0:	andhi	r0, r0, #7
   18dc4:	addhi	r0, r0, #48	; 0x30
   18dc8:	add	sl, sl, #1
   18dcc:	strbhi	r0, [r9, ip]
   18dd0:	and	r4, r4, #7
   18dd4:	cmp	sl, r1
   18dd8:	add	r4, r4, #48	; 0x30
   18ddc:	add	r8, r8, #3
   18de0:	bcs	19164 <__assert_fail@plt+0x7e94>
   18de4:	mov	r0, r3
   18de8:	cmp	fp, r8
   18dec:	strbhi	r4, [r9, r8]
   18df0:	ldrb	r4, [r5, #1]!
   18df4:	add	r8, r8, #1
   18df8:	cmp	r3, #0
   18dfc:	bne	18d4c <__assert_fail@plt+0x7a7c>
   18e00:	cmp	r6, #0
   18e04:	bne	18ea8 <__assert_fail@plt+0x7bd8>
   18e08:	eor	r6, r0, #1
   18e0c:	and	r6, r6, r2
   18e10:	add	sl, sl, #1
   18e14:	cmp	r1, sl
   18e18:	uxtb	r6, r6
   18e1c:	bls	18ed0 <__assert_fail@plt+0x7c00>
   18e20:	cmp	r6, #0
   18e24:	beq	18de8 <__assert_fail@plt+0x7b18>
   18e28:	cmp	fp, r8
   18e2c:	movhi	r2, #39	; 0x27
   18e30:	strbhi	r2, [r9, r8]
   18e34:	add	r2, r8, #1
   18e38:	cmp	fp, r2
   18e3c:	movhi	ip, #39	; 0x27
   18e40:	strbhi	ip, [r9, r2]
   18e44:	add	r8, r8, #2
   18e48:	mov	r6, r3
   18e4c:	mov	r2, r3
   18e50:	b	18de8 <__assert_fail@plt+0x7b18>
   18e54:	ldr	r3, [sp, #184]	; 0xb8
   18e58:	cmp	r3, #0
   18e5c:	beq	18534 <__assert_fail@plt+0x7264>
   18e60:	lsr	r2, r4, #5
   18e64:	mov	r0, r3
   18e68:	uxtb	r2, r2
   18e6c:	and	r3, r4, #31
   18e70:	ldr	r2, [r0, r2, lsl #2]
   18e74:	lsr	r3, r2, r3
   18e78:	tst	r3, #1
   18e7c:	beq	18534 <__assert_fail@plt+0x7264>
   18e80:	ldr	r3, [sp, #40]	; 0x28
   18e84:	cmp	r3, #0
   18e88:	beq	18720 <__assert_fail@plt+0x7450>
   18e8c:	mov	r3, r1
   18e90:	str	r3, [sp, #64]	; 0x40
   18e94:	mov	sl, r9
   18e98:	ldr	r3, [sp, #56]	; 0x38
   18e9c:	mov	r9, fp
   18ea0:	ldr	r2, [sp, #64]	; 0x40
   18ea4:	b	19094 <__assert_fail@plt+0x7dc4>
   18ea8:	cmp	fp, r8
   18eac:	eor	r6, r0, #1
   18eb0:	movhi	ip, #92	; 0x5c
   18eb4:	and	r6, r6, r2
   18eb8:	add	sl, sl, #1
   18ebc:	strbhi	ip, [r9, r8]
   18ec0:	cmp	r1, sl
   18ec4:	add	r8, r8, #1
   18ec8:	uxtb	r6, r6
   18ecc:	bhi	18e20 <__assert_fail@plt+0x7b50>
   18ed0:	str	r2, [sp, #36]	; 0x24
   18ed4:	b	1854c <__assert_fail@plt+0x727c>
   18ed8:	ldr	r3, [sp, #24]
   18edc:	cmn	r3, #1
   18ee0:	mov	r3, #0
   18ee4:	str	r3, [sp, #128]	; 0x80
   18ee8:	str	r3, [sp, #132]	; 0x84
   18eec:	beq	191e0 <__assert_fail@plt+0x7f10>
   18ef0:	mov	r2, r7
   18ef4:	mov	r3, #0
   18ef8:	str	r7, [sp, #104]	; 0x68
   18efc:	str	r5, [sp, #116]	; 0x74
   18f00:	mov	r7, r3
   18f04:	mov	r5, r2
   18f08:	str	r4, [sp, #32]
   18f0c:	str	r6, [sp, #108]	; 0x6c
   18f10:	str	r8, [sp, #112]	; 0x70
   18f14:	ldr	r3, [sp, #44]	; 0x2c
   18f18:	add	r6, sl, r7
   18f1c:	add	r4, r3, r6
   18f20:	ldr	r3, [sp, #24]
   18f24:	mov	r1, r4
   18f28:	sub	r2, r3, r6
   18f2c:	add	r0, sp, #124	; 0x7c
   18f30:	add	r3, sp, #128	; 0x80
   18f34:	bl	1d558 <__assert_fail@plt+0xc288>
   18f38:	subs	r8, r0, #0
   18f3c:	beq	192c4 <__assert_fail@plt+0x7ff4>
   18f40:	cmn	r8, #1
   18f44:	beq	1929c <__assert_fail@plt+0x7fcc>
   18f48:	cmn	r8, #2
   18f4c:	beq	19234 <__assert_fail@plt+0x7f64>
   18f50:	ldr	r3, [sp, #64]	; 0x40
   18f54:	cmp	r3, #0
   18f58:	beq	19018 <__assert_fail@plt+0x7d48>
   18f5c:	cmp	r8, #1
   18f60:	beq	19018 <__assert_fail@plt+0x7d48>
   18f64:	sub	r3, r8, #1
   18f68:	add	r6, r3, r6
   18f6c:	ldr	r3, [sp, #44]	; 0x2c
   18f70:	add	r6, r3, r6
   18f74:	ldrb	r3, [r4, #1]!
   18f78:	sub	r3, r3, #91	; 0x5b
   18f7c:	cmp	r3, #33	; 0x21
   18f80:	ldrls	pc, [pc, r3, lsl #2]
   18f84:	b	19010 <__assert_fail@plt+0x7d40>
   18f88:	andeq	r9, r1, ip, ror r0
   18f8c:	andeq	r9, r1, ip, ror r0
   18f90:	andeq	r9, r1, r0, lsl r0
   18f94:	andeq	r9, r1, ip, ror r0
   18f98:	andeq	r9, r1, r0, lsl r0
   18f9c:	andeq	r9, r1, ip, ror r0
   18fa0:	andeq	r9, r1, r0, lsl r0
   18fa4:	andeq	r9, r1, r0, lsl r0
   18fa8:	andeq	r9, r1, r0, lsl r0
   18fac:	andeq	r9, r1, r0, lsl r0
   18fb0:	andeq	r9, r1, r0, lsl r0
   18fb4:	andeq	r9, r1, r0, lsl r0
   18fb8:	andeq	r9, r1, r0, lsl r0
   18fbc:	andeq	r9, r1, r0, lsl r0
   18fc0:	andeq	r9, r1, r0, lsl r0
   18fc4:	andeq	r9, r1, r0, lsl r0
   18fc8:	andeq	r9, r1, r0, lsl r0
   18fcc:	andeq	r9, r1, r0, lsl r0
   18fd0:	andeq	r9, r1, r0, lsl r0
   18fd4:	andeq	r9, r1, r0, lsl r0
   18fd8:	andeq	r9, r1, r0, lsl r0
   18fdc:	andeq	r9, r1, r0, lsl r0
   18fe0:	andeq	r9, r1, r0, lsl r0
   18fe4:	andeq	r9, r1, r0, lsl r0
   18fe8:	andeq	r9, r1, r0, lsl r0
   18fec:	andeq	r9, r1, r0, lsl r0
   18ff0:	andeq	r9, r1, r0, lsl r0
   18ff4:	andeq	r9, r1, r0, lsl r0
   18ff8:	andeq	r9, r1, r0, lsl r0
   18ffc:	andeq	r9, r1, r0, lsl r0
   19000:	andeq	r9, r1, r0, lsl r0
   19004:	andeq	r9, r1, r0, lsl r0
   19008:	andeq	r9, r1, r0, lsl r0
   1900c:	andeq	r9, r1, ip, ror r0
   19010:	cmp	r6, r4
   19014:	bne	18f74 <__assert_fail@plt+0x7ca4>
   19018:	ldr	r0, [sp, #124]	; 0x7c
   1901c:	bl	1109c <iswprint@plt>
   19020:	add	r7, r7, r8
   19024:	cmp	r0, #0
   19028:	add	r0, sp, #128	; 0x80
   1902c:	moveq	r5, #0
   19030:	bl	1103c <mbsinit@plt>
   19034:	cmp	r0, #0
   19038:	beq	18f14 <__assert_fail@plt+0x7c44>
   1903c:	ldr	r4, [sp, #32]
   19040:	str	r5, [sp, #32]
   19044:	ldr	r3, [sp, #32]
   19048:	mov	r1, r7
   1904c:	eor	r3, r3, #1
   19050:	ldr	r7, [sp, #104]	; 0x68
   19054:	ldr	r6, [sp, #108]	; 0x6c
   19058:	ldr	r8, [sp, #112]	; 0x70
   1905c:	ldr	r5, [sp, #116]	; 0x74
   19060:	uxtb	r3, r3
   19064:	cmp	r1, #1
   19068:	bls	18d24 <__assert_fail@plt+0x7a54>
   1906c:	ldr	r2, [sp, #56]	; 0x38
   19070:	and	r3, r3, r2
   19074:	uxtb	r3, r3
   19078:	b	18d34 <__assert_fail@plt+0x7a64>
   1907c:	mov	r3, #2
   19080:	str	r3, [sp, #176]	; 0xb0
   19084:	ldr	r2, [sp, #64]	; 0x40
   19088:	ldr	r3, [sp, #56]	; 0x38
   1908c:	mov	sl, r9
   19090:	mov	r9, fp
   19094:	and	r3, r3, r2
   19098:	tst	r3, #255	; 0xff
   1909c:	ldr	r3, [sp, #176]	; 0xb0
   190a0:	movne	r3, #4
   190a4:	str	r3, [sp, #176]	; 0xb0
   190a8:	ldr	r3, [sp, #180]	; 0xb4
   190ac:	mov	ip, #0
   190b0:	bic	r3, r3, #2
   190b4:	str	r3, [sp, #4]
   190b8:	ldr	r3, [sp, #192]	; 0xc0
   190bc:	ldr	r2, [sp, #44]	; 0x2c
   190c0:	str	r3, [sp, #16]
   190c4:	ldr	r3, [sp, #188]	; 0xbc
   190c8:	mov	r1, r9
   190cc:	str	r3, [sp, #12]
   190d0:	ldr	r3, [sp, #176]	; 0xb0
   190d4:	mov	r0, sl
   190d8:	str	r3, [sp]
   190dc:	str	ip, [sp, #8]
   190e0:	ldr	r3, [sp, #24]
   190e4:	bl	17f44 <__assert_fail@plt+0x6c74>
   190e8:	mov	fp, r0
   190ec:	mov	r0, fp
   190f0:	add	sp, sp, #140	; 0x8c
   190f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190f8:	mov	r4, #92	; 0x5c
   190fc:	mov	r1, #0
   19100:	mov	r3, r4
   19104:	b	186f8 <__assert_fail@plt+0x7428>
   19108:	mov	r3, #0
   1910c:	ldr	r1, [sp, #52]	; 0x34
   19110:	str	r3, [sp, #32]
   19114:	mov	r4, #63	; 0x3f
   19118:	b	18518 <__assert_fail@plt+0x7248>
   1911c:	cmp	fp, #0
   19120:	beq	1917c <__assert_fail@plt+0x7eac>
   19124:	mov	r3, #39	; 0x27
   19128:	strb	r3, [r9]
   1912c:	mov	r3, #0
   19130:	str	r3, [sp, #40]	; 0x28
   19134:	mov	r3, #1
   19138:	str	r3, [sp, #68]	; 0x44
   1913c:	ldr	r3, [pc, #448]	; 19304 <__assert_fail@plt+0x8034>
   19140:	mov	r8, #1
   19144:	str	r3, [sp, #72]	; 0x48
   19148:	b	1832c <__assert_fail@plt+0x705c>
   1914c:	ldr	r3, [sp, #40]	; 0x28
   19150:	mov	sl, r9
   19154:	str	r3, [sp, #56]	; 0x38
   19158:	mov	r9, fp
   1915c:	ldr	r2, [sp, #64]	; 0x40
   19160:	b	19094 <__assert_fail@plt+0x7dc4>
   19164:	str	r2, [sp, #36]	; 0x24
   19168:	b	1857c <__assert_fail@plt+0x72ac>
   1916c:	mov	r1, #0
   19170:	str	r3, [sp, #32]
   19174:	mov	r4, #63	; 0x3f
   19178:	b	18518 <__assert_fail@plt+0x7248>
   1917c:	ldr	r3, [pc, #384]	; 19304 <__assert_fail@plt+0x8034>
   19180:	str	r3, [sp, #72]	; 0x48
   19184:	mov	r3, #0
   19188:	str	r3, [sp, #40]	; 0x28
   1918c:	mov	r3, #1
   19190:	str	r3, [sp, #68]	; 0x44
   19194:	mov	r8, r3
   19198:	b	1832c <__assert_fail@plt+0x705c>
   1919c:	bl	11294 <abort@plt>
   191a0:	cmp	fp, #0
   191a4:	beq	19204 <__assert_fail@plt+0x7f34>
   191a8:	mov	r2, #1
   191ac:	mov	r3, #34	; 0x22
   191b0:	strb	r3, [r9]
   191b4:	mov	r8, r2
   191b8:	mov	r3, r2
   191bc:	str	r2, [sp, #68]	; 0x44
   191c0:	str	r3, [sp, #56]	; 0x38
   191c4:	ldr	r3, [pc, #316]	; 19308 <__assert_fail@plt+0x8038>
   191c8:	ldr	r1, [sp, #56]	; 0x38
   191cc:	str	r3, [sp, #72]	; 0x48
   191d0:	ldr	r2, [sp, #176]	; 0xb0
   191d4:	ldr	ip, [sp, #40]	; 0x28
   191d8:	ldr	lr, [sp, #176]	; 0xb0
   191dc:	b	18010 <__assert_fail@plt+0x6d40>
   191e0:	ldr	r0, [sp, #44]	; 0x2c
   191e4:	bl	11168 <strlen@plt>
   191e8:	str	r0, [sp, #24]
   191ec:	b	18ef0 <__assert_fail@plt+0x7c20>
   191f0:	mov	r7, #0
   191f4:	ldr	r1, [sp, #52]	; 0x34
   191f8:	str	r3, [sp, #32]
   191fc:	mov	r4, #48	; 0x30
   19200:	b	18518 <__assert_fail@plt+0x7248>
   19204:	mov	r3, #1
   19208:	str	r3, [sp, #68]	; 0x44
   1920c:	mov	r8, r3
   19210:	b	191c0 <__assert_fail@plt+0x7ef0>
   19214:	mov	r3, #2
   19218:	mov	sl, r9
   1921c:	str	r3, [sp, #176]	; 0xb0
   19220:	mov	r9, fp
   19224:	ldr	r3, [sp, #56]	; 0x38
   19228:	b	19094 <__assert_fail@plt+0x7dc4>
   1922c:	ldr	r6, [sp, #48]	; 0x30
   19230:	b	18ce0 <__assert_fail@plt+0x7a10>
   19234:	ldr	r0, [sp, #24]
   19238:	mov	ip, r6
   1923c:	cmp	r0, ip
   19240:	mov	r1, r7
   19244:	mov	r2, r4
   19248:	ldr	r7, [sp, #104]	; 0x68
   1924c:	ldr	r4, [sp, #32]
   19250:	ldr	r6, [sp, #108]	; 0x6c
   19254:	ldr	r8, [sp, #112]	; 0x70
   19258:	ldr	r5, [sp, #116]	; 0x74
   1925c:	bls	1928c <__assert_fail@plt+0x7fbc>
   19260:	ldrb	r3, [r2]
   19264:	cmp	r3, #0
   19268:	bne	1927c <__assert_fail@plt+0x7fac>
   1926c:	b	1939c <__assert_fail@plt+0x80cc>
   19270:	ldrb	r3, [r2, #1]!
   19274:	cmp	r3, #0
   19278:	beq	1939c <__assert_fail@plt+0x80cc>
   1927c:	add	r1, r1, #1
   19280:	add	r3, sl, r1
   19284:	cmp	r0, r3
   19288:	bhi	19270 <__assert_fail@plt+0x7fa0>
   1928c:	mov	r2, #0
   19290:	mov	r3, r7
   19294:	str	r2, [sp, #32]
   19298:	b	19064 <__assert_fail@plt+0x7d94>
   1929c:	mov	r1, r7
   192a0:	ldr	r7, [sp, #104]	; 0x68
   192a4:	mov	r2, #0
   192a8:	ldr	r4, [sp, #32]
   192ac:	ldr	r6, [sp, #108]	; 0x6c
   192b0:	ldr	r8, [sp, #112]	; 0x70
   192b4:	ldr	r5, [sp, #116]	; 0x74
   192b8:	mov	r3, r7
   192bc:	str	r2, [sp, #32]
   192c0:	b	19064 <__assert_fail@plt+0x7d94>
   192c4:	mov	r3, r5
   192c8:	eor	r3, r3, #1
   192cc:	ldr	r4, [sp, #32]
   192d0:	mov	r1, r7
   192d4:	str	r5, [sp, #32]
   192d8:	ldr	r7, [sp, #104]	; 0x68
   192dc:	ldr	r6, [sp, #108]	; 0x6c
   192e0:	ldr	r8, [sp, #112]	; 0x70
   192e4:	ldr	r5, [sp, #116]	; 0x74
   192e8:	uxtb	r3, r3
   192ec:	b	19064 <__assert_fail@plt+0x7d94>
   192f0:	mov	sl, r9
   192f4:	str	r3, [sp, #56]	; 0x38
   192f8:	mov	r9, fp
   192fc:	ldr	r2, [sp, #64]	; 0x40
   19300:	b	19094 <__assert_fail@plt+0x7dc4>
   19304:	ldrdeq	lr, [r1], -r0
   19308:	andeq	lr, r1, ip, asr #31
   1930c:	ldrdeq	lr, [r1], -r4
   19310:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   19314:	ldr	r2, [sp, #44]	; 0x2c
   19318:	ldrb	r1, [r2, r3]
   1931c:	sub	r2, r1, #33	; 0x21
   19320:	uxtb	r2, r2
   19324:	cmp	r2, #29
   19328:	bhi	193a8 <__assert_fail@plt+0x80d8>
   1932c:	ldr	r0, [pc, #-36]	; 19310 <__assert_fail@plt+0x8040>
   19330:	mov	ip, #1
   19334:	ands	r2, r0, ip, lsl r2
   19338:	beq	193c8 <__assert_fail@plt+0x80f8>
   1933c:	ldr	r2, [sp, #40]	; 0x28
   19340:	cmp	r2, #0
   19344:	bne	194bc <__assert_fail@plt+0x81ec>
   19348:	add	r2, r8, #1
   1934c:	cmp	fp, r8
   19350:	strbhi	r4, [r9, r8]
   19354:	cmp	fp, r2
   19358:	movhi	r0, #34	; 0x22
   1935c:	strbhi	r0, [r9, r2]
   19360:	add	r2, r8, #2
   19364:	cmp	fp, r2
   19368:	movhi	r0, #34	; 0x22
   1936c:	strbhi	r0, [r9, r2]
   19370:	add	r2, r8, #3
   19374:	cmp	fp, r2
   19378:	mov	sl, r3
   1937c:	ldr	r3, [sp, #40]	; 0x28
   19380:	movhi	r0, #63	; 0x3f
   19384:	mov	r4, r1
   19388:	strbhi	r0, [r9, r2]
   1938c:	add	r8, r8, #4
   19390:	mov	r1, r3
   19394:	str	r3, [sp, #32]
   19398:	b	18518 <__assert_fail@plt+0x7248>
   1939c:	str	r3, [sp, #32]
   193a0:	mov	r3, r7
   193a4:	b	19064 <__assert_fail@plt+0x7d94>
   193a8:	mov	r1, #0
   193ac:	str	r1, [sp, #32]
   193b0:	b	18518 <__assert_fail@plt+0x7248>
   193b4:	mov	sl, r9
   193b8:	ldr	r3, [sp, #56]	; 0x38
   193bc:	mov	r9, fp
   193c0:	ldr	r2, [sp, #64]	; 0x40
   193c4:	b	19094 <__assert_fail@plt+0x7dc4>
   193c8:	str	r2, [sp, #32]
   193cc:	mov	r1, #0
   193d0:	b	18518 <__assert_fail@plt+0x7248>
   193d4:	ldr	r2, [sp, #76]	; 0x4c
   193d8:	mov	sl, r9
   193dc:	mov	r9, fp
   193e0:	mov	fp, r8
   193e4:	ldr	r1, [sp, #72]	; 0x48
   193e8:	cmp	r1, #0
   193ec:	moveq	r3, #0
   193f0:	andne	r3, r2, #1
   193f4:	cmp	r3, #0
   193f8:	beq	19424 <__assert_fail@plt+0x8154>
   193fc:	ldrb	r3, [r1]
   19400:	cmp	r3, #0
   19404:	beq	19424 <__assert_fail@plt+0x8154>
   19408:	mov	r2, r1
   1940c:	cmp	r9, fp
   19410:	strbhi	r3, [sl, fp]
   19414:	ldrb	r3, [r2, #1]!
   19418:	add	fp, fp, #1
   1941c:	cmp	r3, #0
   19420:	bne	1940c <__assert_fail@plt+0x813c>
   19424:	cmp	r9, fp
   19428:	movhi	r3, #0
   1942c:	strbhi	r3, [sl, fp]
   19430:	b	190ec <__assert_fail@plt+0x7e1c>
   19434:	ldr	r3, [sp, #192]	; 0xc0
   19438:	mov	ip, #5
   1943c:	str	r3, [sp, #16]
   19440:	ldr	r3, [sp, #188]	; 0xbc
   19444:	ldr	r2, [sp, #44]	; 0x2c
   19448:	str	r3, [sp, #12]
   1944c:	ldr	r3, [sp, #184]	; 0xb8
   19450:	ldr	r1, [sp, #84]	; 0x54
   19454:	str	r3, [sp, #8]
   19458:	ldr	r3, [sp, #180]	; 0xb4
   1945c:	mov	r0, r9
   19460:	str	r3, [sp, #4]
   19464:	str	ip, [sp]
   19468:	ldr	r3, [sp, #24]
   1946c:	bl	17f44 <__assert_fail@plt+0x6c74>
   19470:	mov	fp, r0
   19474:	b	190ec <__assert_fail@plt+0x7e1c>
   19478:	mov	sl, r9
   1947c:	mov	r9, fp
   19480:	mov	fp, r8
   19484:	b	193e4 <__assert_fail@plt+0x8114>
   19488:	ldr	r1, [sp, #176]	; 0xb0
   1948c:	bl	17e24 <__assert_fail@plt+0x6b54>
   19490:	str	r0, [sp, #192]	; 0xc0
   19494:	b	18400 <__assert_fail@plt+0x7130>
   19498:	ldr	r1, [sp, #176]	; 0xb0
   1949c:	bl	17e24 <__assert_fail@plt+0x6b54>
   194a0:	str	r0, [sp, #188]	; 0xbc
   194a4:	b	183e0 <__assert_fail@plt+0x7110>
   194a8:	mov	sl, r9
   194ac:	mov	r2, r3
   194b0:	mov	r9, fp
   194b4:	mov	fp, r8
   194b8:	b	193e4 <__assert_fail@plt+0x8114>
   194bc:	mov	sl, r9
   194c0:	mov	r9, fp
   194c4:	b	190a8 <__assert_fail@plt+0x7dd8>
   194c8:	push	{r4, r5, r6, lr}
   194cc:	mov	r5, r0
   194d0:	bl	11180 <__errno_location@plt>
   194d4:	cmp	r5, #0
   194d8:	mov	r1, #48	; 0x30
   194dc:	mov	r4, r0
   194e0:	ldr	r0, [pc, #16]	; 194f8 <__assert_fail@plt+0x8228>
   194e4:	ldr	r6, [r4]
   194e8:	movne	r0, r5
   194ec:	bl	1ce2c <__assert_fail@plt+0xbb5c>
   194f0:	str	r6, [r4]
   194f4:	pop	{r4, r5, r6, pc}
   194f8:	andeq	r0, r3, r0, asr #3
   194fc:	ldr	r3, [pc, #12]	; 19510 <__assert_fail@plt+0x8240>
   19500:	cmp	r0, #0
   19504:	moveq	r0, r3
   19508:	ldr	r0, [r0]
   1950c:	bx	lr
   19510:	andeq	r0, r3, r0, asr #3
   19514:	ldr	r3, [pc, #12]	; 19528 <__assert_fail@plt+0x8258>
   19518:	cmp	r0, #0
   1951c:	moveq	r0, r3
   19520:	str	r1, [r0]
   19524:	bx	lr
   19528:	andeq	r0, r3, r0, asr #3
   1952c:	ldr	r3, [pc, #52]	; 19568 <__assert_fail@plt+0x8298>
   19530:	cmp	r0, #0
   19534:	moveq	r0, r3
   19538:	add	r3, r0, #8
   1953c:	push	{lr}		; (str lr, [sp, #-4]!)
   19540:	lsr	lr, r1, #5
   19544:	and	r1, r1, #31
   19548:	ldr	ip, [r3, lr, lsl #2]
   1954c:	lsr	r0, ip, r1
   19550:	eor	r2, r2, r0
   19554:	and	r2, r2, #1
   19558:	and	r0, r0, #1
   1955c:	eor	r1, ip, r2, lsl r1
   19560:	str	r1, [r3, lr, lsl #2]
   19564:	pop	{pc}		; (ldr pc, [sp], #4)
   19568:	andeq	r0, r3, r0, asr #3
   1956c:	ldr	r3, [pc, #16]	; 19584 <__assert_fail@plt+0x82b4>
   19570:	cmp	r0, #0
   19574:	movne	r3, r0
   19578:	ldr	r0, [r3, #4]
   1957c:	str	r1, [r3, #4]
   19580:	bx	lr
   19584:	andeq	r0, r3, r0, asr #3
   19588:	ldr	r3, [pc, #44]	; 195bc <__assert_fail@plt+0x82ec>
   1958c:	cmp	r0, #0
   19590:	moveq	r0, r3
   19594:	mov	ip, #10
   19598:	cmp	r2, #0
   1959c:	cmpne	r1, #0
   195a0:	str	ip, [r0]
   195a4:	beq	195b4 <__assert_fail@plt+0x82e4>
   195a8:	str	r1, [r0, #40]	; 0x28
   195ac:	str	r2, [r0, #44]	; 0x2c
   195b0:	bx	lr
   195b4:	push	{r4, lr}
   195b8:	bl	11294 <abort@plt>
   195bc:	andeq	r0, r3, r0, asr #3
   195c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   195c4:	sub	sp, sp, #24
   195c8:	ldr	ip, [pc, #108]	; 1963c <__assert_fail@plt+0x836c>
   195cc:	ldr	r4, [sp, #56]	; 0x38
   195d0:	mov	r9, r2
   195d4:	cmp	r4, #0
   195d8:	moveq	r4, ip
   195dc:	mov	sl, r3
   195e0:	mov	r7, r0
   195e4:	mov	r8, r1
   195e8:	bl	11180 <__errno_location@plt>
   195ec:	ldr	r3, [r4, #44]	; 0x2c
   195f0:	mov	r1, r8
   195f4:	ldr	r6, [r0]
   195f8:	str	r3, [sp, #16]
   195fc:	ldr	r2, [r4, #40]	; 0x28
   19600:	add	r3, r4, #8
   19604:	str	r3, [sp, #8]
   19608:	str	r2, [sp, #12]
   1960c:	ldr	r2, [r4, #4]
   19610:	mov	r5, r0
   19614:	str	r2, [sp, #4]
   19618:	ldr	ip, [r4]
   1961c:	mov	r3, sl
   19620:	mov	r2, r9
   19624:	mov	r0, r7
   19628:	str	ip, [sp]
   1962c:	bl	17f44 <__assert_fail@plt+0x6c74>
   19630:	str	r6, [r5]
   19634:	add	sp, sp, #24
   19638:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1963c:	andeq	r0, r3, r0, asr #3
   19640:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19644:	cmp	r2, #0
   19648:	sub	sp, sp, #36	; 0x24
   1964c:	ldr	r4, [pc, #164]	; 196f8 <__assert_fail@plt+0x8428>
   19650:	mov	r8, r1
   19654:	movne	r4, r2
   19658:	mov	r7, r0
   1965c:	bl	11180 <__errno_location@plt>
   19660:	ldr	r3, [r4, #44]	; 0x2c
   19664:	ldr	r5, [r4, #4]
   19668:	add	r9, r4, #8
   1966c:	orr	r5, r5, #1
   19670:	mov	r1, #0
   19674:	mov	r2, r7
   19678:	ldr	fp, [r0]
   1967c:	str	r3, [sp, #16]
   19680:	ldr	r3, [r4, #40]	; 0x28
   19684:	stmib	sp, {r5, r9}
   19688:	str	r3, [sp, #12]
   1968c:	ldr	r3, [r4]
   19690:	mov	r6, r0
   19694:	str	r3, [sp]
   19698:	mov	r0, r1
   1969c:	mov	r3, r8
   196a0:	bl	17f44 <__assert_fail@plt+0x6c74>
   196a4:	add	r1, r0, #1
   196a8:	mov	r0, r1
   196ac:	str	r1, [sp, #28]
   196b0:	bl	1c8e8 <__assert_fail@plt+0xb618>
   196b4:	ldr	r3, [r4, #44]	; 0x2c
   196b8:	ldr	r1, [sp, #28]
   196bc:	str	r3, [sp, #16]
   196c0:	ldr	r3, [r4, #40]	; 0x28
   196c4:	str	r5, [sp, #4]
   196c8:	str	r3, [sp, #12]
   196cc:	str	r9, [sp, #8]
   196d0:	ldr	ip, [r4]
   196d4:	mov	r3, r8
   196d8:	mov	r2, r7
   196dc:	str	ip, [sp]
   196e0:	mov	sl, r0
   196e4:	bl	17f44 <__assert_fail@plt+0x6c74>
   196e8:	mov	r0, sl
   196ec:	str	fp, [r6]
   196f0:	add	sp, sp, #36	; 0x24
   196f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196f8:	andeq	r0, r3, r0, asr #3
   196fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19700:	cmp	r3, #0
   19704:	sub	sp, sp, #44	; 0x2c
   19708:	ldr	r4, [pc, #192]	; 197d0 <__assert_fail@plt+0x8500>
   1970c:	mov	r6, r2
   19710:	movne	r4, r3
   19714:	mov	r9, r1
   19718:	mov	r8, r0
   1971c:	bl	11180 <__errno_location@plt>
   19720:	ldr	r3, [r4, #44]	; 0x2c
   19724:	ldr	r5, [r4, #4]
   19728:	add	sl, r4, #8
   1972c:	cmp	r6, #0
   19730:	orreq	r5, r5, #1
   19734:	mov	r1, #0
   19738:	ldr	r2, [r0]
   1973c:	str	r3, [sp, #16]
   19740:	ldr	r3, [r4, #40]	; 0x28
   19744:	stmib	sp, {r5, sl}
   19748:	str	r3, [sp, #12]
   1974c:	ldr	r3, [r4]
   19750:	mov	r7, r0
   19754:	str	r2, [sp, #28]
   19758:	str	r3, [sp]
   1975c:	mov	r2, r8
   19760:	mov	r3, r9
   19764:	mov	r0, r1
   19768:	bl	17f44 <__assert_fail@plt+0x6c74>
   1976c:	add	r1, r0, #1
   19770:	mov	fp, r0
   19774:	mov	r0, r1
   19778:	str	r1, [sp, #36]	; 0x24
   1977c:	bl	1c8e8 <__assert_fail@plt+0xb618>
   19780:	ldr	r3, [r4, #44]	; 0x2c
   19784:	mov	r2, r8
   19788:	str	r3, [sp, #16]
   1978c:	ldr	r3, [r4, #40]	; 0x28
   19790:	str	r5, [sp, #4]
   19794:	str	r3, [sp, #12]
   19798:	str	sl, [sp, #8]
   1979c:	ldr	ip, [r4]
   197a0:	ldr	r1, [sp, #36]	; 0x24
   197a4:	mov	r3, r9
   197a8:	str	ip, [sp]
   197ac:	str	r0, [sp, #32]
   197b0:	bl	17f44 <__assert_fail@plt+0x6c74>
   197b4:	ldr	r2, [sp, #28]
   197b8:	cmp	r6, #0
   197bc:	str	r2, [r7]
   197c0:	ldr	r0, [sp, #32]
   197c4:	strne	fp, [r6]
   197c8:	add	sp, sp, #44	; 0x2c
   197cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197d0:	andeq	r0, r3, r0, asr #3
   197d4:	push	{r4, r5, r6, r7, r8, lr}
   197d8:	ldr	r6, [pc, #116]	; 19854 <__assert_fail@plt+0x8584>
   197dc:	ldr	r3, [r6, #4]
   197e0:	ldr	r7, [r6]
   197e4:	cmp	r3, #1
   197e8:	movgt	r5, r7
   197ec:	movgt	r4, #1
   197f0:	ble	19810 <__assert_fail@plt+0x8540>
   197f4:	ldr	r0, [r5, #12]
   197f8:	bl	13bb0 <__assert_fail@plt+0x28e0>
   197fc:	ldr	r3, [r6, #4]
   19800:	add	r4, r4, #1
   19804:	cmp	r3, r4
   19808:	add	r5, r5, #8
   1980c:	bgt	197f4 <__assert_fail@plt+0x8524>
   19810:	ldr	r0, [r7, #4]
   19814:	ldr	r4, [pc, #60]	; 19858 <__assert_fail@plt+0x8588>
   19818:	cmp	r0, r4
   1981c:	beq	19830 <__assert_fail@plt+0x8560>
   19820:	bl	13bb0 <__assert_fail@plt+0x28e0>
   19824:	mov	r3, #256	; 0x100
   19828:	str	r4, [r6, #12]
   1982c:	str	r3, [r6, #8]
   19830:	ldr	r4, [pc, #36]	; 1985c <__assert_fail@plt+0x858c>
   19834:	cmp	r7, r4
   19838:	beq	19848 <__assert_fail@plt+0x8578>
   1983c:	mov	r0, r7
   19840:	bl	13bb0 <__assert_fail@plt+0x28e0>
   19844:	str	r4, [r6]
   19848:	mov	r3, #1
   1984c:	str	r3, [r6, #4]
   19850:	pop	{r4, r5, r6, r7, r8, pc}
   19854:	andeq	r0, r3, r8, lsr r1
   19858:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1985c:	andeq	r0, r3, r0, asr #2
   19860:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19864:	sub	sp, sp, #44	; 0x2c
   19868:	mov	r5, r0
   1986c:	mov	sl, r1
   19870:	bl	11180 <__errno_location@plt>
   19874:	ldr	r4, [pc, #400]	; 19a0c <__assert_fail@plt+0x873c>
   19878:	cmn	r5, #-2147483647	; 0x80000001
   1987c:	ldr	r6, [r4]
   19880:	mov	r8, r0
   19884:	movne	r0, #0
   19888:	moveq	r0, #1
   1988c:	ldr	r3, [r8]
   19890:	orrs	r0, r0, r5, lsr #31
   19894:	str	r3, [sp, #24]
   19898:	bne	19a08 <__assert_fail@plt+0x8738>
   1989c:	ldr	r2, [r4, #4]
   198a0:	cmp	r5, r2
   198a4:	blt	19904 <__assert_fail@plt+0x8634>
   198a8:	add	r7, r4, #8
   198ac:	cmp	r6, r7
   198b0:	str	r2, [sp, #36]	; 0x24
   198b4:	beq	199d8 <__assert_fail@plt+0x8708>
   198b8:	mov	r3, #8
   198bc:	sub	r2, r5, r2
   198c0:	mov	r0, r6
   198c4:	str	r3, [sp]
   198c8:	add	r2, r2, #1
   198cc:	mvn	r3, #-2147483648	; 0x80000000
   198d0:	add	r1, sp, #36	; 0x24
   198d4:	bl	1cb04 <__assert_fail@plt+0xb834>
   198d8:	mov	r6, r0
   198dc:	str	r0, [r4]
   198e0:	ldr	r0, [r4, #4]
   198e4:	ldr	r2, [sp, #36]	; 0x24
   198e8:	mov	r1, #0
   198ec:	sub	r2, r2, r0
   198f0:	add	r0, r6, r0, lsl #3
   198f4:	lsl	r2, r2, #3
   198f8:	bl	11198 <memset@plt>
   198fc:	ldr	r3, [sp, #36]	; 0x24
   19900:	str	r3, [r4, #4]
   19904:	ldr	r4, [pc, #260]	; 19a10 <__assert_fail@plt+0x8740>
   19908:	add	fp, r6, r5, lsl #3
   1990c:	ldr	r9, [r6, r5, lsl #3]
   19910:	ldr	r0, [r4, #4]
   19914:	ldr	r3, [r4]
   19918:	ldr	r7, [fp, #4]
   1991c:	ldr	r1, [r4, #44]	; 0x2c
   19920:	ldr	r2, [r4, #40]	; 0x28
   19924:	orr	r0, r0, #1
   19928:	str	r3, [sp]
   1992c:	add	r3, r4, #8
   19930:	str	r0, [sp, #28]
   19934:	str	r0, [sp, #4]
   19938:	str	r1, [sp, #16]
   1993c:	str	r2, [sp, #12]
   19940:	str	r3, [sp, #8]
   19944:	mov	r0, r7
   19948:	mov	r1, r9
   1994c:	mvn	r3, #0
   19950:	mov	r2, sl
   19954:	bl	17f44 <__assert_fail@plt+0x6c74>
   19958:	cmp	r9, r0
   1995c:	bhi	199c4 <__assert_fail@plt+0x86f4>
   19960:	add	r3, r4, #48	; 0x30
   19964:	add	r9, r0, #1
   19968:	cmp	r7, r3
   1996c:	str	r9, [r6, r5, lsl #3]
   19970:	beq	1997c <__assert_fail@plt+0x86ac>
   19974:	mov	r0, r7
   19978:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1997c:	mov	r0, r9
   19980:	bl	1c8e8 <__assert_fail@plt+0xb618>
   19984:	ldr	ip, [r4, #44]	; 0x2c
   19988:	ldr	r3, [r4]
   1998c:	ldr	lr, [r4, #40]	; 0x28
   19990:	ldr	r4, [pc, #124]	; 19a14 <__assert_fail@plt+0x8744>
   19994:	mov	r2, sl
   19998:	mov	r1, r9
   1999c:	str	r0, [fp, #4]
   199a0:	str	r4, [sp, #8]
   199a4:	ldr	r4, [sp, #28]
   199a8:	str	r3, [sp]
   199ac:	str	r4, [sp, #4]
   199b0:	str	ip, [sp, #16]
   199b4:	str	lr, [sp, #12]
   199b8:	mvn	r3, #0
   199bc:	mov	r7, r0
   199c0:	bl	17f44 <__assert_fail@plt+0x6c74>
   199c4:	ldr	r3, [sp, #24]
   199c8:	mov	r0, r7
   199cc:	str	r3, [r8]
   199d0:	add	sp, sp, #44	; 0x2c
   199d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199d8:	mov	r3, #8
   199dc:	sub	r2, r5, r2
   199e0:	str	r3, [sp]
   199e4:	add	r1, sp, #36	; 0x24
   199e8:	add	r2, r2, #1
   199ec:	mvn	r3, #-2147483648	; 0x80000000
   199f0:	bl	1cb04 <__assert_fail@plt+0xb834>
   199f4:	mov	r6, r0
   199f8:	ldm	r7, {r0, r1}
   199fc:	str	r6, [r4]
   19a00:	stm	r6, {r0, r1}
   19a04:	b	198e0 <__assert_fail@plt+0x8610>
   19a08:	bl	11294 <abort@plt>
   19a0c:	andeq	r0, r3, r8, lsr r1
   19a10:	andeq	r0, r3, r0, asr #3
   19a14:	andeq	r0, r3, r8, asr #3
   19a18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a1c:	sub	sp, sp, #52	; 0x34
   19a20:	mov	r5, r0
   19a24:	mov	sl, r1
   19a28:	mov	fp, r2
   19a2c:	bl	11180 <__errno_location@plt>
   19a30:	ldr	r4, [pc, #408]	; 19bd0 <__assert_fail@plt+0x8900>
   19a34:	cmn	r5, #-2147483647	; 0x80000001
   19a38:	ldr	r6, [r4]
   19a3c:	mov	r8, r0
   19a40:	movne	r0, #0
   19a44:	moveq	r0, #1
   19a48:	ldr	r3, [r8]
   19a4c:	orrs	r0, r0, r5, lsr #31
   19a50:	str	r3, [sp, #28]
   19a54:	bne	19bcc <__assert_fail@plt+0x88fc>
   19a58:	ldr	r2, [r4, #4]
   19a5c:	cmp	r5, r2
   19a60:	blt	19ac0 <__assert_fail@plt+0x87f0>
   19a64:	add	r7, r4, #8
   19a68:	cmp	r6, r7
   19a6c:	str	r2, [sp, #44]	; 0x2c
   19a70:	beq	19b9c <__assert_fail@plt+0x88cc>
   19a74:	mov	r3, #8
   19a78:	sub	r2, r5, r2
   19a7c:	mov	r0, r6
   19a80:	str	r3, [sp]
   19a84:	add	r2, r2, #1
   19a88:	mvn	r3, #-2147483648	; 0x80000000
   19a8c:	add	r1, sp, #44	; 0x2c
   19a90:	bl	1cb04 <__assert_fail@plt+0xb834>
   19a94:	mov	r6, r0
   19a98:	str	r0, [r4]
   19a9c:	ldr	r0, [r4, #4]
   19aa0:	ldr	r2, [sp, #44]	; 0x2c
   19aa4:	mov	r1, #0
   19aa8:	sub	r2, r2, r0
   19aac:	add	r0, r6, r0, lsl #3
   19ab0:	lsl	r2, r2, #3
   19ab4:	bl	11198 <memset@plt>
   19ab8:	ldr	r3, [sp, #44]	; 0x2c
   19abc:	str	r3, [r4, #4]
   19ac0:	ldr	r4, [pc, #268]	; 19bd4 <__assert_fail@plt+0x8904>
   19ac4:	add	r3, r6, r5, lsl #3
   19ac8:	str	r3, [sp, #32]
   19acc:	ldr	r7, [r3, #4]
   19ad0:	ldr	r0, [r4, #4]
   19ad4:	ldr	r3, [r4]
   19ad8:	ldr	r9, [r6, r5, lsl #3]
   19adc:	ldr	r1, [r4, #44]	; 0x2c
   19ae0:	ldr	r2, [r4, #40]	; 0x28
   19ae4:	orr	r0, r0, #1
   19ae8:	str	r3, [sp]
   19aec:	add	r3, r4, #8
   19af0:	str	r0, [sp, #36]	; 0x24
   19af4:	str	r0, [sp, #4]
   19af8:	str	r1, [sp, #16]
   19afc:	str	r2, [sp, #12]
   19b00:	str	r3, [sp, #8]
   19b04:	mov	r0, r7
   19b08:	mov	r1, r9
   19b0c:	mov	r3, fp
   19b10:	mov	r2, sl
   19b14:	bl	17f44 <__assert_fail@plt+0x6c74>
   19b18:	cmp	r9, r0
   19b1c:	bhi	19b88 <__assert_fail@plt+0x88b8>
   19b20:	add	r3, r4, #48	; 0x30
   19b24:	add	r9, r0, #1
   19b28:	cmp	r7, r3
   19b2c:	str	r9, [r6, r5, lsl #3]
   19b30:	beq	19b3c <__assert_fail@plt+0x886c>
   19b34:	mov	r0, r7
   19b38:	bl	13bb0 <__assert_fail@plt+0x28e0>
   19b3c:	mov	r0, r9
   19b40:	bl	1c8e8 <__assert_fail@plt+0xb618>
   19b44:	ldr	ip, [sp, #32]
   19b48:	ldr	lr, [r4, #44]	; 0x2c
   19b4c:	ldr	r5, [r4, #40]	; 0x28
   19b50:	mov	r3, fp
   19b54:	mov	r2, sl
   19b58:	mov	r1, r9
   19b5c:	str	r0, [ip, #4]
   19b60:	ldr	ip, [r4]
   19b64:	ldr	r4, [pc, #108]	; 19bd8 <__assert_fail@plt+0x8908>
   19b68:	str	lr, [sp, #16]
   19b6c:	str	r4, [sp, #8]
   19b70:	ldr	r4, [sp, #36]	; 0x24
   19b74:	str	r5, [sp, #12]
   19b78:	str	r4, [sp, #4]
   19b7c:	str	ip, [sp]
   19b80:	mov	r7, r0
   19b84:	bl	17f44 <__assert_fail@plt+0x6c74>
   19b88:	ldr	r3, [sp, #28]
   19b8c:	mov	r0, r7
   19b90:	str	r3, [r8]
   19b94:	add	sp, sp, #52	; 0x34
   19b98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b9c:	mov	r3, #8
   19ba0:	sub	r2, r5, r2
   19ba4:	str	r3, [sp]
   19ba8:	add	r1, sp, #44	; 0x2c
   19bac:	add	r2, r2, #1
   19bb0:	mvn	r3, #-2147483648	; 0x80000000
   19bb4:	bl	1cb04 <__assert_fail@plt+0xb834>
   19bb8:	mov	r6, r0
   19bbc:	ldm	r7, {r0, r1}
   19bc0:	str	r6, [r4]
   19bc4:	stm	r6, {r0, r1}
   19bc8:	b	19a9c <__assert_fail@plt+0x87cc>
   19bcc:	bl	11294 <abort@plt>
   19bd0:	andeq	r0, r3, r8, lsr r1
   19bd4:	andeq	r0, r3, r0, asr #3
   19bd8:	andeq	r0, r3, r8, asr #3
   19bdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19be0:	sub	sp, sp, #44	; 0x2c
   19be4:	mov	sl, r0
   19be8:	bl	11180 <__errno_location@plt>
   19bec:	ldr	r4, [pc, #352]	; 19d54 <__assert_fail@plt+0x8a84>
   19bf0:	ldr	r2, [r4, #4]
   19bf4:	ldr	r5, [r4]
   19bf8:	cmp	r2, #0
   19bfc:	ldr	r3, [r0]
   19c00:	mov	r8, r0
   19c04:	str	r3, [sp, #28]
   19c08:	bgt	19c64 <__assert_fail@plt+0x8994>
   19c0c:	add	r6, r4, #8
   19c10:	cmp	r5, r6
   19c14:	str	r2, [sp, #36]	; 0x24
   19c18:	beq	19d24 <__assert_fail@plt+0x8a54>
   19c1c:	mov	r3, #8
   19c20:	mov	r0, r5
   19c24:	str	r3, [sp]
   19c28:	rsb	r2, r2, #1
   19c2c:	mvn	r3, #-2147483648	; 0x80000000
   19c30:	add	r1, sp, #36	; 0x24
   19c34:	bl	1cb04 <__assert_fail@plt+0xb834>
   19c38:	mov	r5, r0
   19c3c:	str	r0, [r4]
   19c40:	ldr	r0, [r4, #4]
   19c44:	ldr	r2, [sp, #36]	; 0x24
   19c48:	mov	r1, #0
   19c4c:	sub	r2, r2, r0
   19c50:	add	r0, r5, r0, lsl #3
   19c54:	lsl	r2, r2, #3
   19c58:	bl	11198 <memset@plt>
   19c5c:	ldr	r3, [sp, #36]	; 0x24
   19c60:	str	r3, [r4, #4]
   19c64:	ldr	r4, [pc, #236]	; 19d58 <__assert_fail@plt+0x8a88>
   19c68:	ldr	r9, [r5]
   19c6c:	ldr	r6, [r5, #4]
   19c70:	ldr	r7, [r4, #4]
   19c74:	ldr	r1, [r4, #44]	; 0x2c
   19c78:	ldr	r2, [r4, #40]	; 0x28
   19c7c:	ldr	r3, [r4]
   19c80:	orr	r7, r7, #1
   19c84:	add	fp, r4, #8
   19c88:	str	r1, [sp, #16]
   19c8c:	str	r2, [sp, #12]
   19c90:	str	r3, [sp]
   19c94:	str	r7, [sp, #4]
   19c98:	str	fp, [sp, #8]
   19c9c:	mov	r1, r9
   19ca0:	mov	r0, r6
   19ca4:	mvn	r3, #0
   19ca8:	mov	r2, sl
   19cac:	bl	17f44 <__assert_fail@plt+0x6c74>
   19cb0:	cmp	r9, r0
   19cb4:	bhi	19d10 <__assert_fail@plt+0x8a40>
   19cb8:	add	r3, r4, #48	; 0x30
   19cbc:	add	r9, r0, #1
   19cc0:	cmp	r6, r3
   19cc4:	str	r9, [r5]
   19cc8:	beq	19cd4 <__assert_fail@plt+0x8a04>
   19ccc:	mov	r0, r6
   19cd0:	bl	13bb0 <__assert_fail@plt+0x28e0>
   19cd4:	mov	r0, r9
   19cd8:	bl	1c8e8 <__assert_fail@plt+0xb618>
   19cdc:	ldr	ip, [r4, #44]	; 0x2c
   19ce0:	ldr	r3, [r4]
   19ce4:	ldr	lr, [r4, #40]	; 0x28
   19ce8:	mov	r2, sl
   19cec:	mov	r1, r9
   19cf0:	str	r0, [r5, #4]
   19cf4:	str	r3, [sp]
   19cf8:	stmib	sp, {r7, fp}
   19cfc:	str	ip, [sp, #16]
   19d00:	str	lr, [sp, #12]
   19d04:	mvn	r3, #0
   19d08:	mov	r6, r0
   19d0c:	bl	17f44 <__assert_fail@plt+0x6c74>
   19d10:	ldr	r3, [sp, #28]
   19d14:	mov	r0, r6
   19d18:	str	r3, [r8]
   19d1c:	add	sp, sp, #44	; 0x2c
   19d20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d24:	mov	r3, #8
   19d28:	str	r3, [sp]
   19d2c:	add	r1, sp, #36	; 0x24
   19d30:	rsb	r2, r2, #1
   19d34:	mvn	r3, #-2147483648	; 0x80000000
   19d38:	mov	r0, #0
   19d3c:	bl	1cb04 <__assert_fail@plt+0xb834>
   19d40:	mov	r5, r0
   19d44:	ldm	r6, {r0, r1}
   19d48:	str	r5, [r4]
   19d4c:	stm	r5, {r0, r1}
   19d50:	b	19c40 <__assert_fail@plt+0x8970>
   19d54:	andeq	r0, r3, r8, lsr r1
   19d58:	andeq	r0, r3, r0, asr #3
   19d5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d60:	sub	sp, sp, #44	; 0x2c
   19d64:	mov	r9, r0
   19d68:	mov	sl, r1
   19d6c:	bl	11180 <__errno_location@plt>
   19d70:	ldr	r4, [pc, #364]	; 19ee4 <__assert_fail@plt+0x8c14>
   19d74:	ldr	r2, [r4, #4]
   19d78:	ldr	r5, [r4]
   19d7c:	cmp	r2, #0
   19d80:	ldr	r3, [r0]
   19d84:	mov	r7, r0
   19d88:	str	r3, [sp, #24]
   19d8c:	bgt	19de8 <__assert_fail@plt+0x8b18>
   19d90:	add	r6, r4, #8
   19d94:	cmp	r5, r6
   19d98:	str	r2, [sp, #36]	; 0x24
   19d9c:	beq	19eb4 <__assert_fail@plt+0x8be4>
   19da0:	mov	r3, #8
   19da4:	mov	r0, r5
   19da8:	str	r3, [sp]
   19dac:	rsb	r2, r2, #1
   19db0:	mvn	r3, #-2147483648	; 0x80000000
   19db4:	add	r1, sp, #36	; 0x24
   19db8:	bl	1cb04 <__assert_fail@plt+0xb834>
   19dbc:	mov	r5, r0
   19dc0:	str	r0, [r4]
   19dc4:	ldr	r0, [r4, #4]
   19dc8:	ldr	r2, [sp, #36]	; 0x24
   19dcc:	mov	r1, #0
   19dd0:	sub	r2, r2, r0
   19dd4:	add	r0, r5, r0, lsl #3
   19dd8:	lsl	r2, r2, #3
   19ddc:	bl	11198 <memset@plt>
   19de0:	ldr	r3, [sp, #36]	; 0x24
   19de4:	str	r3, [r4, #4]
   19de8:	ldr	r4, [pc, #248]	; 19ee8 <__assert_fail@plt+0x8c18>
   19dec:	ldr	r8, [r5]
   19df0:	ldr	r6, [r5, #4]
   19df4:	ldr	r0, [r4, #4]
   19df8:	ldr	r1, [r4, #44]	; 0x2c
   19dfc:	ldr	r2, [r4, #40]	; 0x28
   19e00:	ldr	r3, [r4]
   19e04:	orr	r0, r0, #1
   19e08:	add	fp, r4, #8
   19e0c:	str	r0, [sp, #28]
   19e10:	str	r0, [sp, #4]
   19e14:	str	r1, [sp, #16]
   19e18:	str	r2, [sp, #12]
   19e1c:	str	r3, [sp]
   19e20:	str	fp, [sp, #8]
   19e24:	mov	r1, r8
   19e28:	mov	r0, r6
   19e2c:	mov	r3, sl
   19e30:	mov	r2, r9
   19e34:	bl	17f44 <__assert_fail@plt+0x6c74>
   19e38:	cmp	r8, r0
   19e3c:	bhi	19ea0 <__assert_fail@plt+0x8bd0>
   19e40:	add	r3, r4, #48	; 0x30
   19e44:	add	r8, r0, #1
   19e48:	cmp	r6, r3
   19e4c:	str	r8, [r5]
   19e50:	beq	19e5c <__assert_fail@plt+0x8b8c>
   19e54:	mov	r0, r6
   19e58:	bl	13bb0 <__assert_fail@plt+0x28e0>
   19e5c:	mov	r0, r8
   19e60:	bl	1c8e8 <__assert_fail@plt+0xb618>
   19e64:	ldr	lr, [r4, #44]	; 0x2c
   19e68:	ldr	ip, [r4]
   19e6c:	mov	r3, sl
   19e70:	mov	r2, r9
   19e74:	mov	r1, r8
   19e78:	str	r0, [r5, #4]
   19e7c:	ldr	r5, [r4, #40]	; 0x28
   19e80:	ldr	r4, [sp, #28]
   19e84:	str	fp, [sp, #8]
   19e88:	str	r4, [sp, #4]
   19e8c:	str	lr, [sp, #16]
   19e90:	str	r5, [sp, #12]
   19e94:	str	ip, [sp]
   19e98:	mov	r6, r0
   19e9c:	bl	17f44 <__assert_fail@plt+0x6c74>
   19ea0:	ldr	r3, [sp, #24]
   19ea4:	mov	r0, r6
   19ea8:	str	r3, [r7]
   19eac:	add	sp, sp, #44	; 0x2c
   19eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19eb4:	mov	r3, #8
   19eb8:	str	r3, [sp]
   19ebc:	add	r1, sp, #36	; 0x24
   19ec0:	rsb	r2, r2, #1
   19ec4:	mvn	r3, #-2147483648	; 0x80000000
   19ec8:	mov	r0, #0
   19ecc:	bl	1cb04 <__assert_fail@plt+0xb834>
   19ed0:	mov	r5, r0
   19ed4:	ldm	r6, {r0, r1}
   19ed8:	str	r5, [r4]
   19edc:	stm	r5, {r0, r1}
   19ee0:	b	19dc4 <__assert_fail@plt+0x8af4>
   19ee4:	andeq	r0, r3, r8, lsr r1
   19ee8:	andeq	r0, r3, r0, asr #3
   19eec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ef0:	sub	sp, sp, #132	; 0x84
   19ef4:	mov	r5, r1
   19ef8:	mov	r4, r0
   19efc:	mov	r9, r2
   19f00:	add	r0, sp, #80	; 0x50
   19f04:	mov	r2, #48	; 0x30
   19f08:	mov	r1, #0
   19f0c:	bl	11198 <memset@plt>
   19f10:	cmp	r5, #10
   19f14:	beq	1a0cc <__assert_fail@plt+0x8dfc>
   19f18:	add	lr, sp, #80	; 0x50
   19f1c:	str	r5, [sp, #80]	; 0x50
   19f20:	ldm	lr!, {r0, r1, r2, r3}
   19f24:	add	ip, sp, #32
   19f28:	ldr	r6, [pc, #416]	; 1a0d0 <__assert_fail@plt+0x8e00>
   19f2c:	stmia	ip!, {r0, r1, r2, r3}
   19f30:	ldm	lr!, {r0, r1, r2, r3}
   19f34:	stmia	ip!, {r0, r1, r2, r3}
   19f38:	ldm	lr, {r0, r1, r2, r3}
   19f3c:	stm	ip, {r0, r1, r2, r3}
   19f40:	bl	11180 <__errno_location@plt>
   19f44:	cmn	r4, #-2147483647	; 0x80000001
   19f48:	ldr	r5, [r6]
   19f4c:	mov	r7, r0
   19f50:	movne	r0, #0
   19f54:	moveq	r0, #1
   19f58:	ldr	r3, [r7]
   19f5c:	orrs	r0, r0, r4, lsr #31
   19f60:	str	r3, [sp, #24]
   19f64:	bne	1a0cc <__assert_fail@plt+0x8dfc>
   19f68:	ldr	r2, [r6, #4]
   19f6c:	cmp	r4, r2
   19f70:	blt	19fd0 <__assert_fail@plt+0x8d00>
   19f74:	add	r8, r6, #8
   19f78:	cmp	r5, r8
   19f7c:	str	r2, [sp, #80]	; 0x50
   19f80:	beq	1a09c <__assert_fail@plt+0x8dcc>
   19f84:	mov	r3, #8
   19f88:	sub	r2, r4, r2
   19f8c:	mov	r0, r5
   19f90:	str	r3, [sp]
   19f94:	add	r2, r2, #1
   19f98:	add	r1, sp, #80	; 0x50
   19f9c:	mvn	r3, #-2147483648	; 0x80000000
   19fa0:	bl	1cb04 <__assert_fail@plt+0xb834>
   19fa4:	mov	r5, r0
   19fa8:	str	r0, [r6]
   19fac:	ldr	r0, [r6, #4]
   19fb0:	ldr	r2, [sp, #80]	; 0x50
   19fb4:	mov	r1, #0
   19fb8:	sub	r2, r2, r0
   19fbc:	add	r0, r5, r0, lsl #3
   19fc0:	lsl	r2, r2, #3
   19fc4:	bl	11198 <memset@plt>
   19fc8:	ldr	r3, [sp, #80]	; 0x50
   19fcc:	str	r3, [r6, #4]
   19fd0:	add	fp, r5, r4, lsl #3
   19fd4:	ldr	r1, [sp, #36]	; 0x24
   19fd8:	ldr	r8, [r5, r4, lsl #3]
   19fdc:	ldr	r6, [fp, #4]
   19fe0:	ldr	r2, [sp, #72]	; 0x48
   19fe4:	ldr	r3, [sp, #32]
   19fe8:	ldr	ip, [sp, #76]	; 0x4c
   19fec:	orr	r1, r1, #1
   19ff0:	add	sl, sp, #40	; 0x28
   19ff4:	str	r1, [sp, #28]
   19ff8:	str	r1, [sp, #4]
   19ffc:	str	r2, [sp, #12]
   1a000:	str	r3, [sp]
   1a004:	mov	r0, r6
   1a008:	mov	r1, r8
   1a00c:	str	ip, [sp, #16]
   1a010:	str	sl, [sp, #8]
   1a014:	mvn	r3, #0
   1a018:	mov	r2, r9
   1a01c:	bl	17f44 <__assert_fail@plt+0x6c74>
   1a020:	cmp	r8, r0
   1a024:	bhi	1a088 <__assert_fail@plt+0x8db8>
   1a028:	ldr	r3, [pc, #164]	; 1a0d4 <__assert_fail@plt+0x8e04>
   1a02c:	add	r8, r0, #1
   1a030:	cmp	r6, r3
   1a034:	str	r8, [r5, r4, lsl #3]
   1a038:	beq	1a044 <__assert_fail@plt+0x8d74>
   1a03c:	mov	r0, r6
   1a040:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1a044:	mov	r0, r8
   1a048:	bl	1c8e8 <__assert_fail@plt+0xb618>
   1a04c:	ldr	lr, [sp, #76]	; 0x4c
   1a050:	ldr	r3, [sp, #32]
   1a054:	ldr	ip, [sp, #72]	; 0x48
   1a058:	ldr	r4, [sp, #28]
   1a05c:	mov	r2, r9
   1a060:	mov	r1, r8
   1a064:	str	r0, [fp, #4]
   1a068:	str	r3, [sp]
   1a06c:	str	sl, [sp, #8]
   1a070:	str	r4, [sp, #4]
   1a074:	str	lr, [sp, #16]
   1a078:	str	ip, [sp, #12]
   1a07c:	mvn	r3, #0
   1a080:	mov	r6, r0
   1a084:	bl	17f44 <__assert_fail@plt+0x6c74>
   1a088:	ldr	r3, [sp, #24]
   1a08c:	mov	r0, r6
   1a090:	str	r3, [r7]
   1a094:	add	sp, sp, #132	; 0x84
   1a098:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a09c:	mov	r3, #8
   1a0a0:	sub	r2, r4, r2
   1a0a4:	add	r1, sp, #80	; 0x50
   1a0a8:	str	r3, [sp]
   1a0ac:	add	r2, r2, #1
   1a0b0:	mvn	r3, #-2147483648	; 0x80000000
   1a0b4:	bl	1cb04 <__assert_fail@plt+0xb834>
   1a0b8:	mov	r5, r0
   1a0bc:	ldm	r8, {r0, r1}
   1a0c0:	str	r5, [r6]
   1a0c4:	stm	r5, {r0, r1}
   1a0c8:	b	19fac <__assert_fail@plt+0x8cdc>
   1a0cc:	bl	11294 <abort@plt>
   1a0d0:	andeq	r0, r3, r8, lsr r1
   1a0d4:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1a0d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0dc:	sub	sp, sp, #132	; 0x84
   1a0e0:	mov	r5, r1
   1a0e4:	mov	r4, r0
   1a0e8:	mov	r9, r2
   1a0ec:	add	r0, sp, #80	; 0x50
   1a0f0:	mov	r2, #48	; 0x30
   1a0f4:	mov	r1, #0
   1a0f8:	mov	sl, r3
   1a0fc:	bl	11198 <memset@plt>
   1a100:	cmp	r5, #10
   1a104:	beq	1a2c0 <__assert_fail@plt+0x8ff0>
   1a108:	add	lr, sp, #80	; 0x50
   1a10c:	str	r5, [sp, #80]	; 0x50
   1a110:	ldm	lr!, {r0, r1, r2, r3}
   1a114:	add	ip, sp, #32
   1a118:	ldr	r6, [pc, #420]	; 1a2c4 <__assert_fail@plt+0x8ff4>
   1a11c:	stmia	ip!, {r0, r1, r2, r3}
   1a120:	ldm	lr!, {r0, r1, r2, r3}
   1a124:	stmia	ip!, {r0, r1, r2, r3}
   1a128:	ldm	lr, {r0, r1, r2, r3}
   1a12c:	stm	ip, {r0, r1, r2, r3}
   1a130:	bl	11180 <__errno_location@plt>
   1a134:	cmn	r4, #-2147483647	; 0x80000001
   1a138:	ldr	r5, [r6]
   1a13c:	mov	r7, r0
   1a140:	movne	r0, #0
   1a144:	moveq	r0, #1
   1a148:	ldr	r3, [r7]
   1a14c:	orrs	r0, r0, r4, lsr #31
   1a150:	str	r3, [sp, #24]
   1a154:	bne	1a2c0 <__assert_fail@plt+0x8ff0>
   1a158:	ldr	r2, [r6, #4]
   1a15c:	cmp	r4, r2
   1a160:	blt	1a1c0 <__assert_fail@plt+0x8ef0>
   1a164:	add	r8, r6, #8
   1a168:	cmp	r5, r8
   1a16c:	str	r2, [sp, #80]	; 0x50
   1a170:	beq	1a290 <__assert_fail@plt+0x8fc0>
   1a174:	mov	r3, #8
   1a178:	sub	r2, r4, r2
   1a17c:	mov	r0, r5
   1a180:	str	r3, [sp]
   1a184:	add	r2, r2, #1
   1a188:	add	r1, sp, #80	; 0x50
   1a18c:	mvn	r3, #-2147483648	; 0x80000000
   1a190:	bl	1cb04 <__assert_fail@plt+0xb834>
   1a194:	mov	r5, r0
   1a198:	str	r0, [r6]
   1a19c:	ldr	r0, [r6, #4]
   1a1a0:	ldr	r2, [sp, #80]	; 0x50
   1a1a4:	mov	r1, #0
   1a1a8:	sub	r2, r2, r0
   1a1ac:	add	r0, r5, r0, lsl #3
   1a1b0:	lsl	r2, r2, #3
   1a1b4:	bl	11198 <memset@plt>
   1a1b8:	ldr	r3, [sp, #80]	; 0x50
   1a1bc:	str	r3, [r6, #4]
   1a1c0:	add	fp, r5, r4, lsl #3
   1a1c4:	ldr	r3, [sp, #32]
   1a1c8:	ldr	r1, [sp, #36]	; 0x24
   1a1cc:	ldr	r8, [r5, r4, lsl #3]
   1a1d0:	ldr	r6, [fp, #4]
   1a1d4:	ldr	r2, [sp, #72]	; 0x48
   1a1d8:	ldr	ip, [sp, #76]	; 0x4c
   1a1dc:	orr	r1, r1, #1
   1a1e0:	str	r3, [sp]
   1a1e4:	add	r3, sp, #40	; 0x28
   1a1e8:	str	r1, [sp, #28]
   1a1ec:	str	r1, [sp, #4]
   1a1f0:	str	r2, [sp, #12]
   1a1f4:	str	r3, [sp, #8]
   1a1f8:	mov	r0, r6
   1a1fc:	mov	r1, r8
   1a200:	str	ip, [sp, #16]
   1a204:	mov	r3, sl
   1a208:	mov	r2, r9
   1a20c:	bl	17f44 <__assert_fail@plt+0x6c74>
   1a210:	cmp	r8, r0
   1a214:	bhi	1a27c <__assert_fail@plt+0x8fac>
   1a218:	ldr	r3, [pc, #168]	; 1a2c8 <__assert_fail@plt+0x8ff8>
   1a21c:	add	r8, r0, #1
   1a220:	cmp	r6, r3
   1a224:	str	r8, [r5, r4, lsl #3]
   1a228:	beq	1a234 <__assert_fail@plt+0x8f64>
   1a22c:	mov	r0, r6
   1a230:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1a234:	mov	r0, r8
   1a238:	bl	1c8e8 <__assert_fail@plt+0xb618>
   1a23c:	add	lr, sp, #40	; 0x28
   1a240:	ldr	ip, [sp, #76]	; 0x4c
   1a244:	ldr	r4, [sp, #72]	; 0x48
   1a248:	ldr	r5, [sp, #28]
   1a24c:	mov	r3, sl
   1a250:	mov	r2, r9
   1a254:	mov	r1, r8
   1a258:	str	r0, [fp, #4]
   1a25c:	str	lr, [sp, #8]
   1a260:	ldr	lr, [sp, #32]
   1a264:	str	r5, [sp, #4]
   1a268:	str	ip, [sp, #16]
   1a26c:	str	r4, [sp, #12]
   1a270:	str	lr, [sp]
   1a274:	mov	r6, r0
   1a278:	bl	17f44 <__assert_fail@plt+0x6c74>
   1a27c:	ldr	r3, [sp, #24]
   1a280:	mov	r0, r6
   1a284:	str	r3, [r7]
   1a288:	add	sp, sp, #132	; 0x84
   1a28c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a290:	mov	r3, #8
   1a294:	sub	r2, r4, r2
   1a298:	add	r1, sp, #80	; 0x50
   1a29c:	str	r3, [sp]
   1a2a0:	add	r2, r2, #1
   1a2a4:	mvn	r3, #-2147483648	; 0x80000000
   1a2a8:	bl	1cb04 <__assert_fail@plt+0xb834>
   1a2ac:	mov	r5, r0
   1a2b0:	ldm	r8, {r0, r1}
   1a2b4:	str	r5, [r6]
   1a2b8:	stm	r5, {r0, r1}
   1a2bc:	b	1a19c <__assert_fail@plt+0x8ecc>
   1a2c0:	bl	11294 <abort@plt>
   1a2c4:	andeq	r0, r3, r8, lsr r1
   1a2c8:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1a2cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2d0:	sub	sp, sp, #124	; 0x7c
   1a2d4:	mov	r4, r0
   1a2d8:	mov	r9, r1
   1a2dc:	add	r0, sp, #72	; 0x48
   1a2e0:	mov	r2, #48	; 0x30
   1a2e4:	mov	r1, #0
   1a2e8:	bl	11198 <memset@plt>
   1a2ec:	cmp	r4, #10
   1a2f0:	beq	1a47c <__assert_fail@plt+0x91ac>
   1a2f4:	add	lr, sp, #72	; 0x48
   1a2f8:	str	r4, [sp, #72]	; 0x48
   1a2fc:	ldm	lr!, {r0, r1, r2, r3}
   1a300:	add	ip, sp, #24
   1a304:	ldr	r5, [pc, #372]	; 1a480 <__assert_fail@plt+0x91b0>
   1a308:	stmia	ip!, {r0, r1, r2, r3}
   1a30c:	ldm	lr!, {r0, r1, r2, r3}
   1a310:	stmia	ip!, {r0, r1, r2, r3}
   1a314:	ldm	lr, {r0, r1, r2, r3}
   1a318:	stm	ip, {r0, r1, r2, r3}
   1a31c:	bl	11180 <__errno_location@plt>
   1a320:	ldr	r2, [r5, #4]
   1a324:	ldr	r4, [r5]
   1a328:	cmp	r2, #0
   1a32c:	mov	r7, r0
   1a330:	ldr	fp, [r0]
   1a334:	bgt	1a390 <__assert_fail@plt+0x90c0>
   1a338:	add	r6, r5, #8
   1a33c:	cmp	r4, r6
   1a340:	str	r2, [sp, #72]	; 0x48
   1a344:	beq	1a44c <__assert_fail@plt+0x917c>
   1a348:	mov	r3, #8
   1a34c:	mov	r0, r4
   1a350:	str	r3, [sp]
   1a354:	rsb	r2, r2, #1
   1a358:	add	r1, sp, #72	; 0x48
   1a35c:	mvn	r3, #-2147483648	; 0x80000000
   1a360:	bl	1cb04 <__assert_fail@plt+0xb834>
   1a364:	mov	r4, r0
   1a368:	str	r0, [r5]
   1a36c:	ldr	r0, [r5, #4]
   1a370:	ldr	r2, [sp, #72]	; 0x48
   1a374:	mov	r1, #0
   1a378:	sub	r2, r2, r0
   1a37c:	add	r0, r4, r0, lsl #3
   1a380:	lsl	r2, r2, #3
   1a384:	bl	11198 <memset@plt>
   1a388:	ldr	r3, [sp, #72]	; 0x48
   1a38c:	str	r3, [r5, #4]
   1a390:	ldr	r6, [sp, #28]
   1a394:	ldr	r8, [r4]
   1a398:	ldr	r5, [r4, #4]
   1a39c:	ldr	r2, [sp, #64]	; 0x40
   1a3a0:	ldr	r3, [sp, #24]
   1a3a4:	ldr	ip, [sp, #68]	; 0x44
   1a3a8:	orr	r6, r6, #1
   1a3ac:	add	sl, sp, #32
   1a3b0:	str	r2, [sp, #12]
   1a3b4:	str	r3, [sp]
   1a3b8:	str	r6, [sp, #4]
   1a3bc:	mov	r1, r8
   1a3c0:	mov	r0, r5
   1a3c4:	str	ip, [sp, #16]
   1a3c8:	str	sl, [sp, #8]
   1a3cc:	mvn	r3, #0
   1a3d0:	mov	r2, r9
   1a3d4:	bl	17f44 <__assert_fail@plt+0x6c74>
   1a3d8:	cmp	r8, r0
   1a3dc:	bhi	1a43c <__assert_fail@plt+0x916c>
   1a3e0:	ldr	r3, [pc, #156]	; 1a484 <__assert_fail@plt+0x91b4>
   1a3e4:	add	r8, r0, #1
   1a3e8:	cmp	r5, r3
   1a3ec:	str	r8, [r4]
   1a3f0:	beq	1a3fc <__assert_fail@plt+0x912c>
   1a3f4:	mov	r0, r5
   1a3f8:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1a3fc:	mov	r0, r8
   1a400:	bl	1c8e8 <__assert_fail@plt+0xb618>
   1a404:	ldr	lr, [sp, #68]	; 0x44
   1a408:	ldr	r3, [sp, #24]
   1a40c:	ldr	ip, [sp, #64]	; 0x40
   1a410:	mov	r2, r9
   1a414:	mov	r1, r8
   1a418:	str	r0, [r4, #4]
   1a41c:	str	r3, [sp]
   1a420:	str	sl, [sp, #8]
   1a424:	str	r6, [sp, #4]
   1a428:	str	lr, [sp, #16]
   1a42c:	str	ip, [sp, #12]
   1a430:	mvn	r3, #0
   1a434:	mov	r5, r0
   1a438:	bl	17f44 <__assert_fail@plt+0x6c74>
   1a43c:	mov	r0, r5
   1a440:	str	fp, [r7]
   1a444:	add	sp, sp, #124	; 0x7c
   1a448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a44c:	mov	r3, #8
   1a450:	add	r1, sp, #72	; 0x48
   1a454:	str	r3, [sp]
   1a458:	rsb	r2, r2, #1
   1a45c:	mvn	r3, #-2147483648	; 0x80000000
   1a460:	mov	r0, #0
   1a464:	bl	1cb04 <__assert_fail@plt+0xb834>
   1a468:	mov	r4, r0
   1a46c:	ldm	r6, {r0, r1}
   1a470:	str	r4, [r5]
   1a474:	stm	r4, {r0, r1}
   1a478:	b	1a36c <__assert_fail@plt+0x909c>
   1a47c:	bl	11294 <abort@plt>
   1a480:	andeq	r0, r3, r8, lsr r1
   1a484:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1a488:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a48c:	sub	sp, sp, #132	; 0x84
   1a490:	mov	r4, r0
   1a494:	mov	r9, r1
   1a498:	mov	sl, r2
   1a49c:	add	r0, sp, #80	; 0x50
   1a4a0:	mov	r2, #48	; 0x30
   1a4a4:	mov	r1, #0
   1a4a8:	bl	11198 <memset@plt>
   1a4ac:	cmp	r4, #10
   1a4b0:	beq	1a644 <__assert_fail@plt+0x9374>
   1a4b4:	add	lr, sp, #80	; 0x50
   1a4b8:	str	r4, [sp, #80]	; 0x50
   1a4bc:	ldm	lr!, {r0, r1, r2, r3}
   1a4c0:	add	ip, sp, #32
   1a4c4:	ldr	r5, [pc, #380]	; 1a648 <__assert_fail@plt+0x9378>
   1a4c8:	stmia	ip!, {r0, r1, r2, r3}
   1a4cc:	ldm	lr!, {r0, r1, r2, r3}
   1a4d0:	stmia	ip!, {r0, r1, r2, r3}
   1a4d4:	ldm	lr, {r0, r1, r2, r3}
   1a4d8:	stm	ip, {r0, r1, r2, r3}
   1a4dc:	bl	11180 <__errno_location@plt>
   1a4e0:	ldr	r2, [r5, #4]
   1a4e4:	ldr	r4, [r5]
   1a4e8:	cmp	r2, #0
   1a4ec:	ldr	r3, [r0]
   1a4f0:	mov	r7, r0
   1a4f4:	str	r3, [sp, #28]
   1a4f8:	bgt	1a554 <__assert_fail@plt+0x9284>
   1a4fc:	add	r6, r5, #8
   1a500:	cmp	r4, r6
   1a504:	str	r2, [sp, #80]	; 0x50
   1a508:	beq	1a614 <__assert_fail@plt+0x9344>
   1a50c:	mov	r3, #8
   1a510:	mov	r0, r4
   1a514:	str	r3, [sp]
   1a518:	rsb	r2, r2, #1
   1a51c:	add	r1, sp, #80	; 0x50
   1a520:	mvn	r3, #-2147483648	; 0x80000000
   1a524:	bl	1cb04 <__assert_fail@plt+0xb834>
   1a528:	mov	r4, r0
   1a52c:	str	r0, [r5]
   1a530:	ldr	r0, [r5, #4]
   1a534:	ldr	r2, [sp, #80]	; 0x50
   1a538:	mov	r1, #0
   1a53c:	sub	r2, r2, r0
   1a540:	add	r0, r4, r0, lsl #3
   1a544:	lsl	r2, r2, #3
   1a548:	bl	11198 <memset@plt>
   1a54c:	ldr	r3, [sp, #80]	; 0x50
   1a550:	str	r3, [r5, #4]
   1a554:	ldr	r6, [sp, #36]	; 0x24
   1a558:	ldr	r8, [r4]
   1a55c:	ldr	r5, [r4, #4]
   1a560:	ldr	r2, [sp, #72]	; 0x48
   1a564:	ldr	r3, [sp, #32]
   1a568:	ldr	ip, [sp, #76]	; 0x4c
   1a56c:	orr	r6, r6, #1
   1a570:	add	fp, sp, #40	; 0x28
   1a574:	str	r2, [sp, #12]
   1a578:	str	r3, [sp]
   1a57c:	str	r6, [sp, #4]
   1a580:	mov	r1, r8
   1a584:	mov	r0, r5
   1a588:	str	ip, [sp, #16]
   1a58c:	str	fp, [sp, #8]
   1a590:	mov	r3, sl
   1a594:	mov	r2, r9
   1a598:	bl	17f44 <__assert_fail@plt+0x6c74>
   1a59c:	cmp	r8, r0
   1a5a0:	bhi	1a600 <__assert_fail@plt+0x9330>
   1a5a4:	ldr	r3, [pc, #160]	; 1a64c <__assert_fail@plt+0x937c>
   1a5a8:	add	r8, r0, #1
   1a5ac:	cmp	r5, r3
   1a5b0:	str	r8, [r4]
   1a5b4:	beq	1a5c0 <__assert_fail@plt+0x92f0>
   1a5b8:	mov	r0, r5
   1a5bc:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1a5c0:	mov	r0, r8
   1a5c4:	bl	1c8e8 <__assert_fail@plt+0xb618>
   1a5c8:	ldr	ip, [sp, #76]	; 0x4c
   1a5cc:	ldr	lr, [sp, #32]
   1a5d0:	mov	r3, sl
   1a5d4:	mov	r2, r9
   1a5d8:	mov	r1, r8
   1a5dc:	str	r0, [r4, #4]
   1a5e0:	ldr	r4, [sp, #72]	; 0x48
   1a5e4:	str	fp, [sp, #8]
   1a5e8:	str	r6, [sp, #4]
   1a5ec:	str	ip, [sp, #16]
   1a5f0:	str	r4, [sp, #12]
   1a5f4:	str	lr, [sp]
   1a5f8:	mov	r5, r0
   1a5fc:	bl	17f44 <__assert_fail@plt+0x6c74>
   1a600:	ldr	r3, [sp, #28]
   1a604:	mov	r0, r5
   1a608:	str	r3, [r7]
   1a60c:	add	sp, sp, #132	; 0x84
   1a610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a614:	mov	r3, #8
   1a618:	add	r1, sp, #80	; 0x50
   1a61c:	str	r3, [sp]
   1a620:	rsb	r2, r2, #1
   1a624:	mvn	r3, #-2147483648	; 0x80000000
   1a628:	mov	r0, #0
   1a62c:	bl	1cb04 <__assert_fail@plt+0xb834>
   1a630:	mov	r4, r0
   1a634:	ldm	r6, {r0, r1}
   1a638:	str	r4, [r5]
   1a63c:	stm	r4, {r0, r1}
   1a640:	b	1a530 <__assert_fail@plt+0x9260>
   1a644:	bl	11294 <abort@plt>
   1a648:	andeq	r0, r3, r8, lsr r1
   1a64c:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1a650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a654:	mov	r4, r2
   1a658:	ldr	lr, [pc, #432]	; 1a810 <__assert_fail@plt+0x9540>
   1a65c:	mov	sl, r0
   1a660:	mov	fp, r1
   1a664:	ldm	lr!, {r0, r1, r2, r3}
   1a668:	sub	sp, sp, #92	; 0x5c
   1a66c:	add	ip, sp, #40	; 0x28
   1a670:	lsr	r7, r4, #5
   1a674:	stmia	ip!, {r0, r1, r2, r3}
   1a678:	add	r6, sp, #48	; 0x30
   1a67c:	ldm	lr!, {r0, r1, r2, r3}
   1a680:	and	r4, r4, #31
   1a684:	ldr	r5, [pc, #392]	; 1a814 <__assert_fail@plt+0x9544>
   1a688:	stmia	ip!, {r0, r1, r2, r3}
   1a68c:	ldm	lr, {r0, r1, r2, r3}
   1a690:	stm	ip, {r0, r1, r2, r3}
   1a694:	ldr	r2, [r6, r7, lsl #2]
   1a698:	lsr	r3, r2, r4
   1a69c:	eor	r3, r3, #1
   1a6a0:	and	r3, r3, #1
   1a6a4:	eor	r4, r2, r3, lsl r4
   1a6a8:	str	r4, [r6, r7, lsl #2]
   1a6ac:	bl	11180 <__errno_location@plt>
   1a6b0:	ldr	r2, [r5, #4]
   1a6b4:	ldr	r4, [r5]
   1a6b8:	cmp	r2, #0
   1a6bc:	ldr	r3, [r0]
   1a6c0:	mov	r8, r0
   1a6c4:	str	r3, [sp, #28]
   1a6c8:	bgt	1a724 <__assert_fail@plt+0x9454>
   1a6cc:	add	r7, r5, #8
   1a6d0:	cmp	r4, r7
   1a6d4:	str	r2, [sp, #36]	; 0x24
   1a6d8:	beq	1a7e0 <__assert_fail@plt+0x9510>
   1a6dc:	mov	r3, #8
   1a6e0:	mov	r0, r4
   1a6e4:	str	r3, [sp]
   1a6e8:	rsb	r2, r2, #1
   1a6ec:	mvn	r3, #-2147483648	; 0x80000000
   1a6f0:	add	r1, sp, #36	; 0x24
   1a6f4:	bl	1cb04 <__assert_fail@plt+0xb834>
   1a6f8:	mov	r4, r0
   1a6fc:	str	r0, [r5]
   1a700:	ldr	r0, [r5, #4]
   1a704:	ldr	r2, [sp, #36]	; 0x24
   1a708:	mov	r1, #0
   1a70c:	sub	r2, r2, r0
   1a710:	add	r0, r4, r0, lsl #3
   1a714:	lsl	r2, r2, #3
   1a718:	bl	11198 <memset@plt>
   1a71c:	ldr	r3, [sp, #36]	; 0x24
   1a720:	str	r3, [r5, #4]
   1a724:	ldr	r7, [sp, #44]	; 0x2c
   1a728:	ldr	r9, [r4]
   1a72c:	ldr	r5, [r4, #4]
   1a730:	ldr	r2, [sp, #80]	; 0x50
   1a734:	ldr	r3, [sp, #40]	; 0x28
   1a738:	ldr	ip, [sp, #84]	; 0x54
   1a73c:	orr	r7, r7, #1
   1a740:	str	r2, [sp, #12]
   1a744:	str	r3, [sp]
   1a748:	str	r7, [sp, #4]
   1a74c:	str	r6, [sp, #8]
   1a750:	mov	r1, r9
   1a754:	mov	r0, r5
   1a758:	str	ip, [sp, #16]
   1a75c:	mov	r3, fp
   1a760:	mov	r2, sl
   1a764:	bl	17f44 <__assert_fail@plt+0x6c74>
   1a768:	cmp	r9, r0
   1a76c:	bhi	1a7cc <__assert_fail@plt+0x94fc>
   1a770:	ldr	r3, [pc, #160]	; 1a818 <__assert_fail@plt+0x9548>
   1a774:	add	r9, r0, #1
   1a778:	cmp	r5, r3
   1a77c:	str	r9, [r4]
   1a780:	beq	1a78c <__assert_fail@plt+0x94bc>
   1a784:	mov	r0, r5
   1a788:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1a78c:	mov	r0, r9
   1a790:	bl	1c8e8 <__assert_fail@plt+0xb618>
   1a794:	ldr	ip, [sp, #84]	; 0x54
   1a798:	ldr	lr, [sp, #40]	; 0x28
   1a79c:	mov	r3, fp
   1a7a0:	mov	r2, sl
   1a7a4:	mov	r1, r9
   1a7a8:	str	r0, [r4, #4]
   1a7ac:	ldr	r4, [sp, #80]	; 0x50
   1a7b0:	str	r6, [sp, #8]
   1a7b4:	str	r7, [sp, #4]
   1a7b8:	str	ip, [sp, #16]
   1a7bc:	str	r4, [sp, #12]
   1a7c0:	str	lr, [sp]
   1a7c4:	mov	r5, r0
   1a7c8:	bl	17f44 <__assert_fail@plt+0x6c74>
   1a7cc:	ldr	r3, [sp, #28]
   1a7d0:	mov	r0, r5
   1a7d4:	str	r3, [r8]
   1a7d8:	add	sp, sp, #92	; 0x5c
   1a7dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a7e0:	mov	r3, #8
   1a7e4:	str	r3, [sp]
   1a7e8:	add	r1, sp, #36	; 0x24
   1a7ec:	rsb	r2, r2, #1
   1a7f0:	mvn	r3, #-2147483648	; 0x80000000
   1a7f4:	mov	r0, #0
   1a7f8:	bl	1cb04 <__assert_fail@plt+0xb834>
   1a7fc:	mov	r4, r0
   1a800:	ldm	r7, {r0, r1}
   1a804:	str	r4, [r5]
   1a808:	stm	r4, {r0, r1}
   1a80c:	b	1a700 <__assert_fail@plt+0x9430>
   1a810:	andeq	r0, r3, r0, asr #3
   1a814:	andeq	r0, r3, r8, lsr r1
   1a818:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1a81c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a820:	mov	r4, r1
   1a824:	ldr	lr, [pc, #420]	; 1a9d0 <__assert_fail@plt+0x9700>
   1a828:	mov	r6, r0
   1a82c:	sub	sp, sp, #84	; 0x54
   1a830:	ldm	lr!, {r0, r1, r2, r3}
   1a834:	add	ip, sp, #32
   1a838:	lsr	r8, r4, #5
   1a83c:	add	r5, sp, #40	; 0x28
   1a840:	stmia	ip!, {r0, r1, r2, r3}
   1a844:	and	r4, r4, #31
   1a848:	ldm	lr!, {r0, r1, r2, r3}
   1a84c:	ldr	r7, [pc, #384]	; 1a9d4 <__assert_fail@plt+0x9704>
   1a850:	stmia	ip!, {r0, r1, r2, r3}
   1a854:	ldm	lr, {r0, r1, r2, r3}
   1a858:	stm	ip, {r0, r1, r2, r3}
   1a85c:	ldr	r2, [r5, r8, lsl #2]
   1a860:	lsr	r3, r2, r4
   1a864:	eor	r3, r3, #1
   1a868:	and	r3, r3, #1
   1a86c:	eor	r4, r2, r3, lsl r4
   1a870:	str	r4, [r5, r8, lsl #2]
   1a874:	bl	11180 <__errno_location@plt>
   1a878:	ldr	r2, [r7, #4]
   1a87c:	ldr	r4, [r7]
   1a880:	cmp	r2, #0
   1a884:	mov	r9, r0
   1a888:	ldr	sl, [r0]
   1a88c:	bgt	1a8e8 <__assert_fail@plt+0x9618>
   1a890:	add	r8, r7, #8
   1a894:	cmp	r4, r8
   1a898:	str	r2, [sp, #28]
   1a89c:	beq	1a9a0 <__assert_fail@plt+0x96d0>
   1a8a0:	mov	r3, #8
   1a8a4:	mov	r0, r4
   1a8a8:	str	r3, [sp]
   1a8ac:	rsb	r2, r2, #1
   1a8b0:	mvn	r3, #-2147483648	; 0x80000000
   1a8b4:	add	r1, sp, #28
   1a8b8:	bl	1cb04 <__assert_fail@plt+0xb834>
   1a8bc:	mov	r4, r0
   1a8c0:	str	r0, [r7]
   1a8c4:	ldr	r0, [r7, #4]
   1a8c8:	ldr	r2, [sp, #28]
   1a8cc:	mov	r1, #0
   1a8d0:	sub	r2, r2, r0
   1a8d4:	add	r0, r4, r0, lsl #3
   1a8d8:	lsl	r2, r2, #3
   1a8dc:	bl	11198 <memset@plt>
   1a8e0:	ldr	r3, [sp, #28]
   1a8e4:	str	r3, [r7, #4]
   1a8e8:	ldr	r8, [sp, #36]	; 0x24
   1a8ec:	ldr	fp, [r4]
   1a8f0:	ldr	r7, [r4, #4]
   1a8f4:	ldr	r2, [sp, #72]	; 0x48
   1a8f8:	ldr	r3, [sp, #32]
   1a8fc:	ldr	ip, [sp, #76]	; 0x4c
   1a900:	orr	r8, r8, #1
   1a904:	str	r2, [sp, #12]
   1a908:	str	r3, [sp]
   1a90c:	str	r8, [sp, #4]
   1a910:	str	r5, [sp, #8]
   1a914:	mov	r1, fp
   1a918:	mov	r0, r7
   1a91c:	str	ip, [sp, #16]
   1a920:	mvn	r3, #0
   1a924:	mov	r2, r6
   1a928:	bl	17f44 <__assert_fail@plt+0x6c74>
   1a92c:	cmp	fp, r0
   1a930:	bhi	1a990 <__assert_fail@plt+0x96c0>
   1a934:	ldr	r3, [pc, #156]	; 1a9d8 <__assert_fail@plt+0x9708>
   1a938:	add	fp, r0, #1
   1a93c:	cmp	r7, r3
   1a940:	str	fp, [r4]
   1a944:	beq	1a950 <__assert_fail@plt+0x9680>
   1a948:	mov	r0, r7
   1a94c:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1a950:	mov	r0, fp
   1a954:	bl	1c8e8 <__assert_fail@plt+0xb618>
   1a958:	ldr	lr, [sp, #76]	; 0x4c
   1a95c:	ldr	r3, [sp, #32]
   1a960:	ldr	ip, [sp, #72]	; 0x48
   1a964:	mov	r2, r6
   1a968:	mov	r1, fp
   1a96c:	str	r0, [r4, #4]
   1a970:	str	r3, [sp]
   1a974:	str	r5, [sp, #8]
   1a978:	str	r8, [sp, #4]
   1a97c:	str	lr, [sp, #16]
   1a980:	str	ip, [sp, #12]
   1a984:	mvn	r3, #0
   1a988:	mov	r7, r0
   1a98c:	bl	17f44 <__assert_fail@plt+0x6c74>
   1a990:	mov	r0, r7
   1a994:	str	sl, [r9]
   1a998:	add	sp, sp, #84	; 0x54
   1a99c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9a0:	mov	r3, #8
   1a9a4:	str	r3, [sp]
   1a9a8:	add	r1, sp, #28
   1a9ac:	rsb	r2, r2, #1
   1a9b0:	mvn	r3, #-2147483648	; 0x80000000
   1a9b4:	mov	r0, #0
   1a9b8:	bl	1cb04 <__assert_fail@plt+0xb834>
   1a9bc:	mov	r4, r0
   1a9c0:	ldm	r8, {r0, r1}
   1a9c4:	str	r4, [r7]
   1a9c8:	stm	r4, {r0, r1}
   1a9cc:	b	1a8c4 <__assert_fail@plt+0x95f4>
   1a9d0:	andeq	r0, r3, r0, asr #3
   1a9d4:	andeq	r0, r3, r8, lsr r1
   1a9d8:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1a9dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9e0:	mov	r6, r0
   1a9e4:	ldr	lr, [pc, #404]	; 1ab80 <__assert_fail@plt+0x98b0>
   1a9e8:	sub	sp, sp, #84	; 0x54
   1a9ec:	add	ip, sp, #32
   1a9f0:	ldm	lr!, {r0, r1, r2, r3}
   1a9f4:	ldr	r5, [pc, #392]	; 1ab84 <__assert_fail@plt+0x98b4>
   1a9f8:	stmia	ip!, {r0, r1, r2, r3}
   1a9fc:	ldm	lr!, {r0, r1, r2, r3}
   1aa00:	ldr	r4, [sp, #44]	; 0x2c
   1aa04:	stmia	ip!, {r0, r1, r2, r3}
   1aa08:	ldm	lr, {r0, r1, r2, r3}
   1aa0c:	mvn	lr, r4
   1aa10:	and	lr, lr, #67108864	; 0x4000000
   1aa14:	eor	lr, lr, r4
   1aa18:	stm	ip, {r0, r1, r2, r3}
   1aa1c:	str	lr, [sp, #44]	; 0x2c
   1aa20:	bl	11180 <__errno_location@plt>
   1aa24:	ldr	r2, [r5, #4]
   1aa28:	ldr	r4, [r5]
   1aa2c:	cmp	r2, #0
   1aa30:	mov	r8, r0
   1aa34:	ldr	sl, [r0]
   1aa38:	bgt	1aa94 <__assert_fail@plt+0x97c4>
   1aa3c:	add	r7, r5, #8
   1aa40:	cmp	r4, r7
   1aa44:	str	r2, [sp, #28]
   1aa48:	beq	1ab50 <__assert_fail@plt+0x9880>
   1aa4c:	mov	r3, #8
   1aa50:	mov	r0, r4
   1aa54:	str	r3, [sp]
   1aa58:	rsb	r2, r2, #1
   1aa5c:	mvn	r3, #-2147483648	; 0x80000000
   1aa60:	add	r1, sp, #28
   1aa64:	bl	1cb04 <__assert_fail@plt+0xb834>
   1aa68:	mov	r4, r0
   1aa6c:	str	r0, [r5]
   1aa70:	ldr	r0, [r5, #4]
   1aa74:	ldr	r2, [sp, #28]
   1aa78:	mov	r1, #0
   1aa7c:	sub	r2, r2, r0
   1aa80:	add	r0, r4, r0, lsl #3
   1aa84:	lsl	r2, r2, #3
   1aa88:	bl	11198 <memset@plt>
   1aa8c:	ldr	r3, [sp, #28]
   1aa90:	str	r3, [r5, #4]
   1aa94:	ldr	r7, [sp, #36]	; 0x24
   1aa98:	ldr	r9, [r4]
   1aa9c:	ldr	r5, [r4, #4]
   1aaa0:	ldr	r2, [sp, #72]	; 0x48
   1aaa4:	ldr	r3, [sp, #32]
   1aaa8:	ldr	ip, [sp, #76]	; 0x4c
   1aaac:	orr	r7, r7, #1
   1aab0:	add	fp, sp, #40	; 0x28
   1aab4:	str	r2, [sp, #12]
   1aab8:	str	r3, [sp]
   1aabc:	str	r7, [sp, #4]
   1aac0:	mov	r1, r9
   1aac4:	mov	r0, r5
   1aac8:	str	ip, [sp, #16]
   1aacc:	str	fp, [sp, #8]
   1aad0:	mvn	r3, #0
   1aad4:	mov	r2, r6
   1aad8:	bl	17f44 <__assert_fail@plt+0x6c74>
   1aadc:	cmp	r9, r0
   1aae0:	bhi	1ab40 <__assert_fail@plt+0x9870>
   1aae4:	ldr	r3, [pc, #156]	; 1ab88 <__assert_fail@plt+0x98b8>
   1aae8:	add	r9, r0, #1
   1aaec:	cmp	r5, r3
   1aaf0:	str	r9, [r4]
   1aaf4:	beq	1ab00 <__assert_fail@plt+0x9830>
   1aaf8:	mov	r0, r5
   1aafc:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1ab00:	mov	r0, r9
   1ab04:	bl	1c8e8 <__assert_fail@plt+0xb618>
   1ab08:	ldr	lr, [sp, #76]	; 0x4c
   1ab0c:	ldr	r3, [sp, #32]
   1ab10:	ldr	ip, [sp, #72]	; 0x48
   1ab14:	mov	r2, r6
   1ab18:	mov	r1, r9
   1ab1c:	str	r0, [r4, #4]
   1ab20:	str	r3, [sp]
   1ab24:	str	fp, [sp, #8]
   1ab28:	str	r7, [sp, #4]
   1ab2c:	str	lr, [sp, #16]
   1ab30:	str	ip, [sp, #12]
   1ab34:	mvn	r3, #0
   1ab38:	mov	r5, r0
   1ab3c:	bl	17f44 <__assert_fail@plt+0x6c74>
   1ab40:	mov	r0, r5
   1ab44:	str	sl, [r8]
   1ab48:	add	sp, sp, #84	; 0x54
   1ab4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab50:	mov	r3, #8
   1ab54:	str	r3, [sp]
   1ab58:	add	r1, sp, #28
   1ab5c:	rsb	r2, r2, #1
   1ab60:	mvn	r3, #-2147483648	; 0x80000000
   1ab64:	mov	r0, #0
   1ab68:	bl	1cb04 <__assert_fail@plt+0xb834>
   1ab6c:	mov	r4, r0
   1ab70:	ldm	r7, {r0, r1}
   1ab74:	str	r4, [r5]
   1ab78:	stm	r4, {r0, r1}
   1ab7c:	b	1aa70 <__assert_fail@plt+0x97a0>
   1ab80:	andeq	r0, r3, r0, asr #3
   1ab84:	andeq	r0, r3, r8, lsr r1
   1ab88:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1ab8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab90:	mov	r9, r0
   1ab94:	ldr	lr, [pc, #416]	; 1ad3c <__assert_fail@plt+0x9a6c>
   1ab98:	mov	sl, r1
   1ab9c:	sub	sp, sp, #92	; 0x5c
   1aba0:	ldm	lr!, {r0, r1, r2, r3}
   1aba4:	add	ip, sp, #40	; 0x28
   1aba8:	ldr	r5, [pc, #400]	; 1ad40 <__assert_fail@plt+0x9a70>
   1abac:	stmia	ip!, {r0, r1, r2, r3}
   1abb0:	ldm	lr!, {r0, r1, r2, r3}
   1abb4:	ldr	r4, [sp, #52]	; 0x34
   1abb8:	stmia	ip!, {r0, r1, r2, r3}
   1abbc:	ldm	lr, {r0, r1, r2, r3}
   1abc0:	mvn	lr, r4
   1abc4:	and	lr, lr, #67108864	; 0x4000000
   1abc8:	eor	lr, lr, r4
   1abcc:	stm	ip, {r0, r1, r2, r3}
   1abd0:	str	lr, [sp, #52]	; 0x34
   1abd4:	bl	11180 <__errno_location@plt>
   1abd8:	ldr	r2, [r5, #4]
   1abdc:	ldr	r4, [r5]
   1abe0:	cmp	r2, #0
   1abe4:	ldr	r3, [r0]
   1abe8:	mov	r7, r0
   1abec:	str	r3, [sp, #28]
   1abf0:	bgt	1ac4c <__assert_fail@plt+0x997c>
   1abf4:	add	r6, r5, #8
   1abf8:	cmp	r4, r6
   1abfc:	str	r2, [sp, #36]	; 0x24
   1ac00:	beq	1ad0c <__assert_fail@plt+0x9a3c>
   1ac04:	mov	r3, #8
   1ac08:	mov	r0, r4
   1ac0c:	str	r3, [sp]
   1ac10:	rsb	r2, r2, #1
   1ac14:	mvn	r3, #-2147483648	; 0x80000000
   1ac18:	add	r1, sp, #36	; 0x24
   1ac1c:	bl	1cb04 <__assert_fail@plt+0xb834>
   1ac20:	mov	r4, r0
   1ac24:	str	r0, [r5]
   1ac28:	ldr	r0, [r5, #4]
   1ac2c:	ldr	r2, [sp, #36]	; 0x24
   1ac30:	mov	r1, #0
   1ac34:	sub	r2, r2, r0
   1ac38:	add	r0, r4, r0, lsl #3
   1ac3c:	lsl	r2, r2, #3
   1ac40:	bl	11198 <memset@plt>
   1ac44:	ldr	r3, [sp, #36]	; 0x24
   1ac48:	str	r3, [r5, #4]
   1ac4c:	ldr	r6, [sp, #44]	; 0x2c
   1ac50:	ldr	r8, [r4]
   1ac54:	ldr	r5, [r4, #4]
   1ac58:	ldr	r2, [sp, #80]	; 0x50
   1ac5c:	ldr	r3, [sp, #40]	; 0x28
   1ac60:	ldr	ip, [sp, #84]	; 0x54
   1ac64:	orr	r6, r6, #1
   1ac68:	add	fp, sp, #48	; 0x30
   1ac6c:	str	r2, [sp, #12]
   1ac70:	str	r3, [sp]
   1ac74:	str	r6, [sp, #4]
   1ac78:	mov	r1, r8
   1ac7c:	mov	r0, r5
   1ac80:	str	ip, [sp, #16]
   1ac84:	str	fp, [sp, #8]
   1ac88:	mov	r3, sl
   1ac8c:	mov	r2, r9
   1ac90:	bl	17f44 <__assert_fail@plt+0x6c74>
   1ac94:	cmp	r8, r0
   1ac98:	bhi	1acf8 <__assert_fail@plt+0x9a28>
   1ac9c:	ldr	r3, [pc, #160]	; 1ad44 <__assert_fail@plt+0x9a74>
   1aca0:	add	r8, r0, #1
   1aca4:	cmp	r5, r3
   1aca8:	str	r8, [r4]
   1acac:	beq	1acb8 <__assert_fail@plt+0x99e8>
   1acb0:	mov	r0, r5
   1acb4:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1acb8:	mov	r0, r8
   1acbc:	bl	1c8e8 <__assert_fail@plt+0xb618>
   1acc0:	ldr	ip, [sp, #84]	; 0x54
   1acc4:	ldr	lr, [sp, #40]	; 0x28
   1acc8:	mov	r3, sl
   1accc:	mov	r2, r9
   1acd0:	mov	r1, r8
   1acd4:	str	r0, [r4, #4]
   1acd8:	ldr	r4, [sp, #80]	; 0x50
   1acdc:	str	fp, [sp, #8]
   1ace0:	str	r6, [sp, #4]
   1ace4:	str	ip, [sp, #16]
   1ace8:	str	r4, [sp, #12]
   1acec:	str	lr, [sp]
   1acf0:	mov	r5, r0
   1acf4:	bl	17f44 <__assert_fail@plt+0x6c74>
   1acf8:	ldr	r3, [sp, #28]
   1acfc:	mov	r0, r5
   1ad00:	str	r3, [r7]
   1ad04:	add	sp, sp, #92	; 0x5c
   1ad08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad0c:	mov	r3, #8
   1ad10:	str	r3, [sp]
   1ad14:	add	r1, sp, #36	; 0x24
   1ad18:	rsb	r2, r2, #1
   1ad1c:	mvn	r3, #-2147483648	; 0x80000000
   1ad20:	mov	r0, #0
   1ad24:	bl	1cb04 <__assert_fail@plt+0xb834>
   1ad28:	mov	r4, r0
   1ad2c:	ldm	r6, {r0, r1}
   1ad30:	str	r4, [r5]
   1ad34:	stm	r4, {r0, r1}
   1ad38:	b	1ac28 <__assert_fail@plt+0x9958>
   1ad3c:	andeq	r0, r3, r0, asr #3
   1ad40:	andeq	r0, r3, r8, lsr r1
   1ad44:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1ad48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad4c:	sub	sp, sp, #180	; 0xb4
   1ad50:	mov	r6, r1
   1ad54:	mov	r4, r0
   1ad58:	mov	r9, r2
   1ad5c:	add	r0, sp, #80	; 0x50
   1ad60:	mov	r2, #48	; 0x30
   1ad64:	mov	r1, #0
   1ad68:	bl	11198 <memset@plt>
   1ad6c:	cmp	r6, #10
   1ad70:	beq	1af50 <__assert_fail@plt+0x9c80>
   1ad74:	add	r5, sp, #80	; 0x50
   1ad78:	str	r6, [sp, #80]	; 0x50
   1ad7c:	ldm	r5!, {r0, r1, r2, r3}
   1ad80:	add	ip, sp, #128	; 0x80
   1ad84:	mov	r7, ip
   1ad88:	add	lr, sp, #32
   1ad8c:	stmia	ip!, {r0, r1, r2, r3}
   1ad90:	mov	r8, #67108864	; 0x4000000
   1ad94:	ldm	r5!, {r0, r1, r2, r3}
   1ad98:	ldr	r6, [pc, #436]	; 1af54 <__assert_fail@plt+0x9c84>
   1ad9c:	stmia	ip!, {r0, r1, r2, r3}
   1ada0:	ldm	r5, {r0, r1, r2, r3}
   1ada4:	stm	ip, {r0, r1, r2, r3}
   1ada8:	ldm	r7!, {r0, r1, r2, r3}
   1adac:	stmia	lr!, {r0, r1, r2, r3}
   1adb0:	ldm	r7!, {r0, r1, r2, r3}
   1adb4:	str	r8, [sp, #44]	; 0x2c
   1adb8:	stmia	lr!, {r0, r1, r2, r3}
   1adbc:	ldm	ip, {r0, r1, r2, r3}
   1adc0:	stm	lr, {r0, r1, r2, r3}
   1adc4:	bl	11180 <__errno_location@plt>
   1adc8:	cmn	r4, #-2147483647	; 0x80000001
   1adcc:	ldr	r5, [r6]
   1add0:	mov	r7, r0
   1add4:	movne	r0, #0
   1add8:	moveq	r0, #1
   1addc:	ldr	r3, [r7]
   1ade0:	orrs	r0, r0, r4, lsr #31
   1ade4:	str	r3, [sp, #24]
   1ade8:	bne	1af50 <__assert_fail@plt+0x9c80>
   1adec:	ldr	r2, [r6, #4]
   1adf0:	cmp	r4, r2
   1adf4:	blt	1ae54 <__assert_fail@plt+0x9b84>
   1adf8:	add	r8, r6, #8
   1adfc:	cmp	r5, r8
   1ae00:	str	r2, [sp, #80]	; 0x50
   1ae04:	beq	1af20 <__assert_fail@plt+0x9c50>
   1ae08:	mov	r3, #8
   1ae0c:	sub	r2, r4, r2
   1ae10:	mov	r0, r5
   1ae14:	str	r3, [sp]
   1ae18:	add	r2, r2, #1
   1ae1c:	add	r1, sp, #80	; 0x50
   1ae20:	mvn	r3, #-2147483648	; 0x80000000
   1ae24:	bl	1cb04 <__assert_fail@plt+0xb834>
   1ae28:	mov	r5, r0
   1ae2c:	str	r0, [r6]
   1ae30:	ldr	r0, [r6, #4]
   1ae34:	ldr	r2, [sp, #80]	; 0x50
   1ae38:	mov	r1, #0
   1ae3c:	sub	r2, r2, r0
   1ae40:	add	r0, r5, r0, lsl #3
   1ae44:	lsl	r2, r2, #3
   1ae48:	bl	11198 <memset@plt>
   1ae4c:	ldr	r3, [sp, #80]	; 0x50
   1ae50:	str	r3, [r6, #4]
   1ae54:	add	fp, r5, r4, lsl #3
   1ae58:	ldr	r1, [sp, #36]	; 0x24
   1ae5c:	ldr	r8, [r5, r4, lsl #3]
   1ae60:	ldr	r6, [fp, #4]
   1ae64:	ldr	r2, [sp, #72]	; 0x48
   1ae68:	ldr	r3, [sp, #32]
   1ae6c:	ldr	ip, [sp, #76]	; 0x4c
   1ae70:	orr	r1, r1, #1
   1ae74:	add	sl, sp, #40	; 0x28
   1ae78:	str	r1, [sp, #28]
   1ae7c:	str	r1, [sp, #4]
   1ae80:	str	r2, [sp, #12]
   1ae84:	str	r3, [sp]
   1ae88:	mov	r0, r6
   1ae8c:	mov	r1, r8
   1ae90:	str	ip, [sp, #16]
   1ae94:	str	sl, [sp, #8]
   1ae98:	mvn	r3, #0
   1ae9c:	mov	r2, r9
   1aea0:	bl	17f44 <__assert_fail@plt+0x6c74>
   1aea4:	cmp	r8, r0
   1aea8:	bhi	1af0c <__assert_fail@plt+0x9c3c>
   1aeac:	ldr	r3, [pc, #164]	; 1af58 <__assert_fail@plt+0x9c88>
   1aeb0:	add	r8, r0, #1
   1aeb4:	cmp	r6, r3
   1aeb8:	str	r8, [r5, r4, lsl #3]
   1aebc:	beq	1aec8 <__assert_fail@plt+0x9bf8>
   1aec0:	mov	r0, r6
   1aec4:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1aec8:	mov	r0, r8
   1aecc:	bl	1c8e8 <__assert_fail@plt+0xb618>
   1aed0:	ldr	lr, [sp, #76]	; 0x4c
   1aed4:	ldr	r3, [sp, #32]
   1aed8:	ldr	ip, [sp, #72]	; 0x48
   1aedc:	ldr	r4, [sp, #28]
   1aee0:	mov	r2, r9
   1aee4:	mov	r1, r8
   1aee8:	str	r0, [fp, #4]
   1aeec:	str	r3, [sp]
   1aef0:	str	sl, [sp, #8]
   1aef4:	str	r4, [sp, #4]
   1aef8:	str	lr, [sp, #16]
   1aefc:	str	ip, [sp, #12]
   1af00:	mvn	r3, #0
   1af04:	mov	r6, r0
   1af08:	bl	17f44 <__assert_fail@plt+0x6c74>
   1af0c:	ldr	r3, [sp, #24]
   1af10:	mov	r0, r6
   1af14:	str	r3, [r7]
   1af18:	add	sp, sp, #180	; 0xb4
   1af1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af20:	mov	r3, #8
   1af24:	sub	r2, r4, r2
   1af28:	add	r1, sp, #80	; 0x50
   1af2c:	str	r3, [sp]
   1af30:	add	r2, r2, #1
   1af34:	mvn	r3, #-2147483648	; 0x80000000
   1af38:	bl	1cb04 <__assert_fail@plt+0xb834>
   1af3c:	mov	r5, r0
   1af40:	ldm	r8, {r0, r1}
   1af44:	str	r5, [r6]
   1af48:	stm	r5, {r0, r1}
   1af4c:	b	1ae30 <__assert_fail@plt+0x9b60>
   1af50:	bl	11294 <abort@plt>
   1af54:	andeq	r0, r3, r8, lsr r1
   1af58:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1af5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af60:	mov	r7, r1
   1af64:	ldr	lr, [pc, #492]	; 1b158 <__assert_fail@plt+0x9e88>
   1af68:	mov	r8, r2
   1af6c:	mov	r4, r0
   1af70:	mov	fp, r3
   1af74:	ldm	lr!, {r0, r1, r2, r3}
   1af78:	sub	sp, sp, #100	; 0x64
   1af7c:	add	ip, sp, #48	; 0x30
   1af80:	mov	sl, #10
   1af84:	stmia	ip!, {r0, r1, r2, r3}
   1af88:	cmp	r8, #0
   1af8c:	cmpne	r7, #0
   1af90:	ldm	lr!, {r0, r1, r2, r3}
   1af94:	str	sl, [sp, #48]	; 0x30
   1af98:	stmia	ip!, {r0, r1, r2, r3}
   1af9c:	ldm	lr, {r0, r1, r2, r3}
   1afa0:	stm	ip, {r0, r1, r2, r3}
   1afa4:	beq	1b154 <__assert_fail@plt+0x9e84>
   1afa8:	str	r7, [sp, #88]	; 0x58
   1afac:	str	r8, [sp, #92]	; 0x5c
   1afb0:	bl	11180 <__errno_location@plt>
   1afb4:	ldr	r6, [pc, #416]	; 1b15c <__assert_fail@plt+0x9e8c>
   1afb8:	cmn	r4, #-2147483647	; 0x80000001
   1afbc:	ldr	r5, [r6]
   1afc0:	mov	r9, r0
   1afc4:	movne	r0, #0
   1afc8:	moveq	r0, #1
   1afcc:	ldr	r3, [r9]
   1afd0:	orrs	r0, r0, r4, lsr #31
   1afd4:	str	r3, [sp, #28]
   1afd8:	bne	1b154 <__assert_fail@plt+0x9e84>
   1afdc:	ldr	r2, [r6, #4]
   1afe0:	cmp	r4, r2
   1afe4:	movlt	r3, sl
   1afe8:	blt	1b054 <__assert_fail@plt+0x9d84>
   1afec:	add	r7, r6, #8
   1aff0:	cmp	r5, r7
   1aff4:	str	r2, [sp, #44]	; 0x2c
   1aff8:	beq	1b124 <__assert_fail@plt+0x9e54>
   1affc:	mov	r3, #8
   1b000:	sub	r2, r4, r2
   1b004:	mov	r0, r5
   1b008:	str	r3, [sp]
   1b00c:	add	r2, r2, #1
   1b010:	mvn	r3, #-2147483648	; 0x80000000
   1b014:	add	r1, sp, #44	; 0x2c
   1b018:	bl	1cb04 <__assert_fail@plt+0xb834>
   1b01c:	mov	r5, r0
   1b020:	str	r0, [r6]
   1b024:	ldr	r0, [r6, #4]
   1b028:	ldr	r2, [sp, #44]	; 0x2c
   1b02c:	mov	r1, #0
   1b030:	sub	r2, r2, r0
   1b034:	add	r0, r5, r0, lsl #3
   1b038:	lsl	r2, r2, #3
   1b03c:	bl	11198 <memset@plt>
   1b040:	ldr	r3, [sp, #48]	; 0x30
   1b044:	ldr	r7, [sp, #88]	; 0x58
   1b048:	ldr	r8, [sp, #92]	; 0x5c
   1b04c:	ldr	r2, [sp, #44]	; 0x2c
   1b050:	str	r2, [r6, #4]
   1b054:	add	r2, r5, r4, lsl #3
   1b058:	mov	r1, r2
   1b05c:	str	r2, [sp, #32]
   1b060:	ldr	r2, [sp, #52]	; 0x34
   1b064:	ldr	r6, [r1, #4]
   1b068:	ldr	sl, [r5, r4, lsl #3]
   1b06c:	orr	r2, r2, #1
   1b070:	str	r3, [sp]
   1b074:	add	r3, sp, #56	; 0x38
   1b078:	str	r2, [sp, #36]	; 0x24
   1b07c:	str	r2, [sp, #4]
   1b080:	str	r3, [sp, #8]
   1b084:	mov	r0, r6
   1b088:	str	r8, [sp, #16]
   1b08c:	str	r7, [sp, #12]
   1b090:	mov	r1, sl
   1b094:	mvn	r3, #0
   1b098:	mov	r2, fp
   1b09c:	bl	17f44 <__assert_fail@plt+0x6c74>
   1b0a0:	cmp	sl, r0
   1b0a4:	bhi	1b110 <__assert_fail@plt+0x9e40>
   1b0a8:	ldr	r3, [pc, #176]	; 1b160 <__assert_fail@plt+0x9e90>
   1b0ac:	add	r7, r0, #1
   1b0b0:	cmp	r6, r3
   1b0b4:	str	r7, [r5, r4, lsl #3]
   1b0b8:	beq	1b0c4 <__assert_fail@plt+0x9df4>
   1b0bc:	mov	r0, r6
   1b0c0:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1b0c4:	mov	r0, r7
   1b0c8:	bl	1c8e8 <__assert_fail@plt+0xb618>
   1b0cc:	ldr	r3, [sp, #32]
   1b0d0:	ldr	lr, [sp, #92]	; 0x5c
   1b0d4:	ldr	ip, [sp, #88]	; 0x58
   1b0d8:	ldr	r4, [sp, #36]	; 0x24
   1b0dc:	mov	r2, fp
   1b0e0:	mov	r1, r7
   1b0e4:	str	r0, [r3, #4]
   1b0e8:	add	r3, sp, #56	; 0x38
   1b0ec:	str	r3, [sp, #8]
   1b0f0:	ldr	r3, [sp, #48]	; 0x30
   1b0f4:	str	r4, [sp, #4]
   1b0f8:	str	r3, [sp]
   1b0fc:	str	lr, [sp, #16]
   1b100:	str	ip, [sp, #12]
   1b104:	mvn	r3, #0
   1b108:	mov	r6, r0
   1b10c:	bl	17f44 <__assert_fail@plt+0x6c74>
   1b110:	ldr	r3, [sp, #28]
   1b114:	mov	r0, r6
   1b118:	str	r3, [r9]
   1b11c:	add	sp, sp, #100	; 0x64
   1b120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b124:	mov	r3, #8
   1b128:	sub	r2, r4, r2
   1b12c:	str	r3, [sp]
   1b130:	add	r1, sp, #44	; 0x2c
   1b134:	add	r2, r2, #1
   1b138:	mvn	r3, #-2147483648	; 0x80000000
   1b13c:	bl	1cb04 <__assert_fail@plt+0xb834>
   1b140:	mov	r5, r0
   1b144:	ldm	r7, {r0, r1}
   1b148:	str	r5, [r6]
   1b14c:	stm	r5, {r0, r1}
   1b150:	b	1b024 <__assert_fail@plt+0x9d54>
   1b154:	bl	11294 <abort@plt>
   1b158:	andeq	r0, r3, r0, asr #3
   1b15c:	andeq	r0, r3, r8, lsr r1
   1b160:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1b164:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b168:	mov	r7, r1
   1b16c:	ldr	lr, [pc, #492]	; 1b360 <__assert_fail@plt+0xa090>
   1b170:	mov	r8, r2
   1b174:	mov	r4, r0
   1b178:	mov	fp, r3
   1b17c:	ldm	lr!, {r0, r1, r2, r3}
   1b180:	sub	sp, sp, #100	; 0x64
   1b184:	add	ip, sp, #48	; 0x30
   1b188:	mov	sl, #10
   1b18c:	stmia	ip!, {r0, r1, r2, r3}
   1b190:	cmp	r8, #0
   1b194:	cmpne	r7, #0
   1b198:	ldm	lr!, {r0, r1, r2, r3}
   1b19c:	str	sl, [sp, #48]	; 0x30
   1b1a0:	stmia	ip!, {r0, r1, r2, r3}
   1b1a4:	ldm	lr, {r0, r1, r2, r3}
   1b1a8:	stm	ip, {r0, r1, r2, r3}
   1b1ac:	beq	1b35c <__assert_fail@plt+0xa08c>
   1b1b0:	str	r7, [sp, #88]	; 0x58
   1b1b4:	str	r8, [sp, #92]	; 0x5c
   1b1b8:	bl	11180 <__errno_location@plt>
   1b1bc:	ldr	r6, [pc, #416]	; 1b364 <__assert_fail@plt+0xa094>
   1b1c0:	cmn	r4, #-2147483647	; 0x80000001
   1b1c4:	ldr	r5, [r6]
   1b1c8:	mov	r9, r0
   1b1cc:	movne	r0, #0
   1b1d0:	moveq	r0, #1
   1b1d4:	ldr	r3, [r9]
   1b1d8:	orrs	r0, r0, r4, lsr #31
   1b1dc:	str	r3, [sp, #28]
   1b1e0:	bne	1b35c <__assert_fail@plt+0xa08c>
   1b1e4:	ldr	r2, [r6, #4]
   1b1e8:	cmp	r4, r2
   1b1ec:	movlt	r3, sl
   1b1f0:	blt	1b25c <__assert_fail@plt+0x9f8c>
   1b1f4:	add	r7, r6, #8
   1b1f8:	cmp	r5, r7
   1b1fc:	str	r2, [sp, #44]	; 0x2c
   1b200:	beq	1b32c <__assert_fail@plt+0xa05c>
   1b204:	mov	r3, #8
   1b208:	sub	r2, r4, r2
   1b20c:	mov	r0, r5
   1b210:	str	r3, [sp]
   1b214:	add	r2, r2, #1
   1b218:	mvn	r3, #-2147483648	; 0x80000000
   1b21c:	add	r1, sp, #44	; 0x2c
   1b220:	bl	1cb04 <__assert_fail@plt+0xb834>
   1b224:	mov	r5, r0
   1b228:	str	r0, [r6]
   1b22c:	ldr	r0, [r6, #4]
   1b230:	ldr	r2, [sp, #44]	; 0x2c
   1b234:	mov	r1, #0
   1b238:	sub	r2, r2, r0
   1b23c:	add	r0, r5, r0, lsl #3
   1b240:	lsl	r2, r2, #3
   1b244:	bl	11198 <memset@plt>
   1b248:	ldr	r3, [sp, #48]	; 0x30
   1b24c:	ldr	r7, [sp, #88]	; 0x58
   1b250:	ldr	r8, [sp, #92]	; 0x5c
   1b254:	ldr	r2, [sp, #44]	; 0x2c
   1b258:	str	r2, [r6, #4]
   1b25c:	add	r2, r5, r4, lsl #3
   1b260:	mov	r1, r2
   1b264:	str	r2, [sp, #32]
   1b268:	ldr	r2, [sp, #52]	; 0x34
   1b26c:	ldr	r6, [r1, #4]
   1b270:	ldr	sl, [r5, r4, lsl #3]
   1b274:	orr	r2, r2, #1
   1b278:	str	r3, [sp]
   1b27c:	add	r3, sp, #56	; 0x38
   1b280:	str	r2, [sp, #36]	; 0x24
   1b284:	str	r2, [sp, #4]
   1b288:	str	r3, [sp, #8]
   1b28c:	mov	r0, r6
   1b290:	str	r8, [sp, #16]
   1b294:	str	r7, [sp, #12]
   1b298:	mov	r1, sl
   1b29c:	ldr	r3, [sp, #136]	; 0x88
   1b2a0:	mov	r2, fp
   1b2a4:	bl	17f44 <__assert_fail@plt+0x6c74>
   1b2a8:	cmp	sl, r0
   1b2ac:	bhi	1b318 <__assert_fail@plt+0xa048>
   1b2b0:	ldr	r3, [pc, #176]	; 1b368 <__assert_fail@plt+0xa098>
   1b2b4:	add	r7, r0, #1
   1b2b8:	cmp	r6, r3
   1b2bc:	str	r7, [r5, r4, lsl #3]
   1b2c0:	beq	1b2cc <__assert_fail@plt+0x9ffc>
   1b2c4:	mov	r0, r6
   1b2c8:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1b2cc:	mov	r0, r7
   1b2d0:	bl	1c8e8 <__assert_fail@plt+0xb618>
   1b2d4:	ldr	r3, [sp, #32]
   1b2d8:	ldr	lr, [sp, #92]	; 0x5c
   1b2dc:	ldr	ip, [sp, #88]	; 0x58
   1b2e0:	ldr	r4, [sp, #36]	; 0x24
   1b2e4:	mov	r2, fp
   1b2e8:	mov	r1, r7
   1b2ec:	str	r0, [r3, #4]
   1b2f0:	add	r3, sp, #56	; 0x38
   1b2f4:	str	r3, [sp, #8]
   1b2f8:	ldr	r3, [sp, #48]	; 0x30
   1b2fc:	str	r4, [sp, #4]
   1b300:	str	r3, [sp]
   1b304:	str	lr, [sp, #16]
   1b308:	str	ip, [sp, #12]
   1b30c:	ldr	r3, [sp, #136]	; 0x88
   1b310:	mov	r6, r0
   1b314:	bl	17f44 <__assert_fail@plt+0x6c74>
   1b318:	ldr	r3, [sp, #28]
   1b31c:	mov	r0, r6
   1b320:	str	r3, [r9]
   1b324:	add	sp, sp, #100	; 0x64
   1b328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b32c:	mov	r3, #8
   1b330:	sub	r2, r4, r2
   1b334:	str	r3, [sp]
   1b338:	add	r1, sp, #44	; 0x2c
   1b33c:	add	r2, r2, #1
   1b340:	mvn	r3, #-2147483648	; 0x80000000
   1b344:	bl	1cb04 <__assert_fail@plt+0xb834>
   1b348:	mov	r5, r0
   1b34c:	ldm	r7, {r0, r1}
   1b350:	str	r5, [r6]
   1b354:	stm	r5, {r0, r1}
   1b358:	b	1b22c <__assert_fail@plt+0x9f5c>
   1b35c:	bl	11294 <abort@plt>
   1b360:	andeq	r0, r3, r0, asr #3
   1b364:	andeq	r0, r3, r8, lsr r1
   1b368:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1b36c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b370:	mov	r5, r0
   1b374:	ldr	lr, [pc, #452]	; 1b540 <__assert_fail@plt+0xa270>
   1b378:	mov	r6, r1
   1b37c:	mov	sl, r2
   1b380:	ldm	lr!, {r0, r1, r2, r3}
   1b384:	sub	sp, sp, #92	; 0x5c
   1b388:	add	ip, sp, #40	; 0x28
   1b38c:	cmp	r6, #0
   1b390:	cmpne	r5, #0
   1b394:	stmia	ip!, {r0, r1, r2, r3}
   1b398:	mov	r9, #10
   1b39c:	ldm	lr!, {r0, r1, r2, r3}
   1b3a0:	moveq	fp, #1
   1b3a4:	movne	fp, #0
   1b3a8:	str	r9, [sp, #40]	; 0x28
   1b3ac:	stmia	ip!, {r0, r1, r2, r3}
   1b3b0:	ldm	lr, {r0, r1, r2, r3}
   1b3b4:	stm	ip, {r0, r1, r2, r3}
   1b3b8:	beq	1b53c <__assert_fail@plt+0xa26c>
   1b3bc:	str	r5, [sp, #80]	; 0x50
   1b3c0:	str	r6, [sp, #84]	; 0x54
   1b3c4:	bl	11180 <__errno_location@plt>
   1b3c8:	ldr	r7, [pc, #372]	; 1b544 <__assert_fail@plt+0xa274>
   1b3cc:	ldr	r2, [r7, #4]
   1b3d0:	ldr	r4, [r7]
   1b3d4:	cmp	r2, #0
   1b3d8:	ldr	r3, [r0]
   1b3dc:	mov	r8, r0
   1b3e0:	str	r3, [sp, #24]
   1b3e4:	movgt	r3, r9
   1b3e8:	bgt	1b450 <__assert_fail@plt+0xa180>
   1b3ec:	add	r5, r7, #8
   1b3f0:	cmp	r4, r5
   1b3f4:	str	r2, [sp, #36]	; 0x24
   1b3f8:	beq	1b50c <__assert_fail@plt+0xa23c>
   1b3fc:	mov	r3, #8
   1b400:	mov	r0, r4
   1b404:	str	r3, [sp]
   1b408:	rsb	r2, r2, #1
   1b40c:	mvn	r3, #-2147483648	; 0x80000000
   1b410:	add	r1, sp, #36	; 0x24
   1b414:	bl	1cb04 <__assert_fail@plt+0xb834>
   1b418:	mov	r4, r0
   1b41c:	str	r0, [r7]
   1b420:	ldr	r0, [r7, #4]
   1b424:	ldr	r2, [sp, #36]	; 0x24
   1b428:	mov	r1, #0
   1b42c:	sub	r2, r2, r0
   1b430:	add	r0, r4, r0, lsl #3
   1b434:	lsl	r2, r2, #3
   1b438:	bl	11198 <memset@plt>
   1b43c:	ldr	r3, [sp, #40]	; 0x28
   1b440:	ldr	r5, [sp, #80]	; 0x50
   1b444:	ldr	r6, [sp, #84]	; 0x54
   1b448:	ldr	r2, [sp, #36]	; 0x24
   1b44c:	str	r2, [r7, #4]
   1b450:	ldr	r2, [sp, #44]	; 0x2c
   1b454:	ldr	r9, [r4]
   1b458:	ldr	r7, [r4, #4]
   1b45c:	orr	r2, r2, #1
   1b460:	add	fp, sp, #48	; 0x30
   1b464:	str	r2, [sp, #28]
   1b468:	str	r2, [sp, #4]
   1b46c:	str	r3, [sp]
   1b470:	str	r6, [sp, #16]
   1b474:	str	r5, [sp, #12]
   1b478:	mov	r1, r9
   1b47c:	mov	r0, r7
   1b480:	str	fp, [sp, #8]
   1b484:	mvn	r3, #0
   1b488:	mov	r2, sl
   1b48c:	bl	17f44 <__assert_fail@plt+0x6c74>
   1b490:	cmp	r9, r0
   1b494:	bhi	1b4f8 <__assert_fail@plt+0xa228>
   1b498:	ldr	r3, [pc, #168]	; 1b548 <__assert_fail@plt+0xa278>
   1b49c:	add	r5, r0, #1
   1b4a0:	cmp	r7, r3
   1b4a4:	str	r5, [r4]
   1b4a8:	beq	1b4b4 <__assert_fail@plt+0xa1e4>
   1b4ac:	mov	r0, r7
   1b4b0:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1b4b4:	mov	r0, r5
   1b4b8:	bl	1c8e8 <__assert_fail@plt+0xb618>
   1b4bc:	ldr	lr, [sp, #84]	; 0x54
   1b4c0:	ldr	r3, [sp, #40]	; 0x28
   1b4c4:	ldr	ip, [sp, #80]	; 0x50
   1b4c8:	mov	r2, sl
   1b4cc:	mov	r1, r5
   1b4d0:	str	r0, [r4, #4]
   1b4d4:	ldr	r4, [sp, #28]
   1b4d8:	str	r3, [sp]
   1b4dc:	str	fp, [sp, #8]
   1b4e0:	str	r4, [sp, #4]
   1b4e4:	str	lr, [sp, #16]
   1b4e8:	str	ip, [sp, #12]
   1b4ec:	mvn	r3, #0
   1b4f0:	mov	r7, r0
   1b4f4:	bl	17f44 <__assert_fail@plt+0x6c74>
   1b4f8:	ldr	r3, [sp, #24]
   1b4fc:	mov	r0, r7
   1b500:	str	r3, [r8]
   1b504:	add	sp, sp, #92	; 0x5c
   1b508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b50c:	mov	r3, #8
   1b510:	str	r3, [sp]
   1b514:	add	r1, sp, #36	; 0x24
   1b518:	rsb	r2, r2, #1
   1b51c:	mov	r0, fp
   1b520:	mvn	r3, #-2147483648	; 0x80000000
   1b524:	bl	1cb04 <__assert_fail@plt+0xb834>
   1b528:	mov	r4, r0
   1b52c:	ldm	r5, {r0, r1}
   1b530:	str	r4, [r7]
   1b534:	stm	r4, {r0, r1}
   1b538:	b	1b420 <__assert_fail@plt+0xa150>
   1b53c:	bl	11294 <abort@plt>
   1b540:	andeq	r0, r3, r0, asr #3
   1b544:	andeq	r0, r3, r8, lsr r1
   1b548:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1b54c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b550:	mov	r5, r0
   1b554:	ldr	lr, [pc, #464]	; 1b72c <__assert_fail@plt+0xa45c>
   1b558:	mov	r6, r1
   1b55c:	mov	sl, r2
   1b560:	mov	fp, r3
   1b564:	ldm	lr!, {r0, r1, r2, r3}
   1b568:	sub	sp, sp, #92	; 0x5c
   1b56c:	add	ip, sp, #40	; 0x28
   1b570:	cmp	r6, #0
   1b574:	cmpne	r5, #0
   1b578:	stmia	ip!, {r0, r1, r2, r3}
   1b57c:	moveq	r4, #1
   1b580:	ldm	lr!, {r0, r1, r2, r3}
   1b584:	movne	r4, #0
   1b588:	mov	r9, #10
   1b58c:	str	r4, [sp, #28]
   1b590:	stmia	ip!, {r0, r1, r2, r3}
   1b594:	ldm	lr, {r0, r1, r2, r3}
   1b598:	str	r9, [sp, #40]	; 0x28
   1b59c:	stm	ip, {r0, r1, r2, r3}
   1b5a0:	beq	1b728 <__assert_fail@plt+0xa458>
   1b5a4:	str	r5, [sp, #80]	; 0x50
   1b5a8:	str	r6, [sp, #84]	; 0x54
   1b5ac:	bl	11180 <__errno_location@plt>
   1b5b0:	ldr	r7, [pc, #376]	; 1b730 <__assert_fail@plt+0xa460>
   1b5b4:	ldr	r2, [r7, #4]
   1b5b8:	ldr	r4, [r7]
   1b5bc:	cmp	r2, #0
   1b5c0:	ldr	r3, [r0]
   1b5c4:	mov	r8, r0
   1b5c8:	str	r3, [sp, #24]
   1b5cc:	movgt	r3, r9
   1b5d0:	bgt	1b638 <__assert_fail@plt+0xa368>
   1b5d4:	add	r5, r7, #8
   1b5d8:	cmp	r4, r5
   1b5dc:	str	r2, [sp, #36]	; 0x24
   1b5e0:	beq	1b6f8 <__assert_fail@plt+0xa428>
   1b5e4:	mov	r3, #8
   1b5e8:	mov	r0, r4
   1b5ec:	str	r3, [sp]
   1b5f0:	rsb	r2, r2, #1
   1b5f4:	mvn	r3, #-2147483648	; 0x80000000
   1b5f8:	add	r1, sp, #36	; 0x24
   1b5fc:	bl	1cb04 <__assert_fail@plt+0xb834>
   1b600:	mov	r4, r0
   1b604:	str	r0, [r7]
   1b608:	ldr	r0, [r7, #4]
   1b60c:	ldr	r2, [sp, #36]	; 0x24
   1b610:	mov	r1, #0
   1b614:	sub	r2, r2, r0
   1b618:	add	r0, r4, r0, lsl #3
   1b61c:	lsl	r2, r2, #3
   1b620:	bl	11198 <memset@plt>
   1b624:	ldr	r3, [sp, #40]	; 0x28
   1b628:	ldr	r5, [sp, #80]	; 0x50
   1b62c:	ldr	r6, [sp, #84]	; 0x54
   1b630:	ldr	r2, [sp, #36]	; 0x24
   1b634:	str	r2, [r7, #4]
   1b638:	ldr	r2, [sp, #44]	; 0x2c
   1b63c:	ldr	r9, [r4]
   1b640:	ldr	r7, [r4, #4]
   1b644:	orr	r2, r2, #1
   1b648:	str	r3, [sp]
   1b64c:	add	r3, sp, #48	; 0x30
   1b650:	str	r2, [sp, #28]
   1b654:	str	r2, [sp, #4]
   1b658:	str	r3, [sp, #8]
   1b65c:	str	r6, [sp, #16]
   1b660:	str	r5, [sp, #12]
   1b664:	mov	r1, r9
   1b668:	mov	r0, r7
   1b66c:	mov	r3, fp
   1b670:	mov	r2, sl
   1b674:	bl	17f44 <__assert_fail@plt+0x6c74>
   1b678:	cmp	r9, r0
   1b67c:	bhi	1b6e4 <__assert_fail@plt+0xa414>
   1b680:	ldr	r3, [pc, #172]	; 1b734 <__assert_fail@plt+0xa464>
   1b684:	add	r5, r0, #1
   1b688:	cmp	r7, r3
   1b68c:	str	r5, [r4]
   1b690:	beq	1b69c <__assert_fail@plt+0xa3cc>
   1b694:	mov	r0, r7
   1b698:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1b69c:	mov	r0, r5
   1b6a0:	bl	1c8e8 <__assert_fail@plt+0xb618>
   1b6a4:	add	lr, sp, #48	; 0x30
   1b6a8:	ldr	ip, [sp, #84]	; 0x54
   1b6ac:	mov	r1, r5
   1b6b0:	ldr	r5, [sp, #28]
   1b6b4:	mov	r3, fp
   1b6b8:	mov	r2, sl
   1b6bc:	str	r0, [r4, #4]
   1b6c0:	ldr	r4, [sp, #80]	; 0x50
   1b6c4:	str	lr, [sp, #8]
   1b6c8:	ldr	lr, [sp, #40]	; 0x28
   1b6cc:	str	r5, [sp, #4]
   1b6d0:	str	ip, [sp, #16]
   1b6d4:	str	r4, [sp, #12]
   1b6d8:	str	lr, [sp]
   1b6dc:	mov	r7, r0
   1b6e0:	bl	17f44 <__assert_fail@plt+0x6c74>
   1b6e4:	ldr	r3, [sp, #24]
   1b6e8:	mov	r0, r7
   1b6ec:	str	r3, [r8]
   1b6f0:	add	sp, sp, #92	; 0x5c
   1b6f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b6f8:	mov	r3, #8
   1b6fc:	str	r3, [sp]
   1b700:	add	r1, sp, #36	; 0x24
   1b704:	rsb	r2, r2, #1
   1b708:	ldr	r0, [sp, #28]
   1b70c:	mvn	r3, #-2147483648	; 0x80000000
   1b710:	bl	1cb04 <__assert_fail@plt+0xb834>
   1b714:	mov	r4, r0
   1b718:	ldm	r5, {r0, r1}
   1b71c:	str	r4, [r7]
   1b720:	stm	r4, {r0, r1}
   1b724:	b	1b608 <__assert_fail@plt+0xa338>
   1b728:	bl	11294 <abort@plt>
   1b72c:	andeq	r0, r3, r0, asr #3
   1b730:	andeq	r0, r3, r8, lsr r1
   1b734:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1b738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b73c:	sub	sp, sp, #52	; 0x34
   1b740:	mov	r5, r0
   1b744:	mov	sl, r1
   1b748:	mov	fp, r2
   1b74c:	bl	11180 <__errno_location@plt>
   1b750:	ldr	r4, [pc, #404]	; 1b8ec <__assert_fail@plt+0xa61c>
   1b754:	cmn	r5, #-2147483647	; 0x80000001
   1b758:	ldr	r6, [r4]
   1b75c:	mov	r8, r0
   1b760:	movne	r0, #0
   1b764:	moveq	r0, #1
   1b768:	ldr	r3, [r8]
   1b76c:	orrs	r0, r0, r5, lsr #31
   1b770:	str	r3, [sp, #28]
   1b774:	bne	1b8e8 <__assert_fail@plt+0xa618>
   1b778:	ldr	r2, [r4, #4]
   1b77c:	cmp	r5, r2
   1b780:	blt	1b7e0 <__assert_fail@plt+0xa510>
   1b784:	add	r7, r4, #8
   1b788:	cmp	r6, r7
   1b78c:	str	r2, [sp, #44]	; 0x2c
   1b790:	beq	1b8b8 <__assert_fail@plt+0xa5e8>
   1b794:	mov	r3, #8
   1b798:	sub	r2, r5, r2
   1b79c:	mov	r0, r6
   1b7a0:	str	r3, [sp]
   1b7a4:	add	r2, r2, #1
   1b7a8:	mvn	r3, #-2147483648	; 0x80000000
   1b7ac:	add	r1, sp, #44	; 0x2c
   1b7b0:	bl	1cb04 <__assert_fail@plt+0xb834>
   1b7b4:	mov	r6, r0
   1b7b8:	str	r0, [r4]
   1b7bc:	ldr	r0, [r4, #4]
   1b7c0:	ldr	r2, [sp, #44]	; 0x2c
   1b7c4:	mov	r1, #0
   1b7c8:	sub	r2, r2, r0
   1b7cc:	add	r0, r6, r0, lsl #3
   1b7d0:	lsl	r2, r2, #3
   1b7d4:	bl	11198 <memset@plt>
   1b7d8:	ldr	r3, [sp, #44]	; 0x2c
   1b7dc:	str	r3, [r4, #4]
   1b7e0:	ldr	r2, [r4, #56]	; 0x38
   1b7e4:	add	r3, r6, r5, lsl #3
   1b7e8:	ldr	r1, [r4, #20]
   1b7ec:	ldr	r7, [r3, #4]
   1b7f0:	ldr	r9, [r6, r5, lsl #3]
   1b7f4:	ldr	ip, [r4, #60]	; 0x3c
   1b7f8:	str	r3, [sp, #32]
   1b7fc:	ldr	r3, [r4, #16]
   1b800:	str	r2, [sp, #12]
   1b804:	ldr	r2, [pc, #228]	; 1b8f0 <__assert_fail@plt+0xa620>
   1b808:	orr	r1, r1, #1
   1b80c:	str	r1, [sp, #36]	; 0x24
   1b810:	str	r1, [sp, #4]
   1b814:	str	r2, [sp, #8]
   1b818:	str	r3, [sp]
   1b81c:	mov	r0, r7
   1b820:	mov	r1, r9
   1b824:	str	ip, [sp, #16]
   1b828:	mov	r3, fp
   1b82c:	mov	r2, sl
   1b830:	bl	17f44 <__assert_fail@plt+0x6c74>
   1b834:	cmp	r9, r0
   1b838:	bhi	1b8a4 <__assert_fail@plt+0xa5d4>
   1b83c:	ldr	r3, [pc, #176]	; 1b8f4 <__assert_fail@plt+0xa624>
   1b840:	add	r9, r0, #1
   1b844:	cmp	r7, r3
   1b848:	str	r9, [r6, r5, lsl #3]
   1b84c:	beq	1b858 <__assert_fail@plt+0xa588>
   1b850:	mov	r0, r7
   1b854:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1b858:	mov	r0, r9
   1b85c:	bl	1c8e8 <__assert_fail@plt+0xb618>
   1b860:	ldr	ip, [sp, #32]
   1b864:	ldr	lr, [r4, #60]	; 0x3c
   1b868:	ldr	r5, [r4, #56]	; 0x38
   1b86c:	mov	r3, fp
   1b870:	mov	r2, sl
   1b874:	mov	r1, r9
   1b878:	str	r0, [ip, #4]
   1b87c:	ldr	ip, [r4, #16]
   1b880:	ldr	r4, [pc, #104]	; 1b8f0 <__assert_fail@plt+0xa620>
   1b884:	str	lr, [sp, #16]
   1b888:	str	r4, [sp, #8]
   1b88c:	ldr	r4, [sp, #36]	; 0x24
   1b890:	str	r5, [sp, #12]
   1b894:	str	r4, [sp, #4]
   1b898:	str	ip, [sp]
   1b89c:	mov	r7, r0
   1b8a0:	bl	17f44 <__assert_fail@plt+0x6c74>
   1b8a4:	ldr	r3, [sp, #28]
   1b8a8:	mov	r0, r7
   1b8ac:	str	r3, [r8]
   1b8b0:	add	sp, sp, #52	; 0x34
   1b8b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8b8:	mov	r3, #8
   1b8bc:	sub	r2, r5, r2
   1b8c0:	str	r3, [sp]
   1b8c4:	add	r1, sp, #44	; 0x2c
   1b8c8:	add	r2, r2, #1
   1b8cc:	mvn	r3, #-2147483648	; 0x80000000
   1b8d0:	bl	1cb04 <__assert_fail@plt+0xb834>
   1b8d4:	mov	r6, r0
   1b8d8:	ldm	r7, {r0, r1}
   1b8dc:	str	r6, [r4]
   1b8e0:	stm	r6, {r0, r1}
   1b8e4:	b	1b7bc <__assert_fail@plt+0xa4ec>
   1b8e8:	bl	11294 <abort@plt>
   1b8ec:	andeq	r0, r3, r8, lsr r1
   1b8f0:	andeq	r0, r3, r0, asr r1
   1b8f4:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1b8f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8fc:	sub	sp, sp, #44	; 0x2c
   1b900:	mov	r9, r0
   1b904:	mov	sl, r1
   1b908:	bl	11180 <__errno_location@plt>
   1b90c:	ldr	r4, [pc, #360]	; 1ba7c <__assert_fail@plt+0xa7ac>
   1b910:	ldr	r2, [r4, #4]
   1b914:	ldr	r5, [r4]
   1b918:	cmp	r2, #0
   1b91c:	ldr	r3, [r0]
   1b920:	mov	r7, r0
   1b924:	str	r3, [sp, #24]
   1b928:	bgt	1b984 <__assert_fail@plt+0xa6b4>
   1b92c:	add	r6, r4, #8
   1b930:	cmp	r5, r6
   1b934:	str	r2, [sp, #36]	; 0x24
   1b938:	beq	1ba4c <__assert_fail@plt+0xa77c>
   1b93c:	mov	r3, #8
   1b940:	mov	r0, r5
   1b944:	str	r3, [sp]
   1b948:	rsb	r2, r2, #1
   1b94c:	mvn	r3, #-2147483648	; 0x80000000
   1b950:	add	r1, sp, #36	; 0x24
   1b954:	bl	1cb04 <__assert_fail@plt+0xb834>
   1b958:	mov	r5, r0
   1b95c:	str	r0, [r4]
   1b960:	ldr	r0, [r4, #4]
   1b964:	ldr	r2, [sp, #36]	; 0x24
   1b968:	mov	r1, #0
   1b96c:	sub	r2, r2, r0
   1b970:	add	r0, r5, r0, lsl #3
   1b974:	lsl	r2, r2, #3
   1b978:	bl	11198 <memset@plt>
   1b97c:	ldr	r3, [sp, #36]	; 0x24
   1b980:	str	r3, [r4, #4]
   1b984:	ldr	r1, [r4, #20]
   1b988:	ldr	r8, [r5]
   1b98c:	ldr	r6, [r5, #4]
   1b990:	ldr	r2, [r4, #56]	; 0x38
   1b994:	ldr	r3, [r4, #16]
   1b998:	ldr	ip, [r4, #60]	; 0x3c
   1b99c:	ldr	fp, [pc, #220]	; 1ba80 <__assert_fail@plt+0xa7b0>
   1b9a0:	orr	r1, r1, #1
   1b9a4:	str	r1, [sp, #28]
   1b9a8:	str	r1, [sp, #4]
   1b9ac:	str	r2, [sp, #12]
   1b9b0:	str	r3, [sp]
   1b9b4:	mov	r1, r8
   1b9b8:	mov	r0, r6
   1b9bc:	str	ip, [sp, #16]
   1b9c0:	str	fp, [sp, #8]
   1b9c4:	mov	r3, sl
   1b9c8:	mov	r2, r9
   1b9cc:	bl	17f44 <__assert_fail@plt+0x6c74>
   1b9d0:	cmp	r8, r0
   1b9d4:	bhi	1ba38 <__assert_fail@plt+0xa768>
   1b9d8:	ldr	r3, [pc, #164]	; 1ba84 <__assert_fail@plt+0xa7b4>
   1b9dc:	add	r8, r0, #1
   1b9e0:	cmp	r6, r3
   1b9e4:	str	r8, [r5]
   1b9e8:	beq	1b9f4 <__assert_fail@plt+0xa724>
   1b9ec:	mov	r0, r6
   1b9f0:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1b9f4:	mov	r0, r8
   1b9f8:	bl	1c8e8 <__assert_fail@plt+0xb618>
   1b9fc:	ldr	lr, [r4, #60]	; 0x3c
   1ba00:	ldr	ip, [r4, #16]
   1ba04:	mov	r3, sl
   1ba08:	mov	r2, r9
   1ba0c:	mov	r1, r8
   1ba10:	str	r0, [r5, #4]
   1ba14:	ldr	r5, [r4, #56]	; 0x38
   1ba18:	ldr	r4, [sp, #28]
   1ba1c:	str	fp, [sp, #8]
   1ba20:	str	r4, [sp, #4]
   1ba24:	str	lr, [sp, #16]
   1ba28:	str	r5, [sp, #12]
   1ba2c:	str	ip, [sp]
   1ba30:	mov	r6, r0
   1ba34:	bl	17f44 <__assert_fail@plt+0x6c74>
   1ba38:	ldr	r3, [sp, #24]
   1ba3c:	mov	r0, r6
   1ba40:	str	r3, [r7]
   1ba44:	add	sp, sp, #44	; 0x2c
   1ba48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba4c:	mov	r3, #8
   1ba50:	str	r3, [sp]
   1ba54:	add	r1, sp, #36	; 0x24
   1ba58:	rsb	r2, r2, #1
   1ba5c:	mvn	r3, #-2147483648	; 0x80000000
   1ba60:	mov	r0, #0
   1ba64:	bl	1cb04 <__assert_fail@plt+0xb834>
   1ba68:	mov	r5, r0
   1ba6c:	ldm	r6, {r0, r1}
   1ba70:	str	r5, [r4]
   1ba74:	stm	r5, {r0, r1}
   1ba78:	b	1b960 <__assert_fail@plt+0xa690>
   1ba7c:	andeq	r0, r3, r8, lsr r1
   1ba80:	andeq	r0, r3, r0, asr r1
   1ba84:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1ba88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba8c:	sub	sp, sp, #44	; 0x2c
   1ba90:	mov	r5, r0
   1ba94:	mov	sl, r1
   1ba98:	bl	11180 <__errno_location@plt>
   1ba9c:	ldr	r4, [pc, #396]	; 1bc30 <__assert_fail@plt+0xa960>
   1baa0:	cmn	r5, #-2147483647	; 0x80000001
   1baa4:	ldr	r6, [r4]
   1baa8:	mov	r8, r0
   1baac:	movne	r0, #0
   1bab0:	moveq	r0, #1
   1bab4:	ldr	r3, [r8]
   1bab8:	orrs	r0, r0, r5, lsr #31
   1babc:	str	r3, [sp, #24]
   1bac0:	bne	1bc2c <__assert_fail@plt+0xa95c>
   1bac4:	ldr	r2, [r4, #4]
   1bac8:	cmp	r5, r2
   1bacc:	blt	1bb2c <__assert_fail@plt+0xa85c>
   1bad0:	add	r7, r4, #8
   1bad4:	cmp	r6, r7
   1bad8:	str	r2, [sp, #36]	; 0x24
   1badc:	beq	1bbfc <__assert_fail@plt+0xa92c>
   1bae0:	mov	r3, #8
   1bae4:	sub	r2, r5, r2
   1bae8:	mov	r0, r6
   1baec:	str	r3, [sp]
   1baf0:	add	r2, r2, #1
   1baf4:	mvn	r3, #-2147483648	; 0x80000000
   1baf8:	add	r1, sp, #36	; 0x24
   1bafc:	bl	1cb04 <__assert_fail@plt+0xb834>
   1bb00:	mov	r6, r0
   1bb04:	str	r0, [r4]
   1bb08:	ldr	r0, [r4, #4]
   1bb0c:	ldr	r2, [sp, #36]	; 0x24
   1bb10:	mov	r1, #0
   1bb14:	sub	r2, r2, r0
   1bb18:	add	r0, r6, r0, lsl #3
   1bb1c:	lsl	r2, r2, #3
   1bb20:	bl	11198 <memset@plt>
   1bb24:	ldr	r3, [sp, #36]	; 0x24
   1bb28:	str	r3, [r4, #4]
   1bb2c:	ldr	r2, [r4, #56]	; 0x38
   1bb30:	add	fp, r6, r5, lsl #3
   1bb34:	ldr	r1, [r4, #20]
   1bb38:	ldr	r9, [r6, r5, lsl #3]
   1bb3c:	ldr	r7, [fp, #4]
   1bb40:	ldr	r3, [r4, #16]
   1bb44:	ldr	ip, [r4, #60]	; 0x3c
   1bb48:	str	r2, [sp, #12]
   1bb4c:	ldr	r2, [pc, #224]	; 1bc34 <__assert_fail@plt+0xa964>
   1bb50:	orr	r1, r1, #1
   1bb54:	str	r1, [sp, #28]
   1bb58:	str	r1, [sp, #4]
   1bb5c:	str	r2, [sp, #8]
   1bb60:	str	r3, [sp]
   1bb64:	mov	r0, r7
   1bb68:	mov	r1, r9
   1bb6c:	str	ip, [sp, #16]
   1bb70:	mvn	r3, #0
   1bb74:	mov	r2, sl
   1bb78:	bl	17f44 <__assert_fail@plt+0x6c74>
   1bb7c:	cmp	r9, r0
   1bb80:	bhi	1bbe8 <__assert_fail@plt+0xa918>
   1bb84:	ldr	r3, [pc, #172]	; 1bc38 <__assert_fail@plt+0xa968>
   1bb88:	add	r9, r0, #1
   1bb8c:	cmp	r7, r3
   1bb90:	str	r9, [r6, r5, lsl #3]
   1bb94:	beq	1bba0 <__assert_fail@plt+0xa8d0>
   1bb98:	mov	r0, r7
   1bb9c:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1bba0:	mov	r0, r9
   1bba4:	bl	1c8e8 <__assert_fail@plt+0xb618>
   1bba8:	ldr	ip, [r4, #60]	; 0x3c
   1bbac:	ldr	r3, [r4, #16]
   1bbb0:	ldr	lr, [r4, #56]	; 0x38
   1bbb4:	ldr	r4, [pc, #120]	; 1bc34 <__assert_fail@plt+0xa964>
   1bbb8:	mov	r2, sl
   1bbbc:	mov	r1, r9
   1bbc0:	str	r0, [fp, #4]
   1bbc4:	str	r4, [sp, #8]
   1bbc8:	ldr	r4, [sp, #28]
   1bbcc:	str	r3, [sp]
   1bbd0:	str	r4, [sp, #4]
   1bbd4:	str	ip, [sp, #16]
   1bbd8:	str	lr, [sp, #12]
   1bbdc:	mvn	r3, #0
   1bbe0:	mov	r7, r0
   1bbe4:	bl	17f44 <__assert_fail@plt+0x6c74>
   1bbe8:	ldr	r3, [sp, #24]
   1bbec:	mov	r0, r7
   1bbf0:	str	r3, [r8]
   1bbf4:	add	sp, sp, #44	; 0x2c
   1bbf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bbfc:	mov	r3, #8
   1bc00:	sub	r2, r5, r2
   1bc04:	str	r3, [sp]
   1bc08:	add	r1, sp, #36	; 0x24
   1bc0c:	add	r2, r2, #1
   1bc10:	mvn	r3, #-2147483648	; 0x80000000
   1bc14:	bl	1cb04 <__assert_fail@plt+0xb834>
   1bc18:	mov	r6, r0
   1bc1c:	ldm	r7, {r0, r1}
   1bc20:	str	r6, [r4]
   1bc24:	stm	r6, {r0, r1}
   1bc28:	b	1bb08 <__assert_fail@plt+0xa838>
   1bc2c:	bl	11294 <abort@plt>
   1bc30:	andeq	r0, r3, r8, lsr r1
   1bc34:	andeq	r0, r3, r0, asr r1
   1bc38:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1bc3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc40:	sub	sp, sp, #44	; 0x2c
   1bc44:	mov	sl, r0
   1bc48:	bl	11180 <__errno_location@plt>
   1bc4c:	ldr	r4, [pc, #348]	; 1bdb0 <__assert_fail@plt+0xaae0>
   1bc50:	ldr	r2, [r4, #4]
   1bc54:	ldr	r5, [r4]
   1bc58:	cmp	r2, #0
   1bc5c:	ldr	r3, [r0]
   1bc60:	mov	r8, r0
   1bc64:	str	r3, [sp, #28]
   1bc68:	bgt	1bcc4 <__assert_fail@plt+0xa9f4>
   1bc6c:	add	r6, r4, #8
   1bc70:	cmp	r5, r6
   1bc74:	str	r2, [sp, #36]	; 0x24
   1bc78:	beq	1bd80 <__assert_fail@plt+0xaab0>
   1bc7c:	mov	r3, #8
   1bc80:	mov	r0, r5
   1bc84:	str	r3, [sp]
   1bc88:	rsb	r2, r2, #1
   1bc8c:	mvn	r3, #-2147483648	; 0x80000000
   1bc90:	add	r1, sp, #36	; 0x24
   1bc94:	bl	1cb04 <__assert_fail@plt+0xb834>
   1bc98:	mov	r5, r0
   1bc9c:	str	r0, [r4]
   1bca0:	ldr	r0, [r4, #4]
   1bca4:	ldr	r2, [sp, #36]	; 0x24
   1bca8:	mov	r1, #0
   1bcac:	sub	r2, r2, r0
   1bcb0:	add	r0, r5, r0, lsl #3
   1bcb4:	lsl	r2, r2, #3
   1bcb8:	bl	11198 <memset@plt>
   1bcbc:	ldr	r3, [sp, #36]	; 0x24
   1bcc0:	str	r3, [r4, #4]
   1bcc4:	ldr	r7, [r4, #20]
   1bcc8:	ldr	r9, [r5]
   1bccc:	ldr	r6, [r5, #4]
   1bcd0:	ldr	r2, [r4, #56]	; 0x38
   1bcd4:	ldr	r3, [r4, #16]
   1bcd8:	ldr	ip, [r4, #60]	; 0x3c
   1bcdc:	ldr	fp, [pc, #208]	; 1bdb4 <__assert_fail@plt+0xaae4>
   1bce0:	orr	r7, r7, #1
   1bce4:	str	r2, [sp, #12]
   1bce8:	str	r3, [sp]
   1bcec:	str	r7, [sp, #4]
   1bcf0:	mov	r1, r9
   1bcf4:	mov	r0, r6
   1bcf8:	str	ip, [sp, #16]
   1bcfc:	str	fp, [sp, #8]
   1bd00:	mvn	r3, #0
   1bd04:	mov	r2, sl
   1bd08:	bl	17f44 <__assert_fail@plt+0x6c74>
   1bd0c:	cmp	r9, r0
   1bd10:	bhi	1bd6c <__assert_fail@plt+0xaa9c>
   1bd14:	ldr	r3, [pc, #156]	; 1bdb8 <__assert_fail@plt+0xaae8>
   1bd18:	add	r9, r0, #1
   1bd1c:	cmp	r6, r3
   1bd20:	str	r9, [r5]
   1bd24:	beq	1bd30 <__assert_fail@plt+0xaa60>
   1bd28:	mov	r0, r6
   1bd2c:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1bd30:	mov	r0, r9
   1bd34:	bl	1c8e8 <__assert_fail@plt+0xb618>
   1bd38:	ldr	ip, [r4, #60]	; 0x3c
   1bd3c:	ldr	r3, [r4, #16]
   1bd40:	ldr	lr, [r4, #56]	; 0x38
   1bd44:	mov	r2, sl
   1bd48:	mov	r1, r9
   1bd4c:	str	r0, [r5, #4]
   1bd50:	str	r3, [sp]
   1bd54:	stmib	sp, {r7, fp}
   1bd58:	str	ip, [sp, #16]
   1bd5c:	str	lr, [sp, #12]
   1bd60:	mvn	r3, #0
   1bd64:	mov	r6, r0
   1bd68:	bl	17f44 <__assert_fail@plt+0x6c74>
   1bd6c:	ldr	r3, [sp, #28]
   1bd70:	mov	r0, r6
   1bd74:	str	r3, [r8]
   1bd78:	add	sp, sp, #44	; 0x2c
   1bd7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd80:	mov	r3, #8
   1bd84:	str	r3, [sp]
   1bd88:	add	r1, sp, #36	; 0x24
   1bd8c:	rsb	r2, r2, #1
   1bd90:	mvn	r3, #-2147483648	; 0x80000000
   1bd94:	mov	r0, #0
   1bd98:	bl	1cb04 <__assert_fail@plt+0xb834>
   1bd9c:	mov	r5, r0
   1bda0:	ldm	r6, {r0, r1}
   1bda4:	str	r5, [r4]
   1bda8:	stm	r5, {r0, r1}
   1bdac:	b	1bca0 <__assert_fail@plt+0xa9d0>
   1bdb0:	andeq	r0, r3, r8, lsr r1
   1bdb4:	andeq	r0, r3, r0, asr r1
   1bdb8:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1bdbc:	push	{r4, r6, r7, lr}
   1bdc0:	sub	sp, sp, #104	; 0x68
   1bdc4:	mov	r4, r0
   1bdc8:	mov	r2, sp
   1bdcc:	ldr	r1, [pc, #52]	; 1be08 <__assert_fail@plt+0xab38>
   1bdd0:	mov	r0, #3
   1bdd4:	bl	112ac <__lxstat64@plt>
   1bdd8:	cmp	r0, #0
   1bddc:	bne	1bdfc <__assert_fail@plt+0xab2c>
   1bde0:	ldrd	r6, [sp, #96]	; 0x60
   1bde4:	ldrd	r2, [sp]
   1bde8:	mov	r0, r4
   1bdec:	strd	r6, [r4]
   1bdf0:	strd	r2, [r4, #8]
   1bdf4:	add	sp, sp, #104	; 0x68
   1bdf8:	pop	{r4, r6, r7, pc}
   1bdfc:	mov	r0, #0
   1be00:	add	sp, sp, #104	; 0x68
   1be04:	pop	{r4, r6, r7, pc}
   1be08:	andeq	lr, r1, r4, lsl #16
   1be0c:	cmp	r0, #2
   1be10:	push	{r4, r5, r6, r7, r8, lr}
   1be14:	mov	r4, r0
   1be18:	bhi	1be40 <__assert_fail@plt+0xab70>
   1be1c:	bl	1d5f8 <__assert_fail@plt+0xc328>
   1be20:	mov	r7, r0
   1be24:	bl	11180 <__errno_location@plt>
   1be28:	mov	r5, r0
   1be2c:	mov	r0, r4
   1be30:	ldr	r6, [r5]
   1be34:	mov	r4, r7
   1be38:	bl	112a0 <close@plt>
   1be3c:	str	r6, [r5]
   1be40:	mov	r0, r4
   1be44:	pop	{r4, r5, r6, r7, r8, pc}
   1be48:	push	{r4, r5, r6, lr}
   1be4c:	sub	sp, sp, #32
   1be50:	cmp	r1, #0
   1be54:	mov	r4, r0
   1be58:	ldr	r5, [sp, #48]	; 0x30
   1be5c:	ldr	r6, [sp, #52]	; 0x34
   1be60:	beq	1c178 <__assert_fail@plt+0xaea8>
   1be64:	stm	sp, {r2, r3}
   1be68:	mov	r3, r1
   1be6c:	ldr	r2, [pc, #808]	; 1c19c <__assert_fail@plt+0xaecc>
   1be70:	mov	r1, #1
   1be74:	bl	111bc <__fprintf_chk@plt>
   1be78:	mov	r2, #5
   1be7c:	ldr	r1, [pc, #796]	; 1c1a0 <__assert_fail@plt+0xaed0>
   1be80:	mov	r0, #0
   1be84:	bl	11060 <dcgettext@plt>
   1be88:	ldr	r3, [pc, #788]	; 1c1a4 <__assert_fail@plt+0xaed4>
   1be8c:	ldr	r2, [pc, #788]	; 1c1a8 <__assert_fail@plt+0xaed8>
   1be90:	str	r3, [sp]
   1be94:	mov	r1, #1
   1be98:	mov	r3, r0
   1be9c:	mov	r0, r4
   1bea0:	bl	111bc <__fprintf_chk@plt>
   1bea4:	mov	r1, r4
   1bea8:	mov	r0, #10
   1beac:	bl	11054 <fputc_unlocked@plt>
   1beb0:	mov	r2, #5
   1beb4:	ldr	r1, [pc, #752]	; 1c1ac <__assert_fail@plt+0xaedc>
   1beb8:	mov	r0, #0
   1bebc:	bl	11060 <dcgettext@plt>
   1bec0:	mov	r1, #1
   1bec4:	ldr	r3, [pc, #740]	; 1c1b0 <__assert_fail@plt+0xaee0>
   1bec8:	mov	r2, r0
   1becc:	mov	r0, r4
   1bed0:	bl	111bc <__fprintf_chk@plt>
   1bed4:	mov	r1, r4
   1bed8:	mov	r0, #10
   1bedc:	bl	11054 <fputc_unlocked@plt>
   1bee0:	cmp	r6, #9
   1bee4:	ldrls	pc, [pc, r6, lsl #2]
   1bee8:	b	1c190 <__assert_fail@plt+0xaec0>
   1beec:	andeq	fp, r1, r0, ror pc
   1bef0:	andeq	fp, r1, r8, ror pc
   1bef4:	andeq	fp, r1, r4, lsr #31
   1bef8:	ldrdeq	fp, [r1], -r8
   1befc:	andeq	ip, r1, r4, lsl r0
   1bf00:	andeq	ip, r1, r0, asr r0
   1bf04:	andeq	ip, r1, ip, lsl #1
   1bf08:	ldrdeq	ip, [r1], -r0
   1bf0c:	andeq	ip, r1, r0, lsr #2
   1bf10:	andeq	fp, r1, r4, lsl pc
   1bf14:	ldr	r1, [pc, #664]	; 1c1b4 <__assert_fail@plt+0xaee4>
   1bf18:	mov	r2, #5
   1bf1c:	mov	r0, #0
   1bf20:	bl	11060 <dcgettext@plt>
   1bf24:	ldr	ip, [r5, #32]
   1bf28:	ldr	r1, [r5, #28]
   1bf2c:	ldr	r2, [r5, #24]
   1bf30:	ldr	r3, [r5]
   1bf34:	ldr	r6, [r5, #20]
   1bf38:	str	ip, [sp, #28]
   1bf3c:	ldr	lr, [r5, #16]
   1bf40:	str	r1, [sp, #24]
   1bf44:	ldr	ip, [r5, #12]
   1bf48:	str	r2, [sp, #20]
   1bf4c:	ldr	r1, [r5, #8]
   1bf50:	ldr	r2, [r5, #4]
   1bf54:	str	r6, [sp, #16]
   1bf58:	stmib	sp, {r1, ip, lr}
   1bf5c:	mov	r1, #1
   1bf60:	str	r2, [sp]
   1bf64:	mov	r2, r0
   1bf68:	mov	r0, r4
   1bf6c:	bl	111bc <__fprintf_chk@plt>
   1bf70:	add	sp, sp, #32
   1bf74:	pop	{r4, r5, r6, pc}
   1bf78:	mov	r2, #5
   1bf7c:	ldr	r1, [pc, #564]	; 1c1b8 <__assert_fail@plt+0xaee8>
   1bf80:	mov	r0, #0
   1bf84:	bl	11060 <dcgettext@plt>
   1bf88:	ldr	r3, [r5]
   1bf8c:	mov	r1, #1
   1bf90:	mov	r2, r0
   1bf94:	mov	r0, r4
   1bf98:	add	sp, sp, #32
   1bf9c:	pop	{r4, r5, r6, lr}
   1bfa0:	b	111bc <__fprintf_chk@plt>
   1bfa4:	mov	r2, #5
   1bfa8:	ldr	r1, [pc, #524]	; 1c1bc <__assert_fail@plt+0xaeec>
   1bfac:	mov	r0, #0
   1bfb0:	bl	11060 <dcgettext@plt>
   1bfb4:	ldr	r2, [r5, #4]
   1bfb8:	ldr	r3, [r5]
   1bfbc:	mov	r1, #1
   1bfc0:	str	r2, [sp, #48]	; 0x30
   1bfc4:	mov	r2, r0
   1bfc8:	mov	r0, r4
   1bfcc:	add	sp, sp, #32
   1bfd0:	pop	{r4, r5, r6, lr}
   1bfd4:	b	111bc <__fprintf_chk@plt>
   1bfd8:	mov	r2, #5
   1bfdc:	ldr	r1, [pc, #476]	; 1c1c0 <__assert_fail@plt+0xaef0>
   1bfe0:	mov	r0, #0
   1bfe4:	bl	11060 <dcgettext@plt>
   1bfe8:	ldr	r1, [r5, #8]
   1bfec:	ldr	r2, [r5, #4]
   1bff0:	ldr	r3, [r5]
   1bff4:	str	r1, [sp, #52]	; 0x34
   1bff8:	str	r2, [sp, #48]	; 0x30
   1bffc:	mov	r1, #1
   1c000:	mov	r2, r0
   1c004:	mov	r0, r4
   1c008:	add	sp, sp, #32
   1c00c:	pop	{r4, r5, r6, lr}
   1c010:	b	111bc <__fprintf_chk@plt>
   1c014:	mov	r2, #5
   1c018:	ldr	r1, [pc, #420]	; 1c1c4 <__assert_fail@plt+0xaef4>
   1c01c:	mov	r0, #0
   1c020:	bl	11060 <dcgettext@plt>
   1c024:	ldr	r1, [r5, #8]
   1c028:	ldr	ip, [r5, #12]
   1c02c:	ldr	r2, [r5, #4]
   1c030:	ldr	r3, [r5]
   1c034:	stmib	sp, {r1, ip}
   1c038:	str	r2, [sp]
   1c03c:	mov	r1, #1
   1c040:	mov	r2, r0
   1c044:	mov	r0, r4
   1c048:	bl	111bc <__fprintf_chk@plt>
   1c04c:	b	1bf70 <__assert_fail@plt+0xaca0>
   1c050:	mov	r2, #5
   1c054:	ldr	r1, [pc, #364]	; 1c1c8 <__assert_fail@plt+0xaef8>
   1c058:	mov	r0, #0
   1c05c:	bl	11060 <dcgettext@plt>
   1c060:	add	r1, r5, #8
   1c064:	ldr	r2, [r5, #4]
   1c068:	ldm	r1, {r1, ip, lr}
   1c06c:	ldr	r3, [r5]
   1c070:	str	r2, [sp]
   1c074:	stmib	sp, {r1, ip, lr}
   1c078:	mov	r1, #1
   1c07c:	mov	r2, r0
   1c080:	mov	r0, r4
   1c084:	bl	111bc <__fprintf_chk@plt>
   1c088:	b	1bf70 <__assert_fail@plt+0xaca0>
   1c08c:	mov	r2, #5
   1c090:	ldr	r1, [pc, #308]	; 1c1cc <__assert_fail@plt+0xaefc>
   1c094:	mov	r0, #0
   1c098:	bl	11060 <dcgettext@plt>
   1c09c:	add	r1, r5, #8
   1c0a0:	ldr	r2, [r5, #4]
   1c0a4:	ldm	r1, {r1, ip, lr}
   1c0a8:	ldr	r6, [r5, #20]
   1c0ac:	ldr	r3, [r5]
   1c0b0:	stmib	sp, {r1, ip, lr}
   1c0b4:	mov	r1, #1
   1c0b8:	str	r2, [sp]
   1c0bc:	str	r6, [sp, #16]
   1c0c0:	mov	r2, r0
   1c0c4:	mov	r0, r4
   1c0c8:	bl	111bc <__fprintf_chk@plt>
   1c0cc:	b	1bf70 <__assert_fail@plt+0xaca0>
   1c0d0:	mov	r2, #5
   1c0d4:	ldr	r1, [pc, #244]	; 1c1d0 <__assert_fail@plt+0xaf00>
   1c0d8:	mov	r0, #0
   1c0dc:	bl	11060 <dcgettext@plt>
   1c0e0:	ldr	r2, [r5, #24]
   1c0e4:	ldr	r3, [r5]
   1c0e8:	ldr	r6, [r5, #20]
   1c0ec:	ldr	lr, [r5, #16]
   1c0f0:	ldr	ip, [r5, #12]
   1c0f4:	str	r2, [sp, #20]
   1c0f8:	ldr	r1, [r5, #8]
   1c0fc:	ldr	r2, [r5, #4]
   1c100:	str	r6, [sp, #16]
   1c104:	stmib	sp, {r1, ip, lr}
   1c108:	mov	r1, #1
   1c10c:	str	r2, [sp]
   1c110:	mov	r2, r0
   1c114:	mov	r0, r4
   1c118:	bl	111bc <__fprintf_chk@plt>
   1c11c:	b	1bf70 <__assert_fail@plt+0xaca0>
   1c120:	mov	r2, #5
   1c124:	ldr	r1, [pc, #168]	; 1c1d4 <__assert_fail@plt+0xaf04>
   1c128:	mov	r0, #0
   1c12c:	bl	11060 <dcgettext@plt>
   1c130:	ldr	r1, [r5, #28]
   1c134:	ldr	r2, [r5, #24]
   1c138:	ldr	r3, [r5]
   1c13c:	ldr	r6, [r5, #20]
   1c140:	ldr	lr, [r5, #16]
   1c144:	str	r1, [sp, #24]
   1c148:	ldr	ip, [r5, #12]
   1c14c:	str	r2, [sp, #20]
   1c150:	ldr	r1, [r5, #8]
   1c154:	ldr	r2, [r5, #4]
   1c158:	str	r6, [sp, #16]
   1c15c:	stmib	sp, {r1, ip, lr}
   1c160:	mov	r1, #1
   1c164:	str	r2, [sp]
   1c168:	mov	r2, r0
   1c16c:	mov	r0, r4
   1c170:	bl	111bc <__fprintf_chk@plt>
   1c174:	b	1bf70 <__assert_fail@plt+0xaca0>
   1c178:	str	r3, [sp]
   1c17c:	mov	r1, #1
   1c180:	mov	r3, r2
   1c184:	ldr	r2, [pc, #76]	; 1c1d8 <__assert_fail@plt+0xaf08>
   1c188:	bl	111bc <__fprintf_chk@plt>
   1c18c:	b	1be78 <__assert_fail@plt+0xaba8>
   1c190:	mov	r2, #5
   1c194:	ldr	r1, [pc, #64]	; 1c1dc <__assert_fail@plt+0xaf0c>
   1c198:	b	1bf1c <__assert_fail@plt+0xac4c>
   1c19c:	andeq	pc, r1, ip, lsr r0	; <UNPREDICTABLE>
   1c1a0:	andeq	pc, r1, r0, asr r0	; <UNPREDICTABLE>
   1c1a4:	andeq	r0, r0, r6, ror #15
   1c1a8:	andeq	pc, r1, r0, lsl r3	; <UNPREDICTABLE>
   1c1ac:	andeq	pc, r1, r4, asr r0	; <UNPREDICTABLE>
   1c1b0:	andeq	pc, r1, r0, lsl #2
   1c1b4:	andeq	pc, r1, r0, lsr r2	; <UNPREDICTABLE>
   1c1b8:	andeq	pc, r1, r4, lsr #2
   1c1bc:	andeq	pc, r1, r4, lsr r1	; <UNPREDICTABLE>
   1c1c0:	andeq	pc, r1, ip, asr #2
   1c1c4:	andeq	pc, r1, r8, ror #2
   1c1c8:	andeq	pc, r1, r8, lsl #3
   1c1cc:	andeq	pc, r1, ip, lsr #3
   1c1d0:	ldrdeq	pc, [r1], -r4
   1c1d4:	andeq	pc, r1, r0, lsl #4
   1c1d8:	andeq	pc, r1, r8, asr #32
   1c1dc:	andeq	pc, r1, r4, ror #4
   1c1e0:	push	{r4, r5, lr}
   1c1e4:	sub	sp, sp, #12
   1c1e8:	ldr	r5, [sp, #24]
   1c1ec:	ldr	ip, [r5]
   1c1f0:	cmp	ip, #0
   1c1f4:	beq	1c210 <__assert_fail@plt+0xaf40>
   1c1f8:	mov	lr, r5
   1c1fc:	mov	ip, #0
   1c200:	ldr	r4, [lr, #4]!
   1c204:	add	ip, ip, #1
   1c208:	cmp	r4, #0
   1c20c:	bne	1c200 <__assert_fail@plt+0xaf30>
   1c210:	stm	sp, {r5, ip}
   1c214:	bl	1be48 <__assert_fail@plt+0xab78>
   1c218:	add	sp, sp, #12
   1c21c:	pop	{r4, r5, pc}
   1c220:	push	{r4, r5, lr}
   1c224:	sub	sp, sp, #76	; 0x4c
   1c228:	mov	r5, r0
   1c22c:	ldr	ip, [sp, #88]	; 0x58
   1c230:	ldr	r0, [ip]
   1c234:	cmp	r0, #0
   1c238:	str	r0, [sp, #32]
   1c23c:	beq	1c610 <__assert_fail@plt+0xb340>
   1c240:	ldr	r0, [ip, #4]
   1c244:	cmp	r0, #0
   1c248:	str	r0, [sp, #36]	; 0x24
   1c24c:	beq	1c618 <__assert_fail@plt+0xb348>
   1c250:	ldr	r0, [ip, #8]
   1c254:	cmp	r0, #0
   1c258:	str	r0, [sp, #40]	; 0x28
   1c25c:	beq	1c620 <__assert_fail@plt+0xb350>
   1c260:	ldr	r0, [ip, #12]
   1c264:	cmp	r0, #0
   1c268:	str	r0, [sp, #44]	; 0x2c
   1c26c:	beq	1c628 <__assert_fail@plt+0xb358>
   1c270:	ldr	r0, [ip, #16]
   1c274:	cmp	r0, #0
   1c278:	str	r0, [sp, #48]	; 0x30
   1c27c:	beq	1c630 <__assert_fail@plt+0xb360>
   1c280:	ldr	r0, [ip, #20]
   1c284:	cmp	r0, #0
   1c288:	str	r0, [sp, #52]	; 0x34
   1c28c:	beq	1c638 <__assert_fail@plt+0xb368>
   1c290:	ldr	r0, [ip, #24]
   1c294:	cmp	r0, #0
   1c298:	str	r0, [sp, #56]	; 0x38
   1c29c:	beq	1c640 <__assert_fail@plt+0xb370>
   1c2a0:	ldr	r0, [ip, #28]
   1c2a4:	cmp	r0, #0
   1c2a8:	str	r0, [sp, #60]	; 0x3c
   1c2ac:	beq	1c648 <__assert_fail@plt+0xb378>
   1c2b0:	ldr	r0, [ip, #32]
   1c2b4:	cmp	r0, #0
   1c2b8:	str	r0, [sp, #64]	; 0x40
   1c2bc:	beq	1c650 <__assert_fail@plt+0xb380>
   1c2c0:	ldr	r0, [ip, #36]	; 0x24
   1c2c4:	cmp	r0, #0
   1c2c8:	movne	r4, #10
   1c2cc:	moveq	r4, #9
   1c2d0:	cmp	r1, #0
   1c2d4:	beq	1c5e8 <__assert_fail@plt+0xb318>
   1c2d8:	stm	sp, {r2, r3}
   1c2dc:	mov	r0, r5
   1c2e0:	mov	r3, r1
   1c2e4:	ldr	r2, [pc, #876]	; 1c658 <__assert_fail@plt+0xb388>
   1c2e8:	mov	r1, #1
   1c2ec:	bl	111bc <__fprintf_chk@plt>
   1c2f0:	mov	r2, #5
   1c2f4:	ldr	r1, [pc, #864]	; 1c65c <__assert_fail@plt+0xb38c>
   1c2f8:	mov	r0, #0
   1c2fc:	bl	11060 <dcgettext@plt>
   1c300:	ldr	r3, [pc, #856]	; 1c660 <__assert_fail@plt+0xb390>
   1c304:	ldr	r2, [pc, #856]	; 1c664 <__assert_fail@plt+0xb394>
   1c308:	str	r3, [sp]
   1c30c:	mov	r1, #1
   1c310:	mov	r3, r0
   1c314:	mov	r0, r5
   1c318:	bl	111bc <__fprintf_chk@plt>
   1c31c:	mov	r1, r5
   1c320:	mov	r0, #10
   1c324:	bl	11054 <fputc_unlocked@plt>
   1c328:	mov	r2, #5
   1c32c:	ldr	r1, [pc, #820]	; 1c668 <__assert_fail@plt+0xb398>
   1c330:	mov	r0, #0
   1c334:	bl	11060 <dcgettext@plt>
   1c338:	mov	r1, #1
   1c33c:	ldr	r3, [pc, #808]	; 1c66c <__assert_fail@plt+0xb39c>
   1c340:	mov	r2, r0
   1c344:	mov	r0, r5
   1c348:	bl	111bc <__fprintf_chk@plt>
   1c34c:	mov	r1, r5
   1c350:	mov	r0, #10
   1c354:	bl	11054 <fputc_unlocked@plt>
   1c358:	cmp	r4, #9
   1c35c:	ldrls	pc, [pc, r4, lsl #2]
   1c360:	b	1c604 <__assert_fail@plt+0xb334>
   1c364:	andeq	ip, r1, r8, ror #7
   1c368:	strdeq	ip, [r1], -r0
   1c36c:	andeq	ip, r1, ip, lsl r4
   1c370:	andeq	ip, r1, r0, asr r4
   1c374:	andeq	ip, r1, r8, lsl #9
   1c378:	andeq	ip, r1, r4, asr #9
   1c37c:	andeq	ip, r1, r0, lsl #10
   1c380:	andeq	ip, r1, r4, asr #10
   1c384:	muleq	r1, r0, r5
   1c388:	andeq	ip, r1, ip, lsl #7
   1c38c:	ldr	r1, [pc, #732]	; 1c670 <__assert_fail@plt+0xb3a0>
   1c390:	mov	r2, #5
   1c394:	mov	r0, #0
   1c398:	bl	11060 <dcgettext@plt>
   1c39c:	ldr	ip, [sp, #64]	; 0x40
   1c3a0:	ldr	r1, [sp, #60]	; 0x3c
   1c3a4:	ldr	r2, [sp, #56]	; 0x38
   1c3a8:	ldr	lr, [sp, #48]	; 0x30
   1c3ac:	str	ip, [sp, #28]
   1c3b0:	str	r1, [sp, #24]
   1c3b4:	ldr	ip, [sp, #44]	; 0x2c
   1c3b8:	ldr	r1, [sp, #40]	; 0x28
   1c3bc:	ldr	r4, [sp, #52]	; 0x34
   1c3c0:	str	r2, [sp, #20]
   1c3c4:	ldr	r2, [sp, #36]	; 0x24
   1c3c8:	stmib	sp, {r1, ip, lr}
   1c3cc:	mov	r1, #1
   1c3d0:	str	r2, [sp]
   1c3d4:	ldr	r3, [sp, #32]
   1c3d8:	str	r4, [sp, #16]
   1c3dc:	mov	r2, r0
   1c3e0:	mov	r0, r5
   1c3e4:	bl	111bc <__fprintf_chk@plt>
   1c3e8:	add	sp, sp, #76	; 0x4c
   1c3ec:	pop	{r4, r5, pc}
   1c3f0:	mov	r2, #5
   1c3f4:	ldr	r1, [pc, #632]	; 1c674 <__assert_fail@plt+0xb3a4>
   1c3f8:	mov	r0, #0
   1c3fc:	bl	11060 <dcgettext@plt>
   1c400:	ldr	r3, [sp, #32]
   1c404:	mov	r1, #1
   1c408:	mov	r2, r0
   1c40c:	mov	r0, r5
   1c410:	add	sp, sp, #76	; 0x4c
   1c414:	pop	{r4, r5, lr}
   1c418:	b	111bc <__fprintf_chk@plt>
   1c41c:	mov	r2, #5
   1c420:	ldr	r1, [pc, #592]	; 1c678 <__assert_fail@plt+0xb3a8>
   1c424:	mov	r0, #0
   1c428:	bl	11060 <dcgettext@plt>
   1c42c:	ldr	r2, [sp, #36]	; 0x24
   1c430:	ldr	r3, [sp, #32]
   1c434:	str	r2, [sp, #88]	; 0x58
   1c438:	mov	r1, #1
   1c43c:	mov	r2, r0
   1c440:	mov	r0, r5
   1c444:	add	sp, sp, #76	; 0x4c
   1c448:	pop	{r4, r5, lr}
   1c44c:	b	111bc <__fprintf_chk@plt>
   1c450:	mov	r2, #5
   1c454:	ldr	r1, [pc, #544]	; 1c67c <__assert_fail@plt+0xb3ac>
   1c458:	mov	r0, #0
   1c45c:	bl	11060 <dcgettext@plt>
   1c460:	ldr	r1, [sp, #40]	; 0x28
   1c464:	ldr	r2, [sp, #36]	; 0x24
   1c468:	str	r1, [sp, #4]
   1c46c:	str	r2, [sp]
   1c470:	ldr	r3, [sp, #32]
   1c474:	mov	r1, #1
   1c478:	mov	r2, r0
   1c47c:	mov	r0, r5
   1c480:	bl	111bc <__fprintf_chk@plt>
   1c484:	b	1c3e8 <__assert_fail@plt+0xb118>
   1c488:	mov	r2, #5
   1c48c:	ldr	r1, [pc, #492]	; 1c680 <__assert_fail@plt+0xb3b0>
   1c490:	mov	r0, #0
   1c494:	bl	11060 <dcgettext@plt>
   1c498:	ldr	r1, [sp, #40]	; 0x28
   1c49c:	ldr	ip, [sp, #44]	; 0x2c
   1c4a0:	ldr	r2, [sp, #36]	; 0x24
   1c4a4:	ldr	r3, [sp, #32]
   1c4a8:	stmib	sp, {r1, ip}
   1c4ac:	str	r2, [sp]
   1c4b0:	mov	r1, #1
   1c4b4:	mov	r2, r0
   1c4b8:	mov	r0, r5
   1c4bc:	bl	111bc <__fprintf_chk@plt>
   1c4c0:	b	1c3e8 <__assert_fail@plt+0xb118>
   1c4c4:	mov	r2, #5
   1c4c8:	ldr	r1, [pc, #436]	; 1c684 <__assert_fail@plt+0xb3b4>
   1c4cc:	mov	r0, #0
   1c4d0:	bl	11060 <dcgettext@plt>
   1c4d4:	add	r1, sp, #40	; 0x28
   1c4d8:	ldr	r2, [sp, #36]	; 0x24
   1c4dc:	ldm	r1, {r1, ip, lr}
   1c4e0:	ldr	r3, [sp, #32]
   1c4e4:	str	r2, [sp]
   1c4e8:	stmib	sp, {r1, ip, lr}
   1c4ec:	mov	r1, #1
   1c4f0:	mov	r2, r0
   1c4f4:	mov	r0, r5
   1c4f8:	bl	111bc <__fprintf_chk@plt>
   1c4fc:	b	1c3e8 <__assert_fail@plt+0xb118>
   1c500:	mov	r2, #5
   1c504:	ldr	r1, [pc, #380]	; 1c688 <__assert_fail@plt+0xb3b8>
   1c508:	mov	r0, #0
   1c50c:	bl	11060 <dcgettext@plt>
   1c510:	add	r1, sp, #40	; 0x28
   1c514:	ldr	r2, [sp, #36]	; 0x24
   1c518:	ldm	r1, {r1, ip, lr}
   1c51c:	ldr	r4, [sp, #52]	; 0x34
   1c520:	str	r2, [sp]
   1c524:	stmib	sp, {r1, ip, lr}
   1c528:	mov	r1, #1
   1c52c:	ldr	r3, [sp, #32]
   1c530:	str	r4, [sp, #16]
   1c534:	mov	r2, r0
   1c538:	mov	r0, r5
   1c53c:	bl	111bc <__fprintf_chk@plt>
   1c540:	b	1c3e8 <__assert_fail@plt+0xb118>
   1c544:	mov	r2, #5
   1c548:	ldr	r1, [pc, #316]	; 1c68c <__assert_fail@plt+0xb3bc>
   1c54c:	mov	r0, #0
   1c550:	bl	11060 <dcgettext@plt>
   1c554:	add	r1, sp, #40	; 0x28
   1c558:	ldr	r2, [sp, #56]	; 0x38
   1c55c:	ldm	r1, {r1, ip, lr}
   1c560:	ldr	r4, [sp, #52]	; 0x34
   1c564:	str	r2, [sp, #20]
   1c568:	ldr	r2, [sp, #36]	; 0x24
   1c56c:	stmib	sp, {r1, ip, lr}
   1c570:	mov	r1, #1
   1c574:	str	r2, [sp]
   1c578:	ldr	r3, [sp, #32]
   1c57c:	str	r4, [sp, #16]
   1c580:	mov	r2, r0
   1c584:	mov	r0, r5
   1c588:	bl	111bc <__fprintf_chk@plt>
   1c58c:	b	1c3e8 <__assert_fail@plt+0xb118>
   1c590:	mov	r2, #5
   1c594:	ldr	r1, [pc, #244]	; 1c690 <__assert_fail@plt+0xb3c0>
   1c598:	mov	r0, #0
   1c59c:	bl	11060 <dcgettext@plt>
   1c5a0:	ldr	r1, [sp, #60]	; 0x3c
   1c5a4:	ldr	r2, [sp, #56]	; 0x38
   1c5a8:	ldr	lr, [sp, #48]	; 0x30
   1c5ac:	ldr	ip, [sp, #44]	; 0x2c
   1c5b0:	str	r1, [sp, #24]
   1c5b4:	ldr	r1, [sp, #40]	; 0x28
   1c5b8:	ldr	r4, [sp, #52]	; 0x34
   1c5bc:	str	r2, [sp, #20]
   1c5c0:	ldr	r2, [sp, #36]	; 0x24
   1c5c4:	stmib	sp, {r1, ip, lr}
   1c5c8:	mov	r1, #1
   1c5cc:	str	r2, [sp]
   1c5d0:	ldr	r3, [sp, #32]
   1c5d4:	str	r4, [sp, #16]
   1c5d8:	mov	r2, r0
   1c5dc:	mov	r0, r5
   1c5e0:	bl	111bc <__fprintf_chk@plt>
   1c5e4:	b	1c3e8 <__assert_fail@plt+0xb118>
   1c5e8:	str	r3, [sp]
   1c5ec:	mov	r1, #1
   1c5f0:	mov	r3, r2
   1c5f4:	mov	r0, r5
   1c5f8:	ldr	r2, [pc, #148]	; 1c694 <__assert_fail@plt+0xb3c4>
   1c5fc:	bl	111bc <__fprintf_chk@plt>
   1c600:	b	1c2f0 <__assert_fail@plt+0xb020>
   1c604:	mov	r2, #5
   1c608:	ldr	r1, [pc, #136]	; 1c698 <__assert_fail@plt+0xb3c8>
   1c60c:	b	1c394 <__assert_fail@plt+0xb0c4>
   1c610:	mov	r4, r0
   1c614:	b	1c2d0 <__assert_fail@plt+0xb000>
   1c618:	mov	r4, #1
   1c61c:	b	1c2d0 <__assert_fail@plt+0xb000>
   1c620:	mov	r4, #2
   1c624:	b	1c2d0 <__assert_fail@plt+0xb000>
   1c628:	mov	r4, #3
   1c62c:	b	1c2d0 <__assert_fail@plt+0xb000>
   1c630:	mov	r4, #4
   1c634:	b	1c2d0 <__assert_fail@plt+0xb000>
   1c638:	mov	r4, #5
   1c63c:	b	1c2d0 <__assert_fail@plt+0xb000>
   1c640:	mov	r4, #6
   1c644:	b	1c2d0 <__assert_fail@plt+0xb000>
   1c648:	mov	r4, #7
   1c64c:	b	1c2d0 <__assert_fail@plt+0xb000>
   1c650:	mov	r4, #8
   1c654:	b	1c2d0 <__assert_fail@plt+0xb000>
   1c658:	andeq	pc, r1, ip, lsr r0	; <UNPREDICTABLE>
   1c65c:	andeq	pc, r1, r0, asr r0	; <UNPREDICTABLE>
   1c660:	andeq	r0, r0, r6, ror #15
   1c664:	andeq	pc, r1, r0, lsl r3	; <UNPREDICTABLE>
   1c668:	andeq	pc, r1, r4, asr r0	; <UNPREDICTABLE>
   1c66c:	andeq	pc, r1, r0, lsl #2
   1c670:	andeq	pc, r1, r0, lsr r2	; <UNPREDICTABLE>
   1c674:	andeq	pc, r1, r4, lsr #2
   1c678:	andeq	pc, r1, r4, lsr r1	; <UNPREDICTABLE>
   1c67c:	andeq	pc, r1, ip, asr #2
   1c680:	andeq	pc, r1, r8, ror #2
   1c684:	andeq	pc, r1, r8, lsl #3
   1c688:	andeq	pc, r1, ip, lsr #3
   1c68c:	ldrdeq	pc, [r1], -r4
   1c690:	andeq	pc, r1, r0, lsl #4
   1c694:	andeq	pc, r1, r8, asr #32
   1c698:	andeq	pc, r1, r4, ror #4
   1c69c:	push	{r3}		; (str r3, [sp, #-4]!)
   1c6a0:	push	{lr}		; (str lr, [sp, #-4]!)
   1c6a4:	sub	sp, sp, #56	; 0x38
   1c6a8:	add	r3, sp, #64	; 0x40
   1c6ac:	ldr	ip, [sp, #64]	; 0x40
   1c6b0:	str	r3, [sp, #12]
   1c6b4:	cmp	ip, #0
   1c6b8:	str	ip, [sp, #16]
   1c6bc:	beq	1c754 <__assert_fail@plt+0xb484>
   1c6c0:	ldr	ip, [sp, #68]	; 0x44
   1c6c4:	cmp	ip, #0
   1c6c8:	str	ip, [sp, #20]
   1c6cc:	beq	1c774 <__assert_fail@plt+0xb4a4>
   1c6d0:	ldr	ip, [sp, #72]	; 0x48
   1c6d4:	cmp	ip, #0
   1c6d8:	str	ip, [sp, #24]
   1c6dc:	beq	1c77c <__assert_fail@plt+0xb4ac>
   1c6e0:	ldr	ip, [sp, #76]	; 0x4c
   1c6e4:	cmp	ip, #0
   1c6e8:	str	ip, [sp, #28]
   1c6ec:	beq	1c784 <__assert_fail@plt+0xb4b4>
   1c6f0:	ldr	ip, [sp, #80]	; 0x50
   1c6f4:	cmp	ip, #0
   1c6f8:	str	ip, [sp, #32]
   1c6fc:	beq	1c78c <__assert_fail@plt+0xb4bc>
   1c700:	ldr	ip, [sp, #84]	; 0x54
   1c704:	cmp	ip, #0
   1c708:	str	ip, [sp, #36]	; 0x24
   1c70c:	beq	1c794 <__assert_fail@plt+0xb4c4>
   1c710:	ldr	ip, [sp, #88]	; 0x58
   1c714:	cmp	ip, #0
   1c718:	str	ip, [sp, #40]	; 0x28
   1c71c:	beq	1c79c <__assert_fail@plt+0xb4cc>
   1c720:	ldr	ip, [sp, #92]	; 0x5c
   1c724:	cmp	ip, #0
   1c728:	str	ip, [sp, #44]	; 0x2c
   1c72c:	beq	1c7a4 <__assert_fail@plt+0xb4d4>
   1c730:	ldr	ip, [sp, #96]	; 0x60
   1c734:	cmp	ip, #0
   1c738:	str	ip, [sp, #48]	; 0x30
   1c73c:	beq	1c7ac <__assert_fail@plt+0xb4dc>
   1c740:	ldr	ip, [sp, #100]	; 0x64
   1c744:	cmp	ip, #0
   1c748:	str	ip, [sp, #52]	; 0x34
   1c74c:	movne	ip, #10
   1c750:	moveq	ip, #9
   1c754:	add	r3, sp, #16
   1c758:	stm	sp, {r3, ip}
   1c75c:	ldr	r3, [sp, #60]	; 0x3c
   1c760:	bl	1be48 <__assert_fail@plt+0xab78>
   1c764:	add	sp, sp, #56	; 0x38
   1c768:	pop	{lr}		; (ldr lr, [sp], #4)
   1c76c:	add	sp, sp, #4
   1c770:	bx	lr
   1c774:	mov	ip, #1
   1c778:	b	1c754 <__assert_fail@plt+0xb484>
   1c77c:	mov	ip, #2
   1c780:	b	1c754 <__assert_fail@plt+0xb484>
   1c784:	mov	ip, #3
   1c788:	b	1c754 <__assert_fail@plt+0xb484>
   1c78c:	mov	ip, #4
   1c790:	b	1c754 <__assert_fail@plt+0xb484>
   1c794:	mov	ip, #5
   1c798:	b	1c754 <__assert_fail@plt+0xb484>
   1c79c:	mov	ip, #6
   1c7a0:	b	1c754 <__assert_fail@plt+0xb484>
   1c7a4:	mov	ip, #7
   1c7a8:	b	1c754 <__assert_fail@plt+0xb484>
   1c7ac:	mov	ip, #8
   1c7b0:	b	1c754 <__assert_fail@plt+0xb484>
   1c7b4:	ldr	r3, [pc, #116]	; 1c830 <__assert_fail@plt+0xb560>
   1c7b8:	push	{r4, lr}
   1c7bc:	mov	r0, #10
   1c7c0:	ldr	r1, [r3]
   1c7c4:	bl	11054 <fputc_unlocked@plt>
   1c7c8:	mov	r2, #5
   1c7cc:	ldr	r1, [pc, #96]	; 1c834 <__assert_fail@plt+0xb564>
   1c7d0:	mov	r0, #0
   1c7d4:	bl	11060 <dcgettext@plt>
   1c7d8:	ldr	r2, [pc, #88]	; 1c838 <__assert_fail@plt+0xb568>
   1c7dc:	mov	r1, r0
   1c7e0:	mov	r0, #1
   1c7e4:	bl	111a4 <__printf_chk@plt>
   1c7e8:	mov	r2, #5
   1c7ec:	ldr	r1, [pc, #72]	; 1c83c <__assert_fail@plt+0xb56c>
   1c7f0:	mov	r0, #0
   1c7f4:	bl	11060 <dcgettext@plt>
   1c7f8:	ldr	r3, [pc, #64]	; 1c840 <__assert_fail@plt+0xb570>
   1c7fc:	ldr	r2, [pc, #64]	; 1c844 <__assert_fail@plt+0xb574>
   1c800:	mov	r1, r0
   1c804:	mov	r0, #1
   1c808:	bl	111a4 <__printf_chk@plt>
   1c80c:	mov	r2, #5
   1c810:	ldr	r1, [pc, #48]	; 1c848 <__assert_fail@plt+0xb578>
   1c814:	mov	r0, #0
   1c818:	bl	11060 <dcgettext@plt>
   1c81c:	ldr	r2, [pc, #40]	; 1c84c <__assert_fail@plt+0xb57c>
   1c820:	pop	{r4, lr}
   1c824:	mov	r1, r0
   1c828:	mov	r0, #1
   1c82c:	b	111a4 <__printf_chk@plt>
   1c830:	muleq	r3, r4, r1
   1c834:	andeq	pc, r1, r0, lsr #5
   1c838:	andeq	lr, r1, r0, lsl #26
   1c83c:			; <UNDEFINED> instruction: 0x0001f2b4
   1c840:	andeq	lr, r1, ip, ror #11
   1c844:	andeq	lr, r1, r4, lsl r6
   1c848:	andeq	pc, r1, r8, asr #5
   1c84c:	strdeq	pc, [r1], -r0
   1c850:	push	{r4, lr}
   1c854:	ldr	r4, [pc, #44]	; 1c888 <__assert_fail@plt+0xb5b8>
   1c858:	ldrb	r3, [r4]
   1c85c:	cmp	r3, #0
   1c860:	beq	1c86c <__assert_fail@plt+0xb59c>
   1c864:	ldrb	r0, [r4, #1]
   1c868:	pop	{r4, pc}
   1c86c:	bl	11084 <geteuid@plt>
   1c870:	mov	r3, #1
   1c874:	strb	r3, [r4]
   1c878:	clz	r0, r0
   1c87c:	lsr	r0, r0, #5
   1c880:	strb	r0, [r4, #1]
   1c884:	pop	{r4, pc}
   1c888:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1c88c:	push	{r4, r5, r6, lr}
   1c890:	mov	r6, r0
   1c894:	mov	r5, r1
   1c898:	mov	r4, r2
   1c89c:	bl	1d5ac <__assert_fail@plt+0xc2dc>
   1c8a0:	cmp	r0, #0
   1c8a4:	popne	{r4, r5, r6, pc}
   1c8a8:	cmp	r6, #0
   1c8ac:	beq	1c8bc <__assert_fail@plt+0xb5ec>
   1c8b0:	cmp	r5, #0
   1c8b4:	cmpne	r4, #0
   1c8b8:	popeq	{r4, r5, r6, pc}
   1c8bc:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1c8c0:	push	{r4, lr}
   1c8c4:	bl	1d084 <__assert_fail@plt+0xbdb4>
   1c8c8:	cmp	r0, #0
   1c8cc:	popne	{r4, pc}
   1c8d0:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1c8d4:	push	{r4, lr}
   1c8d8:	bl	1d084 <__assert_fail@plt+0xbdb4>
   1c8dc:	cmp	r0, #0
   1c8e0:	popne	{r4, pc}
   1c8e4:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1c8e8:	push	{r4, lr}
   1c8ec:	bl	1d084 <__assert_fail@plt+0xbdb4>
   1c8f0:	cmp	r0, #0
   1c8f4:	popne	{r4, pc}
   1c8f8:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1c8fc:	push	{r4, r5, r6, lr}
   1c900:	mov	r5, r0
   1c904:	mov	r4, r1
   1c908:	bl	1d0b0 <__assert_fail@plt+0xbde0>
   1c90c:	cmp	r0, #0
   1c910:	popne	{r4, r5, r6, pc}
   1c914:	adds	r4, r4, #0
   1c918:	movne	r4, #1
   1c91c:	cmp	r5, #0
   1c920:	orreq	r4, r4, #1
   1c924:	cmp	r4, #0
   1c928:	popeq	{r4, r5, r6, pc}
   1c92c:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1c930:	push	{r4, lr}
   1c934:	cmp	r1, #0
   1c938:	orreq	r1, r1, #1
   1c93c:	bl	1d0b0 <__assert_fail@plt+0xbde0>
   1c940:	cmp	r0, #0
   1c944:	popne	{r4, pc}
   1c948:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1c94c:	push	{r4, r5, r6, lr}
   1c950:	mov	r6, r0
   1c954:	mov	r5, r1
   1c958:	mov	r4, r2
   1c95c:	bl	1d5ac <__assert_fail@plt+0xc2dc>
   1c960:	cmp	r0, #0
   1c964:	popne	{r4, r5, r6, pc}
   1c968:	cmp	r6, #0
   1c96c:	beq	1c97c <__assert_fail@plt+0xb6ac>
   1c970:	cmp	r5, #0
   1c974:	cmpne	r4, #0
   1c978:	popeq	{r4, r5, r6, pc}
   1c97c:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1c980:	cmp	r2, #0
   1c984:	cmpne	r1, #0
   1c988:	moveq	r2, #1
   1c98c:	moveq	r1, r2
   1c990:	push	{r4, lr}
   1c994:	bl	1d5ac <__assert_fail@plt+0xc2dc>
   1c998:	cmp	r0, #0
   1c99c:	popne	{r4, pc}
   1c9a0:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1c9a4:	push	{r4, lr}
   1c9a8:	mov	r2, r1
   1c9ac:	mov	r1, r0
   1c9b0:	mov	r0, #0
   1c9b4:	bl	1d5ac <__assert_fail@plt+0xc2dc>
   1c9b8:	cmp	r0, #0
   1c9bc:	popne	{r4, pc}
   1c9c0:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1c9c4:	cmp	r1, #0
   1c9c8:	cmpne	r0, #0
   1c9cc:	moveq	r2, #1
   1c9d0:	movne	r2, r1
   1c9d4:	moveq	r1, r2
   1c9d8:	movne	r1, r0
   1c9dc:	push	{r4, lr}
   1c9e0:	mov	r0, #0
   1c9e4:	bl	1d5ac <__assert_fail@plt+0xc2dc>
   1c9e8:	cmp	r0, #0
   1c9ec:	popne	{r4, pc}
   1c9f0:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1c9f4:	cmp	r0, #0
   1c9f8:	push	{r4, r5, r6, lr}
   1c9fc:	mov	r5, r1
   1ca00:	ldr	r4, [r1]
   1ca04:	beq	1ca40 <__assert_fail@plt+0xb770>
   1ca08:	lsr	r2, r4, #1
   1ca0c:	add	r3, r2, #1
   1ca10:	mvn	r3, r3
   1ca14:	cmp	r4, r3
   1ca18:	bhi	1ca5c <__assert_fail@plt+0xb78c>
   1ca1c:	add	r4, r4, #1
   1ca20:	add	r4, r4, r2
   1ca24:	mov	r1, r4
   1ca28:	mov	r2, #1
   1ca2c:	bl	1d5ac <__assert_fail@plt+0xc2dc>
   1ca30:	cmp	r0, #0
   1ca34:	beq	1ca60 <__assert_fail@plt+0xb790>
   1ca38:	str	r4, [r5]
   1ca3c:	pop	{r4, r5, r6, pc}
   1ca40:	cmp	r4, #0
   1ca44:	moveq	r4, #64	; 0x40
   1ca48:	mov	r1, r4
   1ca4c:	mov	r2, #1
   1ca50:	bl	1d5ac <__assert_fail@plt+0xc2dc>
   1ca54:	cmp	r0, #0
   1ca58:	bne	1ca38 <__assert_fail@plt+0xb768>
   1ca5c:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1ca60:	cmp	r4, #0
   1ca64:	bne	1ca5c <__assert_fail@plt+0xb78c>
   1ca68:	str	r4, [r5]
   1ca6c:	pop	{r4, r5, r6, pc}
   1ca70:	cmp	r0, #0
   1ca74:	push	{r4, r5, r6, lr}
   1ca78:	mov	r5, r1
   1ca7c:	ldr	r4, [r1]
   1ca80:	mov	r6, r2
   1ca84:	beq	1cac8 <__assert_fail@plt+0xb7f8>
   1ca88:	lsr	r1, r4, #1
   1ca8c:	add	r3, r1, #1
   1ca90:	mvn	r3, r3
   1ca94:	cmp	r4, r3
   1ca98:	bhi	1cb00 <__assert_fail@plt+0xb830>
   1ca9c:	add	r4, r4, #1
   1caa0:	add	r4, r4, r1
   1caa4:	mov	r1, r4
   1caa8:	bl	1d5ac <__assert_fail@plt+0xc2dc>
   1caac:	cmp	r0, #0
   1cab0:	bne	1cac0 <__assert_fail@plt+0xb7f0>
   1cab4:	cmp	r4, #0
   1cab8:	cmpne	r6, #0
   1cabc:	bne	1cb00 <__assert_fail@plt+0xb830>
   1cac0:	str	r4, [r5]
   1cac4:	pop	{r4, r5, r6, pc}
   1cac8:	cmp	r4, #0
   1cacc:	bne	1cae8 <__assert_fail@plt+0xb818>
   1cad0:	mov	r1, r2
   1cad4:	mov	r0, #64	; 0x40
   1cad8:	bl	1d6f8 <__assert_fail@plt+0xc428>
   1cadc:	cmp	r0, #0
   1cae0:	movne	r4, r0
   1cae4:	addeq	r4, r0, #1
   1cae8:	mov	r2, r6
   1caec:	mov	r1, r4
   1caf0:	mov	r0, #0
   1caf4:	bl	1d5ac <__assert_fail@plt+0xc2dc>
   1caf8:	cmp	r0, #0
   1cafc:	bne	1cac0 <__assert_fail@plt+0xb7f0>
   1cb00:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1cb04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb08:	sub	sp, sp, #12
   1cb0c:	ldr	r6, [r1]
   1cb10:	mov	r8, r1
   1cb14:	mov	r9, r0
   1cb18:	asrs	r4, r6, #1
   1cb1c:	mov	sl, r2
   1cb20:	mov	fp, r3
   1cb24:	ldr	r7, [sp, #48]	; 0x30
   1cb28:	bmi	1cca4 <__assert_fail@plt+0xb9d4>
   1cb2c:	mvn	r1, #-2147483648	; 0x80000000
   1cb30:	sub	r1, r1, r4
   1cb34:	cmp	r6, r1
   1cb38:	movle	r1, #0
   1cb3c:	movgt	r1, #1
   1cb40:	mvn	r3, fp
   1cb44:	cmp	r1, #0
   1cb48:	addeq	r4, r4, r6
   1cb4c:	mvnne	r4, #-2147483648	; 0x80000000
   1cb50:	lsr	r3, r3, #31
   1cb54:	cmp	fp, r4
   1cb58:	movge	r2, #0
   1cb5c:	andlt	r2, r3, #1
   1cb60:	cmp	r2, #0
   1cb64:	beq	1cc54 <__assert_fail@plt+0xb984>
   1cb68:	cmp	r7, #0
   1cb6c:	blt	1cd3c <__assert_fail@plt+0xba6c>
   1cb70:	bne	1cd34 <__assert_fail@plt+0xba64>
   1cb74:	mov	r5, #64	; 0x40
   1cb78:	mov	r1, r7
   1cb7c:	mov	r0, r5
   1cb80:	str	r3, [sp, #4]
   1cb84:	bl	1d904 <__assert_fail@plt+0xc634>
   1cb88:	mov	r1, r7
   1cb8c:	mov	r4, r0
   1cb90:	mov	r0, r5
   1cb94:	bl	1db24 <__assert_fail@plt+0xc854>
   1cb98:	ldr	r3, [sp, #4]
   1cb9c:	sub	r5, r5, r1
   1cba0:	cmp	r9, #0
   1cba4:	sub	r2, r4, r6
   1cba8:	streq	r9, [r8]
   1cbac:	cmp	r2, sl
   1cbb0:	bge	1cc34 <__assert_fail@plt+0xb964>
   1cbb4:	cmp	sl, #0
   1cbb8:	blt	1ccd4 <__assert_fail@plt+0xba04>
   1cbbc:	cmp	r6, #0
   1cbc0:	blt	1cbe0 <__assert_fail@plt+0xb910>
   1cbc4:	mvn	r2, #-2147483648	; 0x80000000
   1cbc8:	sub	r2, r2, sl
   1cbcc:	cmp	r6, r2
   1cbd0:	movle	r2, #0
   1cbd4:	movgt	r2, #1
   1cbd8:	cmp	r2, #0
   1cbdc:	bne	1ccd0 <__assert_fail@plt+0xba00>
   1cbe0:	add	r6, r6, sl
   1cbe4:	cmp	fp, r6
   1cbe8:	movge	r3, #0
   1cbec:	andlt	r3, r3, #1
   1cbf0:	cmp	r3, #0
   1cbf4:	mov	r4, r6
   1cbf8:	bne	1ccd0 <__assert_fail@plt+0xba00>
   1cbfc:	cmp	r7, #0
   1cc00:	blt	1cce8 <__assert_fail@plt+0xba18>
   1cc04:	beq	1cc30 <__assert_fail@plt+0xb960>
   1cc08:	cmp	r6, #0
   1cc0c:	blt	1cd8c <__assert_fail@plt+0xbabc>
   1cc10:	mov	r1, r7
   1cc14:	mvn	r0, #-2147483648	; 0x80000000
   1cc18:	bl	1d904 <__assert_fail@plt+0xc634>
   1cc1c:	cmp	r6, r0
   1cc20:	movle	r0, #0
   1cc24:	movgt	r0, #1
   1cc28:	cmp	r0, #0
   1cc2c:	bne	1ccd0 <__assert_fail@plt+0xba00>
   1cc30:	mul	r5, r6, r7
   1cc34:	mov	r1, r5
   1cc38:	mov	r0, r9
   1cc3c:	bl	1d0b0 <__assert_fail@plt+0xbde0>
   1cc40:	cmp	r0, #0
   1cc44:	beq	1ccb8 <__assert_fail@plt+0xb9e8>
   1cc48:	str	r4, [r8]
   1cc4c:	add	sp, sp, #12
   1cc50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc54:	cmp	r7, #0
   1cc58:	blt	1cd14 <__assert_fail@plt+0xba44>
   1cc5c:	beq	1cb74 <__assert_fail@plt+0xb8a4>
   1cc60:	cmp	r4, #0
   1cc64:	blt	1cd44 <__assert_fail@plt+0xba74>
   1cc68:	mov	r1, r7
   1cc6c:	mvn	r0, #-2147483648	; 0x80000000
   1cc70:	str	r3, [sp, #4]
   1cc74:	bl	1d904 <__assert_fail@plt+0xc634>
   1cc78:	ldr	r3, [sp, #4]
   1cc7c:	cmp	r0, r4
   1cc80:	movge	r0, #0
   1cc84:	movlt	r0, #1
   1cc88:	cmp	r0, #0
   1cc8c:	mvnne	r5, #-2147483648	; 0x80000000
   1cc90:	bne	1cb78 <__assert_fail@plt+0xb8a8>
   1cc94:	mul	r5, r7, r4
   1cc98:	cmp	r5, #63	; 0x3f
   1cc9c:	bgt	1cba0 <__assert_fail@plt+0xb8d0>
   1cca0:	b	1cb74 <__assert_fail@plt+0xb8a4>
   1cca4:	rsb	r1, r4, #-2147483648	; 0x80000000
   1cca8:	cmp	r6, r1
   1ccac:	movge	r1, #0
   1ccb0:	movlt	r1, #1
   1ccb4:	b	1cb40 <__assert_fail@plt+0xb870>
   1ccb8:	adds	r5, r5, #0
   1ccbc:	movne	r5, #1
   1ccc0:	cmp	r9, #0
   1ccc4:	orreq	r5, r5, #1
   1ccc8:	cmp	r5, #0
   1cccc:	beq	1cc48 <__assert_fail@plt+0xb978>
   1ccd0:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1ccd4:	rsb	r2, sl, #-2147483648	; 0x80000000
   1ccd8:	cmp	r6, r2
   1ccdc:	movge	r2, #0
   1cce0:	movlt	r2, #1
   1cce4:	b	1cbd8 <__assert_fail@plt+0xb908>
   1cce8:	cmp	r6, #0
   1ccec:	blt	1cd70 <__assert_fail@plt+0xbaa0>
   1ccf0:	cmn	r7, #1
   1ccf4:	beq	1cc30 <__assert_fail@plt+0xb960>
   1ccf8:	mov	r1, r7
   1ccfc:	mov	r0, #-2147483648	; 0x80000000
   1cd00:	bl	1d904 <__assert_fail@plt+0xc634>
   1cd04:	cmp	r6, r0
   1cd08:	movle	r0, #0
   1cd0c:	movgt	r0, #1
   1cd10:	b	1cc28 <__assert_fail@plt+0xb958>
   1cd14:	cmp	r4, #0
   1cd18:	blt	1cdb0 <__assert_fail@plt+0xbae0>
   1cd1c:	cmn	r7, #1
   1cd20:	beq	1cc94 <__assert_fail@plt+0xb9c4>
   1cd24:	str	r3, [sp, #4]
   1cd28:	mov	r1, r7
   1cd2c:	mov	r0, #-2147483648	; 0x80000000
   1cd30:	b	1cc74 <__assert_fail@plt+0xb9a4>
   1cd34:	mov	r4, fp
   1cd38:	b	1cc68 <__assert_fail@plt+0xb998>
   1cd3c:	mov	r4, fp
   1cd40:	b	1cd1c <__assert_fail@plt+0xba4c>
   1cd44:	cmn	r4, #1
   1cd48:	beq	1cc94 <__assert_fail@plt+0xb9c4>
   1cd4c:	mov	r1, r4
   1cd50:	mov	r0, #-2147483648	; 0x80000000
   1cd54:	str	r3, [sp, #4]
   1cd58:	bl	1d904 <__assert_fail@plt+0xc634>
   1cd5c:	ldr	r3, [sp, #4]
   1cd60:	cmp	r7, r0
   1cd64:	movle	r0, #0
   1cd68:	movgt	r0, #1
   1cd6c:	b	1cc88 <__assert_fail@plt+0xb9b8>
   1cd70:	mov	r1, r7
   1cd74:	mvn	r0, #-2147483648	; 0x80000000
   1cd78:	bl	1d904 <__assert_fail@plt+0xc634>
   1cd7c:	cmp	r6, r0
   1cd80:	movge	r0, #0
   1cd84:	movlt	r0, #1
   1cd88:	b	1cc28 <__assert_fail@plt+0xb958>
   1cd8c:	cmn	r6, #1
   1cd90:	beq	1cc30 <__assert_fail@plt+0xb960>
   1cd94:	mov	r1, r6
   1cd98:	mov	r0, #-2147483648	; 0x80000000
   1cd9c:	bl	1d904 <__assert_fail@plt+0xc634>
   1cda0:	cmp	r7, r0
   1cda4:	movle	r0, #0
   1cda8:	movgt	r0, #1
   1cdac:	b	1cc28 <__assert_fail@plt+0xb958>
   1cdb0:	mov	r1, r7
   1cdb4:	mvn	r0, #-2147483648	; 0x80000000
   1cdb8:	str	r3, [sp, #4]
   1cdbc:	bl	1d904 <__assert_fail@plt+0xc634>
   1cdc0:	ldr	r3, [sp, #4]
   1cdc4:	cmp	r0, r4
   1cdc8:	movle	r0, #0
   1cdcc:	movgt	r0, #1
   1cdd0:	b	1cc88 <__assert_fail@plt+0xb9b8>
   1cdd4:	push	{r4, lr}
   1cdd8:	mov	r1, #1
   1cddc:	bl	1d03c <__assert_fail@plt+0xbd6c>
   1cde0:	cmp	r0, #0
   1cde4:	popne	{r4, pc}
   1cde8:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1cdec:	push	{r4, lr}
   1cdf0:	mov	r1, #1
   1cdf4:	bl	1d03c <__assert_fail@plt+0xbd6c>
   1cdf8:	cmp	r0, #0
   1cdfc:	popne	{r4, pc}
   1ce00:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1ce04:	push	{r4, lr}
   1ce08:	bl	1d03c <__assert_fail@plt+0xbd6c>
   1ce0c:	cmp	r0, #0
   1ce10:	popne	{r4, pc}
   1ce14:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1ce18:	push	{r4, lr}
   1ce1c:	bl	1d03c <__assert_fail@plt+0xbd6c>
   1ce20:	cmp	r0, #0
   1ce24:	popne	{r4, pc}
   1ce28:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1ce2c:	push	{r4, r5, r6, lr}
   1ce30:	mov	r6, r0
   1ce34:	mov	r0, r1
   1ce38:	mov	r4, r1
   1ce3c:	bl	1d084 <__assert_fail@plt+0xbdb4>
   1ce40:	subs	r5, r0, #0
   1ce44:	beq	1ce5c <__assert_fail@plt+0xbb8c>
   1ce48:	mov	r2, r4
   1ce4c:	mov	r1, r6
   1ce50:	bl	11030 <memcpy@plt>
   1ce54:	mov	r0, r5
   1ce58:	pop	{r4, r5, r6, pc}
   1ce5c:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1ce60:	push	{r4, r5, r6, lr}
   1ce64:	mov	r6, r0
   1ce68:	mov	r0, r1
   1ce6c:	mov	r4, r1
   1ce70:	bl	1d084 <__assert_fail@plt+0xbdb4>
   1ce74:	subs	r5, r0, #0
   1ce78:	beq	1ce90 <__assert_fail@plt+0xbbc0>
   1ce7c:	mov	r2, r4
   1ce80:	mov	r1, r6
   1ce84:	bl	11030 <memcpy@plt>
   1ce88:	mov	r0, r5
   1ce8c:	pop	{r4, r5, r6, pc}
   1ce90:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1ce94:	push	{r4, r5, r6, lr}
   1ce98:	mov	r6, r0
   1ce9c:	add	r0, r1, #1
   1cea0:	mov	r4, r1
   1cea4:	bl	1d084 <__assert_fail@plt+0xbdb4>
   1cea8:	subs	r5, r0, #0
   1ceac:	beq	1cecc <__assert_fail@plt+0xbbfc>
   1ceb0:	mov	r3, #0
   1ceb4:	mov	r1, r6
   1ceb8:	strb	r3, [r5, r4]
   1cebc:	mov	r2, r4
   1cec0:	bl	11030 <memcpy@plt>
   1cec4:	mov	r0, r5
   1cec8:	pop	{r4, r5, r6, pc}
   1cecc:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1ced0:	push	{r4, r5, r6, lr}
   1ced4:	mov	r6, r0
   1ced8:	bl	11168 <strlen@plt>
   1cedc:	add	r4, r0, #1
   1cee0:	mov	r0, r4
   1cee4:	bl	1d084 <__assert_fail@plt+0xbdb4>
   1cee8:	subs	r5, r0, #0
   1ceec:	beq	1cf04 <__assert_fail@plt+0xbc34>
   1cef0:	mov	r2, r4
   1cef4:	mov	r1, r6
   1cef8:	bl	11030 <memcpy@plt>
   1cefc:	mov	r0, r5
   1cf00:	pop	{r4, r5, r6, pc}
   1cf04:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1cf08:	ldr	r3, [pc, #44]	; 1cf3c <__assert_fail@plt+0xbc6c>
   1cf0c:	push	{r4, lr}
   1cf10:	mov	r2, #5
   1cf14:	ldr	r1, [pc, #36]	; 1cf40 <__assert_fail@plt+0xbc70>
   1cf18:	mov	r0, #0
   1cf1c:	ldr	r4, [r3]
   1cf20:	bl	11060 <dcgettext@plt>
   1cf24:	ldr	r2, [pc, #24]	; 1cf44 <__assert_fail@plt+0xbc74>
   1cf28:	mov	r1, #0
   1cf2c:	mov	r3, r0
   1cf30:	mov	r0, r4
   1cf34:	bl	110f0 <error@plt>
   1cf38:	bl	11294 <abort@plt>
   1cf3c:	andeq	r0, r3, r4, lsr r1
   1cf40:	andeq	pc, r1, r0, asr #6
   1cf44:	ldrdeq	lr, [r1], -ip
   1cf48:	push	{r4, lr}
   1cf4c:	orr	r1, r1, #512	; 0x200
   1cf50:	bl	1504c <__assert_fail@plt+0x3d7c>
   1cf54:	cmp	r0, #0
   1cf58:	popne	{r4, pc}
   1cf5c:	bl	11180 <__errno_location@plt>
   1cf60:	ldr	r3, [r0]
   1cf64:	cmp	r3, #22
   1cf68:	beq	1cf70 <__assert_fail@plt+0xbca0>
   1cf6c:	bl	1cf08 <__assert_fail@plt+0xbc38>
   1cf70:	ldr	r3, [pc, #12]	; 1cf84 <__assert_fail@plt+0xbcb4>
   1cf74:	mov	r2, #41	; 0x29
   1cf78:	ldr	r1, [pc, #8]	; 1cf88 <__assert_fail@plt+0xbcb8>
   1cf7c:	ldr	r0, [pc, #8]	; 1cf8c <__assert_fail@plt+0xbcbc>
   1cf80:	bl	112d0 <__assert_fail@plt>
   1cf84:	andeq	pc, r1, r4, asr r3	; <UNPREDICTABLE>
   1cf88:	andeq	pc, r1, r0, ror #6
   1cf8c:	andeq	pc, r1, ip, ror #6
   1cf90:	ldr	r3, [r0, #48]	; 0x30
   1cf94:	and	r3, r3, #17
   1cf98:	cmp	r3, #16
   1cf9c:	beq	1cfc0 <__assert_fail@plt+0xbcf0>
   1cfa0:	cmp	r3, #17
   1cfa4:	beq	1cfb0 <__assert_fail@plt+0xbce0>
   1cfa8:	mov	r0, #0
   1cfac:	bx	lr
   1cfb0:	ldr	r0, [r1, #48]	; 0x30
   1cfb4:	adds	r0, r0, #0
   1cfb8:	movne	r0, #1
   1cfbc:	bx	lr
   1cfc0:	mov	r0, #1
   1cfc4:	bx	lr
   1cfc8:	push	{r4, lr}
   1cfcc:	sub	sp, sp, #8
   1cfd0:	ldr	r3, [pc, #96]	; 1d038 <__assert_fail@plt+0xbd68>
   1cfd4:	add	r1, sp, #8
   1cfd8:	mov	r4, #0
   1cfdc:	ldr	r3, [r3]
   1cfe0:	str	r4, [r1, #-4]!
   1cfe4:	mov	r2, #10
   1cfe8:	mov	r0, sp
   1cfec:	str	r4, [sp]
   1cff0:	bl	10fd0 <__getdelim@plt>
   1cff4:	subs	r3, r0, #0
   1cff8:	ble	1d024 <__assert_fail@plt+0xbd54>
   1cffc:	ldr	r0, [sp]
   1d000:	sub	r3, r3, #1
   1d004:	ldrb	r2, [r0, r3]
   1d008:	cmp	r2, #10
   1d00c:	strbeq	r4, [r0, r3]
   1d010:	ldreq	r0, [sp]
   1d014:	bl	111ec <rpmatch@plt>
   1d018:	cmp	r0, #0
   1d01c:	movle	r4, #0
   1d020:	movgt	r4, #1
   1d024:	ldr	r0, [sp]
   1d028:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1d02c:	mov	r0, r4
   1d030:	add	sp, sp, #8
   1d034:	pop	{r4, pc}
   1d038:	muleq	r3, r0, r1
   1d03c:	cmp	r1, #0
   1d040:	cmpne	r0, #0
   1d044:	moveq	r1, #1
   1d048:	moveq	r0, r1
   1d04c:	umull	r2, r3, r0, r1
   1d050:	adds	r3, r3, #0
   1d054:	movne	r3, #1
   1d058:	cmp	r2, #0
   1d05c:	blt	1d06c <__assert_fail@plt+0xbd9c>
   1d060:	cmp	r3, #0
   1d064:	bne	1d06c <__assert_fail@plt+0xbd9c>
   1d068:	b	10fac <calloc@plt>
   1d06c:	push	{r4, lr}
   1d070:	bl	11180 <__errno_location@plt>
   1d074:	mov	r3, #12
   1d078:	str	r3, [r0]
   1d07c:	mov	r0, #0
   1d080:	pop	{r4, pc}
   1d084:	cmp	r0, #0
   1d088:	moveq	r0, #1
   1d08c:	cmp	r0, #0
   1d090:	blt	1d098 <__assert_fail@plt+0xbdc8>
   1d094:	b	11108 <malloc@plt>
   1d098:	push	{r4, lr}
   1d09c:	bl	11180 <__errno_location@plt>
   1d0a0:	mov	r3, #12
   1d0a4:	str	r3, [r0]
   1d0a8:	mov	r0, #0
   1d0ac:	pop	{r4, pc}
   1d0b0:	cmp	r0, #0
   1d0b4:	beq	1d0d8 <__assert_fail@plt+0xbe08>
   1d0b8:	cmp	r1, #0
   1d0bc:	push	{lr}		; (str lr, [sp, #-4]!)
   1d0c0:	sub	sp, sp, #12
   1d0c4:	beq	1d0e0 <__assert_fail@plt+0xbe10>
   1d0c8:	blt	1d0f8 <__assert_fail@plt+0xbe28>
   1d0cc:	add	sp, sp, #12
   1d0d0:	pop	{lr}		; (ldr lr, [sp], #4)
   1d0d4:	b	1106c <realloc@plt>
   1d0d8:	mov	r0, r1
   1d0dc:	b	1d084 <__assert_fail@plt+0xbdb4>
   1d0e0:	str	r1, [sp, #4]
   1d0e4:	bl	13bb0 <__assert_fail@plt+0x28e0>
   1d0e8:	ldr	r3, [sp, #4]
   1d0ec:	mov	r0, r3
   1d0f0:	add	sp, sp, #12
   1d0f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d0f8:	bl	11180 <__errno_location@plt>
   1d0fc:	mov	r2, #12
   1d100:	mov	r3, #0
   1d104:	str	r2, [r0]
   1d108:	b	1d0ec <__assert_fail@plt+0xbe1c>
   1d10c:	push	{r4, r5, r6, lr}
   1d110:	mov	r4, r0
   1d114:	bl	110d8 <__fpending@plt>
   1d118:	ldr	r5, [r4]
   1d11c:	and	r5, r5, #32
   1d120:	mov	r6, r0
   1d124:	mov	r0, r4
   1d128:	bl	1d278 <__assert_fail@plt+0xbfa8>
   1d12c:	cmp	r5, #0
   1d130:	mov	r4, r0
   1d134:	bne	1d154 <__assert_fail@plt+0xbe84>
   1d138:	cmp	r0, #0
   1d13c:	beq	1d14c <__assert_fail@plt+0xbe7c>
   1d140:	cmp	r6, #0
   1d144:	beq	1d170 <__assert_fail@plt+0xbea0>
   1d148:	mvn	r4, #0
   1d14c:	mov	r0, r4
   1d150:	pop	{r4, r5, r6, pc}
   1d154:	cmp	r0, #0
   1d158:	bne	1d148 <__assert_fail@plt+0xbe78>
   1d15c:	bl	11180 <__errno_location@plt>
   1d160:	str	r4, [r0]
   1d164:	mvn	r4, #0
   1d168:	mov	r0, r4
   1d16c:	pop	{r4, r5, r6, pc}
   1d170:	bl	11180 <__errno_location@plt>
   1d174:	ldr	r4, [r0]
   1d178:	subs	r4, r4, #9
   1d17c:	mvnne	r4, #0
   1d180:	mov	r0, r4
   1d184:	pop	{r4, r5, r6, pc}
   1d188:	push	{r4, r5}
   1d18c:	mov	r4, #0
   1d190:	mov	r5, #0
   1d194:	ldr	r3, [pc, #12]	; 1d1a8 <__assert_fail@plt+0xbed8>
   1d198:	strd	r4, [r0, #16]
   1d19c:	str	r3, [r0, #24]
   1d1a0:	pop	{r4, r5}
   1d1a4:	bx	lr
   1d1a8:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1d1ac:	ldr	r3, [pc, #180]	; 1d268 <__assert_fail@plt+0xbf98>
   1d1b0:	ldr	r2, [r0, #24]
   1d1b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d1b8:	cmp	r2, r3
   1d1bc:	bne	1d254 <__assert_fail@plt+0xbf84>
   1d1c0:	ldrd	r6, [r0, #16]
   1d1c4:	orrs	r3, r6, r7
   1d1c8:	bne	1d1f4 <__assert_fail@plt+0xbf24>
   1d1cc:	mov	r2, #1
   1d1d0:	mov	r3, #0
   1d1d4:	ldrd	r8, [r1, #96]	; 0x60
   1d1d8:	strd	r2, [r0, #16]
   1d1dc:	ldrd	r2, [r1]
   1d1e0:	mov	r1, #0
   1d1e4:	strd	r8, [r0]
   1d1e8:	strd	r2, [r0, #8]
   1d1ec:	mov	r0, r1
   1d1f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d1f4:	ldrd	r8, [r1, #96]	; 0x60
   1d1f8:	ldrd	r2, [r0]
   1d1fc:	cmp	r9, r3
   1d200:	cmpeq	r8, r2
   1d204:	beq	1d23c <__assert_fail@plt+0xbf6c>
   1d208:	adds	r2, r6, #1
   1d20c:	adc	r3, r7, #0
   1d210:	and	r6, r6, r2
   1d214:	and	r7, r7, r3
   1d218:	orrs	ip, r6, r7
   1d21c:	strd	r2, [r0, #16]
   1d220:	movne	r1, #0
   1d224:	bne	1d1ec <__assert_fail@plt+0xbf1c>
   1d228:	orrs	r3, r2, r3
   1d22c:	bne	1d1dc <__assert_fail@plt+0xbf0c>
   1d230:	mov	r1, #1
   1d234:	mov	r0, r1
   1d238:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d23c:	ldrd	r4, [r1]
   1d240:	ldrd	r2, [r0, #8]
   1d244:	cmp	r5, r3
   1d248:	cmpeq	r4, r2
   1d24c:	bne	1d208 <__assert_fail@plt+0xbf38>
   1d250:	b	1d230 <__assert_fail@plt+0xbf60>
   1d254:	ldr	r3, [pc, #16]	; 1d26c <__assert_fail@plt+0xbf9c>
   1d258:	mov	r2, #60	; 0x3c
   1d25c:	ldr	r1, [pc, #12]	; 1d270 <__assert_fail@plt+0xbfa0>
   1d260:	ldr	r0, [pc, #12]	; 1d274 <__assert_fail@plt+0xbfa4>
   1d264:	bl	112d0 <__assert_fail@plt>
   1d268:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1d26c:	andeq	pc, r1, ip, ror r3	; <UNPREDICTABLE>
   1d270:	andeq	pc, r1, r8, lsl #7
   1d274:	muleq	r1, ip, r3
   1d278:	push	{r4, r5, lr}
   1d27c:	sub	sp, sp, #12
   1d280:	mov	r4, r0
   1d284:	bl	111b0 <fileno@plt>
   1d288:	cmp	r0, #0
   1d28c:	mov	r0, r4
   1d290:	blt	1d30c <__assert_fail@plt+0xc03c>
   1d294:	bl	11120 <__freading@plt>
   1d298:	cmp	r0, #0
   1d29c:	bne	1d2d8 <__assert_fail@plt+0xc008>
   1d2a0:	mov	r0, r4
   1d2a4:	bl	1394c <__assert_fail@plt+0x267c>
   1d2a8:	cmp	r0, #0
   1d2ac:	beq	1d308 <__assert_fail@plt+0xc038>
   1d2b0:	bl	11180 <__errno_location@plt>
   1d2b4:	mov	r5, r0
   1d2b8:	mov	r0, r4
   1d2bc:	ldr	r4, [r5]
   1d2c0:	bl	111c8 <fclose@plt>
   1d2c4:	cmp	r4, #0
   1d2c8:	mvnne	r0, #0
   1d2cc:	strne	r4, [r5]
   1d2d0:	add	sp, sp, #12
   1d2d4:	pop	{r4, r5, pc}
   1d2d8:	mov	r0, r4
   1d2dc:	bl	111b0 <fileno@plt>
   1d2e0:	mov	r3, #1
   1d2e4:	str	r3, [sp]
   1d2e8:	mov	r2, #0
   1d2ec:	mov	r3, #0
   1d2f0:	bl	110c0 <lseek64@plt>
   1d2f4:	mvn	r3, #0
   1d2f8:	mvn	r2, #0
   1d2fc:	cmp	r1, r3
   1d300:	cmpeq	r0, r2
   1d304:	bne	1d2a0 <__assert_fail@plt+0xbfd0>
   1d308:	mov	r0, r4
   1d30c:	add	sp, sp, #12
   1d310:	pop	{r4, r5, lr}
   1d314:	b	111c8 <fclose@plt>
   1d318:	push	{r1, r2, r3}
   1d31c:	push	{r4, r5, r6, r7, lr}
   1d320:	sub	sp, sp, #8
   1d324:	add	r3, sp, #32
   1d328:	ldr	r1, [sp, #28]
   1d32c:	str	r3, [sp, #4]
   1d330:	cmp	r1, #0
   1d334:	beq	1d3cc <__assert_fail@plt+0xc0fc>
   1d338:	ldr	r2, [pc, #412]	; 1d4dc <__assert_fail@plt+0xc20c>
   1d33c:	mov	r5, r0
   1d340:	cmp	r1, r2
   1d344:	bne	1d390 <__assert_fail@plt+0xc0c0>
   1d348:	ldr	r6, [pc, #400]	; 1d4e0 <__assert_fail@plt+0xc210>
   1d34c:	ldr	r7, [r3]
   1d350:	add	r2, sp, #36	; 0x24
   1d354:	ldr	r3, [r6]
   1d358:	str	r2, [sp, #4]
   1d35c:	cmp	r3, #0
   1d360:	mov	r2, r7
   1d364:	blt	1d490 <__assert_fail@plt+0xc1c0>
   1d368:	bl	111e0 <fcntl64@plt>
   1d36c:	subs	r4, r0, #0
   1d370:	blt	1d414 <__assert_fail@plt+0xc144>
   1d374:	mov	r3, #1
   1d378:	str	r3, [r6]
   1d37c:	mov	r0, r4
   1d380:	add	sp, sp, #8
   1d384:	pop	{r4, r5, r6, r7, lr}
   1d388:	add	sp, sp, #12
   1d38c:	bx	lr
   1d390:	cmp	r1, #11
   1d394:	beq	1d3bc <__assert_fail@plt+0xc0ec>
   1d398:	bgt	1d3dc <__assert_fail@plt+0xc10c>
   1d39c:	cmp	r1, #3
   1d3a0:	beq	1d3bc <__assert_fail@plt+0xc0ec>
   1d3a4:	ble	1d4d0 <__assert_fail@plt+0xc200>
   1d3a8:	cmp	r1, #8
   1d3ac:	beq	1d3fc <__assert_fail@plt+0xc12c>
   1d3b0:	ble	1d3fc <__assert_fail@plt+0xc12c>
   1d3b4:	cmp	r1, #9
   1d3b8:	bne	1d3fc <__assert_fail@plt+0xc12c>
   1d3bc:	mov	r0, r5
   1d3c0:	bl	111e0 <fcntl64@plt>
   1d3c4:	mov	r4, r0
   1d3c8:	b	1d37c <__assert_fail@plt+0xc0ac>
   1d3cc:	ldr	r2, [sp, #32]
   1d3d0:	bl	111e0 <fcntl64@plt>
   1d3d4:	mov	r4, r0
   1d3d8:	b	1d37c <__assert_fail@plt+0xc0ac>
   1d3dc:	ldr	r3, [pc, #256]	; 1d4e4 <__assert_fail@plt+0xc214>
   1d3e0:	cmp	r1, r3
   1d3e4:	bgt	1d4b0 <__assert_fail@plt+0xc1e0>
   1d3e8:	cmp	r1, r2
   1d3ec:	bge	1d3fc <__assert_fail@plt+0xc12c>
   1d3f0:	sub	r3, r3, #6
   1d3f4:	cmp	r1, r3
   1d3f8:	beq	1d3bc <__assert_fail@plt+0xc0ec>
   1d3fc:	ldr	r3, [sp, #4]
   1d400:	mov	r0, r5
   1d404:	ldr	r2, [r3]
   1d408:	bl	111e0 <fcntl64@plt>
   1d40c:	mov	r4, r0
   1d410:	b	1d37c <__assert_fail@plt+0xc0ac>
   1d414:	bl	11180 <__errno_location@plt>
   1d418:	ldr	r3, [r0]
   1d41c:	cmp	r3, #22
   1d420:	bne	1d374 <__assert_fail@plt+0xc0a4>
   1d424:	mov	r2, r7
   1d428:	mov	r0, r5
   1d42c:	mov	r1, #0
   1d430:	bl	111e0 <fcntl64@plt>
   1d434:	subs	r4, r0, #0
   1d438:	blt	1d37c <__assert_fail@plt+0xc0ac>
   1d43c:	mvn	r3, #0
   1d440:	str	r3, [r6]
   1d444:	mov	r1, #1
   1d448:	mov	r0, r4
   1d44c:	bl	111e0 <fcntl64@plt>
   1d450:	subs	r2, r0, #0
   1d454:	blt	1d470 <__assert_fail@plt+0xc1a0>
   1d458:	orr	r2, r2, #1
   1d45c:	mov	r1, #2
   1d460:	mov	r0, r4
   1d464:	bl	111e0 <fcntl64@plt>
   1d468:	cmn	r0, #1
   1d46c:	bne	1d37c <__assert_fail@plt+0xc0ac>
   1d470:	bl	11180 <__errno_location@plt>
   1d474:	mov	r5, r0
   1d478:	mov	r0, r4
   1d47c:	ldr	r6, [r5]
   1d480:	mvn	r4, #0
   1d484:	bl	112a0 <close@plt>
   1d488:	str	r6, [r5]
   1d48c:	b	1d37c <__assert_fail@plt+0xc0ac>
   1d490:	mov	r1, #0
   1d494:	bl	111e0 <fcntl64@plt>
   1d498:	subs	r4, r0, #0
   1d49c:	blt	1d37c <__assert_fail@plt+0xc0ac>
   1d4a0:	ldr	r3, [r6]
   1d4a4:	cmn	r3, #1
   1d4a8:	beq	1d444 <__assert_fail@plt+0xc174>
   1d4ac:	b	1d37c <__assert_fail@plt+0xc0ac>
   1d4b0:	ldr	r3, [pc, #48]	; 1d4e8 <__assert_fail@plt+0xc218>
   1d4b4:	cmp	r1, r3
   1d4b8:	beq	1d3fc <__assert_fail@plt+0xc12c>
   1d4bc:	blt	1d3bc <__assert_fail@plt+0xc0ec>
   1d4c0:	add	r3, r3, #1
   1d4c4:	cmp	r1, r3
   1d4c8:	bne	1d3fc <__assert_fail@plt+0xc12c>
   1d4cc:	b	1d3bc <__assert_fail@plt+0xc0ec>
   1d4d0:	cmp	r1, #1
   1d4d4:	bne	1d3fc <__assert_fail@plt+0xc12c>
   1d4d8:	b	1d3bc <__assert_fail@plt+0xc0ec>
   1d4dc:	andeq	r0, r0, r6, lsl #8
   1d4e0:	strdeq	r0, [r3], -r4
   1d4e4:	andeq	r0, r0, r7, lsl #8
   1d4e8:	andeq	r0, r0, r9, lsl #8
   1d4ec:	push	{r1, r2, r3}
   1d4f0:	push	{lr}		; (str lr, [sp, #-4]!)
   1d4f4:	sub	sp, sp, #8
   1d4f8:	ldr	r1, [sp, #12]
   1d4fc:	ands	r2, r1, #64	; 0x40
   1d500:	addne	r3, sp, #16
   1d504:	ldrne	r2, [sp, #16]
   1d508:	strne	r3, [sp, #4]
   1d50c:	bl	110fc <open64@plt>
   1d510:	bl	1be0c <__assert_fail@plt+0xab3c>
   1d514:	add	sp, sp, #8
   1d518:	pop	{lr}		; (ldr lr, [sp], #4)
   1d51c:	add	sp, sp, #12
   1d520:	bx	lr
   1d524:	push	{r4, lr}
   1d528:	mov	r0, #14
   1d52c:	bl	1121c <nl_langinfo@plt>
   1d530:	cmp	r0, #0
   1d534:	beq	1d54c <__assert_fail@plt+0xc27c>
   1d538:	ldrb	r2, [r0]
   1d53c:	ldr	r3, [pc, #16]	; 1d554 <__assert_fail@plt+0xc284>
   1d540:	cmp	r2, #0
   1d544:	moveq	r0, r3
   1d548:	pop	{r4, pc}
   1d54c:	ldr	r0, [pc]	; 1d554 <__assert_fail@plt+0xc284>
   1d550:	pop	{r4, pc}
   1d554:			; <UNDEFINED> instruction: 0x0001f3b4
   1d558:	push	{r4, r5, r6, r7, lr}
   1d55c:	subs	r6, r0, #0
   1d560:	sub	sp, sp, #12
   1d564:	addeq	r6, sp, #4
   1d568:	mov	r0, r6
   1d56c:	mov	r5, r2
   1d570:	mov	r7, r1
   1d574:	bl	110e4 <mbrtowc@plt>
   1d578:	cmp	r5, #0
   1d57c:	cmnne	r0, #3
   1d580:	mov	r4, r0
   1d584:	bls	1d5a0 <__assert_fail@plt+0xc2d0>
   1d588:	mov	r0, #0
   1d58c:	bl	1d604 <__assert_fail@plt+0xc334>
   1d590:	cmp	r0, #0
   1d594:	moveq	r4, #1
   1d598:	ldrbeq	r3, [r7]
   1d59c:	streq	r3, [r6]
   1d5a0:	mov	r0, r4
   1d5a4:	add	sp, sp, #12
   1d5a8:	pop	{r4, r5, r6, r7, pc}
   1d5ac:	push	{r4, r5, r6, lr}
   1d5b0:	subs	r4, r2, #0
   1d5b4:	mov	r6, r0
   1d5b8:	mov	r5, r1
   1d5bc:	beq	1d5e8 <__assert_fail@plt+0xc318>
   1d5c0:	mov	r1, r4
   1d5c4:	mvn	r0, #0
   1d5c8:	bl	1d6f8 <__assert_fail@plt+0xc428>
   1d5cc:	cmp	r0, r5
   1d5d0:	bcs	1d5e8 <__assert_fail@plt+0xc318>
   1d5d4:	bl	11180 <__errno_location@plt>
   1d5d8:	mov	r3, #12
   1d5dc:	str	r3, [r0]
   1d5e0:	mov	r0, #0
   1d5e4:	pop	{r4, r5, r6, pc}
   1d5e8:	mul	r1, r5, r4
   1d5ec:	mov	r0, r6
   1d5f0:	pop	{r4, r5, r6, lr}
   1d5f4:	b	1d0b0 <__assert_fail@plt+0xbde0>
   1d5f8:	mov	r2, #3
   1d5fc:	mov	r1, #0
   1d600:	b	1d318 <__assert_fail@plt+0xc048>
   1d604:	push	{lr}		; (str lr, [sp, #-4]!)
   1d608:	sub	sp, sp, #268	; 0x10c
   1d60c:	add	r1, sp, #4
   1d610:	ldr	r2, [pc, #60]	; 1d654 <__assert_fail@plt+0xc384>
   1d614:	bl	1d660 <__assert_fail@plt+0xc390>
   1d618:	cmp	r0, #0
   1d61c:	movne	r0, #0
   1d620:	bne	1d64c <__assert_fail@plt+0xc37c>
   1d624:	ldr	r1, [pc, #44]	; 1d658 <__assert_fail@plt+0xc388>
   1d628:	add	r0, sp, #4
   1d62c:	bl	10fdc <strcmp@plt>
   1d630:	cmp	r0, #0
   1d634:	beq	1d64c <__assert_fail@plt+0xc37c>
   1d638:	add	r0, sp, #4
   1d63c:	ldr	r1, [pc, #24]	; 1d65c <__assert_fail@plt+0xc38c>
   1d640:	bl	10fdc <strcmp@plt>
   1d644:	adds	r0, r0, #0
   1d648:	movne	r0, #1
   1d64c:	add	sp, sp, #268	; 0x10c
   1d650:	pop	{pc}		; (ldr pc, [sp], #4)
   1d654:	andeq	r0, r0, r1, lsl #2
   1d658:			; <UNDEFINED> instruction: 0x0001f3bc
   1d65c:	andeq	pc, r1, r0, asr #7
   1d660:	push	{r4, r5, r6, lr}
   1d664:	mov	r5, r1
   1d668:	mov	r1, #0
   1d66c:	mov	r4, r2
   1d670:	bl	11204 <setlocale@plt>
   1d674:	subs	r6, r0, #0
   1d678:	beq	1d6d4 <__assert_fail@plt+0xc404>
   1d67c:	bl	11168 <strlen@plt>
   1d680:	cmp	r4, r0
   1d684:	bhi	1d6bc <__assert_fail@plt+0xc3ec>
   1d688:	cmp	r4, #0
   1d68c:	bne	1d698 <__assert_fail@plt+0xc3c8>
   1d690:	mov	r0, #34	; 0x22
   1d694:	pop	{r4, r5, r6, pc}
   1d698:	sub	r4, r4, #1
   1d69c:	mov	r1, r6
   1d6a0:	mov	r2, r4
   1d6a4:	mov	r0, r5
   1d6a8:	bl	11030 <memcpy@plt>
   1d6ac:	mov	r3, #0
   1d6b0:	strb	r3, [r5, r4]
   1d6b4:	mov	r0, #34	; 0x22
   1d6b8:	pop	{r4, r5, r6, pc}
   1d6bc:	add	r2, r0, #1
   1d6c0:	mov	r1, r6
   1d6c4:	mov	r0, r5
   1d6c8:	bl	11030 <memcpy@plt>
   1d6cc:	mov	r0, #0
   1d6d0:	pop	{r4, r5, r6, pc}
   1d6d4:	cmp	r4, #0
   1d6d8:	beq	1d6e8 <__assert_fail@plt+0xc418>
   1d6dc:	strb	r6, [r5]
   1d6e0:	mov	r0, #22
   1d6e4:	pop	{r4, r5, r6, pc}
   1d6e8:	mov	r0, #22
   1d6ec:	pop	{r4, r5, r6, pc}
   1d6f0:	mov	r1, #0
   1d6f4:	b	11204 <setlocale@plt>
   1d6f8:	subs	r2, r1, #1
   1d6fc:	bxeq	lr
   1d700:	bcc	1d8d8 <__assert_fail@plt+0xc608>
   1d704:	cmp	r0, r1
   1d708:	bls	1d8bc <__assert_fail@plt+0xc5ec>
   1d70c:	tst	r1, r2
   1d710:	beq	1d8c8 <__assert_fail@plt+0xc5f8>
   1d714:	clz	r3, r0
   1d718:	clz	r2, r1
   1d71c:	sub	r3, r2, r3
   1d720:	rsbs	r3, r3, #31
   1d724:	addne	r3, r3, r3, lsl #1
   1d728:	mov	r2, #0
   1d72c:	addne	pc, pc, r3, lsl #2
   1d730:	nop			; (mov r0, r0)
   1d734:	cmp	r0, r1, lsl #31
   1d738:	adc	r2, r2, r2
   1d73c:	subcs	r0, r0, r1, lsl #31
   1d740:	cmp	r0, r1, lsl #30
   1d744:	adc	r2, r2, r2
   1d748:	subcs	r0, r0, r1, lsl #30
   1d74c:	cmp	r0, r1, lsl #29
   1d750:	adc	r2, r2, r2
   1d754:	subcs	r0, r0, r1, lsl #29
   1d758:	cmp	r0, r1, lsl #28
   1d75c:	adc	r2, r2, r2
   1d760:	subcs	r0, r0, r1, lsl #28
   1d764:	cmp	r0, r1, lsl #27
   1d768:	adc	r2, r2, r2
   1d76c:	subcs	r0, r0, r1, lsl #27
   1d770:	cmp	r0, r1, lsl #26
   1d774:	adc	r2, r2, r2
   1d778:	subcs	r0, r0, r1, lsl #26
   1d77c:	cmp	r0, r1, lsl #25
   1d780:	adc	r2, r2, r2
   1d784:	subcs	r0, r0, r1, lsl #25
   1d788:	cmp	r0, r1, lsl #24
   1d78c:	adc	r2, r2, r2
   1d790:	subcs	r0, r0, r1, lsl #24
   1d794:	cmp	r0, r1, lsl #23
   1d798:	adc	r2, r2, r2
   1d79c:	subcs	r0, r0, r1, lsl #23
   1d7a0:	cmp	r0, r1, lsl #22
   1d7a4:	adc	r2, r2, r2
   1d7a8:	subcs	r0, r0, r1, lsl #22
   1d7ac:	cmp	r0, r1, lsl #21
   1d7b0:	adc	r2, r2, r2
   1d7b4:	subcs	r0, r0, r1, lsl #21
   1d7b8:	cmp	r0, r1, lsl #20
   1d7bc:	adc	r2, r2, r2
   1d7c0:	subcs	r0, r0, r1, lsl #20
   1d7c4:	cmp	r0, r1, lsl #19
   1d7c8:	adc	r2, r2, r2
   1d7cc:	subcs	r0, r0, r1, lsl #19
   1d7d0:	cmp	r0, r1, lsl #18
   1d7d4:	adc	r2, r2, r2
   1d7d8:	subcs	r0, r0, r1, lsl #18
   1d7dc:	cmp	r0, r1, lsl #17
   1d7e0:	adc	r2, r2, r2
   1d7e4:	subcs	r0, r0, r1, lsl #17
   1d7e8:	cmp	r0, r1, lsl #16
   1d7ec:	adc	r2, r2, r2
   1d7f0:	subcs	r0, r0, r1, lsl #16
   1d7f4:	cmp	r0, r1, lsl #15
   1d7f8:	adc	r2, r2, r2
   1d7fc:	subcs	r0, r0, r1, lsl #15
   1d800:	cmp	r0, r1, lsl #14
   1d804:	adc	r2, r2, r2
   1d808:	subcs	r0, r0, r1, lsl #14
   1d80c:	cmp	r0, r1, lsl #13
   1d810:	adc	r2, r2, r2
   1d814:	subcs	r0, r0, r1, lsl #13
   1d818:	cmp	r0, r1, lsl #12
   1d81c:	adc	r2, r2, r2
   1d820:	subcs	r0, r0, r1, lsl #12
   1d824:	cmp	r0, r1, lsl #11
   1d828:	adc	r2, r2, r2
   1d82c:	subcs	r0, r0, r1, lsl #11
   1d830:	cmp	r0, r1, lsl #10
   1d834:	adc	r2, r2, r2
   1d838:	subcs	r0, r0, r1, lsl #10
   1d83c:	cmp	r0, r1, lsl #9
   1d840:	adc	r2, r2, r2
   1d844:	subcs	r0, r0, r1, lsl #9
   1d848:	cmp	r0, r1, lsl #8
   1d84c:	adc	r2, r2, r2
   1d850:	subcs	r0, r0, r1, lsl #8
   1d854:	cmp	r0, r1, lsl #7
   1d858:	adc	r2, r2, r2
   1d85c:	subcs	r0, r0, r1, lsl #7
   1d860:	cmp	r0, r1, lsl #6
   1d864:	adc	r2, r2, r2
   1d868:	subcs	r0, r0, r1, lsl #6
   1d86c:	cmp	r0, r1, lsl #5
   1d870:	adc	r2, r2, r2
   1d874:	subcs	r0, r0, r1, lsl #5
   1d878:	cmp	r0, r1, lsl #4
   1d87c:	adc	r2, r2, r2
   1d880:	subcs	r0, r0, r1, lsl #4
   1d884:	cmp	r0, r1, lsl #3
   1d888:	adc	r2, r2, r2
   1d88c:	subcs	r0, r0, r1, lsl #3
   1d890:	cmp	r0, r1, lsl #2
   1d894:	adc	r2, r2, r2
   1d898:	subcs	r0, r0, r1, lsl #2
   1d89c:	cmp	r0, r1, lsl #1
   1d8a0:	adc	r2, r2, r2
   1d8a4:	subcs	r0, r0, r1, lsl #1
   1d8a8:	cmp	r0, r1
   1d8ac:	adc	r2, r2, r2
   1d8b0:	subcs	r0, r0, r1
   1d8b4:	mov	r0, r2
   1d8b8:	bx	lr
   1d8bc:	moveq	r0, #1
   1d8c0:	movne	r0, #0
   1d8c4:	bx	lr
   1d8c8:	clz	r2, r1
   1d8cc:	rsb	r2, r2, #31
   1d8d0:	lsr	r0, r0, r2
   1d8d4:	bx	lr
   1d8d8:	cmp	r0, #0
   1d8dc:	mvnne	r0, #0
   1d8e0:	b	1db80 <__assert_fail@plt+0xc8b0>
   1d8e4:	cmp	r1, #0
   1d8e8:	beq	1d8d8 <__assert_fail@plt+0xc608>
   1d8ec:	push	{r0, r1, lr}
   1d8f0:	bl	1d6f8 <__assert_fail@plt+0xc428>
   1d8f4:	pop	{r1, r2, lr}
   1d8f8:	mul	r3, r2, r0
   1d8fc:	sub	r1, r1, r3
   1d900:	bx	lr
   1d904:	cmp	r1, #0
   1d908:	beq	1db14 <__assert_fail@plt+0xc844>
   1d90c:	eor	ip, r0, r1
   1d910:	rsbmi	r1, r1, #0
   1d914:	subs	r2, r1, #1
   1d918:	beq	1dae0 <__assert_fail@plt+0xc810>
   1d91c:	movs	r3, r0
   1d920:	rsbmi	r3, r0, #0
   1d924:	cmp	r3, r1
   1d928:	bls	1daec <__assert_fail@plt+0xc81c>
   1d92c:	tst	r1, r2
   1d930:	beq	1dafc <__assert_fail@plt+0xc82c>
   1d934:	clz	r2, r3
   1d938:	clz	r0, r1
   1d93c:	sub	r2, r0, r2
   1d940:	rsbs	r2, r2, #31
   1d944:	addne	r2, r2, r2, lsl #1
   1d948:	mov	r0, #0
   1d94c:	addne	pc, pc, r2, lsl #2
   1d950:	nop			; (mov r0, r0)
   1d954:	cmp	r3, r1, lsl #31
   1d958:	adc	r0, r0, r0
   1d95c:	subcs	r3, r3, r1, lsl #31
   1d960:	cmp	r3, r1, lsl #30
   1d964:	adc	r0, r0, r0
   1d968:	subcs	r3, r3, r1, lsl #30
   1d96c:	cmp	r3, r1, lsl #29
   1d970:	adc	r0, r0, r0
   1d974:	subcs	r3, r3, r1, lsl #29
   1d978:	cmp	r3, r1, lsl #28
   1d97c:	adc	r0, r0, r0
   1d980:	subcs	r3, r3, r1, lsl #28
   1d984:	cmp	r3, r1, lsl #27
   1d988:	adc	r0, r0, r0
   1d98c:	subcs	r3, r3, r1, lsl #27
   1d990:	cmp	r3, r1, lsl #26
   1d994:	adc	r0, r0, r0
   1d998:	subcs	r3, r3, r1, lsl #26
   1d99c:	cmp	r3, r1, lsl #25
   1d9a0:	adc	r0, r0, r0
   1d9a4:	subcs	r3, r3, r1, lsl #25
   1d9a8:	cmp	r3, r1, lsl #24
   1d9ac:	adc	r0, r0, r0
   1d9b0:	subcs	r3, r3, r1, lsl #24
   1d9b4:	cmp	r3, r1, lsl #23
   1d9b8:	adc	r0, r0, r0
   1d9bc:	subcs	r3, r3, r1, lsl #23
   1d9c0:	cmp	r3, r1, lsl #22
   1d9c4:	adc	r0, r0, r0
   1d9c8:	subcs	r3, r3, r1, lsl #22
   1d9cc:	cmp	r3, r1, lsl #21
   1d9d0:	adc	r0, r0, r0
   1d9d4:	subcs	r3, r3, r1, lsl #21
   1d9d8:	cmp	r3, r1, lsl #20
   1d9dc:	adc	r0, r0, r0
   1d9e0:	subcs	r3, r3, r1, lsl #20
   1d9e4:	cmp	r3, r1, lsl #19
   1d9e8:	adc	r0, r0, r0
   1d9ec:	subcs	r3, r3, r1, lsl #19
   1d9f0:	cmp	r3, r1, lsl #18
   1d9f4:	adc	r0, r0, r0
   1d9f8:	subcs	r3, r3, r1, lsl #18
   1d9fc:	cmp	r3, r1, lsl #17
   1da00:	adc	r0, r0, r0
   1da04:	subcs	r3, r3, r1, lsl #17
   1da08:	cmp	r3, r1, lsl #16
   1da0c:	adc	r0, r0, r0
   1da10:	subcs	r3, r3, r1, lsl #16
   1da14:	cmp	r3, r1, lsl #15
   1da18:	adc	r0, r0, r0
   1da1c:	subcs	r3, r3, r1, lsl #15
   1da20:	cmp	r3, r1, lsl #14
   1da24:	adc	r0, r0, r0
   1da28:	subcs	r3, r3, r1, lsl #14
   1da2c:	cmp	r3, r1, lsl #13
   1da30:	adc	r0, r0, r0
   1da34:	subcs	r3, r3, r1, lsl #13
   1da38:	cmp	r3, r1, lsl #12
   1da3c:	adc	r0, r0, r0
   1da40:	subcs	r3, r3, r1, lsl #12
   1da44:	cmp	r3, r1, lsl #11
   1da48:	adc	r0, r0, r0
   1da4c:	subcs	r3, r3, r1, lsl #11
   1da50:	cmp	r3, r1, lsl #10
   1da54:	adc	r0, r0, r0
   1da58:	subcs	r3, r3, r1, lsl #10
   1da5c:	cmp	r3, r1, lsl #9
   1da60:	adc	r0, r0, r0
   1da64:	subcs	r3, r3, r1, lsl #9
   1da68:	cmp	r3, r1, lsl #8
   1da6c:	adc	r0, r0, r0
   1da70:	subcs	r3, r3, r1, lsl #8
   1da74:	cmp	r3, r1, lsl #7
   1da78:	adc	r0, r0, r0
   1da7c:	subcs	r3, r3, r1, lsl #7
   1da80:	cmp	r3, r1, lsl #6
   1da84:	adc	r0, r0, r0
   1da88:	subcs	r3, r3, r1, lsl #6
   1da8c:	cmp	r3, r1, lsl #5
   1da90:	adc	r0, r0, r0
   1da94:	subcs	r3, r3, r1, lsl #5
   1da98:	cmp	r3, r1, lsl #4
   1da9c:	adc	r0, r0, r0
   1daa0:	subcs	r3, r3, r1, lsl #4
   1daa4:	cmp	r3, r1, lsl #3
   1daa8:	adc	r0, r0, r0
   1daac:	subcs	r3, r3, r1, lsl #3
   1dab0:	cmp	r3, r1, lsl #2
   1dab4:	adc	r0, r0, r0
   1dab8:	subcs	r3, r3, r1, lsl #2
   1dabc:	cmp	r3, r1, lsl #1
   1dac0:	adc	r0, r0, r0
   1dac4:	subcs	r3, r3, r1, lsl #1
   1dac8:	cmp	r3, r1
   1dacc:	adc	r0, r0, r0
   1dad0:	subcs	r3, r3, r1
   1dad4:	cmp	ip, #0
   1dad8:	rsbmi	r0, r0, #0
   1dadc:	bx	lr
   1dae0:	teq	ip, r0
   1dae4:	rsbmi	r0, r0, #0
   1dae8:	bx	lr
   1daec:	movcc	r0, #0
   1daf0:	asreq	r0, ip, #31
   1daf4:	orreq	r0, r0, #1
   1daf8:	bx	lr
   1dafc:	clz	r2, r1
   1db00:	rsb	r2, r2, #31
   1db04:	cmp	ip, #0
   1db08:	lsr	r0, r3, r2
   1db0c:	rsbmi	r0, r0, #0
   1db10:	bx	lr
   1db14:	cmp	r0, #0
   1db18:	mvngt	r0, #-2147483648	; 0x80000000
   1db1c:	movlt	r0, #-2147483648	; 0x80000000
   1db20:	b	1db80 <__assert_fail@plt+0xc8b0>
   1db24:	cmp	r1, #0
   1db28:	beq	1db14 <__assert_fail@plt+0xc844>
   1db2c:	push	{r0, r1, lr}
   1db30:	bl	1d90c <__assert_fail@plt+0xc63c>
   1db34:	pop	{r1, r2, lr}
   1db38:	mul	r3, r2, r0
   1db3c:	sub	r1, r1, r3
   1db40:	bx	lr
   1db44:	cmp	r3, #0
   1db48:	cmpeq	r2, #0
   1db4c:	bne	1db64 <__assert_fail@plt+0xc894>
   1db50:	cmp	r1, #0
   1db54:	cmpeq	r0, #0
   1db58:	mvnne	r1, #0
   1db5c:	mvnne	r0, #0
   1db60:	b	1db80 <__assert_fail@plt+0xc8b0>
   1db64:	sub	sp, sp, #8
   1db68:	push	{sp, lr}
   1db6c:	bl	1db90 <__assert_fail@plt+0xc8c0>
   1db70:	ldr	lr, [sp, #4]
   1db74:	add	sp, sp, #8
   1db78:	pop	{r2, r3}
   1db7c:	bx	lr
   1db80:	push	{r1, lr}
   1db84:	mov	r0, #8
   1db88:	bl	10fc4 <raise@plt>
   1db8c:	pop	{r1, pc}
   1db90:	cmp	r1, r3
   1db94:	push	{r4, r5, r6, r7, r8, r9, lr}
   1db98:	cmpeq	r0, r2
   1db9c:	mov	r4, r0
   1dba0:	mov	r5, r1
   1dba4:	ldr	r9, [sp, #28]
   1dba8:	movcc	r0, #0
   1dbac:	movcc	r1, #0
   1dbb0:	bcc	1dca8 <__assert_fail@plt+0xc9d8>
   1dbb4:	cmp	r3, #0
   1dbb8:	clzeq	ip, r2
   1dbbc:	clzne	ip, r3
   1dbc0:	addeq	ip, ip, #32
   1dbc4:	cmp	r5, #0
   1dbc8:	clzeq	r1, r4
   1dbcc:	addeq	r1, r1, #32
   1dbd0:	clzne	r1, r5
   1dbd4:	sub	ip, ip, r1
   1dbd8:	sub	lr, ip, #32
   1dbdc:	lsl	r7, r3, ip
   1dbe0:	rsb	r8, ip, #32
   1dbe4:	orr	r7, r7, r2, lsl lr
   1dbe8:	orr	r7, r7, r2, lsr r8
   1dbec:	lsl	r6, r2, ip
   1dbf0:	cmp	r5, r7
   1dbf4:	cmpeq	r4, r6
   1dbf8:	movcc	r0, #0
   1dbfc:	movcc	r1, #0
   1dc00:	bcc	1dc1c <__assert_fail@plt+0xc94c>
   1dc04:	mov	r3, #1
   1dc08:	subs	r4, r4, r6
   1dc0c:	lsl	r1, r3, lr
   1dc10:	lsl	r0, r3, ip
   1dc14:	orr	r1, r1, r3, lsr r8
   1dc18:	sbc	r5, r5, r7
   1dc1c:	cmp	ip, #0
   1dc20:	beq	1dca8 <__assert_fail@plt+0xc9d8>
   1dc24:	lsrs	r3, r7, #1
   1dc28:	rrx	r2, r6
   1dc2c:	mov	r6, ip
   1dc30:	b	1dc54 <__assert_fail@plt+0xc984>
   1dc34:	subs	r4, r4, r2
   1dc38:	sbc	r5, r5, r3
   1dc3c:	adds	r4, r4, r4
   1dc40:	adc	r5, r5, r5
   1dc44:	adds	r4, r4, #1
   1dc48:	adc	r5, r5, #0
   1dc4c:	subs	r6, r6, #1
   1dc50:	beq	1dc70 <__assert_fail@plt+0xc9a0>
   1dc54:	cmp	r5, r3
   1dc58:	cmpeq	r4, r2
   1dc5c:	bcs	1dc34 <__assert_fail@plt+0xc964>
   1dc60:	adds	r4, r4, r4
   1dc64:	adc	r5, r5, r5
   1dc68:	subs	r6, r6, #1
   1dc6c:	bne	1dc54 <__assert_fail@plt+0xc984>
   1dc70:	lsr	r6, r4, ip
   1dc74:	lsr	r7, r5, ip
   1dc78:	orr	r6, r6, r5, lsl r8
   1dc7c:	adds	r2, r0, r4
   1dc80:	orr	r6, r6, r5, lsr lr
   1dc84:	adc	r3, r1, r5
   1dc88:	lsl	r1, r7, ip
   1dc8c:	orr	r1, r1, r6, lsl lr
   1dc90:	lsl	r0, r6, ip
   1dc94:	orr	r1, r1, r6, lsr r8
   1dc98:	subs	r0, r2, r0
   1dc9c:	mov	r4, r6
   1dca0:	mov	r5, r7
   1dca4:	sbc	r1, r3, r1
   1dca8:	cmp	r9, #0
   1dcac:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1dcb0:	strd	r4, [r9]
   1dcb4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1dcb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1dcbc:	mov	r7, r0
   1dcc0:	ldr	r6, [pc, #72]	; 1dd10 <__assert_fail@plt+0xca40>
   1dcc4:	ldr	r5, [pc, #72]	; 1dd14 <__assert_fail@plt+0xca44>
   1dcc8:	add	r6, pc, r6
   1dccc:	add	r5, pc, r5
   1dcd0:	sub	r6, r6, r5
   1dcd4:	mov	r8, r1
   1dcd8:	mov	r9, r2
   1dcdc:	bl	10f80 <fstatfs64@plt-0x20>
   1dce0:	asrs	r6, r6, #2
   1dce4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dce8:	mov	r4, #0
   1dcec:	add	r4, r4, #1
   1dcf0:	ldr	r3, [r5], #4
   1dcf4:	mov	r2, r9
   1dcf8:	mov	r1, r8
   1dcfc:	mov	r0, r7
   1dd00:	blx	r3
   1dd04:	cmp	r6, r4
   1dd08:	bne	1dcec <__assert_fail@plt+0xca1c>
   1dd0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dd10:	andeq	r2, r1, r0, asr #4
   1dd14:	andeq	r2, r1, r8, lsr r2
   1dd18:	bx	lr
   1dd1c:	ldr	r3, [pc, #12]	; 1dd30 <__assert_fail@plt+0xca60>
   1dd20:	mov	r1, #0
   1dd24:	add	r3, pc, r3
   1dd28:	ldr	r2, [r3]
   1dd2c:	b	1118c <__cxa_atexit@plt>
   1dd30:	strdeq	r2, [r1], -ip

Disassembly of section .fini:

0001dd34 <.fini>:
   1dd34:	push	{r3, lr}
   1dd38:	pop	{r3, pc}
