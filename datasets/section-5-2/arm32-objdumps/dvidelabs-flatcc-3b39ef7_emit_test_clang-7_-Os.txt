
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf32-littlearm


Disassembly of section .init:

000123c8 <.init>:
   123c8:	push	{r3, lr}
   123cc:	bl	124fc <_start@@Base+0x3c>
   123d0:	pop	{r3, pc}

Disassembly of section .plt:

000123d4 <printf@plt-0x14>:
   123d4:	push	{lr}		; (str lr, [sp, #-4]!)
   123d8:	ldr	lr, [pc, #4]	; 123e4 <printf@plt-0x4>
   123dc:	add	lr, pc, lr
   123e0:	ldr	pc, [lr, #8]!
   123e4:	andeq	r6, r1, ip, lsl ip

000123e8 <printf@plt>:
   123e8:	add	ip, pc, #0, 12
   123ec:	add	ip, ip, #90112	; 0x16000
   123f0:	ldr	pc, [ip, #3100]!	; 0xc1c

000123f4 <free@plt>:
   123f4:	add	ip, pc, #0, 12
   123f8:	add	ip, ip, #90112	; 0x16000
   123fc:	ldr	pc, [ip, #3092]!	; 0xc14

00012400 <memcpy@plt>:
   12400:	add	ip, pc, #0, 12
   12404:	add	ip, ip, #90112	; 0x16000
   12408:	ldr	pc, [ip, #3084]!	; 0xc0c

0001240c <memcmp@plt>:
   1240c:	add	ip, pc, #0, 12
   12410:	add	ip, ip, #90112	; 0x16000
   12414:	ldr	pc, [ip, #3076]!	; 0xc04

00012418 <realloc@plt>:
   12418:	add	ip, pc, #0, 12
   1241c:	add	ip, ip, #90112	; 0x16000
   12420:	ldr	pc, [ip, #3068]!	; 0xbfc

00012424 <fwrite@plt>:
   12424:	add	ip, pc, #0, 12
   12428:	add	ip, ip, #90112	; 0x16000
   1242c:	ldr	pc, [ip, #3060]!	; 0xbf4

00012430 <puts@plt>:
   12430:	add	ip, pc, #0, 12
   12434:	add	ip, ip, #90112	; 0x16000
   12438:	ldr	pc, [ip, #3052]!	; 0xbec

0001243c <malloc@plt>:
   1243c:	add	ip, pc, #0, 12
   12440:	add	ip, ip, #90112	; 0x16000
   12444:	ldr	pc, [ip, #3044]!	; 0xbe4

00012448 <__libc_start_main@plt>:
   12448:	add	ip, pc, #0, 12
   1244c:	add	ip, ip, #90112	; 0x16000
   12450:	ldr	pc, [ip, #3036]!	; 0xbdc

00012454 <__gmon_start__@plt>:
   12454:	add	ip, pc, #0, 12
   12458:	add	ip, ip, #90112	; 0x16000
   1245c:	ldr	pc, [ip, #3028]!	; 0xbd4

00012460 <strlen@plt>:
   12460:	add	ip, pc, #0, 12
   12464:	add	ip, ip, #90112	; 0x16000
   12468:	ldr	pc, [ip, #3020]!	; 0xbcc

0001246c <fprintf@plt>:
   1246c:	add	ip, pc, #0, 12
   12470:	add	ip, ip, #90112	; 0x16000
   12474:	ldr	pc, [ip, #3012]!	; 0xbc4

00012478 <posix_memalign@plt>:
   12478:	add	ip, pc, #0, 12
   1247c:	add	ip, ip, #90112	; 0x16000
   12480:	ldr	pc, [ip, #3004]!	; 0xbbc

00012484 <memset@plt>:
   12484:	add	ip, pc, #0, 12
   12488:	add	ip, ip, #90112	; 0x16000
   1248c:	ldr	pc, [ip, #2996]!	; 0xbb4

00012490 <memchr@plt>:
   12490:	add	ip, pc, #0, 12
   12494:	add	ip, ip, #90112	; 0x16000
   12498:	ldr	pc, [ip, #2988]!	; 0xbac

0001249c <fputc@plt>:
   1249c:	add	ip, pc, #0, 12
   124a0:	add	ip, ip, #90112	; 0x16000
   124a4:	ldr	pc, [ip, #2980]!	; 0xba4

000124a8 <abort@plt>:
   124a8:	add	ip, pc, #0, 12
   124ac:	add	ip, ip, #90112	; 0x16000
   124b0:	ldr	pc, [ip, #2972]!	; 0xb9c

000124b4 <__assert_fail@plt>:
   124b4:	add	ip, pc, #0, 12
   124b8:	add	ip, ip, #90112	; 0x16000
   124bc:	ldr	pc, [ip, #2964]!	; 0xb94

Disassembly of section .text:

000124c0 <_start@@Base>:
   124c0:	mov	fp, #0
   124c4:	mov	lr, #0
   124c8:	pop	{r1}		; (ldr r1, [sp], #4)
   124cc:	mov	r2, sp
   124d0:	push	{r2}		; (str r2, [sp, #-4]!)
   124d4:	push	{r0}		; (str r0, [sp, #-4]!)
   124d8:	ldr	ip, [pc, #16]	; 124f0 <_start@@Base+0x30>
   124dc:	push	{ip}		; (str ip, [sp, #-4]!)
   124e0:	ldr	r0, [pc, #12]	; 124f4 <_start@@Base+0x34>
   124e4:	ldr	r3, [pc, #12]	; 124f8 <_start@@Base+0x38>
   124e8:	bl	12448 <__libc_start_main@plt>
   124ec:	bl	124a8 <abort@plt>
   124f0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   124f4:	andeq	r2, r1, r8, ror fp
   124f8:	andeq	r6, r1, ip, lsr pc
   124fc:	ldr	r3, [pc, #20]	; 12518 <_start@@Base+0x58>
   12500:	ldr	r2, [pc, #20]	; 1251c <_start@@Base+0x5c>
   12504:	add	r3, pc, r3
   12508:	ldr	r2, [r3, r2]
   1250c:	cmp	r2, #0
   12510:	bxeq	lr
   12514:	b	12454 <__gmon_start__@plt>
   12518:	strdeq	r6, [r1], -r4
   1251c:	andeq	r0, r0, r4, asr r0
   12520:	ldr	r0, [pc, #24]	; 12540 <_start@@Base+0x80>
   12524:	ldr	r3, [pc, #24]	; 12544 <_start@@Base+0x84>
   12528:	cmp	r3, r0
   1252c:	bxeq	lr
   12530:	ldr	r3, [pc, #16]	; 12548 <_start@@Base+0x88>
   12534:	cmp	r3, #0
   12538:	bxeq	lr
   1253c:	bx	r3
   12540:	andeq	r9, r2, r0, rrx
   12544:	andeq	r9, r2, r0, rrx
   12548:	andeq	r0, r0, r0
   1254c:	ldr	r0, [pc, #36]	; 12578 <_start@@Base+0xb8>
   12550:	ldr	r1, [pc, #36]	; 1257c <_start@@Base+0xbc>
   12554:	sub	r1, r1, r0
   12558:	asr	r1, r1, #2
   1255c:	add	r1, r1, r1, lsr #31
   12560:	asrs	r1, r1, #1
   12564:	bxeq	lr
   12568:	ldr	r3, [pc, #16]	; 12580 <_start@@Base+0xc0>
   1256c:	cmp	r3, #0
   12570:	bxeq	lr
   12574:	bx	r3
   12578:	andeq	r9, r2, r0, rrx
   1257c:	andeq	r9, r2, r0, rrx
   12580:	andeq	r0, r0, r0
   12584:	push	{r4, lr}
   12588:	ldr	r4, [pc, #24]	; 125a8 <_start@@Base+0xe8>
   1258c:	ldrb	r3, [r4]
   12590:	cmp	r3, #0
   12594:	popne	{r4, pc}
   12598:	bl	12520 <_start@@Base+0x60>
   1259c:	mov	r3, #1
   125a0:	strb	r3, [r4]
   125a4:	pop	{r4, pc}
   125a8:	andeq	r9, r2, r4, rrx
   125ac:	b	1254c <_start@@Base+0x8c>

000125b0 <dbg_emitter@@Base>:
   125b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   125b4:	add	fp, sp, #24
   125b8:	mov	r4, r3
   125bc:	ldr	r3, [fp, #8]
   125c0:	movw	r0, #28596	; 0x6fb4
   125c4:	mov	r6, r1
   125c8:	mov	r5, r2
   125cc:	mov	r1, r2
   125d0:	movt	r0, #1
   125d4:	mov	r2, r4
   125d8:	bl	123e8 <printf@plt>
   125dc:	cmp	r5, #1
   125e0:	blt	12648 <dbg_emitter@@Base+0x98>
   125e4:	movw	r7, #29296	; 0x7270
   125e8:	movw	r8, #28645	; 0x6fe5
   125ec:	movw	r9, #28678	; 0x7006
   125f0:	add	r6, r6, #4
   125f4:	movt	r7, #1
   125f8:	movt	r8, #1
   125fc:	movt	r9, #1
   12600:	ldr	r0, [r6, #-4]
   12604:	cmp	r0, r7
   12608:	bne	12620 <dbg_emitter@@Base+0x70>
   1260c:	ldr	r2, [r6]
   12610:	mov	r0, r8
   12614:	mov	r1, r4
   12618:	bl	123e8 <printf@plt>
   1261c:	ldr	r0, [r6, #-4]
   12620:	cmp	r0, #0
   12624:	bne	12638 <dbg_emitter@@Base+0x88>
   12628:	ldr	r2, [r6]
   1262c:	mov	r0, r9
   12630:	mov	r1, r4
   12634:	bl	123e8 <printf@plt>
   12638:	ldr	r0, [r6], #8
   1263c:	subs	r5, r5, #1
   12640:	add	r4, r0, r4
   12644:	bne	12600 <dbg_emitter@@Base+0x50>
   12648:	mov	r0, #0
   1264c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00012650 <debug_test@@Base>:
   12650:	push	{r4, r5, r6, r7, fp, lr}
   12654:	add	fp, sp, #16
   12658:	sub	sp, sp, #280	; 0x118
   1265c:	add	r4, sp, #8
   12660:	vmov.i32	q8, #0	; 0x00000000
   12664:	mov	r5, #0
   12668:	add	r0, r4, #16
   1266c:	mov	r1, r4
   12670:	str	r5, [sp, #40]	; 0x28
   12674:	vst1.64	{d16-d17}, [r0]
   12678:	mov	r0, #36	; 0x24
   1267c:	vst1.64	{d16-d17}, [r1], r0
   12680:	movw	r0, #29200	; 0x7210
   12684:	movt	r0, #1
   12688:	str	r5, [r1]
   1268c:	bl	12430 <puts@plt>
   12690:	movw	r1, #9648	; 0x25b0
   12694:	str	r5, [sp]
   12698:	add	r5, sp, #48	; 0x30
   1269c:	mov	r2, #0
   126a0:	mov	r3, #0
   126a4:	movt	r1, #1
   126a8:	mov	r0, r5
   126ac:	bl	12cd4 <flatcc_builder_custom_init@@Base>
   126b0:	mvn	r0, #-1073741824	; 0xc0000000
   126b4:	mov	r1, #4
   126b8:	mov	r2, #10
   126bc:	mov	r3, #4
   126c0:	str	r1, [sp]
   126c4:	str	r0, [sp, #4]
   126c8:	mov	r0, r5
   126cc:	mov	r1, r4
   126d0:	bl	15300 <flatcc_builder_create_vector@@Base>
   126d4:	mov	r1, r0
   126d8:	mov	r0, r5
   126dc:	bl	126f4 <debug_test@@Base+0xa4>
   126e0:	mov	r0, r5
   126e4:	bl	12edc <flatcc_builder_clear@@Base>
   126e8:	mov	r0, #0
   126ec:	sub	sp, fp, #16
   126f0:	pop	{r4, r5, r6, r7, fp, pc}
   126f4:	push	{r4, r5, r6, r7, fp, lr}
   126f8:	add	fp, sp, #16
   126fc:	mov	r5, r1
   12700:	mov	r1, #0
   12704:	mov	r2, #0
   12708:	mov	r3, #0
   1270c:	mov	r4, r0
   12710:	mov	r7, #0
   12714:	bl	1373c <flatcc_builder_start_buffer@@Base>
   12718:	cmp	r0, #0
   1271c:	popne	{r4, r5, r6, r7, fp, pc}
   12720:	mov	r0, r4
   12724:	mov	r1, #3
   12728:	bl	147b8 <flatcc_builder_start_table@@Base>
   1272c:	cmp	r0, #0
   12730:	beq	12744 <debug_test@@Base+0xf4>
   12734:	mov	r0, r4
   12738:	mov	r1, r7
   1273c:	pop	{r4, r5, r6, r7, fp, lr}
   12740:	b	1392c <flatcc_builder_end_buffer@@Base>
   12744:	mov	r0, r4
   12748:	mov	r1, #0
   1274c:	mov	r2, #8
   12750:	mov	r3, #8
   12754:	mov	r7, #0
   12758:	bl	15a88 <flatcc_builder_table_add@@Base>
   1275c:	cmp	r0, #0
   12760:	beq	12734 <debug_test@@Base+0xe4>
   12764:	mov	r7, #0
   12768:	mov	r6, #42	; 0x2a
   1276c:	cmp	r5, #0
   12770:	strd	r6, [r0]
   12774:	beq	12734 <debug_test@@Base+0xe4>
   12778:	mov	r0, r4
   1277c:	mov	r1, #2
   12780:	bl	1594c <flatcc_builder_table_add_offset@@Base>
   12784:	cmp	r0, #0
   12788:	beq	12734 <debug_test@@Base+0xe4>
   1278c:	str	r5, [r0]
   12790:	mov	r0, r4
   12794:	mov	r1, #1
   12798:	mov	r2, #1
   1279c:	mov	r3, #1
   127a0:	mov	r5, #1
   127a4:	bl	15a88 <flatcc_builder_table_add@@Base>
   127a8:	cmp	r0, #0
   127ac:	beq	12734 <debug_test@@Base+0xe4>
   127b0:	movw	r1, #29178	; 0x71fa
   127b4:	strb	r5, [r0]
   127b8:	mov	r0, r4
   127bc:	mov	r2, #0
   127c0:	movt	r1, #1
   127c4:	bl	150b8 <flatcc_builder_check_required@@Base>
   127c8:	cmp	r0, #0
   127cc:	beq	127e0 <debug_test@@Base+0x190>
   127d0:	mov	r0, r4
   127d4:	bl	15148 <flatcc_builder_end_table@@Base>
   127d8:	mov	r7, r0
   127dc:	b	12734 <debug_test@@Base+0xe4>
   127e0:	movw	r0, #28842	; 0x70aa
   127e4:	movw	r1, #28950	; 0x7116
   127e8:	movw	r3, #29043	; 0x7173
   127ec:	mov	r2, #21
   127f0:	movt	r0, #1
   127f4:	movt	r1, #1
   127f8:	movt	r3, #1
   127fc:	bl	124b4 <__assert_fail@plt>

00012800 <emit_test@@Base>:
   12800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12804:	add	fp, sp, #28
   12808:	sub	sp, sp, #284	; 0x11c
   1280c:	movw	r0, #29184	; 0x7200
   12810:	add	r6, sp, #28
   12814:	add	r4, sp, #8
   12818:	movt	r0, #1
   1281c:	vld1.64	{d16-d17}, [r0]
   12820:	mov	r0, r6
   12824:	vst1.64	{d16-d17}, [r4]
   12828:	bl	12d40 <flatcc_builder_init@@Base>
   1282c:	mov	r0, r6
   12830:	bl	16940 <flatcc_builder_get_emit_context@@Base>
   12834:	mov	r5, r0
   12838:	mvn	r0, #-1073741824	; 0xc0000000
   1283c:	mov	r1, #4
   12840:	mov	r2, #4
   12844:	mov	r3, #4
   12848:	str	r1, [sp]
   1284c:	str	r0, [sp, #4]
   12850:	mov	r0, r6
   12854:	mov	r1, r4
   12858:	bl	15300 <flatcc_builder_create_vector@@Base>
   1285c:	mov	r1, r0
   12860:	mov	r0, r6
   12864:	bl	126f4 <debug_test@@Base+0xa4>
   12868:	ldm	r5, {r1, r2}
   1286c:	mvn	r0, #0
   12870:	cmp	r1, r2
   12874:	bne	12a8c <emit_test@@Base+0x28c>
   12878:	ldr	r4, [r5, #8]
   1287c:	cmp	r4, #0
   12880:	beq	12a8c <emit_test@@Base+0x28c>
   12884:	ldr	r5, [r5, #24]
   12888:	add	r0, sp, #28
   1288c:	bl	16694 <flatcc_builder_get_buffer_size@@Base>
   12890:	cmp	r5, r0
   12894:	bne	12af4 <emit_test@@Base+0x2f4>
   12898:	movw	r6, #36960	; 0x9060
   1289c:	movw	r1, #28815	; 0x708f
   128a0:	mov	r2, r5
   128a4:	movt	r6, #2
   128a8:	movt	r1, #1
   128ac:	ldr	r0, [r6]
   128b0:	bl	1246c <fprintf@plt>
   128b4:	ldr	r6, [r6]
   128b8:	movw	r1, #29088	; 0x71a0
   128bc:	movw	r2, #28832	; 0x70a0
   128c0:	movt	r1, #1
   128c4:	movt	r2, #1
   128c8:	mov	r0, r6
   128cc:	bl	1246c <fprintf@plt>
   128d0:	cmp	r5, #0
   128d4:	beq	129b0 <emit_test@@Base+0x1b0>
   128d8:	movw	sl, #29107	; 0x71b3
   128dc:	sub	r7, fp, #49	; 0x31
   128e0:	mov	r8, #0
   128e4:	movt	sl, #1
   128e8:	ands	r9, r8, #15
   128ec:	bne	12924 <emit_test@@Base+0x124>
   128f0:	cmp	r8, #0
   128f4:	beq	1290c <emit_test@@Base+0x10c>
   128f8:	movw	r1, #29093	; 0x71a5
   128fc:	mov	r0, r6
   12900:	mov	r2, r7
   12904:	movt	r1, #1
   12908:	bl	1246c <fprintf@plt>
   1290c:	movw	r1, #29099	; 0x71ab
   12910:	mov	r0, r6
   12914:	mov	r2, r8
   12918:	movt	r1, #1
   1291c:	bl	1246c <fprintf@plt>
   12920:	b	12938 <emit_test@@Base+0x138>
   12924:	tst	r8, #7
   12928:	bne	12938 <emit_test@@Base+0x138>
   1292c:	mov	r0, #32
   12930:	mov	r1, r6
   12934:	bl	1249c <fputc@plt>
   12938:	ldrb	r2, [r4, r8]
   1293c:	mov	r0, r6
   12940:	mov	r1, sl
   12944:	bl	1246c <fprintf@plt>
   12948:	ldrb	r0, [r4, r8]
   1294c:	add	r8, r8, #1
   12950:	sub	r1, r0, #32
   12954:	uxtb	r1, r1
   12958:	cmp	r1, #94	; 0x5e
   1295c:	mov	r1, #0
   12960:	movwhi	r0, #46	; 0x2e
   12964:	cmp	r5, r8
   12968:	strb	r0, [r7, r9]
   1296c:	add	r0, r7, r9
   12970:	strb	r1, [r0, #1]
   12974:	bne	128e8 <emit_test@@Base+0xe8>
   12978:	tst	r5, #15
   1297c:	beq	129b0 <emit_test@@Base+0x1b0>
   12980:	movw	r8, #29113	; 0x71b9
   12984:	add	r7, r5, #1
   12988:	movt	r8, #1
   1298c:	mov	r0, r8
   12990:	mov	r1, #3
   12994:	mov	r2, #1
   12998:	mov	r3, r6
   1299c:	bl	12424 <fwrite@plt>
   129a0:	add	r0, r7, #1
   129a4:	tst	r7, #15
   129a8:	mov	r7, r0
   129ac:	bne	1298c <emit_test@@Base+0x18c>
   129b0:	movw	r1, #29093	; 0x71a5
   129b4:	sub	r2, fp, #49	; 0x31
   129b8:	mov	r0, r6
   129bc:	movt	r1, #1
   129c0:	bl	1246c <fprintf@plt>
   129c4:	cmp	r5, #58	; 0x3a
   129c8:	bne	12b14 <emit_test@@Base+0x314>
   129cc:	movw	r1, #29118	; 0x71be
   129d0:	mov	r0, r4
   129d4:	mov	r2, #58	; 0x3a
   129d8:	movt	r1, #1
   129dc:	bl	1240c <memcmp@plt>
   129e0:	cmp	r0, #0
   129e4:	bne	12b34 <emit_test@@Base+0x334>
   129e8:	ldr	r0, [r4]
   129ec:	ldr	r1, [r4, r0]!
   129f0:	mov	r0, r4
   129f4:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   129f8:	cmp	r1, #6
   129fc:	bcc	12a94 <emit_test@@Base+0x294>
   12a00:	ldrh	r2, [r0, #4]
   12a04:	cmp	r2, #0
   12a08:	beq	12a94 <emit_test@@Base+0x294>
   12a0c:	mov	r3, r4
   12a10:	ldr	r2, [r3, r2]!
   12a14:	ldr	r3, [r3, #4]
   12a18:	eor	r2, r2, #42	; 0x2a
   12a1c:	orrs	r2, r2, r3
   12a20:	bne	12a94 <emit_test@@Base+0x294>
   12a24:	cmp	r1, #8
   12a28:	bcc	12ab4 <emit_test@@Base+0x2b4>
   12a2c:	ldrh	r2, [r0, #6]
   12a30:	cmp	r2, #0
   12a34:	beq	12ab4 <emit_test@@Base+0x2b4>
   12a38:	ldrb	r2, [r4, r2]
   12a3c:	cmp	r2, #1
   12a40:	bne	12ab4 <emit_test@@Base+0x2b4>
   12a44:	cmp	r1, #10
   12a48:	bcc	12ad4 <emit_test@@Base+0x2d4>
   12a4c:	ldrh	r0, [r0, #8]
   12a50:	cmp	r0, #0
   12a54:	beq	12ad4 <emit_test@@Base+0x2d4>
   12a58:	ldr	r0, [r4, r0]!
   12a5c:	ldr	r0, [r4, r0]!
   12a60:	cmp	r0, #4
   12a64:	bne	12ad4 <emit_test@@Base+0x2d4>
   12a68:	add	r0, r4, #4
   12a6c:	vldr	s0, [pc, #256]	; 12b74 <emit_test@@Base+0x374>
   12a70:	vldr	s2, [r0, #8]
   12a74:	vcmp.f32	s2, s0
   12a78:	vmrs	APSR_nzcv, fpscr
   12a7c:	bne	12b54 <emit_test@@Base+0x354>
   12a80:	add	r0, sp, #28
   12a84:	bl	12edc <flatcc_builder_clear@@Base>
   12a88:	mov	r0, #0
   12a8c:	sub	sp, fp, #28
   12a90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a94:	movw	r0, #34344	; 0x8628
   12a98:	movw	r1, #28724	; 0x7034
   12a9c:	movw	r3, #28799	; 0x707f
   12aa0:	mov	r2, #112	; 0x70
   12aa4:	movt	r0, #1
   12aa8:	movt	r1, #1
   12aac:	movt	r3, #1
   12ab0:	bl	124b4 <__assert_fail@plt>
   12ab4:	movw	r0, #34344	; 0x8628
   12ab8:	movw	r1, #28724	; 0x7034
   12abc:	movw	r3, #28799	; 0x707f
   12ac0:	mov	r2, #113	; 0x71
   12ac4:	movt	r0, #1
   12ac8:	movt	r1, #1
   12acc:	movt	r3, #1
   12ad0:	bl	124b4 <__assert_fail@plt>
   12ad4:	movw	r0, #34344	; 0x8628
   12ad8:	movw	r1, #28724	; 0x7034
   12adc:	movw	r3, #28799	; 0x707f
   12ae0:	mov	r2, #114	; 0x72
   12ae4:	movt	r0, #1
   12ae8:	movt	r1, #1
   12aec:	movt	r3, #1
   12af0:	bl	124b4 <__assert_fail@plt>
   12af4:	movw	r0, #34344	; 0x8628
   12af8:	movw	r1, #28724	; 0x7034
   12afc:	movw	r3, #28799	; 0x707f
   12b00:	mov	r2, #101	; 0x65
   12b04:	movt	r0, #1
   12b08:	movt	r1, #1
   12b0c:	movt	r3, #1
   12b10:	bl	124b4 <__assert_fail@plt>
   12b14:	movw	r0, #34344	; 0x8628
   12b18:	movw	r1, #28724	; 0x7034
   12b1c:	movw	r3, #28799	; 0x707f
   12b20:	mov	r2, #106	; 0x6a
   12b24:	movt	r0, #1
   12b28:	movt	r1, #1
   12b2c:	movt	r3, #1
   12b30:	bl	124b4 <__assert_fail@plt>
   12b34:	movw	r0, #34344	; 0x8628
   12b38:	movw	r1, #28724	; 0x7034
   12b3c:	movw	r3, #28799	; 0x707f
   12b40:	mov	r2, #108	; 0x6c
   12b44:	movt	r0, #1
   12b48:	movt	r1, #1
   12b4c:	movt	r3, #1
   12b50:	bl	124b4 <__assert_fail@plt>
   12b54:	movw	r0, #34344	; 0x8628
   12b58:	movw	r1, #28724	; 0x7034
   12b5c:	movw	r3, #28799	; 0x707f
   12b60:	mov	r2, #115	; 0x73
   12b64:	movt	r0, #1
   12b68:	movt	r1, #1
   12b6c:	movt	r3, #1
   12b70:	bl	124b4 <__assert_fail@plt>
   12b74:	svccc	0x0099999a

00012b78 <main@@Base>:
   12b78:	push	{fp, lr}
   12b7c:	mov	fp, sp
   12b80:	bl	12650 <debug_test@@Base>
   12b84:	pop	{fp, lr}
   12b88:	b	12800 <emit_test@@Base>

00012b8c <flatcc_builder_default_alloc@@Base>:
   12b8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12b90:	add	fp, sp, #24
   12b94:	mov	r4, r1
   12b98:	cmp	r2, #0
   12b9c:	beq	12be4 <flatcc_builder_default_alloc@@Base+0x58>
   12ba0:	ldr	r0, [fp, #8]
   12ba4:	mov	r8, r3
   12ba8:	sub	r1, r0, #1
   12bac:	cmp	r1, #6
   12bb0:	bhi	12c0c <flatcc_builder_default_alloc@@Base+0x80>
   12bb4:	add	r3, pc, #4
   12bb8:	mov	r0, #256	; 0x100
   12bbc:	ldr	pc, [r3, r1, lsl #2]
   12bc0:	andeq	r2, r1, r0, lsr #24
   12bc4:	andeq	r2, r1, ip, lsl #24
   12bc8:	andeq	r2, r1, ip, lsl #24
   12bcc:	ldrdeq	r2, [r1], -ip
   12bd0:	andeq	r2, r1, r4, lsl ip
   12bd4:	andeq	r2, r1, ip, lsl #24
   12bd8:	andeq	r2, r1, ip, lsl ip
   12bdc:	mov	r0, #288	; 0x120
   12be0:	b	12c20 <flatcc_builder_default_alloc@@Base+0x94>
   12be4:	ldr	r0, [r4]
   12be8:	cmp	r0, #0
   12bec:	beq	12c04 <flatcc_builder_default_alloc@@Base+0x78>
   12bf0:	bl	123f4 <free@plt>
   12bf4:	mov	r6, #0
   12bf8:	str	r6, [r4]
   12bfc:	str	r6, [r4, #4]
   12c00:	b	12c7c <flatcc_builder_default_alloc@@Base+0xf0>
   12c04:	mov	r6, #0
   12c08:	b	12c7c <flatcc_builder_default_alloc@@Base+0xf0>
   12c0c:	mov	r0, #32
   12c10:	b	12c20 <flatcc_builder_default_alloc@@Base+0x94>
   12c14:	mov	r0, r2
   12c18:	b	12c20 <flatcc_builder_default_alloc@@Base+0x94>
   12c1c:	mov	r0, #64	; 0x40
   12c20:	mov	r7, r0
   12c24:	lsl	r0, r0, #1
   12c28:	cmp	r7, r2
   12c2c:	bcc	12c20 <flatcc_builder_default_alloc@@Base+0x94>
   12c30:	ldr	r0, [r4, #4]
   12c34:	mov	r6, #0
   12c38:	cmp	r0, r2
   12c3c:	lsrcs	r0, r0, #1
   12c40:	cmpcs	r0, r7
   12c44:	bcs	12c7c <flatcc_builder_default_alloc@@Base+0xf0>
   12c48:	ldr	r0, [r4]
   12c4c:	mov	r1, r7
   12c50:	bl	12418 <realloc@plt>
   12c54:	cmp	r0, #0
   12c58:	beq	12c78 <flatcc_builder_default_alloc@@Base+0xec>
   12c5c:	cmp	r8, #0
   12c60:	mov	r5, r0
   12c64:	ldrne	r1, [r4, #4]
   12c68:	cmpne	r7, r1
   12c6c:	bhi	12c84 <flatcc_builder_default_alloc@@Base+0xf8>
   12c70:	stm	r4, {r5, r7}
   12c74:	b	12c7c <flatcc_builder_default_alloc@@Base+0xf0>
   12c78:	mvn	r6, #0
   12c7c:	mov	r0, r6
   12c80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12c84:	add	r0, r5, r1
   12c88:	sub	r2, r7, r1
   12c8c:	mov	r1, #0
   12c90:	bl	12484 <memset@plt>
   12c94:	b	12c70 <flatcc_builder_default_alloc@@Base+0xe4>

00012c98 <flatcc_builder_flush_vtable_cache@@Base>:
   12c98:	push	{r4, r5, fp, lr}
   12c9c:	add	fp, sp, #8
   12ca0:	mov	r4, r0
   12ca4:	ldr	r0, [r0, #116]	; 0x74
   12ca8:	cmp	r0, #0
   12cac:	popeq	{r4, r5, fp, pc}
   12cb0:	ldr	r0, [r4, #92]	; 0x5c
   12cb4:	ldr	r2, [r4, #96]	; 0x60
   12cb8:	mov	r1, #0
   12cbc:	mov	r5, #0
   12cc0:	bl	12484 <memset@plt>
   12cc4:	mov	r0, #16
   12cc8:	str	r5, [r4, #120]	; 0x78
   12ccc:	str	r0, [r4, #124]	; 0x7c
   12cd0:	pop	{r4, r5, fp, pc}

00012cd4 <flatcc_builder_custom_init@@Base>:
   12cd4:	push	{r4, r5, r6, r7, fp, lr}
   12cd8:	add	fp, sp, #16
   12cdc:	mov	r6, r2
   12ce0:	mov	r7, r1
   12ce4:	mov	r1, #0
   12ce8:	mov	r2, #232	; 0xe8
   12cec:	mov	r5, r3
   12cf0:	mov	r4, r0
   12cf4:	bl	12484 <memset@plt>
   12cf8:	ldr	r0, [fp, #8]
   12cfc:	cmp	r7, #0
   12d00:	bne	12d18 <flatcc_builder_custom_init@@Base+0x44>
   12d04:	movw	r7, #27468	; 0x6b4c
   12d08:	mov	r1, #1
   12d0c:	add	r6, r4, #188	; 0xbc
   12d10:	movt	r7, #1
   12d14:	str	r1, [r4, #184]	; 0xb8
   12d18:	movw	r1, #11148	; 0x2b8c
   12d1c:	cmp	r5, #0
   12d20:	str	r6, [r4, #36]	; 0x24
   12d24:	str	r0, [r4, #40]	; 0x28
   12d28:	mov	r0, #0
   12d2c:	str	r7, [r4, #44]	; 0x2c
   12d30:	movt	r1, #1
   12d34:	movne	r1, r5
   12d38:	str	r1, [r4, #48]	; 0x30
   12d3c:	pop	{r4, r5, r6, r7, fp, pc}

00012d40 <flatcc_builder_init@@Base>:
   12d40:	push	{r4, r5, fp, lr}
   12d44:	add	fp, sp, #8
   12d48:	mov	r1, #0
   12d4c:	mov	r2, #232	; 0xe8
   12d50:	mov	r4, r0
   12d54:	mov	r5, #0
   12d58:	bl	12484 <memset@plt>
   12d5c:	mov	r0, #1
   12d60:	movw	r2, #27468	; 0x6b4c
   12d64:	add	r1, r4, #188	; 0xbc
   12d68:	str	r0, [r4, #184]	; 0xb8
   12d6c:	movw	r0, #11148	; 0x2b8c
   12d70:	movt	r2, #1
   12d74:	str	r1, [r4, #36]	; 0x24
   12d78:	str	r5, [r4, #40]	; 0x28
   12d7c:	movt	r0, #1
   12d80:	str	r2, [r4, #44]	; 0x2c
   12d84:	str	r0, [r4, #48]	; 0x30
   12d88:	mov	r0, #0
   12d8c:	pop	{r4, r5, fp, pc}

00012d90 <flatcc_builder_custom_reset@@Base>:
   12d90:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12d94:	add	fp, sp, #24
   12d98:	sub	sp, sp, #8
   12d9c:	mov	r9, r2
   12da0:	mov	r8, r1
   12da4:	mov	r4, r0
   12da8:	add	r7, r0, #52	; 0x34
   12dac:	mov	r5, #0
   12db0:	ldr	r0, [r7]
   12db4:	cmp	r0, #0
   12db8:	beq	12e00 <flatcc_builder_custom_reset@@Base+0x70>
   12dbc:	cmp	r9, #0
   12dc0:	cmpne	r5, #5
   12dc4:	beq	12df0 <flatcc_builder_custom_reset@@Base+0x60>
   12dc8:	ldr	r0, [r4, #40]	; 0x28
   12dcc:	ldr	r6, [r4, #48]	; 0x30
   12dd0:	mov	r1, r7
   12dd4:	mov	r2, #1
   12dd8:	mov	r3, #1
   12ddc:	str	r5, [sp]
   12de0:	blx	r6
   12de4:	cmp	r0, #0
   12de8:	bne	12ea0 <flatcc_builder_custom_reset@@Base+0x110>
   12dec:	ldr	r0, [r7]
   12df0:	ldr	r2, [r7, #4]
   12df4:	mov	r1, #0
   12df8:	bl	12484 <memset@plt>
   12dfc:	b	12e0c <flatcc_builder_custom_reset@@Base+0x7c>
   12e00:	ldr	r0, [r7, #4]
   12e04:	cmp	r0, #0
   12e08:	bne	12eb0 <flatcc_builder_custom_reset@@Base+0x120>
   12e0c:	add	r5, r5, #1
   12e10:	add	r7, r7, #8
   12e14:	cmp	r5, #8
   12e18:	bcc	12db0 <flatcc_builder_custom_reset@@Base+0x20>
   12e1c:	mov	r0, #0
   12e20:	vmov.i32	q8, #0	; 0x00000000
   12e24:	mov	r5, #0
   12e28:	str	r0, [r4, #120]	; 0x78
   12e2c:	ldr	r1, [r4, #124]	; 0x7c
   12e30:	cmp	r1, #0
   12e34:	movne	r1, #16
   12e38:	strne	r1, [r4, #124]	; 0x7c
   12e3c:	add	r1, r4, #148	; 0x94
   12e40:	strh	r0, [r4, #128]	; 0x80
   12e44:	str	r0, [r4, #136]	; 0x88
   12e48:	str	r0, [r4, #140]	; 0x8c
   12e4c:	str	r0, [r4, #32]
   12e50:	cmp	r8, #0
   12e54:	vst1.32	{d16-d17}, [r1]
   12e58:	ldr	r2, [r4, #60]	; 0x3c
   12e5c:	ldr	r1, [r4, #52]	; 0x34
   12e60:	ldr	r3, [r4, #76]	; 0x4c
   12e64:	str	r2, [r4, #16]
   12e68:	str	r0, [r4, #20]
   12e6c:	str	r0, [r4, #24]
   12e70:	movne	r0, #0
   12e74:	str	r3, [r4]
   12e78:	str	r1, [r4, #4]
   12e7c:	strne	r0, [r4, #172]	; 0xac
   12e80:	strne	r0, [r4, #176]	; 0xb0
   12e84:	strne	r0, [r4, #180]	; 0xb4
   12e88:	ldr	r0, [r4, #184]	; 0xb8
   12e8c:	cmp	r0, #0
   12e90:	beq	12ea4 <flatcc_builder_custom_reset@@Base+0x114>
   12e94:	add	r0, r4, #188	; 0xbc
   12e98:	bl	16a1c <flatcc_emitter_reset@@Base>
   12e9c:	b	12ea4 <flatcc_builder_custom_reset@@Base+0x114>
   12ea0:	mvn	r5, #0
   12ea4:	mov	r0, r5
   12ea8:	sub	sp, fp, #24
   12eac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12eb0:	movw	r0, #29808	; 0x7470
   12eb4:	movw	r1, #29826	; 0x7482
   12eb8:	movw	r3, #29896	; 0x74c8
   12ebc:	movw	r2, #434	; 0x1b2
   12ec0:	movt	r0, #1
   12ec4:	movt	r1, #1
   12ec8:	movt	r3, #1
   12ecc:	bl	124b4 <__assert_fail@plt>

00012ed0 <flatcc_builder_reset@@Base>:
   12ed0:	mov	r1, #0
   12ed4:	mov	r2, #0
   12ed8:	b	12d90 <flatcc_builder_custom_reset@@Base>

00012edc <flatcc_builder_clear@@Base>:
   12edc:	push	{r4, r5, r6, r7, fp, lr}
   12ee0:	add	fp, sp, #16
   12ee4:	sub	sp, sp, #8
   12ee8:	mov	r7, r0
   12eec:	add	r5, r0, #52	; 0x34
   12ef0:	mov	r6, #0
   12ef4:	ldr	r0, [r7, #40]	; 0x28
   12ef8:	ldr	r4, [r7, #48]	; 0x30
   12efc:	mov	r1, r5
   12f00:	mov	r2, #0
   12f04:	mov	r3, #0
   12f08:	str	r6, [sp]
   12f0c:	blx	r4
   12f10:	add	r6, r6, #1
   12f14:	add	r5, r5, #8
   12f18:	cmp	r6, #8
   12f1c:	bne	12ef4 <flatcc_builder_clear@@Base+0x18>
   12f20:	ldr	r0, [r7, #184]	; 0xb8
   12f24:	cmp	r0, #0
   12f28:	beq	12f34 <flatcc_builder_clear@@Base+0x58>
   12f2c:	add	r0, r7, #188	; 0xbc
   12f30:	bl	16ae8 <flatcc_emitter_clear@@Base>
   12f34:	mov	r0, r7
   12f38:	mov	r1, #0
   12f3c:	mov	r2, #232	; 0xe8
   12f40:	sub	sp, fp, #16
   12f44:	pop	{r4, r5, r6, r7, fp, lr}
   12f48:	b	12484 <memset@plt>

00012f4c <flatcc_builder_enter_user_frame_ptr@@Base>:
   12f4c:	push	{r4, r5, r6, r7, fp, lr}
   12f50:	add	fp, sp, #16
   12f54:	sub	sp, sp, #8
   12f58:	mov	r4, r0
   12f5c:	ldr	r0, [r0, #112]	; 0x70
   12f60:	add	r1, r1, #7
   12f64:	ldr	r7, [r4, #228]	; 0xe4
   12f68:	bic	r5, r1, #3
   12f6c:	add	r6, r4, #108	; 0x6c
   12f70:	add	r2, r7, r5
   12f74:	cmp	r2, r0
   12f78:	bls	12fa0 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   12f7c:	ldr	r0, [r4, #40]	; 0x28
   12f80:	ldr	ip, [r4, #48]	; 0x30
   12f84:	mov	r1, #7
   12f88:	mov	r3, #0
   12f8c:	str	r1, [sp]
   12f90:	mov	r1, r6
   12f94:	blx	ip
   12f98:	cmp	r0, #0
   12f9c:	bne	12fec <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   12fa0:	ldr	r0, [r6]
   12fa4:	adds	r6, r0, r7
   12fa8:	beq	12fdc <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   12fac:	mov	r0, r6
   12fb0:	mov	r1, #0
   12fb4:	mov	r2, r5
   12fb8:	bl	12484 <memset@plt>
   12fbc:	ldr	r0, [r4, #224]	; 0xe0
   12fc0:	str	r0, [r6], #4
   12fc4:	ldr	r0, [r4, #228]	; 0xe4
   12fc8:	add	r1, r0, #4
   12fcc:	add	r0, r0, r5
   12fd0:	str	r1, [r4, #224]	; 0xe0
   12fd4:	str	r0, [r4, #228]	; 0xe4
   12fd8:	b	12fe0 <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   12fdc:	mov	r6, #0
   12fe0:	mov	r0, r6
   12fe4:	sub	sp, fp, #16
   12fe8:	pop	{r4, r5, r6, r7, fp, pc}
   12fec:	movw	r0, #34344	; 0x8628
   12ff0:	movw	r1, #29826	; 0x7482
   12ff4:	movw	r3, #33890	; 0x8462
   12ff8:	mov	r2, #308	; 0x134
   12ffc:	movt	r0, #1
   13000:	movt	r1, #1
   13004:	movt	r3, #1
   13008:	bl	124b4 <__assert_fail@plt>

0001300c <flatcc_builder_enter_user_frame@@Base>:
   1300c:	push	{r4, r5, r6, r7, fp, lr}
   13010:	add	fp, sp, #16
   13014:	sub	sp, sp, #8
   13018:	mov	r4, r0
   1301c:	ldr	r0, [r0, #112]	; 0x70
   13020:	add	r1, r1, #7
   13024:	ldr	r7, [r4, #228]	; 0xe4
   13028:	bic	r5, r1, #3
   1302c:	add	r6, r4, #108	; 0x6c
   13030:	add	r2, r7, r5
   13034:	cmp	r2, r0
   13038:	bls	13060 <flatcc_builder_enter_user_frame@@Base+0x54>
   1303c:	ldr	r0, [r4, #40]	; 0x28
   13040:	ldr	ip, [r4, #48]	; 0x30
   13044:	mov	r1, #7
   13048:	mov	r3, #0
   1304c:	str	r1, [sp]
   13050:	mov	r1, r6
   13054:	blx	ip
   13058:	cmp	r0, #0
   1305c:	bne	130a8 <flatcc_builder_enter_user_frame@@Base+0x9c>
   13060:	ldr	r0, [r6]
   13064:	adds	r6, r0, r7
   13068:	beq	1309c <flatcc_builder_enter_user_frame@@Base+0x90>
   1306c:	mov	r0, r6
   13070:	mov	r1, #0
   13074:	mov	r2, r5
   13078:	bl	12484 <memset@plt>
   1307c:	ldr	r0, [r4, #224]	; 0xe0
   13080:	str	r0, [r6]
   13084:	ldr	r1, [r4, #228]	; 0xe4
   13088:	add	r0, r1, #4
   1308c:	add	r1, r1, r5
   13090:	str	r0, [r4, #224]	; 0xe0
   13094:	str	r1, [r4, #228]	; 0xe4
   13098:	b	130a0 <flatcc_builder_enter_user_frame@@Base+0x94>
   1309c:	mov	r0, #0
   130a0:	sub	sp, fp, #16
   130a4:	pop	{r4, r5, r6, r7, fp, pc}
   130a8:	movw	r0, #34344	; 0x8628
   130ac:	movw	r1, #29826	; 0x7482
   130b0:	movw	r3, #33890	; 0x8462
   130b4:	mov	r2, #308	; 0x134
   130b8:	movt	r0, #1
   130bc:	movt	r1, #1
   130c0:	movt	r3, #1
   130c4:	bl	124b4 <__assert_fail@plt>

000130c8 <flatcc_builder_exit_user_frame@@Base>:
   130c8:	ldr	r1, [r0, #224]	; 0xe0
   130cc:	cmp	r1, #0
   130d0:	subne	r2, r1, #4
   130d4:	strne	r2, [r0, #228]	; 0xe4
   130d8:	ldrne	r2, [r0, #108]	; 0x6c
   130dc:	addne	r1, r2, r1
   130e0:	ldrne	r1, [r1, #-4]
   130e4:	strne	r1, [r0, #224]	; 0xe0
   130e8:	movne	r0, r1
   130ec:	bxne	lr
   130f0:	push	{fp, lr}
   130f4:	mov	fp, sp
   130f8:	movw	r0, #29958	; 0x7506
   130fc:	movw	r1, #29826	; 0x7482
   13100:	movw	r3, #29983	; 0x751f
   13104:	movw	r2, #542	; 0x21e
   13108:	movt	r0, #1
   1310c:	movt	r1, #1
   13110:	movt	r3, #1
   13114:	bl	124b4 <__assert_fail@plt>

00013118 <flatcc_builder_exit_user_frame_at@@Base>:
   13118:	ldr	r2, [r0, #224]	; 0xe0
   1311c:	cmp	r2, r1
   13120:	bcc	1312c <flatcc_builder_exit_user_frame_at@@Base+0x14>
   13124:	str	r1, [r0, #224]	; 0xe0
   13128:	b	130c8 <flatcc_builder_exit_user_frame@@Base>
   1312c:	push	{fp, lr}
   13130:	mov	fp, sp
   13134:	movw	r0, #30041	; 0x7559
   13138:	movw	r1, #29826	; 0x7482
   1313c:	movw	r3, #30072	; 0x7578
   13140:	movw	r2, #551	; 0x227
   13144:	movt	r0, #1
   13148:	movt	r1, #1
   1314c:	movt	r3, #1
   13150:	bl	124b4 <__assert_fail@plt>

00013154 <flatcc_builder_get_current_user_frame@@Base>:
   13154:	ldr	r0, [r0, #224]	; 0xe0
   13158:	bx	lr

0001315c <flatcc_builder_get_user_frame_ptr@@Base>:
   1315c:	ldr	r0, [r0, #108]	; 0x6c
   13160:	add	r0, r0, r1
   13164:	bx	lr

00013168 <flatcc_builder_embed_buffer@@Base>:
   13168:	push	{r4, r5, r6, r7, fp, lr}
   1316c:	add	fp, sp, #16
   13170:	sub	sp, sp, #88	; 0x58
   13174:	mov	r4, r0
   13178:	ldr	r0, [fp, #8]
   1317c:	mov	r5, r3
   13180:	mov	r7, r2
   13184:	mov	r2, r1
   13188:	sub	r1, fp, #18
   1318c:	strh	r0, [fp, #-18]	; 0xffffffee
   13190:	mov	r0, r4
   13194:	ldr	r3, [r4, #152]	; 0x98
   13198:	cmp	r3, #0
   1319c:	movwne	r3, #1
   131a0:	bl	132d8 <flatcc_builder_embed_buffer@@Base+0x170>
   131a4:	ldr	r1, [fp, #12]
   131a8:	ldrh	r3, [fp, #-18]	; 0xffffffee
   131ac:	ldr	r0, [r4, #136]	; 0x88
   131b0:	mov	r2, #0
   131b4:	str	r2, [sp, #8]
   131b8:	str	r2, [sp, #12]
   131bc:	and	r1, r1, #2
   131c0:	sub	r3, r3, #1
   131c4:	add	r1, r5, r1, lsl #1
   131c8:	sub	r1, r0, r1
   131cc:	and	r3, r1, r3
   131d0:	add	r1, r3, r5
   131d4:	str	r1, [fp, #-24]	; 0xffffffe8
   131d8:	ldr	r1, [r4, #152]	; 0x98
   131dc:	cmp	r1, #0
   131e0:	mov	r1, #0
   131e4:	beq	13204 <flatcc_builder_embed_buffer@@Base+0x9c>
   131e8:	sub	r1, fp, #24
   131ec:	mov	r2, #1
   131f0:	str	r1, [sp, #16]
   131f4:	mov	r1, #4
   131f8:	str	r1, [sp, #8]
   131fc:	str	r1, [sp, #20]
   13200:	str	r2, [sp, #12]
   13204:	cmp	r5, #0
   13208:	beq	1322c <flatcc_builder_embed_buffer@@Base+0xc4>
   1320c:	add	r6, sp, #8
   13210:	add	r1, r1, r5
   13214:	add	r6, r6, r2, lsl #3
   13218:	add	r2, r2, #1
   1321c:	str	r1, [sp, #8]
   13220:	str	r7, [r6, #8]
   13224:	str	r5, [r6, #12]
   13228:	str	r2, [sp, #12]
   1322c:	cmp	r3, #0
   13230:	beq	1325c <flatcc_builder_embed_buffer@@Base+0xf4>
   13234:	add	r7, sp, #8
   13238:	movw	r6, #29296	; 0x7270
   1323c:	add	r1, r1, r3
   13240:	add	r7, r7, r2, lsl #3
   13244:	add	r2, r2, #1
   13248:	movt	r6, #1
   1324c:	str	r1, [sp, #8]
   13250:	str	r6, [r7, #8]
   13254:	str	r3, [r7, #12]
   13258:	str	r2, [sp, #12]
   1325c:	cmp	r1, #0
   13260:	ble	132b8 <flatcc_builder_embed_buffer@@Base+0x150>
   13264:	sub	r5, r0, r1
   13268:	ldr	r0, [r4, #36]	; 0x24
   1326c:	ldr	r7, [r4, #44]	; 0x2c
   13270:	str	r1, [sp]
   13274:	add	r1, sp, #8
   13278:	add	r1, r1, #8
   1327c:	mov	r3, r5
   13280:	blx	r7
   13284:	cmp	r0, #0
   13288:	streq	r5, [r4, #136]	; 0x88
   1328c:	moveq	r0, r5
   13290:	subeq	sp, fp, #16
   13294:	popeq	{r4, r5, r6, r7, fp, pc}
   13298:	movw	r0, #34344	; 0x8628
   1329c:	movw	r1, #29826	; 0x7482
   132a0:	movw	r3, #34023	; 0x84e7
   132a4:	movw	r2, #651	; 0x28b
   132a8:	movt	r0, #1
   132ac:	movt	r1, #1
   132b0:	movt	r3, #1
   132b4:	bl	124b4 <__assert_fail@plt>
   132b8:	movw	r0, #34344	; 0x8628
   132bc:	movw	r1, #29826	; 0x7482
   132c0:	movw	r3, #34023	; 0x84e7
   132c4:	movw	r2, #647	; 0x287
   132c8:	movt	r0, #1
   132cc:	movt	r1, #1
   132d0:	movt	r3, #1
   132d4:	bl	124b4 <__assert_fail@plt>
   132d8:	push	{r4, sl, fp, lr}
   132dc:	add	fp, sp, #8
   132e0:	sub	sp, sp, #80	; 0x50
   132e4:	cmp	r2, #0
   132e8:	bne	132f8 <flatcc_builder_embed_buffer@@Base+0x190>
   132ec:	ldrh	r2, [r0, #132]	; 0x84
   132f0:	cmp	r2, #0
   132f4:	movweq	r2, #1
   132f8:	ldrh	r4, [r1]
   132fc:	cmp	r4, #4
   13300:	movwcc	r4, #4
   13304:	cmpcs	r4, r2
   13308:	bcs	13318 <flatcc_builder_embed_buffer@@Base+0x1b0>
   1330c:	cmp	r4, r2
   13310:	movcc	r4, r2
   13314:	strh	r4, [r1]
   13318:	cmp	r3, #0
   1331c:	bne	13390 <flatcc_builder_embed_buffer@@Base+0x228>
   13320:	ldr	r4, [r0, #140]	; 0x8c
   13324:	sub	r1, r2, #1
   13328:	ands	r1, r4, r1
   1332c:	beq	13390 <flatcc_builder_embed_buffer@@Base+0x228>
   13330:	movw	r2, #29296	; 0x7270
   13334:	cmn	r1, #1
   13338:	movt	r2, #1
   1333c:	str	r2, [sp, #16]
   13340:	mov	r2, #1
   13344:	str	r1, [sp, #8]
   13348:	str	r1, [sp, #20]
   1334c:	str	r2, [sp, #12]
   13350:	add	r2, r1, r4
   13354:	str	r2, [r0, #140]	; 0x8c
   13358:	ble	13398 <flatcc_builder_embed_buffer@@Base+0x230>
   1335c:	ldr	r2, [r0, #36]	; 0x24
   13360:	ldr	ip, [r0, #44]	; 0x2c
   13364:	add	r0, sp, #8
   13368:	str	r1, [sp]
   1336c:	mov	r3, r4
   13370:	add	r1, r0, #8
   13374:	mov	r0, r2
   13378:	mov	r2, #1
   1337c:	blx	ip
   13380:	cmp	r0, #0
   13384:	bne	133b8 <flatcc_builder_embed_buffer@@Base+0x250>
   13388:	cmn	r4, #1
   1338c:	beq	133d8 <flatcc_builder_embed_buffer@@Base+0x270>
   13390:	sub	sp, fp, #8
   13394:	pop	{r4, sl, fp, pc}
   13398:	movw	r0, #34344	; 0x8628
   1339c:	movw	r1, #29826	; 0x7482
   133a0:	movw	r3, #34211	; 0x85a3
   133a4:	movw	r2, #673	; 0x2a1
   133a8:	movt	r0, #1
   133ac:	movt	r1, #1
   133b0:	movt	r3, #1
   133b4:	bl	124b4 <__assert_fail@plt>
   133b8:	movw	r0, #34344	; 0x8628
   133bc:	movw	r1, #29826	; 0x7482
   133c0:	movw	r3, #34211	; 0x85a3
   133c4:	movw	r2, #677	; 0x2a5
   133c8:	movt	r0, #1
   133cc:	movt	r1, #1
   133d0:	movt	r3, #1
   133d4:	bl	124b4 <__assert_fail@plt>
   133d8:	movw	r0, #34344	; 0x8628
   133dc:	movw	r1, #29826	; 0x7482
   133e0:	movw	r3, #33957	; 0x84a5
   133e4:	movw	r2, #702	; 0x2be
   133e8:	movt	r0, #1
   133ec:	movt	r1, #1
   133f0:	movt	r3, #1
   133f4:	bl	124b4 <__assert_fail@plt>

000133f8 <flatcc_builder_create_buffer@@Base>:
   133f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133fc:	add	fp, sp, #28
   13400:	sub	sp, sp, #100	; 0x64
   13404:	ldr	r8, [fp, #12]
   13408:	mov	r4, r0
   1340c:	ldr	r0, [fp, #8]
   13410:	mov	r7, r1
   13414:	mov	r5, #0
   13418:	mov	r9, r3
   1341c:	sub	r1, fp, #30
   13420:	str	r5, [sp, #12]
   13424:	and	r6, r8, #1
   13428:	strh	r0, [fp, #-30]	; 0xffffffe2
   1342c:	mov	r0, r4
   13430:	mov	r3, r6
   13434:	bl	132d8 <flatcc_builder_embed_buffer@@Base+0x170>
   13438:	ldrh	r0, [r4, #128]	; 0x80
   1343c:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   13440:	cmp	r0, r1
   13444:	strhcc	r1, [r4, #128]	; 0x80
   13448:	cmp	r7, #0
   1344c:	stmib	sp, {r6, r9}
   13450:	beq	1346c <flatcc_builder_create_buffer@@Base+0x74>
   13454:	ldr	r5, [r7]
   13458:	cmp	r5, #0
   1345c:	str	r5, [sp, #12]
   13460:	movwne	r5, #1
   13464:	lsl	r7, r5, #2
   13468:	b	13470 <flatcc_builder_create_buffer@@Base+0x78>
   1346c:	mov	r7, #0
   13470:	ldr	r9, [r4, #136]	; 0x88
   13474:	mov	sl, #4
   13478:	mvn	r6, #3
   1347c:	mov	r3, #0
   13480:	ands	ip, r8, #3
   13484:	and	r2, sl, r8, lsl #1
   13488:	str	r3, [sp, #20]
   1348c:	str	r3, [sp, #16]
   13490:	sub	r2, r6, r2
   13494:	sub	r6, r1, #1
   13498:	mov	r1, #4
   1349c:	add	r2, r2, r9
   134a0:	sub	r2, r2, r7
   134a4:	beq	134c8 <flatcc_builder_create_buffer@@Base+0xd0>
   134a8:	sub	r1, fp, #40	; 0x28
   134ac:	mov	r3, #1
   134b0:	str	r1, [sp, #24]
   134b4:	mov	r1, #4
   134b8:	str	r1, [sp, #16]
   134bc:	str	r1, [sp, #28]
   134c0:	mov	r1, #8
   134c4:	str	r3, [sp, #20]
   134c8:	add	lr, sp, #16
   134cc:	and	r6, r2, r6
   134d0:	sub	r0, fp, #36	; 0x24
   134d4:	str	r1, [sp, #16]
   134d8:	cmp	r5, #0
   134dc:	add	r2, lr, r3, lsl #3
   134e0:	str	r0, [r2, #8]
   134e4:	str	sl, [r2, #12]
   134e8:	add	r2, r3, #1
   134ec:	str	r2, [sp, #20]
   134f0:	beq	13514 <flatcc_builder_create_buffer@@Base+0x11c>
   134f4:	add	r1, r1, r7
   134f8:	add	r0, lr, r2, lsl #3
   134fc:	add	r2, sp, #12
   13500:	str	r1, [sp, #16]
   13504:	str	r2, [r0, #8]
   13508:	orr	r2, r3, #2
   1350c:	str	r7, [r0, #12]
   13510:	str	r2, [sp, #20]
   13514:	cmp	r6, #0
   13518:	beq	13540 <flatcc_builder_create_buffer@@Base+0x148>
   1351c:	movw	r3, #29296	; 0x7270
   13520:	add	r1, r1, r6
   13524:	add	r0, lr, r2, lsl #3
   13528:	add	r2, r2, #1
   1352c:	movt	r3, #1
   13530:	str	r1, [sp, #16]
   13534:	str	r3, [r0, #8]
   13538:	str	r6, [r0, #12]
   1353c:	str	r2, [sp, #20]
   13540:	ldr	r5, [sp, #4]
   13544:	sub	r7, r9, r1
   13548:	cmp	ip, #0
   1354c:	mov	r6, #144	; 0x90
   13550:	ldr	r3, [sp, #8]
   13554:	mov	r0, r7
   13558:	addne	r0, r0, #4
   1355c:	cmp	r5, #0
   13560:	sub	r3, r3, r0
   13564:	movweq	r6, #140	; 0x8c
   13568:	cmp	r1, #0
   1356c:	ldr	r6, [r4, r6]
   13570:	str	r3, [fp, #-36]	; 0xffffffdc
   13574:	sub	r0, r6, r0
   13578:	str	r0, [fp, #-40]	; 0xffffffd8
   1357c:	ble	135d4 <flatcc_builder_create_buffer@@Base+0x1dc>
   13580:	ldr	r0, [r4, #36]	; 0x24
   13584:	ldr	r6, [r4, #44]	; 0x2c
   13588:	str	r1, [sp]
   1358c:	add	r1, lr, #8
   13590:	mov	r3, r7
   13594:	blx	r6
   13598:	cmp	r0, #0
   1359c:	bne	135f4 <flatcc_builder_create_buffer@@Base+0x1fc>
   135a0:	cmp	r7, #0
   135a4:	str	r7, [r4, #136]	; 0x88
   135a8:	movne	r0, r7
   135ac:	subne	sp, fp, #28
   135b0:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135b4:	movw	r0, #34344	; 0x8628
   135b8:	movw	r1, #29826	; 0x7482
   135bc:	movw	r3, #30141	; 0x75bd
   135c0:	mov	r2, #772	; 0x304
   135c4:	movt	r0, #1
   135c8:	movt	r1, #1
   135cc:	movt	r3, #1
   135d0:	bl	124b4 <__assert_fail@plt>
   135d4:	movw	r0, #34344	; 0x8628
   135d8:	movw	r1, #29826	; 0x7482
   135dc:	movw	r3, #34023	; 0x84e7
   135e0:	movw	r2, #647	; 0x287
   135e4:	movt	r0, #1
   135e8:	movt	r1, #1
   135ec:	movt	r3, #1
   135f0:	bl	124b4 <__assert_fail@plt>
   135f4:	movw	r0, #34344	; 0x8628
   135f8:	movw	r1, #29826	; 0x7482
   135fc:	movw	r3, #34023	; 0x84e7
   13600:	movw	r2, #651	; 0x28b
   13604:	movt	r0, #1
   13608:	movt	r1, #1
   1360c:	movt	r3, #1
   13610:	bl	124b4 <__assert_fail@plt>

00013614 <flatcc_builder_create_struct@@Base>:
   13614:	push	{r4, r5, r6, sl, fp, lr}
   13618:	add	fp, sp, #16
   1361c:	sub	sp, sp, #80	; 0x50
   13620:	cmp	r3, #0
   13624:	beq	136fc <flatcc_builder_create_struct@@Base+0xe8>
   13628:	mov	r5, r0
   1362c:	ldrh	r0, [r0, #128]	; 0x80
   13630:	mov	r4, #0
   13634:	cmp	r0, r3
   13638:	strhcc	r3, [r5, #128]	; 0x80
   1363c:	sub	r3, r3, #1
   13640:	cmp	r2, #0
   13644:	ldr	r0, [r5, #136]	; 0x88
   13648:	str	r4, [sp, #12]
   1364c:	str	r4, [sp, #8]
   13650:	movne	r4, #1
   13654:	strne	r1, [sp, #16]
   13658:	strne	r2, [sp, #8]
   1365c:	strne	r2, [sp, #20]
   13660:	strne	r4, [sp, #12]
   13664:	sub	r6, r0, r2
   13668:	and	r3, r6, r3
   1366c:	cmp	r3, #0
   13670:	beq	1369c <flatcc_builder_create_struct@@Base+0x88>
   13674:	add	r1, sp, #8
   13678:	movw	r6, #29296	; 0x7270
   1367c:	add	r2, r3, r2
   13680:	add	r1, r1, r4, lsl #3
   13684:	add	r4, r4, #1
   13688:	movt	r6, #1
   1368c:	str	r2, [sp, #8]
   13690:	str	r6, [r1, #8]
   13694:	str	r3, [r1, #12]
   13698:	str	r4, [sp, #12]
   1369c:	cmp	r2, #0
   136a0:	ble	1371c <flatcc_builder_create_struct@@Base+0x108>
   136a4:	sub	r6, r0, r2
   136a8:	ldr	r0, [r5, #36]	; 0x24
   136ac:	ldr	ip, [r5, #44]	; 0x2c
   136b0:	add	r1, sp, #8
   136b4:	str	r2, [sp]
   136b8:	mov	r2, r4
   136bc:	add	r1, r1, #8
   136c0:	mov	r3, r6
   136c4:	blx	ip
   136c8:	cmp	r0, #0
   136cc:	streq	r6, [r5, #136]	; 0x88
   136d0:	moveq	r0, r6
   136d4:	subeq	sp, fp, #16
   136d8:	popeq	{r4, r5, r6, sl, fp, pc}
   136dc:	movw	r0, #34344	; 0x8628
   136e0:	movw	r1, #29826	; 0x7482
   136e4:	movw	r3, #34023	; 0x84e7
   136e8:	movw	r2, #651	; 0x28b
   136ec:	movt	r0, #1
   136f0:	movt	r1, #1
   136f4:	movt	r3, #1
   136f8:	bl	124b4 <__assert_fail@plt>
   136fc:	movw	r0, #30272	; 0x7640
   13700:	movw	r1, #29826	; 0x7482
   13704:	movw	r3, #30283	; 0x764b
   13708:	movw	r2, #783	; 0x30f
   1370c:	movt	r0, #1
   13710:	movt	r1, #1
   13714:	movt	r3, #1
   13718:	bl	124b4 <__assert_fail@plt>
   1371c:	movw	r0, #34344	; 0x8628
   13720:	movw	r1, #29826	; 0x7482
   13724:	movw	r3, #34023	; 0x84e7
   13728:	movw	r2, #647	; 0x287
   1372c:	movt	r0, #1
   13730:	movt	r1, #1
   13734:	movt	r3, #1
   13738:	bl	124b4 <__assert_fail@plt>

0001373c <flatcc_builder_start_buffer@@Base>:
   1373c:	push	{r4, r5, r6, r7, fp, lr}
   13740:	add	fp, sp, #16
   13744:	mov	r5, r1
   13748:	ldrh	r1, [r0, #128]	; 0x80
   1374c:	mov	r6, r3
   13750:	mov	r7, r2
   13754:	mov	r4, r0
   13758:	bl	137f8 <flatcc_builder_start_buffer@@Base+0xbc>
   1375c:	mov	r1, r0
   13760:	mvn	r0, #0
   13764:	cmp	r1, #0
   13768:	popne	{r4, r5, r6, r7, fp, pc}
   1376c:	mov	r0, #1
   13770:	cmp	r5, #0
   13774:	strh	r0, [r4, #128]	; 0x80
   13778:	ldrh	r1, [r4, #132]	; 0x84
   1377c:	ldr	r2, [r4, #32]
   13780:	strh	r1, [r2, #34]	; 0x22
   13784:	strh	r7, [r4, #132]	; 0x84
   13788:	ldrh	r1, [r4, #164]	; 0xa4
   1378c:	ldr	r2, [r4, #32]
   13790:	strh	r1, [r2, #32]
   13794:	strh	r6, [r4, #164]	; 0xa4
   13798:	ldr	r1, [r4, #32]
   1379c:	ldr	r2, [r4, #144]	; 0x90
   137a0:	str	r2, [r1, #20]
   137a4:	ldr	r1, [r4, #32]
   137a8:	ldr	r2, [r4, #152]	; 0x98
   137ac:	str	r2, [r1, #28]
   137b0:	ldr	r3, [r4, #148]	; 0x94
   137b4:	ldr	r1, [r4, #32]
   137b8:	ldr	r2, [r4, #136]	; 0x88
   137bc:	ldr	r7, [r4, #168]	; 0xa8
   137c0:	add	r6, r3, #1
   137c4:	str	r2, [r4, #144]	; 0x90
   137c8:	str	r6, [r4, #148]	; 0x94
   137cc:	str	r3, [r4, #152]	; 0x98
   137d0:	str	r7, [r1, #16]
   137d4:	movw	r1, #29296	; 0x7270
   137d8:	movt	r1, #1
   137dc:	movne	r1, r5
   137e0:	ldr	r1, [r1]
   137e4:	str	r1, [r4, #168]	; 0xa8
   137e8:	ldr	r1, [r4, #32]
   137ec:	strh	r0, [r1, #14]
   137f0:	mov	r0, #0
   137f4:	pop	{r4, r5, r6, r7, fp, pc}
   137f8:	push	{r4, r5, r6, r7, fp, lr}
   137fc:	add	fp, sp, #16
   13800:	sub	sp, sp, #8
   13804:	mov	r5, r1
   13808:	ldr	r1, [r0, #156]	; 0x9c
   1380c:	ldr	r2, [r0, #160]	; 0xa0
   13810:	mov	r4, r0
   13814:	add	r0, r1, #1
   13818:	cmp	r1, r2
   1381c:	str	r0, [r4, #156]	; 0x9c
   13820:	bge	13834 <flatcc_builder_start_buffer@@Base+0xf8>
   13824:	ldr	r0, [r4, #32]
   13828:	add	r0, r0, #36	; 0x24
   1382c:	str	r0, [r4, #32]
   13830:	b	138c8 <flatcc_builder_start_buffer@@Base+0x18c>
   13834:	ldr	r2, [r4, #176]	; 0xb0
   13838:	mvn	r6, #0
   1383c:	cmp	r2, #1
   13840:	cmpge	r1, r2
   13844:	bge	13900 <flatcc_builder_start_buffer@@Base+0x1c4>
   13848:	add	r7, r0, r0, lsl #3
   1384c:	ldr	r0, [r4, #88]	; 0x58
   13850:	lsl	r2, r7, #2
   13854:	cmp	r2, r0
   13858:	bls	13880 <flatcc_builder_start_buffer@@Base+0x144>
   1385c:	ldr	r0, [r4, #40]	; 0x28
   13860:	ldr	ip, [r4, #48]	; 0x30
   13864:	mov	r3, #4
   13868:	add	r1, r4, #84	; 0x54
   1386c:	str	r3, [sp]
   13870:	mov	r3, #0
   13874:	blx	ip
   13878:	cmp	r0, #0
   1387c:	bne	1390c <flatcc_builder_start_buffer@@Base+0x1d0>
   13880:	ldr	r1, [r4, #84]	; 0x54
   13884:	mvn	r0, #35	; 0x23
   13888:	add	r0, r0, r7, lsl #2
   1388c:	adds	r0, r0, r1
   13890:	str	r0, [r4, #32]
   13894:	beq	13900 <flatcc_builder_start_buffer@@Base+0x1c4>
   13898:	ldr	r1, [r4, #88]	; 0x58
   1389c:	movw	r3, #36409	; 0x8e39
   138a0:	ldr	r2, [r4, #176]	; 0xb0
   138a4:	movt	r3, #14563	; 0x38e3
   138a8:	umull	r1, r3, r1, r3
   138ac:	lsr	r1, r3, #3
   138b0:	cmp	r2, r3, lsr #3
   138b4:	mov	r3, r1
   138b8:	movlt	r3, r2
   138bc:	cmp	r2, #0
   138c0:	movle	r3, r1
   138c4:	str	r3, [r4, #160]	; 0xa0
   138c8:	ldr	r1, [r4, #20]
   138cc:	mvn	r3, #3
   138d0:	mov	r6, #0
   138d4:	str	r1, [r0, #8]
   138d8:	ldrh	r2, [r4, #130]	; 0x82
   138dc:	strh	r2, [r0, #12]
   138e0:	strh	r5, [r4, #130]	; 0x82
   138e4:	ldr	r2, [r4, #28]
   138e8:	stm	r0, {r2, r3}
   138ec:	add	r0, r1, r2
   138f0:	str	r6, [r4, #20]
   138f4:	add	r0, r0, #7
   138f8:	bic	r0, r0, #7
   138fc:	str	r0, [r4, #28]
   13900:	mov	r0, r6
   13904:	sub	sp, fp, #16
   13908:	pop	{r4, r5, r6, r7, fp, pc}
   1390c:	movw	r0, #34344	; 0x8628
   13910:	movw	r1, #29826	; 0x7482
   13914:	movw	r3, #33890	; 0x8462
   13918:	mov	r2, #308	; 0x134
   1391c:	movt	r0, #1
   13920:	movt	r1, #1
   13924:	movt	r3, #1
   13928:	bl	124b4 <__assert_fail@plt>

0001392c <flatcc_builder_end_buffer@@Base>:
   1392c:	push	{r4, r5, r6, sl, fp, lr}
   13930:	add	fp, sp, #16
   13934:	sub	sp, sp, #8
   13938:	mov	r4, r0
   1393c:	ldr	r0, [r0, #32]
   13940:	ldrh	r0, [r0, #14]
   13944:	cmp	r0, #1
   13948:	bne	13a3c <flatcc_builder_end_buffer@@Base+0x110>
   1394c:	mov	r3, r1
   13950:	ldr	r1, [r4, #152]	; 0x98
   13954:	ldrh	r0, [r4, #164]	; 0xa4
   13958:	ldrh	r2, [r4, #132]	; 0x84
   1395c:	cmp	r1, #0
   13960:	ldrh	r1, [r4, #128]	; 0x80
   13964:	and	r0, r0, #2
   13968:	orrne	r0, r0, #1
   1396c:	cmp	r1, r2
   13970:	movcc	r1, r2
   13974:	strhcc	r2, [r4, #128]	; 0x80
   13978:	str	r0, [sp, #4]
   1397c:	mov	r0, r4
   13980:	str	r1, [sp]
   13984:	add	r1, r4, #168	; 0xa8
   13988:	bl	133f8 <flatcc_builder_create_buffer@@Base>
   1398c:	mov	r6, r0
   13990:	cmp	r0, #0
   13994:	beq	13a30 <flatcc_builder_end_buffer@@Base+0x104>
   13998:	ldr	r1, [r4, #32]
   1399c:	ldr	r0, [r4, #16]
   139a0:	ldr	r2, [r4, #20]
   139a4:	ldr	r3, [r1, #20]
   139a8:	str	r3, [r4, #144]	; 0x90
   139ac:	ldr	r3, [r1, #28]
   139b0:	str	r3, [r4, #152]	; 0x98
   139b4:	ldr	r3, [r1, #16]
   139b8:	str	r3, [r4, #168]	; 0xa8
   139bc:	ldrh	r1, [r1, #32]
   139c0:	strh	r1, [r4, #164]	; 0xa4
   139c4:	mov	r1, #0
   139c8:	bl	12484 <memset@plt>
   139cc:	ldr	r0, [r4, #32]
   139d0:	ldr	r1, [r4, #60]	; 0x3c
   139d4:	ldr	r2, [r4, #64]	; 0x40
   139d8:	ldr	r3, [r0, #8]
   139dc:	str	r3, [r4, #20]
   139e0:	ldr	r3, [r0]
   139e4:	str	r3, [r4, #28]
   139e8:	add	r1, r1, r3
   139ec:	ldr	r5, [r0, #4]
   139f0:	str	r1, [r4, #16]
   139f4:	sub	r1, r2, r3
   139f8:	cmp	r1, r5
   139fc:	movhi	r1, r5
   13a00:	str	r1, [r4, #24]
   13a04:	ldrh	r1, [r4, #130]	; 0x82
   13a08:	ldrh	r2, [r4, #128]	; 0x80
   13a0c:	cmp	r2, r1
   13a10:	strhcc	r1, [r4, #128]	; 0x80
   13a14:	ldrh	r1, [r0, #12]
   13a18:	sub	r0, r0, #36	; 0x24
   13a1c:	str	r0, [r4, #32]
   13a20:	strh	r1, [r4, #130]	; 0x82
   13a24:	ldr	r0, [r4, #156]	; 0x9c
   13a28:	sub	r0, r0, #1
   13a2c:	str	r0, [r4, #156]	; 0x9c
   13a30:	mov	r0, r6
   13a34:	sub	sp, fp, #16
   13a38:	pop	{r4, r5, r6, sl, fp, pc}
   13a3c:	movw	r0, #30385	; 0x76b1
   13a40:	movw	r1, #29826	; 0x7482
   13a44:	movw	r3, #30429	; 0x76dd
   13a48:	movw	r2, #838	; 0x346
   13a4c:	movt	r0, #1
   13a50:	movt	r1, #1
   13a54:	movt	r3, #1
   13a58:	bl	124b4 <__assert_fail@plt>

00013a5c <flatcc_builder_start_struct@@Base>:
   13a5c:	push	{r4, r5, r6, r7, fp, lr}
   13a60:	add	fp, sp, #16
   13a64:	mov	r6, r1
   13a68:	mov	r1, r2
   13a6c:	mov	r4, r0
   13a70:	bl	137f8 <flatcc_builder_start_buffer@@Base+0xbc>
   13a74:	mov	r5, #0
   13a78:	cmp	r0, #0
   13a7c:	bne	13aec <flatcc_builder_start_struct@@Base+0x90>
   13a80:	ldr	r1, [r4, #32]
   13a84:	mov	r0, #2
   13a88:	strh	r0, [r1, #14]
   13a8c:	ldr	r2, [r4, #28]
   13a90:	ldr	r0, [r4, #60]	; 0x3c
   13a94:	ldr	r3, [r4, #64]	; 0x40
   13a98:	add	r0, r0, r2
   13a9c:	sub	r2, r3, r2
   13aa0:	mvn	r3, #3
   13aa4:	cmn	r2, #4
   13aa8:	str	r0, [r4, #16]
   13aac:	movcs	r2, r3
   13ab0:	str	r2, [r4, #24]
   13ab4:	str	r3, [r1, #4]
   13ab8:	ldr	r7, [r4, #20]
   13abc:	add	r1, r7, r6
   13ac0:	cmp	r1, r2
   13ac4:	str	r1, [r4, #20]
   13ac8:	bcc	13ae8 <flatcc_builder_start_struct@@Base+0x8c>
   13acc:	add	r1, r1, #1
   13ad0:	mov	r0, r4
   13ad4:	mvn	r2, #3
   13ad8:	bl	16948 <flatcc_builder_get_emit_context@@Base+0x8>
   13adc:	cmp	r0, #0
   13ae0:	bne	13aec <flatcc_builder_start_struct@@Base+0x90>
   13ae4:	ldr	r0, [r4, #16]
   13ae8:	add	r5, r0, r7
   13aec:	mov	r0, r5
   13af0:	pop	{r4, r5, r6, r7, fp, pc}

00013af4 <flatcc_builder_struct_edit@@Base>:
   13af4:	ldr	r0, [r0, #16]
   13af8:	bx	lr

00013afc <flatcc_builder_end_struct@@Base>:
   13afc:	push	{r4, r5, fp, lr}
   13b00:	add	fp, sp, #8
   13b04:	mov	r4, r0
   13b08:	ldr	r0, [r0, #32]
   13b0c:	ldrh	r0, [r0, #14]
   13b10:	cmp	r0, #2
   13b14:	bne	13bb4 <flatcc_builder_end_struct@@Base+0xb8>
   13b18:	ldrh	r3, [r4, #130]	; 0x82
   13b1c:	ldr	r1, [r4, #16]
   13b20:	ldr	r2, [r4, #20]
   13b24:	mov	r0, r4
   13b28:	bl	13614 <flatcc_builder_create_struct@@Base>
   13b2c:	mov	r5, r0
   13b30:	cmp	r0, #0
   13b34:	beq	13bac <flatcc_builder_end_struct@@Base+0xb0>
   13b38:	ldr	r0, [r4, #16]
   13b3c:	ldr	r2, [r4, #20]
   13b40:	mov	r1, #0
   13b44:	bl	12484 <memset@plt>
   13b48:	ldr	r0, [r4, #32]
   13b4c:	ldr	r1, [r4, #60]	; 0x3c
   13b50:	ldr	ip, [r4, #64]	; 0x40
   13b54:	ldr	r3, [r0, #8]
   13b58:	str	r3, [r4, #20]
   13b5c:	ldr	r3, [r0]
   13b60:	str	r3, [r4, #28]
   13b64:	add	r1, r1, r3
   13b68:	ldr	r2, [r0, #4]
   13b6c:	str	r1, [r4, #16]
   13b70:	sub	r1, ip, r3
   13b74:	cmp	r1, r2
   13b78:	movhi	r1, r2
   13b7c:	str	r1, [r4, #24]
   13b80:	ldrh	r1, [r4, #130]	; 0x82
   13b84:	ldrh	r2, [r4, #128]	; 0x80
   13b88:	cmp	r2, r1
   13b8c:	strhcc	r1, [r4, #128]	; 0x80
   13b90:	ldrh	r1, [r0, #12]
   13b94:	sub	r0, r0, #36	; 0x24
   13b98:	str	r0, [r4, #32]
   13b9c:	strh	r1, [r4, #130]	; 0x82
   13ba0:	ldr	r0, [r4, #156]	; 0x9c
   13ba4:	sub	r0, r0, #1
   13ba8:	str	r0, [r4, #156]	; 0x9c
   13bac:	mov	r0, r5
   13bb0:	pop	{r4, r5, fp, pc}
   13bb4:	movw	r0, #30518	; 0x7736
   13bb8:	movw	r1, #29826	; 0x7482
   13bbc:	movw	r3, #30562	; 0x7762
   13bc0:	mov	r2, #872	; 0x368
   13bc4:	movt	r0, #1
   13bc8:	movt	r1, #1
   13bcc:	movt	r3, #1
   13bd0:	bl	124b4 <__assert_fail@plt>

00013bd4 <flatcc_builder_extend_vector@@Base>:
   13bd4:	push	{r4, r5, fp, lr}
   13bd8:	add	fp, sp, #8
   13bdc:	mov	r4, r0
   13be0:	ldr	r0, [r0, #32]
   13be4:	ldr	r2, [r0, #20]
   13be8:	adds	r2, r2, r1
   13bec:	bcs	13c4c <flatcc_builder_extend_vector@@Base+0x78>
   13bf0:	ldr	r3, [r0, #24]
   13bf4:	cmp	r2, r3
   13bf8:	bhi	13c4c <flatcc_builder_extend_vector@@Base+0x78>
   13bfc:	str	r2, [r0, #20]
   13c00:	ldr	r0, [r4, #32]
   13c04:	ldr	r5, [r4, #20]
   13c08:	ldr	r2, [r4, #24]
   13c0c:	ldr	r0, [r0, #16]
   13c10:	mla	r0, r0, r1, r5
   13c14:	cmp	r0, r2
   13c18:	str	r0, [r4, #20]
   13c1c:	bcc	13c40 <flatcc_builder_extend_vector@@Base+0x6c>
   13c20:	add	r1, r0, #1
   13c24:	mov	r0, r4
   13c28:	mvn	r2, #3
   13c2c:	bl	16948 <flatcc_builder_get_emit_context@@Base+0x8>
   13c30:	mov	r1, r0
   13c34:	mov	r0, #0
   13c38:	cmp	r1, #0
   13c3c:	popne	{r4, r5, fp, pc}
   13c40:	ldr	r0, [r4, #16]
   13c44:	add	r0, r0, r5
   13c48:	pop	{r4, r5, fp, pc}
   13c4c:	movw	r0, #34097	; 0x8531
   13c50:	movw	r1, #29826	; 0x7482
   13c54:	movw	r3, #34124	; 0x854c
   13c58:	mov	r2, #892	; 0x37c
   13c5c:	movt	r0, #1
   13c60:	movt	r1, #1
   13c64:	movt	r3, #1
   13c68:	bl	124b4 <__assert_fail@plt>

00013c6c <flatcc_builder_vector_push@@Base>:
   13c6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13c70:	add	fp, sp, #24
   13c74:	mov	r5, r0
   13c78:	ldr	r0, [r0, #32]
   13c7c:	mov	r8, r1
   13c80:	ldrh	r1, [r0, #14]
   13c84:	cmp	r1, #4
   13c88:	bne	13d0c <flatcc_builder_vector_push@@Base+0xa0>
   13c8c:	ldr	r1, [r0, #20]
   13c90:	ldr	r2, [r0, #24]
   13c94:	cmp	r1, r2
   13c98:	bhi	13d2c <flatcc_builder_vector_push@@Base+0xc0>
   13c9c:	add	r1, r1, #1
   13ca0:	str	r1, [r0, #20]
   13ca4:	ldr	r0, [r5, #32]
   13ca8:	ldr	r4, [r5, #20]
   13cac:	ldr	r1, [r5, #24]
   13cb0:	ldr	r6, [r0, #16]
   13cb4:	add	r0, r4, r6
   13cb8:	cmp	r0, r1
   13cbc:	str	r0, [r5, #20]
   13cc0:	bcc	13ce0 <flatcc_builder_vector_push@@Base+0x74>
   13cc4:	add	r1, r0, #1
   13cc8:	mov	r0, r5
   13ccc:	mvn	r2, #3
   13cd0:	bl	16948 <flatcc_builder_get_emit_context@@Base+0x8>
   13cd4:	mov	r7, #0
   13cd8:	cmp	r0, #0
   13cdc:	bne	13d04 <flatcc_builder_vector_push@@Base+0x98>
   13ce0:	ldr	r0, [r5, #16]
   13ce4:	adds	r7, r0, r4
   13ce8:	beq	13d00 <flatcc_builder_vector_push@@Base+0x94>
   13cec:	mov	r0, r7
   13cf0:	mov	r1, r8
   13cf4:	mov	r2, r6
   13cf8:	bl	12400 <memcpy@plt>
   13cfc:	b	13d04 <flatcc_builder_vector_push@@Base+0x98>
   13d00:	mov	r7, #0
   13d04:	mov	r0, r7
   13d08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13d0c:	movw	r0, #30629	; 0x77a5
   13d10:	movw	r1, #29826	; 0x7482
   13d14:	movw	r3, #30673	; 0x77d1
   13d18:	movw	r2, #907	; 0x38b
   13d1c:	movt	r0, #1
   13d20:	movt	r1, #1
   13d24:	movt	r3, #1
   13d28:	bl	124b4 <__assert_fail@plt>
   13d2c:	movw	r0, #30740	; 0x7814
   13d30:	movw	r1, #29826	; 0x7482
   13d34:	movw	r3, #30673	; 0x77d1
   13d38:	mov	r2, #908	; 0x38c
   13d3c:	movt	r0, #1
   13d40:	movt	r1, #1
   13d44:	movt	r3, #1
   13d48:	bl	124b4 <__assert_fail@plt>

00013d4c <flatcc_builder_append_vector@@Base>:
   13d4c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13d50:	add	fp, sp, #24
   13d54:	mov	r6, r0
   13d58:	ldr	r0, [r0, #32]
   13d5c:	mov	r8, r1
   13d60:	ldrh	r1, [r0, #14]
   13d64:	cmp	r1, #4
   13d68:	bne	13e14 <flatcc_builder_append_vector@@Base+0xc8>
   13d6c:	ldr	r1, [r0, #20]
   13d70:	mov	r9, r2
   13d74:	adds	r1, r1, r2
   13d78:	bcs	13df4 <flatcc_builder_append_vector@@Base+0xa8>
   13d7c:	ldr	r2, [r0, #24]
   13d80:	cmp	r1, r2
   13d84:	bhi	13df4 <flatcc_builder_append_vector@@Base+0xa8>
   13d88:	str	r1, [r0, #20]
   13d8c:	ldr	r0, [r6, #32]
   13d90:	ldr	r4, [r6, #20]
   13d94:	ldr	r1, [r6, #24]
   13d98:	ldr	r5, [r0, #16]
   13d9c:	mla	r0, r5, r9, r4
   13da0:	cmp	r0, r1
   13da4:	str	r0, [r6, #20]
   13da8:	bcc	13dc8 <flatcc_builder_append_vector@@Base+0x7c>
   13dac:	add	r1, r0, #1
   13db0:	mov	r0, r6
   13db4:	mvn	r2, #3
   13db8:	bl	16948 <flatcc_builder_get_emit_context@@Base+0x8>
   13dbc:	mov	r7, #0
   13dc0:	cmp	r0, #0
   13dc4:	bne	13dec <flatcc_builder_append_vector@@Base+0xa0>
   13dc8:	ldr	r0, [r6, #16]
   13dcc:	adds	r7, r0, r4
   13dd0:	beq	13de8 <flatcc_builder_append_vector@@Base+0x9c>
   13dd4:	mul	r2, r5, r9
   13dd8:	mov	r0, r7
   13ddc:	mov	r1, r8
   13de0:	bl	12400 <memcpy@plt>
   13de4:	b	13dec <flatcc_builder_append_vector@@Base+0xa0>
   13de8:	mov	r7, #0
   13dec:	mov	r0, r7
   13df0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13df4:	movw	r0, #34097	; 0x8531
   13df8:	movw	r1, #29826	; 0x7482
   13dfc:	movw	r3, #34124	; 0x854c
   13e00:	mov	r2, #892	; 0x37c
   13e04:	movt	r0, #1
   13e08:	movt	r1, #1
   13e0c:	movt	r3, #1
   13e10:	bl	124b4 <__assert_fail@plt>
   13e14:	movw	r0, #30629	; 0x77a5
   13e18:	movw	r1, #29826	; 0x7482
   13e1c:	movw	r3, #30801	; 0x7851
   13e20:	movw	r2, #915	; 0x393
   13e24:	movt	r0, #1
   13e28:	movt	r1, #1
   13e2c:	movt	r3, #1
   13e30:	bl	124b4 <__assert_fail@plt>

00013e34 <flatcc_builder_extend_offset_vector@@Base>:
   13e34:	push	{r4, r5, fp, lr}
   13e38:	add	fp, sp, #8
   13e3c:	mov	r4, r0
   13e40:	ldr	r0, [r0, #32]
   13e44:	ldr	r2, [r0, #20]
   13e48:	adds	r2, r2, r1
   13e4c:	cmpcc	r2, #1073741824	; 0x40000000
   13e50:	bcc	13e74 <flatcc_builder_extend_offset_vector@@Base+0x40>
   13e54:	movw	r0, #34097	; 0x8531
   13e58:	movw	r1, #29826	; 0x7482
   13e5c:	movw	r3, #34124	; 0x854c
   13e60:	mov	r2, #892	; 0x37c
   13e64:	movt	r0, #1
   13e68:	movt	r1, #1
   13e6c:	movt	r3, #1
   13e70:	bl	124b4 <__assert_fail@plt>
   13e74:	str	r2, [r0, #20]
   13e78:	ldr	r5, [r4, #20]
   13e7c:	ldr	r2, [r4, #24]
   13e80:	add	r0, r5, r1, lsl #2
   13e84:	cmp	r0, r2
   13e88:	str	r0, [r4, #20]
   13e8c:	bcc	13eb0 <flatcc_builder_extend_offset_vector@@Base+0x7c>
   13e90:	add	r1, r0, #1
   13e94:	mov	r0, r4
   13e98:	mvn	r2, #3
   13e9c:	bl	16948 <flatcc_builder_get_emit_context@@Base+0x8>
   13ea0:	mov	r1, r0
   13ea4:	mov	r0, #0
   13ea8:	cmp	r1, #0
   13eac:	popne	{r4, r5, fp, pc}
   13eb0:	ldr	r0, [r4, #16]
   13eb4:	add	r0, r0, r5
   13eb8:	pop	{r4, r5, fp, pc}

00013ebc <flatcc_builder_offset_vector_push@@Base>:
   13ebc:	push	{r4, r5, r6, r7, fp, lr}
   13ec0:	add	fp, sp, #16
   13ec4:	mov	r6, r0
   13ec8:	ldr	r0, [r0, #32]
   13ecc:	mov	r4, r1
   13ed0:	ldrh	r1, [r0, #14]
   13ed4:	cmp	r1, #5
   13ed8:	bne	13f3c <flatcc_builder_offset_vector_push@@Base+0x80>
   13edc:	ldr	r1, [r0, #20]
   13ee0:	mov	r5, #0
   13ee4:	cmn	r1, #-1073741823	; 0xc0000001
   13ee8:	beq	13f34 <flatcc_builder_offset_vector_push@@Base+0x78>
   13eec:	add	r1, r1, #1
   13ef0:	str	r1, [r0, #20]
   13ef4:	ldr	r7, [r6, #20]
   13ef8:	ldr	r0, [r6, #24]
   13efc:	add	r1, r7, #4
   13f00:	cmp	r1, r0
   13f04:	str	r1, [r6, #20]
   13f08:	bcc	13f24 <flatcc_builder_offset_vector_push@@Base+0x68>
   13f0c:	add	r1, r7, #5
   13f10:	mov	r0, r6
   13f14:	mvn	r2, #3
   13f18:	bl	16948 <flatcc_builder_get_emit_context@@Base+0x8>
   13f1c:	cmp	r0, #0
   13f20:	bne	13f34 <flatcc_builder_offset_vector_push@@Base+0x78>
   13f24:	ldr	r0, [r6, #16]
   13f28:	adds	r0, r0, r7
   13f2c:	movne	r5, r0
   13f30:	strne	r4, [r0]
   13f34:	mov	r0, r5
   13f38:	pop	{r4, r5, r6, r7, fp, pc}
   13f3c:	movw	r0, #30878	; 0x789e
   13f40:	movw	r1, #29826	; 0x7482
   13f44:	movw	r3, #30929	; 0x78d1
   13f48:	movw	r2, #934	; 0x3a6
   13f4c:	movt	r0, #1
   13f50:	movt	r1, #1
   13f54:	movt	r3, #1
   13f58:	bl	124b4 <__assert_fail@plt>

00013f5c <flatcc_builder_append_offset_vector@@Base>:
   13f5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f60:	add	fp, sp, #24
   13f64:	mov	r6, r0
   13f68:	ldr	r0, [r0, #32]
   13f6c:	mov	r8, r1
   13f70:	ldrh	r1, [r0, #14]
   13f74:	cmp	r1, #5
   13f78:	bne	14014 <flatcc_builder_append_offset_vector@@Base+0xb8>
   13f7c:	ldr	r1, [r0, #20]
   13f80:	mov	r5, r2
   13f84:	adds	r1, r1, r2
   13f88:	cmpcc	r1, #1073741824	; 0x40000000
   13f8c:	bcc	13fb0 <flatcc_builder_append_offset_vector@@Base+0x54>
   13f90:	movw	r0, #34097	; 0x8531
   13f94:	movw	r1, #29826	; 0x7482
   13f98:	movw	r3, #34124	; 0x854c
   13f9c:	mov	r2, #892	; 0x37c
   13fa0:	movt	r0, #1
   13fa4:	movt	r1, #1
   13fa8:	movt	r3, #1
   13fac:	bl	124b4 <__assert_fail@plt>
   13fb0:	str	r1, [r0, #20]
   13fb4:	ldr	r4, [r6, #20]
   13fb8:	ldr	r1, [r6, #24]
   13fbc:	add	r0, r4, r5, lsl #2
   13fc0:	cmp	r0, r1
   13fc4:	str	r0, [r6, #20]
   13fc8:	bcc	13fe8 <flatcc_builder_append_offset_vector@@Base+0x8c>
   13fcc:	add	r1, r0, #1
   13fd0:	mov	r0, r6
   13fd4:	mvn	r2, #3
   13fd8:	bl	16948 <flatcc_builder_get_emit_context@@Base+0x8>
   13fdc:	mov	r7, #0
   13fe0:	cmp	r0, #0
   13fe4:	bne	1400c <flatcc_builder_append_offset_vector@@Base+0xb0>
   13fe8:	ldr	r0, [r6, #16]
   13fec:	adds	r7, r0, r4
   13ff0:	beq	14008 <flatcc_builder_append_offset_vector@@Base+0xac>
   13ff4:	lsl	r2, r5, #2
   13ff8:	mov	r0, r7
   13ffc:	mov	r1, r8
   14000:	bl	12400 <memcpy@plt>
   14004:	b	1400c <flatcc_builder_append_offset_vector@@Base+0xb0>
   14008:	mov	r7, #0
   1400c:	mov	r0, r7
   14010:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14014:	movw	r0, #30878	; 0x789e
   14018:	movw	r1, #29826	; 0x7482
   1401c:	movw	r3, #31027	; 0x7933
   14020:	mov	r2, #948	; 0x3b4
   14024:	movt	r0, #1
   14028:	movt	r1, #1
   1402c:	movt	r3, #1
   14030:	bl	124b4 <__assert_fail@plt>

00014034 <flatcc_builder_extend_string@@Base>:
   14034:	push	{r4, r5, fp, lr}
   14038:	add	fp, sp, #8
   1403c:	mov	r4, r0
   14040:	ldr	r0, [r0, #32]
   14044:	ldrh	r2, [r0, #14]
   14048:	cmp	r2, #6
   1404c:	bne	140a4 <flatcc_builder_extend_string@@Base+0x70>
   14050:	ldr	r2, [r0, #20]
   14054:	adds	r2, r2, r1
   14058:	bcs	140c4 <flatcc_builder_extend_string@@Base+0x90>
   1405c:	str	r2, [r0, #20]
   14060:	ldr	r5, [r4, #20]
   14064:	ldr	r2, [r4, #24]
   14068:	add	r0, r5, r1
   1406c:	cmp	r0, r2
   14070:	str	r0, [r4, #20]
   14074:	bcc	14098 <flatcc_builder_extend_string@@Base+0x64>
   14078:	add	r1, r0, #1
   1407c:	mov	r0, r4
   14080:	mvn	r2, #3
   14084:	bl	16948 <flatcc_builder_get_emit_context@@Base+0x8>
   14088:	mov	r1, r0
   1408c:	mov	r0, #0
   14090:	cmp	r1, #0
   14094:	popne	{r4, r5, fp, pc}
   14098:	ldr	r0, [r4, #16]
   1409c:	add	r0, r0, r5
   140a0:	pop	{r4, r5, fp, pc}
   140a4:	movw	r0, #31143	; 0x79a7
   140a8:	movw	r1, #29826	; 0x7482
   140ac:	movw	r3, #31187	; 0x79d3
   140b0:	movw	r2, #957	; 0x3bd
   140b4:	movt	r0, #1
   140b8:	movt	r1, #1
   140bc:	movt	r3, #1
   140c0:	bl	124b4 <__assert_fail@plt>
   140c4:	movw	r0, #34097	; 0x8531
   140c8:	movw	r1, #29826	; 0x7482
   140cc:	movw	r3, #34124	; 0x854c
   140d0:	mov	r2, #892	; 0x37c
   140d4:	movt	r0, #1
   140d8:	movt	r1, #1
   140dc:	movt	r3, #1
   140e0:	bl	124b4 <__assert_fail@plt>

000140e4 <flatcc_builder_append_string@@Base>:
   140e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   140e8:	add	fp, sp, #24
   140ec:	mov	r6, r0
   140f0:	ldr	r0, [r0, #32]
   140f4:	mov	r8, r1
   140f8:	ldrh	r1, [r0, #14]
   140fc:	cmp	r1, #6
   14100:	bne	14178 <flatcc_builder_append_string@@Base+0x94>
   14104:	ldr	r1, [r0, #20]
   14108:	mov	r4, r2
   1410c:	adds	r1, r1, r2
   14110:	bcs	14198 <flatcc_builder_append_string@@Base+0xb4>
   14114:	str	r1, [r0, #20]
   14118:	ldr	r5, [r6, #20]
   1411c:	ldr	r1, [r6, #24]
   14120:	add	r0, r5, r4
   14124:	cmp	r0, r1
   14128:	str	r0, [r6, #20]
   1412c:	bcc	1414c <flatcc_builder_append_string@@Base+0x68>
   14130:	add	r1, r0, #1
   14134:	mov	r0, r6
   14138:	mvn	r2, #3
   1413c:	bl	16948 <flatcc_builder_get_emit_context@@Base+0x8>
   14140:	mov	r7, #0
   14144:	cmp	r0, #0
   14148:	bne	14170 <flatcc_builder_append_string@@Base+0x8c>
   1414c:	ldr	r0, [r6, #16]
   14150:	adds	r7, r0, r5
   14154:	beq	1416c <flatcc_builder_append_string@@Base+0x88>
   14158:	mov	r0, r7
   1415c:	mov	r1, r8
   14160:	mov	r2, r4
   14164:	bl	12400 <memcpy@plt>
   14168:	b	14170 <flatcc_builder_append_string@@Base+0x8c>
   1416c:	mov	r7, #0
   14170:	mov	r0, r7
   14174:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14178:	movw	r0, #31143	; 0x79a7
   1417c:	movw	r1, #29826	; 0x7482
   14180:	movw	r3, #31250	; 0x7a12
   14184:	movw	r2, #966	; 0x3c6
   14188:	movt	r0, #1
   1418c:	movt	r1, #1
   14190:	movt	r3, #1
   14194:	bl	124b4 <__assert_fail@plt>
   14198:	movw	r0, #34097	; 0x8531
   1419c:	movw	r1, #29826	; 0x7482
   141a0:	movw	r3, #34124	; 0x854c
   141a4:	mov	r2, #892	; 0x37c
   141a8:	movt	r0, #1
   141ac:	movt	r1, #1
   141b0:	movt	r3, #1
   141b4:	bl	124b4 <__assert_fail@plt>

000141b8 <flatcc_builder_append_string_str@@Base>:
   141b8:	push	{r4, r5, fp, lr}
   141bc:	add	fp, sp, #8
   141c0:	mov	r5, r0
   141c4:	mov	r0, r1
   141c8:	mov	r4, r1
   141cc:	bl	12460 <strlen@plt>
   141d0:	mov	r2, r0
   141d4:	mov	r0, r5
   141d8:	mov	r1, r4
   141dc:	pop	{r4, r5, fp, lr}
   141e0:	b	140e4 <flatcc_builder_append_string@@Base>

000141e4 <flatcc_builder_append_string_strn@@Base>:
   141e4:	push	{r4, r5, r6, sl, fp, lr}
   141e8:	add	fp, sp, #16
   141ec:	mov	r6, r0
   141f0:	mov	r5, r1
   141f4:	mov	r0, r1
   141f8:	mov	r1, #0
   141fc:	mov	r4, r2
   14200:	bl	12490 <memchr@plt>
   14204:	cmp	r0, #0
   14208:	mov	r1, r5
   1420c:	subne	r4, r0, r5
   14210:	mov	r0, r6
   14214:	mov	r2, r4
   14218:	pop	{r4, r5, r6, sl, fp, lr}
   1421c:	b	140e4 <flatcc_builder_append_string@@Base>

00014220 <flatcc_builder_truncate_vector@@Base>:
   14220:	push	{fp, lr}
   14224:	mov	fp, sp
   14228:	ldr	r2, [r0, #32]
   1422c:	ldrh	r3, [r2, #14]
   14230:	cmp	r3, #4
   14234:	bne	1427c <flatcc_builder_truncate_vector@@Base+0x5c>
   14238:	ldr	r3, [r2, #20]
   1423c:	cmp	r3, r1
   14240:	bcc	1429c <flatcc_builder_truncate_vector@@Base+0x7c>
   14244:	sub	r3, r3, r1
   14248:	str	r3, [r2, #20]
   1424c:	ldr	r2, [r0, #32]
   14250:	ldr	r3, [r0, #20]
   14254:	ldr	ip, [r0, #16]
   14258:	ldr	r2, [r2, #16]
   1425c:	mls	r3, r2, r1, r3
   14260:	mul	r2, r2, r1
   14264:	mov	r1, #0
   14268:	str	r3, [r0, #20]
   1426c:	add	r0, ip, r3
   14270:	bl	12484 <memset@plt>
   14274:	mov	r0, #0
   14278:	pop	{fp, pc}
   1427c:	movw	r0, #30629	; 0x77a5
   14280:	movw	r1, #29826	; 0x7482
   14284:	movw	r3, #31327	; 0x7a5f
   14288:	movw	r2, #985	; 0x3d9
   1428c:	movt	r0, #1
   14290:	movt	r1, #1
   14294:	movt	r3, #1
   14298:	bl	124b4 <__assert_fail@plt>
   1429c:	movw	r0, #31390	; 0x7a9e
   142a0:	movw	r1, #29826	; 0x7482
   142a4:	movw	r3, #31327	; 0x7a5f
   142a8:	movw	r2, #986	; 0x3da
   142ac:	movt	r0, #1
   142b0:	movt	r1, #1
   142b4:	movt	r3, #1
   142b8:	bl	124b4 <__assert_fail@plt>

000142bc <flatcc_builder_truncate_offset_vector@@Base>:
   142bc:	push	{fp, lr}
   142c0:	mov	fp, sp
   142c4:	ldr	r2, [r0, #32]
   142c8:	ldrh	r3, [r2, #14]
   142cc:	cmp	r3, #5
   142d0:	bne	14318 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   142d4:	ldr	r3, [r2, #20]
   142d8:	cmp	r3, r1
   142dc:	bcc	14338 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   142e0:	sub	r3, r3, r1
   142e4:	str	r3, [r2, #20]
   142e8:	ldr	r2, [r0, #32]
   142ec:	ldr	r3, [r0, #20]
   142f0:	ldr	ip, [r0, #16]
   142f4:	ldr	r2, [r2, #16]
   142f8:	mls	r3, r2, r1, r3
   142fc:	mul	r2, r2, r1
   14300:	mov	r1, #0
   14304:	str	r3, [r0, #20]
   14308:	add	r0, ip, r3
   1430c:	bl	12484 <memset@plt>
   14310:	mov	r0, #0
   14314:	pop	{fp, pc}
   14318:	movw	r0, #30878	; 0x789e
   1431c:	movw	r1, #29826	; 0x7482
   14320:	movw	r3, #31426	; 0x7ac2
   14324:	movw	r2, #994	; 0x3e2
   14328:	movt	r0, #1
   1432c:	movt	r1, #1
   14330:	movt	r3, #1
   14334:	bl	124b4 <__assert_fail@plt>
   14338:	movw	r0, #31496	; 0x7b08
   1433c:	movw	r1, #29826	; 0x7482
   14340:	movw	r3, #31426	; 0x7ac2
   14344:	movw	r2, #995	; 0x3e3
   14348:	movt	r0, #1
   1434c:	movt	r1, #1
   14350:	movt	r3, #1
   14354:	bl	124b4 <__assert_fail@plt>

00014358 <flatcc_builder_truncate_string@@Base>:
   14358:	push	{fp, lr}
   1435c:	mov	fp, sp
   14360:	mov	r2, r1
   14364:	ldr	r1, [r0, #32]
   14368:	ldrh	r3, [r1, #14]
   1436c:	cmp	r3, #6
   14370:	bne	143ac <flatcc_builder_truncate_string@@Base+0x54>
   14374:	ldr	r3, [r1, #20]
   14378:	cmp	r3, r2
   1437c:	bcc	143cc <flatcc_builder_truncate_string@@Base+0x74>
   14380:	sub	r3, r3, r2
   14384:	str	r3, [r1, #20]
   14388:	ldr	r3, [r0, #20]
   1438c:	ldr	r1, [r0, #16]
   14390:	sub	r3, r3, r2
   14394:	str	r3, [r0, #20]
   14398:	add	r0, r1, r3
   1439c:	mov	r1, #0
   143a0:	bl	12484 <memset@plt>
   143a4:	mov	r0, #0
   143a8:	pop	{fp, pc}
   143ac:	movw	r0, #31143	; 0x79a7
   143b0:	movw	r1, #29826	; 0x7482
   143b4:	movw	r3, #31555	; 0x7b43
   143b8:	movw	r2, #1003	; 0x3eb
   143bc:	movt	r0, #1
   143c0:	movt	r1, #1
   143c4:	movt	r3, #1
   143c8:	bl	124b4 <__assert_fail@plt>
   143cc:	movw	r0, #31618	; 0x7b82
   143d0:	movw	r1, #29826	; 0x7482
   143d4:	movw	r3, #31555	; 0x7b43
   143d8:	mov	r2, #1004	; 0x3ec
   143dc:	movt	r0, #1
   143e0:	movt	r1, #1
   143e4:	movt	r3, #1
   143e8:	bl	124b4 <__assert_fail@plt>

000143ec <flatcc_builder_start_vector@@Base>:
   143ec:	push	{r4, r5, r6, r7, fp, lr}
   143f0:	add	fp, sp, #16
   143f4:	mov	r7, #4
   143f8:	cmp	r2, #4
   143fc:	mov	r6, r1
   14400:	mov	r5, r3
   14404:	mov	r4, r0
   14408:	movls	r2, r7
   1440c:	mov	r1, r2
   14410:	bl	137f8 <flatcc_builder_start_buffer@@Base+0xbc>
   14414:	mov	r1, r0
   14418:	mvn	r0, #0
   1441c:	cmp	r1, #0
   14420:	popne	{r4, r5, r6, r7, fp, pc}
   14424:	ldr	r0, [r4, #32]
   14428:	str	r6, [r0, #16]
   1442c:	mov	r0, #0
   14430:	ldr	r1, [r4, #32]
   14434:	str	r0, [r1, #20]
   14438:	ldr	r1, [r4, #32]
   1443c:	str	r5, [r1, #24]
   14440:	ldr	r1, [r4, #32]
   14444:	strh	r7, [r1, #14]
   14448:	ldr	r2, [r4, #28]
   1444c:	ldr	r3, [r4, #60]	; 0x3c
   14450:	ldr	r7, [r4, #64]	; 0x40
   14454:	add	r3, r3, r2
   14458:	sub	r2, r7, r2
   1445c:	str	r3, [r4, #16]
   14460:	mvn	r3, #3
   14464:	cmn	r2, #4
   14468:	movcs	r2, r3
   1446c:	str	r2, [r4, #24]
   14470:	str	r3, [r1, #4]
   14474:	pop	{r4, r5, r6, r7, fp, pc}

00014478 <flatcc_builder_start_offset_vector@@Base>:
   14478:	push	{r4, r5, fp, lr}
   1447c:	add	fp, sp, #8
   14480:	mov	r1, #4
   14484:	mov	r4, r0
   14488:	mov	r5, #4
   1448c:	bl	137f8 <flatcc_builder_start_buffer@@Base+0xbc>
   14490:	mov	r1, r0
   14494:	mvn	r0, #0
   14498:	cmp	r1, #0
   1449c:	popne	{r4, r5, fp, pc}
   144a0:	ldr	r0, [r4, #32]
   144a4:	mov	r2, #5
   144a8:	str	r5, [r0, #16]
   144ac:	mov	r0, #0
   144b0:	ldr	r1, [r4, #32]
   144b4:	str	r0, [r1, #20]
   144b8:	ldr	r1, [r4, #32]
   144bc:	strh	r2, [r1, #14]
   144c0:	ldr	r2, [r4, #28]
   144c4:	ldr	r3, [r4, #60]	; 0x3c
   144c8:	ldr	r5, [r4, #64]	; 0x40
   144cc:	add	r3, r3, r2
   144d0:	sub	r2, r5, r2
   144d4:	str	r3, [r4, #16]
   144d8:	mvn	r3, #3
   144dc:	cmn	r2, #4
   144e0:	movcs	r2, r3
   144e4:	str	r2, [r4, #24]
   144e8:	str	r3, [r1, #4]
   144ec:	pop	{r4, r5, fp, pc}

000144f0 <flatcc_builder_create_offset_vector@@Base>:
   144f0:	push	{r4, r5, r6, sl, fp, lr}
   144f4:	add	fp, sp, #16
   144f8:	mov	r6, r2
   144fc:	mov	r5, r1
   14500:	mov	r4, r0
   14504:	bl	14478 <flatcc_builder_start_offset_vector@@Base>
   14508:	cmp	r0, #0
   1450c:	beq	14518 <flatcc_builder_create_offset_vector@@Base+0x28>
   14510:	mov	r0, #0
   14514:	pop	{r4, r5, r6, sl, fp, pc}
   14518:	mov	r0, r4
   1451c:	mov	r1, r6
   14520:	bl	13e34 <flatcc_builder_extend_offset_vector@@Base>
   14524:	cmp	r0, #0
   14528:	beq	14510 <flatcc_builder_create_offset_vector@@Base+0x20>
   1452c:	lsl	r2, r6, #2
   14530:	mov	r1, r5
   14534:	bl	12400 <memcpy@plt>
   14538:	mov	r0, r4
   1453c:	pop	{r4, r5, r6, sl, fp, lr}
   14540:	b	14544 <flatcc_builder_end_offset_vector@@Base>

00014544 <flatcc_builder_end_offset_vector@@Base>:
   14544:	push	{r4, r5, fp, lr}
   14548:	add	fp, sp, #8
   1454c:	mov	r4, r0
   14550:	ldr	r0, [r0, #32]
   14554:	ldrh	r1, [r0, #14]
   14558:	cmp	r1, #5
   1455c:	bne	145fc <flatcc_builder_end_offset_vector@@Base+0xb8>
   14560:	ldr	r2, [r0, #20]
   14564:	ldr	r1, [r4, #16]
   14568:	mov	r0, r4
   1456c:	mov	r3, #0
   14570:	bl	15564 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   14574:	mov	r5, r0
   14578:	cmp	r0, #0
   1457c:	beq	145f4 <flatcc_builder_end_offset_vector@@Base+0xb0>
   14580:	ldr	r0, [r4, #16]
   14584:	ldr	r2, [r4, #20]
   14588:	mov	r1, #0
   1458c:	bl	12484 <memset@plt>
   14590:	ldr	r0, [r4, #32]
   14594:	ldr	r1, [r4, #60]	; 0x3c
   14598:	ldr	ip, [r4, #64]	; 0x40
   1459c:	ldr	r3, [r0, #8]
   145a0:	str	r3, [r4, #20]
   145a4:	ldr	r3, [r0]
   145a8:	str	r3, [r4, #28]
   145ac:	add	r1, r1, r3
   145b0:	ldr	r2, [r0, #4]
   145b4:	str	r1, [r4, #16]
   145b8:	sub	r1, ip, r3
   145bc:	cmp	r1, r2
   145c0:	movhi	r1, r2
   145c4:	str	r1, [r4, #24]
   145c8:	ldrh	r1, [r4, #130]	; 0x82
   145cc:	ldrh	r2, [r4, #128]	; 0x80
   145d0:	cmp	r2, r1
   145d4:	strhcc	r1, [r4, #128]	; 0x80
   145d8:	ldrh	r1, [r0, #12]
   145dc:	sub	r0, r0, #36	; 0x24
   145e0:	str	r0, [r4, #32]
   145e4:	strh	r1, [r4, #130]	; 0x82
   145e8:	ldr	r0, [r4, #156]	; 0x9c
   145ec:	sub	r0, r0, #1
   145f0:	str	r0, [r4, #156]	; 0x9c
   145f4:	mov	r0, r5
   145f8:	pop	{r4, r5, fp, pc}
   145fc:	movw	r0, #30878	; 0x789e
   14600:	movw	r1, #29826	; 0x7482
   14604:	movw	r3, #32461	; 0x7ecd
   14608:	movw	r2, #1480	; 0x5c8
   1460c:	movt	r0, #1
   14610:	movt	r1, #1
   14614:	movt	r3, #1
   14618:	bl	124b4 <__assert_fail@plt>

0001461c <flatcc_builder_start_string@@Base>:
   1461c:	push	{r4, r5, fp, lr}
   14620:	add	fp, sp, #8
   14624:	mov	r1, #1
   14628:	mov	r4, r0
   1462c:	mov	r5, #1
   14630:	bl	137f8 <flatcc_builder_start_buffer@@Base+0xbc>
   14634:	mov	r1, r0
   14638:	mvn	r0, #0
   1463c:	cmp	r1, #0
   14640:	popne	{r4, r5, fp, pc}
   14644:	ldr	r0, [r4, #32]
   14648:	mov	r2, #6
   1464c:	str	r5, [r0, #16]
   14650:	mov	r0, #0
   14654:	ldr	r1, [r4, #32]
   14658:	str	r0, [r1, #20]
   1465c:	ldr	r1, [r4, #32]
   14660:	strh	r2, [r1, #14]
   14664:	ldr	r2, [r4, #28]
   14668:	ldr	r3, [r4, #60]	; 0x3c
   1466c:	ldr	r5, [r4, #64]	; 0x40
   14670:	add	r3, r3, r2
   14674:	sub	r2, r5, r2
   14678:	str	r3, [r4, #16]
   1467c:	mvn	r3, #3
   14680:	cmn	r2, #4
   14684:	movcs	r2, r3
   14688:	str	r2, [r4, #24]
   1468c:	str	r3, [r1, #4]
   14690:	pop	{r4, r5, fp, pc}

00014694 <flatcc_builder_reserve_table@@Base>:
   14694:	push	{r4, r5, r6, sl, fp, lr}
   14698:	add	fp, sp, #16
   1469c:	sub	sp, sp, #8
   146a0:	cmn	r1, #1
   146a4:	ble	14778 <flatcc_builder_reserve_table@@Base+0xe4>
   146a8:	mov	r4, r0
   146ac:	ldr	r0, [r0, #32]
   146b0:	mov	r5, r1
   146b4:	ldr	r1, [r4, #56]	; 0x38
   146b8:	ldrh	r2, [r0, #28]
   146bc:	ldr	r0, [r0, #16]
   146c0:	add	r6, r0, r2, lsl #1
   146c4:	add	r0, r6, r5, lsl #1
   146c8:	add	r2, r0, #4
   146cc:	cmp	r2, r1
   146d0:	bls	146f8 <flatcc_builder_reserve_table@@Base+0x64>
   146d4:	ldr	r0, [r4, #40]	; 0x28
   146d8:	ldr	ip, [r4, #48]	; 0x30
   146dc:	mov	r3, #0
   146e0:	add	r1, r4, #52	; 0x34
   146e4:	str	r3, [sp]
   146e8:	mov	r3, #1
   146ec:	blx	ip
   146f0:	cmp	r0, #0
   146f4:	bne	14798 <flatcc_builder_reserve_table@@Base+0x104>
   146f8:	ldr	r0, [r4, #52]	; 0x34
   146fc:	adds	r0, r0, r6
   14700:	str	r0, [r4, #4]
   14704:	beq	1476c <flatcc_builder_reserve_table@@Base+0xd8>
   14708:	add	r0, r0, #4
   1470c:	lsl	r1, r5, #1
   14710:	str	r0, [r4, #4]
   14714:	ldr	r0, [r4, #32]
   14718:	ldr	r3, [r4, #80]	; 0x50
   1471c:	ldr	r5, [r0, #20]
   14720:	orr	r0, r1, #1
   14724:	add	r2, r5, r0
   14728:	cmp	r2, r3
   1472c:	bls	14754 <flatcc_builder_reserve_table@@Base+0xc0>
   14730:	ldr	r0, [r4, #40]	; 0x28
   14734:	ldr	r6, [r4, #48]	; 0x30
   14738:	mov	r3, #3
   1473c:	add	r1, r4, #76	; 0x4c
   14740:	str	r3, [sp]
   14744:	mov	r3, #0
   14748:	blx	r6
   1474c:	cmp	r0, #0
   14750:	bne	14798 <flatcc_builder_reserve_table@@Base+0x104>
   14754:	ldr	r0, [r4, #76]	; 0x4c
   14758:	adds	r0, r0, r5
   1475c:	str	r0, [r4]
   14760:	mov	r0, #0
   14764:	mvneq	r0, #0
   14768:	b	14770 <flatcc_builder_reserve_table@@Base+0xdc>
   1476c:	mvn	r0, #0
   14770:	sub	sp, fp, #16
   14774:	pop	{r4, r5, r6, sl, fp, pc}
   14778:	movw	r0, #31717	; 0x7be5
   1477c:	movw	r1, #29826	; 0x7482
   14780:	movw	r3, #31652	; 0x7ba4
   14784:	movw	r2, #1065	; 0x429
   14788:	movt	r0, #1
   1478c:	movt	r1, #1
   14790:	movt	r3, #1
   14794:	bl	124b4 <__assert_fail@plt>
   14798:	movw	r0, #34344	; 0x8628
   1479c:	movw	r1, #29826	; 0x7482
   147a0:	movw	r3, #33890	; 0x8462
   147a4:	mov	r2, #308	; 0x134
   147a8:	movt	r0, #1
   147ac:	movt	r1, #1
   147b0:	movt	r3, #1
   147b4:	bl	124b4 <__assert_fail@plt>

000147b8 <flatcc_builder_start_table@@Base>:
   147b8:	push	{r4, r5, r6, r7, fp, lr}
   147bc:	add	fp, sp, #16
   147c0:	sub	sp, sp, #8
   147c4:	mov	r6, r1
   147c8:	mov	r1, #4
   147cc:	mov	r4, r0
   147d0:	bl	137f8 <flatcc_builder_start_buffer@@Base+0xbc>
   147d4:	mvn	r5, #0
   147d8:	cmp	r0, #0
   147dc:	beq	147ec <flatcc_builder_start_table@@Base+0x34>
   147e0:	mov	r0, r5
   147e4:	sub	sp, fp, #16
   147e8:	pop	{r4, r5, r6, r7, fp, pc}
   147ec:	mov	r1, r4
   147f0:	ldr	r2, [r4, #4]
   147f4:	ldr	r3, [r4, #32]
   147f8:	ldr	r0, [r1, #52]!	; 0x34
   147fc:	sub	r0, r2, r0
   14800:	str	r0, [r3, #16]
   14804:	ldr	r0, [r4]
   14808:	ldr	r3, [r4, #76]	; 0x4c
   1480c:	ldr	r2, [r4, #32]
   14810:	sub	r0, r0, r3
   14814:	mov	r3, #0
   14818:	str	r0, [r2, #20]
   1481c:	ldr	r0, [r4, #12]
   14820:	ldr	r2, [r4, #32]
   14824:	str	r0, [r2, #24]
   14828:	ldr	r0, [r4, #32]
   1482c:	ldrh	r2, [r4, #8]
   14830:	strh	r2, [r0, #28]
   14834:	movw	r0, #15186	; 0x3b52
   14838:	strh	r3, [r4, #8]
   1483c:	mov	r2, #3
   14840:	movt	r0, #12137	; 0x2f69
   14844:	str	r0, [r4, #12]
   14848:	ldr	r0, [r4, #32]
   1484c:	strh	r2, [r0, #14]
   14850:	ldrh	r2, [r0, #28]
   14854:	ldr	r0, [r0, #16]
   14858:	add	r7, r0, r2, lsl #1
   1485c:	add	r0, r7, r6, lsl #1
   14860:	add	r2, r0, #4
   14864:	ldr	r0, [r4, #56]	; 0x38
   14868:	cmp	r2, r0
   1486c:	bls	1488c <flatcc_builder_start_table@@Base+0xd4>
   14870:	ldr	r0, [r4, #40]	; 0x28
   14874:	ldr	ip, [r4, #48]	; 0x30
   14878:	str	r3, [sp]
   1487c:	mov	r3, #1
   14880:	blx	ip
   14884:	cmp	r0, #0
   14888:	bne	14930 <flatcc_builder_start_table@@Base+0x178>
   1488c:	ldr	r0, [r4, #52]	; 0x34
   14890:	adds	r0, r0, r7
   14894:	str	r0, [r4, #4]
   14898:	beq	147e0 <flatcc_builder_start_table@@Base+0x28>
   1489c:	add	r0, r0, #4
   148a0:	lsl	r1, r6, #1
   148a4:	str	r0, [r4, #4]
   148a8:	ldr	r0, [r4, #32]
   148ac:	ldr	r3, [r4, #80]	; 0x50
   148b0:	ldr	r6, [r0, #20]
   148b4:	orr	r0, r1, #1
   148b8:	add	r2, r6, r0
   148bc:	cmp	r2, r3
   148c0:	bls	148e8 <flatcc_builder_start_table@@Base+0x130>
   148c4:	ldr	r0, [r4, #40]	; 0x28
   148c8:	ldr	r7, [r4, #48]	; 0x30
   148cc:	mov	r3, #3
   148d0:	add	r1, r4, #76	; 0x4c
   148d4:	str	r3, [sp]
   148d8:	mov	r3, #0
   148dc:	blx	r7
   148e0:	cmp	r0, #0
   148e4:	bne	14930 <flatcc_builder_start_table@@Base+0x178>
   148e8:	ldr	r0, [r4, #76]	; 0x4c
   148ec:	adds	r0, r0, r6
   148f0:	str	r0, [r4]
   148f4:	beq	147e0 <flatcc_builder_start_table@@Base+0x28>
   148f8:	ldr	r0, [r4, #28]
   148fc:	ldr	r2, [r4, #60]	; 0x3c
   14900:	ldr	r3, [r4, #64]	; 0x40
   14904:	ldr	r1, [r4, #32]
   14908:	mov	r5, #0
   1490c:	add	r2, r2, r0
   14910:	sub	r0, r3, r0
   14914:	str	r2, [r4, #16]
   14918:	movw	r2, #65532	; 0xfffc
   1491c:	cmp	r0, r2
   14920:	movcs	r0, r2
   14924:	str	r0, [r4, #24]
   14928:	str	r2, [r1, #4]
   1492c:	b	147e0 <flatcc_builder_start_table@@Base+0x28>
   14930:	movw	r0, #34344	; 0x8628
   14934:	movw	r1, #29826	; 0x7482
   14938:	movw	r3, #33890	; 0x8462
   1493c:	mov	r2, #308	; 0x134
   14940:	movt	r0, #1
   14944:	movt	r1, #1
   14948:	movt	r3, #1
   1494c:	bl	124b4 <__assert_fail@plt>

00014950 <flatcc_builder_create_vtable@@Base>:
   14950:	push	{r4, r5, fp, lr}
   14954:	add	fp, sp, #8
   14958:	sub	sp, sp, #80	; 0x50
   1495c:	mov	r3, r2
   14960:	mov	r2, #0
   14964:	mov	r4, r0
   14968:	cmp	r3, #0
   1496c:	str	r2, [sp, #12]
   14970:	str	r2, [sp, #8]
   14974:	movne	r2, #1
   14978:	strne	r1, [sp, #16]
   1497c:	strne	r3, [sp, #8]
   14980:	strne	r3, [sp, #20]
   14984:	strne	r2, [sp, #12]
   14988:	ldr	r0, [r4, #152]	; 0x98
   1498c:	cmp	r0, #0
   14990:	bne	149a0 <flatcc_builder_create_vtable@@Base+0x50>
   14994:	ldr	r0, [r4, #180]	; 0xb4
   14998:	cmp	r0, #0
   1499c:	beq	149f0 <flatcc_builder_create_vtable@@Base+0xa0>
   149a0:	cmp	r3, #0
   149a4:	beq	14a30 <flatcc_builder_create_vtable@@Base+0xe0>
   149a8:	ldr	r0, [r4, #136]	; 0x88
   149ac:	ldr	ip, [r4, #44]	; 0x2c
   149b0:	add	r1, sp, #8
   149b4:	add	r1, r1, #8
   149b8:	sub	r5, r0, r3
   149bc:	ldr	r0, [r4, #36]	; 0x24
   149c0:	str	r3, [sp]
   149c4:	mov	r3, r5
   149c8:	blx	ip
   149cc:	cmp	r0, #0
   149d0:	bne	14a50 <flatcc_builder_create_vtable@@Base+0x100>
   149d4:	cmp	r5, #0
   149d8:	str	r5, [r4, #136]	; 0x88
   149dc:	beq	149e8 <flatcc_builder_create_vtable@@Base+0x98>
   149e0:	add	r0, r5, #1
   149e4:	b	14a28 <flatcc_builder_create_vtable@@Base+0xd8>
   149e8:	mov	r0, #0
   149ec:	b	14a28 <flatcc_builder_create_vtable@@Base+0xd8>
   149f0:	ldr	r5, [r4, #140]	; 0x8c
   149f4:	ldr	r0, [r4, #36]	; 0x24
   149f8:	ldr	ip, [r4, #44]	; 0x2c
   149fc:	add	r1, r5, r3
   14a00:	str	r1, [r4, #140]	; 0x8c
   14a04:	add	r1, sp, #8
   14a08:	str	r3, [sp]
   14a0c:	mov	r3, r5
   14a10:	add	r1, r1, #8
   14a14:	blx	ip
   14a18:	cmp	r0, #0
   14a1c:	bne	14a70 <flatcc_builder_create_vtable@@Base+0x120>
   14a20:	adds	r0, r5, #1
   14a24:	moveq	r0, #0
   14a28:	sub	sp, fp, #8
   14a2c:	pop	{r4, r5, fp, pc}
   14a30:	movw	r0, #34344	; 0x8628
   14a34:	movw	r1, #29826	; 0x7482
   14a38:	movw	r3, #34023	; 0x84e7
   14a3c:	movw	r2, #647	; 0x287
   14a40:	movt	r0, #1
   14a44:	movt	r1, #1
   14a48:	movt	r3, #1
   14a4c:	bl	124b4 <__assert_fail@plt>
   14a50:	movw	r0, #34344	; 0x8628
   14a54:	movw	r1, #29826	; 0x7482
   14a58:	movw	r3, #34023	; 0x84e7
   14a5c:	movw	r2, #651	; 0x28b
   14a60:	movt	r0, #1
   14a64:	movt	r1, #1
   14a68:	movt	r3, #1
   14a6c:	bl	124b4 <__assert_fail@plt>
   14a70:	movw	r0, #34344	; 0x8628
   14a74:	movw	r1, #29826	; 0x7482
   14a78:	movw	r3, #34211	; 0x85a3
   14a7c:	movw	r2, #677	; 0x2a5
   14a80:	movt	r0, #1
   14a84:	movt	r1, #1
   14a88:	movt	r3, #1
   14a8c:	bl	124b4 <__assert_fail@plt>

00014a90 <flatcc_builder_create_cached_vtable@@Base>:
   14a90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a94:	add	fp, sp, #28
   14a98:	sub	sp, sp, #20
   14a9c:	mov	sl, r0
   14aa0:	ldr	r0, [r0, #116]	; 0x74
   14aa4:	mov	r8, r3
   14aa8:	mov	r5, r2
   14aac:	str	r1, [sp, #16]
   14ab0:	cmp	r0, #0
   14ab4:	beq	14b58 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   14ab8:	ldr	r1, [sl, #92]	; 0x5c
   14abc:	rsb	r0, r0, #32
   14ac0:	lsr	r0, r8, r0
   14ac4:	add	r6, r1, r0, lsl #2
   14ac8:	cmp	r6, #0
   14acc:	beq	14c1c <flatcc_builder_create_cached_vtable@@Base+0x18c>
   14ad0:	ldr	r7, [r6]
   14ad4:	str	r6, [sp, #12]
   14ad8:	cmp	r7, #0
   14adc:	beq	14c24 <flatcc_builder_create_cached_vtable@@Base+0x194>
   14ae0:	ldr	r4, [sl, #68]	; 0x44
   14ae4:	ldr	r8, [sl, #100]	; 0x64
   14ae8:	mov	r0, #0
   14aec:	str	r0, [sp, #8]
   14af0:	add	r9, r8, r7
   14af4:	mov	r1, r4
   14af8:	ldr	r0, [r9, #8]
   14afc:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   14b00:	cmp	r0, r5
   14b04:	bne	14b1c <flatcc_builder_create_cached_vtable@@Base+0x8c>
   14b08:	ldr	r0, [sp, #16]
   14b0c:	mov	r2, r5
   14b10:	bl	1240c <memcmp@plt>
   14b14:	cmp	r0, #0
   14b18:	beq	14b30 <flatcc_builder_create_cached_vtable@@Base+0xa0>
   14b1c:	ldr	r7, [r9, #12]!
   14b20:	cmp	r7, #0
   14b24:	mov	r6, r9
   14b28:	bne	14af0 <flatcc_builder_create_cached_vtable@@Base+0x60>
   14b2c:	b	14c14 <flatcc_builder_create_cached_vtable@@Base+0x184>
   14b30:	ldr	r0, [sl, #152]	; 0x98
   14b34:	ldr	r1, [r9, #4]
   14b38:	cmp	r1, r0
   14b3c:	beq	14d88 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   14b40:	mov	r6, r9
   14b44:	mov	r0, r9
   14b48:	ldr	r7, [r6, #12]!
   14b4c:	cmp	r7, #0
   14b50:	bne	14aec <flatcc_builder_create_cached_vtable@@Base+0x5c>
   14b54:	b	14c28 <flatcc_builder_create_cached_vtable@@Base+0x198>
   14b58:	ldr	r0, [sl, #124]	; 0x7c
   14b5c:	cmp	r0, #0
   14b60:	bne	14dd4 <flatcc_builder_create_cached_vtable@@Base+0x344>
   14b64:	ldr	r0, [sl, #104]	; 0x68
   14b68:	add	r7, sl, #100	; 0x64
   14b6c:	cmp	r0, #15
   14b70:	bhi	14b9c <flatcc_builder_create_cached_vtable@@Base+0x10c>
   14b74:	ldr	r0, [sl, #40]	; 0x28
   14b78:	ldr	r6, [sl, #48]	; 0x30
   14b7c:	mov	r1, #6
   14b80:	mov	r2, #16
   14b84:	mov	r3, #0
   14b88:	str	r1, [sp]
   14b8c:	mov	r1, r7
   14b90:	blx	r6
   14b94:	cmp	r0, #0
   14b98:	bne	14db4 <flatcc_builder_create_cached_vtable@@Base+0x324>
   14b9c:	ldr	r0, [r7]
   14ba0:	mov	r7, #0
   14ba4:	cmp	r0, #0
   14ba8:	beq	14cc8 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14bac:	mov	r0, #16
   14bb0:	mov	r2, #5
   14bb4:	add	r1, sl, #92	; 0x5c
   14bb8:	mov	r3, #1
   14bbc:	mov	r4, #256	; 0x100
   14bc0:	str	r0, [sl, #124]	; 0x7c
   14bc4:	ldr	r0, [sl, #40]	; 0x28
   14bc8:	ldr	r6, [sl, #48]	; 0x30
   14bcc:	str	r2, [sp]
   14bd0:	mov	r2, #256	; 0x100
   14bd4:	blx	r6
   14bd8:	cmp	r0, #0
   14bdc:	bne	14cc8 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14be0:	ldr	r0, [sl, #96]	; 0x60
   14be4:	mov	r1, r4
   14be8:	lsl	r4, r4, #1
   14bec:	cmp	r0, r1, lsl #1
   14bf0:	bcs	14be4 <flatcc_builder_create_cached_vtable@@Base+0x154>
   14bf4:	lsr	r1, r1, #2
   14bf8:	mvn	r0, #0
   14bfc:	mov	r2, #1
   14c00:	add	r0, r0, #1
   14c04:	cmp	r1, r2, lsl r0
   14c08:	bhi	14c00 <flatcc_builder_create_cached_vtable@@Base+0x170>
   14c0c:	str	r0, [sl, #116]	; 0x74
   14c10:	b	14ab8 <flatcc_builder_create_cached_vtable@@Base+0x28>
   14c14:	ldr	r9, [sp, #8]
   14c18:	b	14c28 <flatcc_builder_create_cached_vtable@@Base+0x198>
   14c1c:	mov	r7, #0
   14c20:	b	14cc8 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14c24:	mov	r9, #0
   14c28:	ldr	r4, [sl, #124]	; 0x7c
   14c2c:	ldr	r0, [sl, #104]	; 0x68
   14c30:	add	r7, sl, #100	; 0x64
   14c34:	add	r2, r4, #16
   14c38:	cmp	r2, r0
   14c3c:	bls	14c64 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   14c40:	ldr	r0, [sl, #40]	; 0x28
   14c44:	ldr	r6, [sl, #48]	; 0x30
   14c48:	mov	r1, #6
   14c4c:	mov	r3, #0
   14c50:	str	r1, [sp]
   14c54:	mov	r1, r7
   14c58:	blx	r6
   14c5c:	cmp	r0, #0
   14c60:	bne	14db4 <flatcc_builder_create_cached_vtable@@Base+0x324>
   14c64:	ldr	r0, [r7]
   14c68:	mov	r7, #0
   14c6c:	adds	r4, r0, r4
   14c70:	beq	14cc8 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14c74:	ldr	r0, [sl, #124]	; 0x7c
   14c78:	ldr	r1, [sl, #152]	; 0x98
   14c7c:	add	r2, r0, #16
   14c80:	str	r2, [sl, #124]	; 0x7c
   14c84:	ldr	r2, [sp, #12]
   14c88:	str	r1, [r4, #4]
   14c8c:	ldr	r1, [r2]
   14c90:	str	r1, [r4, #12]
   14c94:	ldr	r1, [sp, #16]
   14c98:	str	r0, [r2]
   14c9c:	mov	r0, sl
   14ca0:	mov	r2, r5
   14ca4:	bl	14950 <flatcc_builder_create_vtable@@Base>
   14ca8:	cmp	r0, #0
   14cac:	str	r0, [r4]
   14cb0:	beq	14cc8 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14cb4:	cmp	r9, #0
   14cb8:	beq	14cd4 <flatcc_builder_create_cached_vtable@@Base+0x244>
   14cbc:	ldr	r0, [r9, #8]
   14cc0:	str	r0, [r4, #8]
   14cc4:	ldr	r7, [r4]
   14cc8:	mov	r0, r7
   14ccc:	sub	sp, fp, #28
   14cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cd4:	ldr	r6, [sl, #120]	; 0x78
   14cd8:	ldr	r0, [sl, #172]	; 0xac
   14cdc:	add	r2, r6, r5
   14ce0:	cmp	r0, #0
   14ce4:	beq	14d20 <flatcc_builder_create_cached_vtable@@Base+0x290>
   14ce8:	cmp	r0, r2
   14cec:	bcs	14d20 <flatcc_builder_create_cached_vtable@@Base+0x290>
   14cf0:	ldr	r0, [sl, #116]	; 0x74
   14cf4:	cmp	r0, #0
   14cf8:	beq	14cc4 <flatcc_builder_create_cached_vtable@@Base+0x234>
   14cfc:	ldr	r0, [sl, #92]	; 0x5c
   14d00:	ldr	r2, [sl, #96]	; 0x60
   14d04:	mov	r1, #0
   14d08:	mov	r5, #0
   14d0c:	bl	12484 <memset@plt>
   14d10:	mov	r0, #16
   14d14:	str	r5, [sl, #120]	; 0x78
   14d18:	str	r0, [sl, #124]	; 0x7c
   14d1c:	b	14cc4 <flatcc_builder_create_cached_vtable@@Base+0x234>
   14d20:	ldr	r0, [sl, #72]	; 0x48
   14d24:	add	r7, sl, #68	; 0x44
   14d28:	cmp	r2, r0
   14d2c:	bls	14d54 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   14d30:	ldr	r0, [sl, #40]	; 0x28
   14d34:	ldr	ip, [sl, #48]	; 0x30
   14d38:	mov	r1, #2
   14d3c:	mov	r3, #0
   14d40:	str	r1, [sp]
   14d44:	mov	r1, r7
   14d48:	blx	ip
   14d4c:	cmp	r0, #0
   14d50:	bne	14db4 <flatcc_builder_create_cached_vtable@@Base+0x324>
   14d54:	ldr	r0, [r7]
   14d58:	adds	r0, r0, r6
   14d5c:	beq	14d80 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   14d60:	ldr	r1, [sl, #120]	; 0x78
   14d64:	mov	r2, r5
   14d68:	str	r1, [r4, #8]
   14d6c:	add	r1, r1, r5
   14d70:	str	r1, [sl, #120]	; 0x78
   14d74:	ldr	r1, [sp, #16]
   14d78:	bl	12400 <memcpy@plt>
   14d7c:	b	14cc4 <flatcc_builder_create_cached_vtable@@Base+0x234>
   14d80:	mvn	r7, #0
   14d84:	b	14cc8 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14d88:	ldr	r0, [sp, #12]
   14d8c:	cmp	r6, r0
   14d90:	beq	14dac <flatcc_builder_create_cached_vtable@@Base+0x31c>
   14d94:	mov	r1, r0
   14d98:	ldr	r0, [r9, #12]
   14d9c:	str	r0, [r6]
   14da0:	ldr	r0, [r1]
   14da4:	str	r0, [r9, #12]
   14da8:	str	r7, [r1]
   14dac:	ldr	r7, [r9]
   14db0:	b	14cc8 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14db4:	movw	r0, #34344	; 0x8628
   14db8:	movw	r1, #29826	; 0x7482
   14dbc:	movw	r3, #33890	; 0x8462
   14dc0:	mov	r2, #308	; 0x134
   14dc4:	movt	r0, #1
   14dc8:	movt	r1, #1
   14dcc:	movt	r3, #1
   14dd0:	bl	124b4 <__assert_fail@plt>
   14dd4:	movw	r0, #34284	; 0x85ec
   14dd8:	movw	r1, #29826	; 0x7482
   14ddc:	movw	r3, #34299	; 0x85fb
   14de0:	movw	r2, #342	; 0x156
   14de4:	movt	r0, #1
   14de8:	movt	r1, #1
   14dec:	movt	r3, #1
   14df0:	bl	124b4 <__assert_fail@plt>

00014df4 <flatcc_builder_create_table@@Base>:
   14df4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14df8:	add	fp, sp, #24
   14dfc:	sub	sp, sp, #80	; 0x50
   14e00:	ldr	r5, [fp, #12]
   14e04:	cmn	r5, #1
   14e08:	ble	14f5c <flatcc_builder_create_table@@Base+0x168>
   14e0c:	ldr	ip, [fp, #16]
   14e10:	tst	ip, #1
   14e14:	beq	14f7c <flatcc_builder_create_table@@Base+0x188>
   14e18:	mov	r8, r0
   14e1c:	ldrh	r0, [r0, #128]	; 0x80
   14e20:	cmp	r3, #4
   14e24:	movls	r3, #4
   14e28:	cmp	r0, r3
   14e2c:	strhcc	r3, [r8, #128]	; 0x80
   14e30:	sub	r3, r3, #1
   14e34:	cmp	r5, #1
   14e38:	ldr	r4, [r8, #136]	; 0x88
   14e3c:	sub	r0, r4, r2
   14e40:	and	r0, r0, r3
   14e44:	add	r3, ip, r0
   14e48:	mvn	ip, #3
   14e4c:	sub	r6, ip, r2
   14e50:	add	r4, r6, r4
   14e54:	add	r6, r4, #1
   14e58:	sub	r3, r6, r3
   14e5c:	str	r3, [fp, #-28]	; 0xffffffe4
   14e60:	blt	14e8c <flatcc_builder_create_table@@Base+0x98>
   14e64:	ldr	r3, [fp, #8]
   14e68:	sub	r6, r4, r0
   14e6c:	sub	r4, ip, r6
   14e70:	ldrh	r6, [r3], #2
   14e74:	subs	r5, r5, #1
   14e78:	ldr	r7, [r6, r1]
   14e7c:	add	r7, r4, r7
   14e80:	sub	r7, r7, r6
   14e84:	str	r7, [r6, r1]
   14e88:	bne	14e70 <flatcc_builder_create_table@@Base+0x7c>
   14e8c:	sub	r3, fp, #28
   14e90:	mov	r4, #4
   14e94:	cmp	r2, #0
   14e98:	str	r3, [sp, #12]
   14e9c:	mov	r3, #1
   14ea0:	str	r4, [sp, #4]
   14ea4:	str	r4, [sp, #16]
   14ea8:	str	r3, [sp, #8]
   14eac:	beq	14ec8 <flatcc_builder_create_table@@Base+0xd4>
   14eb0:	mov	r3, #2
   14eb4:	add	r4, r2, #4
   14eb8:	str	r1, [sp, #20]
   14ebc:	str	r2, [sp, #24]
   14ec0:	str	r3, [sp, #8]
   14ec4:	str	r4, [sp, #4]
   14ec8:	cmp	r0, #0
   14ecc:	beq	14ef8 <flatcc_builder_create_table@@Base+0x104>
   14ed0:	add	r1, sp, #4
   14ed4:	movw	r2, #29296	; 0x7270
   14ed8:	add	r4, r4, r0
   14edc:	add	r1, r1, r3, lsl #3
   14ee0:	add	r3, r3, #1
   14ee4:	movt	r2, #1
   14ee8:	str	r4, [sp, #4]
   14eec:	str	r2, [r1, #8]
   14ef0:	str	r0, [r1, #12]
   14ef4:	str	r3, [sp, #8]
   14ef8:	cmp	r4, #0
   14efc:	ble	14f9c <flatcc_builder_create_table@@Base+0x1a8>
   14f00:	ldr	r0, [r8, #136]	; 0x88
   14f04:	ldr	r7, [r8, #44]	; 0x2c
   14f08:	add	r1, sp, #4
   14f0c:	mov	r2, r3
   14f10:	add	r1, r1, #8
   14f14:	sub	r5, r0, r4
   14f18:	ldr	r0, [r8, #36]	; 0x24
   14f1c:	str	r4, [sp]
   14f20:	mov	r3, r5
   14f24:	blx	r7
   14f28:	cmp	r0, #0
   14f2c:	streq	r5, [r8, #136]	; 0x88
   14f30:	moveq	r0, r5
   14f34:	subeq	sp, fp, #24
   14f38:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f3c:	movw	r0, #34344	; 0x8628
   14f40:	movw	r1, #29826	; 0x7482
   14f44:	movw	r3, #34023	; 0x84e7
   14f48:	movw	r2, #651	; 0x28b
   14f4c:	movt	r0, #1
   14f50:	movt	r1, #1
   14f54:	movt	r3, #1
   14f58:	bl	124b4 <__assert_fail@plt>
   14f5c:	movw	r0, #31710	; 0x7bde
   14f60:	movw	r1, #29826	; 0x7482
   14f64:	movw	r3, #31728	; 0x7bf0
   14f68:	movw	r2, #1237	; 0x4d5
   14f6c:	movt	r0, #1
   14f70:	movt	r1, #1
   14f74:	movt	r3, #1
   14f78:	bl	124b4 <__assert_fail@plt>
   14f7c:	movw	r0, #31884	; 0x7c8c
   14f80:	movw	r1, #29826	; 0x7482
   14f84:	movw	r3, #31728	; 0x7bf0
   14f88:	movw	r2, #1243	; 0x4db
   14f8c:	movt	r0, #1
   14f90:	movt	r1, #1
   14f94:	movt	r3, #1
   14f98:	bl	124b4 <__assert_fail@plt>
   14f9c:	movw	r0, #34344	; 0x8628
   14fa0:	movw	r1, #29826	; 0x7482
   14fa4:	movw	r3, #34023	; 0x84e7
   14fa8:	movw	r2, #647	; 0x287
   14fac:	movt	r0, #1
   14fb0:	movt	r1, #1
   14fb4:	movt	r3, #1
   14fb8:	bl	124b4 <__assert_fail@plt>

00014fbc <flatcc_builder_check_required_field@@Base>:
   14fbc:	ldr	r2, [r0, #32]
   14fc0:	ldrh	r2, [r2, #14]
   14fc4:	cmp	r2, #3
   14fc8:	bne	14ff8 <flatcc_builder_check_required_field@@Base+0x3c>
   14fcc:	ldrh	r3, [r0, #8]
   14fd0:	mov	r2, #0
   14fd4:	cmp	r3, r1
   14fd8:	bls	14ff0 <flatcc_builder_check_required_field@@Base+0x34>
   14fdc:	ldr	r0, [r0, #4]
   14fe0:	add	r0, r0, r1, lsl #1
   14fe4:	ldrh	r2, [r0]
   14fe8:	cmp	r2, #0
   14fec:	movwne	r2, #1
   14ff0:	mov	r0, r2
   14ff4:	bx	lr
   14ff8:	push	{fp, lr}
   14ffc:	mov	fp, sp
   15000:	movw	r0, #31895	; 0x7c97
   15004:	movw	r1, #29826	; 0x7482
   15008:	movw	r3, #31938	; 0x7cc2
   1500c:	movw	r2, #1272	; 0x4f8
   15010:	movt	r0, #1
   15014:	movt	r1, #1
   15018:	movt	r3, #1
   1501c:	bl	124b4 <__assert_fail@plt>

00015020 <flatcc_builder_check_union_field@@Base>:
   15020:	mov	r2, r0
   15024:	ldr	r0, [r0, #32]
   15028:	ldrh	r0, [r0, #14]
   1502c:	cmp	r0, #3
   15030:	bne	15090 <flatcc_builder_check_union_field@@Base+0x70>
   15034:	cmp	r1, #0
   15038:	mov	r0, #0
   1503c:	ldrhne	r3, [r2, #8]
   15040:	cmpne	r3, r1
   15044:	bhi	1504c <flatcc_builder_check_union_field@@Base+0x2c>
   15048:	bx	lr
   1504c:	ldr	r0, [r2, #4]
   15050:	add	r0, r0, r1, lsl #1
   15054:	ldrh	r1, [r0, #-2]
   15058:	cmp	r1, #0
   1505c:	beq	15080 <flatcc_builder_check_union_field@@Base+0x60>
   15060:	ldr	r2, [r2, #16]
   15064:	ldrh	r0, [r0]
   15068:	ldrb	r1, [r2, r1]
   1506c:	cmp	r1, #0
   15070:	beq	15084 <flatcc_builder_check_union_field@@Base+0x64>
   15074:	cmp	r0, #0
   15078:	movwne	r0, #1
   1507c:	bx	lr
   15080:	ldrh	r0, [r0]
   15084:	clz	r0, r0
   15088:	lsr	r0, r0, #5
   1508c:	bx	lr
   15090:	push	{fp, lr}
   15094:	mov	fp, sp
   15098:	movw	r0, #31895	; 0x7c97
   1509c:	movw	r1, #29826	; 0x7482
   150a0:	movw	r3, #32021	; 0x7d15
   150a4:	movw	r2, #1279	; 0x4ff
   150a8:	movt	r0, #1
   150ac:	movt	r1, #1
   150b0:	movt	r3, #1
   150b4:	bl	124b4 <__assert_fail@plt>

000150b8 <flatcc_builder_check_required@@Base>:
   150b8:	push	{fp, lr}
   150bc:	mov	fp, sp
   150c0:	mov	r3, r0
   150c4:	ldr	r0, [r0, #32]
   150c8:	ldrh	r0, [r0, #14]
   150cc:	cmp	r0, #3
   150d0:	bne	15128 <flatcc_builder_check_required@@Base+0x70>
   150d4:	ldrh	ip, [r3, #8]
   150d8:	mov	r0, #0
   150dc:	cmp	ip, r2
   150e0:	movge	r0, #1
   150e4:	cmpge	r2, #1
   150e8:	bge	150f0 <flatcc_builder_check_required@@Base+0x38>
   150ec:	pop	{fp, pc}
   150f0:	ldr	ip, [r3, #4]
   150f4:	mov	lr, #0
   150f8:	b	1510c <flatcc_builder_check_required@@Base+0x54>
   150fc:	add	lr, lr, #1
   15100:	add	r1, r1, #2
   15104:	cmp	lr, r2
   15108:	popge	{fp, pc}
   1510c:	ldrh	r3, [r1]
   15110:	add	r3, ip, r3, lsl #1
   15114:	ldrh	r3, [r3]
   15118:	cmp	r3, #0
   1511c:	bne	150fc <flatcc_builder_check_required@@Base+0x44>
   15120:	mov	r0, #0
   15124:	pop	{fp, pc}
   15128:	movw	r0, #31895	; 0x7c97
   1512c:	movw	r1, #29826	; 0x7482
   15130:	movw	r3, #32101	; 0x7d65
   15134:	movw	r2, #1297	; 0x511
   15138:	movt	r0, #1
   1513c:	movt	r1, #1
   15140:	movt	r3, #1
   15144:	bl	124b4 <__assert_fail@plt>

00015148 <flatcc_builder_end_table@@Base>:
   15148:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1514c:	add	fp, sp, #24
   15150:	sub	sp, sp, #16
   15154:	mov	r4, r0
   15158:	ldr	r0, [r0, #32]
   1515c:	ldrh	r0, [r0, #14]
   15160:	cmp	r0, #3
   15164:	bne	152e0 <flatcc_builder_end_table@@Base+0x198>
   15168:	ldrh	r0, [r4, #8]
   1516c:	ldr	r5, [r4, #4]
   15170:	mov	r1, #4
   15174:	movw	r2, #31153	; 0x79b1
   15178:	movt	r2, #40503	; 0x9e37
   1517c:	add	r0, r1, r0, lsl #1
   15180:	strh	r0, [r5, #-4]!
   15184:	ldrh	r1, [r4, #20]
   15188:	uxth	r6, r0
   1518c:	add	r1, r1, #4
   15190:	strh	r1, [r5, #2]
   15194:	uxth	r1, r1
   15198:	ldr	r0, [r4, #12]
   1519c:	eor	r0, r0, r6
   151a0:	mul	r0, r0, r2
   151a4:	eor	r0, r0, r1
   151a8:	mov	r1, r5
   151ac:	mul	r3, r0, r2
   151b0:	mov	r0, r4
   151b4:	mov	r2, r6
   151b8:	str	r3, [r4, #12]
   151bc:	bl	14a90 <flatcc_builder_create_cached_vtable@@Base>
   151c0:	cmp	r0, #0
   151c4:	beq	152d0 <flatcc_builder_end_table@@Base+0x188>
   151c8:	mov	r7, r0
   151cc:	mov	r0, r5
   151d0:	mov	r1, #0
   151d4:	mov	r2, r6
   151d8:	mov	r8, #0
   151dc:	bl	12484 <memset@plt>
   151e0:	ldr	r5, [r4, #32]
   151e4:	ldr	r0, [r4, #76]	; 0x4c
   151e8:	ldr	r6, [r4]
   151ec:	ldrh	r3, [r4, #130]	; 0x82
   151f0:	ldr	r1, [r4, #16]
   151f4:	ldr	r2, [r4, #20]
   151f8:	ldr	r5, [r5, #20]
   151fc:	add	r0, r0, r5
   15200:	sub	r6, r6, r0
   15204:	asr	r6, r6, #1
   15208:	stm	sp, {r0, r6, r7}
   1520c:	mov	r0, r4
   15210:	bl	14df4 <flatcc_builder_create_table@@Base>
   15214:	cmp	r0, #0
   15218:	beq	152d4 <flatcc_builder_end_table@@Base+0x18c>
   1521c:	ldr	r1, [r4, #32]
   15220:	mov	r5, r0
   15224:	ldr	r0, [r4, #16]
   15228:	ldr	r2, [r4, #20]
   1522c:	ldr	r3, [r4, #52]	; 0x34
   15230:	ldr	r7, [r1, #24]
   15234:	str	r7, [r4, #12]
   15238:	ldrh	r7, [r1, #28]
   1523c:	strh	r7, [r4, #8]
   15240:	ldr	r7, [r1, #16]
   15244:	add	r3, r3, r7
   15248:	str	r3, [r4, #4]
   1524c:	ldr	r3, [r4, #76]	; 0x4c
   15250:	ldr	r1, [r1, #20]
   15254:	add	r1, r3, r1
   15258:	str	r1, [r4]
   1525c:	mov	r1, #0
   15260:	bl	12484 <memset@plt>
   15264:	ldr	r0, [r4, #32]
   15268:	ldr	r1, [r4, #60]	; 0x3c
   1526c:	ldr	r2, [r4, #64]	; 0x40
   15270:	mov	r8, r5
   15274:	ldr	r3, [r0, #8]
   15278:	str	r3, [r4, #20]
   1527c:	ldr	r3, [r0]
   15280:	str	r3, [r4, #28]
   15284:	add	r1, r1, r3
   15288:	ldr	r7, [r0, #4]
   1528c:	str	r1, [r4, #16]
   15290:	sub	r1, r2, r3
   15294:	cmp	r1, r7
   15298:	movhi	r1, r7
   1529c:	str	r1, [r4, #24]
   152a0:	ldrh	r1, [r4, #130]	; 0x82
   152a4:	ldrh	r2, [r4, #128]	; 0x80
   152a8:	cmp	r2, r1
   152ac:	strhcc	r1, [r4, #128]	; 0x80
   152b0:	ldrh	r1, [r0, #12]
   152b4:	sub	r0, r0, #36	; 0x24
   152b8:	str	r0, [r4, #32]
   152bc:	strh	r1, [r4, #130]	; 0x82
   152c0:	ldr	r0, [r4, #156]	; 0x9c
   152c4:	sub	r0, r0, #1
   152c8:	str	r0, [r4, #156]	; 0x9c
   152cc:	b	152d4 <flatcc_builder_end_table@@Base+0x18c>
   152d0:	mov	r8, #0
   152d4:	mov	r0, r8
   152d8:	sub	sp, fp, #24
   152dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   152e0:	movw	r0, #31895	; 0x7c97
   152e4:	movw	r1, #29826	; 0x7482
   152e8:	movw	r3, #32191	; 0x7dbf
   152ec:	movw	r2, #1317	; 0x525
   152f0:	movt	r0, #1
   152f4:	movt	r1, #1
   152f8:	movt	r3, #1
   152fc:	bl	124b4 <__assert_fail@plt>

00015300 <flatcc_builder_create_vector@@Base>:
   15300:	push	{r4, r5, r6, r7, fp, lr}
   15304:	add	fp, sp, #16
   15308:	sub	sp, sp, #80	; 0x50
   1530c:	mov	r7, r0
   15310:	ldr	r0, [fp, #12]
   15314:	cmp	r2, r0
   15318:	bhi	15418 <flatcc_builder_create_vector@@Base+0x118>
   1531c:	ldr	r0, [fp, #8]
   15320:	mov	r4, r2
   15324:	ldrh	r2, [r7, #128]	; 0x80
   15328:	mov	r5, #4
   1532c:	cmp	r0, #4
   15330:	movls	r0, r5
   15334:	cmp	r2, r0
   15338:	sub	r2, fp, #20
   1533c:	strhcc	r0, [r7, #128]	; 0x80
   15340:	str	r4, [fp, #-20]	; 0xffffffec
   15344:	sub	r0, r0, #1
   15348:	ldr	ip, [r7, #136]	; 0x88
   1534c:	str	r2, [sp, #12]
   15350:	mov	r2, #1
   15354:	str	r5, [sp, #4]
   15358:	str	r5, [sp, #16]
   1535c:	str	r2, [sp, #8]
   15360:	mls	r6, r3, r4, ip
   15364:	mul	r3, r3, r4
   15368:	and	r0, r6, r0
   1536c:	cmp	r3, #0
   15370:	beq	1538c <flatcc_builder_create_vector@@Base+0x8c>
   15374:	mov	r2, #2
   15378:	add	r5, r3, #4
   1537c:	str	r1, [sp, #20]
   15380:	str	r3, [sp, #24]
   15384:	str	r2, [sp, #8]
   15388:	str	r5, [sp, #4]
   1538c:	cmp	r0, #0
   15390:	beq	153bc <flatcc_builder_create_vector@@Base+0xbc>
   15394:	add	r1, sp, #4
   15398:	movw	r3, #29296	; 0x7270
   1539c:	add	r5, r5, r0
   153a0:	add	r1, r1, r2, lsl #3
   153a4:	add	r2, r2, #1
   153a8:	movt	r3, #1
   153ac:	str	r5, [sp, #4]
   153b0:	str	r3, [r1, #8]
   153b4:	str	r0, [r1, #12]
   153b8:	str	r2, [sp, #8]
   153bc:	cmp	r5, #0
   153c0:	ble	15438 <flatcc_builder_create_vector@@Base+0x138>
   153c4:	ldr	r0, [r7, #36]	; 0x24
   153c8:	ldr	r6, [r7, #44]	; 0x2c
   153cc:	add	r1, sp, #4
   153d0:	sub	r4, ip, r5
   153d4:	str	r5, [sp]
   153d8:	add	r1, r1, #8
   153dc:	mov	r3, r4
   153e0:	blx	r6
   153e4:	cmp	r0, #0
   153e8:	streq	r4, [r7, #136]	; 0x88
   153ec:	moveq	r0, r4
   153f0:	subeq	sp, fp, #16
   153f4:	popeq	{r4, r5, r6, r7, fp, pc}
   153f8:	movw	r0, #34344	; 0x8628
   153fc:	movw	r1, #29826	; 0x7482
   15400:	movw	r3, #34023	; 0x84e7
   15404:	movw	r2, #651	; 0x28b
   15408:	movt	r0, #1
   1540c:	movt	r1, #1
   15410:	movt	r3, #1
   15414:	bl	124b4 <__assert_fail@plt>
   15418:	movw	r0, #32257	; 0x7e01
   1541c:	movw	r1, #29826	; 0x7482
   15420:	movw	r3, #32276	; 0x7e14
   15424:	movw	r2, #1365	; 0x555
   15428:	movt	r0, #1
   1542c:	movt	r1, #1
   15430:	movt	r3, #1
   15434:	bl	124b4 <__assert_fail@plt>
   15438:	movw	r0, #34344	; 0x8628
   1543c:	movw	r1, #29826	; 0x7482
   15440:	movw	r3, #34023	; 0x84e7
   15444:	movw	r2, #647	; 0x287
   15448:	movt	r0, #1
   1544c:	movt	r1, #1
   15450:	movt	r3, #1
   15454:	bl	124b4 <__assert_fail@plt>

00015458 <flatcc_builder_end_vector@@Base>:
   15458:	push	{r4, r5, fp, lr}
   1545c:	add	fp, sp, #8
   15460:	sub	sp, sp, #8
   15464:	mov	r4, r0
   15468:	ldr	r0, [r0, #32]
   1546c:	ldrh	r1, [r0, #14]
   15470:	cmp	r1, #4
   15474:	bne	15528 <flatcc_builder_end_vector@@Base+0xd0>
   15478:	ldr	r3, [r0, #16]
   1547c:	ldr	r2, [r0, #20]
   15480:	ldr	r0, [r0, #24]
   15484:	ldr	r1, [r4, #16]
   15488:	ldrh	r5, [r4, #130]	; 0x82
   1548c:	str	r0, [sp, #4]
   15490:	mov	r0, r4
   15494:	str	r5, [sp]
   15498:	bl	15300 <flatcc_builder_create_vector@@Base>
   1549c:	mov	r5, r0
   154a0:	cmp	r0, #0
   154a4:	beq	1551c <flatcc_builder_end_vector@@Base+0xc4>
   154a8:	ldr	r0, [r4, #16]
   154ac:	ldr	r2, [r4, #20]
   154b0:	mov	r1, #0
   154b4:	bl	12484 <memset@plt>
   154b8:	ldr	r0, [r4, #32]
   154bc:	ldr	r1, [r4, #60]	; 0x3c
   154c0:	ldr	ip, [r4, #64]	; 0x40
   154c4:	ldr	r3, [r0, #8]
   154c8:	str	r3, [r4, #20]
   154cc:	ldr	r3, [r0]
   154d0:	str	r3, [r4, #28]
   154d4:	add	r1, r1, r3
   154d8:	ldr	r2, [r0, #4]
   154dc:	str	r1, [r4, #16]
   154e0:	sub	r1, ip, r3
   154e4:	cmp	r1, r2
   154e8:	movhi	r1, r2
   154ec:	str	r1, [r4, #24]
   154f0:	ldrh	r1, [r4, #130]	; 0x82
   154f4:	ldrh	r2, [r4, #128]	; 0x80
   154f8:	cmp	r2, r1
   154fc:	strhcc	r1, [r4, #128]	; 0x80
   15500:	ldrh	r1, [r0, #12]
   15504:	sub	r0, r0, #36	; 0x24
   15508:	str	r0, [r4, #32]
   1550c:	strh	r1, [r4, #130]	; 0x82
   15510:	ldr	r0, [r4, #156]	; 0x9c
   15514:	sub	r0, r0, #1
   15518:	str	r0, [r4, #156]	; 0x9c
   1551c:	mov	r0, r5
   15520:	sub	sp, fp, #8
   15524:	pop	{r4, r5, fp, pc}
   15528:	movw	r0, #30629	; 0x77a5
   1552c:	movw	r1, #29826	; 0x7482
   15530:	movw	r3, #32394	; 0x7e8a
   15534:	movw	r2, #1400	; 0x578
   15538:	movt	r0, #1
   1553c:	movt	r1, #1
   15540:	movt	r3, #1
   15544:	bl	124b4 <__assert_fail@plt>

00015548 <flatcc_builder_vector_count@@Base>:
   15548:	ldr	r0, [r0, #32]
   1554c:	ldr	r0, [r0, #20]
   15550:	bx	lr

00015554 <flatcc_builder_vector_edit@@Base>:
   15554:	ldr	r0, [r0, #16]
   15558:	bx	lr

0001555c <flatcc_builder_create_offset_vector_direct@@Base>:
   1555c:	mov	r3, #0
   15560:	b	15564 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15564:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15568:	add	fp, sp, #24
   1556c:	sub	sp, sp, #80	; 0x50
   15570:	mov	r6, #0
   15574:	cmn	r2, #-1073741823	; 0xc0000001
   15578:	bhi	156b4 <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   1557c:	mov	r8, r0
   15580:	ldrh	r0, [r0, #128]	; 0x80
   15584:	sub	r7, fp, #28
   15588:	mov	r5, #4
   1558c:	mov	r4, #1
   15590:	cmp	r0, #3
   15594:	movls	r0, #4
   15598:	strhls	r0, [r8, #128]	; 0x80
   1559c:	str	r2, [fp, #-28]	; 0xffffffe4
   155a0:	ldr	ip, [r8, #136]	; 0x88
   155a4:	str	r7, [sp, #12]
   155a8:	mov	r7, #0
   155ac:	str	r5, [sp, #4]
   155b0:	str	r5, [sp, #16]
   155b4:	str	r4, [sp, #8]
   155b8:	cmp	r7, r2, lsl #2
   155bc:	and	r6, ip, #3
   155c0:	beq	155e0 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   155c4:	lsl	r7, r2, #2
   155c8:	mov	r4, #2
   155cc:	str	r1, [sp, #20]
   155d0:	add	r5, r7, #4
   155d4:	str	r7, [sp, #24]
   155d8:	str	r4, [sp, #8]
   155dc:	str	r5, [sp, #4]
   155e0:	cmp	r6, #0
   155e4:	beq	15610 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   155e8:	add	r7, sp, #4
   155ec:	movw	r0, #29296	; 0x7270
   155f0:	add	r5, r5, r6
   155f4:	add	r7, r7, r4, lsl #3
   155f8:	add	r4, r4, #1
   155fc:	movt	r0, #1
   15600:	str	r5, [sp, #4]
   15604:	str	r0, [r7, #8]
   15608:	str	r6, [r7, #12]
   1560c:	str	r4, [sp, #8]
   15610:	cmp	r2, #0
   15614:	beq	1567c <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   15618:	mvn	r0, #3
   1561c:	mov	r6, #0
   15620:	sub	r0, r0, ip
   15624:	add	r0, r0, r5
   15628:	ldr	r7, [r1, r6, lsl #2]
   1562c:	cmp	r7, #0
   15630:	beq	15654 <flatcc_builder_create_offset_vector_direct@@Base+0xf8>
   15634:	add	r7, r0, r7
   15638:	cmp	r3, #0
   1563c:	str	r7, [r1, r6, lsl #2]
   15640:	beq	15668 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   15644:	ldrb	r7, [r3, r6]
   15648:	cmp	r7, #0
   1564c:	bne	15668 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   15650:	b	156c0 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   15654:	cmp	r3, #0
   15658:	beq	15700 <flatcc_builder_create_offset_vector_direct@@Base+0x1a4>
   1565c:	ldrb	r7, [r3, r6]
   15660:	cmp	r7, #0
   15664:	bne	156e0 <flatcc_builder_create_offset_vector_direct@@Base+0x184>
   15668:	add	r6, r6, #1
   1566c:	sub	r0, r0, #4
   15670:	cmp	r6, r2
   15674:	bcc	15628 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   15678:	ldr	ip, [r8, #136]	; 0x88
   1567c:	cmp	r5, #0
   15680:	ble	15720 <flatcc_builder_create_offset_vector_direct@@Base+0x1c4>
   15684:	ldr	r0, [r8, #36]	; 0x24
   15688:	ldr	r7, [r8, #44]	; 0x2c
   1568c:	add	r1, sp, #4
   15690:	sub	r6, ip, r5
   15694:	mov	r2, r4
   15698:	str	r5, [sp]
   1569c:	add	r1, r1, #8
   156a0:	mov	r3, r6
   156a4:	blx	r7
   156a8:	cmp	r0, #0
   156ac:	bne	15740 <flatcc_builder_create_offset_vector_direct@@Base+0x1e4>
   156b0:	str	r6, [r8, #136]	; 0x88
   156b4:	mov	r0, r6
   156b8:	sub	sp, fp, #24
   156bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   156c0:	movw	r0, #34332	; 0x861c
   156c4:	movw	r1, #29826	; 0x7482
   156c8:	movw	r3, #34346	; 0x862a
   156cc:	movw	r2, #1457	; 0x5b1
   156d0:	movt	r0, #1
   156d4:	movt	r1, #1
   156d8:	movt	r3, #1
   156dc:	bl	124b4 <__assert_fail@plt>
   156e0:	movw	r0, #34477	; 0x86ad
   156e4:	movw	r1, #29826	; 0x7482
   156e8:	movw	r3, #34346	; 0x862a
   156ec:	movw	r2, #1461	; 0x5b5
   156f0:	movt	r0, #1
   156f4:	movt	r1, #1
   156f8:	movt	r3, #1
   156fc:	bl	124b4 <__assert_fail@plt>
   15700:	movw	r0, #34344	; 0x8628
   15704:	movw	r1, #29826	; 0x7482
   15708:	movw	r3, #34346	; 0x862a
   1570c:	movw	r2, #1463	; 0x5b7
   15710:	movt	r0, #1
   15714:	movt	r1, #1
   15718:	movt	r3, #1
   1571c:	bl	124b4 <__assert_fail@plt>
   15720:	movw	r0, #34344	; 0x8628
   15724:	movw	r1, #29826	; 0x7482
   15728:	movw	r3, #34023	; 0x84e7
   1572c:	movw	r2, #647	; 0x287
   15730:	movt	r0, #1
   15734:	movt	r1, #1
   15738:	movt	r3, #1
   1573c:	bl	124b4 <__assert_fail@plt>
   15740:	movw	r0, #34344	; 0x8628
   15744:	movw	r1, #29826	; 0x7482
   15748:	movw	r3, #34023	; 0x84e7
   1574c:	movw	r2, #651	; 0x28b
   15750:	movt	r0, #1
   15754:	movt	r1, #1
   15758:	movt	r3, #1
   1575c:	bl	124b4 <__assert_fail@plt>

00015760 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15760:	push	{r4, r5, fp, lr}
   15764:	add	fp, sp, #8
   15768:	mov	r4, r0
   1576c:	ldr	r0, [r0, #32]
   15770:	mov	r3, r1
   15774:	ldrh	r1, [r0, #14]
   15778:	cmp	r1, #5
   1577c:	bne	15818 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   15780:	ldr	r2, [r0, #20]
   15784:	ldr	r1, [r4, #16]
   15788:	mov	r0, r4
   1578c:	bl	15564 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15790:	mov	r5, r0
   15794:	cmp	r0, #0
   15798:	beq	15810 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   1579c:	ldr	r0, [r4, #16]
   157a0:	ldr	r2, [r4, #20]
   157a4:	mov	r1, #0
   157a8:	bl	12484 <memset@plt>
   157ac:	ldr	r0, [r4, #32]
   157b0:	ldr	r1, [r4, #60]	; 0x3c
   157b4:	ldr	ip, [r4, #64]	; 0x40
   157b8:	ldr	r3, [r0, #8]
   157bc:	str	r3, [r4, #20]
   157c0:	ldr	r3, [r0]
   157c4:	str	r3, [r4, #28]
   157c8:	add	r1, r1, r3
   157cc:	ldr	r2, [r0, #4]
   157d0:	str	r1, [r4, #16]
   157d4:	sub	r1, ip, r3
   157d8:	cmp	r1, r2
   157dc:	movhi	r1, r2
   157e0:	str	r1, [r4, #24]
   157e4:	ldrh	r1, [r4, #130]	; 0x82
   157e8:	ldrh	r2, [r4, #128]	; 0x80
   157ec:	cmp	r2, r1
   157f0:	strhcc	r1, [r4, #128]	; 0x80
   157f4:	ldrh	r1, [r0, #12]
   157f8:	sub	r0, r0, #36	; 0x24
   157fc:	str	r0, [r4, #32]
   15800:	strh	r1, [r4, #130]	; 0x82
   15804:	ldr	r0, [r4, #156]	; 0x9c
   15808:	sub	r0, r0, #1
   1580c:	str	r0, [r4, #156]	; 0x9c
   15810:	mov	r0, r5
   15814:	pop	{r4, r5, fp, pc}
   15818:	movw	r0, #30878	; 0x789e
   1581c:	movw	r1, #29826	; 0x7482
   15820:	movw	r3, #32535	; 0x7f17
   15824:	movw	r2, #1493	; 0x5d5
   15828:	movt	r0, #1
   1582c:	movt	r1, #1
   15830:	movt	r3, #1
   15834:	bl	124b4 <__assert_fail@plt>

00015838 <flatcc_builder_offset_vector_edit@@Base>:
   15838:	ldr	r0, [r0, #16]
   1583c:	bx	lr

00015840 <flatcc_builder_offset_vector_count@@Base>:
   15840:	ldr	r0, [r0, #32]
   15844:	ldr	r0, [r0, #20]
   15848:	bx	lr

0001584c <flatcc_builder_table_add_union@@Base>:
   1584c:	push	{r4, r5, r6, r7, fp, lr}
   15850:	add	fp, sp, #16
   15854:	mov	r5, r0
   15858:	ldr	r0, [r0, #32]
   1585c:	ldrh	r0, [r0, #14]
   15860:	cmp	r0, #3
   15864:	bne	158ec <flatcc_builder_table_add_union@@Base+0xa0>
   15868:	mov	r7, r3
   1586c:	mov	r4, r2
   15870:	mov	r6, r1
   15874:	cmp	r3, #0
   15878:	beq	15888 <flatcc_builder_table_add_union@@Base+0x3c>
   1587c:	uxtb	r0, r4
   15880:	cmp	r0, #0
   15884:	beq	1590c <flatcc_builder_table_add_union@@Base+0xc0>
   15888:	cmp	r7, #0
   1588c:	beq	158a8 <flatcc_builder_table_add_union@@Base+0x5c>
   15890:	mov	r0, r5
   15894:	mov	r1, r6
   15898:	bl	1594c <flatcc_builder_table_add_offset@@Base>
   1589c:	cmp	r0, #0
   158a0:	beq	1592c <flatcc_builder_table_add_union@@Base+0xe0>
   158a4:	str	r7, [r0]
   158a8:	sub	r1, r6, #1
   158ac:	mov	r0, r5
   158b0:	mov	r2, #1
   158b4:	mov	r3, #1
   158b8:	bl	15a88 <flatcc_builder_table_add@@Base>
   158bc:	cmp	r0, #0
   158c0:	strbne	r4, [r0]
   158c4:	movne	r0, #0
   158c8:	popne	{r4, r5, r6, r7, fp, pc}
   158cc:	movw	r0, #32781	; 0x800d
   158d0:	movw	r1, #29826	; 0x7482
   158d4:	movw	r3, #32649	; 0x7f89
   158d8:	movw	r2, #1526	; 0x5f6
   158dc:	movt	r0, #1
   158e0:	movt	r1, #1
   158e4:	movt	r3, #1
   158e8:	bl	124b4 <__assert_fail@plt>
   158ec:	movw	r0, #31895	; 0x7c97
   158f0:	movw	r1, #29826	; 0x7482
   158f4:	movw	r3, #32649	; 0x7f89
   158f8:	movw	r2, #1518	; 0x5ee
   158fc:	movt	r0, #1
   15900:	movt	r1, #1
   15904:	movt	r3, #1
   15908:	bl	124b4 <__assert_fail@plt>
   1590c:	movw	r0, #32737	; 0x7fe1
   15910:	movw	r1, #29826	; 0x7482
   15914:	movw	r3, #32649	; 0x7f89
   15918:	movw	r2, #1519	; 0x5ef
   1591c:	movt	r0, #1
   15920:	movt	r1, #1
   15924:	movt	r3, #1
   15928:	bl	124b4 <__assert_fail@plt>
   1592c:	movw	r0, #32771	; 0x8003
   15930:	movw	r1, #29826	; 0x7482
   15934:	movw	r3, #32649	; 0x7f89
   15938:	movw	r2, #1522	; 0x5f2
   1593c:	movt	r0, #1
   15940:	movt	r1, #1
   15944:	movt	r3, #1
   15948:	bl	124b4 <__assert_fail@plt>

0001594c <flatcc_builder_table_add_offset@@Base>:
   1594c:	push	{r4, r5, r6, r7, fp, lr}
   15950:	add	fp, sp, #16
   15954:	mov	r4, r0
   15958:	ldr	r0, [r0, #32]
   1595c:	ldrh	r0, [r0, #14]
   15960:	cmp	r0, #3
   15964:	bne	15a28 <flatcc_builder_table_add_offset@@Base+0xdc>
   15968:	movw	r0, #32765	; 0x7ffd
   1596c:	mov	r5, r1
   15970:	cmp	r1, r0
   15974:	bcs	15a48 <flatcc_builder_table_add_offset@@Base+0xfc>
   15978:	ldr	r0, [r4, #4]
   1597c:	add	r1, r0, r5, lsl #1
   15980:	ldrh	r1, [r1]
   15984:	cmp	r1, #0
   15988:	bne	15a68 <flatcc_builder_table_add_offset@@Base+0x11c>
   1598c:	ldr	r2, [r4, #20]
   15990:	ldr	r1, [r4, #12]
   15994:	ldr	r3, [r4, #24]
   15998:	add	r2, r2, #3
   1599c:	eor	r1, r1, r5
   159a0:	bic	r7, r2, #3
   159a4:	movw	r2, #31153	; 0x79b1
   159a8:	movt	r2, #40503	; 0x9e37
   159ac:	add	r6, r7, #4
   159b0:	mul	r1, r1, r2
   159b4:	cmp	r6, r3
   159b8:	str	r6, [r4, #20]
   159bc:	eor	r1, r1, #4
   159c0:	mul	r1, r1, r2
   159c4:	str	r1, [r4, #12]
   159c8:	bls	159f0 <flatcc_builder_table_add_offset@@Base+0xa4>
   159cc:	mov	r0, r4
   159d0:	mov	r1, r6
   159d4:	movw	r2, #65532	; 0xfffc
   159d8:	bl	16948 <flatcc_builder_get_emit_context@@Base+0x8>
   159dc:	mov	r1, r0
   159e0:	mov	r0, #0
   159e4:	cmp	r1, #0
   159e8:	popne	{r4, r5, r6, r7, fp, pc}
   159ec:	ldr	r0, [r4, #4]
   159f0:	uxth	r1, r5
   159f4:	add	r0, r0, r1, lsl #1
   159f8:	strh	r6, [r0]
   159fc:	ldrh	r0, [r4, #8]
   15a00:	cmp	r0, r1
   15a04:	addls	r0, r5, #1
   15a08:	strhls	r0, [r4, #8]
   15a0c:	ldr	r0, [r4]
   15a10:	add	r1, r0, #2
   15a14:	str	r1, [r4]
   15a18:	strh	r7, [r0]
   15a1c:	ldr	r0, [r4, #16]
   15a20:	add	r0, r0, r7
   15a24:	pop	{r4, r5, r6, r7, fp, pc}
   15a28:	movw	r0, #31895	; 0x7c97
   15a2c:	movw	r1, #29826	; 0x7482
   15a30:	movw	r3, #33675	; 0x838b
   15a34:	movw	r2, #1811	; 0x713
   15a38:	movt	r0, #1
   15a3c:	movt	r1, #1
   15a40:	movt	r3, #1
   15a44:	bl	124b4 <__assert_fail@plt>
   15a48:	movw	r0, #33547	; 0x830b
   15a4c:	movw	r1, #29826	; 0x7482
   15a50:	movw	r3, #33675	; 0x838b
   15a54:	movw	r2, #1812	; 0x714
   15a58:	movt	r0, #1
   15a5c:	movt	r1, #1
   15a60:	movt	r3, #1
   15a64:	bl	124b4 <__assert_fail@plt>
   15a68:	movw	r0, #34344	; 0x8628
   15a6c:	movw	r1, #29826	; 0x7482
   15a70:	movw	r3, #33675	; 0x838b
   15a74:	movw	r2, #1819	; 0x71b
   15a78:	movt	r0, #1
   15a7c:	movt	r1, #1
   15a80:	movt	r3, #1
   15a84:	bl	124b4 <__assert_fail@plt>

00015a88 <flatcc_builder_table_add@@Base>:
   15a88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15a8c:	add	fp, sp, #24
   15a90:	mov	r4, r0
   15a94:	ldr	r0, [r0, #32]
   15a98:	ldrh	r0, [r0, #14]
   15a9c:	cmp	r0, #3
   15aa0:	bne	15b6c <flatcc_builder_table_add@@Base+0xe4>
   15aa4:	movw	r0, #32765	; 0x7ffd
   15aa8:	mov	r8, r1
   15aac:	cmp	r1, r0
   15ab0:	bcs	15b8c <flatcc_builder_table_add@@Base+0x104>
   15ab4:	ldrh	r0, [r4, #130]	; 0x82
   15ab8:	cmp	r0, r3
   15abc:	strhcc	r3, [r4, #130]	; 0x82
   15ac0:	ldr	r0, [r4, #4]
   15ac4:	add	r1, r0, r8, lsl #1
   15ac8:	ldrh	r1, [r1]
   15acc:	cmp	r1, #0
   15ad0:	bne	15bac <flatcc_builder_table_add@@Base+0x124>
   15ad4:	ldr	r1, [r4, #12]
   15ad8:	movw	r7, #31153	; 0x79b1
   15adc:	ldr	r6, [r4, #20]
   15ae0:	ldr	r5, [r4, #24]
   15ae4:	movt	r7, #40503	; 0x9e37
   15ae8:	eor	r1, r1, r8
   15aec:	mul	r1, r1, r7
   15af0:	eor	r1, r1, r2
   15af4:	mul	r1, r1, r7
   15af8:	str	r1, [r4, #12]
   15afc:	add	r1, r3, r6
   15b00:	rsb	r3, r3, #0
   15b04:	sub	r1, r1, #1
   15b08:	and	r6, r1, r3
   15b0c:	add	r1, r6, r2
   15b10:	cmp	r1, r5
   15b14:	str	r1, [r4, #20]
   15b18:	bcc	15b40 <flatcc_builder_table_add@@Base+0xb8>
   15b1c:	add	r1, r1, #1
   15b20:	mov	r0, r4
   15b24:	movw	r2, #65532	; 0xfffc
   15b28:	bl	16948 <flatcc_builder_get_emit_context@@Base+0x8>
   15b2c:	mov	r1, r0
   15b30:	mov	r0, #0
   15b34:	cmp	r1, #0
   15b38:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b3c:	ldr	r0, [r4, #4]
   15b40:	uxth	r1, r8
   15b44:	add	r2, r6, #4
   15b48:	add	r0, r0, r1, lsl #1
   15b4c:	strh	r2, [r0]
   15b50:	ldrh	r0, [r4, #8]
   15b54:	cmp	r0, r1
   15b58:	addls	r0, r8, #1
   15b5c:	strhls	r0, [r4, #8]
   15b60:	ldr	r0, [r4, #16]
   15b64:	add	r0, r0, r6
   15b68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b6c:	movw	r0, #31895	; 0x7c97
   15b70:	movw	r1, #29826	; 0x7482
   15b74:	movw	r3, #33473	; 0x82c1
   15b78:	movw	r2, #1773	; 0x6ed
   15b7c:	movt	r0, #1
   15b80:	movt	r1, #1
   15b84:	movt	r3, #1
   15b88:	bl	124b4 <__assert_fail@plt>
   15b8c:	movw	r0, #33547	; 0x830b
   15b90:	movw	r1, #29826	; 0x7482
   15b94:	movw	r3, #33473	; 0x82c1
   15b98:	movw	r2, #1774	; 0x6ee
   15b9c:	movt	r0, #1
   15ba0:	movt	r1, #1
   15ba4:	movt	r3, #1
   15ba8:	bl	124b4 <__assert_fail@plt>
   15bac:	movw	r0, #34344	; 0x8628
   15bb0:	movw	r1, #29826	; 0x7482
   15bb4:	movw	r3, #33473	; 0x82c1
   15bb8:	movw	r2, #1784	; 0x6f8
   15bbc:	movt	r0, #1
   15bc0:	movt	r1, #1
   15bc4:	movt	r3, #1
   15bc8:	bl	124b4 <__assert_fail@plt>

00015bcc <flatcc_builder_table_add_union_vector@@Base>:
   15bcc:	push	{r4, r5, r6, r7, fp, lr}
   15bd0:	add	fp, sp, #16
   15bd4:	mov	r6, r0
   15bd8:	ldr	r0, [r0, #32]
   15bdc:	ldrh	r0, [r0, #14]
   15be0:	cmp	r0, #3
   15be4:	bne	15c4c <flatcc_builder_table_add_union_vector@@Base+0x80>
   15be8:	clz	r0, r3
   15bec:	mov	r5, r1
   15bf0:	clz	r1, r2
   15bf4:	mov	r4, r3
   15bf8:	mov	r7, r2
   15bfc:	lsr	r0, r0, #5
   15c00:	lsr	r1, r1, #5
   15c04:	cmp	r1, r0
   15c08:	bne	15c6c <flatcc_builder_table_add_union_vector@@Base+0xa0>
   15c0c:	cmp	r7, #0
   15c10:	beq	15c44 <flatcc_builder_table_add_union_vector@@Base+0x78>
   15c14:	sub	r1, r5, #1
   15c18:	mov	r0, r6
   15c1c:	bl	1594c <flatcc_builder_table_add_offset@@Base>
   15c20:	cmp	r0, #0
   15c24:	beq	15c8c <flatcc_builder_table_add_union_vector@@Base+0xc0>
   15c28:	str	r7, [r0]
   15c2c:	mov	r0, r6
   15c30:	mov	r1, r5
   15c34:	bl	1594c <flatcc_builder_table_add_offset@@Base>
   15c38:	cmp	r0, #0
   15c3c:	beq	15cac <flatcc_builder_table_add_union_vector@@Base+0xe0>
   15c40:	str	r4, [r0]
   15c44:	mov	r0, #0
   15c48:	pop	{r4, r5, r6, r7, fp, pc}
   15c4c:	movw	r0, #31895	; 0x7c97
   15c50:	movw	r1, #29826	; 0x7482
   15c54:	movw	r3, #32793	; 0x8019
   15c58:	mov	r2, #1536	; 0x600
   15c5c:	movt	r0, #1
   15c60:	movt	r1, #1
   15c64:	movt	r3, #1
   15c68:	bl	124b4 <__assert_fail@plt>
   15c6c:	movw	r0, #32892	; 0x807c
   15c70:	movw	r1, #29826	; 0x7482
   15c74:	movw	r3, #32793	; 0x8019
   15c78:	movw	r2, #1537	; 0x601
   15c7c:	movt	r0, #1
   15c80:	movt	r1, #1
   15c84:	movt	r3, #1
   15c88:	bl	124b4 <__assert_fail@plt>
   15c8c:	movw	r0, #32771	; 0x8003
   15c90:	movw	r1, #29826	; 0x7482
   15c94:	movw	r3, #32793	; 0x8019
   15c98:	movw	r2, #1540	; 0x604
   15c9c:	movt	r0, #1
   15ca0:	movt	r1, #1
   15ca4:	movt	r3, #1
   15ca8:	bl	124b4 <__assert_fail@plt>
   15cac:	movw	r0, #32771	; 0x8003
   15cb0:	movw	r1, #29826	; 0x7482
   15cb4:	movw	r3, #32793	; 0x8019
   15cb8:	movw	r2, #1544	; 0x608
   15cbc:	movt	r0, #1
   15cc0:	movt	r1, #1
   15cc4:	movt	r3, #1
   15cc8:	bl	124b4 <__assert_fail@plt>

00015ccc <flatcc_builder_create_union_vector@@Base>:
   15ccc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cd0:	add	fp, sp, #28
   15cd4:	sub	sp, sp, #20
   15cd8:	mov	sl, r0
   15cdc:	mov	r0, #0
   15ce0:	mov	r9, r3
   15ce4:	mov	r7, r2
   15ce8:	mov	r4, r1
   15cec:	str	r0, [sl]
   15cf0:	str	r0, [sl, #4]
   15cf4:	mov	r0, r1
   15cf8:	bl	14478 <flatcc_builder_start_offset_vector@@Base>
   15cfc:	cmp	r0, #0
   15d00:	beq	15d0c <flatcc_builder_create_union_vector@@Base+0x40>
   15d04:	sub	sp, fp, #28
   15d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d0c:	mov	r0, r4
   15d10:	mov	r1, r9
   15d14:	bl	13e34 <flatcc_builder_extend_offset_vector@@Base>
   15d18:	cmp	r0, #0
   15d1c:	beq	15d04 <flatcc_builder_create_union_vector@@Base+0x38>
   15d20:	ldr	r8, [r4, #20]
   15d24:	ldr	r1, [r4, #24]
   15d28:	add	r0, r8, r9
   15d2c:	cmp	r0, r1
   15d30:	str	r0, [r4, #20]
   15d34:	bcc	15d50 <flatcc_builder_create_union_vector@@Base+0x84>
   15d38:	add	r1, r0, #1
   15d3c:	mov	r0, r4
   15d40:	mvn	r2, #3
   15d44:	bl	16948 <flatcc_builder_get_emit_context@@Base+0x8>
   15d48:	cmp	r0, #0
   15d4c:	bne	15d04 <flatcc_builder_create_union_vector@@Base+0x38>
   15d50:	ldr	r3, [r4, #16]
   15d54:	adds	r2, r3, r8
   15d58:	beq	15d04 <flatcc_builder_create_union_vector@@Base+0x38>
   15d5c:	cmp	r9, #0
   15d60:	beq	15d90 <flatcc_builder_create_union_vector@@Base+0xc4>
   15d64:	add	r0, r7, #4
   15d68:	mov	r1, r9
   15d6c:	mov	r7, r3
   15d70:	mov	r6, r2
   15d74:	ldrb	r5, [r0, #-4]
   15d78:	subs	r1, r1, #1
   15d7c:	strb	r5, [r6], #1
   15d80:	ldr	r5, [r0]
   15d84:	add	r0, r0, #8
   15d88:	str	r5, [r7], #4
   15d8c:	bne	15d74 <flatcc_builder_create_union_vector@@Base+0xa8>
   15d90:	add	r0, sp, #8
   15d94:	mov	r1, r4
   15d98:	str	r9, [sp]
   15d9c:	bl	15e24 <flatcc_builder_create_union_vector_direct@@Base>
   15da0:	ldr	r0, [sp, #8]
   15da4:	ldr	r1, [sp, #12]
   15da8:	stm	sl, {r0, r1}
   15dac:	mov	r1, #0
   15db0:	ldr	r0, [r4, #16]
   15db4:	ldr	r2, [r4, #20]
   15db8:	bl	12484 <memset@plt>
   15dbc:	ldr	r0, [r4, #32]
   15dc0:	ldr	r1, [r4, #60]	; 0x3c
   15dc4:	ldr	r2, [r4, #64]	; 0x40
   15dc8:	ldr	r3, [r0, #8]
   15dcc:	str	r3, [r4, #20]
   15dd0:	ldr	r3, [r0]
   15dd4:	str	r3, [r4, #28]
   15dd8:	add	r1, r1, r3
   15ddc:	ldr	r7, [r0, #4]
   15de0:	str	r1, [r4, #16]
   15de4:	sub	r1, r2, r3
   15de8:	cmp	r1, r7
   15dec:	movhi	r1, r7
   15df0:	str	r1, [r4, #24]
   15df4:	ldrh	r1, [r4, #130]	; 0x82
   15df8:	ldrh	r2, [r4, #128]	; 0x80
   15dfc:	cmp	r2, r1
   15e00:	strhcc	r1, [r4, #128]	; 0x80
   15e04:	ldrh	r1, [r0, #12]
   15e08:	sub	r0, r0, #36	; 0x24
   15e0c:	str	r0, [r4, #32]
   15e10:	strh	r1, [r4, #130]	; 0x82
   15e14:	ldr	r0, [r4, #156]	; 0x9c
   15e18:	sub	r0, r0, #1
   15e1c:	str	r0, [r4, #156]	; 0x9c
   15e20:	b	15d04 <flatcc_builder_create_union_vector@@Base+0x38>

00015e24 <flatcc_builder_create_union_vector_direct@@Base>:
   15e24:	push	{r4, r5, r6, r7, fp, lr}
   15e28:	add	fp, sp, #16
   15e2c:	sub	sp, sp, #8
   15e30:	ldr	r7, [fp, #8]
   15e34:	mov	r5, r2
   15e38:	mov	r4, r0
   15e3c:	mov	r0, #0
   15e40:	mov	r6, r1
   15e44:	str	r0, [r4]
   15e48:	str	r0, [r4, #4]
   15e4c:	mov	r0, r1
   15e50:	mov	r1, r3
   15e54:	mov	r3, r5
   15e58:	mov	r2, r7
   15e5c:	bl	15564 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15e60:	cmp	r0, #0
   15e64:	str	r0, [r4, #4]
   15e68:	beq	15e94 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   15e6c:	mvn	r0, #0
   15e70:	mov	r1, #1
   15e74:	mov	r2, r7
   15e78:	mov	r3, #1
   15e7c:	str	r1, [sp]
   15e80:	str	r0, [sp, #4]
   15e84:	mov	r0, r6
   15e88:	mov	r1, r5
   15e8c:	bl	15300 <flatcc_builder_create_vector@@Base>
   15e90:	str	r0, [r4]
   15e94:	sub	sp, fp, #16
   15e98:	pop	{r4, r5, r6, r7, fp, pc}

00015e9c <flatcc_builder_start_union_vector@@Base>:
   15e9c:	push	{r4, sl, fp, lr}
   15ea0:	add	fp, sp, #8
   15ea4:	mov	r1, #4
   15ea8:	mov	r4, r0
   15eac:	bl	137f8 <flatcc_builder_start_buffer@@Base+0xbc>
   15eb0:	mov	r1, r0
   15eb4:	mvn	r0, #0
   15eb8:	cmp	r1, #0
   15ebc:	popne	{r4, sl, fp, pc}
   15ec0:	ldr	r0, [r4, #32]
   15ec4:	mov	r1, #8
   15ec8:	mov	r2, #7
   15ecc:	str	r1, [r0, #16]
   15ed0:	mov	r0, #0
   15ed4:	ldr	r1, [r4, #32]
   15ed8:	str	r0, [r1, #20]
   15edc:	ldr	r1, [r4, #32]
   15ee0:	strh	r2, [r1, #14]
   15ee4:	ldr	r2, [r4, #28]
   15ee8:	ldr	r3, [r4, #60]	; 0x3c
   15eec:	ldr	ip, [r4, #64]	; 0x40
   15ef0:	add	r3, r3, r2
   15ef4:	sub	r2, ip, r2
   15ef8:	str	r3, [r4, #16]
   15efc:	mvn	r3, #3
   15f00:	cmn	r2, #4
   15f04:	movcs	r2, r3
   15f08:	str	r2, [r4, #24]
   15f0c:	str	r3, [r1, #4]
   15f10:	pop	{r4, sl, fp, pc}

00015f14 <flatcc_builder_end_union_vector@@Base>:
   15f14:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15f18:	add	fp, sp, #24
   15f1c:	sub	sp, sp, #16
   15f20:	mov	r8, r0
   15f24:	mov	r0, #0
   15f28:	mov	r4, r1
   15f2c:	str	r0, [r8]
   15f30:	str	r0, [r8, #4]
   15f34:	ldr	r0, [r1, #32]
   15f38:	ldrh	r1, [r0, #14]
   15f3c:	cmp	r1, #7
   15f40:	bne	16058 <flatcc_builder_end_union_vector@@Base+0x144>
   15f44:	ldr	r9, [r0, #20]
   15f48:	ldr	r7, [r4, #20]
   15f4c:	ldr	r1, [r4, #24]
   15f50:	add	r0, r9, r9, lsl #2
   15f54:	add	r0, r7, r0
   15f58:	cmp	r0, r1
   15f5c:	str	r0, [r4, #20]
   15f60:	bcc	15f7c <flatcc_builder_end_union_vector@@Base+0x68>
   15f64:	add	r1, r0, #1
   15f68:	mov	r0, r4
   15f6c:	mvn	r2, #3
   15f70:	bl	16948 <flatcc_builder_get_emit_context@@Base+0x8>
   15f74:	cmp	r0, #0
   15f78:	bne	16050 <flatcc_builder_end_union_vector@@Base+0x13c>
   15f7c:	ldr	r0, [r4, #16]
   15f80:	adds	r3, r0, r7
   15f84:	beq	16050 <flatcc_builder_end_union_vector@@Base+0x13c>
   15f88:	add	r2, r3, r9, lsl #2
   15f8c:	cmp	r9, #0
   15f90:	beq	15fc0 <flatcc_builder_end_union_vector@@Base+0xac>
   15f94:	add	r0, r0, #4
   15f98:	mov	r1, r9
   15f9c:	mov	r7, r3
   15fa0:	mov	r5, r2
   15fa4:	ldrb	r6, [r0, #-4]
   15fa8:	subs	r1, r1, #1
   15fac:	strb	r6, [r5], #1
   15fb0:	ldr	r6, [r0]
   15fb4:	add	r0, r0, #8
   15fb8:	str	r6, [r7], #4
   15fbc:	bne	15fa4 <flatcc_builder_end_union_vector@@Base+0x90>
   15fc0:	add	r0, sp, #8
   15fc4:	mov	r1, r4
   15fc8:	str	r9, [sp]
   15fcc:	bl	15e24 <flatcc_builder_create_union_vector_direct@@Base>
   15fd0:	ldr	r0, [sp, #8]
   15fd4:	ldr	r1, [sp, #12]
   15fd8:	stm	r8, {r0, r1}
   15fdc:	mov	r1, #0
   15fe0:	ldr	r0, [r4, #16]
   15fe4:	ldr	r2, [r4, #20]
   15fe8:	bl	12484 <memset@plt>
   15fec:	ldr	r0, [r4, #32]
   15ff0:	ldr	r1, [r4, #60]	; 0x3c
   15ff4:	ldr	r2, [r4, #64]	; 0x40
   15ff8:	ldr	r3, [r0, #8]
   15ffc:	str	r3, [r4, #20]
   16000:	ldr	r3, [r0]
   16004:	str	r3, [r4, #28]
   16008:	add	r1, r1, r3
   1600c:	ldr	r7, [r0, #4]
   16010:	str	r1, [r4, #16]
   16014:	sub	r1, r2, r3
   16018:	cmp	r1, r7
   1601c:	movhi	r1, r7
   16020:	str	r1, [r4, #24]
   16024:	ldrh	r1, [r4, #130]	; 0x82
   16028:	ldrh	r2, [r4, #128]	; 0x80
   1602c:	cmp	r2, r1
   16030:	strhcc	r1, [r4, #128]	; 0x80
   16034:	ldrh	r1, [r0, #12]
   16038:	sub	r0, r0, #36	; 0x24
   1603c:	str	r0, [r4, #32]
   16040:	strh	r1, [r4, #130]	; 0x82
   16044:	ldr	r0, [r4, #156]	; 0x9c
   16048:	sub	r0, r0, #1
   1604c:	str	r0, [r4, #156]	; 0x9c
   16050:	sub	sp, fp, #24
   16054:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16058:	movw	r0, #32932	; 0x80a4
   1605c:	movw	r1, #29826	; 0x7482
   16060:	movw	r3, #32982	; 0x80d6
   16064:	movw	r2, #1617	; 0x651
   16068:	movt	r0, #1
   1606c:	movt	r1, #1
   16070:	movt	r3, #1
   16074:	bl	124b4 <__assert_fail@plt>

00016078 <flatcc_builder_union_vector_count@@Base>:
   16078:	ldr	r0, [r0, #32]
   1607c:	ldr	r0, [r0, #20]
   16080:	bx	lr

00016084 <flatcc_builder_union_vector_edit@@Base>:
   16084:	ldr	r0, [r0, #16]
   16088:	bx	lr

0001608c <flatcc_builder_extend_union_vector@@Base>:
   1608c:	push	{r4, r5, fp, lr}
   16090:	add	fp, sp, #8
   16094:	mov	r4, r0
   16098:	ldr	r0, [r0, #32]
   1609c:	ldr	r2, [r0, #20]
   160a0:	adds	r2, r2, r1
   160a4:	cmpcc	r2, #536870912	; 0x20000000
   160a8:	bcc	160cc <flatcc_builder_extend_union_vector@@Base+0x40>
   160ac:	movw	r0, #34097	; 0x8531
   160b0:	movw	r1, #29826	; 0x7482
   160b4:	movw	r3, #34124	; 0x854c
   160b8:	mov	r2, #892	; 0x37c
   160bc:	movt	r0, #1
   160c0:	movt	r1, #1
   160c4:	movt	r3, #1
   160c8:	bl	124b4 <__assert_fail@plt>
   160cc:	str	r2, [r0, #20]
   160d0:	ldr	r5, [r4, #20]
   160d4:	ldr	r2, [r4, #24]
   160d8:	add	r0, r5, r1, lsl #3
   160dc:	cmp	r0, r2
   160e0:	str	r0, [r4, #20]
   160e4:	bcc	16108 <flatcc_builder_extend_union_vector@@Base+0x7c>
   160e8:	add	r1, r0, #1
   160ec:	mov	r0, r4
   160f0:	mvn	r2, #3
   160f4:	bl	16948 <flatcc_builder_get_emit_context@@Base+0x8>
   160f8:	mov	r1, r0
   160fc:	mov	r0, #0
   16100:	cmp	r1, #0
   16104:	popne	{r4, r5, fp, pc}
   16108:	ldr	r0, [r4, #16]
   1610c:	add	r0, r0, r5
   16110:	pop	{r4, r5, fp, pc}

00016114 <flatcc_builder_truncate_union_vector@@Base>:
   16114:	push	{fp, lr}
   16118:	mov	fp, sp
   1611c:	ldr	r2, [r0, #32]
   16120:	ldrh	r3, [r2, #14]
   16124:	cmp	r3, #7
   16128:	bne	16170 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   1612c:	ldr	r3, [r2, #20]
   16130:	cmp	r3, r1
   16134:	bcc	16190 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   16138:	sub	r3, r3, r1
   1613c:	str	r3, [r2, #20]
   16140:	ldr	r2, [r0, #32]
   16144:	ldr	r3, [r0, #20]
   16148:	ldr	ip, [r0, #16]
   1614c:	ldr	r2, [r2, #16]
   16150:	mls	r3, r2, r1, r3
   16154:	mul	r2, r2, r1
   16158:	mov	r1, #0
   1615c:	str	r3, [r0, #20]
   16160:	add	r0, ip, r3
   16164:	bl	12484 <memset@plt>
   16168:	mov	r0, #0
   1616c:	pop	{fp, pc}
   16170:	movw	r0, #32932	; 0x80a4
   16174:	movw	r1, #29826	; 0x7482
   16178:	movw	r3, #33065	; 0x8129
   1617c:	movw	r2, #1665	; 0x681
   16180:	movt	r0, #1
   16184:	movt	r1, #1
   16188:	movt	r3, #1
   1618c:	bl	124b4 <__assert_fail@plt>
   16190:	movw	r0, #31496	; 0x7b08
   16194:	movw	r1, #29826	; 0x7482
   16198:	movw	r3, #33065	; 0x8129
   1619c:	movw	r2, #1666	; 0x682
   161a0:	movt	r0, #1
   161a4:	movt	r1, #1
   161a8:	movt	r3, #1
   161ac:	bl	124b4 <__assert_fail@plt>

000161b0 <flatcc_builder_union_vector_push@@Base>:
   161b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   161b4:	add	fp, sp, #24
   161b8:	mov	r7, r0
   161bc:	ldr	r0, [r0, #32]
   161c0:	mov	r5, r1
   161c4:	ldrh	r1, [r0, #14]
   161c8:	cmp	r1, #7
   161cc:	bne	16234 <flatcc_builder_union_vector_push@@Base+0x84>
   161d0:	ldr	r1, [r0, #20]
   161d4:	mov	r6, #0
   161d8:	cmn	r1, #-536870911	; 0xe0000001
   161dc:	beq	1622c <flatcc_builder_union_vector_push@@Base+0x7c>
   161e0:	add	r1, r1, #1
   161e4:	mov	r8, r2
   161e8:	str	r1, [r0, #20]
   161ec:	ldr	r4, [r7, #20]
   161f0:	ldr	r0, [r7, #24]
   161f4:	add	r1, r4, #8
   161f8:	cmp	r1, r0
   161fc:	str	r1, [r7, #20]
   16200:	bcc	1621c <flatcc_builder_union_vector_push@@Base+0x6c>
   16204:	add	r1, r4, #9
   16208:	mov	r0, r7
   1620c:	mvn	r2, #3
   16210:	bl	16948 <flatcc_builder_get_emit_context@@Base+0x8>
   16214:	cmp	r0, #0
   16218:	bne	1622c <flatcc_builder_union_vector_push@@Base+0x7c>
   1621c:	ldr	r0, [r7, #16]
   16220:	adds	r0, r0, r4
   16224:	movne	r6, r0
   16228:	stmne	r0, {r5, r8}
   1622c:	mov	r0, r6
   16230:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16234:	movw	r0, #32932	; 0x80a4
   16238:	movw	r1, #29826	; 0x7482
   1623c:	movw	r3, #33134	; 0x816e
   16240:	movw	r2, #1677	; 0x68d
   16244:	movt	r0, #1
   16248:	movt	r1, #1
   1624c:	movt	r3, #1
   16250:	bl	124b4 <__assert_fail@plt>

00016254 <flatcc_builder_append_union_vector@@Base>:
   16254:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16258:	add	fp, sp, #24
   1625c:	mov	r6, r0
   16260:	ldr	r0, [r0, #32]
   16264:	mov	r8, r1
   16268:	ldrh	r1, [r0, #14]
   1626c:	cmp	r1, #7
   16270:	bne	1630c <flatcc_builder_append_union_vector@@Base+0xb8>
   16274:	ldr	r1, [r0, #20]
   16278:	mov	r5, r2
   1627c:	adds	r1, r1, r2
   16280:	cmpcc	r1, #536870912	; 0x20000000
   16284:	bcc	162a8 <flatcc_builder_append_union_vector@@Base+0x54>
   16288:	movw	r0, #34097	; 0x8531
   1628c:	movw	r1, #29826	; 0x7482
   16290:	movw	r3, #34124	; 0x854c
   16294:	mov	r2, #892	; 0x37c
   16298:	movt	r0, #1
   1629c:	movt	r1, #1
   162a0:	movt	r3, #1
   162a4:	bl	124b4 <__assert_fail@plt>
   162a8:	str	r1, [r0, #20]
   162ac:	ldr	r4, [r6, #20]
   162b0:	ldr	r1, [r6, #24]
   162b4:	add	r0, r4, r5, lsl #3
   162b8:	cmp	r0, r1
   162bc:	str	r0, [r6, #20]
   162c0:	bcc	162e0 <flatcc_builder_append_union_vector@@Base+0x8c>
   162c4:	add	r1, r0, #1
   162c8:	mov	r0, r6
   162cc:	mvn	r2, #3
   162d0:	bl	16948 <flatcc_builder_get_emit_context@@Base+0x8>
   162d4:	mov	r7, #0
   162d8:	cmp	r0, #0
   162dc:	bne	16304 <flatcc_builder_append_union_vector@@Base+0xb0>
   162e0:	ldr	r0, [r6, #16]
   162e4:	adds	r7, r0, r4
   162e8:	beq	16300 <flatcc_builder_append_union_vector@@Base+0xac>
   162ec:	lsl	r2, r5, #3
   162f0:	mov	r0, r7
   162f4:	mov	r1, r8
   162f8:	bl	12400 <memcpy@plt>
   162fc:	b	16304 <flatcc_builder_append_union_vector@@Base+0xb0>
   16300:	mov	r7, #0
   16304:	mov	r0, r7
   16308:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1630c:	movw	r0, #32932	; 0x80a4
   16310:	movw	r1, #29826	; 0x7482
   16314:	movw	r3, #33243	; 0x81db
   16318:	movw	r2, #1692	; 0x69c
   1631c:	movt	r0, #1
   16320:	movt	r1, #1
   16324:	movt	r3, #1
   16328:	bl	124b4 <__assert_fail@plt>

0001632c <flatcc_builder_create_string@@Base>:
   1632c:	push	{r4, r5, r6, sl, fp, lr}
   16330:	add	fp, sp, #16
   16334:	sub	sp, sp, #80	; 0x50
   16338:	str	r2, [fp, #-20]	; 0xffffffec
   1633c:	mvn	r5, r2
   16340:	mov	r6, r0
   16344:	mov	r3, #1
   16348:	cmp	r2, #0
   1634c:	ldr	ip, [r0, #136]	; 0x88
   16350:	sub	r0, fp, #20
   16354:	str	r0, [sp, #12]
   16358:	mov	r0, #4
   1635c:	str	r0, [sp, #4]
   16360:	str	r0, [sp, #16]
   16364:	str	r3, [sp, #8]
   16368:	add	r5, ip, r5
   1636c:	and	r5, r5, #3
   16370:	add	r5, r5, #1
   16374:	beq	16390 <flatcc_builder_create_string@@Base+0x64>
   16378:	mov	r3, #2
   1637c:	add	r0, r2, #4
   16380:	str	r1, [sp, #20]
   16384:	str	r2, [sp, #24]
   16388:	str	r3, [sp, #8]
   1638c:	str	r0, [sp, #4]
   16390:	movw	r2, #29296	; 0x7270
   16394:	add	lr, sp, #4
   16398:	add	r1, r0, r5
   1639c:	add	r0, lr, r3, lsl #3
   163a0:	movt	r2, #1
   163a4:	str	r1, [sp, #4]
   163a8:	cmp	r1, #0
   163ac:	str	r2, [r0, #8]
   163b0:	add	r2, r3, #1
   163b4:	str	r5, [r0, #12]
   163b8:	str	r2, [sp, #8]
   163bc:	ble	16410 <flatcc_builder_create_string@@Base+0xe4>
   163c0:	ldr	r0, [r6, #36]	; 0x24
   163c4:	ldr	r4, [r6, #44]	; 0x2c
   163c8:	sub	r5, ip, r1
   163cc:	str	r1, [sp]
   163d0:	add	r1, lr, #8
   163d4:	mov	r3, r5
   163d8:	blx	r4
   163dc:	cmp	r0, #0
   163e0:	streq	r5, [r6, #136]	; 0x88
   163e4:	moveq	r0, r5
   163e8:	subeq	sp, fp, #16
   163ec:	popeq	{r4, r5, r6, sl, fp, pc}
   163f0:	movw	r0, #34344	; 0x8628
   163f4:	movw	r1, #29826	; 0x7482
   163f8:	movw	r3, #34023	; 0x84e7
   163fc:	movw	r2, #651	; 0x28b
   16400:	movt	r0, #1
   16404:	movt	r1, #1
   16408:	movt	r3, #1
   1640c:	bl	124b4 <__assert_fail@plt>
   16410:	movw	r0, #34344	; 0x8628
   16414:	movw	r1, #29826	; 0x7482
   16418:	movw	r3, #34023	; 0x84e7
   1641c:	movw	r2, #647	; 0x287
   16420:	movt	r0, #1
   16424:	movt	r1, #1
   16428:	movt	r3, #1
   1642c:	bl	124b4 <__assert_fail@plt>

00016430 <flatcc_builder_create_string_str@@Base>:
   16430:	push	{r4, r5, fp, lr}
   16434:	add	fp, sp, #8
   16438:	mov	r5, r0
   1643c:	mov	r0, r1
   16440:	mov	r4, r1
   16444:	bl	12460 <strlen@plt>
   16448:	mov	r2, r0
   1644c:	mov	r0, r5
   16450:	mov	r1, r4
   16454:	pop	{r4, r5, fp, lr}
   16458:	b	1632c <flatcc_builder_create_string@@Base>

0001645c <flatcc_builder_create_string_strn@@Base>:
   1645c:	push	{r4, r5, r6, sl, fp, lr}
   16460:	add	fp, sp, #16
   16464:	mov	r6, r0
   16468:	mov	r5, r1
   1646c:	mov	r0, r1
   16470:	mov	r1, #0
   16474:	mov	r4, r2
   16478:	bl	12490 <memchr@plt>
   1647c:	cmp	r0, #0
   16480:	mov	r1, r5
   16484:	subne	r4, r0, r5
   16488:	mov	r0, r6
   1648c:	mov	r2, r4
   16490:	pop	{r4, r5, r6, sl, fp, lr}
   16494:	b	1632c <flatcc_builder_create_string@@Base>

00016498 <flatcc_builder_end_string@@Base>:
   16498:	push	{r4, r5, fp, lr}
   1649c:	add	fp, sp, #8
   164a0:	mov	r4, r0
   164a4:	ldr	r0, [r0, #32]
   164a8:	ldrh	r1, [r0, #14]
   164ac:	cmp	r1, #6
   164b0:	bne	16558 <flatcc_builder_end_string@@Base+0xc0>
   164b4:	ldr	r2, [r0, #20]
   164b8:	ldr	r0, [r4, #20]
   164bc:	cmp	r2, r0
   164c0:	bne	16578 <flatcc_builder_end_string@@Base+0xe0>
   164c4:	ldr	r1, [r4, #16]
   164c8:	mov	r0, r4
   164cc:	bl	1632c <flatcc_builder_create_string@@Base>
   164d0:	mov	r5, r0
   164d4:	cmp	r0, #0
   164d8:	beq	16550 <flatcc_builder_end_string@@Base+0xb8>
   164dc:	ldr	r0, [r4, #16]
   164e0:	ldr	r2, [r4, #20]
   164e4:	mov	r1, #0
   164e8:	bl	12484 <memset@plt>
   164ec:	ldr	r0, [r4, #32]
   164f0:	ldr	r1, [r4, #60]	; 0x3c
   164f4:	ldr	ip, [r4, #64]	; 0x40
   164f8:	ldr	r3, [r0, #8]
   164fc:	str	r3, [r4, #20]
   16500:	ldr	r3, [r0]
   16504:	str	r3, [r4, #28]
   16508:	add	r1, r1, r3
   1650c:	ldr	r2, [r0, #4]
   16510:	str	r1, [r4, #16]
   16514:	sub	r1, ip, r3
   16518:	cmp	r1, r2
   1651c:	movhi	r1, r2
   16520:	str	r1, [r4, #24]
   16524:	ldrh	r1, [r4, #130]	; 0x82
   16528:	ldrh	r2, [r4, #128]	; 0x80
   1652c:	cmp	r2, r1
   16530:	strhcc	r1, [r4, #128]	; 0x80
   16534:	ldrh	r1, [r0, #12]
   16538:	sub	r0, r0, #36	; 0x24
   1653c:	str	r0, [r4, #32]
   16540:	strh	r1, [r4, #130]	; 0x82
   16544:	ldr	r0, [r4, #156]	; 0x9c
   16548:	sub	r0, r0, #1
   1654c:	str	r0, [r4, #156]	; 0x9c
   16550:	mov	r0, r5
   16554:	pop	{r4, r5, fp, pc}
   16558:	movw	r0, #31143	; 0x79a7
   1655c:	movw	r1, #29826	; 0x7482
   16560:	movw	r3, #33370	; 0x825a
   16564:	movw	r2, #1732	; 0x6c4
   16568:	movt	r0, #1
   1656c:	movt	r1, #1
   16570:	movt	r3, #1
   16574:	bl	124b4 <__assert_fail@plt>
   16578:	movw	r0, #33437	; 0x829d
   1657c:	movw	r1, #29826	; 0x7482
   16580:	movw	r3, #33370	; 0x825a
   16584:	movw	r2, #1733	; 0x6c5
   16588:	movt	r0, #1
   1658c:	movt	r1, #1
   16590:	movt	r3, #1
   16594:	bl	124b4 <__assert_fail@plt>

00016598 <flatcc_builder_string_edit@@Base>:
   16598:	ldr	r0, [r0, #16]
   1659c:	bx	lr

000165a0 <flatcc_builder_string_len@@Base>:
   165a0:	ldr	r0, [r0, #32]
   165a4:	ldr	r0, [r0, #20]
   165a8:	bx	lr

000165ac <flatcc_builder_table_edit@@Base>:
   165ac:	ldr	r2, [r0, #32]
   165b0:	ldrh	r2, [r2, #14]
   165b4:	cmp	r2, #3
   165b8:	ldreq	r2, [r0, #16]
   165bc:	ldreq	r0, [r0, #20]
   165c0:	addeq	r0, r2, r0
   165c4:	subeq	r0, r0, r1
   165c8:	bxeq	lr
   165cc:	push	{fp, lr}
   165d0:	mov	fp, sp
   165d4:	movw	r0, #31895	; 0x7c97
   165d8:	movw	r1, #29826	; 0x7482
   165dc:	movw	r3, #33615	; 0x834f
   165e0:	movw	r2, #1794	; 0x702
   165e4:	movt	r0, #1
   165e8:	movt	r1, #1
   165ec:	movt	r3, #1
   165f0:	bl	124b4 <__assert_fail@plt>

000165f4 <flatcc_builder_table_add_copy@@Base>:
   165f4:	push	{r4, r5, r6, sl, fp, lr}
   165f8:	add	fp, sp, #16
   165fc:	mov	r4, r3
   16600:	ldr	r3, [fp, #8]
   16604:	mov	r5, r2
   16608:	mov	r2, r4
   1660c:	bl	15a88 <flatcc_builder_table_add@@Base>
   16610:	mov	r6, r0
   16614:	cmp	r0, #0
   16618:	beq	1662c <flatcc_builder_table_add_copy@@Base+0x38>
   1661c:	mov	r0, r6
   16620:	mov	r1, r5
   16624:	mov	r2, r4
   16628:	bl	12400 <memcpy@plt>
   1662c:	mov	r0, r6
   16630:	pop	{r4, r5, r6, sl, fp, pc}

00016634 <flatcc_builder_push_buffer_alignment@@Base>:
   16634:	ldrh	r1, [r0, #128]	; 0x80
   16638:	mov	r2, #4
   1663c:	strh	r2, [r0, #128]	; 0x80
   16640:	mov	r0, r1
   16644:	bx	lr

00016648 <flatcc_builder_pop_buffer_alignment@@Base>:
   16648:	ldrh	r2, [r0, #128]	; 0x80
   1664c:	cmp	r2, r1
   16650:	strhcc	r1, [r0, #128]	; 0x80
   16654:	bx	lr

00016658 <flatcc_builder_get_buffer_alignment@@Base>:
   16658:	ldrh	r0, [r0, #128]	; 0x80
   1665c:	bx	lr

00016660 <flatcc_builder_set_vtable_clustering@@Base>:
   16660:	clz	r1, r1
   16664:	lsr	r1, r1, #5
   16668:	str	r1, [r0, #180]	; 0xb4
   1666c:	bx	lr

00016670 <flatcc_builder_set_block_align@@Base>:
   16670:	strh	r1, [r0, #132]	; 0x84
   16674:	bx	lr

00016678 <flatcc_builder_get_level@@Base>:
   16678:	ldr	r0, [r0, #156]	; 0x9c
   1667c:	bx	lr

00016680 <flatcc_builder_set_max_level@@Base>:
   16680:	str	r1, [r0, #176]	; 0xb0
   16684:	ldr	r2, [r0, #160]	; 0xa0
   16688:	cmp	r2, r1
   1668c:	strlt	r1, [r0, #160]	; 0xa0
   16690:	bx	lr

00016694 <flatcc_builder_get_buffer_size@@Base>:
   16694:	ldr	r1, [r0, #136]	; 0x88
   16698:	ldr	r0, [r0, #140]	; 0x8c
   1669c:	sub	r0, r0, r1
   166a0:	bx	lr

000166a4 <flatcc_builder_get_buffer_start@@Base>:
   166a4:	ldr	r0, [r0, #136]	; 0x88
   166a8:	bx	lr

000166ac <flatcc_builder_get_buffer_end@@Base>:
   166ac:	ldr	r0, [r0, #140]	; 0x8c
   166b0:	bx	lr

000166b4 <flatcc_builder_set_vtable_cache_limit@@Base>:
   166b4:	str	r1, [r0, #172]	; 0xac
   166b8:	bx	lr

000166bc <flatcc_builder_set_identifier@@Base>:
   166bc:	movw	r2, #29296	; 0x7270
   166c0:	cmp	r1, #0
   166c4:	movt	r2, #1
   166c8:	movne	r2, r1
   166cc:	ldr	r1, [r2]
   166d0:	str	r1, [r0, #168]	; 0xa8
   166d4:	bx	lr

000166d8 <flatcc_builder_get_type@@Base>:
   166d8:	ldr	r0, [r0, #32]
   166dc:	cmp	r0, #0
   166e0:	ldrhne	r0, [r0, #14]
   166e4:	moveq	r0, #0
   166e8:	bx	lr

000166ec <flatcc_builder_get_type_at@@Base>:
   166ec:	mov	r2, r0
   166f0:	cmp	r1, #1
   166f4:	mov	r0, #0
   166f8:	ldrge	r3, [r2, #156]	; 0x9c
   166fc:	cmpge	r3, r1
   16700:	bge	16708 <flatcc_builder_get_type_at@@Base+0x1c>
   16704:	bx	lr
   16708:	sub	r0, r1, r3
   1670c:	ldr	r1, [r2, #32]
   16710:	add	r0, r0, r0, lsl #3
   16714:	add	r0, r1, r0, lsl #2
   16718:	ldrh	r0, [r0, #14]
   1671c:	bx	lr

00016720 <flatcc_builder_get_direct_buffer@@Base>:
   16720:	ldr	r2, [r0, #184]	; 0xb8
   16724:	cmp	r2, #0
   16728:	beq	1673c <flatcc_builder_get_direct_buffer@@Base+0x1c>
   1672c:	ldr	r2, [r0, #188]	; 0xbc
   16730:	ldr	r3, [r0, #192]	; 0xc0
   16734:	cmp	r2, r3
   16738:	beq	1674c <flatcc_builder_get_direct_buffer@@Base+0x2c>
   1673c:	mov	r0, #0
   16740:	cmp	r1, #0
   16744:	strne	r0, [r1]
   16748:	bx	lr
   1674c:	cmp	r1, #0
   16750:	ldrne	r2, [r0, #212]	; 0xd4
   16754:	strne	r2, [r1]
   16758:	ldr	r0, [r0, #196]	; 0xc4
   1675c:	bx	lr

00016760 <flatcc_builder_copy_buffer@@Base>:
   16760:	push	{fp, lr}
   16764:	mov	fp, sp
   16768:	ldr	r3, [r0, #184]	; 0xb8
   1676c:	cmp	r3, #0
   16770:	beq	167a4 <flatcc_builder_copy_buffer@@Base+0x44>
   16774:	add	r0, r0, #188	; 0xbc
   16778:	bl	16e80 <flatcc_emitter_copy_buffer@@Base>
   1677c:	cmp	r0, #0
   16780:	popne	{fp, pc}
   16784:	movw	r0, #30422	; 0x76d6
   16788:	movw	r1, #29826	; 0x7482
   1678c:	movw	r3, #33754	; 0x83da
   16790:	movw	r2, #1926	; 0x786
   16794:	movt	r0, #1
   16798:	movt	r1, #1
   1679c:	movt	r3, #1
   167a0:	bl	124b4 <__assert_fail@plt>
   167a4:	mov	r0, #0
   167a8:	pop	{fp, pc}

000167ac <flatcc_builder_finalize_buffer@@Base>:
   167ac:	push	{r4, r5, r6, sl, fp, lr}
   167b0:	add	fp, sp, #16
   167b4:	mov	r4, r0
   167b8:	ldr	r0, [r0, #136]	; 0x88
   167bc:	cmp	r1, #0
   167c0:	ldr	r2, [r4, #140]	; 0x8c
   167c4:	sub	r5, r2, r0
   167c8:	mov	r0, r5
   167cc:	strne	r5, [r1]
   167d0:	bl	1243c <malloc@plt>
   167d4:	cmp	r0, #0
   167d8:	beq	1681c <flatcc_builder_finalize_buffer@@Base+0x70>
   167dc:	mov	r6, r0
   167e0:	mov	r0, r4
   167e4:	mov	r2, r5
   167e8:	mov	r1, r6
   167ec:	bl	16760 <flatcc_builder_copy_buffer@@Base>
   167f0:	cmp	r0, #0
   167f4:	movne	r0, r6
   167f8:	popne	{r4, r5, r6, sl, fp, pc}
   167fc:	movw	r0, #34344	; 0x8628
   16800:	movw	r1, #29826	; 0x7482
   16804:	movw	r3, #33823	; 0x841f
   16808:	movw	r2, #1948	; 0x79c
   1680c:	movt	r0, #1
   16810:	movt	r1, #1
   16814:	movt	r3, #1
   16818:	bl	124b4 <__assert_fail@plt>
   1681c:	movw	r0, #34344	; 0x8628
   16820:	movw	r1, #29826	; 0x7482
   16824:	movw	r3, #33823	; 0x841f
   16828:	movw	r2, #1944	; 0x798
   1682c:	movt	r0, #1
   16830:	movt	r1, #1
   16834:	movt	r3, #1
   16838:	bl	124b4 <__assert_fail@plt>

0001683c <flatcc_builder_finalize_aligned_buffer@@Base>:
   1683c:	push	{r4, r5, r6, r7, fp, lr}
   16840:	add	fp, sp, #16
   16844:	sub	sp, sp, #8
   16848:	mov	r5, r0
   1684c:	mov	r4, r1
   16850:	ldr	r0, [r0, #136]	; 0x88
   16854:	ldr	r1, [r5, #140]	; 0x8c
   16858:	cmp	r4, #0
   1685c:	sub	r0, r1, r0
   16860:	mov	r1, #0
   16864:	strne	r0, [r4]
   16868:	ldrh	r2, [r5, #128]	; 0x80
   1686c:	str	r1, [sp, #4]
   16870:	add	r0, r0, r2
   16874:	cmp	r2, #4
   16878:	mov	r1, r2
   1687c:	rsb	r2, r2, #0
   16880:	sub	r0, r0, #1
   16884:	movls	r1, #4
   16888:	and	r7, r0, r2
   1688c:	add	r0, sp, #4
   16890:	mov	r2, r7
   16894:	bl	12478 <posix_memalign@plt>
   16898:	ldr	r6, [sp, #4]
   1689c:	cmp	r0, #0
   168a0:	cmpne	r6, #0
   168a4:	bne	168c8 <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   168a8:	cmp	r6, #0
   168ac:	beq	168d0 <flatcc_builder_finalize_aligned_buffer@@Base+0x94>
   168b0:	mov	r0, r5
   168b4:	mov	r1, r6
   168b8:	mov	r2, r7
   168bc:	bl	16760 <flatcc_builder_copy_buffer@@Base>
   168c0:	cmp	r0, #0
   168c4:	bne	168dc <flatcc_builder_finalize_aligned_buffer@@Base+0xa0>
   168c8:	mov	r0, r6
   168cc:	bl	123f4 <free@plt>
   168d0:	mov	r6, #0
   168d4:	cmp	r4, #0
   168d8:	strne	r6, [r4]
   168dc:	mov	r0, r6
   168e0:	sub	sp, fp, #16
   168e4:	pop	{r4, r5, r6, r7, fp, pc}

000168e8 <flatcc_builder_aligned_alloc@@Base>:
   168e8:	push	{fp, lr}
   168ec:	mov	fp, sp
   168f0:	sub	sp, sp, #8
   168f4:	mov	r2, r1
   168f8:	mov	r1, r0
   168fc:	mov	r0, #0
   16900:	cmp	r1, #4
   16904:	str	r0, [sp, #4]
   16908:	add	r0, sp, #4
   1690c:	movls	r1, #4
   16910:	bl	12478 <posix_memalign@plt>
   16914:	mov	r1, r0
   16918:	ldr	r0, [sp, #4]
   1691c:	cmp	r1, #0
   16920:	cmpne	r0, #0
   16924:	beq	16934 <flatcc_builder_aligned_alloc@@Base+0x4c>
   16928:	bl	123f4 <free@plt>
   1692c:	mov	r0, #0
   16930:	str	r0, [sp, #4]
   16934:	mov	sp, fp
   16938:	pop	{fp, pc}

0001693c <flatcc_builder_aligned_free@@Base>:
   1693c:	b	123f4 <free@plt>

00016940 <flatcc_builder_get_emit_context@@Base>:
   16940:	ldr	r0, [r0, #36]	; 0x24
   16944:	bx	lr
   16948:	push	{r4, r5, r6, sl, fp, lr}
   1694c:	add	fp, sp, #16
   16950:	sub	sp, sp, #8
   16954:	mov	r6, r2
   16958:	ldr	r2, [r0, #28]
   1695c:	mov	r5, r0
   16960:	ldr	r0, [r0, #40]	; 0x28
   16964:	mov	r3, #1
   16968:	ldr	r4, [r5, #48]	; 0x30
   1696c:	str	r3, [sp]
   16970:	mov	r3, #1
   16974:	add	r2, r2, r1
   16978:	add	r1, r5, #60	; 0x3c
   1697c:	blx	r4
   16980:	mov	r1, r0
   16984:	mvn	r0, #0
   16988:	cmp	r1, #0
   1698c:	bne	169c0 <flatcc_builder_get_emit_context@@Base+0x80>
   16990:	ldr	r0, [r5, #28]
   16994:	ldr	r2, [r5, #60]	; 0x3c
   16998:	ldr	r3, [r5, #64]	; 0x40
   1699c:	ldr	r1, [r5, #32]
   169a0:	add	r2, r2, r0
   169a4:	sub	r0, r3, r0
   169a8:	cmp	r0, r6
   169ac:	str	r2, [r5, #16]
   169b0:	movhi	r0, r6
   169b4:	str	r0, [r5, #24]
   169b8:	mov	r0, #0
   169bc:	str	r6, [r1, #4]
   169c0:	sub	sp, fp, #16
   169c4:	pop	{r4, r5, r6, sl, fp, pc}

000169c8 <flatcc_emitter_recycle_page@@Base>:
   169c8:	ldr	r3, [r0]
   169cc:	mov	r2, r0
   169d0:	mvn	r0, #0
   169d4:	cmp	r3, r1
   169d8:	ldrne	r2, [r2, #4]
   169dc:	cmpne	r2, r1
   169e0:	bne	169e8 <flatcc_emitter_recycle_page@@Base+0x20>
   169e4:	bx	lr
   169e8:	ldr	r0, [r1, #2944]	; 0xb80
   169ec:	ldr	r2, [r1, #2948]	; 0xb84
   169f0:	str	r2, [r0, #2948]	; 0xb84
   169f4:	ldr	r2, [r1, #2948]	; 0xb84
   169f8:	str	r0, [r2, #2944]	; 0xb80
   169fc:	ldr	r0, [r3, #2948]	; 0xb84
   16a00:	str	r3, [r1, #2944]	; 0xb80
   16a04:	str	r0, [r1, #2948]	; 0xb84
   16a08:	str	r1, [r0, #2944]	; 0xb80
   16a0c:	ldr	r0, [r1, #2944]	; 0xb80
   16a10:	str	r1, [r0, #2948]	; 0xb84
   16a14:	mov	r0, #0
   16a18:	bx	lr

00016a1c <flatcc_emitter_reset@@Base>:
   16a1c:	push	{r4, sl, fp, lr}
   16a20:	add	fp, sp, #8
   16a24:	ldr	r1, [r0]
   16a28:	cmp	r1, #0
   16a2c:	beq	16ae4 <flatcc_emitter_reset@@Base+0xc8>
   16a30:	mov	r4, r0
   16a34:	add	r2, r1, #1472	; 0x5c0
   16a38:	mov	r0, #1472	; 0x5c0
   16a3c:	mov	r3, #0
   16a40:	stmib	r4, {r1, r2}
   16a44:	str	r0, [r4, #12]
   16a48:	str	r2, [r4, #16]
   16a4c:	str	r0, [r4, #20]
   16a50:	movw	r0, #64064	; 0xfa40
   16a54:	movt	r0, #65535	; 0xffff
   16a58:	str	r0, [r1, #2952]	; 0xb88
   16a5c:	ldr	r2, [r4, #32]
   16a60:	ldr	r0, [r4, #24]
   16a64:	cmp	r2, #0
   16a68:	moveq	r2, r0
   16a6c:	streq	r0, [r4, #32]
   16a70:	str	r3, [r4, #24]
   16a74:	add	r2, r2, r2, lsl #1
   16a78:	lsr	r2, r2, #2
   16a7c:	add	r0, r2, r0, lsr #2
   16a80:	str	r0, [r4, #32]
   16a84:	ldr	r2, [r4, #28]
   16a88:	cmp	r2, r0, lsl #1
   16a8c:	bls	16ae4 <flatcc_emitter_reset@@Base+0xc8>
   16a90:	mov	r2, r1
   16a94:	ldr	r0, [r2, #2944]!	; 0xb80
   16a98:	cmp	r0, r1
   16a9c:	beq	16ae4 <flatcc_emitter_reset@@Base+0xc8>
   16aa0:	ldr	r3, [r0, #2944]	; 0xb80
   16aa4:	str	r3, [r2]
   16aa8:	ldr	r2, [r0, #2944]	; 0xb80
   16aac:	str	r1, [r2, #2948]	; 0xb84
   16ab0:	bl	123f4 <free@plt>
   16ab4:	ldr	r0, [r4, #28]
   16ab8:	ldr	r1, [r4, #32]
   16abc:	sub	r0, r0, #2944	; 0xb80
   16ac0:	cmp	r0, r1, lsl #1
   16ac4:	str	r0, [r4, #28]
   16ac8:	popls	{r4, sl, fp, pc}
   16acc:	ldr	r1, [r4, #4]
   16ad0:	ldr	r3, [r4]
   16ad4:	mov	r2, r1
   16ad8:	ldr	r0, [r2, #2944]!	; 0xb80
   16adc:	cmp	r0, r3
   16ae0:	bne	16aa0 <flatcc_emitter_reset@@Base+0x84>
   16ae4:	pop	{r4, sl, fp, pc}

00016ae8 <flatcc_emitter_clear@@Base>:
   16ae8:	push	{r4, r5, r6, sl, fp, lr}
   16aec:	add	fp, sp, #16
   16af0:	ldr	r5, [r0]
   16af4:	cmp	r5, #0
   16af8:	popeq	{r4, r5, r6, sl, fp, pc}
   16afc:	mov	r4, r0
   16b00:	ldr	r0, [r5, #2948]	; 0xb84
   16b04:	mov	r6, #0
   16b08:	str	r6, [r0, #2944]	; 0xb80
   16b0c:	b	16b1c <flatcc_emitter_clear@@Base+0x34>
   16b10:	mov	r5, r0
   16b14:	ldr	r0, [r0, #2948]	; 0xb84
   16b18:	bl	123f4 <free@plt>
   16b1c:	ldr	r0, [r5, #2944]	; 0xb80
   16b20:	cmp	r0, #0
   16b24:	bne	16b10 <flatcc_emitter_clear@@Base+0x28>
   16b28:	mov	r0, r5
   16b2c:	bl	123f4 <free@plt>
   16b30:	vmov.i32	q8, #0	; 0x00000000
   16b34:	add	r0, r4, #16
   16b38:	vst1.32	{d16-d17}, [r0]
   16b3c:	mov	r0, #32
   16b40:	vst1.32	{d16-d17}, [r4], r0
   16b44:	str	r6, [r4]
   16b48:	pop	{r4, r5, r6, sl, fp, pc}

00016b4c <flatcc_emitter@@Base>:
   16b4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b50:	add	fp, sp, #28
   16b54:	sub	sp, sp, #4
   16b58:	mov	r6, r0
   16b5c:	mov	r7, r1
   16b60:	ldr	r0, [r0, #24]
   16b64:	ldr	r1, [fp, #8]
   16b68:	mov	r4, r2
   16b6c:	cmn	r3, #1
   16b70:	mov	r9, r6
   16b74:	add	r0, r0, r1
   16b78:	str	r0, [r6, #24]
   16b7c:	ble	16cb4 <flatcc_emitter@@Base+0x168>
   16b80:	ldr	r0, [r9, #20]!
   16b84:	cmp	r0, r1
   16b88:	bcs	16e1c <flatcc_emitter@@Base+0x2d0>
   16b8c:	mov	r8, #0
   16b90:	cmp	r4, #0
   16b94:	beq	16e74 <flatcc_emitter@@Base+0x328>
   16b98:	movw	sl, #64064	; 0xfa40
   16b9c:	movt	sl, #65535	; 0xffff
   16ba0:	ldr	r8, [r7, #4]
   16ba4:	cmp	r8, #0
   16ba8:	beq	16ca4 <flatcc_emitter@@Base+0x158>
   16bac:	ldr	r9, [r7]
   16bb0:	cmp	r8, r0
   16bb4:	mov	r5, r8
   16bb8:	bls	16c70 <flatcc_emitter@@Base+0x124>
   16bbc:	mov	r5, r0
   16bc0:	cmp	r5, #0
   16bc4:	bne	16c70 <flatcc_emitter@@Base+0x124>
   16bc8:	ldr	r5, [r6, #4]
   16bcc:	cmp	r5, #0
   16bd0:	beq	16be4 <flatcc_emitter@@Base+0x98>
   16bd4:	ldr	r0, [r5, #2944]	; 0xb80
   16bd8:	ldr	r1, [r6]
   16bdc:	cmp	r0, r1
   16be0:	bne	16c1c <flatcc_emitter@@Base+0xd0>
   16be4:	movw	r0, #2956	; 0xb8c
   16be8:	bl	1243c <malloc@plt>
   16bec:	cmp	r0, #0
   16bf0:	beq	16e2c <flatcc_emitter@@Base+0x2e0>
   16bf4:	ldr	r1, [r6, #28]
   16bf8:	cmp	r5, #0
   16bfc:	add	r1, r1, #2944	; 0xb80
   16c00:	str	r1, [r6, #28]
   16c04:	beq	16c40 <flatcc_emitter@@Base+0xf4>
   16c08:	ldr	r1, [r6]
   16c0c:	str	r1, [r0, #2944]	; 0xb80
   16c10:	str	r5, [r0, #2948]	; 0xb84
   16c14:	str	r0, [r1, #2948]	; 0xb84
   16c18:	str	r0, [r5, #2944]	; 0xb80
   16c1c:	mov	r5, #2944	; 0xb80
   16c20:	str	r0, [r6, #4]
   16c24:	str	r0, [r6, #16]
   16c28:	str	r5, [r6, #20]
   16c2c:	ldr	r1, [r0, #2948]	; 0xb84
   16c30:	ldr	r1, [r1, #2952]	; 0xb88
   16c34:	add	r1, r1, #2944	; 0xb80
   16c38:	str	r1, [r0, #2952]	; 0xb88
   16c3c:	b	16c64 <flatcc_emitter@@Base+0x118>
   16c40:	mov	r5, #1472	; 0x5c0
   16c44:	add	r1, r0, #1472	; 0x5c0
   16c48:	str	r0, [r6]
   16c4c:	stmib	r6, {r0, r1, r5}
   16c50:	str	r1, [r6, #16]
   16c54:	str	r5, [r6, #20]
   16c58:	str	r0, [r0, #2944]	; 0xb80
   16c5c:	str	r0, [r0, #2948]	; 0xb84
   16c60:	str	sl, [r0, #2952]	; 0xb88
   16c64:	cmp	r8, r5
   16c68:	bhi	16bc0 <flatcc_emitter@@Base+0x74>
   16c6c:	mov	r5, r8
   16c70:	ldr	r0, [r6, #16]
   16c74:	mov	r1, r9
   16c78:	mov	r2, r5
   16c7c:	bl	12400 <memcpy@plt>
   16c80:	ldr	r0, [r6, #16]
   16c84:	ldr	r1, [r6, #20]
   16c88:	add	r9, r9, r5
   16c8c:	subs	r8, r8, r5
   16c90:	add	r2, r0, r5
   16c94:	sub	r0, r1, r5
   16c98:	str	r2, [r6, #16]
   16c9c:	str	r0, [r6, #20]
   16ca0:	bne	16bb0 <flatcc_emitter@@Base+0x64>
   16ca4:	subs	r4, r4, #1
   16ca8:	add	r7, r7, #8
   16cac:	bne	16ba0 <flatcc_emitter@@Base+0x54>
   16cb0:	b	16e14 <flatcc_emitter@@Base+0x2c8>
   16cb4:	ldr	r0, [r9, #12]!
   16cb8:	cmp	r0, r1
   16cbc:	bcs	16e34 <flatcc_emitter@@Base+0x2e8>
   16cc0:	mov	r8, #0
   16cc4:	cmp	r4, #0
   16cc8:	beq	16e74 <flatcc_emitter@@Base+0x328>
   16ccc:	add	r0, r7, r4, lsl #3
   16cd0:	movw	sl, #2952	; 0xb88
   16cd4:	ldr	r8, [r0, #-4]
   16cd8:	sub	r1, r0, #8
   16cdc:	str	r1, [sp]
   16ce0:	cmp	r8, #0
   16ce4:	beq	16e08 <flatcc_emitter@@Base+0x2bc>
   16ce8:	ldr	r0, [sp]
   16cec:	ldr	r0, [r0]
   16cf0:	add	r7, r0, r8
   16cf4:	ldr	r1, [r9]
   16cf8:	b	16dc0 <flatcc_emitter@@Base+0x274>
   16cfc:	ldr	r5, [r6]
   16d00:	cmp	r5, #0
   16d04:	beq	16d2c <flatcc_emitter@@Base+0x1e0>
   16d08:	ldr	r0, [r5, #2948]	; 0xb84
   16d0c:	ldr	r1, [r6, #4]
   16d10:	cmp	r0, r1
   16d14:	beq	16d2c <flatcc_emitter@@Base+0x1e0>
   16d18:	ldr	r1, [r5, #2952]	; 0xb88
   16d1c:	mov	r2, r0
   16d20:	sub	r1, r1, #2944	; 0xb80
   16d24:	str	r1, [r2, #2952]!	; 0xb88
   16d28:	b	16d68 <flatcc_emitter@@Base+0x21c>
   16d2c:	movw	r0, #2956	; 0xb8c
   16d30:	bl	1243c <malloc@plt>
   16d34:	cmp	r0, #0
   16d38:	beq	16e2c <flatcc_emitter@@Base+0x2e0>
   16d3c:	ldr	r1, [r6, #28]
   16d40:	cmp	r5, #0
   16d44:	add	r1, r1, #2944	; 0xb80
   16d48:	str	r1, [r6, #28]
   16d4c:	beq	16d90 <flatcc_emitter@@Base+0x244>
   16d50:	ldr	r1, [r6, #4]
   16d54:	add	r2, r0, sl
   16d58:	str	r5, [r0, #2944]	; 0xb80
   16d5c:	str	r1, [r0, #2948]	; 0xb84
   16d60:	str	r0, [r5, #2948]	; 0xb84
   16d64:	str	r0, [r1, #2944]	; 0xb80
   16d68:	str	r0, [r6]
   16d6c:	add	r3, r0, #2944	; 0xb80
   16d70:	mov	r1, #2944	; 0xb80
   16d74:	str	r3, [r6, #8]
   16d78:	str	r1, [r6, #12]
   16d7c:	ldr	r0, [r0, #2944]	; 0xb80
   16d80:	ldr	r0, [r0, #2952]	; 0xb88
   16d84:	sub	r0, r0, #2944	; 0xb80
   16d88:	str	r0, [r2]
   16d8c:	b	16dc0 <flatcc_emitter@@Base+0x274>
   16d90:	add	r2, r0, #1472	; 0x5c0
   16d94:	mov	r1, #1472	; 0x5c0
   16d98:	str	r0, [r6]
   16d9c:	stmib	r6, {r0, r2}
   16da0:	str	r1, [r6, #12]
   16da4:	str	r2, [r6, #16]
   16da8:	movw	r2, #64064	; 0xfa40
   16dac:	str	r1, [r6, #20]
   16db0:	str	r0, [r0, #2944]	; 0xb80
   16db4:	str	r0, [r0, #2948]	; 0xb84
   16db8:	movt	r2, #65535	; 0xffff
   16dbc:	str	r2, [r0, #2952]	; 0xb88
   16dc0:	cmp	r8, r1
   16dc4:	bls	16dd8 <flatcc_emitter@@Base+0x28c>
   16dc8:	cmp	r1, #0
   16dcc:	mov	r5, r1
   16dd0:	beq	16cfc <flatcc_emitter@@Base+0x1b0>
   16dd4:	b	16ddc <flatcc_emitter@@Base+0x290>
   16dd8:	mov	r5, r8
   16ddc:	sub	r0, r1, r5
   16de0:	sub	r7, r7, r5
   16de4:	mov	r2, r5
   16de8:	str	r0, [r6, #12]
   16dec:	mov	r1, r7
   16df0:	ldr	r0, [r6, #8]
   16df4:	sub	r0, r0, r5
   16df8:	str	r0, [r6, #8]
   16dfc:	bl	12400 <memcpy@plt>
   16e00:	subs	r8, r8, r5
   16e04:	bne	16cf4 <flatcc_emitter@@Base+0x1a8>
   16e08:	ldr	r0, [sp]
   16e0c:	subs	r4, r4, #1
   16e10:	bne	16cd4 <flatcc_emitter@@Base+0x188>
   16e14:	mov	r8, #0
   16e18:	b	16e74 <flatcc_emitter@@Base+0x328>
   16e1c:	ldr	r5, [r6, #16]
   16e20:	add	r2, r5, r1
   16e24:	str	r2, [r6, #16]
   16e28:	b	16e40 <flatcc_emitter@@Base+0x2f4>
   16e2c:	mvn	r8, #0
   16e30:	b	16e74 <flatcc_emitter@@Base+0x328>
   16e34:	ldr	r2, [r6, #8]
   16e38:	sub	r5, r2, r1
   16e3c:	str	r5, [r6, #8]
   16e40:	sub	r0, r0, r1
   16e44:	mov	r8, #0
   16e48:	cmp	r4, #0
   16e4c:	str	r0, [r9]
   16e50:	beq	16e74 <flatcc_emitter@@Base+0x328>
   16e54:	ldm	r7, {r1, r2}
   16e58:	mov	r0, r5
   16e5c:	bl	12400 <memcpy@plt>
   16e60:	ldr	r0, [r7, #4]
   16e64:	add	r7, r7, #8
   16e68:	subs	r4, r4, #1
   16e6c:	add	r5, r5, r0
   16e70:	bne	16e54 <flatcc_emitter@@Base+0x308>
   16e74:	mov	r0, r8
   16e78:	sub	sp, fp, #28
   16e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016e80 <flatcc_emitter_copy_buffer@@Base>:
   16e80:	push	{r4, r5, r6, sl, fp, lr}
   16e84:	add	fp, sp, #16
   16e88:	mov	r3, r2
   16e8c:	ldr	r2, [r0, #24]
   16e90:	mov	r5, #0
   16e94:	cmp	r2, r3
   16e98:	bhi	16f34 <flatcc_emitter_copy_buffer@@Base+0xb4>
   16e9c:	mov	r4, r0
   16ea0:	ldr	r0, [r0]
   16ea4:	cmp	r0, #0
   16ea8:	beq	16f34 <flatcc_emitter_copy_buffer@@Base+0xb4>
   16eac:	mov	r6, r1
   16eb0:	ldr	r1, [r4, #4]
   16eb4:	cmp	r0, r1
   16eb8:	beq	16f24 <flatcc_emitter_copy_buffer@@Base+0xa4>
   16ebc:	ldr	r0, [r4, #12]
   16ec0:	ldr	r1, [r4, #8]
   16ec4:	rsb	r5, r0, #2944	; 0xb80
   16ec8:	mov	r0, r6
   16ecc:	mov	r2, r5
   16ed0:	bl	12400 <memcpy@plt>
   16ed4:	ldm	r4, {r0, r1}
   16ed8:	add	r5, r6, r5
   16edc:	ldr	r6, [r0, #2944]	; 0xb80
   16ee0:	cmp	r6, r1
   16ee4:	beq	16f0c <flatcc_emitter_copy_buffer@@Base+0x8c>
   16ee8:	mov	r0, r5
   16eec:	mov	r1, r6
   16ef0:	mov	r2, #2944	; 0xb80
   16ef4:	bl	12400 <memcpy@plt>
   16ef8:	ldr	r6, [r6, #2944]	; 0xb80
   16efc:	ldr	r0, [r4, #4]
   16f00:	add	r5, r5, #2944	; 0xb80
   16f04:	cmp	r6, r0
   16f08:	bne	16ee8 <flatcc_emitter_copy_buffer@@Base+0x68>
   16f0c:	ldr	r0, [r4, #20]
   16f10:	mov	r1, r6
   16f14:	rsb	r2, r0, #2944	; 0xb80
   16f18:	mov	r0, r5
   16f1c:	bl	12400 <memcpy@plt>
   16f20:	b	16f34 <flatcc_emitter_copy_buffer@@Base+0xb4>
   16f24:	ldr	r1, [r4, #8]
   16f28:	mov	r0, r6
   16f2c:	bl	12400 <memcpy@plt>
   16f30:	mov	r5, r6
   16f34:	mov	r0, r5
   16f38:	pop	{r4, r5, r6, sl, fp, pc}

00016f3c <__libc_csu_init@@Base>:
   16f3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16f40:	mov	r7, r0
   16f44:	ldr	r6, [pc, #72]	; 16f94 <__libc_csu_init@@Base+0x58>
   16f48:	ldr	r5, [pc, #72]	; 16f98 <__libc_csu_init@@Base+0x5c>
   16f4c:	add	r6, pc, r6
   16f50:	add	r5, pc, r5
   16f54:	sub	r6, r6, r5
   16f58:	mov	r8, r1
   16f5c:	mov	r9, r2
   16f60:	bl	123c8 <printf@plt-0x20>
   16f64:	asrs	r6, r6, #2
   16f68:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f6c:	mov	r4, #0
   16f70:	add	r4, r4, #1
   16f74:	ldr	r3, [r5], #4
   16f78:	mov	r2, r9
   16f7c:	mov	r1, r8
   16f80:	mov	r0, r7
   16f84:	blx	r3
   16f88:	cmp	r6, r4
   16f8c:	bne	16f70 <__libc_csu_init@@Base+0x34>
   16f90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f94:			; <UNDEFINED> instruction: 0x00011fb8
   16f98:			; <UNDEFINED> instruction: 0x00011fb0

00016f9c <__libc_csu_fini@@Base>:
   16f9c:	bx	lr

Disassembly of section .fini:

00016fa0 <.fini>:
   16fa0:	push	{r3, lr}
   16fa4:	pop	{r3, pc}
