
../repos/coreutils/src/factor:     file format elf32-littlearm


Disassembly of section .init:

000113a0 <.init>:
   113a0:	push	{r3, lr}
   113a4:	bl	11a24 <__assert_fail@plt+0x244>
   113a8:	pop	{r3, pc}

Disassembly of section .plt:

000113ac <calloc@plt-0x14>:
   113ac:	push	{lr}		; (str lr, [sp, #-4]!)
   113b0:	ldr	lr, [pc, #4]	; 113bc <calloc@plt-0x4>
   113b4:	add	lr, pc, lr
   113b8:	ldr	pc, [lr, #8]!
   113bc:	andeq	pc, r1, r4, asr #24

000113c0 <calloc@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #126976	; 0x1f000
   113c8:	ldr	pc, [ip, #3140]!	; 0xc44

000113cc <fputs_unlocked@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #126976	; 0x1f000
   113d4:	ldr	pc, [ip, #3132]!	; 0xc3c

000113d8 <raise@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #126976	; 0x1f000
   113e0:	ldr	pc, [ip, #3124]!	; 0xc34

000113e4 <__gmpz_scan1@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #126976	; 0x1f000
   113ec:	ldr	pc, [ip, #3116]!	; 0xc2c

000113f0 <iconv_close@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #126976	; 0x1f000
   113f8:	ldr	pc, [ip, #3108]!	; 0xc24

000113fc <iconv@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #126976	; 0x1f000
   11404:	ldr	pc, [ip, #3100]!	; 0xc1c

00011408 <strcmp@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #126976	; 0x1f000
   11410:	ldr	pc, [ip, #3092]!	; 0xc14

00011414 <fflush@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #126976	; 0x1f000
   1141c:	ldr	pc, [ip, #3084]!	; 0xc0c

00011420 <__gmpz_sub_ui@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #126976	; 0x1f000
   11428:	ldr	pc, [ip, #3076]!	; 0xc04

0001142c <__gmpz_clears@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #126976	; 0x1f000
   11434:	ldr	pc, [ip, #3068]!	; 0xbfc

00011438 <wcwidth@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #126976	; 0x1f000
   11440:	ldr	pc, [ip, #3060]!	; 0xbf4

00011444 <memmove@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #126976	; 0x1f000
   1144c:	ldr	pc, [ip, #3052]!	; 0xbec

00011450 <__gmpz_set_ui@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #126976	; 0x1f000
   11458:	ldr	pc, [ip, #3044]!	; 0xbe4

0001145c <free@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #126976	; 0x1f000
   11464:	ldr	pc, [ip, #3036]!	; 0xbdc

00011468 <_exit@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #126976	; 0x1f000
   11470:	ldr	pc, [ip, #3028]!	; 0xbd4

00011474 <memcpy@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #126976	; 0x1f000
   1147c:	ldr	pc, [ip, #3020]!	; 0xbcc

00011480 <__gmpz_sub@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #126976	; 0x1f000
   11488:	ldr	pc, [ip, #3012]!	; 0xbc4

0001148c <mbsinit@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #126976	; 0x1f000
   11494:	ldr	pc, [ip, #3004]!	; 0xbbc

00011498 <memcmp@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #126976	; 0x1f000
   114a0:	ldr	pc, [ip, #2996]!	; 0xbb4

000114a4 <fputc_unlocked@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #126976	; 0x1f000
   114ac:	ldr	pc, [ip, #2988]!	; 0xbac

000114b0 <getc_unlocked@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #126976	; 0x1f000
   114b8:	ldr	pc, [ip, #2980]!	; 0xba4

000114bc <dcgettext@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #126976	; 0x1f000
   114c4:	ldr	pc, [ip, #2972]!	; 0xb9c

000114c8 <__gmpz_powm@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #126976	; 0x1f000
   114d0:	ldr	pc, [ip, #2964]!	; 0xb94

000114d4 <strdup@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #126976	; 0x1f000
   114dc:	ldr	pc, [ip, #2956]!	; 0xb8c

000114e0 <__gmpz_divexact@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #126976	; 0x1f000
   114e8:	ldr	pc, [ip, #2948]!	; 0xb84

000114ec <__gmpz_inits@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #126976	; 0x1f000
   114f4:	ldr	pc, [ip, #2940]!	; 0xb7c

000114f8 <__gmpz_set@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #126976	; 0x1f000
   11500:	ldr	pc, [ip, #2932]!	; 0xb74

00011504 <realloc@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #126976	; 0x1f000
   1150c:	ldr	pc, [ip, #2924]!	; 0xb6c

00011510 <__gmpz_mul@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #126976	; 0x1f000
   11518:	ldr	pc, [ip, #2916]!	; 0xb64

0001151c <__gmpz_tdiv_q_ui@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #126976	; 0x1f000
   11524:	ldr	pc, [ip, #2908]!	; 0xb5c

00011528 <textdomain@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #126976	; 0x1f000
   11530:	ldr	pc, [ip, #2900]!	; 0xb54

00011534 <iswcntrl@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #126976	; 0x1f000
   1153c:	ldr	pc, [ip, #2892]!	; 0xb4c

00011540 <__gmpz_out_str@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #126976	; 0x1f000
   11548:	ldr	pc, [ip, #2884]!	; 0xb44

0001154c <fflush_unlocked@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #126976	; 0x1f000
   11554:	ldr	pc, [ip, #2876]!	; 0xb3c

00011558 <iswprint@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #126976	; 0x1f000
   11560:	ldr	pc, [ip, #2868]!	; 0xb34

00011564 <lseek64@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #126976	; 0x1f000
   1156c:	ldr	pc, [ip, #2860]!	; 0xb2c

00011570 <__gmpz_fdiv_q_2exp@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #126976	; 0x1f000
   11578:	ldr	pc, [ip, #2852]!	; 0xb24

0001157c <__ctype_get_mb_cur_max@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #126976	; 0x1f000
   11584:	ldr	pc, [ip, #2844]!	; 0xb1c

00011588 <__fpending@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #126976	; 0x1f000
   11590:	ldr	pc, [ip, #2836]!	; 0xb14

00011594 <ferror_unlocked@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #126976	; 0x1f000
   1159c:	ldr	pc, [ip, #2828]!	; 0xb0c

000115a0 <mbrtowc@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #126976	; 0x1f000
   115a8:	ldr	pc, [ip, #2820]!	; 0xb04

000115ac <error@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #126976	; 0x1f000
   115b4:	ldr	pc, [ip, #2812]!	; 0xafc

000115b8 <malloc@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #126976	; 0x1f000
   115c0:	ldr	pc, [ip, #2804]!	; 0xaf4

000115c4 <iconv_open@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #126976	; 0x1f000
   115cc:	ldr	pc, [ip, #2796]!	; 0xaec

000115d0 <__libc_start_main@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #126976	; 0x1f000
   115d8:	ldr	pc, [ip, #2788]!	; 0xae4

000115dc <__freading@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #126976	; 0x1f000
   115e4:	ldr	pc, [ip, #2780]!	; 0xadc

000115e8 <__gmpz_init_set_si@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #126976	; 0x1f000
   115f0:	ldr	pc, [ip, #2772]!	; 0xad4

000115f4 <__gmpz_add_ui@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #126976	; 0x1f000
   115fc:	ldr	pc, [ip, #2764]!	; 0xacc

00011600 <__gmon_start__@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #126976	; 0x1f000
   11608:	ldr	pc, [ip, #2756]!	; 0xac4

0001160c <getopt_long@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #126976	; 0x1f000
   11614:	ldr	pc, [ip, #2748]!	; 0xabc

00011618 <__ctype_b_loc@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #126976	; 0x1f000
   11620:	ldr	pc, [ip, #2740]!	; 0xab4

00011624 <exit@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #126976	; 0x1f000
   1162c:	ldr	pc, [ip, #2732]!	; 0xaac

00011630 <iswspace@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #126976	; 0x1f000
   11638:	ldr	pc, [ip, #2724]!	; 0xaa4

0001163c <strlen@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #126976	; 0x1f000
   11644:	ldr	pc, [ip, #2716]!	; 0xa9c

00011648 <strchr@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #126976	; 0x1f000
   11650:	ldr	pc, [ip, #2708]!	; 0xa94

00011654 <__gmpz_divisible_ui_p@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #126976	; 0x1f000
   1165c:	ldr	pc, [ip, #2700]!	; 0xa8c

00011660 <__gmpz_clear@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #126976	; 0x1f000
   11668:	ldr	pc, [ip, #2692]!	; 0xa84

0001166c <__errno_location@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #126976	; 0x1f000
   11674:	ldr	pc, [ip, #2684]!	; 0xa7c

00011678 <iswalnum@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #126976	; 0x1f000
   11680:	ldr	pc, [ip, #2676]!	; 0xa74

00011684 <__sprintf_chk@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #126976	; 0x1f000
   1168c:	ldr	pc, [ip, #2668]!	; 0xa6c

00011690 <__cxa_atexit@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #126976	; 0x1f000
   11698:	ldr	pc, [ip, #2660]!	; 0xa64

0001169c <memset@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #126976	; 0x1f000
   116a4:	ldr	pc, [ip, #2652]!	; 0xa5c

000116a8 <__gmpz_tdiv_q_2exp@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #126976	; 0x1f000
   116b0:	ldr	pc, [ip, #2644]!	; 0xa54

000116b4 <__printf_chk@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #126976	; 0x1f000
   116bc:	ldr	pc, [ip, #2636]!	; 0xa4c

000116c0 <write@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #126976	; 0x1f000
   116c8:	ldr	pc, [ip, #2628]!	; 0xa44

000116cc <fileno@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #126976	; 0x1f000
   116d4:	ldr	pc, [ip, #2620]!	; 0xa3c

000116d8 <__fprintf_chk@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #126976	; 0x1f000
   116e0:	ldr	pc, [ip, #2612]!	; 0xa34

000116e4 <memchr@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #126976	; 0x1f000
   116ec:	ldr	pc, [ip, #2604]!	; 0xa2c

000116f0 <fclose@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #126976	; 0x1f000
   116f8:	ldr	pc, [ip, #2596]!	; 0xa24

000116fc <strnlen@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #126976	; 0x1f000
   11704:	ldr	pc, [ip, #2588]!	; 0xa1c

00011708 <fseeko64@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #126976	; 0x1f000
   11710:	ldr	pc, [ip, #2580]!	; 0xa14

00011714 <__gmpz_mod@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #126976	; 0x1f000
   1171c:	ldr	pc, [ip, #2572]!	; 0xa0c

00011720 <__gmpz_init_set_ui@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #126976	; 0x1f000
   11728:	ldr	pc, [ip, #2564]!	; 0xa04

0001172c <__gmpz_cmp@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #126976	; 0x1f000
   11734:	ldr	pc, [ip, #2556]!	; 0x9fc

00011738 <setlocale@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #126976	; 0x1f000
   11740:	ldr	pc, [ip, #2548]!	; 0x9f4

00011744 <strrchr@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #126976	; 0x1f000
   1174c:	ldr	pc, [ip, #2540]!	; 0x9ec

00011750 <nl_langinfo@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #126976	; 0x1f000
   11758:	ldr	pc, [ip, #2532]!	; 0x9e4

0001175c <__gmpz_gcd@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #126976	; 0x1f000
   11764:	ldr	pc, [ip, #2524]!	; 0x9dc

00011768 <__gmpz_init_set_str@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #126976	; 0x1f000
   11770:	ldr	pc, [ip, #2516]!	; 0x9d4

00011774 <bindtextdomain@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #126976	; 0x1f000
   1177c:	ldr	pc, [ip, #2508]!	; 0x9cc

00011780 <__gmpz_cmp_ui@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #126976	; 0x1f000
   11788:	ldr	pc, [ip, #2500]!	; 0x9c4

0001178c <__gmpz_init@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #126976	; 0x1f000
   11794:	ldr	pc, [ip, #2492]!	; 0x9bc

00011798 <__gmpz_powm_ui@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #126976	; 0x1f000
   117a0:	ldr	pc, [ip, #2484]!	; 0x9b4

000117a4 <isatty@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #126976	; 0x1f000
   117ac:	ldr	pc, [ip, #2476]!	; 0x9ac

000117b0 <fputs@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #126976	; 0x1f000
   117b8:	ldr	pc, [ip, #2468]!	; 0x9a4

000117bc <strncmp@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #126976	; 0x1f000
   117c4:	ldr	pc, [ip, #2460]!	; 0x99c

000117c8 <abort@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #126976	; 0x1f000
   117d0:	ldr	pc, [ip, #2452]!	; 0x994

000117d4 <putchar_unlocked@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #126976	; 0x1f000
   117dc:	ldr	pc, [ip, #2444]!	; 0x98c

000117e0 <__assert_fail@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #126976	; 0x1f000
   117e8:	ldr	pc, [ip, #2436]!	; 0x984

Disassembly of section .text:

000117f0 <.text>:
   117f0:	push	{r4, r5, r6, r7, r8, lr}
   117f4:	mov	r6, r0
   117f8:	sub	sp, sp, #24
   117fc:	ldr	r0, [r1]
   11800:	mov	r7, r1
   11804:	ldr	r4, [pc, #400]	; 1199c <__assert_fail@plt+0x1bc>
   11808:	bl	1695c <__assert_fail@plt+0x517c>
   1180c:	ldr	r1, [pc, #396]	; 119a0 <__assert_fail@plt+0x1c0>
   11810:	mov	r0, #6
   11814:	bl	11738 <setlocale@plt>
   11818:	ldr	r1, [pc, #388]	; 119a4 <__assert_fail@plt+0x1c4>
   1181c:	ldr	r0, [pc, #388]	; 119a8 <__assert_fail@plt+0x1c8>
   11820:	bl	11774 <bindtextdomain@plt>
   11824:	ldr	r0, [pc, #380]	; 119a8 <__assert_fail@plt+0x1c8>
   11828:	bl	11528 <textdomain@plt>
   1182c:	ldr	r3, [r4]
   11830:	cmp	r3, #0
   11834:	bne	11848 <__assert_fail@plt+0x68>
   11838:	mov	r0, #1024	; 0x400
   1183c:	bl	196f4 <__assert_fail@plt+0x7f14>
   11840:	str	r0, [r4]
   11844:	str	r0, [r4, #4]
   11848:	ldr	r0, [pc, #348]	; 119ac <__assert_fail@plt+0x1cc>
   1184c:	bl	1c478 <__assert_fail@plt+0xac98>
   11850:	ldr	r0, [pc, #344]	; 119b0 <__assert_fail@plt+0x1d0>
   11854:	bl	1c478 <__assert_fail@plt+0xac98>
   11858:	ldr	r8, [pc, #320]	; 119a0 <__assert_fail@plt+0x1c0>
   1185c:	mov	r5, #0
   11860:	str	r5, [sp]
   11864:	ldr	r3, [pc, #328]	; 119b4 <__assert_fail@plt+0x1d4>
   11868:	mov	r2, r8
   1186c:	mov	r1, r7
   11870:	mov	r0, r6
   11874:	bl	1160c <getopt_long@plt>
   11878:	cmn	r0, #1
   1187c:	bne	118dc <__assert_fail@plt+0xfc>
   11880:	ldr	r3, [pc, #304]	; 119b8 <__assert_fail@plt+0x1d8>
   11884:	ldr	r5, [r3]
   11888:	cmp	r6, r5
   1188c:	movgt	r4, #1
   11890:	bgt	1197c <__assert_fail@plt+0x19c>
   11894:	add	r0, sp, #16
   11898:	bl	18a3c <__assert_fail@plt+0x725c>
   1189c:	ldr	r5, [pc, #280]	; 119bc <__assert_fail@plt+0x1dc>
   118a0:	ldr	r7, [pc, #280]	; 119c0 <__assert_fail@plt+0x1e0>
   118a4:	mov	r4, #1
   118a8:	mov	r6, #3
   118ac:	add	r3, sp, #16
   118b0:	mov	r2, r6
   118b4:	mov	r1, r7
   118b8:	ldr	r0, [r5]
   118bc:	bl	18a4c <__assert_fail@plt+0x726c>
   118c0:	cmn	r0, #1
   118c4:	ldr	r0, [sp, #20]
   118c8:	beq	11968 <__assert_fail@plt+0x188>
   118cc:	bl	16104 <__assert_fail@plt+0x4924>
   118d0:	and	r4, r4, r0
   118d4:	uxtb	r4, r4
   118d8:	b	118ac <__assert_fail@plt+0xcc>
   118dc:	cmn	r0, #2
   118e0:	beq	11960 <__assert_fail@plt+0x180>
   118e4:	cmp	r0, #256	; 0x100
   118e8:	beq	11954 <__assert_fail@plt+0x174>
   118ec:	cmn	r0, #3
   118f0:	movne	r0, #1
   118f4:	bne	11964 <__assert_fail@plt+0x184>
   118f8:	ldr	r3, [pc, #196]	; 119c4 <__assert_fail@plt+0x1e4>
   118fc:	ldr	r1, [pc, #196]	; 119c8 <__assert_fail@plt+0x1e8>
   11900:	ldr	r0, [pc, #196]	; 119cc <__assert_fail@plt+0x1ec>
   11904:	ldr	r4, [r3]
   11908:	ldr	r3, [pc, #192]	; 119d0 <__assert_fail@plt+0x1f0>
   1190c:	ldr	r6, [r3]
   11910:	bl	17250 <__assert_fail@plt+0x5a70>
   11914:	ldr	r1, [pc, #184]	; 119d4 <__assert_fail@plt+0x1f4>
   11918:	mov	r7, r0
   1191c:	ldr	r0, [pc, #180]	; 119d8 <__assert_fail@plt+0x1f8>
   11920:	bl	17250 <__assert_fail@plt+0x5a70>
   11924:	ldr	r3, [pc, #176]	; 119dc <__assert_fail@plt+0x1fc>
   11928:	str	r5, [sp, #12]
   1192c:	str	r3, [sp]
   11930:	str	r7, [sp, #4]
   11934:	mov	r3, r6
   11938:	ldr	r2, [pc, #160]	; 119e0 <__assert_fail@plt+0x200>
   1193c:	ldr	r1, [pc, #160]	; 119e4 <__assert_fail@plt+0x204>
   11940:	str	r0, [sp, #8]
   11944:	mov	r0, r4
   11948:	bl	1962c <__assert_fail@plt+0x7e4c>
   1194c:	mov	r0, #0
   11950:	bl	11624 <exit@plt>
   11954:	mov	r3, #1
   11958:	strb	r3, [r4, #8]
   1195c:	b	11860 <__assert_fail@plt+0x80>
   11960:	mov	r0, #0
   11964:	bl	16514 <__assert_fail@plt+0x4d34>
   11968:	bl	16840 <__assert_fail@plt+0x5060>
   1196c:	eor	r0, r4, #1
   11970:	uxtb	r0, r0
   11974:	add	sp, sp, #24
   11978:	pop	{r4, r5, r6, r7, r8, pc}
   1197c:	ldr	r0, [r7, r5, lsl #2]
   11980:	bl	16104 <__assert_fail@plt+0x4924>
   11984:	add	r5, r5, #1
   11988:	cmp	r0, #0
   1198c:	moveq	r4, #0
   11990:	cmp	r6, r5
   11994:	bne	1197c <__assert_fail@plt+0x19c>
   11998:	b	1196c <__assert_fail@plt+0x18c>
   1199c:	andeq	r1, r3, ip, ror #3
   119a0:	strdeq	pc, [r1], -r9
   119a4:	andeq	pc, r1, r3, asr #18
   119a8:	andeq	pc, r1, r0, lsr #17
   119ac:	andeq	r6, r1, ip, asr r7
   119b0:	andeq	r2, r1, ip, asr lr
   119b4:	andeq	pc, r1, ip, lsl r5	; <UNPREDICTABLE>
   119b8:	ldrdeq	r1, [r3], -r0
   119bc:	andeq	r1, r3, r0, ror #3
   119c0:	andeq	pc, r1, r6, lsr #19
   119c4:	andeq	r1, r3, r4, ror #3
   119c8:	andeq	pc, r1, fp, asr r9	; <UNPREDICTABLE>
   119cc:	andeq	pc, r1, lr, ror #18
   119d0:	andeq	r1, r3, r0, lsl #3
   119d4:	andeq	pc, r1, r0, lsl #19
   119d8:	andeq	pc, r1, lr, lsl #19
   119dc:	muleq	r1, fp, r9
   119e0:	muleq	r1, ip, r8
   119e4:	andeq	pc, r1, sp, lsl r7	; <UNPREDICTABLE>
   119e8:	mov	fp, #0
   119ec:	mov	lr, #0
   119f0:	pop	{r1}		; (ldr r1, [sp], #4)
   119f4:	mov	r2, sp
   119f8:	push	{r2}		; (str r2, [sp, #-4]!)
   119fc:	push	{r0}		; (str r0, [sp, #-4]!)
   11a00:	ldr	ip, [pc, #16]	; 11a18 <__assert_fail@plt+0x238>
   11a04:	push	{ip}		; (str ip, [sp, #-4]!)
   11a08:	ldr	r0, [pc, #12]	; 11a1c <__assert_fail@plt+0x23c>
   11a0c:	ldr	r3, [pc, #12]	; 11a20 <__assert_fail@plt+0x240>
   11a10:	bl	115d0 <__libc_start_main@plt>
   11a14:	bl	117c8 <abort@plt>
   11a18:	andeq	ip, r1, r4, ror r4
   11a1c:	strdeq	r1, [r1], -r0
   11a20:	andeq	ip, r1, r4, lsl r4
   11a24:	ldr	r3, [pc, #20]	; 11a40 <__assert_fail@plt+0x260>
   11a28:	ldr	r2, [pc, #20]	; 11a44 <__assert_fail@plt+0x264>
   11a2c:	add	r3, pc, r3
   11a30:	ldr	r2, [r3, r2]
   11a34:	cmp	r2, #0
   11a38:	bxeq	lr
   11a3c:	b	11600 <__gmon_start__@plt>
   11a40:	andeq	pc, r1, ip, asr #11
   11a44:	andeq	r0, r0, r0, ror r1
   11a48:	ldr	r3, [pc, #28]	; 11a6c <__assert_fail@plt+0x28c>
   11a4c:	ldr	r0, [pc, #28]	; 11a70 <__assert_fail@plt+0x290>
   11a50:	sub	r3, r3, r0
   11a54:	cmp	r3, #6
   11a58:	bxls	lr
   11a5c:	ldr	r3, [pc, #16]	; 11a74 <__assert_fail@plt+0x294>
   11a60:	cmp	r3, #0
   11a64:	bxeq	lr
   11a68:	bx	r3
   11a6c:	andeq	r1, r3, fp, asr #3
   11a70:	andeq	r1, r3, r8, asr #3
   11a74:	andeq	r0, r0, r0
   11a78:	ldr	r1, [pc, #36]	; 11aa4 <__assert_fail@plt+0x2c4>
   11a7c:	ldr	r0, [pc, #36]	; 11aa8 <__assert_fail@plt+0x2c8>
   11a80:	sub	r1, r1, r0
   11a84:	asr	r1, r1, #2
   11a88:	add	r1, r1, r1, lsr #31
   11a8c:	asrs	r1, r1, #1
   11a90:	bxeq	lr
   11a94:	ldr	r3, [pc, #16]	; 11aac <__assert_fail@plt+0x2cc>
   11a98:	cmp	r3, #0
   11a9c:	bxeq	lr
   11aa0:	bx	r3
   11aa4:	andeq	r1, r3, r8, asr #3
   11aa8:	andeq	r1, r3, r8, asr #3
   11aac:	andeq	r0, r0, r0
   11ab0:	push	{r4, lr}
   11ab4:	ldr	r4, [pc, #24]	; 11ad4 <__assert_fail@plt+0x2f4>
   11ab8:	ldrb	r3, [r4]
   11abc:	cmp	r3, #0
   11ac0:	popne	{r4, pc}
   11ac4:	bl	11a48 <__assert_fail@plt+0x268>
   11ac8:	mov	r3, #1
   11acc:	strb	r3, [r4]
   11ad0:	pop	{r4, pc}
   11ad4:	andeq	r1, r3, r8, ror #3
   11ad8:	ldr	r0, [pc, #40]	; 11b08 <__assert_fail@plt+0x328>
   11adc:	ldr	r3, [r0]
   11ae0:	cmp	r3, #0
   11ae4:	bne	11aec <__assert_fail@plt+0x30c>
   11ae8:	b	11a78 <__assert_fail@plt+0x298>
   11aec:	ldr	r3, [pc, #24]	; 11b0c <__assert_fail@plt+0x32c>
   11af0:	cmp	r3, #0
   11af4:	beq	11ae8 <__assert_fail@plt+0x308>
   11af8:	push	{r4, lr}
   11afc:	blx	r3
   11b00:	pop	{r4, lr}
   11b04:	b	11a78 <__assert_fail@plt+0x298>
   11b08:	andeq	r0, r3, ip, lsl #30
   11b0c:	andeq	r0, r0, r0
   11b10:	push	{r4, r5, r6, r7, lr}
   11b14:	and	r6, r2, #1
   11b18:	mov	r7, #0
   11b1c:	orrs	ip, r6, r7
   11b20:	bne	11b3c <__assert_fail@plt+0x35c>
   11b24:	mov	lr, r0
   11b28:	mov	ip, r1
   11b2c:	mov	r0, r2
   11b30:	mov	r1, r3
   11b34:	mov	r2, lr
   11b38:	mov	r3, ip
   11b3c:	orrs	ip, r0, r1
   11b40:	beq	11b7c <__assert_fail@plt+0x39c>
   11b44:	lsrs	r3, r3, #1
   11b48:	rrx	r2, r2
   11b4c:	and	r6, r0, #1
   11b50:	mov	r7, #0
   11b54:	orrs	ip, r6, r7
   11b58:	beq	11b88 <__assert_fail@plt+0x3a8>
   11b5c:	lsrs	r7, r1, #1
   11b60:	rrx	r6, r0
   11b64:	subs	r6, r6, r2
   11b68:	sbc	r7, r7, r3
   11b6c:	orrs	ip, r6, r7
   11b70:	bne	11b94 <__assert_fail@plt+0x3b4>
   11b74:	orr	r2, r0, #1
   11b78:	mov	r3, r1
   11b7c:	mov	r0, r2
   11b80:	mov	r1, r3
   11b84:	pop	{r4, r5, r6, r7, pc}
   11b88:	lsrs	r1, r1, #1
   11b8c:	rrx	r0, r0
   11b90:	b	11b4c <__assert_fail@plt+0x36c>
   11b94:	asr	r4, r7, #31
   11b98:	and	r0, r6, r4
   11b9c:	adds	r2, r2, r0
   11ba0:	and	r1, r7, r4
   11ba4:	eor	r0, r6, r4
   11ba8:	adc	r3, r3, r1
   11bac:	eor	r1, r7, r4
   11bb0:	subs	r0, r0, r4
   11bb4:	mov	r5, r4
   11bb8:	sbc	r1, r1, r4
   11bbc:	b	11b4c <__assert_fail@plt+0x36c>
   11bc0:	ldrb	r1, [r0, #250]	; 0xfa
   11bc4:	push	{r4, r5, r6, r7, r8, r9, lr}
   11bc8:	add	r9, r0, #16
   11bcc:	mov	r6, r2
   11bd0:	ldr	r8, [sp, #28]
   11bd4:	add	r2, r9, r1, lsl #3
   11bd8:	mov	r7, r3
   11bdc:	add	ip, r0, #224	; 0xe0
   11be0:	sub	r3, r1, #1
   11be4:	mov	lr, r2
   11be8:	cmn	r3, #1
   11bec:	bne	11c20 <__assert_fail@plt+0x440>
   11bf0:	add	lr, ip, r1
   11bf4:	sub	lr, lr, #1
   11bf8:	sub	r4, lr, ip
   11bfc:	cmp	r4, r3
   11c00:	bgt	11c38 <__assert_fail@plt+0x458>
   11c04:	add	r3, r3, #1
   11c08:	add	r1, r1, #1
   11c0c:	lsl	r2, r3, #3
   11c10:	strd	r6, [r9, r2]
   11c14:	strb	r8, [ip, r3]
   11c18:	strb	r1, [r0, #250]	; 0xfa
   11c1c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11c20:	ldrd	r4, [lr, #-8]!
   11c24:	cmp	r5, r7
   11c28:	cmpeq	r4, r6
   11c2c:	bls	11c4c <__assert_fail@plt+0x46c>
   11c30:	sub	r3, r3, #1
   11c34:	b	11be8 <__assert_fail@plt+0x408>
   11c38:	ldrd	r4, [r2, #-8]
   11c3c:	strd	r4, [r2], #-8
   11c40:	ldrb	r4, [lr]
   11c44:	strb	r4, [lr, #1]
   11c48:	b	11bf4 <__assert_fail@plt+0x414>
   11c4c:	bne	11bf0 <__assert_fail@plt+0x410>
   11c50:	ldrb	r2, [ip, r3]
   11c54:	add	r2, r2, r8
   11c58:	strb	r2, [ip, r3]
   11c5c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11c60:	push	{r4, r5, r6, r7}
   11c64:	mov	r4, r2
   11c68:	ldr	ip, [sp, #16]
   11c6c:	ldr	r2, [pc, #68]	; 11cb8 <__assert_fail@plt+0x4d8>
   11c70:	ldr	r1, [sp, #20]
   11c74:	mov	r5, r3
   11c78:	add	r2, r2, ip
   11c7c:	mov	r3, #0
   11c80:	cmp	r3, r1
   11c84:	bne	11ca0 <__assert_fail@plt+0x4c0>
   11c88:	mov	r3, #1
   11c8c:	str	r3, [sp, #16]
   11c90:	mov	r2, r4
   11c94:	mov	r3, r5
   11c98:	pop	{r4, r5, r6, r7}
   11c9c:	b	11bc0 <__assert_fail@plt+0x3e0>
   11ca0:	ldrb	r6, [r2, r3]
   11ca4:	mov	r7, #0
   11ca8:	add	r3, r3, #1
   11cac:	adds	r4, r4, r6
   11cb0:	adc	r5, r5, r7
   11cb4:	b	11c80 <__assert_fail@plt+0x4a0>
   11cb8:	andeq	ip, r1, r0, lsr #9
   11cbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cc0:	mov	r8, r2
   11cc4:	sub	sp, sp, #20
   11cc8:	umull	sl, fp, r0, r8
   11ccc:	ldr	r2, [sp, #64]	; 0x40
   11cd0:	mov	r9, r3
   11cd4:	strd	sl, [sp]
   11cd8:	umull	sl, fp, r8, r1
   11cdc:	ldr	lr, [sp, #4]
   11ce0:	mov	r7, #0
   11ce4:	mov	r5, #0
   11ce8:	mla	fp, r1, r7, fp
   11cec:	mul	ip, r0, r7
   11cf0:	umull	r6, r7, r1, r9
   11cf4:	umull	r0, r1, r0, r9
   11cf8:	mla	ip, r8, r5, ip
   11cfc:	mla	r1, r9, r5, r1
   11d00:	adds	r0, r0, sl
   11d04:	add	ip, ip, lr
   11d08:	adc	r1, r1, fp
   11d0c:	mov	r5, #0
   11d10:	adds	r0, r0, ip
   11d14:	adc	r1, r1, r5
   11d18:	cmp	fp, r1
   11d1c:	cmpeq	sl, r0
   11d20:	ldr	r3, [sp, #68]	; 0x44
   11d24:	bls	11d30 <__assert_fail@plt+0x550>
   11d28:	adds	r6, r6, #0
   11d2c:	adc	r7, r7, #1
   11d30:	adds	r8, r1, r6
   11d34:	ldr	r1, [sp]
   11d38:	mov	r5, #0
   11d3c:	adc	r9, r5, r7
   11d40:	adds	r6, r5, r1
   11d44:	adc	r7, r0, #0
   11d48:	mul	sl, r6, r3
   11d4c:	strd	r8, [sp, #8]
   11d50:	mla	sl, r2, r7, sl
   11d54:	umull	r2, r3, r6, r2
   11d58:	ldrd	r8, [sp, #56]	; 0x38
   11d5c:	add	sl, sl, r3
   11d60:	ldr	r1, [sp, #60]	; 0x3c
   11d64:	umull	r6, r7, sl, r8
   11d68:	ldr	ip, [sp, #60]	; 0x3c
   11d6c:	mov	r9, #0
   11d70:	mov	r3, #0
   11d74:	mla	r7, sl, r9, r7
   11d78:	umull	sl, fp, sl, r1
   11d7c:	umull	r0, r1, r1, r2
   11d80:	mla	r1, ip, r3, r1
   11d84:	mul	ip, r2, r9
   11d88:	adds	r0, r0, r6
   11d8c:	mla	ip, r8, r3, ip
   11d90:	umull	r2, r3, r2, r8
   11d94:	add	r8, ip, r3
   11d98:	adc	r1, r1, r7
   11d9c:	adds	r0, r0, r8
   11da0:	adc	r1, r1, r5
   11da4:	cmp	r7, r1
   11da8:	cmpeq	r6, r0
   11dac:	bls	11db8 <__assert_fail@plt+0x5d8>
   11db0:	adds	sl, sl, #0
   11db4:	adc	fp, fp, #1
   11db8:	adds	sl, sl, r1
   11dbc:	mov	r3, #0
   11dc0:	ldrd	r0, [sp, #8]
   11dc4:	adc	fp, fp, r3
   11dc8:	ldrd	r2, [sp, #8]
   11dcc:	subs	r0, r0, sl
   11dd0:	sbc	r1, r1, fp
   11dd4:	cmp	r3, fp
   11dd8:	cmpeq	r2, sl
   11ddc:	bcs	11df4 <__assert_fail@plt+0x614>
   11de0:	ldrd	r2, [sp, #56]	; 0x38
   11de4:	adds	r2, r2, r0
   11de8:	adc	r3, r3, r1
   11dec:	mov	r0, r2
   11df0:	mov	r1, r3
   11df4:	add	sp, sp, #20
   11df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e00:	sub	sp, sp, #20
   11e04:	mov	r6, r2
   11e08:	mov	r7, r3
   11e0c:	and	r2, r2, #1
   11e10:	mov	r3, #0
   11e14:	orrs	r3, r2, r3
   11e18:	ldrd	r8, [sp, #64]	; 0x40
   11e1c:	ldr	r5, [sp, #72]	; 0x48
   11e20:	ldr	r4, [sp, #76]	; 0x4c
   11e24:	mov	sl, r0
   11e28:	mov	fp, r1
   11e2c:	movne	r5, r0
   11e30:	movne	r4, r1
   11e34:	orrs	r3, r6, r7
   11e38:	bne	11e4c <__assert_fail@plt+0x66c>
   11e3c:	mov	r0, r5
   11e40:	mov	r1, r4
   11e44:	add	sp, sp, #20
   11e48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e4c:	ldrd	r2, [sp, #56]	; 0x38
   11e50:	mov	r0, sl
   11e54:	mov	r1, fp
   11e58:	strd	r2, [sp]
   11e5c:	strd	r8, [sp, #8]
   11e60:	mov	r2, sl
   11e64:	mov	r3, fp
   11e68:	bl	11cbc <__assert_fail@plt+0x4dc>
   11e6c:	lsrs	r7, r7, #1
   11e70:	rrx	r6, r6
   11e74:	and	r2, r6, #1
   11e78:	mov	r3, #0
   11e7c:	orrs	r3, r2, r3
   11e80:	mov	sl, r0
   11e84:	mov	fp, r1
   11e88:	beq	11e34 <__assert_fail@plt+0x654>
   11e8c:	ldrd	r2, [sp, #56]	; 0x38
   11e90:	strd	r8, [sp, #8]
   11e94:	strd	r2, [sp]
   11e98:	mov	r2, r0
   11e9c:	mov	r3, r1
   11ea0:	mov	r0, r5
   11ea4:	mov	r1, r4
   11ea8:	bl	11cbc <__assert_fail@plt+0x4dc>
   11eac:	mov	r5, r0
   11eb0:	mov	r4, r1
   11eb4:	b	11e34 <__assert_fail@plt+0x654>
   11eb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ebc:	sub	sp, sp, #36	; 0x24
   11ec0:	mov	r6, r0
   11ec4:	ldrd	r4, [sp, #96]	; 0x60
   11ec8:	mov	r7, r1
   11ecc:	mov	r8, r2
   11ed0:	mov	r9, r3
   11ed4:	strd	r4, [sp, #16]
   11ed8:	ldrd	r2, [sp, #80]	; 0x50
   11edc:	strd	r8, [sp, #8]
   11ee0:	strd	r6, [sp]
   11ee4:	ldrd	r0, [sp, #72]	; 0x48
   11ee8:	bl	11dfc <__assert_fail@plt+0x61c>
   11eec:	subs	r2, r6, r4
   11ef0:	sbc	r3, r7, r5
   11ef4:	strd	r2, [sp, #24]
   11ef8:	cmp	r5, r1
   11efc:	cmpeq	r4, r0
   11f00:	moveq	sl, #1
   11f04:	movne	sl, #0
   11f08:	cmp	r1, r3
   11f0c:	cmpeq	r0, r2
   11f10:	orreq	sl, sl, #1
   11f14:	cmp	sl, #0
   11f18:	moveq	fp, #1
   11f1c:	beq	11f60 <__assert_fail@plt+0x780>
   11f20:	mov	r0, sl
   11f24:	add	sp, sp, #36	; 0x24
   11f28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f2c:	mov	r2, r0
   11f30:	mov	r3, r1
   11f34:	strd	r8, [sp, #8]
   11f38:	strd	r6, [sp]
   11f3c:	bl	11cbc <__assert_fail@plt+0x4dc>
   11f40:	ldrd	r2, [sp, #24]
   11f44:	cmp	r3, r1
   11f48:	cmpeq	r2, r0
   11f4c:	beq	11f70 <__assert_fail@plt+0x790>
   11f50:	cmp	r5, r1
   11f54:	cmpeq	r4, r0
   11f58:	beq	11f20 <__assert_fail@plt+0x740>
   11f5c:	add	fp, fp, #1
   11f60:	ldr	r3, [sp, #88]	; 0x58
   11f64:	cmp	fp, r3
   11f68:	bcc	11f2c <__assert_fail@plt+0x74c>
   11f6c:	b	11f20 <__assert_fail@plt+0x740>
   11f70:	mov	sl, #1
   11f74:	b	11f20 <__assert_fail@plt+0x740>
   11f78:	push	{r4, r5, r6, lr}
   11f7c:	mov	r4, r0
   11f80:	mov	r5, #0
   11f84:	mov	r6, #12
   11f88:	ldr	r3, [r4, #8]
   11f8c:	ldr	r0, [r4]
   11f90:	cmp	r5, r3
   11f94:	bcc	11fa8 <__assert_fail@plt+0x7c8>
   11f98:	bl	16840 <__assert_fail@plt+0x5060>
   11f9c:	ldr	r0, [r4, #4]
   11fa0:	pop	{r4, r5, r6, lr}
   11fa4:	b	16840 <__assert_fail@plt+0x5060>
   11fa8:	mla	r0, r6, r5, r0
   11fac:	bl	11660 <__gmpz_clear@plt>
   11fb0:	add	r5, r5, #1
   11fb4:	b	11f88 <__assert_fail@plt+0x7a8>
   11fb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fbc:	sub	sp, sp, #132	; 0x84
   11fc0:	ldrd	r4, [sp, #208]	; 0xd0
   11fc4:	strd	r2, [sp, #32]
   11fc8:	str	r0, [sp, #124]	; 0x7c
   11fcc:	rsbs	r4, r4, #0
   11fd0:	rsc	r5, r5, #0
   11fd4:	cmp	r2, #0
   11fd8:	sbcs	r3, r3, #0
   11fdc:	ldrd	r8, [sp, #168]	; 0xa8
   11fe0:	strd	r4, [sp, #40]	; 0x28
   11fe4:	bge	11ffc <__assert_fail@plt+0x81c>
   11fe8:	ldr	r3, [pc, #2116]	; 12834 <__assert_fail@plt+0x1054>
   11fec:	ldr	r2, [pc, #2116]	; 12838 <__assert_fail@plt+0x1058>
   11ff0:	ldr	r1, [pc, #2116]	; 1283c <__assert_fail@plt+0x105c>
   11ff4:	ldr	r0, [pc, #2116]	; 12840 <__assert_fail@plt+0x1060>
   11ff8:	bl	117e0 <__assert_fail@plt>
   11ffc:	ldrd	r2, [sp, #176]	; 0xb0
   12000:	cmp	r2, #0
   12004:	sbcs	r3, r3, #0
   12008:	ldrlt	r3, [pc, #2084]	; 12834 <__assert_fail@plt+0x1054>
   1200c:	ldrlt	r2, [pc, #2096]	; 12844 <__assert_fail@plt+0x1064>
   12010:	ldrlt	r1, [pc, #2084]	; 1283c <__assert_fail@plt+0x105c>
   12014:	ldrlt	r0, [pc, #2092]	; 12848 <__assert_fail@plt+0x1068>
   12018:	blt	11ff8 <__assert_fail@plt+0x818>
   1201c:	ldrd	r2, [sp, #192]	; 0xc0
   12020:	cmp	r2, #0
   12024:	sbcs	r3, r3, #0
   12028:	ldrlt	r3, [pc, #2052]	; 12834 <__assert_fail@plt+0x1054>
   1202c:	ldrlt	r2, [pc, #2072]	; 1284c <__assert_fail@plt+0x106c>
   12030:	ldrlt	r1, [pc, #2052]	; 1283c <__assert_fail@plt+0x105c>
   12034:	ldrlt	r0, [pc, #2068]	; 12850 <__assert_fail@plt+0x1070>
   12038:	blt	11ff8 <__assert_fail@plt+0x818>
   1203c:	ldrd	r0, [sp, #184]	; 0xb8
   12040:	mov	r1, #0
   12044:	mov	r3, #0
   12048:	strd	r0, [sp, #16]
   1204c:	ldr	r1, [sp, #20]
   12050:	mov	r2, r8
   12054:	mul	ip, r8, r1
   12058:	ldr	r1, [sp, #16]
   1205c:	mla	ip, r1, r3, ip
   12060:	umull	r0, r1, r8, r1
   12064:	strd	r0, [sp]
   12068:	ldr	r1, [sp, #4]
   1206c:	add	ip, ip, r1
   12070:	ldr	r1, [sp, #16]
   12074:	umull	sl, fp, r1, r9
   12078:	ldr	r1, [sp, #20]
   1207c:	mla	fp, r9, r1, fp
   12080:	ldr	r1, [sp, #188]	; 0xbc
   12084:	umull	r4, r5, r8, r1
   12088:	umull	r6, r7, r9, r1
   1208c:	mla	r5, r1, r3, r5
   12090:	adds	r4, r4, sl
   12094:	adc	r5, r5, fp
   12098:	mov	r1, #0
   1209c:	adds	r0, ip, r4
   120a0:	adc	r1, r1, r5
   120a4:	cmp	fp, r1
   120a8:	cmpeq	sl, r0
   120ac:	bls	120b8 <__assert_fail@plt+0x8d8>
   120b0:	adds	r6, r6, #0
   120b4:	adc	r7, r7, #1
   120b8:	ldr	ip, [sp]
   120bc:	adds	sl, r1, r6
   120c0:	mov	r5, #0
   120c4:	adc	fp, r5, r7
   120c8:	mov	r7, r0
   120cc:	adds	r0, r5, ip
   120d0:	adc	r1, r7, #0
   120d4:	strd	sl, [sp, #96]	; 0x60
   120d8:	strd	r0, [sp, #72]	; 0x48
   120dc:	ldrd	r0, [sp, #176]	; 0xb0
   120e0:	mov	r1, #0
   120e4:	strd	r0, [sp, #8]
   120e8:	ldr	r1, [sp, #12]
   120ec:	ldr	lr, [sp, #12]
   120f0:	mul	ip, r2, r1
   120f4:	ldr	r1, [sp, #8]
   120f8:	mla	ip, r1, r3, ip
   120fc:	umull	r6, r7, r2, r1
   12100:	umull	r0, r1, r9, r1
   12104:	mla	r1, r9, lr, r1
   12108:	ldr	lr, [sp, #180]	; 0xb4
   1210c:	add	ip, ip, r7
   12110:	umull	r8, r9, r9, lr
   12114:	strd	r8, [sp, #80]	; 0x50
   12118:	umull	r8, r9, r2, lr
   1211c:	mla	r9, lr, r3, r9
   12120:	adds	r8, r8, r0
   12124:	adc	r9, r9, r1
   12128:	adds	r8, r8, ip
   1212c:	adc	r9, r9, r5
   12130:	cmp	r1, r9
   12134:	cmpeq	r0, r8
   12138:	bls	1214c <__assert_fail@plt+0x96c>
   1213c:	ldrd	r2, [sp, #80]	; 0x50
   12140:	adds	r2, r2, #0
   12144:	adc	r3, r3, #1
   12148:	strd	r2, [sp, #80]	; 0x50
   1214c:	mov	r3, #0
   12150:	mov	r2, #0
   12154:	adds	r0, r2, r6
   12158:	str	r3, [sp, #52]	; 0x34
   1215c:	ldr	r2, [sp, #76]	; 0x4c
   12160:	ldr	r3, [sp, #40]	; 0x28
   12164:	adc	r1, r8, #0
   12168:	ldrd	r4, [sp, #200]	; 0xc8
   1216c:	mul	ip, r3, r2
   12170:	ldr	r2, [sp, #72]	; 0x48
   12174:	ldr	r3, [sp, #44]	; 0x2c
   12178:	mov	r5, #0
   1217c:	strd	r0, [sp, #104]	; 0x68
   12180:	mla	ip, r2, r3, ip
   12184:	ldr	r3, [sp, #40]	; 0x28
   12188:	strd	r4, [sp, #24]
   1218c:	ldr	r4, [sp, #24]
   12190:	umull	r0, r1, r3, r2
   12194:	str	r9, [sp, #48]	; 0x30
   12198:	add	ip, ip, r1
   1219c:	mov	r2, r0
   121a0:	umull	r6, r7, ip, r4
   121a4:	ldr	r4, [sp, #28]
   121a8:	mov	r3, #0
   121ac:	mov	lr, #0
   121b0:	mla	r7, ip, r4, r7
   121b4:	ldr	r4, [sp, #204]	; 0xcc
   121b8:	umull	r0, r1, ip, r4
   121bc:	strd	r0, [sp, #88]	; 0x58
   121c0:	mov	r1, r4
   121c4:	umull	r4, r5, r4, r2
   121c8:	mla	r5, r1, r3, r5
   121cc:	ldr	r1, [sp, #28]
   121d0:	adds	r4, r4, r6
   121d4:	adc	r5, r5, r7
   121d8:	mul	sl, r2, r1
   121dc:	ldr	r1, [sp, #24]
   121e0:	umull	r8, r9, r2, r1
   121e4:	mla	sl, r1, r3, sl
   121e8:	add	r0, sl, r9
   121ec:	adds	r0, r0, r4
   121f0:	adc	r1, lr, r5
   121f4:	cmp	r7, r1
   121f8:	cmpeq	r6, r0
   121fc:	bls	12210 <__assert_fail@plt+0xa30>
   12200:	ldrd	r4, [sp, #88]	; 0x58
   12204:	adds	r4, r4, #0
   12208:	adc	r5, r5, #1
   1220c:	strd	r4, [sp, #88]	; 0x58
   12210:	mov	sl, r1
   12214:	ldrd	r0, [sp, #192]	; 0xc0
   12218:	mov	r1, #0
   1221c:	mov	fp, #0
   12220:	strd	r0, [sp]
   12224:	ldr	r1, [sp, #4]
   12228:	mul	r8, r2, r1
   1222c:	ldr	r1, [sp]
   12230:	mla	r8, r1, r3, r8
   12234:	umull	r4, r5, r2, r1
   12238:	ldr	r1, [sp, #4]
   1223c:	add	r8, r8, r5
   12240:	mul	r6, ip, r1
   12244:	ldr	r1, [sp]
   12248:	mla	r6, lr, r1, r6
   1224c:	umull	r0, r1, ip, r1
   12250:	add	r1, r6, r1
   12254:	ldr	r6, [sp, #196]	; 0xc4
   12258:	umull	r6, r7, ip, r6
   1225c:	ldr	ip, [sp, #196]	; 0xc4
   12260:	strd	r6, [sp, #64]	; 0x40
   12264:	ldr	r6, [sp, #68]	; 0x44
   12268:	mla	ip, lr, ip, r6
   1226c:	str	ip, [sp, #68]	; 0x44
   12270:	ldr	ip, [sp, #196]	; 0xc4
   12274:	umull	r6, r7, ip, r2
   12278:	mla	r7, ip, r3, r7
   1227c:	adds	r6, r6, r0
   12280:	adc	r7, r7, r1
   12284:	adds	r6, r6, r8
   12288:	adc	r7, r7, fp
   1228c:	cmp	r1, r7
   12290:	cmpeq	r0, r6
   12294:	bls	122a8 <__assert_fail@plt+0xac8>
   12298:	ldrd	r2, [sp, #64]	; 0x40
   1229c:	adds	r2, r2, #0
   122a0:	adc	r3, r3, #1
   122a4:	strd	r2, [sp, #64]	; 0x40
   122a8:	mov	r3, #0
   122ac:	ldr	r2, [sp, #76]	; 0x4c
   122b0:	str	r3, [sp, #60]	; 0x3c
   122b4:	ldr	r3, [sp, #72]	; 0x48
   122b8:	mov	r9, #0
   122bc:	orrs	r3, r3, r2
   122c0:	ldrd	r2, [sp, #104]	; 0x68
   122c4:	movne	r1, #1
   122c8:	moveq	r1, #0
   122cc:	adds	r2, r2, r1
   122d0:	ldrd	r0, [sp, #88]	; 0x58
   122d4:	adc	r3, r3, #0
   122d8:	adds	sl, sl, r2
   122dc:	adc	fp, fp, r3
   122e0:	adds	r0, r0, sl
   122e4:	adc	r1, r1, fp
   122e8:	cmp	r3, r1
   122ec:	cmpeq	r2, r0
   122f0:	mov	sl, r0
   122f4:	movhi	r0, #1
   122f8:	movls	r0, #0
   122fc:	mov	r2, r0
   12300:	mov	r3, #0
   12304:	str	r7, [sp, #56]	; 0x38
   12308:	strd	r2, [sp, #104]	; 0x68
   1230c:	ldrd	r2, [sp, #96]	; 0x60
   12310:	mov	ip, #0
   12314:	adds	r2, r2, sl
   12318:	adc	r3, r3, r1
   1231c:	cmp	r1, r3
   12320:	cmpeq	sl, r2
   12324:	movhi	r0, #1
   12328:	movls	r0, #0
   1232c:	mov	r8, r0
   12330:	mov	r0, #0
   12334:	adds	r0, r0, r4
   12338:	adc	r1, r6, #0
   1233c:	adds	r4, r0, r2
   12340:	adc	r5, r1, r3
   12344:	cmp	r3, r5
   12348:	cmpeq	r2, r4
   1234c:	mov	r0, r4
   12350:	movhi	r0, #1
   12354:	movls	r0, #0
   12358:	mov	r2, r0
   1235c:	mov	r3, #0
   12360:	ldr	r1, [sp, #16]
   12364:	strd	r2, [sp, #112]	; 0x70
   12368:	ldrd	r2, [sp, #32]
   1236c:	mov	r3, #0
   12370:	ldr	r0, [sp, #36]	; 0x24
   12374:	mul	lr, r1, r3
   12378:	ldr	r1, [sp, #20]
   1237c:	strd	r8, [sp, #96]	; 0x60
   12380:	strd	r4, [sp, #72]	; 0x48
   12384:	mla	lr, r2, r1, lr
   12388:	ldr	r1, [sp, #16]
   1238c:	ldr	r4, [sp, #188]	; 0xbc
   12390:	umull	r8, r9, r1, r0
   12394:	umull	r6, r7, r1, r2
   12398:	ldr	r1, [sp, #20]
   1239c:	add	lr, lr, r7
   123a0:	mla	r9, r0, r1, r9
   123a4:	ldr	r1, [sp, #188]	; 0xbc
   123a8:	umull	sl, fp, r1, r0
   123ac:	umull	r0, r1, r1, r2
   123b0:	mla	r1, r4, r3, r1
   123b4:	adds	r0, r0, r8
   123b8:	adc	r1, r1, r9
   123bc:	adds	r0, r0, lr
   123c0:	adc	r1, r1, ip
   123c4:	cmp	r9, r1
   123c8:	cmpeq	r8, r0
   123cc:	bls	123d8 <__assert_fail@plt+0xbf8>
   123d0:	adds	sl, sl, #0
   123d4:	adc	fp, fp, #1
   123d8:	ldr	r4, [sp, #8]
   123dc:	mov	r9, #0
   123e0:	mov	r5, r0
   123e4:	adds	r0, r9, r6
   123e8:	mov	r8, r1
   123ec:	mul	r6, r4, ip
   123f0:	adc	r1, r5, #0
   123f4:	ldr	r4, [sp, #12]
   123f8:	ldr	r5, [sp, #36]	; 0x24
   123fc:	ldr	r7, [sp, #36]	; 0x24
   12400:	strd	r0, [sp, #88]	; 0x58
   12404:	mla	r6, r5, r4, r6
   12408:	ldr	r4, [sp, #8]
   1240c:	ldr	r1, [sp, #8]
   12410:	umull	r4, r5, r4, r5
   12414:	mul	lr, r1, r3
   12418:	add	r5, r6, r5
   1241c:	ldr	r6, [sp, #180]	; 0xb4
   12420:	ldr	r1, [sp, #12]
   12424:	mul	ip, ip, r6
   12428:	ldr	r6, [sp, #36]	; 0x24
   1242c:	mla	lr, r2, r1, lr
   12430:	mla	ip, r9, r6, ip
   12434:	ldr	r6, [sp, #180]	; 0xb4
   12438:	ldr	r1, [sp, #8]
   1243c:	umull	r6, r7, r6, r7
   12440:	umull	r0, r1, r1, r2
   12444:	strd	r6, [sp, #32]
   12448:	ldr	r6, [sp, #36]	; 0x24
   1244c:	add	lr, lr, r1
   12450:	add	ip, ip, r6
   12454:	str	ip, [sp, #36]	; 0x24
   12458:	ldr	ip, [sp, #180]	; 0xb4
   1245c:	ldr	r6, [sp, #180]	; 0xb4
   12460:	mul	ip, ip, r3
   12464:	mla	ip, r9, r2, ip
   12468:	umull	r2, r3, r6, r2
   1246c:	adds	r2, r2, r4
   12470:	add	r3, ip, r3
   12474:	adc	r3, r3, r5
   12478:	adds	r2, r2, lr
   1247c:	adc	r3, r3, r9
   12480:	cmp	r5, r3
   12484:	cmpeq	r4, r2
   12488:	bls	1249c <__assert_fail@plt+0xcbc>
   1248c:	ldrd	r4, [sp, #32]
   12490:	adds	r4, r4, #0
   12494:	adc	r5, r5, #1
   12498:	strd	r4, [sp, #32]
   1249c:	mov	ip, #0
   124a0:	adds	r6, ip, r0
   124a4:	adc	r7, r2, #0
   124a8:	ldrd	r0, [sp, #88]	; 0x58
   124ac:	str	r3, [sp, #8]
   124b0:	ldrd	r2, [sp, #72]	; 0x48
   124b4:	ldr	lr, [sp, #204]	; 0xcc
   124b8:	str	ip, [sp, #12]
   124bc:	adds	r2, r2, r0
   124c0:	adc	r3, r3, r1
   124c4:	strd	r2, [sp, #16]
   124c8:	mov	r3, r1
   124cc:	mov	r2, r0
   124d0:	ldrd	r0, [sp, #16]
   124d4:	cmp	r3, r1
   124d8:	cmpeq	r2, r0
   124dc:	movhi	r3, #1
   124e0:	movls	r3, ip
   124e4:	adds	r8, r8, r3
   124e8:	adc	r9, r9, #0
   124ec:	adds	r2, r8, sl
   124f0:	adc	r3, r9, fp
   124f4:	ldr	r1, [sp, #16]
   124f8:	strd	r2, [sp, #72]	; 0x48
   124fc:	ldr	r3, [sp, #40]	; 0x28
   12500:	ldr	r2, [sp, #20]
   12504:	ldrd	r8, [sp, #56]	; 0x38
   12508:	mul	r2, r3, r2
   1250c:	ldr	r3, [sp, #44]	; 0x2c
   12510:	mla	r2, r1, r3, r2
   12514:	ldr	r3, [sp, #40]	; 0x28
   12518:	umull	r4, r5, r3, r1
   1251c:	ldrd	r0, [sp, #48]	; 0x30
   12520:	add	r2, r2, r5
   12524:	adds	r0, r0, r6
   12528:	adc	r1, r1, r7
   1252c:	adds	r8, r8, r0
   12530:	adc	r9, r9, r1
   12534:	mov	r0, r8
   12538:	mov	r1, r9
   1253c:	ldrd	r8, [sp, #80]	; 0x50
   12540:	adds	r8, r8, r0
   12544:	adc	r9, r9, r1
   12548:	mov	r0, r8
   1254c:	mov	r1, r9
   12550:	ldrd	r8, [sp, #104]	; 0x68
   12554:	adds	r8, r8, r0
   12558:	adc	r9, r9, r1
   1255c:	mov	r0, r8
   12560:	mov	r1, r9
   12564:	ldrd	r8, [sp, #96]	; 0x60
   12568:	adds	r8, r8, r0
   1256c:	adc	r9, r9, r1
   12570:	mov	r0, r8
   12574:	mov	r1, r9
   12578:	ldrd	r8, [sp, #112]	; 0x70
   1257c:	adds	r8, r8, r0
   12580:	adc	r9, r9, r1
   12584:	mov	r0, r8
   12588:	mov	r1, r9
   1258c:	ldrd	r8, [sp, #64]	; 0x40
   12590:	adds	r8, r8, r0
   12594:	adc	r9, r9, r1
   12598:	cmp	r7, r9
   1259c:	cmpeq	r6, r8
   125a0:	movhi	r3, #1
   125a4:	movls	r3, ip
   125a8:	mov	r0, r3
   125ac:	ldr	r3, [sp, #24]
   125b0:	mov	r1, #0
   125b4:	strd	r8, [sp, #40]	; 0x28
   125b8:	umull	sl, fp, r3, r2
   125bc:	ldr	r3, [sp, #28]
   125c0:	strd	r0, [sp, #48]	; 0x30
   125c4:	mov	r1, #0
   125c8:	mla	fp, r2, r3, fp
   125cc:	ldr	r3, [sp, #204]	; 0xcc
   125d0:	umull	r6, r7, lr, r4
   125d4:	umull	r8, r9, r3, r2
   125d8:	ldr	r3, [sp, #204]	; 0xcc
   125dc:	ldr	lr, [sp, #28]
   125e0:	mov	r0, r4
   125e4:	mul	r3, r3, r1
   125e8:	adds	r6, r6, sl
   125ec:	mla	r3, ip, r4, r3
   125f0:	mla	r9, ip, r2, r9
   125f4:	add	r7, r3, r7
   125f8:	ldr	r3, [sp, #24]
   125fc:	adc	r7, r7, fp
   12600:	mul	r3, r3, r1
   12604:	mla	r3, r4, lr, r3
   12608:	ldr	lr, [sp, #24]
   1260c:	umull	r4, r5, lr, r4
   12610:	strd	r4, [sp, #24]
   12614:	ldr	lr, [sp, #28]
   12618:	add	r4, r3, lr
   1261c:	adds	r4, r4, r6
   12620:	adc	r5, ip, r7
   12624:	cmp	fp, r5
   12628:	cmpeq	sl, r4
   1262c:	bls	12638 <__assert_fail@plt+0xe58>
   12630:	adds	r8, r8, #0
   12634:	adc	r9, r9, #1
   12638:	ldr	r3, [sp]
   1263c:	mov	sl, r5
   12640:	ldr	r6, [sp, #196]	; 0xc4
   12644:	mul	lr, r3, r1
   12648:	ldr	r3, [sp, #4]
   1264c:	mov	fp, #0
   12650:	mla	lr, r0, r3, lr
   12654:	ldr	r3, [sp]
   12658:	umull	r4, r5, r3, r0
   1265c:	strd	r4, [sp, #24]
   12660:	ldr	r3, [sp, #28]
   12664:	ldr	r4, [sp, #4]
   12668:	add	lr, lr, r3
   1266c:	ldr	r3, [sp]
   12670:	mul	r3, r3, ip
   12674:	mla	r3, r2, r4, r3
   12678:	ldr	r4, [sp]
   1267c:	umull	r4, r5, r4, r2
   12680:	add	r5, r3, r5
   12684:	ldr	r3, [sp, #196]	; 0xc4
   12688:	umull	r2, r3, r3, r2
   1268c:	mla	r3, ip, r6, r3
   12690:	mov	ip, r6
   12694:	umull	r6, r7, r6, r0
   12698:	mla	r7, ip, r1, r7
   1269c:	adds	r6, r6, r4
   126a0:	adc	r7, r7, r5
   126a4:	adds	r6, r6, lr
   126a8:	adc	r7, r7, fp
   126ac:	cmp	r5, r7
   126b0:	cmpeq	r4, r6
   126b4:	bls	126c0 <__assert_fail@plt+0xee0>
   126b8:	adds	r2, r2, #0
   126bc:	adc	r3, r3, #1
   126c0:	ldr	r1, [sp, #16]
   126c4:	ldr	r0, [sp, #20]
   126c8:	ldrd	r4, [sp, #40]	; 0x28
   126cc:	orrs	r1, r1, r0
   126d0:	movne	r1, #1
   126d4:	moveq	r1, #0
   126d8:	adds	r4, r4, r1
   126dc:	adc	r5, r5, #0
   126e0:	adds	r0, r4, sl
   126e4:	adc	r1, r5, fp
   126e8:	adds	r0, r0, r8
   126ec:	adc	r1, r1, r9
   126f0:	ldrd	r8, [sp, #72]	; 0x48
   126f4:	ldr	ip, [sp, #24]
   126f8:	mov	sl, #0
   126fc:	adds	r8, r8, r0
   12700:	adc	r9, r9, r1
   12704:	strd	r0, [sp]
   12708:	adds	r0, sl, ip
   1270c:	strd	r4, [sp, #16]
   12710:	adc	r1, r6, #0
   12714:	mov	r4, r7
   12718:	ldrd	r6, [sp, #8]
   1271c:	adds	r0, r0, r8
   12720:	adc	r1, r1, r9
   12724:	adds	r6, r6, r4
   12728:	adc	r7, r7, sl
   1272c:	mov	r4, r6
   12730:	mov	r5, r7
   12734:	ldrd	r6, [sp, #48]	; 0x30
   12738:	ldrd	sl, [sp]
   1273c:	adds	r6, r6, r4
   12740:	adc	r7, r7, r5
   12744:	mov	r4, r6
   12748:	mov	r5, r7
   1274c:	ldrd	r6, [sp, #32]
   12750:	adds	r6, r6, r4
   12754:	adc	r7, r7, r5
   12758:	mov	r4, r6
   1275c:	mov	r5, r7
   12760:	ldrd	r6, [sp, #16]
   12764:	cmp	r7, fp
   12768:	cmpeq	r6, sl
   1276c:	movhi	ip, #1
   12770:	movls	ip, #0
   12774:	adds	r4, r4, ip
   12778:	adc	r5, r5, #0
   1277c:	cmp	fp, r9
   12780:	cmpeq	sl, r8
   12784:	movhi	ip, #1
   12788:	movls	ip, #0
   1278c:	adds	r4, r4, ip
   12790:	adc	r5, r5, #0
   12794:	cmp	r9, r1
   12798:	cmpeq	r8, r0
   1279c:	movhi	ip, #1
   127a0:	movls	ip, #0
   127a4:	adds	r4, r4, ip
   127a8:	adc	r5, r5, #0
   127ac:	adds	r4, r4, r2
   127b0:	adc	r5, r5, r3
   127b4:	ldrd	r2, [sp, #192]	; 0xc0
   127b8:	cmp	r3, r5
   127bc:	cmpeq	r2, r4
   127c0:	bcc	127e8 <__assert_fail@plt+0x1008>
   127c4:	ldrd	r6, [sp, #200]	; 0xc8
   127c8:	moveq	r3, #1
   127cc:	movne	r3, #0
   127d0:	cmp	r7, r1
   127d4:	cmpeq	r6, r0
   127d8:	movhi	r3, #0
   127dc:	andls	r3, r3, #1
   127e0:	cmp	r3, #0
   127e4:	beq	12824 <__assert_fail@plt+0x1044>
   127e8:	ldrd	r2, [sp, #200]	; 0xc8
   127ec:	ldrd	r6, [sp, #200]	; 0xc8
   127f0:	cmp	r3, r1
   127f4:	cmpeq	r2, r0
   127f8:	movhi	r3, #1
   127fc:	movls	r3, #0
   12800:	subs	r6, r0, r6
   12804:	sbc	r7, r1, r7
   12808:	mov	r0, r6
   1280c:	mov	r1, r7
   12810:	ldrd	r6, [sp, #192]	; 0xc0
   12814:	subs	r6, r4, r6
   12818:	sbc	r7, r5, r7
   1281c:	subs	r4, r6, r3
   12820:	sbc	r5, r7, #0
   12824:	ldr	r3, [sp, #124]	; 0x7c
   12828:	strd	r4, [r3]
   1282c:	add	sp, sp, #132	; 0x84
   12830:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12834:	andeq	ip, r1, r3, asr #14
   12838:	andeq	r0, r0, r1, ror #7
   1283c:	andeq	pc, r1, ip, asr r5	; <UNPREDICTABLE>
   12840:	andeq	pc, r1, r9, ror #10
   12844:	andeq	r0, r0, r2, ror #7
   12848:	andeq	pc, r1, r8, lsl #11
   1284c:	andeq	r0, r0, r3, ror #7
   12850:	andeq	pc, r1, r7, lsr #11
   12854:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12858:	mov	sl, r0
   1285c:	ldrd	r4, [r1]
   12860:	ldrd	r6, [r1, #8]
   12864:	ldrd	r0, [r3]
   12868:	sub	sp, sp, #88	; 0x58
   1286c:	mov	r9, r2
   12870:	strd	r0, [sp, #64]	; 0x40
   12874:	ldr	r2, [sp, #128]	; 0x80
   12878:	ldrd	r0, [r3, #8]
   1287c:	mov	r8, #64	; 0x40
   12880:	strd	r0, [sp, #72]	; 0x48
   12884:	ldrd	r0, [r2]
   12888:	ldrd	r2, [r2, #8]
   1288c:	strd	r0, [sp, #56]	; 0x38
   12890:	strd	r2, [sp, #48]	; 0x30
   12894:	ldrd	r2, [r9]
   12898:	strd	r2, [sp, #80]	; 0x50
   1289c:	ldrd	r2, [sp, #80]	; 0x50
   128a0:	mov	r3, #0
   128a4:	and	r2, r2, #1
   128a8:	orrs	r3, r2, r3
   128ac:	beq	128f0 <__assert_fail@plt+0x1110>
   128b0:	ldrd	r2, [sp, #120]	; 0x78
   128b4:	strd	r4, [sp, #16]
   128b8:	strd	r6, [sp, #8]
   128bc:	strd	r2, [sp, #40]	; 0x28
   128c0:	ldrd	r2, [sp, #64]	; 0x40
   128c4:	mov	r0, sl
   128c8:	strd	r2, [sp, #32]
   128cc:	ldrd	r2, [sp, #72]	; 0x48
   128d0:	strd	r2, [sp, #24]
   128d4:	ldrd	r2, [sp, #56]	; 0x38
   128d8:	strd	r2, [sp]
   128dc:	ldrd	r2, [sp, #48]	; 0x30
   128e0:	bl	11fb8 <__assert_fail@plt+0x7d8>
   128e4:	ldrd	r2, [sl]
   128e8:	strd	r2, [sp, #48]	; 0x30
   128ec:	strd	r0, [sp, #56]	; 0x38
   128f0:	ldrd	r2, [sp, #120]	; 0x78
   128f4:	strd	r4, [sp, #16]
   128f8:	strd	r4, [sp]
   128fc:	strd	r2, [sp, #40]	; 0x28
   12900:	ldrd	r2, [sp, #64]	; 0x40
   12904:	strd	r6, [sp, #8]
   12908:	mov	r0, sl
   1290c:	strd	r2, [sp, #32]
   12910:	ldrd	r2, [sp, #72]	; 0x48
   12914:	strd	r2, [sp, #24]
   12918:	mov	r2, r6
   1291c:	mov	r3, r7
   12920:	bl	11fb8 <__assert_fail@plt+0x7d8>
   12924:	ldrd	r2, [sp, #80]	; 0x50
   12928:	ldrd	r6, [sl]
   1292c:	lsrs	r3, r3, #1
   12930:	rrx	r2, r2
   12934:	subs	r8, r8, #1
   12938:	strd	r2, [sp, #80]	; 0x50
   1293c:	mov	r4, r0
   12940:	mov	r5, r1
   12944:	bne	1289c <__assert_fail@plt+0x10bc>
   12948:	ldrd	r8, [r9, #8]
   1294c:	orrs	r3, r8, r9
   12950:	bne	12968 <__assert_fail@plt+0x1188>
   12954:	ldrd	r2, [sp, #48]	; 0x30
   12958:	ldrd	r0, [sp, #56]	; 0x38
   1295c:	strd	r2, [sl]
   12960:	add	sp, sp, #88	; 0x58
   12964:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12968:	and	r2, r8, #1
   1296c:	mov	r3, #0
   12970:	orrs	r3, r2, r3
   12974:	beq	129b8 <__assert_fail@plt+0x11d8>
   12978:	ldrd	r2, [sp, #120]	; 0x78
   1297c:	strd	r4, [sp, #16]
   12980:	strd	r6, [sp, #8]
   12984:	strd	r2, [sp, #40]	; 0x28
   12988:	ldrd	r2, [sp, #64]	; 0x40
   1298c:	mov	r0, sl
   12990:	strd	r2, [sp, #32]
   12994:	ldrd	r2, [sp, #72]	; 0x48
   12998:	strd	r2, [sp, #24]
   1299c:	ldrd	r2, [sp, #56]	; 0x38
   129a0:	strd	r2, [sp]
   129a4:	ldrd	r2, [sp, #48]	; 0x30
   129a8:	bl	11fb8 <__assert_fail@plt+0x7d8>
   129ac:	ldrd	r2, [sl]
   129b0:	strd	r2, [sp, #48]	; 0x30
   129b4:	strd	r0, [sp, #56]	; 0x38
   129b8:	ldrd	r2, [sp, #120]	; 0x78
   129bc:	strd	r4, [sp, #16]
   129c0:	strd	r4, [sp]
   129c4:	strd	r2, [sp, #40]	; 0x28
   129c8:	ldrd	r2, [sp, #64]	; 0x40
   129cc:	strd	r6, [sp, #8]
   129d0:	mov	r0, sl
   129d4:	strd	r2, [sp, #32]
   129d8:	ldrd	r2, [sp, #72]	; 0x48
   129dc:	lsrs	r9, r9, #1
   129e0:	rrx	r8, r8
   129e4:	strd	r2, [sp, #24]
   129e8:	mov	r2, r6
   129ec:	mov	r3, r7
   129f0:	bl	11fb8 <__assert_fail@plt+0x7d8>
   129f4:	ldrd	r6, [sl]
   129f8:	mov	r4, r0
   129fc:	mov	r5, r1
   12a00:	b	1294c <__assert_fail@plt+0x116c>
   12a04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a08:	sub	sp, sp, #92	; 0x5c
   12a0c:	mov	r5, r0
   12a10:	ldr	r6, [sp, #140]	; 0x8c
   12a14:	strd	r2, [sp, #64]	; 0x40
   12a18:	strd	r2, [sp]
   12a1c:	str	r6, [sp, #8]
   12a20:	mov	r3, r0
   12a24:	ldr	r2, [sp, #132]	; 0x84
   12a28:	ldr	r1, [sp, #128]	; 0x80
   12a2c:	add	r0, sp, #80	; 0x50
   12a30:	bl	12854 <__assert_fail@plt+0x1074>
   12a34:	ldrd	r2, [sp, #80]	; 0x50
   12a38:	mov	sl, r0
   12a3c:	mov	fp, r1
   12a40:	ldrd	r0, [r6]
   12a44:	cmp	fp, r1
   12a48:	strd	r0, [sp, #48]	; 0x30
   12a4c:	cmpeq	sl, r0
   12a50:	ldrd	r0, [r6, #8]
   12a54:	strd	r0, [sp, #72]	; 0x48
   12a58:	bne	12a78 <__assert_fail@plt+0x1298>
   12a5c:	cmp	r3, r1
   12a60:	cmpeq	r2, r0
   12a64:	bne	12a78 <__assert_fail@plt+0x1298>
   12a68:	mov	r4, #1
   12a6c:	mov	r0, r4
   12a70:	add	sp, sp, #92	; 0x5c
   12a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a78:	ldrd	r8, [r5]
   12a7c:	ldrd	r0, [sp, #48]	; 0x30
   12a80:	subs	r0, r8, r0
   12a84:	sbc	r1, r9, r1
   12a88:	mov	r8, r0
   12a8c:	mov	r9, r1
   12a90:	ldrd	r0, [sp, #72]	; 0x48
   12a94:	strd	r8, [sp, #56]	; 0x38
   12a98:	ldrd	r8, [r5, #8]
   12a9c:	subs	r0, r8, r0
   12aa0:	sbc	r1, r9, r1
   12aa4:	mov	r8, r0
   12aa8:	mov	r9, r1
   12aac:	ldrd	r0, [sp, #48]	; 0x30
   12ab0:	strd	r8, [sp, #72]	; 0x48
   12ab4:	ldrd	r8, [r5]
   12ab8:	cmp	r1, r9
   12abc:	cmpeq	r0, r8
   12ac0:	ldrd	r8, [sp, #72]	; 0x48
   12ac4:	movhi	r1, #1
   12ac8:	movls	r1, #0
   12acc:	subs	r8, r8, r1
   12ad0:	ldrd	r0, [sp, #56]	; 0x38
   12ad4:	sbc	r9, r9, #0
   12ad8:	cmp	fp, r1
   12adc:	cmpeq	sl, r0
   12ae0:	moveq	r4, #1
   12ae4:	movne	r4, #0
   12ae8:	cmp	r3, r9
   12aec:	cmpeq	r2, r8
   12af0:	movne	r4, #0
   12af4:	andeq	r4, r4, #1
   12af8:	cmp	r4, #0
   12afc:	moveq	r7, #1
   12b00:	bne	12a68 <__assert_fail@plt+0x1288>
   12b04:	ldr	r1, [sp, #136]	; 0x88
   12b08:	cmp	r7, r1
   12b0c:	bcs	12a6c <__assert_fail@plt+0x128c>
   12b10:	ldrd	r0, [sp, #64]	; 0x40
   12b14:	strd	sl, [sp, #16]
   12b18:	strd	sl, [sp]
   12b1c:	strd	r0, [sp, #40]	; 0x28
   12b20:	ldrd	r0, [r5]
   12b24:	strd	r2, [sp, #8]
   12b28:	strd	r0, [sp, #32]
   12b2c:	ldrd	r0, [r5, #8]
   12b30:	strd	r0, [sp, #24]
   12b34:	add	r0, sp, #80	; 0x50
   12b38:	bl	11fb8 <__assert_fail@plt+0x7d8>
   12b3c:	ldrd	r2, [sp, #80]	; 0x50
   12b40:	mov	sl, r0
   12b44:	mov	fp, r1
   12b48:	ldrd	r0, [sp, #56]	; 0x38
   12b4c:	cmp	r1, fp
   12b50:	cmpeq	r0, sl
   12b54:	moveq	r1, #1
   12b58:	movne	r1, #0
   12b5c:	cmp	r9, r3
   12b60:	cmpeq	r8, r2
   12b64:	movne	r1, #0
   12b68:	andeq	r1, r1, #1
   12b6c:	cmp	r1, #0
   12b70:	bne	12a68 <__assert_fail@plt+0x1288>
   12b74:	ldrd	r0, [r6]
   12b78:	cmp	fp, r1
   12b7c:	cmpeq	sl, r0
   12b80:	bne	12b94 <__assert_fail@plt+0x13b4>
   12b84:	ldrd	r0, [r6, #8]
   12b88:	cmp	r3, r1
   12b8c:	cmpeq	r2, r0
   12b90:	beq	12a6c <__assert_fail@plt+0x128c>
   12b94:	add	r7, r7, #1
   12b98:	b	12b04 <__assert_fail@plt+0x1324>
   12b9c:	push	{r4, r5, r6, r7, lr}
   12ba0:	sub	sp, sp, #28
   12ba4:	mov	r6, r2
   12ba8:	mov	r2, sp
   12bac:	bl	168f4 <__assert_fail@plt+0x5114>
   12bb0:	ldr	r5, [pc, #96]	; 12c18 <__assert_fail@plt+0x1438>
   12bb4:	mov	r4, sp
   12bb8:	mov	r2, #0
   12bbc:	ldr	r3, [r5, #4]
   12bc0:	mov	lr, #48	; 0x30
   12bc4:	mov	r7, #1
   12bc8:	sub	r4, r0, r4
   12bcc:	rsb	r4, r4, #20
   12bd0:	mov	r1, r0
   12bd4:	sub	ip, r4, r3
   12bd8:	add	r0, ip, r3
   12bdc:	cmp	r6, r0
   12be0:	bhi	12c0c <__assert_fail@plt+0x142c>
   12be4:	cmp	r2, #0
   12be8:	strne	r3, [r5, #4]
   12bec:	ldr	r3, [r5, #4]
   12bf0:	mov	r2, r4
   12bf4:	mov	r0, r3
   12bf8:	bl	11474 <memcpy@plt>
   12bfc:	add	r4, r0, r4
   12c00:	str	r4, [r5, #4]
   12c04:	add	sp, sp, #28
   12c08:	pop	{r4, r5, r6, r7, pc}
   12c0c:	strb	lr, [r3], #1
   12c10:	mov	r2, r7
   12c14:	b	12bd8 <__assert_fail@plt+0x13f8>
   12c18:	andeq	r1, r3, ip, ror #3
   12c1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c20:	mov	r6, r0
   12c24:	mov	r7, r1
   12c28:	mov	r5, r3
   12c2c:	orrs	r3, r6, r7
   12c30:	mov	r4, r2
   12c34:	sub	sp, sp, #20
   12c38:	moveq	r2, #0
   12c3c:	beq	12d38 <__assert_fail@plt+0x1558>
   12c40:	add	r3, pc, #264	; 0x108
   12c44:	ldrd	r2, [r3]
   12c48:	bl	1c2a0 <__assert_fail@plt+0xaac0>
   12c4c:	add	r3, pc, #252	; 0xfc
   12c50:	ldrd	r2, [r3]
   12c54:	add	r9, pc, #244	; 0xf4
   12c58:	ldrd	r8, [r9]
   12c5c:	strd	r0, [sp, #8]
   12c60:	mov	r0, r6
   12c64:	mov	r1, r7
   12c68:	bl	1c2a0 <__assert_fail@plt+0xaac0>
   12c6c:	mov	ip, #64	; 0x40
   12c70:	mov	sl, r2
   12c74:	mov	fp, r3
   12c78:	mov	r2, #0
   12c7c:	mov	r3, #0
   12c80:	mov	r0, r2
   12c84:	mov	r1, r3
   12c88:	lsl	lr, r8, #31
   12c8c:	str	lr, [sp, #4]
   12c90:	mov	lr, #0
   12c94:	str	lr, [sp]
   12c98:	ldrd	r6, [sp]
   12c9c:	lsrs	r1, r1, #1
   12ca0:	rrx	r0, r0
   12ca4:	lsrs	r9, r9, #1
   12ca8:	rrx	r8, r8
   12cac:	orr	r6, r6, r0
   12cb0:	orr	r7, r7, r1
   12cb4:	mov	r0, r6
   12cb8:	adds	r6, r2, r2
   12cbc:	mov	r1, r7
   12cc0:	adc	r7, r3, r3
   12cc4:	cmp	r9, fp
   12cc8:	cmpeq	r8, sl
   12ccc:	mov	r2, r6
   12cd0:	mov	r3, r7
   12cd4:	bcc	12cf4 <__assert_fail@plt+0x1514>
   12cd8:	moveq	lr, #1
   12cdc:	cmp	r1, r5
   12ce0:	cmpeq	r0, r4
   12ce4:	movhi	lr, #0
   12ce8:	andls	lr, lr, #1
   12cec:	cmp	lr, #0
   12cf0:	beq	12d24 <__assert_fail@plt+0x1544>
   12cf4:	adds	r2, r6, #1
   12cf8:	adc	r3, r7, #0
   12cfc:	cmp	r1, r5
   12d00:	cmpeq	r0, r4
   12d04:	movhi	lr, #1
   12d08:	movls	lr, #0
   12d0c:	subs	r4, r4, r0
   12d10:	sbc	r5, r5, r1
   12d14:	subs	sl, sl, r8
   12d18:	sbc	fp, fp, r9
   12d1c:	subs	sl, sl, lr
   12d20:	sbc	fp, fp, #0
   12d24:	subs	ip, ip, #1
   12d28:	bne	12c88 <__assert_fail@plt+0x14a8>
   12d2c:	ldrd	r0, [sp, #8]
   12d30:	bl	12c1c <__assert_fail@plt+0x143c>
   12d34:	mov	r2, #9
   12d38:	mov	r0, r4
   12d3c:	mov	r1, r5
   12d40:	add	sp, sp, #20
   12d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d48:	b	12b9c <__assert_fail@plt+0x13bc>
   12d4c:	nop			; (mov r0, r0)
   12d50:	blcc	fe6c5558 <stdout@@GLIBC_2.4+0xfe694374>
   12d54:	andeq	r0, r0, r0
   12d58:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d5c:	mov	r4, #12
   12d60:	ldr	r6, [r0, #8]
   12d64:	ldr	sl, [r0]
   12d68:	sub	r8, r6, #1
   12d6c:	mul	r4, r4, r6
   12d70:	ldr	r9, [r0, #4]
   12d74:	sub	r5, r4, #12
   12d78:	mov	r7, r0
   12d7c:	add	r5, sl, r5
   12d80:	mov	fp, r8
   12d84:	str	r1, [sp, #4]
   12d88:	cmp	fp, #0
   12d8c:	bge	12e0c <__assert_fail@plt+0x162c>
   12d90:	add	r1, r4, #12
   12d94:	mov	r0, sl
   12d98:	bl	19720 <__assert_fail@plt+0x7f40>
   12d9c:	add	r6, r6, #1
   12da0:	lsl	r5, r6, #2
   12da4:	mov	r1, r5
   12da8:	sub	r5, r5, #4
   12dac:	mov	sl, r0
   12db0:	mov	r0, r9
   12db4:	bl	19720 <__assert_fail@plt+0x7f40>
   12db8:	add	r4, sl, r4
   12dbc:	mov	r9, r0
   12dc0:	mov	r0, r4
   12dc4:	bl	1178c <__gmpz_init@plt>
   12dc8:	add	r5, r9, r5
   12dcc:	mov	r0, r4
   12dd0:	cmp	fp, r8
   12dd4:	sub	r4, r0, #12
   12dd8:	blt	12e2c <__assert_fail@plt+0x164c>
   12ddc:	add	fp, fp, #1
   12de0:	mov	r0, #12
   12de4:	ldr	r1, [sp, #4]
   12de8:	mla	r0, r0, fp, sl
   12dec:	bl	114f8 <__gmpz_set@plt>
   12df0:	mov	r3, #1
   12df4:	str	r3, [r9, fp, lsl #2]
   12df8:	str	sl, [r7]
   12dfc:	str	r9, [r7, #4]
   12e00:	str	r6, [r7, #8]
   12e04:	add	sp, sp, #12
   12e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e0c:	mov	r0, r5
   12e10:	ldr	r1, [sp, #4]
   12e14:	bl	1172c <__gmpz_cmp@plt>
   12e18:	sub	r5, r5, #12
   12e1c:	cmp	r0, #0
   12e20:	ble	12e48 <__assert_fail@plt+0x1668>
   12e24:	sub	fp, fp, #1
   12e28:	b	12d88 <__assert_fail@plt+0x15a8>
   12e2c:	mov	r1, r4
   12e30:	bl	114f8 <__gmpz_set@plt>
   12e34:	ldr	r2, [r5, #-4]
   12e38:	sub	r8, r8, #1
   12e3c:	str	r2, [r5], #-4
   12e40:	mov	r0, r4
   12e44:	b	12dd0 <__assert_fail@plt+0x15f0>
   12e48:	bne	12d90 <__assert_fail@plt+0x15b0>
   12e4c:	ldr	r2, [r9, fp, lsl #2]
   12e50:	add	r2, r2, #1
   12e54:	str	r2, [r9, fp, lsl #2]
   12e58:	b	12e04 <__assert_fail@plt+0x1624>
   12e5c:	push	{r4, r5, r6, lr}
   12e60:	mov	r0, #1
   12e64:	ldr	r4, [pc, #76]	; 12eb8 <__assert_fail@plt+0x16d8>
   12e68:	ldm	r4, {r1, r5}
   12e6c:	sub	r5, r5, r1
   12e70:	mov	r2, r5
   12e74:	bl	16894 <__assert_fail@plt+0x50b4>
   12e78:	cmp	r5, r0
   12e7c:	beq	12eac <__assert_fail@plt+0x16cc>
   12e80:	bl	1166c <__errno_location@plt>
   12e84:	mov	r2, #5
   12e88:	ldr	r1, [pc, #44]	; 12ebc <__assert_fail@plt+0x16dc>
   12e8c:	ldr	r4, [r0]
   12e90:	mov	r0, #0
   12e94:	bl	114bc <dcgettext@plt>
   12e98:	ldr	r2, [pc, #32]	; 12ec0 <__assert_fail@plt+0x16e0>
   12e9c:	mov	r1, r4
   12ea0:	mov	r3, r0
   12ea4:	mov	r0, #1
   12ea8:	bl	115ac <error@plt>
   12eac:	ldr	r3, [r4]
   12eb0:	str	r3, [r4, #4]
   12eb4:	pop	{r4, r5, r6, pc}
   12eb8:	andeq	r1, r3, ip, ror #3
   12ebc:	andeq	pc, r1, r6, asr #11
   12ec0:	andeq	pc, r1, r0, lsr sl	; <UNPREDICTABLE>
   12ec4:	push	{r4, r5, r6, r7, r8, lr}
   12ec8:	mov	r6, r2
   12ecc:	mov	r7, r3
   12ed0:	orrs	ip, r6, r7
   12ed4:	ldrd	r2, [sp, #24]
   12ed8:	beq	12f0c <__assert_fail@plt+0x172c>
   12edc:	ldrd	r4, [r0, #8]
   12ee0:	mov	r1, r0
   12ee4:	orrs	r0, r4, r5
   12ee8:	beq	12f00 <__assert_fail@plt+0x1720>
   12eec:	ldr	r3, [pc, #40]	; 12f1c <__assert_fail@plt+0x173c>
   12ef0:	ldr	r2, [pc, #40]	; 12f20 <__assert_fail@plt+0x1740>
   12ef4:	ldr	r1, [pc, #40]	; 12f24 <__assert_fail@plt+0x1744>
   12ef8:	ldr	r0, [pc, #40]	; 12f28 <__assert_fail@plt+0x1748>
   12efc:	bl	117e0 <__assert_fail@plt>
   12f00:	strd	r2, [r1]
   12f04:	strd	r6, [r1, #8]
   12f08:	pop	{r4, r5, r6, r7, r8, pc}
   12f0c:	mov	r1, #1
   12f10:	str	r1, [sp, #24]
   12f14:	pop	{r4, r5, r6, r7, r8, lr}
   12f18:	b	11bc0 <__assert_fail@plt+0x3e0>
   12f1c:	andeq	ip, r1, ip, asr #14
   12f20:	andeq	r0, r0, lr, lsr #4
   12f24:	andeq	pc, r1, ip, asr r5	; <UNPREDICTABLE>
   12f28:	ldrdeq	pc, [r1], -r2
   12f2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f30:	sub	sp, sp, #20
   12f34:	mov	lr, r0
   12f38:	ldrd	sl, [sp, #64]	; 0x40
   12f3c:	ldrd	r6, [sp, #72]	; 0x48
   12f40:	ldrd	r4, [sp, #56]	; 0x38
   12f44:	and	r0, r4, #1
   12f48:	mov	r1, #0
   12f4c:	orrs	r1, r0, r1
   12f50:	beq	12f84 <__assert_fail@plt+0x17a4>
   12f54:	orr	r8, r2, sl
   12f58:	orr	r9, r3, fp
   12f5c:	orrs	r1, r8, r9
   12f60:	bne	12fa8 <__assert_fail@plt+0x17c8>
   12f64:	strd	r8, [lr]
   12f68:	mov	r2, r4
   12f6c:	mov	r3, r5
   12f70:	mov	r0, r6
   12f74:	mov	r1, r7
   12f78:	add	sp, sp, #20
   12f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f80:	b	11b10 <__assert_fail@plt+0x330>
   12f84:	lsrs	r5, r5, #1
   12f88:	rrx	r4, r4
   12f8c:	lsl	r9, r2, #31
   12f90:	mov	r8, #0
   12f94:	orr	r4, r4, r8
   12f98:	orr	r5, r5, r9
   12f9c:	lsrs	r3, r3, #1
   12fa0:	rrx	r2, r2
   12fa4:	b	12f44 <__assert_fail@plt+0x1764>
   12fa8:	cmp	r3, fp
   12fac:	cmpeq	r2, sl
   12fb0:	bhi	12fd4 <__assert_fail@plt+0x17f4>
   12fb4:	moveq	ip, #1
   12fb8:	movne	ip, #0
   12fbc:	cmp	r7, r5
   12fc0:	cmpeq	r6, r4
   12fc4:	movcc	r1, #1
   12fc8:	movcs	r1, #0
   12fcc:	tst	ip, r1
   12fd0:	beq	13044 <__assert_fail@plt+0x1864>
   12fd4:	cmp	r7, r5
   12fd8:	cmpeq	r6, r4
   12fdc:	movhi	r1, #1
   12fe0:	movls	r1, #0
   12fe4:	subs	r4, r4, r6
   12fe8:	sbc	r5, r5, r7
   12fec:	subs	r2, r2, sl
   12ff0:	sbc	r3, r3, fp
   12ff4:	subs	r2, r2, r1
   12ff8:	sbc	r3, r3, #0
   12ffc:	lsl	r1, r2, #31
   13000:	str	r1, [sp, #4]
   13004:	mov	r1, #0
   13008:	str	r1, [sp]
   1300c:	ldrd	r8, [sp]
   13010:	lsrs	r5, r5, #1
   13014:	rrx	r4, r4
   13018:	lsrs	r3, r3, #1
   1301c:	rrx	r2, r2
   13020:	orr	r8, r8, r4
   13024:	orr	r9, r9, r5
   13028:	mov	r4, r8
   1302c:	mov	r5, r9
   13030:	and	r8, r8, #1
   13034:	mov	r9, #0
   13038:	orrs	r1, r8, r9
   1303c:	beq	12ffc <__assert_fail@plt+0x181c>
   13040:	b	12f54 <__assert_fail@plt+0x1774>
   13044:	cmp	r3, fp
   13048:	cmpeq	r2, sl
   1304c:	bcc	13068 <__assert_fail@plt+0x1888>
   13050:	cmp	r7, r5
   13054:	cmpeq	r6, r4
   13058:	movls	ip, #0
   1305c:	andhi	ip, ip, #1
   13060:	cmp	ip, #0
   13064:	beq	130c8 <__assert_fail@plt+0x18e8>
   13068:	subs	r6, r6, r4
   1306c:	sbc	r7, r7, r5
   13070:	subs	sl, sl, r2
   13074:	sbc	fp, fp, r3
   13078:	subs	sl, sl, r1
   1307c:	sbc	fp, fp, #0
   13080:	lsl	r1, sl, #31
   13084:	str	r1, [sp, #12]
   13088:	mov	r1, #0
   1308c:	str	r1, [sp, #8]
   13090:	ldrd	r8, [sp, #8]
   13094:	lsrs	r7, r7, #1
   13098:	rrx	r6, r6
   1309c:	lsrs	fp, fp, #1
   130a0:	rrx	sl, sl
   130a4:	orr	r8, r8, r6
   130a8:	orr	r9, r9, r7
   130ac:	mov	r6, r8
   130b0:	mov	r7, r9
   130b4:	and	r8, r8, #1
   130b8:	mov	r9, #0
   130bc:	orrs	r1, r8, r9
   130c0:	beq	13080 <__assert_fail@plt+0x18a0>
   130c4:	b	12f54 <__assert_fail@plt+0x1774>
   130c8:	mov	r0, r4
   130cc:	mov	r1, r5
   130d0:	strd	r2, [lr]
   130d4:	add	sp, sp, #20
   130d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130dc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130e0:	mov	r6, r2
   130e4:	mov	r7, r3
   130e8:	ldrd	r2, [sp, #56]	; 0x38
   130ec:	ldrd	sl, [sp, #48]	; 0x30
   130f0:	orrs	r3, r2, r3
   130f4:	bne	1310c <__assert_fail@plt+0x192c>
   130f8:	ldr	r3, [pc, #436]	; 132b4 <__assert_fail@plt+0x1ad4>
   130fc:	ldr	r2, [pc, #436]	; 132b8 <__assert_fail@plt+0x1ad8>
   13100:	ldr	r1, [pc, #436]	; 132bc <__assert_fail@plt+0x1adc>
   13104:	ldr	r0, [pc, #436]	; 132c0 <__assert_fail@plt+0x1ae0>
   13108:	bl	117e0 <__assert_fail@plt>
   1310c:	orrs	r3, r6, r7
   13110:	mov	r5, r0
   13114:	beq	131b8 <__assert_fail@plt+0x19d8>
   13118:	ldrd	r0, [sp, #56]	; 0x38
   1311c:	mov	r4, #0
   13120:	mov	r8, #0
   13124:	mov	r9, #-16777216	; 0xff000000
   13128:	and	r2, r0, r8
   1312c:	and	r3, r1, r9
   13130:	orrs	r3, r2, r3
   13134:	beq	131cc <__assert_fail@plt+0x19ec>
   13138:	cmp	r0, #0
   1313c:	sbcs	r3, r1, #0
   13140:	bge	131e8 <__assert_fail@plt+0x1a08>
   13144:	mov	r2, r6
   13148:	mov	r3, r7
   1314c:	mov	ip, #0
   13150:	mov	r8, #0
   13154:	mov	r9, #-16777216	; 0xff000000
   13158:	and	r0, r2, r8
   1315c:	and	r1, r3, r9
   13160:	orrs	r1, r0, r1
   13164:	beq	131f8 <__assert_fail@plt+0x1a18>
   13168:	cmp	r2, #0
   1316c:	sbcs	r1, r3, #0
   13170:	bge	13214 <__assert_fail@plt+0x1a34>
   13174:	sub	r4, r4, ip
   13178:	rsb	r2, r4, #64	; 0x40
   1317c:	ldrd	r0, [sp, #64]	; 0x40
   13180:	bl	1c268 <__assert_fail@plt+0xaa88>
   13184:	mov	r2, r4
   13188:	mov	r8, r0
   1318c:	mov	r9, r1
   13190:	ldrd	r0, [sp, #56]	; 0x38
   13194:	bl	1c284 <__assert_fail@plt+0xaaa4>
   13198:	mov	r2, r4
   1319c:	orr	r8, r8, r0
   131a0:	orr	r9, r9, r1
   131a4:	ldrd	r0, [sp, #64]	; 0x40
   131a8:	bl	1c284 <__assert_fail@plt+0xaaa4>
   131ac:	mov	ip, #0
   131b0:	cmp	r4, ip
   131b4:	bgt	13224 <__assert_fail@plt+0x1a44>
   131b8:	mov	r0, sl
   131bc:	mov	r1, fp
   131c0:	strd	r6, [r5]
   131c4:	add	sp, sp, #12
   131c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131cc:	lsl	r3, r1, #8
   131d0:	orr	r3, r3, r0, lsr #24
   131d4:	lsl	r2, r0, #8
   131d8:	mov	r0, r2
   131dc:	mov	r1, r3
   131e0:	add	r4, r4, #8
   131e4:	b	13128 <__assert_fail@plt+0x1948>
   131e8:	adds	r0, r0, r0
   131ec:	adc	r1, r1, r1
   131f0:	add	r4, r4, #1
   131f4:	b	13138 <__assert_fail@plt+0x1958>
   131f8:	lsl	r1, r3, #8
   131fc:	orr	r1, r1, r2, lsr #24
   13200:	lsl	r0, r2, #8
   13204:	mov	r2, r0
   13208:	mov	r3, r1
   1320c:	add	ip, ip, #8
   13210:	b	13158 <__assert_fail@plt+0x1978>
   13214:	adds	r2, r2, r2
   13218:	adc	r3, r3, r3
   1321c:	add	ip, ip, #1
   13220:	b	13168 <__assert_fail@plt+0x1988>
   13224:	cmp	r7, r9
   13228:	cmpeq	r6, r8
   1322c:	bhi	13250 <__assert_fail@plt+0x1a70>
   13230:	moveq	r2, #1
   13234:	movne	r2, #0
   13238:	cmp	fp, r1
   1323c:	cmpeq	sl, r0
   13240:	movcc	r2, #0
   13244:	andcs	r2, r2, #1
   13248:	cmp	r2, #0
   1324c:	beq	13278 <__assert_fail@plt+0x1a98>
   13250:	cmp	fp, r1
   13254:	cmpeq	sl, r0
   13258:	movcc	r2, #1
   1325c:	movcs	r2, #0
   13260:	subs	sl, sl, r0
   13264:	sbc	fp, fp, r1
   13268:	subs	r6, r6, r8
   1326c:	sbc	r7, r7, r9
   13270:	subs	r6, r6, r2
   13274:	sbc	r7, r7, #0
   13278:	lsl	r3, r8, #31
   1327c:	str	r3, [sp, #4]
   13280:	mov	r3, #0
   13284:	str	r3, [sp]
   13288:	ldrd	r2, [sp]
   1328c:	lsrs	r1, r1, #1
   13290:	rrx	r0, r0
   13294:	lsrs	r9, r9, #1
   13298:	rrx	r8, r8
   1329c:	orr	r2, r2, r0
   132a0:	orr	r3, r3, r1
   132a4:	mov	r0, r2
   132a8:	mov	r1, r3
   132ac:	add	ip, ip, #1
   132b0:	b	131b0 <__assert_fail@plt+0x19d0>
   132b4:	andeq	ip, r1, r0, ror #14
   132b8:	muleq	r0, fp, r1
   132bc:	andeq	pc, r1, ip, asr r5	; <UNPREDICTABLE>
   132c0:	andeq	pc, r1, sl, ror #11
   132c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   132c8:	mov	r4, r3
   132cc:	mov	r6, r0
   132d0:	mov	r3, r0
   132d4:	mov	r7, r1
   132d8:	mov	r0, r4
   132dc:	mov	r1, r2
   132e0:	ldr	r2, [sp, #32]
   132e4:	ldr	r8, [sp, #36]	; 0x24
   132e8:	bl	114c8 <__gmpz_powm@plt>
   132ec:	mov	r1, #1
   132f0:	mov	r0, r4
   132f4:	bl	11780 <__gmpz_cmp_ui@plt>
   132f8:	cmp	r0, #0
   132fc:	bne	13308 <__assert_fail@plt+0x1b28>
   13300:	mov	r0, #1
   13304:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13308:	mov	r1, r7
   1330c:	mov	r0, r4
   13310:	bl	1172c <__gmpz_cmp@plt>
   13314:	cmp	r0, #0
   13318:	movne	r5, #1
   1331c:	movne	r9, #2
   13320:	movne	sl, r5
   13324:	beq	13300 <__assert_fail@plt+0x1b20>
   13328:	cmp	r8, r5
   1332c:	bls	1336c <__assert_fail@plt+0x1b8c>
   13330:	mov	r3, r6
   13334:	mov	r2, r9
   13338:	mov	r1, r4
   1333c:	mov	r0, r4
   13340:	bl	11798 <__gmpz_powm_ui@plt>
   13344:	mov	r1, r7
   13348:	mov	r0, r4
   1334c:	bl	1172c <__gmpz_cmp@plt>
   13350:	cmp	r0, #0
   13354:	beq	13300 <__assert_fail@plt+0x1b20>
   13358:	mov	r1, sl
   1335c:	mov	r0, r4
   13360:	bl	11780 <__gmpz_cmp_ui@plt>
   13364:	cmp	r0, #0
   13368:	bne	13374 <__assert_fail@plt+0x1b94>
   1336c:	mov	r0, #0
   13370:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13374:	add	r5, r5, #1
   13378:	b	13328 <__assert_fail@plt+0x1b48>
   1337c:	cmp	r1, #0
   13380:	cmpeq	r0, #1
   13384:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13388:	mov	r8, r0
   1338c:	sub	sp, sp, #196	; 0xc4
   13390:	mov	r9, r1
   13394:	mov	sl, r2
   13398:	mov	fp, r3
   1339c:	bhi	136b0 <__assert_fail@plt+0x1ed0>
   133a0:	mov	r0, #1
   133a4:	mov	r1, #0
   133a8:	mov	r2, #128	; 0x80
   133ac:	strd	r0, [sp, #64]	; 0x40
   133b0:	mov	r3, #0
   133b4:	mov	r0, #0
   133b8:	mov	r1, #0
   133bc:	strd	r0, [sp, #72]	; 0x48
   133c0:	subs	r2, r2, #1
   133c4:	sbc	r3, r3, #0
   133c8:	mvn	r1, #0
   133cc:	mvn	r0, #0
   133d0:	cmp	r3, r1
   133d4:	cmpeq	r2, r0
   133d8:	bne	136cc <__assert_fail@plt+0x1eec>
   133dc:	ldrd	r2, [sp, #64]	; 0x40
   133e0:	ldrd	r0, [sp, #64]	; 0x40
   133e4:	adds	r2, r2, r2
   133e8:	adc	r3, r3, r3
   133ec:	strd	r2, [sp, #48]	; 0x30
   133f0:	ldrd	r2, [sp, #72]	; 0x48
   133f4:	ldrd	r4, [sp, #48]	; 0x30
   133f8:	adds	r2, r2, r2
   133fc:	adc	r3, r3, r3
   13400:	cmp	r1, r5
   13404:	cmpeq	r0, r4
   13408:	movhi	r1, #1
   1340c:	movls	r1, #0
   13410:	adds	r2, r2, r1
   13414:	adc	r3, r3, #0
   13418:	cmp	r9, r3
   1341c:	cmpeq	r8, r2
   13420:	bcc	13768 <__assert_fail@plt+0x1f88>
   13424:	moveq	r1, #1
   13428:	movne	r1, #0
   1342c:	cmp	fp, r5
   13430:	cmpeq	sl, r4
   13434:	movhi	r1, #0
   13438:	andls	r1, r1, #1
   1343c:	cmp	r1, #0
   13440:	bne	13768 <__assert_fail@plt+0x1f88>
   13444:	strd	r2, [sp, #152]	; 0x98
   13448:	ldrd	r2, [sp, #152]	; 0x98
   1344c:	strd	r2, [sp, #160]	; 0xa0
   13450:	strd	r2, [sp, #168]	; 0xa8
   13454:	ldrd	r2, [sp, #48]	; 0x30
   13458:	strd	r2, [sp, #56]	; 0x38
   1345c:	strd	r2, [sp, #80]	; 0x50
   13460:	mov	r3, #1
   13464:	ldr	r2, [sp, #232]	; 0xe8
   13468:	str	r3, [sp, #116]	; 0x74
   1346c:	str	r3, [sp, #112]	; 0x70
   13470:	mov	r3, #0
   13474:	strd	r2, [sp, #128]	; 0x80
   13478:	orrs	r3, r8, r9
   1347c:	movne	r3, #1
   13480:	moveq	r3, #0
   13484:	cmp	fp, #0
   13488:	cmpeq	sl, #1
   1348c:	orrne	r3, r3, #1
   13490:	cmp	r3, #0
   13494:	beq	13db0 <__assert_fail@plt+0x25d0>
   13498:	lsrs	r3, fp, #1
   1349c:	rrx	r2, sl
   134a0:	ldr	r1, [pc, #2756]	; 13f6c <__assert_fail@plt+0x278c>
   134a4:	and	r2, r2, #127	; 0x7f
   134a8:	add	r2, r1, r2
   134ac:	mov	r3, #0
   134b0:	ldrb	r0, [r2, #709]	; 0x2c5
   134b4:	adds	r2, r0, r0
   134b8:	umull	r0, r1, r0, r0
   134bc:	adc	r3, r3, r3
   134c0:	mul	ip, r0, fp
   134c4:	mla	ip, sl, r1, ip
   134c8:	umull	r0, r1, r0, sl
   134cc:	subs	r0, r2, r0
   134d0:	add	r1, ip, r1
   134d4:	sbc	r1, r3, r1
   134d8:	adds	r4, r0, r0
   134dc:	adc	r5, r1, r1
   134e0:	mul	r3, r0, r1
   134e4:	umull	r0, r1, r0, r0
   134e8:	add	r1, r1, r3, lsl #1
   134ec:	mul	r3, r0, fp
   134f0:	mla	r3, sl, r1, r3
   134f4:	umull	r0, r1, r0, sl
   134f8:	subs	r2, r4, r0
   134fc:	add	r1, r3, r1
   13500:	sbc	r3, r5, r1
   13504:	adds	r4, r2, r2
   13508:	adc	r5, r3, r3
   1350c:	mul	r1, r2, r3
   13510:	umull	r2, r3, r2, r2
   13514:	add	r3, r3, r1, lsl #1
   13518:	mul	r1, r2, fp
   1351c:	mla	r1, sl, r3, r1
   13520:	umull	r2, r3, r2, sl
   13524:	subs	r4, r4, r2
   13528:	add	r3, r1, r3
   1352c:	sbc	r5, r5, r3
   13530:	and	r2, sl, #1
   13534:	mov	r3, #0
   13538:	strd	r4, [sp, #88]	; 0x58
   1353c:	strd	r2, [sp, #96]	; 0x60
   13540:	ldrd	r0, [sp, #88]	; 0x58
   13544:	ldrd	r2, [sp, #152]	; 0x98
   13548:	strd	sl, [sp, #32]
   1354c:	strd	r0, [sp, #40]	; 0x28
   13550:	ldrd	r0, [sp, #48]	; 0x30
   13554:	strd	r2, [sp, #8]
   13558:	strd	r8, [sp, #24]
   1355c:	strd	r0, [sp, #16]
   13560:	strd	r0, [sp]
   13564:	add	r0, sp, #184	; 0xb8
   13568:	bl	11fb8 <__assert_fail@plt+0x7d8>
   1356c:	ldrd	r2, [sp, #128]	; 0x80
   13570:	adds	r2, r2, r0
   13574:	adc	r3, r3, r1
   13578:	cmp	r1, r3
   1357c:	cmpeq	r0, r2
   13580:	strd	r2, [sp, #48]	; 0x30
   13584:	ldrd	r2, [sp, #184]	; 0xb8
   13588:	movhi	r1, #1
   1358c:	movls	r1, #0
   13590:	adds	r2, r2, r1
   13594:	adc	r3, r3, #0
   13598:	cmp	r9, r3
   1359c:	cmpeq	r8, r2
   135a0:	bcc	137a0 <__assert_fail@plt+0x1fc0>
   135a4:	ldrd	r4, [sp, #48]	; 0x30
   135a8:	moveq	r1, #1
   135ac:	movne	r1, #0
   135b0:	cmp	fp, r5
   135b4:	cmpeq	sl, r4
   135b8:	movhi	r1, #0
   135bc:	andls	r1, r1, #1
   135c0:	cmp	r1, #0
   135c4:	bne	137a0 <__assert_fail@plt+0x1fc0>
   135c8:	strd	r2, [sp, #152]	; 0x98
   135cc:	ldrd	r4, [sp, #80]	; 0x50
   135d0:	ldrd	r2, [sp, #48]	; 0x30
   135d4:	ldrd	r0, [sp, #160]	; 0xa0
   135d8:	ldrd	r6, [sp, #80]	; 0x50
   135dc:	subs	r4, r4, r2
   135e0:	sbc	r5, r5, r3
   135e4:	ldrd	r2, [sp, #152]	; 0x98
   135e8:	subs	r2, r0, r2
   135ec:	sbc	r3, r1, r3
   135f0:	ldrd	r0, [sp, #48]	; 0x30
   135f4:	cmp	r1, r7
   135f8:	cmpeq	r0, r6
   135fc:	movhi	r1, #1
   13600:	movls	r1, #0
   13604:	subs	r2, r2, r1
   13608:	sbc	r3, r3, #0
   1360c:	cmp	r2, #0
   13610:	sbcs	r1, r3, #0
   13614:	bge	13648 <__assert_fail@plt+0x1e68>
   13618:	adds	r6, sl, r4
   1361c:	adc	r7, fp, r5
   13620:	adds	r2, r2, r8
   13624:	adc	r3, r3, r9
   13628:	cmp	r5, r7
   1362c:	cmpeq	r4, r6
   13630:	movhi	r1, #1
   13634:	movls	r1, #0
   13638:	adds	r2, r2, r1
   1363c:	adc	r3, r3, #0
   13640:	mov	r4, r6
   13644:	mov	r5, r7
   13648:	ldrd	r0, [sp, #88]	; 0x58
   1364c:	strd	r2, [sp, #8]
   13650:	ldrd	r2, [sp, #64]	; 0x40
   13654:	strd	r0, [sp, #40]	; 0x28
   13658:	strd	sl, [sp, #32]
   1365c:	strd	r2, [sp]
   13660:	strd	r8, [sp, #24]
   13664:	ldrd	r2, [sp, #72]	; 0x48
   13668:	strd	r4, [sp, #16]
   1366c:	add	r0, sp, #184	; 0xb8
   13670:	bl	11fb8 <__assert_fail@plt+0x7d8>
   13674:	ldrd	r2, [sp, #184]	; 0xb8
   13678:	strd	r2, [sp, #72]	; 0x48
   1367c:	ldr	r3, [sp, #112]	; 0x70
   13680:	and	r3, r3, #31
   13684:	cmp	r3, #1
   13688:	strd	r0, [sp, #64]	; 0x40
   1368c:	bne	13848 <__assert_fail@plt+0x2068>
   13690:	ldrd	r2, [sp, #96]	; 0x60
   13694:	orrs	r3, r2, r3
   13698:	bne	137d8 <__assert_fail@plt+0x1ff8>
   1369c:	ldr	r3, [pc, #2252]	; 13f70 <__assert_fail@plt+0x2790>
   136a0:	mov	r2, #476	; 0x1dc
   136a4:	ldr	r1, [pc, #2248]	; 13f74 <__assert_fail@plt+0x2794>
   136a8:	ldr	r0, [pc, #2248]	; 13f78 <__assert_fail@plt+0x2798>
   136ac:	bl	117e0 <__assert_fail@plt>
   136b0:	mov	r0, #0
   136b4:	mov	r1, #0
   136b8:	mov	r2, #64	; 0x40
   136bc:	strd	r0, [sp, #64]	; 0x40
   136c0:	mov	r3, #0
   136c4:	mov	r0, #1
   136c8:	b	133b8 <__assert_fail@plt+0x1bd8>
   136cc:	ldrd	r0, [sp, #72]	; 0x48
   136d0:	ldr	ip, [sp, #68]	; 0x44
   136d4:	mov	r7, #0
   136d8:	adds	r0, r0, r0
   136dc:	adc	r1, r1, r1
   136e0:	lsr	r6, ip, #31
   136e4:	orr	r4, r6, r0
   136e8:	orr	r5, r7, r1
   136ec:	ldrd	r0, [sp, #64]	; 0x40
   136f0:	strd	r4, [sp, #72]	; 0x48
   136f4:	ldrd	r4, [sp, #72]	; 0x48
   136f8:	adds	r0, r0, r0
   136fc:	adc	r1, r1, r1
   13700:	cmp	r9, r5
   13704:	cmpeq	r8, r4
   13708:	strd	r0, [sp, #64]	; 0x40
   1370c:	bcc	13730 <__assert_fail@plt+0x1f50>
   13710:	moveq	ip, #1
   13714:	movne	ip, r7
   13718:	cmp	r1, fp
   1371c:	cmpeq	r0, sl
   13720:	movcc	ip, #0
   13724:	andcs	ip, ip, #1
   13728:	cmp	ip, r7
   1372c:	beq	133c0 <__assert_fail@plt+0x1be0>
   13730:	cmp	r1, fp
   13734:	cmpeq	r0, sl
   13738:	movcc	ip, #1
   1373c:	movcs	ip, #0
   13740:	subs	r0, r0, sl
   13744:	sbc	r1, r1, fp
   13748:	strd	r0, [sp, #64]	; 0x40
   1374c:	ldrd	r0, [sp, #72]	; 0x48
   13750:	subs	r0, r0, r8
   13754:	sbc	r1, r1, r9
   13758:	subs	r4, r0, ip
   1375c:	sbc	r5, r1, #0
   13760:	strd	r4, [sp, #72]	; 0x48
   13764:	b	133c0 <__assert_fail@plt+0x1be0>
   13768:	ldrd	r0, [sp, #48]	; 0x30
   1376c:	ldrd	r4, [sp, #48]	; 0x30
   13770:	cmp	fp, r1
   13774:	cmpeq	sl, r0
   13778:	movhi	r1, #1
   1377c:	movls	r1, #0
   13780:	subs	r4, r4, sl
   13784:	sbc	r5, r5, fp
   13788:	subs	r2, r2, r8
   1378c:	sbc	r3, r3, r9
   13790:	subs	r2, r2, r1
   13794:	strd	r4, [sp, #48]	; 0x30
   13798:	sbc	r3, r3, #0
   1379c:	b	13444 <__assert_fail@plt+0x1c64>
   137a0:	ldrd	r0, [sp, #48]	; 0x30
   137a4:	ldrd	r4, [sp, #48]	; 0x30
   137a8:	cmp	fp, r1
   137ac:	cmpeq	sl, r0
   137b0:	movhi	r1, #1
   137b4:	movls	r1, #0
   137b8:	subs	r4, r4, sl
   137bc:	sbc	r5, r5, fp
   137c0:	subs	r2, r2, r8
   137c4:	sbc	r3, r3, r9
   137c8:	subs	r2, r2, r1
   137cc:	strd	r4, [sp, #48]	; 0x30
   137d0:	sbc	r3, r3, #0
   137d4:	b	135c8 <__assert_fail@plt+0x1de8>
   137d8:	ldrd	r2, [sp, #64]	; 0x40
   137dc:	ldrd	r0, [sp, #72]	; 0x48
   137e0:	orr	r2, r2, r0
   137e4:	orr	r3, r3, r1
   137e8:	orrs	r3, r2, r3
   137ec:	beq	138a0 <__assert_fail@plt+0x20c0>
   137f0:	ldrd	r2, [sp, #64]	; 0x40
   137f4:	strd	sl, [sp, #16]
   137f8:	strd	r8, [sp, #8]
   137fc:	strd	r2, [sp]
   13800:	mov	r2, r0
   13804:	mov	r3, r1
   13808:	add	r0, sp, #176	; 0xb0
   1380c:	bl	12f2c <__assert_fail@plt+0x174c>
   13810:	ldr	r3, [sp, #180]	; 0xb4
   13814:	ldr	r2, [sp, #176]	; 0xb0
   13818:	orrs	r3, r2, r3
   1381c:	movne	r3, #1
   13820:	moveq	r3, #0
   13824:	cmp	r1, #0
   13828:	cmpeq	r0, #1
   1382c:	orrne	r3, r3, #1
   13830:	cmp	r3, #0
   13834:	bne	13980 <__assert_fail@plt+0x21a0>
   13838:	ldrd	r2, [sp, #152]	; 0x98
   1383c:	strd	r2, [sp, #168]	; 0xa8
   13840:	ldrd	r2, [sp, #48]	; 0x30
   13844:	strd	r2, [sp, #56]	; 0x38
   13848:	ldr	r3, [sp, #112]	; 0x70
   1384c:	subs	r3, r3, #1
   13850:	str	r3, [sp, #112]	; 0x70
   13854:	bne	13540 <__assert_fail@plt+0x1d60>
   13858:	ldrd	r2, [sp, #152]	; 0x98
   1385c:	strd	r2, [sp, #160]	; 0xa0
   13860:	ldr	r3, [sp, #116]	; 0x74
   13864:	lsl	r4, r3, #1
   13868:	ldrd	r2, [sp, #48]	; 0x30
   1386c:	strd	r2, [sp, #56]	; 0x38
   13870:	ldr	r3, [sp, #116]	; 0x74
   13874:	ldr	r2, [sp, #112]	; 0x70
   13878:	cmp	r3, r2
   1387c:	ldrd	r2, [sp, #152]	; 0x98
   13880:	bne	138b0 <__assert_fail@plt+0x20d0>
   13884:	strd	r2, [sp, #168]	; 0xa8
   13888:	ldrd	r2, [sp, #48]	; 0x30
   1388c:	str	r4, [sp, #116]	; 0x74
   13890:	strd	r2, [sp, #80]	; 0x50
   13894:	ldrd	r2, [sp, #56]	; 0x38
   13898:	strd	r2, [sp, #48]	; 0x30
   1389c:	b	13540 <__assert_fail@plt+0x1d60>
   138a0:	strd	r8, [sp, #176]	; 0xb0
   138a4:	mov	r0, sl
   138a8:	mov	r1, fp
   138ac:	b	13810 <__assert_fail@plt+0x2030>
   138b0:	ldrd	r0, [sp, #88]	; 0x58
   138b4:	strd	r2, [sp, #8]
   138b8:	strd	sl, [sp, #32]
   138bc:	strd	r0, [sp, #40]	; 0x28
   138c0:	ldrd	r0, [sp, #56]	; 0x38
   138c4:	strd	r8, [sp, #24]
   138c8:	strd	r0, [sp, #16]
   138cc:	strd	r0, [sp]
   138d0:	add	r0, sp, #184	; 0xb8
   138d4:	bl	11fb8 <__assert_fail@plt+0x7d8>
   138d8:	ldrd	r2, [sp, #128]	; 0x80
   138dc:	adds	r2, r2, r0
   138e0:	adc	r3, r3, r1
   138e4:	cmp	r1, r3
   138e8:	cmpeq	r0, r2
   138ec:	strd	r2, [sp, #56]	; 0x38
   138f0:	ldrd	r2, [sp, #184]	; 0xb8
   138f4:	movhi	r1, #1
   138f8:	movls	r1, #0
   138fc:	adds	r2, r2, r1
   13900:	adc	r3, r3, #0
   13904:	cmp	r9, r3
   13908:	cmpeq	r8, r2
   1390c:	bcc	13948 <__assert_fail@plt+0x2168>
   13910:	ldrd	r6, [sp, #56]	; 0x38
   13914:	moveq	r1, #1
   13918:	movne	r1, #0
   1391c:	cmp	fp, r7
   13920:	cmpeq	sl, r6
   13924:	movhi	r1, #0
   13928:	andls	r1, r1, #1
   1392c:	cmp	r1, #0
   13930:	bne	13948 <__assert_fail@plt+0x2168>
   13934:	strd	r2, [sp, #152]	; 0x98
   13938:	ldr	r3, [sp, #112]	; 0x70
   1393c:	add	r3, r3, #1
   13940:	str	r3, [sp, #112]	; 0x70
   13944:	b	13870 <__assert_fail@plt+0x2090>
   13948:	ldrd	r0, [sp, #56]	; 0x38
   1394c:	ldrd	r6, [sp, #56]	; 0x38
   13950:	cmp	fp, r1
   13954:	cmpeq	sl, r0
   13958:	movhi	r1, #1
   1395c:	movls	r1, #0
   13960:	subs	r6, r6, sl
   13964:	sbc	r7, r7, fp
   13968:	subs	r2, r2, r8
   1396c:	sbc	r3, r3, r9
   13970:	subs	r2, r2, r1
   13974:	strd	r6, [sp, #56]	; 0x38
   13978:	sbc	r3, r3, #0
   1397c:	b	13934 <__assert_fail@plt+0x2154>
   13980:	ldrd	r0, [sp, #88]	; 0x58
   13984:	ldrd	r2, [sp, #168]	; 0xa8
   13988:	strd	sl, [sp, #32]
   1398c:	strd	r0, [sp, #40]	; 0x28
   13990:	ldrd	r0, [sp, #56]	; 0x38
   13994:	strd	r2, [sp, #8]
   13998:	strd	r8, [sp, #24]
   1399c:	strd	r0, [sp, #16]
   139a0:	strd	r0, [sp]
   139a4:	add	r0, sp, #184	; 0xb8
   139a8:	bl	11fb8 <__assert_fail@plt+0x7d8>
   139ac:	ldrd	r2, [sp, #128]	; 0x80
   139b0:	adds	r2, r2, r0
   139b4:	adc	r3, r3, r1
   139b8:	cmp	r1, r3
   139bc:	cmpeq	r0, r2
   139c0:	strd	r2, [sp, #56]	; 0x38
   139c4:	ldrd	r2, [sp, #184]	; 0xb8
   139c8:	movhi	r1, #1
   139cc:	movls	r1, #0
   139d0:	adds	r2, r2, r1
   139d4:	adc	r3, r3, #0
   139d8:	cmp	r9, r3
   139dc:	cmpeq	r8, r2
   139e0:	bcc	13cfc <__assert_fail@plt+0x251c>
   139e4:	ldrd	r4, [sp, #56]	; 0x38
   139e8:	moveq	r1, #1
   139ec:	movne	r1, #0
   139f0:	cmp	fp, r5
   139f4:	cmpeq	sl, r4
   139f8:	movhi	r1, #0
   139fc:	andls	r1, r1, #1
   13a00:	cmp	r1, #0
   13a04:	bne	13cfc <__assert_fail@plt+0x251c>
   13a08:	strd	r2, [sp, #168]	; 0xa8
   13a0c:	ldrd	r4, [sp, #80]	; 0x50
   13a10:	ldrd	r2, [sp, #56]	; 0x38
   13a14:	ldrd	r0, [sp, #160]	; 0xa0
   13a18:	ldrd	r6, [sp, #56]	; 0x38
   13a1c:	subs	r4, r4, r2
   13a20:	sbc	r5, r5, r3
   13a24:	ldrd	r2, [sp, #168]	; 0xa8
   13a28:	subs	r2, r0, r2
   13a2c:	sbc	r3, r1, r3
   13a30:	ldrd	r0, [sp, #80]	; 0x50
   13a34:	cmp	r1, r7
   13a38:	cmpeq	r0, r6
   13a3c:	movcc	r1, #1
   13a40:	movcs	r1, #0
   13a44:	subs	r2, r2, r1
   13a48:	sbc	r3, r3, #0
   13a4c:	cmp	r2, #0
   13a50:	sbcs	r1, r3, #0
   13a54:	bge	13a88 <__assert_fail@plt+0x22a8>
   13a58:	adds	r6, sl, r4
   13a5c:	adc	r7, fp, r5
   13a60:	adds	r2, r2, r8
   13a64:	adc	r3, r3, r9
   13a68:	cmp	r5, r7
   13a6c:	cmpeq	r4, r6
   13a70:	movhi	r1, #1
   13a74:	movls	r1, #0
   13a78:	adds	r2, r2, r1
   13a7c:	adc	r3, r3, #0
   13a80:	mov	r4, r6
   13a84:	mov	r5, r7
   13a88:	orr	r0, r2, r4
   13a8c:	orr	r1, r3, r5
   13a90:	orrs	r1, r0, r1
   13a94:	beq	13d34 <__assert_fail@plt+0x2554>
   13a98:	strd	r4, [sp]
   13a9c:	strd	sl, [sp, #16]
   13aa0:	strd	r8, [sp, #8]
   13aa4:	add	r0, sp, #176	; 0xb0
   13aa8:	bl	12f2c <__assert_fail@plt+0x174c>
   13aac:	mov	r4, r0
   13ab0:	mov	r5, r1
   13ab4:	ldrd	r6, [sp, #176]	; 0xb0
   13ab8:	orrs	r3, r6, r7
   13abc:	bne	13d60 <__assert_fail@plt+0x2580>
   13ac0:	cmp	r5, #0
   13ac4:	cmpeq	r4, #1
   13ac8:	beq	13980 <__assert_fail@plt+0x21a0>
   13acc:	lsrs	r3, r5, #1
   13ad0:	rrx	r2, r4
   13ad4:	ldr	r1, [pc, #1168]	; 13f6c <__assert_fail@plt+0x278c>
   13ad8:	and	r2, r2, #127	; 0x7f
   13adc:	add	r2, r1, r2
   13ae0:	mov	r3, #0
   13ae4:	ldrb	r0, [r2, #709]	; 0x2c5
   13ae8:	adds	r2, r0, r0
   13aec:	umull	r0, r1, r0, r0
   13af0:	adc	r3, r3, r3
   13af4:	mul	ip, r0, r5
   13af8:	mla	ip, r4, r1, ip
   13afc:	umull	r0, r1, r0, r4
   13b00:	subs	r0, r2, r0
   13b04:	add	r1, ip, r1
   13b08:	sbc	r1, r3, r1
   13b0c:	adds	r2, r0, r0
   13b10:	adc	r3, r1, r1
   13b14:	strd	r2, [sp, #88]	; 0x58
   13b18:	mul	r3, r0, r1
   13b1c:	umull	r0, r1, r0, r0
   13b20:	add	r1, r1, r3, lsl #1
   13b24:	mul	r3, r0, r5
   13b28:	mla	r3, r4, r1, r3
   13b2c:	umull	r0, r1, r0, r4
   13b30:	add	r1, r3, r1
   13b34:	ldrd	r2, [sp, #88]	; 0x58
   13b38:	subs	r2, r2, r0
   13b3c:	sbc	r3, r3, r1
   13b40:	adds	r0, r2, r2
   13b44:	adc	r1, r3, r3
   13b48:	strd	r0, [sp, #88]	; 0x58
   13b4c:	mul	r1, r2, r3
   13b50:	umull	r2, r3, r2, r2
   13b54:	add	r3, r3, r1, lsl #1
   13b58:	mul	r1, r2, r5
   13b5c:	mla	r1, r4, r3, r1
   13b60:	umull	r2, r3, r2, r4
   13b64:	add	r3, r1, r3
   13b68:	ldrd	r0, [sp, #88]	; 0x58
   13b6c:	subs	r0, r0, r2
   13b70:	sbc	r1, r1, r3
   13b74:	cmp	r9, r5
   13b78:	strd	r0, [sp, #88]	; 0x58
   13b7c:	ldr	r3, [sp, #92]	; 0x5c
   13b80:	ldr	r2, [sp, #88]	; 0x58
   13b84:	cmpeq	r8, r4
   13b88:	mul	r3, sl, r3
   13b8c:	mla	r3, r2, fp, r3
   13b90:	umull	sl, fp, sl, r2
   13b94:	add	ip, r3, fp
   13b98:	mov	fp, ip
   13b9c:	bcc	13c94 <__assert_fail@plt+0x24b4>
   13ba0:	umull	r6, r7, r4, ip
   13ba4:	mov	r2, sl
   13ba8:	mov	r3, #0
   13bac:	strd	r6, [sp, #104]	; 0x68
   13bb0:	umull	r6, r7, ip, r5
   13bb4:	strd	r2, [sp, #96]	; 0x60
   13bb8:	ldr	r3, [sp, #96]	; 0x60
   13bbc:	mov	r1, #0
   13bc0:	ldr	lr, [sp, #108]	; 0x6c
   13bc4:	strd	r6, [sp, #120]	; 0x78
   13bc8:	mla	lr, ip, r1, lr
   13bcc:	umull	r6, r7, r3, r5
   13bd0:	ldr	r3, [sp, #100]	; 0x64
   13bd4:	str	lr, [sp, #108]	; 0x6c
   13bd8:	mla	r7, r5, r3, r7
   13bdc:	ldrd	r2, [sp, #104]	; 0x68
   13be0:	adds	r2, r2, r6
   13be4:	adc	r3, r3, r7
   13be8:	mov	r7, r3
   13bec:	ldr	r3, [sp, #96]	; 0x60
   13bf0:	mov	r6, r2
   13bf4:	mul	r1, r3, r1
   13bf8:	ldr	r3, [sp, #100]	; 0x64
   13bfc:	mla	r1, r4, r3, r1
   13c00:	ldr	r3, [sp, #96]	; 0x60
   13c04:	umull	r2, r3, r3, r4
   13c08:	add	r3, r1, r3
   13c0c:	str	r3, [sp, #136]	; 0x88
   13c10:	mov	r3, #0
   13c14:	str	r3, [sp, #140]	; 0x8c
   13c18:	ldrd	r2, [sp, #136]	; 0x88
   13c1c:	adds	r2, r2, r6
   13c20:	adc	r3, r3, r7
   13c24:	mov	r6, r2
   13c28:	mov	r7, r3
   13c2c:	ldrd	r2, [sp, #104]	; 0x68
   13c30:	cmp	r3, r7
   13c34:	cmpeq	r2, r6
   13c38:	bls	13c4c <__assert_fail@plt+0x246c>
   13c3c:	ldrd	r2, [sp, #120]	; 0x78
   13c40:	adds	r2, r2, #0
   13c44:	adc	r3, r3, #1
   13c48:	strd	r2, [sp, #120]	; 0x78
   13c4c:	mov	r3, #0
   13c50:	str	r3, [sp, #148]	; 0x94
   13c54:	str	r7, [sp, #144]	; 0x90
   13c58:	ldrd	r6, [sp, #144]	; 0x90
   13c5c:	ldrd	r2, [sp, #120]	; 0x78
   13c60:	subs	r6, r8, r6
   13c64:	sbc	r7, r9, r7
   13c68:	subs	r2, r6, r2
   13c6c:	sbc	r3, r7, r3
   13c70:	mov	r7, r3
   13c74:	ldr	r3, [sp, #88]	; 0x58
   13c78:	mov	r6, r2
   13c7c:	ldr	r2, [sp, #92]	; 0x5c
   13c80:	mul	r3, r3, r7
   13c84:	mla	r3, r6, r2, r3
   13c88:	ldr	r2, [sp, #88]	; 0x58
   13c8c:	umull	r6, r7, r2, r6
   13c90:	add	r7, r3, r7
   13c94:	mov	r0, r4
   13c98:	mov	r1, r5
   13c9c:	bl	145d4 <__assert_fail@plt+0x2df4>
   13ca0:	cmp	r0, #0
   13ca4:	bne	13d44 <__assert_fail@plt+0x2564>
   13ca8:	ldr	r2, [sp, #232]	; 0xe8
   13cac:	ldr	r3, [sp, #236]	; 0xec
   13cb0:	add	r2, r2, #1
   13cb4:	mov	r0, r4
   13cb8:	mov	r1, r5
   13cbc:	bl	14b80 <__assert_fail@plt+0x33a0>
   13cc0:	orrs	r3, r6, r7
   13cc4:	beq	13ea0 <__assert_fail@plt+0x26c0>
   13cc8:	mov	r2, sl
   13ccc:	mov	r3, fp
   13cd0:	mov	r0, r6
   13cd4:	mov	r1, r7
   13cd8:	bl	150f8 <__assert_fail@plt+0x3918>
   13cdc:	cmp	r0, #0
   13ce0:	beq	13f00 <__assert_fail@plt+0x2720>
   13ce4:	strd	sl, [sp]
   13ce8:	mov	r2, r6
   13cec:	mov	r3, r7
   13cf0:	ldr	r0, [sp, #236]	; 0xec
   13cf4:	bl	12ec4 <__assert_fail@plt+0x16e4>
   13cf8:	b	13db0 <__assert_fail@plt+0x25d0>
   13cfc:	ldrd	r0, [sp, #56]	; 0x38
   13d00:	ldrd	r4, [sp, #56]	; 0x38
   13d04:	cmp	fp, r1
   13d08:	cmpeq	sl, r0
   13d0c:	movhi	r1, #1
   13d10:	movls	r1, #0
   13d14:	subs	r4, r4, sl
   13d18:	sbc	r5, r5, fp
   13d1c:	subs	r2, r2, r8
   13d20:	sbc	r3, r3, r9
   13d24:	subs	r2, r2, r1
   13d28:	strd	r4, [sp, #56]	; 0x38
   13d2c:	sbc	r3, r3, #0
   13d30:	b	13a08 <__assert_fail@plt+0x2228>
   13d34:	strd	r8, [sp, #176]	; 0xb0
   13d38:	mov	r4, sl
   13d3c:	mov	r5, fp
   13d40:	b	13ab4 <__assert_fail@plt+0x22d4>
   13d44:	mov	r3, #1
   13d48:	str	r3, [sp]
   13d4c:	mov	r2, r4
   13d50:	mov	r3, r5
   13d54:	ldr	r0, [sp, #236]	; 0xec
   13d58:	bl	11bc0 <__assert_fail@plt+0x3e0>
   13d5c:	b	13cc0 <__assert_fail@plt+0x24e0>
   13d60:	cmp	r9, r7
   13d64:	cmpeq	r8, r6
   13d68:	moveq	r3, #1
   13d6c:	movne	r3, #0
   13d70:	cmp	fp, r5
   13d74:	cmpeq	sl, r4
   13d78:	movne	r3, #0
   13d7c:	andeq	r3, r3, #1
   13d80:	cmp	r3, #0
   13d84:	beq	13db8 <__assert_fail@plt+0x25d8>
   13d88:	ldr	r3, [sp, #236]	; 0xec
   13d8c:	mov	r2, sl
   13d90:	str	r3, [sp, #4]
   13d94:	ldr	r3, [sp, #232]	; 0xe8
   13d98:	mov	r0, r8
   13d9c:	add	r3, r3, #1
   13da0:	str	r3, [sp]
   13da4:	mov	r1, r9
   13da8:	mov	r3, fp
   13dac:	bl	1337c <__assert_fail@plt+0x1b9c>
   13db0:	add	sp, sp, #196	; 0xc4
   13db4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13db8:	lsrs	r3, r5, #1
   13dbc:	rrx	r2, r4
   13dc0:	ldr	r3, [pc, #420]	; 13f6c <__assert_fail@plt+0x278c>
   13dc4:	and	r2, r2, #127	; 0x7f
   13dc8:	add	r3, r3, r2
   13dcc:	ldrb	r0, [r3, #709]	; 0x2c5
   13dd0:	mov	r3, #0
   13dd4:	adds	r2, r0, r0
   13dd8:	umull	r0, r1, r0, r0
   13ddc:	adc	r3, r3, r3
   13de0:	mul	ip, r0, r5
   13de4:	mla	ip, r4, r1, ip
   13de8:	umull	r0, r1, r0, r4
   13dec:	subs	r0, r2, r0
   13df0:	add	r1, ip, r1
   13df4:	sbc	r1, r3, r1
   13df8:	adds	r8, r0, r0
   13dfc:	adc	r9, r1, r1
   13e00:	mul	r3, r0, r1
   13e04:	umull	r0, r1, r0, r0
   13e08:	add	r1, r1, r3, lsl #1
   13e0c:	mul	r3, r0, r5
   13e10:	mla	r3, r4, r1, r3
   13e14:	umull	r0, r1, r0, r4
   13e18:	subs	r2, r8, r0
   13e1c:	add	r1, r3, r1
   13e20:	sbc	r3, r9, r1
   13e24:	adds	r0, r2, r2
   13e28:	adc	r1, r3, r3
   13e2c:	mul	ip, r2, r3
   13e30:	umull	r2, r3, r2, r2
   13e34:	add	r3, r3, ip, lsl #1
   13e38:	mul	ip, r2, r5
   13e3c:	mla	ip, r4, r3, ip
   13e40:	umull	r2, r3, r2, r4
   13e44:	subs	r0, r0, r2
   13e48:	add	r3, ip, r3
   13e4c:	sbc	r1, r1, r3
   13e50:	mov	r2, r4
   13e54:	mul	r3, sl, r1
   13e58:	mov	r1, r7
   13e5c:	mla	r3, r0, fp, r3
   13e60:	umull	sl, fp, sl, r0
   13e64:	mov	r0, r6
   13e68:	add	fp, r3, fp
   13e6c:	mov	r3, r5
   13e70:	bl	150f8 <__assert_fail@plt+0x3918>
   13e74:	cmp	r0, #0
   13e78:	ldrd	r0, [sp, #176]	; 0xb0
   13e7c:	bne	13ed0 <__assert_fail@plt+0x26f0>
   13e80:	ldr	r3, [sp, #236]	; 0xec
   13e84:	mov	r2, r4
   13e88:	str	r3, [sp, #4]
   13e8c:	ldr	r3, [sp, #232]	; 0xe8
   13e90:	add	r3, r3, #1
   13e94:	str	r3, [sp]
   13e98:	mov	r3, r5
   13e9c:	bl	1337c <__assert_fail@plt+0x1b9c>
   13ea0:	mov	r0, sl
   13ea4:	mov	r1, fp
   13ea8:	bl	145d4 <__assert_fail@plt+0x2df4>
   13eac:	cmp	r0, #0
   13eb0:	beq	13ee8 <__assert_fail@plt+0x2708>
   13eb4:	mov	r3, #1
   13eb8:	str	r3, [sp]
   13ebc:	mov	r2, sl
   13ec0:	mov	r3, fp
   13ec4:	ldr	r0, [sp, #236]	; 0xec
   13ec8:	bl	11bc0 <__assert_fail@plt+0x3e0>
   13ecc:	b	13db0 <__assert_fail@plt+0x25d0>
   13ed0:	mov	r2, r0
   13ed4:	strd	r4, [sp]
   13ed8:	mov	r3, r1
   13edc:	ldr	r0, [sp, #236]	; 0xec
   13ee0:	bl	12ec4 <__assert_fail@plt+0x16e4>
   13ee4:	b	13ea0 <__assert_fail@plt+0x26c0>
   13ee8:	ldr	r3, [sp, #236]	; 0xec
   13eec:	ldr	r2, [sp, #232]	; 0xe8
   13ef0:	mov	r0, sl
   13ef4:	mov	r1, fp
   13ef8:	bl	14b80 <__assert_fail@plt+0x33a0>
   13efc:	b	13db0 <__assert_fail@plt+0x25d0>
   13f00:	ldrd	r4, [sp, #48]	; 0x30
   13f04:	add	r0, sp, #192	; 0xc0
   13f08:	mov	r8, r6
   13f0c:	ldrd	r2, [r0, #-40]!	; 0xffffffd8
   13f10:	strd	r4, [sp]
   13f14:	strd	sl, [sp, #16]
   13f18:	strd	r6, [sp, #8]
   13f1c:	bl	130dc <__assert_fail@plt+0x18fc>
   13f20:	ldrd	r4, [sp, #80]	; 0x50
   13f24:	mov	r9, r7
   13f28:	strd	r0, [sp, #48]	; 0x30
   13f2c:	add	r0, sp, #192	; 0xc0
   13f30:	ldrd	r2, [r0, #-32]!	; 0xffffffe0
   13f34:	strd	r4, [sp]
   13f38:	strd	sl, [sp, #16]
   13f3c:	strd	r6, [sp, #8]
   13f40:	bl	130dc <__assert_fail@plt+0x18fc>
   13f44:	ldrd	r4, [sp, #56]	; 0x38
   13f48:	strd	r0, [sp, #80]	; 0x50
   13f4c:	add	r0, sp, #192	; 0xc0
   13f50:	ldrd	r2, [r0, #-24]!	; 0xffffffe8
   13f54:	strd	sl, [sp, #16]
   13f58:	strd	r6, [sp, #8]
   13f5c:	strd	r4, [sp]
   13f60:	bl	130dc <__assert_fail@plt+0x18fc>
   13f64:	strd	r0, [sp, #56]	; 0x38
   13f68:	b	13478 <__assert_fail@plt+0x1c98>
   13f6c:	andeq	ip, r1, r0, lsr #9
   13f70:	andeq	ip, r1, r5, ror #15
   13f74:	andeq	pc, r1, ip, asr r5	; <UNPREDICTABLE>
   13f78:	strdeq	pc, [r1], -r2
   13f7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f80:	sub	sp, sp, #92	; 0x5c
   13f84:	mov	fp, r3
   13f88:	ldr	r6, [sp, #128]	; 0x80
   13f8c:	mov	r3, #0
   13f90:	mov	sl, r2
   13f94:	strb	r3, [r6, #250]	; 0xfa
   13f98:	mov	r2, #0
   13f9c:	mov	r3, #0
   13fa0:	strd	r0, [sp, #16]
   13fa4:	strd	r2, [r6, #8]
   13fa8:	ldr	r3, [sp, #16]
   13fac:	ldr	r2, [sp, #20]
   13fb0:	orrs	r3, r3, r2
   13fb4:	moveq	r7, #1
   13fb8:	movne	r7, #0
   13fbc:	cmp	fp, #0
   13fc0:	cmpeq	sl, #1
   13fc4:	movhi	r7, #0
   13fc8:	andls	r7, r7, #1
   13fcc:	cmp	r7, #0
   13fd0:	bne	14574 <__assert_fail@plt+0x2d94>
   13fd4:	and	r2, sl, #1
   13fd8:	mov	r3, #0
   13fdc:	orrs	r3, r2, r3
   13fe0:	bne	14040 <__assert_fail@plt+0x2860>
   13fe4:	orrs	r3, sl, fp
   13fe8:	movne	r2, sl
   13fec:	movne	r3, fp
   13ff0:	bne	140c8 <__assert_fail@plt+0x28e8>
   13ff4:	ldrd	r2, [sp, #16]
   13ff8:	and	r0, r2, #1
   13ffc:	mov	r1, #0
   14000:	orrs	r1, r0, r1
   14004:	beq	140ac <__assert_fail@plt+0x28cc>
   14008:	mov	r2, r7
   1400c:	ldrd	r0, [sp, #16]
   14010:	bl	1c268 <__assert_fail@plt+0xaa88>
   14014:	add	r7, r7, #64	; 0x40
   14018:	mov	r4, r0
   1401c:	mov	r5, r1
   14020:	str	r7, [sp]
   14024:	mov	r2, #2
   14028:	mov	r3, #0
   1402c:	mov	r0, r6
   14030:	bl	11bc0 <__assert_fail@plt+0x3e0>
   14034:	strd	sl, [sp, #16]
   14038:	mov	sl, r4
   1403c:	mov	fp, r5
   14040:	ldr	r8, [pc, #1404]	; 145c4 <__assert_fail@plt+0x2de4>
   14044:	mov	r2, #3
   14048:	mov	r3, #0
   1404c:	mov	r7, #0
   14050:	strd	r2, [sp, #8]
   14054:	ldr	r2, [sp, #20]
   14058:	ldr	r3, [sp, #16]
   1405c:	orrs	r3, r3, r2
   14060:	ldr	r2, [pc, #1376]	; 145c8 <__assert_fail@plt+0x2de8>
   14064:	str	r3, [sp, #24]
   14068:	movne	r3, #1
   1406c:	moveq	r3, #0
   14070:	cmp	r7, r2
   14074:	movhi	r3, #0
   14078:	andls	r3, r3, #1
   1407c:	cmp	r3, #0
   14080:	lsl	r3, r7, #4
   14084:	str	r3, [sp, #84]	; 0x54
   14088:	bne	1411c <__assert_fail@plt+0x293c>
   1408c:	add	r4, r8, r3
   14090:	add	r5, r7, #1
   14094:	ldr	r2, [pc, #1324]	; 145c8 <__assert_fail@plt+0x2de8>
   14098:	sub	r3, r5, #1
   1409c:	cmp	r3, r2
   140a0:	bhi	14524 <__assert_fail@plt+0x2d44>
   140a4:	mov	r7, #0
   140a8:	b	142bc <__assert_fail@plt+0x2adc>
   140ac:	lsrs	r3, r3, #1
   140b0:	rrx	r2, r2
   140b4:	add	r7, r7, #1
   140b8:	b	13ff8 <__assert_fail@plt+0x2818>
   140bc:	lsrs	r3, r3, #1
   140c0:	rrx	r2, r2
   140c4:	add	r7, r7, #1
   140c8:	and	r0, r2, #1
   140cc:	mov	r1, #0
   140d0:	orrs	r1, r0, r1
   140d4:	beq	140bc <__assert_fail@plt+0x28dc>
   140d8:	rsb	r2, r7, #64	; 0x40
   140dc:	ldrd	r0, [sp, #16]
   140e0:	bl	1c284 <__assert_fail@plt+0xaaa4>
   140e4:	mov	r2, r7
   140e8:	mov	r4, r0
   140ec:	mov	r5, r1
   140f0:	mov	r0, sl
   140f4:	mov	r1, fp
   140f8:	bl	1c268 <__assert_fail@plt+0xaa88>
   140fc:	mov	r2, r7
   14100:	orr	r4, r4, r0
   14104:	orr	r5, r5, r1
   14108:	ldrd	r0, [sp, #16]
   1410c:	bl	1c268 <__assert_fail@plt+0xaa88>
   14110:	mov	sl, r0
   14114:	mov	fp, r1
   14118:	b	14020 <__assert_fail@plt+0x2840>
   1411c:	ldr	r3, [sp, #84]	; 0x54
   14120:	ldr	r9, [sp, #12]
   14124:	add	r3, r8, r3
   14128:	str	r3, [sp, #60]	; 0x3c
   1412c:	ldr	r3, [r3, #4]
   14130:	str	r3, [sp, #80]	; 0x50
   14134:	ldrd	r2, [sp, #8]
   14138:	mov	r3, #0
   1413c:	strd	r2, [sp, #24]
   14140:	ldr	r3, [sp, #84]	; 0x54
   14144:	ldr	r1, [sp, #24]
   14148:	ldr	ip, [r8, r3]
   1414c:	ldr	r3, [sp, #80]	; 0x50
   14150:	mul	r4, ip, fp
   14154:	mla	r4, r3, sl, r4
   14158:	umull	r2, r3, ip, sl
   1415c:	strd	r2, [sp, #32]
   14160:	ldr	r3, [sp, #36]	; 0x24
   14164:	add	r4, r4, r3
   14168:	str	r4, [sp, #36]	; 0x24
   1416c:	umull	r0, r1, r4, r1
   14170:	ldrd	r2, [sp, #32]
   14174:	mov	r3, #0
   14178:	strd	r0, [sp, #40]	; 0x28
   1417c:	ldr	r1, [sp, #28]
   14180:	ldr	r0, [sp, #44]	; 0x2c
   14184:	mla	r1, r4, r1, r0
   14188:	str	r1, [sp, #44]	; 0x2c
   1418c:	umull	r0, r1, r4, r9
   14190:	ldrd	r4, [sp, #40]	; 0x28
   14194:	strd	r0, [sp, #48]	; 0x30
   14198:	umull	r0, r1, r9, r2
   1419c:	mla	r1, r9, r3, r1
   141a0:	adds	r4, r4, r0
   141a4:	adc	r5, r5, r1
   141a8:	ldr	r1, [sp, #28]
   141ac:	ldr	r0, [sp, #24]
   141b0:	mul	r1, r2, r1
   141b4:	mla	r1, r0, r3, r1
   141b8:	umull	r2, r3, r2, r0
   141bc:	add	r3, r1, r3
   141c0:	str	r3, [sp, #64]	; 0x40
   141c4:	mov	r3, #0
   141c8:	str	r3, [sp, #68]	; 0x44
   141cc:	ldrd	r0, [sp, #64]	; 0x40
   141d0:	ldrd	r2, [sp, #40]	; 0x28
   141d4:	adds	r0, r0, r4
   141d8:	adc	r1, r1, r5
   141dc:	cmp	r3, r1
   141e0:	cmpeq	r2, r0
   141e4:	bls	141f8 <__assert_fail@plt+0x2a18>
   141e8:	ldrd	r2, [sp, #48]	; 0x30
   141ec:	adds	r2, r2, #0
   141f0:	adc	r3, r3, #1
   141f4:	strd	r2, [sp, #48]	; 0x30
   141f8:	mov	r3, #0
   141fc:	str	r3, [sp, #76]	; 0x4c
   14200:	str	r1, [sp, #72]	; 0x48
   14204:	ldrd	r4, [sp, #72]	; 0x48
   14208:	ldrd	r2, [sp, #48]	; 0x30
   1420c:	adds	r2, r2, r4
   14210:	adc	r3, r3, r5
   14214:	mov	r4, r2
   14218:	mov	r5, r3
   1421c:	ldrd	r2, [sp, #16]
   14220:	cmp	r5, r3
   14224:	cmpeq	r4, r2
   14228:	bhi	14280 <__assert_fail@plt+0x2aa0>
   1422c:	subs	r2, r2, r4
   14230:	sbc	r3, r3, r5
   14234:	mov	r5, r3
   14238:	ldr	r3, [sp, #80]	; 0x50
   1423c:	mul	r3, r2, r3
   14240:	mla	r3, ip, r5, r3
   14244:	umull	r4, r5, r2, ip
   14248:	add	r5, r3, r5
   1424c:	ldr	r3, [sp, #60]	; 0x3c
   14250:	ldrd	r2, [r3, #8]
   14254:	cmp	r5, r3
   14258:	cmpeq	r4, r2
   1425c:	bhi	14280 <__assert_fail@plt+0x2aa0>
   14260:	mov	r3, #1
   14264:	str	r3, [sp]
   14268:	mov	r0, r6
   1426c:	ldrd	r2, [sp, #8]
   14270:	bl	11bc0 <__assert_fail@plt+0x3e0>
   14274:	ldrd	sl, [sp, #32]
   14278:	strd	r4, [sp, #16]
   1427c:	b	14140 <__assert_fail@plt+0x2960>
   14280:	ldr	r3, [pc, #836]	; 145cc <__assert_fail@plt+0x2dec>
   14284:	add	r7, r7, #1
   14288:	ldrd	r0, [sp, #8]
   1428c:	ldrb	r2, [r7, r3]
   14290:	mov	r3, #0
   14294:	adds	r0, r0, r2
   14298:	adc	r1, r1, r3
   1429c:	strd	r0, [sp, #8]
   142a0:	b	14054 <__assert_fail@plt+0x2874>
   142a4:	stm	sp, {r5, r7}
   142a8:	ldrd	r2, [sp, #8]
   142ac:	mov	r0, r6
   142b0:	bl	11c60 <__assert_fail@plt+0x480>
   142b4:	mov	sl, r8
   142b8:	mov	fp, r9
   142bc:	ldr	r3, [r4, #4]
   142c0:	ldr	r8, [r4]
   142c4:	mul	r3, sl, r3
   142c8:	mla	r3, r8, fp, r3
   142cc:	umull	r8, r9, r8, sl
   142d0:	add	r9, r3, r9
   142d4:	ldrd	r2, [r4, #8]
   142d8:	cmp	r9, r3
   142dc:	cmpeq	r8, r2
   142e0:	bls	142a4 <__assert_fail@plt+0x2ac4>
   142e4:	mov	r7, #1
   142e8:	ldr	r3, [r4, #20]
   142ec:	ldr	r8, [r4, #16]
   142f0:	mul	r3, sl, r3
   142f4:	mla	r3, r8, fp, r3
   142f8:	umull	r8, r9, r8, sl
   142fc:	add	r9, r3, r9
   14300:	ldrd	r2, [r4, #24]
   14304:	cmp	r9, r3
   14308:	cmpeq	r8, r2
   1430c:	bls	14434 <__assert_fail@plt+0x2c54>
   14310:	mov	r7, #2
   14314:	ldr	r3, [r4, #36]	; 0x24
   14318:	ldr	r8, [r4, #32]
   1431c:	mul	r3, sl, r3
   14320:	mla	r3, r8, fp, r3
   14324:	umull	r8, r9, r8, sl
   14328:	add	r9, r3, r9
   1432c:	ldrd	r2, [r4, #40]	; 0x28
   14330:	cmp	r9, r3
   14334:	cmpeq	r8, r2
   14338:	bls	14450 <__assert_fail@plt+0x2c70>
   1433c:	mov	r7, #3
   14340:	ldr	r3, [r4, #52]	; 0x34
   14344:	ldr	r8, [r4, #48]	; 0x30
   14348:	mul	r3, sl, r3
   1434c:	mla	r3, r8, fp, r3
   14350:	umull	r8, r9, r8, sl
   14354:	add	r9, r3, r9
   14358:	ldrd	r2, [r4, #56]	; 0x38
   1435c:	cmp	r9, r3
   14360:	cmpeq	r8, r2
   14364:	bls	1446c <__assert_fail@plt+0x2c8c>
   14368:	mov	r7, #4
   1436c:	ldr	r3, [r4, #68]	; 0x44
   14370:	ldr	r8, [r4, #64]	; 0x40
   14374:	mul	r3, sl, r3
   14378:	mla	r3, r8, fp, r3
   1437c:	umull	r8, r9, r8, sl
   14380:	add	r9, r3, r9
   14384:	ldrd	r2, [r4, #72]	; 0x48
   14388:	cmp	r9, r3
   1438c:	cmpeq	r8, r2
   14390:	bls	14488 <__assert_fail@plt+0x2ca8>
   14394:	mov	r7, #5
   14398:	ldr	r3, [r4, #84]	; 0x54
   1439c:	ldr	r8, [r4, #80]	; 0x50
   143a0:	mul	r3, sl, r3
   143a4:	mla	r3, r8, fp, r3
   143a8:	umull	r8, r9, r8, sl
   143ac:	add	r9, r3, r9
   143b0:	ldrd	r2, [r4, #88]	; 0x58
   143b4:	cmp	r9, r3
   143b8:	cmpeq	r8, r2
   143bc:	bls	144a4 <__assert_fail@plt+0x2cc4>
   143c0:	mov	r7, #6
   143c4:	ldr	r3, [r4, #100]	; 0x64
   143c8:	ldr	r8, [r4, #96]	; 0x60
   143cc:	mul	r3, sl, r3
   143d0:	mla	r3, r8, fp, r3
   143d4:	umull	r8, r9, r8, sl
   143d8:	add	r9, r3, r9
   143dc:	ldrd	r2, [r4, #104]	; 0x68
   143e0:	cmp	r9, r3
   143e4:	cmpeq	r8, r2
   143e8:	bls	144c0 <__assert_fail@plt+0x2ce0>
   143ec:	mov	r7, #7
   143f0:	ldr	r3, [r4, #116]	; 0x74
   143f4:	ldr	r8, [r4, #112]	; 0x70
   143f8:	mul	r3, sl, r3
   143fc:	mla	r3, r8, fp, r3
   14400:	umull	r8, r9, r8, sl
   14404:	add	r9, r3, r9
   14408:	ldrd	r2, [r4, #120]	; 0x78
   1440c:	cmp	r9, r3
   14410:	cmpeq	r8, r2
   14414:	bhi	144dc <__assert_fail@plt+0x2cfc>
   14418:	stm	sp, {r5, r7}
   1441c:	ldrd	r2, [sp, #8]
   14420:	mov	r0, r6
   14424:	bl	11c60 <__assert_fail@plt+0x480>
   14428:	mov	sl, r8
   1442c:	mov	fp, r9
   14430:	b	143f0 <__assert_fail@plt+0x2c10>
   14434:	stm	sp, {r5, r7}
   14438:	ldrd	r2, [sp, #8]
   1443c:	mov	r0, r6
   14440:	bl	11c60 <__assert_fail@plt+0x480>
   14444:	mov	sl, r8
   14448:	mov	fp, r9
   1444c:	b	142e8 <__assert_fail@plt+0x2b08>
   14450:	stm	sp, {r5, r7}
   14454:	ldrd	r2, [sp, #8]
   14458:	mov	r0, r6
   1445c:	bl	11c60 <__assert_fail@plt+0x480>
   14460:	mov	sl, r8
   14464:	mov	fp, r9
   14468:	b	14314 <__assert_fail@plt+0x2b34>
   1446c:	stm	sp, {r5, r7}
   14470:	ldrd	r2, [sp, #8]
   14474:	mov	r0, r6
   14478:	bl	11c60 <__assert_fail@plt+0x480>
   1447c:	mov	sl, r8
   14480:	mov	fp, r9
   14484:	b	14340 <__assert_fail@plt+0x2b60>
   14488:	stm	sp, {r5, r7}
   1448c:	ldrd	r2, [sp, #8]
   14490:	mov	r0, r6
   14494:	bl	11c60 <__assert_fail@plt+0x480>
   14498:	mov	sl, r8
   1449c:	mov	fp, r9
   144a0:	b	1436c <__assert_fail@plt+0x2b8c>
   144a4:	stm	sp, {r5, r7}
   144a8:	ldrd	r2, [sp, #8]
   144ac:	mov	r0, r6
   144b0:	bl	11c60 <__assert_fail@plt+0x480>
   144b4:	mov	sl, r8
   144b8:	mov	fp, r9
   144bc:	b	14398 <__assert_fail@plt+0x2bb8>
   144c0:	stm	sp, {r5, r7}
   144c4:	ldrd	r2, [sp, #8]
   144c8:	mov	r0, r6
   144cc:	bl	11c60 <__assert_fail@plt+0x480>
   144d0:	mov	sl, r8
   144d4:	mov	fp, r9
   144d8:	b	143c4 <__assert_fail@plt+0x2be4>
   144dc:	ldr	r3, [pc, #236]	; 145d0 <__assert_fail@plt+0x2df0>
   144e0:	ldrd	r0, [sp, #8]
   144e4:	add	r3, r3, r5
   144e8:	add	r4, r4, #128	; 0x80
   144ec:	ldrb	r2, [r3, #-1]
   144f0:	mov	r3, #0
   144f4:	add	r5, r5, #8
   144f8:	adds	r0, r0, r2
   144fc:	adc	r1, r1, r3
   14500:	strd	r0, [sp, #8]
   14504:	ldr	r3, [sp, #8]
   14508:	ldr	r2, [sp, #12]
   1450c:	mul	r1, r3, r2
   14510:	umull	r2, r3, r3, r3
   14514:	add	r3, r3, r1, lsl #1
   14518:	cmp	fp, r3
   1451c:	cmpeq	sl, r2
   14520:	bcs	14094 <__assert_fail@plt+0x28b4>
   14524:	cmp	fp, #0
   14528:	cmpeq	sl, #1
   1452c:	ldr	r2, [sp, #24]
   14530:	movls	r3, #1
   14534:	movhi	r3, #0
   14538:	cmp	r2, #0
   1453c:	movne	r3, #0
   14540:	andeq	r3, r3, #1
   14544:	cmp	r3, #0
   14548:	bne	14574 <__assert_fail@plt+0x2d94>
   1454c:	mov	r2, sl
   14550:	mov	r3, fp
   14554:	ldrd	r0, [sp, #16]
   14558:	bl	150f8 <__assert_fail@plt+0x3918>
   1455c:	cmp	r0, #0
   14560:	beq	1457c <__assert_fail@plt+0x2d9c>
   14564:	strd	sl, [sp]
   14568:	ldrd	r2, [sp, #16]
   1456c:	mov	r0, r6
   14570:	bl	12ec4 <__assert_fail@plt+0x16e4>
   14574:	add	sp, sp, #92	; 0x5c
   14578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1457c:	ldrd	r2, [sp, #16]
   14580:	orrs	r3, r2, r3
   14584:	bne	145a4 <__assert_fail@plt+0x2dc4>
   14588:	mov	r3, r6
   1458c:	mov	r2, #1
   14590:	mov	r0, sl
   14594:	mov	r1, fp
   14598:	add	sp, sp, #92	; 0x5c
   1459c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145a0:	b	14b80 <__assert_fail@plt+0x33a0>
   145a4:	mov	r3, #1
   145a8:	str	r3, [sp]
   145ac:	str	r6, [sp, #4]
   145b0:	mov	r2, sl
   145b4:	mov	r3, fp
   145b8:	ldrd	r0, [sp, #16]
   145bc:	bl	1337c <__assert_fail@plt+0x1b9c>
   145c0:	b	14574 <__assert_fail@plt+0x2d94>
   145c4:	strdeq	ip, [r1], -r0
   145c8:	muleq	r0, fp, r2
   145cc:	andeq	ip, r1, r0, lsr #9
   145d0:	andeq	pc, r1, r0, lsr #4
   145d4:	cmp	r1, #0
   145d8:	cmpeq	r0, #1
   145dc:	bls	14b70 <__assert_fail@plt+0x3390>
   145e0:	add	r3, pc, #656	; 0x290
   145e4:	ldrd	r2, [r3]
   145e8:	cmp	r1, r3
   145ec:	cmpeq	r0, r2
   145f0:	bls	14b78 <__assert_fail@plt+0x3398>
   145f4:	subs	r2, r0, #1
   145f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145fc:	sbc	r3, r1, #0
   14600:	sub	sp, sp, #396	; 0x18c
   14604:	strd	r2, [sp, #80]	; 0x50
   14608:	strd	r2, [sp, #48]	; 0x30
   1460c:	mov	r3, #0
   14610:	str	r3, [sp, #76]	; 0x4c
   14614:	ldrd	r2, [sp, #48]	; 0x30
   14618:	mov	r3, #0
   1461c:	and	r2, r2, #1
   14620:	orrs	r3, r2, r3
   14624:	beq	14858 <__assert_fail@plt+0x3078>
   14628:	lsrs	r3, r1, #1
   1462c:	rrx	r2, r0
   14630:	ldr	r3, [pc, #584]	; 14880 <__assert_fail@plt+0x30a0>
   14634:	and	r2, r2, #127	; 0x7f
   14638:	add	r2, r3, r2
   1463c:	mov	r3, #0
   14640:	ldrb	r4, [r2, #709]	; 0x2c5
   14644:	mov	sl, #0
   14648:	mov	fp, #0
   1464c:	adds	r2, r4, r4
   14650:	umull	r4, r5, r4, r4
   14654:	adc	r3, r3, r3
   14658:	mul	ip, r4, r1
   1465c:	mla	ip, r0, r5, ip
   14660:	umull	r4, r5, r4, r0
   14664:	subs	r4, r2, r4
   14668:	add	r5, ip, r5
   1466c:	sbc	r5, r3, r5
   14670:	adds	r6, r4, r4
   14674:	adc	r7, r5, r5
   14678:	mul	r3, r4, r5
   1467c:	umull	r4, r5, r4, r4
   14680:	add	r5, r5, r3, lsl #1
   14684:	mul	r3, r4, r1
   14688:	mla	r3, r0, r5, r3
   1468c:	umull	r4, r5, r4, r0
   14690:	subs	r2, r6, r4
   14694:	add	r5, r3, r5
   14698:	sbc	r3, r7, r5
   1469c:	adds	r4, r2, r2
   146a0:	adc	r5, r3, r3
   146a4:	mul	ip, r2, r3
   146a8:	umull	r2, r3, r2, r2
   146ac:	add	r3, r3, ip, lsl #1
   146b0:	mul	ip, r2, r1
   146b4:	mov	r6, r0
   146b8:	mla	ip, r0, r3, ip
   146bc:	umull	r2, r3, r2, r0
   146c0:	subs	r4, r4, r2
   146c4:	add	r3, ip, r3
   146c8:	sbc	r5, r5, r3
   146cc:	mov	r3, #64	; 0x40
   146d0:	mov	r2, #1
   146d4:	str	r3, [sp, #72]	; 0x48
   146d8:	mov	r3, #0
   146dc:	strd	r4, [sp, #88]	; 0x58
   146e0:	mov	r7, r1
   146e4:	mov	r4, r2
   146e8:	mov	r5, r3
   146ec:	mov	r2, sl
   146f0:	mov	r3, fp
   146f4:	lsl	ip, r6, #31
   146f8:	str	ip, [sp, #36]	; 0x24
   146fc:	mov	ip, #0
   14700:	str	ip, [sp, #32]
   14704:	ldrd	r8, [sp, #32]
   14708:	lsrs	r7, r7, #1
   1470c:	rrx	r6, r6
   14710:	lsrs	r3, r3, #1
   14714:	rrx	r2, r2
   14718:	cmp	r7, r5
   1471c:	orr	r8, r8, r2
   14720:	orr	r9, r9, r3
   14724:	cmpeq	r6, r4
   14728:	mov	r2, r8
   1472c:	mov	r3, r9
   14730:	bcc	14750 <__assert_fail@plt+0x2f70>
   14734:	moveq	ip, #1
   14738:	cmp	r9, fp
   1473c:	cmpeq	r8, sl
   14740:	movhi	ip, #0
   14744:	andls	ip, ip, #1
   14748:	cmp	ip, #0
   1474c:	beq	14778 <__assert_fail@plt+0x2f98>
   14750:	cmp	r3, fp
   14754:	cmpeq	r2, sl
   14758:	movhi	ip, #1
   1475c:	movls	ip, #0
   14760:	subs	sl, sl, r2
   14764:	sbc	fp, fp, r3
   14768:	subs	r8, r4, r6
   1476c:	sbc	r9, r5, r7
   14770:	subs	r4, r8, ip
   14774:	sbc	r5, r9, #0
   14778:	ldr	ip, [sp, #72]	; 0x48
   1477c:	subs	ip, ip, #1
   14780:	str	ip, [sp, #72]	; 0x48
   14784:	bne	146f4 <__assert_fail@plt+0x2f14>
   14788:	subs	r2, r0, sl
   1478c:	sbc	r3, r1, fp
   14790:	cmp	r3, fp
   14794:	cmpeq	r2, sl
   14798:	movhi	r8, #1
   1479c:	movls	r8, #0
   147a0:	rsbs	r8, r8, #0
   147a4:	mov	r2, r0
   147a8:	sbc	r9, r9, r9
   147ac:	mov	r3, r1
   147b0:	and	r2, r2, r8
   147b4:	and	r3, r3, r9
   147b8:	mov	r8, r2
   147bc:	adds	r2, sl, sl
   147c0:	strd	r0, [sp, #32]
   147c4:	mov	r9, r3
   147c8:	adc	r3, fp, fp
   147cc:	subs	r0, r2, r0
   147d0:	sbc	r1, r3, r1
   147d4:	ldr	r3, [sp, #76]	; 0x4c
   147d8:	adds	r8, r8, r0
   147dc:	str	r3, [sp, #16]
   147e0:	ldrd	r2, [sp, #48]	; 0x30
   147e4:	adc	r9, r9, r1
   147e8:	strd	sl, [sp, #24]
   147ec:	strd	r2, [sp, #8]
   147f0:	strd	r8, [sp]
   147f4:	ldrd	r2, [sp, #88]	; 0x58
   147f8:	ldrd	r0, [sp, #32]
   147fc:	bl	11eb8 <__assert_fail@plt+0x6d8>
   14800:	subs	r3, r0, #0
   14804:	mov	r4, r3
   14808:	beq	14b68 <__assert_fail@plt+0x3388>
   1480c:	add	r6, sp, #136	; 0x88
   14810:	ldrd	r2, [sp, #80]	; 0x50
   14814:	str	r6, [sp]
   14818:	mov	r0, #0
   1481c:	mov	r1, #0
   14820:	bl	13f7c <__assert_fail@plt+0x279c>
   14824:	ldrb	r3, [sp, #386]	; 0x182
   14828:	mov	r2, #2
   1482c:	mov	r5, fp
   14830:	str	r3, [sp, #128]	; 0x80
   14834:	mov	r3, #0
   14838:	str	r6, [sp, #132]	; 0x84
   1483c:	strd	r2, [sp, #40]	; 0x28
   14840:	mov	r2, sl
   14844:	mov	r3, #0
   14848:	strd	r2, [sp, #64]	; 0x40
   1484c:	mov	r0, r4
   14850:	mov	r6, #1
   14854:	b	148e8 <__assert_fail@plt+0x3108>
   14858:	ldrd	r2, [sp, #48]	; 0x30
   1485c:	lsrs	r3, r3, #1
   14860:	rrx	r2, r2
   14864:	strd	r2, [sp, #48]	; 0x30
   14868:	ldr	r3, [sp, #76]	; 0x4c
   1486c:	add	r3, r3, #1
   14870:	b	14610 <__assert_fail@plt+0x2e30>
   14874:	nop			; (mov r0, r0)
   14878:	cmneq	sp, r8, ror sp
   1487c:	andeq	r0, r0, r0
   14880:	andeq	ip, r1, r0, lsr #9
   14884:	andeq	pc, r1, r4, lsl #12
   14888:	andeq	pc, r1, r3, asr #9
   1488c:	andeq	r0, r0, lr, ror #9
   14890:	andeq	pc, r1, ip, asr r5	; <UNPREDICTABLE>
   14894:	strdeq	pc, [r1], -r9
   14898:	ldr	r2, [sp, #132]	; 0x84
   1489c:	lsl	r3, r6, #3
   148a0:	add	r2, r3, r2
   148a4:	ldrd	r0, [sp, #80]	; 0x50
   148a8:	ldrd	r2, [r2]
   148ac:	bl	1c2a0 <__assert_fail@plt+0xaac0>
   148b0:	ldrd	r2, [sp, #88]	; 0x58
   148b4:	strd	sl, [sp, #16]
   148b8:	strd	r2, [sp, #8]
   148bc:	ldrd	r2, [sp, #32]
   148c0:	strd	r2, [sp]
   148c4:	mov	r2, r0
   148c8:	mov	r3, r1
   148cc:	mov	r0, r8
   148d0:	mov	r1, r9
   148d4:	bl	11dfc <__assert_fail@plt+0x61c>
   148d8:	cmp	r1, fp
   148dc:	cmpeq	r0, sl
   148e0:	movne	r0, #1
   148e4:	moveq	r0, #0
   148e8:	ldr	r2, [sp, #128]	; 0x80
   148ec:	sub	r3, r6, #1
   148f0:	cmp	r2, r3
   148f4:	bls	14a80 <__assert_fail@plt+0x32a0>
   148f8:	cmp	r0, #0
   148fc:	add	r6, r6, #1
   14900:	bne	14898 <__assert_fail@plt+0x30b8>
   14904:	ldr	r3, [pc, #-140]	; 14880 <__assert_fail@plt+0x30a0>
   14908:	ldr	r2, [sp, #72]	; 0x48
   1490c:	ldrd	r0, [sp, #40]	; 0x28
   14910:	mov	r9, #0
   14914:	ldrb	r2, [r2, r3]
   14918:	mov	r3, #0
   1491c:	ldr	lr, [sp, #68]	; 0x44
   14920:	adds	r0, r0, r2
   14924:	adc	r1, r1, r3
   14928:	ldr	r3, [sp, #64]	; 0x40
   1492c:	strd	r0, [sp, #40]	; 0x28
   14930:	ldr	r1, [sp, #44]	; 0x2c
   14934:	mul	ip, r3, r9
   14938:	ldr	r3, [sp, #68]	; 0x44
   1493c:	ldr	r6, [sp, #44]	; 0x2c
   14940:	mla	ip, r0, r3, ip
   14944:	ldr	r3, [sp, #64]	; 0x40
   14948:	umull	r2, r3, r3, r0
   1494c:	strd	r2, [sp, #56]	; 0x38
   14950:	ldr	r3, [sp, #60]	; 0x3c
   14954:	mov	r2, #0
   14958:	add	ip, ip, r3
   1495c:	mul	r3, r5, r9
   14960:	umull	r8, r9, r5, r0
   14964:	mla	r3, r2, r0, r3
   14968:	mov	r0, #0
   1496c:	add	r9, r3, r9
   14970:	ldr	r3, [sp, #44]	; 0x2c
   14974:	str	ip, [sp, #104]	; 0x68
   14978:	mov	ip, #0
   1497c:	umull	r2, r3, r5, r3
   14980:	str	ip, [sp, #108]	; 0x6c
   14984:	mla	r3, r0, r1, r3
   14988:	ldr	r0, [sp, #64]	; 0x40
   1498c:	umull	r0, r1, r1, r0
   14990:	mla	r1, r6, lr, r1
   14994:	ldrd	r6, [sp, #104]	; 0x68
   14998:	adds	r0, r0, r8
   1499c:	adc	r1, r1, r9
   149a0:	adds	r6, r6, r0
   149a4:	adc	r7, r7, r1
   149a8:	cmp	r9, r7
   149ac:	cmpeq	r8, r6
   149b0:	mov	r0, r6
   149b4:	mov	r1, r7
   149b8:	bls	149c4 <__assert_fail@plt+0x31e4>
   149bc:	adds	r2, r2, #0
   149c0:	adc	r3, r3, #1
   149c4:	mov	ip, #0
   149c8:	str	r1, [sp, #96]	; 0x60
   149cc:	str	ip, [sp, #100]	; 0x64
   149d0:	ldrd	r6, [sp, #96]	; 0x60
   149d4:	str	r0, [sp, #116]	; 0x74
   149d8:	str	ip, [sp, #112]	; 0x70
   149dc:	ldrd	r8, [sp, #112]	; 0x70
   149e0:	adds	r6, r6, r2
   149e4:	ldr	r1, [sp, #56]	; 0x38
   149e8:	adc	r7, r7, r3
   149ec:	mov	r2, r6
   149f0:	adds	r8, r8, r1
   149f4:	mov	r3, r7
   149f8:	adc	r9, r9, #0
   149fc:	orrs	r1, r2, r3
   14a00:	bne	14a90 <__assert_fail@plt+0x32b0>
   14a04:	mov	r0, r8
   14a08:	mov	r1, r9
   14a0c:	ldrd	r2, [sp, #32]
   14a10:	bl	1c2a0 <__assert_fail@plt+0xaac0>
   14a14:	mov	r8, r2
   14a18:	mov	r9, r3
   14a1c:	ldr	r3, [sp, #76]	; 0x4c
   14a20:	strd	sl, [sp, #24]
   14a24:	str	r3, [sp, #16]
   14a28:	ldrd	r2, [sp, #48]	; 0x30
   14a2c:	strd	r8, [sp]
   14a30:	ldrd	r0, [sp, #32]
   14a34:	strd	r2, [sp, #8]
   14a38:	ldrd	r2, [sp, #88]	; 0x58
   14a3c:	bl	11eb8 <__assert_fail@plt+0x6d8>
   14a40:	cmp	r0, #0
   14a44:	beq	14b68 <__assert_fail@plt+0x3388>
   14a48:	ldr	r3, [sp, #72]	; 0x48
   14a4c:	add	r3, r3, #1
   14a50:	cmp	r3, #668	; 0x29c
   14a54:	str	r3, [sp, #72]	; 0x48
   14a58:	bne	1484c <__assert_fail@plt+0x306c>
   14a5c:	mov	r2, #5
   14a60:	ldr	r1, [pc, #-484]	; 14884 <__assert_fail@plt+0x30a4>
   14a64:	mov	r0, #0
   14a68:	bl	114bc <dcgettext@plt>
   14a6c:	mov	r1, #0
   14a70:	mov	r2, r0
   14a74:	mov	r0, r1
   14a78:	bl	115ac <error@plt>
   14a7c:	bl	117c8 <abort@plt>
   14a80:	cmp	r0, #0
   14a84:	beq	14904 <__assert_fail@plt+0x3124>
   14a88:	add	sp, sp, #396	; 0x18c
   14a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a90:	ldrd	r0, [sp, #32]
   14a94:	cmp	r1, r7
   14a98:	cmpeq	r0, r6
   14a9c:	bhi	14ab4 <__assert_fail@plt+0x32d4>
   14aa0:	ldr	r3, [pc, #-544]	; 14888 <__assert_fail@plt+0x30a8>
   14aa4:	ldr	r2, [pc, #-544]	; 1488c <__assert_fail@plt+0x30ac>
   14aa8:	ldr	r1, [pc, #-544]	; 14890 <__assert_fail@plt+0x30b0>
   14aac:	ldr	r0, [pc, #-544]	; 14894 <__assert_fail@plt+0x30b4>
   14ab0:	bl	117e0 <__assert_fail@plt>
   14ab4:	ldrd	r0, [sp, #32]
   14ab8:	mov	ip, #64	; 0x40
   14abc:	strd	r0, [sp, #56]	; 0x38
   14ac0:	mov	r0, #0
   14ac4:	mov	r1, r0
   14ac8:	ldr	lr, [sp, #56]	; 0x38
   14acc:	lsrs	r1, r1, #1
   14ad0:	rrx	r0, r0
   14ad4:	lsl	lr, lr, #31
   14ad8:	str	lr, [sp, #124]	; 0x7c
   14adc:	mov	lr, #0
   14ae0:	str	lr, [sp, #120]	; 0x78
   14ae4:	ldrd	r6, [sp, #120]	; 0x78
   14ae8:	orr	r6, r6, r0
   14aec:	orr	r7, r7, r1
   14af0:	mov	r0, r6
   14af4:	mov	r1, r7
   14af8:	ldrd	r6, [sp, #56]	; 0x38
   14afc:	lsrs	r7, r7, #1
   14b00:	rrx	r6, r6
   14b04:	cmp	r7, r3
   14b08:	cmpeq	r6, r2
   14b0c:	strd	r6, [sp, #56]	; 0x38
   14b10:	bcc	14b30 <__assert_fail@plt+0x3350>
   14b14:	moveq	lr, #1
   14b18:	cmp	r1, r9
   14b1c:	cmpeq	r0, r8
   14b20:	movhi	lr, #0
   14b24:	andls	lr, lr, #1
   14b28:	cmp	lr, #0
   14b2c:	beq	14b5c <__assert_fail@plt+0x337c>
   14b30:	cmp	r1, r9
   14b34:	ldrd	r6, [sp, #56]	; 0x38
   14b38:	cmpeq	r0, r8
   14b3c:	movhi	lr, #1
   14b40:	movls	lr, #0
   14b44:	subs	r8, r8, r0
   14b48:	sbc	r9, r9, r1
   14b4c:	subs	r6, r2, r6
   14b50:	sbc	r7, r3, r7
   14b54:	subs	r2, r6, lr
   14b58:	sbc	r3, r7, #0
   14b5c:	subs	ip, ip, #1
   14b60:	bne	14ac8 <__assert_fail@plt+0x32e8>
   14b64:	b	14a1c <__assert_fail@plt+0x323c>
   14b68:	mov	r0, #0
   14b6c:	b	14a88 <__assert_fail@plt+0x32a8>
   14b70:	mov	r0, #0
   14b74:	bx	lr
   14b78:	mov	r0, #1
   14b7c:	bx	lr
   14b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b84:	mov	r8, r0
   14b88:	sub	sp, sp, #100	; 0x64
   14b8c:	mov	r9, r1
   14b90:	str	r2, [sp, #52]	; 0x34
   14b94:	str	r3, [sp, #80]	; 0x50
   14b98:	cmp	r9, #0
   14b9c:	cmpeq	r8, #1
   14ba0:	bhi	14bb8 <__assert_fail@plt+0x33d8>
   14ba4:	ldr	r3, [pc, #1332]	; 150e0 <__assert_fail@plt+0x3900>
   14ba8:	ldr	r2, [pc, #1332]	; 150e4 <__assert_fail@plt+0x3904>
   14bac:	ldr	r1, [pc, #1332]	; 150e8 <__assert_fail@plt+0x3908>
   14bb0:	ldr	r0, [pc, #1332]	; 150ec <__assert_fail@plt+0x390c>
   14bb4:	bl	117e0 <__assert_fail@plt>
   14bb8:	mov	sl, #0
   14bbc:	mov	fp, #0
   14bc0:	mov	r4, r8
   14bc4:	mov	r5, r9
   14bc8:	mov	ip, #64	; 0x40
   14bcc:	mov	r2, #1
   14bd0:	mov	r3, #0
   14bd4:	mov	r0, sl
   14bd8:	mov	r1, fp
   14bdc:	lsl	lr, r4, #31
   14be0:	str	lr, [sp, #92]	; 0x5c
   14be4:	mov	lr, #0
   14be8:	str	lr, [sp, #88]	; 0x58
   14bec:	ldrd	r6, [sp, #88]	; 0x58
   14bf0:	lsrs	r5, r5, #1
   14bf4:	rrx	r4, r4
   14bf8:	lsrs	r1, r1, #1
   14bfc:	rrx	r0, r0
   14c00:	cmp	r5, r3
   14c04:	orr	r6, r6, r0
   14c08:	orr	r7, r7, r1
   14c0c:	cmpeq	r4, r2
   14c10:	mov	r0, r6
   14c14:	mov	r1, r7
   14c18:	bcc	14c38 <__assert_fail@plt+0x3458>
   14c1c:	moveq	lr, #1
   14c20:	cmp	r7, fp
   14c24:	cmpeq	r6, sl
   14c28:	movhi	lr, #0
   14c2c:	andls	lr, lr, #1
   14c30:	cmp	lr, #0
   14c34:	beq	14c60 <__assert_fail@plt+0x3480>
   14c38:	cmp	r1, fp
   14c3c:	cmpeq	r0, sl
   14c40:	movhi	lr, #1
   14c44:	movls	lr, #0
   14c48:	subs	sl, sl, r0
   14c4c:	sbc	fp, fp, r1
   14c50:	subs	r2, r2, r4
   14c54:	sbc	r3, r3, r5
   14c58:	subs	r2, r2, lr
   14c5c:	sbc	r3, r3, #0
   14c60:	subs	ip, ip, #1
   14c64:	bne	14bdc <__assert_fail@plt+0x33fc>
   14c68:	subs	r2, r8, sl
   14c6c:	sbc	r3, r9, fp
   14c70:	cmp	fp, r3
   14c74:	cmpeq	sl, r2
   14c78:	movcc	r4, #1
   14c7c:	movcs	r4, #0
   14c80:	rsbs	r4, r4, #0
   14c84:	sbc	r5, r5, r5
   14c88:	adds	r0, sl, sl
   14c8c:	adc	r1, fp, fp
   14c90:	and	r4, r4, r8
   14c94:	subs	r0, r0, r8
   14c98:	sbc	r1, r1, r9
   14c9c:	and	r5, r5, r9
   14ca0:	adds	r4, r4, r0
   14ca4:	mov	r7, #1
   14ca8:	ldr	r2, [sp, #52]	; 0x34
   14cac:	adc	r5, r5, r1
   14cb0:	mov	r3, #0
   14cb4:	mov	r6, r7
   14cb8:	strd	r4, [sp, #16]
   14cbc:	strd	r4, [sp, #32]
   14cc0:	strd	r2, [sp, #56]	; 0x38
   14cc4:	ldrd	r2, [sp, #56]	; 0x38
   14cc8:	cmp	r3, r9
   14ccc:	cmpeq	r2, r8
   14cd0:	ldrcs	r3, [pc, #1032]	; 150e0 <__assert_fail@plt+0x3900>
   14cd4:	movcs	r2, #1472	; 0x5c0
   14cd8:	ldrcs	r1, [pc, #1032]	; 150e8 <__assert_fail@plt+0x3908>
   14cdc:	ldrcs	r0, [pc, #1036]	; 150f0 <__assert_fail@plt+0x3910>
   14ce0:	bcs	14bb4 <__assert_fail@plt+0x33d4>
   14ce4:	lsrs	r3, r9, #1
   14ce8:	rrx	r2, r8
   14cec:	ldr	r1, [pc, #1024]	; 150f4 <__assert_fail@plt+0x3914>
   14cf0:	and	r2, r2, #127	; 0x7f
   14cf4:	add	r2, r1, r2
   14cf8:	mov	r3, #0
   14cfc:	ldrb	r0, [r2, #709]	; 0x2c5
   14d00:	adds	r2, r0, r0
   14d04:	umull	r0, r1, r0, r0
   14d08:	adc	r3, r3, r3
   14d0c:	mul	ip, r0, r9
   14d10:	mla	ip, r8, r1, ip
   14d14:	umull	r0, r1, r0, r8
   14d18:	subs	r0, r2, r0
   14d1c:	add	r1, ip, r1
   14d20:	sbc	r1, r3, r1
   14d24:	adds	r2, r0, r0
   14d28:	adc	r3, r1, r1
   14d2c:	mul	ip, r0, r1
   14d30:	umull	r0, r1, r0, r0
   14d34:	add	r1, r1, ip, lsl #1
   14d38:	mul	ip, r0, r9
   14d3c:	mla	ip, r8, r1, ip
   14d40:	umull	r0, r1, r0, r8
   14d44:	subs	r2, r2, r0
   14d48:	add	r1, ip, r1
   14d4c:	sbc	r3, r3, r1
   14d50:	adds	r0, r2, r2
   14d54:	adc	r1, r3, r3
   14d58:	mul	ip, r2, r3
   14d5c:	umull	r2, r3, r2, r2
   14d60:	add	r3, r3, ip, lsl #1
   14d64:	mul	ip, r2, r9
   14d68:	mla	ip, r8, r3, ip
   14d6c:	umull	r2, r3, r2, r8
   14d70:	subs	r0, r0, r2
   14d74:	add	r3, ip, r3
   14d78:	sbc	r1, r1, r3
   14d7c:	ldrd	r2, [sp, #56]	; 0x38
   14d80:	strd	r0, [sp, #40]	; 0x28
   14d84:	subs	r2, r8, r2
   14d88:	sbc	r3, r9, r3
   14d8c:	strd	r2, [sp, #64]	; 0x40
   14d90:	ldrd	r2, [sp, #56]	; 0x38
   14d94:	subs	r2, r2, r8
   14d98:	sbc	r3, r3, r9
   14d9c:	strd	r2, [sp, #72]	; 0x48
   14da0:	ldrd	r2, [sp, #40]	; 0x28
   14da4:	mov	r0, r4
   14da8:	mov	r1, r5
   14dac:	strd	r2, [sp, #8]
   14db0:	strd	r8, [sp]
   14db4:	mov	r2, r4
   14db8:	mov	r3, r5
   14dbc:	bl	11cbc <__assert_fail@plt+0x4dc>
   14dc0:	ldrd	r2, [sp, #64]	; 0x40
   14dc4:	ldrd	r4, [sp, #72]	; 0x48
   14dc8:	strd	r8, [sp]
   14dcc:	cmp	r1, r3
   14dd0:	cmpeq	r0, r2
   14dd4:	movcc	r2, #1
   14dd8:	movcs	r2, #0
   14ddc:	rsbs	r2, r2, #0
   14de0:	sbc	r3, r3, r3
   14de4:	and	r2, r2, r8
   14de8:	adds	r4, r4, r0
   14dec:	adc	r5, r5, r1
   14df0:	and	r3, r3, r9
   14df4:	adds	r4, r2, r4
   14df8:	adc	r5, r3, r5
   14dfc:	ldrd	r2, [sp, #32]
   14e00:	ldrd	r0, [sp, #32]
   14e04:	strd	r4, [sp, #24]
   14e08:	cmp	r3, r5
   14e0c:	cmpeq	r2, r4
   14e10:	movcc	r2, #1
   14e14:	movcs	r2, #0
   14e18:	rsbs	r2, r2, #0
   14e1c:	sbc	r3, r3, r3
   14e20:	subs	r0, r0, r4
   14e24:	sbc	r1, r1, r5
   14e28:	ldrd	r4, [sp, #40]	; 0x28
   14e2c:	and	r2, r2, r8
   14e30:	adds	r2, r2, r0
   14e34:	and	r3, r3, r9
   14e38:	adc	r3, r3, r1
   14e3c:	mov	r0, sl
   14e40:	mov	r1, fp
   14e44:	strd	r4, [sp, #8]
   14e48:	bl	11cbc <__assert_fail@plt+0x4dc>
   14e4c:	and	r3, r6, #31
   14e50:	cmp	r3, #1
   14e54:	mov	sl, r0
   14e58:	mov	fp, r1
   14e5c:	bne	14e80 <__assert_fail@plt+0x36a0>
   14e60:	mov	r2, r8
   14e64:	mov	r3, r9
   14e68:	bl	11b10 <__assert_fail@plt+0x330>
   14e6c:	cmp	r1, #0
   14e70:	cmpeq	r0, #1
   14e74:	bne	14f24 <__assert_fail@plt+0x3744>
   14e78:	ldrd	r2, [sp, #24]
   14e7c:	strd	r2, [sp, #16]
   14e80:	subs	r6, r6, #1
   14e84:	bne	14ea4 <__assert_fail@plt+0x36c4>
   14e88:	ldrd	r4, [sp, #24]
   14e8c:	lsl	r3, r7, #1
   14e90:	str	r3, [sp, #84]	; 0x54
   14e94:	cmp	r7, r6
   14e98:	bne	14ec4 <__assert_fail@plt+0x36e4>
   14e9c:	strd	r4, [sp, #16]
   14ea0:	b	14eb4 <__assert_fail@plt+0x36d4>
   14ea4:	ldrd	r2, [sp, #32]
   14ea8:	ldrd	r4, [sp, #24]
   14eac:	str	r7, [sp, #84]	; 0x54
   14eb0:	strd	r2, [sp, #24]
   14eb4:	ldrd	r2, [sp, #24]
   14eb8:	ldr	r7, [sp, #84]	; 0x54
   14ebc:	strd	r2, [sp, #32]
   14ec0:	b	14da0 <__assert_fail@plt+0x35c0>
   14ec4:	ldrd	r2, [sp, #40]	; 0x28
   14ec8:	mov	r0, r4
   14ecc:	mov	r1, r5
   14ed0:	strd	r2, [sp, #8]
   14ed4:	strd	r8, [sp]
   14ed8:	mov	r2, r4
   14edc:	mov	r3, r5
   14ee0:	bl	11cbc <__assert_fail@plt+0x4dc>
   14ee4:	ldrd	r2, [sp, #64]	; 0x40
   14ee8:	add	r6, r6, #1
   14eec:	cmp	r3, r1
   14ef0:	cmpeq	r2, r0
   14ef4:	ldrd	r2, [sp, #72]	; 0x48
   14ef8:	movhi	r4, #1
   14efc:	movls	r4, #0
   14f00:	rsbs	r4, r4, #0
   14f04:	sbc	r5, r5, r5
   14f08:	and	r4, r4, r8
   14f0c:	adds	r2, r2, r0
   14f10:	adc	r3, r3, r1
   14f14:	and	r5, r5, r9
   14f18:	adds	r4, r4, r2
   14f1c:	adc	r5, r5, r3
   14f20:	b	14e94 <__assert_fail@plt+0x36b4>
   14f24:	ldrd	r2, [sp, #40]	; 0x28
   14f28:	strd	r8, [sp]
   14f2c:	strd	r2, [sp, #8]
   14f30:	ldrd	r2, [sp, #16]
   14f34:	mov	r0, r2
   14f38:	mov	r1, r3
   14f3c:	bl	11cbc <__assert_fail@plt+0x4dc>
   14f40:	ldrd	r2, [sp, #64]	; 0x40
   14f44:	ldrd	r4, [sp, #72]	; 0x48
   14f48:	cmp	r3, r1
   14f4c:	cmpeq	r2, r0
   14f50:	movhi	r2, #1
   14f54:	movls	r2, #0
   14f58:	rsbs	r2, r2, #0
   14f5c:	sbc	r3, r3, r3
   14f60:	and	r2, r2, r8
   14f64:	adds	r4, r4, r0
   14f68:	adc	r5, r5, r1
   14f6c:	and	r3, r3, r9
   14f70:	adds	r4, r2, r4
   14f74:	adc	r5, r3, r5
   14f78:	ldrd	r2, [sp, #32]
   14f7c:	mov	r0, r4
   14f80:	strd	r4, [sp, #16]
   14f84:	cmp	r3, r5
   14f88:	cmpeq	r2, r4
   14f8c:	movcc	r0, #1
   14f90:	movcs	r0, #0
   14f94:	rsbs	r0, r0, #0
   14f98:	sbc	r1, r5, r5
   14f9c:	mov	r4, r2
   14fa0:	mov	r5, r3
   14fa4:	ldrd	r2, [sp, #16]
   14fa8:	and	r0, r0, r8
   14fac:	and	r1, r1, r9
   14fb0:	subs	r4, r4, r2
   14fb4:	sbc	r5, r5, r3
   14fb8:	adds	r0, r0, r4
   14fbc:	adc	r1, r1, r5
   14fc0:	mov	r2, r8
   14fc4:	mov	r3, r9
   14fc8:	bl	11b10 <__assert_fail@plt+0x330>
   14fcc:	cmp	r1, #0
   14fd0:	cmpeq	r0, #1
   14fd4:	mov	r4, r0
   14fd8:	mov	r5, r1
   14fdc:	beq	14f24 <__assert_fail@plt+0x3744>
   14fe0:	cmp	r1, r9
   14fe4:	cmpeq	r0, r8
   14fe8:	ldreq	r3, [sp, #52]	; 0x34
   14fec:	addeq	r3, r3, #1
   14ff0:	streq	r3, [sp, #52]	; 0x34
   14ff4:	beq	14b98 <__assert_fail@plt+0x33b8>
   14ff8:	mov	r2, r0
   14ffc:	mov	r3, r1
   15000:	mov	r0, r8
   15004:	mov	r1, r9
   15008:	bl	1c2a0 <__assert_fail@plt+0xaac0>
   1500c:	mov	r8, r0
   15010:	mov	r9, r1
   15014:	mov	r0, r4
   15018:	mov	r1, r5
   1501c:	bl	145d4 <__assert_fail@plt+0x2df4>
   15020:	cmp	r0, #0
   15024:	bne	15074 <__assert_fail@plt+0x3894>
   15028:	ldr	r2, [sp, #52]	; 0x34
   1502c:	ldr	r3, [sp, #80]	; 0x50
   15030:	add	r2, r2, #1
   15034:	mov	r0, r4
   15038:	mov	r1, r5
   1503c:	bl	14b80 <__assert_fail@plt+0x33a0>
   15040:	mov	r0, r8
   15044:	mov	r1, r9
   15048:	bl	145d4 <__assert_fail@plt+0x2df4>
   1504c:	cmp	r0, #0
   15050:	beq	15090 <__assert_fail@plt+0x38b0>
   15054:	mov	r3, #1
   15058:	str	r3, [sp]
   1505c:	mov	r2, r8
   15060:	mov	r3, r9
   15064:	ldr	r0, [sp, #80]	; 0x50
   15068:	bl	11bc0 <__assert_fail@plt+0x3e0>
   1506c:	add	sp, sp, #100	; 0x64
   15070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15074:	mov	r3, #1
   15078:	str	r3, [sp]
   1507c:	mov	r2, r4
   15080:	mov	r3, r5
   15084:	ldr	r0, [sp, #80]	; 0x50
   15088:	bl	11bc0 <__assert_fail@plt+0x3e0>
   1508c:	b	15040 <__assert_fail@plt+0x3860>
   15090:	mov	r2, r8
   15094:	mov	r3, r9
   15098:	ldrd	r0, [sp, #24]
   1509c:	bl	1c2a0 <__assert_fail@plt+0xaac0>
   150a0:	ldrd	r0, [sp, #32]
   150a4:	mov	r4, r2
   150a8:	mov	r5, r3
   150ac:	mov	r2, r8
   150b0:	mov	r3, r9
   150b4:	bl	1c2a0 <__assert_fail@plt+0xaac0>
   150b8:	ldrd	r0, [sp, #16]
   150bc:	strd	r2, [sp, #32]
   150c0:	mov	r2, r8
   150c4:	mov	r3, r9
   150c8:	bl	1c2a0 <__assert_fail@plt+0xaac0>
   150cc:	cmp	r9, #0
   150d0:	cmpeq	r8, #1
   150d4:	strd	r2, [sp, #16]
   150d8:	bne	14cc4 <__assert_fail@plt+0x34e4>
   150dc:	b	1506c <__assert_fail@plt+0x388c>
   150e0:	andeq	pc, r1, fp, asr #9
   150e4:			; <UNDEFINED> instruction: 0x000005ba
   150e8:	andeq	pc, r1, ip, asr r5	; <UNPREDICTABLE>
   150ec:	andeq	pc, r1, r6, lsr r6	; <UNPREDICTABLE>
   150f0:	andeq	pc, r1, r0, asr #12
   150f4:	andeq	ip, r1, r0, lsr #9
   150f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150fc:	mov	r8, r2
   15100:	sub	sp, sp, #500	; 0x1f4
   15104:	mov	r9, r3
   15108:	mov	r2, r0
   1510c:	mov	r3, r1
   15110:	orrs	r3, r2, r3
   15114:	strd	r0, [sp, #24]
   15118:	bne	15138 <__assert_fail@plt+0x3958>
   1511c:	mov	r0, r8
   15120:	mov	r1, r9
   15124:	bl	145d4 <__assert_fail@plt+0x2df4>
   15128:	str	r0, [sp, #68]	; 0x44
   1512c:	ldr	r0, [sp, #68]	; 0x44
   15130:	add	sp, sp, #500	; 0x1f4
   15134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15138:	ldrd	r0, [sp, #24]
   1513c:	orrs	r3, r8, r9
   15140:	moveq	r3, #1
   15144:	movne	r3, #0
   15148:	subs	r0, r0, r3
   1514c:	sbc	r1, r1, #0
   15150:	subs	r2, r8, #1
   15154:	sbc	r3, r9, #0
   15158:	strd	r0, [sp, #32]
   1515c:	strd	r2, [sp, #16]
   15160:	orrs	r3, r2, r3
   15164:	beq	151c8 <__assert_fail@plt+0x39e8>
   15168:	ldrd	r2, [sp, #16]
   1516c:	mov	r1, #0
   15170:	str	r1, [sp, #64]	; 0x40
   15174:	and	r0, r2, #1
   15178:	mov	r1, #0
   1517c:	orrs	r1, r0, r1
   15180:	beq	1561c <__assert_fail@plt+0x3e3c>
   15184:	ldr	r3, [sp, #64]	; 0x40
   15188:	ldrd	r0, [sp, #32]
   1518c:	rsb	r2, r3, #64	; 0x40
   15190:	bl	1c284 <__assert_fail@plt+0xaaa4>
   15194:	ldr	r2, [sp, #64]	; 0x40
   15198:	mov	r4, r0
   1519c:	mov	r5, r1
   151a0:	ldrd	r0, [sp, #16]
   151a4:	bl	1c268 <__assert_fail@plt+0xaa88>
   151a8:	ldr	r2, [sp, #64]	; 0x40
   151ac:	orr	r0, r0, r4
   151b0:	orr	r1, r1, r5
   151b4:	strd	r0, [sp, #144]	; 0x90
   151b8:	ldrd	r0, [sp, #32]
   151bc:	bl	1c268 <__assert_fail@plt+0xaa88>
   151c0:	strd	r0, [sp, #152]	; 0x98
   151c4:	b	15204 <__assert_fail@plt+0x3a24>
   151c8:	ldrd	r2, [sp, #32]
   151cc:	mov	r4, #0
   151d0:	and	r0, r2, #1
   151d4:	mov	r1, #0
   151d8:	orrs	r1, r0, r1
   151dc:	beq	1560c <__assert_fail@plt+0x3e2c>
   151e0:	mov	r2, r4
   151e4:	ldrd	r0, [sp, #32]
   151e8:	bl	1c268 <__assert_fail@plt+0xaa88>
   151ec:	mov	r3, #0
   151f0:	mov	r2, #0
   151f4:	strd	r2, [sp, #152]	; 0x98
   151f8:	add	r3, r4, #64	; 0x40
   151fc:	str	r3, [sp, #64]	; 0x40
   15200:	strd	r0, [sp, #144]	; 0x90
   15204:	lsrs	r3, r9, #1
   15208:	rrx	r2, r8
   1520c:	ldr	r3, [pc, #2056]	; 15a1c <__assert_fail@plt+0x423c>
   15210:	and	r2, r2, #127	; 0x7f
   15214:	add	r3, r3, r2
   15218:	ldrb	r0, [r3, #709]	; 0x2c5
   1521c:	mov	r3, #0
   15220:	adds	r2, r0, r0
   15224:	umull	r0, r1, r0, r0
   15228:	adc	r3, r3, r3
   1522c:	mul	ip, r0, r9
   15230:	mla	ip, r8, r1, ip
   15234:	umull	r0, r1, r0, r8
   15238:	subs	r0, r2, r0
   1523c:	add	r1, ip, r1
   15240:	sbc	r1, r3, r1
   15244:	adds	r4, r0, r0
   15248:	adc	r5, r1, r1
   1524c:	mul	r3, r0, r1
   15250:	umull	r0, r1, r0, r0
   15254:	add	r1, r1, r3, lsl #1
   15258:	mul	r3, r0, r9
   1525c:	mla	r3, r8, r1, r3
   15260:	umull	r0, r1, r0, r8
   15264:	subs	r2, r4, r0
   15268:	add	r1, r3, r1
   1526c:	sbc	r3, r5, r1
   15270:	adds	r0, r2, r2
   15274:	adc	r1, r3, r3
   15278:	mul	ip, r2, r3
   1527c:	umull	r2, r3, r2, r2
   15280:	add	r3, r3, ip, lsl #1
   15284:	mul	ip, r2, r9
   15288:	mla	ip, r8, r3, ip
   1528c:	umull	r2, r3, r2, r8
   15290:	subs	r0, r0, r2
   15294:	add	r3, ip, r3
   15298:	sbc	r1, r1, r3
   1529c:	ldrd	r2, [sp, #24]
   152a0:	strd	r0, [sp, #72]	; 0x48
   152a4:	cmp	r3, #0
   152a8:	cmpeq	r2, #1
   152ac:	movls	r4, #128	; 0x80
   152b0:	movls	r5, #0
   152b4:	movls	r0, #1
   152b8:	movls	r1, #0
   152bc:	movls	r2, #0
   152c0:	movhi	r4, #64	; 0x40
   152c4:	movhi	r5, #0
   152c8:	movhi	r0, #0
   152cc:	movhi	r1, #0
   152d0:	movhi	r2, #1
   152d4:	mov	r3, #0
   152d8:	subs	r4, r4, #1
   152dc:	sbc	r5, r5, #0
   152e0:	mvn	r7, #0
   152e4:	mvn	r6, #0
   152e8:	cmp	r5, r7
   152ec:	cmpeq	r4, r6
   152f0:	bne	15630 <__assert_fail@plt+0x3e50>
   152f4:	adds	r4, r0, r0
   152f8:	adc	r5, r1, r1
   152fc:	strd	r2, [sp, #184]	; 0xb8
   15300:	adds	r2, r2, r2
   15304:	adc	r3, r3, r3
   15308:	cmp	r1, r5
   1530c:	cmpeq	r0, r4
   15310:	strd	r0, [sp, #176]	; 0xb0
   15314:	movhi	r1, #1
   15318:	movls	r1, #0
   1531c:	adds	r2, r2, r1
   15320:	ldrd	r0, [sp, #24]
   15324:	adc	r3, r3, #0
   15328:	cmp	r1, r3
   1532c:	cmpeq	r0, r2
   15330:	strd	r2, [sp, #168]	; 0xa8
   15334:	bcc	156c8 <__assert_fail@plt+0x3ee8>
   15338:	moveq	r1, #1
   1533c:	movne	r1, #0
   15340:	cmp	r9, r5
   15344:	cmpeq	r8, r4
   15348:	movhi	r1, #0
   1534c:	andls	r1, r1, #1
   15350:	cmp	r1, #0
   15354:	bne	156c8 <__assert_fail@plt+0x3ee8>
   15358:	strd	r4, [sp, #160]	; 0xa0
   1535c:	ldrd	r2, [sp, #24]
   15360:	add	r0, sp, #192	; 0xc0
   15364:	strd	r8, [sp, #192]	; 0xc0
   15368:	strd	r2, [sp, #200]	; 0xc8
   1536c:	add	r3, sp, #176	; 0xb0
   15370:	str	r3, [sp, #12]
   15374:	ldr	r3, [sp, #64]	; 0x40
   15378:	str	r3, [sp, #8]
   1537c:	add	r3, sp, #144	; 0x90
   15380:	str	r3, [sp, #4]
   15384:	add	r3, sp, #160	; 0xa0
   15388:	str	r3, [sp]
   1538c:	ldrd	r2, [sp, #72]	; 0x48
   15390:	bl	12a04 <__assert_fail@plt+0x1224>
   15394:	subs	r3, r0, #0
   15398:	str	r3, [sp, #68]	; 0x44
   1539c:	beq	1512c <__assert_fail@plt+0x394c>
   153a0:	add	r4, sp, #240	; 0xf0
   153a4:	ldrd	r2, [sp, #16]
   153a8:	ldrd	r0, [sp, #32]
   153ac:	str	r4, [sp]
   153b0:	bl	13f7c <__assert_fail@plt+0x279c>
   153b4:	ldr	r1, [sp, #32]
   153b8:	mov	r2, #0
   153bc:	str	r2, [sp, #96]	; 0x60
   153c0:	lsl	r3, r1, #31
   153c4:	ldrd	r0, [sp, #16]
   153c8:	str	r4, [sp, #100]	; 0x64
   153cc:	lsrs	r1, r1, #1
   153d0:	rrx	r0, r0
   153d4:	orr	r6, r2, r0
   153d8:	orr	r7, r3, r1
   153dc:	ldrd	r0, [sp, #32]
   153e0:	mov	r2, #2
   153e4:	mov	r3, #0
   153e8:	lsrs	r1, r1, #1
   153ec:	rrx	r0, r0
   153f0:	strd	r6, [sp, #128]	; 0x80
   153f4:	strd	r0, [sp, #136]	; 0x88
   153f8:	strd	r2, [sp, #56]	; 0x38
   153fc:	ldr	r3, [sp, #100]	; 0x64
   15400:	ldrd	r2, [r3, #8]
   15404:	orrs	r3, r2, r3
   15408:	beq	15704 <__assert_fail@plt+0x3f24>
   1540c:	ldr	r3, [sp, #100]	; 0x64
   15410:	ldr	r1, [pc, #1540]	; 15a1c <__assert_fail@plt+0x423c>
   15414:	ldrd	r4, [r3]
   15418:	lsrs	r3, r5, #1
   1541c:	rrx	r2, r4
   15420:	and	r2, r2, #127	; 0x7f
   15424:	add	r2, r1, r2
   15428:	mov	r3, #0
   1542c:	ldrb	r0, [r2, #709]	; 0x2c5
   15430:	adds	r2, r0, r0
   15434:	umull	r0, r1, r0, r0
   15438:	adc	r3, r3, r3
   1543c:	mul	ip, r0, r5
   15440:	mla	ip, r4, r1, ip
   15444:	umull	r0, r1, r0, r4
   15448:	subs	r0, r2, r0
   1544c:	add	r1, ip, r1
   15450:	sbc	r1, r3, r1
   15454:	adds	r6, r0, r0
   15458:	adc	r7, r1, r1
   1545c:	mul	r3, r0, r1
   15460:	umull	r0, r1, r0, r0
   15464:	add	r1, r1, r3, lsl #1
   15468:	mul	r3, r0, r5
   1546c:	mla	r3, r4, r1, r3
   15470:	umull	r0, r1, r0, r4
   15474:	subs	r2, r6, r0
   15478:	add	r1, r3, r1
   1547c:	sbc	r3, r7, r1
   15480:	adds	r0, r2, r2
   15484:	adc	r1, r3, r3
   15488:	mul	ip, r2, r3
   1548c:	umull	r2, r3, r2, r2
   15490:	add	r3, r3, ip, lsl #1
   15494:	mul	ip, r2, r5
   15498:	mla	ip, r4, r3, ip
   1549c:	umull	r2, r3, r2, r4
   154a0:	subs	r0, r0, r2
   154a4:	add	r3, ip, r3
   154a8:	sbc	r1, r1, r3
   154ac:	ldr	r3, [sp, #20]
   154b0:	ldr	r2, [sp, #16]
   154b4:	add	r4, sp, #176	; 0xb0
   154b8:	mul	r3, r0, r3
   154bc:	str	r4, [sp, #8]
   154c0:	mla	r3, r2, r1, r3
   154c4:	umull	r0, r1, r0, r2
   154c8:	add	r1, r3, r1
   154cc:	mov	r3, #0
   154d0:	str	r3, [sp, #216]	; 0xd8
   154d4:	str	r3, [sp, #220]	; 0xdc
   154d8:	ldrd	r2, [sp, #72]	; 0x48
   154dc:	strd	r0, [sp, #208]	; 0xd0
   154e0:	add	r1, sp, #160	; 0xa0
   154e4:	strd	r2, [sp]
   154e8:	add	r0, sp, #232	; 0xe8
   154ec:	add	r3, sp, #192	; 0xc0
   154f0:	add	r2, sp, #208	; 0xd0
   154f4:	bl	12854 <__assert_fail@plt+0x1074>
   154f8:	ldrd	r2, [r4]
   154fc:	cmp	r1, r3
   15500:	cmpeq	r0, r2
   15504:	strd	r0, [sp, #224]	; 0xe0
   15508:	bne	15704 <__assert_fail@plt+0x3f24>
   1550c:	ldrd	r0, [sp, #232]	; 0xe8
   15510:	ldrd	r2, [r4, #8]
   15514:	cmp	r1, r3
   15518:	cmpeq	r0, r2
   1551c:	movne	r6, #1
   15520:	moveq	r6, #0
   15524:	mov	r7, #0
   15528:	ldrb	r3, [sp, #490]	; 0x1ea
   1552c:	cmp	r7, r3
   15530:	bcs	1595c <__assert_fail@plt+0x417c>
   15534:	cmp	r6, #0
   15538:	bne	1570c <__assert_fail@plt+0x3f2c>
   1553c:	ldr	r3, [pc, #1240]	; 15a1c <__assert_fail@plt+0x423c>
   15540:	ldr	r2, [sp, #96]	; 0x60
   15544:	ldrd	r0, [sp, #56]	; 0x38
   15548:	ldrb	r2, [r2, r3]
   1554c:	mov	r3, #0
   15550:	adds	r0, r0, r2
   15554:	adc	r1, r1, r3
   15558:	ldrd	r2, [sp, #24]
   1555c:	strd	r0, [sp, #56]	; 0x38
   15560:	cmp	r3, r1
   15564:	cmpeq	r2, r0
   15568:	bhi	1596c <__assert_fail@plt+0x418c>
   1556c:	mov	r2, #0
   15570:	mov	r4, #128	; 0x80
   15574:	mov	r5, #0
   15578:	mov	r3, r2
   1557c:	subs	r4, r4, #1
   15580:	sbc	r5, r5, #0
   15584:	mvn	r7, #0
   15588:	mvn	r6, #0
   1558c:	cmp	r5, r7
   15590:	cmpeq	r4, r6
   15594:	bne	15984 <__assert_fail@plt+0x41a4>
   15598:	strd	r2, [sp, #168]	; 0xa8
   1559c:	add	r3, sp, #176	; 0xb0
   155a0:	str	r3, [sp, #12]
   155a4:	ldr	r3, [sp, #64]	; 0x40
   155a8:	add	ip, sp, #160	; 0xa0
   155ac:	str	r3, [sp, #8]
   155b0:	add	r3, sp, #144	; 0x90
   155b4:	strd	r0, [sp, #160]	; 0xa0
   155b8:	str	r3, [sp, #4]
   155bc:	str	ip, [sp]
   155c0:	ldrd	r2, [sp, #72]	; 0x48
   155c4:	add	r0, sp, #192	; 0xc0
   155c8:	bl	12a04 <__assert_fail@plt+0x1224>
   155cc:	subs	r6, r0, #0
   155d0:	beq	15964 <__assert_fail@plt+0x4184>
   155d4:	ldr	r3, [sp, #96]	; 0x60
   155d8:	add	r3, r3, #1
   155dc:	cmp	r3, #668	; 0x29c
   155e0:	str	r3, [sp, #96]	; 0x60
   155e4:	bne	153fc <__assert_fail@plt+0x3c1c>
   155e8:	mov	r2, #5
   155ec:	ldr	r1, [pc, #1068]	; 15a20 <__assert_fail@plt+0x4240>
   155f0:	mov	r0, #0
   155f4:	bl	114bc <dcgettext@plt>
   155f8:	mov	r1, #0
   155fc:	mov	r2, r0
   15600:	mov	r0, r1
   15604:	bl	115ac <error@plt>
   15608:	bl	117c8 <abort@plt>
   1560c:	lsrs	r3, r3, #1
   15610:	rrx	r2, r2
   15614:	add	r4, r4, #1
   15618:	b	151d0 <__assert_fail@plt+0x39f0>
   1561c:	ldr	r1, [sp, #64]	; 0x40
   15620:	lsrs	r3, r3, #1
   15624:	rrx	r2, r2
   15628:	add	r1, r1, #1
   1562c:	b	15170 <__assert_fail@plt+0x3990>
   15630:	lsr	ip, r1, #31
   15634:	str	ip, [sp, #40]	; 0x28
   15638:	mov	ip, #0
   1563c:	str	ip, [sp, #44]	; 0x2c
   15640:	ldrd	r6, [sp, #40]	; 0x28
   15644:	adds	r2, r2, r2
   15648:	adc	r3, r3, r3
   1564c:	ldrd	sl, [sp, #24]
   15650:	orr	r6, r6, r2
   15654:	orr	r7, r7, r3
   15658:	mov	r2, r6
   1565c:	mov	r3, r7
   15660:	adds	r6, r0, r0
   15664:	adc	r7, r1, r1
   15668:	cmp	fp, r3
   1566c:	cmpeq	sl, r2
   15670:	mov	r0, r6
   15674:	mov	r1, r7
   15678:	bcc	15698 <__assert_fail@plt+0x3eb8>
   1567c:	moveq	ip, #1
   15680:	cmp	r9, r7
   15684:	cmpeq	r8, r6
   15688:	movhi	ip, #0
   1568c:	andls	ip, ip, #1
   15690:	cmp	ip, #0
   15694:	beq	152d8 <__assert_fail@plt+0x3af8>
   15698:	cmp	r9, r7
   1569c:	cmpeq	r8, r6
   156a0:	movhi	ip, #1
   156a4:	movls	ip, #0
   156a8:	subs	r0, r6, r8
   156ac:	sbc	r1, r7, r9
   156b0:	ldrd	r6, [sp, #24]
   156b4:	subs	r6, r2, r6
   156b8:	sbc	r7, r3, r7
   156bc:	subs	r2, r6, ip
   156c0:	sbc	r3, r7, #0
   156c4:	b	152d8 <__assert_fail@plt+0x3af8>
   156c8:	subs	r0, r4, r8
   156cc:	sbc	r1, r5, r9
   156d0:	strd	r0, [sp, #160]	; 0xa0
   156d4:	ldrd	r0, [sp, #24]
   156d8:	subs	r0, r2, r0
   156dc:	sbc	r1, r3, r1
   156e0:	cmp	r9, r5
   156e4:	cmpeq	r8, r4
   156e8:	mov	r3, r1
   156ec:	movhi	r1, #1
   156f0:	movls	r1, #0
   156f4:	subs	r2, r0, r1
   156f8:	sbc	r3, r3, #0
   156fc:	strd	r2, [sp, #168]	; 0xa8
   15700:	b	1535c <__assert_fail@plt+0x3b7c>
   15704:	ldr	r6, [sp, #68]	; 0x44
   15708:	b	15524 <__assert_fail@plt+0x3d44>
   1570c:	ldr	r3, [sp, #100]	; 0x64
   15710:	add	r3, r3, r7, lsl #3
   15714:	ldrd	sl, [r3, #16]
   15718:	cmp	fp, #0
   1571c:	cmpeq	sl, #2
   15720:	bne	1578c <__assert_fail@plt+0x3fac>
   15724:	ldrd	r2, [sp, #128]	; 0x80
   15728:	strd	r2, [sp, #208]	; 0xd0
   1572c:	ldrd	r2, [sp, #136]	; 0x88
   15730:	strd	r2, [sp, #216]	; 0xd8
   15734:	ldrd	r2, [sp, #72]	; 0x48
   15738:	add	r4, sp, #176	; 0xb0
   1573c:	str	r4, [sp, #8]
   15740:	strd	r2, [sp]
   15744:	add	r1, sp, #160	; 0xa0
   15748:	add	r3, sp, #192	; 0xc0
   1574c:	add	r2, sp, #208	; 0xd0
   15750:	add	r0, sp, #232	; 0xe8
   15754:	bl	12854 <__assert_fail@plt+0x1074>
   15758:	ldrd	r2, [r4]
   1575c:	cmp	r1, r3
   15760:	cmpeq	r0, r2
   15764:	strd	r0, [sp, #224]	; 0xe0
   15768:	bne	15784 <__assert_fail@plt+0x3fa4>
   1576c:	ldrd	r0, [sp, #232]	; 0xe8
   15770:	ldrd	r2, [r4, #8]
   15774:	cmp	r1, r3
   15778:	cmpeq	r0, r2
   1577c:	movne	r6, #1
   15780:	moveq	r6, #0
   15784:	add	r7, r7, #1
   15788:	b	15528 <__assert_fail@plt+0x3d48>
   1578c:	lsrs	r3, fp, #1
   15790:	rrx	r2, sl
   15794:	ldr	r1, [pc, #640]	; 15a1c <__assert_fail@plt+0x423c>
   15798:	and	r2, r2, #127	; 0x7f
   1579c:	add	r2, r1, r2
   157a0:	mov	r3, #0
   157a4:	ldrb	r4, [r2, #709]	; 0x2c5
   157a8:	adds	r2, r4, r4
   157ac:	umull	r4, r5, r4, r4
   157b0:	adc	r3, r3, r3
   157b4:	mul	r1, r4, fp
   157b8:	mla	r1, sl, r5, r1
   157bc:	umull	r4, r5, r4, sl
   157c0:	subs	r4, r2, r4
   157c4:	add	r5, r1, r5
   157c8:	sbc	r5, r3, r5
   157cc:	adds	r0, r4, r4
   157d0:	adc	r1, r5, r5
   157d4:	mul	r3, r4, r5
   157d8:	umull	r4, r5, r4, r4
   157dc:	add	r5, r5, r3, lsl #1
   157e0:	mul	r3, r4, fp
   157e4:	mla	r3, sl, r5, r3
   157e8:	umull	r4, r5, r4, sl
   157ec:	subs	r2, r0, r4
   157f0:	add	r5, r3, r5
   157f4:	sbc	r3, r1, r5
   157f8:	adds	r0, r2, r2
   157fc:	adc	r1, r3, r3
   15800:	mul	ip, r2, r3
   15804:	umull	r2, r3, r2, r2
   15808:	add	r3, r3, ip, lsl #1
   1580c:	mul	ip, r2, fp
   15810:	mla	ip, sl, r3, ip
   15814:	umull	r2, r3, r2, sl
   15818:	subs	r0, r0, r2
   1581c:	add	r3, ip, r3
   15820:	sbc	r1, r1, r3
   15824:	ldr	r3, [sp, #16]
   15828:	mul	ip, r3, r1
   1582c:	ldr	r3, [sp, #20]
   15830:	mla	ip, r0, r3, ip
   15834:	ldr	r3, [sp, #16]
   15838:	umull	r2, r3, r3, r0
   1583c:	strd	r2, [sp, #48]	; 0x30
   15840:	ldr	r3, [sp, #52]	; 0x34
   15844:	add	ip, ip, r3
   15848:	ldrd	r2, [sp, #32]
   1584c:	str	ip, [sp, #52]	; 0x34
   15850:	cmp	r3, fp
   15854:	cmpeq	r2, sl
   15858:	ldrd	r2, [sp, #48]	; 0x30
   1585c:	bcc	15948 <__assert_fail@plt+0x4168>
   15860:	mov	r4, sl
   15864:	mov	r5, #0
   15868:	mov	r3, #0
   1586c:	strd	r4, [sp, #40]	; 0x28
   15870:	ldr	lr, [sp, #40]	; 0x28
   15874:	umull	r4, r5, lr, ip
   15878:	ldr	lr, [sp, #44]	; 0x2c
   1587c:	strd	r4, [sp, #80]	; 0x50
   15880:	ldr	r4, [sp, #84]	; 0x54
   15884:	mla	lr, ip, lr, r4
   15888:	umull	r4, r5, ip, fp
   1588c:	ldr	ip, [sp, #44]	; 0x2c
   15890:	str	lr, [sp, #84]	; 0x54
   15894:	strd	r4, [sp, #88]	; 0x58
   15898:	umull	r4, r5, r2, fp
   1589c:	mul	ip, r2, ip
   158a0:	ldr	lr, [sp, #40]	; 0x28
   158a4:	mla	r5, fp, r3, r5
   158a8:	mla	ip, lr, r3, ip
   158ac:	umull	r2, r3, r2, lr
   158b0:	ldrd	sl, [sp, #80]	; 0x50
   158b4:	add	r3, ip, r3
   158b8:	str	r3, [sp, #104]	; 0x68
   158bc:	mov	r3, #0
   158c0:	str	r3, [sp, #108]	; 0x6c
   158c4:	ldrd	r2, [sp, #104]	; 0x68
   158c8:	adds	sl, sl, r4
   158cc:	adc	fp, fp, r5
   158d0:	adds	r2, r2, sl
   158d4:	adc	r3, r3, fp
   158d8:	mov	r4, r2
   158dc:	mov	r5, r3
   158e0:	ldrd	r2, [sp, #80]	; 0x50
   158e4:	cmp	r3, r5
   158e8:	cmpeq	r2, r4
   158ec:	bls	15900 <__assert_fail@plt+0x4120>
   158f0:	ldrd	r2, [sp, #88]	; 0x58
   158f4:	adds	r2, r2, #0
   158f8:	adc	r3, r3, #1
   158fc:	strd	r2, [sp, #88]	; 0x58
   15900:	mov	r3, #0
   15904:	str	r3, [sp, #116]	; 0x74
   15908:	str	r5, [sp, #112]	; 0x70
   1590c:	ldrd	r4, [sp, #112]	; 0x70
   15910:	ldrd	r2, [sp, #32]
   15914:	subs	r2, r2, r4
   15918:	sbc	r3, r3, r5
   1591c:	ldrd	r4, [sp, #88]	; 0x58
   15920:	subs	r4, r2, r4
   15924:	sbc	r5, r3, r5
   15928:	mul	r1, r4, r1
   1592c:	umull	r2, r3, r4, r0
   15930:	mla	r1, r0, r5, r1
   15934:	add	r3, r1, r3
   15938:	strd	r2, [sp, #216]	; 0xd8
   1593c:	ldrd	r2, [sp, #48]	; 0x30
   15940:	strd	r2, [sp, #208]	; 0xd0
   15944:	b	15734 <__assert_fail@plt+0x3f54>
   15948:	strd	r2, [sp, #208]	; 0xd0
   1594c:	mov	r3, #0
   15950:	str	r3, [sp, #216]	; 0xd8
   15954:	str	r3, [sp, #220]	; 0xdc
   15958:	b	15734 <__assert_fail@plt+0x3f54>
   1595c:	cmp	r6, #0
   15960:	beq	1553c <__assert_fail@plt+0x3d5c>
   15964:	str	r6, [sp, #68]	; 0x44
   15968:	b	1512c <__assert_fail@plt+0x394c>
   1596c:	mov	r0, #0
   15970:	ldrd	r2, [sp, #56]	; 0x38
   15974:	mov	r4, #64	; 0x40
   15978:	mov	r5, #0
   1597c:	mov	r1, r0
   15980:	b	1557c <__assert_fail@plt+0x3d9c>
   15984:	lsr	ip, r1, #31
   15988:	str	ip, [sp, #120]	; 0x78
   1598c:	mov	ip, #0
   15990:	str	ip, [sp, #124]	; 0x7c
   15994:	ldrd	r6, [sp, #120]	; 0x78
   15998:	adds	r2, r2, r2
   1599c:	adc	r3, r3, r3
   159a0:	ldrd	sl, [sp, #24]
   159a4:	orr	r6, r6, r2
   159a8:	orr	r7, r7, r3
   159ac:	mov	r2, r6
   159b0:	mov	r3, r7
   159b4:	adds	r6, r0, r0
   159b8:	adc	r7, r1, r1
   159bc:	cmp	fp, r3
   159c0:	cmpeq	sl, r2
   159c4:	mov	r0, r6
   159c8:	mov	r1, r7
   159cc:	bcc	159ec <__assert_fail@plt+0x420c>
   159d0:	moveq	ip, #1
   159d4:	cmp	r9, r7
   159d8:	cmpeq	r8, r6
   159dc:	movhi	ip, #0
   159e0:	andls	ip, ip, #1
   159e4:	cmp	ip, #0
   159e8:	beq	1557c <__assert_fail@plt+0x3d9c>
   159ec:	cmp	r9, r7
   159f0:	cmpeq	r8, r6
   159f4:	movhi	ip, #1
   159f8:	movls	ip, #0
   159fc:	subs	r0, r6, r8
   15a00:	sbc	r1, r7, r9
   15a04:	ldrd	r6, [sp, #24]
   15a08:	subs	r6, r2, r6
   15a0c:	sbc	r7, r3, r7
   15a10:	subs	r2, r6, ip
   15a14:	sbc	r3, r7, #0
   15a18:	b	1557c <__assert_fail@plt+0x3d9c>
   15a1c:	andeq	ip, r1, r0, lsr #9
   15a20:	andeq	pc, r1, r4, lsl #12
   15a24:	mov	r3, #0
   15a28:	str	r3, [r1]
   15a2c:	str	r3, [r1, #4]
   15a30:	str	r3, [r1, #8]
   15a34:	ldr	r3, [r0, #4]
   15a38:	cmp	r3, #0
   15a3c:	bxeq	lr
   15a40:	ldr	r3, [pc, #384]	; 15bc8 <__assert_fail@plt+0x43e8>
   15a44:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15a48:	mov	r8, r1
   15a4c:	ldrb	r2, [r3, #8]
   15a50:	sub	sp, sp, #24
   15a54:	mov	r4, r0
   15a58:	cmp	r2, #0
   15a5c:	mov	r7, r3
   15a60:	beq	15a74 <__assert_fail@plt+0x4294>
   15a64:	ldr	r3, [pc, #352]	; 15bcc <__assert_fail@plt+0x43ec>
   15a68:	ldr	r0, [pc, #352]	; 15bd0 <__assert_fail@plt+0x43f0>
   15a6c:	ldr	r1, [r3]
   15a70:	bl	117b0 <fputs@plt>
   15a74:	mov	r0, sp
   15a78:	bl	1178c <__gmpz_init@plt>
   15a7c:	mov	r1, #0
   15a80:	mov	r0, r4
   15a84:	bl	113e4 <__gmpz_scan1@plt>
   15a88:	mov	r1, r4
   15a8c:	mov	r6, #2
   15a90:	mov	r2, r0
   15a94:	mov	r5, r0
   15a98:	mov	r0, r4
   15a9c:	bl	11570 <__gmpz_fdiv_q_2exp@plt>
   15aa0:	cmp	r5, #0
   15aa4:	bne	15b0c <__assert_fail@plt+0x432c>
   15aa8:	ldr	r9, [pc, #292]	; 15bd4 <__assert_fail@plt+0x43f4>
   15aac:	mov	r6, #1
   15ab0:	mov	r5, #3
   15ab4:	mov	r1, r5
   15ab8:	mov	r0, r4
   15abc:	bl	11654 <__gmpz_divisible_ui_p@plt>
   15ac0:	cmp	r0, #0
   15ac4:	bne	15b34 <__assert_fail@plt+0x4354>
   15ac8:	ldrb	r3, [r9, r6]
   15acc:	mov	r0, r4
   15ad0:	add	sl, r6, #1
   15ad4:	add	r5, r5, r3
   15ad8:	mul	r1, r5, r5
   15adc:	bl	11780 <__gmpz_cmp_ui@plt>
   15ae0:	cmp	r0, #0
   15ae4:	bge	15b70 <__assert_fail@plt+0x4390>
   15ae8:	mov	r0, sp
   15aec:	bl	11660 <__gmpz_clear@plt>
   15af0:	mov	r1, #1
   15af4:	mov	r0, r4
   15af8:	bl	11780 <__gmpz_cmp_ui@plt>
   15afc:	cmp	r0, #0
   15b00:	bne	15b78 <__assert_fail@plt+0x4398>
   15b04:	add	sp, sp, #24
   15b08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15b0c:	mov	r1, r6
   15b10:	add	r0, sp, #12
   15b14:	bl	11720 <__gmpz_init_set_ui@plt>
   15b18:	add	r1, sp, #12
   15b1c:	mov	r0, r8
   15b20:	bl	12d58 <__assert_fail@plt+0x1578>
   15b24:	add	r0, sp, #12
   15b28:	bl	11660 <__gmpz_clear@plt>
   15b2c:	sub	r5, r5, #1
   15b30:	b	15aa0 <__assert_fail@plt+0x42c0>
   15b34:	mov	r2, r5
   15b38:	mov	r1, r4
   15b3c:	mov	r0, r4
   15b40:	bl	1151c <__gmpz_tdiv_q_ui@plt>
   15b44:	mov	r1, r5
   15b48:	add	r0, sp, #12
   15b4c:	bl	11720 <__gmpz_init_set_ui@plt>
   15b50:	mov	r0, r8
   15b54:	add	r1, sp, #12
   15b58:	bl	12d58 <__assert_fail@plt+0x1578>
   15b5c:	add	r0, sp, #12
   15b60:	bl	11660 <__gmpz_clear@plt>
   15b64:	cmp	r6, #668	; 0x29c
   15b68:	bls	15ab4 <__assert_fail@plt+0x42d4>
   15b6c:	b	15ae8 <__assert_fail@plt+0x4308>
   15b70:	mov	r6, sl
   15b74:	b	15b64 <__assert_fail@plt+0x4384>
   15b78:	ldrb	r3, [r7, #8]
   15b7c:	cmp	r3, #0
   15b80:	beq	15b94 <__assert_fail@plt+0x43b4>
   15b84:	ldr	r3, [pc, #64]	; 15bcc <__assert_fail@plt+0x43ec>
   15b88:	ldr	r0, [pc, #72]	; 15bd8 <__assert_fail@plt+0x43f8>
   15b8c:	ldr	r1, [r3]
   15b90:	bl	117b0 <fputs@plt>
   15b94:	mov	r0, r4
   15b98:	bl	15bdc <__assert_fail@plt+0x43fc>
   15b9c:	cmp	r0, #0
   15ba0:	beq	15bb4 <__assert_fail@plt+0x43d4>
   15ba4:	mov	r1, r4
   15ba8:	mov	r0, r8
   15bac:	bl	12d58 <__assert_fail@plt+0x1578>
   15bb0:	b	15b04 <__assert_fail@plt+0x4324>
   15bb4:	mov	r2, r8
   15bb8:	mov	r1, #1
   15bbc:	mov	r0, r4
   15bc0:	bl	15dc8 <__assert_fail@plt+0x45e8>
   15bc4:	b	15b04 <__assert_fail@plt+0x4324>
   15bc8:	andeq	r1, r3, ip, ror #3
   15bcc:	ldrdeq	r1, [r3], -r8
   15bd0:	andeq	pc, r1, r6, asr #12
   15bd4:	andeq	ip, r1, r0, lsr #9
   15bd8:	andeq	pc, r1, r8, asr r6	; <UNPREDICTABLE>
   15bdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15be0:	mov	r1, #1
   15be4:	sub	sp, sp, #84	; 0x54
   15be8:	mov	r7, r0
   15bec:	bl	11780 <__gmpz_cmp_ui@plt>
   15bf0:	cmp	r0, #0
   15bf4:	ble	15dac <__assert_fail@plt+0x45cc>
   15bf8:	ldr	r1, [pc, #444]	; 15dbc <__assert_fail@plt+0x45dc>
   15bfc:	mov	r0, r7
   15c00:	bl	11780 <__gmpz_cmp_ui@plt>
   15c04:	cmp	r0, #0
   15c08:	blt	15db4 <__assert_fail@plt+0x45d4>
   15c0c:	add	r6, sp, #20
   15c10:	mov	r4, #0
   15c14:	add	r3, sp, #56	; 0x38
   15c18:	add	r2, sp, #44	; 0x2c
   15c1c:	add	r1, sp, #32
   15c20:	mov	r0, r6
   15c24:	str	r4, [sp]
   15c28:	bl	114ec <__gmpz_inits@plt>
   15c2c:	mov	r2, #1
   15c30:	mov	r1, r7
   15c34:	add	r0, sp, #44	; 0x2c
   15c38:	bl	11420 <__gmpz_sub_ui@plt>
   15c3c:	mov	r1, r4
   15c40:	add	r0, sp, #44	; 0x2c
   15c44:	bl	113e4 <__gmpz_scan1@plt>
   15c48:	add	r1, sp, #44	; 0x2c
   15c4c:	mov	r2, r0
   15c50:	mov	r9, r0
   15c54:	mov	r0, r6
   15c58:	bl	116a8 <__gmpz_tdiv_q_2exp@plt>
   15c5c:	mov	r1, #2
   15c60:	add	r0, sp, #32
   15c64:	bl	11450 <__gmpz_set_ui@plt>
   15c68:	stm	sp, {r6, r9}
   15c6c:	add	r3, sp, #56	; 0x38
   15c70:	add	r2, sp, #32
   15c74:	add	r1, sp, #44	; 0x2c
   15c78:	mov	r0, r7
   15c7c:	bl	132c4 <__assert_fail@plt+0x1ae4>
   15c80:	subs	r5, r0, #0
   15c84:	beq	15d84 <__assert_fail@plt+0x45a4>
   15c88:	add	r1, sp, #44	; 0x2c
   15c8c:	add	r0, sp, #56	; 0x38
   15c90:	bl	114f8 <__gmpz_set@plt>
   15c94:	add	r1, sp, #68	; 0x44
   15c98:	add	r0, sp, #56	; 0x38
   15c9c:	bl	15a24 <__assert_fail@plt+0x4244>
   15ca0:	ldr	fp, [pc, #280]	; 15dc0 <__assert_fail@plt+0x45e0>
   15ca4:	mov	sl, #12
   15ca8:	mov	r3, r5
   15cac:	mov	r8, #0
   15cb0:	b	15cf4 <__assert_fail@plt+0x4514>
   15cb4:	ldr	r2, [sp, #68]	; 0x44
   15cb8:	add	r1, sp, #44	; 0x2c
   15cbc:	mla	r2, sl, r8, r2
   15cc0:	add	r0, sp, #56	; 0x38
   15cc4:	bl	114e0 <__gmpz_divexact@plt>
   15cc8:	add	r2, sp, #56	; 0x38
   15ccc:	mov	r3, r7
   15cd0:	mov	r0, r2
   15cd4:	add	r1, sp, #32
   15cd8:	bl	114c8 <__gmpz_powm@plt>
   15cdc:	mov	r1, #1
   15ce0:	add	r0, sp, #56	; 0x38
   15ce4:	bl	11780 <__gmpz_cmp_ui@plt>
   15ce8:	add	r8, r8, #1
   15cec:	adds	r3, r0, #0
   15cf0:	movne	r3, #1
   15cf4:	ldr	r2, [sp, #76]	; 0x4c
   15cf8:	cmp	r8, r2
   15cfc:	bcs	15d68 <__assert_fail@plt+0x4588>
   15d00:	cmp	r3, #0
   15d04:	bne	15cb4 <__assert_fail@plt+0x44d4>
   15d08:	add	r1, sp, #32
   15d0c:	mov	r0, r1
   15d10:	ldrb	r2, [fp, r4]
   15d14:	bl	115f4 <__gmpz_add_ui@plt>
   15d18:	add	r3, sp, #56	; 0x38
   15d1c:	stm	sp, {r6, r9}
   15d20:	add	r2, sp, #32
   15d24:	add	r1, sp, #44	; 0x2c
   15d28:	mov	r0, r7
   15d2c:	bl	132c4 <__assert_fail@plt+0x1ae4>
   15d30:	subs	r3, r0, #0
   15d34:	beq	15d70 <__assert_fail@plt+0x4590>
   15d38:	add	r4, r4, #1
   15d3c:	cmp	r4, #668	; 0x29c
   15d40:	bne	15ca8 <__assert_fail@plt+0x44c8>
   15d44:	mov	r2, #5
   15d48:	ldr	r1, [pc, #116]	; 15dc4 <__assert_fail@plt+0x45e4>
   15d4c:	mov	r0, #0
   15d50:	bl	114bc <dcgettext@plt>
   15d54:	mov	r1, #0
   15d58:	mov	r2, r0
   15d5c:	mov	r0, r1
   15d60:	bl	115ac <error@plt>
   15d64:	bl	117c8 <abort@plt>
   15d68:	cmp	r3, #0
   15d6c:	beq	15d08 <__assert_fail@plt+0x4528>
   15d70:	add	r0, sp, #68	; 0x44
   15d74:	str	r3, [sp, #12]
   15d78:	bl	11f78 <__assert_fail@plt+0x798>
   15d7c:	ldr	r3, [sp, #12]
   15d80:	mov	r5, r3
   15d84:	mov	r3, #0
   15d88:	str	r3, [sp]
   15d8c:	add	r2, sp, #44	; 0x2c
   15d90:	add	r3, sp, #56	; 0x38
   15d94:	add	r1, sp, #32
   15d98:	mov	r0, r6
   15d9c:	bl	1142c <__gmpz_clears@plt>
   15da0:	mov	r0, r5
   15da4:	add	sp, sp, #84	; 0x54
   15da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dac:	mov	r5, #0
   15db0:	b	15da0 <__assert_fail@plt+0x45c0>
   15db4:	mov	r5, #1
   15db8:	b	15da0 <__assert_fail@plt+0x45c0>
   15dbc:	cmneq	sp, r9, ror sp
   15dc0:	andeq	ip, r1, r0, lsr #9
   15dc4:	andeq	pc, r1, r4, lsl #12
   15dc8:	ldr	r3, [pc, #804]	; 160f4 <__assert_fail@plt+0x4914>
   15dcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dd0:	mov	r6, r0
   15dd4:	ldrb	r3, [r3, #8]
   15dd8:	sub	sp, sp, #108	; 0x6c
   15ddc:	mov	sl, r1
   15de0:	cmp	r3, #0
   15de4:	mov	fp, r2
   15de8:	beq	15e04 <__assert_fail@plt+0x4624>
   15dec:	ldr	r0, [pc, #772]	; 160f8 <__assert_fail@plt+0x4918>
   15df0:	mov	r3, r1
   15df4:	ldr	r2, [pc, #768]	; 160fc <__assert_fail@plt+0x491c>
   15df8:	mov	r1, #1
   15dfc:	ldr	r0, [r0]
   15e00:	bl	116d8 <__fprintf_chk@plt>
   15e04:	add	r4, sp, #80	; 0x50
   15e08:	mov	r2, #0
   15e0c:	add	r1, sp, #92	; 0x5c
   15e10:	mov	r0, r4
   15e14:	bl	114ec <__gmpz_inits@plt>
   15e18:	add	r5, sp, #32
   15e1c:	mov	r1, #2
   15e20:	add	r0, sp, #56	; 0x38
   15e24:	bl	115e8 <__gmpz_init_set_si@plt>
   15e28:	add	r7, sp, #44	; 0x2c
   15e2c:	mov	r1, #2
   15e30:	mov	r0, r5
   15e34:	bl	115e8 <__gmpz_init_set_si@plt>
   15e38:	mov	r1, #2
   15e3c:	mov	r0, r7
   15e40:	bl	115e8 <__gmpz_init_set_si@plt>
   15e44:	mov	r1, #1
   15e48:	add	r0, sp, #68	; 0x44
   15e4c:	bl	11720 <__gmpz_init_set_ui@plt>
   15e50:	mov	r2, #1
   15e54:	mov	r3, #0
   15e58:	mov	r8, r2
   15e5c:	mov	r9, r3
   15e60:	strd	r2, [sp, #16]
   15e64:	mov	r1, #1
   15e68:	mov	r0, r6
   15e6c:	bl	11780 <__gmpz_cmp_ui@plt>
   15e70:	cmp	r0, #0
   15e74:	beq	1607c <__assert_fail@plt+0x489c>
   15e78:	mov	r2, r5
   15e7c:	mov	r1, r5
   15e80:	mov	r0, r4
   15e84:	bl	11510 <__gmpz_mul@plt>
   15e88:	mov	r2, r6
   15e8c:	mov	r1, r4
   15e90:	mov	r0, r5
   15e94:	bl	11714 <__gmpz_mod@plt>
   15e98:	mov	r2, sl
   15e9c:	mov	r1, r5
   15ea0:	mov	r0, r5
   15ea4:	bl	115f4 <__gmpz_add_ui@plt>
   15ea8:	mov	r2, r5
   15eac:	mov	r1, r7
   15eb0:	mov	r0, r4
   15eb4:	bl	11480 <__gmpz_sub@plt>
   15eb8:	mov	r2, r4
   15ebc:	add	r1, sp, #68	; 0x44
   15ec0:	add	r0, sp, #92	; 0x5c
   15ec4:	bl	11510 <__gmpz_mul@plt>
   15ec8:	mov	r2, r6
   15ecc:	add	r1, sp, #92	; 0x5c
   15ed0:	add	r0, sp, #68	; 0x44
   15ed4:	bl	11714 <__gmpz_mod@plt>
   15ed8:	mov	r3, #0
   15edc:	and	r2, r8, #31
   15ee0:	cmp	r3, #0
   15ee4:	cmpeq	r2, #1
   15ee8:	bne	15f1c <__assert_fail@plt+0x473c>
   15eec:	mov	r2, r6
   15ef0:	add	r1, sp, #68	; 0x44
   15ef4:	mov	r0, r4
   15ef8:	bl	1175c <__gmpz_gcd@plt>
   15efc:	mov	r1, #1
   15f00:	mov	r0, r4
   15f04:	bl	11780 <__gmpz_cmp_ui@plt>
   15f08:	cmp	r0, #0
   15f0c:	bne	15fac <__assert_fail@plt+0x47cc>
   15f10:	mov	r1, r5
   15f14:	add	r0, sp, #56	; 0x38
   15f18:	bl	114f8 <__gmpz_set@plt>
   15f1c:	subs	r8, r8, #1
   15f20:	sbc	r9, r9, #0
   15f24:	orrs	r3, r8, r9
   15f28:	bne	15e78 <__assert_fail@plt+0x4698>
   15f2c:	mov	r1, r5
   15f30:	mov	r0, r7
   15f34:	bl	114f8 <__gmpz_set@plt>
   15f38:	ldrd	r2, [sp, #16]
   15f3c:	adds	r2, r2, r2
   15f40:	adc	r3, r3, r3
   15f44:	strd	r2, [sp, #24]
   15f48:	ldrd	r2, [sp, #16]
   15f4c:	cmp	r9, r3
   15f50:	cmpeq	r8, r2
   15f54:	bne	15f70 <__assert_fail@plt+0x4790>
   15f58:	mov	r1, r5
   15f5c:	add	r0, sp, #56	; 0x38
   15f60:	bl	114f8 <__gmpz_set@plt>
   15f64:	ldrd	r2, [sp, #24]
   15f68:	strd	r2, [sp, #16]
   15f6c:	b	15e78 <__assert_fail@plt+0x4698>
   15f70:	mov	r2, r5
   15f74:	mov	r1, r5
   15f78:	mov	r0, r4
   15f7c:	bl	11510 <__gmpz_mul@plt>
   15f80:	mov	r2, r6
   15f84:	mov	r1, r4
   15f88:	mov	r0, r5
   15f8c:	bl	11714 <__gmpz_mod@plt>
   15f90:	mov	r2, sl
   15f94:	mov	r1, r5
   15f98:	mov	r0, r5
   15f9c:	bl	115f4 <__gmpz_add_ui@plt>
   15fa0:	adds	r8, r8, #1
   15fa4:	adc	r9, r9, #0
   15fa8:	b	15f48 <__assert_fail@plt+0x4768>
   15fac:	add	r2, sp, #56	; 0x38
   15fb0:	mov	r1, r2
   15fb4:	mov	r0, r4
   15fb8:	bl	11510 <__gmpz_mul@plt>
   15fbc:	mov	r2, r6
   15fc0:	mov	r1, r4
   15fc4:	add	r0, sp, #56	; 0x38
   15fc8:	bl	11714 <__gmpz_mod@plt>
   15fcc:	add	r1, sp, #56	; 0x38
   15fd0:	mov	r0, r1
   15fd4:	mov	r2, sl
   15fd8:	bl	115f4 <__gmpz_add_ui@plt>
   15fdc:	add	r2, sp, #56	; 0x38
   15fe0:	mov	r1, r7
   15fe4:	mov	r0, r4
   15fe8:	bl	11480 <__gmpz_sub@plt>
   15fec:	mov	r2, r6
   15ff0:	mov	r1, r4
   15ff4:	mov	r0, r4
   15ff8:	bl	1175c <__gmpz_gcd@plt>
   15ffc:	mov	r1, #1
   16000:	mov	r0, r4
   16004:	bl	11780 <__gmpz_cmp_ui@plt>
   16008:	cmp	r0, #0
   1600c:	beq	15fac <__assert_fail@plt+0x47cc>
   16010:	mov	r2, r4
   16014:	mov	r1, r6
   16018:	mov	r0, r6
   1601c:	bl	114e0 <__gmpz_divexact@plt>
   16020:	mov	r0, r4
   16024:	bl	15bdc <__assert_fail@plt+0x43fc>
   16028:	cmp	r0, #0
   1602c:	bne	160b0 <__assert_fail@plt+0x48d0>
   16030:	ldr	r3, [pc, #188]	; 160f4 <__assert_fail@plt+0x4914>
   16034:	ldrb	r3, [r3, #8]
   16038:	cmp	r3, #0
   1603c:	beq	16050 <__assert_fail@plt+0x4870>
   16040:	ldr	r3, [pc, #176]	; 160f8 <__assert_fail@plt+0x4918>
   16044:	ldr	r0, [pc, #180]	; 16100 <__assert_fail@plt+0x4920>
   16048:	ldr	r1, [r3]
   1604c:	bl	117b0 <fputs@plt>
   16050:	mov	r2, fp
   16054:	add	r1, sl, #1
   16058:	mov	r0, r4
   1605c:	bl	15dc8 <__assert_fail@plt+0x45e8>
   16060:	mov	r0, r6
   16064:	bl	15bdc <__assert_fail@plt+0x43fc>
   16068:	cmp	r0, #0
   1606c:	beq	160c0 <__assert_fail@plt+0x48e0>
   16070:	mov	r1, r6
   16074:	mov	r0, fp
   16078:	bl	12d58 <__assert_fail@plt+0x1578>
   1607c:	mov	r3, #0
   16080:	str	r3, [sp, #8]
   16084:	add	r3, sp, #56	; 0x38
   16088:	str	r3, [sp, #4]
   1608c:	add	r3, sp, #32
   16090:	str	r3, [sp]
   16094:	add	r2, sp, #80	; 0x50
   16098:	add	r3, sp, #44	; 0x2c
   1609c:	add	r1, sp, #92	; 0x5c
   160a0:	add	r0, sp, #68	; 0x44
   160a4:	bl	1142c <__gmpz_clears@plt>
   160a8:	add	sp, sp, #108	; 0x6c
   160ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160b0:	mov	r1, r4
   160b4:	mov	r0, fp
   160b8:	bl	12d58 <__assert_fail@plt+0x1578>
   160bc:	b	16060 <__assert_fail@plt+0x4880>
   160c0:	mov	r2, r6
   160c4:	mov	r1, r5
   160c8:	mov	r0, r5
   160cc:	bl	11714 <__gmpz_mod@plt>
   160d0:	mov	r2, r6
   160d4:	mov	r1, r7
   160d8:	mov	r0, r7
   160dc:	bl	11714 <__gmpz_mod@plt>
   160e0:	add	r1, sp, #56	; 0x38
   160e4:	mov	r2, r6
   160e8:	mov	r0, r1
   160ec:	bl	11714 <__gmpz_mod@plt>
   160f0:	b	15e64 <__assert_fail@plt+0x4684>
   160f4:	andeq	r1, r3, ip, ror #3
   160f8:	ldrdeq	r1, [r3], -r8
   160fc:	andeq	pc, r1, ip, ror #12
   16100:	andeq	pc, r1, r1, lsl #13
   16104:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16108:	mov	r3, r0
   1610c:	sub	sp, sp, #292	; 0x124
   16110:	mov	sl, r0
   16114:	mov	r9, r3
   16118:	ldrb	r2, [r3], #1
   1611c:	cmp	r2, #32
   16120:	beq	16114 <__assert_fail@plt+0x4934>
   16124:	cmp	r2, #43	; 0x2b
   16128:	addeq	r9, r9, #1
   1612c:	mov	r2, r9
   16130:	mov	r3, #4
   16134:	mov	r1, #0
   16138:	ldrb	r8, [r2], #1
   1613c:	cmp	r8, #0
   16140:	beq	1633c <__assert_fail@plt+0x4b5c>
   16144:	sub	r8, r8, #48	; 0x30
   16148:	cmp	r8, #9
   1614c:	mov	r3, r1
   16150:	bls	16138 <__assert_fail@plt+0x4958>
   16154:	mov	r2, #5
   16158:	ldr	r1, [pc, #920]	; 164f8 <__assert_fail@plt+0x4d18>
   1615c:	mov	r0, #0
   16160:	bl	114bc <dcgettext@plt>
   16164:	mov	r4, r0
   16168:	mov	r0, sl
   1616c:	bl	18a30 <__assert_fail@plt+0x7250>
   16170:	mov	r1, #0
   16174:	mov	r2, r4
   16178:	mov	r3, r0
   1617c:	mov	r0, r1
   16180:	bl	115ac <error@plt>
   16184:	mov	r0, #0
   16188:	add	sp, sp, #292	; 0x124
   1618c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16190:	ldrb	sl, [lr], #1
   16194:	cmp	sl, #0
   16198:	bne	16234 <__assert_fail@plt+0x4a54>
   1619c:	cmp	r6, #0
   161a0:	sbcs	r3, r7, #0
   161a4:	blt	162b8 <__assert_fail@plt+0x4ad8>
   161a8:	ldr	r8, [pc, #844]	; 164fc <__assert_fail@plt+0x4d1c>
   161ac:	ldrb	r3, [r8, #8]
   161b0:	cmp	r3, #0
   161b4:	beq	161c8 <__assert_fail@plt+0x49e8>
   161b8:	ldr	r3, [pc, #832]	; 16500 <__assert_fail@plt+0x4d20>
   161bc:	ldr	r0, [pc, #832]	; 16504 <__assert_fail@plt+0x4d24>
   161c0:	ldr	r1, [r3]
   161c4:	bl	117b0 <fputs@plt>
   161c8:	mov	r2, r4
   161cc:	mov	r3, r5
   161d0:	mov	r0, r6
   161d4:	mov	r1, r7
   161d8:	bl	12c1c <__assert_fail@plt+0x143c>
   161dc:	ldr	r3, [r8, #4]
   161e0:	add	r9, sp, #32
   161e4:	add	r2, r3, #1
   161e8:	str	r2, [r8, #4]
   161ec:	mov	r2, #58	; 0x3a
   161f0:	strb	r2, [r3]
   161f4:	mov	r0, r6
   161f8:	mov	r2, r4
   161fc:	mov	r3, r5
   16200:	str	r9, [sp]
   16204:	mov	r1, r7
   16208:	bl	13f7c <__assert_fail@plt+0x279c>
   1620c:	mov	r4, sl
   16210:	mov	fp, #32
   16214:	mov	r3, #0
   16218:	ldrb	r2, [sp, #282]	; 0x11a
   1621c:	cmp	r4, r2
   16220:	bcs	163a4 <__assert_fail@plt+0x4bc4>
   16224:	add	r7, r9, r4, lsl #3
   16228:	mov	r5, sl
   1622c:	add	r6, r9, r4
   16230:	b	16390 <__assert_fail@plt+0x4bb0>
   16234:	add	r3, pc, #692	; 0x2b4
   16238:	ldrd	r2, [r3]
   1623c:	sub	sl, sl, #48	; 0x30
   16240:	cmp	r7, r3
   16244:	cmpeq	r6, r2
   16248:	bhi	162b8 <__assert_fail@plt+0x4ad8>
   1624c:	umull	r0, r1, r4, ip
   16250:	umull	r2, r3, r6, ip
   16254:	mla	r1, ip, r5, r1
   16258:	lsr	fp, r5, #31
   1625c:	adds	r4, r4, r4
   16260:	add	r6, fp, r5, lsr #29
   16264:	adc	r5, r5, r5
   16268:	cmp	r1, r5
   1626c:	cmpeq	r0, r4
   16270:	mla	r3, ip, r7, r3
   16274:	movcc	fp, #1
   16278:	mov	r7, #0
   1627c:	movcs	fp, #0
   16280:	adds	r4, r0, sl
   16284:	adc	r5, r1, r7
   16288:	cmp	r7, r5
   1628c:	cmpeq	sl, r4
   16290:	add	fp, fp, r6
   16294:	movhi	r0, #1
   16298:	movls	r0, #0
   1629c:	add	r0, r0, fp
   162a0:	adds	r6, r2, r0
   162a4:	mov	r1, #0
   162a8:	adc	r7, r3, r1
   162ac:	cmp	r1, r7
   162b0:	cmpeq	r0, r6
   162b4:	bls	16190 <__assert_fail@plt+0x49b0>
   162b8:	ldr	r3, [pc, #572]	; 164fc <__assert_fail@plt+0x4d1c>
   162bc:	ldrb	r3, [r3, #8]
   162c0:	cmp	r3, #0
   162c4:	beq	162d8 <__assert_fail@plt+0x4af8>
   162c8:	ldr	r3, [pc, #560]	; 16500 <__assert_fail@plt+0x4d20>
   162cc:	ldr	r0, [pc, #564]	; 16508 <__assert_fail@plt+0x4d28>
   162d0:	ldr	r1, [r3]
   162d4:	bl	117b0 <fputs@plt>
   162d8:	ldr	r4, [pc, #556]	; 1650c <__assert_fail@plt+0x4d2c>
   162dc:	mov	r1, r9
   162e0:	mov	r2, #10
   162e4:	add	r0, sp, #20
   162e8:	bl	11768 <__gmpz_init_set_str@plt>
   162ec:	add	r2, sp, #20
   162f0:	mov	r1, #10
   162f4:	ldr	r0, [r4]
   162f8:	bl	11540 <__gmpz_out_str@plt>
   162fc:	mov	r0, #58	; 0x3a
   16300:	bl	117d4 <putchar_unlocked@plt>
   16304:	add	r1, sp, #32
   16308:	add	r0, sp, #20
   1630c:	bl	15a24 <__assert_fail@plt+0x4244>
   16310:	mov	r6, r8
   16314:	mov	r9, #12
   16318:	mov	r3, #32
   1631c:	mov	fp, #10
   16320:	ldr	r2, [sp, #40]	; 0x28
   16324:	cmp	r6, r2
   16328:	bcs	164c8 <__assert_fail@plt+0x4ce8>
   1632c:	lsl	sl, r6, #2
   16330:	mul	r7, r9, r6
   16334:	mov	r5, r8
   16338:	b	164b0 <__assert_fail@plt+0x4cd0>
   1633c:	mov	r4, #0
   16340:	mov	r5, #0
   16344:	cmp	r3, #0
   16348:	mov	lr, r9
   1634c:	mov	r6, r4
   16350:	mov	r7, r5
   16354:	mov	ip, #10
   16358:	beq	16190 <__assert_fail@plt+0x49b0>
   1635c:	cmp	r3, #1
   16360:	bne	16154 <__assert_fail@plt+0x4974>
   16364:	b	162b8 <__assert_fail@plt+0x4ad8>
   16368:	ldr	r2, [r8, #4]
   1636c:	str	r3, [sp, #12]
   16370:	add	r1, r2, #1
   16374:	strb	fp, [r2]
   16378:	str	r1, [r8, #4]
   1637c:	mov	r2, r3
   16380:	ldrd	r0, [r7, #16]
   16384:	bl	12b9c <__assert_fail@plt+0x13bc>
   16388:	ldr	r3, [sp, #12]
   1638c:	add	r5, r5, #1
   16390:	ldrb	r2, [r6, #224]	; 0xe0
   16394:	cmp	r5, r2
   16398:	bcc	16368 <__assert_fail@plt+0x4b88>
   1639c:	add	r4, r4, #1
   163a0:	b	16218 <__assert_fail@plt+0x4a38>
   163a4:	ldrd	r2, [sp, #40]	; 0x28
   163a8:	orrs	r3, r2, r3
   163ac:	beq	163d0 <__assert_fail@plt+0x4bf0>
   163b0:	ldr	r3, [r8, #4]
   163b4:	add	r2, r3, #1
   163b8:	str	r2, [r8, #4]
   163bc:	mov	r2, #32
   163c0:	strb	r2, [r3]
   163c4:	ldrd	r0, [sp, #40]	; 0x28
   163c8:	ldrd	r2, [r9]
   163cc:	bl	12c1c <__assert_fail@plt+0x143c>
   163d0:	ldr	r3, [r8, #4]
   163d4:	ldr	r6, [pc, #308]	; 16510 <__assert_fail@plt+0x4d30>
   163d8:	mov	r2, #10
   163dc:	add	r5, r3, #1
   163e0:	strb	r2, [r3]
   163e4:	ldr	r3, [r6]
   163e8:	ldr	r4, [r8]
   163ec:	cmn	r3, #1
   163f0:	str	r5, [r8, #4]
   163f4:	sub	r7, r5, r4
   163f8:	bne	16420 <__assert_fail@plt+0x4c40>
   163fc:	mov	r0, #0
   16400:	bl	117a4 <isatty@plt>
   16404:	cmp	r0, #0
   16408:	mov	r0, #1
   1640c:	bne	1641c <__assert_fail@plt+0x4c3c>
   16410:	bl	117a4 <isatty@plt>
   16414:	adds	r0, r0, #0
   16418:	movne	r0, #1
   1641c:	str	r0, [r6]
   16420:	ldr	r3, [r6]
   16424:	cmp	r3, #0
   16428:	beq	16438 <__assert_fail@plt+0x4c58>
   1642c:	bl	12e5c <__assert_fail@plt+0x167c>
   16430:	mov	r0, #1
   16434:	b	16188 <__assert_fail@plt+0x49a8>
   16438:	cmp	r7, #512	; 0x200
   1643c:	addcs	r4, r4, #512	; 0x200
   16440:	bcc	16430 <__assert_fail@plt+0x4c50>
   16444:	ldrb	r3, [r4, #-1]
   16448:	sub	r2, r4, #1
   1644c:	cmp	r3, #10
   16450:	bne	16480 <__assert_fail@plt+0x4ca0>
   16454:	str	r4, [r8, #4]
   16458:	bl	12e5c <__assert_fail@plt+0x167c>
   1645c:	ldr	r3, [r8]
   16460:	sub	r5, r5, r4
   16464:	mov	r2, r5
   16468:	mov	r1, r4
   1646c:	mov	r0, r3
   16470:	bl	11474 <memcpy@plt>
   16474:	add	r5, r0, r5
   16478:	str	r5, [r8, #4]
   1647c:	b	16430 <__assert_fail@plt+0x4c50>
   16480:	mov	r4, r2
   16484:	b	16444 <__assert_fail@plt+0x4c64>
   16488:	mov	r0, r3
   1648c:	str	r3, [sp, #12]
   16490:	bl	117d4 <putchar_unlocked@plt>
   16494:	ldr	r2, [sp, #32]
   16498:	mov	r1, fp
   1649c:	add	r2, r2, r7
   164a0:	ldr	r0, [r4]
   164a4:	bl	11540 <__gmpz_out_str@plt>
   164a8:	ldr	r3, [sp, #12]
   164ac:	add	r5, r5, #1
   164b0:	ldr	r2, [sp, #36]	; 0x24
   164b4:	ldr	r2, [r2, sl]
   164b8:	cmp	r5, r2
   164bc:	bcc	16488 <__assert_fail@plt+0x4ca8>
   164c0:	add	r6, r6, #1
   164c4:	b	16320 <__assert_fail@plt+0x4b40>
   164c8:	add	r0, sp, #32
   164cc:	bl	11f78 <__assert_fail@plt+0x798>
   164d0:	add	r0, sp, #20
   164d4:	bl	11660 <__gmpz_clear@plt>
   164d8:	mov	r0, #10
   164dc:	bl	117d4 <putchar_unlocked@plt>
   164e0:	ldr	r0, [r4]
   164e4:	bl	1154c <fflush_unlocked@plt>
   164e8:	b	16430 <__assert_fail@plt+0x4c50>
   164ec:	nop			; (mov r0, r0)
   164f0:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   164f4:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   164f8:	ldrdeq	pc, [r1], -r2
   164fc:	andeq	r1, r3, ip, ror #3
   16500:	ldrdeq	r1, [r3], -r8
   16504:	andeq	pc, r1, sp, lsr #13
   16508:	strdeq	pc, [r1], -r5
   1650c:	andeq	r1, r3, r4, ror #3
   16510:	andeq	r1, r3, ip, ror r1
   16514:	subs	r5, r0, #0
   16518:	push	{r7, lr}
   1651c:	sub	sp, sp, #56	; 0x38
   16520:	ldr	r4, [pc, #456]	; 166f0 <__assert_fail@plt+0x4f10>
   16524:	beq	1655c <__assert_fail@plt+0x4d7c>
   16528:	ldr	r3, [pc, #452]	; 166f4 <__assert_fail@plt+0x4f14>
   1652c:	mov	r2, #5
   16530:	ldr	r1, [pc, #448]	; 166f8 <__assert_fail@plt+0x4f18>
   16534:	mov	r0, #0
   16538:	ldr	r6, [r3]
   1653c:	bl	114bc <dcgettext@plt>
   16540:	ldr	r3, [r4]
   16544:	mov	r1, #1
   16548:	mov	r2, r0
   1654c:	mov	r0, r6
   16550:	bl	116d8 <__fprintf_chk@plt>
   16554:	mov	r0, r5
   16558:	bl	11624 <exit@plt>
   1655c:	mov	r2, #5
   16560:	ldr	r1, [pc, #404]	; 166fc <__assert_fail@plt+0x4f1c>
   16564:	bl	114bc <dcgettext@plt>
   16568:	ldr	r3, [r4]
   1656c:	ldr	r4, [pc, #396]	; 16700 <__assert_fail@plt+0x4f20>
   16570:	mov	r2, r3
   16574:	ldr	r8, [pc, #392]	; 16704 <__assert_fail@plt+0x4f24>
   16578:	mov	r6, r5
   1657c:	mov	r1, r0
   16580:	mov	r0, #1
   16584:	bl	116b4 <__printf_chk@plt>
   16588:	mov	r2, #5
   1658c:	ldr	r1, [pc, #372]	; 16708 <__assert_fail@plt+0x4f28>
   16590:	mov	r0, r5
   16594:	bl	114bc <dcgettext@plt>
   16598:	ldr	r1, [r4]
   1659c:	bl	113cc <fputs_unlocked@plt>
   165a0:	mov	r2, #5
   165a4:	ldr	r1, [pc, #352]	; 1670c <__assert_fail@plt+0x4f2c>
   165a8:	mov	r0, r5
   165ac:	bl	114bc <dcgettext@plt>
   165b0:	ldr	r1, [r4]
   165b4:	bl	113cc <fputs_unlocked@plt>
   165b8:	mov	r2, #5
   165bc:	ldr	r1, [pc, #332]	; 16710 <__assert_fail@plt+0x4f30>
   165c0:	mov	r0, r5
   165c4:	bl	114bc <dcgettext@plt>
   165c8:	ldr	r1, [r4]
   165cc:	bl	113cc <fputs_unlocked@plt>
   165d0:	ldr	lr, [pc, #316]	; 16714 <__assert_fail@plt+0x4f34>
   165d4:	mov	ip, sp
   165d8:	ldm	lr!, {r0, r1, r2, r3}
   165dc:	stmia	ip!, {r0, r1, r2, r3}
   165e0:	ldm	lr!, {r0, r1, r2, r3}
   165e4:	stmia	ip!, {r0, r1, r2, r3}
   165e8:	ldm	lr!, {r0, r1, r2, r3}
   165ec:	stmia	ip!, {r0, r1, r2, r3}
   165f0:	ldm	lr, {r0, r1}
   165f4:	stm	ip, {r0, r1}
   165f8:	ldr	r1, [sp, r6]
   165fc:	add	r7, sp, r6
   16600:	cmp	r1, #0
   16604:	bne	166a8 <__assert_fail@plt+0x4ec8>
   16608:	ldr	r6, [r7, #4]
   1660c:	ldr	r7, [pc, #240]	; 16704 <__assert_fail@plt+0x4f24>
   16610:	cmp	r6, #0
   16614:	mov	r2, #5
   16618:	ldr	r1, [pc, #248]	; 16718 <__assert_fail@plt+0x4f38>
   1661c:	mov	r0, #0
   16620:	moveq	r6, r7
   16624:	bl	114bc <dcgettext@plt>
   16628:	ldr	r3, [pc, #236]	; 1671c <__assert_fail@plt+0x4f3c>
   1662c:	ldr	r2, [pc, #236]	; 16720 <__assert_fail@plt+0x4f40>
   16630:	mov	r1, r0
   16634:	mov	r0, #1
   16638:	bl	116b4 <__printf_chk@plt>
   1663c:	mov	r1, #0
   16640:	mov	r0, #5
   16644:	bl	11738 <setlocale@plt>
   16648:	cmp	r0, #0
   1664c:	bne	166c0 <__assert_fail@plt+0x4ee0>
   16650:	mov	r2, #5
   16654:	ldr	r1, [pc, #200]	; 16724 <__assert_fail@plt+0x4f44>
   16658:	mov	r0, #0
   1665c:	bl	114bc <dcgettext@plt>
   16660:	ldr	r3, [pc, #156]	; 16704 <__assert_fail@plt+0x4f24>
   16664:	ldr	r2, [pc, #176]	; 1671c <__assert_fail@plt+0x4f3c>
   16668:	mov	r1, r0
   1666c:	mov	r0, #1
   16670:	bl	116b4 <__printf_chk@plt>
   16674:	mov	r2, #5
   16678:	ldr	r1, [pc, #168]	; 16728 <__assert_fail@plt+0x4f48>
   1667c:	mov	r0, #0
   16680:	bl	114bc <dcgettext@plt>
   16684:	ldr	r2, [pc, #160]	; 1672c <__assert_fail@plt+0x4f4c>
   16688:	cmp	r6, r7
   1668c:	ldr	r3, [pc, #156]	; 16730 <__assert_fail@plt+0x4f50>
   16690:	moveq	r3, r2
   16694:	mov	r2, r6
   16698:	mov	r1, r0
   1669c:	mov	r0, #1
   166a0:	bl	116b4 <__printf_chk@plt>
   166a4:	b	16554 <__assert_fail@plt+0x4d74>
   166a8:	mov	r0, r8
   166ac:	bl	11408 <strcmp@plt>
   166b0:	add	r6, r6, #8
   166b4:	cmp	r0, #0
   166b8:	bne	165f8 <__assert_fail@plt+0x4e18>
   166bc:	b	16608 <__assert_fail@plt+0x4e28>
   166c0:	mov	r2, #3
   166c4:	ldr	r1, [pc, #104]	; 16734 <__assert_fail@plt+0x4f54>
   166c8:	bl	117bc <strncmp@plt>
   166cc:	cmp	r0, #0
   166d0:	beq	16650 <__assert_fail@plt+0x4e70>
   166d4:	mov	r2, #5
   166d8:	ldr	r1, [pc, #88]	; 16738 <__assert_fail@plt+0x4f58>
   166dc:	mov	r0, #0
   166e0:	bl	114bc <dcgettext@plt>
   166e4:	ldr	r1, [r4]
   166e8:	bl	113cc <fputs_unlocked@plt>
   166ec:	b	16650 <__assert_fail@plt+0x4e70>
   166f0:	andeq	r1, r3, r0, lsl #4
   166f4:	ldrdeq	r1, [r3], -r8
   166f8:	andeq	pc, r1, r4, lsr #14
   166fc:	andeq	pc, r1, fp, asr #14
   16700:	andeq	r1, r3, r4, ror #3
   16704:	andeq	pc, r1, sp, lsl r7	; <UNPREDICTABLE>
   16708:	andeq	pc, r1, r3, ror r7	; <UNPREDICTABLE>
   1670c:	strdeq	pc, [r1], -sl
   16710:	andeq	pc, r1, r7, lsr #16
   16714:	andeq	pc, r1, r4, ror #9
   16718:	andeq	pc, r1, sp, asr r8	; <UNPREDICTABLE>
   1671c:	andeq	pc, r1, r4, ror r8	; <UNPREDICTABLE>
   16720:	muleq	r1, ip, r8
   16724:	strdeq	pc, [r1], -r5
   16728:	andeq	pc, r1, r0, lsl r9	; <UNPREDICTABLE>
   1672c:	andeq	pc, r1, r6, asr #19
   16730:	strdeq	pc, [r1], -r9
   16734:	andeq	pc, r1, sl, lsr #17
   16738:	andeq	pc, r1, lr, lsr #17
   1673c:	ldr	r3, [pc, #4]	; 16748 <__assert_fail@plt+0x4f68>
   16740:	str	r0, [r3]
   16744:	bx	lr
   16748:	strdeq	r1, [r3], -r8
   1674c:	ldr	r3, [pc, #4]	; 16758 <__assert_fail@plt+0x4f78>
   16750:	strb	r0, [r3, #4]
   16754:	bx	lr
   16758:	strdeq	r1, [r3], -r8
   1675c:	ldr	r3, [pc, #192]	; 16824 <__assert_fail@plt+0x5044>
   16760:	push	{r0, r1, r4, r5, r6, lr}
   16764:	ldr	r0, [r3]
   16768:	bl	19d98 <__assert_fail@plt+0x85b8>
   1676c:	cmp	r0, #0
   16770:	beq	16808 <__assert_fail@plt+0x5028>
   16774:	ldr	r3, [pc, #172]	; 16828 <__assert_fail@plt+0x5048>
   16778:	mov	r4, r3
   1677c:	ldrb	r2, [r3, #4]
   16780:	cmp	r2, #0
   16784:	beq	16798 <__assert_fail@plt+0x4fb8>
   16788:	bl	1166c <__errno_location@plt>
   1678c:	ldr	r3, [r0]
   16790:	cmp	r3, #32
   16794:	beq	16808 <__assert_fail@plt+0x5028>
   16798:	mov	r2, #5
   1679c:	ldr	r1, [pc, #136]	; 1682c <__assert_fail@plt+0x504c>
   167a0:	mov	r0, #0
   167a4:	bl	114bc <dcgettext@plt>
   167a8:	ldr	r4, [r4]
   167ac:	cmp	r4, #0
   167b0:	mov	r5, r0
   167b4:	beq	167ec <__assert_fail@plt+0x500c>
   167b8:	bl	1166c <__errno_location@plt>
   167bc:	ldr	r6, [r0]
   167c0:	mov	r0, r4
   167c4:	bl	188e0 <__assert_fail@plt+0x7100>
   167c8:	str	r5, [sp]
   167cc:	ldr	r2, [pc, #92]	; 16830 <__assert_fail@plt+0x5050>
   167d0:	mov	r1, r6
   167d4:	mov	r3, r0
   167d8:	mov	r0, #0
   167dc:	bl	115ac <error@plt>
   167e0:	ldr	r3, [pc, #76]	; 16834 <__assert_fail@plt+0x5054>
   167e4:	ldr	r0, [r3]
   167e8:	bl	11468 <_exit@plt>
   167ec:	bl	1166c <__errno_location@plt>
   167f0:	mov	r3, r5
   167f4:	ldr	r2, [pc, #60]	; 16838 <__assert_fail@plt+0x5058>
   167f8:	ldr	r1, [r0]
   167fc:	mov	r0, r4
   16800:	bl	115ac <error@plt>
   16804:	b	167e0 <__assert_fail@plt+0x5000>
   16808:	ldr	r3, [pc, #44]	; 1683c <__assert_fail@plt+0x505c>
   1680c:	ldr	r0, [r3]
   16810:	bl	19d98 <__assert_fail@plt+0x85b8>
   16814:	cmp	r0, #0
   16818:	bne	167e0 <__assert_fail@plt+0x5000>
   1681c:	add	sp, sp, #8
   16820:	pop	{r4, r5, r6, pc}
   16824:	andeq	r1, r3, r4, ror #3
   16828:	strdeq	r1, [r3], -r8
   1682c:	andeq	pc, r1, r6, asr #11
   16830:	andeq	pc, r1, ip, lsr #20
   16834:	andeq	r1, r3, r4, lsl #3
   16838:	andeq	pc, r1, r0, lsr sl	; <UNPREDICTABLE>
   1683c:	ldrdeq	r1, [r3], -r8
   16840:	push	{r0, r1, r2, r4, r5, lr}
   16844:	mov	r5, r0
   16848:	bl	1166c <__errno_location@plt>
   1684c:	ldr	r3, [r0]
   16850:	mov	r4, r0
   16854:	str	r3, [sp]
   16858:	str	r3, [sp, #4]
   1685c:	mov	r3, #0
   16860:	str	r3, [r0]
   16864:	mov	r0, r5
   16868:	bl	1145c <free@plt>
   1686c:	ldr	r3, [r4]
   16870:	add	r2, sp, #8
   16874:	cmp	r3, #0
   16878:	moveq	r3, #4
   1687c:	movne	r3, #0
   16880:	add	r3, r2, r3
   16884:	ldr	r3, [r3, #-8]
   16888:	str	r3, [r4]
   1688c:	add	sp, sp, #12
   16890:	pop	{r4, r5, pc}
   16894:	push	{r4, r5, r6, r7, r8, lr}
   16898:	mov	r7, r0
   1689c:	mov	r4, r2
   168a0:	mov	r6, r1
   168a4:	mov	r5, #0
   168a8:	cmp	r4, #0
   168ac:	beq	168dc <__assert_fail@plt+0x50fc>
   168b0:	mov	r2, r4
   168b4:	mov	r1, r6
   168b8:	mov	r0, r7
   168bc:	bl	18cb8 <__assert_fail@plt+0x74d8>
   168c0:	cmn	r0, #1
   168c4:	beq	168dc <__assert_fail@plt+0x50fc>
   168c8:	cmp	r0, #0
   168cc:	bne	168e4 <__assert_fail@plt+0x5104>
   168d0:	bl	1166c <__errno_location@plt>
   168d4:	mov	r3, #28
   168d8:	str	r3, [r0]
   168dc:	mov	r0, r5
   168e0:	pop	{r4, r5, r6, r7, r8, pc}
   168e4:	add	r5, r5, r0
   168e8:	add	r6, r6, r0
   168ec:	sub	r4, r4, r0
   168f0:	b	168a8 <__assert_fail@plt+0x50c8>
   168f4:	push	{r4, r5, r6, r8, r9, lr}
   168f8:	mov	r4, r0
   168fc:	mov	r5, r1
   16900:	add	r6, r2, #20
   16904:	mov	r8, #10
   16908:	mov	r9, #0
   1690c:	mov	r3, #0
   16910:	strb	r3, [r2, #20]
   16914:	mov	r0, r4
   16918:	mov	r1, r5
   1691c:	mov	r2, r8
   16920:	mov	r3, r9
   16924:	bl	1c2a0 <__assert_fail@plt+0xaac0>
   16928:	mov	r3, r9
   1692c:	mov	r0, r4
   16930:	mov	r1, r5
   16934:	add	r2, r2, #48	; 0x30
   16938:	strb	r2, [r6, #-1]!
   1693c:	mov	r2, r8
   16940:	bl	1c2a0 <__assert_fail@plt+0xaac0>
   16944:	mov	r4, r0
   16948:	mov	r5, r1
   1694c:	orrs	r3, r4, r5
   16950:	bne	16914 <__assert_fail@plt+0x5134>
   16954:	mov	r0, r6
   16958:	pop	{r4, r5, r6, r8, r9, pc}
   1695c:	push	{r4, r5, r6, lr}
   16960:	subs	r5, r0, #0
   16964:	bne	1697c <__assert_fail@plt+0x519c>
   16968:	ldr	r3, [pc, #124]	; 169ec <__assert_fail@plt+0x520c>
   1696c:	ldr	r0, [pc, #124]	; 169f0 <__assert_fail@plt+0x5210>
   16970:	ldr	r1, [r3]
   16974:	bl	117b0 <fputs@plt>
   16978:	bl	117c8 <abort@plt>
   1697c:	mov	r1, #47	; 0x2f
   16980:	bl	11744 <strrchr@plt>
   16984:	cmp	r0, #0
   16988:	addne	r4, r0, #1
   1698c:	moveq	r4, r5
   16990:	sub	r3, r4, r5
   16994:	cmp	r3, #6
   16998:	ble	169d8 <__assert_fail@plt+0x51f8>
   1699c:	mov	r2, #7
   169a0:	ldr	r1, [pc, #76]	; 169f4 <__assert_fail@plt+0x5214>
   169a4:	sub	r0, r4, #7
   169a8:	bl	117bc <strncmp@plt>
   169ac:	cmp	r0, #0
   169b0:	bne	169d8 <__assert_fail@plt+0x51f8>
   169b4:	mov	r2, #3
   169b8:	ldr	r1, [pc, #56]	; 169f8 <__assert_fail@plt+0x5218>
   169bc:	mov	r0, r4
   169c0:	bl	117bc <strncmp@plt>
   169c4:	cmp	r0, #0
   169c8:	movne	r5, r4
   169cc:	ldreq	r3, [pc, #40]	; 169fc <__assert_fail@plt+0x521c>
   169d0:	addeq	r5, r4, #3
   169d4:	streq	r5, [r3]
   169d8:	ldr	r3, [pc, #32]	; 16a00 <__assert_fail@plt+0x5220>
   169dc:	str	r5, [r3]
   169e0:	ldr	r3, [pc, #28]	; 16a04 <__assert_fail@plt+0x5224>
   169e4:	str	r5, [r3]
   169e8:	pop	{r4, r5, r6, pc}
   169ec:	ldrdeq	r1, [r3], -r8
   169f0:	andeq	pc, r1, r3, lsr sl	; <UNPREDICTABLE>
   169f4:	andeq	pc, r1, fp, ror #20
   169f8:	andeq	pc, r1, r3, ror sl	; <UNPREDICTABLE>
   169fc:	andeq	r1, r3, r8, asr #3
   16a00:	andeq	r1, r3, r0, lsl #4
   16a04:	andeq	r1, r3, ip, asr #3
   16a08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a0c:	mov	r4, r0
   16a10:	sub	sp, sp, #124	; 0x7c
   16a14:	mov	r0, r1
   16a18:	mov	r1, #2
   16a1c:	bl	18d50 <__assert_fail@plt+0x7570>
   16a20:	add	r5, sp, #12
   16a24:	mov	r7, r0
   16a28:	ldrb	r3, [r4]
   16a2c:	cmp	r3, #0
   16a30:	beq	16a48 <__assert_fail@plt+0x5268>
   16a34:	mov	r1, r7
   16a38:	mov	r0, r4
   16a3c:	bl	1aa14 <__assert_fail@plt+0x9234>
   16a40:	subs	r6, r0, #0
   16a44:	bne	16a60 <__assert_fail@plt+0x5280>
   16a48:	mov	r4, #0
   16a4c:	mov	r0, r7
   16a50:	bl	16840 <__assert_fail@plt+0x5060>
   16a54:	mov	r0, r4
   16a58:	add	sp, sp, #124	; 0x7c
   16a5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a60:	bl	1157c <__ctype_get_mb_cur_max@plt>
   16a64:	cmp	r0, #1
   16a68:	bls	17064 <__assert_fail@plt+0x5884>
   16a6c:	cmp	r4, r6
   16a70:	mov	r3, #0
   16a74:	str	r4, [sp, #24]
   16a78:	strb	r3, [sp, #8]
   16a7c:	str	r3, [sp, #12]
   16a80:	str	r3, [sp, #16]
   16a84:	strb	r3, [sp, #20]
   16a88:	ldrcc	r8, [pc, #1832]	; 171b8 <__assert_fail@plt+0x59d8>
   16a8c:	movcc	r4, #1
   16a90:	bcc	16c94 <__assert_fail@plt+0x54b4>
   16a94:	mov	sl, #1
   16a98:	add	r9, sp, #120	; 0x78
   16a9c:	mov	r2, #0
   16aa0:	ldr	fp, [pc, #1808]	; 171b8 <__assert_fail@plt+0x59d8>
   16aa4:	strb	r2, [r9, #-56]!	; 0xffffffc8
   16aa8:	add	r8, r9, #4
   16aac:	add	r9, r9, #28
   16ab0:	str	r2, [r5, #4]
   16ab4:	str	r2, [sp, #68]	; 0x44
   16ab8:	str	r6, [sp, #24]
   16abc:	str	r2, [r8, #4]
   16ac0:	strb	r2, [sp, #8]
   16ac4:	str	r2, [r5]
   16ac8:	strb	r2, [sp, #20]
   16acc:	str	r7, [sp, #80]	; 0x50
   16ad0:	strb	r2, [sp, #76]	; 0x4c
   16ad4:	ldrb	r3, [sp, #64]	; 0x40
   16ad8:	ldr	r4, [sp, #80]	; 0x50
   16adc:	cmp	r3, #0
   16ae0:	bne	16eac <__assert_fail@plt+0x56cc>
   16ae4:	ldrb	r3, [r4]
   16ae8:	lsr	r2, r3, #5
   16aec:	and	r3, r3, #31
   16af0:	ldr	r2, [fp, r2, lsl #2]
   16af4:	lsr	r3, r2, r3
   16af8:	tst	r3, #1
   16afc:	beq	16e94 <__assert_fail@plt+0x56b4>
   16b00:	mov	r3, #1
   16b04:	str	r3, [sp, #84]	; 0x54
   16b08:	ldrb	r2, [r4]
   16b0c:	str	r2, [sp, #92]	; 0x5c
   16b10:	strb	r3, [sp, #88]	; 0x58
   16b14:	ldrb	r4, [sp, #88]	; 0x58
   16b18:	mov	r3, #1
   16b1c:	strb	r3, [sp, #76]	; 0x4c
   16b20:	cmp	r4, #0
   16b24:	ldrb	r2, [sp, #20]
   16b28:	beq	17120 <__assert_fail@plt+0x5940>
   16b2c:	ldr	r1, [sp, #92]	; 0x5c
   16b30:	cmp	r1, #0
   16b34:	bne	17120 <__assert_fail@plt+0x5940>
   16b38:	cmp	r2, #0
   16b3c:	bne	16be0 <__assert_fail@plt+0x5400>
   16b40:	ldrb	r2, [sp, #8]
   16b44:	ldr	r8, [sp, #24]
   16b48:	cmp	r2, #0
   16b4c:	bne	16b98 <__assert_fail@plt+0x53b8>
   16b50:	ldrb	r2, [r8]
   16b54:	ldr	r1, [pc, #1628]	; 171b8 <__assert_fail@plt+0x59d8>
   16b58:	lsr	r0, r2, #5
   16b5c:	and	r2, r2, #31
   16b60:	ldr	r1, [r1, r0, lsl #2]
   16b64:	lsr	r2, r1, r2
   16b68:	tst	r2, #1
   16b6c:	strne	r3, [sp, #28]
   16b70:	ldrbne	r2, [r8]
   16b74:	strne	r2, [sp, #36]	; 0x24
   16b78:	bne	16bd4 <__assert_fail@plt+0x53f4>
   16b7c:	mov	r0, r5
   16b80:	str	r3, [sp, #4]
   16b84:	bl	1148c <mbsinit@plt>
   16b88:	cmp	r0, #0
   16b8c:	beq	16d00 <__assert_fail@plt+0x5520>
   16b90:	ldr	r3, [sp, #4]
   16b94:	strb	r3, [sp, #8]
   16b98:	bl	1157c <__ctype_get_mb_cur_max@plt>
   16b9c:	mov	r1, r0
   16ba0:	mov	r0, r8
   16ba4:	bl	18d24 <__assert_fail@plt+0x7544>
   16ba8:	mov	r3, r5
   16bac:	mov	r1, r8
   16bb0:	mov	r2, r0
   16bb4:	add	r0, sp, #36	; 0x24
   16bb8:	bl	1a064 <__assert_fail@plt+0x8884>
   16bbc:	cmn	r0, #1
   16bc0:	str	r0, [sp, #28]
   16bc4:	bne	16f50 <__assert_fail@plt+0x5770>
   16bc8:	mov	r3, #1
   16bcc:	str	r3, [sp, #28]
   16bd0:	mov	r3, #0
   16bd4:	strb	r3, [sp, #32]
   16bd8:	mov	r3, #1
   16bdc:	strb	r3, [sp, #20]
   16be0:	ldrb	r3, [sp, #32]
   16be4:	cmp	r3, #0
   16be8:	beq	16bfc <__assert_fail@plt+0x541c>
   16bec:	ldr	r2, [sp, #36]	; 0x24
   16bf0:	cmp	r2, #0
   16bf4:	moveq	r4, r3
   16bf8:	beq	16c18 <__assert_fail@plt+0x5438>
   16bfc:	ldrb	r3, [sp, #32]
   16c00:	cmp	r3, #0
   16c04:	beq	16c18 <__assert_fail@plt+0x5438>
   16c08:	ldr	r0, [sp, #36]	; 0x24
   16c0c:	bl	11678 <iswalnum@plt>
   16c10:	clz	r4, r0
   16c14:	lsr	r4, r4, #5
   16c18:	ands	r4, sl, r4
   16c1c:	bne	16a4c <__assert_fail@plt+0x526c>
   16c20:	str	r4, [r5, #4]
   16c24:	str	r6, [sp, #24]
   16c28:	strb	r4, [sp, #8]
   16c2c:	str	r4, [r5]
   16c30:	strb	r4, [sp, #20]
   16c34:	ldrb	r3, [r6]
   16c38:	ldr	r2, [pc, #1400]	; 171b8 <__assert_fail@plt+0x59d8>
   16c3c:	lsr	r1, r3, #5
   16c40:	and	r3, r3, #31
   16c44:	ldr	r2, [r2, r1, lsl #2]
   16c48:	lsr	r3, r2, r3
   16c4c:	tst	r3, #1
   16c50:	beq	16fb4 <__assert_fail@plt+0x57d4>
   16c54:	mov	r3, #1
   16c58:	str	r3, [sp, #28]
   16c5c:	ldrb	r2, [r6]
   16c60:	strb	r3, [sp, #32]
   16c64:	str	r2, [sp, #36]	; 0x24
   16c68:	mov	r3, #1
   16c6c:	strb	r3, [sp, #20]
   16c70:	ldrb	r3, [sp, #32]
   16c74:	cmp	r3, #0
   16c78:	beq	16c88 <__assert_fail@plt+0x54a8>
   16c7c:	ldr	r3, [sp, #36]	; 0x24
   16c80:	cmp	r3, #0
   16c84:	beq	16a4c <__assert_fail@plt+0x526c>
   16c88:	ldr	r4, [sp, #28]
   16c8c:	add	r4, r6, r4
   16c90:	b	16a28 <__assert_fail@plt+0x5248>
   16c94:	ldrb	r3, [sp, #8]
   16c98:	ldr	r9, [sp, #24]
   16c9c:	cmp	r3, #0
   16ca0:	bne	16d18 <__assert_fail@plt+0x5538>
   16ca4:	ldrb	r3, [r9]
   16ca8:	lsr	r2, r3, #5
   16cac:	and	r3, r3, #31
   16cb0:	ldr	r2, [r8, r2, lsl #2]
   16cb4:	lsr	r3, r2, r3
   16cb8:	tst	r3, #1
   16cbc:	beq	16cf0 <__assert_fail@plt+0x5510>
   16cc0:	str	r4, [sp, #28]
   16cc4:	ldrb	r3, [r9]
   16cc8:	strb	r4, [sp, #32]
   16ccc:	str	r3, [sp, #36]	; 0x24
   16cd0:	ldrb	r3, [sp, #32]
   16cd4:	strb	r4, [sp, #20]
   16cd8:	cmp	r3, #0
   16cdc:	beq	170e0 <__assert_fail@plt+0x5900>
   16ce0:	ldr	r3, [sp, #36]	; 0x24
   16ce4:	cmp	r3, #0
   16ce8:	bne	170e0 <__assert_fail@plt+0x5900>
   16cec:	bl	117c8 <abort@plt>
   16cf0:	mov	r0, r5
   16cf4:	bl	1148c <mbsinit@plt>
   16cf8:	cmp	r0, #0
   16cfc:	bne	16d14 <__assert_fail@plt+0x5534>
   16d00:	ldr	r3, [pc, #1204]	; 171bc <__assert_fail@plt+0x59dc>
   16d04:	ldr	r1, [pc, #1204]	; 171c0 <__assert_fail@plt+0x59e0>
   16d08:	ldr	r0, [pc, #1204]	; 171c4 <__assert_fail@plt+0x59e4>
   16d0c:	mov	r2, #143	; 0x8f
   16d10:	bl	117e0 <__assert_fail@plt>
   16d14:	strb	r4, [sp, #8]
   16d18:	bl	1157c <__ctype_get_mb_cur_max@plt>
   16d1c:	mov	r1, r0
   16d20:	mov	r0, r9
   16d24:	bl	18d24 <__assert_fail@plt+0x7544>
   16d28:	mov	r3, r5
   16d2c:	mov	r1, r9
   16d30:	mov	r2, r0
   16d34:	add	r0, sp, #36	; 0x24
   16d38:	bl	1a064 <__assert_fail@plt+0x8884>
   16d3c:	cmn	r0, #1
   16d40:	str	r0, [sp, #28]
   16d44:	streq	r4, [sp, #28]
   16d48:	beq	16d60 <__assert_fail@plt+0x5580>
   16d4c:	cmn	r0, #2
   16d50:	bne	16d6c <__assert_fail@plt+0x558c>
   16d54:	ldr	r0, [sp, #24]
   16d58:	bl	1163c <strlen@plt>
   16d5c:	str	r0, [sp, #28]
   16d60:	mov	r3, #0
   16d64:	strb	r3, [sp, #32]
   16d68:	b	16cd0 <__assert_fail@plt+0x54f0>
   16d6c:	cmp	r0, #0
   16d70:	bne	16dbc <__assert_fail@plt+0x55dc>
   16d74:	ldr	r3, [sp, #24]
   16d78:	str	r4, [sp, #28]
   16d7c:	ldrb	r3, [r3]
   16d80:	cmp	r3, #0
   16d84:	beq	16d9c <__assert_fail@plt+0x55bc>
   16d88:	ldr	r3, [pc, #1068]	; 171bc <__assert_fail@plt+0x59dc>
   16d8c:	mov	r2, #171	; 0xab
   16d90:	ldr	r1, [pc, #1064]	; 171c0 <__assert_fail@plt+0x59e0>
   16d94:	ldr	r0, [pc, #1068]	; 171c8 <__assert_fail@plt+0x59e8>
   16d98:	b	16d10 <__assert_fail@plt+0x5530>
   16d9c:	ldr	r3, [sp, #36]	; 0x24
   16da0:	cmp	r3, #0
   16da4:	beq	16dbc <__assert_fail@plt+0x55dc>
   16da8:	ldr	r3, [pc, #1036]	; 171bc <__assert_fail@plt+0x59dc>
   16dac:	mov	r2, #172	; 0xac
   16db0:	ldr	r1, [pc, #1032]	; 171c0 <__assert_fail@plt+0x59e0>
   16db4:	ldr	r0, [pc, #1040]	; 171cc <__assert_fail@plt+0x59ec>
   16db8:	b	16d10 <__assert_fail@plt+0x5530>
   16dbc:	mov	r0, r5
   16dc0:	strb	r4, [sp, #32]
   16dc4:	bl	1148c <mbsinit@plt>
   16dc8:	cmp	r0, #0
   16dcc:	movne	r3, #0
   16dd0:	strbne	r3, [sp, #8]
   16dd4:	b	16cd0 <__assert_fail@plt+0x54f0>
   16dd8:	mov	r0, r5
   16ddc:	bl	1148c <mbsinit@plt>
   16de0:	cmp	r0, #0
   16de4:	beq	16d00 <__assert_fail@plt+0x5520>
   16de8:	mov	r3, #1
   16dec:	strb	r3, [sp, #8]
   16df0:	bl	1157c <__ctype_get_mb_cur_max@plt>
   16df4:	mov	r1, r0
   16df8:	mov	r0, r4
   16dfc:	bl	18d24 <__assert_fail@plt+0x7544>
   16e00:	mov	r3, r5
   16e04:	mov	r1, r4
   16e08:	mov	r2, r0
   16e0c:	add	r0, sp, #36	; 0x24
   16e10:	bl	1a064 <__assert_fail@plt+0x8884>
   16e14:	cmn	r0, #1
   16e18:	str	r0, [sp, #28]
   16e1c:	bne	16e30 <__assert_fail@plt+0x5650>
   16e20:	mov	r3, #1
   16e24:	str	r3, [sp, #28]
   16e28:	mov	r3, #0
   16e2c:	b	17164 <__assert_fail@plt+0x5984>
   16e30:	cmn	r0, #2
   16e34:	bne	16e48 <__assert_fail@plt+0x5668>
   16e38:	ldr	r0, [sp, #24]
   16e3c:	bl	1163c <strlen@plt>
   16e40:	str	r0, [sp, #28]
   16e44:	b	16e28 <__assert_fail@plt+0x5648>
   16e48:	cmp	r0, #0
   16e4c:	bne	16e74 <__assert_fail@plt+0x5694>
   16e50:	mov	r3, #1
   16e54:	str	r3, [sp, #28]
   16e58:	ldr	r3, [sp, #24]
   16e5c:	ldrb	r3, [r3]
   16e60:	cmp	r3, #0
   16e64:	bne	16d88 <__assert_fail@plt+0x55a8>
   16e68:	ldr	r3, [sp, #36]	; 0x24
   16e6c:	cmp	r3, #0
   16e70:	bne	16da8 <__assert_fail@plt+0x55c8>
   16e74:	mov	r3, #1
   16e78:	mov	r0, r5
   16e7c:	strb	r3, [sp, #32]
   16e80:	bl	1148c <mbsinit@plt>
   16e84:	cmp	r0, #0
   16e88:	movne	r3, #0
   16e8c:	strbne	r3, [sp, #8]
   16e90:	b	17168 <__assert_fail@plt+0x5988>
   16e94:	mov	r0, r8
   16e98:	bl	1148c <mbsinit@plt>
   16e9c:	cmp	r0, #0
   16ea0:	beq	16d00 <__assert_fail@plt+0x5520>
   16ea4:	mov	r3, #1
   16ea8:	strb	r3, [sp, #64]	; 0x40
   16eac:	bl	1157c <__ctype_get_mb_cur_max@plt>
   16eb0:	mov	r1, r0
   16eb4:	mov	r0, r4
   16eb8:	bl	18d24 <__assert_fail@plt+0x7544>
   16ebc:	mov	r3, r8
   16ec0:	mov	r1, r4
   16ec4:	mov	r2, r0
   16ec8:	mov	r0, r9
   16ecc:	bl	1a064 <__assert_fail@plt+0x8884>
   16ed0:	cmn	r0, #1
   16ed4:	str	r0, [sp, #84]	; 0x54
   16ed8:	bne	16eec <__assert_fail@plt+0x570c>
   16edc:	mov	r3, #1
   16ee0:	str	r3, [sp, #84]	; 0x54
   16ee4:	mov	r3, #0
   16ee8:	b	16b10 <__assert_fail@plt+0x5330>
   16eec:	cmn	r0, #2
   16ef0:	bne	16f04 <__assert_fail@plt+0x5724>
   16ef4:	ldr	r0, [sp, #80]	; 0x50
   16ef8:	bl	1163c <strlen@plt>
   16efc:	str	r0, [sp, #84]	; 0x54
   16f00:	b	16ee4 <__assert_fail@plt+0x5704>
   16f04:	cmp	r0, #0
   16f08:	bne	16f30 <__assert_fail@plt+0x5750>
   16f0c:	mov	r3, #1
   16f10:	str	r3, [sp, #84]	; 0x54
   16f14:	ldr	r3, [sp, #80]	; 0x50
   16f18:	ldrb	r3, [r3]
   16f1c:	cmp	r3, #0
   16f20:	bne	16d88 <__assert_fail@plt+0x55a8>
   16f24:	ldr	r3, [sp, #92]	; 0x5c
   16f28:	cmp	r3, #0
   16f2c:	bne	16da8 <__assert_fail@plt+0x55c8>
   16f30:	mov	r3, #1
   16f34:	mov	r0, r8
   16f38:	strb	r3, [sp, #88]	; 0x58
   16f3c:	bl	1148c <mbsinit@plt>
   16f40:	cmp	r0, #0
   16f44:	movne	r3, #0
   16f48:	strbne	r3, [sp, #64]	; 0x40
   16f4c:	b	16b14 <__assert_fail@plt+0x5334>
   16f50:	cmn	r0, #2
   16f54:	bne	16f68 <__assert_fail@plt+0x5788>
   16f58:	ldr	r0, [sp, #24]
   16f5c:	bl	1163c <strlen@plt>
   16f60:	str	r0, [sp, #28]
   16f64:	b	16bd0 <__assert_fail@plt+0x53f0>
   16f68:	cmp	r0, #0
   16f6c:	bne	16f94 <__assert_fail@plt+0x57b4>
   16f70:	mov	r3, #1
   16f74:	str	r3, [sp, #28]
   16f78:	ldr	r3, [sp, #24]
   16f7c:	ldrb	r3, [r3]
   16f80:	cmp	r3, #0
   16f84:	bne	16d88 <__assert_fail@plt+0x55a8>
   16f88:	ldr	r3, [sp, #36]	; 0x24
   16f8c:	cmp	r3, #0
   16f90:	bne	16da8 <__assert_fail@plt+0x55c8>
   16f94:	mov	r3, #1
   16f98:	mov	r0, r5
   16f9c:	strb	r3, [sp, #32]
   16fa0:	bl	1148c <mbsinit@plt>
   16fa4:	cmp	r0, #0
   16fa8:	movne	r3, #0
   16fac:	strbne	r3, [sp, #8]
   16fb0:	b	16bd8 <__assert_fail@plt+0x53f8>
   16fb4:	mov	r0, r5
   16fb8:	bl	1148c <mbsinit@plt>
   16fbc:	cmp	r0, #0
   16fc0:	beq	16d00 <__assert_fail@plt+0x5520>
   16fc4:	mov	r8, #1
   16fc8:	strb	r8, [sp, #8]
   16fcc:	bl	1157c <__ctype_get_mb_cur_max@plt>
   16fd0:	mov	r1, r0
   16fd4:	mov	r0, r6
   16fd8:	bl	18d24 <__assert_fail@plt+0x7544>
   16fdc:	mov	r3, r5
   16fe0:	mov	r1, r6
   16fe4:	mov	r2, r0
   16fe8:	add	r0, sp, #36	; 0x24
   16fec:	bl	1a064 <__assert_fail@plt+0x8884>
   16ff0:	cmn	r0, #1
   16ff4:	str	r0, [sp, #28]
   16ff8:	streq	r8, [sp, #28]
   16ffc:	beq	17014 <__assert_fail@plt+0x5834>
   17000:	cmn	r0, #2
   17004:	bne	1701c <__assert_fail@plt+0x583c>
   17008:	ldr	r0, [sp, #24]
   1700c:	bl	1163c <strlen@plt>
   17010:	str	r0, [sp, #28]
   17014:	strb	r4, [sp, #32]
   17018:	b	16c68 <__assert_fail@plt+0x5488>
   1701c:	cmp	r0, #0
   17020:	bne	17044 <__assert_fail@plt+0x5864>
   17024:	ldr	r3, [sp, #24]
   17028:	str	r8, [sp, #28]
   1702c:	ldrb	r3, [r3]
   17030:	cmp	r3, #0
   17034:	bne	16d88 <__assert_fail@plt+0x55a8>
   17038:	ldr	r3, [sp, #36]	; 0x24
   1703c:	cmp	r3, #0
   17040:	bne	16da8 <__assert_fail@plt+0x55c8>
   17044:	mov	r3, #1
   17048:	mov	r0, r5
   1704c:	strb	r3, [sp, #32]
   17050:	bl	1148c <mbsinit@plt>
   17054:	cmp	r0, #0
   17058:	movne	r3, #0
   1705c:	strbne	r3, [sp, #8]
   17060:	b	16c68 <__assert_fail@plt+0x5488>
   17064:	cmp	r4, r6
   17068:	movcs	r8, #1
   1706c:	bcs	17090 <__assert_fail@plt+0x58b0>
   17070:	bl	11618 <__ctype_b_loc@plt>
   17074:	ldrb	r3, [r6, #-1]
   17078:	lsl	r3, r3, #1
   1707c:	ldr	r2, [r0]
   17080:	ldrh	r4, [r2, r3]
   17084:	lsr	r4, r4, #3
   17088:	eor	r4, r4, #1
   1708c:	and	r8, r4, #1
   17090:	mov	r0, r7
   17094:	bl	1163c <strlen@plt>
   17098:	ldrb	r4, [r6, r0]
   1709c:	cmp	r4, #0
   170a0:	moveq	r4, #1
   170a4:	beq	170c4 <__assert_fail@plt+0x58e4>
   170a8:	bl	11618 <__ctype_b_loc@plt>
   170ac:	lsl	r4, r4, #1
   170b0:	ldr	r3, [r0]
   170b4:	ldrh	r4, [r3, r4]
   170b8:	lsr	r4, r4, #3
   170bc:	eor	r4, r4, #1
   170c0:	and	r4, r4, #1
   170c4:	ands	r4, r8, r4
   170c8:	bne	16a4c <__assert_fail@plt+0x526c>
   170cc:	ldrb	r3, [r6]
   170d0:	cmp	r3, #0
   170d4:	beq	16a48 <__assert_fail@plt+0x5268>
   170d8:	add	r4, r6, #1
   170dc:	b	16a28 <__assert_fail@plt+0x5248>
   170e0:	ldr	r1, [sp, #28]
   170e4:	ldr	r3, [sp, #24]
   170e8:	ldrb	r2, [sp, #32]
   170ec:	add	r3, r3, r1
   170f0:	cmp	r6, r3
   170f4:	mov	r1, #0
   170f8:	ldr	r0, [sp, #36]	; 0x24
   170fc:	str	r3, [sp, #24]
   17100:	strb	r1, [sp, #20]
   17104:	bhi	16c94 <__assert_fail@plt+0x54b4>
   17108:	cmp	r2, #0
   1710c:	beq	16a94 <__assert_fail@plt+0x52b4>
   17110:	bl	11678 <iswalnum@plt>
   17114:	clz	sl, r0
   17118:	lsr	sl, sl, #5
   1711c:	b	16a98 <__assert_fail@plt+0x52b8>
   17120:	cmp	r2, #0
   17124:	bne	17170 <__assert_fail@plt+0x5990>
   17128:	ldrb	r3, [sp, #8]
   1712c:	ldr	r4, [sp, #24]
   17130:	cmp	r3, #0
   17134:	bne	16df0 <__assert_fail@plt+0x5610>
   17138:	ldrb	r3, [r4]
   1713c:	lsr	r2, r3, #5
   17140:	and	r3, r3, #31
   17144:	ldr	r2, [fp, r2, lsl #2]
   17148:	lsr	r3, r2, r3
   1714c:	tst	r3, #1
   17150:	beq	16dd8 <__assert_fail@plt+0x55f8>
   17154:	mov	r3, #1
   17158:	str	r3, [sp, #28]
   1715c:	ldrb	r2, [r4]
   17160:	str	r2, [sp, #36]	; 0x24
   17164:	strb	r3, [sp, #32]
   17168:	mov	r3, #1
   1716c:	strb	r3, [sp, #20]
   17170:	ldrb	r3, [sp, #32]
   17174:	cmp	r3, #0
   17178:	beq	17188 <__assert_fail@plt+0x59a8>
   1717c:	ldr	r3, [sp, #36]	; 0x24
   17180:	cmp	r3, #0
   17184:	beq	16cec <__assert_fail@plt+0x550c>
   17188:	ldr	r2, [sp, #28]
   1718c:	ldr	r3, [sp, #24]
   17190:	ldr	r1, [sp, #84]	; 0x54
   17194:	add	r3, r3, r2
   17198:	str	r3, [sp, #24]
   1719c:	ldr	r3, [sp, #80]	; 0x50
   171a0:	mov	r2, #0
   171a4:	add	r3, r3, r1
   171a8:	strb	r2, [sp, #20]
   171ac:	str	r3, [sp, #80]	; 0x50
   171b0:	strb	r2, [sp, #76]	; 0x4c
   171b4:	b	16ad4 <__assert_fail@plt+0x52f4>
   171b8:	strdeq	pc, [r1], -r0
   171bc:	andeq	pc, r1, r7, ror sl	; <UNPREDICTABLE>
   171c0:	andeq	pc, r1, sl, lsl #21
   171c4:	muleq	r1, r8, sl
   171c8:	andeq	pc, r1, pc, lsr #21
   171cc:	andeq	pc, r1, r6, asr #21
   171d0:	push	{r0, r1, r4, r5, r6, lr}
   171d4:	mov	r2, #5
   171d8:	mov	r5, r0
   171dc:	mov	r1, r0
   171e0:	mov	r0, #0
   171e4:	bl	114bc <dcgettext@plt>
   171e8:	cmp	r5, r0
   171ec:	mov	r4, r0
   171f0:	beq	17240 <__assert_fail@plt+0x5a60>
   171f4:	mov	r1, r5
   171f8:	bl	16a08 <__assert_fail@plt+0x5228>
   171fc:	cmp	r0, #0
   17200:	bne	17240 <__assert_fail@plt+0x5a60>
   17204:	mov	r0, r4
   17208:	bl	1163c <strlen@plt>
   1720c:	mov	r6, r0
   17210:	mov	r0, r5
   17214:	bl	1163c <strlen@plt>
   17218:	add	r0, r6, r0
   1721c:	add	r0, r0, #4
   17220:	bl	196f4 <__assert_fail@plt+0x7f14>
   17224:	stm	sp, {r4, r5}
   17228:	ldr	r3, [pc, #28]	; 1724c <__assert_fail@plt+0x5a6c>
   1722c:	mvn	r2, #0
   17230:	mov	r1, #1
   17234:	mov	r6, r0
   17238:	bl	11684 <__sprintf_chk@plt>
   1723c:	mov	r4, r6
   17240:	mov	r0, r4
   17244:	add	sp, sp, #8
   17248:	pop	{r4, r5, r6, pc}
   1724c:	ldrdeq	pc, [r1], -r8
   17250:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   17254:	mov	r2, #5
   17258:	mov	sl, r0
   1725c:	mov	r7, r1
   17260:	mov	r1, r0
   17264:	mov	r0, #0
   17268:	bl	114bc <dcgettext@plt>
   1726c:	mov	r9, r0
   17270:	bl	19f94 <__assert_fail@plt+0x87b4>
   17274:	ldr	r1, [pc, #548]	; 174a0 <__assert_fail@plt+0x5cc0>
   17278:	mov	r8, r0
   1727c:	bl	19d3c <__assert_fail@plt+0x855c>
   17280:	subs	r4, r0, #0
   17284:	beq	17348 <__assert_fail@plt+0x5b68>
   17288:	mov	r2, r8
   1728c:	ldr	r1, [pc, #524]	; 174a0 <__assert_fail@plt+0x5cc0>
   17290:	mov	r0, r7
   17294:	bl	19c2c <__assert_fail@plt+0x844c>
   17298:	mov	r5, r0
   1729c:	mov	r0, r8
   172a0:	bl	1163c <strlen@plt>
   172a4:	mov	r4, r0
   172a8:	add	r0, r0, #11
   172ac:	bl	196f4 <__assert_fail@plt+0x7f14>
   172b0:	mov	r2, r4
   172b4:	mov	r1, r8
   172b8:	mov	r6, r0
   172bc:	bl	11474 <memcpy@plt>
   172c0:	ldr	r3, [pc, #476]	; 174a4 <__assert_fail@plt+0x5cc4>
   172c4:	add	r2, r6, r4
   172c8:	mov	r0, r7
   172cc:	ldr	r1, [r3]
   172d0:	str	r1, [r6, r4]
   172d4:	ldr	r1, [r3, #4]
   172d8:	str	r1, [r2, #4]
   172dc:	ldrh	r1, [r3, #8]
   172e0:	ldrb	r3, [r3, #10]
   172e4:	strh	r1, [r2, #8]
   172e8:	strb	r3, [r2, #10]
   172ec:	ldr	r1, [pc, #428]	; 174a0 <__assert_fail@plt+0x5cc0>
   172f0:	mov	r2, r6
   172f4:	bl	19c2c <__assert_fail@plt+0x844c>
   172f8:	mov	r4, r0
   172fc:	mov	r0, r6
   17300:	bl	16840 <__assert_fail@plt+0x5060>
   17304:	cmp	r4, #0
   17308:	beq	17328 <__assert_fail@plt+0x5b48>
   1730c:	mov	r1, #63	; 0x3f
   17310:	mov	r0, r4
   17314:	bl	11648 <strchr@plt>
   17318:	cmp	r0, #0
   1731c:	beq	1748c <__assert_fail@plt+0x5cac>
   17320:	mov	r0, r4
   17324:	bl	16840 <__assert_fail@plt+0x5060>
   17328:	subs	r7, r5, #0
   1732c:	movne	r8, #0
   17330:	movne	r6, r5
   17334:	movne	r4, r8
   17338:	moveq	r6, sl
   1733c:	moveq	r8, r5
   17340:	moveq	r4, r5
   17344:	b	17360 <__assert_fail@plt+0x5b80>
   17348:	subs	r8, r7, #0
   1734c:	movne	r6, r7
   17350:	movne	r5, r4
   17354:	moveq	r6, sl
   17358:	moveq	r4, r7
   1735c:	moveq	r5, r7
   17360:	mov	r1, sl
   17364:	mov	r0, r9
   17368:	bl	11408 <strcmp@plt>
   1736c:	cmp	r0, #0
   17370:	beq	17458 <__assert_fail@plt+0x5c78>
   17374:	mov	r1, sl
   17378:	mov	r0, r9
   1737c:	bl	16a08 <__assert_fail@plt+0x5228>
   17380:	cmp	r0, #0
   17384:	beq	173a8 <__assert_fail@plt+0x5bc8>
   17388:	cmp	r5, #0
   1738c:	bne	1744c <__assert_fail@plt+0x5c6c>
   17390:	cmp	r4, #0
   17394:	beq	173a0 <__assert_fail@plt+0x5bc0>
   17398:	mov	r0, r4
   1739c:	bl	16840 <__assert_fail@plt+0x5060>
   173a0:	mov	r6, r9
   173a4:	b	17480 <__assert_fail@plt+0x5ca0>
   173a8:	cmp	r7, #0
   173ac:	bne	1741c <__assert_fail@plt+0x5c3c>
   173b0:	cmp	r8, #0
   173b4:	bne	17434 <__assert_fail@plt+0x5c54>
   173b8:	mov	r0, r9
   173bc:	bl	1163c <strlen@plt>
   173c0:	mov	r7, r0
   173c4:	mov	r0, r6
   173c8:	bl	1163c <strlen@plt>
   173cc:	add	r0, r7, r0
   173d0:	add	r0, r0, #4
   173d4:	bl	196f4 <__assert_fail@plt+0x7f14>
   173d8:	str	r6, [sp, #4]
   173dc:	str	r9, [sp]
   173e0:	ldr	r3, [pc, #192]	; 174a8 <__assert_fail@plt+0x5cc8>
   173e4:	mvn	r2, #0
   173e8:	mov	r1, #1
   173ec:	mov	r7, r0
   173f0:	bl	11684 <__sprintf_chk@plt>
   173f4:	cmp	r5, #0
   173f8:	beq	17404 <__assert_fail@plt+0x5c24>
   173fc:	mov	r0, r5
   17400:	bl	16840 <__assert_fail@plt+0x5060>
   17404:	cmp	r4, #0
   17408:	beq	17414 <__assert_fail@plt+0x5c34>
   1740c:	mov	r0, r4
   17410:	bl	16840 <__assert_fail@plt+0x5060>
   17414:	mov	r6, r7
   17418:	b	17480 <__assert_fail@plt+0x5ca0>
   1741c:	mov	r1, r7
   17420:	mov	r0, r9
   17424:	bl	16a08 <__assert_fail@plt+0x5228>
   17428:	cmp	r0, #0
   1742c:	bne	17388 <__assert_fail@plt+0x5ba8>
   17430:	b	173b0 <__assert_fail@plt+0x5bd0>
   17434:	mov	r1, r8
   17438:	mov	r0, r9
   1743c:	bl	16a08 <__assert_fail@plt+0x5228>
   17440:	cmp	r0, #0
   17444:	bne	17388 <__assert_fail@plt+0x5ba8>
   17448:	b	173b8 <__assert_fail@plt+0x5bd8>
   1744c:	mov	r0, r5
   17450:	bl	16840 <__assert_fail@plt+0x5060>
   17454:	b	17390 <__assert_fail@plt+0x5bb0>
   17458:	cmp	r5, #0
   1745c:	cmpne	r6, r5
   17460:	beq	1746c <__assert_fail@plt+0x5c8c>
   17464:	mov	r0, r5
   17468:	bl	16840 <__assert_fail@plt+0x5060>
   1746c:	cmp	r4, #0
   17470:	cmpne	r6, r4
   17474:	beq	17480 <__assert_fail@plt+0x5ca0>
   17478:	mov	r0, r4
   1747c:	bl	16840 <__assert_fail@plt+0x5060>
   17480:	mov	r0, r6
   17484:	add	sp, sp, #8
   17488:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1748c:	subs	r7, r5, #0
   17490:	mov	r8, r4
   17494:	movne	r6, r5
   17498:	moveq	r6, r4
   1749c:	b	17360 <__assert_fail@plt+0x5b80>
   174a0:	andeq	pc, r1, r0, ror #21
   174a4:	andeq	pc, r1, r6, ror #21
   174a8:	ldrdeq	pc, [r1], -r8
   174ac:	push	{r4, r5, r6, lr}
   174b0:	mov	r2, #48	; 0x30
   174b4:	mov	r5, r1
   174b8:	mov	r1, #0
   174bc:	mov	r4, r0
   174c0:	bl	1169c <memset@plt>
   174c4:	cmp	r5, #10
   174c8:	bne	174d0 <__assert_fail@plt+0x5cf0>
   174cc:	bl	117c8 <abort@plt>
   174d0:	str	r5, [r4]
   174d4:	mov	r0, r4
   174d8:	pop	{r4, r5, r6, pc}
   174dc:	push	{r4, r5, r6, lr}
   174e0:	mov	r4, r0
   174e4:	mov	r5, r1
   174e8:	bl	19f94 <__assert_fail@plt+0x87b4>
   174ec:	ldrb	r3, [r0]
   174f0:	bic	r3, r3, #32
   174f4:	cmp	r3, #85	; 0x55
   174f8:	bne	17568 <__assert_fail@plt+0x5d88>
   174fc:	ldrb	r3, [r0, #1]
   17500:	bic	r3, r3, #32
   17504:	cmp	r3, #84	; 0x54
   17508:	bne	17540 <__assert_fail@plt+0x5d60>
   1750c:	ldrb	r3, [r0, #2]
   17510:	bic	r3, r3, #32
   17514:	cmp	r3, #70	; 0x46
   17518:	bne	17540 <__assert_fail@plt+0x5d60>
   1751c:	ldrb	r3, [r0, #3]
   17520:	cmp	r3, #45	; 0x2d
   17524:	bne	17540 <__assert_fail@plt+0x5d60>
   17528:	ldrb	r3, [r0, #4]
   1752c:	cmp	r3, #56	; 0x38
   17530:	bne	17540 <__assert_fail@plt+0x5d60>
   17534:	ldrb	r3, [r0, #5]
   17538:	cmp	r3, #0
   1753c:	beq	17554 <__assert_fail@plt+0x5d74>
   17540:	ldr	r1, [pc, #144]	; 175d8 <__assert_fail@plt+0x5df8>
   17544:	ldr	r0, [pc, #144]	; 175dc <__assert_fail@plt+0x5dfc>
   17548:	cmp	r5, #9
   1754c:	movne	r0, r1
   17550:	pop	{r4, r5, r6, pc}
   17554:	ldrb	r3, [r4]
   17558:	ldr	r1, [pc, #128]	; 175e0 <__assert_fail@plt+0x5e00>
   1755c:	ldr	r0, [pc, #128]	; 175e4 <__assert_fail@plt+0x5e04>
   17560:	cmp	r3, #96	; 0x60
   17564:	b	1754c <__assert_fail@plt+0x5d6c>
   17568:	cmp	r3, #71	; 0x47
   1756c:	bne	17540 <__assert_fail@plt+0x5d60>
   17570:	ldrb	r3, [r0, #1]
   17574:	bic	r3, r3, #32
   17578:	cmp	r3, #66	; 0x42
   1757c:	bne	17540 <__assert_fail@plt+0x5d60>
   17580:	ldrb	r3, [r0, #2]
   17584:	cmp	r3, #49	; 0x31
   17588:	bne	17540 <__assert_fail@plt+0x5d60>
   1758c:	ldrb	r3, [r0, #3]
   17590:	cmp	r3, #56	; 0x38
   17594:	bne	17540 <__assert_fail@plt+0x5d60>
   17598:	ldrb	r3, [r0, #4]
   1759c:	cmp	r3, #48	; 0x30
   175a0:	bne	17540 <__assert_fail@plt+0x5d60>
   175a4:	ldrb	r3, [r0, #5]
   175a8:	cmp	r3, #51	; 0x33
   175ac:	bne	17540 <__assert_fail@plt+0x5d60>
   175b0:	ldrb	r3, [r0, #6]
   175b4:	cmp	r3, #48	; 0x30
   175b8:	bne	17540 <__assert_fail@plt+0x5d60>
   175bc:	ldrb	r3, [r0, #7]
   175c0:	cmp	r3, #0
   175c4:	bne	17540 <__assert_fail@plt+0x5d60>
   175c8:	ldrb	r3, [r4]
   175cc:	ldr	r1, [pc, #20]	; 175e8 <__assert_fail@plt+0x5e08>
   175d0:	ldr	r0, [pc, #20]	; 175ec <__assert_fail@plt+0x5e0c>
   175d4:	b	17560 <__assert_fail@plt+0x5d80>
   175d8:	andeq	pc, r1, r4, asr #21
   175dc:	andeq	pc, r1, r7, asr fp	; <UNPREDICTABLE>
   175e0:	andeq	pc, r1, ip, asr #22
   175e4:	andeq	pc, r1, r8, asr #22
   175e8:	andeq	pc, r1, r4, asr fp	; <UNPREDICTABLE>
   175ec:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   175f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175f4:	sub	sp, sp, #108	; 0x6c
   175f8:	mov	r8, r0
   175fc:	str	r3, [sp, #36]	; 0x24
   17600:	mov	r5, r1
   17604:	str	r2, [sp, #44]	; 0x2c
   17608:	ldr	sl, [sp, #144]	; 0x90
   1760c:	bl	1157c <__ctype_get_mb_cur_max@plt>
   17610:	ldr	r3, [sp, #148]	; 0x94
   17614:	mov	r7, #0
   17618:	str	r7, [sp, #48]	; 0x30
   1761c:	lsr	r6, r3, #1
   17620:	and	r6, r6, #1
   17624:	mov	r3, #1
   17628:	str	r3, [sp, #72]	; 0x48
   1762c:	str	r7, [sp, #24]
   17630:	str	r7, [sp, #32]
   17634:	str	r7, [sp, #40]	; 0x28
   17638:	str	r7, [sp, #60]	; 0x3c
   1763c:	str	r0, [sp, #76]	; 0x4c
   17640:	cmp	sl, #10
   17644:	ldrls	pc, [pc, sl, lsl #2]
   17648:	b	17884 <__assert_fail@plt+0x60a4>
   1764c:	andeq	r7, r1, r8, ror r6
   17650:	andeq	r8, r1, ip, lsl #6
   17654:	andeq	r7, r1, r0, asr r8
   17658:	muleq	r1, ip, r8
   1765c:	andeq	r7, r1, ip, lsr #16
   17660:	andeq	r7, r1, r4, lsl #13
   17664:	andeq	r8, r1, ip, ror #5
   17668:	andeq	r7, r1, r8, lsl #17
   1766c:	andeq	r7, r1, ip, ror r7
   17670:	andeq	r7, r1, ip, ror r7
   17674:	andeq	r7, r1, ip, ror r7
   17678:	mov	r6, #0
   1767c:	mov	r4, #0
   17680:	b	176b0 <__assert_fail@plt+0x5ed0>
   17684:	cmp	r6, #0
   17688:	bne	178ac <__assert_fail@plt+0x60cc>
   1768c:	cmp	r5, #0
   17690:	movne	r3, #34	; 0x22
   17694:	strbne	r3, [r8]
   17698:	mov	r3, #1
   1769c:	str	r3, [sp, #24]
   176a0:	str	r3, [sp, #32]
   176a4:	mov	r4, #1
   176a8:	ldr	r3, [pc, #3172]	; 18314 <__assert_fail@plt+0x6b34>
   176ac:	str	r3, [sp, #40]	; 0x28
   176b0:	mov	r9, r5
   176b4:	mov	r3, #0
   176b8:	str	r7, [sp, #68]	; 0x44
   176bc:	str	r3, [sp, #28]
   176c0:	ldr	r3, [sp, #36]	; 0x24
   176c4:	cmn	r3, #1
   176c8:	bne	18258 <__assert_fail@plt+0x6a78>
   176cc:	ldr	r3, [sp, #44]	; 0x2c
   176d0:	ldr	r2, [sp, #28]
   176d4:	ldrb	r3, [r3, r2]
   176d8:	adds	r3, r3, #0
   176dc:	movne	r3, #1
   176e0:	str	r3, [sp, #52]	; 0x34
   176e4:	ldr	r3, [sp, #52]	; 0x34
   176e8:	cmp	r3, #0
   176ec:	bne	178d4 <__assert_fail@plt+0x60f4>
   176f0:	sub	r2, sl, #2
   176f4:	clz	r2, r2
   176f8:	lsr	r2, r2, #5
   176fc:	and	r3, r6, r2
   17700:	cmp	r4, #0
   17704:	movne	r3, #0
   17708:	andeq	r3, r3, #1
   1770c:	cmp	r3, #0
   17710:	bne	17a9c <__assert_fail@plt+0x62bc>
   17714:	eor	r3, r6, #1
   17718:	ands	r2, r2, r3
   1771c:	beq	18290 <__assert_fail@plt+0x6ab0>
   17720:	ldr	r3, [sp, #68]	; 0x44
   17724:	cmp	r3, #0
   17728:	beq	182c8 <__assert_fail@plt+0x6ae8>
   1772c:	ldr	r3, [sp, #72]	; 0x48
   17730:	cmp	r3, #0
   17734:	beq	1826c <__assert_fail@plt+0x6a8c>
   17738:	ldr	r3, [sp, #160]	; 0xa0
   1773c:	ldr	r2, [sp, #44]	; 0x2c
   17740:	str	r3, [sp, #16]
   17744:	ldr	r3, [sp, #156]	; 0x9c
   17748:	ldr	r1, [sp, #60]	; 0x3c
   1774c:	str	r3, [sp, #12]
   17750:	ldr	r3, [sp, #152]	; 0x98
   17754:	str	r3, [sp, #8]
   17758:	ldr	r3, [sp, #148]	; 0x94
   1775c:	str	r3, [sp, #4]
   17760:	mov	r3, #5
   17764:	str	r3, [sp]
   17768:	ldr	r3, [sp, #36]	; 0x24
   1776c:	mov	r0, r8
   17770:	bl	175f0 <__assert_fail@plt+0x5e10>
   17774:	mov	r4, r0
   17778:	b	182bc <__assert_fail@plt+0x6adc>
   1777c:	cmp	sl, #10
   17780:	beq	177dc <__assert_fail@plt+0x5ffc>
   17784:	ldr	r4, [pc, #2956]	; 18318 <__assert_fail@plt+0x6b38>
   17788:	mov	r2, #5
   1778c:	mov	r1, r4
   17790:	mov	r0, #0
   17794:	bl	114bc <dcgettext@plt>
   17798:	cmp	r0, r4
   1779c:	str	r0, [sp, #156]	; 0x9c
   177a0:	bne	177b0 <__assert_fail@plt+0x5fd0>
   177a4:	mov	r1, sl
   177a8:	bl	174dc <__assert_fail@plt+0x5cfc>
   177ac:	str	r0, [sp, #156]	; 0x9c
   177b0:	ldr	r4, [pc, #2916]	; 1831c <__assert_fail@plt+0x6b3c>
   177b4:	mov	r2, #5
   177b8:	mov	r1, r4
   177bc:	mov	r0, #0
   177c0:	bl	114bc <dcgettext@plt>
   177c4:	cmp	r0, r4
   177c8:	str	r0, [sp, #160]	; 0xa0
   177cc:	bne	177dc <__assert_fail@plt+0x5ffc>
   177d0:	mov	r1, sl
   177d4:	bl	174dc <__assert_fail@plt+0x5cfc>
   177d8:	str	r0, [sp, #160]	; 0xa0
   177dc:	cmp	r6, #0
   177e0:	moveq	r4, r6
   177e4:	beq	177fc <__assert_fail@plt+0x601c>
   177e8:	mov	r4, #0
   177ec:	b	1780c <__assert_fail@plt+0x602c>
   177f0:	cmp	r5, r4
   177f4:	strbhi	r3, [r8, r4]
   177f8:	add	r4, r4, #1
   177fc:	ldr	r3, [sp, #156]	; 0x9c
   17800:	ldrb	r3, [r3, r4]
   17804:	cmp	r3, #0
   17808:	bne	177f0 <__assert_fail@plt+0x6010>
   1780c:	ldr	r0, [sp, #160]	; 0xa0
   17810:	bl	1163c <strlen@plt>
   17814:	ldr	r3, [sp, #160]	; 0xa0
   17818:	str	r3, [sp, #40]	; 0x28
   1781c:	mov	r3, #1
   17820:	str	r3, [sp, #24]
   17824:	str	r0, [sp, #32]
   17828:	b	176b0 <__assert_fail@plt+0x5ed0>
   1782c:	mov	r3, #1
   17830:	cmp	r6, #0
   17834:	streq	r3, [sp, #24]
   17838:	beq	17858 <__assert_fail@plt+0x6078>
   1783c:	str	r3, [sp, #32]
   17840:	ldr	r3, [pc, #2772]	; 1831c <__assert_fail@plt+0x6b3c>
   17844:	mov	r4, #0
   17848:	str	r3, [sp, #40]	; 0x28
   1784c:	b	1787c <__assert_fail@plt+0x609c>
   17850:	cmp	r6, #0
   17854:	bne	178c4 <__assert_fail@plt+0x60e4>
   17858:	cmp	r5, #0
   1785c:	movne	r3, #39	; 0x27
   17860:	strbne	r3, [r8]
   17864:	mov	r3, #1
   17868:	str	r3, [sp, #32]
   1786c:	mov	r6, #0
   17870:	ldr	r3, [pc, #2724]	; 1831c <__assert_fail@plt+0x6b3c>
   17874:	mov	r4, #1
   17878:	str	r3, [sp, #40]	; 0x28
   1787c:	mov	sl, #2
   17880:	b	176b0 <__assert_fail@plt+0x5ed0>
   17884:	bl	117c8 <abort@plt>
   17888:	mov	r6, #0
   1788c:	mov	r3, #1
   17890:	str	r3, [sp, #24]
   17894:	mov	r4, r6
   17898:	b	176b0 <__assert_fail@plt+0x5ed0>
   1789c:	mov	r6, #1
   178a0:	str	r6, [sp, #24]
   178a4:	str	r6, [sp, #32]
   178a8:	b	17840 <__assert_fail@plt+0x6060>
   178ac:	mov	r3, #1
   178b0:	str	r3, [sp, #32]
   178b4:	ldr	r3, [pc, #2648]	; 18314 <__assert_fail@plt+0x6b34>
   178b8:	str	r6, [sp, #24]
   178bc:	str	r3, [sp, #40]	; 0x28
   178c0:	b	1767c <__assert_fail@plt+0x5e9c>
   178c4:	mov	r3, #1
   178c8:	str	r3, [sp, #32]
   178cc:	ldr	r3, [pc, #2632]	; 1831c <__assert_fail@plt+0x6b3c>
   178d0:	b	178bc <__assert_fail@plt+0x60dc>
   178d4:	ldr	r3, [sp, #32]
   178d8:	ldr	fp, [sp, #24]
   178dc:	cmp	sl, #2
   178e0:	moveq	fp, #0
   178e4:	andne	fp, fp, #1
   178e8:	adds	r5, r3, #0
   178ec:	movne	r5, #1
   178f0:	ands	r3, r5, fp
   178f4:	str	r3, [sp, #64]	; 0x40
   178f8:	beq	179c8 <__assert_fail@plt+0x61e8>
   178fc:	ldr	r2, [sp, #32]
   17900:	ldr	r3, [sp, #28]
   17904:	add	r7, r3, r2
   17908:	mov	r3, r2
   1790c:	ldr	r2, [sp, #36]	; 0x24
   17910:	cmp	r3, #1
   17914:	movls	r3, #0
   17918:	movhi	r3, #1
   1791c:	cmn	r2, #1
   17920:	movne	r3, #0
   17924:	cmp	r3, #0
   17928:	beq	17938 <__assert_fail@plt+0x6158>
   1792c:	ldr	r0, [sp, #44]	; 0x2c
   17930:	bl	1163c <strlen@plt>
   17934:	str	r0, [sp, #36]	; 0x24
   17938:	ldr	r3, [sp, #36]	; 0x24
   1793c:	cmp	r3, r7
   17940:	bcc	179c0 <__assert_fail@plt+0x61e0>
   17944:	ldr	r3, [sp, #44]	; 0x2c
   17948:	ldr	r0, [sp, #28]
   1794c:	ldr	r2, [sp, #32]
   17950:	ldr	r1, [sp, #40]	; 0x28
   17954:	add	r0, r3, r0
   17958:	bl	11498 <memcmp@plt>
   1795c:	cmp	r0, #0
   17960:	bne	179c0 <__assert_fail@plt+0x61e0>
   17964:	cmp	r6, #0
   17968:	beq	179c8 <__assert_fail@plt+0x61e8>
   1796c:	str	r6, [sp, #24]
   17970:	ldr	r3, [sp, #24]
   17974:	ldr	r2, [sp, #44]	; 0x2c
   17978:	cmp	sl, #2
   1797c:	movne	r3, #0
   17980:	andeq	r3, r3, #1
   17984:	cmp	r3, #0
   17988:	ldr	r3, [sp, #160]	; 0xa0
   1798c:	movne	sl, #4
   17990:	str	r3, [sp, #16]
   17994:	ldr	r3, [sp, #156]	; 0x9c
   17998:	str	sl, [sp]
   1799c:	str	r3, [sp, #12]
   179a0:	mov	r3, #0
   179a4:	str	r3, [sp, #8]
   179a8:	ldr	r3, [sp, #148]	; 0x94
   179ac:	mov	r1, r9
   179b0:	bic	r3, r3, #2
   179b4:	str	r3, [sp, #4]
   179b8:	ldr	r3, [sp, #36]	; 0x24
   179bc:	b	1776c <__assert_fail@plt+0x5f8c>
   179c0:	mov	r3, #0
   179c4:	str	r3, [sp, #64]	; 0x40
   179c8:	ldr	r2, [sp, #28]
   179cc:	ldr	r3, [sp, #44]	; 0x2c
   179d0:	add	r3, r3, r2
   179d4:	str	r3, [sp, #80]	; 0x50
   179d8:	ldr	r3, [sp, #44]	; 0x2c
   179dc:	ldrb	r7, [r3, r2]
   179e0:	cmp	r7, #58	; 0x3a
   179e4:	bhi	17b4c <__assert_fail@plt+0x636c>
   179e8:	cmp	r7, #43	; 0x2b
   179ec:	bcs	17ba0 <__assert_fail@plt+0x63c0>
   179f0:	cmp	r7, #32
   179f4:	beq	17bf8 <__assert_fail@plt+0x6418>
   179f8:	bhi	17aa4 <__assert_fail@plt+0x62c4>
   179fc:	cmp	r7, #9
   17a00:	beq	17eac <__assert_fail@plt+0x66cc>
   17a04:	bhi	17a68 <__assert_fail@plt+0x6288>
   17a08:	cmp	r7, #7
   17a0c:	beq	17f58 <__assert_fail@plt+0x6778>
   17a10:	bhi	17c14 <__assert_fail@plt+0x6434>
   17a14:	cmp	r7, #0
   17a18:	beq	17c30 <__assert_fail@plt+0x6450>
   17a1c:	ldr	r3, [sp, #76]	; 0x4c
   17a20:	cmp	r3, #1
   17a24:	bne	17f9c <__assert_fail@plt+0x67bc>
   17a28:	bl	11618 <__ctype_b_loc@plt>
   17a2c:	sxth	r3, r7
   17a30:	lsl	r3, r3, #1
   17a34:	ldr	r2, [r0]
   17a38:	ldrh	r5, [r2, r3]
   17a3c:	ldr	r3, [sp, #76]	; 0x4c
   17a40:	str	r3, [sp, #56]	; 0x38
   17a44:	lsr	r5, r5, #14
   17a48:	and	r5, r5, #1
   17a4c:	ldr	r3, [sp, #24]
   17a50:	eor	fp, r5, #1
   17a54:	and	fp, fp, r3
   17a58:	ands	fp, fp, #255	; 0xff
   17a5c:	beq	17de4 <__assert_fail@plt+0x6604>
   17a60:	mov	r5, #0
   17a64:	b	18048 <__assert_fail@plt+0x6868>
   17a68:	cmp	r7, #11
   17a6c:	beq	17eb4 <__assert_fail@plt+0x66d4>
   17a70:	bcc	17f50 <__assert_fail@plt+0x6770>
   17a74:	cmp	r7, #12
   17a78:	beq	17f60 <__assert_fail@plt+0x6780>
   17a7c:	cmp	r7, #13
   17a80:	moveq	r3, #114	; 0x72
   17a84:	bne	17a1c <__assert_fail@plt+0x623c>
   17a88:	cmp	sl, #2
   17a8c:	movne	r2, #0
   17a90:	andeq	r2, r6, #1
   17a94:	cmp	r2, #0
   17a98:	beq	17c18 <__assert_fail@plt+0x6438>
   17a9c:	mov	sl, #2
   17aa0:	b	17970 <__assert_fail@plt+0x6190>
   17aa4:	cmp	r7, #37	; 0x25
   17aa8:	beq	17ba0 <__assert_fail@plt+0x63c0>
   17aac:	bhi	17ac0 <__assert_fail@plt+0x62e0>
   17ab0:	cmp	r7, #35	; 0x23
   17ab4:	beq	17bec <__assert_fail@plt+0x640c>
   17ab8:	mov	r5, #0
   17abc:	b	17bfc <__assert_fail@plt+0x641c>
   17ac0:	cmp	r7, #39	; 0x27
   17ac4:	bne	17ab8 <__assert_fail@plt+0x62d8>
   17ac8:	cmp	sl, #2
   17acc:	ldrne	r5, [sp, #52]	; 0x34
   17ad0:	movne	r3, r5
   17ad4:	strne	r3, [sp, #68]	; 0x44
   17ad8:	bne	17ba4 <__assert_fail@plt+0x63c4>
   17adc:	cmp	r6, #0
   17ae0:	bne	17970 <__assert_fail@plt+0x6190>
   17ae4:	ldr	r2, [sp, #60]	; 0x3c
   17ae8:	adds	r3, r9, #0
   17aec:	movne	r3, #1
   17af0:	cmp	r2, #0
   17af4:	movne	r3, #0
   17af8:	cmp	r3, #0
   17afc:	strne	r9, [sp, #60]	; 0x3c
   17b00:	movne	r9, #0
   17b04:	bne	17b14 <__assert_fail@plt+0x6334>
   17b08:	cmp	r9, r4
   17b0c:	movhi	r3, #39	; 0x27
   17b10:	strbhi	r3, [r8, r4]
   17b14:	add	r3, r4, #1
   17b18:	cmp	r3, r9
   17b1c:	movcc	r2, #92	; 0x5c
   17b20:	strbcc	r2, [r8, r3]
   17b24:	add	r3, r4, #2
   17b28:	cmp	r3, r9
   17b2c:	ldr	r5, [sp, #52]	; 0x34
   17b30:	movcc	r2, #39	; 0x27
   17b34:	strbcc	r2, [r8, r3]
   17b38:	add	r4, r4, #3
   17b3c:	mov	fp, r6
   17b40:	str	r5, [sp, #68]	; 0x44
   17b44:	str	r6, [sp, #48]	; 0x30
   17b48:	b	17de4 <__assert_fail@plt+0x6604>
   17b4c:	cmp	r7, #94	; 0x5e
   17b50:	beq	17ab8 <__assert_fail@plt+0x62d8>
   17b54:	bhi	17bac <__assert_fail@plt+0x63cc>
   17b58:	cmp	r7, #90	; 0x5a
   17b5c:	bhi	17b94 <__assert_fail@plt+0x63b4>
   17b60:	cmp	r7, #65	; 0x41
   17b64:	bcs	17ba0 <__assert_fail@plt+0x63c0>
   17b68:	cmp	r7, #62	; 0x3e
   17b6c:	bls	17ab8 <__assert_fail@plt+0x62d8>
   17b70:	cmp	r7, #63	; 0x3f
   17b74:	bne	17a1c <__assert_fail@plt+0x623c>
   17b78:	cmp	sl, #2
   17b7c:	beq	17d20 <__assert_fail@plt+0x6540>
   17b80:	cmp	sl, #5
   17b84:	beq	17d30 <__assert_fail@plt+0x6550>
   17b88:	mov	fp, #0
   17b8c:	mov	r5, fp
   17b90:	b	17de4 <__assert_fail@plt+0x6604>
   17b94:	cmp	r7, #92	; 0x5c
   17b98:	beq	17ebc <__assert_fail@plt+0x66dc>
   17b9c:	bls	17ab8 <__assert_fail@plt+0x62d8>
   17ba0:	ldr	r5, [sp, #52]	; 0x34
   17ba4:	mov	fp, #0
   17ba8:	b	17de4 <__assert_fail@plt+0x6604>
   17bac:	cmp	r7, #122	; 0x7a
   17bb0:	bhi	17bd0 <__assert_fail@plt+0x63f0>
   17bb4:	cmp	r7, #97	; 0x61
   17bb8:	bcs	17ba0 <__assert_fail@plt+0x63c0>
   17bbc:	cmp	r7, #95	; 0x5f
   17bc0:	beq	17ba0 <__assert_fail@plt+0x63c0>
   17bc4:	cmp	r7, #96	; 0x60
   17bc8:	bne	17a1c <__assert_fail@plt+0x623c>
   17bcc:	b	17ab8 <__assert_fail@plt+0x62d8>
   17bd0:	cmp	r7, #124	; 0x7c
   17bd4:	beq	17ab8 <__assert_fail@plt+0x62d8>
   17bd8:	bcc	17f68 <__assert_fail@plt+0x6788>
   17bdc:	cmp	r7, #125	; 0x7d
   17be0:	beq	17f68 <__assert_fail@plt+0x6788>
   17be4:	cmp	r7, #126	; 0x7e
   17be8:	bne	17a1c <__assert_fail@plt+0x623c>
   17bec:	ldr	r3, [sp, #28]
   17bf0:	cmp	r3, #0
   17bf4:	bne	17d28 <__assert_fail@plt+0x6548>
   17bf8:	ldr	r5, [sp, #52]	; 0x34
   17bfc:	cmp	sl, #2
   17c00:	movne	fp, #0
   17c04:	andeq	fp, r6, #1
   17c08:	cmp	fp, #0
   17c0c:	beq	17de4 <__assert_fail@plt+0x6604>
   17c10:	b	17a9c <__assert_fail@plt+0x62bc>
   17c14:	mov	r3, #98	; 0x62
   17c18:	ldr	r2, [sp, #24]
   17c1c:	cmp	r2, #0
   17c20:	beq	17d28 <__assert_fail@plt+0x6548>
   17c24:	mov	r7, r3
   17c28:	mov	r5, #0
   17c2c:	b	17e3c <__assert_fail@plt+0x665c>
   17c30:	ldr	r3, [sp, #24]
   17c34:	cmp	r3, #0
   17c38:	beq	17d04 <__assert_fail@plt+0x6524>
   17c3c:	cmp	r6, #0
   17c40:	bne	1796c <__assert_fail@plt+0x618c>
   17c44:	ldr	r3, [sp, #48]	; 0x30
   17c48:	eor	r2, r3, #1
   17c4c:	cmp	sl, #2
   17c50:	movne	r2, #0
   17c54:	andeq	r2, r2, #1
   17c58:	cmp	r2, #0
   17c5c:	moveq	r3, r4
   17c60:	beq	17c98 <__assert_fail@plt+0x64b8>
   17c64:	cmp	r9, r4
   17c68:	movhi	r3, #39	; 0x27
   17c6c:	strbhi	r3, [r8, r4]
   17c70:	add	r3, r4, #1
   17c74:	cmp	r9, r3
   17c78:	movhi	r1, #36	; 0x24
   17c7c:	strbhi	r1, [r8, r3]
   17c80:	add	r3, r4, #2
   17c84:	cmp	r9, r3
   17c88:	movhi	r1, #39	; 0x27
   17c8c:	strbhi	r1, [r8, r3]
   17c90:	add	r3, r4, #3
   17c94:	str	r2, [sp, #48]	; 0x30
   17c98:	cmp	r9, r3
   17c9c:	movhi	r2, #92	; 0x5c
   17ca0:	strbhi	r2, [r8, r3]
   17ca4:	cmp	fp, #0
   17ca8:	add	r4, r3, #1
   17cac:	beq	1823c <__assert_fail@plt+0x6a5c>
   17cb0:	ldr	r2, [sp, #28]
   17cb4:	ldr	r1, [sp, #36]	; 0x24
   17cb8:	add	r2, r2, #1
   17cbc:	cmp	r1, r2
   17cc0:	bls	17cfc <__assert_fail@plt+0x651c>
   17cc4:	ldr	r1, [sp, #44]	; 0x2c
   17cc8:	mov	r7, #48	; 0x30
   17ccc:	ldrb	r2, [r1, r2]
   17cd0:	sub	r2, r2, #48	; 0x30
   17cd4:	cmp	r2, #9
   17cd8:	movhi	r5, r6
   17cdc:	bhi	17de4 <__assert_fail@plt+0x6604>
   17ce0:	cmp	r9, r4
   17ce4:	add	r2, r3, #2
   17ce8:	strbhi	r7, [r8, r4]
   17cec:	cmp	r9, r2
   17cf0:	add	r4, r3, #3
   17cf4:	movhi	r1, #48	; 0x30
   17cf8:	strbhi	r1, [r8, r2]
   17cfc:	mov	r5, r6
   17d00:	b	18244 <__assert_fail@plt+0x6a64>
   17d04:	ldr	r3, [sp, #148]	; 0x94
   17d08:	tst	r3, #1
   17d0c:	ldreq	r5, [sp, #24]
   17d10:	beq	18250 <__assert_fail@plt+0x6a70>
   17d14:	ldr	r3, [sp, #28]
   17d18:	add	r3, r3, #1
   17d1c:	b	176bc <__assert_fail@plt+0x5edc>
   17d20:	cmp	r6, #0
   17d24:	bne	17970 <__assert_fail@plt+0x6190>
   17d28:	mov	r5, #0
   17d2c:	b	17ba4 <__assert_fail@plt+0x63c4>
   17d30:	ldr	r3, [sp, #148]	; 0x94
   17d34:	tst	r3, #4
   17d38:	beq	17d28 <__assert_fail@plt+0x6548>
   17d3c:	ldr	r3, [sp, #28]
   17d40:	add	r2, r3, #2
   17d44:	ldr	r3, [sp, #36]	; 0x24
   17d48:	cmp	r3, r2
   17d4c:	bls	17d28 <__assert_fail@plt+0x6548>
   17d50:	ldr	r3, [sp, #44]	; 0x2c
   17d54:	ldr	r1, [sp, #28]
   17d58:	add	r3, r3, r1
   17d5c:	ldrb	r0, [r3, #1]
   17d60:	cmp	r0, #63	; 0x3f
   17d64:	bne	17d28 <__assert_fail@plt+0x6548>
   17d68:	ldr	r3, [sp, #44]	; 0x2c
   17d6c:	ldrb	r1, [r3, r2]
   17d70:	sub	r3, r1, #33	; 0x21
   17d74:	uxtb	r3, r3
   17d78:	cmp	r3, #29
   17d7c:	bhi	1824c <__assert_fail@plt+0x6a6c>
   17d80:	mov	ip, #1
   17d84:	ldr	r5, [pc, #1428]	; 18320 <__assert_fail@plt+0x6b40>
   17d88:	ands	r5, r5, ip, lsl r3
   17d8c:	beq	17ba4 <__assert_fail@plt+0x63c4>
   17d90:	cmp	r6, #0
   17d94:	bne	17970 <__assert_fail@plt+0x6190>
   17d98:	add	r3, r4, #1
   17d9c:	cmp	r9, r4
   17da0:	strbhi	r0, [r8, r4]
   17da4:	cmp	r9, r3
   17da8:	movhi	r0, #34	; 0x22
   17dac:	strbhi	r0, [r8, r3]
   17db0:	add	r3, r4, #2
   17db4:	cmp	r9, r3
   17db8:	movhi	r0, #34	; 0x22
   17dbc:	strbhi	r0, [r8, r3]
   17dc0:	add	r3, r4, #3
   17dc4:	cmp	r9, r3
   17dc8:	add	r4, r4, #4
   17dcc:	mov	r5, r6
   17dd0:	mov	fp, r6
   17dd4:	mov	r7, r1
   17dd8:	movhi	r0, #63	; 0x3f
   17ddc:	strbhi	r0, [r8, r3]
   17de0:	str	r2, [sp, #28]
   17de4:	ldr	r3, [sp, #24]
   17de8:	eor	r3, r3, #1
   17dec:	cmp	sl, #2
   17df0:	orreq	r3, r3, #1
   17df4:	eor	r3, r3, #1
   17df8:	orr	r3, r6, r3
   17dfc:	tst	r3, #255	; 0xff
   17e00:	beq	17e30 <__assert_fail@plt+0x6650>
   17e04:	ldr	r3, [sp, #152]	; 0x98
   17e08:	cmp	r3, #0
   17e0c:	beq	17e30 <__assert_fail@plt+0x6650>
   17e10:	lsr	r2, r7, #5
   17e14:	ldr	r1, [sp, #152]	; 0x98
   17e18:	uxtb	r2, r2
   17e1c:	and	r3, r7, #31
   17e20:	ldr	r2, [r1, r2, lsl #2]
   17e24:	lsr	r3, r2, r3
   17e28:	tst	r3, #1
   17e2c:	bne	17e3c <__assert_fail@plt+0x665c>
   17e30:	ldr	r3, [sp, #64]	; 0x40
   17e34:	cmp	r3, #0
   17e38:	beq	17ed4 <__assert_fail@plt+0x66f4>
   17e3c:	cmp	r6, #0
   17e40:	bne	17970 <__assert_fail@plt+0x6190>
   17e44:	ldr	r3, [sp, #48]	; 0x30
   17e48:	eor	r3, r3, #1
   17e4c:	cmp	sl, #2
   17e50:	movne	r3, #0
   17e54:	andeq	r3, r3, #1
   17e58:	cmp	r3, #0
   17e5c:	beq	17e94 <__assert_fail@plt+0x66b4>
   17e60:	cmp	r9, r4
   17e64:	movhi	r2, #39	; 0x27
   17e68:	strbhi	r2, [r8, r4]
   17e6c:	add	r2, r4, #1
   17e70:	cmp	r9, r2
   17e74:	movhi	r1, #36	; 0x24
   17e78:	strbhi	r1, [r8, r2]
   17e7c:	add	r2, r4, #2
   17e80:	cmp	r9, r2
   17e84:	add	r4, r4, #3
   17e88:	movhi	r1, #39	; 0x27
   17e8c:	strbhi	r1, [r8, r2]
   17e90:	str	r3, [sp, #48]	; 0x30
   17e94:	cmp	r9, r4
   17e98:	movhi	r3, #92	; 0x5c
   17e9c:	strbhi	r3, [r8, r4]
   17ea0:	ldr	fp, [sp, #52]	; 0x34
   17ea4:	add	r4, r4, #1
   17ea8:	b	17ed4 <__assert_fail@plt+0x66f4>
   17eac:	mov	r3, #116	; 0x74
   17eb0:	b	17a88 <__assert_fail@plt+0x62a8>
   17eb4:	mov	r3, #118	; 0x76
   17eb8:	b	17c18 <__assert_fail@plt+0x6438>
   17ebc:	cmp	sl, #2
   17ec0:	bne	17f30 <__assert_fail@plt+0x6750>
   17ec4:	cmp	r6, #0
   17ec8:	bne	17970 <__assert_fail@plt+0x6190>
   17ecc:	mov	r5, r6
   17ed0:	mov	fp, r6
   17ed4:	ldr	r3, [sp, #48]	; 0x30
   17ed8:	eor	fp, fp, #1
   17edc:	and	fp, fp, r3
   17ee0:	tst	fp, #255	; 0xff
   17ee4:	beq	17f10 <__assert_fail@plt+0x6730>
   17ee8:	cmp	r9, r4
   17eec:	movhi	r3, #39	; 0x27
   17ef0:	strbhi	r3, [r8, r4]
   17ef4:	add	r3, r4, #1
   17ef8:	cmp	r9, r3
   17efc:	movhi	r2, #39	; 0x27
   17f00:	add	r4, r4, #2
   17f04:	strbhi	r2, [r8, r3]
   17f08:	mov	r3, #0
   17f0c:	str	r3, [sp, #48]	; 0x30
   17f10:	cmp	r9, r4
   17f14:	strbhi	r7, [r8, r4]
   17f18:	ldr	r3, [sp, #72]	; 0x48
   17f1c:	cmp	r5, #0
   17f20:	moveq	r3, #0
   17f24:	add	r4, r4, #1
   17f28:	str	r3, [sp, #72]	; 0x48
   17f2c:	b	17d14 <__assert_fail@plt+0x6534>
   17f30:	ldr	r3, [sp, #24]
   17f34:	and	r3, r3, r6
   17f38:	tst	r5, r3
   17f3c:	moveq	r3, r7
   17f40:	beq	17a88 <__assert_fail@plt+0x62a8>
   17f44:	mov	fp, #0
   17f48:	mov	r5, fp
   17f4c:	b	17ed4 <__assert_fail@plt+0x66f4>
   17f50:	mov	r3, #110	; 0x6e
   17f54:	b	17a88 <__assert_fail@plt+0x62a8>
   17f58:	mov	r3, #97	; 0x61
   17f5c:	b	17c18 <__assert_fail@plt+0x6438>
   17f60:	mov	r3, #102	; 0x66
   17f64:	b	17c18 <__assert_fail@plt+0x6438>
   17f68:	ldr	r3, [sp, #36]	; 0x24
   17f6c:	cmn	r3, #1
   17f70:	bne	17f90 <__assert_fail@plt+0x67b0>
   17f74:	ldr	r3, [sp, #44]	; 0x2c
   17f78:	ldrb	r3, [r3, #1]
   17f7c:	adds	r3, r3, #0
   17f80:	movne	r3, #1
   17f84:	cmp	r3, #0
   17f88:	bne	17d28 <__assert_fail@plt+0x6548>
   17f8c:	b	17bec <__assert_fail@plt+0x640c>
   17f90:	ldr	r3, [sp, #36]	; 0x24
   17f94:	subs	r3, r3, #1
   17f98:	b	17f80 <__assert_fail@plt+0x67a0>
   17f9c:	mov	r3, #0
   17fa0:	str	r3, [sp, #96]	; 0x60
   17fa4:	str	r3, [sp, #100]	; 0x64
   17fa8:	ldr	r3, [sp, #36]	; 0x24
   17fac:	cmn	r3, #1
   17fb0:	bne	17fc0 <__assert_fail@plt+0x67e0>
   17fb4:	ldr	r0, [sp, #44]	; 0x2c
   17fb8:	bl	1163c <strlen@plt>
   17fbc:	str	r0, [sp, #36]	; 0x24
   17fc0:	ldr	r5, [sp, #52]	; 0x34
   17fc4:	mov	r3, #0
   17fc8:	str	r3, [sp, #56]	; 0x38
   17fcc:	ldr	r3, [sp, #28]
   17fd0:	ldr	r2, [sp, #56]	; 0x38
   17fd4:	ldr	r1, [sp, #36]	; 0x24
   17fd8:	add	r2, r3, r2
   17fdc:	ldr	r3, [sp, #44]	; 0x2c
   17fe0:	add	r0, sp, #92	; 0x5c
   17fe4:	add	fp, r3, r2
   17fe8:	sub	r2, r1, r2
   17fec:	add	r3, sp, #96	; 0x60
   17ff0:	mov	r1, fp
   17ff4:	bl	1a064 <__assert_fail@plt+0x8884>
   17ff8:	subs	r2, r0, #0
   17ffc:	beq	1803c <__assert_fail@plt+0x685c>
   18000:	cmn	r2, #1
   18004:	beq	18214 <__assert_fail@plt+0x6a34>
   18008:	cmn	r2, #2
   1800c:	bne	18184 <__assert_fail@plt+0x69a4>
   18010:	ldr	r2, [sp, #56]	; 0x38
   18014:	ldr	r3, [sp, #28]
   18018:	add	r3, r3, r2
   1801c:	ldr	r2, [sp, #36]	; 0x24
   18020:	cmp	r2, r3
   18024:	bls	18214 <__assert_fail@plt+0x6a34>
   18028:	ldr	r3, [sp, #80]	; 0x50
   1802c:	ldr	r2, [sp, #56]	; 0x38
   18030:	ldrb	r5, [r3, r2]
   18034:	cmp	r5, #0
   18038:	bne	18174 <__assert_fail@plt+0x6994>
   1803c:	ldr	r3, [sp, #56]	; 0x38
   18040:	cmp	r3, #1
   18044:	bls	17a4c <__assert_fail@plt+0x626c>
   18048:	ldr	r2, [sp, #56]	; 0x38
   1804c:	ldr	r3, [sp, #28]
   18050:	mov	fp, #0
   18054:	add	r3, r3, r2
   18058:	ldr	r2, [sp, #24]
   1805c:	str	r3, [sp, #52]	; 0x34
   18060:	eor	r3, r5, #1
   18064:	and	r3, r3, r2
   18068:	mov	ip, #92	; 0x5c
   1806c:	uxtb	r3, r3
   18070:	mov	r2, #39	; 0x27
   18074:	cmp	r3, #0
   18078:	beq	1821c <__assert_fail@plt+0x6a3c>
   1807c:	cmp	r6, #0
   18080:	bne	1796c <__assert_fail@plt+0x618c>
   18084:	ldr	r1, [sp, #48]	; 0x30
   18088:	eor	r1, r1, #1
   1808c:	cmp	sl, #2
   18090:	movne	r1, #0
   18094:	andeq	r1, r1, #1
   18098:	cmp	r1, #0
   1809c:	beq	180cc <__assert_fail@plt+0x68ec>
   180a0:	add	r0, r4, #1
   180a4:	cmp	r9, r4
   180a8:	strbhi	r2, [r8, r4]
   180ac:	cmp	r9, r0
   180b0:	movhi	lr, #36	; 0x24
   180b4:	strbhi	lr, [r8, r0]
   180b8:	add	r0, r4, #2
   180bc:	add	r4, r4, #3
   180c0:	cmp	r9, r0
   180c4:	strbhi	r2, [r8, r0]
   180c8:	str	r1, [sp, #48]	; 0x30
   180cc:	add	r0, r4, #1
   180d0:	cmp	r9, r4
   180d4:	strbhi	ip, [r8, r4]
   180d8:	cmp	r9, r0
   180dc:	lsrhi	r1, r7, #6
   180e0:	addhi	r1, r1, #48	; 0x30
   180e4:	strbhi	r1, [r8, r0]
   180e8:	add	r0, r4, #2
   180ec:	cmp	r9, r0
   180f0:	lsrhi	r1, r7, #3
   180f4:	and	r7, r7, #7
   180f8:	andhi	r1, r1, #7
   180fc:	add	r4, r4, #3
   18100:	add	r7, r7, #48	; 0x30
   18104:	mov	fp, r3
   18108:	addhi	r1, r1, #48	; 0x30
   1810c:	strbhi	r1, [r8, r0]
   18110:	ldr	r1, [sp, #28]
   18114:	ldr	r0, [sp, #52]	; 0x34
   18118:	add	r1, r1, #1
   1811c:	cmp	r0, r1
   18120:	bls	17ed4 <__assert_fail@plt+0x66f4>
   18124:	ldr	lr, [sp, #48]	; 0x30
   18128:	eor	r0, fp, #1
   1812c:	and	r0, r0, lr
   18130:	tst	r0, #255	; 0xff
   18134:	beq	18158 <__assert_fail@plt+0x6978>
   18138:	add	r0, r4, #1
   1813c:	cmp	r9, r4
   18140:	strbhi	r2, [r8, r4]
   18144:	cmp	r9, r0
   18148:	add	r4, r4, #2
   1814c:	strbhi	r2, [r8, r0]
   18150:	mov	r0, #0
   18154:	str	r0, [sp, #48]	; 0x30
   18158:	ldr	r0, [sp, #44]	; 0x2c
   1815c:	cmp	r9, r4
   18160:	strbhi	r7, [r8, r4]
   18164:	str	r1, [sp, #28]
   18168:	add	r4, r4, #1
   1816c:	ldrb	r7, [r0, r1]
   18170:	b	18074 <__assert_fail@plt+0x6894>
   18174:	ldr	r3, [sp, #56]	; 0x38
   18178:	add	r3, r3, #1
   1817c:	str	r3, [sp, #56]	; 0x38
   18180:	b	18010 <__assert_fail@plt+0x6830>
   18184:	cmp	sl, #2
   18188:	movne	r3, #0
   1818c:	andeq	r3, r6, #1
   18190:	cmp	r3, #0
   18194:	movne	r1, #1
   18198:	bne	181f4 <__assert_fail@plt+0x6a14>
   1819c:	ldr	r0, [sp, #92]	; 0x5c
   181a0:	str	r2, [sp, #84]	; 0x54
   181a4:	bl	11558 <iswprint@plt>
   181a8:	ldr	r3, [sp, #56]	; 0x38
   181ac:	ldr	r2, [sp, #84]	; 0x54
   181b0:	add	r3, r3, r2
   181b4:	str	r3, [sp, #56]	; 0x38
   181b8:	cmp	r0, #0
   181bc:	add	r0, sp, #96	; 0x60
   181c0:	moveq	r5, #0
   181c4:	bl	1148c <mbsinit@plt>
   181c8:	cmp	r0, #0
   181cc:	beq	17fcc <__assert_fail@plt+0x67ec>
   181d0:	b	1803c <__assert_fail@plt+0x685c>
   181d4:	ldrb	r3, [fp, r1]
   181d8:	cmp	r3, #94	; 0x5e
   181dc:	beq	17a9c <__assert_fail@plt+0x62bc>
   181e0:	bhi	18200 <__assert_fail@plt+0x6a20>
   181e4:	sub	r3, r3, #91	; 0x5b
   181e8:	cmp	r3, #1
   181ec:	bls	17a9c <__assert_fail@plt+0x62bc>
   181f0:	add	r1, r1, #1
   181f4:	cmp	r1, r2
   181f8:	bne	181d4 <__assert_fail@plt+0x69f4>
   181fc:	b	1819c <__assert_fail@plt+0x69bc>
   18200:	cmp	r3, #96	; 0x60
   18204:	beq	17a9c <__assert_fail@plt+0x62bc>
   18208:	cmp	r3, #124	; 0x7c
   1820c:	bne	181f0 <__assert_fail@plt+0x6a10>
   18210:	b	17a9c <__assert_fail@plt+0x62bc>
   18214:	mov	r5, #0
   18218:	b	1803c <__assert_fail@plt+0x685c>
   1821c:	ldr	r1, [sp, #64]	; 0x40
   18220:	cmp	r1, #0
   18224:	beq	18110 <__assert_fail@plt+0x6930>
   18228:	cmp	r9, r4
   1822c:	strbhi	ip, [r8, r4]
   18230:	str	r3, [sp, #64]	; 0x40
   18234:	add	r4, r4, #1
   18238:	b	18110 <__assert_fail@plt+0x6930>
   1823c:	mov	r5, fp
   18240:	ldr	fp, [sp, #24]
   18244:	mov	r7, #48	; 0x30
   18248:	b	17de4 <__assert_fail@plt+0x6604>
   1824c:	mov	r5, #0
   18250:	mov	fp, r5
   18254:	b	17de4 <__assert_fail@plt+0x6604>
   18258:	ldr	r3, [sp, #36]	; 0x24
   1825c:	ldr	r2, [sp, #28]
   18260:	subs	r3, r3, r2
   18264:	movne	r3, #1
   18268:	b	176e0 <__assert_fail@plt+0x5f00>
   1826c:	ldr	r3, [sp, #60]	; 0x3c
   18270:	clz	r7, r9
   18274:	cmp	r3, #0
   18278:	lsr	r7, r7, #5
   1827c:	moveq	r7, #0
   18280:	cmp	r7, #0
   18284:	mov	r5, r3
   18288:	bne	17640 <__assert_fail@plt+0x5e60>
   1828c:	ldr	r3, [sp, #68]	; 0x44
   18290:	ldr	r2, [sp, #40]	; 0x28
   18294:	cmp	r2, #0
   18298:	moveq	r3, #0
   1829c:	andne	r3, r3, #1
   182a0:	cmp	r3, #0
   182a4:	movne	r3, r2
   182a8:	subne	r2, r3, #1
   182ac:	bne	182dc <__assert_fail@plt+0x6afc>
   182b0:	cmp	r9, r4
   182b4:	movhi	r3, #0
   182b8:	strbhi	r3, [r8, r4]
   182bc:	mov	r0, r4
   182c0:	add	sp, sp, #108	; 0x6c
   182c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182c8:	mov	r3, r2
   182cc:	b	18290 <__assert_fail@plt+0x6ab0>
   182d0:	cmp	r9, r4
   182d4:	strbhi	r3, [r8, r4]
   182d8:	add	r4, r4, #1
   182dc:	ldrb	r3, [r2, #1]!
   182e0:	cmp	r3, #0
   182e4:	bne	182d0 <__assert_fail@plt+0x6af0>
   182e8:	b	182b0 <__assert_fail@plt+0x6ad0>
   182ec:	ldr	r3, [pc, #32]	; 18314 <__assert_fail@plt+0x6b34>
   182f0:	mov	r6, #1
   182f4:	str	r6, [sp, #24]
   182f8:	str	r6, [sp, #32]
   182fc:	str	r3, [sp, #40]	; 0x28
   18300:	mov	r4, #0
   18304:	mov	sl, #5
   18308:	b	176b0 <__assert_fail@plt+0x5ed0>
   1830c:	mov	r6, #1
   18310:	b	178a4 <__assert_fail@plt+0x60c4>
   18314:	andeq	pc, r1, r7, asr fp	; <UNPREDICTABLE>
   18318:	andeq	pc, r1, r9, asr fp	; <UNPREDICTABLE>
   1831c:	andeq	pc, r1, r4, asr #21
   18320:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   18324:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18328:	sub	sp, sp, #52	; 0x34
   1832c:	mov	r6, r0
   18330:	mov	r5, r3
   18334:	mov	r8, r1
   18338:	mov	r9, r2
   1833c:	bl	1166c <__errno_location@plt>
   18340:	ldr	r7, [pc, #380]	; 184c4 <__assert_fail@plt+0x6ce4>
   18344:	cmn	r6, #-2147483647	; 0x80000001
   18348:	ldr	r4, [r7]
   1834c:	ldr	r3, [r0]
   18350:	str	r0, [sp, #24]
   18354:	str	r3, [sp, #32]
   18358:	movne	r3, #0
   1835c:	moveq	r3, #1
   18360:	orrs	r3, r3, r6, lsr #31
   18364:	beq	1836c <__assert_fail@plt+0x6b8c>
   18368:	bl	117c8 <abort@plt>
   1836c:	ldr	r2, [r7, #4]
   18370:	cmp	r6, r2
   18374:	blt	183e4 <__assert_fail@plt+0x6c04>
   18378:	add	r1, sp, #48	; 0x30
   1837c:	add	sl, r7, #8
   18380:	str	r2, [r1, #-4]!
   18384:	cmp	r4, sl
   18388:	mov	r3, #8
   1838c:	sub	r2, r6, r2
   18390:	movne	r0, r4
   18394:	str	r3, [sp]
   18398:	add	r2, r2, #1
   1839c:	mvn	r3, #-2147483648	; 0x80000000
   183a0:	moveq	r0, #0
   183a4:	bl	19864 <__assert_fail@plt+0x8084>
   183a8:	cmp	r4, sl
   183ac:	ldr	r2, [sp, #44]	; 0x2c
   183b0:	mov	fp, r0
   183b4:	str	r0, [r7]
   183b8:	ldmeq	r4, {r0, r1}
   183bc:	mov	r4, fp
   183c0:	stmeq	fp, {r0, r1}
   183c4:	ldr	r0, [r7, #4]
   183c8:	mov	r1, #0
   183cc:	sub	r2, r2, r0
   183d0:	add	r0, fp, r0, lsl #3
   183d4:	lsl	r2, r2, #3
   183d8:	bl	1169c <memset@plt>
   183dc:	ldr	r3, [sp, #44]	; 0x2c
   183e0:	str	r3, [r7, #4]
   183e4:	ldr	r3, [r5, #4]
   183e8:	add	sl, r4, r6, lsl #3
   183ec:	orr	r3, r3, #1
   183f0:	str	r3, [sp, #28]
   183f4:	add	r3, r5, #8
   183f8:	str	r3, [sp, #36]	; 0x24
   183fc:	ldr	r3, [r5, #44]	; 0x2c
   18400:	ldr	fp, [r4, r6, lsl #3]
   18404:	ldr	r7, [sl, #4]
   18408:	str	r3, [sp, #16]
   1840c:	ldr	r3, [r5, #40]	; 0x28
   18410:	mov	r2, r8
   18414:	str	r3, [sp, #12]
   18418:	add	r3, r5, #8
   1841c:	str	r3, [sp, #8]
   18420:	ldr	r3, [sp, #28]
   18424:	mov	r1, fp
   18428:	str	r3, [sp, #4]
   1842c:	ldr	r3, [r5]
   18430:	mov	r0, r7
   18434:	str	r3, [sp]
   18438:	mov	r3, r9
   1843c:	bl	175f0 <__assert_fail@plt+0x5e10>
   18440:	cmp	fp, r0
   18444:	bhi	184ac <__assert_fail@plt+0x6ccc>
   18448:	ldr	r3, [pc, #120]	; 184c8 <__assert_fail@plt+0x6ce8>
   1844c:	add	fp, r0, #1
   18450:	cmp	r7, r3
   18454:	str	fp, [r4, r6, lsl #3]
   18458:	beq	18464 <__assert_fail@plt+0x6c84>
   1845c:	mov	r0, r7
   18460:	bl	16840 <__assert_fail@plt+0x5060>
   18464:	mov	r0, fp
   18468:	bl	1971c <__assert_fail@plt+0x7f3c>
   1846c:	ldr	r3, [r5, #44]	; 0x2c
   18470:	mov	r2, r8
   18474:	mov	r1, fp
   18478:	str	r0, [sl, #4]
   1847c:	str	r3, [sp, #16]
   18480:	ldr	r3, [r5, #40]	; 0x28
   18484:	mov	r7, r0
   18488:	str	r3, [sp, #12]
   1848c:	add	r3, r5, #8
   18490:	str	r3, [sp, #8]
   18494:	ldr	r3, [sp, #28]
   18498:	str	r3, [sp, #4]
   1849c:	ldr	r3, [r5]
   184a0:	str	r3, [sp]
   184a4:	mov	r3, r9
   184a8:	bl	175f0 <__assert_fail@plt+0x5e10>
   184ac:	ldr	r3, [sp, #24]
   184b0:	ldr	r2, [sp, #32]
   184b4:	mov	r0, r7
   184b8:	str	r2, [r3]
   184bc:	add	sp, sp, #52	; 0x34
   184c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184c4:	andeq	r1, r3, r8, lsl #3
   184c8:	andeq	r1, r3, r4, lsl #4
   184cc:	push	{r4, r5, r6, lr}
   184d0:	mov	r5, r0
   184d4:	bl	1166c <__errno_location@plt>
   184d8:	cmp	r5, #0
   184dc:	mov	r1, #48	; 0x30
   184e0:	ldr	r6, [r0]
   184e4:	mov	r4, r0
   184e8:	ldr	r0, [pc, #12]	; 184fc <__assert_fail@plt+0x6d1c>
   184ec:	movne	r0, r5
   184f0:	bl	19af8 <__assert_fail@plt+0x8318>
   184f4:	str	r6, [r4]
   184f8:	pop	{r4, r5, r6, pc}
   184fc:	andeq	r1, r3, r4, lsl #6
   18500:	ldr	r3, [pc, #12]	; 18514 <__assert_fail@plt+0x6d34>
   18504:	cmp	r0, #0
   18508:	moveq	r0, r3
   1850c:	ldr	r0, [r0]
   18510:	bx	lr
   18514:	andeq	r1, r3, r4, lsl #6
   18518:	ldr	r3, [pc, #12]	; 1852c <__assert_fail@plt+0x6d4c>
   1851c:	cmp	r0, #0
   18520:	moveq	r0, r3
   18524:	str	r1, [r0]
   18528:	bx	lr
   1852c:	andeq	r1, r3, r4, lsl #6
   18530:	ldr	r3, [pc, #52]	; 1856c <__assert_fail@plt+0x6d8c>
   18534:	cmp	r0, #0
   18538:	moveq	r0, r3
   1853c:	add	r3, r0, #8
   18540:	push	{lr}		; (str lr, [sp, #-4]!)
   18544:	lsr	lr, r1, #5
   18548:	and	r1, r1, #31
   1854c:	ldr	ip, [r3, lr, lsl #2]
   18550:	lsr	r0, ip, r1
   18554:	eor	r2, r2, r0
   18558:	and	r2, r2, #1
   1855c:	and	r0, r0, #1
   18560:	eor	r1, ip, r2, lsl r1
   18564:	str	r1, [r3, lr, lsl #2]
   18568:	pop	{pc}		; (ldr pc, [sp], #4)
   1856c:	andeq	r1, r3, r4, lsl #6
   18570:	ldr	r3, [pc, #16]	; 18588 <__assert_fail@plt+0x6da8>
   18574:	cmp	r0, #0
   18578:	movne	r3, r0
   1857c:	ldr	r0, [r3, #4]
   18580:	str	r1, [r3, #4]
   18584:	bx	lr
   18588:	andeq	r1, r3, r4, lsl #6
   1858c:	ldr	r3, [pc, #44]	; 185c0 <__assert_fail@plt+0x6de0>
   18590:	cmp	r0, #0
   18594:	moveq	r0, r3
   18598:	mov	r3, #10
   1859c:	cmp	r2, #0
   185a0:	cmpne	r1, #0
   185a4:	str	r3, [r0]
   185a8:	bne	185b4 <__assert_fail@plt+0x6dd4>
   185ac:	push	{r4, lr}
   185b0:	bl	117c8 <abort@plt>
   185b4:	str	r1, [r0, #40]	; 0x28
   185b8:	str	r2, [r0, #44]	; 0x2c
   185bc:	bx	lr
   185c0:	andeq	r1, r3, r4, lsl #6
   185c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   185c8:	sub	sp, sp, #24
   185cc:	mov	sl, r3
   185d0:	ldr	r4, [sp, #56]	; 0x38
   185d4:	ldr	r3, [pc, #100]	; 18640 <__assert_fail@plt+0x6e60>
   185d8:	cmp	r4, #0
   185dc:	moveq	r4, r3
   185e0:	mov	r7, r0
   185e4:	mov	r8, r1
   185e8:	mov	r9, r2
   185ec:	bl	1166c <__errno_location@plt>
   185f0:	ldr	r3, [r4, #44]	; 0x2c
   185f4:	mov	r2, r9
   185f8:	mov	r1, r8
   185fc:	ldr	r6, [r0]
   18600:	str	r3, [sp, #16]
   18604:	ldr	r3, [r4, #40]	; 0x28
   18608:	mov	r5, r0
   1860c:	str	r3, [sp, #12]
   18610:	add	r3, r4, #8
   18614:	str	r3, [sp, #8]
   18618:	ldr	r3, [r4, #4]
   1861c:	mov	r0, r7
   18620:	str	r3, [sp, #4]
   18624:	ldr	r3, [r4]
   18628:	str	r3, [sp]
   1862c:	mov	r3, sl
   18630:	bl	175f0 <__assert_fail@plt+0x5e10>
   18634:	str	r6, [r5]
   18638:	add	sp, sp, #24
   1863c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18640:	andeq	r1, r3, r4, lsl #6
   18644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18648:	cmp	r3, #0
   1864c:	sub	sp, sp, #44	; 0x2c
   18650:	ldr	r4, [pc, #188]	; 18714 <__assert_fail@plt+0x6f34>
   18654:	mov	r6, r2
   18658:	movne	r4, r3
   1865c:	mov	sl, r1
   18660:	mov	r9, r0
   18664:	bl	1166c <__errno_location@plt>
   18668:	ldr	r5, [r4, #4]
   1866c:	add	fp, r4, #8
   18670:	cmp	r6, #0
   18674:	orreq	r5, r5, #1
   18678:	mov	r1, #0
   1867c:	mov	r2, r9
   18680:	ldr	r3, [r0]
   18684:	mov	r8, r0
   18688:	str	r3, [sp, #28]
   1868c:	ldr	r3, [r4, #44]	; 0x2c
   18690:	mov	r0, r1
   18694:	str	r3, [sp, #16]
   18698:	ldr	r3, [r4, #40]	; 0x28
   1869c:	stmib	sp, {r5, fp}
   186a0:	str	r3, [sp, #12]
   186a4:	ldr	r3, [r4]
   186a8:	str	r3, [sp]
   186ac:	mov	r3, sl
   186b0:	bl	175f0 <__assert_fail@plt+0x5e10>
   186b4:	add	r1, r0, #1
   186b8:	mov	r7, r0
   186bc:	mov	r0, r1
   186c0:	str	r1, [sp, #36]	; 0x24
   186c4:	bl	1971c <__assert_fail@plt+0x7f3c>
   186c8:	ldr	r3, [r4, #44]	; 0x2c
   186cc:	mov	r2, r9
   186d0:	str	r3, [sp, #16]
   186d4:	ldr	r3, [r4, #40]	; 0x28
   186d8:	stmib	sp, {r5, fp}
   186dc:	str	r3, [sp, #12]
   186e0:	ldr	r3, [r4]
   186e4:	ldr	r1, [sp, #36]	; 0x24
   186e8:	str	r3, [sp]
   186ec:	mov	r3, sl
   186f0:	str	r0, [sp, #32]
   186f4:	bl	175f0 <__assert_fail@plt+0x5e10>
   186f8:	ldr	r3, [sp, #28]
   186fc:	cmp	r6, #0
   18700:	str	r3, [r8]
   18704:	ldr	r0, [sp, #32]
   18708:	strne	r7, [r6]
   1870c:	add	sp, sp, #44	; 0x2c
   18710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18714:	andeq	r1, r3, r4, lsl #6
   18718:	mov	r3, r2
   1871c:	mov	r2, #0
   18720:	b	18644 <__assert_fail@plt+0x6e64>
   18724:	push	{r4, r5, r6, r7, r8, lr}
   18728:	mov	r6, #1
   1872c:	ldr	r4, [pc, #104]	; 1879c <__assert_fail@plt+0x6fbc>
   18730:	ldr	r5, [r4]
   18734:	add	r7, r5, #12
   18738:	ldr	r3, [r4, #4]
   1873c:	add	r7, r7, #8
   18740:	cmp	r6, r3
   18744:	blt	1878c <__assert_fail@plt+0x6fac>
   18748:	ldr	r0, [r5, #4]
   1874c:	ldr	r6, [pc, #76]	; 187a0 <__assert_fail@plt+0x6fc0>
   18750:	cmp	r0, r6
   18754:	beq	18768 <__assert_fail@plt+0x6f88>
   18758:	bl	16840 <__assert_fail@plt+0x5060>
   1875c:	mov	r3, #256	; 0x100
   18760:	str	r3, [r4, #8]
   18764:	str	r6, [r4, #12]
   18768:	ldr	r6, [pc, #52]	; 187a4 <__assert_fail@plt+0x6fc4>
   1876c:	cmp	r5, r6
   18770:	beq	18780 <__assert_fail@plt+0x6fa0>
   18774:	mov	r0, r5
   18778:	bl	16840 <__assert_fail@plt+0x5060>
   1877c:	str	r6, [r4]
   18780:	mov	r3, #1
   18784:	str	r3, [r4, #4]
   18788:	pop	{r4, r5, r6, r7, r8, pc}
   1878c:	ldr	r0, [r7, #-8]
   18790:	bl	16840 <__assert_fail@plt+0x5060>
   18794:	add	r6, r6, #1
   18798:	b	18738 <__assert_fail@plt+0x6f58>
   1879c:	andeq	r1, r3, r8, lsl #3
   187a0:	andeq	r1, r3, r4, lsl #4
   187a4:	muleq	r3, r0, r1
   187a8:	ldr	r3, [pc, #4]	; 187b4 <__assert_fail@plt+0x6fd4>
   187ac:	mvn	r2, #0
   187b0:	b	18324 <__assert_fail@plt+0x6b44>
   187b4:	andeq	r1, r3, r4, lsl #6
   187b8:	ldr	r3, [pc]	; 187c0 <__assert_fail@plt+0x6fe0>
   187bc:	b	18324 <__assert_fail@plt+0x6b44>
   187c0:	andeq	r1, r3, r4, lsl #6
   187c4:	mov	r1, r0
   187c8:	mov	r0, #0
   187cc:	b	187a8 <__assert_fail@plt+0x6fc8>
   187d0:	mov	r2, r1
   187d4:	mov	r1, r0
   187d8:	mov	r0, #0
   187dc:	b	187b8 <__assert_fail@plt+0x6fd8>
   187e0:	push	{r4, r5, lr}
   187e4:	sub	sp, sp, #52	; 0x34
   187e8:	mov	r5, r2
   187ec:	mov	r4, r0
   187f0:	mov	r0, sp
   187f4:	bl	174ac <__assert_fail@plt+0x5ccc>
   187f8:	mov	r3, sp
   187fc:	mvn	r2, #0
   18800:	mov	r1, r5
   18804:	mov	r0, r4
   18808:	bl	18324 <__assert_fail@plt+0x6b44>
   1880c:	add	sp, sp, #52	; 0x34
   18810:	pop	{r4, r5, pc}
   18814:	push	{r4, r5, r6, lr}
   18818:	sub	sp, sp, #48	; 0x30
   1881c:	mov	r5, r2
   18820:	mov	r6, r3
   18824:	mov	r4, r0
   18828:	mov	r0, sp
   1882c:	bl	174ac <__assert_fail@plt+0x5ccc>
   18830:	mov	r3, sp
   18834:	mov	r2, r6
   18838:	mov	r1, r5
   1883c:	mov	r0, r4
   18840:	bl	18324 <__assert_fail@plt+0x6b44>
   18844:	add	sp, sp, #48	; 0x30
   18848:	pop	{r4, r5, r6, pc}
   1884c:	mov	r2, r1
   18850:	mov	r1, r0
   18854:	mov	r0, #0
   18858:	b	187e0 <__assert_fail@plt+0x7000>
   1885c:	mov	r3, r2
   18860:	mov	r2, r1
   18864:	mov	r1, r0
   18868:	mov	r0, #0
   1886c:	b	18814 <__assert_fail@plt+0x7034>
   18870:	push	{r4, r5, r6, lr}
   18874:	mov	r4, r0
   18878:	ldr	lr, [pc, #80]	; 188d0 <__assert_fail@plt+0x70f0>
   1887c:	mov	r5, r1
   18880:	mov	r6, r2
   18884:	ldm	lr!, {r0, r1, r2, r3}
   18888:	sub	sp, sp, #48	; 0x30
   1888c:	mov	ip, sp
   18890:	stmia	ip!, {r0, r1, r2, r3}
   18894:	ldm	lr!, {r0, r1, r2, r3}
   18898:	stmia	ip!, {r0, r1, r2, r3}
   1889c:	ldm	lr, {r0, r1, r2, r3}
   188a0:	stm	ip, {r0, r1, r2, r3}
   188a4:	mov	r1, r6
   188a8:	mov	r2, #1
   188ac:	mov	r0, sp
   188b0:	bl	18530 <__assert_fail@plt+0x6d50>
   188b4:	mov	r3, sp
   188b8:	mov	r2, r5
   188bc:	mov	r1, r4
   188c0:	mov	r0, #0
   188c4:	bl	18324 <__assert_fail@plt+0x6b44>
   188c8:	add	sp, sp, #48	; 0x30
   188cc:	pop	{r4, r5, r6, pc}
   188d0:	andeq	r1, r3, r4, lsl #6
   188d4:	mov	r2, r1
   188d8:	mvn	r1, #0
   188dc:	b	18870 <__assert_fail@plt+0x7090>
   188e0:	mov	r1, #58	; 0x3a
   188e4:	b	188d4 <__assert_fail@plt+0x70f4>
   188e8:	mov	r2, #58	; 0x3a
   188ec:	b	18870 <__assert_fail@plt+0x7090>
   188f0:	push	{r4, r5, lr}
   188f4:	sub	sp, sp, #100	; 0x64
   188f8:	mov	r4, r0
   188fc:	mov	r0, sp
   18900:	mov	r5, r2
   18904:	bl	174ac <__assert_fail@plt+0x5ccc>
   18908:	mov	ip, sp
   1890c:	add	lr, sp, #48	; 0x30
   18910:	ldm	ip!, {r0, r1, r2, r3}
   18914:	stmia	lr!, {r0, r1, r2, r3}
   18918:	ldm	ip!, {r0, r1, r2, r3}
   1891c:	stmia	lr!, {r0, r1, r2, r3}
   18920:	ldm	ip, {r0, r1, r2, r3}
   18924:	stm	lr, {r0, r1, r2, r3}
   18928:	mov	r2, #1
   1892c:	mov	r1, #58	; 0x3a
   18930:	add	r0, sp, #48	; 0x30
   18934:	bl	18530 <__assert_fail@plt+0x6d50>
   18938:	add	r3, sp, #48	; 0x30
   1893c:	mvn	r2, #0
   18940:	mov	r1, r5
   18944:	mov	r0, r4
   18948:	bl	18324 <__assert_fail@plt+0x6b44>
   1894c:	add	sp, sp, #100	; 0x64
   18950:	pop	{r4, r5, pc}
   18954:	push	{r4, r5, r6, r7, lr}
   18958:	mov	r4, r0
   1895c:	ldr	lr, [pc, #84]	; 189b8 <__assert_fail@plt+0x71d8>
   18960:	mov	r6, r1
   18964:	mov	r7, r2
   18968:	mov	r5, r3
   1896c:	ldm	lr!, {r0, r1, r2, r3}
   18970:	sub	sp, sp, #52	; 0x34
   18974:	mov	ip, sp
   18978:	stmia	ip!, {r0, r1, r2, r3}
   1897c:	ldm	lr!, {r0, r1, r2, r3}
   18980:	stmia	ip!, {r0, r1, r2, r3}
   18984:	ldm	lr, {r0, r1, r2, r3}
   18988:	stm	ip, {r0, r1, r2, r3}
   1898c:	mov	r2, r7
   18990:	mov	r1, r6
   18994:	mov	r0, sp
   18998:	bl	1858c <__assert_fail@plt+0x6dac>
   1899c:	mov	r3, sp
   189a0:	ldr	r2, [sp, #72]	; 0x48
   189a4:	mov	r1, r5
   189a8:	mov	r0, r4
   189ac:	bl	18324 <__assert_fail@plt+0x6b44>
   189b0:	add	sp, sp, #52	; 0x34
   189b4:	pop	{r4, r5, r6, r7, pc}
   189b8:	andeq	r1, r3, r4, lsl #6
   189bc:	mvn	ip, #0
   189c0:	push	{r0, r1, r2, lr}
   189c4:	str	ip, [sp]
   189c8:	bl	18954 <__assert_fail@plt+0x7174>
   189cc:	add	sp, sp, #12
   189d0:	pop	{pc}		; (ldr pc, [sp], #4)
   189d4:	mov	r3, r2
   189d8:	mov	r2, r1
   189dc:	mov	r1, r0
   189e0:	mov	r0, #0
   189e4:	b	189bc <__assert_fail@plt+0x71dc>
   189e8:	push	{r0, r1, r2, lr}
   189ec:	str	r3, [sp]
   189f0:	mov	r3, r2
   189f4:	mov	r2, r1
   189f8:	mov	r1, r0
   189fc:	mov	r0, #0
   18a00:	bl	18954 <__assert_fail@plt+0x7174>
   18a04:	add	sp, sp, #12
   18a08:	pop	{pc}		; (ldr pc, [sp], #4)
   18a0c:	ldr	r3, [pc]	; 18a14 <__assert_fail@plt+0x7234>
   18a10:	b	18324 <__assert_fail@plt+0x6b44>
   18a14:	muleq	r3, r8, r1
   18a18:	mov	r2, r1
   18a1c:	mov	r1, r0
   18a20:	mov	r0, #0
   18a24:	b	18a0c <__assert_fail@plt+0x722c>
   18a28:	mvn	r2, #0
   18a2c:	b	18a0c <__assert_fail@plt+0x722c>
   18a30:	mov	r1, r0
   18a34:	mov	r0, #0
   18a38:	b	18a28 <__assert_fail@plt+0x7248>
   18a3c:	mov	r3, #0
   18a40:	str	r3, [r0]
   18a44:	str	r3, [r0, #4]
   18a48:	bx	lr
   18a4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a50:	sub	sp, sp, #52	; 0x34
   18a54:	add	r6, sp, #16
   18a58:	mov	r4, r1
   18a5c:	mov	r5, r2
   18a60:	mov	r1, #0
   18a64:	mov	r8, r0
   18a68:	mov	r2, #32
   18a6c:	mov	r0, r6
   18a70:	mov	r7, r3
   18a74:	add	r5, r4, r5
   18a78:	bl	1169c <memset@plt>
   18a7c:	mov	r1, r4
   18a80:	mov	ip, #1
   18a84:	cmp	r1, r5
   18a88:	bne	18b18 <__assert_fail@plt+0x7338>
   18a8c:	mov	r0, r8
   18a90:	bl	114b0 <getc_unlocked@plt>
   18a94:	cmp	r0, #0
   18a98:	mov	r5, r0
   18a9c:	bge	18b34 <__assert_fail@plt+0x7354>
   18aa0:	ldm	r7, {r3, r6}
   18aa4:	add	r9, sp, #48	; 0x30
   18aa8:	mov	r4, #0
   18aac:	mov	sl, #1
   18ab0:	mvn	fp, #0
   18ab4:	str	r3, [r9, #-36]!	; 0xffffffdc
   18ab8:	clz	r3, r4
   18abc:	lsr	r3, r3, #5
   18ac0:	ands	r3, r3, r5, lsr #31
   18ac4:	bne	18b90 <__assert_fail@plt+0x73b0>
   18ac8:	ldr	r3, [sp, #12]
   18acc:	cmp	r4, r3
   18ad0:	bne	18af0 <__assert_fail@plt+0x7310>
   18ad4:	mov	r0, r6
   18ad8:	str	sl, [sp]
   18adc:	mov	r3, fp
   18ae0:	mov	r2, #1
   18ae4:	mov	r1, r9
   18ae8:	bl	19864 <__assert_fail@plt+0x8084>
   18aec:	mov	r6, r0
   18af0:	cmp	r5, #0
   18af4:	bge	18b58 <__assert_fail@plt+0x7378>
   18af8:	mov	r3, #0
   18afc:	strb	r3, [r6, r4]
   18b00:	ldr	r3, [sp, #12]
   18b04:	mov	r0, r4
   18b08:	str	r6, [r7, #4]
   18b0c:	str	r3, [r7]
   18b10:	add	sp, sp, #52	; 0x34
   18b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b18:	ldrb	r3, [r1], #1
   18b1c:	lsr	r0, r3, #5
   18b20:	and	r3, r3, #31
   18b24:	ldr	r2, [r6, r0, lsl #2]
   18b28:	orr	r3, r2, ip, lsl r3
   18b2c:	str	r3, [r6, r0, lsl #2]
   18b30:	b	18a84 <__assert_fail@plt+0x72a4>
   18b34:	lsr	r2, r0, #5
   18b38:	add	r3, sp, #48	; 0x30
   18b3c:	add	r2, r3, r2, lsl #2
   18b40:	and	r3, r0, #31
   18b44:	ldr	r2, [r2, #-32]	; 0xffffffe0
   18b48:	lsr	r3, r2, r3
   18b4c:	tst	r3, #1
   18b50:	bne	18a8c <__assert_fail@plt+0x72ac>
   18b54:	b	18aa0 <__assert_fail@plt+0x72c0>
   18b58:	lsr	r2, r5, #5
   18b5c:	add	r3, sp, #48	; 0x30
   18b60:	add	r2, r3, r2, lsl #2
   18b64:	and	r3, r5, #31
   18b68:	ldr	r2, [r2, #-32]	; 0xffffffe0
   18b6c:	lsr	r3, r2, r3
   18b70:	tst	r3, #1
   18b74:	bne	18af8 <__assert_fail@plt+0x7318>
   18b78:	strb	r5, [r6, r4]
   18b7c:	mov	r0, r8
   18b80:	bl	114b0 <getc_unlocked@plt>
   18b84:	add	r4, r4, #1
   18b88:	mov	r5, r0
   18b8c:	b	18ab8 <__assert_fail@plt+0x72d8>
   18b90:	mvn	r0, #0
   18b94:	b	18b10 <__assert_fail@plt+0x7330>
   18b98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b9c:	cmp	r1, #0
   18ba0:	sub	sp, sp, #36	; 0x24
   18ba4:	mov	r8, r0
   18ba8:	addne	r0, r1, #1
   18bac:	moveq	r0, #64	; 0x40
   18bb0:	mov	r1, #4
   18bb4:	mov	r9, r2
   18bb8:	mov	sl, r3
   18bbc:	str	r0, [sp, #20]
   18bc0:	bl	197cc <__assert_fail@plt+0x7fec>
   18bc4:	mov	r1, #4
   18bc8:	mov	fp, #4
   18bcc:	mov	r4, #0
   18bd0:	mov	r6, r0
   18bd4:	ldr	r0, [sp, #20]
   18bd8:	bl	197cc <__assert_fail@plt+0x7fec>
   18bdc:	str	r4, [sp, #24]
   18be0:	str	r4, [sp, #28]
   18be4:	mov	r5, r0
   18be8:	add	r3, sp, #24
   18bec:	mov	r2, sl
   18bf0:	mov	r1, r9
   18bf4:	mov	r0, r8
   18bf8:	bl	18a4c <__assert_fail@plt+0x726c>
   18bfc:	ldr	r3, [sp, #20]
   18c00:	cmp	r4, r3
   18c04:	mov	r7, r0
   18c08:	blt	18c3c <__assert_fail@plt+0x745c>
   18c0c:	mvn	r3, #0
   18c10:	mov	r2, #1
   18c14:	add	r1, sp, #20
   18c18:	mov	r0, r6
   18c1c:	str	fp, [sp]
   18c20:	bl	19864 <__assert_fail@plt+0x8084>
   18c24:	mov	r2, #4
   18c28:	ldr	r1, [sp, #20]
   18c2c:	mov	r6, r0
   18c30:	mov	r0, r5
   18c34:	bl	19770 <__assert_fail@plt+0x7f90>
   18c38:	mov	r5, r0
   18c3c:	cmn	r7, #1
   18c40:	bne	18c88 <__assert_fail@plt+0x74a8>
   18c44:	mov	r3, #0
   18c48:	str	r3, [r6, r4, lsl #2]
   18c4c:	ldr	r0, [sp, #28]
   18c50:	str	r3, [r5, r4, lsl #2]
   18c54:	bl	16840 <__assert_fail@plt+0x5060>
   18c58:	ldr	r3, [sp, #72]	; 0x48
   18c5c:	str	r6, [r3]
   18c60:	ldr	r3, [sp, #76]	; 0x4c
   18c64:	cmp	r3, #0
   18c68:	ldrne	r3, [sp, #76]	; 0x4c
   18c6c:	strne	r5, [r3]
   18c70:	bne	18c7c <__assert_fail@plt+0x749c>
   18c74:	mov	r0, r5
   18c78:	bl	16840 <__assert_fail@plt+0x5060>
   18c7c:	mov	r0, r4
   18c80:	add	sp, sp, #36	; 0x24
   18c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c88:	add	r2, r7, #1
   18c8c:	mov	r1, #1
   18c90:	mov	r0, r2
   18c94:	str	r2, [sp, #12]
   18c98:	bl	197cc <__assert_fail@plt+0x7fec>
   18c9c:	str	r7, [r5, r4, lsl #2]
   18ca0:	ldr	r2, [sp, #12]
   18ca4:	ldr	r1, [sp, #28]
   18ca8:	bl	11474 <memcpy@plt>
   18cac:	str	r0, [r6, r4, lsl #2]
   18cb0:	add	r4, r4, #1
   18cb4:	b	18be8 <__assert_fail@plt+0x7408>
   18cb8:	push	{r4, r5, r6, r7, r8, lr}
   18cbc:	mov	r7, r0
   18cc0:	ldr	r5, [pc, #88]	; 18d20 <__assert_fail@plt+0x7540>
   18cc4:	mov	r8, r1
   18cc8:	mov	r4, r2
   18ccc:	mov	r2, r4
   18cd0:	mov	r1, r8
   18cd4:	mov	r0, r7
   18cd8:	bl	116c0 <write@plt>
   18cdc:	subs	r6, r0, #0
   18ce0:	bge	18d10 <__assert_fail@plt+0x7530>
   18ce4:	bl	1166c <__errno_location@plt>
   18ce8:	ldr	r3, [r0]
   18cec:	cmp	r3, #4
   18cf0:	beq	18ccc <__assert_fail@plt+0x74ec>
   18cf4:	cmp	r4, r5
   18cf8:	sub	r3, r3, #22
   18cfc:	clz	r3, r3
   18d00:	lsr	r3, r3, #5
   18d04:	movls	r3, #0
   18d08:	cmp	r3, #0
   18d0c:	bne	18d18 <__assert_fail@plt+0x7538>
   18d10:	mov	r0, r6
   18d14:	pop	{r4, r5, r6, r7, r8, pc}
   18d18:	mov	r4, r5
   18d1c:	b	18ccc <__assert_fail@plt+0x74ec>
   18d20:	svcvc	0x00f00000	; IMB
   18d24:	push	{r4, r5, r6, lr}
   18d28:	mov	r2, r1
   18d2c:	mov	r4, r1
   18d30:	mov	r1, #0
   18d34:	mov	r5, r0
   18d38:	bl	116e4 <memchr@plt>
   18d3c:	cmp	r0, #0
   18d40:	subne	r4, r0, r5
   18d44:	addne	r4, r4, #1
   18d48:	mov	r0, r4
   18d4c:	pop	{r4, r5, r6, pc}
   18d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d54:	sub	sp, sp, #68	; 0x44
   18d58:	mov	r8, r1
   18d5c:	bl	114d4 <strdup@plt>
   18d60:	subs	r4, r0, #0
   18d64:	bne	18d6c <__assert_fail@plt+0x758c>
   18d68:	bl	19b88 <__assert_fail@plt+0x83a8>
   18d6c:	bl	1157c <__ctype_get_mb_cur_max@plt>
   18d70:	cmp	r0, #1
   18d74:	bls	19130 <__assert_fail@plt+0x7950>
   18d78:	cmp	r8, #0
   18d7c:	bne	18e50 <__assert_fail@plt+0x7670>
   18d80:	mov	r0, r4
   18d84:	str	r4, [sp, #24]
   18d88:	bl	1163c <strlen@plt>
   18d8c:	ldr	sl, [pc, #1084]	; 191d0 <__assert_fail@plt+0x79f0>
   18d90:	mov	r2, #0
   18d94:	add	r8, sp, #12
   18d98:	mov	r7, r2
   18d9c:	mov	r5, r2
   18da0:	mov	r9, #1
   18da4:	str	r2, [sp, #12]
   18da8:	strb	r2, [sp, #8]
   18dac:	str	r2, [r8, #4]
   18db0:	strb	r2, [sp, #20]
   18db4:	add	r0, r4, r0
   18db8:	str	r0, [sp, #4]
   18dbc:	ldr	r6, [sp, #24]
   18dc0:	ldr	fp, [sp, #4]
   18dc4:	cmp	r6, fp
   18dc8:	bcs	19120 <__assert_fail@plt+0x7940>
   18dcc:	ldrb	r3, [sp, #20]
   18dd0:	cmp	r3, #0
   18dd4:	bne	18e14 <__assert_fail@plt+0x7634>
   18dd8:	ldrb	r3, [sp, #8]
   18ddc:	cmp	r3, #0
   18de0:	bne	19098 <__assert_fail@plt+0x78b8>
   18de4:	ldrb	r3, [r6]
   18de8:	lsr	r2, r3, #5
   18dec:	and	r3, r3, #31
   18df0:	ldr	r2, [sl, r2, lsl #2]
   18df4:	lsr	r3, r2, r3
   18df8:	tst	r3, #1
   18dfc:	beq	19084 <__assert_fail@plt+0x78a4>
   18e00:	str	r9, [sp, #28]
   18e04:	ldrb	r3, [r6]
   18e08:	strb	r9, [sp, #32]
   18e0c:	str	r3, [sp, #36]	; 0x24
   18e10:	strb	r9, [sp, #20]
   18e14:	cmp	r5, #0
   18e18:	ldr	r6, [sp, #24]
   18e1c:	beq	1901c <__assert_fail@plt+0x783c>
   18e20:	cmp	r5, #1
   18e24:	bne	19050 <__assert_fail@plt+0x7870>
   18e28:	ldrb	r3, [sp, #32]
   18e2c:	cmp	r3, #0
   18e30:	beq	19038 <__assert_fail@plt+0x7858>
   18e34:	ldr	r0, [sp, #36]	; 0x24
   18e38:	bl	11630 <iswspace@plt>
   18e3c:	cmp	r0, #0
   18e40:	movne	r7, r6
   18e44:	moveq	r5, #1
   18e48:	movne	r5, #2
   18e4c:	b	19038 <__assert_fail@plt+0x7858>
   18e50:	mov	r0, r4
   18e54:	str	r4, [sp, #24]
   18e58:	bl	1163c <strlen@plt>
   18e5c:	ldr	r9, [pc, #876]	; 191d0 <__assert_fail@plt+0x79f0>
   18e60:	add	r5, sp, #12
   18e64:	mov	r6, #1
   18e68:	mov	r3, #0
   18e6c:	str	r3, [sp, #12]
   18e70:	strb	r3, [sp, #8]
   18e74:	str	r3, [r5, #4]
   18e78:	strb	r3, [sp, #20]
   18e7c:	add	r0, r4, r0
   18e80:	str	r0, [sp, #4]
   18e84:	ldr	r7, [sp, #24]
   18e88:	ldr	sl, [sp, #4]
   18e8c:	cmp	r7, sl
   18e90:	bcc	18ec4 <__assert_fail@plt+0x76e4>
   18e94:	ldr	r5, [sp, #24]
   18e98:	mov	r0, r5
   18e9c:	bl	1163c <strlen@plt>
   18ea0:	mov	r1, r5
   18ea4:	add	r2, r0, #1
   18ea8:	mov	r0, r4
   18eac:	bl	11444 <memmove@plt>
   18eb0:	cmp	r8, #1
   18eb4:	bne	18d80 <__assert_fail@plt+0x75a0>
   18eb8:	mov	r0, r4
   18ebc:	add	sp, sp, #68	; 0x44
   18ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ec4:	ldrb	r3, [sp, #20]
   18ec8:	cmp	r3, #0
   18ecc:	bne	18f0c <__assert_fail@plt+0x772c>
   18ed0:	ldrb	r3, [sp, #8]
   18ed4:	cmp	r3, #0
   18ed8:	bne	18f6c <__assert_fail@plt+0x778c>
   18edc:	ldrb	r3, [r7]
   18ee0:	lsr	r2, r3, #5
   18ee4:	and	r3, r3, #31
   18ee8:	ldr	r2, [r9, r2, lsl #2]
   18eec:	lsr	r3, r2, r3
   18ef0:	tst	r3, #1
   18ef4:	beq	18f44 <__assert_fail@plt+0x7764>
   18ef8:	str	r6, [sp, #28]
   18efc:	ldrb	r3, [r7]
   18f00:	strb	r6, [sp, #32]
   18f04:	str	r3, [sp, #36]	; 0x24
   18f08:	strb	r6, [sp, #20]
   18f0c:	ldrb	r3, [sp, #32]
   18f10:	cmp	r3, #0
   18f14:	beq	18e94 <__assert_fail@plt+0x76b4>
   18f18:	ldr	r0, [sp, #36]	; 0x24
   18f1c:	bl	11630 <iswspace@plt>
   18f20:	cmp	r0, #0
   18f24:	beq	18e94 <__assert_fail@plt+0x76b4>
   18f28:	ldr	r3, [sp, #24]
   18f2c:	ldr	r2, [sp, #28]
   18f30:	add	r3, r3, r2
   18f34:	str	r3, [sp, #24]
   18f38:	mov	r3, #0
   18f3c:	strb	r3, [sp, #20]
   18f40:	b	18e84 <__assert_fail@plt+0x76a4>
   18f44:	mov	r0, r5
   18f48:	bl	1148c <mbsinit@plt>
   18f4c:	cmp	r0, #0
   18f50:	bne	18f68 <__assert_fail@plt+0x7788>
   18f54:	ldr	r3, [pc, #632]	; 191d4 <__assert_fail@plt+0x79f4>
   18f58:	ldr	r1, [pc, #632]	; 191d8 <__assert_fail@plt+0x79f8>
   18f5c:	ldr	r0, [pc, #632]	; 191dc <__assert_fail@plt+0x79fc>
   18f60:	mov	r2, #135	; 0x87
   18f64:	bl	117e0 <__assert_fail@plt>
   18f68:	strb	r6, [sp, #8]
   18f6c:	mov	r3, r5
   18f70:	sub	r2, sl, r7
   18f74:	mov	r1, r7
   18f78:	add	r0, sp, #36	; 0x24
   18f7c:	bl	1a064 <__assert_fail@plt+0x8884>
   18f80:	cmn	r0, #1
   18f84:	str	r0, [sp, #28]
   18f88:	streq	r6, [sp, #28]
   18f8c:	beq	18fa8 <__assert_fail@plt+0x77c8>
   18f90:	cmn	r0, #2
   18f94:	ldr	r2, [sp, #24]
   18f98:	bne	18fb4 <__assert_fail@plt+0x77d4>
   18f9c:	ldr	r3, [sp, #4]
   18fa0:	sub	r3, r3, r2
   18fa4:	str	r3, [sp, #28]
   18fa8:	mov	r3, #0
   18fac:	strb	r3, [sp, #32]
   18fb0:	b	18f08 <__assert_fail@plt+0x7728>
   18fb4:	cmp	r0, #0
   18fb8:	bne	19000 <__assert_fail@plt+0x7820>
   18fbc:	str	r6, [sp, #28]
   18fc0:	ldrb	r3, [r2]
   18fc4:	cmp	r3, #0
   18fc8:	beq	18fe0 <__assert_fail@plt+0x7800>
   18fcc:	ldr	r3, [pc, #512]	; 191d4 <__assert_fail@plt+0x79f4>
   18fd0:	mov	r2, #162	; 0xa2
   18fd4:	ldr	r1, [pc, #508]	; 191d8 <__assert_fail@plt+0x79f8>
   18fd8:	ldr	r0, [pc, #512]	; 191e0 <__assert_fail@plt+0x7a00>
   18fdc:	b	18f64 <__assert_fail@plt+0x7784>
   18fe0:	ldr	r3, [sp, #36]	; 0x24
   18fe4:	cmp	r3, #0
   18fe8:	beq	19000 <__assert_fail@plt+0x7820>
   18fec:	ldr	r3, [pc, #480]	; 191d4 <__assert_fail@plt+0x79f4>
   18ff0:	mov	r2, #163	; 0xa3
   18ff4:	ldr	r1, [pc, #476]	; 191d8 <__assert_fail@plt+0x79f8>
   18ff8:	ldr	r0, [pc, #484]	; 191e4 <__assert_fail@plt+0x7a04>
   18ffc:	b	18f64 <__assert_fail@plt+0x7784>
   19000:	mov	r0, r5
   19004:	strb	r6, [sp, #32]
   19008:	bl	1148c <mbsinit@plt>
   1900c:	cmp	r0, #0
   19010:	movne	r3, #0
   19014:	strbne	r3, [sp, #8]
   19018:	b	18f08 <__assert_fail@plt+0x7728>
   1901c:	ldrb	r3, [sp, #32]
   19020:	cmp	r3, #0
   19024:	beq	1907c <__assert_fail@plt+0x789c>
   19028:	ldr	r0, [sp, #36]	; 0x24
   1902c:	bl	11630 <iswspace@plt>
   19030:	clz	r5, r0
   19034:	lsr	r5, r5, #5
   19038:	ldr	r3, [sp, #28]
   1903c:	add	r3, r6, r3
   19040:	str	r3, [sp, #24]
   19044:	mov	r3, #0
   19048:	strb	r3, [sp, #20]
   1904c:	b	18dbc <__assert_fail@plt+0x75dc>
   19050:	cmp	r5, #2
   19054:	bne	1907c <__assert_fail@plt+0x789c>
   19058:	ldrb	r3, [sp, #32]
   1905c:	cmp	r3, #0
   19060:	beq	1907c <__assert_fail@plt+0x789c>
   19064:	ldr	r0, [sp, #36]	; 0x24
   19068:	bl	11630 <iswspace@plt>
   1906c:	cmp	r0, #0
   19070:	movne	r5, #2
   19074:	moveq	r5, #1
   19078:	b	19038 <__assert_fail@plt+0x7858>
   1907c:	mov	r5, #1
   19080:	b	19038 <__assert_fail@plt+0x7858>
   19084:	mov	r0, r8
   19088:	bl	1148c <mbsinit@plt>
   1908c:	cmp	r0, #0
   19090:	beq	18f54 <__assert_fail@plt+0x7774>
   19094:	strb	r9, [sp, #8]
   19098:	mov	r3, r8
   1909c:	sub	r2, fp, r6
   190a0:	mov	r1, r6
   190a4:	add	r0, sp, #36	; 0x24
   190a8:	bl	1a064 <__assert_fail@plt+0x8884>
   190ac:	cmn	r0, #1
   190b0:	str	r0, [sp, #28]
   190b4:	streq	r9, [sp, #28]
   190b8:	beq	190d4 <__assert_fail@plt+0x78f4>
   190bc:	cmn	r0, #2
   190c0:	ldr	r2, [sp, #24]
   190c4:	bne	190e0 <__assert_fail@plt+0x7900>
   190c8:	ldr	r3, [sp, #4]
   190cc:	sub	r3, r3, r2
   190d0:	str	r3, [sp, #28]
   190d4:	mov	r3, #0
   190d8:	strb	r3, [sp, #32]
   190dc:	b	18e10 <__assert_fail@plt+0x7630>
   190e0:	cmp	r0, #0
   190e4:	bne	19104 <__assert_fail@plt+0x7924>
   190e8:	str	r9, [sp, #28]
   190ec:	ldrb	r3, [r2]
   190f0:	cmp	r3, #0
   190f4:	bne	18fcc <__assert_fail@plt+0x77ec>
   190f8:	ldr	r3, [sp, #36]	; 0x24
   190fc:	cmp	r3, #0
   19100:	bne	18fec <__assert_fail@plt+0x780c>
   19104:	mov	r0, r8
   19108:	strb	r9, [sp, #32]
   1910c:	bl	1148c <mbsinit@plt>
   19110:	cmp	r0, #0
   19114:	movne	r3, #0
   19118:	strbne	r3, [sp, #8]
   1911c:	b	18e10 <__assert_fail@plt+0x7630>
   19120:	cmp	r5, #2
   19124:	moveq	r3, #0
   19128:	strbeq	r3, [r7]
   1912c:	b	18eb8 <__assert_fail@plt+0x76d8>
   19130:	cmp	r8, #0
   19134:	movne	r6, r4
   19138:	bne	19184 <__assert_fail@plt+0x79a4>
   1913c:	mov	r0, r4
   19140:	bl	1163c <strlen@plt>
   19144:	mov	r7, #0
   19148:	sub	r0, r0, #1
   1914c:	add	r5, r4, r0
   19150:	cmp	r4, r5
   19154:	mov	r6, r5
   19158:	bhi	18eb8 <__assert_fail@plt+0x76d8>
   1915c:	bl	11618 <__ctype_b_loc@plt>
   19160:	ldrb	r3, [r6]
   19164:	sub	r5, r5, #1
   19168:	lsl	r3, r3, #1
   1916c:	ldr	r2, [r0]
   19170:	ldrh	r3, [r2, r3]
   19174:	tst	r3, #8192	; 0x2000
   19178:	beq	18eb8 <__assert_fail@plt+0x76d8>
   1917c:	strb	r7, [r5, #1]
   19180:	b	19150 <__assert_fail@plt+0x7970>
   19184:	mov	r7, r6
   19188:	ldrb	r5, [r6], #1
   1918c:	cmp	r5, #0
   19190:	beq	191ac <__assert_fail@plt+0x79cc>
   19194:	bl	11618 <__ctype_b_loc@plt>
   19198:	lsl	r5, r5, #1
   1919c:	ldr	r3, [r0]
   191a0:	ldrh	r3, [r3, r5]
   191a4:	tst	r3, #8192	; 0x2000
   191a8:	bne	19184 <__assert_fail@plt+0x79a4>
   191ac:	mov	r0, r7
   191b0:	bl	1163c <strlen@plt>
   191b4:	mov	r1, r7
   191b8:	add	r2, r0, #1
   191bc:	mov	r0, r4
   191c0:	bl	11444 <memmove@plt>
   191c4:	cmp	r8, #1
   191c8:	bne	1913c <__assert_fail@plt+0x795c>
   191cc:	b	18eb8 <__assert_fail@plt+0x76d8>
   191d0:	strdeq	pc, [r1], -r0
   191d4:	andeq	pc, r1, r7, lsr #23
   191d8:			; <UNDEFINED> instruction: 0x0001fbb9
   191dc:	muleq	r1, r8, sl
   191e0:	andeq	pc, r1, pc, lsr #21
   191e4:	andeq	pc, r1, r6, asr #21
   191e8:	push	{r4, r5, r6, lr}
   191ec:	sub	sp, sp, #32
   191f0:	cmp	r1, #0
   191f4:	mov	r5, r0
   191f8:	ldr	r4, [sp, #48]	; 0x30
   191fc:	ldr	r6, [sp, #52]	; 0x34
   19200:	beq	192b4 <__assert_fail@plt+0x7ad4>
   19204:	stm	sp, {r2, r3}
   19208:	mov	r3, r1
   1920c:	ldr	r2, [pc, #860]	; 19570 <__assert_fail@plt+0x7d90>
   19210:	mov	r1, #1
   19214:	bl	116d8 <__fprintf_chk@plt>
   19218:	mov	r2, #5
   1921c:	ldr	r1, [pc, #848]	; 19574 <__assert_fail@plt+0x7d94>
   19220:	mov	r0, #0
   19224:	bl	114bc <dcgettext@plt>
   19228:	ldr	r3, [pc, #840]	; 19578 <__assert_fail@plt+0x7d98>
   1922c:	ldr	r2, [pc, #840]	; 1957c <__assert_fail@plt+0x7d9c>
   19230:	str	r3, [sp]
   19234:	mov	r1, #1
   19238:	mov	r3, r0
   1923c:	mov	r0, r5
   19240:	bl	116d8 <__fprintf_chk@plt>
   19244:	mov	r1, r5
   19248:	mov	r0, #10
   1924c:	bl	114a4 <fputc_unlocked@plt>
   19250:	mov	r2, #5
   19254:	ldr	r1, [pc, #804]	; 19580 <__assert_fail@plt+0x7da0>
   19258:	mov	r0, #0
   1925c:	bl	114bc <dcgettext@plt>
   19260:	mov	r1, #1
   19264:	ldr	r3, [pc, #792]	; 19584 <__assert_fail@plt+0x7da4>
   19268:	mov	r2, r0
   1926c:	mov	r0, r5
   19270:	bl	116d8 <__fprintf_chk@plt>
   19274:	mov	r1, r5
   19278:	mov	r0, #10
   1927c:	bl	114a4 <fputc_unlocked@plt>
   19280:	cmp	r6, #9
   19284:	ldrls	pc, [pc, r6, lsl #2]
   19288:	b	19564 <__assert_fail@plt+0x7d84>
   1928c:	andeq	r9, r1, r4, lsr #7
   19290:	andeq	r9, r1, ip, asr #5
   19294:	strdeq	r9, [r1], -r8
   19298:	andeq	r9, r1, ip, lsr #6
   1929c:	andeq	r9, r1, r8, ror #6
   192a0:	andeq	r9, r1, ip, lsr #7
   192a4:	strdeq	r9, [r1], -r4
   192a8:	andeq	r9, r1, r4, asr #8
   192ac:	muleq	r1, ip, r4
   192b0:	strdeq	r9, [r1], -ip
   192b4:	str	r3, [sp]
   192b8:	mov	r1, #1
   192bc:	mov	r3, r2
   192c0:	ldr	r2, [pc, #704]	; 19588 <__assert_fail@plt+0x7da8>
   192c4:	bl	116d8 <__fprintf_chk@plt>
   192c8:	b	19218 <__assert_fail@plt+0x7a38>
   192cc:	mov	r2, #5
   192d0:	ldr	r1, [pc, #692]	; 1958c <__assert_fail@plt+0x7dac>
   192d4:	mov	r0, #0
   192d8:	bl	114bc <dcgettext@plt>
   192dc:	ldr	r3, [r4]
   192e0:	mov	r1, #1
   192e4:	mov	r2, r0
   192e8:	mov	r0, r5
   192ec:	add	sp, sp, #32
   192f0:	pop	{r4, r5, r6, lr}
   192f4:	b	116d8 <__fprintf_chk@plt>
   192f8:	mov	r2, #5
   192fc:	ldr	r1, [pc, #652]	; 19590 <__assert_fail@plt+0x7db0>
   19300:	mov	r0, #0
   19304:	bl	114bc <dcgettext@plt>
   19308:	ldr	r3, [r4, #4]
   1930c:	mov	r1, #1
   19310:	str	r3, [sp, #48]	; 0x30
   19314:	ldr	r3, [r4]
   19318:	mov	r2, r0
   1931c:	mov	r0, r5
   19320:	add	sp, sp, #32
   19324:	pop	{r4, r5, r6, lr}
   19328:	b	116d8 <__fprintf_chk@plt>
   1932c:	mov	r2, #5
   19330:	ldr	r1, [pc, #604]	; 19594 <__assert_fail@plt+0x7db4>
   19334:	mov	r0, #0
   19338:	bl	114bc <dcgettext@plt>
   1933c:	ldr	r3, [r4, #8]
   19340:	mov	r1, #1
   19344:	str	r3, [sp, #52]	; 0x34
   19348:	ldr	r3, [r4, #4]
   1934c:	str	r3, [sp, #48]	; 0x30
   19350:	ldr	r3, [r4]
   19354:	mov	r2, r0
   19358:	mov	r0, r5
   1935c:	add	sp, sp, #32
   19360:	pop	{r4, r5, r6, lr}
   19364:	b	116d8 <__fprintf_chk@plt>
   19368:	mov	r2, #5
   1936c:	ldr	r1, [pc, #548]	; 19598 <__assert_fail@plt+0x7db8>
   19370:	mov	r0, #0
   19374:	bl	114bc <dcgettext@plt>
   19378:	ldr	r3, [r4, #12]
   1937c:	mov	r1, #1
   19380:	str	r3, [sp, #8]
   19384:	ldr	r3, [r4, #8]
   19388:	str	r3, [sp, #4]
   1938c:	ldr	r3, [r4, #4]
   19390:	str	r3, [sp]
   19394:	ldr	r3, [r4]
   19398:	mov	r2, r0
   1939c:	mov	r0, r5
   193a0:	bl	116d8 <__fprintf_chk@plt>
   193a4:	add	sp, sp, #32
   193a8:	pop	{r4, r5, r6, pc}
   193ac:	mov	r2, #5
   193b0:	ldr	r1, [pc, #484]	; 1959c <__assert_fail@plt+0x7dbc>
   193b4:	mov	r0, #0
   193b8:	bl	114bc <dcgettext@plt>
   193bc:	ldr	r3, [r4, #16]
   193c0:	mov	r1, #1
   193c4:	str	r3, [sp, #12]
   193c8:	ldr	r3, [r4, #12]
   193cc:	str	r3, [sp, #8]
   193d0:	ldr	r3, [r4, #8]
   193d4:	str	r3, [sp, #4]
   193d8:	ldr	r3, [r4, #4]
   193dc:	str	r3, [sp]
   193e0:	ldr	r3, [r4]
   193e4:	mov	r2, r0
   193e8:	mov	r0, r5
   193ec:	bl	116d8 <__fprintf_chk@plt>
   193f0:	b	193a4 <__assert_fail@plt+0x7bc4>
   193f4:	mov	r2, #5
   193f8:	ldr	r1, [pc, #416]	; 195a0 <__assert_fail@plt+0x7dc0>
   193fc:	mov	r0, #0
   19400:	bl	114bc <dcgettext@plt>
   19404:	ldr	r3, [r4, #20]
   19408:	mov	r1, #1
   1940c:	str	r3, [sp, #16]
   19410:	ldr	r3, [r4, #16]
   19414:	str	r3, [sp, #12]
   19418:	ldr	r3, [r4, #12]
   1941c:	str	r3, [sp, #8]
   19420:	ldr	r3, [r4, #8]
   19424:	str	r3, [sp, #4]
   19428:	ldr	r3, [r4, #4]
   1942c:	str	r3, [sp]
   19430:	ldr	r3, [r4]
   19434:	mov	r2, r0
   19438:	mov	r0, r5
   1943c:	bl	116d8 <__fprintf_chk@plt>
   19440:	b	193a4 <__assert_fail@plt+0x7bc4>
   19444:	mov	r2, #5
   19448:	ldr	r1, [pc, #340]	; 195a4 <__assert_fail@plt+0x7dc4>
   1944c:	mov	r0, #0
   19450:	bl	114bc <dcgettext@plt>
   19454:	ldr	r3, [r4, #24]
   19458:	mov	r1, #1
   1945c:	str	r3, [sp, #20]
   19460:	ldr	r3, [r4, #20]
   19464:	str	r3, [sp, #16]
   19468:	ldr	r3, [r4, #16]
   1946c:	str	r3, [sp, #12]
   19470:	ldr	r3, [r4, #12]
   19474:	str	r3, [sp, #8]
   19478:	ldr	r3, [r4, #8]
   1947c:	str	r3, [sp, #4]
   19480:	ldr	r3, [r4, #4]
   19484:	str	r3, [sp]
   19488:	ldr	r3, [r4]
   1948c:	mov	r2, r0
   19490:	mov	r0, r5
   19494:	bl	116d8 <__fprintf_chk@plt>
   19498:	b	193a4 <__assert_fail@plt+0x7bc4>
   1949c:	mov	r2, #5
   194a0:	ldr	r1, [pc, #256]	; 195a8 <__assert_fail@plt+0x7dc8>
   194a4:	mov	r0, #0
   194a8:	bl	114bc <dcgettext@plt>
   194ac:	ldr	r3, [r4, #28]
   194b0:	mov	r1, #1
   194b4:	str	r3, [sp, #24]
   194b8:	ldr	r3, [r4, #24]
   194bc:	str	r3, [sp, #20]
   194c0:	ldr	r3, [r4, #20]
   194c4:	str	r3, [sp, #16]
   194c8:	ldr	r3, [r4, #16]
   194cc:	str	r3, [sp, #12]
   194d0:	ldr	r3, [r4, #12]
   194d4:	str	r3, [sp, #8]
   194d8:	ldr	r3, [r4, #8]
   194dc:	str	r3, [sp, #4]
   194e0:	ldr	r3, [r4, #4]
   194e4:	str	r3, [sp]
   194e8:	ldr	r3, [r4]
   194ec:	mov	r2, r0
   194f0:	mov	r0, r5
   194f4:	bl	116d8 <__fprintf_chk@plt>
   194f8:	b	193a4 <__assert_fail@plt+0x7bc4>
   194fc:	ldr	r1, [pc, #168]	; 195ac <__assert_fail@plt+0x7dcc>
   19500:	mov	r2, #5
   19504:	mov	r0, #0
   19508:	bl	114bc <dcgettext@plt>
   1950c:	ldr	r3, [r4, #32]
   19510:	mov	r1, #1
   19514:	str	r3, [sp, #28]
   19518:	ldr	r3, [r4, #28]
   1951c:	str	r3, [sp, #24]
   19520:	ldr	r3, [r4, #24]
   19524:	str	r3, [sp, #20]
   19528:	ldr	r3, [r4, #20]
   1952c:	str	r3, [sp, #16]
   19530:	ldr	r3, [r4, #16]
   19534:	str	r3, [sp, #12]
   19538:	ldr	r3, [r4, #12]
   1953c:	str	r3, [sp, #8]
   19540:	ldr	r3, [r4, #8]
   19544:	str	r3, [sp, #4]
   19548:	ldr	r3, [r4, #4]
   1954c:	str	r3, [sp]
   19550:	ldr	r3, [r4]
   19554:	mov	r2, r0
   19558:	mov	r0, r5
   1955c:	bl	116d8 <__fprintf_chk@plt>
   19560:	b	193a4 <__assert_fail@plt+0x7bc4>
   19564:	mov	r2, #5
   19568:	ldr	r1, [pc, #64]	; 195b0 <__assert_fail@plt+0x7dd0>
   1956c:	b	19504 <__assert_fail@plt+0x7d24>
   19570:	andeq	pc, r1, r6, asr #23
   19574:	ldrdeq	pc, [r1], -r9
   19578:	andeq	r0, r0, r6, ror #15
   1957c:	andeq	pc, r1, r7, lsr #29
   19580:	ldrdeq	pc, [r1], -sp
   19584:	andeq	pc, r1, r8, lsl #25
   19588:	ldrdeq	pc, [r1], -r2
   1958c:	andeq	pc, r1, sl, lsr #25
   19590:			; <UNDEFINED> instruction: 0x0001fcba
   19594:	ldrdeq	pc, [r1], -r1
   19598:	andeq	pc, r1, sp, ror #25
   1959c:	andeq	pc, r1, sp, lsl #26
   195a0:	andeq	pc, r1, r1, lsr sp	; <UNPREDICTABLE>
   195a4:	andeq	pc, r1, r9, asr sp	; <UNPREDICTABLE>
   195a8:	andeq	pc, r1, r5, lsl #27
   195ac:			; <UNDEFINED> instruction: 0x0001fdb5
   195b0:	andeq	pc, r1, r9, ror #27
   195b4:	push	{r0, r1, r4, lr}
   195b8:	mov	ip, #0
   195bc:	ldr	lr, [sp, #16]
   195c0:	ldr	r4, [lr, ip, lsl #2]
   195c4:	cmp	r4, #0
   195c8:	bne	195e0 <__assert_fail@plt+0x7e00>
   195cc:	str	ip, [sp, #4]
   195d0:	str	lr, [sp]
   195d4:	bl	191e8 <__assert_fail@plt+0x7a08>
   195d8:	add	sp, sp, #8
   195dc:	pop	{r4, pc}
   195e0:	add	ip, ip, #1
   195e4:	b	195c0 <__assert_fail@plt+0x7de0>
   195e8:	push	{r4, r5, lr}
   195ec:	sub	sp, sp, #52	; 0x34
   195f0:	mov	ip, #0
   195f4:	ldr	r5, [sp, #64]	; 0x40
   195f8:	add	lr, sp, #8
   195fc:	ldr	r4, [r5, ip, lsl #2]
   19600:	cmp	r4, #0
   19604:	str	r4, [lr, ip, lsl #2]
   19608:	beq	19618 <__assert_fail@plt+0x7e38>
   1960c:	add	ip, ip, #1
   19610:	cmp	ip, #10
   19614:	bne	195fc <__assert_fail@plt+0x7e1c>
   19618:	str	ip, [sp, #4]
   1961c:	str	lr, [sp]
   19620:	bl	191e8 <__assert_fail@plt+0x7a08>
   19624:	add	sp, sp, #52	; 0x34
   19628:	pop	{r4, r5, pc}
   1962c:	push	{r3}		; (str r3, [sp, #-4]!)
   19630:	push	{r0, r1, r2, r3, lr}
   19634:	add	r3, sp, #24
   19638:	str	r3, [sp, #12]
   1963c:	str	r3, [sp]
   19640:	ldr	r3, [sp, #20]
   19644:	bl	195e8 <__assert_fail@plt+0x7e08>
   19648:	add	sp, sp, #16
   1964c:	pop	{lr}		; (ldr lr, [sp], #4)
   19650:	add	sp, sp, #4
   19654:	bx	lr
   19658:	ldr	r3, [pc, #116]	; 196d4 <__assert_fail@plt+0x7ef4>
   1965c:	push	{r4, lr}
   19660:	mov	r0, #10
   19664:	ldr	r1, [r3]
   19668:	bl	114a4 <fputc_unlocked@plt>
   1966c:	mov	r2, #5
   19670:	ldr	r1, [pc, #96]	; 196d8 <__assert_fail@plt+0x7ef8>
   19674:	mov	r0, #0
   19678:	bl	114bc <dcgettext@plt>
   1967c:	ldr	r2, [pc, #88]	; 196dc <__assert_fail@plt+0x7efc>
   19680:	mov	r1, r0
   19684:	mov	r0, #1
   19688:	bl	116b4 <__printf_chk@plt>
   1968c:	mov	r2, #5
   19690:	ldr	r1, [pc, #72]	; 196e0 <__assert_fail@plt+0x7f00>
   19694:	mov	r0, #0
   19698:	bl	114bc <dcgettext@plt>
   1969c:	ldr	r3, [pc, #64]	; 196e4 <__assert_fail@plt+0x7f04>
   196a0:	ldr	r2, [pc, #64]	; 196e8 <__assert_fail@plt+0x7f08>
   196a4:	mov	r1, r0
   196a8:	mov	r0, #1
   196ac:	bl	116b4 <__printf_chk@plt>
   196b0:	mov	r2, #5
   196b4:	ldr	r1, [pc, #48]	; 196ec <__assert_fail@plt+0x7f0c>
   196b8:	mov	r0, #0
   196bc:	bl	114bc <dcgettext@plt>
   196c0:	ldr	r2, [pc, #40]	; 196f0 <__assert_fail@plt+0x7f10>
   196c4:	pop	{r4, lr}
   196c8:	mov	r1, r0
   196cc:	mov	r0, #1
   196d0:	b	116b4 <__printf_chk@plt>
   196d4:	andeq	r1, r3, r4, ror #3
   196d8:	andeq	pc, r1, r5, lsr #28
   196dc:	andeq	pc, r1, r9, lsr lr	; <UNPREDICTABLE>
   196e0:	andeq	pc, r1, pc, asr #28
   196e4:	andeq	pc, r1, r4, ror r8	; <UNPREDICTABLE>
   196e8:	muleq	r1, ip, r8
   196ec:	andeq	pc, r1, r3, ror #28
   196f0:	andeq	pc, r1, sl, lsl #29
   196f4:	push	{r4, lr}
   196f8:	bl	19ca0 <__assert_fail@plt+0x84c0>
   196fc:	cmp	r0, #0
   19700:	popne	{r4, pc}
   19704:	bl	19b88 <__assert_fail@plt+0x83a8>
   19708:	push	{r4, lr}
   1970c:	bl	19ca0 <__assert_fail@plt+0x84c0>
   19710:	cmp	r0, #0
   19714:	popne	{r4, pc}
   19718:	bl	19b88 <__assert_fail@plt+0x83a8>
   1971c:	b	196f4 <__assert_fail@plt+0x7f14>
   19720:	push	{r4, r5, r6, lr}
   19724:	mov	r5, r0
   19728:	mov	r4, r1
   1972c:	bl	19ce0 <__assert_fail@plt+0x8500>
   19730:	cmp	r0, #0
   19734:	popne	{r4, r5, r6, pc}
   19738:	adds	r4, r4, #0
   1973c:	movne	r4, #1
   19740:	cmp	r5, #0
   19744:	orreq	r4, r4, #1
   19748:	cmp	r4, #0
   1974c:	popeq	{r4, r5, r6, pc}
   19750:	bl	19b88 <__assert_fail@plt+0x83a8>
   19754:	push	{r4, lr}
   19758:	cmp	r1, #0
   1975c:	orreq	r1, r1, #1
   19760:	bl	19ce0 <__assert_fail@plt+0x8500>
   19764:	cmp	r0, #0
   19768:	popne	{r4, pc}
   1976c:	bl	19b88 <__assert_fail@plt+0x83a8>
   19770:	push	{r4, r5, r6, lr}
   19774:	mov	r6, r0
   19778:	mov	r5, r1
   1977c:	mov	r4, r2
   19780:	bl	1b5fc <__assert_fail@plt+0x9e1c>
   19784:	cmp	r0, #0
   19788:	popne	{r4, r5, r6, pc}
   1978c:	cmp	r6, #0
   19790:	beq	197a0 <__assert_fail@plt+0x7fc0>
   19794:	cmp	r5, #0
   19798:	cmpne	r4, #0
   1979c:	popeq	{r4, r5, r6, pc}
   197a0:	bl	19b88 <__assert_fail@plt+0x83a8>
   197a4:	b	19770 <__assert_fail@plt+0x7f90>
   197a8:	cmp	r2, #0
   197ac:	cmpne	r1, #0
   197b0:	moveq	r2, #1
   197b4:	moveq	r1, r2
   197b8:	push	{r4, lr}
   197bc:	bl	1b5fc <__assert_fail@plt+0x9e1c>
   197c0:	cmp	r0, #0
   197c4:	popne	{r4, pc}
   197c8:	bl	19b88 <__assert_fail@plt+0x83a8>
   197cc:	mov	r2, r1
   197d0:	mov	r1, r0
   197d4:	mov	r0, #0
   197d8:	b	19770 <__assert_fail@plt+0x7f90>
   197dc:	mov	r2, r1
   197e0:	mov	r1, r0
   197e4:	mov	r0, #0
   197e8:	b	197a8 <__assert_fail@plt+0x7fc8>
   197ec:	push	{r4, r5, r6, r7, r8, lr}
   197f0:	subs	r7, r0, #0
   197f4:	mov	r5, r1
   197f8:	mov	r6, r2
   197fc:	ldr	r4, [r1]
   19800:	bne	1983c <__assert_fail@plt+0x805c>
   19804:	cmp	r4, #0
   19808:	bne	19824 <__assert_fail@plt+0x8044>
   1980c:	mov	r1, r2
   19810:	mov	r0, #64	; 0x40
   19814:	bl	1be1c <__assert_fail@plt+0xa63c>
   19818:	cmp	r0, #0
   1981c:	movne	r4, r0
   19820:	addeq	r4, r0, #1
   19824:	mov	r2, r6
   19828:	mov	r1, r4
   1982c:	mov	r0, r7
   19830:	bl	19770 <__assert_fail@plt+0x7f90>
   19834:	str	r4, [r5]
   19838:	pop	{r4, r5, r6, r7, r8, pc}
   1983c:	lsr	r2, r4, #1
   19840:	add	r3, r2, #1
   19844:	mvn	r3, r3
   19848:	cmp	r4, r3
   1984c:	addls	r4, r4, #1
   19850:	addls	r4, r4, r2
   19854:	bls	19824 <__assert_fail@plt+0x8044>
   19858:	bl	19b88 <__assert_fail@plt+0x83a8>
   1985c:	mov	r2, #1
   19860:	b	197ec <__assert_fail@plt+0x800c>
   19864:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19868:	mov	sl, r0
   1986c:	ldr	r8, [r1]
   19870:	mov	fp, r1
   19874:	mov	r5, r2
   19878:	asrs	r4, r8, #1
   1987c:	mov	r9, r3
   19880:	ldr	r7, [sp, #48]	; 0x30
   19884:	bpl	19920 <__assert_fail@plt+0x8140>
   19888:	rsb	r2, r4, #-2147483648	; 0x80000000
   1988c:	cmp	r8, r2
   19890:	movge	r2, #0
   19894:	movlt	r2, #1
   19898:	mvn	r3, r9
   1989c:	cmp	r2, #0
   198a0:	lsr	r3, r3, #31
   198a4:	addeq	r4, r4, r8
   198a8:	mvnne	r4, #-2147483648	; 0x80000000
   198ac:	mov	r0, r3
   198b0:	cmp	r9, r4
   198b4:	movge	r0, #0
   198b8:	andlt	r0, r0, #1
   198bc:	cmp	r0, #0
   198c0:	str	r3, [sp, #4]
   198c4:	bne	19a94 <__assert_fail@plt+0x82b4>
   198c8:	cmp	r7, #0
   198cc:	bge	199e0 <__assert_fail@plt+0x8200>
   198d0:	cmp	r4, #0
   198d4:	bge	19938 <__assert_fail@plt+0x8158>
   198d8:	mov	r1, r7
   198dc:	mvn	r0, #-2147483648	; 0x80000000
   198e0:	bl	1c028 <__assert_fail@plt+0xa848>
   198e4:	cmp	r0, r4
   198e8:	movle	r0, #0
   198ec:	movgt	r0, #1
   198f0:	cmp	r0, #0
   198f4:	mvnne	r6, #-2147483648	; 0x80000000
   198f8:	beq	19948 <__assert_fail@plt+0x8168>
   198fc:	mov	r1, r7
   19900:	mov	r0, r6
   19904:	bl	1c028 <__assert_fail@plt+0xa848>
   19908:	mov	r1, r7
   1990c:	mov	r4, r0
   19910:	mov	r0, r6
   19914:	bl	1c248 <__assert_fail@plt+0xaa68>
   19918:	sub	r1, r6, r1
   1991c:	b	19958 <__assert_fail@plt+0x8178>
   19920:	mvn	r2, #-2147483648	; 0x80000000
   19924:	sub	r2, r2, r4
   19928:	cmp	r8, r2
   1992c:	movle	r2, #0
   19930:	movgt	r2, #1
   19934:	b	19898 <__assert_fail@plt+0x80b8>
   19938:	cmn	r7, #1
   1993c:	movne	r1, r7
   19940:	movne	r0, #-2147483648	; 0x80000000
   19944:	bne	19aac <__assert_fail@plt+0x82cc>
   19948:	mul	r1, r7, r4
   1994c:	cmp	r1, #63	; 0x3f
   19950:	movle	r6, #64	; 0x40
   19954:	ble	198fc <__assert_fail@plt+0x811c>
   19958:	cmp	sl, #0
   1995c:	sub	r2, r4, r8
   19960:	streq	sl, [fp]
   19964:	cmp	r2, r5
   19968:	bge	19a3c <__assert_fail@plt+0x825c>
   1996c:	cmp	r5, #0
   19970:	bge	19a08 <__assert_fail@plt+0x8228>
   19974:	rsb	r2, r5, #-2147483648	; 0x80000000
   19978:	cmp	r8, r2
   1997c:	movge	r2, #0
   19980:	movlt	r2, #1
   19984:	cmp	r2, #0
   19988:	bne	199dc <__assert_fail@plt+0x81fc>
   1998c:	ldr	r0, [sp, #4]
   19990:	add	r5, r8, r5
   19994:	cmp	r9, r5
   19998:	movge	r0, #0
   1999c:	andlt	r0, r0, #1
   199a0:	cmp	r0, #0
   199a4:	mov	r4, r5
   199a8:	bne	199dc <__assert_fail@plt+0x81fc>
   199ac:	cmp	r7, #0
   199b0:	bge	19a50 <__assert_fail@plt+0x8270>
   199b4:	cmp	r5, #0
   199b8:	bge	19a28 <__assert_fail@plt+0x8248>
   199bc:	mov	r1, r7
   199c0:	mvn	r0, #-2147483648	; 0x80000000
   199c4:	bl	1c028 <__assert_fail@plt+0xa848>
   199c8:	cmp	r5, r0
   199cc:	movge	r0, #0
   199d0:	movlt	r0, #1
   199d4:	cmp	r0, #0
   199d8:	beq	19a38 <__assert_fail@plt+0x8258>
   199dc:	bl	19b88 <__assert_fail@plt+0x83a8>
   199e0:	beq	19948 <__assert_fail@plt+0x8168>
   199e4:	cmp	r4, #0
   199e8:	bge	19aa4 <__assert_fail@plt+0x82c4>
   199ec:	cmn	r4, #1
   199f0:	beq	19948 <__assert_fail@plt+0x8168>
   199f4:	mov	r1, r4
   199f8:	mov	r0, #-2147483648	; 0x80000000
   199fc:	bl	1c028 <__assert_fail@plt+0xa848>
   19a00:	cmp	r7, r0
   19a04:	b	198e8 <__assert_fail@plt+0x8108>
   19a08:	cmp	r8, #0
   19a0c:	blt	1998c <__assert_fail@plt+0x81ac>
   19a10:	mvn	r2, #-2147483648	; 0x80000000
   19a14:	sub	r2, r2, r5
   19a18:	cmp	r8, r2
   19a1c:	movle	r2, #0
   19a20:	movgt	r2, #1
   19a24:	b	19984 <__assert_fail@plt+0x81a4>
   19a28:	cmn	r7, #1
   19a2c:	movne	r1, r7
   19a30:	movne	r0, #-2147483648	; 0x80000000
   19a34:	bne	19a88 <__assert_fail@plt+0x82a8>
   19a38:	mul	r1, r5, r7
   19a3c:	mov	r0, sl
   19a40:	bl	19720 <__assert_fail@plt+0x7f40>
   19a44:	str	r4, [fp]
   19a48:	add	sp, sp, #12
   19a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a50:	beq	19a38 <__assert_fail@plt+0x8258>
   19a54:	cmp	r5, #0
   19a58:	movge	r1, r7
   19a5c:	mvnge	r0, #-2147483648	; 0x80000000
   19a60:	bge	19a88 <__assert_fail@plt+0x82a8>
   19a64:	cmn	r5, #1
   19a68:	beq	19a38 <__assert_fail@plt+0x8258>
   19a6c:	mov	r1, r5
   19a70:	mov	r0, #-2147483648	; 0x80000000
   19a74:	bl	1c028 <__assert_fail@plt+0xa848>
   19a78:	cmp	r7, r0
   19a7c:	movle	r0, #0
   19a80:	movgt	r0, #1
   19a84:	b	199d4 <__assert_fail@plt+0x81f4>
   19a88:	bl	1c028 <__assert_fail@plt+0xa848>
   19a8c:	cmp	r5, r0
   19a90:	b	19a7c <__assert_fail@plt+0x829c>
   19a94:	cmp	r7, #0
   19a98:	mov	r4, r9
   19a9c:	blt	19938 <__assert_fail@plt+0x8158>
   19aa0:	beq	19948 <__assert_fail@plt+0x8168>
   19aa4:	mov	r1, r7
   19aa8:	mvn	r0, #-2147483648	; 0x80000000
   19aac:	bl	1c028 <__assert_fail@plt+0xa848>
   19ab0:	cmp	r0, r4
   19ab4:	movge	r0, #0
   19ab8:	movlt	r0, #1
   19abc:	b	198f0 <__assert_fail@plt+0x8110>
   19ac0:	push	{r4, lr}
   19ac4:	bl	19c58 <__assert_fail@plt+0x8478>
   19ac8:	cmp	r0, #0
   19acc:	popne	{r4, pc}
   19ad0:	bl	19b88 <__assert_fail@plt+0x83a8>
   19ad4:	mov	r1, #1
   19ad8:	b	19ac0 <__assert_fail@plt+0x82e0>
   19adc:	push	{r4, lr}
   19ae0:	bl	19c58 <__assert_fail@plt+0x8478>
   19ae4:	cmp	r0, #0
   19ae8:	popne	{r4, pc}
   19aec:	bl	19b88 <__assert_fail@plt+0x83a8>
   19af0:	mov	r1, #1
   19af4:	b	19adc <__assert_fail@plt+0x82fc>
   19af8:	push	{r4, r5, r6, lr}
   19afc:	mov	r4, r1
   19b00:	mov	r5, r0
   19b04:	mov	r0, r1
   19b08:	bl	196f4 <__assert_fail@plt+0x7f14>
   19b0c:	mov	r2, r4
   19b10:	mov	r1, r5
   19b14:	pop	{r4, r5, r6, lr}
   19b18:	b	11474 <memcpy@plt>
   19b1c:	push	{r4, r5, r6, lr}
   19b20:	mov	r4, r1
   19b24:	mov	r5, r0
   19b28:	mov	r0, r1
   19b2c:	bl	19708 <__assert_fail@plt+0x7f28>
   19b30:	mov	r2, r4
   19b34:	mov	r1, r5
   19b38:	pop	{r4, r5, r6, lr}
   19b3c:	b	11474 <memcpy@plt>
   19b40:	push	{r4, r5, r6, lr}
   19b44:	mov	r5, r0
   19b48:	add	r0, r1, #1
   19b4c:	mov	r4, r1
   19b50:	bl	19708 <__assert_fail@plt+0x7f28>
   19b54:	mov	r2, #0
   19b58:	mov	r1, r5
   19b5c:	strb	r2, [r0, r4]
   19b60:	mov	r2, r4
   19b64:	pop	{r4, r5, r6, lr}
   19b68:	b	11474 <memcpy@plt>
   19b6c:	push	{r4, lr}
   19b70:	mov	r4, r0
   19b74:	bl	1163c <strlen@plt>
   19b78:	add	r1, r0, #1
   19b7c:	mov	r0, r4
   19b80:	pop	{r4, lr}
   19b84:	b	19af8 <__assert_fail@plt+0x8318>
   19b88:	ldr	r3, [pc, #44]	; 19bbc <__assert_fail@plt+0x83dc>
   19b8c:	push	{r4, lr}
   19b90:	mov	r2, #5
   19b94:	ldr	r1, [pc, #36]	; 19bc0 <__assert_fail@plt+0x83e0>
   19b98:	mov	r0, #0
   19b9c:	ldr	r4, [r3]
   19ba0:	bl	114bc <dcgettext@plt>
   19ba4:	ldr	r2, [pc, #24]	; 19bc4 <__assert_fail@plt+0x83e4>
   19ba8:	mov	r1, #0
   19bac:	mov	r3, r0
   19bb0:	mov	r0, r4
   19bb4:	bl	115ac <error@plt>
   19bb8:	bl	117c8 <abort@plt>
   19bbc:	andeq	r1, r3, r4, lsl #3
   19bc0:	ldrdeq	pc, [r1], -r6
   19bc4:	andeq	pc, r1, r0, lsr sl	; <UNPREDICTABLE>
   19bc8:	push	{r0, r1, r4, lr}
   19bcc:	ldr	ip, [sp, #16]
   19bd0:	str	ip, [sp]
   19bd4:	bl	1b648 <__assert_fail@plt+0x9e68>
   19bd8:	subs	r4, r0, #0
   19bdc:	bge	19bf4 <__assert_fail@plt+0x8414>
   19be0:	bl	1166c <__errno_location@plt>
   19be4:	ldr	r3, [r0]
   19be8:	cmp	r3, #12
   19bec:	bne	19bf4 <__assert_fail@plt+0x8414>
   19bf0:	bl	19b88 <__assert_fail@plt+0x83a8>
   19bf4:	mov	r0, r4
   19bf8:	add	sp, sp, #8
   19bfc:	pop	{r4, pc}
   19c00:	push	{r4, lr}
   19c04:	bl	1b858 <__assert_fail@plt+0xa078>
   19c08:	subs	r4, r0, #0
   19c0c:	bne	19c24 <__assert_fail@plt+0x8444>
   19c10:	bl	1166c <__errno_location@plt>
   19c14:	ldr	r3, [r0]
   19c18:	cmp	r3, #12
   19c1c:	bne	19c24 <__assert_fail@plt+0x8444>
   19c20:	bl	19b88 <__assert_fail@plt+0x83a8>
   19c24:	mov	r0, r4
   19c28:	pop	{r4, pc}
   19c2c:	push	{r4, lr}
   19c30:	bl	1ba2c <__assert_fail@plt+0xa24c>
   19c34:	subs	r4, r0, #0
   19c38:	bne	19c50 <__assert_fail@plt+0x8470>
   19c3c:	bl	1166c <__errno_location@plt>
   19c40:	ldr	r3, [r0]
   19c44:	cmp	r3, #12
   19c48:	bne	19c50 <__assert_fail@plt+0x8470>
   19c4c:	bl	19b88 <__assert_fail@plt+0x83a8>
   19c50:	mov	r0, r4
   19c54:	pop	{r4, pc}
   19c58:	cmp	r1, #0
   19c5c:	cmpne	r0, #0
   19c60:	moveq	r1, #1
   19c64:	moveq	r0, r1
   19c68:	umull	r2, r3, r0, r1
   19c6c:	adds	r3, r3, #0
   19c70:	movne	r3, #1
   19c74:	cmp	r2, #0
   19c78:	blt	19c88 <__assert_fail@plt+0x84a8>
   19c7c:	cmp	r3, #0
   19c80:	bne	19c88 <__assert_fail@plt+0x84a8>
   19c84:	b	113c0 <calloc@plt>
   19c88:	push	{r4, lr}
   19c8c:	bl	1166c <__errno_location@plt>
   19c90:	mov	r3, #12
   19c94:	str	r3, [r0]
   19c98:	mov	r0, #0
   19c9c:	pop	{r4, pc}
   19ca0:	cmp	r0, #0
   19ca4:	mov	r3, #0
   19ca8:	moveq	r0, #1
   19cac:	adds	r3, r3, #0
   19cb0:	movne	r3, #1
   19cb4:	cmp	r0, #0
   19cb8:	blt	19cc8 <__assert_fail@plt+0x84e8>
   19cbc:	cmp	r3, #0
   19cc0:	bne	19cc8 <__assert_fail@plt+0x84e8>
   19cc4:	b	115b8 <malloc@plt>
   19cc8:	push	{r4, lr}
   19ccc:	bl	1166c <__errno_location@plt>
   19cd0:	mov	r3, #12
   19cd4:	str	r3, [r0]
   19cd8:	mov	r0, #0
   19cdc:	pop	{r4, pc}
   19ce0:	cmp	r0, #0
   19ce4:	push	{r4, lr}
   19ce8:	mov	r4, r1
   19cec:	bne	19cfc <__assert_fail@plt+0x851c>
   19cf0:	mov	r0, r1
   19cf4:	pop	{r4, lr}
   19cf8:	b	19ca0 <__assert_fail@plt+0x84c0>
   19cfc:	cmp	r1, #0
   19d00:	bne	19d10 <__assert_fail@plt+0x8530>
   19d04:	bl	16840 <__assert_fail@plt+0x5060>
   19d08:	mov	r0, #0
   19d0c:	pop	{r4, pc}
   19d10:	cmp	r1, #0
   19d14:	blt	19d24 <__assert_fail@plt+0x8544>
   19d18:	mov	r3, #0
   19d1c:	cmp	r3, r3
   19d20:	beq	19d34 <__assert_fail@plt+0x8554>
   19d24:	bl	1166c <__errno_location@plt>
   19d28:	mov	r3, #12
   19d2c:	str	r3, [r0]
   19d30:	b	19d08 <__assert_fail@plt+0x8528>
   19d34:	pop	{r4, lr}
   19d38:	b	11504 <realloc@plt>
   19d3c:	cmp	r0, r1
   19d40:	beq	19d90 <__assert_fail@plt+0x85b0>
   19d44:	sub	r2, r0, #1
   19d48:	sub	r1, r1, #1
   19d4c:	ldrb	r3, [r2, #1]!
   19d50:	sub	r0, r3, #65	; 0x41
   19d54:	cmp	r0, #25
   19d58:	ldrb	r0, [r1, #1]!
   19d5c:	addls	r3, r3, #32
   19d60:	sub	ip, r0, #65	; 0x41
   19d64:	cmp	ip, #25
   19d68:	addls	r0, r0, #32
   19d6c:	uxtb	r3, r3
   19d70:	cmp	r3, #0
   19d74:	uxtb	r0, r0
   19d78:	bne	19d84 <__assert_fail@plt+0x85a4>
   19d7c:	sub	r0, r3, r0
   19d80:	bx	lr
   19d84:	cmp	r3, r0
   19d88:	beq	19d4c <__assert_fail@plt+0x856c>
   19d8c:	b	19d7c <__assert_fail@plt+0x859c>
   19d90:	mov	r0, #0
   19d94:	bx	lr
   19d98:	push	{r4, r5, r6, lr}
   19d9c:	mov	r4, r0
   19da0:	bl	11588 <__fpending@plt>
   19da4:	mov	r5, r0
   19da8:	mov	r0, r4
   19dac:	bl	11594 <ferror_unlocked@plt>
   19db0:	mov	r6, r0
   19db4:	mov	r0, r4
   19db8:	bl	19e08 <__assert_fail@plt+0x8628>
   19dbc:	cmp	r6, #0
   19dc0:	mov	r4, r0
   19dc4:	bne	19df0 <__assert_fail@plt+0x8610>
   19dc8:	cmp	r0, #0
   19dcc:	beq	19de8 <__assert_fail@plt+0x8608>
   19dd0:	cmp	r5, #0
   19dd4:	bne	19e00 <__assert_fail@plt+0x8620>
   19dd8:	bl	1166c <__errno_location@plt>
   19ddc:	ldr	r4, [r0]
   19de0:	subs	r4, r4, #9
   19de4:	mvnne	r4, #0
   19de8:	mov	r0, r4
   19dec:	pop	{r4, r5, r6, pc}
   19df0:	cmp	r0, #0
   19df4:	bne	19e00 <__assert_fail@plt+0x8620>
   19df8:	bl	1166c <__errno_location@plt>
   19dfc:	str	r4, [r0]
   19e00:	mvn	r4, #0
   19e04:	b	19de8 <__assert_fail@plt+0x8608>
   19e08:	push	{r0, r1, r2, r4, r5, lr}
   19e0c:	mov	r4, r0
   19e10:	bl	116cc <fileno@plt>
   19e14:	cmp	r0, #0
   19e18:	mov	r0, r4
   19e1c:	bge	19e2c <__assert_fail@plt+0x864c>
   19e20:	add	sp, sp, #12
   19e24:	pop	{r4, r5, lr}
   19e28:	b	116f0 <fclose@plt>
   19e2c:	bl	115dc <__freading@plt>
   19e30:	cmp	r0, #0
   19e34:	bne	19e70 <__assert_fail@plt+0x8690>
   19e38:	mov	r0, r4
   19e3c:	bl	19eb0 <__assert_fail@plt+0x86d0>
   19e40:	cmp	r0, #0
   19e44:	bne	19ea4 <__assert_fail@plt+0x86c4>
   19e48:	mov	r5, #0
   19e4c:	mov	r0, r4
   19e50:	bl	116f0 <fclose@plt>
   19e54:	cmp	r5, #0
   19e58:	beq	19e68 <__assert_fail@plt+0x8688>
   19e5c:	bl	1166c <__errno_location@plt>
   19e60:	str	r5, [r0]
   19e64:	mvn	r0, #0
   19e68:	add	sp, sp, #12
   19e6c:	pop	{r4, r5, pc}
   19e70:	mov	r0, r4
   19e74:	bl	116cc <fileno@plt>
   19e78:	mov	r3, #1
   19e7c:	str	r3, [sp]
   19e80:	mov	r2, #0
   19e84:	mov	r3, #0
   19e88:	bl	11564 <lseek64@plt>
   19e8c:	mvn	r3, #0
   19e90:	mvn	r2, #0
   19e94:	cmp	r1, r3
   19e98:	cmpeq	r0, r2
   19e9c:	bne	19e38 <__assert_fail@plt+0x8658>
   19ea0:	b	19e48 <__assert_fail@plt+0x8668>
   19ea4:	bl	1166c <__errno_location@plt>
   19ea8:	ldr	r5, [r0]
   19eac:	b	19e4c <__assert_fail@plt+0x866c>
   19eb0:	push	{r0, r1, r4, lr}
   19eb4:	subs	r4, r0, #0
   19eb8:	bne	19ecc <__assert_fail@plt+0x86ec>
   19ebc:	mov	r0, r4
   19ec0:	add	sp, sp, #8
   19ec4:	pop	{r4, lr}
   19ec8:	b	11414 <fflush@plt>
   19ecc:	bl	115dc <__freading@plt>
   19ed0:	cmp	r0, #0
   19ed4:	beq	19ebc <__assert_fail@plt+0x86dc>
   19ed8:	ldr	r3, [r4]
   19edc:	tst	r3, #256	; 0x100
   19ee0:	beq	19ebc <__assert_fail@plt+0x86dc>
   19ee4:	mov	r3, #1
   19ee8:	str	r3, [sp]
   19eec:	mov	r2, #0
   19ef0:	mov	r3, #0
   19ef4:	mov	r0, r4
   19ef8:	bl	19f00 <__assert_fail@plt+0x8720>
   19efc:	b	19ebc <__assert_fail@plt+0x86dc>
   19f00:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   19f04:	mov	r4, r0
   19f08:	ldmib	r0, {ip, lr}
   19f0c:	ldr	r8, [sp, #32]
   19f10:	cmp	lr, ip
   19f14:	bne	19f80 <__assert_fail@plt+0x87a0>
   19f18:	ldr	lr, [r0, #20]
   19f1c:	ldr	ip, [r0, #16]
   19f20:	cmp	lr, ip
   19f24:	bne	19f80 <__assert_fail@plt+0x87a0>
   19f28:	ldr	r5, [r0, #36]	; 0x24
   19f2c:	cmp	r5, #0
   19f30:	bne	19f80 <__assert_fail@plt+0x87a0>
   19f34:	mov	r6, r2
   19f38:	mov	r7, r3
   19f3c:	bl	116cc <fileno@plt>
   19f40:	mov	r2, r6
   19f44:	mov	r3, r7
   19f48:	str	r8, [sp]
   19f4c:	bl	11564 <lseek64@plt>
   19f50:	mvn	r3, #0
   19f54:	mvn	r2, #0
   19f58:	cmp	r1, r3
   19f5c:	cmpeq	r0, r2
   19f60:	mvneq	r0, #0
   19f64:	ldrne	r3, [r4]
   19f68:	strdne	r0, [r4, #80]	; 0x50
   19f6c:	movne	r0, r5
   19f70:	bicne	r3, r3, #16
   19f74:	strne	r3, [r4]
   19f78:	add	sp, sp, #8
   19f7c:	pop	{r4, r5, r6, r7, r8, pc}
   19f80:	str	r8, [sp, #32]
   19f84:	mov	r0, r4
   19f88:	add	sp, sp, #8
   19f8c:	pop	{r4, r5, r6, r7, r8, lr}
   19f90:	b	11708 <fseeko64@plt>
   19f94:	push	{r4, lr}
   19f98:	mov	r0, #14
   19f9c:	bl	11750 <nl_langinfo@plt>
   19fa0:	ldr	r3, [pc, #24]	; 19fc0 <__assert_fail@plt+0x87e0>
   19fa4:	cmp	r0, #0
   19fa8:	moveq	r0, r3
   19fac:	ldr	r3, [pc, #16]	; 19fc4 <__assert_fail@plt+0x87e4>
   19fb0:	ldrb	r2, [r0]
   19fb4:	cmp	r2, #0
   19fb8:	moveq	r0, r3
   19fbc:	pop	{r4, pc}
   19fc0:	strdeq	pc, [r1], -r9
   19fc4:	andeq	pc, r1, r7, ror #29
   19fc8:	push	{r4, lr}
   19fcc:	mov	r4, r0
   19fd0:	bl	11438 <wcwidth@plt>
   19fd4:	cmp	r0, #0
   19fd8:	popge	{r4, pc}
   19fdc:	mov	r0, r4
   19fe0:	bl	11534 <iswcntrl@plt>
   19fe4:	clz	r0, r0
   19fe8:	lsr	r0, r0, #5
   19fec:	pop	{r4, pc}
   19ff0:	mov	r3, r1
   19ff4:	push	{r4, r5, r6, lr}
   19ff8:	mov	r5, r1
   19ffc:	ldr	r1, [r3], #16
   1a000:	mov	r4, r0
   1a004:	cmp	r1, r3
   1a008:	strne	r1, [r0]
   1a00c:	bne	1a024 <__assert_fail@plt+0x8844>
   1a010:	add	r3, r0, #16
   1a014:	ldr	r2, [r5, #4]
   1a018:	mov	r0, r3
   1a01c:	bl	11474 <memcpy@plt>
   1a020:	str	r0, [r4]
   1a024:	ldr	r3, [r5, #4]
   1a028:	str	r3, [r4, #4]
   1a02c:	ldrb	r3, [r5, #8]
   1a030:	cmp	r3, #0
   1a034:	strb	r3, [r4, #8]
   1a038:	ldrne	r3, [r5, #12]
   1a03c:	strne	r3, [r4, #12]
   1a040:	pop	{r4, r5, r6, pc}
   1a044:	ldr	r3, [pc, #20]	; 1a060 <__assert_fail@plt+0x8880>
   1a048:	lsr	r2, r0, #5
   1a04c:	and	r0, r0, #31
   1a050:	ldr	r3, [r3, r2, lsl #2]
   1a054:	lsr	r0, r3, r0
   1a058:	and	r0, r0, #1
   1a05c:	bx	lr
   1a060:	strdeq	pc, [r1], -r0
   1a064:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a068:	subs	r5, r0, #0
   1a06c:	addeq	r5, sp, #4
   1a070:	mov	r0, r5
   1a074:	mov	r7, r2
   1a078:	mov	r6, r1
   1a07c:	bl	115a0 <mbrtowc@plt>
   1a080:	cmp	r7, #0
   1a084:	cmnne	r0, #3
   1a088:	mov	r4, r0
   1a08c:	bls	1a0a8 <__assert_fail@plt+0x88c8>
   1a090:	mov	r0, #0
   1a094:	bl	1bae8 <__assert_fail@plt+0xa308>
   1a098:	cmp	r0, #0
   1a09c:	moveq	r4, #1
   1a0a0:	ldrbeq	r3, [r6]
   1a0a4:	streq	r3, [r5]
   1a0a8:	mov	r0, r4
   1a0ac:	add	sp, sp, #12
   1a0b0:	pop	{r4, r5, r6, r7, pc}
   1a0b4:	push	{r4, r5, r6, r7, fp, lr}
   1a0b8:	mov	r7, r3
   1a0bc:	lsrs	r3, r2, #30
   1a0c0:	mov	r4, r0
   1a0c4:	movne	r3, #1
   1a0c8:	moveq	r3, #0
   1a0cc:	lsls	r0, r2, #2
   1a0d0:	add	fp, sp, #20
   1a0d4:	bmi	1a0e0 <__assert_fail@plt+0x8900>
   1a0d8:	cmp	r3, #0
   1a0dc:	beq	1a0ec <__assert_fail@plt+0x890c>
   1a0e0:	mov	r0, #0
   1a0e4:	sub	sp, fp, #20
   1a0e8:	pop	{r4, r5, r6, r7, fp, pc}
   1a0ec:	cmp	r0, #4016	; 0xfb0
   1a0f0:	mov	r5, r1
   1a0f4:	mov	r6, r2
   1a0f8:	bhi	1a178 <__assert_fail@plt+0x8998>
   1a0fc:	add	r0, r0, #29
   1a100:	bic	r0, r0, #7
   1a104:	sub	sp, sp, r0
   1a108:	add	r0, sp, #15
   1a10c:	bic	r0, r0, #15
   1a110:	cmp	r0, #0
   1a114:	beq	1a0e0 <__assert_fail@plt+0x8900>
   1a118:	mov	r3, #1
   1a11c:	str	r3, [r0, #4]
   1a120:	mov	ip, #0
   1a124:	mov	r3, r5
   1a128:	mov	lr, #2
   1a12c:	cmp	lr, r6
   1a130:	bcc	1a180 <__assert_fail@plt+0x89a0>
   1a134:	mov	r3, r4
   1a138:	mov	ip, #0
   1a13c:	str	ip, [r7]
   1a140:	ldrb	r2, [r3]
   1a144:	cmp	r2, #0
   1a148:	beq	1a16c <__assert_fail@plt+0x898c>
   1a14c:	ldrb	r1, [r5, ip]
   1a150:	cmp	r1, r2
   1a154:	bne	1a1bc <__assert_fail@plt+0x89dc>
   1a158:	add	ip, ip, #1
   1a15c:	cmp	r6, ip
   1a160:	add	r3, r3, #1
   1a164:	bne	1a140 <__assert_fail@plt+0x8960>
   1a168:	str	r4, [r7]
   1a16c:	bl	1bb94 <__assert_fail@plt+0xa3b4>
   1a170:	mov	r0, #1
   1a174:	b	1a0e4 <__assert_fail@plt+0x8904>
   1a178:	bl	1bb44 <__assert_fail@plt+0xa364>
   1a17c:	b	1a110 <__assert_fail@plt+0x8930>
   1a180:	ldrb	r1, [r3, #1]!
   1a184:	ldrb	r2, [r5, ip]
   1a188:	cmp	r2, r1
   1a18c:	bne	1a1a4 <__assert_fail@plt+0x89c4>
   1a190:	add	ip, ip, #1
   1a194:	sub	r2, lr, ip
   1a198:	str	r2, [r0, lr, lsl #2]
   1a19c:	add	lr, lr, #1
   1a1a0:	b	1a12c <__assert_fail@plt+0x894c>
   1a1a4:	cmp	ip, #0
   1a1a8:	streq	lr, [r0, lr, lsl #2]
   1a1ac:	beq	1a19c <__assert_fail@plt+0x89bc>
   1a1b0:	ldr	r2, [r0, ip, lsl #2]
   1a1b4:	sub	ip, ip, r2
   1a1b8:	b	1a184 <__assert_fail@plt+0x89a4>
   1a1bc:	cmp	ip, #0
   1a1c0:	addeq	r4, r4, #1
   1a1c4:	ldrne	r2, [r0, ip, lsl #2]
   1a1c8:	addeq	r3, r3, #1
   1a1cc:	addne	r4, r4, r2
   1a1d0:	subne	ip, ip, r2
   1a1d4:	b	1a140 <__assert_fail@plt+0x8960>
   1a1d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1dc:	add	fp, sp, #32
   1a1e0:	sub	sp, sp, #196	; 0xc4
   1a1e4:	str	r0, [fp, #-220]	; 0xffffff24
   1a1e8:	mov	r0, r1
   1a1ec:	mov	r5, r1
   1a1f0:	str	r2, [fp, #-224]	; 0xffffff20
   1a1f4:	bl	1bbb8 <__assert_fail@plt+0xa3d8>
   1a1f8:	mov	r7, #0
   1a1fc:	str	r0, [fp, #-208]	; 0xffffff30
   1a200:	ldr	r3, [fp, #-208]	; 0xffffff30
   1a204:	mov	r6, r0
   1a208:	lsl	r0, r3, #2
   1a20c:	adds	r0, r0, r6
   1a210:	lsr	r1, r3, #30
   1a214:	adc	r1, r1, r7
   1a218:	adds	r0, r0, r0
   1a21c:	adc	r1, r1, r1
   1a220:	adds	r6, r6, r0
   1a224:	adc	r7, r7, r1
   1a228:	lsl	r0, r6, #2
   1a22c:	lsl	r1, r7, #2
   1a230:	orr	r1, r1, r6, lsr #30
   1a234:	adds	r1, r1, #0
   1a238:	movne	r1, #1
   1a23c:	cmp	r0, #0
   1a240:	blt	1a24c <__assert_fail@plt+0x8a6c>
   1a244:	cmp	r1, #0
   1a248:	beq	1a260 <__assert_fail@plt+0x8a80>
   1a24c:	mov	r3, #0
   1a250:	str	r3, [fp, #-216]	; 0xffffff28
   1a254:	ldr	r0, [fp, #-216]	; 0xffffff28
   1a258:	sub	sp, fp, #32
   1a25c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a260:	ldr	r3, [fp, #-208]	; 0xffffff30
   1a264:	mov	r0, #44	; 0x2c
   1a268:	mul	r0, r0, r3
   1a26c:	cmp	r0, #4016	; 0xfb0
   1a270:	bhi	1a350 <__assert_fail@plt+0x8b70>
   1a274:	add	r0, r0, #29
   1a278:	bic	r0, r0, #7
   1a27c:	sub	sp, sp, r0
   1a280:	add	r4, sp, #15
   1a284:	bic	r4, r4, #15
   1a288:	cmp	r4, #0
   1a28c:	beq	1a24c <__assert_fail@plt+0x8a6c>
   1a290:	ldr	r2, [fp, #-208]	; 0xffffff30
   1a294:	mov	r3, #40	; 0x28
   1a298:	sub	r7, fp, #36	; 0x24
   1a29c:	mla	r3, r3, r2, r4
   1a2a0:	ldr	sl, [pc, #1876]	; 1a9fc <__assert_fail@plt+0x921c>
   1a2a4:	str	r3, [fp, #-212]	; 0xffffff2c
   1a2a8:	mov	r3, #0
   1a2ac:	strb	r3, [r7, #-168]!	; 0xffffff58
   1a2b0:	str	r5, [fp, #-188]	; 0xffffff44
   1a2b4:	add	r6, r7, #4
   1a2b8:	add	r5, r4, #16
   1a2bc:	add	r9, r7, #28
   1a2c0:	str	r3, [fp, #-200]	; 0xffffff38
   1a2c4:	str	r3, [r6, #4]
   1a2c8:	strb	r3, [fp, #-192]	; 0xffffff40
   1a2cc:	ldrb	r3, [fp, #-204]	; 0xffffff34
   1a2d0:	ldr	r8, [fp, #-188]	; 0xffffff44
   1a2d4:	cmp	r3, #0
   1a2d8:	bne	1a388 <__assert_fail@plt+0x8ba8>
   1a2dc:	ldrb	r3, [r8]
   1a2e0:	lsr	r2, r3, #5
   1a2e4:	and	r3, r3, #31
   1a2e8:	ldr	r2, [sl, r2, lsl #2]
   1a2ec:	lsr	r3, r2, r3
   1a2f0:	tst	r3, #1
   1a2f4:	beq	1a35c <__assert_fail@plt+0x8b7c>
   1a2f8:	mov	r3, #1
   1a2fc:	str	r3, [fp, #-184]	; 0xffffff48
   1a300:	ldrb	r2, [r8]
   1a304:	str	r2, [fp, #-176]	; 0xffffff50
   1a308:	strb	r3, [fp, #-180]	; 0xffffff4c
   1a30c:	ldrb	r3, [fp, #-180]	; 0xffffff4c
   1a310:	mov	r2, #1
   1a314:	strb	r2, [fp, #-192]	; 0xffffff40
   1a318:	cmp	r3, #0
   1a31c:	str	r3, [fp, #-216]	; 0xffffff28
   1a320:	beq	1a97c <__assert_fail@plt+0x919c>
   1a324:	ldr	r3, [fp, #-176]	; 0xffffff50
   1a328:	cmp	r3, #0
   1a32c:	bne	1a97c <__assert_fail@plt+0x919c>
   1a330:	ldr	r1, [fp, #-212]	; 0xffffff2c
   1a334:	mov	r7, r4
   1a338:	mov	r5, r3
   1a33c:	str	r2, [r1, #4]
   1a340:	mov	r6, #2
   1a344:	mov	r8, #40	; 0x28
   1a348:	mov	r9, r3
   1a34c:	b	1a4a4 <__assert_fail@plt+0x8cc4>
   1a350:	bl	1bb44 <__assert_fail@plt+0xa364>
   1a354:	mov	r4, r0
   1a358:	b	1a288 <__assert_fail@plt+0x8aa8>
   1a35c:	mov	r0, r6
   1a360:	bl	1148c <mbsinit@plt>
   1a364:	cmp	r0, #0
   1a368:	bne	1a380 <__assert_fail@plt+0x8ba0>
   1a36c:	ldr	r3, [pc, #1676]	; 1aa00 <__assert_fail@plt+0x9220>
   1a370:	ldr	r1, [pc, #1676]	; 1aa04 <__assert_fail@plt+0x9224>
   1a374:	ldr	r0, [pc, #1676]	; 1aa08 <__assert_fail@plt+0x9228>
   1a378:	mov	r2, #143	; 0x8f
   1a37c:	bl	117e0 <__assert_fail@plt>
   1a380:	mov	r3, #1
   1a384:	strb	r3, [fp, #-204]	; 0xffffff34
   1a388:	bl	1157c <__ctype_get_mb_cur_max@plt>
   1a38c:	mov	r1, r0
   1a390:	mov	r0, r8
   1a394:	bl	18d24 <__assert_fail@plt+0x7544>
   1a398:	mov	r3, r6
   1a39c:	mov	r1, r8
   1a3a0:	mov	r2, r0
   1a3a4:	mov	r0, r9
   1a3a8:	bl	1a064 <__assert_fail@plt+0x8884>
   1a3ac:	cmn	r0, #1
   1a3b0:	str	r0, [fp, #-184]	; 0xffffff48
   1a3b4:	bne	1a3c8 <__assert_fail@plt+0x8be8>
   1a3b8:	mov	r3, #1
   1a3bc:	str	r3, [fp, #-184]	; 0xffffff48
   1a3c0:	mov	r3, #0
   1a3c4:	b	1a308 <__assert_fail@plt+0x8b28>
   1a3c8:	cmn	r0, #2
   1a3cc:	bne	1a3e0 <__assert_fail@plt+0x8c00>
   1a3d0:	ldr	r0, [fp, #-188]	; 0xffffff44
   1a3d4:	bl	1163c <strlen@plt>
   1a3d8:	str	r0, [fp, #-184]	; 0xffffff48
   1a3dc:	b	1a3c0 <__assert_fail@plt+0x8be0>
   1a3e0:	cmp	r0, #0
   1a3e4:	bne	1a434 <__assert_fail@plt+0x8c54>
   1a3e8:	mov	r3, #1
   1a3ec:	str	r3, [fp, #-184]	; 0xffffff48
   1a3f0:	ldr	r3, [fp, #-188]	; 0xffffff44
   1a3f4:	ldrb	r3, [r3]
   1a3f8:	cmp	r3, #0
   1a3fc:	beq	1a414 <__assert_fail@plt+0x8c34>
   1a400:	ldr	r3, [pc, #1528]	; 1aa00 <__assert_fail@plt+0x9220>
   1a404:	mov	r2, #171	; 0xab
   1a408:	ldr	r1, [pc, #1524]	; 1aa04 <__assert_fail@plt+0x9224>
   1a40c:	ldr	r0, [pc, #1528]	; 1aa0c <__assert_fail@plt+0x922c>
   1a410:	b	1a37c <__assert_fail@plt+0x8b9c>
   1a414:	ldr	r3, [fp, #-176]	; 0xffffff50
   1a418:	cmp	r3, #0
   1a41c:	beq	1a434 <__assert_fail@plt+0x8c54>
   1a420:	ldr	r3, [pc, #1496]	; 1aa00 <__assert_fail@plt+0x9220>
   1a424:	mov	r2, #172	; 0xac
   1a428:	ldr	r1, [pc, #1492]	; 1aa04 <__assert_fail@plt+0x9224>
   1a42c:	ldr	r0, [pc, #1500]	; 1aa10 <__assert_fail@plt+0x9230>
   1a430:	b	1a37c <__assert_fail@plt+0x8b9c>
   1a434:	mov	r3, #1
   1a438:	mov	r0, r6
   1a43c:	strb	r3, [fp, #-180]	; 0xffffff4c
   1a440:	bl	1148c <mbsinit@plt>
   1a444:	cmp	r0, #0
   1a448:	movne	r3, #0
   1a44c:	strbne	r3, [fp, #-204]	; 0xffffff34
   1a450:	b	1a30c <__assert_fail@plt+0x8b2c>
   1a454:	ldrb	sl, [r7, #48]	; 0x30
   1a458:	cmp	sl, #0
   1a45c:	beq	1a5a0 <__assert_fail@plt+0x8dc0>
   1a460:	mla	r3, r8, r5, r4
   1a464:	ldrb	r2, [r3, #8]
   1a468:	cmp	r2, #0
   1a46c:	beq	1a5a0 <__assert_fail@plt+0x8dc0>
   1a470:	ldr	r0, [r7, #52]	; 0x34
   1a474:	ldr	r3, [r3, #12]
   1a478:	sub	r0, r0, r3
   1a47c:	clz	r0, r0
   1a480:	lsr	r0, r0, #5
   1a484:	cmp	r0, #0
   1a488:	beq	1a5d8 <__assert_fail@plt+0x8df8>
   1a48c:	ldr	r2, [fp, #-212]	; 0xffffff2c
   1a490:	add	r5, r5, #1
   1a494:	sub	r3, r6, r5
   1a498:	str	r3, [r2, r6, lsl #2]
   1a49c:	add	r6, r6, #1
   1a4a0:	add	r7, r7, #40	; 0x28
   1a4a4:	ldr	r3, [fp, #-208]	; 0xffffff30
   1a4a8:	cmp	r6, r3
   1a4ac:	bcc	1a454 <__assert_fail@plt+0x8c74>
   1a4b0:	ldr	r3, [fp, #-224]	; 0xffffff20
   1a4b4:	mov	r6, #0
   1a4b8:	sub	r7, fp, #36	; 0x24
   1a4bc:	str	r6, [r3]
   1a4c0:	ldr	r3, [fp, #-220]	; 0xffffff24
   1a4c4:	sub	r8, fp, #36	; 0x24
   1a4c8:	str	r3, [fp, #-132]	; 0xffffff7c
   1a4cc:	mov	r5, #1
   1a4d0:	ldr	r3, [fp, #-220]	; 0xffffff24
   1a4d4:	strb	r6, [r7, #-112]!	; 0xffffff90
   1a4d8:	str	r6, [fp, #-144]	; 0xffffff70
   1a4dc:	strb	r6, [r8, #-56]!	; 0xffffffc8
   1a4e0:	str	r6, [r7, #8]
   1a4e4:	str	r6, [fp, #-88]	; 0xffffffa8
   1a4e8:	strb	r6, [fp, #-136]	; 0xffffff78
   1a4ec:	str	r6, [r8, #8]
   1a4f0:	str	r3, [fp, #-76]	; 0xffffffb4
   1a4f4:	strb	r6, [fp, #-80]	; 0xffffffb0
   1a4f8:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   1a4fc:	cmp	r3, #0
   1a500:	bne	1a548 <__assert_fail@plt+0x8d68>
   1a504:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   1a508:	ldr	r9, [fp, #-76]	; 0xffffffb4
   1a50c:	cmp	r3, #0
   1a510:	bne	1a8e4 <__assert_fail@plt+0x9104>
   1a514:	ldrb	r3, [r9]
   1a518:	ldr	r1, [pc, #1244]	; 1a9fc <__assert_fail@plt+0x921c>
   1a51c:	lsr	r2, r3, #5
   1a520:	and	r3, r3, #31
   1a524:	ldr	r2, [r1, r2, lsl #2]
   1a528:	lsr	r3, r2, r3
   1a52c:	tst	r3, #1
   1a530:	beq	1a8d0 <__assert_fail@plt+0x90f0>
   1a534:	str	r5, [fp, #-72]	; 0xffffffb8
   1a538:	ldrb	r3, [r9]
   1a53c:	strb	r5, [fp, #-68]	; 0xffffffbc
   1a540:	str	r3, [fp, #-64]	; 0xffffffc0
   1a544:	strb	r5, [fp, #-80]	; 0xffffffb0
   1a548:	ldrb	r0, [fp, #-68]	; 0xffffffbc
   1a54c:	cmp	r0, #0
   1a550:	beq	1a560 <__assert_fail@plt+0x8d80>
   1a554:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1a558:	cmp	r3, #0
   1a55c:	beq	1a644 <__assert_fail@plt+0x8e64>
   1a560:	mov	r3, #40	; 0x28
   1a564:	mla	r3, r3, r6, r4
   1a568:	ldrb	r2, [r3, #8]
   1a56c:	ands	r0, r0, r2
   1a570:	bne	1a5f4 <__assert_fail@plt+0x8e14>
   1a574:	ldr	r2, [r3, #4]
   1a578:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1a57c:	cmp	r2, r1
   1a580:	bne	1a598 <__assert_fail@plt+0x8db8>
   1a584:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1a588:	ldr	r0, [r3]
   1a58c:	bl	11498 <memcmp@plt>
   1a590:	clz	r0, r0
   1a594:	lsr	r0, r0, #5
   1a598:	and	r0, r0, #1
   1a59c:	b	1a608 <__assert_fail@plt+0x8e28>
   1a5a0:	mul	r3, r8, r5
   1a5a4:	ldr	r2, [r7, #44]	; 0x2c
   1a5a8:	add	r1, r4, r3
   1a5ac:	ldr	r1, [r1, #4]
   1a5b0:	cmp	r2, r1
   1a5b4:	movne	r0, r9
   1a5b8:	bne	1a5d0 <__assert_fail@plt+0x8df0>
   1a5bc:	ldr	r1, [r4, r3]
   1a5c0:	ldr	r0, [r7, #40]	; 0x28
   1a5c4:	bl	11498 <memcmp@plt>
   1a5c8:	clz	r0, r0
   1a5cc:	lsr	r0, r0, #5
   1a5d0:	and	r0, r0, #1
   1a5d4:	b	1a484 <__assert_fail@plt+0x8ca4>
   1a5d8:	cmp	r5, #0
   1a5dc:	ldr	r3, [fp, #-212]	; 0xffffff2c
   1a5e0:	streq	r6, [r3, r6, lsl #2]
   1a5e4:	beq	1a49c <__assert_fail@plt+0x8cbc>
   1a5e8:	ldr	r3, [r3, r5, lsl #2]
   1a5ec:	sub	r5, r5, r3
   1a5f0:	b	1a458 <__assert_fail@plt+0x8c78>
   1a5f4:	ldr	r0, [r3, #12]
   1a5f8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1a5fc:	sub	r0, r0, r3
   1a600:	clz	r0, r0
   1a604:	lsr	r0, r0, #5
   1a608:	cmp	r0, #0
   1a60c:	beq	1a650 <__assert_fail@plt+0x8e70>
   1a610:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1a614:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1a618:	add	r6, r6, #1
   1a61c:	add	r3, r3, r2
   1a620:	str	r3, [fp, #-76]	; 0xffffffb4
   1a624:	mov	r3, #0
   1a628:	strb	r3, [fp, #-80]	; 0xffffffb0
   1a62c:	ldr	r3, [fp, #-208]	; 0xffffff30
   1a630:	cmp	r3, r6
   1a634:	bne	1a4f8 <__assert_fail@plt+0x8d18>
   1a638:	ldr	r2, [fp, #-224]	; 0xffffff20
   1a63c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1a640:	str	r3, [r2]
   1a644:	mov	r0, r4
   1a648:	bl	1bb94 <__assert_fail@plt+0xa3b4>
   1a64c:	b	1a254 <__assert_fail@plt+0x8a74>
   1a650:	cmp	r6, #0
   1a654:	beq	1a78c <__assert_fail@plt+0x8fac>
   1a658:	ldr	r3, [fp, #-212]	; 0xffffff2c
   1a65c:	ldr	sl, [r3, r6, lsl #2]
   1a660:	add	r3, r7, #4
   1a664:	sub	r6, r6, sl
   1a668:	str	r3, [fp, #-220]	; 0xffffff24
   1a66c:	cmp	sl, #0
   1a670:	beq	1a4f8 <__assert_fail@plt+0x8d18>
   1a674:	ldrb	r3, [fp, #-136]	; 0xffffff78
   1a678:	cmp	r3, #0
   1a67c:	bne	1a6c4 <__assert_fail@plt+0x8ee4>
   1a680:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   1a684:	ldr	r9, [fp, #-132]	; 0xffffff7c
   1a688:	cmp	r3, #0
   1a68c:	bne	1a6f4 <__assert_fail@plt+0x8f14>
   1a690:	ldrb	r3, [r9]
   1a694:	ldr	r1, [pc, #864]	; 1a9fc <__assert_fail@plt+0x921c>
   1a698:	lsr	r2, r3, #5
   1a69c:	and	r3, r3, #31
   1a6a0:	ldr	r2, [r1, r2, lsl #2]
   1a6a4:	lsr	r3, r2, r3
   1a6a8:	tst	r3, #1
   1a6ac:	beq	1a6e0 <__assert_fail@plt+0x8f00>
   1a6b0:	str	r5, [fp, #-128]	; 0xffffff80
   1a6b4:	ldrb	r3, [r9]
   1a6b8:	strb	r5, [fp, #-124]	; 0xffffff84
   1a6bc:	str	r3, [fp, #-120]	; 0xffffff88
   1a6c0:	strb	r5, [fp, #-136]	; 0xffffff78
   1a6c4:	ldrb	r3, [fp, #-124]	; 0xffffff84
   1a6c8:	cmp	r3, #0
   1a6cc:	beq	1a9dc <__assert_fail@plt+0x91fc>
   1a6d0:	ldr	r3, [fp, #-120]	; 0xffffff88
   1a6d4:	cmp	r3, #0
   1a6d8:	bne	1a9dc <__assert_fail@plt+0x91fc>
   1a6dc:	bl	117c8 <abort@plt>
   1a6e0:	ldr	r0, [fp, #-220]	; 0xffffff24
   1a6e4:	bl	1148c <mbsinit@plt>
   1a6e8:	cmp	r0, #0
   1a6ec:	beq	1a36c <__assert_fail@plt+0x8b8c>
   1a6f0:	strb	r5, [fp, #-148]	; 0xffffff6c
   1a6f4:	bl	1157c <__ctype_get_mb_cur_max@plt>
   1a6f8:	mov	r1, r0
   1a6fc:	mov	r0, r9
   1a700:	bl	18d24 <__assert_fail@plt+0x7544>
   1a704:	ldr	r3, [fp, #-220]	; 0xffffff24
   1a708:	mov	r1, r9
   1a70c:	mov	r2, r0
   1a710:	add	r0, r7, #28
   1a714:	bl	1a064 <__assert_fail@plt+0x8884>
   1a718:	cmn	r0, #1
   1a71c:	str	r0, [fp, #-128]	; 0xffffff80
   1a720:	streq	r5, [fp, #-128]	; 0xffffff80
   1a724:	beq	1a73c <__assert_fail@plt+0x8f5c>
   1a728:	cmn	r0, #2
   1a72c:	bne	1a748 <__assert_fail@plt+0x8f68>
   1a730:	ldr	r0, [fp, #-132]	; 0xffffff7c
   1a734:	bl	1163c <strlen@plt>
   1a738:	str	r0, [fp, #-128]	; 0xffffff80
   1a73c:	mov	r3, #0
   1a740:	strb	r3, [fp, #-124]	; 0xffffff84
   1a744:	b	1a6c0 <__assert_fail@plt+0x8ee0>
   1a748:	cmp	r0, #0
   1a74c:	bne	1a770 <__assert_fail@plt+0x8f90>
   1a750:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1a754:	str	r5, [fp, #-128]	; 0xffffff80
   1a758:	ldrb	r3, [r3]
   1a75c:	cmp	r3, #0
   1a760:	bne	1a400 <__assert_fail@plt+0x8c20>
   1a764:	ldr	r3, [fp, #-120]	; 0xffffff88
   1a768:	cmp	r3, #0
   1a76c:	bne	1a420 <__assert_fail@plt+0x8c40>
   1a770:	ldr	r0, [fp, #-220]	; 0xffffff24
   1a774:	strb	r5, [fp, #-124]	; 0xffffff84
   1a778:	bl	1148c <mbsinit@plt>
   1a77c:	cmp	r0, #0
   1a780:	movne	r3, #0
   1a784:	strbne	r3, [fp, #-148]	; 0xffffff6c
   1a788:	b	1a6c0 <__assert_fail@plt+0x8ee0>
   1a78c:	ldrb	r3, [fp, #-136]	; 0xffffff78
   1a790:	cmp	r3, #0
   1a794:	bne	1a7dc <__assert_fail@plt+0x8ffc>
   1a798:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   1a79c:	ldr	r9, [fp, #-132]	; 0xffffff7c
   1a7a0:	cmp	r3, #0
   1a7a4:	bne	1a838 <__assert_fail@plt+0x9058>
   1a7a8:	ldrb	r3, [r9]
   1a7ac:	ldr	r1, [pc, #584]	; 1a9fc <__assert_fail@plt+0x921c>
   1a7b0:	lsr	r2, r3, #5
   1a7b4:	and	r3, r3, #31
   1a7b8:	ldr	r2, [r1, r2, lsl #2]
   1a7bc:	lsr	r3, r2, r3
   1a7c0:	tst	r3, #1
   1a7c4:	beq	1a824 <__assert_fail@plt+0x9044>
   1a7c8:	str	r5, [fp, #-128]	; 0xffffff80
   1a7cc:	ldrb	r3, [r9]
   1a7d0:	strb	r5, [fp, #-124]	; 0xffffff84
   1a7d4:	str	r3, [fp, #-120]	; 0xffffff88
   1a7d8:	strb	r5, [fp, #-136]	; 0xffffff78
   1a7dc:	ldrb	r3, [fp, #-124]	; 0xffffff84
   1a7e0:	cmp	r3, #0
   1a7e4:	beq	1a7f4 <__assert_fail@plt+0x9014>
   1a7e8:	ldr	r3, [fp, #-120]	; 0xffffff88
   1a7ec:	cmp	r3, #0
   1a7f0:	beq	1a6dc <__assert_fail@plt+0x8efc>
   1a7f4:	ldr	r2, [fp, #-128]	; 0xffffff80
   1a7f8:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1a7fc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1a800:	add	r3, r3, r2
   1a804:	str	r3, [fp, #-132]	; 0xffffff7c
   1a808:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1a80c:	mov	r2, #0
   1a810:	add	r3, r3, r1
   1a814:	strb	r2, [fp, #-136]	; 0xffffff78
   1a818:	str	r3, [fp, #-76]	; 0xffffffb4
   1a81c:	strb	r2, [fp, #-80]	; 0xffffffb0
   1a820:	b	1a4f8 <__assert_fail@plt+0x8d18>
   1a824:	add	r0, r7, #4
   1a828:	bl	1148c <mbsinit@plt>
   1a82c:	cmp	r0, #0
   1a830:	beq	1a36c <__assert_fail@plt+0x8b8c>
   1a834:	strb	r5, [fp, #-148]	; 0xffffff6c
   1a838:	bl	1157c <__ctype_get_mb_cur_max@plt>
   1a83c:	mov	r1, r0
   1a840:	mov	r0, r9
   1a844:	bl	18d24 <__assert_fail@plt+0x7544>
   1a848:	add	r3, r7, #4
   1a84c:	mov	r1, r9
   1a850:	mov	r2, r0
   1a854:	add	r0, r7, #28
   1a858:	bl	1a064 <__assert_fail@plt+0x8884>
   1a85c:	cmn	r0, #1
   1a860:	str	r0, [fp, #-128]	; 0xffffff80
   1a864:	streq	r5, [fp, #-128]	; 0xffffff80
   1a868:	beq	1a880 <__assert_fail@plt+0x90a0>
   1a86c:	cmn	r0, #2
   1a870:	bne	1a88c <__assert_fail@plt+0x90ac>
   1a874:	ldr	r0, [fp, #-132]	; 0xffffff7c
   1a878:	bl	1163c <strlen@plt>
   1a87c:	str	r0, [fp, #-128]	; 0xffffff80
   1a880:	mov	r3, #0
   1a884:	strb	r3, [fp, #-124]	; 0xffffff84
   1a888:	b	1a7d8 <__assert_fail@plt+0x8ff8>
   1a88c:	cmp	r0, #0
   1a890:	bne	1a8b4 <__assert_fail@plt+0x90d4>
   1a894:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1a898:	str	r5, [fp, #-128]	; 0xffffff80
   1a89c:	ldrb	r3, [r3]
   1a8a0:	cmp	r3, #0
   1a8a4:	bne	1a400 <__assert_fail@plt+0x8c20>
   1a8a8:	ldr	r3, [fp, #-120]	; 0xffffff88
   1a8ac:	cmp	r3, #0
   1a8b0:	bne	1a420 <__assert_fail@plt+0x8c40>
   1a8b4:	add	r0, r7, #4
   1a8b8:	strb	r5, [fp, #-124]	; 0xffffff84
   1a8bc:	bl	1148c <mbsinit@plt>
   1a8c0:	cmp	r0, #0
   1a8c4:	movne	r3, #0
   1a8c8:	strbne	r3, [fp, #-148]	; 0xffffff6c
   1a8cc:	b	1a7d8 <__assert_fail@plt+0x8ff8>
   1a8d0:	add	r0, r8, #4
   1a8d4:	bl	1148c <mbsinit@plt>
   1a8d8:	cmp	r0, #0
   1a8dc:	beq	1a36c <__assert_fail@plt+0x8b8c>
   1a8e0:	strb	r5, [fp, #-92]	; 0xffffffa4
   1a8e4:	bl	1157c <__ctype_get_mb_cur_max@plt>
   1a8e8:	mov	r1, r0
   1a8ec:	mov	r0, r9
   1a8f0:	bl	18d24 <__assert_fail@plt+0x7544>
   1a8f4:	add	r3, r8, #4
   1a8f8:	mov	r1, r9
   1a8fc:	mov	r2, r0
   1a900:	add	r0, r8, #28
   1a904:	bl	1a064 <__assert_fail@plt+0x8884>
   1a908:	cmn	r0, #1
   1a90c:	str	r0, [fp, #-72]	; 0xffffffb8
   1a910:	streq	r5, [fp, #-72]	; 0xffffffb8
   1a914:	beq	1a92c <__assert_fail@plt+0x914c>
   1a918:	cmn	r0, #2
   1a91c:	bne	1a938 <__assert_fail@plt+0x9158>
   1a920:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1a924:	bl	1163c <strlen@plt>
   1a928:	str	r0, [fp, #-72]	; 0xffffffb8
   1a92c:	mov	r3, #0
   1a930:	strb	r3, [fp, #-68]	; 0xffffffbc
   1a934:	b	1a544 <__assert_fail@plt+0x8d64>
   1a938:	cmp	r0, #0
   1a93c:	bne	1a960 <__assert_fail@plt+0x9180>
   1a940:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1a944:	str	r5, [fp, #-72]	; 0xffffffb8
   1a948:	ldrb	r3, [r3]
   1a94c:	cmp	r3, #0
   1a950:	bne	1a400 <__assert_fail@plt+0x8c20>
   1a954:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1a958:	cmp	r3, #0
   1a95c:	bne	1a420 <__assert_fail@plt+0x8c40>
   1a960:	add	r0, r8, #4
   1a964:	strb	r5, [fp, #-68]	; 0xffffffbc
   1a968:	bl	1148c <mbsinit@plt>
   1a96c:	cmp	r0, #0
   1a970:	movne	r3, #0
   1a974:	strbne	r3, [fp, #-92]	; 0xffffffa4
   1a978:	b	1a544 <__assert_fail@plt+0x8d64>
   1a97c:	ldr	r8, [fp, #-188]	; 0xffffff44
   1a980:	add	r3, r7, #32
   1a984:	cmp	r8, r3
   1a988:	strne	r8, [r5, #-16]
   1a98c:	bne	1a9a4 <__assert_fail@plt+0x91c4>
   1a990:	ldr	r2, [fp, #-184]	; 0xffffff48
   1a994:	mov	r1, r8
   1a998:	mov	r0, r5
   1a99c:	bl	11474 <memcpy@plt>
   1a9a0:	str	r5, [r5, #-16]
   1a9a4:	ldrb	r2, [fp, #-216]	; 0xffffff28
   1a9a8:	ldr	r3, [fp, #-184]	; 0xffffff48
   1a9ac:	add	r5, r5, #40	; 0x28
   1a9b0:	strb	r2, [r5, #-48]	; 0xffffffd0
   1a9b4:	ldr	r2, [fp, #-216]	; 0xffffff28
   1a9b8:	str	r3, [r5, #-52]	; 0xffffffcc
   1a9bc:	cmp	r2, #0
   1a9c0:	add	r8, r8, r3
   1a9c4:	ldrne	r2, [fp, #-176]	; 0xffffff50
   1a9c8:	mov	r3, #0
   1a9cc:	strne	r2, [r5, #-44]	; 0xffffffd4
   1a9d0:	str	r8, [fp, #-188]	; 0xffffff44
   1a9d4:	strb	r3, [fp, #-192]	; 0xffffff40
   1a9d8:	b	1a2cc <__assert_fail@plt+0x8aec>
   1a9dc:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1a9e0:	ldr	r2, [fp, #-128]	; 0xffffff80
   1a9e4:	sub	sl, sl, #1
   1a9e8:	add	r3, r3, r2
   1a9ec:	str	r3, [fp, #-132]	; 0xffffff7c
   1a9f0:	mov	r3, #0
   1a9f4:	strb	r3, [fp, #-136]	; 0xffffff78
   1a9f8:	b	1a66c <__assert_fail@plt+0x8e8c>
   1a9fc:	strdeq	pc, [r1], -r0
   1aa00:	andeq	pc, r1, r0, lsl pc	; <UNPREDICTABLE>
   1aa04:	andeq	pc, r1, sl, lsl #21
   1aa08:	muleq	r1, r8, sl
   1aa0c:	andeq	pc, r1, pc, lsr #21
   1aa10:	andeq	pc, r1, r6, asr #21
   1aa14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa18:	sub	sp, sp, #308	; 0x134
   1aa1c:	mov	r6, r1
   1aa20:	mov	r4, r0
   1aa24:	bl	1157c <__ctype_get_mb_cur_max@plt>
   1aa28:	ldrb	r7, [r6]
   1aa2c:	cmp	r0, #1
   1aa30:	bls	1b300 <__assert_fail@plt+0x9b20>
   1aa34:	add	r8, sp, #304	; 0x130
   1aa38:	mov	r3, #0
   1aa3c:	ldr	r2, [pc, #2976]	; 1b5e4 <__assert_fail@plt+0x9e04>
   1aa40:	strb	r3, [r8, #-280]!	; 0xfffffee8
   1aa44:	str	r3, [sp, #28]
   1aa48:	str	r3, [sp, #32]
   1aa4c:	strb	r3, [sp, #36]	; 0x24
   1aa50:	lsr	r3, r7, #5
   1aa54:	and	r5, r7, #31
   1aa58:	ldr	r3, [r2, r3, lsl #2]
   1aa5c:	str	r6, [sp, #40]	; 0x28
   1aa60:	str	r2, [sp]
   1aa64:	lsr	r5, r3, r5
   1aa68:	ands	r5, r5, #1
   1aa6c:	beq	1aaa8 <__assert_fail@plt+0x92c8>
   1aa70:	mov	r3, #1
   1aa74:	str	r3, [sp, #44]	; 0x2c
   1aa78:	str	r7, [sp, #52]	; 0x34
   1aa7c:	strb	r3, [sp, #48]	; 0x30
   1aa80:	mov	r3, #1
   1aa84:	strb	r3, [sp, #36]	; 0x24
   1aa88:	ldrb	r3, [sp, #48]	; 0x30
   1aa8c:	cmp	r3, #0
   1aa90:	beq	1b3dc <__assert_fail@plt+0x9bfc>
   1aa94:	ldr	r3, [sp, #52]	; 0x34
   1aa98:	cmp	r3, #0
   1aa9c:	bne	1b3dc <__assert_fail@plt+0x9bfc>
   1aaa0:	mov	r0, r4
   1aaa4:	b	1b2f8 <__assert_fail@plt+0x9b18>
   1aaa8:	add	r0, sp, #28
   1aaac:	bl	1148c <mbsinit@plt>
   1aab0:	cmp	r0, #0
   1aab4:	bne	1aacc <__assert_fail@plt+0x92ec>
   1aab8:	ldr	r3, [pc, #2856]	; 1b5e8 <__assert_fail@plt+0x9e08>
   1aabc:	ldr	r1, [pc, #2856]	; 1b5ec <__assert_fail@plt+0x9e0c>
   1aac0:	ldr	r0, [pc, #2856]	; 1b5f0 <__assert_fail@plt+0x9e10>
   1aac4:	mov	r2, #143	; 0x8f
   1aac8:	bl	117e0 <__assert_fail@plt>
   1aacc:	mov	r7, #1
   1aad0:	strb	r7, [sp, #24]
   1aad4:	bl	1157c <__ctype_get_mb_cur_max@plt>
   1aad8:	mov	r1, r0
   1aadc:	mov	r0, r6
   1aae0:	bl	18d24 <__assert_fail@plt+0x7544>
   1aae4:	add	r3, sp, #28
   1aae8:	mov	r1, r6
   1aaec:	mov	r2, r0
   1aaf0:	add	r0, r8, #28
   1aaf4:	bl	1a064 <__assert_fail@plt+0x8884>
   1aaf8:	cmn	r0, #1
   1aafc:	str	r0, [sp, #44]	; 0x2c
   1ab00:	streq	r7, [sp, #44]	; 0x2c
   1ab04:	beq	1ab1c <__assert_fail@plt+0x933c>
   1ab08:	cmn	r0, #2
   1ab0c:	bne	1ab24 <__assert_fail@plt+0x9344>
   1ab10:	ldr	r0, [sp, #40]	; 0x28
   1ab14:	bl	1163c <strlen@plt>
   1ab18:	str	r0, [sp, #44]	; 0x2c
   1ab1c:	strb	r5, [sp, #48]	; 0x30
   1ab20:	b	1aa80 <__assert_fail@plt+0x92a0>
   1ab24:	cmp	r0, #0
   1ab28:	bne	1ab74 <__assert_fail@plt+0x9394>
   1ab2c:	ldr	r3, [sp, #40]	; 0x28
   1ab30:	str	r7, [sp, #44]	; 0x2c
   1ab34:	ldrb	r3, [r3]
   1ab38:	cmp	r3, #0
   1ab3c:	beq	1ab54 <__assert_fail@plt+0x9374>
   1ab40:	ldr	r3, [pc, #2720]	; 1b5e8 <__assert_fail@plt+0x9e08>
   1ab44:	mov	r2, #171	; 0xab
   1ab48:	ldr	r1, [pc, #2716]	; 1b5ec <__assert_fail@plt+0x9e0c>
   1ab4c:	ldr	r0, [pc, #2720]	; 1b5f4 <__assert_fail@plt+0x9e14>
   1ab50:	b	1aac8 <__assert_fail@plt+0x92e8>
   1ab54:	ldr	r3, [sp, #52]	; 0x34
   1ab58:	cmp	r3, #0
   1ab5c:	beq	1ab74 <__assert_fail@plt+0x9394>
   1ab60:	ldr	r3, [pc, #2688]	; 1b5e8 <__assert_fail@plt+0x9e08>
   1ab64:	mov	r2, #172	; 0xac
   1ab68:	ldr	r1, [pc, #2684]	; 1b5ec <__assert_fail@plt+0x9e0c>
   1ab6c:	ldr	r0, [pc, #2692]	; 1b5f8 <__assert_fail@plt+0x9e18>
   1ab70:	b	1aac8 <__assert_fail@plt+0x92e8>
   1ab74:	mov	r3, #1
   1ab78:	add	r0, sp, #28
   1ab7c:	strb	r3, [sp, #48]	; 0x30
   1ab80:	bl	1148c <mbsinit@plt>
   1ab84:	cmp	r0, #0
   1ab88:	movne	r3, #0
   1ab8c:	strbne	r3, [sp, #24]
   1ab90:	b	1aa80 <__assert_fail@plt+0x92a0>
   1ab94:	add	r0, r9, #4
   1ab98:	bl	1148c <mbsinit@plt>
   1ab9c:	cmp	r0, #0
   1aba0:	beq	1aab8 <__assert_fail@plt+0x92d8>
   1aba4:	mov	r3, #1
   1aba8:	strb	r3, [sp, #136]	; 0x88
   1abac:	bl	1157c <__ctype_get_mb_cur_max@plt>
   1abb0:	mov	r1, r0
   1abb4:	mov	r0, sl
   1abb8:	bl	18d24 <__assert_fail@plt+0x7544>
   1abbc:	add	r3, r9, #4
   1abc0:	mov	r1, sl
   1abc4:	mov	r2, r0
   1abc8:	add	r0, r9, #28
   1abcc:	bl	1a064 <__assert_fail@plt+0x8884>
   1abd0:	cmn	r0, #1
   1abd4:	str	r0, [sp, #156]	; 0x9c
   1abd8:	bne	1abec <__assert_fail@plt+0x940c>
   1abdc:	mov	r3, #1
   1abe0:	str	r3, [sp, #156]	; 0x9c
   1abe4:	mov	r3, #0
   1abe8:	b	1b2d4 <__assert_fail@plt+0x9af4>
   1abec:	cmn	r0, #2
   1abf0:	bne	1ac04 <__assert_fail@plt+0x9424>
   1abf4:	ldr	r0, [sp, #152]	; 0x98
   1abf8:	bl	1163c <strlen@plt>
   1abfc:	str	r0, [sp, #156]	; 0x9c
   1ac00:	b	1abe4 <__assert_fail@plt+0x9404>
   1ac04:	cmp	r0, #0
   1ac08:	bne	1ac30 <__assert_fail@plt+0x9450>
   1ac0c:	mov	r3, #1
   1ac10:	str	r3, [sp, #156]	; 0x9c
   1ac14:	ldr	r3, [sp, #152]	; 0x98
   1ac18:	ldrb	r3, [r3]
   1ac1c:	cmp	r3, #0
   1ac20:	bne	1ab40 <__assert_fail@plt+0x9360>
   1ac24:	ldr	r3, [sp, #164]	; 0xa4
   1ac28:	cmp	r3, #0
   1ac2c:	bne	1ab60 <__assert_fail@plt+0x9380>
   1ac30:	mov	r3, #1
   1ac34:	add	r0, r9, #4
   1ac38:	strb	r3, [sp, #160]	; 0xa0
   1ac3c:	bl	1148c <mbsinit@plt>
   1ac40:	cmp	r0, #0
   1ac44:	movne	r3, #0
   1ac48:	strbne	r3, [sp, #136]	; 0x88
   1ac4c:	b	1b2d8 <__assert_fail@plt+0x9af8>
   1ac50:	ldrb	r3, [sp, #92]	; 0x5c
   1ac54:	cmp	r3, #0
   1ac58:	bne	1aca8 <__assert_fail@plt+0x94c8>
   1ac5c:	ldrb	r3, [sp, #80]	; 0x50
   1ac60:	ldr	sl, [sp, #96]	; 0x60
   1ac64:	cmp	r3, #0
   1ac68:	bne	1acf8 <__assert_fail@plt+0x9518>
   1ac6c:	ldrb	r3, [sl]
   1ac70:	ldr	r1, [sp]
   1ac74:	lsr	r2, r3, #5
   1ac78:	and	r3, r3, #31
   1ac7c:	ldr	r2, [r1, r2, lsl #2]
   1ac80:	lsr	r3, r2, r3
   1ac84:	tst	r3, #1
   1ac88:	beq	1ace0 <__assert_fail@plt+0x9500>
   1ac8c:	mov	r3, #1
   1ac90:	str	r3, [sp, #100]	; 0x64
   1ac94:	ldrb	r2, [sl]
   1ac98:	str	r2, [sp, #108]	; 0x6c
   1ac9c:	strb	r3, [sp, #104]	; 0x68
   1aca0:	mov	r3, #1
   1aca4:	strb	r3, [sp, #92]	; 0x5c
   1aca8:	ldrb	r3, [sp, #104]	; 0x68
   1acac:	cmp	r3, #0
   1acb0:	beq	1acc0 <__assert_fail@plt+0x94e0>
   1acb4:	ldr	r3, [sp, #108]	; 0x6c
   1acb8:	cmp	r3, #0
   1acbc:	beq	1b464 <__assert_fail@plt+0x9c84>
   1acc0:	ldr	r3, [sp, #96]	; 0x60
   1acc4:	ldr	r2, [sp, #100]	; 0x64
   1acc8:	sub	r5, r5, #1
   1accc:	add	r3, r3, r2
   1acd0:	str	r3, [sp, #96]	; 0x60
   1acd4:	mov	r3, #0
   1acd8:	strb	r3, [sp, #92]	; 0x5c
   1acdc:	b	1b45c <__assert_fail@plt+0x9c7c>
   1ace0:	add	r0, r7, #4
   1ace4:	bl	1148c <mbsinit@plt>
   1ace8:	cmp	r0, #0
   1acec:	beq	1aab8 <__assert_fail@plt+0x92d8>
   1acf0:	mov	r3, #1
   1acf4:	strb	r3, [sp, #80]	; 0x50
   1acf8:	bl	1157c <__ctype_get_mb_cur_max@plt>
   1acfc:	mov	r1, r0
   1ad00:	mov	r0, sl
   1ad04:	bl	18d24 <__assert_fail@plt+0x7544>
   1ad08:	add	r3, r7, #4
   1ad0c:	mov	r1, sl
   1ad10:	mov	r2, r0
   1ad14:	add	r0, r7, #28
   1ad18:	bl	1a064 <__assert_fail@plt+0x8884>
   1ad1c:	cmn	r0, #1
   1ad20:	str	r0, [sp, #100]	; 0x64
   1ad24:	bne	1ad38 <__assert_fail@plt+0x9558>
   1ad28:	mov	r3, #1
   1ad2c:	str	r3, [sp, #100]	; 0x64
   1ad30:	mov	r3, #0
   1ad34:	b	1ac9c <__assert_fail@plt+0x94bc>
   1ad38:	cmn	r0, #2
   1ad3c:	bne	1ad50 <__assert_fail@plt+0x9570>
   1ad40:	ldr	r0, [sp, #96]	; 0x60
   1ad44:	bl	1163c <strlen@plt>
   1ad48:	str	r0, [sp, #100]	; 0x64
   1ad4c:	b	1ad30 <__assert_fail@plt+0x9550>
   1ad50:	cmp	r0, #0
   1ad54:	bne	1ad7c <__assert_fail@plt+0x959c>
   1ad58:	mov	r3, #1
   1ad5c:	str	r3, [sp, #100]	; 0x64
   1ad60:	ldr	r3, [sp, #96]	; 0x60
   1ad64:	ldrb	r3, [r3]
   1ad68:	cmp	r3, #0
   1ad6c:	bne	1ab40 <__assert_fail@plt+0x9360>
   1ad70:	ldr	r3, [sp, #108]	; 0x6c
   1ad74:	cmp	r3, #0
   1ad78:	bne	1ab60 <__assert_fail@plt+0x9380>
   1ad7c:	mov	r3, #1
   1ad80:	ldr	r0, [sp, #16]
   1ad84:	strb	r3, [sp, #104]	; 0x68
   1ad88:	bl	1148c <mbsinit@plt>
   1ad8c:	cmp	r0, #0
   1ad90:	movne	r3, #0
   1ad94:	strbne	r3, [sp, #80]	; 0x50
   1ad98:	b	1aca0 <__assert_fail@plt+0x94c0>
   1ad9c:	add	r0, r7, #4
   1ada0:	bl	1148c <mbsinit@plt>
   1ada4:	cmp	r0, #0
   1ada8:	beq	1aab8 <__assert_fail@plt+0x92d8>
   1adac:	mov	r3, #1
   1adb0:	strb	r3, [sp, #80]	; 0x50
   1adb4:	bl	1157c <__ctype_get_mb_cur_max@plt>
   1adb8:	mov	r1, r0
   1adbc:	mov	r0, r5
   1adc0:	bl	18d24 <__assert_fail@plt+0x7544>
   1adc4:	add	r3, r7, #4
   1adc8:	mov	r1, r5
   1adcc:	mov	r2, r0
   1add0:	add	r0, r7, #28
   1add4:	bl	1a064 <__assert_fail@plt+0x8884>
   1add8:	cmn	r0, #1
   1addc:	str	r0, [sp, #100]	; 0x64
   1ade0:	bne	1adf4 <__assert_fail@plt+0x9614>
   1ade4:	mov	r3, #1
   1ade8:	str	r3, [sp, #100]	; 0x64
   1adec:	mov	r3, #0
   1adf0:	b	1b4b0 <__assert_fail@plt+0x9cd0>
   1adf4:	cmn	r0, #2
   1adf8:	bne	1ae0c <__assert_fail@plt+0x962c>
   1adfc:	ldr	r0, [sp, #96]	; 0x60
   1ae00:	bl	1163c <strlen@plt>
   1ae04:	str	r0, [sp, #100]	; 0x64
   1ae08:	b	1adec <__assert_fail@plt+0x960c>
   1ae0c:	cmp	r0, #0
   1ae10:	bne	1ae38 <__assert_fail@plt+0x9658>
   1ae14:	mov	r3, #1
   1ae18:	str	r3, [sp, #100]	; 0x64
   1ae1c:	ldr	r3, [sp, #96]	; 0x60
   1ae20:	ldrb	r3, [r3]
   1ae24:	cmp	r3, #0
   1ae28:	bne	1ab40 <__assert_fail@plt+0x9360>
   1ae2c:	ldr	r3, [sp, #108]	; 0x6c
   1ae30:	cmp	r3, #0
   1ae34:	bne	1ab60 <__assert_fail@plt+0x9380>
   1ae38:	mov	r3, #1
   1ae3c:	ldr	r0, [sp, #16]
   1ae40:	strb	r3, [sp, #104]	; 0x68
   1ae44:	bl	1148c <mbsinit@plt>
   1ae48:	cmp	r0, #0
   1ae4c:	movne	r3, #0
   1ae50:	strbne	r3, [sp, #80]	; 0x50
   1ae54:	b	1b4b4 <__assert_fail@plt+0x9cd4>
   1ae58:	mov	r5, r8
   1ae5c:	ldr	r3, [sp, #8]
   1ae60:	add	r8, r8, #1
   1ae64:	add	r3, r3, #1
   1ae68:	str	r3, [sp, #8]
   1ae6c:	ldrb	r3, [sp, #160]	; 0xa0
   1ae70:	cmp	r3, #0
   1ae74:	beq	1afb4 <__assert_fail@plt+0x97d4>
   1ae78:	ldrb	r3, [sp, #48]	; 0x30
   1ae7c:	cmp	r3, #0
   1ae80:	beq	1afb4 <__assert_fail@plt+0x97d4>
   1ae84:	ldr	r3, [sp, #52]	; 0x34
   1ae88:	ldr	r0, [sp, #164]	; 0xa4
   1ae8c:	sub	r0, r0, r3
   1ae90:	clz	r0, r0
   1ae94:	lsr	r0, r0, #5
   1ae98:	cmp	r0, #0
   1ae9c:	beq	1b278 <__assert_fail@plt+0x9a98>
   1aea0:	mov	lr, r9
   1aea4:	add	ip, sp, #192	; 0xc0
   1aea8:	ldm	lr!, {r0, r1, r2, r3}
   1aeac:	add	sl, sp, #304	; 0x130
   1aeb0:	stmia	ip!, {r0, r1, r2, r3}
   1aeb4:	ldm	lr!, {r0, r1, r2, r3}
   1aeb8:	stmia	ip!, {r0, r1, r2, r3}
   1aebc:	ldm	lr!, {r0, r1, r2, r3}
   1aec0:	stmia	ip!, {r0, r1, r2, r3}
   1aec4:	ldm	lr, {r0, r1}
   1aec8:	ldr	r2, [sp, #212]	; 0xd4
   1aecc:	ldr	r3, [sp, #208]	; 0xd0
   1aed0:	stm	ip, {r0, r1}
   1aed4:	add	r3, r3, r2
   1aed8:	mov	r2, #0
   1aedc:	str	r3, [sp, #208]	; 0xd0
   1aee0:	strb	r2, [sp, #204]	; 0xcc
   1aee4:	str	r6, [sp, #264]	; 0x108
   1aee8:	ldrb	r1, [r6]
   1aeec:	strb	r2, [sl, #-56]!	; 0xffffffc8
   1aef0:	add	r3, sl, #4
   1aef4:	ldr	ip, [sp]
   1aef8:	str	r2, [sp, #252]	; 0xfc
   1aefc:	str	r2, [r3, #4]
   1af00:	strb	r2, [sp, #260]	; 0x104
   1af04:	lsr	r2, r1, #5
   1af08:	and	r0, r1, #31
   1af0c:	ldr	r2, [ip, r2, lsl #2]
   1af10:	lsr	r2, r2, r0
   1af14:	ands	r2, r2, #1
   1af18:	movne	r3, #1
   1af1c:	str	r2, [sp, #12]
   1af20:	strne	r3, [sp, #268]	; 0x10c
   1af24:	strne	r1, [sp, #276]	; 0x114
   1af28:	bne	1af80 <__assert_fail@plt+0x97a0>
   1af2c:	mov	r0, r3
   1af30:	str	r3, [sp, #20]
   1af34:	bl	1148c <mbsinit@plt>
   1af38:	cmp	r0, #0
   1af3c:	beq	1aab8 <__assert_fail@plt+0x92d8>
   1af40:	mov	fp, #1
   1af44:	strb	fp, [sp, #248]	; 0xf8
   1af48:	bl	1157c <__ctype_get_mb_cur_max@plt>
   1af4c:	mov	r1, r0
   1af50:	mov	r0, r6
   1af54:	bl	18d24 <__assert_fail@plt+0x7544>
   1af58:	ldr	r3, [sp, #20]
   1af5c:	mov	r1, r6
   1af60:	mov	r2, r0
   1af64:	add	r0, sl, #28
   1af68:	bl	1a064 <__assert_fail@plt+0x8884>
   1af6c:	cmn	r0, #1
   1af70:	str	r0, [sp, #268]	; 0x10c
   1af74:	bne	1afe0 <__assert_fail@plt+0x9800>
   1af78:	str	fp, [sp, #268]	; 0x10c
   1af7c:	ldrb	r3, [sp, #12]
   1af80:	strb	r3, [sp, #272]	; 0x110
   1af84:	mov	r3, #1
   1af88:	strb	r3, [sp, #260]	; 0x104
   1af8c:	ldrb	r3, [sp, #272]	; 0x110
   1af90:	cmp	r3, #0
   1af94:	beq	1b4f8 <__assert_fail@plt+0x9d18>
   1af98:	ldr	r3, [sp, #276]	; 0x114
   1af9c:	cmp	r3, #0
   1afa0:	bne	1b4f8 <__assert_fail@plt+0x9d18>
   1afa4:	bl	117c8 <abort@plt>
   1afa8:	mov	r5, r8
   1afac:	str	r3, [sp, #4]
   1afb0:	b	1ae5c <__assert_fail@plt+0x967c>
   1afb4:	ldr	r2, [sp, #156]	; 0x9c
   1afb8:	ldr	r3, [sp, #44]	; 0x2c
   1afbc:	cmp	r2, r3
   1afc0:	movne	r0, #0
   1afc4:	bne	1ae98 <__assert_fail@plt+0x96b8>
   1afc8:	ldr	r1, [sp, #40]	; 0x28
   1afcc:	ldr	r0, [sp, #152]	; 0x98
   1afd0:	bl	11498 <memcmp@plt>
   1afd4:	clz	r0, r0
   1afd8:	lsr	r0, r0, #5
   1afdc:	b	1ae98 <__assert_fail@plt+0x96b8>
   1afe0:	cmn	r0, #2
   1afe4:	bne	1aff8 <__assert_fail@plt+0x9818>
   1afe8:	ldr	r0, [sp, #264]	; 0x108
   1afec:	bl	1163c <strlen@plt>
   1aff0:	str	r0, [sp, #268]	; 0x10c
   1aff4:	b	1af7c <__assert_fail@plt+0x979c>
   1aff8:	cmp	r0, #0
   1affc:	bne	1b020 <__assert_fail@plt+0x9840>
   1b000:	ldr	r3, [sp, #264]	; 0x108
   1b004:	str	fp, [sp, #268]	; 0x10c
   1b008:	ldrb	r3, [r3]
   1b00c:	cmp	r3, #0
   1b010:	bne	1ab40 <__assert_fail@plt+0x9360>
   1b014:	ldr	r3, [sp, #276]	; 0x114
   1b018:	cmp	r3, #0
   1b01c:	bne	1ab60 <__assert_fail@plt+0x9380>
   1b020:	mov	r3, #1
   1b024:	add	r0, sp, #252	; 0xfc
   1b028:	strb	r3, [sp, #272]	; 0x110
   1b02c:	bl	1148c <mbsinit@plt>
   1b030:	cmp	r0, #0
   1b034:	movne	r3, #0
   1b038:	strbne	r3, [sp, #248]	; 0xf8
   1b03c:	b	1af84 <__assert_fail@plt+0x97a4>
   1b040:	add	r0, sp, #252	; 0xfc
   1b044:	bl	1148c <mbsinit@plt>
   1b048:	cmp	r0, #0
   1b04c:	beq	1aab8 <__assert_fail@plt+0x92d8>
   1b050:	mov	r3, #1
   1b054:	strb	r3, [sp, #248]	; 0xf8
   1b058:	ldr	fp, [sp, #264]	; 0x108
   1b05c:	bl	1157c <__ctype_get_mb_cur_max@plt>
   1b060:	mov	r1, r0
   1b064:	mov	r0, fp
   1b068:	bl	18d24 <__assert_fail@plt+0x7544>
   1b06c:	add	r3, sl, #4
   1b070:	mov	r1, fp
   1b074:	mov	r2, r0
   1b078:	add	r0, sl, #28
   1b07c:	bl	1a064 <__assert_fail@plt+0x8884>
   1b080:	cmn	r0, #1
   1b084:	str	r0, [sp, #268]	; 0x10c
   1b088:	bne	1b09c <__assert_fail@plt+0x98bc>
   1b08c:	mov	r3, #1
   1b090:	str	r3, [sp, #268]	; 0x10c
   1b094:	mov	r3, #0
   1b098:	b	1b24c <__assert_fail@plt+0x9a6c>
   1b09c:	cmn	r0, #2
   1b0a0:	bne	1b0b4 <__assert_fail@plt+0x98d4>
   1b0a4:	ldr	r0, [sp, #264]	; 0x108
   1b0a8:	bl	1163c <strlen@plt>
   1b0ac:	str	r0, [sp, #268]	; 0x10c
   1b0b0:	b	1b094 <__assert_fail@plt+0x98b4>
   1b0b4:	cmp	r0, #0
   1b0b8:	bne	1b0e0 <__assert_fail@plt+0x9900>
   1b0bc:	mov	r3, #1
   1b0c0:	str	r3, [sp, #268]	; 0x10c
   1b0c4:	ldr	r3, [sp, #264]	; 0x108
   1b0c8:	ldrb	r3, [r3]
   1b0cc:	cmp	r3, #0
   1b0d0:	bne	1ab40 <__assert_fail@plt+0x9360>
   1b0d4:	ldr	r3, [sp, #276]	; 0x114
   1b0d8:	cmp	r3, #0
   1b0dc:	bne	1ab60 <__assert_fail@plt+0x9380>
   1b0e0:	mov	r3, #1
   1b0e4:	add	r0, sp, #252	; 0xfc
   1b0e8:	strb	r3, [sp, #272]	; 0x110
   1b0ec:	bl	1148c <mbsinit@plt>
   1b0f0:	cmp	r0, #0
   1b0f4:	movne	r3, #0
   1b0f8:	strbne	r3, [sp, #248]	; 0xf8
   1b0fc:	b	1b250 <__assert_fail@plt+0x9a70>
   1b100:	add	r0, sp, #196	; 0xc4
   1b104:	bl	1148c <mbsinit@plt>
   1b108:	cmp	r0, #0
   1b10c:	beq	1aab8 <__assert_fail@plt+0x92d8>
   1b110:	mov	r3, #1
   1b114:	strb	r3, [sp, #192]	; 0xc0
   1b118:	ldr	fp, [sp, #208]	; 0xd0
   1b11c:	bl	1157c <__ctype_get_mb_cur_max@plt>
   1b120:	mov	r1, r0
   1b124:	mov	r0, fp
   1b128:	bl	18d24 <__assert_fail@plt+0x7544>
   1b12c:	add	r3, sp, #196	; 0xc4
   1b130:	mov	r1, fp
   1b134:	mov	r2, r0
   1b138:	add	r0, sp, #220	; 0xdc
   1b13c:	bl	1a064 <__assert_fail@plt+0x8884>
   1b140:	cmn	r0, #1
   1b144:	str	r0, [sp, #212]	; 0xd4
   1b148:	bne	1b15c <__assert_fail@plt+0x997c>
   1b14c:	mov	r3, #1
   1b150:	str	r3, [sp, #212]	; 0xd4
   1b154:	mov	r3, #0
   1b158:	b	1b560 <__assert_fail@plt+0x9d80>
   1b15c:	cmn	r0, #2
   1b160:	bne	1b174 <__assert_fail@plt+0x9994>
   1b164:	ldr	r0, [sp, #208]	; 0xd0
   1b168:	bl	1163c <strlen@plt>
   1b16c:	str	r0, [sp, #212]	; 0xd4
   1b170:	b	1b154 <__assert_fail@plt+0x9974>
   1b174:	cmp	r0, #0
   1b178:	bne	1b1a0 <__assert_fail@plt+0x99c0>
   1b17c:	mov	r3, #1
   1b180:	str	r3, [sp, #212]	; 0xd4
   1b184:	ldr	r3, [sp, #208]	; 0xd0
   1b188:	ldrb	r3, [r3]
   1b18c:	cmp	r3, #0
   1b190:	bne	1ab40 <__assert_fail@plt+0x9360>
   1b194:	ldr	r3, [sp, #220]	; 0xdc
   1b198:	cmp	r3, #0
   1b19c:	bne	1ab60 <__assert_fail@plt+0x9380>
   1b1a0:	mov	r3, #1
   1b1a4:	add	r0, sp, #196	; 0xc4
   1b1a8:	strb	r3, [sp, #216]	; 0xd8
   1b1ac:	bl	1148c <mbsinit@plt>
   1b1b0:	cmp	r0, #0
   1b1b4:	movne	r3, #0
   1b1b8:	strbne	r3, [sp, #192]	; 0xc0
   1b1bc:	b	1b564 <__assert_fail@plt+0x9d84>
   1b1c0:	ldrb	r3, [sp, #272]	; 0x110
   1b1c4:	cmp	r3, #0
   1b1c8:	beq	1b590 <__assert_fail@plt+0x9db0>
   1b1cc:	ldr	r0, [sp, #276]	; 0x114
   1b1d0:	ldr	r3, [sp, #220]	; 0xdc
   1b1d4:	subs	r0, r3, r0
   1b1d8:	movne	r0, #1
   1b1dc:	cmp	r0, #0
   1b1e0:	bne	1b278 <__assert_fail@plt+0x9a98>
   1b1e4:	ldr	r2, [sp, #212]	; 0xd4
   1b1e8:	ldr	r3, [sp, #208]	; 0xd0
   1b1ec:	strb	r0, [sp, #204]	; 0xcc
   1b1f0:	add	r3, r3, r2
   1b1f4:	str	r3, [sp, #208]	; 0xd0
   1b1f8:	ldr	r2, [sp, #268]	; 0x10c
   1b1fc:	ldr	r3, [sp, #264]	; 0x108
   1b200:	strb	r0, [sp, #260]	; 0x104
   1b204:	add	r3, r3, r2
   1b208:	str	r3, [sp, #264]	; 0x108
   1b20c:	ldrb	r3, [sp, #248]	; 0xf8
   1b210:	cmp	r3, #0
   1b214:	bne	1b058 <__assert_fail@plt+0x9878>
   1b218:	ldr	r1, [sp, #264]	; 0x108
   1b21c:	ldr	r0, [sp]
   1b220:	ldrb	r3, [r1]
   1b224:	lsr	r2, r3, #5
   1b228:	and	r3, r3, #31
   1b22c:	ldr	r2, [r0, r2, lsl #2]
   1b230:	lsr	r3, r2, r3
   1b234:	tst	r3, #1
   1b238:	beq	1b040 <__assert_fail@plt+0x9860>
   1b23c:	mov	r3, #1
   1b240:	str	r3, [sp, #268]	; 0x10c
   1b244:	ldrb	r2, [r1]
   1b248:	str	r2, [sp, #276]	; 0x114
   1b24c:	strb	r3, [sp, #272]	; 0x110
   1b250:	mov	r3, #1
   1b254:	strb	r3, [sp, #260]	; 0x104
   1b258:	ldrb	r3, [sp, #272]	; 0x110
   1b25c:	cmp	r3, #0
   1b260:	beq	1b514 <__assert_fail@plt+0x9d34>
   1b264:	ldr	r3, [sp, #276]	; 0x114
   1b268:	cmp	r3, #0
   1b26c:	bne	1b514 <__assert_fail@plt+0x9d34>
   1b270:	ldr	r0, [sp, #152]	; 0x98
   1b274:	b	1b2f8 <__assert_fail@plt+0x9b18>
   1b278:	ldr	r3, [sp, #152]	; 0x98
   1b27c:	ldr	r2, [sp, #156]	; 0x9c
   1b280:	ldr	fp, [sp, #4]
   1b284:	add	r3, r3, r2
   1b288:	str	r3, [sp, #152]	; 0x98
   1b28c:	mov	r3, #0
   1b290:	strb	r3, [sp, #148]	; 0x94
   1b294:	ldrb	r3, [sp, #136]	; 0x88
   1b298:	ldr	sl, [sp, #152]	; 0x98
   1b29c:	cmp	r3, #0
   1b2a0:	bne	1abac <__assert_fail@plt+0x93cc>
   1b2a4:	ldrb	r3, [sl]
   1b2a8:	ldr	r1, [sp]
   1b2ac:	lsr	r2, r3, #5
   1b2b0:	and	r3, r3, #31
   1b2b4:	ldr	r2, [r1, r2, lsl #2]
   1b2b8:	lsr	r3, r2, r3
   1b2bc:	tst	r3, #1
   1b2c0:	beq	1ab94 <__assert_fail@plt+0x93b4>
   1b2c4:	mov	r3, #1
   1b2c8:	str	r3, [sp, #156]	; 0x9c
   1b2cc:	ldrb	r2, [sl]
   1b2d0:	str	r2, [sp, #164]	; 0xa4
   1b2d4:	strb	r3, [sp, #160]	; 0xa0
   1b2d8:	mov	r3, #1
   1b2dc:	strb	r3, [sp, #148]	; 0x94
   1b2e0:	ldrb	r3, [sp, #160]	; 0xa0
   1b2e4:	cmp	r3, #0
   1b2e8:	beq	1b428 <__assert_fail@plt+0x9c48>
   1b2ec:	ldr	r0, [sp, #164]	; 0xa4
   1b2f0:	cmp	r0, #0
   1b2f4:	bne	1b428 <__assert_fail@plt+0x9c48>
   1b2f8:	add	sp, sp, #308	; 0x134
   1b2fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b300:	cmp	r7, #0
   1b304:	beq	1aaa0 <__assert_fail@plt+0x92c0>
   1b308:	mov	sl, #0
   1b30c:	add	fp, r6, #1
   1b310:	mov	r3, r6
   1b314:	mov	r5, sl
   1b318:	mov	r9, sl
   1b31c:	mov	r2, #1
   1b320:	ldrb	r1, [r4]
   1b324:	cmp	r1, #0
   1b328:	bne	1b334 <__assert_fail@plt+0x9b54>
   1b32c:	mov	r0, #0
   1b330:	b	1b2f8 <__assert_fail@plt+0x9b18>
   1b334:	cmp	r9, #9
   1b338:	movls	r8, #0
   1b33c:	andhi	r8, r2, #1
   1b340:	cmp	r8, #0
   1b344:	beq	1b3d4 <__assert_fail@plt+0x9bf4>
   1b348:	add	r2, r9, r9, lsl #2
   1b34c:	cmp	r5, r2
   1b350:	bcc	1b380 <__assert_fail@plt+0x9ba0>
   1b354:	cmp	r3, #0
   1b358:	beq	1b5b8 <__assert_fail@plt+0x9dd8>
   1b35c:	sub	r1, r5, sl
   1b360:	mov	r0, r3
   1b364:	str	r3, [sp]
   1b368:	bl	116fc <strnlen@plt>
   1b36c:	ldr	r3, [sp]
   1b370:	mov	sl, r5
   1b374:	ldrb	r2, [r3, r0]!
   1b378:	cmp	r2, #0
   1b37c:	beq	1b5b8 <__assert_fail@plt+0x9dd8>
   1b380:	ldrb	r2, [r4]
   1b384:	add	r9, r9, #1
   1b388:	add	r1, r5, #1
   1b38c:	cmp	r2, r7
   1b390:	bne	1b3c4 <__assert_fail@plt+0x9be4>
   1b394:	mov	r2, fp
   1b398:	mov	lr, r4
   1b39c:	sub	r5, r5, r6
   1b3a0:	ldrb	ip, [r2], #1
   1b3a4:	cmp	ip, #0
   1b3a8:	beq	1aaa0 <__assert_fail@plt+0x92c0>
   1b3ac:	ldrb	r0, [lr, #1]!
   1b3b0:	cmp	r0, #0
   1b3b4:	beq	1b32c <__assert_fail@plt+0x9b4c>
   1b3b8:	cmp	ip, r0
   1b3bc:	add	r1, r5, r2
   1b3c0:	beq	1b3a0 <__assert_fail@plt+0x9bc0>
   1b3c4:	add	r4, r4, #1
   1b3c8:	mov	r5, r1
   1b3cc:	mov	r2, r8
   1b3d0:	b	1b320 <__assert_fail@plt+0x9b40>
   1b3d4:	mov	r8, r2
   1b3d8:	b	1b380 <__assert_fail@plt+0x9ba0>
   1b3dc:	add	r7, sp, #304	; 0x130
   1b3e0:	mov	r5, #0
   1b3e4:	add	r9, sp, #304	; 0x130
   1b3e8:	strb	r5, [r7, #-224]!	; 0xffffff20
   1b3ec:	add	r3, r7, #4
   1b3f0:	str	r5, [sp, #84]	; 0x54
   1b3f4:	strb	r5, [r9, #-168]!	; 0xffffff58
   1b3f8:	str	r5, [r7, #8]
   1b3fc:	str	r5, [sp, #140]	; 0x8c
   1b400:	str	r6, [sp, #96]	; 0x60
   1b404:	str	r5, [r9, #8]
   1b408:	strb	r5, [sp, #92]	; 0x5c
   1b40c:	str	r4, [sp, #152]	; 0x98
   1b410:	strb	r5, [sp, #148]	; 0x94
   1b414:	mov	r8, r5
   1b418:	str	r5, [sp, #8]
   1b41c:	mov	fp, #1
   1b420:	str	r3, [sp, #16]
   1b424:	b	1b294 <__assert_fail@plt+0x9ab4>
   1b428:	ldr	r3, [sp, #8]
   1b42c:	cmp	r3, #9
   1b430:	movls	r3, #0
   1b434:	andhi	r3, fp, #1
   1b438:	cmp	r3, #0
   1b43c:	str	r3, [sp, #4]
   1b440:	streq	fp, [sp, #4]
   1b444:	beq	1ae5c <__assert_fail@plt+0x967c>
   1b448:	ldr	r3, [sp, #8]
   1b44c:	add	r3, r3, r3, lsl #2
   1b450:	cmp	r8, r3
   1b454:	bcc	1ae5c <__assert_fail@plt+0x967c>
   1b458:	sub	r5, r8, r5
   1b45c:	cmp	r5, #0
   1b460:	bne	1ac50 <__assert_fail@plt+0x9470>
   1b464:	ldrb	r3, [sp, #92]	; 0x5c
   1b468:	cmp	r3, #0
   1b46c:	bne	1b4bc <__assert_fail@plt+0x9cdc>
   1b470:	ldrb	r3, [sp, #80]	; 0x50
   1b474:	ldr	r5, [sp, #96]	; 0x60
   1b478:	cmp	r3, #0
   1b47c:	bne	1adb4 <__assert_fail@plt+0x95d4>
   1b480:	ldrb	r3, [r5]
   1b484:	ldr	r1, [sp]
   1b488:	lsr	r2, r3, #5
   1b48c:	and	r3, r3, #31
   1b490:	ldr	r2, [r1, r2, lsl #2]
   1b494:	lsr	r3, r2, r3
   1b498:	tst	r3, #1
   1b49c:	beq	1ad9c <__assert_fail@plt+0x95bc>
   1b4a0:	mov	r3, #1
   1b4a4:	str	r3, [sp, #100]	; 0x64
   1b4a8:	ldrb	r2, [r5]
   1b4ac:	str	r2, [sp, #108]	; 0x6c
   1b4b0:	strb	r3, [sp, #104]	; 0x68
   1b4b4:	mov	r3, #1
   1b4b8:	strb	r3, [sp, #92]	; 0x5c
   1b4bc:	ldrb	r3, [sp, #104]	; 0x68
   1b4c0:	cmp	r3, #0
   1b4c4:	beq	1ae58 <__assert_fail@plt+0x9678>
   1b4c8:	ldr	r2, [sp, #108]	; 0x6c
   1b4cc:	cmp	r2, #0
   1b4d0:	bne	1afa8 <__assert_fail@plt+0x97c8>
   1b4d4:	add	r2, sp, #248	; 0xf8
   1b4d8:	mov	r1, r6
   1b4dc:	mov	r0, r4
   1b4e0:	bl	1a1d8 <__assert_fail@plt+0x89f8>
   1b4e4:	subs	r3, r0, #0
   1b4e8:	str	r3, [sp, #4]
   1b4ec:	beq	1ae58 <__assert_fail@plt+0x9678>
   1b4f0:	ldr	r0, [sp, #248]	; 0xf8
   1b4f4:	b	1b2f8 <__assert_fail@plt+0x9b18>
   1b4f8:	ldr	r3, [sp, #264]	; 0x108
   1b4fc:	ldr	r2, [sp, #268]	; 0x10c
   1b500:	add	r3, r3, r2
   1b504:	str	r3, [sp, #264]	; 0x108
   1b508:	mov	r3, #0
   1b50c:	strb	r3, [sp, #260]	; 0x104
   1b510:	b	1b20c <__assert_fail@plt+0x9a2c>
   1b514:	ldrb	r3, [sp, #204]	; 0xcc
   1b518:	cmp	r3, #0
   1b51c:	bne	1b56c <__assert_fail@plt+0x9d8c>
   1b520:	ldrb	r3, [sp, #192]	; 0xc0
   1b524:	cmp	r3, #0
   1b528:	bne	1b118 <__assert_fail@plt+0x9938>
   1b52c:	ldr	r1, [sp, #208]	; 0xd0
   1b530:	ldr	r0, [sp]
   1b534:	ldrb	r3, [r1]
   1b538:	lsr	r2, r3, #5
   1b53c:	and	r3, r3, #31
   1b540:	ldr	r2, [r0, r2, lsl #2]
   1b544:	lsr	r3, r2, r3
   1b548:	tst	r3, #1
   1b54c:	beq	1b100 <__assert_fail@plt+0x9920>
   1b550:	mov	r3, #1
   1b554:	str	r3, [sp, #212]	; 0xd4
   1b558:	ldrb	r2, [r1]
   1b55c:	str	r2, [sp, #220]	; 0xdc
   1b560:	strb	r3, [sp, #216]	; 0xd8
   1b564:	mov	r3, #1
   1b568:	strb	r3, [sp, #204]	; 0xcc
   1b56c:	ldrb	r3, [sp, #216]	; 0xd8
   1b570:	cmp	r3, #0
   1b574:	beq	1b584 <__assert_fail@plt+0x9da4>
   1b578:	ldr	r0, [sp, #220]	; 0xdc
   1b57c:	cmp	r0, #0
   1b580:	beq	1b2f8 <__assert_fail@plt+0x9b18>
   1b584:	cmp	r3, #0
   1b588:	add	r8, r8, #1
   1b58c:	bne	1b1c0 <__assert_fail@plt+0x99e0>
   1b590:	ldr	r2, [sp, #212]	; 0xd4
   1b594:	ldr	r3, [sp, #268]	; 0x10c
   1b598:	cmp	r2, r3
   1b59c:	bne	1b278 <__assert_fail@plt+0x9a98>
   1b5a0:	ldr	r1, [sp, #264]	; 0x108
   1b5a4:	ldr	r0, [sp, #208]	; 0xd0
   1b5a8:	bl	11498 <memcmp@plt>
   1b5ac:	adds	r0, r0, #0
   1b5b0:	movne	r0, #1
   1b5b4:	b	1b1dc <__assert_fail@plt+0x99fc>
   1b5b8:	mov	r0, r6
   1b5bc:	bl	1163c <strlen@plt>
   1b5c0:	add	r3, sp, #248	; 0xf8
   1b5c4:	mov	r1, r6
   1b5c8:	mov	r2, r0
   1b5cc:	mov	r0, r4
   1b5d0:	bl	1a0b4 <__assert_fail@plt+0x88d4>
   1b5d4:	subs	r8, r0, #0
   1b5d8:	bne	1b4f0 <__assert_fail@plt+0x9d10>
   1b5dc:	mov	r3, r8
   1b5e0:	b	1b380 <__assert_fail@plt+0x9ba0>
   1b5e4:	strdeq	pc, [r1], -r0
   1b5e8:	andeq	pc, r1, r0, lsl pc	; <UNPREDICTABLE>
   1b5ec:	andeq	pc, r1, sl, lsl #21
   1b5f0:	muleq	r1, r8, sl
   1b5f4:	andeq	pc, r1, pc, lsr #21
   1b5f8:	andeq	pc, r1, r6, asr #21
   1b5fc:	push	{r4, r5, r6, lr}
   1b600:	subs	r4, r2, #0
   1b604:	mov	r6, r0
   1b608:	mov	r5, r1
   1b60c:	beq	1b624 <__assert_fail@plt+0x9e44>
   1b610:	mov	r1, r4
   1b614:	mvn	r0, #0
   1b618:	bl	1be1c <__assert_fail@plt+0xa63c>
   1b61c:	cmp	r0, r5
   1b620:	bcc	1b634 <__assert_fail@plt+0x9e54>
   1b624:	mul	r1, r5, r4
   1b628:	mov	r0, r6
   1b62c:	pop	{r4, r5, r6, lr}
   1b630:	b	19ce0 <__assert_fail@plt+0x8500>
   1b634:	bl	1166c <__errno_location@plt>
   1b638:	mov	r3, #12
   1b63c:	str	r3, [r0]
   1b640:	mov	r0, #0
   1b644:	pop	{r4, r5, r6, pc}
   1b648:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b64c:	sub	sp, sp, #4096	; 0x1000
   1b650:	sub	sp, sp, #28
   1b654:	add	r4, sp, #24
   1b658:	mov	r6, #0
   1b65c:	mov	r7, r2
   1b660:	mov	r5, r4
   1b664:	add	r8, sp, #20
   1b668:	mov	fp, r0
   1b66c:	mov	sl, r1
   1b670:	mov	r9, r3
   1b674:	str	r6, [sp]
   1b678:	mov	r3, r6
   1b67c:	mov	r2, r6
   1b680:	mov	r1, r6
   1b684:	mov	r0, r7
   1b688:	bl	113fc <iconv@plt>
   1b68c:	str	fp, [r4, #-16]
   1b690:	str	sl, [r5, #-12]!
   1b694:	ldr	r3, [r4, #-12]
   1b698:	cmp	r3, #0
   1b69c:	bne	1b6f8 <__assert_fail@plt+0x9f18>
   1b6a0:	mov	r3, #4096	; 0x1000
   1b6a4:	mov	r2, #0
   1b6a8:	str	r3, [r4, #-4]
   1b6ac:	str	r4, [r4, #-8]
   1b6b0:	add	r3, sp, #16
   1b6b4:	str	r8, [sp]
   1b6b8:	mov	r1, r2
   1b6bc:	mov	r0, r7
   1b6c0:	bl	113fc <iconv@plt>
   1b6c4:	cmn	r0, #1
   1b6c8:	beq	1b73c <__assert_fail@plt+0x9f5c>
   1b6cc:	ldr	r5, [r4, #-8]
   1b6d0:	sub	r5, r5, r4
   1b6d4:	adds	r5, r5, r6
   1b6d8:	bne	1b754 <__assert_fail@plt+0x9f74>
   1b6dc:	add	r3, sp, #4160	; 0x1040
   1b6e0:	mov	r0, r5
   1b6e4:	ldr	r3, [r3]
   1b6e8:	str	r5, [r3]
   1b6ec:	add	sp, sp, #4096	; 0x1000
   1b6f0:	add	sp, sp, #28
   1b6f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b6f8:	mov	r3, #4096	; 0x1000
   1b6fc:	str	r3, [r4, #-4]
   1b700:	str	r4, [r4, #-8]
   1b704:	add	r3, sp, #16
   1b708:	str	r8, [sp]
   1b70c:	mov	r2, r5
   1b710:	sub	r1, r4, #16
   1b714:	mov	r0, r7
   1b718:	bl	113fc <iconv@plt>
   1b71c:	cmn	r0, #1
   1b720:	bne	1b744 <__assert_fail@plt+0x9f64>
   1b724:	bl	1166c <__errno_location@plt>
   1b728:	ldr	r3, [r0]
   1b72c:	cmp	r3, #7
   1b730:	beq	1b744 <__assert_fail@plt+0x9f64>
   1b734:	cmp	r3, #22
   1b738:	beq	1b6a0 <__assert_fail@plt+0x9ec0>
   1b73c:	mvn	r0, #0
   1b740:	b	1b6ec <__assert_fail@plt+0x9f0c>
   1b744:	ldr	r3, [r4, #-8]
   1b748:	sub	r3, r3, r4
   1b74c:	add	r6, r6, r3
   1b750:	b	1b694 <__assert_fail@plt+0x9eb4>
   1b754:	ldr	r6, [r9]
   1b758:	cmp	r6, #0
   1b75c:	beq	1b774 <__assert_fail@plt+0x9f94>
   1b760:	add	r3, sp, #4160	; 0x1040
   1b764:	ldr	r3, [r3]
   1b768:	ldr	r3, [r3]
   1b76c:	cmp	r5, r3
   1b770:	bls	1b794 <__assert_fail@plt+0x9fb4>
   1b774:	mov	r0, r5
   1b778:	bl	19ca0 <__assert_fail@plt+0x84c0>
   1b77c:	subs	r6, r0, #0
   1b780:	bne	1b794 <__assert_fail@plt+0x9fb4>
   1b784:	bl	1166c <__errno_location@plt>
   1b788:	mov	r3, #12
   1b78c:	str	r3, [r0]
   1b790:	b	1b73c <__assert_fail@plt+0x9f5c>
   1b794:	mov	r3, #0
   1b798:	str	r3, [sp]
   1b79c:	mov	r2, r3
   1b7a0:	mov	r1, r3
   1b7a4:	mov	r0, r7
   1b7a8:	bl	113fc <iconv@plt>
   1b7ac:	str	sl, [r4, #-8]
   1b7b0:	mov	sl, r4
   1b7b4:	str	fp, [r4, #-12]
   1b7b8:	str	r6, [r4, #-4]
   1b7bc:	str	r5, [sl], #-12
   1b7c0:	ldr	r3, [r4, #-8]
   1b7c4:	cmp	r3, #0
   1b7c8:	beq	1b7fc <__assert_fail@plt+0xa01c>
   1b7cc:	str	r4, [sp]
   1b7d0:	mov	r3, r8
   1b7d4:	add	r2, sp, #16
   1b7d8:	mov	r1, sl
   1b7dc:	mov	r0, r7
   1b7e0:	bl	113fc <iconv@plt>
   1b7e4:	cmn	r0, #1
   1b7e8:	bne	1b7c0 <__assert_fail@plt+0x9fe0>
   1b7ec:	bl	1166c <__errno_location@plt>
   1b7f0:	ldr	r3, [r0]
   1b7f4:	cmp	r3, #22
   1b7f8:	bne	1b81c <__assert_fail@plt+0xa03c>
   1b7fc:	mov	r2, #0
   1b800:	str	r4, [sp]
   1b804:	mov	r3, r8
   1b808:	mov	r1, r2
   1b80c:	mov	r0, r7
   1b810:	bl	113fc <iconv@plt>
   1b814:	cmn	r0, #1
   1b818:	bne	1b834 <__assert_fail@plt+0xa054>
   1b81c:	ldr	r3, [r9]
   1b820:	cmp	r6, r3
   1b824:	beq	1b73c <__assert_fail@plt+0x9f5c>
   1b828:	mov	r0, r6
   1b82c:	bl	16840 <__assert_fail@plt+0x5060>
   1b830:	b	1b73c <__assert_fail@plt+0x9f5c>
   1b834:	ldr	r0, [r4]
   1b838:	cmp	r0, #0
   1b83c:	beq	1b844 <__assert_fail@plt+0xa064>
   1b840:	bl	117c8 <abort@plt>
   1b844:	add	r3, sp, #4160	; 0x1040
   1b848:	str	r6, [r9]
   1b84c:	ldr	r3, [r3]
   1b850:	str	r5, [r3]
   1b854:	b	1b6ec <__assert_fail@plt+0x9f0c>
   1b858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b85c:	sub	sp, sp, #28
   1b860:	mov	r8, r1
   1b864:	str	r0, [sp, #8]
   1b868:	bl	1163c <strlen@plt>
   1b86c:	cmp	r0, #4096	; 0x1000
   1b870:	mov	r6, r0
   1b874:	lslcc	r6, r0, #4
   1b878:	add	r5, r6, #1
   1b87c:	str	r0, [sp, #12]
   1b880:	mov	r0, r5
   1b884:	bl	19ca0 <__assert_fail@plt+0x84c0>
   1b888:	subs	r4, r0, #0
   1b88c:	bne	1b8a8 <__assert_fail@plt+0xa0c8>
   1b890:	bl	1166c <__errno_location@plt>
   1b894:	mov	r3, #12
   1b898:	str	r3, [r0]
   1b89c:	mov	r0, r4
   1b8a0:	add	sp, sp, #28
   1b8a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8a8:	mov	r3, #0
   1b8ac:	str	r3, [sp]
   1b8b0:	mov	r2, r3
   1b8b4:	mov	r1, r3
   1b8b8:	mov	r0, r8
   1b8bc:	bl	113fc <iconv@plt>
   1b8c0:	str	r4, [sp, #16]
   1b8c4:	str	r6, [sp, #20]
   1b8c8:	add	r9, sp, #20
   1b8cc:	str	r9, [sp]
   1b8d0:	add	r3, sp, #16
   1b8d4:	add	r2, sp, #12
   1b8d8:	add	r1, sp, #8
   1b8dc:	mov	r0, r8
   1b8e0:	bl	113fc <iconv@plt>
   1b8e4:	cmn	r0, #1
   1b8e8:	beq	1b944 <__assert_fail@plt+0xa164>
   1b8ec:	mov	sl, #0
   1b8f0:	str	r9, [sp]
   1b8f4:	add	r3, sp, #16
   1b8f8:	mov	r2, sl
   1b8fc:	mov	r1, #0
   1b900:	mov	r0, r8
   1b904:	bl	113fc <iconv@plt>
   1b908:	cmn	r0, #1
   1b90c:	bne	1b9f4 <__assert_fail@plt+0xa214>
   1b910:	bl	1166c <__errno_location@plt>
   1b914:	ldr	r3, [r0]
   1b918:	mov	fp, r0
   1b91c:	cmp	r3, #7
   1b920:	bne	1b97c <__assert_fail@plt+0xa19c>
   1b924:	ldr	r7, [sp, #16]
   1b928:	lsl	r6, r5, #1
   1b92c:	cmp	r5, r6
   1b930:	sub	r7, r7, r4
   1b934:	bcc	1b9c0 <__assert_fail@plt+0xa1e0>
   1b938:	mov	r3, #12
   1b93c:	str	r3, [fp]
   1b940:	b	1b97c <__assert_fail@plt+0xa19c>
   1b944:	bl	1166c <__errno_location@plt>
   1b948:	ldr	r3, [r0]
   1b94c:	mov	sl, r0
   1b950:	cmp	r3, #22
   1b954:	beq	1b8ec <__assert_fail@plt+0xa10c>
   1b958:	cmp	r3, #7
   1b95c:	bne	1b97c <__assert_fail@plt+0xa19c>
   1b960:	ldr	r7, [sp, #16]
   1b964:	lsl	r6, r5, #1
   1b968:	cmp	r5, r6
   1b96c:	sub	r7, r7, r4
   1b970:	bcc	1b98c <__assert_fail@plt+0xa1ac>
   1b974:	mov	r3, #12
   1b978:	str	r3, [sl]
   1b97c:	mov	r0, r4
   1b980:	bl	16840 <__assert_fail@plt+0x5060>
   1b984:	mov	r4, #0
   1b988:	b	1b89c <__assert_fail@plt+0xa0bc>
   1b98c:	mov	r1, r6
   1b990:	mov	r0, r4
   1b994:	bl	19ce0 <__assert_fail@plt+0x8500>
   1b998:	cmp	r0, #0
   1b99c:	beq	1b974 <__assert_fail@plt+0xa194>
   1b9a0:	add	r3, r0, r7
   1b9a4:	str	r3, [sp, #16]
   1b9a8:	sub	r3, r6, #1
   1b9ac:	sub	r7, r3, r7
   1b9b0:	str	r7, [sp, #20]
   1b9b4:	mov	r5, r6
   1b9b8:	mov	r4, r0
   1b9bc:	b	1b8c8 <__assert_fail@plt+0xa0e8>
   1b9c0:	mov	r1, r6
   1b9c4:	mov	r0, r4
   1b9c8:	bl	19ce0 <__assert_fail@plt+0x8500>
   1b9cc:	cmp	r0, #0
   1b9d0:	beq	1b938 <__assert_fail@plt+0xa158>
   1b9d4:	add	r3, r0, r7
   1b9d8:	str	r3, [sp, #16]
   1b9dc:	sub	r3, r6, #1
   1b9e0:	sub	r7, r3, r7
   1b9e4:	str	r7, [sp, #20]
   1b9e8:	mov	r5, r6
   1b9ec:	mov	r4, r0
   1b9f0:	b	1b8f0 <__assert_fail@plt+0xa110>
   1b9f4:	ldr	r3, [sp, #16]
   1b9f8:	add	r2, r3, #1
   1b9fc:	str	r2, [sp, #16]
   1ba00:	mov	r2, #0
   1ba04:	strb	r2, [r3]
   1ba08:	ldr	r1, [sp, #16]
   1ba0c:	sub	r1, r1, r4
   1ba10:	cmp	r5, r1
   1ba14:	bls	1b89c <__assert_fail@plt+0xa0bc>
   1ba18:	mov	r0, r4
   1ba1c:	bl	19ce0 <__assert_fail@plt+0x8500>
   1ba20:	cmp	r0, #0
   1ba24:	movne	r4, r0
   1ba28:	b	1b89c <__assert_fail@plt+0xa0bc>
   1ba2c:	push	{r4, r5, r6, r7, r8, lr}
   1ba30:	mov	r4, r0
   1ba34:	ldrb	r3, [r0]
   1ba38:	cmp	r3, #0
   1ba3c:	beq	1ba5c <__assert_fail@plt+0xa27c>
   1ba40:	mov	r6, r1
   1ba44:	mov	r0, r6
   1ba48:	mov	r1, r2
   1ba4c:	mov	r5, r2
   1ba50:	bl	19d3c <__assert_fail@plt+0x855c>
   1ba54:	cmp	r0, #0
   1ba58:	bne	1ba80 <__assert_fail@plt+0xa2a0>
   1ba5c:	mov	r0, r4
   1ba60:	bl	114d4 <strdup@plt>
   1ba64:	subs	r4, r0, #0
   1ba68:	bne	1ba78 <__assert_fail@plt+0xa298>
   1ba6c:	bl	1166c <__errno_location@plt>
   1ba70:	mov	r3, #12
   1ba74:	str	r3, [r0]
   1ba78:	mov	r0, r4
   1ba7c:	pop	{r4, r5, r6, r7, r8, pc}
   1ba80:	mov	r0, r5
   1ba84:	mov	r1, r6
   1ba88:	bl	115c4 <iconv_open@plt>
   1ba8c:	cmn	r0, #1
   1ba90:	mov	r5, r0
   1ba94:	beq	1bae0 <__assert_fail@plt+0xa300>
   1ba98:	mov	r1, r0
   1ba9c:	mov	r0, r4
   1baa0:	bl	1b858 <__assert_fail@plt+0xa078>
   1baa4:	subs	r4, r0, #0
   1baa8:	bne	1bac8 <__assert_fail@plt+0xa2e8>
   1baac:	bl	1166c <__errno_location@plt>
   1bab0:	ldr	r7, [r0]
   1bab4:	mov	r6, r0
   1bab8:	mov	r0, r5
   1babc:	bl	113f0 <iconv_close@plt>
   1bac0:	str	r7, [r6]
   1bac4:	b	1ba78 <__assert_fail@plt+0xa298>
   1bac8:	mov	r0, r5
   1bacc:	bl	113f0 <iconv_close@plt>
   1bad0:	cmp	r0, #0
   1bad4:	bge	1ba78 <__assert_fail@plt+0xa298>
   1bad8:	mov	r0, r4
   1badc:	bl	16840 <__assert_fail@plt+0x5060>
   1bae0:	mov	r4, #0
   1bae4:	b	1ba78 <__assert_fail@plt+0xa298>
   1bae8:	push	{lr}		; (str lr, [sp, #-4]!)
   1baec:	sub	sp, sp, #268	; 0x10c
   1baf0:	ldr	r2, [pc, #64]	; 1bb38 <__assert_fail@plt+0xa358>
   1baf4:	add	r1, sp, #4
   1baf8:	bl	1bd98 <__assert_fail@plt+0xa5b8>
   1bafc:	cmp	r0, #0
   1bb00:	movne	r0, #0
   1bb04:	bne	1bb30 <__assert_fail@plt+0xa350>
   1bb08:	ldr	r1, [pc, #44]	; 1bb3c <__assert_fail@plt+0xa35c>
   1bb0c:	add	r0, sp, #4
   1bb10:	bl	11408 <strcmp@plt>
   1bb14:	cmp	r0, #0
   1bb18:	beq	1bb30 <__assert_fail@plt+0xa350>
   1bb1c:	ldr	r1, [pc, #28]	; 1bb40 <__assert_fail@plt+0xa360>
   1bb20:	add	r0, sp, #4
   1bb24:	bl	11408 <strcmp@plt>
   1bb28:	adds	r0, r0, #0
   1bb2c:	movne	r0, #1
   1bb30:	add	sp, sp, #268	; 0x10c
   1bb34:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb38:	andeq	r0, r0, r1, lsl #2
   1bb3c:	andeq	pc, r1, r3, lsr #30
   1bb40:	andeq	pc, r1, r5, lsr #30
   1bb44:	cmn	r0, #-2147483631	; 0x80000011
   1bb48:	bls	1bb5c <__assert_fail@plt+0xa37c>
   1bb4c:	mov	r0, #0
   1bb50:	bx	lr
   1bb54:	mov	r0, #0
   1bb58:	pop	{r4, pc}
   1bb5c:	push	{r4, lr}
   1bb60:	add	r0, r0, #16
   1bb64:	bl	115b8 <malloc@plt>
   1bb68:	cmp	r0, #0
   1bb6c:	beq	1bb54 <__assert_fail@plt+0xa374>
   1bb70:	cmn	r0, #9
   1bb74:	addls	r2, r0, #8
   1bb78:	movhi	r2, #0
   1bb7c:	rsb	r3, r0, #8
   1bb80:	bic	r2, r2, #15
   1bb84:	add	r3, r3, r2
   1bb88:	add	r0, r0, r3
   1bb8c:	strb	r3, [r0, #-1]
   1bb90:	pop	{r4, pc}
   1bb94:	tst	r0, #7
   1bb98:	beq	1bba4 <__assert_fail@plt+0xa3c4>
   1bb9c:	push	{r4, lr}
   1bba0:	bl	117c8 <abort@plt>
   1bba4:	tst	r0, #8
   1bba8:	bxeq	lr
   1bbac:	ldrb	r3, [r0, #-1]
   1bbb0:	sub	r0, r0, r3
   1bbb4:	b	16840 <__assert_fail@plt+0x5060>
   1bbb8:	push	{r4, r5, r6, r7, r8, lr}
   1bbbc:	sub	sp, sp, #56	; 0x38
   1bbc0:	mov	r4, r0
   1bbc4:	bl	1157c <__ctype_get_mb_cur_max@plt>
   1bbc8:	cmp	r0, #1
   1bbcc:	bls	1bd50 <__assert_fail@plt+0xa570>
   1bbd0:	add	r3, sp, #56	; 0x38
   1bbd4:	mov	r0, #0
   1bbd8:	ldr	r8, [pc, #416]	; 1bd80 <__assert_fail@plt+0xa5a0>
   1bbdc:	strb	r0, [r3, #-56]!	; 0xffffffc8
   1bbe0:	str	r4, [sp, #16]
   1bbe4:	add	r5, r3, #4
   1bbe8:	mov	r4, r0
   1bbec:	add	r7, r3, #28
   1bbf0:	str	r0, [sp, #4]
   1bbf4:	str	r0, [r5, #4]
   1bbf8:	strb	r0, [sp, #12]
   1bbfc:	ldrb	r3, [sp]
   1bc00:	ldr	r6, [sp, #16]
   1bc04:	cmp	r3, #0
   1bc08:	bne	1bc8c <__assert_fail@plt+0xa4ac>
   1bc0c:	ldrb	r3, [r6]
   1bc10:	lsr	r2, r3, #5
   1bc14:	and	r3, r3, #31
   1bc18:	ldr	r2, [r8, r2, lsl #2]
   1bc1c:	lsr	r3, r2, r3
   1bc20:	tst	r3, #1
   1bc24:	beq	1bc60 <__assert_fail@plt+0xa480>
   1bc28:	mov	r3, #1
   1bc2c:	str	r3, [sp, #20]
   1bc30:	ldrb	r2, [r6]
   1bc34:	str	r2, [sp, #28]
   1bc38:	strb	r3, [sp, #24]
   1bc3c:	ldrb	r3, [sp, #24]
   1bc40:	cmp	r3, #0
   1bc44:	beq	1bd60 <__assert_fail@plt+0xa580>
   1bc48:	ldr	r3, [sp, #28]
   1bc4c:	cmp	r3, #0
   1bc50:	bne	1bd60 <__assert_fail@plt+0xa580>
   1bc54:	mov	r0, r4
   1bc58:	add	sp, sp, #56	; 0x38
   1bc5c:	pop	{r4, r5, r6, r7, r8, pc}
   1bc60:	mov	r0, r5
   1bc64:	bl	1148c <mbsinit@plt>
   1bc68:	cmp	r0, #0
   1bc6c:	bne	1bc84 <__assert_fail@plt+0xa4a4>
   1bc70:	ldr	r3, [pc, #268]	; 1bd84 <__assert_fail@plt+0xa5a4>
   1bc74:	ldr	r1, [pc, #268]	; 1bd88 <__assert_fail@plt+0xa5a8>
   1bc78:	ldr	r0, [pc, #268]	; 1bd8c <__assert_fail@plt+0xa5ac>
   1bc7c:	mov	r2, #143	; 0x8f
   1bc80:	bl	117e0 <__assert_fail@plt>
   1bc84:	mov	r3, #1
   1bc88:	strb	r3, [sp]
   1bc8c:	bl	1157c <__ctype_get_mb_cur_max@plt>
   1bc90:	mov	r1, r0
   1bc94:	mov	r0, r6
   1bc98:	bl	18d24 <__assert_fail@plt+0x7544>
   1bc9c:	mov	r3, r5
   1bca0:	mov	r1, r6
   1bca4:	mov	r2, r0
   1bca8:	mov	r0, r7
   1bcac:	bl	1a064 <__assert_fail@plt+0x8884>
   1bcb0:	cmn	r0, #1
   1bcb4:	str	r0, [sp, #20]
   1bcb8:	bne	1bccc <__assert_fail@plt+0xa4ec>
   1bcbc:	mov	r3, #1
   1bcc0:	str	r3, [sp, #20]
   1bcc4:	mov	r3, #0
   1bcc8:	b	1bc38 <__assert_fail@plt+0xa458>
   1bccc:	cmn	r0, #2
   1bcd0:	bne	1bce4 <__assert_fail@plt+0xa504>
   1bcd4:	ldr	r0, [sp, #16]
   1bcd8:	bl	1163c <strlen@plt>
   1bcdc:	str	r0, [sp, #20]
   1bce0:	b	1bcc4 <__assert_fail@plt+0xa4e4>
   1bce4:	cmp	r0, #0
   1bce8:	bne	1bd30 <__assert_fail@plt+0xa550>
   1bcec:	mov	r3, #1
   1bcf0:	str	r3, [sp, #20]
   1bcf4:	ldr	r3, [sp, #16]
   1bcf8:	ldrb	r3, [r3]
   1bcfc:	cmp	r3, #0
   1bd00:	ldrne	r3, [pc, #124]	; 1bd84 <__assert_fail@plt+0xa5a4>
   1bd04:	movne	r2, #171	; 0xab
   1bd08:	ldrne	r1, [pc, #120]	; 1bd88 <__assert_fail@plt+0xa5a8>
   1bd0c:	ldrne	r0, [pc, #124]	; 1bd90 <__assert_fail@plt+0xa5b0>
   1bd10:	bne	1bc80 <__assert_fail@plt+0xa4a0>
   1bd14:	ldr	r3, [sp, #28]
   1bd18:	cmp	r3, #0
   1bd1c:	ldrne	r3, [pc, #96]	; 1bd84 <__assert_fail@plt+0xa5a4>
   1bd20:	movne	r2, #172	; 0xac
   1bd24:	ldrne	r1, [pc, #92]	; 1bd88 <__assert_fail@plt+0xa5a8>
   1bd28:	ldrne	r0, [pc, #100]	; 1bd94 <__assert_fail@plt+0xa5b4>
   1bd2c:	bne	1bc80 <__assert_fail@plt+0xa4a0>
   1bd30:	mov	r3, #1
   1bd34:	mov	r0, r5
   1bd38:	strb	r3, [sp, #24]
   1bd3c:	bl	1148c <mbsinit@plt>
   1bd40:	cmp	r0, #0
   1bd44:	movne	r3, #0
   1bd48:	strbne	r3, [sp]
   1bd4c:	b	1bc3c <__assert_fail@plt+0xa45c>
   1bd50:	mov	r0, r4
   1bd54:	bl	1163c <strlen@plt>
   1bd58:	mov	r4, r0
   1bd5c:	b	1bc54 <__assert_fail@plt+0xa474>
   1bd60:	ldr	r3, [sp, #16]
   1bd64:	ldr	r2, [sp, #20]
   1bd68:	add	r4, r4, #1
   1bd6c:	add	r3, r3, r2
   1bd70:	str	r3, [sp, #16]
   1bd74:	mov	r3, #0
   1bd78:	strb	r3, [sp, #12]
   1bd7c:	b	1bbfc <__assert_fail@plt+0xa41c>
   1bd80:	strdeq	pc, [r1], -r0
   1bd84:	andeq	pc, r1, fp, lsr #30
   1bd88:	andeq	pc, r1, sl, lsl #21
   1bd8c:	muleq	r1, r8, sl
   1bd90:	andeq	pc, r1, pc, lsr #21
   1bd94:	andeq	pc, r1, r6, asr #21
   1bd98:	push	{r4, r5, r6, lr}
   1bd9c:	mov	r5, r1
   1bda0:	mov	r1, #0
   1bda4:	mov	r4, r2
   1bda8:	bl	11738 <setlocale@plt>
   1bdac:	subs	r6, r0, #0
   1bdb0:	bne	1bdc4 <__assert_fail@plt+0xa5e4>
   1bdb4:	cmp	r4, #0
   1bdb8:	strbne	r6, [r5]
   1bdbc:	mov	r0, #22
   1bdc0:	pop	{r4, r5, r6, pc}
   1bdc4:	bl	1163c <strlen@plt>
   1bdc8:	cmp	r4, r0
   1bdcc:	bls	1bde8 <__assert_fail@plt+0xa608>
   1bdd0:	add	r2, r0, #1
   1bdd4:	mov	r1, r6
   1bdd8:	mov	r0, r5
   1bddc:	bl	11474 <memcpy@plt>
   1bde0:	mov	r0, #0
   1bde4:	pop	{r4, r5, r6, pc}
   1bde8:	cmp	r4, #0
   1bdec:	beq	1be0c <__assert_fail@plt+0xa62c>
   1bdf0:	sub	r4, r4, #1
   1bdf4:	mov	r2, r4
   1bdf8:	mov	r1, r6
   1bdfc:	mov	r0, r5
   1be00:	bl	11474 <memcpy@plt>
   1be04:	mov	r3, #0
   1be08:	strb	r3, [r5, r4]
   1be0c:	mov	r0, #34	; 0x22
   1be10:	pop	{r4, r5, r6, pc}
   1be14:	mov	r1, #0
   1be18:	b	11738 <setlocale@plt>
   1be1c:	subs	r2, r1, #1
   1be20:	bxeq	lr
   1be24:	bcc	1bffc <__assert_fail@plt+0xa81c>
   1be28:	cmp	r0, r1
   1be2c:	bls	1bfe0 <__assert_fail@plt+0xa800>
   1be30:	tst	r1, r2
   1be34:	beq	1bfec <__assert_fail@plt+0xa80c>
   1be38:	clz	r3, r0
   1be3c:	clz	r2, r1
   1be40:	sub	r3, r2, r3
   1be44:	rsbs	r3, r3, #31
   1be48:	addne	r3, r3, r3, lsl #1
   1be4c:	mov	r2, #0
   1be50:	addne	pc, pc, r3, lsl #2
   1be54:	nop			; (mov r0, r0)
   1be58:	cmp	r0, r1, lsl #31
   1be5c:	adc	r2, r2, r2
   1be60:	subcs	r0, r0, r1, lsl #31
   1be64:	cmp	r0, r1, lsl #30
   1be68:	adc	r2, r2, r2
   1be6c:	subcs	r0, r0, r1, lsl #30
   1be70:	cmp	r0, r1, lsl #29
   1be74:	adc	r2, r2, r2
   1be78:	subcs	r0, r0, r1, lsl #29
   1be7c:	cmp	r0, r1, lsl #28
   1be80:	adc	r2, r2, r2
   1be84:	subcs	r0, r0, r1, lsl #28
   1be88:	cmp	r0, r1, lsl #27
   1be8c:	adc	r2, r2, r2
   1be90:	subcs	r0, r0, r1, lsl #27
   1be94:	cmp	r0, r1, lsl #26
   1be98:	adc	r2, r2, r2
   1be9c:	subcs	r0, r0, r1, lsl #26
   1bea0:	cmp	r0, r1, lsl #25
   1bea4:	adc	r2, r2, r2
   1bea8:	subcs	r0, r0, r1, lsl #25
   1beac:	cmp	r0, r1, lsl #24
   1beb0:	adc	r2, r2, r2
   1beb4:	subcs	r0, r0, r1, lsl #24
   1beb8:	cmp	r0, r1, lsl #23
   1bebc:	adc	r2, r2, r2
   1bec0:	subcs	r0, r0, r1, lsl #23
   1bec4:	cmp	r0, r1, lsl #22
   1bec8:	adc	r2, r2, r2
   1becc:	subcs	r0, r0, r1, lsl #22
   1bed0:	cmp	r0, r1, lsl #21
   1bed4:	adc	r2, r2, r2
   1bed8:	subcs	r0, r0, r1, lsl #21
   1bedc:	cmp	r0, r1, lsl #20
   1bee0:	adc	r2, r2, r2
   1bee4:	subcs	r0, r0, r1, lsl #20
   1bee8:	cmp	r0, r1, lsl #19
   1beec:	adc	r2, r2, r2
   1bef0:	subcs	r0, r0, r1, lsl #19
   1bef4:	cmp	r0, r1, lsl #18
   1bef8:	adc	r2, r2, r2
   1befc:	subcs	r0, r0, r1, lsl #18
   1bf00:	cmp	r0, r1, lsl #17
   1bf04:	adc	r2, r2, r2
   1bf08:	subcs	r0, r0, r1, lsl #17
   1bf0c:	cmp	r0, r1, lsl #16
   1bf10:	adc	r2, r2, r2
   1bf14:	subcs	r0, r0, r1, lsl #16
   1bf18:	cmp	r0, r1, lsl #15
   1bf1c:	adc	r2, r2, r2
   1bf20:	subcs	r0, r0, r1, lsl #15
   1bf24:	cmp	r0, r1, lsl #14
   1bf28:	adc	r2, r2, r2
   1bf2c:	subcs	r0, r0, r1, lsl #14
   1bf30:	cmp	r0, r1, lsl #13
   1bf34:	adc	r2, r2, r2
   1bf38:	subcs	r0, r0, r1, lsl #13
   1bf3c:	cmp	r0, r1, lsl #12
   1bf40:	adc	r2, r2, r2
   1bf44:	subcs	r0, r0, r1, lsl #12
   1bf48:	cmp	r0, r1, lsl #11
   1bf4c:	adc	r2, r2, r2
   1bf50:	subcs	r0, r0, r1, lsl #11
   1bf54:	cmp	r0, r1, lsl #10
   1bf58:	adc	r2, r2, r2
   1bf5c:	subcs	r0, r0, r1, lsl #10
   1bf60:	cmp	r0, r1, lsl #9
   1bf64:	adc	r2, r2, r2
   1bf68:	subcs	r0, r0, r1, lsl #9
   1bf6c:	cmp	r0, r1, lsl #8
   1bf70:	adc	r2, r2, r2
   1bf74:	subcs	r0, r0, r1, lsl #8
   1bf78:	cmp	r0, r1, lsl #7
   1bf7c:	adc	r2, r2, r2
   1bf80:	subcs	r0, r0, r1, lsl #7
   1bf84:	cmp	r0, r1, lsl #6
   1bf88:	adc	r2, r2, r2
   1bf8c:	subcs	r0, r0, r1, lsl #6
   1bf90:	cmp	r0, r1, lsl #5
   1bf94:	adc	r2, r2, r2
   1bf98:	subcs	r0, r0, r1, lsl #5
   1bf9c:	cmp	r0, r1, lsl #4
   1bfa0:	adc	r2, r2, r2
   1bfa4:	subcs	r0, r0, r1, lsl #4
   1bfa8:	cmp	r0, r1, lsl #3
   1bfac:	adc	r2, r2, r2
   1bfb0:	subcs	r0, r0, r1, lsl #3
   1bfb4:	cmp	r0, r1, lsl #2
   1bfb8:	adc	r2, r2, r2
   1bfbc:	subcs	r0, r0, r1, lsl #2
   1bfc0:	cmp	r0, r1, lsl #1
   1bfc4:	adc	r2, r2, r2
   1bfc8:	subcs	r0, r0, r1, lsl #1
   1bfcc:	cmp	r0, r1
   1bfd0:	adc	r2, r2, r2
   1bfd4:	subcs	r0, r0, r1
   1bfd8:	mov	r0, r2
   1bfdc:	bx	lr
   1bfe0:	moveq	r0, #1
   1bfe4:	movne	r0, #0
   1bfe8:	bx	lr
   1bfec:	clz	r2, r1
   1bff0:	rsb	r2, r2, #31
   1bff4:	lsr	r0, r0, r2
   1bff8:	bx	lr
   1bffc:	cmp	r0, #0
   1c000:	mvnne	r0, #0
   1c004:	b	1c2dc <__assert_fail@plt+0xaafc>
   1c008:	cmp	r1, #0
   1c00c:	beq	1bffc <__assert_fail@plt+0xa81c>
   1c010:	push	{r0, r1, lr}
   1c014:	bl	1be1c <__assert_fail@plt+0xa63c>
   1c018:	pop	{r1, r2, lr}
   1c01c:	mul	r3, r2, r0
   1c020:	sub	r1, r1, r3
   1c024:	bx	lr
   1c028:	cmp	r1, #0
   1c02c:	beq	1c238 <__assert_fail@plt+0xaa58>
   1c030:	eor	ip, r0, r1
   1c034:	rsbmi	r1, r1, #0
   1c038:	subs	r2, r1, #1
   1c03c:	beq	1c204 <__assert_fail@plt+0xaa24>
   1c040:	movs	r3, r0
   1c044:	rsbmi	r3, r0, #0
   1c048:	cmp	r3, r1
   1c04c:	bls	1c210 <__assert_fail@plt+0xaa30>
   1c050:	tst	r1, r2
   1c054:	beq	1c220 <__assert_fail@plt+0xaa40>
   1c058:	clz	r2, r3
   1c05c:	clz	r0, r1
   1c060:	sub	r2, r0, r2
   1c064:	rsbs	r2, r2, #31
   1c068:	addne	r2, r2, r2, lsl #1
   1c06c:	mov	r0, #0
   1c070:	addne	pc, pc, r2, lsl #2
   1c074:	nop			; (mov r0, r0)
   1c078:	cmp	r3, r1, lsl #31
   1c07c:	adc	r0, r0, r0
   1c080:	subcs	r3, r3, r1, lsl #31
   1c084:	cmp	r3, r1, lsl #30
   1c088:	adc	r0, r0, r0
   1c08c:	subcs	r3, r3, r1, lsl #30
   1c090:	cmp	r3, r1, lsl #29
   1c094:	adc	r0, r0, r0
   1c098:	subcs	r3, r3, r1, lsl #29
   1c09c:	cmp	r3, r1, lsl #28
   1c0a0:	adc	r0, r0, r0
   1c0a4:	subcs	r3, r3, r1, lsl #28
   1c0a8:	cmp	r3, r1, lsl #27
   1c0ac:	adc	r0, r0, r0
   1c0b0:	subcs	r3, r3, r1, lsl #27
   1c0b4:	cmp	r3, r1, lsl #26
   1c0b8:	adc	r0, r0, r0
   1c0bc:	subcs	r3, r3, r1, lsl #26
   1c0c0:	cmp	r3, r1, lsl #25
   1c0c4:	adc	r0, r0, r0
   1c0c8:	subcs	r3, r3, r1, lsl #25
   1c0cc:	cmp	r3, r1, lsl #24
   1c0d0:	adc	r0, r0, r0
   1c0d4:	subcs	r3, r3, r1, lsl #24
   1c0d8:	cmp	r3, r1, lsl #23
   1c0dc:	adc	r0, r0, r0
   1c0e0:	subcs	r3, r3, r1, lsl #23
   1c0e4:	cmp	r3, r1, lsl #22
   1c0e8:	adc	r0, r0, r0
   1c0ec:	subcs	r3, r3, r1, lsl #22
   1c0f0:	cmp	r3, r1, lsl #21
   1c0f4:	adc	r0, r0, r0
   1c0f8:	subcs	r3, r3, r1, lsl #21
   1c0fc:	cmp	r3, r1, lsl #20
   1c100:	adc	r0, r0, r0
   1c104:	subcs	r3, r3, r1, lsl #20
   1c108:	cmp	r3, r1, lsl #19
   1c10c:	adc	r0, r0, r0
   1c110:	subcs	r3, r3, r1, lsl #19
   1c114:	cmp	r3, r1, lsl #18
   1c118:	adc	r0, r0, r0
   1c11c:	subcs	r3, r3, r1, lsl #18
   1c120:	cmp	r3, r1, lsl #17
   1c124:	adc	r0, r0, r0
   1c128:	subcs	r3, r3, r1, lsl #17
   1c12c:	cmp	r3, r1, lsl #16
   1c130:	adc	r0, r0, r0
   1c134:	subcs	r3, r3, r1, lsl #16
   1c138:	cmp	r3, r1, lsl #15
   1c13c:	adc	r0, r0, r0
   1c140:	subcs	r3, r3, r1, lsl #15
   1c144:	cmp	r3, r1, lsl #14
   1c148:	adc	r0, r0, r0
   1c14c:	subcs	r3, r3, r1, lsl #14
   1c150:	cmp	r3, r1, lsl #13
   1c154:	adc	r0, r0, r0
   1c158:	subcs	r3, r3, r1, lsl #13
   1c15c:	cmp	r3, r1, lsl #12
   1c160:	adc	r0, r0, r0
   1c164:	subcs	r3, r3, r1, lsl #12
   1c168:	cmp	r3, r1, lsl #11
   1c16c:	adc	r0, r0, r0
   1c170:	subcs	r3, r3, r1, lsl #11
   1c174:	cmp	r3, r1, lsl #10
   1c178:	adc	r0, r0, r0
   1c17c:	subcs	r3, r3, r1, lsl #10
   1c180:	cmp	r3, r1, lsl #9
   1c184:	adc	r0, r0, r0
   1c188:	subcs	r3, r3, r1, lsl #9
   1c18c:	cmp	r3, r1, lsl #8
   1c190:	adc	r0, r0, r0
   1c194:	subcs	r3, r3, r1, lsl #8
   1c198:	cmp	r3, r1, lsl #7
   1c19c:	adc	r0, r0, r0
   1c1a0:	subcs	r3, r3, r1, lsl #7
   1c1a4:	cmp	r3, r1, lsl #6
   1c1a8:	adc	r0, r0, r0
   1c1ac:	subcs	r3, r3, r1, lsl #6
   1c1b0:	cmp	r3, r1, lsl #5
   1c1b4:	adc	r0, r0, r0
   1c1b8:	subcs	r3, r3, r1, lsl #5
   1c1bc:	cmp	r3, r1, lsl #4
   1c1c0:	adc	r0, r0, r0
   1c1c4:	subcs	r3, r3, r1, lsl #4
   1c1c8:	cmp	r3, r1, lsl #3
   1c1cc:	adc	r0, r0, r0
   1c1d0:	subcs	r3, r3, r1, lsl #3
   1c1d4:	cmp	r3, r1, lsl #2
   1c1d8:	adc	r0, r0, r0
   1c1dc:	subcs	r3, r3, r1, lsl #2
   1c1e0:	cmp	r3, r1, lsl #1
   1c1e4:	adc	r0, r0, r0
   1c1e8:	subcs	r3, r3, r1, lsl #1
   1c1ec:	cmp	r3, r1
   1c1f0:	adc	r0, r0, r0
   1c1f4:	subcs	r3, r3, r1
   1c1f8:	cmp	ip, #0
   1c1fc:	rsbmi	r0, r0, #0
   1c200:	bx	lr
   1c204:	teq	ip, r0
   1c208:	rsbmi	r0, r0, #0
   1c20c:	bx	lr
   1c210:	movcc	r0, #0
   1c214:	asreq	r0, ip, #31
   1c218:	orreq	r0, r0, #1
   1c21c:	bx	lr
   1c220:	clz	r2, r1
   1c224:	rsb	r2, r2, #31
   1c228:	cmp	ip, #0
   1c22c:	lsr	r0, r3, r2
   1c230:	rsbmi	r0, r0, #0
   1c234:	bx	lr
   1c238:	cmp	r0, #0
   1c23c:	mvngt	r0, #-2147483648	; 0x80000000
   1c240:	movlt	r0, #-2147483648	; 0x80000000
   1c244:	b	1c2dc <__assert_fail@plt+0xaafc>
   1c248:	cmp	r1, #0
   1c24c:	beq	1c238 <__assert_fail@plt+0xaa58>
   1c250:	push	{r0, r1, lr}
   1c254:	bl	1c030 <__assert_fail@plt+0xa850>
   1c258:	pop	{r1, r2, lr}
   1c25c:	mul	r3, r2, r0
   1c260:	sub	r1, r1, r3
   1c264:	bx	lr
   1c268:	subs	r3, r2, #32
   1c26c:	rsb	ip, r2, #32
   1c270:	lsrmi	r0, r0, r2
   1c274:	lsrpl	r0, r1, r3
   1c278:	orrmi	r0, r0, r1, lsl ip
   1c27c:	lsr	r1, r1, r2
   1c280:	bx	lr
   1c284:	subs	r3, r2, #32
   1c288:	rsb	ip, r2, #32
   1c28c:	lslmi	r1, r1, r2
   1c290:	lslpl	r1, r0, r3
   1c294:	orrmi	r1, r1, r0, lsr ip
   1c298:	lsl	r0, r0, r2
   1c29c:	bx	lr
   1c2a0:	cmp	r3, #0
   1c2a4:	cmpeq	r2, #0
   1c2a8:	bne	1c2c0 <__assert_fail@plt+0xaae0>
   1c2ac:	cmp	r1, #0
   1c2b0:	cmpeq	r0, #0
   1c2b4:	mvnne	r1, #0
   1c2b8:	mvnne	r0, #0
   1c2bc:	b	1c2dc <__assert_fail@plt+0xaafc>
   1c2c0:	sub	sp, sp, #8
   1c2c4:	push	{sp, lr}
   1c2c8:	bl	1c2ec <__assert_fail@plt+0xab0c>
   1c2cc:	ldr	lr, [sp, #4]
   1c2d0:	add	sp, sp, #8
   1c2d4:	pop	{r2, r3}
   1c2d8:	bx	lr
   1c2dc:	push	{r1, lr}
   1c2e0:	mov	r0, #8
   1c2e4:	bl	113d8 <raise@plt>
   1c2e8:	pop	{r1, pc}
   1c2ec:	cmp	r1, r3
   1c2f0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c2f4:	cmpeq	r0, r2
   1c2f8:	mov	r4, r0
   1c2fc:	mov	r5, r1
   1c300:	ldr	r9, [sp, #28]
   1c304:	movcc	r0, #0
   1c308:	movcc	r1, #0
   1c30c:	bcc	1c404 <__assert_fail@plt+0xac24>
   1c310:	cmp	r3, #0
   1c314:	clzeq	ip, r2
   1c318:	clzne	ip, r3
   1c31c:	addeq	ip, ip, #32
   1c320:	cmp	r5, #0
   1c324:	clzeq	r1, r4
   1c328:	addeq	r1, r1, #32
   1c32c:	clzne	r1, r5
   1c330:	sub	ip, ip, r1
   1c334:	sub	lr, ip, #32
   1c338:	lsl	r7, r3, ip
   1c33c:	rsb	r8, ip, #32
   1c340:	orr	r7, r7, r2, lsl lr
   1c344:	orr	r7, r7, r2, lsr r8
   1c348:	lsl	r6, r2, ip
   1c34c:	cmp	r5, r7
   1c350:	cmpeq	r4, r6
   1c354:	movcc	r0, #0
   1c358:	movcc	r1, #0
   1c35c:	bcc	1c378 <__assert_fail@plt+0xab98>
   1c360:	mov	r3, #1
   1c364:	subs	r4, r4, r6
   1c368:	lsl	r1, r3, lr
   1c36c:	lsl	r0, r3, ip
   1c370:	orr	r1, r1, r3, lsr r8
   1c374:	sbc	r5, r5, r7
   1c378:	cmp	ip, #0
   1c37c:	beq	1c404 <__assert_fail@plt+0xac24>
   1c380:	lsrs	r3, r7, #1
   1c384:	rrx	r2, r6
   1c388:	mov	r6, ip
   1c38c:	b	1c3b0 <__assert_fail@plt+0xabd0>
   1c390:	subs	r4, r4, r2
   1c394:	sbc	r5, r5, r3
   1c398:	adds	r4, r4, r4
   1c39c:	adc	r5, r5, r5
   1c3a0:	adds	r4, r4, #1
   1c3a4:	adc	r5, r5, #0
   1c3a8:	subs	r6, r6, #1
   1c3ac:	beq	1c3cc <__assert_fail@plt+0xabec>
   1c3b0:	cmp	r5, r3
   1c3b4:	cmpeq	r4, r2
   1c3b8:	bcs	1c390 <__assert_fail@plt+0xabb0>
   1c3bc:	adds	r4, r4, r4
   1c3c0:	adc	r5, r5, r5
   1c3c4:	subs	r6, r6, #1
   1c3c8:	bne	1c3b0 <__assert_fail@plt+0xabd0>
   1c3cc:	lsr	r6, r4, ip
   1c3d0:	lsr	r7, r5, ip
   1c3d4:	orr	r6, r6, r5, lsl r8
   1c3d8:	adds	r2, r0, r4
   1c3dc:	orr	r6, r6, r5, lsr lr
   1c3e0:	adc	r3, r1, r5
   1c3e4:	lsl	r1, r7, ip
   1c3e8:	orr	r1, r1, r6, lsl lr
   1c3ec:	lsl	r0, r6, ip
   1c3f0:	orr	r1, r1, r6, lsr r8
   1c3f4:	subs	r0, r2, r0
   1c3f8:	mov	r4, r6
   1c3fc:	mov	r5, r7
   1c400:	sbc	r1, r3, r1
   1c404:	cmp	r9, #0
   1c408:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1c40c:	strd	r4, [r9]
   1c410:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c414:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c418:	mov	r7, r0
   1c41c:	ldr	r6, [pc, #72]	; 1c46c <__assert_fail@plt+0xac8c>
   1c420:	ldr	r5, [pc, #72]	; 1c470 <__assert_fail@plt+0xac90>
   1c424:	add	r6, pc, r6
   1c428:	add	r5, pc, r5
   1c42c:	sub	r6, r6, r5
   1c430:	mov	r8, r1
   1c434:	mov	r9, r2
   1c438:	bl	113a0 <calloc@plt-0x20>
   1c43c:	asrs	r6, r6, #2
   1c440:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c444:	mov	r4, #0
   1c448:	add	r4, r4, #1
   1c44c:	ldr	r3, [r5], #4
   1c450:	mov	r2, r9
   1c454:	mov	r1, r8
   1c458:	mov	r0, r7
   1c45c:	blx	r3
   1c460:	cmp	r6, r4
   1c464:	bne	1c448 <__assert_fail@plt+0xac68>
   1c468:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c46c:	ldrdeq	r4, [r1], -ip
   1c470:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1c474:	bx	lr
   1c478:	ldr	r3, [pc, #12]	; 1c48c <__assert_fail@plt+0xacac>
   1c47c:	mov	r1, #0
   1c480:	add	r3, pc, r3
   1c484:	ldr	r2, [r3]
   1c488:	b	11690 <__cxa_atexit@plt>
   1c48c:	strdeq	r4, [r1], -r0

Disassembly of section .fini:

0001c490 <.fini>:
   1c490:	push	{r3, lr}
   1c494:	pop	{r3, pc}
