
../repos/coreutils/src/libstdbuf.so:     file format elf32-littlearm


Disassembly of section .init:

0000048c <.init>:
 48c:	push	{r3, lr}
 490:	bl	524 <strtoumax@plt+0xc>
 494:	pop	{r3, pc}

Disassembly of section .plt:

00000498 <__cxa_finalize@plt-0x14>:
 498:	push	{lr}		; (str lr, [sp, #-4]!)
 49c:	ldr	lr, [pc, #4]	; 4a8 <__cxa_finalize@plt-0x4>
 4a0:	add	lr, pc, lr
 4a4:	ldr	pc, [lr, #8]!
 4a8:	andeq	r0, r1, r8, asr fp

000004ac <__cxa_finalize@plt>:
 4ac:	add	ip, pc, #0, 12
 4b0:	add	ip, ip, #16, 20	; 0x10000
 4b4:	ldr	pc, [ip, #2904]!	; 0xb58

000004b8 <free@plt>:
 4b8:	add	ip, pc, #0, 12
 4bc:	add	ip, ip, #16, 20	; 0x10000
 4c0:	ldr	pc, [ip, #2896]!	; 0xb50

000004c4 <dcgettext@plt>:
 4c4:	add	ip, pc, #0, 12
 4c8:	add	ip, ip, #16, 20	; 0x10000
 4cc:	ldr	pc, [ip, #2888]!	; 0xb48

000004d0 <getenv@plt>:
 4d0:	add	ip, pc, #0, 12
 4d4:	add	ip, ip, #16, 20	; 0x10000
 4d8:	ldr	pc, [ip, #2880]!	; 0xb40

000004dc <malloc@plt>:
 4dc:	add	ip, pc, #0, 12
 4e0:	add	ip, ip, #16, 20	; 0x10000
 4e4:	ldr	pc, [ip, #2872]!	; 0xb38

000004e8 <__gmon_start__@plt>:
 4e8:	add	ip, pc, #0, 12
 4ec:	add	ip, ip, #16, 20	; 0x10000
 4f0:	ldr	pc, [ip, #2864]!	; 0xb30

000004f4 <fprintf@plt>:
 4f4:	add	ip, pc, #0, 12
 4f8:	add	ip, ip, #16, 20	; 0x10000
 4fc:	ldr	pc, [ip, #2856]!	; 0xb28

00000500 <setvbuf@plt>:
 500:	add	ip, pc, #0, 12
 504:	add	ip, ip, #16, 20	; 0x10000
 508:	ldr	pc, [ip, #2848]!	; 0xb20

0000050c <fileno@plt>:
 50c:	add	ip, pc, #0, 12
 510:	add	ip, ip, #16, 20	; 0x10000
 514:	ldr	pc, [ip, #2840]!	; 0xb18

00000518 <strtoumax@plt>:
 518:	add	ip, pc, #0, 12
 51c:	add	ip, ip, #16, 20	; 0x10000
 520:	ldr	pc, [ip, #2832]!	; 0xb10

Disassembly of section .text:

00000524 <.text>:
 524:	ldr	r3, [pc, #20]	; 540 <strtoumax@plt+0x28>
 528:	ldr	r2, [pc, #20]	; 544 <strtoumax@plt+0x2c>
 52c:	add	r3, pc, r3
 530:	ldr	r2, [r3, r2]
 534:	cmp	r2, #0
 538:	bxeq	lr
 53c:	b	4e8 <__gmon_start__@plt>
 540:	andeq	r0, r1, ip, asr #21
 544:	andeq	r0, r0, r0, asr #32
 548:	ldr	r0, [pc, #44]	; 57c <strtoumax@plt+0x64>
 54c:	ldr	r3, [pc, #44]	; 580 <strtoumax@plt+0x68>
 550:	add	r0, pc, r0
 554:	add	r3, pc, r3
 558:	cmp	r3, r0
 55c:	ldr	r3, [pc, #32]	; 584 <strtoumax@plt+0x6c>
 560:	add	r3, pc, r3
 564:	bxeq	lr
 568:	ldr	r2, [pc, #24]	; 588 <strtoumax@plt+0x70>
 56c:	ldr	r3, [r3, r2]
 570:	cmp	r3, #0
 574:	bxeq	lr
 578:	bx	r3
 57c:	strdeq	r0, [r1], -ip
 580:	strdeq	r0, [r1], -r8
 584:	muleq	r1, r8, sl
 588:	andeq	r0, r0, r8, lsr r0
 58c:	ldr	r0, [pc, #56]	; 5cc <strtoumax@plt+0xb4>
 590:	ldr	r3, [pc, #56]	; 5d0 <strtoumax@plt+0xb8>
 594:	add	r0, pc, r0
 598:	add	r3, pc, r3
 59c:	sub	r1, r3, r0
 5a0:	ldr	r3, [pc, #44]	; 5d4 <strtoumax@plt+0xbc>
 5a4:	asr	r1, r1, #2
 5a8:	add	r3, pc, r3
 5ac:	add	r1, r1, r1, lsr #31
 5b0:	asrs	r1, r1, #1
 5b4:	bxeq	lr
 5b8:	ldr	r2, [pc, #24]	; 5d8 <strtoumax@plt+0xc0>
 5bc:	ldr	r3, [r3, r2]
 5c0:	cmp	r3, #0
 5c4:	bxeq	lr
 5c8:	bx	r3
 5cc:			; <UNDEFINED> instruction: 0x00010ab8
 5d0:			; <UNDEFINED> instruction: 0x00010ab4
 5d4:	andeq	r0, r1, r0, asr sl
 5d8:	andeq	r0, r0, ip, asr #32
 5dc:	ldr	r3, [pc, #76]	; 630 <strtoumax@plt+0x118>
 5e0:	ldr	r2, [pc, #76]	; 634 <strtoumax@plt+0x11c>
 5e4:	add	r3, pc, r3
 5e8:	add	r2, pc, r2
 5ec:	ldrb	r3, [r3]
 5f0:	cmp	r3, #0
 5f4:	bxne	lr
 5f8:	ldr	r3, [pc, #56]	; 638 <strtoumax@plt+0x120>
 5fc:	push	{r4, lr}
 600:	ldr	r3, [r2, r3]
 604:	cmp	r3, #0
 608:	beq	618 <strtoumax@plt+0x100>
 60c:	ldr	r3, [pc, #40]	; 63c <strtoumax@plt+0x124>
 610:	ldr	r0, [pc, r3]
 614:	bl	4ac <__cxa_finalize@plt>
 618:	bl	548 <strtoumax@plt+0x30>
 61c:	ldr	r3, [pc, #28]	; 640 <strtoumax@plt+0x128>
 620:	mov	r2, #1
 624:	add	r3, pc, r3
 628:	strb	r2, [r3]
 62c:	pop	{r4, pc}
 630:	andeq	r0, r1, r8, ror #20
 634:	andeq	r0, r1, r0, lsl sl
 638:	andeq	r0, r0, r4, lsr r0
 63c:	andeq	r0, r1, r8, lsr sl
 640:	andeq	r0, r1, r8, lsr #20
 644:	b	58c <strtoumax@plt+0x74>
 648:	push	{r4, r5, r6, sl, fp, lr}
 64c:	add	fp, sp, #16
 650:	ldr	r0, [pc, #128]	; 6d8 <strtoumax@plt+0x1c0>
 654:	add	r0, pc, r0
 658:	bl	4d0 <getenv@plt>
 65c:	mov	r6, r0
 660:	ldr	r0, [pc, #116]	; 6dc <strtoumax@plt+0x1c4>
 664:	add	r0, pc, r0
 668:	bl	4d0 <getenv@plt>
 66c:	mov	r5, r0
 670:	ldr	r0, [pc, #104]	; 6e0 <strtoumax@plt+0x1c8>
 674:	add	r0, pc, r0
 678:	bl	4d0 <getenv@plt>
 67c:	mov	r4, r0
 680:	cmp	r6, #0
 684:	beq	69c <strtoumax@plt+0x184>
 688:	ldr	r0, [pc, #84]	; 6e4 <strtoumax@plt+0x1cc>
 68c:	mov	r1, r6
 690:	ldr	r0, [pc, r0]
 694:	ldr	r0, [r0]
 698:	bl	6f0 <strtoumax@plt+0x1d8>
 69c:	cmp	r5, #0
 6a0:	beq	6b8 <strtoumax@plt+0x1a0>
 6a4:	ldr	r0, [pc, #60]	; 6e8 <strtoumax@plt+0x1d0>
 6a8:	mov	r1, r5
 6ac:	ldr	r0, [pc, r0]
 6b0:	ldr	r0, [r0]
 6b4:	bl	6f0 <strtoumax@plt+0x1d8>
 6b8:	cmp	r4, #0
 6bc:	popeq	{r4, r5, r6, sl, fp, pc}
 6c0:	ldr	r0, [pc, #36]	; 6ec <strtoumax@plt+0x1d4>
 6c4:	mov	r1, r4
 6c8:	ldr	r0, [pc, r0]
 6cc:	ldr	r0, [r0]
 6d0:	pop	{r4, r5, r6, sl, fp, lr}
 6d4:	b	6f0 <strtoumax@plt+0x1d8>
 6d8:	andeq	r0, r0, r4, ror r2
 6dc:	andeq	r0, r0, lr, ror #4
 6e0:	andeq	r0, r0, r8, ror #4
 6e4:	andeq	r0, r1, r4, lsr #19
 6e8:	muleq	r1, r0, r9
 6ec:	andeq	r0, r1, r8, ror r9
 6f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 6f4:	add	fp, sp, #24
 6f8:	sub	sp, sp, #8
 6fc:	mov	r5, r0
 700:	ldrb	r0, [r1]
 704:	mov	r8, r1
 708:	cmp	r0, #48	; 0x30
 70c:	beq	724 <strtoumax@plt+0x20c>
 710:	cmp	r0, #76	; 0x4c
 714:	bne	734 <strtoumax@plt+0x21c>
 718:	mov	r6, #0
 71c:	mov	r2, #1
 720:	b	72c <strtoumax@plt+0x214>
 724:	mov	r6, #0
 728:	mov	r2, #2
 72c:	mov	r7, #0
 730:	b	784 <strtoumax@plt+0x26c>
 734:	add	r1, sp, #4
 738:	mov	r0, r8
 73c:	mov	r2, #10
 740:	bl	518 <strtoumax@plt>
 744:	mov	r7, r0
 748:	orrs	r0, r0, r1
 74c:	beq	7e8 <strtoumax@plt+0x2d0>
 750:	ldr	r0, [sp, #4]
 754:	ldrb	r0, [r0]
 758:	cmp	r0, #0
 75c:	bne	7e8 <strtoumax@plt+0x2d0>
 760:	mov	r4, r1
 764:	cmp	r1, #0
 768:	bne	82c <strtoumax@plt+0x314>
 76c:	mov	r0, r7
 770:	bl	4dc <malloc@plt>
 774:	cmp	r0, #0
 778:	beq	82c <strtoumax@plt+0x314>
 77c:	mov	r6, r0
 780:	mov	r2, #0
 784:	mov	r0, r5
 788:	mov	r1, r6
 78c:	mov	r3, r7
 790:	bl	500 <setvbuf@plt>
 794:	cmp	r0, #0
 798:	bne	7a4 <strtoumax@plt+0x28c>
 79c:	sub	sp, fp, #24
 7a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 7a4:	ldr	r0, [pc, #268]	; 8b8 <strtoumax@plt+0x3a0>
 7a8:	mov	r2, #5
 7ac:	ldr	r0, [pc, r0]
 7b0:	ldr	r4, [r0]
 7b4:	ldr	r1, [pc, #256]	; 8bc <strtoumax@plt+0x3a4>
 7b8:	mov	r0, #0
 7bc:	add	r1, pc, r1
 7c0:	bl	4c4 <dcgettext@plt>
 7c4:	mov	r7, r0
 7c8:	mov	r0, r5
 7cc:	bl	50c <fileno@plt>
 7d0:	cmp	r0, #2
 7d4:	bhi	860 <strtoumax@plt+0x348>
 7d8:	ldr	r1, [pc, #228]	; 8c4 <strtoumax@plt+0x3ac>
 7dc:	add	r1, pc, r1
 7e0:	ldr	r2, [r1, r0, lsl #2]
 7e4:	b	868 <strtoumax@plt+0x350>
 7e8:	ldr	r0, [pc, #176]	; 8a0 <strtoumax@plt+0x388>
 7ec:	mov	r2, #5
 7f0:	ldr	r0, [pc, r0]
 7f4:	ldr	r4, [r0]
 7f8:	ldr	r1, [pc, #164]	; 8a4 <strtoumax@plt+0x38c>
 7fc:	mov	r0, #0
 800:	add	r1, pc, r1
 804:	bl	4c4 <dcgettext@plt>
 808:	mov	r6, r0
 80c:	mov	r0, r5
 810:	bl	50c <fileno@plt>
 814:	cmp	r0, #2
 818:	bhi	884 <strtoumax@plt+0x36c>
 81c:	ldr	r1, [pc, #136]	; 8ac <strtoumax@plt+0x394>
 820:	add	r1, pc, r1
 824:	ldr	r3, [r1, r0, lsl #2]
 828:	b	88c <strtoumax@plt+0x374>
 82c:	ldr	r0, [pc, #124]	; 8b0 <strtoumax@plt+0x398>
 830:	mov	r2, #5
 834:	ldr	r0, [pc, r0]
 838:	ldr	r5, [r0]
 83c:	ldr	r1, [pc, #112]	; 8b4 <strtoumax@plt+0x39c>
 840:	mov	r0, #0
 844:	add	r1, pc, r1
 848:	bl	4c4 <dcgettext@plt>
 84c:	mov	r1, r0
 850:	mov	r0, r5
 854:	mov	r2, r7
 858:	mov	r3, r4
 85c:	b	898 <strtoumax@plt+0x380>
 860:	ldr	r2, [pc, #88]	; 8c0 <strtoumax@plt+0x3a8>
 864:	add	r2, pc, r2
 868:	mov	r0, r4
 86c:	mov	r1, r7
 870:	mov	r3, r8
 874:	bl	4f4 <fprintf@plt>
 878:	mov	r0, r6
 87c:	bl	4b8 <free@plt>
 880:	b	79c <strtoumax@plt+0x284>
 884:	ldr	r3, [pc, #28]	; 8a8 <strtoumax@plt+0x390>
 888:	add	r3, pc, r3
 88c:	mov	r0, r4
 890:	mov	r1, r6
 894:	mov	r2, r8
 898:	bl	4f4 <fprintf@plt>
 89c:	b	79c <strtoumax@plt+0x284>
 8a0:	andeq	r0, r1, r4, asr #16
 8a4:	andeq	r0, r0, r6, ror #1
 8a8:	andeq	r0, r0, fp, ror #1
 8ac:	andeq	r0, r1, r4, ror #13
 8b0:	andeq	r0, r1, r0, lsl #16
 8b4:	andeq	r0, r0, r4, asr #1
 8b8:	andeq	r0, r1, r8, lsl #17
 8bc:	andeq	r0, r0, r9, ror r1
 8c0:	andeq	r0, r0, pc, lsl #2
 8c4:	andeq	r0, r1, r8, lsr #14

Disassembly of section .fini:

000008c8 <.fini>:
 8c8:	push	{r3, lr}
 8cc:	pop	{r3, pc}
