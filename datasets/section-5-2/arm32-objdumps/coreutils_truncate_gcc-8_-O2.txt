
../repos/coreutils/src/truncate:     file format elf32-littlearm


Disassembly of section .init:

00010c14 <.init>:
   10c14:	push	{r3, lr}
   10c18:	bl	11a3c <__assert_fail@plt+0xbb0>
   10c1c:	pop	{r3, pc}

Disassembly of section .plt:

00010c20 <calloc@plt-0x14>:
   10c20:	push	{lr}		; (str lr, [sp, #-4]!)
   10c24:	ldr	lr, [pc, #4]	; 10c30 <calloc@plt-0x4>
   10c28:	add	lr, pc, lr
   10c2c:	ldr	pc, [lr, #8]!
   10c30:	ldrdeq	r7, [r1], -r0

00010c34 <calloc@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #94208	; 0x17000
   10c3c:	ldr	pc, [ip, #976]!	; 0x3d0

00010c40 <fputs_unlocked@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #94208	; 0x17000
   10c48:	ldr	pc, [ip, #968]!	; 0x3c8

00010c4c <raise@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #94208	; 0x17000
   10c54:	ldr	pc, [ip, #960]!	; 0x3c0

00010c58 <strcmp@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #94208	; 0x17000
   10c60:	ldr	pc, [ip, #952]!	; 0x3b8

00010c64 <fflush@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #94208	; 0x17000
   10c6c:	ldr	pc, [ip, #944]!	; 0x3b0

00010c70 <free@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #94208	; 0x17000
   10c78:	ldr	pc, [ip, #936]!	; 0x3a8

00010c7c <_exit@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #94208	; 0x17000
   10c84:	ldr	pc, [ip, #928]!	; 0x3a0

00010c88 <memcpy@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #94208	; 0x17000
   10c90:	ldr	pc, [ip, #920]!	; 0x398

00010c94 <mbsinit@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #94208	; 0x17000
   10c9c:	ldr	pc, [ip, #912]!	; 0x390

00010ca0 <ftruncate64@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #94208	; 0x17000
   10ca8:	ldr	pc, [ip, #904]!	; 0x388

00010cac <memcmp@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #94208	; 0x17000
   10cb4:	ldr	pc, [ip, #896]!	; 0x380

00010cb8 <fputc_unlocked@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #94208	; 0x17000
   10cc0:	ldr	pc, [ip, #888]!	; 0x378

00010cc4 <dcgettext@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #94208	; 0x17000
   10ccc:	ldr	pc, [ip, #880]!	; 0x370

00010cd0 <realloc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #94208	; 0x17000
   10cd8:	ldr	pc, [ip, #872]!	; 0x368

00010cdc <textdomain@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #94208	; 0x17000
   10ce4:	ldr	pc, [ip, #864]!	; 0x360

00010ce8 <iswprint@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #94208	; 0x17000
   10cf0:	ldr	pc, [ip, #856]!	; 0x358

00010cf4 <__fxstat64@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #94208	; 0x17000
   10cfc:	ldr	pc, [ip, #848]!	; 0x350

00010d00 <fwrite@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #94208	; 0x17000
   10d08:	ldr	pc, [ip, #840]!	; 0x348

00010d0c <lseek64@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #94208	; 0x17000
   10d14:	ldr	pc, [ip, #832]!	; 0x340

00010d18 <__ctype_get_mb_cur_max@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #94208	; 0x17000
   10d20:	ldr	pc, [ip, #824]!	; 0x338

00010d24 <__fpending@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #94208	; 0x17000
   10d2c:	ldr	pc, [ip, #816]!	; 0x330

00010d30 <mbrtowc@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #94208	; 0x17000
   10d38:	ldr	pc, [ip, #808]!	; 0x328

00010d3c <error@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #94208	; 0x17000
   10d44:	ldr	pc, [ip, #800]!	; 0x320

00010d48 <open64@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #94208	; 0x17000
   10d50:	ldr	pc, [ip, #792]!	; 0x318

00010d54 <malloc@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #94208	; 0x17000
   10d5c:	ldr	pc, [ip, #784]!	; 0x310

00010d60 <__libc_start_main@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #94208	; 0x17000
   10d68:	ldr	pc, [ip, #776]!	; 0x308

00010d6c <__freading@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #94208	; 0x17000
   10d74:	ldr	pc, [ip, #768]!	; 0x300

00010d78 <__gmon_start__@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #94208	; 0x17000
   10d80:	ldr	pc, [ip, #760]!	; 0x2f8

00010d84 <getopt_long@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #94208	; 0x17000
   10d8c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d90 <__ctype_b_loc@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #94208	; 0x17000
   10d98:	ldr	pc, [ip, #744]!	; 0x2e8

00010d9c <exit@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #94208	; 0x17000
   10da4:	ldr	pc, [ip, #736]!	; 0x2e0

00010da8 <strlen@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #94208	; 0x17000
   10db0:	ldr	pc, [ip, #728]!	; 0x2d8

00010db4 <strchr@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #94208	; 0x17000
   10dbc:	ldr	pc, [ip, #720]!	; 0x2d0

00010dc0 <__errno_location@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #94208	; 0x17000
   10dc8:	ldr	pc, [ip, #712]!	; 0x2c8

00010dcc <__cxa_atexit@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #94208	; 0x17000
   10dd4:	ldr	pc, [ip, #704]!	; 0x2c0

00010dd8 <memset@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #94208	; 0x17000
   10de0:	ldr	pc, [ip, #696]!	; 0x2b8

00010de4 <__printf_chk@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #94208	; 0x17000
   10dec:	ldr	pc, [ip, #688]!	; 0x2b0

00010df0 <fileno@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #94208	; 0x17000
   10df8:	ldr	pc, [ip, #680]!	; 0x2a8

00010dfc <__fprintf_chk@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #94208	; 0x17000
   10e04:	ldr	pc, [ip, #672]!	; 0x2a0

00010e08 <fclose@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #94208	; 0x17000
   10e10:	ldr	pc, [ip, #664]!	; 0x298

00010e14 <fseeko64@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #94208	; 0x17000
   10e1c:	ldr	pc, [ip, #656]!	; 0x290

00010e20 <setlocale@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #94208	; 0x17000
   10e28:	ldr	pc, [ip, #648]!	; 0x288

00010e2c <strrchr@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #94208	; 0x17000
   10e34:	ldr	pc, [ip, #640]!	; 0x280

00010e38 <nl_langinfo@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #94208	; 0x17000
   10e40:	ldr	pc, [ip, #632]!	; 0x278

00010e44 <__strtoll_internal@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #94208	; 0x17000
   10e4c:	ldr	pc, [ip, #624]!	; 0x270

00010e50 <bindtextdomain@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #94208	; 0x17000
   10e58:	ldr	pc, [ip, #616]!	; 0x268

00010e5c <__xstat64@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #94208	; 0x17000
   10e64:	ldr	pc, [ip, #608]!	; 0x260

00010e68 <strncmp@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #94208	; 0x17000
   10e70:	ldr	pc, [ip, #600]!	; 0x258

00010e74 <abort@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #94208	; 0x17000
   10e7c:	ldr	pc, [ip, #592]!	; 0x250

00010e80 <close@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #94208	; 0x17000
   10e88:	ldr	pc, [ip, #584]!	; 0x248

00010e8c <__assert_fail@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #94208	; 0x17000
   10e94:	ldr	pc, [ip, #576]!	; 0x240

Disassembly of section .text:

00010e98 <.text>:
   10e98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10e9c:	mov	r5, r1
   10ea0:	strd	r6, [sp, #8]
   10ea4:	movw	r7, #27380	; 0x6af4
   10ea8:	movt	r7, #1
   10eac:	strd	r8, [sp, #16]
   10eb0:	mov	r9, r0
   10eb4:	movw	r8, #33104	; 0x8150
   10eb8:	movt	r8, #2
   10ebc:	strd	sl, [sp, #24]
   10ec0:	mov	sl, #0
   10ec4:	str	lr, [sp, #32]
   10ec8:	sub	sp, sp, #196	; 0xc4
   10ecc:	mov	r6, sl
   10ed0:	ldr	r0, [r1]
   10ed4:	bl	11fbc <__assert_fail@plt+0x1130>
   10ed8:	movw	r1, #25904	; 0x6530
   10edc:	movt	r1, #1
   10ee0:	ldr	fp, [pc, #2836]	; 119fc <__assert_fail@plt+0xb70>
   10ee4:	mov	r0, #6
   10ee8:	bl	10e20 <setlocale@plt>
   10eec:	movw	r1, #27248	; 0x6a70
   10ef0:	movt	r1, #1
   10ef4:	movw	r0, #27080	; 0x69c8
   10ef8:	movt	r0, #1
   10efc:	bl	10e50 <bindtextdomain@plt>
   10f00:	movw	r0, #27080	; 0x69c8
   10f04:	movt	r0, #1
   10f08:	bl	10cdc <textdomain@plt>
   10f0c:	movw	r0, #7888	; 0x1ed0
   10f10:	movt	r0, #1
   10f14:	bl	16414 <__assert_fail@plt+0x5588>
   10f18:	mov	r2, #0
   10f1c:	mov	r3, #0
   10f20:	str	r7, [sp, #24]
   10f24:	strd	r2, [sp, #32]
   10f28:	mov	r4, #0
   10f2c:	mov	r3, fp
   10f30:	ldr	r2, [sp, #24]
   10f34:	mov	r1, r5
   10f38:	mov	r0, r9
   10f3c:	str	r4, [sp]
   10f40:	bl	10d84 <getopt_long@plt>
   10f44:	cmn	r0, #1
   10f48:	beq	111fc <__assert_fail@plt+0x370>
   10f4c:	cmp	r0, #99	; 0x63
   10f50:	beq	1114c <__assert_fail@plt+0x2c0>
   10f54:	ble	110e0 <__assert_fail@plt+0x254>
   10f58:	cmp	r0, #114	; 0x72
   10f5c:	beq	11138 <__assert_fail@plt+0x2ac>
   10f60:	cmp	r0, #115	; 0x73
   10f64:	bne	110d0 <__assert_fail@plt+0x244>
   10f68:	bl	10d90 <__ctype_b_loc@plt>
   10f6c:	movw	r1, #33096	; 0x8148
   10f70:	movt	r1, #2
   10f74:	ldr	ip, [r0]
   10f78:	ldr	r3, [r1]
   10f7c:	ldr	r7, [sp, #24]
   10f80:	b	10f88 <__assert_fail@plt+0xfc>
   10f84:	str	r3, [r1]
   10f88:	ldrb	r2, [r3]
   10f8c:	mov	r0, r3
   10f90:	add	r3, r3, #1
   10f94:	lsl	lr, r2, #1
   10f98:	ldrh	lr, [ip, lr]
   10f9c:	tst	lr, #8192	; 0x2000
   10fa0:	bne	10f84 <__assert_fail@plt+0xf8>
   10fa4:	sub	r2, r2, #37	; 0x25
   10fa8:	str	r7, [sp, #24]
   10fac:	cmp	r2, #25
   10fb0:	ldrls	pc, [pc, r2, lsl #2]
   10fb4:	b	1102c <__assert_fail@plt+0x1a0>
   10fb8:	ldrdeq	r1, [r1], -ip
   10fbc:	andeq	r1, r1, ip, lsr #32
   10fc0:	andeq	r1, r1, ip, lsr #32
   10fc4:	andeq	r1, r1, ip, lsr #32
   10fc8:	andeq	r1, r1, ip, lsr #32
   10fcc:	andeq	r1, r1, ip, lsr #32
   10fd0:	andeq	r1, r1, ip, lsr #32
   10fd4:	andeq	r1, r1, ip, lsr #32
   10fd8:	andeq	r1, r1, ip, lsr #32
   10fdc:	andeq	r1, r1, ip, lsr #32
   10fe0:	andeq	r1, r1, ip, ror #3
   10fe4:	andeq	r1, r1, ip, lsr #32
   10fe8:	andeq	r1, r1, ip, lsr #32
   10fec:	andeq	r1, r1, ip, lsr #32
   10ff0:	andeq	r1, r1, ip, lsr #32
   10ff4:	andeq	r1, r1, ip, lsr #32
   10ff8:	andeq	r1, r1, ip, lsr #32
   10ffc:	andeq	r1, r1, ip, lsr #32
   11000:	andeq	r1, r1, ip, lsr #32
   11004:	andeq	r1, r1, ip, lsr #32
   11008:	andeq	r1, r1, ip, lsr #32
   1100c:	andeq	r1, r1, ip, lsr #32
   11010:	andeq	r1, r1, ip, lsr #32
   11014:	andeq	r1, r1, r0, lsr #32
   11018:	andeq	r1, r1, ip, lsr #32
   1101c:	andeq	r1, r1, ip, asr #3
   11020:	add	r0, r0, #1
   11024:	mov	sl, #3
   11028:	str	r0, [r1]
   1102c:	ldr	r6, [r1]
   11030:	ldrb	r3, [r6]
   11034:	lsl	r2, r3, #1
   11038:	ldrh	r2, [ip, r2]
   1103c:	tst	r2, #8192	; 0x2000
   11040:	ldrne	r7, [sp, #24]
   11044:	beq	11068 <__assert_fail@plt+0x1dc>
   11048:	add	r6, r6, #1
   1104c:	str	r6, [r1]
   11050:	ldrb	r3, [r6]
   11054:	lsl	r2, r3, #1
   11058:	ldrh	r2, [ip, r2]
   1105c:	tst	r2, #8192	; 0x2000
   11060:	bne	11048 <__assert_fail@plt+0x1bc>
   11064:	str	r7, [sp, #24]
   11068:	sub	r3, r3, #43	; 0x2b
   1106c:	ands	r3, r3, #253	; 0xfd
   11070:	bne	11164 <__assert_fail@plt+0x2d8>
   11074:	cmp	sl, #0
   11078:	bne	119b8 <__assert_fail@plt+0xb2c>
   1107c:	mov	r2, #5
   11080:	mov	r0, sl
   11084:	movw	r1, #27312	; 0x6ab0
   11088:	movt	r1, #1
   1108c:	bl	10cc4 <dcgettext@plt>
   11090:	mvn	r7, #-2147483648	; 0x80000000
   11094:	movw	r3, #27328	; 0x6ac0
   11098:	movt	r3, #1
   1109c:	mov	r2, #0
   110a0:	str	r0, [sp, #12]
   110a4:	mov	r0, r6
   110a8:	mvn	r6, #0
   110ac:	strd	r6, [sp]
   110b0:	str	r3, [sp, #8]
   110b4:	mov	r3, #-2147483648	; 0x80000000
   110b8:	str	sl, [sp, #16]
   110bc:	mov	sl, #1
   110c0:	bl	14e7c <__assert_fail@plt+0x3ff0>
   110c4:	mov	r6, sl
   110c8:	strd	r0, [sp, #32]
   110cc:	b	10f28 <__assert_fail@plt+0x9c>
   110d0:	cmp	r0, #111	; 0x6f
   110d4:	beq	11158 <__assert_fail@plt+0x2cc>
   110d8:	mov	r0, #1
   110dc:	bl	11af0 <__assert_fail@plt+0xc64>
   110e0:	cmn	r0, #3
   110e4:	bne	11128 <__assert_fail@plt+0x29c>
   110e8:	movw	r2, #27364	; 0x6ae4
   110ec:	movt	r2, #1
   110f0:	movw	r3, #32996	; 0x80e4
   110f4:	movt	r3, #2
   110f8:	movw	r0, #33092	; 0x8144
   110fc:	movt	r0, #2
   11100:	stm	sp, {r2, r4}
   11104:	movw	r1, #25824	; 0x64e0
   11108:	movt	r1, #1
   1110c:	ldr	r0, [r0]
   11110:	movw	r2, #27076	; 0x69c4
   11114:	movt	r2, #1
   11118:	ldr	r3, [r3]
   1111c:	bl	14748 <__assert_fail@plt+0x38bc>
   11120:	mov	r0, r4
   11124:	bl	10d9c <exit@plt>
   11128:	cmn	r0, #2
   1112c:	bne	110d8 <__assert_fail@plt+0x24c>
   11130:	mov	r0, r4
   11134:	bl	11af0 <__assert_fail@plt+0xc64>
   11138:	movw	r3, #33096	; 0x8148
   1113c:	movt	r3, #2
   11140:	ldr	r3, [r3]
   11144:	str	r3, [r8, #4]
   11148:	b	10f28 <__assert_fail@plt+0x9c>
   1114c:	mov	r3, #1
   11150:	strb	r3, [r8]
   11154:	b	10f28 <__assert_fail@plt+0x9c>
   11158:	mov	r3, #1
   1115c:	strb	r3, [r8, #1]
   11160:	b	10f28 <__assert_fail@plt+0x9c>
   11164:	mov	r2, #5
   11168:	movw	r1, #27312	; 0x6ab0
   1116c:	movt	r1, #1
   11170:	mov	r0, #0
   11174:	bl	10cc4 <dcgettext@plt>
   11178:	mov	r4, #0
   1117c:	mvn	r2, #0
   11180:	str	r0, [sp, #12]
   11184:	mvn	r3, #-2147483648	; 0x80000000
   11188:	movw	r1, #27328	; 0x6ac0
   1118c:	movt	r1, #1
   11190:	mov	r0, r6
   11194:	strd	r2, [sp]
   11198:	mov	r3, #-2147483648	; 0x80000000
   1119c:	mov	r2, #0
   111a0:	str	r1, [sp, #8]
   111a4:	str	r4, [sp, #16]
   111a8:	bl	14e7c <__assert_fail@plt+0x3ff0>
   111ac:	sub	r3, sl, #4
   111b0:	strd	r0, [sp, #32]
   111b4:	cmp	r3, #1
   111b8:	bhi	111c4 <__assert_fail@plt+0x338>
   111bc:	orrs	r3, r0, r1
   111c0:	beq	119d8 <__assert_fail@plt+0xb4c>
   111c4:	mov	r6, #1
   111c8:	b	10f28 <__assert_fail@plt+0x9c>
   111cc:	add	r0, r0, #1
   111d0:	mov	sl, #2
   111d4:	str	r0, [r1]
   111d8:	b	1102c <__assert_fail@plt+0x1a0>
   111dc:	add	r0, r0, #1
   111e0:	mov	sl, #5
   111e4:	str	r0, [r1]
   111e8:	b	1102c <__assert_fail@plt+0x1a0>
   111ec:	add	r0, r0, #1
   111f0:	mov	sl, #4
   111f4:	str	r0, [r1]
   111f8:	b	1102c <__assert_fail@plt+0x1a0>
   111fc:	movw	r3, #33104	; 0x8150
   11200:	movt	r3, #2
   11204:	mov	r2, r3
   11208:	movw	r3, #33080	; 0x8138
   1120c:	movt	r3, #2
   11210:	ldr	r8, [r2, #4]
   11214:	str	r2, [sp, #44]	; 0x2c
   11218:	ldr	r7, [r3]
   1121c:	cmp	r8, r4
   11220:	sub	r3, r9, r7
   11224:	add	r9, r5, r7, lsl #2
   11228:	beq	116d0 <__assert_fail@plt+0x844>
   1122c:	cmp	sl, #0
   11230:	moveq	fp, r6
   11234:	movne	fp, #0
   11238:	cmp	fp, #0
   1123c:	bne	11924 <__assert_fail@plt+0xa98>
   11240:	ldr	r2, [sp, #44]	; 0x2c
   11244:	ldrb	r4, [r2, #1]
   11248:	eor	r4, r4, #1
   1124c:	orrs	r4, r6, r4
   11250:	beq	118c8 <__assert_fail@plt+0xa3c>
   11254:	cmp	r3, #0
   11258:	ble	11444 <__assert_fail@plt+0x5b8>
   1125c:	mov	r1, r8
   11260:	add	r2, sp, #88	; 0x58
   11264:	mov	r0, #3
   11268:	bl	10e5c <__xstat64@plt>
   1126c:	subs	r1, r0, #0
   11270:	bne	1198c <__assert_fail@plt+0xb00>
   11274:	ldr	r3, [sp, #104]	; 0x68
   11278:	and	r3, r3, #53248	; 0xd000
   1127c:	cmp	r3, #32768	; 0x8000
   11280:	bne	117a4 <__assert_fail@plt+0x918>
   11284:	ldrd	r2, [sp, #136]	; 0x88
   11288:	cmp	r2, #0
   1128c:	sbcs	r1, r3, #0
   11290:	blt	11804 <__assert_fail@plt+0x978>
   11294:	cmp	r6, #0
   11298:	strdne	r2, [sp, #56]	; 0x38
   1129c:	ldrdne	r2, [sp, #32]
   112a0:	bne	112b0 <__assert_fail@plt+0x424>
   112a4:	mvn	r0, #0
   112a8:	mvn	r1, #0
   112ac:	strd	r0, [sp, #56]	; 0x38
   112b0:	strd	r2, [sp, #32]
   112b4:	ldr	r3, [sp, #44]	; 0x2c
   112b8:	movw	r2, #2049	; 0x801
   112bc:	ldr	fp, [r5, r7, lsl #2]
   112c0:	ldrb	r1, [r3]
   112c4:	movw	r3, #2113	; 0x841
   112c8:	cmp	r1, #0
   112cc:	moveq	r2, r3
   112d0:	cmp	fp, #0
   112d4:	str	r2, [sp, #64]	; 0x40
   112d8:	beq	115d8 <__assert_fail@plt+0x74c>
   112dc:	movw	r3, #27640	; 0x6bf8
   112e0:	movt	r3, #1
   112e4:	str	r3, [sp, #76]	; 0x4c
   112e8:	movw	r3, #27804	; 0x6c9c
   112ec:	movt	r3, #1
   112f0:	str	r3, [sp, #68]	; 0x44
   112f4:	movw	r3, #27768	; 0x6c78
   112f8:	movt	r3, #1
   112fc:	str	r3, [sp, #72]	; 0x48
   11300:	mov	r3, #0
   11304:	str	r3, [sp, #24]
   11308:	b	11374 <__assert_fail@plt+0x4e8>
   1130c:	ldrb	r5, [r3]
   11310:	bl	10dc0 <__errno_location@plt>
   11314:	ldr	r4, [r0]
   11318:	cmp	r5, #0
   1131c:	beq	11328 <__assert_fail@plt+0x49c>
   11320:	cmp	r4, #2
   11324:	beq	11368 <__assert_fail@plt+0x4dc>
   11328:	movw	r1, #27596	; 0x6bcc
   1132c:	movt	r1, #1
   11330:	mov	r2, #5
   11334:	mov	r0, #0
   11338:	bl	10cc4 <dcgettext@plt>
   1133c:	mov	r5, r0
   11340:	mov	r3, #1
   11344:	mov	r1, fp
   11348:	mov	r0, #4
   1134c:	str	r3, [sp, #24]
   11350:	bl	13ff8 <__assert_fail@plt+0x316c>
   11354:	mov	r3, r0
   11358:	mov	r2, r5
   1135c:	mov	r1, r4
   11360:	mov	r0, #0
   11364:	bl	10d3c <error@plt>
   11368:	ldr	fp, [r9, #4]!
   1136c:	cmp	fp, #0
   11370:	beq	115dc <__assert_fail@plt+0x750>
   11374:	movw	r2, #438	; 0x1b6
   11378:	mov	r0, fp
   1137c:	ldr	r1, [sp, #64]	; 0x40
   11380:	bl	10d48 <open64@plt>
   11384:	subs	r8, r0, #0
   11388:	ldr	r3, [sp, #44]	; 0x2c
   1138c:	blt	1130c <__assert_fail@plt+0x480>
   11390:	ldrb	r3, [r3, #1]
   11394:	cmp	r3, #0
   11398:	bne	114fc <__assert_fail@plt+0x670>
   1139c:	ldr	r3, [sp, #60]	; 0x3c
   113a0:	cmp	sl, #0
   113a4:	moveq	r3, #0
   113a8:	lsrne	r3, r3, #31
   113ac:	cmp	r3, #0
   113b0:	ldrdeq	r4, [sp, #32]
   113b4:	beq	11470 <__assert_fail@plt+0x5e4>
   113b8:	add	r2, sp, #88	; 0x58
   113bc:	mov	r1, r8
   113c0:	mov	r0, #3
   113c4:	bl	10cf4 <__fxstat64@plt>
   113c8:	cmp	r0, #0
   113cc:	ldrdeq	r4, [sp, #32]
   113d0:	beq	11690 <__assert_fail@plt+0x804>
   113d4:	bl	10dc0 <__errno_location@plt>
   113d8:	movw	r1, #27624	; 0x6be8
   113dc:	movt	r1, #1
   113e0:	ldr	r5, [r0]
   113e4:	mov	r2, #5
   113e8:	mov	r0, #0
   113ec:	bl	10cc4 <dcgettext@plt>
   113f0:	mov	r3, #0
   113f4:	mov	r6, r0
   113f8:	mov	r1, fp
   113fc:	mov	r0, #4
   11400:	str	r3, [sp, #48]	; 0x30
   11404:	bl	13ff8 <__assert_fail@plt+0x316c>
   11408:	mov	r3, r0
   1140c:	mov	r2, r6
   11410:	mov	r1, r5
   11414:	mov	r0, #0
   11418:	bl	10d3c <error@plt>
   1141c:	mov	r0, r8
   11420:	bl	10e80 <close@plt>
   11424:	cmp	r0, #0
   11428:	bne	115a8 <__assert_fail@plt+0x71c>
   1142c:	ldr	r3, [sp, #48]	; 0x30
   11430:	eor	r4, r3, #1
   11434:	ldr	r3, [sp, #24]
   11438:	orr	r3, r3, r4
   1143c:	str	r3, [sp, #24]
   11440:	b	11368 <__assert_fail@plt+0x4dc>
   11444:	mov	r2, #5
   11448:	movw	r1, #27528	; 0x6b88
   1144c:	movt	r1, #1
   11450:	mov	r0, #0
   11454:	bl	10cc4 <dcgettext@plt>
   11458:	mov	r2, r0
   1145c:	mov	r1, #0
   11460:	mov	r0, r1
   11464:	bl	10d3c <error@plt>
   11468:	mov	r0, #1
   1146c:	bl	11af0 <__assert_fail@plt+0xc64>
   11470:	cmp	sl, #0
   11474:	bne	115fc <__assert_fail@plt+0x770>
   11478:	cmp	r4, #0
   1147c:	mov	r6, r4
   11480:	sbcs	r3, r5, #0
   11484:	mov	r7, r5
   11488:	movlt	r6, #0
   1148c:	movlt	r7, #0
   11490:	mov	r3, r7
   11494:	mov	r2, r6
   11498:	mov	r0, r8
   1149c:	bl	10ca0 <ftruncate64@plt>
   114a0:	cmp	r0, #0
   114a4:	moveq	r3, #1
   114a8:	streq	r3, [sp, #48]	; 0x30
   114ac:	beq	1141c <__assert_fail@plt+0x590>
   114b0:	bl	10dc0 <__errno_location@plt>
   114b4:	ldr	r5, [r0]
   114b8:	mov	r0, #0
   114bc:	mov	r2, #5
   114c0:	ldr	r1, [sp, #72]	; 0x48
   114c4:	str	r0, [sp, #48]	; 0x30
   114c8:	bl	10cc4 <dcgettext@plt>
   114cc:	mov	r2, r0
   114d0:	mov	r1, fp
   114d4:	mov	r0, #4
   114d8:	str	r2, [sp, #80]	; 0x50
   114dc:	bl	13ff8 <__assert_fail@plt+0x316c>
   114e0:	mov	r3, r0
   114e4:	mov	r1, r5
   114e8:	strd	r6, [sp]
   114ec:	mov	r0, #0
   114f0:	ldr	r2, [sp, #80]	; 0x50
   114f4:	bl	10d3c <error@plt>
   114f8:	b	1141c <__assert_fail@plt+0x590>
   114fc:	add	r2, sp, #88	; 0x58
   11500:	mov	r1, r8
   11504:	mov	r0, #3
   11508:	bl	10cf4 <__fxstat64@plt>
   1150c:	cmp	r0, #0
   11510:	bne	113d4 <__assert_fail@plt+0x548>
   11514:	ldr	r6, [sp, #144]	; 0x90
   11518:	sub	r3, r6, #1
   1151c:	cmp	r3, #536870912	; 0x20000000
   11520:	ldrd	r2, [sp, #32]
   11524:	movcs	r6, #512	; 0x200
   11528:	mov	r1, r3
   1152c:	asr	r3, r6, #31
   11530:	cmp	r1, r2, asr #31
   11534:	mov	r2, r6
   11538:	strd	r2, [sp, #48]	; 0x30
   1153c:	bne	116f0 <__assert_fail@plt+0x864>
   11540:	ldr	r3, [sp, #32]
   11544:	smull	r2, r3, r3, r6
   11548:	mov	r1, r2
   1154c:	mov	r2, r3
   11550:	cmp	r0, #0
   11554:	mov	r4, r1
   11558:	mov	r5, r2
   1155c:	beq	11470 <__assert_fail@plt+0x5e4>
   11560:	mov	r0, #0
   11564:	mov	r2, #5
   11568:	ldr	r1, [sp, #76]	; 0x4c
   1156c:	str	r0, [sp, #48]	; 0x30
   11570:	bl	10cc4 <dcgettext@plt>
   11574:	mov	r5, r0
   11578:	mov	r1, fp
   1157c:	mov	r0, #4
   11580:	bl	13ff8 <__assert_fail@plt+0x316c>
   11584:	mov	r2, r5
   11588:	ldrd	r4, [sp, #32]
   1158c:	mov	r1, #0
   11590:	strd	r4, [sp]
   11594:	str	r6, [sp, #8]
   11598:	str	r0, [sp, #12]
   1159c:	mov	r0, r1
   115a0:	bl	10d3c <error@plt>
   115a4:	b	1141c <__assert_fail@plt+0x590>
   115a8:	bl	10dc0 <__errno_location@plt>
   115ac:	mov	r3, #1
   115b0:	mov	r2, #5
   115b4:	ldr	r4, [r0]
   115b8:	mov	r0, #0
   115bc:	ldr	r1, [sp, #68]	; 0x44
   115c0:	str	r3, [sp, #24]
   115c4:	bl	10cc4 <dcgettext@plt>
   115c8:	mov	r5, r0
   115cc:	mov	r1, fp
   115d0:	mov	r0, #4
   115d4:	b	11350 <__assert_fail@plt+0x4c4>
   115d8:	str	fp, [sp, #24]
   115dc:	ldr	r0, [sp, #24]
   115e0:	add	sp, sp, #196	; 0xc4
   115e4:	ldrd	r4, [sp]
   115e8:	ldrd	r6, [sp, #8]
   115ec:	ldrd	r8, [sp, #16]
   115f0:	ldrd	sl, [sp, #24]
   115f4:	add	sp, sp, #32
   115f8:	pop	{pc}		; (ldr pc, [sp], #4)
   115fc:	ldrd	r0, [sp, #56]	; 0x38
   11600:	mvn	r3, #0
   11604:	mvn	r2, #0
   11608:	cmp	r1, r3
   1160c:	cmpeq	r0, r2
   11610:	ldrdne	r6, [sp, #56]	; 0x38
   11614:	beq	11690 <__assert_fail@plt+0x804>
   11618:	cmp	sl, #2
   1161c:	beq	116bc <__assert_fail@plt+0x830>
   11620:	cmp	sl, #3
   11624:	beq	11730 <__assert_fail@plt+0x8a4>
   11628:	cmp	sl, #4
   1162c:	beq	11748 <__assert_fail@plt+0x8bc>
   11630:	cmp	sl, #5
   11634:	beq	11848 <__assert_fail@plt+0x9bc>
   11638:	adds	r2, r6, r4
   1163c:	adcs	r3, r7, r5
   11640:	mov	r4, r2
   11644:	mov	r5, r3
   11648:	bvc	11478 <__assert_fail@plt+0x5ec>
   1164c:	movw	r1, #27732	; 0x6c54
   11650:	movt	r1, #1
   11654:	mov	r2, #5
   11658:	mov	r0, #0
   1165c:	bl	10cc4 <dcgettext@plt>
   11660:	mov	r3, #0
   11664:	mov	r5, r0
   11668:	mov	r1, fp
   1166c:	mov	r0, #4
   11670:	str	r3, [sp, #48]	; 0x30
   11674:	bl	13ff8 <__assert_fail@plt+0x316c>
   11678:	mov	r1, #0
   1167c:	mov	r3, r0
   11680:	mov	r2, r5
   11684:	mov	r0, r1
   11688:	bl	10d3c <error@plt>
   1168c:	b	1141c <__assert_fail@plt+0x590>
   11690:	ldr	r3, [sp, #104]	; 0x68
   11694:	and	r3, r3, #53248	; 0xd000
   11698:	cmp	r3, #32768	; 0x8000
   1169c:	bne	11768 <__assert_fail@plt+0x8dc>
   116a0:	ldrd	r6, [sp, #136]	; 0x88
   116a4:	cmp	r6, #0
   116a8:	sbcs	r3, r7, #0
   116ac:	movwlt	r1, #27688	; 0x6c28
   116b0:	movtlt	r1, #1
   116b4:	bge	11618 <__assert_fail@plt+0x78c>
   116b8:	b	11654 <__assert_fail@plt+0x7c8>
   116bc:	cmp	r6, r4
   116c0:	sbcs	r3, r7, r5
   116c4:	movlt	r6, r4
   116c8:	movlt	r7, r5
   116cc:	b	11490 <__assert_fail@plt+0x604>
   116d0:	cmp	r6, r4
   116d4:	beq	11870 <__assert_fail@plt+0x9e4>
   116d8:	cmp	r3, #0
   116dc:	ble	11444 <__assert_fail@plt+0x5b8>
   116e0:	mvn	r2, #0
   116e4:	mvn	r3, #0
   116e8:	strd	r2, [sp, #56]	; 0x38
   116ec:	b	112b4 <__assert_fail@plt+0x428>
   116f0:	ldrd	r2, [sp, #32]
   116f4:	umull	r4, r5, r2, r6
   116f8:	cmp	r3, #0
   116fc:	strd	r4, [sp, #80]	; 0x50
   11700:	umull	r4, r5, r6, r3
   11704:	bge	11710 <__assert_fail@plt+0x884>
   11708:	subs	r4, r4, r0
   1170c:	sbc	r5, r5, r6
   11710:	ldr	ip, [sp, #84]	; 0x54
   11714:	mov	r1, #0
   11718:	adds	r2, r4, ip
   1171c:	adc	r1, r5, r1
   11720:	cmp	r1, r2, asr #31
   11724:	bne	1195c <__assert_fail@plt+0xad0>
   11728:	ldr	r1, [sp, #80]	; 0x50
   1172c:	b	11550 <__assert_fail@plt+0x6c4>
   11730:	cmp	r6, r4
   11734:	sbcs	r3, r7, r5
   11738:	bge	11478 <__assert_fail@plt+0x5ec>
   1173c:	mov	r4, r6
   11740:	mov	r5, r7
   11744:	b	11478 <__assert_fail@plt+0x5ec>
   11748:	mov	r2, r4
   1174c:	mov	r3, r5
   11750:	mov	r0, r6
   11754:	mov	r1, r7
   11758:	bl	161a4 <__assert_fail@plt+0x5318>
   1175c:	subs	r4, r6, r2
   11760:	sbc	r5, r7, r3
   11764:	b	11478 <__assert_fail@plt+0x5ec>
   11768:	mov	r1, #2
   1176c:	mov	r3, #0
   11770:	mov	r2, #0
   11774:	mov	r0, r8
   11778:	str	r1, [sp]
   1177c:	bl	10d0c <lseek64@plt>
   11780:	cmp	r0, #0
   11784:	mov	r6, r0
   11788:	sbcs	r3, r1, #0
   1178c:	mov	r7, r1
   11790:	bge	11618 <__assert_fail@plt+0x78c>
   11794:	bl	10dc0 <__errno_location@plt>
   11798:	movw	r1, #27568	; 0x6bb0
   1179c:	movt	r1, #1
   117a0:	b	113e0 <__assert_fail@plt+0x554>
   117a4:	mov	r0, r8
   117a8:	bl	10d48 <open64@plt>
   117ac:	mov	r4, r0
   117b0:	bl	10dc0 <__errno_location@plt>
   117b4:	cmp	r4, #0
   117b8:	mov	r8, r0
   117bc:	blt	11804 <__assert_fail@plt+0x978>
   117c0:	mov	r1, #2
   117c4:	mov	r2, #0
   117c8:	mov	r3, #0
   117cc:	mov	r0, r4
   117d0:	str	r1, [sp]
   117d4:	bl	10d0c <lseek64@plt>
   117d8:	mov	r2, r0
   117dc:	mov	r3, r1
   117e0:	mov	r0, r4
   117e4:	ldr	r4, [r8]
   117e8:	strd	r2, [sp, #24]
   117ec:	bl	10e80 <close@plt>
   117f0:	ldrd	r2, [sp, #24]
   117f4:	cmp	r2, #0
   117f8:	sbcs	r1, r3, #0
   117fc:	bge	11294 <__assert_fail@plt+0x408>
   11800:	str	r4, [r8]
   11804:	bl	10dc0 <__errno_location@plt>
   11808:	movw	r1, #27568	; 0x6bb0
   1180c:	movt	r1, #1
   11810:	ldr	r4, [r0]
   11814:	mov	r2, #5
   11818:	mov	r0, #0
   1181c:	bl	10cc4 <dcgettext@plt>
   11820:	ldr	r3, [sp, #44]	; 0x2c
   11824:	mov	r5, r0
   11828:	mov	r0, #4
   1182c:	ldr	r1, [r3, #4]
   11830:	bl	13ff8 <__assert_fail@plt+0x316c>
   11834:	mov	r3, r0
   11838:	mov	r2, r5
   1183c:	mov	r1, r4
   11840:	mov	r0, #1
   11844:	bl	10d3c <error@plt>
   11848:	mov	r2, r4
   1184c:	mov	r3, r5
   11850:	mov	r0, r6
   11854:	mov	r1, r7
   11858:	bl	161a4 <__assert_fail@plt+0x5318>
   1185c:	orrs	r1, r2, r3
   11860:	beq	1173c <__assert_fail@plt+0x8b0>
   11864:	subs	r4, r4, r2
   11868:	sbc	r5, r5, r3
   1186c:	b	11638 <__assert_fail@plt+0x7ac>
   11870:	mov	r2, #5
   11874:	mov	r0, r6
   11878:	movw	r1, #27388	; 0x6afc
   1187c:	movt	r1, #1
   11880:	bl	10cc4 <dcgettext@plt>
   11884:	mov	r4, r0
   11888:	movw	r1, #27424	; 0x6b20
   1188c:	movt	r1, #1
   11890:	mov	r0, r6
   11894:	bl	1429c <__assert_fail@plt+0x3410>
   11898:	mov	r5, r0
   1189c:	movw	r1, #27432	; 0x6b28
   118a0:	movt	r1, #1
   118a4:	mov	r0, #1
   118a8:	bl	1429c <__assert_fail@plt+0x3410>
   118ac:	mov	r3, r5
   118b0:	mov	r2, r4
   118b4:	str	r0, [sp]
   118b8:	mov	r1, r6
   118bc:	mov	r0, r6
   118c0:	bl	10d3c <error@plt>
   118c4:	b	110d8 <__assert_fail@plt+0x24c>
   118c8:	mov	r2, #5
   118cc:	movw	r1, #27484	; 0x6b5c
   118d0:	movt	r1, #1
   118d4:	mov	r0, r4
   118d8:	bl	10cc4 <dcgettext@plt>
   118dc:	mov	r5, r0
   118e0:	movw	r1, #27516	; 0x6b7c
   118e4:	movt	r1, #1
   118e8:	mov	r0, r4
   118ec:	bl	1429c <__assert_fail@plt+0x3410>
   118f0:	mov	r6, r0
   118f4:	movw	r1, #27424	; 0x6b20
   118f8:	movt	r1, #1
   118fc:	mov	r0, #1
   11900:	bl	1429c <__assert_fail@plt+0x3410>
   11904:	mov	r3, r6
   11908:	mov	r2, r5
   1190c:	str	r0, [sp]
   11910:	mov	r1, r4
   11914:	mov	r0, r4
   11918:	bl	10d3c <error@plt>
   1191c:	mov	r0, #1
   11920:	bl	11af0 <__assert_fail@plt+0xc64>
   11924:	mov	r2, #5
   11928:	movw	r1, #27444	; 0x6b34
   1192c:	movt	r1, #1
   11930:	mov	r0, r4
   11934:	bl	10cc4 <dcgettext@plt>
   11938:	mov	r5, r0
   1193c:	movw	r1, #27424	; 0x6b20
   11940:	movt	r1, #1
   11944:	mov	r0, r4
   11948:	bl	1429c <__assert_fail@plt+0x3410>
   1194c:	mov	r6, r0
   11950:	movw	r1, #27432	; 0x6b28
   11954:	movt	r1, #1
   11958:	b	118fc <__assert_fail@plt+0xa70>
   1195c:	ldrd	r4, [sp, #32]
   11960:	mov	r0, #1
   11964:	ldr	lr, [sp, #48]	; 0x30
   11968:	ldr	r2, [sp, #52]	; 0x34
   1196c:	mov	r3, r4
   11970:	mul	r1, r4, r2
   11974:	ldr	r2, [sp, #48]	; 0x30
   11978:	mla	r4, lr, r5, r1
   1197c:	umull	r2, r3, r3, r2
   11980:	mov	r1, r2
   11984:	add	r2, r4, r3
   11988:	b	11550 <__assert_fail@plt+0x6c4>
   1198c:	bl	10dc0 <__errno_location@plt>
   11990:	movw	r1, #27552	; 0x6ba0
   11994:	movt	r1, #1
   11998:	ldr	r4, [r0]
   1199c:	mov	r2, #5
   119a0:	mov	r0, fp
   119a4:	bl	10cc4 <dcgettext@plt>
   119a8:	mov	r5, r0
   119ac:	mov	r1, r8
   119b0:	mov	r0, #4
   119b4:	b	11830 <__assert_fail@plt+0x9a4>
   119b8:	mov	r2, #5
   119bc:	movw	r1, #27272	; 0x6a88
   119c0:	movt	r1, #1
   119c4:	mov	r0, r3
   119c8:	str	r3, [sp, #24]
   119cc:	bl	10cc4 <dcgettext@plt>
   119d0:	mov	r2, r0
   119d4:	b	1145c <__assert_fail@plt+0x5d0>
   119d8:	mov	r2, #5
   119dc:	movw	r1, #27344	; 0x6ad0
   119e0:	movt	r1, #1
   119e4:	mov	r0, r4
   119e8:	bl	10cc4 <dcgettext@plt>
   119ec:	mov	r2, r0
   119f0:	mov	r1, r4
   119f4:	mov	r0, #1
   119f8:	bl	10d3c <error@plt>
   119fc:	andeq	r6, r1, r0, ror r4
   11a00:	mov	fp, #0
   11a04:	mov	lr, #0
   11a08:	pop	{r1}		; (ldr r1, [sp], #4)
   11a0c:	mov	r2, sp
   11a10:	push	{r2}		; (str r2, [sp, #-4]!)
   11a14:	push	{r0}		; (str r0, [sp, #-4]!)
   11a18:	ldr	ip, [pc, #16]	; 11a30 <__assert_fail@plt+0xba4>
   11a1c:	push	{ip}		; (str ip, [sp, #-4]!)
   11a20:	ldr	r0, [pc, #12]	; 11a34 <__assert_fail@plt+0xba8>
   11a24:	ldr	r3, [pc, #12]	; 11a38 <__assert_fail@plt+0xbac>
   11a28:	bl	10d60 <__libc_start_main@plt>
   11a2c:	bl	10e74 <abort@plt>
   11a30:	andeq	r6, r1, r0, lsl r4
   11a34:	muleq	r1, r8, lr
   11a38:			; <UNDEFINED> instruction: 0x000163b0
   11a3c:	ldr	r3, [pc, #20]	; 11a58 <__assert_fail@plt+0xbcc>
   11a40:	ldr	r2, [pc, #20]	; 11a5c <__assert_fail@plt+0xbd0>
   11a44:	add	r3, pc, r3
   11a48:	ldr	r2, [r3, r2]
   11a4c:	cmp	r2, #0
   11a50:	bxeq	lr
   11a54:	b	10d78 <__gmon_start__@plt>
   11a58:			; <UNDEFINED> instruction: 0x000165b4
   11a5c:	ldrdeq	r0, [r0], -r8
   11a60:	ldr	r0, [pc, #24]	; 11a80 <__assert_fail@plt+0xbf4>
   11a64:	ldr	r3, [pc, #24]	; 11a84 <__assert_fail@plt+0xbf8>
   11a68:	cmp	r3, r0
   11a6c:	bxeq	lr
   11a70:	ldr	r3, [pc, #16]	; 11a88 <__assert_fail@plt+0xbfc>
   11a74:	cmp	r3, #0
   11a78:	bxeq	lr
   11a7c:	bx	r3
   11a80:	andeq	r8, r2, ip, lsr #2
   11a84:	andeq	r8, r2, ip, lsr #2
   11a88:	andeq	r0, r0, r0
   11a8c:	ldr	r0, [pc, #36]	; 11ab8 <__assert_fail@plt+0xc2c>
   11a90:	ldr	r1, [pc, #36]	; 11abc <__assert_fail@plt+0xc30>
   11a94:	sub	r1, r1, r0
   11a98:	asr	r1, r1, #2
   11a9c:	add	r1, r1, r1, lsr #31
   11aa0:	asrs	r1, r1, #1
   11aa4:	bxeq	lr
   11aa8:	ldr	r3, [pc, #16]	; 11ac0 <__assert_fail@plt+0xc34>
   11aac:	cmp	r3, #0
   11ab0:	bxeq	lr
   11ab4:	bx	r3
   11ab8:	andeq	r8, r2, ip, lsr #2
   11abc:	andeq	r8, r2, ip, lsr #2
   11ac0:	andeq	r0, r0, r0
   11ac4:	push	{r4, lr}
   11ac8:	ldr	r4, [pc, #24]	; 11ae8 <__assert_fail@plt+0xc5c>
   11acc:	ldrb	r3, [r4]
   11ad0:	cmp	r3, #0
   11ad4:	popne	{r4, pc}
   11ad8:	bl	11a60 <__assert_fail@plt+0xbd4>
   11adc:	mov	r3, #1
   11ae0:	strb	r3, [r4]
   11ae4:	pop	{r4, pc}
   11ae8:	andeq	r8, r2, ip, asr #2
   11aec:	b	11a8c <__assert_fail@plt+0xc00>
   11af0:	subs	r6, r0, #0
   11af4:	str	r7, [sp, #-8]!
   11af8:	str	lr, [sp, #4]
   11afc:	sub	sp, sp, #56	; 0x38
   11b00:	beq	11b48 <__assert_fail@plt+0xcbc>
   11b04:	movw	r3, #33088	; 0x8140
   11b08:	movt	r3, #2
   11b0c:	ldr	r4, [r3]
   11b10:	mov	r2, #5
   11b14:	movw	r1, #25836	; 0x64ec
   11b18:	movt	r1, #1
   11b1c:	mov	r0, #0
   11b20:	bl	10cc4 <dcgettext@plt>
   11b24:	movw	r3, #33120	; 0x8160
   11b28:	movt	r3, #2
   11b2c:	mov	r2, r0
   11b30:	mov	r1, #1
   11b34:	ldr	r3, [r3]
   11b38:	mov	r0, r4
   11b3c:	bl	10dfc <__fprintf_chk@plt>
   11b40:	mov	r0, r6
   11b44:	bl	10d9c <exit@plt>
   11b48:	mov	r2, #5
   11b4c:	movw	r1, #25876	; 0x6514
   11b50:	movt	r1, #1
   11b54:	movw	r7, #33092	; 0x8144
   11b58:	movt	r7, #2
   11b5c:	bl	10cc4 <dcgettext@plt>
   11b60:	movw	r3, #33120	; 0x8160
   11b64:	movt	r3, #2
   11b68:	mov	r1, r0
   11b6c:	mov	r0, #1
   11b70:	ldr	r2, [r3]
   11b74:	bl	10de4 <__printf_chk@plt>
   11b78:	mov	r2, #5
   11b7c:	movw	r1, #25908	; 0x6534
   11b80:	movt	r1, #1
   11b84:	mov	r0, r6
   11b88:	bl	10cc4 <dcgettext@plt>
   11b8c:	ldr	r1, [r7]
   11b90:	bl	10c40 <fputs_unlocked@plt>
   11b94:	mov	r2, #5
   11b98:	movw	r1, #26184	; 0x6648
   11b9c:	movt	r1, #1
   11ba0:	mov	r0, r6
   11ba4:	bl	10cc4 <dcgettext@plt>
   11ba8:	ldr	r1, [r7]
   11bac:	bl	10c40 <fputs_unlocked@plt>
   11bb0:	mov	r2, #5
   11bb4:	movw	r1, #26260	; 0x6694
   11bb8:	movt	r1, #1
   11bbc:	mov	r0, r6
   11bc0:	bl	10cc4 <dcgettext@plt>
   11bc4:	ldr	r1, [r7]
   11bc8:	bl	10c40 <fputs_unlocked@plt>
   11bcc:	mov	r2, #5
   11bd0:	movw	r1, #26312	; 0x66c8
   11bd4:	movt	r1, #1
   11bd8:	mov	r0, r6
   11bdc:	bl	10cc4 <dcgettext@plt>
   11be0:	ldr	r1, [r7]
   11be4:	bl	10c40 <fputs_unlocked@plt>
   11be8:	mov	r2, #5
   11bec:	movw	r1, #26392	; 0x6718
   11bf0:	movt	r1, #1
   11bf4:	mov	r0, r6
   11bf8:	bl	10cc4 <dcgettext@plt>
   11bfc:	ldr	r1, [r7]
   11c00:	bl	10c40 <fputs_unlocked@plt>
   11c04:	mov	r2, #5
   11c08:	movw	r1, #26504	; 0x6788
   11c0c:	movt	r1, #1
   11c10:	mov	r0, r6
   11c14:	bl	10cc4 <dcgettext@plt>
   11c18:	ldr	r1, [r7]
   11c1c:	bl	10c40 <fputs_unlocked@plt>
   11c20:	mov	r2, #5
   11c24:	movw	r1, #26552	; 0x67b8
   11c28:	movt	r1, #1
   11c2c:	mov	r0, r6
   11c30:	bl	10cc4 <dcgettext@plt>
   11c34:	ldr	r1, [r7]
   11c38:	bl	10c40 <fputs_unlocked@plt>
   11c3c:	mov	r2, #5
   11c40:	movw	r1, #26608	; 0x67f0
   11c44:	movt	r1, #1
   11c48:	mov	r0, r6
   11c4c:	bl	10cc4 <dcgettext@plt>
   11c50:	ldr	r1, [r7]
   11c54:	bl	10c40 <fputs_unlocked@plt>
   11c58:	mov	r2, #5
   11c5c:	movw	r1, #26820	; 0x68c4
   11c60:	movt	r1, #1
   11c64:	mov	r0, r6
   11c68:	bl	10cc4 <dcgettext@plt>
   11c6c:	ldr	r1, [r7]
   11c70:	bl	10c40 <fputs_unlocked@plt>
   11c74:	movw	lr, #25656	; 0x6438
   11c78:	movt	lr, #1
   11c7c:	ldr	ip, [lr]
   11c80:	ldr	r4, [lr, #4]
   11c84:	ldrd	r8, [lr, #8]
   11c88:	subs	r1, ip, #0
   11c8c:	str	ip, [sp]
   11c90:	ldrd	r2, [lr, #16]
   11c94:	str	r4, [sp, #4]
   11c98:	ldrd	r4, [lr, #24]
   11c9c:	strd	r8, [sp, #8]
   11ca0:	ldrd	r8, [lr, #32]
   11ca4:	strd	r2, [sp, #16]
   11ca8:	ldrd	r2, [lr, #40]	; 0x28
   11cac:	strd	r4, [sp, #24]
   11cb0:	ldrd	r4, [lr, #48]	; 0x30
   11cb4:	strd	r8, [sp, #32]
   11cb8:	strd	r2, [sp, #40]	; 0x28
   11cbc:	strd	r4, [sp, #48]	; 0x30
   11cc0:	movwne	r5, #25824	; 0x64e0
   11cc4:	mov	r4, sp
   11cc8:	movtne	r5, #1
   11ccc:	bne	11dc4 <__assert_fail@plt+0xf38>
   11cd0:	ldr	r4, [r4, #4]
   11cd4:	movw	r1, #27012	; 0x6984
   11cd8:	movt	r1, #1
   11cdc:	mov	r2, #5
   11ce0:	cmp	r4, #0
   11ce4:	beq	11dd8 <__assert_fail@plt+0xf4c>
   11ce8:	mov	r0, #0
   11cec:	bl	10cc4 <dcgettext@plt>
   11cf0:	mov	r1, r0
   11cf4:	movw	r3, #27036	; 0x699c
   11cf8:	movt	r3, #1
   11cfc:	movw	r2, #27076	; 0x69c4
   11d00:	movt	r2, #1
   11d04:	mov	r0, #1
   11d08:	bl	10de4 <__printf_chk@plt>
   11d0c:	mov	r1, #0
   11d10:	mov	r0, #5
   11d14:	bl	10e20 <setlocale@plt>
   11d18:	cmp	r0, #0
   11d1c:	movweq	r5, #25824	; 0x64e0
   11d20:	movteq	r5, #1
   11d24:	beq	11d48 <__assert_fail@plt+0xebc>
   11d28:	movw	r1, #27092	; 0x69d4
   11d2c:	movt	r1, #1
   11d30:	mov	r2, #3
   11d34:	movw	r5, #25824	; 0x64e0
   11d38:	movt	r5, #1
   11d3c:	bl	10e68 <strncmp@plt>
   11d40:	cmp	r0, #0
   11d44:	bne	11e90 <__assert_fail@plt+0x1004>
   11d48:	mov	r2, #5
   11d4c:	movw	r1, #27168	; 0x6a20
   11d50:	movt	r1, #1
   11d54:	mov	r0, #0
   11d58:	bl	10cc4 <dcgettext@plt>
   11d5c:	mov	r1, r0
   11d60:	movw	r3, #25824	; 0x64e0
   11d64:	movt	r3, #1
   11d68:	movw	r2, #27036	; 0x699c
   11d6c:	movt	r2, #1
   11d70:	mov	r0, #1
   11d74:	bl	10de4 <__printf_chk@plt>
   11d78:	mov	r2, #5
   11d7c:	movw	r1, #27196	; 0x6a3c
   11d80:	movt	r1, #1
   11d84:	mov	r0, #0
   11d88:	bl	10cc4 <dcgettext@plt>
   11d8c:	movw	r2, #27832	; 0x6cb8
   11d90:	movt	r2, #1
   11d94:	cmp	r4, r5
   11d98:	movw	r3, #25904	; 0x6530
   11d9c:	movt	r3, #1
   11da0:	mov	r1, r0
   11da4:	moveq	r3, r2
   11da8:	mov	r2, r4
   11dac:	mov	r0, #1
   11db0:	bl	10de4 <__printf_chk@plt>
   11db4:	b	11b40 <__assert_fail@plt+0xcb4>
   11db8:	ldr	r1, [r4, #8]!
   11dbc:	cmp	r1, #0
   11dc0:	beq	11cd0 <__assert_fail@plt+0xe44>
   11dc4:	mov	r0, r5
   11dc8:	bl	10c58 <strcmp@plt>
   11dcc:	cmp	r0, #0
   11dd0:	bne	11db8 <__assert_fail@plt+0xf2c>
   11dd4:	b	11cd0 <__assert_fail@plt+0xe44>
   11dd8:	mov	r0, r4
   11ddc:	bl	10cc4 <dcgettext@plt>
   11de0:	mov	r1, r0
   11de4:	movw	r3, #27036	; 0x699c
   11de8:	movt	r3, #1
   11dec:	movw	r2, #27076	; 0x69c4
   11df0:	movt	r2, #1
   11df4:	mov	r0, #1
   11df8:	bl	10de4 <__printf_chk@plt>
   11dfc:	mov	r1, r4
   11e00:	mov	r0, #5
   11e04:	bl	10e20 <setlocale@plt>
   11e08:	cmp	r0, #0
   11e0c:	beq	11e28 <__assert_fail@plt+0xf9c>
   11e10:	movw	r1, #27092	; 0x69d4
   11e14:	movt	r1, #1
   11e18:	mov	r2, #3
   11e1c:	bl	10e68 <strncmp@plt>
   11e20:	cmp	r0, #0
   11e24:	bne	11e84 <__assert_fail@plt+0xff8>
   11e28:	mov	r2, #5
   11e2c:	movw	r1, #27168	; 0x6a20
   11e30:	movt	r1, #1
   11e34:	mov	r0, #0
   11e38:	bl	10cc4 <dcgettext@plt>
   11e3c:	mov	r1, r0
   11e40:	movw	r3, #25824	; 0x64e0
   11e44:	movt	r3, #1
   11e48:	movw	r2, #27036	; 0x699c
   11e4c:	movt	r2, #1
   11e50:	mov	r0, #1
   11e54:	bl	10de4 <__printf_chk@plt>
   11e58:	movw	r1, #27196	; 0x6a3c
   11e5c:	movt	r1, #1
   11e60:	mov	r2, #5
   11e64:	mov	r0, #0
   11e68:	bl	10cc4 <dcgettext@plt>
   11e6c:	movw	r4, #25824	; 0x64e0
   11e70:	movt	r4, #1
   11e74:	movw	r3, #27832	; 0x6cb8
   11e78:	movt	r3, #1
   11e7c:	mov	r1, r0
   11e80:	b	11da8 <__assert_fail@plt+0xf1c>
   11e84:	movw	r5, #25824	; 0x64e0
   11e88:	movt	r5, #1
   11e8c:	mov	r4, r5
   11e90:	mov	r2, #5
   11e94:	movw	r1, #27096	; 0x69d8
   11e98:	movt	r1, #1
   11e9c:	mov	r0, #0
   11ea0:	bl	10cc4 <dcgettext@plt>
   11ea4:	ldr	r1, [r7]
   11ea8:	bl	10c40 <fputs_unlocked@plt>
   11eac:	b	11d48 <__assert_fail@plt+0xebc>
   11eb0:	movw	r3, #33112	; 0x8158
   11eb4:	movt	r3, #2
   11eb8:	str	r0, [r3]
   11ebc:	bx	lr
   11ec0:	movw	r3, #33112	; 0x8158
   11ec4:	movt	r3, #2
   11ec8:	strb	r0, [r3, #4]
   11ecc:	bx	lr
   11ed0:	movw	r3, #33092	; 0x8144
   11ed4:	movt	r3, #2
   11ed8:	strd	r4, [sp, #-16]!
   11edc:	ldr	r0, [r3]
   11ee0:	str	r6, [sp, #8]
   11ee4:	str	lr, [sp, #12]
   11ee8:	sub	sp, sp, #8
   11eec:	bl	15cc8 <__assert_fail@plt+0x4e3c>
   11ef0:	cmp	r0, #0
   11ef4:	beq	11f20 <__assert_fail@plt+0x1094>
   11ef8:	movw	r4, #33112	; 0x8158
   11efc:	movt	r4, #2
   11f00:	ldrb	r6, [r4, #4]
   11f04:	bl	10dc0 <__errno_location@plt>
   11f08:	mov	r5, r0
   11f0c:	cmp	r6, #0
   11f10:	beq	11f4c <__assert_fail@plt+0x10c0>
   11f14:	ldr	r3, [r0]
   11f18:	cmp	r3, #32
   11f1c:	bne	11f4c <__assert_fail@plt+0x10c0>
   11f20:	movw	r3, #33088	; 0x8140
   11f24:	movt	r3, #2
   11f28:	ldr	r0, [r3]
   11f2c:	bl	15cc8 <__assert_fail@plt+0x4e3c>
   11f30:	cmp	r0, #0
   11f34:	bne	11f94 <__assert_fail@plt+0x1108>
   11f38:	add	sp, sp, #8
   11f3c:	ldrd	r4, [sp]
   11f40:	ldr	r6, [sp, #8]
   11f44:	add	sp, sp, #12
   11f48:	pop	{pc}		; (ldr pc, [sp], #4)
   11f4c:	movw	r1, #28008	; 0x6d68
   11f50:	movt	r1, #1
   11f54:	mov	r2, #5
   11f58:	mov	r0, #0
   11f5c:	bl	10cc4 <dcgettext@plt>
   11f60:	mov	r6, r0
   11f64:	ldr	r0, [r4]
   11f68:	cmp	r0, #0
   11f6c:	beq	11fa4 <__assert_fail@plt+0x1118>
   11f70:	ldr	r4, [r5]
   11f74:	bl	140c0 <__assert_fail@plt+0x3234>
   11f78:	mov	r3, r0
   11f7c:	movw	r2, #28020	; 0x6d74
   11f80:	movt	r2, #1
   11f84:	mov	r0, #0
   11f88:	str	r6, [sp]
   11f8c:	mov	r1, r4
   11f90:	bl	10d3c <error@plt>
   11f94:	movw	r3, #33000	; 0x80e8
   11f98:	movt	r3, #2
   11f9c:	ldr	r0, [r3]
   11fa0:	bl	10c7c <_exit@plt>
   11fa4:	mov	r3, r6
   11fa8:	movw	r2, #28024	; 0x6d78
   11fac:	movt	r2, #1
   11fb0:	ldr	r1, [r5]
   11fb4:	bl	10d3c <error@plt>
   11fb8:	b	11f94 <__assert_fail@plt+0x1108>
   11fbc:	strd	r4, [sp, #-16]!
   11fc0:	subs	r4, r0, #0
   11fc4:	str	r6, [sp, #8]
   11fc8:	str	lr, [sp, #12]
   11fcc:	beq	12064 <__assert_fail@plt+0x11d8>
   11fd0:	mov	r1, #47	; 0x2f
   11fd4:	bl	10e2c <strrchr@plt>
   11fd8:	subs	r5, r0, #0
   11fdc:	beq	1203c <__assert_fail@plt+0x11b0>
   11fe0:	add	r6, r5, #1
   11fe4:	sub	r3, r6, r4
   11fe8:	cmp	r3, #6
   11fec:	ble	1203c <__assert_fail@plt+0x11b0>
   11ff0:	movw	r1, #28084	; 0x6db4
   11ff4:	movt	r1, #1
   11ff8:	mov	r2, #7
   11ffc:	sub	r0, r5, #6
   12000:	bl	10e68 <strncmp@plt>
   12004:	cmp	r0, #0
   12008:	bne	1203c <__assert_fail@plt+0x11b0>
   1200c:	movw	r1, #28092	; 0x6dbc
   12010:	movt	r1, #1
   12014:	mov	r2, #3
   12018:	mov	r0, r6
   1201c:	bl	10e68 <strncmp@plt>
   12020:	cmp	r0, #0
   12024:	movne	r4, r6
   12028:	bne	1203c <__assert_fail@plt+0x11b0>
   1202c:	add	r4, r5, #4
   12030:	movw	r3, #33072	; 0x8130
   12034:	movt	r3, #2
   12038:	str	r4, [r3]
   1203c:	movw	r2, #33120	; 0x8160
   12040:	movt	r2, #2
   12044:	ldr	r6, [sp, #8]
   12048:	movw	r3, #33076	; 0x8134
   1204c:	movt	r3, #2
   12050:	str	r4, [r2]
   12054:	str	r4, [r3]
   12058:	ldrd	r4, [sp]
   1205c:	add	sp, sp, #12
   12060:	pop	{pc}		; (ldr pc, [sp], #4)
   12064:	movw	r3, #33088	; 0x8140
   12068:	movt	r3, #2
   1206c:	movw	r0, #28028	; 0x6d7c
   12070:	movt	r0, #1
   12074:	ldr	r3, [r3]
   12078:	mov	r2, #55	; 0x37
   1207c:	mov	r1, #1
   12080:	bl	10d00 <fwrite@plt>
   12084:	bl	10e74 <abort@plt>
   12088:	strd	r4, [sp, #-16]!
   1208c:	mov	r4, #0
   12090:	mov	r5, #0
   12094:	cmp	r1, #10
   12098:	str	r6, [sp, #8]
   1209c:	strd	r4, [r0]
   120a0:	strd	r4, [r0, #8]
   120a4:	str	lr, [sp, #12]
   120a8:	strd	r4, [r0, #16]
   120ac:	strd	r4, [r0, #24]
   120b0:	strd	r4, [r0, #32]
   120b4:	strd	r4, [r0, #40]	; 0x28
   120b8:	beq	120d0 <__assert_fail@plt+0x1244>
   120bc:	ldrd	r4, [sp]
   120c0:	str	r1, [r0]
   120c4:	ldr	r6, [sp, #8]
   120c8:	add	sp, sp, #12
   120cc:	pop	{pc}		; (ldr pc, [sp], #4)
   120d0:	bl	10e74 <abort@plt>
   120d4:	mov	r2, #5
   120d8:	strd	r4, [sp, #-16]!
   120dc:	mov	r5, r0
   120e0:	str	r6, [sp, #8]
   120e4:	mov	r6, r1
   120e8:	mov	r1, r0
   120ec:	mov	r0, #0
   120f0:	str	lr, [sp, #12]
   120f4:	bl	10cc4 <dcgettext@plt>
   120f8:	cmp	r5, r0
   120fc:	mov	r4, r0
   12100:	beq	12118 <__assert_fail@plt+0x128c>
   12104:	mov	r0, r4
   12108:	ldrd	r4, [sp]
   1210c:	ldr	r6, [sp, #8]
   12110:	add	sp, sp, #12
   12114:	pop	{pc}		; (ldr pc, [sp], #4)
   12118:	bl	15f94 <__assert_fail@plt+0x5108>
   1211c:	ldrb	r3, [r0]
   12120:	bic	r3, r3, #32
   12124:	cmp	r3, #85	; 0x55
   12128:	bne	12190 <__assert_fail@plt+0x1304>
   1212c:	ldrb	r3, [r0, #1]
   12130:	bic	r3, r3, #32
   12134:	cmp	r3, #84	; 0x54
   12138:	bne	12210 <__assert_fail@plt+0x1384>
   1213c:	ldrb	r3, [r0, #2]
   12140:	bic	r3, r3, #32
   12144:	cmp	r3, #70	; 0x46
   12148:	bne	12210 <__assert_fail@plt+0x1384>
   1214c:	ldrb	r3, [r0, #3]
   12150:	cmp	r3, #45	; 0x2d
   12154:	bne	12210 <__assert_fail@plt+0x1384>
   12158:	ldrb	r3, [r0, #4]
   1215c:	cmp	r3, #56	; 0x38
   12160:	bne	12210 <__assert_fail@plt+0x1384>
   12164:	ldrb	r3, [r0, #5]
   12168:	cmp	r3, #0
   1216c:	bne	12210 <__assert_fail@plt+0x1384>
   12170:	ldrb	r2, [r4]
   12174:	movw	r3, #28184	; 0x6e18
   12178:	movt	r3, #1
   1217c:	movw	r4, #28196	; 0x6e24
   12180:	movt	r4, #1
   12184:	cmp	r2, #96	; 0x60
   12188:	movne	r4, r3
   1218c:	b	12104 <__assert_fail@plt+0x1278>
   12190:	cmp	r3, #71	; 0x47
   12194:	bne	12210 <__assert_fail@plt+0x1384>
   12198:	ldrb	r3, [r0, #1]
   1219c:	bic	r3, r3, #32
   121a0:	cmp	r3, #66	; 0x42
   121a4:	bne	12210 <__assert_fail@plt+0x1384>
   121a8:	ldrb	r3, [r0, #2]
   121ac:	cmp	r3, #49	; 0x31
   121b0:	bne	12210 <__assert_fail@plt+0x1384>
   121b4:	ldrb	r3, [r0, #3]
   121b8:	cmp	r3, #56	; 0x38
   121bc:	bne	12210 <__assert_fail@plt+0x1384>
   121c0:	ldrb	r3, [r0, #4]
   121c4:	cmp	r3, #48	; 0x30
   121c8:	bne	12210 <__assert_fail@plt+0x1384>
   121cc:	ldrb	r3, [r0, #5]
   121d0:	cmp	r3, #51	; 0x33
   121d4:	bne	12210 <__assert_fail@plt+0x1384>
   121d8:	ldrb	r3, [r0, #6]
   121dc:	cmp	r3, #48	; 0x30
   121e0:	bne	12210 <__assert_fail@plt+0x1384>
   121e4:	ldrb	r3, [r0, #7]
   121e8:	cmp	r3, #0
   121ec:	bne	12210 <__assert_fail@plt+0x1384>
   121f0:	ldrb	r2, [r4]
   121f4:	movw	r3, #28188	; 0x6e1c
   121f8:	movt	r3, #1
   121fc:	movw	r4, #28192	; 0x6e20
   12200:	movt	r4, #1
   12204:	cmp	r2, #96	; 0x60
   12208:	movne	r4, r3
   1220c:	b	12104 <__assert_fail@plt+0x1278>
   12210:	movw	r3, #28200	; 0x6e28
   12214:	movt	r3, #1
   12218:	cmp	r6, #9
   1221c:	movw	r4, #28180	; 0x6e14
   12220:	movt	r4, #1
   12224:	movne	r4, r3
   12228:	b	12104 <__assert_fail@plt+0x1278>
   1222c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12230:	strd	r6, [sp, #8]
   12234:	strd	r8, [sp, #16]
   12238:	strd	sl, [sp, #24]
   1223c:	mov	fp, r0
   12240:	mov	sl, r1
   12244:	str	lr, [sp, #32]
   12248:	sub	sp, sp, #116	; 0x74
   1224c:	ldr	r8, [sp, #152]	; 0x98
   12250:	str	r3, [sp, #28]
   12254:	ldr	r3, [sp, #156]	; 0x9c
   12258:	str	r2, [sp, #32]
   1225c:	and	r4, r3, #2
   12260:	ubfx	r3, r3, #1, #1
   12264:	str	r3, [sp, #44]	; 0x2c
   12268:	bl	10d18 <__ctype_get_mb_cur_max@plt>
   1226c:	str	r0, [sp, #64]	; 0x40
   12270:	cmp	r8, #10
   12274:	ldrls	pc, [pc, r8, lsl #2]
   12278:	b	139e8 <__assert_fail@plt+0x2b5c>
   1227c:	andeq	r2, r1, r0, lsl #13
   12280:	andeq	r2, r1, ip, lsl r7
   12284:	strdeq	r2, [r1], -r8
   12288:	andeq	r2, r1, ip, lsr r7
   1228c:	andeq	r2, r1, r4, ror #11
   12290:	andeq	r2, r1, r0, lsr r6
   12294:			; <UNDEFINED> instruction: 0x000126b0
   12298:	andeq	r2, r1, ip, ror #13
   1229c:	andeq	r2, r1, r8, lsr #5
   122a0:	andeq	r2, r1, r8, lsr #5
   122a4:	andeq	r2, r1, r8, lsr #5
   122a8:	cmp	r8, #10
   122ac:	beq	122d8 <__assert_fail@plt+0x144c>
   122b0:	mov	r1, r8
   122b4:	movw	r0, #28204	; 0x6e2c
   122b8:	movt	r0, #1
   122bc:	bl	120d4 <__assert_fail@plt+0x1248>
   122c0:	mov	r1, r8
   122c4:	str	r0, [sp, #164]	; 0xa4
   122c8:	movw	r0, #28200	; 0x6e28
   122cc:	movt	r0, #1
   122d0:	bl	120d4 <__assert_fail@plt+0x1248>
   122d4:	str	r0, [sp, #168]	; 0xa8
   122d8:	cmp	r4, #0
   122dc:	movne	r4, #0
   122e0:	beq	136c4 <__assert_fail@plt+0x2838>
   122e4:	mov	r3, #1
   122e8:	mov	r5, #0
   122ec:	ldr	r0, [sp, #168]	; 0xa8
   122f0:	str	r3, [sp, #36]	; 0x24
   122f4:	str	r3, [sp, #40]	; 0x28
   122f8:	str	r5, [sp, #68]	; 0x44
   122fc:	bl	10da8 <strlen@plt>
   12300:	ldr	r3, [sp, #168]	; 0xa8
   12304:	str	r5, [sp, #48]	; 0x30
   12308:	str	r0, [sp, #56]	; 0x38
   1230c:	str	r3, [sp, #60]	; 0x3c
   12310:	str	r5, [sp, #72]	; 0x48
   12314:	str	r8, [sp, #152]	; 0x98
   12318:	mov	r8, fp
   1231c:	mov	r9, #0
   12320:	ldr	fp, [sp, #152]	; 0x98
   12324:	ldr	r3, [sp, #28]
   12328:	cmn	r3, #1
   1232c:	beq	1288c <__assert_fail@plt+0x1a00>
   12330:	ldr	r3, [sp, #28]
   12334:	subs	r6, r3, r9
   12338:	movne	r6, #1
   1233c:	cmp	r6, #0
   12340:	beq	128a4 <__assert_fail@plt+0x1a18>
   12344:	ldr	r0, [sp, #32]
   12348:	ldr	r7, [sp, #40]	; 0x28
   1234c:	add	r3, r0, r9
   12350:	cmp	fp, #2
   12354:	moveq	r7, #0
   12358:	andne	r7, r7, #1
   1235c:	str	r3, [sp, #52]	; 0x34
   12360:	cmp	r7, #0
   12364:	beq	12d40 <__assert_fail@plt+0x1eb4>
   12368:	ldr	r2, [sp, #56]	; 0x38
   1236c:	cmp	r2, #0
   12370:	beq	12fdc <__assert_fail@plt+0x2150>
   12374:	ldr	r1, [sp, #28]
   12378:	cmp	r2, #1
   1237c:	mov	r3, r2
   12380:	movls	r3, #0
   12384:	movhi	r3, #1
   12388:	add	r5, r9, r2
   1238c:	cmn	r1, #1
   12390:	movne	r3, #0
   12394:	cmp	r3, #0
   12398:	beq	123a4 <__assert_fail@plt+0x1518>
   1239c:	bl	10da8 <strlen@plt>
   123a0:	str	r0, [sp, #28]
   123a4:	ldr	r3, [sp, #28]
   123a8:	cmp	r5, r3
   123ac:	bhi	12fdc <__assert_fail@plt+0x2150>
   123b0:	ldr	r0, [sp, #52]	; 0x34
   123b4:	ldr	r2, [sp, #56]	; 0x38
   123b8:	ldr	r1, [sp, #60]	; 0x3c
   123bc:	bl	10cac <memcmp@plt>
   123c0:	cmp	r0, #0
   123c4:	bne	12fdc <__assert_fail@plt+0x2150>
   123c8:	ldr	r3, [sp, #44]	; 0x2c
   123cc:	cmp	r3, #0
   123d0:	bne	1390c <__assert_fail@plt+0x2a80>
   123d4:	ldr	r3, [sp, #52]	; 0x34
   123d8:	ldrb	r5, [r3]
   123dc:	cmp	r5, #126	; 0x7e
   123e0:	ldrls	pc, [pc, r5, lsl #2]
   123e4:	b	12c9c <__assert_fail@plt+0x1e10>
   123e8:	andeq	r2, r1, r0, lsr #23
   123ec:	muleq	r1, ip, ip
   123f0:	muleq	r1, ip, ip
   123f4:	muleq	r1, ip, ip
   123f8:	muleq	r1, ip, ip
   123fc:	muleq	r1, ip, ip
   12400:	muleq	r1, ip, ip
   12404:	andeq	r2, r1, r4, ror fp
   12408:	andeq	r2, r1, ip, ror #22
   1240c:			; <UNDEFINED> instruction: 0x00012ab4
   12410:	andeq	r2, r1, r0, ror #22
   12414:	andeq	r2, r1, ip, lsr #21
   12418:	andeq	r2, r1, ip, lsr fp
   1241c:	andeq	r2, r1, r8, lsl #23
   12420:	muleq	r1, ip, ip
   12424:	muleq	r1, ip, ip
   12428:	muleq	r1, ip, ip
   1242c:	muleq	r1, ip, ip
   12430:	muleq	r1, ip, ip
   12434:	muleq	r1, ip, ip
   12438:	muleq	r1, ip, ip
   1243c:	muleq	r1, ip, ip
   12440:	muleq	r1, ip, ip
   12444:	muleq	r1, ip, ip
   12448:	muleq	r1, ip, ip
   1244c:	muleq	r1, ip, ip
   12450:	muleq	r1, ip, ip
   12454:	muleq	r1, ip, ip
   12458:	muleq	r1, ip, ip
   1245c:	muleq	r1, ip, ip
   12460:	muleq	r1, ip, ip
   12464:	muleq	r1, ip, ip
   12468:	andeq	r2, r1, r8, ror ip
   1246c:	andeq	r2, r1, r0, lsl #23
   12470:	andeq	r2, r1, r0, lsl #23
   12474:	andeq	r2, r1, ip, asr ip
   12478:	andeq	r2, r1, r0, lsl #23
   1247c:	muleq	r1, r0, ip
   12480:	andeq	r2, r1, r0, lsl #23
   12484:	ldrdeq	r2, [r1], -ip
   12488:	andeq	r2, r1, r0, lsl #23
   1248c:	andeq	r2, r1, r0, lsl #23
   12490:	andeq	r2, r1, r0, lsl #23
   12494:	muleq	r1, r0, ip
   12498:	muleq	r1, r0, ip
   1249c:	muleq	r1, r0, ip
   124a0:	muleq	r1, r0, ip
   124a4:	muleq	r1, r0, ip
   124a8:	muleq	r1, r0, ip
   124ac:	muleq	r1, r0, ip
   124b0:	muleq	r1, r0, ip
   124b4:	muleq	r1, r0, ip
   124b8:	muleq	r1, r0, ip
   124bc:	muleq	r1, r0, ip
   124c0:	muleq	r1, r0, ip
   124c4:	muleq	r1, r0, ip
   124c8:	muleq	r1, r0, ip
   124cc:	muleq	r1, r0, ip
   124d0:	muleq	r1, r0, ip
   124d4:	andeq	r2, r1, r0, lsl #23
   124d8:	andeq	r2, r1, r0, lsl #23
   124dc:	andeq	r2, r1, r0, lsl #23
   124e0:	andeq	r2, r1, r0, lsl #23
   124e4:			; <UNDEFINED> instruction: 0x000129b0
   124e8:	muleq	r1, ip, ip
   124ec:	muleq	r1, r0, ip
   124f0:	muleq	r1, r0, ip
   124f4:	muleq	r1, r0, ip
   124f8:	muleq	r1, r0, ip
   124fc:	muleq	r1, r0, ip
   12500:	muleq	r1, r0, ip
   12504:	muleq	r1, r0, ip
   12508:	muleq	r1, r0, ip
   1250c:	muleq	r1, r0, ip
   12510:	muleq	r1, r0, ip
   12514:	muleq	r1, r0, ip
   12518:	muleq	r1, r0, ip
   1251c:	muleq	r1, r0, ip
   12520:	muleq	r1, r0, ip
   12524:	muleq	r1, r0, ip
   12528:	muleq	r1, r0, ip
   1252c:	muleq	r1, r0, ip
   12530:	muleq	r1, r0, ip
   12534:	muleq	r1, r0, ip
   12538:	muleq	r1, r0, ip
   1253c:	muleq	r1, r0, ip
   12540:	muleq	r1, r0, ip
   12544:	muleq	r1, r0, ip
   12548:	muleq	r1, r0, ip
   1254c:	muleq	r1, r0, ip
   12550:	muleq	r1, r0, ip
   12554:	andeq	r2, r1, r0, lsl #23
   12558:	andeq	r2, r1, r8, asr r9
   1255c:	muleq	r1, r0, ip
   12560:	andeq	r2, r1, r0, lsl #23
   12564:	muleq	r1, r0, ip
   12568:	andeq	r2, r1, r0, lsl #23
   1256c:	muleq	r1, r0, ip
   12570:	muleq	r1, r0, ip
   12574:	muleq	r1, r0, ip
   12578:	muleq	r1, r0, ip
   1257c:	muleq	r1, r0, ip
   12580:	muleq	r1, r0, ip
   12584:	muleq	r1, r0, ip
   12588:	muleq	r1, r0, ip
   1258c:	muleq	r1, r0, ip
   12590:	muleq	r1, r0, ip
   12594:	muleq	r1, r0, ip
   12598:	muleq	r1, r0, ip
   1259c:	muleq	r1, r0, ip
   125a0:	muleq	r1, r0, ip
   125a4:	muleq	r1, r0, ip
   125a8:	muleq	r1, r0, ip
   125ac:	muleq	r1, r0, ip
   125b0:	muleq	r1, r0, ip
   125b4:	muleq	r1, r0, ip
   125b8:	muleq	r1, r0, ip
   125bc:	muleq	r1, r0, ip
   125c0:	muleq	r1, r0, ip
   125c4:	muleq	r1, r0, ip
   125c8:	muleq	r1, r0, ip
   125cc:	muleq	r1, r0, ip
   125d0:	muleq	r1, r0, ip
   125d4:	andeq	r2, r1, ip, ror r7
   125d8:	andeq	r2, r1, r0, lsl #23
   125dc:	andeq	r2, r1, ip, ror r7
   125e0:	andeq	r2, r1, ip, asr ip
   125e4:	cmp	r4, #0
   125e8:	moveq	r3, #1
   125ec:	streq	r3, [sp, #40]	; 0x28
   125f0:	beq	12d04 <__assert_fail@plt+0x1e78>
   125f4:	mov	r3, #0
   125f8:	mov	r2, #1
   125fc:	mov	r4, r3
   12600:	str	r2, [sp, #36]	; 0x24
   12604:	str	r2, [sp, #44]	; 0x2c
   12608:	str	r2, [sp, #56]	; 0x38
   1260c:	str	r3, [sp, #68]	; 0x44
   12610:	movw	r3, #28200	; 0x6e28
   12614:	movt	r3, #1
   12618:	str	r4, [sp, #40]	; 0x28
   1261c:	mov	r8, #2
   12620:	str	r4, [sp, #48]	; 0x30
   12624:	str	r3, [sp, #60]	; 0x3c
   12628:	str	r4, [sp, #72]	; 0x48
   1262c:	b	12314 <__assert_fail@plt+0x1488>
   12630:	cmp	r4, #0
   12634:	bne	13880 <__assert_fail@plt+0x29f4>
   12638:	cmp	sl, #0
   1263c:	beq	13640 <__assert_fail@plt+0x27b4>
   12640:	mov	r3, #34	; 0x22
   12644:	mov	r1, r4
   12648:	mov	r2, #1
   1264c:	strb	r3, [fp]
   12650:	movw	r3, #28180	; 0x6e14
   12654:	movt	r3, #1
   12658:	mov	r4, r2
   1265c:	str	r2, [sp, #36]	; 0x24
   12660:	str	r2, [sp, #40]	; 0x28
   12664:	str	r1, [sp, #44]	; 0x2c
   12668:	str	r1, [sp, #48]	; 0x30
   1266c:	str	r2, [sp, #56]	; 0x38
   12670:	str	r3, [sp, #60]	; 0x3c
   12674:	str	r1, [sp, #68]	; 0x44
   12678:	str	r1, [sp, #72]	; 0x48
   1267c:	b	12314 <__assert_fail@plt+0x1488>
   12680:	mov	r3, #0
   12684:	mov	r4, r8
   12688:	str	r3, [sp, #40]	; 0x28
   1268c:	str	r3, [sp, #44]	; 0x2c
   12690:	str	r3, [sp, #48]	; 0x30
   12694:	str	r8, [sp, #56]	; 0x38
   12698:	str	r3, [sp, #60]	; 0x3c
   1269c:	str	r3, [sp, #68]	; 0x44
   126a0:	mov	r3, #1
   126a4:	str	r3, [sp, #36]	; 0x24
   126a8:	str	r8, [sp, #72]	; 0x48
   126ac:	b	12314 <__assert_fail@plt+0x1488>
   126b0:	mov	r3, #1
   126b4:	mov	r2, #0
   126b8:	mov	r4, r2
   126bc:	mov	r8, #5
   126c0:	str	r3, [sp, #36]	; 0x24
   126c4:	str	r3, [sp, #40]	; 0x28
   126c8:	str	r3, [sp, #44]	; 0x2c
   126cc:	str	r2, [sp, #48]	; 0x30
   126d0:	str	r3, [sp, #56]	; 0x38
   126d4:	movw	r3, #28180	; 0x6e14
   126d8:	movt	r3, #1
   126dc:	str	r3, [sp, #60]	; 0x3c
   126e0:	str	r2, [sp, #68]	; 0x44
   126e4:	str	r2, [sp, #72]	; 0x48
   126e8:	b	12314 <__assert_fail@plt+0x1488>
   126ec:	mov	r3, #0
   126f0:	mov	r2, #1
   126f4:	mov	r4, r3
   126f8:	str	r2, [sp, #36]	; 0x24
   126fc:	str	r2, [sp, #40]	; 0x28
   12700:	str	r3, [sp, #44]	; 0x2c
   12704:	str	r3, [sp, #48]	; 0x30
   12708:	str	r3, [sp, #56]	; 0x38
   1270c:	str	r3, [sp, #60]	; 0x3c
   12710:	str	r3, [sp, #68]	; 0x44
   12714:	str	r3, [sp, #72]	; 0x48
   12718:	b	12314 <__assert_fail@plt+0x1488>
   1271c:	mov	r2, #1
   12720:	mov	r3, #0
   12724:	mov	r4, r3
   12728:	str	r2, [sp, #36]	; 0x24
   1272c:	str	r2, [sp, #44]	; 0x2c
   12730:	str	r8, [sp, #56]	; 0x38
   12734:	str	r3, [sp, #68]	; 0x44
   12738:	b	12610 <__assert_fail@plt+0x1784>
   1273c:	mov	r3, #1
   12740:	mov	r2, #0
   12744:	mov	r4, r2
   12748:	mov	r8, #2
   1274c:	str	r3, [sp, #36]	; 0x24
   12750:	str	r3, [sp, #40]	; 0x28
   12754:	str	r3, [sp, #44]	; 0x2c
   12758:	str	r2, [sp, #48]	; 0x30
   1275c:	str	r3, [sp, #56]	; 0x38
   12760:	movw	r3, #28200	; 0x6e28
   12764:	movt	r3, #1
   12768:	str	r3, [sp, #60]	; 0x3c
   1276c:	str	r2, [sp, #68]	; 0x44
   12770:	str	r2, [sp, #72]	; 0x48
   12774:	b	12314 <__assert_fail@plt+0x1488>
   12778:	mov	r7, #0
   1277c:	ldr	r3, [sp, #28]
   12780:	cmn	r3, #1
   12784:	beq	1325c <__assert_fail@plt+0x23d0>
   12788:	ldr	r3, [sp, #28]
   1278c:	subs	r2, r3, #1
   12790:	movne	r2, #1
   12794:	sub	r3, fp, #2
   12798:	cmp	r2, #0
   1279c:	clz	r3, r3
   127a0:	lsr	r3, r3, #5
   127a4:	bne	127b0 <__assert_fail@plt+0x1924>
   127a8:	cmp	r9, #0
   127ac:	beq	12fbc <__assert_fail@plt+0x2130>
   127b0:	mov	r6, #0
   127b4:	ldr	r2, [sp, #40]	; 0x28
   127b8:	eor	r2, r2, #1
   127bc:	orrs	r3, r3, r2
   127c0:	bne	12998 <__assert_fail@plt+0x1b0c>
   127c4:	ldr	r2, [sp, #160]	; 0xa0
   127c8:	cmp	r2, #0
   127cc:	beq	127ec <__assert_fail@plt+0x1960>
   127d0:	ldr	r0, [sp, #160]	; 0xa0
   127d4:	ubfx	r1, r5, #5, #8
   127d8:	and	r2, r5, #31
   127dc:	ldr	r1, [r0, r1, lsl #2]
   127e0:	lsr	r2, r1, r2
   127e4:	tst	r2, #1
   127e8:	bne	127f4 <__assert_fail@plt+0x1968>
   127ec:	cmp	r7, #0
   127f0:	beq	12a64 <__assert_fail@plt+0x1bd8>
   127f4:	ldr	r2, [sp, #44]	; 0x2c
   127f8:	sub	r3, fp, #2
   127fc:	clz	r3, r3
   12800:	lsr	r3, r3, #5
   12804:	cmp	r2, #0
   12808:	bne	135b0 <__assert_fail@plt+0x2724>
   1280c:	ldr	r2, [sp, #48]	; 0x30
   12810:	eor	r2, r2, #1
   12814:	ands	r3, r3, r2
   12818:	beq	12850 <__assert_fail@plt+0x19c4>
   1281c:	cmp	sl, r4
   12820:	str	r3, [sp, #48]	; 0x30
   12824:	movhi	r2, #39	; 0x27
   12828:	strbhi	r2, [r8, r4]
   1282c:	add	r2, r4, #1
   12830:	cmp	sl, r2
   12834:	movhi	r1, #36	; 0x24
   12838:	strbhi	r1, [r8, r2]
   1283c:	add	r2, r4, #2
   12840:	add	r4, r4, #3
   12844:	cmp	sl, r2
   12848:	movhi	r1, #39	; 0x27
   1284c:	strbhi	r1, [r8, r2]
   12850:	cmp	r4, sl
   12854:	add	r9, r9, #1
   12858:	movcc	r3, #92	; 0x5c
   1285c:	strbcc	r3, [r8, r4]
   12860:	add	r4, r4, #1
   12864:	cmp	r4, sl
   12868:	ldr	r3, [sp, #36]	; 0x24
   1286c:	strbcc	r5, [r8, r4]
   12870:	cmp	r6, #0
   12874:	add	r4, r4, #1
   12878:	moveq	r3, #0
   1287c:	str	r3, [sp, #36]	; 0x24
   12880:	ldr	r3, [sp, #28]
   12884:	cmn	r3, #1
   12888:	bne	12330 <__assert_fail@plt+0x14a4>
   1288c:	ldr	r3, [sp, #32]
   12890:	ldrb	r6, [r3, r9]
   12894:	adds	r6, r6, #0
   12898:	movne	r6, #1
   1289c:	cmp	r6, #0
   128a0:	bne	12344 <__assert_fail@plt+0x14b8>
   128a4:	str	fp, [sp, #152]	; 0x98
   128a8:	mov	fp, r8
   128ac:	cmp	r4, #0
   128b0:	ldr	r1, [sp, #44]	; 0x2c
   128b4:	movne	r3, #0
   128b8:	ldr	r8, [sp, #152]	; 0x98
   128bc:	sub	r2, r8, #2
   128c0:	clz	r2, r2
   128c4:	lsr	r2, r2, #5
   128c8:	andeq	r3, r2, r1
   128cc:	cmp	r3, #0
   128d0:	bne	1398c <__assert_fail@plt+0x2b00>
   128d4:	eor	r3, r1, #1
   128d8:	ands	r2, r2, r3
   128dc:	beq	138b8 <__assert_fail@plt+0x2a2c>
   128e0:	ldr	r3, [sp, #68]	; 0x44
   128e4:	cmp	r3, #0
   128e8:	beq	138bc <__assert_fail@plt+0x2a30>
   128ec:	ldr	r3, [sp, #36]	; 0x24
   128f0:	cmp	r3, #0
   128f4:	bne	13948 <__assert_fail@plt+0x2abc>
   128f8:	ldr	r3, [sp, #72]	; 0x48
   128fc:	adds	r3, r3, #0
   12900:	movne	r3, #1
   12904:	cmp	sl, #0
   12908:	movne	r3, #0
   1290c:	cmp	r3, #0
   12910:	ldreq	r2, [sp, #68]	; 0x44
   12914:	beq	138bc <__assert_fail@plt+0x2a30>
   12918:	ldr	r2, [sp, #72]	; 0x48
   1291c:	str	r3, [sp, #68]	; 0x44
   12920:	movw	r3, #28200	; 0x6e28
   12924:	movt	r3, #1
   12928:	mov	r1, #39	; 0x27
   1292c:	mov	r4, #1
   12930:	ldr	sl, [sp, #72]	; 0x48
   12934:	mov	r8, #2
   12938:	str	r3, [sp, #60]	; 0x3c
   1293c:	mov	r3, #0
   12940:	strb	r1, [fp]
   12944:	str	r3, [sp, #44]	; 0x2c
   12948:	str	r4, [sp, #56]	; 0x38
   1294c:	str	r2, [sp, #72]	; 0x48
   12950:	b	12314 <__assert_fail@plt+0x1488>
   12954:	mov	r7, #0
   12958:	cmp	fp, #2
   1295c:	beq	1323c <__assert_fail@plt+0x23b0>
   12960:	ldr	r2, [sp, #40]	; 0x28
   12964:	ldr	r3, [sp, #56]	; 0x38
   12968:	ldr	r1, [sp, #44]	; 0x2c
   1296c:	cmp	r3, #0
   12970:	moveq	r3, #0
   12974:	andne	r3, r2, r1
   12978:	cmp	r3, #0
   1297c:	moveq	r5, #92	; 0x5c
   12980:	moveq	r3, r5
   12984:	bne	13248 <__assert_fail@plt+0x23bc>
   12988:	ldr	r2, [sp, #40]	; 0x28
   1298c:	cmp	r2, #0
   12990:	bne	13684 <__assert_fail@plt+0x27f8>
   12994:	mov	r6, #0
   12998:	ldr	r3, [sp, #44]	; 0x2c
   1299c:	cmp	r3, #0
   129a0:	beq	13234 <__assert_fail@plt+0x23a8>
   129a4:	mov	r3, #0
   129a8:	b	127c4 <__assert_fail@plt+0x1938>
   129ac:	mov	r7, #0
   129b0:	cmp	fp, #2
   129b4:	beq	132ac <__assert_fail@plt+0x2420>
   129b8:	cmp	fp, #5
   129bc:	beq	13270 <__assert_fail@plt+0x23e4>
   129c0:	sub	r3, fp, #2
   129c4:	mov	r6, #0
   129c8:	clz	r3, r3
   129cc:	mov	r5, #63	; 0x3f
   129d0:	lsr	r3, r3, #5
   129d4:	b	127b4 <__assert_fail@plt+0x1928>
   129d8:	mov	r7, #0
   129dc:	cmp	fp, #2
   129e0:	movne	r3, #0
   129e4:	movne	r5, #39	; 0x27
   129e8:	strne	r6, [sp, #68]	; 0x44
   129ec:	bne	127b4 <__assert_fail@plt+0x1928>
   129f0:	ldr	r3, [sp, #44]	; 0x2c
   129f4:	cmp	r3, #0
   129f8:	bne	136b4 <__assert_fail@plt+0x2828>
   129fc:	ldr	r3, [sp, #72]	; 0x48
   12a00:	cmp	sl, #0
   12a04:	clz	r3, r3
   12a08:	lsr	r3, r3, #5
   12a0c:	moveq	r3, #0
   12a10:	cmp	r3, #0
   12a14:	bne	135e0 <__assert_fail@plt+0x2754>
   12a18:	cmp	sl, r4
   12a1c:	movhi	r3, #39	; 0x27
   12a20:	strbhi	r3, [r8, r4]
   12a24:	add	r3, r4, #1
   12a28:	cmp	sl, r3
   12a2c:	movhi	r2, #92	; 0x5c
   12a30:	strbhi	r2, [r8, r3]
   12a34:	add	r3, r4, #2
   12a38:	cmp	sl, r3
   12a3c:	bls	12a48 <__assert_fail@plt+0x1bbc>
   12a40:	mov	r2, #39	; 0x27
   12a44:	strb	r2, [r8, r3]
   12a48:	mov	r3, #0
   12a4c:	cmp	r7, #0
   12a50:	add	r4, r4, #3
   12a54:	mov	r5, #39	; 0x27
   12a58:	str	r3, [sp, #48]	; 0x30
   12a5c:	str	r6, [sp, #68]	; 0x44
   12a60:	bne	127f4 <__assert_fail@plt+0x1968>
   12a64:	ldr	r2, [sp, #48]	; 0x30
   12a68:	eor	r3, r3, #1
   12a6c:	add	r9, r9, #1
   12a70:	and	r3, r3, r2
   12a74:	uxtb	r3, r3
   12a78:	cmp	r3, #0
   12a7c:	beq	12864 <__assert_fail@plt+0x19d8>
   12a80:	cmp	sl, r4
   12a84:	movhi	r3, #39	; 0x27
   12a88:	strbhi	r3, [r8, r4]
   12a8c:	add	r3, r4, #1
   12a90:	add	r4, r4, #2
   12a94:	cmp	sl, r3
   12a98:	movhi	r2, #39	; 0x27
   12a9c:	strbhi	r2, [r8, r3]
   12aa0:	mov	r3, #0
   12aa4:	str	r3, [sp, #48]	; 0x30
   12aa8:	b	12864 <__assert_fail@plt+0x19d8>
   12aac:	mov	r3, #118	; 0x76
   12ab0:	b	12988 <__assert_fail@plt+0x1afc>
   12ab4:	mov	r3, #116	; 0x74
   12ab8:	ldr	r2, [sp, #44]	; 0x2c
   12abc:	cmp	fp, #2
   12ac0:	movne	r2, #0
   12ac4:	andeq	r2, r2, #1
   12ac8:	cmp	r2, #0
   12acc:	beq	12988 <__assert_fail@plt+0x1afc>
   12ad0:	mov	fp, r8
   12ad4:	mov	r8, #2
   12ad8:	ldr	r3, [sp, #40]	; 0x28
   12adc:	cmp	r3, #0
   12ae0:	movne	r8, #4
   12ae4:	mov	lr, #0
   12ae8:	mov	r0, fp
   12aec:	ldr	r2, [sp, #32]
   12af0:	ldr	r3, [sp, #156]	; 0x9c
   12af4:	ldr	r1, [sp, #164]	; 0xa4
   12af8:	bic	ip, r3, #2
   12afc:	ldr	r3, [sp, #28]
   12b00:	stm	sp, {r8, ip, lr}
   12b04:	ldr	ip, [sp, #168]	; 0xa8
   12b08:	str	r1, [sp, #12]
   12b0c:	mov	r1, sl
   12b10:	str	ip, [sp, #16]
   12b14:	bl	1222c <__assert_fail@plt+0x13a0>
   12b18:	mov	r4, r0
   12b1c:	mov	r0, r4
   12b20:	add	sp, sp, #116	; 0x74
   12b24:	ldrd	r4, [sp]
   12b28:	ldrd	r6, [sp, #8]
   12b2c:	ldrd	r8, [sp, #16]
   12b30:	ldrd	sl, [sp, #24]
   12b34:	add	sp, sp, #32
   12b38:	pop	{pc}		; (ldr pc, [sp], #4)
   12b3c:	mov	r5, #102	; 0x66
   12b40:	ldr	r2, [sp, #44]	; 0x2c
   12b44:	sub	r3, fp, #2
   12b48:	clz	r3, r3
   12b4c:	lsr	r3, r3, #5
   12b50:	cmp	r2, #0
   12b54:	bne	135b0 <__assert_fail@plt+0x2724>
   12b58:	mov	r6, r2
   12b5c:	b	12850 <__assert_fail@plt+0x19c4>
   12b60:	mov	r5, #110	; 0x6e
   12b64:	mov	r6, #0
   12b68:	b	127f4 <__assert_fail@plt+0x1968>
   12b6c:	mov	r5, #98	; 0x62
   12b70:	b	12b40 <__assert_fail@plt+0x1cb4>
   12b74:	mov	r5, #97	; 0x61
   12b78:	b	12b40 <__assert_fail@plt+0x1cb4>
   12b7c:	mov	r7, #0
   12b80:	mov	r6, #0
   12b84:	b	129a4 <__assert_fail@plt+0x1b18>
   12b88:	mov	r5, #114	; 0x72
   12b8c:	b	12b64 <__assert_fail@plt+0x1cd8>
   12b90:	ldr	r3, [sp, #44]	; 0x2c
   12b94:	cmp	r3, #0
   12b98:	bne	13928 <__assert_fail@plt+0x2a9c>
   12b9c:	mov	r7, r3
   12ba0:	ldr	r3, [sp, #48]	; 0x30
   12ba4:	sub	r2, fp, #2
   12ba8:	clz	r2, r2
   12bac:	lsr	r2, r2, #5
   12bb0:	eor	r3, r3, #1
   12bb4:	ands	r3, r2, r3
   12bb8:	beq	135cc <__assert_fail@plt+0x2740>
   12bbc:	cmp	sl, r4
   12bc0:	movhi	r1, #39	; 0x27
   12bc4:	strbhi	r1, [r8, r4]
   12bc8:	add	r1, r4, #1
   12bcc:	cmp	sl, r1
   12bd0:	movhi	r0, #36	; 0x24
   12bd4:	strbhi	r0, [r8, r1]
   12bd8:	add	r1, r4, #2
   12bdc:	cmp	sl, r1
   12be0:	movhi	r0, #39	; 0x27
   12be4:	strbhi	r0, [r8, r1]
   12be8:	add	r1, r4, #3
   12bec:	cmp	sl, r1
   12bf0:	bls	13624 <__assert_fail@plt+0x2798>
   12bf4:	mov	r4, r1
   12bf8:	mov	r1, #92	; 0x5c
   12bfc:	mov	r0, r4
   12c00:	str	r3, [sp, #48]	; 0x30
   12c04:	strb	r1, [r8, r4]
   12c08:	cmp	fp, #2
   12c0c:	add	r4, r4, #1
   12c10:	beq	13674 <__assert_fail@plt+0x27e8>
   12c14:	ldr	r1, [sp, #28]
   12c18:	add	r3, r9, #1
   12c1c:	cmp	r3, r1
   12c20:	bcs	12c38 <__assert_fail@plt+0x1dac>
   12c24:	ldr	r1, [sp, #32]
   12c28:	ldrb	r3, [r1, r3]
   12c2c:	sub	r3, r3, #48	; 0x30
   12c30:	cmp	r3, #9
   12c34:	bls	1368c <__assert_fail@plt+0x2800>
   12c38:	mov	r5, #48	; 0x30
   12c3c:	ldr	r3, [sp, #40]	; 0x28
   12c40:	eor	r3, r3, #1
   12c44:	orrs	r2, r2, r3
   12c48:	mov	r3, r6
   12c4c:	moveq	r6, r2
   12c50:	beq	127c4 <__assert_fail@plt+0x1938>
   12c54:	mov	r6, #0
   12c58:	b	127ec <__assert_fail@plt+0x1960>
   12c5c:	cmp	r9, #0
   12c60:	mov	r2, r7
   12c64:	bne	13204 <__assert_fail@plt+0x2378>
   12c68:	mov	r6, r7
   12c6c:	mov	r3, r9
   12c70:	mov	r7, r2
   12c74:	b	127b4 <__assert_fail@plt+0x1928>
   12c78:	mov	r2, r7
   12c7c:	mov	r6, r7
   12c80:	mov	r3, #0
   12c84:	mov	r7, r2
   12c88:	mov	r5, #32
   12c8c:	b	127b4 <__assert_fail@plt+0x1928>
   12c90:	mov	r6, r7
   12c94:	b	129a4 <__assert_fail@plt+0x1b18>
   12c98:	mov	r7, #0
   12c9c:	ldr	r3, [sp, #64]	; 0x40
   12ca0:	cmp	r3, #1
   12ca4:	bne	132c4 <__assert_fail@plt+0x2438>
   12ca8:	bl	10d90 <__ctype_b_loc@plt>
   12cac:	ldr	r2, [r0]
   12cb0:	sxth	r3, r5
   12cb4:	lsl	r3, r3, #1
   12cb8:	ldr	r1, [sp, #64]	; 0x40
   12cbc:	ldrh	r3, [r2, r3]
   12cc0:	mov	ip, r1
   12cc4:	and	r3, r3, #16384	; 0x4000
   12cc8:	cmp	r3, #0
   12ccc:	ldr	r3, [sp, #40]	; 0x28
   12cd0:	movne	r6, #1
   12cd4:	moveq	r6, #0
   12cd8:	movne	r2, #0
   12cdc:	andeq	r2, r3, #1
   12ce0:	cmp	r2, #0
   12ce4:	bne	1360c <__assert_fail@plt+0x2780>
   12ce8:	sub	r3, fp, #2
   12cec:	clz	r3, r3
   12cf0:	lsr	r3, r3, #5
   12cf4:	b	127b4 <__assert_fail@plt+0x1928>
   12cf8:	cmp	r4, #0
   12cfc:	bne	1399c <__assert_fail@plt+0x2b10>
   12d00:	str	r4, [sp, #40]	; 0x28
   12d04:	cmp	sl, #0
   12d08:	bne	139cc <__assert_fail@plt+0x2b40>
   12d0c:	mov	r3, #1
   12d10:	movw	r2, #28200	; 0x6e28
   12d14:	movt	r2, #1
   12d18:	mov	r4, r3
   12d1c:	mov	r8, #2
   12d20:	str	r3, [sp, #36]	; 0x24
   12d24:	str	sl, [sp, #44]	; 0x2c
   12d28:	str	sl, [sp, #48]	; 0x30
   12d2c:	str	r3, [sp, #56]	; 0x38
   12d30:	str	r2, [sp, #60]	; 0x3c
   12d34:	str	sl, [sp, #68]	; 0x44
   12d38:	str	sl, [sp, #72]	; 0x48
   12d3c:	b	12314 <__assert_fail@plt+0x1488>
   12d40:	ldr	r3, [sp, #32]
   12d44:	ldrb	r5, [r3, r9]
   12d48:	cmp	r5, #126	; 0x7e
   12d4c:	ldrls	pc, [pc, r5, lsl #2]
   12d50:	b	12c9c <__assert_fail@plt+0x1e10>
   12d54:	andeq	r2, r1, r8, ror pc
   12d58:	muleq	r1, ip, ip
   12d5c:	muleq	r1, ip, ip
   12d60:	muleq	r1, ip, ip
   12d64:	muleq	r1, ip, ip
   12d68:	muleq	r1, ip, ip
   12d6c:	muleq	r1, ip, ip
   12d70:	andeq	r2, r1, r0, ror pc
   12d74:	andeq	r2, r1, r8, ror #30
   12d78:			; <UNDEFINED> instruction: 0x00012ab4
   12d7c:	andeq	r2, r1, r0, ror #30
   12d80:	andeq	r2, r1, ip, lsr #21
   12d84:	andeq	r2, r1, r8, asr pc
   12d88:	andeq	r2, r1, r0, asr pc
   12d8c:	muleq	r1, ip, ip
   12d90:	muleq	r1, ip, ip
   12d94:	muleq	r1, ip, ip
   12d98:	muleq	r1, ip, ip
   12d9c:	muleq	r1, ip, ip
   12da0:	muleq	r1, ip, ip
   12da4:	muleq	r1, ip, ip
   12da8:	muleq	r1, ip, ip
   12dac:	muleq	r1, ip, ip
   12db0:	muleq	r1, ip, ip
   12db4:	muleq	r1, ip, ip
   12db8:	muleq	r1, ip, ip
   12dbc:	muleq	r1, ip, ip
   12dc0:	muleq	r1, ip, ip
   12dc4:	muleq	r1, ip, ip
   12dc8:	muleq	r1, ip, ip
   12dcc:	muleq	r1, ip, ip
   12dd0:	muleq	r1, ip, ip
   12dd4:	andeq	r2, r1, ip, asr #31
   12dd8:	andeq	r2, r1, ip, lsr #31
   12ddc:	andeq	r2, r1, ip, lsr #31
   12de0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12de4:	andeq	r2, r1, ip, lsr #31
   12de8:	andeq	r2, r1, r8, ror #25
   12dec:	andeq	r2, r1, ip, lsr #31
   12df0:	ldrdeq	r2, [r1], -ip
   12df4:	andeq	r2, r1, ip, lsr #31
   12df8:	andeq	r2, r1, ip, lsr #31
   12dfc:	andeq	r2, r1, ip, lsr #31
   12e00:	andeq	r2, r1, r8, ror #25
   12e04:	andeq	r2, r1, r8, ror #25
   12e08:	andeq	r2, r1, r8, ror #25
   12e0c:	andeq	r2, r1, r8, ror #25
   12e10:	andeq	r2, r1, r8, ror #25
   12e14:	andeq	r2, r1, r8, ror #25
   12e18:	andeq	r2, r1, r8, ror #25
   12e1c:	andeq	r2, r1, r8, ror #25
   12e20:	andeq	r2, r1, r8, ror #25
   12e24:	andeq	r2, r1, r8, ror #25
   12e28:	andeq	r2, r1, r8, ror #25
   12e2c:	andeq	r2, r1, r8, ror #25
   12e30:	andeq	r2, r1, r8, ror #25
   12e34:	andeq	r2, r1, r8, ror #25
   12e38:	andeq	r2, r1, r8, ror #25
   12e3c:	andeq	r2, r1, r8, ror #25
   12e40:	andeq	r2, r1, ip, lsr #31
   12e44:	andeq	r2, r1, ip, lsr #31
   12e48:	andeq	r2, r1, ip, lsr #31
   12e4c:	andeq	r2, r1, ip, lsr #31
   12e50:			; <UNDEFINED> instruction: 0x000129b0
   12e54:	muleq	r1, ip, ip
   12e58:	andeq	r2, r1, r8, ror #25
   12e5c:	andeq	r2, r1, r8, ror #25
   12e60:	andeq	r2, r1, r8, ror #25
   12e64:	andeq	r2, r1, r8, ror #25
   12e68:	andeq	r2, r1, r8, ror #25
   12e6c:	andeq	r2, r1, r8, ror #25
   12e70:	andeq	r2, r1, r8, ror #25
   12e74:	andeq	r2, r1, r8, ror #25
   12e78:	andeq	r2, r1, r8, ror #25
   12e7c:	andeq	r2, r1, r8, ror #25
   12e80:	andeq	r2, r1, r8, ror #25
   12e84:	andeq	r2, r1, r8, ror #25
   12e88:	andeq	r2, r1, r8, ror #25
   12e8c:	andeq	r2, r1, r8, ror #25
   12e90:	andeq	r2, r1, r8, ror #25
   12e94:	andeq	r2, r1, r8, ror #25
   12e98:	andeq	r2, r1, r8, ror #25
   12e9c:	andeq	r2, r1, r8, ror #25
   12ea0:	andeq	r2, r1, r8, ror #25
   12ea4:	andeq	r2, r1, r8, ror #25
   12ea8:	andeq	r2, r1, r8, ror #25
   12eac:	andeq	r2, r1, r8, ror #25
   12eb0:	andeq	r2, r1, r8, ror #25
   12eb4:	andeq	r2, r1, r8, ror #25
   12eb8:	andeq	r2, r1, r8, ror #25
   12ebc:	andeq	r2, r1, r8, ror #25
   12ec0:	andeq	r2, r1, ip, lsr #31
   12ec4:	andeq	r2, r1, r8, asr r9
   12ec8:	andeq	r2, r1, r8, ror #25
   12ecc:	andeq	r2, r1, ip, lsr #31
   12ed0:	andeq	r2, r1, r8, ror #25
   12ed4:	andeq	r2, r1, ip, lsr #31
   12ed8:	andeq	r2, r1, r8, ror #25
   12edc:	andeq	r2, r1, r8, ror #25
   12ee0:	andeq	r2, r1, r8, ror #25
   12ee4:	andeq	r2, r1, r8, ror #25
   12ee8:	andeq	r2, r1, r8, ror #25
   12eec:	andeq	r2, r1, r8, ror #25
   12ef0:	andeq	r2, r1, r8, ror #25
   12ef4:	andeq	r2, r1, r8, ror #25
   12ef8:	andeq	r2, r1, r8, ror #25
   12efc:	andeq	r2, r1, r8, ror #25
   12f00:	andeq	r2, r1, r8, ror #25
   12f04:	andeq	r2, r1, r8, ror #25
   12f08:	andeq	r2, r1, r8, ror #25
   12f0c:	andeq	r2, r1, r8, ror #25
   12f10:	andeq	r2, r1, r8, ror #25
   12f14:	andeq	r2, r1, r8, ror #25
   12f18:	andeq	r2, r1, r8, ror #25
   12f1c:	andeq	r2, r1, r8, ror #25
   12f20:	andeq	r2, r1, r8, ror #25
   12f24:	andeq	r2, r1, r8, ror #25
   12f28:	andeq	r2, r1, r8, ror #25
   12f2c:	andeq	r2, r1, r8, ror #25
   12f30:	andeq	r2, r1, r8, ror #25
   12f34:	andeq	r2, r1, r8, ror #25
   12f38:	andeq	r2, r1, r8, ror #25
   12f3c:	andeq	r2, r1, r8, ror #25
   12f40:	andeq	r2, r1, ip, ror r7
   12f44:	andeq	r2, r1, ip, lsr #31
   12f48:	andeq	r2, r1, ip, ror r7
   12f4c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f50:	mov	r3, #114	; 0x72
   12f54:	b	12ab8 <__assert_fail@plt+0x1c2c>
   12f58:	mov	r3, #102	; 0x66
   12f5c:	b	12988 <__assert_fail@plt+0x1afc>
   12f60:	mov	r3, #110	; 0x6e
   12f64:	b	12ab8 <__assert_fail@plt+0x1c2c>
   12f68:	mov	r3, #98	; 0x62
   12f6c:	b	12988 <__assert_fail@plt+0x1afc>
   12f70:	mov	r3, #97	; 0x61
   12f74:	b	12988 <__assert_fail@plt+0x1afc>
   12f78:	ldr	r3, [sp, #40]	; 0x28
   12f7c:	cmp	r3, #0
   12f80:	bne	12b90 <__assert_fail@plt+0x1d04>
   12f84:	ldr	r3, [sp, #156]	; 0x9c
   12f88:	tst	r3, #1
   12f8c:	addne	r9, r9, #1
   12f90:	bne	12324 <__assert_fail@plt+0x1498>
   12f94:	ldr	r7, [sp, #40]	; 0x28
   12f98:	b	12994 <__assert_fail@plt+0x1b08>
   12f9c:	sub	r3, fp, #2
   12fa0:	clz	r3, r3
   12fa4:	lsr	r3, r3, #5
   12fa8:	b	127a8 <__assert_fail@plt+0x191c>
   12fac:	sub	r3, fp, #2
   12fb0:	mov	r6, #0
   12fb4:	clz	r3, r3
   12fb8:	lsr	r3, r3, #5
   12fbc:	ldr	r2, [sp, #44]	; 0x2c
   12fc0:	tst	r2, r3
   12fc4:	beq	127b4 <__assert_fail@plt+0x1928>
   12fc8:	b	12ad0 <__assert_fail@plt+0x1c44>
   12fcc:	sub	r3, fp, #2
   12fd0:	clz	r3, r3
   12fd4:	lsr	r3, r3, #5
   12fd8:	b	12fbc <__assert_fail@plt+0x2130>
   12fdc:	ldr	r3, [sp, #52]	; 0x34
   12fe0:	ldrb	r5, [r3]
   12fe4:	cmp	r5, #126	; 0x7e
   12fe8:	ldrls	pc, [pc, r5, lsl #2]
   12fec:	b	12c98 <__assert_fail@plt+0x1e0c>
   12ff0:	muleq	r1, r0, fp
   12ff4:	muleq	r1, r8, ip
   12ff8:	muleq	r1, r8, ip
   12ffc:	muleq	r1, r8, ip
   13000:	muleq	r1, r8, ip
   13004:	muleq	r1, r8, ip
   13008:	muleq	r1, r8, ip
   1300c:	andeq	r2, r1, r4, ror fp
   13010:	andeq	r2, r1, ip, ror #22
   13014:	andeq	r3, r1, r8, lsr #4
   13018:	andeq	r2, r1, r0, ror #22
   1301c:	andeq	r3, r1, ip, lsl r2
   13020:	andeq	r2, r1, ip, lsr fp
   13024:	andeq	r2, r1, r8, lsl #23
   13028:	muleq	r1, r8, ip
   1302c:	muleq	r1, r8, ip
   13030:	muleq	r1, r8, ip
   13034:	muleq	r1, r8, ip
   13038:	muleq	r1, r8, ip
   1303c:	muleq	r1, r8, ip
   13040:	muleq	r1, r8, ip
   13044:	muleq	r1, r8, ip
   13048:	muleq	r1, r8, ip
   1304c:	muleq	r1, r8, ip
   13050:	muleq	r1, r8, ip
   13054:	muleq	r1, r8, ip
   13058:	muleq	r1, r8, ip
   1305c:	muleq	r1, r8, ip
   13060:	muleq	r1, r8, ip
   13064:	muleq	r1, r8, ip
   13068:	muleq	r1, r8, ip
   1306c:	muleq	r1, r8, ip
   13070:	andeq	r3, r1, r4, lsl r2
   13074:	andeq	r2, r1, ip, ror fp
   13078:	andeq	r2, r1, ip, ror fp
   1307c:	strdeq	r3, [r1], -r8
   13080:	andeq	r2, r1, ip, ror fp
   13084:	andeq	r3, r1, ip, ror #3
   13088:	andeq	r2, r1, ip, ror fp
   1308c:	ldrdeq	r2, [r1], -r8
   13090:	andeq	r2, r1, ip, ror fp
   13094:	andeq	r2, r1, ip, ror fp
   13098:	andeq	r2, r1, ip, ror fp
   1309c:	andeq	r3, r1, ip, ror #3
   130a0:	andeq	r3, r1, ip, ror #3
   130a4:	andeq	r3, r1, ip, ror #3
   130a8:	andeq	r3, r1, ip, ror #3
   130ac:	andeq	r3, r1, ip, ror #3
   130b0:	andeq	r3, r1, ip, ror #3
   130b4:	andeq	r3, r1, ip, ror #3
   130b8:	andeq	r3, r1, ip, ror #3
   130bc:	andeq	r3, r1, ip, ror #3
   130c0:	andeq	r3, r1, ip, ror #3
   130c4:	andeq	r3, r1, ip, ror #3
   130c8:	andeq	r3, r1, ip, ror #3
   130cc:	andeq	r3, r1, ip, ror #3
   130d0:	andeq	r3, r1, ip, ror #3
   130d4:	andeq	r3, r1, ip, ror #3
   130d8:	andeq	r3, r1, ip, ror #3
   130dc:	andeq	r2, r1, ip, ror fp
   130e0:	andeq	r2, r1, ip, ror fp
   130e4:	andeq	r2, r1, ip, ror fp
   130e8:	andeq	r2, r1, ip, ror fp
   130ec:	andeq	r2, r1, ip, lsr #19
   130f0:	muleq	r1, r8, ip
   130f4:	andeq	r3, r1, ip, ror #3
   130f8:	andeq	r3, r1, ip, ror #3
   130fc:	andeq	r3, r1, ip, ror #3
   13100:	andeq	r3, r1, ip, ror #3
   13104:	andeq	r3, r1, ip, ror #3
   13108:	andeq	r3, r1, ip, ror #3
   1310c:	andeq	r3, r1, ip, ror #3
   13110:	andeq	r3, r1, ip, ror #3
   13114:	andeq	r3, r1, ip, ror #3
   13118:	andeq	r3, r1, ip, ror #3
   1311c:	andeq	r3, r1, ip, ror #3
   13120:	andeq	r3, r1, ip, ror #3
   13124:	andeq	r3, r1, ip, ror #3
   13128:	andeq	r3, r1, ip, ror #3
   1312c:	andeq	r3, r1, ip, ror #3
   13130:	andeq	r3, r1, ip, ror #3
   13134:	andeq	r3, r1, ip, ror #3
   13138:	andeq	r3, r1, ip, ror #3
   1313c:	andeq	r3, r1, ip, ror #3
   13140:	andeq	r3, r1, ip, ror #3
   13144:	andeq	r3, r1, ip, ror #3
   13148:	andeq	r3, r1, ip, ror #3
   1314c:	andeq	r3, r1, ip, ror #3
   13150:	andeq	r3, r1, ip, ror #3
   13154:	andeq	r3, r1, ip, ror #3
   13158:	andeq	r3, r1, ip, ror #3
   1315c:	andeq	r2, r1, ip, ror fp
   13160:	andeq	r2, r1, r4, asr r9
   13164:	andeq	r3, r1, ip, ror #3
   13168:	andeq	r2, r1, ip, ror fp
   1316c:	andeq	r3, r1, ip, ror #3
   13170:	andeq	r2, r1, ip, ror fp
   13174:	andeq	r3, r1, ip, ror #3
   13178:	andeq	r3, r1, ip, ror #3
   1317c:	andeq	r3, r1, ip, ror #3
   13180:	andeq	r3, r1, ip, ror #3
   13184:	andeq	r3, r1, ip, ror #3
   13188:	andeq	r3, r1, ip, ror #3
   1318c:	andeq	r3, r1, ip, ror #3
   13190:	andeq	r3, r1, ip, ror #3
   13194:	andeq	r3, r1, ip, ror #3
   13198:	andeq	r3, r1, ip, ror #3
   1319c:	andeq	r3, r1, ip, ror #3
   131a0:	andeq	r3, r1, ip, ror #3
   131a4:	andeq	r3, r1, ip, ror #3
   131a8:	andeq	r3, r1, ip, ror #3
   131ac:	andeq	r3, r1, ip, ror #3
   131b0:	andeq	r3, r1, ip, ror #3
   131b4:	andeq	r3, r1, ip, ror #3
   131b8:	andeq	r3, r1, ip, ror #3
   131bc:	andeq	r3, r1, ip, ror #3
   131c0:	andeq	r3, r1, ip, ror #3
   131c4:	andeq	r3, r1, ip, ror #3
   131c8:	andeq	r3, r1, ip, ror #3
   131cc:	andeq	r3, r1, ip, ror #3
   131d0:	andeq	r3, r1, ip, ror #3
   131d4:	andeq	r3, r1, ip, ror #3
   131d8:	andeq	r3, r1, ip, ror #3
   131dc:	andeq	r2, r1, r8, ror r7
   131e0:	andeq	r2, r1, ip, ror fp
   131e4:	andeq	r2, r1, r8, ror r7
   131e8:	strdeq	r3, [r1], -r8
   131ec:	mov	r6, r7
   131f0:	mov	r7, #0
   131f4:	b	129a4 <__assert_fail@plt+0x1b18>
   131f8:	cmp	r9, #0
   131fc:	mov	r2, #0
   13200:	beq	12c68 <__assert_fail@plt+0x1ddc>
   13204:	mov	r6, #0
   13208:	mov	r7, r2
   1320c:	mov	r3, r6
   13210:	b	127c4 <__assert_fail@plt+0x1938>
   13214:	mov	r2, #0
   13218:	b	12c7c <__assert_fail@plt+0x1df0>
   1321c:	mov	r7, #0
   13220:	mov	r3, #118	; 0x76
   13224:	b	12988 <__assert_fail@plt+0x1afc>
   13228:	mov	r7, #0
   1322c:	mov	r3, #116	; 0x74
   13230:	b	12ab8 <__assert_fail@plt+0x1c2c>
   13234:	ldr	r3, [sp, #44]	; 0x2c
   13238:	b	127ec <__assert_fail@plt+0x1960>
   1323c:	ldr	r3, [sp, #44]	; 0x2c
   13240:	cmp	r3, #0
   13244:	bne	136b4 <__assert_fail@plt+0x2828>
   13248:	add	r9, r9, #1
   1324c:	mov	r6, #0
   13250:	ldr	r3, [sp, #48]	; 0x30
   13254:	mov	r5, #92	; 0x5c
   13258:	b	12a78 <__assert_fail@plt+0x1bec>
   1325c:	ldr	r3, [sp, #32]
   13260:	ldrb	r2, [r3, #1]
   13264:	adds	r2, r2, #0
   13268:	movne	r2, #1
   1326c:	b	12794 <__assert_fail@plt+0x1908>
   13270:	ldr	r3, [sp, #156]	; 0x9c
   13274:	ands	r3, r3, #4
   13278:	beq	132a0 <__assert_fail@plt+0x2414>
   1327c:	ldr	r2, [sp, #28]
   13280:	add	r3, r9, #2
   13284:	cmp	r3, r2
   13288:	bcs	1329c <__assert_fail@plt+0x2410>
   1328c:	ldr	r2, [sp, #52]	; 0x34
   13290:	ldrb	r5, [r2, #1]
   13294:	cmp	r5, #63	; 0x3f
   13298:	beq	13718 <__assert_fail@plt+0x288c>
   1329c:	mov	r3, #0
   132a0:	mov	r5, #63	; 0x3f
   132a4:	mov	r6, r3
   132a8:	b	127b4 <__assert_fail@plt+0x1928>
   132ac:	ldr	r3, [sp, #44]	; 0x2c
   132b0:	cmp	r3, #0
   132b4:	bne	136b4 <__assert_fail@plt+0x2828>
   132b8:	mov	r6, r3
   132bc:	mov	r5, #63	; 0x3f
   132c0:	b	127ec <__assert_fail@plt+0x1960>
   132c4:	ldr	r1, [sp, #28]
   132c8:	mov	r2, #0
   132cc:	mov	r3, #0
   132d0:	strd	r2, [sp, #104]	; 0x68
   132d4:	cmn	r1, #1
   132d8:	bne	132e8 <__assert_fail@plt+0x245c>
   132dc:	ldr	r0, [sp, #32]
   132e0:	bl	10da8 <strlen@plt>
   132e4:	str	r0, [sp, #28]
   132e8:	str	r8, [sp, #76]	; 0x4c
   132ec:	mov	r3, #0
   132f0:	str	sl, [sp, #80]	; 0x50
   132f4:	ldr	sl, [sp, #32]
   132f8:	str	r5, [sp, #84]	; 0x54
   132fc:	mov	r5, r3
   13300:	ldr	r8, [sp, #44]	; 0x2c
   13304:	str	r7, [sp, #88]	; 0x58
   13308:	str	r4, [sp, #92]	; 0x5c
   1330c:	ldr	r2, [sp, #28]
   13310:	add	r4, r9, r5
   13314:	add	r3, sp, #104	; 0x68
   13318:	add	r7, sl, r4
   1331c:	add	r0, sp, #100	; 0x64
   13320:	mov	r1, r7
   13324:	sub	r2, r2, r4
   13328:	bl	15fe0 <__assert_fail@plt+0x5154>
   1332c:	subs	r1, r0, #0
   13330:	beq	1337c <__assert_fail@plt+0x24f0>
   13334:	cmn	r1, #1
   13338:	beq	136f4 <__assert_fail@plt+0x2868>
   1333c:	cmn	r1, #2
   13340:	beq	13814 <__assert_fail@plt+0x2988>
   13344:	cmp	fp, #2
   13348:	movne	r3, #0
   1334c:	andeq	r3, r8, #1
   13350:	cmp	r3, #0
   13354:	bne	134e0 <__assert_fail@plt+0x2654>
   13358:	ldr	r0, [sp, #100]	; 0x64
   1335c:	add	r5, r5, r1
   13360:	bl	10ce8 <iswprint@plt>
   13364:	cmp	r0, #0
   13368:	add	r0, sp, #104	; 0x68
   1336c:	moveq	r6, #0
   13370:	bl	10c94 <mbsinit@plt>
   13374:	cmp	r0, #0
   13378:	beq	1330c <__assert_fail@plt+0x2480>
   1337c:	ldr	r3, [sp, #40]	; 0x28
   13380:	mov	ip, r5
   13384:	eor	r2, r6, #1
   13388:	ldr	r8, [sp, #76]	; 0x4c
   1338c:	ldr	sl, [sp, #80]	; 0x50
   13390:	and	r2, r2, r3
   13394:	ldr	r5, [sp, #84]	; 0x54
   13398:	ldr	r7, [sp, #88]	; 0x58
   1339c:	ldr	r4, [sp, #92]	; 0x5c
   133a0:	cmp	ip, #1
   133a4:	bls	12ce0 <__assert_fail@plt+0x1e54>
   133a8:	add	r1, ip, r9
   133ac:	mov	r0, #39	; 0x27
   133b0:	ldr	lr, [sp, #52]	; 0x34
   133b4:	mov	ip, #0
   133b8:	str	r6, [sp, #52]	; 0x34
   133bc:	ldr	r6, [sp, #48]	; 0x30
   133c0:	b	1347c <__assert_fail@plt+0x25f0>
   133c4:	ldr	ip, [sp, #44]	; 0x2c
   133c8:	sub	r3, fp, #2
   133cc:	clz	r3, r3
   133d0:	lsr	r3, r3, #5
   133d4:	cmp	ip, #0
   133d8:	bne	135ec <__assert_fail@plt+0x2760>
   133dc:	eor	ip, r6, #1
   133e0:	ands	r3, r3, ip
   133e4:	beq	13414 <__assert_fail@plt+0x2588>
   133e8:	cmp	sl, r4
   133ec:	add	ip, r4, #1
   133f0:	strbhi	r0, [r8, r4]
   133f4:	cmp	sl, ip
   133f8:	movhi	r6, #36	; 0x24
   133fc:	strbhi	r6, [r8, ip]
   13400:	add	ip, r4, #2
   13404:	mov	r6, r3
   13408:	cmp	sl, ip
   1340c:	add	r4, r4, #3
   13410:	strbhi	r0, [r8, ip]
   13414:	cmp	sl, r4
   13418:	movhi	r3, #92	; 0x5c
   1341c:	strbhi	r3, [r8, r4]
   13420:	add	r3, r4, #1
   13424:	cmp	sl, r3
   13428:	bls	13438 <__assert_fail@plt+0x25ac>
   1342c:	lsr	ip, r5, #6
   13430:	add	ip, ip, #48	; 0x30
   13434:	strb	ip, [r8, r3]
   13438:	add	r3, r4, #2
   1343c:	cmp	sl, r3
   13440:	bls	13450 <__assert_fail@plt+0x25c4>
   13444:	ubfx	ip, r5, #3, #3
   13448:	add	ip, ip, #48	; 0x30
   1344c:	strb	ip, [r8, r3]
   13450:	add	r9, r9, #1
   13454:	and	r5, r5, #7
   13458:	cmp	r9, r1
   1345c:	add	r5, r5, #48	; 0x30
   13460:	add	r4, r4, #3
   13464:	bcs	13618 <__assert_fail@plt+0x278c>
   13468:	mov	ip, r2
   1346c:	cmp	sl, r4
   13470:	strbhi	r5, [r8, r4]
   13474:	add	r4, r4, #1
   13478:	ldrb	r5, [lr, #1]!
   1347c:	cmp	r2, #0
   13480:	bne	133c4 <__assert_fail@plt+0x2538>
   13484:	eor	r3, ip, #1
   13488:	cmp	r7, #0
   1348c:	and	r3, r3, r6
   13490:	uxtb	r3, r3
   13494:	beq	134a8 <__assert_fail@plt+0x261c>
   13498:	cmp	sl, r4
   1349c:	movhi	r7, #92	; 0x5c
   134a0:	strbhi	r7, [r8, r4]
   134a4:	add	r4, r4, #1
   134a8:	add	r9, r9, #1
   134ac:	cmp	r9, r1
   134b0:	bcs	13600 <__assert_fail@plt+0x2774>
   134b4:	cmp	r3, #0
   134b8:	beq	13638 <__assert_fail@plt+0x27ac>
   134bc:	cmp	sl, r4
   134c0:	add	r3, r4, #1
   134c4:	mov	r7, #0
   134c8:	strbhi	r0, [r8, r4]
   134cc:	cmp	sl, r3
   134d0:	add	r4, r4, #2
   134d4:	mov	r6, r7
   134d8:	strbhi	r0, [r8, r3]
   134dc:	b	1346c <__assert_fail@plt+0x25e0>
   134e0:	cmp	r1, #1
   134e4:	beq	13358 <__assert_fail@plt+0x24cc>
   134e8:	add	r2, r4, #1
   134ec:	add	r3, sl, r1
   134f0:	add	r2, sl, r2
   134f4:	add	r4, r3, r4
   134f8:	ldrb	r3, [r2], #1
   134fc:	sub	r3, r3, #91	; 0x5b
   13500:	cmp	r3, #33	; 0x21
   13504:	ldrls	pc, [pc, r3, lsl #2]
   13508:	b	13594 <__assert_fail@plt+0x2708>
   1350c:	andeq	r3, r1, r0, lsr #11
   13510:	andeq	r3, r1, r0, lsr #11
   13514:	muleq	r1, r4, r5
   13518:	andeq	r3, r1, r0, lsr #11
   1351c:	muleq	r1, r4, r5
   13520:	andeq	r3, r1, r0, lsr #11
   13524:	muleq	r1, r4, r5
   13528:	muleq	r1, r4, r5
   1352c:	muleq	r1, r4, r5
   13530:	muleq	r1, r4, r5
   13534:	muleq	r1, r4, r5
   13538:	muleq	r1, r4, r5
   1353c:	muleq	r1, r4, r5
   13540:	muleq	r1, r4, r5
   13544:	muleq	r1, r4, r5
   13548:	muleq	r1, r4, r5
   1354c:	muleq	r1, r4, r5
   13550:	muleq	r1, r4, r5
   13554:	muleq	r1, r4, r5
   13558:	muleq	r1, r4, r5
   1355c:	muleq	r1, r4, r5
   13560:	muleq	r1, r4, r5
   13564:	muleq	r1, r4, r5
   13568:	muleq	r1, r4, r5
   1356c:	muleq	r1, r4, r5
   13570:	muleq	r1, r4, r5
   13574:	muleq	r1, r4, r5
   13578:	muleq	r1, r4, r5
   1357c:	muleq	r1, r4, r5
   13580:	muleq	r1, r4, r5
   13584:	muleq	r1, r4, r5
   13588:	muleq	r1, r4, r5
   1358c:	muleq	r1, r4, r5
   13590:	andeq	r3, r1, r0, lsr #11
   13594:	cmp	r4, r2
   13598:	bne	134f8 <__assert_fail@plt+0x266c>
   1359c:	b	13358 <__assert_fail@plt+0x24cc>
   135a0:	mov	r8, #2
   135a4:	ldr	fp, [sp, #76]	; 0x4c
   135a8:	ldr	sl, [sp, #80]	; 0x50
   135ac:	b	12ad8 <__assert_fail@plt+0x1c4c>
   135b0:	ldr	r2, [sp, #40]	; 0x28
   135b4:	str	fp, [sp, #152]	; 0x98
   135b8:	mov	fp, r8
   135bc:	ldr	r8, [sp, #152]	; 0x98
   135c0:	and	r2, r2, r3
   135c4:	str	r2, [sp, #40]	; 0x28
   135c8:	b	12ad8 <__assert_fail@plt+0x1c4c>
   135cc:	cmp	sl, r4
   135d0:	movls	r0, r4
   135d4:	bls	12c08 <__assert_fail@plt+0x1d7c>
   135d8:	ldr	r3, [sp, #48]	; 0x30
   135dc:	b	12bf8 <__assert_fail@plt+0x1d6c>
   135e0:	str	sl, [sp, #72]	; 0x48
   135e4:	ldr	sl, [sp, #44]	; 0x2c
   135e8:	b	12a48 <__assert_fail@plt+0x1bbc>
   135ec:	str	r3, [sp, #40]	; 0x28
   135f0:	str	fp, [sp, #152]	; 0x98
   135f4:	mov	fp, r8
   135f8:	ldr	r8, [sp, #152]	; 0x98
   135fc:	b	12ad8 <__assert_fail@plt+0x1c4c>
   13600:	str	r6, [sp, #48]	; 0x30
   13604:	ldr	r6, [sp, #52]	; 0x34
   13608:	b	12a78 <__assert_fail@plt+0x1bec>
   1360c:	mov	r6, #0
   13610:	ldr	r2, [sp, #40]	; 0x28
   13614:	b	133a8 <__assert_fail@plt+0x251c>
   13618:	str	r6, [sp, #48]	; 0x30
   1361c:	ldr	r6, [sp, #52]	; 0x34
   13620:	b	12864 <__assert_fail@plt+0x19d8>
   13624:	add	r4, r4, #4
   13628:	mov	r6, #0
   1362c:	str	r3, [sp, #48]	; 0x30
   13630:	mov	r5, #48	; 0x30
   13634:	b	127ec <__assert_fail@plt+0x1960>
   13638:	mov	r7, r3
   1363c:	b	1346c <__assert_fail@plt+0x25e0>
   13640:	mov	r3, #1
   13644:	movw	r2, #28180	; 0x6e14
   13648:	movt	r2, #1
   1364c:	mov	r4, r3
   13650:	str	r3, [sp, #36]	; 0x24
   13654:	str	r3, [sp, #40]	; 0x28
   13658:	str	sl, [sp, #44]	; 0x2c
   1365c:	str	sl, [sp, #48]	; 0x30
   13660:	str	r3, [sp, #56]	; 0x38
   13664:	str	r2, [sp, #60]	; 0x3c
   13668:	str	sl, [sp, #68]	; 0x44
   1366c:	str	sl, [sp, #72]	; 0x48
   13670:	b	12314 <__assert_fail@plt+0x1488>
   13674:	mov	r3, r6
   13678:	mov	r5, #48	; 0x30
   1367c:	mov	r6, #0
   13680:	b	127ec <__assert_fail@plt+0x1960>
   13684:	mov	r5, r3
   13688:	b	12b64 <__assert_fail@plt+0x1cd8>
   1368c:	cmp	sl, r4
   13690:	mov	r5, #48	; 0x30
   13694:	movhi	r3, #48	; 0x30
   13698:	strbhi	r3, [r8, r4]
   1369c:	add	r3, r0, #2
   136a0:	add	r4, r0, #3
   136a4:	cmp	sl, r3
   136a8:	movhi	r1, #48	; 0x30
   136ac:	strbhi	r1, [r8, r3]
   136b0:	b	12c3c <__assert_fail@plt+0x1db0>
   136b4:	str	fp, [sp, #152]	; 0x98
   136b8:	mov	fp, r8
   136bc:	ldr	r8, [sp, #152]	; 0x98
   136c0:	b	12ad8 <__assert_fail@plt+0x1c4c>
   136c4:	ldr	r3, [sp, #164]	; 0xa4
   136c8:	ldrb	r3, [r3]
   136cc:	cmp	r3, #0
   136d0:	beq	122e4 <__assert_fail@plt+0x1458>
   136d4:	ldr	r2, [sp, #164]	; 0xa4
   136d8:	cmp	sl, r4
   136dc:	strbhi	r3, [fp, r4]
   136e0:	add	r4, r4, #1
   136e4:	ldrb	r3, [r2, #1]!
   136e8:	cmp	r3, #0
   136ec:	bne	136d8 <__assert_fail@plt+0x284c>
   136f0:	b	122e4 <__assert_fail@plt+0x1458>
   136f4:	mov	ip, r5
   136f8:	mov	r6, #0
   136fc:	ldr	r2, [sp, #40]	; 0x28
   13700:	ldr	r8, [sp, #76]	; 0x4c
   13704:	ldr	sl, [sp, #80]	; 0x50
   13708:	ldr	r5, [sp, #84]	; 0x54
   1370c:	ldr	r7, [sp, #88]	; 0x58
   13710:	ldr	r4, [sp, #92]	; 0x5c
   13714:	b	133a0 <__assert_fail@plt+0x2514>
   13718:	ldr	r2, [sp, #32]
   1371c:	ldrb	r1, [r2, r3]
   13720:	sub	r2, r1, #33	; 0x21
   13724:	cmp	r2, #29
   13728:	ldrls	pc, [pc, r2, lsl #2]
   1372c:	b	13808 <__assert_fail@plt+0x297c>
   13730:	andeq	r3, r1, r8, lsr #15
   13734:	andeq	r3, r1, r8, lsl #16
   13738:	andeq	r3, r1, r8, lsl #16
   1373c:	andeq	r3, r1, r8, lsl #16
   13740:	andeq	r3, r1, r8, lsl #16
   13744:	andeq	r3, r1, r8, lsl #16
   13748:	andeq	r3, r1, r8, lsr #15
   1374c:	andeq	r3, r1, r8, lsr #15
   13750:	andeq	r3, r1, r8, lsr #15
   13754:	andeq	r3, r1, r8, lsl #16
   13758:	andeq	r3, r1, r8, lsl #16
   1375c:	andeq	r3, r1, r8, lsl #16
   13760:	andeq	r3, r1, r8, lsr #15
   13764:	andeq	r3, r1, r8, lsl #16
   13768:	andeq	r3, r1, r8, lsr #15
   1376c:	andeq	r3, r1, r8, lsl #16
   13770:	andeq	r3, r1, r8, lsl #16
   13774:	andeq	r3, r1, r8, lsl #16
   13778:	andeq	r3, r1, r8, lsl #16
   1377c:	andeq	r3, r1, r8, lsl #16
   13780:	andeq	r3, r1, r8, lsl #16
   13784:	andeq	r3, r1, r8, lsl #16
   13788:	andeq	r3, r1, r8, lsl #16
   1378c:	andeq	r3, r1, r8, lsl #16
   13790:	andeq	r3, r1, r8, lsl #16
   13794:	andeq	r3, r1, r8, lsl #16
   13798:	andeq	r3, r1, r8, lsl #16
   1379c:	andeq	r3, r1, r8, lsr #15
   137a0:	andeq	r3, r1, r8, lsr #15
   137a4:	andeq	r3, r1, r8, lsr #15
   137a8:	ldr	r2, [sp, #44]	; 0x2c
   137ac:	cmp	r2, #0
   137b0:	bne	1390c <__assert_fail@plt+0x2a80>
   137b4:	cmp	sl, r4
   137b8:	mov	r5, r1
   137bc:	movhi	r2, #63	; 0x3f
   137c0:	mov	r9, r3
   137c4:	strbhi	r2, [r8, r4]
   137c8:	add	r2, r4, #1
   137cc:	cmp	sl, r2
   137d0:	movhi	r0, #34	; 0x22
   137d4:	strbhi	r0, [r8, r2]
   137d8:	add	r2, r4, #2
   137dc:	cmp	sl, r2
   137e0:	movhi	r0, #34	; 0x22
   137e4:	strbhi	r0, [r8, r2]
   137e8:	add	r2, r4, #3
   137ec:	add	r4, r4, #4
   137f0:	cmp	sl, r2
   137f4:	movhi	r0, #63	; 0x3f
   137f8:	strbhi	r0, [r8, r2]
   137fc:	mov	r2, #0
   13800:	mov	r6, r2
   13804:	b	12c3c <__assert_fail@plt+0x1db0>
   13808:	mov	r3, #0
   1380c:	mov	r6, r3
   13810:	b	127b4 <__assert_fail@plt+0x1928>
   13814:	ldr	r0, [sp, #28]
   13818:	mov	r1, r4
   1381c:	mov	r2, r7
   13820:	mov	r3, r5
   13824:	mov	ip, r5
   13828:	ldr	r8, [sp, #76]	; 0x4c
   1382c:	ldr	sl, [sp, #80]	; 0x50
   13830:	cmp	r1, r0
   13834:	ldr	r5, [sp, #84]	; 0x54
   13838:	ldr	r7, [sp, #88]	; 0x58
   1383c:	ldr	r4, [sp, #92]	; 0x5c
   13840:	bcs	13874 <__assert_fail@plt+0x29e8>
   13844:	ldrb	r6, [r2]
   13848:	cmp	r6, #0
   1384c:	bne	13860 <__assert_fail@plt+0x29d4>
   13850:	b	13994 <__assert_fail@plt+0x2b08>
   13854:	ldrb	r6, [r2, #1]!
   13858:	cmp	r6, #0
   1385c:	beq	1391c <__assert_fail@plt+0x2a90>
   13860:	add	r3, r3, #1
   13864:	add	r1, r9, r3
   13868:	cmp	r1, r0
   1386c:	bcc	13854 <__assert_fail@plt+0x29c8>
   13870:	mov	ip, r3
   13874:	mov	r6, #0
   13878:	ldr	r2, [sp, #40]	; 0x28
   1387c:	b	133a0 <__assert_fail@plt+0x2514>
   13880:	mov	r3, #1
   13884:	mov	r2, #0
   13888:	mov	r4, r2
   1388c:	str	r3, [sp, #36]	; 0x24
   13890:	str	r3, [sp, #40]	; 0x28
   13894:	str	r3, [sp, #44]	; 0x2c
   13898:	str	r2, [sp, #48]	; 0x30
   1389c:	str	r3, [sp, #56]	; 0x38
   138a0:	movw	r3, #28180	; 0x6e14
   138a4:	movt	r3, #1
   138a8:	str	r3, [sp, #60]	; 0x3c
   138ac:	str	r2, [sp, #68]	; 0x44
   138b0:	str	r2, [sp, #72]	; 0x48
   138b4:	b	12314 <__assert_fail@plt+0x1488>
   138b8:	mov	r2, r3
   138bc:	ldr	r3, [sp, #60]	; 0x3c
   138c0:	cmp	r3, #0
   138c4:	moveq	r2, #0
   138c8:	andne	r2, r2, #1
   138cc:	cmp	r2, #0
   138d0:	beq	138fc <__assert_fail@plt+0x2a70>
   138d4:	mov	r2, r3
   138d8:	ldrb	r3, [r3]
   138dc:	cmp	r3, #0
   138e0:	beq	138fc <__assert_fail@plt+0x2a70>
   138e4:	cmp	sl, r4
   138e8:	strbhi	r3, [fp, r4]
   138ec:	add	r4, r4, #1
   138f0:	ldrb	r3, [r2, #1]!
   138f4:	cmp	r3, #0
   138f8:	bne	138e4 <__assert_fail@plt+0x2a58>
   138fc:	cmp	sl, r4
   13900:	movhi	r3, #0
   13904:	strbhi	r3, [fp, r4]
   13908:	b	12b1c <__assert_fail@plt+0x1c90>
   1390c:	str	fp, [sp, #152]	; 0x98
   13910:	mov	fp, r8
   13914:	ldr	r8, [sp, #152]	; 0x98
   13918:	b	12ae4 <__assert_fail@plt+0x1c58>
   1391c:	mov	ip, r3
   13920:	ldr	r2, [sp, #40]	; 0x28
   13924:	b	133a0 <__assert_fail@plt+0x2514>
   13928:	str	fp, [sp, #152]	; 0x98
   1392c:	mov	fp, r8
   13930:	ldr	r8, [sp, #152]	; 0x98
   13934:	sub	r3, r8, #2
   13938:	clz	r3, r3
   1393c:	lsr	r3, r3, #5
   13940:	str	r3, [sp, #40]	; 0x28
   13944:	b	12ad8 <__assert_fail@plt+0x1c4c>
   13948:	mov	ip, #5
   1394c:	ldr	r3, [sp, #28]
   13950:	str	ip, [sp]
   13954:	ldr	r2, [sp, #156]	; 0x9c
   13958:	ldr	ip, [sp, #164]	; 0xa4
   1395c:	ldr	r0, [sp, #160]	; 0xa0
   13960:	str	r2, [sp, #4]
   13964:	ldr	r2, [sp, #32]
   13968:	ldr	r1, [sp, #72]	; 0x48
   1396c:	str	ip, [sp, #12]
   13970:	ldr	ip, [sp, #168]	; 0xa8
   13974:	str	r0, [sp, #8]
   13978:	mov	r0, fp
   1397c:	str	ip, [sp, #16]
   13980:	bl	1222c <__assert_fail@plt+0x13a0>
   13984:	mov	r4, r0
   13988:	b	12b1c <__assert_fail@plt+0x1c90>
   1398c:	mov	r8, #2
   13990:	b	12ad8 <__assert_fail@plt+0x1c4c>
   13994:	ldr	r2, [sp, #40]	; 0x28
   13998:	b	133a0 <__assert_fail@plt+0x2514>
   1399c:	mov	r3, #0
   139a0:	mov	r2, #1
   139a4:	mov	r4, r3
   139a8:	strd	r2, [sp, #36]	; 0x24
   139ac:	strd	r2, [sp, #44]	; 0x2c
   139b0:	str	r2, [sp, #56]	; 0x38
   139b4:	str	r3, [sp, #68]	; 0x44
   139b8:	str	r3, [sp, #72]	; 0x48
   139bc:	movw	r3, #28200	; 0x6e28
   139c0:	movt	r3, #1
   139c4:	str	r3, [sp, #60]	; 0x3c
   139c8:	b	12314 <__assert_fail@plt+0x1488>
   139cc:	mov	r3, #0
   139d0:	mov	r1, #1
   139d4:	mov	r2, r3
   139d8:	str	r1, [sp, #36]	; 0x24
   139dc:	str	r3, [sp, #48]	; 0x30
   139e0:	str	sl, [sp, #72]	; 0x48
   139e4:	b	1291c <__assert_fail@plt+0x1a90>
   139e8:	bl	10e74 <abort@plt>
   139ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   139f0:	mov	r4, r0
   139f4:	mov	r5, r3
   139f8:	strd	r6, [sp, #8]
   139fc:	movw	r7, #33004	; 0x80ec
   13a00:	movt	r7, #2
   13a04:	strd	r8, [sp, #16]
   13a08:	strd	sl, [sp, #24]
   13a0c:	mov	sl, r1
   13a10:	mov	fp, r2
   13a14:	str	lr, [sp, #32]
   13a18:	sub	sp, sp, #60	; 0x3c
   13a1c:	bl	10dc0 <__errno_location@plt>
   13a20:	mov	r8, r0
   13a24:	cmn	r4, #-2147483647	; 0x80000001
   13a28:	ldr	r6, [r7]
   13a2c:	movne	r0, #0
   13a30:	moveq	r0, #1
   13a34:	ldr	r3, [r8]
   13a38:	orrs	r0, r0, r4, lsr #31
   13a3c:	str	r3, [sp, #28]
   13a40:	bne	13bd0 <__assert_fail@plt+0x2d44>
   13a44:	ldr	r3, [r7, #4]
   13a48:	cmp	r3, r4
   13a4c:	bgt	13aac <__assert_fail@plt+0x2c20>
   13a50:	add	r1, r7, #8
   13a54:	sub	r2, r4, r3
   13a58:	str	r3, [sp, #52]	; 0x34
   13a5c:	cmp	r6, r1
   13a60:	add	r2, r2, #1
   13a64:	beq	13ba8 <__assert_fail@plt+0x2d1c>
   13a68:	mov	r1, #8
   13a6c:	mov	r0, r6
   13a70:	mvn	r3, #-2147483648	; 0x80000000
   13a74:	str	r1, [sp]
   13a78:	add	r1, sp, #52	; 0x34
   13a7c:	bl	14a50 <__assert_fail@plt+0x3bc4>
   13a80:	mov	r6, r0
   13a84:	str	r0, [r7]
   13a88:	ldr	r0, [r7, #4]
   13a8c:	mov	r1, #0
   13a90:	ldr	r2, [sp, #52]	; 0x34
   13a94:	sub	r2, r2, r0
   13a98:	add	r0, r6, r0, lsl #3
   13a9c:	lsl	r2, r2, #3
   13aa0:	bl	10dd8 <memset@plt>
   13aa4:	ldr	r3, [sp, #52]	; 0x34
   13aa8:	str	r3, [r7, #4]
   13aac:	ldr	r1, [r5, #4]
   13ab0:	add	r0, r6, r4, lsl #3
   13ab4:	add	ip, r5, #8
   13ab8:	mov	r3, fp
   13abc:	mov	r2, sl
   13ac0:	ldr	r7, [r0, #4]
   13ac4:	str	r0, [sp, #36]	; 0x24
   13ac8:	str	ip, [sp, #40]	; 0x28
   13acc:	orr	r0, r1, #1
   13ad0:	ldr	r9, [r6, r4, lsl #3]
   13ad4:	str	ip, [sp, #8]
   13ad8:	ldr	lr, [r5, #44]	; 0x2c
   13adc:	str	r0, [sp, #4]
   13ae0:	ldr	ip, [r5]
   13ae4:	mov	r1, r9
   13ae8:	str	ip, [sp, #32]
   13aec:	ldr	ip, [r5, #40]	; 0x28
   13af0:	str	ip, [sp, #12]
   13af4:	ldr	ip, [sp, #32]
   13af8:	str	lr, [sp, #16]
   13afc:	str	r0, [sp, #44]	; 0x2c
   13b00:	mov	r0, r7
   13b04:	str	ip, [sp]
   13b08:	bl	1222c <__assert_fail@plt+0x13a0>
   13b0c:	cmp	r9, r0
   13b10:	bhi	13b80 <__assert_fail@plt+0x2cf4>
   13b14:	add	r9, r0, #1
   13b18:	movw	r3, #33124	; 0x8164
   13b1c:	movt	r3, #2
   13b20:	cmp	r7, r3
   13b24:	str	r9, [r6, r4, lsl #3]
   13b28:	beq	13b34 <__assert_fail@plt+0x2ca8>
   13b2c:	mov	r0, r7
   13b30:	bl	15e64 <__assert_fail@plt+0x4fd8>
   13b34:	mov	r0, r9
   13b38:	bl	148a0 <__assert_fail@plt+0x3a14>
   13b3c:	ldr	ip, [r5]
   13b40:	mov	r3, fp
   13b44:	mov	r2, sl
   13b48:	mov	r1, r9
   13b4c:	mov	r7, r0
   13b50:	ldr	lr, [sp, #36]	; 0x24
   13b54:	ldr	r4, [r5, #40]	; 0x28
   13b58:	str	r0, [lr, #4]
   13b5c:	ldr	lr, [r5, #44]	; 0x2c
   13b60:	str	ip, [sp]
   13b64:	ldr	ip, [sp, #44]	; 0x2c
   13b68:	str	ip, [sp, #4]
   13b6c:	ldr	ip, [sp, #40]	; 0x28
   13b70:	str	r4, [sp, #12]
   13b74:	str	lr, [sp, #16]
   13b78:	str	ip, [sp, #8]
   13b7c:	bl	1222c <__assert_fail@plt+0x13a0>
   13b80:	ldr	r3, [sp, #28]
   13b84:	mov	r0, r7
   13b88:	str	r3, [r8]
   13b8c:	add	sp, sp, #60	; 0x3c
   13b90:	ldrd	r4, [sp]
   13b94:	ldrd	r6, [sp, #8]
   13b98:	ldrd	r8, [sp, #16]
   13b9c:	ldrd	sl, [sp, #24]
   13ba0:	add	sp, sp, #32
   13ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ba8:	mov	r1, #8
   13bac:	mvn	r3, #-2147483648	; 0x80000000
   13bb0:	str	r1, [sp]
   13bb4:	add	r1, sp, #52	; 0x34
   13bb8:	bl	14a50 <__assert_fail@plt+0x3bc4>
   13bbc:	ldrd	r2, [r7, #8]
   13bc0:	mov	r6, r0
   13bc4:	str	r0, [r7]
   13bc8:	strd	r2, [r0]
   13bcc:	b	13a88 <__assert_fail@plt+0x2bfc>
   13bd0:	bl	10e74 <abort@plt>
   13bd4:	strd	r4, [sp, #-16]!
   13bd8:	mov	r5, r0
   13bdc:	str	r6, [sp, #8]
   13be0:	str	lr, [sp, #12]
   13be4:	bl	10dc0 <__errno_location@plt>
   13be8:	mov	r4, r0
   13bec:	cmp	r5, #0
   13bf0:	ldr	r0, [pc, #32]	; 13c18 <__assert_fail@plt+0x2d8c>
   13bf4:	mov	r1, #48	; 0x30
   13bf8:	movne	r0, r5
   13bfc:	ldr	r6, [r4]
   13c00:	bl	14bc8 <__assert_fail@plt+0x3d3c>
   13c04:	str	r6, [r4]
   13c08:	ldrd	r4, [sp]
   13c0c:	ldr	r6, [sp, #8]
   13c10:	add	sp, sp, #12
   13c14:	pop	{pc}		; (ldr pc, [sp], #4)
   13c18:	andeq	r8, r2, r4, ror #4
   13c1c:	ldr	r3, [pc, #12]	; 13c30 <__assert_fail@plt+0x2da4>
   13c20:	cmp	r0, #0
   13c24:	moveq	r0, r3
   13c28:	ldr	r0, [r0]
   13c2c:	bx	lr
   13c30:	andeq	r8, r2, r4, ror #4
   13c34:	ldr	r3, [pc, #12]	; 13c48 <__assert_fail@plt+0x2dbc>
   13c38:	cmp	r0, #0
   13c3c:	moveq	r0, r3
   13c40:	str	r1, [r0]
   13c44:	bx	lr
   13c48:	andeq	r8, r2, r4, ror #4
   13c4c:	ldr	r3, [pc, #52]	; 13c88 <__assert_fail@plt+0x2dfc>
   13c50:	cmp	r0, #0
   13c54:	push	{lr}		; (str lr, [sp, #-4]!)
   13c58:	lsr	lr, r1, #5
   13c5c:	and	r1, r1, #31
   13c60:	moveq	r0, r3
   13c64:	add	r3, r0, #8
   13c68:	ldr	ip, [r3, lr, lsl #2]
   13c6c:	lsr	r0, ip, r1
   13c70:	eor	r2, r2, r0
   13c74:	and	r0, r0, #1
   13c78:	and	r2, r2, #1
   13c7c:	eor	r1, ip, r2, lsl r1
   13c80:	str	r1, [r3, lr, lsl #2]
   13c84:	pop	{pc}		; (ldr pc, [sp], #4)
   13c88:	andeq	r8, r2, r4, ror #4
   13c8c:	ldr	r3, [pc, #16]	; 13ca4 <__assert_fail@plt+0x2e18>
   13c90:	cmp	r0, #0
   13c94:	movne	r3, r0
   13c98:	ldr	r0, [r3, #4]
   13c9c:	str	r1, [r3, #4]
   13ca0:	bx	lr
   13ca4:	andeq	r8, r2, r4, ror #4
   13ca8:	ldr	r3, [pc, #48]	; 13ce0 <__assert_fail@plt+0x2e54>
   13cac:	cmp	r0, #0
   13cb0:	mov	ip, #10
   13cb4:	moveq	r0, r3
   13cb8:	cmp	r2, #0
   13cbc:	cmpne	r1, #0
   13cc0:	str	ip, [r0]
   13cc4:	beq	13cd4 <__assert_fail@plt+0x2e48>
   13cc8:	str	r1, [r0, #40]	; 0x28
   13ccc:	str	r2, [r0, #44]	; 0x2c
   13cd0:	bx	lr
   13cd4:	str	r4, [sp, #-8]!
   13cd8:	str	lr, [sp, #4]
   13cdc:	bl	10e74 <abort@plt>
   13ce0:	andeq	r8, r2, r4, ror #4
   13ce4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13ce8:	strd	r6, [sp, #8]
   13cec:	mov	r7, r0
   13cf0:	mov	r6, r1
   13cf4:	strd	r8, [sp, #16]
   13cf8:	mov	r8, r2
   13cfc:	mov	r9, r3
   13d00:	str	lr, [sp, #24]
   13d04:	sub	sp, sp, #28
   13d08:	ldr	r4, [sp, #56]	; 0x38
   13d0c:	ldr	ip, [pc, #104]	; 13d7c <__assert_fail@plt+0x2ef0>
   13d10:	cmp	r4, #0
   13d14:	moveq	r4, ip
   13d18:	bl	10dc0 <__errno_location@plt>
   13d1c:	ldr	ip, [r4, #44]	; 0x2c
   13d20:	mov	r5, r0
   13d24:	mov	r1, r6
   13d28:	add	lr, r4, #8
   13d2c:	mov	r3, r9
   13d30:	ldr	r6, [r5]
   13d34:	mov	r2, r8
   13d38:	mov	r0, r7
   13d3c:	str	ip, [sp, #16]
   13d40:	ldr	ip, [r4, #40]	; 0x28
   13d44:	str	lr, [sp, #8]
   13d48:	str	ip, [sp, #12]
   13d4c:	ldr	ip, [r4, #4]
   13d50:	str	ip, [sp, #4]
   13d54:	ldr	ip, [r4]
   13d58:	str	ip, [sp]
   13d5c:	bl	1222c <__assert_fail@plt+0x13a0>
   13d60:	str	r6, [r5]
   13d64:	add	sp, sp, #28
   13d68:	ldrd	r4, [sp]
   13d6c:	ldrd	r6, [sp, #8]
   13d70:	ldrd	r8, [sp, #16]
   13d74:	add	sp, sp, #24
   13d78:	pop	{pc}		; (ldr pc, [sp], #4)
   13d7c:	andeq	r8, r2, r4, ror #4
   13d80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13d84:	cmp	r3, #0
   13d88:	ldr	r4, [pc, #220]	; 13e6c <__assert_fail@plt+0x2fe0>
   13d8c:	movne	r4, r3
   13d90:	strd	r6, [sp, #8]
   13d94:	mov	r6, r2
   13d98:	strd	r8, [sp, #16]
   13d9c:	mov	r9, r0
   13da0:	strd	sl, [sp, #24]
   13da4:	mov	sl, r1
   13da8:	str	lr, [sp, #32]
   13dac:	sub	sp, sp, #44	; 0x2c
   13db0:	bl	10dc0 <__errno_location@plt>
   13db4:	ldr	r5, [r4, #4]
   13db8:	mov	r7, r0
   13dbc:	mov	r1, #0
   13dc0:	add	r8, r4, #8
   13dc4:	mov	r3, sl
   13dc8:	ldr	ip, [r4, #44]	; 0x2c
   13dcc:	mov	r2, r9
   13dd0:	mov	r0, r1
   13dd4:	ldr	lr, [r7]
   13dd8:	cmp	r6, r1
   13ddc:	orreq	r5, r5, #1
   13de0:	str	ip, [sp, #16]
   13de4:	ldr	ip, [r4, #40]	; 0x28
   13de8:	stmib	sp, {r5, r8, ip}
   13dec:	ldr	ip, [r4]
   13df0:	str	lr, [sp, #28]
   13df4:	str	ip, [sp]
   13df8:	bl	1222c <__assert_fail@plt+0x13a0>
   13dfc:	add	r1, r0, #1
   13e00:	mov	fp, r0
   13e04:	mov	r0, r1
   13e08:	str	r1, [sp, #36]	; 0x24
   13e0c:	bl	148a0 <__assert_fail@plt+0x3a14>
   13e10:	ldr	ip, [r4, #44]	; 0x2c
   13e14:	mov	r3, sl
   13e18:	mov	r2, r9
   13e1c:	ldr	r1, [sp, #36]	; 0x24
   13e20:	str	ip, [sp, #16]
   13e24:	ldr	ip, [r4, #40]	; 0x28
   13e28:	str	r0, [sp, #32]
   13e2c:	stmib	sp, {r5, r8, ip}
   13e30:	ldr	ip, [r4]
   13e34:	str	ip, [sp]
   13e38:	bl	1222c <__assert_fail@plt+0x13a0>
   13e3c:	ldr	lr, [sp, #28]
   13e40:	cmp	r6, #0
   13e44:	ldr	r0, [sp, #32]
   13e48:	str	lr, [r7]
   13e4c:	strne	fp, [r6]
   13e50:	add	sp, sp, #44	; 0x2c
   13e54:	ldrd	r4, [sp]
   13e58:	ldrd	r6, [sp, #8]
   13e5c:	ldrd	r8, [sp, #16]
   13e60:	ldrd	sl, [sp, #24]
   13e64:	add	sp, sp, #32
   13e68:	pop	{pc}		; (ldr pc, [sp], #4)
   13e6c:	andeq	r8, r2, r4, ror #4
   13e70:	mov	r3, r2
   13e74:	mov	r2, #0
   13e78:	b	13d80 <__assert_fail@plt+0x2ef4>
   13e7c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13e80:	movw	r5, #33004	; 0x80ec
   13e84:	movt	r5, #2
   13e88:	ldr	r3, [r5, #4]
   13e8c:	strd	r6, [sp, #8]
   13e90:	str	r8, [sp, #16]
   13e94:	str	lr, [sp, #20]
   13e98:	ldr	r7, [r5]
   13e9c:	cmp	r3, #1
   13ea0:	ble	13ec4 <__assert_fail@plt+0x3038>
   13ea4:	mov	r4, #1
   13ea8:	add	r6, r7, #4
   13eac:	ldr	r0, [r6, r4, lsl #3]
   13eb0:	add	r4, r4, #1
   13eb4:	bl	15e64 <__assert_fail@plt+0x4fd8>
   13eb8:	ldr	r3, [r5, #4]
   13ebc:	cmp	r3, r4
   13ec0:	bgt	13eac <__assert_fail@plt+0x3020>
   13ec4:	ldr	r0, [r7, #4]
   13ec8:	movw	r4, #33124	; 0x8164
   13ecc:	movt	r4, #2
   13ed0:	cmp	r0, r4
   13ed4:	beq	13ee8 <__assert_fail@plt+0x305c>
   13ed8:	bl	15e64 <__assert_fail@plt+0x4fd8>
   13edc:	mov	r3, #256	; 0x100
   13ee0:	str	r3, [r5, #8]
   13ee4:	str	r4, [r5, #12]
   13ee8:	ldr	r4, [pc, #44]	; 13f1c <__assert_fail@plt+0x3090>
   13eec:	cmp	r7, r4
   13ef0:	beq	13f00 <__assert_fail@plt+0x3074>
   13ef4:	mov	r0, r7
   13ef8:	bl	15e64 <__assert_fail@plt+0x4fd8>
   13efc:	str	r4, [r5]
   13f00:	mov	r3, #1
   13f04:	ldrd	r6, [sp, #8]
   13f08:	str	r3, [r5, #4]
   13f0c:	ldrd	r4, [sp]
   13f10:	ldr	r8, [sp, #16]
   13f14:	add	sp, sp, #20
   13f18:	pop	{pc}		; (ldr pc, [sp], #4)
   13f1c:	strdeq	r8, [r2], -r4
   13f20:	ldr	r3, [pc, #4]	; 13f2c <__assert_fail@plt+0x30a0>
   13f24:	mvn	r2, #0
   13f28:	b	139ec <__assert_fail@plt+0x2b60>
   13f2c:	andeq	r8, r2, r4, ror #4
   13f30:	ldr	r3, [pc]	; 13f38 <__assert_fail@plt+0x30ac>
   13f34:	b	139ec <__assert_fail@plt+0x2b60>
   13f38:	andeq	r8, r2, r4, ror #4
   13f3c:	mov	r1, r0
   13f40:	ldr	r3, [pc, #8]	; 13f50 <__assert_fail@plt+0x30c4>
   13f44:	mvn	r2, #0
   13f48:	mov	r0, #0
   13f4c:	b	139ec <__assert_fail@plt+0x2b60>
   13f50:	andeq	r8, r2, r4, ror #4
   13f54:	mov	r2, r1
   13f58:	ldr	r3, [pc, #8]	; 13f68 <__assert_fail@plt+0x30dc>
   13f5c:	mov	r1, r0
   13f60:	mov	r0, #0
   13f64:	b	139ec <__assert_fail@plt+0x2b60>
   13f68:	andeq	r8, r2, r4, ror #4
   13f6c:	strd	r4, [sp, #-12]!
   13f70:	mov	r5, r2
   13f74:	mov	r4, r0
   13f78:	str	lr, [sp, #8]
   13f7c:	sub	sp, sp, #52	; 0x34
   13f80:	mov	r0, sp
   13f84:	bl	12088 <__assert_fail@plt+0x11fc>
   13f88:	mov	r3, sp
   13f8c:	mov	r1, r5
   13f90:	mov	r0, r4
   13f94:	mvn	r2, #0
   13f98:	bl	139ec <__assert_fail@plt+0x2b60>
   13f9c:	add	sp, sp, #52	; 0x34
   13fa0:	ldrd	r4, [sp]
   13fa4:	add	sp, sp, #8
   13fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   13fac:	strd	r4, [sp, #-16]!
   13fb0:	mov	r5, r2
   13fb4:	mov	r4, r0
   13fb8:	str	r6, [sp, #8]
   13fbc:	mov	r6, r3
   13fc0:	str	lr, [sp, #12]
   13fc4:	sub	sp, sp, #48	; 0x30
   13fc8:	mov	r0, sp
   13fcc:	bl	12088 <__assert_fail@plt+0x11fc>
   13fd0:	mov	r3, sp
   13fd4:	mov	r2, r6
   13fd8:	mov	r1, r5
   13fdc:	mov	r0, r4
   13fe0:	bl	139ec <__assert_fail@plt+0x2b60>
   13fe4:	add	sp, sp, #48	; 0x30
   13fe8:	ldrd	r4, [sp]
   13fec:	ldr	r6, [sp, #8]
   13ff0:	add	sp, sp, #12
   13ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ff8:	mov	r2, r1
   13ffc:	mov	r1, r0
   14000:	mov	r0, #0
   14004:	b	13f6c <__assert_fail@plt+0x30e0>
   14008:	mov	r3, r2
   1400c:	mov	r2, r1
   14010:	mov	r1, r0
   14014:	mov	r0, #0
   14018:	b	13fac <__assert_fail@plt+0x3120>
   1401c:	ldr	ip, [pc, #140]	; 140b0 <__assert_fail@plt+0x3224>
   14020:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14024:	ldrd	r4, [ip]
   14028:	strd	r6, [sp, #8]
   1402c:	ldrd	r6, [ip, #8]
   14030:	strd	r8, [sp, #16]
   14034:	lsr	r9, r2, #5
   14038:	str	lr, [sp, #24]
   1403c:	sub	sp, sp, #52	; 0x34
   14040:	and	lr, r2, #31
   14044:	add	r8, sp, #8
   14048:	mov	r2, r1
   1404c:	strd	r4, [sp]
   14050:	mov	r1, r0
   14054:	mov	r3, sp
   14058:	strd	r6, [sp, #8]
   1405c:	mov	r0, #0
   14060:	ldrd	r4, [ip, #16]
   14064:	ldrd	r6, [ip, #24]
   14068:	strd	r4, [sp, #16]
   1406c:	ldrd	r4, [ip, #32]
   14070:	strd	r6, [sp, #24]
   14074:	ldrd	r6, [ip, #40]	; 0x28
   14078:	strd	r4, [sp, #32]
   1407c:	strd	r6, [sp, #40]	; 0x28
   14080:	ldr	ip, [r8, r9, lsl #2]
   14084:	mvn	r4, ip, lsr lr
   14088:	and	r4, r4, #1
   1408c:	eor	lr, ip, r4, lsl lr
   14090:	str	lr, [r8, r9, lsl #2]
   14094:	bl	139ec <__assert_fail@plt+0x2b60>
   14098:	add	sp, sp, #52	; 0x34
   1409c:	ldrd	r4, [sp]
   140a0:	ldrd	r6, [sp, #8]
   140a4:	ldrd	r8, [sp, #16]
   140a8:	add	sp, sp, #24
   140ac:	pop	{pc}		; (ldr pc, [sp], #4)
   140b0:	andeq	r8, r2, r4, ror #4
   140b4:	mov	r2, r1
   140b8:	mvn	r1, #0
   140bc:	b	1401c <__assert_fail@plt+0x3190>
   140c0:	mov	r2, #58	; 0x3a
   140c4:	mvn	r1, #0
   140c8:	b	1401c <__assert_fail@plt+0x3190>
   140cc:	mov	r2, #58	; 0x3a
   140d0:	b	1401c <__assert_fail@plt+0x3190>
   140d4:	strd	r4, [sp, #-20]!	; 0xffffffec
   140d8:	strd	r6, [sp, #8]
   140dc:	mov	r6, r0
   140e0:	mov	r7, r2
   140e4:	str	lr, [sp, #16]
   140e8:	sub	sp, sp, #100	; 0x64
   140ec:	mov	r0, sp
   140f0:	bl	12088 <__assert_fail@plt+0x11fc>
   140f4:	ldrd	r4, [sp, #8]
   140f8:	mov	r1, r7
   140fc:	mov	r0, r6
   14100:	add	r3, sp, #48	; 0x30
   14104:	mvn	r2, #0
   14108:	ldrd	r6, [sp]
   1410c:	strd	r4, [sp, #56]	; 0x38
   14110:	ldrd	r4, [sp, #16]
   14114:	strd	r6, [sp, #48]	; 0x30
   14118:	ldrd	r6, [sp, #32]
   1411c:	ldr	lr, [sp, #60]	; 0x3c
   14120:	strd	r4, [sp, #64]	; 0x40
   14124:	ldrd	r4, [sp, #24]
   14128:	mvn	ip, lr
   1412c:	and	ip, ip, #67108864	; 0x4000000
   14130:	strd	r4, [sp, #72]	; 0x48
   14134:	eor	ip, ip, lr
   14138:	ldrd	r4, [sp, #40]	; 0x28
   1413c:	str	ip, [sp, #60]	; 0x3c
   14140:	strd	r6, [sp, #80]	; 0x50
   14144:	strd	r4, [sp, #88]	; 0x58
   14148:	bl	139ec <__assert_fail@plt+0x2b60>
   1414c:	add	sp, sp, #100	; 0x64
   14150:	ldrd	r4, [sp]
   14154:	ldrd	r6, [sp, #8]
   14158:	add	sp, sp, #16
   1415c:	pop	{pc}		; (ldr pc, [sp], #4)
   14160:	ldr	ip, [pc, #156]	; 14204 <__assert_fail@plt+0x3378>
   14164:	cmp	r2, #0
   14168:	cmpne	r1, #0
   1416c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14170:	strd	r6, [sp, #8]
   14174:	mov	r6, r2
   14178:	str	r8, [sp, #16]
   1417c:	mov	r8, r3
   14180:	strd	sl, [sp, #20]
   14184:	ldrd	r4, [ip]
   14188:	str	lr, [sp, #28]
   1418c:	sub	sp, sp, #48	; 0x30
   14190:	mov	lr, #10
   14194:	ldrd	r2, [ip, #8]
   14198:	ldrd	sl, [ip, #16]
   1419c:	strd	r4, [sp]
   141a0:	ldrd	r4, [ip, #32]
   141a4:	str	lr, [sp]
   141a8:	strd	r2, [sp, #8]
   141ac:	strd	sl, [sp, #16]
   141b0:	ldrd	r2, [ip, #24]
   141b4:	ldrd	sl, [ip, #40]	; 0x28
   141b8:	strd	r2, [sp, #24]
   141bc:	strd	r4, [sp, #32]
   141c0:	strd	sl, [sp, #40]	; 0x28
   141c4:	beq	14200 <__assert_fail@plt+0x3374>
   141c8:	ldr	r2, [sp, #80]	; 0x50
   141cc:	mov	r7, r1
   141d0:	mov	r3, sp
   141d4:	mov	r1, r8
   141d8:	str	r7, [sp, #40]	; 0x28
   141dc:	str	r6, [sp, #44]	; 0x2c
   141e0:	bl	139ec <__assert_fail@plt+0x2b60>
   141e4:	add	sp, sp, #48	; 0x30
   141e8:	ldrd	r4, [sp]
   141ec:	ldrd	r6, [sp, #8]
   141f0:	ldr	r8, [sp, #16]
   141f4:	ldrd	sl, [sp, #20]
   141f8:	add	sp, sp, #28
   141fc:	pop	{pc}		; (ldr pc, [sp], #4)
   14200:	bl	10e74 <abort@plt>
   14204:	andeq	r8, r2, r4, ror #4
   14208:	mvn	ip, #0
   1420c:	push	{lr}		; (str lr, [sp, #-4]!)
   14210:	sub	sp, sp, #12
   14214:	str	ip, [sp]
   14218:	bl	14160 <__assert_fail@plt+0x32d4>
   1421c:	add	sp, sp, #12
   14220:	pop	{pc}		; (ldr pc, [sp], #4)
   14224:	mvn	ip, #0
   14228:	push	{lr}		; (str lr, [sp, #-4]!)
   1422c:	sub	sp, sp, #12
   14230:	mov	r3, r2
   14234:	mov	r2, r1
   14238:	mov	r1, r0
   1423c:	mov	r0, #0
   14240:	str	ip, [sp]
   14244:	bl	14160 <__assert_fail@plt+0x32d4>
   14248:	add	sp, sp, #12
   1424c:	pop	{pc}		; (ldr pc, [sp], #4)
   14250:	push	{lr}		; (str lr, [sp, #-4]!)
   14254:	sub	sp, sp, #12
   14258:	str	r3, [sp]
   1425c:	mov	r3, r2
   14260:	mov	r2, r1
   14264:	mov	r1, r0
   14268:	mov	r0, #0
   1426c:	bl	14160 <__assert_fail@plt+0x32d4>
   14270:	add	sp, sp, #12
   14274:	pop	{pc}		; (ldr pc, [sp], #4)
   14278:	ldr	r3, [pc]	; 14280 <__assert_fail@plt+0x33f4>
   1427c:	b	139ec <__assert_fail@plt+0x2b60>
   14280:	strdeq	r8, [r2], -ip
   14284:	mov	r2, r1
   14288:	ldr	r3, [pc, #8]	; 14298 <__assert_fail@plt+0x340c>
   1428c:	mov	r1, r0
   14290:	mov	r0, #0
   14294:	b	139ec <__assert_fail@plt+0x2b60>
   14298:	strdeq	r8, [r2], -ip
   1429c:	ldr	r3, [pc, #4]	; 142a8 <__assert_fail@plt+0x341c>
   142a0:	mvn	r2, #0
   142a4:	b	139ec <__assert_fail@plt+0x2b60>
   142a8:	strdeq	r8, [r2], -ip
   142ac:	mov	r1, r0
   142b0:	ldr	r3, [pc, #8]	; 142c0 <__assert_fail@plt+0x3434>
   142b4:	mvn	r2, #0
   142b8:	mov	r0, #0
   142bc:	b	139ec <__assert_fail@plt+0x2b60>
   142c0:	strdeq	r8, [r2], -ip
   142c4:	cmp	r1, #0
   142c8:	strd	r4, [sp, #-16]!
   142cc:	mov	ip, r3
   142d0:	str	r6, [sp, #8]
   142d4:	mov	r4, r0
   142d8:	str	lr, [sp, #12]
   142dc:	sub	sp, sp, #32
   142e0:	ldr	r5, [sp, #48]	; 0x30
   142e4:	ldr	r6, [sp, #52]	; 0x34
   142e8:	beq	1442c <__assert_fail@plt+0x35a0>
   142ec:	mov	r3, r1
   142f0:	mov	r1, #1
   142f4:	stm	sp, {r2, ip}
   142f8:	movw	r2, #28308	; 0x6e94
   142fc:	movt	r2, #1
   14300:	bl	10dfc <__fprintf_chk@plt>
   14304:	mov	r2, #5
   14308:	movw	r1, #28328	; 0x6ea8
   1430c:	movt	r1, #1
   14310:	mov	r0, #0
   14314:	bl	10cc4 <dcgettext@plt>
   14318:	movw	ip, #2022	; 0x7e6
   1431c:	mov	r3, r0
   14320:	mov	r1, #1
   14324:	movw	r2, #29056	; 0x7180
   14328:	movt	r2, #1
   1432c:	mov	r0, r4
   14330:	str	ip, [sp]
   14334:	bl	10dfc <__fprintf_chk@plt>
   14338:	mov	r1, r4
   1433c:	mov	r0, #10
   14340:	bl	10cb8 <fputc_unlocked@plt>
   14344:	mov	r2, #5
   14348:	movw	r1, #28332	; 0x6eac
   1434c:	movt	r1, #1
   14350:	mov	r0, #0
   14354:	bl	10cc4 <dcgettext@plt>
   14358:	mov	r2, r0
   1435c:	mov	r1, #1
   14360:	movw	r3, #28504	; 0x6f58
   14364:	movt	r3, #1
   14368:	mov	r0, r4
   1436c:	bl	10dfc <__fprintf_chk@plt>
   14370:	mov	r1, r4
   14374:	mov	r0, #10
   14378:	bl	10cb8 <fputc_unlocked@plt>
   1437c:	cmp	r6, #9
   14380:	ldrls	pc, [pc, r6, lsl #2]
   14384:	b	14698 <__assert_fail@plt+0x380c>
   14388:	andeq	r4, r1, r8, lsl r4
   1438c:	andeq	r4, r1, r8, asr #8
   14390:	andeq	r4, r1, r4, lsl #9
   14394:	andeq	r4, r1, r4, asr #9
   14398:	andeq	r4, r1, ip, lsl #10
   1439c:	andeq	r4, r1, r4, asr #10
   143a0:	andeq	r4, r1, ip, lsl #11
   143a4:	andeq	r4, r1, r0, ror #11
   143a8:	andeq	r4, r1, r8, lsr r6
   143ac:			; <UNDEFINED> instruction: 0x000143b0
   143b0:	movw	r1, #28808	; 0x7088
   143b4:	movt	r1, #1
   143b8:	mov	r2, #5
   143bc:	mov	r0, #0
   143c0:	bl	10cc4 <dcgettext@plt>
   143c4:	ldr	lr, [r5, #4]
   143c8:	mov	r2, r0
   143cc:	mov	r1, #1
   143d0:	mov	r0, r4
   143d4:	ldr	r3, [r5, #8]
   143d8:	ldr	ip, [r5, #32]
   143dc:	str	lr, [sp]
   143e0:	ldr	lr, [r5, #12]
   143e4:	str	ip, [sp, #28]
   143e8:	ldr	ip, [r5, #28]
   143ec:	str	r3, [sp, #4]
   143f0:	ldr	r3, [r5, #16]
   143f4:	str	lr, [sp, #8]
   143f8:	ldr	lr, [r5, #20]
   143fc:	str	ip, [sp, #24]
   14400:	ldr	ip, [r5, #24]
   14404:	str	r3, [sp, #12]
   14408:	ldr	r3, [r5]
   1440c:	str	lr, [sp, #16]
   14410:	str	ip, [sp, #20]
   14414:	bl	10dfc <__fprintf_chk@plt>
   14418:	add	sp, sp, #32
   1441c:	ldrd	r4, [sp]
   14420:	ldr	r6, [sp, #8]
   14424:	add	sp, sp, #12
   14428:	pop	{pc}		; (ldr pc, [sp], #4)
   1442c:	mov	r3, r2
   14430:	mov	r1, #1
   14434:	str	ip, [sp]
   14438:	movw	r2, #28320	; 0x6ea0
   1443c:	movt	r2, #1
   14440:	bl	10dfc <__fprintf_chk@plt>
   14444:	b	14304 <__assert_fail@plt+0x3478>
   14448:	mov	r2, #5
   1444c:	movw	r1, #28540	; 0x6f7c
   14450:	movt	r1, #1
   14454:	mov	r0, #0
   14458:	bl	10cc4 <dcgettext@plt>
   1445c:	ldr	r3, [r5]
   14460:	mov	r2, r0
   14464:	mov	r1, #1
   14468:	mov	r0, r4
   1446c:	add	sp, sp, #32
   14470:	ldrd	r4, [sp]
   14474:	ldr	r6, [sp, #8]
   14478:	ldr	lr, [sp, #12]
   1447c:	add	sp, sp, #16
   14480:	b	10dfc <__fprintf_chk@plt>
   14484:	mov	r2, #5
   14488:	movw	r1, #28556	; 0x6f8c
   1448c:	movt	r1, #1
   14490:	mov	r0, #0
   14494:	bl	10cc4 <dcgettext@plt>
   14498:	ldm	r5, {r3, ip}
   1449c:	mov	r2, r0
   144a0:	mov	r1, #1
   144a4:	mov	r0, r4
   144a8:	str	ip, [sp, #48]	; 0x30
   144ac:	add	sp, sp, #32
   144b0:	ldrd	r4, [sp]
   144b4:	ldr	r6, [sp, #8]
   144b8:	ldr	lr, [sp, #12]
   144bc:	add	sp, sp, #16
   144c0:	b	10dfc <__fprintf_chk@plt>
   144c4:	mov	r2, #5
   144c8:	movw	r1, #28580	; 0x6fa4
   144cc:	movt	r1, #1
   144d0:	mov	r0, #0
   144d4:	bl	10cc4 <dcgettext@plt>
   144d8:	ldm	r5, {r3, lr}
   144dc:	mov	r2, r0
   144e0:	mov	r1, #1
   144e4:	mov	r0, r4
   144e8:	ldr	ip, [r5, #8]
   144ec:	str	lr, [sp, #48]	; 0x30
   144f0:	str	ip, [sp, #52]	; 0x34
   144f4:	add	sp, sp, #32
   144f8:	ldrd	r4, [sp]
   144fc:	ldr	r6, [sp, #8]
   14500:	ldr	lr, [sp, #12]
   14504:	add	sp, sp, #16
   14508:	b	10dfc <__fprintf_chk@plt>
   1450c:	mov	r2, #5
   14510:	movw	r1, #28608	; 0x6fc0
   14514:	movt	r1, #1
   14518:	mov	r0, #0
   1451c:	bl	10cc4 <dcgettext@plt>
   14520:	ldmib	r5, {r3, ip, lr}
   14524:	mov	r2, r0
   14528:	mov	r1, #1
   1452c:	mov	r0, r4
   14530:	str	r3, [sp]
   14534:	ldr	r3, [r5]
   14538:	stmib	sp, {ip, lr}
   1453c:	bl	10dfc <__fprintf_chk@plt>
   14540:	b	14418 <__assert_fail@plt+0x358c>
   14544:	mov	r2, #5
   14548:	movw	r1, #28640	; 0x6fe0
   1454c:	movt	r1, #1
   14550:	mov	r0, #0
   14554:	bl	10cc4 <dcgettext@plt>
   14558:	ldmib	r5, {ip, lr}
   1455c:	mov	r2, r0
   14560:	mov	r1, #1
   14564:	mov	r0, r4
   14568:	ldr	r3, [r5, #16]
   1456c:	str	ip, [sp]
   14570:	ldr	ip, [r5, #12]
   14574:	str	r3, [sp, #12]
   14578:	ldr	r3, [r5]
   1457c:	str	lr, [sp, #4]
   14580:	str	ip, [sp, #8]
   14584:	bl	10dfc <__fprintf_chk@plt>
   14588:	b	14418 <__assert_fail@plt+0x358c>
   1458c:	mov	r2, #5
   14590:	movw	r1, #28676	; 0x7004
   14594:	movt	r1, #1
   14598:	mov	r0, #0
   1459c:	bl	10cc4 <dcgettext@plt>
   145a0:	ldr	lr, [r5, #4]
   145a4:	mov	r2, r0
   145a8:	mov	r1, #1
   145ac:	mov	r0, r4
   145b0:	ldr	r3, [r5, #8]
   145b4:	ldr	ip, [r5, #20]
   145b8:	str	lr, [sp]
   145bc:	ldr	lr, [r5, #12]
   145c0:	str	ip, [sp, #16]
   145c4:	ldr	ip, [r5, #16]
   145c8:	str	r3, [sp, #4]
   145cc:	ldr	r3, [r5]
   145d0:	str	lr, [sp, #8]
   145d4:	str	ip, [sp, #12]
   145d8:	bl	10dfc <__fprintf_chk@plt>
   145dc:	b	14418 <__assert_fail@plt+0x358c>
   145e0:	mov	r2, #5
   145e4:	movw	r1, #28716	; 0x702c
   145e8:	movt	r1, #1
   145ec:	mov	r0, #0
   145f0:	bl	10cc4 <dcgettext@plt>
   145f4:	ldmib	r5, {r3, ip}
   145f8:	mov	r2, r0
   145fc:	mov	r1, #1
   14600:	mov	r0, r4
   14604:	ldr	lr, [r5, #24]
   14608:	str	r3, [sp]
   1460c:	ldr	r3, [r5, #12]
   14610:	str	lr, [sp, #20]
   14614:	ldr	lr, [r5, #20]
   14618:	str	ip, [sp, #4]
   1461c:	ldr	ip, [r5, #16]
   14620:	str	r3, [sp, #8]
   14624:	ldr	r3, [r5]
   14628:	str	ip, [sp, #12]
   1462c:	str	lr, [sp, #16]
   14630:	bl	10dfc <__fprintf_chk@plt>
   14634:	b	14418 <__assert_fail@plt+0x358c>
   14638:	mov	r2, #5
   1463c:	movw	r1, #28760	; 0x7058
   14640:	movt	r1, #1
   14644:	mov	r0, #0
   14648:	bl	10cc4 <dcgettext@plt>
   1464c:	ldmib	r5, {ip, lr}
   14650:	mov	r2, r0
   14654:	mov	r1, #1
   14658:	mov	r0, r4
   1465c:	ldr	r3, [r5, #28]
   14660:	str	ip, [sp]
   14664:	ldr	ip, [r5, #12]
   14668:	str	r3, [sp, #24]
   1466c:	ldr	r3, [r5, #24]
   14670:	str	lr, [sp, #4]
   14674:	ldr	lr, [r5, #16]
   14678:	str	ip, [sp, #8]
   1467c:	ldr	ip, [r5, #20]
   14680:	str	r3, [sp, #20]
   14684:	ldr	r3, [r5]
   14688:	str	lr, [sp, #12]
   1468c:	str	ip, [sp, #16]
   14690:	bl	10dfc <__fprintf_chk@plt>
   14694:	b	14418 <__assert_fail@plt+0x358c>
   14698:	movw	r1, #28860	; 0x70bc
   1469c:	movt	r1, #1
   146a0:	b	143b8 <__assert_fail@plt+0x352c>
   146a4:	strd	r4, [sp, #-12]!
   146a8:	str	lr, [sp, #8]
   146ac:	sub	sp, sp, #12
   146b0:	ldr	r5, [sp, #24]
   146b4:	ldr	ip, [r5]
   146b8:	cmp	ip, #0
   146bc:	beq	146d8 <__assert_fail@plt+0x384c>
   146c0:	mov	lr, r5
   146c4:	mov	ip, #0
   146c8:	ldr	r4, [lr, #4]!
   146cc:	add	ip, ip, #1
   146d0:	cmp	r4, #0
   146d4:	bne	146c8 <__assert_fail@plt+0x383c>
   146d8:	stm	sp, {r5, ip}
   146dc:	bl	142c4 <__assert_fail@plt+0x3438>
   146e0:	add	sp, sp, #12
   146e4:	ldrd	r4, [sp]
   146e8:	add	sp, sp, #8
   146ec:	pop	{pc}		; (ldr pc, [sp], #4)
   146f0:	strd	r4, [sp, #-16]!
   146f4:	mov	ip, #0
   146f8:	str	r6, [sp, #8]
   146fc:	str	lr, [sp, #12]
   14700:	sub	sp, sp, #48	; 0x30
   14704:	ldr	r5, [sp, #64]	; 0x40
   14708:	add	r6, sp, #8
   1470c:	mov	r4, r6
   14710:	ldr	lr, [r5], #4
   14714:	cmp	lr, #0
   14718:	str	lr, [r4], #4
   1471c:	beq	1472c <__assert_fail@plt+0x38a0>
   14720:	add	ip, ip, #1
   14724:	cmp	ip, #10
   14728:	bne	14710 <__assert_fail@plt+0x3884>
   1472c:	stm	sp, {r6, ip}
   14730:	bl	142c4 <__assert_fail@plt+0x3438>
   14734:	add	sp, sp, #48	; 0x30
   14738:	ldrd	r4, [sp]
   1473c:	ldr	r6, [sp, #8]
   14740:	add	sp, sp, #12
   14744:	pop	{pc}		; (ldr pc, [sp], #4)
   14748:	push	{r3}		; (str r3, [sp, #-4]!)
   1474c:	mov	ip, #0
   14750:	strd	r4, [sp, #-12]!
   14754:	str	lr, [sp, #8]
   14758:	sub	sp, sp, #56	; 0x38
   1475c:	add	r3, sp, #72	; 0x48
   14760:	add	r5, sp, #16
   14764:	mov	r4, r3
   14768:	mov	lr, r5
   1476c:	str	r3, [sp, #12]
   14770:	ldr	r3, [r4], #4
   14774:	cmp	r3, #0
   14778:	str	r3, [lr], #4
   1477c:	beq	1478c <__assert_fail@plt+0x3900>
   14780:	add	ip, ip, #1
   14784:	cmp	ip, #10
   14788:	bne	14770 <__assert_fail@plt+0x38e4>
   1478c:	ldr	r3, [sp, #68]	; 0x44
   14790:	stm	sp, {r5, ip}
   14794:	bl	142c4 <__assert_fail@plt+0x3438>
   14798:	add	sp, sp, #56	; 0x38
   1479c:	ldrd	r4, [sp]
   147a0:	ldr	lr, [sp, #8]
   147a4:	add	sp, sp, #12
   147a8:	add	sp, sp, #4
   147ac:	bx	lr
   147b0:	movw	r3, #33092	; 0x8144
   147b4:	movt	r3, #2
   147b8:	str	r4, [sp, #-8]!
   147bc:	mov	r0, #10
   147c0:	ldr	r1, [r3]
   147c4:	str	lr, [sp, #4]
   147c8:	bl	10cb8 <fputc_unlocked@plt>
   147cc:	mov	r2, #5
   147d0:	movw	r1, #28920	; 0x70f8
   147d4:	movt	r1, #1
   147d8:	mov	r0, #0
   147dc:	bl	10cc4 <dcgettext@plt>
   147e0:	mov	r1, r0
   147e4:	movw	r2, #28940	; 0x710c
   147e8:	movt	r2, #1
   147ec:	mov	r0, #1
   147f0:	bl	10de4 <__printf_chk@plt>
   147f4:	mov	r2, #5
   147f8:	movw	r1, #28964	; 0x7124
   147fc:	movt	r1, #1
   14800:	mov	r0, #0
   14804:	bl	10cc4 <dcgettext@plt>
   14808:	mov	r1, r0
   1480c:	movw	r3, #27036	; 0x699c
   14810:	movt	r3, #1
   14814:	movw	r2, #27076	; 0x69c4
   14818:	movt	r2, #1
   1481c:	mov	r0, #1
   14820:	bl	10de4 <__printf_chk@plt>
   14824:	mov	r2, #5
   14828:	movw	r1, #28984	; 0x7138
   1482c:	movt	r1, #1
   14830:	mov	r0, #0
   14834:	bl	10cc4 <dcgettext@plt>
   14838:	mov	r1, r0
   1483c:	movw	r2, #29024	; 0x7160
   14840:	movt	r2, #1
   14844:	mov	r0, #1
   14848:	ldr	r4, [sp]
   1484c:	ldr	lr, [sp, #4]
   14850:	add	sp, sp, #8
   14854:	b	10de4 <__printf_chk@plt>
   14858:	str	r4, [sp, #-8]!
   1485c:	str	lr, [sp, #4]
   14860:	bl	15c34 <__assert_fail@plt+0x4da8>
   14864:	cmp	r0, #0
   14868:	beq	14878 <__assert_fail@plt+0x39ec>
   1486c:	ldr	r4, [sp]
   14870:	add	sp, sp, #4
   14874:	pop	{pc}		; (ldr pc, [sp], #4)
   14878:	bl	14cd0 <__assert_fail@plt+0x3e44>
   1487c:	str	r4, [sp, #-8]!
   14880:	str	lr, [sp, #4]
   14884:	bl	15c34 <__assert_fail@plt+0x4da8>
   14888:	cmp	r0, #0
   1488c:	beq	1489c <__assert_fail@plt+0x3a10>
   14890:	ldr	r4, [sp]
   14894:	add	sp, sp, #4
   14898:	pop	{pc}		; (ldr pc, [sp], #4)
   1489c:	bl	14cd0 <__assert_fail@plt+0x3e44>
   148a0:	str	r4, [sp, #-8]!
   148a4:	str	lr, [sp, #4]
   148a8:	bl	15c34 <__assert_fail@plt+0x4da8>
   148ac:	cmp	r0, #0
   148b0:	beq	148c0 <__assert_fail@plt+0x3a34>
   148b4:	ldr	r4, [sp]
   148b8:	add	sp, sp, #4
   148bc:	pop	{pc}		; (ldr pc, [sp], #4)
   148c0:	bl	14cd0 <__assert_fail@plt+0x3e44>
   148c4:	strd	r4, [sp, #-16]!
   148c8:	mov	r5, r0
   148cc:	mov	r4, r1
   148d0:	str	r6, [sp, #8]
   148d4:	str	lr, [sp, #12]
   148d8:	bl	15c70 <__assert_fail@plt+0x4de4>
   148dc:	cmp	r0, #0
   148e0:	beq	148f4 <__assert_fail@plt+0x3a68>
   148e4:	ldrd	r4, [sp]
   148e8:	ldr	r6, [sp, #8]
   148ec:	add	sp, sp, #12
   148f0:	pop	{pc}		; (ldr pc, [sp], #4)
   148f4:	adds	r4, r4, #0
   148f8:	movne	r4, #1
   148fc:	cmp	r5, #0
   14900:	moveq	r4, #1
   14904:	cmp	r4, #0
   14908:	beq	148e4 <__assert_fail@plt+0x3a58>
   1490c:	bl	14cd0 <__assert_fail@plt+0x3e44>
   14910:	cmp	r1, #0
   14914:	orreq	r1, r1, #1
   14918:	str	r4, [sp, #-8]!
   1491c:	str	lr, [sp, #4]
   14920:	bl	15c70 <__assert_fail@plt+0x4de4>
   14924:	cmp	r0, #0
   14928:	beq	14938 <__assert_fail@plt+0x3aac>
   1492c:	ldr	r4, [sp]
   14930:	add	sp, sp, #4
   14934:	pop	{pc}		; (ldr pc, [sp], #4)
   14938:	bl	14cd0 <__assert_fail@plt+0x3e44>
   1493c:	strd	r4, [sp, #-16]!
   14940:	mov	r4, r0
   14944:	mov	r5, r2
   14948:	str	r6, [sp, #8]
   1494c:	mov	r6, r1
   14950:	str	lr, [sp, #12]
   14954:	bl	16050 <__assert_fail@plt+0x51c4>
   14958:	cmp	r0, #0
   1495c:	beq	14970 <__assert_fail@plt+0x3ae4>
   14960:	ldrd	r4, [sp]
   14964:	ldr	r6, [sp, #8]
   14968:	add	sp, sp, #12
   1496c:	pop	{pc}		; (ldr pc, [sp], #4)
   14970:	cmp	r4, #0
   14974:	beq	14984 <__assert_fail@plt+0x3af8>
   14978:	cmp	r6, #0
   1497c:	cmpne	r5, #0
   14980:	beq	14960 <__assert_fail@plt+0x3ad4>
   14984:	bl	14cd0 <__assert_fail@plt+0x3e44>
   14988:	b	1493c <__assert_fail@plt+0x3ab0>
   1498c:	cmp	r2, #0
   14990:	cmpne	r1, #0
   14994:	str	r4, [sp, #-8]!
   14998:	moveq	r2, #1
   1499c:	str	lr, [sp, #4]
   149a0:	moveq	r1, r2
   149a4:	bl	16050 <__assert_fail@plt+0x51c4>
   149a8:	cmp	r0, #0
   149ac:	beq	149bc <__assert_fail@plt+0x3b30>
   149b0:	ldr	r4, [sp]
   149b4:	add	sp, sp, #4
   149b8:	pop	{pc}		; (ldr pc, [sp], #4)
   149bc:	bl	14cd0 <__assert_fail@plt+0x3e44>
   149c0:	mov	r2, r1
   149c4:	mov	r1, r0
   149c8:	mov	r0, #0
   149cc:	b	1493c <__assert_fail@plt+0x3ab0>
   149d0:	mov	r2, r1
   149d4:	mov	r1, r0
   149d8:	mov	r0, #0
   149dc:	b	1498c <__assert_fail@plt+0x3b00>
   149e0:	cmp	r0, #0
   149e4:	strd	r4, [sp, #-16]!
   149e8:	mov	r5, r1
   149ec:	ldr	r4, [r1]
   149f0:	str	r6, [sp, #8]
   149f4:	str	lr, [sp, #12]
   149f8:	beq	14a28 <__assert_fail@plt+0x3b9c>
   149fc:	lsr	r3, r4, #1
   14a00:	add	r3, r3, #1
   14a04:	adds	r4, r4, r3
   14a08:	bcs	14a44 <__assert_fail@plt+0x3bb8>
   14a0c:	mov	r1, r4
   14a10:	bl	1493c <__assert_fail@plt+0x3ab0>
   14a14:	ldr	r6, [sp, #8]
   14a18:	str	r4, [r5]
   14a1c:	ldrd	r4, [sp]
   14a20:	add	sp, sp, #12
   14a24:	pop	{pc}		; (ldr pc, [sp], #4)
   14a28:	cmp	r4, #0
   14a2c:	bne	14a0c <__assert_fail@plt+0x3b80>
   14a30:	mov	r4, #64	; 0x40
   14a34:	udiv	r4, r4, r2
   14a38:	cmp	r2, #64	; 0x40
   14a3c:	addhi	r4, r4, #1
   14a40:	b	14a0c <__assert_fail@plt+0x3b80>
   14a44:	bl	14cd0 <__assert_fail@plt+0x3e44>
   14a48:	mov	r2, #1
   14a4c:	b	149e0 <__assert_fail@plt+0x3b54>
   14a50:	ldr	ip, [r1]
   14a54:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14a58:	mov	r5, r1
   14a5c:	strd	r6, [sp, #8]
   14a60:	str	lr, [sp, #28]
   14a64:	strd	r8, [sp, #16]
   14a68:	asr	lr, ip, #1
   14a6c:	ldr	r8, [sp, #32]
   14a70:	str	sl, [sp, #24]
   14a74:	adds	r4, ip, lr
   14a78:	mvn	lr, r3
   14a7c:	lsr	lr, lr, #31
   14a80:	mvnvs	r4, #-2147483648	; 0x80000000
   14a84:	cmp	r3, r4
   14a88:	movge	r1, #0
   14a8c:	andlt	r1, lr, #1
   14a90:	cmp	r1, #0
   14a94:	movne	r4, r3
   14a98:	smull	r6, r7, r4, r8
   14a9c:	cmp	r7, r6, asr #31
   14aa0:	bne	14b28 <__assert_fail@plt+0x3c9c>
   14aa4:	cmp	r6, #63	; 0x3f
   14aa8:	mov	r1, r6
   14aac:	ble	14b10 <__assert_fail@plt+0x3c84>
   14ab0:	cmp	r0, #0
   14ab4:	sub	r6, r4, ip
   14ab8:	streq	r0, [r5]
   14abc:	cmp	r6, r2
   14ac0:	bge	14af0 <__assert_fail@plt+0x3c64>
   14ac4:	adds	r4, ip, r2
   14ac8:	bvs	14b24 <__assert_fail@plt+0x3c98>
   14acc:	cmp	r4, r3
   14ad0:	movle	r3, #0
   14ad4:	andgt	r3, lr, #1
   14ad8:	cmp	r3, #0
   14adc:	bne	14b24 <__assert_fail@plt+0x3c98>
   14ae0:	smull	r8, r9, r4, r8
   14ae4:	cmp	r9, r8, asr #31
   14ae8:	mov	r1, r8
   14aec:	bne	14b24 <__assert_fail@plt+0x3c98>
   14af0:	bl	148c4 <__assert_fail@plt+0x3a38>
   14af4:	ldrd	r6, [sp, #8]
   14af8:	ldrd	r8, [sp, #16]
   14afc:	ldr	sl, [sp, #24]
   14b00:	str	r4, [r5]
   14b04:	ldrd	r4, [sp]
   14b08:	add	sp, sp, #28
   14b0c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b10:	mov	r6, #64	; 0x40
   14b14:	sdiv	r4, r6, r8
   14b18:	mls	r1, r8, r4, r6
   14b1c:	sub	r1, r6, r1
   14b20:	b	14ab0 <__assert_fail@plt+0x3c24>
   14b24:	bl	14cd0 <__assert_fail@plt+0x3e44>
   14b28:	mvn	r6, #-2147483648	; 0x80000000
   14b2c:	b	14b14 <__assert_fail@plt+0x3c88>
   14b30:	mov	r1, #1
   14b34:	str	r4, [sp, #-8]!
   14b38:	str	lr, [sp, #4]
   14b3c:	bl	15bc0 <__assert_fail@plt+0x4d34>
   14b40:	cmp	r0, #0
   14b44:	beq	14b54 <__assert_fail@plt+0x3cc8>
   14b48:	ldr	r4, [sp]
   14b4c:	add	sp, sp, #4
   14b50:	pop	{pc}		; (ldr pc, [sp], #4)
   14b54:	bl	14cd0 <__assert_fail@plt+0x3e44>
   14b58:	mov	r1, #1
   14b5c:	str	r4, [sp, #-8]!
   14b60:	str	lr, [sp, #4]
   14b64:	bl	15bc0 <__assert_fail@plt+0x4d34>
   14b68:	cmp	r0, #0
   14b6c:	beq	14b7c <__assert_fail@plt+0x3cf0>
   14b70:	ldr	r4, [sp]
   14b74:	add	sp, sp, #4
   14b78:	pop	{pc}		; (ldr pc, [sp], #4)
   14b7c:	bl	14cd0 <__assert_fail@plt+0x3e44>
   14b80:	str	r4, [sp, #-8]!
   14b84:	str	lr, [sp, #4]
   14b88:	bl	15bc0 <__assert_fail@plt+0x4d34>
   14b8c:	cmp	r0, #0
   14b90:	beq	14ba0 <__assert_fail@plt+0x3d14>
   14b94:	ldr	r4, [sp]
   14b98:	add	sp, sp, #4
   14b9c:	pop	{pc}		; (ldr pc, [sp], #4)
   14ba0:	bl	14cd0 <__assert_fail@plt+0x3e44>
   14ba4:	str	r4, [sp, #-8]!
   14ba8:	str	lr, [sp, #4]
   14bac:	bl	15bc0 <__assert_fail@plt+0x4d34>
   14bb0:	cmp	r0, #0
   14bb4:	beq	14bc4 <__assert_fail@plt+0x3d38>
   14bb8:	ldr	r4, [sp]
   14bbc:	add	sp, sp, #4
   14bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   14bc4:	bl	14cd0 <__assert_fail@plt+0x3e44>
   14bc8:	strd	r4, [sp, #-16]!
   14bcc:	mov	r4, r1
   14bd0:	str	r6, [sp, #8]
   14bd4:	mov	r6, r0
   14bd8:	mov	r0, r1
   14bdc:	str	lr, [sp, #12]
   14be0:	bl	15c34 <__assert_fail@plt+0x4da8>
   14be4:	subs	r5, r0, #0
   14be8:	beq	14c0c <__assert_fail@plt+0x3d80>
   14bec:	mov	r2, r4
   14bf0:	mov	r1, r6
   14bf4:	bl	10c88 <memcpy@plt>
   14bf8:	mov	r0, r5
   14bfc:	ldrd	r4, [sp]
   14c00:	ldr	r6, [sp, #8]
   14c04:	add	sp, sp, #12
   14c08:	pop	{pc}		; (ldr pc, [sp], #4)
   14c0c:	bl	14cd0 <__assert_fail@plt+0x3e44>
   14c10:	strd	r4, [sp, #-16]!
   14c14:	mov	r4, r1
   14c18:	str	r6, [sp, #8]
   14c1c:	mov	r6, r0
   14c20:	mov	r0, r1
   14c24:	str	lr, [sp, #12]
   14c28:	bl	15c34 <__assert_fail@plt+0x4da8>
   14c2c:	subs	r5, r0, #0
   14c30:	beq	14c54 <__assert_fail@plt+0x3dc8>
   14c34:	mov	r2, r4
   14c38:	mov	r1, r6
   14c3c:	bl	10c88 <memcpy@plt>
   14c40:	mov	r0, r5
   14c44:	ldrd	r4, [sp]
   14c48:	ldr	r6, [sp, #8]
   14c4c:	add	sp, sp, #12
   14c50:	pop	{pc}		; (ldr pc, [sp], #4)
   14c54:	bl	14cd0 <__assert_fail@plt+0x3e44>
   14c58:	strd	r4, [sp, #-16]!
   14c5c:	mov	r4, r1
   14c60:	str	r6, [sp, #8]
   14c64:	mov	r6, r0
   14c68:	add	r0, r1, #1
   14c6c:	str	lr, [sp, #12]
   14c70:	bl	15c34 <__assert_fail@plt+0x4da8>
   14c74:	subs	r5, r0, #0
   14c78:	beq	14ca4 <__assert_fail@plt+0x3e18>
   14c7c:	mov	r3, #0
   14c80:	mov	r1, r6
   14c84:	mov	r2, r4
   14c88:	strb	r3, [r5, r4]
   14c8c:	bl	10c88 <memcpy@plt>
   14c90:	mov	r0, r5
   14c94:	ldrd	r4, [sp]
   14c98:	ldr	r6, [sp, #8]
   14c9c:	add	sp, sp, #12
   14ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ca4:	bl	14cd0 <__assert_fail@plt+0x3e44>
   14ca8:	str	r4, [sp, #-8]!
   14cac:	mov	r4, r0
   14cb0:	str	lr, [sp, #4]
   14cb4:	bl	10da8 <strlen@plt>
   14cb8:	add	r1, r0, #1
   14cbc:	mov	r0, r4
   14cc0:	ldr	r4, [sp]
   14cc4:	ldr	lr, [sp, #4]
   14cc8:	add	sp, sp, #8
   14ccc:	b	14bc8 <__assert_fail@plt+0x3d3c>
   14cd0:	movw	r3, #33000	; 0x80e8
   14cd4:	movt	r3, #2
   14cd8:	str	r4, [sp, #-8]!
   14cdc:	ldr	r4, [r3]
   14ce0:	mov	r2, #5
   14ce4:	movw	r1, #29104	; 0x71b0
   14ce8:	movt	r1, #1
   14cec:	mov	r0, #0
   14cf0:	str	lr, [sp, #4]
   14cf4:	bl	10cc4 <dcgettext@plt>
   14cf8:	mov	r3, r0
   14cfc:	movw	r2, #28024	; 0x6d78
   14d00:	movt	r2, #1
   14d04:	mov	r1, #0
   14d08:	mov	r0, r4
   14d0c:	bl	10d3c <error@plt>
   14d10:	bl	10e74 <abort@plt>
   14d14:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14d18:	strd	r6, [sp, #8]
   14d1c:	mov	r6, r2
   14d20:	mov	r7, r3
   14d24:	str	r8, [sp, #16]
   14d28:	mov	r2, r1
   14d2c:	mov	r1, #0
   14d30:	str	lr, [sp, #20]
   14d34:	sub	sp, sp, #16
   14d38:	mov	r8, r0
   14d3c:	ldr	ip, [sp, #48]	; 0x30
   14d40:	add	r3, sp, #8
   14d44:	str	ip, [sp]
   14d48:	bl	14e84 <__assert_fail@plt+0x3ff8>
   14d4c:	subs	r4, r0, #0
   14d50:	bne	14da0 <__assert_fail@plt+0x3f14>
   14d54:	ldrd	r4, [sp, #8]
   14d58:	ldrd	r0, [sp, #40]	; 0x28
   14d5c:	cmp	r4, r6
   14d60:	sbcs	r3, r5, r7
   14d64:	movlt	r3, #1
   14d68:	movge	r3, #0
   14d6c:	cmp	r0, r4
   14d70:	sbcs	r2, r1, r5
   14d74:	orrlt	r3, r3, #1
   14d78:	cmp	r3, #0
   14d7c:	bne	14e20 <__assert_fail@plt+0x3f94>
   14d80:	mov	r0, r4
   14d84:	mov	r1, r5
   14d88:	add	sp, sp, #16
   14d8c:	ldrd	r4, [sp]
   14d90:	ldrd	r6, [sp, #8]
   14d94:	ldr	r8, [sp, #16]
   14d98:	add	sp, sp, #20
   14d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   14da0:	bl	10dc0 <__errno_location@plt>
   14da4:	cmp	r4, #1
   14da8:	moveq	r3, #75	; 0x4b
   14dac:	moveq	r4, r3
   14db0:	streq	r3, [r0]
   14db4:	beq	14e10 <__assert_fail@plt+0x3f84>
   14db8:	cmp	r4, #3
   14dbc:	beq	14e04 <__assert_fail@plt+0x3f78>
   14dc0:	ldr	r3, [sp, #56]	; 0x38
   14dc4:	ldr	r4, [r0]
   14dc8:	cmp	r3, #0
   14dcc:	bne	14dd8 <__assert_fail@plt+0x3f4c>
   14dd0:	mov	r3, #1
   14dd4:	str	r3, [sp, #56]	; 0x38
   14dd8:	cmp	r4, #22
   14ddc:	moveq	r4, #0
   14de0:	mov	r0, r8
   14de4:	bl	142ac <__assert_fail@plt+0x3420>
   14de8:	movw	r2, #28020	; 0x6d74
   14dec:	movt	r2, #1
   14df0:	str	r0, [sp]
   14df4:	mov	r1, r4
   14df8:	ldr	r3, [sp, #52]	; 0x34
   14dfc:	ldr	r0, [sp, #56]	; 0x38
   14e00:	bl	10d3c <error@plt>
   14e04:	mov	r3, #0
   14e08:	mov	r4, r3
   14e0c:	str	r3, [r0]
   14e10:	ldr	r3, [sp, #56]	; 0x38
   14e14:	cmp	r3, #0
   14e18:	bne	14de0 <__assert_fail@plt+0x3f54>
   14e1c:	b	14dd0 <__assert_fail@plt+0x3f44>
   14e20:	bl	10dc0 <__errno_location@plt>
   14e24:	cmp	r4, #1073741824	; 0x40000000
   14e28:	sbcs	r3, r5, #0
   14e2c:	bge	14e54 <__assert_fail@plt+0x3fc8>
   14e30:	mov	r2, #-1073741824	; 0xc0000000
   14e34:	mvn	r3, #0
   14e38:	cmp	r4, r2
   14e3c:	sbcs	r3, r5, r3
   14e40:	blt	14e54 <__assert_fail@plt+0x3fc8>
   14e44:	mov	r3, #34	; 0x22
   14e48:	mov	r4, r3
   14e4c:	str	r3, [r0]
   14e50:	b	14e10 <__assert_fail@plt+0x3f84>
   14e54:	mov	r3, #75	; 0x4b
   14e58:	str	r3, [r0]
   14e5c:	ldr	r3, [sp, #56]	; 0x38
   14e60:	cmp	r3, #0
   14e64:	movne	r4, #75	; 0x4b
   14e68:	bne	14de0 <__assert_fail@plt+0x3f54>
   14e6c:	mov	r3, #1
   14e70:	mov	r4, #75	; 0x4b
   14e74:	str	r3, [sp, #56]	; 0x38
   14e78:	b	14de0 <__assert_fail@plt+0x3f54>
   14e7c:	mov	r1, #10
   14e80:	b	14d14 <__assert_fail@plt+0x3e88>
   14e84:	cmp	r2, #36	; 0x24
   14e88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14e8c:	strd	r6, [sp, #8]
   14e90:	strd	r8, [sp, #16]
   14e94:	strd	sl, [sp, #24]
   14e98:	str	lr, [sp, #32]
   14e9c:	sub	sp, sp, #44	; 0x2c
   14ea0:	bhi	15a8c <__assert_fail@plt+0x4c00>
   14ea4:	cmp	r1, #0
   14ea8:	mov	r5, r1
   14eac:	mov	r6, r2
   14eb0:	addeq	r5, sp, #36	; 0x24
   14eb4:	mov	sl, r0
   14eb8:	mov	r7, r3
   14ebc:	bl	10dc0 <__errno_location@plt>
   14ec0:	mov	fp, r0
   14ec4:	mov	r4, #0
   14ec8:	mov	r2, r6
   14ecc:	mov	r3, r4
   14ed0:	mov	r1, r5
   14ed4:	mov	r0, sl
   14ed8:	str	r4, [fp]
   14edc:	bl	10e44 <__strtoll_internal@plt>
   14ee0:	ldr	r6, [r5]
   14ee4:	mov	r8, r0
   14ee8:	mov	r9, r1
   14eec:	cmp	r6, sl
   14ef0:	beq	14f48 <__assert_fail@plt+0x40bc>
   14ef4:	ldr	r4, [fp]
   14ef8:	cmp	r4, #0
   14efc:	beq	14f0c <__assert_fail@plt+0x4080>
   14f00:	cmp	r4, #34	; 0x22
   14f04:	bne	1504c <__assert_fail@plt+0x41c0>
   14f08:	mov	r4, #1
   14f0c:	ldr	r3, [sp, #80]	; 0x50
   14f10:	cmp	r3, #0
   14f14:	beq	14f24 <__assert_fail@plt+0x4098>
   14f18:	ldrb	sl, [r6]
   14f1c:	cmp	sl, #0
   14f20:	bne	15150 <__assert_fail@plt+0x42c4>
   14f24:	strd	r8, [r7]
   14f28:	mov	r0, r4
   14f2c:	add	sp, sp, #44	; 0x2c
   14f30:	ldrd	r4, [sp]
   14f34:	ldrd	r6, [sp, #8]
   14f38:	ldrd	r8, [sp, #16]
   14f3c:	ldrd	sl, [sp, #24]
   14f40:	add	sp, sp, #32
   14f44:	pop	{pc}		; (ldr pc, [sp], #4)
   14f48:	ldr	r3, [sp, #80]	; 0x50
   14f4c:	cmp	r3, r4
   14f50:	beq	1504c <__assert_fail@plt+0x41c0>
   14f54:	ldrb	sl, [sl]
   14f58:	cmp	sl, r4
   14f5c:	beq	1504c <__assert_fail@plt+0x41c0>
   14f60:	mov	r1, sl
   14f64:	mov	r0, r3
   14f68:	bl	10db4 <strchr@plt>
   14f6c:	cmp	r0, r4
   14f70:	movne	r8, #1
   14f74:	movne	r9, #0
   14f78:	beq	1504c <__assert_fail@plt+0x41c0>
   14f7c:	sub	fp, sl, #69	; 0x45
   14f80:	cmp	fp, #47	; 0x2f
   14f84:	ldrls	pc, [pc, fp, lsl #2]
   14f88:	b	1516c <__assert_fail@plt+0x42e0>
   14f8c:	andeq	r5, r1, r4, asr r0
   14f90:	andeq	r5, r1, ip, ror #2
   14f94:	andeq	r5, r1, r4, asr r0
   14f98:	andeq	r5, r1, ip, ror #2
   14f9c:	andeq	r5, r1, ip, ror #2
   14fa0:	andeq	r5, r1, ip, ror #2
   14fa4:	andeq	r5, r1, r4, asr r0
   14fa8:	andeq	r5, r1, ip, ror #2
   14fac:	andeq	r5, r1, r4, asr r0
   14fb0:	andeq	r5, r1, ip, ror #2
   14fb4:	andeq	r5, r1, ip, ror #2
   14fb8:	andeq	r5, r1, r4, asr r0
   14fbc:	andeq	r5, r1, ip, ror #2
   14fc0:	andeq	r5, r1, ip, ror #2
   14fc4:	andeq	r5, r1, ip, ror #2
   14fc8:	andeq	r5, r1, r4, asr r0
   14fcc:	andeq	r5, r1, ip, ror #2
   14fd0:	andeq	r5, r1, ip, ror #2
   14fd4:	andeq	r5, r1, ip, ror #2
   14fd8:	andeq	r5, r1, ip, ror #2
   14fdc:	andeq	r5, r1, r4, asr r0
   14fe0:	andeq	r5, r1, r4, asr r0
   14fe4:	andeq	r5, r1, ip, ror #2
   14fe8:	andeq	r5, r1, ip, ror #2
   14fec:	andeq	r5, r1, ip, ror #2
   14ff0:	andeq	r5, r1, ip, ror #2
   14ff4:	andeq	r5, r1, ip, ror #2
   14ff8:	andeq	r5, r1, ip, ror #2
   14ffc:	andeq	r5, r1, ip, ror #2
   15000:	andeq	r5, r1, ip, ror #2
   15004:	andeq	r5, r1, ip, ror #2
   15008:	andeq	r5, r1, ip, ror #2
   1500c:	andeq	r5, r1, ip, ror #2
   15010:	andeq	r5, r1, ip, ror #2
   15014:	andeq	r5, r1, r4, asr r0
   15018:	andeq	r5, r1, ip, ror #2
   1501c:	andeq	r5, r1, ip, ror #2
   15020:	andeq	r5, r1, ip, ror #2
   15024:	andeq	r5, r1, r4, asr r0
   15028:	andeq	r5, r1, ip, ror #2
   1502c:	andeq	r5, r1, r4, asr r0
   15030:	andeq	r5, r1, ip, ror #2
   15034:	andeq	r5, r1, ip, ror #2
   15038:	andeq	r5, r1, ip, ror #2
   1503c:	andeq	r5, r1, ip, ror #2
   15040:	andeq	r5, r1, ip, ror #2
   15044:	andeq	r5, r1, ip, ror #2
   15048:	andeq	r5, r1, r4, asr r0
   1504c:	mov	r4, #4
   15050:	b	14f28 <__assert_fail@plt+0x409c>
   15054:	mov	r1, #48	; 0x30
   15058:	ldr	r0, [sp, #80]	; 0x50
   1505c:	bl	10db4 <strchr@plt>
   15060:	cmp	r0, #0
   15064:	beq	1516c <__assert_fail@plt+0x42e0>
   15068:	ldrb	r3, [r6, #1]
   1506c:	cmp	r3, #68	; 0x44
   15070:	beq	15734 <__assert_fail@plt+0x48a8>
   15074:	cmp	r3, #105	; 0x69
   15078:	beq	158e4 <__assert_fail@plt+0x4a58>
   1507c:	cmp	r3, #66	; 0x42
   15080:	beq	15734 <__assert_fail@plt+0x48a8>
   15084:	cmp	fp, #47	; 0x2f
   15088:	ldrls	pc, [pc, fp, lsl #2]
   1508c:	b	15164 <__assert_fail@plt+0x42d8>
   15090:	andeq	r5, r1, ip, lsl #13
   15094:	andeq	r5, r1, r4, ror #2
   15098:	andeq	r5, r1, ip, ror r6
   1509c:	andeq	r5, r1, r4, ror #2
   150a0:	andeq	r5, r1, r4, ror #2
   150a4:	andeq	r5, r1, r4, ror #2
   150a8:	strdeq	r5, [r1], -r8
   150ac:	andeq	r5, r1, r4, ror #2
   150b0:	andeq	r5, r1, r8, ror #13
   150b4:	andeq	r5, r1, r4, ror #2
   150b8:	andeq	r5, r1, r4, ror #2
   150bc:			; <UNDEFINED> instruction: 0x000156b8
   150c0:	andeq	r5, r1, r4, ror #2
   150c4:	andeq	r5, r1, r4, ror #2
   150c8:	andeq	r5, r1, r4, ror #2
   150cc:	andeq	r5, r1, r8, lsr #13
   150d0:	andeq	r5, r1, r4, ror #2
   150d4:	andeq	r5, r1, r4, ror #2
   150d8:	andeq	r5, r1, r4, ror #2
   150dc:	andeq	r5, r1, r4, ror #2
   150e0:	ldrdeq	r5, [r1], -r8
   150e4:	andeq	r5, r1, r8, asr #13
   150e8:	andeq	r5, r1, r4, ror #2
   150ec:	andeq	r5, r1, r4, ror #2
   150f0:	andeq	r5, r1, r4, ror #2
   150f4:	andeq	r5, r1, r4, ror #2
   150f8:	andeq	r5, r1, r4, ror #2
   150fc:	andeq	r5, r1, r4, ror #2
   15100:	andeq	r5, r1, r4, ror #2
   15104:	andeq	r5, r1, ip, asr r2
   15108:	muleq	r1, ip, r6
   1510c:	andeq	r5, r1, r4, ror #2
   15110:	andeq	r5, r1, r4, ror #2
   15114:	andeq	r5, r1, r4, ror #2
   15118:	andeq	r5, r1, ip, ror r6
   1511c:	andeq	r5, r1, r4, ror #2
   15120:	andeq	r5, r1, r4, ror #2
   15124:	andeq	r5, r1, r4, ror #2
   15128:	strdeq	r5, [r1], -r8
   1512c:	andeq	r5, r1, r4, ror #2
   15130:	andeq	r5, r1, r8, ror #13
   15134:	andeq	r5, r1, r4, ror #2
   15138:	andeq	r5, r1, r4, ror #2
   1513c:	andeq	r5, r1, r4, ror #2
   15140:	andeq	r5, r1, r4, ror #2
   15144:	andeq	r5, r1, r4, ror #2
   15148:	andeq	r5, r1, r4, ror #2
   1514c:	andeq	r5, r1, r8, lsr #13
   15150:	mov	r1, sl
   15154:	ldr	r0, [sp, #80]	; 0x50
   15158:	bl	10db4 <strchr@plt>
   1515c:	cmp	r0, #0
   15160:	bne	14f7c <__assert_fail@plt+0x40f0>
   15164:	orr	r4, r4, #2
   15168:	b	14f24 <__assert_fail@plt+0x4098>
   1516c:	mov	r3, #1
   15170:	mov	fp, #1024	; 0x400
   15174:	sub	sl, sl, #66	; 0x42
   15178:	cmp	sl, #53	; 0x35
   1517c:	ldrls	pc, [pc, sl, lsl #2]
   15180:	b	15164 <__assert_fail@plt+0x42d8>
   15184:	andeq	r5, r1, r8, lsr #5
   15188:	andeq	r5, r1, r4, ror #2
   1518c:	andeq	r5, r1, r4, ror #2
   15190:	muleq	r1, r4, r4
   15194:	andeq	r5, r1, r4, ror #2
   15198:	andeq	r5, r1, ip, lsl r4
   1519c:	andeq	r5, r1, r4, ror #2
   151a0:	andeq	r5, r1, r4, ror #2
   151a4:	andeq	r5, r1, r4, ror #2
   151a8:	andeq	r5, r1, r0, ror #7
   151ac:	andeq	r5, r1, r4, ror #2
   151b0:	andeq	r5, r1, r4, lsl #7
   151b4:	andeq	r5, r1, r4, ror #2
   151b8:	andeq	r5, r1, r4, ror #2
   151bc:	andeq	r5, r1, r4, lsl #11
   151c0:	andeq	r5, r1, r4, ror #2
   151c4:	andeq	r5, r1, r4, ror #2
   151c8:	andeq	r5, r1, r4, ror #2
   151cc:	andeq	r5, r1, ip, lsl #10
   151d0:	andeq	r5, r1, r4, ror #2
   151d4:	andeq	r5, r1, r4, ror #2
   151d8:	andeq	r5, r1, r4, ror #2
   151dc:	andeq	r5, r1, r4, ror #2
   151e0:	strdeq	r5, [r1], -ip
   151e4:	andeq	r5, r1, ip, lsl #6
   151e8:	andeq	r5, r1, r4, ror #2
   151ec:	andeq	r5, r1, r4, ror #2
   151f0:	andeq	r5, r1, r4, ror #2
   151f4:	andeq	r5, r1, r4, ror #2
   151f8:	andeq	r5, r1, r4, ror #2
   151fc:	andeq	r5, r1, r4, ror #2
   15200:	andeq	r5, r1, r4, ror #2
   15204:	andeq	r5, r1, r0, ror #4
   15208:	andeq	r5, r1, r4, ror r6
   1520c:	andeq	r5, r1, r4, ror #2
   15210:	andeq	r5, r1, r4, ror #2
   15214:	andeq	r5, r1, r4, ror #2
   15218:	andeq	r5, r1, ip, lsl r4
   1521c:	andeq	r5, r1, r4, ror #2
   15220:	andeq	r5, r1, r4, ror #2
   15224:	andeq	r5, r1, r4, ror #2
   15228:	andeq	r5, r1, r0, ror #7
   1522c:	andeq	r5, r1, r4, ror #2
   15230:	andeq	r5, r1, r4, lsl #7
   15234:	andeq	r5, r1, r4, ror #2
   15238:	andeq	r5, r1, r4, ror #2
   1523c:	andeq	r5, r1, r4, ror #2
   15240:	andeq	r5, r1, r4, ror #2
   15244:	andeq	r5, r1, r4, ror #2
   15248:	andeq	r5, r1, r4, ror #2
   1524c:	andeq	r5, r1, ip, lsl #10
   15250:	andeq	r5, r1, r4, ror #2
   15254:	andeq	r5, r1, r4, ror #2
   15258:	andeq	r5, r1, r8, asr #5
   1525c:	mov	r3, #1
   15260:	cmp	r9, r8, asr #31
   15264:	mov	ip, #0
   15268:	str	r3, [sp, #4]
   1526c:	bne	158fc <__assert_fail@plt+0x4a70>
   15270:	lsl	r3, r9, #9
   15274:	lsl	r2, r8, #9
   15278:	orr	r3, r3, r8, lsr #23
   1527c:	cmp	ip, #0
   15280:	bne	152f0 <__assert_fail@plt+0x4464>
   15284:	mov	r8, r2
   15288:	mov	r9, r3
   1528c:	ldr	r2, [sp, #4]
   15290:	add	r3, r6, r2
   15294:	str	r3, [r5]
   15298:	ldrb	r3, [r6, r2]
   1529c:	cmp	r3, #0
   152a0:	beq	14f24 <__assert_fail@plt+0x4098>
   152a4:	b	15164 <__assert_fail@plt+0x42d8>
   152a8:	cmp	r9, r8, asr #31
   152ac:	mov	ip, #0
   152b0:	str	r3, [sp, #4]
   152b4:	bne	15944 <__assert_fail@plt+0x4ab8>
   152b8:	lsl	r3, r9, #10
   152bc:	lsl	r2, r8, #10
   152c0:	orr	r3, r3, r8, lsr #22
   152c4:	b	1527c <__assert_fail@plt+0x43f0>
   152c8:	cmp	r9, r8, asr #31
   152cc:	mov	r1, #0
   152d0:	str	r3, [sp, #4]
   152d4:	bne	159c8 <__assert_fail@plt+0x4b3c>
   152d8:	adds	ip, r8, r8
   152dc:	adc	r3, r9, r9
   152e0:	cmp	r1, #0
   152e4:	moveq	r8, ip
   152e8:	moveq	r9, r3
   152ec:	beq	1528c <__assert_fail@plt+0x4400>
   152f0:	cmp	r8, #0
   152f4:	mov	r4, #1
   152f8:	sbcs	r3, r9, #0
   152fc:	blt	15728 <__assert_fail@plt+0x489c>
   15300:	mvn	r8, #0
   15304:	mvn	r9, #-2147483648	; 0x80000000
   15308:	b	1528c <__assert_fail@plt+0x4400>
   1530c:	str	r3, [sp, #4]
   15310:	asr	r1, fp, #31
   15314:	mov	r0, fp
   15318:	mov	r3, #0
   1531c:	mov	ip, #7
   15320:	mov	lr, r3
   15324:	strd	r0, [sp, #8]
   15328:	str	r4, [sp, #16]
   1532c:	str	r5, [sp, #24]
   15330:	b	15344 <__assert_fail@plt+0x44b8>
   15334:	mov	r8, fp
   15338:	mov	r9, r2
   1533c:	subs	ip, ip, #1
   15340:	beq	15708 <__assert_fail@plt+0x487c>
   15344:	cmp	r9, r8, asr #31
   15348:	mov	r1, #0
   1534c:	bne	1583c <__assert_fail@plt+0x49b0>
   15350:	smull	r2, r3, r8, r0
   15354:	mov	fp, r2
   15358:	mov	r2, r3
   1535c:	cmp	r1, #0
   15360:	beq	15334 <__assert_fail@plt+0x44a8>
   15364:	cmp	r8, #0
   15368:	mov	lr, #1
   1536c:	sbcs	r3, r9, #0
   15370:	mvnge	r8, #0
   15374:	mvnge	r9, #-2147483648	; 0x80000000
   15378:	movlt	r8, #0
   1537c:	movlt	r9, #-2147483648	; 0x80000000
   15380:	b	1533c <__assert_fail@plt+0x44b0>
   15384:	str	r3, [sp, #4]
   15388:	asr	r3, fp, #31
   1538c:	mov	r2, fp
   15390:	mov	r1, #0
   15394:	cmp	r9, r8, asr #31
   15398:	strd	r2, [sp, #8]
   1539c:	bne	15988 <__assert_fail@plt+0x4afc>
   153a0:	smull	r2, r3, r8, fp
   153a4:	mov	lr, r2
   153a8:	subs	ip, r1, #0
   153ac:	bne	152f0 <__assert_fail@plt+0x4464>
   153b0:	cmp	r3, lr, asr #31
   153b4:	mov	r0, lr
   153b8:	mov	r1, r3
   153bc:	bne	15a1c <__assert_fail@plt+0x4b90>
   153c0:	smull	r2, r3, lr, fp
   153c4:	mov	sl, r2
   153c8:	mov	r2, r3
   153cc:	cmp	ip, #0
   153d0:	bne	15718 <__assert_fail@plt+0x488c>
   153d4:	mov	r8, sl
   153d8:	mov	r9, r2
   153dc:	b	1528c <__assert_fail@plt+0x4400>
   153e0:	str	r3, [sp, #4]
   153e4:	asr	r3, fp, #31
   153e8:	mov	r2, fp
   153ec:	mov	ip, #0
   153f0:	cmp	r9, r8, asr #31
   153f4:	strd	r2, [sp, #8]
   153f8:	bne	157b0 <__assert_fail@plt+0x4924>
   153fc:	smull	r2, r3, r8, fp
   15400:	mov	r1, r2
   15404:	mov	r2, r3
   15408:	cmp	ip, #0
   1540c:	bne	152f0 <__assert_fail@plt+0x4464>
   15410:	mov	r8, r1
   15414:	mov	r9, r2
   15418:	b	1528c <__assert_fail@plt+0x4400>
   1541c:	str	r3, [sp, #4]
   15420:	asr	r1, fp, #31
   15424:	mov	r0, fp
   15428:	mov	r3, #0
   1542c:	mov	ip, #3
   15430:	mov	lr, r3
   15434:	strd	r0, [sp, #8]
   15438:	str	r4, [sp, #16]
   1543c:	str	r5, [sp, #24]
   15440:	b	15454 <__assert_fail@plt+0x45c8>
   15444:	mov	r8, fp
   15448:	mov	r9, r2
   1544c:	subs	ip, ip, #1
   15450:	beq	15708 <__assert_fail@plt+0x487c>
   15454:	cmp	r9, r8, asr #31
   15458:	mov	r1, #0
   1545c:	bne	15778 <__assert_fail@plt+0x48ec>
   15460:	smull	r2, r3, r8, r0
   15464:	mov	fp, r2
   15468:	mov	r2, r3
   1546c:	cmp	r1, #0
   15470:	beq	15444 <__assert_fail@plt+0x45b8>
   15474:	cmp	r8, #0
   15478:	mov	lr, #1
   1547c:	sbcs	r3, r9, #0
   15480:	mvnge	r8, #0
   15484:	mvnge	r9, #-2147483648	; 0x80000000
   15488:	movlt	r8, #0
   1548c:	movlt	r9, #-2147483648	; 0x80000000
   15490:	b	1544c <__assert_fail@plt+0x45c0>
   15494:	str	r3, [sp, #4]
   15498:	asr	r1, fp, #31
   1549c:	mov	r0, fp
   154a0:	mov	r3, #0
   154a4:	mov	ip, #6
   154a8:	mov	lr, r3
   154ac:	strd	r0, [sp, #8]
   154b0:	str	r4, [sp, #16]
   154b4:	str	r5, [sp, #24]
   154b8:	b	154cc <__assert_fail@plt+0x4640>
   154bc:	mov	r8, fp
   154c0:	mov	r9, r2
   154c4:	subs	ip, ip, #1
   154c8:	beq	15708 <__assert_fail@plt+0x487c>
   154cc:	cmp	r9, r8, asr #31
   154d0:	mov	r1, #0
   154d4:	bne	158ac <__assert_fail@plt+0x4a20>
   154d8:	smull	r2, r3, r8, r0
   154dc:	mov	fp, r2
   154e0:	mov	r2, r3
   154e4:	cmp	r1, #0
   154e8:	beq	154bc <__assert_fail@plt+0x4630>
   154ec:	cmp	r8, #0
   154f0:	mov	lr, #1
   154f4:	sbcs	r3, r9, #0
   154f8:	mvnge	r8, #0
   154fc:	mvnge	r9, #-2147483648	; 0x80000000
   15500:	movlt	r8, #0
   15504:	movlt	r9, #-2147483648	; 0x80000000
   15508:	b	154c4 <__assert_fail@plt+0x4638>
   1550c:	str	r3, [sp, #4]
   15510:	asr	r1, fp, #31
   15514:	mov	r0, fp
   15518:	mov	r3, #0
   1551c:	mov	ip, #4
   15520:	mov	lr, r3
   15524:	strd	r0, [sp, #8]
   15528:	str	r4, [sp, #16]
   1552c:	str	r5, [sp, #24]
   15530:	b	15544 <__assert_fail@plt+0x46b8>
   15534:	mov	r8, fp
   15538:	mov	r9, r2
   1553c:	subs	ip, ip, #1
   15540:	beq	15708 <__assert_fail@plt+0x487c>
   15544:	cmp	r9, r8, asr #31
   15548:	mov	r1, #0
   1554c:	bne	15874 <__assert_fail@plt+0x49e8>
   15550:	smull	r2, r3, r8, r0
   15554:	mov	fp, r2
   15558:	mov	r2, r3
   1555c:	cmp	r1, #0
   15560:	beq	15534 <__assert_fail@plt+0x46a8>
   15564:	cmp	r8, #0
   15568:	mov	lr, #1
   1556c:	sbcs	r3, r9, #0
   15570:	mvnge	r8, #0
   15574:	mvnge	r9, #-2147483648	; 0x80000000
   15578:	movlt	r8, #0
   1557c:	movlt	r9, #-2147483648	; 0x80000000
   15580:	b	1553c <__assert_fail@plt+0x46b0>
   15584:	str	r3, [sp, #4]
   15588:	asr	r1, fp, #31
   1558c:	mov	r0, fp
   15590:	mov	r3, #0
   15594:	mov	ip, #5
   15598:	mov	lr, r3
   1559c:	strd	r0, [sp, #8]
   155a0:	str	r4, [sp, #16]
   155a4:	str	r5, [sp, #24]
   155a8:	b	155bc <__assert_fail@plt+0x4730>
   155ac:	mov	r8, fp
   155b0:	mov	r9, r2
   155b4:	subs	ip, ip, #1
   155b8:	beq	15708 <__assert_fail@plt+0x487c>
   155bc:	cmp	r9, r8, asr #31
   155c0:	mov	r1, #0
   155c4:	bne	15804 <__assert_fail@plt+0x4978>
   155c8:	smull	r2, r3, r8, r0
   155cc:	mov	fp, r2
   155d0:	mov	r2, r3
   155d4:	cmp	r1, #0
   155d8:	beq	155ac <__assert_fail@plt+0x4720>
   155dc:	cmp	r8, #0
   155e0:	mov	lr, #1
   155e4:	sbcs	r3, r9, #0
   155e8:	mvnge	r8, #0
   155ec:	mvnge	r9, #-2147483648	; 0x80000000
   155f0:	movlt	r8, #0
   155f4:	movlt	r9, #-2147483648	; 0x80000000
   155f8:	b	155b4 <__assert_fail@plt+0x4728>
   155fc:	str	r3, [sp, #4]
   15600:	asr	r1, fp, #31
   15604:	mov	r0, fp
   15608:	mov	r3, #0
   1560c:	mov	ip, #8
   15610:	mov	lr, r3
   15614:	strd	r0, [sp, #8]
   15618:	str	r4, [sp, #16]
   1561c:	str	r5, [sp, #24]
   15620:	b	15634 <__assert_fail@plt+0x47a8>
   15624:	mov	r8, fp
   15628:	mov	r9, r2
   1562c:	subs	ip, ip, #1
   15630:	beq	15708 <__assert_fail@plt+0x487c>
   15634:	cmp	r9, r8, asr #31
   15638:	mov	r1, #0
   1563c:	bne	15740 <__assert_fail@plt+0x48b4>
   15640:	smull	r2, r3, r8, r0
   15644:	mov	fp, r2
   15648:	mov	r2, r3
   1564c:	cmp	r1, #0
   15650:	beq	15624 <__assert_fail@plt+0x4798>
   15654:	cmp	r8, #0
   15658:	mov	lr, #1
   1565c:	sbcs	r3, r9, #0
   15660:	mvnge	r8, #0
   15664:	mvnge	r9, #-2147483648	; 0x80000000
   15668:	movlt	r8, #0
   1566c:	movlt	r9, #-2147483648	; 0x80000000
   15670:	b	1562c <__assert_fail@plt+0x47a0>
   15674:	str	r3, [sp, #4]
   15678:	b	1528c <__assert_fail@plt+0x4400>
   1567c:	mov	r3, #1
   15680:	mov	fp, #1024	; 0x400
   15684:	str	r3, [sp, #4]
   15688:	b	15420 <__assert_fail@plt+0x4594>
   1568c:	mov	r3, #1
   15690:	mov	fp, #1024	; 0x400
   15694:	str	r3, [sp, #4]
   15698:	b	15498 <__assert_fail@plt+0x460c>
   1569c:	mov	r3, #1
   156a0:	str	r3, [sp, #4]
   156a4:	b	1528c <__assert_fail@plt+0x4400>
   156a8:	mov	r3, #1
   156ac:	mov	fp, #1024	; 0x400
   156b0:	str	r3, [sp, #4]
   156b4:	b	15510 <__assert_fail@plt+0x4684>
   156b8:	mov	r3, #1
   156bc:	mov	fp, #1024	; 0x400
   156c0:	str	r3, [sp, #4]
   156c4:	b	15588 <__assert_fail@plt+0x46fc>
   156c8:	mov	r3, #1
   156cc:	mov	fp, #1024	; 0x400
   156d0:	str	r3, [sp, #4]
   156d4:	b	15310 <__assert_fail@plt+0x4484>
   156d8:	mov	r3, #1
   156dc:	mov	fp, #1024	; 0x400
   156e0:	str	r3, [sp, #4]
   156e4:	b	15600 <__assert_fail@plt+0x4774>
   156e8:	mov	r3, #1
   156ec:	mov	fp, #1024	; 0x400
   156f0:	str	r3, [sp, #4]
   156f4:	b	15388 <__assert_fail@plt+0x44fc>
   156f8:	mov	r3, #1
   156fc:	mov	fp, #1024	; 0x400
   15700:	str	r3, [sp, #4]
   15704:	b	153e4 <__assert_fail@plt+0x4558>
   15708:	ldr	r4, [sp, #16]
   1570c:	ldr	r5, [sp, #24]
   15710:	orr	r4, r4, lr
   15714:	b	1528c <__assert_fail@plt+0x4400>
   15718:	cmp	r0, #0
   1571c:	mov	r4, #1
   15720:	sbcs	r3, r1, #0
   15724:	bge	15300 <__assert_fail@plt+0x4474>
   15728:	mov	r8, #0
   1572c:	mov	r9, #-2147483648	; 0x80000000
   15730:	b	1528c <__assert_fail@plt+0x4400>
   15734:	mov	r3, #2
   15738:	mov	fp, #1000	; 0x3e8
   1573c:	b	15174 <__assert_fail@plt+0x42e8>
   15740:	cmp	r9, #0
   15744:	umull	r4, r5, r8, r0
   15748:	umull	sl, fp, r0, r9
   1574c:	bge	1575c <__assert_fail@plt+0x48d0>
   15750:	mov	r3, #0
   15754:	subs	sl, sl, r3
   15758:	sbc	fp, fp, r0
   1575c:	adds	r2, sl, r5
   15760:	mov	r3, #0
   15764:	adc	r3, fp, r3
   15768:	cmp	r3, r2, asr #31
   1576c:	bne	15afc <__assert_fail@plt+0x4c70>
   15770:	mov	fp, r4
   15774:	b	1564c <__assert_fail@plt+0x47c0>
   15778:	cmp	r9, #0
   1577c:	umull	r4, r5, r8, r0
   15780:	umull	sl, fp, r0, r9
   15784:	bge	15794 <__assert_fail@plt+0x4908>
   15788:	mov	r3, #0
   1578c:	subs	sl, sl, r3
   15790:	sbc	fp, fp, r0
   15794:	adds	r2, sl, r5
   15798:	mov	r3, #0
   1579c:	adc	r3, fp, r3
   157a0:	cmp	r3, r2, asr #31
   157a4:	bne	15b1c <__assert_fail@plt+0x4c90>
   157a8:	mov	fp, r4
   157ac:	b	1546c <__assert_fail@plt+0x45e0>
   157b0:	umull	r0, r1, fp, r9
   157b4:	cmp	r9, #0
   157b8:	umull	r2, r3, r8, fp
   157bc:	strd	r0, [sp, #16]
   157c0:	bge	157d8 <__assert_fail@plt+0x494c>
   157c4:	subs	r1, r0, ip
   157c8:	str	r1, [sp, #16]
   157cc:	ldr	r1, [sp, #20]
   157d0:	sbc	r1, r1, fp
   157d4:	str	r1, [sp, #20]
   157d8:	mov	r1, r3
   157dc:	ldr	r3, [sp, #16]
   157e0:	mov	r0, r2
   157e4:	mov	lr, #0
   157e8:	adds	r2, r3, r1
   157ec:	ldr	r3, [sp, #20]
   157f0:	adc	lr, r3, lr
   157f4:	cmp	lr, r2, asr #31
   157f8:	bne	15b7c <__assert_fail@plt+0x4cf0>
   157fc:	mov	r1, r0
   15800:	b	15408 <__assert_fail@plt+0x457c>
   15804:	cmp	r9, #0
   15808:	umull	r4, r5, r8, r0
   1580c:	umull	sl, fp, r0, r9
   15810:	bge	15820 <__assert_fail@plt+0x4994>
   15814:	mov	r3, #0
   15818:	subs	sl, sl, r3
   1581c:	sbc	fp, fp, r0
   15820:	adds	r2, sl, r5
   15824:	mov	r3, #0
   15828:	adc	r3, fp, r3
   1582c:	cmp	r3, r2, asr #31
   15830:	bne	15abc <__assert_fail@plt+0x4c30>
   15834:	mov	fp, r4
   15838:	b	155d4 <__assert_fail@plt+0x4748>
   1583c:	cmp	r9, #0
   15840:	umull	r4, r5, r8, r0
   15844:	umull	sl, fp, r0, r9
   15848:	bge	15858 <__assert_fail@plt+0x49cc>
   1584c:	mov	r3, #0
   15850:	subs	sl, sl, r3
   15854:	sbc	fp, fp, r0
   15858:	adds	r2, sl, r5
   1585c:	mov	r3, #0
   15860:	adc	r3, fp, r3
   15864:	cmp	r3, r2, asr #31
   15868:	bne	15b3c <__assert_fail@plt+0x4cb0>
   1586c:	mov	fp, r4
   15870:	b	1535c <__assert_fail@plt+0x44d0>
   15874:	cmp	r9, #0
   15878:	umull	r4, r5, r8, r0
   1587c:	umull	sl, fp, r0, r9
   15880:	bge	15890 <__assert_fail@plt+0x4a04>
   15884:	mov	r3, #0
   15888:	subs	sl, sl, r3
   1588c:	sbc	fp, fp, r0
   15890:	adds	r2, sl, r5
   15894:	mov	r3, #0
   15898:	adc	r3, fp, r3
   1589c:	cmp	r3, r2, asr #31
   158a0:	bne	15b5c <__assert_fail@plt+0x4cd0>
   158a4:	mov	fp, r4
   158a8:	b	1555c <__assert_fail@plt+0x46d0>
   158ac:	cmp	r9, #0
   158b0:	umull	r4, r5, r8, r0
   158b4:	umull	sl, fp, r0, r9
   158b8:	bge	158c8 <__assert_fail@plt+0x4a3c>
   158bc:	mov	r3, #0
   158c0:	subs	sl, sl, r3
   158c4:	sbc	fp, fp, r0
   158c8:	adds	r2, sl, r5
   158cc:	mov	r3, #0
   158d0:	adc	r3, fp, r3
   158d4:	cmp	r3, r2, asr #31
   158d8:	bne	15adc <__assert_fail@plt+0x4c50>
   158dc:	mov	fp, r4
   158e0:	b	154e4 <__assert_fail@plt+0x4658>
   158e4:	ldrb	r3, [r6, #2]
   158e8:	mov	fp, #1024	; 0x400
   158ec:	cmp	r3, #66	; 0x42
   158f0:	movne	r3, #1
   158f4:	moveq	r3, #3
   158f8:	b	15174 <__assert_fail@plt+0x42e8>
   158fc:	mov	lr, #512	; 0x200
   15900:	cmp	r9, #0
   15904:	lsr	r3, r8, #23
   15908:	lsl	r2, r8, #9
   1590c:	umull	r0, r1, lr, r9
   15910:	bge	1591c <__assert_fail@plt+0x4a90>
   15914:	subs	r0, r0, ip
   15918:	sbc	r1, r1, lr
   1591c:	adds	r3, r0, r3
   15920:	mov	lr, #0
   15924:	adc	r1, r1, lr
   15928:	cmp	r1, r3, asr #31
   1592c:	beq	1527c <__assert_fail@plt+0x43f0>
   15930:	lsl	r3, r9, #9
   15934:	mov	ip, #1
   15938:	lsl	r2, r8, #9
   1593c:	orr	r3, r3, r8, lsr #23
   15940:	b	1527c <__assert_fail@plt+0x43f0>
   15944:	mov	lr, #1024	; 0x400
   15948:	cmp	r9, #0
   1594c:	lsr	r3, r8, #22
   15950:	lsl	r2, r8, #10
   15954:	umull	r0, r1, lr, r9
   15958:	bge	15964 <__assert_fail@plt+0x4ad8>
   1595c:	subs	r0, r0, ip
   15960:	sbc	r1, r1, lr
   15964:	adds	r3, r0, r3
   15968:	mov	lr, #0
   1596c:	adc	r1, r1, lr
   15970:	cmp	r1, r3, asr #31
   15974:	lslne	r3, r9, #10
   15978:	movne	ip, #1
   1597c:	lslne	r2, r8, #10
   15980:	orrne	r3, r3, r8, lsr #22
   15984:	b	1527c <__assert_fail@plt+0x43f0>
   15988:	umull	r2, r3, r8, fp
   1598c:	cmp	r9, #0
   15990:	strd	r2, [sp, #16]
   15994:	umull	r2, r3, fp, r9
   15998:	bge	159a4 <__assert_fail@plt+0x4b18>
   1599c:	subs	r2, r2, r1
   159a0:	sbc	r3, r3, fp
   159a4:	ldr	r0, [sp, #20]
   159a8:	mov	ip, #0
   159ac:	adds	r0, r2, r0
   159b0:	adc	ip, r3, ip
   159b4:	cmp	ip, r0, asr #31
   159b8:	bne	15b9c <__assert_fail@plt+0x4d10>
   159bc:	mov	r3, r0
   159c0:	ldr	lr, [sp, #16]
   159c4:	b	153a8 <__assert_fail@plt+0x451c>
   159c8:	mov	lr, #2
   159cc:	mov	r3, #0
   159d0:	adds	ip, r8, r8
   159d4:	adc	r0, r3, r3
   159d8:	umull	r2, r3, lr, r9
   159dc:	cmp	r9, #0
   159e0:	strd	r2, [sp, #8]
   159e4:	bge	159fc <__assert_fail@plt+0x4b70>
   159e8:	subs	r3, r2, r1
   159ec:	str	r3, [sp, #8]
   159f0:	ldr	r3, [sp, #12]
   159f4:	sbc	r3, r3, lr
   159f8:	str	r3, [sp, #12]
   159fc:	ldrd	sl, [sp, #8]
   15a00:	mov	lr, #0
   15a04:	adds	r2, sl, r0
   15a08:	adc	r3, fp, lr
   15a0c:	cmp	r3, r2, asr #31
   15a10:	bne	15aac <__assert_fail@plt+0x4c20>
   15a14:	mov	r3, r2
   15a18:	b	152e0 <__assert_fail@plt+0x4454>
   15a1c:	cmp	r3, #0
   15a20:	umull	r8, r9, lr, fp
   15a24:	umull	r2, r3, fp, r3
   15a28:	strd	r2, [sp, #16]
   15a2c:	strd	r8, [sp, #24]
   15a30:	bge	15a48 <__assert_fail@plt+0x4bbc>
   15a34:	subs	r3, r2, ip
   15a38:	str	r3, [sp, #16]
   15a3c:	ldr	r3, [sp, #20]
   15a40:	sbc	r3, r3, fp
   15a44:	str	r3, [sp, #20]
   15a48:	ldr	r3, [sp, #16]
   15a4c:	mov	lr, #0
   15a50:	ldrd	sl, [sp, #24]
   15a54:	adds	r2, r3, fp
   15a58:	ldr	r3, [sp, #20]
   15a5c:	adc	lr, r3, lr
   15a60:	cmp	lr, r2, asr #31
   15a64:	beq	153cc <__assert_fail@plt+0x4540>
   15a68:	ldrd	r8, [sp, #8]
   15a6c:	mov	ip, #1
   15a70:	mul	lr, r0, r9
   15a74:	umull	r2, r3, r0, r8
   15a78:	mla	lr, r8, r1, lr
   15a7c:	mov	sl, r2
   15a80:	add	r3, lr, r3
   15a84:	mov	r2, r3
   15a88:	b	153cc <__assert_fail@plt+0x4540>
   15a8c:	movw	r3, #29124	; 0x71c4
   15a90:	movt	r3, #1
   15a94:	movw	r1, #29136	; 0x71d0
   15a98:	movt	r1, #1
   15a9c:	movw	r0, #29152	; 0x71e0
   15aa0:	movt	r0, #1
   15aa4:	mov	r2, #85	; 0x55
   15aa8:	bl	10e8c <__assert_fail@plt>
   15aac:	adds	ip, r8, r8
   15ab0:	mov	r1, #1
   15ab4:	adc	r3, r9, r9
   15ab8:	b	152e0 <__assert_fail@plt+0x4454>
   15abc:	ldrd	r4, [sp, #8]
   15ac0:	mov	r1, #1
   15ac4:	mul	sl, r8, r5
   15ac8:	umull	r2, r3, r8, r4
   15acc:	mla	sl, r4, r9, sl
   15ad0:	mov	fp, r2
   15ad4:	add	r2, sl, r3
   15ad8:	b	155d4 <__assert_fail@plt+0x4748>
   15adc:	ldrd	r4, [sp, #8]
   15ae0:	mov	r1, #1
   15ae4:	mul	sl, r8, r5
   15ae8:	umull	r2, r3, r8, r4
   15aec:	mla	sl, r4, r9, sl
   15af0:	mov	fp, r2
   15af4:	add	r2, sl, r3
   15af8:	b	154e4 <__assert_fail@plt+0x4658>
   15afc:	ldrd	r4, [sp, #8]
   15b00:	mov	r1, #1
   15b04:	mul	sl, r8, r5
   15b08:	umull	r2, r3, r8, r4
   15b0c:	mla	sl, r4, r9, sl
   15b10:	mov	fp, r2
   15b14:	add	r2, sl, r3
   15b18:	b	1564c <__assert_fail@plt+0x47c0>
   15b1c:	ldrd	r4, [sp, #8]
   15b20:	mov	r1, #1
   15b24:	mul	sl, r8, r5
   15b28:	umull	r2, r3, r8, r4
   15b2c:	mla	sl, r4, r9, sl
   15b30:	mov	fp, r2
   15b34:	add	r2, sl, r3
   15b38:	b	1546c <__assert_fail@plt+0x45e0>
   15b3c:	ldrd	r4, [sp, #8]
   15b40:	mov	r1, #1
   15b44:	mul	sl, r8, r5
   15b48:	umull	r2, r3, r8, r4
   15b4c:	mla	sl, r4, r9, sl
   15b50:	mov	fp, r2
   15b54:	add	r2, sl, r3
   15b58:	b	1535c <__assert_fail@plt+0x44d0>
   15b5c:	ldrd	r4, [sp, #8]
   15b60:	mov	r1, #1
   15b64:	mul	sl, r8, r5
   15b68:	umull	r2, r3, r8, r4
   15b6c:	mla	sl, r4, r9, sl
   15b70:	mov	fp, r2
   15b74:	add	r2, sl, r3
   15b78:	b	1555c <__assert_fail@plt+0x46d0>
   15b7c:	ldrd	sl, [sp, #8]
   15b80:	mov	ip, #1
   15b84:	mul	r1, r8, fp
   15b88:	umull	r2, r3, r8, sl
   15b8c:	mla	r0, sl, r9, r1
   15b90:	mov	r1, r2
   15b94:	add	r2, r0, r3
   15b98:	b	15408 <__assert_fail@plt+0x457c>
   15b9c:	ldrd	r2, [sp, #8]
   15ba0:	mov	r1, #1
   15ba4:	ldr	ip, [sp, #8]
   15ba8:	mul	r0, r8, r3
   15bac:	umull	r2, r3, r8, r2
   15bb0:	mla	r0, ip, r9, r0
   15bb4:	mov	lr, r2
   15bb8:	add	r3, r0, r3
   15bbc:	b	153a8 <__assert_fail@plt+0x451c>
   15bc0:	cmp	r1, #0
   15bc4:	cmpne	r0, #0
   15bc8:	beq	15c14 <__assert_fail@plt+0x4d88>
   15bcc:	strd	r4, [sp, #-16]!
   15bd0:	umull	r4, r5, r0, r1
   15bd4:	str	r6, [sp, #8]
   15bd8:	str	lr, [sp, #12]
   15bdc:	adds	r3, r5, #0
   15be0:	movne	r3, #1
   15be4:	cmp	r4, #0
   15be8:	blt	15bf4 <__assert_fail@plt+0x4d68>
   15bec:	cmp	r3, #0
   15bf0:	beq	15c20 <__assert_fail@plt+0x4d94>
   15bf4:	bl	10dc0 <__errno_location@plt>
   15bf8:	mov	r3, #12
   15bfc:	ldrd	r4, [sp]
   15c00:	ldr	r6, [sp, #8]
   15c04:	add	sp, sp, #12
   15c08:	str	r3, [r0]
   15c0c:	mov	r0, #0
   15c10:	pop	{pc}		; (ldr pc, [sp], #4)
   15c14:	mov	r1, #1
   15c18:	mov	r0, r1
   15c1c:	b	10c34 <calloc@plt>
   15c20:	ldrd	r4, [sp]
   15c24:	ldr	r6, [sp, #8]
   15c28:	ldr	lr, [sp, #12]
   15c2c:	add	sp, sp, #16
   15c30:	b	10c34 <calloc@plt>
   15c34:	cmp	r0, #0
   15c38:	beq	15c44 <__assert_fail@plt+0x4db8>
   15c3c:	blt	15c4c <__assert_fail@plt+0x4dc0>
   15c40:	b	10d54 <malloc@plt>
   15c44:	mov	r0, #1
   15c48:	b	10d54 <malloc@plt>
   15c4c:	str	r4, [sp, #-8]!
   15c50:	str	lr, [sp, #4]
   15c54:	bl	10dc0 <__errno_location@plt>
   15c58:	mov	r3, #12
   15c5c:	ldr	r4, [sp]
   15c60:	add	sp, sp, #4
   15c64:	str	r3, [r0]
   15c68:	mov	r0, #0
   15c6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c70:	cmp	r0, #0
   15c74:	beq	15c9c <__assert_fail@plt+0x4e10>
   15c78:	cmp	r1, #0
   15c7c:	str	r4, [sp, #-8]!
   15c80:	str	lr, [sp, #4]
   15c84:	beq	15ca4 <__assert_fail@plt+0x4e18>
   15c88:	blt	15cb8 <__assert_fail@plt+0x4e2c>
   15c8c:	ldr	r4, [sp]
   15c90:	ldr	lr, [sp, #4]
   15c94:	add	sp, sp, #8
   15c98:	b	10cd0 <realloc@plt>
   15c9c:	mov	r0, r1
   15ca0:	b	15c34 <__assert_fail@plt+0x4da8>
   15ca4:	bl	15e64 <__assert_fail@plt+0x4fd8>
   15ca8:	ldr	r4, [sp]
   15cac:	add	sp, sp, #4
   15cb0:	mov	r0, #0
   15cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   15cb8:	bl	10dc0 <__errno_location@plt>
   15cbc:	mov	r3, #12
   15cc0:	str	r3, [r0]
   15cc4:	b	15ca8 <__assert_fail@plt+0x4e1c>
   15cc8:	strd	r4, [sp, #-16]!
   15ccc:	mov	r4, r0
   15cd0:	str	r6, [sp, #8]
   15cd4:	str	lr, [sp, #12]
   15cd8:	bl	10d24 <__fpending@plt>
   15cdc:	ldr	r5, [r4]
   15ce0:	mov	r6, r0
   15ce4:	mov	r0, r4
   15ce8:	bl	15d50 <__assert_fail@plt+0x4ec4>
   15cec:	mov	r4, r0
   15cf0:	and	r5, r5, #32
   15cf4:	cmp	r5, #0
   15cf8:	bne	15d30 <__assert_fail@plt+0x4ea4>
   15cfc:	cmp	r0, #0
   15d00:	beq	15d1c <__assert_fail@plt+0x4e90>
   15d04:	cmp	r6, #0
   15d08:	bne	15d48 <__assert_fail@plt+0x4ebc>
   15d0c:	bl	10dc0 <__errno_location@plt>
   15d10:	ldr	r4, [r0]
   15d14:	subs	r4, r4, #9
   15d18:	mvnne	r4, #0
   15d1c:	mov	r0, r4
   15d20:	ldrd	r4, [sp]
   15d24:	ldr	r6, [sp, #8]
   15d28:	add	sp, sp, #12
   15d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d30:	cmp	r0, #0
   15d34:	bne	15d48 <__assert_fail@plt+0x4ebc>
   15d38:	bl	10dc0 <__errno_location@plt>
   15d3c:	str	r4, [r0]
   15d40:	mvn	r4, #0
   15d44:	b	15d1c <__assert_fail@plt+0x4e90>
   15d48:	mvn	r4, #0
   15d4c:	b	15d1c <__assert_fail@plt+0x4e90>
   15d50:	strd	r4, [sp, #-12]!
   15d54:	mov	r4, r0
   15d58:	str	lr, [sp, #8]
   15d5c:	sub	sp, sp, #12
   15d60:	bl	10df0 <fileno@plt>
   15d64:	cmp	r0, #0
   15d68:	mov	r0, r4
   15d6c:	blt	15df0 <__assert_fail@plt+0x4f64>
   15d70:	bl	10d6c <__freading@plt>
   15d74:	cmp	r0, #0
   15d78:	bne	15dbc <__assert_fail@plt+0x4f30>
   15d7c:	mov	r0, r4
   15d80:	bl	15e04 <__assert_fail@plt+0x4f78>
   15d84:	cmp	r0, #0
   15d88:	beq	15dec <__assert_fail@plt+0x4f60>
   15d8c:	bl	10dc0 <__errno_location@plt>
   15d90:	mov	r5, r0
   15d94:	mov	r0, r4
   15d98:	ldr	r4, [r5]
   15d9c:	bl	10e08 <fclose@plt>
   15da0:	cmp	r4, #0
   15da4:	mvnne	r0, #0
   15da8:	strne	r4, [r5]
   15dac:	add	sp, sp, #12
   15db0:	ldrd	r4, [sp]
   15db4:	add	sp, sp, #8
   15db8:	pop	{pc}		; (ldr pc, [sp], #4)
   15dbc:	mov	r0, r4
   15dc0:	bl	10df0 <fileno@plt>
   15dc4:	mov	r1, #1
   15dc8:	mov	r2, #0
   15dcc:	mov	r3, #0
   15dd0:	str	r1, [sp]
   15dd4:	bl	10d0c <lseek64@plt>
   15dd8:	mvn	r3, #0
   15ddc:	mvn	r2, #0
   15de0:	cmp	r1, r3
   15de4:	cmpeq	r0, r2
   15de8:	bne	15d7c <__assert_fail@plt+0x4ef0>
   15dec:	mov	r0, r4
   15df0:	add	sp, sp, #12
   15df4:	ldrd	r4, [sp]
   15df8:	ldr	lr, [sp, #8]
   15dfc:	add	sp, sp, #12
   15e00:	b	10e08 <fclose@plt>
   15e04:	str	r4, [sp, #-8]!
   15e08:	subs	r4, r0, #0
   15e0c:	str	lr, [sp, #4]
   15e10:	sub	sp, sp, #8
   15e14:	beq	15e30 <__assert_fail@plt+0x4fa4>
   15e18:	bl	10d6c <__freading@plt>
   15e1c:	cmp	r0, #0
   15e20:	beq	15e30 <__assert_fail@plt+0x4fa4>
   15e24:	ldr	r3, [r4]
   15e28:	tst	r3, #256	; 0x100
   15e2c:	bne	15e48 <__assert_fail@plt+0x4fbc>
   15e30:	mov	r0, r4
   15e34:	add	sp, sp, #8
   15e38:	ldr	r4, [sp]
   15e3c:	ldr	lr, [sp, #4]
   15e40:	add	sp, sp, #8
   15e44:	b	10c64 <fflush@plt>
   15e48:	mov	r1, #1
   15e4c:	mov	r2, #0
   15e50:	mov	r3, #0
   15e54:	mov	r0, r4
   15e58:	str	r1, [sp]
   15e5c:	bl	15ec4 <__assert_fail@plt+0x5038>
   15e60:	b	15e30 <__assert_fail@plt+0x4fa4>
   15e64:	strd	r4, [sp, #-12]!
   15e68:	mov	r5, r0
   15e6c:	str	lr, [sp, #8]
   15e70:	sub	sp, sp, #12
   15e74:	bl	10dc0 <__errno_location@plt>
   15e78:	mov	r4, r0
   15e7c:	mov	r2, #0
   15e80:	ldr	r3, [r4]
   15e84:	mov	r0, r5
   15e88:	str	r2, [r4]
   15e8c:	str	r3, [sp]
   15e90:	str	r3, [sp, #4]
   15e94:	bl	10c70 <free@plt>
   15e98:	ldr	r3, [r4]
   15e9c:	add	r2, sp, #8
   15ea0:	clz	r3, r3
   15ea4:	lsr	r3, r3, #5
   15ea8:	add	r3, r2, r3, lsl #2
   15eac:	ldr	r3, [r3, #-8]
   15eb0:	str	r3, [r4]
   15eb4:	add	sp, sp, #12
   15eb8:	ldrd	r4, [sp]
   15ebc:	add	sp, sp, #8
   15ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ec4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15ec8:	mov	r4, r0
   15ecc:	ldr	ip, [r0, #4]
   15ed0:	strd	r6, [sp, #8]
   15ed4:	str	lr, [sp, #20]
   15ed8:	ldr	lr, [r0, #8]
   15edc:	str	r8, [sp, #16]
   15ee0:	sub	sp, sp, #8
   15ee4:	ldr	r5, [sp, #32]
   15ee8:	cmp	lr, ip
   15eec:	beq	15f14 <__assert_fail@plt+0x5088>
   15ef0:	mov	r0, r4
   15ef4:	str	r5, [sp, #32]
   15ef8:	add	sp, sp, #8
   15efc:	ldrd	r4, [sp]
   15f00:	ldrd	r6, [sp, #8]
   15f04:	ldr	r8, [sp, #16]
   15f08:	ldr	lr, [sp, #20]
   15f0c:	add	sp, sp, #24
   15f10:	b	10e14 <fseeko64@plt>
   15f14:	ldr	ip, [r0, #16]
   15f18:	ldr	lr, [r0, #20]
   15f1c:	cmp	lr, ip
   15f20:	bne	15ef0 <__assert_fail@plt+0x5064>
   15f24:	ldr	r8, [r0, #36]	; 0x24
   15f28:	cmp	r8, #0
   15f2c:	bne	15ef0 <__assert_fail@plt+0x5064>
   15f30:	mov	r6, r2
   15f34:	mov	r7, r3
   15f38:	bl	10df0 <fileno@plt>
   15f3c:	mov	r2, r6
   15f40:	mov	r3, r7
   15f44:	str	r5, [sp]
   15f48:	bl	10d0c <lseek64@plt>
   15f4c:	mvn	r3, #0
   15f50:	mvn	r2, #0
   15f54:	cmp	r1, r3
   15f58:	cmpeq	r0, r2
   15f5c:	beq	15f8c <__assert_fail@plt+0x5100>
   15f60:	ldr	r3, [r4]
   15f64:	strd	r0, [r4, #80]	; 0x50
   15f68:	bic	r3, r3, #16
   15f6c:	str	r3, [r4]
   15f70:	mov	r0, r8
   15f74:	add	sp, sp, #8
   15f78:	ldrd	r4, [sp]
   15f7c:	ldrd	r6, [sp, #8]
   15f80:	ldr	r8, [sp, #16]
   15f84:	add	sp, sp, #20
   15f88:	pop	{pc}		; (ldr pc, [sp], #4)
   15f8c:	mvn	r8, #0
   15f90:	b	15f70 <__assert_fail@plt+0x50e4>
   15f94:	mov	r0, #14
   15f98:	str	r4, [sp, #-8]!
   15f9c:	str	lr, [sp, #4]
   15fa0:	bl	10e38 <nl_langinfo@plt>
   15fa4:	cmp	r0, #0
   15fa8:	beq	15fcc <__assert_fail@plt+0x5140>
   15fac:	ldrb	r2, [r0]
   15fb0:	movw	r3, #29192	; 0x7208
   15fb4:	movt	r3, #1
   15fb8:	ldr	r4, [sp]
   15fbc:	add	sp, sp, #4
   15fc0:	cmp	r2, #0
   15fc4:	moveq	r0, r3
   15fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   15fcc:	ldr	r4, [sp]
   15fd0:	add	sp, sp, #4
   15fd4:	movw	r0, #29192	; 0x7208
   15fd8:	movt	r0, #1
   15fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   15fe0:	strd	r4, [sp, #-20]!	; 0xffffffec
   15fe4:	mov	r5, r2
   15fe8:	strd	r6, [sp, #8]
   15fec:	subs	r6, r0, #0
   15ff0:	mov	r7, r1
   15ff4:	str	lr, [sp, #16]
   15ff8:	sub	sp, sp, #12
   15ffc:	addeq	r6, sp, #4
   16000:	mov	r0, r6
   16004:	bl	10d30 <mbrtowc@plt>
   16008:	cmp	r5, #0
   1600c:	cmnne	r0, #3
   16010:	mov	r4, r0
   16014:	bhi	16030 <__assert_fail@plt+0x51a4>
   16018:	mov	r0, r4
   1601c:	add	sp, sp, #12
   16020:	ldrd	r4, [sp]
   16024:	ldrd	r6, [sp, #8]
   16028:	add	sp, sp, #16
   1602c:	pop	{pc}		; (ldr pc, [sp], #4)
   16030:	mov	r0, #0
   16034:	bl	16088 <__assert_fail@plt+0x51fc>
   16038:	cmp	r0, #0
   1603c:	bne	16018 <__assert_fail@plt+0x518c>
   16040:	ldrb	r3, [r7]
   16044:	mov	r4, #1
   16048:	str	r3, [r6]
   1604c:	b	16018 <__assert_fail@plt+0x518c>
   16050:	umull	r2, r3, r1, r2
   16054:	cmp	r3, #0
   16058:	bne	16064 <__assert_fail@plt+0x51d8>
   1605c:	mov	r1, r2
   16060:	b	15c70 <__assert_fail@plt+0x4de4>
   16064:	str	r4, [sp, #-8]!
   16068:	str	lr, [sp, #4]
   1606c:	bl	10dc0 <__errno_location@plt>
   16070:	mov	r3, #12
   16074:	ldr	r4, [sp]
   16078:	add	sp, sp, #4
   1607c:	str	r3, [r0]
   16080:	mov	r0, #0
   16084:	pop	{pc}		; (ldr pc, [sp], #4)
   16088:	push	{lr}		; (str lr, [sp, #-4]!)
   1608c:	sub	sp, sp, #268	; 0x10c
   16090:	movw	r2, #257	; 0x101
   16094:	add	r1, sp, #4
   16098:	bl	160e0 <__assert_fail@plt+0x5254>
   1609c:	cmp	r0, #0
   160a0:	movne	r0, #0
   160a4:	bne	160d8 <__assert_fail@plt+0x524c>
   160a8:	movw	r1, #29200	; 0x7210
   160ac:	movt	r1, #1
   160b0:	add	r0, sp, #4
   160b4:	bl	10c58 <strcmp@plt>
   160b8:	cmp	r0, #0
   160bc:	beq	160d8 <__assert_fail@plt+0x524c>
   160c0:	add	r0, sp, #4
   160c4:	movw	r1, #29204	; 0x7214
   160c8:	movt	r1, #1
   160cc:	bl	10c58 <strcmp@plt>
   160d0:	adds	r0, r0, #0
   160d4:	movne	r0, #1
   160d8:	add	sp, sp, #268	; 0x10c
   160dc:	pop	{pc}		; (ldr pc, [sp], #4)
   160e0:	strd	r4, [sp, #-16]!
   160e4:	mov	r5, r1
   160e8:	mov	r1, #0
   160ec:	mov	r4, r2
   160f0:	str	r6, [sp, #8]
   160f4:	str	lr, [sp, #12]
   160f8:	bl	10e20 <setlocale@plt>
   160fc:	subs	r6, r0, #0
   16100:	beq	16180 <__assert_fail@plt+0x52f4>
   16104:	bl	10da8 <strlen@plt>
   16108:	cmp	r4, r0
   1610c:	bhi	1612c <__assert_fail@plt+0x52a0>
   16110:	cmp	r4, #0
   16114:	moveq	r0, #34	; 0x22
   16118:	bne	16150 <__assert_fail@plt+0x52c4>
   1611c:	ldrd	r4, [sp]
   16120:	ldr	r6, [sp, #8]
   16124:	add	sp, sp, #12
   16128:	pop	{pc}		; (ldr pc, [sp], #4)
   1612c:	add	r2, r0, #1
   16130:	mov	r1, r6
   16134:	mov	r0, r5
   16138:	bl	10c88 <memcpy@plt>
   1613c:	ldrd	r4, [sp]
   16140:	mov	r0, #0
   16144:	ldr	r6, [sp, #8]
   16148:	add	sp, sp, #12
   1614c:	pop	{pc}		; (ldr pc, [sp], #4)
   16150:	sub	r4, r4, #1
   16154:	mov	r1, r6
   16158:	mov	r2, r4
   1615c:	mov	r0, r5
   16160:	bl	10c88 <memcpy@plt>
   16164:	mov	r3, #0
   16168:	mov	r0, #34	; 0x22
   1616c:	strb	r3, [r5, r4]
   16170:	ldrd	r4, [sp]
   16174:	ldr	r6, [sp, #8]
   16178:	add	sp, sp, #12
   1617c:	pop	{pc}		; (ldr pc, [sp], #4)
   16180:	cmp	r4, #0
   16184:	mov	r0, #22
   16188:	strbne	r6, [r5]
   1618c:	ldrd	r4, [sp]
   16190:	ldr	r6, [sp, #8]
   16194:	add	sp, sp, #12
   16198:	pop	{pc}		; (ldr pc, [sp], #4)
   1619c:	mov	r1, #0
   161a0:	b	10e20 <setlocale@plt>
   161a4:	cmp	r3, #0
   161a8:	cmpeq	r2, #0
   161ac:	bne	161d0 <__assert_fail@plt+0x5344>
   161b0:	cmp	r1, #0
   161b4:	movlt	r1, #-2147483648	; 0x80000000
   161b8:	movlt	r0, #0
   161bc:	blt	161cc <__assert_fail@plt+0x5340>
   161c0:	cmpeq	r0, #0
   161c4:	mvnne	r1, #-2147483648	; 0x80000000
   161c8:	mvnne	r0, #0
   161cc:	b	16278 <__assert_fail@plt+0x53ec>
   161d0:	sub	sp, sp, #8
   161d4:	push	{sp, lr}
   161d8:	cmp	r1, #0
   161dc:	blt	161fc <__assert_fail@plt+0x5370>
   161e0:	cmp	r3, #0
   161e4:	blt	16230 <__assert_fail@plt+0x53a4>
   161e8:	bl	16288 <__assert_fail@plt+0x53fc>
   161ec:	ldr	lr, [sp, #4]
   161f0:	add	sp, sp, #8
   161f4:	pop	{r2, r3}
   161f8:	bx	lr
   161fc:	rsbs	r0, r0, #0
   16200:	sbc	r1, r1, r1, lsl #1
   16204:	cmp	r3, #0
   16208:	blt	16254 <__assert_fail@plt+0x53c8>
   1620c:	bl	16288 <__assert_fail@plt+0x53fc>
   16210:	ldr	lr, [sp, #4]
   16214:	add	sp, sp, #8
   16218:	pop	{r2, r3}
   1621c:	rsbs	r0, r0, #0
   16220:	sbc	r1, r1, r1, lsl #1
   16224:	rsbs	r2, r2, #0
   16228:	sbc	r3, r3, r3, lsl #1
   1622c:	bx	lr
   16230:	rsbs	r2, r2, #0
   16234:	sbc	r3, r3, r3, lsl #1
   16238:	bl	16288 <__assert_fail@plt+0x53fc>
   1623c:	ldr	lr, [sp, #4]
   16240:	add	sp, sp, #8
   16244:	pop	{r2, r3}
   16248:	rsbs	r0, r0, #0
   1624c:	sbc	r1, r1, r1, lsl #1
   16250:	bx	lr
   16254:	rsbs	r2, r2, #0
   16258:	sbc	r3, r3, r3, lsl #1
   1625c:	bl	16288 <__assert_fail@plt+0x53fc>
   16260:	ldr	lr, [sp, #4]
   16264:	add	sp, sp, #8
   16268:	pop	{r2, r3}
   1626c:	rsbs	r2, r2, #0
   16270:	sbc	r3, r3, r3, lsl #1
   16274:	bx	lr
   16278:	push	{r1, lr}
   1627c:	mov	r0, #8
   16280:	bl	10c4c <raise@plt>
   16284:	pop	{r1, pc}
   16288:	cmp	r1, r3
   1628c:	cmpeq	r0, r2
   16290:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16294:	mov	r4, r0
   16298:	movcc	r0, #0
   1629c:	mov	r5, r1
   162a0:	ldr	lr, [sp, #36]	; 0x24
   162a4:	movcc	r1, r0
   162a8:	bcc	163a4 <__assert_fail@plt+0x5518>
   162ac:	cmp	r3, #0
   162b0:	clzeq	ip, r2
   162b4:	clzne	ip, r3
   162b8:	addeq	ip, ip, #32
   162bc:	cmp	r5, #0
   162c0:	clzeq	r1, r4
   162c4:	addeq	r1, r1, #32
   162c8:	clzne	r1, r5
   162cc:	sub	ip, ip, r1
   162d0:	sub	sl, ip, #32
   162d4:	lsl	r9, r3, ip
   162d8:	rsb	fp, ip, #32
   162dc:	orr	r9, r9, r2, lsl sl
   162e0:	orr	r9, r9, r2, lsr fp
   162e4:	lsl	r8, r2, ip
   162e8:	cmp	r5, r9
   162ec:	cmpeq	r4, r8
   162f0:	movcc	r0, #0
   162f4:	movcc	r1, r0
   162f8:	bcc	16314 <__assert_fail@plt+0x5488>
   162fc:	mov	r0, #1
   16300:	subs	r4, r4, r8
   16304:	lsl	r1, r0, sl
   16308:	orr	r1, r1, r0, lsr fp
   1630c:	lsl	r0, r0, ip
   16310:	sbc	r5, r5, r9
   16314:	cmp	ip, #0
   16318:	beq	163a4 <__assert_fail@plt+0x5518>
   1631c:	lsr	r6, r8, #1
   16320:	orr	r6, r6, r9, lsl #31
   16324:	lsr	r7, r9, #1
   16328:	mov	r2, ip
   1632c:	b	16350 <__assert_fail@plt+0x54c4>
   16330:	subs	r3, r4, r6
   16334:	sbc	r8, r5, r7
   16338:	adds	r3, r3, r3
   1633c:	adc	r8, r8, r8
   16340:	adds	r4, r3, #1
   16344:	adc	r5, r8, #0
   16348:	subs	r2, r2, #1
   1634c:	beq	1636c <__assert_fail@plt+0x54e0>
   16350:	cmp	r5, r7
   16354:	cmpeq	r4, r6
   16358:	bcs	16330 <__assert_fail@plt+0x54a4>
   1635c:	adds	r4, r4, r4
   16360:	adc	r5, r5, r5
   16364:	subs	r2, r2, #1
   16368:	bne	16350 <__assert_fail@plt+0x54c4>
   1636c:	lsr	r3, r4, ip
   16370:	orr	r3, r3, r5, lsl fp
   16374:	lsr	r2, r5, ip
   16378:	orr	r3, r3, r5, lsr sl
   1637c:	adds	r0, r0, r4
   16380:	mov	r4, r3
   16384:	lsl	r3, r2, ip
   16388:	orr	r3, r3, r4, lsl sl
   1638c:	lsl	ip, r4, ip
   16390:	orr	r3, r3, r4, lsr fp
   16394:	adc	r1, r1, r5
   16398:	subs	r0, r0, ip
   1639c:	mov	r5, r2
   163a0:	sbc	r1, r1, r3
   163a4:	cmp	lr, #0
   163a8:	strdne	r4, [lr]
   163ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   163b4:	mov	r7, r0
   163b8:	ldr	r6, [pc, #72]	; 16408 <__assert_fail@plt+0x557c>
   163bc:	ldr	r5, [pc, #72]	; 1640c <__assert_fail@plt+0x5580>
   163c0:	add	r6, pc, r6
   163c4:	add	r5, pc, r5
   163c8:	sub	r6, r6, r5
   163cc:	mov	r8, r1
   163d0:	mov	r9, r2
   163d4:	bl	10c14 <calloc@plt-0x20>
   163d8:	asrs	r6, r6, #2
   163dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   163e0:	mov	r4, #0
   163e4:	add	r4, r4, #1
   163e8:	ldr	r3, [r5], #4
   163ec:	mov	r2, r9
   163f0:	mov	r1, r8
   163f4:	mov	r0, r7
   163f8:	blx	r3
   163fc:	cmp	r6, r4
   16400:	bne	163e4 <__assert_fail@plt+0x5558>
   16404:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16408:	andeq	r1, r1, ip, asr #22
   1640c:	andeq	r1, r1, r4, asr #22
   16410:	bx	lr
   16414:	ldr	r3, [pc, #12]	; 16428 <__assert_fail@plt+0x559c>
   16418:	mov	r1, #0
   1641c:	add	r3, pc, r3
   16420:	ldr	r2, [r3]
   16424:	b	10dcc <__cxa_atexit@plt>
   16428:			; <UNDEFINED> instruction: 0x00011cbc

Disassembly of section .fini:

0001642c <.fini>:
   1642c:	push	{r3, lr}
   16430:	pop	{r3, pc}
