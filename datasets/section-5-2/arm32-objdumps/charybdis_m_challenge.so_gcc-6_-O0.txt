
../repos/charybdis/modules/.libs/m_challenge.so:     file format elf32-littlearm


Disassembly of section .init:

0000086c <_init>:
 86c:	push	{r3, lr}
 870:	bl	a00 <call_weak_fn>
 874:	pop	{r3, pc}

Disassembly of section .plt:

00000878 <.plt>:
 878:	push	{lr}		; (str lr, [sp, #-4]!)
 87c:	ldr	lr, [pc, #4]	; 888 <.plt+0x10>
 880:	add	lr, pc, lr
 884:	ldr	pc, [lr, #8]!
 888:	.word	0x00011778

0000088c <calloc@plt>:
 88c:	add	ip, pc, #0, 12
 890:	add	ip, ip, #69632	; 0x11000
 894:	ldr	pc, [ip, #1912]!	; 0x778

00000898 <rb_current_time@plt>:
 898:	add	ip, pc, #0, 12
 89c:	add	ip, ip, #69632	; 0x11000
 8a0:	ldr	pc, [ip, #1904]!	; 0x770

000008a4 <__cxa_finalize@plt>:
 8a4:	add	ip, pc, #0, 12
 8a8:	add	ip, ip, #69632	; 0x11000
 8ac:	ldr	pc, [ip, #1896]!	; 0x768

000008b0 <RSA_public_encrypt@plt>:
 8b0:	add	ip, pc, #0, 12
 8b4:	add	ip, ip, #69632	; 0x11000
 8b8:	ldr	pc, [ip, #1888]!	; 0x760

000008bc <sendto_one@plt>:
 8bc:	add	ip, pc, #0, 12
 8c0:	add	ip, ip, #69632	; 0x11000
 8c4:	ldr	pc, [ip, #1880]!	; 0x758

000008c8 <free@plt>:
 8c8:	add	ip, pc, #0, 12
 8cc:	add	ip, ip, #69632	; 0x11000
 8d0:	ldr	pc, [ip, #1872]!	; 0x750

000008d4 <rb_strcasecmp@plt>:
 8d4:	add	ip, pc, #0, 12
 8d8:	add	ip, ip, #69632	; 0x11000
 8dc:	ldr	pc, [ip, #1864]!	; 0x748

000008e0 <RSA_size@plt>:
 8e0:	add	ip, pc, #0, 12
 8e4:	add	ip, ip, #69632	; 0x11000
 8e8:	ldr	pc, [ip, #1856]!	; 0x740

000008ec <rb_outofmemory@plt>:
 8ec:	add	ip, pc, #0, 12
 8f0:	add	ip, ip, #69632	; 0x11000
 8f4:	ldr	pc, [ip, #1848]!	; 0x738

000008f8 <memcmp@plt>:
 8f8:	add	ip, pc, #0, 12
 8fc:	add	ip, ip, #69632	; 0x11000
 900:	ldr	pc, [ip, #1840]!	; 0x730

00000904 <sendto_realops_snomask@plt>:
 904:	add	ip, pc, #0, 12
 908:	add	ip, ip, #69632	; 0x11000
 90c:	ldr	pc, [ip, #1832]!	; 0x728

00000910 <rb_base64_decode@plt>:
 910:	add	ip, pc, #0, 12
 914:	add	ip, ip, #69632	; 0x11000
 918:	ldr	pc, [ip, #1824]!	; 0x720

0000091c <strcpy@plt>:
 91c:	add	ip, pc, #0, 12
 920:	add	ip, ip, #69632	; 0x11000
 924:	ldr	pc, [ip, #1816]!	; 0x718

00000928 <malloc@plt>:
 928:	add	ip, pc, #0, 12
 92c:	add	ip, ip, #69632	; 0x11000
 930:	ldr	pc, [ip, #1808]!	; 0x710

00000934 <rb_get_random@plt>:
 934:	add	ip, pc, #0, 12
 938:	add	ip, ip, #69632	; 0x11000
 93c:	ldr	pc, [ip, #1800]!	; 0x708

00000940 <__gmon_start__@plt>:
 940:	add	ip, pc, #0, 12
 944:	add	ip, ip, #69632	; 0x11000
 948:	ldr	pc, [ip, #1792]!	; 0x700

0000094c <OPENSSL_init_crypto@plt>:
 94c:	add	ip, pc, #0, 12
 950:	add	ip, ip, #69632	; 0x11000
 954:	ldr	pc, [ip, #1784]!	; 0x6f8

00000958 <send_oper_motd@plt>:
 958:	add	ip, pc, #0, 12
 95c:	add	ip, ip, #69632	; 0x11000
 960:	ldr	pc, [ip, #1776]!	; 0x6f0

00000964 <sendto_one_numeric@plt>:
 964:	add	ip, pc, #0, 12
 968:	add	ip, ip, #69632	; 0x11000
 96c:	ldr	pc, [ip, #1768]!	; 0x6e8

00000970 <strlen@plt>:
 970:	add	ip, pc, #0, 12
 974:	add	ip, ip, #69632	; 0x11000
 978:	ldr	pc, [ip, #1760]!	; 0x6e0

0000097c <SHA1_Update@plt>:
 97c:	add	ip, pc, #0, 12
 980:	add	ip, ip, #69632	; 0x11000
 984:	ldr	pc, [ip, #1752]!	; 0x6d8

00000988 <ERR_error_string@plt>:
 988:	add	ip, pc, #0, 12
 98c:	add	ip, ip, #69632	; 0x11000
 990:	ldr	pc, [ip, #1744]!	; 0x6d0

00000994 <ilog@plt>:
 994:	add	ip, pc, #0, 12
 998:	add	ip, ip, #69632	; 0x11000
 99c:	ldr	pc, [ip, #1736]!	; 0x6c8

000009a0 <SHA1_Init@plt>:
 9a0:	add	ip, pc, #0, 12
 9a4:	add	ip, ip, #69632	; 0x11000
 9a8:	ldr	pc, [ip, #1728]!	; 0x6c0

000009ac <ERR_get_error@plt>:
 9ac:	add	ip, pc, #0, 12
 9b0:	add	ip, ip, #69632	; 0x11000
 9b4:	ldr	pc, [ip, #1720]!	; 0x6b8

000009b8 <sendto_one_notice@plt>:
 9b8:	add	ip, pc, #0, 12
 9bc:	add	ip, ip, #69632	; 0x11000
 9c0:	ldr	pc, [ip, #1712]!	; 0x6b0

000009c4 <rb_strlcpy@plt>:
 9c4:	add	ip, pc, #0, 12
 9c8:	add	ip, ip, #69632	; 0x11000
 9cc:	ldr	pc, [ip, #1704]!	; 0x6a8

000009d0 <find_oper_conf@plt>:
 9d0:	add	ip, pc, #0, 12
 9d4:	add	ip, ip, #69632	; 0x11000
 9d8:	ldr	pc, [ip, #1696]!	; 0x6a0

000009dc <oper_up@plt>:
 9dc:	add	ip, pc, #0, 12
 9e0:	add	ip, ip, #69632	; 0x11000
 9e4:	ldr	pc, [ip, #1688]!	; 0x698

000009e8 <rb_base64_encode@plt>:
 9e8:	add	ip, pc, #0, 12
 9ec:	add	ip, ip, #69632	; 0x11000
 9f0:	ldr	pc, [ip, #1680]!	; 0x690

000009f4 <SHA1_Final@plt>:
 9f4:	add	ip, pc, #0, 12
 9f8:	add	ip, ip, #69632	; 0x11000
 9fc:	ldr	pc, [ip, #1672]!	; 0x688

Disassembly of section .text:

00000a00 <call_weak_fn>:
     a00:	ldr	r3, [pc, #20]	; a1c <call_weak_fn+0x1c>
     a04:	ldr	r2, [pc, #20]	; a20 <call_weak_fn+0x20>
     a08:	add	r3, pc, r3
     a0c:	ldr	r2, [r3, r2]
     a10:	cmp	r2, #0
     a14:	bxeq	lr
     a18:	b	940 <__gmon_start__@plt>
     a1c:	.word	0x000115f0
     a20:	.word	0x00000090

00000a24 <deregister_tm_clones>:
     a24:	ldr	r3, [pc, #52]	; a60 <deregister_tm_clones+0x3c>
     a28:	ldr	r0, [pc, #52]	; a64 <deregister_tm_clones+0x40>
     a2c:	add	r3, pc, r3
     a30:	add	r0, pc, r0
     a34:	add	r3, r3, #3
     a38:	sub	r3, r3, r0
     a3c:	cmp	r3, #6
     a40:	ldr	r3, [pc, #32]	; a68 <deregister_tm_clones+0x44>
     a44:	add	r3, pc, r3
     a48:	bxls	lr
     a4c:	ldr	r2, [pc, #24]	; a6c <deregister_tm_clones+0x48>
     a50:	ldr	r3, [r3, r2]
     a54:	cmp	r3, #0
     a58:	bxeq	lr
     a5c:	bx	r3
     a60:	.word	0x000116e8
     a64:	.word	0x000116e4
     a68:	.word	0x000115b4
     a6c:	.word	0x0000008c

00000a70 <register_tm_clones>:
     a70:	ldr	r1, [pc, #56]	; ab0 <register_tm_clones+0x40>
     a74:	ldr	r0, [pc, #56]	; ab4 <register_tm_clones+0x44>
     a78:	add	r1, pc, r1
     a7c:	add	r0, pc, r0
     a80:	sub	r1, r1, r0
     a84:	ldr	r3, [pc, #44]	; ab8 <register_tm_clones+0x48>
     a88:	asr	r1, r1, #2
     a8c:	add	r3, pc, r3
     a90:	add	r1, r1, r1, lsr #31
     a94:	asrs	r1, r1, #1
     a98:	bxeq	lr
     a9c:	ldr	r2, [pc, #24]	; abc <register_tm_clones+0x4c>
     aa0:	ldr	r3, [r3, r2]
     aa4:	cmp	r3, #0
     aa8:	bxeq	lr
     aac:	bx	r3
     ab0:	.word	0x0001169c
     ab4:	.word	0x00011698
     ab8:	.word	0x0001156c
     abc:	.word	0x00000098

00000ac0 <__do_global_dtors_aux>:
     ac0:	ldr	r3, [pc, #76]	; b14 <__do_global_dtors_aux+0x54>
     ac4:	ldr	r2, [pc, #76]	; b18 <__do_global_dtors_aux+0x58>
     ac8:	add	r3, pc, r3
     acc:	add	r2, pc, r2
     ad0:	ldrb	r3, [r3]
     ad4:	cmp	r3, #0
     ad8:	bxne	lr
     adc:	ldr	r3, [pc, #56]	; b1c <__do_global_dtors_aux+0x5c>
     ae0:	push	{r4, lr}
     ae4:	ldr	r3, [r2, r3]
     ae8:	cmp	r3, #0
     aec:	beq	afc <__do_global_dtors_aux+0x3c>
     af0:	ldr	r3, [pc, #40]	; b20 <__do_global_dtors_aux+0x60>
     af4:	ldr	r0, [pc, r3]
     af8:	bl	8a4 <__cxa_finalize@plt>
     afc:	bl	a24 <deregister_tm_clones>
     b00:	ldr	r3, [pc, #28]	; b24 <__do_global_dtors_aux+0x64>
     b04:	mov	r2, #1
     b08:	add	r3, pc, r3
     b0c:	strb	r2, [r3]
     b10:	pop	{r4, pc}
     b14:	.word	0x0001164c
     b18:	.word	0x0001152c
     b1c:	.word	0x00000088
     b20:	.word	0x000115a8
     b24:	.word	0x0001160c

00000b28 <frame_dummy>:
     b28:	ldr	r0, [pc, #56]	; b68 <frame_dummy+0x40>
     b2c:	ldr	r3, [pc, #56]	; b6c <frame_dummy+0x44>
     b30:	add	r0, pc, r0
     b34:	ldr	r2, [r0]
     b38:	add	r3, pc, r3
     b3c:	cmp	r2, #0
     b40:	bne	b48 <frame_dummy+0x20>
     b44:	b	a70 <register_tm_clones>
     b48:	ldr	r2, [pc, #32]	; b70 <frame_dummy+0x48>
     b4c:	ldr	r3, [r3, r2]
     b50:	cmp	r3, #0
     b54:	beq	b44 <frame_dummy+0x1c>
     b58:	push	{r4, lr}
     b5c:	blx	r3
     b60:	pop	{r4, lr}
     b64:	b	a70 <register_tm_clones>
     b68:	.word	0x000113c4
     b6c:	.word	0x000114c0
     b70:	.word	0x00000094

00000b74 <rb_malloc>:
     b74:	push	{fp, lr}
     b78:	add	fp, sp, #4
     b7c:	sub	sp, sp, #16
     b80:	str	r0, [fp, #-16]
     b84:	ldr	r1, [fp, #-16]
     b88:	mov	r0, #1
     b8c:	bl	88c <calloc@plt>
     b90:	mov	r3, r0
     b94:	str	r3, [fp, #-8]
     b98:	ldr	r3, [fp, #-8]
     b9c:	cmp	r3, #0
     ba0:	moveq	r3, #1
     ba4:	movne	r3, #0
     ba8:	uxtb	r3, r3
     bac:	cmp	r3, #0
     bb0:	beq	bb8 <rb_malloc+0x44>
     bb4:	bl	8ec <rb_outofmemory@plt>
     bb8:	ldr	r3, [fp, #-8]
     bbc:	mov	r0, r3
     bc0:	sub	sp, fp, #4
     bc4:	pop	{fp, pc}

00000bc8 <rb_strdup>:
     bc8:	push	{fp, lr}
     bcc:	add	fp, sp, #4
     bd0:	sub	sp, sp, #16
     bd4:	str	r0, [fp, #-16]
     bd8:	ldr	r0, [fp, #-16]
     bdc:	bl	970 <strlen@plt>
     be0:	mov	r3, r0
     be4:	add	r3, r3, #1
     be8:	mov	r0, r3
     bec:	bl	928 <malloc@plt>
     bf0:	mov	r3, r0
     bf4:	str	r3, [fp, #-8]
     bf8:	ldr	r3, [fp, #-8]
     bfc:	cmp	r3, #0
     c00:	moveq	r3, #1
     c04:	movne	r3, #0
     c08:	uxtb	r3, r3
     c0c:	cmp	r3, #0
     c10:	beq	c18 <rb_strdup+0x50>
     c14:	bl	8ec <rb_outofmemory@plt>
     c18:	ldr	r1, [fp, #-16]
     c1c:	ldr	r0, [fp, #-8]
     c20:	bl	91c <strcpy@plt>
     c24:	ldr	r3, [fp, #-8]
     c28:	mov	r0, r3
     c2c:	sub	sp, fp, #4
     c30:	pop	{fp, pc}

00000c34 <rb_free>:
     c34:	push	{fp, lr}
     c38:	add	fp, sp, #4
     c3c:	sub	sp, sp, #8
     c40:	str	r0, [fp, #-8]
     c44:	ldr	r3, [fp, #-8]
     c48:	cmp	r3, #0
     c4c:	movne	r3, #1
     c50:	moveq	r3, #0
     c54:	uxtb	r3, r3
     c58:	cmp	r3, #0
     c5c:	beq	c68 <rb_free+0x34>
     c60:	ldr	r0, [fp, #-8]
     c64:	bl	8c8 <free@plt>
     c68:	nop			; (mov r0, r0)
     c6c:	sub	sp, fp, #4
     c70:	pop	{fp, pc}

00000c74 <cleanup_challenge>:
     c74:	push	{fp, lr}
     c78:	add	fp, sp, #4
     c7c:	sub	sp, sp, #8
     c80:	str	r0, [fp, #-8]
     c84:	ldr	r3, [fp, #-8]
     c88:	ldr	r3, [r3, #432]	; 0x1b0
     c8c:	cmp	r3, #0
     c90:	beq	cf0 <cleanup_challenge+0x7c>
     c94:	ldr	r3, [fp, #-8]
     c98:	ldr	r3, [r3, #432]	; 0x1b0
     c9c:	ldr	r3, [r3, #284]	; 0x11c
     ca0:	mov	r0, r3
     ca4:	bl	c34 <rb_free>
     ca8:	ldr	r3, [fp, #-8]
     cac:	ldr	r3, [r3, #24]
     cb0:	ldr	r3, [r3, #32]
     cb4:	mov	r0, r3
     cb8:	bl	c34 <rb_free>
     cbc:	ldr	r3, [fp, #-8]
     cc0:	ldr	r3, [r3, #432]	; 0x1b0
     cc4:	mov	r2, #0
     cc8:	str	r2, [r3, #284]	; 0x11c
     ccc:	ldr	r3, [fp, #-8]
     cd0:	ldr	r3, [r3, #24]
     cd4:	mov	r2, #0
     cd8:	str	r2, [r3, #32]
     cdc:	ldr	r3, [fp, #-8]
     ce0:	ldr	r3, [r3, #432]	; 0x1b0
     ce4:	mov	r2, #0
     ce8:	str	r2, [r3, #304]	; 0x130
     cec:	b	cf4 <cleanup_challenge+0x80>
     cf0:	nop			; (mov r0, r0)
     cf4:	sub	sp, fp, #4
     cf8:	pop	{fp, pc}

00000cfc <m_challenge>:
     cfc:	push	{r4, r5, fp, lr}
     d00:	add	fp, sp, #12
     d04:	sub	sp, sp, #464	; 0x1d0
     d08:	str	r0, [fp, #-448]	; 0xfffffe40
     d0c:	str	r1, [fp, #-452]	; 0xfffffe3c
     d10:	str	r2, [fp, #-456]	; 0xfffffe38
     d14:	str	r3, [fp, #-460]	; 0xfffffe34
     d18:	ldr	r4, [pc, #2196]	; 15b4 <m_challenge+0x8b8>
     d1c:	add	r4, pc, r4
     d20:	mov	r3, #0
     d24:	str	r3, [fp, #-32]	; 0xffffffe0
     d28:	mov	r3, #0
     d2c:	str	r3, [fp, #-444]	; 0xfffffe44
     d30:	ldr	r3, [fp, #-456]	; 0xfffffe38
     d34:	ldr	r3, [r3, #56]	; 0x38
     d38:	and	r3, r3, #4096	; 0x1000
     d3c:	cmp	r3, #0
     d40:	beq	d74 <m_challenge+0x78>
     d44:	ldr	r3, [fp, #-456]	; 0xfffffe38
     d48:	add	r3, r3, #88	; 0x58
     d4c:	ldr	r2, [pc, #2148]	; 15b8 <m_challenge+0x8bc>
     d50:	ldr	r2, [r4, r2]
     d54:	add	r2, r2, #88	; 0x58
     d58:	ldr	r1, [pc, #2140]	; 15bc <m_challenge+0x8c0>
     d5c:	add	r1, pc, r1
     d60:	ldr	r0, [fp, #-456]	; 0xfffffe38
     d64:	bl	8bc <sendto_one@plt>
     d68:	ldr	r0, [fp, #-456]	; 0xfffffe38
     d6c:	bl	958 <send_oper_motd@plt>
     d70:	b	15ac <m_challenge+0x8b0>
     d74:	ldr	r3, [fp, #4]
     d78:	add	r3, r3, #4
     d7c:	ldr	r3, [r3]
     d80:	ldrb	r3, [r3]
     d84:	cmp	r3, #43	; 0x2b
     d88:	bne	1158 <m_challenge+0x45c>
     d8c:	ldr	r3, [fp, #-456]	; 0xfffffe38
     d90:	ldr	r3, [r3, #432]	; 0x1b0
     d94:	ldr	r3, [r3, #284]	; 0x11c
     d98:	cmp	r3, #0
     d9c:	beq	1588 <m_challenge+0x88c>
     da0:	bl	898 <rb_current_time@plt>
     da4:	mov	r2, r0
     da8:	ldr	r3, [fp, #-456]	; 0xfffffe38
     dac:	ldr	r3, [r3, #432]	; 0x1b0
     db0:	ldr	r3, [r3, #304]	; 0x130
     db4:	sub	r3, r2, r3
     db8:	cmp	r3, #180	; 0xb4
     dbc:	ble	e90 <m_challenge+0x194>
     dc0:	ldr	r3, [fp, #-456]	; 0xfffffe38
     dc4:	add	r3, r3, #88	; 0x58
     dc8:	ldr	r2, [pc, #2024]	; 15b8 <m_challenge+0x8bc>
     dcc:	ldr	r2, [r4, r2]
     dd0:	add	r2, r2, #88	; 0x58
     dd4:	ldr	r1, [pc, #2020]	; 15c0 <m_challenge+0x8c4>
     dd8:	add	r1, pc, r1
     ddc:	ldr	r0, [fp, #-456]	; 0xfffffe38
     de0:	bl	8bc <sendto_one@plt>
     de4:	ldr	r3, [fp, #-456]	; 0xfffffe38
     de8:	ldr	r3, [r3, #24]
     dec:	ldr	r0, [r3, #32]
     df0:	ldr	r3, [fp, #-456]	; 0xfffffe38
     df4:	add	ip, r3, #88	; 0x58
     df8:	ldr	r3, [fp, #-456]	; 0xfffffe38
     dfc:	add	r2, r3, #152	; 0x98
     e00:	ldr	r3, [fp, #-456]	; 0xfffffe38
     e04:	add	r1, r3, #163	; 0xa3
     e08:	ldr	r3, [fp, #-456]	; 0xfffffe38
     e0c:	add	r3, r3, #288	; 0x120
     e10:	add	r3, r3, #3
     e14:	str	r3, [sp, #8]
     e18:	str	r1, [sp, #4]
     e1c:	str	r2, [sp]
     e20:	mov	r3, ip
     e24:	mov	r2, r0
     e28:	ldr	r1, [pc, #1940]	; 15c4 <m_challenge+0x8c8>
     e2c:	add	r1, pc, r1
     e30:	mov	r0, #4
     e34:	bl	994 <ilog@plt>
     e38:	ldr	r3, [pc, #1928]	; 15c8 <m_challenge+0x8cc>
     e3c:	ldr	r3, [r4, r3]
     e40:	ldr	r3, [r3, #84]	; 0x54
     e44:	cmp	r3, #0
     e48:	beq	e84 <m_challenge+0x188>
     e4c:	ldr	r3, [fp, #-456]	; 0xfffffe38
     e50:	add	r1, r3, #88	; 0x58
     e54:	ldr	r3, [fp, #-456]	; 0xfffffe38
     e58:	add	r3, r3, #152	; 0x98
     e5c:	ldr	r2, [fp, #-456]	; 0xfffffe38
     e60:	add	r2, r2, #163	; 0xa3
     e64:	str	r2, [sp, #4]
     e68:	str	r3, [sp]
     e6c:	mov	r3, r1
     e70:	ldr	r2, [pc, #1876]	; 15cc <m_challenge+0x8d0>
     e74:	add	r2, pc, r2
     e78:	mov	r1, #256	; 0x100
     e7c:	mov	r0, #256	; 0x100
     e80:	bl	904 <sendto_realops_snomask@plt>
     e84:	ldr	r0, [fp, #-456]	; 0xfffffe38
     e88:	bl	c74 <cleanup_challenge>
     e8c:	b	15ac <m_challenge+0x8b0>
     e90:	ldr	r3, [fp, #4]
     e94:	add	r3, r3, #4
     e98:	ldr	r2, [r3]
     e9c:	add	r2, r2, #1
     ea0:	str	r2, [r3]
     ea4:	ldr	r3, [fp, #4]
     ea8:	add	r3, r3, #4
     eac:	ldr	r5, [r3]
     eb0:	ldr	r3, [fp, #4]
     eb4:	add	r3, r3, #4
     eb8:	ldr	r3, [r3]
     ebc:	mov	r0, r3
     ec0:	bl	970 <strlen@plt>
     ec4:	mov	r3, r0
     ec8:	mov	r1, r3
     ecc:	sub	r3, fp, #444	; 0x1bc
     ed0:	mov	r2, r3
     ed4:	mov	r0, r5
     ed8:	bl	910 <rb_base64_decode@plt>
     edc:	str	r0, [fp, #-28]	; 0xffffffe4
     ee0:	ldr	r3, [fp, #-444]	; 0xfffffe44
     ee4:	cmp	r3, #20
     ee8:	bne	f14 <m_challenge+0x218>
     eec:	ldr	r3, [fp, #-456]	; 0xfffffe38
     ef0:	ldr	r3, [r3, #432]	; 0x1b0
     ef4:	ldr	r3, [r3, #284]	; 0x11c
     ef8:	mov	r2, #20
     efc:	ldr	r1, [fp, #-28]	; 0xffffffe4
     f00:	mov	r0, r3
     f04:	bl	8f8 <memcmp@plt>
     f08:	mov	r3, r0
     f0c:	cmp	r3, #0
     f10:	beq	fec <m_challenge+0x2f0>
     f14:	ldr	r3, [fp, #-456]	; 0xfffffe38
     f18:	add	r3, r3, #88	; 0x58
     f1c:	ldr	r2, [pc, #1684]	; 15b8 <m_challenge+0x8bc>
     f20:	ldr	r2, [r4, r2]
     f24:	add	r2, r2, #88	; 0x58
     f28:	ldr	r1, [pc, #1696]	; 15d0 <m_challenge+0x8d4>
     f2c:	add	r1, pc, r1
     f30:	ldr	r0, [fp, #-456]	; 0xfffffe38
     f34:	bl	8bc <sendto_one@plt>
     f38:	ldr	r3, [fp, #-456]	; 0xfffffe38
     f3c:	ldr	r3, [r3, #24]
     f40:	ldr	r0, [r3, #32]
     f44:	ldr	r3, [fp, #-456]	; 0xfffffe38
     f48:	add	ip, r3, #88	; 0x58
     f4c:	ldr	r3, [fp, #-456]	; 0xfffffe38
     f50:	add	r2, r3, #152	; 0x98
     f54:	ldr	r3, [fp, #-456]	; 0xfffffe38
     f58:	add	r1, r3, #163	; 0xa3
     f5c:	ldr	r3, [fp, #-456]	; 0xfffffe38
     f60:	add	r3, r3, #288	; 0x120
     f64:	add	r3, r3, #3
     f68:	str	r3, [sp, #8]
     f6c:	str	r1, [sp, #4]
     f70:	str	r2, [sp]
     f74:	mov	r3, ip
     f78:	mov	r2, r0
     f7c:	ldr	r1, [pc, #1616]	; 15d4 <m_challenge+0x8d8>
     f80:	add	r1, pc, r1
     f84:	mov	r0, #4
     f88:	bl	994 <ilog@plt>
     f8c:	ldr	r3, [pc, #1588]	; 15c8 <m_challenge+0x8cc>
     f90:	ldr	r3, [r4, r3]
     f94:	ldr	r3, [r3, #84]	; 0x54
     f98:	cmp	r3, #0
     f9c:	beq	fd8 <m_challenge+0x2dc>
     fa0:	ldr	r3, [fp, #-456]	; 0xfffffe38
     fa4:	add	r1, r3, #88	; 0x58
     fa8:	ldr	r3, [fp, #-456]	; 0xfffffe38
     fac:	add	r3, r3, #152	; 0x98
     fb0:	ldr	r2, [fp, #-456]	; 0xfffffe38
     fb4:	add	r2, r2, #163	; 0xa3
     fb8:	str	r2, [sp, #4]
     fbc:	str	r3, [sp]
     fc0:	mov	r3, r1
     fc4:	ldr	r2, [pc, #1548]	; 15d8 <m_challenge+0x8dc>
     fc8:	add	r2, pc, r2
     fcc:	mov	r1, #256	; 0x100
     fd0:	mov	r0, #256	; 0x100
     fd4:	bl	904 <sendto_realops_snomask@plt>
     fd8:	ldr	r0, [fp, #-28]	; 0xffffffe4
     fdc:	bl	c34 <rb_free>
     fe0:	ldr	r0, [fp, #-456]	; 0xfffffe38
     fe4:	bl	c74 <cleanup_challenge>
     fe8:	b	15ac <m_challenge+0x8b0>
     fec:	ldr	r0, [fp, #-28]	; 0xffffffe4
     ff0:	bl	c34 <rb_free>
     ff4:	ldr	r3, [fp, #-456]	; 0xfffffe38
     ff8:	add	r0, r3, #152	; 0x98
     ffc:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1000:	add	r1, r3, #227	; 0xe3
    1004:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1008:	add	r2, r3, #288	; 0x120
    100c:	add	r2, r2, #3
    1010:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1014:	ldr	r3, [r3, #24]
    1018:	ldr	r3, [r3, #32]
    101c:	bl	9d0 <find_oper_conf@plt>
    1020:	str	r0, [fp, #-20]	; 0xffffffec
    1024:	ldr	r3, [fp, #-20]	; 0xffffffec
    1028:	cmp	r3, #0
    102c:	bne	10ec <m_challenge+0x3f0>
    1030:	ldr	r3, [pc, #1444]	; 15dc <m_challenge+0x8e0>
    1034:	add	r3, pc, r3
    1038:	mov	r2, r3
    103c:	ldr	r1, [pc, #1436]	; 15e0 <m_challenge+0x8e4>
    1040:	ldr	r0, [fp, #-456]	; 0xfffffe38
    1044:	bl	964 <sendto_one_numeric@plt>
    1048:	ldr	r3, [fp, #-456]	; 0xfffffe38
    104c:	ldr	r3, [r3, #24]
    1050:	ldr	r0, [r3, #32]
    1054:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1058:	add	ip, r3, #88	; 0x58
    105c:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1060:	add	r2, r3, #152	; 0x98
    1064:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1068:	add	r1, r3, #163	; 0xa3
    106c:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1070:	add	r3, r3, #288	; 0x120
    1074:	add	r3, r3, #3
    1078:	str	r3, [sp, #8]
    107c:	str	r1, [sp, #4]
    1080:	str	r2, [sp]
    1084:	mov	r3, ip
    1088:	mov	r2, r0
    108c:	ldr	r1, [pc, #1360]	; 15e4 <m_challenge+0x8e8>
    1090:	add	r1, pc, r1
    1094:	mov	r0, #4
    1098:	bl	994 <ilog@plt>
    109c:	ldr	r3, [pc, #1316]	; 15c8 <m_challenge+0x8cc>
    10a0:	ldr	r3, [r4, r3]
    10a4:	ldr	r3, [r3, #84]	; 0x54
    10a8:	cmp	r3, #0
    10ac:	beq	1590 <m_challenge+0x894>
    10b0:	ldr	r3, [fp, #-456]	; 0xfffffe38
    10b4:	add	r1, r3, #88	; 0x58
    10b8:	ldr	r3, [fp, #-456]	; 0xfffffe38
    10bc:	add	r3, r3, #152	; 0x98
    10c0:	ldr	r2, [fp, #-456]	; 0xfffffe38
    10c4:	add	r2, r2, #163	; 0xa3
    10c8:	str	r2, [sp, #4]
    10cc:	str	r3, [sp]
    10d0:	mov	r3, r1
    10d4:	ldr	r2, [pc, #1292]	; 15e8 <m_challenge+0x8ec>
    10d8:	add	r2, pc, r2
    10dc:	mov	r1, #256	; 0x100
    10e0:	mov	r0, #256	; 0x100
    10e4:	bl	904 <sendto_realops_snomask@plt>
    10e8:	b	1590 <m_challenge+0x894>
    10ec:	ldr	r0, [fp, #-456]	; 0xfffffe38
    10f0:	bl	c74 <cleanup_challenge>
    10f4:	ldr	r1, [fp, #-20]	; 0xffffffec
    10f8:	ldr	r0, [fp, #-456]	; 0xfffffe38
    10fc:	bl	9dc <oper_up@plt>
    1100:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1104:	ldr	r3, [r3, #24]
    1108:	ldr	r0, [r3, #32]
    110c:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1110:	add	ip, r3, #88	; 0x58
    1114:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1118:	add	r2, r3, #152	; 0x98
    111c:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1120:	add	r1, r3, #163	; 0xa3
    1124:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1128:	add	r3, r3, #288	; 0x120
    112c:	add	r3, r3, #3
    1130:	str	r3, [sp, #8]
    1134:	str	r1, [sp, #4]
    1138:	str	r2, [sp]
    113c:	mov	r3, ip
    1140:	mov	r2, r0
    1144:	ldr	r1, [pc, #1184]	; 15ec <m_challenge+0x8f0>
    1148:	add	r1, pc, r1
    114c:	mov	r0, #3
    1150:	bl	994 <ilog@plt>
    1154:	b	15ac <m_challenge+0x8b0>
    1158:	ldr	r0, [fp, #-456]	; 0xfffffe38
    115c:	bl	c74 <cleanup_challenge>
    1160:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1164:	add	r0, r3, #152	; 0x98
    1168:	ldr	r3, [fp, #-456]	; 0xfffffe38
    116c:	add	r1, r3, #227	; 0xe3
    1170:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1174:	add	r2, r3, #288	; 0x120
    1178:	add	r2, r2, #3
    117c:	ldr	r3, [fp, #4]
    1180:	add	r3, r3, #4
    1184:	ldr	r3, [r3]
    1188:	bl	9d0 <find_oper_conf@plt>
    118c:	str	r0, [fp, #-20]	; 0xffffffec
    1190:	ldr	r3, [fp, #-20]	; 0xffffffec
    1194:	cmp	r3, #0
    1198:	bne	1258 <m_challenge+0x55c>
    119c:	ldr	r3, [pc, #1100]	; 15f0 <m_challenge+0x8f4>
    11a0:	add	r3, pc, r3
    11a4:	mov	r2, r3
    11a8:	ldr	r1, [pc, #1072]	; 15e0 <m_challenge+0x8e4>
    11ac:	ldr	r0, [fp, #-456]	; 0xfffffe38
    11b0:	bl	964 <sendto_one_numeric@plt>
    11b4:	ldr	r3, [fp, #4]
    11b8:	add	r3, r3, #4
    11bc:	ldr	r0, [r3]
    11c0:	ldr	r3, [fp, #-456]	; 0xfffffe38
    11c4:	add	ip, r3, #88	; 0x58
    11c8:	ldr	r3, [fp, #-456]	; 0xfffffe38
    11cc:	add	r2, r3, #152	; 0x98
    11d0:	ldr	r3, [fp, #-456]	; 0xfffffe38
    11d4:	add	r1, r3, #163	; 0xa3
    11d8:	ldr	r3, [fp, #-456]	; 0xfffffe38
    11dc:	add	r3, r3, #288	; 0x120
    11e0:	add	r3, r3, #3
    11e4:	str	r3, [sp, #8]
    11e8:	str	r1, [sp, #4]
    11ec:	str	r2, [sp]
    11f0:	mov	r3, ip
    11f4:	mov	r2, r0
    11f8:	ldr	r1, [pc, #1012]	; 15f4 <m_challenge+0x8f8>
    11fc:	add	r1, pc, r1
    1200:	mov	r0, #4
    1204:	bl	994 <ilog@plt>
    1208:	ldr	r3, [pc, #952]	; 15c8 <m_challenge+0x8cc>
    120c:	ldr	r3, [r4, r3]
    1210:	ldr	r3, [r3, #84]	; 0x54
    1214:	cmp	r3, #0
    1218:	beq	1598 <m_challenge+0x89c>
    121c:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1220:	add	r1, r3, #88	; 0x58
    1224:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1228:	add	r3, r3, #152	; 0x98
    122c:	ldr	r2, [fp, #-456]	; 0xfffffe38
    1230:	add	r2, r2, #163	; 0xa3
    1234:	str	r2, [sp, #4]
    1238:	str	r3, [sp]
    123c:	mov	r3, r1
    1240:	ldr	r2, [pc, #944]	; 15f8 <m_challenge+0x8fc>
    1244:	add	r2, pc, r2
    1248:	mov	r1, #256	; 0x100
    124c:	mov	r0, #256	; 0x100
    1250:	bl	904 <sendto_realops_snomask@plt>
    1254:	b	1598 <m_challenge+0x89c>
    1258:	ldr	r3, [fp, #-20]	; 0xffffffec
    125c:	ldr	r3, [r3, #40]	; 0x28
    1260:	cmp	r3, #0
    1264:	bne	1280 <m_challenge+0x584>
    1268:	ldr	r3, [pc, #908]	; 15fc <m_challenge+0x900>
    126c:	add	r3, pc, r3
    1270:	mov	r1, r3
    1274:	ldr	r0, [fp, #-456]	; 0xfffffe38
    1278:	bl	9b8 <sendto_one_notice@plt>
    127c:	b	15ac <m_challenge+0x8b0>
    1280:	ldr	r3, [fp, #-20]	; 0xffffffec
    1284:	ldr	r3, [r3, #20]
    1288:	and	r3, r3, #524288	; 0x80000
    128c:	cmp	r3, #0
    1290:	beq	1364 <m_challenge+0x668>
    1294:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1298:	ldr	r3, [r3, #56]	; 0x38
    129c:	and	r3, r3, #16384	; 0x4000
    12a0:	cmp	r3, #0
    12a4:	bne	1364 <m_challenge+0x668>
    12a8:	ldr	r3, [pc, #848]	; 1600 <m_challenge+0x904>
    12ac:	add	r3, pc, r3
    12b0:	mov	r2, r3
    12b4:	ldr	r1, [pc, #804]	; 15e0 <m_challenge+0x8e4>
    12b8:	ldr	r0, [fp, #-456]	; 0xfffffe38
    12bc:	bl	964 <sendto_one_numeric@plt>
    12c0:	ldr	r3, [fp, #4]
    12c4:	add	r3, r3, #4
    12c8:	ldr	r0, [r3]
    12cc:	ldr	r3, [fp, #-456]	; 0xfffffe38
    12d0:	add	ip, r3, #88	; 0x58
    12d4:	ldr	r3, [fp, #-456]	; 0xfffffe38
    12d8:	add	r2, r3, #152	; 0x98
    12dc:	ldr	r3, [fp, #-456]	; 0xfffffe38
    12e0:	add	r1, r3, #163	; 0xa3
    12e4:	ldr	r3, [fp, #-456]	; 0xfffffe38
    12e8:	add	r3, r3, #288	; 0x120
    12ec:	add	r3, r3, #3
    12f0:	str	r3, [sp, #8]
    12f4:	str	r1, [sp, #4]
    12f8:	str	r2, [sp]
    12fc:	mov	r3, ip
    1300:	mov	r2, r0
    1304:	ldr	r1, [pc, #760]	; 1604 <m_challenge+0x908>
    1308:	add	r1, pc, r1
    130c:	mov	r0, #4
    1310:	bl	994 <ilog@plt>
    1314:	ldr	r3, [pc, #684]	; 15c8 <m_challenge+0x8cc>
    1318:	ldr	r3, [r4, r3]
    131c:	ldr	r3, [r3, #84]	; 0x54
    1320:	cmp	r3, #0
    1324:	beq	15a0 <m_challenge+0x8a4>
    1328:	ldr	r3, [fp, #-456]	; 0xfffffe38
    132c:	add	r1, r3, #88	; 0x58
    1330:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1334:	add	r3, r3, #152	; 0x98
    1338:	ldr	r2, [fp, #-456]	; 0xfffffe38
    133c:	add	r2, r2, #163	; 0xa3
    1340:	str	r2, [sp, #4]
    1344:	str	r3, [sp]
    1348:	mov	r3, r1
    134c:	ldr	r2, [pc, #692]	; 1608 <m_challenge+0x90c>
    1350:	add	r2, pc, r2
    1354:	mov	r1, #0
    1358:	mov	r0, #256	; 0x100
    135c:	bl	904 <sendto_realops_snomask@plt>
    1360:	b	15a0 <m_challenge+0x8a4>
    1364:	ldr	r3, [fp, #-20]	; 0xffffffec
    1368:	ldr	r3, [r3, #16]
    136c:	cmp	r3, #0
    1370:	beq	1468 <m_challenge+0x76c>
    1374:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1378:	ldr	r3, [r3, #444]	; 0x1bc
    137c:	cmp	r3, #0
    1380:	beq	13ac <m_challenge+0x6b0>
    1384:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1388:	ldr	r2, [r3, #444]	; 0x1bc
    138c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1390:	ldr	r3, [r3, #16]
    1394:	mov	r1, r3
    1398:	mov	r0, r2
    139c:	bl	8d4 <rb_strcasecmp@plt>
    13a0:	mov	r3, r0
    13a4:	cmp	r3, #0
    13a8:	beq	1468 <m_challenge+0x76c>
    13ac:	ldr	r3, [pc, #600]	; 160c <m_challenge+0x910>
    13b0:	add	r3, pc, r3
    13b4:	mov	r2, r3
    13b8:	ldr	r1, [pc, #544]	; 15e0 <m_challenge+0x8e4>
    13bc:	ldr	r0, [fp, #-456]	; 0xfffffe38
    13c0:	bl	964 <sendto_one_numeric@plt>
    13c4:	ldr	r3, [fp, #4]
    13c8:	add	r3, r3, #4
    13cc:	ldr	r0, [r3]
    13d0:	ldr	r3, [fp, #-456]	; 0xfffffe38
    13d4:	add	ip, r3, #88	; 0x58
    13d8:	ldr	r3, [fp, #-456]	; 0xfffffe38
    13dc:	add	r2, r3, #152	; 0x98
    13e0:	ldr	r3, [fp, #-456]	; 0xfffffe38
    13e4:	add	r1, r3, #163	; 0xa3
    13e8:	ldr	r3, [fp, #-456]	; 0xfffffe38
    13ec:	add	r3, r3, #288	; 0x120
    13f0:	add	r3, r3, #3
    13f4:	str	r3, [sp, #8]
    13f8:	str	r1, [sp, #4]
    13fc:	str	r2, [sp]
    1400:	mov	r3, ip
    1404:	mov	r2, r0
    1408:	ldr	r1, [pc, #512]	; 1610 <m_challenge+0x914>
    140c:	add	r1, pc, r1
    1410:	mov	r0, #4
    1414:	bl	994 <ilog@plt>
    1418:	ldr	r3, [pc, #424]	; 15c8 <m_challenge+0x8cc>
    141c:	ldr	r3, [r4, r3]
    1420:	ldr	r3, [r3, #84]	; 0x54
    1424:	cmp	r3, #0
    1428:	beq	15a8 <m_challenge+0x8ac>
    142c:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1430:	add	r1, r3, #88	; 0x58
    1434:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1438:	add	r3, r3, #152	; 0x98
    143c:	ldr	r2, [fp, #-456]	; 0xfffffe38
    1440:	add	r2, r2, #163	; 0xa3
    1444:	str	r2, [sp, #4]
    1448:	str	r3, [sp]
    144c:	mov	r3, r1
    1450:	ldr	r2, [pc, #444]	; 1614 <m_challenge+0x918>
    1454:	add	r2, pc, r2
    1458:	mov	r1, #0
    145c:	mov	r0, #256	; 0x100
    1460:	bl	904 <sendto_realops_snomask@plt>
    1464:	b	15a8 <m_challenge+0x8ac>
    1468:	ldr	r3, [fp, #-456]	; 0xfffffe38
    146c:	ldr	r3, [r3, #432]	; 0x1b0
    1470:	add	r1, r3, #284	; 0x11c
    1474:	ldr	r3, [fp, #-20]	; 0xffffffec
    1478:	ldr	r2, [r3, #40]	; 0x28
    147c:	sub	r3, fp, #32
    1480:	mov	r0, r3
    1484:	bl	1628 <generate_challenge>
    1488:	mov	r3, r0
    148c:	cmp	r3, #0
    1490:	beq	1570 <m_challenge+0x874>
    1494:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1498:	str	r3, [fp, #-16]
    149c:	ldr	r3, [fp, #-456]	; 0xfffffe38
    14a0:	ldr	r5, [r3, #432]	; 0x1b0
    14a4:	bl	898 <rb_current_time@plt>
    14a8:	mov	r3, r0
    14ac:	str	r3, [r5, #304]	; 0x130
    14b0:	sub	r3, fp, #440	; 0x1b8
    14b4:	ldr	r2, [pc, #348]	; 1618 <m_challenge+0x91c>
    14b8:	ldr	r1, [fp, #-16]
    14bc:	mov	r0, r3
    14c0:	bl	9c4 <rb_strlcpy@plt>
    14c4:	str	r0, [fp, #-24]	; 0xffffffe8
    14c8:	ldr	r3, [fp, #-456]	; 0xfffffe38
    14cc:	add	r2, r3, #88	; 0x58
    14d0:	sub	r3, fp, #440	; 0x1b8
    14d4:	str	r3, [sp]
    14d8:	mov	r3, r2
    14dc:	ldr	r2, [pc, #212]	; 15b8 <m_challenge+0x8bc>
    14e0:	ldr	r2, [r4, r2]
    14e4:	add	r2, r2, #88	; 0x58
    14e8:	ldr	r1, [pc, #300]	; 161c <m_challenge+0x920>
    14ec:	add	r1, pc, r1
    14f0:	ldr	r0, [fp, #-456]	; 0xfffffe38
    14f4:	bl	8bc <sendto_one@plt>
    14f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    14fc:	ldr	r2, [pc, #276]	; 1618 <m_challenge+0x91c>
    1500:	cmp	r3, r2
    1504:	bls	1518 <m_challenge+0x81c>
    1508:	ldr	r3, [fp, #-16]
    150c:	add	r3, r3, #404	; 0x194
    1510:	str	r3, [fp, #-16]
    1514:	b	14b0 <m_challenge+0x7b4>
    1518:	nop			; (mov r0, r0)
    151c:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1520:	add	r3, r3, #88	; 0x58
    1524:	ldr	r2, [pc, #140]	; 15b8 <m_challenge+0x8bc>
    1528:	ldr	r2, [r4, r2]
    152c:	add	r2, r2, #88	; 0x58
    1530:	ldr	r1, [pc, #232]	; 1620 <m_challenge+0x924>
    1534:	add	r1, pc, r1
    1538:	ldr	r0, [fp, #-456]	; 0xfffffe38
    153c:	bl	8bc <sendto_one@plt>
    1540:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1544:	mov	r0, r3
    1548:	bl	c34 <rb_free>
    154c:	ldr	r3, [fp, #-456]	; 0xfffffe38
    1550:	ldr	r4, [r3, #24]
    1554:	ldr	r3, [fp, #-20]	; 0xffffffec
    1558:	ldr	r3, [r3]
    155c:	mov	r0, r3
    1560:	bl	bc8 <rb_strdup>
    1564:	mov	r3, r0
    1568:	str	r3, [r4, #32]
    156c:	b	15ac <m_challenge+0x8b0>
    1570:	ldr	r3, [pc, #172]	; 1624 <m_challenge+0x928>
    1574:	add	r3, pc, r3
    1578:	mov	r1, r3
    157c:	ldr	r0, [fp, #-456]	; 0xfffffe38
    1580:	bl	9b8 <sendto_one_notice@plt>
    1584:	b	15ac <m_challenge+0x8b0>
    1588:	nop			; (mov r0, r0)
    158c:	b	15ac <m_challenge+0x8b0>
    1590:	nop			; (mov r0, r0)
    1594:	b	15ac <m_challenge+0x8b0>
    1598:	nop			; (mov r0, r0)
    159c:	b	15ac <m_challenge+0x8b0>
    15a0:	nop			; (mov r0, r0)
    15a4:	b	15ac <m_challenge+0x8b0>
    15a8:	nop			; (mov r0, r0)
    15ac:	sub	sp, fp, #12
    15b0:	pop	{r4, r5, fp, pc}
    15b4:	.word	0x000112dc
    15b8:	.word	0x0000009c
    15bc:	.word	0x00000adc
    15c0:	.word	0x00000aec
    15c4:	.word	0x00000ab8
    15c8:	.word	0x000000a0
    15cc:	.word	0x00000a9c
    15d0:	.word	0x00000998
    15d4:	.word	0x000009b8
    15d8:	.word	0x0000099c
    15dc:	.word	0x00000958
    15e0:	.word	0x000001eb
    15e4:	.word	0x00000938
    15e8:	.word	0x00000914
    15ec:	.word	0x000008dc
    15f0:	.word	0x000007ec
    15f4:	.word	0x000007cc
    15f8:	.word	0x000007a8
    15fc:	.word	0x000007d4
    1600:	.word	0x000006e0
    1604:	.word	0x0000077c
    1608:	.word	0x00000774
    160c:	.word	0x000005dc
    1610:	.word	0x000006f4
    1614:	.word	0x000006fc
    1618:	.word	0x00000195
    161c:	.word	0x000006b0
    1620:	.word	0x00000678
    1624:	.word	0x00000658

00001628 <generate_challenge>:
    1628:	push	{fp, lr}
    162c:	add	fp, sp, #4
    1630:	sub	sp, sp, #272	; 0x110
    1634:	str	r0, [fp, #-256]	; 0xffffff00
    1638:	str	r1, [fp, #-260]	; 0xfffffefc
    163c:	str	r2, [fp, #-264]	; 0xfffffef8
    1640:	mov	r3, #0
    1644:	str	r3, [fp, #-12]
    1648:	mov	r3, #0
    164c:	str	r3, [fp, #-8]
    1650:	ldr	r3, [fp, #-264]	; 0xfffffef8
    1654:	cmp	r3, #0
    1658:	bne	1664 <generate_challenge+0x3c>
    165c:	mov	r3, #0
    1660:	b	17d0 <generate_challenge+0x1a8>
    1664:	sub	r3, fp, #248	; 0xf8
    1668:	mov	r1, #128	; 0x80
    166c:	mov	r0, r3
    1670:	bl	934 <rb_get_random@plt>
    1674:	mov	r3, r0
    1678:	cmp	r3, #0
    167c:	beq	1764 <generate_challenge+0x13c>
    1680:	sub	r3, fp, #120	; 0x78
    1684:	mov	r0, r3
    1688:	bl	9a0 <SHA1_Init@plt>
    168c:	sub	r1, fp, #248	; 0xf8
    1690:	sub	r3, fp, #120	; 0x78
    1694:	mov	r2, #128	; 0x80
    1698:	mov	r0, r3
    169c:	bl	97c <SHA1_Update@plt>
    16a0:	mov	r0, #20
    16a4:	bl	928 <malloc@plt>
    16a8:	mov	r3, r0
    16ac:	mov	r2, r3
    16b0:	ldr	r3, [fp, #-260]	; 0xfffffefc
    16b4:	str	r2, [r3]
    16b8:	ldr	r3, [fp, #-260]	; 0xfffffefc
    16bc:	ldr	r3, [r3]
    16c0:	sub	r2, fp, #120	; 0x78
    16c4:	mov	r1, r2
    16c8:	mov	r0, r3
    16cc:	bl	9f4 <SHA1_Final@plt>
    16d0:	ldr	r0, [fp, #-264]	; 0xfffffef8
    16d4:	bl	8e0 <RSA_size@plt>
    16d8:	mov	r3, r0
    16dc:	str	r3, [fp, #-16]
    16e0:	ldr	r0, [fp, #-16]
    16e4:	bl	b74 <rb_malloc>
    16e8:	str	r0, [fp, #-20]	; 0xffffffec
    16ec:	sub	r1, fp, #248	; 0xf8
    16f0:	mov	r3, #4
    16f4:	str	r3, [sp]
    16f8:	ldr	r3, [fp, #-264]	; 0xfffffef8
    16fc:	ldr	r2, [fp, #-20]	; 0xffffffec
    1700:	mov	r0, #128	; 0x80
    1704:	bl	8b0 <RSA_public_encrypt@plt>
    1708:	str	r0, [fp, #-24]	; 0xffffffe8
    170c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1710:	cmp	r3, #0
    1714:	blt	1740 <generate_challenge+0x118>
    1718:	ldr	r1, [fp, #-24]	; 0xffffffe8
    171c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1720:	bl	9e8 <rb_base64_encode@plt>
    1724:	mov	r2, r0
    1728:	ldr	r3, [fp, #-256]	; 0xffffff00
    172c:	str	r2, [r3]
    1730:	ldr	r0, [fp, #-20]	; 0xffffffec
    1734:	bl	c34 <rb_free>
    1738:	mov	r3, #1
    173c:	b	17d0 <generate_challenge+0x1a8>
    1740:	ldr	r0, [fp, #-20]	; 0xffffffec
    1744:	bl	c34 <rb_free>
    1748:	ldr	r3, [fp, #-260]	; 0xfffffefc
    174c:	ldr	r3, [r3]
    1750:	mov	r0, r3
    1754:	bl	c34 <rb_free>
    1758:	ldr	r3, [fp, #-260]	; 0xfffffefc
    175c:	mov	r2, #0
    1760:	str	r2, [r3]
    1764:	mov	r2, #0
    1768:	mov	r0, #2
    176c:	mov	r1, #0
    1770:	bl	94c <OPENSSL_init_crypto@plt>
    1774:	b	17ac <generate_challenge+0x184>
    1778:	mov	r1, #0
    177c:	ldr	r0, [fp, #-12]
    1780:	bl	988 <ERR_error_string@plt>
    1784:	mov	r3, r0
    1788:	mov	r2, r3
    178c:	ldr	r3, [pc, #72]	; 17dc <generate_challenge+0x1b4>
    1790:	add	r3, pc, r3
    1794:	mov	r1, r3
    1798:	mov	r0, #0
    179c:	bl	994 <ilog@plt>
    17a0:	ldr	r3, [fp, #-8]
    17a4:	add	r3, r3, #1
    17a8:	str	r3, [fp, #-8]
    17ac:	ldr	r3, [fp, #-8]
    17b0:	cmp	r3, #99	; 0x63
    17b4:	bhi	17cc <generate_challenge+0x1a4>
    17b8:	bl	9ac <ERR_get_error@plt>
    17bc:	str	r0, [fp, #-12]
    17c0:	ldr	r3, [fp, #-12]
    17c4:	cmp	r3, #0
    17c8:	bne	1778 <generate_challenge+0x150>
    17cc:	mov	r3, #0
    17d0:	mov	r0, r3
    17d4:	sub	sp, fp, #4
    17d8:	pop	{fp, pc}
    17dc:	.word	0x0000045c

Disassembly of section .fini:

000017e0 <_fini>:
    17e0:	push	{r3, lr}
    17e4:	pop	{r3, pc}
