
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test/monster_test:     file format elf32-littlearm


Disassembly of section .init:

00012e6c <.init>:
   12e6c:	push	{r3, lr}
   12e70:	bl	12fd4 <_start@@Base+0x3c>
   12e74:	pop	{r3, pc}

Disassembly of section .plt:

00012e78 <strcmp@plt-0x14>:
   12e78:	push	{lr}		; (str lr, [sp, #-4]!)
   12e7c:	ldr	lr, [pc, #4]	; 12e88 <strcmp@plt-0x4>
   12e80:	add	lr, pc, lr
   12e84:	ldr	pc, [lr, #8]!
   12e88:	andeq	r5, r2, r8, ror r1

00012e8c <strcmp@plt>:
   12e8c:	add	ip, pc, #0, 12
   12e90:	add	ip, ip, #151552	; 0x25000
   12e94:	ldr	pc, [ip, #376]!	; 0x178

00012e98 <printf@plt>:
   12e98:	add	ip, pc, #0, 12
   12e9c:	add	ip, ip, #151552	; 0x25000
   12ea0:	ldr	pc, [ip, #368]!	; 0x170

00012ea4 <free@plt>:
   12ea4:	add	ip, pc, #0, 12
   12ea8:	add	ip, ip, #151552	; 0x25000
   12eac:	ldr	pc, [ip, #360]!	; 0x168

00012eb0 <memcpy@plt>:
   12eb0:	add	ip, pc, #0, 12
   12eb4:	add	ip, ip, #151552	; 0x25000
   12eb8:	ldr	pc, [ip, #352]!	; 0x160

00012ebc <realloc@plt>:
   12ebc:	add	ip, pc, #0, 12
   12ec0:	add	ip, ip, #151552	; 0x25000
   12ec4:	ldr	pc, [ip, #344]!	; 0x158

00012ec8 <fwrite@plt>:
   12ec8:	add	ip, pc, #0, 12
   12ecc:	add	ip, ip, #151552	; 0x25000
   12ed0:	ldr	pc, [ip, #336]!	; 0x150

00012ed4 <gettimeofday@plt>:
   12ed4:	add	ip, pc, #0, 12
   12ed8:	add	ip, ip, #151552	; 0x25000
   12edc:	ldr	pc, [ip, #328]!	; 0x148

00012ee0 <puts@plt>:
   12ee0:	add	ip, pc, #0, 12
   12ee4:	add	ip, ip, #151552	; 0x25000
   12ee8:	ldr	pc, [ip, #320]!	; 0x140

00012eec <malloc@plt>:
   12eec:	add	ip, pc, #0, 12
   12ef0:	add	ip, ip, #151552	; 0x25000
   12ef4:	ldr	pc, [ip, #312]!	; 0x138

00012ef8 <__libc_start_main@plt>:
   12ef8:	add	ip, pc, #0, 12
   12efc:	add	ip, ip, #151552	; 0x25000
   12f00:	ldr	pc, [ip, #304]!	; 0x130

00012f04 <__gmon_start__@plt>:
   12f04:	add	ip, pc, #0, 12
   12f08:	add	ip, ip, #151552	; 0x25000
   12f0c:	ldr	pc, [ip, #296]!	; 0x128

00012f10 <bcmp@plt>:
   12f10:	add	ip, pc, #0, 12
   12f14:	add	ip, ip, #151552	; 0x25000
   12f18:	ldr	pc, [ip, #288]!	; 0x120

00012f1c <strlen@plt>:
   12f1c:	add	ip, pc, #0, 12
   12f20:	add	ip, ip, #151552	; 0x25000
   12f24:	ldr	pc, [ip, #280]!	; 0x118

00012f28 <fprintf@plt>:
   12f28:	add	ip, pc, #0, 12
   12f2c:	add	ip, ip, #151552	; 0x25000
   12f30:	ldr	pc, [ip, #272]!	; 0x110

00012f34 <posix_memalign@plt>:
   12f34:	add	ip, pc, #0, 12
   12f38:	add	ip, ip, #151552	; 0x25000
   12f3c:	ldr	pc, [ip, #264]!	; 0x108

00012f40 <memset@plt>:
   12f40:	add	ip, pc, #0, 12
   12f44:	add	ip, ip, #151552	; 0x25000
   12f48:	ldr	pc, [ip, #256]!	; 0x100

00012f4c <strncpy@plt>:
   12f4c:	add	ip, pc, #0, 12
   12f50:	add	ip, ip, #151552	; 0x25000
   12f54:	ldr	pc, [ip, #248]!	; 0xf8

00012f58 <memchr@plt>:
   12f58:	add	ip, pc, #0, 12
   12f5c:	add	ip, ip, #151552	; 0x25000
   12f60:	ldr	pc, [ip, #240]!	; 0xf0

00012f64 <fputc@plt>:
   12f64:	add	ip, pc, #0, 12
   12f68:	add	ip, ip, #151552	; 0x25000
   12f6c:	ldr	pc, [ip, #232]!	; 0xe8

00012f70 <strncmp@plt>:
   12f70:	add	ip, pc, #0, 12
   12f74:	add	ip, ip, #151552	; 0x25000
   12f78:	ldr	pc, [ip, #224]!	; 0xe0

00012f7c <abort@plt>:
   12f7c:	add	ip, pc, #0, 12
   12f80:	add	ip, ip, #151552	; 0x25000
   12f84:	ldr	pc, [ip, #216]!	; 0xd8

00012f88 <__assert_fail@plt>:
   12f88:	add	ip, pc, #0, 12
   12f8c:	add	ip, ip, #151552	; 0x25000
   12f90:	ldr	pc, [ip, #208]!	; 0xd0

Disassembly of section .text:

00012f98 <_start@@Base>:
   12f98:	mov	fp, #0
   12f9c:	mov	lr, #0
   12fa0:	pop	{r1}		; (ldr r1, [sp], #4)
   12fa4:	mov	r2, sp
   12fa8:	push	{r2}		; (str r2, [sp, #-4]!)
   12fac:	push	{r0}		; (str r0, [sp, #-4]!)
   12fb0:	ldr	ip, [pc, #16]	; 12fc8 <_start@@Base+0x30>
   12fb4:	push	{ip}		; (str ip, [sp, #-4]!)
   12fb8:	ldr	r0, [pc, #12]	; 12fcc <_start@@Base+0x34>
   12fbc:	ldr	r3, [pc, #12]	; 12fd0 <_start@@Base+0x38>
   12fc0:	bl	12ef8 <__libc_start_main@plt>
   12fc4:	bl	12f7c <abort@plt>
   12fc8:	andeq	r2, r2, r8, ror #5
   12fcc:	andeq	fp, r1, r8, lsl #29
   12fd0:	andeq	r2, r2, r8, lsl #5
   12fd4:	ldr	r3, [pc, #20]	; 12ff0 <_start@@Base+0x58>
   12fd8:	ldr	r2, [pc, #20]	; 12ff4 <_start@@Base+0x5c>
   12fdc:	add	r3, pc, r3
   12fe0:	ldr	r2, [r3, r2]
   12fe4:	cmp	r2, #0
   12fe8:	bxeq	lr
   12fec:	b	12f04 <__gmon_start__@plt>
   12ff0:	andeq	r5, r2, ip, lsl r0
   12ff4:	andeq	r0, r0, r4, rrx
   12ff8:	ldr	r0, [pc, #24]	; 13018 <_start@@Base+0x80>
   12ffc:	ldr	r3, [pc, #24]	; 1301c <_start@@Base+0x84>
   13000:	cmp	r3, r0
   13004:	bxeq	lr
   13008:	ldr	r3, [pc, #16]	; 13020 <_start@@Base+0x88>
   1300c:	cmp	r3, #0
   13010:	bxeq	lr
   13014:	bx	r3
   13018:	andeq	r8, r3, r0, ror r0
   1301c:	andeq	r8, r3, r0, ror r0
   13020:	andeq	r0, r0, r0
   13024:	ldr	r0, [pc, #36]	; 13050 <_start@@Base+0xb8>
   13028:	ldr	r1, [pc, #36]	; 13054 <_start@@Base+0xbc>
   1302c:	sub	r1, r1, r0
   13030:	asr	r1, r1, #2
   13034:	add	r1, r1, r1, lsr #31
   13038:	asrs	r1, r1, #1
   1303c:	bxeq	lr
   13040:	ldr	r3, [pc, #16]	; 13058 <_start@@Base+0xc0>
   13044:	cmp	r3, #0
   13048:	bxeq	lr
   1304c:	bx	r3
   13050:	andeq	r8, r3, r0, ror r0
   13054:	andeq	r8, r3, r0, ror r0
   13058:	andeq	r0, r0, r0
   1305c:	push	{r4, lr}
   13060:	ldr	r4, [pc, #24]	; 13080 <_start@@Base+0xe8>
   13064:	ldrb	r3, [r4]
   13068:	cmp	r3, #0
   1306c:	popne	{r4, pc}
   13070:	bl	12ff8 <_start@@Base+0x60>
   13074:	mov	r3, #1
   13078:	strb	r3, [r4]
   1307c:	pop	{r4, pc}
   13080:	andeq	r8, r3, r4, ror r0
   13084:	b	13024 <_start@@Base+0x8c>

00013088 <verify_empty_monster@@Base>:
   13088:	push	{fp, lr}
   1308c:	mov	fp, sp
   13090:	cmp	r0, #0
   13094:	beq	130ec <verify_empty_monster@@Base+0x64>
   13098:	ldr	r1, [r0, #4]
   1309c:	movw	r2, #20301	; 0x4f4d
   130a0:	movt	r2, #21326	; 0x534e
   130a4:	cmp	r1, r2
   130a8:	bne	130ec <verify_empty_monster@@Base+0x64>
   130ac:	ldr	r1, [r0]
   130b0:	ldr	r2, [r0, r1]!
   130b4:	mov	r1, r0
   130b8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   130bc:	cmp	r2, #9
   130c0:	bls	13100 <verify_empty_monster@@Base+0x78>
   130c4:	ldrh	r2, [r1, #8]
   130c8:	cmp	r2, #0
   130cc:	beq	1310c <verify_empty_monster@@Base+0x84>
   130d0:	add	r0, r0, r2
   130d4:	ldrh	r0, [r0]
   130d8:	cmp	r0, #100	; 0x64
   130dc:	bne	1312c <verify_empty_monster@@Base+0xa4>
   130e0:	movw	r0, #16541	; 0x409d
   130e4:	movt	r0, #2
   130e8:	b	130f4 <verify_empty_monster@@Base+0x6c>
   130ec:	movw	r0, #17038	; 0x428e
   130f0:	movt	r0, #2
   130f4:	bl	12ee0 <puts@plt>
   130f8:	mvn	r0, #0
   130fc:	pop	{fp, pc}
   13100:	mov	r0, #0
   13104:	cmp	r2, #6
   13108:	popcc	{fp, pc}
   1310c:	ldrh	r0, [r1, #4]
   13110:	cmp	r0, #0
   13114:	beq	13124 <verify_empty_monster@@Base+0x9c>
   13118:	movw	r0, #17131	; 0x42eb
   1311c:	movt	r0, #2
   13120:	b	130f4 <verify_empty_monster@@Base+0x6c>
   13124:	mov	r0, #0
   13128:	pop	{fp, pc}
   1312c:	movw	r0, #18078	; 0x469e
   13130:	movt	r0, #2
   13134:	b	130f4 <verify_empty_monster@@Base+0x6c>

00013138 <test_enums@@Base>:
   13138:	mov	r0, #0
   1313c:	bx	lr

00013140 <test_type_aliases@@Base>:
   13140:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   13144:	add	fp, sp, #24
   13148:	sub	sp, sp, #16
   1314c:	mov	r4, r0
   13150:	bl	1d0ac <flatcc_builder_reset@@Base>
   13154:	mvn	r0, #0
   13158:	mov	r1, #1
   1315c:	mov	r2, #0
   13160:	mov	r3, #1
   13164:	mov	r8, #0
   13168:	str	r1, [sp]
   1316c:	str	r0, [sp, #4]
   13170:	mov	r0, r4
   13174:	mov	r1, #0
   13178:	bl	1f458 <flatcc_builder_create_vector@@Base>
   1317c:	mov	r6, r0
   13180:	mvn	r0, #-536870912	; 0xe0000000
   13184:	mov	r1, #8
   13188:	mov	r2, #0
   1318c:	mov	r3, #8
   13190:	str	r1, [sp]
   13194:	str	r0, [sp, #4]
   13198:	mov	r0, r4
   1319c:	mov	r1, #0
   131a0:	bl	1f458 <flatcc_builder_create_vector@@Base>
   131a4:	movw	r1, #8956	; 0x22fc
   131a8:	mov	r5, r0
   131ac:	mov	r0, r4
   131b0:	mov	r2, #0
   131b4:	mov	r3, #0
   131b8:	movt	r1, #2
   131bc:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   131c0:	cmp	r0, #0
   131c4:	bne	131e8 <test_type_aliases@@Base+0xa8>
   131c8:	mov	r0, r4
   131cc:	mov	r1, #12
   131d0:	bl	1e940 <flatcc_builder_start_table@@Base>
   131d4:	cmp	r0, #0
   131d8:	beq	13354 <test_type_aliases@@Base+0x214>
   131dc:	mov	r0, r4
   131e0:	mov	r1, r8
   131e4:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   131e8:	add	r1, sp, #12
   131ec:	mov	r0, r4
   131f0:	bl	20908 <flatcc_builder_finalize_aligned_buffer@@Base>
   131f4:	ldr	r1, [sp, #12]
   131f8:	movw	r2, #8956	; 0x22fc
   131fc:	movw	r3, #49188	; 0xc024
   13200:	mov	r4, r0
   13204:	movt	r2, #2
   13208:	movt	r3, #1
   1320c:	bl	21a80 <flatcc_verify_table_as_root@@Base>
   13210:	cmp	r0, #0
   13214:	beq	13258 <test_type_aliases@@Base+0x118>
   13218:	mov	r5, r0
   1321c:	movw	r0, #32880	; 0x8070
   13220:	ldr	r2, [sp, #12]
   13224:	mov	r1, r4
   13228:	movt	r0, #3
   1322c:	ldr	r3, [r0]
   13230:	movw	r0, #8961	; 0x2301
   13234:	movt	r0, #2
   13238:	bl	1365c <test_type_aliases@@Base+0x51c>
   1323c:	mov	r0, r5
   13240:	bl	20ff4 <flatcc_verify_error_string@@Base>
   13244:	mov	r1, r0
   13248:	movw	r0, #8980	; 0x2314
   1324c:	movt	r0, #2
   13250:	bl	12e98 <printf@plt>
   13254:	b	13340 <test_type_aliases@@Base+0x200>
   13258:	cmp	r4, #0
   1325c:	beq	13610 <test_type_aliases@@Base+0x4d0>
   13260:	ldr	r0, [r4, #4]
   13264:	movw	r1, #20301	; 0x4f4d
   13268:	movt	r1, #21326	; 0x534e
   1326c:	cmp	r0, r1
   13270:	bne	13610 <test_type_aliases@@Base+0x4d0>
   13274:	ldr	r1, [r4]
   13278:	mov	r6, r4
   1327c:	ldr	r2, [r6, r1]!
   13280:	mov	r1, r6
   13284:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   13288:	cmp	r2, #5
   1328c:	bls	13330 <test_type_aliases@@Base+0x1f0>
   13290:	ldrh	r3, [r1, #4]
   13294:	cmp	r3, #0
   13298:	beq	13330 <test_type_aliases@@Base+0x1f0>
   1329c:	cmp	r2, #10
   132a0:	bcc	13330 <test_type_aliases@@Base+0x1f0>
   132a4:	ldrb	r3, [r6, r3]
   132a8:	cmp	r3, #128	; 0x80
   132ac:	bne	13330 <test_type_aliases@@Base+0x1f0>
   132b0:	ldrh	r3, [r1, #8]
   132b4:	cmp	r3, #0
   132b8:	beq	13330 <test_type_aliases@@Base+0x1f0>
   132bc:	cmp	r2, #14
   132c0:	bcc	13330 <test_type_aliases@@Base+0x1f0>
   132c4:	add	r3, r6, r3
   132c8:	ldrh	r3, [r3]
   132cc:	cmp	r3, #32768	; 0x8000
   132d0:	bne	13330 <test_type_aliases@@Base+0x1f0>
   132d4:	ldrh	r3, [r1, #12]
   132d8:	cmp	r3, #0
   132dc:	beq	13330 <test_type_aliases@@Base+0x1f0>
   132e0:	cmp	r2, #18
   132e4:	bcc	13330 <test_type_aliases@@Base+0x1f0>
   132e8:	ldr	r3, [r6, r3]
   132ec:	cmp	r3, #-2147483648	; 0x80000000
   132f0:	bne	13330 <test_type_aliases@@Base+0x1f0>
   132f4:	ldrh	r3, [r1, #16]
   132f8:	cmp	r3, #0
   132fc:	beq	13330 <test_type_aliases@@Base+0x1f0>
   13300:	mov	r0, r6
   13304:	ldr	r3, [r0, r3]!
   13308:	ldr	r0, [r0, #4]
   1330c:	eor	r0, r0, #-2147483648	; 0x80000000
   13310:	orrs	r0, r3, r0
   13314:	bne	13330 <test_type_aliases@@Base+0x1f0>
   13318:	ldrh	r3, [r1, #6]
   1331c:	cmp	r3, #0
   13320:	beq	13330 <test_type_aliases@@Base+0x1f0>
   13324:	ldrb	r0, [r6, r3]
   13328:	cmp	r0, #255	; 0xff
   1332c:	beq	13544 <test_type_aliases@@Base+0x404>
   13330:	movw	r0, #16570	; 0x40ba
   13334:	movt	r0, #2
   13338:	bl	12ee0 <puts@plt>
   1333c:	mvn	r5, #0
   13340:	mov	r0, r4
   13344:	bl	20a08 <flatcc_builder_aligned_free@@Base>
   13348:	mov	r0, r5
   1334c:	sub	sp, fp, #24
   13350:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   13354:	mov	r0, r4
   13358:	mov	r1, #6
   1335c:	mov	r2, #8
   13360:	mov	r3, #8
   13364:	bl	1fb8c <flatcc_builder_table_add@@Base>
   13368:	cmp	r0, #0
   1336c:	beq	131dc <test_type_aliases@@Base+0x9c>
   13370:	mov	r9, #-2147483648	; 0x80000000
   13374:	mov	r8, #0
   13378:	mov	r1, #7
   1337c:	mov	r2, #8
   13380:	mov	r3, #8
   13384:	strd	r8, [r0]
   13388:	mov	r0, r4
   1338c:	bl	1fb8c <flatcc_builder_table_add@@Base>
   13390:	cmp	r0, #0
   13394:	beq	131dc <test_type_aliases@@Base+0x9c>
   13398:	mvn	r1, #0
   1339c:	mov	r2, #8
   133a0:	mov	r3, #8
   133a4:	str	r1, [r0]
   133a8:	str	r1, [r0, #4]
   133ac:	mov	r0, r4
   133b0:	mov	r1, #9
   133b4:	bl	1fb8c <flatcc_builder_table_add@@Base>
   133b8:	cmp	r0, #0
   133bc:	beq	131dc <test_type_aliases@@Base+0x9c>
   133c0:	movw	r1, #26214	; 0x6666
   133c4:	movw	r2, #26214	; 0x6666
   133c8:	mov	r3, #4
   133cc:	movt	r2, #26214	; 0x6666
   133d0:	movt	r1, #16386	; 0x4002
   133d4:	str	r2, [r0]
   133d8:	str	r1, [r0, #4]
   133dc:	mov	r0, r4
   133e0:	mov	r1, #4
   133e4:	mov	r2, #4
   133e8:	bl	1fb8c <flatcc_builder_table_add@@Base>
   133ec:	cmp	r0, #0
   133f0:	beq	131dc <test_type_aliases@@Base+0x9c>
   133f4:	mov	r1, #-2147483648	; 0x80000000
   133f8:	mov	r2, #4
   133fc:	mov	r3, #4
   13400:	str	r1, [r0]
   13404:	mov	r0, r4
   13408:	mov	r1, #5
   1340c:	bl	1fb8c <flatcc_builder_table_add@@Base>
   13410:	cmp	r0, #0
   13414:	beq	131dc <test_type_aliases@@Base+0x9c>
   13418:	mvn	r1, #0
   1341c:	mov	r2, #4
   13420:	mov	r3, #4
   13424:	str	r1, [r0]
   13428:	mov	r0, r4
   1342c:	mov	r1, #8
   13430:	bl	1fb8c <flatcc_builder_table_add@@Base>
   13434:	cmp	r0, #0
   13438:	beq	131dc <test_type_aliases@@Base+0x9c>
   1343c:	movw	r1, #13107	; 0x3333
   13440:	cmp	r6, #0
   13444:	movt	r1, #16403	; 0x4013
   13448:	str	r1, [r0]
   1344c:	beq	131dc <test_type_aliases@@Base+0x9c>
   13450:	mov	r0, r4
   13454:	mov	r1, #10
   13458:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1345c:	cmp	r0, #0
   13460:	strne	r6, [r0]
   13464:	cmpne	r5, #0
   13468:	beq	131dc <test_type_aliases@@Base+0x9c>
   1346c:	mov	r0, r4
   13470:	mov	r1, #11
   13474:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   13478:	cmp	r0, #0
   1347c:	beq	131dc <test_type_aliases@@Base+0x9c>
   13480:	str	r5, [r0]
   13484:	mov	r0, r4
   13488:	mov	r1, #2
   1348c:	mov	r2, #2
   13490:	mov	r3, #2
   13494:	bl	1fb8c <flatcc_builder_table_add@@Base>
   13498:	cmp	r0, #0
   1349c:	beq	131dc <test_type_aliases@@Base+0x9c>
   134a0:	mov	r1, #32768	; 0x8000
   134a4:	mov	r2, #2
   134a8:	mov	r3, #2
   134ac:	strh	r1, [r0]
   134b0:	mov	r0, r4
   134b4:	mov	r1, #3
   134b8:	bl	1fb8c <flatcc_builder_table_add@@Base>
   134bc:	cmp	r0, #0
   134c0:	beq	131dc <test_type_aliases@@Base+0x9c>
   134c4:	mvn	r1, #0
   134c8:	mov	r2, #1
   134cc:	mov	r3, #1
   134d0:	mov	r8, #0
   134d4:	strh	r1, [r0]
   134d8:	mov	r0, r4
   134dc:	mov	r1, #0
   134e0:	bl	1fb8c <flatcc_builder_table_add@@Base>
   134e4:	cmp	r0, #0
   134e8:	beq	131dc <test_type_aliases@@Base+0x9c>
   134ec:	mov	r1, #128	; 0x80
   134f0:	mov	r2, #1
   134f4:	mov	r3, #1
   134f8:	strb	r1, [r0]
   134fc:	mov	r0, r4
   13500:	mov	r1, #1
   13504:	bl	1fb8c <flatcc_builder_table_add@@Base>
   13508:	cmp	r0, #0
   1350c:	beq	131dc <test_type_aliases@@Base+0x9c>
   13510:	mov	r1, #255	; 0xff
   13514:	mov	r2, #0
   13518:	strb	r1, [r0]
   1351c:	movw	r1, #21986	; 0x55e2
   13520:	mov	r0, r4
   13524:	movt	r1, #2
   13528:	bl	1f220 <flatcc_builder_check_required@@Base>
   1352c:	cmp	r0, #0
   13530:	beq	13630 <test_type_aliases@@Base+0x4f0>
   13534:	mov	r0, r4
   13538:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   1353c:	mov	r8, r0
   13540:	b	131dc <test_type_aliases@@Base+0x9c>
   13544:	ldrh	r3, [r1, #10]
   13548:	cmp	r3, #0
   1354c:	beq	13330 <test_type_aliases@@Base+0x1f0>
   13550:	add	r0, r6, r3
   13554:	movw	r3, #65535	; 0xffff
   13558:	ldrh	r0, [r0]
   1355c:	cmp	r0, r3
   13560:	bne	13330 <test_type_aliases@@Base+0x1f0>
   13564:	ldrh	r3, [r1, #14]
   13568:	cmp	r3, #0
   1356c:	beq	13330 <test_type_aliases@@Base+0x1f0>
   13570:	cmp	r2, #20
   13574:	bcc	13330 <test_type_aliases@@Base+0x1f0>
   13578:	ldr	r0, [r6, r3]
   1357c:	cmn	r0, #1
   13580:	bne	13330 <test_type_aliases@@Base+0x1f0>
   13584:	ldrh	r3, [r1, #18]
   13588:	cmp	r3, #0
   1358c:	beq	13330 <test_type_aliases@@Base+0x1f0>
   13590:	cmp	r2, #22
   13594:	bcc	13330 <test_type_aliases@@Base+0x1f0>
   13598:	mov	r0, r6
   1359c:	mvn	r5, #0
   135a0:	ldr	r3, [r0, r3]!
   135a4:	ldr	r0, [r0, #4]
   135a8:	eor	r3, r3, r5
   135ac:	eor	r0, r0, r5
   135b0:	orrs	r0, r3, r0
   135b4:	bne	13330 <test_type_aliases@@Base+0x1f0>
   135b8:	ldrh	r3, [r1, #20]
   135bc:	cmp	r3, #0
   135c0:	beq	13330 <test_type_aliases@@Base+0x1f0>
   135c4:	cmp	r2, #24
   135c8:	bcc	13330 <test_type_aliases@@Base+0x1f0>
   135cc:	add	r0, r6, r3
   135d0:	vldr	s2, [pc, #128]	; 13658 <test_type_aliases@@Base+0x518>
   135d4:	vldr	s0, [r0]
   135d8:	vcmp.f32	s0, s2
   135dc:	vmrs	APSR_nzcv, fpscr
   135e0:	bne	13330 <test_type_aliases@@Base+0x1f0>
   135e4:	ldrh	r1, [r1, #22]
   135e8:	cmp	r1, #0
   135ec:	beq	13330 <test_type_aliases@@Base+0x1f0>
   135f0:	add	r0, r6, r1
   135f4:	vldr	d16, [pc, #84]	; 13650 <test_type_aliases@@Base+0x510>
   135f8:	vldr	d17, [r0]
   135fc:	vcmp.f64	d17, d16
   13600:	vmrs	APSR_nzcv, fpscr
   13604:	bne	13330 <test_type_aliases@@Base+0x1f0>
   13608:	mov	r5, #0
   1360c:	b	13340 <test_type_aliases@@Base+0x200>
   13610:	movw	r0, #12203	; 0x2fab
   13614:	movw	r1, #12241	; 0x2fd1
   13618:	movw	r3, #12803	; 0x3203
   1361c:	movw	r2, #749	; 0x2ed
   13620:	movt	r0, #2
   13624:	movt	r1, #2
   13628:	movt	r3, #2
   1362c:	bl	12f88 <__assert_fail@plt>
   13630:	movw	r0, #12412	; 0x307c
   13634:	movw	r1, #12586	; 0x312a
   13638:	movw	r3, #12685	; 0x318d
   1363c:	mov	r2, #237	; 0xed
   13640:	movt	r0, #2
   13644:	movt	r1, #2
   13648:	movt	r3, #2
   1364c:	bl	12f88 <__assert_fail@plt>
   13650:	strbtvs	r6, [r6], -r6, ror #12
   13654:	andmi	r6, r2, r6, ror #12
   13658:	andsmi	r3, r3, r3, lsr r3
   1365c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13660:	add	fp, sp, #28
   13664:	sub	sp, sp, #20
   13668:	mov	r4, r3
   1366c:	mov	r5, r2
   13670:	mov	r6, r1
   13674:	cmp	r0, #0
   13678:	beq	13690 <test_type_aliases@@Base+0x550>
   1367c:	movw	r1, #12774	; 0x31e6
   13680:	mov	r2, r0
   13684:	mov	r0, r4
   13688:	movt	r1, #2
   1368c:	bl	12f28 <fprintf@plt>
   13690:	cmp	r5, #0
   13694:	beq	13770 <test_type_aliases@@Base+0x630>
   13698:	movw	sl, #12793	; 0x31f9
   1369c:	add	r7, sp, #3
   136a0:	mov	r8, #0
   136a4:	movt	sl, #2
   136a8:	ands	r9, r8, #15
   136ac:	beq	136c8 <test_type_aliases@@Base+0x588>
   136b0:	tst	r8, #7
   136b4:	bne	136f8 <test_type_aliases@@Base+0x5b8>
   136b8:	mov	r0, #32
   136bc:	mov	r1, r4
   136c0:	bl	12f64 <fputc@plt>
   136c4:	b	136f8 <test_type_aliases@@Base+0x5b8>
   136c8:	cmp	r8, #0
   136cc:	beq	136e4 <test_type_aliases@@Base+0x5a4>
   136d0:	movw	r1, #12779	; 0x31eb
   136d4:	mov	r0, r4
   136d8:	mov	r2, r7
   136dc:	movt	r1, #2
   136e0:	bl	12f28 <fprintf@plt>
   136e4:	movw	r1, #12785	; 0x31f1
   136e8:	mov	r0, r4
   136ec:	mov	r2, r8
   136f0:	movt	r1, #2
   136f4:	bl	12f28 <fprintf@plt>
   136f8:	ldrb	r2, [r6, r8]
   136fc:	mov	r0, r4
   13700:	mov	r1, sl
   13704:	bl	12f28 <fprintf@plt>
   13708:	ldrb	r0, [r6, r8]
   1370c:	add	r8, r8, #1
   13710:	sub	r1, r0, #32
   13714:	uxtb	r1, r1
   13718:	cmp	r1, #94	; 0x5e
   1371c:	mov	r1, #0
   13720:	movwhi	r0, #46	; 0x2e
   13724:	cmp	r5, r8
   13728:	strb	r0, [r7, r9]
   1372c:	add	r0, r7, r9
   13730:	strb	r1, [r0, #1]
   13734:	bne	136a8 <test_type_aliases@@Base+0x568>
   13738:	tst	r5, #15
   1373c:	beq	13770 <test_type_aliases@@Base+0x630>
   13740:	add	r6, r5, #1
   13744:	movw	r5, #12799	; 0x31ff
   13748:	movt	r5, #2
   1374c:	mov	r0, r5
   13750:	mov	r1, #3
   13754:	mov	r2, #1
   13758:	mov	r3, r4
   1375c:	bl	12ec8 <fwrite@plt>
   13760:	add	r0, r6, #1
   13764:	tst	r6, #15
   13768:	mov	r6, r0
   1376c:	bne	1374c <test_type_aliases@@Base+0x60c>
   13770:	movw	r1, #12779	; 0x31eb
   13774:	add	r2, sp, #3
   13778:	mov	r0, r4
   1377c:	movt	r1, #2
   13780:	bl	12f28 <fprintf@plt>
   13784:	sub	sp, fp, #28
   13788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001378c <test_empty_monster@@Base>:
   1378c:	push	{r4, r5, fp, lr}
   13790:	add	fp, sp, #8
   13794:	sub	sp, sp, #8
   13798:	mov	r4, r0
   1379c:	bl	1d0ac <flatcc_builder_reset@@Base>
   137a0:	movw	r1, #8956	; 0x22fc
   137a4:	mov	r0, r4
   137a8:	mov	r2, #0
   137ac:	mov	r3, #0
   137b0:	movt	r1, #2
   137b4:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   137b8:	mov	r0, r4
   137bc:	mov	r1, #36	; 0x24
   137c0:	bl	1e940 <flatcc_builder_start_table@@Base>
   137c4:	movw	r1, #9024	; 0x2340
   137c8:	mov	r0, r4
   137cc:	movt	r1, #2
   137d0:	bl	20504 <flatcc_builder_create_string_str@@Base>
   137d4:	cmp	r0, #0
   137d8:	beq	137f4 <test_empty_monster@@Base+0x68>
   137dc:	mov	r5, r0
   137e0:	mov	r0, r4
   137e4:	mov	r1, #3
   137e8:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   137ec:	cmp	r0, #0
   137f0:	strne	r5, [r0]
   137f4:	movw	r1, #21988	; 0x55e4
   137f8:	mov	r0, r4
   137fc:	mov	r2, #1
   13800:	movt	r1, #2
   13804:	bl	1f220 <flatcc_builder_check_required@@Base>
   13808:	cmp	r0, #0
   1380c:	beq	138f4 <test_empty_monster@@Base+0x168>
   13810:	mov	r0, r4
   13814:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   13818:	mov	r1, r0
   1381c:	mov	r0, r4
   13820:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   13824:	add	r1, sp, #4
   13828:	mov	r0, r4
   1382c:	bl	20908 <flatcc_builder_finalize_aligned_buffer@@Base>
   13830:	mov	r4, r0
   13834:	movw	r0, #32880	; 0x8070
   13838:	ldr	r2, [sp, #4]
   1383c:	movt	r0, #3
   13840:	mov	r1, r4
   13844:	ldr	r3, [r0]
   13848:	movw	r0, #9034	; 0x234a
   1384c:	movt	r0, #2
   13850:	bl	1365c <test_type_aliases@@Base+0x51c>
   13854:	mov	r0, r4
   13858:	bl	13088 <verify_empty_monster@@Base>
   1385c:	mov	r5, r0
   13860:	cmp	r0, #0
   13864:	beq	13874 <test_empty_monster@@Base+0xe8>
   13868:	mov	r0, r4
   1386c:	bl	20a08 <flatcc_builder_aligned_free@@Base>
   13870:	b	138b0 <test_empty_monster@@Base+0x124>
   13874:	ldr	r1, [sp, #4]
   13878:	movw	r2, #8956	; 0x22fc
   1387c:	movw	r3, #49568	; 0xc1a0
   13880:	mov	r0, r4
   13884:	movt	r2, #2
   13888:	movt	r3, #1
   1388c:	bl	21a80 <flatcc_verify_table_as_root@@Base>
   13890:	cmp	r0, #0
   13894:	beq	138bc <test_empty_monster@@Base+0x130>
   13898:	bl	20ff4 <flatcc_verify_error_string@@Base>
   1389c:	mov	r1, r0
   138a0:	movw	r0, #9054	; 0x235e
   138a4:	movt	r0, #2
   138a8:	bl	12e98 <printf@plt>
   138ac:	mvn	r5, #0
   138b0:	mov	r0, r5
   138b4:	sub	sp, fp, #8
   138b8:	pop	{r4, r5, fp, pc}
   138bc:	ldr	r0, [sp, #4]
   138c0:	movw	r2, #8956	; 0x22fc
   138c4:	movw	r3, #49568	; 0xc1a0
   138c8:	movt	r2, #2
   138cc:	movt	r3, #1
   138d0:	sub	r1, r0, #1
   138d4:	mov	r0, r4
   138d8:	bl	21a80 <flatcc_verify_table_as_root@@Base>
   138dc:	cmp	r0, #0
   138e0:	bne	13868 <test_empty_monster@@Base+0xdc>
   138e4:	movw	r0, #16617	; 0x40e9
   138e8:	movt	r0, #2
   138ec:	bl	12ee0 <puts@plt>
   138f0:	b	138ac <test_empty_monster@@Base+0x120>
   138f4:	movw	r0, #12876	; 0x324c
   138f8:	movw	r1, #12586	; 0x312a
   138fc:	movw	r3, #13038	; 0x32ee
   13900:	mov	r2, #235	; 0xeb
   13904:	movt	r0, #2
   13908:	movt	r1, #2
   1390c:	movt	r3, #2
   13910:	bl	12f88 <__assert_fail@plt>

00013914 <test_typed_empty_monster@@Base>:
   13914:	push	{r4, r5, r6, sl, fp, lr}
   13918:	add	fp, sp, #16
   1391c:	sub	sp, sp, #8
   13920:	mov	r4, r0
   13924:	mov	r0, #0
   13928:	str	r0, [sp]
   1392c:	mov	r0, r4
   13930:	bl	1d0ac <flatcc_builder_reset@@Base>
   13934:	movw	r1, #9094	; 0x2386
   13938:	mov	r0, r4
   1393c:	mov	r2, #0
   13940:	mov	r3, #0
   13944:	movt	r1, #2
   13948:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   1394c:	mov	r0, r4
   13950:	mov	r1, #36	; 0x24
   13954:	bl	1e940 <flatcc_builder_start_table@@Base>
   13958:	movw	r1, #9024	; 0x2340
   1395c:	mov	r0, r4
   13960:	movt	r1, #2
   13964:	bl	20504 <flatcc_builder_create_string_str@@Base>
   13968:	cmp	r0, #0
   1396c:	beq	13988 <test_typed_empty_monster@@Base+0x74>
   13970:	mov	r5, r0
   13974:	mov	r0, r4
   13978:	mov	r1, #3
   1397c:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   13980:	cmp	r0, #0
   13984:	strne	r5, [r0]
   13988:	movw	r1, #21988	; 0x55e4
   1398c:	mov	r0, r4
   13990:	mov	r2, #1
   13994:	movt	r1, #2
   13998:	bl	1f220 <flatcc_builder_check_required@@Base>
   1399c:	cmp	r0, #0
   139a0:	beq	13b70 <test_typed_empty_monster@@Base+0x25c>
   139a4:	mov	r0, r4
   139a8:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   139ac:	mov	r1, r0
   139b0:	mov	r0, r4
   139b4:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   139b8:	add	r1, sp, #4
   139bc:	mov	r0, r4
   139c0:	bl	20908 <flatcc_builder_finalize_aligned_buffer@@Base>
   139c4:	mov	r4, r0
   139c8:	movw	r0, #32880	; 0x8070
   139cc:	ldr	r2, [sp, #4]
   139d0:	movt	r0, #3
   139d4:	mov	r1, r4
   139d8:	ldr	r3, [r0]
   139dc:	movw	r0, #9099	; 0x238b
   139e0:	movt	r0, #2
   139e4:	bl	1365c <test_type_aliases@@Base+0x51c>
   139e8:	ldr	r1, [r4, #4]
   139ec:	movw	r6, #62593	; 0xf481
   139f0:	movt	r6, #13070	; 0x330e
   139f4:	cmp	r1, r6
   139f8:	bne	13a70 <test_typed_empty_monster@@Base+0x15c>
   139fc:	mov	r0, r4
   13a00:	bl	13088 <verify_empty_monster@@Base>
   13a04:	cmp	r0, #0
   13a08:	beq	13a80 <test_typed_empty_monster@@Base+0x16c>
   13a0c:	ldr	r1, [sp, #4]
   13a10:	movw	r2, #9094	; 0x2386
   13a14:	movw	r3, #49568	; 0xc1a0
   13a18:	mov	r0, r4
   13a1c:	movt	r2, #2
   13a20:	movt	r3, #1
   13a24:	bl	21a80 <flatcc_verify_table_as_root@@Base>
   13a28:	cmp	r0, #0
   13a2c:	bne	13a54 <test_typed_empty_monster@@Base+0x140>
   13a30:	ldr	r1, [sp, #4]
   13a34:	movw	r2, #9094	; 0x2386
   13a38:	movw	r3, #49568	; 0xc1a0
   13a3c:	mov	r0, r4
   13a40:	movt	r2, #2
   13a44:	movt	r3, #1
   13a48:	bl	21a80 <flatcc_verify_table_as_root@@Base>
   13a4c:	cmp	r0, #0
   13a50:	beq	13aa4 <test_typed_empty_monster@@Base+0x190>
   13a54:	mov	r5, r0
   13a58:	bl	20ff4 <flatcc_verify_error_string@@Base>
   13a5c:	mov	r1, r0
   13a60:	movw	r0, #9175	; 0x23d7
   13a64:	movt	r0, #2
   13a68:	bl	12e98 <printf@plt>
   13a6c:	b	13a90 <test_typed_empty_monster@@Base+0x17c>
   13a70:	movw	r0, #9125	; 0x23a5
   13a74:	movt	r0, #2
   13a78:	bl	12e98 <printf@plt>
   13a7c:	b	13a8c <test_typed_empty_monster@@Base+0x178>
   13a80:	movw	r0, #16662	; 0x4116
   13a84:	movt	r0, #2
   13a88:	bl	12ee0 <puts@plt>
   13a8c:	mvn	r5, #0
   13a90:	mov	r0, r4
   13a94:	bl	20a08 <flatcc_builder_aligned_free@@Base>
   13a98:	mov	r0, r5
   13a9c:	sub	sp, fp, #16
   13aa0:	pop	{r4, r5, r6, sl, fp, pc}
   13aa4:	ldr	r1, [sp, #4]
   13aa8:	movw	r3, #49568	; 0xc1a0
   13aac:	mov	r0, r4
   13ab0:	mov	r2, r6
   13ab4:	movt	r3, #1
   13ab8:	bl	21b7c <flatcc_verify_table_as_typed_root@@Base>
   13abc:	cmp	r0, #0
   13ac0:	beq	13adc <test_typed_empty_monster@@Base+0x1c8>
   13ac4:	mov	r5, r0
   13ac8:	bl	20ff4 <flatcc_verify_error_string@@Base>
   13acc:	mov	r1, r0
   13ad0:	movw	r0, #9221	; 0x2405
   13ad4:	movt	r0, #2
   13ad8:	b	13a68 <test_typed_empty_monster@@Base+0x154>
   13adc:	ldr	r1, [sp, #4]
   13ae0:	movw	r3, #49568	; 0xc1a0
   13ae4:	mov	r0, r4
   13ae8:	mov	r2, r6
   13aec:	movt	r3, #1
   13af0:	bl	21b7c <flatcc_verify_table_as_typed_root@@Base>
   13af4:	cmp	r0, #0
   13af8:	beq	13b14 <test_typed_empty_monster@@Base+0x200>
   13afc:	mov	r5, r0
   13b00:	bl	20ff4 <flatcc_verify_error_string@@Base>
   13b04:	mov	r1, r0
   13b08:	movw	r0, #9276	; 0x243c
   13b0c:	movt	r0, #2
   13b10:	b	13a68 <test_typed_empty_monster@@Base+0x154>
   13b14:	ldr	r1, [sp, #4]
   13b18:	movw	r3, #49568	; 0xc1a0
   13b1c:	mov	r2, sp
   13b20:	mov	r0, r4
   13b24:	str	r6, [sp]
   13b28:	movt	r3, #1
   13b2c:	bl	21a80 <flatcc_verify_table_as_root@@Base>
   13b30:	cmp	r0, #0
   13b34:	bne	13a54 <test_typed_empty_monster@@Base+0x140>
   13b38:	ldr	r1, [sp, #4]
   13b3c:	movw	r2, #8956	; 0x22fc
   13b40:	movw	r3, #49568	; 0xc1a0
   13b44:	mov	r0, r4
   13b48:	movt	r2, #2
   13b4c:	movt	r3, #1
   13b50:	bl	21a80 <flatcc_verify_table_as_root@@Base>
   13b54:	mov	r5, #0
   13b58:	cmp	r0, #0
   13b5c:	bne	13a90 <test_typed_empty_monster@@Base+0x17c>
   13b60:	movw	r0, #16724	; 0x4154
   13b64:	movt	r0, #2
   13b68:	bl	12ee0 <puts@plt>
   13b6c:	b	13a90 <test_typed_empty_monster@@Base+0x17c>
   13b70:	movw	r0, #12876	; 0x324c
   13b74:	movw	r1, #12586	; 0x312a
   13b78:	movw	r3, #13038	; 0x32ee
   13b7c:	mov	r2, #235	; 0xeb
   13b80:	movt	r0, #2
   13b84:	movt	r1, #2
   13b88:	movt	r3, #2
   13b8c:	bl	12f88 <__assert_fail@plt>

00013b90 <verify_table_with_emptystruct@@Base>:
   13b90:	push	{fp, lr}
   13b94:	mov	fp, sp
   13b98:	mov	r1, r0
   13b9c:	movw	r0, #16797	; 0x419d
   13ba0:	movt	r0, #2
   13ba4:	cmp	r1, #0
   13ba8:	beq	13bec <verify_table_with_emptystruct@@Base+0x5c>
   13bac:	ldr	r2, [r1, #4]
   13bb0:	movw	r3, #20301	; 0x4f4d
   13bb4:	movt	r3, #21326	; 0x534e
   13bb8:	cmp	r2, r3
   13bbc:	bne	13bec <verify_table_with_emptystruct@@Base+0x5c>
   13bc0:	ldr	r0, [r1]
   13bc4:	ldr	r0, [r1, r0]!
   13bc8:	ldrh	r2, [r1, -r0]!
   13bcc:	movw	r0, #16834	; 0x41c2
   13bd0:	movt	r0, #2
   13bd4:	cmp	r2, #6
   13bd8:	bcc	13bec <verify_table_with_emptystruct@@Base+0x5c>
   13bdc:	ldrh	r2, [r1, #4]
   13be0:	mov	r1, #0
   13be4:	cmp	r2, #0
   13be8:	bne	13bf4 <verify_table_with_emptystruct@@Base+0x64>
   13bec:	bl	12ee0 <puts@plt>
   13bf0:	mvn	r1, #0
   13bf4:	mov	r0, r1
   13bf8:	pop	{fp, pc}

00013bfc <test_table_with_emptystruct@@Base>:
   13bfc:	push	{r4, r5, fp, lr}
   13c00:	add	fp, sp, #8
   13c04:	sub	sp, sp, #8
   13c08:	mov	r4, r0
   13c0c:	bl	1d0ac <flatcc_builder_reset@@Base>
   13c10:	movw	r1, #8956	; 0x22fc
   13c14:	mov	r0, r4
   13c18:	mov	r2, #0
   13c1c:	mov	r3, #0
   13c20:	mov	r5, #0
   13c24:	movt	r1, #2
   13c28:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   13c2c:	cmp	r0, #0
   13c30:	bne	13c9c <test_table_with_emptystruct@@Base+0xa0>
   13c34:	mov	r0, r4
   13c38:	mov	r1, #1
   13c3c:	bl	1e940 <flatcc_builder_start_table@@Base>
   13c40:	cmp	r0, #0
   13c44:	bne	13c90 <test_table_with_emptystruct@@Base+0x94>
   13c48:	mov	r0, r4
   13c4c:	mov	r1, #0
   13c50:	mov	r2, #0
   13c54:	mov	r3, #1
   13c58:	mov	r5, #0
   13c5c:	bl	1fb8c <flatcc_builder_table_add@@Base>
   13c60:	cmp	r0, #0
   13c64:	beq	13c90 <test_table_with_emptystruct@@Base+0x94>
   13c68:	movw	r1, #21992	; 0x55e8
   13c6c:	mov	r0, r4
   13c70:	mov	r2, #0
   13c74:	movt	r1, #2
   13c78:	bl	1f220 <flatcc_builder_check_required@@Base>
   13c7c:	cmp	r0, #0
   13c80:	beq	13cec <test_table_with_emptystruct@@Base+0xf0>
   13c84:	mov	r0, r4
   13c88:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   13c8c:	mov	r5, r0
   13c90:	mov	r0, r4
   13c94:	mov	r1, r5
   13c98:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   13c9c:	add	r1, sp, #4
   13ca0:	mov	r0, r4
   13ca4:	bl	20908 <flatcc_builder_finalize_aligned_buffer@@Base>
   13ca8:	mov	r4, r0
   13cac:	movw	r0, #32880	; 0x8070
   13cb0:	ldr	r2, [sp, #4]
   13cb4:	movt	r0, #3
   13cb8:	mov	r1, r4
   13cbc:	ldr	r3, [r0]
   13cc0:	movw	r0, #9346	; 0x2482
   13cc4:	movt	r0, #2
   13cc8:	bl	1365c <test_type_aliases@@Base+0x51c>
   13ccc:	mov	r0, r4
   13cd0:	bl	13b90 <verify_table_with_emptystruct@@Base>
   13cd4:	mov	r5, r0
   13cd8:	mov	r0, r4
   13cdc:	bl	20a08 <flatcc_builder_aligned_free@@Base>
   13ce0:	mov	r0, r5
   13ce4:	sub	sp, fp, #8
   13ce8:	pop	{r4, r5, fp, pc}
   13cec:	movw	r0, #13119	; 0x333f
   13cf0:	movw	r1, #12586	; 0x312a
   13cf4:	movw	r3, #13308	; 0x33fc
   13cf8:	mov	r2, #215	; 0xd7
   13cfc:	movt	r0, #2
   13d00:	movt	r1, #2
   13d04:	movt	r3, #2
   13d08:	bl	12f88 <__assert_fail@plt>

00013d0c <test_typed_table_with_emptystruct@@Base>:
   13d0c:	push	{r4, r5, fp, lr}
   13d10:	add	fp, sp, #8
   13d14:	sub	sp, sp, #8
   13d18:	mov	r4, r0
   13d1c:	bl	1d0ac <flatcc_builder_reset@@Base>
   13d20:	movw	r1, #9370	; 0x249a
   13d24:	mov	r0, r4
   13d28:	mov	r2, #0
   13d2c:	mov	r3, #0
   13d30:	mov	r5, #0
   13d34:	movt	r1, #2
   13d38:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   13d3c:	cmp	r0, #0
   13d40:	bne	13dac <test_typed_table_with_emptystruct@@Base+0xa0>
   13d44:	mov	r0, r4
   13d48:	mov	r1, #1
   13d4c:	bl	1e940 <flatcc_builder_start_table@@Base>
   13d50:	cmp	r0, #0
   13d54:	bne	13da0 <test_typed_table_with_emptystruct@@Base+0x94>
   13d58:	mov	r0, r4
   13d5c:	mov	r1, #0
   13d60:	mov	r2, #0
   13d64:	mov	r3, #1
   13d68:	mov	r5, #0
   13d6c:	bl	1fb8c <flatcc_builder_table_add@@Base>
   13d70:	cmp	r0, #0
   13d74:	beq	13da0 <test_typed_table_with_emptystruct@@Base+0x94>
   13d78:	movw	r1, #21992	; 0x55e8
   13d7c:	mov	r0, r4
   13d80:	mov	r2, #0
   13d84:	movt	r1, #2
   13d88:	bl	1f220 <flatcc_builder_check_required@@Base>
   13d8c:	cmp	r0, #0
   13d90:	beq	13eac <test_typed_table_with_emptystruct@@Base+0x1a0>
   13d94:	mov	r0, r4
   13d98:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   13d9c:	mov	r5, r0
   13da0:	mov	r0, r4
   13da4:	mov	r1, r5
   13da8:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   13dac:	add	r1, sp, #4
   13db0:	mov	r0, r4
   13db4:	bl	207ec <flatcc_builder_get_direct_buffer@@Base>
   13db8:	mov	r4, r0
   13dbc:	movw	r0, #32880	; 0x8070
   13dc0:	ldr	r2, [sp, #4]
   13dc4:	movt	r0, #3
   13dc8:	mov	r1, r4
   13dcc:	ldr	r3, [r0]
   13dd0:	movw	r0, #9340	; 0x247c
   13dd4:	movt	r0, #2
   13dd8:	bl	1365c <test_type_aliases@@Base+0x51c>
   13ddc:	ldr	r1, [sp, #4]
   13de0:	movw	r2, #9370	; 0x249a
   13de4:	movw	r3, #51964	; 0xcafc
   13de8:	mov	r0, r4
   13dec:	movt	r2, #2
   13df0:	movt	r3, #1
   13df4:	bl	21a80 <flatcc_verify_table_as_root@@Base>
   13df8:	cmp	r0, #0
   13dfc:	beq	13e0c <test_typed_table_with_emptystruct@@Base+0x100>
   13e00:	movw	r0, #16966	; 0x4246
   13e04:	movt	r0, #2
   13e08:	b	13e6c <test_typed_table_with_emptystruct@@Base+0x160>
   13e0c:	ldr	r1, [sp, #4]
   13e10:	movw	r2, #9370	; 0x249a
   13e14:	movw	r3, #51964	; 0xcafc
   13e18:	mov	r0, r4
   13e1c:	movt	r2, #2
   13e20:	movt	r3, #1
   13e24:	bl	21a80 <flatcc_verify_table_as_root@@Base>
   13e28:	cmp	r0, #0
   13e2c:	beq	13e3c <test_typed_table_with_emptystruct@@Base+0x130>
   13e30:	movw	r0, #16938	; 0x422a
   13e34:	movt	r0, #2
   13e38:	b	13e6c <test_typed_table_with_emptystruct@@Base+0x160>
   13e3c:	movw	r5, #14262	; 0x37b6
   13e40:	ldr	r1, [sp, #4]
   13e44:	movw	r3, #51964	; 0xcafc
   13e48:	mov	r0, r4
   13e4c:	movt	r5, #45277	; 0xb0dd
   13e50:	movt	r3, #1
   13e54:	mov	r2, r5
   13e58:	bl	21b7c <flatcc_verify_table_as_typed_root@@Base>
   13e5c:	cmp	r0, #0
   13e60:	beq	13e7c <test_typed_table_with_emptystruct@@Base+0x170>
   13e64:	movw	r0, #16901	; 0x4205
   13e68:	movt	r0, #2
   13e6c:	bl	12ee0 <puts@plt>
   13e70:	mvn	r0, #0
   13e74:	sub	sp, fp, #8
   13e78:	pop	{r4, r5, fp, pc}
   13e7c:	cmp	r4, #0
   13e80:	beq	13ea0 <test_typed_table_with_emptystruct@@Base+0x194>
   13e84:	ldr	r1, [r4, #4]
   13e88:	mov	r0, #0
   13e8c:	cmp	r1, r5
   13e90:	beq	13e74 <test_typed_table_with_emptystruct@@Base+0x168>
   13e94:	movw	r0, #16885	; 0x41f5
   13e98:	movt	r0, #2
   13e9c:	b	13e6c <test_typed_table_with_emptystruct@@Base+0x160>
   13ea0:	movw	r0, #16861	; 0x41dd
   13ea4:	movt	r0, #2
   13ea8:	b	13e6c <test_typed_table_with_emptystruct@@Base+0x160>
   13eac:	movw	r0, #13119	; 0x333f
   13eb0:	movw	r1, #12586	; 0x312a
   13eb4:	movw	r3, #13308	; 0x33fc
   13eb8:	mov	r2, #215	; 0xd7
   13ebc:	movt	r0, #2
   13ec0:	movt	r1, #2
   13ec4:	movt	r3, #2
   13ec8:	bl	12f88 <__assert_fail@plt>

00013ecc <verify_monster@@Base>:
   13ecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ed0:	add	fp, sp, #28
   13ed4:	sub	sp, sp, #4
   13ed8:	mov	r4, r0
   13edc:	ldr	r0, [r0, #4]
   13ee0:	movw	r1, #20301	; 0x4f4d
   13ee4:	movt	r1, #21326	; 0x534e
   13ee8:	cmp	r0, r1
   13eec:	bne	13f70 <verify_monster@@Base+0xa4>
   13ef0:	ldr	r7, [r4]
   13ef4:	adds	r6, r4, r7
   13ef8:	beq	13f88 <verify_monster@@Base+0xbc>
   13efc:	ldr	r1, [r6]
   13f00:	mov	r0, r6
   13f04:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   13f08:	cmp	r1, #10
   13f0c:	bcc	13f7c <verify_monster@@Base+0xb0>
   13f10:	ldrh	r1, [r0, #8]
   13f14:	cmp	r1, #0
   13f18:	beq	13f7c <verify_monster@@Base+0xb0>
   13f1c:	add	r1, r6, r1
   13f20:	ldrh	r1, [r1]
   13f24:	cmp	r1, #80	; 0x50
   13f28:	bne	13f7c <verify_monster@@Base+0xb0>
   13f2c:	ldrh	r0, [r0, #4]
   13f30:	cmp	r0, #0
   13f34:	beq	13fa0 <verify_monster@@Base+0xd4>
   13f38:	add	r5, r6, r0
   13f3c:	tst	r5, #15
   13f40:	beq	13f50 <verify_monster@@Base+0x84>
   13f44:	movw	r0, #18039	; 0x4677
   13f48:	movt	r0, #2
   13f4c:	bl	12ee0 <puts@plt>
   13f50:	vldr	s0, [pc, #968]	; 14320 <verify_monster@@Base+0x454>
   13f54:	vldr	s2, [r5, #8]
   13f58:	vcmp.f32	s2, s0
   13f5c:	vmrs	APSR_nzcv, fpscr
   13f60:	beq	13fac <verify_monster@@Base+0xe0>
   13f64:	movw	r0, #18006	; 0x4656
   13f68:	movt	r0, #2
   13f6c:	b	13f90 <verify_monster@@Base+0xc4>
   13f70:	movw	r0, #16997	; 0x4265
   13f74:	movt	r0, #2
   13f78:	b	13f90 <verify_monster@@Base+0xc4>
   13f7c:	movw	r0, #18078	; 0x469e
   13f80:	movt	r0, #2
   13f84:	b	13f90 <verify_monster@@Base+0xc4>
   13f88:	movw	r0, #17038	; 0x428e
   13f8c:	movt	r0, #2
   13f90:	bl	12ee0 <puts@plt>
   13f94:	mvn	r0, #0
   13f98:	sub	sp, fp, #28
   13f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fa0:	movw	r0, #17060	; 0x42a4
   13fa4:	movt	r0, #2
   13fa8:	b	13f90 <verify_monster@@Base+0xc4>
   13fac:	vldr	s0, [r5]
   13fb0:	vmov.f32	s2, #112	; 0x3f800000  1.0
   13fb4:	vcmp.f32	s0, s2
   13fb8:	vmrs	APSR_nzcv, fpscr
   13fbc:	bne	13fd4 <verify_monster@@Base+0x108>
   13fc0:	vldr	s0, [r5, #4]
   13fc4:	vmov.f32	s2, #0	; 0x40000000  2.0
   13fc8:	vcmp.f32	s0, s2
   13fcc:	vmrs	APSR_nzcv, fpscr
   13fd0:	beq	13fe0 <verify_monster@@Base+0x114>
   13fd4:	movw	r0, #17984	; 0x4640
   13fd8:	movt	r0, #2
   13fdc:	b	13f90 <verify_monster@@Base+0xc4>
   13fe0:	vldr	d16, [r5, #16]
   13fe4:	vcmp.f64	d16, #0.0
   13fe8:	vmrs	APSR_nzcv, fpscr
   13fec:	bne	1400c <verify_monster@@Base+0x140>
   13ff0:	movw	r1, #21852	; 0x555c
   13ff4:	add	r0, r5, #26
   13ff8:	mov	r2, #4
   13ffc:	movt	r1, #2
   14000:	bl	12f10 <bcmp@plt>
   14004:	cmp	r0, #0
   14008:	beq	14018 <verify_monster@@Base+0x14c>
   1400c:	movw	r0, #17948	; 0x461c
   14010:	movt	r0, #2
   14014:	b	13f90 <verify_monster@@Base+0xc4>
   14018:	ldr	r0, [r6]
   1401c:	mov	r9, r6
   14020:	ldrh	r8, [r9, -r0]!
   14024:	cmp	r8, #12
   14028:	bcc	148d4 <verify_monster@@Base+0xa08>
   1402c:	ldrh	r0, [r9, #10]
   14030:	cmp	r0, #0
   14034:	beq	148d4 <verify_monster@@Base+0xa08>
   14038:	mov	r1, r6
   1403c:	ldr	r0, [r1, r0]!
   14040:	add	r0, r1, r0
   14044:	movw	r1, #9024	; 0x2340
   14048:	add	r5, r0, #4
   1404c:	movt	r1, #2
   14050:	mov	r0, r5
   14054:	bl	12e8c <strcmp@plt>
   14058:	cmp	r0, #0
   1405c:	beq	1406c <verify_monster@@Base+0x1a0>
   14060:	movw	r0, #17079	; 0x42b7
   14064:	movt	r0, #2
   14068:	b	13f90 <verify_monster@@Base+0xc4>
   1406c:	ldr	r0, [r5, #-4]
   14070:	cmp	r0, #9
   14074:	bne	14114 <verify_monster@@Base+0x248>
   14078:	cmp	r8, #18
   1407c:	bcc	14120 <verify_monster@@Base+0x254>
   14080:	ldrh	r0, [r9, #16]
   14084:	cmp	r0, #0
   14088:	beq	14120 <verify_monster@@Base+0x254>
   1408c:	ldrb	r0, [r6, r0]
   14090:	cmp	r0, #2
   14094:	bne	14120 <verify_monster@@Base+0x254>
   14098:	ldrh	r0, [r9, #14]
   1409c:	cmp	r0, #0
   140a0:	beq	1412c <verify_monster@@Base+0x260>
   140a4:	mov	r2, r6
   140a8:	ldr	r1, [r2, r0]!
   140ac:	ldr	r2, [r2, r1]
   140b0:	cmp	r2, #10
   140b4:	bne	1412c <verify_monster@@Base+0x260>
   140b8:	add	r1, r7, r1
   140bc:	add	r0, r1, r0
   140c0:	mov	r1, #0
   140c4:	add	r0, r0, r4
   140c8:	add	r0, r0, #4
   140cc:	ldrb	r2, [r0, r1]
   140d0:	cmp	r1, r2
   140d4:	bne	14138 <verify_monster@@Base+0x26c>
   140d8:	add	r1, r1, #1
   140dc:	cmp	r1, #10
   140e0:	bcc	140cc <verify_monster@@Base+0x200>
   140e4:	cmp	r8, #8
   140e8:	bcc	14268 <verify_monster@@Base+0x39c>
   140ec:	ldrh	r0, [r9, #6]
   140f0:	cmp	r0, #0
   140f4:	beq	14148 <verify_monster@@Base+0x27c>
   140f8:	add	r0, r6, r0
   140fc:	ldrh	r0, [r0]
   14100:	cmp	r0, #150	; 0x96
   14104:	bne	14274 <verify_monster@@Base+0x3a8>
   14108:	movw	r0, #17826	; 0x45a2
   1410c:	movt	r0, #2
   14110:	b	13f90 <verify_monster@@Base+0xc4>
   14114:	movw	r0, #17921	; 0x4601
   14118:	movt	r0, #2
   1411c:	b	13f90 <verify_monster@@Base+0xc4>
   14120:	movw	r0, #17891	; 0x45e3
   14124:	movt	r0, #2
   14128:	b	13f90 <verify_monster@@Base+0xc4>
   1412c:	movw	r0, #17863	; 0x45c7
   14130:	movt	r0, #2
   14134:	b	13f90 <verify_monster@@Base+0xc4>
   14138:	movw	r0, #9375	; 0x249f
   1413c:	movt	r0, #2
   14140:	bl	12e98 <printf@plt>
   14144:	b	13f94 <verify_monster@@Base+0xc8>
   14148:	cmp	r8, #10
   1414c:	bcc	14268 <verify_monster@@Base+0x39c>
   14150:	ldrh	r0, [r9, #8]
   14154:	cmp	r0, #0
   14158:	beq	14268 <verify_monster@@Base+0x39c>
   1415c:	ldrh	r0, [r9, #4]
   14160:	cmp	r0, #0
   14164:	beq	1428c <verify_monster@@Base+0x3c0>
   14168:	cmp	r8, #24
   1416c:	bcc	14280 <verify_monster@@Base+0x3b4>
   14170:	ldrh	r0, [r9, #22]
   14174:	cmp	r0, #0
   14178:	beq	14280 <verify_monster@@Base+0x3b4>
   1417c:	mov	r2, r6
   14180:	ldr	r1, [r2, r0]!
   14184:	ldr	r2, [r2, r1]
   14188:	cmp	r2, #5
   1418c:	bne	14280 <verify_monster@@Base+0x3b4>
   14190:	movw	ip, #21832	; 0x5548
   14194:	add	r1, r1, r7
   14198:	mov	r2, #0
   1419c:	add	r0, r1, r0
   141a0:	movt	ip, #2
   141a4:	mov	r1, #0
   141a8:	add	lr, r4, r0
   141ac:	add	r5, lr, r2
   141b0:	add	r3, ip, r2
   141b4:	ldrh	sl, [r5, #4]
   141b8:	ldrh	r0, [r3]
   141bc:	cmp	r0, sl
   141c0:	ldrbeq	r0, [r5, #6]
   141c4:	ldrbeq	r3, [r3, #2]
   141c8:	cmpeq	r3, r0
   141cc:	bne	14298 <verify_monster@@Base+0x3cc>
   141d0:	add	r2, r2, #4
   141d4:	add	r1, r1, #1
   141d8:	cmp	r2, #20
   141dc:	bne	141ac <verify_monster@@Base+0x2e0>
   141e0:	cmp	r8, #28
   141e4:	bcc	142a4 <verify_monster@@Base+0x3d8>
   141e8:	ldrh	r1, [r9, #26]
   141ec:	cmp	r1, #0
   141f0:	beq	142a4 <verify_monster@@Base+0x3d8>
   141f4:	mov	r0, r6
   141f8:	ldr	r1, [r0, r1]!
   141fc:	ldr	r1, [r0, r1]!
   14200:	cmp	r1, #8
   14204:	bne	142a4 <verify_monster@@Base+0x3d8>
   14208:	add	sl, r0, #4
   1420c:	str	sl, [sp]
   14210:	ldr	r0, [sl, #20]!
   14214:	ldr	r5, [sl, r0]!
   14218:	mov	r0, sl
   1421c:	ldrh	r1, [r0, -r5]!
   14220:	cmp	r1, #12
   14224:	bcc	148d4 <verify_monster@@Base+0xa08>
   14228:	ldrh	r0, [r0, #10]
   1422c:	cmp	r0, #0
   14230:	beq	148d4 <verify_monster@@Base+0xa08>
   14234:	mov	r1, sl
   14238:	ldr	r0, [r1, r0]!
   1423c:	add	r0, r1, r0
   14240:	movw	r1, #9545	; 0x2549
   14244:	movt	r1, #2
   14248:	add	r0, r0, #4
   1424c:	bl	12e8c <strcmp@plt>
   14250:	cmp	r0, #0
   14254:	beq	142b0 <verify_monster@@Base+0x3e4>
   14258:	movw	r0, #9529	; 0x2539
   1425c:	movt	r0, #2
   14260:	bl	12e98 <printf@plt>
   14264:	b	13f94 <verify_monster@@Base+0xc8>
   14268:	movw	r0, #17099	; 0x42cb
   1426c:	movt	r0, #2
   14270:	b	13f90 <verify_monster@@Base+0xc4>
   14274:	movw	r0, #17846	; 0x45b6
   14278:	movt	r0, #2
   1427c:	b	13f90 <verify_monster@@Base+0xc4>
   14280:	movw	r0, #17788	; 0x457c
   14284:	movt	r0, #2
   14288:	b	13f90 <verify_monster@@Base+0xc4>
   1428c:	movw	r0, #17131	; 0x42eb
   14290:	movt	r0, #2
   14294:	b	13f90 <verify_monster@@Base+0xc4>
   14298:	movw	r0, #9404	; 0x24bc
   1429c:	movt	r0, #2
   142a0:	b	14140 <verify_monster@@Base+0x274>
   142a4:	movw	r0, #17755	; 0x455b
   142a8:	movt	r0, #2
   142ac:	b	13f90 <verify_monster@@Base+0xc4>
   142b0:	ldr	r0, [sp]
   142b4:	ldr	r1, [r0, #4]!
   142b8:	add	r0, r0, r1
   142bc:	cmp	r0, sl
   142c0:	beq	142d0 <verify_monster@@Base+0x404>
   142c4:	movw	r0, #17702	; 0x4526
   142c8:	movt	r0, #2
   142cc:	b	13f90 <verify_monster@@Base+0xc4>
   142d0:	rsb	r2, r5, #0
   142d4:	mov	r1, r0
   142d8:	ldrh	r2, [r1, r2]!	; <UNPREDICTABLE>
   142dc:	cmp	r2, #12
   142e0:	bcc	148d4 <verify_monster@@Base+0xa08>
   142e4:	ldrh	r1, [r1, #10]
   142e8:	cmp	r1, #0
   142ec:	beq	148d4 <verify_monster@@Base+0xa08>
   142f0:	ldr	r1, [r0, r1]!
   142f4:	add	r0, r0, r1
   142f8:	movw	r1, #9545	; 0x2549
   142fc:	add	r5, r0, #4
   14300:	movt	r1, #2
   14304:	mov	r0, r5
   14308:	bl	12e8c <strcmp@plt>
   1430c:	cmp	r0, #0
   14310:	beq	14324 <verify_monster@@Base+0x458>
   14314:	movw	r0, #9553	; 0x2551
   14318:	movt	r0, #2
   1431c:	b	14534 <verify_monster@@Base+0x668>
   14320:	subgt	ip, ip, sp, asr #25
   14324:	ldr	r0, [sp]
   14328:	ldr	r1, [r0, #8]!
   1432c:	ldr	r2, [r0, r1]!
   14330:	mov	r1, r0
   14334:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14338:	cmp	r2, #12
   1433c:	bcc	148d4 <verify_monster@@Base+0xa08>
   14340:	ldrh	r1, [r1, #10]
   14344:	cmp	r1, #0
   14348:	beq	148d4 <verify_monster@@Base+0xa08>
   1434c:	ldr	r1, [r0, r1]!
   14350:	add	r0, r0, r1
   14354:	movw	r1, #19234	; 0x4b22
   14358:	add	r5, r0, #4
   1435c:	movt	r1, #2
   14360:	mov	r0, r5
   14364:	bl	12e8c <strcmp@plt>
   14368:	cmp	r0, #0
   1436c:	beq	1437c <verify_monster@@Base+0x4b0>
   14370:	movw	r0, #9587	; 0x2573
   14374:	movt	r0, #2
   14378:	b	14534 <verify_monster@@Base+0x668>
   1437c:	ldr	r0, [sp]
   14380:	ldr	r1, [r0]
   14384:	ldr	r2, [r0, r1]!
   14388:	mov	r1, r0
   1438c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14390:	cmp	r2, #12
   14394:	bcc	148d4 <verify_monster@@Base+0xa08>
   14398:	ldrh	r1, [r1, #10]
   1439c:	cmp	r1, #0
   143a0:	beq	148d4 <verify_monster@@Base+0xa08>
   143a4:	ldr	r1, [r0, r1]!
   143a8:	add	r0, r0, r1
   143ac:	movw	r1, #19194	; 0x4afa
   143b0:	add	r5, r0, #4
   143b4:	movt	r1, #2
   143b8:	mov	r0, r5
   143bc:	bl	12e8c <strcmp@plt>
   143c0:	cmp	r0, #0
   143c4:	beq	143d4 <verify_monster@@Base+0x508>
   143c8:	movw	r0, #9621	; 0x2595
   143cc:	movt	r0, #2
   143d0:	b	14534 <verify_monster@@Base+0x668>
   143d4:	ldr	r0, [sp]
   143d8:	ldr	r1, [r0, #12]!
   143dc:	ldr	r2, [r0, r1]!
   143e0:	mov	r1, r0
   143e4:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   143e8:	cmp	r2, #12
   143ec:	bcc	148d4 <verify_monster@@Base+0xa08>
   143f0:	ldrh	r1, [r1, #10]
   143f4:	cmp	r1, #0
   143f8:	beq	148d4 <verify_monster@@Base+0xa08>
   143fc:	ldr	r1, [r0, r1]!
   14400:	add	r0, r0, r1
   14404:	movw	r1, #9545	; 0x2549
   14408:	add	r5, r0, #4
   1440c:	movt	r1, #2
   14410:	mov	r0, r5
   14414:	bl	12e8c <strcmp@plt>
   14418:	cmp	r0, #0
   1441c:	beq	1442c <verify_monster@@Base+0x560>
   14420:	movw	r0, #9658	; 0x25ba
   14424:	movt	r0, #2
   14428:	b	14534 <verify_monster@@Base+0x668>
   1442c:	ldr	r0, [sp]
   14430:	ldr	r1, [r0, #16]!
   14434:	ldr	r2, [r0, r1]!
   14438:	mov	r1, r0
   1443c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14440:	cmp	r2, #12
   14444:	bcc	148d4 <verify_monster@@Base+0xa08>
   14448:	ldrh	r1, [r1, #10]
   1444c:	cmp	r1, #0
   14450:	beq	148d4 <verify_monster@@Base+0xa08>
   14454:	ldr	r1, [r0, r1]!
   14458:	add	r0, r0, r1
   1445c:	movw	r1, #19234	; 0x4b22
   14460:	add	r5, r0, #4
   14464:	movt	r1, #2
   14468:	mov	r0, r5
   1446c:	bl	12e8c <strcmp@plt>
   14470:	cmp	r0, #0
   14474:	beq	14484 <verify_monster@@Base+0x5b8>
   14478:	movw	r0, #9694	; 0x25de
   1447c:	movt	r0, #2
   14480:	b	14534 <verify_monster@@Base+0x668>
   14484:	ldr	r0, [sp]
   14488:	ldr	r1, [r0, #24]!
   1448c:	ldr	r2, [r0, r1]!
   14490:	mov	r1, r0
   14494:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14498:	cmp	r2, #12
   1449c:	bcc	148d4 <verify_monster@@Base+0xa08>
   144a0:	ldrh	r1, [r1, #10]
   144a4:	cmp	r1, #0
   144a8:	beq	148d4 <verify_monster@@Base+0xa08>
   144ac:	ldr	r1, [r0, r1]!
   144b0:	add	r0, r0, r1
   144b4:	movw	r1, #19194	; 0x4afa
   144b8:	add	r5, r0, #4
   144bc:	movt	r1, #2
   144c0:	mov	r0, r5
   144c4:	bl	12e8c <strcmp@plt>
   144c8:	cmp	r0, #0
   144cc:	beq	144dc <verify_monster@@Base+0x610>
   144d0:	movw	r0, #9728	; 0x2600
   144d4:	movt	r0, #2
   144d8:	b	14534 <verify_monster@@Base+0x668>
   144dc:	ldr	r2, [sp]
   144e0:	ldr	r0, [r2, #28]!
   144e4:	ldr	r1, [r2, r0]!
   144e8:	mov	r0, r2
   144ec:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   144f0:	cmp	r1, #12
   144f4:	bcc	148d4 <verify_monster@@Base+0xa08>
   144f8:	ldrh	r0, [r0, #10]
   144fc:	cmp	r0, #0
   14500:	beq	148d4 <verify_monster@@Base+0xa08>
   14504:	mov	r3, r2
   14508:	movw	r1, #19234	; 0x4b22
   1450c:	ldr	r0, [r3, r0]!
   14510:	movt	r1, #2
   14514:	add	r0, r3, r0
   14518:	add	r5, r0, #4
   1451c:	mov	r0, r5
   14520:	bl	12e8c <strcmp@plt>
   14524:	cmp	r0, #0
   14528:	beq	1453c <verify_monster@@Base+0x670>
   1452c:	movw	r0, #9765	; 0x2625
   14530:	movt	r0, #2
   14534:	mov	r1, r5
   14538:	b	14140 <verify_monster@@Base+0x274>
   1453c:	ldrh	r1, [r9, #24]
   14540:	cmp	r1, #0
   14544:	beq	1458c <verify_monster@@Base+0x6c0>
   14548:	mov	r0, r6
   1454c:	ldr	r1, [r0, r1]!
   14550:	ldr	r1, [r0, r1]!
   14554:	cmp	r1, #3
   14558:	bne	1458c <verify_monster@@Base+0x6c0>
   1455c:	add	r5, r0, #4
   14560:	movw	r1, #9802	; 0x264a
   14564:	ldr	r0, [r5]
   14568:	movt	r1, #2
   1456c:	add	r0, r5, r0
   14570:	add	r0, r0, #4
   14574:	bl	12e8c <strcmp@plt>
   14578:	cmp	r0, #0
   1457c:	beq	14598 <verify_monster@@Base+0x6cc>
   14580:	movw	r0, #17637	; 0x44e5
   14584:	movt	r0, #2
   14588:	b	13f90 <verify_monster@@Base+0xc4>
   1458c:	movw	r0, #17660	; 0x44fc
   14590:	movt	r0, #2
   14594:	b	13f90 <verify_monster@@Base+0xc4>
   14598:	mov	r0, r5
   1459c:	ldr	r1, [r0, #4]!
   145a0:	ldr	r1, [r0, r1]!
   145a4:	cmp	r1, #2
   145a8:	bne	145d4 <verify_monster@@Base+0x708>
   145ac:	movw	r1, #21952	; 0x55c0
   145b0:	add	r0, r0, #4
   145b4:	mov	r2, #2
   145b8:	movt	r1, #2
   145bc:	bl	12f10 <bcmp@plt>
   145c0:	cmp	r0, #0
   145c4:	beq	145e0 <verify_monster@@Base+0x714>
   145c8:	movw	r0, #17605	; 0x44c5
   145cc:	movt	r0, #2
   145d0:	b	13f90 <verify_monster@@Base+0xc4>
   145d4:	movw	r0, #9808	; 0x2650
   145d8:	movt	r0, #2
   145dc:	b	14260 <verify_monster@@Base+0x394>
   145e0:	ldr	r0, [r5, #8]!
   145e4:	movw	r1, #9834	; 0x266a
   145e8:	movt	r1, #2
   145ec:	add	r0, r5, r0
   145f0:	add	r0, r0, #4
   145f4:	bl	12e8c <strcmp@plt>
   145f8:	cmp	r0, #0
   145fc:	beq	1460c <verify_monster@@Base+0x740>
   14600:	movw	r0, #17582	; 0x44ae
   14604:	movt	r0, #2
   14608:	b	13f90 <verify_monster@@Base+0xc4>
   1460c:	cmp	r8, #54	; 0x36
   14610:	bcc	146f4 <verify_monster@@Base+0x828>
   14614:	ldrh	r0, [r9, #52]	; 0x34
   14618:	cmp	r0, #0
   1461c:	beq	146f4 <verify_monster@@Base+0x828>
   14620:	mov	r2, r6
   14624:	ldr	r1, [r2, r0]!
   14628:	ldr	r2, [r2, r1]
   1462c:	cmp	r2, #4
   14630:	bne	14700 <verify_monster@@Base+0x834>
   14634:	add	r1, r7, r1
   14638:	movw	r2, #22020	; 0x5604
   1463c:	add	r0, r1, r0
   14640:	movt	r2, #2
   14644:	mov	r1, #0
   14648:	add	r0, r0, r4
   1464c:	add	r0, r0, #4
   14650:	ldrb	r3, [r0, r1]
   14654:	ldr	r7, [r2, r1, lsl #2]
   14658:	cmp	r7, r3
   1465c:	bne	1470c <verify_monster@@Base+0x840>
   14660:	add	r1, r1, #1
   14664:	cmp	r1, #4
   14668:	bne	14650 <verify_monster@@Base+0x784>
   1466c:	cmp	r8, #20
   14670:	bcc	14718 <verify_monster@@Base+0x84c>
   14674:	ldrh	r0, [r9, #18]
   14678:	cmp	r0, #0
   1467c:	beq	14718 <verify_monster@@Base+0x84c>
   14680:	ldrb	r0, [r6, r0]
   14684:	cmp	r0, #1
   14688:	bne	14718 <verify_monster@@Base+0x84c>
   1468c:	cmp	r8, #22
   14690:	bcc	148f4 <verify_monster@@Base+0xa28>
   14694:	ldrh	r1, [r9, #20]
   14698:	cmp	r1, #0
   1469c:	beq	148f4 <verify_monster@@Base+0xa28>
   146a0:	mov	r0, r6
   146a4:	ldr	r1, [r0, r1]!
   146a8:	ldr	r2, [r0, r1]!
   146ac:	mov	r1, r0
   146b0:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   146b4:	cmp	r2, #11
   146b8:	bls	148d4 <verify_monster@@Base+0xa08>
   146bc:	ldrh	r1, [r1, #10]
   146c0:	cmp	r1, #0
   146c4:	beq	148d4 <verify_monster@@Base+0xa08>
   146c8:	ldr	r1, [r0, r1]!
   146cc:	add	r0, r0, r1
   146d0:	movw	r1, #9545	; 0x2549
   146d4:	movt	r1, #2
   146d8:	add	r0, r0, #4
   146dc:	bl	12e8c <strcmp@plt>
   146e0:	cmp	r0, #0
   146e4:	beq	14724 <verify_monster@@Base+0x858>
   146e8:	movw	r0, #17478	; 0x4446
   146ec:	movt	r0, #2
   146f0:	b	13f90 <verify_monster@@Base+0xc4>
   146f4:	movw	r0, #17158	; 0x4306
   146f8:	movt	r0, #2
   146fc:	b	13f90 <verify_monster@@Base+0xc4>
   14700:	movw	r0, #17551	; 0x448f
   14704:	movt	r0, #2
   14708:	b	13f90 <verify_monster@@Base+0xc4>
   1470c:	movw	r0, #9841	; 0x2671
   14710:	movt	r0, #2
   14714:	b	14140 <verify_monster@@Base+0x274>
   14718:	movw	r0, #17510	; 0x4466
   1471c:	movt	r0, #2
   14720:	b	13f90 <verify_monster@@Base+0xc4>
   14724:	cmp	r8, #30
   14728:	bcc	148f4 <verify_monster@@Base+0xa28>
   1472c:	ldrh	r0, [r9, #28]
   14730:	cmp	r0, #0
   14734:	beq	148f4 <verify_monster@@Base+0xa28>
   14738:	mov	r4, r6
   1473c:	ldr	r0, [r4, r0]!
   14740:	ldr	r0, [r4, r0]!
   14744:	mov	r5, r4
   14748:	ldrh	r7, [r5, -r0]!
   1474c:	cmp	r7, #11
   14750:	bls	148d4 <verify_monster@@Base+0xa08>
   14754:	ldrh	r0, [r5, #10]
   14758:	cmp	r0, #0
   1475c:	beq	148d4 <verify_monster@@Base+0xa08>
   14760:	mov	r1, r4
   14764:	ldr	r0, [r1, r0]!
   14768:	add	r0, r1, r0
   1476c:	movw	r1, #17468	; 0x443c
   14770:	movt	r1, #2
   14774:	add	r0, r0, #4
   14778:	bl	12e8c <strcmp@plt>
   1477c:	cmp	r0, #0
   14780:	beq	14790 <verify_monster@@Base+0x8c4>
   14784:	movw	r0, #17449	; 0x4429
   14788:	movt	r0, #2
   1478c:	b	13f90 <verify_monster@@Base+0xc4>
   14790:	cmp	r7, #20
   14794:	bcc	147bc <verify_monster@@Base+0x8f0>
   14798:	ldrh	r0, [r5, #18]
   1479c:	cmp	r0, #0
   147a0:	beq	147bc <verify_monster@@Base+0x8f0>
   147a4:	ldrb	r0, [r4, r0]
   147a8:	cmp	r0, #0
   147ac:	beq	147bc <verify_monster@@Base+0x8f0>
   147b0:	movw	r0, #17413	; 0x4405
   147b4:	movt	r0, #2
   147b8:	b	13f90 <verify_monster@@Base+0xc4>
   147bc:	ldrh	r0, [r9, #20]
   147c0:	cmp	r0, #0
   147c4:	beq	147f4 <verify_monster@@Base+0x928>
   147c8:	mov	r1, r6
   147cc:	ldr	r2, [r1, r0]!
   147d0:	add	r1, r1, r2
   147d4:	mov	r2, r6
   147d8:	ldr	r0, [r2, r0]!
   147dc:	add	r0, r2, r0
   147e0:	cmp	r0, r1
   147e4:	beq	147f4 <verify_monster@@Base+0x928>
   147e8:	movw	r0, #17381	; 0x43e5
   147ec:	movt	r0, #2
   147f0:	b	13f90 <verify_monster@@Base+0xc4>
   147f4:	cmp	r7, #28
   147f8:	bcc	14814 <verify_monster@@Base+0x948>
   147fc:	ldrh	r0, [r5, #26]
   14800:	cmp	r0, #0
   14804:	ldrne	r0, [r4, r0]!
   14808:	ldrne	r0, [r4, r0]!
   1480c:	cmpne	r0, #0
   14810:	bne	14834 <verify_monster@@Base+0x968>
   14814:	movw	r0, #13610	; 0x352a
   14818:	movw	r1, #12241	; 0x2fd1
   1481c:	movw	r3, #13937	; 0x3671
   14820:	movw	r2, #693	; 0x2b5
   14824:	movt	r0, #2
   14828:	movt	r1, #2
   1482c:	movt	r3, #2
   14830:	bl	12f88 <__assert_fail@plt>
   14834:	add	r1, r4, #4
   14838:	add	r0, r1, r0, lsl #2
   1483c:	ldr	r1, [r0, #-4]!
   14840:	ldr	r2, [r0, r1]!
   14844:	mov	r1, r0
   14848:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1484c:	cmp	r2, #20
   14850:	bcc	14900 <verify_monster@@Base+0xa34>
   14854:	ldrh	r3, [r1, #18]
   14858:	cmp	r3, #0
   1485c:	beq	14900 <verify_monster@@Base+0xa34>
   14860:	ldrb	r3, [r0, r3]
   14864:	cmp	r3, #1
   14868:	bne	14900 <verify_monster@@Base+0xa34>
   1486c:	cmp	r2, #22
   14870:	bcc	148f4 <verify_monster@@Base+0xa28>
   14874:	ldrh	r1, [r1, #20]
   14878:	cmp	r1, #0
   1487c:	ldrne	r1, [r0, r1]!
   14880:	addsne	r0, r0, r1
   14884:	beq	148f4 <verify_monster@@Base+0xa28>
   14888:	ldr	r2, [r0]
   1488c:	mov	r1, r0
   14890:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14894:	cmp	r2, #12
   14898:	bcc	148d4 <verify_monster@@Base+0xa08>
   1489c:	ldrh	r1, [r1, #10]
   148a0:	cmp	r1, #0
   148a4:	beq	148d4 <verify_monster@@Base+0xa08>
   148a8:	ldr	r1, [r0, r1]!
   148ac:	add	r0, r0, r1
   148b0:	movw	r1, #9545	; 0x2549
   148b4:	movt	r1, #2
   148b8:	add	r0, r0, #4
   148bc:	bl	12e8c <strcmp@plt>
   148c0:	cmp	r0, #0
   148c4:	beq	1490c <verify_monster@@Base+0xa40>
   148c8:	movw	r0, #17258	; 0x436a
   148cc:	movt	r0, #2
   148d0:	b	13f90 <verify_monster@@Base+0xc4>
   148d4:	movw	r0, #13488	; 0x34b0
   148d8:	movt	r0, #2
   148dc:	movw	r1, #12241	; 0x2fd1
   148e0:	movw	r3, #13407	; 0x345f
   148e4:	movw	r2, #699	; 0x2bb
   148e8:	movt	r1, #2
   148ec:	movt	r3, #2
   148f0:	bl	12f88 <__assert_fail@plt>
   148f4:	movw	r0, #12203	; 0x2fab
   148f8:	movt	r0, #2
   148fc:	b	148dc <verify_monster@@Base+0xa10>
   14900:	movw	r0, #17315	; 0x43a3
   14904:	movt	r0, #2
   14908:	b	13f90 <verify_monster@@Base+0xc4>
   1490c:	cmp	r8, #36	; 0x24
   14910:	bcc	1492c <verify_monster@@Base+0xa60>
   14914:	ldrh	r0, [r9, #34]	; 0x22
   14918:	cmp	r0, #0
   1491c:	beq	1492c <verify_monster@@Base+0xa60>
   14920:	ldrb	r0, [r6, r0]
   14924:	cmp	r0, #0
   14928:	beq	14938 <verify_monster@@Base+0xa6c>
   1492c:	movw	r0, #17238	; 0x4356
   14930:	movt	r0, #2
   14934:	b	13f90 <verify_monster@@Base+0xc4>
   14938:	ldrh	r0, [r9, #32]
   1493c:	cmp	r0, #0
   14940:	beq	1499c <verify_monster@@Base+0xad0>
   14944:	ldr	r0, [r6, r0]!
   14948:	ldr	r0, [r6, r0]!
   1494c:	ldrh	r1, [r6, -r0]!
   14950:	mov	r0, #0
   14954:	cmp	r1, #6
   14958:	bcc	13f98 <verify_monster@@Base+0xcc>
   1495c:	ldrh	r2, [r6, #4]
   14960:	cmp	r2, #0
   14964:	bne	14990 <verify_monster@@Base+0xac4>
   14968:	cmp	r1, #8
   1496c:	bcc	13f98 <verify_monster@@Base+0xcc>
   14970:	ldrh	r2, [r6, #6]
   14974:	cmp	r2, #0
   14978:	bne	14990 <verify_monster@@Base+0xac4>
   1497c:	cmp	r1, #10
   14980:	bcc	13f98 <verify_monster@@Base+0xcc>
   14984:	ldrh	r1, [r6, #8]
   14988:	cmp	r1, #0
   1498c:	beq	13f98 <verify_monster@@Base+0xcc>
   14990:	movw	r0, #17214	; 0x433e
   14994:	movt	r0, #2
   14998:	b	13f90 <verify_monster@@Base+0xc4>
   1499c:	movw	r0, #17184	; 0x4320
   149a0:	movt	r0, #2
   149a4:	b	13f90 <verify_monster@@Base+0xc4>

000149a8 <gen_monster@@Base>:
   149a8:	push	{r4, r5, r6, sl, fp, lr}
   149ac:	add	fp, sp, #16
   149b0:	sub	sp, sp, #48	; 0x30
   149b4:	mov	r4, r0
   149b8:	movw	r0, #21976	; 0x55d8
   149bc:	mov	r5, r1
   149c0:	movt	r0, #2
   149c4:	vldr	d16, [r0]
   149c8:	movw	r0, #2312	; 0x908
   149cc:	strh	r0, [sp, #40]	; 0x28
   149d0:	movw	r0, #256	; 0x100
   149d4:	movt	r0, #1
   149d8:	str	r0, [sp, #8]
   149dc:	mov	r0, r4
   149e0:	vstr	d16, [sp, #32]
   149e4:	bl	1d0ac <flatcc_builder_reset@@Base>
   149e8:	movw	r1, #8956	; 0x22fc
   149ec:	cmp	r5, #0
   149f0:	mov	r0, r4
   149f4:	mov	r2, #0
   149f8:	movt	r1, #2
   149fc:	moveq	r3, #0
   14a00:	movne	r3, #2
   14a04:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   14a08:	cmp	r0, #0
   14a0c:	bne	14a1c <gen_monster@@Base+0x74>
   14a10:	mov	r0, r4
   14a14:	mov	r1, #36	; 0x24
   14a18:	bl	1e940 <flatcc_builder_start_table@@Base>
   14a1c:	mov	r0, r4
   14a20:	mov	r1, #2
   14a24:	mov	r2, #2
   14a28:	mov	r3, #2
   14a2c:	bl	1fb8c <flatcc_builder_table_add@@Base>
   14a30:	cmp	r0, #0
   14a34:	mov	r2, #32
   14a38:	mov	r3, #16
   14a3c:	movne	r1, #80	; 0x50
   14a40:	strhne	r1, [r0]
   14a44:	mov	r0, r4
   14a48:	mov	r1, #0
   14a4c:	bl	1fb8c <flatcc_builder_table_add@@Base>
   14a50:	movw	r1, #52429	; 0xcccd
   14a54:	mov	r3, #1065353216	; 0x3f800000
   14a58:	mov	r2, #1073741824	; 0x40000000
   14a5c:	movt	r1, #49228	; 0xc04c
   14a60:	str	r3, [r0]
   14a64:	str	r2, [r0, #4]
   14a68:	str	r1, [r0, #8]
   14a6c:	movw	r1, #9024	; 0x2340
   14a70:	mov	r0, r4
   14a74:	movt	r1, #2
   14a78:	bl	20504 <flatcc_builder_create_string_str@@Base>
   14a7c:	cmp	r0, #0
   14a80:	beq	14a9c <gen_monster@@Base+0xf4>
   14a84:	mov	r5, r0
   14a88:	mov	r0, r4
   14a8c:	mov	r1, #3
   14a90:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   14a94:	cmp	r0, #0
   14a98:	strne	r5, [r0]
   14a9c:	mov	r0, r4
   14aa0:	mov	r1, #6
   14aa4:	mov	r2, #1
   14aa8:	mov	r3, #1
   14aac:	mov	r5, #1
   14ab0:	bl	1fb8c <flatcc_builder_table_add@@Base>
   14ab4:	cmp	r0, #0
   14ab8:	mov	r2, #10
   14abc:	mov	r3, #1
   14ac0:	movne	r1, #2
   14ac4:	strbne	r1, [r0]
   14ac8:	mvn	r0, #0
   14acc:	add	r1, sp, #32
   14ad0:	str	r5, [sp]
   14ad4:	str	r0, [sp, #4]
   14ad8:	mov	r0, r4
   14adc:	bl	1f458 <flatcc_builder_create_vector@@Base>
   14ae0:	cmp	r0, #0
   14ae4:	beq	14b00 <gen_monster@@Base+0x158>
   14ae8:	mov	r5, r0
   14aec:	mov	r0, r4
   14af0:	mov	r1, #5
   14af4:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   14af8:	cmp	r0, #0
   14afc:	strne	r5, [r0]
   14b00:	mov	r0, r4
   14b04:	mov	r1, #4
   14b08:	mov	r2, #2
   14b0c:	mvn	r3, #-1073741824	; 0xc0000000
   14b10:	bl	1e574 <flatcc_builder_start_vector@@Base>
   14b14:	mov	r0, r4
   14b18:	mov	r1, #1
   14b1c:	bl	1dd7c <flatcc_builder_extend_vector@@Base>
   14b20:	mov	r1, #32
   14b24:	strb	r1, [r0, #2]
   14b28:	mov	r1, #16
   14b2c:	strh	r1, [r0]
   14b30:	mov	r0, r4
   14b34:	mov	r1, #2
   14b38:	bl	1dd7c <flatcc_builder_extend_vector@@Base>
   14b3c:	mov	r1, #96	; 0x60
   14b40:	strb	r1, [r0, #6]
   14b44:	mov	r1, #80	; 0x50
   14b48:	strh	r1, [r0, #4]
   14b4c:	mov	r1, #64	; 0x40
   14b50:	strb	r1, [r0, #2]
   14b54:	mov	r1, #48	; 0x30
   14b58:	strh	r1, [r0]
   14b5c:	mov	r0, r4
   14b60:	mov	r1, #1
   14b64:	bl	1dd7c <flatcc_builder_extend_vector@@Base>
   14b68:	cmp	r0, #0
   14b6c:	movne	r1, #128	; 0x80
   14b70:	strbne	r1, [r0, #2]
   14b74:	movne	r1, #112	; 0x70
   14b78:	strhne	r1, [r0]
   14b7c:	mov	r0, r4
   14b80:	mov	r1, #1
   14b84:	bl	1dd7c <flatcc_builder_extend_vector@@Base>
   14b88:	movw	r5, #400	; 0x190
   14b8c:	cmp	r0, #0
   14b90:	mov	r1, #1
   14b94:	movt	r5, #145	; 0x91
   14b98:	strne	r5, [r0]
   14b9c:	mov	r0, r4
   14ba0:	bl	1dd7c <flatcc_builder_extend_vector@@Base>
   14ba4:	cmp	r0, #0
   14ba8:	mov	r1, #1
   14bac:	strne	r5, [r0]
   14bb0:	mov	r0, r4
   14bb4:	bl	1dd7c <flatcc_builder_extend_vector@@Base>
   14bb8:	cmp	r0, #0
   14bbc:	strne	r5, [r0]
   14bc0:	mov	r0, r4
   14bc4:	bl	1f690 <flatcc_builder_vector_count@@Base>
   14bc8:	cmp	r0, #7
   14bcc:	bne	152d0 <gen_monster@@Base+0x928>
   14bd0:	mov	r0, r4
   14bd4:	mov	r1, #2
   14bd8:	bl	1e3c0 <flatcc_builder_truncate_vector@@Base>
   14bdc:	mov	r0, r4
   14be0:	bl	1f690 <flatcc_builder_vector_count@@Base>
   14be4:	cmp	r0, #5
   14be8:	bne	152e8 <gen_monster@@Base+0x940>
   14bec:	mov	r0, r4
   14bf0:	bl	1f69c <flatcc_builder_vector_edit@@Base>
   14bf4:	ldrh	r1, [r0, #16]
   14bf8:	add	r1, r1, #1
   14bfc:	strh	r1, [r0, #16]
   14c00:	mov	r0, r4
   14c04:	bl	1f5a0 <flatcc_builder_end_vector@@Base>
   14c08:	cmp	r0, #0
   14c0c:	beq	14c28 <gen_monster@@Base+0x280>
   14c10:	mov	r5, r0
   14c14:	mov	r0, r4
   14c18:	mov	r1, #9
   14c1c:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   14c20:	cmp	r0, #0
   14c24:	strne	r5, [r0]
   14c28:	mov	r0, r4
   14c2c:	mov	r1, #36	; 0x24
   14c30:	bl	1e940 <flatcc_builder_start_table@@Base>
   14c34:	movw	r1, #9545	; 0x2549
   14c38:	mov	r0, r4
   14c3c:	mov	r2, #7
   14c40:	movt	r1, #2
   14c44:	bl	20404 <flatcc_builder_create_string@@Base>
   14c48:	cmp	r0, #0
   14c4c:	beq	14c68 <gen_monster@@Base+0x2c0>
   14c50:	mov	r5, r0
   14c54:	mov	r0, r4
   14c58:	mov	r1, #3
   14c5c:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   14c60:	cmp	r0, #0
   14c64:	strne	r5, [r0]
   14c68:	movw	r1, #21988	; 0x55e4
   14c6c:	mov	r0, r4
   14c70:	mov	r2, #1
   14c74:	movt	r1, #2
   14c78:	bl	1f220 <flatcc_builder_check_required@@Base>
   14c7c:	cmp	r0, #0
   14c80:	beq	152b0 <gen_monster@@Base+0x908>
   14c84:	mov	r0, r4
   14c88:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   14c8c:	mov	r5, r0
   14c90:	mov	r0, r4
   14c94:	bl	1e600 <flatcc_builder_start_offset_vector@@Base>
   14c98:	mov	r0, r4
   14c9c:	mov	r1, #2
   14ca0:	bl	1dfd4 <flatcc_builder_extend_offset_vector@@Base>
   14ca4:	str	r5, [r0]
   14ca8:	str	r5, [r0, #4]
   14cac:	mov	r0, r4
   14cb0:	mov	r1, #36	; 0x24
   14cb4:	bl	1e940 <flatcc_builder_start_table@@Base>
   14cb8:	movw	r1, #19234	; 0x4b22
   14cbc:	mov	r0, r4
   14cc0:	mov	r2, #30
   14cc4:	movt	r1, #2
   14cc8:	bl	20530 <flatcc_builder_create_string_strn@@Base>
   14ccc:	cmp	r0, #0
   14cd0:	beq	14cec <gen_monster@@Base+0x344>
   14cd4:	mov	r6, r0
   14cd8:	mov	r0, r4
   14cdc:	mov	r1, #3
   14ce0:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   14ce4:	cmp	r0, #0
   14ce8:	strne	r6, [r0]
   14cec:	movw	r1, #21988	; 0x55e4
   14cf0:	mov	r0, r4
   14cf4:	mov	r2, #1
   14cf8:	movt	r1, #2
   14cfc:	bl	1f220 <flatcc_builder_check_required@@Base>
   14d00:	cmp	r0, #0
   14d04:	beq	152b0 <gen_monster@@Base+0x908>
   14d08:	mov	r0, r4
   14d0c:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   14d10:	mov	r1, r0
   14d14:	mov	r0, r4
   14d18:	bl	1e05c <flatcc_builder_offset_vector_push@@Base>
   14d1c:	ldr	r6, [r0]
   14d20:	mov	r0, r4
   14d24:	mov	r1, #3
   14d28:	bl	1dfd4 <flatcc_builder_extend_offset_vector@@Base>
   14d2c:	stm	r0, {r5, r6}
   14d30:	mov	r0, r4
   14d34:	mov	r1, #1
   14d38:	bl	1e454 <flatcc_builder_truncate_offset_vector@@Base>
   14d3c:	mov	r0, r4
   14d40:	bl	1f96c <flatcc_builder_offset_vector_count@@Base>
   14d44:	cmp	r0, #5
   14d48:	bne	15300 <gen_monster@@Base+0x958>
   14d4c:	mov	r0, r4
   14d50:	mov	r1, #36	; 0x24
   14d54:	bl	1e940 <flatcc_builder_start_table@@Base>
   14d58:	movw	r1, #10042	; 0x273a
   14d5c:	mov	r0, r4
   14d60:	mov	r2, #8
   14d64:	movt	r1, #2
   14d68:	bl	20530 <flatcc_builder_create_string_strn@@Base>
   14d6c:	cmp	r0, #0
   14d70:	beq	14d8c <gen_monster@@Base+0x3e4>
   14d74:	mov	r6, r0
   14d78:	mov	r0, r4
   14d7c:	mov	r1, #3
   14d80:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   14d84:	cmp	r0, #0
   14d88:	strne	r6, [r0]
   14d8c:	movw	r1, #21988	; 0x55e4
   14d90:	mov	r0, r4
   14d94:	mov	r2, #1
   14d98:	movt	r1, #2
   14d9c:	bl	1f220 <flatcc_builder_check_required@@Base>
   14da0:	cmp	r0, #0
   14da4:	beq	152b0 <gen_monster@@Base+0x908>
   14da8:	mov	r0, r4
   14dac:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   14db0:	mov	r1, r0
   14db4:	mov	r0, r4
   14db8:	bl	1e05c <flatcc_builder_offset_vector_push@@Base>
   14dbc:	ldr	r0, [r0]
   14dc0:	str	r0, [sp, #24]
   14dc4:	mov	r0, r4
   14dc8:	bl	1f96c <flatcc_builder_offset_vector_count@@Base>
   14dcc:	cmp	r0, #6
   14dd0:	bne	15318 <gen_monster@@Base+0x970>
   14dd4:	mov	r0, r4
   14dd8:	bl	1f964 <flatcc_builder_offset_vector_edit@@Base>
   14ddc:	ldr	r1, [r0, #8]
   14de0:	ldr	r2, [r0, #20]
   14de4:	str	r1, [sp, #28]
   14de8:	str	r2, [r0]
   14dec:	str	r5, [r0, #20]
   14df0:	add	r1, sp, #24
   14df4:	mov	r0, r4
   14df8:	mov	r2, #2
   14dfc:	bl	1e0fc <flatcc_builder_append_offset_vector@@Base>
   14e00:	mov	r0, r4
   14e04:	bl	1e6cc <flatcc_builder_end_offset_vector@@Base>
   14e08:	cmp	r0, #0
   14e0c:	beq	14e28 <gen_monster@@Base+0x480>
   14e10:	mov	r6, r0
   14e14:	mov	r0, r4
   14e18:	mov	r1, #11
   14e1c:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   14e20:	cmp	r0, #0
   14e24:	strne	r6, [r0]
   14e28:	movw	r1, #9802	; 0x264a
   14e2c:	mov	r0, r4
   14e30:	movt	r1, #2
   14e34:	bl	20504 <flatcc_builder_create_string_str@@Base>
   14e38:	movw	r1, #21952	; 0x55c0
   14e3c:	str	r0, [sp, #12]
   14e40:	mov	r0, r4
   14e44:	mov	r2, #2
   14e48:	movt	r1, #2
   14e4c:	bl	20404 <flatcc_builder_create_string@@Base>
   14e50:	movw	r1, #9834	; 0x266a
   14e54:	str	r0, [sp, #16]
   14e58:	mov	r0, r4
   14e5c:	movt	r1, #2
   14e60:	bl	20504 <flatcc_builder_create_string_str@@Base>
   14e64:	str	r0, [sp, #20]
   14e68:	add	r1, sp, #12
   14e6c:	mov	r0, r4
   14e70:	mov	r2, #3
   14e74:	bl	1e678 <flatcc_builder_create_offset_vector@@Base>
   14e78:	cmp	r0, #0
   14e7c:	beq	14e98 <gen_monster@@Base+0x4f0>
   14e80:	mov	r6, r0
   14e84:	mov	r0, r4
   14e88:	mov	r1, #10
   14e8c:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   14e90:	cmp	r0, #0
   14e94:	strne	r6, [r0]
   14e98:	mov	r0, r4
   14e9c:	mov	r1, #1
   14ea0:	mov	r2, #1
   14ea4:	mvn	r3, #0
   14ea8:	bl	1e574 <flatcc_builder_start_vector@@Base>
   14eac:	add	r6, sp, #8
   14eb0:	mov	r0, r4
   14eb4:	mov	r2, #1
   14eb8:	mov	r1, r6
   14ebc:	bl	1deec <flatcc_builder_append_vector@@Base>
   14ec0:	orr	r1, r6, #1
   14ec4:	mov	r0, r4
   14ec8:	mov	r2, #3
   14ecc:	bl	1deec <flatcc_builder_append_vector@@Base>
   14ed0:	mov	r0, r4
   14ed4:	bl	1f5a0 <flatcc_builder_end_vector@@Base>
   14ed8:	cmp	r0, #0
   14edc:	beq	14ef8 <gen_monster@@Base+0x550>
   14ee0:	mov	r6, r0
   14ee4:	mov	r0, r4
   14ee8:	mov	r1, #24
   14eec:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   14ef0:	cmp	r0, #0
   14ef4:	strne	r6, [r0]
   14ef8:	cmp	r5, #0
   14efc:	beq	14f3c <gen_monster@@Base+0x594>
   14f00:	mov	r0, r4
   14f04:	mov	r1, #7
   14f08:	mov	r2, #1
   14f0c:	mov	r3, #1
   14f10:	bl	1fb8c <flatcc_builder_table_add@@Base>
   14f14:	cmp	r0, #0
   14f18:	beq	14f3c <gen_monster@@Base+0x594>
   14f1c:	mov	r6, r0
   14f20:	mov	r0, r4
   14f24:	mov	r1, #8
   14f28:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   14f2c:	cmp	r0, #0
   14f30:	movne	r1, #1
   14f34:	strbne	r1, [r6]
   14f38:	strne	r5, [r0]
   14f3c:	mov	r0, r4
   14f40:	mov	r1, #36	; 0x24
   14f44:	bl	1e940 <flatcc_builder_start_table@@Base>
   14f48:	movw	r1, #17468	; 0x443c
   14f4c:	mov	r0, r4
   14f50:	movt	r1, #2
   14f54:	bl	20504 <flatcc_builder_create_string_str@@Base>
   14f58:	cmp	r0, #0
   14f5c:	beq	14f78 <gen_monster@@Base+0x5d0>
   14f60:	mov	r6, r0
   14f64:	mov	r0, r4
   14f68:	mov	r1, #3
   14f6c:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   14f70:	cmp	r0, #0
   14f74:	strne	r6, [r0]
   14f78:	mov	r0, r4
   14f7c:	bl	1e600 <flatcc_builder_start_offset_vector@@Base>
   14f80:	mov	r0, r4
   14f84:	mov	r1, #36	; 0x24
   14f88:	bl	1e940 <flatcc_builder_start_table@@Base>
   14f8c:	cmp	r5, #0
   14f90:	beq	14fd0 <gen_monster@@Base+0x628>
   14f94:	mov	r0, r4
   14f98:	mov	r1, #7
   14f9c:	mov	r2, #1
   14fa0:	mov	r3, #1
   14fa4:	bl	1fb8c <flatcc_builder_table_add@@Base>
   14fa8:	cmp	r0, #0
   14fac:	beq	14fd0 <gen_monster@@Base+0x628>
   14fb0:	mov	r6, r0
   14fb4:	mov	r0, r4
   14fb8:	mov	r1, #8
   14fbc:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   14fc0:	cmp	r0, #0
   14fc4:	movne	r1, #1
   14fc8:	strbne	r1, [r6]
   14fcc:	strne	r5, [r0]
   14fd0:	movw	r1, #10121	; 0x2789
   14fd4:	mov	r0, r4
   14fd8:	movt	r1, #2
   14fdc:	bl	20504 <flatcc_builder_create_string_str@@Base>
   14fe0:	cmp	r0, #0
   14fe4:	beq	15000 <gen_monster@@Base+0x658>
   14fe8:	mov	r6, r0
   14fec:	mov	r0, r4
   14ff0:	mov	r1, #3
   14ff4:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   14ff8:	cmp	r0, #0
   14ffc:	strne	r6, [r0]
   15000:	movw	r1, #21988	; 0x55e4
   15004:	mov	r0, r4
   15008:	mov	r2, #1
   1500c:	movt	r1, #2
   15010:	bl	1f220 <flatcc_builder_check_required@@Base>
   15014:	cmp	r0, #0
   15018:	beq	152b0 <gen_monster@@Base+0x908>
   1501c:	mov	r0, r4
   15020:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   15024:	cmp	r0, #0
   15028:	beq	15038 <gen_monster@@Base+0x690>
   1502c:	mov	r1, r0
   15030:	mov	r0, r4
   15034:	bl	1e05c <flatcc_builder_offset_vector_push@@Base>
   15038:	mov	r0, r4
   1503c:	mov	r1, #36	; 0x24
   15040:	bl	1e940 <flatcc_builder_start_table@@Base>
   15044:	cmp	r5, #0
   15048:	beq	15088 <gen_monster@@Base+0x6e0>
   1504c:	mov	r0, r4
   15050:	mov	r1, #7
   15054:	mov	r2, #1
   15058:	mov	r3, #1
   1505c:	bl	1fb8c <flatcc_builder_table_add@@Base>
   15060:	cmp	r0, #0
   15064:	beq	15088 <gen_monster@@Base+0x6e0>
   15068:	mov	r6, r0
   1506c:	mov	r0, r4
   15070:	mov	r1, #8
   15074:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   15078:	cmp	r0, #0
   1507c:	movne	r1, #1
   15080:	strbne	r1, [r6]
   15084:	strne	r5, [r0]
   15088:	movw	r1, #10121	; 0x2789
   1508c:	mov	r0, r4
   15090:	movt	r1, #2
   15094:	bl	20504 <flatcc_builder_create_string_str@@Base>
   15098:	cmp	r0, #0
   1509c:	beq	150b8 <gen_monster@@Base+0x710>
   150a0:	mov	r6, r0
   150a4:	mov	r0, r4
   150a8:	mov	r1, #3
   150ac:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   150b0:	cmp	r0, #0
   150b4:	strne	r6, [r0]
   150b8:	movw	r1, #21988	; 0x55e4
   150bc:	mov	r0, r4
   150c0:	mov	r2, #1
   150c4:	movt	r1, #2
   150c8:	bl	1f220 <flatcc_builder_check_required@@Base>
   150cc:	cmp	r0, #0
   150d0:	beq	152b0 <gen_monster@@Base+0x908>
   150d4:	mov	r0, r4
   150d8:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   150dc:	cmp	r0, #0
   150e0:	beq	150f0 <gen_monster@@Base+0x748>
   150e4:	mov	r1, r0
   150e8:	mov	r0, r4
   150ec:	bl	1e05c <flatcc_builder_offset_vector_push@@Base>
   150f0:	mov	r0, r4
   150f4:	mov	r1, #36	; 0x24
   150f8:	bl	1e940 <flatcc_builder_start_table@@Base>
   150fc:	mov	r0, r4
   15100:	mov	r1, #8
   15104:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   15108:	movw	r1, #10121	; 0x2789
   1510c:	cmp	r0, #0
   15110:	movt	r1, #2
   15114:	strne	r5, [r0]
   15118:	mov	r0, r4
   1511c:	bl	20504 <flatcc_builder_create_string_str@@Base>
   15120:	cmp	r0, #0
   15124:	beq	15140 <gen_monster@@Base+0x798>
   15128:	mov	r5, r0
   1512c:	mov	r0, r4
   15130:	mov	r1, #3
   15134:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   15138:	cmp	r0, #0
   1513c:	strne	r5, [r0]
   15140:	mov	r0, r4
   15144:	mov	r1, #7
   15148:	mov	r2, #1
   1514c:	mov	r3, #1
   15150:	mov	r5, #1
   15154:	bl	1fb8c <flatcc_builder_table_add@@Base>
   15158:	movw	r1, #21988	; 0x55e4
   1515c:	cmp	r0, #0
   15160:	mov	r2, #1
   15164:	movt	r1, #2
   15168:	strbne	r5, [r0]
   1516c:	mov	r0, r4
   15170:	bl	1f220 <flatcc_builder_check_required@@Base>
   15174:	cmp	r0, #0
   15178:	beq	152b0 <gen_monster@@Base+0x908>
   1517c:	mov	r0, r4
   15180:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   15184:	cmp	r0, #0
   15188:	beq	15198 <gen_monster@@Base+0x7f0>
   1518c:	mov	r1, r0
   15190:	mov	r0, r4
   15194:	bl	1e05c <flatcc_builder_offset_vector_push@@Base>
   15198:	mov	r0, r4
   1519c:	bl	1e6cc <flatcc_builder_end_offset_vector@@Base>
   151a0:	cmp	r0, #0
   151a4:	beq	151c0 <gen_monster@@Base+0x818>
   151a8:	mov	r5, r0
   151ac:	mov	r0, r4
   151b0:	mov	r1, #11
   151b4:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   151b8:	cmp	r0, #0
   151bc:	strne	r5, [r0]
   151c0:	movw	r1, #21988	; 0x55e4
   151c4:	mov	r0, r4
   151c8:	mov	r2, #1
   151cc:	movt	r1, #2
   151d0:	bl	1f220 <flatcc_builder_check_required@@Base>
   151d4:	cmp	r0, #0
   151d8:	beq	152b0 <gen_monster@@Base+0x908>
   151dc:	mov	r0, r4
   151e0:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   151e4:	cmp	r0, #0
   151e8:	beq	15204 <gen_monster@@Base+0x85c>
   151ec:	mov	r5, r0
   151f0:	mov	r0, r4
   151f4:	mov	r1, #12
   151f8:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   151fc:	cmp	r0, #0
   15200:	strne	r5, [r0]
   15204:	mov	r0, r4
   15208:	mov	r1, #15
   1520c:	mov	r2, #1
   15210:	mov	r3, #1
   15214:	bl	1fb8c <flatcc_builder_table_add@@Base>
   15218:	cmp	r0, #0
   1521c:	movne	r1, #0
   15220:	strbne	r1, [r0]
   15224:	mov	r0, r4
   15228:	mov	r1, #3
   1522c:	bl	1e940 <flatcc_builder_start_table@@Base>
   15230:	movw	r1, #21994	; 0x55ea
   15234:	mov	r0, r4
   15238:	mov	r2, #0
   1523c:	movt	r1, #2
   15240:	bl	1f220 <flatcc_builder_check_required@@Base>
   15244:	cmp	r0, #0
   15248:	beq	15338 <gen_monster@@Base+0x990>
   1524c:	mov	r0, r4
   15250:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   15254:	cmp	r0, #0
   15258:	beq	15274 <gen_monster@@Base+0x8cc>
   1525c:	mov	r5, r0
   15260:	mov	r0, r4
   15264:	mov	r1, #14
   15268:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1526c:	cmp	r0, #0
   15270:	strne	r5, [r0]
   15274:	movw	r1, #21988	; 0x55e4
   15278:	mov	r0, r4
   1527c:	mov	r2, #1
   15280:	movt	r1, #2
   15284:	bl	1f220 <flatcc_builder_check_required@@Base>
   15288:	cmp	r0, #0
   1528c:	beq	152b0 <gen_monster@@Base+0x908>
   15290:	mov	r0, r4
   15294:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   15298:	mov	r1, r0
   1529c:	mov	r0, r4
   152a0:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   152a4:	mov	r0, #0
   152a8:	sub	sp, fp, #16
   152ac:	pop	{r4, r5, r6, sl, fp, pc}
   152b0:	movw	r0, #12876	; 0x324c
   152b4:	movw	r1, #12586	; 0x312a
   152b8:	movw	r3, #13038	; 0x32ee
   152bc:	mov	r2, #235	; 0xeb
   152c0:	movt	r0, #2
   152c4:	movt	r1, #2
   152c8:	movt	r3, #2
   152cc:	bl	12f88 <__assert_fail@plt>
   152d0:	movw	r0, #9872	; 0x2690
   152d4:	movw	r1, #9448	; 0x24e8
   152d8:	movw	r3, #9911	; 0x26b7
   152dc:	movw	r2, #881	; 0x371
   152e0:	movt	r0, #2
   152e4:	b	1532c <gen_monster@@Base+0x984>
   152e8:	movw	r0, #9952	; 0x26e0
   152ec:	movw	r1, #9448	; 0x24e8
   152f0:	movw	r3, #9911	; 0x26b7
   152f4:	movw	r2, #883	; 0x373
   152f8:	movt	r0, #2
   152fc:	b	1532c <gen_monster@@Base+0x984>
   15300:	movw	r0, #9991	; 0x2707
   15304:	movw	r1, #9448	; 0x24e8
   15308:	movw	r3, #9911	; 0x26b7
   1530c:	movw	r2, #923	; 0x39b
   15310:	movt	r0, #2
   15314:	b	1532c <gen_monster@@Base+0x984>
   15318:	movw	r0, #10070	; 0x2756
   1531c:	movw	r1, #9448	; 0x24e8
   15320:	movw	r3, #9911	; 0x26b7
   15324:	movw	r2, #929	; 0x3a1
   15328:	movt	r0, #2
   1532c:	movt	r1, #2
   15330:	movt	r3, #2
   15334:	bl	12f88 <__assert_fail@plt>
   15338:	movw	r0, #14214	; 0x3786
   1533c:	movw	r1, #12586	; 0x312a
   15340:	movw	r3, #14367	; 0x381f
   15344:	mov	r2, #221	; 0xdd
   15348:	movt	r0, #2
   1534c:	movt	r1, #2
   15350:	movt	r3, #2
   15354:	bl	12f88 <__assert_fail@plt>

00015358 <test_monster@@Base>:
   15358:	push	{r4, r5, fp, lr}
   1535c:	add	fp, sp, #8
   15360:	sub	sp, sp, #8
   15364:	mov	r1, #0
   15368:	mov	r4, r0
   1536c:	bl	149a8 <gen_monster@@Base>
   15370:	add	r1, sp, #4
   15374:	mov	r0, r4
   15378:	bl	20908 <flatcc_builder_finalize_aligned_buffer@@Base>
   1537c:	mov	r4, r0
   15380:	movw	r0, #32880	; 0x8070
   15384:	ldr	r2, [sp, #4]
   15388:	movt	r0, #3
   1538c:	mov	r1, r4
   15390:	ldr	r3, [r0]
   15394:	movw	r0, #9111	; 0x2397
   15398:	movt	r0, #2
   1539c:	bl	1365c <test_type_aliases@@Base+0x51c>
   153a0:	ldr	r1, [sp, #4]
   153a4:	movw	r2, #8956	; 0x22fc
   153a8:	movw	r3, #49568	; 0xc1a0
   153ac:	mov	r0, r4
   153b0:	movt	r2, #2
   153b4:	movt	r3, #1
   153b8:	bl	21a80 <flatcc_verify_table_as_root@@Base>
   153bc:	cmp	r0, #0
   153c0:	beq	153e0 <test_monster@@Base+0x88>
   153c4:	bl	20ff4 <flatcc_verify_error_string@@Base>
   153c8:	mov	r1, r0
   153cc:	movw	r0, #10130	; 0x2792
   153d0:	movt	r0, #2
   153d4:	bl	12e98 <printf@plt>
   153d8:	mvn	r5, #0
   153dc:	b	153f4 <test_monster@@Base+0x9c>
   153e0:	mov	r0, r4
   153e4:	bl	13ecc <verify_monster@@Base>
   153e8:	mov	r5, r0
   153ec:	mov	r0, r4
   153f0:	bl	20a08 <flatcc_builder_aligned_free@@Base>
   153f4:	mov	r0, r5
   153f8:	sub	sp, fp, #8
   153fc:	pop	{r4, r5, fp, pc}

00015400 <test_monster_with_size@@Base>:
   15400:	push	{r4, r5, fp, lr}
   15404:	add	fp, sp, #8
   15408:	sub	sp, sp, #8
   1540c:	mov	r1, #1
   15410:	mov	r4, r0
   15414:	bl	149a8 <gen_monster@@Base>
   15418:	add	r1, sp, #4
   1541c:	mov	r0, r4
   15420:	bl	20908 <flatcc_builder_finalize_aligned_buffer@@Base>
   15424:	mov	r4, r0
   15428:	movw	r0, #32880	; 0x8070
   1542c:	ldr	r2, [sp, #4]
   15430:	movt	r0, #3
   15434:	mov	r1, r4
   15438:	ldr	r3, [r0]
   1543c:	movw	r0, #10172	; 0x27bc
   15440:	movt	r0, #2
   15444:	bl	1365c <test_type_aliases@@Base+0x51c>
   15448:	tst	r4, #15
   1544c:	beq	15470 <test_monster_with_size@@Base+0x70>
   15450:	movw	r0, #10196	; 0x27d4
   15454:	movt	r0, #2
   15458:	bl	12e98 <printf@plt>
   1545c:	movw	r0, #10277	; 0x2825
   15460:	mov	r1, r4
   15464:	movt	r0, #2
   15468:	bl	12e98 <printf@plt>
   1546c:	b	154c8 <test_monster_with_size@@Base+0xc8>
   15470:	mov	r5, r4
   15474:	ldr	r0, [sp, #4]
   15478:	ldr	r1, [r5], #4
   1547c:	sub	r2, r0, #4
   15480:	cmp	r1, r2
   15484:	bne	154bc <test_monster_with_size@@Base+0xbc>
   15488:	movw	r2, #8956	; 0x22fc
   1548c:	movw	r3, #49568	; 0xc1a0
   15490:	mov	r0, r5
   15494:	movt	r2, #2
   15498:	movt	r3, #1
   1549c:	bl	21a80 <flatcc_verify_table_as_root@@Base>
   154a0:	cmp	r0, #0
   154a4:	beq	154d8 <test_monster_with_size@@Base+0xd8>
   154a8:	bl	20ff4 <flatcc_verify_error_string@@Base>
   154ac:	mov	r1, r0
   154b0:	movw	r0, #10351	; 0x286f
   154b4:	movt	r0, #2
   154b8:	b	15468 <test_monster_with_size@@Base+0x68>
   154bc:	movw	r0, #10297	; 0x2839
   154c0:	movt	r0, #2
   154c4:	bl	12e98 <printf@plt>
   154c8:	mvn	r5, #0
   154cc:	mov	r0, r5
   154d0:	sub	sp, fp, #8
   154d4:	pop	{r4, r5, fp, pc}
   154d8:	mov	r0, r5
   154dc:	bl	13ecc <verify_monster@@Base>
   154e0:	mov	r5, r0
   154e4:	mov	r0, r4
   154e8:	bl	20a08 <flatcc_builder_aligned_free@@Base>
   154ec:	b	154cc <test_monster_with_size@@Base+0xcc>

000154f0 <test_string@@Base>:
   154f0:	push	{r4, r5, fp, lr}
   154f4:	add	fp, sp, #8
   154f8:	mov	r4, r0
   154fc:	bl	1d0ac <flatcc_builder_reset@@Base>
   15500:	movw	r1, #8956	; 0x22fc
   15504:	mov	r0, r4
   15508:	mov	r2, #0
   1550c:	mov	r3, #0
   15510:	movt	r1, #2
   15514:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   15518:	cmp	r0, #0
   1551c:	bne	1552c <test_string@@Base+0x3c>
   15520:	mov	r0, r4
   15524:	mov	r1, #36	; 0x24
   15528:	bl	1e940 <flatcc_builder_start_table@@Base>
   1552c:	mov	r0, r4
   15530:	bl	1e7a4 <flatcc_builder_start_string@@Base>
   15534:	mov	r0, r4
   15538:	mov	r1, #3
   1553c:	bl	1e1d4 <flatcc_builder_extend_string@@Base>
   15540:	mov	r1, #51	; 0x33
   15544:	strb	r1, [r0, #2]
   15548:	movw	r1, #12849	; 0x3231
   1554c:	strh	r1, [r0]
   15550:	movw	r1, #10446	; 0x28ce
   15554:	mov	r0, r4
   15558:	movt	r1, #2
   1555c:	bl	1e358 <flatcc_builder_append_string_str@@Base>
   15560:	mov	r0, r4
   15564:	bl	2066c <flatcc_builder_string_len@@Base>
   15568:	cmp	r0, #4
   1556c:	bne	156d0 <test_string@@Base+0x1e0>
   15570:	movw	r1, #10484	; 0x28f4
   15574:	mov	r0, r4
   15578:	mov	r2, #30
   1557c:	movt	r1, #2
   15580:	bl	1e384 <flatcc_builder_append_string_strn@@Base>
   15584:	mov	r0, r4
   15588:	bl	2066c <flatcc_builder_string_len@@Base>
   1558c:	cmp	r0, #8
   15590:	bne	156e8 <test_string@@Base+0x1f8>
   15594:	movw	r1, #10527	; 0x291f
   15598:	mov	r0, r4
   1559c:	mov	r2, #2
   155a0:	movt	r1, #2
   155a4:	bl	1e284 <flatcc_builder_append_string@@Base>
   155a8:	mov	r0, r4
   155ac:	bl	2066c <flatcc_builder_string_len@@Base>
   155b0:	cmp	r0, #10
   155b4:	bne	15700 <test_string@@Base+0x210>
   155b8:	mov	r0, r4
   155bc:	mov	r1, #3
   155c0:	bl	1e4e8 <flatcc_builder_truncate_string@@Base>
   155c4:	mov	r0, r4
   155c8:	bl	2066c <flatcc_builder_string_len@@Base>
   155cc:	cmp	r0, #7
   155d0:	bne	15718 <test_string@@Base+0x228>
   155d4:	mov	r0, r4
   155d8:	bl	20664 <flatcc_builder_string_edit@@Base>
   155dc:	mov	r1, #46	; 0x2e
   155e0:	strb	r1, [r0, #4]
   155e4:	mov	r0, r4
   155e8:	bl	2056c <flatcc_builder_end_string@@Base>
   155ec:	cmp	r0, #0
   155f0:	beq	1560c <test_string@@Base+0x11c>
   155f4:	mov	r5, r0
   155f8:	mov	r0, r4
   155fc:	mov	r1, #3
   15600:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   15604:	cmp	r0, #0
   15608:	strne	r5, [r0]
   1560c:	movw	r1, #21988	; 0x55e4
   15610:	mov	r0, r4
   15614:	mov	r2, #1
   15618:	movt	r1, #2
   1561c:	bl	1f220 <flatcc_builder_check_required@@Base>
   15620:	cmp	r0, #0
   15624:	beq	15730 <test_string@@Base+0x240>
   15628:	mov	r0, r4
   1562c:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   15630:	mov	r1, r0
   15634:	mov	r0, r4
   15638:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   1563c:	mov	r0, r4
   15640:	mov	r1, #0
   15644:	bl	207ec <flatcc_builder_get_direct_buffer@@Base>
   15648:	cmp	r0, #0
   1564c:	beq	15750 <test_string@@Base+0x260>
   15650:	ldr	r1, [r0, #4]
   15654:	movw	r2, #20301	; 0x4f4d
   15658:	movt	r2, #21326	; 0x534e
   1565c:	cmp	r1, r2
   15660:	bne	15770 <test_string@@Base+0x280>
   15664:	ldr	r1, [r0]
   15668:	ldr	r2, [r0, r1]!
   1566c:	mov	r1, r0
   15670:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   15674:	cmp	r2, #11
   15678:	bls	156c4 <test_string@@Base+0x1d4>
   1567c:	ldrh	r1, [r1, #10]
   15680:	cmp	r1, #0
   15684:	beq	156c4 <test_string@@Base+0x1d4>
   15688:	ldr	r1, [r0, r1]!
   1568c:	add	r0, r0, r1
   15690:	movw	r1, #10607	; 0x296f
   15694:	movt	r1, #2
   15698:	add	r0, r0, #4
   1569c:	bl	12e8c <strcmp@plt>
   156a0:	cmp	r0, #0
   156a4:	beq	156bc <test_string@@Base+0x1cc>
   156a8:	movw	r0, #18112	; 0x46c0
   156ac:	movt	r0, #2
   156b0:	bl	12ee0 <puts@plt>
   156b4:	mvn	r0, #0
   156b8:	pop	{r4, r5, fp, pc}
   156bc:	mov	r0, #0
   156c0:	pop	{r4, r5, fp, pc}
   156c4:	movw	r0, #13488	; 0x34b0
   156c8:	movt	r0, #2
   156cc:	b	15778 <test_string@@Base+0x288>
   156d0:	movw	r0, #10410	; 0x28aa
   156d4:	movw	r1, #9448	; 0x24e8
   156d8:	movw	r3, #10448	; 0x28d0
   156dc:	movw	r2, #1080	; 0x438
   156e0:	movt	r0, #2
   156e4:	b	15764 <test_string@@Base+0x274>
   156e8:	movw	r0, #10489	; 0x28f9
   156ec:	movw	r1, #9448	; 0x24e8
   156f0:	movw	r3, #10448	; 0x28d0
   156f4:	movw	r2, #1082	; 0x43a
   156f8:	movt	r0, #2
   156fc:	b	15764 <test_string@@Base+0x274>
   15700:	movw	r0, #10530	; 0x2922
   15704:	movw	r1, #9448	; 0x24e8
   15708:	movw	r3, #10448	; 0x28d0
   1570c:	movw	r2, #1084	; 0x43c
   15710:	movt	r0, #2
   15714:	b	15764 <test_string@@Base+0x274>
   15718:	movw	r0, #10569	; 0x2949
   1571c:	movw	r1, #9448	; 0x24e8
   15720:	movw	r3, #10448	; 0x28d0
   15724:	movw	r2, #1086	; 0x43e
   15728:	movt	r0, #2
   1572c:	b	15764 <test_string@@Base+0x274>
   15730:	movw	r0, #12876	; 0x324c
   15734:	movw	r1, #12586	; 0x312a
   15738:	movw	r3, #13038	; 0x32ee
   1573c:	mov	r2, #235	; 0xeb
   15740:	movt	r0, #2
   15744:	movt	r1, #2
   15748:	movt	r3, #2
   1574c:	bl	12f88 <__assert_fail@plt>
   15750:	movw	r0, #10884	; 0x2a84
   15754:	movw	r1, #9448	; 0x24e8
   15758:	movw	r3, #10448	; 0x28d0
   1575c:	movw	r2, #1093	; 0x445
   15760:	movt	r0, #2
   15764:	movt	r1, #2
   15768:	movt	r3, #2
   1576c:	bl	12f88 <__assert_fail@plt>
   15770:	movw	r0, #12203	; 0x2fab
   15774:	movt	r0, #2
   15778:	movw	r1, #12241	; 0x2fd1
   1577c:	movw	r3, #13407	; 0x345f
   15780:	movw	r2, #699	; 0x2bb
   15784:	movt	r1, #2
   15788:	movt	r3, #2
   1578c:	bl	12f88 <__assert_fail@plt>

00015790 <test_sort_find@@Base>:
   15790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15794:	add	fp, sp, #28
   15798:	sub	sp, sp, #20
   1579c:	mov	r4, r0
   157a0:	bl	1d0ac <flatcc_builder_reset@@Base>
   157a4:	movw	r1, #8956	; 0x22fc
   157a8:	mov	r0, r4
   157ac:	mov	r2, #0
   157b0:	mov	r3, #0
   157b4:	movt	r1, #2
   157b8:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   157bc:	cmp	r0, #0
   157c0:	bne	157d0 <test_sort_find@@Base+0x40>
   157c4:	mov	r0, r4
   157c8:	mov	r1, #36	; 0x24
   157cc:	bl	1e940 <flatcc_builder_start_table@@Base>
   157d0:	movw	r1, #9024	; 0x2340
   157d4:	mov	r0, r4
   157d8:	movt	r1, #2
   157dc:	bl	20504 <flatcc_builder_create_string_str@@Base>
   157e0:	cmp	r0, #0
   157e4:	beq	15800 <test_sort_find@@Base+0x70>
   157e8:	mov	r5, r0
   157ec:	mov	r0, r4
   157f0:	mov	r1, #3
   157f4:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   157f8:	cmp	r0, #0
   157fc:	strne	r5, [r0]
   15800:	mov	r0, r4
   15804:	bl	1e600 <flatcc_builder_start_offset_vector@@Base>
   15808:	mov	r0, r4
   1580c:	mov	r1, #36	; 0x24
   15810:	bl	1e940 <flatcc_builder_start_table@@Base>
   15814:	movw	r1, #9545	; 0x2549
   15818:	mov	r0, r4
   1581c:	movt	r1, #2
   15820:	bl	20504 <flatcc_builder_create_string_str@@Base>
   15824:	cmp	r0, #0
   15828:	beq	15844 <test_sort_find@@Base+0xb4>
   1582c:	mov	r5, r0
   15830:	mov	r0, r4
   15834:	mov	r1, #3
   15838:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1583c:	cmp	r0, #0
   15840:	strne	r5, [r0]
   15844:	movw	r1, #21988	; 0x55e4
   15848:	mov	r0, r4
   1584c:	mov	r2, #1
   15850:	movt	r1, #2
   15854:	bl	1f220 <flatcc_builder_check_required@@Base>
   15858:	cmp	r0, #0
   1585c:	beq	1623c <test_sort_find@@Base+0xaac>
   15860:	mov	r0, r4
   15864:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   15868:	cmp	r0, #0
   1586c:	beq	1587c <test_sort_find@@Base+0xec>
   15870:	mov	r1, r0
   15874:	mov	r0, r4
   15878:	bl	1e05c <flatcc_builder_offset_vector_push@@Base>
   1587c:	mov	r0, r4
   15880:	mov	r1, #36	; 0x24
   15884:	bl	1e940 <flatcc_builder_start_table@@Base>
   15888:	movw	r1, #19234	; 0x4b22
   1588c:	mov	r0, r4
   15890:	movt	r1, #2
   15894:	bl	20504 <flatcc_builder_create_string_str@@Base>
   15898:	cmp	r0, #0
   1589c:	beq	158b8 <test_sort_find@@Base+0x128>
   158a0:	mov	r5, r0
   158a4:	mov	r0, r4
   158a8:	mov	r1, #3
   158ac:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   158b0:	cmp	r0, #0
   158b4:	strne	r5, [r0]
   158b8:	movw	r1, #21988	; 0x55e4
   158bc:	mov	r0, r4
   158c0:	mov	r2, #1
   158c4:	movt	r1, #2
   158c8:	bl	1f220 <flatcc_builder_check_required@@Base>
   158cc:	cmp	r0, #0
   158d0:	beq	1623c <test_sort_find@@Base+0xaac>
   158d4:	mov	r0, r4
   158d8:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   158dc:	cmp	r0, #0
   158e0:	beq	158f0 <test_sort_find@@Base+0x160>
   158e4:	mov	r1, r0
   158e8:	mov	r0, r4
   158ec:	bl	1e05c <flatcc_builder_offset_vector_push@@Base>
   158f0:	mov	r0, r4
   158f4:	mov	r1, #36	; 0x24
   158f8:	bl	1e940 <flatcc_builder_start_table@@Base>
   158fc:	movw	r1, #19194	; 0x4afa
   15900:	mov	r0, r4
   15904:	movt	r1, #2
   15908:	bl	20504 <flatcc_builder_create_string_str@@Base>
   1590c:	cmp	r0, #0
   15910:	beq	1592c <test_sort_find@@Base+0x19c>
   15914:	mov	r5, r0
   15918:	mov	r0, r4
   1591c:	mov	r1, #3
   15920:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   15924:	cmp	r0, #0
   15928:	strne	r5, [r0]
   1592c:	movw	r1, #21988	; 0x55e4
   15930:	mov	r0, r4
   15934:	mov	r2, #1
   15938:	movt	r1, #2
   1593c:	bl	1f220 <flatcc_builder_check_required@@Base>
   15940:	cmp	r0, #0
   15944:	beq	1623c <test_sort_find@@Base+0xaac>
   15948:	mov	r0, r4
   1594c:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   15950:	cmp	r0, #0
   15954:	beq	15964 <test_sort_find@@Base+0x1d4>
   15958:	mov	r1, r0
   1595c:	mov	r0, r4
   15960:	bl	1e05c <flatcc_builder_offset_vector_push@@Base>
   15964:	mov	r0, r4
   15968:	mov	r1, #36	; 0x24
   1596c:	bl	1e940 <flatcc_builder_start_table@@Base>
   15970:	movw	r1, #10615	; 0x2977
   15974:	mov	r0, r4
   15978:	movt	r1, #2
   1597c:	bl	20504 <flatcc_builder_create_string_str@@Base>
   15980:	cmp	r0, #0
   15984:	beq	159a0 <test_sort_find@@Base+0x210>
   15988:	mov	r5, r0
   1598c:	mov	r0, r4
   15990:	mov	r1, #3
   15994:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   15998:	cmp	r0, #0
   1599c:	strne	r5, [r0]
   159a0:	movw	r1, #21988	; 0x55e4
   159a4:	mov	r0, r4
   159a8:	mov	r2, #1
   159ac:	movt	r1, #2
   159b0:	bl	1f220 <flatcc_builder_check_required@@Base>
   159b4:	cmp	r0, #0
   159b8:	beq	1623c <test_sort_find@@Base+0xaac>
   159bc:	mov	r0, r4
   159c0:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   159c4:	cmp	r0, #0
   159c8:	beq	159d8 <test_sort_find@@Base+0x248>
   159cc:	mov	r1, r0
   159d0:	mov	r0, r4
   159d4:	bl	1e05c <flatcc_builder_offset_vector_push@@Base>
   159d8:	mov	r0, r4
   159dc:	mov	r1, #36	; 0x24
   159e0:	bl	1e940 <flatcc_builder_start_table@@Base>
   159e4:	movw	r1, #19194	; 0x4afa
   159e8:	mov	r0, r4
   159ec:	movt	r1, #2
   159f0:	bl	20504 <flatcc_builder_create_string_str@@Base>
   159f4:	cmp	r0, #0
   159f8:	beq	15a14 <test_sort_find@@Base+0x284>
   159fc:	mov	r5, r0
   15a00:	mov	r0, r4
   15a04:	mov	r1, #3
   15a08:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   15a0c:	cmp	r0, #0
   15a10:	strne	r5, [r0]
   15a14:	movw	r1, #21988	; 0x55e4
   15a18:	mov	r0, r4
   15a1c:	mov	r2, #1
   15a20:	movt	r1, #2
   15a24:	bl	1f220 <flatcc_builder_check_required@@Base>
   15a28:	cmp	r0, #0
   15a2c:	beq	1623c <test_sort_find@@Base+0xaac>
   15a30:	mov	r0, r4
   15a34:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   15a38:	cmp	r0, #0
   15a3c:	beq	15a4c <test_sort_find@@Base+0x2bc>
   15a40:	mov	r1, r0
   15a44:	mov	r0, r4
   15a48:	bl	1e05c <flatcc_builder_offset_vector_push@@Base>
   15a4c:	mov	r0, r4
   15a50:	bl	1e6cc <flatcc_builder_end_offset_vector@@Base>
   15a54:	cmp	r0, #0
   15a58:	beq	15a74 <test_sort_find@@Base+0x2e4>
   15a5c:	mov	r5, r0
   15a60:	mov	r0, r4
   15a64:	mov	r1, #11
   15a68:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   15a6c:	cmp	r0, #0
   15a70:	strne	r5, [r0]
   15a74:	movw	r1, #21988	; 0x55e4
   15a78:	mov	r0, r4
   15a7c:	mov	r2, #1
   15a80:	movt	r1, #2
   15a84:	bl	1f220 <flatcc_builder_check_required@@Base>
   15a88:	cmp	r0, #0
   15a8c:	beq	1623c <test_sort_find@@Base+0xaac>
   15a90:	mov	r0, r4
   15a94:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   15a98:	mov	r1, r0
   15a9c:	mov	r0, r4
   15aa0:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   15aa4:	add	r1, sp, #16
   15aa8:	mov	r0, r4
   15aac:	bl	20908 <flatcc_builder_finalize_aligned_buffer@@Base>
   15ab0:	movw	r9, #32880	; 0x8070
   15ab4:	ldr	r2, [sp, #16]
   15ab8:	mov	r4, r0
   15abc:	movw	r0, #10621	; 0x297d
   15ac0:	movt	r9, #3
   15ac4:	movt	r0, #2
   15ac8:	mov	r1, r4
   15acc:	ldr	r3, [r9]
   15ad0:	bl	1365c <test_type_aliases@@Base+0x51c>
   15ad4:	cmp	r4, #0
   15ad8:	beq	1625c <test_sort_find@@Base+0xacc>
   15adc:	ldr	r0, [r4, #4]
   15ae0:	movw	r1, #20301	; 0x4f4d
   15ae4:	movt	r1, #21326	; 0x534e
   15ae8:	cmp	r0, r1
   15aec:	bne	1625c <test_sort_find@@Base+0xacc>
   15af0:	ldr	r1, [r4]
   15af4:	str	r4, [sp, #12]
   15af8:	ldr	r2, [r4, r1]!
   15afc:	str	r1, [sp, #8]
   15b00:	mov	r1, r4
   15b04:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   15b08:	cmp	r2, #27
   15b0c:	bls	1627c <test_sort_find@@Base+0xaec>
   15b10:	ldrh	r1, [r1, #26]
   15b14:	cmp	r1, #0
   15b18:	beq	1627c <test_sort_find@@Base+0xaec>
   15b1c:	str	r1, [sp, #4]
   15b20:	ldr	r1, [r4, r1]!
   15b24:	ldr	sl, [r4, r1]!
   15b28:	str	r1, [sp]
   15b2c:	add	r5, r4, #4
   15b30:	cmp	sl, #0
   15b34:	beq	15bd4 <test_sort_find@@Base+0x444>
   15b38:	lsr	r7, sl, #1
   15b3c:	sub	r6, sl, #1
   15b40:	mov	r0, r5
   15b44:	mov	r1, r7
   15b48:	mov	r2, r6
   15b4c:	bl	1cb0c <main@@Base+0xc84>
   15b50:	sub	r7, r7, #1
   15b54:	cmn	r7, #1
   15b58:	bne	15b40 <test_sort_find@@Base+0x3b0>
   15b5c:	cmp	r6, #0
   15b60:	beq	15bd4 <test_sort_find@@Base+0x444>
   15b64:	mvn	r0, #3
   15b68:	ldr	r1, [sp]
   15b6c:	sub	r6, sl, #2
   15b70:	add	r7, r0, sl, lsl #2
   15b74:	mov	r0, #4
   15b78:	sub	r8, r0, sl, lsl #2
   15b7c:	ldr	r0, [sp, #8]
   15b80:	add	r0, r1, r0
   15b84:	ldr	r1, [sp, #4]
   15b88:	add	r0, r0, sl, lsl #2
   15b8c:	add	r0, r0, r1
   15b90:	ldr	r1, [sp, #12]
   15b94:	add	r4, r1, r0
   15b98:	ldr	r0, [r4]
   15b9c:	ldr	r1, [r5]
   15ba0:	mov	r2, r6
   15ba4:	add	r0, r7, r0
   15ba8:	str	r0, [r5]
   15bac:	add	r0, r8, r1
   15bb0:	mov	r1, #0
   15bb4:	str	r0, [r4], #-4
   15bb8:	mov	r0, r5
   15bbc:	bl	1cb0c <main@@Base+0xc84>
   15bc0:	sub	r6, r6, #1
   15bc4:	sub	r7, r7, #4
   15bc8:	add	r8, r8, #4
   15bcc:	cmn	r6, #1
   15bd0:	bne	15b98 <test_sort_find@@Base+0x408>
   15bd4:	ldr	r4, [sp, #12]
   15bd8:	ldr	r3, [r9]
   15bdc:	ldr	r2, [sp, #16]
   15be0:	movw	r0, #10623	; 0x297f
   15be4:	movt	r0, #2
   15be8:	mov	r1, r4
   15bec:	bl	1365c <test_type_aliases@@Base+0x51c>
   15bf0:	ldr	r0, [r5, #-4]
   15bf4:	cmp	r0, #5
   15bf8:	bne	15c50 <test_sort_find@@Base+0x4c0>
   15bfc:	ldr	r1, [r5]
   15c00:	mov	r0, r5
   15c04:	ldr	r2, [r0, r1]!
   15c08:	mov	r1, r0
   15c0c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   15c10:	cmp	r2, #12
   15c14:	bcc	1629c <test_sort_find@@Base+0xb0c>
   15c18:	ldrh	r1, [r1, #10]
   15c1c:	cmp	r1, #0
   15c20:	beq	1629c <test_sort_find@@Base+0xb0c>
   15c24:	ldr	r1, [r0, r1]!
   15c28:	add	r0, r0, r1
   15c2c:	movw	r1, #10615	; 0x2977
   15c30:	movt	r1, #2
   15c34:	add	r0, r0, #4
   15c38:	bl	12e8c <strcmp@plt>
   15c3c:	cmp	r0, #0
   15c40:	beq	15c74 <test_sort_find@@Base+0x4e4>
   15c44:	movw	r0, #18490	; 0x483a
   15c48:	movt	r0, #2
   15c4c:	b	15c58 <test_sort_find@@Base+0x4c8>
   15c50:	movw	r0, #18519	; 0x4857
   15c54:	movt	r0, #2
   15c58:	bl	12ee0 <puts@plt>
   15c5c:	mvn	r6, #0
   15c60:	mov	r0, r4
   15c64:	bl	20a08 <flatcc_builder_aligned_free@@Base>
   15c68:	mov	r0, r6
   15c6c:	sub	sp, fp, #28
   15c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c74:	mov	r6, r5
   15c78:	ldr	r0, [r6, #4]!
   15c7c:	ldr	r1, [r6, r0]!
   15c80:	mov	r0, r6
   15c84:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   15c88:	cmp	r1, #12
   15c8c:	bcc	1629c <test_sort_find@@Base+0xb0c>
   15c90:	ldrh	r0, [r0, #10]
   15c94:	cmp	r0, #0
   15c98:	beq	1629c <test_sort_find@@Base+0xb0c>
   15c9c:	mov	r1, r6
   15ca0:	ldr	r0, [r1, r0]!
   15ca4:	add	r0, r1, r0
   15ca8:	movw	r1, #19194	; 0x4afa
   15cac:	movt	r1, #2
   15cb0:	add	r0, r0, #4
   15cb4:	bl	12e8c <strcmp@plt>
   15cb8:	cmp	r0, #0
   15cbc:	beq	15ccc <test_sort_find@@Base+0x53c>
   15cc0:	movw	r0, #18461	; 0x481d
   15cc4:	movt	r0, #2
   15cc8:	b	15c58 <test_sort_find@@Base+0x4c8>
   15ccc:	mov	r7, r5
   15cd0:	ldr	r0, [r7, #8]!
   15cd4:	ldr	r1, [r7, r0]!
   15cd8:	mov	r0, r7
   15cdc:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   15ce0:	cmp	r1, #12
   15ce4:	bcc	1629c <test_sort_find@@Base+0xb0c>
   15ce8:	ldrh	r0, [r0, #10]
   15cec:	cmp	r0, #0
   15cf0:	beq	1629c <test_sort_find@@Base+0xb0c>
   15cf4:	mov	r1, r7
   15cf8:	ldr	r0, [r1, r0]!
   15cfc:	add	r0, r1, r0
   15d00:	movw	r1, #19194	; 0x4afa
   15d04:	movt	r1, #2
   15d08:	add	r0, r0, #4
   15d0c:	bl	12e8c <strcmp@plt>
   15d10:	cmp	r0, #0
   15d14:	beq	15d24 <test_sort_find@@Base+0x594>
   15d18:	movw	r0, #18432	; 0x4800
   15d1c:	movt	r0, #2
   15d20:	b	15c58 <test_sort_find@@Base+0x4c8>
   15d24:	mov	r0, r5
   15d28:	ldr	r1, [r0, #12]!
   15d2c:	ldr	r2, [r0, r1]!
   15d30:	mov	r1, r0
   15d34:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   15d38:	cmp	r2, #12
   15d3c:	bcc	1629c <test_sort_find@@Base+0xb0c>
   15d40:	ldrh	r1, [r1, #10]
   15d44:	cmp	r1, #0
   15d48:	beq	1629c <test_sort_find@@Base+0xb0c>
   15d4c:	ldr	r1, [r0, r1]!
   15d50:	add	r0, r0, r1
   15d54:	movw	r1, #19234	; 0x4b22
   15d58:	movt	r1, #2
   15d5c:	add	r0, r0, #4
   15d60:	bl	12e8c <strcmp@plt>
   15d64:	cmp	r0, #0
   15d68:	beq	15d78 <test_sort_find@@Base+0x5e8>
   15d6c:	movw	r0, #18403	; 0x47e3
   15d70:	movt	r0, #2
   15d74:	b	15c58 <test_sort_find@@Base+0x4c8>
   15d78:	mov	r0, r5
   15d7c:	ldr	r1, [r0, #16]!
   15d80:	ldr	r2, [r0, r1]!
   15d84:	mov	r1, r0
   15d88:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   15d8c:	cmp	r2, #12
   15d90:	bcc	1629c <test_sort_find@@Base+0xb0c>
   15d94:	ldrh	r1, [r1, #10]
   15d98:	cmp	r1, #0
   15d9c:	beq	1629c <test_sort_find@@Base+0xb0c>
   15da0:	ldr	r1, [r0, r1]!
   15da4:	add	r0, r0, r1
   15da8:	movw	r1, #9545	; 0x2549
   15dac:	movt	r1, #2
   15db0:	add	r0, r0, #4
   15db4:	bl	12e8c <strcmp@plt>
   15db8:	cmp	r0, #0
   15dbc:	beq	15dcc <test_sort_find@@Base+0x63c>
   15dc0:	movw	r0, #18374	; 0x47c6
   15dc4:	movt	r0, #2
   15dc8:	b	15c58 <test_sort_find@@Base+0x4c8>
   15dcc:	cmp	r6, r7
   15dd0:	beq	15f3c <test_sort_find@@Base+0x7ac>
   15dd4:	movw	r1, #19234	; 0x4b22
   15dd8:	mov	r0, r5
   15ddc:	movt	r1, #2
   15de0:	bl	162dc <test_sort_find@@Base+0xb4c>
   15de4:	cmp	r0, #3
   15de8:	bne	15f48 <test_sort_find@@Base+0x7b8>
   15dec:	ldr	r8, [r5, #-4]
   15df0:	cmp	r8, #0
   15df4:	beq	15f30 <test_sort_find@@Base+0x7a0>
   15df8:	mov	r7, #0
   15dfc:	subs	r9, r8, #1
   15e00:	beq	15eac <test_sort_find@@Base+0x71c>
   15e04:	movw	sl, #10693	; 0x29c5
   15e08:	movt	sl, #2
   15e0c:	sub	r0, r9, r7
   15e10:	add	r6, r7, r0, lsr #1
   15e14:	cmp	r8, r6
   15e18:	bls	162bc <test_sort_find@@Base+0xb2c>
   15e1c:	mov	r0, r5
   15e20:	ldr	r1, [r0, r6, lsl #2]!
   15e24:	ldr	r2, [r0, r1]!
   15e28:	mov	r1, r0
   15e2c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   15e30:	cmp	r2, #12
   15e34:	bcc	1629c <test_sort_find@@Base+0xb0c>
   15e38:	ldrh	r1, [r1, #10]
   15e3c:	cmp	r1, #0
   15e40:	beq	1629c <test_sort_find@@Base+0xb0c>
   15e44:	ldr	r1, [r0, r1]!
   15e48:	ldr	r4, [r0, r1]!
   15e4c:	mov	r1, sl
   15e50:	add	r0, r0, #4
   15e54:	cmp	r4, #5
   15e58:	mov	r2, r4
   15e5c:	movcs	r2, #5
   15e60:	bl	12f70 <strncmp@plt>
   15e64:	cmp	r0, #1
   15e68:	mov	r1, #0
   15e6c:	mov	r2, #0
   15e70:	movwlt	r1, #1
   15e74:	cmp	r0, #0
   15e78:	movwne	r0, #1
   15e7c:	cmp	r4, #5
   15e80:	ldr	r4, [sp, #12]
   15e84:	movwcc	r2, #1
   15e88:	orr	r0, r2, r0
   15e8c:	ands	r0, r0, r1
   15e90:	moveq	r9, r6
   15e94:	addne	r7, r6, #1
   15e98:	cmp	r9, r7
   15e9c:	bhi	15e0c <test_sort_find@@Base+0x67c>
   15ea0:	bne	15f30 <test_sort_find@@Base+0x7a0>
   15ea4:	cmp	r8, r7
   15ea8:	bls	162bc <test_sort_find@@Base+0xb2c>
   15eac:	mov	r0, r5
   15eb0:	ldr	r1, [r0, r7, lsl #2]!
   15eb4:	ldr	r2, [r0, r1]!
   15eb8:	mov	r1, r0
   15ebc:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   15ec0:	cmp	r2, #12
   15ec4:	bcc	1629c <test_sort_find@@Base+0xb0c>
   15ec8:	ldrh	r1, [r1, #10]
   15ecc:	cmp	r1, #0
   15ed0:	beq	1629c <test_sort_find@@Base+0xb0c>
   15ed4:	ldr	r1, [r0, r1]!
   15ed8:	ldr	r4, [r0, r1]!
   15edc:	movw	r1, #10693	; 0x29c5
   15ee0:	movt	r1, #2
   15ee4:	add	r0, r0, #4
   15ee8:	cmp	r4, #5
   15eec:	mov	r2, r4
   15ef0:	movcs	r2, #5
   15ef4:	bl	12f70 <strncmp@plt>
   15ef8:	cmp	r0, #0
   15efc:	mov	r2, r0
   15f00:	mov	r1, #0
   15f04:	mvneq	r2, #0
   15f08:	cmp	r4, #5
   15f0c:	movwhi	r1, #1
   15f10:	cmp	r0, #0
   15f14:	movne	r1, r2
   15f18:	cmp	r4, #5
   15f1c:	ldr	r4, [sp, #12]
   15f20:	movcc	r1, r2
   15f24:	cmp	r7, #3
   15f28:	cmpeq	r1, #0
   15f2c:	beq	15f54 <test_sort_find@@Base+0x7c4>
   15f30:	movw	r0, #18210	; 0x4722
   15f34:	movt	r0, #2
   15f38:	b	15c58 <test_sort_find@@Base+0x4c8>
   15f3c:	movw	r0, #18303	; 0x477f
   15f40:	movt	r0, #2
   15f44:	b	15c58 <test_sort_find@@Base+0x4c8>
   15f48:	movw	r0, #18260	; 0x4754
   15f4c:	movt	r0, #2
   15f50:	b	15c58 <test_sort_find@@Base+0x4c8>
   15f54:	movw	r1, #19234	; 0x4b22
   15f58:	mov	r0, r5
   15f5c:	movt	r1, #2
   15f60:	bl	162dc <test_sort_find@@Base+0xb4c>
   15f64:	cmp	r0, #3
   15f68:	bne	160bc <test_sort_find@@Base+0x92c>
   15f6c:	ldr	r8, [r5, #-4]
   15f70:	cmp	r8, #0
   15f74:	beq	160b0 <test_sort_find@@Base+0x920>
   15f78:	mov	r7, #0
   15f7c:	subs	r9, r8, #1
   15f80:	beq	1602c <test_sort_find@@Base+0x89c>
   15f84:	movw	sl, #10700	; 0x29cc
   15f88:	movt	sl, #2
   15f8c:	sub	r0, r9, r7
   15f90:	add	r6, r7, r0, lsr #1
   15f94:	cmp	r8, r6
   15f98:	bls	162bc <test_sort_find@@Base+0xb2c>
   15f9c:	mov	r0, r5
   15fa0:	ldr	r1, [r0, r6, lsl #2]!
   15fa4:	ldr	r2, [r0, r1]!
   15fa8:	mov	r1, r0
   15fac:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   15fb0:	cmp	r2, #12
   15fb4:	bcc	1629c <test_sort_find@@Base+0xb0c>
   15fb8:	ldrh	r1, [r1, #10]
   15fbc:	cmp	r1, #0
   15fc0:	beq	1629c <test_sort_find@@Base+0xb0c>
   15fc4:	ldr	r1, [r0, r1]!
   15fc8:	ldr	r4, [r0, r1]!
   15fcc:	mov	r1, sl
   15fd0:	add	r0, r0, #4
   15fd4:	cmp	r4, #5
   15fd8:	mov	r2, r4
   15fdc:	movcs	r2, #5
   15fe0:	bl	12f70 <strncmp@plt>
   15fe4:	cmp	r0, #1
   15fe8:	mov	r1, #0
   15fec:	mov	r2, #0
   15ff0:	movwlt	r1, #1
   15ff4:	cmp	r0, #0
   15ff8:	movwne	r0, #1
   15ffc:	cmp	r4, #5
   16000:	movwcc	r2, #1
   16004:	orr	r0, r2, r0
   16008:	ands	r0, r0, r1
   1600c:	moveq	r9, r6
   16010:	addne	r7, r6, #1
   16014:	cmp	r9, r7
   16018:	bhi	15f8c <test_sort_find@@Base+0x7fc>
   1601c:	ldr	r4, [sp, #12]
   16020:	bne	160b0 <test_sort_find@@Base+0x920>
   16024:	cmp	r8, r7
   16028:	bls	162bc <test_sort_find@@Base+0xb2c>
   1602c:	mov	r0, r5
   16030:	ldr	r1, [r0, r7, lsl #2]!
   16034:	ldr	r2, [r0, r1]!
   16038:	mov	r1, r0
   1603c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16040:	cmp	r2, #12
   16044:	bcc	1629c <test_sort_find@@Base+0xb0c>
   16048:	ldrh	r1, [r1, #10]
   1604c:	cmp	r1, #0
   16050:	beq	1629c <test_sort_find@@Base+0xb0c>
   16054:	ldr	r1, [r0, r1]!
   16058:	ldr	r4, [r0, r1]!
   1605c:	movw	r1, #10700	; 0x29cc
   16060:	movt	r1, #2
   16064:	add	r0, r0, #4
   16068:	cmp	r4, #5
   1606c:	mov	r2, r4
   16070:	movcs	r2, #5
   16074:	bl	12f70 <strncmp@plt>
   16078:	cmp	r0, #0
   1607c:	mov	r2, r0
   16080:	mov	r1, #0
   16084:	mvneq	r2, #0
   16088:	cmp	r4, #5
   1608c:	movwhi	r1, #1
   16090:	cmp	r0, #0
   16094:	movne	r1, r2
   16098:	cmp	r4, #5
   1609c:	ldr	r4, [sp, #12]
   160a0:	movcc	r1, r2
   160a4:	cmp	r7, #3
   160a8:	cmpeq	r1, #0
   160ac:	beq	160c8 <test_sort_find@@Base+0x938>
   160b0:	movw	r0, #18147	; 0x46e3
   160b4:	movt	r0, #2
   160b8:	b	15c58 <test_sort_find@@Base+0x4c8>
   160bc:	movw	r0, #18182	; 0x4706
   160c0:	movt	r0, #2
   160c4:	b	15c58 <test_sort_find@@Base+0x4c8>
   160c8:	movw	r1, #10707	; 0x29d3
   160cc:	mov	r0, r5
   160d0:	movt	r1, #2
   160d4:	bl	162dc <test_sort_find@@Base+0xb4c>
   160d8:	cmn	r0, #1
   160dc:	beq	160ec <test_sort_find@@Base+0x95c>
   160e0:	movw	r0, #19552	; 0x4c60
   160e4:	movt	r0, #2
   160e8:	b	1610c <test_sort_find@@Base+0x97c>
   160ec:	movw	r1, #10615	; 0x2977
   160f0:	mov	r0, r5
   160f4:	movt	r1, #2
   160f8:	bl	162dc <test_sort_find@@Base+0xb4c>
   160fc:	cmp	r0, #0
   16100:	beq	1611c <test_sort_find@@Base+0x98c>
   16104:	movw	r0, #18131	; 0x46d3
   16108:	movt	r0, #2
   1610c:	bl	12ee0 <puts@plt>
   16110:	mvn	r6, #0
   16114:	ldr	r4, [sp, #12]
   16118:	b	15c60 <test_sort_find@@Base+0x4d0>
   1611c:	movw	r1, #19194	; 0x4afa
   16120:	mov	r0, r5
   16124:	movt	r1, #2
   16128:	bl	162dc <test_sort_find@@Base+0xb4c>
   1612c:	cmp	r0, #1
   16130:	bne	16208 <test_sort_find@@Base+0xa78>
   16134:	movw	r1, #9545	; 0x2549
   16138:	mov	r0, r5
   1613c:	movt	r1, #2
   16140:	bl	162dc <test_sort_find@@Base+0xb4c>
   16144:	cmp	r0, #4
   16148:	bne	16218 <test_sort_find@@Base+0xa88>
   1614c:	ldr	sl, [r5, #-4]
   16150:	mov	r6, #0
   16154:	cmp	sl, #0
   16158:	beq	16114 <test_sort_find@@Base+0x984>
   1615c:	lsr	r7, sl, #1
   16160:	sub	r4, sl, #1
   16164:	mov	r0, r5
   16168:	mov	r1, r7
   1616c:	mov	r2, r4
   16170:	bl	1cb0c <main@@Base+0xc84>
   16174:	sub	r7, r7, #1
   16178:	cmn	r7, #1
   1617c:	bne	16164 <test_sort_find@@Base+0x9d4>
   16180:	cmp	r4, #0
   16184:	ldr	r4, [sp, #12]
   16188:	beq	15c60 <test_sort_find@@Base+0x4d0>
   1618c:	mvn	r0, #3
   16190:	ldr	r1, [sp]
   16194:	sub	r7, sl, #2
   16198:	mov	r6, #0
   1619c:	add	r2, r0, sl, lsl #2
   161a0:	mov	r0, #4
   161a4:	sub	r9, r0, sl, lsl #2
   161a8:	ldr	r0, [sp, #8]
   161ac:	add	r0, r1, r0
   161b0:	ldr	r1, [sp, #4]
   161b4:	add	r0, r0, sl, lsl #2
   161b8:	add	r0, r0, r1
   161bc:	add	r8, r4, r0
   161c0:	ldr	r0, [r8]
   161c4:	ldr	r1, [r5]
   161c8:	mov	sl, r2
   161cc:	add	r0, r2, r0
   161d0:	mov	r2, r7
   161d4:	str	r0, [r5]
   161d8:	add	r0, r9, r1
   161dc:	mov	r1, #0
   161e0:	str	r0, [r8], #-4
   161e4:	mov	r0, r5
   161e8:	bl	1cb0c <main@@Base+0xc84>
   161ec:	sub	sl, sl, #4
   161f0:	sub	r7, r7, #1
   161f4:	add	r9, r9, #4
   161f8:	mov	r2, sl
   161fc:	cmn	r7, #1
   16200:	bne	161c0 <test_sort_find@@Base+0xa30>
   16204:	b	15c60 <test_sort_find@@Base+0x4d0>
   16208:	mov	r6, r0
   1620c:	movw	r0, #19447	; 0x4bf7
   16210:	movt	r0, #2
   16214:	b	16224 <test_sort_find@@Base+0xa94>
   16218:	mov	r6, r0
   1621c:	movw	r0, #19534	; 0x4c4e
   16220:	movt	r0, #2
   16224:	bl	12ee0 <puts@plt>
   16228:	movw	r0, #10714	; 0x29da
   1622c:	mov	r1, r6
   16230:	movt	r0, #2
   16234:	bl	12e98 <printf@plt>
   16238:	b	16110 <test_sort_find@@Base+0x980>
   1623c:	movw	r0, #12876	; 0x324c
   16240:	movw	r1, #12586	; 0x312a
   16244:	movw	r3, #13038	; 0x32ee
   16248:	mov	r2, #235	; 0xeb
   1624c:	movt	r0, #2
   16250:	movt	r1, #2
   16254:	movt	r3, #2
   16258:	bl	12f88 <__assert_fail@plt>
   1625c:	movw	r0, #12203	; 0x2fab
   16260:	movw	r1, #12241	; 0x2fd1
   16264:	movw	r3, #13835	; 0x360b
   16268:	movw	r2, #711	; 0x2c7
   1626c:	movt	r0, #2
   16270:	movt	r1, #2
   16274:	movt	r3, #2
   16278:	bl	12f88 <__assert_fail@plt>
   1627c:	movw	r0, #10645	; 0x2995
   16280:	movw	r1, #9448	; 0x24e8
   16284:	movw	r3, #10654	; 0x299e
   16288:	movw	r2, #1147	; 0x47b
   1628c:	movt	r0, #2
   16290:	movt	r1, #2
   16294:	movt	r3, #2
   16298:	bl	12f88 <__assert_fail@plt>
   1629c:	movw	r0, #13488	; 0x34b0
   162a0:	movw	r1, #12241	; 0x2fd1
   162a4:	movw	r3, #13407	; 0x345f
   162a8:	movw	r2, #699	; 0x2bb
   162ac:	movt	r0, #2
   162b0:	movt	r1, #2
   162b4:	movt	r3, #2
   162b8:	bl	12f88 <__assert_fail@plt>
   162bc:	movw	r0, #13610	; 0x352a
   162c0:	movw	r1, #12241	; 0x2fd1
   162c4:	movw	r3, #13937	; 0x3671
   162c8:	movw	r2, #693	; 0x2b5
   162cc:	movt	r0, #2
   162d0:	movt	r1, #2
   162d4:	movt	r3, #2
   162d8:	bl	12f88 <__assert_fail@plt>
   162dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   162e0:	add	fp, sp, #24
   162e4:	mvn	r4, #0
   162e8:	cmp	r0, #0
   162ec:	beq	163c4 <test_sort_find@@Base+0xc34>
   162f0:	ldr	r7, [r0, #-4]
   162f4:	mov	r9, r0
   162f8:	cmp	r7, #0
   162fc:	beq	163c4 <test_sort_find@@Base+0xc34>
   16300:	mov	r8, r1
   16304:	mov	r4, #0
   16308:	subs	r5, r7, #1
   1630c:	beq	1637c <test_sort_find@@Base+0xbec>
   16310:	sub	r0, r5, r4
   16314:	add	r6, r4, r0, lsr #1
   16318:	cmp	r7, r6
   1631c:	bls	163ec <test_sort_find@@Base+0xc5c>
   16320:	mov	r0, r9
   16324:	ldr	r1, [r0, r6, lsl #2]!
   16328:	ldr	r2, [r0, r1]!
   1632c:	mov	r1, r0
   16330:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16334:	cmp	r2, #12
   16338:	bcc	163cc <test_sort_find@@Base+0xc3c>
   1633c:	ldrh	r1, [r1, #10]
   16340:	cmp	r1, #0
   16344:	beq	163cc <test_sort_find@@Base+0xc3c>
   16348:	ldr	r1, [r0, r1]!
   1634c:	add	r0, r0, r1
   16350:	mov	r1, r8
   16354:	add	r0, r0, #4
   16358:	bl	12e8c <strcmp@plt>
   1635c:	cmp	r0, #0
   16360:	movpl	r5, r6
   16364:	addmi	r4, r6, #1
   16368:	cmp	r5, r4
   1636c:	bhi	16310 <test_sort_find@@Base+0xb80>
   16370:	bne	163c0 <test_sort_find@@Base+0xc30>
   16374:	cmp	r7, r4
   16378:	bls	163ec <test_sort_find@@Base+0xc5c>
   1637c:	ldr	r0, [r9, r4, lsl #2]!
   16380:	ldr	r1, [r9, r0]!
   16384:	mov	r0, r9
   16388:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   1638c:	cmp	r1, #12
   16390:	bcc	163cc <test_sort_find@@Base+0xc3c>
   16394:	ldrh	r0, [r0, #10]
   16398:	cmp	r0, #0
   1639c:	beq	163cc <test_sort_find@@Base+0xc3c>
   163a0:	ldr	r0, [r9, r0]!
   163a4:	mov	r1, r8
   163a8:	add	r0, r9, r0
   163ac:	add	r0, r0, #4
   163b0:	bl	12e8c <strcmp@plt>
   163b4:	cmp	r0, #0
   163b8:	mvnne	r4, #0
   163bc:	b	163c4 <test_sort_find@@Base+0xc34>
   163c0:	mvn	r4, #0
   163c4:	mov	r0, r4
   163c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   163cc:	movw	r0, #13488	; 0x34b0
   163d0:	movw	r1, #12241	; 0x2fd1
   163d4:	movw	r3, #13407	; 0x345f
   163d8:	movw	r2, #699	; 0x2bb
   163dc:	movt	r0, #2
   163e0:	movt	r1, #2
   163e4:	movt	r3, #2
   163e8:	bl	12f88 <__assert_fail@plt>
   163ec:	movw	r0, #13610	; 0x352a
   163f0:	movw	r1, #12241	; 0x2fd1
   163f4:	movw	r3, #13937	; 0x3671
   163f8:	movw	r2, #693	; 0x2b5
   163fc:	movt	r0, #2
   16400:	movt	r1, #2
   16404:	movt	r3, #2
   16408:	bl	12f88 <__assert_fail@plt>

0001640c <test_scan@@Base>:
   1640c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16410:	add	fp, sp, #28
   16414:	sub	sp, sp, #84	; 0x54
   16418:	mov	r4, r0
   1641c:	movw	r0, #1027	; 0x403
   16420:	movt	r0, #515	; 0x203
   16424:	str	r0, [fp, #-37]	; 0xffffffdb
   16428:	movw	r0, #1798	; 0x706
   1642c:	movt	r0, #769	; 0x301
   16430:	str	r0, [fp, #-40]	; 0xffffffd8
   16434:	mov	r0, r4
   16438:	bl	1d0ac <flatcc_builder_reset@@Base>
   1643c:	movw	r1, #8956	; 0x22fc
   16440:	mov	r0, r4
   16444:	mov	r2, #0
   16448:	mov	r3, #0
   1644c:	movt	r1, #2
   16450:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   16454:	cmp	r0, #0
   16458:	bne	16468 <test_scan@@Base+0x5c>
   1645c:	mov	r0, r4
   16460:	mov	r1, #36	; 0x24
   16464:	bl	1e940 <flatcc_builder_start_table@@Base>
   16468:	movw	r1, #9024	; 0x2340
   1646c:	mov	r0, r4
   16470:	movt	r1, #2
   16474:	bl	20504 <flatcc_builder_create_string_str@@Base>
   16478:	cmp	r0, #0
   1647c:	beq	16498 <test_scan@@Base+0x8c>
   16480:	mov	r5, r0
   16484:	mov	r0, r4
   16488:	mov	r1, #3
   1648c:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   16490:	cmp	r0, #0
   16494:	strne	r5, [r0]
   16498:	mvn	r0, #0
   1649c:	mov	r1, #1
   164a0:	mov	r2, #7
   164a4:	mov	r3, #1
   164a8:	str	r1, [sp]
   164ac:	str	r0, [sp, #4]
   164b0:	sub	r1, fp, #40	; 0x28
   164b4:	mov	r0, r4
   164b8:	bl	1f458 <flatcc_builder_create_vector@@Base>
   164bc:	cmp	r0, #0
   164c0:	beq	164dc <test_scan@@Base+0xd0>
   164c4:	mov	r5, r0
   164c8:	mov	r0, r4
   164cc:	mov	r1, #5
   164d0:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   164d4:	cmp	r0, #0
   164d8:	strne	r5, [r0]
   164dc:	mov	r0, r4
   164e0:	bl	1e600 <flatcc_builder_start_offset_vector@@Base>
   164e4:	mov	r0, r4
   164e8:	bl	1e6cc <flatcc_builder_end_offset_vector@@Base>
   164ec:	cmp	r0, #0
   164f0:	beq	1650c <test_scan@@Base+0x100>
   164f4:	mov	r5, r0
   164f8:	mov	r0, r4
   164fc:	mov	r1, #10
   16500:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   16504:	cmp	r0, #0
   16508:	strne	r5, [r0]
   1650c:	mov	r0, r4
   16510:	bl	1e600 <flatcc_builder_start_offset_vector@@Base>
   16514:	mov	r0, r4
   16518:	mov	r1, #36	; 0x24
   1651c:	bl	1e940 <flatcc_builder_start_table@@Base>
   16520:	movw	r1, #9545	; 0x2549
   16524:	mov	r0, r4
   16528:	movt	r1, #2
   1652c:	bl	20504 <flatcc_builder_create_string_str@@Base>
   16530:	cmp	r0, #0
   16534:	beq	16550 <test_scan@@Base+0x144>
   16538:	mov	r5, r0
   1653c:	mov	r0, r4
   16540:	mov	r1, #3
   16544:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   16548:	cmp	r0, #0
   1654c:	strne	r5, [r0]
   16550:	movw	r1, #21988	; 0x55e4
   16554:	mov	r0, r4
   16558:	mov	r2, #1
   1655c:	movt	r1, #2
   16560:	bl	1f220 <flatcc_builder_check_required@@Base>
   16564:	cmp	r0, #0
   16568:	beq	1742c <test_scan@@Base+0x1020>
   1656c:	mov	r0, r4
   16570:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   16574:	cmp	r0, #0
   16578:	beq	16588 <test_scan@@Base+0x17c>
   1657c:	mov	r1, r0
   16580:	mov	r0, r4
   16584:	bl	1e05c <flatcc_builder_offset_vector_push@@Base>
   16588:	mov	r0, r4
   1658c:	mov	r1, #36	; 0x24
   16590:	bl	1e940 <flatcc_builder_start_table@@Base>
   16594:	movw	r1, #19234	; 0x4b22
   16598:	mov	r0, r4
   1659c:	movt	r1, #2
   165a0:	bl	20504 <flatcc_builder_create_string_str@@Base>
   165a4:	cmp	r0, #0
   165a8:	beq	165c4 <test_scan@@Base+0x1b8>
   165ac:	mov	r5, r0
   165b0:	mov	r0, r4
   165b4:	mov	r1, #3
   165b8:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   165bc:	cmp	r0, #0
   165c0:	strne	r5, [r0]
   165c4:	movw	r1, #21988	; 0x55e4
   165c8:	mov	r0, r4
   165cc:	mov	r2, #1
   165d0:	movt	r1, #2
   165d4:	bl	1f220 <flatcc_builder_check_required@@Base>
   165d8:	cmp	r0, #0
   165dc:	beq	1742c <test_scan@@Base+0x1020>
   165e0:	mov	r0, r4
   165e4:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   165e8:	cmp	r0, #0
   165ec:	beq	165fc <test_scan@@Base+0x1f0>
   165f0:	mov	r1, r0
   165f4:	mov	r0, r4
   165f8:	bl	1e05c <flatcc_builder_offset_vector_push@@Base>
   165fc:	mov	r0, r4
   16600:	mov	r1, #36	; 0x24
   16604:	bl	1e940 <flatcc_builder_start_table@@Base>
   16608:	movw	r1, #19194	; 0x4afa
   1660c:	mov	r0, r4
   16610:	movt	r1, #2
   16614:	bl	20504 <flatcc_builder_create_string_str@@Base>
   16618:	cmp	r0, #0
   1661c:	beq	16638 <test_scan@@Base+0x22c>
   16620:	mov	r5, r0
   16624:	mov	r0, r4
   16628:	mov	r1, #3
   1662c:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   16630:	cmp	r0, #0
   16634:	strne	r5, [r0]
   16638:	movw	r1, #21988	; 0x55e4
   1663c:	mov	r0, r4
   16640:	mov	r2, #1
   16644:	movt	r1, #2
   16648:	bl	1f220 <flatcc_builder_check_required@@Base>
   1664c:	cmp	r0, #0
   16650:	beq	1742c <test_scan@@Base+0x1020>
   16654:	mov	r0, r4
   16658:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   1665c:	cmp	r0, #0
   16660:	beq	16670 <test_scan@@Base+0x264>
   16664:	mov	r1, r0
   16668:	mov	r0, r4
   1666c:	bl	1e05c <flatcc_builder_offset_vector_push@@Base>
   16670:	mov	r0, r4
   16674:	mov	r1, #36	; 0x24
   16678:	bl	1e940 <flatcc_builder_start_table@@Base>
   1667c:	movw	r1, #10615	; 0x2977
   16680:	mov	r0, r4
   16684:	movt	r1, #2
   16688:	bl	20504 <flatcc_builder_create_string_str@@Base>
   1668c:	cmp	r0, #0
   16690:	beq	166ac <test_scan@@Base+0x2a0>
   16694:	mov	r5, r0
   16698:	mov	r0, r4
   1669c:	mov	r1, #3
   166a0:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   166a4:	cmp	r0, #0
   166a8:	strne	r5, [r0]
   166ac:	movw	r1, #21988	; 0x55e4
   166b0:	mov	r0, r4
   166b4:	mov	r2, #1
   166b8:	movt	r1, #2
   166bc:	bl	1f220 <flatcc_builder_check_required@@Base>
   166c0:	cmp	r0, #0
   166c4:	beq	1742c <test_scan@@Base+0x1020>
   166c8:	mov	r0, r4
   166cc:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   166d0:	cmp	r0, #0
   166d4:	beq	166e4 <test_scan@@Base+0x2d8>
   166d8:	mov	r1, r0
   166dc:	mov	r0, r4
   166e0:	bl	1e05c <flatcc_builder_offset_vector_push@@Base>
   166e4:	mov	r0, r4
   166e8:	mov	r1, #36	; 0x24
   166ec:	bl	1e940 <flatcc_builder_start_table@@Base>
   166f0:	movw	r1, #19194	; 0x4afa
   166f4:	mov	r0, r4
   166f8:	movt	r1, #2
   166fc:	bl	20504 <flatcc_builder_create_string_str@@Base>
   16700:	cmp	r0, #0
   16704:	beq	16720 <test_scan@@Base+0x314>
   16708:	mov	r5, r0
   1670c:	mov	r0, r4
   16710:	mov	r1, #3
   16714:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   16718:	cmp	r0, #0
   1671c:	strne	r5, [r0]
   16720:	movw	r1, #21988	; 0x55e4
   16724:	mov	r0, r4
   16728:	mov	r2, #1
   1672c:	movt	r1, #2
   16730:	bl	1f220 <flatcc_builder_check_required@@Base>
   16734:	cmp	r0, #0
   16738:	beq	1742c <test_scan@@Base+0x1020>
   1673c:	mov	r0, r4
   16740:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   16744:	cmp	r0, #0
   16748:	beq	16758 <test_scan@@Base+0x34c>
   1674c:	mov	r1, r0
   16750:	mov	r0, r4
   16754:	bl	1e05c <flatcc_builder_offset_vector_push@@Base>
   16758:	mov	r0, r4
   1675c:	bl	1e6cc <flatcc_builder_end_offset_vector@@Base>
   16760:	cmp	r0, #0
   16764:	beq	16780 <test_scan@@Base+0x374>
   16768:	mov	r5, r0
   1676c:	mov	r0, r4
   16770:	mov	r1, #11
   16774:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   16778:	cmp	r0, #0
   1677c:	strne	r5, [r0]
   16780:	movw	r1, #21988	; 0x55e4
   16784:	mov	r0, r4
   16788:	mov	r2, #1
   1678c:	movt	r1, #2
   16790:	bl	1f220 <flatcc_builder_check_required@@Base>
   16794:	cmp	r0, #0
   16798:	beq	1742c <test_scan@@Base+0x1020>
   1679c:	mov	r0, r4
   167a0:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   167a4:	mov	r1, r0
   167a8:	mov	r0, r4
   167ac:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   167b0:	sub	r1, fp, #32
   167b4:	mov	r0, r4
   167b8:	bl	20908 <flatcc_builder_finalize_aligned_buffer@@Base>
   167bc:	cmp	r0, #0
   167c0:	beq	1744c <test_scan@@Base+0x1040>
   167c4:	mov	r7, r0
   167c8:	ldr	r0, [r0, #4]
   167cc:	movw	r1, #20301	; 0x4f4d
   167d0:	movt	r1, #21326	; 0x534e
   167d4:	cmp	r0, r1
   167d8:	bne	1744c <test_scan@@Base+0x1040>
   167dc:	ldr	r1, [r7]
   167e0:	mov	r0, r7
   167e4:	ldr	r2, [r0, r1]!
   167e8:	str	r1, [fp, #-48]	; 0xffffffd0
   167ec:	mov	r1, r0
   167f0:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   167f4:	cmp	r2, #27
   167f8:	bls	1746c <test_scan@@Base+0x1060>
   167fc:	ldrh	r8, [r1, #26]
   16800:	cmp	r8, #0
   16804:	beq	1746c <test_scan@@Base+0x1060>
   16808:	ldrh	r3, [r1, #14]
   1680c:	cmp	r3, #0
   16810:	mov	r2, r3
   16814:	str	r3, [fp, #-52]	; 0xffffffcc
   16818:	beq	17490 <test_scan@@Base+0x1084>
   1681c:	ldrh	r2, [r1, #24]
   16820:	cmp	r2, #0
   16824:	mov	r1, r2
   16828:	str	r2, [fp, #-44]	; 0xffffffd4
   1682c:	beq	174a8 <test_scan@@Base+0x109c>
   16830:	mov	r2, r0
   16834:	ldr	r1, [r2, r8]!
   16838:	add	r2, r2, r1
   1683c:	add	r2, r2, #4
   16840:	ldr	sl, [r2, #-4]
   16844:	str	r2, [sp, #56]	; 0x38
   16848:	cmp	sl, #0
   1684c:	beq	16a8c <test_scan@@Base+0x680>
   16850:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16854:	mov	r3, r0
   16858:	movw	r6, #19234	; 0x4b22
   1685c:	mov	r4, #0
   16860:	movt	r6, #2
   16864:	ldr	r2, [r3, r2]!
   16868:	str	r3, [sp, #36]	; 0x24
   1686c:	str	r2, [sp, #40]	; 0x28
   16870:	ldr	r2, [fp, #-44]	; 0xffffffd4
   16874:	ldr	r2, [r0, r2]!
   16878:	add	r0, r0, r2
   1687c:	str	r2, [sp, #48]	; 0x30
   16880:	add	r0, r0, #4
   16884:	str	r0, [sp, #44]	; 0x2c
   16888:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1688c:	add	r9, r1, r0
   16890:	add	r0, r9, r8
   16894:	add	r0, r0, r7
   16898:	add	r5, r0, #8
   1689c:	str	r0, [sp, #52]	; 0x34
   168a0:	cmp	sl, r4
   168a4:	beq	1825c <test_scan@@Base+0x1e50>
   168a8:	ldr	r0, [r5, #-4]
   168ac:	add	r1, r5, r0
   168b0:	ldr	r1, [r1, #-4]
   168b4:	sub	r1, r0, r1
   168b8:	add	r1, r5, r1
   168bc:	ldrh	r2, [r1, #-4]
   168c0:	cmp	r2, #12
   168c4:	bcc	17994 <test_scan@@Base+0x1588>
   168c8:	ldrh	r1, [r1, #6]
   168cc:	cmp	r1, #0
   168d0:	beq	17994 <test_scan@@Base+0x1588>
   168d4:	add	r2, r0, r1
   168d8:	add	r2, r5, r2
   168dc:	ldr	r2, [r2, #-4]
   168e0:	add	r0, r2, r0
   168e4:	add	r0, r0, r1
   168e8:	mov	r1, r6
   168ec:	add	r0, r5, r0
   168f0:	bl	12e8c <strcmp@plt>
   168f4:	cmp	r0, #0
   168f8:	beq	16910 <test_scan@@Base+0x504>
   168fc:	add	r4, r4, #1
   16900:	add	r5, r5, #4
   16904:	cmp	r4, sl
   16908:	bcc	168a0 <test_scan@@Base+0x494>
   1690c:	b	16a8c <test_scan@@Base+0x680>
   16910:	cmp	r4, #1
   16914:	bne	16a8c <test_scan@@Base+0x680>
   16918:	add	r0, r9, sl, lsl #2
   1691c:	movw	r6, #19234	; 0x4b22
   16920:	str	r9, [sp, #24]
   16924:	str	r8, [sp, #28]
   16928:	str	r7, [sp, #32]
   1692c:	sub	r9, sl, #1
   16930:	mov	r4, #0
   16934:	movt	r6, #2
   16938:	add	r0, r0, r8
   1693c:	rsb	r8, sl, #0
   16940:	add	r5, r7, r0
   16944:	mov	r7, #0
   16948:	cmp	r8, r7
   1694c:	beq	16ab0 <test_scan@@Base+0x6a4>
   16950:	add	r0, r9, r7
   16954:	cmp	sl, r0
   16958:	bls	1825c <test_scan@@Base+0x1e50>
   1695c:	ldr	r0, [r5, r7, lsl #2]
   16960:	add	r1, r5, r0
   16964:	ldr	r1, [r1, r7, lsl #2]
   16968:	sub	r1, r0, r1
   1696c:	add	r1, r4, r1
   16970:	add	r1, r5, r1
   16974:	ldrh	r2, [r1]
   16978:	cmp	r2, #12
   1697c:	bcc	17994 <test_scan@@Base+0x1588>
   16980:	ldrh	r1, [r1, #10]
   16984:	cmp	r1, #0
   16988:	beq	17994 <test_scan@@Base+0x1588>
   1698c:	add	r2, r0, r1
   16990:	add	r2, r5, r2
   16994:	ldr	r2, [r2, r7, lsl #2]
   16998:	add	r0, r2, r0
   1699c:	add	r0, r0, r1
   169a0:	mov	r1, r6
   169a4:	add	r0, r4, r0
   169a8:	add	r0, r5, r0
   169ac:	add	r0, r0, #4
   169b0:	bl	12e8c <strcmp@plt>
   169b4:	sub	r4, r4, #4
   169b8:	sub	r7, r7, #1
   169bc:	cmp	r0, #0
   169c0:	bne	16948 <test_scan@@Base+0x53c>
   169c4:	rsb	r0, sl, #1
   169c8:	cmp	r0, r7
   169cc:	bne	16ab0 <test_scan@@Base+0x6a4>
   169d0:	str	r0, [sp, #20]
   169d4:	ldr	r0, [sp, #52]	; 0x34
   169d8:	mov	r7, #0
   169dc:	add	r4, r0, #8
   169e0:	cmp	sl, r7
   169e4:	beq	1825c <test_scan@@Base+0x1e50>
   169e8:	ldr	r0, [r4, #-4]
   169ec:	add	r1, r4, r0
   169f0:	ldr	r1, [r1, #-4]
   169f4:	sub	r1, r0, r1
   169f8:	add	r1, r4, r1
   169fc:	ldrh	r2, [r1, #-4]
   16a00:	cmp	r2, #12
   16a04:	bcc	17994 <test_scan@@Base+0x1588>
   16a08:	ldrh	r1, [r1, #6]
   16a0c:	cmp	r1, #0
   16a10:	beq	17994 <test_scan@@Base+0x1588>
   16a14:	add	r2, r0, r1
   16a18:	add	r2, r4, r2
   16a1c:	ldr	r2, [r2, #-4]
   16a20:	add	r0, r2, r0
   16a24:	add	r0, r0, r1
   16a28:	movw	r1, #10700	; 0x29cc
   16a2c:	add	r0, r4, r0
   16a30:	movt	r1, #2
   16a34:	ldr	r6, [r0, #-4]
   16a38:	cmp	r6, #5
   16a3c:	mov	r2, r6
   16a40:	movcs	r2, #5
   16a44:	bl	12f70 <strncmp@plt>
   16a48:	cmp	r0, #0
   16a4c:	mov	r1, r0
   16a50:	mov	r2, #0
   16a54:	mvneq	r1, #0
   16a58:	cmp	r6, #5
   16a5c:	movwhi	r2, #1
   16a60:	cmp	r0, #0
   16a64:	movne	r2, r1
   16a68:	cmp	r6, #5
   16a6c:	movcc	r2, r1
   16a70:	cmp	r2, #0
   16a74:	beq	16abc <test_scan@@Base+0x6b0>
   16a78:	add	r7, r7, #1
   16a7c:	add	r4, r4, #4
   16a80:	cmp	r7, sl
   16a84:	bcc	169e0 <test_scan@@Base+0x5d4>
   16a88:	b	16d1c <test_scan@@Base+0x910>
   16a8c:	movw	r0, #19656	; 0x4cc8
   16a90:	movt	r0, #2
   16a94:	bl	12ee0 <puts@plt>
   16a98:	mvn	r5, #0
   16a9c:	mov	r0, r7
   16aa0:	bl	20a08 <flatcc_builder_aligned_free@@Base>
   16aa4:	mov	r0, r5
   16aa8:	sub	sp, fp, #28
   16aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ab0:	movw	r0, #19655	; 0x4cc7
   16ab4:	movt	r0, #2
   16ab8:	b	16d24 <test_scan@@Base+0x918>
   16abc:	cmp	r7, #1
   16ac0:	bne	16d1c <test_scan@@Base+0x910>
   16ac4:	mov	r6, #0
   16ac8:	mov	r7, #0
   16acc:	cmp	r8, r7
   16ad0:	beq	16d1c <test_scan@@Base+0x910>
   16ad4:	add	r0, r9, r7
   16ad8:	cmp	sl, r0
   16adc:	bls	1825c <test_scan@@Base+0x1e50>
   16ae0:	ldr	r0, [r5, r7, lsl #2]
   16ae4:	add	r1, r5, r0
   16ae8:	ldr	r1, [r1, r7, lsl #2]
   16aec:	sub	r1, r0, r1
   16af0:	add	r1, r6, r1
   16af4:	add	r1, r5, r1
   16af8:	ldrh	r2, [r1]
   16afc:	cmp	r2, #12
   16b00:	bcc	17994 <test_scan@@Base+0x1588>
   16b04:	ldrh	r1, [r1, #10]
   16b08:	cmp	r1, #0
   16b0c:	beq	17994 <test_scan@@Base+0x1588>
   16b10:	add	r2, r0, r1
   16b14:	add	r2, r5, r2
   16b18:	ldr	r2, [r2, r7, lsl #2]
   16b1c:	add	r0, r2, r0
   16b20:	add	r0, r0, r1
   16b24:	add	r1, r5, r0
   16b28:	add	r0, r6, r0
   16b2c:	ldr	r4, [r1, r7, lsl #2]
   16b30:	movw	r1, #10700	; 0x29cc
   16b34:	add	r0, r5, r0
   16b38:	movt	r1, #2
   16b3c:	add	r0, r0, #4
   16b40:	cmp	r4, #5
   16b44:	mov	r2, r4
   16b48:	movcs	r2, #5
   16b4c:	bl	12f70 <strncmp@plt>
   16b50:	cmp	r0, #0
   16b54:	mov	r1, r0
   16b58:	mov	r2, #0
   16b5c:	sub	r6, r6, #4
   16b60:	sub	r7, r7, #1
   16b64:	mvneq	r1, #0
   16b68:	cmp	r4, #5
   16b6c:	movwhi	r2, #1
   16b70:	cmp	r0, #0
   16b74:	movne	r2, r1
   16b78:	cmp	r4, #5
   16b7c:	movcc	r2, r1
   16b80:	cmp	r2, #0
   16b84:	bne	16acc <test_scan@@Base+0x6c0>
   16b88:	ldr	r0, [sp, #20]
   16b8c:	cmp	r0, r7
   16b90:	bne	16d1c <test_scan@@Base+0x910>
   16b94:	cmp	sl, #3
   16b98:	bcc	16c18 <test_scan@@Base+0x80c>
   16b9c:	ldr	r0, [sp, #52]	; 0x34
   16ba0:	movw	r6, #19234	; 0x4b22
   16ba4:	mov	r7, #2
   16ba8:	movt	r6, #2
   16bac:	add	r4, r0, #12
   16bb0:	cmp	sl, r7
   16bb4:	bls	1825c <test_scan@@Base+0x1e50>
   16bb8:	ldr	r0, [r4]
   16bbc:	ldr	r1, [r4, r0]
   16bc0:	sub	r1, r0, r1
   16bc4:	add	r1, r4, r1
   16bc8:	ldrh	r2, [r1]
   16bcc:	cmp	r2, #12
   16bd0:	bcc	17994 <test_scan@@Base+0x1588>
   16bd4:	ldrh	r1, [r1, #10]
   16bd8:	cmp	r1, #0
   16bdc:	beq	17994 <test_scan@@Base+0x1588>
   16be0:	add	r2, r0, r1
   16be4:	ldr	r2, [r4, r2]
   16be8:	add	r0, r2, r0
   16bec:	add	r0, r0, r1
   16bf0:	mov	r1, r6
   16bf4:	add	r0, r4, r0
   16bf8:	add	r0, r0, #4
   16bfc:	bl	12e8c <strcmp@plt>
   16c00:	cmp	r0, #0
   16c04:	beq	16d40 <test_scan@@Base+0x934>
   16c08:	add	r7, r7, #1
   16c0c:	add	r4, r4, #4
   16c10:	cmp	r7, sl
   16c14:	bcc	16bb0 <test_scan@@Base+0x7a4>
   16c18:	ldr	r0, [sp, #52]	; 0x34
   16c1c:	movw	r6, #10707	; 0x29d3
   16c20:	mov	r7, #0
   16c24:	movt	r6, #2
   16c28:	add	r4, r0, #8
   16c2c:	cmp	sl, r7
   16c30:	beq	1825c <test_scan@@Base+0x1e50>
   16c34:	ldr	r0, [r4, #-4]
   16c38:	add	r1, r4, r0
   16c3c:	ldr	r1, [r1, #-4]
   16c40:	sub	r1, r0, r1
   16c44:	add	r1, r4, r1
   16c48:	ldrh	r2, [r1, #-4]
   16c4c:	cmp	r2, #12
   16c50:	bcc	17994 <test_scan@@Base+0x1588>
   16c54:	ldrh	r1, [r1, #6]
   16c58:	cmp	r1, #0
   16c5c:	beq	17994 <test_scan@@Base+0x1588>
   16c60:	add	r2, r0, r1
   16c64:	add	r2, r4, r2
   16c68:	ldr	r2, [r2, #-4]
   16c6c:	add	r0, r2, r0
   16c70:	add	r0, r0, r1
   16c74:	mov	r1, r6
   16c78:	add	r0, r4, r0
   16c7c:	bl	12e8c <strcmp@plt>
   16c80:	cmp	r0, #0
   16c84:	beq	16d34 <test_scan@@Base+0x928>
   16c88:	add	r7, r7, #1
   16c8c:	add	r4, r4, #4
   16c90:	cmp	r7, sl
   16c94:	bcc	16c2c <test_scan@@Base+0x820>
   16c98:	ldr	r0, [sp, #52]	; 0x34
   16c9c:	movw	r6, #9545	; 0x2549
   16ca0:	mov	r4, #0
   16ca4:	movt	r6, #2
   16ca8:	add	r7, r0, #8
   16cac:	cmp	sl, r4
   16cb0:	beq	1825c <test_scan@@Base+0x1e50>
   16cb4:	ldr	r0, [r7, #-4]
   16cb8:	add	r1, r7, r0
   16cbc:	ldr	r1, [r1, #-4]
   16cc0:	sub	r1, r0, r1
   16cc4:	add	r1, r7, r1
   16cc8:	ldrh	r2, [r1, #-4]
   16ccc:	cmp	r2, #12
   16cd0:	bcc	17994 <test_scan@@Base+0x1588>
   16cd4:	ldrh	r1, [r1, #6]
   16cd8:	cmp	r1, #0
   16cdc:	beq	17994 <test_scan@@Base+0x1588>
   16ce0:	add	r2, r0, r1
   16ce4:	add	r2, r7, r2
   16ce8:	ldr	r2, [r2, #-4]
   16cec:	add	r0, r2, r0
   16cf0:	add	r0, r0, r1
   16cf4:	mov	r1, r6
   16cf8:	add	r0, r7, r0
   16cfc:	bl	12e8c <strcmp@plt>
   16d00:	cmp	r0, #0
   16d04:	beq	16d4c <test_scan@@Base+0x940>
   16d08:	add	r4, r4, #1
   16d0c:	add	r7, r7, #4
   16d10:	cmp	r4, sl
   16d14:	bcc	16cac <test_scan@@Base+0x8a0>
   16d18:	b	16d54 <test_scan@@Base+0x948>
   16d1c:	movw	r0, #19617	; 0x4ca1
   16d20:	movt	r0, #2
   16d24:	bl	12ee0 <puts@plt>
   16d28:	mvn	r5, #0
   16d2c:	ldr	r7, [sp, #32]
   16d30:	b	16a9c <test_scan@@Base+0x690>
   16d34:	movw	r0, #19552	; 0x4c60
   16d38:	movt	r0, #2
   16d3c:	b	16d24 <test_scan@@Base+0x918>
   16d40:	movw	r0, #19574	; 0x4c76
   16d44:	movt	r0, #2
   16d48:	b	16d24 <test_scan@@Base+0x918>
   16d4c:	cmp	r4, #0
   16d50:	beq	16d60 <test_scan@@Base+0x954>
   16d54:	movw	r0, #19534	; 0x4c4e
   16d58:	movt	r0, #2
   16d5c:	b	16d24 <test_scan@@Base+0x918>
   16d60:	ldr	r0, [sp, #52]	; 0x34
   16d64:	movw	r6, #19194	; 0x4afa
   16d68:	mov	r4, #0
   16d6c:	movt	r6, #2
   16d70:	add	r7, r0, #8
   16d74:	cmp	sl, r4
   16d78:	beq	1825c <test_scan@@Base+0x1e50>
   16d7c:	ldr	r0, [r7, #-4]
   16d80:	add	r1, r7, r0
   16d84:	ldr	r1, [r1, #-4]
   16d88:	sub	r1, r0, r1
   16d8c:	add	r1, r7, r1
   16d90:	ldrh	r2, [r1, #-4]
   16d94:	cmp	r2, #12
   16d98:	bcc	17994 <test_scan@@Base+0x1588>
   16d9c:	ldrh	r1, [r1, #6]
   16da0:	cmp	r1, #0
   16da4:	beq	17994 <test_scan@@Base+0x1588>
   16da8:	add	r2, r0, r1
   16dac:	add	r2, r7, r2
   16db0:	ldr	r2, [r2, #-4]
   16db4:	add	r0, r2, r0
   16db8:	add	r0, r0, r1
   16dbc:	mov	r1, r6
   16dc0:	add	r0, r7, r0
   16dc4:	bl	12e8c <strcmp@plt>
   16dc8:	cmp	r0, #0
   16dcc:	beq	16de4 <test_scan@@Base+0x9d8>
   16dd0:	add	r4, r4, #1
   16dd4:	add	r7, r7, #4
   16dd8:	cmp	r4, sl
   16ddc:	bcc	16d74 <test_scan@@Base+0x968>
   16de0:	b	17080 <test_scan@@Base+0xc74>
   16de4:	cmp	r4, #2
   16de8:	bne	17080 <test_scan@@Base+0xc74>
   16dec:	movw	r6, #19194	; 0x4afa
   16df0:	mov	r4, #0
   16df4:	mov	r7, #0
   16df8:	movt	r6, #2
   16dfc:	cmp	r8, r7
   16e00:	beq	17080 <test_scan@@Base+0xc74>
   16e04:	add	r0, r9, r7
   16e08:	cmp	sl, r0
   16e0c:	bls	1825c <test_scan@@Base+0x1e50>
   16e10:	ldr	r0, [r5, r7, lsl #2]
   16e14:	add	r1, r5, r0
   16e18:	ldr	r1, [r1, r7, lsl #2]
   16e1c:	sub	r1, r0, r1
   16e20:	add	r1, r4, r1
   16e24:	add	r1, r5, r1
   16e28:	ldrh	r2, [r1]
   16e2c:	cmp	r2, #12
   16e30:	bcc	17994 <test_scan@@Base+0x1588>
   16e34:	ldrh	r1, [r1, #10]
   16e38:	cmp	r1, #0
   16e3c:	beq	17994 <test_scan@@Base+0x1588>
   16e40:	add	r2, r0, r1
   16e44:	add	r2, r5, r2
   16e48:	ldr	r2, [r2, r7, lsl #2]
   16e4c:	add	r0, r2, r0
   16e50:	add	r0, r0, r1
   16e54:	mov	r1, r6
   16e58:	add	r0, r4, r0
   16e5c:	add	r0, r5, r0
   16e60:	add	r0, r0, #4
   16e64:	bl	12e8c <strcmp@plt>
   16e68:	sub	r4, r4, #4
   16e6c:	sub	r7, r7, #1
   16e70:	cmp	r0, #0
   16e74:	bne	16dfc <test_scan@@Base+0x9f0>
   16e78:	rsb	r0, sl, #4
   16e7c:	cmp	r0, r7
   16e80:	str	r0, [sp, #20]
   16e84:	bne	17080 <test_scan@@Base+0xc74>
   16e88:	mov	r6, #0
   16e8c:	mov	r7, #0
   16e90:	cmp	r8, r7
   16e94:	beq	17074 <test_scan@@Base+0xc68>
   16e98:	add	r0, r9, r7
   16e9c:	cmp	sl, r0
   16ea0:	bls	1825c <test_scan@@Base+0x1e50>
   16ea4:	ldr	r0, [r5, r7, lsl #2]
   16ea8:	add	r1, r5, r0
   16eac:	ldr	r1, [r1, r7, lsl #2]
   16eb0:	sub	r1, r0, r1
   16eb4:	add	r1, r6, r1
   16eb8:	add	r1, r5, r1
   16ebc:	ldrh	r2, [r1]
   16ec0:	cmp	r2, #12
   16ec4:	bcc	17994 <test_scan@@Base+0x1588>
   16ec8:	ldrh	r1, [r1, #10]
   16ecc:	cmp	r1, #0
   16ed0:	beq	17994 <test_scan@@Base+0x1588>
   16ed4:	add	r2, r0, r1
   16ed8:	add	r2, r5, r2
   16edc:	ldr	r2, [r2, r7, lsl #2]
   16ee0:	add	r0, r2, r0
   16ee4:	add	r0, r0, r1
   16ee8:	add	r1, r5, r0
   16eec:	add	r0, r6, r0
   16ef0:	ldr	r4, [r1, r7, lsl #2]
   16ef4:	movw	r1, #10768	; 0x2a10
   16ef8:	add	r0, r5, r0
   16efc:	movt	r1, #2
   16f00:	add	r0, r0, #4
   16f04:	cmp	r4, #8
   16f08:	mov	r2, r4
   16f0c:	movcs	r2, #8
   16f10:	bl	12f70 <strncmp@plt>
   16f14:	cmp	r0, #0
   16f18:	mov	r1, r0
   16f1c:	mov	r2, #0
   16f20:	sub	r6, r6, #4
   16f24:	sub	r7, r7, #1
   16f28:	mvneq	r1, #0
   16f2c:	cmp	r4, #8
   16f30:	movwhi	r2, #1
   16f34:	cmp	r0, #0
   16f38:	movne	r2, r1
   16f3c:	cmp	r4, #8
   16f40:	movcc	r2, r1
   16f44:	cmp	r2, #0
   16f48:	bne	16e90 <test_scan@@Base+0xa84>
   16f4c:	ldr	r0, [sp, #20]
   16f50:	cmp	r0, r7
   16f54:	bne	17074 <test_scan@@Base+0xc68>
   16f58:	ldr	r0, [sp, #24]
   16f5c:	cmp	sl, #3
   16f60:	ldr	r1, [sp, #28]
   16f64:	mov	r2, sl
   16f68:	movw	r8, #10768	; 0x2a10
   16f6c:	mov	r6, #0
   16f70:	mov	r7, #0
   16f74:	movcs	r2, #3
   16f78:	movt	r8, #2
   16f7c:	str	r2, [sp, #20]
   16f80:	add	r0, r0, r2, lsl #2
   16f84:	add	r1, r0, r1
   16f88:	ldr	r0, [sp, #32]
   16f8c:	str	r1, [sp, #12]
   16f90:	add	r9, r0, r1
   16f94:	sub	r0, r2, #1
   16f98:	str	r0, [sp, #16]
   16f9c:	ldr	r0, [sp, #20]
   16fa0:	add	r0, r0, r7
   16fa4:	cmp	r0, #2
   16fa8:	bcc	17074 <test_scan@@Base+0xc68>
   16fac:	ldr	r0, [sp, #16]
   16fb0:	add	r0, r0, r7
   16fb4:	cmp	sl, r0
   16fb8:	bls	1825c <test_scan@@Base+0x1e50>
   16fbc:	ldr	r0, [r9, r7, lsl #2]
   16fc0:	mov	r2, r9
   16fc4:	add	r1, r9, r0
   16fc8:	ldr	r1, [r1, r7, lsl #2]
   16fcc:	sub	r1, r0, r1
   16fd0:	add	r1, r6, r1
   16fd4:	add	r1, r9, r1
   16fd8:	ldrh	r2, [r1]
   16fdc:	cmp	r2, #12
   16fe0:	bcc	17994 <test_scan@@Base+0x1588>
   16fe4:	ldrh	r1, [r1, #10]
   16fe8:	cmp	r1, #0
   16fec:	beq	17994 <test_scan@@Base+0x1588>
   16ff0:	add	r2, r0, r1
   16ff4:	add	r2, r9, r2
   16ff8:	ldr	r2, [r2, r7, lsl #2]
   16ffc:	add	r0, r2, r0
   17000:	add	r0, r0, r1
   17004:	add	r1, r9, r0
   17008:	add	r0, r6, r0
   1700c:	ldr	r4, [r1, r7, lsl #2]
   17010:	add	r0, r9, r0
   17014:	mov	r1, r8
   17018:	add	r0, r0, #4
   1701c:	cmp	r4, #8
   17020:	mov	r2, r4
   17024:	movcs	r2, #8
   17028:	bl	12f70 <strncmp@plt>
   1702c:	cmp	r0, #0
   17030:	mov	r1, r0
   17034:	mov	r2, #0
   17038:	sub	r6, r6, #4
   1703c:	sub	r7, r7, #1
   17040:	mvneq	r1, #0
   17044:	cmp	r4, #8
   17048:	movwhi	r2, #1
   1704c:	cmp	r0, #0
   17050:	movne	r2, r1
   17054:	cmp	r4, #8
   17058:	movcc	r2, r1
   1705c:	cmp	r2, #0
   17060:	bne	16f9c <test_scan@@Base+0xb90>
   17064:	ldr	r0, [sp, #20]
   17068:	add	r0, r0, r7
   1706c:	cmp	r0, #2
   17070:	beq	1708c <test_scan@@Base+0xc80>
   17074:	movw	r0, #19508	; 0x4c34
   17078:	movt	r0, #2
   1707c:	b	16d24 <test_scan@@Base+0x918>
   17080:	movw	r0, #19447	; 0x4bf7
   17084:	movt	r0, #2
   17088:	b	16d24 <test_scan@@Base+0x918>
   1708c:	cmp	sl, #3
   17090:	bcc	17264 <test_scan@@Base+0xe58>
   17094:	ldr	r0, [sp, #52]	; 0x34
   17098:	movw	r6, #19194	; 0x4afa
   1709c:	mov	r4, #2
   170a0:	movt	r6, #2
   170a4:	add	r7, r0, #12
   170a8:	cmp	sl, r4
   170ac:	bls	1825c <test_scan@@Base+0x1e50>
   170b0:	ldr	r0, [r7]
   170b4:	ldr	r1, [r7, r0]
   170b8:	sub	r1, r0, r1
   170bc:	add	r1, r7, r1
   170c0:	ldrh	r2, [r1]
   170c4:	cmp	r2, #12
   170c8:	bcc	17994 <test_scan@@Base+0x1588>
   170cc:	ldrh	r1, [r1, #10]
   170d0:	cmp	r1, #0
   170d4:	beq	17994 <test_scan@@Base+0x1588>
   170d8:	add	r2, r0, r1
   170dc:	ldr	r2, [r7, r2]
   170e0:	add	r0, r2, r0
   170e4:	add	r0, r0, r1
   170e8:	mov	r1, r6
   170ec:	add	r0, r7, r0
   170f0:	add	r0, r0, #4
   170f4:	bl	12e8c <strcmp@plt>
   170f8:	cmp	r0, #0
   170fc:	beq	17114 <test_scan@@Base+0xd08>
   17100:	add	r4, r4, #1
   17104:	add	r7, r7, #4
   17108:	cmp	r4, sl
   1710c:	bcc	170a8 <test_scan@@Base+0xc9c>
   17110:	b	17264 <test_scan@@Base+0xe58>
   17114:	cmp	r4, #2
   17118:	bne	17264 <test_scan@@Base+0xe58>
   1711c:	ldr	r0, [sp, #52]	; 0x34
   17120:	movw	r8, #10768	; 0x2a10
   17124:	mov	r7, #2
   17128:	movt	r8, #2
   1712c:	add	r4, r0, #12
   17130:	cmp	sl, r7
   17134:	bls	1825c <test_scan@@Base+0x1e50>
   17138:	ldr	r0, [r4]
   1713c:	ldr	r1, [r4, r0]
   17140:	sub	r1, r0, r1
   17144:	add	r1, r4, r1
   17148:	ldrh	r2, [r1]
   1714c:	cmp	r2, #12
   17150:	bcc	17994 <test_scan@@Base+0x1588>
   17154:	ldrh	r1, [r1, #10]
   17158:	cmp	r1, #0
   1715c:	beq	17994 <test_scan@@Base+0x1588>
   17160:	add	r2, r0, r1
   17164:	ldr	r2, [r4, r2]
   17168:	add	r0, r2, r0
   1716c:	add	r0, r0, r1
   17170:	mov	r1, r4
   17174:	ldr	r6, [r1, r0]!
   17178:	add	r0, r1, #4
   1717c:	mov	r1, r8
   17180:	cmp	r6, #8
   17184:	mov	r2, r6
   17188:	movcs	r2, #8
   1718c:	bl	12f70 <strncmp@plt>
   17190:	cmp	r0, #0
   17194:	mov	r1, r0
   17198:	mov	r2, #0
   1719c:	mvneq	r1, #0
   171a0:	cmp	r6, #8
   171a4:	movwhi	r2, #1
   171a8:	cmp	r0, #0
   171ac:	movne	r2, r1
   171b0:	cmp	r6, #8
   171b4:	movcc	r2, r1
   171b8:	cmp	r2, #0
   171bc:	beq	171d4 <test_scan@@Base+0xdc8>
   171c0:	add	r7, r7, #1
   171c4:	add	r4, r4, #4
   171c8:	cmp	r7, sl
   171cc:	bcc	17130 <test_scan@@Base+0xd24>
   171d0:	b	17264 <test_scan@@Base+0xe58>
   171d4:	cmp	r7, #2
   171d8:	bne	17264 <test_scan@@Base+0xe58>
   171dc:	cmp	sl, #4
   171e0:	bcc	17420 <test_scan@@Base+0x1014>
   171e4:	ldr	r0, [sp, #52]	; 0x34
   171e8:	movw	r6, #19194	; 0x4afa
   171ec:	mov	r4, #3
   171f0:	movt	r6, #2
   171f4:	add	r7, r0, #16
   171f8:	cmp	sl, r4
   171fc:	bls	1825c <test_scan@@Base+0x1e50>
   17200:	ldr	r0, [r7]
   17204:	ldr	r1, [r7, r0]
   17208:	sub	r1, r0, r1
   1720c:	add	r1, r7, r1
   17210:	ldrh	r2, [r1]
   17214:	cmp	r2, #12
   17218:	bcc	17994 <test_scan@@Base+0x1588>
   1721c:	ldrh	r1, [r1, #10]
   17220:	cmp	r1, #0
   17224:	beq	17994 <test_scan@@Base+0x1588>
   17228:	add	r2, r0, r1
   1722c:	ldr	r2, [r7, r2]
   17230:	add	r0, r2, r0
   17234:	add	r0, r0, r1
   17238:	mov	r1, r6
   1723c:	add	r0, r7, r0
   17240:	add	r0, r0, #4
   17244:	bl	12e8c <strcmp@plt>
   17248:	cmp	r0, #0
   1724c:	beq	17270 <test_scan@@Base+0xe64>
   17250:	add	r4, r4, #1
   17254:	add	r7, r7, #4
   17258:	cmp	r4, sl
   1725c:	bcc	171f8 <test_scan@@Base+0xdec>
   17260:	b	17420 <test_scan@@Base+0x1014>
   17264:	movw	r0, #19466	; 0x4c0a
   17268:	movt	r0, #2
   1726c:	b	16d24 <test_scan@@Base+0x918>
   17270:	cmp	r4, #4
   17274:	bne	17420 <test_scan@@Base+0x1014>
   17278:	cmp	sl, #2
   1727c:	bcc	17564 <test_scan@@Base+0x1158>
   17280:	ldr	r0, [sp, #52]	; 0x34
   17284:	movw	r6, #10707	; 0x29d3
   17288:	mov	r7, #1
   1728c:	movt	r6, #2
   17290:	add	r4, r0, #12
   17294:	cmp	sl, r7
   17298:	bls	1825c <test_scan@@Base+0x1e50>
   1729c:	ldr	r0, [r4, #-4]
   172a0:	add	r1, r4, r0
   172a4:	ldr	r1, [r1, #-4]
   172a8:	sub	r1, r0, r1
   172ac:	add	r1, r4, r1
   172b0:	ldrh	r2, [r1, #-4]
   172b4:	cmp	r2, #12
   172b8:	bcc	17994 <test_scan@@Base+0x1588>
   172bc:	ldrh	r1, [r1, #6]
   172c0:	cmp	r1, #0
   172c4:	beq	17994 <test_scan@@Base+0x1588>
   172c8:	add	r2, r0, r1
   172cc:	add	r2, r4, r2
   172d0:	ldr	r2, [r2, #-4]
   172d4:	add	r0, r2, r0
   172d8:	add	r0, r0, r1
   172dc:	mov	r1, r6
   172e0:	add	r0, r4, r0
   172e4:	bl	12e8c <strcmp@plt>
   172e8:	cmp	r0, #0
   172ec:	beq	17484 <test_scan@@Base+0x1078>
   172f0:	ldr	r0, [sp, #20]
   172f4:	add	r7, r7, #1
   172f8:	add	r4, r4, #4
   172fc:	cmp	r7, r0
   17300:	bcc	17294 <test_scan@@Base+0xe88>
   17304:	cmp	sl, #2
   17308:	bcc	17564 <test_scan@@Base+0x1158>
   1730c:	ldr	r0, [sp, #52]	; 0x34
   17310:	movw	r6, #9545	; 0x2549
   17314:	mov	r7, #1
   17318:	movt	r6, #2
   1731c:	add	r4, r0, #12
   17320:	cmp	sl, r7
   17324:	bls	1825c <test_scan@@Base+0x1e50>
   17328:	ldr	r0, [r4, #-4]
   1732c:	add	r1, r4, r0
   17330:	ldr	r1, [r1, #-4]
   17334:	sub	r1, r0, r1
   17338:	add	r1, r4, r1
   1733c:	ldrh	r2, [r1, #-4]
   17340:	cmp	r2, #12
   17344:	bcc	17994 <test_scan@@Base+0x1588>
   17348:	ldrh	r1, [r1, #6]
   1734c:	cmp	r1, #0
   17350:	beq	17994 <test_scan@@Base+0x1588>
   17354:	add	r2, r0, r1
   17358:	add	r2, r4, r2
   1735c:	ldr	r2, [r2, #-4]
   17360:	add	r0, r2, r0
   17364:	add	r0, r0, r1
   17368:	mov	r1, r6
   1736c:	add	r0, r4, r0
   17370:	bl	12e8c <strcmp@plt>
   17374:	cmp	r0, #0
   17378:	beq	174c8 <test_scan@@Base+0x10bc>
   1737c:	ldr	r0, [sp, #20]
   17380:	add	r7, r7, #1
   17384:	add	r4, r4, #4
   17388:	cmp	r7, r0
   1738c:	bcc	17320 <test_scan@@Base+0xf14>
   17390:	cmp	sl, #2
   17394:	bcc	17564 <test_scan@@Base+0x1158>
   17398:	ldr	r0, [sp, #52]	; 0x34
   1739c:	movw	r6, #19234	; 0x4b22
   173a0:	mov	r4, #1
   173a4:	movt	r6, #2
   173a8:	add	r7, r0, #12
   173ac:	cmp	sl, r4
   173b0:	bls	1825c <test_scan@@Base+0x1e50>
   173b4:	ldr	r0, [r7, #-4]
   173b8:	add	r1, r7, r0
   173bc:	ldr	r1, [r1, #-4]
   173c0:	sub	r1, r0, r1
   173c4:	add	r1, r7, r1
   173c8:	ldrh	r2, [r1, #-4]
   173cc:	cmp	r2, #12
   173d0:	bcc	17994 <test_scan@@Base+0x1588>
   173d4:	ldrh	r1, [r1, #6]
   173d8:	cmp	r1, #0
   173dc:	beq	17994 <test_scan@@Base+0x1588>
   173e0:	add	r2, r0, r1
   173e4:	add	r2, r7, r2
   173e8:	ldr	r2, [r2, #-4]
   173ec:	add	r0, r2, r0
   173f0:	add	r0, r0, r1
   173f4:	mov	r1, r6
   173f8:	add	r0, r7, r0
   173fc:	bl	12e8c <strcmp@plt>
   17400:	cmp	r0, #0
   17404:	beq	174d4 <test_scan@@Base+0x10c8>
   17408:	ldr	r0, [sp, #20]
   1740c:	add	r4, r4, #1
   17410:	add	r7, r7, #4
   17414:	cmp	r4, r0
   17418:	bcc	173ac <test_scan@@Base+0xfa0>
   1741c:	b	17564 <test_scan@@Base+0x1158>
   17420:	movw	r0, #19439	; 0x4bef
   17424:	movt	r0, #2
   17428:	b	16d24 <test_scan@@Base+0x918>
   1742c:	movw	r0, #12876	; 0x324c
   17430:	movw	r1, #12586	; 0x312a
   17434:	movw	r3, #13038	; 0x32ee
   17438:	mov	r2, #235	; 0xeb
   1743c:	movt	r0, #2
   17440:	movt	r1, #2
   17444:	movt	r3, #2
   17448:	bl	12f88 <__assert_fail@plt>
   1744c:	movw	r0, #12203	; 0x2fab
   17450:	movw	r1, #12241	; 0x2fd1
   17454:	movw	r3, #13835	; 0x360b
   17458:	movw	r2, #711	; 0x2c7
   1745c:	movt	r0, #2
   17460:	movt	r1, #2
   17464:	movt	r3, #2
   17468:	bl	12f88 <__assert_fail@plt>
   1746c:	movw	r0, #10645	; 0x2995
   17470:	movw	r1, #9448	; 0x24e8
   17474:	movw	r3, #10722	; 0x29e2
   17478:	movw	r2, #1305	; 0x519
   1747c:	movt	r0, #2
   17480:	b	174bc <test_scan@@Base+0x10b0>
   17484:	movw	r0, #19405	; 0x4bcd
   17488:	movt	r0, #2
   1748c:	b	16d24 <test_scan@@Base+0x918>
   17490:	movw	r0, #10756	; 0x2a04
   17494:	movw	r1, #9448	; 0x24e8
   17498:	movw	r3, #10722	; 0x29e2
   1749c:	movw	r2, #1307	; 0x51b
   174a0:	movt	r0, #2
   174a4:	b	174bc <test_scan@@Base+0x10b0>
   174a8:	movw	r0, #10760	; 0x2a08
   174ac:	movw	r1, #9448	; 0x24e8
   174b0:	movw	r3, #10722	; 0x29e2
   174b4:	movw	r2, #1309	; 0x51d
   174b8:	movt	r0, #2
   174bc:	movt	r1, #2
   174c0:	movt	r3, #2
   174c4:	bl	12f88 <__assert_fail@plt>
   174c8:	movw	r0, #19372	; 0x4bac
   174cc:	movt	r0, #2
   174d0:	b	16d24 <test_scan@@Base+0x918>
   174d4:	cmp	r4, #1
   174d8:	bne	17564 <test_scan@@Base+0x1158>
   174dc:	ldr	r0, [sp, #52]	; 0x34
   174e0:	movw	r6, #19194	; 0x4afa
   174e4:	mov	r4, #1
   174e8:	movt	r6, #2
   174ec:	add	r7, r0, #12
   174f0:	cmp	sl, r4
   174f4:	bls	1825c <test_scan@@Base+0x1e50>
   174f8:	ldr	r0, [r7, #-4]
   174fc:	add	r1, r7, r0
   17500:	ldr	r1, [r1, #-4]
   17504:	sub	r1, r0, r1
   17508:	add	r1, r7, r1
   1750c:	ldrh	r2, [r1, #-4]
   17510:	cmp	r2, #12
   17514:	bcc	17994 <test_scan@@Base+0x1588>
   17518:	ldrh	r1, [r1, #6]
   1751c:	cmp	r1, #0
   17520:	beq	17994 <test_scan@@Base+0x1588>
   17524:	add	r2, r0, r1
   17528:	add	r2, r7, r2
   1752c:	ldr	r2, [r2, #-4]
   17530:	add	r0, r2, r0
   17534:	add	r0, r0, r1
   17538:	mov	r1, r6
   1753c:	add	r0, r7, r0
   17540:	bl	12e8c <strcmp@plt>
   17544:	cmp	r0, #0
   17548:	beq	17570 <test_scan@@Base+0x1164>
   1754c:	ldr	r0, [sp, #20]
   17550:	add	r4, r4, #1
   17554:	add	r7, r7, #4
   17558:	cmp	r4, r0
   1755c:	bcc	174f0 <test_scan@@Base+0x10e4>
   17560:	b	1767c <test_scan@@Base+0x1270>
   17564:	movw	r0, #19204	; 0x4b04
   17568:	movt	r0, #2
   1756c:	b	16d24 <test_scan@@Base+0x918>
   17570:	cmp	r4, #2
   17574:	bne	1767c <test_scan@@Base+0x1270>
   17578:	ldr	r0, [sp, #52]	; 0x34
   1757c:	movw	r6, #10615	; 0x2977
   17580:	mov	r7, #1
   17584:	movt	r6, #2
   17588:	add	r4, r0, #12
   1758c:	cmp	sl, r7
   17590:	bls	1825c <test_scan@@Base+0x1e50>
   17594:	ldr	r0, [r4, #-4]
   17598:	add	r1, r4, r0
   1759c:	ldr	r1, [r1, #-4]
   175a0:	sub	r1, r0, r1
   175a4:	add	r1, r4, r1
   175a8:	ldrh	r2, [r1, #-4]
   175ac:	cmp	r2, #12
   175b0:	bcc	17994 <test_scan@@Base+0x1588>
   175b4:	ldrh	r1, [r1, #6]
   175b8:	cmp	r1, #0
   175bc:	beq	17994 <test_scan@@Base+0x1588>
   175c0:	add	r2, r0, r1
   175c4:	add	r2, r4, r2
   175c8:	ldr	r2, [r2, #-4]
   175cc:	add	r0, r2, r0
   175d0:	add	r0, r0, r1
   175d4:	mov	r1, r6
   175d8:	add	r0, r4, r0
   175dc:	bl	12e8c <strcmp@plt>
   175e0:	cmp	r0, #0
   175e4:	beq	17688 <test_scan@@Base+0x127c>
   175e8:	ldr	r0, [sp, #20]
   175ec:	add	r7, r7, #1
   175f0:	add	r4, r4, #4
   175f4:	cmp	r7, r0
   175f8:	bcc	1758c <test_scan@@Base+0x1180>
   175fc:	ldr	r4, [sp, #20]
   17600:	movw	r6, #10707	; 0x29d3
   17604:	movt	r6, #2
   17608:	subs	r4, r4, #1
   1760c:	bls	17694 <test_scan@@Base+0x1288>
   17610:	cmp	sl, r4
   17614:	bls	1825c <test_scan@@Base+0x1e50>
   17618:	ldr	r0, [r9]
   1761c:	mov	r2, r9
   17620:	ldr	r1, [r9, r0]
   17624:	sub	r1, r0, r1
   17628:	add	r1, r9, r1
   1762c:	ldrh	r2, [r1]
   17630:	cmp	r2, #12
   17634:	bcc	17994 <test_scan@@Base+0x1588>
   17638:	ldrh	r1, [r1, #10]
   1763c:	cmp	r1, #0
   17640:	beq	17994 <test_scan@@Base+0x1588>
   17644:	add	r2, r0, r1
   17648:	ldr	r2, [r9, r2]
   1764c:	add	r0, r2, r0
   17650:	add	r0, r0, r1
   17654:	mov	r1, r6
   17658:	add	r0, r9, r0
   1765c:	add	r0, r0, #4
   17660:	bl	12e8c <strcmp@plt>
   17664:	sub	r9, r9, #4
   17668:	cmp	r0, #0
   1766c:	bne	17608 <test_scan@@Base+0x11fc>
   17670:	movw	r0, #19284	; 0x4b54
   17674:	movt	r0, #2
   17678:	b	16d24 <test_scan@@Base+0x918>
   1767c:	movw	r0, #19164	; 0x4adc
   17680:	movt	r0, #2
   17684:	b	16d24 <test_scan@@Base+0x918>
   17688:	movw	r0, #19329	; 0x4b81
   1768c:	movt	r0, #2
   17690:	b	16d24 <test_scan@@Base+0x918>
   17694:	ldr	r0, [sp, #32]
   17698:	ldr	r1, [sp, #12]
   1769c:	ldr	r7, [sp, #20]
   176a0:	movw	r6, #9545	; 0x2549
   176a4:	movt	r6, #2
   176a8:	add	r4, r0, r1
   176ac:	subs	r7, r7, #1
   176b0:	bls	1771c <test_scan@@Base+0x1310>
   176b4:	cmp	sl, r7
   176b8:	bls	1825c <test_scan@@Base+0x1e50>
   176bc:	ldr	r0, [r4]
   176c0:	ldr	r1, [r4, r0]
   176c4:	sub	r1, r0, r1
   176c8:	add	r1, r4, r1
   176cc:	ldrh	r2, [r1]
   176d0:	cmp	r2, #12
   176d4:	bcc	17994 <test_scan@@Base+0x1588>
   176d8:	ldrh	r1, [r1, #10]
   176dc:	cmp	r1, #0
   176e0:	beq	17994 <test_scan@@Base+0x1588>
   176e4:	add	r2, r0, r1
   176e8:	ldr	r2, [r4, r2]
   176ec:	add	r0, r2, r0
   176f0:	add	r0, r0, r1
   176f4:	mov	r1, r6
   176f8:	add	r0, r4, r0
   176fc:	add	r0, r0, #4
   17700:	bl	12e8c <strcmp@plt>
   17704:	sub	r4, r4, #4
   17708:	cmp	r0, #0
   1770c:	bne	176ac <test_scan@@Base+0x12a0>
   17710:	movw	r0, #19240	; 0x4b28
   17714:	movt	r0, #2
   17718:	b	16d24 <test_scan@@Base+0x918>
   1771c:	ldr	r0, [sp, #32]
   17720:	ldr	r1, [sp, #12]
   17724:	movw	r8, #19234	; 0x4b22
   17728:	mov	r4, #0
   1772c:	mov	r7, #0
   17730:	movt	r8, #2
   17734:	add	r6, r0, r1
   17738:	ldr	r0, [sp, #20]
   1773c:	add	r0, r0, r7
   17740:	cmp	r0, #2
   17744:	bcc	177d0 <test_scan@@Base+0x13c4>
   17748:	ldr	r0, [sp, #16]
   1774c:	add	r0, r0, r7
   17750:	cmp	sl, r0
   17754:	bls	1825c <test_scan@@Base+0x1e50>
   17758:	ldr	r0, [r6, r7, lsl #2]
   1775c:	add	r1, r6, r0
   17760:	ldr	r1, [r1, r7, lsl #2]
   17764:	sub	r1, r0, r1
   17768:	add	r1, r4, r1
   1776c:	add	r1, r6, r1
   17770:	ldrh	r2, [r1]
   17774:	cmp	r2, #12
   17778:	bcc	17994 <test_scan@@Base+0x1588>
   1777c:	ldrh	r1, [r1, #10]
   17780:	cmp	r1, #0
   17784:	beq	17994 <test_scan@@Base+0x1588>
   17788:	add	r2, r0, r1
   1778c:	add	r2, r6, r2
   17790:	ldr	r2, [r2, r7, lsl #2]
   17794:	add	r0, r2, r0
   17798:	add	r0, r0, r1
   1779c:	mov	r1, r8
   177a0:	add	r0, r4, r0
   177a4:	add	r0, r6, r0
   177a8:	add	r0, r0, #4
   177ac:	bl	12e8c <strcmp@plt>
   177b0:	sub	r4, r4, #4
   177b4:	sub	r7, r7, #1
   177b8:	cmp	r0, #0
   177bc:	bne	17738 <test_scan@@Base+0x132c>
   177c0:	ldr	r0, [sp, #20]
   177c4:	add	r0, r0, r7
   177c8:	cmp	r0, #1
   177cc:	beq	177dc <test_scan@@Base+0x13d0>
   177d0:	movw	r0, #19203	; 0x4b03
   177d4:	movt	r0, #2
   177d8:	b	16d24 <test_scan@@Base+0x918>
   177dc:	movw	r8, #19194	; 0x4afa
   177e0:	mov	r4, #0
   177e4:	mov	r7, #0
   177e8:	movt	r8, #2
   177ec:	ldr	r0, [sp, #20]
   177f0:	add	r0, r0, r7
   177f4:	cmp	r0, #2
   177f8:	bcc	17884 <test_scan@@Base+0x1478>
   177fc:	ldr	r0, [sp, #16]
   17800:	add	r0, r0, r7
   17804:	cmp	sl, r0
   17808:	bls	1825c <test_scan@@Base+0x1e50>
   1780c:	ldr	r0, [r6, r7, lsl #2]
   17810:	add	r1, r6, r0
   17814:	ldr	r1, [r1, r7, lsl #2]
   17818:	sub	r1, r0, r1
   1781c:	add	r1, r4, r1
   17820:	add	r1, r6, r1
   17824:	ldrh	r2, [r1]
   17828:	cmp	r2, #12
   1782c:	bcc	17994 <test_scan@@Base+0x1588>
   17830:	ldrh	r1, [r1, #10]
   17834:	cmp	r1, #0
   17838:	beq	17994 <test_scan@@Base+0x1588>
   1783c:	add	r2, r0, r1
   17840:	add	r2, r6, r2
   17844:	ldr	r2, [r2, r7, lsl #2]
   17848:	add	r0, r2, r0
   1784c:	add	r0, r0, r1
   17850:	mov	r1, r8
   17854:	add	r0, r4, r0
   17858:	add	r0, r6, r0
   1785c:	add	r0, r0, #4
   17860:	bl	12e8c <strcmp@plt>
   17864:	sub	r4, r4, #4
   17868:	sub	r7, r7, #1
   1786c:	cmp	r0, #0
   17870:	bne	177ec <test_scan@@Base+0x13e0>
   17874:	ldr	r0, [sp, #20]
   17878:	add	r0, r0, r7
   1787c:	cmp	r0, #2
   17880:	beq	17890 <test_scan@@Base+0x1484>
   17884:	movw	r0, #19163	; 0x4adb
   17888:	movt	r0, #2
   1788c:	b	16d24 <test_scan@@Base+0x918>
   17890:	movw	r8, #10615	; 0x2977
   17894:	movt	r8, #2
   17898:	ldr	r0, [sp, #20]
   1789c:	subs	r0, r0, #1
   178a0:	str	r0, [sp, #20]
   178a4:	bls	17914 <test_scan@@Base+0x1508>
   178a8:	ldr	r0, [sp, #20]
   178ac:	cmp	sl, r0
   178b0:	bls	1825c <test_scan@@Base+0x1e50>
   178b4:	ldr	r0, [r6]
   178b8:	ldr	r1, [r6, r0]
   178bc:	sub	r1, r0, r1
   178c0:	add	r1, r6, r1
   178c4:	ldrh	r2, [r1]
   178c8:	cmp	r2, #12
   178cc:	bcc	17994 <test_scan@@Base+0x1588>
   178d0:	ldrh	r1, [r1, #10]
   178d4:	cmp	r1, #0
   178d8:	beq	17994 <test_scan@@Base+0x1588>
   178dc:	add	r2, r0, r1
   178e0:	ldr	r2, [r6, r2]
   178e4:	add	r0, r2, r0
   178e8:	add	r0, r0, r1
   178ec:	mov	r1, r8
   178f0:	add	r0, r6, r0
   178f4:	add	r0, r0, #4
   178f8:	bl	12e8c <strcmp@plt>
   178fc:	sub	r6, r6, #4
   17900:	cmp	r0, #0
   17904:	bne	17898 <test_scan@@Base+0x148c>
   17908:	movw	r0, #19119	; 0x4aaf
   1790c:	movt	r0, #2
   17910:	b	16d24 <test_scan@@Base+0x918>
   17914:	movw	r6, #9545	; 0x2549
   17918:	mov	r4, sl
   1791c:	movt	r6, #2
   17920:	cmp	r4, sl
   17924:	bls	179b4 <test_scan@@Base+0x15a8>
   17928:	sub	r4, r4, #1
   1792c:	cmp	sl, r4
   17930:	bls	1825c <test_scan@@Base+0x1e50>
   17934:	ldr	r0, [r5]
   17938:	ldr	r1, [r5, r0]
   1793c:	sub	r1, r0, r1
   17940:	add	r1, r5, r1
   17944:	ldrh	r2, [r1]
   17948:	cmp	r2, #12
   1794c:	bcc	17994 <test_scan@@Base+0x1588>
   17950:	ldrh	r1, [r1, #10]
   17954:	cmp	r1, #0
   17958:	beq	17994 <test_scan@@Base+0x1588>
   1795c:	add	r2, r0, r1
   17960:	ldr	r2, [r5, r2]
   17964:	add	r0, r2, r0
   17968:	add	r0, r0, r1
   1796c:	mov	r1, r6
   17970:	add	r0, r5, r0
   17974:	add	r0, r0, #4
   17978:	bl	12e8c <strcmp@plt>
   1797c:	sub	r5, r5, #4
   17980:	cmp	r0, #0
   17984:	bne	17920 <test_scan@@Base+0x1514>
   17988:	movw	r0, #19076	; 0x4a84
   1798c:	movt	r0, #2
   17990:	b	16d24 <test_scan@@Base+0x918>
   17994:	movw	r0, #13488	; 0x34b0
   17998:	movw	r1, #12241	; 0x2fd1
   1799c:	movw	r3, #13407	; 0x345f
   179a0:	movw	r2, #699	; 0x2bb
   179a4:	movt	r0, #2
   179a8:	movt	r1, #2
   179ac:	movt	r3, #2
   179b0:	bl	12f88 <__assert_fail@plt>
   179b4:	ldr	r0, [sp, #56]	; 0x38
   179b8:	movw	r1, #19234	; 0x4b22
   179bc:	movt	r1, #2
   179c0:	bl	182e0 <test_scan@@Base+0x1ed4>
   179c4:	cmp	r0, #1
   179c8:	bne	179f0 <test_scan@@Base+0x15e4>
   179cc:	ldr	r0, [sp, #56]	; 0x38
   179d0:	movw	r1, #10707	; 0x29d3
   179d4:	movt	r1, #2
   179d8:	bl	182e0 <test_scan@@Base+0x1ed4>
   179dc:	cmp	r0, #0
   179e0:	beq	179fc <test_scan@@Base+0x15f0>
   179e4:	movw	r0, #19023	; 0x4a4f
   179e8:	movt	r0, #2
   179ec:	b	16d24 <test_scan@@Base+0x918>
   179f0:	movw	r0, #19050	; 0x4a6a
   179f4:	movt	r0, #2
   179f8:	b	16d24 <test_scan@@Base+0x918>
   179fc:	ldr	r0, [sp, #56]	; 0x38
   17a00:	movw	r1, #9545	; 0x2549
   17a04:	movt	r1, #2
   17a08:	bl	182e0 <test_scan@@Base+0x1ed4>
   17a0c:	cmp	r0, #1
   17a10:	bne	17a88 <test_scan@@Base+0x167c>
   17a14:	ldr	r0, [sp, #56]	; 0x38
   17a18:	movw	r1, #19194	; 0x4afa
   17a1c:	movt	r1, #2
   17a20:	bl	182e0 <test_scan@@Base+0x1ed4>
   17a24:	cmp	r0, #2
   17a28:	bne	17a94 <test_scan@@Base+0x1688>
   17a2c:	ldr	r0, [sp, #40]	; 0x28
   17a30:	ldr	r1, [sp, #36]	; 0x24
   17a34:	ldr	r0, [r1, r0]
   17a38:	cmp	r0, #0
   17a3c:	beq	17aa8 <test_scan@@Base+0x169c>
   17a40:	ldr	r1, [fp, #-48]	; 0xffffffd0
   17a44:	ldr	r2, [sp, #40]	; 0x28
   17a48:	ldr	r3, [sp, #32]
   17a4c:	mov	r7, #0
   17a50:	add	r1, r1, r2
   17a54:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17a58:	add	r2, r1, r2
   17a5c:	add	r2, r2, r3
   17a60:	add	r3, r2, #4
   17a64:	cmp	r0, r7
   17a68:	beq	18294 <test_scan@@Base+0x1e88>
   17a6c:	ldrb	r6, [r3, r7]
   17a70:	cmp	r6, #6
   17a74:	beq	17aa0 <test_scan@@Base+0x1694>
   17a78:	add	r7, r7, #1
   17a7c:	cmp	r7, r0
   17a80:	bcc	17a64 <test_scan@@Base+0x1658>
   17a84:	b	17aa8 <test_scan@@Base+0x169c>
   17a88:	movw	r0, #18996	; 0x4a34
   17a8c:	movt	r0, #2
   17a90:	b	16d24 <test_scan@@Base+0x918>
   17a94:	movw	r0, #18967	; 0x4a17
   17a98:	movt	r0, #2
   17a9c:	b	16d24 <test_scan@@Base+0x918>
   17aa0:	cmp	r7, #0
   17aa4:	beq	17ab4 <test_scan@@Base+0x16a8>
   17aa8:	movw	r0, #18923	; 0x49eb
   17aac:	movt	r0, #2
   17ab0:	b	16d24 <test_scan@@Base+0x918>
   17ab4:	mov	r7, #0
   17ab8:	cmp	r0, r7
   17abc:	beq	18294 <test_scan@@Base+0x1e88>
   17ac0:	ldrb	r6, [r3, r7]
   17ac4:	cmp	r6, #1
   17ac8:	beq	17adc <test_scan@@Base+0x16d0>
   17acc:	add	r7, r7, #1
   17ad0:	cmp	r7, r0
   17ad4:	bcc	17ab8 <test_scan@@Base+0x16ac>
   17ad8:	b	17b6c <test_scan@@Base+0x1760>
   17adc:	cmp	r7, #2
   17ae0:	bne	17b6c <test_scan@@Base+0x1760>
   17ae4:	cmp	r0, #4
   17ae8:	bcc	17b20 <test_scan@@Base+0x1714>
   17aec:	add	r7, r2, #7
   17af0:	mov	r6, #0
   17af4:	add	r5, r6, #3
   17af8:	cmp	r0, r5
   17afc:	bls	18294 <test_scan@@Base+0x1e88>
   17b00:	ldrb	r5, [r7, r6]
   17b04:	cmp	r5, #1
   17b08:	beq	17b78 <test_scan@@Base+0x176c>
   17b0c:	add	r5, r6, #1
   17b10:	add	r6, r6, #4
   17b14:	cmp	r6, r0
   17b18:	mov	r6, r5
   17b1c:	bcc	17af4 <test_scan@@Base+0x16e8>
   17b20:	mov	r7, #0
   17b24:	cmp	r0, r7
   17b28:	beq	18294 <test_scan@@Base+0x1e88>
   17b2c:	ldrb	r6, [r3, r7]
   17b30:	cmp	r6, #5
   17b34:	beq	17c08 <test_scan@@Base+0x17fc>
   17b38:	add	r7, r7, #1
   17b3c:	cmp	r7, r0
   17b40:	bcc	17b24 <test_scan@@Base+0x1718>
   17b44:	mov	r7, #0
   17b48:	cmp	r0, r7
   17b4c:	beq	18294 <test_scan@@Base+0x1e88>
   17b50:	ldrb	r6, [r3, r7]
   17b54:	cmp	r6, #2
   17b58:	beq	17b84 <test_scan@@Base+0x1778>
   17b5c:	add	r7, r7, #1
   17b60:	cmp	r7, r0
   17b64:	bcc	17b48 <test_scan@@Base+0x173c>
   17b68:	b	17bb4 <test_scan@@Base+0x17a8>
   17b6c:	movw	r0, #18878	; 0x49be
   17b70:	movt	r0, #2
   17b74:	b	16d24 <test_scan@@Base+0x918>
   17b78:	movw	r0, #18822	; 0x4986
   17b7c:	movt	r0, #2
   17b80:	b	16d24 <test_scan@@Base+0x918>
   17b84:	cmp	r7, #6
   17b88:	bne	17bb4 <test_scan@@Base+0x17a8>
   17b8c:	mov	r7, #0
   17b90:	cmp	r0, r7
   17b94:	beq	18294 <test_scan@@Base+0x1e88>
   17b98:	ldrb	r6, [r3, r7]
   17b9c:	cmp	r6, #3
   17ba0:	beq	17bc0 <test_scan@@Base+0x17b4>
   17ba4:	add	r7, r7, #1
   17ba8:	cmp	r7, r0
   17bac:	bcc	17b90 <test_scan@@Base+0x1784>
   17bb0:	b	17c08 <test_scan@@Base+0x17fc>
   17bb4:	movw	r0, #18779	; 0x495b
   17bb8:	movt	r0, #2
   17bbc:	b	16d24 <test_scan@@Base+0x918>
   17bc0:	cmp	r7, #3
   17bc4:	bne	17c08 <test_scan@@Base+0x17fc>
   17bc8:	cmp	r0, #4
   17bcc:	bcc	17c1c <test_scan@@Base+0x1810>
   17bd0:	add	r3, r2, #7
   17bd4:	mov	r7, #0
   17bd8:	add	r6, r7, #3
   17bdc:	cmp	r0, r6
   17be0:	bls	18294 <test_scan@@Base+0x1e88>
   17be4:	ldrb	r6, [r3, r7]
   17be8:	cmp	r6, #3
   17bec:	beq	17c14 <test_scan@@Base+0x1808>
   17bf0:	add	r6, r7, #1
   17bf4:	add	r7, r7, #4
   17bf8:	cmp	r7, r0
   17bfc:	mov	r7, r6
   17c00:	bcc	17bd8 <test_scan@@Base+0x17cc>
   17c04:	b	17c1c <test_scan@@Base+0x1810>
   17c08:	movw	r0, #18612	; 0x48b4
   17c0c:	movt	r0, #2
   17c10:	b	16d24 <test_scan@@Base+0x918>
   17c14:	cmp	r7, #0
   17c18:	beq	17c28 <test_scan@@Base+0x181c>
   17c1c:	movw	r0, #18721	; 0x4921
   17c20:	movt	r0, #2
   17c24:	b	16d24 <test_scan@@Base+0x918>
   17c28:	cmp	r0, #5
   17c2c:	bcc	1827c <test_scan@@Base+0x1e70>
   17c30:	add	r3, r2, #8
   17c34:	mov	r7, #0
   17c38:	add	r6, r7, #4
   17c3c:	cmp	r0, r6
   17c40:	bls	18294 <test_scan@@Base+0x1e88>
   17c44:	ldrb	r6, [r3, r7]
   17c48:	cmp	r6, #3
   17c4c:	beq	17c68 <test_scan@@Base+0x185c>
   17c50:	add	r6, r7, #1
   17c54:	add	r7, r7, #5
   17c58:	cmp	r7, r0
   17c5c:	mov	r7, r6
   17c60:	bcc	17c38 <test_scan@@Base+0x182c>
   17c64:	b	1827c <test_scan@@Base+0x1e70>
   17c68:	cmp	r7, #1
   17c6c:	bne	1827c <test_scan@@Base+0x1e70>
   17c70:	add	r3, r2, #3
   17c74:	sub	r2, r0, #1
   17c78:	cmn	r2, #1
   17c7c:	beq	18288 <test_scan@@Base+0x1e7c>
   17c80:	cmp	r0, r2
   17c84:	bls	18294 <test_scan@@Base+0x1e88>
   17c88:	ldrb	r7, [r3, r0]
   17c8c:	sub	r3, r3, #1
   17c90:	sub	r2, r2, #1
   17c94:	cmp	r7, #3
   17c98:	bne	17c78 <test_scan@@Base+0x186c>
   17c9c:	cmp	r2, #4
   17ca0:	bne	18288 <test_scan@@Base+0x1e7c>
   17ca4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17ca8:	cmp	r0, #4
   17cac:	mov	r3, r0
   17cb0:	movcs	r3, #4
   17cb4:	add	r1, r1, r3
   17cb8:	add	r1, r1, r2
   17cbc:	ldr	r2, [sp, #32]
   17cc0:	add	r1, r1, r2
   17cc4:	add	r2, r1, #3
   17cc8:	sub	r1, r3, #1
   17ccc:	add	r3, r1, #1
   17cd0:	cmp	r3, #2
   17cd4:	bcc	182b4 <test_scan@@Base+0x1ea8>
   17cd8:	cmp	r0, r1
   17cdc:	bls	18294 <test_scan@@Base+0x1e88>
   17ce0:	ldrb	r3, [r2], #-1
   17ce4:	sub	r1, r1, #1
   17ce8:	cmp	r3, #3
   17cec:	bne	17ccc <test_scan@@Base+0x18c0>
   17cf0:	cmp	r1, #2
   17cf4:	bne	182b4 <test_scan@@Base+0x1ea8>
   17cf8:	ldr	r0, [sp, #44]	; 0x2c
   17cfc:	movw	r8, #9802	; 0x264a
   17d00:	mov	r4, #0
   17d04:	movt	r8, #2
   17d08:	mov	sl, r0
   17d0c:	ldr	r5, [sl, #-4]!
   17d10:	cmp	r5, r4
   17d14:	beq	17d44 <test_scan@@Base+0x1938>
   17d18:	bls	182c0 <test_scan@@Base+0x1eb4>
   17d1c:	mov	r6, r0
   17d20:	ldr	r1, [r6], #4
   17d24:	add	r0, r0, r1
   17d28:	mov	r1, r8
   17d2c:	add	r0, r0, #4
   17d30:	bl	12e8c <strcmp@plt>
   17d34:	cmp	r0, #0
   17d38:	add	r4, r4, #1
   17d3c:	mov	r0, r6
   17d40:	bne	17d10 <test_scan@@Base+0x1904>
   17d44:	movw	r8, #9802	; 0x264a
   17d48:	mov	r4, #0
   17d4c:	movt	r8, #2
   17d50:	cmp	r5, r4
   17d54:	beq	17d88 <test_scan@@Base+0x197c>
   17d58:	bls	182c0 <test_scan@@Base+0x1eb4>
   17d5c:	ldr	r1, [sp, #44]	; 0x2c
   17d60:	mov	r6, r1
   17d64:	ldr	r0, [r6], #4
   17d68:	add	r0, r1, r0
   17d6c:	mov	r1, r8
   17d70:	add	r0, r0, #4
   17d74:	bl	12e8c <strcmp@plt>
   17d78:	add	r4, r4, #1
   17d7c:	cmp	r0, #0
   17d80:	str	r6, [sp, #44]	; 0x2c
   17d84:	bne	17d50 <test_scan@@Base+0x1944>
   17d88:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17d8c:	ldr	r1, [sp, #48]	; 0x30
   17d90:	mov	r6, #0
   17d94:	add	r9, r1, r0
   17d98:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17d9c:	ldr	r1, [sp, #32]
   17da0:	add	r0, r9, r0
   17da4:	add	r4, r0, r1
   17da8:	add	r7, r4, #8
   17dac:	cmp	r5, r6
   17db0:	beq	17e20 <test_scan@@Base+0x1a14>
   17db4:	bls	182c0 <test_scan@@Base+0x1eb4>
   17db8:	add	r0, sl, r6, lsl #2
   17dbc:	ldr	r1, [r0, #4]
   17dc0:	add	r0, r7, r1
   17dc4:	add	r1, sl, r1
   17dc8:	add	r1, r1, r6, lsl #2
   17dcc:	ldr	r8, [r1, #4]
   17dd0:	movw	r1, #9802	; 0x264a
   17dd4:	movt	r1, #2
   17dd8:	cmp	r8, #4
   17ddc:	mov	r2, r8
   17de0:	movcs	r2, #4
   17de4:	bl	12f70 <strncmp@plt>
   17de8:	cmp	r0, #0
   17dec:	mov	r1, r0
   17df0:	mov	r2, #0
   17df4:	add	r7, r7, #4
   17df8:	add	r6, r6, #1
   17dfc:	mvneq	r1, #0
   17e00:	cmp	r8, #4
   17e04:	movwhi	r2, #1
   17e08:	cmp	r0, #0
   17e0c:	movne	r2, r1
   17e10:	cmp	r8, #4
   17e14:	movcc	r2, r1
   17e18:	cmp	r2, #0
   17e1c:	bne	17dac <test_scan@@Base+0x19a0>
   17e20:	movw	r8, #9802	; 0x264a
   17e24:	add	r4, r4, #8
   17e28:	mov	r6, #0
   17e2c:	movt	r8, #2
   17e30:	cmp	r5, r6
   17e34:	beq	17ea0 <test_scan@@Base+0x1a94>
   17e38:	bls	182c0 <test_scan@@Base+0x1eb4>
   17e3c:	add	r0, sl, r6, lsl #2
   17e40:	ldr	r1, [r0, #4]
   17e44:	add	r0, r4, r1
   17e48:	add	r1, sl, r1
   17e4c:	add	r1, r1, r6, lsl #2
   17e50:	ldr	r7, [r1, #4]
   17e54:	mov	r1, r8
   17e58:	cmp	r7, #4
   17e5c:	mov	r2, r7
   17e60:	movcs	r2, #4
   17e64:	bl	12f70 <strncmp@plt>
   17e68:	cmp	r0, #0
   17e6c:	mov	r1, r0
   17e70:	mov	r2, #0
   17e74:	add	r4, r4, #4
   17e78:	add	r6, r6, #1
   17e7c:	mvneq	r1, #0
   17e80:	cmp	r7, #4
   17e84:	movwhi	r2, #1
   17e88:	cmp	r0, #0
   17e8c:	movne	r2, r1
   17e90:	cmp	r7, #4
   17e94:	movcc	r2, r1
   17e98:	cmp	r2, #0
   17e9c:	bne	17e30 <test_scan@@Base+0x1a24>
   17ea0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17ea4:	add	r0, r9, r5, lsl #2
   17ea8:	movw	r9, #9802	; 0x264a
   17eac:	mov	r4, #0
   17eb0:	mvn	r7, #0
   17eb4:	movt	r9, #2
   17eb8:	add	r0, r0, r1
   17ebc:	ldr	r1, [sp, #32]
   17ec0:	add	r8, r0, r1
   17ec4:	add	r0, r8, #4
   17ec8:	cmp	r5, r4
   17ecc:	beq	17f04 <test_scan@@Base+0x1af8>
   17ed0:	add	r1, r5, r7
   17ed4:	cmp	r5, r1
   17ed8:	bls	182c0 <test_scan@@Base+0x1eb4>
   17edc:	mov	r6, r0
   17ee0:	ldr	r1, [r6, #-4]!
   17ee4:	add	r0, r0, r1
   17ee8:	mov	r1, r9
   17eec:	bl	12e8c <strcmp@plt>
   17ef0:	cmp	r0, #0
   17ef4:	sub	r7, r7, #1
   17ef8:	add	r4, r4, #1
   17efc:	mov	r0, r6
   17f00:	bne	17ec8 <test_scan@@Base+0x1abc>
   17f04:	movw	r9, #9802	; 0x264a
   17f08:	add	r0, r8, #4
   17f0c:	mov	r4, #0
   17f10:	mvn	r7, #0
   17f14:	movt	r9, #2
   17f18:	cmp	r5, r4
   17f1c:	beq	17f54 <test_scan@@Base+0x1b48>
   17f20:	add	r1, r5, r7
   17f24:	cmp	r5, r1
   17f28:	bls	182c0 <test_scan@@Base+0x1eb4>
   17f2c:	mov	r6, r0
   17f30:	ldr	r1, [r6, #-4]!
   17f34:	add	r0, r0, r1
   17f38:	mov	r1, r9
   17f3c:	bl	12e8c <strcmp@plt>
   17f40:	cmp	r0, #0
   17f44:	sub	r7, r7, #1
   17f48:	add	r4, r4, #1
   17f4c:	mov	r0, r6
   17f50:	bne	17f18 <test_scan@@Base+0x1b0c>
   17f54:	movw	sl, #9802	; 0x264a
   17f58:	add	r4, r8, #4
   17f5c:	sub	r9, r5, #1
   17f60:	mov	r7, #0
   17f64:	movt	sl, #2
   17f68:	adds	r0, r5, r7
   17f6c:	beq	17fd8 <test_scan@@Base+0x1bcc>
   17f70:	add	r0, r9, r7
   17f74:	cmp	r5, r0
   17f78:	bls	182c0 <test_scan@@Base+0x1eb4>
   17f7c:	ldr	r1, [r8, r7, lsl #2]
   17f80:	add	r0, r4, r1
   17f84:	add	r1, r8, r1
   17f88:	ldr	r6, [r1, r7, lsl #2]
   17f8c:	mov	r1, sl
   17f90:	cmp	r6, #4
   17f94:	mov	r2, r6
   17f98:	movcs	r2, #4
   17f9c:	bl	12f70 <strncmp@plt>
   17fa0:	cmp	r0, #0
   17fa4:	mov	r1, r0
   17fa8:	mov	r2, #0
   17fac:	sub	r7, r7, #1
   17fb0:	sub	r4, r4, #4
   17fb4:	mvneq	r1, #0
   17fb8:	cmp	r6, #4
   17fbc:	movwhi	r2, #1
   17fc0:	cmp	r0, #0
   17fc4:	movne	r2, r1
   17fc8:	cmp	r6, #4
   17fcc:	movcc	r2, r1
   17fd0:	cmp	r2, #0
   17fd4:	bne	17f68 <test_scan@@Base+0x1b5c>
   17fd8:	add	r4, r8, #4
   17fdc:	rsb	sl, r5, #0
   17fe0:	mov	r7, #0
   17fe4:	cmp	sl, r7
   17fe8:	beq	18058 <test_scan@@Base+0x1c4c>
   17fec:	add	r0, r9, r7
   17ff0:	cmp	r5, r0
   17ff4:	bls	182c0 <test_scan@@Base+0x1eb4>
   17ff8:	ldr	r1, [r8, r7, lsl #2]
   17ffc:	add	r0, r4, r1
   18000:	add	r1, r8, r1
   18004:	ldr	r6, [r1, r7, lsl #2]
   18008:	movw	r1, #9802	; 0x264a
   1800c:	movt	r1, #2
   18010:	cmp	r6, #4
   18014:	mov	r2, r6
   18018:	movcs	r2, #4
   1801c:	bl	12f70 <strncmp@plt>
   18020:	cmp	r0, #0
   18024:	mov	r1, r0
   18028:	mov	r2, #0
   1802c:	sub	r7, r7, #1
   18030:	sub	r4, r4, #4
   18034:	mvneq	r1, #0
   18038:	cmp	r6, #4
   1803c:	movwhi	r2, #1
   18040:	cmp	r0, #0
   18044:	movne	r2, r1
   18048:	cmp	r6, #4
   1804c:	movcc	r2, r1
   18050:	cmp	r2, #0
   18054:	bne	17fe4 <test_scan@@Base+0x1bd8>
   18058:	ldr	r0, [sp, #56]	; 0x38
   1805c:	ldr	r0, [r0, #-4]
   18060:	cmp	r0, #0
   18064:	beq	18134 <test_scan@@Base+0x1d28>
   18068:	ldr	r1, [sp, #52]	; 0x34
   1806c:	mov	r2, #0
   18070:	add	r1, r1, #12
   18074:	cmp	r0, r2
   18078:	beq	1825c <test_scan@@Base+0x1e50>
   1807c:	ldr	r3, [r1, #-8]
   18080:	add	r7, r1, r3
   18084:	ldr	r7, [r7, #-8]
   18088:	sub	r7, r3, r7
   1808c:	add	r7, r1, r7
   18090:	ldrh	r6, [r7, #-8]
   18094:	cmp	r6, #10
   18098:	bcc	180bc <test_scan@@Base+0x1cb0>
   1809c:	ldrh	r7, [r7]
   180a0:	cmp	r7, #0
   180a4:	beq	180bc <test_scan@@Base+0x1cb0>
   180a8:	add	r3, r3, r7
   180ac:	add	r3, r1, r3
   180b0:	ldrh	r3, [r3, #-8]
   180b4:	cmp	r3, #13
   180b8:	beq	180cc <test_scan@@Base+0x1cc0>
   180bc:	add	r2, r2, #1
   180c0:	add	r1, r1, #4
   180c4:	cmp	r2, r0
   180c8:	bcc	18074 <test_scan@@Base+0x1c68>
   180cc:	cmp	r0, #2
   180d0:	bcc	18134 <test_scan@@Base+0x1d28>
   180d4:	ldr	r1, [sp, #52]	; 0x34
   180d8:	mov	r2, #1
   180dc:	add	r1, r1, #8
   180e0:	cmp	r0, r2
   180e4:	bls	1825c <test_scan@@Base+0x1e50>
   180e8:	ldr	r3, [r1]
   180ec:	ldr	r7, [r1, r3]
   180f0:	sub	r7, r3, r7
   180f4:	add	r7, r1, r7
   180f8:	ldrh	r6, [r7]
   180fc:	cmp	r6, #10
   18100:	bcc	18124 <test_scan@@Base+0x1d18>
   18104:	ldrh	r7, [r7, #8]
   18108:	cmp	r7, #0
   1810c:	beq	18124 <test_scan@@Base+0x1d18>
   18110:	add	r3, r3, r7
   18114:	add	r3, r1, r3
   18118:	ldrh	r3, [r3]
   1811c:	cmp	r3, #42	; 0x2a
   18120:	beq	18134 <test_scan@@Base+0x1d28>
   18124:	add	r2, r2, #1
   18128:	add	r1, r1, #4
   1812c:	cmp	r2, r0
   18130:	bcc	180e0 <test_scan@@Base+0x1cd4>
   18134:	ldr	r1, [sp, #24]
   18138:	ldr	r2, [sp, #28]
   1813c:	add	r1, r1, r0, lsl #2
   18140:	add	r1, r1, r2
   18144:	ldr	r2, [sp, #32]
   18148:	add	r1, r2, r1
   1814c:	sub	r2, r0, #1
   18150:	cmn	r2, #1
   18154:	beq	181bc <test_scan@@Base+0x1db0>
   18158:	cmp	r0, r2
   1815c:	bls	1825c <test_scan@@Base+0x1e50>
   18160:	ldr	r7, [r1]
   18164:	ldr	r3, [r1, r7]
   18168:	sub	r3, r7, r3
   1816c:	add	r6, r1, r3
   18170:	mov	r3, #1
   18174:	ldrh	r5, [r6]
   18178:	cmp	r5, #10
   1817c:	bcc	181ac <test_scan@@Base+0x1da0>
   18180:	ldrh	r6, [r6, #8]
   18184:	cmp	r6, #0
   18188:	beq	181ac <test_scan@@Base+0x1da0>
   1818c:	add	r3, r7, r6
   18190:	add	r3, r1, r3
   18194:	ldrsh	r7, [r3]
   18198:	uxth	r3, r7
   1819c:	subs	r3, r3, #1
   181a0:	movwne	r3, #1
   181a4:	cmp	r7, #1
   181a8:	mvnlt	r3, #0
   181ac:	sub	r1, r1, #4
   181b0:	sub	r2, r2, #1
   181b4:	cmp	r3, #0
   181b8:	bne	18150 <test_scan@@Base+0x1d44>
   181bc:	ldr	r1, [sp, #24]
   181c0:	cmp	r0, #2
   181c4:	ldr	r3, [sp, #28]
   181c8:	mov	r2, r0
   181cc:	mov	r5, #0
   181d0:	movcs	r2, #2
   181d4:	add	r1, r1, r2, lsl #2
   181d8:	sub	r2, r2, #1
   181dc:	add	r1, r1, r3
   181e0:	ldr	r3, [sp, #32]
   181e4:	add	r1, r3, r1
   181e8:	cmn	r2, #1
   181ec:	beq	16d2c <test_scan@@Base+0x920>
   181f0:	cmp	r0, r2
   181f4:	bls	1825c <test_scan@@Base+0x1e50>
   181f8:	ldr	r7, [r1]
   181fc:	ldr	r3, [r1, r7]
   18200:	sub	r3, r7, r3
   18204:	add	r6, r1, r3
   18208:	mov	r3, #1
   1820c:	ldrh	r4, [r6]
   18210:	cmp	r4, #10
   18214:	bcc	18244 <test_scan@@Base+0x1e38>
   18218:	ldrh	r6, [r6, #8]
   1821c:	cmp	r6, #0
   18220:	beq	18244 <test_scan@@Base+0x1e38>
   18224:	add	r3, r7, r6
   18228:	add	r3, r1, r3
   1822c:	ldrsh	r7, [r3]
   18230:	uxth	r3, r7
   18234:	subs	r3, r3, #42	; 0x2a
   18238:	movwne	r3, #1
   1823c:	cmp	r7, #42	; 0x2a
   18240:	mvnlt	r3, #0
   18244:	ldr	r7, [sp, #32]
   18248:	sub	r1, r1, #4
   1824c:	sub	r2, r2, #1
   18250:	cmp	r3, #0
   18254:	bne	181e8 <test_scan@@Base+0x1ddc>
   18258:	b	16a9c <test_scan@@Base+0x690>
   1825c:	movw	r0, #13610	; 0x352a
   18260:	movw	r1, #12241	; 0x2fd1
   18264:	movw	r3, #13937	; 0x3671
   18268:	movw	r2, #693	; 0x2b5
   1826c:	movt	r0, #2
   18270:	movt	r1, #2
   18274:	movt	r3, #2
   18278:	bl	12f88 <__assert_fail@plt>
   1827c:	movw	r0, #18661	; 0x48e5
   18280:	movt	r0, #2
   18284:	b	16d24 <test_scan@@Base+0x918>
   18288:	movw	r0, #18611	; 0x48b3
   1828c:	movt	r0, #2
   18290:	b	16d24 <test_scan@@Base+0x918>
   18294:	movw	r0, #13610	; 0x352a
   18298:	movw	r1, #13665	; 0x3561
   1829c:	movw	r3, #13769	; 0x35c9
   182a0:	movw	r2, #395	; 0x18b
   182a4:	movt	r0, #2
   182a8:	movt	r1, #2
   182ac:	movt	r3, #2
   182b0:	bl	12f88 <__assert_fail@plt>
   182b4:	movw	r0, #18558	; 0x487e
   182b8:	movt	r0, #2
   182bc:	b	16d24 <test_scan@@Base+0x918>
   182c0:	movw	r0, #13610	; 0x352a
   182c4:	movw	r1, #13665	; 0x3561
   182c8:	movw	r3, #14036	; 0x36d4
   182cc:	mov	r2, #108	; 0x6c
   182d0:	movt	r0, #2
   182d4:	movt	r1, #2
   182d8:	movt	r3, #2
   182dc:	bl	12f88 <__assert_fail@plt>
   182e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182e4:	add	fp, sp, #28
   182e8:	sub	sp, sp, #4
   182ec:	mov	r4, r1
   182f0:	mov	r5, r0
   182f4:	mov	r6, #0
   182f8:	mov	r7, #0
   182fc:	b	18374 <test_scan@@Base+0x1f68>
   18300:	ldr	r0, [r5, r7, lsl #2]
   18304:	add	r1, r5, r0
   18308:	add	r2, r6, r0
   1830c:	ldr	r1, [r1, r7, lsl #2]
   18310:	sub	r3, r2, r1
   18314:	add	r3, r5, r3
   18318:	ldrh	r3, [r3]
   1831c:	cmp	r3, #12
   18320:	bcc	18454 <test_scan@@Base+0x2048>
   18324:	rsb	r1, r1, #0
   18328:	add	r1, r2, r1
   1832c:	add	r1, r5, r1
   18330:	ldrh	r1, [r1, #10]
   18334:	cmp	r1, #0
   18338:	beq	18454 <test_scan@@Base+0x2048>
   1833c:	add	r2, r6, r1
   18340:	add	r1, r1, r0
   18344:	add	r1, r5, r1
   18348:	ldr	r1, [r1, r7, lsl #2]
   1834c:	add	r0, r1, r0
   18350:	mov	r1, r4
   18354:	add	r0, r2, r0
   18358:	add	r0, r5, r0
   1835c:	add	r0, r0, #4
   18360:	bl	12e8c <strcmp@plt>
   18364:	cmp	r0, #0
   18368:	beq	183c0 <test_scan@@Base+0x1fb4>
   1836c:	add	r6, r6, #4
   18370:	add	r7, r7, #1
   18374:	cmp	r5, #0
   18378:	mov	r0, #0
   1837c:	ldrne	r0, [r5, #-4]
   18380:	cmp	r7, r0
   18384:	bcs	183b8 <test_scan@@Base+0x1fac>
   18388:	cmp	r5, #0
   1838c:	ldrne	r0, [r5, #-4]
   18390:	cmpne	r0, r7
   18394:	bhi	18300 <test_scan@@Base+0x1ef4>
   18398:	movw	r0, #13610	; 0x352a
   1839c:	movw	r1, #12241	; 0x2fd1
   183a0:	movw	r3, #13937	; 0x3671
   183a4:	movw	r2, #693	; 0x2b5
   183a8:	movt	r0, #2
   183ac:	movt	r1, #2
   183b0:	movt	r3, #2
   183b4:	bl	12f88 <__assert_fail@plt>
   183b8:	mov	r9, #0
   183bc:	b	18448 <test_scan@@Base+0x203c>
   183c0:	ldr	sl, [r5, #-4]
   183c4:	add	r8, r5, #8
   183c8:	mov	r9, #0
   183cc:	add	r6, r8, r7, lsl #2
   183d0:	add	r9, r9, #1
   183d4:	add	r7, r7, #1
   183d8:	cmp	r7, sl
   183dc:	bcs	18448 <test_scan@@Base+0x203c>
   183e0:	ldr	r0, [r5, #-4]
   183e4:	cmp	r0, r7
   183e8:	bls	18398 <test_scan@@Base+0x1f8c>
   183ec:	ldr	r0, [r6, #-4]
   183f0:	add	r1, r6, r0
   183f4:	ldr	r1, [r1, #-4]
   183f8:	sub	r1, r0, r1
   183fc:	add	r1, r6, r1
   18400:	ldrh	r2, [r1, #-4]
   18404:	cmp	r2, #12
   18408:	bcc	18454 <test_scan@@Base+0x2048>
   1840c:	ldrh	r1, [r1, #6]
   18410:	cmp	r1, #0
   18414:	beq	18454 <test_scan@@Base+0x2048>
   18418:	add	r2, r0, r1
   1841c:	add	r2, r6, r2
   18420:	ldr	r2, [r2, #-4]
   18424:	add	r0, r2, r0
   18428:	add	r0, r0, r1
   1842c:	mov	r1, r4
   18430:	add	r0, r6, r0
   18434:	bl	12e8c <strcmp@plt>
   18438:	add	r6, r6, #4
   1843c:	cmp	r0, #0
   18440:	bne	183d4 <test_scan@@Base+0x1fc8>
   18444:	b	183cc <test_scan@@Base+0x1fc0>
   18448:	mov	r0, r9
   1844c:	sub	sp, fp, #28
   18450:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18454:	movw	r0, #13488	; 0x34b0
   18458:	movw	r1, #12241	; 0x2fd1
   1845c:	movw	r3, #13407	; 0x345f
   18460:	movw	r2, #699	; 0x2bb
   18464:	movt	r0, #2
   18468:	movt	r1, #2
   1846c:	movt	r3, #2
   18470:	bl	12f88 <__assert_fail@plt>

00018474 <test_basic_sort@@Base>:
   18474:	push	{r4, r5, r6, r7, fp, lr}
   18478:	add	fp, sp, #16
   1847c:	sub	sp, sp, #24
   18480:	mov	r4, r0
   18484:	movw	r0, #1027	; 0x403
   18488:	movt	r0, #515	; 0x203
   1848c:	str	r0, [sp, #15]
   18490:	movw	r0, #1798	; 0x706
   18494:	movt	r0, #769	; 0x301
   18498:	str	r0, [sp, #12]
   1849c:	mov	r0, r4
   184a0:	bl	1d0ac <flatcc_builder_reset@@Base>
   184a4:	movw	r1, #8956	; 0x22fc
   184a8:	mov	r0, r4
   184ac:	mov	r2, #0
   184b0:	mov	r3, #0
   184b4:	movt	r1, #2
   184b8:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   184bc:	cmp	r0, #0
   184c0:	bne	184d0 <test_basic_sort@@Base+0x5c>
   184c4:	mov	r0, r4
   184c8:	mov	r1, #36	; 0x24
   184cc:	bl	1e940 <flatcc_builder_start_table@@Base>
   184d0:	movw	r1, #9024	; 0x2340
   184d4:	mov	r0, r4
   184d8:	movt	r1, #2
   184dc:	bl	20504 <flatcc_builder_create_string_str@@Base>
   184e0:	cmp	r0, #0
   184e4:	beq	18500 <test_basic_sort@@Base+0x8c>
   184e8:	mov	r5, r0
   184ec:	mov	r0, r4
   184f0:	mov	r1, #3
   184f4:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   184f8:	cmp	r0, #0
   184fc:	strne	r5, [r0]
   18500:	mvn	r0, #0
   18504:	mov	r1, #1
   18508:	mov	r2, #7
   1850c:	mov	r3, #1
   18510:	str	r1, [sp]
   18514:	str	r0, [sp, #4]
   18518:	add	r1, sp, #12
   1851c:	mov	r0, r4
   18520:	bl	1f458 <flatcc_builder_create_vector@@Base>
   18524:	cmp	r0, #0
   18528:	beq	18544 <test_basic_sort@@Base+0xd0>
   1852c:	mov	r5, r0
   18530:	mov	r0, r4
   18534:	mov	r1, #5
   18538:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1853c:	cmp	r0, #0
   18540:	strne	r5, [r0]
   18544:	movw	r1, #21988	; 0x55e4
   18548:	mov	r0, r4
   1854c:	mov	r2, #1
   18550:	movt	r1, #2
   18554:	bl	1f220 <flatcc_builder_check_required@@Base>
   18558:	cmp	r0, #0
   1855c:	beq	18820 <test_basic_sort@@Base+0x3ac>
   18560:	mov	r0, r4
   18564:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   18568:	mov	r1, r0
   1856c:	mov	r0, r4
   18570:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   18574:	add	r1, sp, #20
   18578:	mov	r0, r4
   1857c:	bl	207ec <flatcc_builder_get_direct_buffer@@Base>
   18580:	cmp	r0, #0
   18584:	beq	18800 <test_basic_sort@@Base+0x38c>
   18588:	ldr	r1, [r0, #4]
   1858c:	movw	r2, #20301	; 0x4f4d
   18590:	movt	r2, #21326	; 0x534e
   18594:	cmp	r1, r2
   18598:	bne	18800 <test_basic_sort@@Base+0x38c>
   1859c:	ldr	r1, [r0]
   185a0:	ldr	r2, [r0, r1]!
   185a4:	mov	r1, r0
   185a8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   185ac:	cmp	r2, #15
   185b0:	bls	185cc <test_basic_sort@@Base+0x158>
   185b4:	ldrh	r1, [r1, #14]
   185b8:	cmp	r1, #0
   185bc:	ldrne	r1, [r0, r1]!
   185c0:	ldrne	r3, [r0, r1]!
   185c4:	cmpne	r3, #0
   185c8:	bne	185ec <test_basic_sort@@Base+0x178>
   185cc:	movw	r0, #10779	; 0x2a1b
   185d0:	movw	r1, #9448	; 0x24e8
   185d4:	movw	r3, #10825	; 0x2a49
   185d8:	mov	r2, #1552	; 0x610
   185dc:	movt	r0, #2
   185e0:	movt	r1, #2
   185e4:	movt	r3, #2
   185e8:	bl	12f88 <__assert_fail@plt>
   185ec:	add	r1, r0, #4
   185f0:	lsr	r2, r3, #1
   185f4:	sub	lr, r3, #1
   185f8:	cmp	lr, r2, lsl #1
   185fc:	mov	ip, r2
   18600:	bcs	18614 <test_basic_sort@@Base+0x1a0>
   18604:	sub	r2, ip, #1
   18608:	cmp	ip, #0
   1860c:	bne	185f8 <test_basic_sort@@Base+0x184>
   18610:	b	18704 <test_basic_sort@@Base+0x290>
   18614:	lsl	r2, ip, #1
   18618:	mov	r3, ip
   1861c:	ldr	r4, [r1, #-4]
   18620:	cmp	r2, lr
   18624:	bcs	18648 <test_basic_sort@@Base+0x1d4>
   18628:	cmp	r4, r2
   1862c:	orrhi	r6, r2, #1
   18630:	cmphi	r4, r6
   18634:	bls	187cc <test_basic_sort@@Base+0x358>
   18638:	ldrb	r5, [r1, r6]
   1863c:	ldrb	r0, [r1, r2]
   18640:	cmp	r0, r5
   18644:	movcc	r2, r6
   18648:	mov	r5, r2
   1864c:	cmp	r4, r3
   18650:	cmphi	r4, r5
   18654:	bls	187cc <test_basic_sort@@Base+0x358>
   18658:	ldrb	r2, [r1, r3]
   1865c:	ldrb	r6, [r1, r5]
   18660:	cmp	r2, r6
   18664:	bcs	18604 <test_basic_sort@@Base+0x190>
   18668:	cmp	lr, r5, lsl #1
   1866c:	strb	r2, [r1, r5]
   18670:	strb	r6, [r1, r3]
   18674:	lsl	r2, r5, #1
   18678:	mov	r3, r5
   1867c:	bcs	1861c <test_basic_sort@@Base+0x1a8>
   18680:	b	18604 <test_basic_sort@@Base+0x190>
   18684:	ldrb	r2, [r1]
   18688:	ldrb	r0, [r1, lr]
   1868c:	mov	r4, #0
   18690:	strb	r2, [r1, lr]
   18694:	sub	lr, lr, #1
   18698:	mov	r2, #0
   1869c:	strb	r0, [r1]
   186a0:	ldr	r5, [r1, #-4]
   186a4:	cmp	r4, lr
   186a8:	bcs	186cc <test_basic_sort@@Base+0x258>
   186ac:	cmp	r5, r4
   186b0:	orrhi	r3, r4, #1
   186b4:	cmphi	r5, r3
   186b8:	bls	187cc <test_basic_sort@@Base+0x358>
   186bc:	ldrb	r0, [r1, r3]
   186c0:	ldrb	r6, [r1, r4]
   186c4:	cmp	r6, r0
   186c8:	movcc	r4, r3
   186cc:	mov	r3, r4
   186d0:	cmp	r5, r2
   186d4:	cmphi	r5, r3
   186d8:	bls	187cc <test_basic_sort@@Base+0x358>
   186dc:	ldrb	r6, [r1, r2]
   186e0:	ldrb	r5, [r1, r3]
   186e4:	cmp	r6, r5
   186e8:	bcs	18704 <test_basic_sort@@Base+0x290>
   186ec:	cmp	lr, r3, lsl #1
   186f0:	strb	r6, [r1, r3]
   186f4:	strb	r5, [r1, r2]
   186f8:	lsl	r4, r3, #1
   186fc:	mov	r2, r3
   18700:	bcs	186a0 <test_basic_sort@@Base+0x22c>
   18704:	cmp	lr, #0
   18708:	bne	18684 <test_basic_sort@@Base+0x210>
   1870c:	ldr	r0, [r1, #-4]
   18710:	cmp	r0, #7
   18714:	bne	185cc <test_basic_sort@@Base+0x158>
   18718:	movw	lr, #21962	; 0x55ca
   1871c:	movw	r0, #19717	; 0x4d05
   18720:	movw	ip, #19687	; 0x4ce7
   18724:	mov	r3, #0
   18728:	mov	r5, #0
   1872c:	movt	lr, #2
   18730:	movt	r0, #2
   18734:	movt	ip, #2
   18738:	cmp	r3, #7
   1873c:	bcs	187cc <test_basic_sort@@Base+0x358>
   18740:	ldrb	r2, [r1, r3]
   18744:	ldrb	r3, [lr, r3]
   18748:	cmp	r2, r3
   1874c:	bne	187f0 <test_basic_sort@@Base+0x37c>
   18750:	mov	r4, #0
   18754:	mov	r3, #6
   18758:	sub	r6, r3, r4
   1875c:	add	r6, r4, r6, lsr #1
   18760:	cmp	r6, #7
   18764:	bcs	187cc <test_basic_sort@@Base+0x358>
   18768:	ldrb	r7, [r1, r6]
   1876c:	cmp	r7, r2
   18770:	movcs	r3, r6
   18774:	addcc	r4, r6, #1
   18778:	cmp	r3, r4
   1877c:	bhi	18758 <test_basic_sort@@Base+0x2e4>
   18780:	bne	187ec <test_basic_sort@@Base+0x378>
   18784:	cmp	r4, #7
   18788:	bcs	187cc <test_basic_sort@@Base+0x358>
   1878c:	ldrb	r3, [r1, r4]
   18790:	cmp	r3, r2
   18794:	bne	187ec <test_basic_sort@@Base+0x378>
   18798:	uxtb	r2, r5
   1879c:	cmp	r2, #3
   187a0:	mov	r2, r5
   187a4:	movweq	r2, #2
   187a8:	uxtb	r2, r2
   187ac:	cmp	r4, r2
   187b0:	bne	187ec <test_basic_sort@@Base+0x378>
   187b4:	add	r5, r5, #1
   187b8:	uxtb	r3, r5
   187bc:	cmp	r3, #6
   187c0:	bls	18738 <test_basic_sort@@Base+0x2c4>
   187c4:	mov	r0, #0
   187c8:	b	187f8 <test_basic_sort@@Base+0x384>
   187cc:	movw	r0, #13610	; 0x352a
   187d0:	movw	r1, #13665	; 0x3561
   187d4:	movw	r3, #13769	; 0x35c9
   187d8:	movw	r2, #395	; 0x18b
   187dc:	movt	r0, #2
   187e0:	movt	r1, #2
   187e4:	movt	r3, #2
   187e8:	bl	12f88 <__assert_fail@plt>
   187ec:	mov	r0, ip
   187f0:	bl	12ee0 <puts@plt>
   187f4:	mvn	r0, #0
   187f8:	sub	sp, fp, #16
   187fc:	pop	{r4, r5, r6, r7, fp, pc}
   18800:	movw	r0, #12203	; 0x2fab
   18804:	movw	r1, #12241	; 0x2fd1
   18808:	movw	r3, #13521	; 0x34d1
   1880c:	movw	r2, #706	; 0x2c2
   18810:	movt	r0, #2
   18814:	movt	r1, #2
   18818:	movt	r3, #2
   1881c:	bl	12f88 <__assert_fail@plt>
   18820:	movw	r0, #12876	; 0x324c
   18824:	movw	r1, #12586	; 0x312a
   18828:	movw	r3, #13038	; 0x32ee
   1882c:	mov	r2, #235	; 0xeb
   18830:	movt	r0, #2
   18834:	movt	r1, #2
   18838:	movt	r3, #2
   1883c:	bl	12f88 <__assert_fail@plt>

00018840 <test_clone_slice@@Base>:
   18840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18844:	add	fp, sp, #28
   18848:	sub	sp, sp, #36	; 0x24
   1884c:	mov	r5, r0
   18850:	mov	r0, #256	; 0x100
   18854:	str	r0, [sp, #27]
   18858:	str	r0, [sp, #24]
   1885c:	mov	r0, r5
   18860:	bl	1d0ac <flatcc_builder_reset@@Base>
   18864:	movw	r1, #8956	; 0x22fc
   18868:	mov	r0, r5
   1886c:	mov	r2, #0
   18870:	mov	r3, #0
   18874:	movt	r1, #2
   18878:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   1887c:	cmp	r0, #0
   18880:	bne	18890 <test_clone_slice@@Base+0x50>
   18884:	mov	r0, r5
   18888:	mov	r1, #36	; 0x24
   1888c:	bl	1e940 <flatcc_builder_start_table@@Base>
   18890:	movw	r1, #20182	; 0x4ed6
   18894:	mov	r0, r5
   18898:	movt	r1, #2
   1889c:	bl	20504 <flatcc_builder_create_string_str@@Base>
   188a0:	cmp	r0, #0
   188a4:	beq	188c0 <test_clone_slice@@Base+0x80>
   188a8:	mov	r4, r0
   188ac:	mov	r0, r5
   188b0:	mov	r1, #3
   188b4:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   188b8:	cmp	r0, #0
   188bc:	strne	r4, [r0]
   188c0:	mvn	r0, #0
   188c4:	mov	r1, #1
   188c8:	mov	r2, #7
   188cc:	mov	r3, #1
   188d0:	str	r1, [sp]
   188d4:	str	r0, [sp, #4]
   188d8:	add	r1, sp, #24
   188dc:	mov	r0, r5
   188e0:	bl	1f458 <flatcc_builder_create_vector@@Base>
   188e4:	cmp	r0, #0
   188e8:	beq	18904 <test_clone_slice@@Base+0xc4>
   188ec:	mov	r4, r0
   188f0:	mov	r0, r5
   188f4:	mov	r1, #24
   188f8:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   188fc:	cmp	r0, #0
   18900:	strne	r4, [r0]
   18904:	mov	r0, r5
   18908:	mov	r1, #4
   1890c:	mov	r2, #2
   18910:	mvn	r3, #-1073741824	; 0xc0000000
   18914:	bl	1e574 <flatcc_builder_start_vector@@Base>
   18918:	mov	r0, r5
   1891c:	mov	r1, #2
   18920:	bl	1dd7c <flatcc_builder_extend_vector@@Base>
   18924:	mov	r1, #44	; 0x2c
   18928:	strh	r1, [r0, #4]
   1892c:	mov	r1, #22
   18930:	strh	r1, [r0]
   18934:	mov	r0, r5
   18938:	bl	1f5a0 <flatcc_builder_end_vector@@Base>
   1893c:	cmp	r0, #0
   18940:	beq	1895c <test_clone_slice@@Base+0x11c>
   18944:	mov	r4, r0
   18948:	mov	r0, r5
   1894c:	mov	r1, #9
   18950:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   18954:	cmp	r0, #0
   18958:	strne	r4, [r0]
   1895c:	mov	r0, r5
   18960:	mov	r1, #0
   18964:	mov	r2, #32
   18968:	mov	r3, #16
   1896c:	mov	r8, #0
   18970:	bl	1fb8c <flatcc_builder_table_add@@Base>
   18974:	movw	r1, #13107	; 0x3333
   18978:	mov	r2, #1
   1897c:	movt	r1, #49705	; 0xc229
   18980:	str	r1, [r0]
   18984:	movw	r1, #21988	; 0x55e4
   18988:	mov	r0, r5
   1898c:	movt	r1, #2
   18990:	bl	1f220 <flatcc_builder_check_required@@Base>
   18994:	cmp	r0, #0
   18998:	beq	191c8 <test_clone_slice@@Base+0x988>
   1899c:	mov	r0, r5
   189a0:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   189a4:	mov	r1, r0
   189a8:	mov	r0, r5
   189ac:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   189b0:	add	r1, sp, #32
   189b4:	mov	r0, r5
   189b8:	bl	20908 <flatcc_builder_finalize_aligned_buffer@@Base>
   189bc:	mov	r4, r0
   189c0:	movw	r0, #32880	; 0x8070
   189c4:	ldr	r2, [sp, #32]
   189c8:	movt	r0, #3
   189cc:	mov	r1, r4
   189d0:	ldr	r3, [r0]
   189d4:	movw	r0, #10865	; 0x2a71
   189d8:	movt	r0, #2
   189dc:	bl	1365c <test_type_aliases@@Base+0x51c>
   189e0:	movw	r1, #20301	; 0x4f4d
   189e4:	cmp	r4, #0
   189e8:	movt	r1, #21326	; 0x534e
   189ec:	beq	18a00 <test_clone_slice@@Base+0x1c0>
   189f0:	ldr	r0, [r4, #4]
   189f4:	cmp	r0, r1
   189f8:	ldreq	r0, [r4]
   189fc:	addeq	r8, r4, r0
   18a00:	mov	r0, r5
   18a04:	bl	1d0ac <flatcc_builder_reset@@Base>
   18a08:	movw	r1, #8956	; 0x22fc
   18a0c:	mov	r0, r5
   18a10:	mov	r2, #0
   18a14:	mov	r3, #0
   18a18:	movt	r1, #2
   18a1c:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   18a20:	cmp	r0, #0
   18a24:	bne	18a34 <test_clone_slice@@Base+0x1f4>
   18a28:	mov	r0, r5
   18a2c:	mov	r1, #36	; 0x24
   18a30:	bl	1e940 <flatcc_builder_start_table@@Base>
   18a34:	cmp	r8, #0
   18a38:	beq	191e8 <test_clone_slice@@Base+0x9a8>
   18a3c:	ldr	r1, [r8]
   18a40:	mov	r0, r8
   18a44:	ldrh	r2, [r0, -r1]!
   18a48:	cmp	r2, #12
   18a4c:	bcc	191bc <test_clone_slice@@Base+0x97c>
   18a50:	ldrh	r1, [r0, #10]
   18a54:	cmp	r1, #0
   18a58:	beq	191bc <test_clone_slice@@Base+0x97c>
   18a5c:	cmp	r2, #54	; 0x36
   18a60:	bcc	19208 <test_clone_slice@@Base+0x9c8>
   18a64:	ldrh	r2, [r0, #52]	; 0x34
   18a68:	cmp	r2, #0
   18a6c:	beq	19208 <test_clone_slice@@Base+0x9c8>
   18a70:	ldrh	r0, [r0, #22]
   18a74:	str	r4, [sp, #20]
   18a78:	cmp	r0, #0
   18a7c:	beq	19220 <test_clone_slice@@Base+0x9e0>
   18a80:	mov	r3, r8
   18a84:	mov	sl, r8
   18a88:	str	r8, [sp, #16]
   18a8c:	ldr	r0, [r8, r0]!
   18a90:	ldr	r1, [r3, r1]!
   18a94:	ldr	r9, [sl, r2]!
   18a98:	str	r0, [sp, #12]
   18a9c:	mov	r0, r5
   18aa0:	add	r1, r3, r1
   18aa4:	add	r6, r1, #4
   18aa8:	ldr	r2, [r6, #-4]
   18aac:	mov	r1, r6
   18ab0:	bl	20404 <flatcc_builder_create_string@@Base>
   18ab4:	cmp	r0, #0
   18ab8:	beq	18ad4 <test_clone_slice@@Base+0x294>
   18abc:	mov	r4, r0
   18ac0:	mov	r0, r5
   18ac4:	mov	r1, #3
   18ac8:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   18acc:	cmp	r0, #0
   18ad0:	strne	r4, [r0]
   18ad4:	mov	r0, r5
   18ad8:	bl	1e600 <flatcc_builder_start_offset_vector@@Base>
   18adc:	ldr	r2, [r6, #-4]
   18ae0:	mov	r0, r5
   18ae4:	mov	r1, r6
   18ae8:	bl	20404 <flatcc_builder_create_string@@Base>
   18aec:	cmp	r0, #0
   18af0:	beq	18b00 <test_clone_slice@@Base+0x2c0>
   18af4:	mov	r1, r0
   18af8:	mov	r0, r5
   18afc:	bl	1e05c <flatcc_builder_offset_vector_push@@Base>
   18b00:	ldr	r0, [r6, #-4]
   18b04:	cmp	r0, #4
   18b08:	mov	r2, r0
   18b0c:	movcs	r2, #4
   18b10:	add	r1, r6, r2
   18b14:	sub	r2, r0, r2
   18b18:	mov	r0, r5
   18b1c:	cmp	r2, #20
   18b20:	movcs	r2, #20
   18b24:	bl	20404 <flatcc_builder_create_string@@Base>
   18b28:	cmp	r0, #0
   18b2c:	beq	18b3c <test_clone_slice@@Base+0x2fc>
   18b30:	mov	r1, r0
   18b34:	mov	r0, r5
   18b38:	bl	1e05c <flatcc_builder_offset_vector_push@@Base>
   18b3c:	ldr	r2, [r6, #-4]
   18b40:	mov	r0, r5
   18b44:	mov	r1, r6
   18b48:	cmp	r2, #3
   18b4c:	movcs	r2, #3
   18b50:	bl	20404 <flatcc_builder_create_string@@Base>
   18b54:	cmp	r0, #0
   18b58:	beq	18b68 <test_clone_slice@@Base+0x328>
   18b5c:	mov	r1, r0
   18b60:	mov	r0, r5
   18b64:	bl	1e05c <flatcc_builder_offset_vector_push@@Base>
   18b68:	mov	r0, r5
   18b6c:	add	r7, sl, r9
   18b70:	bl	1e6cc <flatcc_builder_end_offset_vector@@Base>
   18b74:	cmp	r0, #0
   18b78:	beq	18b94 <test_clone_slice@@Base+0x354>
   18b7c:	mov	r4, r0
   18b80:	mov	r0, r5
   18b84:	mov	r1, #10
   18b88:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   18b8c:	cmp	r0, #0
   18b90:	strne	r4, [r0]
   18b94:	ldr	r0, [sp, #12]
   18b98:	mov	r1, #36	; 0x24
   18b9c:	add	sl, r7, #4
   18ba0:	add	r8, r8, r0
   18ba4:	mov	r0, r5
   18ba8:	bl	1e940 <flatcc_builder_start_table@@Base>
   18bac:	ldr	r0, [r6, #-4]
   18bb0:	cmp	r0, #2
   18bb4:	mov	r2, r0
   18bb8:	movcs	r2, #2
   18bbc:	add	r1, r6, r2
   18bc0:	sub	r2, r0, r2
   18bc4:	mov	r0, r5
   18bc8:	cmp	r2, #20
   18bcc:	movcs	r2, #20
   18bd0:	bl	20404 <flatcc_builder_create_string@@Base>
   18bd4:	cmp	r0, #0
   18bd8:	beq	18bf4 <test_clone_slice@@Base+0x3b4>
   18bdc:	mov	r4, r0
   18be0:	mov	r0, r5
   18be4:	mov	r1, #3
   18be8:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   18bec:	cmp	r0, #0
   18bf0:	strne	r4, [r0]
   18bf4:	ldr	r2, [sl, #-4]
   18bf8:	mvn	r0, #0
   18bfc:	mov	r1, #1
   18c00:	mov	r3, #1
   18c04:	add	r9, r8, #4
   18c08:	str	r1, [sp]
   18c0c:	str	r0, [sp, #4]
   18c10:	mov	r0, r5
   18c14:	mov	r1, sl
   18c18:	bl	1f458 <flatcc_builder_create_vector@@Base>
   18c1c:	cmp	r0, #0
   18c20:	beq	18c3c <test_clone_slice@@Base+0x3fc>
   18c24:	mov	r4, r0
   18c28:	mov	r0, r5
   18c2c:	mov	r1, #24
   18c30:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   18c34:	cmp	r0, #0
   18c38:	strne	r4, [r0]
   18c3c:	ldr	r0, [r9, #-4]
   18c40:	mvn	r1, #-1073741824	; 0xc0000000
   18c44:	mov	r2, #2
   18c48:	str	r1, [sp, #4]
   18c4c:	str	r2, [sp]
   18c50:	cmp	r0, #0
   18c54:	mov	r3, r0
   18c58:	movwne	r3, #1
   18c5c:	sub	r0, r0, r3
   18c60:	add	r1, r9, r3, lsl #2
   18c64:	mov	r3, #4
   18c68:	cmp	r0, #2
   18c6c:	movcc	r2, r0
   18c70:	mov	r0, r5
   18c74:	bl	1f458 <flatcc_builder_create_vector@@Base>
   18c78:	ldr	r7, [sp, #16]
   18c7c:	cmp	r0, #0
   18c80:	beq	18c9c <test_clone_slice@@Base+0x45c>
   18c84:	mov	r4, r0
   18c88:	mov	r0, r5
   18c8c:	mov	r1, #9
   18c90:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   18c94:	cmp	r0, #0
   18c98:	strne	r4, [r0]
   18c9c:	movw	r1, #21988	; 0x55e4
   18ca0:	mov	r0, r5
   18ca4:	mov	r2, #1
   18ca8:	movt	r1, #2
   18cac:	bl	1f220 <flatcc_builder_check_required@@Base>
   18cb0:	cmp	r0, #0
   18cb4:	beq	191c8 <test_clone_slice@@Base+0x988>
   18cb8:	mov	r0, r5
   18cbc:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   18cc0:	cmp	r0, #0
   18cc4:	beq	18d08 <test_clone_slice@@Base+0x4c8>
   18cc8:	mov	r4, r0
   18ccc:	mov	r0, r5
   18cd0:	mov	r1, #7
   18cd4:	mov	r2, #1
   18cd8:	mov	r3, #1
   18cdc:	bl	1fb8c <flatcc_builder_table_add@@Base>
   18ce0:	cmp	r0, #0
   18ce4:	beq	18d08 <test_clone_slice@@Base+0x4c8>
   18ce8:	mov	r6, r0
   18cec:	mov	r0, r5
   18cf0:	mov	r1, #8
   18cf4:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   18cf8:	cmp	r0, #0
   18cfc:	movne	r1, #1
   18d00:	strbne	r1, [r6]
   18d04:	strne	r4, [r0]
   18d08:	ldr	r0, [sl, #-4]
   18d0c:	mov	r2, #1
   18d10:	mvn	r1, #0
   18d14:	mov	r3, #1
   18d18:	str	r2, [sp]
   18d1c:	str	r1, [sp, #4]
   18d20:	cmp	r0, #3
   18d24:	mov	r2, r0
   18d28:	movcs	r2, #3
   18d2c:	add	r1, sl, r2
   18d30:	sub	r2, r0, r2
   18d34:	mov	r0, r5
   18d38:	bl	1f458 <flatcc_builder_create_vector@@Base>
   18d3c:	cmp	r0, #0
   18d40:	beq	18d5c <test_clone_slice@@Base+0x51c>
   18d44:	mov	r4, r0
   18d48:	mov	r0, r5
   18d4c:	mov	r1, #24
   18d50:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   18d54:	cmp	r0, #0
   18d58:	strne	r4, [r0]
   18d5c:	ldr	r1, [r7]
   18d60:	mov	r0, r7
   18d64:	movw	r6, #20301	; 0x4f4d
   18d68:	movt	r6, #21326	; 0x534e
   18d6c:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   18d70:	cmp	r1, #6
   18d74:	bcc	18d8c <test_clone_slice@@Base+0x54c>
   18d78:	ldrh	r0, [r0, #4]
   18d7c:	cmp	r0, #0
   18d80:	beq	18d8c <test_clone_slice@@Base+0x54c>
   18d84:	add	r2, r7, r0
   18d88:	b	18d90 <test_clone_slice@@Base+0x550>
   18d8c:	mov	r2, #0
   18d90:	mov	r0, #16
   18d94:	mov	r1, #0
   18d98:	mov	r3, #32
   18d9c:	str	r0, [sp]
   18da0:	mov	r0, r5
   18da4:	bl	206c0 <flatcc_builder_table_add_copy@@Base>
   18da8:	ldr	r2, [r9, #-4]
   18dac:	mvn	r0, #-1073741824	; 0xc0000000
   18db0:	mov	r1, #2
   18db4:	mov	r3, #4
   18db8:	str	r1, [sp]
   18dbc:	str	r0, [sp, #4]
   18dc0:	mov	r0, r5
   18dc4:	mov	r1, r9
   18dc8:	bl	1f458 <flatcc_builder_create_vector@@Base>
   18dcc:	cmp	r0, #0
   18dd0:	beq	18dec <test_clone_slice@@Base+0x5ac>
   18dd4:	mov	r4, r0
   18dd8:	mov	r0, r5
   18ddc:	mov	r1, #9
   18de0:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   18de4:	cmp	r0, #0
   18de8:	strne	r4, [r0]
   18dec:	movw	r1, #21988	; 0x55e4
   18df0:	mov	r0, r5
   18df4:	mov	r2, #1
   18df8:	movt	r1, #2
   18dfc:	bl	1f220 <flatcc_builder_check_required@@Base>
   18e00:	cmp	r0, #0
   18e04:	beq	191c8 <test_clone_slice@@Base+0x988>
   18e08:	mov	r0, r5
   18e0c:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   18e10:	mov	r1, r0
   18e14:	mov	r0, r5
   18e18:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   18e1c:	add	r1, sp, #32
   18e20:	mov	r0, r5
   18e24:	bl	207ec <flatcc_builder_get_direct_buffer@@Base>
   18e28:	mov	r5, r0
   18e2c:	movw	r0, #32880	; 0x8070
   18e30:	ldr	r2, [sp, #32]
   18e34:	movt	r0, #3
   18e38:	mov	r1, r5
   18e3c:	ldr	r3, [r0]
   18e40:	movw	r0, #10944	; 0x2ac0
   18e44:	movt	r0, #2
   18e48:	bl	1365c <test_type_aliases@@Base+0x51c>
   18e4c:	cmp	r5, #0
   18e50:	beq	191e8 <test_clone_slice@@Base+0x9a8>
   18e54:	ldr	r0, [r5, #4]
   18e58:	cmp	r0, r6
   18e5c:	bne	191e8 <test_clone_slice@@Base+0x9a8>
   18e60:	ldr	r0, [r5]
   18e64:	ldr	r0, [r5, r0]!
   18e68:	mov	r6, r5
   18e6c:	ldrh	r8, [r6, -r0]!
   18e70:	cmp	r8, #11
   18e74:	bls	191bc <test_clone_slice@@Base+0x97c>
   18e78:	ldrh	r0, [r6, #10]
   18e7c:	cmp	r0, #0
   18e80:	beq	191bc <test_clone_slice@@Base+0x97c>
   18e84:	mov	r1, r5
   18e88:	ldr	r0, [r1, r0]!
   18e8c:	add	r0, r1, r0
   18e90:	movw	r1, #20182	; 0x4ed6
   18e94:	movt	r1, #2
   18e98:	add	r0, r0, #4
   18e9c:	bl	12e8c <strcmp@plt>
   18ea0:	cmp	r0, #0
   18ea4:	beq	18ecc <test_clone_slice@@Base+0x68c>
   18ea8:	movw	r0, #20193	; 0x4ee1
   18eac:	movt	r0, #2
   18eb0:	bl	12ee0 <puts@plt>
   18eb4:	mvn	r5, #0
   18eb8:	ldr	r0, [sp, #20]
   18ebc:	bl	20a08 <flatcc_builder_aligned_free@@Base>
   18ec0:	mov	r0, r5
   18ec4:	sub	sp, fp, #28
   18ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ecc:	cmp	r8, #26
   18ed0:	bcc	18ef0 <test_clone_slice@@Base+0x6b0>
   18ed4:	ldrh	r1, [r6, #24]
   18ed8:	cmp	r1, #0
   18edc:	movne	r0, r5
   18ee0:	ldrne	r1, [r0, r1]!
   18ee4:	ldrne	r7, [r0, r1]!
   18ee8:	cmpne	r7, #0
   18eec:	bne	18f10 <test_clone_slice@@Base+0x6d0>
   18ef0:	movw	r0, #13610	; 0x352a
   18ef4:	movw	r1, #13665	; 0x3561
   18ef8:	movw	r3, #14036	; 0x36d4
   18efc:	mov	r2, #108	; 0x6c
   18f00:	movt	r0, #2
   18f04:	movt	r1, #2
   18f08:	movt	r3, #2
   18f0c:	bl	12f88 <__assert_fail@plt>
   18f10:	add	r4, r0, #4
   18f14:	movw	r1, #20182	; 0x4ed6
   18f18:	ldr	r0, [r4]
   18f1c:	movt	r1, #2
   18f20:	add	r0, r4, r0
   18f24:	add	r0, r0, #4
   18f28:	bl	12e8c <strcmp@plt>
   18f2c:	cmp	r0, #0
   18f30:	beq	18f40 <test_clone_slice@@Base+0x700>
   18f34:	movw	r0, #20164	; 0x4ec4
   18f38:	movt	r0, #2
   18f3c:	b	18eb0 <test_clone_slice@@Base+0x670>
   18f40:	cmp	r7, #1
   18f44:	bls	18ef0 <test_clone_slice@@Base+0x6b0>
   18f48:	mov	r0, r4
   18f4c:	ldr	r1, [r0, #4]!
   18f50:	ldr	r1, [r0, r1]!
   18f54:	cmp	r1, #6
   18f58:	bne	18f80 <test_clone_slice@@Base+0x740>
   18f5c:	movw	r1, #20121	; 0x4e99
   18f60:	add	r0, r0, #4
   18f64:	movt	r1, #2
   18f68:	bl	12e8c <strcmp@plt>
   18f6c:	cmp	r0, #0
   18f70:	beq	18f8c <test_clone_slice@@Base+0x74c>
   18f74:	movw	r0, #20103	; 0x4e87
   18f78:	movt	r0, #2
   18f7c:	b	18eb0 <test_clone_slice@@Base+0x670>
   18f80:	movw	r0, #20128	; 0x4ea0
   18f84:	movt	r0, #2
   18f88:	b	18eb0 <test_clone_slice@@Base+0x670>
   18f8c:	cmp	r7, #2
   18f90:	bls	18ef0 <test_clone_slice@@Base+0x6b0>
   18f94:	ldr	r0, [r4, #8]!
   18f98:	ldr	r0, [r4, r0]!
   18f9c:	cmp	r0, #3
   18fa0:	bne	18fc8 <test_clone_slice@@Base+0x788>
   18fa4:	movw	r1, #20067	; 0x4e63
   18fa8:	add	r0, r4, #4
   18fac:	movt	r1, #2
   18fb0:	bl	12e8c <strcmp@plt>
   18fb4:	cmp	r0, #0
   18fb8:	beq	18fd4 <test_clone_slice@@Base+0x794>
   18fbc:	movw	r0, #20049	; 0x4e51
   18fc0:	movt	r0, #2
   18fc4:	b	18eb0 <test_clone_slice@@Base+0x670>
   18fc8:	movw	r0, #20071	; 0x4e67
   18fcc:	movt	r0, #2
   18fd0:	b	18eb0 <test_clone_slice@@Base+0x670>
   18fd4:	ldrh	r0, [r6, #20]
   18fd8:	cmp	r0, #0
   18fdc:	beq	19240 <test_clone_slice@@Base+0xa00>
   18fe0:	mov	r4, r5
   18fe4:	ldr	r0, [r4, r0]!
   18fe8:	ldr	r0, [r4, r0]!
   18fec:	mov	sl, r4
   18ff0:	ldrh	r7, [sl, -r0]!
   18ff4:	cmp	r7, #11
   18ff8:	bls	191bc <test_clone_slice@@Base+0x97c>
   18ffc:	ldrh	r0, [sl, #10]
   19000:	cmp	r0, #0
   19004:	beq	191bc <test_clone_slice@@Base+0x97c>
   19008:	mov	r1, r4
   1900c:	ldr	r0, [r1, r0]!
   19010:	add	r0, r1, r0
   19014:	movw	r1, #20184	; 0x4ed8
   19018:	movt	r1, #2
   1901c:	add	r0, r0, #4
   19020:	bl	12e8c <strcmp@plt>
   19024:	cmp	r0, #0
   19028:	beq	1903c <test_clone_slice@@Base+0x7fc>
   1902c:	movw	r0, #10967	; 0x2ad7
   19030:	movt	r0, #2
   19034:	bl	12e98 <printf@plt>
   19038:	b	18eb4 <test_clone_slice@@Base+0x674>
   1903c:	cmp	r7, #54	; 0x36
   19040:	bcc	1908c <test_clone_slice@@Base+0x84c>
   19044:	ldrh	r1, [sl, #52]	; 0x34
   19048:	cmp	r1, #0
   1904c:	beq	1908c <test_clone_slice@@Base+0x84c>
   19050:	mov	r0, r4
   19054:	ldr	r1, [r0, r1]!
   19058:	ldr	r1, [r0, r1]!
   1905c:	cmp	r1, #7
   19060:	bne	1908c <test_clone_slice@@Base+0x84c>
   19064:	add	r9, sp, #24
   19068:	add	r0, r0, #4
   1906c:	mov	r2, #7
   19070:	mov	r1, r9
   19074:	bl	12f10 <bcmp@plt>
   19078:	cmp	r0, #0
   1907c:	beq	19098 <test_clone_slice@@Base+0x858>
   19080:	movw	r0, #19991	; 0x4e17
   19084:	movt	r0, #2
   19088:	b	18eb0 <test_clone_slice@@Base+0x670>
   1908c:	movw	r0, #20021	; 0x4e35
   19090:	movt	r0, #2
   19094:	b	18eb0 <test_clone_slice@@Base+0x670>
   19098:	cmp	r8, #54	; 0x36
   1909c:	bcc	190e4 <test_clone_slice@@Base+0x8a4>
   190a0:	ldrh	r1, [r6, #52]	; 0x34
   190a4:	cmp	r1, #0
   190a8:	beq	190e4 <test_clone_slice@@Base+0x8a4>
   190ac:	mov	r0, r5
   190b0:	ldr	r1, [r0, r1]!
   190b4:	ldr	r1, [r0, r1]!
   190b8:	cmp	r1, #4
   190bc:	bne	190e4 <test_clone_slice@@Base+0x8a4>
   190c0:	add	r0, r0, #4
   190c4:	orr	r1, r9, #3
   190c8:	mov	r2, #4
   190cc:	bl	12f10 <bcmp@plt>
   190d0:	cmp	r0, #0
   190d4:	beq	190f0 <test_clone_slice@@Base+0x8b0>
   190d8:	movw	r0, #19933	; 0x4ddd
   190dc:	movt	r0, #2
   190e0:	b	18eb0 <test_clone_slice@@Base+0x670>
   190e4:	movw	r0, #19963	; 0x4dfb
   190e8:	movt	r0, #2
   190ec:	b	18eb0 <test_clone_slice@@Base+0x670>
   190f0:	ldrh	r0, [r6, #4]
   190f4:	vldr	s0, [pc, #348]	; 19258 <test_clone_slice@@Base+0xa18>
   190f8:	add	r0, r5, r0
   190fc:	vldr	s2, [r0]
   19100:	vcmp.f32	s2, s0
   19104:	vmrs	APSR_nzcv, fpscr
   19108:	beq	19118 <test_clone_slice@@Base+0x8d8>
   1910c:	movw	r0, #19908	; 0x4dc4
   19110:	movt	r0, #2
   19114:	b	18eb0 <test_clone_slice@@Base+0x670>
   19118:	ldrh	r0, [r6, #22]
   1911c:	cmp	r0, #0
   19120:	beq	1918c <test_clone_slice@@Base+0x94c>
   19124:	ldr	r0, [r5, r0]!
   19128:	ldr	r0, [r5, r0]!
   1912c:	cmp	r0, #2
   19130:	bne	1918c <test_clone_slice@@Base+0x94c>
   19134:	add	r0, r5, #4
   19138:	ldrh	r1, [r0]
   1913c:	cmp	r1, #22
   19140:	bne	19198 <test_clone_slice@@Base+0x958>
   19144:	ldrh	r0, [r0, #4]
   19148:	cmp	r0, #44	; 0x2c
   1914c:	bne	191a4 <test_clone_slice@@Base+0x964>
   19150:	ldrh	r0, [sl, #22]
   19154:	cmp	r0, #0
   19158:	beq	191b0 <test_clone_slice@@Base+0x970>
   1915c:	ldr	r0, [r4, r0]!
   19160:	ldr	r0, [r4, r0]!
   19164:	cmp	r0, #1
   19168:	bne	191b0 <test_clone_slice@@Base+0x970>
   1916c:	add	r0, r4, #4
   19170:	mov	r5, #0
   19174:	ldrh	r0, [r0]
   19178:	cmp	r0, #44	; 0x2c
   1917c:	beq	18eb8 <test_clone_slice@@Base+0x678>
   19180:	movw	r0, #19738	; 0x4d1a
   19184:	movt	r0, #2
   19188:	b	18eb0 <test_clone_slice@@Base+0x670>
   1918c:	movw	r0, #19857	; 0x4d91
   19190:	movt	r0, #2
   19194:	b	18eb0 <test_clone_slice@@Base+0x670>
   19198:	movw	r0, #19830	; 0x4d76
   1919c:	movt	r0, #2
   191a0:	b	18eb0 <test_clone_slice@@Base+0x670>
   191a4:	movw	r0, #19803	; 0x4d5b
   191a8:	movt	r0, #2
   191ac:	b	18eb0 <test_clone_slice@@Base+0x670>
   191b0:	movw	r0, #19774	; 0x4d3e
   191b4:	movt	r0, #2
   191b8:	b	18eb0 <test_clone_slice@@Base+0x670>
   191bc:	movw	r0, #13488	; 0x34b0
   191c0:	movt	r0, #2
   191c4:	b	191f0 <test_clone_slice@@Base+0x9b0>
   191c8:	movw	r0, #12876	; 0x324c
   191cc:	movw	r1, #12586	; 0x312a
   191d0:	movw	r3, #13038	; 0x32ee
   191d4:	mov	r2, #235	; 0xeb
   191d8:	movt	r0, #2
   191dc:	movt	r1, #2
   191e0:	movt	r3, #2
   191e4:	bl	12f88 <__assert_fail@plt>
   191e8:	movw	r0, #12203	; 0x2fab
   191ec:	movt	r0, #2
   191f0:	movw	r1, #12241	; 0x2fd1
   191f4:	movw	r3, #13407	; 0x345f
   191f8:	movw	r2, #699	; 0x2bb
   191fc:	movt	r1, #2
   19200:	movt	r3, #2
   19204:	bl	12f88 <__assert_fail@plt>
   19208:	movw	r0, #10932	; 0x2ab4
   1920c:	movw	r1, #9448	; 0x24e8
   19210:	movw	r3, #10891	; 0x2a8b
   19214:	movw	r2, #1606	; 0x646
   19218:	movt	r0, #2
   1921c:	b	19234 <test_clone_slice@@Base+0x9f4>
   19220:	movw	r0, #10938	; 0x2aba
   19224:	movw	r1, #9448	; 0x24e8
   19228:	movw	r3, #10891	; 0x2a8b
   1922c:	movw	r2, #1608	; 0x648
   19230:	movt	r0, #2
   19234:	movt	r1, #2
   19238:	movt	r3, #2
   1923c:	bl	12f88 <__assert_fail@plt>
   19240:	movw	r0, #9444	; 0x24e4
   19244:	movw	r1, #9448	; 0x24e8
   19248:	movw	r3, #10891	; 0x2a8b
   1924c:	mov	r2, #1664	; 0x680
   19250:	movt	r0, #2
   19254:	b	19234 <test_clone_slice@@Base+0x9f4>
   19258:	eorgt	r3, r9, #-872415232	; 0xcc000000

0001925c <test_create_add_field@@Base>:
   1925c:	push	{r4, r5, fp, lr}
   19260:	add	fp, sp, #8
   19264:	sub	sp, sp, #8
   19268:	mov	r4, r0
   1926c:	bl	1d0ac <flatcc_builder_reset@@Base>
   19270:	movw	r1, #8956	; 0x22fc
   19274:	mov	r0, r4
   19278:	mov	r2, #0
   1927c:	mov	r3, #0
   19280:	movt	r1, #2
   19284:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   19288:	cmp	r0, #0
   1928c:	bne	1929c <test_create_add_field@@Base+0x40>
   19290:	mov	r0, r4
   19294:	mov	r1, #36	; 0x24
   19298:	bl	1e940 <flatcc_builder_start_table@@Base>
   1929c:	movw	r1, #9024	; 0x2340
   192a0:	mov	r0, r4
   192a4:	movt	r1, #2
   192a8:	bl	20504 <flatcc_builder_create_string_str@@Base>
   192ac:	cmp	r0, #0
   192b0:	beq	192cc <test_create_add_field@@Base+0x70>
   192b4:	mov	r5, r0
   192b8:	mov	r0, r4
   192bc:	mov	r1, #3
   192c0:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   192c4:	cmp	r0, #0
   192c8:	strne	r5, [r0]
   192cc:	movw	r1, #11015	; 0x2b07
   192d0:	mov	r0, r4
   192d4:	movt	r1, #2
   192d8:	bl	20504 <flatcc_builder_create_string_str@@Base>
   192dc:	mov	r5, r0
   192e0:	mov	r0, r4
   192e4:	mov	r1, #3
   192e8:	bl	1e940 <flatcc_builder_start_table@@Base>
   192ec:	cmp	r0, #0
   192f0:	beq	19384 <test_create_add_field@@Base+0x128>
   192f4:	movw	r1, #21988	; 0x55e4
   192f8:	mov	r0, r4
   192fc:	mov	r2, #1
   19300:	movt	r1, #2
   19304:	bl	1f220 <flatcc_builder_check_required@@Base>
   19308:	cmp	r0, #0
   1930c:	beq	194f8 <test_create_add_field@@Base+0x29c>
   19310:	mov	r0, r4
   19314:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   19318:	mov	r1, r0
   1931c:	mov	r0, r4
   19320:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   19324:	add	r1, sp, #4
   19328:	mov	r0, r4
   1932c:	bl	20908 <flatcc_builder_finalize_aligned_buffer@@Base>
   19330:	cmp	r0, #0
   19334:	beq	194b8 <test_create_add_field@@Base+0x25c>
   19338:	mov	r4, r0
   1933c:	ldr	r0, [r0, #4]
   19340:	movw	r1, #20301	; 0x4f4d
   19344:	movt	r1, #21326	; 0x534e
   19348:	cmp	r0, r1
   1934c:	bne	194b8 <test_create_add_field@@Base+0x25c>
   19350:	ldr	r0, [r4]
   19354:	mov	r1, r4
   19358:	ldr	r2, [r1, r0]!
   1935c:	mov	r0, r1
   19360:	ldrh	r2, [r0, -r2]!	; <UNPREDICTABLE>
   19364:	cmp	r2, #29
   19368:	bls	194d8 <test_create_add_field@@Base+0x27c>
   1936c:	ldrh	r3, [r0, #28]
   19370:	cmp	r3, #0
   19374:	beq	1943c <test_create_add_field@@Base+0x1e0>
   19378:	movw	r0, #20238	; 0x4f0e
   1937c:	movt	r0, #2
   19380:	b	1949c <test_create_add_field@@Base+0x240>
   19384:	mov	r0, r4
   19388:	mov	r1, #1
   1938c:	mov	r2, #8
   19390:	mov	r3, #8
   19394:	bl	1fb8c <flatcc_builder_table_add@@Base>
   19398:	cmp	r0, #0
   1939c:	beq	192f4 <test_create_add_field@@Base+0x98>
   193a0:	mvn	r2, #99	; 0x63
   193a4:	cmp	r5, #0
   193a8:	mvn	r1, #0
   193ac:	str	r2, [r0]
   193b0:	str	r1, [r0, #4]
   193b4:	beq	192f4 <test_create_add_field@@Base+0x98>
   193b8:	mov	r0, r4
   193bc:	mov	r1, #0
   193c0:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   193c4:	cmp	r0, #0
   193c8:	beq	192f4 <test_create_add_field@@Base+0x98>
   193cc:	str	r5, [r0]
   193d0:	mov	r0, r4
   193d4:	mov	r1, #2
   193d8:	mov	r2, #2
   193dc:	mov	r3, #2
   193e0:	mov	r5, #2
   193e4:	bl	1fb8c <flatcc_builder_table_add@@Base>
   193e8:	cmp	r0, #0
   193ec:	beq	192f4 <test_create_add_field@@Base+0x98>
   193f0:	movw	r1, #21994	; 0x55ea
   193f4:	strh	r5, [r0]
   193f8:	mov	r0, r4
   193fc:	mov	r2, #0
   19400:	movt	r1, #2
   19404:	bl	1f220 <flatcc_builder_check_required@@Base>
   19408:	cmp	r0, #0
   1940c:	beq	19518 <test_create_add_field@@Base+0x2bc>
   19410:	mov	r0, r4
   19414:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   19418:	cmp	r0, #0
   1941c:	beq	192f4 <test_create_add_field@@Base+0x98>
   19420:	mov	r5, r0
   19424:	mov	r0, r4
   19428:	mov	r1, #14
   1942c:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   19430:	cmp	r0, #0
   19434:	strne	r5, [r0]
   19438:	b	192f4 <test_create_add_field@@Base+0x98>
   1943c:	cmp	r2, #34	; 0x22
   19440:	bcc	194d8 <test_create_add_field@@Base+0x27c>
   19444:	ldrh	r0, [r0, #32]
   19448:	cmp	r0, #0
   1944c:	beq	194d8 <test_create_add_field@@Base+0x27c>
   19450:	ldr	r0, [r1, r0]!
   19454:	ldr	r0, [r1, r0]!
   19458:	mov	r2, r1
   1945c:	ldrh	r3, [r2, -r0]!
   19460:	movw	r0, #20219	; 0x4efb
   19464:	movt	r0, #2
   19468:	cmp	r3, #7
   1946c:	bls	1949c <test_create_add_field@@Base+0x240>
   19470:	ldrh	r2, [r2, #6]
   19474:	cmp	r2, #0
   19478:	beq	1949c <test_create_add_field@@Base+0x240>
   1947c:	ldr	r2, [r1, r2]!
   19480:	mvn	r3, #99	; 0x63
   19484:	mov	r5, #0
   19488:	ldr	r1, [r1, #4]
   1948c:	eor	r2, r2, r3
   19490:	mvn	r1, r1
   19494:	orrs	r1, r2, r1
   19498:	beq	194a4 <test_create_add_field@@Base+0x248>
   1949c:	bl	12ee0 <puts@plt>
   194a0:	mvn	r5, #0
   194a4:	mov	r0, r4
   194a8:	bl	20a08 <flatcc_builder_aligned_free@@Base>
   194ac:	mov	r0, r5
   194b0:	sub	sp, fp, #8
   194b4:	pop	{r4, r5, fp, pc}
   194b8:	movw	r0, #12203	; 0x2fab
   194bc:	movw	r1, #12241	; 0x2fd1
   194c0:	movw	r3, #14442	; 0x386a
   194c4:	mov	r2, #716	; 0x2cc
   194c8:	movt	r0, #2
   194cc:	movt	r1, #2
   194d0:	movt	r3, #2
   194d4:	bl	12f88 <__assert_fail@plt>
   194d8:	movw	r0, #12203	; 0x2fab
   194dc:	movw	r1, #12241	; 0x2fd1
   194e0:	movw	r3, #14518	; 0x38b6
   194e4:	mov	r2, #608	; 0x260
   194e8:	movt	r0, #2
   194ec:	movt	r1, #2
   194f0:	movt	r3, #2
   194f4:	bl	12f88 <__assert_fail@plt>
   194f8:	movw	r0, #12876	; 0x324c
   194fc:	movw	r1, #12586	; 0x312a
   19500:	movw	r3, #13038	; 0x32ee
   19504:	mov	r2, #235	; 0xeb
   19508:	movt	r0, #2
   1950c:	movt	r1, #2
   19510:	movt	r3, #2
   19514:	bl	12f88 <__assert_fail@plt>
   19518:	movw	r0, #14214	; 0x3786
   1951c:	movw	r1, #12586	; 0x312a
   19520:	movw	r3, #14367	; 0x381f
   19524:	mov	r2, #221	; 0xdd
   19528:	movt	r0, #2
   1952c:	movt	r1, #2
   19530:	movt	r3, #2
   19534:	bl	12f88 <__assert_fail@plt>

00019538 <test_union_vector@@Base>:
   19538:	push	{r4, r5, r6, r7, fp, lr}
   1953c:	add	fp, sp, #16
   19540:	sub	sp, sp, #16
   19544:	mov	r4, r0
   19548:	bl	1d0ac <flatcc_builder_reset@@Base>
   1954c:	movw	r1, #8956	; 0x22fc
   19550:	mov	r0, r4
   19554:	mov	r2, #0
   19558:	mov	r3, #0
   1955c:	movt	r1, #2
   19560:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   19564:	cmp	r0, #0
   19568:	bne	19578 <test_union_vector@@Base+0x40>
   1956c:	mov	r0, r4
   19570:	mov	r1, #36	; 0x24
   19574:	bl	1e940 <flatcc_builder_start_table@@Base>
   19578:	movw	r1, #11021	; 0x2b0d
   1957c:	mov	r0, r4
   19580:	movt	r1, #2
   19584:	bl	20504 <flatcc_builder_create_string_str@@Base>
   19588:	cmp	r0, #0
   1958c:	beq	195a8 <test_union_vector@@Base+0x70>
   19590:	mov	r5, r0
   19594:	mov	r0, r4
   19598:	mov	r1, #3
   1959c:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   195a0:	cmp	r0, #0
   195a4:	strne	r5, [r0]
   195a8:	mov	r0, r4
   195ac:	mov	r1, #4
   195b0:	bl	1e940 <flatcc_builder_start_table@@Base>
   195b4:	mov	r5, #0
   195b8:	cmp	r0, #0
   195bc:	bne	195e8 <test_union_vector@@Base+0xb0>
   195c0:	movw	r1, #21996	; 0x55ec
   195c4:	mov	r0, r4
   195c8:	mov	r2, #0
   195cc:	movt	r1, #2
   195d0:	bl	1f220 <flatcc_builder_check_required@@Base>
   195d4:	cmp	r0, #0
   195d8:	beq	19a28 <test_union_vector@@Base+0x4f0>
   195dc:	mov	r0, r4
   195e0:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   195e4:	mov	r5, r0
   195e8:	mov	r0, r4
   195ec:	bl	1ff7c <flatcc_builder_start_union_vector@@Base>
   195f0:	mov	r0, r4
   195f4:	mov	r1, #2
   195f8:	mov	r2, r5
   195fc:	bl	20288 <flatcc_builder_union_vector_push@@Base>
   19600:	add	r0, sp, #4
   19604:	mov	r1, r4
   19608:	bl	1fff4 <flatcc_builder_end_union_vector@@Base>
   1960c:	ldr	r6, [sp, #4]
   19610:	ldr	r5, [sp, #8]
   19614:	mov	r0, r4
   19618:	mov	r1, #4
   1961c:	bl	1e940 <flatcc_builder_start_table@@Base>
   19620:	cmp	r6, #0
   19624:	cmpne	r5, #0
   19628:	bne	197ac <test_union_vector@@Base+0x274>
   1962c:	movw	r1, #21998	; 0x55ee
   19630:	mov	r0, r4
   19634:	mov	r2, #0
   19638:	movt	r1, #2
   1963c:	bl	1f220 <flatcc_builder_check_required@@Base>
   19640:	cmp	r0, #0
   19644:	beq	199c8 <test_union_vector@@Base+0x490>
   19648:	mov	r0, r4
   1964c:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   19650:	cmp	r0, #0
   19654:	beq	19698 <test_union_vector@@Base+0x160>
   19658:	mov	r5, r0
   1965c:	mov	r0, r4
   19660:	mov	r1, #7
   19664:	mov	r2, #1
   19668:	mov	r3, #1
   1966c:	bl	1fb8c <flatcc_builder_table_add@@Base>
   19670:	cmp	r0, #0
   19674:	beq	19698 <test_union_vector@@Base+0x160>
   19678:	mov	r6, r0
   1967c:	mov	r0, r4
   19680:	mov	r1, #8
   19684:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   19688:	cmp	r0, #0
   1968c:	movne	r1, #4
   19690:	strbne	r1, [r6]
   19694:	strne	r5, [r0]
   19698:	movw	r1, #21988	; 0x55e4
   1969c:	mov	r0, r4
   196a0:	mov	r2, #1
   196a4:	movt	r1, #2
   196a8:	bl	1f220 <flatcc_builder_check_required@@Base>
   196ac:	cmp	r0, #0
   196b0:	beq	199e8 <test_union_vector@@Base+0x4b0>
   196b4:	mov	r0, r4
   196b8:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   196bc:	mov	r1, r0
   196c0:	mov	r0, r4
   196c4:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   196c8:	add	r1, sp, #12
   196cc:	mov	r0, r4
   196d0:	bl	20908 <flatcc_builder_finalize_aligned_buffer@@Base>
   196d4:	ldr	r1, [sp, #12]
   196d8:	movw	r2, #8956	; 0x22fc
   196dc:	movw	r3, #49568	; 0xc1a0
   196e0:	mov	r4, r0
   196e4:	movt	r2, #2
   196e8:	movt	r3, #1
   196ec:	bl	21a80 <flatcc_verify_table_as_root@@Base>
   196f0:	cmp	r0, #0
   196f4:	beq	19714 <test_union_vector@@Base+0x1dc>
   196f8:	bl	20ff4 <flatcc_verify_error_string@@Base>
   196fc:	mov	r1, r0
   19700:	movw	r0, #11028	; 0x2b14
   19704:	movt	r0, #2
   19708:	bl	12e98 <printf@plt>
   1970c:	mvn	r0, #0
   19710:	b	197f4 <test_union_vector@@Base+0x2bc>
   19714:	cmp	r4, #0
   19718:	beq	19a08 <test_union_vector@@Base+0x4d0>
   1971c:	ldr	r0, [r4, #4]
   19720:	movw	r1, #20301	; 0x4f4d
   19724:	movt	r1, #21326	; 0x534e
   19728:	cmp	r0, r1
   1972c:	bne	19a08 <test_union_vector@@Base+0x4d0>
   19730:	ldr	r0, [r4]
   19734:	mov	r7, r4
   19738:	ldr	r1, [r7, r0]!
   1973c:	mov	r0, r7
   19740:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   19744:	cmp	r1, #19
   19748:	bls	197dc <test_union_vector@@Base+0x2a4>
   1974c:	ldrh	r3, [r0, #18]
   19750:	cmp	r3, #0
   19754:	beq	197dc <test_union_vector@@Base+0x2a4>
   19758:	ldrb	r3, [r7, r3]
   1975c:	cmp	r3, #4
   19760:	bne	197dc <test_union_vector@@Base+0x2a4>
   19764:	cmp	r1, #22
   19768:	bcc	1979c <test_union_vector@@Base+0x264>
   1976c:	ldrh	r0, [r0, #20]
   19770:	cmp	r0, #0
   19774:	beq	1979c <test_union_vector@@Base+0x264>
   19778:	ldr	r0, [r7, r0]!
   1977c:	ldr	r0, [r7, r0]!
   19780:	mov	r3, r7
   19784:	ldrh	r6, [r3, -r0]!
   19788:	cmp	r6, #12
   1978c:	bcc	197fc <test_union_vector@@Base+0x2c4>
   19790:	ldrh	r0, [r3, #10]
   19794:	cmp	r0, #0
   19798:	beq	19804 <test_union_vector@@Base+0x2cc>
   1979c:	movw	r0, #20283	; 0x4f3b
   197a0:	movt	r0, #2
   197a4:	bl	12ee0 <puts@plt>
   197a8:	b	197e8 <test_union_vector@@Base+0x2b0>
   197ac:	mov	r0, r4
   197b0:	mov	r1, #2
   197b4:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   197b8:	cmp	r0, #0
   197bc:	beq	1962c <test_union_vector@@Base+0xf4>
   197c0:	str	r6, [r0]
   197c4:	mov	r0, r4
   197c8:	mov	r1, #3
   197cc:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   197d0:	cmp	r0, #0
   197d4:	strne	r5, [r0]
   197d8:	b	1962c <test_union_vector@@Base+0xf4>
   197dc:	movw	r0, #11088	; 0x2b50
   197e0:	movt	r0, #2
   197e4:	bl	12e98 <printf@plt>
   197e8:	mov	r0, r4
   197ec:	bl	20a08 <flatcc_builder_aligned_free@@Base>
   197f0:	mov	r0, #0
   197f4:	sub	sp, fp, #16
   197f8:	pop	{r4, r5, r6, r7, fp, pc}
   197fc:	cmp	r6, #10
   19800:	bcc	198a4 <test_union_vector@@Base+0x36c>
   19804:	ldrh	r5, [r3, #8]
   19808:	mov	lr, #0
   1980c:	mov	r1, #0
   19810:	cmp	r5, #0
   19814:	beq	19828 <test_union_vector@@Base+0x2f0>
   19818:	mov	r1, r7
   1981c:	ldr	r0, [r1, r5]!
   19820:	add	r0, r1, r0
   19824:	add	r1, r0, #4
   19828:	cmp	r6, #12
   1982c:	bcc	19854 <test_union_vector@@Base+0x31c>
   19830:	ldrh	r0, [r3, #10]
   19834:	cmp	r0, #0
   19838:	beq	19850 <test_union_vector@@Base+0x318>
   1983c:	mov	r2, r7
   19840:	ldr	r0, [r2, r0]!
   19844:	add	r0, r2, r0
   19848:	add	lr, r0, #4
   1984c:	b	19854 <test_union_vector@@Base+0x31c>
   19850:	mov	lr, #0
   19854:	cmp	r1, #0
   19858:	beq	198a4 <test_union_vector@@Base+0x36c>
   1985c:	ldr	r0, [r1, #-4]
   19860:	cmp	r0, #1
   19864:	bne	198a4 <test_union_vector@@Base+0x36c>
   19868:	ldrb	r0, [r1]
   1986c:	cmp	r0, #2
   19870:	bne	198b0 <test_union_vector@@Base+0x378>
   19874:	cmp	lr, #0
   19878:	ldrne	r0, [lr, #-4]
   1987c:	cmpne	r0, #0
   19880:	bne	198bc <test_union_vector@@Base+0x384>
   19884:	movw	r0, #13610	; 0x352a
   19888:	movw	r1, #13665	; 0x3561
   1988c:	movw	r3, #15218	; 0x3b72
   19890:	mov	r2, #117	; 0x75
   19894:	movt	r0, #2
   19898:	movt	r1, #2
   1989c:	movt	r3, #2
   198a0:	bl	12f88 <__assert_fail@plt>
   198a4:	movw	r0, #20483	; 0x5003
   198a8:	movt	r0, #2
   198ac:	b	197a4 <test_union_vector@@Base+0x26c>
   198b0:	movw	r0, #20438	; 0x4fd6
   198b4:	movt	r0, #2
   198b8:	b	197a4 <test_union_vector@@Base+0x26c>
   198bc:	ldr	r0, [lr]
   198c0:	ldr	r0, [lr, r0]!
   198c4:	mov	r1, lr
   198c8:	ldrh	r0, [r1, -r0]!	; <UNPREDICTABLE>
   198cc:	cmp	r0, #6
   198d0:	bcc	198f0 <test_union_vector@@Base+0x3b8>
   198d4:	ldrh	r1, [r1, #4]
   198d8:	cmp	r1, #0
   198dc:	beq	198f0 <test_union_vector@@Base+0x3b8>
   198e0:	add	r0, lr, r1
   198e4:	ldrsb	r1, [r0]
   198e8:	cmp	r1, #2
   198ec:	bne	199ac <test_union_vector@@Base+0x474>
   198f0:	mov	ip, #0
   198f4:	cmp	r5, #0
   198f8:	mov	r1, #0
   198fc:	beq	19910 <test_union_vector@@Base+0x3d8>
   19900:	mov	r0, r7
   19904:	ldr	r1, [r0, r5]!
   19908:	add	r0, r0, r1
   1990c:	add	r1, r0, #4
   19910:	cmp	r6, #12
   19914:	bcc	1992c <test_union_vector@@Base+0x3f4>
   19918:	ldrh	r3, [r3, #10]
   1991c:	cmp	r3, #0
   19920:	ldrne	r0, [r7, r3]!
   19924:	addne	r0, r7, r0
   19928:	addne	ip, r0, #4
   1992c:	cmp	r1, #0
   19930:	mov	r3, #0
   19934:	mov	r2, #0
   19938:	ldrne	r3, [r1, #-4]
   1993c:	cmp	ip, #0
   19940:	ldrne	r2, [ip, #-4]
   19944:	cmp	r3, r2
   19948:	bne	19a48 <test_union_vector@@Base+0x510>
   1994c:	cmp	r1, #0
   19950:	beq	199a0 <test_union_vector@@Base+0x468>
   19954:	ldr	r0, [r1, #-4]
   19958:	cmp	r0, #1
   1995c:	bne	199a0 <test_union_vector@@Base+0x468>
   19960:	ldrb	r1, [r1]
   19964:	cmp	r1, #0
   19968:	beq	199bc <test_union_vector@@Base+0x484>
   1996c:	cmp	ip, #0
   19970:	ldrne	r0, [ip, #-4]
   19974:	cmpne	r0, #0
   19978:	beq	19884 <test_union_vector@@Base+0x34c>
   1997c:	cmp	r1, #2
   19980:	bne	199bc <test_union_vector@@Base+0x484>
   19984:	ldr	r0, [ip]
   19988:	add	r0, ip, r0
   1998c:	cmp	r0, lr
   19990:	beq	197e8 <test_union_vector@@Base+0x2b0>
   19994:	movw	r0, #20323	; 0x4f63
   19998:	movt	r0, #2
   1999c:	b	197a4 <test_union_vector@@Base+0x26c>
   199a0:	movw	r0, #20370	; 0x4f92
   199a4:	movt	r0, #2
   199a8:	b	197a4 <test_union_vector@@Base+0x26c>
   199ac:	movw	r0, #11122	; 0x2b72
   199b0:	movt	r0, #2
   199b4:	bl	12e98 <printf@plt>
   199b8:	b	197e8 <test_union_vector@@Base+0x2b0>
   199bc:	movw	r0, #20345	; 0x4f79
   199c0:	movt	r0, #2
   199c4:	b	197a4 <test_union_vector@@Base+0x26c>
   199c8:	movw	r0, #14902	; 0x3a36
   199cc:	movw	r1, #12586	; 0x312a
   199d0:	movw	r3, #15052	; 0x3acc
   199d4:	mov	r2, #223	; 0xdf
   199d8:	movt	r0, #2
   199dc:	movt	r1, #2
   199e0:	movt	r3, #2
   199e4:	bl	12f88 <__assert_fail@plt>
   199e8:	movw	r0, #12876	; 0x324c
   199ec:	movw	r1, #12586	; 0x312a
   199f0:	movw	r3, #13038	; 0x32ee
   199f4:	mov	r2, #235	; 0xeb
   199f8:	movt	r0, #2
   199fc:	movt	r1, #2
   19a00:	movt	r3, #2
   19a04:	bl	12f88 <__assert_fail@plt>
   19a08:	movw	r0, #12203	; 0x2fab
   19a0c:	movw	r1, #12241	; 0x2fd1
   19a10:	movw	r3, #14117	; 0x3725
   19a14:	movw	r2, #717	; 0x2cd
   19a18:	movt	r0, #2
   19a1c:	movt	r1, #2
   19a20:	movt	r3, #2
   19a24:	bl	12f88 <__assert_fail@plt>
   19a28:	movw	r0, #14579	; 0x38f3
   19a2c:	movw	r1, #12586	; 0x312a
   19a30:	movw	r3, #14789	; 0x39c5
   19a34:	mov	r2, #217	; 0xd9
   19a38:	movt	r0, #2
   19a3c:	movt	r1, #2
   19a40:	movt	r3, #2
   19a44:	bl	12f88 <__assert_fail@plt>
   19a48:	movw	r0, #15302	; 0x3bc6
   19a4c:	movw	r1, #12241	; 0x2fd1
   19a50:	movw	r3, #15403	; 0x3c2b
   19a54:	movw	r2, #621	; 0x26d
   19a58:	movt	r0, #2
   19a5c:	movt	r1, #2
   19a60:	movt	r3, #2
   19a64:	bl	12f88 <__assert_fail@plt>

00019a68 <test_mixed_type_union@@Base>:
   19a68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19a6c:	add	fp, sp, #24
   19a70:	sub	sp, sp, #16
   19a74:	mov	r4, r0
   19a78:	bl	1d0ac <flatcc_builder_reset@@Base>
   19a7c:	movw	r1, #8956	; 0x22fc
   19a80:	mov	r0, r4
   19a84:	mov	r2, #0
   19a88:	mov	r3, #0
   19a8c:	mov	r8, #0
   19a90:	movt	r1, #2
   19a94:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   19a98:	cmp	r0, #0
   19a9c:	bne	19aac <test_mixed_type_union@@Base+0x44>
   19aa0:	mov	r0, r4
   19aa4:	mov	r1, #10
   19aa8:	bl	1e940 <flatcc_builder_start_table@@Base>
   19aac:	mov	r0, r4
   19ab0:	mov	r1, #4
   19ab4:	mov	r2, #4
   19ab8:	bl	1dc04 <flatcc_builder_start_struct@@Base>
   19abc:	cmp	r0, #0
   19ac0:	beq	19ad8 <test_mixed_type_union@@Base+0x70>
   19ac4:	mov	r1, #10
   19ac8:	str	r1, [r0]
   19acc:	mov	r0, r4
   19ad0:	bl	1dca4 <flatcc_builder_end_struct@@Base>
   19ad4:	mov	r8, r0
   19ad8:	mov	r0, r4
   19adc:	mov	r1, #2
   19ae0:	mov	r2, #2
   19ae4:	bl	1dc04 <flatcc_builder_start_struct@@Base>
   19ae8:	cmp	r0, #0
   19aec:	beq	19b08 <test_mixed_type_union@@Base+0xa0>
   19af0:	mov	r1, #22
   19af4:	strh	r1, [r0]
   19af8:	mov	r0, r4
   19afc:	bl	1dca4 <flatcc_builder_end_struct@@Base>
   19b00:	mov	r9, r0
   19b04:	b	19b0c <test_mixed_type_union@@Base+0xa4>
   19b08:	mov	r9, #0
   19b0c:	mov	r0, r4
   19b10:	mov	r1, #2
   19b14:	mov	r2, #2
   19b18:	bl	1dc04 <flatcc_builder_start_struct@@Base>
   19b1c:	cmp	r0, #0
   19b20:	beq	19b7c <test_mixed_type_union@@Base+0x114>
   19b24:	mov	r1, #19
   19b28:	strh	r1, [r0]
   19b2c:	mov	r0, r4
   19b30:	bl	1dca4 <flatcc_builder_end_struct@@Base>
   19b34:	cmp	r0, #0
   19b38:	beq	19b7c <test_mixed_type_union@@Base+0x114>
   19b3c:	mov	r5, r0
   19b40:	mov	r0, r4
   19b44:	mov	r1, #0
   19b48:	mov	r2, #1
   19b4c:	mov	r3, #1
   19b50:	bl	1fb8c <flatcc_builder_table_add@@Base>
   19b54:	cmp	r0, #0
   19b58:	beq	19b7c <test_mixed_type_union@@Base+0x114>
   19b5c:	mov	r7, r0
   19b60:	mov	r0, r4
   19b64:	mov	r1, #1
   19b68:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   19b6c:	cmp	r0, #0
   19b70:	movne	r1, #8
   19b74:	strbne	r1, [r7]
   19b78:	strne	r5, [r0]
   19b7c:	cmp	r9, #0
   19b80:	beq	19bc0 <test_mixed_type_union@@Base+0x158>
   19b84:	mov	r0, r4
   19b88:	mov	r1, #6
   19b8c:	mov	r2, #1
   19b90:	mov	r3, #1
   19b94:	bl	1fb8c <flatcc_builder_table_add@@Base>
   19b98:	cmp	r0, #0
   19b9c:	beq	19bc0 <test_mixed_type_union@@Base+0x158>
   19ba0:	mov	r5, r0
   19ba4:	mov	r0, r4
   19ba8:	mov	r1, #7
   19bac:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   19bb0:	cmp	r0, #0
   19bb4:	movne	r1, #8
   19bb8:	strbne	r1, [r5]
   19bbc:	strne	r9, [r0]
   19bc0:	mov	r0, r4
   19bc4:	mov	r1, #1
   19bc8:	bl	1e940 <flatcc_builder_start_table@@Base>
   19bcc:	mov	r7, #0
   19bd0:	cmp	r0, #0
   19bd4:	beq	19da0 <test_mixed_type_union@@Base+0x338>
   19bd8:	movw	r1, #11151	; 0x2b8f
   19bdc:	mov	r0, r4
   19be0:	movt	r1, #2
   19be4:	bl	20504 <flatcc_builder_create_string_str@@Base>
   19be8:	cmp	r0, #0
   19bec:	beq	19c30 <test_mixed_type_union@@Base+0x1c8>
   19bf0:	mov	r5, r0
   19bf4:	mov	r0, r4
   19bf8:	mov	r1, #4
   19bfc:	mov	r2, #1
   19c00:	mov	r3, #1
   19c04:	bl	1fb8c <flatcc_builder_table_add@@Base>
   19c08:	cmp	r0, #0
   19c0c:	beq	19c30 <test_mixed_type_union@@Base+0x1c8>
   19c10:	mov	r6, r0
   19c14:	mov	r0, r4
   19c18:	mov	r1, #5
   19c1c:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   19c20:	cmp	r0, #0
   19c24:	movne	r1, #11
   19c28:	strbne	r1, [r6]
   19c2c:	strne	r5, [r0]
   19c30:	mov	r0, r4
   19c34:	bl	1ff7c <flatcc_builder_start_union_vector@@Base>
   19c38:	mov	r0, r4
   19c3c:	mov	r1, #8
   19c40:	mov	r2, r9
   19c44:	bl	20288 <flatcc_builder_union_vector_push@@Base>
   19c48:	mov	r0, r4
   19c4c:	mov	r1, #2
   19c50:	mov	r2, r7
   19c54:	bl	20288 <flatcc_builder_union_vector_push@@Base>
   19c58:	mov	r0, r4
   19c5c:	mov	r1, #1
   19c60:	bl	1e940 <flatcc_builder_start_table@@Base>
   19c64:	mov	r6, #0
   19c68:	cmp	r0, #0
   19c6c:	mov	r5, #0
   19c70:	bne	19cc4 <test_mixed_type_union@@Base+0x25c>
   19c74:	mov	r0, r4
   19c78:	mov	r1, #0
   19c7c:	mov	r2, #4
   19c80:	mov	r3, #4
   19c84:	mov	r5, #0
   19c88:	bl	1fb8c <flatcc_builder_table_add@@Base>
   19c8c:	cmp	r0, #0
   19c90:	beq	19cc4 <test_mixed_type_union@@Base+0x25c>
   19c94:	mov	r1, #1
   19c98:	mov	r2, #0
   19c9c:	str	r1, [r0]
   19ca0:	movw	r1, #22000	; 0x55f0
   19ca4:	mov	r0, r4
   19ca8:	movt	r1, #2
   19cac:	bl	1f220 <flatcc_builder_check_required@@Base>
   19cb0:	cmp	r0, #0
   19cb4:	beq	1a3d0 <test_mixed_type_union@@Base+0x968>
   19cb8:	mov	r0, r4
   19cbc:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   19cc0:	mov	r5, r0
   19cc4:	mov	r0, r4
   19cc8:	mov	r1, #2
   19ccc:	mov	r2, r5
   19cd0:	bl	20288 <flatcc_builder_union_vector_push@@Base>
   19cd4:	movw	r1, #11162	; 0x2b9a
   19cd8:	mov	r0, r4
   19cdc:	movt	r1, #2
   19ce0:	bl	20504 <flatcc_builder_create_string_str@@Base>
   19ce4:	mov	r2, r0
   19ce8:	mov	r0, r4
   19cec:	mov	r1, #11
   19cf0:	bl	20288 <flatcc_builder_union_vector_push@@Base>
   19cf4:	mov	r0, r4
   19cf8:	mov	r1, #9
   19cfc:	mov	r2, r8
   19d00:	bl	20288 <flatcc_builder_union_vector_push@@Base>
   19d04:	mov	r0, r4
   19d08:	mov	r1, #4
   19d0c:	mov	r2, #4
   19d10:	bl	1dc04 <flatcc_builder_start_struct@@Base>
   19d14:	mov	r1, #3
   19d18:	str	r1, [r0]
   19d1c:	mov	r0, r4
   19d20:	bl	1dca4 <flatcc_builder_end_struct@@Base>
   19d24:	mov	r2, r0
   19d28:	mov	r0, r4
   19d2c:	mov	r1, #9
   19d30:	bl	20288 <flatcc_builder_union_vector_push@@Base>
   19d34:	mov	r0, r4
   19d38:	mov	r1, #4
   19d3c:	mov	r2, #4
   19d40:	bl	1dc04 <flatcc_builder_start_struct@@Base>
   19d44:	cmp	r0, #0
   19d48:	beq	19d60 <test_mixed_type_union@@Base+0x2f8>
   19d4c:	mov	r1, #1
   19d50:	str	r1, [r0]
   19d54:	mov	r0, r4
   19d58:	bl	1dca4 <flatcc_builder_end_struct@@Base>
   19d5c:	mov	r6, r0
   19d60:	mov	r0, r4
   19d64:	mov	r1, #9
   19d68:	mov	r2, r6
   19d6c:	bl	20288 <flatcc_builder_union_vector_push@@Base>
   19d70:	mov	r0, r4
   19d74:	mov	r1, #4
   19d78:	mov	r2, #4
   19d7c:	bl	1dc04 <flatcc_builder_start_struct@@Base>
   19d80:	cmp	r0, #0
   19d84:	beq	19e40 <test_mixed_type_union@@Base+0x3d8>
   19d88:	mov	r1, #2
   19d8c:	str	r1, [r0]
   19d90:	mov	r0, r4
   19d94:	bl	1dca4 <flatcc_builder_end_struct@@Base>
   19d98:	mov	r2, r0
   19d9c:	b	19e44 <test_mixed_type_union@@Base+0x3dc>
   19da0:	mov	r0, r4
   19da4:	mov	r1, #0
   19da8:	mov	r2, #4
   19dac:	mov	r3, #4
   19db0:	mov	r7, #0
   19db4:	bl	1fb8c <flatcc_builder_table_add@@Base>
   19db8:	cmp	r0, #0
   19dbc:	beq	19bd8 <test_mixed_type_union@@Base+0x170>
   19dc0:	mov	r1, #42	; 0x2a
   19dc4:	mov	r2, #0
   19dc8:	mov	r7, #0
   19dcc:	str	r1, [r0]
   19dd0:	movw	r1, #22000	; 0x55f0
   19dd4:	mov	r0, r4
   19dd8:	movt	r1, #2
   19ddc:	bl	1f220 <flatcc_builder_check_required@@Base>
   19de0:	cmp	r0, #0
   19de4:	beq	1a3d0 <test_mixed_type_union@@Base+0x968>
   19de8:	mov	r0, r4
   19dec:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   19df0:	cmp	r0, #0
   19df4:	beq	19bd8 <test_mixed_type_union@@Base+0x170>
   19df8:	mov	r5, r0
   19dfc:	mov	r0, r4
   19e00:	mov	r1, #2
   19e04:	mov	r2, #1
   19e08:	mov	r3, #1
   19e0c:	bl	1fb8c <flatcc_builder_table_add@@Base>
   19e10:	cmp	r0, #0
   19e14:	beq	19e38 <test_mixed_type_union@@Base+0x3d0>
   19e18:	mov	r6, r0
   19e1c:	mov	r0, r4
   19e20:	mov	r1, #3
   19e24:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   19e28:	cmp	r0, #0
   19e2c:	movne	r1, #2
   19e30:	strbne	r1, [r6]
   19e34:	strne	r5, [r0]
   19e38:	mov	r7, r5
   19e3c:	b	19bd8 <test_mixed_type_union@@Base+0x170>
   19e40:	mov	r2, #0
   19e44:	mov	r0, r4
   19e48:	mov	r1, #9
   19e4c:	bl	20288 <flatcc_builder_union_vector_push@@Base>
   19e50:	movw	r1, #11160	; 0x2b98
   19e54:	mov	r0, r4
   19e58:	movt	r1, #2
   19e5c:	bl	20504 <flatcc_builder_create_string_str@@Base>
   19e60:	mov	r2, r0
   19e64:	mov	r0, r4
   19e68:	mov	r1, #11
   19e6c:	bl	20288 <flatcc_builder_union_vector_push@@Base>
   19e70:	movw	r1, #11156	; 0x2b94
   19e74:	mov	r0, r4
   19e78:	movt	r1, #2
   19e7c:	bl	20504 <flatcc_builder_create_string_str@@Base>
   19e80:	mov	r2, r0
   19e84:	mov	r0, r4
   19e88:	mov	r1, #11
   19e8c:	bl	20288 <flatcc_builder_union_vector_push@@Base>
   19e90:	add	r0, sp, #8
   19e94:	mov	r1, r4
   19e98:	bl	1fff4 <flatcc_builder_end_union_vector@@Base>
   19e9c:	ldr	r6, [sp, #8]
   19ea0:	cmp	r6, #0
   19ea4:	ldrne	r5, [sp, #12]
   19ea8:	cmpne	r5, #0
   19eac:	bne	19fec <test_mixed_type_union@@Base+0x584>
   19eb0:	movw	r1, #22002	; 0x55f2
   19eb4:	mov	r0, r4
   19eb8:	mov	r2, #0
   19ebc:	movt	r1, #2
   19ec0:	bl	1f220 <flatcc_builder_check_required@@Base>
   19ec4:	cmp	r0, #0
   19ec8:	beq	1a390 <test_mixed_type_union@@Base+0x928>
   19ecc:	mov	r0, r4
   19ed0:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   19ed4:	mov	r1, r0
   19ed8:	mov	r0, r4
   19edc:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   19ee0:	add	r1, sp, #4
   19ee4:	mov	r0, r4
   19ee8:	bl	20908 <flatcc_builder_finalize_aligned_buffer@@Base>
   19eec:	mov	r4, r0
   19ef0:	movw	r0, #32880	; 0x8070
   19ef4:	ldr	r2, [sp, #4]
   19ef8:	movt	r0, #3
   19efc:	mov	r1, r4
   19f00:	ldr	r3, [r0]
   19f04:	movw	r0, #11168	; 0x2ba0
   19f08:	movt	r0, #2
   19f0c:	bl	1365c <test_type_aliases@@Base+0x51c>
   19f10:	ldr	r1, [sp, #4]
   19f14:	movw	r2, #8956	; 0x22fc
   19f18:	movw	r3, #51292	; 0xc85c
   19f1c:	mov	r0, r4
   19f20:	movt	r2, #2
   19f24:	movt	r3, #1
   19f28:	bl	21a80 <flatcc_verify_table_as_root@@Base>
   19f2c:	cmp	r0, #0
   19f30:	beq	19f50 <test_mixed_type_union@@Base+0x4e8>
   19f34:	bl	20ff4 <flatcc_verify_error_string@@Base>
   19f38:	mov	r1, r0
   19f3c:	movw	r0, #11181	; 0x2bad
   19f40:	movt	r0, #2
   19f44:	bl	12e98 <printf@plt>
   19f48:	mvn	r5, #0
   19f4c:	b	1a04c <test_mixed_type_union@@Base+0x5e4>
   19f50:	cmp	r4, #0
   19f54:	beq	1a3b0 <test_mixed_type_union@@Base+0x948>
   19f58:	ldr	r0, [r4, #4]
   19f5c:	movw	r1, #20301	; 0x4f4d
   19f60:	movt	r1, #21326	; 0x534e
   19f64:	cmp	r0, r1
   19f68:	bne	1a3b0 <test_mixed_type_union@@Base+0x948>
   19f6c:	ldr	r0, [r4]
   19f70:	mov	r6, r4
   19f74:	ldr	r0, [r6, r0]!
   19f78:	mov	r7, r6
   19f7c:	ldrh	r1, [r7, -r0]!
   19f80:	cmp	r1, #7
   19f84:	bls	1a01c <test_mixed_type_union@@Base+0x5b4>
   19f88:	ldrh	r0, [r7, #6]
   19f8c:	cmp	r0, #0
   19f90:	beq	1a01c <test_mixed_type_union@@Base+0x5b4>
   19f94:	cmp	r1, #24
   19f98:	bcc	1a028 <test_mixed_type_union@@Base+0x5c0>
   19f9c:	ldrh	r5, [r7, #22]
   19fa0:	cmp	r5, #0
   19fa4:	beq	1a028 <test_mixed_type_union@@Base+0x5c0>
   19fa8:	ldrh	r1, [r7, #4]
   19fac:	cmp	r1, #0
   19fb0:	beq	1a034 <test_mixed_type_union@@Base+0x5cc>
   19fb4:	ldrb	r1, [r6, r1]
   19fb8:	cmp	r1, #0
   19fbc:	beq	1a034 <test_mixed_type_union@@Base+0x5cc>
   19fc0:	cmp	r1, #8
   19fc4:	bne	1a034 <test_mixed_type_union@@Base+0x5cc>
   19fc8:	add	r0, r6, r0
   19fcc:	ldr	r1, [r0]
   19fd0:	add	r0, r0, r1
   19fd4:	ldrh	r0, [r0]
   19fd8:	cmp	r0, #20
   19fdc:	bcc	1a058 <test_mixed_type_union@@Base+0x5f0>
   19fe0:	movw	r0, #21062	; 0x5246
   19fe4:	movt	r0, #2
   19fe8:	b	1a03c <test_mixed_type_union@@Base+0x5d4>
   19fec:	mov	r0, r4
   19ff0:	mov	r1, #8
   19ff4:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   19ff8:	cmp	r0, #0
   19ffc:	beq	19eb0 <test_mixed_type_union@@Base+0x448>
   1a000:	str	r6, [r0]
   1a004:	mov	r0, r4
   1a008:	mov	r1, #9
   1a00c:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1a010:	cmp	r0, #0
   1a014:	strne	r5, [r0]
   1a018:	b	19eb0 <test_mixed_type_union@@Base+0x448>
   1a01c:	movw	r0, #20522	; 0x502a
   1a020:	movt	r0, #2
   1a024:	b	1a03c <test_mixed_type_union@@Base+0x5d4>
   1a028:	movw	r0, #20563	; 0x5053
   1a02c:	movt	r0, #2
   1a030:	b	1a03c <test_mixed_type_union@@Base+0x5d4>
   1a034:	movw	r0, #21101	; 0x526d
   1a038:	movt	r0, #2
   1a03c:	bl	12ee0 <puts@plt>
   1a040:	mvn	r5, #0
   1a044:	mov	r0, r4
   1a048:	bl	20a08 <flatcc_builder_aligned_free@@Base>
   1a04c:	mov	r0, r5
   1a050:	sub	sp, fp, #24
   1a054:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a058:	cmp	r0, #19
   1a05c:	bne	1a14c <test_mixed_type_union@@Base+0x6e4>
   1a060:	ldrh	r0, [r7, #16]
   1a064:	cmp	r0, #0
   1a068:	beq	1a158 <test_mixed_type_union@@Base+0x6f0>
   1a06c:	ldrb	r0, [r6, r0]
   1a070:	cmp	r0, #8
   1a074:	bne	1a158 <test_mixed_type_union@@Base+0x6f0>
   1a078:	ldrh	r0, [r7, #18]
   1a07c:	cmp	r0, #0
   1a080:	beq	1a164 <test_mixed_type_union@@Base+0x6fc>
   1a084:	mov	r1, r6
   1a088:	ldr	r0, [r1, r0]!
   1a08c:	add	r0, r1, r0
   1a090:	ldrh	r0, [r0]
   1a094:	cmp	r0, #22
   1a098:	bne	1a170 <test_mixed_type_union@@Base+0x708>
   1a09c:	ldrh	r0, [r7, #8]
   1a0a0:	cmp	r0, #0
   1a0a4:	beq	1a17c <test_mixed_type_union@@Base+0x714>
   1a0a8:	ldrb	r0, [r6, r0]
   1a0ac:	cmp	r0, #2
   1a0b0:	bne	1a17c <test_mixed_type_union@@Base+0x714>
   1a0b4:	ldrh	r1, [r7, #10]
   1a0b8:	cmp	r1, #0
   1a0bc:	beq	1a188 <test_mixed_type_union@@Base+0x720>
   1a0c0:	mov	r0, r6
   1a0c4:	ldr	r1, [r0, r1]!
   1a0c8:	ldr	r2, [r0, r1]!
   1a0cc:	mov	r1, r0
   1a0d0:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1a0d4:	cmp	r2, #6
   1a0d8:	bcc	1a188 <test_mixed_type_union@@Base+0x720>
   1a0dc:	ldrh	r1, [r1, #4]
   1a0e0:	cmp	r1, #0
   1a0e4:	beq	1a188 <test_mixed_type_union@@Base+0x720>
   1a0e8:	ldr	r0, [r0, r1]
   1a0ec:	cmp	r0, #42	; 0x2a
   1a0f0:	bne	1a188 <test_mixed_type_union@@Base+0x720>
   1a0f4:	ldrh	r0, [r7, #12]
   1a0f8:	cmp	r0, #0
   1a0fc:	beq	1a194 <test_mixed_type_union@@Base+0x72c>
   1a100:	ldrb	r0, [r6, r0]
   1a104:	cmp	r0, #11
   1a108:	bne	1a194 <test_mixed_type_union@@Base+0x72c>
   1a10c:	ldrh	r0, [r7, #14]
   1a110:	cmp	r0, #0
   1a114:	beq	1a1a0 <test_mixed_type_union@@Base+0x738>
   1a118:	mov	r1, r6
   1a11c:	ldr	r0, [r1, r0]!
   1a120:	add	r0, r1, r0
   1a124:	movw	r1, #11151	; 0x2b8f
   1a128:	add	r8, r0, #4
   1a12c:	movt	r1, #2
   1a130:	mov	r0, r8
   1a134:	bl	12e8c <strcmp@plt>
   1a138:	cmp	r0, #0
   1a13c:	beq	1a1ac <test_mixed_type_union@@Base+0x744>
   1a140:	movw	r0, #11260	; 0x2bfc
   1a144:	movt	r0, #2
   1a148:	b	1a1cc <test_mixed_type_union@@Base+0x764>
   1a14c:	movw	r0, #21016	; 0x5218
   1a150:	movt	r0, #2
   1a154:	b	1a03c <test_mixed_type_union@@Base+0x5d4>
   1a158:	movw	r0, #20964	; 0x51e4
   1a15c:	movt	r0, #2
   1a160:	b	1a03c <test_mixed_type_union@@Base+0x5d4>
   1a164:	movw	r0, #20606	; 0x507e
   1a168:	movt	r0, #2
   1a16c:	b	1a03c <test_mixed_type_union@@Base+0x5d4>
   1a170:	movw	r0, #20917	; 0x51b5
   1a174:	movt	r0, #2
   1a178:	b	1a03c <test_mixed_type_union@@Base+0x5d4>
   1a17c:	movw	r0, #20894	; 0x519e
   1a180:	movt	r0, #2
   1a184:	b	1a03c <test_mixed_type_union@@Base+0x5d4>
   1a188:	movw	r0, #20653	; 0x50ad
   1a18c:	movt	r0, #2
   1a190:	b	1a03c <test_mixed_type_union@@Base+0x5d4>
   1a194:	movw	r0, #20872	; 0x5188
   1a198:	movt	r0, #2
   1a19c:	b	1a03c <test_mixed_type_union@@Base+0x5d4>
   1a1a0:	movw	r0, #20687	; 0x50cf
   1a1a4:	movt	r0, #2
   1a1a8:	b	1a03c <test_mixed_type_union@@Base+0x5d4>
   1a1ac:	movw	r1, #11151	; 0x2b8f
   1a1b0:	mov	r0, r8
   1a1b4:	movt	r1, #2
   1a1b8:	bl	12e8c <strcmp@plt>
   1a1bc:	cmp	r0, #0
   1a1c0:	beq	1a1d8 <test_mixed_type_union@@Base+0x770>
   1a1c4:	movw	r0, #11296	; 0x2c20
   1a1c8:	movt	r0, #2
   1a1cc:	mov	r1, r8
   1a1d0:	bl	12e98 <printf@plt>
   1a1d4:	b	1a040 <test_mixed_type_union@@Base+0x5d8>
   1a1d8:	ldrh	r1, [r7, #20]
   1a1dc:	mov	r0, r6
   1a1e0:	cmp	r1, #0
   1a1e4:	beq	1a20c <test_mixed_type_union@@Base+0x7a4>
   1a1e8:	ldr	r2, [r0, r5]!
   1a1ec:	add	r0, r0, r2
   1a1f0:	mov	r2, r6
   1a1f4:	ldr	r3, [r2, r1]!
   1a1f8:	add	r0, r0, #4
   1a1fc:	ldr	r3, [r2, r3]!
   1a200:	add	r7, r2, #4
   1a204:	mov	r2, #0
   1a208:	b	1a224 <test_mixed_type_union@@Base+0x7bc>
   1a20c:	ldr	r2, [r0, r5]!
   1a210:	mov	r7, #0
   1a214:	mov	r3, #0
   1a218:	add	r0, r0, r2
   1a21c:	mov	r2, #1
   1a220:	add	r0, r0, #4
   1a224:	ldr	r5, [r0, #-4]
   1a228:	cmp	r3, r5
   1a22c:	bne	1a5d4 <test_mixed_type_union@@Base+0xb6c>
   1a230:	cmp	r2, #0
   1a234:	bne	1a5b4 <test_mixed_type_union@@Base+0xb4c>
   1a238:	ldr	r8, [r7, #-4]
   1a23c:	cmp	r8, #0
   1a240:	beq	1a5b4 <test_mixed_type_union@@Base+0xb4c>
   1a244:	ldrb	r2, [r7]
   1a248:	cmp	r2, #0
   1a24c:	beq	1a350 <test_mixed_type_union@@Base+0x8e8>
   1a250:	ldr	r9, [r0, #-4]
   1a254:	cmp	r9, #0
   1a258:	beq	1a5f4 <test_mixed_type_union@@Base+0xb8c>
   1a25c:	cmp	r2, #8
   1a260:	bne	1a350 <test_mixed_type_union@@Base+0x8e8>
   1a264:	cmp	r8, #1
   1a268:	bls	1a5b4 <test_mixed_type_union@@Base+0xb4c>
   1a26c:	ldrb	r2, [r7, #1]
   1a270:	cmp	r2, #0
   1a274:	beq	1a35c <test_mixed_type_union@@Base+0x8f4>
   1a278:	cmp	r9, #1
   1a27c:	bls	1a5f4 <test_mixed_type_union@@Base+0xb8c>
   1a280:	cmp	r2, #2
   1a284:	bne	1a35c <test_mixed_type_union@@Base+0x8f4>
   1a288:	mov	r2, r0
   1a28c:	ldr	r3, [r2, #4]!
   1a290:	add	r2, r2, r3
   1a294:	ldr	r5, [r2]
   1a298:	mov	r3, r2
   1a29c:	ldrh	r5, [r3, -r5]!	; <UNPREDICTABLE>
   1a2a0:	cmp	r5, #6
   1a2a4:	bcc	1a368 <test_mixed_type_union@@Base+0x900>
   1a2a8:	ldrh	r3, [r3, #4]
   1a2ac:	cmp	r3, #0
   1a2b0:	beq	1a368 <test_mixed_type_union@@Base+0x900>
   1a2b4:	ldr	r2, [r2, r3]
   1a2b8:	cmp	r2, #42	; 0x2a
   1a2bc:	bne	1a368 <test_mixed_type_union@@Base+0x900>
   1a2c0:	cmp	r8, #2
   1a2c4:	bls	1a5b4 <test_mixed_type_union@@Base+0xb4c>
   1a2c8:	ldrb	r2, [r7, #2]
   1a2cc:	cmp	r2, #0
   1a2d0:	beq	1a378 <test_mixed_type_union@@Base+0x910>
   1a2d4:	cmp	r9, #2
   1a2d8:	bls	1a5f4 <test_mixed_type_union@@Base+0xb8c>
   1a2dc:	cmp	r2, #2
   1a2e0:	bne	1a378 <test_mixed_type_union@@Base+0x910>
   1a2e4:	mov	r2, r0
   1a2e8:	ldr	r3, [r2, #8]!
   1a2ec:	add	r2, r2, r3
   1a2f0:	ldr	r5, [r2]
   1a2f4:	mov	r3, r2
   1a2f8:	ldrh	r5, [r3, -r5]!	; <UNPREDICTABLE>
   1a2fc:	cmp	r5, #6
   1a300:	bcc	1a384 <test_mixed_type_union@@Base+0x91c>
   1a304:	ldrh	r3, [r3, #4]
   1a308:	cmp	r3, #0
   1a30c:	beq	1a384 <test_mixed_type_union@@Base+0x91c>
   1a310:	ldr	r2, [r2, r3]
   1a314:	cmp	r2, #1
   1a318:	bne	1a384 <test_mixed_type_union@@Base+0x91c>
   1a31c:	cmp	r1, #0
   1a320:	ldrne	r1, [r6, r1]!
   1a324:	ldrne	r1, [r6, r1]!
   1a328:	cmpne	r1, #3
   1a32c:	bhi	1a3f0 <test_mixed_type_union@@Base+0x988>
   1a330:	movw	r0, #13610	; 0x352a
   1a334:	movw	r1, #13665	; 0x3561
   1a338:	movw	r3, #15125	; 0x3b15
   1a33c:	movw	r2, #405	; 0x195
   1a340:	movt	r0, #2
   1a344:	movt	r1, #2
   1a348:	movt	r3, #2
   1a34c:	bl	12f88 <__assert_fail@plt>
   1a350:	movw	r0, #11341	; 0x2c4d
   1a354:	movt	r0, #2
   1a358:	b	1a370 <test_mixed_type_union@@Base+0x908>
   1a35c:	movw	r0, #11378	; 0x2c72
   1a360:	movt	r0, #2
   1a364:	b	1a370 <test_mixed_type_union@@Base+0x908>
   1a368:	movw	r0, #11413	; 0x2c95
   1a36c:	movt	r0, #2
   1a370:	bl	12e98 <printf@plt>
   1a374:	b	1a040 <test_mixed_type_union@@Base+0x5d8>
   1a378:	movw	r0, #11463	; 0x2cc7
   1a37c:	movt	r0, #2
   1a380:	b	1a370 <test_mixed_type_union@@Base+0x908>
   1a384:	movw	r0, #11497	; 0x2ce9
   1a388:	movt	r0, #2
   1a38c:	b	1a370 <test_mixed_type_union@@Base+0x908>
   1a390:	movw	r0, #15740	; 0x3d7c
   1a394:	movw	r1, #12586	; 0x312a
   1a398:	movw	r3, #15875	; 0x3e03
   1a39c:	mov	r2, #241	; 0xf1
   1a3a0:	movt	r0, #2
   1a3a4:	movt	r1, #2
   1a3a8:	movt	r3, #2
   1a3ac:	bl	12f88 <__assert_fail@plt>
   1a3b0:	movw	r0, #12203	; 0x2fab
   1a3b4:	movw	r1, #12241	; 0x2fd1
   1a3b8:	movw	r3, #15938	; 0x3e42
   1a3bc:	movw	r2, #819	; 0x333
   1a3c0:	movt	r0, #2
   1a3c4:	movt	r1, #2
   1a3c8:	movt	r3, #2
   1a3cc:	bl	12f88 <__assert_fail@plt>
   1a3d0:	movw	r0, #15527	; 0x3ca7
   1a3d4:	movw	r1, #12586	; 0x312a
   1a3d8:	movw	r3, #15671	; 0x3d37
   1a3dc:	mov	r2, #239	; 0xef
   1a3e0:	movt	r0, #2
   1a3e4:	movt	r1, #2
   1a3e8:	movt	r3, #2
   1a3ec:	bl	12f88 <__assert_fail@plt>
   1a3f0:	add	r1, r6, #4
   1a3f4:	ldrb	r1, [r1, #3]
   1a3f8:	cmp	r1, #11
   1a3fc:	bne	1a438 <test_mixed_type_union@@Base+0x9d0>
   1a400:	cmp	r9, #3
   1a404:	bls	1a614 <test_mixed_type_union@@Base+0xbac>
   1a408:	ldr	r1, [r0, #12]!
   1a40c:	add	r0, r0, r1
   1a410:	movw	r1, #11162	; 0x2b9a
   1a414:	add	r6, r0, #4
   1a418:	movt	r1, #2
   1a41c:	mov	r0, r6
   1a420:	bl	12e8c <strcmp@plt>
   1a424:	cmp	r0, #0
   1a428:	beq	1a444 <test_mixed_type_union@@Base+0x9dc>
   1a42c:	movw	r0, #20713	; 0x50e9
   1a430:	movt	r0, #2
   1a434:	b	1a03c <test_mixed_type_union@@Base+0x5d4>
   1a438:	movw	r0, #20826	; 0x515a
   1a43c:	movt	r0, #2
   1a440:	b	1a03c <test_mixed_type_union@@Base+0x5d4>
   1a444:	cmp	r8, #3
   1a448:	bls	1a5b4 <test_mixed_type_union@@Base+0xb4c>
   1a44c:	ldrb	r0, [r7, #3]
   1a450:	cmp	r0, #11
   1a454:	bne	1a47c <test_mixed_type_union@@Base+0xa14>
   1a458:	movw	r1, #11162	; 0x2b9a
   1a45c:	mov	r0, r6
   1a460:	movt	r1, #2
   1a464:	bl	12e8c <strcmp@plt>
   1a468:	cmp	r0, #0
   1a46c:	beq	1a488 <test_mixed_type_union@@Base+0xa20>
   1a470:	movw	r0, #20764	; 0x511c
   1a474:	movt	r0, #2
   1a478:	b	1a03c <test_mixed_type_union@@Base+0x5d4>
   1a47c:	movw	r0, #11546	; 0x2d1a
   1a480:	movt	r0, #2
   1a484:	b	1a370 <test_mixed_type_union@@Base+0x908>
   1a488:	cmp	r8, #4
   1a48c:	bls	1a5b4 <test_mixed_type_union@@Base+0xb4c>
   1a490:	ldrb	r0, [r7, #4]
   1a494:	cmp	r0, #0
   1a498:	beq	1a578 <test_mixed_type_union@@Base+0xb10>
   1a49c:	cmp	r9, #4
   1a4a0:	bls	1a5f4 <test_mixed_type_union@@Base+0xb8c>
   1a4a4:	cmp	r0, #9
   1a4a8:	bne	1a578 <test_mixed_type_union@@Base+0xb10>
   1a4ac:	cmp	r8, #5
   1a4b0:	bls	1a5b4 <test_mixed_type_union@@Base+0xb4c>
   1a4b4:	ldrb	r0, [r7, #5]
   1a4b8:	cmp	r0, #0
   1a4bc:	beq	1a584 <test_mixed_type_union@@Base+0xb1c>
   1a4c0:	cmp	r9, #5
   1a4c4:	bls	1a5f4 <test_mixed_type_union@@Base+0xb8c>
   1a4c8:	cmp	r0, #9
   1a4cc:	bne	1a584 <test_mixed_type_union@@Base+0xb1c>
   1a4d0:	cmp	r8, #6
   1a4d4:	bls	1a5b4 <test_mixed_type_union@@Base+0xb4c>
   1a4d8:	ldrb	r0, [r7, #6]
   1a4dc:	cmp	r0, #0
   1a4e0:	beq	1a590 <test_mixed_type_union@@Base+0xb28>
   1a4e4:	cmp	r9, #6
   1a4e8:	bls	1a5f4 <test_mixed_type_union@@Base+0xb8c>
   1a4ec:	cmp	r0, #9
   1a4f0:	bne	1a590 <test_mixed_type_union@@Base+0xb28>
   1a4f4:	cmp	r8, #7
   1a4f8:	bls	1a5b4 <test_mixed_type_union@@Base+0xb4c>
   1a4fc:	ldrb	r0, [r7, #7]
   1a500:	cmp	r0, #0
   1a504:	beq	1a59c <test_mixed_type_union@@Base+0xb34>
   1a508:	cmp	r9, #7
   1a50c:	bls	1a5f4 <test_mixed_type_union@@Base+0xb8c>
   1a510:	cmp	r0, #9
   1a514:	bne	1a59c <test_mixed_type_union@@Base+0xb34>
   1a518:	cmp	r8, #8
   1a51c:	bls	1a5b4 <test_mixed_type_union@@Base+0xb4c>
   1a520:	ldrb	r0, [r7, #8]
   1a524:	cmp	r0, #0
   1a528:	beq	1a5a8 <test_mixed_type_union@@Base+0xb40>
   1a52c:	cmp	r9, #8
   1a530:	bls	1a5f4 <test_mixed_type_union@@Base+0xb8c>
   1a534:	cmp	r0, #11
   1a538:	bne	1a5a8 <test_mixed_type_union@@Base+0xb40>
   1a53c:	cmp	r8, #9
   1a540:	bls	1a5b4 <test_mixed_type_union@@Base+0xb4c>
   1a544:	ldrb	r0, [r7, #9]
   1a548:	cmp	r0, #0
   1a54c:	beq	1a5a8 <test_mixed_type_union@@Base+0xb40>
   1a550:	cmp	r9, #9
   1a554:	bls	1a5f4 <test_mixed_type_union@@Base+0xb8c>
   1a558:	cmp	r0, #11
   1a55c:	bne	1a5a8 <test_mixed_type_union@@Base+0xb40>
   1a560:	mov	r5, #0
   1a564:	cmp	r8, #10
   1a568:	beq	1a044 <test_mixed_type_union@@Base+0x5dc>
   1a56c:	movw	r0, #11785	; 0x2e09
   1a570:	movt	r0, #2
   1a574:	b	1a370 <test_mixed_type_union@@Base+0x908>
   1a578:	movw	r0, #11602	; 0x2d52
   1a57c:	movt	r0, #2
   1a580:	b	1a370 <test_mixed_type_union@@Base+0x908>
   1a584:	movw	r0, #11636	; 0x2d74
   1a588:	movt	r0, #2
   1a58c:	b	1a370 <test_mixed_type_union@@Base+0x908>
   1a590:	movw	r0, #11670	; 0x2d96
   1a594:	movt	r0, #2
   1a598:	b	1a370 <test_mixed_type_union@@Base+0x908>
   1a59c:	movw	r0, #11706	; 0x2dba
   1a5a0:	movt	r0, #2
   1a5a4:	b	1a370 <test_mixed_type_union@@Base+0x908>
   1a5a8:	movw	r0, #11741	; 0x2ddd
   1a5ac:	movt	r0, #2
   1a5b0:	b	1a370 <test_mixed_type_union@@Base+0x908>
   1a5b4:	movw	r0, #15495	; 0x3c87
   1a5b8:	movw	r1, #12241	; 0x2fd1
   1a5bc:	movw	r3, #16089	; 0x3ed9
   1a5c0:	movw	r2, #773	; 0x305
   1a5c4:	movt	r0, #2
   1a5c8:	movt	r1, #2
   1a5cc:	movt	r3, #2
   1a5d0:	bl	12f88 <__assert_fail@plt>
   1a5d4:	movw	r0, #15302	; 0x3bc6
   1a5d8:	movw	r1, #12241	; 0x2fd1
   1a5dc:	movw	r3, #16005	; 0x3e85
   1a5e0:	movw	r2, #823	; 0x337
   1a5e4:	movt	r0, #2
   1a5e8:	movt	r1, #2
   1a5ec:	movt	r3, #2
   1a5f0:	bl	12f88 <__assert_fail@plt>
   1a5f4:	movw	r0, #13610	; 0x352a
   1a5f8:	movw	r1, #13665	; 0x3561
   1a5fc:	movw	r3, #15218	; 0x3b72
   1a600:	mov	r2, #117	; 0x75
   1a604:	movt	r0, #2
   1a608:	movt	r1, #2
   1a60c:	movt	r3, #2
   1a610:	bl	12f88 <__assert_fail@plt>
   1a614:	movw	r0, #13610	; 0x352a
   1a618:	movw	r1, #13665	; 0x3561
   1a61c:	movw	r3, #16185	; 0x3f39
   1a620:	mov	r2, #119	; 0x77
   1a624:	movt	r0, #2
   1a628:	movt	r1, #2
   1a62c:	movt	r3, #2
   1a630:	bl	12f88 <__assert_fail@plt>

0001a634 <test_add_set_defaults@@Base>:
   1a634:	push	{r4, r5, r6, sl, fp, lr}
   1a638:	add	fp, sp, #16
   1a63c:	sub	sp, sp, #8
   1a640:	mov	r4, r0
   1a644:	bl	1d0ac <flatcc_builder_reset@@Base>
   1a648:	movw	r1, #8956	; 0x22fc
   1a64c:	mov	r0, r4
   1a650:	mov	r2, #0
   1a654:	mov	r3, #0
   1a658:	movt	r1, #2
   1a65c:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   1a660:	cmp	r0, #0
   1a664:	bne	1a674 <test_add_set_defaults@@Base+0x40>
   1a668:	mov	r0, r4
   1a66c:	mov	r1, #36	; 0x24
   1a670:	bl	1e940 <flatcc_builder_start_table@@Base>
   1a674:	movw	r1, #9024	; 0x2340
   1a678:	mov	r0, r4
   1a67c:	movt	r1, #2
   1a680:	bl	20504 <flatcc_builder_create_string_str@@Base>
   1a684:	cmp	r0, #0
   1a688:	beq	1a6a4 <test_add_set_defaults@@Base+0x70>
   1a68c:	mov	r5, r0
   1a690:	mov	r0, r4
   1a694:	mov	r1, #3
   1a698:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1a69c:	cmp	r0, #0
   1a6a0:	strne	r5, [r0]
   1a6a4:	mov	r0, r4
   1a6a8:	mov	r1, #1
   1a6ac:	mov	r2, #2
   1a6b0:	mov	r3, #2
   1a6b4:	bl	1fb8c <flatcc_builder_table_add@@Base>
   1a6b8:	cmp	r0, #0
   1a6bc:	mov	r2, #1
   1a6c0:	movne	r1, #100	; 0x64
   1a6c4:	strhne	r1, [r0]
   1a6c8:	movw	r1, #21988	; 0x55e4
   1a6cc:	mov	r0, r4
   1a6d0:	movt	r1, #2
   1a6d4:	bl	1f220 <flatcc_builder_check_required@@Base>
   1a6d8:	cmp	r0, #0
   1a6dc:	beq	1a934 <test_add_set_defaults@@Base+0x300>
   1a6e0:	mov	r0, r4
   1a6e4:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   1a6e8:	mov	r1, r0
   1a6ec:	mov	r0, r4
   1a6f0:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   1a6f4:	add	r1, sp, #4
   1a6f8:	mov	r0, r4
   1a6fc:	bl	207ec <flatcc_builder_get_direct_buffer@@Base>
   1a700:	cmp	r0, #0
   1a704:	beq	1a914 <test_add_set_defaults@@Base+0x2e0>
   1a708:	ldr	r1, [r0, #4]
   1a70c:	movw	r6, #20301	; 0x4f4d
   1a710:	movt	r6, #21326	; 0x534e
   1a714:	cmp	r1, r6
   1a718:	bne	1a914 <test_add_set_defaults@@Base+0x2e0>
   1a71c:	ldr	r1, [r0]
   1a720:	ldr	r1, [r0, r1]!
   1a724:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   1a728:	cmp	r1, #9
   1a72c:	bls	1a748 <test_add_set_defaults@@Base+0x114>
   1a730:	ldrh	r2, [r0, #8]
   1a734:	cmp	r2, #0
   1a738:	beq	1a750 <test_add_set_defaults@@Base+0x11c>
   1a73c:	movw	r0, #21387	; 0x538b
   1a740:	movt	r0, #2
   1a744:	b	1a784 <test_add_set_defaults@@Base+0x150>
   1a748:	cmp	r1, #8
   1a74c:	bcc	1a77c <test_add_set_defaults@@Base+0x148>
   1a750:	ldrh	r2, [r0, #6]
   1a754:	cmp	r2, #0
   1a758:	beq	1a77c <test_add_set_defaults@@Base+0x148>
   1a75c:	cmp	r1, #18
   1a760:	bcc	1a798 <test_add_set_defaults@@Base+0x164>
   1a764:	ldrh	r0, [r0, #16]
   1a768:	cmp	r0, #0
   1a76c:	beq	1a798 <test_add_set_defaults@@Base+0x164>
   1a770:	movw	r0, #21341	; 0x535d
   1a774:	movt	r0, #2
   1a778:	b	1a784 <test_add_set_defaults@@Base+0x150>
   1a77c:	movw	r0, #21128	; 0x5288
   1a780:	movt	r0, #2
   1a784:	bl	12ee0 <puts@plt>
   1a788:	mvn	r1, #0
   1a78c:	mov	r0, r1
   1a790:	sub	sp, fp, #16
   1a794:	pop	{r4, r5, r6, sl, fp, pc}
   1a798:	mov	r0, r4
   1a79c:	bl	1d0ac <flatcc_builder_reset@@Base>
   1a7a0:	movw	r1, #8956	; 0x22fc
   1a7a4:	mov	r0, r4
   1a7a8:	mov	r2, #0
   1a7ac:	mov	r3, #0
   1a7b0:	movt	r1, #2
   1a7b4:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   1a7b8:	cmp	r0, #0
   1a7bc:	bne	1a7cc <test_add_set_defaults@@Base+0x198>
   1a7c0:	mov	r0, r4
   1a7c4:	mov	r1, #36	; 0x24
   1a7c8:	bl	1e940 <flatcc_builder_start_table@@Base>
   1a7cc:	movw	r1, #9024	; 0x2340
   1a7d0:	mov	r0, r4
   1a7d4:	movt	r1, #2
   1a7d8:	bl	20504 <flatcc_builder_create_string_str@@Base>
   1a7dc:	cmp	r0, #0
   1a7e0:	beq	1a7fc <test_add_set_defaults@@Base+0x1c8>
   1a7e4:	mov	r5, r0
   1a7e8:	mov	r0, r4
   1a7ec:	mov	r1, #3
   1a7f0:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1a7f4:	cmp	r0, #0
   1a7f8:	strne	r5, [r0]
   1a7fc:	mov	r0, r4
   1a800:	mov	r1, #2
   1a804:	mov	r2, #2
   1a808:	mov	r3, #2
   1a80c:	bl	1fb8c <flatcc_builder_table_add@@Base>
   1a810:	cmp	r0, #0
   1a814:	mov	r2, #2
   1a818:	mov	r3, #2
   1a81c:	movne	r1, #100	; 0x64
   1a820:	strhne	r1, [r0]
   1a824:	mov	r0, r4
   1a828:	mov	r1, #1
   1a82c:	bl	1fb8c <flatcc_builder_table_add@@Base>
   1a830:	cmp	r0, #0
   1a834:	mov	r2, #1
   1a838:	mov	r3, #1
   1a83c:	movne	r1, #100	; 0x64
   1a840:	strhne	r1, [r0]
   1a844:	mov	r0, r4
   1a848:	mov	r1, #6
   1a84c:	bl	1fb8c <flatcc_builder_table_add@@Base>
   1a850:	cmp	r0, #0
   1a854:	mov	r2, #1
   1a858:	movne	r1, #8
   1a85c:	strbne	r1, [r0]
   1a860:	movw	r1, #21988	; 0x55e4
   1a864:	mov	r0, r4
   1a868:	movt	r1, #2
   1a86c:	bl	1f220 <flatcc_builder_check_required@@Base>
   1a870:	cmp	r0, #0
   1a874:	beq	1a934 <test_add_set_defaults@@Base+0x300>
   1a878:	mov	r0, r4
   1a87c:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   1a880:	mov	r1, r0
   1a884:	mov	r0, r4
   1a888:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   1a88c:	add	r1, sp, #4
   1a890:	mov	r0, r4
   1a894:	bl	207ec <flatcc_builder_get_direct_buffer@@Base>
   1a898:	cmp	r0, #0
   1a89c:	beq	1a914 <test_add_set_defaults@@Base+0x2e0>
   1a8a0:	mov	r1, r0
   1a8a4:	ldr	r0, [r0, #4]
   1a8a8:	cmp	r0, r6
   1a8ac:	bne	1a914 <test_add_set_defaults@@Base+0x2e0>
   1a8b0:	ldr	r0, [r1]
   1a8b4:	ldr	r0, [r1, r0]!
   1a8b8:	ldrh	r2, [r1, -r0]!
   1a8bc:	movw	r0, #21173	; 0x52b5
   1a8c0:	movt	r0, #2
   1a8c4:	cmp	r2, #9
   1a8c8:	bls	1a784 <test_add_set_defaults@@Base+0x150>
   1a8cc:	ldrh	r3, [r1, #8]
   1a8d0:	cmp	r3, #0
   1a8d4:	beq	1a784 <test_add_set_defaults@@Base+0x150>
   1a8d8:	ldrh	r0, [r1, #6]
   1a8dc:	cmp	r0, #0
   1a8e0:	beq	1a908 <test_add_set_defaults@@Base+0x2d4>
   1a8e4:	movw	r0, #21287	; 0x5327
   1a8e8:	cmp	r2, #18
   1a8ec:	movt	r0, #2
   1a8f0:	bcc	1a784 <test_add_set_defaults@@Base+0x150>
   1a8f4:	ldrh	r2, [r1, #16]
   1a8f8:	mov	r1, #0
   1a8fc:	cmp	r2, #0
   1a900:	bne	1a78c <test_add_set_defaults@@Base+0x158>
   1a904:	b	1a784 <test_add_set_defaults@@Base+0x150>
   1a908:	movw	r0, #21224	; 0x52e8
   1a90c:	movt	r0, #2
   1a910:	b	1a784 <test_add_set_defaults@@Base+0x150>
   1a914:	movw	r0, #12203	; 0x2fab
   1a918:	movw	r1, #12241	; 0x2fd1
   1a91c:	movw	r3, #12339	; 0x3033
   1a920:	movw	r2, #697	; 0x2b9
   1a924:	movt	r0, #2
   1a928:	movt	r1, #2
   1a92c:	movt	r3, #2
   1a930:	bl	12f88 <__assert_fail@plt>
   1a934:	movw	r0, #12876	; 0x324c
   1a938:	movw	r1, #12586	; 0x312a
   1a93c:	movw	r3, #13038	; 0x32ee
   1a940:	mov	r2, #235	; 0xeb
   1a944:	movt	r0, #2
   1a948:	movt	r1, #2
   1a94c:	movt	r3, #2
   1a950:	bl	12f88 <__assert_fail@plt>

0001a954 <test_nested_buffer@@Base>:
   1a954:	push	{r4, r5, r6, r7, fp, lr}
   1a958:	add	fp, sp, #16
   1a95c:	sub	sp, sp, #8
   1a960:	mov	r4, r0
   1a964:	bl	1d0ac <flatcc_builder_reset@@Base>
   1a968:	movw	r1, #8956	; 0x22fc
   1a96c:	mov	r0, r4
   1a970:	mov	r2, #0
   1a974:	mov	r3, #0
   1a978:	movt	r1, #2
   1a97c:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   1a980:	cmp	r0, #0
   1a984:	bne	1a994 <test_nested_buffer@@Base+0x40>
   1a988:	mov	r0, r4
   1a98c:	mov	r1, #36	; 0x24
   1a990:	bl	1e940 <flatcc_builder_start_table@@Base>
   1a994:	movw	r1, #9024	; 0x2340
   1a998:	mov	r0, r4
   1a99c:	movt	r1, #2
   1a9a0:	bl	20504 <flatcc_builder_create_string_str@@Base>
   1a9a4:	cmp	r0, #0
   1a9a8:	beq	1a9c4 <test_nested_buffer@@Base+0x70>
   1a9ac:	mov	r5, r0
   1a9b0:	mov	r0, r4
   1a9b4:	mov	r1, #3
   1a9b8:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1a9bc:	cmp	r0, #0
   1a9c0:	strne	r5, [r0]
   1a9c4:	movw	r1, #8956	; 0x22fc
   1a9c8:	mov	r0, r4
   1a9cc:	mov	r2, #0
   1a9d0:	mov	r3, #0
   1a9d4:	movt	r1, #2
   1a9d8:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   1a9dc:	cmp	r0, #0
   1a9e0:	bne	1a9f0 <test_nested_buffer@@Base+0x9c>
   1a9e4:	mov	r0, r4
   1a9e8:	mov	r1, #36	; 0x24
   1a9ec:	bl	1e940 <flatcc_builder_start_table@@Base>
   1a9f0:	movw	r1, #11823	; 0x2e2f
   1a9f4:	mov	r0, r4
   1a9f8:	movt	r1, #2
   1a9fc:	bl	20504 <flatcc_builder_create_string_str@@Base>
   1aa00:	cmp	r0, #0
   1aa04:	beq	1aa20 <test_nested_buffer@@Base+0xcc>
   1aa08:	mov	r5, r0
   1aa0c:	mov	r0, r4
   1aa10:	mov	r1, #3
   1aa14:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1aa18:	cmp	r0, #0
   1aa1c:	strne	r5, [r0]
   1aa20:	movw	r1, #21988	; 0x55e4
   1aa24:	mov	r0, r4
   1aa28:	mov	r2, #1
   1aa2c:	movt	r1, #2
   1aa30:	bl	1f220 <flatcc_builder_check_required@@Base>
   1aa34:	cmp	r0, #0
   1aa38:	beq	1ac4c <test_nested_buffer@@Base+0x2f8>
   1aa3c:	mov	r0, r4
   1aa40:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   1aa44:	mov	r1, r0
   1aa48:	mov	r0, r4
   1aa4c:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   1aa50:	cmp	r0, #0
   1aa54:	beq	1aa70 <test_nested_buffer@@Base+0x11c>
   1aa58:	mov	r5, r0
   1aa5c:	mov	r0, r4
   1aa60:	mov	r1, #13
   1aa64:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1aa68:	cmp	r0, #0
   1aa6c:	strne	r5, [r0]
   1aa70:	mov	r0, r4
   1aa74:	mov	r1, #2
   1aa78:	mov	r2, #2
   1aa7c:	mov	r3, #2
   1aa80:	bl	1fb8c <flatcc_builder_table_add@@Base>
   1aa84:	cmp	r0, #0
   1aa88:	mov	r2, #1
   1aa8c:	movne	r1, #10
   1aa90:	strhne	r1, [r0]
   1aa94:	movw	r1, #21988	; 0x55e4
   1aa98:	mov	r0, r4
   1aa9c:	movt	r1, #2
   1aaa0:	bl	1f220 <flatcc_builder_check_required@@Base>
   1aaa4:	cmp	r0, #0
   1aaa8:	beq	1ac4c <test_nested_buffer@@Base+0x2f8>
   1aaac:	mov	r0, r4
   1aab0:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   1aab4:	mov	r1, r0
   1aab8:	mov	r0, r4
   1aabc:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   1aac0:	add	r1, sp, #4
   1aac4:	mov	r0, r4
   1aac8:	bl	207ec <flatcc_builder_get_direct_buffer@@Base>
   1aacc:	mov	r4, r0
   1aad0:	movw	r0, #32880	; 0x8070
   1aad4:	ldr	r2, [sp, #4]
   1aad8:	movt	r0, #3
   1aadc:	mov	r1, r4
   1aae0:	ldr	r3, [r0]
   1aae4:	movw	r0, #11839	; 0x2e3f
   1aae8:	movt	r0, #2
   1aaec:	bl	1365c <test_type_aliases@@Base+0x51c>
   1aaf0:	cmp	r4, #0
   1aaf4:	beq	1ac20 <test_nested_buffer@@Base+0x2cc>
   1aaf8:	ldr	r0, [r4, #4]
   1aafc:	movw	r6, #20301	; 0x4f4d
   1ab00:	movt	r6, #21326	; 0x534e
   1ab04:	cmp	r0, r6
   1ab08:	bne	1ac20 <test_nested_buffer@@Base+0x2cc>
   1ab0c:	ldr	r0, [r4]
   1ab10:	ldr	r0, [r4, r0]!
   1ab14:	mov	r5, r4
   1ab18:	ldrh	r7, [r5, -r0]!
   1ab1c:	cmp	r7, #11
   1ab20:	bls	1ac2c <test_nested_buffer@@Base+0x2d8>
   1ab24:	ldrh	r0, [r5, #10]
   1ab28:	cmp	r0, #0
   1ab2c:	beq	1ac2c <test_nested_buffer@@Base+0x2d8>
   1ab30:	mov	r1, r4
   1ab34:	ldr	r0, [r1, r0]!
   1ab38:	add	r0, r1, r0
   1ab3c:	movw	r1, #9024	; 0x2340
   1ab40:	movt	r1, #2
   1ab44:	add	r0, r0, #4
   1ab48:	bl	12e8c <strcmp@plt>
   1ab4c:	cmp	r0, #0
   1ab50:	beq	1ab6c <test_nested_buffer@@Base+0x218>
   1ab54:	movw	r0, #21557	; 0x5435
   1ab58:	movt	r0, #2
   1ab5c:	bl	12ee0 <puts@plt>
   1ab60:	mvn	r0, #0
   1ab64:	sub	sp, fp, #16
   1ab68:	pop	{r4, r5, r6, r7, fp, pc}
   1ab6c:	mov	r1, #0
   1ab70:	cmp	r7, #32
   1ab74:	bcc	1aba0 <test_nested_buffer@@Base+0x24c>
   1ab78:	ldrh	r0, [r5, #30]
   1ab7c:	cmp	r0, #0
   1ab80:	beq	1aba0 <test_nested_buffer@@Base+0x24c>
   1ab84:	mov	r2, r4
   1ab88:	ldr	r0, [r2, r0]!
   1ab8c:	add	r0, r2, r0
   1ab90:	ldr	r2, [r0, #8]
   1ab94:	cmp	r2, r6
   1ab98:	ldreq	r1, [r0, #4]!
   1ab9c:	addeq	r1, r0, r1
   1aba0:	ldrh	r2, [r5, #8]
   1aba4:	movw	r0, #21521	; 0x5411
   1aba8:	movt	r0, #2
   1abac:	cmp	r2, #0
   1abb0:	beq	1ab5c <test_nested_buffer@@Base+0x208>
   1abb4:	add	r2, r4, r2
   1abb8:	ldrh	r2, [r2]
   1abbc:	cmp	r2, #10
   1abc0:	bne	1ab5c <test_nested_buffer@@Base+0x208>
   1abc4:	cmp	r1, #0
   1abc8:	beq	1ac20 <test_nested_buffer@@Base+0x2cc>
   1abcc:	ldr	r2, [r1]
   1abd0:	mov	r0, r1
   1abd4:	ldrh	r2, [r0, -r2]!	; <UNPREDICTABLE>
   1abd8:	cmp	r2, #12
   1abdc:	bcc	1ac2c <test_nested_buffer@@Base+0x2d8>
   1abe0:	ldrh	r0, [r0, #10]
   1abe4:	cmp	r0, #0
   1abe8:	beq	1ac2c <test_nested_buffer@@Base+0x2d8>
   1abec:	ldr	r0, [r1, r0]!
   1abf0:	add	r0, r1, r0
   1abf4:	movw	r1, #11823	; 0x2e2f
   1abf8:	movt	r1, #2
   1abfc:	add	r0, r0, #4
   1ac00:	bl	12e8c <strcmp@plt>
   1ac04:	cmp	r0, #0
   1ac08:	beq	1ac18 <test_nested_buffer@@Base+0x2c4>
   1ac0c:	movw	r0, #21492	; 0x53f4
   1ac10:	movt	r0, #2
   1ac14:	b	1ab5c <test_nested_buffer@@Base+0x208>
   1ac18:	mov	r0, #0
   1ac1c:	b	1ab64 <test_nested_buffer@@Base+0x210>
   1ac20:	movw	r0, #12203	; 0x2fab
   1ac24:	movt	r0, #2
   1ac28:	b	1ac34 <test_nested_buffer@@Base+0x2e0>
   1ac2c:	movw	r0, #13488	; 0x34b0
   1ac30:	movt	r0, #2
   1ac34:	movw	r1, #12241	; 0x2fd1
   1ac38:	movw	r3, #13407	; 0x345f
   1ac3c:	movw	r2, #699	; 0x2bb
   1ac40:	movt	r1, #2
   1ac44:	movt	r3, #2
   1ac48:	bl	12f88 <__assert_fail@plt>
   1ac4c:	movw	r0, #12876	; 0x324c
   1ac50:	movw	r1, #12586	; 0x312a
   1ac54:	movw	r3, #13038	; 0x32ee
   1ac58:	mov	r2, #235	; 0xeb
   1ac5c:	movt	r0, #2
   1ac60:	movt	r1, #2
   1ac64:	movt	r3, #2
   1ac68:	bl	12f88 <__assert_fail@plt>

0001ac6c <test_nested_buffer_first@@Base>:
   1ac6c:	push	{r4, r5, r6, r7, fp, lr}
   1ac70:	add	fp, sp, #16
   1ac74:	sub	sp, sp, #8
   1ac78:	mov	r4, r0
   1ac7c:	bl	1d0ac <flatcc_builder_reset@@Base>
   1ac80:	movw	r1, #8956	; 0x22fc
   1ac84:	mov	r0, r4
   1ac88:	mov	r2, #0
   1ac8c:	mov	r3, #0
   1ac90:	movt	r1, #2
   1ac94:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   1ac98:	cmp	r0, #0
   1ac9c:	bne	1acac <test_nested_buffer_first@@Base+0x40>
   1aca0:	mov	r0, r4
   1aca4:	mov	r1, #36	; 0x24
   1aca8:	bl	1e940 <flatcc_builder_start_table@@Base>
   1acac:	movw	r1, #8956	; 0x22fc
   1acb0:	mov	r0, r4
   1acb4:	mov	r2, #0
   1acb8:	mov	r3, #0
   1acbc:	movt	r1, #2
   1acc0:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   1acc4:	cmp	r0, #0
   1acc8:	bne	1acd8 <test_nested_buffer_first@@Base+0x6c>
   1accc:	mov	r0, r4
   1acd0:	mov	r1, #36	; 0x24
   1acd4:	bl	1e940 <flatcc_builder_start_table@@Base>
   1acd8:	movw	r1, #11823	; 0x2e2f
   1acdc:	mov	r0, r4
   1ace0:	movt	r1, #2
   1ace4:	bl	20504 <flatcc_builder_create_string_str@@Base>
   1ace8:	cmp	r0, #0
   1acec:	beq	1ad08 <test_nested_buffer_first@@Base+0x9c>
   1acf0:	mov	r5, r0
   1acf4:	mov	r0, r4
   1acf8:	mov	r1, #3
   1acfc:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1ad00:	cmp	r0, #0
   1ad04:	strne	r5, [r0]
   1ad08:	movw	r1, #21988	; 0x55e4
   1ad0c:	mov	r0, r4
   1ad10:	mov	r2, #1
   1ad14:	movt	r1, #2
   1ad18:	bl	1f220 <flatcc_builder_check_required@@Base>
   1ad1c:	cmp	r0, #0
   1ad20:	beq	1af64 <test_nested_buffer_first@@Base+0x2f8>
   1ad24:	mov	r0, r4
   1ad28:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   1ad2c:	mov	r1, r0
   1ad30:	mov	r0, r4
   1ad34:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   1ad38:	cmp	r0, #0
   1ad3c:	beq	1ad58 <test_nested_buffer_first@@Base+0xec>
   1ad40:	mov	r5, r0
   1ad44:	mov	r0, r4
   1ad48:	mov	r1, #13
   1ad4c:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1ad50:	cmp	r0, #0
   1ad54:	strne	r5, [r0]
   1ad58:	mov	r0, r4
   1ad5c:	mov	r1, #2
   1ad60:	mov	r2, #2
   1ad64:	mov	r3, #2
   1ad68:	bl	1fb8c <flatcc_builder_table_add@@Base>
   1ad6c:	cmp	r0, #0
   1ad70:	movne	r1, #10
   1ad74:	strhne	r1, [r0]
   1ad78:	movw	r1, #9024	; 0x2340
   1ad7c:	mov	r0, r4
   1ad80:	movt	r1, #2
   1ad84:	bl	20504 <flatcc_builder_create_string_str@@Base>
   1ad88:	cmp	r0, #0
   1ad8c:	beq	1ada8 <test_nested_buffer_first@@Base+0x13c>
   1ad90:	mov	r5, r0
   1ad94:	mov	r0, r4
   1ad98:	mov	r1, #3
   1ad9c:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1ada0:	cmp	r0, #0
   1ada4:	strne	r5, [r0]
   1ada8:	movw	r1, #21988	; 0x55e4
   1adac:	mov	r0, r4
   1adb0:	mov	r2, #1
   1adb4:	movt	r1, #2
   1adb8:	bl	1f220 <flatcc_builder_check_required@@Base>
   1adbc:	cmp	r0, #0
   1adc0:	beq	1af64 <test_nested_buffer_first@@Base+0x2f8>
   1adc4:	mov	r0, r4
   1adc8:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   1adcc:	mov	r1, r0
   1add0:	mov	r0, r4
   1add4:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   1add8:	add	r1, sp, #4
   1addc:	mov	r0, r4
   1ade0:	bl	207ec <flatcc_builder_get_direct_buffer@@Base>
   1ade4:	mov	r4, r0
   1ade8:	movw	r0, #32880	; 0x8070
   1adec:	ldr	r2, [sp, #4]
   1adf0:	movt	r0, #3
   1adf4:	mov	r1, r4
   1adf8:	ldr	r3, [r0]
   1adfc:	movw	r0, #11839	; 0x2e3f
   1ae00:	movt	r0, #2
   1ae04:	bl	1365c <test_type_aliases@@Base+0x51c>
   1ae08:	cmp	r4, #0
   1ae0c:	beq	1af38 <test_nested_buffer_first@@Base+0x2cc>
   1ae10:	ldr	r0, [r4, #4]
   1ae14:	movw	r6, #20301	; 0x4f4d
   1ae18:	movt	r6, #21326	; 0x534e
   1ae1c:	cmp	r0, r6
   1ae20:	bne	1af38 <test_nested_buffer_first@@Base+0x2cc>
   1ae24:	ldr	r0, [r4]
   1ae28:	ldr	r0, [r4, r0]!
   1ae2c:	mov	r5, r4
   1ae30:	ldrh	r7, [r5, -r0]!
   1ae34:	cmp	r7, #11
   1ae38:	bls	1af44 <test_nested_buffer_first@@Base+0x2d8>
   1ae3c:	ldrh	r0, [r5, #10]
   1ae40:	cmp	r0, #0
   1ae44:	beq	1af44 <test_nested_buffer_first@@Base+0x2d8>
   1ae48:	mov	r1, r4
   1ae4c:	ldr	r0, [r1, r0]!
   1ae50:	add	r0, r1, r0
   1ae54:	movw	r1, #9024	; 0x2340
   1ae58:	movt	r1, #2
   1ae5c:	add	r0, r0, #4
   1ae60:	bl	12e8c <strcmp@plt>
   1ae64:	cmp	r0, #0
   1ae68:	beq	1ae84 <test_nested_buffer_first@@Base+0x218>
   1ae6c:	movw	r0, #21557	; 0x5435
   1ae70:	movt	r0, #2
   1ae74:	bl	12ee0 <puts@plt>
   1ae78:	mvn	r0, #0
   1ae7c:	sub	sp, fp, #16
   1ae80:	pop	{r4, r5, r6, r7, fp, pc}
   1ae84:	mov	r1, #0
   1ae88:	cmp	r7, #32
   1ae8c:	bcc	1aeb8 <test_nested_buffer_first@@Base+0x24c>
   1ae90:	ldrh	r0, [r5, #30]
   1ae94:	cmp	r0, #0
   1ae98:	beq	1aeb8 <test_nested_buffer_first@@Base+0x24c>
   1ae9c:	mov	r2, r4
   1aea0:	ldr	r0, [r2, r0]!
   1aea4:	add	r0, r2, r0
   1aea8:	ldr	r2, [r0, #8]
   1aeac:	cmp	r2, r6
   1aeb0:	ldreq	r1, [r0, #4]!
   1aeb4:	addeq	r1, r0, r1
   1aeb8:	ldrh	r2, [r5, #8]
   1aebc:	movw	r0, #21521	; 0x5411
   1aec0:	movt	r0, #2
   1aec4:	cmp	r2, #0
   1aec8:	beq	1ae74 <test_nested_buffer_first@@Base+0x208>
   1aecc:	add	r2, r4, r2
   1aed0:	ldrh	r2, [r2]
   1aed4:	cmp	r2, #10
   1aed8:	bne	1ae74 <test_nested_buffer_first@@Base+0x208>
   1aedc:	cmp	r1, #0
   1aee0:	beq	1af38 <test_nested_buffer_first@@Base+0x2cc>
   1aee4:	ldr	r2, [r1]
   1aee8:	mov	r0, r1
   1aeec:	ldrh	r2, [r0, -r2]!	; <UNPREDICTABLE>
   1aef0:	cmp	r2, #12
   1aef4:	bcc	1af44 <test_nested_buffer_first@@Base+0x2d8>
   1aef8:	ldrh	r0, [r0, #10]
   1aefc:	cmp	r0, #0
   1af00:	beq	1af44 <test_nested_buffer_first@@Base+0x2d8>
   1af04:	ldr	r0, [r1, r0]!
   1af08:	add	r0, r1, r0
   1af0c:	movw	r1, #11823	; 0x2e2f
   1af10:	movt	r1, #2
   1af14:	add	r0, r0, #4
   1af18:	bl	12e8c <strcmp@plt>
   1af1c:	cmp	r0, #0
   1af20:	beq	1af30 <test_nested_buffer_first@@Base+0x2c4>
   1af24:	movw	r0, #21492	; 0x53f4
   1af28:	movt	r0, #2
   1af2c:	b	1ae74 <test_nested_buffer_first@@Base+0x208>
   1af30:	mov	r0, #0
   1af34:	b	1ae7c <test_nested_buffer_first@@Base+0x210>
   1af38:	movw	r0, #12203	; 0x2fab
   1af3c:	movt	r0, #2
   1af40:	b	1af4c <test_nested_buffer_first@@Base+0x2e0>
   1af44:	movw	r0, #13488	; 0x34b0
   1af48:	movt	r0, #2
   1af4c:	movw	r1, #12241	; 0x2fd1
   1af50:	movw	r3, #13407	; 0x345f
   1af54:	movw	r2, #699	; 0x2bb
   1af58:	movt	r1, #2
   1af5c:	movt	r3, #2
   1af60:	bl	12f88 <__assert_fail@plt>
   1af64:	movw	r0, #12876	; 0x324c
   1af68:	movw	r1, #12586	; 0x312a
   1af6c:	movw	r3, #13038	; 0x32ee
   1af70:	mov	r2, #235	; 0xeb
   1af74:	movt	r0, #2
   1af78:	movt	r1, #2
   1af7c:	movt	r3, #2
   1af80:	bl	12f88 <__assert_fail@plt>

0001af84 <test_nested_buffer_using_nest@@Base>:
   1af84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1af88:	add	fp, sp, #24
   1af8c:	sub	sp, sp, #1040	; 0x410
   1af90:	mov	r4, r0
   1af94:	bl	1d0ac <flatcc_builder_reset@@Base>
   1af98:	movw	r1, #8956	; 0x22fc
   1af9c:	mov	r0, r4
   1afa0:	mov	r2, #0
   1afa4:	mov	r3, #0
   1afa8:	movt	r1, #2
   1afac:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   1afb0:	cmp	r0, #0
   1afb4:	bne	1afc4 <test_nested_buffer_using_nest@@Base+0x40>
   1afb8:	mov	r0, r4
   1afbc:	mov	r1, #36	; 0x24
   1afc0:	bl	1e940 <flatcc_builder_start_table@@Base>
   1afc4:	movw	r1, #11823	; 0x2e2f
   1afc8:	mov	r0, r4
   1afcc:	movt	r1, #2
   1afd0:	bl	20504 <flatcc_builder_create_string_str@@Base>
   1afd4:	cmp	r0, #0
   1afd8:	beq	1aff4 <test_nested_buffer_using_nest@@Base+0x70>
   1afdc:	mov	r5, r0
   1afe0:	mov	r0, r4
   1afe4:	mov	r1, #3
   1afe8:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1afec:	cmp	r0, #0
   1aff0:	strne	r5, [r0]
   1aff4:	mov	r0, r4
   1aff8:	mov	r1, #1
   1affc:	mov	r2, #2
   1b000:	mov	r3, #2
   1b004:	bl	1fb8c <flatcc_builder_table_add@@Base>
   1b008:	cmp	r0, #0
   1b00c:	mov	r2, #1
   1b010:	movne	r1, #42	; 0x2a
   1b014:	strhne	r1, [r0]
   1b018:	movw	r1, #21988	; 0x55e4
   1b01c:	mov	r0, r4
   1b020:	movt	r1, #2
   1b024:	bl	1f220 <flatcc_builder_check_required@@Base>
   1b028:	cmp	r0, #0
   1b02c:	beq	1b2f8 <test_nested_buffer_using_nest@@Base+0x374>
   1b030:	mov	r0, r4
   1b034:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   1b038:	mov	r1, r0
   1b03c:	mov	r0, r4
   1b040:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   1b044:	mov	r0, r4
   1b048:	bl	20760 <flatcc_builder_get_buffer_size@@Base>
   1b04c:	mov	r5, r0
   1b050:	add	r1, sp, #16
   1b054:	mov	r0, r4
   1b058:	mov	r2, #1024	; 0x400
   1b05c:	bl	2082c <flatcc_builder_copy_buffer@@Base>
   1b060:	cmp	r0, #0
   1b064:	beq	1b200 <test_nested_buffer_using_nest@@Base+0x27c>
   1b068:	mov	r0, r4
   1b06c:	bl	1d0ac <flatcc_builder_reset@@Base>
   1b070:	movw	r1, #8956	; 0x22fc
   1b074:	mov	r0, r4
   1b078:	mov	r2, #0
   1b07c:	mov	r3, #0
   1b080:	movt	r1, #2
   1b084:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   1b088:	cmp	r0, #0
   1b08c:	bne	1b09c <test_nested_buffer_using_nest@@Base+0x118>
   1b090:	mov	r0, r4
   1b094:	mov	r1, #36	; 0x24
   1b098:	bl	1e940 <flatcc_builder_start_table@@Base>
   1b09c:	mvn	r0, #0
   1b0a0:	mov	r1, #8
   1b0a4:	mov	r2, r5
   1b0a8:	mov	r3, #1
   1b0ac:	str	r1, [sp]
   1b0b0:	str	r0, [sp, #4]
   1b0b4:	add	r1, sp, #16
   1b0b8:	mov	r0, r4
   1b0bc:	bl	1f458 <flatcc_builder_create_vector@@Base>
   1b0c0:	cmp	r0, #0
   1b0c4:	beq	1b0e0 <test_nested_buffer_using_nest@@Base+0x15c>
   1b0c8:	mov	r5, r0
   1b0cc:	mov	r0, r4
   1b0d0:	mov	r1, #13
   1b0d4:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1b0d8:	cmp	r0, #0
   1b0dc:	strne	r5, [r0]
   1b0e0:	mov	r0, r4
   1b0e4:	mov	r1, #2
   1b0e8:	mov	r2, #2
   1b0ec:	mov	r3, #2
   1b0f0:	bl	1fb8c <flatcc_builder_table_add@@Base>
   1b0f4:	cmp	r0, #0
   1b0f8:	movne	r1, #10
   1b0fc:	strhne	r1, [r0]
   1b100:	movw	r1, #9024	; 0x2340
   1b104:	mov	r0, r4
   1b108:	movt	r1, #2
   1b10c:	bl	20504 <flatcc_builder_create_string_str@@Base>
   1b110:	cmp	r0, #0
   1b114:	beq	1b130 <test_nested_buffer_using_nest@@Base+0x1ac>
   1b118:	mov	r5, r0
   1b11c:	mov	r0, r4
   1b120:	mov	r1, #3
   1b124:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1b128:	cmp	r0, #0
   1b12c:	strne	r5, [r0]
   1b130:	movw	r1, #21988	; 0x55e4
   1b134:	mov	r0, r4
   1b138:	mov	r2, #1
   1b13c:	movt	r1, #2
   1b140:	bl	1f220 <flatcc_builder_check_required@@Base>
   1b144:	cmp	r0, #0
   1b148:	beq	1b2f8 <test_nested_buffer_using_nest@@Base+0x374>
   1b14c:	mov	r0, r4
   1b150:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   1b154:	mov	r1, r0
   1b158:	mov	r0, r4
   1b15c:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   1b160:	add	r1, sp, #12
   1b164:	mov	r0, r4
   1b168:	bl	207ec <flatcc_builder_get_direct_buffer@@Base>
   1b16c:	mov	r4, r0
   1b170:	movw	r0, #32880	; 0x8070
   1b174:	ldr	r2, [sp, #12]
   1b178:	movt	r0, #3
   1b17c:	mov	r1, r4
   1b180:	ldr	r3, [r0]
   1b184:	movw	r0, #11857	; 0x2e51
   1b188:	movt	r0, #2
   1b18c:	bl	1365c <test_type_aliases@@Base+0x51c>
   1b190:	cmp	r4, #0
   1b194:	beq	1b318 <test_nested_buffer_using_nest@@Base+0x394>
   1b198:	ldr	r0, [r4, #4]
   1b19c:	movw	r7, #20301	; 0x4f4d
   1b1a0:	movt	r7, #21326	; 0x534e
   1b1a4:	cmp	r0, r7
   1b1a8:	bne	1b318 <test_nested_buffer_using_nest@@Base+0x394>
   1b1ac:	ldr	r0, [r4]
   1b1b0:	ldr	r0, [r4, r0]!
   1b1b4:	mov	r6, r4
   1b1b8:	ldrh	r5, [r6, -r0]!
   1b1bc:	cmp	r5, #11
   1b1c0:	bls	1b324 <test_nested_buffer_using_nest@@Base+0x3a0>
   1b1c4:	ldrh	r0, [r6, #10]
   1b1c8:	cmp	r0, #0
   1b1cc:	beq	1b324 <test_nested_buffer_using_nest@@Base+0x3a0>
   1b1d0:	mov	r1, r4
   1b1d4:	ldr	r0, [r1, r0]!
   1b1d8:	add	r0, r1, r0
   1b1dc:	movw	r1, #9024	; 0x2340
   1b1e0:	movt	r1, #2
   1b1e4:	add	r0, r0, #4
   1b1e8:	bl	12e8c <strcmp@plt>
   1b1ec:	cmp	r0, #0
   1b1f0:	beq	1b21c <test_nested_buffer_using_nest@@Base+0x298>
   1b1f4:	movw	r0, #21557	; 0x5435
   1b1f8:	movt	r0, #2
   1b1fc:	b	1b208 <test_nested_buffer_using_nest@@Base+0x284>
   1b200:	movw	r0, #21430	; 0x53b6
   1b204:	movt	r0, #2
   1b208:	bl	12ee0 <puts@plt>
   1b20c:	mvn	r1, #0
   1b210:	mov	r0, r1
   1b214:	sub	sp, fp, #24
   1b218:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b21c:	mov	r8, #0
   1b220:	cmp	r5, #32
   1b224:	bcc	1b250 <test_nested_buffer_using_nest@@Base+0x2cc>
   1b228:	ldrh	r0, [r6, #30]
   1b22c:	cmp	r0, #0
   1b230:	beq	1b250 <test_nested_buffer_using_nest@@Base+0x2cc>
   1b234:	mov	r1, r4
   1b238:	ldr	r0, [r1, r0]!
   1b23c:	add	r0, r1, r0
   1b240:	ldr	r1, [r0, #8]
   1b244:	cmp	r1, r7
   1b248:	ldreq	r1, [r0, #4]!
   1b24c:	addeq	r8, r0, r1
   1b250:	ldrh	r1, [r6, #8]
   1b254:	movw	r0, #21521	; 0x5411
   1b258:	movt	r0, #2
   1b25c:	cmp	r1, #0
   1b260:	beq	1b208 <test_nested_buffer_using_nest@@Base+0x284>
   1b264:	add	r1, r4, r1
   1b268:	ldrh	r1, [r1]
   1b26c:	cmp	r1, #10
   1b270:	bne	1b208 <test_nested_buffer_using_nest@@Base+0x284>
   1b274:	cmp	r8, #0
   1b278:	beq	1b318 <test_nested_buffer_using_nest@@Base+0x394>
   1b27c:	ldr	r0, [r8]
   1b280:	mov	r4, r8
   1b284:	ldrh	r0, [r4, -r0]!	; <UNPREDICTABLE>
   1b288:	cmp	r0, #12
   1b28c:	bcc	1b324 <test_nested_buffer_using_nest@@Base+0x3a0>
   1b290:	ldrh	r0, [r4, #10]
   1b294:	cmp	r0, #0
   1b298:	beq	1b324 <test_nested_buffer_using_nest@@Base+0x3a0>
   1b29c:	mov	r1, r8
   1b2a0:	ldr	r0, [r1, r0]!
   1b2a4:	add	r0, r1, r0
   1b2a8:	movw	r1, #11823	; 0x2e2f
   1b2ac:	movt	r1, #2
   1b2b0:	add	r0, r0, #4
   1b2b4:	bl	12e8c <strcmp@plt>
   1b2b8:	cmp	r0, #0
   1b2bc:	beq	1b2cc <test_nested_buffer_using_nest@@Base+0x348>
   1b2c0:	movw	r0, #21492	; 0x53f4
   1b2c4:	movt	r0, #2
   1b2c8:	b	1b208 <test_nested_buffer_using_nest@@Base+0x284>
   1b2cc:	ldrh	r1, [r4, #6]
   1b2d0:	movw	r0, #21456	; 0x53d0
   1b2d4:	movt	r0, #2
   1b2d8:	cmp	r1, #0
   1b2dc:	beq	1b208 <test_nested_buffer_using_nest@@Base+0x284>
   1b2e0:	add	r1, r8, r1
   1b2e4:	ldrh	r2, [r1]
   1b2e8:	mov	r1, #0
   1b2ec:	cmp	r2, #42	; 0x2a
   1b2f0:	bne	1b208 <test_nested_buffer_using_nest@@Base+0x284>
   1b2f4:	b	1b210 <test_nested_buffer_using_nest@@Base+0x28c>
   1b2f8:	movw	r0, #12876	; 0x324c
   1b2fc:	movw	r1, #12586	; 0x312a
   1b300:	movw	r3, #13038	; 0x32ee
   1b304:	mov	r2, #235	; 0xeb
   1b308:	movt	r0, #2
   1b30c:	movt	r1, #2
   1b310:	movt	r3, #2
   1b314:	bl	12f88 <__assert_fail@plt>
   1b318:	movw	r0, #12203	; 0x2fab
   1b31c:	movt	r0, #2
   1b320:	b	1b32c <test_nested_buffer_using_nest@@Base+0x3a8>
   1b324:	movw	r0, #13488	; 0x34b0
   1b328:	movt	r0, #2
   1b32c:	movw	r1, #12241	; 0x2fd1
   1b330:	movw	r3, #13407	; 0x345f
   1b334:	movw	r2, #699	; 0x2bb
   1b338:	movt	r1, #2
   1b33c:	movt	r3, #2
   1b340:	bl	12f88 <__assert_fail@plt>

0001b344 <verify_include@@Base>:
   1b344:	mov	r0, #0
   1b348:	bx	lr
   1b34c:	nop	{0}

0001b350 <test_struct_buffer@@Base>:
   1b350:	push	{r4, r5, r6, sl, fp, lr}
   1b354:	add	fp, sp, #16
   1b358:	sub	sp, sp, #112	; 0x70
   1b35c:	mov	r4, r0
   1b360:	bl	1d0ac <flatcc_builder_reset@@Base>
   1b364:	mov	r0, r4
   1b368:	mov	r1, #32
   1b36c:	mov	r2, #16
   1b370:	mov	r5, #16
   1b374:	bl	1dc04 <flatcc_builder_start_struct@@Base>
   1b378:	mov	r6, #0
   1b37c:	cmp	r0, #0
   1b380:	mov	r3, #0
   1b384:	beq	1b3e0 <test_struct_buffer@@Base+0x90>
   1b388:	movw	r1, #52428	; 0xcccc
   1b38c:	movw	r2, #52429	; 0xcccd
   1b390:	mov	r3, #1065353216	; 0x3f800000
   1b394:	movt	r2, #52428	; 0xcccc
   1b398:	movt	r1, #16400	; 0x4010
   1b39c:	str	r2, [r0, #16]
   1b3a0:	str	r1, [r0, #20]
   1b3a4:	mov	r1, #239	; 0xef
   1b3a8:	mov	r2, #1073741824	; 0x40000000
   1b3ac:	strb	r1, [r0, #28]
   1b3b0:	movw	r1, #2730	; 0xaaa
   1b3b4:	strh	r1, [r0, #26]
   1b3b8:	mov	r1, #8
   1b3bc:	strb	r1, [r0, #24]
   1b3c0:	movw	r1, #0
   1b3c4:	str	r3, [r0]
   1b3c8:	str	r2, [r0, #4]
   1b3cc:	movt	r1, #16448	; 0x4040
   1b3d0:	str	r1, [r0, #8]
   1b3d4:	mov	r0, r4
   1b3d8:	bl	1dca4 <flatcc_builder_end_struct@@Base>
   1b3dc:	mov	r3, r0
   1b3e0:	movw	r1, #8956	; 0x22fc
   1b3e4:	mov	r0, r4
   1b3e8:	mov	r2, #0
   1b3ec:	stm	sp, {r5, r6}
   1b3f0:	movt	r1, #2
   1b3f4:	bl	1d5c0 <flatcc_builder_create_buffer@@Base>
   1b3f8:	mov	r0, r4
   1b3fc:	bl	20760 <flatcc_builder_get_buffer_size@@Base>
   1b400:	cmp	r0, #48	; 0x30
   1b404:	bne	1b534 <test_struct_buffer@@Base+0x1e4>
   1b408:	movw	r0, #11945	; 0x2ea9
   1b40c:	mov	r1, #48	; 0x30
   1b410:	movt	r0, #2
   1b414:	bl	12e98 <printf@plt>
   1b418:	mov	r0, r4
   1b41c:	bl	20a0c <flatcc_builder_get_emit_context@@Base>
   1b420:	ldr	r0, [r0, #24]
   1b424:	cmp	r0, #48	; 0x30
   1b428:	bne	1b54c <test_struct_buffer@@Base+0x1fc>
   1b42c:	add	r1, sp, #12
   1b430:	mov	r0, r4
   1b434:	mov	r2, #100	; 0x64
   1b438:	bl	2082c <flatcc_builder_copy_buffer@@Base>
   1b43c:	cmp	r0, #0
   1b440:	beq	1b50c <test_struct_buffer@@Base+0x1bc>
   1b444:	movw	r0, #32880	; 0x8070
   1b448:	add	r4, sp, #12
   1b44c:	mov	r2, #48	; 0x30
   1b450:	movt	r0, #3
   1b454:	mov	r1, r4
   1b458:	ldr	r3, [r0]
   1b45c:	movw	r0, #12104	; 0x2f48
   1b460:	movt	r0, #2
   1b464:	bl	1365c <test_type_aliases@@Base+0x51c>
   1b468:	ldr	r0, [sp, #16]
   1b46c:	movw	r1, #20301	; 0x4f4d
   1b470:	movt	r1, #21326	; 0x534e
   1b474:	cmp	r0, r1
   1b478:	bne	1b518 <test_struct_buffer@@Base+0x1c8>
   1b47c:	ldr	r0, [sp, #12]
   1b480:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1b484:	add	r1, r4, r0
   1b488:	movw	r0, #21658	; 0x549a
   1b48c:	vldr	s0, [r1]
   1b490:	movt	r0, #2
   1b494:	vcmp.f32	s0, s2
   1b498:	vmrs	APSR_nzcv, fpscr
   1b49c:	bne	1b520 <test_struct_buffer@@Base+0x1d0>
   1b4a0:	vldr	s0, [r1, #4]
   1b4a4:	vmov.f32	s2, #0	; 0x40000000  2.0
   1b4a8:	vcmp.f32	s0, s2
   1b4ac:	vmrs	APSR_nzcv, fpscr
   1b4b0:	bne	1b520 <test_struct_buffer@@Base+0x1d0>
   1b4b4:	vldr	s0, [r1, #8]
   1b4b8:	vmov.f32	s2, #8	; 0x40400000  3.0
   1b4bc:	vcmp.f32	s0, s2
   1b4c0:	vmrs	APSR_nzcv, fpscr
   1b4c4:	bne	1b520 <test_struct_buffer@@Base+0x1d0>
   1b4c8:	vldr	d16, [pc, #160]	; 1b570 <test_struct_buffer@@Base+0x220>
   1b4cc:	vldr	d17, [r1, #16]
   1b4d0:	vcmp.f64	d17, d16
   1b4d4:	vmrs	APSR_nzcv, fpscr
   1b4d8:	bne	1b520 <test_struct_buffer@@Base+0x1d0>
   1b4dc:	ldrb	r2, [r1, #24]
   1b4e0:	cmp	r2, #8
   1b4e4:	bne	1b520 <test_struct_buffer@@Base+0x1d0>
   1b4e8:	ldrh	r2, [r1, #26]
   1b4ec:	movw	r3, #2730	; 0xaaa
   1b4f0:	cmp	r2, r3
   1b4f4:	bne	1b520 <test_struct_buffer@@Base+0x1d0>
   1b4f8:	ldrb	r2, [r1, #28]
   1b4fc:	mov	r1, #0
   1b500:	cmp	r2, #239	; 0xef
   1b504:	bne	1b520 <test_struct_buffer@@Base+0x1d0>
   1b508:	b	1b528 <test_struct_buffer@@Base+0x1d8>
   1b50c:	movw	r0, #21584	; 0x5450
   1b510:	movt	r0, #2
   1b514:	b	1b520 <test_struct_buffer@@Base+0x1d0>
   1b518:	movw	r0, #21596	; 0x545c
   1b51c:	movt	r0, #2
   1b520:	bl	12ee0 <puts@plt>
   1b524:	mvn	r1, #0
   1b528:	mov	r0, r1
   1b52c:	sub	sp, fp, #16
   1b530:	pop	{r4, r5, r6, sl, fp, pc}
   1b534:	movw	r0, #11891	; 0x2e73
   1b538:	movw	r1, #9448	; 0x24e8
   1b53c:	movw	r3, #11902	; 0x2e7e
   1b540:	movw	r2, #2339	; 0x923
   1b544:	movt	r0, #2
   1b548:	b	1b560 <test_struct_buffer@@Base+0x210>
   1b54c:	movw	r0, #11974	; 0x2ec6
   1b550:	movw	r1, #9448	; 0x24e8
   1b554:	movw	r3, #11902	; 0x2e7e
   1b558:	movw	r2, #2341	; 0x925
   1b55c:	movt	r0, #2
   1b560:	movt	r1, #2
   1b564:	movt	r3, #2
   1b568:	bl	12f88 <__assert_fail@plt>
   1b56c:	nop	{0}
   1b570:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1b574:	andsmi	ip, r0, ip, asr #25

0001b578 <test_typed_struct_buffer@@Base>:
   1b578:	push	{r4, r5, r6, sl, fp, lr}
   1b57c:	add	fp, sp, #16
   1b580:	sub	sp, sp, #112	; 0x70
   1b584:	mov	r4, r0
   1b588:	bl	1d0ac <flatcc_builder_reset@@Base>
   1b58c:	mov	r0, r4
   1b590:	mov	r1, #32
   1b594:	mov	r2, #16
   1b598:	mov	r5, #16
   1b59c:	bl	1dc04 <flatcc_builder_start_struct@@Base>
   1b5a0:	mov	r6, #0
   1b5a4:	cmp	r0, #0
   1b5a8:	mov	r3, #0
   1b5ac:	beq	1b608 <test_typed_struct_buffer@@Base+0x90>
   1b5b0:	movw	r1, #52428	; 0xcccc
   1b5b4:	movw	r2, #52429	; 0xcccd
   1b5b8:	mov	r3, #1065353216	; 0x3f800000
   1b5bc:	movt	r2, #52428	; 0xcccc
   1b5c0:	movt	r1, #16400	; 0x4010
   1b5c4:	str	r2, [r0, #16]
   1b5c8:	str	r1, [r0, #20]
   1b5cc:	mov	r1, #239	; 0xef
   1b5d0:	mov	r2, #1073741824	; 0x40000000
   1b5d4:	strb	r1, [r0, #28]
   1b5d8:	movw	r1, #2730	; 0xaaa
   1b5dc:	strh	r1, [r0, #26]
   1b5e0:	mov	r1, #8
   1b5e4:	strb	r1, [r0, #24]
   1b5e8:	movw	r1, #0
   1b5ec:	str	r3, [r0]
   1b5f0:	str	r2, [r0, #4]
   1b5f4:	movt	r1, #16448	; 0x4040
   1b5f8:	str	r1, [r0, #8]
   1b5fc:	mov	r0, r4
   1b600:	bl	1dca4 <flatcc_builder_end_struct@@Base>
   1b604:	mov	r3, r0
   1b608:	movw	r1, #12123	; 0x2f5b
   1b60c:	mov	r0, r4
   1b610:	mov	r2, #0
   1b614:	stm	sp, {r5, r6}
   1b618:	movt	r1, #2
   1b61c:	bl	1d5c0 <flatcc_builder_create_buffer@@Base>
   1b620:	mov	r0, r4
   1b624:	bl	20760 <flatcc_builder_get_buffer_size@@Base>
   1b628:	cmp	r0, #48	; 0x30
   1b62c:	bne	1b7d4 <test_typed_struct_buffer@@Base+0x25c>
   1b630:	movw	r0, #11945	; 0x2ea9
   1b634:	mov	r1, #48	; 0x30
   1b638:	movt	r0, #2
   1b63c:	bl	12e98 <printf@plt>
   1b640:	mov	r0, r4
   1b644:	bl	20a0c <flatcc_builder_get_emit_context@@Base>
   1b648:	ldr	r0, [r0, #24]
   1b64c:	cmp	r0, #48	; 0x30
   1b650:	bne	1b7ec <test_typed_struct_buffer@@Base+0x274>
   1b654:	add	r1, sp, #12
   1b658:	mov	r0, r4
   1b65c:	mov	r2, #100	; 0x64
   1b660:	bl	2082c <flatcc_builder_copy_buffer@@Base>
   1b664:	cmp	r0, #0
   1b668:	beq	1b6d4 <test_typed_struct_buffer@@Base+0x15c>
   1b66c:	movw	r0, #32880	; 0x8070
   1b670:	add	r1, sp, #12
   1b674:	mov	r2, #48	; 0x30
   1b678:	movt	r0, #3
   1b67c:	ldr	r3, [r0]
   1b680:	movw	r0, #12098	; 0x2f42
   1b684:	movt	r0, #2
   1b688:	bl	1365c <test_type_aliases@@Base+0x51c>
   1b68c:	ldr	r0, [sp, #16]
   1b690:	movw	r4, #16082	; 0x3ed2
   1b694:	movt	r4, #43253	; 0xa8f5
   1b698:	cmp	r0, r4
   1b69c:	bne	1b6e0 <test_typed_struct_buffer@@Base+0x168>
   1b6a0:	mov	r0, #16
   1b6a4:	add	r5, sp, #12
   1b6a8:	mov	r1, #48	; 0x30
   1b6ac:	mov	r2, r4
   1b6b0:	mov	r3, #32
   1b6b4:	str	r0, [sp]
   1b6b8:	mov	r0, r5
   1b6bc:	bl	219f8 <flatcc_verify_struct_as_typed_root@@Base>
   1b6c0:	cmp	r0, #0
   1b6c4:	beq	1b6fc <test_typed_struct_buffer@@Base+0x184>
   1b6c8:	movw	r0, #21720	; 0x54d8
   1b6cc:	movt	r0, #2
   1b6d0:	b	1b6e8 <test_typed_struct_buffer@@Base+0x170>
   1b6d4:	movw	r0, #21584	; 0x5450
   1b6d8:	movt	r0, #2
   1b6dc:	b	1b6e8 <test_typed_struct_buffer@@Base+0x170>
   1b6e0:	movw	r0, #21596	; 0x545c
   1b6e4:	movt	r0, #2
   1b6e8:	bl	12ee0 <puts@plt>
   1b6ec:	mvn	r1, #0
   1b6f0:	mov	r0, r1
   1b6f4:	sub	sp, fp, #16
   1b6f8:	pop	{r4, r5, r6, sl, fp, pc}
   1b6fc:	ldr	r0, [sp, #16]
   1b700:	cmp	r0, r4
   1b704:	bne	1b73c <test_typed_struct_buffer@@Base+0x1c4>
   1b708:	ldr	r6, [sp, #12]
   1b70c:	mov	r0, #16
   1b710:	mov	r1, #48	; 0x30
   1b714:	mov	r2, r4
   1b718:	mov	r3, #32
   1b71c:	str	r0, [sp]
   1b720:	mov	r0, r5
   1b724:	bl	219f8 <flatcc_verify_struct_as_typed_root@@Base>
   1b728:	cmp	r0, #0
   1b72c:	beq	1b748 <test_typed_struct_buffer@@Base+0x1d0>
   1b730:	movw	r0, #21682	; 0x54b2
   1b734:	movt	r0, #2
   1b738:	b	1b6e8 <test_typed_struct_buffer@@Base+0x170>
   1b73c:	movw	r0, #21629	; 0x547d
   1b740:	movt	r0, #2
   1b744:	b	1b6e8 <test_typed_struct_buffer@@Base+0x170>
   1b748:	add	r1, r5, r6
   1b74c:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1b750:	movw	r0, #21658	; 0x549a
   1b754:	vldr	s0, [r1]
   1b758:	movt	r0, #2
   1b75c:	vcmp.f32	s0, s2
   1b760:	vmrs	APSR_nzcv, fpscr
   1b764:	bne	1b6e8 <test_typed_struct_buffer@@Base+0x170>
   1b768:	vldr	s0, [r1, #4]
   1b76c:	vmov.f32	s2, #0	; 0x40000000  2.0
   1b770:	vcmp.f32	s0, s2
   1b774:	vmrs	APSR_nzcv, fpscr
   1b778:	bne	1b6e8 <test_typed_struct_buffer@@Base+0x170>
   1b77c:	vldr	s0, [r1, #8]
   1b780:	vmov.f32	s2, #8	; 0x40400000  3.0
   1b784:	vcmp.f32	s0, s2
   1b788:	vmrs	APSR_nzcv, fpscr
   1b78c:	bne	1b6e8 <test_typed_struct_buffer@@Base+0x170>
   1b790:	vldr	d16, [pc, #120]	; 1b810 <test_typed_struct_buffer@@Base+0x298>
   1b794:	vldr	d17, [r1, #16]
   1b798:	vcmp.f64	d17, d16
   1b79c:	vmrs	APSR_nzcv, fpscr
   1b7a0:	bne	1b6e8 <test_typed_struct_buffer@@Base+0x170>
   1b7a4:	ldrb	r2, [r1, #24]
   1b7a8:	cmp	r2, #8
   1b7ac:	bne	1b6e8 <test_typed_struct_buffer@@Base+0x170>
   1b7b0:	ldrh	r2, [r1, #26]
   1b7b4:	movw	r3, #2730	; 0xaaa
   1b7b8:	cmp	r2, r3
   1b7bc:	bne	1b6e8 <test_typed_struct_buffer@@Base+0x170>
   1b7c0:	ldrb	r2, [r1, #28]
   1b7c4:	mov	r1, #0
   1b7c8:	cmp	r2, #239	; 0xef
   1b7cc:	bne	1b6e8 <test_typed_struct_buffer@@Base+0x170>
   1b7d0:	b	1b6f0 <test_typed_struct_buffer@@Base+0x178>
   1b7d4:	movw	r0, #11891	; 0x2e73
   1b7d8:	movw	r1, #9448	; 0x24e8
   1b7dc:	movw	r3, #12049	; 0x2f11
   1b7e0:	movw	r2, #2388	; 0x954
   1b7e4:	movt	r0, #2
   1b7e8:	b	1b800 <test_typed_struct_buffer@@Base+0x288>
   1b7ec:	movw	r0, #11974	; 0x2ec6
   1b7f0:	movw	r1, #9448	; 0x24e8
   1b7f4:	movw	r3, #12049	; 0x2f11
   1b7f8:	movw	r2, #2390	; 0x956
   1b7fc:	movt	r0, #2
   1b800:	movt	r1, #2
   1b804:	movt	r3, #2
   1b808:	bl	12f88 <__assert_fail@plt>
   1b80c:	nop	{0}
   1b810:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1b814:	andsmi	ip, r0, ip, asr #25

0001b818 <gen_monster_benchmark@@Base>:
   1b818:	push	{r4, r5, fp, lr}
   1b81c:	add	fp, sp, #8
   1b820:	sub	sp, sp, #24
   1b824:	mov	r4, r0
   1b828:	movw	r0, #21976	; 0x55d8
   1b82c:	movt	r0, #2
   1b830:	vldr	d16, [r0]
   1b834:	movw	r0, #2312	; 0x908
   1b838:	strh	r0, [sp, #16]
   1b83c:	mov	r0, r4
   1b840:	vstr	d16, [sp, #8]
   1b844:	bl	1d0ac <flatcc_builder_reset@@Base>
   1b848:	movw	r1, #8956	; 0x22fc
   1b84c:	mov	r0, r4
   1b850:	mov	r2, #0
   1b854:	mov	r3, #0
   1b858:	movt	r1, #2
   1b85c:	bl	1d8e4 <flatcc_builder_start_buffer@@Base>
   1b860:	cmp	r0, #0
   1b864:	bne	1b874 <gen_monster_benchmark@@Base+0x5c>
   1b868:	mov	r0, r4
   1b86c:	mov	r1, #36	; 0x24
   1b870:	bl	1e940 <flatcc_builder_start_table@@Base>
   1b874:	mov	r0, r4
   1b878:	mov	r1, #2
   1b87c:	mov	r2, #2
   1b880:	mov	r3, #2
   1b884:	bl	1fb8c <flatcc_builder_table_add@@Base>
   1b888:	cmp	r0, #0
   1b88c:	mov	r2, #32
   1b890:	mov	r3, #16
   1b894:	movne	r1, #80	; 0x50
   1b898:	strhne	r1, [r0]
   1b89c:	mov	r0, r4
   1b8a0:	mov	r1, #0
   1b8a4:	bl	1fb8c <flatcc_builder_table_add@@Base>
   1b8a8:	movw	r1, #52429	; 0xcccd
   1b8ac:	mov	r3, #1065353216	; 0x3f800000
   1b8b0:	mov	r2, #1073741824	; 0x40000000
   1b8b4:	movt	r1, #49228	; 0xc04c
   1b8b8:	str	r3, [r0]
   1b8bc:	str	r2, [r0, #4]
   1b8c0:	str	r1, [r0, #8]
   1b8c4:	movw	r1, #9024	; 0x2340
   1b8c8:	mov	r0, r4
   1b8cc:	movt	r1, #2
   1b8d0:	bl	20504 <flatcc_builder_create_string_str@@Base>
   1b8d4:	cmp	r0, #0
   1b8d8:	beq	1b8f4 <gen_monster_benchmark@@Base+0xdc>
   1b8dc:	mov	r5, r0
   1b8e0:	mov	r0, r4
   1b8e4:	mov	r1, #3
   1b8e8:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1b8ec:	cmp	r0, #0
   1b8f0:	strne	r5, [r0]
   1b8f4:	mvn	r0, #0
   1b8f8:	mov	r1, #1
   1b8fc:	mov	r2, #10
   1b900:	mov	r3, #1
   1b904:	str	r1, [sp]
   1b908:	str	r0, [sp, #4]
   1b90c:	add	r1, sp, #8
   1b910:	mov	r0, r4
   1b914:	bl	1f458 <flatcc_builder_create_vector@@Base>
   1b918:	cmp	r0, #0
   1b91c:	beq	1b938 <gen_monster_benchmark@@Base+0x120>
   1b920:	mov	r5, r0
   1b924:	mov	r0, r4
   1b928:	mov	r1, #5
   1b92c:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1b930:	cmp	r0, #0
   1b934:	strne	r5, [r0]
   1b938:	mov	r0, r4
   1b93c:	mov	r1, #4
   1b940:	mov	r2, #2
   1b944:	mvn	r3, #-1073741824	; 0xc0000000
   1b948:	bl	1e574 <flatcc_builder_start_vector@@Base>
   1b94c:	mov	r0, r4
   1b950:	mov	r1, #1
   1b954:	bl	1dd7c <flatcc_builder_extend_vector@@Base>
   1b958:	mov	r1, #32
   1b95c:	strb	r1, [r0, #2]
   1b960:	mov	r1, #16
   1b964:	strh	r1, [r0]
   1b968:	mov	r0, r4
   1b96c:	mov	r1, #2
   1b970:	bl	1dd7c <flatcc_builder_extend_vector@@Base>
   1b974:	mov	r1, #96	; 0x60
   1b978:	strb	r1, [r0, #6]
   1b97c:	mov	r1, #80	; 0x50
   1b980:	strh	r1, [r0, #4]
   1b984:	mov	r1, #64	; 0x40
   1b988:	strb	r1, [r0, #2]
   1b98c:	mov	r1, #48	; 0x30
   1b990:	strh	r1, [r0]
   1b994:	mov	r0, r4
   1b998:	mov	r1, #1
   1b99c:	bl	1dd7c <flatcc_builder_extend_vector@@Base>
   1b9a0:	cmp	r0, #0
   1b9a4:	movne	r1, #128	; 0x80
   1b9a8:	strbne	r1, [r0, #2]
   1b9ac:	movne	r1, #112	; 0x70
   1b9b0:	strhne	r1, [r0]
   1b9b4:	mov	r0, r4
   1b9b8:	mov	r1, #1
   1b9bc:	bl	1dd7c <flatcc_builder_extend_vector@@Base>
   1b9c0:	cmp	r0, #0
   1b9c4:	movwne	r1, #401	; 0x191
   1b9c8:	movtne	r1, #145	; 0x91
   1b9cc:	strne	r1, [r0]
   1b9d0:	mov	r0, r4
   1b9d4:	bl	1f5a0 <flatcc_builder_end_vector@@Base>
   1b9d8:	cmp	r0, #0
   1b9dc:	beq	1b9f8 <gen_monster_benchmark@@Base+0x1e0>
   1b9e0:	mov	r5, r0
   1b9e4:	mov	r0, r4
   1b9e8:	mov	r1, #9
   1b9ec:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1b9f0:	cmp	r0, #0
   1b9f4:	strne	r5, [r0]
   1b9f8:	movw	r1, #21988	; 0x55e4
   1b9fc:	mov	r0, r4
   1ba00:	mov	r2, #1
   1ba04:	movt	r1, #2
   1ba08:	bl	1f220 <flatcc_builder_check_required@@Base>
   1ba0c:	cmp	r0, #0
   1ba10:	beq	1ba34 <gen_monster_benchmark@@Base+0x21c>
   1ba14:	mov	r0, r4
   1ba18:	bl	1f2a0 <flatcc_builder_end_table@@Base>
   1ba1c:	mov	r1, r0
   1ba20:	mov	r0, r4
   1ba24:	bl	1dad4 <flatcc_builder_end_buffer@@Base>
   1ba28:	mov	r0, #0
   1ba2c:	sub	sp, fp, #8
   1ba30:	pop	{r4, r5, fp, pc}
   1ba34:	movw	r0, #12876	; 0x324c
   1ba38:	movw	r1, #12586	; 0x312a
   1ba3c:	movw	r3, #13038	; 0x32ee
   1ba40:	mov	r2, #235	; 0xeb
   1ba44:	movt	r0, #2
   1ba48:	movt	r1, #2
   1ba4c:	movt	r3, #2
   1ba50:	bl	12f88 <__assert_fail@plt>

0001ba54 <time_monster@@Base>:
   1ba54:	push	{r4, r5, fp, lr}
   1ba58:	add	fp, sp, #8
   1ba5c:	vpush	{d8}
   1ba60:	mov	r4, r0
   1ba64:	movw	r0, #21754	; 0x54fa
   1ba68:	movt	r0, #2
   1ba6c:	bl	12ee0 <puts@plt>
   1ba70:	movw	r5, #16960	; 0x4240
   1ba74:	movt	r5, #15
   1ba78:	bl	1bac8 <time_monster@@Base+0x74>
   1ba7c:	vmov.f64	d8, d0
   1ba80:	mov	r0, r4
   1ba84:	bl	1b818 <gen_monster_benchmark@@Base>
   1ba88:	subs	r5, r5, #1
   1ba8c:	bne	1ba80 <time_monster@@Base+0x2c>
   1ba90:	mov	r0, r4
   1ba94:	bl	20760 <flatcc_builder_get_buffer_size@@Base>
   1ba98:	mov	r4, r0
   1ba9c:	bl	1bac8 <time_monster@@Base+0x74>
   1baa0:	movw	r0, #12128	; 0x2f60
   1baa4:	vmov.f64	d1, d0
   1baa8:	vmov.f64	d0, d8
   1baac:	mov	r1, r4
   1bab0:	movt	r0, #2
   1bab4:	bl	1bb48 <time_monster@@Base+0xf4>
   1bab8:	mov	r0, #0
   1babc:	vpop	{d8}
   1bac0:	pop	{r4, r5, fp, pc}
   1bac4:	nop	{0}
   1bac8:	push	{fp, lr}
   1bacc:	mov	fp, sp
   1bad0:	sub	sp, sp, #8
   1bad4:	mov	r0, sp
   1bad8:	mov	r1, #0
   1badc:	bl	12ed4 <gettimeofday@plt>
   1bae0:	movw	r2, #32888	; 0x8078
   1bae4:	movt	r2, #3
   1bae8:	ldr	r0, [r2]
   1baec:	cmp	r0, #0
   1baf0:	beq	1bb00 <time_monster@@Base+0xac>
   1baf4:	ldr	r1, [r2, #4]
   1baf8:	ldr	r2, [sp]
   1bafc:	b	1bb0c <time_monster@@Base+0xb8>
   1bb00:	ldm	sp, {r0, r1}
   1bb04:	strd	r0, [r2]
   1bb08:	mov	r2, r0
   1bb0c:	sub	r0, r2, r0
   1bb10:	ldr	r2, [sp, #4]
   1bb14:	vldr	d16, [pc, #36]	; 1bb40 <time_monster@@Base+0xec>
   1bb18:	vmov	s2, r0
   1bb1c:	sub	r1, r2, r1
   1bb20:	vmov	s0, r1
   1bb24:	vcvt.f64.s32	d17, s0
   1bb28:	vcvt.f64.s32	d18, s2
   1bb2c:	vdiv.f64	d16, d17, d16
   1bb30:	vadd.f64	d0, d16, d18
   1bb34:	mov	sp, fp
   1bb38:	pop	{fp, pc}
   1bb3c:	nop	{0}
   1bb40:	andeq	r0, r0, r0
   1bb44:	smlawbmi	lr, r0, r4, r8
   1bb48:	push	{r4, sl, fp, lr}
   1bb4c:	add	fp, sp, #8
   1bb50:	vpush	{d8-d9}
   1bb54:	mov	r4, r1
   1bb58:	mov	r1, r0
   1bb5c:	movw	r0, #16279	; 0x3f97
   1bb60:	vmov.f64	d8, d1
   1bb64:	vmov.f64	d9, d0
   1bb68:	movt	r0, #2
   1bb6c:	bl	12e98 <printf@plt>
   1bb70:	vsub.f64	d9, d8, d9
   1bb74:	movw	r0, #16294	; 0x3fa6
   1bb78:	movt	r0, #2
   1bb7c:	vmov	r2, r3, d9
   1bb80:	bl	12e98 <printf@plt>
   1bb84:	movw	r0, #16318	; 0x3fbe
   1bb88:	movw	r1, #16960	; 0x4240
   1bb8c:	movt	r0, #2
   1bb90:	movt	r1, #15
   1bb94:	bl	12e98 <printf@plt>
   1bb98:	movw	r0, #16334	; 0x3fce
   1bb9c:	mov	r1, r4
   1bba0:	movt	r0, #2
   1bba4:	bl	12e98 <printf@plt>
   1bba8:	vmov	s0, r4
   1bbac:	vldr	d8, [pc, #212]	; 1bc88 <time_monster@@Base+0x234>
   1bbb0:	movw	r0, #16353	; 0x3fe1
   1bbb4:	movt	r0, #2
   1bbb8:	vcvt.f64.u32	d16, s0
   1bbbc:	vmul.f64	d16, d16, d8
   1bbc0:	vdiv.f64	d16, d16, d8
   1bbc4:	vdiv.f64	d16, d16, d9
   1bbc8:	vmov	r2, r3, d16
   1bbcc:	bl	12e98 <printf@plt>
   1bbd0:	vdiv.f64	d16, d8, d9
   1bbd4:	movw	r0, #16377	; 0x3ff9
   1bbd8:	movt	r0, #2
   1bbdc:	vmov	r2, r3, d16
   1bbe0:	bl	12e98 <printf@plt>
   1bbe4:	vmov.f64	d16, #112	; 0x3f800000  1.0
   1bbe8:	movw	r0, #16410	; 0x401a
   1bbec:	movw	r1, #12150	; 0x2f76
   1bbf0:	movt	r0, #2
   1bbf4:	movt	r1, #2
   1bbf8:	vdiv.f64	d16, d16, d9
   1bbfc:	vmov	r2, r3, d16
   1bc00:	bl	12e98 <printf@plt>
   1bc04:	vldr	d17, [pc, #132]	; 1bc90 <time_monster@@Base+0x23c>
   1bc08:	vldr	d18, [pc, #136]	; 1bc98 <time_monster@@Base+0x244>
   1bc0c:	vmul.f64	d16, d9, d17
   1bc10:	vdiv.f64	d16, d16, d8
   1bc14:	vcmpe.f64	d16, d18
   1bc18:	vmrs	APSR_nzcv, fpscr
   1bc1c:	bpl	1bc30 <time_monster@@Base+0x1dc>
   1bc20:	vmov	r2, r3, d16
   1bc24:	movw	r0, #16446	; 0x403e
   1bc28:	movt	r0, #2
   1bc2c:	b	1bc78 <time_monster@@Base+0x224>
   1bc30:	vcmpe.f64	d16, d8
   1bc34:	vmrs	APSR_nzcv, fpscr
   1bc38:	bpl	1bc4c <time_monster@@Base+0x1f8>
   1bc3c:	vdiv.f64	d16, d16, d18
   1bc40:	movw	r0, #16470	; 0x4056
   1bc44:	movt	r0, #2
   1bc48:	b	1bc74 <time_monster@@Base+0x220>
   1bc4c:	vcmpe.f64	d16, d17
   1bc50:	vmrs	APSR_nzcv, fpscr
   1bc54:	bpl	1bc68 <time_monster@@Base+0x214>
   1bc58:	vdiv.f64	d16, d16, d8
   1bc5c:	movw	r0, #16494	; 0x406e
   1bc60:	movt	r0, #2
   1bc64:	b	1bc74 <time_monster@@Base+0x220>
   1bc68:	vdiv.f64	d16, d16, d17
   1bc6c:	movw	r0, #16518	; 0x4086
   1bc70:	movt	r0, #2
   1bc74:	vmov	r2, r3, d16
   1bc78:	vpop	{d8-d9}
   1bc7c:	pop	{r4, sl, fp, lr}
   1bc80:	b	12e98 <printf@plt>
   1bc84:	nop	{0}
   1bc88:	andeq	r0, r0, r0
   1bc8c:	smlawbmi	lr, r0, r4, r8
   1bc90:	andeq	r0, r0, r0
   1bc94:	bicmi	ip, sp, r5, ror #26
   1bc98:	andeq	r0, r0, r0
   1bc9c:	addmi	r4, pc, r0

0001bca0 <gen_struct_buffer_benchmark@@Base>:
   1bca0:	push	{r4, r5, r6, sl, fp, lr}
   1bca4:	add	fp, sp, #16
   1bca8:	sub	sp, sp, #8
   1bcac:	mov	r4, r0
   1bcb0:	bl	1d0ac <flatcc_builder_reset@@Base>
   1bcb4:	mov	r0, r4
   1bcb8:	mov	r1, #32
   1bcbc:	mov	r2, #16
   1bcc0:	mov	r5, #16
   1bcc4:	bl	1dc04 <flatcc_builder_start_struct@@Base>
   1bcc8:	mov	r6, #0
   1bccc:	cmp	r0, #0
   1bcd0:	mov	r3, #0
   1bcd4:	beq	1bd30 <gen_struct_buffer_benchmark@@Base+0x90>
   1bcd8:	movw	r1, #52428	; 0xcccc
   1bcdc:	movw	r2, #52429	; 0xcccd
   1bce0:	mov	r3, #1065353216	; 0x3f800000
   1bce4:	movt	r2, #52428	; 0xcccc
   1bce8:	movt	r1, #16400	; 0x4010
   1bcec:	str	r2, [r0, #16]
   1bcf0:	str	r1, [r0, #20]
   1bcf4:	mov	r1, #239	; 0xef
   1bcf8:	mov	r2, #1073741824	; 0x40000000
   1bcfc:	strb	r1, [r0, #28]
   1bd00:	movw	r1, #2730	; 0xaaa
   1bd04:	strh	r1, [r0, #26]
   1bd08:	mov	r1, #8
   1bd0c:	strb	r1, [r0, #24]
   1bd10:	movw	r1, #0
   1bd14:	str	r3, [r0]
   1bd18:	str	r2, [r0, #4]
   1bd1c:	movt	r1, #16448	; 0x4040
   1bd20:	str	r1, [r0, #8]
   1bd24:	mov	r0, r4
   1bd28:	bl	1dca4 <flatcc_builder_end_struct@@Base>
   1bd2c:	mov	r3, r0
   1bd30:	movw	r1, #8956	; 0x22fc
   1bd34:	mov	r0, r4
   1bd38:	mov	r2, #0
   1bd3c:	stm	sp, {r5, r6}
   1bd40:	movt	r1, #2
   1bd44:	bl	1d5c0 <flatcc_builder_create_buffer@@Base>
   1bd48:	mov	r0, r4
   1bd4c:	mov	r1, #0
   1bd50:	bl	207ec <flatcc_builder_get_direct_buffer@@Base>
   1bd54:	cmp	r0, #0
   1bd58:	beq	1bde0 <gen_struct_buffer_benchmark@@Base+0x140>
   1bd5c:	ldr	r1, [r0]
   1bd60:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1bd64:	add	r0, r0, r1
   1bd68:	vldr	s0, [r0]
   1bd6c:	vcmp.f32	s0, s2
   1bd70:	vmrs	APSR_nzcv, fpscr
   1bd74:	bne	1bde0 <gen_struct_buffer_benchmark@@Base+0x140>
   1bd78:	vldr	s0, [r0, #4]
   1bd7c:	vmov.f32	s2, #0	; 0x40000000  2.0
   1bd80:	vcmp.f32	s0, s2
   1bd84:	vmrs	APSR_nzcv, fpscr
   1bd88:	bne	1bde0 <gen_struct_buffer_benchmark@@Base+0x140>
   1bd8c:	vldr	s0, [r0, #8]
   1bd90:	vmov.f32	s2, #8	; 0x40400000  3.0
   1bd94:	vcmp.f32	s0, s2
   1bd98:	vmrs	APSR_nzcv, fpscr
   1bd9c:	bne	1bde0 <gen_struct_buffer_benchmark@@Base+0x140>
   1bda0:	vldr	d16, [pc, #72]	; 1bdf0 <gen_struct_buffer_benchmark@@Base+0x150>
   1bda4:	vldr	d17, [r0, #16]
   1bda8:	vcmp.f64	d17, d16
   1bdac:	vmrs	APSR_nzcv, fpscr
   1bdb0:	bne	1bde0 <gen_struct_buffer_benchmark@@Base+0x140>
   1bdb4:	ldrb	r1, [r0, #24]
   1bdb8:	cmp	r1, #8
   1bdbc:	bne	1bde0 <gen_struct_buffer_benchmark@@Base+0x140>
   1bdc0:	ldrh	r1, [r0, #26]
   1bdc4:	movw	r2, #2730	; 0xaaa
   1bdc8:	cmp	r1, r2
   1bdcc:	bne	1bde0 <gen_struct_buffer_benchmark@@Base+0x140>
   1bdd0:	ldrb	r0, [r0, #28]
   1bdd4:	subs	r0, r0, #239	; 0xef
   1bdd8:	mvnne	r0, #0
   1bddc:	b	1bde4 <gen_struct_buffer_benchmark@@Base+0x144>
   1bde0:	mvn	r0, #0
   1bde4:	sub	sp, fp, #16
   1bde8:	pop	{r4, r5, r6, sl, fp, pc}
   1bdec:	nop	{0}
   1bdf0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1bdf4:	andsmi	ip, r0, ip, asr #25

0001bdf8 <time_struct_buffer@@Base>:
   1bdf8:	push	{r4, r5, r6, sl, fp, lr}
   1bdfc:	add	fp, sp, #16
   1be00:	vpush	{d8-d9}
   1be04:	mov	r5, r0
   1be08:	movw	r0, #21754	; 0x54fa
   1be0c:	movt	r0, #2
   1be10:	bl	12ee0 <puts@plt>
   1be14:	movw	r6, #16960	; 0x4240
   1be18:	mov	r4, #0
   1be1c:	movt	r6, #15
   1be20:	bl	1bac8 <time_monster@@Base+0x74>
   1be24:	vmov.f64	d8, d0
   1be28:	mov	r0, r5
   1be2c:	bl	1bca0 <gen_struct_buffer_benchmark@@Base>
   1be30:	orr	r4, r0, r4
   1be34:	subs	r6, r6, #1
   1be38:	bne	1be28 <time_struct_buffer@@Base+0x30>
   1be3c:	bl	1bac8 <time_monster@@Base+0x74>
   1be40:	mov	r0, r5
   1be44:	vmov.f64	d9, d0
   1be48:	bl	20760 <flatcc_builder_get_buffer_size@@Base>
   1be4c:	mov	r5, r0
   1be50:	cmp	r4, #0
   1be54:	beq	1be64 <time_struct_buffer@@Base+0x6c>
   1be58:	movw	r0, #21771	; 0x550b
   1be5c:	movt	r0, #2
   1be60:	bl	12ee0 <puts@plt>
   1be64:	movw	r0, #12158	; 0x2f7e
   1be68:	vmov.f64	d0, d8
   1be6c:	vmov.f64	d1, d9
   1be70:	mov	r1, r5
   1be74:	movt	r0, #2
   1be78:	bl	1bb48 <time_monster@@Base+0xf4>
   1be7c:	mov	r0, r4
   1be80:	vpop	{d8-d9}
   1be84:	pop	{r4, r5, r6, sl, fp, pc}

0001be88 <main@@Base>:
   1be88:	push	{r4, sl, fp, lr}
   1be8c:	add	fp, sp, #8
   1be90:	sub	sp, sp, #232	; 0xe8
   1be94:	mov	r4, sp
   1be98:	mov	r0, r4
   1be9c:	bl	1cf18 <flatcc_builder_init@@Base>
   1bea0:	movw	r0, #21788	; 0x551c
   1bea4:	movt	r0, #2
   1bea8:	bl	12ee0 <puts@plt>
   1beac:	mov	r0, r4
   1beb0:	bl	13bfc <test_table_with_emptystruct@@Base>
   1beb4:	cmp	r0, #0
   1beb8:	bne	1bffc <main@@Base+0x174>
   1bebc:	mov	r0, sp
   1bec0:	bl	1378c <test_empty_monster@@Base>
   1bec4:	cmp	r0, #0
   1bec8:	bne	1bffc <main@@Base+0x174>
   1becc:	mov	r0, sp
   1bed0:	bl	15358 <test_monster@@Base>
   1bed4:	cmp	r0, #0
   1bed8:	bne	1bffc <main@@Base+0x174>
   1bedc:	mov	r0, sp
   1bee0:	bl	15400 <test_monster_with_size@@Base>
   1bee4:	cmp	r0, #0
   1bee8:	bne	1bffc <main@@Base+0x174>
   1beec:	mov	r0, sp
   1bef0:	bl	154f0 <test_string@@Base>
   1bef4:	cmp	r0, #0
   1bef8:	bne	1bffc <main@@Base+0x174>
   1befc:	mov	r0, sp
   1bf00:	bl	1b350 <test_struct_buffer@@Base>
   1bf04:	cmp	r0, #0
   1bf08:	bne	1bffc <main@@Base+0x174>
   1bf0c:	mov	r0, sp
   1bf10:	bl	13914 <test_typed_empty_monster@@Base>
   1bf14:	cmp	r0, #0
   1bf18:	bne	1bffc <main@@Base+0x174>
   1bf1c:	mov	r0, sp
   1bf20:	bl	13d0c <test_typed_table_with_emptystruct@@Base>
   1bf24:	cmp	r0, #0
   1bf28:	bne	1bffc <main@@Base+0x174>
   1bf2c:	mov	r0, sp
   1bf30:	bl	1b578 <test_typed_struct_buffer@@Base>
   1bf34:	cmp	r0, #0
   1bf38:	bne	1bffc <main@@Base+0x174>
   1bf3c:	mov	r0, sp
   1bf40:	bl	18840 <test_clone_slice@@Base>
   1bf44:	cmp	r0, #0
   1bf48:	bne	1bffc <main@@Base+0x174>
   1bf4c:	mov	r0, sp
   1bf50:	bl	1a634 <test_add_set_defaults@@Base>
   1bf54:	cmp	r0, #0
   1bf58:	bne	1bffc <main@@Base+0x174>
   1bf5c:	mov	r0, sp
   1bf60:	bl	1925c <test_create_add_field@@Base>
   1bf64:	cmp	r0, #0
   1bf68:	bne	1bffc <main@@Base+0x174>
   1bf6c:	mov	r0, sp
   1bf70:	bl	19538 <test_union_vector@@Base>
   1bf74:	cmp	r0, #0
   1bf78:	bne	1bffc <main@@Base+0x174>
   1bf7c:	mov	r0, sp
   1bf80:	bl	18474 <test_basic_sort@@Base>
   1bf84:	cmp	r0, #0
   1bf88:	bne	1bffc <main@@Base+0x174>
   1bf8c:	mov	r0, sp
   1bf90:	bl	15790 <test_sort_find@@Base>
   1bf94:	cmp	r0, #0
   1bf98:	bne	1bffc <main@@Base+0x174>
   1bf9c:	mov	r0, sp
   1bfa0:	bl	1640c <test_scan@@Base>
   1bfa4:	cmp	r0, #0
   1bfa8:	bne	1bffc <main@@Base+0x174>
   1bfac:	mov	r0, sp
   1bfb0:	bl	1a954 <test_nested_buffer@@Base>
   1bfb4:	cmp	r0, #0
   1bfb8:	bne	1bffc <main@@Base+0x174>
   1bfbc:	mov	r0, sp
   1bfc0:	bl	1ac6c <test_nested_buffer_first@@Base>
   1bfc4:	cmp	r0, #0
   1bfc8:	bne	1bffc <main@@Base+0x174>
   1bfcc:	mov	r0, sp
   1bfd0:	bl	1af84 <test_nested_buffer_using_nest@@Base>
   1bfd4:	cmp	r0, #0
   1bfd8:	bne	1bffc <main@@Base+0x174>
   1bfdc:	mov	r0, sp
   1bfe0:	bl	13140 <test_type_aliases@@Base>
   1bfe4:	cmp	r0, #0
   1bfe8:	bne	1bffc <main@@Base+0x174>
   1bfec:	mov	r0, sp
   1bff0:	bl	19a68 <test_mixed_type_union@@Base>
   1bff4:	cmp	r0, #0
   1bff8:	beq	1c014 <main@@Base+0x18c>
   1bffc:	movw	r0, #21815	; 0x5537
   1c000:	movt	r0, #2
   1c004:	bl	12ee0 <puts@plt>
   1c008:	mvn	r0, #0
   1c00c:	sub	sp, fp, #8
   1c010:	pop	{r4, sl, fp, pc}
   1c014:	mov	r0, sp
   1c018:	bl	1d0b8 <flatcc_builder_clear@@Base>
   1c01c:	mov	r0, #0
   1c020:	b	1c00c <main@@Base+0x184>
   1c024:	push	{r4, sl, fp, lr}
   1c028:	add	fp, sp, #8
   1c02c:	sub	sp, sp, #8
   1c030:	mov	r1, #0
   1c034:	mov	r2, #1
   1c038:	mov	r3, #1
   1c03c:	mov	r4, r0
   1c040:	bl	21014 <flatcc_verify_field@@Base>
   1c044:	cmp	r0, #0
   1c048:	bne	1c198 <main@@Base+0x310>
   1c04c:	mov	r0, r4
   1c050:	mov	r1, #1
   1c054:	mov	r2, #1
   1c058:	mov	r3, #1
   1c05c:	bl	21014 <flatcc_verify_field@@Base>
   1c060:	cmp	r0, #0
   1c064:	bne	1c198 <main@@Base+0x310>
   1c068:	mov	r0, r4
   1c06c:	mov	r1, #2
   1c070:	mov	r2, #2
   1c074:	mov	r3, #2
   1c078:	bl	21014 <flatcc_verify_field@@Base>
   1c07c:	cmp	r0, #0
   1c080:	bne	1c198 <main@@Base+0x310>
   1c084:	mov	r0, r4
   1c088:	mov	r1, #3
   1c08c:	mov	r2, #2
   1c090:	mov	r3, #2
   1c094:	bl	21014 <flatcc_verify_field@@Base>
   1c098:	cmp	r0, #0
   1c09c:	bne	1c198 <main@@Base+0x310>
   1c0a0:	mov	r0, r4
   1c0a4:	mov	r1, #4
   1c0a8:	mov	r2, #4
   1c0ac:	mov	r3, #4
   1c0b0:	bl	21014 <flatcc_verify_field@@Base>
   1c0b4:	cmp	r0, #0
   1c0b8:	bne	1c198 <main@@Base+0x310>
   1c0bc:	mov	r0, r4
   1c0c0:	mov	r1, #5
   1c0c4:	mov	r2, #4
   1c0c8:	mov	r3, #4
   1c0cc:	bl	21014 <flatcc_verify_field@@Base>
   1c0d0:	cmp	r0, #0
   1c0d4:	bne	1c198 <main@@Base+0x310>
   1c0d8:	mov	r0, r4
   1c0dc:	mov	r1, #6
   1c0e0:	mov	r2, #8
   1c0e4:	mov	r3, #8
   1c0e8:	bl	21014 <flatcc_verify_field@@Base>
   1c0ec:	cmp	r0, #0
   1c0f0:	bne	1c198 <main@@Base+0x310>
   1c0f4:	mov	r0, r4
   1c0f8:	mov	r1, #7
   1c0fc:	mov	r2, #8
   1c100:	mov	r3, #8
   1c104:	bl	21014 <flatcc_verify_field@@Base>
   1c108:	cmp	r0, #0
   1c10c:	bne	1c198 <main@@Base+0x310>
   1c110:	mov	r0, r4
   1c114:	mov	r1, #8
   1c118:	mov	r2, #4
   1c11c:	mov	r3, #4
   1c120:	bl	21014 <flatcc_verify_field@@Base>
   1c124:	cmp	r0, #0
   1c128:	bne	1c198 <main@@Base+0x310>
   1c12c:	mov	r0, r4
   1c130:	mov	r1, #9
   1c134:	mov	r2, #8
   1c138:	mov	r3, #8
   1c13c:	bl	21014 <flatcc_verify_field@@Base>
   1c140:	cmp	r0, #0
   1c144:	bne	1c198 <main@@Base+0x310>
   1c148:	mvn	r0, #0
   1c14c:	mov	r1, #1
   1c150:	mov	r2, #0
   1c154:	mov	r3, #1
   1c158:	str	r1, [sp]
   1c15c:	str	r0, [sp, #4]
   1c160:	mov	r0, r4
   1c164:	mov	r1, #10
   1c168:	bl	21198 <flatcc_verify_vector_field@@Base>
   1c16c:	cmp	r0, #0
   1c170:	bne	1c198 <main@@Base+0x310>
   1c174:	mvn	r0, #-536870912	; 0xe0000000
   1c178:	mov	r1, #8
   1c17c:	mov	r2, #0
   1c180:	mov	r3, #8
   1c184:	str	r1, [sp]
   1c188:	str	r0, [sp, #4]
   1c18c:	mov	r0, r4
   1c190:	mov	r1, #11
   1c194:	bl	21198 <flatcc_verify_vector_field@@Base>
   1c198:	sub	sp, fp, #8
   1c19c:	pop	{r4, sl, fp, pc}
   1c1a0:	push	{r4, r5, r6, r7, fp, lr}
   1c1a4:	add	fp, sp, #16
   1c1a8:	sub	sp, sp, #8
   1c1ac:	mov	r1, #0
   1c1b0:	mov	r2, #32
   1c1b4:	mov	r3, #16
   1c1b8:	mov	r4, r0
   1c1bc:	bl	21014 <flatcc_verify_field@@Base>
   1c1c0:	cmp	r0, #0
   1c1c4:	bne	1c5cc <main@@Base+0x744>
   1c1c8:	mov	r0, r4
   1c1cc:	mov	r1, #2
   1c1d0:	mov	r2, #2
   1c1d4:	mov	r3, #2
   1c1d8:	bl	21014 <flatcc_verify_field@@Base>
   1c1dc:	cmp	r0, #0
   1c1e0:	bne	1c5cc <main@@Base+0x744>
   1c1e4:	mov	r0, r4
   1c1e8:	mov	r1, #1
   1c1ec:	mov	r2, #2
   1c1f0:	mov	r3, #2
   1c1f4:	bl	21014 <flatcc_verify_field@@Base>
   1c1f8:	cmp	r0, #0
   1c1fc:	bne	1c5cc <main@@Base+0x744>
   1c200:	mov	r0, r4
   1c204:	mov	r1, #3
   1c208:	mov	r2, #1
   1c20c:	bl	2108c <flatcc_verify_string_field@@Base>
   1c210:	cmp	r0, #0
   1c214:	bne	1c5cc <main@@Base+0x744>
   1c218:	mov	r0, r4
   1c21c:	mov	r1, #6
   1c220:	mov	r2, #1
   1c224:	mov	r3, #1
   1c228:	mov	r5, #1
   1c22c:	bl	21014 <flatcc_verify_field@@Base>
   1c230:	cmp	r0, #0
   1c234:	bne	1c5cc <main@@Base+0x744>
   1c238:	mvn	r0, #0
   1c23c:	mov	r1, #5
   1c240:	mov	r2, #0
   1c244:	mov	r3, #1
   1c248:	str	r5, [sp]
   1c24c:	str	r0, [sp, #4]
   1c250:	mov	r0, r4
   1c254:	bl	21198 <flatcc_verify_vector_field@@Base>
   1c258:	cmp	r0, #0
   1c25c:	bne	1c5cc <main@@Base+0x744>
   1c260:	movw	r3, #49568	; 0xc1a0
   1c264:	mov	r0, r4
   1c268:	mov	r1, #11
   1c26c:	mov	r2, #0
   1c270:	movt	r3, #1
   1c274:	bl	21474 <flatcc_verify_table_vector_field@@Base>
   1c278:	cmp	r0, #0
   1c27c:	bne	1c5cc <main@@Base+0x744>
   1c280:	mov	r0, r4
   1c284:	mov	r1, #10
   1c288:	mov	r2, #0
   1c28c:	bl	21240 <flatcc_verify_string_vector_field@@Base>
   1c290:	cmp	r0, #0
   1c294:	bne	1c5cc <main@@Base+0x744>
   1c298:	mov	r0, r4
   1c29c:	mov	r1, #28
   1c2a0:	mov	r2, #0
   1c2a4:	bl	21240 <flatcc_verify_string_vector_field@@Base>
   1c2a8:	cmp	r0, #0
   1c2ac:	bne	1c5cc <main@@Base+0x744>
   1c2b0:	mvn	r0, #0
   1c2b4:	mov	r1, #1
   1c2b8:	mov	r2, #0
   1c2bc:	mov	r3, #1
   1c2c0:	str	r1, [sp]
   1c2c4:	str	r0, [sp, #4]
   1c2c8:	mov	r0, r4
   1c2cc:	mov	r1, #24
   1c2d0:	bl	21198 <flatcc_verify_vector_field@@Base>
   1c2d4:	cmp	r0, #0
   1c2d8:	bne	1c5cc <main@@Base+0x744>
   1c2dc:	mvn	r0, #-536870912	; 0xe0000000
   1c2e0:	mov	r1, #4
   1c2e4:	mov	r2, #0
   1c2e8:	mov	r3, #8
   1c2ec:	str	r1, [sp]
   1c2f0:	str	r0, [sp, #4]
   1c2f4:	mov	r0, r4
   1c2f8:	mov	r1, #29
   1c2fc:	bl	21198 <flatcc_verify_vector_field@@Base>
   1c300:	cmp	r0, #0
   1c304:	bne	1c5cc <main@@Base+0x744>
   1c308:	movw	r5, #49568	; 0xc1a0
   1c30c:	mov	r0, r4
   1c310:	mov	r1, #12
   1c314:	mov	r2, #0
   1c318:	movt	r5, #1
   1c31c:	mov	r3, r5
   1c320:	bl	21374 <flatcc_verify_table_field@@Base>
   1c324:	cmp	r0, #0
   1c328:	bne	1c5cc <main@@Base+0x744>
   1c32c:	movw	r3, #50676	; 0xc5f4
   1c330:	mov	r0, r4
   1c334:	mov	r1, #8
   1c338:	mov	r2, #0
   1c33c:	movt	r3, #1
   1c340:	bl	21ef8 <flatcc_verify_union_field@@Base>
   1c344:	cmp	r0, #0
   1c348:	bne	1c5cc <main@@Base+0x744>
   1c34c:	mvn	r6, #-1073741824	; 0xc0000000
   1c350:	mov	r7, #2
   1c354:	mov	r0, r4
   1c358:	mov	r1, #9
   1c35c:	mov	r2, #0
   1c360:	mov	r3, #4
   1c364:	str	r7, [sp]
   1c368:	str	r6, [sp, #4]
   1c36c:	bl	21198 <flatcc_verify_vector_field@@Base>
   1c370:	cmp	r0, #0
   1c374:	bne	1c5cc <main@@Base+0x744>
   1c378:	mov	r0, r4
   1c37c:	mov	r1, #31
   1c380:	mov	r2, #0
   1c384:	mov	r3, #4
   1c388:	str	r7, [sp]
   1c38c:	str	r6, [sp, #4]
   1c390:	bl	21198 <flatcc_verify_vector_field@@Base>
   1c394:	cmp	r0, #0
   1c398:	bne	1c5cc <main@@Base+0x744>
   1c39c:	mov	r0, #1
   1c3a0:	mov	r1, #13
   1c3a4:	mov	r2, #0
   1c3a8:	mov	r3, #0
   1c3ac:	stm	sp, {r0, r5}
   1c3b0:	mov	r0, r4
   1c3b4:	bl	21d48 <flatcc_verify_table_as_nested_root@@Base>
   1c3b8:	cmp	r0, #0
   1c3bc:	bne	1c5cc <main@@Base+0x744>
   1c3c0:	movw	r3, #50720	; 0xc620
   1c3c4:	mov	r0, r4
   1c3c8:	mov	r1, #14
   1c3cc:	mov	r2, #0
   1c3d0:	movt	r3, #1
   1c3d4:	bl	21374 <flatcc_verify_table_field@@Base>
   1c3d8:	cmp	r0, #0
   1c3dc:	bne	1c5cc <main@@Base+0x744>
   1c3e0:	mov	r0, r4
   1c3e4:	mov	r1, #15
   1c3e8:	mov	r2, #1
   1c3ec:	mov	r3, #1
   1c3f0:	bl	21014 <flatcc_verify_field@@Base>
   1c3f4:	cmp	r0, #0
   1c3f8:	bne	1c5cc <main@@Base+0x744>
   1c3fc:	mov	r0, r4
   1c400:	mov	r1, #16
   1c404:	mov	r2, #4
   1c408:	mov	r3, #4
   1c40c:	bl	21014 <flatcc_verify_field@@Base>
   1c410:	cmp	r0, #0
   1c414:	bne	1c5cc <main@@Base+0x744>
   1c418:	mov	r0, r4
   1c41c:	mov	r1, #17
   1c420:	mov	r2, #4
   1c424:	mov	r3, #4
   1c428:	bl	21014 <flatcc_verify_field@@Base>
   1c42c:	cmp	r0, #0
   1c430:	bne	1c5cc <main@@Base+0x744>
   1c434:	mov	r0, r4
   1c438:	mov	r1, #18
   1c43c:	mov	r2, #8
   1c440:	mov	r3, #8
   1c444:	bl	21014 <flatcc_verify_field@@Base>
   1c448:	cmp	r0, #0
   1c44c:	bne	1c5cc <main@@Base+0x744>
   1c450:	mov	r0, r4
   1c454:	mov	r1, #19
   1c458:	mov	r2, #8
   1c45c:	mov	r3, #8
   1c460:	bl	21014 <flatcc_verify_field@@Base>
   1c464:	cmp	r0, #0
   1c468:	bne	1c5cc <main@@Base+0x744>
   1c46c:	mov	r0, r4
   1c470:	mov	r1, #20
   1c474:	mov	r2, #4
   1c478:	mov	r3, #4
   1c47c:	bl	21014 <flatcc_verify_field@@Base>
   1c480:	cmp	r0, #0
   1c484:	bne	1c5cc <main@@Base+0x744>
   1c488:	mov	r0, r4
   1c48c:	mov	r1, #21
   1c490:	mov	r2, #4
   1c494:	mov	r3, #4
   1c498:	bl	21014 <flatcc_verify_field@@Base>
   1c49c:	cmp	r0, #0
   1c4a0:	bne	1c5cc <main@@Base+0x744>
   1c4a4:	mov	r0, r4
   1c4a8:	mov	r1, #22
   1c4ac:	mov	r2, #8
   1c4b0:	mov	r3, #8
   1c4b4:	bl	21014 <flatcc_verify_field@@Base>
   1c4b8:	cmp	r0, #0
   1c4bc:	bne	1c5cc <main@@Base+0x744>
   1c4c0:	mov	r0, r4
   1c4c4:	mov	r1, #23
   1c4c8:	mov	r2, #8
   1c4cc:	mov	r3, #8
   1c4d0:	bl	21014 <flatcc_verify_field@@Base>
   1c4d4:	cmp	r0, #0
   1c4d8:	bne	1c5cc <main@@Base+0x744>
   1c4dc:	mov	r0, r4
   1c4e0:	mov	r1, #25
   1c4e4:	mov	r2, #4
   1c4e8:	mov	r3, #4
   1c4ec:	bl	21014 <flatcc_verify_field@@Base>
   1c4f0:	cmp	r0, #0
   1c4f4:	bne	1c5cc <main@@Base+0x744>
   1c4f8:	mov	r0, r4
   1c4fc:	mov	r1, #26
   1c500:	mov	r2, #4
   1c504:	mov	r3, #4
   1c508:	bl	21014 <flatcc_verify_field@@Base>
   1c50c:	cmp	r0, #0
   1c510:	bne	1c5cc <main@@Base+0x744>
   1c514:	mov	r0, r4
   1c518:	mov	r1, #27
   1c51c:	mov	r2, #4
   1c520:	mov	r3, #4
   1c524:	bl	21014 <flatcc_verify_field@@Base>
   1c528:	cmp	r0, #0
   1c52c:	bne	1c5cc <main@@Base+0x744>
   1c530:	mvn	r0, #0
   1c534:	mov	r1, #1
   1c538:	mov	r2, #0
   1c53c:	mov	r3, #1
   1c540:	str	r1, [sp]
   1c544:	str	r0, [sp, #4]
   1c548:	mov	r0, r4
   1c54c:	mov	r1, #30
   1c550:	bl	21198 <flatcc_verify_vector_field@@Base>
   1c554:	cmp	r0, #0
   1c558:	bne	1c5cc <main@@Base+0x744>
   1c55c:	mvn	r5, #-536870912	; 0xe0000000
   1c560:	mov	r6, #8
   1c564:	mov	r0, r4
   1c568:	mov	r1, #32
   1c56c:	mov	r2, #0
   1c570:	mov	r3, #8
   1c574:	str	r6, [sp]
   1c578:	str	r5, [sp, #4]
   1c57c:	bl	21198 <flatcc_verify_vector_field@@Base>
   1c580:	cmp	r0, #0
   1c584:	bne	1c5cc <main@@Base+0x744>
   1c588:	mov	r0, r4
   1c58c:	mov	r1, #33	; 0x21
   1c590:	mov	r2, #0
   1c594:	mov	r3, #8
   1c598:	str	r6, [sp]
   1c59c:	str	r5, [sp, #4]
   1c5a0:	bl	21198 <flatcc_verify_vector_field@@Base>
   1c5a4:	cmp	r0, #0
   1c5a8:	bne	1c5cc <main@@Base+0x744>
   1c5ac:	movw	r3, #50808	; 0xc678
   1c5b0:	mov	r0, r4
   1c5b4:	mov	r1, #34	; 0x22
   1c5b8:	mov	r2, #0
   1c5bc:	movt	r3, #1
   1c5c0:	bl	21374 <flatcc_verify_table_field@@Base>
   1c5c4:	cmp	r0, #0
   1c5c8:	beq	1c5d4 <main@@Base+0x74c>
   1c5cc:	sub	sp, fp, #16
   1c5d0:	pop	{r4, r5, r6, r7, fp, pc}
   1c5d4:	movw	r3, #50816	; 0xc680
   1c5d8:	mov	r0, r4
   1c5dc:	mov	r1, #35	; 0x23
   1c5e0:	mov	r2, #0
   1c5e4:	movt	r3, #1
   1c5e8:	sub	sp, fp, #16
   1c5ec:	pop	{r4, r5, r6, r7, fp, lr}
   1c5f0:	b	21374 <flatcc_verify_table_field@@Base>
   1c5f4:	ldrb	r1, [r0, #12]
   1c5f8:	sub	r1, r1, #1
   1c5fc:	uxtb	r2, r1
   1c600:	cmp	r2, #3
   1c604:	movhi	r0, #0
   1c608:	bxhi	lr
   1c60c:	movw	r2, #22004	; 0x55f4
   1c610:	sxtb	r1, r1
   1c614:	movt	r2, #2
   1c618:	ldr	r1, [r2, r1, lsl #2]
   1c61c:	b	2170c <flatcc_verify_union_table@@Base>
   1c620:	push	{r4, sl, fp, lr}
   1c624:	add	fp, sp, #8
   1c628:	mov	r1, #0
   1c62c:	mov	r2, #0
   1c630:	mov	r4, r0
   1c634:	bl	2108c <flatcc_verify_string_field@@Base>
   1c638:	cmp	r0, #0
   1c63c:	popne	{r4, sl, fp, pc}
   1c640:	mov	r0, r4
   1c644:	mov	r1, #1
   1c648:	mov	r2, #8
   1c64c:	mov	r3, #8
   1c650:	bl	21014 <flatcc_verify_field@@Base>
   1c654:	cmp	r0, #0
   1c658:	beq	1c660 <main@@Base+0x7d8>
   1c65c:	pop	{r4, sl, fp, pc}
   1c660:	mov	r0, r4
   1c664:	mov	r1, #2
   1c668:	mov	r2, #2
   1c66c:	mov	r3, #2
   1c670:	pop	{r4, sl, fp, lr}
   1c674:	b	21014 <flatcc_verify_field@@Base>
   1c678:	mov	r0, #0
   1c67c:	bx	lr
   1c680:	push	{r4, r5, r6, sl, fp, lr}
   1c684:	add	fp, sp, #16
   1c688:	sub	sp, sp, #8
   1c68c:	mvn	r5, #0
   1c690:	mov	r6, #1
   1c694:	mov	r1, #0
   1c698:	mov	r2, #0
   1c69c:	mov	r3, #1
   1c6a0:	mov	r4, r0
   1c6a4:	str	r6, [sp]
   1c6a8:	str	r5, [sp, #4]
   1c6ac:	bl	21198 <flatcc_verify_vector_field@@Base>
   1c6b0:	cmp	r0, #0
   1c6b4:	bne	1c704 <main@@Base+0x87c>
   1c6b8:	mov	r0, r4
   1c6bc:	mov	r1, #1
   1c6c0:	mov	r2, #0
   1c6c4:	mov	r3, #1
   1c6c8:	str	r6, [sp]
   1c6cc:	str	r5, [sp, #4]
   1c6d0:	bl	21198 <flatcc_verify_vector_field@@Base>
   1c6d4:	cmp	r0, #0
   1c6d8:	bne	1c704 <main@@Base+0x87c>
   1c6dc:	movw	r0, #49568	; 0xc1a0
   1c6e0:	mov	r1, #1
   1c6e4:	mov	r2, #0
   1c6e8:	mov	r3, #0
   1c6ec:	movt	r0, #1
   1c6f0:	str	r1, [sp]
   1c6f4:	mov	r1, #2
   1c6f8:	str	r0, [sp, #4]
   1c6fc:	mov	r0, r4
   1c700:	bl	21d48 <flatcc_verify_table_as_nested_root@@Base>
   1c704:	sub	sp, fp, #16
   1c708:	pop	{r4, r5, r6, sl, fp, pc}
   1c70c:	push	{r4, sl, fp, lr}
   1c710:	add	fp, sp, #8
   1c714:	mov	r1, #0
   1c718:	mov	r2, #1
   1c71c:	mov	r3, #1
   1c720:	mov	r4, r0
   1c724:	bl	21014 <flatcc_verify_field@@Base>
   1c728:	cmp	r0, #0
   1c72c:	bne	1c768 <main@@Base+0x8e0>
   1c730:	mov	r0, r4
   1c734:	mov	r1, #1
   1c738:	mov	r2, #1
   1c73c:	mov	r3, #1
   1c740:	bl	21014 <flatcc_verify_field@@Base>
   1c744:	cmp	r0, #0
   1c748:	popne	{r4, sl, fp, pc}
   1c74c:	mov	r0, r4
   1c750:	mov	r1, #2
   1c754:	mov	r2, #1
   1c758:	mov	r3, #1
   1c75c:	bl	21014 <flatcc_verify_field@@Base>
   1c760:	cmp	r0, #0
   1c764:	beq	1c76c <main@@Base+0x8e4>
   1c768:	pop	{r4, sl, fp, pc}
   1c76c:	mov	r0, r4
   1c770:	mov	r1, #3
   1c774:	mov	r2, #1
   1c778:	mov	r3, #1
   1c77c:	pop	{r4, sl, fp, lr}
   1c780:	b	21014 <flatcc_verify_field@@Base>
   1c784:	mov	r0, #0
   1c788:	bx	lr
   1c78c:	push	{r4, sl, fp, lr}
   1c790:	add	fp, sp, #8
   1c794:	movw	r3, #51188	; 0xc7f4
   1c798:	mov	r1, #0
   1c79c:	mov	r2, #0
   1c7a0:	mov	r4, r0
   1c7a4:	movt	r3, #1
   1c7a8:	bl	21374 <flatcc_verify_table_field@@Base>
   1c7ac:	cmp	r0, #0
   1c7b0:	popne	{r4, sl, fp, pc}
   1c7b4:	movw	r3, #51292	; 0xc85c
   1c7b8:	mov	r0, r4
   1c7bc:	mov	r1, #1
   1c7c0:	mov	r2, #0
   1c7c4:	movt	r3, #1
   1c7c8:	bl	21374 <flatcc_verify_table_field@@Base>
   1c7cc:	cmp	r0, #0
   1c7d0:	beq	1c7d8 <main@@Base+0x950>
   1c7d4:	pop	{r4, sl, fp, pc}
   1c7d8:	movw	r3, #50676	; 0xc5f4
   1c7dc:	mov	r0, r4
   1c7e0:	mov	r1, #3
   1c7e4:	mov	r2, #0
   1c7e8:	movt	r3, #1
   1c7ec:	pop	{r4, sl, fp, lr}
   1c7f0:	b	22024 <flatcc_verify_union_vector_field@@Base>
   1c7f4:	push	{r4, sl, fp, lr}
   1c7f8:	add	fp, sp, #8
   1c7fc:	movw	r3, #51460	; 0xc904
   1c800:	mov	r1, #0
   1c804:	mov	r2, #0
   1c808:	mov	r4, r0
   1c80c:	movt	r3, #1
   1c810:	bl	21374 <flatcc_verify_table_field@@Base>
   1c814:	cmp	r0, #0
   1c818:	popne	{r4, sl, fp, pc}
   1c81c:	movw	r3, #51708	; 0xc9fc
   1c820:	mov	r0, r4
   1c824:	mov	r1, #1
   1c828:	mov	r2, #0
   1c82c:	movt	r3, #1
   1c830:	bl	21374 <flatcc_verify_table_field@@Base>
   1c834:	cmp	r0, #0
   1c838:	beq	1c840 <main@@Base+0x9b8>
   1c83c:	pop	{r4, sl, fp, pc}
   1c840:	movw	r3, #51768	; 0xca38
   1c844:	mov	r0, r4
   1c848:	mov	r1, #2
   1c84c:	mov	r2, #0
   1c850:	movt	r3, #1
   1c854:	pop	{r4, sl, fp, lr}
   1c858:	b	21374 <flatcc_verify_table_field@@Base>
   1c85c:	push	{r4, sl, fp, lr}
   1c860:	add	fp, sp, #8
   1c864:	movw	r3, #51828	; 0xca74
   1c868:	mov	r1, #1
   1c86c:	mov	r2, #0
   1c870:	mov	r4, r0
   1c874:	movt	r3, #1
   1c878:	bl	21ef8 <flatcc_verify_union_field@@Base>
   1c87c:	cmp	r0, #0
   1c880:	bne	1c8e4 <main@@Base+0xa5c>
   1c884:	movw	r3, #51828	; 0xca74
   1c888:	mov	r0, r4
   1c88c:	mov	r1, #3
   1c890:	mov	r2, #0
   1c894:	movt	r3, #1
   1c898:	bl	21ef8 <flatcc_verify_union_field@@Base>
   1c89c:	cmp	r0, #0
   1c8a0:	bne	1c8e4 <main@@Base+0xa5c>
   1c8a4:	movw	r3, #51828	; 0xca74
   1c8a8:	mov	r0, r4
   1c8ac:	mov	r1, #5
   1c8b0:	mov	r2, #0
   1c8b4:	movt	r3, #1
   1c8b8:	bl	21ef8 <flatcc_verify_union_field@@Base>
   1c8bc:	cmp	r0, #0
   1c8c0:	popne	{r4, sl, fp, pc}
   1c8c4:	movw	r3, #51828	; 0xca74
   1c8c8:	mov	r0, r4
   1c8cc:	mov	r1, #7
   1c8d0:	mov	r2, #0
   1c8d4:	movt	r3, #1
   1c8d8:	bl	21ef8 <flatcc_verify_union_field@@Base>
   1c8dc:	cmp	r0, #0
   1c8e0:	beq	1c8e8 <main@@Base+0xa60>
   1c8e4:	pop	{r4, sl, fp, pc}
   1c8e8:	movw	r3, #51828	; 0xca74
   1c8ec:	mov	r0, r4
   1c8f0:	mov	r1, #9
   1c8f4:	mov	r2, #0
   1c8f8:	movt	r3, #1
   1c8fc:	pop	{r4, sl, fp, lr}
   1c900:	b	22024 <flatcc_verify_union_vector_field@@Base>
   1c904:	push	{r4, sl, fp, lr}
   1c908:	add	fp, sp, #8
   1c90c:	mov	r1, #0
   1c910:	mov	r2, #0
   1c914:	mov	r4, r0
   1c918:	bl	2108c <flatcc_verify_string_field@@Base>
   1c91c:	cmp	r0, #0
   1c920:	bne	1c9e0 <main@@Base+0xb58>
   1c924:	mov	r0, r4
   1c928:	mov	r1, #1
   1c92c:	mov	r2, #4
   1c930:	mov	r3, #4
   1c934:	bl	21014 <flatcc_verify_field@@Base>
   1c938:	cmp	r0, #0
   1c93c:	bne	1c9e0 <main@@Base+0xb58>
   1c940:	mov	r0, r4
   1c944:	mov	r1, #2
   1c948:	mov	r2, #0
   1c94c:	bl	2108c <flatcc_verify_string_field@@Base>
   1c950:	cmp	r0, #0
   1c954:	bne	1c9e0 <main@@Base+0xb58>
   1c958:	mov	r0, r4
   1c95c:	mov	r1, #3
   1c960:	mov	r2, #8
   1c964:	mov	r3, #8
   1c968:	bl	21014 <flatcc_verify_field@@Base>
   1c96c:	cmp	r0, #0
   1c970:	bne	1c9e0 <main@@Base+0xb58>
   1c974:	mov	r0, r4
   1c978:	mov	r1, #4
   1c97c:	mov	r2, #0
   1c980:	bl	2108c <flatcc_verify_string_field@@Base>
   1c984:	cmp	r0, #0
   1c988:	bne	1c9e0 <main@@Base+0xb58>
   1c98c:	mov	r0, r4
   1c990:	mov	r1, #5
   1c994:	mov	r2, #8
   1c998:	mov	r3, #8
   1c99c:	bl	21014 <flatcc_verify_field@@Base>
   1c9a0:	cmp	r0, #0
   1c9a4:	bne	1c9e0 <main@@Base+0xb58>
   1c9a8:	mov	r0, r4
   1c9ac:	mov	r1, #6
   1c9b0:	mov	r2, #4
   1c9b4:	mov	r3, #4
   1c9b8:	bl	21014 <flatcc_verify_field@@Base>
   1c9bc:	cmp	r0, #0
   1c9c0:	popne	{r4, sl, fp, pc}
   1c9c4:	mov	r0, r4
   1c9c8:	mov	r1, #7
   1c9cc:	mov	r2, #8
   1c9d0:	mov	r3, #8
   1c9d4:	bl	21014 <flatcc_verify_field@@Base>
   1c9d8:	cmp	r0, #0
   1c9dc:	beq	1c9e4 <main@@Base+0xb5c>
   1c9e0:	pop	{r4, sl, fp, pc}
   1c9e4:	mov	r0, r4
   1c9e8:	mov	r1, #8
   1c9ec:	mov	r2, #4
   1c9f0:	mov	r3, #4
   1c9f4:	pop	{r4, sl, fp, lr}
   1c9f8:	b	21014 <flatcc_verify_field@@Base>
   1c9fc:	push	{r4, sl, fp, lr}
   1ca00:	add	fp, sp, #8
   1ca04:	mov	r1, #0
   1ca08:	mov	r2, #8
   1ca0c:	mov	r3, #8
   1ca10:	mov	r4, r0
   1ca14:	bl	21014 <flatcc_verify_field@@Base>
   1ca18:	cmp	r0, #0
   1ca1c:	popne	{r4, sl, fp, pc}
   1ca20:	mov	r0, r4
   1ca24:	mov	r1, #1
   1ca28:	mov	r2, #4
   1ca2c:	mov	r3, #4
   1ca30:	pop	{r4, sl, fp, lr}
   1ca34:	b	21014 <flatcc_verify_field@@Base>
   1ca38:	push	{r4, sl, fp, lr}
   1ca3c:	add	fp, sp, #8
   1ca40:	mov	r1, #0
   1ca44:	mov	r2, #8
   1ca48:	mov	r3, #8
   1ca4c:	mov	r4, r0
   1ca50:	bl	21014 <flatcc_verify_field@@Base>
   1ca54:	cmp	r0, #0
   1ca58:	popne	{r4, sl, fp, pc}
   1ca5c:	mov	r0, r4
   1ca60:	mov	r1, #1
   1ca64:	mov	r2, #4
   1ca68:	mov	r3, #4
   1ca6c:	pop	{r4, sl, fp, lr}
   1ca70:	b	21014 <flatcc_verify_field@@Base>
   1ca74:	ldrb	r2, [r0, #12]
   1ca78:	sub	r1, r2, #2
   1ca7c:	cmp	r1, #9
   1ca80:	bhi	1cac0 <main@@Base+0xc38>
   1ca84:	add	r2, pc, #0
   1ca88:	ldr	pc, [r2, r1, lsl #2]
   1ca8c:	ldrdeq	ip, [r1], -r4
   1ca90:	andeq	ip, r1, ip, asr #21
   1ca94:	andeq	ip, r1, ip, asr #21
   1ca98:	andeq	ip, r1, ip, asr #21
   1ca9c:	andeq	ip, r1, ip, asr #21
   1caa0:	andeq	ip, r1, ip, asr #21
   1caa4:	andeq	ip, r1, r0, ror #21
   1caa8:			; <UNDEFINED> instruction: 0x0001cab4
   1caac:			; <UNDEFINED> instruction: 0x0001cab4
   1cab0:	andeq	ip, r1, r8, asr #21
   1cab4:	mov	r1, #4
   1cab8:	mov	r2, #4
   1cabc:	b	217f4 <flatcc_verify_union_struct@@Base>
   1cac0:	cmp	r2, #255	; 0xff
   1cac4:	bne	1cacc <main@@Base+0xc44>
   1cac8:	b	2184c <flatcc_verify_union_string@@Base>
   1cacc:	mov	r0, #0
   1cad0:	bx	lr
   1cad4:	movw	r1, #51948	; 0xcaec
   1cad8:	movt	r1, #1
   1cadc:	b	2170c <flatcc_verify_union_table@@Base>
   1cae0:	mov	r1, #2
   1cae4:	mov	r2, #2
   1cae8:	b	217f4 <flatcc_verify_union_struct@@Base>
   1caec:	mov	r1, #0
   1caf0:	mov	r2, #4
   1caf4:	mov	r3, #4
   1caf8:	b	21014 <flatcc_verify_field@@Base>
   1cafc:	mov	r1, #0
   1cb00:	mov	r2, #0
   1cb04:	mov	r3, #1
   1cb08:	b	21014 <flatcc_verify_field@@Base>
   1cb0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb10:	add	fp, sp, #28
   1cb14:	sub	sp, sp, #20
   1cb18:	cmp	r2, r1, lsl #1
   1cb1c:	bcs	1cb28 <main@@Base+0xca0>
   1cb20:	sub	sp, fp, #28
   1cb24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb28:	mov	sl, r2
   1cb2c:	lsl	r7, r1, #1
   1cb30:	str	r0, [sp, #4]
   1cb34:	str	r2, [sp]
   1cb38:	cmp	r7, sl
   1cb3c:	bcs	1cc04 <main@@Base+0xd7c>
   1cb40:	cmp	r0, #0
   1cb44:	ldrne	r8, [r0, #-4]
   1cb48:	cmpne	r8, r7
   1cb4c:	bls	1cd24 <main@@Base+0xe9c>
   1cb50:	mov	r4, r0
   1cb54:	ldr	r2, [r4, r7, lsl #2]!
   1cb58:	ldr	r2, [r4, r2]!
   1cb5c:	mov	r3, r4
   1cb60:	ldrh	r2, [r3, -r2]!	; <UNPREDICTABLE>
   1cb64:	cmp	r2, #12
   1cb68:	bcc	1cd44 <main@@Base+0xebc>
   1cb6c:	ldrh	r2, [r3, #10]
   1cb70:	cmp	r2, #0
   1cb74:	beq	1cd44 <main@@Base+0xebc>
   1cb78:	orr	r5, r7, #1
   1cb7c:	cmp	r8, r5
   1cb80:	bls	1cd24 <main@@Base+0xe9c>
   1cb84:	mov	r9, r1
   1cb88:	mov	r1, r0
   1cb8c:	ldr	r3, [r1, r5, lsl #2]!
   1cb90:	ldr	r6, [r1, r3]!
   1cb94:	mov	r3, r1
   1cb98:	ldrh	r6, [r3, -r6]!	; <UNPREDICTABLE>
   1cb9c:	cmp	r6, #12
   1cba0:	bcc	1cd44 <main@@Base+0xebc>
   1cba4:	ldrh	r3, [r3, #10]
   1cba8:	cmp	r3, #0
   1cbac:	beq	1cd44 <main@@Base+0xebc>
   1cbb0:	ldr	r2, [r4, r2]!
   1cbb4:	add	r0, r4, r2
   1cbb8:	ldr	r2, [r1, r3]!
   1cbbc:	add	r0, r0, #4
   1cbc0:	ldr	r4, [r0, #-4]
   1cbc4:	ldr	r6, [r1, r2]!
   1cbc8:	add	r1, r1, #4
   1cbcc:	cmp	r4, r6
   1cbd0:	mov	r2, r6
   1cbd4:	movcc	r2, r4
   1cbd8:	bl	12f70 <strncmp@plt>
   1cbdc:	cmp	r0, #0
   1cbe0:	mov	r0, r5
   1cbe4:	mov	r1, r9
   1cbe8:	movne	r0, r7
   1cbec:	movmi	r0, r5
   1cbf0:	movne	r7, r0
   1cbf4:	cmp	r4, r6
   1cbf8:	movcc	r7, r0
   1cbfc:	ldr	r0, [sp, #4]
   1cc00:	b	1cc10 <main@@Base+0xd88>
   1cc04:	cmp	r0, #0
   1cc08:	beq	1cd24 <main@@Base+0xe9c>
   1cc0c:	ldr	r8, [r0, #-4]
   1cc10:	mov	r5, r7
   1cc14:	cmp	r8, r1
   1cc18:	bls	1cd24 <main@@Base+0xe9c>
   1cc1c:	mov	r9, r0
   1cc20:	ldr	r4, [r9, r1, lsl #2]!
   1cc24:	mov	r7, r9
   1cc28:	ldr	r2, [r7, r4]!
   1cc2c:	mov	r3, r7
   1cc30:	ldrh	r2, [r3, -r2]!	; <UNPREDICTABLE>
   1cc34:	cmp	r2, #12
   1cc38:	bcc	1cd44 <main@@Base+0xebc>
   1cc3c:	ldrh	r6, [r3, #10]
   1cc40:	cmp	r6, #0
   1cc44:	beq	1cd44 <main@@Base+0xebc>
   1cc48:	cmp	r8, r5
   1cc4c:	bls	1cd24 <main@@Base+0xe9c>
   1cc50:	str	r4, [sp, #8]
   1cc54:	mov	r4, r0
   1cc58:	str	r5, [sp, #12]
   1cc5c:	str	r1, [sp, #16]
   1cc60:	ldr	r8, [r4, r5, lsl #2]!
   1cc64:	mov	r3, r4
   1cc68:	ldr	r5, [r3, r8]!
   1cc6c:	mov	r2, r3
   1cc70:	ldrh	r5, [r2, -r5]!	; <UNPREDICTABLE>
   1cc74:	cmp	r5, #12
   1cc78:	bcc	1cd44 <main@@Base+0xebc>
   1cc7c:	ldrh	r2, [r2, #10]
   1cc80:	cmp	r2, #0
   1cc84:	beq	1cd44 <main@@Base+0xebc>
   1cc88:	ldr	r1, [r7, r6]!
   1cc8c:	add	r0, r7, r1
   1cc90:	ldr	r1, [r3, r2]!
   1cc94:	add	r0, r0, #4
   1cc98:	ldr	sl, [r0, #-4]
   1cc9c:	ldr	r5, [r3, r1]!
   1cca0:	add	r1, r3, #4
   1cca4:	cmp	sl, r5
   1cca8:	mov	r2, r5
   1ccac:	movcc	r2, sl
   1ccb0:	bl	12f70 <strncmp@plt>
   1ccb4:	cmp	r0, #1
   1ccb8:	mov	r1, #0
   1ccbc:	mov	r2, #0
   1ccc0:	movwlt	r1, #1
   1ccc4:	cmp	r0, #0
   1ccc8:	movwne	r0, #1
   1cccc:	cmp	sl, r5
   1ccd0:	ldr	sl, [sp]
   1ccd4:	movwcc	r2, #1
   1ccd8:	orr	r0, r2, r0
   1ccdc:	ldr	r2, [sp, #16]
   1cce0:	cmp	r0, #1
   1cce4:	ldr	r0, [sp, #4]
   1cce8:	bne	1cb20 <main@@Base+0xc98>
   1ccec:	cmp	r1, #0
   1ccf0:	beq	1cb20 <main@@Base+0xc98>
   1ccf4:	ldr	r3, [sp, #12]
   1ccf8:	sub	r2, r2, r3
   1ccfc:	cmp	sl, r3, lsl #1
   1cd00:	lsl	r7, r3, #1
   1cd04:	sub	r1, r8, r2, lsl #2
   1cd08:	str	r1, [r9]
   1cd0c:	ldr	r1, [sp, #8]
   1cd10:	add	r1, r1, r2, lsl #2
   1cd14:	str	r1, [r4]
   1cd18:	mov	r1, r3
   1cd1c:	bcs	1cb38 <main@@Base+0xcb0>
   1cd20:	b	1cb20 <main@@Base+0xc98>
   1cd24:	movw	r0, #13610	; 0x352a
   1cd28:	movw	r1, #12241	; 0x2fd1
   1cd2c:	movw	r3, #13937	; 0x3671
   1cd30:	movw	r2, #693	; 0x2b5
   1cd34:	movt	r0, #2
   1cd38:	movt	r1, #2
   1cd3c:	movt	r3, #2
   1cd40:	bl	12f88 <__assert_fail@plt>
   1cd44:	movw	r0, #13488	; 0x34b0
   1cd48:	movw	r1, #12241	; 0x2fd1
   1cd4c:	movw	r3, #13407	; 0x345f
   1cd50:	movw	r2, #699	; 0x2bb
   1cd54:	movt	r0, #2
   1cd58:	movt	r1, #2
   1cd5c:	movt	r3, #2
   1cd60:	bl	12f88 <__assert_fail@plt>

0001cd64 <flatcc_builder_default_alloc@@Base>:
   1cd64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1cd68:	add	fp, sp, #24
   1cd6c:	mov	r4, r1
   1cd70:	cmp	r2, #0
   1cd74:	beq	1cdbc <flatcc_builder_default_alloc@@Base+0x58>
   1cd78:	ldr	r0, [fp, #8]
   1cd7c:	mov	r8, r3
   1cd80:	sub	r1, r0, #1
   1cd84:	cmp	r1, #6
   1cd88:	bhi	1cde4 <flatcc_builder_default_alloc@@Base+0x80>
   1cd8c:	add	r3, pc, #4
   1cd90:	mov	r0, #256	; 0x100
   1cd94:	ldr	pc, [r3, r1, lsl #2]
   1cd98:	strdeq	ip, [r1], -r8
   1cd9c:	andeq	ip, r1, r4, ror #27
   1cda0:	andeq	ip, r1, r4, ror #27
   1cda4:			; <UNDEFINED> instruction: 0x0001cdb4
   1cda8:	andeq	ip, r1, ip, ror #27
   1cdac:	andeq	ip, r1, r4, ror #27
   1cdb0:	strdeq	ip, [r1], -r4
   1cdb4:	mov	r0, #288	; 0x120
   1cdb8:	b	1cdf8 <flatcc_builder_default_alloc@@Base+0x94>
   1cdbc:	ldr	r0, [r4]
   1cdc0:	cmp	r0, #0
   1cdc4:	beq	1cddc <flatcc_builder_default_alloc@@Base+0x78>
   1cdc8:	bl	12ea4 <free@plt>
   1cdcc:	mov	r6, #0
   1cdd0:	str	r6, [r4]
   1cdd4:	str	r6, [r4, #4]
   1cdd8:	b	1ce68 <flatcc_builder_default_alloc@@Base+0x104>
   1cddc:	mov	r6, #0
   1cde0:	b	1ce68 <flatcc_builder_default_alloc@@Base+0x104>
   1cde4:	mov	r0, #32
   1cde8:	b	1cdf8 <flatcc_builder_default_alloc@@Base+0x94>
   1cdec:	mov	r0, r2
   1cdf0:	b	1cdf8 <flatcc_builder_default_alloc@@Base+0x94>
   1cdf4:	mov	r0, #64	; 0x40
   1cdf8:	mov	r7, r0
   1cdfc:	lsl	r0, r0, #1
   1ce00:	cmp	r7, r2
   1ce04:	bcc	1cdf8 <flatcc_builder_default_alloc@@Base+0x94>
   1ce08:	ldr	r0, [r4, #4]
   1ce0c:	mov	r6, #0
   1ce10:	cmp	r0, r2
   1ce14:	lsrcs	r0, r0, #1
   1ce18:	cmpcs	r0, r7
   1ce1c:	bcs	1ce68 <flatcc_builder_default_alloc@@Base+0x104>
   1ce20:	ldr	r0, [r4]
   1ce24:	mov	r1, r7
   1ce28:	bl	12ebc <realloc@plt>
   1ce2c:	cmp	r0, #0
   1ce30:	beq	1ce64 <flatcc_builder_default_alloc@@Base+0x100>
   1ce34:	mov	r5, r0
   1ce38:	cmp	r8, #0
   1ce3c:	beq	1ce5c <flatcc_builder_default_alloc@@Base+0xf8>
   1ce40:	ldr	r1, [r4, #4]
   1ce44:	cmp	r7, r1
   1ce48:	bls	1ce5c <flatcc_builder_default_alloc@@Base+0xf8>
   1ce4c:	add	r0, r5, r1
   1ce50:	sub	r2, r7, r1
   1ce54:	mov	r1, #0
   1ce58:	bl	12f40 <memset@plt>
   1ce5c:	stm	r4, {r5, r7}
   1ce60:	b	1ce68 <flatcc_builder_default_alloc@@Base+0x104>
   1ce64:	mvn	r6, #0
   1ce68:	mov	r0, r6
   1ce6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0001ce70 <flatcc_builder_flush_vtable_cache@@Base>:
   1ce70:	push	{r4, r5, fp, lr}
   1ce74:	add	fp, sp, #8
   1ce78:	mov	r4, r0
   1ce7c:	ldr	r0, [r0, #116]	; 0x74
   1ce80:	cmp	r0, #0
   1ce84:	popeq	{r4, r5, fp, pc}
   1ce88:	ldr	r0, [r4, #92]	; 0x5c
   1ce8c:	ldr	r2, [r4, #96]	; 0x60
   1ce90:	mov	r1, #0
   1ce94:	mov	r5, #0
   1ce98:	bl	12f40 <memset@plt>
   1ce9c:	mov	r0, #16
   1cea0:	str	r5, [r4, #120]	; 0x78
   1cea4:	str	r0, [r4, #124]	; 0x7c
   1cea8:	pop	{r4, r5, fp, pc}

0001ceac <flatcc_builder_custom_init@@Base>:
   1ceac:	push	{r4, r5, r6, r7, fp, lr}
   1ceb0:	add	fp, sp, #16
   1ceb4:	mov	r6, r2
   1ceb8:	mov	r7, r1
   1cebc:	mov	r1, #0
   1cec0:	mov	r2, #232	; 0xe8
   1cec4:	mov	r5, r3
   1cec8:	mov	r4, r0
   1cecc:	bl	12f40 <memset@plt>
   1ced0:	ldr	r0, [fp, #8]
   1ced4:	cmp	r7, #0
   1ced8:	bne	1cef0 <flatcc_builder_custom_init@@Base+0x44>
   1cedc:	movw	r7, #3096	; 0xc18
   1cee0:	mov	r1, #1
   1cee4:	add	r6, r4, #188	; 0xbc
   1cee8:	movt	r7, #2
   1ceec:	str	r1, [r4, #184]	; 0xb8
   1cef0:	movw	r1, #52580	; 0xcd64
   1cef4:	cmp	r5, #0
   1cef8:	str	r6, [r4, #36]	; 0x24
   1cefc:	str	r0, [r4, #40]	; 0x28
   1cf00:	mov	r0, #0
   1cf04:	str	r7, [r4, #44]	; 0x2c
   1cf08:	movt	r1, #1
   1cf0c:	movne	r1, r5
   1cf10:	str	r1, [r4, #48]	; 0x30
   1cf14:	pop	{r4, r5, r6, r7, fp, pc}

0001cf18 <flatcc_builder_init@@Base>:
   1cf18:	push	{r4, r5, fp, lr}
   1cf1c:	add	fp, sp, #8
   1cf20:	mov	r1, #0
   1cf24:	mov	r2, #232	; 0xe8
   1cf28:	mov	r4, r0
   1cf2c:	mov	r5, #0
   1cf30:	bl	12f40 <memset@plt>
   1cf34:	mov	r0, #1
   1cf38:	movw	r1, #3096	; 0xc18
   1cf3c:	add	r2, r4, #188	; 0xbc
   1cf40:	str	r0, [r4, #184]	; 0xb8
   1cf44:	movw	r0, #52580	; 0xcd64
   1cf48:	movt	r1, #2
   1cf4c:	str	r2, [r4, #36]	; 0x24
   1cf50:	str	r5, [r4, #40]	; 0x28
   1cf54:	movt	r0, #1
   1cf58:	str	r1, [r4, #44]	; 0x2c
   1cf5c:	str	r0, [r4, #48]	; 0x30
   1cf60:	mov	r0, #0
   1cf64:	pop	{r4, r5, fp, pc}

0001cf68 <flatcc_builder_custom_reset@@Base>:
   1cf68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf6c:	add	fp, sp, #28
   1cf70:	sub	sp, sp, #4
   1cf74:	mov	r9, r2
   1cf78:	mov	r8, r1
   1cf7c:	mov	sl, r0
   1cf80:	add	r7, r0, #52	; 0x34
   1cf84:	mov	r5, #0
   1cf88:	add	r6, sl, r5, lsl #3
   1cf8c:	ldr	r0, [r6, #52]	; 0x34
   1cf90:	cmp	r0, #0
   1cf94:	beq	1cfdc <flatcc_builder_custom_reset@@Base+0x74>
   1cf98:	cmp	r9, #0
   1cf9c:	cmpne	r5, #5
   1cfa0:	beq	1cfcc <flatcc_builder_custom_reset@@Base+0x64>
   1cfa4:	ldr	r0, [sl, #40]	; 0x28
   1cfa8:	ldr	r4, [sl, #48]	; 0x30
   1cfac:	mov	r1, r7
   1cfb0:	mov	r2, #1
   1cfb4:	mov	r3, #1
   1cfb8:	str	r5, [sp]
   1cfbc:	blx	r4
   1cfc0:	cmp	r0, #0
   1cfc4:	bne	1d07c <flatcc_builder_custom_reset@@Base+0x114>
   1cfc8:	ldr	r0, [r6, #52]	; 0x34
   1cfcc:	ldr	r2, [r6, #56]	; 0x38
   1cfd0:	mov	r1, #0
   1cfd4:	bl	12f40 <memset@plt>
   1cfd8:	b	1cfe8 <flatcc_builder_custom_reset@@Base+0x80>
   1cfdc:	ldr	r0, [r6, #56]	; 0x38
   1cfe0:	cmp	r0, #0
   1cfe4:	bne	1d08c <flatcc_builder_custom_reset@@Base+0x124>
   1cfe8:	add	r5, r5, #1
   1cfec:	add	r7, r7, #8
   1cff0:	cmp	r5, #8
   1cff4:	bne	1cf88 <flatcc_builder_custom_reset@@Base+0x20>
   1cff8:	mov	r0, #0
   1cffc:	vmov.i32	q8, #0	; 0x00000000
   1d000:	mov	r5, #0
   1d004:	str	r0, [sl, #120]	; 0x78
   1d008:	ldr	r1, [sl, #124]	; 0x7c
   1d00c:	cmp	r1, #0
   1d010:	movne	r1, #16
   1d014:	strne	r1, [sl, #124]	; 0x7c
   1d018:	add	r1, sl, #148	; 0x94
   1d01c:	str	r0, [sl, #136]	; 0x88
   1d020:	str	r0, [sl, #140]	; 0x8c
   1d024:	strh	r0, [sl, #128]	; 0x80
   1d028:	str	r0, [sl, #32]
   1d02c:	cmp	r8, #0
   1d030:	vst1.32	{d16-d17}, [r1]
   1d034:	ldr	r2, [sl, #60]	; 0x3c
   1d038:	ldr	r1, [sl, #52]	; 0x34
   1d03c:	ldr	r3, [sl, #76]	; 0x4c
   1d040:	str	r2, [sl, #16]
   1d044:	str	r0, [sl, #20]
   1d048:	str	r0, [sl, #24]
   1d04c:	movne	r0, #0
   1d050:	str	r3, [sl]
   1d054:	str	r1, [sl, #4]
   1d058:	strne	r0, [sl, #172]	; 0xac
   1d05c:	strne	r0, [sl, #176]	; 0xb0
   1d060:	strne	r0, [sl, #180]	; 0xb4
   1d064:	ldr	r0, [sl, #184]	; 0xb8
   1d068:	cmp	r0, #0
   1d06c:	beq	1d080 <flatcc_builder_custom_reset@@Base+0x118>
   1d070:	add	r0, sl, #188	; 0xbc
   1d074:	bl	20ae8 <flatcc_emitter_reset@@Base>
   1d078:	b	1d080 <flatcc_builder_custom_reset@@Base+0x118>
   1d07c:	mvn	r5, #0
   1d080:	mov	r0, r5
   1d084:	sub	sp, fp, #28
   1d088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d08c:	movw	r0, #22548	; 0x5814
   1d090:	movw	r1, #22566	; 0x5826
   1d094:	movw	r3, #22636	; 0x586c
   1d098:	movw	r2, #434	; 0x1b2
   1d09c:	movt	r0, #2
   1d0a0:	movt	r1, #2
   1d0a4:	movt	r3, #2
   1d0a8:	bl	12f88 <__assert_fail@plt>

0001d0ac <flatcc_builder_reset@@Base>:
   1d0ac:	mov	r1, #0
   1d0b0:	mov	r2, #0
   1d0b4:	b	1cf68 <flatcc_builder_custom_reset@@Base>

0001d0b8 <flatcc_builder_clear@@Base>:
   1d0b8:	push	{r4, r5, r6, r7, fp, lr}
   1d0bc:	add	fp, sp, #16
   1d0c0:	sub	sp, sp, #8
   1d0c4:	mov	r7, r0
   1d0c8:	add	r5, r0, #52	; 0x34
   1d0cc:	mov	r6, #0
   1d0d0:	ldr	r0, [r7, #40]	; 0x28
   1d0d4:	ldr	r4, [r7, #48]	; 0x30
   1d0d8:	mov	r1, r5
   1d0dc:	mov	r2, #0
   1d0e0:	mov	r3, #0
   1d0e4:	str	r6, [sp]
   1d0e8:	blx	r4
   1d0ec:	add	r6, r6, #1
   1d0f0:	add	r5, r5, #8
   1d0f4:	cmp	r6, #8
   1d0f8:	bne	1d0d0 <flatcc_builder_clear@@Base+0x18>
   1d0fc:	ldr	r0, [r7, #184]	; 0xb8
   1d100:	cmp	r0, #0
   1d104:	beq	1d110 <flatcc_builder_clear@@Base+0x58>
   1d108:	add	r0, r7, #188	; 0xbc
   1d10c:	bl	20bb4 <flatcc_emitter_clear@@Base>
   1d110:	mov	r0, r7
   1d114:	mov	r1, #0
   1d118:	mov	r2, #232	; 0xe8
   1d11c:	sub	sp, fp, #16
   1d120:	pop	{r4, r5, r6, r7, fp, lr}
   1d124:	b	12f40 <memset@plt>

0001d128 <flatcc_builder_enter_user_frame_ptr@@Base>:
   1d128:	push	{r4, r5, r6, r7, fp, lr}
   1d12c:	add	fp, sp, #16
   1d130:	sub	sp, sp, #8
   1d134:	mov	r4, r0
   1d138:	ldr	r0, [r0, #112]	; 0x70
   1d13c:	add	r1, r1, #7
   1d140:	ldr	r7, [r4, #228]	; 0xe4
   1d144:	bic	r5, r1, #3
   1d148:	add	r6, r4, #108	; 0x6c
   1d14c:	add	r2, r7, r5
   1d150:	cmp	r2, r0
   1d154:	bls	1d17c <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   1d158:	ldr	r0, [r4, #40]	; 0x28
   1d15c:	ldr	ip, [r4, #48]	; 0x30
   1d160:	mov	r1, #7
   1d164:	mov	r3, #0
   1d168:	str	r1, [sp]
   1d16c:	mov	r1, r6
   1d170:	blx	ip
   1d174:	cmp	r0, #0
   1d178:	bne	1d1c8 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   1d17c:	ldr	r0, [r6]
   1d180:	adds	r6, r0, r7
   1d184:	beq	1d1b8 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   1d188:	mov	r0, r6
   1d18c:	mov	r1, #0
   1d190:	mov	r2, r5
   1d194:	bl	12f40 <memset@plt>
   1d198:	ldr	r0, [r4, #224]	; 0xe0
   1d19c:	str	r0, [r6], #4
   1d1a0:	ldr	r0, [r4, #228]	; 0xe4
   1d1a4:	add	r1, r0, #4
   1d1a8:	add	r0, r0, r5
   1d1ac:	str	r1, [r4, #224]	; 0xe0
   1d1b0:	str	r0, [r4, #228]	; 0xe4
   1d1b4:	b	1d1bc <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   1d1b8:	mov	r6, #0
   1d1bc:	mov	r0, r6
   1d1c0:	sub	sp, fp, #16
   1d1c4:	pop	{r4, r5, r6, r7, fp, pc}
   1d1c8:	movw	r0, #27084	; 0x69cc
   1d1cc:	movw	r1, #22566	; 0x5826
   1d1d0:	movw	r3, #26630	; 0x6806
   1d1d4:	mov	r2, #308	; 0x134
   1d1d8:	movt	r0, #2
   1d1dc:	movt	r1, #2
   1d1e0:	movt	r3, #2
   1d1e4:	bl	12f88 <__assert_fail@plt>

0001d1e8 <flatcc_builder_enter_user_frame@@Base>:
   1d1e8:	push	{r4, r5, r6, r7, fp, lr}
   1d1ec:	add	fp, sp, #16
   1d1f0:	sub	sp, sp, #8
   1d1f4:	mov	r4, r0
   1d1f8:	ldr	r0, [r0, #112]	; 0x70
   1d1fc:	add	r1, r1, #7
   1d200:	ldr	r7, [r4, #228]	; 0xe4
   1d204:	bic	r5, r1, #3
   1d208:	add	r6, r4, #108	; 0x6c
   1d20c:	add	r2, r7, r5
   1d210:	cmp	r2, r0
   1d214:	bls	1d23c <flatcc_builder_enter_user_frame@@Base+0x54>
   1d218:	ldr	r0, [r4, #40]	; 0x28
   1d21c:	ldr	ip, [r4, #48]	; 0x30
   1d220:	mov	r1, #7
   1d224:	mov	r3, #0
   1d228:	str	r1, [sp]
   1d22c:	mov	r1, r6
   1d230:	blx	ip
   1d234:	cmp	r0, #0
   1d238:	bne	1d284 <flatcc_builder_enter_user_frame@@Base+0x9c>
   1d23c:	ldr	r0, [r6]
   1d240:	adds	r6, r0, r7
   1d244:	beq	1d278 <flatcc_builder_enter_user_frame@@Base+0x90>
   1d248:	mov	r0, r6
   1d24c:	mov	r1, #0
   1d250:	mov	r2, r5
   1d254:	bl	12f40 <memset@plt>
   1d258:	ldr	r0, [r4, #224]	; 0xe0
   1d25c:	str	r0, [r6]
   1d260:	ldr	r1, [r4, #228]	; 0xe4
   1d264:	add	r0, r1, #4
   1d268:	add	r1, r1, r5
   1d26c:	str	r0, [r4, #224]	; 0xe0
   1d270:	str	r1, [r4, #228]	; 0xe4
   1d274:	b	1d27c <flatcc_builder_enter_user_frame@@Base+0x94>
   1d278:	mov	r0, #0
   1d27c:	sub	sp, fp, #16
   1d280:	pop	{r4, r5, r6, r7, fp, pc}
   1d284:	movw	r0, #27084	; 0x69cc
   1d288:	movw	r1, #22566	; 0x5826
   1d28c:	movw	r3, #26630	; 0x6806
   1d290:	mov	r2, #308	; 0x134
   1d294:	movt	r0, #2
   1d298:	movt	r1, #2
   1d29c:	movt	r3, #2
   1d2a0:	bl	12f88 <__assert_fail@plt>

0001d2a4 <flatcc_builder_exit_user_frame@@Base>:
   1d2a4:	push	{fp, lr}
   1d2a8:	mov	fp, sp
   1d2ac:	ldr	r1, [r0, #224]	; 0xe0
   1d2b0:	cmp	r1, #0
   1d2b4:	subne	r2, r1, #4
   1d2b8:	strne	r2, [r0, #228]	; 0xe4
   1d2bc:	ldrne	r2, [r0, #108]	; 0x6c
   1d2c0:	addne	r1, r2, r1
   1d2c4:	ldrne	r1, [r1, #-4]
   1d2c8:	strne	r1, [r0, #224]	; 0xe0
   1d2cc:	movne	r0, r1
   1d2d0:	popne	{fp, pc}
   1d2d4:	movw	r0, #22698	; 0x58aa
   1d2d8:	movw	r1, #22566	; 0x5826
   1d2dc:	movw	r3, #22723	; 0x58c3
   1d2e0:	movw	r2, #542	; 0x21e
   1d2e4:	movt	r0, #2
   1d2e8:	movt	r1, #2
   1d2ec:	movt	r3, #2
   1d2f0:	bl	12f88 <__assert_fail@plt>

0001d2f4 <flatcc_builder_exit_user_frame_at@@Base>:
   1d2f4:	push	{fp, lr}
   1d2f8:	mov	fp, sp
   1d2fc:	ldr	r2, [r0, #224]	; 0xe0
   1d300:	cmp	r2, r1
   1d304:	bcc	1d314 <flatcc_builder_exit_user_frame_at@@Base+0x20>
   1d308:	str	r1, [r0, #224]	; 0xe0
   1d30c:	pop	{fp, lr}
   1d310:	b	1d2a4 <flatcc_builder_exit_user_frame@@Base>
   1d314:	movw	r0, #22781	; 0x58fd
   1d318:	movw	r1, #22566	; 0x5826
   1d31c:	movw	r3, #22812	; 0x591c
   1d320:	movw	r2, #551	; 0x227
   1d324:	movt	r0, #2
   1d328:	movt	r1, #2
   1d32c:	movt	r3, #2
   1d330:	bl	12f88 <__assert_fail@plt>

0001d334 <flatcc_builder_get_current_user_frame@@Base>:
   1d334:	ldr	r0, [r0, #224]	; 0xe0
   1d338:	bx	lr

0001d33c <flatcc_builder_get_user_frame_ptr@@Base>:
   1d33c:	ldr	r0, [r0, #108]	; 0x6c
   1d340:	add	r0, r0, r1
   1d344:	bx	lr

0001d348 <flatcc_builder_embed_buffer@@Base>:
   1d348:	push	{r4, r5, r6, r7, fp, lr}
   1d34c:	add	fp, sp, #16
   1d350:	sub	sp, sp, #88	; 0x58
   1d354:	mov	r4, r0
   1d358:	ldr	r0, [fp, #8]
   1d35c:	mov	r5, r3
   1d360:	mov	r7, r2
   1d364:	mov	r2, r1
   1d368:	sub	r1, fp, #18
   1d36c:	strh	r0, [fp, #-18]	; 0xffffffee
   1d370:	mov	r0, r4
   1d374:	ldr	r3, [r4, #152]	; 0x98
   1d378:	cmp	r3, #0
   1d37c:	movwne	r3, #1
   1d380:	bl	1d4ac <flatcc_builder_embed_buffer@@Base+0x164>
   1d384:	ldr	r1, [fp, #12]
   1d388:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1d38c:	ldr	r0, [r4, #136]	; 0x88
   1d390:	mov	r2, #0
   1d394:	str	r2, [sp, #12]
   1d398:	str	r2, [sp, #8]
   1d39c:	and	r1, r1, #2
   1d3a0:	sub	r3, r3, #1
   1d3a4:	add	r1, r5, r1, lsl #1
   1d3a8:	sub	r1, r0, r1
   1d3ac:	and	r3, r1, r3
   1d3b0:	add	r1, r3, r5
   1d3b4:	str	r1, [fp, #-24]	; 0xffffffe8
   1d3b8:	ldr	r1, [r4, #152]	; 0x98
   1d3bc:	cmp	r1, #0
   1d3c0:	mov	r1, #0
   1d3c4:	beq	1d3e4 <flatcc_builder_embed_buffer@@Base+0x9c>
   1d3c8:	mov	r1, #4
   1d3cc:	sub	r2, fp, #24
   1d3d0:	str	r1, [sp, #20]
   1d3d4:	str	r2, [sp, #16]
   1d3d8:	mov	r2, #1
   1d3dc:	str	r1, [sp, #8]
   1d3e0:	str	r2, [sp, #12]
   1d3e4:	cmp	r5, #0
   1d3e8:	beq	1d40c <flatcc_builder_embed_buffer@@Base+0xc4>
   1d3ec:	add	r6, sp, #8
   1d3f0:	add	r1, r1, r5
   1d3f4:	add	r6, r6, r2, lsl #3
   1d3f8:	add	r2, r2, #1
   1d3fc:	str	r1, [sp, #8]
   1d400:	str	r7, [r6, #8]
   1d404:	str	r5, [r6, #12]
   1d408:	str	r2, [sp, #12]
   1d40c:	cmp	r3, #0
   1d410:	beq	1d43c <flatcc_builder_embed_buffer@@Base+0xf4>
   1d414:	add	r7, sp, #8
   1d418:	movw	r6, #22036	; 0x5614
   1d41c:	add	r1, r1, r3
   1d420:	add	r7, r7, r2, lsl #3
   1d424:	movt	r6, #2
   1d428:	add	r2, r2, #1
   1d42c:	str	r1, [sp, #8]
   1d430:	str	r6, [r7, #8]
   1d434:	str	r3, [r7, #12]
   1d438:	str	r2, [sp, #12]
   1d43c:	cmp	r1, #0
   1d440:	ble	1d498 <flatcc_builder_embed_buffer@@Base+0x150>
   1d444:	sub	r5, r0, r1
   1d448:	ldr	r0, [r4, #36]	; 0x24
   1d44c:	ldr	r7, [r4, #44]	; 0x2c
   1d450:	str	r1, [sp]
   1d454:	add	r1, sp, #8
   1d458:	add	r1, r1, #8
   1d45c:	mov	r3, r5
   1d460:	blx	r7
   1d464:	cmp	r0, #0
   1d468:	streq	r5, [r4, #136]	; 0x88
   1d46c:	moveq	r0, r5
   1d470:	subeq	sp, fp, #16
   1d474:	popeq	{r4, r5, r6, r7, fp, pc}
   1d478:	movw	r0, #27084	; 0x69cc
   1d47c:	movw	r1, #22566	; 0x5826
   1d480:	movw	r3, #26763	; 0x688b
   1d484:	movw	r2, #651	; 0x28b
   1d488:	movt	r0, #2
   1d48c:	movt	r1, #2
   1d490:	movt	r3, #2
   1d494:	bl	12f88 <__assert_fail@plt>
   1d498:	movw	r0, #27084	; 0x69cc
   1d49c:	movw	r1, #22566	; 0x5826
   1d4a0:	movw	r3, #26763	; 0x688b
   1d4a4:	movw	r2, #647	; 0x287
   1d4a8:	b	1d488 <flatcc_builder_embed_buffer@@Base+0x140>
   1d4ac:	push	{r4, sl, fp, lr}
   1d4b0:	add	fp, sp, #8
   1d4b4:	sub	sp, sp, #80	; 0x50
   1d4b8:	cmp	r2, #0
   1d4bc:	bne	1d4cc <flatcc_builder_embed_buffer@@Base+0x184>
   1d4c0:	ldrh	r2, [r0, #132]	; 0x84
   1d4c4:	cmp	r2, #0
   1d4c8:	movweq	r2, #1
   1d4cc:	ldrh	r4, [r1]
   1d4d0:	cmp	r4, #4
   1d4d4:	movwcc	r4, #4
   1d4d8:	cmpcs	r4, r2
   1d4dc:	bcs	1d4ec <flatcc_builder_embed_buffer@@Base+0x1a4>
   1d4e0:	cmp	r4, r2
   1d4e4:	movcc	r4, r2
   1d4e8:	strh	r4, [r1]
   1d4ec:	cmp	r3, #0
   1d4f0:	bne	1d564 <flatcc_builder_embed_buffer@@Base+0x21c>
   1d4f4:	ldr	r4, [r0, #140]	; 0x8c
   1d4f8:	sub	r1, r2, #1
   1d4fc:	ands	r1, r4, r1
   1d500:	beq	1d564 <flatcc_builder_embed_buffer@@Base+0x21c>
   1d504:	movw	r2, #22036	; 0x5614
   1d508:	str	r1, [sp, #20]
   1d50c:	cmn	r1, #1
   1d510:	movt	r2, #2
   1d514:	str	r2, [sp, #16]
   1d518:	mov	r2, #1
   1d51c:	str	r1, [sp, #8]
   1d520:	str	r2, [sp, #12]
   1d524:	add	r2, r1, r4
   1d528:	str	r2, [r0, #140]	; 0x8c
   1d52c:	ble	1d56c <flatcc_builder_embed_buffer@@Base+0x224>
   1d530:	ldr	r2, [r0, #36]	; 0x24
   1d534:	ldr	ip, [r0, #44]	; 0x2c
   1d538:	add	r0, sp, #8
   1d53c:	str	r1, [sp]
   1d540:	mov	r3, r4
   1d544:	add	r1, r0, #8
   1d548:	mov	r0, r2
   1d54c:	mov	r2, #1
   1d550:	blx	ip
   1d554:	cmp	r0, #0
   1d558:	bne	1d580 <flatcc_builder_embed_buffer@@Base+0x238>
   1d55c:	cmn	r4, #1
   1d560:	beq	1d5a0 <flatcc_builder_embed_buffer@@Base+0x258>
   1d564:	sub	sp, fp, #8
   1d568:	pop	{r4, sl, fp, pc}
   1d56c:	movw	r0, #27084	; 0x69cc
   1d570:	movw	r1, #22566	; 0x5826
   1d574:	movw	r3, #26951	; 0x6947
   1d578:	movw	r2, #673	; 0x2a1
   1d57c:	b	1d590 <flatcc_builder_embed_buffer@@Base+0x248>
   1d580:	movw	r0, #27084	; 0x69cc
   1d584:	movw	r1, #22566	; 0x5826
   1d588:	movw	r3, #26951	; 0x6947
   1d58c:	movw	r2, #677	; 0x2a5
   1d590:	movt	r0, #2
   1d594:	movt	r1, #2
   1d598:	movt	r3, #2
   1d59c:	bl	12f88 <__assert_fail@plt>
   1d5a0:	movw	r0, #27084	; 0x69cc
   1d5a4:	movw	r1, #22566	; 0x5826
   1d5a8:	movw	r3, #26697	; 0x6849
   1d5ac:	movw	r2, #702	; 0x2be
   1d5b0:	movt	r0, #2
   1d5b4:	movt	r1, #2
   1d5b8:	movt	r3, #2
   1d5bc:	bl	12f88 <__assert_fail@plt>

0001d5c0 <flatcc_builder_create_buffer@@Base>:
   1d5c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5c4:	add	fp, sp, #28
   1d5c8:	sub	sp, sp, #100	; 0x64
   1d5cc:	ldr	sl, [fp, #12]
   1d5d0:	mov	r4, r0
   1d5d4:	ldr	r0, [fp, #8]
   1d5d8:	mov	r7, r1
   1d5dc:	mov	r5, #0
   1d5e0:	mov	r6, r3
   1d5e4:	sub	r1, fp, #30
   1d5e8:	str	r5, [sp, #12]
   1d5ec:	and	r9, sl, #1
   1d5f0:	strh	r0, [fp, #-30]	; 0xffffffe2
   1d5f4:	mov	r0, r4
   1d5f8:	mov	r3, r9
   1d5fc:	bl	1d4ac <flatcc_builder_embed_buffer@@Base+0x164>
   1d600:	ldrh	r0, [r4, #128]	; 0x80
   1d604:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   1d608:	str	r6, [sp, #8]
   1d60c:	cmp	r0, r1
   1d610:	strhcc	r1, [r4, #128]	; 0x80
   1d614:	cmp	r7, #0
   1d618:	beq	1d634 <flatcc_builder_create_buffer@@Base+0x74>
   1d61c:	ldr	r5, [r7]
   1d620:	cmp	r5, #0
   1d624:	str	r5, [sp, #12]
   1d628:	movwne	r5, #1
   1d62c:	lsl	r7, r5, #2
   1d630:	b	1d638 <flatcc_builder_create_buffer@@Base+0x78>
   1d634:	mov	r7, #0
   1d638:	ldr	r0, [r4, #136]	; 0x88
   1d63c:	and	r2, sl, #2
   1d640:	mov	r3, #0
   1d644:	sub	r6, r1, #1
   1d648:	ands	ip, sl, #3
   1d64c:	mov	sl, #4
   1d650:	mov	r1, #4
   1d654:	str	r3, [sp, #20]
   1d658:	str	r3, [sp, #16]
   1d65c:	sub	r2, r0, r2, lsl #1
   1d660:	sub	r2, r2, r7
   1d664:	sub	r2, r2, #4
   1d668:	beq	1d68c <flatcc_builder_create_buffer@@Base+0xcc>
   1d66c:	mov	r1, #4
   1d670:	sub	r3, fp, #40	; 0x28
   1d674:	str	r1, [sp, #28]
   1d678:	str	r3, [sp, #24]
   1d67c:	str	r1, [sp, #16]
   1d680:	mov	r3, #1
   1d684:	mov	r1, #8
   1d688:	str	r3, [sp, #20]
   1d68c:	add	lr, sp, #16
   1d690:	and	r6, r2, r6
   1d694:	sub	r8, fp, #36	; 0x24
   1d698:	str	r1, [sp, #16]
   1d69c:	cmp	r5, #0
   1d6a0:	add	r2, lr, r3, lsl #3
   1d6a4:	str	r8, [r2, #8]
   1d6a8:	str	sl, [r2, #12]
   1d6ac:	add	r2, r3, #1
   1d6b0:	str	r2, [sp, #20]
   1d6b4:	beq	1d6d8 <flatcc_builder_create_buffer@@Base+0x118>
   1d6b8:	add	r2, lr, r2, lsl #3
   1d6bc:	add	r1, r1, r7
   1d6c0:	add	r5, sp, #12
   1d6c4:	str	r1, [sp, #16]
   1d6c8:	str	r5, [r2, #8]
   1d6cc:	str	r7, [r2, #12]
   1d6d0:	orr	r2, r3, #2
   1d6d4:	str	r2, [sp, #20]
   1d6d8:	cmp	r6, #0
   1d6dc:	beq	1d704 <flatcc_builder_create_buffer@@Base+0x144>
   1d6e0:	movw	r5, #22036	; 0x5614
   1d6e4:	add	r3, lr, r2, lsl #3
   1d6e8:	add	r1, r1, r6
   1d6ec:	add	r2, r2, #1
   1d6f0:	movt	r5, #2
   1d6f4:	str	r1, [sp, #16]
   1d6f8:	str	r5, [r3, #8]
   1d6fc:	str	r6, [r3, #12]
   1d700:	str	r2, [sp, #20]
   1d704:	sub	r7, r0, r1
   1d708:	cmp	ip, #0
   1d70c:	mov	r6, #144	; 0x90
   1d710:	ldr	r3, [sp, #8]
   1d714:	mov	r0, r7
   1d718:	addne	r0, r0, #4
   1d71c:	cmp	r9, #0
   1d720:	movweq	r6, #140	; 0x8c
   1d724:	cmp	r1, #0
   1d728:	ldr	r6, [r4, r6]
   1d72c:	sub	r3, r3, r0
   1d730:	str	r3, [fp, #-36]	; 0xffffffdc
   1d734:	sub	r0, r6, r0
   1d738:	str	r0, [fp, #-40]	; 0xffffffd8
   1d73c:	ble	1d794 <flatcc_builder_create_buffer@@Base+0x1d4>
   1d740:	ldr	r0, [r4, #36]	; 0x24
   1d744:	ldr	r6, [r4, #44]	; 0x2c
   1d748:	str	r1, [sp]
   1d74c:	add	r1, lr, #8
   1d750:	mov	r3, r7
   1d754:	blx	r6
   1d758:	cmp	r0, #0
   1d75c:	bne	1d7a8 <flatcc_builder_create_buffer@@Base+0x1e8>
   1d760:	cmp	r7, #0
   1d764:	str	r7, [r4, #136]	; 0x88
   1d768:	movne	r0, r7
   1d76c:	subne	sp, fp, #28
   1d770:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d774:	movw	r0, #27084	; 0x69cc
   1d778:	movw	r1, #22566	; 0x5826
   1d77c:	movw	r3, #22881	; 0x5961
   1d780:	mov	r2, #772	; 0x304
   1d784:	movt	r0, #2
   1d788:	movt	r1, #2
   1d78c:	movt	r3, #2
   1d790:	bl	12f88 <__assert_fail@plt>
   1d794:	movw	r0, #27084	; 0x69cc
   1d798:	movw	r1, #22566	; 0x5826
   1d79c:	movw	r3, #26763	; 0x688b
   1d7a0:	movw	r2, #647	; 0x287
   1d7a4:	b	1d7b8 <flatcc_builder_create_buffer@@Base+0x1f8>
   1d7a8:	movw	r0, #27084	; 0x69cc
   1d7ac:	movw	r1, #22566	; 0x5826
   1d7b0:	movw	r3, #26763	; 0x688b
   1d7b4:	movw	r2, #651	; 0x28b
   1d7b8:	movt	r0, #2
   1d7bc:	movt	r1, #2
   1d7c0:	movt	r3, #2
   1d7c4:	bl	12f88 <__assert_fail@plt>

0001d7c8 <flatcc_builder_create_struct@@Base>:
   1d7c8:	push	{r4, r5, r6, sl, fp, lr}
   1d7cc:	add	fp, sp, #16
   1d7d0:	sub	sp, sp, #80	; 0x50
   1d7d4:	cmp	r3, #0
   1d7d8:	beq	1d8b0 <flatcc_builder_create_struct@@Base+0xe8>
   1d7dc:	mov	r5, r0
   1d7e0:	ldrh	r0, [r0, #128]	; 0x80
   1d7e4:	mov	r4, #0
   1d7e8:	cmp	r0, r3
   1d7ec:	strhcc	r3, [r5, #128]	; 0x80
   1d7f0:	sub	r3, r3, #1
   1d7f4:	cmp	r2, #0
   1d7f8:	ldr	r0, [r5, #136]	; 0x88
   1d7fc:	str	r4, [sp, #12]
   1d800:	str	r4, [sp, #8]
   1d804:	movne	r4, #1
   1d808:	strne	r2, [sp, #20]
   1d80c:	strne	r1, [sp, #16]
   1d810:	strne	r2, [sp, #8]
   1d814:	strne	r4, [sp, #12]
   1d818:	sub	r6, r0, r2
   1d81c:	and	r3, r6, r3
   1d820:	cmp	r3, #0
   1d824:	beq	1d850 <flatcc_builder_create_struct@@Base+0x88>
   1d828:	add	r1, sp, #8
   1d82c:	movw	r6, #22036	; 0x5614
   1d830:	add	r2, r3, r2
   1d834:	add	r1, r1, r4, lsl #3
   1d838:	movt	r6, #2
   1d83c:	add	r4, r4, #1
   1d840:	str	r2, [sp, #8]
   1d844:	str	r6, [r1, #8]
   1d848:	str	r3, [r1, #12]
   1d84c:	str	r4, [sp, #12]
   1d850:	cmp	r2, #0
   1d854:	ble	1d8d0 <flatcc_builder_create_struct@@Base+0x108>
   1d858:	sub	r6, r0, r2
   1d85c:	ldr	r0, [r5, #36]	; 0x24
   1d860:	ldr	ip, [r5, #44]	; 0x2c
   1d864:	add	r1, sp, #8
   1d868:	str	r2, [sp]
   1d86c:	mov	r2, r4
   1d870:	add	r1, r1, #8
   1d874:	mov	r3, r6
   1d878:	blx	ip
   1d87c:	cmp	r0, #0
   1d880:	streq	r6, [r5, #136]	; 0x88
   1d884:	moveq	r0, r6
   1d888:	subeq	sp, fp, #16
   1d88c:	popeq	{r4, r5, r6, sl, fp, pc}
   1d890:	movw	r0, #27084	; 0x69cc
   1d894:	movw	r1, #22566	; 0x5826
   1d898:	movw	r3, #26763	; 0x688b
   1d89c:	movw	r2, #651	; 0x28b
   1d8a0:	movt	r0, #2
   1d8a4:	movt	r1, #2
   1d8a8:	movt	r3, #2
   1d8ac:	bl	12f88 <__assert_fail@plt>
   1d8b0:	movw	r0, #23012	; 0x59e4
   1d8b4:	movw	r1, #22566	; 0x5826
   1d8b8:	movw	r3, #23023	; 0x59ef
   1d8bc:	movw	r2, #783	; 0x30f
   1d8c0:	movt	r0, #2
   1d8c4:	movt	r1, #2
   1d8c8:	movt	r3, #2
   1d8cc:	bl	12f88 <__assert_fail@plt>
   1d8d0:	movw	r0, #27084	; 0x69cc
   1d8d4:	movw	r1, #22566	; 0x5826
   1d8d8:	movw	r3, #26763	; 0x688b
   1d8dc:	movw	r2, #647	; 0x287
   1d8e0:	b	1d8a0 <flatcc_builder_create_struct@@Base+0xd8>

0001d8e4 <flatcc_builder_start_buffer@@Base>:
   1d8e4:	push	{r4, r5, r6, r7, fp, lr}
   1d8e8:	add	fp, sp, #16
   1d8ec:	mov	r5, r1
   1d8f0:	ldrh	r1, [r0, #128]	; 0x80
   1d8f4:	mov	r6, r3
   1d8f8:	mov	r7, r2
   1d8fc:	mov	r4, r0
   1d900:	bl	1d9a0 <flatcc_builder_start_buffer@@Base+0xbc>
   1d904:	mov	r1, r0
   1d908:	mvn	r0, #0
   1d90c:	cmp	r1, #0
   1d910:	popne	{r4, r5, r6, r7, fp, pc}
   1d914:	mov	r0, #1
   1d918:	cmp	r5, #0
   1d91c:	strh	r0, [r4, #128]	; 0x80
   1d920:	ldrh	r1, [r4, #132]	; 0x84
   1d924:	ldr	r2, [r4, #32]
   1d928:	strh	r1, [r2, #34]	; 0x22
   1d92c:	strh	r7, [r4, #132]	; 0x84
   1d930:	ldrh	r1, [r4, #164]	; 0xa4
   1d934:	ldr	r2, [r4, #32]
   1d938:	strh	r1, [r2, #32]
   1d93c:	strh	r6, [r4, #164]	; 0xa4
   1d940:	ldr	r1, [r4, #32]
   1d944:	ldr	r2, [r4, #144]	; 0x90
   1d948:	str	r2, [r1, #20]
   1d94c:	ldr	r1, [r4, #32]
   1d950:	ldr	r2, [r4, #152]	; 0x98
   1d954:	str	r2, [r1, #28]
   1d958:	ldr	r3, [r4, #148]	; 0x94
   1d95c:	ldr	r1, [r4, #32]
   1d960:	ldr	r2, [r4, #136]	; 0x88
   1d964:	ldr	r7, [r4, #168]	; 0xa8
   1d968:	add	r6, r3, #1
   1d96c:	str	r2, [r4, #144]	; 0x90
   1d970:	str	r6, [r4, #148]	; 0x94
   1d974:	str	r3, [r4, #152]	; 0x98
   1d978:	str	r7, [r1, #16]
   1d97c:	movw	r1, #22036	; 0x5614
   1d980:	movt	r1, #2
   1d984:	movne	r1, r5
   1d988:	ldr	r1, [r1]
   1d98c:	str	r1, [r4, #168]	; 0xa8
   1d990:	ldr	r1, [r4, #32]
   1d994:	strh	r0, [r1, #14]
   1d998:	mov	r0, #0
   1d99c:	pop	{r4, r5, r6, r7, fp, pc}
   1d9a0:	push	{r4, r5, r6, r7, fp, lr}
   1d9a4:	add	fp, sp, #16
   1d9a8:	sub	sp, sp, #8
   1d9ac:	mov	r5, r1
   1d9b0:	ldr	r1, [r0, #156]	; 0x9c
   1d9b4:	ldr	r2, [r0, #160]	; 0xa0
   1d9b8:	mov	r4, r0
   1d9bc:	add	r0, r1, #1
   1d9c0:	cmp	r1, r2
   1d9c4:	str	r0, [r4, #156]	; 0x9c
   1d9c8:	bge	1d9dc <flatcc_builder_start_buffer@@Base+0xf8>
   1d9cc:	ldr	r0, [r4, #32]
   1d9d0:	add	r0, r0, #36	; 0x24
   1d9d4:	str	r0, [r4, #32]
   1d9d8:	b	1da70 <flatcc_builder_start_buffer@@Base+0x18c>
   1d9dc:	ldr	r2, [r4, #176]	; 0xb0
   1d9e0:	mvn	r6, #0
   1d9e4:	cmp	r2, #1
   1d9e8:	cmpge	r1, r2
   1d9ec:	bge	1daa8 <flatcc_builder_start_buffer@@Base+0x1c4>
   1d9f0:	add	r7, r0, r0, lsl #3
   1d9f4:	ldr	r0, [r4, #88]	; 0x58
   1d9f8:	lsl	r2, r7, #2
   1d9fc:	cmp	r2, r0
   1da00:	bls	1da28 <flatcc_builder_start_buffer@@Base+0x144>
   1da04:	ldr	r0, [r4, #40]	; 0x28
   1da08:	ldr	ip, [r4, #48]	; 0x30
   1da0c:	mov	r3, #4
   1da10:	add	r1, r4, #84	; 0x54
   1da14:	str	r3, [sp]
   1da18:	mov	r3, #0
   1da1c:	blx	ip
   1da20:	cmp	r0, #0
   1da24:	bne	1dab4 <flatcc_builder_start_buffer@@Base+0x1d0>
   1da28:	ldr	r1, [r4, #84]	; 0x54
   1da2c:	mvn	r0, #35	; 0x23
   1da30:	add	r0, r0, r7, lsl #2
   1da34:	adds	r0, r0, r1
   1da38:	str	r0, [r4, #32]
   1da3c:	beq	1daa8 <flatcc_builder_start_buffer@@Base+0x1c4>
   1da40:	ldr	r1, [r4, #88]	; 0x58
   1da44:	movw	r3, #36409	; 0x8e39
   1da48:	ldr	r2, [r4, #176]	; 0xb0
   1da4c:	movt	r3, #14563	; 0x38e3
   1da50:	umull	r1, r3, r1, r3
   1da54:	cmp	r2, r3, lsr #3
   1da58:	lsr	r1, r3, #3
   1da5c:	mov	r3, r1
   1da60:	movlt	r3, r2
   1da64:	cmp	r2, #0
   1da68:	movle	r3, r1
   1da6c:	str	r3, [r4, #160]	; 0xa0
   1da70:	ldr	r1, [r4, #20]
   1da74:	mvn	r3, #3
   1da78:	mov	r6, #0
   1da7c:	str	r1, [r0, #8]
   1da80:	ldrh	r2, [r4, #130]	; 0x82
   1da84:	strh	r2, [r0, #12]
   1da88:	strh	r5, [r4, #130]	; 0x82
   1da8c:	ldr	r2, [r4, #28]
   1da90:	stm	r0, {r2, r3}
   1da94:	add	r0, r1, r2
   1da98:	str	r6, [r4, #20]
   1da9c:	add	r0, r0, #7
   1daa0:	bic	r0, r0, #7
   1daa4:	str	r0, [r4, #28]
   1daa8:	mov	r0, r6
   1daac:	sub	sp, fp, #16
   1dab0:	pop	{r4, r5, r6, r7, fp, pc}
   1dab4:	movw	r0, #27084	; 0x69cc
   1dab8:	movw	r1, #22566	; 0x5826
   1dabc:	movw	r3, #26630	; 0x6806
   1dac0:	mov	r2, #308	; 0x134
   1dac4:	movt	r0, #2
   1dac8:	movt	r1, #2
   1dacc:	movt	r3, #2
   1dad0:	bl	12f88 <__assert_fail@plt>

0001dad4 <flatcc_builder_end_buffer@@Base>:
   1dad4:	push	{r4, r5, r6, sl, fp, lr}
   1dad8:	add	fp, sp, #16
   1dadc:	sub	sp, sp, #8
   1dae0:	mov	r4, r0
   1dae4:	ldr	r0, [r0, #32]
   1dae8:	ldrh	r0, [r0, #14]
   1daec:	cmp	r0, #1
   1daf0:	bne	1dbe4 <flatcc_builder_end_buffer@@Base+0x110>
   1daf4:	mov	r3, r1
   1daf8:	ldr	r1, [r4, #152]	; 0x98
   1dafc:	ldrh	r0, [r4, #164]	; 0xa4
   1db00:	ldrh	r2, [r4, #132]	; 0x84
   1db04:	cmp	r1, #0
   1db08:	ldrh	r1, [r4, #128]	; 0x80
   1db0c:	and	r0, r0, #2
   1db10:	orrne	r0, r0, #1
   1db14:	cmp	r1, r2
   1db18:	movcc	r1, r2
   1db1c:	strhcc	r2, [r4, #128]	; 0x80
   1db20:	str	r0, [sp, #4]
   1db24:	mov	r0, r4
   1db28:	str	r1, [sp]
   1db2c:	add	r1, r4, #168	; 0xa8
   1db30:	bl	1d5c0 <flatcc_builder_create_buffer@@Base>
   1db34:	mov	r6, r0
   1db38:	cmp	r0, #0
   1db3c:	beq	1dbd8 <flatcc_builder_end_buffer@@Base+0x104>
   1db40:	ldr	r1, [r4, #32]
   1db44:	ldr	r0, [r4, #16]
   1db48:	ldr	r2, [r4, #20]
   1db4c:	ldr	r3, [r1, #20]
   1db50:	str	r3, [r4, #144]	; 0x90
   1db54:	ldr	r3, [r1, #28]
   1db58:	str	r3, [r4, #152]	; 0x98
   1db5c:	ldr	r3, [r1, #16]
   1db60:	str	r3, [r4, #168]	; 0xa8
   1db64:	ldrh	r1, [r1, #32]
   1db68:	strh	r1, [r4, #164]	; 0xa4
   1db6c:	mov	r1, #0
   1db70:	bl	12f40 <memset@plt>
   1db74:	ldr	r0, [r4, #32]
   1db78:	ldr	r1, [r4, #60]	; 0x3c
   1db7c:	ldr	r2, [r4, #64]	; 0x40
   1db80:	ldr	r3, [r0, #8]
   1db84:	str	r3, [r4, #20]
   1db88:	ldr	r3, [r0]
   1db8c:	str	r3, [r4, #28]
   1db90:	add	r1, r1, r3
   1db94:	ldr	r5, [r0, #4]
   1db98:	str	r1, [r4, #16]
   1db9c:	sub	r1, r2, r3
   1dba0:	cmp	r1, r5
   1dba4:	movhi	r1, r5
   1dba8:	str	r1, [r4, #24]
   1dbac:	ldrh	r1, [r4, #130]	; 0x82
   1dbb0:	ldrh	r2, [r4, #128]	; 0x80
   1dbb4:	cmp	r2, r1
   1dbb8:	strhcc	r1, [r4, #128]	; 0x80
   1dbbc:	ldrh	r1, [r0, #12]
   1dbc0:	sub	r0, r0, #36	; 0x24
   1dbc4:	str	r0, [r4, #32]
   1dbc8:	strh	r1, [r4, #130]	; 0x82
   1dbcc:	ldr	r0, [r4, #156]	; 0x9c
   1dbd0:	sub	r0, r0, #1
   1dbd4:	str	r0, [r4, #156]	; 0x9c
   1dbd8:	mov	r0, r6
   1dbdc:	sub	sp, fp, #16
   1dbe0:	pop	{r4, r5, r6, sl, fp, pc}
   1dbe4:	movw	r0, #23125	; 0x5a55
   1dbe8:	movw	r1, #22566	; 0x5826
   1dbec:	movw	r3, #23169	; 0x5a81
   1dbf0:	movw	r2, #838	; 0x346
   1dbf4:	movt	r0, #2
   1dbf8:	movt	r1, #2
   1dbfc:	movt	r3, #2
   1dc00:	bl	12f88 <__assert_fail@plt>

0001dc04 <flatcc_builder_start_struct@@Base>:
   1dc04:	push	{r4, r5, r6, r7, fp, lr}
   1dc08:	add	fp, sp, #16
   1dc0c:	mov	r6, r1
   1dc10:	mov	r1, r2
   1dc14:	mov	r4, r0
   1dc18:	bl	1d9a0 <flatcc_builder_start_buffer@@Base+0xbc>
   1dc1c:	mov	r5, #0
   1dc20:	cmp	r0, #0
   1dc24:	bne	1dc94 <flatcc_builder_start_struct@@Base+0x90>
   1dc28:	ldr	r1, [r4, #32]
   1dc2c:	mov	r0, #2
   1dc30:	strh	r0, [r1, #14]
   1dc34:	ldr	r2, [r4, #28]
   1dc38:	ldr	r0, [r4, #60]	; 0x3c
   1dc3c:	ldr	r3, [r4, #64]	; 0x40
   1dc40:	add	r0, r0, r2
   1dc44:	sub	r2, r3, r2
   1dc48:	mvn	r3, #3
   1dc4c:	cmn	r2, #4
   1dc50:	str	r0, [r4, #16]
   1dc54:	movcs	r2, r3
   1dc58:	str	r2, [r4, #24]
   1dc5c:	str	r3, [r1, #4]
   1dc60:	ldr	r7, [r4, #20]
   1dc64:	add	r1, r7, r6
   1dc68:	cmp	r1, r2
   1dc6c:	str	r1, [r4, #20]
   1dc70:	bcc	1dc90 <flatcc_builder_start_struct@@Base+0x8c>
   1dc74:	add	r1, r1, #1
   1dc78:	mov	r0, r4
   1dc7c:	mvn	r2, #3
   1dc80:	bl	20a14 <flatcc_builder_get_emit_context@@Base+0x8>
   1dc84:	cmp	r0, #0
   1dc88:	bne	1dc94 <flatcc_builder_start_struct@@Base+0x90>
   1dc8c:	ldr	r0, [r4, #16]
   1dc90:	add	r5, r0, r7
   1dc94:	mov	r0, r5
   1dc98:	pop	{r4, r5, r6, r7, fp, pc}

0001dc9c <flatcc_builder_struct_edit@@Base>:
   1dc9c:	ldr	r0, [r0, #16]
   1dca0:	bx	lr

0001dca4 <flatcc_builder_end_struct@@Base>:
   1dca4:	push	{r4, r5, fp, lr}
   1dca8:	add	fp, sp, #8
   1dcac:	mov	r4, r0
   1dcb0:	ldr	r0, [r0, #32]
   1dcb4:	ldrh	r0, [r0, #14]
   1dcb8:	cmp	r0, #2
   1dcbc:	bne	1dd5c <flatcc_builder_end_struct@@Base+0xb8>
   1dcc0:	ldrh	r3, [r4, #130]	; 0x82
   1dcc4:	ldr	r1, [r4, #16]
   1dcc8:	ldr	r2, [r4, #20]
   1dccc:	mov	r0, r4
   1dcd0:	bl	1d7c8 <flatcc_builder_create_struct@@Base>
   1dcd4:	mov	r5, r0
   1dcd8:	cmp	r0, #0
   1dcdc:	beq	1dd54 <flatcc_builder_end_struct@@Base+0xb0>
   1dce0:	ldr	r0, [r4, #16]
   1dce4:	ldr	r2, [r4, #20]
   1dce8:	mov	r1, #0
   1dcec:	bl	12f40 <memset@plt>
   1dcf0:	ldr	r0, [r4, #32]
   1dcf4:	ldr	r1, [r4, #60]	; 0x3c
   1dcf8:	ldr	ip, [r4, #64]	; 0x40
   1dcfc:	ldr	r3, [r0, #8]
   1dd00:	str	r3, [r4, #20]
   1dd04:	ldr	r3, [r0]
   1dd08:	str	r3, [r4, #28]
   1dd0c:	add	r1, r1, r3
   1dd10:	ldr	r2, [r0, #4]
   1dd14:	str	r1, [r4, #16]
   1dd18:	sub	r1, ip, r3
   1dd1c:	cmp	r1, r2
   1dd20:	movhi	r1, r2
   1dd24:	str	r1, [r4, #24]
   1dd28:	ldrh	r1, [r4, #130]	; 0x82
   1dd2c:	ldrh	r2, [r4, #128]	; 0x80
   1dd30:	cmp	r2, r1
   1dd34:	strhcc	r1, [r4, #128]	; 0x80
   1dd38:	ldrh	r1, [r0, #12]
   1dd3c:	sub	r0, r0, #36	; 0x24
   1dd40:	str	r0, [r4, #32]
   1dd44:	strh	r1, [r4, #130]	; 0x82
   1dd48:	ldr	r0, [r4, #156]	; 0x9c
   1dd4c:	sub	r0, r0, #1
   1dd50:	str	r0, [r4, #156]	; 0x9c
   1dd54:	mov	r0, r5
   1dd58:	pop	{r4, r5, fp, pc}
   1dd5c:	movw	r0, #23258	; 0x5ada
   1dd60:	movw	r1, #22566	; 0x5826
   1dd64:	movw	r3, #23302	; 0x5b06
   1dd68:	mov	r2, #872	; 0x368
   1dd6c:	movt	r0, #2
   1dd70:	movt	r1, #2
   1dd74:	movt	r3, #2
   1dd78:	bl	12f88 <__assert_fail@plt>

0001dd7c <flatcc_builder_extend_vector@@Base>:
   1dd7c:	push	{r4, r5, fp, lr}
   1dd80:	add	fp, sp, #8
   1dd84:	mov	r4, r0
   1dd88:	ldr	r0, [r0, #32]
   1dd8c:	ldr	r2, [r0, #20]
   1dd90:	adds	r2, r2, r1
   1dd94:	bcs	1ddf4 <flatcc_builder_extend_vector@@Base+0x78>
   1dd98:	ldr	r3, [r0, #24]
   1dd9c:	cmp	r2, r3
   1dda0:	bhi	1ddf4 <flatcc_builder_extend_vector@@Base+0x78>
   1dda4:	str	r2, [r0, #20]
   1dda8:	ldr	r0, [r4, #32]
   1ddac:	ldr	r5, [r4, #20]
   1ddb0:	ldr	r2, [r4, #24]
   1ddb4:	ldr	r0, [r0, #16]
   1ddb8:	mla	r0, r0, r1, r5
   1ddbc:	cmp	r0, r2
   1ddc0:	str	r0, [r4, #20]
   1ddc4:	bcc	1dde8 <flatcc_builder_extend_vector@@Base+0x6c>
   1ddc8:	add	r1, r0, #1
   1ddcc:	mov	r0, r4
   1ddd0:	mvn	r2, #3
   1ddd4:	bl	20a14 <flatcc_builder_get_emit_context@@Base+0x8>
   1ddd8:	mov	r1, r0
   1dddc:	mov	r0, #0
   1dde0:	cmp	r1, #0
   1dde4:	popne	{r4, r5, fp, pc}
   1dde8:	ldr	r0, [r4, #16]
   1ddec:	add	r0, r0, r5
   1ddf0:	pop	{r4, r5, fp, pc}
   1ddf4:	movw	r0, #26837	; 0x68d5
   1ddf8:	movw	r1, #22566	; 0x5826
   1ddfc:	movw	r3, #26864	; 0x68f0
   1de00:	mov	r2, #892	; 0x37c
   1de04:	movt	r0, #2
   1de08:	movt	r1, #2
   1de0c:	movt	r3, #2
   1de10:	bl	12f88 <__assert_fail@plt>

0001de14 <flatcc_builder_vector_push@@Base>:
   1de14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1de18:	add	fp, sp, #24
   1de1c:	mov	r5, r0
   1de20:	ldr	r0, [r0, #32]
   1de24:	mov	r8, r1
   1de28:	ldrh	r1, [r0, #14]
   1de2c:	cmp	r1, #4
   1de30:	bne	1deb4 <flatcc_builder_vector_push@@Base+0xa0>
   1de34:	ldr	r1, [r0, #20]
   1de38:	ldr	r2, [r0, #24]
   1de3c:	cmp	r1, r2
   1de40:	bhi	1decc <flatcc_builder_vector_push@@Base+0xb8>
   1de44:	add	r1, r1, #1
   1de48:	str	r1, [r0, #20]
   1de4c:	ldr	r0, [r5, #32]
   1de50:	ldr	r4, [r5, #20]
   1de54:	ldr	r1, [r5, #24]
   1de58:	ldr	r6, [r0, #16]
   1de5c:	add	r0, r4, r6
   1de60:	cmp	r0, r1
   1de64:	str	r0, [r5, #20]
   1de68:	bcc	1de88 <flatcc_builder_vector_push@@Base+0x74>
   1de6c:	add	r1, r0, #1
   1de70:	mov	r0, r5
   1de74:	mvn	r2, #3
   1de78:	bl	20a14 <flatcc_builder_get_emit_context@@Base+0x8>
   1de7c:	mov	r7, #0
   1de80:	cmp	r0, #0
   1de84:	bne	1deac <flatcc_builder_vector_push@@Base+0x98>
   1de88:	ldr	r0, [r5, #16]
   1de8c:	adds	r7, r0, r4
   1de90:	beq	1dea8 <flatcc_builder_vector_push@@Base+0x94>
   1de94:	mov	r0, r7
   1de98:	mov	r1, r8
   1de9c:	mov	r2, r6
   1dea0:	bl	12eb0 <memcpy@plt>
   1dea4:	b	1deac <flatcc_builder_vector_push@@Base+0x98>
   1dea8:	mov	r7, #0
   1deac:	mov	r0, r7
   1deb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1deb4:	movw	r0, #23369	; 0x5b49
   1deb8:	movw	r1, #22566	; 0x5826
   1debc:	movw	r3, #23413	; 0x5b75
   1dec0:	movw	r2, #907	; 0x38b
   1dec4:	movt	r0, #2
   1dec8:	b	1dee0 <flatcc_builder_vector_push@@Base+0xcc>
   1decc:	movw	r0, #23480	; 0x5bb8
   1ded0:	movw	r1, #22566	; 0x5826
   1ded4:	movw	r3, #23413	; 0x5b75
   1ded8:	mov	r2, #908	; 0x38c
   1dedc:	movt	r0, #2
   1dee0:	movt	r1, #2
   1dee4:	movt	r3, #2
   1dee8:	bl	12f88 <__assert_fail@plt>

0001deec <flatcc_builder_append_vector@@Base>:
   1deec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1def0:	add	fp, sp, #24
   1def4:	mov	r6, r0
   1def8:	ldr	r0, [r0, #32]
   1defc:	mov	r8, r1
   1df00:	ldrh	r1, [r0, #14]
   1df04:	cmp	r1, #4
   1df08:	bne	1dfb4 <flatcc_builder_append_vector@@Base+0xc8>
   1df0c:	ldr	r1, [r0, #20]
   1df10:	mov	r9, r2
   1df14:	adds	r1, r1, r2
   1df18:	bcs	1df94 <flatcc_builder_append_vector@@Base+0xa8>
   1df1c:	ldr	r2, [r0, #24]
   1df20:	cmp	r1, r2
   1df24:	bhi	1df94 <flatcc_builder_append_vector@@Base+0xa8>
   1df28:	str	r1, [r0, #20]
   1df2c:	ldr	r0, [r6, #32]
   1df30:	ldr	r4, [r6, #20]
   1df34:	ldr	r1, [r6, #24]
   1df38:	ldr	r5, [r0, #16]
   1df3c:	mla	r0, r5, r9, r4
   1df40:	cmp	r0, r1
   1df44:	str	r0, [r6, #20]
   1df48:	bcc	1df68 <flatcc_builder_append_vector@@Base+0x7c>
   1df4c:	add	r1, r0, #1
   1df50:	mov	r0, r6
   1df54:	mvn	r2, #3
   1df58:	bl	20a14 <flatcc_builder_get_emit_context@@Base+0x8>
   1df5c:	mov	r7, #0
   1df60:	cmp	r0, #0
   1df64:	bne	1df8c <flatcc_builder_append_vector@@Base+0xa0>
   1df68:	ldr	r0, [r6, #16]
   1df6c:	adds	r7, r0, r4
   1df70:	beq	1df88 <flatcc_builder_append_vector@@Base+0x9c>
   1df74:	mul	r2, r5, r9
   1df78:	mov	r0, r7
   1df7c:	mov	r1, r8
   1df80:	bl	12eb0 <memcpy@plt>
   1df84:	b	1df8c <flatcc_builder_append_vector@@Base+0xa0>
   1df88:	mov	r7, #0
   1df8c:	mov	r0, r7
   1df90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1df94:	movw	r0, #26837	; 0x68d5
   1df98:	movw	r1, #22566	; 0x5826
   1df9c:	movw	r3, #26864	; 0x68f0
   1dfa0:	mov	r2, #892	; 0x37c
   1dfa4:	movt	r0, #2
   1dfa8:	movt	r1, #2
   1dfac:	movt	r3, #2
   1dfb0:	bl	12f88 <__assert_fail@plt>
   1dfb4:	movw	r0, #23369	; 0x5b49
   1dfb8:	movw	r1, #22566	; 0x5826
   1dfbc:	movw	r3, #23541	; 0x5bf5
   1dfc0:	movw	r2, #915	; 0x393
   1dfc4:	movt	r0, #2
   1dfc8:	movt	r1, #2
   1dfcc:	movt	r3, #2
   1dfd0:	bl	12f88 <__assert_fail@plt>

0001dfd4 <flatcc_builder_extend_offset_vector@@Base>:
   1dfd4:	push	{r4, r5, fp, lr}
   1dfd8:	add	fp, sp, #8
   1dfdc:	mov	r4, r0
   1dfe0:	ldr	r0, [r0, #32]
   1dfe4:	ldr	r2, [r0, #20]
   1dfe8:	adds	r2, r2, r1
   1dfec:	cmpcc	r2, #1073741824	; 0x40000000
   1dff0:	bcc	1e014 <flatcc_builder_extend_offset_vector@@Base+0x40>
   1dff4:	movw	r0, #26837	; 0x68d5
   1dff8:	movw	r1, #22566	; 0x5826
   1dffc:	movw	r3, #26864	; 0x68f0
   1e000:	mov	r2, #892	; 0x37c
   1e004:	movt	r0, #2
   1e008:	movt	r1, #2
   1e00c:	movt	r3, #2
   1e010:	bl	12f88 <__assert_fail@plt>
   1e014:	str	r2, [r0, #20]
   1e018:	ldr	r5, [r4, #20]
   1e01c:	ldr	r2, [r4, #24]
   1e020:	add	r0, r5, r1, lsl #2
   1e024:	cmp	r0, r2
   1e028:	str	r0, [r4, #20]
   1e02c:	bcc	1e050 <flatcc_builder_extend_offset_vector@@Base+0x7c>
   1e030:	add	r1, r0, #1
   1e034:	mov	r0, r4
   1e038:	mvn	r2, #3
   1e03c:	bl	20a14 <flatcc_builder_get_emit_context@@Base+0x8>
   1e040:	mov	r1, r0
   1e044:	mov	r0, #0
   1e048:	cmp	r1, #0
   1e04c:	popne	{r4, r5, fp, pc}
   1e050:	ldr	r0, [r4, #16]
   1e054:	add	r0, r0, r5
   1e058:	pop	{r4, r5, fp, pc}

0001e05c <flatcc_builder_offset_vector_push@@Base>:
   1e05c:	push	{r4, r5, r6, r7, fp, lr}
   1e060:	add	fp, sp, #16
   1e064:	mov	r6, r0
   1e068:	ldr	r0, [r0, #32]
   1e06c:	mov	r4, r1
   1e070:	ldrh	r1, [r0, #14]
   1e074:	cmp	r1, #5
   1e078:	bne	1e0dc <flatcc_builder_offset_vector_push@@Base+0x80>
   1e07c:	ldr	r1, [r0, #20]
   1e080:	mov	r5, #0
   1e084:	cmn	r1, #-1073741823	; 0xc0000001
   1e088:	beq	1e0d4 <flatcc_builder_offset_vector_push@@Base+0x78>
   1e08c:	add	r1, r1, #1
   1e090:	str	r1, [r0, #20]
   1e094:	ldr	r7, [r6, #20]
   1e098:	ldr	r0, [r6, #24]
   1e09c:	add	r1, r7, #4
   1e0a0:	cmp	r1, r0
   1e0a4:	str	r1, [r6, #20]
   1e0a8:	bcc	1e0c4 <flatcc_builder_offset_vector_push@@Base+0x68>
   1e0ac:	add	r1, r7, #5
   1e0b0:	mov	r0, r6
   1e0b4:	mvn	r2, #3
   1e0b8:	bl	20a14 <flatcc_builder_get_emit_context@@Base+0x8>
   1e0bc:	cmp	r0, #0
   1e0c0:	bne	1e0d4 <flatcc_builder_offset_vector_push@@Base+0x78>
   1e0c4:	ldr	r0, [r6, #16]
   1e0c8:	adds	r0, r0, r7
   1e0cc:	movne	r5, r0
   1e0d0:	strne	r4, [r0]
   1e0d4:	mov	r0, r5
   1e0d8:	pop	{r4, r5, r6, r7, fp, pc}
   1e0dc:	movw	r0, #23618	; 0x5c42
   1e0e0:	movw	r1, #22566	; 0x5826
   1e0e4:	movw	r3, #23669	; 0x5c75
   1e0e8:	movw	r2, #934	; 0x3a6
   1e0ec:	movt	r0, #2
   1e0f0:	movt	r1, #2
   1e0f4:	movt	r3, #2
   1e0f8:	bl	12f88 <__assert_fail@plt>

0001e0fc <flatcc_builder_append_offset_vector@@Base>:
   1e0fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e100:	add	fp, sp, #24
   1e104:	mov	r6, r0
   1e108:	ldr	r0, [r0, #32]
   1e10c:	mov	r8, r1
   1e110:	ldrh	r1, [r0, #14]
   1e114:	cmp	r1, #5
   1e118:	bne	1e1b4 <flatcc_builder_append_offset_vector@@Base+0xb8>
   1e11c:	ldr	r1, [r0, #20]
   1e120:	mov	r5, r2
   1e124:	adds	r1, r1, r2
   1e128:	cmpcc	r1, #1073741824	; 0x40000000
   1e12c:	bcc	1e150 <flatcc_builder_append_offset_vector@@Base+0x54>
   1e130:	movw	r0, #26837	; 0x68d5
   1e134:	movw	r1, #22566	; 0x5826
   1e138:	movw	r3, #26864	; 0x68f0
   1e13c:	mov	r2, #892	; 0x37c
   1e140:	movt	r0, #2
   1e144:	movt	r1, #2
   1e148:	movt	r3, #2
   1e14c:	bl	12f88 <__assert_fail@plt>
   1e150:	str	r1, [r0, #20]
   1e154:	ldr	r4, [r6, #20]
   1e158:	ldr	r1, [r6, #24]
   1e15c:	add	r0, r4, r5, lsl #2
   1e160:	cmp	r0, r1
   1e164:	str	r0, [r6, #20]
   1e168:	bcc	1e188 <flatcc_builder_append_offset_vector@@Base+0x8c>
   1e16c:	add	r1, r0, #1
   1e170:	mov	r0, r6
   1e174:	mvn	r2, #3
   1e178:	bl	20a14 <flatcc_builder_get_emit_context@@Base+0x8>
   1e17c:	mov	r7, #0
   1e180:	cmp	r0, #0
   1e184:	bne	1e1ac <flatcc_builder_append_offset_vector@@Base+0xb0>
   1e188:	ldr	r0, [r6, #16]
   1e18c:	adds	r7, r0, r4
   1e190:	beq	1e1a8 <flatcc_builder_append_offset_vector@@Base+0xac>
   1e194:	lsl	r2, r5, #2
   1e198:	mov	r0, r7
   1e19c:	mov	r1, r8
   1e1a0:	bl	12eb0 <memcpy@plt>
   1e1a4:	b	1e1ac <flatcc_builder_append_offset_vector@@Base+0xb0>
   1e1a8:	mov	r7, #0
   1e1ac:	mov	r0, r7
   1e1b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e1b4:	movw	r0, #23618	; 0x5c42
   1e1b8:	movw	r1, #22566	; 0x5826
   1e1bc:	movw	r3, #23767	; 0x5cd7
   1e1c0:	mov	r2, #948	; 0x3b4
   1e1c4:	movt	r0, #2
   1e1c8:	movt	r1, #2
   1e1cc:	movt	r3, #2
   1e1d0:	bl	12f88 <__assert_fail@plt>

0001e1d4 <flatcc_builder_extend_string@@Base>:
   1e1d4:	push	{r4, r5, fp, lr}
   1e1d8:	add	fp, sp, #8
   1e1dc:	mov	r4, r0
   1e1e0:	ldr	r0, [r0, #32]
   1e1e4:	ldrh	r2, [r0, #14]
   1e1e8:	cmp	r2, #6
   1e1ec:	bne	1e244 <flatcc_builder_extend_string@@Base+0x70>
   1e1f0:	ldr	r2, [r0, #20]
   1e1f4:	adds	r2, r2, r1
   1e1f8:	bcs	1e264 <flatcc_builder_extend_string@@Base+0x90>
   1e1fc:	str	r2, [r0, #20]
   1e200:	ldr	r5, [r4, #20]
   1e204:	ldr	r2, [r4, #24]
   1e208:	add	r0, r5, r1
   1e20c:	cmp	r0, r2
   1e210:	str	r0, [r4, #20]
   1e214:	bcc	1e238 <flatcc_builder_extend_string@@Base+0x64>
   1e218:	add	r1, r0, #1
   1e21c:	mov	r0, r4
   1e220:	mvn	r2, #3
   1e224:	bl	20a14 <flatcc_builder_get_emit_context@@Base+0x8>
   1e228:	mov	r1, r0
   1e22c:	mov	r0, #0
   1e230:	cmp	r1, #0
   1e234:	popne	{r4, r5, fp, pc}
   1e238:	ldr	r0, [r4, #16]
   1e23c:	add	r0, r0, r5
   1e240:	pop	{r4, r5, fp, pc}
   1e244:	movw	r0, #23883	; 0x5d4b
   1e248:	movw	r1, #22566	; 0x5826
   1e24c:	movw	r3, #23927	; 0x5d77
   1e250:	movw	r2, #957	; 0x3bd
   1e254:	movt	r0, #2
   1e258:	movt	r1, #2
   1e25c:	movt	r3, #2
   1e260:	bl	12f88 <__assert_fail@plt>
   1e264:	movw	r0, #26837	; 0x68d5
   1e268:	movw	r1, #22566	; 0x5826
   1e26c:	movw	r3, #26864	; 0x68f0
   1e270:	mov	r2, #892	; 0x37c
   1e274:	movt	r0, #2
   1e278:	movt	r1, #2
   1e27c:	movt	r3, #2
   1e280:	bl	12f88 <__assert_fail@plt>

0001e284 <flatcc_builder_append_string@@Base>:
   1e284:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e288:	add	fp, sp, #24
   1e28c:	mov	r6, r0
   1e290:	ldr	r0, [r0, #32]
   1e294:	mov	r8, r1
   1e298:	ldrh	r1, [r0, #14]
   1e29c:	cmp	r1, #6
   1e2a0:	bne	1e318 <flatcc_builder_append_string@@Base+0x94>
   1e2a4:	ldr	r1, [r0, #20]
   1e2a8:	mov	r4, r2
   1e2ac:	adds	r1, r1, r2
   1e2b0:	bcs	1e338 <flatcc_builder_append_string@@Base+0xb4>
   1e2b4:	str	r1, [r0, #20]
   1e2b8:	ldr	r5, [r6, #20]
   1e2bc:	ldr	r1, [r6, #24]
   1e2c0:	add	r0, r5, r4
   1e2c4:	cmp	r0, r1
   1e2c8:	str	r0, [r6, #20]
   1e2cc:	bcc	1e2ec <flatcc_builder_append_string@@Base+0x68>
   1e2d0:	add	r1, r0, #1
   1e2d4:	mov	r0, r6
   1e2d8:	mvn	r2, #3
   1e2dc:	bl	20a14 <flatcc_builder_get_emit_context@@Base+0x8>
   1e2e0:	mov	r7, #0
   1e2e4:	cmp	r0, #0
   1e2e8:	bne	1e310 <flatcc_builder_append_string@@Base+0x8c>
   1e2ec:	ldr	r0, [r6, #16]
   1e2f0:	adds	r7, r0, r5
   1e2f4:	beq	1e30c <flatcc_builder_append_string@@Base+0x88>
   1e2f8:	mov	r0, r7
   1e2fc:	mov	r1, r8
   1e300:	mov	r2, r4
   1e304:	bl	12eb0 <memcpy@plt>
   1e308:	b	1e310 <flatcc_builder_append_string@@Base+0x8c>
   1e30c:	mov	r7, #0
   1e310:	mov	r0, r7
   1e314:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e318:	movw	r0, #23883	; 0x5d4b
   1e31c:	movw	r1, #22566	; 0x5826
   1e320:	movw	r3, #23990	; 0x5db6
   1e324:	movw	r2, #966	; 0x3c6
   1e328:	movt	r0, #2
   1e32c:	movt	r1, #2
   1e330:	movt	r3, #2
   1e334:	bl	12f88 <__assert_fail@plt>
   1e338:	movw	r0, #26837	; 0x68d5
   1e33c:	movw	r1, #22566	; 0x5826
   1e340:	movw	r3, #26864	; 0x68f0
   1e344:	mov	r2, #892	; 0x37c
   1e348:	movt	r0, #2
   1e34c:	movt	r1, #2
   1e350:	movt	r3, #2
   1e354:	bl	12f88 <__assert_fail@plt>

0001e358 <flatcc_builder_append_string_str@@Base>:
   1e358:	push	{r4, r5, fp, lr}
   1e35c:	add	fp, sp, #8
   1e360:	mov	r5, r0
   1e364:	mov	r0, r1
   1e368:	mov	r4, r1
   1e36c:	bl	12f1c <strlen@plt>
   1e370:	mov	r2, r0
   1e374:	mov	r0, r5
   1e378:	mov	r1, r4
   1e37c:	pop	{r4, r5, fp, lr}
   1e380:	b	1e284 <flatcc_builder_append_string@@Base>

0001e384 <flatcc_builder_append_string_strn@@Base>:
   1e384:	push	{r4, r5, r6, sl, fp, lr}
   1e388:	add	fp, sp, #16
   1e38c:	mov	r6, r0
   1e390:	mov	r5, r1
   1e394:	mov	r0, r1
   1e398:	mov	r1, #0
   1e39c:	mov	r4, r2
   1e3a0:	bl	12f58 <memchr@plt>
   1e3a4:	cmp	r0, #0
   1e3a8:	mov	r1, r5
   1e3ac:	subne	r4, r0, r5
   1e3b0:	mov	r0, r6
   1e3b4:	mov	r2, r4
   1e3b8:	pop	{r4, r5, r6, sl, fp, lr}
   1e3bc:	b	1e284 <flatcc_builder_append_string@@Base>

0001e3c0 <flatcc_builder_truncate_vector@@Base>:
   1e3c0:	push	{fp, lr}
   1e3c4:	mov	fp, sp
   1e3c8:	ldr	r2, [r0, #32]
   1e3cc:	ldrh	r3, [r2, #14]
   1e3d0:	cmp	r3, #4
   1e3d4:	bne	1e41c <flatcc_builder_truncate_vector@@Base+0x5c>
   1e3d8:	ldr	r3, [r2, #20]
   1e3dc:	cmp	r3, r1
   1e3e0:	bcc	1e434 <flatcc_builder_truncate_vector@@Base+0x74>
   1e3e4:	sub	r3, r3, r1
   1e3e8:	str	r3, [r2, #20]
   1e3ec:	ldr	r2, [r0, #32]
   1e3f0:	ldr	r3, [r0, #20]
   1e3f4:	ldr	ip, [r0, #16]
   1e3f8:	ldr	r2, [r2, #16]
   1e3fc:	mls	r3, r2, r1, r3
   1e400:	mul	r2, r2, r1
   1e404:	mov	r1, #0
   1e408:	str	r3, [r0, #20]
   1e40c:	add	r0, ip, r3
   1e410:	bl	12f40 <memset@plt>
   1e414:	mov	r0, #0
   1e418:	pop	{fp, pc}
   1e41c:	movw	r0, #23369	; 0x5b49
   1e420:	movw	r1, #22566	; 0x5826
   1e424:	movw	r3, #24067	; 0x5e03
   1e428:	movw	r2, #985	; 0x3d9
   1e42c:	movt	r0, #2
   1e430:	b	1e448 <flatcc_builder_truncate_vector@@Base+0x88>
   1e434:	movw	r0, #24130	; 0x5e42
   1e438:	movw	r1, #22566	; 0x5826
   1e43c:	movw	r3, #24067	; 0x5e03
   1e440:	movw	r2, #986	; 0x3da
   1e444:	movt	r0, #2
   1e448:	movt	r1, #2
   1e44c:	movt	r3, #2
   1e450:	bl	12f88 <__assert_fail@plt>

0001e454 <flatcc_builder_truncate_offset_vector@@Base>:
   1e454:	push	{fp, lr}
   1e458:	mov	fp, sp
   1e45c:	ldr	r2, [r0, #32]
   1e460:	ldrh	r3, [r2, #14]
   1e464:	cmp	r3, #5
   1e468:	bne	1e4b0 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   1e46c:	ldr	r3, [r2, #20]
   1e470:	cmp	r3, r1
   1e474:	bcc	1e4c8 <flatcc_builder_truncate_offset_vector@@Base+0x74>
   1e478:	sub	r3, r3, r1
   1e47c:	str	r3, [r2, #20]
   1e480:	ldr	r2, [r0, #32]
   1e484:	ldr	r3, [r0, #20]
   1e488:	ldr	ip, [r0, #16]
   1e48c:	ldr	r2, [r2, #16]
   1e490:	mls	r3, r2, r1, r3
   1e494:	mul	r2, r2, r1
   1e498:	mov	r1, #0
   1e49c:	str	r3, [r0, #20]
   1e4a0:	add	r0, ip, r3
   1e4a4:	bl	12f40 <memset@plt>
   1e4a8:	mov	r0, #0
   1e4ac:	pop	{fp, pc}
   1e4b0:	movw	r0, #23618	; 0x5c42
   1e4b4:	movw	r1, #22566	; 0x5826
   1e4b8:	movw	r3, #24166	; 0x5e66
   1e4bc:	movw	r2, #994	; 0x3e2
   1e4c0:	movt	r0, #2
   1e4c4:	b	1e4dc <flatcc_builder_truncate_offset_vector@@Base+0x88>
   1e4c8:	movw	r0, #24236	; 0x5eac
   1e4cc:	movw	r1, #22566	; 0x5826
   1e4d0:	movw	r3, #24166	; 0x5e66
   1e4d4:	movw	r2, #995	; 0x3e3
   1e4d8:	movt	r0, #2
   1e4dc:	movt	r1, #2
   1e4e0:	movt	r3, #2
   1e4e4:	bl	12f88 <__assert_fail@plt>

0001e4e8 <flatcc_builder_truncate_string@@Base>:
   1e4e8:	push	{fp, lr}
   1e4ec:	mov	fp, sp
   1e4f0:	mov	r2, r1
   1e4f4:	ldr	r1, [r0, #32]
   1e4f8:	ldrh	r3, [r1, #14]
   1e4fc:	cmp	r3, #6
   1e500:	bne	1e53c <flatcc_builder_truncate_string@@Base+0x54>
   1e504:	ldr	r3, [r1, #20]
   1e508:	cmp	r3, r2
   1e50c:	bcc	1e554 <flatcc_builder_truncate_string@@Base+0x6c>
   1e510:	sub	r3, r3, r2
   1e514:	str	r3, [r1, #20]
   1e518:	ldr	r3, [r0, #20]
   1e51c:	ldr	r1, [r0, #16]
   1e520:	sub	r3, r3, r2
   1e524:	str	r3, [r0, #20]
   1e528:	add	r0, r1, r3
   1e52c:	mov	r1, #0
   1e530:	bl	12f40 <memset@plt>
   1e534:	mov	r0, #0
   1e538:	pop	{fp, pc}
   1e53c:	movw	r0, #23883	; 0x5d4b
   1e540:	movw	r1, #22566	; 0x5826
   1e544:	movw	r3, #24295	; 0x5ee7
   1e548:	movw	r2, #1003	; 0x3eb
   1e54c:	movt	r0, #2
   1e550:	b	1e568 <flatcc_builder_truncate_string@@Base+0x80>
   1e554:	movw	r0, #24358	; 0x5f26
   1e558:	movw	r1, #22566	; 0x5826
   1e55c:	movw	r3, #24295	; 0x5ee7
   1e560:	mov	r2, #1004	; 0x3ec
   1e564:	movt	r0, #2
   1e568:	movt	r1, #2
   1e56c:	movt	r3, #2
   1e570:	bl	12f88 <__assert_fail@plt>

0001e574 <flatcc_builder_start_vector@@Base>:
   1e574:	push	{r4, r5, r6, r7, fp, lr}
   1e578:	add	fp, sp, #16
   1e57c:	mov	r7, #4
   1e580:	cmp	r2, #4
   1e584:	mov	r6, r1
   1e588:	mov	r5, r3
   1e58c:	mov	r4, r0
   1e590:	movls	r2, r7
   1e594:	mov	r1, r2
   1e598:	bl	1d9a0 <flatcc_builder_start_buffer@@Base+0xbc>
   1e59c:	mov	r1, r0
   1e5a0:	mvn	r0, #0
   1e5a4:	cmp	r1, #0
   1e5a8:	popne	{r4, r5, r6, r7, fp, pc}
   1e5ac:	ldr	r0, [r4, #32]
   1e5b0:	str	r6, [r0, #16]
   1e5b4:	mov	r0, #0
   1e5b8:	ldr	r1, [r4, #32]
   1e5bc:	str	r0, [r1, #20]
   1e5c0:	ldr	r1, [r4, #32]
   1e5c4:	str	r5, [r1, #24]
   1e5c8:	ldr	r1, [r4, #32]
   1e5cc:	strh	r7, [r1, #14]
   1e5d0:	ldr	r2, [r4, #28]
   1e5d4:	ldr	r3, [r4, #60]	; 0x3c
   1e5d8:	ldr	r7, [r4, #64]	; 0x40
   1e5dc:	add	r3, r3, r2
   1e5e0:	sub	r2, r7, r2
   1e5e4:	str	r3, [r4, #16]
   1e5e8:	mvn	r3, #3
   1e5ec:	cmn	r2, #4
   1e5f0:	movcs	r2, r3
   1e5f4:	str	r2, [r4, #24]
   1e5f8:	str	r3, [r1, #4]
   1e5fc:	pop	{r4, r5, r6, r7, fp, pc}

0001e600 <flatcc_builder_start_offset_vector@@Base>:
   1e600:	push	{r4, r5, fp, lr}
   1e604:	add	fp, sp, #8
   1e608:	mov	r1, #4
   1e60c:	mov	r4, r0
   1e610:	mov	r5, #4
   1e614:	bl	1d9a0 <flatcc_builder_start_buffer@@Base+0xbc>
   1e618:	mov	r1, r0
   1e61c:	mvn	r0, #0
   1e620:	cmp	r1, #0
   1e624:	popne	{r4, r5, fp, pc}
   1e628:	ldr	r0, [r4, #32]
   1e62c:	mov	r2, #5
   1e630:	str	r5, [r0, #16]
   1e634:	mov	r0, #0
   1e638:	ldr	r1, [r4, #32]
   1e63c:	str	r0, [r1, #20]
   1e640:	ldr	r1, [r4, #32]
   1e644:	strh	r2, [r1, #14]
   1e648:	ldr	r2, [r4, #28]
   1e64c:	ldr	r3, [r4, #60]	; 0x3c
   1e650:	ldr	r5, [r4, #64]	; 0x40
   1e654:	add	r3, r3, r2
   1e658:	sub	r2, r5, r2
   1e65c:	str	r3, [r4, #16]
   1e660:	mvn	r3, #3
   1e664:	cmn	r2, #4
   1e668:	movcs	r2, r3
   1e66c:	str	r2, [r4, #24]
   1e670:	str	r3, [r1, #4]
   1e674:	pop	{r4, r5, fp, pc}

0001e678 <flatcc_builder_create_offset_vector@@Base>:
   1e678:	push	{r4, r5, r6, sl, fp, lr}
   1e67c:	add	fp, sp, #16
   1e680:	mov	r6, r2
   1e684:	mov	r5, r1
   1e688:	mov	r4, r0
   1e68c:	bl	1e600 <flatcc_builder_start_offset_vector@@Base>
   1e690:	cmp	r0, #0
   1e694:	beq	1e6a0 <flatcc_builder_create_offset_vector@@Base+0x28>
   1e698:	mov	r0, #0
   1e69c:	pop	{r4, r5, r6, sl, fp, pc}
   1e6a0:	mov	r0, r4
   1e6a4:	mov	r1, r6
   1e6a8:	bl	1dfd4 <flatcc_builder_extend_offset_vector@@Base>
   1e6ac:	cmp	r0, #0
   1e6b0:	beq	1e698 <flatcc_builder_create_offset_vector@@Base+0x20>
   1e6b4:	lsl	r2, r6, #2
   1e6b8:	mov	r1, r5
   1e6bc:	bl	12eb0 <memcpy@plt>
   1e6c0:	mov	r0, r4
   1e6c4:	pop	{r4, r5, r6, sl, fp, lr}
   1e6c8:	b	1e6cc <flatcc_builder_end_offset_vector@@Base>

0001e6cc <flatcc_builder_end_offset_vector@@Base>:
   1e6cc:	push	{r4, r5, fp, lr}
   1e6d0:	add	fp, sp, #8
   1e6d4:	mov	r4, r0
   1e6d8:	ldr	r0, [r0, #32]
   1e6dc:	ldrh	r1, [r0, #14]
   1e6e0:	cmp	r1, #5
   1e6e4:	bne	1e784 <flatcc_builder_end_offset_vector@@Base+0xb8>
   1e6e8:	ldr	r2, [r0, #20]
   1e6ec:	ldr	r1, [r4, #16]
   1e6f0:	mov	r0, r4
   1e6f4:	mov	r3, #0
   1e6f8:	bl	1f6ac <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1e6fc:	mov	r5, r0
   1e700:	cmp	r0, #0
   1e704:	beq	1e77c <flatcc_builder_end_offset_vector@@Base+0xb0>
   1e708:	ldr	r0, [r4, #16]
   1e70c:	ldr	r2, [r4, #20]
   1e710:	mov	r1, #0
   1e714:	bl	12f40 <memset@plt>
   1e718:	ldr	r0, [r4, #32]
   1e71c:	ldr	r1, [r4, #60]	; 0x3c
   1e720:	ldr	ip, [r4, #64]	; 0x40
   1e724:	ldr	r3, [r0, #8]
   1e728:	str	r3, [r4, #20]
   1e72c:	ldr	r3, [r0]
   1e730:	str	r3, [r4, #28]
   1e734:	add	r1, r1, r3
   1e738:	ldr	r2, [r0, #4]
   1e73c:	str	r1, [r4, #16]
   1e740:	sub	r1, ip, r3
   1e744:	cmp	r1, r2
   1e748:	movhi	r1, r2
   1e74c:	str	r1, [r4, #24]
   1e750:	ldrh	r1, [r4, #130]	; 0x82
   1e754:	ldrh	r2, [r4, #128]	; 0x80
   1e758:	cmp	r2, r1
   1e75c:	strhcc	r1, [r4, #128]	; 0x80
   1e760:	ldrh	r1, [r0, #12]
   1e764:	sub	r0, r0, #36	; 0x24
   1e768:	str	r0, [r4, #32]
   1e76c:	strh	r1, [r4, #130]	; 0x82
   1e770:	ldr	r0, [r4, #156]	; 0x9c
   1e774:	sub	r0, r0, #1
   1e778:	str	r0, [r4, #156]	; 0x9c
   1e77c:	mov	r0, r5
   1e780:	pop	{r4, r5, fp, pc}
   1e784:	movw	r0, #23618	; 0x5c42
   1e788:	movw	r1, #22566	; 0x5826
   1e78c:	movw	r3, #25201	; 0x6271
   1e790:	movw	r2, #1480	; 0x5c8
   1e794:	movt	r0, #2
   1e798:	movt	r1, #2
   1e79c:	movt	r3, #2
   1e7a0:	bl	12f88 <__assert_fail@plt>

0001e7a4 <flatcc_builder_start_string@@Base>:
   1e7a4:	push	{r4, r5, fp, lr}
   1e7a8:	add	fp, sp, #8
   1e7ac:	mov	r1, #1
   1e7b0:	mov	r4, r0
   1e7b4:	mov	r5, #1
   1e7b8:	bl	1d9a0 <flatcc_builder_start_buffer@@Base+0xbc>
   1e7bc:	mov	r1, r0
   1e7c0:	mvn	r0, #0
   1e7c4:	cmp	r1, #0
   1e7c8:	popne	{r4, r5, fp, pc}
   1e7cc:	ldr	r0, [r4, #32]
   1e7d0:	mov	r2, #6
   1e7d4:	str	r5, [r0, #16]
   1e7d8:	mov	r0, #0
   1e7dc:	ldr	r1, [r4, #32]
   1e7e0:	str	r0, [r1, #20]
   1e7e4:	ldr	r1, [r4, #32]
   1e7e8:	strh	r2, [r1, #14]
   1e7ec:	ldr	r2, [r4, #28]
   1e7f0:	ldr	r3, [r4, #60]	; 0x3c
   1e7f4:	ldr	r5, [r4, #64]	; 0x40
   1e7f8:	add	r3, r3, r2
   1e7fc:	sub	r2, r5, r2
   1e800:	str	r3, [r4, #16]
   1e804:	mvn	r3, #3
   1e808:	cmn	r2, #4
   1e80c:	movcs	r2, r3
   1e810:	str	r2, [r4, #24]
   1e814:	str	r3, [r1, #4]
   1e818:	pop	{r4, r5, fp, pc}

0001e81c <flatcc_builder_reserve_table@@Base>:
   1e81c:	push	{r4, r5, r6, sl, fp, lr}
   1e820:	add	fp, sp, #16
   1e824:	sub	sp, sp, #8
   1e828:	cmn	r1, #1
   1e82c:	ble	1e900 <flatcc_builder_reserve_table@@Base+0xe4>
   1e830:	mov	r4, r0
   1e834:	ldr	r0, [r0, #32]
   1e838:	mov	r5, r1
   1e83c:	ldr	r1, [r4, #56]	; 0x38
   1e840:	ldrh	r2, [r0, #28]
   1e844:	ldr	r0, [r0, #16]
   1e848:	add	r6, r0, r2, lsl #1
   1e84c:	add	r0, r6, r5, lsl #1
   1e850:	add	r2, r0, #4
   1e854:	cmp	r2, r1
   1e858:	bls	1e880 <flatcc_builder_reserve_table@@Base+0x64>
   1e85c:	ldr	r0, [r4, #40]	; 0x28
   1e860:	ldr	ip, [r4, #48]	; 0x30
   1e864:	mov	r3, #0
   1e868:	add	r1, r4, #52	; 0x34
   1e86c:	str	r3, [sp]
   1e870:	mov	r3, #1
   1e874:	blx	ip
   1e878:	cmp	r0, #0
   1e87c:	bne	1e920 <flatcc_builder_reserve_table@@Base+0x104>
   1e880:	ldr	r0, [r4, #52]	; 0x34
   1e884:	adds	r0, r0, r6
   1e888:	str	r0, [r4, #4]
   1e88c:	beq	1e8f4 <flatcc_builder_reserve_table@@Base+0xd8>
   1e890:	add	r0, r0, #4
   1e894:	lsl	r1, r5, #1
   1e898:	str	r0, [r4, #4]
   1e89c:	ldr	r0, [r4, #32]
   1e8a0:	ldr	r3, [r4, #80]	; 0x50
   1e8a4:	ldr	r5, [r0, #20]
   1e8a8:	orr	r0, r1, #1
   1e8ac:	add	r2, r5, r0
   1e8b0:	cmp	r2, r3
   1e8b4:	bls	1e8dc <flatcc_builder_reserve_table@@Base+0xc0>
   1e8b8:	ldr	r0, [r4, #40]	; 0x28
   1e8bc:	ldr	r6, [r4, #48]	; 0x30
   1e8c0:	mov	r3, #3
   1e8c4:	add	r1, r4, #76	; 0x4c
   1e8c8:	str	r3, [sp]
   1e8cc:	mov	r3, #0
   1e8d0:	blx	r6
   1e8d4:	cmp	r0, #0
   1e8d8:	bne	1e920 <flatcc_builder_reserve_table@@Base+0x104>
   1e8dc:	ldr	r0, [r4, #76]	; 0x4c
   1e8e0:	adds	r0, r0, r5
   1e8e4:	str	r0, [r4]
   1e8e8:	mov	r0, #0
   1e8ec:	mvneq	r0, #0
   1e8f0:	b	1e8f8 <flatcc_builder_reserve_table@@Base+0xdc>
   1e8f4:	mvn	r0, #0
   1e8f8:	sub	sp, fp, #16
   1e8fc:	pop	{r4, r5, r6, sl, fp, pc}
   1e900:	movw	r0, #24457	; 0x5f89
   1e904:	movw	r1, #22566	; 0x5826
   1e908:	movw	r3, #24392	; 0x5f48
   1e90c:	movw	r2, #1065	; 0x429
   1e910:	movt	r0, #2
   1e914:	movt	r1, #2
   1e918:	movt	r3, #2
   1e91c:	bl	12f88 <__assert_fail@plt>
   1e920:	movw	r0, #27084	; 0x69cc
   1e924:	movw	r1, #22566	; 0x5826
   1e928:	movw	r3, #26630	; 0x6806
   1e92c:	mov	r2, #308	; 0x134
   1e930:	movt	r0, #2
   1e934:	movt	r1, #2
   1e938:	movt	r3, #2
   1e93c:	bl	12f88 <__assert_fail@plt>

0001e940 <flatcc_builder_start_table@@Base>:
   1e940:	push	{r4, r5, r6, r7, fp, lr}
   1e944:	add	fp, sp, #16
   1e948:	sub	sp, sp, #8
   1e94c:	mov	r6, r1
   1e950:	mov	r1, #4
   1e954:	mov	r4, r0
   1e958:	bl	1d9a0 <flatcc_builder_start_buffer@@Base+0xbc>
   1e95c:	mvn	r5, #0
   1e960:	cmp	r0, #0
   1e964:	beq	1e974 <flatcc_builder_start_table@@Base+0x34>
   1e968:	mov	r0, r5
   1e96c:	sub	sp, fp, #16
   1e970:	pop	{r4, r5, r6, r7, fp, pc}
   1e974:	mov	r1, r4
   1e978:	ldr	r2, [r4, #4]
   1e97c:	ldr	r3, [r4, #32]
   1e980:	ldr	r0, [r1, #52]!	; 0x34
   1e984:	sub	r0, r2, r0
   1e988:	str	r0, [r3, #16]
   1e98c:	ldr	r0, [r4]
   1e990:	ldr	r3, [r4, #76]	; 0x4c
   1e994:	ldr	r2, [r4, #32]
   1e998:	sub	r0, r0, r3
   1e99c:	mov	r3, #0
   1e9a0:	str	r0, [r2, #20]
   1e9a4:	ldr	r0, [r4, #12]
   1e9a8:	ldr	r2, [r4, #32]
   1e9ac:	str	r0, [r2, #24]
   1e9b0:	ldr	r0, [r4, #32]
   1e9b4:	ldrh	r2, [r4, #8]
   1e9b8:	strh	r2, [r0, #28]
   1e9bc:	movw	r0, #15186	; 0x3b52
   1e9c0:	strh	r3, [r4, #8]
   1e9c4:	mov	r2, #3
   1e9c8:	movt	r0, #12137	; 0x2f69
   1e9cc:	str	r0, [r4, #12]
   1e9d0:	ldr	r0, [r4, #32]
   1e9d4:	strh	r2, [r0, #14]
   1e9d8:	ldrh	r2, [r0, #28]
   1e9dc:	ldr	r0, [r0, #16]
   1e9e0:	add	r7, r0, r2, lsl #1
   1e9e4:	add	r0, r7, r6, lsl #1
   1e9e8:	add	r2, r0, #4
   1e9ec:	ldr	r0, [r4, #56]	; 0x38
   1e9f0:	cmp	r2, r0
   1e9f4:	bls	1ea14 <flatcc_builder_start_table@@Base+0xd4>
   1e9f8:	ldr	r0, [r4, #40]	; 0x28
   1e9fc:	ldr	ip, [r4, #48]	; 0x30
   1ea00:	str	r3, [sp]
   1ea04:	mov	r3, #1
   1ea08:	blx	ip
   1ea0c:	cmp	r0, #0
   1ea10:	bne	1eab8 <flatcc_builder_start_table@@Base+0x178>
   1ea14:	ldr	r0, [r4, #52]	; 0x34
   1ea18:	adds	r0, r0, r7
   1ea1c:	str	r0, [r4, #4]
   1ea20:	beq	1e968 <flatcc_builder_start_table@@Base+0x28>
   1ea24:	add	r0, r0, #4
   1ea28:	lsl	r1, r6, #1
   1ea2c:	str	r0, [r4, #4]
   1ea30:	ldr	r0, [r4, #32]
   1ea34:	ldr	r3, [r4, #80]	; 0x50
   1ea38:	ldr	r6, [r0, #20]
   1ea3c:	orr	r0, r1, #1
   1ea40:	add	r2, r6, r0
   1ea44:	cmp	r2, r3
   1ea48:	bls	1ea70 <flatcc_builder_start_table@@Base+0x130>
   1ea4c:	ldr	r0, [r4, #40]	; 0x28
   1ea50:	ldr	r7, [r4, #48]	; 0x30
   1ea54:	mov	r3, #3
   1ea58:	add	r1, r4, #76	; 0x4c
   1ea5c:	str	r3, [sp]
   1ea60:	mov	r3, #0
   1ea64:	blx	r7
   1ea68:	cmp	r0, #0
   1ea6c:	bne	1eab8 <flatcc_builder_start_table@@Base+0x178>
   1ea70:	ldr	r0, [r4, #76]	; 0x4c
   1ea74:	adds	r0, r0, r6
   1ea78:	str	r0, [r4]
   1ea7c:	beq	1e968 <flatcc_builder_start_table@@Base+0x28>
   1ea80:	ldr	r0, [r4, #28]
   1ea84:	ldr	r2, [r4, #60]	; 0x3c
   1ea88:	ldr	r3, [r4, #64]	; 0x40
   1ea8c:	ldr	r1, [r4, #32]
   1ea90:	mov	r5, #0
   1ea94:	add	r2, r2, r0
   1ea98:	sub	r0, r3, r0
   1ea9c:	str	r2, [r4, #16]
   1eaa0:	movw	r2, #65532	; 0xfffc
   1eaa4:	cmp	r0, r2
   1eaa8:	movcs	r0, r2
   1eaac:	str	r0, [r4, #24]
   1eab0:	str	r2, [r1, #4]
   1eab4:	b	1e968 <flatcc_builder_start_table@@Base+0x28>
   1eab8:	movw	r0, #27084	; 0x69cc
   1eabc:	movw	r1, #22566	; 0x5826
   1eac0:	movw	r3, #26630	; 0x6806
   1eac4:	mov	r2, #308	; 0x134
   1eac8:	movt	r0, #2
   1eacc:	movt	r1, #2
   1ead0:	movt	r3, #2
   1ead4:	bl	12f88 <__assert_fail@plt>

0001ead8 <flatcc_builder_create_vtable@@Base>:
   1ead8:	push	{r4, r5, fp, lr}
   1eadc:	add	fp, sp, #8
   1eae0:	sub	sp, sp, #80	; 0x50
   1eae4:	mov	r3, r2
   1eae8:	mov	r2, #0
   1eaec:	mov	r4, r0
   1eaf0:	cmp	r3, #0
   1eaf4:	str	r2, [sp, #12]
   1eaf8:	str	r2, [sp, #8]
   1eafc:	movne	r2, #1
   1eb00:	strne	r3, [sp, #20]
   1eb04:	strne	r1, [sp, #16]
   1eb08:	strne	r3, [sp, #8]
   1eb0c:	strne	r2, [sp, #12]
   1eb10:	ldr	r0, [r4, #152]	; 0x98
   1eb14:	cmp	r0, #0
   1eb18:	bne	1eb28 <flatcc_builder_create_vtable@@Base+0x50>
   1eb1c:	ldr	r0, [r4, #180]	; 0xb4
   1eb20:	cmp	r0, #0
   1eb24:	beq	1eb7c <flatcc_builder_create_vtable@@Base+0xa4>
   1eb28:	cmp	r3, #0
   1eb2c:	beq	1ebc0 <flatcc_builder_create_vtable@@Base+0xe8>
   1eb30:	ldr	r0, [r4, #136]	; 0x88
   1eb34:	ldr	ip, [r4, #44]	; 0x2c
   1eb38:	add	r1, sp, #8
   1eb3c:	add	r1, r1, #8
   1eb40:	sub	r5, r0, r3
   1eb44:	ldr	r0, [r4, #36]	; 0x24
   1eb48:	str	r3, [sp]
   1eb4c:	mov	r3, r5
   1eb50:	blx	ip
   1eb54:	cmp	r0, #0
   1eb58:	bne	1ebd4 <flatcc_builder_create_vtable@@Base+0xfc>
   1eb5c:	cmp	r5, #0
   1eb60:	str	r5, [r4, #136]	; 0x88
   1eb64:	beq	1eb74 <flatcc_builder_create_vtable@@Base+0x9c>
   1eb68:	add	r1, r5, #1
   1eb6c:	mov	r0, r1
   1eb70:	b	1ebb8 <flatcc_builder_create_vtable@@Base+0xe0>
   1eb74:	mov	r0, #0
   1eb78:	b	1ebb8 <flatcc_builder_create_vtable@@Base+0xe0>
   1eb7c:	ldr	r5, [r4, #140]	; 0x8c
   1eb80:	ldr	r0, [r4, #36]	; 0x24
   1eb84:	ldr	ip, [r4, #44]	; 0x2c
   1eb88:	add	r1, r5, r3
   1eb8c:	str	r1, [r4, #140]	; 0x8c
   1eb90:	add	r1, sp, #8
   1eb94:	str	r3, [sp]
   1eb98:	mov	r3, r5
   1eb9c:	add	r1, r1, #8
   1eba0:	blx	ip
   1eba4:	cmp	r0, #0
   1eba8:	bne	1ebf4 <flatcc_builder_create_vtable@@Base+0x11c>
   1ebac:	adds	r1, r5, #1
   1ebb0:	mov	r0, #0
   1ebb4:	movcc	r0, r1
   1ebb8:	sub	sp, fp, #8
   1ebbc:	pop	{r4, r5, fp, pc}
   1ebc0:	movw	r0, #27084	; 0x69cc
   1ebc4:	movw	r1, #22566	; 0x5826
   1ebc8:	movw	r3, #26763	; 0x688b
   1ebcc:	movw	r2, #647	; 0x287
   1ebd0:	b	1ebe4 <flatcc_builder_create_vtable@@Base+0x10c>
   1ebd4:	movw	r0, #27084	; 0x69cc
   1ebd8:	movw	r1, #22566	; 0x5826
   1ebdc:	movw	r3, #26763	; 0x688b
   1ebe0:	movw	r2, #651	; 0x28b
   1ebe4:	movt	r0, #2
   1ebe8:	movt	r1, #2
   1ebec:	movt	r3, #2
   1ebf0:	bl	12f88 <__assert_fail@plt>
   1ebf4:	movw	r0, #27084	; 0x69cc
   1ebf8:	movw	r1, #22566	; 0x5826
   1ebfc:	movw	r3, #26951	; 0x6947
   1ec00:	movw	r2, #677	; 0x2a5
   1ec04:	movt	r0, #2
   1ec08:	movt	r1, #2
   1ec0c:	movt	r3, #2
   1ec10:	bl	12f88 <__assert_fail@plt>

0001ec14 <flatcc_builder_create_cached_vtable@@Base>:
   1ec14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec18:	add	fp, sp, #28
   1ec1c:	sub	sp, sp, #20
   1ec20:	mov	sl, r0
   1ec24:	ldr	r0, [r0, #116]	; 0x74
   1ec28:	mov	r8, r3
   1ec2c:	mov	r5, r2
   1ec30:	str	r1, [sp, #16]
   1ec34:	cmp	r0, #0
   1ec38:	beq	1ecdc <flatcc_builder_create_cached_vtable@@Base+0xc8>
   1ec3c:	ldr	r1, [sl, #92]	; 0x5c
   1ec40:	rsb	r0, r0, #32
   1ec44:	lsr	r0, r8, r0
   1ec48:	add	r6, r1, r0, lsl #2
   1ec4c:	cmp	r6, #0
   1ec50:	beq	1eda0 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   1ec54:	ldr	r7, [r6]
   1ec58:	str	r6, [sp, #12]
   1ec5c:	cmp	r7, #0
   1ec60:	beq	1eda8 <flatcc_builder_create_cached_vtable@@Base+0x194>
   1ec64:	ldr	r4, [sl, #68]	; 0x44
   1ec68:	ldr	r8, [sl, #100]	; 0x64
   1ec6c:	mov	r0, #0
   1ec70:	str	r0, [sp, #8]
   1ec74:	add	r9, r8, r7
   1ec78:	mov	r1, r4
   1ec7c:	ldr	r0, [r9, #8]
   1ec80:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   1ec84:	cmp	r0, r5
   1ec88:	bne	1eca0 <flatcc_builder_create_cached_vtable@@Base+0x8c>
   1ec8c:	ldr	r0, [sp, #16]
   1ec90:	mov	r2, r5
   1ec94:	bl	12f10 <bcmp@plt>
   1ec98:	cmp	r0, #0
   1ec9c:	beq	1ecb4 <flatcc_builder_create_cached_vtable@@Base+0xa0>
   1eca0:	ldr	r7, [r9, #12]!
   1eca4:	mov	r6, r9
   1eca8:	cmp	r7, #0
   1ecac:	bne	1ec74 <flatcc_builder_create_cached_vtable@@Base+0x60>
   1ecb0:	b	1ed98 <flatcc_builder_create_cached_vtable@@Base+0x184>
   1ecb4:	ldr	r0, [sl, #152]	; 0x98
   1ecb8:	ldr	r1, [r9, #4]
   1ecbc:	cmp	r1, r0
   1ecc0:	beq	1ef0c <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   1ecc4:	mov	r6, r9
   1ecc8:	mov	r0, r9
   1eccc:	ldr	r7, [r6, #12]!
   1ecd0:	cmp	r7, #0
   1ecd4:	bne	1ec70 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   1ecd8:	b	1edac <flatcc_builder_create_cached_vtable@@Base+0x198>
   1ecdc:	ldr	r0, [sl, #124]	; 0x7c
   1ece0:	cmp	r0, #0
   1ece4:	bne	1ef58 <flatcc_builder_create_cached_vtable@@Base+0x344>
   1ece8:	ldr	r0, [sl, #104]	; 0x68
   1ecec:	add	r7, sl, #100	; 0x64
   1ecf0:	cmp	r0, #15
   1ecf4:	bhi	1ed20 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   1ecf8:	ldr	r0, [sl, #40]	; 0x28
   1ecfc:	ldr	r6, [sl, #48]	; 0x30
   1ed00:	mov	r1, #6
   1ed04:	mov	r2, #16
   1ed08:	mov	r3, #0
   1ed0c:	str	r1, [sp]
   1ed10:	mov	r1, r7
   1ed14:	blx	r6
   1ed18:	cmp	r0, #0
   1ed1c:	bne	1ef38 <flatcc_builder_create_cached_vtable@@Base+0x324>
   1ed20:	ldr	r0, [r7]
   1ed24:	mov	r7, #0
   1ed28:	cmp	r0, #0
   1ed2c:	beq	1ee4c <flatcc_builder_create_cached_vtable@@Base+0x238>
   1ed30:	mov	r0, #16
   1ed34:	mov	r2, #5
   1ed38:	add	r1, sl, #92	; 0x5c
   1ed3c:	mov	r3, #1
   1ed40:	mov	r4, #256	; 0x100
   1ed44:	str	r0, [sl, #124]	; 0x7c
   1ed48:	ldr	r0, [sl, #40]	; 0x28
   1ed4c:	ldr	r6, [sl, #48]	; 0x30
   1ed50:	str	r2, [sp]
   1ed54:	mov	r2, #256	; 0x100
   1ed58:	blx	r6
   1ed5c:	cmp	r0, #0
   1ed60:	bne	1ee4c <flatcc_builder_create_cached_vtable@@Base+0x238>
   1ed64:	ldr	r0, [sl, #96]	; 0x60
   1ed68:	mov	r1, r4
   1ed6c:	lsl	r4, r4, #1
   1ed70:	cmp	r0, r1, lsl #1
   1ed74:	bcs	1ed68 <flatcc_builder_create_cached_vtable@@Base+0x154>
   1ed78:	lsr	r1, r1, #2
   1ed7c:	mvn	r0, #0
   1ed80:	mov	r2, #1
   1ed84:	add	r0, r0, #1
   1ed88:	cmp	r1, r2, lsl r0
   1ed8c:	bhi	1ed84 <flatcc_builder_create_cached_vtable@@Base+0x170>
   1ed90:	str	r0, [sl, #116]	; 0x74
   1ed94:	b	1ec3c <flatcc_builder_create_cached_vtable@@Base+0x28>
   1ed98:	ldr	r9, [sp, #8]
   1ed9c:	b	1edac <flatcc_builder_create_cached_vtable@@Base+0x198>
   1eda0:	mov	r7, #0
   1eda4:	b	1ee4c <flatcc_builder_create_cached_vtable@@Base+0x238>
   1eda8:	mov	r9, #0
   1edac:	ldr	r4, [sl, #124]	; 0x7c
   1edb0:	ldr	r0, [sl, #104]	; 0x68
   1edb4:	add	r7, sl, #100	; 0x64
   1edb8:	add	r2, r4, #16
   1edbc:	cmp	r2, r0
   1edc0:	bls	1ede8 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   1edc4:	ldr	r0, [sl, #40]	; 0x28
   1edc8:	ldr	r6, [sl, #48]	; 0x30
   1edcc:	mov	r1, #6
   1edd0:	mov	r3, #0
   1edd4:	str	r1, [sp]
   1edd8:	mov	r1, r7
   1eddc:	blx	r6
   1ede0:	cmp	r0, #0
   1ede4:	bne	1ef38 <flatcc_builder_create_cached_vtable@@Base+0x324>
   1ede8:	ldr	r0, [r7]
   1edec:	mov	r7, #0
   1edf0:	adds	r4, r0, r4
   1edf4:	beq	1ee4c <flatcc_builder_create_cached_vtable@@Base+0x238>
   1edf8:	ldr	r0, [sl, #124]	; 0x7c
   1edfc:	ldr	r1, [sl, #152]	; 0x98
   1ee00:	add	r2, r0, #16
   1ee04:	str	r2, [sl, #124]	; 0x7c
   1ee08:	ldr	r2, [sp, #12]
   1ee0c:	str	r1, [r4, #4]
   1ee10:	ldr	r1, [r2]
   1ee14:	str	r1, [r4, #12]
   1ee18:	ldr	r1, [sp, #16]
   1ee1c:	str	r0, [r2]
   1ee20:	mov	r0, sl
   1ee24:	mov	r2, r5
   1ee28:	bl	1ead8 <flatcc_builder_create_vtable@@Base>
   1ee2c:	cmp	r0, #0
   1ee30:	str	r0, [r4]
   1ee34:	beq	1ee4c <flatcc_builder_create_cached_vtable@@Base+0x238>
   1ee38:	cmp	r9, #0
   1ee3c:	beq	1ee58 <flatcc_builder_create_cached_vtable@@Base+0x244>
   1ee40:	ldr	r0, [r9, #8]
   1ee44:	str	r0, [r4, #8]
   1ee48:	ldr	r7, [r4]
   1ee4c:	mov	r0, r7
   1ee50:	sub	sp, fp, #28
   1ee54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee58:	ldr	r6, [sl, #120]	; 0x78
   1ee5c:	ldr	r0, [sl, #172]	; 0xac
   1ee60:	add	r2, r6, r5
   1ee64:	cmp	r0, #0
   1ee68:	beq	1eea4 <flatcc_builder_create_cached_vtable@@Base+0x290>
   1ee6c:	cmp	r0, r2
   1ee70:	bcs	1eea4 <flatcc_builder_create_cached_vtable@@Base+0x290>
   1ee74:	ldr	r0, [sl, #116]	; 0x74
   1ee78:	cmp	r0, #0
   1ee7c:	beq	1ee48 <flatcc_builder_create_cached_vtable@@Base+0x234>
   1ee80:	ldr	r0, [sl, #92]	; 0x5c
   1ee84:	ldr	r2, [sl, #96]	; 0x60
   1ee88:	mov	r1, #0
   1ee8c:	mov	r5, #0
   1ee90:	bl	12f40 <memset@plt>
   1ee94:	mov	r0, #16
   1ee98:	str	r5, [sl, #120]	; 0x78
   1ee9c:	str	r0, [sl, #124]	; 0x7c
   1eea0:	b	1ee48 <flatcc_builder_create_cached_vtable@@Base+0x234>
   1eea4:	ldr	r0, [sl, #72]	; 0x48
   1eea8:	add	r7, sl, #68	; 0x44
   1eeac:	cmp	r2, r0
   1eeb0:	bls	1eed8 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   1eeb4:	ldr	r0, [sl, #40]	; 0x28
   1eeb8:	ldr	ip, [sl, #48]	; 0x30
   1eebc:	mov	r1, #2
   1eec0:	mov	r3, #0
   1eec4:	str	r1, [sp]
   1eec8:	mov	r1, r7
   1eecc:	blx	ip
   1eed0:	cmp	r0, #0
   1eed4:	bne	1ef38 <flatcc_builder_create_cached_vtable@@Base+0x324>
   1eed8:	ldr	r0, [r7]
   1eedc:	adds	r0, r0, r6
   1eee0:	beq	1ef04 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   1eee4:	ldr	r1, [sl, #120]	; 0x78
   1eee8:	mov	r2, r5
   1eeec:	str	r1, [r4, #8]
   1eef0:	add	r1, r1, r5
   1eef4:	str	r1, [sl, #120]	; 0x78
   1eef8:	ldr	r1, [sp, #16]
   1eefc:	bl	12eb0 <memcpy@plt>
   1ef00:	b	1ee48 <flatcc_builder_create_cached_vtable@@Base+0x234>
   1ef04:	mvn	r7, #0
   1ef08:	b	1ee4c <flatcc_builder_create_cached_vtable@@Base+0x238>
   1ef0c:	ldr	r0, [sp, #12]
   1ef10:	cmp	r6, r0
   1ef14:	beq	1ef30 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   1ef18:	mov	r1, r0
   1ef1c:	ldr	r0, [r9, #12]
   1ef20:	str	r0, [r6]
   1ef24:	ldr	r0, [r1]
   1ef28:	str	r0, [r9, #12]
   1ef2c:	str	r7, [r1]
   1ef30:	ldr	r7, [r9]
   1ef34:	b	1ee4c <flatcc_builder_create_cached_vtable@@Base+0x238>
   1ef38:	movw	r0, #27084	; 0x69cc
   1ef3c:	movw	r1, #22566	; 0x5826
   1ef40:	movw	r3, #26630	; 0x6806
   1ef44:	mov	r2, #308	; 0x134
   1ef48:	movt	r0, #2
   1ef4c:	movt	r1, #2
   1ef50:	movt	r3, #2
   1ef54:	bl	12f88 <__assert_fail@plt>
   1ef58:	movw	r0, #27024	; 0x6990
   1ef5c:	movw	r1, #22566	; 0x5826
   1ef60:	movw	r3, #27039	; 0x699f
   1ef64:	movw	r2, #342	; 0x156
   1ef68:	movt	r0, #2
   1ef6c:	movt	r1, #2
   1ef70:	movt	r3, #2
   1ef74:	bl	12f88 <__assert_fail@plt>

0001ef78 <flatcc_builder_create_table@@Base>:
   1ef78:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ef7c:	add	fp, sp, #24
   1ef80:	sub	sp, sp, #80	; 0x50
   1ef84:	ldr	r5, [fp, #12]
   1ef88:	cmn	r5, #1
   1ef8c:	ble	1f0d8 <flatcc_builder_create_table@@Base+0x160>
   1ef90:	ldr	ip, [fp, #16]
   1ef94:	tst	ip, #1
   1ef98:	beq	1f0f0 <flatcc_builder_create_table@@Base+0x178>
   1ef9c:	mov	r8, r0
   1efa0:	ldrh	r0, [r0, #128]	; 0x80
   1efa4:	cmp	r3, #4
   1efa8:	movls	r3, #4
   1efac:	cmp	r0, r3
   1efb0:	strhcc	r3, [r8, #128]	; 0x80
   1efb4:	cmp	r5, #1
   1efb8:	ldr	r0, [r8, #136]	; 0x88
   1efbc:	sub	r4, r0, r2
   1efc0:	sub	r0, r3, #1
   1efc4:	and	r0, r4, r0
   1efc8:	sub	r4, r4, #4
   1efcc:	add	r3, ip, r0
   1efd0:	sub	r3, r4, r3
   1efd4:	add	r3, r3, #1
   1efd8:	str	r3, [fp, #-28]	; 0xffffffe4
   1efdc:	blt	1f00c <flatcc_builder_create_table@@Base+0x94>
   1efe0:	ldr	r3, [fp, #8]
   1efe4:	sub	ip, r4, r0
   1efe8:	mvn	r4, #3
   1efec:	sub	r4, r4, ip
   1eff0:	ldrh	r6, [r3], #2
   1eff4:	subs	r5, r5, #1
   1eff8:	ldr	r7, [r6, r1]
   1effc:	add	r7, r4, r7
   1f000:	sub	r7, r7, r6
   1f004:	str	r7, [r6, r1]
   1f008:	bne	1eff0 <flatcc_builder_create_table@@Base+0x78>
   1f00c:	mov	r4, #4
   1f010:	sub	r3, fp, #28
   1f014:	cmp	r2, #0
   1f018:	str	r4, [sp, #16]
   1f01c:	str	r3, [sp, #12]
   1f020:	mov	r3, #1
   1f024:	str	r4, [sp, #4]
   1f028:	addne	r4, r2, #4
   1f02c:	str	r3, [sp, #8]
   1f030:	movne	r3, #2
   1f034:	strne	r2, [sp, #24]
   1f038:	strne	r1, [sp, #20]
   1f03c:	strne	r3, [sp, #8]
   1f040:	strne	r4, [sp, #4]
   1f044:	cmp	r0, #0
   1f048:	beq	1f074 <flatcc_builder_create_table@@Base+0xfc>
   1f04c:	add	r1, sp, #4
   1f050:	movw	r2, #22036	; 0x5614
   1f054:	add	r4, r4, r0
   1f058:	add	r1, r1, r3, lsl #3
   1f05c:	movt	r2, #2
   1f060:	add	r3, r3, #1
   1f064:	str	r4, [sp, #4]
   1f068:	str	r2, [r1, #8]
   1f06c:	str	r0, [r1, #12]
   1f070:	str	r3, [sp, #8]
   1f074:	cmp	r4, #0
   1f078:	ble	1f110 <flatcc_builder_create_table@@Base+0x198>
   1f07c:	ldr	r0, [r8, #136]	; 0x88
   1f080:	ldr	r7, [r8, #44]	; 0x2c
   1f084:	add	r1, sp, #4
   1f088:	mov	r2, r3
   1f08c:	add	r1, r1, #8
   1f090:	sub	r5, r0, r4
   1f094:	ldr	r0, [r8, #36]	; 0x24
   1f098:	str	r4, [sp]
   1f09c:	mov	r3, r5
   1f0a0:	blx	r7
   1f0a4:	cmp	r0, #0
   1f0a8:	streq	r5, [r8, #136]	; 0x88
   1f0ac:	moveq	r0, r5
   1f0b0:	subeq	sp, fp, #24
   1f0b4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f0b8:	movw	r0, #27084	; 0x69cc
   1f0bc:	movw	r1, #22566	; 0x5826
   1f0c0:	movw	r3, #26763	; 0x688b
   1f0c4:	movw	r2, #651	; 0x28b
   1f0c8:	movt	r0, #2
   1f0cc:	movt	r1, #2
   1f0d0:	movt	r3, #2
   1f0d4:	bl	12f88 <__assert_fail@plt>
   1f0d8:	movw	r0, #24450	; 0x5f82
   1f0dc:	movw	r1, #22566	; 0x5826
   1f0e0:	movw	r3, #24468	; 0x5f94
   1f0e4:	movw	r2, #1237	; 0x4d5
   1f0e8:	movt	r0, #2
   1f0ec:	b	1f104 <flatcc_builder_create_table@@Base+0x18c>
   1f0f0:	movw	r0, #24624	; 0x6030
   1f0f4:	movw	r1, #22566	; 0x5826
   1f0f8:	movw	r3, #24468	; 0x5f94
   1f0fc:	movw	r2, #1243	; 0x4db
   1f100:	movt	r0, #2
   1f104:	movt	r1, #2
   1f108:	movt	r3, #2
   1f10c:	bl	12f88 <__assert_fail@plt>
   1f110:	movw	r0, #27084	; 0x69cc
   1f114:	movw	r1, #22566	; 0x5826
   1f118:	movw	r3, #26763	; 0x688b
   1f11c:	movw	r2, #647	; 0x287
   1f120:	b	1f0c8 <flatcc_builder_create_table@@Base+0x150>

0001f124 <flatcc_builder_check_required_field@@Base>:
   1f124:	push	{fp, lr}
   1f128:	mov	fp, sp
   1f12c:	ldr	r2, [r0, #32]
   1f130:	ldrh	r2, [r2, #14]
   1f134:	cmp	r2, #3
   1f138:	bne	1f168 <flatcc_builder_check_required_field@@Base+0x44>
   1f13c:	ldrh	r3, [r0, #8]
   1f140:	mov	r2, #0
   1f144:	cmp	r3, r1
   1f148:	bls	1f160 <flatcc_builder_check_required_field@@Base+0x3c>
   1f14c:	ldr	r0, [r0, #4]
   1f150:	add	r0, r0, r1, lsl #1
   1f154:	ldrh	r2, [r0]
   1f158:	cmp	r2, #0
   1f15c:	movwne	r2, #1
   1f160:	mov	r0, r2
   1f164:	pop	{fp, pc}
   1f168:	movw	r0, #24635	; 0x603b
   1f16c:	movw	r1, #22566	; 0x5826
   1f170:	movw	r3, #24678	; 0x6066
   1f174:	movw	r2, #1272	; 0x4f8
   1f178:	movt	r0, #2
   1f17c:	movt	r1, #2
   1f180:	movt	r3, #2
   1f184:	bl	12f88 <__assert_fail@plt>

0001f188 <flatcc_builder_check_union_field@@Base>:
   1f188:	push	{fp, lr}
   1f18c:	mov	fp, sp
   1f190:	mov	r2, r0
   1f194:	ldr	r0, [r0, #32]
   1f198:	ldrh	r0, [r0, #14]
   1f19c:	cmp	r0, #3
   1f1a0:	bne	1f200 <flatcc_builder_check_union_field@@Base+0x78>
   1f1a4:	mov	r0, #0
   1f1a8:	cmp	r1, #0
   1f1ac:	beq	1f1ec <flatcc_builder_check_union_field@@Base+0x64>
   1f1b0:	ldrh	r3, [r2, #8]
   1f1b4:	cmp	r3, r1
   1f1b8:	popls	{fp, pc}
   1f1bc:	ldr	r0, [r2, #4]
   1f1c0:	add	r0, r0, r1, lsl #1
   1f1c4:	ldrh	r1, [r0, #-2]
   1f1c8:	cmp	r1, #0
   1f1cc:	beq	1f1f0 <flatcc_builder_check_union_field@@Base+0x68>
   1f1d0:	ldr	r2, [r2, #16]
   1f1d4:	ldrh	r0, [r0]
   1f1d8:	ldrb	r1, [r2, r1]
   1f1dc:	cmp	r1, #0
   1f1e0:	beq	1f1f4 <flatcc_builder_check_union_field@@Base+0x6c>
   1f1e4:	cmp	r0, #0
   1f1e8:	movwne	r0, #1
   1f1ec:	pop	{fp, pc}
   1f1f0:	ldrh	r0, [r0]
   1f1f4:	clz	r0, r0
   1f1f8:	lsr	r0, r0, #5
   1f1fc:	pop	{fp, pc}
   1f200:	movw	r0, #24635	; 0x603b
   1f204:	movw	r1, #22566	; 0x5826
   1f208:	movw	r3, #24761	; 0x60b9
   1f20c:	movw	r2, #1279	; 0x4ff
   1f210:	movt	r0, #2
   1f214:	movt	r1, #2
   1f218:	movt	r3, #2
   1f21c:	bl	12f88 <__assert_fail@plt>

0001f220 <flatcc_builder_check_required@@Base>:
   1f220:	push	{fp, lr}
   1f224:	mov	fp, sp
   1f228:	mov	r3, r0
   1f22c:	ldr	r0, [r0, #32]
   1f230:	ldrh	r0, [r0, #14]
   1f234:	cmp	r0, #3
   1f238:	bne	1f280 <flatcc_builder_check_required@@Base+0x60>
   1f23c:	ldrh	ip, [r3, #8]
   1f240:	mov	r0, #0
   1f244:	cmp	ip, r2
   1f248:	poplt	{fp, pc}
   1f24c:	cmp	r2, #1
   1f250:	blt	1f278 <flatcc_builder_check_required@@Base+0x58>
   1f254:	ldr	ip, [r3, #4]
   1f258:	ldrh	r3, [r1]
   1f25c:	add	r3, ip, r3, lsl #1
   1f260:	ldrh	r3, [r3]
   1f264:	cmp	r3, #0
   1f268:	beq	1f27c <flatcc_builder_check_required@@Base+0x5c>
   1f26c:	add	r1, r1, #2
   1f270:	subs	r2, r2, #1
   1f274:	bne	1f258 <flatcc_builder_check_required@@Base+0x38>
   1f278:	mov	r0, #1
   1f27c:	pop	{fp, pc}
   1f280:	movw	r0, #24635	; 0x603b
   1f284:	movw	r1, #22566	; 0x5826
   1f288:	movw	r3, #24841	; 0x6109
   1f28c:	movw	r2, #1297	; 0x511
   1f290:	movt	r0, #2
   1f294:	movt	r1, #2
   1f298:	movt	r3, #2
   1f29c:	bl	12f88 <__assert_fail@plt>

0001f2a0 <flatcc_builder_end_table@@Base>:
   1f2a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f2a4:	add	fp, sp, #24
   1f2a8:	sub	sp, sp, #16
   1f2ac:	mov	r4, r0
   1f2b0:	ldr	r0, [r0, #32]
   1f2b4:	ldrh	r0, [r0, #14]
   1f2b8:	cmp	r0, #3
   1f2bc:	bne	1f438 <flatcc_builder_end_table@@Base+0x198>
   1f2c0:	ldrh	r0, [r4, #8]
   1f2c4:	ldr	r5, [r4, #4]
   1f2c8:	mov	r1, #4
   1f2cc:	movw	r2, #31153	; 0x79b1
   1f2d0:	movt	r2, #40503	; 0x9e37
   1f2d4:	add	r0, r1, r0, lsl #1
   1f2d8:	strh	r0, [r5, #-4]!
   1f2dc:	ldrh	r1, [r4, #20]
   1f2e0:	uxth	r6, r0
   1f2e4:	add	r1, r1, #4
   1f2e8:	strh	r1, [r5, #2]
   1f2ec:	uxth	r1, r1
   1f2f0:	ldr	r0, [r4, #12]
   1f2f4:	eor	r0, r0, r6
   1f2f8:	mul	r0, r0, r2
   1f2fc:	eor	r0, r0, r1
   1f300:	mov	r1, r5
   1f304:	mul	r3, r0, r2
   1f308:	mov	r0, r4
   1f30c:	mov	r2, r6
   1f310:	str	r3, [r4, #12]
   1f314:	bl	1ec14 <flatcc_builder_create_cached_vtable@@Base>
   1f318:	cmp	r0, #0
   1f31c:	beq	1f428 <flatcc_builder_end_table@@Base+0x188>
   1f320:	mov	r7, r0
   1f324:	mov	r0, r5
   1f328:	mov	r1, #0
   1f32c:	mov	r2, r6
   1f330:	mov	r8, #0
   1f334:	bl	12f40 <memset@plt>
   1f338:	ldr	r5, [r4, #32]
   1f33c:	ldr	r0, [r4, #76]	; 0x4c
   1f340:	ldr	r6, [r4]
   1f344:	ldrh	r3, [r4, #130]	; 0x82
   1f348:	ldr	r1, [r4, #16]
   1f34c:	ldr	r2, [r4, #20]
   1f350:	ldr	r5, [r5, #20]
   1f354:	add	r0, r0, r5
   1f358:	sub	r6, r6, r0
   1f35c:	asr	r6, r6, #1
   1f360:	stm	sp, {r0, r6, r7}
   1f364:	mov	r0, r4
   1f368:	bl	1ef78 <flatcc_builder_create_table@@Base>
   1f36c:	cmp	r0, #0
   1f370:	beq	1f42c <flatcc_builder_end_table@@Base+0x18c>
   1f374:	ldr	r1, [r4, #32]
   1f378:	mov	r5, r0
   1f37c:	ldr	r0, [r4, #16]
   1f380:	ldr	r2, [r4, #20]
   1f384:	ldr	r3, [r4, #52]	; 0x34
   1f388:	ldr	r7, [r1, #24]
   1f38c:	str	r7, [r4, #12]
   1f390:	ldrh	r7, [r1, #28]
   1f394:	strh	r7, [r4, #8]
   1f398:	ldr	r7, [r1, #16]
   1f39c:	add	r3, r3, r7
   1f3a0:	str	r3, [r4, #4]
   1f3a4:	ldr	r3, [r4, #76]	; 0x4c
   1f3a8:	ldr	r1, [r1, #20]
   1f3ac:	add	r1, r3, r1
   1f3b0:	str	r1, [r4]
   1f3b4:	mov	r1, #0
   1f3b8:	bl	12f40 <memset@plt>
   1f3bc:	ldr	r0, [r4, #32]
   1f3c0:	ldr	r1, [r4, #60]	; 0x3c
   1f3c4:	ldr	r2, [r4, #64]	; 0x40
   1f3c8:	mov	r8, r5
   1f3cc:	ldr	r3, [r0, #8]
   1f3d0:	str	r3, [r4, #20]
   1f3d4:	ldr	r3, [r0]
   1f3d8:	str	r3, [r4, #28]
   1f3dc:	add	r1, r1, r3
   1f3e0:	ldr	r7, [r0, #4]
   1f3e4:	str	r1, [r4, #16]
   1f3e8:	sub	r1, r2, r3
   1f3ec:	cmp	r1, r7
   1f3f0:	movhi	r1, r7
   1f3f4:	str	r1, [r4, #24]
   1f3f8:	ldrh	r1, [r4, #130]	; 0x82
   1f3fc:	ldrh	r2, [r4, #128]	; 0x80
   1f400:	cmp	r2, r1
   1f404:	strhcc	r1, [r4, #128]	; 0x80
   1f408:	ldrh	r1, [r0, #12]
   1f40c:	sub	r0, r0, #36	; 0x24
   1f410:	str	r0, [r4, #32]
   1f414:	strh	r1, [r4, #130]	; 0x82
   1f418:	ldr	r0, [r4, #156]	; 0x9c
   1f41c:	sub	r0, r0, #1
   1f420:	str	r0, [r4, #156]	; 0x9c
   1f424:	b	1f42c <flatcc_builder_end_table@@Base+0x18c>
   1f428:	mov	r8, #0
   1f42c:	mov	r0, r8
   1f430:	sub	sp, fp, #24
   1f434:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f438:	movw	r0, #24635	; 0x603b
   1f43c:	movw	r1, #22566	; 0x5826
   1f440:	movw	r3, #24931	; 0x6163
   1f444:	movw	r2, #1317	; 0x525
   1f448:	movt	r0, #2
   1f44c:	movt	r1, #2
   1f450:	movt	r3, #2
   1f454:	bl	12f88 <__assert_fail@plt>

0001f458 <flatcc_builder_create_vector@@Base>:
   1f458:	push	{r4, r5, r6, r7, fp, lr}
   1f45c:	add	fp, sp, #16
   1f460:	sub	sp, sp, #80	; 0x50
   1f464:	mov	r7, r0
   1f468:	ldr	r0, [fp, #12]
   1f46c:	cmp	r2, r0
   1f470:	bhi	1f56c <flatcc_builder_create_vector@@Base+0x114>
   1f474:	ldr	r0, [fp, #8]
   1f478:	mov	r4, r2
   1f47c:	ldrh	r2, [r7, #128]	; 0x80
   1f480:	mov	r5, #4
   1f484:	cmp	r0, #4
   1f488:	movls	r0, r5
   1f48c:	cmp	r2, r0
   1f490:	sub	r2, fp, #20
   1f494:	strhcc	r0, [r7, #128]	; 0x80
   1f498:	str	r4, [fp, #-20]	; 0xffffffec
   1f49c:	sub	r0, r0, #1
   1f4a0:	ldr	ip, [r7, #136]	; 0x88
   1f4a4:	str	r5, [sp, #16]
   1f4a8:	str	r2, [sp, #12]
   1f4ac:	mov	r2, #1
   1f4b0:	str	r5, [sp, #4]
   1f4b4:	str	r2, [sp, #8]
   1f4b8:	mls	r6, r3, r4, ip
   1f4bc:	mul	r3, r3, r4
   1f4c0:	cmp	r3, #0
   1f4c4:	and	r0, r6, r0
   1f4c8:	movne	r2, #2
   1f4cc:	addne	r5, r3, #4
   1f4d0:	strne	r3, [sp, #24]
   1f4d4:	strne	r1, [sp, #20]
   1f4d8:	strne	r2, [sp, #8]
   1f4dc:	strne	r5, [sp, #4]
   1f4e0:	cmp	r0, #0
   1f4e4:	beq	1f510 <flatcc_builder_create_vector@@Base+0xb8>
   1f4e8:	add	r1, sp, #4
   1f4ec:	movw	r3, #22036	; 0x5614
   1f4f0:	add	r5, r5, r0
   1f4f4:	add	r1, r1, r2, lsl #3
   1f4f8:	movt	r3, #2
   1f4fc:	add	r2, r2, #1
   1f500:	str	r5, [sp, #4]
   1f504:	str	r3, [r1, #8]
   1f508:	str	r0, [r1, #12]
   1f50c:	str	r2, [sp, #8]
   1f510:	cmp	r5, #0
   1f514:	ble	1f58c <flatcc_builder_create_vector@@Base+0x134>
   1f518:	ldr	r0, [r7, #36]	; 0x24
   1f51c:	ldr	r6, [r7, #44]	; 0x2c
   1f520:	add	r1, sp, #4
   1f524:	sub	r4, ip, r5
   1f528:	str	r5, [sp]
   1f52c:	add	r1, r1, #8
   1f530:	mov	r3, r4
   1f534:	blx	r6
   1f538:	cmp	r0, #0
   1f53c:	streq	r4, [r7, #136]	; 0x88
   1f540:	moveq	r0, r4
   1f544:	subeq	sp, fp, #16
   1f548:	popeq	{r4, r5, r6, r7, fp, pc}
   1f54c:	movw	r0, #27084	; 0x69cc
   1f550:	movw	r1, #22566	; 0x5826
   1f554:	movw	r3, #26763	; 0x688b
   1f558:	movw	r2, #651	; 0x28b
   1f55c:	movt	r0, #2
   1f560:	movt	r1, #2
   1f564:	movt	r3, #2
   1f568:	bl	12f88 <__assert_fail@plt>
   1f56c:	movw	r0, #24997	; 0x61a5
   1f570:	movw	r1, #22566	; 0x5826
   1f574:	movw	r3, #25016	; 0x61b8
   1f578:	movw	r2, #1365	; 0x555
   1f57c:	movt	r0, #2
   1f580:	movt	r1, #2
   1f584:	movt	r3, #2
   1f588:	bl	12f88 <__assert_fail@plt>
   1f58c:	movw	r0, #27084	; 0x69cc
   1f590:	movw	r1, #22566	; 0x5826
   1f594:	movw	r3, #26763	; 0x688b
   1f598:	movw	r2, #647	; 0x287
   1f59c:	b	1f55c <flatcc_builder_create_vector@@Base+0x104>

0001f5a0 <flatcc_builder_end_vector@@Base>:
   1f5a0:	push	{r4, r5, fp, lr}
   1f5a4:	add	fp, sp, #8
   1f5a8:	sub	sp, sp, #8
   1f5ac:	mov	r4, r0
   1f5b0:	ldr	r0, [r0, #32]
   1f5b4:	ldrh	r1, [r0, #14]
   1f5b8:	cmp	r1, #4
   1f5bc:	bne	1f670 <flatcc_builder_end_vector@@Base+0xd0>
   1f5c0:	ldr	r3, [r0, #16]
   1f5c4:	ldr	r2, [r0, #20]
   1f5c8:	ldr	r0, [r0, #24]
   1f5cc:	ldr	r1, [r4, #16]
   1f5d0:	ldrh	r5, [r4, #130]	; 0x82
   1f5d4:	str	r0, [sp, #4]
   1f5d8:	mov	r0, r4
   1f5dc:	str	r5, [sp]
   1f5e0:	bl	1f458 <flatcc_builder_create_vector@@Base>
   1f5e4:	mov	r5, r0
   1f5e8:	cmp	r0, #0
   1f5ec:	beq	1f664 <flatcc_builder_end_vector@@Base+0xc4>
   1f5f0:	ldr	r0, [r4, #16]
   1f5f4:	ldr	r2, [r4, #20]
   1f5f8:	mov	r1, #0
   1f5fc:	bl	12f40 <memset@plt>
   1f600:	ldr	r0, [r4, #32]
   1f604:	ldr	r1, [r4, #60]	; 0x3c
   1f608:	ldr	ip, [r4, #64]	; 0x40
   1f60c:	ldr	r3, [r0, #8]
   1f610:	str	r3, [r4, #20]
   1f614:	ldr	r3, [r0]
   1f618:	str	r3, [r4, #28]
   1f61c:	add	r1, r1, r3
   1f620:	ldr	r2, [r0, #4]
   1f624:	str	r1, [r4, #16]
   1f628:	sub	r1, ip, r3
   1f62c:	cmp	r1, r2
   1f630:	movhi	r1, r2
   1f634:	str	r1, [r4, #24]
   1f638:	ldrh	r1, [r4, #130]	; 0x82
   1f63c:	ldrh	r2, [r4, #128]	; 0x80
   1f640:	cmp	r2, r1
   1f644:	strhcc	r1, [r4, #128]	; 0x80
   1f648:	ldrh	r1, [r0, #12]
   1f64c:	sub	r0, r0, #36	; 0x24
   1f650:	str	r0, [r4, #32]
   1f654:	strh	r1, [r4, #130]	; 0x82
   1f658:	ldr	r0, [r4, #156]	; 0x9c
   1f65c:	sub	r0, r0, #1
   1f660:	str	r0, [r4, #156]	; 0x9c
   1f664:	mov	r0, r5
   1f668:	sub	sp, fp, #8
   1f66c:	pop	{r4, r5, fp, pc}
   1f670:	movw	r0, #23369	; 0x5b49
   1f674:	movw	r1, #22566	; 0x5826
   1f678:	movw	r3, #25134	; 0x622e
   1f67c:	movw	r2, #1400	; 0x578
   1f680:	movt	r0, #2
   1f684:	movt	r1, #2
   1f688:	movt	r3, #2
   1f68c:	bl	12f88 <__assert_fail@plt>

0001f690 <flatcc_builder_vector_count@@Base>:
   1f690:	ldr	r0, [r0, #32]
   1f694:	ldr	r0, [r0, #20]
   1f698:	bx	lr

0001f69c <flatcc_builder_vector_edit@@Base>:
   1f69c:	ldr	r0, [r0, #16]
   1f6a0:	bx	lr

0001f6a4 <flatcc_builder_create_offset_vector_direct@@Base>:
   1f6a4:	mov	r3, #0
   1f6a8:	b	1f6ac <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1f6ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f6b0:	add	fp, sp, #24
   1f6b4:	sub	sp, sp, #80	; 0x50
   1f6b8:	mov	r6, #0
   1f6bc:	cmn	r2, #-1073741823	; 0xc0000001
   1f6c0:	bhi	1f7fc <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   1f6c4:	mov	r8, r0
   1f6c8:	ldrh	r0, [r0, #128]	; 0x80
   1f6cc:	mov	r5, #4
   1f6d0:	sub	r7, fp, #28
   1f6d4:	mov	r4, #1
   1f6d8:	cmp	r0, #3
   1f6dc:	movls	r0, #4
   1f6e0:	strhls	r0, [r8, #128]	; 0x80
   1f6e4:	str	r2, [fp, #-28]	; 0xffffffe4
   1f6e8:	ldr	ip, [r8, #136]	; 0x88
   1f6ec:	str	r5, [sp, #16]
   1f6f0:	str	r7, [sp, #12]
   1f6f4:	mov	r7, #0
   1f6f8:	str	r5, [sp, #4]
   1f6fc:	str	r4, [sp, #8]
   1f700:	cmp	r7, r2, lsl #2
   1f704:	and	r6, ip, #3
   1f708:	beq	1f728 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   1f70c:	lsl	r7, r2, #2
   1f710:	mov	r4, #2
   1f714:	add	r5, r7, #4
   1f718:	str	r7, [sp, #24]
   1f71c:	str	r1, [sp, #20]
   1f720:	str	r4, [sp, #8]
   1f724:	str	r5, [sp, #4]
   1f728:	cmp	r6, #0
   1f72c:	beq	1f758 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   1f730:	add	r7, sp, #4
   1f734:	movw	r0, #22036	; 0x5614
   1f738:	add	r5, r5, r6
   1f73c:	add	r7, r7, r4, lsl #3
   1f740:	movt	r0, #2
   1f744:	add	r4, r4, #1
   1f748:	str	r5, [sp, #4]
   1f74c:	str	r0, [r7, #8]
   1f750:	str	r6, [r7, #12]
   1f754:	str	r4, [sp, #8]
   1f758:	cmp	r2, #0
   1f75c:	beq	1f7c4 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   1f760:	sub	r0, r5, ip
   1f764:	mov	r6, r3
   1f768:	sub	r0, r0, #4
   1f76c:	ldr	r7, [r1]
   1f770:	cmp	r7, #0
   1f774:	beq	1f798 <flatcc_builder_create_offset_vector_direct@@Base+0xf4>
   1f778:	add	r7, r0, r7
   1f77c:	cmp	r3, #0
   1f780:	str	r7, [r1]
   1f784:	beq	1f7ac <flatcc_builder_create_offset_vector_direct@@Base+0x108>
   1f788:	ldrb	r7, [r6]
   1f78c:	cmp	r7, #0
   1f790:	bne	1f7ac <flatcc_builder_create_offset_vector_direct@@Base+0x108>
   1f794:	b	1f808 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   1f798:	cmp	r3, #0
   1f79c:	beq	1f838 <flatcc_builder_create_offset_vector_direct@@Base+0x194>
   1f7a0:	ldrb	r7, [r6]
   1f7a4:	cmp	r7, #0
   1f7a8:	bne	1f820 <flatcc_builder_create_offset_vector_direct@@Base+0x17c>
   1f7ac:	sub	r0, r0, #4
   1f7b0:	add	r1, r1, #4
   1f7b4:	add	r6, r6, #1
   1f7b8:	subs	r2, r2, #1
   1f7bc:	bne	1f76c <flatcc_builder_create_offset_vector_direct@@Base+0xc8>
   1f7c0:	ldr	ip, [r8, #136]	; 0x88
   1f7c4:	cmp	r5, #0
   1f7c8:	ble	1f858 <flatcc_builder_create_offset_vector_direct@@Base+0x1b4>
   1f7cc:	ldr	r0, [r8, #36]	; 0x24
   1f7d0:	ldr	r7, [r8, #44]	; 0x2c
   1f7d4:	add	r1, sp, #4
   1f7d8:	sub	r6, ip, r5
   1f7dc:	mov	r2, r4
   1f7e0:	str	r5, [sp]
   1f7e4:	add	r1, r1, #8
   1f7e8:	mov	r3, r6
   1f7ec:	blx	r7
   1f7f0:	cmp	r0, #0
   1f7f4:	bne	1f86c <flatcc_builder_create_offset_vector_direct@@Base+0x1c8>
   1f7f8:	str	r6, [r8, #136]	; 0x88
   1f7fc:	mov	r0, r6
   1f800:	sub	sp, fp, #24
   1f804:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f808:	movw	r0, #27072	; 0x69c0
   1f80c:	movw	r1, #22566	; 0x5826
   1f810:	movw	r3, #27086	; 0x69ce
   1f814:	movw	r2, #1457	; 0x5b1
   1f818:	movt	r0, #2
   1f81c:	b	1f84c <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   1f820:	movw	r0, #27217	; 0x6a51
   1f824:	movw	r1, #22566	; 0x5826
   1f828:	movw	r3, #27086	; 0x69ce
   1f82c:	movw	r2, #1461	; 0x5b5
   1f830:	movt	r0, #2
   1f834:	b	1f84c <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   1f838:	movw	r0, #27084	; 0x69cc
   1f83c:	movw	r1, #22566	; 0x5826
   1f840:	movw	r3, #27086	; 0x69ce
   1f844:	movw	r2, #1463	; 0x5b7
   1f848:	movt	r0, #2
   1f84c:	movt	r1, #2
   1f850:	movt	r3, #2
   1f854:	bl	12f88 <__assert_fail@plt>
   1f858:	movw	r0, #27084	; 0x69cc
   1f85c:	movw	r1, #22566	; 0x5826
   1f860:	movw	r3, #26763	; 0x688b
   1f864:	movw	r2, #647	; 0x287
   1f868:	b	1f87c <flatcc_builder_create_offset_vector_direct@@Base+0x1d8>
   1f86c:	movw	r0, #27084	; 0x69cc
   1f870:	movw	r1, #22566	; 0x5826
   1f874:	movw	r3, #26763	; 0x688b
   1f878:	movw	r2, #651	; 0x28b
   1f87c:	movt	r0, #2
   1f880:	movt	r1, #2
   1f884:	movt	r3, #2
   1f888:	bl	12f88 <__assert_fail@plt>

0001f88c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   1f88c:	push	{r4, r5, fp, lr}
   1f890:	add	fp, sp, #8
   1f894:	mov	r4, r0
   1f898:	ldr	r0, [r0, #32]
   1f89c:	mov	r3, r1
   1f8a0:	ldrh	r1, [r0, #14]
   1f8a4:	cmp	r1, #5
   1f8a8:	bne	1f944 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   1f8ac:	ldr	r2, [r0, #20]
   1f8b0:	ldr	r1, [r4, #16]
   1f8b4:	mov	r0, r4
   1f8b8:	bl	1f6ac <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1f8bc:	mov	r5, r0
   1f8c0:	cmp	r0, #0
   1f8c4:	beq	1f93c <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   1f8c8:	ldr	r0, [r4, #16]
   1f8cc:	ldr	r2, [r4, #20]
   1f8d0:	mov	r1, #0
   1f8d4:	bl	12f40 <memset@plt>
   1f8d8:	ldr	r0, [r4, #32]
   1f8dc:	ldr	r1, [r4, #60]	; 0x3c
   1f8e0:	ldr	ip, [r4, #64]	; 0x40
   1f8e4:	ldr	r3, [r0, #8]
   1f8e8:	str	r3, [r4, #20]
   1f8ec:	ldr	r3, [r0]
   1f8f0:	str	r3, [r4, #28]
   1f8f4:	add	r1, r1, r3
   1f8f8:	ldr	r2, [r0, #4]
   1f8fc:	str	r1, [r4, #16]
   1f900:	sub	r1, ip, r3
   1f904:	cmp	r1, r2
   1f908:	movhi	r1, r2
   1f90c:	str	r1, [r4, #24]
   1f910:	ldrh	r1, [r4, #130]	; 0x82
   1f914:	ldrh	r2, [r4, #128]	; 0x80
   1f918:	cmp	r2, r1
   1f91c:	strhcc	r1, [r4, #128]	; 0x80
   1f920:	ldrh	r1, [r0, #12]
   1f924:	sub	r0, r0, #36	; 0x24
   1f928:	str	r0, [r4, #32]
   1f92c:	strh	r1, [r4, #130]	; 0x82
   1f930:	ldr	r0, [r4, #156]	; 0x9c
   1f934:	sub	r0, r0, #1
   1f938:	str	r0, [r4, #156]	; 0x9c
   1f93c:	mov	r0, r5
   1f940:	pop	{r4, r5, fp, pc}
   1f944:	movw	r0, #23618	; 0x5c42
   1f948:	movw	r1, #22566	; 0x5826
   1f94c:	movw	r3, #25275	; 0x62bb
   1f950:	movw	r2, #1493	; 0x5d5
   1f954:	movt	r0, #2
   1f958:	movt	r1, #2
   1f95c:	movt	r3, #2
   1f960:	bl	12f88 <__assert_fail@plt>

0001f964 <flatcc_builder_offset_vector_edit@@Base>:
   1f964:	ldr	r0, [r0, #16]
   1f968:	bx	lr

0001f96c <flatcc_builder_offset_vector_count@@Base>:
   1f96c:	ldr	r0, [r0, #32]
   1f970:	ldr	r0, [r0, #20]
   1f974:	bx	lr

0001f978 <flatcc_builder_table_add_union@@Base>:
   1f978:	push	{r4, r5, r6, r7, fp, lr}
   1f97c:	add	fp, sp, #16
   1f980:	mov	r5, r0
   1f984:	ldr	r0, [r0, #32]
   1f988:	ldrh	r0, [r0, #14]
   1f98c:	cmp	r0, #3
   1f990:	bne	1fa18 <flatcc_builder_table_add_union@@Base+0xa0>
   1f994:	mov	r7, r3
   1f998:	mov	r4, r2
   1f99c:	mov	r6, r1
   1f9a0:	cmp	r3, #0
   1f9a4:	beq	1f9b4 <flatcc_builder_table_add_union@@Base+0x3c>
   1f9a8:	uxtb	r0, r4
   1f9ac:	cmp	r0, #0
   1f9b0:	beq	1fa30 <flatcc_builder_table_add_union@@Base+0xb8>
   1f9b4:	cmp	r7, #0
   1f9b8:	beq	1f9d4 <flatcc_builder_table_add_union@@Base+0x5c>
   1f9bc:	mov	r0, r5
   1f9c0:	mov	r1, r6
   1f9c4:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1f9c8:	cmp	r0, #0
   1f9cc:	beq	1fa48 <flatcc_builder_table_add_union@@Base+0xd0>
   1f9d0:	str	r7, [r0]
   1f9d4:	sub	r1, r6, #1
   1f9d8:	mov	r0, r5
   1f9dc:	mov	r2, #1
   1f9e0:	mov	r3, #1
   1f9e4:	bl	1fb8c <flatcc_builder_table_add@@Base>
   1f9e8:	cmp	r0, #0
   1f9ec:	strbne	r4, [r0]
   1f9f0:	movne	r0, #0
   1f9f4:	popne	{r4, r5, r6, r7, fp, pc}
   1f9f8:	movw	r0, #25521	; 0x63b1
   1f9fc:	movw	r1, #22566	; 0x5826
   1fa00:	movw	r3, #25389	; 0x632d
   1fa04:	movw	r2, #1526	; 0x5f6
   1fa08:	movt	r0, #2
   1fa0c:	movt	r1, #2
   1fa10:	movt	r3, #2
   1fa14:	bl	12f88 <__assert_fail@plt>
   1fa18:	movw	r0, #24635	; 0x603b
   1fa1c:	movw	r1, #22566	; 0x5826
   1fa20:	movw	r3, #25389	; 0x632d
   1fa24:	movw	r2, #1518	; 0x5ee
   1fa28:	movt	r0, #2
   1fa2c:	b	1fa0c <flatcc_builder_table_add_union@@Base+0x94>
   1fa30:	movw	r0, #25477	; 0x6385
   1fa34:	movw	r1, #22566	; 0x5826
   1fa38:	movw	r3, #25389	; 0x632d
   1fa3c:	movw	r2, #1519	; 0x5ef
   1fa40:	movt	r0, #2
   1fa44:	b	1fa0c <flatcc_builder_table_add_union@@Base+0x94>
   1fa48:	movw	r0, #25511	; 0x63a7
   1fa4c:	movw	r1, #22566	; 0x5826
   1fa50:	movw	r3, #25389	; 0x632d
   1fa54:	movw	r2, #1522	; 0x5f2
   1fa58:	movt	r0, #2
   1fa5c:	b	1fa0c <flatcc_builder_table_add_union@@Base+0x94>

0001fa60 <flatcc_builder_table_add_offset@@Base>:
   1fa60:	push	{r4, r5, r6, r7, fp, lr}
   1fa64:	add	fp, sp, #16
   1fa68:	mov	r4, r0
   1fa6c:	ldr	r0, [r0, #32]
   1fa70:	ldrh	r0, [r0, #14]
   1fa74:	cmp	r0, #3
   1fa78:	bne	1fb3c <flatcc_builder_table_add_offset@@Base+0xdc>
   1fa7c:	movw	r0, #32765	; 0x7ffd
   1fa80:	mov	r5, r1
   1fa84:	cmp	r1, r0
   1fa88:	bcs	1fb54 <flatcc_builder_table_add_offset@@Base+0xf4>
   1fa8c:	ldr	r0, [r4, #4]
   1fa90:	add	r1, r0, r5, lsl #1
   1fa94:	ldrh	r1, [r1]
   1fa98:	cmp	r1, #0
   1fa9c:	bne	1fb6c <flatcc_builder_table_add_offset@@Base+0x10c>
   1faa0:	ldr	r2, [r4, #20]
   1faa4:	ldr	r1, [r4, #12]
   1faa8:	ldr	r3, [r4, #24]
   1faac:	add	r2, r2, #3
   1fab0:	eor	r1, r1, r5
   1fab4:	bic	r7, r2, #3
   1fab8:	movw	r2, #31153	; 0x79b1
   1fabc:	movt	r2, #40503	; 0x9e37
   1fac0:	add	r6, r7, #4
   1fac4:	cmp	r6, r3
   1fac8:	str	r6, [r4, #20]
   1facc:	mul	r1, r1, r2
   1fad0:	eor	r1, r1, #4
   1fad4:	mul	r1, r1, r2
   1fad8:	str	r1, [r4, #12]
   1fadc:	bls	1fb04 <flatcc_builder_table_add_offset@@Base+0xa4>
   1fae0:	mov	r0, r4
   1fae4:	mov	r1, r6
   1fae8:	movw	r2, #65532	; 0xfffc
   1faec:	bl	20a14 <flatcc_builder_get_emit_context@@Base+0x8>
   1faf0:	mov	r1, r0
   1faf4:	mov	r0, #0
   1faf8:	cmp	r1, #0
   1fafc:	popne	{r4, r5, r6, r7, fp, pc}
   1fb00:	ldr	r0, [r4, #4]
   1fb04:	uxth	r1, r5
   1fb08:	add	r0, r0, r1, lsl #1
   1fb0c:	strh	r6, [r0]
   1fb10:	ldrh	r0, [r4, #8]
   1fb14:	cmp	r0, r1
   1fb18:	addls	r0, r5, #1
   1fb1c:	strhls	r0, [r4, #8]
   1fb20:	ldr	r0, [r4]
   1fb24:	add	r1, r0, #2
   1fb28:	str	r1, [r4]
   1fb2c:	strh	r7, [r0]
   1fb30:	ldr	r0, [r4, #16]
   1fb34:	add	r0, r0, r7
   1fb38:	pop	{r4, r5, r6, r7, fp, pc}
   1fb3c:	movw	r0, #24635	; 0x603b
   1fb40:	movw	r1, #22566	; 0x5826
   1fb44:	movw	r3, #26415	; 0x672f
   1fb48:	movw	r2, #1811	; 0x713
   1fb4c:	movt	r0, #2
   1fb50:	b	1fb80 <flatcc_builder_table_add_offset@@Base+0x120>
   1fb54:	movw	r0, #26287	; 0x66af
   1fb58:	movw	r1, #22566	; 0x5826
   1fb5c:	movw	r3, #26415	; 0x672f
   1fb60:	movw	r2, #1812	; 0x714
   1fb64:	movt	r0, #2
   1fb68:	b	1fb80 <flatcc_builder_table_add_offset@@Base+0x120>
   1fb6c:	movw	r0, #27084	; 0x69cc
   1fb70:	movw	r1, #22566	; 0x5826
   1fb74:	movw	r3, #26415	; 0x672f
   1fb78:	movw	r2, #1819	; 0x71b
   1fb7c:	movt	r0, #2
   1fb80:	movt	r1, #2
   1fb84:	movt	r3, #2
   1fb88:	bl	12f88 <__assert_fail@plt>

0001fb8c <flatcc_builder_table_add@@Base>:
   1fb8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fb90:	add	fp, sp, #24
   1fb94:	mov	r4, r0
   1fb98:	ldr	r0, [r0, #32]
   1fb9c:	ldrh	r0, [r0, #14]
   1fba0:	cmp	r0, #3
   1fba4:	bne	1fc74 <flatcc_builder_table_add@@Base+0xe8>
   1fba8:	movw	r0, #32765	; 0x7ffd
   1fbac:	mov	r8, r1
   1fbb0:	cmp	r1, r0
   1fbb4:	bcs	1fc8c <flatcc_builder_table_add@@Base+0x100>
   1fbb8:	ldrh	r0, [r4, #130]	; 0x82
   1fbbc:	cmp	r0, r3
   1fbc0:	strhcc	r3, [r4, #130]	; 0x82
   1fbc4:	ldr	r0, [r4, #4]
   1fbc8:	add	r1, r0, r8, lsl #1
   1fbcc:	ldrh	r1, [r1]
   1fbd0:	cmp	r1, #0
   1fbd4:	bne	1fca4 <flatcc_builder_table_add@@Base+0x118>
   1fbd8:	ldr	r1, [r4, #12]
   1fbdc:	movw	r7, #31153	; 0x79b1
   1fbe0:	ldr	r6, [r4, #20]
   1fbe4:	ldr	r5, [r4, #24]
   1fbe8:	movt	r7, #40503	; 0x9e37
   1fbec:	eor	r1, r1, r8
   1fbf0:	mul	r1, r1, r7
   1fbf4:	eor	r1, r1, r2
   1fbf8:	mul	r1, r1, r7
   1fbfc:	str	r1, [r4, #12]
   1fc00:	add	r1, r3, r6
   1fc04:	rsb	r3, r3, #0
   1fc08:	sub	r1, r1, #1
   1fc0c:	and	r6, r1, r3
   1fc10:	add	r1, r6, r2
   1fc14:	cmp	r1, r5
   1fc18:	str	r1, [r4, #20]
   1fc1c:	bcc	1fc48 <flatcc_builder_table_add@@Base+0xbc>
   1fc20:	add	r1, r1, #1
   1fc24:	mov	r0, r4
   1fc28:	movw	r2, #65532	; 0xfffc
   1fc2c:	bl	20a14 <flatcc_builder_get_emit_context@@Base+0x8>
   1fc30:	mov	r1, r0
   1fc34:	mov	r0, #0
   1fc38:	cmp	r1, #0
   1fc3c:	beq	1fc44 <flatcc_builder_table_add@@Base+0xb8>
   1fc40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fc44:	ldr	r0, [r4, #4]
   1fc48:	uxth	r1, r8
   1fc4c:	add	r2, r6, #4
   1fc50:	add	r0, r0, r1, lsl #1
   1fc54:	strh	r2, [r0]
   1fc58:	ldrh	r0, [r4, #8]
   1fc5c:	cmp	r0, r1
   1fc60:	addls	r0, r8, #1
   1fc64:	strhls	r0, [r4, #8]
   1fc68:	ldr	r0, [r4, #16]
   1fc6c:	add	r0, r0, r6
   1fc70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fc74:	movw	r0, #24635	; 0x603b
   1fc78:	movw	r1, #22566	; 0x5826
   1fc7c:	movw	r3, #26213	; 0x6665
   1fc80:	movw	r2, #1773	; 0x6ed
   1fc84:	movt	r0, #2
   1fc88:	b	1fcb8 <flatcc_builder_table_add@@Base+0x12c>
   1fc8c:	movw	r0, #26287	; 0x66af
   1fc90:	movw	r1, #22566	; 0x5826
   1fc94:	movw	r3, #26213	; 0x6665
   1fc98:	movw	r2, #1774	; 0x6ee
   1fc9c:	movt	r0, #2
   1fca0:	b	1fcb8 <flatcc_builder_table_add@@Base+0x12c>
   1fca4:	movw	r0, #27084	; 0x69cc
   1fca8:	movw	r1, #22566	; 0x5826
   1fcac:	movw	r3, #26213	; 0x6665
   1fcb0:	movw	r2, #1784	; 0x6f8
   1fcb4:	movt	r0, #2
   1fcb8:	movt	r1, #2
   1fcbc:	movt	r3, #2
   1fcc0:	bl	12f88 <__assert_fail@plt>

0001fcc4 <flatcc_builder_table_add_union_vector@@Base>:
   1fcc4:	push	{r4, r5, r6, r7, fp, lr}
   1fcc8:	add	fp, sp, #16
   1fccc:	mov	r6, r0
   1fcd0:	ldr	r0, [r0, #32]
   1fcd4:	ldrh	r0, [r0, #14]
   1fcd8:	cmp	r0, #3
   1fcdc:	bne	1fd48 <flatcc_builder_table_add_union_vector@@Base+0x84>
   1fce0:	mov	r5, r1
   1fce4:	clz	r1, r3
   1fce8:	cmp	r2, #0
   1fcec:	mov	r0, r2
   1fcf0:	mov	r4, r3
   1fcf4:	mov	r7, r2
   1fcf8:	movwne	r0, #1
   1fcfc:	lsr	r1, r1, #5
   1fd00:	teq	r1, r0
   1fd04:	beq	1fd60 <flatcc_builder_table_add_union_vector@@Base+0x9c>
   1fd08:	cmp	r7, #0
   1fd0c:	beq	1fd40 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   1fd10:	sub	r1, r5, #1
   1fd14:	mov	r0, r6
   1fd18:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1fd1c:	cmp	r0, #0
   1fd20:	beq	1fd78 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   1fd24:	str	r7, [r0]
   1fd28:	mov	r0, r6
   1fd2c:	mov	r1, r5
   1fd30:	bl	1fa60 <flatcc_builder_table_add_offset@@Base>
   1fd34:	cmp	r0, #0
   1fd38:	beq	1fd8c <flatcc_builder_table_add_union_vector@@Base+0xc8>
   1fd3c:	str	r4, [r0]
   1fd40:	mov	r0, #0
   1fd44:	pop	{r4, r5, r6, r7, fp, pc}
   1fd48:	movw	r0, #24635	; 0x603b
   1fd4c:	movw	r1, #22566	; 0x5826
   1fd50:	movw	r3, #25533	; 0x63bd
   1fd54:	mov	r2, #1536	; 0x600
   1fd58:	movt	r0, #2
   1fd5c:	b	1fda0 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1fd60:	movw	r0, #25632	; 0x6420
   1fd64:	movw	r1, #22566	; 0x5826
   1fd68:	movw	r3, #25533	; 0x63bd
   1fd6c:	movw	r2, #1537	; 0x601
   1fd70:	movt	r0, #2
   1fd74:	b	1fda0 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1fd78:	movw	r0, #25511	; 0x63a7
   1fd7c:	movw	r1, #22566	; 0x5826
   1fd80:	movw	r3, #25533	; 0x63bd
   1fd84:	movw	r2, #1540	; 0x604
   1fd88:	b	1fd9c <flatcc_builder_table_add_union_vector@@Base+0xd8>
   1fd8c:	movw	r0, #25511	; 0x63a7
   1fd90:	movw	r1, #22566	; 0x5826
   1fd94:	movw	r3, #25533	; 0x63bd
   1fd98:	movw	r2, #1544	; 0x608
   1fd9c:	movt	r0, #2
   1fda0:	movt	r1, #2
   1fda4:	movt	r3, #2
   1fda8:	bl	12f88 <__assert_fail@plt>

0001fdac <flatcc_builder_create_union_vector@@Base>:
   1fdac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fdb0:	add	fp, sp, #28
   1fdb4:	sub	sp, sp, #20
   1fdb8:	mov	sl, r0
   1fdbc:	mov	r0, #0
   1fdc0:	mov	r9, r3
   1fdc4:	mov	r7, r2
   1fdc8:	mov	r4, r1
   1fdcc:	str	r0, [sl]
   1fdd0:	str	r0, [sl, #4]
   1fdd4:	mov	r0, r1
   1fdd8:	bl	1e600 <flatcc_builder_start_offset_vector@@Base>
   1fddc:	cmp	r0, #0
   1fde0:	beq	1fdec <flatcc_builder_create_union_vector@@Base+0x40>
   1fde4:	sub	sp, fp, #28
   1fde8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fdec:	mov	r0, r4
   1fdf0:	mov	r1, r9
   1fdf4:	bl	1dfd4 <flatcc_builder_extend_offset_vector@@Base>
   1fdf8:	cmp	r0, #0
   1fdfc:	beq	1fde4 <flatcc_builder_create_union_vector@@Base+0x38>
   1fe00:	ldr	r8, [r4, #20]
   1fe04:	ldr	r1, [r4, #24]
   1fe08:	add	r0, r8, r9
   1fe0c:	cmp	r0, r1
   1fe10:	str	r0, [r4, #20]
   1fe14:	bcc	1fe30 <flatcc_builder_create_union_vector@@Base+0x84>
   1fe18:	add	r1, r0, #1
   1fe1c:	mov	r0, r4
   1fe20:	mvn	r2, #3
   1fe24:	bl	20a14 <flatcc_builder_get_emit_context@@Base+0x8>
   1fe28:	cmp	r0, #0
   1fe2c:	bne	1fde4 <flatcc_builder_create_union_vector@@Base+0x38>
   1fe30:	ldr	r3, [r4, #16]
   1fe34:	adds	r2, r3, r8
   1fe38:	beq	1fde4 <flatcc_builder_create_union_vector@@Base+0x38>
   1fe3c:	cmp	r9, #0
   1fe40:	beq	1fe70 <flatcc_builder_create_union_vector@@Base+0xc4>
   1fe44:	add	r0, r7, #4
   1fe48:	mov	r1, r2
   1fe4c:	mov	r7, r3
   1fe50:	mov	r6, r9
   1fe54:	ldrb	r5, [r0, #-4]
   1fe58:	subs	r6, r6, #1
   1fe5c:	strb	r5, [r1], #1
   1fe60:	ldr	r5, [r0]
   1fe64:	add	r0, r0, #8
   1fe68:	str	r5, [r7], #4
   1fe6c:	bne	1fe54 <flatcc_builder_create_union_vector@@Base+0xa8>
   1fe70:	add	r0, sp, #8
   1fe74:	mov	r1, r4
   1fe78:	str	r9, [sp]
   1fe7c:	bl	1ff04 <flatcc_builder_create_union_vector_direct@@Base>
   1fe80:	ldr	r0, [sp, #8]
   1fe84:	ldr	r1, [sp, #12]
   1fe88:	stm	sl, {r0, r1}
   1fe8c:	mov	r1, #0
   1fe90:	ldr	r0, [r4, #16]
   1fe94:	ldr	r2, [r4, #20]
   1fe98:	bl	12f40 <memset@plt>
   1fe9c:	ldr	r0, [r4, #32]
   1fea0:	ldr	r1, [r4, #60]	; 0x3c
   1fea4:	ldr	r2, [r4, #64]	; 0x40
   1fea8:	ldr	r3, [r0, #8]
   1feac:	str	r3, [r4, #20]
   1feb0:	ldr	r3, [r0]
   1feb4:	str	r3, [r4, #28]
   1feb8:	add	r1, r1, r3
   1febc:	ldr	r7, [r0, #4]
   1fec0:	str	r1, [r4, #16]
   1fec4:	sub	r1, r2, r3
   1fec8:	cmp	r1, r7
   1fecc:	movhi	r1, r7
   1fed0:	str	r1, [r4, #24]
   1fed4:	ldrh	r1, [r4, #130]	; 0x82
   1fed8:	ldrh	r2, [r4, #128]	; 0x80
   1fedc:	cmp	r2, r1
   1fee0:	strhcc	r1, [r4, #128]	; 0x80
   1fee4:	ldrh	r1, [r0, #12]
   1fee8:	sub	r0, r0, #36	; 0x24
   1feec:	str	r0, [r4, #32]
   1fef0:	strh	r1, [r4, #130]	; 0x82
   1fef4:	ldr	r0, [r4, #156]	; 0x9c
   1fef8:	sub	r0, r0, #1
   1fefc:	str	r0, [r4, #156]	; 0x9c
   1ff00:	b	1fde4 <flatcc_builder_create_union_vector@@Base+0x38>

0001ff04 <flatcc_builder_create_union_vector_direct@@Base>:
   1ff04:	push	{r4, r5, r6, r7, fp, lr}
   1ff08:	add	fp, sp, #16
   1ff0c:	sub	sp, sp, #8
   1ff10:	ldr	r7, [fp, #8]
   1ff14:	mov	r5, r2
   1ff18:	mov	r4, r0
   1ff1c:	mov	r0, #0
   1ff20:	mov	r6, r1
   1ff24:	str	r0, [r4]
   1ff28:	str	r0, [r4, #4]
   1ff2c:	mov	r0, r1
   1ff30:	mov	r1, r3
   1ff34:	mov	r3, r5
   1ff38:	mov	r2, r7
   1ff3c:	bl	1f6ac <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1ff40:	cmp	r0, #0
   1ff44:	str	r0, [r4, #4]
   1ff48:	beq	1ff74 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   1ff4c:	mvn	r0, #0
   1ff50:	mov	r1, #1
   1ff54:	mov	r2, r7
   1ff58:	mov	r3, #1
   1ff5c:	str	r1, [sp]
   1ff60:	str	r0, [sp, #4]
   1ff64:	mov	r0, r6
   1ff68:	mov	r1, r5
   1ff6c:	bl	1f458 <flatcc_builder_create_vector@@Base>
   1ff70:	str	r0, [r4]
   1ff74:	sub	sp, fp, #16
   1ff78:	pop	{r4, r5, r6, r7, fp, pc}

0001ff7c <flatcc_builder_start_union_vector@@Base>:
   1ff7c:	push	{r4, sl, fp, lr}
   1ff80:	add	fp, sp, #8
   1ff84:	mov	r1, #4
   1ff88:	mov	r4, r0
   1ff8c:	bl	1d9a0 <flatcc_builder_start_buffer@@Base+0xbc>
   1ff90:	mov	r1, r0
   1ff94:	mvn	r0, #0
   1ff98:	cmp	r1, #0
   1ff9c:	popne	{r4, sl, fp, pc}
   1ffa0:	ldr	r0, [r4, #32]
   1ffa4:	mov	r1, #8
   1ffa8:	mov	r2, #7
   1ffac:	str	r1, [r0, #16]
   1ffb0:	mov	r0, #0
   1ffb4:	ldr	r1, [r4, #32]
   1ffb8:	str	r0, [r1, #20]
   1ffbc:	ldr	r1, [r4, #32]
   1ffc0:	strh	r2, [r1, #14]
   1ffc4:	ldr	r2, [r4, #28]
   1ffc8:	ldr	r3, [r4, #60]	; 0x3c
   1ffcc:	ldr	ip, [r4, #64]	; 0x40
   1ffd0:	add	r3, r3, r2
   1ffd4:	sub	r2, ip, r2
   1ffd8:	str	r3, [r4, #16]
   1ffdc:	mvn	r3, #3
   1ffe0:	cmn	r2, #4
   1ffe4:	movcs	r2, r3
   1ffe8:	str	r2, [r4, #24]
   1ffec:	str	r3, [r1, #4]
   1fff0:	pop	{r4, sl, fp, pc}

0001fff4 <flatcc_builder_end_union_vector@@Base>:
   1fff4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fff8:	add	fp, sp, #24
   1fffc:	sub	sp, sp, #16
   20000:	mov	r8, r0
   20004:	mov	r0, #0
   20008:	mov	r4, r1
   2000c:	str	r0, [r8]
   20010:	str	r0, [r8, #4]
   20014:	ldr	r0, [r1, #32]
   20018:	ldrh	r1, [r0, #14]
   2001c:	cmp	r1, #7
   20020:	bne	20138 <flatcc_builder_end_union_vector@@Base+0x144>
   20024:	ldr	r9, [r0, #20]
   20028:	ldr	r7, [r4, #20]
   2002c:	ldr	r1, [r4, #24]
   20030:	add	r0, r9, r9, lsl #2
   20034:	add	r0, r7, r0
   20038:	cmp	r0, r1
   2003c:	str	r0, [r4, #20]
   20040:	bcc	2005c <flatcc_builder_end_union_vector@@Base+0x68>
   20044:	add	r1, r0, #1
   20048:	mov	r0, r4
   2004c:	mvn	r2, #3
   20050:	bl	20a14 <flatcc_builder_get_emit_context@@Base+0x8>
   20054:	cmp	r0, #0
   20058:	bne	20130 <flatcc_builder_end_union_vector@@Base+0x13c>
   2005c:	ldr	r0, [r4, #16]
   20060:	adds	r3, r0, r7
   20064:	beq	20130 <flatcc_builder_end_union_vector@@Base+0x13c>
   20068:	add	r2, r3, r9, lsl #2
   2006c:	cmp	r9, #0
   20070:	beq	200a0 <flatcc_builder_end_union_vector@@Base+0xac>
   20074:	add	r0, r0, #4
   20078:	mov	r1, r2
   2007c:	mov	r7, r3
   20080:	mov	r6, r9
   20084:	ldrb	r5, [r0, #-4]
   20088:	subs	r6, r6, #1
   2008c:	strb	r5, [r1], #1
   20090:	ldr	r5, [r0]
   20094:	add	r0, r0, #8
   20098:	str	r5, [r7], #4
   2009c:	bne	20084 <flatcc_builder_end_union_vector@@Base+0x90>
   200a0:	add	r0, sp, #8
   200a4:	mov	r1, r4
   200a8:	str	r9, [sp]
   200ac:	bl	1ff04 <flatcc_builder_create_union_vector_direct@@Base>
   200b0:	ldr	r0, [sp, #8]
   200b4:	ldr	r1, [sp, #12]
   200b8:	stm	r8, {r0, r1}
   200bc:	mov	r1, #0
   200c0:	ldr	r0, [r4, #16]
   200c4:	ldr	r2, [r4, #20]
   200c8:	bl	12f40 <memset@plt>
   200cc:	ldr	r0, [r4, #32]
   200d0:	ldr	r1, [r4, #60]	; 0x3c
   200d4:	ldr	r2, [r4, #64]	; 0x40
   200d8:	ldr	r3, [r0, #8]
   200dc:	str	r3, [r4, #20]
   200e0:	ldr	r3, [r0]
   200e4:	str	r3, [r4, #28]
   200e8:	add	r1, r1, r3
   200ec:	ldr	r7, [r0, #4]
   200f0:	str	r1, [r4, #16]
   200f4:	sub	r1, r2, r3
   200f8:	cmp	r1, r7
   200fc:	movhi	r1, r7
   20100:	str	r1, [r4, #24]
   20104:	ldrh	r1, [r4, #130]	; 0x82
   20108:	ldrh	r2, [r4, #128]	; 0x80
   2010c:	cmp	r2, r1
   20110:	strhcc	r1, [r4, #128]	; 0x80
   20114:	ldrh	r1, [r0, #12]
   20118:	sub	r0, r0, #36	; 0x24
   2011c:	str	r0, [r4, #32]
   20120:	strh	r1, [r4, #130]	; 0x82
   20124:	ldr	r0, [r4, #156]	; 0x9c
   20128:	sub	r0, r0, #1
   2012c:	str	r0, [r4, #156]	; 0x9c
   20130:	sub	sp, fp, #24
   20134:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20138:	movw	r0, #25672	; 0x6448
   2013c:	movw	r1, #22566	; 0x5826
   20140:	movw	r3, #25722	; 0x647a
   20144:	movw	r2, #1617	; 0x651
   20148:	movt	r0, #2
   2014c:	movt	r1, #2
   20150:	movt	r3, #2
   20154:	bl	12f88 <__assert_fail@plt>

00020158 <flatcc_builder_union_vector_count@@Base>:
   20158:	ldr	r0, [r0, #32]
   2015c:	ldr	r0, [r0, #20]
   20160:	bx	lr

00020164 <flatcc_builder_union_vector_edit@@Base>:
   20164:	ldr	r0, [r0, #16]
   20168:	bx	lr

0002016c <flatcc_builder_extend_union_vector@@Base>:
   2016c:	push	{r4, r5, fp, lr}
   20170:	add	fp, sp, #8
   20174:	mov	r4, r0
   20178:	ldr	r0, [r0, #32]
   2017c:	ldr	r2, [r0, #20]
   20180:	adds	r2, r2, r1
   20184:	cmpcc	r2, #536870912	; 0x20000000
   20188:	bcc	201ac <flatcc_builder_extend_union_vector@@Base+0x40>
   2018c:	movw	r0, #26837	; 0x68d5
   20190:	movw	r1, #22566	; 0x5826
   20194:	movw	r3, #26864	; 0x68f0
   20198:	mov	r2, #892	; 0x37c
   2019c:	movt	r0, #2
   201a0:	movt	r1, #2
   201a4:	movt	r3, #2
   201a8:	bl	12f88 <__assert_fail@plt>
   201ac:	str	r2, [r0, #20]
   201b0:	ldr	r5, [r4, #20]
   201b4:	ldr	r2, [r4, #24]
   201b8:	add	r0, r5, r1, lsl #3
   201bc:	cmp	r0, r2
   201c0:	str	r0, [r4, #20]
   201c4:	bcc	201e8 <flatcc_builder_extend_union_vector@@Base+0x7c>
   201c8:	add	r1, r0, #1
   201cc:	mov	r0, r4
   201d0:	mvn	r2, #3
   201d4:	bl	20a14 <flatcc_builder_get_emit_context@@Base+0x8>
   201d8:	mov	r1, r0
   201dc:	mov	r0, #0
   201e0:	cmp	r1, #0
   201e4:	popne	{r4, r5, fp, pc}
   201e8:	ldr	r0, [r4, #16]
   201ec:	add	r0, r0, r5
   201f0:	pop	{r4, r5, fp, pc}

000201f4 <flatcc_builder_truncate_union_vector@@Base>:
   201f4:	push	{fp, lr}
   201f8:	mov	fp, sp
   201fc:	ldr	r2, [r0, #32]
   20200:	ldrh	r3, [r2, #14]
   20204:	cmp	r3, #7
   20208:	bne	20250 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   2020c:	ldr	r3, [r2, #20]
   20210:	cmp	r3, r1
   20214:	bcc	20268 <flatcc_builder_truncate_union_vector@@Base+0x74>
   20218:	sub	r3, r3, r1
   2021c:	str	r3, [r2, #20]
   20220:	ldr	r2, [r0, #32]
   20224:	ldr	r3, [r0, #20]
   20228:	ldr	ip, [r0, #16]
   2022c:	ldr	r2, [r2, #16]
   20230:	mls	r3, r2, r1, r3
   20234:	mul	r2, r2, r1
   20238:	mov	r1, #0
   2023c:	str	r3, [r0, #20]
   20240:	add	r0, ip, r3
   20244:	bl	12f40 <memset@plt>
   20248:	mov	r0, #0
   2024c:	pop	{fp, pc}
   20250:	movw	r0, #25672	; 0x6448
   20254:	movw	r1, #22566	; 0x5826
   20258:	movw	r3, #25805	; 0x64cd
   2025c:	movw	r2, #1665	; 0x681
   20260:	movt	r0, #2
   20264:	b	2027c <flatcc_builder_truncate_union_vector@@Base+0x88>
   20268:	movw	r0, #24236	; 0x5eac
   2026c:	movw	r1, #22566	; 0x5826
   20270:	movw	r3, #25805	; 0x64cd
   20274:	movw	r2, #1666	; 0x682
   20278:	movt	r0, #2
   2027c:	movt	r1, #2
   20280:	movt	r3, #2
   20284:	bl	12f88 <__assert_fail@plt>

00020288 <flatcc_builder_union_vector_push@@Base>:
   20288:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2028c:	add	fp, sp, #24
   20290:	mov	r7, r0
   20294:	ldr	r0, [r0, #32]
   20298:	mov	r5, r1
   2029c:	ldrh	r1, [r0, #14]
   202a0:	cmp	r1, #7
   202a4:	bne	2030c <flatcc_builder_union_vector_push@@Base+0x84>
   202a8:	ldr	r1, [r0, #20]
   202ac:	mov	r6, #0
   202b0:	cmn	r1, #-536870911	; 0xe0000001
   202b4:	beq	20304 <flatcc_builder_union_vector_push@@Base+0x7c>
   202b8:	add	r1, r1, #1
   202bc:	mov	r8, r2
   202c0:	str	r1, [r0, #20]
   202c4:	ldr	r4, [r7, #20]
   202c8:	ldr	r0, [r7, #24]
   202cc:	add	r1, r4, #8
   202d0:	cmp	r1, r0
   202d4:	str	r1, [r7, #20]
   202d8:	bcc	202f4 <flatcc_builder_union_vector_push@@Base+0x6c>
   202dc:	add	r1, r4, #9
   202e0:	mov	r0, r7
   202e4:	mvn	r2, #3
   202e8:	bl	20a14 <flatcc_builder_get_emit_context@@Base+0x8>
   202ec:	cmp	r0, #0
   202f0:	bne	20304 <flatcc_builder_union_vector_push@@Base+0x7c>
   202f4:	ldr	r0, [r7, #16]
   202f8:	adds	r0, r0, r4
   202fc:	movne	r6, r0
   20300:	stmne	r0, {r5, r8}
   20304:	mov	r0, r6
   20308:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2030c:	movw	r0, #25672	; 0x6448
   20310:	movw	r1, #22566	; 0x5826
   20314:	movw	r3, #25874	; 0x6512
   20318:	movw	r2, #1677	; 0x68d
   2031c:	movt	r0, #2
   20320:	movt	r1, #2
   20324:	movt	r3, #2
   20328:	bl	12f88 <__assert_fail@plt>

0002032c <flatcc_builder_append_union_vector@@Base>:
   2032c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20330:	add	fp, sp, #24
   20334:	mov	r6, r0
   20338:	ldr	r0, [r0, #32]
   2033c:	mov	r8, r1
   20340:	ldrh	r1, [r0, #14]
   20344:	cmp	r1, #7
   20348:	bne	203e4 <flatcc_builder_append_union_vector@@Base+0xb8>
   2034c:	ldr	r1, [r0, #20]
   20350:	mov	r5, r2
   20354:	adds	r1, r1, r2
   20358:	cmpcc	r1, #536870912	; 0x20000000
   2035c:	bcc	20380 <flatcc_builder_append_union_vector@@Base+0x54>
   20360:	movw	r0, #26837	; 0x68d5
   20364:	movw	r1, #22566	; 0x5826
   20368:	movw	r3, #26864	; 0x68f0
   2036c:	mov	r2, #892	; 0x37c
   20370:	movt	r0, #2
   20374:	movt	r1, #2
   20378:	movt	r3, #2
   2037c:	bl	12f88 <__assert_fail@plt>
   20380:	str	r1, [r0, #20]
   20384:	ldr	r4, [r6, #20]
   20388:	ldr	r1, [r6, #24]
   2038c:	add	r0, r4, r5, lsl #3
   20390:	cmp	r0, r1
   20394:	str	r0, [r6, #20]
   20398:	bcc	203b8 <flatcc_builder_append_union_vector@@Base+0x8c>
   2039c:	add	r1, r0, #1
   203a0:	mov	r0, r6
   203a4:	mvn	r2, #3
   203a8:	bl	20a14 <flatcc_builder_get_emit_context@@Base+0x8>
   203ac:	mov	r7, #0
   203b0:	cmp	r0, #0
   203b4:	bne	203dc <flatcc_builder_append_union_vector@@Base+0xb0>
   203b8:	ldr	r0, [r6, #16]
   203bc:	adds	r7, r0, r4
   203c0:	beq	203d8 <flatcc_builder_append_union_vector@@Base+0xac>
   203c4:	lsl	r2, r5, #3
   203c8:	mov	r0, r7
   203cc:	mov	r1, r8
   203d0:	bl	12eb0 <memcpy@plt>
   203d4:	b	203dc <flatcc_builder_append_union_vector@@Base+0xb0>
   203d8:	mov	r7, #0
   203dc:	mov	r0, r7
   203e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   203e4:	movw	r0, #25672	; 0x6448
   203e8:	movw	r1, #22566	; 0x5826
   203ec:	movw	r3, #25983	; 0x657f
   203f0:	movw	r2, #1692	; 0x69c
   203f4:	movt	r0, #2
   203f8:	movt	r1, #2
   203fc:	movt	r3, #2
   20400:	bl	12f88 <__assert_fail@plt>

00020404 <flatcc_builder_create_string@@Base>:
   20404:	push	{r4, r5, r6, sl, fp, lr}
   20408:	add	fp, sp, #16
   2040c:	sub	sp, sp, #80	; 0x50
   20410:	str	r2, [fp, #-20]	; 0xffffffec
   20414:	mvn	r5, r2
   20418:	mov	r6, r0
   2041c:	sub	r3, fp, #20
   20420:	cmp	r2, #0
   20424:	add	lr, sp, #4
   20428:	ldr	ip, [r0, #136]	; 0x88
   2042c:	mov	r0, #4
   20430:	str	r0, [sp, #16]
   20434:	str	r3, [sp, #12]
   20438:	mov	r3, #1
   2043c:	str	r0, [sp, #4]
   20440:	addne	r0, r2, #4
   20444:	str	r3, [sp, #8]
   20448:	strne	r2, [sp, #24]
   2044c:	movw	r2, #22036	; 0x5614
   20450:	movne	r3, #2
   20454:	strne	r1, [sp, #20]
   20458:	strne	r3, [sp, #8]
   2045c:	strne	r0, [sp, #4]
   20460:	movt	r2, #2
   20464:	add	r5, ip, r5
   20468:	and	r5, r5, #3
   2046c:	add	r5, r5, #1
   20470:	add	r1, r0, r5
   20474:	add	r0, lr, r3, lsl #3
   20478:	str	r1, [sp, #4]
   2047c:	cmp	r1, #0
   20480:	str	r2, [r0, #8]
   20484:	add	r2, r3, #1
   20488:	str	r5, [r0, #12]
   2048c:	str	r2, [sp, #8]
   20490:	ble	204e4 <flatcc_builder_create_string@@Base+0xe0>
   20494:	ldr	r0, [r6, #36]	; 0x24
   20498:	ldr	r4, [r6, #44]	; 0x2c
   2049c:	sub	r5, ip, r1
   204a0:	str	r1, [sp]
   204a4:	add	r1, lr, #8
   204a8:	mov	r3, r5
   204ac:	blx	r4
   204b0:	cmp	r0, #0
   204b4:	streq	r5, [r6, #136]	; 0x88
   204b8:	moveq	r0, r5
   204bc:	subeq	sp, fp, #16
   204c0:	popeq	{r4, r5, r6, sl, fp, pc}
   204c4:	movw	r0, #27084	; 0x69cc
   204c8:	movw	r1, #22566	; 0x5826
   204cc:	movw	r3, #26763	; 0x688b
   204d0:	movw	r2, #651	; 0x28b
   204d4:	movt	r0, #2
   204d8:	movt	r1, #2
   204dc:	movt	r3, #2
   204e0:	bl	12f88 <__assert_fail@plt>
   204e4:	movw	r0, #27084	; 0x69cc
   204e8:	movw	r1, #22566	; 0x5826
   204ec:	movw	r3, #26763	; 0x688b
   204f0:	movw	r2, #647	; 0x287
   204f4:	movt	r0, #2
   204f8:	movt	r1, #2
   204fc:	movt	r3, #2
   20500:	bl	12f88 <__assert_fail@plt>

00020504 <flatcc_builder_create_string_str@@Base>:
   20504:	push	{r4, r5, fp, lr}
   20508:	add	fp, sp, #8
   2050c:	mov	r5, r0
   20510:	mov	r0, r1
   20514:	mov	r4, r1
   20518:	bl	12f1c <strlen@plt>
   2051c:	mov	r2, r0
   20520:	mov	r0, r5
   20524:	mov	r1, r4
   20528:	pop	{r4, r5, fp, lr}
   2052c:	b	20404 <flatcc_builder_create_string@@Base>

00020530 <flatcc_builder_create_string_strn@@Base>:
   20530:	push	{r4, r5, r6, sl, fp, lr}
   20534:	add	fp, sp, #16
   20538:	mov	r6, r0
   2053c:	mov	r5, r1
   20540:	mov	r0, r1
   20544:	mov	r1, #0
   20548:	mov	r4, r2
   2054c:	bl	12f58 <memchr@plt>
   20550:	cmp	r0, #0
   20554:	mov	r1, r5
   20558:	subne	r4, r0, r5
   2055c:	mov	r0, r6
   20560:	mov	r2, r4
   20564:	pop	{r4, r5, r6, sl, fp, lr}
   20568:	b	20404 <flatcc_builder_create_string@@Base>

0002056c <flatcc_builder_end_string@@Base>:
   2056c:	push	{r4, r5, fp, lr}
   20570:	add	fp, sp, #8
   20574:	mov	r4, r0
   20578:	ldr	r0, [r0, #32]
   2057c:	ldrh	r1, [r0, #14]
   20580:	cmp	r1, #6
   20584:	bne	2062c <flatcc_builder_end_string@@Base+0xc0>
   20588:	ldr	r2, [r0, #20]
   2058c:	ldr	r0, [r4, #20]
   20590:	cmp	r2, r0
   20594:	bne	20644 <flatcc_builder_end_string@@Base+0xd8>
   20598:	ldr	r1, [r4, #16]
   2059c:	mov	r0, r4
   205a0:	bl	20404 <flatcc_builder_create_string@@Base>
   205a4:	mov	r5, r0
   205a8:	cmp	r0, #0
   205ac:	beq	20624 <flatcc_builder_end_string@@Base+0xb8>
   205b0:	ldr	r0, [r4, #16]
   205b4:	ldr	r2, [r4, #20]
   205b8:	mov	r1, #0
   205bc:	bl	12f40 <memset@plt>
   205c0:	ldr	r0, [r4, #32]
   205c4:	ldr	r1, [r4, #60]	; 0x3c
   205c8:	ldr	ip, [r4, #64]	; 0x40
   205cc:	ldr	r3, [r0, #8]
   205d0:	str	r3, [r4, #20]
   205d4:	ldr	r3, [r0]
   205d8:	str	r3, [r4, #28]
   205dc:	add	r1, r1, r3
   205e0:	ldr	r2, [r0, #4]
   205e4:	str	r1, [r4, #16]
   205e8:	sub	r1, ip, r3
   205ec:	cmp	r1, r2
   205f0:	movhi	r1, r2
   205f4:	str	r1, [r4, #24]
   205f8:	ldrh	r1, [r4, #130]	; 0x82
   205fc:	ldrh	r2, [r4, #128]	; 0x80
   20600:	cmp	r2, r1
   20604:	strhcc	r1, [r4, #128]	; 0x80
   20608:	ldrh	r1, [r0, #12]
   2060c:	sub	r0, r0, #36	; 0x24
   20610:	str	r0, [r4, #32]
   20614:	strh	r1, [r4, #130]	; 0x82
   20618:	ldr	r0, [r4, #156]	; 0x9c
   2061c:	sub	r0, r0, #1
   20620:	str	r0, [r4, #156]	; 0x9c
   20624:	mov	r0, r5
   20628:	pop	{r4, r5, fp, pc}
   2062c:	movw	r0, #23883	; 0x5d4b
   20630:	movw	r1, #22566	; 0x5826
   20634:	movw	r3, #26110	; 0x65fe
   20638:	movw	r2, #1732	; 0x6c4
   2063c:	movt	r0, #2
   20640:	b	20658 <flatcc_builder_end_string@@Base+0xec>
   20644:	movw	r0, #26177	; 0x6641
   20648:	movw	r1, #22566	; 0x5826
   2064c:	movw	r3, #26110	; 0x65fe
   20650:	movw	r2, #1733	; 0x6c5
   20654:	movt	r0, #2
   20658:	movt	r1, #2
   2065c:	movt	r3, #2
   20660:	bl	12f88 <__assert_fail@plt>

00020664 <flatcc_builder_string_edit@@Base>:
   20664:	ldr	r0, [r0, #16]
   20668:	bx	lr

0002066c <flatcc_builder_string_len@@Base>:
   2066c:	ldr	r0, [r0, #32]
   20670:	ldr	r0, [r0, #20]
   20674:	bx	lr

00020678 <flatcc_builder_table_edit@@Base>:
   20678:	push	{fp, lr}
   2067c:	mov	fp, sp
   20680:	ldr	r2, [r0, #32]
   20684:	ldrh	r2, [r2, #14]
   20688:	cmp	r2, #3
   2068c:	ldreq	r2, [r0, #16]
   20690:	ldreq	r0, [r0, #20]
   20694:	addeq	r0, r2, r0
   20698:	subeq	r0, r0, r1
   2069c:	popeq	{fp, pc}
   206a0:	movw	r0, #24635	; 0x603b
   206a4:	movw	r1, #22566	; 0x5826
   206a8:	movw	r3, #26355	; 0x66f3
   206ac:	movw	r2, #1794	; 0x702
   206b0:	movt	r0, #2
   206b4:	movt	r1, #2
   206b8:	movt	r3, #2
   206bc:	bl	12f88 <__assert_fail@plt>

000206c0 <flatcc_builder_table_add_copy@@Base>:
   206c0:	push	{r4, r5, r6, sl, fp, lr}
   206c4:	add	fp, sp, #16
   206c8:	mov	r4, r3
   206cc:	ldr	r3, [fp, #8]
   206d0:	mov	r5, r2
   206d4:	mov	r2, r4
   206d8:	bl	1fb8c <flatcc_builder_table_add@@Base>
   206dc:	mov	r6, r0
   206e0:	cmp	r0, #0
   206e4:	beq	206f8 <flatcc_builder_table_add_copy@@Base+0x38>
   206e8:	mov	r0, r6
   206ec:	mov	r1, r5
   206f0:	mov	r2, r4
   206f4:	bl	12eb0 <memcpy@plt>
   206f8:	mov	r0, r6
   206fc:	pop	{r4, r5, r6, sl, fp, pc}

00020700 <flatcc_builder_push_buffer_alignment@@Base>:
   20700:	ldrh	r1, [r0, #128]	; 0x80
   20704:	mov	r2, #4
   20708:	strh	r2, [r0, #128]	; 0x80
   2070c:	mov	r0, r1
   20710:	bx	lr

00020714 <flatcc_builder_pop_buffer_alignment@@Base>:
   20714:	ldrh	r2, [r0, #128]	; 0x80
   20718:	cmp	r2, r1
   2071c:	strhcc	r1, [r0, #128]	; 0x80
   20720:	bx	lr

00020724 <flatcc_builder_get_buffer_alignment@@Base>:
   20724:	ldrh	r0, [r0, #128]	; 0x80
   20728:	bx	lr

0002072c <flatcc_builder_set_vtable_clustering@@Base>:
   2072c:	clz	r1, r1
   20730:	lsr	r1, r1, #5
   20734:	str	r1, [r0, #180]	; 0xb4
   20738:	bx	lr

0002073c <flatcc_builder_set_block_align@@Base>:
   2073c:	strh	r1, [r0, #132]	; 0x84
   20740:	bx	lr

00020744 <flatcc_builder_get_level@@Base>:
   20744:	ldr	r0, [r0, #156]	; 0x9c
   20748:	bx	lr

0002074c <flatcc_builder_set_max_level@@Base>:
   2074c:	str	r1, [r0, #176]	; 0xb0
   20750:	ldr	r2, [r0, #160]	; 0xa0
   20754:	cmp	r2, r1
   20758:	strlt	r1, [r0, #160]	; 0xa0
   2075c:	bx	lr

00020760 <flatcc_builder_get_buffer_size@@Base>:
   20760:	ldr	r1, [r0, #136]	; 0x88
   20764:	ldr	r0, [r0, #140]	; 0x8c
   20768:	sub	r0, r0, r1
   2076c:	bx	lr

00020770 <flatcc_builder_get_buffer_start@@Base>:
   20770:	ldr	r0, [r0, #136]	; 0x88
   20774:	bx	lr

00020778 <flatcc_builder_get_buffer_end@@Base>:
   20778:	ldr	r0, [r0, #140]	; 0x8c
   2077c:	bx	lr

00020780 <flatcc_builder_set_vtable_cache_limit@@Base>:
   20780:	str	r1, [r0, #172]	; 0xac
   20784:	bx	lr

00020788 <flatcc_builder_set_identifier@@Base>:
   20788:	movw	r2, #22036	; 0x5614
   2078c:	cmp	r1, #0
   20790:	movt	r2, #2
   20794:	movne	r2, r1
   20798:	ldr	r1, [r2]
   2079c:	str	r1, [r0, #168]	; 0xa8
   207a0:	bx	lr

000207a4 <flatcc_builder_get_type@@Base>:
   207a4:	ldr	r0, [r0, #32]
   207a8:	cmp	r0, #0
   207ac:	ldrhne	r0, [r0, #14]
   207b0:	moveq	r0, #0
   207b4:	bx	lr

000207b8 <flatcc_builder_get_type_at@@Base>:
   207b8:	mov	r2, r0
   207bc:	mov	r0, #0
   207c0:	cmp	r1, #1
   207c4:	blt	207e8 <flatcc_builder_get_type_at@@Base+0x30>
   207c8:	ldr	r3, [r2, #156]	; 0x9c
   207cc:	cmp	r3, r1
   207d0:	bxlt	lr
   207d4:	sub	r0, r1, r3
   207d8:	ldr	r1, [r2, #32]
   207dc:	add	r0, r0, r0, lsl #3
   207e0:	add	r0, r1, r0, lsl #2
   207e4:	ldrh	r0, [r0, #14]
   207e8:	bx	lr

000207ec <flatcc_builder_get_direct_buffer@@Base>:
   207ec:	ldr	r2, [r0, #184]	; 0xb8
   207f0:	cmp	r2, #0
   207f4:	beq	20808 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   207f8:	ldr	r2, [r0, #188]	; 0xbc
   207fc:	ldr	r3, [r0, #192]	; 0xc0
   20800:	cmp	r2, r3
   20804:	beq	20818 <flatcc_builder_get_direct_buffer@@Base+0x2c>
   20808:	mov	r0, #0
   2080c:	cmp	r1, #0
   20810:	strne	r0, [r1]
   20814:	bx	lr
   20818:	cmp	r1, #0
   2081c:	ldrne	r2, [r0, #212]	; 0xd4
   20820:	strne	r2, [r1]
   20824:	ldr	r0, [r0, #196]	; 0xc4
   20828:	bx	lr

0002082c <flatcc_builder_copy_buffer@@Base>:
   2082c:	push	{fp, lr}
   20830:	mov	fp, sp
   20834:	ldr	r3, [r0, #184]	; 0xb8
   20838:	cmp	r3, #0
   2083c:	beq	20870 <flatcc_builder_copy_buffer@@Base+0x44>
   20840:	add	r0, r0, #188	; 0xbc
   20844:	bl	20f38 <flatcc_emitter_copy_buffer@@Base>
   20848:	cmp	r0, #0
   2084c:	popne	{fp, pc}
   20850:	movw	r0, #10884	; 0x2a84
   20854:	movw	r1, #22566	; 0x5826
   20858:	movw	r3, #26494	; 0x677e
   2085c:	movw	r2, #1926	; 0x786
   20860:	movt	r0, #2
   20864:	movt	r1, #2
   20868:	movt	r3, #2
   2086c:	bl	12f88 <__assert_fail@plt>
   20870:	mov	r0, #0
   20874:	pop	{fp, pc}

00020878 <flatcc_builder_finalize_buffer@@Base>:
   20878:	push	{r4, r5, r6, sl, fp, lr}
   2087c:	add	fp, sp, #16
   20880:	mov	r4, r0
   20884:	ldr	r0, [r0, #136]	; 0x88
   20888:	cmp	r1, #0
   2088c:	ldr	r2, [r4, #140]	; 0x8c
   20890:	sub	r5, r2, r0
   20894:	mov	r0, r5
   20898:	strne	r5, [r1]
   2089c:	bl	12eec <malloc@plt>
   208a0:	cmp	r0, #0
   208a4:	beq	208e8 <flatcc_builder_finalize_buffer@@Base+0x70>
   208a8:	mov	r6, r0
   208ac:	mov	r0, r4
   208b0:	mov	r2, r5
   208b4:	mov	r1, r6
   208b8:	bl	2082c <flatcc_builder_copy_buffer@@Base>
   208bc:	cmp	r0, #0
   208c0:	movne	r0, r6
   208c4:	popne	{r4, r5, r6, sl, fp, pc}
   208c8:	movw	r0, #27084	; 0x69cc
   208cc:	movw	r1, #22566	; 0x5826
   208d0:	movw	r3, #26563	; 0x67c3
   208d4:	movw	r2, #1948	; 0x79c
   208d8:	movt	r0, #2
   208dc:	movt	r1, #2
   208e0:	movt	r3, #2
   208e4:	bl	12f88 <__assert_fail@plt>
   208e8:	movw	r0, #27084	; 0x69cc
   208ec:	movw	r1, #22566	; 0x5826
   208f0:	movw	r3, #26563	; 0x67c3
   208f4:	movw	r2, #1944	; 0x798
   208f8:	movt	r0, #2
   208fc:	movt	r1, #2
   20900:	movt	r3, #2
   20904:	bl	12f88 <__assert_fail@plt>

00020908 <flatcc_builder_finalize_aligned_buffer@@Base>:
   20908:	push	{r4, r5, r6, r7, fp, lr}
   2090c:	add	fp, sp, #16
   20910:	sub	sp, sp, #8
   20914:	mov	r5, r0
   20918:	mov	r4, r1
   2091c:	ldr	r0, [r0, #136]	; 0x88
   20920:	ldr	r1, [r5, #140]	; 0x8c
   20924:	cmp	r4, #0
   20928:	sub	r0, r1, r0
   2092c:	mov	r1, #0
   20930:	strne	r0, [r4]
   20934:	ldrh	r2, [r5, #128]	; 0x80
   20938:	str	r1, [sp, #4]
   2093c:	add	r0, r0, r2
   20940:	cmp	r2, #4
   20944:	mov	r1, r2
   20948:	rsb	r2, r2, #0
   2094c:	sub	r0, r0, #1
   20950:	movls	r1, #4
   20954:	and	r7, r0, r2
   20958:	add	r0, sp, #4
   2095c:	mov	r2, r7
   20960:	bl	12f34 <posix_memalign@plt>
   20964:	ldr	r6, [sp, #4]
   20968:	cmp	r0, #0
   2096c:	cmpne	r6, #0
   20970:	bne	20994 <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   20974:	cmp	r6, #0
   20978:	beq	2099c <flatcc_builder_finalize_aligned_buffer@@Base+0x94>
   2097c:	mov	r0, r5
   20980:	mov	r1, r6
   20984:	mov	r2, r7
   20988:	bl	2082c <flatcc_builder_copy_buffer@@Base>
   2098c:	cmp	r0, #0
   20990:	bne	209a8 <flatcc_builder_finalize_aligned_buffer@@Base+0xa0>
   20994:	mov	r0, r6
   20998:	bl	12ea4 <free@plt>
   2099c:	mov	r6, #0
   209a0:	cmp	r4, #0
   209a4:	strne	r6, [r4]
   209a8:	mov	r0, r6
   209ac:	sub	sp, fp, #16
   209b0:	pop	{r4, r5, r6, r7, fp, pc}

000209b4 <flatcc_builder_aligned_alloc@@Base>:
   209b4:	push	{fp, lr}
   209b8:	mov	fp, sp
   209bc:	sub	sp, sp, #8
   209c0:	mov	r2, r1
   209c4:	mov	r1, r0
   209c8:	mov	r0, #0
   209cc:	cmp	r1, #4
   209d0:	str	r0, [sp, #4]
   209d4:	add	r0, sp, #4
   209d8:	movls	r1, #4
   209dc:	bl	12f34 <posix_memalign@plt>
   209e0:	mov	r1, r0
   209e4:	ldr	r0, [sp, #4]
   209e8:	cmp	r1, #0
   209ec:	cmpne	r0, #0
   209f0:	beq	20a00 <flatcc_builder_aligned_alloc@@Base+0x4c>
   209f4:	bl	12ea4 <free@plt>
   209f8:	mov	r0, #0
   209fc:	str	r0, [sp, #4]
   20a00:	mov	sp, fp
   20a04:	pop	{fp, pc}

00020a08 <flatcc_builder_aligned_free@@Base>:
   20a08:	b	12ea4 <free@plt>

00020a0c <flatcc_builder_get_emit_context@@Base>:
   20a0c:	ldr	r0, [r0, #36]	; 0x24
   20a10:	bx	lr
   20a14:	push	{r4, r5, r6, sl, fp, lr}
   20a18:	add	fp, sp, #16
   20a1c:	sub	sp, sp, #8
   20a20:	mov	r6, r2
   20a24:	ldr	r2, [r0, #28]
   20a28:	mov	r5, r0
   20a2c:	ldr	r0, [r0, #40]	; 0x28
   20a30:	mov	r3, #1
   20a34:	ldr	r4, [r5, #48]	; 0x30
   20a38:	str	r3, [sp]
   20a3c:	mov	r3, #1
   20a40:	add	r2, r2, r1
   20a44:	add	r1, r5, #60	; 0x3c
   20a48:	blx	r4
   20a4c:	mov	r1, r0
   20a50:	mvn	r0, #0
   20a54:	cmp	r1, #0
   20a58:	bne	20a8c <flatcc_builder_get_emit_context@@Base+0x80>
   20a5c:	ldr	r0, [r5, #28]
   20a60:	ldr	r2, [r5, #60]	; 0x3c
   20a64:	ldr	r3, [r5, #64]	; 0x40
   20a68:	ldr	r1, [r5, #32]
   20a6c:	add	r2, r2, r0
   20a70:	sub	r0, r3, r0
   20a74:	cmp	r0, r6
   20a78:	str	r2, [r5, #16]
   20a7c:	movhi	r0, r6
   20a80:	str	r0, [r5, #24]
   20a84:	mov	r0, #0
   20a88:	str	r6, [r1, #4]
   20a8c:	sub	sp, fp, #16
   20a90:	pop	{r4, r5, r6, sl, fp, pc}

00020a94 <flatcc_emitter_recycle_page@@Base>:
   20a94:	ldr	r3, [r0]
   20a98:	mov	r2, r0
   20a9c:	mvn	r0, #0
   20aa0:	cmp	r3, r1
   20aa4:	beq	20ae4 <flatcc_emitter_recycle_page@@Base+0x50>
   20aa8:	ldr	r2, [r2, #4]
   20aac:	cmp	r2, r1
   20ab0:	bxeq	lr
   20ab4:	ldr	r0, [r1, #2944]	; 0xb80
   20ab8:	ldr	r2, [r1, #2948]	; 0xb84
   20abc:	str	r2, [r0, #2948]	; 0xb84
   20ac0:	ldr	r2, [r1, #2948]	; 0xb84
   20ac4:	str	r0, [r2, #2944]	; 0xb80
   20ac8:	ldr	r0, [r3, #2948]	; 0xb84
   20acc:	str	r3, [r1, #2944]	; 0xb80
   20ad0:	str	r0, [r1, #2948]	; 0xb84
   20ad4:	str	r1, [r0, #2944]	; 0xb80
   20ad8:	ldr	r0, [r1, #2944]	; 0xb80
   20adc:	str	r1, [r0, #2948]	; 0xb84
   20ae0:	mov	r0, #0
   20ae4:	bx	lr

00020ae8 <flatcc_emitter_reset@@Base>:
   20ae8:	push	{r4, sl, fp, lr}
   20aec:	add	fp, sp, #8
   20af0:	ldr	r1, [r0]
   20af4:	cmp	r1, #0
   20af8:	beq	20bb0 <flatcc_emitter_reset@@Base+0xc8>
   20afc:	mov	r4, r0
   20b00:	add	r2, r1, #1472	; 0x5c0
   20b04:	mov	r0, #1472	; 0x5c0
   20b08:	mov	r3, #0
   20b0c:	stmib	r4, {r1, r2}
   20b10:	str	r0, [r4, #12]
   20b14:	str	r2, [r4, #16]
   20b18:	str	r0, [r4, #20]
   20b1c:	movw	r0, #64064	; 0xfa40
   20b20:	movt	r0, #65535	; 0xffff
   20b24:	str	r0, [r1, #2952]	; 0xb88
   20b28:	ldr	r2, [r4, #32]
   20b2c:	ldr	r0, [r4, #24]
   20b30:	cmp	r2, #0
   20b34:	moveq	r2, r0
   20b38:	streq	r0, [r4, #32]
   20b3c:	str	r3, [r4, #24]
   20b40:	add	r2, r2, r2, lsl #1
   20b44:	lsr	r2, r2, #2
   20b48:	add	r0, r2, r0, lsr #2
   20b4c:	str	r0, [r4, #32]
   20b50:	ldr	r2, [r4, #28]
   20b54:	cmp	r2, r0, lsl #1
   20b58:	bls	20bb0 <flatcc_emitter_reset@@Base+0xc8>
   20b5c:	mov	r2, r1
   20b60:	ldr	r0, [r2, #2944]!	; 0xb80
   20b64:	cmp	r0, r1
   20b68:	popeq	{r4, sl, fp, pc}
   20b6c:	ldr	r3, [r0, #2944]	; 0xb80
   20b70:	str	r3, [r2]
   20b74:	ldr	r2, [r0, #2944]	; 0xb80
   20b78:	str	r1, [r2, #2948]	; 0xb84
   20b7c:	bl	12ea4 <free@plt>
   20b80:	ldr	r0, [r4, #28]
   20b84:	ldr	r1, [r4, #32]
   20b88:	sub	r0, r0, #2944	; 0xb80
   20b8c:	cmp	r0, r1, lsl #1
   20b90:	str	r0, [r4, #28]
   20b94:	bls	20bb0 <flatcc_emitter_reset@@Base+0xc8>
   20b98:	ldr	r1, [r4, #4]
   20b9c:	ldr	r3, [r4]
   20ba0:	mov	r2, r1
   20ba4:	ldr	r0, [r2, #2944]!	; 0xb80
   20ba8:	cmp	r0, r3
   20bac:	bne	20b6c <flatcc_emitter_reset@@Base+0x84>
   20bb0:	pop	{r4, sl, fp, pc}

00020bb4 <flatcc_emitter_clear@@Base>:
   20bb4:	push	{r4, r5, r6, sl, fp, lr}
   20bb8:	add	fp, sp, #16
   20bbc:	ldr	r5, [r0]
   20bc0:	cmp	r5, #0
   20bc4:	beq	20c14 <flatcc_emitter_clear@@Base+0x60>
   20bc8:	mov	r4, r0
   20bcc:	ldr	r0, [r5, #2948]	; 0xb84
   20bd0:	mov	r6, #0
   20bd4:	str	r6, [r0, #2944]	; 0xb80
   20bd8:	ldr	r0, [r5, #2944]	; 0xb80
   20bdc:	cmp	r0, #0
   20be0:	beq	20bf4 <flatcc_emitter_clear@@Base+0x40>
   20be4:	mov	r5, r0
   20be8:	ldr	r0, [r0, #2948]	; 0xb84
   20bec:	bl	12ea4 <free@plt>
   20bf0:	b	20bd8 <flatcc_emitter_clear@@Base+0x24>
   20bf4:	mov	r0, r5
   20bf8:	bl	12ea4 <free@plt>
   20bfc:	vmov.i32	q8, #0	; 0x00000000
   20c00:	add	r0, r4, #16
   20c04:	vst1.32	{d16-d17}, [r0]
   20c08:	mov	r0, #32
   20c0c:	vst1.32	{d16-d17}, [r4], r0
   20c10:	str	r6, [r4]
   20c14:	pop	{r4, r5, r6, sl, fp, pc}

00020c18 <flatcc_emitter@@Base>:
   20c18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c1c:	add	fp, sp, #28
   20c20:	sub	sp, sp, #4
   20c24:	mov	r6, r0
   20c28:	mov	r7, r1
   20c2c:	ldr	r0, [r0, #24]
   20c30:	ldr	r1, [fp, #8]
   20c34:	mov	r4, r2
   20c38:	cmn	r3, #1
   20c3c:	mov	r9, r6
   20c40:	add	r0, r0, r1
   20c44:	str	r0, [r6, #24]
   20c48:	ble	20d84 <flatcc_emitter@@Base+0x16c>
   20c4c:	ldr	r0, [r9, #20]!
   20c50:	cmp	r0, r1
   20c54:	bcs	20ed4 <flatcc_emitter@@Base+0x2bc>
   20c58:	mov	r8, #0
   20c5c:	cmp	r4, #0
   20c60:	beq	20f2c <flatcc_emitter@@Base+0x314>
   20c64:	movw	sl, #64064	; 0xfa40
   20c68:	movt	sl, #65535	; 0xffff
   20c6c:	ldr	r8, [r7, #4]
   20c70:	cmp	r8, #0
   20c74:	beq	20d70 <flatcc_emitter@@Base+0x158>
   20c78:	ldr	r9, [r7]
   20c7c:	cmp	r8, r0
   20c80:	mov	r5, r8
   20c84:	bls	20d3c <flatcc_emitter@@Base+0x124>
   20c88:	mov	r5, r0
   20c8c:	cmp	r5, #0
   20c90:	bne	20d3c <flatcc_emitter@@Base+0x124>
   20c94:	ldr	r5, [r6, #4]
   20c98:	cmp	r5, #0
   20c9c:	beq	20cb0 <flatcc_emitter@@Base+0x98>
   20ca0:	ldr	r0, [r5, #2944]	; 0xb80
   20ca4:	ldr	r1, [r6]
   20ca8:	cmp	r0, r1
   20cac:	bne	20ce8 <flatcc_emitter@@Base+0xd0>
   20cb0:	movw	r0, #2956	; 0xb8c
   20cb4:	bl	12eec <malloc@plt>
   20cb8:	cmp	r0, #0
   20cbc:	beq	20ee4 <flatcc_emitter@@Base+0x2cc>
   20cc0:	ldr	r1, [r6, #28]
   20cc4:	cmp	r5, #0
   20cc8:	add	r1, r1, #2944	; 0xb80
   20ccc:	str	r1, [r6, #28]
   20cd0:	beq	20d0c <flatcc_emitter@@Base+0xf4>
   20cd4:	ldr	r1, [r6]
   20cd8:	str	r1, [r0, #2944]	; 0xb80
   20cdc:	str	r5, [r0, #2948]	; 0xb84
   20ce0:	str	r0, [r1, #2948]	; 0xb84
   20ce4:	str	r0, [r5, #2944]	; 0xb80
   20ce8:	mov	r5, #2944	; 0xb80
   20cec:	str	r0, [r6, #4]
   20cf0:	str	r0, [r6, #16]
   20cf4:	str	r5, [r6, #20]
   20cf8:	ldr	r1, [r0, #2948]	; 0xb84
   20cfc:	ldr	r1, [r1, #2952]	; 0xb88
   20d00:	add	r1, r1, #2944	; 0xb80
   20d04:	str	r1, [r0, #2952]	; 0xb88
   20d08:	b	20d30 <flatcc_emitter@@Base+0x118>
   20d0c:	mov	r5, #1472	; 0x5c0
   20d10:	add	r1, r0, #1472	; 0x5c0
   20d14:	str	r0, [r6]
   20d18:	stmib	r6, {r0, r1, r5}
   20d1c:	str	r1, [r6, #16]
   20d20:	str	r5, [r6, #20]
   20d24:	str	r0, [r0, #2944]	; 0xb80
   20d28:	str	r0, [r0, #2948]	; 0xb84
   20d2c:	str	sl, [r0, #2952]	; 0xb88
   20d30:	cmp	r8, r5
   20d34:	bhi	20c8c <flatcc_emitter@@Base+0x74>
   20d38:	mov	r5, r8
   20d3c:	ldr	r0, [r6, #16]
   20d40:	mov	r1, r9
   20d44:	mov	r2, r5
   20d48:	bl	12eb0 <memcpy@plt>
   20d4c:	ldr	r0, [r6, #16]
   20d50:	ldr	r1, [r6, #20]
   20d54:	add	r9, r9, r5
   20d58:	subs	r8, r8, r5
   20d5c:	add	r2, r0, r5
   20d60:	sub	r0, r1, r5
   20d64:	str	r2, [r6, #16]
   20d68:	str	r0, [r6, #20]
   20d6c:	bne	20c7c <flatcc_emitter@@Base+0x64>
   20d70:	subs	r4, r4, #1
   20d74:	add	r7, r7, #8
   20d78:	bne	20c6c <flatcc_emitter@@Base+0x54>
   20d7c:	mov	r8, #0
   20d80:	b	20f2c <flatcc_emitter@@Base+0x314>
   20d84:	ldr	r0, [r9, #12]!
   20d88:	cmp	r0, r1
   20d8c:	bcs	20eec <flatcc_emitter@@Base+0x2d4>
   20d90:	mov	r8, #0
   20d94:	cmp	r4, #0
   20d98:	beq	20f2c <flatcc_emitter@@Base+0x314>
   20d9c:	add	r0, r7, r4, lsl #3
   20da0:	ldr	sl, [r0, #-4]
   20da4:	sub	r1, r0, #8
   20da8:	str	r1, [sp]
   20dac:	cmp	sl, #0
   20db0:	beq	20ec4 <flatcc_emitter@@Base+0x2ac>
   20db4:	ldr	r0, [sp]
   20db8:	ldr	r0, [r0]
   20dbc:	add	r7, r0, sl
   20dc0:	ldr	r1, [r9]
   20dc4:	cmp	sl, r1
   20dc8:	bls	20e94 <flatcc_emitter@@Base+0x27c>
   20dcc:	cmp	r1, #0
   20dd0:	mov	r5, r1
   20dd4:	bne	20e98 <flatcc_emitter@@Base+0x280>
   20dd8:	ldr	r5, [r6]
   20ddc:	cmp	r5, #0
   20de0:	beq	20e04 <flatcc_emitter@@Base+0x1ec>
   20de4:	ldr	r0, [r5, #2948]	; 0xb84
   20de8:	ldr	r1, [r6, #4]
   20dec:	cmp	r0, r1
   20df0:	beq	20e04 <flatcc_emitter@@Base+0x1ec>
   20df4:	ldr	r1, [r5, #2952]	; 0xb88
   20df8:	sub	r1, r1, #2944	; 0xb80
   20dfc:	str	r1, [r0, #2952]	; 0xb88
   20e00:	b	20e3c <flatcc_emitter@@Base+0x224>
   20e04:	movw	r0, #2956	; 0xb8c
   20e08:	bl	12eec <malloc@plt>
   20e0c:	cmp	r0, #0
   20e10:	beq	20ee4 <flatcc_emitter@@Base+0x2cc>
   20e14:	ldr	r1, [r6, #28]
   20e18:	cmp	r5, #0
   20e1c:	add	r1, r1, #2944	; 0xb80
   20e20:	str	r1, [r6, #28]
   20e24:	beq	20e60 <flatcc_emitter@@Base+0x248>
   20e28:	ldr	r1, [r6, #4]
   20e2c:	str	r5, [r0, #2944]	; 0xb80
   20e30:	str	r1, [r0, #2948]	; 0xb84
   20e34:	str	r0, [r5, #2948]	; 0xb84
   20e38:	str	r0, [r1, #2944]	; 0xb80
   20e3c:	mov	r1, #2944	; 0xb80
   20e40:	add	r2, r0, #2944	; 0xb80
   20e44:	str	r0, [r6]
   20e48:	str	r2, [r6, #8]
   20e4c:	str	r1, [r6, #12]
   20e50:	ldr	r2, [r0, #2944]	; 0xb80
   20e54:	ldr	r2, [r2, #2952]	; 0xb88
   20e58:	sub	r2, r2, #2944	; 0xb80
   20e5c:	b	20e8c <flatcc_emitter@@Base+0x274>
   20e60:	add	r2, r0, #1472	; 0x5c0
   20e64:	mov	r1, #1472	; 0x5c0
   20e68:	str	r0, [r6]
   20e6c:	stmib	r6, {r0, r2}
   20e70:	str	r1, [r6, #12]
   20e74:	str	r2, [r6, #16]
   20e78:	movw	r2, #64064	; 0xfa40
   20e7c:	str	r1, [r6, #20]
   20e80:	str	r0, [r0, #2944]	; 0xb80
   20e84:	str	r0, [r0, #2948]	; 0xb84
   20e88:	movt	r2, #65535	; 0xffff
   20e8c:	str	r2, [r0, #2952]	; 0xb88
   20e90:	b	20dc4 <flatcc_emitter@@Base+0x1ac>
   20e94:	mov	r5, sl
   20e98:	sub	r0, r1, r5
   20e9c:	sub	r7, r7, r5
   20ea0:	mov	r2, r5
   20ea4:	str	r0, [r6, #12]
   20ea8:	mov	r1, r7
   20eac:	ldr	r0, [r6, #8]
   20eb0:	sub	r0, r0, r5
   20eb4:	str	r0, [r6, #8]
   20eb8:	bl	12eb0 <memcpy@plt>
   20ebc:	subs	sl, sl, r5
   20ec0:	bne	20dc0 <flatcc_emitter@@Base+0x1a8>
   20ec4:	ldr	r0, [sp]
   20ec8:	subs	r4, r4, #1
   20ecc:	bne	20da0 <flatcc_emitter@@Base+0x188>
   20ed0:	b	20f2c <flatcc_emitter@@Base+0x314>
   20ed4:	ldr	r5, [r6, #16]
   20ed8:	add	r2, r5, r1
   20edc:	str	r2, [r6, #16]
   20ee0:	b	20ef8 <flatcc_emitter@@Base+0x2e0>
   20ee4:	mvn	r8, #0
   20ee8:	b	20f2c <flatcc_emitter@@Base+0x314>
   20eec:	ldr	r2, [r6, #8]
   20ef0:	sub	r5, r2, r1
   20ef4:	str	r5, [r6, #8]
   20ef8:	sub	r0, r0, r1
   20efc:	mov	r8, #0
   20f00:	cmp	r4, #0
   20f04:	str	r0, [r9]
   20f08:	beq	20f2c <flatcc_emitter@@Base+0x314>
   20f0c:	ldm	r7, {r1, r2}
   20f10:	mov	r0, r5
   20f14:	bl	12eb0 <memcpy@plt>
   20f18:	ldr	r0, [r7, #4]
   20f1c:	add	r7, r7, #8
   20f20:	subs	r4, r4, #1
   20f24:	add	r5, r5, r0
   20f28:	bne	20f0c <flatcc_emitter@@Base+0x2f4>
   20f2c:	mov	r0, r8
   20f30:	sub	sp, fp, #28
   20f34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00020f38 <flatcc_emitter_copy_buffer@@Base>:
   20f38:	push	{r4, r5, r6, sl, fp, lr}
   20f3c:	add	fp, sp, #16
   20f40:	mov	r3, r2
   20f44:	ldr	r2, [r0, #24]
   20f48:	mov	r5, #0
   20f4c:	cmp	r2, r3
   20f50:	bhi	20fec <flatcc_emitter_copy_buffer@@Base+0xb4>
   20f54:	mov	r4, r0
   20f58:	ldr	r0, [r0]
   20f5c:	cmp	r0, #0
   20f60:	beq	20fec <flatcc_emitter_copy_buffer@@Base+0xb4>
   20f64:	mov	r6, r1
   20f68:	ldr	r1, [r4, #4]
   20f6c:	cmp	r0, r1
   20f70:	beq	20fdc <flatcc_emitter_copy_buffer@@Base+0xa4>
   20f74:	ldr	r0, [r4, #12]
   20f78:	ldr	r1, [r4, #8]
   20f7c:	rsb	r5, r0, #2944	; 0xb80
   20f80:	mov	r0, r6
   20f84:	mov	r2, r5
   20f88:	bl	12eb0 <memcpy@plt>
   20f8c:	ldm	r4, {r0, r1}
   20f90:	add	r5, r6, r5
   20f94:	ldr	r6, [r0, #2944]	; 0xb80
   20f98:	cmp	r6, r1
   20f9c:	beq	20fc4 <flatcc_emitter_copy_buffer@@Base+0x8c>
   20fa0:	mov	r0, r5
   20fa4:	mov	r1, r6
   20fa8:	mov	r2, #2944	; 0xb80
   20fac:	bl	12eb0 <memcpy@plt>
   20fb0:	ldr	r6, [r6, #2944]	; 0xb80
   20fb4:	ldr	r0, [r4, #4]
   20fb8:	add	r5, r5, #2944	; 0xb80
   20fbc:	cmp	r6, r0
   20fc0:	bne	20fa0 <flatcc_emitter_copy_buffer@@Base+0x68>
   20fc4:	ldr	r0, [r4, #20]
   20fc8:	mov	r1, r6
   20fcc:	rsb	r2, r0, #2944	; 0xb80
   20fd0:	mov	r0, r5
   20fd4:	bl	12eb0 <memcpy@plt>
   20fd8:	b	20fec <flatcc_emitter_copy_buffer@@Base+0xb4>
   20fdc:	ldr	r1, [r4, #8]
   20fe0:	mov	r0, r6
   20fe4:	bl	12eb0 <memcpy@plt>
   20fe8:	mov	r5, r6
   20fec:	mov	r0, r5
   20ff0:	pop	{r4, r5, r6, sl, fp, pc}

00020ff4 <flatcc_verify_error_string@@Base>:
   20ff4:	cmp	r0, #36	; 0x24
   20ff8:	movwhi	r0, #28298	; 0x6e8a
   20ffc:	movthi	r0, #2
   21000:	bxhi	lr
   21004:	movw	r1, #28308	; 0x6e94
   21008:	movt	r1, #2
   2100c:	ldr	r0, [r1, r0, lsl #2]
   21010:	bx	lr

00021014 <flatcc_verify_field@@Base>:
   21014:	b	21018 <flatcc_verify_field@@Base+0x4>
   21018:	push	{r4, sl, fp, lr}
   2101c:	add	fp, sp, #8
   21020:	mov	ip, #4
   21024:	ldrh	r4, [r0, #22]
   21028:	mov	lr, #0
   2102c:	add	r1, ip, r1, lsl #1
   21030:	uxth	ip, r1
   21034:	cmp	ip, r4
   21038:	bcs	21064 <flatcc_verify_field@@Base+0x50>
   2103c:	ldr	r4, [r0, #12]
   21040:	uxtah	r1, r4, r1
   21044:	ldrh	ip, [r1]
   21048:	cmp	ip, #0
   2104c:	beq	21064 <flatcc_verify_field@@Base+0x50>
   21050:	add	r1, ip, r2
   21054:	ldrh	r2, [r0, #20]
   21058:	mov	lr, #13
   2105c:	cmp	r1, r2
   21060:	bls	2106c <flatcc_verify_field@@Base+0x58>
   21064:	mov	r0, lr
   21068:	pop	{r4, sl, fp, pc}
   2106c:	ldr	r1, [r0]
   21070:	ldr	r0, [r0, #16]
   21074:	add	r1, r1, ip
   21078:	add	r0, r1, r0
   2107c:	sub	r1, r3, #1
   21080:	ands	r0, r0, r1
   21084:	movwne	r0, #12
   21088:	pop	{r4, sl, fp, pc}

0002108c <flatcc_verify_string_field@@Base>:
   2108c:	push	{r4, sl, fp, lr}
   21090:	add	fp, sp, #8
   21094:	sub	sp, sp, #8
   21098:	add	r3, sp, #4
   2109c:	mov	r4, r0
   210a0:	bl	21118 <flatcc_verify_string_field@@Base+0x8c>
   210a4:	cmp	r0, #0
   210a8:	bne	21110 <flatcc_verify_string_field@@Base+0x84>
   210ac:	ldr	r3, [sp, #4]
   210b0:	cmp	r3, #0
   210b4:	beq	21110 <flatcc_verify_string_field@@Base+0x84>
   210b8:	ldr	r1, [r4]
   210bc:	ldr	r0, [r1, r3]
   210c0:	add	r2, r0, r3
   210c4:	mov	r0, #17
   210c8:	tst	r2, #3
   210cc:	bne	21110 <flatcc_verify_string_field@@Base+0x84>
   210d0:	cmp	r2, r3
   210d4:	bls	21110 <flatcc_verify_string_field@@Base+0x84>
   210d8:	ldr	r4, [r4, #4]
   210dc:	add	r3, r2, #4
   210e0:	cmp	r4, r3
   210e4:	bcc	21110 <flatcc_verify_string_field@@Base+0x84>
   210e8:	ldr	r2, [r1, r2]
   210ec:	sub	ip, r4, r3
   210f0:	mov	r0, #8
   210f4:	add	r4, r2, #1
   210f8:	cmp	ip, r4
   210fc:	bcc	21110 <flatcc_verify_string_field@@Base+0x84>
   21100:	add	r0, r1, r3
   21104:	ldrb	r0, [r0, r2]
   21108:	cmp	r0, #0
   2110c:	movwne	r0, #7
   21110:	sub	sp, fp, #8
   21114:	pop	{r4, sl, fp, pc}
   21118:	push	{fp, lr}
   2111c:	mov	fp, sp
   21120:	mov	ip, #4
   21124:	add	lr, ip, r1, lsl #1
   21128:	ldrh	r1, [r0, #22]
   2112c:	uxth	ip, lr
   21130:	cmp	ip, r1
   21134:	bcs	2117c <flatcc_verify_string_field@@Base+0xf0>
   21138:	ldr	r1, [r0, #12]
   2113c:	uxtah	r1, r1, lr
   21140:	ldrh	ip, [r1]
   21144:	cmp	ip, #0
   21148:	beq	2117c <flatcc_verify_string_field@@Base+0xf0>
   2114c:	ldrh	lr, [r0, #20]
   21150:	add	r2, ip, #4
   21154:	mov	r1, #13
   21158:	cmp	r2, lr
   2115c:	bhi	21190 <flatcc_verify_string_field@@Base+0x104>
   21160:	ldr	r0, [r0, #16]
   21164:	mov	r1, #12
   21168:	add	r0, r0, ip
   2116c:	tst	r0, #3
   21170:	moveq	r1, #0
   21174:	streq	r0, [r3]
   21178:	b	21190 <flatcc_verify_string_field@@Base+0x104>
   2117c:	cmp	r2, #0
   21180:	mov	r0, #0
   21184:	movwne	r2, #1
   21188:	str	r0, [r3]
   2118c:	lsl	r1, r2, #2
   21190:	mov	r0, r1
   21194:	pop	{fp, pc}

00021198 <flatcc_verify_vector_field@@Base>:
   21198:	push	{r4, r5, r6, sl, fp, lr}
   2119c:	add	fp, sp, #16
   211a0:	sub	sp, sp, #8
   211a4:	mov	r6, r3
   211a8:	add	r3, sp, #4
   211ac:	mov	r5, r0
   211b0:	bl	21118 <flatcc_verify_string_field@@Base+0x8c>
   211b4:	cmp	r0, #0
   211b8:	bne	21238 <flatcc_verify_vector_field@@Base+0xa0>
   211bc:	ldr	r4, [sp, #4]
   211c0:	cmp	r4, #0
   211c4:	beq	21238 <flatcc_verify_vector_field@@Base+0xa0>
   211c8:	ldr	r3, [r5]
   211cc:	ldr	r2, [fp, #8]
   211d0:	ldr	r0, [r3, r4]
   211d4:	cmp	r2, #4
   211d8:	movls	r2, #4
   211dc:	add	r1, r0, r4
   211e0:	mov	r0, #16
   211e4:	cmp	r1, r4
   211e8:	bls	21238 <flatcc_verify_vector_field@@Base+0xa0>
   211ec:	ldr	r5, [r5, #4]
   211f0:	add	r4, r1, #4
   211f4:	cmp	r4, r5
   211f8:	bhi	21238 <flatcc_verify_vector_field@@Base+0xa0>
   211fc:	sub	r2, r2, #1
   21200:	orr	r2, r2, #3
   21204:	tst	r4, r2
   21208:	bne	21238 <flatcc_verify_vector_field@@Base+0xa0>
   2120c:	ldr	r4, [fp, #12]
   21210:	ldr	r2, [r3, r1]
   21214:	mov	r0, #25
   21218:	cmp	r2, r4
   2121c:	bhi	21238 <flatcc_verify_vector_field@@Base+0xa0>
   21220:	mul	r2, r2, r6
   21224:	sub	r0, r5, r1
   21228:	sub	r1, r0, #4
   2122c:	mov	r0, #0
   21230:	cmp	r1, r2
   21234:	movwcc	r0, #26
   21238:	sub	sp, fp, #16
   2123c:	pop	{r4, r5, r6, sl, fp, pc}

00021240 <flatcc_verify_string_vector_field@@Base>:
   21240:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21244:	add	fp, sp, #24
   21248:	sub	sp, sp, #8
   2124c:	add	r3, sp, #4
   21250:	mov	r4, r0
   21254:	bl	21118 <flatcc_verify_string_field@@Base+0x8c>
   21258:	cmp	r0, #0
   2125c:	bne	2136c <flatcc_verify_string_vector_field@@Base+0x12c>
   21260:	ldr	r1, [sp, #4]
   21264:	cmp	r1, #0
   21268:	beq	2136c <flatcc_verify_string_vector_field@@Base+0x12c>
   2126c:	ldr	r3, [r4]
   21270:	mov	r0, #16
   21274:	ldr	r2, [r3, r1]
   21278:	add	r5, r2, r1
   2127c:	cmp	r5, r1
   21280:	bls	2136c <flatcc_verify_string_vector_field@@Base+0x12c>
   21284:	ldr	ip, [r4, #4]
   21288:	add	r7, r5, #4
   2128c:	cmp	r7, ip
   21290:	bhi	2136c <flatcc_verify_string_vector_field@@Base+0x12c>
   21294:	ands	r7, r7, #3
   21298:	bne	2136c <flatcc_verify_string_vector_field@@Base+0x12c>
   2129c:	ldr	lr, [r3, r5]
   212a0:	mov	r0, #25
   212a4:	cmn	lr, #-1073741823	; 0xc0000001
   212a8:	bhi	2136c <flatcc_verify_string_vector_field@@Base+0x12c>
   212ac:	sub	r0, ip, r5
   212b0:	sub	r4, r0, #4
   212b4:	mov	r0, #26
   212b8:	cmp	r4, lr, lsl #2
   212bc:	bcc	2136c <flatcc_verify_string_vector_field@@Base+0x12c>
   212c0:	cmp	lr, #0
   212c4:	beq	21358 <flatcc_verify_string_vector_field@@Base+0x118>
   212c8:	sub	r0, ip, r2
   212cc:	add	r3, r3, r2
   212d0:	sub	r0, r0, r1
   212d4:	sub	r8, r0, #8
   212d8:	add	r0, r3, r1
   212dc:	add	r7, r1, r2
   212e0:	ldr	r5, [r0, #4]
   212e4:	mov	r0, #17
   212e8:	add	r6, r7, r5
   212ec:	add	r4, r6, #4
   212f0:	tst	r4, #3
   212f4:	bne	2136c <flatcc_verify_string_vector_field@@Base+0x12c>
   212f8:	add	r7, r7, #4
   212fc:	cmp	r4, r7
   21300:	bls	2136c <flatcc_verify_string_vector_field@@Base+0x12c>
   21304:	add	r4, r6, #8
   21308:	cmp	ip, r4
   2130c:	bcc	2136c <flatcc_verify_string_vector_field@@Base+0x12c>
   21310:	add	r0, r1, r5
   21314:	sub	r4, r8, r5
   21318:	add	r0, r3, r0
   2131c:	ldr	r0, [r0, #4]
   21320:	add	r6, r0, #1
   21324:	cmp	r4, r6
   21328:	bcc	21360 <flatcc_verify_string_vector_field@@Base+0x120>
   2132c:	add	r0, r5, r0
   21330:	add	r0, r1, r0
   21334:	add	r0, r3, r0
   21338:	ldrb	r0, [r0, #8]
   2133c:	cmp	r0, #0
   21340:	bne	21368 <flatcc_verify_string_vector_field@@Base+0x128>
   21344:	subs	lr, lr, #1
   21348:	sub	r8, r8, #4
   2134c:	add	r2, r2, #4
   21350:	add	r3, r3, #4
   21354:	bne	212d8 <flatcc_verify_string_vector_field@@Base+0x98>
   21358:	mov	r0, #0
   2135c:	b	2136c <flatcc_verify_string_vector_field@@Base+0x12c>
   21360:	mov	r0, #8
   21364:	b	2136c <flatcc_verify_string_vector_field@@Base+0x12c>
   21368:	mov	r0, #7
   2136c:	sub	sp, fp, #24
   21370:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00021374 <flatcc_verify_table_field@@Base>:
   21374:	push	{r4, r5, r6, sl, fp, lr}
   21378:	add	fp, sp, #16
   2137c:	sub	sp, sp, #32
   21380:	mov	r6, r3
   21384:	add	r3, sp, #4
   21388:	mov	r5, r0
   2138c:	bl	21118 <flatcc_verify_string_field@@Base+0x8c>
   21390:	cmp	r0, #0
   21394:	bne	2146c <flatcc_verify_table_field@@Base+0xf8>
   21398:	ldr	r4, [sp, #4]
   2139c:	cmp	r4, #0
   213a0:	beq	2146c <flatcc_verify_table_field@@Base+0xf8>
   213a4:	ldm	r5, {r1, r2, r3}
   213a8:	subs	r3, r3, #1
   213ac:	ldr	r0, [r1, r4]
   213b0:	str	r3, [sp, #16]
   213b4:	beq	21468 <flatcc_verify_table_field@@Base+0xf4>
   213b8:	add	r3, r0, r4
   213bc:	mov	r0, #15
   213c0:	tst	r3, #3
   213c4:	bne	2146c <flatcc_verify_table_field@@Base+0xf8>
   213c8:	cmp	r3, r4
   213cc:	bls	2146c <flatcc_verify_table_field@@Base+0xf8>
   213d0:	add	r5, r3, #4
   213d4:	cmp	r5, r2
   213d8:	bhi	2146c <flatcc_verify_table_field@@Base+0xf8>
   213dc:	str	r3, [sp, #24]
   213e0:	ldr	r0, [r1, r3]
   213e4:	sub	r5, r3, r0
   213e8:	mov	r0, #29
   213ec:	tst	r5, #-2147483647	; 0x80000001
   213f0:	bne	2146c <flatcc_verify_table_field@@Base+0xf8>
   213f4:	add	lr, r5, #2
   213f8:	mov	r0, #27
   213fc:	cmp	lr, r2
   21400:	bhi	2146c <flatcc_verify_table_field@@Base+0xf8>
   21404:	mov	ip, r1
   21408:	mov	r0, #30
   2140c:	ldrh	r4, [ip, r5]!
   21410:	tst	r4, #1
   21414:	strh	r4, [sp, #30]
   21418:	bne	2146c <flatcc_verify_table_field@@Base+0xf8>
   2141c:	add	r5, r5, r4
   21420:	cmp	r5, r2
   21424:	bhi	2146c <flatcc_verify_table_field@@Base+0xf8>
   21428:	mov	r0, #28
   2142c:	cmp	r4, #4
   21430:	bcc	2146c <flatcc_verify_table_field@@Base+0xf8>
   21434:	add	r0, r1, lr
   21438:	sub	r3, r2, r3
   2143c:	ldrh	r5, [r0]
   21440:	mov	r0, #20
   21444:	cmp	r3, r5
   21448:	strh	r5, [sp, #28]
   2144c:	bcc	2146c <flatcc_verify_table_field@@Base+0xf8>
   21450:	add	r0, sp, #8
   21454:	str	r2, [sp, #12]
   21458:	str	r1, [sp, #8]
   2145c:	str	ip, [sp, #20]
   21460:	blx	r6
   21464:	b	2146c <flatcc_verify_table_field@@Base+0xf8>
   21468:	mov	r0, #3
   2146c:	sub	sp, fp, #16
   21470:	pop	{r4, r5, r6, sl, fp, pc}

00021474 <flatcc_verify_table_vector_field@@Base>:
   21474:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21478:	add	fp, sp, #28
   2147c:	sub	sp, sp, #44	; 0x2c
   21480:	mov	r9, r3
   21484:	add	r3, sp, #16
   21488:	mov	r6, r0
   2148c:	bl	21118 <flatcc_verify_string_field@@Base+0x8c>
   21490:	mov	r5, r0
   21494:	cmp	r0, #0
   21498:	bne	216e8 <flatcc_verify_table_vector_field@@Base+0x274>
   2149c:	ldr	r0, [sp, #16]
   214a0:	cmp	r0, #0
   214a4:	beq	216e8 <flatcc_verify_table_vector_field@@Base+0x274>
   214a8:	ldr	r1, [r6, #8]
   214ac:	cmp	r1, #1
   214b0:	blt	216e4 <flatcc_verify_table_vector_field@@Base+0x270>
   214b4:	ldr	r8, [r6]
   214b8:	mov	r5, #16
   214bc:	ldr	r2, [r8, r0]
   214c0:	add	r3, r2, r0
   214c4:	cmp	r3, r0
   214c8:	bls	216e8 <flatcc_verify_table_vector_field@@Base+0x274>
   214cc:	ldr	r4, [r6, #4]
   214d0:	add	r6, r3, #4
   214d4:	cmp	r6, r4
   214d8:	bhi	216e8 <flatcc_verify_table_vector_field@@Base+0x274>
   214dc:	str	r4, [sp, #12]
   214e0:	ands	r4, r6, #3
   214e4:	bne	216e8 <flatcc_verify_table_vector_field@@Base+0x274>
   214e8:	ldr	sl, [r8, r3]
   214ec:	mov	r5, #25
   214f0:	cmn	sl, #-1073741823	; 0xc0000001
   214f4:	bhi	216e8 <flatcc_verify_table_vector_field@@Base+0x274>
   214f8:	ldr	r5, [sp, #12]
   214fc:	sub	r3, r5, r3
   21500:	mov	r5, #26
   21504:	sub	r3, r3, #4
   21508:	cmp	r3, sl, lsl #2
   2150c:	bcc	216e8 <flatcc_verify_table_vector_field@@Base+0x274>
   21510:	mov	r5, #0
   21514:	cmp	sl, #0
   21518:	beq	216e8 <flatcc_verify_table_vector_field@@Base+0x274>
   2151c:	ldr	r4, [sp, #12]
   21520:	sub	r2, r4, r2
   21524:	sub	r0, r2, r0
   21528:	sub	r0, r0, #4
   2152c:	str	r0, [sp, #8]
   21530:	sub	r0, r1, #2
   21534:	str	r0, [sp, #4]
   21538:	ldr	r0, [sp, #4]
   2153c:	ldr	r2, [r8, r6]
   21540:	cmp	r0, #0
   21544:	str	r0, [sp, #28]
   21548:	beq	216dc <flatcc_verify_table_vector_field@@Base+0x268>
   2154c:	add	lr, r6, r2
   21550:	add	r7, lr, #4
   21554:	tst	lr, #3
   21558:	bne	21628 <flatcc_verify_table_vector_field@@Base+0x1b4>
   2155c:	cmp	lr, r6
   21560:	bls	21628 <flatcc_verify_table_vector_field@@Base+0x1b4>
   21564:	cmp	r7, r4
   21568:	bhi	21628 <flatcc_verify_table_vector_field@@Base+0x1b4>
   2156c:	str	lr, [sp, #36]	; 0x24
   21570:	add	r0, r8, r2
   21574:	ldr	r1, [r0, r6]
   21578:	sub	r0, r2, r1
   2157c:	add	r3, r6, r0
   21580:	tst	r3, #-2147483647	; 0x80000001
   21584:	bne	21628 <flatcc_verify_table_vector_field@@Base+0x1b4>
   21588:	ldr	ip, [sp, #12]
   2158c:	add	r4, r3, #2
   21590:	cmp	r4, ip
   21594:	ldr	r4, [sp, #12]
   21598:	bhi	21628 <flatcc_verify_table_vector_field@@Base+0x1b4>
   2159c:	add	r0, r8, r0
   215a0:	add	r0, r0, r6
   215a4:	ldrh	r0, [r0]
   215a8:	cmp	r0, #4
   215ac:	strh	r0, [sp, #42]	; 0x2a
   215b0:	bcc	21628 <flatcc_verify_table_vector_field@@Base+0x1b4>
   215b4:	ands	r4, r0, #1
   215b8:	ldr	r4, [sp, #12]
   215bc:	bne	21628 <flatcc_verify_table_vector_field@@Base+0x1b4>
   215c0:	add	r0, r2, r0
   215c4:	sub	r0, r0, r1
   215c8:	add	r0, r6, r0
   215cc:	cmp	r0, r4
   215d0:	bhi	21628 <flatcc_verify_table_vector_field@@Base+0x1b4>
   215d4:	add	r0, r8, r3
   215d8:	ldr	r3, [sp, #8]
   215dc:	ldrh	r1, [r0, #2]
   215e0:	sub	r2, r3, r2
   215e4:	cmp	r2, r1
   215e8:	strh	r1, [sp, #40]	; 0x28
   215ec:	bcc	21628 <flatcc_verify_table_vector_field@@Base+0x1b4>
   215f0:	str	r4, [sp, #24]
   215f4:	str	r8, [sp, #20]
   215f8:	str	r0, [sp, #32]
   215fc:	add	r0, sp, #20
   21600:	blx	r9
   21604:	cmp	r0, #0
   21608:	bne	216f4 <flatcc_verify_table_vector_field@@Base+0x280>
   2160c:	ldr	r0, [sp, #8]
   21610:	subs	sl, sl, #1
   21614:	add	r6, r6, #4
   21618:	sub	r0, r0, #4
   2161c:	str	r0, [sp, #8]
   21620:	bne	21538 <flatcc_verify_table_vector_field@@Base+0xc4>
   21624:	b	216e8 <flatcc_verify_table_vector_field@@Base+0x274>
   21628:	ldr	r0, [sp, #4]
   2162c:	str	r0, [sp, #28]
   21630:	mov	r5, #15
   21634:	tst	lr, #3
   21638:	bne	216e8 <flatcc_verify_table_vector_field@@Base+0x274>
   2163c:	cmp	lr, r6
   21640:	bls	216e8 <flatcc_verify_table_vector_field@@Base+0x274>
   21644:	cmp	r7, r4
   21648:	bhi	216e8 <flatcc_verify_table_vector_field@@Base+0x274>
   2164c:	str	lr, [sp, #36]	; 0x24
   21650:	mov	r5, #29
   21654:	ldr	r0, [r8, lr]
   21658:	sub	r3, lr, r0
   2165c:	tst	r3, #-2147483647	; 0x80000001
   21660:	bne	216e8 <flatcc_verify_table_vector_field@@Base+0x274>
   21664:	add	r2, r3, #2
   21668:	mov	r5, #27
   2166c:	cmp	r2, r4
   21670:	bhi	216e8 <flatcc_verify_table_vector_field@@Base+0x274>
   21674:	mov	r1, r8
   21678:	mov	r5, #30
   2167c:	ldrh	r6, [r1, r3]!
   21680:	tst	r6, #1
   21684:	strh	r6, [sp, #42]	; 0x2a
   21688:	bne	216e8 <flatcc_verify_table_vector_field@@Base+0x274>
   2168c:	add	r0, r3, r6
   21690:	cmp	r0, r4
   21694:	bhi	216e8 <flatcc_verify_table_vector_field@@Base+0x274>
   21698:	mov	r5, #28
   2169c:	cmp	r6, #4
   216a0:	bcc	216e8 <flatcc_verify_table_vector_field@@Base+0x274>
   216a4:	add	r0, r8, r2
   216a8:	sub	r2, r4, lr
   216ac:	mov	r5, #20
   216b0:	ldrh	r0, [r0]
   216b4:	cmp	r2, r0
   216b8:	strh	r0, [sp, #40]	; 0x28
   216bc:	bcc	216e8 <flatcc_verify_table_vector_field@@Base+0x274>
   216c0:	add	r0, sp, #20
   216c4:	str	r4, [sp, #24]
   216c8:	str	r8, [sp, #20]
   216cc:	str	r1, [sp, #32]
   216d0:	blx	r9
   216d4:	mov	r5, r0
   216d8:	b	216e8 <flatcc_verify_table_vector_field@@Base+0x274>
   216dc:	mov	r0, #0
   216e0:	str	r0, [sp, #28]
   216e4:	mov	r5, #3
   216e8:	mov	r0, r5
   216ec:	sub	sp, fp, #28
   216f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   216f4:	ldr	r0, [r8, r6]
   216f8:	ldr	r1, [sp, #4]
   216fc:	add	lr, r0, r6
   21700:	str	r1, [sp, #28]
   21704:	add	r7, lr, #4
   21708:	b	21630 <flatcc_verify_table_vector_field@@Base+0x1bc>

0002170c <flatcc_verify_union_table@@Base>:
   2170c:	push	{r4, r5, r6, sl, fp, lr}
   21710:	add	fp, sp, #16
   21714:	sub	sp, sp, #24
   21718:	ldr	r5, [r0, #16]
   2171c:	ldr	r2, [r0, #20]
   21720:	ldr	ip, [r0]
   21724:	ldr	r3, [r0, #4]
   21728:	ldr	r0, [r0, #8]
   2172c:	subs	r0, r0, #1
   21730:	str	r0, [sp, #8]
   21734:	beq	217e8 <flatcc_verify_union_table@@Base+0xdc>
   21738:	add	r2, r2, r5
   2173c:	mov	r0, #15
   21740:	tst	r2, #3
   21744:	bne	217ec <flatcc_verify_union_table@@Base+0xe0>
   21748:	cmp	r2, r5
   2174c:	bls	217ec <flatcc_verify_union_table@@Base+0xe0>
   21750:	add	r6, r2, #4
   21754:	cmp	r6, r3
   21758:	bhi	217ec <flatcc_verify_union_table@@Base+0xe0>
   2175c:	str	r2, [sp, #16]
   21760:	ldr	r0, [ip, r2]
   21764:	sub	r5, r2, r0
   21768:	mov	r0, #29
   2176c:	tst	r5, #-2147483647	; 0x80000001
   21770:	bne	217ec <flatcc_verify_union_table@@Base+0xe0>
   21774:	add	r4, r5, #2
   21778:	mov	r0, #27
   2177c:	cmp	r4, r3
   21780:	bhi	217ec <flatcc_verify_union_table@@Base+0xe0>
   21784:	mov	lr, ip
   21788:	mov	r0, #30
   2178c:	ldrh	r6, [lr, r5]!
   21790:	tst	r6, #1
   21794:	strh	r6, [sp, #22]
   21798:	bne	217ec <flatcc_verify_union_table@@Base+0xe0>
   2179c:	add	r5, r5, r6
   217a0:	cmp	r5, r3
   217a4:	bhi	217ec <flatcc_verify_union_table@@Base+0xe0>
   217a8:	mov	r0, #28
   217ac:	cmp	r6, #4
   217b0:	bcc	217ec <flatcc_verify_union_table@@Base+0xe0>
   217b4:	add	r0, ip, r4
   217b8:	sub	r2, r3, r2
   217bc:	ldrh	r4, [r0]
   217c0:	mov	r0, #20
   217c4:	cmp	r2, r4
   217c8:	strh	r4, [sp, #20]
   217cc:	bcc	217ec <flatcc_verify_union_table@@Base+0xe0>
   217d0:	mov	r0, sp
   217d4:	str	r3, [sp, #4]
   217d8:	str	ip, [sp]
   217dc:	str	lr, [sp, #12]
   217e0:	blx	r1
   217e4:	b	217ec <flatcc_verify_union_table@@Base+0xe0>
   217e8:	mov	r0, #3
   217ec:	sub	sp, fp, #16
   217f0:	pop	{r4, r5, r6, sl, fp, pc}

000217f4 <flatcc_verify_union_struct@@Base>:
   217f4:	push	{fp, lr}
   217f8:	mov	fp, sp
   217fc:	ldr	lr, [r0, #20]
   21800:	mov	r3, r0
   21804:	mov	r0, #18
   21808:	cmp	lr, #0
   2180c:	beq	21848 <flatcc_verify_union_struct@@Base+0x54>
   21810:	ldr	ip, [r3, #4]
   21814:	ldr	r3, [r3, #16]
   21818:	add	r3, r3, lr
   2181c:	cmp	r3, ip
   21820:	bhi	21848 <flatcc_verify_union_struct@@Base+0x54>
   21824:	adds	r1, r3, r1
   21828:	mov	r0, #10
   2182c:	bcs	21848 <flatcc_verify_union_struct@@Base+0x54>
   21830:	mov	r0, #9
   21834:	cmp	r1, ip
   21838:	pophi	{fp, pc}
   2183c:	sub	r0, r2, #1
   21840:	ands	r0, r3, r0
   21844:	movwne	r0, #11
   21848:	pop	{fp, pc}

0002184c <flatcc_verify_union_string@@Base>:
   2184c:	push	{fp, lr}
   21850:	mov	fp, sp
   21854:	mov	r1, r0
   21858:	ldr	r3, [r0, #16]
   2185c:	ldr	r0, [r0, #20]
   21860:	add	r2, r0, r3
   21864:	mov	r0, #17
   21868:	tst	r2, #3
   2186c:	bne	218b4 <flatcc_verify_union_string@@Base+0x68>
   21870:	cmp	r2, r3
   21874:	bls	218b4 <flatcc_verify_union_string@@Base+0x68>
   21878:	ldr	r3, [r1, #4]
   2187c:	add	ip, r2, #4
   21880:	cmp	r3, ip
   21884:	bcc	218b4 <flatcc_verify_union_string@@Base+0x68>
   21888:	ldr	r1, [r1]
   2188c:	sub	lr, r3, ip
   21890:	mov	r0, #8
   21894:	ldr	r2, [r1, r2]
   21898:	add	r3, r2, #1
   2189c:	cmp	lr, r3
   218a0:	popcc	{fp, pc}
   218a4:	add	r0, r1, ip
   218a8:	ldrb	r0, [r0, r2]
   218ac:	cmp	r0, #0
   218b0:	movwne	r0, #7
   218b4:	pop	{fp, pc}

000218b8 <flatcc_verify_buffer_header@@Base>:
   218b8:	push	{r4, sl, fp, lr}
   218bc:	add	fp, sp, #8
   218c0:	sub	sp, sp, #8
   218c4:	mov	r4, r0
   218c8:	mov	r0, #5
   218cc:	tst	r4, #3
   218d0:	bne	2192c <flatcc_verify_buffer_header@@Base+0x74>
   218d4:	mov	r0, #6
   218d8:	cmn	r1, #9
   218dc:	bhi	2192c <flatcc_verify_buffer_header@@Base+0x74>
   218e0:	mov	r0, #1
   218e4:	cmp	r1, #8
   218e8:	bcc	2192c <flatcc_verify_buffer_header@@Base+0x74>
   218ec:	cmp	r2, #0
   218f0:	beq	21928 <flatcc_verify_buffer_header@@Base+0x70>
   218f4:	mov	r0, #0
   218f8:	mov	r1, r2
   218fc:	mov	r2, #4
   21900:	str	r0, [sp, #4]
   21904:	add	r0, sp, #4
   21908:	bl	12f4c <strncpy@plt>
   2190c:	ldr	r1, [sp, #4]
   21910:	cmp	r1, #0
   21914:	ldrne	r2, [r4, #4]
   21918:	movne	r0, #2
   2191c:	cmpne	r2, r1
   21920:	moveq	r0, #0
   21924:	b	2192c <flatcc_verify_buffer_header@@Base+0x74>
   21928:	mov	r0, #0
   2192c:	sub	sp, fp, #8
   21930:	pop	{r4, sl, fp, pc}

00021934 <flatcc_verify_typed_buffer_header@@Base>:
   21934:	mov	r3, r0
   21938:	mov	r0, #5
   2193c:	tst	r3, #3
   21940:	bne	21974 <flatcc_verify_typed_buffer_header@@Base+0x40>
   21944:	mov	r0, #6
   21948:	cmn	r1, #9
   2194c:	bhi	21974 <flatcc_verify_typed_buffer_header@@Base+0x40>
   21950:	mov	r0, #1
   21954:	cmp	r1, #8
   21958:	bxcc	lr
   2195c:	cmp	r2, #0
   21960:	beq	21978 <flatcc_verify_typed_buffer_header@@Base+0x44>
   21964:	ldr	r1, [r3, #4]
   21968:	mov	r0, #2
   2196c:	cmp	r1, r2
   21970:	moveq	r0, #0
   21974:	bx	lr
   21978:	mov	r0, #0
   2197c:	bx	lr

00021980 <flatcc_verify_struct_as_root@@Base>:
   21980:	push	{r4, r5, r6, r7, fp, lr}
   21984:	add	fp, sp, #16
   21988:	mov	r5, r3
   2198c:	mov	r6, r2
   21990:	mov	r4, r1
   21994:	mov	r7, r0
   21998:	bl	218b8 <flatcc_verify_buffer_header@@Base>
   2199c:	cmp	r0, #0
   219a0:	beq	219b8 <flatcc_verify_struct_as_root@@Base+0x38>
   219a4:	mov	r0, r7
   219a8:	mov	r1, r4
   219ac:	mov	r2, r6
   219b0:	pop	{r4, r5, r6, r7, fp, lr}
   219b4:	b	218b8 <flatcc_verify_buffer_header@@Base>
   219b8:	ldr	r1, [r7]
   219bc:	mov	r0, #18
   219c0:	sub	r2, r1, #1
   219c4:	cmp	r2, r4
   219c8:	bcs	219f4 <flatcc_verify_struct_as_root@@Base+0x74>
   219cc:	adds	r2, r1, r5
   219d0:	mov	r0, #10
   219d4:	bcs	219f4 <flatcc_verify_struct_as_root@@Base+0x74>
   219d8:	mov	r0, #9
   219dc:	cmp	r2, r4
   219e0:	bhi	219f4 <flatcc_verify_struct_as_root@@Base+0x74>
   219e4:	ldr	r0, [fp, #8]
   219e8:	sub	r0, r0, #1
   219ec:	ands	r0, r1, r0
   219f0:	movwne	r0, #11
   219f4:	pop	{r4, r5, r6, r7, fp, pc}

000219f8 <flatcc_verify_struct_as_typed_root@@Base>:
   219f8:	push	{fp, lr}
   219fc:	mov	fp, sp
   21a00:	mov	ip, r0
   21a04:	mov	r0, #5
   21a08:	tst	ip, #3
   21a0c:	bne	21a7c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   21a10:	mov	r0, #6
   21a14:	cmn	r1, #9
   21a18:	bhi	21a7c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   21a1c:	mov	r0, #1
   21a20:	cmp	r1, #8
   21a24:	bcc	21a7c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   21a28:	cmp	r2, #0
   21a2c:	beq	21a40 <flatcc_verify_struct_as_typed_root@@Base+0x48>
   21a30:	ldr	lr, [ip, #4]
   21a34:	mov	r0, #2
   21a38:	cmp	lr, r2
   21a3c:	bne	21a7c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   21a40:	ldr	ip, [ip]
   21a44:	mov	r0, #18
   21a48:	sub	r2, ip, #1
   21a4c:	cmp	r2, r1
   21a50:	bcs	21a7c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   21a54:	adds	r3, ip, r3
   21a58:	mov	r0, #10
   21a5c:	bcs	21a7c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   21a60:	mov	r0, #9
   21a64:	cmp	r3, r1
   21a68:	pophi	{fp, pc}
   21a6c:	ldr	r0, [fp, #8]
   21a70:	sub	r0, r0, #1
   21a74:	ands	r0, ip, r0
   21a78:	movwne	r0, #11
   21a7c:	pop	{fp, pc}

00021a80 <flatcc_verify_table_as_root@@Base>:
   21a80:	push	{r4, r5, r6, r7, fp, lr}
   21a84:	add	fp, sp, #16
   21a88:	sub	sp, sp, #24
   21a8c:	mov	r4, r3
   21a90:	mov	r7, r2
   21a94:	mov	r5, r1
   21a98:	mov	r6, r0
   21a9c:	bl	218b8 <flatcc_verify_buffer_header@@Base>
   21aa0:	cmp	r0, #0
   21aa4:	beq	21ac0 <flatcc_verify_table_as_root@@Base+0x40>
   21aa8:	mov	r0, r6
   21aac:	mov	r1, r5
   21ab0:	mov	r2, r7
   21ab4:	sub	sp, fp, #16
   21ab8:	pop	{r4, r5, r6, r7, fp, lr}
   21abc:	b	218b8 <flatcc_verify_buffer_header@@Base>
   21ac0:	ldr	r1, [r6]
   21ac4:	mov	r0, #99	; 0x63
   21ac8:	str	r0, [sp, #8]
   21acc:	mov	r0, #15
   21ad0:	tst	r1, #3
   21ad4:	bne	21b74 <flatcc_verify_table_as_root@@Base+0xf4>
   21ad8:	cmp	r1, #0
   21adc:	beq	21b74 <flatcc_verify_table_as_root@@Base+0xf4>
   21ae0:	add	r2, r1, #4
   21ae4:	cmp	r2, r5
   21ae8:	bhi	21b74 <flatcc_verify_table_as_root@@Base+0xf4>
   21aec:	str	r1, [sp, #16]
   21af0:	ldr	r0, [r6, r1]
   21af4:	sub	r7, r1, r0
   21af8:	mov	r0, #29
   21afc:	tst	r7, #-2147483647	; 0x80000001
   21b00:	bne	21b74 <flatcc_verify_table_as_root@@Base+0xf4>
   21b04:	add	r3, r7, #2
   21b08:	mov	r0, #27
   21b0c:	cmp	r3, r5
   21b10:	bhi	21b74 <flatcc_verify_table_as_root@@Base+0xf4>
   21b14:	mov	ip, r6
   21b18:	mov	r0, #30
   21b1c:	ldrh	r2, [ip, r7]!
   21b20:	tst	r2, #1
   21b24:	strh	r2, [sp, #22]
   21b28:	bne	21b74 <flatcc_verify_table_as_root@@Base+0xf4>
   21b2c:	add	r7, r7, r2
   21b30:	cmp	r7, r5
   21b34:	bhi	21b74 <flatcc_verify_table_as_root@@Base+0xf4>
   21b38:	mov	r0, #28
   21b3c:	cmp	r2, #4
   21b40:	bcc	21b74 <flatcc_verify_table_as_root@@Base+0xf4>
   21b44:	add	r0, r6, r3
   21b48:	sub	r1, r5, r1
   21b4c:	ldrh	r2, [r0]
   21b50:	mov	r0, #20
   21b54:	cmp	r1, r2
   21b58:	strh	r2, [sp, #20]
   21b5c:	bcc	21b74 <flatcc_verify_table_as_root@@Base+0xf4>
   21b60:	mov	r0, sp
   21b64:	str	r5, [sp, #4]
   21b68:	str	r6, [sp]
   21b6c:	str	ip, [sp, #12]
   21b70:	blx	r4
   21b74:	sub	sp, fp, #16
   21b78:	pop	{r4, r5, r6, r7, fp, pc}

00021b7c <flatcc_verify_table_as_typed_root@@Base>:
   21b7c:	push	{r4, r5, r6, sl, fp, lr}
   21b80:	add	fp, sp, #16
   21b84:	sub	sp, sp, #24
   21b88:	mov	ip, #5
   21b8c:	tst	r0, #3
   21b90:	bne	21c78 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21b94:	mov	ip, #6
   21b98:	cmn	r1, #9
   21b9c:	bhi	21c78 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21ba0:	mov	ip, #1
   21ba4:	cmp	r1, #8
   21ba8:	bcc	21c78 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21bac:	cmp	r2, #0
   21bb0:	beq	21bc4 <flatcc_verify_table_as_typed_root@@Base+0x48>
   21bb4:	ldr	r6, [r0, #4]
   21bb8:	mov	ip, #2
   21bbc:	cmp	r6, r2
   21bc0:	bne	21c78 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21bc4:	ldr	r2, [r0]
   21bc8:	mov	r6, #99	; 0x63
   21bcc:	mov	ip, #15
   21bd0:	str	r6, [sp, #8]
   21bd4:	tst	r2, #3
   21bd8:	bne	21c78 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21bdc:	cmp	r2, #0
   21be0:	beq	21c78 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21be4:	add	r6, r2, #4
   21be8:	cmp	r6, r1
   21bec:	bhi	21c78 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21bf0:	str	r2, [sp, #16]
   21bf4:	mov	ip, #29
   21bf8:	ldr	r6, [r0, r2]
   21bfc:	sub	r5, r2, r6
   21c00:	tst	r5, #-2147483647	; 0x80000001
   21c04:	bne	21c78 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21c08:	add	r4, r5, #2
   21c0c:	mov	ip, #27
   21c10:	cmp	r4, r1
   21c14:	bhi	21c78 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21c18:	mov	lr, r0
   21c1c:	mov	ip, #30
   21c20:	ldrh	r6, [lr, r5]!
   21c24:	tst	r6, #1
   21c28:	strh	r6, [sp, #22]
   21c2c:	bne	21c78 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21c30:	add	r5, r5, r6
   21c34:	cmp	r5, r1
   21c38:	bhi	21c78 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21c3c:	mov	ip, #28
   21c40:	cmp	r6, #4
   21c44:	bcc	21c78 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21c48:	add	r6, r0, r4
   21c4c:	sub	r2, r1, r2
   21c50:	mov	ip, #20
   21c54:	ldrh	r4, [r6]
   21c58:	cmp	r2, r4
   21c5c:	strh	r4, [sp, #20]
   21c60:	bcc	21c78 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21c64:	stm	sp, {r0, r1}
   21c68:	mov	r0, sp
   21c6c:	str	lr, [sp, #12]
   21c70:	blx	r3
   21c74:	mov	ip, r0
   21c78:	mov	r0, ip
   21c7c:	sub	sp, fp, #16
   21c80:	pop	{r4, r5, r6, sl, fp, pc}

00021c84 <flatcc_verify_struct_as_nested_root@@Base>:
   21c84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c88:	add	fp, sp, #28
   21c8c:	sub	sp, sp, #12
   21c90:	ldr	r9, [fp, #12]
   21c94:	mov	r8, r3
   21c98:	mov	r5, #1
   21c9c:	mvn	sl, #0
   21ca0:	mov	r4, r2
   21ca4:	mov	r7, r1
   21ca8:	mov	r6, r0
   21cac:	stm	sp, {r5, sl}
   21cb0:	mov	r3, r9
   21cb4:	bl	21198 <flatcc_verify_vector_field@@Base>
   21cb8:	cmp	r0, #0
   21cbc:	beq	21cdc <flatcc_verify_struct_as_nested_root@@Base+0x58>
   21cc0:	mov	r0, r6
   21cc4:	mov	r1, r7
   21cc8:	mov	r2, r4
   21ccc:	mov	r3, r9
   21cd0:	stm	sp, {r5, sl}
   21cd4:	bl	21198 <flatcc_verify_vector_field@@Base>
   21cd8:	b	21d40 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   21cdc:	mov	r0, #4
   21ce0:	ldrh	r2, [r6, #22]
   21ce4:	add	r0, r0, r7, lsl #1
   21ce8:	uxth	r1, r0
   21cec:	cmp	r1, r2
   21cf0:	bcs	21d3c <flatcc_verify_struct_as_nested_root@@Base+0xb8>
   21cf4:	ldr	r1, [r6, #12]
   21cf8:	uxtah	r0, r1, r0
   21cfc:	ldrh	r0, [r0]
   21d00:	cmp	r0, #0
   21d04:	beq	21d3c <flatcc_verify_struct_as_nested_root@@Base+0xb8>
   21d08:	ldr	r1, [r6]
   21d0c:	ldr	r2, [r6, #16]
   21d10:	add	r1, r1, r2
   21d14:	adds	r0, r1, r0
   21d18:	beq	21d3c <flatcc_verify_struct_as_nested_root@@Base+0xb8>
   21d1c:	ldr	r2, [r0]
   21d20:	ldr	r3, [fp, #8]
   21d24:	ldr	r1, [r2, r0]!
   21d28:	str	r9, [sp]
   21d2c:	add	r0, r2, #4
   21d30:	mov	r2, r8
   21d34:	bl	21980 <flatcc_verify_struct_as_root@@Base>
   21d38:	b	21d40 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   21d3c:	mov	r0, #0
   21d40:	sub	sp, fp, #28
   21d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021d48 <flatcc_verify_table_as_nested_root@@Base>:
   21d48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d4c:	add	fp, sp, #28
   21d50:	sub	sp, sp, #36	; 0x24
   21d54:	mvn	r9, #0
   21d58:	mov	sl, #1
   21d5c:	mov	r8, r3
   21d60:	mov	r5, r2
   21d64:	mov	r4, r1
   21d68:	mov	r6, r0
   21d6c:	str	sl, [sp]
   21d70:	str	r9, [sp, #4]
   21d74:	ldr	r7, [fp, #8]
   21d78:	mov	r3, r7
   21d7c:	bl	21198 <flatcc_verify_vector_field@@Base>
   21d80:	cmp	r0, #0
   21d84:	beq	21da8 <flatcc_verify_table_as_nested_root@@Base+0x60>
   21d88:	mov	r0, r6
   21d8c:	mov	r1, r4
   21d90:	mov	r2, r5
   21d94:	mov	r3, r7
   21d98:	str	sl, [sp]
   21d9c:	str	r9, [sp, #4]
   21da0:	bl	21198 <flatcc_verify_vector_field@@Base>
   21da4:	b	21ef0 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   21da8:	mov	r0, #4
   21dac:	ldrh	r3, [r6, #22]
   21db0:	add	r1, r0, r4, lsl #1
   21db4:	mov	r0, #0
   21db8:	uxth	r2, r1
   21dbc:	cmp	r2, r3
   21dc0:	bcs	21ef0 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   21dc4:	ldr	r2, [r6, #12]
   21dc8:	uxtah	r1, r2, r1
   21dcc:	ldrh	r1, [r1]
   21dd0:	cmp	r1, #0
   21dd4:	beq	21ef0 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   21dd8:	ldr	r2, [r6]
   21ddc:	ldr	r3, [r6, #16]
   21de0:	add	r2, r2, r3
   21de4:	adds	r1, r2, r1
   21de8:	beq	21ef0 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   21dec:	ldr	r0, [r1]
   21df0:	ldr	r7, [fp, #12]
   21df4:	mov	r2, r8
   21df8:	ldr	r4, [r0, r1]!
   21dfc:	add	r5, r0, #4
   21e00:	mov	r0, r5
   21e04:	mov	r1, r4
   21e08:	bl	218b8 <flatcc_verify_buffer_header@@Base>
   21e0c:	cmp	r0, #0
   21e10:	beq	21e2c <flatcc_verify_table_as_nested_root@@Base+0xe4>
   21e14:	mov	r0, r5
   21e18:	mov	r1, r4
   21e1c:	mov	r2, r8
   21e20:	sub	sp, fp, #28
   21e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e28:	b	218b8 <flatcc_verify_buffer_header@@Base>
   21e2c:	ldr	r0, [r6, #8]
   21e30:	ldr	r1, [r5]
   21e34:	subs	r0, r0, #1
   21e38:	str	r0, [sp, #20]
   21e3c:	beq	21eec <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   21e40:	mov	r0, #15
   21e44:	tst	r1, #3
   21e48:	bne	21ef0 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   21e4c:	cmp	r1, #0
   21e50:	beq	21ef0 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   21e54:	add	r2, r1, #4
   21e58:	cmp	r2, r4
   21e5c:	bhi	21ef0 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   21e60:	str	r1, [sp, #28]
   21e64:	ldr	r0, [r5, r1]
   21e68:	sub	r6, r1, r0
   21e6c:	mov	r0, #29
   21e70:	tst	r6, #-2147483647	; 0x80000001
   21e74:	bne	21ef0 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   21e78:	add	r3, r6, #2
   21e7c:	mov	r0, #27
   21e80:	cmp	r3, r4
   21e84:	bhi	21ef0 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   21e88:	mov	ip, r5
   21e8c:	mov	r0, #30
   21e90:	ldrh	r2, [ip, r6]!
   21e94:	tst	r2, #1
   21e98:	strh	r2, [sp, #34]	; 0x22
   21e9c:	bne	21ef0 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   21ea0:	add	r6, r6, r2
   21ea4:	cmp	r6, r4
   21ea8:	bhi	21ef0 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   21eac:	mov	r0, #28
   21eb0:	cmp	r2, #4
   21eb4:	bcc	21ef0 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   21eb8:	add	r0, r5, r3
   21ebc:	sub	r1, r4, r1
   21ec0:	ldrh	r2, [r0]
   21ec4:	mov	r0, #20
   21ec8:	cmp	r1, r2
   21ecc:	strh	r2, [sp, #32]
   21ed0:	bcc	21ef0 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   21ed4:	add	r0, sp, #12
   21ed8:	str	r4, [sp, #16]
   21edc:	str	r5, [sp, #12]
   21ee0:	str	ip, [sp, #24]
   21ee4:	blx	r7
   21ee8:	b	21ef0 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   21eec:	mov	r0, #3
   21ef0:	sub	sp, fp, #28
   21ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021ef8 <flatcc_verify_union_field@@Base>:
   21ef8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21efc:	add	fp, sp, #24
   21f00:	sub	sp, sp, #32
   21f04:	mov	r5, r0
   21f08:	mov	r0, #2
   21f0c:	mov	r8, r3
   21f10:	lsl	r4, r1, #1
   21f14:	add	r0, r0, r1, lsl #1
   21f18:	ldrh	r3, [r5, #22]
   21f1c:	uxth	r7, r0
   21f20:	cmp	r7, r3
   21f24:	bcs	21fe0 <flatcc_verify_union_field@@Base+0xe8>
   21f28:	ldr	r7, [r5, #12]
   21f2c:	uxtah	r0, r7, r0
   21f30:	ldrh	r9, [r0]
   21f34:	cmp	r9, #0
   21f38:	beq	21fe0 <flatcc_verify_union_field@@Base+0xe8>
   21f3c:	ldrh	r6, [r5, #20]
   21f40:	mov	r0, #13
   21f44:	cmp	r9, r6
   21f48:	bcs	22014 <flatcc_verify_union_field@@Base+0x11c>
   21f4c:	add	r4, r4, #4
   21f50:	mov	r0, #1
   21f54:	uxth	r6, r4
   21f58:	cmp	r6, r3
   21f5c:	bcs	21f70 <flatcc_verify_union_field@@Base+0x78>
   21f60:	uxtah	r0, r7, r4
   21f64:	ldrh	r0, [r0]
   21f68:	clz	r0, r0
   21f6c:	lsr	r0, r0, #5
   21f70:	ldr	r3, [r5]
   21f74:	ldr	r7, [r5, #16]
   21f78:	cmp	r0, #0
   21f7c:	moveq	r0, #24
   21f80:	add	r7, r3, r7
   21f84:	ldrb	r3, [r7, r9]
   21f88:	cmpeq	r3, #0
   21f8c:	beq	22014 <flatcc_verify_union_field@@Base+0x11c>
   21f90:	cmp	r3, #0
   21f94:	beq	2201c <flatcc_verify_union_field@@Base+0x124>
   21f98:	add	r3, sp, #28
   21f9c:	mov	r0, r5
   21fa0:	bl	21118 <flatcc_verify_string_field@@Base+0x8c>
   21fa4:	cmp	r0, #0
   21fa8:	bne	22014 <flatcc_verify_union_field@@Base+0x11c>
   21fac:	ldr	r1, [sp, #28]
   21fb0:	cmp	r1, #0
   21fb4:	beq	22014 <flatcc_verify_union_field@@Base+0x11c>
   21fb8:	ldm	r5, {r0, r2, r3}
   21fbc:	str	r1, [sp, #20]
   21fc0:	stmib	sp, {r0, r2, r3}
   21fc4:	ldr	r0, [r0, r1]
   21fc8:	str	r0, [sp, #24]
   21fcc:	ldrb	r0, [r7, r9]
   21fd0:	strb	r0, [sp, #16]
   21fd4:	add	r0, sp, #4
   21fd8:	blx	r8
   21fdc:	b	22014 <flatcc_verify_union_field@@Base+0x11c>
   21fe0:	add	r0, r4, #4
   21fe4:	uxth	r1, r0
   21fe8:	cmp	r1, r3
   21fec:	bcs	22008 <flatcc_verify_union_field@@Base+0x110>
   21ff0:	ldr	r1, [r5, #12]
   21ff4:	uxtah	r0, r1, r0
   21ff8:	ldrh	r1, [r0]
   21ffc:	mov	r0, #23
   22000:	cmp	r1, #0
   22004:	bne	22014 <flatcc_verify_union_field@@Base+0x11c>
   22008:	cmp	r2, #0
   2200c:	movwne	r2, #21
   22010:	mov	r0, r2
   22014:	sub	sp, fp, #24
   22018:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2201c:	mov	r0, #0
   22020:	b	22014 <flatcc_verify_union_field@@Base+0x11c>

00022024 <flatcc_verify_union_vector_field@@Base>:
   22024:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22028:	add	fp, sp, #28
   2202c:	sub	sp, sp, #44	; 0x2c
   22030:	mov	r6, r0
   22034:	mov	sl, r1
   22038:	sub	r0, r1, #1
   2203c:	mov	r1, #4
   22040:	mov	r9, r2
   22044:	add	r7, r1, r0, lsl #1
   22048:	ldrh	r2, [r6, #22]
   2204c:	uxth	r4, r7
   22050:	cmp	r4, r2
   22054:	bcs	2206c <flatcc_verify_union_vector_field@@Base+0x48>
   22058:	ldr	r5, [r6, #12]
   2205c:	uxtah	r5, r5, r7
   22060:	ldrh	r5, [r5]
   22064:	cmp	r5, #0
   22068:	bne	220ac <flatcc_verify_union_vector_field@@Base+0x88>
   2206c:	add	r1, r1, sl, lsl #1
   22070:	uxth	r5, r1
   22074:	cmp	r5, r2
   22078:	bcs	220a0 <flatcc_verify_union_vector_field@@Base+0x7c>
   2207c:	cmp	r9, #0
   22080:	beq	220ac <flatcc_verify_union_vector_field@@Base+0x88>
   22084:	ldr	r2, [r6, #12]
   22088:	mov	r5, #22
   2208c:	uxtah	r1, r2, r1
   22090:	ldrh	r1, [r1]
   22094:	cmp	r1, #0
   22098:	beq	22260 <flatcc_verify_union_vector_field@@Base+0x23c>
   2209c:	b	220ac <flatcc_verify_union_vector_field@@Base+0x88>
   220a0:	mov	r5, #22
   220a4:	cmp	r9, #0
   220a8:	bne	22260 <flatcc_verify_union_vector_field@@Base+0x23c>
   220ac:	uxth	r5, r0
   220b0:	mvn	r1, #0
   220b4:	str	r3, [sp, #12]
   220b8:	mov	r8, #1
   220bc:	mov	r0, r6
   220c0:	mov	r2, r9
   220c4:	mov	r3, #1
   220c8:	str	r1, [sp, #4]
   220cc:	str	r8, [sp]
   220d0:	mov	r1, r5
   220d4:	bl	21198 <flatcc_verify_vector_field@@Base>
   220d8:	cmp	r0, #0
   220dc:	beq	22108 <flatcc_verify_union_vector_field@@Base+0xe4>
   220e0:	mvn	r0, #0
   220e4:	mov	r1, r5
   220e8:	mov	r2, r9
   220ec:	mov	r3, #1
   220f0:	str	r8, [sp]
   220f4:	str	r0, [sp, #4]
   220f8:	mov	r0, r6
   220fc:	bl	21198 <flatcc_verify_vector_field@@Base>
   22100:	mov	r5, r0
   22104:	b	22260 <flatcc_verify_union_vector_field@@Base+0x23c>
   22108:	ldrh	r0, [r6, #22]
   2210c:	mov	r5, #0
   22110:	cmp	r4, r0
   22114:	bcs	22260 <flatcc_verify_union_vector_field@@Base+0x23c>
   22118:	ldr	r0, [r6, #12]
   2211c:	uxtah	r0, r0, r7
   22120:	ldrh	r0, [r0]
   22124:	cmp	r0, #0
   22128:	beq	22260 <flatcc_verify_union_vector_field@@Base+0x23c>
   2212c:	ldr	r1, [r6]
   22130:	ldr	r2, [r6, #16]
   22134:	ldr	r7, [sp, #12]
   22138:	add	r1, r1, r2
   2213c:	adds	r0, r1, r0
   22140:	beq	22260 <flatcc_verify_union_vector_field@@Base+0x23c>
   22144:	ldr	r4, [r0]
   22148:	add	r3, sp, #16
   2214c:	mov	r1, sl
   22150:	mov	r2, r9
   22154:	ldr	r8, [r4, r0]!
   22158:	mov	r0, r6
   2215c:	bl	21118 <flatcc_verify_string_field@@Base+0x8c>
   22160:	mov	r5, r0
   22164:	cmp	r0, #0
   22168:	bne	22260 <flatcc_verify_union_vector_field@@Base+0x23c>
   2216c:	ldr	r1, [sp, #16]
   22170:	cmp	r1, #0
   22174:	beq	22260 <flatcc_verify_union_vector_field@@Base+0x23c>
   22178:	ldr	r0, [r6, #8]
   2217c:	cmp	r0, #1
   22180:	blt	2225c <flatcc_verify_union_vector_field@@Base+0x238>
   22184:	ldr	sl, [r6]
   22188:	mov	r5, #16
   2218c:	ldr	r2, [sl, r1]
   22190:	add	r2, r2, r1
   22194:	cmp	r2, r1
   22198:	bls	22260 <flatcc_verify_union_vector_field@@Base+0x23c>
   2219c:	ldr	r1, [r6, #4]
   221a0:	add	r6, r2, #4
   221a4:	cmp	r6, r1
   221a8:	bhi	22260 <flatcc_verify_union_vector_field@@Base+0x23c>
   221ac:	ands	r3, r6, #3
   221b0:	bne	22260 <flatcc_verify_union_vector_field@@Base+0x23c>
   221b4:	ldr	r3, [sl, r2]
   221b8:	mov	r5, #25
   221bc:	cmn	r3, #-1073741823	; 0xc0000001
   221c0:	bhi	22260 <flatcc_verify_union_vector_field@@Base+0x23c>
   221c4:	sub	r2, r1, r2
   221c8:	mov	r5, #26
   221cc:	sub	r2, r2, #4
   221d0:	cmp	r2, r3, lsl #2
   221d4:	bcc	22260 <flatcc_verify_union_vector_field@@Base+0x23c>
   221d8:	mov	r5, #34	; 0x22
   221dc:	cmp	r3, r8
   221e0:	bne	22260 <flatcc_verify_union_vector_field@@Base+0x23c>
   221e4:	sub	r0, r0, #1
   221e8:	mov	r5, #0
   221ec:	cmp	r8, #0
   221f0:	str	r0, [sp, #28]
   221f4:	str	r1, [sp, #24]
   221f8:	str	sl, [sp, #20]
   221fc:	beq	22260 <flatcc_verify_union_vector_field@@Base+0x23c>
   22200:	add	r4, r4, #4
   22204:	add	r9, sp, #20
   22208:	ldr	r1, [sl, r6]
   2220c:	ldrb	r0, [r4]
   22210:	cmp	r1, #0
   22214:	beq	22240 <flatcc_verify_union_vector_field@@Base+0x21c>
   22218:	cmp	r0, #0
   2221c:	beq	2226c <flatcc_verify_union_vector_field@@Base+0x248>
   22220:	str	r1, [sp, #40]	; 0x28
   22224:	str	r6, [sp, #36]	; 0x24
   22228:	strb	r0, [sp, #32]
   2222c:	mov	r0, r9
   22230:	blx	r7
   22234:	cmp	r0, #0
   22238:	beq	22248 <flatcc_verify_union_vector_field@@Base+0x224>
   2223c:	b	22274 <flatcc_verify_union_vector_field@@Base+0x250>
   22240:	cmp	r0, #0
   22244:	bne	22280 <flatcc_verify_union_vector_field@@Base+0x25c>
   22248:	add	r4, r4, #1
   2224c:	subs	r8, r8, #1
   22250:	add	r6, r6, #4
   22254:	bne	22208 <flatcc_verify_union_vector_field@@Base+0x1e4>
   22258:	b	22260 <flatcc_verify_union_vector_field@@Base+0x23c>
   2225c:	mov	r5, #3
   22260:	mov	r0, r5
   22264:	sub	sp, fp, #28
   22268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2226c:	mov	r5, #33	; 0x21
   22270:	b	22260 <flatcc_verify_union_vector_field@@Base+0x23c>
   22274:	add	r0, sp, #20
   22278:	blx	r7
   2227c:	b	22100 <flatcc_verify_union_vector_field@@Base+0xdc>
   22280:	mov	r5, #32
   22284:	b	22260 <flatcc_verify_union_vector_field@@Base+0x23c>

00022288 <__libc_csu_init@@Base>:
   22288:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2228c:	mov	r7, r0
   22290:	ldr	r6, [pc, #72]	; 222e0 <__libc_csu_init@@Base+0x58>
   22294:	ldr	r5, [pc, #72]	; 222e4 <__libc_csu_init@@Base+0x5c>
   22298:	add	r6, pc, r6
   2229c:	add	r5, pc, r5
   222a0:	sub	r6, r6, r5
   222a4:	mov	r8, r1
   222a8:	mov	r9, r2
   222ac:	bl	12e6c <strcmp@plt-0x20>
   222b0:	asrs	r6, r6, #2
   222b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   222b8:	mov	r4, #0
   222bc:	add	r4, r4, #1
   222c0:	ldr	r3, [r5], #4
   222c4:	mov	r2, r9
   222c8:	mov	r1, r8
   222cc:	mov	r0, r7
   222d0:	blx	r3
   222d4:	cmp	r6, r4
   222d8:	bne	222bc <__libc_csu_init@@Base+0x34>
   222dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   222e0:	andeq	r5, r1, ip, ror #24
   222e4:	andeq	r5, r1, r4, ror #24

000222e8 <__libc_csu_fini@@Base>:
   222e8:	bx	lr

Disassembly of section .fini:

000222ec <.fini>:
   222ec:	push	{r3, lr}
   222f0:	pop	{r3, pc}
