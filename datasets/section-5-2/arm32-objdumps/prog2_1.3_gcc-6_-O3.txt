
../repos/prog2/1.3:     file format elf32-littlearm


Disassembly of section .init:

00010644 <.init>:
   10644:	push	{r3, lr}
   10648:	bl	108c4 <_start@@Base+0x3c>
   1064c:	pop	{r3, pc}

Disassembly of section .plt:

00010650 <printf@plt-0x14>:
   10650:	push	{lr}		; (str lr, [sp, #-4]!)
   10654:	ldr	lr, [pc, #4]	; 10660 <printf@plt-0x4>
   10658:	add	lr, pc, lr
   1065c:	ldr	pc, [lr, #8]!
   10660:	andeq	r0, r1, r0, lsr #19

00010664 <printf@plt>:
   10664:	add	ip, pc, #0, 12
   10668:	add	ip, ip, #16, 20	; 0x10000
   1066c:	ldr	pc, [ip, #2464]!	; 0x9a0

00010670 <fopen@plt>:
   10670:	add	ip, pc, #0, 12
   10674:	add	ip, ip, #16, 20	; 0x10000
   10678:	ldr	pc, [ip, #2456]!	; 0x998

0001067c <strcpy@plt>:
   1067c:	add	ip, pc, #0, 12
   10680:	add	ip, ip, #16, 20	; 0x10000
   10684:	ldr	pc, [ip, #2448]!	; 0x990

00010688 <__libc_start_main@plt>:
   10688:	add	ip, pc, #0, 12
   1068c:	add	ip, ip, #16, 20	; 0x10000
   10690:	ldr	pc, [ip, #2440]!	; 0x988

00010694 <__gmon_start__@plt>:
   10694:	add	ip, pc, #0, 12
   10698:	add	ip, ip, #16, 20	; 0x10000
   1069c:	ldr	pc, [ip, #2432]!	; 0x980

000106a0 <memset@plt>:
   106a0:	add	ip, pc, #0, 12
   106a4:	add	ip, ip, #16, 20	; 0x10000
   106a8:	ldr	pc, [ip, #2424]!	; 0x978

000106ac <fclose@plt>:
   106ac:	add	ip, pc, #0, 12
   106b0:	add	ip, ip, #16, 20	; 0x10000
   106b4:	ldr	pc, [ip, #2416]!	; 0x970

000106b8 <fseek@plt>:
   106b8:	add	ip, pc, #0, 12
   106bc:	add	ip, ip, #16, 20	; 0x10000
   106c0:	ldr	pc, [ip, #2408]!	; 0x968

000106c4 <abort@plt>:
   106c4:	add	ip, pc, #0, 12
   106c8:	add	ip, ip, #16, 20	; 0x10000
   106cc:	ldr	pc, [ip, #2400]!	; 0x960

000106d0 <getc@plt>:
   106d0:	add	ip, pc, #0, 12
   106d4:	add	ip, ip, #16, 20	; 0x10000
   106d8:	ldr	pc, [ip, #2392]!	; 0x958

Disassembly of section .text:

000106dc <main@@Base>:
   106dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106e0:	sub	sp, sp, #2256	; 0x8d0
   106e4:	sub	sp, sp, #12
   106e8:	ldr	r1, [pc, #396]	; 1087c <main@@Base+0x1a0>
   106ec:	ldr	r0, [pc, #396]	; 10880 <main@@Base+0x1a4>
   106f0:	bl	10670 <fopen@plt>
   106f4:	add	r6, sp, #212	; 0xd4
   106f8:	add	r7, sp, #12
   106fc:	mov	sl, #200	; 0xc8
   10700:	mvn	r9, #60	; 0x3c
   10704:	mvn	r8, #94	; 0x5e
   10708:	mov	r4, r0
   1070c:	b	10718 <main@@Base+0x3c>
   10710:	cmp	r0, #60	; 0x3c
   10714:	beq	10740 <main@@Base+0x64>
   10718:	mov	r0, r4
   1071c:	bl	106d0 <getc@plt>
   10720:	cmn	r0, #1
   10724:	bne	10710 <main@@Base+0x34>
   10728:	mov	r0, r4
   1072c:	bl	106ac <fclose@plt>
   10730:	mov	r0, #0
   10734:	add	sp, sp, #2256	; 0x8d0
   10738:	add	sp, sp, #12
   1073c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10740:	mov	r0, r4
   10744:	bl	106d0 <getc@plt>
   10748:	cmp	r0, #97	; 0x61
   1074c:	bne	10718 <main@@Base+0x3c>
   10750:	mov	r2, sl
   10754:	mov	r1, #0
   10758:	mov	r0, r7
   1075c:	bl	106a0 <memset@plt>
   10760:	mov	r2, #1
   10764:	mov	r1, #7
   10768:	mov	r0, r4
   1076c:	bl	106b8 <fseek@plt>
   10770:	add	r5, sp, #11
   10774:	mov	fp, #0
   10778:	b	10784 <main@@Base+0xa8>
   1077c:	add	fp, fp, #1
   10780:	strb	r0, [r5, #1]!
   10784:	mov	r0, r4
   10788:	bl	106d0 <getc@plt>
   1078c:	cmp	r0, #34	; 0x22
   10790:	bne	1077c <main@@Base+0xa0>
   10794:	add	r3, sp, #2256	; 0x8d0
   10798:	add	r3, r3, #8
   1079c:	add	r3, r3, fp
   107a0:	mov	r5, #0
   107a4:	mov	r1, r7
   107a8:	mov	r0, r6
   107ac:	strb	r5, [r3, #-2252]	; 0xfffff734
   107b0:	bl	1067c <strcpy@plt>
   107b4:	mov	r2, sl
   107b8:	mov	r1, r5
   107bc:	mov	r0, r7
   107c0:	bl	106a0 <memset@plt>
   107c4:	mov	r2, #1
   107c8:	mov	r1, r2
   107cc:	mov	r0, r4
   107d0:	bl	106b8 <fseek@plt>
   107d4:	b	10800 <main@@Base+0x124>
   107d8:	cmp	r0, #225	; 0xe1
   107dc:	addeq	r3, sp, #2256	; 0x8d0
   107e0:	addeq	r3, r3, #8
   107e4:	addeq	r2, r3, r5
   107e8:	addeq	r5, r5, #1
   107ec:	addeq	r3, r3, r5
   107f0:	add	r5, r5, #1
   107f4:	strbeq	r9, [r2, #-2252]	; 0xfffff734
   107f8:	strbne	r0, [r3, #-2252]	; 0xfffff734
   107fc:	strbeq	r8, [r3, #-2252]	; 0xfffff734
   10800:	mov	r0, r4
   10804:	bl	106d0 <getc@plt>
   10808:	add	r3, sp, #2256	; 0x8d0
   1080c:	add	r3, r3, #8
   10810:	add	r3, r3, r5
   10814:	cmp	r0, #60	; 0x3c
   10818:	bne	107d8 <main@@Base+0xfc>
   1081c:	add	r3, sp, #2256	; 0x8d0
   10820:	add	r3, r3, #8
   10824:	add	r5, r3, r5
   10828:	add	r3, r6, #205	; 0xcd
   1082c:	mov	r2, #0
   10830:	mov	r0, r3
   10834:	mov	r1, r7
   10838:	str	r3, [sp, #4]
   1083c:	strb	r2, [r5, #-2252]	; 0xfffff734
   10840:	str	r2, [sp]
   10844:	bl	1067c <strcpy@plt>
   10848:	ldr	r2, [sp]
   1084c:	mov	r0, r7
   10850:	mov	r1, r2
   10854:	mov	r2, #80	; 0x50
   10858:	bl	106a0 <memset@plt>
   1085c:	ldr	r3, [sp, #4]
   10860:	mov	r2, r6
   10864:	mov	r1, r3
   10868:	ldr	r0, [pc, #20]	; 10884 <main@@Base+0x1a8>
   1086c:	add	r6, r6, #408	; 0x198
   10870:	bl	10664 <printf@plt>
   10874:	add	r6, r6, #2
   10878:	b	10718 <main@@Base+0x3c>
   1087c:	andeq	r0, r1, r0, lsr sl
   10880:	andeq	r0, r1, r4, lsr sl
   10884:	andeq	r0, r1, ip, asr #20

00010888 <_start@@Base>:
   10888:	mov	fp, #0
   1088c:	mov	lr, #0
   10890:	pop	{r1}		; (ldr r1, [sp], #4)
   10894:	mov	r2, sp
   10898:	push	{r2}		; (str r2, [sp, #-4]!)
   1089c:	push	{r0}		; (str r0, [sp, #-4]!)
   108a0:	ldr	ip, [pc, #16]	; 108b8 <_start@@Base+0x30>
   108a4:	push	{ip}		; (str ip, [sp, #-4]!)
   108a8:	ldr	r0, [pc, #12]	; 108bc <_start@@Base+0x34>
   108ac:	ldr	r3, [pc, #12]	; 108c0 <_start@@Base+0x38>
   108b0:	bl	10688 <__libc_start_main@plt>
   108b4:	bl	106c4 <abort@plt>
   108b8:	andeq	r0, r1, r0, lsr #20
   108bc:	ldrdeq	r0, [r1], -ip
   108c0:	andeq	r0, r1, r0, asr #19
   108c4:	ldr	r3, [pc, #20]	; 108e0 <_start@@Base+0x58>
   108c8:	ldr	r2, [pc, #20]	; 108e4 <_start@@Base+0x5c>
   108cc:	add	r3, pc, r3
   108d0:	ldr	r2, [r3, r2]
   108d4:	cmp	r2, #0
   108d8:	bxeq	lr
   108dc:	b	10694 <__gmon_start__@plt>
   108e0:	andeq	r0, r1, ip, lsr #14
   108e4:	andeq	r0, r0, r4, lsr r0
   108e8:	ldr	r3, [pc, #28]	; 1090c <_start@@Base+0x84>
   108ec:	ldr	r0, [pc, #28]	; 10910 <_start@@Base+0x88>
   108f0:	sub	r3, r3, r0
   108f4:	cmp	r3, #6
   108f8:	bxls	lr
   108fc:	ldr	r3, [pc, #16]	; 10914 <_start@@Base+0x8c>
   10900:	cmp	r3, #0
   10904:	bxeq	lr
   10908:	bx	r3
   1090c:	andeq	r1, r2, r3, asr #32
   10910:	andeq	r1, r2, r0, asr #32
   10914:	andeq	r0, r0, r0
   10918:	ldr	r1, [pc, #36]	; 10944 <_start@@Base+0xbc>
   1091c:	ldr	r0, [pc, #36]	; 10948 <_start@@Base+0xc0>
   10920:	sub	r1, r1, r0
   10924:	asr	r1, r1, #2
   10928:	add	r1, r1, r1, lsr #31
   1092c:	asrs	r1, r1, #1
   10930:	bxeq	lr
   10934:	ldr	r3, [pc, #16]	; 1094c <_start@@Base+0xc4>
   10938:	cmp	r3, #0
   1093c:	bxeq	lr
   10940:	bx	r3
   10944:	andeq	r1, r2, r0, asr #32
   10948:	andeq	r1, r2, r0, asr #32
   1094c:	andeq	r0, r0, r0
   10950:	push	{r4, lr}
   10954:	ldr	r4, [pc, #24]	; 10974 <_start@@Base+0xec>
   10958:	ldrb	r3, [r4]
   1095c:	cmp	r3, #0
   10960:	popne	{r4, pc}
   10964:	bl	108e8 <_start@@Base+0x60>
   10968:	mov	r3, #1
   1096c:	strb	r3, [r4]
   10970:	pop	{r4, pc}
   10974:	andeq	r1, r2, r0, asr #32
   10978:	ldr	r0, [pc, #40]	; 109a8 <_start@@Base+0x120>
   1097c:	ldr	r3, [r0]
   10980:	cmp	r3, #0
   10984:	bne	1098c <_start@@Base+0x104>
   10988:	b	10918 <_start@@Base+0x90>
   1098c:	ldr	r3, [pc, #24]	; 109ac <_start@@Base+0x124>
   10990:	cmp	r3, #0
   10994:	beq	10988 <_start@@Base+0x100>
   10998:	push	{r4, lr}
   1099c:	blx	r3
   109a0:	pop	{r4, lr}
   109a4:	b	10918 <_start@@Base+0x90>
   109a8:	andeq	r0, r2, r4, lsl pc
   109ac:	andeq	r0, r0, r0

000109b0 <esvaziastring@@Base>:
   109b0:	subs	r2, r1, #0
   109b4:	bxle	lr
   109b8:	mov	r1, #0
   109bc:	b	106a0 <memset@plt>

000109c0 <__libc_csu_init@@Base>:
   109c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   109c4:	mov	r7, r0
   109c8:	ldr	r6, [pc, #72]	; 10a18 <__libc_csu_init@@Base+0x58>
   109cc:	ldr	r5, [pc, #72]	; 10a1c <__libc_csu_init@@Base+0x5c>
   109d0:	add	r6, pc, r6
   109d4:	add	r5, pc, r5
   109d8:	sub	r6, r6, r5
   109dc:	mov	r8, r1
   109e0:	mov	r9, r2
   109e4:	bl	10644 <printf@plt-0x20>
   109e8:	asrs	r6, r6, #2
   109ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   109f0:	mov	r4, #0
   109f4:	add	r4, r4, #1
   109f8:	ldr	r3, [r5], #4
   109fc:	mov	r2, r9
   10a00:	mov	r1, r8
   10a04:	mov	r0, r7
   10a08:	blx	r3
   10a0c:	cmp	r6, r4
   10a10:	bne	109f4 <__libc_csu_init@@Base+0x34>
   10a14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a18:	andeq	r0, r1, r8, lsr r5
   10a1c:	andeq	r0, r1, r0, lsr r5

00010a20 <__libc_csu_fini@@Base>:
   10a20:	bx	lr

Disassembly of section .fini:

00010a24 <.fini>:
   10a24:	push	{r3, lr}
   10a28:	pop	{r3, pc}
