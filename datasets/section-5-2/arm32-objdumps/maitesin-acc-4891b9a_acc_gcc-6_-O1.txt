
../repos/maitesin-acc-4891b9a/bin/acc:     file format elf32-littlearm


Disassembly of section .init:

0001194c <.init>:
   1194c:	push	{r3, lr}
   11950:	bl	11b70 <_start@@Base+0x3c>
   11954:	pop	{r3, pc}

Disassembly of section .plt:

00011958 <fdopen@plt-0x14>:
   11958:	push	{lr}		; (str lr, [sp, #-4]!)
   1195c:	ldr	lr, [pc, #4]	; 11968 <fdopen@plt-0x4>
   11960:	add	lr, pc, lr
   11964:	ldr	pc, [lr, #8]!
   11968:	muleq	r1, r8, r6

0001196c <fdopen@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #94208	; 0x17000
   11974:	ldr	pc, [ip, #1688]!	; 0x698

00011978 <raise@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #94208	; 0x17000
   11980:	ldr	pc, [ip, #1680]!	; 0x690

00011984 <setbuf@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #94208	; 0x17000
   1198c:	ldr	pc, [ip, #1672]!	; 0x688

00011990 <strtol@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #94208	; 0x17000
   11998:	ldr	pc, [ip, #1664]!	; 0x680

0001199c <fopen@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #94208	; 0x17000
   119a4:	ldr	pc, [ip, #1656]!	; 0x678

000119a8 <free@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #94208	; 0x17000
   119b0:	ldr	pc, [ip, #1648]!	; 0x670

000119b4 <memcpy@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #94208	; 0x17000
   119bc:	ldr	pc, [ip, #1640]!	; 0x668

000119c0 <ftell@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #94208	; 0x17000
   119c8:	ldr	pc, [ip, #1632]!	; 0x660

000119cc <fwrite@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #94208	; 0x17000
   119d4:	ldr	pc, [ip, #1624]!	; 0x658

000119d8 <strcpy@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #94208	; 0x17000
   119e0:	ldr	pc, [ip, #1616]!	; 0x650

000119e4 <fread@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #94208	; 0x17000
   119ec:	ldr	pc, [ip, #1608]!	; 0x648

000119f0 <getenv@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #94208	; 0x17000
   119f8:	ldr	pc, [ip, #1600]!	; 0x640

000119fc <malloc@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #94208	; 0x17000
   11a04:	ldr	pc, [ip, #1592]!	; 0x638

00011a08 <__libc_start_main@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #94208	; 0x17000
   11a10:	ldr	pc, [ip, #1584]!	; 0x630

00011a14 <__fxstat@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #94208	; 0x17000
   11a1c:	ldr	pc, [ip, #1576]!	; 0x628

00011a20 <__gmon_start__@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #94208	; 0x17000
   11a28:	ldr	pc, [ip, #1568]!	; 0x620

00011a2c <open@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #94208	; 0x17000
   11a34:	ldr	pc, [ip, #1560]!	; 0x618

00011a38 <getpid@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #94208	; 0x17000
   11a40:	ldr	pc, [ip, #1552]!	; 0x610

00011a44 <exit@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #94208	; 0x17000
   11a4c:	ldr	pc, [ip, #1544]!	; 0x608

00011a50 <strlen@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #94208	; 0x17000
   11a58:	ldr	pc, [ip, #1536]!	; 0x600

00011a5c <getopt@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #94208	; 0x17000
   11a64:	ldr	pc, [ip, #1528]!	; 0x5f8

00011a68 <fprintf@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #94208	; 0x17000
   11a70:	ldr	pc, [ip, #1520]!	; 0x5f0

00011a74 <__errno_location@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #94208	; 0x17000
   11a7c:	ldr	pc, [ip, #1512]!	; 0x5e8

00011a80 <__cxa_atexit@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #94208	; 0x17000
   11a88:	ldr	pc, [ip, #1504]!	; 0x5e0

00011a8c <mkdir@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #94208	; 0x17000
   11a94:	ldr	pc, [ip, #1496]!	; 0x5d8

00011a98 <fcntl@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #94208	; 0x17000
   11aa0:	ldr	pc, [ip, #1488]!	; 0x5d0

00011aa4 <memset@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #94208	; 0x17000
   11aac:	ldr	pc, [ip, #1480]!	; 0x5c8

00011ab0 <strncpy@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #94208	; 0x17000
   11ab8:	ldr	pc, [ip, #1472]!	; 0x5c0

00011abc <access@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #94208	; 0x17000
   11ac4:	ldr	pc, [ip, #1464]!	; 0x5b8

00011ac8 <fclose@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #94208	; 0x17000
   11ad0:	ldr	pc, [ip, #1456]!	; 0x5b0

00011ad4 <strnlen@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #94208	; 0x17000
   11adc:	ldr	pc, [ip, #1448]!	; 0x5a8

00011ae0 <vfprintf@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #94208	; 0x17000
   11ae8:	ldr	pc, [ip, #1440]!	; 0x5a0

00011aec <fputc@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #94208	; 0x17000
   11af4:	ldr	pc, [ip, #1432]!	; 0x598

00011af8 <atoi@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #94208	; 0x17000
   11b00:	ldr	pc, [ip, #1424]!	; 0x590

00011b04 <fseek@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #94208	; 0x17000
   11b0c:	ldr	pc, [ip, #1416]!	; 0x588

00011b10 <strncmp@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #94208	; 0x17000
   11b18:	ldr	pc, [ip, #1408]!	; 0x580

00011b1c <abort@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #94208	; 0x17000
   11b24:	ldr	pc, [ip, #1400]!	; 0x578

00011b28 <close@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #94208	; 0x17000
   11b30:	ldr	pc, [ip, #1392]!	; 0x570

Disassembly of section .text:

00011b34 <_start@@Base>:
   11b34:	mov	fp, #0
   11b38:	mov	lr, #0
   11b3c:	pop	{r1}		; (ldr r1, [sp], #4)
   11b40:	mov	r2, sp
   11b44:	push	{r2}		; (str r2, [sp, #-4]!)
   11b48:	push	{r0}		; (str r0, [sp, #-4]!)
   11b4c:	ldr	ip, [pc, #16]	; 11b64 <_start@@Base+0x30>
   11b50:	push	{ip}		; (str ip, [sp, #-4]!)
   11b54:	ldr	r0, [pc, #12]	; 11b68 <_start@@Base+0x34>
   11b58:	ldr	r3, [pc, #12]	; 11b6c <_start@@Base+0x38>
   11b5c:	bl	11a08 <__libc_start_main@plt>
   11b60:	bl	11b1c <abort@plt>
   11b64:	andeq	r7, r1, ip, asr #19
   11b68:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11b6c:	andeq	r7, r1, ip, ror #18
   11b70:	ldr	r3, [pc, #20]	; 11b8c <_start@@Base+0x58>
   11b74:	ldr	r2, [pc, #20]	; 11b90 <_start@@Base+0x5c>
   11b78:	add	r3, pc, r3
   11b7c:	ldr	r2, [r3, r2]
   11b80:	cmp	r2, #0
   11b84:	bxeq	lr
   11b88:	b	11a20 <__gmon_start__@plt>
   11b8c:	andeq	r7, r1, r0, lsl #9
   11b90:	andeq	r0, r0, r8, lsr #1
   11b94:	ldr	r3, [pc, #28]	; 11bb8 <_start@@Base+0x84>
   11b98:	ldr	r0, [pc, #28]	; 11bbc <_start@@Base+0x88>
   11b9c:	sub	r3, r3, r0
   11ba0:	cmp	r3, #6
   11ba4:	bxls	lr
   11ba8:	ldr	r3, [pc, #16]	; 11bc0 <_start@@Base+0x8c>
   11bac:	cmp	r3, #0
   11bb0:	bxeq	lr
   11bb4:	bx	r3
   11bb8:			; <UNDEFINED> instruction: 0x00029ab3
   11bbc:			; <UNDEFINED> instruction: 0x00029ab0
   11bc0:	andeq	r0, r0, r0
   11bc4:	ldr	r1, [pc, #36]	; 11bf0 <_start@@Base+0xbc>
   11bc8:	ldr	r0, [pc, #36]	; 11bf4 <_start@@Base+0xc0>
   11bcc:	sub	r1, r1, r0
   11bd0:	asr	r1, r1, #2
   11bd4:	add	r1, r1, r1, lsr #31
   11bd8:	asrs	r1, r1, #1
   11bdc:	bxeq	lr
   11be0:	ldr	r3, [pc, #16]	; 11bf8 <_start@@Base+0xc4>
   11be4:	cmp	r3, #0
   11be8:	bxeq	lr
   11bec:	bx	r3
   11bf0:			; <UNDEFINED> instruction: 0x00029ab0
   11bf4:			; <UNDEFINED> instruction: 0x00029ab0
   11bf8:	andeq	r0, r0, r0
   11bfc:	push	{r4, lr}
   11c00:	ldr	r4, [pc, #24]	; 11c20 <_start@@Base+0xec>
   11c04:	ldrb	r3, [r4]
   11c08:	cmp	r3, #0
   11c0c:	popne	{r4, pc}
   11c10:	bl	11b94 <_start@@Base+0x60>
   11c14:	mov	r3, #1
   11c18:	strb	r3, [r4]
   11c1c:	pop	{r4, pc}
   11c20:	andeq	r9, r2, r4, asr #21
   11c24:	ldr	r0, [pc, #40]	; 11c54 <_start@@Base+0x120>
   11c28:	ldr	r3, [r0]
   11c2c:	cmp	r3, #0
   11c30:	bne	11c38 <_start@@Base+0x104>
   11c34:	b	11bc4 <_start@@Base+0x90>
   11c38:	ldr	r3, [pc, #24]	; 11c58 <_start@@Base+0x124>
   11c3c:	cmp	r3, #0
   11c40:	beq	11c34 <_start@@Base+0x100>
   11c44:	push	{r4, lr}
   11c48:	blx	r3
   11c4c:	pop	{r4, lr}
   11c50:	b	11bc4 <_start@@Base+0x90>
   11c54:	andeq	r8, r2, r4, lsl pc
   11c58:	andeq	r0, r0, r0

00011c5c <load_file@@Base>:
   11c5c:	push	{r4, r5, r6, r7, r8, lr}
   11c60:	mov	r6, r0
   11c64:	ldr	r4, [pc, #516]	; 11e70 <load_file@@Base+0x214>
   11c68:	ldrd	r2, [r4]
   11c6c:	adds	r2, r2, #1
   11c70:	adc	r3, r3, #0
   11c74:	strd	r2, [r4]
   11c78:	ldr	r1, [pc, #500]	; 11e74 <load_file@@Base+0x218>
   11c7c:	bl	1199c <fopen@plt>
   11c80:	ldrd	r2, [r4, #8]
   11c84:	adds	r2, r2, #1
   11c88:	adc	r3, r3, #0
   11c8c:	strd	r2, [r4, #8]
   11c90:	subs	r5, r0, #0
   11c94:	beq	11e68 <load_file@@Base+0x20c>
   11c98:	ldrd	r2, [r4, #16]
   11c9c:	adds	r2, r2, #1
   11ca0:	adc	r3, r3, #0
   11ca4:	strd	r2, [r4, #16]
   11ca8:	mov	r2, #2
   11cac:	mov	r1, #0
   11cb0:	mov	r0, r5
   11cb4:	bl	11b04 <fseek@plt>
   11cb8:	ldrd	r2, [r4, #24]
   11cbc:	adds	r2, r2, #1
   11cc0:	adc	r3, r3, #0
   11cc4:	strd	r2, [r4, #24]
   11cc8:	cmp	r0, #0
   11ccc:	bne	11e40 <load_file@@Base+0x1e4>
   11cd0:	ldrd	r2, [r4, #32]
   11cd4:	adds	r2, r2, #1
   11cd8:	adc	r3, r3, #0
   11cdc:	strd	r2, [r4, #32]
   11ce0:	mov	r0, r5
   11ce4:	bl	119c0 <ftell@plt>
   11ce8:	mov	r7, r0
   11cec:	cmn	r0, #1
   11cf0:	beq	11d7c <load_file@@Base+0x120>
   11cf4:	ldr	r1, [pc, #372]	; 11e70 <load_file@@Base+0x214>
   11cf8:	ldrd	r2, [r1, #48]	; 0x30
   11cfc:	adds	r2, r2, #1
   11d00:	adc	r3, r3, #0
   11d04:	strd	r2, [r1, #48]	; 0x30
   11d08:	add	r0, r0, #1
   11d0c:	bl	119fc <malloc@plt>
   11d10:	mov	r4, r0
   11d14:	mov	r2, #0
   11d18:	mov	r1, r2
   11d1c:	mov	r0, r5
   11d20:	bl	11b04 <fseek@plt>
   11d24:	cmp	r0, #0
   11d28:	bne	11dbc <load_file@@Base+0x160>
   11d2c:	ldr	r1, [pc, #316]	; 11e70 <load_file@@Base+0x214>
   11d30:	ldrd	r2, [r1, #72]	; 0x48
   11d34:	adds	r2, r2, #1
   11d38:	adc	r3, r3, #0
   11d3c:	strd	r2, [r1, #72]	; 0x48
   11d40:	mov	r3, r5
   11d44:	mov	r2, r7
   11d48:	mov	r1, #1
   11d4c:	mov	r0, r4
   11d50:	bl	119e4 <fread@plt>
   11d54:	cmp	r0, #0
   11d58:	beq	11e00 <load_file@@Base+0x1a4>
   11d5c:	mov	r3, #0
   11d60:	strb	r3, [r4, r0]
   11d64:	ldr	r1, [pc, #260]	; 11e70 <load_file@@Base+0x214>
   11d68:	ldrd	r2, [r1, #104]	; 0x68
   11d6c:	adds	r2, r2, #1
   11d70:	adc	r3, r3, #0
   11d74:	strd	r2, [r1, #104]	; 0x68
   11d78:	b	11e44 <load_file@@Base+0x1e8>
   11d7c:	ldrd	r2, [r4, #40]	; 0x28
   11d80:	adds	r2, r2, #1
   11d84:	adc	r3, r3, #0
   11d88:	strd	r2, [r4, #40]	; 0x28
   11d8c:	ldr	r3, [pc, #228]	; 11e78 <load_file@@Base+0x21c>
   11d90:	ldr	r3, [r3]
   11d94:	mov	r2, #51	; 0x33
   11d98:	mov	r1, #1
   11d9c:	ldr	r0, [pc, #216]	; 11e7c <load_file@@Base+0x220>
   11da0:	bl	119cc <fwrite@plt>
   11da4:	ldrd	r2, [r4, #56]	; 0x38
   11da8:	adds	r2, r2, #1
   11dac:	adc	r3, r3, #0
   11db0:	strd	r2, [r4, #56]	; 0x38
   11db4:	mov	r0, #1
   11db8:	bl	11a44 <exit@plt>
   11dbc:	ldr	r4, [pc, #172]	; 11e70 <load_file@@Base+0x214>
   11dc0:	ldrd	r2, [r4, #64]	; 0x40
   11dc4:	adds	r2, r2, #1
   11dc8:	adc	r3, r3, #0
   11dcc:	strd	r2, [r4, #64]	; 0x40
   11dd0:	ldr	r3, [pc, #160]	; 11e78 <load_file@@Base+0x21c>
   11dd4:	ldr	r3, [r3]
   11dd8:	mov	r2, #49	; 0x31
   11ddc:	mov	r1, #1
   11de0:	ldr	r0, [pc, #152]	; 11e80 <load_file@@Base+0x224>
   11de4:	bl	119cc <fwrite@plt>
   11de8:	ldrd	r2, [r4, #80]	; 0x50
   11dec:	adds	r2, r2, #1
   11df0:	adc	r3, r3, #0
   11df4:	strd	r2, [r4, #80]	; 0x50
   11df8:	mov	r0, #1
   11dfc:	bl	11a44 <exit@plt>
   11e00:	ldr	r4, [pc, #104]	; 11e70 <load_file@@Base+0x214>
   11e04:	ldrd	r2, [r4, #88]	; 0x58
   11e08:	adds	r2, r2, #1
   11e0c:	adc	r3, r3, #0
   11e10:	strd	r2, [r4, #88]	; 0x58
   11e14:	mov	r2, r6
   11e18:	ldr	r1, [pc, #100]	; 11e84 <load_file@@Base+0x228>
   11e1c:	ldr	r3, [pc, #84]	; 11e78 <load_file@@Base+0x21c>
   11e20:	ldr	r0, [r3]
   11e24:	bl	11a68 <fprintf@plt>
   11e28:	ldrd	r2, [r4, #96]	; 0x60
   11e2c:	adds	r2, r2, #1
   11e30:	adc	r3, r3, #0
   11e34:	strd	r2, [r4, #96]	; 0x60
   11e38:	mov	r0, #1
   11e3c:	bl	11a44 <exit@plt>
   11e40:	mov	r4, #0
   11e44:	mov	r0, r5
   11e48:	bl	11ac8 <fclose@plt>
   11e4c:	ldr	r1, [pc, #28]	; 11e70 <load_file@@Base+0x214>
   11e50:	ldrd	r2, [r1, #112]	; 0x70
   11e54:	adds	r2, r2, #1
   11e58:	adc	r3, r3, #0
   11e5c:	strd	r2, [r1, #112]	; 0x70
   11e60:	mov	r0, r4
   11e64:	pop	{r4, r5, r6, r7, r8, pc}
   11e68:	mov	r4, #0
   11e6c:	b	11e60 <load_file@@Base+0x204>
   11e70:	andeq	r9, r2, r8, asr #21
   11e74:	andeq	r8, r1, r4, lsl r1
   11e78:			; <UNDEFINED> instruction: 0x00029ab8
   11e7c:	andeq	r7, r1, r4, lsl #20
   11e80:	andeq	r7, r1, r8, lsr sl
   11e84:	andeq	r7, r1, ip, ror #20

00011e88 <my_main@@Base>:
   11e88:	push	{r4, r5, r6, lr}
   11e8c:	sub	sp, sp, #32
   11e90:	mov	r6, r1
   11e94:	ldr	r4, [pc, #240]	; 11f8c <my_main@@Base+0x104>
   11e98:	ldrd	r2, [r4, #120]	; 0x78
   11e9c:	adds	r2, r2, #1
   11ea0:	adc	r3, r3, #0
   11ea4:	strd	r2, [r4, #120]	; 0x78
   11ea8:	bl	11c5c <load_file@@Base>
   11eac:	mov	r5, r0
   11eb0:	ldrd	r2, [r4, #128]	; 0x80
   11eb4:	adds	r2, r2, #1
   11eb8:	adc	r3, r3, #0
   11ebc:	strd	r2, [r4, #128]	; 0x80
   11ec0:	mov	r1, r0
   11ec4:	add	r0, sp, #20
   11ec8:	bl	124dc <init_lexer@@Base>
   11ecc:	ldrd	r2, [r4, #136]	; 0x88
   11ed0:	adds	r2, r2, #1
   11ed4:	adc	r3, r3, #0
   11ed8:	strd	r2, [r4, #136]	; 0x88
   11edc:	add	r1, sp, #20
   11ee0:	add	r0, sp, #16
   11ee4:	bl	13fa8 <init_grammar@@Base>
   11ee8:	ldrd	r2, [r4, #144]	; 0x90
   11eec:	adds	r2, r2, #1
   11ef0:	adc	r3, r3, #0
   11ef4:	strd	r2, [r4, #144]	; 0x90
   11ef8:	mov	r2, r6
   11efc:	add	r1, sp, #16
   11f00:	mov	r0, sp
   11f04:	bl	14ce8 <init_generator@@Base>
   11f08:	ldrd	r2, [r4, #152]	; 0x98
   11f0c:	adds	r2, r2, #1
   11f10:	adc	r3, r3, #0
   11f14:	strd	r2, [r4, #152]	; 0x98
   11f18:	mov	r0, sp
   11f1c:	bl	15684 <generate_code@@Base>
   11f20:	ldrd	r2, [r4, #160]	; 0xa0
   11f24:	adds	r2, r2, #1
   11f28:	adc	r3, r3, #0
   11f2c:	strd	r2, [r4, #160]	; 0xa0
   11f30:	mov	r0, sp
   11f34:	bl	14d40 <destroy_generator@@Base>
   11f38:	ldrd	r2, [r4, #168]	; 0xa8
   11f3c:	adds	r2, r2, #1
   11f40:	adc	r3, r3, #0
   11f44:	strd	r2, [r4, #168]	; 0xa8
   11f48:	add	r0, sp, #16
   11f4c:	bl	13fc8 <destroy_grammar@@Base>
   11f50:	ldrd	r2, [r4, #176]	; 0xb0
   11f54:	adds	r2, r2, #1
   11f58:	adc	r3, r3, #0
   11f5c:	strd	r2, [r4, #176]	; 0xb0
   11f60:	add	r0, sp, #20
   11f64:	bl	1252c <destroy_lexer@@Base>
   11f68:	ldrd	r2, [r4, #184]	; 0xb8
   11f6c:	adds	r2, r2, #1
   11f70:	adc	r3, r3, #0
   11f74:	strd	r2, [r4, #184]	; 0xb8
   11f78:	mov	r0, r5
   11f7c:	bl	119a8 <free@plt>
   11f80:	mov	r0, #0
   11f84:	add	sp, sp, #32
   11f88:	pop	{r4, r5, r6, pc}
   11f8c:	andeq	r9, r2, r8, asr #21

00011f90 <main@@Base>:
   11f90:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11f94:	mov	r6, r0
   11f98:	mov	r5, r1
   11f9c:	ldr	r1, [pc, #276]	; 120b8 <main@@Base+0x128>
   11fa0:	ldrd	r2, [r1, #192]	; 0xc0
   11fa4:	adds	r2, r2, #1
   11fa8:	adc	r3, r3, #0
   11fac:	strd	r2, [r1, #192]	; 0xc0
   11fb0:	mov	r8, #0
   11fb4:	ldr	r7, [pc, #256]	; 120bc <main@@Base+0x12c>
   11fb8:	mov	r4, r1
   11fbc:	ldr	r9, [pc, #252]	; 120c0 <main@@Base+0x130>
   11fc0:	mov	r2, r7
   11fc4:	mov	r1, r5
   11fc8:	mov	r0, r6
   11fcc:	bl	11a5c <getopt@plt>
   11fd0:	cmn	r0, #1
   11fd4:	beq	12008 <main@@Base+0x78>
   11fd8:	ldrd	r2, [r4, #208]	; 0xd0
   11fdc:	adds	r2, r2, #1
   11fe0:	adc	r3, r3, #0
   11fe4:	strd	r2, [r4, #208]	; 0xd0
   11fe8:	cmp	r0, #111	; 0x6f
   11fec:	bne	11fc0 <main@@Base+0x30>
   11ff0:	ldr	r8, [r9]
   11ff4:	ldrd	r2, [r4, #200]	; 0xc8
   11ff8:	adds	r2, r2, #1
   11ffc:	adc	r3, r3, #0
   12000:	strd	r2, [r4, #200]	; 0xc8
   12004:	b	11fc0 <main@@Base+0x30>
   12008:	ldr	r3, [pc, #180]	; 120c4 <main@@Base+0x134>
   1200c:	ldr	r1, [r3]
   12010:	cmp	r6, r1
   12014:	ble	12074 <main@@Base+0xe4>
   12018:	ldr	r0, [pc, #152]	; 120b8 <main@@Base+0x128>
   1201c:	ldrd	r2, [r0, #216]	; 0xd8
   12020:	adds	r2, r2, #1
   12024:	adc	r3, r3, #0
   12028:	strd	r2, [r0, #216]	; 0xd8
   1202c:	ldr	r0, [r5, r1, lsl #2]
   12030:	cmp	r8, #0
   12034:	movne	r1, r8
   12038:	beq	12058 <main@@Base+0xc8>
   1203c:	bl	11e88 <my_main@@Base>
   12040:	ldr	r1, [pc, #112]	; 120b8 <main@@Base+0x128>
   12044:	ldrd	r2, [r1, #240]	; 0xf0
   12048:	adds	r2, r2, #1
   1204c:	adc	r3, r3, #0
   12050:	strd	r2, [r1, #240]	; 0xf0
   12054:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12058:	ldr	r1, [pc, #88]	; 120b8 <main@@Base+0x128>
   1205c:	ldrd	r2, [r1, #232]	; 0xe8
   12060:	adds	r2, r2, #1
   12064:	adc	r3, r3, #0
   12068:	strd	r2, [r1, #232]	; 0xe8
   1206c:	ldr	r1, [pc, #84]	; 120c8 <main@@Base+0x138>
   12070:	b	1203c <main@@Base+0xac>
   12074:	ldr	r4, [pc, #60]	; 120b8 <main@@Base+0x128>
   12078:	ldrd	r2, [r4, #224]	; 0xe0
   1207c:	adds	r2, r2, #1
   12080:	adc	r3, r3, #0
   12084:	strd	r2, [r4, #224]	; 0xe0
   12088:	ldr	r3, [pc, #60]	; 120cc <main@@Base+0x13c>
   1208c:	ldr	r3, [r3]
   12090:	mov	r2, #45	; 0x2d
   12094:	mov	r1, #1
   12098:	ldr	r0, [pc, #48]	; 120d0 <main@@Base+0x140>
   1209c:	bl	119cc <fwrite@plt>
   120a0:	ldrd	r2, [r4, #248]	; 0xf8
   120a4:	adds	r2, r2, #1
   120a8:	adc	r3, r3, #0
   120ac:	strd	r2, [r4, #248]	; 0xf8
   120b0:	mov	r0, #1
   120b4:	bl	11a44 <exit@plt>
   120b8:	andeq	r9, r2, r8, asr #21
   120bc:	andeq	r7, r1, r8, lsl #21
   120c0:	andeq	r9, r2, r0, asr #21
   120c4:			; <UNDEFINED> instruction: 0x00029ab0
   120c8:	andeq	r7, r1, r4, lsl #21
   120cc:			; <UNDEFINED> instruction: 0x00029ab8
   120d0:	andeq	r7, r1, ip, lsl #21
   120d4:	push	{r4, lr}
   120d8:	ldr	r0, [pc, #4]	; 120e4 <main@@Base+0x154>
   120dc:	bl	17640 <__gcov_sort_n_vals@@Base+0x458>
   120e0:	pop	{r4, pc}
   120e4:	strheq	r9, [r2], -ip

000120e8 <init_token_int_type@@Base>:
   120e8:	ldr	r1, [pc, #24]	; 12108 <init_token_int_type@@Base+0x20>
   120ec:	ldrd	r2, [r1]
   120f0:	adds	r2, r2, #1
   120f4:	adc	r3, r3, #0
   120f8:	strd	r2, [r1]
   120fc:	mov	r3, #0
   12100:	str	r3, [r0]
   12104:	bx	lr
   12108:	andeq	r9, r2, r8, asr #23

0001210c <init_token_int_value@@Base>:
   1210c:	ldr	ip, [pc, #28]	; 12130 <init_token_int_value@@Base+0x24>
   12110:	ldrd	r2, [ip, #8]
   12114:	adds	r2, r2, #1
   12118:	adc	r3, r3, #0
   1211c:	strd	r2, [ip, #8]
   12120:	mov	r3, #1
   12124:	str	r3, [r0]
   12128:	str	r1, [r0, #4]
   1212c:	bx	lr
   12130:	andeq	r9, r2, r8, asr #23

00012134 <init_token_function@@Base>:
   12134:	ldr	ip, [pc, #28]	; 12158 <init_token_function@@Base+0x24>
   12138:	ldrd	r2, [ip, #16]
   1213c:	adds	r2, r2, #1
   12140:	adc	r3, r3, #0
   12144:	strd	r2, [ip, #16]
   12148:	mov	r3, #2
   1214c:	str	r3, [r0]
   12150:	str	r1, [r0, #4]
   12154:	bx	lr
   12158:	andeq	r9, r2, r8, asr #23

0001215c <init_token_opar@@Base>:
   1215c:	ldr	r1, [pc, #24]	; 1217c <init_token_opar@@Base+0x20>
   12160:	ldrd	r2, [r1, #24]
   12164:	adds	r2, r2, #1
   12168:	adc	r3, r3, #0
   1216c:	strd	r2, [r1, #24]
   12170:	mov	r3, #3
   12174:	str	r3, [r0]
   12178:	bx	lr
   1217c:	andeq	r9, r2, r8, asr #23

00012180 <init_token_cpar@@Base>:
   12180:	ldr	r1, [pc, #24]	; 121a0 <init_token_cpar@@Base+0x20>
   12184:	ldrd	r2, [r1, #32]
   12188:	adds	r2, r2, #1
   1218c:	adc	r3, r3, #0
   12190:	strd	r2, [r1, #32]
   12194:	mov	r3, #4
   12198:	str	r3, [r0]
   1219c:	bx	lr
   121a0:	andeq	r9, r2, r8, asr #23

000121a4 <init_token_obra@@Base>:
   121a4:	ldr	r1, [pc, #24]	; 121c4 <init_token_obra@@Base+0x20>
   121a8:	ldrd	r2, [r1, #40]	; 0x28
   121ac:	adds	r2, r2, #1
   121b0:	adc	r3, r3, #0
   121b4:	strd	r2, [r1, #40]	; 0x28
   121b8:	mov	r3, #5
   121bc:	str	r3, [r0]
   121c0:	bx	lr
   121c4:	andeq	r9, r2, r8, asr #23

000121c8 <init_token_cbra@@Base>:
   121c8:	ldr	r1, [pc, #24]	; 121e8 <init_token_cbra@@Base+0x20>
   121cc:	ldrd	r2, [r1, #48]	; 0x30
   121d0:	adds	r2, r2, #1
   121d4:	adc	r3, r3, #0
   121d8:	strd	r2, [r1, #48]	; 0x30
   121dc:	mov	r3, #6
   121e0:	str	r3, [r0]
   121e4:	bx	lr
   121e8:	andeq	r9, r2, r8, asr #23

000121ec <init_token_return@@Base>:
   121ec:	ldr	r1, [pc, #24]	; 1220c <init_token_return@@Base+0x20>
   121f0:	ldrd	r2, [r1, #56]	; 0x38
   121f4:	adds	r2, r2, #1
   121f8:	adc	r3, r3, #0
   121fc:	strd	r2, [r1, #56]	; 0x38
   12200:	mov	r3, #7
   12204:	str	r3, [r0]
   12208:	bx	lr
   1220c:	andeq	r9, r2, r8, asr #23

00012210 <init_token_semicolon@@Base>:
   12210:	ldr	r1, [pc, #24]	; 12230 <init_token_semicolon@@Base+0x20>
   12214:	ldrd	r2, [r1, #64]	; 0x40
   12218:	adds	r2, r2, #1
   1221c:	adc	r3, r3, #0
   12220:	strd	r2, [r1, #64]	; 0x40
   12224:	mov	r3, #8
   12228:	str	r3, [r0]
   1222c:	bx	lr
   12230:	andeq	r9, r2, r8, asr #23

00012234 <init_token_eof@@Base>:
   12234:	ldr	r1, [pc, #24]	; 12254 <init_token_eof@@Base+0x20>
   12238:	ldrd	r2, [r1, #72]	; 0x48
   1223c:	adds	r2, r2, #1
   12240:	adc	r3, r3, #0
   12244:	strd	r2, [r1, #72]	; 0x48
   12248:	mov	r3, #9
   1224c:	str	r3, [r0]
   12250:	bx	lr
   12254:	andeq	r9, r2, r8, asr #23

00012258 <init_token_if@@Base>:
   12258:	ldr	r1, [pc, #24]	; 12278 <init_token_if@@Base+0x20>
   1225c:	ldrd	r2, [r1, #80]	; 0x50
   12260:	adds	r2, r2, #1
   12264:	adc	r3, r3, #0
   12268:	strd	r2, [r1, #80]	; 0x50
   1226c:	mov	r3, #10
   12270:	str	r3, [r0]
   12274:	bx	lr
   12278:	andeq	r9, r2, r8, asr #23

0001227c <init_token_else@@Base>:
   1227c:	ldr	r1, [pc, #24]	; 1229c <init_token_else@@Base+0x20>
   12280:	ldrd	r2, [r1, #88]	; 0x58
   12284:	adds	r2, r2, #1
   12288:	adc	r3, r3, #0
   1228c:	strd	r2, [r1, #88]	; 0x58
   12290:	mov	r3, #11
   12294:	str	r3, [r0]
   12298:	bx	lr
   1229c:	andeq	r9, r2, r8, asr #23

000122a0 <init_token_boolean_op@@Base>:
   122a0:	ldr	ip, [pc, #28]	; 122c4 <init_token_boolean_op@@Base+0x24>
   122a4:	ldrd	r2, [ip, #96]	; 0x60
   122a8:	adds	r2, r2, #1
   122ac:	adc	r3, r3, #0
   122b0:	strd	r2, [ip, #96]	; 0x60
   122b4:	mov	r3, #12
   122b8:	str	r3, [r0]
   122bc:	str	r1, [r0, #4]
   122c0:	bx	lr
   122c4:	andeq	r9, r2, r8, asr #23

000122c8 <free_token_int_type@@Base>:
   122c8:	push	{r4, lr}
   122cc:	ldr	r1, [pc, #20]	; 122e8 <free_token_int_type@@Base+0x20>
   122d0:	ldrd	r2, [r1, #104]	; 0x68
   122d4:	adds	r2, r2, #1
   122d8:	adc	r3, r3, #0
   122dc:	strd	r2, [r1, #104]	; 0x68
   122e0:	bl	119a8 <free@plt>
   122e4:	pop	{r4, pc}
   122e8:	andeq	r9, r2, r8, asr #23

000122ec <free_token_int_value@@Base>:
   122ec:	push	{r4, lr}
   122f0:	ldr	r1, [pc, #20]	; 1230c <free_token_int_value@@Base+0x20>
   122f4:	ldrd	r2, [r1, #112]	; 0x70
   122f8:	adds	r2, r2, #1
   122fc:	adc	r3, r3, #0
   12300:	strd	r2, [r1, #112]	; 0x70
   12304:	bl	119a8 <free@plt>
   12308:	pop	{r4, pc}
   1230c:	andeq	r9, r2, r8, asr #23

00012310 <free_token_function@@Base>:
   12310:	push	{r4, lr}
   12314:	ldr	r1, [pc, #20]	; 12330 <free_token_function@@Base+0x20>
   12318:	ldrd	r2, [r1, #120]	; 0x78
   1231c:	adds	r2, r2, #1
   12320:	adc	r3, r3, #0
   12324:	strd	r2, [r1, #120]	; 0x78
   12328:	bl	119a8 <free@plt>
   1232c:	pop	{r4, pc}
   12330:	andeq	r9, r2, r8, asr #23

00012334 <free_token_opar@@Base>:
   12334:	push	{r4, lr}
   12338:	ldr	r1, [pc, #20]	; 12354 <free_token_opar@@Base+0x20>
   1233c:	ldrd	r2, [r1, #128]	; 0x80
   12340:	adds	r2, r2, #1
   12344:	adc	r3, r3, #0
   12348:	strd	r2, [r1, #128]	; 0x80
   1234c:	bl	119a8 <free@plt>
   12350:	pop	{r4, pc}
   12354:	andeq	r9, r2, r8, asr #23

00012358 <free_token_cpar@@Base>:
   12358:	push	{r4, lr}
   1235c:	ldr	r1, [pc, #20]	; 12378 <free_token_cpar@@Base+0x20>
   12360:	ldrd	r2, [r1, #136]	; 0x88
   12364:	adds	r2, r2, #1
   12368:	adc	r3, r3, #0
   1236c:	strd	r2, [r1, #136]	; 0x88
   12370:	bl	119a8 <free@plt>
   12374:	pop	{r4, pc}
   12378:	andeq	r9, r2, r8, asr #23

0001237c <free_token_obra@@Base>:
   1237c:	push	{r4, lr}
   12380:	ldr	r1, [pc, #20]	; 1239c <free_token_obra@@Base+0x20>
   12384:	ldrd	r2, [r1, #144]	; 0x90
   12388:	adds	r2, r2, #1
   1238c:	adc	r3, r3, #0
   12390:	strd	r2, [r1, #144]	; 0x90
   12394:	bl	119a8 <free@plt>
   12398:	pop	{r4, pc}
   1239c:	andeq	r9, r2, r8, asr #23

000123a0 <free_token_cbra@@Base>:
   123a0:	push	{r4, lr}
   123a4:	ldr	r1, [pc, #20]	; 123c0 <free_token_cbra@@Base+0x20>
   123a8:	ldrd	r2, [r1, #152]	; 0x98
   123ac:	adds	r2, r2, #1
   123b0:	adc	r3, r3, #0
   123b4:	strd	r2, [r1, #152]	; 0x98
   123b8:	bl	119a8 <free@plt>
   123bc:	pop	{r4, pc}
   123c0:	andeq	r9, r2, r8, asr #23

000123c4 <free_token_return@@Base>:
   123c4:	push	{r4, lr}
   123c8:	ldr	r1, [pc, #20]	; 123e4 <free_token_return@@Base+0x20>
   123cc:	ldrd	r2, [r1, #160]	; 0xa0
   123d0:	adds	r2, r2, #1
   123d4:	adc	r3, r3, #0
   123d8:	strd	r2, [r1, #160]	; 0xa0
   123dc:	bl	119a8 <free@plt>
   123e0:	pop	{r4, pc}
   123e4:	andeq	r9, r2, r8, asr #23

000123e8 <free_token_semicolon@@Base>:
   123e8:	push	{r4, lr}
   123ec:	ldr	r1, [pc, #20]	; 12408 <free_token_semicolon@@Base+0x20>
   123f0:	ldrd	r2, [r1, #168]	; 0xa8
   123f4:	adds	r2, r2, #1
   123f8:	adc	r3, r3, #0
   123fc:	strd	r2, [r1, #168]	; 0xa8
   12400:	bl	119a8 <free@plt>
   12404:	pop	{r4, pc}
   12408:	andeq	r9, r2, r8, asr #23

0001240c <free_token_eof@@Base>:
   1240c:	push	{r4, lr}
   12410:	ldr	r1, [pc, #20]	; 1242c <free_token_eof@@Base+0x20>
   12414:	ldrd	r2, [r1, #176]	; 0xb0
   12418:	adds	r2, r2, #1
   1241c:	adc	r3, r3, #0
   12420:	strd	r2, [r1, #176]	; 0xb0
   12424:	bl	119a8 <free@plt>
   12428:	pop	{r4, pc}
   1242c:	andeq	r9, r2, r8, asr #23

00012430 <free_token_if@@Base>:
   12430:	push	{r4, lr}
   12434:	ldr	r1, [pc, #20]	; 12450 <free_token_if@@Base+0x20>
   12438:	ldrd	r2, [r1, #184]	; 0xb8
   1243c:	adds	r2, r2, #1
   12440:	adc	r3, r3, #0
   12444:	strd	r2, [r1, #184]	; 0xb8
   12448:	bl	119a8 <free@plt>
   1244c:	pop	{r4, pc}
   12450:	andeq	r9, r2, r8, asr #23

00012454 <free_token_else@@Base>:
   12454:	push	{r4, lr}
   12458:	ldr	r1, [pc, #20]	; 12474 <free_token_else@@Base+0x20>
   1245c:	ldrd	r2, [r1, #192]	; 0xc0
   12460:	adds	r2, r2, #1
   12464:	adc	r3, r3, #0
   12468:	strd	r2, [r1, #192]	; 0xc0
   1246c:	bl	119a8 <free@plt>
   12470:	pop	{r4, pc}
   12474:	andeq	r9, r2, r8, asr #23

00012478 <free_token_boolean_op@@Base>:
   12478:	push	{r4, lr}
   1247c:	mov	r4, r0
   12480:	ldr	r1, [pc, #60]	; 124c4 <free_token_boolean_op@@Base+0x4c>
   12484:	ldrd	r2, [r1, #200]	; 0xc8
   12488:	adds	r2, r2, #1
   1248c:	adc	r3, r3, #0
   12490:	strd	r2, [r1, #200]	; 0xc8
   12494:	ldr	r0, [r0, #4]
   12498:	cmp	r0, #0
   1249c:	beq	124b8 <free_token_boolean_op@@Base+0x40>
   124a0:	bl	119a8 <free@plt>
   124a4:	ldr	r1, [pc, #24]	; 124c4 <free_token_boolean_op@@Base+0x4c>
   124a8:	ldrd	r2, [r1, #208]	; 0xd0
   124ac:	adds	r2, r2, #1
   124b0:	adc	r3, r3, #0
   124b4:	strd	r2, [r1, #208]	; 0xd0
   124b8:	mov	r0, r4
   124bc:	bl	119a8 <free@plt>
   124c0:	pop	{r4, pc}
   124c4:	andeq	r9, r2, r8, asr #23
   124c8:	push	{r4, lr}
   124cc:	ldr	r0, [pc, #4]	; 124d8 <free_token_boolean_op@@Base+0x60>
   124d0:	bl	17640 <__gcov_sort_n_vals@@Base+0x458>
   124d4:	pop	{r4, pc}
   124d8:	andeq	r9, r2, r0, asr r1

000124dc <init_lexer@@Base>:
   124dc:	ldr	ip, [pc, #32]	; 12504 <init_lexer@@Base+0x28>
   124e0:	ldrd	r2, [ip]
   124e4:	adds	r2, r2, #1
   124e8:	adc	r3, r3, #0
   124ec:	strd	r2, [ip]
   124f0:	str	r1, [r0]
   124f4:	mov	r3, #0
   124f8:	str	r3, [r0, #4]
   124fc:	str	r3, [r0, #8]
   12500:	bx	lr
   12504:	andeq	r9, r2, r0, lsr #25

00012508 <free_stack_base@@Base>:
   12508:	push	{r4, lr}
   1250c:	ldr	r1, [pc, #20]	; 12528 <free_stack_base@@Base+0x20>
   12510:	ldrd	r2, [r1, #8]
   12514:	adds	r2, r2, #1
   12518:	adc	r3, r3, #0
   1251c:	strd	r2, [r1, #8]
   12520:	bl	119a8 <free@plt>
   12524:	pop	{r4, pc}
   12528:	andeq	r9, r2, r0, lsr #25

0001252c <destroy_lexer@@Base>:
   1252c:	ldr	r1, [pc, #72]	; 1257c <destroy_lexer@@Base+0x50>
   12530:	ldrd	r2, [r1, #16]
   12534:	adds	r2, r2, #1
   12538:	adc	r3, r3, #0
   1253c:	strd	r2, [r1, #16]
   12540:	ldr	r0, [r0, #4]
   12544:	cmp	r0, #0
   12548:	bxeq	lr
   1254c:	push	{r4, lr}
   12550:	mov	r4, r1
   12554:	ldrd	r2, [r1, #24]
   12558:	adds	r2, r2, #1
   1255c:	adc	r3, r3, #0
   12560:	strd	r2, [r1, #24]
   12564:	bl	12508 <free_stack_base@@Base>
   12568:	ldrd	r2, [r4, #32]
   1256c:	adds	r2, r2, #1
   12570:	adc	r3, r3, #0
   12574:	strd	r2, [r4, #32]
   12578:	pop	{r4, pc}
   1257c:	andeq	r9, r2, r0, lsr #25

00012580 <push_back@@Base>:
   12580:	push	{r4, r5, r6, lr}
   12584:	mov	r4, r0
   12588:	mov	r5, r1
   1258c:	ldr	r1, [pc, #40]	; 125bc <push_back@@Base+0x3c>
   12590:	ldrd	r2, [r1, #40]	; 0x28
   12594:	adds	r2, r2, #1
   12598:	adc	r3, r3, #0
   1259c:	strd	r2, [r1, #40]	; 0x28
   125a0:	mov	r0, #8
   125a4:	bl	119fc <malloc@plt>
   125a8:	str	r5, [r0, #4]
   125ac:	ldr	r3, [r4, #4]
   125b0:	str	r3, [r0]
   125b4:	str	r0, [r4, #4]
   125b8:	pop	{r4, r5, r6, pc}
   125bc:	andeq	r9, r2, r0, lsr #25

000125c0 <get_char@@Base>:
   125c0:	ldr	r1, [pc, #36]	; 125ec <get_char@@Base+0x2c>
   125c4:	ldrd	r2, [r1, #48]	; 0x30
   125c8:	adds	r2, r2, #1
   125cc:	adc	r3, r3, #0
   125d0:	strd	r2, [r1, #48]	; 0x30
   125d4:	ldr	r2, [r0]
   125d8:	ldr	r3, [r0, #8]
   125dc:	add	r1, r3, #1
   125e0:	str	r1, [r0, #8]
   125e4:	ldrb	r0, [r2, r3]
   125e8:	bx	lr
   125ec:	andeq	r9, r2, r0, lsr #25

000125f0 <push_back_chars@@Base>:
   125f0:	push	{r4, r5, r6, lr}
   125f4:	ldr	r3, [r0, #8]
   125f8:	cmp	r3, r1
   125fc:	bcc	12620 <push_back_chars@@Base+0x30>
   12600:	ldr	r2, [pc, #92]	; 12664 <push_back_chars@@Base+0x74>
   12604:	ldrd	r4, [r2, #56]	; 0x38
   12608:	adds	r4, r4, #1
   1260c:	adc	r5, r5, #0
   12610:	strd	r4, [r2, #56]	; 0x38
   12614:	sub	r3, r3, r1
   12618:	str	r3, [r0, #8]
   1261c:	pop	{r4, r5, r6, pc}
   12620:	ldr	r4, [pc, #60]	; 12664 <push_back_chars@@Base+0x74>
   12624:	ldrd	r2, [r4, #64]	; 0x40
   12628:	adds	r2, r2, #1
   1262c:	adc	r3, r3, #0
   12630:	strd	r2, [r4, #64]	; 0x40
   12634:	ldr	r3, [pc, #44]	; 12668 <push_back_chars@@Base+0x78>
   12638:	ldr	r3, [r3]
   1263c:	mov	r2, #32
   12640:	mov	r1, #1
   12644:	ldr	r0, [pc, #32]	; 1266c <push_back_chars@@Base+0x7c>
   12648:	bl	119cc <fwrite@plt>
   1264c:	ldrd	r2, [r4, #72]	; 0x48
   12650:	adds	r2, r2, #1
   12654:	adc	r3, r3, #0
   12658:	strd	r2, [r4, #72]	; 0x48
   1265c:	mov	r0, #1
   12660:	bl	11a44 <exit@plt>
   12664:	andeq	r9, r2, r0, lsr #25
   12668:			; <UNDEFINED> instruction: 0x00029ab8
   1266c:	andeq	r7, r1, ip, asr fp

00012670 <push_back_one_char@@Base>:
   12670:	push	{r4, lr}
   12674:	ldr	r4, [pc, #40]	; 126a4 <push_back_one_char@@Base+0x34>
   12678:	ldrd	r2, [r4, #80]	; 0x50
   1267c:	adds	r2, r2, #1
   12680:	adc	r3, r3, #0
   12684:	strd	r2, [r4, #80]	; 0x50
   12688:	mov	r1, #1
   1268c:	bl	125f0 <push_back_chars@@Base>
   12690:	ldrd	r2, [r4, #88]	; 0x58
   12694:	adds	r2, r2, #1
   12698:	adc	r3, r3, #0
   1269c:	strd	r2, [r4, #88]	; 0x58
   126a0:	pop	{r4, pc}
   126a4:	andeq	r9, r2, r0, lsr #25

000126a8 <next@@Base>:
   126a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126ac:	sub	sp, sp, #524	; 0x20c
   126b0:	mov	r5, r0
   126b4:	ldr	r0, [r0, #4]
   126b8:	cmp	r0, #0
   126bc:	beq	12708 <next@@Base+0x60>
   126c0:	ldr	r6, [pc, #3428]	; 1342c <next@@Base+0xd84>
   126c4:	ldrd	r2, [r6, #96]	; 0x60
   126c8:	adds	r2, r2, #1
   126cc:	adc	r3, r3, #0
   126d0:	strd	r2, [r6, #96]	; 0x60
   126d4:	ldr	r3, [r0]
   126d8:	str	r3, [r5, #4]
   126dc:	ldr	r4, [r0, #4]
   126e0:	mov	r3, #0
   126e4:	str	r3, [r0, #4]
   126e8:	bl	12508 <free_stack_base@@Base>
   126ec:	ldrd	r2, [r6, #112]	; 0x70
   126f0:	adds	r2, r2, #1
   126f4:	adc	r3, r3, #0
   126f8:	strd	r2, [r6, #112]	; 0x70
   126fc:	mov	r0, r4
   12700:	add	sp, sp, #524	; 0x20c
   12704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12708:	ldr	r1, [pc, #3356]	; 1342c <next@@Base+0xd84>
   1270c:	ldrd	r2, [r1, #104]	; 0x68
   12710:	adds	r2, r2, #1
   12714:	adc	r3, r3, #0
   12718:	strd	r2, [r1, #104]	; 0x68
   1271c:	mov	r0, r5
   12720:	bl	125c0 <get_char@@Base>
   12724:	mov	r6, #0
   12728:	mov	r4, r6
   1272c:	ldr	r8, [pc, #3320]	; 1342c <next@@Base+0xd84>
   12730:	add	r7, r8, #816	; 0x330
   12734:	add	r9, r8, #304	; 0x130
   12738:	mov	fp, #114	; 0x72
   1273c:	add	sl, r8, #288	; 0x120
   12740:	ldrd	r2, [r7, #-8]
   12744:	adds	r2, r2, #1
   12748:	adc	r3, r3, #0
   1274c:	strd	r2, [r7, #-8]
   12750:	cmp	r0, #0
   12754:	beq	13648 <next@@Base+0xfa0>
   12758:	ldrd	r2, [r7]
   1275c:	adds	r2, r2, #1
   12760:	adc	r3, r3, #0
   12764:	cmp	r6, #5
   12768:	ldrls	pc, [pc, r6, lsl #2]
   1276c:	b	1275c <next@@Base+0xb4>
   12770:	andeq	r2, r1, ip, lsl #17
   12774:	andeq	r2, r1, r8, lsl #15
   12778:	andeq	r3, r1, r4, lsl #1
   1277c:	andeq	r3, r1, r8, lsr #3
   12780:	andeq	r3, r1, r4, lsl #6
   12784:	andeq	r3, r1, r4, lsr r5
   12788:	ldr	r1, [pc, #3228]	; 1342c <next@@Base+0xd84>
   1278c:	add	ip, r1, #816	; 0x330
   12790:	strd	r2, [ip]
   12794:	ldrd	r6, [r1, #120]	; 0x78
   12798:	adds	r6, r6, #1
   1279c:	adc	r7, r7, #0
   127a0:	strd	r6, [r1, #120]	; 0x78
   127a4:	sub	r3, r0, #48	; 0x30
   127a8:	uxtb	r3, r3
   127ac:	cmp	r3, #9
   127b0:	bhi	127f4 <next@@Base+0x14c>
   127b4:	sub	r8, r4, #1
   127b8:	add	r3, sp, #8
   127bc:	add	r8, r3, r8
   127c0:	ldr	r9, [pc, #3176]	; 13430 <next@@Base+0xd88>
   127c4:	ldrd	r6, [r9, #-8]
   127c8:	adds	r6, r6, #1
   127cc:	adc	r7, r7, #0
   127d0:	strd	r6, [r9, #-8]
   127d4:	add	r4, r4, #1
   127d8:	strb	r0, [r8, #1]!
   127dc:	mov	r0, r5
   127e0:	bl	125c0 <get_char@@Base>
   127e4:	sub	r3, r0, #48	; 0x30
   127e8:	uxtb	r3, r3
   127ec:	cmp	r3, #9
   127f0:	bls	127c4 <next@@Base+0x11c>
   127f4:	ldr	r6, [pc, #3120]	; 1342c <next@@Base+0xd84>
   127f8:	add	r1, r6, #512	; 0x200
   127fc:	ldrd	r2, [r1]
   12800:	adds	r2, r2, #1
   12804:	adc	r3, r3, #0
   12808:	strd	r2, [r1]
   1280c:	mov	r0, r5
   12810:	bl	12670 <push_back_one_char@@Base>
   12814:	add	r5, r6, #528	; 0x210
   12818:	ldrd	r2, [r5, #-8]
   1281c:	adds	r2, r2, #1
   12820:	adc	r3, r3, #0
   12824:	strd	r2, [r5, #-8]
   12828:	add	r3, sp, #520	; 0x208
   1282c:	add	r4, r3, r4
   12830:	mov	r7, #0
   12834:	strb	r7, [r4, #-512]	; 0xfffffe00
   12838:	mov	r0, #8
   1283c:	bl	119fc <malloc@plt>
   12840:	mov	r4, r0
   12844:	mov	r2, #10
   12848:	mov	r1, r7
   1284c:	add	r0, sp, #8
   12850:	bl	11990 <strtol@plt>
   12854:	ldrd	r2, [r5]
   12858:	adds	r2, r2, #1
   1285c:	adc	r3, r3, #0
   12860:	strd	r2, [r5]
   12864:	mov	r1, r0
   12868:	mov	r0, r4
   1286c:	bl	1210c <init_token_int_value@@Base>
   12870:	add	r6, r6, #544	; 0x220
   12874:	ldrd	r2, [r6, #-8]
   12878:	adds	r2, r2, #1
   1287c:	adc	r3, r3, #0
   12880:	strd	r2, [r6, #-8]
   12884:	mov	r0, r4
   12888:	b	12700 <next@@Base+0x58>
   1288c:	strd	r2, [r7]
   12890:	cmp	r0, #32
   12894:	cmpne	r0, #9
   12898:	beq	12958 <next@@Base+0x2b0>
   1289c:	ldrd	r2, [r8, #128]	; 0x80
   128a0:	adds	r2, r2, #1
   128a4:	adc	r3, r3, #0
   128a8:	strd	r2, [r8, #128]	; 0x80
   128ac:	cmp	r0, #10
   128b0:	beq	12958 <next@@Base+0x2b0>
   128b4:	cmp	r0, #48	; 0x30
   128b8:	beq	12978 <next@@Base+0x2d0>
   128bc:	sub	r3, r0, #49	; 0x31
   128c0:	uxtb	r3, r3
   128c4:	cmp	r3, #8
   128c8:	bls	129b8 <next@@Base+0x310>
   128cc:	cmp	r0, #40	; 0x28
   128d0:	beq	129fc <next@@Base+0x354>
   128d4:	cmp	r0, #41	; 0x29
   128d8:	beq	12a38 <next@@Base+0x390>
   128dc:	cmp	r0, #123	; 0x7b
   128e0:	beq	12a74 <next@@Base+0x3cc>
   128e4:	cmp	r0, #125	; 0x7d
   128e8:	beq	12ab0 <next@@Base+0x408>
   128ec:	cmp	r0, #59	; 0x3b
   128f0:	beq	12aec <next@@Base+0x444>
   128f4:	cmp	r0, #101	; 0x65
   128f8:	beq	12b28 <next@@Base+0x480>
   128fc:	cmp	r0, #105	; 0x69
   12900:	beq	12b74 <next@@Base+0x4cc>
   12904:	cmp	r0, #109	; 0x6d
   12908:	beq	12bc4 <next@@Base+0x51c>
   1290c:	cmp	r0, #114	; 0x72
   12910:	bne	12c0c <next@@Base+0x564>
   12914:	ldrd	r2, [r9, #-8]
   12918:	adds	r2, r2, #1
   1291c:	adc	r3, r3, #0
   12920:	strd	r2, [r9, #-8]
   12924:	add	r6, r4, #1
   12928:	add	r3, sp, #520	; 0x208
   1292c:	add	r4, r3, r4
   12930:	strb	fp, [r4, #-512]	; 0xfffffe00
   12934:	mov	r0, r5
   12938:	bl	125c0 <get_char@@Base>
   1293c:	ldrd	r2, [r9]
   12940:	adds	r2, r2, #1
   12944:	adc	r3, r3, #0
   12948:	strd	r2, [r9]
   1294c:	mov	r4, r6
   12950:	mov	r6, #4
   12954:	b	12960 <next@@Base+0x2b8>
   12958:	mov	r0, r5
   1295c:	bl	125c0 <get_char@@Base>
   12960:	add	r1, r8, #800	; 0x320
   12964:	ldrd	r2, [r1]
   12968:	adds	r2, r2, #1
   1296c:	adc	r3, r3, #0
   12970:	strd	r2, [r1]
   12974:	b	12740 <next@@Base+0x98>
   12978:	ldr	r5, [pc, #2732]	; 1342c <next@@Base+0xd84>
   1297c:	ldrd	r2, [r5, #136]	; 0x88
   12980:	adds	r2, r2, #1
   12984:	adc	r3, r3, #0
   12988:	strd	r2, [r5, #136]	; 0x88
   1298c:	mov	r0, #8
   12990:	bl	119fc <malloc@plt>
   12994:	mov	r4, r0
   12998:	mov	r1, #0
   1299c:	bl	1210c <init_token_int_value@@Base>
   129a0:	ldrd	r2, [r5, #144]	; 0x90
   129a4:	adds	r2, r2, #1
   129a8:	adc	r3, r3, #0
   129ac:	strd	r2, [r5, #144]	; 0x90
   129b0:	mov	r0, r4
   129b4:	b	12700 <next@@Base+0x58>
   129b8:	ldrd	r2, [r8, #152]	; 0x98
   129bc:	adds	r2, r2, #1
   129c0:	adc	r3, r3, #0
   129c4:	strd	r2, [r8, #152]	; 0x98
   129c8:	add	r6, r4, #1
   129cc:	add	r3, sp, #520	; 0x208
   129d0:	add	r4, r3, r4
   129d4:	strb	r0, [r4, #-512]	; 0xfffffe00
   129d8:	mov	r0, r5
   129dc:	bl	125c0 <get_char@@Base>
   129e0:	ldrd	r2, [r8, #160]	; 0xa0
   129e4:	adds	r2, r2, #1
   129e8:	adc	r3, r3, #0
   129ec:	strd	r2, [r8, #160]	; 0xa0
   129f0:	mov	r4, r6
   129f4:	mov	r6, #1
   129f8:	b	12960 <next@@Base+0x2b8>
   129fc:	ldr	r5, [pc, #2600]	; 1342c <next@@Base+0xd84>
   12a00:	ldrd	r2, [r5, #168]	; 0xa8
   12a04:	adds	r2, r2, #1
   12a08:	adc	r3, r3, #0
   12a0c:	strd	r2, [r5, #168]	; 0xa8
   12a10:	mov	r0, #4
   12a14:	bl	119fc <malloc@plt>
   12a18:	mov	r4, r0
   12a1c:	bl	1215c <init_token_opar@@Base>
   12a20:	ldrd	r2, [r5, #176]	; 0xb0
   12a24:	adds	r2, r2, #1
   12a28:	adc	r3, r3, #0
   12a2c:	strd	r2, [r5, #176]	; 0xb0
   12a30:	mov	r0, r4
   12a34:	b	12700 <next@@Base+0x58>
   12a38:	ldr	r5, [pc, #2540]	; 1342c <next@@Base+0xd84>
   12a3c:	ldrd	r2, [r5, #184]	; 0xb8
   12a40:	adds	r2, r2, #1
   12a44:	adc	r3, r3, #0
   12a48:	strd	r2, [r5, #184]	; 0xb8
   12a4c:	mov	r0, #4
   12a50:	bl	119fc <malloc@plt>
   12a54:	mov	r4, r0
   12a58:	bl	12180 <init_token_cpar@@Base>
   12a5c:	ldrd	r2, [r5, #192]	; 0xc0
   12a60:	adds	r2, r2, #1
   12a64:	adc	r3, r3, #0
   12a68:	strd	r2, [r5, #192]	; 0xc0
   12a6c:	mov	r0, r4
   12a70:	b	12700 <next@@Base+0x58>
   12a74:	ldr	r5, [pc, #2480]	; 1342c <next@@Base+0xd84>
   12a78:	ldrd	r2, [r5, #200]	; 0xc8
   12a7c:	adds	r2, r2, #1
   12a80:	adc	r3, r3, #0
   12a84:	strd	r2, [r5, #200]	; 0xc8
   12a88:	mov	r0, #4
   12a8c:	bl	119fc <malloc@plt>
   12a90:	mov	r4, r0
   12a94:	bl	121a4 <init_token_obra@@Base>
   12a98:	ldrd	r2, [r5, #208]	; 0xd0
   12a9c:	adds	r2, r2, #1
   12aa0:	adc	r3, r3, #0
   12aa4:	strd	r2, [r5, #208]	; 0xd0
   12aa8:	mov	r0, r4
   12aac:	b	12700 <next@@Base+0x58>
   12ab0:	ldr	r5, [pc, #2420]	; 1342c <next@@Base+0xd84>
   12ab4:	ldrd	r2, [r5, #216]	; 0xd8
   12ab8:	adds	r2, r2, #1
   12abc:	adc	r3, r3, #0
   12ac0:	strd	r2, [r5, #216]	; 0xd8
   12ac4:	mov	r0, #4
   12ac8:	bl	119fc <malloc@plt>
   12acc:	mov	r4, r0
   12ad0:	bl	121c8 <init_token_cbra@@Base>
   12ad4:	ldrd	r2, [r5, #224]	; 0xe0
   12ad8:	adds	r2, r2, #1
   12adc:	adc	r3, r3, #0
   12ae0:	strd	r2, [r5, #224]	; 0xe0
   12ae4:	mov	r0, r4
   12ae8:	b	12700 <next@@Base+0x58>
   12aec:	ldr	r5, [pc, #2360]	; 1342c <next@@Base+0xd84>
   12af0:	ldrd	r2, [r5, #232]	; 0xe8
   12af4:	adds	r2, r2, #1
   12af8:	adc	r3, r3, #0
   12afc:	strd	r2, [r5, #232]	; 0xe8
   12b00:	mov	r0, #4
   12b04:	bl	119fc <malloc@plt>
   12b08:	mov	r4, r0
   12b0c:	bl	12210 <init_token_semicolon@@Base>
   12b10:	ldrd	r2, [r5, #240]	; 0xf0
   12b14:	adds	r2, r2, #1
   12b18:	adc	r3, r3, #0
   12b1c:	strd	r2, [r5, #240]	; 0xf0
   12b20:	mov	r0, r4
   12b24:	b	12700 <next@@Base+0x58>
   12b28:	ldrd	r2, [r8, #248]	; 0xf8
   12b2c:	adds	r2, r2, #1
   12b30:	adc	r3, r3, #0
   12b34:	strd	r2, [r8, #248]	; 0xf8
   12b38:	add	r6, r4, #1
   12b3c:	add	r3, sp, #520	; 0x208
   12b40:	add	r4, r3, r4
   12b44:	mov	r3, #101	; 0x65
   12b48:	strb	r3, [r4, #-512]	; 0xfffffe00
   12b4c:	mov	r0, r5
   12b50:	bl	125c0 <get_char@@Base>
   12b54:	add	r1, r8, #256	; 0x100
   12b58:	ldrd	r2, [r1]
   12b5c:	adds	r2, r2, #1
   12b60:	adc	r3, r3, #0
   12b64:	strd	r2, [r1]
   12b68:	mov	r4, r6
   12b6c:	mov	r6, #5
   12b70:	b	12960 <next@@Base+0x2b8>
   12b74:	add	r6, r8, #272	; 0x110
   12b78:	ldrd	r2, [r6, #-8]
   12b7c:	adds	r2, r2, #1
   12b80:	adc	r3, r3, #0
   12b84:	strd	r2, [r6, #-8]
   12b88:	add	r3, r4, #1
   12b8c:	str	r3, [sp, #4]
   12b90:	add	r2, sp, #520	; 0x208
   12b94:	add	r4, r2, r4
   12b98:	mov	r3, #105	; 0x69
   12b9c:	strb	r3, [r4, #-512]	; 0xfffffe00
   12ba0:	mov	r0, r5
   12ba4:	bl	125c0 <get_char@@Base>
   12ba8:	ldrd	r2, [r6]
   12bac:	adds	r2, r2, #1
   12bb0:	adc	r3, r3, #0
   12bb4:	strd	r2, [r6]
   12bb8:	ldr	r4, [sp, #4]
   12bbc:	mov	r6, #2
   12bc0:	b	12960 <next@@Base+0x2b8>
   12bc4:	ldrd	r2, [sl, #-8]
   12bc8:	adds	r2, r2, #1
   12bcc:	adc	r3, r3, #0
   12bd0:	strd	r2, [sl, #-8]
   12bd4:	add	r6, r4, #1
   12bd8:	add	r3, sp, #520	; 0x208
   12bdc:	add	r4, r3, r4
   12be0:	mov	r3, #109	; 0x6d
   12be4:	strb	r3, [r4, #-512]	; 0xfffffe00
   12be8:	mov	r0, r5
   12bec:	bl	125c0 <get_char@@Base>
   12bf0:	ldrd	r2, [sl]
   12bf4:	adds	r2, r2, #1
   12bf8:	adc	r3, r3, #0
   12bfc:	strd	r2, [sl]
   12c00:	mov	r4, r6
   12c04:	mov	r6, #3
   12c08:	b	12960 <next@@Base+0x2b8>
   12c0c:	cmp	r0, #33	; 0x21
   12c10:	bne	12d04 <next@@Base+0x65c>
   12c14:	ldr	r1, [pc, #2072]	; 13434 <next@@Base+0xd8c>
   12c18:	ldrd	r2, [r1, #-8]
   12c1c:	adds	r2, r2, #1
   12c20:	adc	r3, r3, #0
   12c24:	strd	r2, [r1, #-8]
   12c28:	add	r3, sp, #520	; 0x208
   12c2c:	add	r4, r3, r4
   12c30:	mov	r3, #33	; 0x21
   12c34:	strb	r3, [r4, #-512]	; 0xfffffe00
   12c38:	mov	r0, r5
   12c3c:	bl	125c0 <get_char@@Base>
   12c40:	mov	r6, r0
   12c44:	mov	r0, #8
   12c48:	bl	119fc <malloc@plt>
   12c4c:	mov	r4, r0
   12c50:	cmp	r6, #61	; 0x3d
   12c54:	beq	12ccc <next@@Base+0x624>
   12c58:	ldr	r6, [pc, #1996]	; 1342c <next@@Base+0xd84>
   12c5c:	add	r1, r6, #320	; 0x140
   12c60:	ldrd	r2, [r1]
   12c64:	adds	r2, r2, #1
   12c68:	adc	r3, r3, #0
   12c6c:	strd	r2, [r1]
   12c70:	mov	r0, r5
   12c74:	bl	12670 <push_back_one_char@@Base>
   12c78:	mov	r0, #2
   12c7c:	bl	119fc <malloc@plt>
   12c80:	ldrb	r3, [sp, #8]
   12c84:	strb	r3, [r0]
   12c88:	mov	r3, #0
   12c8c:	strb	r3, [r0, #1]
   12c90:	add	r6, r6, #336	; 0x150
   12c94:	ldrd	r2, [r6, #-8]
   12c98:	adds	r2, r2, #1
   12c9c:	adc	r3, r3, #0
   12ca0:	strd	r2, [r6, #-8]
   12ca4:	mov	r1, r0
   12ca8:	mov	r0, r4
   12cac:	bl	122a0 <init_token_boolean_op@@Base>
   12cb0:	ldr	r1, [pc, #1920]	; 13438 <next@@Base+0xd90>
   12cb4:	ldrd	r2, [r1, #-8]
   12cb8:	adds	r2, r2, #1
   12cbc:	adc	r3, r3, #0
   12cc0:	strd	r2, [r1, #-8]
   12cc4:	mov	r0, r4
   12cc8:	b	12700 <next@@Base+0x58>
   12ccc:	mov	r0, #3
   12cd0:	bl	119fc <malloc@plt>
   12cd4:	ldrb	r3, [sp, #8]
   12cd8:	strb	r3, [r0]
   12cdc:	mov	r3, #61	; 0x3d
   12ce0:	strb	r3, [r0, #1]
   12ce4:	mov	r3, #0
   12ce8:	strb	r3, [r0, #2]
   12cec:	ldr	r1, [pc, #1864]	; 1343c <next@@Base+0xd94>
   12cf0:	ldrd	r2, [r1]
   12cf4:	adds	r2, r2, #1
   12cf8:	adc	r3, r3, #0
   12cfc:	strd	r2, [r1]
   12d00:	b	12ca4 <next@@Base+0x5fc>
   12d04:	and	r3, r0, #253	; 0xfd
   12d08:	cmp	r3, #60	; 0x3c
   12d0c:	bne	12df4 <next@@Base+0x74c>
   12d10:	ldr	r3, [pc, #1824]	; 13438 <next@@Base+0xd90>
   12d14:	ldrd	r6, [r3]
   12d18:	adds	r6, r6, #1
   12d1c:	adc	r7, r7, #0
   12d20:	strd	r6, [r3]
   12d24:	add	r3, sp, #520	; 0x208
   12d28:	add	r4, r3, r4
   12d2c:	strb	r0, [r4, #-512]	; 0xfffffe00
   12d30:	mov	r0, r5
   12d34:	bl	125c0 <get_char@@Base>
   12d38:	mov	r6, r0
   12d3c:	mov	r0, #8
   12d40:	bl	119fc <malloc@plt>
   12d44:	mov	r4, r0
   12d48:	cmp	r6, #61	; 0x3d
   12d4c:	beq	12dbc <next@@Base+0x714>
   12d50:	ldr	r6, [pc, #1768]	; 13440 <next@@Base+0xd98>
   12d54:	ldrd	r2, [r6, #-8]
   12d58:	adds	r2, r2, #1
   12d5c:	adc	r3, r3, #0
   12d60:	strd	r2, [r6, #-8]
   12d64:	mov	r0, r5
   12d68:	bl	12670 <push_back_one_char@@Base>
   12d6c:	mov	r0, #2
   12d70:	bl	119fc <malloc@plt>
   12d74:	ldrb	r3, [sp, #8]
   12d78:	strb	r3, [r0]
   12d7c:	mov	r3, #0
   12d80:	strb	r3, [r0, #1]
   12d84:	ldrd	r2, [r6]
   12d88:	adds	r2, r2, #1
   12d8c:	adc	r3, r3, #0
   12d90:	strd	r2, [r6]
   12d94:	mov	r1, r0
   12d98:	mov	r0, r4
   12d9c:	bl	122a0 <init_token_boolean_op@@Base>
   12da0:	ldr	r1, [pc, #1692]	; 13444 <next@@Base+0xd9c>
   12da4:	ldrd	r2, [r1]
   12da8:	adds	r2, r2, #1
   12dac:	adc	r3, r3, #0
   12db0:	strd	r2, [r1]
   12db4:	mov	r0, r4
   12db8:	b	12700 <next@@Base+0x58>
   12dbc:	mov	r0, #3
   12dc0:	bl	119fc <malloc@plt>
   12dc4:	ldrb	r3, [sp, #8]
   12dc8:	strb	r3, [r0]
   12dcc:	mov	r3, #61	; 0x3d
   12dd0:	strb	r3, [r0, #1]
   12dd4:	mov	r3, #0
   12dd8:	strb	r3, [r0, #2]
   12ddc:	ldr	r1, [pc, #1632]	; 13444 <next@@Base+0xd9c>
   12de0:	ldrd	r2, [r1, #-8]
   12de4:	adds	r2, r2, #1
   12de8:	adc	r3, r3, #0
   12dec:	strd	r2, [r1, #-8]
   12df0:	b	12d94 <next@@Base+0x6ec>
   12df4:	cmp	r0, #61	; 0x3d
   12df8:	bne	12eb4 <next@@Base+0x80c>
   12dfc:	ldr	r1, [pc, #1604]	; 13448 <next@@Base+0xda0>
   12e00:	ldrd	r2, [r1, #-8]
   12e04:	adds	r2, r2, #1
   12e08:	adc	r3, r3, #0
   12e0c:	strd	r2, [r1, #-8]
   12e10:	add	r3, sp, #520	; 0x208
   12e14:	add	r4, r3, r4
   12e18:	mov	r3, #61	; 0x3d
   12e1c:	strb	r3, [r4, #-512]	; 0xfffffe00
   12e20:	mov	r0, r5
   12e24:	bl	125c0 <get_char@@Base>
   12e28:	mov	r5, r0
   12e2c:	mov	r0, #8
   12e30:	bl	119fc <malloc@plt>
   12e34:	mov	r4, r0
   12e38:	cmp	r5, #61	; 0x3d
   12e3c:	beq	12e5c <next@@Base+0x7b4>
   12e40:	ldr	r1, [pc, #1536]	; 13448 <next@@Base+0xda0>
   12e44:	ldrd	r2, [r1]
   12e48:	adds	r2, r2, #1
   12e4c:	adc	r3, r3, #0
   12e50:	strd	r2, [r1]
   12e54:	mov	r0, #1
   12e58:	bl	11a44 <exit@plt>
   12e5c:	ldr	r5, [pc, #1512]	; 1344c <next@@Base+0xda4>
   12e60:	ldrd	r2, [r5, #-8]
   12e64:	adds	r2, r2, #1
   12e68:	adc	r3, r3, #0
   12e6c:	strd	r2, [r5, #-8]
   12e70:	mov	r0, #3
   12e74:	bl	119fc <malloc@plt>
   12e78:	mov	r1, r0
   12e7c:	ldrb	r3, [sp, #8]
   12e80:	strb	r3, [r0]
   12e84:	mov	r3, #61	; 0x3d
   12e88:	strb	r3, [r0, #1]
   12e8c:	mov	r3, #0
   12e90:	strb	r3, [r0, #2]
   12e94:	mov	r0, r4
   12e98:	bl	122a0 <init_token_boolean_op@@Base>
   12e9c:	ldrd	r2, [r5]
   12ea0:	adds	r2, r2, #1
   12ea4:	adc	r3, r3, #0
   12ea8:	strd	r2, [r5]
   12eac:	mov	r0, r4
   12eb0:	b	12700 <next@@Base+0x58>
   12eb4:	cmp	r0, #124	; 0x7c
   12eb8:	bne	12f74 <next@@Base+0x8cc>
   12ebc:	ldr	r1, [pc, #1420]	; 13450 <next@@Base+0xda8>
   12ec0:	ldrd	r2, [r1, #-8]
   12ec4:	adds	r2, r2, #1
   12ec8:	adc	r3, r3, #0
   12ecc:	strd	r2, [r1, #-8]
   12ed0:	add	r3, sp, #520	; 0x208
   12ed4:	add	r4, r3, r4
   12ed8:	mov	r3, #124	; 0x7c
   12edc:	strb	r3, [r4, #-512]	; 0xfffffe00
   12ee0:	mov	r0, r5
   12ee4:	bl	125c0 <get_char@@Base>
   12ee8:	mov	r5, r0
   12eec:	mov	r0, #8
   12ef0:	bl	119fc <malloc@plt>
   12ef4:	mov	r4, r0
   12ef8:	cmp	r5, #124	; 0x7c
   12efc:	beq	12f1c <next@@Base+0x874>
   12f00:	ldr	r1, [pc, #1352]	; 13450 <next@@Base+0xda8>
   12f04:	ldrd	r2, [r1]
   12f08:	adds	r2, r2, #1
   12f0c:	adc	r3, r3, #0
   12f10:	strd	r2, [r1]
   12f14:	mov	r0, #1
   12f18:	bl	11a44 <exit@plt>
   12f1c:	ldr	r5, [pc, #1328]	; 13454 <next@@Base+0xdac>
   12f20:	ldrd	r2, [r5, #-8]
   12f24:	adds	r2, r2, #1
   12f28:	adc	r3, r3, #0
   12f2c:	strd	r2, [r5, #-8]
   12f30:	mov	r0, #3
   12f34:	bl	119fc <malloc@plt>
   12f38:	mov	r1, r0
   12f3c:	ldrb	r3, [sp, #8]
   12f40:	strb	r3, [r0]
   12f44:	mov	r3, #124	; 0x7c
   12f48:	strb	r3, [r0, #1]
   12f4c:	mov	r3, #0
   12f50:	strb	r3, [r0, #2]
   12f54:	mov	r0, r4
   12f58:	bl	122a0 <init_token_boolean_op@@Base>
   12f5c:	ldrd	r2, [r5]
   12f60:	adds	r2, r2, #1
   12f64:	adc	r3, r3, #0
   12f68:	strd	r2, [r5]
   12f6c:	mov	r0, r4
   12f70:	b	12700 <next@@Base+0x58>
   12f74:	cmp	r0, #38	; 0x26
   12f78:	bne	1303c <next@@Base+0x994>
   12f7c:	ldr	r1, [pc, #1236]	; 13458 <next@@Base+0xdb0>
   12f80:	ldrd	r2, [r1, #-8]
   12f84:	adds	r2, r2, #1
   12f88:	adc	r3, r3, #0
   12f8c:	strd	r2, [r1, #-8]
   12f90:	add	r3, sp, #520	; 0x208
   12f94:	add	r4, r3, r4
   12f98:	mov	r3, #38	; 0x26
   12f9c:	strb	r3, [r4, #-512]	; 0xfffffe00
   12fa0:	mov	r0, r5
   12fa4:	bl	125c0 <get_char@@Base>
   12fa8:	mov	r5, r0
   12fac:	mov	r0, #8
   12fb0:	bl	119fc <malloc@plt>
   12fb4:	mov	r4, r0
   12fb8:	cmp	r5, #38	; 0x26
   12fbc:	beq	12fdc <next@@Base+0x934>
   12fc0:	ldr	r1, [pc, #1172]	; 1345c <next@@Base+0xdb4>
   12fc4:	ldrd	r2, [r1, #-8]
   12fc8:	adds	r2, r2, #1
   12fcc:	adc	r3, r3, #0
   12fd0:	strd	r2, [r1, #-8]
   12fd4:	mov	r0, #1
   12fd8:	bl	11a44 <exit@plt>
   12fdc:	ldr	r5, [pc, #1096]	; 1342c <next@@Base+0xd84>
   12fe0:	add	r1, r5, #480	; 0x1e0
   12fe4:	ldrd	r2, [r1]
   12fe8:	adds	r2, r2, #1
   12fec:	adc	r3, r3, #0
   12ff0:	strd	r2, [r1]
   12ff4:	mov	r0, #3
   12ff8:	bl	119fc <malloc@plt>
   12ffc:	mov	r1, r0
   13000:	ldrb	r3, [sp, #8]
   13004:	strb	r3, [r0]
   13008:	mov	r3, #38	; 0x26
   1300c:	strb	r3, [r0, #1]
   13010:	mov	r3, #0
   13014:	strb	r3, [r0, #2]
   13018:	mov	r0, r4
   1301c:	bl	122a0 <init_token_boolean_op@@Base>
   13020:	add	r5, r5, #496	; 0x1f0
   13024:	ldrd	r2, [r5, #-8]
   13028:	adds	r2, r2, #1
   1302c:	adc	r3, r3, #0
   13030:	strd	r2, [r5, #-8]
   13034:	mov	r0, r4
   13038:	b	12700 <next@@Base+0x58>
   1303c:	ldr	r4, [pc, #1000]	; 1342c <next@@Base+0xd84>
   13040:	add	r1, r4, #464	; 0x1d0
   13044:	ldrd	r2, [r1]
   13048:	adds	r2, r2, #1
   1304c:	adc	r3, r3, #0
   13050:	strd	r2, [r1]
   13054:	mov	r2, r0
   13058:	ldr	r1, [pc, #1024]	; 13460 <next@@Base+0xdb8>
   1305c:	ldr	r3, [pc, #1024]	; 13464 <next@@Base+0xdbc>
   13060:	ldr	r0, [r3]
   13064:	bl	11a68 <fprintf@plt>
   13068:	add	r4, r4, #496	; 0x1f0
   1306c:	ldrd	r2, [r4]
   13070:	adds	r2, r2, #1
   13074:	adc	r3, r3, #0
   13078:	strd	r2, [r4]
   1307c:	mov	r0, #1
   13080:	bl	11a44 <exit@plt>
   13084:	ldr	r1, [pc, #1028]	; 13490 <next@@Base+0xde8>
   13088:	strd	r2, [r1]
   1308c:	cmp	r0, #102	; 0x66
   13090:	beq	13130 <next@@Base+0xa88>
   13094:	cmp	r0, #110	; 0x6e
   13098:	bne	1318c <next@@Base+0xae4>
   1309c:	sub	r1, r1, #256	; 0x100
   130a0:	ldrd	r2, [r1]
   130a4:	adds	r2, r2, #1
   130a8:	adc	r3, r3, #0
   130ac:	strd	r2, [r1]
   130b0:	add	r3, sp, #520	; 0x208
   130b4:	add	r4, r3, r4
   130b8:	mov	r3, #110	; 0x6e
   130bc:	strb	r3, [r4, #-512]	; 0xfffffe00
   130c0:	mov	r0, r5
   130c4:	bl	125c0 <get_char@@Base>
   130c8:	cmp	r0, #116	; 0x74
   130cc:	bne	13114 <next@@Base+0xa6c>
   130d0:	ldr	r5, [pc, #852]	; 1342c <next@@Base+0xd84>
   130d4:	add	r1, r5, #576	; 0x240
   130d8:	ldrd	r2, [r1]
   130dc:	adds	r2, r2, #1
   130e0:	adc	r3, r3, #0
   130e4:	strd	r2, [r1]
   130e8:	mov	r0, #4
   130ec:	bl	119fc <malloc@plt>
   130f0:	mov	r4, r0
   130f4:	bl	120e8 <init_token_int_type@@Base>
   130f8:	add	r5, r5, #592	; 0x250
   130fc:	ldrd	r2, [r5, #-8]
   13100:	adds	r2, r2, #1
   13104:	adc	r3, r3, #0
   13108:	strd	r2, [r5, #-8]
   1310c:	mov	r0, r4
   13110:	b	12700 <next@@Base+0x58>
   13114:	ldr	r1, [pc, #844]	; 13468 <next@@Base+0xdc0>
   13118:	ldrd	r2, [r1, #-8]
   1311c:	adds	r2, r2, #1
   13120:	adc	r3, r3, #0
   13124:	strd	r2, [r1, #-8]
   13128:	mov	r0, #1
   1312c:	bl	11a44 <exit@plt>
   13130:	ldr	r5, [pc, #756]	; 1342c <next@@Base+0xd84>
   13134:	add	r1, r5, #560	; 0x230
   13138:	ldrd	r2, [r1, #-8]
   1313c:	adds	r2, r2, #1
   13140:	adc	r3, r3, #0
   13144:	strd	r2, [r1, #-8]
   13148:	add	r3, sp, #520	; 0x208
   1314c:	add	r4, r3, r4
   13150:	mov	r3, #102	; 0x66
   13154:	strb	r3, [r4, #-512]	; 0xfffffe00
   13158:	mov	r3, #0
   1315c:	strb	r3, [r4, #-511]	; 0xfffffe01
   13160:	mov	r0, #4
   13164:	bl	119fc <malloc@plt>
   13168:	mov	r4, r0
   1316c:	bl	12258 <init_token_if@@Base>
   13170:	add	r5, r5, #592	; 0x250
   13174:	ldrd	r2, [r5]
   13178:	adds	r2, r2, #1
   1317c:	adc	r3, r3, #0
   13180:	strd	r2, [r5]
   13184:	mov	r0, r4
   13188:	b	12700 <next@@Base+0x58>
   1318c:	ldr	r1, [pc, #728]	; 1346c <next@@Base+0xdc4>
   13190:	ldrd	r2, [r1]
   13194:	adds	r2, r2, #1
   13198:	adc	r3, r3, #0
   1319c:	strd	r2, [r1]
   131a0:	mov	r0, #1
   131a4:	bl	11a44 <exit@plt>
   131a8:	ldr	r1, [pc, #736]	; 13490 <next@@Base+0xde8>
   131ac:	strd	r2, [r1]
   131b0:	cmp	r0, #97	; 0x61
   131b4:	bne	132b0 <next@@Base+0xc08>
   131b8:	ldr	r1, [pc, #688]	; 13470 <next@@Base+0xdc8>
   131bc:	ldrd	r2, [r1]
   131c0:	adds	r2, r2, #1
   131c4:	adc	r3, r3, #0
   131c8:	strd	r2, [r1]
   131cc:	add	r6, r4, #1
   131d0:	mov	r2, #97	; 0x61
   131d4:	add	r3, sp, #520	; 0x208
   131d8:	add	r3, r3, r4
   131dc:	strb	r2, [r3, #-512]	; 0xfffffe00
   131e0:	mov	r0, r5
   131e4:	bl	125c0 <get_char@@Base>
   131e8:	cmp	r0, #105	; 0x69
   131ec:	bne	132cc <next@@Base+0xc24>
   131f0:	ldr	r1, [pc, #636]	; 13474 <next@@Base+0xdcc>
   131f4:	ldrd	r2, [r1]
   131f8:	adds	r2, r2, #1
   131fc:	adc	r3, r3, #0
   13200:	strd	r2, [r1]
   13204:	add	r7, r4, #2
   13208:	add	r3, sp, #520	; 0x208
   1320c:	add	r6, r3, r6
   13210:	mov	r3, #105	; 0x69
   13214:	strb	r3, [r6, #-512]	; 0xfffffe00
   13218:	mov	r0, r5
   1321c:	bl	125c0 <get_char@@Base>
   13220:	cmp	r0, #110	; 0x6e
   13224:	bne	132e8 <next@@Base+0xc40>
   13228:	ldr	r5, [pc, #508]	; 1342c <next@@Base+0xd84>
   1322c:	add	r1, r5, #640	; 0x280
   13230:	ldrd	r2, [r1]
   13234:	adds	r2, r2, #1
   13238:	adc	r3, r3, #0
   1323c:	strd	r2, [r1]
   13240:	add	r6, r4, #3
   13244:	add	r3, sp, #520	; 0x208
   13248:	add	r7, r3, r7
   1324c:	mov	r3, #110	; 0x6e
   13250:	strb	r3, [r7, #-512]	; 0xfffffe00
   13254:	add	r3, sp, #520	; 0x208
   13258:	add	r3, r3, r6
   1325c:	mov	r8, #0
   13260:	strb	r8, [r3, #-512]	; 0xfffffe00
   13264:	add	r0, r4, #4
   13268:	bl	119fc <malloc@plt>
   1326c:	mov	r7, r0
   13270:	mov	r2, r6
   13274:	add	r1, sp, #8
   13278:	bl	11ab0 <strncpy@plt>
   1327c:	strb	r8, [r7, r6]
   13280:	mov	r0, #8
   13284:	bl	119fc <malloc@plt>
   13288:	mov	r4, r0
   1328c:	mov	r1, r7
   13290:	bl	12134 <init_token_function@@Base>
   13294:	add	r5, r5, #656	; 0x290
   13298:	ldrd	r2, [r5, #-8]
   1329c:	adds	r2, r2, #1
   132a0:	adc	r3, r3, #0
   132a4:	strd	r2, [r5, #-8]
   132a8:	mov	r0, r4
   132ac:	b	12700 <next@@Base+0x58>
   132b0:	sub	r1, r1, #208	; 0xd0
   132b4:	ldrd	r2, [r1, #-8]
   132b8:	adds	r2, r2, #1
   132bc:	adc	r3, r3, #0
   132c0:	strd	r2, [r1, #-8]
   132c4:	mov	r0, #1
   132c8:	bl	11a44 <exit@plt>
   132cc:	ldr	r1, [pc, #416]	; 13474 <next@@Base+0xdcc>
   132d0:	ldrd	r2, [r1, #-8]
   132d4:	adds	r2, r2, #1
   132d8:	adc	r3, r3, #0
   132dc:	strd	r2, [r1, #-8]
   132e0:	mov	r0, #1
   132e4:	bl	11a44 <exit@plt>
   132e8:	ldr	r1, [pc, #392]	; 13478 <next@@Base+0xdd0>
   132ec:	ldrd	r2, [r1, #-8]
   132f0:	adds	r2, r2, #1
   132f4:	adc	r3, r3, #0
   132f8:	strd	r2, [r1, #-8]
   132fc:	mov	r0, #1
   13300:	bl	11a44 <exit@plt>
   13304:	ldr	r1, [pc, #388]	; 13490 <next@@Base+0xde8>
   13308:	strd	r2, [r1]
   1330c:	cmp	r0, #101	; 0x65
   13310:	bne	134a8 <next@@Base+0xe00>
   13314:	ldr	r1, [pc, #356]	; 13480 <next@@Base+0xdd8>
   13318:	ldrd	r2, [r1, #-8]
   1331c:	adds	r2, r2, #1
   13320:	adc	r3, r3, #0
   13324:	strd	r2, [r1, #-8]
   13328:	add	r7, r4, #1
   1332c:	mov	r2, #101	; 0x65
   13330:	add	r3, sp, #520	; 0x208
   13334:	add	r3, r3, r4
   13338:	strb	r2, [r3, #-512]	; 0xfffffe00
   1333c:	mov	r0, r5
   13340:	bl	125c0 <get_char@@Base>
   13344:	cmp	r0, #116	; 0x74
   13348:	bne	134c4 <next@@Base+0xe1c>
   1334c:	ldr	r1, [pc, #304]	; 13484 <next@@Base+0xddc>
   13350:	ldrd	r2, [r1, #-8]
   13354:	adds	r2, r2, #1
   13358:	adc	r3, r3, #0
   1335c:	strd	r2, [r1, #-8]
   13360:	add	r6, r4, #2
   13364:	add	r3, sp, #520	; 0x208
   13368:	add	r7, r3, r7
   1336c:	mov	r3, #116	; 0x74
   13370:	strb	r3, [r7, #-512]	; 0xfffffe00
   13374:	mov	r0, r5
   13378:	bl	125c0 <get_char@@Base>
   1337c:	cmp	r0, #117	; 0x75
   13380:	bne	134e0 <next@@Base+0xe38>
   13384:	ldr	r1, [pc, #252]	; 13488 <next@@Base+0xde0>
   13388:	ldrd	r2, [r1, #-8]
   1338c:	adds	r2, r2, #1
   13390:	adc	r3, r3, #0
   13394:	strd	r2, [r1, #-8]
   13398:	add	r4, r4, #3
   1339c:	add	r3, sp, #520	; 0x208
   133a0:	add	r6, r3, r6
   133a4:	mov	r3, #117	; 0x75
   133a8:	strb	r3, [r6, #-512]	; 0xfffffe00
   133ac:	mov	r0, r5
   133b0:	bl	125c0 <get_char@@Base>
   133b4:	cmp	r0, #114	; 0x72
   133b8:	bne	134fc <next@@Base+0xe54>
   133bc:	ldr	r1, [pc, #200]	; 1348c <next@@Base+0xde4>
   133c0:	ldrd	r2, [r1, #-8]
   133c4:	adds	r2, r2, #1
   133c8:	adc	r3, r3, #0
   133cc:	strd	r2, [r1, #-8]
   133d0:	add	r3, sp, #520	; 0x208
   133d4:	add	r4, r3, r4
   133d8:	mov	r3, #114	; 0x72
   133dc:	strb	r3, [r4, #-512]	; 0xfffffe00
   133e0:	mov	r0, r5
   133e4:	bl	125c0 <get_char@@Base>
   133e8:	cmp	r0, #110	; 0x6e
   133ec:	bne	13518 <next@@Base+0xe70>
   133f0:	ldr	r5, [pc, #132]	; 1347c <next@@Base+0xdd4>
   133f4:	ldrd	r2, [r5, #-8]
   133f8:	adds	r2, r2, #1
   133fc:	adc	r3, r3, #0
   13400:	strd	r2, [r5, #-8]
   13404:	mov	r0, #4
   13408:	bl	119fc <malloc@plt>
   1340c:	mov	r4, r0
   13410:	bl	121ec <init_token_return@@Base>
   13414:	ldrd	r2, [r5]
   13418:	adds	r2, r2, #1
   1341c:	adc	r3, r3, #0
   13420:	strd	r2, [r5]
   13424:	mov	r0, r4
   13428:	b	12700 <next@@Base+0x58>
   1342c:	andeq	r9, r2, r0, lsr #25
   13430:	andeq	r9, r2, r0, lsr #29
   13434:	andeq	r9, r2, r0, ror #27
   13438:	andeq	r9, r2, r0, lsl #28
   1343c:	strdeq	r9, [r2], -r0
   13440:	andeq	r9, r2, r0, lsl lr
   13444:	andeq	r9, r2, r0, lsr #28
   13448:	andeq	r9, r2, r0, lsr lr
   1344c:	andeq	r9, r2, r0, asr #28
   13450:	andeq	r9, r2, r0, asr lr
   13454:	andeq	r9, r2, r0, ror #28
   13458:	andeq	r9, r2, r0, ror lr
   1345c:	andeq	r9, r2, r0, lsl #29
   13460:	andeq	r7, r1, r0, lsl #23
   13464:			; <UNDEFINED> instruction: 0x00029ab8
   13468:	andeq	r9, r2, r0, ror #29
   1346c:	andeq	r9, r2, r0, asr #29
   13470:	andeq	r9, r2, r0, lsl #30
   13474:	andeq	r9, r2, r0, lsl pc
   13478:	andeq	r9, r2, r0, lsr #30
   1347c:	andeq	r9, r2, r0, lsl #31
   13480:	andeq	r9, r2, r0, asr #30
   13484:	andeq	r9, r2, r0, asr pc
   13488:	andeq	r9, r2, r0, ror #30
   1348c:	andeq	r9, r2, r0, ror pc
   13490:	ldrdeq	r9, [r2], -r0
   13494:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   13498:	andeq	r9, r2, r0, lsr #25
   1349c:	andeq	r9, r2, r0, lsr #31
   134a0:			; <UNDEFINED> instruction: 0x00029fb0
   134a4:	andeq	r9, r2, r0, ror #31
   134a8:	sub	r1, r1, #160	; 0xa0
   134ac:	ldrd	r2, [r1]
   134b0:	adds	r2, r2, #1
   134b4:	adc	r3, r3, #0
   134b8:	strd	r2, [r1]
   134bc:	mov	r0, #1
   134c0:	bl	11a44 <exit@plt>
   134c4:	ldr	r1, [pc, #-76]	; 13480 <next@@Base+0xdd8>
   134c8:	ldrd	r2, [r1]
   134cc:	adds	r2, r2, #1
   134d0:	adc	r3, r3, #0
   134d4:	strd	r2, [r1]
   134d8:	mov	r0, #1
   134dc:	bl	11a44 <exit@plt>
   134e0:	ldr	r1, [pc, #-100]	; 13484 <next@@Base+0xddc>
   134e4:	ldrd	r2, [r1]
   134e8:	adds	r2, r2, #1
   134ec:	adc	r3, r3, #0
   134f0:	strd	r2, [r1]
   134f4:	mov	r0, #1
   134f8:	bl	11a44 <exit@plt>
   134fc:	ldr	r1, [pc, #-124]	; 13488 <next@@Base+0xde0>
   13500:	ldrd	r2, [r1]
   13504:	adds	r2, r2, #1
   13508:	adc	r3, r3, #0
   1350c:	strd	r2, [r1]
   13510:	mov	r0, #1
   13514:	bl	11a44 <exit@plt>
   13518:	ldr	r1, [pc, #-148]	; 1348c <next@@Base+0xde4>
   1351c:	ldrd	r2, [r1]
   13520:	adds	r2, r2, #1
   13524:	adc	r3, r3, #0
   13528:	strd	r2, [r1]
   1352c:	mov	r0, #1
   13530:	bl	11a44 <exit@plt>
   13534:	ldr	r1, [pc, #-172]	; 13490 <next@@Base+0xde8>
   13538:	strd	r2, [r1]
   1353c:	cmp	r0, #108	; 0x6c
   13540:	bne	135f4 <next@@Base+0xf4c>
   13544:	ldr	r1, [pc, #-184]	; 13494 <next@@Base+0xdec>
   13548:	ldrd	r2, [r1]
   1354c:	adds	r2, r2, #1
   13550:	adc	r3, r3, #0
   13554:	strd	r2, [r1]
   13558:	add	r6, r4, #1
   1355c:	add	r3, sp, #520	; 0x208
   13560:	add	r4, r3, r4
   13564:	mov	r3, #108	; 0x6c
   13568:	strb	r3, [r4, #-512]	; 0xfffffe00
   1356c:	mov	r0, r5
   13570:	bl	125c0 <get_char@@Base>
   13574:	cmp	r0, #115	; 0x73
   13578:	bne	13610 <next@@Base+0xf68>
   1357c:	ldr	r1, [pc, #-232]	; 1349c <next@@Base+0xdf4>
   13580:	ldrd	r2, [r1]
   13584:	adds	r2, r2, #1
   13588:	adc	r3, r3, #0
   1358c:	strd	r2, [r1]
   13590:	add	r3, sp, #520	; 0x208
   13594:	add	r6, r3, r6
   13598:	mov	r3, #115	; 0x73
   1359c:	strb	r3, [r6, #-512]	; 0xfffffe00
   135a0:	mov	r0, r5
   135a4:	bl	125c0 <get_char@@Base>
   135a8:	cmp	r0, #101	; 0x65
   135ac:	bne	1362c <next@@Base+0xf84>
   135b0:	ldr	r5, [pc, #-288]	; 13498 <next@@Base+0xdf0>
   135b4:	add	r1, r5, #784	; 0x310
   135b8:	ldrd	r2, [r1]
   135bc:	adds	r2, r2, #1
   135c0:	adc	r3, r3, #0
   135c4:	strd	r2, [r1]
   135c8:	mov	r0, #4
   135cc:	bl	119fc <malloc@plt>
   135d0:	mov	r4, r0
   135d4:	bl	1227c <init_token_else@@Base>
   135d8:	add	r5, r5, #800	; 0x320
   135dc:	ldrd	r2, [r5, #-8]
   135e0:	adds	r2, r2, #1
   135e4:	adc	r3, r3, #0
   135e8:	strd	r2, [r5, #-8]
   135ec:	mov	r0, r4
   135f0:	b	12700 <next@@Base+0x58>
   135f4:	sub	r1, r1, #64	; 0x40
   135f8:	ldrd	r2, [r1, #-8]
   135fc:	adds	r2, r2, #1
   13600:	adc	r3, r3, #0
   13604:	strd	r2, [r1, #-8]
   13608:	mov	r0, #1
   1360c:	bl	11a44 <exit@plt>
   13610:	ldr	r1, [pc, #-380]	; 1349c <next@@Base+0xdf4>
   13614:	ldrd	r2, [r1, #-8]
   13618:	adds	r2, r2, #1
   1361c:	adc	r3, r3, #0
   13620:	strd	r2, [r1, #-8]
   13624:	mov	r0, #1
   13628:	bl	11a44 <exit@plt>
   1362c:	ldr	r1, [pc, #-404]	; 134a0 <next@@Base+0xdf8>
   13630:	ldrd	r2, [r1, #-8]
   13634:	adds	r2, r2, #1
   13638:	adc	r3, r3, #0
   1363c:	strd	r2, [r1, #-8]
   13640:	mov	r0, #1
   13644:	bl	11a44 <exit@plt>
   13648:	ldr	r5, [pc, #-428]	; 134a4 <next@@Base+0xdfc>
   1364c:	ldrd	r2, [r5, #-8]
   13650:	adds	r2, r2, #1
   13654:	adc	r3, r3, #0
   13658:	strd	r2, [r5, #-8]
   1365c:	mov	r0, #4
   13660:	bl	119fc <malloc@plt>
   13664:	mov	r4, r0
   13668:	bl	12234 <init_token_eof@@Base>
   1366c:	ldrd	r2, [r5]
   13670:	adds	r2, r2, #1
   13674:	adc	r3, r3, #0
   13678:	strd	r2, [r5]
   1367c:	mov	r0, r4
   13680:	b	12700 <next@@Base+0x58>
   13684:	push	{r4, lr}
   13688:	ldr	r0, [pc, #4]	; 13694 <next@@Base+0xfec>
   1368c:	bl	17640 <__gcov_sort_n_vals@@Base+0x458>
   13690:	pop	{r4, pc}
   13694:	andeq	r9, r2, r8, ror #8

00013698 <init_ast_base@@Base>:
   13698:	push	{r4, r5}
   1369c:	ldr	r3, [pc, #28]	; 136c0 <init_ast_base@@Base+0x28>
   136a0:	ldrd	r4, [r3]
   136a4:	adds	r4, r4, #1
   136a8:	adc	r5, r5, #0
   136ac:	strd	r4, [r3]
   136b0:	str	r1, [r0]
   136b4:	str	r2, [r0, #4]
   136b8:	pop	{r4, r5}
   136bc:	bx	lr
   136c0:	andeq	r9, r2, r8, ror #31

000136c4 <init_ast_base_single@@Base>:
   136c4:	push	{r4, lr}
   136c8:	ldr	r4, [pc, #40]	; 136f8 <init_ast_base_single@@Base+0x34>
   136cc:	ldrd	r2, [r4, #8]
   136d0:	adds	r2, r2, #1
   136d4:	adc	r3, r3, #0
   136d8:	strd	r2, [r4, #8]
   136dc:	mov	r2, #0
   136e0:	bl	13698 <init_ast_base@@Base>
   136e4:	ldrd	r2, [r4, #16]
   136e8:	adds	r2, r2, #1
   136ec:	adc	r3, r3, #0
   136f0:	strd	r2, [r4, #16]
   136f4:	pop	{r4, pc}
   136f8:	andeq	r9, r2, r8, ror #31

000136fc <init_node_id@@Base>:
   136fc:	push	{r4, r5, r6, lr}
   13700:	mov	r5, r0
   13704:	mov	r6, r1
   13708:	ldr	r4, [pc, #44]	; 1373c <init_node_id@@Base+0x40>
   1370c:	ldrd	r2, [r4, #24]
   13710:	adds	r2, r2, #1
   13714:	adc	r3, r3, #0
   13718:	strd	r2, [r4, #24]
   1371c:	mov	r1, #0
   13720:	bl	136c4 <init_ast_base_single@@Base>
   13724:	ldrd	r2, [r4, #32]
   13728:	adds	r2, r2, #1
   1372c:	adc	r3, r3, #0
   13730:	strd	r2, [r4, #32]
   13734:	str	r6, [r5, #8]
   13738:	pop	{r4, r5, r6, pc}
   1373c:	andeq	r9, r2, r8, ror #31

00013740 <init_node_int@@Base>:
   13740:	push	{r4, r5, r6, lr}
   13744:	mov	r5, r0
   13748:	mov	r6, r1
   1374c:	ldr	r4, [pc, #44]	; 13780 <init_node_int@@Base+0x40>
   13750:	ldrd	r2, [r4, #40]	; 0x28
   13754:	adds	r2, r2, #1
   13758:	adc	r3, r3, #0
   1375c:	strd	r2, [r4, #40]	; 0x28
   13760:	mov	r1, #1
   13764:	bl	136c4 <init_ast_base_single@@Base>
   13768:	ldrd	r2, [r4, #48]	; 0x30
   1376c:	adds	r2, r2, #1
   13770:	adc	r3, r3, #0
   13774:	strd	r2, [r4, #48]	; 0x30
   13778:	str	r6, [r5, #8]
   1377c:	pop	{r4, r5, r6, pc}
   13780:	andeq	r9, r2, r8, ror #31

00013784 <init_node_function@@Base>:
   13784:	push	{r4, r5, r6, r7, r8, lr}
   13788:	mov	r5, r0
   1378c:	mov	r7, r1
   13790:	mov	r6, r2
   13794:	ldr	r4, [pc, #48]	; 137cc <init_node_function@@Base+0x48>
   13798:	ldrd	r2, [r4, #56]	; 0x38
   1379c:	adds	r2, r2, #1
   137a0:	adc	r3, r3, #0
   137a4:	strd	r2, [r4, #56]	; 0x38
   137a8:	mov	r1, #2
   137ac:	bl	136c4 <init_ast_base_single@@Base>
   137b0:	ldrd	r2, [r4, #64]	; 0x40
   137b4:	adds	r2, r2, #1
   137b8:	adc	r3, r3, #0
   137bc:	strd	r2, [r4, #64]	; 0x40
   137c0:	str	r7, [r5, #8]
   137c4:	str	r6, [r5, #12]
   137c8:	pop	{r4, r5, r6, r7, r8, pc}
   137cc:	andeq	r9, r2, r8, ror #31

000137d0 <init_node_return@@Base>:
   137d0:	push	{r4, r5, r6, lr}
   137d4:	mov	r5, r0
   137d8:	mov	r6, r1
   137dc:	ldr	r4, [pc, #44]	; 13810 <init_node_return@@Base+0x40>
   137e0:	ldrd	r2, [r4, #72]	; 0x48
   137e4:	adds	r2, r2, #1
   137e8:	adc	r3, r3, #0
   137ec:	strd	r2, [r4, #72]	; 0x48
   137f0:	mov	r1, #3
   137f4:	bl	136c4 <init_ast_base_single@@Base>
   137f8:	ldrd	r2, [r4, #80]	; 0x50
   137fc:	adds	r2, r2, #1
   13800:	adc	r3, r3, #0
   13804:	strd	r2, [r4, #80]	; 0x50
   13808:	str	r6, [r5, #8]
   1380c:	pop	{r4, r5, r6, pc}
   13810:	andeq	r9, r2, r8, ror #31

00013814 <init_node_if@@Base>:
   13814:	push	{r4, r5, r6, r7, r8, lr}
   13818:	mov	r5, r0
   1381c:	mov	r8, r1
   13820:	mov	r7, r2
   13824:	mov	r6, r3
   13828:	ldr	r4, [pc, #52]	; 13864 <init_node_if@@Base+0x50>
   1382c:	ldrd	r2, [r4, #88]	; 0x58
   13830:	adds	r2, r2, #1
   13834:	adc	r3, r3, #0
   13838:	strd	r2, [r4, #88]	; 0x58
   1383c:	mov	r1, #4
   13840:	bl	136c4 <init_ast_base_single@@Base>
   13844:	ldrd	r2, [r4, #96]	; 0x60
   13848:	adds	r2, r2, #1
   1384c:	adc	r3, r3, #0
   13850:	strd	r2, [r4, #96]	; 0x60
   13854:	str	r8, [r5, #8]
   13858:	str	r7, [r5, #12]
   1385c:	str	r6, [r5, #16]
   13860:	pop	{r4, r5, r6, r7, r8, pc}
   13864:	andeq	r9, r2, r8, ror #31

00013868 <init_node_boolean_operator@@Base>:
   13868:	push	{r4, r5, r6, r7, r8, lr}
   1386c:	mov	r4, r0
   13870:	mov	r8, r1
   13874:	mov	r7, r2
   13878:	mov	r6, r3
   1387c:	ldr	r5, [pc, #60]	; 138c0 <init_node_boolean_operator@@Base+0x58>
   13880:	ldrd	r2, [r5, #104]	; 0x68
   13884:	adds	r2, r2, #1
   13888:	adc	r3, r3, #0
   1388c:	strd	r2, [r5, #104]	; 0x68
   13890:	mov	r1, #0
   13894:	bl	136c4 <init_ast_base_single@@Base>
   13898:	ldrd	r2, [r5, #112]	; 0x70
   1389c:	adds	r2, r2, #1
   138a0:	adc	r3, r3, #0
   138a4:	strd	r2, [r5, #112]	; 0x70
   138a8:	mov	r3, #5
   138ac:	str	r3, [r4]
   138b0:	str	r8, [r4, #16]
   138b4:	str	r7, [r4, #8]
   138b8:	str	r6, [r4, #12]
   138bc:	pop	{r4, r5, r6, r7, r8, pc}
   138c0:	andeq	r9, r2, r8, ror #31

000138c4 <free_node_boolean_operator@@Base>:
   138c4:	push	{r4, r5, r6, lr}
   138c8:	mov	r4, r0
   138cc:	ldr	r1, [pc, #128]	; 13954 <free_node_boolean_operator@@Base+0x90>
   138d0:	ldrd	r2, [r1, #120]	; 0x78
   138d4:	adds	r2, r2, #1
   138d8:	adc	r3, r3, #0
   138dc:	strd	r2, [r1, #120]	; 0x78
   138e0:	ldr	r0, [r0, #4]
   138e4:	cmp	r0, #0
   138e8:	beq	13914 <free_node_boolean_operator@@Base+0x50>
   138ec:	mov	r5, r1
   138f0:	ldrd	r2, [r1, #128]	; 0x80
   138f4:	adds	r2, r2, #1
   138f8:	adc	r3, r3, #0
   138fc:	strd	r2, [r1, #128]	; 0x80
   13900:	bl	13958 <free_node@@Base>
   13904:	ldrd	r2, [r5, #136]	; 0x88
   13908:	adds	r2, r2, #1
   1390c:	adc	r3, r3, #0
   13910:	strd	r2, [r5, #136]	; 0x88
   13914:	ldr	r0, [r4, #8]
   13918:	bl	13958 <free_node@@Base>
   1391c:	ldr	r5, [pc, #48]	; 13954 <free_node_boolean_operator@@Base+0x90>
   13920:	ldrd	r2, [r5, #144]	; 0x90
   13924:	adds	r2, r2, #1
   13928:	adc	r3, r3, #0
   1392c:	strd	r2, [r5, #144]	; 0x90
   13930:	ldr	r0, [r4, #12]
   13934:	bl	13958 <free_node@@Base>
   13938:	ldrd	r2, [r5, #152]	; 0x98
   1393c:	adds	r2, r2, #1
   13940:	adc	r3, r3, #0
   13944:	strd	r2, [r5, #152]	; 0x98
   13948:	mov	r0, r4
   1394c:	bl	119a8 <free@plt>
   13950:	pop	{r4, r5, r6, pc}
   13954:	andeq	r9, r2, r8, ror #31

00013958 <free_node@@Base>:
   13958:	push	{r4, lr}
   1395c:	ldr	r3, [r0]
   13960:	cmp	r3, #5
   13964:	ldrls	pc, [pc, r3, lsl #2]
   13968:	b	13a90 <free_node@@Base+0x138>
   1396c:	andeq	r3, r1, r4, lsl #19
   13970:			; <UNDEFINED> instruction: 0x000139b4
   13974:	andeq	r3, r1, r0, ror #19
   13978:	andeq	r3, r1, ip, lsl #20
   1397c:	andeq	r3, r1, r8, lsr sl
   13980:	andeq	r3, r1, r4, ror #20
   13984:	ldr	r4, [pc, #332]	; 13ad8 <free_node@@Base+0x180>
   13988:	ldrd	r2, [r4, #168]	; 0xa8
   1398c:	adds	r2, r2, #1
   13990:	adc	r3, r3, #0
   13994:	strd	r2, [r4, #168]	; 0xa8
   13998:	bl	13cb8 <free_node_id@@Base>
   1399c:	add	r4, r4, #272	; 0x110
   139a0:	ldrd	r2, [r4, #-8]
   139a4:	adds	r2, r2, #1
   139a8:	adc	r3, r3, #0
   139ac:	strd	r2, [r4, #-8]
   139b0:	pop	{r4, pc}
   139b4:	ldr	r4, [pc, #284]	; 13ad8 <free_node@@Base+0x180>
   139b8:	ldrd	r2, [r4, #176]	; 0xb0
   139bc:	adds	r2, r2, #1
   139c0:	adc	r3, r3, #0
   139c4:	strd	r2, [r4, #176]	; 0xb0
   139c8:	bl	13c58 <free_node_int@@Base>
   139cc:	ldrd	r2, [r4, #216]	; 0xd8
   139d0:	adds	r2, r2, #1
   139d4:	adc	r3, r3, #0
   139d8:	strd	r2, [r4, #216]	; 0xd8
   139dc:	pop	{r4, pc}
   139e0:	ldr	r4, [pc, #240]	; 13ad8 <free_node@@Base+0x180>
   139e4:	ldrd	r2, [r4, #184]	; 0xb8
   139e8:	adds	r2, r2, #1
   139ec:	adc	r3, r3, #0
   139f0:	strd	r2, [r4, #184]	; 0xb8
   139f4:	bl	13bf0 <free_node_function@@Base>
   139f8:	ldrd	r2, [r4, #224]	; 0xe0
   139fc:	adds	r2, r2, #1
   13a00:	adc	r3, r3, #0
   13a04:	strd	r2, [r4, #224]	; 0xe0
   13a08:	pop	{r4, pc}
   13a0c:	ldr	r4, [pc, #196]	; 13ad8 <free_node@@Base+0x180>
   13a10:	ldrd	r2, [r4, #192]	; 0xc0
   13a14:	adds	r2, r2, #1
   13a18:	adc	r3, r3, #0
   13a1c:	strd	r2, [r4, #192]	; 0xc0
   13a20:	bl	13b90 <free_node_return@@Base>
   13a24:	ldrd	r2, [r4, #232]	; 0xe8
   13a28:	adds	r2, r2, #1
   13a2c:	adc	r3, r3, #0
   13a30:	strd	r2, [r4, #232]	; 0xe8
   13a34:	pop	{r4, pc}
   13a38:	ldr	r4, [pc, #152]	; 13ad8 <free_node@@Base+0x180>
   13a3c:	ldrd	r2, [r4, #200]	; 0xc8
   13a40:	adds	r2, r2, #1
   13a44:	adc	r3, r3, #0
   13a48:	strd	r2, [r4, #200]	; 0xc8
   13a4c:	bl	13ae4 <free_node_if@@Base>
   13a50:	ldrd	r2, [r4, #240]	; 0xf0
   13a54:	adds	r2, r2, #1
   13a58:	adc	r3, r3, #0
   13a5c:	strd	r2, [r4, #240]	; 0xf0
   13a60:	pop	{r4, pc}
   13a64:	ldr	r4, [pc, #108]	; 13ad8 <free_node@@Base+0x180>
   13a68:	ldrd	r2, [r4, #208]	; 0xd0
   13a6c:	adds	r2, r2, #1
   13a70:	adc	r3, r3, #0
   13a74:	strd	r2, [r4, #208]	; 0xd0
   13a78:	bl	138c4 <free_node_boolean_operator@@Base>
   13a7c:	ldrd	r2, [r4, #248]	; 0xf8
   13a80:	adds	r2, r2, #1
   13a84:	adc	r3, r3, #0
   13a88:	strd	r2, [r4, #248]	; 0xf8
   13a8c:	pop	{r4, pc}
   13a90:	ldr	r4, [pc, #64]	; 13ad8 <free_node@@Base+0x180>
   13a94:	ldrd	r2, [r4, #160]	; 0xa0
   13a98:	adds	r2, r2, #1
   13a9c:	adc	r3, r3, #0
   13aa0:	strd	r2, [r4, #160]	; 0xa0
   13aa4:	ldr	r3, [pc, #48]	; 13adc <free_node@@Base+0x184>
   13aa8:	ldr	r3, [r3]
   13aac:	mov	r2, #31
   13ab0:	mov	r1, #1
   13ab4:	ldr	r0, [pc, #36]	; 13ae0 <free_node@@Base+0x188>
   13ab8:	bl	119cc <fwrite@plt>
   13abc:	add	r4, r4, #256	; 0x100
   13ac0:	ldrd	r2, [r4]
   13ac4:	adds	r2, r2, #1
   13ac8:	adc	r3, r3, #0
   13acc:	strd	r2, [r4]
   13ad0:	mov	r0, #1
   13ad4:	bl	11a44 <exit@plt>
   13ad8:	andeq	r9, r2, r8, ror #31
   13adc:			; <UNDEFINED> instruction: 0x00029ab8
   13ae0:	strdeq	r7, [r1], -r8

00013ae4 <free_node_if@@Base>:
   13ae4:	push	{r4, r5, r6, lr}
   13ae8:	mov	r5, r0
   13aec:	ldr	r1, [pc, #152]	; 13b8c <free_node_if@@Base+0xa8>
   13af0:	ldrd	r2, [r1]
   13af4:	adds	r2, r2, #1
   13af8:	adc	r3, r3, #0
   13afc:	strd	r2, [r1]
   13b00:	ldr	r0, [r0, #4]
   13b04:	cmp	r0, #0
   13b08:	beq	13b34 <free_node_if@@Base+0x50>
   13b0c:	mov	r4, r1
   13b10:	ldrd	r2, [r1, #8]
   13b14:	adds	r2, r2, #1
   13b18:	adc	r3, r3, #0
   13b1c:	strd	r2, [r1, #8]
   13b20:	bl	13958 <free_node@@Base>
   13b24:	ldrd	r2, [r4, #16]
   13b28:	adds	r2, r2, #1
   13b2c:	adc	r3, r3, #0
   13b30:	strd	r2, [r4, #16]
   13b34:	ldr	r0, [r5, #8]
   13b38:	bl	13958 <free_node@@Base>
   13b3c:	ldr	r4, [pc, #72]	; 13b8c <free_node_if@@Base+0xa8>
   13b40:	ldrd	r2, [r4, #24]
   13b44:	adds	r2, r2, #1
   13b48:	adc	r3, r3, #0
   13b4c:	strd	r2, [r4, #24]
   13b50:	ldr	r0, [r5, #12]
   13b54:	bl	13958 <free_node@@Base>
   13b58:	ldrd	r2, [r4, #32]
   13b5c:	adds	r2, r2, #1
   13b60:	adc	r3, r3, #0
   13b64:	strd	r2, [r4, #32]
   13b68:	ldr	r0, [r5, #16]
   13b6c:	bl	13958 <free_node@@Base>
   13b70:	ldrd	r2, [r4, #40]	; 0x28
   13b74:	adds	r2, r2, #1
   13b78:	adc	r3, r3, #0
   13b7c:	strd	r2, [r4, #40]	; 0x28
   13b80:	mov	r0, r5
   13b84:	bl	119a8 <free@plt>
   13b88:	pop	{r4, r5, r6, pc}
   13b8c:	strdeq	sl, [r2], -r8

00013b90 <free_node_return@@Base>:
   13b90:	push	{r4, r5, r6, lr}
   13b94:	mov	r5, r0
   13b98:	ldr	r1, [pc, #76]	; 13bec <free_node_return@@Base+0x5c>
   13b9c:	ldrd	r2, [r1]
   13ba0:	adds	r2, r2, #1
   13ba4:	adc	r3, r3, #0
   13ba8:	strd	r2, [r1]
   13bac:	ldr	r0, [r0, #4]
   13bb0:	cmp	r0, #0
   13bb4:	beq	13be0 <free_node_return@@Base+0x50>
   13bb8:	mov	r4, r1
   13bbc:	ldrd	r2, [r1, #8]
   13bc0:	adds	r2, r2, #1
   13bc4:	adc	r3, r3, #0
   13bc8:	strd	r2, [r1, #8]
   13bcc:	bl	13958 <free_node@@Base>
   13bd0:	ldrd	r2, [r4, #16]
   13bd4:	adds	r2, r2, #1
   13bd8:	adc	r3, r3, #0
   13bdc:	strd	r2, [r4, #16]
   13be0:	mov	r0, r5
   13be4:	bl	119a8 <free@plt>
   13be8:	pop	{r4, r5, r6, pc}
   13bec:	andeq	sl, r2, r8, lsr #2

00013bf0 <free_node_function@@Base>:
   13bf0:	push	{r4, r5, r6, lr}
   13bf4:	mov	r4, r0
   13bf8:	ldr	r1, [pc, #84]	; 13c54 <free_node_function@@Base+0x64>
   13bfc:	ldrd	r2, [r1, #-8]
   13c00:	adds	r2, r2, #1
   13c04:	adc	r3, r3, #0
   13c08:	strd	r2, [r1, #-8]
   13c0c:	ldr	r0, [r0, #4]
   13c10:	cmp	r0, #0
   13c14:	beq	13c40 <free_node_function@@Base+0x50>
   13c18:	mov	r5, r1
   13c1c:	ldrd	r2, [r1]
   13c20:	adds	r2, r2, #1
   13c24:	adc	r3, r3, #0
   13c28:	strd	r2, [r1]
   13c2c:	bl	13958 <free_node@@Base>
   13c30:	ldrd	r2, [r5, #8]
   13c34:	adds	r2, r2, #1
   13c38:	adc	r3, r3, #0
   13c3c:	strd	r2, [r5, #8]
   13c40:	ldr	r0, [r4, #8]
   13c44:	bl	119a8 <free@plt>
   13c48:	mov	r0, r4
   13c4c:	bl	119a8 <free@plt>
   13c50:	pop	{r4, r5, r6, pc}
   13c54:	andeq	sl, r2, r8, asr #2

00013c58 <free_node_int@@Base>:
   13c58:	push	{r4, r5, r6, lr}
   13c5c:	mov	r5, r0
   13c60:	ldr	r1, [pc, #76]	; 13cb4 <free_node_int@@Base+0x5c>
   13c64:	ldrd	r2, [r1]
   13c68:	adds	r2, r2, #1
   13c6c:	adc	r3, r3, #0
   13c70:	strd	r2, [r1]
   13c74:	ldr	r0, [r0, #4]
   13c78:	cmp	r0, #0
   13c7c:	beq	13ca8 <free_node_int@@Base+0x50>
   13c80:	mov	r4, r1
   13c84:	ldrd	r2, [r1, #8]
   13c88:	adds	r2, r2, #1
   13c8c:	adc	r3, r3, #0
   13c90:	strd	r2, [r1, #8]
   13c94:	bl	13958 <free_node@@Base>
   13c98:	ldrd	r2, [r4, #16]
   13c9c:	adds	r2, r2, #1
   13ca0:	adc	r3, r3, #0
   13ca4:	strd	r2, [r4, #16]
   13ca8:	mov	r0, r5
   13cac:	bl	119a8 <free@plt>
   13cb0:	pop	{r4, r5, r6, pc}
   13cb4:	andeq	sl, r2, r8, asr r1

00013cb8 <free_node_id@@Base>:
   13cb8:	push	{r4, r5, r6, lr}
   13cbc:	mov	r5, r0
   13cc0:	ldr	r1, [pc, #76]	; 13d14 <free_node_id@@Base+0x5c>
   13cc4:	ldrd	r2, [r1, #-8]
   13cc8:	adds	r2, r2, #1
   13ccc:	adc	r3, r3, #0
   13cd0:	strd	r2, [r1, #-8]
   13cd4:	ldr	r0, [r0, #4]
   13cd8:	cmp	r0, #0
   13cdc:	beq	13d08 <free_node_id@@Base+0x50>
   13ce0:	mov	r4, r1
   13ce4:	ldrd	r2, [r1]
   13ce8:	adds	r2, r2, #1
   13cec:	adc	r3, r3, #0
   13cf0:	strd	r2, [r1]
   13cf4:	bl	13958 <free_node@@Base>
   13cf8:	ldrd	r2, [r4, #8]
   13cfc:	adds	r2, r2, #1
   13d00:	adc	r3, r3, #0
   13d04:	strd	r2, [r4, #8]
   13d08:	mov	r0, r5
   13d0c:	bl	119a8 <free@plt>
   13d10:	pop	{r4, r5, r6, pc}
   13d14:	andeq	sl, r2, r8, ror r1

00013d18 <get_boolean_op_value@@Base>:
   13d18:	push	{r4, r5, r6, lr}
   13d1c:	ldr	r1, [pc, #588]	; 13f70 <get_boolean_op_value@@Base+0x258>
   13d20:	ldrd	r2, [r1]
   13d24:	adds	r2, r2, #1
   13d28:	adc	r3, r3, #0
   13d2c:	strd	r2, [r1]
   13d30:	ldr	r4, [r0, #4]
   13d34:	mov	r1, #2
   13d38:	mov	r0, r4
   13d3c:	bl	11ad4 <strnlen@plt>
   13d40:	cmp	r0, #2
   13d44:	beq	13db8 <get_boolean_op_value@@Base+0xa0>
   13d48:	ldr	r1, [pc, #544]	; 13f70 <get_boolean_op_value@@Base+0x258>
   13d4c:	ldrd	r2, [r1, #16]
   13d50:	adds	r2, r2, #1
   13d54:	adc	r3, r3, #0
   13d58:	strd	r2, [r1, #16]
   13d5c:	ldrb	r3, [r4]
   13d60:	cmp	r3, #60	; 0x3c
   13d64:	beq	13f20 <get_boolean_op_value@@Base+0x208>
   13d68:	cmp	r3, #62	; 0x3e
   13d6c:	beq	13f3c <get_boolean_op_value@@Base+0x224>
   13d70:	cmp	r3, #33	; 0x21
   13d74:	beq	13f68 <get_boolean_op_value@@Base+0x250>
   13d78:	ldr	r5, [pc, #496]	; 13f70 <get_boolean_op_value@@Base+0x258>
   13d7c:	ldrd	r2, [r5, #80]	; 0x50
   13d80:	adds	r2, r2, #1
   13d84:	adc	r3, r3, #0
   13d88:	strd	r2, [r5, #80]	; 0x50
   13d8c:	mov	r2, r4
   13d90:	ldr	r1, [pc, #476]	; 13f74 <get_boolean_op_value@@Base+0x25c>
   13d94:	ldr	r3, [pc, #476]	; 13f78 <get_boolean_op_value@@Base+0x260>
   13d98:	ldr	r0, [r3]
   13d9c:	bl	11a68 <fprintf@plt>
   13da0:	ldrd	r2, [r5, #104]	; 0x68
   13da4:	adds	r2, r2, #1
   13da8:	adc	r3, r3, #0
   13dac:	strd	r2, [r5, #104]	; 0x68
   13db0:	mov	r0, #1
   13db4:	bl	11a44 <exit@plt>
   13db8:	ldr	r1, [pc, #432]	; 13f70 <get_boolean_op_value@@Base+0x258>
   13dbc:	ldrd	r2, [r1, #8]
   13dc0:	adds	r2, r2, #1
   13dc4:	adc	r3, r3, #0
   13dc8:	strd	r2, [r1, #8]
   13dcc:	mov	r2, #2
   13dd0:	ldr	r1, [pc, #420]	; 13f7c <get_boolean_op_value@@Base+0x264>
   13dd4:	mov	r0, r4
   13dd8:	bl	11b10 <strncmp@plt>
   13ddc:	cmp	r0, #0
   13de0:	beq	13f58 <get_boolean_op_value@@Base+0x240>
   13de4:	ldr	r1, [pc, #388]	; 13f70 <get_boolean_op_value@@Base+0x258>
   13de8:	ldrd	r2, [r1, #24]
   13dec:	adds	r2, r2, #1
   13df0:	adc	r3, r3, #0
   13df4:	strd	r2, [r1, #24]
   13df8:	mov	r2, #2
   13dfc:	ldr	r1, [pc, #380]	; 13f80 <get_boolean_op_value@@Base+0x268>
   13e00:	mov	r0, r4
   13e04:	bl	11b10 <strncmp@plt>
   13e08:	cmp	r0, #0
   13e0c:	beq	13f60 <get_boolean_op_value@@Base+0x248>
   13e10:	ldr	r1, [pc, #344]	; 13f70 <get_boolean_op_value@@Base+0x258>
   13e14:	ldrd	r2, [r1, #32]
   13e18:	adds	r2, r2, #1
   13e1c:	adc	r3, r3, #0
   13e20:	strd	r2, [r1, #32]
   13e24:	mov	r2, #2
   13e28:	ldr	r1, [pc, #340]	; 13f84 <get_boolean_op_value@@Base+0x26c>
   13e2c:	mov	r0, r4
   13e30:	bl	11b10 <strncmp@plt>
   13e34:	cmp	r0, #0
   13e38:	bne	13e44 <get_boolean_op_value@@Base+0x12c>
   13e3c:	mov	r0, #2
   13e40:	pop	{r4, r5, r6, pc}
   13e44:	ldr	r1, [pc, #292]	; 13f70 <get_boolean_op_value@@Base+0x258>
   13e48:	ldrd	r2, [r1, #40]	; 0x28
   13e4c:	adds	r2, r2, #1
   13e50:	adc	r3, r3, #0
   13e54:	strd	r2, [r1, #40]	; 0x28
   13e58:	mov	r2, #2
   13e5c:	ldr	r1, [pc, #292]	; 13f88 <get_boolean_op_value@@Base+0x270>
   13e60:	mov	r0, r4
   13e64:	bl	11b10 <strncmp@plt>
   13e68:	cmp	r0, #0
   13e6c:	bne	13e78 <get_boolean_op_value@@Base+0x160>
   13e70:	mov	r0, #3
   13e74:	pop	{r4, r5, r6, pc}
   13e78:	ldr	r1, [pc, #240]	; 13f70 <get_boolean_op_value@@Base+0x258>
   13e7c:	ldrd	r2, [r1, #48]	; 0x30
   13e80:	adds	r2, r2, #1
   13e84:	adc	r3, r3, #0
   13e88:	strd	r2, [r1, #48]	; 0x30
   13e8c:	mov	r2, #2
   13e90:	ldr	r1, [pc, #244]	; 13f8c <get_boolean_op_value@@Base+0x274>
   13e94:	mov	r0, r4
   13e98:	bl	11b10 <strncmp@plt>
   13e9c:	cmp	r0, #0
   13ea0:	bne	13eac <get_boolean_op_value@@Base+0x194>
   13ea4:	mov	r0, #4
   13ea8:	pop	{r4, r5, r6, pc}
   13eac:	ldr	r1, [pc, #188]	; 13f70 <get_boolean_op_value@@Base+0x258>
   13eb0:	ldrd	r2, [r1, #56]	; 0x38
   13eb4:	adds	r2, r2, #1
   13eb8:	adc	r3, r3, #0
   13ebc:	strd	r2, [r1, #56]	; 0x38
   13ec0:	mov	r2, #2
   13ec4:	ldr	r1, [pc, #196]	; 13f90 <get_boolean_op_value@@Base+0x278>
   13ec8:	mov	r0, r4
   13ecc:	bl	11b10 <strncmp@plt>
   13ed0:	cmp	r0, #0
   13ed4:	bne	13ee0 <get_boolean_op_value@@Base+0x1c8>
   13ed8:	mov	r0, #5
   13edc:	pop	{r4, r5, r6, pc}
   13ee0:	ldr	r5, [pc, #136]	; 13f70 <get_boolean_op_value@@Base+0x258>
   13ee4:	ldrd	r2, [r5, #64]	; 0x40
   13ee8:	adds	r2, r2, #1
   13eec:	adc	r3, r3, #0
   13ef0:	strd	r2, [r5, #64]	; 0x40
   13ef4:	mov	r2, r4
   13ef8:	ldr	r1, [pc, #116]	; 13f74 <get_boolean_op_value@@Base+0x25c>
   13efc:	ldr	r3, [pc, #116]	; 13f78 <get_boolean_op_value@@Base+0x260>
   13f00:	ldr	r0, [r3]
   13f04:	bl	11a68 <fprintf@plt>
   13f08:	ldrd	r2, [r5, #72]	; 0x48
   13f0c:	adds	r2, r2, #1
   13f10:	adc	r3, r3, #0
   13f14:	strd	r2, [r5, #72]	; 0x48
   13f18:	mov	r0, #1
   13f1c:	bl	11a44 <exit@plt>
   13f20:	ldr	r1, [pc, #72]	; 13f70 <get_boolean_op_value@@Base+0x258>
   13f24:	ldrd	r2, [r1, #88]	; 0x58
   13f28:	adds	r2, r2, #1
   13f2c:	adc	r3, r3, #0
   13f30:	strd	r2, [r1, #88]	; 0x58
   13f34:	mov	r0, #6
   13f38:	pop	{r4, r5, r6, pc}
   13f3c:	ldr	r1, [pc, #44]	; 13f70 <get_boolean_op_value@@Base+0x258>
   13f40:	ldrd	r2, [r1, #96]	; 0x60
   13f44:	adds	r2, r2, #1
   13f48:	adc	r3, r3, #0
   13f4c:	strd	r2, [r1, #96]	; 0x60
   13f50:	mov	r0, #7
   13f54:	pop	{r4, r5, r6, pc}
   13f58:	mov	r0, #0
   13f5c:	pop	{r4, r5, r6, pc}
   13f60:	mov	r0, #1
   13f64:	pop	{r4, r5, r6, pc}
   13f68:	mov	r0, #8
   13f6c:	pop	{r4, r5, r6, pc}
   13f70:	andeq	sl, r2, r8, lsl #3
   13f74:	andeq	r7, r1, r0, lsr ip
   13f78:			; <UNDEFINED> instruction: 0x00029ab8
   13f7c:	andeq	r7, r1, r8, lsl ip
   13f80:	andeq	r7, r1, ip, lsl ip
   13f84:	andeq	r7, r1, r0, lsr #24
   13f88:	andeq	r7, r1, r4, lsr #24
   13f8c:	andeq	r7, r1, r8, lsr #24
   13f90:	andeq	r7, r1, ip, lsr #24
   13f94:	push	{r4, lr}
   13f98:	ldr	r0, [pc, #4]	; 13fa4 <get_boolean_op_value@@Base+0x28c>
   13f9c:	bl	17640 <__gcov_sort_n_vals@@Base+0x458>
   13fa0:	pop	{r4, pc}
   13fa4:	andeq	r9, r2, r8, lsl #11

00013fa8 <init_grammar@@Base>:
   13fa8:	ldr	ip, [pc, #20]	; 13fc4 <init_grammar@@Base+0x1c>
   13fac:	ldrd	r2, [ip]
   13fb0:	adds	r2, r2, #1
   13fb4:	adc	r3, r3, #0
   13fb8:	strd	r2, [ip]
   13fbc:	str	r1, [r0]
   13fc0:	bx	lr
   13fc4:	strdeq	sl, [r2], -r8

00013fc8 <destroy_grammar@@Base>:
   13fc8:	ldr	r1, [pc, #16]	; 13fe0 <destroy_grammar@@Base+0x18>
   13fcc:	ldrd	r2, [r1, #8]
   13fd0:	adds	r2, r2, #1
   13fd4:	adc	r3, r3, #0
   13fd8:	strd	r2, [r1, #8]
   13fdc:	bx	lr
   13fe0:	strdeq	sl, [r2], -r8

00013fe4 <read_return_expression@@Base>:
   13fe4:	push	{r4, r5, r6, r7, r8, lr}
   13fe8:	mov	r5, r0
   13fec:	ldr	r4, [pc, #252]	; 140f0 <read_return_expression@@Base+0x10c>
   13ff0:	ldrd	r2, [r4, #16]
   13ff4:	adds	r2, r2, #1
   13ff8:	adc	r3, r3, #0
   13ffc:	strd	r2, [r4, #16]
   14000:	ldr	r0, [r0]
   14004:	bl	126a8 <next@@Base>
   14008:	ldrd	r2, [r4, #24]
   1400c:	adds	r2, r2, #1
   14010:	adc	r3, r3, #0
   14014:	strd	r2, [r4, #24]
   14018:	ldr	r3, [r0]
   1401c:	cmp	r3, #1
   14020:	movne	r6, #0
   14024:	bne	140e8 <read_return_expression@@Base+0x104>
   14028:	mov	r6, r0
   1402c:	ldrd	r2, [r4, #32]
   14030:	adds	r2, r2, #1
   14034:	adc	r3, r3, #0
   14038:	strd	r2, [r4, #32]
   1403c:	mov	r0, #12
   14040:	bl	119fc <malloc@plt>
   14044:	mov	r7, r0
   14048:	ldr	r1, [r6, #4]
   1404c:	bl	13740 <init_node_int@@Base>
   14050:	ldrd	r2, [r4, #40]	; 0x28
   14054:	adds	r2, r2, #1
   14058:	adc	r3, r3, #0
   1405c:	strd	r2, [r4, #40]	; 0x28
   14060:	mov	r0, r6
   14064:	bl	122ec <free_token_int_value@@Base>
   14068:	ldrd	r2, [r4, #48]	; 0x30
   1406c:	adds	r2, r2, #1
   14070:	adc	r3, r3, #0
   14074:	strd	r2, [r4, #48]	; 0x30
   14078:	mov	r0, #12
   1407c:	bl	119fc <malloc@plt>
   14080:	mov	r6, r0
   14084:	mov	r1, r7
   14088:	bl	137d0 <init_node_return@@Base>
   1408c:	ldrd	r2, [r4, #56]	; 0x38
   14090:	adds	r2, r2, #1
   14094:	adc	r3, r3, #0
   14098:	strd	r2, [r4, #56]	; 0x38
   1409c:	ldr	r0, [r5]
   140a0:	bl	126a8 <next@@Base>
   140a4:	ldrd	r2, [r4, #64]	; 0x40
   140a8:	adds	r2, r2, #1
   140ac:	adc	r3, r3, #0
   140b0:	strd	r2, [r4, #64]	; 0x40
   140b4:	ldr	r3, [r0]
   140b8:	cmp	r3, #8
   140bc:	movne	r6, #0
   140c0:	bne	140e8 <read_return_expression@@Base+0x104>
   140c4:	ldrd	r2, [r4, #72]	; 0x48
   140c8:	adds	r2, r2, #1
   140cc:	adc	r3, r3, #0
   140d0:	strd	r2, [r4, #72]	; 0x48
   140d4:	bl	123e8 <free_token_semicolon@@Base>
   140d8:	ldrd	r2, [r4, #80]	; 0x50
   140dc:	adds	r2, r2, #1
   140e0:	adc	r3, r3, #0
   140e4:	strd	r2, [r4, #80]	; 0x50
   140e8:	mov	r0, r6
   140ec:	pop	{r4, r5, r6, r7, r8, pc}
   140f0:	strdeq	sl, [r2], -r8

000140f4 <read_boolean_unary_expression@@Base>:
   140f4:	push	{r4, r5, r6, r7, r8, lr}
   140f8:	mov	r7, r0
   140fc:	ldr	r1, [pc, #364]	; 14270 <read_boolean_unary_expression@@Base+0x17c>
   14100:	ldrd	r2, [r1, #88]	; 0x58
   14104:	adds	r2, r2, #1
   14108:	adc	r3, r3, #0
   1410c:	strd	r2, [r1, #88]	; 0x58
   14110:	mov	r0, #20
   14114:	bl	119fc <malloc@plt>
   14118:	mov	r6, r0
   1411c:	ldr	r0, [r7]
   14120:	bl	126a8 <next@@Base>
   14124:	ldr	r3, [r0]
   14128:	cmp	r3, #12
   1412c:	bne	1420c <read_boolean_unary_expression@@Base+0x118>
   14130:	mov	r5, r0
   14134:	ldr	r4, [pc, #308]	; 14270 <read_boolean_unary_expression@@Base+0x17c>
   14138:	ldrd	r2, [r4, #104]	; 0x68
   1413c:	adds	r2, r2, #1
   14140:	adc	r3, r3, #0
   14144:	strd	r2, [r4, #104]	; 0x68
   14148:	bl	13d18 <get_boolean_op_value@@Base>
   1414c:	mov	r8, r0
   14150:	ldrd	r2, [r4, #120]	; 0x78
   14154:	adds	r2, r2, #1
   14158:	adc	r3, r3, #0
   1415c:	strd	r2, [r4, #120]	; 0x78
   14160:	mov	r0, r5
   14164:	bl	12478 <free_token_boolean_op@@Base>
   14168:	ldrd	r2, [r4, #128]	; 0x80
   1416c:	adds	r2, r2, #1
   14170:	adc	r3, r3, #0
   14174:	strd	r2, [r4, #128]	; 0x80
   14178:	ldr	r0, [r7]
   1417c:	bl	126a8 <next@@Base>
   14180:	mov	r5, r0
   14184:	ldr	r3, [r0]
   14188:	cmp	r3, #1
   1418c:	bne	14240 <read_boolean_unary_expression@@Base+0x14c>
   14190:	ldr	r4, [pc, #216]	; 14270 <read_boolean_unary_expression@@Base+0x17c>
   14194:	ldrd	r2, [r4, #144]	; 0x90
   14198:	adds	r2, r2, #1
   1419c:	adc	r3, r3, #0
   141a0:	strd	r2, [r4, #144]	; 0x90
   141a4:	mov	r0, #12
   141a8:	bl	119fc <malloc@plt>
   141ac:	mov	r7, r0
   141b0:	ldr	r1, [r5, #4]
   141b4:	bl	13740 <init_node_int@@Base>
   141b8:	ldrd	r2, [r4, #160]	; 0xa0
   141bc:	adds	r2, r2, #1
   141c0:	adc	r3, r3, #0
   141c4:	strd	r2, [r4, #160]	; 0xa0
   141c8:	mov	r0, r5
   141cc:	bl	122ec <free_token_int_value@@Base>
   141d0:	ldrd	r2, [r4, #168]	; 0xa8
   141d4:	adds	r2, r2, #1
   141d8:	adc	r3, r3, #0
   141dc:	strd	r2, [r4, #168]	; 0xa8
   141e0:	mov	r3, #0
   141e4:	mov	r2, r7
   141e8:	mov	r1, r8
   141ec:	mov	r0, r6
   141f0:	bl	13868 <init_node_boolean_operator@@Base>
   141f4:	ldrd	r2, [r4, #176]	; 0xb0
   141f8:	adds	r2, r2, #1
   141fc:	adc	r3, r3, #0
   14200:	strd	r2, [r4, #176]	; 0xb0
   14204:	mov	r0, r6
   14208:	pop	{r4, r5, r6, r7, r8, pc}
   1420c:	ldr	r4, [pc, #92]	; 14270 <read_boolean_unary_expression@@Base+0x17c>
   14210:	ldrd	r2, [r4, #96]	; 0x60
   14214:	adds	r2, r2, #1
   14218:	adc	r3, r3, #0
   1421c:	strd	r2, [r4, #96]	; 0x60
   14220:	mov	r0, r6
   14224:	bl	138c4 <free_node_boolean_operator@@Base>
   14228:	ldrd	r2, [r4, #112]	; 0x70
   1422c:	adds	r2, r2, #1
   14230:	adc	r3, r3, #0
   14234:	strd	r2, [r4, #112]	; 0x70
   14238:	mov	r6, #0
   1423c:	b	14204 <read_boolean_unary_expression@@Base+0x110>
   14240:	ldrd	r2, [r4, #136]	; 0x88
   14244:	adds	r2, r2, #1
   14248:	adc	r3, r3, #0
   1424c:	strd	r2, [r4, #136]	; 0x88
   14250:	mov	r0, r6
   14254:	bl	138c4 <free_node_boolean_operator@@Base>
   14258:	ldrd	r2, [r4, #152]	; 0x98
   1425c:	adds	r2, r2, #1
   14260:	adc	r3, r3, #0
   14264:	strd	r2, [r4, #152]	; 0x98
   14268:	mov	r6, #0
   1426c:	b	14204 <read_boolean_unary_expression@@Base+0x110>
   14270:	strdeq	sl, [r2], -r8

00014274 <read_boolean_binary_expression@@Base>:
   14274:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14278:	mov	r5, r0
   1427c:	ldr	r1, [pc, #612]	; 144e8 <read_boolean_binary_expression@@Base+0x274>
   14280:	ldrd	r2, [r1, #184]	; 0xb8
   14284:	adds	r2, r2, #1
   14288:	adc	r3, r3, #0
   1428c:	strd	r2, [r1, #184]	; 0xb8
   14290:	ldr	r0, [r0]
   14294:	bl	126a8 <next@@Base>
   14298:	mov	r6, r0
   1429c:	ldr	r1, [r0]
   142a0:	cmp	r1, #1
   142a4:	beq	1431c <read_boolean_binary_expression@@Base+0xa8>
   142a8:	ldr	r0, [pc, #568]	; 144e8 <read_boolean_binary_expression@@Base+0x274>
   142ac:	ldrd	r2, [r0, #192]	; 0xc0
   142b0:	adds	r2, r2, #1
   142b4:	adc	r3, r3, #0
   142b8:	strd	r2, [r0, #192]	; 0xc0
   142bc:	cmp	r1, #12
   142c0:	movne	r5, #0
   142c4:	bne	14314 <read_boolean_binary_expression@@Base+0xa0>
   142c8:	mov	r4, r0
   142cc:	ldrd	r2, [r0, #208]	; 0xd0
   142d0:	adds	r2, r2, #1
   142d4:	adc	r3, r3, #0
   142d8:	strd	r2, [r0, #208]	; 0xd0
   142dc:	mov	r1, r6
   142e0:	ldr	r0, [r5]
   142e4:	bl	12580 <push_back@@Base>
   142e8:	ldrd	r2, [r4, #216]	; 0xd8
   142ec:	adds	r2, r2, #1
   142f0:	adc	r3, r3, #0
   142f4:	strd	r2, [r4, #216]	; 0xd8
   142f8:	mov	r0, r5
   142fc:	bl	140f4 <read_boolean_unary_expression@@Base>
   14300:	mov	r5, r0
   14304:	ldrd	r2, [r4, #224]	; 0xe0
   14308:	adds	r2, r2, #1
   1430c:	adc	r3, r3, #0
   14310:	strd	r2, [r4, #224]	; 0xe0
   14314:	mov	r0, r5
   14318:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1431c:	ldr	r4, [pc, #452]	; 144e8 <read_boolean_binary_expression@@Base+0x274>
   14320:	ldrd	r2, [r4, #200]	; 0xc8
   14324:	adds	r2, r2, #1
   14328:	adc	r3, r3, #0
   1432c:	strd	r2, [r4, #200]	; 0xc8
   14330:	mov	r0, #12
   14334:	bl	119fc <malloc@plt>
   14338:	mov	r7, r0
   1433c:	ldr	r1, [r6, #4]
   14340:	bl	13740 <init_node_int@@Base>
   14344:	ldrd	r2, [r4, #232]	; 0xe8
   14348:	adds	r2, r2, #1
   1434c:	adc	r3, r3, #0
   14350:	strd	r2, [r4, #232]	; 0xe8
   14354:	mov	r0, r6
   14358:	bl	122ec <free_token_int_value@@Base>
   1435c:	ldrd	r2, [r4, #240]	; 0xf0
   14360:	adds	r2, r2, #1
   14364:	adc	r3, r3, #0
   14368:	strd	r2, [r4, #240]	; 0xf0
   1436c:	ldr	r0, [r5]
   14370:	bl	126a8 <next@@Base>
   14374:	mov	r8, r0
   14378:	ldr	r3, [r0]
   1437c:	cmp	r3, #12
   14380:	bne	14478 <read_boolean_binary_expression@@Base+0x204>
   14384:	ldr	r4, [pc, #348]	; 144e8 <read_boolean_binary_expression@@Base+0x274>
   14388:	add	r1, r4, #256	; 0x100
   1438c:	ldrd	r2, [r1]
   14390:	adds	r2, r2, #1
   14394:	adc	r3, r3, #0
   14398:	strd	r2, [r1]
   1439c:	bl	13d18 <get_boolean_op_value@@Base>
   143a0:	mov	r6, r0
   143a4:	add	r1, r4, #272	; 0x110
   143a8:	ldrd	r2, [r1]
   143ac:	adds	r2, r2, #1
   143b0:	adc	r3, r3, #0
   143b4:	strd	r2, [r1]
   143b8:	mov	r0, r8
   143bc:	bl	12478 <free_token_boolean_op@@Base>
   143c0:	add	r4, r4, #288	; 0x120
   143c4:	ldrd	r2, [r4, #-8]
   143c8:	adds	r2, r2, #1
   143cc:	adc	r3, r3, #0
   143d0:	strd	r2, [r4, #-8]
   143d4:	ldr	r0, [r5]
   143d8:	bl	126a8 <next@@Base>
   143dc:	mov	r8, r0
   143e0:	ldr	r3, [r0]
   143e4:	cmp	r3, #1
   143e8:	bne	144ac <read_boolean_binary_expression@@Base+0x238>
   143ec:	ldr	r4, [pc, #244]	; 144e8 <read_boolean_binary_expression@@Base+0x274>
   143f0:	add	r1, r4, #304	; 0x130
   143f4:	ldrd	r2, [r1, #-8]
   143f8:	adds	r2, r2, #1
   143fc:	adc	r3, r3, #0
   14400:	strd	r2, [r1, #-8]
   14404:	mov	r0, #12
   14408:	bl	119fc <malloc@plt>
   1440c:	mov	r9, r0
   14410:	ldr	r1, [r8, #4]
   14414:	bl	13740 <init_node_int@@Base>
   14418:	add	r5, r4, #320	; 0x140
   1441c:	ldrd	r2, [r5, #-8]
   14420:	adds	r2, r2, #1
   14424:	adc	r3, r3, #0
   14428:	strd	r2, [r5, #-8]
   1442c:	mov	r0, r8
   14430:	bl	122ec <free_token_int_value@@Base>
   14434:	ldrd	r2, [r5]
   14438:	adds	r2, r2, #1
   1443c:	adc	r3, r3, #0
   14440:	strd	r2, [r5]
   14444:	mov	r0, #20
   14448:	bl	119fc <malloc@plt>
   1444c:	mov	r5, r0
   14450:	mov	r3, r9
   14454:	mov	r2, r7
   14458:	mov	r1, r6
   1445c:	bl	13868 <init_node_boolean_operator@@Base>
   14460:	add	r4, r4, #336	; 0x150
   14464:	ldrd	r2, [r4, #-8]
   14468:	adds	r2, r2, #1
   1446c:	adc	r3, r3, #0
   14470:	strd	r2, [r4, #-8]
   14474:	b	14314 <read_boolean_binary_expression@@Base+0xa0>
   14478:	ldrd	r2, [r4, #248]	; 0xf8
   1447c:	adds	r2, r2, #1
   14480:	adc	r3, r3, #0
   14484:	strd	r2, [r4, #248]	; 0xf8
   14488:	mov	r0, r7
   1448c:	bl	13958 <free_node@@Base>
   14490:	add	r4, r4, #272	; 0x110
   14494:	ldrd	r2, [r4, #-8]
   14498:	adds	r2, r2, #1
   1449c:	adc	r3, r3, #0
   144a0:	strd	r2, [r4, #-8]
   144a4:	mov	r5, #0
   144a8:	b	14314 <read_boolean_binary_expression@@Base+0xa0>
   144ac:	sub	r4, r4, #288	; 0x120
   144b0:	add	r1, r4, #288	; 0x120
   144b4:	ldrd	r2, [r1]
   144b8:	adds	r2, r2, #1
   144bc:	adc	r3, r3, #0
   144c0:	strd	r2, [r1]
   144c4:	mov	r0, r7
   144c8:	bl	13958 <free_node@@Base>
   144cc:	add	r4, r4, #304	; 0x130
   144d0:	ldrd	r2, [r4]
   144d4:	adds	r2, r2, #1
   144d8:	adc	r3, r3, #0
   144dc:	strd	r2, [r4]
   144e0:	mov	r5, #0
   144e4:	b	14314 <read_boolean_binary_expression@@Base+0xa0>
   144e8:	strdeq	sl, [r2], -r8

000144ec <read_single_boolean_expression@@Base>:
   144ec:	push	{r4, r5, r6, r7, r8, lr}
   144f0:	cmp	r1, #0
   144f4:	beq	14574 <read_single_boolean_expression@@Base+0x88>
   144f8:	mov	r5, r2
   144fc:	mov	r7, r3
   14500:	ldr	r3, [r2]
   14504:	cmp	r3, #0
   14508:	beq	145a4 <read_single_boolean_expression@@Base+0xb8>
   1450c:	ldr	r4, [pc, #212]	; 145e8 <read_single_boolean_expression@@Base+0xfc>
   14510:	ldrd	r2, [r4, #16]
   14514:	adds	r2, r2, #1
   14518:	adc	r3, r3, #0
   1451c:	strd	r2, [r4, #16]
   14520:	bl	14274 <read_boolean_binary_expression@@Base>
   14524:	mov	r8, r0
   14528:	ldrd	r2, [r4, #32]
   1452c:	adds	r2, r2, #1
   14530:	adc	r3, r3, #0
   14534:	strd	r2, [r4, #32]
   14538:	mov	r0, #20
   1453c:	bl	119fc <malloc@plt>
   14540:	mov	r6, r0
   14544:	mov	r3, r8
   14548:	mov	r2, #0
   1454c:	mov	r1, r7
   14550:	bl	13868 <init_node_boolean_operator@@Base>
   14554:	mov	r3, #0
   14558:	str	r3, [r5]
   1455c:	ldrd	r2, [r4, #40]	; 0x28
   14560:	adds	r2, r2, #1
   14564:	adc	r3, r3, #0
   14568:	strd	r2, [r4, #40]	; 0x28
   1456c:	mov	r0, r6
   14570:	pop	{r4, r5, r6, r7, r8, pc}
   14574:	ldr	r4, [pc, #108]	; 145e8 <read_single_boolean_expression@@Base+0xfc>
   14578:	ldrd	r2, [r4]
   1457c:	adds	r2, r2, #1
   14580:	adc	r3, r3, #0
   14584:	strd	r2, [r4]
   14588:	bl	14274 <read_boolean_binary_expression@@Base>
   1458c:	mov	r6, r0
   14590:	ldrd	r2, [r4, #8]
   14594:	adds	r2, r2, #1
   14598:	adc	r3, r3, #0
   1459c:	strd	r2, [r4, #8]
   145a0:	b	1456c <read_single_boolean_expression@@Base+0x80>
   145a4:	ldr	r4, [pc, #60]	; 145e8 <read_single_boolean_expression@@Base+0xfc>
   145a8:	ldrd	r2, [r4, #24]
   145ac:	adds	r2, r2, #1
   145b0:	adc	r3, r3, #0
   145b4:	strd	r2, [r4, #24]
   145b8:	mov	r3, #0
   145bc:	ldr	r2, [r3, #4]
   145c0:	ldr	r1, [pc, #36]	; 145ec <read_single_boolean_expression@@Base+0x100>
   145c4:	ldr	r3, [pc, #36]	; 145f0 <read_single_boolean_expression@@Base+0x104>
   145c8:	ldr	r0, [r3]
   145cc:	bl	11a68 <fprintf@plt>
   145d0:	ldrd	r2, [r4, #48]	; 0x30
   145d4:	adds	r2, r2, #1
   145d8:	adc	r3, r3, #0
   145dc:	strd	r2, [r4, #48]	; 0x30
   145e0:	mov	r0, #1
   145e4:	bl	11a44 <exit@plt>
   145e8:	andeq	sl, r2, r8, asr #6
   145ec:			; <UNDEFINED> instruction: 0x00017cb8
   145f0:			; <UNDEFINED> instruction: 0x00029ab8

000145f4 <read_boolean_expression@@Base>:
   145f4:	push	{r4, r5, r6, r7, r8, lr}
   145f8:	sub	sp, sp, #8
   145fc:	mov	r5, r0
   14600:	ldr	r4, [pc, #428]	; 147b4 <read_boolean_expression@@Base+0x1c0>
   14604:	ldrd	r2, [r4, #-8]
   14608:	adds	r2, r2, #1
   1460c:	adc	r3, r3, #0
   14610:	strd	r2, [r4, #-8]
   14614:	mov	r3, #0
   14618:	str	r3, [sp, #4]
   1461c:	ldr	r0, [r0]
   14620:	bl	126a8 <next@@Base>
   14624:	ldrd	r2, [r4]
   14628:	adds	r2, r2, #1
   1462c:	adc	r3, r3, #0
   14630:	strd	r2, [r4]
   14634:	ldr	r1, [r0]
   14638:	cmp	r1, #4
   1463c:	beq	1477c <read_boolean_expression@@Base+0x188>
   14640:	mov	r6, #0
   14644:	mov	r8, #1
   14648:	b	146b4 <read_boolean_expression@@Base+0xc0>
   1464c:	ldrd	r2, [r4, #8]
   14650:	adds	r2, r2, #1
   14654:	adc	r3, r3, #0
   14658:	strd	r2, [r4, #8]
   1465c:	mov	r1, r0
   14660:	ldr	r0, [r5]
   14664:	bl	12580 <push_back@@Base>
   14668:	ldrd	r2, [r4, #32]
   1466c:	adds	r2, r2, #1
   14670:	adc	r3, r3, #0
   14674:	strd	r2, [r4, #32]
   14678:	mov	r3, r7
   1467c:	add	r2, sp, #4
   14680:	mov	r1, r6
   14684:	mov	r0, r5
   14688:	bl	144ec <read_single_boolean_expression@@Base>
   1468c:	mov	r6, r0
   14690:	ldrd	r2, [r4, #64]	; 0x40
   14694:	adds	r2, r2, #1
   14698:	adc	r3, r3, #0
   1469c:	strd	r2, [r4, #64]	; 0x40
   146a0:	ldr	r0, [r5]
   146a4:	bl	126a8 <next@@Base>
   146a8:	ldr	r1, [r0]
   146ac:	cmp	r1, #4
   146b0:	beq	14780 <read_boolean_expression@@Base+0x18c>
   146b4:	ldrd	r2, [r4, #72]	; 0x48
   146b8:	adds	r2, r2, #1
   146bc:	adc	r3, r3, #0
   146c0:	strd	r2, [r4, #72]	; 0x48
   146c4:	cmp	r1, #3
   146c8:	beq	14740 <read_boolean_expression@@Base+0x14c>
   146cc:	cmp	r1, #12
   146d0:	beq	14710 <read_boolean_expression@@Base+0x11c>
   146d4:	cmp	r1, #1
   146d8:	beq	1464c <read_boolean_expression@@Base+0x58>
   146dc:	ldr	r3, [pc, #212]	; 147b8 <read_boolean_expression@@Base+0x1c4>
   146e0:	ldr	r3, [r3]
   146e4:	mov	r2, #33	; 0x21
   146e8:	mov	r1, #1
   146ec:	ldr	r0, [pc, #200]	; 147bc <read_boolean_expression@@Base+0x1c8>
   146f0:	bl	119cc <fwrite@plt>
   146f4:	ldr	r1, [pc, #184]	; 147b4 <read_boolean_expression@@Base+0x1c0>
   146f8:	ldrd	r2, [r1, #56]	; 0x38
   146fc:	adds	r2, r2, #1
   14700:	adc	r3, r3, #0
   14704:	strd	r2, [r1, #56]	; 0x38
   14708:	mov	r0, #1
   1470c:	bl	11a44 <exit@plt>
   14710:	ldrd	r2, [r4, #24]
   14714:	adds	r2, r2, #1
   14718:	adc	r3, r3, #0
   1471c:	strd	r2, [r4, #24]
   14720:	bl	13d18 <get_boolean_op_value@@Base>
   14724:	mov	r7, r0
   14728:	str	r8, [sp, #4]
   1472c:	ldrd	r2, [r4, #40]	; 0x28
   14730:	adds	r2, r2, #1
   14734:	adc	r3, r3, #0
   14738:	strd	r2, [r4, #40]	; 0x28
   1473c:	b	146a0 <read_boolean_expression@@Base+0xac>
   14740:	ldrd	r2, [r4, #16]
   14744:	adds	r2, r2, #1
   14748:	adc	r3, r3, #0
   1474c:	strd	r2, [r4, #16]
   14750:	mov	r3, r7
   14754:	add	r2, sp, #4
   14758:	mov	r1, r6
   1475c:	mov	r0, r5
   14760:	bl	144ec <read_single_boolean_expression@@Base>
   14764:	mov	r6, r0
   14768:	ldrd	r2, [r4, #48]	; 0x30
   1476c:	adds	r2, r2, #1
   14770:	adc	r3, r3, #0
   14774:	strd	r2, [r4, #48]	; 0x30
   14778:	b	146a0 <read_boolean_expression@@Base+0xac>
   1477c:	mov	r6, #0
   14780:	ldr	r4, [pc, #44]	; 147b4 <read_boolean_expression@@Base+0x1c0>
   14784:	ldrd	r2, [r4, #80]	; 0x50
   14788:	adds	r2, r2, #1
   1478c:	adc	r3, r3, #0
   14790:	strd	r2, [r4, #80]	; 0x50
   14794:	bl	12358 <free_token_cpar@@Base>
   14798:	ldrd	r2, [r4, #88]	; 0x58
   1479c:	adds	r2, r2, #1
   147a0:	adc	r3, r3, #0
   147a4:	strd	r2, [r4, #88]	; 0x58
   147a8:	mov	r0, r6
   147ac:	add	sp, sp, #8
   147b0:	pop	{r4, r5, r6, r7, r8, pc}
   147b4:	andeq	sl, r2, r8, lsl #7
   147b8:			; <UNDEFINED> instruction: 0x00029ab8
   147bc:	strdeq	r7, [r1], -r0

000147c0 <read_if_statement@@Base>:
   147c0:	push	{r4, r5, r6, r7, r8, lr}
   147c4:	mov	r5, r0
   147c8:	ldr	r4, [pc, #340]	; 14924 <read_if_statement@@Base+0x164>
   147cc:	ldrd	r2, [r4]
   147d0:	adds	r2, r2, #1
   147d4:	adc	r3, r3, #0
   147d8:	strd	r2, [r4]
   147dc:	ldr	r0, [r0]
   147e0:	bl	126a8 <next@@Base>
   147e4:	ldrd	r2, [r4, #8]
   147e8:	adds	r2, r2, #1
   147ec:	adc	r3, r3, #0
   147f0:	strd	r2, [r4, #8]
   147f4:	ldr	r3, [r0]
   147f8:	cmp	r3, #3
   147fc:	movne	r4, #0
   14800:	bne	148d8 <read_if_statement@@Base+0x118>
   14804:	ldrd	r2, [r4, #16]
   14808:	adds	r2, r2, #1
   1480c:	adc	r3, r3, #0
   14810:	strd	r2, [r4, #16]
   14814:	bl	12334 <free_token_opar@@Base>
   14818:	ldrd	r2, [r4, #24]
   1481c:	adds	r2, r2, #1
   14820:	adc	r3, r3, #0
   14824:	strd	r2, [r4, #24]
   14828:	mov	r0, r5
   1482c:	bl	145f4 <read_boolean_expression@@Base>
   14830:	mov	r6, r0
   14834:	ldrd	r2, [r4, #32]
   14838:	adds	r2, r2, #1
   1483c:	adc	r3, r3, #0
   14840:	strd	r2, [r4, #32]
   14844:	mov	r0, r5
   14848:	bl	14928 <read_body@@Base>
   1484c:	mov	r7, r0
   14850:	ldrd	r2, [r4, #40]	; 0x28
   14854:	adds	r2, r2, #1
   14858:	adc	r3, r3, #0
   1485c:	strd	r2, [r4, #40]	; 0x28
   14860:	ldr	r0, [r5]
   14864:	bl	126a8 <next@@Base>
   14868:	ldr	r3, [r0]
   1486c:	cmp	r3, #11
   14870:	beq	148e0 <read_if_statement@@Base+0x120>
   14874:	ldr	r4, [pc, #168]	; 14924 <read_if_statement@@Base+0x164>
   14878:	ldrd	r2, [r4, #56]	; 0x38
   1487c:	adds	r2, r2, #1
   14880:	adc	r3, r3, #0
   14884:	strd	r2, [r4, #56]	; 0x38
   14888:	mov	r1, r0
   1488c:	ldr	r0, [r5]
   14890:	bl	12580 <push_back@@Base>
   14894:	ldrd	r2, [r4, #80]	; 0x50
   14898:	adds	r2, r2, #1
   1489c:	adc	r3, r3, #0
   148a0:	strd	r2, [r4, #80]	; 0x50
   148a4:	mov	r5, #0
   148a8:	mov	r0, #20
   148ac:	bl	119fc <malloc@plt>
   148b0:	mov	r4, r0
   148b4:	mov	r3, r5
   148b8:	mov	r2, r7
   148bc:	mov	r1, r6
   148c0:	bl	13814 <init_node_if@@Base>
   148c4:	ldr	r1, [pc, #88]	; 14924 <read_if_statement@@Base+0x164>
   148c8:	ldrd	r2, [r1, #88]	; 0x58
   148cc:	adds	r2, r2, #1
   148d0:	adc	r3, r3, #0
   148d4:	strd	r2, [r1, #88]	; 0x58
   148d8:	mov	r0, r4
   148dc:	pop	{r4, r5, r6, r7, r8, pc}
   148e0:	ldrd	r2, [r4, #48]	; 0x30
   148e4:	adds	r2, r2, #1
   148e8:	adc	r3, r3, #0
   148ec:	strd	r2, [r4, #48]	; 0x30
   148f0:	bl	12454 <free_token_else@@Base>
   148f4:	ldrd	r2, [r4, #64]	; 0x40
   148f8:	adds	r2, r2, #1
   148fc:	adc	r3, r3, #0
   14900:	strd	r2, [r4, #64]	; 0x40
   14904:	mov	r0, r5
   14908:	bl	14928 <read_body@@Base>
   1490c:	mov	r5, r0
   14910:	ldrd	r2, [r4, #72]	; 0x48
   14914:	adds	r2, r2, #1
   14918:	adc	r3, r3, #0
   1491c:	strd	r2, [r4, #72]	; 0x48
   14920:	b	148a8 <read_if_statement@@Base+0xe8>
   14924:	andeq	sl, r2, r8, ror #7

00014928 <read_body@@Base>:
   14928:	push	{r4, r5, r6, r7, r8, lr}
   1492c:	mov	r5, r0
   14930:	ldr	r4, [pc, #444]	; 14af4 <read_body@@Base+0x1cc>
   14934:	ldrd	r2, [r4]
   14938:	adds	r2, r2, #1
   1493c:	adc	r3, r3, #0
   14940:	strd	r2, [r4]
   14944:	ldr	r0, [r0]
   14948:	bl	126a8 <next@@Base>
   1494c:	ldrd	r2, [r4, #8]
   14950:	adds	r2, r2, #1
   14954:	adc	r3, r3, #0
   14958:	strd	r2, [r4, #8]
   1495c:	ldr	r3, [r0]
   14960:	cmp	r3, #5
   14964:	movne	r6, #0
   14968:	bne	14a78 <read_body@@Base+0x150>
   1496c:	ldrd	r2, [r4, #16]
   14970:	adds	r2, r2, #1
   14974:	adc	r3, r3, #0
   14978:	strd	r2, [r4, #16]
   1497c:	bl	1237c <free_token_obra@@Base>
   14980:	ldrd	r2, [r4, #24]
   14984:	adds	r2, r2, #1
   14988:	adc	r3, r3, #0
   1498c:	strd	r2, [r4, #24]
   14990:	ldr	r0, [r5]
   14994:	bl	126a8 <next@@Base>
   14998:	ldrd	r2, [r4, #32]
   1499c:	adds	r2, r2, #1
   149a0:	adc	r3, r3, #0
   149a4:	strd	r2, [r4, #32]
   149a8:	ldr	ip, [r0]
   149ac:	cmp	ip, #6
   149b0:	beq	14ac4 <read_body@@Base+0x19c>
   149b4:	mov	r7, #0
   149b8:	mov	r6, r7
   149bc:	b	14a38 <read_body@@Base+0x110>
   149c0:	ldrd	r2, [r4, #40]	; 0x28
   149c4:	adds	r2, r2, #1
   149c8:	adc	r3, r3, #0
   149cc:	strd	r2, [r4, #40]	; 0x28
   149d0:	bl	123c4 <free_token_return@@Base>
   149d4:	ldrd	r2, [r4, #56]	; 0x38
   149d8:	adds	r2, r2, #1
   149dc:	adc	r3, r3, #0
   149e0:	strd	r2, [r4, #56]	; 0x38
   149e4:	mov	r0, r5
   149e8:	bl	13fe4 <read_return_expression@@Base>
   149ec:	mov	r8, r0
   149f0:	ldrd	r2, [r4, #88]	; 0x58
   149f4:	adds	r2, r2, #1
   149f8:	adc	r3, r3, #0
   149fc:	strd	r2, [r4, #88]	; 0x58
   14a00:	cmp	r6, #0
   14a04:	moveq	r6, r8
   14a08:	beq	14a20 <read_body@@Base+0xf8>
   14a0c:	str	r8, [r7, #4]
   14a10:	ldrd	r2, [r4, #96]	; 0x60
   14a14:	adds	r2, r2, #1
   14a18:	adc	r3, r3, #0
   14a1c:	strd	r2, [r4, #96]	; 0x60
   14a20:	ldr	r0, [r5]
   14a24:	bl	126a8 <next@@Base>
   14a28:	ldr	ip, [r0]
   14a2c:	mov	r7, r8
   14a30:	cmp	ip, #6
   14a34:	beq	14ac8 <read_body@@Base+0x1a0>
   14a38:	ldrd	r2, [r4, #104]	; 0x68
   14a3c:	adds	r2, r2, #1
   14a40:	adc	r3, r3, #0
   14a44:	strd	r2, [r4, #104]	; 0x68
   14a48:	cmp	ip, #7
   14a4c:	beq	149c0 <read_body@@Base+0x98>
   14a50:	cmp	ip, #10
   14a54:	beq	14a80 <read_body@@Base+0x158>
   14a58:	mov	r1, r0
   14a5c:	ldr	r0, [r5]
   14a60:	bl	12580 <push_back@@Base>
   14a64:	ldr	r1, [pc, #136]	; 14af4 <read_body@@Base+0x1cc>
   14a68:	ldrd	r2, [r1, #80]	; 0x50
   14a6c:	adds	r2, r2, #1
   14a70:	adc	r3, r3, #0
   14a74:	strd	r2, [r1, #80]	; 0x50
   14a78:	mov	r0, r6
   14a7c:	pop	{r4, r5, r6, r7, r8, pc}
   14a80:	ldrd	r2, [r4, #48]	; 0x30
   14a84:	adds	r2, r2, #1
   14a88:	adc	r3, r3, #0
   14a8c:	strd	r2, [r4, #48]	; 0x30
   14a90:	bl	12430 <free_token_if@@Base>
   14a94:	ldrd	r2, [r4, #64]	; 0x40
   14a98:	adds	r2, r2, #1
   14a9c:	adc	r3, r3, #0
   14aa0:	strd	r2, [r4, #64]	; 0x40
   14aa4:	mov	r0, r5
   14aa8:	bl	147c0 <read_if_statement@@Base>
   14aac:	mov	r8, r0
   14ab0:	ldrd	r2, [r4, #72]	; 0x48
   14ab4:	adds	r2, r2, #1
   14ab8:	adc	r3, r3, #0
   14abc:	strd	r2, [r4, #72]	; 0x48
   14ac0:	b	14a00 <read_body@@Base+0xd8>
   14ac4:	mov	r6, #0
   14ac8:	ldr	r4, [pc, #36]	; 14af4 <read_body@@Base+0x1cc>
   14acc:	ldrd	r2, [r4, #112]	; 0x70
   14ad0:	adds	r2, r2, #1
   14ad4:	adc	r3, r3, #0
   14ad8:	strd	r2, [r4, #112]	; 0x70
   14adc:	bl	123a0 <free_token_cbra@@Base>
   14ae0:	ldrd	r2, [r4, #120]	; 0x78
   14ae4:	adds	r2, r2, #1
   14ae8:	adc	r3, r3, #0
   14aec:	strd	r2, [r4, #120]	; 0x78
   14af0:	b	14a78 <read_body@@Base+0x150>
   14af4:	andeq	sl, r2, r8, asr #8

00014af8 <read_function_ast_node@@Base>:
   14af8:	push	{r4, r5, r6, r7, r8, lr}
   14afc:	mov	r5, r0
   14b00:	ldr	r4, [pc, #404]	; 14c9c <read_function_ast_node@@Base+0x1a4>
   14b04:	ldrd	r2, [r4]
   14b08:	adds	r2, r2, #1
   14b0c:	adc	r3, r3, #0
   14b10:	strd	r2, [r4]
   14b14:	ldr	r0, [r0]
   14b18:	bl	126a8 <next@@Base>
   14b1c:	ldrd	r2, [r4, #8]
   14b20:	adds	r2, r2, #1
   14b24:	adc	r3, r3, #0
   14b28:	strd	r2, [r4, #8]
   14b2c:	ldr	r3, [r0]
   14b30:	cmp	r3, #0
   14b34:	movne	r4, #0
   14b38:	bne	14c94 <read_function_ast_node@@Base+0x19c>
   14b3c:	ldrd	r2, [r4, #16]
   14b40:	adds	r2, r2, #1
   14b44:	adc	r3, r3, #0
   14b48:	strd	r2, [r4, #16]
   14b4c:	bl	122c8 <free_token_int_type@@Base>
   14b50:	ldrd	r2, [r4, #24]
   14b54:	adds	r2, r2, #1
   14b58:	adc	r3, r3, #0
   14b5c:	strd	r2, [r4, #24]
   14b60:	ldr	r0, [r5]
   14b64:	bl	126a8 <next@@Base>
   14b68:	mov	r6, r0
   14b6c:	ldrd	r2, [r4, #32]
   14b70:	adds	r2, r2, #1
   14b74:	adc	r3, r3, #0
   14b78:	strd	r2, [r4, #32]
   14b7c:	ldr	r3, [r0]
   14b80:	cmp	r3, #2
   14b84:	movne	r4, #0
   14b88:	bne	14c94 <read_function_ast_node@@Base+0x19c>
   14b8c:	ldrd	r2, [r4, #40]	; 0x28
   14b90:	adds	r2, r2, #1
   14b94:	adc	r3, r3, #0
   14b98:	strd	r2, [r4, #40]	; 0x28
   14b9c:	ldr	r0, [r5]
   14ba0:	bl	126a8 <next@@Base>
   14ba4:	ldrd	r2, [r4, #48]	; 0x30
   14ba8:	adds	r2, r2, #1
   14bac:	adc	r3, r3, #0
   14bb0:	strd	r2, [r4, #48]	; 0x30
   14bb4:	ldr	r3, [r0]
   14bb8:	cmp	r3, #3
   14bbc:	movne	r4, #0
   14bc0:	bne	14c94 <read_function_ast_node@@Base+0x19c>
   14bc4:	ldrd	r2, [r4, #56]	; 0x38
   14bc8:	adds	r2, r2, #1
   14bcc:	adc	r3, r3, #0
   14bd0:	strd	r2, [r4, #56]	; 0x38
   14bd4:	bl	12334 <free_token_opar@@Base>
   14bd8:	ldrd	r2, [r4, #64]	; 0x40
   14bdc:	adds	r2, r2, #1
   14be0:	adc	r3, r3, #0
   14be4:	strd	r2, [r4, #64]	; 0x40
   14be8:	ldr	r0, [r5]
   14bec:	bl	126a8 <next@@Base>
   14bf0:	ldrd	r2, [r4, #72]	; 0x48
   14bf4:	adds	r2, r2, #1
   14bf8:	adc	r3, r3, #0
   14bfc:	strd	r2, [r4, #72]	; 0x48
   14c00:	ldr	r3, [r0]
   14c04:	cmp	r3, #4
   14c08:	movne	r4, #0
   14c0c:	bne	14c94 <read_function_ast_node@@Base+0x19c>
   14c10:	mov	r7, r4
   14c14:	ldrd	r2, [r4, #80]	; 0x50
   14c18:	adds	r2, r2, #1
   14c1c:	adc	r3, r3, #0
   14c20:	strd	r2, [r4, #80]	; 0x50
   14c24:	bl	12358 <free_token_cpar@@Base>
   14c28:	ldrd	r2, [r4, #88]	; 0x58
   14c2c:	adds	r2, r2, #1
   14c30:	adc	r3, r3, #0
   14c34:	strd	r2, [r4, #88]	; 0x58
   14c38:	mov	r0, r5
   14c3c:	bl	14928 <read_body@@Base>
   14c40:	mov	r5, r0
   14c44:	ldrd	r2, [r4, #96]	; 0x60
   14c48:	adds	r2, r2, #1
   14c4c:	adc	r3, r3, #0
   14c50:	strd	r2, [r4, #96]	; 0x60
   14c54:	mov	r0, #16
   14c58:	bl	119fc <malloc@plt>
   14c5c:	mov	r4, r0
   14c60:	mov	r2, r5
   14c64:	ldr	r1, [r6, #4]
   14c68:	bl	13784 <init_node_function@@Base>
   14c6c:	ldrd	r2, [r7, #104]	; 0x68
   14c70:	adds	r2, r2, #1
   14c74:	adc	r3, r3, #0
   14c78:	strd	r2, [r7, #104]	; 0x68
   14c7c:	mov	r0, r6
   14c80:	bl	12310 <free_token_function@@Base>
   14c84:	ldrd	r2, [r7, #112]	; 0x70
   14c88:	adds	r2, r2, #1
   14c8c:	adc	r3, r3, #0
   14c90:	strd	r2, [r7, #112]	; 0x70
   14c94:	mov	r0, r4
   14c98:	pop	{r4, r5, r6, r7, r8, pc}
   14c9c:	andeq	sl, r2, r8, asr #9

00014ca0 <build_ast@@Base>:
   14ca0:	push	{r4, lr}
   14ca4:	ldr	r4, [pc, #36]	; 14cd0 <build_ast@@Base+0x30>
   14ca8:	ldrd	r2, [r4, #-8]
   14cac:	adds	r2, r2, #1
   14cb0:	adc	r3, r3, #0
   14cb4:	strd	r2, [r4, #-8]
   14cb8:	bl	14af8 <read_function_ast_node@@Base>
   14cbc:	ldrd	r2, [r4]
   14cc0:	adds	r2, r2, #1
   14cc4:	adc	r3, r3, #0
   14cc8:	strd	r2, [r4]
   14ccc:	pop	{r4, pc}
   14cd0:	andeq	sl, r2, r8, asr #10
   14cd4:	push	{r4, lr}
   14cd8:	ldr	r0, [pc, #4]	; 14ce4 <build_ast@@Base+0x44>
   14cdc:	bl	17640 <__gcov_sort_n_vals@@Base+0x458>
   14ce0:	pop	{r4, pc}
   14ce4:	andeq	r9, r2, r8, lsl #15

00014ce8 <init_generator@@Base>:
   14ce8:	push	{r4, r5, r6, r7, r8, lr}
   14cec:	mov	r5, r0
   14cf0:	ldr	r4, [pc, #64]	; 14d38 <init_generator@@Base+0x50>
   14cf4:	ldrd	r6, [r4]
   14cf8:	adds	r6, r6, #1
   14cfc:	adc	r7, r7, #0
   14d00:	strd	r6, [r4]
   14d04:	str	r1, [r0]
   14d08:	ldr	r1, [pc, #44]	; 14d3c <init_generator@@Base+0x54>
   14d0c:	mov	r0, r2
   14d10:	bl	1199c <fopen@plt>
   14d14:	ldrd	r2, [r4, #8]
   14d18:	adds	r2, r2, #1
   14d1c:	adc	r3, r3, #0
   14d20:	strd	r2, [r4, #8]
   14d24:	str	r0, [r5, #4]
   14d28:	mov	r2, #0
   14d2c:	mov	r3, #0
   14d30:	strd	r2, [r5, #8]
   14d34:	pop	{r4, r5, r6, r7, r8, pc}
   14d38:	andeq	sl, r2, r0, asr r5
   14d3c:	andeq	r7, r1, r8, ror #26

00014d40 <destroy_generator@@Base>:
   14d40:	push	{r4, lr}
   14d44:	ldr	r4, [pc, #40]	; 14d74 <destroy_generator@@Base+0x34>
   14d48:	ldrd	r2, [r4, #16]
   14d4c:	adds	r2, r2, #1
   14d50:	adc	r3, r3, #0
   14d54:	strd	r2, [r4, #16]
   14d58:	ldr	r0, [r0, #4]
   14d5c:	bl	11ac8 <fclose@plt>
   14d60:	ldrd	r2, [r4, #24]
   14d64:	adds	r2, r2, #1
   14d68:	adc	r3, r3, #0
   14d6c:	strd	r2, [r4, #24]
   14d70:	pop	{r4, pc}
   14d74:	andeq	sl, r2, r0, asr r5

00014d78 <__generate_code_for_int@@Base>:
   14d78:	push	{r4, lr}
   14d7c:	ldr	r4, [pc, #48]	; 14db4 <__generate_code_for_int@@Base+0x3c>
   14d80:	ldrd	r2, [r4, #32]
   14d84:	adds	r2, r2, #1
   14d88:	adc	r3, r3, #0
   14d8c:	strd	r2, [r4, #32]
   14d90:	ldr	r2, [r1, #8]
   14d94:	ldr	r1, [pc, #28]	; 14db8 <__generate_code_for_int@@Base+0x40>
   14d98:	ldr	r0, [r0, #4]
   14d9c:	bl	11a68 <fprintf@plt>
   14da0:	ldrd	r2, [r4, #40]	; 0x28
   14da4:	adds	r2, r2, #1
   14da8:	adc	r3, r3, #0
   14dac:	strd	r2, [r4, #40]	; 0x28
   14db0:	pop	{r4, pc}
   14db4:	andeq	sl, r2, r0, asr r5
   14db8:	andeq	r7, r1, ip, ror #26

00014dbc <__generate_code_for_return@@Base>:
   14dbc:	push	{r4, r5, r6, lr}
   14dc0:	mov	r5, r0
   14dc4:	ldr	r0, [pc, #204]	; 14e98 <__generate_code_for_return@@Base+0xdc>
   14dc8:	ldrd	r2, [r0, #48]	; 0x30
   14dcc:	adds	r2, r2, #1
   14dd0:	adc	r3, r3, #0
   14dd4:	strd	r2, [r0, #48]	; 0x30
   14dd8:	ldr	r6, [r1, #8]
   14ddc:	ldr	r3, [r5, #4]
   14de0:	mov	r2, #9
   14de4:	mov	r1, #1
   14de8:	ldr	r0, [pc, #172]	; 14e9c <__generate_code_for_return@@Base+0xe0>
   14dec:	bl	119cc <fwrite@plt>
   14df0:	ldr	r3, [r6]
   14df4:	cmp	r3, #1
   14df8:	bne	14e54 <__generate_code_for_return@@Base+0x98>
   14dfc:	ldr	r4, [pc, #148]	; 14e98 <__generate_code_for_return@@Base+0xdc>
   14e00:	ldrd	r2, [r4, #64]	; 0x40
   14e04:	adds	r2, r2, #1
   14e08:	adc	r3, r3, #0
   14e0c:	strd	r2, [r4, #64]	; 0x40
   14e10:	mov	r1, r6
   14e14:	mov	r0, r5
   14e18:	bl	14d78 <__generate_code_for_int@@Base>
   14e1c:	ldrd	r2, [r4, #72]	; 0x48
   14e20:	adds	r2, r2, #1
   14e24:	adc	r3, r3, #0
   14e28:	strd	r2, [r4, #72]	; 0x48
   14e2c:	ldr	r3, [r5, #4]
   14e30:	mov	r2, #8
   14e34:	mov	r1, #1
   14e38:	ldr	r0, [pc, #96]	; 14ea0 <__generate_code_for_return@@Base+0xe4>
   14e3c:	bl	119cc <fwrite@plt>
   14e40:	ldrd	r2, [r4, #80]	; 0x50
   14e44:	adds	r2, r2, #1
   14e48:	adc	r3, r3, #0
   14e4c:	strd	r2, [r4, #80]	; 0x50
   14e50:	pop	{r4, r5, r6, pc}
   14e54:	ldr	r4, [pc, #60]	; 14e98 <__generate_code_for_return@@Base+0xdc>
   14e58:	ldrd	r2, [r4, #56]	; 0x38
   14e5c:	adds	r2, r2, #1
   14e60:	adc	r3, r3, #0
   14e64:	strd	r2, [r4, #56]	; 0x38
   14e68:	ldr	r3, [pc, #52]	; 14ea4 <__generate_code_for_return@@Base+0xe8>
   14e6c:	ldr	r3, [r3]
   14e70:	mov	r2, #37	; 0x25
   14e74:	mov	r1, #1
   14e78:	ldr	r0, [pc, #40]	; 14ea8 <__generate_code_for_return@@Base+0xec>
   14e7c:	bl	119cc <fwrite@plt>
   14e80:	ldrd	r2, [r4, #88]	; 0x58
   14e84:	adds	r2, r2, #1
   14e88:	adc	r3, r3, #0
   14e8c:	strd	r2, [r4, #88]	; 0x58
   14e90:	mov	r0, #1
   14e94:	bl	11a44 <exit@plt>
   14e98:	andeq	sl, r2, r0, asr r5
   14e9c:	andeq	r7, r1, r0, ror sp
   14ea0:	andeq	r7, r1, ip, ror sp
   14ea4:			; <UNDEFINED> instruction: 0x00029ab8
   14ea8:	andeq	r7, r1, r8, lsl #27

00014eac <__generate_code_for_binary_boolean_expression@@Base>:
   14eac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14eb0:	mov	r5, r0
   14eb4:	mov	r6, r1
   14eb8:	mov	r8, r2
   14ebc:	mov	r9, r3
   14ec0:	ldr	r4, [pc, #728]	; 151a0 <__generate_code_for_binary_boolean_expression@@Base+0x2f4>
   14ec4:	ldrd	r2, [r4, #96]	; 0x60
   14ec8:	adds	r2, r2, #1
   14ecc:	adc	r3, r3, #0
   14ed0:	strd	r2, [r4, #96]	; 0x60
   14ed4:	ldr	sl, [r1, #8]
   14ed8:	ldr	r7, [r1, #12]
   14edc:	ldr	r3, [r0, #4]
   14ee0:	mov	r2, #9
   14ee4:	mov	r1, #1
   14ee8:	ldr	r0, [pc, #692]	; 151a4 <__generate_code_for_binary_boolean_expression@@Base+0x2f8>
   14eec:	bl	119cc <fwrite@plt>
   14ef0:	ldrd	r2, [r4, #104]	; 0x68
   14ef4:	adds	r2, r2, #1
   14ef8:	adc	r3, r3, #0
   14efc:	strd	r2, [r4, #104]	; 0x68
   14f00:	mov	r1, sl
   14f04:	mov	r0, r5
   14f08:	bl	14d78 <__generate_code_for_int@@Base>
   14f0c:	ldrd	r2, [r4, #112]	; 0x70
   14f10:	adds	r2, r2, #1
   14f14:	adc	r3, r3, #0
   14f18:	strd	r2, [r4, #112]	; 0x70
   14f1c:	ldr	r1, [r5, #4]
   14f20:	mov	r0, #10
   14f24:	bl	11aec <fputc@plt>
   14f28:	ldrd	r2, [r4, #120]	; 0x78
   14f2c:	adds	r2, r2, #1
   14f30:	adc	r3, r3, #0
   14f34:	strd	r2, [r4, #120]	; 0x78
   14f38:	ldr	r3, [r5, #4]
   14f3c:	mov	r2, #9
   14f40:	mov	r1, #1
   14f44:	ldr	r0, [pc, #604]	; 151a8 <__generate_code_for_binary_boolean_expression@@Base+0x2fc>
   14f48:	bl	119cc <fwrite@plt>
   14f4c:	ldrd	r2, [r4, #128]	; 0x80
   14f50:	adds	r2, r2, #1
   14f54:	adc	r3, r3, #0
   14f58:	strd	r2, [r4, #128]	; 0x80
   14f5c:	mov	r1, r7
   14f60:	mov	r0, r5
   14f64:	bl	14d78 <__generate_code_for_int@@Base>
   14f68:	ldrd	r2, [r4, #136]	; 0x88
   14f6c:	adds	r2, r2, #1
   14f70:	adc	r3, r3, #0
   14f74:	strd	r2, [r4, #136]	; 0x88
   14f78:	ldr	r1, [r5, #4]
   14f7c:	mov	r0, #10
   14f80:	bl	11aec <fputc@plt>
   14f84:	ldrd	r2, [r4, #144]	; 0x90
   14f88:	adds	r2, r2, #1
   14f8c:	adc	r3, r3, #0
   14f90:	strd	r2, [r4, #144]	; 0x90
   14f94:	ldr	r3, [r5, #4]
   14f98:	mov	r2, #12
   14f9c:	mov	r1, #1
   14fa0:	ldr	r0, [pc, #516]	; 151ac <__generate_code_for_binary_boolean_expression@@Base+0x300>
   14fa4:	bl	119cc <fwrite@plt>
   14fa8:	ldrd	r2, [r4, #152]	; 0x98
   14fac:	adds	r2, r2, #1
   14fb0:	adc	r3, r3, #0
   14fb4:	strd	r2, [r4, #152]	; 0x98
   14fb8:	ldr	r3, [r6, #16]
   14fbc:	cmp	r3, #7
   14fc0:	ldrls	pc, [pc, r3, lsl #2]
   14fc4:	b	15154 <__generate_code_for_binary_boolean_expression@@Base+0x2a8>
   14fc8:	andeq	r4, r1, r8, ror #31
   14fcc:	andeq	r5, r1, r8, lsr #32
   14fd0:	andeq	r5, r1, r4, rrx
   14fd4:	andeq	r5, r1, r0, lsr #1
   14fd8:	muleq	r1, ip, r1
   14fdc:	muleq	r1, ip, r1
   14fe0:	ldrdeq	r5, [r1], -ip
   14fe4:	andeq	r5, r1, r8, lsl r1
   14fe8:	ldr	r4, [pc, #432]	; 151a0 <__generate_code_for_binary_boolean_expression@@Base+0x2f4>
   14fec:	ldrd	r2, [r4, #168]	; 0xa8
   14ff0:	adds	r2, r2, #1
   14ff4:	adc	r3, r3, #0
   14ff8:	strd	r2, [r4, #168]	; 0xa8
   14ffc:	mov	r2, r8
   15000:	mov	r3, r9
   15004:	ldr	r1, [pc, #420]	; 151b0 <__generate_code_for_binary_boolean_expression@@Base+0x304>
   15008:	ldr	r0, [r5, #4]
   1500c:	bl	11a68 <fprintf@plt>
   15010:	add	r4, r4, #272	; 0x110
   15014:	ldrd	r2, [r4, #-8]
   15018:	adds	r2, r2, #1
   1501c:	adc	r3, r3, #0
   15020:	strd	r2, [r4, #-8]
   15024:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15028:	ldr	r4, [pc, #368]	; 151a0 <__generate_code_for_binary_boolean_expression@@Base+0x2f4>
   1502c:	ldrd	r2, [r4, #176]	; 0xb0
   15030:	adds	r2, r2, #1
   15034:	adc	r3, r3, #0
   15038:	strd	r2, [r4, #176]	; 0xb0
   1503c:	mov	r2, r8
   15040:	mov	r3, r9
   15044:	ldr	r1, [pc, #360]	; 151b4 <__generate_code_for_binary_boolean_expression@@Base+0x308>
   15048:	ldr	r0, [r5, #4]
   1504c:	bl	11a68 <fprintf@plt>
   15050:	ldrd	r2, [r4, #216]	; 0xd8
   15054:	adds	r2, r2, #1
   15058:	adc	r3, r3, #0
   1505c:	strd	r2, [r4, #216]	; 0xd8
   15060:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15064:	ldr	r4, [pc, #308]	; 151a0 <__generate_code_for_binary_boolean_expression@@Base+0x2f4>
   15068:	ldrd	r2, [r4, #184]	; 0xb8
   1506c:	adds	r2, r2, #1
   15070:	adc	r3, r3, #0
   15074:	strd	r2, [r4, #184]	; 0xb8
   15078:	mov	r2, r8
   1507c:	mov	r3, r9
   15080:	ldr	r1, [pc, #304]	; 151b8 <__generate_code_for_binary_boolean_expression@@Base+0x30c>
   15084:	ldr	r0, [r5, #4]
   15088:	bl	11a68 <fprintf@plt>
   1508c:	ldrd	r2, [r4, #224]	; 0xe0
   15090:	adds	r2, r2, #1
   15094:	adc	r3, r3, #0
   15098:	strd	r2, [r4, #224]	; 0xe0
   1509c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   150a0:	ldr	r4, [pc, #248]	; 151a0 <__generate_code_for_binary_boolean_expression@@Base+0x2f4>
   150a4:	ldrd	r2, [r4, #192]	; 0xc0
   150a8:	adds	r2, r2, #1
   150ac:	adc	r3, r3, #0
   150b0:	strd	r2, [r4, #192]	; 0xc0
   150b4:	mov	r2, r8
   150b8:	mov	r3, r9
   150bc:	ldr	r1, [pc, #248]	; 151bc <__generate_code_for_binary_boolean_expression@@Base+0x310>
   150c0:	ldr	r0, [r5, #4]
   150c4:	bl	11a68 <fprintf@plt>
   150c8:	ldrd	r2, [r4, #232]	; 0xe8
   150cc:	adds	r2, r2, #1
   150d0:	adc	r3, r3, #0
   150d4:	strd	r2, [r4, #232]	; 0xe8
   150d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   150dc:	ldr	r4, [pc, #188]	; 151a0 <__generate_code_for_binary_boolean_expression@@Base+0x2f4>
   150e0:	ldrd	r2, [r4, #208]	; 0xd0
   150e4:	adds	r2, r2, #1
   150e8:	adc	r3, r3, #0
   150ec:	strd	r2, [r4, #208]	; 0xd0
   150f0:	mov	r2, r8
   150f4:	mov	r3, r9
   150f8:	ldr	r1, [pc, #192]	; 151c0 <__generate_code_for_binary_boolean_expression@@Base+0x314>
   150fc:	ldr	r0, [r5, #4]
   15100:	bl	11a68 <fprintf@plt>
   15104:	ldrd	r2, [r4, #240]	; 0xf0
   15108:	adds	r2, r2, #1
   1510c:	adc	r3, r3, #0
   15110:	strd	r2, [r4, #240]	; 0xf0
   15114:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15118:	ldr	r4, [pc, #128]	; 151a0 <__generate_code_for_binary_boolean_expression@@Base+0x2f4>
   1511c:	ldrd	r2, [r4, #200]	; 0xc8
   15120:	adds	r2, r2, #1
   15124:	adc	r3, r3, #0
   15128:	strd	r2, [r4, #200]	; 0xc8
   1512c:	mov	r2, r8
   15130:	mov	r3, r9
   15134:	ldr	r1, [pc, #136]	; 151c4 <__generate_code_for_binary_boolean_expression@@Base+0x318>
   15138:	ldr	r0, [r5, #4]
   1513c:	bl	11a68 <fprintf@plt>
   15140:	ldrd	r2, [r4, #248]	; 0xf8
   15144:	adds	r2, r2, #1
   15148:	adc	r3, r3, #0
   1514c:	strd	r2, [r4, #248]	; 0xf8
   15150:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15154:	ldr	r4, [pc, #68]	; 151a0 <__generate_code_for_binary_boolean_expression@@Base+0x2f4>
   15158:	ldrd	r2, [r4, #160]	; 0xa0
   1515c:	adds	r2, r2, #1
   15160:	adc	r3, r3, #0
   15164:	strd	r2, [r4, #160]	; 0xa0
   15168:	ldr	r3, [pc, #88]	; 151c8 <__generate_code_for_binary_boolean_expression@@Base+0x31c>
   1516c:	ldr	r3, [r3]
   15170:	mov	r2, #31
   15174:	mov	r1, #1
   15178:	ldr	r0, [pc, #76]	; 151cc <__generate_code_for_binary_boolean_expression@@Base+0x320>
   1517c:	bl	119cc <fwrite@plt>
   15180:	add	r4, r4, #256	; 0x100
   15184:	ldrd	r2, [r4]
   15188:	adds	r2, r2, #1
   1518c:	adc	r3, r3, #0
   15190:	strd	r2, [r4]
   15194:	mov	r0, #1
   15198:	bl	11a44 <exit@plt>
   1519c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   151a0:	andeq	sl, r2, r0, asr r5
   151a4:	andeq	r7, r1, r0, ror sp
   151a8:			; <UNDEFINED> instruction: 0x00017db0
   151ac:			; <UNDEFINED> instruction: 0x00017dbc
   151b0:	andeq	r7, r1, ip, asr #27
   151b4:	andeq	r7, r1, r0, ror #27
   151b8:	strdeq	r7, [r1], -r4
   151bc:	andeq	r7, r1, r8, lsl #28
   151c0:	andeq	r7, r1, ip, lsl lr
   151c4:	andeq	r7, r1, r0, lsr lr
   151c8:			; <UNDEFINED> instruction: 0x00029ab8
   151cc:	andeq	r7, r1, r4, asr #28

000151d0 <__generate_code_for_unary_boolean_expression@@Base>:
   151d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   151d4:	mov	r5, r0
   151d8:	mov	r8, r1
   151dc:	mov	r6, r2
   151e0:	mov	r7, r3
   151e4:	ldr	r4, [pc, #236]	; 152d8 <__generate_code_for_unary_boolean_expression@@Base+0x108>
   151e8:	ldrd	r2, [r4]
   151ec:	adds	r2, r2, #1
   151f0:	adc	r3, r3, #0
   151f4:	strd	r2, [r4]
   151f8:	ldr	r9, [r1, #8]
   151fc:	ldr	r3, [r0, #4]
   15200:	mov	r2, #11
   15204:	mov	r1, #1
   15208:	ldr	r0, [pc, #204]	; 152dc <__generate_code_for_unary_boolean_expression@@Base+0x10c>
   1520c:	bl	119cc <fwrite@plt>
   15210:	ldrd	r2, [r4, #8]
   15214:	adds	r2, r2, #1
   15218:	adc	r3, r3, #0
   1521c:	strd	r2, [r4, #8]
   15220:	ldr	r3, [r5, #4]
   15224:	mov	r2, #9
   15228:	mov	r1, #1
   1522c:	ldr	r0, [pc, #172]	; 152e0 <__generate_code_for_unary_boolean_expression@@Base+0x110>
   15230:	bl	119cc <fwrite@plt>
   15234:	ldrd	r2, [r4, #16]
   15238:	adds	r2, r2, #1
   1523c:	adc	r3, r3, #0
   15240:	strd	r2, [r4, #16]
   15244:	mov	r1, r9
   15248:	mov	r0, r5
   1524c:	bl	14d78 <__generate_code_for_int@@Base>
   15250:	ldr	r3, [r8, #16]
   15254:	cmp	r3, #8
   15258:	bne	15294 <__generate_code_for_unary_boolean_expression@@Base+0xc4>
   1525c:	ldrd	r2, [r4, #32]
   15260:	adds	r2, r2, #1
   15264:	adc	r3, r3, #0
   15268:	strd	r2, [r4, #32]
   1526c:	mov	r2, r6
   15270:	mov	r3, r7
   15274:	ldr	r1, [pc, #104]	; 152e4 <__generate_code_for_unary_boolean_expression@@Base+0x114>
   15278:	ldr	r0, [r5, #4]
   1527c:	bl	11a68 <fprintf@plt>
   15280:	ldrd	r2, [r4, #40]	; 0x28
   15284:	adds	r2, r2, #1
   15288:	adc	r3, r3, #0
   1528c:	strd	r2, [r4, #40]	; 0x28
   15290:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15294:	ldr	r4, [pc, #60]	; 152d8 <__generate_code_for_unary_boolean_expression@@Base+0x108>
   15298:	ldrd	r2, [r4, #24]
   1529c:	adds	r2, r2, #1
   152a0:	adc	r3, r3, #0
   152a4:	strd	r2, [r4, #24]
   152a8:	ldr	r3, [pc, #56]	; 152e8 <__generate_code_for_unary_boolean_expression@@Base+0x118>
   152ac:	ldr	r3, [r3]
   152b0:	mov	r2, #31
   152b4:	mov	r1, #1
   152b8:	ldr	r0, [pc, #44]	; 152ec <__generate_code_for_unary_boolean_expression@@Base+0x11c>
   152bc:	bl	119cc <fwrite@plt>
   152c0:	ldrd	r2, [r4, #48]	; 0x30
   152c4:	adds	r2, r2, #1
   152c8:	adc	r3, r3, #0
   152cc:	strd	r2, [r4, #48]	; 0x30
   152d0:	mov	r0, #1
   152d4:	bl	11a44 <exit@plt>
   152d8:	andeq	sl, r2, r0, ror #12
   152dc:	andeq	r7, r1, r4, ror #28
   152e0:			; <UNDEFINED> instruction: 0x00017db0
   152e4:	andeq	r7, r1, r0, ror #27
   152e8:			; <UNDEFINED> instruction: 0x00029ab8
   152ec:	andeq	r7, r1, r4, asr #28

000152f0 <__generate_code_for_if_expression@@Base>:
   152f0:	push	{r4, r5, r6, r7, r8, lr}
   152f4:	ldr	ip, [r1, #16]
   152f8:	cmp	ip, #8
   152fc:	beq	1532c <__generate_code_for_if_expression@@Base+0x3c>
   15300:	ldr	r4, [pc, #80]	; 15358 <__generate_code_for_if_expression@@Base+0x68>
   15304:	ldrd	r6, [r4, #-8]
   15308:	adds	r6, r6, #1
   1530c:	adc	r7, r7, #0
   15310:	strd	r6, [r4, #-8]
   15314:	bl	14eac <__generate_code_for_binary_boolean_expression@@Base>
   15318:	ldrd	r2, [r4, #16]
   1531c:	adds	r2, r2, #1
   15320:	adc	r3, r3, #0
   15324:	strd	r2, [r4, #16]
   15328:	pop	{r4, r5, r6, r7, r8, pc}
   1532c:	ldr	r6, [pc, #36]	; 15358 <__generate_code_for_if_expression@@Base+0x68>
   15330:	ldrd	r4, [r6]
   15334:	adds	r4, r4, #1
   15338:	adc	r5, r5, #0
   1533c:	strd	r4, [r6]
   15340:	bl	151d0 <__generate_code_for_unary_boolean_expression@@Base>
   15344:	ldrd	r2, [r6, #8]
   15348:	adds	r2, r2, #1
   1534c:	adc	r3, r3, #0
   15350:	strd	r2, [r6, #8]
   15354:	pop	{r4, r5, r6, r7, r8, pc}
   15358:	andeq	sl, r2, r0, lsr #13

0001535c <__generate_code_for_body@@Base>:
   1535c:	push	{r4, r5, r6, lr}
   15360:	cmp	r1, #0
   15364:	beq	15430 <__generate_code_for_body@@Base+0xd4>
   15368:	mov	r5, r0
   1536c:	ldr	r4, [pc, #212]	; 15448 <__generate_code_for_body@@Base+0xec>
   15370:	b	153b8 <__generate_code_for_body@@Base+0x5c>
   15374:	ldrd	r2, [r4, #-8]
   15378:	adds	r2, r2, #1
   1537c:	adc	r3, r3, #0
   15380:	strd	r2, [r4, #-8]
   15384:	mov	r0, r5
   15388:	bl	14dbc <__generate_code_for_return@@Base>
   1538c:	ldrd	r2, [r4, #16]
   15390:	adds	r2, r2, #1
   15394:	adc	r3, r3, #0
   15398:	strd	r2, [r4, #16]
   1539c:	ldrd	r2, [r4, #24]
   153a0:	adds	r2, r2, #1
   153a4:	adc	r3, r3, #0
   153a8:	strd	r2, [r4, #24]
   153ac:	mov	r1, r6
   153b0:	cmp	r6, #0
   153b4:	beq	15430 <__generate_code_for_body@@Base+0xd4>
   153b8:	ldrd	r2, [r4, #32]
   153bc:	adds	r2, r2, #1
   153c0:	adc	r3, r3, #0
   153c4:	strd	r2, [r4, #32]
   153c8:	ldr	r6, [r1, #4]
   153cc:	ldr	r3, [r1]
   153d0:	cmp	r3, #3
   153d4:	beq	15374 <__generate_code_for_body@@Base+0x18>
   153d8:	cmp	r3, #4
   153dc:	beq	15414 <__generate_code_for_body@@Base+0xb8>
   153e0:	ldr	r3, [pc, #100]	; 1544c <__generate_code_for_body@@Base+0xf0>
   153e4:	ldr	r3, [r3]
   153e8:	mov	r2, #52	; 0x34
   153ec:	mov	r1, #1
   153f0:	ldr	r0, [pc, #88]	; 15450 <__generate_code_for_body@@Base+0xf4>
   153f4:	bl	119cc <fwrite@plt>
   153f8:	ldr	r1, [pc, #72]	; 15448 <__generate_code_for_body@@Base+0xec>
   153fc:	ldrd	r2, [r1, #8]
   15400:	adds	r2, r2, #1
   15404:	adc	r3, r3, #0
   15408:	strd	r2, [r1, #8]
   1540c:	mov	r0, #1
   15410:	bl	11a44 <exit@plt>
   15414:	ldrd	r2, [r4]
   15418:	adds	r2, r2, #1
   1541c:	adc	r3, r3, #0
   15420:	strd	r2, [r4]
   15424:	mov	r0, r5
   15428:	bl	15454 <__generate_code_for_if@@Base>
   1542c:	b	1539c <__generate_code_for_body@@Base+0x40>
   15430:	ldr	r1, [pc, #16]	; 15448 <__generate_code_for_body@@Base+0xec>
   15434:	ldrd	r2, [r1, #40]	; 0x28
   15438:	adds	r2, r2, #1
   1543c:	adc	r3, r3, #0
   15440:	strd	r2, [r1, #40]	; 0x28
   15444:	pop	{r4, r5, r6, pc}
   15448:	andeq	sl, r2, r0, asr #13
   1544c:			; <UNDEFINED> instruction: 0x00029ab8
   15450:	andeq	r7, r1, r0, ror lr

00015454 <__generate_code_for_if@@Base>:
   15454:	push	{r4, r5, r6, r8, r9, lr}
   15458:	mov	r5, r0
   1545c:	mov	r6, r1
   15460:	ldr	r4, [pc, #180]	; 1551c <__generate_code_for_if@@Base+0xc8>
   15464:	ldrd	r2, [r4]
   15468:	adds	r2, r2, #1
   1546c:	adc	r3, r3, #0
   15470:	strd	r2, [r4]
   15474:	ldrd	r8, [r0, #8]
   15478:	adds	r2, r8, #1
   1547c:	adc	r3, r9, #0
   15480:	strd	r2, [r0, #8]
   15484:	mov	r2, r8
   15488:	mov	r3, r9
   1548c:	ldr	r1, [r1, #8]
   15490:	bl	152f0 <__generate_code_for_if_expression@@Base>
   15494:	ldrd	r2, [r4, #8]
   15498:	adds	r2, r2, #1
   1549c:	adc	r3, r3, #0
   154a0:	strd	r2, [r4, #8]
   154a4:	ldr	r1, [r6, #12]
   154a8:	mov	r0, r5
   154ac:	bl	1535c <__generate_code_for_body@@Base>
   154b0:	ldrd	r2, [r4, #16]
   154b4:	adds	r2, r2, #1
   154b8:	adc	r3, r3, #0
   154bc:	strd	r2, [r4, #16]
   154c0:	mov	r2, r8
   154c4:	mov	r3, r9
   154c8:	ldr	r1, [pc, #80]	; 15520 <__generate_code_for_if@@Base+0xcc>
   154cc:	ldr	r0, [r5, #4]
   154d0:	bl	11a68 <fprintf@plt>
   154d4:	ldrd	r2, [r4, #24]
   154d8:	adds	r2, r2, #1
   154dc:	adc	r3, r3, #0
   154e0:	strd	r2, [r4, #24]
   154e4:	ldr	r1, [r6, #16]
   154e8:	cmp	r1, #0
   154ec:	popeq	{r4, r5, r6, r8, r9, pc}
   154f0:	ldrd	r2, [r4, #32]
   154f4:	adds	r2, r2, #1
   154f8:	adc	r3, r3, #0
   154fc:	strd	r2, [r4, #32]
   15500:	mov	r0, r5
   15504:	bl	1535c <__generate_code_for_body@@Base>
   15508:	ldrd	r2, [r4, #40]	; 0x28
   1550c:	adds	r2, r2, #1
   15510:	adc	r3, r3, #0
   15514:	strd	r2, [r4, #40]	; 0x28
   15518:	pop	{r4, r5, r6, r8, r9, pc}
   1551c:	strdeq	sl, [r2], -r0
   15520:	andeq	r7, r1, r8, lsr #29

00015524 <__generate_code_for_function@@Base>:
   15524:	push	{r4, r5, r6, lr}
   15528:	mov	r5, r0
   1552c:	mov	r6, r1
   15530:	ldr	r4, [pc, #76]	; 15584 <__generate_code_for_function@@Base+0x60>
   15534:	ldrd	r2, [r4]
   15538:	adds	r2, r2, #1
   1553c:	adc	r3, r3, #0
   15540:	strd	r2, [r4]
   15544:	ldr	r2, [r1, #8]
   15548:	ldr	r1, [pc, #56]	; 15588 <__generate_code_for_function@@Base+0x64>
   1554c:	ldr	r0, [r0, #4]
   15550:	bl	11a68 <fprintf@plt>
   15554:	ldrd	r2, [r4, #8]
   15558:	adds	r2, r2, #1
   1555c:	adc	r3, r3, #0
   15560:	strd	r2, [r4, #8]
   15564:	ldr	r1, [r6, #12]
   15568:	mov	r0, r5
   1556c:	bl	1535c <__generate_code_for_body@@Base>
   15570:	ldrd	r2, [r4, #16]
   15574:	adds	r2, r2, #1
   15578:	adc	r3, r3, #0
   1557c:	strd	r2, [r4, #16]
   15580:	pop	{r4, r5, r6, pc}
   15584:	andeq	sl, r2, r0, lsr #14
   15588:			; <UNDEFINED> instruction: 0x00017eb8

0001558c <__generate_code_for_main@@Base>:
   1558c:	push	{r4, lr}
   15590:	ldr	r3, [r1]
   15594:	cmp	r3, #2
   15598:	bne	155c8 <__generate_code_for_main@@Base+0x3c>
   1559c:	ldr	r4, [pc, #104]	; 1560c <__generate_code_for_main@@Base+0x80>
   155a0:	ldrd	r2, [r4]
   155a4:	adds	r2, r2, #1
   155a8:	adc	r3, r3, #0
   155ac:	strd	r2, [r4]
   155b0:	bl	15524 <__generate_code_for_function@@Base>
   155b4:	ldrd	r2, [r4, #8]
   155b8:	adds	r2, r2, #1
   155bc:	adc	r3, r3, #0
   155c0:	strd	r2, [r4, #8]
   155c4:	pop	{r4, pc}
   155c8:	ldr	r4, [pc, #60]	; 1560c <__generate_code_for_main@@Base+0x80>
   155cc:	ldrd	r2, [r4, #-8]
   155d0:	adds	r2, r2, #1
   155d4:	adc	r3, r3, #0
   155d8:	strd	r2, [r4, #-8]
   155dc:	ldr	r3, [pc, #44]	; 15610 <__generate_code_for_main@@Base+0x84>
   155e0:	ldr	r3, [r3]
   155e4:	mov	r2, #46	; 0x2e
   155e8:	mov	r1, #1
   155ec:	ldr	r0, [pc, #32]	; 15614 <__generate_code_for_main@@Base+0x88>
   155f0:	bl	119cc <fwrite@plt>
   155f4:	ldrd	r2, [r4, #16]
   155f8:	adds	r2, r2, #1
   155fc:	adc	r3, r3, #0
   15600:	strd	r2, [r4, #16]
   15604:	mov	r0, #1
   15608:	bl	11a44 <exit@plt>
   1560c:	andeq	sl, r2, r0, asr #14
   15610:			; <UNDEFINED> instruction: 0x00029ab8
   15614:	andeq	r7, r1, r0, asr #29

00015618 <__generate_code@@Base>:
   15618:	push	{r4, r5, r6, lr}
   1561c:	mov	r5, r0
   15620:	mov	r6, r1
   15624:	ldr	r4, [pc, #80]	; 1567c <__generate_code@@Base+0x64>
   15628:	ldrd	r2, [r4, #-8]
   1562c:	adds	r2, r2, #1
   15630:	adc	r3, r3, #0
   15634:	strd	r2, [r4, #-8]
   15638:	ldr	r3, [r0, #4]
   1563c:	mov	r2, #21
   15640:	mov	r1, #1
   15644:	ldr	r0, [pc, #52]	; 15680 <__generate_code@@Base+0x68>
   15648:	bl	119cc <fwrite@plt>
   1564c:	ldrd	r2, [r4]
   15650:	adds	r2, r2, #1
   15654:	adc	r3, r3, #0
   15658:	strd	r2, [r4]
   1565c:	mov	r1, r6
   15660:	mov	r0, r5
   15664:	bl	1558c <__generate_code_for_main@@Base>
   15668:	ldrd	r2, [r4, #8]
   1566c:	adds	r2, r2, #1
   15670:	adc	r3, r3, #0
   15674:	strd	r2, [r4, #8]
   15678:	pop	{r4, r5, r6, pc}
   1567c:	andeq	sl, r2, r0, ror #14
   15680:	strdeq	r7, [r1], -r0

00015684 <generate_code@@Base>:
   15684:	push	{r4, r5, r6, lr}
   15688:	mov	r6, r0
   1568c:	ldr	r4, [pc, #96]	; 156f4 <generate_code@@Base+0x70>
   15690:	ldrd	r2, [r4]
   15694:	adds	r2, r2, #1
   15698:	adc	r3, r3, #0
   1569c:	strd	r2, [r4]
   156a0:	ldr	r0, [r0]
   156a4:	bl	14ca0 <build_ast@@Base>
   156a8:	mov	r5, r0
   156ac:	ldrd	r2, [r4, #8]
   156b0:	adds	r2, r2, #1
   156b4:	adc	r3, r3, #0
   156b8:	strd	r2, [r4, #8]
   156bc:	mov	r1, r0
   156c0:	mov	r0, r6
   156c4:	bl	15618 <__generate_code@@Base>
   156c8:	ldrd	r2, [r4, #16]
   156cc:	adds	r2, r2, #1
   156d0:	adc	r3, r3, #0
   156d4:	strd	r2, [r4, #16]
   156d8:	mov	r0, r5
   156dc:	bl	13958 <free_node@@Base>
   156e0:	ldrd	r2, [r4, #24]
   156e4:	adds	r2, r2, #1
   156e8:	adc	r3, r3, #0
   156ec:	strd	r2, [r4, #24]
   156f0:	pop	{r4, r5, r6, pc}
   156f4:	andeq	sl, r2, r0, ror r7
   156f8:	push	{r4, lr}
   156fc:	ldr	r0, [pc, #4]	; 15708 <generate_code@@Base+0x84>
   15700:	bl	17640 <__gcov_sort_n_vals@@Base+0x458>
   15704:	pop	{r4, pc}
   15708:	strdeq	r9, [r2], -ip
   1570c:	b	16938 <generate_code@@Base+0x12b4>
   15710:	push	{r4, r5, r6, lr}
   15714:	subs	r5, r1, #0
   15718:	popeq	{r4, r5, r6, pc}
   1571c:	mov	r4, r0
   15720:	bl	1570c <generate_code@@Base+0x88>
   15724:	ldrd	r2, [r4]
   15728:	adds	r0, r0, r2
   1572c:	adc	r1, r1, r3
   15730:	subs	r5, r5, #1
   15734:	strd	r0, [r4], #8
   15738:	bne	15720 <generate_code@@Base+0x9c>
   1573c:	pop	{r4, r5, r6, pc}
   15740:	ldr	r3, [pc, #20]	; 1575c <generate_code@@Base+0xd8>
   15744:	ldr	r2, [pc, #20]	; 15760 <generate_code@@Base+0xdc>
   15748:	add	r3, pc, r3
   1574c:	ldr	r3, [r3, r2]
   15750:	ldmib	r3, {r0, r3}
   15754:	add	r0, r0, r3
   15758:	bx	lr
   1575c:			; <UNDEFINED> instruction: 0x000138b0
   15760:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   15764:	ldr	r3, [pc, #28]	; 15788 <generate_code@@Base+0x104>
   15768:	ldr	r2, [pc, #28]	; 1578c <generate_code@@Base+0x108>
   1576c:	add	r3, pc, r3
   15770:	ldr	r3, [r3, r2]
   15774:	ldr	r2, [r3]
   15778:	cmp	r2, #0
   1577c:	ldrne	r0, [r3, #20]
   15780:	moveq	r0, #1
   15784:	bx	lr
   15788:	andeq	r3, r1, ip, lsl #17
   1578c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   15790:	bx	lr
   15794:	ldr	ip, [pc, #32]	; 157bc <generate_code@@Base+0x138>
   15798:	mov	r3, #32
   1579c:	teq	r0, r1
   157a0:	movmi	r2, ip
   157a4:	movpl	r2, #0
   157a8:	subs	r3, r3, #1
   157ac:	lsl	r1, r1, #1
   157b0:	eor	r0, r2, r0, lsl #1
   157b4:	bne	1579c <generate_code@@Base+0x118>
   157b8:	bx	lr
   157bc:	strbeq	r1, [r1], #3511	; 0xdb7
   157c0:	ldr	r3, [pc, #76]	; 15814 <generate_code@@Base+0x190>
   157c4:	ldr	r1, [pc, #76]	; 15818 <generate_code@@Base+0x194>
   157c8:	add	r3, pc, r3
   157cc:	push	{r4, r5, r6, lr}
   157d0:	mov	r5, r0
   157d4:	ldr	r4, [r3, r1]
   157d8:	lsl	r1, r0, #2
   157dc:	mov	r0, r4
   157e0:	mov	r2, #1
   157e4:	ldr	r3, [r0], #28
   157e8:	bl	119cc <fwrite@plt>
   157ec:	cmp	r0, #1
   157f0:	movne	r3, #1
   157f4:	ldr	r0, [r4, #8]
   157f8:	strne	r3, [r4, #20]
   157fc:	ldr	r3, [r4, #4]
   15800:	sub	r0, r0, r5
   15804:	add	r3, r3, r5
   15808:	str	r3, [r4, #4]
   1580c:	str	r0, [r4, #8]
   15810:	pop	{r4, r5, r6, pc}
   15814:	andeq	r3, r1, r0, lsr r8
   15818:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1581c:	ldr	r3, [pc, #76]	; 15870 <generate_code@@Base+0x1ec>
   15820:	ldr	r2, [pc, #76]	; 15874 <generate_code@@Base+0x1f0>
   15824:	add	r3, pc, r3
   15828:	push	{r4, r5, r6, lr}
   1582c:	mov	r5, r0
   15830:	ldr	r4, [r3, r2]
   15834:	ldr	r3, [r4, #8]
   15838:	cmp	r3, #1024	; 0x400
   1583c:	bcc	1585c <generate_code@@Base+0x1d8>
   15840:	mov	r0, #1024	; 0x400
   15844:	bl	157c0 <generate_code@@Base+0x13c>
   15848:	ldr	r3, [r4, #8]
   1584c:	cmp	r3, #0
   15850:	addne	r2, r4, #4096	; 0x1000
   15854:	ldrne	r2, [r2, #28]
   15858:	strne	r2, [r4, #28]
   1585c:	add	r0, r3, #7
   15860:	add	r3, r5, r3
   15864:	str	r3, [r4, #8]
   15868:	add	r0, r4, r0, lsl #2
   1586c:	pop	{r4, r5, r6, pc}
   15870:	ldrdeq	r3, [r1], -r4
   15874:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   15878:	ldr	r3, [pc, #172]	; 1592c <generate_code@@Base+0x2a8>
   1587c:	ldr	r2, [pc, #172]	; 15930 <generate_code@@Base+0x2ac>
   15880:	add	r3, pc, r3
   15884:	push	{r4, r5, r6, lr}
   15888:	mov	r5, r0
   1588c:	ldr	r4, [r3, r2]
   15890:	ldr	r3, [r4, #8]
   15894:	ldr	ip, [r4, #12]
   15898:	sub	ip, ip, r3
   1589c:	cmp	ip, r0
   158a0:	bcs	158fc <generate_code@@Base+0x278>
   158a4:	ldr	r2, [r4, #4]
   158a8:	cmp	ip, #0
   158ac:	add	r2, r2, r3
   158b0:	str	r2, [r4, #4]
   158b4:	addne	r2, r4, #28
   158b8:	mov	r0, r4
   158bc:	ldrne	r3, [r2, r3, lsl #2]
   158c0:	mov	r6, #0
   158c4:	strne	r3, [r4, #28]
   158c8:	ldr	r3, [r0], #28
   158cc:	mov	r2, #4096	; 0x1000
   158d0:	add	r0, r0, ip, lsl #2
   158d4:	mov	r1, #1
   158d8:	str	ip, [r4, #12]
   158dc:	str	r6, [r4, #8]
   158e0:	bl	119e4 <fread@plt>
   158e4:	ldr	r3, [r4, #12]
   158e8:	add	r0, r3, r0, lsr #2
   158ec:	cmp	r5, r0
   158f0:	str	r0, [r4, #12]
   158f4:	bhi	15910 <generate_code@@Base+0x28c>
   158f8:	ldr	r3, [r4, #8]
   158fc:	add	r0, r3, #7
   15900:	add	r5, r5, r3
   15904:	add	r0, r4, r0, lsl #2
   15908:	str	r5, [r4, #8]
   1590c:	pop	{r4, r5, r6, pc}
   15910:	ldr	r3, [r4, #16]
   15914:	str	r6, [r4, #12]
   15918:	add	r5, r5, r3
   1591c:	sub	r5, r5, r0
   15920:	str	r5, [r4, #16]
   15924:	mov	r0, r6
   15928:	pop	{r4, r5, r6, pc}
   1592c:	andeq	r3, r1, r8, ror r7
   15930:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   15934:	push	{r0, r1, r2, r3}
   15938:	ldr	r3, [pc, #52]	; 15974 <generate_code@@Base+0x2f0>
   1593c:	ldr	r1, [pc, #52]	; 15978 <generate_code@@Base+0x2f4>
   15940:	push	{lr}		; (str lr, [sp, #-4]!)
   15944:	add	r3, pc, r3
   15948:	sub	sp, sp, #12
   1594c:	add	r2, sp, #20
   15950:	str	r2, [sp, #4]
   15954:	ldr	r0, [r3, r1]
   15958:	ldr	r1, [sp, #16]
   1595c:	ldr	r0, [r0]
   15960:	bl	11ae0 <vfprintf@plt>
   15964:	add	sp, sp, #12
   15968:	pop	{lr}		; (ldr lr, [sp], #4)
   1596c:	add	sp, sp, #16
   15970:	bx	lr
   15974:			; <UNDEFINED> instruction: 0x000136b4
   15978:	andeq	r0, r0, r4, lsr #1
   1597c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15980:	subs	r6, r1, #0
   15984:	beq	159e0 <generate_code@@Base+0x35c>
   15988:	cmp	r2, #0
   1598c:	movne	r3, #0
   15990:	mov	r7, r2
   15994:	ldr	r8, [r6]
   15998:	addne	r5, r0, #12
   1599c:	movne	r4, r3
   159a0:	beq	159d0 <generate_code@@Base+0x34c>
   159a4:	ldr	r0, [r5, #4]!
   159a8:	add	r2, r6, r3, lsl #3
   159ac:	cmp	r0, #0
   159b0:	add	r9, r3, #1
   159b4:	add	r4, r4, #1
   159b8:	beq	159c8 <generate_code@@Base+0x344>
   159bc:	ldr	r0, [r2, #28]
   159c0:	bl	119a8 <free@plt>
   159c4:	mov	r3, r9
   159c8:	cmp	r7, r4
   159cc:	bne	159a4 <generate_code@@Base+0x320>
   159d0:	mov	r0, r6
   159d4:	bl	119a8 <free@plt>
   159d8:	mov	r0, r8
   159dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   159e0:	mov	r8, r6
   159e4:	b	159d8 <generate_code@@Base+0x354>
   159e8:	push	{r4, r5}
   159ec:	mov	r4, r0
   159f0:	mov	r5, r1
   159f4:	orrs	r3, r4, r5
   159f8:	beq	15a3c <generate_code@@Base+0x3b8>
   159fc:	cmp	r1, #0
   15a00:	clzeq	r1, r0
   15a04:	addeq	r1, r1, #32
   15a08:	clzne	r1, r1
   15a0c:	rsb	r3, r1, #63	; 0x3f
   15a10:	cmp	r3, #1
   15a14:	bls	15a3c <generate_code@@Base+0x3b8>
   15a18:	rsb	r2, r1, #61	; 0x3d
   15a1c:	rsb	r0, r2, #32
   15a20:	lsr	r3, r4, r2
   15a24:	sub	r2, r2, #32
   15a28:	orr	r3, r3, r5, lsl r0
   15a2c:	orr	r3, r3, r5, lsr r2
   15a30:	rsb	r1, r1, #1073741886	; 0x4000003e
   15a34:	and	r0, r3, #3
   15a38:	add	r0, r0, r1, lsl #2
   15a3c:	pop	{r4, r5}
   15a40:	bx	lr
   15a44:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15a48:	mov	r1, r3
   15a4c:	mov	sl, r0
   15a50:	mov	r0, r2
   15a54:	mov	r8, r2
   15a58:	mov	r9, r3
   15a5c:	bl	159e8 <generate_code@@Base+0x364>
   15a60:	add	r0, r0, r0, lsl #1
   15a64:	lsl	r0, r0, #3
   15a68:	add	r3, sl, r0
   15a6c:	ldr	r2, [sl, r0]
   15a70:	ldrd	r4, [r3, #16]
   15a74:	ldrd	r6, [r3, #8]
   15a78:	add	r2, r2, #1
   15a7c:	adds	r4, r4, r8
   15a80:	adc	r5, r5, r9
   15a84:	cmp	r8, r6
   15a88:	sbcs	r1, r9, r7
   15a8c:	str	r2, [sl, r0]
   15a90:	strd	r4, [r3, #16]
   15a94:	strdlt	r8, [r3, #8]
   15a98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a9c:	ldr	r3, [r1, #8]
   15aa0:	cmp	r3, #0
   15aa4:	bxeq	lr
   15aa8:	push	{r4, r5, r6, r7, r8, lr}
   15aac:	add	r2, r1, #6016	; 0x1780
   15ab0:	mov	r8, r1
   15ab4:	mov	r7, r0
   15ab8:	ldrd	r0, [r1, #24]
   15abc:	add	r2, r2, #32
   15ac0:	mov	r3, r8
   15ac4:	mov	ip, #0
   15ac8:	mov	r4, #0
   15acc:	mov	r5, #0
   15ad0:	str	ip, [r3, #40]	; 0x28
   15ad4:	strd	r0, [r3, #48]	; 0x30
   15ad8:	strd	r4, [r3, #56]	; 0x38
   15adc:	add	r3, r3, #24
   15ae0:	cmp	r2, r3
   15ae4:	bne	15ad0 <generate_code@@Base+0x44c>
   15ae8:	cmp	r7, #0
   15aec:	popeq	{r4, r5, r6, r7, r8, pc}
   15af0:	add	r8, r8, #40	; 0x28
   15af4:	ldr	r3, [r7, #16]
   15af8:	cmp	r3, #0
   15afc:	beq	15b84 <generate_code@@Base+0x500>
   15b00:	ldr	r2, [r7, #56]	; 0x38
   15b04:	cmp	r2, #0
   15b08:	beq	15b84 <generate_code@@Base+0x500>
   15b0c:	mov	r6, #0
   15b10:	b	15b20 <generate_code@@Base+0x49c>
   15b14:	add	r6, r6, #1
   15b18:	cmp	r2, r6
   15b1c:	beq	15b84 <generate_code@@Base+0x500>
   15b20:	ldr	r3, [r7, #60]	; 0x3c
   15b24:	ldr	r4, [r3, r6, lsl #2]
   15b28:	cmp	r4, #0
   15b2c:	beq	15b14 <generate_code@@Base+0x490>
   15b30:	ldr	r3, [r4]
   15b34:	cmp	r3, r7
   15b38:	bne	15b14 <generate_code@@Base+0x490>
   15b3c:	ldr	r3, [r4, #16]
   15b40:	cmp	r3, #0
   15b44:	beq	15b14 <generate_code@@Base+0x490>
   15b48:	mov	r5, #0
   15b4c:	ldr	r2, [r4, #20]
   15b50:	lsl	r3, r5, #3
   15b54:	add	r2, r2, r3
   15b58:	mov	r0, r8
   15b5c:	ldrd	r2, [r2]
   15b60:	bl	15a44 <generate_code@@Base+0x3c0>
   15b64:	ldr	r3, [r4, #16]
   15b68:	add	r5, r5, #1
   15b6c:	cmp	r3, r5
   15b70:	bhi	15b4c <generate_code@@Base+0x4c8>
   15b74:	ldr	r2, [r7, #56]	; 0x38
   15b78:	add	r6, r6, #1
   15b7c:	cmp	r2, r6
   15b80:	bne	15b20 <generate_code@@Base+0x49c>
   15b84:	ldr	r7, [r7, #4]
   15b88:	cmp	r7, #0
   15b8c:	bne	15af4 <generate_code@@Base+0x470>
   15b90:	pop	{r4, r5, r6, r7, r8, pc}
   15b94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b98:	sub	sp, sp, #12
   15b9c:	mov	r5, r0
   15ba0:	str	r0, [sp, #4]
   15ba4:	mov	r6, r2
   15ba8:	str	r2, [sp]
   15bac:	mov	r0, r1
   15bb0:	mov	r4, r1
   15bb4:	ldr	r2, [pc, #344]	; 15d14 <generate_code@@Base+0x690>
   15bb8:	mov	r1, #0
   15bbc:	bl	11aa4 <memset@plt>
   15bc0:	subs	r3, r5, #0
   15bc4:	mov	r5, #0
   15bc8:	str	r5, [r6]
   15bcc:	beq	15cf8 <generate_code@@Base+0x674>
   15bd0:	mov	r7, r5
   15bd4:	mov	r9, r5
   15bd8:	mov	r8, r3
   15bdc:	ldr	r0, [r8, #12]
   15be0:	bl	11a50 <strlen@plt>
   15be4:	cmp	r5, r0
   15be8:	ldrcc	r3, [sp]
   15bec:	strcc	r0, [r3]
   15bf0:	mov	r0, r7
   15bf4:	ldr	r1, [r8, #8]
   15bf8:	bl	15794 <generate_code@@Base+0x110>
   15bfc:	ldr	r6, [r8, #56]	; 0x38
   15c00:	mov	r1, r6
   15c04:	bl	15794 <generate_code@@Base+0x110>
   15c08:	cmp	r6, #0
   15c0c:	mov	r7, r0
   15c10:	beq	15ce0 <generate_code@@Base+0x65c>
   15c14:	ldr	r5, [r8, #60]	; 0x3c
   15c18:	add	r6, r5, r6, lsl #2
   15c1c:	b	15c40 <generate_code@@Base+0x5bc>
   15c20:	mov	r0, r7
   15c24:	mov	r1, r9
   15c28:	bl	15794 <generate_code@@Base+0x110>
   15c2c:	mov	r1, r9
   15c30:	bl	15794 <generate_code@@Base+0x110>
   15c34:	mov	r7, r0
   15c38:	cmp	r6, r5
   15c3c:	beq	15ce0 <generate_code@@Base+0x65c>
   15c40:	ldr	fp, [r5], #4
   15c44:	cmp	fp, #0
   15c48:	beq	15c20 <generate_code@@Base+0x59c>
   15c4c:	ldr	r3, [fp]
   15c50:	cmp	r3, r8
   15c54:	bne	15c20 <generate_code@@Base+0x59c>
   15c58:	mov	r0, r7
   15c5c:	ldr	r1, [fp, #12]
   15c60:	bl	15794 <generate_code@@Base+0x110>
   15c64:	ldr	r1, [fp, #8]
   15c68:	bl	15794 <generate_code@@Base+0x110>
   15c6c:	ldr	r3, [r8, #16]
   15c70:	cmp	r3, #0
   15c74:	mov	r7, r0
   15c78:	beq	15c38 <generate_code@@Base+0x5b4>
   15c7c:	ldr	sl, [fp, #16]
   15c80:	ldr	r3, [r4, #8]
   15c84:	mov	r1, sl
   15c88:	add	r3, r3, sl
   15c8c:	str	r3, [r4, #8]
   15c90:	bl	15794 <generate_code@@Base+0x110>
   15c94:	cmp	sl, #0
   15c98:	mov	r7, r0
   15c9c:	beq	15c38 <generate_code@@Base+0x5b4>
   15ca0:	ldr	ip, [fp, #20]
   15ca4:	ldrd	r2, [r4, #16]
   15ca8:	add	lr, ip, sl, lsl #3
   15cac:	ldrd	r0, [ip]
   15cb0:	ldrd	sl, [r4, #24]
   15cb4:	adds	r2, r2, r0
   15cb8:	adc	r3, r3, r1
   15cbc:	strd	r2, [r4, #16]
   15cc0:	ldrd	r0, [ip], #8
   15cc4:	cmp	sl, r0
   15cc8:	sbcs	sl, fp, r1
   15ccc:	strdlt	r0, [r4, #24]
   15cd0:	cmp	lr, ip
   15cd4:	bne	15cac <generate_code@@Base+0x628>
   15cd8:	cmp	r6, r5
   15cdc:	bne	15c40 <generate_code@@Base+0x5bc>
   15ce0:	ldr	r8, [r8, #4]
   15ce4:	cmp	r8, #0
   15ce8:	beq	15cfc <generate_code@@Base+0x678>
   15cec:	ldr	r3, [sp]
   15cf0:	ldr	r5, [r3]
   15cf4:	b	15bdc <generate_code@@Base+0x558>
   15cf8:	ldr	r7, [sp, #4]
   15cfc:	ldr	r0, [sp, #4]
   15d00:	mov	r1, r4
   15d04:	bl	15a9c <generate_code@@Base+0x418>
   15d08:	mov	r0, r7
   15d0c:	add	sp, sp, #12
   15d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d14:	andeq	r1, r0, r8, asr #15
   15d18:	push	{r4, r5, r6, lr}
   15d1c:	mov	r4, r0
   15d20:	ldr	r0, [pc, #172]	; 15dd4 <generate_code@@Base+0x750>
   15d24:	add	r0, pc, r0
   15d28:	bl	119f0 <getenv@plt>
   15d2c:	subs	r3, r0, #0
   15d30:	beq	15d3c <generate_code@@Base+0x6b8>
   15d34:	bl	11af8 <atoi@plt>
   15d38:	bic	r3, r0, r0, asr #31
   15d3c:	ldr	r0, [pc, #148]	; 15dd8 <generate_code@@Base+0x754>
   15d40:	str	r3, [r4, #8]
   15d44:	add	r0, pc, r0
   15d48:	bl	119f0 <getenv@plt>
   15d4c:	subs	r6, r0, #0
   15d50:	beq	15da4 <generate_code@@Base+0x720>
   15d54:	bl	11a50 <strlen@plt>
   15d58:	subs	r5, r0, #0
   15d5c:	beq	15da4 <generate_code@@Base+0x720>
   15d60:	sub	r3, r5, #1
   15d64:	ldrb	r2, [r6, r3]
   15d68:	cmp	r2, #47	; 0x2f
   15d6c:	beq	15d98 <generate_code@@Base+0x714>
   15d70:	ldr	r0, [r4, #4]
   15d74:	str	r5, [r4, #12]
   15d78:	add	r0, r0, #2
   15d7c:	add	r0, r0, r5
   15d80:	bl	119fc <malloc@plt>
   15d84:	mov	r2, r5
   15d88:	mov	r1, r6
   15d8c:	str	r0, [r4]
   15d90:	pop	{r4, r5, r6, lr}
   15d94:	b	119b4 <memcpy@plt>
   15d98:	cmp	r3, #0
   15d9c:	movne	r5, r3
   15da0:	bne	15d70 <generate_code@@Base+0x6ec>
   15da4:	ldr	r3, [r4, #8]
   15da8:	cmp	r3, #0
   15dac:	ldrne	r6, [pc, #40]	; 15ddc <generate_code@@Base+0x758>
   15db0:	movne	r5, #1
   15db4:	addne	r6, pc, r6
   15db8:	bne	15d70 <generate_code@@Base+0x6ec>
   15dbc:	ldr	r0, [r4, #4]
   15dc0:	str	r3, [r4, #12]
   15dc4:	add	r0, r0, #2
   15dc8:	bl	119fc <malloc@plt>
   15dcc:	str	r0, [r4]
   15dd0:	pop	{r4, r5, r6, pc}
   15dd4:	andeq	r2, r0, r4, lsr r2
   15dd8:	andeq	r2, r0, r8, lsr #4
   15ddc:	andeq	r2, r0, r0, lsr #3
   15de0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15de4:	sub	sp, sp, #6080	; 0x17c0
   15de8:	sub	sp, sp, #44	; 0x2c
   15dec:	add	r3, sp, #72	; 0x48
   15df0:	mov	r4, r0
   15df4:	str	r0, [sp, #64]	; 0x40
   15df8:	str	r1, [sp, #60]	; 0x3c
   15dfc:	mov	r0, r3
   15e00:	ldr	r2, [pc, #1068]	; 16234 <generate_code@@Base+0xbb0>
   15e04:	mov	r1, #0
   15e08:	str	r3, [sp, #68]	; 0x44
   15e0c:	bl	11aa4 <memset@plt>
   15e10:	add	r3, r4, #6016	; 0x1780
   15e14:	add	r3, r3, #8
   15e18:	add	r2, sp, #2016	; 0x7e0
   15e1c:	mov	sl, #251	; 0xfb
   15e20:	add	r2, r2, #8
   15e24:	mov	fp, #0
   15e28:	str	r3, [sp, #56]	; 0x38
   15e2c:	add	r3, sp, #72	; 0x48
   15e30:	str	r2, [sp, #44]	; 0x2c
   15e34:	str	r3, [sp, #48]	; 0x30
   15e38:	mov	r2, #0
   15e3c:	mov	r3, #0
   15e40:	mov	r5, sl
   15e44:	mov	r0, fp
   15e48:	strd	r2, [sp, #24]
   15e4c:	str	sl, [sp, #52]	; 0x34
   15e50:	ldr	r9, [sp, #56]	; 0x38
   15e54:	str	r5, [sp, #40]	; 0x28
   15e58:	ldr	sl, [sp, #60]	; 0x3c
   15e5c:	ldrd	r2, [r9, #16]
   15e60:	ldr	r4, [r9]
   15e64:	str	r4, [sp, #4]
   15e68:	strd	r2, [sp, #8]
   15e6c:	ldr	r3, [sp, #4]
   15e70:	cmp	r3, #0
   15e74:	beq	16120 <generate_code@@Base+0xa9c>
   15e78:	cmp	fp, #0
   15e7c:	bne	16004 <generate_code@@Base+0x980>
   15e80:	ldr	r5, [sp, #40]	; 0x28
   15e84:	cmp	r5, #0
   15e88:	blt	16210 <generate_code@@Base+0xb8c>
   15e8c:	add	ip, r5, r5, lsl #1
   15e90:	ldr	fp, [sl, ip, lsl #3]
   15e94:	add	ip, sl, ip, lsl #3
   15e98:	cmp	fp, #0
   15e9c:	bne	16204 <generate_code@@Base+0xb80>
   15ea0:	mov	r3, ip
   15ea4:	ldr	r4, [sp, #4]
   15ea8:	b	15ebc <generate_code@@Base+0x838>
   15eac:	ldr	fp, [r3]
   15eb0:	mov	ip, r3
   15eb4:	cmp	fp, #0
   15eb8:	bne	161fc <generate_code@@Base+0xb78>
   15ebc:	subs	r5, r5, #1
   15ec0:	sub	r3, r3, #24
   15ec4:	bcs	15eac <generate_code@@Base+0x828>
   15ec8:	ldr	sl, [sp, #52]	; 0x34
   15ecc:	mov	r8, r0
   15ed0:	mov	r5, r4
   15ed4:	lsl	r4, sl, #1
   15ed8:	ldr	r3, [sp, #44]	; 0x2c
   15edc:	add	lr, r4, sl
   15ee0:	sub	ip, r3, #1952	; 0x7a0
   15ee4:	lsl	lr, lr, #3
   15ee8:	add	ip, ip, lr
   15eec:	ldrd	r0, [sp, #8]
   15ef0:	add	lr, r3, lr
   15ef4:	ldrd	r2, [ip, #16]
   15ef8:	ldr	r6, [lr, #-1952]	; 0xfffff860
   15efc:	adds	r0, r0, r2
   15f00:	adc	r1, r1, r3
   15f04:	mov	r2, r0
   15f08:	mov	r3, r1
   15f0c:	ldrd	r0, [ip, #8]
   15f10:	strd	r2, [ip, #16]
   15f14:	ldr	r3, [sp, #56]	; 0x38
   15f18:	add	r5, r6, r5
   15f1c:	str	r5, [lr, #-1952]	; 0xfffff860
   15f20:	orrs	lr, r0, r1
   15f24:	ldrd	r2, [r3, #8]
   15f28:	beq	15f38 <generate_code@@Base+0x8b4>
   15f2c:	cmp	r2, r0
   15f30:	sbcs	r1, r3, r1
   15f34:	bge	15f4c <generate_code@@Base+0x8c8>
   15f38:	ldr	r1, [sp, #44]	; 0x2c
   15f3c:	add	r0, r4, sl
   15f40:	sub	r1, r1, #1952	; 0x7a0
   15f44:	add	r1, r1, r0, lsl #3
   15f48:	strd	r2, [r1, #8]
   15f4c:	add	lr, r4, sl
   15f50:	ldr	r3, [sp, #68]	; 0x44
   15f54:	lsl	lr, lr, #3
   15f58:	add	ip, r3, lr
   15f5c:	ldr	r3, [sp, #64]	; 0x40
   15f60:	add	lr, r3, lr
   15f64:	b	15fb4 <generate_code@@Base+0x930>
   15f68:	ldrd	r0, [ip, #-8]
   15f6c:	ldrd	r2, [lr, #-8]
   15f70:	ldrd	r4, [ip, #-16]
   15f74:	adds	r6, r0, r2
   15f78:	adc	r7, r1, r3
   15f7c:	ldr	r2, [lr, #-24]	; 0xffffffe8
   15f80:	ldr	r3, [ip, #-24]	; 0xffffffe8
   15f84:	orrs	r1, r4, r5
   15f88:	add	r3, r3, r2
   15f8c:	str	r3, [ip, #-24]	; 0xffffffe8
   15f90:	strd	r6, [ip, #-8]
   15f94:	ldrd	r2, [lr, #-16]
   15f98:	beq	15fa8 <generate_code@@Base+0x924>
   15f9c:	cmp	r2, r4
   15fa0:	sbcs	r1, r3, r5
   15fa4:	bge	15fac <generate_code@@Base+0x928>
   15fa8:	strd	r2, [ip, #-16]
   15fac:	sub	ip, ip, #24
   15fb0:	sub	lr, lr, #24
   15fb4:	subs	sl, sl, #1
   15fb8:	bpl	15f68 <generate_code@@Base+0x8e4>
   15fbc:	ldr	r3, [sp, #44]	; 0x2c
   15fc0:	add	r0, r8, r8, lsl #1
   15fc4:	sub	r3, r3, #1952	; 0x7a0
   15fc8:	add	r3, r3, r0, lsl #3
   15fcc:	ldrd	r6, [sp, #24]
   15fd0:	ldrd	r4, [r3, #16]
   15fd4:	ldr	r1, [sp, #68]	; 0x44
   15fd8:	ldr	r0, [sp, #64]	; 0x40
   15fdc:	adds	r6, r6, r4
   15fe0:	adc	r7, r7, r5
   15fe4:	mov	r4, r6
   15fe8:	mov	r5, r7
   15fec:	ldr	r2, [pc, #576]	; 16234 <generate_code@@Base+0xbb0>
   15ff0:	strd	r4, [r3, #16]
   15ff4:	bl	119b4 <memcpy@plt>
   15ff8:	add	sp, sp, #6080	; 0x17c0
   15ffc:	add	sp, sp, #44	; 0x2c
   16000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16004:	ldr	r3, [sp, #40]	; 0x28
   16008:	add	ip, r3, r3, lsl #1
   1600c:	add	ip, sl, ip, lsl #3
   16010:	ldr	lr, [sp, #4]
   16014:	cmp	fp, lr
   16018:	bcc	16190 <generate_code@@Base+0xb0c>
   1601c:	ldrd	r2, [r9, #8]
   16020:	ldrd	r0, [ip, #8]
   16024:	adds	r4, r2, r0
   16028:	adc	r5, r3, r1
   1602c:	cmp	fp, lr
   16030:	strd	r4, [sp, #16]
   16034:	bls	16220 <generate_code@@Base+0xb9c>
   16038:	ldrd	r6, [sp, #24]
   1603c:	mov	r2, fp
   16040:	mov	r3, #0
   16044:	umull	r0, r1, lr, r6
   16048:	mla	r1, lr, r7, r1
   1604c:	bl	1771c <__gcov_sort_n_vals@@Base+0x534>
   16050:	mov	r2, r0
   16054:	subs	r0, r6, r2
   16058:	mov	r3, r1
   1605c:	sbc	r1, r7, r3
   16060:	strd	r0, [sp, #24]
   16064:	ldr	r1, [sp, #4]
   16068:	mov	r0, #0
   1606c:	sub	fp, fp, r1
   16070:	mov	r8, r1
   16074:	mov	r1, #0
   16078:	str	r1, [sp, #4]
   1607c:	mov	r1, #0
   16080:	ldrd	r6, [sp, #8]
   16084:	strd	r0, [sp, #8]
   16088:	adds	r4, r2, r6
   1608c:	adc	r5, r3, r7
   16090:	ldrd	r0, [sp, #16]
   16094:	strd	r4, [sp, #32]
   16098:	bl	159e8 <generate_code@@Base+0x364>
   1609c:	ldr	r3, [sp, #48]	; 0x30
   160a0:	ldrd	r4, [sp, #32]
   160a4:	add	r1, r0, r0, lsl #1
   160a8:	lsl	r1, r1, #3
   160ac:	add	ip, r3, r1
   160b0:	ldr	r3, [sp, #44]	; 0x2c
   160b4:	ldrd	r6, [ip, #8]
   160b8:	add	r1, r3, r1
   160bc:	ldrd	r2, [ip, #16]
   160c0:	adds	r2, r2, r4
   160c4:	adc	r3, r3, r5
   160c8:	strd	r2, [sp, #32]
   160cc:	ldrd	r2, [sp, #16]
   160d0:	cmp	r2, r6
   160d4:	sbcs	lr, r3, r7
   160d8:	movlt	lr, #1
   160dc:	movge	lr, #0
   160e0:	orrs	r4, r6, r7
   160e4:	ldr	r4, [r1, #-1952]	; 0xfffff860
   160e8:	orreq	lr, lr, #1
   160ec:	add	r8, r4, r8
   160f0:	ldrd	r4, [sp, #32]
   160f4:	cmp	lr, #0
   160f8:	str	r8, [r1, #-1952]	; 0xfffff860
   160fc:	strd	r4, [ip, #16]
   16100:	strdne	r2, [ip, #8]
   16104:	cmp	fp, #0
   16108:	ldreq	r3, [sp, #40]	; 0x28
   1610c:	subeq	r3, r3, #1
   16110:	streq	r3, [sp, #40]	; 0x28
   16114:	ldr	r3, [sp, #4]
   16118:	cmp	r3, #0
   1611c:	bne	15e78 <generate_code@@Base+0x7f4>
   16120:	ldr	r3, [sp, #52]	; 0x34
   16124:	ldr	r5, [sp, #40]	; 0x28
   16128:	sub	r3, r3, #1
   1612c:	str	r3, [sp, #52]	; 0x34
   16130:	cmn	r3, #1
   16134:	ldr	r3, [sp, #56]	; 0x38
   16138:	sub	r3, r3, #24
   1613c:	str	r3, [sp, #56]	; 0x38
   16140:	bne	15e50 <generate_code@@Base+0x7cc>
   16144:	cmp	fp, #0
   16148:	mov	r9, r5
   1614c:	subne	r9, r5, #1
   16150:	cmp	r9, #0
   16154:	mov	r8, r0
   16158:	blt	15fbc <generate_code@@Base+0x938>
   1615c:	ldr	r2, [sp, #60]	; 0x3c
   16160:	add	r3, r9, r9, lsl #1
   16164:	sub	r0, r2, #24
   16168:	add	r1, r2, r3, lsl #3
   1616c:	ldrd	r2, [sp, #24]
   16170:	ldrd	r4, [r1, #16]
   16174:	sub	r1, r1, #24
   16178:	adds	r2, r2, r4
   1617c:	adc	r3, r3, r5
   16180:	cmp	r0, r1
   16184:	bne	16170 <generate_code@@Base+0xaec>
   16188:	strd	r2, [sp, #24]
   1618c:	b	15fbc <generate_code@@Base+0x938>
   16190:	ldrd	r2, [sp, #8]
   16194:	ldrd	r6, [ip, #8]
   16198:	ldrd	r4, [r9, #8]
   1619c:	umull	r0, r1, fp, r2
   161a0:	ldr	r8, [sp, #4]
   161a4:	adds	r4, r4, r6
   161a8:	adc	r5, r5, r7
   161ac:	mla	r1, fp, r3, r1
   161b0:	mov	r2, r8
   161b4:	mov	r3, #0
   161b8:	strd	r4, [sp, #16]
   161bc:	bl	1771c <__gcov_sort_n_vals@@Base+0x534>
   161c0:	sub	r3, r8, fp
   161c4:	str	r3, [sp, #4]
   161c8:	ldrd	r2, [sp, #8]
   161cc:	mov	r8, fp
   161d0:	mov	fp, #0
   161d4:	subs	r2, r2, r0
   161d8:	sbc	r3, r3, r1
   161dc:	mov	r6, r0
   161e0:	mov	r7, r1
   161e4:	mov	r0, #0
   161e8:	mov	r1, #0
   161ec:	strd	r2, [sp, #8]
   161f0:	ldrd	r2, [sp, #24]
   161f4:	strd	r0, [sp, #24]
   161f8:	b	16088 <generate_code@@Base+0xa04>
   161fc:	str	r5, [sp, #40]	; 0x28
   16200:	str	r4, [sp, #4]
   16204:	ldrd	r2, [ip, #16]
   16208:	strd	r2, [sp, #24]
   1620c:	b	16010 <generate_code@@Base+0x98c>
   16210:	ldr	sl, [sp, #52]	; 0x34
   16214:	mov	r8, r0
   16218:	ldr	r5, [sp, #4]
   1621c:	b	15ed4 <generate_code@@Base+0x850>
   16220:	mov	r0, #0
   16224:	mov	r1, #0
   16228:	ldrd	r2, [sp, #24]
   1622c:	strd	r0, [sp, #24]
   16230:	b	16064 <generate_code@@Base+0x9e0>
   16234:	andeq	r1, r0, r0, lsr #15
   16238:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1623c:	ldrb	r4, [r0]
   16240:	cmp	r4, #47	; 0x2f
   16244:	addeq	r5, r0, #1
   16248:	ldrbeq	r4, [r0, #1]
   1624c:	movne	r5, r0
   16250:	cmp	r4, #0
   16254:	beq	162a8 <generate_code@@Base+0xc24>
   16258:	mov	r6, r0
   1625c:	ldr	sl, [pc, #144]	; 162f4 <generate_code@@Base+0xc70>
   16260:	mov	r8, #0
   16264:	mov	r7, #47	; 0x2f
   16268:	b	16278 <generate_code@@Base+0xbf4>
   1626c:	ldrb	r4, [r5, #1]!
   16270:	cmp	r4, #0
   16274:	beq	162a8 <generate_code@@Base+0xc24>
   16278:	cmp	r4, #47	; 0x2f
   1627c:	bne	1626c <generate_code@@Base+0xbe8>
   16280:	strb	r8, [r5]
   16284:	mov	r1, #0
   16288:	mov	r0, r6
   1628c:	bl	11abc <access@plt>
   16290:	cmn	r0, #1
   16294:	beq	162b4 <generate_code@@Base+0xc30>
   16298:	strb	r7, [r5]
   1629c:	ldrb	r4, [r5, #1]!
   162a0:	cmp	r4, #0
   162a4:	bne	16278 <generate_code@@Base+0xbf4>
   162a8:	mov	r9, #0
   162ac:	mov	r0, r9
   162b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   162b4:	mov	r1, sl
   162b8:	mov	r0, r6
   162bc:	bl	11a8c <mkdir@plt>
   162c0:	cmn	r0, #1
   162c4:	mov	r9, r0
   162c8:	bne	16298 <generate_code@@Base+0xc14>
   162cc:	bl	11a74 <__errno_location@plt>
   162d0:	ldr	r3, [r0]
   162d4:	cmp	r3, #17
   162d8:	beq	16298 <generate_code@@Base+0xc14>
   162dc:	ldr	r0, [pc, #20]	; 162f8 <generate_code@@Base+0xc74>
   162e0:	mov	r1, r6
   162e4:	add	r0, pc, r0
   162e8:	bl	15934 <generate_code@@Base+0x2b0>
   162ec:	strb	r4, [r5]
   162f0:	b	162ac <generate_code@@Base+0xc28>
   162f4:	andeq	r0, r0, sp, ror #3
   162f8:	muleq	r0, r4, ip
   162fc:	ldr	r3, [pc, #124]	; 16380 <generate_code@@Base+0xcfc>
   16300:	cmp	r1, r3
   16304:	beq	16378 <generate_code@@Base+0xcf4>
   16308:	cmp	r2, #0
   1630c:	push	{r4, r5, lr}
   16310:	sub	sp, sp, #12
   16314:	ldreq	r2, [r0]
   16318:	lsr	r3, r1, #24
   1631c:	ldr	r0, [pc, #96]	; 16384 <generate_code@@Base+0xd00>
   16320:	lsr	r5, r1, #16
   16324:	lsr	r4, r1, #8
   16328:	strb	r1, [sp, #3]
   1632c:	strb	r3, [sp]
   16330:	mov	r1, #53	; 0x35
   16334:	mov	r3, #42	; 0x2a
   16338:	mov	lr, #54	; 0x36
   1633c:	mov	ip, #48	; 0x30
   16340:	strb	r1, [sp, #6]
   16344:	strb	r3, [sp, #7]
   16348:	mov	r1, r2
   1634c:	mov	r3, sp
   16350:	add	r2, sp, #4
   16354:	add	r0, pc, r0
   16358:	strb	r5, [sp, #1]
   1635c:	strb	r4, [sp, #2]
   16360:	strb	lr, [sp, #4]
   16364:	strb	ip, [sp, #5]
   16368:	bl	15934 <generate_code@@Base+0x2b0>
   1636c:	mov	r0, #0
   16370:	add	sp, sp, #12
   16374:	pop	{r4, r5, pc}
   16378:	mov	r0, #1
   1637c:	bx	lr
   16380:	ldrtcc	r3, [r0], -sl, lsr #10
   16384:	andeq	r1, r0, ip, asr #24
   16388:	ldr	r2, [r2, #16]
   1638c:	push	{r4, r5, r6, lr}
   16390:	cmp	r2, #0
   16394:	mov	r6, r3
   16398:	ldr	ip, [sp, #16]
   1639c:	beq	16468 <generate_code@@Base+0xde4>
   163a0:	ldr	r3, [r3, #12]
   163a4:	cmp	r1, #0
   163a8:	addeq	r2, r3, #1
   163ac:	streq	r2, [r6, #12]
   163b0:	cmp	r3, #0
   163b4:	beq	1640c <generate_code@@Base+0xd88>
   163b8:	ldrd	r0, [ip, #16]
   163bc:	ldrd	r2, [r6, #16]
   163c0:	ldrd	r4, [r6, #24]
   163c4:	adds	r2, r2, r0
   163c8:	adc	r3, r3, r1
   163cc:	strd	r2, [r6, #16]
   163d0:	ldrd	r0, [ip, #24]
   163d4:	cmp	r4, r0
   163d8:	sbcs	r3, r5, r1
   163dc:	blt	1648c <generate_code@@Base+0xe08>
   163e0:	ldrd	r2, [r6, #32]
   163e4:	adds	r2, r2, r0
   163e8:	adc	r3, r3, r1
   163ec:	strd	r2, [r6, #32]
   163f0:	add	r1, ip, #40	; 0x28
   163f4:	add	r0, r6, #40	; 0x28
   163f8:	bl	15de0 <generate_code@@Base+0x75c>
   163fc:	ldr	r3, [sp, #20]
   16400:	mov	r0, #0
   16404:	str	r3, [r6]
   16408:	pop	{r4, r5, r6, pc}
   1640c:	ldr	r1, [ip, #8]
   16410:	ldrd	r2, [r6, #16]
   16414:	str	r1, [r6, #8]
   16418:	ldrd	r0, [ip, #16]
   1641c:	ldrd	r4, [r6, #24]
   16420:	adds	r2, r2, r0
   16424:	adc	r3, r3, r1
   16428:	strd	r2, [r6, #16]
   1642c:	ldrd	r0, [ip, #24]
   16430:	cmp	r4, r0
   16434:	sbcs	r3, r5, r1
   16438:	bge	164a8 <generate_code@@Base+0xe24>
   1643c:	ldrd	r2, [r6, #32]
   16440:	strd	r0, [r6, #24]
   16444:	ldrd	r0, [ip, #24]
   16448:	adds	r2, r2, r0
   1644c:	adc	r3, r3, r1
   16450:	strd	r2, [r6, #32]
   16454:	add	r1, ip, #40	; 0x28
   16458:	ldr	r2, [pc, #92]	; 164bc <generate_code@@Base+0xe38>
   1645c:	add	r0, r6, #40	; 0x28
   16460:	bl	119b4 <memcpy@plt>
   16464:	b	163fc <generate_code@@Base+0xd78>
   16468:	ldr	r3, [r3, #12]
   1646c:	cmp	r3, #0
   16470:	beq	163fc <generate_code@@Base+0xd78>
   16474:	mov	r1, r0
   16478:	ldr	r0, [pc, #64]	; 164c0 <generate_code@@Base+0xe3c>
   1647c:	add	r0, pc, r0
   16480:	bl	15934 <generate_code@@Base+0x2b0>
   16484:	mvn	r0, #0
   16488:	pop	{r4, r5, r6, pc}
   1648c:	ldrd	r2, [r6, #32]
   16490:	strd	r0, [r6, #24]
   16494:	ldrd	r0, [ip, #24]
   16498:	adds	r2, r2, r0
   1649c:	adc	r3, r3, r1
   164a0:	strd	r2, [r6, #32]
   164a4:	b	163f0 <generate_code@@Base+0xd6c>
   164a8:	ldrd	r2, [r6, #32]
   164ac:	adds	r2, r2, r0
   164b0:	adc	r3, r3, r1
   164b4:	strd	r2, [r6, #32]
   164b8:	b	16454 <generate_code@@Base+0xdd0>
   164bc:	andeq	r1, r0, r0, lsr #15
   164c0:	andeq	r1, r0, ip, asr fp
   164c4:	ldr	ip, [pc, #52]	; 16500 <generate_code@@Base+0xe7c>
   164c8:	ldr	r3, [pc, #52]	; 16504 <generate_code@@Base+0xe80>
   164cc:	add	ip, pc, ip
   164d0:	push	{r4, lr}
   164d4:	mov	lr, #0
   164d8:	ldr	r3, [ip, r3]
   164dc:	mvn	r4, #0
   164e0:	mov	r2, lr
   164e4:	mov	r1, lr
   164e8:	str	r4, [r3, #24]
   164ec:	str	lr, [r3, #4]
   164f0:	str	lr, [r3, #8]
   164f4:	ldr	r0, [r3]
   164f8:	pop	{r4, lr}
   164fc:	b	11b04 <fseek@plt>
   16500:	andeq	r2, r1, ip, lsr #22
   16504:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   16508:	push	{r4, r5, r6, r7, lr}
   1650c:	sub	sp, sp, #108	; 0x6c
   16510:	mov	r4, #0
   16514:	mov	r7, r0
   16518:	strh	r4, [sp, #2]
   1651c:	str	r4, [sp, #4]
   16520:	str	r4, [sp, #8]
   16524:	bl	11a38 <getpid@plt>
   16528:	ldr	r3, [pc, #240]	; 16620 <generate_code@@Base+0xf9c>
   1652c:	ldr	ip, [pc, #240]	; 16624 <generate_code@@Base+0xfa0>
   16530:	add	r3, pc, r3
   16534:	mvn	lr, #0
   16538:	mov	r6, #1
   1653c:	ldr	r2, [pc, #228]	; 16628 <generate_code@@Base+0xfa4>
   16540:	mov	r1, #66	; 0x42
   16544:	str	r0, [sp, #12]
   16548:	ldr	r5, [r3, ip]
   1654c:	mov	r0, r7
   16550:	strh	r6, [sp]
   16554:	str	r4, [r5, #4]
   16558:	str	r4, [r5, #12]
   1655c:	str	r4, [r5, #8]
   16560:	str	r4, [r5, #20]
   16564:	str	lr, [r5, #16]
   16568:	bl	11a2c <open@plt>
   1656c:	subs	r6, r0, #0
   16570:	movlt	r0, r4
   16574:	blt	165f4 <generate_code@@Base+0xf70>
   16578:	mov	r7, sp
   1657c:	mov	r4, #7
   16580:	mov	r2, r7
   16584:	mov	r1, r4
   16588:	mov	r0, r6
   1658c:	bl	11a98 <fcntl@plt>
   16590:	cmp	r0, #0
   16594:	beq	165a8 <generate_code@@Base+0xf24>
   16598:	bl	11a74 <__errno_location@plt>
   1659c:	ldr	r3, [r0]
   165a0:	cmp	r3, #4
   165a4:	beq	16580 <generate_code@@Base+0xefc>
   165a8:	ldr	r1, [pc, #124]	; 1662c <generate_code@@Base+0xfa8>
   165ac:	mov	r0, r6
   165b0:	add	r1, pc, r1
   165b4:	bl	1196c <fdopen@plt>
   165b8:	mov	r4, r0
   165bc:	cmp	r4, #0
   165c0:	mov	r0, r6
   165c4:	str	r4, [r5]
   165c8:	beq	165fc <generate_code@@Base+0xf78>
   165cc:	add	r1, sp, #16
   165d0:	bl	179e8 <__libc_csu_fini@@Base+0x1c>
   165d4:	cmp	r0, #0
   165d8:	blt	16608 <generate_code@@Base+0xf84>
   165dc:	mov	r4, #1
   165e0:	ldr	r0, [r5]
   165e4:	mov	r1, #0
   165e8:	str	r4, [r5, #24]
   165ec:	bl	11984 <setbuf@plt>
   165f0:	mov	r0, r4
   165f4:	add	sp, sp, #108	; 0x6c
   165f8:	pop	{r4, r5, r6, r7, pc}
   165fc:	bl	11b28 <close@plt>
   16600:	mov	r0, r4
   16604:	b	165f4 <generate_code@@Base+0xf70>
   16608:	mov	r4, #0
   1660c:	ldr	r0, [r5]
   16610:	bl	11ac8 <fclose@plt>
   16614:	str	r4, [r5]
   16618:	mov	r0, r4
   1661c:	b	165f4 <generate_code@@Base+0xf70>
   16620:	andeq	r2, r1, r8, asr #21
   16624:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   16628:			; <UNDEFINED> instruction: 0x000001b6
   1662c:	andeq	r1, r0, r4, asr sl
   16630:	push	{r4, r5, r6, lr}
   16634:	mov	r4, r1
   16638:	ldr	r5, [pc, #244]	; 16734 <generate_code@@Base+0x10b0>
   1663c:	ldr	ip, [r4, #8]
   16640:	ldr	lr, [r4, #12]
   16644:	ldr	r6, [r4]
   16648:	cmp	ip, #0
   1664c:	mov	r1, r0
   16650:	add	r5, pc, r5
   16654:	add	r0, r6, lr
   16658:	ble	16694 <generate_code@@Base+0x1010>
   1665c:	ldrb	r3, [r1]
   16660:	cmp	r3, #47	; 0x2f
   16664:	addeq	r2, r1, #1
   16668:	ldrbeq	r3, [r1, #1]
   1666c:	movne	r2, r1
   16670:	cmp	r3, #0
   16674:	beq	16694 <generate_code@@Base+0x1010>
   16678:	cmp	r3, #47	; 0x2f
   1667c:	moveq	r1, r2
   16680:	ldrb	r3, [r2, #1]!
   16684:	subeq	ip, ip, #1
   16688:	cmp	r3, #0
   1668c:	cmpne	ip, #0
   16690:	bne	16678 <generate_code@@Base+0xff4>
   16694:	cmp	lr, #0
   16698:	beq	166b0 <generate_code@@Base+0x102c>
   1669c:	ldrb	r3, [r1]
   166a0:	cmp	r3, #47	; 0x2f
   166a4:	addne	r0, r0, #1
   166a8:	movne	r3, #47	; 0x2f
   166ac:	strbne	r3, [r6, lr]
   166b0:	bl	119d8 <strcpy@plt>
   166b4:	ldr	r0, [r4]
   166b8:	bl	16508 <generate_code@@Base+0xe84>
   166bc:	cmp	r0, #0
   166c0:	beq	166cc <generate_code@@Base+0x1048>
   166c4:	mov	r0, #0
   166c8:	pop	{r4, r5, r6, pc}
   166cc:	ldr	r0, [r4]
   166d0:	bl	16238 <generate_code@@Base+0xbb4>
   166d4:	cmp	r0, #0
   166d8:	bne	16710 <generate_code@@Base+0x108c>
   166dc:	ldr	r0, [r4]
   166e0:	bl	16508 <generate_code@@Base+0xe84>
   166e4:	cmp	r0, #0
   166e8:	bne	166c4 <generate_code@@Base+0x1040>
   166ec:	ldr	r3, [pc, #68]	; 16738 <generate_code@@Base+0x10b4>
   166f0:	ldr	r1, [pc, #68]	; 1673c <generate_code@@Base+0x10b8>
   166f4:	ldr	r2, [r4]
   166f8:	ldr	r3, [r5, r3]
   166fc:	add	r1, pc, r1
   16700:	ldr	r0, [r3]
   16704:	bl	11a68 <fprintf@plt>
   16708:	mvn	r0, #0
   1670c:	pop	{r4, r5, r6, pc}
   16710:	ldr	r3, [pc, #32]	; 16738 <generate_code@@Base+0x10b4>
   16714:	ldr	r1, [pc, #36]	; 16740 <generate_code@@Base+0x10bc>
   16718:	ldr	r2, [r4]
   1671c:	ldr	r3, [r5, r3]
   16720:	add	r1, pc, r1
   16724:	ldr	r0, [r3]
   16728:	bl	11a68 <fprintf@plt>
   1672c:	mvn	r0, #0
   16730:	pop	{r4, r5, r6, pc}
   16734:	andeq	r2, r1, r8, lsr #19
   16738:	andeq	r0, r0, r4, lsr #1
   1673c:	andeq	r1, r0, r0, lsr #18
   16740:	andeq	r1, r0, r8, ror #17
   16744:	ldr	r3, [pc, #96]	; 167ac <generate_code@@Base+0x1128>
   16748:	ldr	r2, [pc, #96]	; 167b0 <generate_code@@Base+0x112c>
   1674c:	add	r3, pc, r3
   16750:	push	{r4, lr}
   16754:	ldr	r4, [r3, r2]
   16758:	ldr	r0, [r4]
   1675c:	cmp	r0, #0
   16760:	beq	16780 <generate_code@@Base+0x10fc>
   16764:	ldr	r3, [r4, #8]
   16768:	cmp	r3, #0
   1676c:	bne	16790 <generate_code@@Base+0x110c>
   16770:	bl	11ac8 <fclose@plt>
   16774:	mov	r3, #0
   16778:	str	r3, [r4]
   1677c:	str	r3, [r4, #12]
   16780:	mov	r3, #0
   16784:	str	r3, [r4, #24]
   16788:	ldr	r0, [r4, #20]
   1678c:	pop	{r4, pc}
   16790:	ldr	r2, [r4, #24]
   16794:	cmp	r2, #0
   16798:	bge	16770 <generate_code@@Base+0x10ec>
   1679c:	mov	r0, r3
   167a0:	bl	157c0 <generate_code@@Base+0x13c>
   167a4:	ldr	r0, [r4]
   167a8:	b	16770 <generate_code@@Base+0x10ec>
   167ac:	andeq	r2, r1, ip, lsr #17
   167b0:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   167b4:	push	{r4, lr}
   167b8:	mov	r4, r0
   167bc:	mov	r0, #1
   167c0:	bl	1581c <generate_code@@Base+0x198>
   167c4:	str	r4, [r0]
   167c8:	pop	{r4, pc}
   167cc:	push	{r4, r5, r6, lr}
   167d0:	mov	r5, r0
   167d4:	mov	r0, #2
   167d8:	mov	r4, r1
   167dc:	bl	1581c <generate_code@@Base+0x198>
   167e0:	str	r5, [r0]
   167e4:	str	r4, [r0, #4]
   167e8:	pop	{r4, r5, r6, pc}
   167ec:	push	{r4, r5, r6, lr}
   167f0:	mov	r5, r0
   167f4:	mov	r0, #2
   167f8:	mov	r4, r1
   167fc:	bl	1581c <generate_code@@Base+0x198>
   16800:	str	r5, [r0]
   16804:	str	r4, [r0, #4]
   16808:	pop	{r4, r5, r6, pc}
   1680c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16810:	sub	sp, sp, #32
   16814:	mov	r7, sp
   16818:	mov	r5, r1
   1681c:	mov	r6, sp
   16820:	add	r2, sp, #32
   16824:	mov	r3, #0
   16828:	str	r3, [r6], #4
   1682c:	cmp	r2, r6
   16830:	bne	16828 <generate_code@@Base+0x11a4>
   16834:	mov	r8, #0
   16838:	mov	r3, r8
   1683c:	mov	r4, r5
   16840:	mov	r1, r5
   16844:	mov	r9, #1
   16848:	lsr	r2, r3, #5
   1684c:	ldr	lr, [r1, #40]	; 0x28
   16850:	add	ip, sp, #32
   16854:	cmp	lr, #0
   16858:	add	r2, ip, r2, lsl #2
   1685c:	and	sl, r3, #31
   16860:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   16864:	add	r3, r3, #1
   16868:	orrne	ip, ip, r9, lsl sl
   1686c:	addne	r8, r8, #1
   16870:	strne	ip, [r2, #-32]	; 0xffffffe0
   16874:	cmp	r3, #252	; 0xfc
   16878:	add	r1, r1, #24
   1687c:	bne	16848 <generate_code@@Base+0x11c4>
   16880:	add	r8, r8, r8, lsl #2
   16884:	add	r1, r8, #17
   16888:	bl	167ec <generate_code@@Base+0x1168>
   1688c:	ldr	r0, [r5]
   16890:	bl	167b4 <generate_code@@Base+0x1130>
   16894:	ldr	r0, [r5, #8]
   16898:	bl	167b4 <generate_code@@Base+0x1130>
   1689c:	ldr	r0, [r5, #12]
   168a0:	bl	167b4 <generate_code@@Base+0x1130>
   168a4:	ldrd	r0, [r5, #16]
   168a8:	bl	167cc <generate_code@@Base+0x1148>
   168ac:	ldrd	r0, [r5, #24]
   168b0:	bl	167cc <generate_code@@Base+0x1148>
   168b4:	ldrd	r0, [r5, #32]
   168b8:	bl	167cc <generate_code@@Base+0x1148>
   168bc:	ldr	r0, [r7], #4
   168c0:	bl	167b4 <generate_code@@Base+0x1130>
   168c4:	cmp	r7, r6
   168c8:	bne	168bc <generate_code@@Base+0x1238>
   168cc:	add	r5, r5, #6016	; 0x1780
   168d0:	add	r5, r5, #32
   168d4:	b	168e4 <generate_code@@Base+0x1260>
   168d8:	add	r4, r4, #24
   168dc:	cmp	r4, r5
   168e0:	beq	16910 <generate_code@@Base+0x128c>
   168e4:	ldr	r0, [r4, #40]	; 0x28
   168e8:	cmp	r0, #0
   168ec:	beq	168d8 <generate_code@@Base+0x1254>
   168f0:	bl	167b4 <generate_code@@Base+0x1130>
   168f4:	ldrd	r0, [r4, #48]	; 0x30
   168f8:	bl	167cc <generate_code@@Base+0x1148>
   168fc:	add	r4, r4, #24
   16900:	ldrd	r0, [r4, #32]
   16904:	bl	167cc <generate_code@@Base+0x1148>
   16908:	cmp	r4, r5
   1690c:	bne	168e4 <generate_code@@Base+0x1260>
   16910:	add	sp, sp, #32
   16914:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16918:	push	{r4, lr}
   1691c:	mov	r0, #1
   16920:	bl	15878 <generate_code@@Base+0x1f4>
   16924:	subs	r3, r0, #0
   16928:	popeq	{r4, pc}
   1692c:	ldr	r0, [r3]
   16930:	pop	{r4, lr}
   16934:	b	15790 <generate_code@@Base+0x10c>
   16938:	push	{r4, r5, r6, lr}
   1693c:	mov	r0, #2
   16940:	bl	15878 <generate_code@@Base+0x1f4>
   16944:	subs	r3, r0, #0
   16948:	beq	16978 <generate_code@@Base+0x12f4>
   1694c:	ldr	r0, [r3]
   16950:	bl	15790 <generate_code@@Base+0x10c>
   16954:	mov	r5, #0
   16958:	mov	r4, r0
   1695c:	ldr	r0, [r3, #4]
   16960:	bl	15790 <generate_code@@Base+0x10c>
   16964:	mov	r2, #0
   16968:	mov	r3, r0
   1696c:	orr	r1, r3, r5
   16970:	orr	r0, r2, r4
   16974:	pop	{r4, r5, r6, pc}
   16978:	mov	r0, #0
   1697c:	mov	r1, #0
   16980:	pop	{r4, r5, r6, pc}
   16984:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16988:	sub	sp, sp, #28
   1698c:	mov	r4, #0
   16990:	str	r1, [sp, #8]
   16994:	str	r3, [sp, #12]
   16998:	add	r3, r1, #56	; 0x38
   1699c:	add	r1, r1, #16
   169a0:	str	r0, [sp, #16]
   169a4:	str	r2, [sp, #20]
   169a8:	ldr	r2, [r3, #-4]!
   169ac:	cmp	r2, #0
   169b0:	addne	r4, r4, #1
   169b4:	cmp	r3, r1
   169b8:	bne	169a8 <generate_code@@Base+0x1324>
   169bc:	add	r4, r4, #4
   169c0:	lsl	r4, r4, #3
   169c4:	mov	r0, r4
   169c8:	bl	119fc <malloc@plt>
   169cc:	subs	r8, r0, #0
   169d0:	beq	16a94 <generate_code@@Base+0x1410>
   169d4:	ldr	r3, [sp, #12]
   169d8:	mov	r4, #0
   169dc:	str	r3, [r8, #4]
   169e0:	str	r4, [r8]
   169e4:	bl	16918 <generate_code@@Base+0x1294>
   169e8:	ldr	r3, [sp, #8]
   169ec:	ldr	r5, [pc, #272]	; 16b04 <generate_code@@Base+0x1480>
   169f0:	add	r6, r3, #12
   169f4:	mov	r7, r4
   169f8:	str	r0, [r8, #12]
   169fc:	bl	16918 <generate_code@@Base+0x1294>
   16a00:	str	r0, [r8, #16]
   16a04:	bl	16918 <generate_code@@Base+0x1294>
   16a08:	str	r0, [r8, #20]
   16a0c:	ldr	r3, [r6, #4]!
   16a10:	cmp	r3, #0
   16a14:	beq	16a70 <generate_code@@Base+0x13ec>
   16a18:	bl	16918 <generate_code@@Base+0x1294>
   16a1c:	cmp	r5, r0
   16a20:	bne	16ae8 <generate_code@@Base+0x1464>
   16a24:	bl	16918 <generate_code@@Base+0x1294>
   16a28:	lsr	r9, r0, #1
   16a2c:	lsl	fp, r9, #3
   16a30:	mov	r0, fp
   16a34:	bl	119fc <malloc@plt>
   16a38:	subs	sl, r0, #0
   16a3c:	beq	16af8 <generate_code@@Base+0x1474>
   16a40:	add	r3, r8, r7, lsl #3
   16a44:	cmp	r9, #0
   16a48:	str	r9, [r3, #24]
   16a4c:	str	sl, [r3, #28]
   16a50:	sub	r9, r9, #1
   16a54:	beq	16a6c <generate_code@@Base+0x13e8>
   16a58:	bl	16938 <generate_code@@Base+0x12b4>
   16a5c:	sub	r9, r9, #1
   16a60:	cmn	r9, #1
   16a64:	strd	r0, [sl], #8
   16a68:	bne	16a58 <generate_code@@Base+0x13d4>
   16a6c:	add	r7, r7, #1
   16a70:	add	r4, r4, #1
   16a74:	cmp	r4, #10
   16a78:	add	r5, r5, #131072	; 0x20000
   16a7c:	bne	16a0c <generate_code@@Base+0x1388>
   16a80:	ldr	r3, [sp, #20]
   16a84:	mov	r0, r8
   16a88:	str	r8, [r3]
   16a8c:	add	sp, sp, #28
   16a90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a94:	mvn	r5, #0
   16a98:	cmp	r4, #0
   16a9c:	beq	16ad8 <generate_code@@Base+0x1454>
   16aa0:	ldr	r3, [pc, #96]	; 16b08 <generate_code@@Base+0x1484>
   16aa4:	add	r3, pc, r3
   16aa8:	ldr	r0, [pc, #92]	; 16b0c <generate_code@@Base+0x1488>
   16aac:	ldr	r2, [sp, #12]
   16ab0:	ldr	r1, [sp, #16]
   16ab4:	str	r4, [sp]
   16ab8:	add	r0, pc, r0
   16abc:	bl	15934 <generate_code@@Base+0x2b0>
   16ac0:	mov	r2, r5
   16ac4:	mov	r1, r8
   16ac8:	ldr	r0, [sp, #8]
   16acc:	add	sp, sp, #28
   16ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ad4:	b	1597c <generate_code@@Base+0x2f8>
   16ad8:	ldr	r3, [pc, #48]	; 16b10 <generate_code@@Base+0x148c>
   16adc:	mov	r4, r5
   16ae0:	add	r3, pc, r3
   16ae4:	b	16aa8 <generate_code@@Base+0x1424>
   16ae8:	ldr	r3, [pc, #36]	; 16b14 <generate_code@@Base+0x1490>
   16aec:	mov	r5, r4
   16af0:	add	r3, pc, r3
   16af4:	b	16aa8 <generate_code@@Base+0x1424>
   16af8:	mov	r5, r4
   16afc:	mov	r4, fp
   16b00:	b	16a98 <generate_code@@Base+0x1414>
   16b04:			; <UNDEFINED> instruction: 0x01a10000
   16b08:	muleq	r0, r4, r5
   16b0c:	andeq	r1, r0, r4, lsr #11
   16b10:	andeq	r1, r0, r8, ror #10
   16b14:	andeq	r1, r0, r8, asr r5
   16b18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b1c:	sub	sp, sp, #44	; 0x2c
   16b20:	mov	r9, r0
   16b24:	bl	16918 <generate_code@@Base+0x1294>
   16b28:	mov	r7, #0
   16b2c:	add	sl, sp, #8
   16b30:	mov	r4, sl
   16b34:	add	r5, sp, #40	; 0x28
   16b38:	str	r0, [r9]
   16b3c:	bl	16918 <generate_code@@Base+0x1294>
   16b40:	str	r0, [r9, #8]
   16b44:	bl	16918 <generate_code@@Base+0x1294>
   16b48:	str	r0, [r9, #12]
   16b4c:	bl	16938 <generate_code@@Base+0x12b4>
   16b50:	strd	r0, [r9, #16]
   16b54:	bl	16938 <generate_code@@Base+0x12b4>
   16b58:	strd	r0, [r9, #24]
   16b5c:	bl	16938 <generate_code@@Base+0x12b4>
   16b60:	ldr	r2, [pc, #244]	; 16c5c <generate_code@@Base+0x15d8>
   16b64:	strd	r0, [r9, #32]
   16b68:	add	r0, r9, #40	; 0x28
   16b6c:	mov	r1, r7
   16b70:	bl	11aa4 <memset@plt>
   16b74:	bl	16918 <generate_code@@Base+0x1294>
   16b78:	str	r0, [r4], #4
   16b7c:	bl	17800 <__gcov_sort_n_vals@@Base+0x618>
   16b80:	cmp	r5, r4
   16b84:	add	r7, r7, r0
   16b88:	bne	16b74 <generate_code@@Base+0x14f0>
   16b8c:	cmp	r7, #0
   16b90:	sub	r7, r7, #1
   16b94:	beq	16c48 <generate_code@@Base+0x15c4>
   16b98:	ldr	r8, [pc, #192]	; 16c60 <generate_code@@Base+0x15dc>
   16b9c:	mov	r4, #0
   16ba0:	ldr	r3, [pc, #188]	; 16c64 <generate_code@@Base+0x15e0>
   16ba4:	add	r8, pc, r8
   16ba8:	mov	r5, r4
   16bac:	mov	r6, r4
   16bb0:	add	r3, pc, r3
   16bb4:	str	r3, [sp, #4]
   16bb8:	cmp	r4, #0
   16bbc:	addeq	r6, sl, r5, lsl #2
   16bc0:	beq	16bcc <generate_code@@Base+0x1548>
   16bc4:	b	16bf4 <generate_code@@Base+0x1570>
   16bc8:	mov	r5, r3
   16bcc:	cmp	r5, #7
   16bd0:	bls	16bdc <generate_code@@Base+0x1558>
   16bd4:	mov	r0, r8
   16bd8:	bl	15934 <generate_code@@Base+0x2b0>
   16bdc:	ldr	r4, [r6], #4
   16be0:	add	r3, r5, #1
   16be4:	cmp	r4, #0
   16be8:	beq	16bc8 <generate_code@@Base+0x1544>
   16bec:	lsl	r6, r5, #5
   16bf0:	mov	r5, r3
   16bf4:	tst	r4, #1
   16bf8:	bne	16c0c <generate_code@@Base+0x1588>
   16bfc:	lsr	r4, r4, #1
   16c00:	tst	r4, #1
   16c04:	add	r6, r6, #1
   16c08:	beq	16bfc <generate_code@@Base+0x1578>
   16c0c:	cmp	r6, #251	; 0xfb
   16c10:	bhi	16c50 <generate_code@@Base+0x15cc>
   16c14:	bl	16918 <generate_code@@Base+0x1294>
   16c18:	add	r3, r6, r6, lsl #1
   16c1c:	sub	r7, r7, #1
   16c20:	add	fp, r9, r3, lsl #3
   16c24:	lsr	r4, r4, #1
   16c28:	add	r6, r6, #1
   16c2c:	str	r0, [fp, #40]	; 0x28
   16c30:	bl	16938 <generate_code@@Base+0x12b4>
   16c34:	strd	r0, [fp, #48]	; 0x30
   16c38:	bl	16938 <generate_code@@Base+0x12b4>
   16c3c:	cmn	r7, #1
   16c40:	strd	r0, [fp, #56]	; 0x38
   16c44:	bne	16bb8 <generate_code@@Base+0x1534>
   16c48:	add	sp, sp, #44	; 0x2c
   16c4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c50:	ldr	r0, [sp, #4]
   16c54:	bl	15934 <generate_code@@Base+0x2b0>
   16c58:	b	16c14 <generate_code@@Base+0x1590>
   16c5c:	andeq	r1, r0, r0, lsr #15
   16c60:	andeq	r1, r0, r8, lsl r5
   16c64:	ldrdeq	r1, [r0], -r0
   16c68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c6c:	sub	sp, sp, #6080	; 0x17c0
   16c70:	sub	sp, sp, #28
   16c74:	mov	r4, r1
   16c78:	stmib	sp, {r2, r3}
   16c7c:	add	r3, sp, #6144	; 0x1800
   16c80:	mov	sl, r0
   16c84:	ldr	r7, [r3]
   16c88:	add	r3, sp, #6144	; 0x1800
   16c8c:	add	r3, r3, #4
   16c90:	ldr	r6, [r3]
   16c94:	bl	16918 <generate_code@@Base+0x1294>
   16c98:	add	r3, r4, #12
   16c9c:	mov	r2, sl
   16ca0:	str	r3, [sp, #12]
   16ca4:	mov	r1, r0
   16ca8:	mov	r0, r3
   16cac:	bl	162fc <generate_code@@Base+0xc78>
   16cb0:	cmp	r0, #0
   16cb4:	beq	16f34 <generate_code@@Base+0x18b0>
   16cb8:	bl	16918 <generate_code@@Base+0x1294>
   16cbc:	ldr	r3, [r4, #8]
   16cc0:	cmp	r0, r3
   16cc4:	beq	16cd8 <generate_code@@Base+0x1654>
   16cc8:	mov	r0, #0
   16ccc:	add	sp, sp, #6080	; 0x17c0
   16cd0:	add	sp, sp, #28
   16cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cd8:	ldr	fp, [pc, #628]	; 16f54 <generate_code@@Base+0x18d0>
   16cdc:	add	r9, sp, #2000	; 0x7d0
   16ce0:	add	r5, sp, #16
   16ce4:	add	fp, pc, fp
   16ce8:	add	r9, r9, #8
   16cec:	bl	15740 <generate_code@@Base+0xbc>
   16cf0:	str	r0, [r6]
   16cf4:	bl	16918 <generate_code@@Base+0x1294>
   16cf8:	cmp	r0, #-1560281088	; 0xa3000000
   16cfc:	bne	16da0 <generate_code@@Base+0x171c>
   16d00:	bl	16918 <generate_code@@Base+0x1294>
   16d04:	mov	r0, r5
   16d08:	bl	16b18 <generate_code@@Base+0x1494>
   16d0c:	bl	15764 <generate_code@@Base+0xe0>
   16d10:	subs	r8, r0, #0
   16d14:	bne	16ed4 <generate_code@@Base+0x1850>
   16d18:	ldr	r3, [r7]
   16d1c:	cmp	r3, #0
   16d20:	bne	16d6c <generate_code@@Base+0x16e8>
   16d24:	add	r2, sp, #6144	; 0x1800
   16d28:	add	r2, r2, #8
   16d2c:	ldr	r3, [r9, #-1992]	; 0xfffff838
   16d30:	ldr	r2, [r2]
   16d34:	cmp	r3, r2
   16d38:	bne	16cec <generate_code@@Base+0x1668>
   16d3c:	ldr	r3, [sp, #8]
   16d40:	ldr	ip, [r9, #-1984]	; 0xfffff840
   16d44:	ldr	r2, [pc, #524]	; 16f58 <generate_code@@Base+0x18d4>
   16d48:	ldr	r3, [r3, #8]
   16d4c:	mov	r1, r5
   16d50:	cmp	ip, r3
   16d54:	ldr	r0, [sp, #4]
   16d58:	bne	16cec <generate_code@@Base+0x1668>
   16d5c:	bl	119b4 <memcpy@plt>
   16d60:	ldr	r3, [r6]
   16d64:	str	r3, [r7]
   16d68:	b	16cec <generate_code@@Base+0x1668>
   16d6c:	ldr	r0, [pc, #488]	; 16f5c <generate_code@@Base+0x18d8>
   16d70:	bl	119fc <malloc@plt>
   16d74:	ldr	r2, [pc, #476]	; 16f58 <generate_code@@Base+0x18d4>
   16d78:	mov	r1, r5
   16d7c:	mov	r3, r0
   16d80:	str	r0, [fp]
   16d84:	add	r0, r0, #8
   16d88:	str	r3, [sp]
   16d8c:	bl	119b4 <memcpy@plt>
   16d90:	ldr	r3, [sp]
   16d94:	str	r8, [r3]
   16d98:	ldr	fp, [fp]
   16d9c:	b	16cec <generate_code@@Base+0x1668>
   16da0:	ldr	r5, [r4, #56]	; 0x38
   16da4:	cmp	r5, #0
   16da8:	beq	16f3c <generate_code@@Base+0x18b8>
   16dac:	ldr	r3, [r4, #60]	; 0x3c
   16db0:	cmp	r0, #16777216	; 0x1000000
   16db4:	ldr	r8, [r3]
   16db8:	bne	16f04 <generate_code@@Base+0x1880>
   16dbc:	ldr	r6, [pc, #412]	; 16f60 <generate_code@@Base+0x18dc>
   16dc0:	mov	r5, #0
   16dc4:	add	r6, pc, r6
   16dc8:	add	r6, r6, #4
   16dcc:	b	16e10 <generate_code@@Base+0x178c>
   16dd0:	mov	r2, r6
   16dd4:	mov	r3, r5
   16dd8:	mov	r1, r4
   16ddc:	mov	r0, sl
   16de0:	bl	16984 <generate_code@@Base+0x1300>
   16de4:	subs	r6, r0, #0
   16de8:	beq	16f08 <generate_code@@Base+0x1884>
   16dec:	bl	16918 <generate_code@@Base+0x1294>
   16df0:	ldr	r3, [r4, #56]	; 0x38
   16df4:	add	r5, r5, #1
   16df8:	cmp	r3, r5
   16dfc:	beq	16f3c <generate_code@@Base+0x18b8>
   16e00:	ldr	r3, [r4, #60]	; 0x3c
   16e04:	cmp	r0, #16777216	; 0x1000000
   16e08:	ldr	r8, [r3, r5, lsl #2]
   16e0c:	bne	16f08 <generate_code@@Base+0x1884>
   16e10:	bl	16918 <generate_code@@Base+0x1294>
   16e14:	cmp	r0, #0
   16e18:	beq	16dec <generate_code@@Base+0x1768>
   16e1c:	cmp	r0, #3
   16e20:	bne	16f08 <generate_code@@Base+0x1884>
   16e24:	cmp	r8, #0
   16e28:	beq	16dd0 <generate_code@@Base+0x174c>
   16e2c:	ldr	r3, [r8]
   16e30:	cmp	r4, r3
   16e34:	bne	16dd0 <generate_code@@Base+0x174c>
   16e38:	bl	16918 <generate_code@@Base+0x1294>
   16e3c:	ldr	r3, [r8, #4]
   16e40:	cmp	r0, r3
   16e44:	bne	16f08 <generate_code@@Base+0x1884>
   16e48:	bl	16918 <generate_code@@Base+0x1294>
   16e4c:	ldr	r3, [r8, #8]
   16e50:	cmp	r0, r3
   16e54:	bne	16f08 <generate_code@@Base+0x1884>
   16e58:	bl	16918 <generate_code@@Base+0x1294>
   16e5c:	ldr	r3, [r8, #12]
   16e60:	cmp	r0, r3
   16e64:	bne	16f08 <generate_code@@Base+0x1884>
   16e68:	ldr	r7, [pc, #244]	; 16f64 <generate_code@@Base+0x18e0>
   16e6c:	ldr	fp, [sp, #12]
   16e70:	add	r8, r8, #16
   16e74:	ldr	r9, [fp, #4]!
   16e78:	cmp	r9, #0
   16e7c:	beq	16eb4 <generate_code@@Base+0x1830>
   16e80:	bl	16918 <generate_code@@Base+0x1294>
   16e84:	str	r0, [sp]
   16e88:	bl	16918 <generate_code@@Base+0x1294>
   16e8c:	ldr	r3, [sp]
   16e90:	cmp	r3, r7
   16e94:	bne	16f08 <generate_code@@Base+0x1884>
   16e98:	ldr	r3, [r8]
   16e9c:	mov	r1, r3
   16ea0:	cmp	r0, r3, lsl #1
   16ea4:	bne	16f08 <generate_code@@Base+0x1884>
   16ea8:	ldr	r0, [r8, #4]
   16eac:	blx	r9
   16eb0:	add	r8, r8, #8
   16eb4:	ldr	r3, [pc, #172]	; 16f68 <generate_code@@Base+0x18e4>
   16eb8:	add	r7, r7, #131072	; 0x20000
   16ebc:	cmp	r7, r3
   16ec0:	bne	16e74 <generate_code@@Base+0x17f0>
   16ec4:	bl	15764 <generate_code@@Base+0xe0>
   16ec8:	cmp	r0, #0
   16ecc:	beq	16dec <generate_code@@Base+0x1768>
   16ed0:	mov	r8, r0
   16ed4:	cmp	r8, #0
   16ed8:	blt	16f48 <generate_code@@Base+0x18c4>
   16edc:	ldr	r2, [pc, #136]	; 16f6c <generate_code@@Base+0x18e8>
   16ee0:	add	r2, pc, r2
   16ee4:	ldr	r0, [pc, #132]	; 16f70 <generate_code@@Base+0x18ec>
   16ee8:	mov	r1, sl
   16eec:	add	r0, pc, r0
   16ef0:	bl	15934 <generate_code@@Base+0x2b0>
   16ef4:	mvn	r0, #0
   16ef8:	add	sp, sp, #6080	; 0x17c0
   16efc:	add	sp, sp, #28
   16f00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f04:	mov	r5, #0
   16f08:	ldr	r2, [pc, #100]	; 16f74 <generate_code@@Base+0x18f0>
   16f0c:	ldr	r0, [pc, #100]	; 16f78 <generate_code@@Base+0x18f4>
   16f10:	mov	r3, r5
   16f14:	mov	r1, sl
   16f18:	add	r2, pc, r2
   16f1c:	add	r0, pc, r0
   16f20:	bl	15934 <generate_code@@Base+0x2b0>
   16f24:	mvn	r0, #0
   16f28:	add	sp, sp, #6080	; 0x17c0
   16f2c:	add	sp, sp, #28
   16f30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f34:	mvn	r0, #0
   16f38:	b	16ccc <generate_code@@Base+0x1648>
   16f3c:	cmp	r0, #0
   16f40:	beq	16cc8 <generate_code@@Base+0x1644>
   16f44:	b	16f08 <generate_code@@Base+0x1884>
   16f48:	ldr	r2, [pc, #44]	; 16f7c <generate_code@@Base+0x18f8>
   16f4c:	add	r2, pc, r2
   16f50:	b	16ee4 <generate_code@@Base+0x1860>
   16f54:	andeq	r3, r1, r4, lsr #21
   16f58:	andeq	r1, r0, r8, asr #15
   16f5c:	ldrdeq	r1, [r0], -r0
   16f60:	andeq	r3, r1, r4, asr #19
   16f64:			; <UNDEFINED> instruction: 0x01a10000
   16f68:			; <UNDEFINED> instruction: 0x01b50000
   16f6c:	andeq	r1, r0, r8, lsr #4
   16f70:	andeq	r1, r0, r8, asr r2
   16f74:	strdeq	r1, [r0], -r8
   16f78:	andeq	r1, r0, r0, lsl #4
   16f7c:			; <UNDEFINED> instruction: 0x000011b0
   16f80:	ldr	r3, [pc, #68]	; 16fcc <generate_code@@Base+0x1948>
   16f84:	ldr	r2, [pc, #68]	; 16fd0 <generate_code@@Base+0x194c>
   16f88:	add	r3, pc, r3
   16f8c:	push	{r4, r5, r6, lr}
   16f90:	mov	r5, r0
   16f94:	ldr	r4, [r3, r2]
   16f98:	ldr	r0, [r4, #8]
   16f9c:	cmp	r0, #0
   16fa0:	beq	16fa8 <generate_code@@Base+0x1924>
   16fa4:	bl	157c0 <generate_code@@Base+0x13c>
   16fa8:	lsl	r1, r5, #2
   16fac:	mov	r2, #0
   16fb0:	ldr	r0, [r4]
   16fb4:	bl	11b04 <fseek@plt>
   16fb8:	ldr	r0, [r4]
   16fbc:	bl	119c0 <ftell@plt>
   16fc0:	asr	r0, r0, #2
   16fc4:	str	r0, [r4, #4]
   16fc8:	pop	{r4, r5, r6, pc}
   16fcc:	andeq	r2, r1, r0, ror r0
   16fd0:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   16fd4:	cmp	r2, #0
   16fd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fdc:	mov	r9, r0
   16fe0:	sub	sp, sp, #20
   16fe4:	mov	r5, r1
   16fe8:	mov	r4, r3
   16fec:	beq	171a4 <generate_code@@Base+0x1b20>
   16ff0:	cmp	r4, #0
   16ff4:	bne	171c0 <generate_code@@Base+0x1b3c>
   16ff8:	mov	r1, r5
   16ffc:	ldr	r5, [pc, #456]	; 171cc <generate_code@@Base+0x1b48>
   17000:	mov	r0, #-1560281088	; 0xa3000000
   17004:	add	r5, pc, r5
   17008:	bl	1680c <generate_code@@Base+0x1188>
   1700c:	ldr	r4, [r5]
   17010:	cmp	r4, #0
   17014:	movne	r6, #-1560281088	; 0xa3000000
   17018:	beq	17044 <generate_code@@Base+0x19c0>
   1701c:	add	r1, r4, #8
   17020:	mov	r0, r6
   17024:	bl	1680c <generate_code@@Base+0x1188>
   17028:	ldr	r3, [r5]
   1702c:	mov	r0, r3
   17030:	ldr	r4, [r3]
   17034:	bl	119a8 <free@plt>
   17038:	cmp	r4, #0
   1703c:	str	r4, [r5]
   17040:	bne	1701c <generate_code@@Base+0x1998>
   17044:	ldr	r3, [r9, #56]	; 0x38
   17048:	cmp	r3, #0
   1704c:	beq	17188 <generate_code@@Base+0x1b04>
   17050:	ldr	r3, [pc, #376]	; 171d0 <generate_code@@Base+0x1b4c>
   17054:	ldr	r8, [pc, #376]	; 171d4 <generate_code@@Base+0x1b50>
   17058:	add	r3, pc, r3
   1705c:	str	r3, [sp, #4]
   17060:	ldr	r3, [pc, #368]	; 171d8 <generate_code@@Base+0x1b54>
   17064:	mov	r7, #0
   17068:	add	r3, pc, r3
   1706c:	str	r3, [sp, #12]
   17070:	b	170ac <generate_code@@Base+0x1a28>
   17074:	ldr	r3, [r9, #60]	; 0x3c
   17078:	ldr	r4, [r3, r7, lsl #2]
   1707c:	cmp	r4, #0
   17080:	beq	17090 <generate_code@@Base+0x1a0c>
   17084:	ldr	r3, [r4]
   17088:	cmp	r9, r3
   1708c:	beq	17198 <generate_code@@Base+0x1b14>
   17090:	mov	r1, #0
   17094:	mov	r0, #16777216	; 0x1000000
   17098:	bl	167ec <generate_code@@Base+0x1168>
   1709c:	ldr	r3, [r9, #56]	; 0x38
   170a0:	add	r7, r7, #1
   170a4:	cmp	r3, r7
   170a8:	beq	17188 <generate_code@@Base+0x1b04>
   170ac:	ldr	r3, [sp, #4]
   170b0:	ldr	r4, [r3, #4]
   170b4:	cmp	r4, #0
   170b8:	beq	17074 <generate_code@@Base+0x19f0>
   170bc:	ldr	r3, [r4, #4]
   170c0:	cmp	r3, r7
   170c4:	moveq	r3, #1
   170c8:	addeq	r4, r4, #8
   170cc:	streq	r3, [sp, #8]
   170d0:	bne	17074 <generate_code@@Base+0x19f0>
   170d4:	mov	r1, #3
   170d8:	mov	r0, #16777216	; 0x1000000
   170dc:	bl	167ec <generate_code@@Base+0x1168>
   170e0:	ldr	r0, [r4, #4]
   170e4:	bl	167b4 <generate_code@@Base+0x1130>
   170e8:	ldr	r0, [r4, #8]
   170ec:	bl	167b4 <generate_code@@Base+0x1130>
   170f0:	ldr	r0, [r4, #12]
   170f4:	bl	167b4 <generate_code@@Base+0x1130>
   170f8:	ldr	r5, [pc, #220]	; 171dc <generate_code@@Base+0x1b58>
   170fc:	add	r4, r4, #16
   17100:	add	r6, r9, #12
   17104:	ldr	r3, [r6, #4]!
   17108:	cmp	r3, #0
   1710c:	beq	17148 <generate_code@@Base+0x1ac4>
   17110:	ldr	fp, [r4]
   17114:	mov	r0, r5
   17118:	sub	sl, fp, #1
   1711c:	lsl	r1, fp, #1
   17120:	bl	167ec <generate_code@@Base+0x1168>
   17124:	cmp	fp, #0
   17128:	ldr	fp, [r4, #4]
   1712c:	beq	17144 <generate_code@@Base+0x1ac0>
   17130:	sub	sl, sl, #1
   17134:	ldrd	r0, [fp], #8
   17138:	bl	167cc <generate_code@@Base+0x1148>
   1713c:	cmn	sl, #1
   17140:	bne	17130 <generate_code@@Base+0x1aac>
   17144:	add	r4, r4, #8
   17148:	add	r5, r5, #131072	; 0x20000
   1714c:	cmp	r5, r8
   17150:	bne	17104 <generate_code@@Base+0x1a80>
   17154:	ldr	r3, [sp, #8]
   17158:	cmp	r3, #0
   1715c:	beq	1709c <generate_code@@Base+0x1a18>
   17160:	ldr	r4, [sp, #12]
   17164:	mov	r2, #10
   17168:	mov	r0, r9
   1716c:	ldr	r1, [r4, #4]
   17170:	bl	1597c <generate_code@@Base+0x2f8>
   17174:	ldr	r3, [r9, #56]	; 0x38
   17178:	add	r7, r7, #1
   1717c:	cmp	r3, r7
   17180:	str	r0, [r4, #4]
   17184:	bne	170ac <generate_code@@Base+0x1a28>
   17188:	mov	r0, #0
   1718c:	add	sp, sp, #20
   17190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17194:	b	167b4 <generate_code@@Base+0x1130>
   17198:	mov	r3, #0
   1719c:	str	r3, [sp, #8]
   171a0:	b	170d4 <generate_code@@Base+0x1a50>
   171a4:	ldr	r1, [pc, #52]	; 171e0 <generate_code@@Base+0x1b5c>
   171a8:	ldr	r0, [pc, #52]	; 171e4 <generate_code@@Base+0x1b60>
   171ac:	bl	167ec <generate_code@@Base+0x1168>
   171b0:	ldr	r0, [r9, #8]
   171b4:	bl	167b4 <generate_code@@Base+0x1130>
   171b8:	cmp	r4, #0
   171bc:	beq	16ff8 <generate_code@@Base+0x1974>
   171c0:	mov	r0, r4
   171c4:	bl	16f80 <generate_code@@Base+0x18fc>
   171c8:	b	16ff8 <generate_code@@Base+0x1974>
   171cc:	andeq	r3, r1, r4, lsl #15
   171d0:	andeq	r3, r1, r0, lsr r7
   171d4:			; <UNDEFINED> instruction: 0x01b50000
   171d8:	andeq	r3, r1, r0, lsr #14
   171dc:			; <UNDEFINED> instruction: 0x01a10000
   171e0:	ldrtcc	r3, [r0], -sl, lsr #10
   171e4:	strbvs	r6, [r3, -r1, ror #8]!

000171e8 <__gcov_sort_n_vals@@Base>:
   171e8:	cmp	r1, #2
   171ec:	bxle	lr
   171f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171f4:	sub	lr, r1, #3
   171f8:	mov	ip, #0
   171fc:	lsr	lr, lr, #1
   17200:	add	r1, r0, #8
   17204:	add	lr, r0, lr, lsl #4
   17208:	add	lr, lr, #24
   1720c:	ldrd	r4, [r1, #16]
   17210:	ldrd	r6, [r1]
   17214:	ldrd	r8, [r1, #8]
   17218:	mov	r2, ip
   1721c:	cmp	r6, r4
   17220:	sbcs	r3, r7, r5
   17224:	mov	fp, ip
   17228:	bge	17270 <__gcov_sort_n_vals@@Base+0x88>
   1722c:	add	r3, r1, #8
   17230:	mov	sl, #0
   17234:	b	1724c <__gcov_sort_n_vals@@Base+0x64>
   17238:	ldrd	r6, [r3, #-24]	; 0xffffffe8
   1723c:	sub	r3, r3, #16
   17240:	cmp	r6, r4
   17244:	sbcs	r6, r7, r5
   17248:	bge	17270 <__gcov_sort_n_vals@@Base+0x88>
   1724c:	ldrd	r6, [r3, #-16]
   17250:	subs	r2, r2, #2
   17254:	mov	fp, r2
   17258:	strd	r6, [r3]
   1725c:	ldrd	r6, [r1, sl]
   17260:	sub	sl, sl, #16
   17264:	strd	r6, [r3, #8]
   17268:	mov	r6, r3
   1726c:	bpl	17238 <__gcov_sort_n_vals@@Base+0x50>
   17270:	add	fp, fp, #2
   17274:	mov	r3, r0
   17278:	add	r1, r1, #16
   1727c:	lsl	fp, fp, #3
   17280:	cmp	lr, r1
   17284:	strd	r8, [r3, fp]!
   17288:	add	ip, ip, #2
   1728c:	strd	r4, [r3, #8]
   17290:	bne	1720c <__gcov_sort_n_vals@@Base+0x24>
   17294:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17298:	push	{r4, r5, r6, r7, r8, lr}
   1729c:	ldr	r6, [r0]
   172a0:	ldr	r4, [pc, #76]	; 172f4 <__gcov_sort_n_vals@@Base+0x10c>
   172a4:	smull	r2, r3, r4, r6
   172a8:	asr	r4, r6, #31
   172ac:	rsb	r4, r4, r3, asr #1
   172b0:	add	r4, r4, r4, lsl #3
   172b4:	subs	r4, r6, r4
   172b8:	bne	172f0 <__gcov_sort_n_vals@@Base+0x108>
   172bc:	cmp	r6, #0
   172c0:	ldr	r5, [r0, #4]
   172c4:	pople	{r4, r5, r6, r7, r8, pc}
   172c8:	add	r5, r5, #8
   172cc:	mov	r7, #8
   172d0:	mov	r0, r5
   172d4:	add	r4, r4, #9
   172d8:	mov	r1, r7
   172dc:	bl	171e8 <__gcov_sort_n_vals@@Base>
   172e0:	cmp	r6, r4
   172e4:	add	r5, r5, #72	; 0x48
   172e8:	bgt	172d0 <__gcov_sort_n_vals@@Base+0xe8>
   172ec:	pop	{r4, r5, r6, r7, r8, pc}
   172f0:	bl	11b1c <abort@plt>
   172f4:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   172f8:	ldr	r3, [r0, #52]	; 0x34
   172fc:	cmp	r3, #0
   17300:	bxeq	lr
   17304:	ldr	ip, [r0, #56]	; 0x38
   17308:	cmp	ip, #0
   1730c:	bxeq	lr
   17310:	push	{r4, r5, r6, lr}
   17314:	mov	r5, r0
   17318:	mov	r4, #0
   1731c:	add	r6, r0, #12
   17320:	ldr	r1, [r5, #60]	; 0x3c
   17324:	mov	r2, r6
   17328:	mov	r3, #0
   1732c:	ldr	r0, [r1, r4, lsl #2]
   17330:	add	r0, r0, #16
   17334:	ldr	r1, [r2, #4]!
   17338:	cmp	r1, #0
   1733c:	beq	1734c <__gcov_sort_n_vals@@Base+0x164>
   17340:	cmp	r3, #9
   17344:	beq	17368 <__gcov_sort_n_vals@@Base+0x180>
   17348:	add	r0, r0, #8
   1734c:	add	r3, r3, #1
   17350:	cmp	r3, #10
   17354:	bne	17334 <__gcov_sort_n_vals@@Base+0x14c>
   17358:	add	r4, r4, #1
   1735c:	cmp	ip, r4
   17360:	bne	17320 <__gcov_sort_n_vals@@Base+0x138>
   17364:	pop	{r4, r5, r6, pc}
   17368:	bl	17298 <__gcov_sort_n_vals@@Base+0xb0>
   1736c:	ldr	ip, [r5, #56]	; 0x38
   17370:	add	r4, r4, #1
   17374:	cmp	ip, r4
   17378:	bne	17320 <__gcov_sort_n_vals@@Base+0x138>
   1737c:	b	17364 <__gcov_sort_n_vals@@Base+0x17c>
   17380:	push	{r4, r5, r6, r7, r8, r9, lr}
   17384:	sub	sp, sp, #6080	; 0x17c0
   17388:	ldr	ip, [pc, #388]	; 17514 <__gcov_sort_n_vals@@Base+0x32c>
   1738c:	sub	sp, sp, #36	; 0x24
   17390:	add	ip, pc, ip
   17394:	add	r5, sp, #2016	; 0x7e0
   17398:	mov	r4, r0
   1739c:	mov	r7, r1
   173a0:	mov	r1, #0
   173a4:	str	r1, [ip, #4]
   173a8:	str	r1, [ip]
   173ac:	mov	r8, r2
   173b0:	mov	r6, r3
   173b4:	str	r1, [r5, #-2000]	; 0xfffff830
   173b8:	str	r1, [r5, #-1996]	; 0xfffff834
   173bc:	bl	172f8 <__gcov_sort_n_vals@@Base+0x110>
   173c0:	mov	r1, r7
   173c4:	ldr	r0, [r4, #12]
   173c8:	bl	16630 <generate_code@@Base+0xfac>
   173cc:	cmn	r0, #1
   173d0:	beq	17450 <__gcov_sort_n_vals@@Base+0x268>
   173d4:	bl	16918 <generate_code@@Base+0x1294>
   173d8:	cmp	r0, #0
   173dc:	beq	1745c <__gcov_sort_n_vals@@Base+0x274>
   173e0:	ldr	r3, [pc, #304]	; 17518 <__gcov_sort_n_vals@@Base+0x330>
   173e4:	cmp	r0, r3
   173e8:	beq	174b4 <__gcov_sort_n_vals@@Base+0x2cc>
   173ec:	ldr	r0, [pc, #296]	; 1751c <__gcov_sort_n_vals@@Base+0x334>
   173f0:	ldr	r1, [r7]
   173f4:	add	r0, pc, r0
   173f8:	bl	15934 <generate_code@@Base+0x2b0>
   173fc:	ldr	r5, [pc, #284]	; 17520 <__gcov_sort_n_vals@@Base+0x338>
   17400:	add	r5, pc, r5
   17404:	ldr	r1, [r5, #4]
   17408:	cmp	r1, #0
   1740c:	movne	r6, #10
   17410:	beq	17430 <__gcov_sort_n_vals@@Base+0x248>
   17414:	mov	r2, r6
   17418:	mov	r0, r4
   1741c:	bl	1597c <generate_code@@Base+0x2f8>
   17420:	cmp	r0, #0
   17424:	mov	r1, r0
   17428:	str	r0, [r5, #4]
   1742c:	bne	17414 <__gcov_sort_n_vals@@Base+0x22c>
   17430:	bl	16744 <generate_code@@Base+0x10c0>
   17434:	cmp	r0, #0
   17438:	beq	17450 <__gcov_sort_n_vals@@Base+0x268>
   1743c:	blt	174f0 <__gcov_sort_n_vals@@Base+0x308>
   17440:	ldr	r0, [pc, #220]	; 17524 <__gcov_sort_n_vals@@Base+0x33c>
   17444:	add	r0, pc, r0
   17448:	ldr	r1, [r7]
   1744c:	bl	15934 <generate_code@@Base+0x2b0>
   17450:	add	sp, sp, #6080	; 0x17c0
   17454:	add	sp, sp, #36	; 0x24
   17458:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1745c:	add	r9, sp, #24
   17460:	bl	164c4 <generate_code@@Base+0xe40>
   17464:	ldr	r1, [r5, #-2000]	; 0xfffff830
   17468:	cmp	r1, #0
   1746c:	beq	174fc <__gcov_sort_n_vals@@Base+0x314>
   17470:	add	r3, sp, #6144	; 0x1800
   17474:	ldr	r0, [r7]
   17478:	str	r6, [sp, #4]
   1747c:	ldr	r3, [r3]
   17480:	mov	r1, r8
   17484:	str	r3, [sp]
   17488:	mov	r2, r4
   1748c:	mov	r3, r9
   17490:	bl	16388 <generate_code@@Base+0xd04>
   17494:	cmn	r0, #1
   17498:	beq	173fc <__gcov_sort_n_vals@@Base+0x214>
   1749c:	mov	r1, r9
   174a0:	ldr	r3, [r5, #-2000]	; 0xfffff830
   174a4:	ldr	r2, [r5, #-1996]	; 0xfffff834
   174a8:	mov	r0, r4
   174ac:	bl	16fd4 <generate_code@@Base+0x1950>
   174b0:	b	173fc <__gcov_sort_n_vals@@Base+0x214>
   174b4:	add	r3, sp, #16
   174b8:	ldr	r0, [r7]
   174bc:	str	r3, [sp]
   174c0:	add	r3, sp, #6144	; 0x1800
   174c4:	add	r1, sp, #20
   174c8:	add	r9, sp, #24
   174cc:	str	r1, [sp, #4]
   174d0:	str	r6, [sp, #8]
   174d4:	mov	r2, r9
   174d8:	ldr	r3, [r3]
   174dc:	mov	r1, r4
   174e0:	bl	16c68 <generate_code@@Base+0x15e4>
   174e4:	cmn	r0, #1
   174e8:	bne	17460 <__gcov_sort_n_vals@@Base+0x278>
   174ec:	b	173fc <__gcov_sort_n_vals@@Base+0x214>
   174f0:	ldr	r0, [pc, #48]	; 17528 <__gcov_sort_n_vals@@Base+0x340>
   174f4:	add	r0, pc, r0
   174f8:	b	17448 <__gcov_sort_n_vals@@Base+0x260>
   174fc:	ldr	r2, [pc, #40]	; 1752c <__gcov_sort_n_vals@@Base+0x344>
   17500:	mov	r0, r9
   17504:	bl	11aa4 <memset@plt>
   17508:	ldr	r3, [r5, #-1996]	; 0xfffff834
   1750c:	str	r3, [r5, #-2000]	; 0xfffff830
   17510:	b	17470 <__gcov_sort_n_vals@@Base+0x288>
   17514:	strdeq	r3, [r1], -r8
   17518:	strbvs	r6, [r3, -r1, ror #8]!
   1751c:	andeq	r0, r0, r8, lsr #27
   17520:	andeq	r3, r1, r8, lsl #7
   17524:	andeq	r0, r0, ip, lsr sp
   17528:	andeq	r0, r0, ip, ror #24
   1752c:	andeq	r1, r0, r8, asr #15
   17530:	push	{r4, r5, r6, r7, r8, lr}
   17534:	sub	sp, sp, #6080	; 0x17c0
   17538:	sub	sp, sp, #32
   1753c:	add	r6, sp, #24
   17540:	add	r2, sp, #12
   17544:	mov	r8, r1
   17548:	mov	r1, r6
   1754c:	mov	r4, r0
   17550:	bl	15b94 <generate_code@@Base+0x510>
   17554:	add	r5, sp, #8
   17558:	mov	r7, r0
   1755c:	mov	r0, r5
   17560:	bl	15d18 <generate_code@@Base+0x694>
   17564:	cmp	r4, #0
   17568:	beq	17590 <__gcov_sort_n_vals@@Base+0x3a8>
   1756c:	mov	r0, r4
   17570:	str	r6, [sp]
   17574:	mov	r3, r7
   17578:	mov	r2, r8
   1757c:	mov	r1, r5
   17580:	bl	17380 <__gcov_sort_n_vals@@Base+0x198>
   17584:	ldr	r4, [r4, #4]
   17588:	cmp	r4, #0
   1758c:	bne	1756c <__gcov_sort_n_vals@@Base+0x384>
   17590:	ldr	r0, [sp, #8]
   17594:	bl	119a8 <free@plt>
   17598:	add	sp, sp, #6080	; 0x17c0
   1759c:	add	sp, sp, #32
   175a0:	pop	{r4, r5, r6, r7, r8, pc}
   175a4:	ldrb	r1, [r0, #4]
   175a8:	tst	r1, #1
   175ac:	bxne	lr
   175b0:	push	{r4, lr}
   175b4:	lsr	r1, r1, #1
   175b8:	mov	r4, r0
   175bc:	and	r1, r1, #1
   175c0:	ldr	r0, [r0]
   175c4:	bl	17530 <__gcov_sort_n_vals@@Base+0x348>
   175c8:	ldrb	r3, [r4, #4]
   175cc:	orr	r3, r3, #3
   175d0:	strb	r3, [r4, #4]
   175d4:	pop	{r4, pc}
   175d8:	push	{r4, r5, r6, lr}
   175dc:	ldr	r4, [pc, #76]	; 17630 <__gcov_sort_n_vals@@Base+0x448>
   175e0:	ldr	r5, [pc, #76]	; 17634 <__gcov_sort_n_vals@@Base+0x44c>
   175e4:	add	r4, pc, r4
   175e8:	mov	r0, r4
   175ec:	bl	175a4 <__gcov_sort_n_vals@@Base+0x3bc>
   175f0:	ldr	r3, [r4, #8]
   175f4:	add	r5, pc, r5
   175f8:	cmp	r3, #0
   175fc:	ldrne	r2, [r4, #12]
   17600:	strne	r2, [r3, #12]
   17604:	ldr	r2, [pc, #44]	; 17638 <__gcov_sort_n_vals@@Base+0x450>
   17608:	add	r2, pc, r2
   1760c:	ldr	r2, [r2, #12]
   17610:	cmp	r2, #0
   17614:	beq	17620 <__gcov_sort_n_vals@@Base+0x438>
   17618:	str	r3, [r2, #8]
   1761c:	pop	{r4, r5, r6, pc}
   17620:	ldr	r2, [pc, #20]	; 1763c <__gcov_sort_n_vals@@Base+0x454>
   17624:	ldr	r2, [r5, r2]
   17628:	str	r3, [r2, #4]
   1762c:	pop	{r4, r5, r6, pc}
   17630:	andeq	r3, r1, ip, lsr #3
   17634:	andeq	r1, r1, r4, lsl #20
   17638:	andeq	r3, r1, r8, lsl #3
   1763c:	andeq	r0, r0, ip, lsr #1
   17640:	ldr	r1, [r0]
   17644:	push	{r4, r5, r6, lr}
   17648:	cmp	r1, #0
   1764c:	ldr	r5, [pc, #168]	; 176fc <__gcov_sort_n_vals@@Base+0x514>
   17650:	add	r5, pc, r5
   17654:	popeq	{r4, r5, r6, pc}
   17658:	ldr	r3, [r0, #56]	; 0x38
   1765c:	cmp	r3, #0
   17660:	popeq	{r4, r5, r6, pc}
   17664:	mov	r4, r0
   17668:	mov	r2, #0
   1766c:	add	r0, r0, #12
   17670:	bl	162fc <generate_code@@Base+0xc78>
   17674:	cmp	r0, #0
   17678:	popeq	{r4, r5, r6, pc}
   1767c:	ldr	r6, [pc, #124]	; 17700 <__gcov_sort_n_vals@@Base+0x518>
   17680:	add	r6, pc, r6
   17684:	ldr	r2, [r6]
   17688:	cmp	r2, #0
   1768c:	beq	176a4 <__gcov_sort_n_vals@@Base+0x4bc>
   17690:	ldr	r3, [pc, #108]	; 17704 <__gcov_sort_n_vals@@Base+0x51c>
   17694:	str	r2, [r4, #4]
   17698:	add	r3, pc, r3
   1769c:	str	r4, [r3]
   176a0:	pop	{r4, r5, r6, pc}
   176a4:	ldr	r3, [pc, #92]	; 17708 <__gcov_sort_n_vals@@Base+0x520>
   176a8:	ldr	r2, [pc, #92]	; 1770c <__gcov_sort_n_vals@@Base+0x524>
   176ac:	mov	r0, #12
   176b0:	ldr	r5, [r5, r3]
   176b4:	add	r2, pc, r2
   176b8:	ldr	r1, [r5]
   176bc:	bl	162fc <generate_code@@Base+0xc78>
   176c0:	cmp	r0, #0
   176c4:	beq	176e4 <__gcov_sort_n_vals@@Base+0x4fc>
   176c8:	ldr	r3, [r5, #4]
   176cc:	cmp	r3, #0
   176d0:	str	r3, [r6, #8]
   176d4:	strne	r6, [r3, #12]
   176d8:	ldr	r3, [pc, #48]	; 17710 <__gcov_sort_n_vals@@Base+0x528>
   176dc:	add	r3, pc, r3
   176e0:	str	r3, [r5, #4]
   176e4:	ldr	r0, [pc, #40]	; 17714 <__gcov_sort_n_vals@@Base+0x52c>
   176e8:	add	r0, pc, r0
   176ec:	bl	179d0 <__libc_csu_fini@@Base+0x4>
   176f0:	ldr	r3, [pc, #32]	; 17718 <__gcov_sort_n_vals@@Base+0x530>
   176f4:	ldr	r2, [pc, r3]
   176f8:	b	17690 <__gcov_sort_n_vals@@Base+0x4a8>
   176fc:	andeq	r1, r1, r8, lsr #19
   17700:	andeq	r3, r1, r0, lsl r1
   17704:	strdeq	r3, [r1], -r8
   17708:	andeq	r0, r0, ip, lsr #1
   1770c:	andeq	r0, r0, ip, lsl #22
   17710:	strheq	r3, [r1], -r4
   17714:			; <UNDEFINED> instruction: 0xfffffee8
   17718:	muleq	r1, ip, r0
   1771c:	cmp	r3, #0
   17720:	cmpeq	r2, #0
   17724:	bne	17748 <__gcov_sort_n_vals@@Base+0x560>
   17728:	cmp	r1, #0
   1772c:	movlt	r1, #-2147483648	; 0x80000000
   17730:	movlt	r0, #0
   17734:	blt	17744 <__gcov_sort_n_vals@@Base+0x55c>
   17738:	cmpeq	r0, #0
   1773c:	mvnne	r1, #-2147483648	; 0x80000000
   17740:	mvnne	r0, #0
   17744:	b	177f0 <__gcov_sort_n_vals@@Base+0x608>
   17748:	sub	sp, sp, #8
   1774c:	push	{sp, lr}
   17750:	cmp	r1, #0
   17754:	blt	17774 <__gcov_sort_n_vals@@Base+0x58c>
   17758:	cmp	r3, #0
   1775c:	blt	177a8 <__gcov_sort_n_vals@@Base+0x5c0>
   17760:	bl	17844 <__gcov_sort_n_vals@@Base+0x65c>
   17764:	ldr	lr, [sp, #4]
   17768:	add	sp, sp, #8
   1776c:	pop	{r2, r3}
   17770:	bx	lr
   17774:	rsbs	r0, r0, #0
   17778:	sbc	r1, r1, r1, lsl #1
   1777c:	cmp	r3, #0
   17780:	blt	177cc <__gcov_sort_n_vals@@Base+0x5e4>
   17784:	bl	17844 <__gcov_sort_n_vals@@Base+0x65c>
   17788:	ldr	lr, [sp, #4]
   1778c:	add	sp, sp, #8
   17790:	pop	{r2, r3}
   17794:	rsbs	r0, r0, #0
   17798:	sbc	r1, r1, r1, lsl #1
   1779c:	rsbs	r2, r2, #0
   177a0:	sbc	r3, r3, r3, lsl #1
   177a4:	bx	lr
   177a8:	rsbs	r2, r2, #0
   177ac:	sbc	r3, r3, r3, lsl #1
   177b0:	bl	17844 <__gcov_sort_n_vals@@Base+0x65c>
   177b4:	ldr	lr, [sp, #4]
   177b8:	add	sp, sp, #8
   177bc:	pop	{r2, r3}
   177c0:	rsbs	r0, r0, #0
   177c4:	sbc	r1, r1, r1, lsl #1
   177c8:	bx	lr
   177cc:	rsbs	r2, r2, #0
   177d0:	sbc	r3, r3, r3, lsl #1
   177d4:	bl	17844 <__gcov_sort_n_vals@@Base+0x65c>
   177d8:	ldr	lr, [sp, #4]
   177dc:	add	sp, sp, #8
   177e0:	pop	{r2, r3}
   177e4:	rsbs	r2, r2, #0
   177e8:	sbc	r3, r3, r3, lsl #1
   177ec:	bx	lr
   177f0:	push	{r1, lr}
   177f4:	mov	r0, #8
   177f8:	bl	11978 <raise@plt>
   177fc:	pop	{r1, pc}
   17800:	ldr	r3, [pc, #48]	; 17838 <__gcov_sort_n_vals@@Base+0x650>
   17804:	ldr	r2, [pc, #48]	; 1783c <__gcov_sort_n_vals@@Base+0x654>
   17808:	and	r3, r3, r0, lsr #1
   1780c:	sub	r0, r0, r3
   17810:	and	r3, r0, r2
   17814:	and	r0, r2, r0, lsr #2
   17818:	add	r3, r3, r0
   1781c:	ldr	r0, [pc, #28]	; 17840 <__gcov_sort_n_vals@@Base+0x658>
   17820:	add	r3, r3, r3, lsr #4
   17824:	and	r0, r0, r3
   17828:	add	r0, r0, r0, lsl #8
   1782c:	add	r0, r0, r0, lsl #16
   17830:	lsr	r0, r0, #24
   17834:	bx	lr
   17838:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   1783c:	teqcc	r3, #-872415232	; 0xcc000000
   17840:	svceq	0x000f0f0f
   17844:	cmp	r1, r3
   17848:	push	{r4, r5, r6, r7, r8, r9, lr}
   1784c:	cmpeq	r0, r2
   17850:	mov	r4, r0
   17854:	mov	r5, r1
   17858:	ldr	r9, [sp, #28]
   1785c:	movcc	r0, #0
   17860:	movcc	r1, #0
   17864:	bcc	1795c <__gcov_sort_n_vals@@Base+0x774>
   17868:	cmp	r3, #0
   1786c:	clzeq	ip, r2
   17870:	clzne	ip, r3
   17874:	addeq	ip, ip, #32
   17878:	cmp	r5, #0
   1787c:	clzeq	r1, r4
   17880:	addeq	r1, r1, #32
   17884:	clzne	r1, r5
   17888:	sub	ip, ip, r1
   1788c:	sub	lr, ip, #32
   17890:	lsl	r7, r3, ip
   17894:	rsb	r8, ip, #32
   17898:	orr	r7, r7, r2, lsl lr
   1789c:	orr	r7, r7, r2, lsr r8
   178a0:	lsl	r6, r2, ip
   178a4:	cmp	r5, r7
   178a8:	cmpeq	r4, r6
   178ac:	movcc	r0, #0
   178b0:	movcc	r1, #0
   178b4:	bcc	178d0 <__gcov_sort_n_vals@@Base+0x6e8>
   178b8:	mov	r3, #1
   178bc:	subs	r4, r4, r6
   178c0:	lsl	r1, r3, lr
   178c4:	lsl	r0, r3, ip
   178c8:	orr	r1, r1, r3, lsr r8
   178cc:	sbc	r5, r5, r7
   178d0:	cmp	ip, #0
   178d4:	beq	1795c <__gcov_sort_n_vals@@Base+0x774>
   178d8:	lsrs	r3, r7, #1
   178dc:	rrx	r2, r6
   178e0:	mov	r6, ip
   178e4:	b	17908 <__gcov_sort_n_vals@@Base+0x720>
   178e8:	subs	r4, r4, r2
   178ec:	sbc	r5, r5, r3
   178f0:	adds	r4, r4, r4
   178f4:	adc	r5, r5, r5
   178f8:	adds	r4, r4, #1
   178fc:	adc	r5, r5, #0
   17900:	subs	r6, r6, #1
   17904:	beq	17924 <__gcov_sort_n_vals@@Base+0x73c>
   17908:	cmp	r5, r3
   1790c:	cmpeq	r4, r2
   17910:	bcs	178e8 <__gcov_sort_n_vals@@Base+0x700>
   17914:	adds	r4, r4, r4
   17918:	adc	r5, r5, r5
   1791c:	subs	r6, r6, #1
   17920:	bne	17908 <__gcov_sort_n_vals@@Base+0x720>
   17924:	lsr	r6, r4, ip
   17928:	lsr	r7, r5, ip
   1792c:	orr	r6, r6, r5, lsl r8
   17930:	adds	r2, r0, r4
   17934:	orr	r6, r6, r5, lsr lr
   17938:	adc	r3, r1, r5
   1793c:	lsl	r1, r7, ip
   17940:	orr	r1, r1, r6, lsl lr
   17944:	lsl	r0, r6, ip
   17948:	orr	r1, r1, r6, lsr r8
   1794c:	subs	r0, r2, r0
   17950:	mov	r4, r6
   17954:	mov	r5, r7
   17958:	sbc	r1, r3, r1
   1795c:	cmp	r9, #0
   17960:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   17964:	strd	r4, [r9]
   17968:	pop	{r4, r5, r6, r7, r8, r9, pc}

0001796c <__libc_csu_init@@Base>:
   1796c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17970:	mov	r7, r0
   17974:	ldr	r6, [pc, #72]	; 179c4 <__libc_csu_init@@Base+0x58>
   17978:	ldr	r5, [pc, #72]	; 179c8 <__libc_csu_init@@Base+0x5c>
   1797c:	add	r6, pc, r6
   17980:	add	r5, pc, r5
   17984:	sub	r6, r6, r5
   17988:	mov	r8, r1
   1798c:	mov	r9, r2
   17990:	bl	1194c <fdopen@plt-0x20>
   17994:	asrs	r6, r6, #2
   17998:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1799c:	mov	r4, #0
   179a0:	add	r4, r4, #1
   179a4:	ldr	r3, [r5], #4
   179a8:	mov	r2, r9
   179ac:	mov	r1, r8
   179b0:	mov	r0, r7
   179b4:	blx	r3
   179b8:	cmp	r6, r4
   179bc:	bne	179a0 <__libc_csu_init@@Base+0x34>
   179c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   179c4:	andeq	r1, r1, ip, lsl #11
   179c8:	andeq	r1, r1, ip, ror #10

000179cc <__libc_csu_fini@@Base>:
   179cc:	bx	lr
   179d0:	ldr	r3, [pc, #12]	; 179e4 <__libc_csu_fini@@Base+0x18>
   179d4:	mov	r1, #0
   179d8:	add	r3, pc, r3
   179dc:	ldr	r2, [r3]
   179e0:	b	11a80 <__cxa_atexit@plt>
   179e4:	ldrdeq	r1, [r1], -r8
   179e8:	mov	r2, r1
   179ec:	mov	r1, r0
   179f0:	mov	r0, #3
   179f4:	b	11a14 <__fxstat@plt>

Disassembly of section .fini:

000179f8 <.fini>:
   179f8:	push	{r3, lr}
   179fc:	pop	{r3, pc}
