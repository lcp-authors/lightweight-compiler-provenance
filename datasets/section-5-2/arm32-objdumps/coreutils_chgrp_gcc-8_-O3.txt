
../repos/coreutils/src/chgrp:     file format elf32-littlearm


Disassembly of section .init:

00010fc8 <.init>:
   10fc8:	push	{r3, lr}
   10fcc:	bl	11864 <__assert_fail@plt+0x534>
   10fd0:	pop	{r3, pc}

Disassembly of section .plt:

00010fd4 <fstatfs64@plt-0x14>:
   10fd4:	push	{lr}		; (str lr, [sp, #-4]!)
   10fd8:	ldr	lr, [pc, #4]	; 10fe4 <fstatfs64@plt-0x4>
   10fdc:	add	lr, pc, lr
   10fe0:	ldr	pc, [lr, #8]!
   10fe4:	andeq	lr, r1, ip, lsl r0

00010fe8 <fstatfs64@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #122880	; 0x1e000
   10ff0:	ldr	pc, [ip, #28]!

00010ff4 <calloc@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #122880	; 0x1e000
   10ffc:	ldr	pc, [ip, #20]!

00011000 <endgrent@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #122880	; 0x1e000
   11008:	ldr	pc, [ip, #12]!

0001100c <fputs_unlocked@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #122880	; 0x1e000
   11014:	ldr	pc, [ip, #4]!

00011018 <raise@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #118784	; 0x1d000
   11020:	ldr	pc, [ip, #4092]!	; 0xffc

00011024 <strcmp@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #118784	; 0x1d000
   1102c:	ldr	pc, [ip, #4084]!	; 0xff4

00011030 <getpwuid@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #118784	; 0x1d000
   11038:	ldr	pc, [ip, #4076]!	; 0xfec

0001103c <fflush@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #118784	; 0x1d000
   11044:	ldr	pc, [ip, #4068]!	; 0xfe4

00011048 <memmove@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #118784	; 0x1d000
   11050:	ldr	pc, [ip, #4060]!	; 0xfdc

00011054 <free@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #118784	; 0x1d000
   1105c:	ldr	pc, [ip, #4052]!	; 0xfd4

00011060 <__openat64_2@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #118784	; 0x1d000
   11068:	ldr	pc, [ip, #4044]!	; 0xfcc

0001106c <_exit@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #118784	; 0x1d000
   11074:	ldr	pc, [ip, #4036]!	; 0xfc4

00011078 <memcpy@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #118784	; 0x1d000
   11080:	ldr	pc, [ip, #4028]!	; 0xfbc

00011084 <__strtoull_internal@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #118784	; 0x1d000
   1108c:	ldr	pc, [ip, #4020]!	; 0xfb4

00011090 <mbsinit@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #118784	; 0x1d000
   11098:	ldr	pc, [ip, #4012]!	; 0xfac

0001109c <memcmp@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #118784	; 0x1d000
   110a4:	ldr	pc, [ip, #4004]!	; 0xfa4

000110a8 <stpcpy@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #118784	; 0x1d000
   110b0:	ldr	pc, [ip, #3996]!	; 0xf9c

000110b4 <fputc_unlocked@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #118784	; 0x1d000
   110bc:	ldr	pc, [ip, #3988]!	; 0xf94

000110c0 <dcgettext@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #118784	; 0x1d000
   110c8:	ldr	pc, [ip, #3980]!	; 0xf8c

000110cc <realloc@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #118784	; 0x1d000
   110d4:	ldr	pc, [ip, #3972]!	; 0xf84

000110d8 <textdomain@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #118784	; 0x1d000
   110e0:	ldr	pc, [ip, #3964]!	; 0xf7c

000110e4 <__fxstatat64@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #118784	; 0x1d000
   110ec:	ldr	pc, [ip, #3956]!	; 0xf74

000110f0 <iswprint@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #118784	; 0x1d000
   110f8:	ldr	pc, [ip, #3948]!	; 0xf6c

000110fc <__fxstat64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #118784	; 0x1d000
   11104:	ldr	pc, [ip, #3940]!	; 0xf64

00011108 <fwrite@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #118784	; 0x1d000
   11110:	ldr	pc, [ip, #3932]!	; 0xf5c

00011114 <lseek64@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #118784	; 0x1d000
   1111c:	ldr	pc, [ip, #3924]!	; 0xf54

00011120 <__ctype_get_mb_cur_max@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #118784	; 0x1d000
   11128:	ldr	pc, [ip, #3916]!	; 0xf4c

0001112c <strcpy@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #118784	; 0x1d000
   11134:	ldr	pc, [ip, #3908]!	; 0xf44

00011138 <__fpending@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #118784	; 0x1d000
   11140:	ldr	pc, [ip, #3900]!	; 0xf3c

00011144 <mbrtowc@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #118784	; 0x1d000
   1114c:	ldr	pc, [ip, #3892]!	; 0xf34

00011150 <error@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #118784	; 0x1d000
   11158:	ldr	pc, [ip, #3884]!	; 0xf2c

0001115c <open64@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #118784	; 0x1d000
   11164:	ldr	pc, [ip, #3876]!	; 0xf24

00011168 <malloc@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #118784	; 0x1d000
   11170:	ldr	pc, [ip, #3868]!	; 0xf1c

00011174 <__libc_start_main@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #118784	; 0x1d000
   1117c:	ldr	pc, [ip, #3860]!	; 0xf14

00011180 <__freading@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #118784	; 0x1d000
   11188:	ldr	pc, [ip, #3852]!	; 0xf0c

0001118c <__gmon_start__@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #118784	; 0x1d000
   11194:	ldr	pc, [ip, #3844]!	; 0xf04

00011198 <getopt_long@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #118784	; 0x1d000
   111a0:	ldr	pc, [ip, #3836]!	; 0xefc

000111a4 <__ctype_b_loc@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #118784	; 0x1d000
   111ac:	ldr	pc, [ip, #3828]!	; 0xef4

000111b0 <exit@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #118784	; 0x1d000
   111b8:	ldr	pc, [ip, #3820]!	; 0xeec

000111bc <strlen@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #118784	; 0x1d000
   111c4:	ldr	pc, [ip, #3812]!	; 0xee4

000111c8 <strchr@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #118784	; 0x1d000
   111d0:	ldr	pc, [ip, #3804]!	; 0xedc

000111d4 <openat64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #118784	; 0x1d000
   111dc:	ldr	pc, [ip, #3796]!	; 0xed4

000111e0 <fchown@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #118784	; 0x1d000
   111e8:	ldr	pc, [ip, #3788]!	; 0xecc

000111ec <__errno_location@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #118784	; 0x1d000
   111f4:	ldr	pc, [ip, #3780]!	; 0xec4

000111f8 <__cxa_atexit@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #118784	; 0x1d000
   11200:	ldr	pc, [ip, #3772]!	; 0xebc

00011204 <memset@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #118784	; 0x1d000
   1120c:	ldr	pc, [ip, #3764]!	; 0xeb4

00011210 <__printf_chk@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #118784	; 0x1d000
   11218:	ldr	pc, [ip, #3756]!	; 0xeac

0001121c <fileno@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #118784	; 0x1d000
   11224:	ldr	pc, [ip, #3748]!	; 0xea4

00011228 <__fprintf_chk@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #118784	; 0x1d000
   11230:	ldr	pc, [ip, #3740]!	; 0xe9c

00011234 <fclose@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #118784	; 0x1d000
   1123c:	ldr	pc, [ip, #3732]!	; 0xe94

00011240 <fseeko64@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #118784	; 0x1d000
   11248:	ldr	pc, [ip, #3724]!	; 0xe8c

0001124c <fcntl64@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #118784	; 0x1d000
   11254:	ldr	pc, [ip, #3716]!	; 0xe84

00011258 <setlocale@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #118784	; 0x1d000
   11260:	ldr	pc, [ip, #3708]!	; 0xe7c

00011264 <strrchr@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #118784	; 0x1d000
   1126c:	ldr	pc, [ip, #3700]!	; 0xe74

00011270 <nl_langinfo@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #118784	; 0x1d000
   11278:	ldr	pc, [ip, #3692]!	; 0xe6c

0001127c <readdir64@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #118784	; 0x1d000
   11284:	ldr	pc, [ip, #3684]!	; 0xe64

00011288 <fdopendir@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #118784	; 0x1d000
   11290:	ldr	pc, [ip, #3676]!	; 0xe5c

00011294 <dirfd@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #118784	; 0x1d000
   1129c:	ldr	pc, [ip, #3668]!	; 0xe54

000112a0 <fchdir@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #118784	; 0x1d000
   112a8:	ldr	pc, [ip, #3660]!	; 0xe4c

000112ac <qsort@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #118784	; 0x1d000
   112b4:	ldr	pc, [ip, #3652]!	; 0xe44

000112b8 <fchownat@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #118784	; 0x1d000
   112c0:	ldr	pc, [ip, #3644]!	; 0xe3c

000112c4 <bindtextdomain@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #118784	; 0x1d000
   112cc:	ldr	pc, [ip, #3636]!	; 0xe34

000112d0 <__xstat64@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #118784	; 0x1d000
   112d8:	ldr	pc, [ip, #3628]!	; 0xe2c

000112dc <strncmp@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #118784	; 0x1d000
   112e4:	ldr	pc, [ip, #3620]!	; 0xe24

000112e8 <abort@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #118784	; 0x1d000
   112f0:	ldr	pc, [ip, #3612]!	; 0xe1c

000112f4 <close@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #118784	; 0x1d000
   112fc:	ldr	pc, [ip, #3604]!	; 0xe14

00011300 <__lxstat64@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #118784	; 0x1d000
   11308:	ldr	pc, [ip, #3596]!	; 0xe0c

0001130c <closedir@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #118784	; 0x1d000
   11314:	ldr	pc, [ip, #3588]!	; 0xe04

00011318 <getgrgid@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #118784	; 0x1d000
   11320:	ldr	pc, [ip, #3580]!	; 0xdfc

00011324 <getgrnam@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #118784	; 0x1d000
   1132c:	ldr	pc, [ip, #3572]!	; 0xdf4

00011330 <__assert_fail@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #118784	; 0x1d000
   11338:	ldr	pc, [ip, #3564]!	; 0xdec

Disassembly of section .text:

00011340 <.text>:
   11340:	mvn	r3, #0
   11344:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11348:	movw	r5, #55316	; 0xd814
   1134c:	movt	r5, #1
   11350:	strd	r6, [sp, #8]
   11354:	mov	r7, r0
   11358:	strd	r8, [sp, #16]
   1135c:	mov	r6, r1
   11360:	mov	r9, #16
   11364:	strd	sl, [sp, #24]
   11368:	movw	fp, #61856	; 0xf1a0
   1136c:	movt	fp, #2
   11370:	str	lr, [sp, #32]
   11374:	sub	sp, sp, #156	; 0x9c
   11378:	mov	sl, #0
   1137c:	ldr	r0, [r1]
   11380:	str	r3, [sp, #20]
   11384:	bl	16d18 <__assert_fail@plt+0x59e8>
   11388:	movw	r1, #54780	; 0xd5fc
   1138c:	movt	r1, #1
   11390:	ldr	r8, [pc, #1160]	; 11820 <__assert_fail@plt+0x4f0>
   11394:	mov	r0, #6
   11398:	bl	11258 <setlocale@plt>
   1139c:	movw	r1, #55260	; 0xd7dc
   113a0:	movt	r1, #1
   113a4:	movw	r0, #55092	; 0xd734
   113a8:	movt	r0, #1
   113ac:	bl	112c4 <bindtextdomain@plt>
   113b0:	movw	r0, #55092	; 0xd734
   113b4:	movt	r0, #1
   113b8:	bl	110d8 <textdomain@plt>
   113bc:	movw	r0, #11312	; 0x2c30
   113c0:	movt	r0, #1
   113c4:	bl	1ceac <__assert_fail@plt+0xbb7c>
   113c8:	add	r0, sp, #24
   113cc:	bl	11db8 <__assert_fail@plt+0xa88>
   113d0:	mov	r4, #0
   113d4:	mov	r3, r8
   113d8:	mov	r2, r5
   113dc:	mov	r1, r6
   113e0:	mov	r0, r7
   113e4:	str	r4, [sp]
   113e8:	bl	11198 <getopt_long@plt>
   113ec:	cmn	r0, #1
   113f0:	beq	1154c <__assert_fail@plt+0x21c>
   113f4:	cmp	r0, #99	; 0x63
   113f8:	beq	114d4 <__assert_fail@plt+0x1a4>
   113fc:	ble	1142c <__assert_fail@plt+0xfc>
   11400:	cmp	r0, #256	; 0x100
   11404:	beq	114c8 <__assert_fail@plt+0x198>
   11408:	bgt	11458 <__assert_fail@plt+0x128>
   1140c:	cmp	r0, #104	; 0x68
   11410:	beq	114a8 <__assert_fail@plt+0x178>
   11414:	cmp	r0, #118	; 0x76
   11418:	beq	11544 <__assert_fail@plt+0x214>
   1141c:	cmp	r0, #102	; 0x66
   11420:	beq	11538 <__assert_fail@plt+0x208>
   11424:	mov	r0, #1
   11428:	bl	11918 <__assert_fail@plt+0x5e8>
   1142c:	cmp	r0, #72	; 0x48
   11430:	beq	114c0 <__assert_fail@plt+0x190>
   11434:	ble	11488 <__assert_fail@plt+0x158>
   11438:	cmp	r0, #80	; 0x50
   1143c:	beq	114b0 <__assert_fail@plt+0x180>
   11440:	cmp	r0, #82	; 0x52
   11444:	beq	1152c <__assert_fail@plt+0x1fc>
   11448:	cmp	r0, #76	; 0x4c
   1144c:	bne	11424 <__assert_fail@plt+0xf4>
   11450:	mov	r9, #2
   11454:	b	113d0 <__assert_fail@plt+0xa0>
   11458:	movw	r3, #258	; 0x102
   1145c:	cmp	r0, r3
   11460:	beq	114b8 <__assert_fail@plt+0x188>
   11464:	blt	114a0 <__assert_fail@plt+0x170>
   11468:	movw	r3, #259	; 0x103
   1146c:	cmp	r0, r3
   11470:	bne	11424 <__assert_fail@plt+0xf4>
   11474:	movw	r3, #61848	; 0xf198
   11478:	movt	r3, #2
   1147c:	ldr	r3, [r3]
   11480:	str	r3, [fp]
   11484:	b	113d0 <__assert_fail@plt+0xa0>
   11488:	cmn	r0, #3
   1148c:	beq	114e0 <__assert_fail@plt+0x1b0>
   11490:	cmn	r0, #2
   11494:	bne	11424 <__assert_fail@plt+0xf4>
   11498:	mov	r0, r4
   1149c:	bl	11918 <__assert_fail@plt+0x5e8>
   114a0:	mov	sl, r4
   114a4:	b	113d0 <__assert_fail@plt+0xa0>
   114a8:	str	r4, [sp, #20]
   114ac:	b	113d0 <__assert_fail@plt+0xa0>
   114b0:	mov	r9, #16
   114b4:	b	113d0 <__assert_fail@plt+0xa0>
   114b8:	mov	sl, #1
   114bc:	b	113d0 <__assert_fail@plt+0xa0>
   114c0:	mov	r9, #17
   114c4:	b	113d0 <__assert_fail@plt+0xa0>
   114c8:	mov	r3, #1
   114cc:	str	r3, [sp, #20]
   114d0:	b	113d0 <__assert_fail@plt+0xa0>
   114d4:	mov	r3, #1
   114d8:	str	r3, [sp, #24]
   114dc:	b	113d0 <__assert_fail@plt+0xa0>
   114e0:	movw	r1, #55284	; 0xd7f4
   114e4:	movt	r1, #1
   114e8:	movw	r2, #55300	; 0xd804
   114ec:	movt	r2, #1
   114f0:	movw	r3, #61748	; 0xf134
   114f4:	movt	r3, #2
   114f8:	movw	r0, #61844	; 0xf194
   114fc:	movt	r0, #2
   11500:	str	r2, [sp]
   11504:	movw	r2, #55088	; 0xd730
   11508:	movt	r2, #1
   1150c:	stmib	sp, {r1, r4}
   11510:	movw	r1, #53208	; 0xcfd8
   11514:	movt	r1, #1
   11518:	ldr	r0, [r0]
   1151c:	ldr	r3, [r3]
   11520:	bl	1ae04 <__assert_fail@plt+0x9ad4>
   11524:	mov	r0, r4
   11528:	bl	111b0 <exit@plt>
   1152c:	mov	r3, #1
   11530:	strb	r3, [sp, #28]
   11534:	b	113d0 <__assert_fail@plt+0xa0>
   11538:	mov	r3, #1
   1153c:	strb	r3, [sp, #37]	; 0x25
   11540:	b	113d0 <__assert_fail@plt+0xa0>
   11544:	str	r4, [sp, #24]
   11548:	b	113d0 <__assert_fail@plt+0xa0>
   1154c:	ldrb	r3, [sp, #28]
   11550:	cmp	r3, r4
   11554:	beq	115cc <__assert_fail@plt+0x29c>
   11558:	cmp	r9, #16
   1155c:	beq	11610 <__assert_fail@plt+0x2e0>
   11560:	movw	r3, #61856	; 0xf1a0
   11564:	movt	r3, #2
   11568:	ldr	r5, [r3]
   1156c:	movw	r4, #61832	; 0xf188
   11570:	movt	r4, #2
   11574:	ldr	r3, [sp, #20]
   11578:	ldr	r2, [r4]
   1157c:	adds	r3, r3, #0
   11580:	movne	r3, #1
   11584:	cmp	r5, #0
   11588:	strb	r3, [sp, #36]	; 0x24
   1158c:	sub	r3, r7, r2
   11590:	beq	11644 <__assert_fail@plt+0x314>
   11594:	cmp	r3, #0
   11598:	bgt	116d4 <__assert_fail@plt+0x3a4>
   1159c:	cmp	r2, r7
   115a0:	blt	115d4 <__assert_fail@plt+0x2a4>
   115a4:	mov	r2, #5
   115a8:	movw	r1, #55372	; 0xd84c
   115ac:	movt	r1, #1
   115b0:	mov	r0, #0
   115b4:	bl	110c0 <dcgettext@plt>
   115b8:	mov	r1, #0
   115bc:	mov	r2, r0
   115c0:	mov	r0, r1
   115c4:	bl	11150 <error@plt>
   115c8:	b	11424 <__assert_fail@plt+0xf4>
   115cc:	mov	r9, #16
   115d0:	b	11560 <__assert_fail@plt+0x230>
   115d4:	mov	r2, #5
   115d8:	movw	r1, #55388	; 0xd85c
   115dc:	movt	r1, #1
   115e0:	mov	r0, #0
   115e4:	bl	110c0 <dcgettext@plt>
   115e8:	sub	r7, r7, #-1073741823	; 0xc0000001
   115ec:	mov	r4, r0
   115f0:	ldr	r0, [r6, r7, lsl #2]
   115f4:	bl	1a688 <__assert_fail@plt+0x9358>
   115f8:	mov	r1, #0
   115fc:	mov	r3, r0
   11600:	mov	r2, r4
   11604:	mov	r0, r1
   11608:	bl	11150 <error@plt>
   1160c:	b	11424 <__assert_fail@plt+0xf4>
   11610:	ldr	r3, [sp, #20]
   11614:	cmp	r3, #1
   11618:	strne	r4, [sp, #20]
   1161c:	bne	11560 <__assert_fail@plt+0x230>
   11620:	mov	r2, #5
   11624:	movw	r1, #55328	; 0xd820
   11628:	movt	r1, #1
   1162c:	mov	r0, r4
   11630:	bl	110c0 <dcgettext@plt>
   11634:	mov	r2, r0
   11638:	mov	r1, r4
   1163c:	ldr	r0, [sp, #20]
   11640:	bl	11150 <error@plt>
   11644:	cmp	r3, #1
   11648:	ble	1159c <__assert_fail@plt+0x26c>
   1164c:	ldr	r7, [r6, r2, lsl #2]
   11650:	add	r2, r2, #1
   11654:	str	r2, [r4]
   11658:	ldrb	r3, [r7]
   1165c:	cmp	r3, #0
   11660:	bne	1175c <__assert_fail@plt+0x42c>
   11664:	str	r5, [sp, #44]	; 0x2c
   11668:	ldrb	r3, [r7]
   1166c:	cmp	r3, #0
   11670:	mvneq	r5, #0
   11674:	beq	11690 <__assert_fail@plt+0x360>
   11678:	mov	r0, r7
   1167c:	bl	11324 <getgrnam@plt>
   11680:	subs	r1, r0, #0
   11684:	ldrne	r5, [r1, #8]
   11688:	beq	1176c <__assert_fail@plt+0x43c>
   1168c:	bl	11000 <endgrent@plt>
   11690:	ldrb	r3, [sp, #28]
   11694:	tst	sl, r3
   11698:	bne	11700 <__assert_fail@plt+0x3d0>
   1169c:	ldr	r0, [r4]
   116a0:	mvn	ip, #0
   116a4:	add	r2, sp, #24
   116a8:	mov	r3, r5
   116ac:	orr	r1, r9, #1024	; 0x400
   116b0:	str	ip, [sp]
   116b4:	str	ip, [sp, #4]
   116b8:	str	r2, [sp, #8]
   116bc:	mov	r2, ip
   116c0:	add	r0, r6, r0, lsl #2
   116c4:	bl	11e90 <__assert_fail@plt+0xb60>
   116c8:	eor	r0, r0, #1
   116cc:	uxtb	r0, r0
   116d0:	bl	111b0 <exit@plt>
   116d4:	add	r2, sp, #48	; 0x30
   116d8:	mov	r1, r5
   116dc:	mov	r0, #3
   116e0:	bl	112d0 <__xstat64@plt>
   116e4:	cmp	r0, #0
   116e8:	bne	117e0 <__assert_fail@plt+0x4b0>
   116ec:	ldr	r5, [sp, #76]	; 0x4c
   116f0:	mov	r0, r5
   116f4:	bl	11e08 <__assert_fail@plt+0xad8>
   116f8:	str	r0, [sp, #44]	; 0x2c
   116fc:	b	11690 <__assert_fail@plt+0x360>
   11700:	ldr	r0, [pc, #284]	; 11824 <__assert_fail@plt+0x4f4>
   11704:	bl	1a81c <__assert_fail@plt+0x94ec>
   11708:	cmp	r0, #0
   1170c:	mov	r7, r0
   11710:	str	r0, [sp, #32]
   11714:	bne	1169c <__assert_fail@plt+0x36c>
   11718:	bl	111ec <__errno_location@plt>
   1171c:	ldr	r4, [r0]
   11720:	mov	r2, #5
   11724:	movw	r1, #55416	; 0xd878
   11728:	movt	r1, #1
   1172c:	mov	r0, r7
   11730:	bl	110c0 <dcgettext@plt>
   11734:	mov	r5, r0
   11738:	movw	r1, #55468	; 0xd8ac
   1173c:	movt	r1, #1
   11740:	mov	r0, #4
   11744:	bl	1935c <__assert_fail@plt+0x802c>
   11748:	mov	r3, r0
   1174c:	mov	r2, r5
   11750:	mov	r1, r4
   11754:	mov	r0, #1
   11758:	bl	11150 <error@plt>
   1175c:	mov	r0, r7
   11760:	bl	1b580 <__assert_fail@plt+0xa250>
   11764:	mov	r5, r0
   11768:	b	11664 <__assert_fail@plt+0x334>
   1176c:	movw	r0, #54780	; 0xd5fc
   11770:	movt	r0, #1
   11774:	add	r3, sp, #48	; 0x30
   11778:	mov	r2, #10
   1177c:	str	r0, [sp]
   11780:	mov	r0, r7
   11784:	bl	1b6a0 <__assert_fail@plt+0xa370>
   11788:	cmp	r0, #0
   1178c:	bne	117ac <__assert_fail@plt+0x47c>
   11790:	ldrd	r2, [sp, #48]	; 0x30
   11794:	mov	r1, #0
   11798:	mvn	r0, #0
   1179c:	cmp	r3, r1
   117a0:	cmpeq	r2, r0
   117a4:	movls	r5, r2
   117a8:	bls	1168c <__assert_fail@plt+0x35c>
   117ac:	mov	r2, #5
   117b0:	movw	r1, #55448	; 0xd898
   117b4:	movt	r1, #1
   117b8:	mov	r0, #0
   117bc:	bl	110c0 <dcgettext@plt>
   117c0:	mov	r4, r0
   117c4:	mov	r0, r7
   117c8:	bl	1a688 <__assert_fail@plt+0x9358>
   117cc:	mov	r3, r0
   117d0:	mov	r2, r4
   117d4:	mov	r1, #0
   117d8:	mov	r0, #1
   117dc:	bl	11150 <error@plt>
   117e0:	bl	111ec <__errno_location@plt>
   117e4:	ldr	r4, [r0]
   117e8:	mov	r2, #5
   117ec:	movw	r1, #55416	; 0xd878
   117f0:	movt	r1, #1
   117f4:	mov	r0, #0
   117f8:	bl	110c0 <dcgettext@plt>
   117fc:	mov	r6, r0
   11800:	mov	r1, r5
   11804:	mov	r0, #4
   11808:	bl	1935c <__assert_fail@plt+0x802c>
   1180c:	mov	r3, r0
   11810:	mov	r2, r6
   11814:	mov	r1, r4
   11818:	mov	r0, #1
   1181c:	bl	11150 <error@plt>
   11820:	andeq	ip, r1, r8, lsl #30
   11824:	andeq	pc, r2, r8, lsr #3
   11828:	mov	fp, #0
   1182c:	mov	lr, #0
   11830:	pop	{r1}		; (ldr r1, [sp], #4)
   11834:	mov	r2, sp
   11838:	push	{r2}		; (str r2, [sp, #-4]!)
   1183c:	push	{r0}		; (str r0, [sp, #-4]!)
   11840:	ldr	ip, [pc, #16]	; 11858 <__assert_fail@plt+0x528>
   11844:	push	{ip}		; (str ip, [sp, #-4]!)
   11848:	ldr	r0, [pc, #12]	; 1185c <__assert_fail@plt+0x52c>
   1184c:	ldr	r3, [pc, #12]	; 11860 <__assert_fail@plt+0x530>
   11850:	bl	11174 <__libc_start_main@plt>
   11854:	bl	112e8 <abort@plt>
   11858:	andeq	ip, r1, r8, lsr #29
   1185c:	andeq	r1, r1, r0, asr #6
   11860:	andeq	ip, r1, r8, asr #28
   11864:	ldr	r3, [pc, #20]	; 11880 <__assert_fail@plt+0x550>
   11868:	ldr	r2, [pc, #20]	; 11884 <__assert_fail@plt+0x554>
   1186c:	add	r3, pc, r3
   11870:	ldr	r2, [r3, r2]
   11874:	cmp	r2, #0
   11878:	bxeq	lr
   1187c:	b	1118c <__gmon_start__@plt>
   11880:	andeq	sp, r1, ip, lsl #15
   11884:	andeq	r0, r0, r8, lsr #2
   11888:	ldr	r0, [pc, #24]	; 118a8 <__assert_fail@plt+0x578>
   1188c:	ldr	r3, [pc, #24]	; 118ac <__assert_fail@plt+0x57c>
   11890:	cmp	r3, r0
   11894:	bxeq	lr
   11898:	ldr	r3, [pc, #16]	; 118b0 <__assert_fail@plt+0x580>
   1189c:	cmp	r3, #0
   118a0:	bxeq	lr
   118a4:	bx	r3
   118a8:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   118ac:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   118b0:	andeq	r0, r0, r0
   118b4:	ldr	r0, [pc, #36]	; 118e0 <__assert_fail@plt+0x5b0>
   118b8:	ldr	r1, [pc, #36]	; 118e4 <__assert_fail@plt+0x5b4>
   118bc:	sub	r1, r1, r0
   118c0:	asr	r1, r1, #2
   118c4:	add	r1, r1, r1, lsr #31
   118c8:	asrs	r1, r1, #1
   118cc:	bxeq	lr
   118d0:	ldr	r3, [pc, #16]	; 118e8 <__assert_fail@plt+0x5b8>
   118d4:	cmp	r3, #0
   118d8:	bxeq	lr
   118dc:	bx	r3
   118e0:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   118e4:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   118e8:	andeq	r0, r0, r0
   118ec:	push	{r4, lr}
   118f0:	ldr	r4, [pc, #24]	; 11910 <__assert_fail@plt+0x5e0>
   118f4:	ldrb	r3, [r4]
   118f8:	cmp	r3, #0
   118fc:	popne	{r4, pc}
   11900:	bl	11888 <__assert_fail@plt+0x558>
   11904:	mov	r3, #1
   11908:	strb	r3, [r4]
   1190c:	pop	{r4, pc}
   11910:	muleq	r2, ip, r1
   11914:	b	118b4 <__assert_fail@plt+0x584>
   11918:	subs	r6, r0, #0
   1191c:	str	r7, [sp, #-8]!
   11920:	str	lr, [sp, #4]
   11924:	sub	sp, sp, #56	; 0x38
   11928:	beq	11970 <__assert_fail@plt+0x640>
   1192c:	movw	r3, #61840	; 0xf190
   11930:	movt	r3, #2
   11934:	ldr	r4, [r3]
   11938:	mov	r2, #5
   1193c:	movw	r1, #53216	; 0xcfe0
   11940:	movt	r1, #1
   11944:	mov	r0, #0
   11948:	bl	110c0 <dcgettext@plt>
   1194c:	movw	r3, #61888	; 0xf1c0
   11950:	movt	r3, #2
   11954:	mov	r2, r0
   11958:	mov	r1, #1
   1195c:	ldr	r3, [r3]
   11960:	mov	r0, r4
   11964:	bl	11228 <__fprintf_chk@plt>
   11968:	mov	r0, r6
   1196c:	bl	111b0 <exit@plt>
   11970:	mov	r2, #5
   11974:	movw	r1, #53256	; 0xd008
   11978:	movt	r1, #1
   1197c:	movw	r4, #61888	; 0xf1c0
   11980:	movt	r4, #2
   11984:	movw	r7, #61844	; 0xf194
   11988:	movt	r7, #2
   1198c:	bl	110c0 <dcgettext@plt>
   11990:	ldr	r3, [r4]
   11994:	mov	r1, r0
   11998:	mov	r0, #1
   1199c:	mov	r2, r3
   119a0:	bl	11210 <__printf_chk@plt>
   119a4:	mov	r2, #5
   119a8:	movw	r1, #53344	; 0xd060
   119ac:	movt	r1, #1
   119b0:	mov	r0, r6
   119b4:	bl	110c0 <dcgettext@plt>
   119b8:	ldr	r1, [r7]
   119bc:	bl	1100c <fputs_unlocked@plt>
   119c0:	mov	r2, #5
   119c4:	movw	r1, #53452	; 0xd0cc
   119c8:	movt	r1, #1
   119cc:	mov	r0, r6
   119d0:	bl	110c0 <dcgettext@plt>
   119d4:	ldr	r1, [r7]
   119d8:	bl	1100c <fputs_unlocked@plt>
   119dc:	mov	r2, #5
   119e0:	movw	r1, #53656	; 0xd198
   119e4:	movt	r1, #1
   119e8:	mov	r0, r6
   119ec:	bl	110c0 <dcgettext@plt>
   119f0:	ldr	r1, [r7]
   119f4:	bl	1100c <fputs_unlocked@plt>
   119f8:	mov	r2, #5
   119fc:	movw	r1, #53888	; 0xd280
   11a00:	movt	r1, #1
   11a04:	mov	r0, r6
   11a08:	bl	110c0 <dcgettext@plt>
   11a0c:	ldr	r1, [r7]
   11a10:	bl	1100c <fputs_unlocked@plt>
   11a14:	mov	r2, #5
   11a18:	movw	r1, #54008	; 0xd2f8
   11a1c:	movt	r1, #1
   11a20:	mov	r0, r6
   11a24:	bl	110c0 <dcgettext@plt>
   11a28:	ldr	r1, [r7]
   11a2c:	bl	1100c <fputs_unlocked@plt>
   11a30:	mov	r2, #5
   11a34:	movw	r1, #54136	; 0xd378
   11a38:	movt	r1, #1
   11a3c:	mov	r0, r6
   11a40:	bl	110c0 <dcgettext@plt>
   11a44:	ldr	r1, [r7]
   11a48:	bl	1100c <fputs_unlocked@plt>
   11a4c:	mov	r2, #5
   11a50:	movw	r1, #54244	; 0xd3e4
   11a54:	movt	r1, #1
   11a58:	mov	r0, r6
   11a5c:	bl	110c0 <dcgettext@plt>
   11a60:	ldr	r1, [r7]
   11a64:	bl	1100c <fputs_unlocked@plt>
   11a68:	mov	r2, #5
   11a6c:	movw	r1, #54316	; 0xd42c
   11a70:	movt	r1, #1
   11a74:	mov	r0, r6
   11a78:	bl	110c0 <dcgettext@plt>
   11a7c:	ldr	r1, [r7]
   11a80:	bl	1100c <fputs_unlocked@plt>
   11a84:	mov	r2, #5
   11a88:	movw	r1, #54784	; 0xd600
   11a8c:	movt	r1, #1
   11a90:	mov	r0, r6
   11a94:	bl	110c0 <dcgettext@plt>
   11a98:	ldr	r1, [r7]
   11a9c:	bl	1100c <fputs_unlocked@plt>
   11aa0:	mov	r2, #5
   11aa4:	movw	r1, #54832	; 0xd630
   11aa8:	movt	r1, #1
   11aac:	mov	r0, r6
   11ab0:	bl	110c0 <dcgettext@plt>
   11ab4:	ldr	r1, [r7]
   11ab8:	bl	1100c <fputs_unlocked@plt>
   11abc:	mov	r2, #5
   11ac0:	movw	r1, #54888	; 0xd668
   11ac4:	movt	r1, #1
   11ac8:	mov	r0, r6
   11acc:	bl	110c0 <dcgettext@plt>
   11ad0:	ldr	r3, [r4]
   11ad4:	mov	r1, r0
   11ad8:	mov	r0, #1
   11adc:	mov	r2, r3
   11ae0:	bl	11210 <__printf_chk@plt>
   11ae4:	movw	lr, #52944	; 0xced0
   11ae8:	movt	lr, #1
   11aec:	ldr	ip, [lr]
   11af0:	ldr	r4, [lr, #4]
   11af4:	ldrd	r8, [lr, #8]
   11af8:	subs	r1, ip, #0
   11afc:	str	ip, [sp]
   11b00:	ldrd	r2, [lr, #16]
   11b04:	str	r4, [sp, #4]
   11b08:	ldrd	r4, [lr, #24]
   11b0c:	strd	r8, [sp, #8]
   11b10:	ldrd	r8, [lr, #32]
   11b14:	strd	r2, [sp, #16]
   11b18:	ldrd	r2, [lr, #40]	; 0x28
   11b1c:	strd	r4, [sp, #24]
   11b20:	ldrd	r4, [lr, #48]	; 0x30
   11b24:	strd	r8, [sp, #32]
   11b28:	strd	r2, [sp, #40]	; 0x28
   11b2c:	strd	r4, [sp, #48]	; 0x30
   11b30:	movwne	r5, #53208	; 0xcfd8
   11b34:	mov	r4, sp
   11b38:	movtne	r5, #1
   11b3c:	bne	11c34 <__assert_fail@plt+0x904>
   11b40:	ldr	r4, [r4, #4]
   11b44:	movw	r1, #55024	; 0xd6f0
   11b48:	movt	r1, #1
   11b4c:	mov	r2, #5
   11b50:	cmp	r4, #0
   11b54:	beq	11c48 <__assert_fail@plt+0x918>
   11b58:	mov	r0, #0
   11b5c:	bl	110c0 <dcgettext@plt>
   11b60:	mov	r1, r0
   11b64:	movw	r3, #55048	; 0xd708
   11b68:	movt	r3, #1
   11b6c:	movw	r2, #55088	; 0xd730
   11b70:	movt	r2, #1
   11b74:	mov	r0, #1
   11b78:	bl	11210 <__printf_chk@plt>
   11b7c:	mov	r1, #0
   11b80:	mov	r0, #5
   11b84:	bl	11258 <setlocale@plt>
   11b88:	cmp	r0, #0
   11b8c:	movweq	r5, #53208	; 0xcfd8
   11b90:	movteq	r5, #1
   11b94:	beq	11bb8 <__assert_fail@plt+0x888>
   11b98:	movw	r1, #55104	; 0xd740
   11b9c:	movt	r1, #1
   11ba0:	mov	r2, #3
   11ba4:	movw	r5, #53208	; 0xcfd8
   11ba8:	movt	r5, #1
   11bac:	bl	112dc <strncmp@plt>
   11bb0:	cmp	r0, #0
   11bb4:	bne	11d00 <__assert_fail@plt+0x9d0>
   11bb8:	mov	r2, #5
   11bbc:	movw	r1, #55180	; 0xd78c
   11bc0:	movt	r1, #1
   11bc4:	mov	r0, #0
   11bc8:	bl	110c0 <dcgettext@plt>
   11bcc:	mov	r1, r0
   11bd0:	movw	r3, #53208	; 0xcfd8
   11bd4:	movt	r3, #1
   11bd8:	movw	r2, #55048	; 0xd708
   11bdc:	movt	r2, #1
   11be0:	mov	r0, #1
   11be4:	bl	11210 <__printf_chk@plt>
   11be8:	mov	r2, #5
   11bec:	movw	r1, #55208	; 0xd7a8
   11bf0:	movt	r1, #1
   11bf4:	mov	r0, #0
   11bf8:	bl	110c0 <dcgettext@plt>
   11bfc:	movw	r2, #55480	; 0xd8b8
   11c00:	movt	r2, #1
   11c04:	cmp	r4, r5
   11c08:	movw	r3, #54780	; 0xd5fc
   11c0c:	movt	r3, #1
   11c10:	mov	r1, r0
   11c14:	moveq	r3, r2
   11c18:	mov	r2, r4
   11c1c:	mov	r0, #1
   11c20:	bl	11210 <__printf_chk@plt>
   11c24:	b	11968 <__assert_fail@plt+0x638>
   11c28:	ldr	r1, [r4, #8]!
   11c2c:	cmp	r1, #0
   11c30:	beq	11b40 <__assert_fail@plt+0x810>
   11c34:	mov	r0, r5
   11c38:	bl	11024 <strcmp@plt>
   11c3c:	cmp	r0, #0
   11c40:	bne	11c28 <__assert_fail@plt+0x8f8>
   11c44:	b	11b40 <__assert_fail@plt+0x810>
   11c48:	mov	r0, r4
   11c4c:	bl	110c0 <dcgettext@plt>
   11c50:	mov	r1, r0
   11c54:	movw	r3, #55048	; 0xd708
   11c58:	movt	r3, #1
   11c5c:	movw	r2, #55088	; 0xd730
   11c60:	movt	r2, #1
   11c64:	mov	r0, #1
   11c68:	bl	11210 <__printf_chk@plt>
   11c6c:	mov	r1, r4
   11c70:	mov	r0, #5
   11c74:	bl	11258 <setlocale@plt>
   11c78:	cmp	r0, #0
   11c7c:	beq	11c98 <__assert_fail@plt+0x968>
   11c80:	movw	r1, #55104	; 0xd740
   11c84:	movt	r1, #1
   11c88:	mov	r2, #3
   11c8c:	bl	112dc <strncmp@plt>
   11c90:	cmp	r0, #0
   11c94:	bne	11cf4 <__assert_fail@plt+0x9c4>
   11c98:	mov	r2, #5
   11c9c:	movw	r1, #55180	; 0xd78c
   11ca0:	movt	r1, #1
   11ca4:	mov	r0, #0
   11ca8:	bl	110c0 <dcgettext@plt>
   11cac:	mov	r1, r0
   11cb0:	movw	r3, #53208	; 0xcfd8
   11cb4:	movt	r3, #1
   11cb8:	movw	r2, #55048	; 0xd708
   11cbc:	movt	r2, #1
   11cc0:	mov	r0, #1
   11cc4:	bl	11210 <__printf_chk@plt>
   11cc8:	movw	r1, #55208	; 0xd7a8
   11ccc:	movt	r1, #1
   11cd0:	mov	r2, #5
   11cd4:	mov	r0, #0
   11cd8:	bl	110c0 <dcgettext@plt>
   11cdc:	movw	r4, #53208	; 0xcfd8
   11ce0:	movt	r4, #1
   11ce4:	movw	r3, #55480	; 0xd8b8
   11ce8:	movt	r3, #1
   11cec:	mov	r1, r0
   11cf0:	b	11c18 <__assert_fail@plt+0x8e8>
   11cf4:	movw	r5, #53208	; 0xcfd8
   11cf8:	movt	r5, #1
   11cfc:	mov	r4, r5
   11d00:	mov	r2, #5
   11d04:	movw	r1, #55108	; 0xd744
   11d08:	movt	r1, #1
   11d0c:	mov	r0, #0
   11d10:	bl	110c0 <dcgettext@plt>
   11d14:	ldr	r1, [r7]
   11d18:	bl	1100c <fputs_unlocked@plt>
   11d1c:	b	11bb8 <__assert_fail@plt+0x888>
   11d20:	subs	r3, r0, #0
   11d24:	strd	r4, [sp, #-16]!
   11d28:	str	r6, [sp, #8]
   11d2c:	str	lr, [sp, #12]
   11d30:	beq	11d90 <__assert_fail@plt+0xa60>
   11d34:	cmp	r1, #0
   11d38:	beq	11d9c <__assert_fail@plt+0xa6c>
   11d3c:	mov	r4, r1
   11d40:	mov	r5, r3
   11d44:	bl	111bc <strlen@plt>
   11d48:	mov	r6, r0
   11d4c:	mov	r0, r4
   11d50:	bl	111bc <strlen@plt>
   11d54:	add	r0, r6, r0
   11d58:	add	r0, r0, #2
   11d5c:	bl	1b014 <__assert_fail@plt+0x9ce4>
   11d60:	mov	r1, r5
   11d64:	mov	r6, r0
   11d68:	bl	110a8 <stpcpy@plt>
   11d6c:	mov	r3, #58	; 0x3a
   11d70:	mov	r1, r4
   11d74:	strb	r3, [r0], #1
   11d78:	bl	1112c <strcpy@plt>
   11d7c:	mov	r0, r6
   11d80:	ldrd	r4, [sp]
   11d84:	ldr	r6, [sp, #8]
   11d88:	add	sp, sp, #12
   11d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   11d90:	cmp	r1, #0
   11d94:	beq	11db0 <__assert_fail@plt+0xa80>
   11d98:	mov	r0, r1
   11d9c:	ldrd	r4, [sp]
   11da0:	ldr	r6, [sp, #8]
   11da4:	ldr	lr, [sp, #12]
   11da8:	add	sp, sp, #16
   11dac:	b	1b580 <__assert_fail@plt+0xa250>
   11db0:	mov	r6, r1
   11db4:	b	11d7c <__assert_fail@plt+0xa4c>
   11db8:	mov	r3, #0
   11dbc:	mov	r1, #2
   11dc0:	mov	r2, #1
   11dc4:	str	r1, [r0]
   11dc8:	strb	r3, [r0, #4]
   11dcc:	str	r3, [r0, #8]
   11dd0:	strh	r2, [r0, #12]
   11dd4:	str	r3, [r0, #16]
   11dd8:	str	r3, [r0, #20]
   11ddc:	bx	lr
   11de0:	str	r4, [sp, #-8]!
   11de4:	mov	r4, r0
   11de8:	ldr	r0, [r0, #16]
   11dec:	str	lr, [sp, #4]
   11df0:	bl	12d1c <__assert_fail@plt+0x19ec>
   11df4:	ldr	lr, [sp, #4]
   11df8:	ldr	r0, [r4, #20]
   11dfc:	ldr	r4, [sp]
   11e00:	add	sp, sp, #8
   11e04:	b	12d1c <__assert_fail@plt+0x19ec>
   11e08:	str	r4, [sp, #-8]!
   11e0c:	mov	r4, r0
   11e10:	str	lr, [sp, #4]
   11e14:	sub	sp, sp, #24
   11e18:	bl	11318 <getgrgid@plt>
   11e1c:	subs	r1, r0, #0
   11e20:	beq	11e3c <__assert_fail@plt+0xb0c>
   11e24:	ldr	r0, [r1]
   11e28:	bl	1b580 <__assert_fail@plt+0xa250>
   11e2c:	add	sp, sp, #24
   11e30:	ldr	r4, [sp]
   11e34:	add	sp, sp, #4
   11e38:	pop	{pc}		; (ldr pc, [sp], #4)
   11e3c:	mov	r0, r4
   11e40:	mov	r2, sp
   11e44:	bl	16bfc <__assert_fail@plt+0x58cc>
   11e48:	b	11e28 <__assert_fail@plt+0xaf8>
   11e4c:	str	r4, [sp, #-8]!
   11e50:	mov	r4, r0
   11e54:	str	lr, [sp, #4]
   11e58:	sub	sp, sp, #24
   11e5c:	bl	11030 <getpwuid@plt>
   11e60:	subs	r1, r0, #0
   11e64:	beq	11e80 <__assert_fail@plt+0xb50>
   11e68:	ldr	r0, [r1]
   11e6c:	bl	1b580 <__assert_fail@plt+0xa250>
   11e70:	add	sp, sp, #24
   11e74:	ldr	r4, [sp]
   11e78:	add	sp, sp, #4
   11e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   11e80:	mov	r0, r4
   11e84:	mov	r2, sp
   11e88:	bl	16bfc <__assert_fail@plt+0x58cc>
   11e8c:	b	11e6c <__assert_fail@plt+0xb3c>
   11e90:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11e94:	strd	r6, [sp, #8]
   11e98:	strd	r8, [sp, #16]
   11e9c:	strd	sl, [sp, #24]
   11ea0:	str	lr, [sp, #32]
   11ea4:	sub	sp, sp, #268	; 0x10c
   11ea8:	ldr	fp, [sp, #312]	; 0x138
   11eac:	str	r2, [sp, #28]
   11eb0:	str	r3, [sp, #40]	; 0x28
   11eb4:	ldr	r3, [sp, #304]	; 0x130
   11eb8:	ldr	r2, [sp, #308]	; 0x134
   11ebc:	and	r3, r3, r2
   11ec0:	cmn	r3, #1
   11ec4:	str	r3, [sp, #24]
   11ec8:	beq	128d4 <__assert_fail@plt+0x15a4>
   11ecc:	movw	r3, #56460	; 0xdc8c
   11ed0:	movt	r3, #1
   11ed4:	mov	r2, #0
   11ed8:	mov	r6, #1
   11edc:	str	r3, [sp, #48]	; 0x30
   11ee0:	movw	r3, #56536	; 0xdcd8
   11ee4:	movt	r3, #1
   11ee8:	str	r3, [sp, #52]	; 0x34
   11eec:	movw	r3, #56496	; 0xdcb0
   11ef0:	movt	r3, #1
   11ef4:	str	r3, [sp, #44]	; 0x2c
   11ef8:	bl	1b610 <__assert_fail@plt+0xa2e0>
   11efc:	str	r0, [sp, #12]
   11f00:	bl	111ec <__errno_location@plt>
   11f04:	str	r0, [sp, #36]	; 0x24
   11f08:	ldr	r0, [sp, #12]
   11f0c:	bl	149c4 <__assert_fail@plt+0x3694>
   11f10:	subs	r9, r0, #0
   11f14:	beq	12004 <__assert_fail@plt+0xcd4>
   11f18:	ldrh	sl, [r9, #56]	; 0x38
   11f1c:	ldr	r3, [r9, #28]
   11f20:	sub	r7, sl, #1
   11f24:	str	r3, [sp, #16]
   11f28:	cmp	r7, #9
   11f2c:	ldrls	pc, [pc, r7, lsl #2]
   11f30:	b	120b0 <__assert_fail@plt+0xd80>
   11f34:	andeq	r2, r1, r0, lsl #5
   11f38:	andeq	r2, r1, r8, lsr #4
   11f3c:	strheq	r2, [r1], -r0
   11f40:	andeq	r2, r1, ip, ror r3
   11f44:	strheq	r2, [r1], -r0
   11f48:	andeq	r2, r1, r4, lsr #1
   11f4c:	andeq	r2, r1, r4, asr r0
   11f50:	strheq	r2, [r1], -r0
   11f54:	strheq	r2, [r1], -r0
   11f58:	andeq	r1, r1, ip, asr pc
   11f5c:	ldr	r3, [r9, #48]	; 0x30
   11f60:	cmp	r3, #0
   11f64:	bne	11f74 <__assert_fail@plt+0xc44>
   11f68:	ldr	r3, [r9, #16]
   11f6c:	cmp	r3, #0
   11f70:	beq	12a5c <__assert_fail@plt+0x172c>
   11f74:	ldrb	r4, [fp, #13]
   11f78:	cmp	r4, #0
   11f7c:	movweq	r1, #55892	; 0xda54
   11f80:	movteq	r1, #1
   11f84:	bne	12060 <__assert_fail@plt+0xd30>
   11f88:	ldr	r5, [r9, #32]
   11f8c:	mov	r2, #5
   11f90:	mov	r0, r4
   11f94:	bl	110c0 <dcgettext@plt>
   11f98:	mov	r7, r0
   11f9c:	mov	r0, #4
   11fa0:	ldr	r1, [sp, #16]
   11fa4:	bl	1935c <__assert_fail@plt+0x802c>
   11fa8:	mov	r3, r0
   11fac:	mov	r2, r7
   11fb0:	mov	r1, r5
   11fb4:	mov	r0, r4
   11fb8:	bl	11150 <error@plt>
   11fbc:	ldr	r3, [fp]
   11fc0:	mov	r6, r4
   11fc4:	mov	r5, r4
   11fc8:	mov	r7, r4
   11fcc:	mov	r4, #1
   11fd0:	cmp	r3, #2
   11fd4:	bne	12078 <__assert_fail@plt+0xd48>
   11fd8:	ldrb	r3, [fp, #4]
   11fdc:	cmp	r3, #0
   11fe0:	bne	11f08 <__assert_fail@plt+0xbd8>
   11fe4:	mov	r1, r9
   11fe8:	mov	r2, #4
   11fec:	ldr	r0, [sp, #12]
   11ff0:	bl	151d8 <__assert_fail@plt+0x3ea8>
   11ff4:	ldr	r0, [sp, #12]
   11ff8:	bl	149c4 <__assert_fail@plt+0x3694>
   11ffc:	subs	r9, r0, #0
   12000:	bne	11f18 <__assert_fail@plt+0xbe8>
   12004:	ldr	r3, [sp, #36]	; 0x24
   12008:	ldr	r4, [r3]
   1200c:	cmp	r4, #0
   12010:	beq	12024 <__assert_fail@plt+0xcf4>
   12014:	ldrb	r6, [fp, #13]
   12018:	cmp	r6, #0
   1201c:	movne	r6, r9
   12020:	beq	12a14 <__assert_fail@plt+0x16e4>
   12024:	ldr	r0, [sp, #12]
   12028:	bl	147bc <__assert_fail@plt+0x348c>
   1202c:	cmp	r0, #0
   12030:	bne	12984 <__assert_fail@plt+0x1654>
   12034:	mov	r0, r6
   12038:	add	sp, sp, #268	; 0x10c
   1203c:	ldrd	r4, [sp]
   12040:	ldrd	r6, [sp, #8]
   12044:	ldrd	r8, [sp, #16]
   12048:	ldrd	sl, [sp, #24]
   1204c:	add	sp, sp, #32
   12050:	pop	{pc}		; (ldr pc, [sp], #4)
   12054:	ldrb	r4, [fp, #13]
   12058:	cmp	r4, #0
   1205c:	beq	12894 <__assert_fail@plt+0x1564>
   12060:	mov	r6, #0
   12064:	mov	r5, r6
   12068:	mov	r7, r6
   1206c:	ldr	r3, [fp]
   12070:	cmp	r3, #2
   12074:	beq	11fd8 <__assert_fail@plt+0xca8>
   12078:	cmp	r3, #0
   1207c:	bne	11fd8 <__assert_fail@plt+0xca8>
   12080:	cmp	r7, #0
   12084:	moveq	r4, #3
   12088:	bne	12658 <__assert_fail@plt+0x1328>
   1208c:	cmp	r5, #0
   12090:	bne	12858 <__assert_fail@plt+0x1528>
   12094:	str	r5, [sp, #20]
   12098:	ldr	sl, [fp, #16]
   1209c:	ldr	r7, [fp, #20]
   120a0:	b	124e8 <__assert_fail@plt+0x11b8>
   120a4:	ldrb	r3, [fp, #4]
   120a8:	cmp	r3, #0
   120ac:	beq	11f08 <__assert_fail@plt+0xbd8>
   120b0:	ldr	r3, [sp, #24]
   120b4:	add	r5, r9, #64	; 0x40
   120b8:	ldrb	r4, [fp, #12]
   120bc:	ldr	r8, [r9, #24]
   120c0:	cmn	r3, #1
   120c4:	beq	12550 <__assert_fail@plt+0x1220>
   120c8:	cmp	r4, #0
   120cc:	beq	120e0 <__assert_fail@plt+0xdb0>
   120d0:	ldr	r3, [r9, #80]	; 0x50
   120d4:	and	r3, r3, #61440	; 0xf000
   120d8:	cmp	r3, #40960	; 0xa000
   120dc:	beq	128f0 <__assert_fail@plt+0x15c0>
   120e0:	ldr	r3, [sp, #304]	; 0x130
   120e4:	uxth	r7, r7
   120e8:	bic	sl, sl, #2
   120ec:	cmp	sl, #4
   120f0:	cmpne	r7, #1
   120f4:	movls	r7, #1
   120f8:	movhi	r7, #0
   120fc:	cmn	r3, #1
   12100:	beq	12394 <__assert_fail@plt+0x1064>
   12104:	mov	r2, r3
   12108:	ldr	r3, [r5, #24]
   1210c:	cmp	r2, r3
   12110:	beq	12394 <__assert_fail@plt+0x1064>
   12114:	cmp	r7, #0
   12118:	beq	12888 <__assert_fail@plt+0x1558>
   1211c:	ldr	ip, [fp, #8]
   12120:	cmp	ip, #0
   12124:	beq	12c08 <__assert_fail@plt+0x18d8>
   12128:	ldrd	r0, [ip]
   1212c:	ldrd	r2, [r5, #96]	; 0x60
   12130:	cmp	r1, r3
   12134:	cmpeq	r0, r2
   12138:	moveq	lr, #0
   1213c:	bne	12c08 <__assert_fail@plt+0x18d8>
   12140:	ldrd	r0, [r5]
   12144:	ldrd	r2, [ip, #8]
   12148:	cmp	r1, r3
   1214c:	cmpeq	r0, r2
   12150:	beq	126fc <__assert_fail@plt+0x13cc>
   12154:	cmp	lr, #0
   12158:	beq	12888 <__assert_fail@plt+0x1558>
   1215c:	ldrb	r4, [fp, #12]
   12160:	cmp	r4, #0
   12164:	ldr	r3, [sp, #12]
   12168:	ldr	sl, [r3, #32]
   1216c:	bne	123dc <__assert_fail@plt+0x10ac>
   12170:	mov	r2, #256	; 0x100
   12174:	mov	r1, r8
   12178:	mov	r0, sl
   1217c:	ldr	r3, [sp, #40]	; 0x28
   12180:	str	r2, [sp]
   12184:	ldr	r2, [sp, #28]
   12188:	bl	112b8 <fchownat@plt>
   1218c:	cmp	r0, #0
   12190:	moveq	r0, #1
   12194:	movne	r0, #0
   12198:	beq	121ac <__assert_fail@plt+0xe7c>
   1219c:	ldr	r3, [sp, #36]	; 0x24
   121a0:	ldr	r3, [r3]
   121a4:	cmp	r3, #95	; 0x5f
   121a8:	beq	129c8 <__assert_fail@plt+0x1698>
   121ac:	cmp	r0, #0
   121b0:	bne	12474 <__assert_fail@plt+0x1144>
   121b4:	ldrb	r4, [fp, #13]
   121b8:	cmp	r4, #0
   121bc:	movne	r6, #0
   121c0:	movne	r7, r6
   121c4:	bne	1206c <__assert_fail@plt+0xd3c>
   121c8:	ldr	r3, [sp, #28]
   121cc:	mov	r2, #5
   121d0:	mov	r0, r4
   121d4:	cmn	r3, #1
   121d8:	ldr	r3, [sp, #36]	; 0x24
   121dc:	movwne	r1, #56152	; 0xdb58
   121e0:	movweq	r1, #56180	; 0xdb74
   121e4:	movtne	r1, #1
   121e8:	movteq	r1, #1
   121ec:	ldr	r6, [r3]
   121f0:	bl	110c0 <dcgettext@plt>
   121f4:	mov	r4, r0
   121f8:	mov	r0, #4
   121fc:	ldr	r1, [sp, #16]
   12200:	bl	1935c <__assert_fail@plt+0x802c>
   12204:	mov	r3, r0
   12208:	mov	r0, #0
   1220c:	mov	r2, r4
   12210:	mov	r1, r6
   12214:	mov	r6, r0
   12218:	mov	r4, #1
   1221c:	bl	11150 <error@plt>
   12220:	mov	r7, r6
   12224:	b	1206c <__assert_fail@plt+0xd3c>
   12228:	mov	r1, r9
   1222c:	ldr	r0, [sp, #12]
   12230:	bl	1b668 <__assert_fail@plt+0xa338>
   12234:	cmp	r0, #0
   12238:	beq	120b0 <__assert_fail@plt+0xd80>
   1223c:	mov	r2, #5
   12240:	movw	r1, #55940	; 0xda84
   12244:	movt	r1, #1
   12248:	mov	r0, #0
   1224c:	bl	110c0 <dcgettext@plt>
   12250:	mov	r4, r0
   12254:	mov	r1, #3
   12258:	ldr	r2, [sp, #16]
   1225c:	mov	r0, #0
   12260:	bl	19edc <__assert_fail@plt+0x8bac>
   12264:	mov	r1, #0
   12268:	mov	r3, r0
   1226c:	mov	r2, r4
   12270:	mov	r0, r1
   12274:	mov	r6, r1
   12278:	bl	11150 <error@plt>
   1227c:	b	11f08 <__assert_fail@plt+0xbd8>
   12280:	ldrb	r3, [fp, #4]
   12284:	cmp	r3, #0
   12288:	beq	120b0 <__assert_fail@plt+0xd80>
   1228c:	ldr	ip, [fp, #8]
   12290:	cmp	ip, #0
   12294:	beq	11f08 <__assert_fail@plt+0xbd8>
   12298:	ldrd	r2, [ip]
   1229c:	ldrd	r0, [r9, #160]	; 0xa0
   122a0:	cmp	r1, r3
   122a4:	cmpeq	r0, r2
   122a8:	bne	11f08 <__assert_fail@plt+0xbd8>
   122ac:	ldrd	r0, [ip, #8]
   122b0:	ldrd	r2, [r9, #64]	; 0x40
   122b4:	cmp	r3, r1
   122b8:	cmpeq	r2, r0
   122bc:	bne	11f08 <__assert_fail@plt+0xbd8>
   122c0:	ldr	r6, [sp, #16]
   122c4:	movw	r1, #55468	; 0xd8ac
   122c8:	movt	r1, #1
   122cc:	mov	r0, r6
   122d0:	bl	11024 <strcmp@plt>
   122d4:	subs	r4, r0, #0
   122d8:	beq	12b88 <__assert_fail@plt+0x1858>
   122dc:	mov	r2, #5
   122e0:	movw	r1, #55780	; 0xd9e4
   122e4:	movt	r1, #1
   122e8:	mov	r0, #0
   122ec:	bl	110c0 <dcgettext@plt>
   122f0:	mov	r4, r0
   122f4:	mov	r1, #4
   122f8:	ldr	r2, [sp, #16]
   122fc:	mov	r0, #0
   12300:	bl	19280 <__assert_fail@plt+0x7f50>
   12304:	mov	r5, r0
   12308:	mov	r1, #4
   1230c:	movw	r2, #55468	; 0xd8ac
   12310:	movt	r2, #1
   12314:	mov	r0, #1
   12318:	bl	19280 <__assert_fail@plt+0x7f50>
   1231c:	mov	r1, #0
   12320:	mov	r3, r5
   12324:	str	r0, [sp]
   12328:	mov	r2, r4
   1232c:	mov	r0, r1
   12330:	bl	11150 <error@plt>
   12334:	mov	r2, #5
   12338:	movw	r1, #55840	; 0xda20
   1233c:	movt	r1, #1
   12340:	mov	r0, #0
   12344:	bl	110c0 <dcgettext@plt>
   12348:	mov	r1, #0
   1234c:	mov	r2, r0
   12350:	mov	r0, r1
   12354:	mov	r6, r1
   12358:	bl	11150 <error@plt>
   1235c:	ldr	r4, [sp, #12]
   12360:	mov	r1, r9
   12364:	mov	r2, #4
   12368:	mov	r0, r4
   1236c:	bl	151d8 <__assert_fail@plt+0x3ea8>
   12370:	mov	r0, r4
   12374:	bl	149c4 <__assert_fail@plt+0x3694>
   12378:	b	11f08 <__assert_fail@plt+0xbd8>
   1237c:	ldrb	r4, [fp, #13]
   12380:	cmp	r4, #0
   12384:	bne	12060 <__assert_fail@plt+0xd30>
   12388:	movw	r1, #55912	; 0xda68
   1238c:	movt	r1, #1
   12390:	b	11f88 <__assert_fail@plt+0xc58>
   12394:	ldr	r3, [sp, #308]	; 0x134
   12398:	cmn	r3, #1
   1239c:	beq	126c0 <__assert_fail@plt+0x1390>
   123a0:	ldr	lr, [r5, #28]
   123a4:	cmp	r7, #0
   123a8:	sub	lr, lr, r3
   123ac:	clz	lr, lr
   123b0:	lsr	lr, lr, #5
   123b4:	beq	12154 <__assert_fail@plt+0xe24>
   123b8:	ldr	ip, [fp, #8]
   123bc:	cmp	ip, #0
   123c0:	beq	12154 <__assert_fail@plt+0xe24>
   123c4:	ldrd	r2, [ip]
   123c8:	ldrd	r0, [r5, #96]	; 0x60
   123cc:	cmp	r1, r3
   123d0:	cmpeq	r0, r2
   123d4:	bne	12154 <__assert_fail@plt+0xe24>
   123d8:	b	12140 <__assert_fail@plt+0xe10>
   123dc:	ldr	r3, [sp, #24]
   123e0:	cmn	r3, #1
   123e4:	beq	12448 <__assert_fail@plt+0x1118>
   123e8:	ldr	r2, [r5, #16]
   123ec:	and	r2, r2, #61440	; 0xf000
   123f0:	cmp	r2, #32768	; 0x8000
   123f4:	beq	12878 <__assert_fail@plt+0x1548>
   123f8:	cmp	r2, #16384	; 0x4000
   123fc:	movweq	r3, #18689	; 0x4901
   12400:	moveq	r2, #18688	; 0x4900
   12404:	streq	r3, [sp, #20]
   12408:	bne	12448 <__assert_fail@plt+0x1118>
   1240c:	mov	r1, r8
   12410:	mov	r0, sl
   12414:	bl	11060 <__openat64_2@plt>
   12418:	subs	r7, r0, #0
   1241c:	bge	12790 <__assert_fail@plt+0x1460>
   12420:	ldr	r3, [sp, #36]	; 0x24
   12424:	ldr	r2, [r3]
   12428:	cmp	r2, #13
   1242c:	bne	121b4 <__assert_fail@plt+0xe84>
   12430:	ldr	r2, [r5, #16]
   12434:	and	r2, r2, #61440	; 0xf000
   12438:	cmp	r2, #32768	; 0x8000
   1243c:	beq	12778 <__assert_fail@plt+0x1448>
   12440:	ldr	r3, [sp, #12]
   12444:	ldr	sl, [r3, #32]
   12448:	mov	r2, #0
   1244c:	mov	r1, r8
   12450:	mov	r0, sl
   12454:	ldr	r3, [sp, #40]	; 0x28
   12458:	str	r2, [sp]
   1245c:	ldr	r2, [sp, #28]
   12460:	bl	112b8 <fchownat@plt>
   12464:	clz	r0, r0
   12468:	lsr	r0, r0, #5
   1246c:	cmp	r0, #0
   12470:	beq	121b4 <__assert_fail@plt+0xe84>
   12474:	ldr	r3, [fp]
   12478:	cmp	r3, #2
   1247c:	beq	11fd8 <__assert_fail@plt+0xca8>
   12480:	ldr	r2, [sp, #28]
   12484:	cmn	r2, #1
   12488:	beq	12590 <__assert_fail@plt+0x1260>
   1248c:	ldr	r7, [r5, #24]
   12490:	cmp	r2, r7
   12494:	movne	r4, #2
   12498:	beq	12590 <__assert_fail@plt+0x1260>
   1249c:	mov	r0, r7
   124a0:	bl	11030 <getpwuid@plt>
   124a4:	subs	r1, r0, #0
   124a8:	beq	125c0 <__assert_fail@plt+0x1290>
   124ac:	ldr	r0, [r1]
   124b0:	bl	1b580 <__assert_fail@plt+0xa250>
   124b4:	ldr	r5, [r5, #28]
   124b8:	str	r0, [sp, #20]
   124bc:	mov	r0, r5
   124c0:	bl	11318 <getgrgid@plt>
   124c4:	subs	r1, r0, #0
   124c8:	beq	129b8 <__assert_fail@plt+0x1688>
   124cc:	ldr	r0, [r1]
   124d0:	bl	1b580 <__assert_fail@plt+0xa250>
   124d4:	cmp	r4, #1
   124d8:	mov	r5, r0
   124dc:	beq	1266c <__assert_fail@plt+0x133c>
   124e0:	ldr	sl, [fp, #16]
   124e4:	ldr	r7, [fp, #20]
   124e8:	mov	r1, r7
   124ec:	mov	r0, sl
   124f0:	bl	11d20 <__assert_fail@plt+0x9f0>
   124f4:	ldr	r3, [sp, #20]
   124f8:	cmp	sl, #0
   124fc:	str	r0, [sp, #32]
   12500:	moveq	r0, #0
   12504:	movne	r0, r3
   12508:	cmp	r7, #0
   1250c:	movne	r1, r5
   12510:	moveq	r1, #0
   12514:	bl	11d20 <__assert_fail@plt+0x9f0>
   12518:	cmp	r4, #3
   1251c:	mov	r8, r0
   12520:	beq	1262c <__assert_fail@plt+0x12fc>
   12524:	cmp	r4, #4
   12528:	beq	125d0 <__assert_fail@plt+0x12a0>
   1252c:	cmp	sl, #0
   12530:	beq	12804 <__assert_fail@plt+0x14d4>
   12534:	movw	r1, #56260	; 0xdbc4
   12538:	movt	r1, #1
   1253c:	mov	r2, #5
   12540:	mov	r0, #0
   12544:	bl	110c0 <dcgettext@plt>
   12548:	mov	r4, r0
   1254c:	b	125f0 <__assert_fail@plt+0x12c0>
   12550:	ldr	r3, [fp]
   12554:	cmp	r3, #2
   12558:	bne	120c8 <__assert_fail@plt+0xd98>
   1255c:	ldr	r3, [fp, #8]
   12560:	cmp	r3, #0
   12564:	bne	120c8 <__assert_fail@plt+0xd98>
   12568:	cmp	r4, #0
   1256c:	bne	120d0 <__assert_fail@plt+0xda0>
   12570:	bic	sl, sl, #2
   12574:	uxth	r7, r7
   12578:	cmp	sl, #4
   1257c:	cmpne	r7, #1
   12580:	bhi	12160 <__assert_fail@plt+0xe30>
   12584:	ldr	r3, [sp, #12]
   12588:	ldr	sl, [r3, #32]
   1258c:	b	12170 <__assert_fail@plt+0xe40>
   12590:	ldr	r1, [sp, #40]	; 0x28
   12594:	cmn	r1, #1
   12598:	beq	1284c <__assert_fail@plt+0x151c>
   1259c:	ldr	r2, [r5, #28]
   125a0:	cmp	r1, r2
   125a4:	beq	1284c <__assert_fail@plt+0x151c>
   125a8:	ldr	r7, [r5, #24]
   125ac:	mov	r4, #2
   125b0:	mov	r0, r7
   125b4:	bl	11030 <getpwuid@plt>
   125b8:	subs	r1, r0, #0
   125bc:	bne	124ac <__assert_fail@plt+0x117c>
   125c0:	mov	r0, r7
   125c4:	add	r2, sp, #160	; 0xa0
   125c8:	bl	16bfc <__assert_fail@plt+0x58cc>
   125cc:	b	124b0 <__assert_fail@plt+0x1180>
   125d0:	cmp	sl, #0
   125d4:	beq	127e0 <__assert_fail@plt+0x14b0>
   125d8:	movw	r1, #56572	; 0xdcfc
   125dc:	movt	r1, #1
   125e0:	mov	r2, #5
   125e4:	mov	r0, #0
   125e8:	bl	110c0 <dcgettext@plt>
   125ec:	mov	r4, r0
   125f0:	mov	r0, #4
   125f4:	ldr	r1, [sp, #16]
   125f8:	bl	1935c <__assert_fail@plt+0x802c>
   125fc:	mov	r1, r4
   12600:	ldr	r4, [sp, #32]
   12604:	mov	r2, r0
   12608:	mov	r3, r8
   1260c:	mov	r0, #1
   12610:	str	r4, [sp]
   12614:	bl	11210 <__printf_chk@plt>
   12618:	mov	r0, r8
   1261c:	bl	12d1c <__assert_fail@plt+0x19ec>
   12620:	mov	r0, r4
   12624:	bl	12d1c <__assert_fail@plt+0x19ec>
   12628:	b	126a0 <__assert_fail@plt+0x1370>
   1262c:	cmp	r0, #0
   12630:	beq	129d4 <__assert_fail@plt+0x16a4>
   12634:	cmp	sl, #0
   12638:	beq	12828 <__assert_fail@plt+0x14f8>
   1263c:	movw	r1, #56368	; 0xdc30
   12640:	movt	r1, #1
   12644:	mov	r2, #5
   12648:	mov	r0, #0
   1264c:	bl	110c0 <dcgettext@plt>
   12650:	mov	r4, r0
   12654:	b	125f0 <__assert_fail@plt+0x12c0>
   12658:	cmp	r4, #0
   1265c:	bne	12b10 <__assert_fail@plt+0x17e0>
   12660:	cmp	r5, #0
   12664:	bne	12a38 <__assert_fail@plt+0x1708>
   12668:	str	r5, [sp, #20]
   1266c:	mov	r2, #5
   12670:	movw	r1, #56204	; 0xdb8c
   12674:	movt	r1, #1
   12678:	mov	r0, #0
   1267c:	bl	110c0 <dcgettext@plt>
   12680:	mov	r4, r0
   12684:	mov	r0, #4
   12688:	ldr	r1, [sp, #16]
   1268c:	bl	1935c <__assert_fail@plt+0x802c>
   12690:	mov	r2, r0
   12694:	mov	r1, r4
   12698:	mov	r0, #1
   1269c:	bl	11210 <__printf_chk@plt>
   126a0:	ldr	r0, [sp, #20]
   126a4:	bl	12d1c <__assert_fail@plt+0x19ec>
   126a8:	mov	r0, r5
   126ac:	bl	12d1c <__assert_fail@plt+0x19ec>
   126b0:	ldrb	r3, [fp, #4]
   126b4:	cmp	r3, #0
   126b8:	bne	11f08 <__assert_fail@plt+0xbd8>
   126bc:	b	11fe4 <__assert_fail@plt+0xcb4>
   126c0:	cmp	r7, #0
   126c4:	beq	1215c <__assert_fail@plt+0xe2c>
   126c8:	ldr	ip, [fp, #8]
   126cc:	cmp	ip, #0
   126d0:	beq	1215c <__assert_fail@plt+0xe2c>
   126d4:	ldrd	r0, [ip]
   126d8:	ldrd	r2, [r5, #96]	; 0x60
   126dc:	cmp	r1, r3
   126e0:	cmpeq	r0, r2
   126e4:	bne	1215c <__assert_fail@plt+0xe2c>
   126e8:	ldrd	r2, [r5]
   126ec:	ldrd	r0, [ip, #8]
   126f0:	cmp	r1, r3
   126f4:	cmpeq	r0, r2
   126f8:	bne	1215c <__assert_fail@plt+0xe2c>
   126fc:	ldr	r6, [sp, #16]
   12700:	movw	r1, #55468	; 0xd8ac
   12704:	movt	r1, #1
   12708:	mov	r0, r6
   1270c:	bl	11024 <strcmp@plt>
   12710:	subs	r4, r0, #0
   12714:	bne	12b18 <__assert_fail@plt+0x17e8>
   12718:	mov	r2, #5
   1271c:	movw	r1, #55732	; 0xd9b4
   12720:	movt	r1, #1
   12724:	bl	110c0 <dcgettext@plt>
   12728:	mov	r5, r0
   1272c:	mov	r1, r6
   12730:	mov	r0, #4
   12734:	bl	1935c <__assert_fail@plt+0x802c>
   12738:	mov	r3, r0
   1273c:	mov	r2, r5
   12740:	mov	r1, r4
   12744:	mov	r0, r4
   12748:	bl	11150 <error@plt>
   1274c:	mov	r2, #5
   12750:	movw	r1, #55840	; 0xda20
   12754:	movt	r1, #1
   12758:	mov	r0, #0
   1275c:	bl	110c0 <dcgettext@plt>
   12760:	mov	r1, #0
   12764:	mov	r2, r0
   12768:	mov	r0, r1
   1276c:	mov	r6, r1
   12770:	bl	11150 <error@plt>
   12774:	b	11f08 <__assert_fail@plt+0xbd8>
   12778:	mov	r0, sl
   1277c:	mov	r1, r8
   12780:	ldr	r2, [sp, #20]
   12784:	bl	11060 <__openat64_2@plt>
   12788:	subs	r7, r0, #0
   1278c:	blt	12b74 <__assert_fail@plt+0x1844>
   12790:	add	r2, sp, #160	; 0xa0
   12794:	mov	r1, r7
   12798:	mov	r0, #3
   1279c:	bl	110fc <__fxstat64@plt>
   127a0:	subs	ip, r0, #0
   127a4:	bne	12860 <__assert_fail@plt+0x1530>
   127a8:	add	r3, sp, #256	; 0x100
   127ac:	ldrd	r0, [r5, #96]	; 0x60
   127b0:	ldrd	r2, [r3]
   127b4:	cmp	r1, r3
   127b8:	cmpeq	r0, r2
   127bc:	beq	12a90 <__assert_fail@plt+0x1760>
   127c0:	ldr	sl, [sp, #36]	; 0x24
   127c4:	mov	r0, r7
   127c8:	mov	r6, ip
   127cc:	mov	r7, ip
   127d0:	ldr	r8, [sl]
   127d4:	bl	112f4 <close@plt>
   127d8:	str	r8, [sl]
   127dc:	b	1206c <__assert_fail@plt+0xd3c>
   127e0:	cmp	r7, #0
   127e4:	beq	12af4 <__assert_fail@plt+0x17c4>
   127e8:	mov	r0, sl
   127ec:	movw	r1, #56604	; 0xdd1c
   127f0:	movt	r1, #1
   127f4:	mov	r2, #5
   127f8:	bl	110c0 <dcgettext@plt>
   127fc:	mov	r4, r0
   12800:	b	125f0 <__assert_fail@plt+0x12c0>
   12804:	cmp	r7, #0
   12808:	beq	12ad8 <__assert_fail@plt+0x17a8>
   1280c:	mov	r0, sl
   12810:	movw	r1, #56300	; 0xdbec
   12814:	movt	r1, #1
   12818:	mov	r2, #5
   1281c:	bl	110c0 <dcgettext@plt>
   12820:	mov	r4, r0
   12824:	b	125f0 <__assert_fail@plt+0x12c0>
   12828:	cmp	r7, #0
   1282c:	beq	12a78 <__assert_fail@plt+0x1748>
   12830:	mov	r0, sl
   12834:	movw	r1, #56416	; 0xdc60
   12838:	movt	r1, #1
   1283c:	mov	r2, #5
   12840:	bl	110c0 <dcgettext@plt>
   12844:	mov	r4, r0
   12848:	b	125f0 <__assert_fail@plt+0x12c0>
   1284c:	cmp	r3, #0
   12850:	bne	11fd8 <__assert_fail@plt+0xca8>
   12854:	mov	r4, #4
   12858:	ldr	r7, [r5, #24]
   1285c:	b	1249c <__assert_fail@plt+0x116c>
   12860:	ldr	r6, [sp, #36]	; 0x24
   12864:	mov	r0, r7
   12868:	ldr	r4, [r6]
   1286c:	bl	112f4 <close@plt>
   12870:	str	r4, [r6]
   12874:	b	121b4 <__assert_fail@plt+0xe84>
   12878:	movw	r3, #2305	; 0x901
   1287c:	mov	r2, #2304	; 0x900
   12880:	str	r3, [sp, #20]
   12884:	b	1240c <__assert_fail@plt+0x10dc>
   12888:	mov	r4, #1
   1288c:	mov	r7, r4
   12890:	b	1206c <__assert_fail@plt+0xd3c>
   12894:	ldr	r5, [r9, #32]
   12898:	mov	r2, r3
   1289c:	mov	r1, #3
   128a0:	mov	r0, r4
   128a4:	mov	r6, r4
   128a8:	bl	19edc <__assert_fail@plt+0x8bac>
   128ac:	mov	r3, r0
   128b0:	movw	r2, #56712	; 0xdd88
   128b4:	movt	r2, #1
   128b8:	mov	r0, r6
   128bc:	mov	r1, r5
   128c0:	mov	r7, r4
   128c4:	bl	11150 <error@plt>
   128c8:	mov	r4, #1
   128cc:	mov	r5, r6
   128d0:	b	1206c <__assert_fail@plt+0xd3c>
   128d4:	ldrb	r3, [fp, #12]
   128d8:	cmp	r3, #0
   128dc:	bne	11ecc <__assert_fail@plt+0xb9c>
   128e0:	ldr	r3, [fp]
   128e4:	cmp	r3, #2
   128e8:	orreq	r1, r1, #8
   128ec:	b	11ecc <__assert_fail@plt+0xb9c>
   128f0:	ldr	r3, [sp, #12]
   128f4:	mov	r5, #0
   128f8:	mov	r2, r8
   128fc:	mov	r0, #3
   12900:	ldr	r1, [r3, #32]
   12904:	add	r3, sp, #56	; 0x38
   12908:	str	r5, [sp]
   1290c:	bl	110e4 <__fxstatat64@plt>
   12910:	cmp	r0, r5
   12914:	beq	12a04 <__assert_fail@plt+0x16d4>
   12918:	ldrb	r4, [fp, #13]
   1291c:	cmp	r4, #0
   12920:	movne	r6, r5
   12924:	addne	r5, sp, #56	; 0x38
   12928:	movne	r7, r6
   1292c:	bne	1206c <__assert_fail@plt+0xd3c>
   12930:	ldr	r3, [sp, #36]	; 0x24
   12934:	mov	r2, #5
   12938:	mov	r0, r4
   1293c:	movw	r1, #56128	; 0xdb40
   12940:	movt	r1, #1
   12944:	mov	r6, r4
   12948:	ldr	r5, [r3]
   1294c:	bl	110c0 <dcgettext@plt>
   12950:	mov	r7, r0
   12954:	mov	r0, #4
   12958:	ldr	r1, [sp, #16]
   1295c:	bl	1935c <__assert_fail@plt+0x802c>
   12960:	mov	r3, r0
   12964:	mov	r2, r7
   12968:	mov	r1, r5
   1296c:	mov	r0, r4
   12970:	add	r5, sp, #56	; 0x38
   12974:	mov	r4, #1
   12978:	bl	11150 <error@plt>
   1297c:	mov	r7, r6
   12980:	b	1206c <__assert_fail@plt+0xd3c>
   12984:	ldr	r3, [sp, #36]	; 0x24
   12988:	mov	r2, #5
   1298c:	movw	r1, #56660	; 0xdd54
   12990:	movt	r1, #1
   12994:	mov	r0, #0
   12998:	ldr	r4, [r3]
   1299c:	bl	110c0 <dcgettext@plt>
   129a0:	mov	r2, r0
   129a4:	mov	r0, #0
   129a8:	mov	r6, r0
   129ac:	mov	r1, r4
   129b0:	bl	11150 <error@plt>
   129b4:	b	12034 <__assert_fail@plt+0xd04>
   129b8:	mov	r0, r5
   129bc:	add	r2, sp, #160	; 0xa0
   129c0:	bl	16bfc <__assert_fail@plt+0x58cc>
   129c4:	b	124d0 <__assert_fail@plt+0x11a0>
   129c8:	mov	r4, #0
   129cc:	mov	r7, #1
   129d0:	b	1206c <__assert_fail@plt+0xd3c>
   129d4:	cmp	sl, #0
   129d8:	mov	r2, #5
   129dc:	beq	12a44 <__assert_fail@plt+0x1714>
   129e0:	ldr	r1, [sp, #44]	; 0x2c
   129e4:	bl	110c0 <dcgettext@plt>
   129e8:	mov	r4, r0
   129ec:	mov	r0, #0
   129f0:	ldr	r8, [sp, #32]
   129f4:	bl	12d1c <__assert_fail@plt+0x19ec>
   129f8:	mov	r3, #0
   129fc:	str	r3, [sp, #32]
   12a00:	b	125f0 <__assert_fail@plt+0x12c0>
   12a04:	ldrh	sl, [r9, #56]	; 0x38
   12a08:	add	r5, sp, #56	; 0x38
   12a0c:	sub	r7, sl, #1
   12a10:	b	120e0 <__assert_fail@plt+0xdb0>
   12a14:	mov	r2, #5
   12a18:	movw	r1, #55716	; 0xd9a4
   12a1c:	movt	r1, #1
   12a20:	bl	110c0 <dcgettext@plt>
   12a24:	mov	r2, r0
   12a28:	mov	r1, r4
   12a2c:	mov	r0, r6
   12a30:	bl	11150 <error@plt>
   12a34:	b	12024 <__assert_fail@plt+0xcf4>
   12a38:	mov	r4, #1
   12a3c:	ldr	r7, [r5, #24]
   12a40:	b	1249c <__assert_fail@plt+0x116c>
   12a44:	cmp	r7, #0
   12a48:	ldrne	r1, [sp, #52]	; 0x34
   12a4c:	ldreq	r1, [sp, #48]	; 0x30
   12a50:	bl	110c0 <dcgettext@plt>
   12a54:	mov	r4, r0
   12a58:	b	129ec <__assert_fail@plt+0x16bc>
   12a5c:	mov	r3, #1
   12a60:	mov	r1, r9
   12a64:	ldr	r0, [sp, #12]
   12a68:	mov	r2, r3
   12a6c:	str	r3, [r9, #16]
   12a70:	bl	151d8 <__assert_fail@plt+0x3ea8>
   12a74:	b	11f08 <__assert_fail@plt+0xbd8>
   12a78:	mov	r0, r7
   12a7c:	mov	r2, #5
   12a80:	ldr	r1, [sp, #48]	; 0x30
   12a84:	bl	110c0 <dcgettext@plt>
   12a88:	mov	r4, r0
   12a8c:	b	125f0 <__assert_fail@plt+0x12c0>
   12a90:	ldrd	r0, [r5]
   12a94:	ldrd	r2, [sp, #160]	; 0xa0
   12a98:	cmp	r1, r3
   12a9c:	cmpeq	r0, r2
   12aa0:	bne	127c0 <__assert_fail@plt+0x1490>
   12aa4:	ldr	r3, [sp, #304]	; 0x130
   12aa8:	cmn	r3, #1
   12aac:	beq	12bc0 <__assert_fail@plt+0x1890>
   12ab0:	mov	r2, r3
   12ab4:	ldr	r3, [sp, #184]	; 0xb8
   12ab8:	cmp	r2, r3
   12abc:	beq	12bc0 <__assert_fail@plt+0x1890>
   12ac0:	ldr	r8, [sp, #36]	; 0x24
   12ac4:	mov	r0, r7
   12ac8:	ldr	r4, [r8]
   12acc:	bl	112f4 <close@plt>
   12ad0:	str	r4, [r8]
   12ad4:	b	12474 <__assert_fail@plt+0x1144>
   12ad8:	mov	r0, r7
   12adc:	movw	r1, #56336	; 0xdc10
   12ae0:	movt	r1, #1
   12ae4:	mov	r2, #5
   12ae8:	bl	110c0 <dcgettext@plt>
   12aec:	mov	r4, r0
   12af0:	b	125f0 <__assert_fail@plt+0x12c0>
   12af4:	mov	r0, r7
   12af8:	movw	r1, #56632	; 0xdd38
   12afc:	movt	r1, #1
   12b00:	mov	r2, #5
   12b04:	bl	110c0 <dcgettext@plt>
   12b08:	mov	r4, r0
   12b0c:	b	125f0 <__assert_fail@plt+0x12c0>
   12b10:	mov	r4, #4
   12b14:	b	1208c <__assert_fail@plt+0xd5c>
   12b18:	mov	r2, #5
   12b1c:	movw	r1, #55780	; 0xd9e4
   12b20:	movt	r1, #1
   12b24:	mov	r0, #0
   12b28:	bl	110c0 <dcgettext@plt>
   12b2c:	mov	r4, r0
   12b30:	mov	r1, #4
   12b34:	ldr	r2, [sp, #16]
   12b38:	mov	r0, #0
   12b3c:	bl	19280 <__assert_fail@plt+0x7f50>
   12b40:	mov	r5, r0
   12b44:	mov	r1, #4
   12b48:	movw	r2, #55468	; 0xd8ac
   12b4c:	movt	r2, #1
   12b50:	mov	r0, #1
   12b54:	bl	19280 <__assert_fail@plt+0x7f50>
   12b58:	mov	r1, #0
   12b5c:	mov	r3, r5
   12b60:	str	r0, [sp]
   12b64:	mov	r2, r4
   12b68:	mov	r0, r1
   12b6c:	bl	11150 <error@plt>
   12b70:	b	1274c <__assert_fail@plt+0x141c>
   12b74:	ldr	r3, [sp, #36]	; 0x24
   12b78:	ldr	r3, [r3]
   12b7c:	cmp	r3, #13
   12b80:	bne	121b4 <__assert_fail@plt+0xe84>
   12b84:	b	12440 <__assert_fail@plt+0x1110>
   12b88:	mov	r2, #5
   12b8c:	movw	r1, #55732	; 0xd9b4
   12b90:	movt	r1, #1
   12b94:	bl	110c0 <dcgettext@plt>
   12b98:	mov	r5, r0
   12b9c:	mov	r1, r6
   12ba0:	mov	r0, #4
   12ba4:	bl	1935c <__assert_fail@plt+0x802c>
   12ba8:	mov	r3, r0
   12bac:	mov	r2, r5
   12bb0:	mov	r1, r4
   12bb4:	mov	r0, r4
   12bb8:	bl	11150 <error@plt>
   12bbc:	b	12334 <__assert_fail@plt+0x1004>
   12bc0:	ldr	r3, [sp, #308]	; 0x134
   12bc4:	cmn	r3, #1
   12bc8:	beq	12bdc <__assert_fail@plt+0x18ac>
   12bcc:	mov	r2, r3
   12bd0:	ldr	r3, [sp, #188]	; 0xbc
   12bd4:	cmp	r2, r3
   12bd8:	bne	12ac0 <__assert_fail@plt+0x1790>
   12bdc:	mov	r0, r7
   12be0:	ldr	r1, [sp, #28]
   12be4:	ldr	r2, [sp, #40]	; 0x28
   12be8:	bl	111e0 <fchown@plt>
   12bec:	cmp	r0, #0
   12bf0:	bne	12860 <__assert_fail@plt+0x1530>
   12bf4:	mov	r0, r7
   12bf8:	bl	112f4 <close@plt>
   12bfc:	cmp	r0, #0
   12c00:	bne	121b4 <__assert_fail@plt+0xe84>
   12c04:	b	12474 <__assert_fail@plt+0x1144>
   12c08:	mov	r4, r7
   12c0c:	b	1206c <__assert_fail@plt+0xd3c>
   12c10:	movw	r3, #61880	; 0xf1b8
   12c14:	movt	r3, #2
   12c18:	str	r0, [r3]
   12c1c:	bx	lr
   12c20:	movw	r3, #61880	; 0xf1b8
   12c24:	movt	r3, #2
   12c28:	strb	r0, [r3, #4]
   12c2c:	bx	lr
   12c30:	movw	r3, #61844	; 0xf194
   12c34:	movt	r3, #2
   12c38:	strd	r4, [sp, #-16]!
   12c3c:	ldr	r0, [r3]
   12c40:	str	r6, [sp, #8]
   12c44:	str	lr, [sp, #12]
   12c48:	sub	sp, sp, #8
   12c4c:	bl	1c504 <__assert_fail@plt+0xb1d4>
   12c50:	cmp	r0, #0
   12c54:	beq	12c80 <__assert_fail@plt+0x1950>
   12c58:	movw	r4, #61880	; 0xf1b8
   12c5c:	movt	r4, #2
   12c60:	ldrb	r6, [r4, #4]
   12c64:	bl	111ec <__errno_location@plt>
   12c68:	mov	r5, r0
   12c6c:	cmp	r6, #0
   12c70:	beq	12cac <__assert_fail@plt+0x197c>
   12c74:	ldr	r3, [r0]
   12c78:	cmp	r3, #32
   12c7c:	bne	12cac <__assert_fail@plt+0x197c>
   12c80:	movw	r3, #61840	; 0xf190
   12c84:	movt	r3, #2
   12c88:	ldr	r0, [r3]
   12c8c:	bl	1c504 <__assert_fail@plt+0xb1d4>
   12c90:	cmp	r0, #0
   12c94:	bne	12cf4 <__assert_fail@plt+0x19c4>
   12c98:	add	sp, sp, #8
   12c9c:	ldrd	r4, [sp]
   12ca0:	ldr	r6, [sp, #8]
   12ca4:	add	sp, sp, #12
   12ca8:	pop	{pc}		; (ldr pc, [sp], #4)
   12cac:	movw	r1, #56696	; 0xdd78
   12cb0:	movt	r1, #1
   12cb4:	mov	r2, #5
   12cb8:	mov	r0, #0
   12cbc:	bl	110c0 <dcgettext@plt>
   12cc0:	mov	r6, r0
   12cc4:	ldr	r0, [r4]
   12cc8:	cmp	r0, #0
   12ccc:	beq	12d04 <__assert_fail@plt+0x19d4>
   12cd0:	ldr	r4, [r5]
   12cd4:	bl	19b0c <__assert_fail@plt+0x87dc>
   12cd8:	mov	r3, r0
   12cdc:	movw	r2, #56708	; 0xdd84
   12ce0:	movt	r2, #1
   12ce4:	mov	r0, #0
   12ce8:	str	r6, [sp]
   12cec:	mov	r1, r4
   12cf0:	bl	11150 <error@plt>
   12cf4:	movw	r3, #61752	; 0xf138
   12cf8:	movt	r3, #2
   12cfc:	ldr	r0, [r3]
   12d00:	bl	1106c <_exit@plt>
   12d04:	mov	r3, r6
   12d08:	movw	r2, #56712	; 0xdd88
   12d0c:	movt	r2, #1
   12d10:	ldr	r1, [r5]
   12d14:	bl	11150 <error@plt>
   12d18:	b	12cf4 <__assert_fail@plt+0x19c4>
   12d1c:	strd	r4, [sp, #-12]!
   12d20:	mov	r5, r0
   12d24:	str	lr, [sp, #8]
   12d28:	sub	sp, sp, #12
   12d2c:	bl	111ec <__errno_location@plt>
   12d30:	mov	r4, r0
   12d34:	mov	r2, #0
   12d38:	ldr	r3, [r4]
   12d3c:	mov	r0, r5
   12d40:	str	r2, [r4]
   12d44:	str	r3, [sp]
   12d48:	str	r3, [sp, #4]
   12d4c:	bl	11054 <free@plt>
   12d50:	ldr	r3, [r4]
   12d54:	add	r2, sp, #8
   12d58:	clz	r3, r3
   12d5c:	lsr	r3, r3, #5
   12d60:	add	r3, r2, r3, lsl #2
   12d64:	ldr	r3, [r3, #-8]
   12d68:	str	r3, [r4]
   12d6c:	add	sp, sp, #12
   12d70:	ldrd	r4, [sp]
   12d74:	add	sp, sp, #8
   12d78:	pop	{pc}		; (ldr pc, [sp], #4)
   12d7c:	strd	r4, [sp, #-8]!
   12d80:	ldrd	r2, [r1, #8]
   12d84:	ldrd	r4, [r0, #8]
   12d88:	cmp	r5, r3
   12d8c:	cmpeq	r4, r2
   12d90:	movne	r0, #0
   12d94:	bne	12db0 <__assert_fail@plt+0x1a80>
   12d98:	ldrd	r4, [r0]
   12d9c:	ldrd	r2, [r1]
   12da0:	cmp	r5, r3
   12da4:	cmpeq	r4, r2
   12da8:	moveq	r0, #1
   12dac:	movne	r0, #0
   12db0:	ldrd	r4, [sp]
   12db4:	add	sp, sp, #8
   12db8:	bx	lr
   12dbc:	mov	r2, r1
   12dc0:	mov	r3, #0
   12dc4:	str	r4, [sp, #-8]!
   12dc8:	ldrd	r0, [r0, #8]
   12dcc:	str	lr, [sp, #4]
   12dd0:	bl	1ccd4 <__assert_fail@plt+0xb9a4>
   12dd4:	ldr	r4, [sp]
   12dd8:	add	sp, sp, #4
   12ddc:	mov	r0, r2
   12de0:	pop	{pc}		; (ldr pc, [sp], #4)
   12de4:	mov	r2, r1
   12de8:	mov	r3, #0
   12dec:	str	r4, [sp, #-8]!
   12df0:	ldrd	r0, [r0]
   12df4:	str	lr, [sp, #4]
   12df8:	bl	1ccd4 <__assert_fail@plt+0xb9a4>
   12dfc:	ldr	r4, [sp]
   12e00:	add	sp, sp, #4
   12e04:	mov	r0, r2
   12e08:	pop	{pc}		; (ldr pc, [sp], #4)
   12e0c:	strd	r4, [sp, #-8]!
   12e10:	ldrd	r2, [r1]
   12e14:	ldrd	r4, [r0]
   12e18:	cmp	r5, r3
   12e1c:	cmpeq	r4, r2
   12e20:	ldrd	r4, [sp]
   12e24:	add	sp, sp, #8
   12e28:	moveq	r0, #1
   12e2c:	movne	r0, #0
   12e30:	bx	lr
   12e34:	ldr	r2, [r0]
   12e38:	ldr	r3, [r1]
   12e3c:	ldrd	r0, [r2, #160]	; 0xa0
   12e40:	ldrd	r2, [r3, #160]	; 0xa0
   12e44:	cmp	r1, r3
   12e48:	cmpeq	r0, r2
   12e4c:	movhi	r0, #1
   12e50:	movls	r0, #0
   12e54:	movcc	r3, #1
   12e58:	movcs	r3, #0
   12e5c:	sub	r0, r0, r3
   12e60:	bx	lr
   12e64:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12e68:	mov	r5, r2
   12e6c:	mov	r4, r1
   12e70:	ldr	r2, [r0, #40]	; 0x28
   12e74:	strd	r6, [sp, #8]
   12e78:	mov	r6, r0
   12e7c:	str	r8, [sp, #16]
   12e80:	str	lr, [sp, #20]
   12e84:	ldr	r0, [r0, #8]
   12e88:	cmp	r2, r5
   12e8c:	ldr	r7, [r6, #44]	; 0x2c
   12e90:	bcs	12eb8 <__assert_fail@plt+0x1b88>
   12e94:	add	r1, r5, #40	; 0x28
   12e98:	cmn	r1, #-1073741823	; 0xc0000001
   12e9c:	str	r1, [r6, #40]	; 0x28
   12ea0:	bhi	12f38 <__assert_fail@plt+0x1c08>
   12ea4:	lsl	r1, r1, #2
   12ea8:	bl	1c4ac <__assert_fail@plt+0xb17c>
   12eac:	cmp	r0, #0
   12eb0:	strne	r0, [r6, #8]
   12eb4:	beq	12f34 <__assert_fail@plt+0x1c04>
   12eb8:	cmp	r4, #0
   12ebc:	movne	r2, r0
   12ec0:	beq	12ed4 <__assert_fail@plt+0x1ba4>
   12ec4:	str	r4, [r2], #4
   12ec8:	ldr	r4, [r4, #8]
   12ecc:	cmp	r4, #0
   12ed0:	bne	12ec4 <__assert_fail@plt+0x1b94>
   12ed4:	mov	r3, r7
   12ed8:	mov	r2, #4
   12edc:	mov	r1, r5
   12ee0:	bl	112ac <qsort@plt>
   12ee4:	ldr	lr, [r6, #8]
   12ee8:	subs	r3, r5, #1
   12eec:	ldr	r0, [lr]
   12ef0:	moveq	r2, r0
   12ef4:	beq	12f18 <__assert_fail@plt+0x1be8>
   12ef8:	mov	r2, lr
   12efc:	ldr	r1, [r2]
   12f00:	subs	r3, r3, #1
   12f04:	ldr	ip, [r2, #4]!
   12f08:	str	ip, [r1, #8]
   12f0c:	bne	12efc <__assert_fail@plt+0x1bcc>
   12f10:	add	r5, lr, r5, lsl #2
   12f14:	ldr	r2, [r5, #-4]
   12f18:	mov	r3, #0
   12f1c:	str	r3, [r2, #8]
   12f20:	ldrd	r4, [sp]
   12f24:	ldrd	r6, [sp, #8]
   12f28:	ldr	r8, [sp, #16]
   12f2c:	add	sp, sp, #20
   12f30:	pop	{pc}		; (ldr pc, [sp], #4)
   12f34:	ldr	r0, [r6, #8]
   12f38:	bl	12d1c <__assert_fail@plt+0x19ec>
   12f3c:	mov	r3, #0
   12f40:	mov	r0, r4
   12f44:	str	r3, [r6, #8]
   12f48:	str	r3, [r6, #40]	; 0x28
   12f4c:	b	12f20 <__assert_fail@plt+0x1bf0>
   12f50:	strd	r4, [sp, #-20]!	; 0xffffffec
   12f54:	ldr	r5, [r0, #44]	; 0x2c
   12f58:	ldr	r3, [r5, #48]	; 0x30
   12f5c:	strd	r6, [sp, #8]
   12f60:	str	lr, [sp, #16]
   12f64:	sub	sp, sp, #100	; 0x64
   12f68:	tst	r3, #512	; 0x200
   12f6c:	beq	12ffc <__assert_fail@plt+0x1ccc>
   12f70:	ldr	r4, [r5, #52]	; 0x34
   12f74:	mov	r7, r1
   12f78:	mov	r6, r0
   12f7c:	cmp	r4, #0
   12f80:	beq	12fa8 <__assert_fail@plt+0x1c78>
   12f84:	ldrd	r2, [r6, #64]	; 0x40
   12f88:	add	r1, sp, #8
   12f8c:	mov	r0, r4
   12f90:	strd	r2, [sp, #8]
   12f94:	bl	159e0 <__assert_fail@plt+0x46b0>
   12f98:	cmp	r0, #0
   12f9c:	beq	12fe0 <__assert_fail@plt+0x1cb0>
   12fa0:	ldr	r0, [r0, #8]
   12fa4:	b	13000 <__assert_fail@plt+0x1cd0>
   12fa8:	movw	r0, #11548	; 0x2d1c
   12fac:	movt	r0, #1
   12fb0:	mov	r1, r4
   12fb4:	movw	r3, #11788	; 0x2e0c
   12fb8:	movt	r3, #1
   12fbc:	movw	r2, #11748	; 0x2de4
   12fc0:	movt	r2, #1
   12fc4:	str	r0, [sp]
   12fc8:	mov	r0, #13
   12fcc:	bl	15d64 <__assert_fail@plt+0x4a34>
   12fd0:	cmp	r0, #0
   12fd4:	mov	r4, r0
   12fd8:	str	r0, [r5, #52]	; 0x34
   12fdc:	bne	12f84 <__assert_fail@plt+0x1c54>
   12fe0:	cmp	r7, #0
   12fe4:	blt	12ffc <__assert_fail@plt+0x1ccc>
   12fe8:	mov	r0, r7
   12fec:	add	r1, sp, #8
   12ff0:	bl	10fe8 <fstatfs64@plt>
   12ff4:	cmp	r0, #0
   12ff8:	beq	13014 <__assert_fail@plt+0x1ce4>
   12ffc:	mov	r0, #0
   13000:	add	sp, sp, #100	; 0x64
   13004:	ldrd	r4, [sp]
   13008:	ldrd	r6, [sp, #8]
   1300c:	add	sp, sp, #16
   13010:	pop	{pc}		; (ldr pc, [sp], #4)
   13014:	cmp	r4, #0
   13018:	beq	13058 <__assert_fail@plt+0x1d28>
   1301c:	mov	r0, #16
   13020:	bl	1c470 <__assert_fail@plt+0xb140>
   13024:	subs	r5, r0, #0
   13028:	beq	13058 <__assert_fail@plt+0x1d28>
   1302c:	ldr	ip, [sp, #8]
   13030:	mov	r0, r4
   13034:	mov	r1, r5
   13038:	ldrd	r2, [r6, #64]	; 0x40
   1303c:	strd	r2, [r5]
   13040:	str	ip, [r5, #8]
   13044:	bl	165cc <__assert_fail@plt+0x529c>
   13048:	cmp	r0, #0
   1304c:	beq	13060 <__assert_fail@plt+0x1d30>
   13050:	cmp	r5, r0
   13054:	bne	1306c <__assert_fail@plt+0x1d3c>
   13058:	ldr	r0, [sp, #8]
   1305c:	b	13000 <__assert_fail@plt+0x1cd0>
   13060:	mov	r0, r5
   13064:	bl	12d1c <__assert_fail@plt+0x19ec>
   13068:	b	13058 <__assert_fail@plt+0x1d28>
   1306c:	bl	112e8 <abort@plt>
   13070:	ldr	ip, [r2, #48]	; 0x30
   13074:	strd	r4, [sp, #-16]!
   13078:	mov	r4, r2
   1307c:	add	r5, r2, #64	; 0x40
   13080:	ldr	r2, [r2, #24]
   13084:	str	r6, [sp, #8]
   13088:	str	lr, [sp, #12]
   1308c:	sub	sp, sp, #8
   13090:	cmp	ip, #0
   13094:	bne	1310c <__assert_fail@plt+0x1ddc>
   13098:	tst	r1, #1
   1309c:	beq	1310c <__assert_fail@plt+0x1ddc>
   130a0:	mov	r1, r2
   130a4:	mov	r0, #3
   130a8:	mov	r2, r5
   130ac:	bl	112d0 <__xstat64@plt>
   130b0:	cmp	r0, #0
   130b4:	beq	13138 <__assert_fail@plt+0x1e08>
   130b8:	bl	111ec <__errno_location@plt>
   130bc:	ldr	r3, [r0]
   130c0:	mov	r6, r0
   130c4:	cmp	r3, #2
   130c8:	bne	130f0 <__assert_fail@plt+0x1dc0>
   130cc:	mov	r2, r5
   130d0:	mov	r0, #3
   130d4:	ldr	r1, [r4, #24]
   130d8:	bl	11300 <__lxstat64@plt>
   130dc:	subs	r3, r0, #0
   130e0:	moveq	r0, #13
   130e4:	streq	r3, [r6]
   130e8:	beq	1315c <__assert_fail@plt+0x1e2c>
   130ec:	ldr	r3, [r6]
   130f0:	mov	r0, r5
   130f4:	mov	r2, #104	; 0x68
   130f8:	str	r3, [r4, #32]
   130fc:	mov	r1, #0
   13100:	bl	11204 <memset@plt>
   13104:	mov	r0, #10
   13108:	b	1315c <__assert_fail@plt+0x1e2c>
   1310c:	ubfx	ip, r1, #1, #1
   13110:	orrs	r3, r3, ip
   13114:	bne	130a0 <__assert_fail@plt+0x1d70>
   13118:	mov	ip, #256	; 0x100
   1311c:	mov	r1, r0
   13120:	mov	r3, r5
   13124:	mov	r0, #3
   13128:	str	ip, [sp]
   1312c:	bl	110e4 <__fxstatat64@plt>
   13130:	cmp	r0, #0
   13134:	bne	131b8 <__assert_fail@plt+0x1e88>
   13138:	ldr	r3, [r4, #80]	; 0x50
   1313c:	and	r3, r3, #61440	; 0xf000
   13140:	cmp	r3, #16384	; 0x4000
   13144:	beq	13170 <__assert_fail@plt+0x1e40>
   13148:	cmp	r3, #40960	; 0xa000
   1314c:	beq	131c4 <__assert_fail@plt+0x1e94>
   13150:	cmp	r3, #32768	; 0x8000
   13154:	movne	r0, #3
   13158:	moveq	r0, #8
   1315c:	add	sp, sp, #8
   13160:	ldrd	r4, [sp]
   13164:	ldr	r6, [sp, #8]
   13168:	add	sp, sp, #12
   1316c:	pop	{pc}		; (ldr pc, [sp], #4)
   13170:	ldrb	r3, [r4, #168]	; 0xa8
   13174:	cmp	r3, #46	; 0x2e
   13178:	bne	1319c <__assert_fail@plt+0x1e6c>
   1317c:	ldrb	r3, [r4, #169]	; 0xa9
   13180:	cmp	r3, #0
   13184:	beq	131a4 <__assert_fail@plt+0x1e74>
   13188:	ldr	r3, [r4, #168]	; 0xa8
   1318c:	bic	r3, r3, #-16777216	; 0xff000000
   13190:	bic	r3, r3, #255	; 0xff
   13194:	cmp	r3, #11776	; 0x2e00
   13198:	beq	131a4 <__assert_fail@plt+0x1e74>
   1319c:	mov	r0, #1
   131a0:	b	1315c <__assert_fail@plt+0x1e2c>
   131a4:	ldr	r3, [r4, #48]	; 0x30
   131a8:	cmp	r3, #0
   131ac:	moveq	r0, #1
   131b0:	movne	r0, #5
   131b4:	b	1315c <__assert_fail@plt+0x1e2c>
   131b8:	bl	111ec <__errno_location@plt>
   131bc:	ldr	r3, [r0]
   131c0:	b	130f0 <__assert_fail@plt+0x1dc0>
   131c4:	mov	r0, #12
   131c8:	b	1315c <__assert_fail@plt+0x1e2c>
   131cc:	movw	r3, #258	; 0x102
   131d0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   131d4:	tst	r0, r3
   131d8:	strd	r6, [sp, #8]
   131dc:	strd	r8, [sp, #16]
   131e0:	mov	r8, r2
   131e4:	str	sl, [sp, #24]
   131e8:	mov	sl, r1
   131ec:	str	lr, [sp, #28]
   131f0:	beq	13274 <__assert_fail@plt+0x1f44>
   131f4:	mov	r0, #24
   131f8:	bl	1c470 <__assert_fail@plt+0xb140>
   131fc:	subs	r9, r0, #0
   13200:	beq	13298 <__assert_fail@plt+0x1f68>
   13204:	ldrd	r6, [r8, #64]	; 0x40
   13208:	mov	r1, r9
   1320c:	ldrd	r4, [r8, #160]	; 0xa0
   13210:	ldr	r0, [sl]
   13214:	strd	r6, [r9]
   13218:	str	r8, [r9, #16]
   1321c:	strd	r4, [r9, #8]
   13220:	bl	165cc <__assert_fail@plt+0x529c>
   13224:	cmp	r9, r0
   13228:	mov	r4, r0
   1322c:	beq	13258 <__assert_fail@plt+0x1f28>
   13230:	mov	r0, r9
   13234:	bl	12d1c <__assert_fail@plt+0x19ec>
   13238:	cmp	r4, #0
   1323c:	beq	13298 <__assert_fail@plt+0x1f68>
   13240:	ldr	r3, [r4, #16]
   13244:	mov	r2, #2
   13248:	mov	r0, #1
   1324c:	str	r3, [r8]
   13250:	strh	r2, [r8, #56]	; 0x38
   13254:	b	1325c <__assert_fail@plt+0x1f2c>
   13258:	mov	r0, #1
   1325c:	ldrd	r4, [sp]
   13260:	ldrd	r6, [sp, #8]
   13264:	ldrd	r8, [sp, #16]
   13268:	ldr	sl, [sp, #24]
   1326c:	add	sp, sp, #28
   13270:	pop	{pc}		; (ldr pc, [sp], #4)
   13274:	add	r1, r2, #64	; 0x40
   13278:	ldr	r0, [sl]
   1327c:	bl	1c5b4 <__assert_fail@plt+0xb284>
   13280:	cmp	r0, #0
   13284:	beq	13258 <__assert_fail@plt+0x1f28>
   13288:	mov	r3, #2
   1328c:	str	r8, [r8]
   13290:	strh	r3, [r8, #56]	; 0x38
   13294:	b	1325c <__assert_fail@plt+0x1f2c>
   13298:	mov	r0, #0
   1329c:	b	1325c <__assert_fail@plt+0x1f2c>
   132a0:	movw	r3, #258	; 0x102
   132a4:	mov	ip, r1
   132a8:	strd	r4, [sp, #-12]!
   132ac:	tst	r0, r3
   132b0:	str	lr, [sp, #8]
   132b4:	sub	sp, sp, #28
   132b8:	bne	13308 <__assert_fail@plt+0x1fd8>
   132bc:	ldr	r3, [r2, #4]
   132c0:	cmp	r3, #0
   132c4:	beq	132f8 <__assert_fail@plt+0x1fc8>
   132c8:	ldr	r1, [r3, #48]	; 0x30
   132cc:	cmp	r1, #0
   132d0:	blt	132f8 <__assert_fail@plt+0x1fc8>
   132d4:	ldr	ip, [ip]
   132d8:	ldrd	r0, [ip, #16]
   132dc:	orrs	r1, r0, r1
   132e0:	beq	13368 <__assert_fail@plt+0x2038>
   132e4:	ldrd	r4, [ip]
   132e8:	ldrd	r0, [r2, #160]	; 0xa0
   132ec:	cmp	r5, r1
   132f0:	cmpeq	r4, r0
   132f4:	beq	13340 <__assert_fail@plt+0x2010>
   132f8:	add	sp, sp, #28
   132fc:	ldrd	r4, [sp]
   13300:	add	sp, sp, #8
   13304:	pop	{pc}		; (ldr pc, [sp], #4)
   13308:	ldrd	r4, [r2, #64]	; 0x40
   1330c:	mov	r1, sp
   13310:	ldrd	r2, [r2, #160]	; 0xa0
   13314:	ldr	r0, [ip]
   13318:	strd	r4, [sp]
   1331c:	strd	r2, [sp, #8]
   13320:	bl	167f0 <__assert_fail@plt+0x54c0>
   13324:	cmp	r0, #0
   13328:	beq	13368 <__assert_fail@plt+0x2038>
   1332c:	bl	12d1c <__assert_fail@plt+0x19ec>
   13330:	add	sp, sp, #28
   13334:	ldrd	r4, [sp]
   13338:	add	sp, sp, #8
   1333c:	pop	{pc}		; (ldr pc, [sp], #4)
   13340:	ldrd	r0, [ip, #8]
   13344:	ldrd	r4, [r2, #64]	; 0x40
   13348:	cmp	r1, r5
   1334c:	cmpeq	r0, r4
   13350:	bne	132f8 <__assert_fail@plt+0x1fc8>
   13354:	ldrd	r0, [r3, #64]	; 0x40
   13358:	ldrd	r2, [r3, #160]	; 0xa0
   1335c:	strd	r2, [ip]
   13360:	strd	r0, [ip, #8]
   13364:	b	132f8 <__assert_fail@plt+0x1fc8>
   13368:	bl	112e8 <abort@plt>
   1336c:	ldr	r3, [r0, #48]	; 0x30
   13370:	strd	r4, [sp, #-16]!
   13374:	add	r5, r0, #60	; 0x3c
   13378:	str	r6, [sp, #8]
   1337c:	str	lr, [sp, #12]
   13380:	ands	r6, r3, #4
   13384:	movne	r6, #0
   13388:	bne	133c4 <__assert_fail@plt+0x2094>
   1338c:	tst	r3, #512	; 0x200
   13390:	mov	r4, r0
   13394:	beq	133f4 <__assert_fail@plt+0x20c4>
   13398:	mov	r0, r5
   1339c:	ldr	r1, [r4, #32]
   133a0:	bl	16b64 <__assert_fail@plt+0x5834>
   133a4:	cmp	r0, #0
   133a8:	bge	13408 <__assert_fail@plt+0x20d8>
   133ac:	mvn	r3, #99	; 0x63
   133b0:	str	r3, [r4, #32]
   133b4:	b	133c4 <__assert_fail@plt+0x2094>
   133b8:	bl	16bac <__assert_fail@plt+0x587c>
   133bc:	cmp	r0, #0
   133c0:	bge	133ec <__assert_fail@plt+0x20bc>
   133c4:	mov	r0, r5
   133c8:	bl	16b5c <__assert_fail@plt+0x582c>
   133cc:	cmp	r0, #0
   133d0:	mov	r0, r5
   133d4:	beq	133b8 <__assert_fail@plt+0x2088>
   133d8:	mov	r0, r6
   133dc:	ldrd	r4, [sp]
   133e0:	ldr	r6, [sp, #8]
   133e4:	add	sp, sp, #12
   133e8:	pop	{pc}		; (ldr pc, [sp], #4)
   133ec:	bl	112f4 <close@plt>
   133f0:	b	133c4 <__assert_fail@plt+0x2094>
   133f4:	ldr	r0, [r0, #28]
   133f8:	bl	112a0 <fchdir@plt>
   133fc:	adds	r6, r0, #0
   13400:	movne	r6, #1
   13404:	b	133c4 <__assert_fail@plt+0x2094>
   13408:	bl	112f4 <close@plt>
   1340c:	mvn	r3, #99	; 0x63
   13410:	str	r3, [r4, #32]
   13414:	b	133c4 <__assert_fail@plt+0x2094>
   13418:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1341c:	mov	r5, r0
   13420:	mov	r4, r2
   13424:	strd	r6, [sp, #8]
   13428:	strd	r8, [sp, #16]
   1342c:	mov	r8, r1
   13430:	ldr	r9, [r0, #48]	; 0x30
   13434:	str	sl, [sp, #24]
   13438:	subs	sl, r3, #0
   1343c:	str	lr, [sp, #28]
   13440:	sub	sp, sp, #104	; 0x68
   13444:	and	r6, r9, #4
   13448:	beq	13544 <__assert_fail@plt+0x2214>
   1344c:	movw	r1, #56764	; 0xddbc
   13450:	movt	r1, #1
   13454:	mov	r0, sl
   13458:	bl	11024 <strcmp@plt>
   1345c:	cmp	r0, #0
   13460:	bne	13544 <__assert_fail@plt+0x2214>
   13464:	cmp	r6, #0
   13468:	bne	13584 <__assert_fail@plt+0x2254>
   1346c:	cmp	r4, #0
   13470:	bge	136c0 <__assert_fail@plt+0x2390>
   13474:	tst	r9, #512	; 0x200
   13478:	beq	135c8 <__assert_fail@plt+0x2298>
   1347c:	add	r6, r5, #60	; 0x3c
   13480:	mov	r0, r6
   13484:	bl	16b5c <__assert_fail@plt+0x582c>
   13488:	cmp	r0, #0
   1348c:	beq	13648 <__assert_fail@plt+0x2318>
   13490:	lsl	r2, r9, #11
   13494:	mov	r6, #1
   13498:	and	r2, r2, #32768	; 0x8000
   1349c:	orr	r2, r2, #540672	; 0x84000
   134a0:	orr	r2, r2, #2304	; 0x900
   134a4:	mov	r1, sl
   134a8:	ldr	r0, [r5, #32]
   134ac:	bl	16c74 <__assert_fail@plt+0x5944>
   134b0:	mov	r7, r0
   134b4:	cmp	r7, #0
   134b8:	blt	136b8 <__assert_fail@plt+0x2388>
   134bc:	ldr	r9, [r5, #48]	; 0x30
   134c0:	tst	r9, #2
   134c4:	beq	13560 <__assert_fail@plt+0x2230>
   134c8:	mov	r2, sp
   134cc:	mov	r1, r7
   134d0:	mov	r0, #3
   134d4:	bl	110fc <__fxstat64@plt>
   134d8:	cmp	r0, #0
   134dc:	bne	135c0 <__assert_fail@plt+0x2290>
   134e0:	ldrd	r2, [sp]
   134e4:	ldrd	r0, [r8, #64]	; 0x40
   134e8:	cmp	r1, r3
   134ec:	cmpeq	r0, r2
   134f0:	bne	135b4 <__assert_fail@plt+0x2284>
   134f4:	ldrd	r2, [sp, #96]	; 0x60
   134f8:	ldrd	r0, [r8, #160]	; 0xa0
   134fc:	cmp	r1, r3
   13500:	cmpeq	r0, r2
   13504:	bne	135b4 <__assert_fail@plt+0x2284>
   13508:	ldr	r9, [r5, #48]	; 0x30
   1350c:	tst	r9, #512	; 0x200
   13510:	bne	135f0 <__assert_fail@plt+0x22c0>
   13514:	mov	r0, r7
   13518:	bl	112a0 <fchdir@plt>
   1351c:	mov	r9, r0
   13520:	cmp	r4, #0
   13524:	bge	13594 <__assert_fail@plt+0x2264>
   13528:	bl	111ec <__errno_location@plt>
   1352c:	mov	r4, r0
   13530:	mov	r0, r7
   13534:	ldr	r5, [r4]
   13538:	bl	112f4 <close@plt>
   1353c:	str	r5, [r4]
   13540:	b	13594 <__assert_fail@plt+0x2264>
   13544:	cmp	r6, #0
   13548:	bne	13584 <__assert_fail@plt+0x2254>
   1354c:	cmp	r4, #0
   13550:	movge	r7, r4
   13554:	blt	13678 <__assert_fail@plt+0x2348>
   13558:	tst	r9, #2
   1355c:	bne	134c8 <__assert_fail@plt+0x2198>
   13560:	cmp	sl, #0
   13564:	beq	1350c <__assert_fail@plt+0x21dc>
   13568:	mov	r0, sl
   1356c:	movw	r1, #56764	; 0xddbc
   13570:	movt	r1, #1
   13574:	bl	11024 <strcmp@plt>
   13578:	cmp	r0, #0
   1357c:	bne	1350c <__assert_fail@plt+0x21dc>
   13580:	b	134c8 <__assert_fail@plt+0x2198>
   13584:	mvn	r3, r4
   13588:	lsr	r3, r3, #31
   1358c:	ands	r9, r3, r9, lsr #9
   13590:	bne	13638 <__assert_fail@plt+0x2308>
   13594:	mov	r0, r9
   13598:	add	sp, sp, #104	; 0x68
   1359c:	ldrd	r4, [sp]
   135a0:	ldrd	r6, [sp, #8]
   135a4:	ldrd	r8, [sp, #16]
   135a8:	ldr	sl, [sp, #24]
   135ac:	add	sp, sp, #28
   135b0:	pop	{pc}		; (ldr pc, [sp], #4)
   135b4:	bl	111ec <__errno_location@plt>
   135b8:	mov	r3, #2
   135bc:	str	r3, [r0]
   135c0:	mvn	r9, #0
   135c4:	b	13520 <__assert_fail@plt+0x21f0>
   135c8:	lsl	r2, r9, #11
   135cc:	mov	r6, #1
   135d0:	and	r2, r2, #32768	; 0x8000
   135d4:	orr	r2, r2, #540672	; 0x84000
   135d8:	orr	r2, r2, #2304	; 0x900
   135dc:	mov	r1, r2
   135e0:	mov	r0, sl
   135e4:	bl	1c948 <__assert_fail@plt+0xb618>
   135e8:	mov	r7, r0
   135ec:	b	134b4 <__assert_fail@plt+0x2184>
   135f0:	ldr	r1, [r5, #32]
   135f4:	sub	r3, r1, r7
   135f8:	cmn	r1, #100	; 0x64
   135fc:	clz	r3, r3
   13600:	lsr	r3, r3, #5
   13604:	moveq	r3, #0
   13608:	cmp	r3, #0
   1360c:	bne	136d4 <__assert_fail@plt+0x23a4>
   13610:	cmp	r6, #0
   13614:	beq	13698 <__assert_fail@plt+0x2368>
   13618:	mvn	r3, r1
   1361c:	eor	r9, r9, #4
   13620:	lsr	r3, r3, #31
   13624:	ands	r3, r3, r9, lsr #2
   13628:	bne	136b0 <__assert_fail@plt+0x2380>
   1362c:	mov	r9, #0
   13630:	str	r7, [r5, #32]
   13634:	b	13594 <__assert_fail@plt+0x2264>
   13638:	mov	r0, r4
   1363c:	mov	r9, #0
   13640:	bl	112f4 <close@plt>
   13644:	b	13594 <__assert_fail@plt+0x2264>
   13648:	mov	r0, r6
   1364c:	bl	16bac <__assert_fail@plt+0x587c>
   13650:	ldr	r9, [r5, #48]	; 0x30
   13654:	subs	r7, r0, #0
   13658:	movlt	r6, #1
   1365c:	andlt	r3, r9, #512	; 0x200
   13660:	blt	1367c <__assert_fail@plt+0x234c>
   13664:	tst	r9, #2
   13668:	mov	r4, r7
   1366c:	mov	r6, #1
   13670:	beq	1350c <__assert_fail@plt+0x21dc>
   13674:	b	134c8 <__assert_fail@plt+0x2198>
   13678:	and	r3, r9, #512	; 0x200
   1367c:	lsl	r2, r9, #11
   13680:	cmp	r3, #0
   13684:	and	r2, r2, #32768	; 0x8000
   13688:	orr	r2, r2, #540672	; 0x84000
   1368c:	orr	r2, r2, #2304	; 0x900
   13690:	bne	134a4 <__assert_fail@plt+0x2174>
   13694:	b	135dc <__assert_fail@plt+0x22ac>
   13698:	add	r0, r5, #60	; 0x3c
   1369c:	bl	16b64 <__assert_fail@plt+0x5834>
   136a0:	cmp	r0, #0
   136a4:	blt	1362c <__assert_fail@plt+0x22fc>
   136a8:	bl	112f4 <close@plt>
   136ac:	b	1362c <__assert_fail@plt+0x22fc>
   136b0:	mov	r0, r1
   136b4:	b	136a8 <__assert_fail@plt+0x2378>
   136b8:	mvn	r9, #0
   136bc:	b	13594 <__assert_fail@plt+0x2264>
   136c0:	tst	r9, #2
   136c4:	mov	r7, r4
   136c8:	mov	r6, #1
   136cc:	beq	13568 <__assert_fail@plt+0x2238>
   136d0:	b	134c8 <__assert_fail@plt+0x2198>
   136d4:	bl	112e8 <abort@plt>
   136d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   136dc:	strd	r6, [sp, #8]
   136e0:	mov	r6, r0
   136e4:	strd	sl, [sp, #24]
   136e8:	ldr	fp, [r0]
   136ec:	strd	r8, [sp, #16]
   136f0:	str	lr, [sp, #32]
   136f4:	sub	sp, sp, #76	; 0x4c
   136f8:	str	r1, [sp, #40]	; 0x28
   136fc:	ldr	r0, [fp, #12]
   13700:	cmp	r0, #0
   13704:	str	r0, [sp, #48]	; 0x30
   13708:	beq	13b78 <__assert_fail@plt+0x2848>
   1370c:	bl	11294 <dirfd@plt>
   13710:	cmp	r0, #0
   13714:	str	r0, [sp, #68]	; 0x44
   13718:	blt	140ec <__assert_fail@plt+0x2dbc>
   1371c:	ldr	r3, [r6, #44]	; 0x2c
   13720:	cmp	r3, #0
   13724:	beq	13f98 <__assert_fail@plt+0x2c68>
   13728:	ldr	r3, [r6, #48]	; 0x30
   1372c:	mvn	r2, #0
   13730:	str	r2, [sp, #28]
   13734:	mov	r2, #1
   13738:	str	r2, [sp, #60]	; 0x3c
   1373c:	ldr	r1, [fp, #28]
   13740:	ldr	r0, [fp, #40]	; 0x28
   13744:	sub	r2, r0, #1
   13748:	str	r0, [sp, #4]
   1374c:	ldrb	r1, [r1, r2]
   13750:	cmp	r1, #47	; 0x2f
   13754:	beq	13764 <__assert_fail@plt+0x2434>
   13758:	add	r1, r0, #1
   1375c:	mov	r2, r0
   13760:	str	r1, [sp, #4]
   13764:	ands	r3, r3, #4
   13768:	streq	r3, [sp, #32]
   1376c:	beq	13788 <__assert_fail@plt+0x2458>
   13770:	ldr	r3, [r6, #24]
   13774:	mov	r0, #47	; 0x2f
   13778:	add	r1, r3, r2
   1377c:	strb	r0, [r3, r2]
   13780:	add	r3, r1, #1
   13784:	str	r3, [sp, #32]
   13788:	movw	r3, #6548	; 0x1994
   1378c:	movt	r3, #258	; 0x102
   13790:	ldr	r2, [r6, #36]	; 0x24
   13794:	movw	r0, #19778	; 0x4d42
   13798:	movt	r0, #65363	; 0xff53
   1379c:	str	fp, [sp, #16]
   137a0:	str	r3, [sp, #52]	; 0x34
   137a4:	mov	r1, #0
   137a8:	ldr	r3, [fp, #48]	; 0x30
   137ac:	mov	r9, r1
   137b0:	mov	fp, r1
   137b4:	str	r0, [sp, #56]	; 0x38
   137b8:	ldr	r0, [sp, #4]
   137bc:	str	r1, [sp, #12]
   137c0:	str	r1, [sp, #36]	; 0x24
   137c4:	add	r3, r3, #1
   137c8:	sub	r2, r2, r0
   137cc:	str	r1, [sp, #44]	; 0x2c
   137d0:	str	r2, [sp, #20]
   137d4:	str	r3, [sp, #24]
   137d8:	b	137f0 <__assert_fail@plt+0x24c0>
   137dc:	ldr	r3, [sp, #28]
   137e0:	add	r9, r9, #1
   137e4:	cmp	r9, r3
   137e8:	bcs	13cd4 <__assert_fail@plt+0x29a4>
   137ec:	mov	fp, r4
   137f0:	ldr	r3, [sp, #16]
   137f4:	ldr	r4, [r3, #12]
   137f8:	cmp	r4, #0
   137fc:	beq	13e14 <__assert_fail@plt+0x2ae4>
   13800:	bl	111ec <__errno_location@plt>
   13804:	mov	sl, r0
   13808:	mov	r3, #0
   1380c:	mov	r0, r4
   13810:	str	r3, [sl]
   13814:	bl	1127c <readdir64@plt>
   13818:	subs	r7, r0, #0
   1381c:	beq	13ee8 <__assert_fail@plt+0x2bb8>
   13820:	ldr	r3, [r6, #48]	; 0x30
   13824:	tst	r3, #32
   13828:	bne	13838 <__assert_fail@plt+0x2508>
   1382c:	ldrb	r3, [r7, #19]
   13830:	cmp	r3, #46	; 0x2e
   13834:	beq	13a38 <__assert_fail@plt+0x2708>
   13838:	add	r1, r7, #19
   1383c:	mov	r0, r1
   13840:	str	r1, [sp, #8]
   13844:	bl	111bc <strlen@plt>
   13848:	mov	r5, r0
   1384c:	add	r0, r0, #176	; 0xb0
   13850:	bic	r0, r0, #7
   13854:	bl	1c470 <__assert_fail@plt+0xb140>
   13858:	subs	r4, r0, #0
   1385c:	beq	13a6c <__assert_fail@plt+0x273c>
   13860:	add	r8, r4, #168	; 0xa8
   13864:	mov	r2, r5
   13868:	ldr	r1, [sp, #8]
   1386c:	mov	r0, r8
   13870:	bl	11078 <memcpy@plt>
   13874:	ldr	r3, [sp, #20]
   13878:	mov	r1, #0
   1387c:	add	r0, r4, r5
   13880:	mov	ip, #196608	; 0x30000
   13884:	ldr	r2, [r6, #24]
   13888:	strb	r1, [r0, #168]	; 0xa8
   1388c:	str	r1, [r4, #12]
   13890:	cmp	r3, r5
   13894:	str	r1, [r4, #16]
   13898:	str	r1, [r4, #20]
   1389c:	str	r2, [r4, #28]
   138a0:	str	r1, [r4, #32]
   138a4:	str	r6, [r4, #44]	; 0x2c
   138a8:	str	r5, [r4, #52]	; 0x34
   138ac:	str	ip, [r4, #58]	; 0x3a
   138b0:	bls	13974 <__assert_fail@plt+0x2644>
   138b4:	ldr	r3, [sp, #4]
   138b8:	adds	r5, r5, r3
   138bc:	bcs	141d4 <__assert_fail@plt+0x2ea4>
   138c0:	ldr	r3, [sp, #24]
   138c4:	str	r5, [r4, #40]	; 0x28
   138c8:	ldr	ip, [r6]
   138cc:	ldr	r1, [r6, #48]	; 0x30
   138d0:	str	r3, [r4, #48]	; 0x30
   138d4:	ldrd	r2, [r7]
   138d8:	str	ip, [r4, #4]
   138dc:	tst	r1, #4
   138e0:	streq	r8, [r4, #24]
   138e4:	strd	r2, [r4, #160]	; 0xa0
   138e8:	bne	13a14 <__assert_fail@plt+0x26e4>
   138ec:	ldr	r3, [r6, #44]	; 0x2c
   138f0:	cmp	r3, #0
   138f4:	beq	13900 <__assert_fail@plt+0x25d0>
   138f8:	ands	r3, r1, #1024	; 0x400
   138fc:	beq	13a58 <__assert_fail@plt+0x2728>
   13900:	ldrb	r3, [r7, #18]
   13904:	tst	r1, #8
   13908:	sub	r0, r3, #1
   1390c:	beq	13918 <__assert_fail@plt+0x25e8>
   13910:	tst	r3, #251	; 0xfb
   13914:	bne	13b14 <__assert_fail@plt+0x27e4>
   13918:	mov	r3, #11
   1391c:	cmp	r0, r3
   13920:	strh	r3, [r4, #56]	; 0x38
   13924:	bls	139f8 <__assert_fail@plt+0x26c8>
   13928:	mov	r1, #0
   1392c:	mov	r2, #2
   13930:	mov	r3, #0
   13934:	str	r1, [r4, #80]	; 0x50
   13938:	strd	r2, [r4, #112]	; 0x70
   1393c:	ldr	r2, [sp, #12]
   13940:	mov	r3, #0
   13944:	str	r3, [r4, #8]
   13948:	cmp	r2, r3
   1394c:	movw	r3, #10000	; 0x2710
   13950:	strne	r4, [fp, #8]
   13954:	streq	r4, [sp, #12]
   13958:	cmp	r9, r3
   1395c:	bne	137dc <__assert_fail@plt+0x24ac>
   13960:	ldr	r5, [r6, #44]	; 0x2c
   13964:	cmp	r5, #0
   13968:	beq	13c88 <__assert_fail@plt+0x2958>
   1396c:	movw	r9, #10001	; 0x2711
   13970:	b	137ec <__assert_fail@plt+0x24bc>
   13974:	ldr	ip, [r6, #36]	; 0x24
   13978:	ldr	r3, [sp, #4]
   1397c:	add	r0, ip, #256	; 0x100
   13980:	add	r0, r0, #1
   13984:	add	r0, r0, r3
   13988:	add	r0, r0, r5
   1398c:	cmp	ip, r0
   13990:	bhi	13b50 <__assert_fail@plt+0x2820>
   13994:	mov	r1, r0
   13998:	str	r0, [r6, #36]	; 0x24
   1399c:	mov	r0, r2
   139a0:	str	r2, [sp, #8]
   139a4:	bl	1c4ac <__assert_fail@plt+0xb17c>
   139a8:	cmp	r0, #0
   139ac:	ldr	r2, [sp, #8]
   139b0:	beq	13f44 <__assert_fail@plt+0x2c14>
   139b4:	cmp	r2, r0
   139b8:	str	r0, [r6, #24]
   139bc:	beq	139dc <__assert_fail@plt+0x26ac>
   139c0:	ldr	r2, [r6, #48]	; 0x30
   139c4:	tst	r2, #4
   139c8:	ldrne	r3, [sp, #4]
   139cc:	addne	r3, r0, r3
   139d0:	strne	r3, [sp, #32]
   139d4:	mov	r3, #1
   139d8:	str	r3, [sp, #36]	; 0x24
   139dc:	ldr	r3, [sp, #4]
   139e0:	ldr	r2, [r6, #36]	; 0x24
   139e4:	sub	r3, r2, r3
   139e8:	str	r3, [sp, #20]
   139ec:	b	138b4 <__assert_fail@plt+0x2584>
   139f0:	mov	r3, #11
   139f4:	strh	r3, [r4, #56]	; 0x38
   139f8:	movw	r3, #56716	; 0xdd8c
   139fc:	movt	r3, #1
   13a00:	ldr	r1, [r3, r0, lsl #2]
   13a04:	mov	r2, #2
   13a08:	mov	r3, #0
   13a0c:	str	r1, [r4, #80]	; 0x50
   13a10:	b	13938 <__assert_fail@plt+0x2608>
   13a14:	ldr	ip, [r4, #28]
   13a18:	mov	r1, r8
   13a1c:	ldr	r2, [r4, #52]	; 0x34
   13a20:	ldr	r0, [sp, #32]
   13a24:	str	ip, [r4, #24]
   13a28:	add	r2, r2, #1
   13a2c:	bl	11048 <memmove@plt>
   13a30:	ldr	r1, [r6, #48]	; 0x30
   13a34:	b	138ec <__assert_fail@plt+0x25bc>
   13a38:	ldrb	r3, [r7, #20]
   13a3c:	cmp	r3, #0
   13a40:	beq	13a50 <__assert_fail@plt+0x2720>
   13a44:	ldrh	r3, [r7, #20]
   13a48:	cmp	r3, #46	; 0x2e
   13a4c:	bne	13838 <__assert_fail@plt+0x2508>
   13a50:	mov	r4, fp
   13a54:	b	137ec <__assert_fail@plt+0x24bc>
   13a58:	mov	r2, r4
   13a5c:	ldr	r0, [r6, #32]
   13a60:	bl	13070 <__assert_fail@plt+0x1d40>
   13a64:	strh	r0, [r4, #56]	; 0x38
   13a68:	b	1393c <__assert_fail@plt+0x260c>
   13a6c:	ldr	r5, [sl]
   13a70:	ldr	r8, [sp, #12]
   13a74:	ldr	fp, [sp, #16]
   13a78:	mov	r0, r4
   13a7c:	bl	12d1c <__assert_fail@plt+0x19ec>
   13a80:	cmp	r8, #0
   13a84:	bne	13af0 <__assert_fail@plt+0x27c0>
   13a88:	ldr	r0, [fp, #12]
   13a8c:	bl	1130c <closedir@plt>
   13a90:	ldr	r3, [r6, #48]	; 0x30
   13a94:	mov	r2, #0
   13a98:	mov	r1, #7
   13a9c:	mov	r8, r2
   13aa0:	str	r2, [fp, #12]
   13aa4:	strh	r1, [fp, #56]	; 0x38
   13aa8:	orr	r3, r3, #8192	; 0x2000
   13aac:	str	r3, [r6, #48]	; 0x30
   13ab0:	str	r5, [sl]
   13ab4:	mov	r0, r8
   13ab8:	add	sp, sp, #76	; 0x4c
   13abc:	ldrd	r4, [sp]
   13ac0:	ldrd	r6, [sp, #8]
   13ac4:	ldrd	r8, [sp, #16]
   13ac8:	ldrd	sl, [sp, #24]
   13acc:	add	sp, sp, #32
   13ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ad4:	mov	r0, r3
   13ad8:	bl	1130c <closedir@plt>
   13adc:	mov	r0, r8
   13ae0:	bl	12d1c <__assert_fail@plt+0x19ec>
   13ae4:	cmp	r4, #0
   13ae8:	beq	13a88 <__assert_fail@plt+0x2758>
   13aec:	mov	r8, r4
   13af0:	mov	r0, r8
   13af4:	ldr	r4, [r8, #8]
   13af8:	ldr	r3, [r8, #12]
   13afc:	cmp	r3, #0
   13b00:	bne	13ad4 <__assert_fail@plt+0x27a4>
   13b04:	bl	12d1c <__assert_fail@plt+0x19ec>
   13b08:	cmp	r4, #0
   13b0c:	bne	13aec <__assert_fail@plt+0x27bc>
   13b10:	b	13a88 <__assert_fail@plt+0x2758>
   13b14:	ubfx	r2, r1, #4, #1
   13b18:	cmp	r3, #10
   13b1c:	moveq	r3, r2
   13b20:	orrne	r3, r2, #1
   13b24:	cmp	r3, #0
   13b28:	beq	139f0 <__assert_fail@plt+0x26c0>
   13b2c:	mov	r3, #11
   13b30:	cmp	r0, r3
   13b34:	strh	r3, [r4, #56]	; 0x38
   13b38:	bls	13d90 <__assert_fail@plt+0x2a60>
   13b3c:	mov	r1, #0
   13b40:	mov	r2, #1
   13b44:	mov	r3, #0
   13b48:	str	r1, [r4, #80]	; 0x50
   13b4c:	b	13938 <__assert_fail@plt+0x2608>
   13b50:	mov	r0, r2
   13b54:	ldr	r8, [sp, #12]
   13b58:	ldr	fp, [sp, #16]
   13b5c:	bl	12d1c <__assert_fail@plt+0x19ec>
   13b60:	mov	r3, #36	; 0x24
   13b64:	mov	r1, #0
   13b68:	mov	r5, r3
   13b6c:	str	r1, [r6, #24]
   13b70:	str	r3, [sl]
   13b74:	b	13a78 <__assert_fail@plt+0x2748>
   13b78:	ldr	r3, [r6, #48]	; 0x30
   13b7c:	ldr	r1, [fp, #24]
   13b80:	and	r2, r3, #516	; 0x204
   13b84:	cmp	r2, #512	; 0x200
   13b88:	ldreq	r0, [r6, #32]
   13b8c:	mvnne	r0, #99	; 0x63
   13b90:	ands	r2, r3, #16
   13b94:	beq	13ba4 <__assert_fail@plt+0x2874>
   13b98:	tst	r3, #1
   13b9c:	moveq	r2, #32768	; 0x8000
   13ba0:	bne	13dac <__assert_fail@plt+0x2a7c>
   13ba4:	add	r3, sp, #68	; 0x44
   13ba8:	bl	16cb4 <__assert_fail@plt+0x5984>
   13bac:	cmp	r0, #0
   13bb0:	mov	r8, r0
   13bb4:	str	r0, [fp, #12]
   13bb8:	beq	14140 <__assert_fail@plt+0x2e10>
   13bbc:	ldrh	r3, [fp, #56]	; 0x38
   13bc0:	ldr	r0, [r6, #48]	; 0x30
   13bc4:	cmp	r3, #11
   13bc8:	beq	14080 <__assert_fail@plt+0x2d50>
   13bcc:	tst	r0, #256	; 0x100
   13bd0:	bne	13fc4 <__assert_fail@plt+0x2c94>
   13bd4:	ldr	r2, [r6, #44]	; 0x2c
   13bd8:	movw	r3, #34464	; 0x86a0
   13bdc:	movt	r3, #1
   13be0:	cmp	r2, #0
   13be4:	mvnne	r3, #0
   13be8:	str	r3, [sp, #28]
   13bec:	ldr	r3, [sp, #40]	; 0x28
   13bf0:	cmp	r3, #2
   13bf4:	beq	13fb4 <__assert_fail@plt+0x2c84>
   13bf8:	ldr	r3, [r6, #48]	; 0x30
   13bfc:	ldr	r0, [sp, #68]	; 0x44
   13c00:	and	r3, r3, #56	; 0x38
   13c04:	cmp	r3, #24
   13c08:	beq	13dbc <__assert_fail@plt+0x2a8c>
   13c0c:	ldr	r3, [sp, #40]	; 0x28
   13c10:	sub	r4, r3, #3
   13c14:	clz	r4, r4
   13c18:	lsr	r4, r4, #5
   13c1c:	ldr	r3, [r6, #48]	; 0x30
   13c20:	tst	r3, #512	; 0x200
   13c24:	bne	1412c <__assert_fail@plt+0x2dfc>
   13c28:	cmp	r0, #0
   13c2c:	bge	140c0 <__assert_fail@plt+0x2d90>
   13c30:	cmp	r4, #0
   13c34:	beq	13c44 <__assert_fail@plt+0x2914>
   13c38:	bl	111ec <__errno_location@plt>
   13c3c:	ldr	r3, [r0]
   13c40:	str	r3, [fp, #32]
   13c44:	ldrh	r3, [fp, #58]	; 0x3a
   13c48:	ldr	r0, [fp, #12]
   13c4c:	orr	r3, r3, #1
   13c50:	strh	r3, [fp, #58]	; 0x3a
   13c54:	bl	1130c <closedir@plt>
   13c58:	ldr	r3, [r6, #48]	; 0x30
   13c5c:	mov	r2, #0
   13c60:	str	r2, [fp, #12]
   13c64:	tst	r3, #512	; 0x200
   13c68:	beq	13c78 <__assert_fail@plt+0x2948>
   13c6c:	ldr	r0, [sp, #68]	; 0x44
   13c70:	cmp	r0, r2
   13c74:	bge	14120 <__assert_fail@plt+0x2df0>
   13c78:	mov	r2, #0
   13c7c:	str	r2, [fp, #12]
   13c80:	str	r2, [sp, #60]	; 0x3c
   13c84:	b	1373c <__assert_fail@plt+0x240c>
   13c88:	ldr	r0, [sp, #16]
   13c8c:	ldr	r1, [sp, #68]	; 0x44
   13c90:	bl	12f50 <__assert_fail@plt+0x1c20>
   13c94:	movw	r3, #26985	; 0x6969
   13c98:	cmp	r0, r3
   13c9c:	beq	13cc0 <__assert_fail@plt+0x2990>
   13ca0:	ldr	r3, [sp, #52]	; 0x34
   13ca4:	cmp	r0, r3
   13ca8:	beq	13cc0 <__assert_fail@plt+0x2990>
   13cac:	ldr	r3, [sp, #56]	; 0x38
   13cb0:	cmp	r0, r3
   13cb4:	movne	r3, #1
   13cb8:	strne	r3, [sp, #44]	; 0x2c
   13cbc:	bne	1396c <__assert_fail@plt+0x263c>
   13cc0:	ldr	r3, [sp, #28]
   13cc4:	add	r9, r9, #1
   13cc8:	str	r5, [sp, #44]	; 0x2c
   13ccc:	cmp	r9, r3
   13cd0:	bcc	137ec <__assert_fail@plt+0x24bc>
   13cd4:	ldr	r8, [sp, #12]
   13cd8:	ldr	r3, [sp, #36]	; 0x24
   13cdc:	ldr	fp, [sp, #16]
   13ce0:	cmp	r3, #0
   13ce4:	beq	13e28 <__assert_fail@plt+0x2af8>
   13ce8:	ldr	r3, [r6, #4]
   13cec:	ldr	r1, [r6, #24]
   13cf0:	cmp	r3, #0
   13cf4:	beq	13d28 <__assert_fail@plt+0x29f8>
   13cf8:	ldr	r2, [r3, #24]
   13cfc:	add	r0, r3, #168	; 0xa8
   13d00:	cmp	r2, r0
   13d04:	beq	13f30 <__assert_fail@plt+0x2c00>
   13d08:	ldr	r0, [r3, #28]
   13d0c:	str	r1, [r3, #28]
   13d10:	sub	r2, r2, r0
   13d14:	add	r2, r1, r2
   13d18:	str	r2, [r3, #24]
   13d1c:	ldr	r3, [r3, #8]
   13d20:	cmp	r3, #0
   13d24:	bne	13cf8 <__assert_fail@plt+0x29c8>
   13d28:	ldr	r3, [r8, #48]	; 0x30
   13d2c:	cmp	r3, #0
   13d30:	movge	r3, r8
   13d34:	bge	13d4c <__assert_fail@plt+0x2a1c>
   13d38:	b	13e28 <__assert_fail@plt+0x2af8>
   13d3c:	ldr	r3, [r2, #48]	; 0x30
   13d40:	cmp	r3, #0
   13d44:	blt	13e28 <__assert_fail@plt+0x2af8>
   13d48:	mov	r3, r2
   13d4c:	ldr	r2, [r3, #24]
   13d50:	add	r0, r3, #168	; 0xa8
   13d54:	cmp	r2, r0
   13d58:	beq	13d6c <__assert_fail@plt+0x2a3c>
   13d5c:	ldr	r0, [r3, #28]
   13d60:	sub	r2, r2, r0
   13d64:	add	r2, r1, r2
   13d68:	str	r2, [r3, #24]
   13d6c:	ldr	r2, [r3, #8]
   13d70:	str	r1, [r3, #28]
   13d74:	cmp	r2, #0
   13d78:	bne	13d3c <__assert_fail@plt+0x2a0c>
   13d7c:	ldr	r2, [r3, #4]
   13d80:	ldr	r3, [r2, #48]	; 0x30
   13d84:	cmp	r3, #0
   13d88:	bge	13d48 <__assert_fail@plt+0x2a18>
   13d8c:	b	13e28 <__assert_fail@plt+0x2af8>
   13d90:	movw	r3, #56716	; 0xdd8c
   13d94:	movt	r3, #1
   13d98:	ldr	r1, [r3, r0, lsl #2]
   13d9c:	mov	r2, #1
   13da0:	mov	r3, #0
   13da4:	str	r1, [r4, #80]	; 0x50
   13da8:	b	13938 <__assert_fail@plt+0x2608>
   13dac:	ldr	r2, [fp, #48]	; 0x30
   13db0:	cmp	r2, #0
   13db4:	movne	r2, #32768	; 0x8000
   13db8:	b	13ba4 <__assert_fail@plt+0x2874>
   13dbc:	ldr	r3, [fp, #84]	; 0x54
   13dc0:	cmp	r3, #2
   13dc4:	bne	13c0c <__assert_fail@plt+0x28dc>
   13dc8:	mov	r1, r0
   13dcc:	mov	r0, fp
   13dd0:	bl	12f50 <__assert_fail@plt+0x1c20>
   13dd4:	movw	r3, #26985	; 0x6969
   13dd8:	cmp	r0, r3
   13ddc:	beq	141cc <__assert_fail@plt+0x2e9c>
   13de0:	bgt	141b0 <__assert_fail@plt+0x2e80>
   13de4:	movw	r3, #19778	; 0x4d42
   13de8:	movt	r3, #65363	; 0xff53
   13dec:	cmp	r0, r3
   13df0:	beq	141cc <__assert_fail@plt+0x2e9c>
   13df4:	cmp	r0, #0
   13df8:	beq	141cc <__assert_fail@plt+0x2e9c>
   13dfc:	ldr	r3, [sp, #40]	; 0x28
   13e00:	cmp	r3, #3
   13e04:	bne	13fb4 <__assert_fail@plt+0x2c84>
   13e08:	mov	r4, #0
   13e0c:	ldr	r0, [sp, #68]	; 0x44
   13e10:	b	13c1c <__assert_fail@plt+0x28ec>
   13e14:	ldr	r8, [sp, #12]
   13e18:	mov	fp, r3
   13e1c:	ldr	r3, [sp, #36]	; 0x24
   13e20:	cmp	r3, #0
   13e24:	bne	13ce8 <__assert_fail@plt+0x29b8>
   13e28:	ldr	r3, [r6, #48]	; 0x30
   13e2c:	tst	r3, #4
   13e30:	beq	13e60 <__assert_fail@plt+0x2b30>
   13e34:	ldr	r2, [sp, #4]
   13e38:	ldr	r3, [r6, #36]	; 0x24
   13e3c:	cmp	r9, #0
   13e40:	cmpne	r3, r2
   13e44:	bne	13e54 <__assert_fail@plt+0x2b24>
   13e48:	ldr	r3, [sp, #32]
   13e4c:	sub	r3, r3, #1
   13e50:	str	r3, [sp, #32]
   13e54:	ldr	r2, [sp, #32]
   13e58:	mov	r3, #0
   13e5c:	strb	r3, [r2]
   13e60:	ldr	r2, [sp, #48]	; 0x30
   13e64:	ldr	r3, [sp, #60]	; 0x3c
   13e68:	cmp	r2, #0
   13e6c:	movne	r3, #0
   13e70:	cmp	r3, #0
   13e74:	beq	13eac <__assert_fail@plt+0x2b7c>
   13e78:	ldr	r3, [sp, #40]	; 0x28
   13e7c:	cmp	r9, #0
   13e80:	cmpne	r3, #1
   13e84:	bne	13eb4 <__assert_fail@plt+0x2b84>
   13e88:	ldr	r3, [fp, #48]	; 0x30
   13e8c:	cmp	r3, #0
   13e90:	bne	1409c <__assert_fail@plt+0x2d6c>
   13e94:	mov	r0, r6
   13e98:	bl	1336c <__assert_fail@plt+0x203c>
   13e9c:	adds	r0, r0, #0
   13ea0:	movne	r0, #1
   13ea4:	cmp	r0, #0
   13ea8:	bne	14150 <__assert_fail@plt+0x2e20>
   13eac:	cmp	r9, #0
   13eb0:	beq	14010 <__assert_fail@plt+0x2ce0>
   13eb4:	ldr	r3, [sp, #44]	; 0x2c
   13eb8:	cmp	r3, #0
   13ebc:	bne	13f6c <__assert_fail@plt+0x2c3c>
   13ec0:	ldr	r3, [r6, #44]	; 0x2c
   13ec4:	cmp	r3, #0
   13ec8:	cmpne	r9, #1
   13ecc:	beq	13ab4 <__assert_fail@plt+0x2784>
   13ed0:	mov	r1, r8
   13ed4:	mov	r2, r9
   13ed8:	mov	r0, r6
   13edc:	bl	12e64 <__assert_fail@plt+0x1b34>
   13ee0:	mov	r8, r0
   13ee4:	b	13ab4 <__assert_fail@plt+0x2784>
   13ee8:	ldr	r3, [sl]
   13eec:	ldr	r8, [sp, #12]
   13ef0:	ldr	fp, [sp, #16]
   13ef4:	cmp	r3, #0
   13ef8:	beq	13f14 <__assert_fail@plt+0x2be4>
   13efc:	ldr	r2, [sp, #48]	; 0x30
   13f00:	str	r3, [fp, #32]
   13f04:	orrs	r2, r2, r9
   13f08:	moveq	r3, #4
   13f0c:	movne	r3, #7
   13f10:	strh	r3, [fp, #56]	; 0x38
   13f14:	ldr	r0, [fp, #12]
   13f18:	cmp	r0, #0
   13f1c:	beq	13e1c <__assert_fail@plt+0x2aec>
   13f20:	bl	1130c <closedir@plt>
   13f24:	mov	r3, #0
   13f28:	str	r3, [fp, #12]
   13f2c:	b	13e1c <__assert_fail@plt+0x2aec>
   13f30:	str	r1, [r3, #28]
   13f34:	ldr	r3, [r3, #8]
   13f38:	cmp	r3, #0
   13f3c:	bne	13cf8 <__assert_fail@plt+0x29c8>
   13f40:	b	13d28 <__assert_fail@plt+0x29f8>
   13f44:	mov	r1, r0
   13f48:	ldr	r0, [r6, #24]
   13f4c:	str	r1, [sp, #4]
   13f50:	ldr	r8, [sp, #12]
   13f54:	ldr	fp, [sp, #16]
   13f58:	bl	12d1c <__assert_fail@plt+0x19ec>
   13f5c:	ldr	r1, [sp, #4]
   13f60:	ldr	r5, [sl]
   13f64:	str	r1, [r6, #24]
   13f68:	b	13a78 <__assert_fail@plt+0x2748>
   13f6c:	movw	r3, #11828	; 0x2e34
   13f70:	movt	r3, #1
   13f74:	mov	r1, r8
   13f78:	mov	r2, r9
   13f7c:	mov	r0, r6
   13f80:	str	r3, [r6, #44]	; 0x2c
   13f84:	bl	12e64 <__assert_fail@plt+0x1b34>
   13f88:	mov	r3, #0
   13f8c:	mov	r8, r0
   13f90:	str	r3, [r6, #44]	; 0x2c
   13f94:	b	13ab4 <__assert_fail@plt+0x2784>
   13f98:	movw	r3, #34464	; 0x86a0
   13f9c:	movt	r3, #1
   13fa0:	mov	r2, #1
   13fa4:	str	r3, [sp, #28]
   13fa8:	str	r2, [sp, #60]	; 0x3c
   13fac:	ldr	r3, [r6, #48]	; 0x30
   13fb0:	b	1373c <__assert_fail@plt+0x240c>
   13fb4:	mov	r3, #0
   13fb8:	str	r3, [sp, #60]	; 0x3c
   13fbc:	ldr	r3, [r6, #48]	; 0x30
   13fc0:	b	1373c <__assert_fail@plt+0x240c>
   13fc4:	add	r4, r6, #56	; 0x38
   13fc8:	mov	r2, fp
   13fcc:	mov	r1, r4
   13fd0:	bl	132a0 <__assert_fail@plt+0x1f70>
   13fd4:	mov	r3, #0
   13fd8:	mov	r2, fp
   13fdc:	ldr	r0, [r6, #32]
   13fe0:	ldr	r1, [r6, #48]	; 0x30
   13fe4:	bl	13070 <__assert_fail@plt+0x1d40>
   13fe8:	mov	r2, fp
   13fec:	mov	r1, r4
   13ff0:	ldr	r0, [r6, #48]	; 0x30
   13ff4:	bl	131cc <__assert_fail@plt+0x1e9c>
   13ff8:	subs	r8, r0, #0
   13ffc:	bne	13bd4 <__assert_fail@plt+0x28a4>
   14000:	bl	111ec <__errno_location@plt>
   14004:	mov	r3, #12
   14008:	str	r3, [r0]
   1400c:	b	13ab4 <__assert_fail@plt+0x2784>
   14010:	ldr	r3, [sp, #40]	; 0x28
   14014:	cmp	r3, #3
   14018:	bne	14030 <__assert_fail@plt+0x2d00>
   1401c:	ldrh	r3, [fp, #56]	; 0x38
   14020:	cmp	r3, #4
   14024:	cmpne	r3, #7
   14028:	movne	r3, #6
   1402c:	strhne	r3, [fp, #56]	; 0x38
   14030:	cmp	r8, #0
   14034:	bne	14058 <__assert_fail@plt+0x2d28>
   14038:	b	14078 <__assert_fail@plt+0x2d48>
   1403c:	mov	r0, r3
   14040:	bl	1130c <closedir@plt>
   14044:	mov	r0, r8
   14048:	bl	12d1c <__assert_fail@plt+0x19ec>
   1404c:	cmp	r4, #0
   14050:	beq	14078 <__assert_fail@plt+0x2d48>
   14054:	mov	r8, r4
   14058:	mov	r0, r8
   1405c:	ldr	r4, [r8, #8]
   14060:	ldr	r3, [r8, #12]
   14064:	cmp	r3, #0
   14068:	bne	1403c <__assert_fail@plt+0x2d0c>
   1406c:	bl	12d1c <__assert_fail@plt+0x19ec>
   14070:	cmp	r4, #0
   14074:	bne	14054 <__assert_fail@plt+0x2d24>
   14078:	mov	r8, #0
   1407c:	b	13ab4 <__assert_fail@plt+0x2784>
   14080:	mov	r1, r0
   14084:	mov	r3, #0
   14088:	ldr	r0, [r6, #32]
   1408c:	mov	r2, fp
   14090:	bl	13070 <__assert_fail@plt+0x1d40>
   14094:	strh	r0, [fp, #56]	; 0x38
   14098:	b	13bd4 <__assert_fail@plt+0x28a4>
   1409c:	movw	r3, #56764	; 0xddbc
   140a0:	movt	r3, #1
   140a4:	ldr	r1, [fp, #4]
   140a8:	mvn	r2, #0
   140ac:	mov	r0, r6
   140b0:	bl	13418 <__assert_fail@plt+0x20e8>
   140b4:	adds	r0, r0, #0
   140b8:	movne	r0, #1
   140bc:	b	13ea4 <__assert_fail@plt+0x2b74>
   140c0:	mov	r2, r0
   140c4:	mov	r3, #0
   140c8:	mov	r1, fp
   140cc:	mov	r0, r6
   140d0:	bl	13418 <__assert_fail@plt+0x20e8>
   140d4:	cmp	r0, #0
   140d8:	bne	13c30 <__assert_fail@plt+0x2900>
   140dc:	mov	r3, #1
   140e0:	str	r3, [sp, #60]	; 0x3c
   140e4:	ldr	r3, [r6, #48]	; 0x30
   140e8:	b	1373c <__assert_fail@plt+0x240c>
   140ec:	ldr	r0, [fp, #12]
   140f0:	mov	r8, #0
   140f4:	bl	1130c <closedir@plt>
   140f8:	ldr	r3, [sp, #40]	; 0x28
   140fc:	str	r8, [fp, #12]
   14100:	cmp	r3, #3
   14104:	bne	14078 <__assert_fail@plt+0x2d48>
   14108:	mov	r3, #4
   1410c:	strh	r3, [fp, #56]	; 0x38
   14110:	bl	111ec <__errno_location@plt>
   14114:	ldr	r3, [r0]
   14118:	str	r3, [fp, #32]
   1411c:	b	13ab4 <__assert_fail@plt+0x2784>
   14120:	bl	112f4 <close@plt>
   14124:	ldr	r3, [r6, #48]	; 0x30
   14128:	b	13c78 <__assert_fail@plt+0x2948>
   1412c:	mov	r2, #3
   14130:	movw	r1, #1030	; 0x406
   14134:	bl	1c760 <__assert_fail@plt+0xb430>
   14138:	str	r0, [sp, #68]	; 0x44
   1413c:	b	13c28 <__assert_fail@plt+0x28f8>
   14140:	ldr	r3, [sp, #40]	; 0x28
   14144:	cmp	r3, #3
   14148:	bne	14078 <__assert_fail@plt+0x2d48>
   1414c:	b	14108 <__assert_fail@plt+0x2dd8>
   14150:	ldr	r3, [r6, #48]	; 0x30
   14154:	mov	r2, #7
   14158:	cmp	r8, #0
   1415c:	strh	r2, [fp, #56]	; 0x38
   14160:	orr	r3, r3, #8192	; 0x2000
   14164:	str	r3, [r6, #48]	; 0x30
   14168:	bne	1418c <__assert_fail@plt+0x2e5c>
   1416c:	b	14078 <__assert_fail@plt+0x2d48>
   14170:	mov	r0, r3
   14174:	bl	1130c <closedir@plt>
   14178:	mov	r0, r8
   1417c:	bl	12d1c <__assert_fail@plt+0x19ec>
   14180:	cmp	r4, #0
   14184:	beq	14078 <__assert_fail@plt+0x2d48>
   14188:	mov	r8, r4
   1418c:	mov	r0, r8
   14190:	ldr	r4, [r8, #8]
   14194:	ldr	r3, [r8, #12]
   14198:	cmp	r3, #0
   1419c:	bne	14170 <__assert_fail@plt+0x2e40>
   141a0:	bl	12d1c <__assert_fail@plt+0x19ec>
   141a4:	cmp	r4, #0
   141a8:	bne	14188 <__assert_fail@plt+0x2e58>
   141ac:	b	14078 <__assert_fail@plt+0x2d48>
   141b0:	movw	r3, #40864	; 0x9fa0
   141b4:	cmp	r0, r3
   141b8:	beq	141cc <__assert_fail@plt+0x2e9c>
   141bc:	movw	r3, #16719	; 0x414f
   141c0:	movt	r3, #21318	; 0x5346
   141c4:	cmp	r0, r3
   141c8:	bne	13dfc <__assert_fail@plt+0x2acc>
   141cc:	ldr	r0, [sp, #68]	; 0x44
   141d0:	b	13c0c <__assert_fail@plt+0x28dc>
   141d4:	ldr	r8, [sp, #12]
   141d8:	mov	r0, r4
   141dc:	ldr	fp, [sp, #16]
   141e0:	bl	12d1c <__assert_fail@plt+0x19ec>
   141e4:	cmp	r8, #0
   141e8:	bne	1420c <__assert_fail@plt+0x2edc>
   141ec:	b	1422c <__assert_fail@plt+0x2efc>
   141f0:	mov	r0, r3
   141f4:	bl	1130c <closedir@plt>
   141f8:	mov	r0, r8
   141fc:	bl	12d1c <__assert_fail@plt+0x19ec>
   14200:	cmp	r4, #0
   14204:	beq	1422c <__assert_fail@plt+0x2efc>
   14208:	mov	r8, r4
   1420c:	mov	r0, r8
   14210:	ldr	r4, [r8, #8]
   14214:	ldr	r3, [r8, #12]
   14218:	cmp	r3, #0
   1421c:	bne	141f0 <__assert_fail@plt+0x2ec0>
   14220:	bl	12d1c <__assert_fail@plt+0x19ec>
   14224:	cmp	r4, #0
   14228:	bne	14208 <__assert_fail@plt+0x2ed8>
   1422c:	ldr	r0, [fp, #12]
   14230:	mov	r8, #0
   14234:	bl	1130c <closedir@plt>
   14238:	ldr	r3, [r6, #48]	; 0x30
   1423c:	mov	r1, #7
   14240:	mov	r2, #36	; 0x24
   14244:	str	r8, [fp, #12]
   14248:	strh	r1, [fp, #56]	; 0x38
   1424c:	orr	r3, r3, #8192	; 0x2000
   14250:	str	r3, [r6, #48]	; 0x30
   14254:	str	r2, [sl]
   14258:	b	13ab4 <__assert_fail@plt+0x2784>
   1425c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14260:	strd	r6, [sp, #8]
   14264:	bic	r7, r1, #4080	; 0xff0
   14268:	bic	r7, r7, #15
   1426c:	strd	r8, [sp, #16]
   14270:	strd	sl, [sp, #24]
   14274:	cmp	r7, #0
   14278:	str	lr, [sp, #32]
   1427c:	sub	sp, sp, #36	; 0x24
   14280:	str	r2, [sp, #12]
   14284:	bne	146f0 <__assert_fail@plt+0x33c0>
   14288:	and	r3, r1, #516	; 0x204
   1428c:	mov	r5, r1
   14290:	cmp	r3, #516	; 0x204
   14294:	beq	14684 <__assert_fail@plt+0x3354>
   14298:	ands	r7, r1, #18
   1429c:	beq	14684 <__assert_fail@plt+0x3354>
   142a0:	mov	r9, r0
   142a4:	mov	r1, #96	; 0x60
   142a8:	mov	r0, #1
   142ac:	bl	1c3fc <__assert_fail@plt+0xb0cc>
   142b0:	subs	r7, r0, #0
   142b4:	beq	145fc <__assert_fail@plt+0x32cc>
   142b8:	ldr	r3, [sp, #12]
   142bc:	tst	r5, #2
   142c0:	mvn	r2, #99	; 0x63
   142c4:	streq	r5, [r7, #48]	; 0x30
   142c8:	str	r2, [r7, #32]
   142cc:	str	r3, [r7, #44]	; 0x2c
   142d0:	bicne	r3, r5, #512	; 0x200
   142d4:	orrne	r3, r3, #4
   142d8:	strne	r3, [r7, #48]	; 0x30
   142dc:	ldr	r3, [r9]
   142e0:	cmp	r3, #0
   142e4:	beq	1473c <__assert_fail@plt+0x340c>
   142e8:	mov	r6, r9
   142ec:	mov	r4, #0
   142f0:	mov	r0, r3
   142f4:	bl	111bc <strlen@plt>
   142f8:	ldr	r3, [r6, #4]!
   142fc:	cmp	r4, r0
   14300:	movcc	r4, r0
   14304:	cmp	r3, #0
   14308:	bne	142f0 <__assert_fail@plt+0x2fc0>
   1430c:	add	r4, r4, #1
   14310:	cmp	r4, #4096	; 0x1000
   14314:	movcc	r4, #4096	; 0x1000
   14318:	ldr	r0, [r7, #24]
   1431c:	ldr	r3, [r7, #36]	; 0x24
   14320:	add	r1, r3, #256	; 0x100
   14324:	add	r1, r1, r4
   14328:	cmp	r3, r1
   1432c:	bhi	14704 <__assert_fail@plt+0x33d4>
   14330:	str	r1, [r7, #36]	; 0x24
   14334:	bl	1c4ac <__assert_fail@plt+0xb17c>
   14338:	subs	r4, r0, #0
   1433c:	beq	14788 <__assert_fail@plt+0x3458>
   14340:	ldr	r3, [r9]
   14344:	str	r4, [r7, #24]
   14348:	cmp	r3, #0
   1434c:	str	r3, [sp, #16]
   14350:	beq	146dc <__assert_fail@plt+0x33ac>
   14354:	mov	r0, #176	; 0xb0
   14358:	bl	1c470 <__assert_fail@plt+0xb140>
   1435c:	subs	ip, r0, #0
   14360:	str	ip, [sp, #16]
   14364:	beq	1466c <__assert_fail@plt+0x333c>
   14368:	ldr	r2, [sp, #12]
   1436c:	mov	r3, #0
   14370:	mvn	r1, #0
   14374:	ldr	r0, [r7, #24]
   14378:	str	r3, [ip, #12]
   1437c:	str	r3, [ip, #16]
   14380:	cmp	r2, r3
   14384:	mov	r2, #196608	; 0x30000
   14388:	str	r3, [ip, #20]
   1438c:	str	r7, [ip, #44]	; 0x2c
   14390:	str	r3, [ip, #32]
   14394:	str	r3, [ip, #52]	; 0x34
   14398:	strb	r3, [ip, #168]	; 0xa8
   1439c:	moveq	r3, #1
   143a0:	str	r0, [ip, #28]
   143a4:	streq	r3, [sp, #24]
   143a8:	str	r1, [ip, #48]	; 0x30
   143ac:	str	r2, [ip, #58]	; 0x3a
   143b0:	ldr	fp, [r9]
   143b4:	beq	143c4 <__assert_fail@plt+0x3094>
   143b8:	ldr	r3, [r7, #48]	; 0x30
   143bc:	ubfx	r3, r3, #10, #1
   143c0:	str	r3, [sp, #24]
   143c4:	cmp	fp, #0
   143c8:	beq	147b4 <__assert_fail@plt+0x3484>
   143cc:	eor	r5, r5, #2048	; 0x800
   143d0:	mov	r3, #0
   143d4:	ubfx	r2, r5, #11, #1
   143d8:	mov	r6, r3
   143dc:	mov	sl, r3
   143e0:	mov	r8, r3
   143e4:	str	r2, [sp, #20]
   143e8:	str	r3, [sp, #28]
   143ec:	b	14428 <__assert_fail@plt+0x30f8>
   143f0:	ldr	r2, [sp, #12]
   143f4:	mov	r3, #11
   143f8:	mov	r0, #2
   143fc:	mov	r1, #0
   14400:	strh	r3, [r4, #56]	; 0x38
   14404:	strd	r0, [r4, #112]	; 0x70
   14408:	cmp	r2, #0
   1440c:	beq	146c8 <__assert_fail@plt+0x3398>
   14410:	str	r8, [r4, #8]
   14414:	mov	r8, r4
   14418:	ldr	fp, [r9, #4]!
   1441c:	add	sl, sl, #1
   14420:	cmp	fp, #0
   14424:	beq	14524 <__assert_fail@plt+0x31f4>
   14428:	mov	r0, fp
   1442c:	bl	111bc <strlen@plt>
   14430:	ldr	r3, [sp, #20]
   14434:	mov	r5, r0
   14438:	cmp	r0, #2
   1443c:	movls	r3, #0
   14440:	andhi	r3, r3, #1
   14444:	cmp	r3, #0
   14448:	bne	14694 <__assert_fail@plt+0x3364>
   1444c:	add	r0, r5, #176	; 0xb0
   14450:	bic	r0, r0, #7
   14454:	bl	1c470 <__assert_fail@plt+0xb140>
   14458:	subs	r4, r0, #0
   1445c:	beq	1461c <__assert_fail@plt+0x32ec>
   14460:	add	r3, r4, #168	; 0xa8
   14464:	mov	r1, fp
   14468:	mov	r0, r3
   1446c:	mov	r2, r5
   14470:	bl	11078 <memcpy@plt>
   14474:	add	ip, r4, r5
   14478:	ldr	r2, [sp, #24]
   1447c:	mov	r3, r0
   14480:	cmp	r8, #0
   14484:	mov	r1, #3
   14488:	strb	r6, [ip, #168]	; 0xa8
   1448c:	moveq	r2, #0
   14490:	ldr	ip, [sp, #16]
   14494:	ldr	r0, [r7, #24]
   14498:	cmp	r2, #0
   1449c:	str	ip, [r4, #4]
   144a0:	str	r6, [r4, #12]
   144a4:	str	r6, [r4, #16]
   144a8:	str	r6, [r4, #20]
   144ac:	str	r3, [r4, #24]
   144b0:	str	r0, [r4, #28]
   144b4:	str	r6, [r4, #32]
   144b8:	str	r7, [r4, #44]	; 0x2c
   144bc:	str	r6, [r4, #48]	; 0x30
   144c0:	str	r5, [r4, #52]	; 0x34
   144c4:	strh	r6, [r4, #58]	; 0x3a
   144c8:	strh	r1, [r4, #60]	; 0x3c
   144cc:	bne	143f0 <__assert_fail@plt+0x30c0>
   144d0:	mov	r3, r2
   144d4:	mov	r2, r4
   144d8:	ldr	r0, [r7, #32]
   144dc:	ldr	r1, [r7, #48]	; 0x30
   144e0:	bl	13070 <__assert_fail@plt+0x1d40>
   144e4:	ldr	r3, [sp, #12]
   144e8:	strh	r0, [r4, #56]	; 0x38
   144ec:	cmp	r3, #0
   144f0:	bne	14410 <__assert_fail@plt+0x30e0>
   144f4:	cmp	r8, #0
   144f8:	str	r3, [r4, #8]
   144fc:	moveq	r8, r4
   14500:	streq	r4, [sp, #28]
   14504:	beq	14418 <__assert_fail@plt+0x30e8>
   14508:	ldr	r3, [sp, #28]
   1450c:	str	r4, [sp, #28]
   14510:	str	r4, [r3, #8]
   14514:	ldr	fp, [r9, #4]!
   14518:	add	sl, sl, #1
   1451c:	cmp	fp, #0
   14520:	bne	14428 <__assert_fail@plt+0x30f8>
   14524:	ldr	r3, [sp, #12]
   14528:	cmp	r3, #0
   1452c:	cmpne	sl, #1
   14530:	bls	14548 <__assert_fail@plt+0x3218>
   14534:	mov	r1, r8
   14538:	mov	r2, sl
   1453c:	mov	r0, r7
   14540:	bl	12e64 <__assert_fail@plt+0x1b34>
   14544:	mov	r8, r0
   14548:	mov	r0, #176	; 0xb0
   1454c:	bl	1c470 <__assert_fail@plt+0xb140>
   14550:	cmp	r0, #0
   14554:	streq	r0, [r7]
   14558:	beq	1461c <__assert_fail@plt+0x32ec>
   1455c:	ldr	lr, [r7, #24]
   14560:	movw	r4, #258	; 0x102
   14564:	mov	r1, #0
   14568:	mov	ip, #1
   1456c:	mov	r2, #9
   14570:	str	r0, [r7]
   14574:	ldr	r3, [r7, #48]	; 0x30
   14578:	str	r8, [r0, #8]
   1457c:	str	r1, [r0, #12]
   14580:	str	r1, [r0, #16]
   14584:	str	r1, [r0, #20]
   14588:	tst	r4, r3
   1458c:	mov	r3, #3
   14590:	str	lr, [r0, #28]
   14594:	str	r1, [r0, #32]
   14598:	str	r7, [r0, #44]	; 0x2c
   1459c:	str	ip, [r0, #48]	; 0x30
   145a0:	str	r1, [r0, #52]	; 0x34
   145a4:	str	r2, [r0, #56]	; 0x38
   145a8:	strh	r3, [r0, #60]	; 0x3c
   145ac:	strb	r1, [r0, #168]	; 0xa8
   145b0:	beq	14720 <__assert_fail@plt+0x33f0>
   145b4:	movw	r0, #11548	; 0x2d1c
   145b8:	movt	r0, #1
   145bc:	movw	r3, #11644	; 0x2d7c
   145c0:	movt	r3, #1
   145c4:	movw	r2, #11708	; 0x2dbc
   145c8:	movt	r2, #1
   145cc:	str	r0, [sp]
   145d0:	mov	r0, #31
   145d4:	bl	15d64 <__assert_fail@plt+0x4a34>
   145d8:	cmp	r0, #0
   145dc:	str	r0, [r7, #56]	; 0x38
   145e0:	beq	1461c <__assert_fail@plt+0x32ec>
   145e4:	ldr	r3, [r7, #48]	; 0x30
   145e8:	tst	r3, #516	; 0x204
   145ec:	beq	14744 <__assert_fail@plt+0x3414>
   145f0:	mvn	r1, #0
   145f4:	add	r0, r7, #60	; 0x3c
   145f8:	bl	16b30 <__assert_fail@plt+0x5800>
   145fc:	mov	r0, r7
   14600:	add	sp, sp, #36	; 0x24
   14604:	ldrd	r4, [sp]
   14608:	ldrd	r6, [sp, #8]
   1460c:	ldrd	r8, [sp, #16]
   14610:	ldrd	sl, [sp, #24]
   14614:	add	sp, sp, #32
   14618:	pop	{pc}		; (ldr pc, [sp], #4)
   1461c:	cmp	r8, #0
   14620:	bne	14644 <__assert_fail@plt+0x3314>
   14624:	b	14664 <__assert_fail@plt+0x3334>
   14628:	mov	r0, r3
   1462c:	bl	1130c <closedir@plt>
   14630:	mov	r0, r8
   14634:	bl	12d1c <__assert_fail@plt+0x19ec>
   14638:	cmp	r4, #0
   1463c:	beq	14664 <__assert_fail@plt+0x3334>
   14640:	mov	r8, r4
   14644:	mov	r0, r8
   14648:	ldr	r4, [r8, #8]
   1464c:	ldr	r3, [r8, #12]
   14650:	cmp	r3, #0
   14654:	bne	14628 <__assert_fail@plt+0x32f8>
   14658:	bl	12d1c <__assert_fail@plt+0x19ec>
   1465c:	cmp	r4, #0
   14660:	bne	14640 <__assert_fail@plt+0x3310>
   14664:	ldr	r0, [sp, #16]
   14668:	bl	12d1c <__assert_fail@plt+0x19ec>
   1466c:	ldr	r0, [r7, #24]
   14670:	bl	12d1c <__assert_fail@plt+0x19ec>
   14674:	mov	r0, r7
   14678:	mov	r7, #0
   1467c:	bl	12d1c <__assert_fail@plt+0x19ec>
   14680:	b	145fc <__assert_fail@plt+0x32cc>
   14684:	bl	111ec <__errno_location@plt>
   14688:	mov	r3, #22
   1468c:	str	r3, [r0]
   14690:	b	145fc <__assert_fail@plt+0x32cc>
   14694:	sub	r3, r0, #1
   14698:	ldrb	r2, [fp, r3]
   1469c:	add	r3, fp, r3
   146a0:	cmp	r2, #47	; 0x2f
   146a4:	bne	1444c <__assert_fail@plt+0x311c>
   146a8:	ldrb	r2, [r3, #-1]!
   146ac:	cmp	r2, #47	; 0x2f
   146b0:	bne	1444c <__assert_fail@plt+0x311c>
   146b4:	sub	r5, r5, #1
   146b8:	cmp	r5, #1
   146bc:	bne	146a8 <__assert_fail@plt+0x3378>
   146c0:	mov	r0, #176	; 0xb0
   146c4:	b	14454 <__assert_fail@plt+0x3124>
   146c8:	ldr	r3, [sp, #28]
   146cc:	str	r2, [r4, #8]
   146d0:	str	r4, [sp, #28]
   146d4:	str	r4, [r3, #8]
   146d8:	b	14514 <__assert_fail@plt+0x31e4>
   146dc:	ldr	r3, [sp, #12]
   146e0:	cmp	r3, #0
   146e4:	beq	147ac <__assert_fail@plt+0x347c>
   146e8:	ldr	fp, [sp, #16]
   146ec:	b	143b8 <__assert_fail@plt+0x3088>
   146f0:	bl	111ec <__errno_location@plt>
   146f4:	mov	r3, #22
   146f8:	mov	r7, #0
   146fc:	str	r3, [r0]
   14700:	b	145fc <__assert_fail@plt+0x32cc>
   14704:	bl	12d1c <__assert_fail@plt+0x19ec>
   14708:	mov	r3, #0
   1470c:	str	r3, [r7, #24]
   14710:	bl	111ec <__errno_location@plt>
   14714:	mov	r3, #36	; 0x24
   14718:	str	r3, [r0]
   1471c:	b	14674 <__assert_fail@plt+0x3344>
   14720:	mov	r0, #32
   14724:	bl	1c470 <__assert_fail@plt+0xb140>
   14728:	cmp	r0, #0
   1472c:	str	r0, [r7, #56]	; 0x38
   14730:	beq	1461c <__assert_fail@plt+0x32ec>
   14734:	bl	1c58c <__assert_fail@plt+0xb25c>
   14738:	b	145e4 <__assert_fail@plt+0x32b4>
   1473c:	mov	r4, #4096	; 0x1000
   14740:	b	14318 <__assert_fail@plt+0x2fe8>
   14744:	lsl	r2, r3, #11
   14748:	tst	r3, #512	; 0x200
   1474c:	and	r2, r2, #32768	; 0x8000
   14750:	orr	r2, r2, #540672	; 0x84000
   14754:	orr	r2, r2, #2304	; 0x900
   14758:	beq	14798 <__assert_fail@plt+0x3468>
   1475c:	movw	r1, #56768	; 0xddc0
   14760:	movt	r1, #1
   14764:	ldr	r0, [r7, #32]
   14768:	bl	16c74 <__assert_fail@plt+0x5944>
   1476c:	cmp	r0, #0
   14770:	str	r0, [r7, #28]
   14774:	bge	145f0 <__assert_fail@plt+0x32c0>
   14778:	ldr	r3, [r7, #48]	; 0x30
   1477c:	orr	r3, r3, #4
   14780:	str	r3, [r7, #48]	; 0x30
   14784:	b	145f0 <__assert_fail@plt+0x32c0>
   14788:	ldr	r0, [r7, #24]
   1478c:	bl	12d1c <__assert_fail@plt+0x19ec>
   14790:	str	r4, [r7, #24]
   14794:	b	14674 <__assert_fail@plt+0x3344>
   14798:	mov	r1, r2
   1479c:	movw	r0, #56768	; 0xddc0
   147a0:	movt	r0, #1
   147a4:	bl	1c948 <__assert_fail@plt+0xb618>
   147a8:	b	1476c <__assert_fail@plt+0x343c>
   147ac:	ldr	r8, [sp, #16]
   147b0:	b	14548 <__assert_fail@plt+0x3218>
   147b4:	mov	r8, fp
   147b8:	b	14548 <__assert_fail@plt+0x3218>
   147bc:	ldr	r3, [r0]
   147c0:	strd	r4, [sp, #-16]!
   147c4:	str	r6, [sp, #8]
   147c8:	mov	r6, r0
   147cc:	str	lr, [sp, #12]
   147d0:	cmp	r3, #0
   147d4:	beq	14828 <__assert_fail@plt+0x34f8>
   147d8:	ldr	r2, [r3, #48]	; 0x30
   147dc:	cmp	r2, #0
   147e0:	bge	147fc <__assert_fail@plt+0x34cc>
   147e4:	b	149ac <__assert_fail@plt+0x367c>
   147e8:	bl	12d1c <__assert_fail@plt+0x19ec>
   147ec:	ldr	r3, [r4, #48]	; 0x30
   147f0:	cmp	r3, #0
   147f4:	blt	14820 <__assert_fail@plt+0x34f0>
   147f8:	mov	r3, r4
   147fc:	ldr	r4, [r3, #8]
   14800:	mov	r0, r3
   14804:	cmp	r4, #0
   14808:	bne	147e8 <__assert_fail@plt+0x34b8>
   1480c:	ldr	r4, [r3, #4]
   14810:	bl	12d1c <__assert_fail@plt+0x19ec>
   14814:	ldr	r3, [r4, #48]	; 0x30
   14818:	cmp	r3, #0
   1481c:	bge	147f8 <__assert_fail@plt+0x34c8>
   14820:	mov	r0, r4
   14824:	bl	12d1c <__assert_fail@plt+0x19ec>
   14828:	ldr	r4, [r6, #4]
   1482c:	cmp	r4, #0
   14830:	bne	14854 <__assert_fail@plt+0x3524>
   14834:	b	14874 <__assert_fail@plt+0x3544>
   14838:	mov	r0, r3
   1483c:	bl	1130c <closedir@plt>
   14840:	mov	r0, r4
   14844:	bl	12d1c <__assert_fail@plt+0x19ec>
   14848:	cmp	r5, #0
   1484c:	beq	14874 <__assert_fail@plt+0x3544>
   14850:	mov	r4, r5
   14854:	mov	r0, r4
   14858:	ldr	r5, [r4, #8]
   1485c:	ldr	r3, [r4, #12]
   14860:	cmp	r3, #0
   14864:	bne	14838 <__assert_fail@plt+0x3508>
   14868:	bl	12d1c <__assert_fail@plt+0x19ec>
   1486c:	cmp	r5, #0
   14870:	bne	14850 <__assert_fail@plt+0x3520>
   14874:	ldr	r0, [r6, #8]
   14878:	bl	12d1c <__assert_fail@plt+0x19ec>
   1487c:	ldr	r0, [r6, #24]
   14880:	bl	12d1c <__assert_fail@plt+0x19ec>
   14884:	ldr	r3, [r6, #48]	; 0x30
   14888:	tst	r3, #512	; 0x200
   1488c:	beq	1493c <__assert_fail@plt+0x360c>
   14890:	ldr	r0, [r6, #32]
   14894:	cmp	r0, #0
   14898:	bge	14924 <__assert_fail@plt+0x35f4>
   1489c:	mov	r5, #0
   148a0:	add	r4, r6, #60	; 0x3c
   148a4:	b	148b4 <__assert_fail@plt+0x3584>
   148a8:	bl	16bac <__assert_fail@plt+0x587c>
   148ac:	cmp	r0, #0
   148b0:	bge	1491c <__assert_fail@plt+0x35ec>
   148b4:	mov	r0, r4
   148b8:	bl	16b5c <__assert_fail@plt+0x582c>
   148bc:	cmp	r0, #0
   148c0:	mov	r0, r4
   148c4:	beq	148a8 <__assert_fail@plt+0x3578>
   148c8:	ldr	r0, [r6, #52]	; 0x34
   148cc:	cmp	r0, #0
   148d0:	beq	148d8 <__assert_fail@plt+0x35a8>
   148d4:	bl	160a4 <__assert_fail@plt+0x4d74>
   148d8:	ldr	r3, [r6, #48]	; 0x30
   148dc:	movw	r2, #258	; 0x102
   148e0:	ldr	r0, [r6, #56]	; 0x38
   148e4:	tst	r2, r3
   148e8:	beq	14974 <__assert_fail@plt+0x3644>
   148ec:	cmp	r0, #0
   148f0:	beq	148f8 <__assert_fail@plt+0x35c8>
   148f4:	bl	160a4 <__assert_fail@plt+0x4d74>
   148f8:	mov	r0, r6
   148fc:	bl	12d1c <__assert_fail@plt+0x19ec>
   14900:	cmp	r5, #0
   14904:	bne	149b4 <__assert_fail@plt+0x3684>
   14908:	mov	r0, r5
   1490c:	ldrd	r4, [sp]
   14910:	ldr	r6, [sp, #8]
   14914:	add	sp, sp, #12
   14918:	pop	{pc}		; (ldr pc, [sp], #4)
   1491c:	bl	112f4 <close@plt>
   14920:	b	148b4 <__assert_fail@plt+0x3584>
   14924:	bl	112f4 <close@plt>
   14928:	cmp	r0, #0
   1492c:	beq	1489c <__assert_fail@plt+0x356c>
   14930:	bl	111ec <__errno_location@plt>
   14934:	ldr	r5, [r0]
   14938:	b	148a0 <__assert_fail@plt+0x3570>
   1493c:	tst	r3, #4
   14940:	bne	1489c <__assert_fail@plt+0x356c>
   14944:	ldr	r0, [r6, #28]
   14948:	bl	112a0 <fchdir@plt>
   1494c:	cmp	r0, #0
   14950:	bne	1497c <__assert_fail@plt+0x364c>
   14954:	ldr	r0, [r6, #28]
   14958:	bl	112f4 <close@plt>
   1495c:	cmp	r0, #0
   14960:	beq	1489c <__assert_fail@plt+0x356c>
   14964:	bl	111ec <__errno_location@plt>
   14968:	mov	r4, r0
   1496c:	ldr	r5, [r4]
   14970:	b	148a0 <__assert_fail@plt+0x3570>
   14974:	bl	12d1c <__assert_fail@plt+0x19ec>
   14978:	b	148f8 <__assert_fail@plt+0x35c8>
   1497c:	bl	111ec <__errno_location@plt>
   14980:	ldr	r5, [r0]
   14984:	mov	r4, r0
   14988:	ldr	r0, [r6, #28]
   1498c:	bl	112f4 <close@plt>
   14990:	adds	r3, r0, #0
   14994:	movne	r3, #1
   14998:	cmp	r5, #0
   1499c:	movne	r3, #0
   149a0:	cmp	r3, #0
   149a4:	beq	148a0 <__assert_fail@plt+0x3570>
   149a8:	b	1496c <__assert_fail@plt+0x363c>
   149ac:	mov	r4, r3
   149b0:	b	14820 <__assert_fail@plt+0x34f0>
   149b4:	bl	111ec <__errno_location@plt>
   149b8:	str	r5, [r0]
   149bc:	mvn	r5, #0
   149c0:	b	14908 <__assert_fail@plt+0x35d8>
   149c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   149c8:	ldr	r4, [r0]
   149cc:	strd	r6, [sp, #8]
   149d0:	str	r8, [sp, #16]
   149d4:	str	lr, [sp, #20]
   149d8:	sub	sp, sp, #8
   149dc:	cmp	r4, #0
   149e0:	beq	14bf0 <__assert_fail@plt+0x38c0>
   149e4:	ldr	r1, [r0, #48]	; 0x30
   149e8:	ands	r3, r1, #8192	; 0x2000
   149ec:	bne	14bf0 <__assert_fail@plt+0x38c0>
   149f0:	ldrh	r2, [r4, #60]	; 0x3c
   149f4:	mov	r8, r0
   149f8:	mov	r0, #3
   149fc:	strh	r0, [r4, #60]	; 0x3c
   14a00:	cmp	r2, #1
   14a04:	beq	14e48 <__assert_fail@plt+0x3b18>
   14a08:	cmp	r2, #2
   14a0c:	ldrh	r3, [r4, #56]	; 0x38
   14a10:	beq	14b10 <__assert_fail@plt+0x37e0>
   14a14:	cmp	r3, #1
   14a18:	bne	14a48 <__assert_fail@plt+0x3718>
   14a1c:	b	14c10 <__assert_fail@plt+0x38e0>
   14a20:	mov	r0, r4
   14a24:	str	r5, [r8]
   14a28:	bl	12d1c <__assert_fail@plt+0x19ec>
   14a2c:	ldr	r4, [r5, #48]	; 0x30
   14a30:	cmp	r4, #0
   14a34:	beq	14c90 <__assert_fail@plt+0x3960>
   14a38:	ldrh	r3, [r5, #60]	; 0x3c
   14a3c:	mov	r4, r5
   14a40:	cmp	r3, #4
   14a44:	bne	14d64 <__assert_fail@plt+0x3a34>
   14a48:	ldr	r5, [r4, #8]
   14a4c:	cmp	r5, #0
   14a50:	bne	14a20 <__assert_fail@plt+0x36f0>
   14a54:	ldr	r6, [r4, #4]
   14a58:	ldr	r3, [r6, #12]
   14a5c:	cmp	r3, #0
   14a60:	bne	14fc0 <__assert_fail@plt+0x3c90>
   14a64:	mov	r0, r4
   14a68:	str	r6, [r8]
   14a6c:	bl	12d1c <__assert_fail@plt+0x19ec>
   14a70:	ldr	r3, [r6, #48]	; 0x30
   14a74:	cmn	r3, #1
   14a78:	beq	14fa0 <__assert_fail@plt+0x3c70>
   14a7c:	ldrh	r3, [r6, #56]	; 0x38
   14a80:	cmp	r3, #11
   14a84:	beq	14e44 <__assert_fail@plt+0x3b14>
   14a88:	ldr	r2, [r8, #24]
   14a8c:	mov	r1, #0
   14a90:	ldr	r3, [r6, #40]	; 0x28
   14a94:	strb	r1, [r2, r3]
   14a98:	ldr	r3, [r6, #48]	; 0x30
   14a9c:	cmp	r3, r1
   14aa0:	beq	14bbc <__assert_fail@plt+0x388c>
   14aa4:	ldrh	r3, [r6, #58]	; 0x3a
   14aa8:	tst	r3, #2
   14aac:	beq	14efc <__assert_fail@plt+0x3bcc>
   14ab0:	ldr	r3, [r8, #48]	; 0x30
   14ab4:	ldr	r4, [r6, #36]	; 0x24
   14ab8:	tst	r3, #4
   14abc:	bne	14b04 <__assert_fail@plt+0x37d4>
   14ac0:	tst	r3, #512	; 0x200
   14ac4:	beq	1509c <__assert_fail@plt+0x3d6c>
   14ac8:	ldr	r1, [r8, #32]
   14acc:	sub	r3, r4, r1
   14ad0:	cmn	r1, #100	; 0x64
   14ad4:	clz	r3, r3
   14ad8:	lsr	r3, r3, #5
   14adc:	moveq	r3, #0
   14ae0:	cmp	r3, #0
   14ae4:	bne	14e44 <__assert_fail@plt+0x3b14>
   14ae8:	add	r0, r8, #60	; 0x3c
   14aec:	bl	16b64 <__assert_fail@plt+0x5834>
   14af0:	cmp	r0, #0
   14af4:	blt	14afc <__assert_fail@plt+0x37cc>
   14af8:	bl	112f4 <close@plt>
   14afc:	str	r4, [r8, #32]
   14b00:	ldr	r4, [r6, #36]	; 0x24
   14b04:	mov	r0, r4
   14b08:	bl	112f4 <close@plt>
   14b0c:	b	14f04 <__assert_fail@plt+0x3bd4>
   14b10:	sub	r2, r3, #12
   14b14:	cmp	r2, #1
   14b18:	bls	14e00 <__assert_fail@plt+0x3ad0>
   14b1c:	cmp	r3, #1
   14b20:	bne	14a48 <__assert_fail@plt+0x3718>
   14b24:	tst	r1, #64	; 0x40
   14b28:	beq	14b40 <__assert_fail@plt+0x3810>
   14b2c:	ldrd	r2, [r8, #16]
   14b30:	ldrd	r6, [r4, #64]	; 0x40
   14b34:	cmp	r7, r3
   14b38:	cmpeq	r6, r2
   14b3c:	bne	14c18 <__assert_fail@plt+0x38e8>
   14b40:	ldr	r5, [r8, #4]
   14b44:	cmp	r5, #0
   14b48:	beq	14ea8 <__assert_fail@plt+0x3b78>
   14b4c:	tst	r1, #4096	; 0x1000
   14b50:	bne	14e5c <__assert_fail@plt+0x3b2c>
   14b54:	mvn	r2, #0
   14b58:	mov	r1, r4
   14b5c:	ldr	r3, [r4, #24]
   14b60:	mov	r0, r8
   14b64:	bl	13418 <__assert_fail@plt+0x20e8>
   14b68:	cmp	r0, #0
   14b6c:	beq	14f88 <__assert_fail@plt+0x3c58>
   14b70:	bl	111ec <__errno_location@plt>
   14b74:	ldrh	r3, [r4, #58]	; 0x3a
   14b78:	ldr	r2, [r0]
   14b7c:	orr	r3, r3, #1
   14b80:	str	r2, [r4, #32]
   14b84:	strh	r3, [r4, #58]	; 0x3a
   14b88:	ldr	r4, [r8, #4]
   14b8c:	cmp	r4, #0
   14b90:	beq	14bb0 <__assert_fail@plt+0x3880>
   14b94:	mov	r3, r4
   14b98:	ldr	r2, [r3, #4]
   14b9c:	ldr	r2, [r2, #24]
   14ba0:	str	r2, [r3, #24]
   14ba4:	ldr	r3, [r3, #8]
   14ba8:	cmp	r3, #0
   14bac:	bne	14b98 <__assert_fail@plt+0x3868>
   14bb0:	mov	r3, #0
   14bb4:	str	r3, [r8, #4]
   14bb8:	b	14d6c <__assert_fail@plt+0x3a3c>
   14bbc:	mov	r0, r8
   14bc0:	bl	1336c <__assert_fail@plt+0x203c>
   14bc4:	cmp	r0, #0
   14bc8:	beq	14f04 <__assert_fail@plt+0x3bd4>
   14bcc:	bl	111ec <__errno_location@plt>
   14bd0:	ldr	r3, [r8, #48]	; 0x30
   14bd4:	ldr	r2, [r0]
   14bd8:	orr	r0, r3, #8192	; 0x2000
   14bdc:	ldrh	r3, [r6, #56]	; 0x38
   14be0:	str	r2, [r6, #32]
   14be4:	str	r0, [r8, #48]	; 0x30
   14be8:	cmp	r3, #2
   14bec:	bne	14f18 <__assert_fail@plt+0x3be8>
   14bf0:	mov	r4, #0
   14bf4:	mov	r0, r4
   14bf8:	add	sp, sp, #8
   14bfc:	ldrd	r4, [sp]
   14c00:	ldrd	r6, [sp, #8]
   14c04:	ldr	r8, [sp, #16]
   14c08:	add	sp, sp, #20
   14c0c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c10:	cmp	r2, #4
   14c14:	bne	14b24 <__assert_fail@plt+0x37f4>
   14c18:	ldrh	r3, [r4, #58]	; 0x3a
   14c1c:	tst	r3, #2
   14c20:	bne	15000 <__assert_fail@plt+0x3cd0>
   14c24:	ldr	r5, [r8, #4]
   14c28:	cmp	r5, #0
   14c2c:	bne	14c64 <__assert_fail@plt+0x3934>
   14c30:	mov	r3, #6
   14c34:	mov	r2, r4
   14c38:	ldr	r0, [r8, #48]	; 0x30
   14c3c:	add	r1, r8, #56	; 0x38
   14c40:	strh	r3, [r4, #56]	; 0x38
   14c44:	bl	132a0 <__assert_fail@plt+0x1f70>
   14c48:	b	14bf4 <__assert_fail@plt+0x38c4>
   14c4c:	bl	1130c <closedir@plt>
   14c50:	mov	r0, r5
   14c54:	bl	12d1c <__assert_fail@plt+0x19ec>
   14c58:	cmp	r6, #0
   14c5c:	beq	14c84 <__assert_fail@plt+0x3954>
   14c60:	mov	r5, r6
   14c64:	ldr	r6, [r5, #8]
   14c68:	ldr	r0, [r5, #12]
   14c6c:	cmp	r0, #0
   14c70:	bne	14c4c <__assert_fail@plt+0x391c>
   14c74:	mov	r0, r5
   14c78:	bl	12d1c <__assert_fail@plt+0x19ec>
   14c7c:	cmp	r6, #0
   14c80:	bne	14c60 <__assert_fail@plt+0x3930>
   14c84:	mov	r3, #0
   14c88:	str	r3, [r8, #4]
   14c8c:	b	14c30 <__assert_fail@plt+0x3900>
   14c90:	mov	r0, r8
   14c94:	bl	1336c <__assert_fail@plt+0x203c>
   14c98:	ldr	r3, [r8, #48]	; 0x30
   14c9c:	cmp	r0, #0
   14ca0:	orrne	r3, r3, #8192	; 0x2000
   14ca4:	strne	r3, [r8, #48]	; 0x30
   14ca8:	bne	14bf4 <__assert_fail@plt+0x38c4>
   14cac:	movw	r2, #258	; 0x102
   14cb0:	ldr	r0, [r8, #56]	; 0x38
   14cb4:	tst	r2, r3
   14cb8:	beq	14ff8 <__assert_fail@plt+0x3cc8>
   14cbc:	cmp	r0, #0
   14cc0:	beq	14cc8 <__assert_fail@plt+0x3998>
   14cc4:	bl	160a4 <__assert_fail@plt+0x4d74>
   14cc8:	ldr	r2, [r5, #52]	; 0x34
   14ccc:	add	r4, r5, #168	; 0xa8
   14cd0:	mov	r1, r4
   14cd4:	ldr	r0, [r8, #24]
   14cd8:	str	r2, [r5, #40]	; 0x28
   14cdc:	add	r2, r2, #1
   14ce0:	bl	11048 <memmove@plt>
   14ce4:	mov	r0, r4
   14ce8:	mov	r1, #47	; 0x2f
   14cec:	bl	11264 <strrchr@plt>
   14cf0:	cmp	r0, #0
   14cf4:	beq	14d24 <__assert_fail@plt+0x39f4>
   14cf8:	cmp	r4, r0
   14cfc:	beq	14f90 <__assert_fail@plt+0x3c60>
   14d00:	add	r6, r0, #1
   14d04:	mov	r0, r6
   14d08:	bl	111bc <strlen@plt>
   14d0c:	mov	r7, r0
   14d10:	mov	r1, r6
   14d14:	mov	r0, r4
   14d18:	add	r2, r7, #1
   14d1c:	bl	11048 <memmove@plt>
   14d20:	str	r7, [r5, #52]	; 0x34
   14d24:	ldr	r3, [r8, #24]
   14d28:	movw	r1, #258	; 0x102
   14d2c:	ldr	r2, [r8, #48]	; 0x30
   14d30:	str	r3, [r5, #24]
   14d34:	str	r3, [r5, #28]
   14d38:	tst	r1, r2
   14d3c:	bne	14f50 <__assert_fail@plt+0x3c20>
   14d40:	mov	r0, #32
   14d44:	bl	1c470 <__assert_fail@plt+0xb140>
   14d48:	cmp	r0, #0
   14d4c:	str	r0, [r8, #56]	; 0x38
   14d50:	beq	15090 <__assert_fail@plt+0x3d60>
   14d54:	bl	1c58c <__assert_fail@plt+0xb25c>
   14d58:	mov	r4, r5
   14d5c:	ldrh	r3, [r5, #56]	; 0x38
   14d60:	b	14db0 <__assert_fail@plt+0x3a80>
   14d64:	cmp	r3, #2
   14d68:	beq	1500c <__assert_fail@plt+0x3cdc>
   14d6c:	ldr	r0, [r4, #4]
   14d70:	mov	ip, #47	; 0x2f
   14d74:	add	r1, r4, #168	; 0xa8
   14d78:	ldr	r3, [r8, #24]
   14d7c:	ldr	lr, [r0, #28]
   14d80:	ldr	r2, [r0, #40]	; 0x28
   14d84:	sub	r0, r2, #1
   14d88:	ldrb	lr, [lr, r0]
   14d8c:	cmp	lr, ip
   14d90:	movne	r0, r2
   14d94:	strb	ip, [r3, r0]
   14d98:	add	r0, r3, r0
   14d9c:	ldr	r2, [r4, #52]	; 0x34
   14da0:	add	r0, r0, #1
   14da4:	add	r2, r2, #1
   14da8:	bl	11048 <memmove@plt>
   14dac:	ldrh	r3, [r4, #56]	; 0x38
   14db0:	cmp	r3, #11
   14db4:	str	r4, [r8]
   14db8:	beq	14e28 <__assert_fail@plt+0x3af8>
   14dbc:	cmp	r3, #1
   14dc0:	bne	14bf4 <__assert_fail@plt+0x38c4>
   14dc4:	ldr	r3, [r4, #48]	; 0x30
   14dc8:	add	r1, r8, #56	; 0x38
   14dcc:	ldr	r0, [r8, #48]	; 0x30
   14dd0:	cmp	r3, #0
   14dd4:	ldrdeq	r2, [r4, #64]	; 0x40
   14dd8:	strdeq	r2, [r8, #16]
   14ddc:	mov	r2, r4
   14de0:	bl	131cc <__assert_fail@plt+0x1e9c>
   14de4:	subs	r5, r0, #0
   14de8:	bne	14bf4 <__assert_fail@plt+0x38c4>
   14dec:	bl	111ec <__errno_location@plt>
   14df0:	mov	r3, #12
   14df4:	mov	r4, r5
   14df8:	str	r3, [r0]
   14dfc:	b	14bf4 <__assert_fail@plt+0x38c4>
   14e00:	mov	r3, #1
   14e04:	mov	r2, r4
   14e08:	ldr	r0, [r8, #32]
   14e0c:	bl	13070 <__assert_fail@plt+0x1d40>
   14e10:	cmp	r0, #1
   14e14:	strh	r0, [r4, #56]	; 0x38
   14e18:	beq	150b4 <__assert_fail@plt+0x3d84>
   14e1c:	cmp	r0, #11
   14e20:	str	r4, [r8]
   14e24:	bne	14bf4 <__assert_fail@plt+0x38c4>
   14e28:	ldrd	r2, [r4, #112]	; 0x70
   14e2c:	cmp	r3, #0
   14e30:	cmpeq	r2, #2
   14e34:	beq	1503c <__assert_fail@plt+0x3d0c>
   14e38:	cmp	r3, #0
   14e3c:	cmpeq	r2, #1
   14e40:	beq	14bf4 <__assert_fail@plt+0x38c4>
   14e44:	bl	112e8 <abort@plt>
   14e48:	mov	r2, r4
   14e4c:	ldr	r0, [r8, #32]
   14e50:	bl	13070 <__assert_fail@plt+0x1d40>
   14e54:	strh	r0, [r4, #56]	; 0x38
   14e58:	b	14bf4 <__assert_fail@plt+0x38c4>
   14e5c:	bic	r1, r1, #4096	; 0x1000
   14e60:	str	r1, [r8, #48]	; 0x30
   14e64:	b	14e80 <__assert_fail@plt+0x3b50>
   14e68:	bl	1130c <closedir@plt>
   14e6c:	mov	r0, r5
   14e70:	bl	12d1c <__assert_fail@plt+0x19ec>
   14e74:	cmp	r6, #0
   14e78:	beq	14ea0 <__assert_fail@plt+0x3b70>
   14e7c:	mov	r5, r6
   14e80:	ldr	r6, [r5, #8]
   14e84:	ldr	r0, [r5, #12]
   14e88:	cmp	r0, #0
   14e8c:	bne	14e68 <__assert_fail@plt+0x3b38>
   14e90:	mov	r0, r5
   14e94:	bl	12d1c <__assert_fail@plt+0x19ec>
   14e98:	cmp	r6, #0
   14e9c:	bne	14e7c <__assert_fail@plt+0x3b4c>
   14ea0:	mov	r3, #0
   14ea4:	str	r3, [r8, #4]
   14ea8:	mov	r1, #3
   14eac:	mov	r0, r8
   14eb0:	bl	136d8 <__assert_fail@plt+0x23a8>
   14eb4:	cmp	r0, #0
   14eb8:	str	r0, [r8, #4]
   14ebc:	movne	r4, r0
   14ec0:	bne	14bb0 <__assert_fail@plt+0x3880>
   14ec4:	ldr	r0, [r8, #48]	; 0x30
   14ec8:	tst	r0, #8192	; 0x2000
   14ecc:	bne	14bf0 <__assert_fail@plt+0x38c0>
   14ed0:	ldr	r3, [r4, #32]
   14ed4:	cmp	r3, #0
   14ed8:	beq	14eec <__assert_fail@plt+0x3bbc>
   14edc:	ldrh	r3, [r4, #56]	; 0x38
   14ee0:	cmp	r3, #4
   14ee4:	movne	r3, #7
   14ee8:	strhne	r3, [r4, #56]	; 0x38
   14eec:	add	r1, r8, #56	; 0x38
   14ef0:	mov	r2, r4
   14ef4:	bl	132a0 <__assert_fail@plt+0x1f70>
   14ef8:	b	14bf4 <__assert_fail@plt+0x38c4>
   14efc:	tst	r3, #1
   14f00:	beq	1505c <__assert_fail@plt+0x3d2c>
   14f04:	ldrh	r3, [r6, #56]	; 0x38
   14f08:	ldr	r0, [r8, #48]	; 0x30
   14f0c:	cmp	r3, #2
   14f10:	beq	14f40 <__assert_fail@plt+0x3c10>
   14f14:	ldr	r2, [r6, #32]
   14f18:	cmp	r2, #0
   14f1c:	movne	r3, #7
   14f20:	strhne	r3, [r6, #56]	; 0x38
   14f24:	bne	14f40 <__assert_fail@plt+0x3c10>
   14f28:	mov	r3, #6
   14f2c:	mov	r2, r6
   14f30:	add	r1, r8, #56	; 0x38
   14f34:	strh	r3, [r6, #56]	; 0x38
   14f38:	bl	132a0 <__assert_fail@plt+0x1f70>
   14f3c:	ldr	r0, [r8, #48]	; 0x30
   14f40:	tst	r0, #8192	; 0x2000
   14f44:	moveq	r4, r6
   14f48:	beq	14bf4 <__assert_fail@plt+0x38c4>
   14f4c:	b	14bf0 <__assert_fail@plt+0x38c0>
   14f50:	movw	r1, #11548	; 0x2d1c
   14f54:	movt	r1, #1
   14f58:	movw	r3, #11644	; 0x2d7c
   14f5c:	movt	r3, #1
   14f60:	movw	r2, #11708	; 0x2dbc
   14f64:	movt	r2, #1
   14f68:	str	r1, [sp]
   14f6c:	mov	r0, #31
   14f70:	mov	r1, #0
   14f74:	bl	15d64 <__assert_fail@plt+0x4a34>
   14f78:	mov	r4, r5
   14f7c:	ldrh	r3, [r5, #56]	; 0x38
   14f80:	str	r0, [r8, #56]	; 0x38
   14f84:	b	14db0 <__assert_fail@plt+0x3a80>
   14f88:	ldr	r4, [r8, #4]
   14f8c:	b	14bb0 <__assert_fail@plt+0x3880>
   14f90:	ldrb	r3, [r4, #1]
   14f94:	cmp	r3, #0
   14f98:	beq	14d24 <__assert_fail@plt+0x39f4>
   14f9c:	b	14d00 <__assert_fail@plt+0x39d0>
   14fa0:	mov	r0, r6
   14fa4:	bl	12d1c <__assert_fail@plt+0x19ec>
   14fa8:	bl	111ec <__errno_location@plt>
   14fac:	mov	r3, #0
   14fb0:	mov	r4, r3
   14fb4:	str	r3, [r0]
   14fb8:	str	r3, [r8]
   14fbc:	b	14bf4 <__assert_fail@plt+0x38c4>
   14fc0:	ldr	r2, [r8, #24]
   14fc4:	mov	r1, #3
   14fc8:	mov	r0, r8
   14fcc:	ldr	r3, [r6, #40]	; 0x28
   14fd0:	str	r6, [r8]
   14fd4:	strb	r5, [r2, r3]
   14fd8:	bl	136d8 <__assert_fail@plt+0x23a8>
   14fdc:	subs	r3, r0, #0
   14fe0:	bne	15080 <__assert_fail@plt+0x3d50>
   14fe4:	ldr	r3, [r8, #48]	; 0x30
   14fe8:	tst	r3, #8192	; 0x2000
   14fec:	bne	14bf0 <__assert_fail@plt+0x38c0>
   14ff0:	ldr	r6, [r4, #4]
   14ff4:	b	14a64 <__assert_fail@plt+0x3734>
   14ff8:	bl	12d1c <__assert_fail@plt+0x19ec>
   14ffc:	b	14cc8 <__assert_fail@plt+0x3998>
   15000:	ldr	r0, [r4, #36]	; 0x24
   15004:	bl	112f4 <close@plt>
   15008:	b	14c24 <__assert_fail@plt+0x38f4>
   1500c:	mov	r3, #1
   15010:	mov	r2, r5
   15014:	ldr	r0, [r8, #32]
   15018:	ldr	r1, [r8, #48]	; 0x30
   1501c:	bl	13070 <__assert_fail@plt+0x1d40>
   15020:	cmp	r0, #1
   15024:	strh	r0, [r5, #56]	; 0x38
   15028:	beq	1510c <__assert_fail@plt+0x3ddc>
   1502c:	mov	r3, #3
   15030:	mov	r4, r5
   15034:	strh	r3, [r5, #60]	; 0x3c
   15038:	b	14d6c <__assert_fail@plt+0x3a3c>
   1503c:	mov	r3, #0
   15040:	mov	r2, r4
   15044:	ldr	r0, [r8, #32]
   15048:	ldr	r1, [r8, #48]	; 0x30
   1504c:	bl	13070 <__assert_fail@plt+0x1d40>
   15050:	mov	r3, r0
   15054:	strh	r0, [r4, #56]	; 0x38
   15058:	b	14dbc <__assert_fail@plt+0x3a8c>
   1505c:	movw	r3, #56764	; 0xddbc
   15060:	movt	r3, #1
   15064:	ldr	r1, [r6, #4]
   15068:	mvn	r2, #0
   1506c:	mov	r0, r8
   15070:	bl	13418 <__assert_fail@plt+0x20e8>
   15074:	cmp	r0, #0
   15078:	beq	14f04 <__assert_fail@plt+0x3bd4>
   1507c:	b	14bcc <__assert_fail@plt+0x389c>
   15080:	mov	r0, r4
   15084:	mov	r4, r3
   15088:	bl	12d1c <__assert_fail@plt+0x19ec>
   1508c:	b	14d6c <__assert_fail@plt+0x3a3c>
   15090:	ldrh	r3, [r5, #56]	; 0x38
   15094:	mov	r4, r5
   15098:	b	14db0 <__assert_fail@plt+0x3a80>
   1509c:	mov	r0, r4
   150a0:	bl	112a0 <fchdir@plt>
   150a4:	cmp	r0, #0
   150a8:	bne	1515c <__assert_fail@plt+0x3e2c>
   150ac:	ldr	r4, [r6, #36]	; 0x24
   150b0:	b	14b04 <__assert_fail@plt+0x37d4>
   150b4:	ldr	r3, [r8, #48]	; 0x30
   150b8:	tst	r3, #4
   150bc:	strne	r4, [r8]
   150c0:	bne	14dc4 <__assert_fail@plt+0x3a94>
   150c4:	lsl	r2, r3, #11
   150c8:	tst	r3, #512	; 0x200
   150cc:	and	r2, r2, #32768	; 0x8000
   150d0:	orr	r2, r2, #540672	; 0x84000
   150d4:	orr	r2, r2, #2304	; 0x900
   150d8:	beq	1517c <__assert_fail@plt+0x3e4c>
   150dc:	movw	r1, #56768	; 0xddc0
   150e0:	movt	r1, #1
   150e4:	ldr	r0, [r8, #32]
   150e8:	bl	16c74 <__assert_fail@plt+0x5944>
   150ec:	cmp	r0, #0
   150f0:	str	r0, [r4, #36]	; 0x24
   150f4:	blt	15190 <__assert_fail@plt+0x3e60>
   150f8:	ldrh	r2, [r4, #58]	; 0x3a
   150fc:	ldrh	r3, [r4, #56]	; 0x38
   15100:	orr	r2, r2, #2
   15104:	strh	r2, [r4, #58]	; 0x3a
   15108:	b	14db0 <__assert_fail@plt+0x3a80>
   1510c:	ldr	r3, [r8, #48]	; 0x30
   15110:	tst	r3, #4
   15114:	bne	1502c <__assert_fail@plt+0x3cfc>
   15118:	lsl	r2, r3, #11
   1511c:	tst	r3, #512	; 0x200
   15120:	and	r2, r2, #32768	; 0x8000
   15124:	orr	r2, r2, #540672	; 0x84000
   15128:	orr	r2, r2, #2304	; 0x900
   1512c:	beq	151ac <__assert_fail@plt+0x3e7c>
   15130:	movw	r1, #56768	; 0xddc0
   15134:	movt	r1, #1
   15138:	ldr	r0, [r8, #32]
   1513c:	bl	16c74 <__assert_fail@plt+0x5944>
   15140:	cmp	r0, #0
   15144:	str	r0, [r5, #36]	; 0x24
   15148:	blt	151c0 <__assert_fail@plt+0x3e90>
   1514c:	ldrh	r3, [r5, #58]	; 0x3a
   15150:	orr	r3, r3, #2
   15154:	strh	r3, [r5, #58]	; 0x3a
   15158:	b	1502c <__assert_fail@plt+0x3cfc>
   1515c:	bl	111ec <__errno_location@plt>
   15160:	ldr	r3, [r8, #48]	; 0x30
   15164:	ldr	r2, [r0]
   15168:	ldr	r4, [r6, #36]	; 0x24
   1516c:	orr	r3, r3, #8192	; 0x2000
   15170:	str	r2, [r6, #32]
   15174:	str	r3, [r8, #48]	; 0x30
   15178:	b	14b04 <__assert_fail@plt+0x37d4>
   1517c:	mov	r1, r2
   15180:	movw	r0, #56768	; 0xddc0
   15184:	movt	r0, #1
   15188:	bl	1c948 <__assert_fail@plt+0xb618>
   1518c:	b	150ec <__assert_fail@plt+0x3dbc>
   15190:	bl	111ec <__errno_location@plt>
   15194:	ldr	r3, [r0]
   15198:	mov	r2, #7
   1519c:	str	r3, [r4, #32]
   151a0:	strh	r2, [r4, #56]	; 0x38
   151a4:	str	r4, [r8]
   151a8:	b	14bf4 <__assert_fail@plt+0x38c4>
   151ac:	mov	r1, r2
   151b0:	movw	r0, #56768	; 0xddc0
   151b4:	movt	r0, #1
   151b8:	bl	1c948 <__assert_fail@plt+0xb618>
   151bc:	b	15140 <__assert_fail@plt+0x3e10>
   151c0:	bl	111ec <__errno_location@plt>
   151c4:	ldr	r3, [r0]
   151c8:	mov	r2, #7
   151cc:	str	r3, [r5, #32]
   151d0:	strh	r2, [r5, #56]	; 0x38
   151d4:	b	1502c <__assert_fail@plt+0x3cfc>
   151d8:	cmp	r2, #4
   151dc:	bhi	151f0 <__assert_fail@plt+0x3ec0>
   151e0:	mov	r3, #0
   151e4:	strh	r2, [r1, #60]	; 0x3c
   151e8:	mov	r0, r3
   151ec:	bx	lr
   151f0:	str	r4, [sp, #-8]!
   151f4:	str	lr, [sp, #4]
   151f8:	bl	111ec <__errno_location@plt>
   151fc:	mov	r2, #22
   15200:	mov	r3, #1
   15204:	ldr	r4, [sp]
   15208:	add	sp, sp, #4
   1520c:	str	r2, [r0]
   15210:	mov	r0, r3
   15214:	pop	{pc}		; (ldr pc, [sp], #4)
   15218:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1521c:	mov	r5, r0
   15220:	strd	r6, [sp, #8]
   15224:	strd	r8, [sp, #16]
   15228:	mov	r8, r1
   1522c:	str	sl, [sp, #24]
   15230:	str	lr, [sp, #28]
   15234:	bl	111ec <__errno_location@plt>
   15238:	bics	r2, r8, #4096	; 0x1000
   1523c:	mov	r6, r0
   15240:	movne	r3, #22
   15244:	movne	r0, #0
   15248:	strne	r3, [r6]
   1524c:	bne	15314 <__assert_fail@plt+0x3fe4>
   15250:	ldr	r9, [r5]
   15254:	str	r2, [r6]
   15258:	ldr	r3, [r5, #48]	; 0x30
   1525c:	ands	r0, r3, #8192	; 0x2000
   15260:	bne	153c4 <__assert_fail@plt+0x4094>
   15264:	ldrh	r3, [r9, #56]	; 0x38
   15268:	cmp	r3, #9
   1526c:	beq	153cc <__assert_fail@plt+0x409c>
   15270:	cmp	r3, #1
   15274:	bne	15314 <__assert_fail@plt+0x3fe4>
   15278:	ldr	r4, [r5, #4]
   1527c:	cmp	r4, #0
   15280:	bne	152a0 <__assert_fail@plt+0x3f70>
   15284:	b	152c0 <__assert_fail@plt+0x3f90>
   15288:	bl	1130c <closedir@plt>
   1528c:	mov	r0, r4
   15290:	bl	12d1c <__assert_fail@plt+0x19ec>
   15294:	cmp	r7, #0
   15298:	beq	152c0 <__assert_fail@plt+0x3f90>
   1529c:	mov	r4, r7
   152a0:	ldr	r7, [r4, #8]
   152a4:	ldr	r0, [r4, #12]
   152a8:	cmp	r0, #0
   152ac:	bne	15288 <__assert_fail@plt+0x3f58>
   152b0:	mov	r0, r4
   152b4:	bl	12d1c <__assert_fail@plt+0x19ec>
   152b8:	cmp	r7, #0
   152bc:	bne	1529c <__assert_fail@plt+0x3f6c>
   152c0:	cmp	r8, #4096	; 0x1000
   152c4:	movne	r4, #1
   152c8:	bne	152dc <__assert_fail@plt+0x3fac>
   152cc:	ldr	r3, [r5, #48]	; 0x30
   152d0:	mov	r4, #2
   152d4:	orr	r3, r3, #4096	; 0x1000
   152d8:	str	r3, [r5, #48]	; 0x30
   152dc:	ldr	r3, [r9, #48]	; 0x30
   152e0:	cmp	r3, #0
   152e4:	bne	15304 <__assert_fail@plt+0x3fd4>
   152e8:	ldr	r3, [r9, #24]
   152ec:	ldrb	r3, [r3]
   152f0:	cmp	r3, #47	; 0x2f
   152f4:	beq	15304 <__assert_fail@plt+0x3fd4>
   152f8:	ldr	r3, [r5, #48]	; 0x30
   152fc:	tst	r3, #4
   15300:	beq	1532c <__assert_fail@plt+0x3ffc>
   15304:	mov	r1, r4
   15308:	mov	r0, r5
   1530c:	bl	136d8 <__assert_fail@plt+0x23a8>
   15310:	str	r0, [r5, #4]
   15314:	ldrd	r4, [sp]
   15318:	ldrd	r6, [sp, #8]
   1531c:	ldrd	r8, [sp, #16]
   15320:	ldr	sl, [sp, #24]
   15324:	add	sp, sp, #28
   15328:	pop	{pc}		; (ldr pc, [sp], #4)
   1532c:	lsl	r2, r3, #11
   15330:	tst	r3, #512	; 0x200
   15334:	and	r2, r2, #32768	; 0x8000
   15338:	orr	r2, r2, #540672	; 0x84000
   1533c:	orr	r2, r2, #2304	; 0x900
   15340:	beq	153d4 <__assert_fail@plt+0x40a4>
   15344:	movw	r1, #56768	; 0xddc0
   15348:	movt	r1, #1
   1534c:	ldr	r0, [r5, #32]
   15350:	bl	16c74 <__assert_fail@plt+0x5944>
   15354:	mov	r7, r0
   15358:	cmp	r7, #0
   1535c:	movlt	r3, #0
   15360:	movlt	r0, r3
   15364:	strlt	r3, [r5, #4]
   15368:	blt	15314 <__assert_fail@plt+0x3fe4>
   1536c:	mov	r1, r4
   15370:	mov	r0, r5
   15374:	bl	136d8 <__assert_fail@plt+0x23a8>
   15378:	ldr	r3, [r5, #48]	; 0x30
   1537c:	str	r0, [r5, #4]
   15380:	ands	r4, r3, #512	; 0x200
   15384:	beq	153ec <__assert_fail@plt+0x40bc>
   15388:	ldr	r1, [r5, #32]
   1538c:	sub	r3, r7, r1
   15390:	cmn	r1, #100	; 0x64
   15394:	clz	r3, r3
   15398:	lsr	r3, r3, #5
   1539c:	moveq	r3, #0
   153a0:	cmp	r3, #0
   153a4:	bne	15424 <__assert_fail@plt+0x40f4>
   153a8:	add	r0, r5, #60	; 0x3c
   153ac:	bl	16b64 <__assert_fail@plt+0x5834>
   153b0:	cmp	r0, #0
   153b4:	blt	153bc <__assert_fail@plt+0x408c>
   153b8:	bl	112f4 <close@plt>
   153bc:	str	r7, [r5, #32]
   153c0:	b	15404 <__assert_fail@plt+0x40d4>
   153c4:	mov	r0, r2
   153c8:	b	15314 <__assert_fail@plt+0x3fe4>
   153cc:	ldr	r0, [r9, #8]
   153d0:	b	15314 <__assert_fail@plt+0x3fe4>
   153d4:	mov	r1, r2
   153d8:	movw	r0, #56768	; 0xddc0
   153dc:	movt	r0, #1
   153e0:	bl	1c948 <__assert_fail@plt+0xb618>
   153e4:	mov	r7, r0
   153e8:	b	15358 <__assert_fail@plt+0x4028>
   153ec:	mov	r0, r7
   153f0:	bl	112a0 <fchdir@plt>
   153f4:	cmp	r0, #0
   153f8:	bne	1540c <__assert_fail@plt+0x40dc>
   153fc:	mov	r0, r7
   15400:	bl	112f4 <close@plt>
   15404:	ldr	r0, [r5, #4]
   15408:	b	15314 <__assert_fail@plt+0x3fe4>
   1540c:	ldr	r5, [r6]
   15410:	mov	r0, r7
   15414:	bl	112f4 <close@plt>
   15418:	mov	r0, r4
   1541c:	str	r5, [r6]
   15420:	b	15314 <__assert_fail@plt+0x3fe4>
   15424:	bl	112e8 <abort@plt>
   15428:	ror	r0, r0, #3
   1542c:	udiv	r3, r0, r1
   15430:	mls	r0, r3, r1, r0
   15434:	bx	lr
   15438:	sub	r0, r1, r0
   1543c:	clz	r0, r0
   15440:	lsr	r0, r0, #5
   15444:	bx	lr
   15448:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1544c:	mov	r5, r1
   15450:	strd	r6, [sp, #8]
   15454:	mov	r6, r0
   15458:	mov	r7, r3
   1545c:	mov	r0, r1
   15460:	strd	r8, [sp, #16]
   15464:	strd	sl, [sp, #24]
   15468:	mov	fp, r2
   1546c:	str	lr, [sp, #32]
   15470:	sub	sp, sp, #4
   15474:	ldr	r1, [r6, #8]
   15478:	ldr	r3, [r6, #24]
   1547c:	blx	r3
   15480:	ldr	r3, [r6, #8]
   15484:	cmp	r0, r3
   15488:	bcs	155a4 <__assert_fail@plt+0x4274>
   1548c:	ldr	r8, [r6]
   15490:	lsl	r9, r0, #3
   15494:	mov	sl, r0
   15498:	add	r4, r8, r9
   1549c:	str	r4, [fp]
   154a0:	ldr	r1, [r8, r0, lsl #3]
   154a4:	cmp	r1, #0
   154a8:	beq	1559c <__assert_fail@plt+0x426c>
   154ac:	cmp	r1, r5
   154b0:	beq	15564 <__assert_fail@plt+0x4234>
   154b4:	mov	r0, r5
   154b8:	ldr	r3, [r6, #28]
   154bc:	blx	r3
   154c0:	cmp	r0, #0
   154c4:	bne	15560 <__assert_fail@plt+0x4230>
   154c8:	ldr	r3, [r4, #4]
   154cc:	cmp	r3, #0
   154d0:	beq	1559c <__assert_fail@plt+0x426c>
   154d4:	ldr	r1, [r3]
   154d8:	cmp	r5, r1
   154dc:	bne	15500 <__assert_fail@plt+0x41d0>
   154e0:	b	1551c <__assert_fail@plt+0x41ec>
   154e4:	ldr	r4, [r4, #4]
   154e8:	ldr	r3, [r4, #4]
   154ec:	cmp	r3, #0
   154f0:	beq	1559c <__assert_fail@plt+0x426c>
   154f4:	ldr	r1, [r3]
   154f8:	cmp	r1, r5
   154fc:	beq	1551c <__assert_fail@plt+0x41ec>
   15500:	mov	r0, r5
   15504:	ldr	r3, [r6, #28]
   15508:	blx	r3
   1550c:	cmp	r0, #0
   15510:	beq	154e4 <__assert_fail@plt+0x41b4>
   15514:	ldr	r3, [r4, #4]
   15518:	ldr	r1, [r3]
   1551c:	cmp	r7, #0
   15520:	beq	15540 <__assert_fail@plt+0x4210>
   15524:	ldr	r0, [r3, #4]
   15528:	mov	r2, #0
   1552c:	str	r0, [r4, #4]
   15530:	str	r2, [r3]
   15534:	ldr	r2, [r6, #36]	; 0x24
   15538:	str	r2, [r3, #4]
   1553c:	str	r3, [r6, #36]	; 0x24
   15540:	mov	r0, r1
   15544:	add	sp, sp, #4
   15548:	ldrd	r4, [sp]
   1554c:	ldrd	r6, [sp, #8]
   15550:	ldrd	r8, [sp, #16]
   15554:	ldrd	sl, [sp, #24]
   15558:	add	sp, sp, #32
   1555c:	pop	{pc}		; (ldr pc, [sp], #4)
   15560:	ldr	r1, [r8, sl, lsl #3]
   15564:	cmp	r7, #0
   15568:	beq	15540 <__assert_fail@plt+0x4210>
   1556c:	ldr	r0, [r4, #4]
   15570:	cmp	r0, #0
   15574:	streq	r0, [r8, sl, lsl #3]
   15578:	beq	15540 <__assert_fail@plt+0x4210>
   1557c:	ldrd	r2, [r0]
   15580:	mov	ip, #0
   15584:	strd	r2, [r8, r9]
   15588:	str	ip, [r0]
   1558c:	ldr	r3, [r6, #36]	; 0x24
   15590:	str	r3, [r0, #4]
   15594:	str	r0, [r6, #36]	; 0x24
   15598:	b	15540 <__assert_fail@plt+0x4210>
   1559c:	mov	r1, #0
   155a0:	b	15540 <__assert_fail@plt+0x4210>
   155a4:	bl	112e8 <abort@plt>
   155a8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   155ac:	ldr	r3, [r1, #4]
   155b0:	strd	r6, [sp, #8]
   155b4:	ldr	r6, [r1]
   155b8:	strd	r8, [sp, #16]
   155bc:	str	sl, [sp, #24]
   155c0:	str	lr, [sp, #28]
   155c4:	cmp	r6, r3
   155c8:	bcs	156a8 <__assert_fail@plt+0x4378>
   155cc:	mov	r8, r2
   155d0:	mov	r5, r0
   155d4:	mov	r7, r1
   155d8:	add	r6, r6, #8
   155dc:	mov	r9, #0
   155e0:	b	155f0 <__assert_fail@plt+0x42c0>
   155e4:	cmp	r3, r6
   155e8:	add	r6, r6, #8
   155ec:	bls	156a8 <__assert_fail@plt+0x4378>
   155f0:	ldr	sl, [r6, #-8]
   155f4:	cmp	sl, #0
   155f8:	beq	155e4 <__assert_fail@plt+0x42b4>
   155fc:	ldr	r4, [r6, #-4]
   15600:	cmp	r4, #0
   15604:	beq	1568c <__assert_fail@plt+0x435c>
   15608:	ldr	r1, [r5, #8]
   1560c:	b	15628 <__assert_fail@plt+0x42f8>
   15610:	ldr	r3, [ip, #4]
   15614:	cmp	r2, #0
   15618:	str	r3, [r4, #4]
   1561c:	str	r4, [ip, #4]
   15620:	mov	r4, r2
   15624:	beq	15688 <__assert_fail@plt+0x4358>
   15628:	ldr	sl, [r4]
   1562c:	ldr	r3, [r5, #24]
   15630:	mov	r0, sl
   15634:	blx	r3
   15638:	ldr	r1, [r5, #8]
   1563c:	cmp	r0, r1
   15640:	bcs	1575c <__assert_fail@plt+0x442c>
   15644:	ldr	r3, [r5]
   15648:	ldr	r2, [r4, #4]
   1564c:	ldr	lr, [r3, r0, lsl #3]
   15650:	add	ip, r3, r0, lsl #3
   15654:	cmp	lr, #0
   15658:	bne	15610 <__assert_fail@plt+0x42e0>
   1565c:	ldr	ip, [r5, #12]
   15660:	cmp	r2, #0
   15664:	str	sl, [r3, r0, lsl #3]
   15668:	add	ip, ip, #1
   1566c:	str	ip, [r5, #12]
   15670:	str	lr, [r4]
   15674:	ldr	r3, [r5, #36]	; 0x24
   15678:	str	r3, [r4, #4]
   1567c:	str	r4, [r5, #36]	; 0x24
   15680:	mov	r4, r2
   15684:	bne	15628 <__assert_fail@plt+0x42f8>
   15688:	ldr	sl, [r6, #-8]
   1568c:	cmp	r8, #0
   15690:	str	r9, [r6, #-4]
   15694:	beq	156c4 <__assert_fail@plt+0x4394>
   15698:	ldr	r3, [r7, #4]
   1569c:	cmp	r3, r6
   156a0:	add	r6, r6, #8
   156a4:	bhi	155f0 <__assert_fail@plt+0x42c0>
   156a8:	mov	r0, #1
   156ac:	ldrd	r4, [sp]
   156b0:	ldrd	r6, [sp, #8]
   156b4:	ldrd	r8, [sp, #16]
   156b8:	ldr	sl, [sp, #24]
   156bc:	add	sp, sp, #28
   156c0:	pop	{pc}		; (ldr pc, [sp], #4)
   156c4:	mov	r0, sl
   156c8:	ldr	r1, [r5, #8]
   156cc:	ldr	r3, [r5, #24]
   156d0:	blx	r3
   156d4:	ldr	r3, [r5, #8]
   156d8:	cmp	r0, r3
   156dc:	bcs	1575c <__assert_fail@plt+0x442c>
   156e0:	ldr	r3, [r5]
   156e4:	ldr	r2, [r3, r0, lsl #3]
   156e8:	add	r4, r3, r0, lsl #3
   156ec:	cmp	r2, #0
   156f0:	beq	15730 <__assert_fail@plt+0x4400>
   156f4:	ldr	r0, [r5, #36]	; 0x24
   156f8:	cmp	r0, #0
   156fc:	beq	15744 <__assert_fail@plt+0x4414>
   15700:	ldr	r3, [r0, #4]
   15704:	str	r3, [r5, #36]	; 0x24
   15708:	ldr	r3, [r4, #4]
   1570c:	str	sl, [r0]
   15710:	str	r3, [r0, #4]
   15714:	str	r0, [r4, #4]
   15718:	ldr	r2, [r7, #12]
   1571c:	str	r9, [r6, #-8]
   15720:	ldr	r3, [r7, #4]
   15724:	sub	r2, r2, #1
   15728:	str	r2, [r7, #12]
   1572c:	b	155e4 <__assert_fail@plt+0x42b4>
   15730:	ldr	r2, [r5, #12]
   15734:	str	sl, [r3, r0, lsl #3]
   15738:	add	r2, r2, #1
   1573c:	str	r2, [r5, #12]
   15740:	b	15718 <__assert_fail@plt+0x43e8>
   15744:	mov	r0, #8
   15748:	bl	1c470 <__assert_fail@plt+0xb140>
   1574c:	cmp	r0, #0
   15750:	bne	15708 <__assert_fail@plt+0x43d8>
   15754:	mov	r0, r8
   15758:	b	156ac <__assert_fail@plt+0x437c>
   1575c:	bl	112e8 <abort@plt>
   15760:	ldr	r0, [r0, #8]
   15764:	bx	lr
   15768:	ldr	r0, [r0, #12]
   1576c:	bx	lr
   15770:	ldr	r0, [r0, #16]
   15774:	bx	lr
   15778:	ldm	r0, {r1, r3}
   1577c:	cmp	r1, r3
   15780:	bcs	157f4 <__assert_fail@plt+0x44c4>
   15784:	sub	ip, r3, #1
   15788:	add	r3, r1, #16
   1578c:	sub	ip, ip, r1
   15790:	mov	r0, #0
   15794:	bic	ip, ip, #7
   15798:	add	r1, r1, #8
   1579c:	add	ip, ip, r3
   157a0:	b	157b0 <__assert_fail@plt+0x4480>
   157a4:	add	r1, r1, #8
   157a8:	cmp	r1, ip
   157ac:	beq	157f0 <__assert_fail@plt+0x44c0>
   157b0:	ldr	r3, [r1, #-8]
   157b4:	cmp	r3, #0
   157b8:	beq	157a4 <__assert_fail@plt+0x4474>
   157bc:	ldr	r3, [r1, #-4]
   157c0:	mov	r2, #1
   157c4:	cmp	r3, #0
   157c8:	beq	157dc <__assert_fail@plt+0x44ac>
   157cc:	ldr	r3, [r3, #4]
   157d0:	add	r2, r2, #1
   157d4:	cmp	r3, #0
   157d8:	bne	157cc <__assert_fail@plt+0x449c>
   157dc:	cmp	r0, r2
   157e0:	add	r1, r1, #8
   157e4:	movcc	r0, r2
   157e8:	cmp	r1, ip
   157ec:	bne	157b0 <__assert_fail@plt+0x4480>
   157f0:	bx	lr
   157f4:	mov	r0, #0
   157f8:	bx	lr
   157fc:	ldm	r0, {r1, r3}
   15800:	push	{lr}		; (str lr, [sp, #-4]!)
   15804:	cmp	r1, r3
   15808:	bcs	1589c <__assert_fail@plt+0x456c>
   1580c:	sub	ip, r3, #1
   15810:	mov	r2, #0
   15814:	sub	ip, ip, r1
   15818:	add	r3, r1, #16
   1581c:	bic	ip, ip, #7
   15820:	add	r1, r1, #8
   15824:	add	ip, ip, r3
   15828:	mov	lr, r2
   1582c:	b	1583c <__assert_fail@plt+0x450c>
   15830:	add	r1, r1, #8
   15834:	cmp	r1, ip
   15838:	beq	15878 <__assert_fail@plt+0x4548>
   1583c:	ldr	r3, [r1, #-8]
   15840:	cmp	r3, #0
   15844:	beq	15830 <__assert_fail@plt+0x4500>
   15848:	ldr	r3, [r1, #-4]
   1584c:	add	lr, lr, #1
   15850:	add	r2, r2, #1
   15854:	cmp	r3, #0
   15858:	beq	15830 <__assert_fail@plt+0x4500>
   1585c:	ldr	r3, [r3, #4]
   15860:	add	r2, r2, #1
   15864:	cmp	r3, #0
   15868:	bne	1585c <__assert_fail@plt+0x452c>
   1586c:	add	r1, r1, #8
   15870:	cmp	r1, ip
   15874:	bne	1583c <__assert_fail@plt+0x450c>
   15878:	ldr	r3, [r0, #12]
   1587c:	cmp	r3, lr
   15880:	movne	r0, #0
   15884:	bne	15898 <__assert_fail@plt+0x4568>
   15888:	ldr	r0, [r0, #16]
   1588c:	sub	r0, r0, r2
   15890:	clz	r0, r0
   15894:	lsr	r0, r0, #5
   15898:	pop	{pc}		; (ldr pc, [sp], #4)
   1589c:	mov	r2, #0
   158a0:	mov	lr, r2
   158a4:	b	15878 <__assert_fail@plt+0x4548>
   158a8:	strd	r4, [sp, #-20]!	; 0xffffffec
   158ac:	mov	r4, r1
   158b0:	ldr	r2, [r0]
   158b4:	ldr	r1, [r0, #4]
   158b8:	ldr	r3, [r0, #16]
   158bc:	strd	r6, [sp, #8]
   158c0:	str	lr, [sp, #16]
   158c4:	sub	sp, sp, #12
   158c8:	cmp	r2, r1
   158cc:	ldrd	r6, [r0, #8]
   158d0:	bcs	159d0 <__assert_fail@plt+0x46a0>
   158d4:	sub	ip, r1, #1
   158d8:	add	r1, r2, #16
   158dc:	sub	ip, ip, r2
   158e0:	add	r0, r2, #8
   158e4:	bic	ip, ip, #7
   158e8:	mov	r5, #0
   158ec:	add	ip, ip, r1
   158f0:	b	15900 <__assert_fail@plt+0x45d0>
   158f4:	add	r0, r0, #8
   158f8:	cmp	r0, ip
   158fc:	beq	15940 <__assert_fail@plt+0x4610>
   15900:	ldr	r2, [r0, #-8]
   15904:	cmp	r2, #0
   15908:	beq	158f4 <__assert_fail@plt+0x45c4>
   1590c:	ldr	r2, [r0, #-4]
   15910:	mov	r1, #1
   15914:	cmp	r2, #0
   15918:	beq	1592c <__assert_fail@plt+0x45fc>
   1591c:	ldr	r2, [r2, #4]
   15920:	add	r1, r1, #1
   15924:	cmp	r2, #0
   15928:	bne	1591c <__assert_fail@plt+0x45ec>
   1592c:	cmp	r5, r1
   15930:	add	r0, r0, #8
   15934:	movcc	r5, r1
   15938:	cmp	r0, ip
   1593c:	bne	15900 <__assert_fail@plt+0x45d0>
   15940:	mov	r1, #1
   15944:	mov	r0, r4
   15948:	movw	r2, #56792	; 0xddd8
   1594c:	movt	r2, #1
   15950:	bl	11228 <__fprintf_chk@plt>
   15954:	mov	r3, r6
   15958:	mov	r1, #1
   1595c:	mov	r0, r4
   15960:	movw	r2, #56816	; 0xddf0
   15964:	movt	r2, #1
   15968:	bl	11228 <__fprintf_chk@plt>
   1596c:	vmov	s15, r7
   15970:	mov	r3, r7
   15974:	mov	r1, #1
   15978:	vldr	d5, [pc, #88]	; 159d8 <__assert_fail@plt+0x46a8>
   1597c:	mov	r0, r4
   15980:	movw	r2, #56840	; 0xde08
   15984:	movt	r2, #1
   15988:	vcvt.f64.u32	d6, s15
   1598c:	vmov	s15, r6
   15990:	vmul.f64	d6, d6, d5
   15994:	vcvt.f64.u32	d7, s15
   15998:	vdiv.f64	d5, d6, d7
   1599c:	vstr	d5, [sp]
   159a0:	bl	11228 <__fprintf_chk@plt>
   159a4:	mov	r3, r5
   159a8:	mov	r0, r4
   159ac:	movw	r2, #56876	; 0xde2c
   159b0:	movt	r2, #1
   159b4:	mov	r1, #1
   159b8:	add	sp, sp, #12
   159bc:	ldrd	r4, [sp]
   159c0:	ldrd	r6, [sp, #8]
   159c4:	ldr	lr, [sp, #16]
   159c8:	add	sp, sp, #20
   159cc:	b	11228 <__fprintf_chk@plt>
   159d0:	mov	r5, #0
   159d4:	b	15940 <__assert_fail@plt+0x4610>
   159d8:	andeq	r0, r0, r0
   159dc:	subsmi	r0, r9, r0
   159e0:	strd	r4, [sp, #-16]!
   159e4:	mov	r5, r1
   159e8:	str	r6, [sp, #8]
   159ec:	mov	r6, r0
   159f0:	mov	r0, r1
   159f4:	str	lr, [sp, #12]
   159f8:	ldr	r1, [r6, #8]
   159fc:	ldr	r3, [r6, #24]
   15a00:	blx	r3
   15a04:	ldr	r3, [r6, #8]
   15a08:	cmp	r0, r3
   15a0c:	bcs	15a7c <__assert_fail@plt+0x474c>
   15a10:	ldr	r4, [r6]
   15a14:	ldr	r1, [r4, r0, lsl #3]
   15a18:	add	r4, r4, r0, lsl #3
   15a1c:	cmp	r1, #0
   15a20:	beq	15a5c <__assert_fail@plt+0x472c>
   15a24:	cmp	r1, r5
   15a28:	bne	15a3c <__assert_fail@plt+0x470c>
   15a2c:	b	15a60 <__assert_fail@plt+0x4730>
   15a30:	ldr	r1, [r4]
   15a34:	cmp	r5, r1
   15a38:	beq	15a60 <__assert_fail@plt+0x4730>
   15a3c:	mov	r0, r5
   15a40:	ldr	r3, [r6, #28]
   15a44:	blx	r3
   15a48:	cmp	r0, #0
   15a4c:	bne	15a74 <__assert_fail@plt+0x4744>
   15a50:	ldr	r4, [r4, #4]
   15a54:	cmp	r4, #0
   15a58:	bne	15a30 <__assert_fail@plt+0x4700>
   15a5c:	mov	r1, #0
   15a60:	ldrd	r4, [sp]
   15a64:	mov	r0, r1
   15a68:	ldr	r6, [sp, #8]
   15a6c:	add	sp, sp, #12
   15a70:	pop	{pc}		; (ldr pc, [sp], #4)
   15a74:	ldr	r1, [r4]
   15a78:	b	15a60 <__assert_fail@plt+0x4730>
   15a7c:	bl	112e8 <abort@plt>
   15a80:	ldr	r3, [r0, #16]
   15a84:	cmp	r3, #0
   15a88:	beq	15adc <__assert_fail@plt+0x47ac>
   15a8c:	ldr	r3, [r0]
   15a90:	ldr	r2, [r0, #4]
   15a94:	cmp	r3, r2
   15a98:	bcs	15ad0 <__assert_fail@plt+0x47a0>
   15a9c:	ldr	r0, [r3]
   15aa0:	cmp	r0, #0
   15aa4:	bxne	lr
   15aa8:	sub	r2, r2, #1
   15aac:	sub	r2, r2, r3
   15ab0:	bic	r2, r2, #7
   15ab4:	add	r2, r3, r2
   15ab8:	b	15ac8 <__assert_fail@plt+0x4798>
   15abc:	ldr	r0, [r3, #8]!
   15ac0:	cmp	r0, #0
   15ac4:	bxne	lr
   15ac8:	cmp	r3, r2
   15acc:	bne	15abc <__assert_fail@plt+0x478c>
   15ad0:	str	r4, [sp, #-8]!
   15ad4:	str	lr, [sp, #4]
   15ad8:	bl	112e8 <abort@plt>
   15adc:	mov	r0, r3
   15ae0:	bx	lr
   15ae4:	strd	r4, [sp, #-16]!
   15ae8:	mov	r5, r0
   15aec:	mov	r4, r1
   15af0:	mov	r0, r1
   15af4:	ldr	r1, [r5, #8]
   15af8:	ldr	r3, [r5, #24]
   15afc:	str	r6, [sp, #8]
   15b00:	str	lr, [sp, #12]
   15b04:	blx	r3
   15b08:	ldr	r3, [r5, #8]
   15b0c:	cmp	r0, r3
   15b10:	bcs	15b78 <__assert_fail@plt+0x4848>
   15b14:	ldr	r2, [r5]
   15b18:	add	r2, r2, r0, lsl #3
   15b1c:	mov	r3, r2
   15b20:	b	15b2c <__assert_fail@plt+0x47fc>
   15b24:	cmp	r3, #0
   15b28:	beq	15b44 <__assert_fail@plt+0x4814>
   15b2c:	ldm	r3, {r1, r3}
   15b30:	cmp	r1, r4
   15b34:	bne	15b24 <__assert_fail@plt+0x47f4>
   15b38:	cmp	r3, #0
   15b3c:	ldrne	r0, [r3]
   15b40:	bne	15b68 <__assert_fail@plt+0x4838>
   15b44:	ldr	r3, [r5, #4]
   15b48:	b	15b58 <__assert_fail@plt+0x4828>
   15b4c:	ldr	r0, [r2]
   15b50:	cmp	r0, #0
   15b54:	bne	15b68 <__assert_fail@plt+0x4838>
   15b58:	add	r2, r2, #8
   15b5c:	cmp	r3, r2
   15b60:	bhi	15b4c <__assert_fail@plt+0x481c>
   15b64:	mov	r0, #0
   15b68:	ldrd	r4, [sp]
   15b6c:	ldr	r6, [sp, #8]
   15b70:	add	sp, sp, #12
   15b74:	pop	{pc}		; (ldr pc, [sp], #4)
   15b78:	bl	112e8 <abort@plt>
   15b7c:	strd	r4, [sp, #-16]!
   15b80:	mov	r3, #0
   15b84:	ldr	r5, [r0]
   15b88:	str	r6, [sp, #8]
   15b8c:	str	lr, [sp, #12]
   15b90:	ldr	lr, [r0, #4]
   15b94:	cmp	lr, r5
   15b98:	bls	15bb4 <__assert_fail@plt+0x4884>
   15b9c:	ldr	ip, [r5]
   15ba0:	cmp	ip, #0
   15ba4:	bne	15bc8 <__assert_fail@plt+0x4898>
   15ba8:	add	r5, r5, #8
   15bac:	cmp	r5, lr
   15bb0:	bcc	15b9c <__assert_fail@plt+0x486c>
   15bb4:	ldrd	r4, [sp]
   15bb8:	mov	r0, r3
   15bbc:	ldr	r6, [sp, #8]
   15bc0:	add	sp, sp, #12
   15bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   15bc8:	cmp	r2, r3
   15bcc:	bls	15bb4 <__assert_fail@plt+0x4884>
   15bd0:	str	ip, [r1, r3, lsl #2]
   15bd4:	add	r4, r3, #1
   15bd8:	lsl	lr, r3, #2
   15bdc:	ldr	ip, [r5, #4]
   15be0:	cmp	ip, #0
   15be4:	beq	15c44 <__assert_fail@plt+0x4914>
   15be8:	cmp	r2, r4
   15bec:	bls	15c38 <__assert_fail@plt+0x4908>
   15bf0:	ldr	r6, [ip]
   15bf4:	add	r3, r3, #2
   15bf8:	str	r6, [r1, r4, lsl #2]
   15bfc:	ldr	ip, [ip, #4]
   15c00:	cmp	ip, #0
   15c04:	beq	15c30 <__assert_fail@plt+0x4900>
   15c08:	add	lr, lr, #4
   15c0c:	add	lr, r1, lr
   15c10:	cmp	r2, r3
   15c14:	add	r3, r3, #1
   15c18:	beq	15c3c <__assert_fail@plt+0x490c>
   15c1c:	ldr	r4, [ip]
   15c20:	str	r4, [lr, #4]!
   15c24:	ldr	ip, [ip, #4]
   15c28:	cmp	ip, #0
   15c2c:	bne	15c10 <__assert_fail@plt+0x48e0>
   15c30:	ldr	lr, [r0, #4]
   15c34:	b	15ba8 <__assert_fail@plt+0x4878>
   15c38:	mov	r2, r4
   15c3c:	mov	r3, r2
   15c40:	b	15bb4 <__assert_fail@plt+0x4884>
   15c44:	mov	r3, r4
   15c48:	ldr	lr, [r0, #4]
   15c4c:	b	15ba8 <__assert_fail@plt+0x4878>
   15c50:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15c54:	ldr	r3, [r0, #4]
   15c58:	strd	r6, [sp, #8]
   15c5c:	strd	r8, [sp, #16]
   15c60:	ldr	r8, [r0]
   15c64:	str	sl, [sp, #24]
   15c68:	str	lr, [sp, #28]
   15c6c:	cmp	r3, r8
   15c70:	bls	15cec <__assert_fail@plt+0x49bc>
   15c74:	mov	r7, r2
   15c78:	mov	r6, r1
   15c7c:	mov	r9, r0
   15c80:	mov	r5, #0
   15c84:	ldr	r0, [r8]
   15c88:	cmp	r0, #0
   15c8c:	bne	15cb8 <__assert_fail@plt+0x4988>
   15c90:	add	r8, r8, #8
   15c94:	cmp	r8, r3
   15c98:	bcc	15c84 <__assert_fail@plt+0x4954>
   15c9c:	mov	r0, r5
   15ca0:	ldrd	r4, [sp]
   15ca4:	ldrd	r6, [sp, #8]
   15ca8:	ldrd	r8, [sp, #16]
   15cac:	ldr	sl, [sp, #24]
   15cb0:	add	sp, sp, #28
   15cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   15cb8:	mov	r4, r8
   15cbc:	b	15cc4 <__assert_fail@plt+0x4994>
   15cc0:	ldr	r0, [r4]
   15cc4:	mov	r1, r7
   15cc8:	blx	r6
   15ccc:	cmp	r0, #0
   15cd0:	beq	15c9c <__assert_fail@plt+0x496c>
   15cd4:	ldr	r4, [r4, #4]
   15cd8:	add	r5, r5, #1
   15cdc:	cmp	r4, #0
   15ce0:	bne	15cc0 <__assert_fail@plt+0x4990>
   15ce4:	ldr	r3, [r9, #4]
   15ce8:	b	15c90 <__assert_fail@plt+0x4960>
   15cec:	mov	r5, #0
   15cf0:	b	15c9c <__assert_fail@plt+0x496c>
   15cf4:	ldrb	r2, [r0]
   15cf8:	cmp	r2, #0
   15cfc:	beq	15d28 <__assert_fail@plt+0x49f8>
   15d00:	mov	r3, #0
   15d04:	rsb	r3, r3, r3, lsl #5
   15d08:	add	r3, r3, r2
   15d0c:	ldrb	r2, [r0, #1]!
   15d10:	udiv	ip, r3, r1
   15d14:	cmp	r2, #0
   15d18:	mls	r3, r1, ip, r3
   15d1c:	bne	15d04 <__assert_fail@plt+0x49d4>
   15d20:	mov	r0, r3
   15d24:	bx	lr
   15d28:	mov	r3, r2
   15d2c:	mov	r0, r3
   15d30:	bx	lr
   15d34:	movw	r3, #56772	; 0xddc4
   15d38:	movt	r3, #1
   15d3c:	strd	r4, [sp, #-8]!
   15d40:	ldrd	r4, [r3]
   15d44:	ldr	r1, [r3, #16]
   15d48:	ldrd	r2, [r3, #8]
   15d4c:	strd	r4, [r0]
   15d50:	ldrd	r4, [sp]
   15d54:	add	sp, sp, #8
   15d58:	strd	r2, [r0, #8]
   15d5c:	str	r1, [r0, #16]
   15d60:	bx	lr
   15d64:	cmp	r2, #0
   15d68:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15d6c:	movw	r4, #21544	; 0x5428
   15d70:	movt	r4, #1
   15d74:	movne	r4, r2
   15d78:	strd	r6, [sp, #8]
   15d7c:	cmp	r3, #0
   15d80:	str	r8, [sp, #16]
   15d84:	mov	r8, r0
   15d88:	mov	r0, #40	; 0x28
   15d8c:	movw	r5, #21560	; 0x5438
   15d90:	movt	r5, #1
   15d94:	mov	r7, r1
   15d98:	str	lr, [sp, #20]
   15d9c:	movne	r5, r3
   15da0:	bl	1c470 <__assert_fail@plt+0xb140>
   15da4:	subs	r6, r0, #0
   15da8:	beq	15dec <__assert_fail@plt+0x4abc>
   15dac:	cmp	r7, #0
   15db0:	movw	r3, #56772	; 0xddc4
   15db4:	movt	r3, #1
   15db8:	beq	15e78 <__assert_fail@plt+0x4b48>
   15dbc:	cmp	r7, r3
   15dc0:	str	r7, [r6, #20]
   15dc4:	beq	15e7c <__assert_fail@plt+0x4b4c>
   15dc8:	vldr	s14, [pc, #456]	; 15f98 <__assert_fail@plt+0x4c68>
   15dcc:	vldr	s15, [r7, #8]
   15dd0:	vcmpe.f32	s15, s14
   15dd4:	vmrs	APSR_nzcv, fpscr
   15dd8:	bgt	15e04 <__assert_fail@plt+0x4ad4>
   15ddc:	str	r3, [r6, #20]
   15de0:	mov	r0, r6
   15de4:	mov	r6, #0
   15de8:	bl	12d1c <__assert_fail@plt+0x19ec>
   15dec:	mov	r0, r6
   15df0:	ldrd	r4, [sp]
   15df4:	ldrd	r6, [sp, #8]
   15df8:	ldr	r8, [sp, #16]
   15dfc:	add	sp, sp, #20
   15e00:	pop	{pc}		; (ldr pc, [sp], #4)
   15e04:	vldr	s13, [pc, #400]	; 15f9c <__assert_fail@plt+0x4c6c>
   15e08:	vcmpe.f32	s15, s13
   15e0c:	vmrs	APSR_nzcv, fpscr
   15e10:	bpl	15ddc <__assert_fail@plt+0x4aac>
   15e14:	vldr	s13, [pc, #388]	; 15fa0 <__assert_fail@plt+0x4c70>
   15e18:	vldr	s12, [r7, #12]
   15e1c:	vcmpe.f32	s12, s13
   15e20:	vmrs	APSR_nzcv, fpscr
   15e24:	ble	15ddc <__assert_fail@plt+0x4aac>
   15e28:	vldr	s13, [r7]
   15e2c:	vcmpe.f32	s13, #0.0
   15e30:	vmrs	APSR_nzcv, fpscr
   15e34:	blt	15ddc <__assert_fail@plt+0x4aac>
   15e38:	vadd.f32	s14, s13, s14
   15e3c:	vldr	s13, [r7, #4]
   15e40:	vcmpe.f32	s14, s13
   15e44:	vmrs	APSR_nzcv, fpscr
   15e48:	bpl	15ddc <__assert_fail@plt+0x4aac>
   15e4c:	vldr	s12, [pc, #336]	; 15fa4 <__assert_fail@plt+0x4c74>
   15e50:	vcmpe.f32	s13, s12
   15e54:	vmrs	APSR_nzcv, fpscr
   15e58:	bhi	15ddc <__assert_fail@plt+0x4aac>
   15e5c:	vcmpe.f32	s15, s14
   15e60:	vmrs	APSR_nzcv, fpscr
   15e64:	ble	15ddc <__assert_fail@plt+0x4aac>
   15e68:	ldrb	r3, [r7, #16]
   15e6c:	cmp	r3, #0
   15e70:	bne	15ea4 <__assert_fail@plt+0x4b74>
   15e74:	b	15e80 <__assert_fail@plt+0x4b50>
   15e78:	str	r3, [r6, #20]
   15e7c:	vldr	s15, [pc, #292]	; 15fa8 <__assert_fail@plt+0x4c78>
   15e80:	vmov	s14, r8
   15e84:	vldr	s13, [pc, #288]	; 15fac <__assert_fail@plt+0x4c7c>
   15e88:	vcvt.f32.u32	s12, s14
   15e8c:	vdiv.f32	s14, s12, s15
   15e90:	vcmpe.f32	s14, s13
   15e94:	vmrs	APSR_nzcv, fpscr
   15e98:	bge	15f2c <__assert_fail@plt+0x4bfc>
   15e9c:	vcvt.u32.f32	s15, s14
   15ea0:	vmov	r8, s15
   15ea4:	cmp	r8, #10
   15ea8:	movcs	r3, r8
   15eac:	movcc	r3, #10
   15eb0:	orr	r3, r3, #1
   15eb4:	cmn	r3, #1
   15eb8:	beq	15f2c <__assert_fail@plt+0x4bfc>
   15ebc:	movw	lr, #43691	; 0xaaab
   15ec0:	movt	lr, #43690	; 0xaaaa
   15ec4:	umull	r1, r2, lr, r3
   15ec8:	cmp	r3, #9
   15ecc:	lsr	r2, r2, #1
   15ed0:	add	r2, r2, r2, lsl #1
   15ed4:	sub	r2, r3, r2
   15ed8:	bls	15f18 <__assert_fail@plt+0x4be8>
   15edc:	cmp	r2, #0
   15ee0:	beq	15f20 <__assert_fail@plt+0x4bf0>
   15ee4:	mov	ip, #16
   15ee8:	mov	r0, #9
   15eec:	mov	r1, #3
   15ef0:	b	15efc <__assert_fail@plt+0x4bcc>
   15ef4:	cmp	r2, #0
   15ef8:	beq	15f20 <__assert_fail@plt+0x4bf0>
   15efc:	add	r1, r1, #2
   15f00:	add	r0, r0, ip
   15f04:	cmp	r0, r3
   15f08:	add	ip, ip, #8
   15f0c:	udiv	r2, r3, r1
   15f10:	mls	r2, r1, r2, r3
   15f14:	bcc	15ef4 <__assert_fail@plt+0x4bc4>
   15f18:	cmp	r2, #0
   15f1c:	bne	15f38 <__assert_fail@plt+0x4c08>
   15f20:	add	r3, r3, #2
   15f24:	cmn	r3, #1
   15f28:	bne	15ec4 <__assert_fail@plt+0x4b94>
   15f2c:	mov	r3, #0
   15f30:	str	r3, [r6, #8]
   15f34:	b	15de0 <__assert_fail@plt+0x4ab0>
   15f38:	lsrs	r2, r3, #30
   15f3c:	movne	r7, #1
   15f40:	moveq	r7, #0
   15f44:	tst	r3, #536870912	; 0x20000000
   15f48:	bne	15f2c <__assert_fail@plt+0x4bfc>
   15f4c:	cmp	r7, #0
   15f50:	bne	15f2c <__assert_fail@plt+0x4bfc>
   15f54:	mov	r0, r3
   15f58:	mov	r1, #8
   15f5c:	str	r3, [r6, #8]
   15f60:	bl	1c3fc <__assert_fail@plt+0xb0cc>
   15f64:	cmp	r0, #0
   15f68:	str	r0, [r6]
   15f6c:	beq	15de0 <__assert_fail@plt+0x4ab0>
   15f70:	ldr	r3, [r6, #8]
   15f74:	str	r7, [r6, #12]
   15f78:	str	r7, [r6, #16]
   15f7c:	strd	r4, [r6, #24]
   15f80:	str	r7, [r6, #36]	; 0x24
   15f84:	add	r0, r0, r3, lsl #3
   15f88:	ldr	r3, [sp, #24]
   15f8c:	str	r0, [r6, #4]
   15f90:	str	r3, [r6, #32]
   15f94:	b	15dec <__assert_fail@plt+0x4abc>
   15f98:	stclcc	12, cr12, [ip, #820]	; 0x334
   15f9c:	svccc	0x00666666
   15fa0:	svccc	0x008ccccd
   15fa4:	svccc	0x00800000
   15fa8:	svccc	0x004ccccd
   15fac:	svcmi	0x00800000
   15fb0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15fb4:	mov	r5, r0
   15fb8:	ldr	r2, [r0, #4]
   15fbc:	strd	r6, [sp, #8]
   15fc0:	ldr	r6, [r0]
   15fc4:	str	r8, [sp, #16]
   15fc8:	str	lr, [sp, #20]
   15fcc:	cmp	r6, r2
   15fd0:	addcc	r6, r6, #8
   15fd4:	movcc	r7, #0
   15fd8:	bcc	15fec <__assert_fail@plt+0x4cbc>
   15fdc:	b	16060 <__assert_fail@plt+0x4d30>
   15fe0:	cmp	r2, r6
   15fe4:	add	r6, r6, #8
   15fe8:	bls	16060 <__assert_fail@plt+0x4d30>
   15fec:	ldr	r3, [r6, #-8]
   15ff0:	cmp	r3, #0
   15ff4:	beq	15fe0 <__assert_fail@plt+0x4cb0>
   15ff8:	ldr	r4, [r6, #-4]
   15ffc:	ldr	r3, [r5, #32]
   16000:	cmp	r4, #0
   16004:	beq	16038 <__assert_fail@plt+0x4d08>
   16008:	cmp	r3, #0
   1600c:	beq	16080 <__assert_fail@plt+0x4d50>
   16010:	ldr	r0, [r4]
   16014:	blx	r3
   16018:	ldr	r1, [r4, #4]
   1601c:	ldr	r3, [r5, #32]
   16020:	ldr	r2, [r5, #36]	; 0x24
   16024:	str	r7, [r4]
   16028:	str	r2, [r4, #4]
   1602c:	str	r4, [r5, #36]	; 0x24
   16030:	subs	r4, r1, #0
   16034:	bne	16008 <__assert_fail@plt+0x4cd8>
   16038:	cmp	r3, #0
   1603c:	beq	16048 <__assert_fail@plt+0x4d18>
   16040:	ldr	r0, [r6, #-8]
   16044:	blx	r3
   16048:	str	r7, [r6, #-8]
   1604c:	str	r7, [r6, #-4]
   16050:	ldr	r2, [r5, #4]
   16054:	cmp	r2, r6
   16058:	add	r6, r6, #8
   1605c:	bhi	15fec <__assert_fail@plt+0x4cbc>
   16060:	mov	r3, #0
   16064:	ldrd	r6, [sp, #8]
   16068:	ldr	r8, [sp, #16]
   1606c:	str	r3, [r5, #12]
   16070:	str	r3, [r5, #16]
   16074:	ldrd	r4, [sp]
   16078:	add	sp, sp, #20
   1607c:	pop	{pc}		; (ldr pc, [sp], #4)
   16080:	ldr	r2, [r5, #36]	; 0x24
   16084:	str	r7, [r4]
   16088:	ldr	r3, [r4, #4]
   1608c:	str	r2, [r4, #4]
   16090:	mov	r2, r4
   16094:	str	r2, [r5, #36]	; 0x24
   16098:	subs	r4, r3, #0
   1609c:	bne	16084 <__assert_fail@plt+0x4d54>
   160a0:	b	16048 <__assert_fail@plt+0x4d18>
   160a4:	strd	r4, [sp, #-16]!
   160a8:	ldr	r2, [r0, #32]
   160ac:	ldr	r5, [r0]
   160b0:	ldr	r3, [r0, #4]
   160b4:	cmp	r2, #0
   160b8:	str	r6, [sp, #8]
   160bc:	mov	r6, r0
   160c0:	str	lr, [sp, #12]
   160c4:	beq	1612c <__assert_fail@plt+0x4dfc>
   160c8:	ldr	r2, [r0, #16]
   160cc:	cmp	r2, #0
   160d0:	beq	1612c <__assert_fail@plt+0x4dfc>
   160d4:	cmp	r5, r3
   160d8:	bcc	160ec <__assert_fail@plt+0x4dbc>
   160dc:	b	16160 <__assert_fail@plt+0x4e30>
   160e0:	add	r5, r5, #8
   160e4:	cmp	r5, r3
   160e8:	bcs	16128 <__assert_fail@plt+0x4df8>
   160ec:	ldr	r0, [r5]
   160f0:	cmp	r0, #0
   160f4:	beq	160e0 <__assert_fail@plt+0x4db0>
   160f8:	mov	r4, r5
   160fc:	b	16104 <__assert_fail@plt+0x4dd4>
   16100:	ldr	r0, [r4]
   16104:	ldr	r3, [r6, #32]
   16108:	blx	r3
   1610c:	ldr	r4, [r4, #4]
   16110:	cmp	r4, #0
   16114:	bne	16100 <__assert_fail@plt+0x4dd0>
   16118:	ldr	r3, [r6, #4]
   1611c:	add	r5, r5, #8
   16120:	cmp	r5, r3
   16124:	bcc	160ec <__assert_fail@plt+0x4dbc>
   16128:	ldr	r5, [r6]
   1612c:	cmp	r3, r5
   16130:	bls	16160 <__assert_fail@plt+0x4e30>
   16134:	ldr	r0, [r5, #4]
   16138:	cmp	r0, #0
   1613c:	beq	16154 <__assert_fail@plt+0x4e24>
   16140:	ldr	r4, [r0, #4]
   16144:	bl	12d1c <__assert_fail@plt+0x19ec>
   16148:	subs	r0, r4, #0
   1614c:	bne	16140 <__assert_fail@plt+0x4e10>
   16150:	ldr	r3, [r6, #4]
   16154:	add	r5, r5, #8
   16158:	cmp	r5, r3
   1615c:	bcc	16134 <__assert_fail@plt+0x4e04>
   16160:	ldr	r0, [r6, #36]	; 0x24
   16164:	cmp	r0, #0
   16168:	beq	1617c <__assert_fail@plt+0x4e4c>
   1616c:	ldr	r4, [r0, #4]
   16170:	bl	12d1c <__assert_fail@plt+0x19ec>
   16174:	subs	r0, r4, #0
   16178:	bne	1616c <__assert_fail@plt+0x4e3c>
   1617c:	ldr	r0, [r6]
   16180:	bl	12d1c <__assert_fail@plt+0x19ec>
   16184:	mov	r0, r6
   16188:	ldrd	r4, [sp]
   1618c:	ldr	r6, [sp, #8]
   16190:	ldr	lr, [sp, #12]
   16194:	add	sp, sp, #16
   16198:	b	12d1c <__assert_fail@plt+0x19ec>
   1619c:	ldr	r3, [r0, #20]
   161a0:	strd	r4, [sp, #-20]!	; 0xffffffec
   161a4:	mov	r5, r0
   161a8:	ldrb	r2, [r3, #16]
   161ac:	strd	r6, [sp, #8]
   161b0:	str	lr, [sp, #16]
   161b4:	sub	sp, sp, #44	; 0x2c
   161b8:	cmp	r2, #0
   161bc:	bne	161e8 <__assert_fail@plt+0x4eb8>
   161c0:	vmov	s15, r1
   161c4:	vldr	s12, [r3, #8]
   161c8:	vldr	s13, [pc, #444]	; 1638c <__assert_fail@plt+0x505c>
   161cc:	vcvt.f32.u32	s15, s15
   161d0:	vdiv.f32	s14, s15, s12
   161d4:	vcmpe.f32	s14, s13
   161d8:	vmrs	APSR_nzcv, fpscr
   161dc:	vcvtlt.u32.f32	s15, s14
   161e0:	vmovlt	r1, s15
   161e4:	bge	1626c <__assert_fail@plt+0x4f3c>
   161e8:	cmp	r1, #10
   161ec:	movcc	r1, #10
   161f0:	orr	r4, r1, #1
   161f4:	cmn	r4, #1
   161f8:	beq	1626c <__assert_fail@plt+0x4f3c>
   161fc:	movw	ip, #43691	; 0xaaab
   16200:	movt	ip, #43690	; 0xaaaa
   16204:	umull	r2, r3, ip, r4
   16208:	cmp	r4, #9
   1620c:	lsr	r3, r3, #1
   16210:	add	r3, r3, r3, lsl #1
   16214:	sub	r3, r4, r3
   16218:	bls	16258 <__assert_fail@plt+0x4f28>
   1621c:	cmp	r3, #0
   16220:	beq	16260 <__assert_fail@plt+0x4f30>
   16224:	mov	r0, #16
   16228:	mov	r1, #9
   1622c:	mov	r2, #3
   16230:	b	16240 <__assert_fail@plt+0x4f10>
   16234:	cmp	r3, #0
   16238:	add	r0, r0, #8
   1623c:	beq	16260 <__assert_fail@plt+0x4f30>
   16240:	add	r2, r2, #2
   16244:	add	r1, r1, r0
   16248:	cmp	r1, r4
   1624c:	udiv	r3, r4, r2
   16250:	mls	r3, r2, r3, r4
   16254:	bcc	16234 <__assert_fail@plt+0x4f04>
   16258:	cmp	r3, #0
   1625c:	bne	16288 <__assert_fail@plt+0x4f58>
   16260:	add	r4, r4, #2
   16264:	cmn	r4, #1
   16268:	bne	16204 <__assert_fail@plt+0x4ed4>
   1626c:	mov	r4, #0
   16270:	mov	r0, r4
   16274:	add	sp, sp, #44	; 0x2c
   16278:	ldrd	r4, [sp]
   1627c:	ldrd	r6, [sp, #8]
   16280:	add	sp, sp, #16
   16284:	pop	{pc}		; (ldr pc, [sp], #4)
   16288:	lsrs	r3, r4, #30
   1628c:	movne	r6, #1
   16290:	moveq	r6, #0
   16294:	tst	r4, #536870912	; 0x20000000
   16298:	bne	1626c <__assert_fail@plt+0x4f3c>
   1629c:	cmp	r6, #0
   162a0:	bne	1626c <__assert_fail@plt+0x4f3c>
   162a4:	ldr	r3, [r5, #8]
   162a8:	cmp	r3, r4
   162ac:	beq	16354 <__assert_fail@plt+0x5024>
   162b0:	mov	r1, #8
   162b4:	mov	r0, r4
   162b8:	bl	1c3fc <__assert_fail@plt+0xb0cc>
   162bc:	cmp	r0, #0
   162c0:	str	r0, [sp]
   162c4:	beq	1626c <__assert_fail@plt+0x4f3c>
   162c8:	add	r3, r0, r4, lsl #3
   162cc:	ldr	r7, [r5, #20]
   162d0:	mov	r2, r6
   162d4:	mov	r0, sp
   162d8:	mov	r1, r5
   162dc:	ldr	lr, [r5, #28]
   162e0:	stmib	sp, {r3, r4, r6}
   162e4:	ldr	r4, [r5, #24]
   162e8:	strd	r6, [sp, #16]
   162ec:	ldr	ip, [r5, #32]
   162f0:	ldr	r3, [r5, #36]	; 0x24
   162f4:	str	r4, [sp, #24]
   162f8:	str	lr, [sp, #28]
   162fc:	str	ip, [sp, #32]
   16300:	str	r3, [sp, #36]	; 0x24
   16304:	bl	155a8 <__assert_fail@plt+0x4278>
   16308:	subs	r4, r0, #0
   1630c:	bne	1635c <__assert_fail@plt+0x502c>
   16310:	ldr	r3, [sp, #36]	; 0x24
   16314:	mov	r2, #1
   16318:	mov	r1, sp
   1631c:	mov	r0, r5
   16320:	str	r3, [r5, #36]	; 0x24
   16324:	bl	155a8 <__assert_fail@plt+0x4278>
   16328:	cmp	r0, #0
   1632c:	beq	16388 <__assert_fail@plt+0x5058>
   16330:	mov	r1, sp
   16334:	mov	r0, r5
   16338:	mov	r2, r4
   1633c:	bl	155a8 <__assert_fail@plt+0x4278>
   16340:	cmp	r0, #0
   16344:	beq	16388 <__assert_fail@plt+0x5058>
   16348:	ldr	r0, [sp]
   1634c:	bl	12d1c <__assert_fail@plt+0x19ec>
   16350:	b	16270 <__assert_fail@plt+0x4f40>
   16354:	mov	r4, #1
   16358:	b	16270 <__assert_fail@plt+0x4f40>
   1635c:	ldr	r0, [r5]
   16360:	bl	12d1c <__assert_fail@plt+0x19ec>
   16364:	ldrd	r2, [sp]
   16368:	ldr	r1, [sp, #8]
   1636c:	strd	r2, [r5]
   16370:	ldr	r2, [sp, #12]
   16374:	str	r1, [r5, #8]
   16378:	ldr	r3, [sp, #36]	; 0x24
   1637c:	str	r2, [r5, #12]
   16380:	str	r3, [r5, #36]	; 0x24
   16384:	b	16270 <__assert_fail@plt+0x4f40>
   16388:	bl	112e8 <abort@plt>
   1638c:	svcmi	0x00800000
   16390:	strd	r4, [sp, #-16]!
   16394:	str	r6, [sp, #8]
   16398:	subs	r6, r1, #0
   1639c:	str	lr, [sp, #12]
   163a0:	sub	sp, sp, #8
   163a4:	beq	16530 <__assert_fail@plt+0x5200>
   163a8:	mov	r3, #0
   163ac:	mov	r5, r2
   163b0:	add	r2, sp, #4
   163b4:	mov	r4, r0
   163b8:	bl	15448 <__assert_fail@plt+0x4118>
   163bc:	subs	r3, r0, #0
   163c0:	beq	163ec <__assert_fail@plt+0x50bc>
   163c4:	cmp	r5, #0
   163c8:	moveq	r0, r5
   163cc:	beq	163d8 <__assert_fail@plt+0x50a8>
   163d0:	mov	r0, #0
   163d4:	str	r3, [r5]
   163d8:	add	sp, sp, #8
   163dc:	ldrd	r4, [sp]
   163e0:	ldr	r6, [sp, #8]
   163e4:	add	sp, sp, #12
   163e8:	pop	{pc}		; (ldr pc, [sp], #4)
   163ec:	vldr	s15, [r4, #8]
   163f0:	vldr	s14, [r4, #12]
   163f4:	ldr	r3, [r4, #20]
   163f8:	vcvt.f32.u32	s15, s15
   163fc:	vcvt.f32.u32	s14, s14
   16400:	vldr	s13, [r3, #8]
   16404:	vmul.f32	s12, s13, s15
   16408:	vcmpe.f32	s14, s12
   1640c:	vmrs	APSR_nzcv, fpscr
   16410:	bgt	16458 <__assert_fail@plt+0x5128>
   16414:	ldr	r2, [sp, #4]
   16418:	ldr	r3, [r2]
   1641c:	cmp	r3, #0
   16420:	beq	1655c <__assert_fail@plt+0x522c>
   16424:	ldr	r3, [r4, #36]	; 0x24
   16428:	cmp	r3, #0
   1642c:	beq	16580 <__assert_fail@plt+0x5250>
   16430:	ldr	r1, [r3, #4]
   16434:	str	r1, [r4, #36]	; 0x24
   16438:	ldr	r1, [r4, #16]
   1643c:	mov	r0, #1
   16440:	ldr	ip, [r2, #4]
   16444:	add	r1, r1, r0
   16448:	stm	r3, {r6, ip}
   1644c:	str	r3, [r2, #4]
   16450:	str	r1, [r4, #16]
   16454:	b	163d8 <__assert_fail@plt+0x50a8>
   16458:	movw	r2, #56772	; 0xddc4
   1645c:	movt	r2, #1
   16460:	cmp	r3, r2
   16464:	beq	16598 <__assert_fail@plt+0x5268>
   16468:	vldr	s12, [pc, #320]	; 165b0 <__assert_fail@plt+0x5280>
   1646c:	vcmpe.f32	s13, s12
   16470:	vmrs	APSR_nzcv, fpscr
   16474:	ble	16534 <__assert_fail@plt+0x5204>
   16478:	vldr	s11, [pc, #308]	; 165b4 <__assert_fail@plt+0x5284>
   1647c:	vcmpe.f32	s13, s11
   16480:	vmrs	APSR_nzcv, fpscr
   16484:	bpl	16534 <__assert_fail@plt+0x5204>
   16488:	vldr	s10, [pc, #296]	; 165b8 <__assert_fail@plt+0x5288>
   1648c:	vldr	s11, [r3, #12]
   16490:	vcmpe.f32	s11, s10
   16494:	vmrs	APSR_nzcv, fpscr
   16498:	ble	16534 <__assert_fail@plt+0x5204>
   1649c:	vldr	s10, [r3]
   164a0:	vcmpe.f32	s10, #0.0
   164a4:	vmrs	APSR_nzcv, fpscr
   164a8:	blt	16534 <__assert_fail@plt+0x5204>
   164ac:	vadd.f32	s12, s10, s12
   164b0:	vldr	s10, [r3, #4]
   164b4:	vcmpe.f32	s12, s10
   164b8:	vmrs	APSR_nzcv, fpscr
   164bc:	bpl	16534 <__assert_fail@plt+0x5204>
   164c0:	vldr	s9, [pc, #244]	; 165bc <__assert_fail@plt+0x528c>
   164c4:	vcmpe.f32	s10, s9
   164c8:	vmrs	APSR_nzcv, fpscr
   164cc:	bhi	16534 <__assert_fail@plt+0x5204>
   164d0:	vcmpe.f32	s13, s12
   164d4:	vmrs	APSR_nzcv, fpscr
   164d8:	ble	16534 <__assert_fail@plt+0x5204>
   164dc:	ldrb	r3, [r3, #16]
   164e0:	vmul.f32	s15, s15, s11
   164e4:	cmp	r3, #0
   164e8:	beq	16554 <__assert_fail@plt+0x5224>
   164ec:	vldr	s14, [pc, #204]	; 165c0 <__assert_fail@plt+0x5290>
   164f0:	vcmpe.f32	s15, s14
   164f4:	vmrs	APSR_nzcv, fpscr
   164f8:	bge	16590 <__assert_fail@plt+0x5260>
   164fc:	vcvt.u32.f32	s15, s15
   16500:	mov	r0, r4
   16504:	vmov	r1, s15
   16508:	bl	1619c <__assert_fail@plt+0x4e6c>
   1650c:	cmp	r0, #0
   16510:	beq	16590 <__assert_fail@plt+0x5260>
   16514:	add	r2, sp, #4
   16518:	mov	r3, #0
   1651c:	mov	r1, r6
   16520:	mov	r0, r4
   16524:	bl	15448 <__assert_fail@plt+0x4118>
   16528:	cmp	r0, #0
   1652c:	beq	16414 <__assert_fail@plt+0x50e4>
   16530:	bl	112e8 <abort@plt>
   16534:	vldr	s13, [pc, #136]	; 165c4 <__assert_fail@plt+0x5294>
   16538:	str	r2, [r4, #20]
   1653c:	vmul.f32	s12, s15, s13
   16540:	vcmpe.f32	s14, s12
   16544:	vmrs	APSR_nzcv, fpscr
   16548:	ble	16414 <__assert_fail@plt+0x50e4>
   1654c:	vldr	s14, [pc, #116]	; 165c8 <__assert_fail@plt+0x5298>
   16550:	vmul.f32	s15, s15, s14
   16554:	vmul.f32	s15, s15, s13
   16558:	b	164ec <__assert_fail@plt+0x51bc>
   1655c:	ldr	r1, [r4, #12]
   16560:	mov	r0, #1
   16564:	ldr	r3, [r4, #16]
   16568:	str	r6, [r2]
   1656c:	add	r2, r1, r0
   16570:	add	r3, r3, r0
   16574:	str	r2, [r4, #12]
   16578:	str	r3, [r4, #16]
   1657c:	b	163d8 <__assert_fail@plt+0x50a8>
   16580:	mov	r0, #8
   16584:	bl	1c470 <__assert_fail@plt+0xb140>
   16588:	subs	r3, r0, #0
   1658c:	bne	165a8 <__assert_fail@plt+0x5278>
   16590:	mvn	r0, #0
   16594:	b	163d8 <__assert_fail@plt+0x50a8>
   16598:	vldr	s14, [pc, #40]	; 165c8 <__assert_fail@plt+0x5298>
   1659c:	vldr	s13, [pc, #32]	; 165c4 <__assert_fail@plt+0x5294>
   165a0:	vmul.f32	s15, s15, s14
   165a4:	b	16554 <__assert_fail@plt+0x5224>
   165a8:	ldr	r2, [sp, #4]
   165ac:	b	16438 <__assert_fail@plt+0x5108>
   165b0:	stclcc	12, cr12, [ip, #820]	; 0x334
   165b4:	svccc	0x00666666
   165b8:	svccc	0x008ccccd
   165bc:	svccc	0x00800000
   165c0:	svcmi	0x00800000
   165c4:	svccc	0x004ccccd
   165c8:	svccc	0x00b4fdf4
   165cc:	strd	r4, [sp, #-16]!
   165d0:	str	r6, [sp, #8]
   165d4:	subs	r6, r1, #0
   165d8:	str	lr, [sp, #12]
   165dc:	sub	sp, sp, #8
   165e0:	beq	1675c <__assert_fail@plt+0x542c>
   165e4:	mov	r3, #0
   165e8:	add	r2, sp, #4
   165ec:	mov	r4, r0
   165f0:	bl	15448 <__assert_fail@plt+0x4118>
   165f4:	subs	r5, r0, #0
   165f8:	beq	16614 <__assert_fail@plt+0x52e4>
   165fc:	mov	r0, r5
   16600:	add	sp, sp, #8
   16604:	ldrd	r4, [sp]
   16608:	ldr	r6, [sp, #8]
   1660c:	add	sp, sp, #12
   16610:	pop	{pc}		; (ldr pc, [sp], #4)
   16614:	vldr	s15, [r4, #8]
   16618:	vldr	s14, [r4, #12]
   1661c:	ldr	r3, [r4, #20]
   16620:	vcvt.f32.u32	s15, s15
   16624:	vcvt.f32.u32	s14, s14
   16628:	vldr	s13, [r3, #8]
   1662c:	vmul.f32	s12, s13, s15
   16630:	vcmpe.f32	s14, s12
   16634:	vmrs	APSR_nzcv, fpscr
   16638:	bgt	16684 <__assert_fail@plt+0x5354>
   1663c:	ldr	r3, [sp, #4]
   16640:	ldr	r2, [r3]
   16644:	cmp	r2, #0
   16648:	beq	16788 <__assert_fail@plt+0x5458>
   1664c:	ldr	r0, [r4, #36]	; 0x24
   16650:	cmp	r0, #0
   16654:	beq	167ac <__assert_fail@plt+0x547c>
   16658:	ldr	r2, [r0, #4]
   1665c:	str	r2, [r4, #36]	; 0x24
   16660:	ldr	r2, [r4, #16]
   16664:	mov	r5, r6
   16668:	ldr	r1, [r3, #4]
   1666c:	str	r6, [r0]
   16670:	add	r2, r2, #1
   16674:	str	r1, [r0, #4]
   16678:	str	r0, [r3, #4]
   1667c:	str	r2, [r4, #16]
   16680:	b	165fc <__assert_fail@plt+0x52cc>
   16684:	movw	r2, #56772	; 0xddc4
   16688:	movt	r2, #1
   1668c:	cmp	r3, r2
   16690:	beq	167c4 <__assert_fail@plt+0x5494>
   16694:	vldr	s12, [pc, #312]	; 167d4 <__assert_fail@plt+0x54a4>
   16698:	vcmpe.f32	s13, s12
   1669c:	vmrs	APSR_nzcv, fpscr
   166a0:	ble	16760 <__assert_fail@plt+0x5430>
   166a4:	vldr	s11, [pc, #300]	; 167d8 <__assert_fail@plt+0x54a8>
   166a8:	vcmpe.f32	s13, s11
   166ac:	vmrs	APSR_nzcv, fpscr
   166b0:	bpl	16760 <__assert_fail@plt+0x5430>
   166b4:	vldr	s10, [pc, #288]	; 167dc <__assert_fail@plt+0x54ac>
   166b8:	vldr	s11, [r3, #12]
   166bc:	vcmpe.f32	s11, s10
   166c0:	vmrs	APSR_nzcv, fpscr
   166c4:	ble	16760 <__assert_fail@plt+0x5430>
   166c8:	vldr	s10, [r3]
   166cc:	vcmpe.f32	s10, #0.0
   166d0:	vmrs	APSR_nzcv, fpscr
   166d4:	blt	16760 <__assert_fail@plt+0x5430>
   166d8:	vadd.f32	s12, s10, s12
   166dc:	vldr	s10, [r3, #4]
   166e0:	vcmpe.f32	s12, s10
   166e4:	vmrs	APSR_nzcv, fpscr
   166e8:	bpl	16760 <__assert_fail@plt+0x5430>
   166ec:	vldr	s9, [pc, #236]	; 167e0 <__assert_fail@plt+0x54b0>
   166f0:	vcmpe.f32	s10, s9
   166f4:	vmrs	APSR_nzcv, fpscr
   166f8:	bhi	16760 <__assert_fail@plt+0x5430>
   166fc:	vcmpe.f32	s13, s12
   16700:	vmrs	APSR_nzcv, fpscr
   16704:	ble	16760 <__assert_fail@plt+0x5430>
   16708:	ldrb	r3, [r3, #16]
   1670c:	vmul.f32	s15, s15, s11
   16710:	cmp	r3, #0
   16714:	beq	16780 <__assert_fail@plt+0x5450>
   16718:	vldr	s14, [pc, #196]	; 167e4 <__assert_fail@plt+0x54b4>
   1671c:	vcmpe.f32	s15, s14
   16720:	vmrs	APSR_nzcv, fpscr
   16724:	bge	165fc <__assert_fail@plt+0x52cc>
   16728:	vcvt.u32.f32	s15, s15
   1672c:	mov	r0, r4
   16730:	vmov	r1, s15
   16734:	bl	1619c <__assert_fail@plt+0x4e6c>
   16738:	cmp	r0, #0
   1673c:	beq	165fc <__assert_fail@plt+0x52cc>
   16740:	add	r2, sp, #4
   16744:	mov	r3, #0
   16748:	mov	r1, r6
   1674c:	mov	r0, r4
   16750:	bl	15448 <__assert_fail@plt+0x4118>
   16754:	cmp	r0, #0
   16758:	beq	1663c <__assert_fail@plt+0x530c>
   1675c:	bl	112e8 <abort@plt>
   16760:	vldr	s13, [pc, #128]	; 167e8 <__assert_fail@plt+0x54b8>
   16764:	str	r2, [r4, #20]
   16768:	vmul.f32	s12, s15, s13
   1676c:	vcmpe.f32	s14, s12
   16770:	vmrs	APSR_nzcv, fpscr
   16774:	ble	1663c <__assert_fail@plt+0x530c>
   16778:	vldr	s14, [pc, #108]	; 167ec <__assert_fail@plt+0x54bc>
   1677c:	vmul.f32	s15, s15, s14
   16780:	vmul.f32	s15, s15, s13
   16784:	b	16718 <__assert_fail@plt+0x53e8>
   16788:	ldr	r2, [r4, #12]
   1678c:	mov	r5, r6
   16790:	str	r6, [r3]
   16794:	ldr	r3, [r4, #16]
   16798:	add	r2, r2, #1
   1679c:	add	r3, r3, #1
   167a0:	str	r2, [r4, #12]
   167a4:	str	r3, [r4, #16]
   167a8:	b	165fc <__assert_fail@plt+0x52cc>
   167ac:	mov	r0, #8
   167b0:	bl	1c470 <__assert_fail@plt+0xb140>
   167b4:	cmp	r0, #0
   167b8:	beq	165fc <__assert_fail@plt+0x52cc>
   167bc:	ldr	r3, [sp, #4]
   167c0:	b	16660 <__assert_fail@plt+0x5330>
   167c4:	vldr	s14, [pc, #32]	; 167ec <__assert_fail@plt+0x54bc>
   167c8:	vldr	s13, [pc, #24]	; 167e8 <__assert_fail@plt+0x54b8>
   167cc:	vmul.f32	s15, s15, s14
   167d0:	b	16780 <__assert_fail@plt+0x5450>
   167d4:	stclcc	12, cr12, [ip, #820]	; 0x334
   167d8:	svccc	0x00666666
   167dc:	svccc	0x008ccccd
   167e0:	svccc	0x00800000
   167e4:	svcmi	0x00800000
   167e8:	svccc	0x004ccccd
   167ec:	svccc	0x00b4fdf4
   167f0:	strd	r4, [sp, #-16]!
   167f4:	mov	r3, #1
   167f8:	mov	r4, r0
   167fc:	str	r6, [sp, #8]
   16800:	str	lr, [sp, #12]
   16804:	sub	sp, sp, #8
   16808:	add	r2, sp, #4
   1680c:	bl	15448 <__assert_fail@plt+0x4118>
   16810:	subs	r5, r0, #0
   16814:	beq	16834 <__assert_fail@plt+0x5504>
   16818:	ldr	r2, [sp, #4]
   1681c:	ldr	r3, [r4, #16]
   16820:	ldr	r2, [r2]
   16824:	sub	r3, r3, #1
   16828:	str	r3, [r4, #16]
   1682c:	cmp	r2, #0
   16830:	beq	1684c <__assert_fail@plt+0x551c>
   16834:	mov	r0, r5
   16838:	add	sp, sp, #8
   1683c:	ldrd	r4, [sp]
   16840:	ldr	r6, [sp, #8]
   16844:	add	sp, sp, #12
   16848:	pop	{pc}		; (ldr pc, [sp], #4)
   1684c:	vldr	s15, [r4, #8]
   16850:	ldr	r3, [r4, #12]
   16854:	ldr	r2, [r4, #20]
   16858:	vcvt.f32.u32	s15, s15
   1685c:	sub	r3, r3, #1
   16860:	vmov	s14, r3
   16864:	vldr	s13, [r2]
   16868:	str	r3, [r4, #12]
   1686c:	vmul.f32	s12, s13, s15
   16870:	vcvt.f32.u32	s14, s14
   16874:	vcmpe.f32	s14, s12
   16878:	vmrs	APSR_nzcv, fpscr
   1687c:	bpl	16834 <__assert_fail@plt+0x5504>
   16880:	movw	r3, #56772	; 0xddc4
   16884:	movt	r3, #1
   16888:	cmp	r2, r3
   1688c:	beq	1696c <__assert_fail@plt+0x563c>
   16890:	vldr	s11, [pc, #224]	; 16978 <__assert_fail@plt+0x5648>
   16894:	vldr	s12, [r2, #8]
   16898:	vcmpe.f32	s12, s11
   1689c:	vmrs	APSR_nzcv, fpscr
   168a0:	ble	16954 <__assert_fail@plt+0x5624>
   168a4:	vldr	s10, [pc, #208]	; 1697c <__assert_fail@plt+0x564c>
   168a8:	vcmpe.f32	s12, s10
   168ac:	vmrs	APSR_nzcv, fpscr
   168b0:	bpl	16954 <__assert_fail@plt+0x5624>
   168b4:	vldr	s10, [pc, #196]	; 16980 <__assert_fail@plt+0x5650>
   168b8:	vldr	s9, [r2, #12]
   168bc:	vcmpe.f32	s9, s10
   168c0:	vmrs	APSR_nzcv, fpscr
   168c4:	ble	16954 <__assert_fail@plt+0x5624>
   168c8:	vcmpe.f32	s13, #0.0
   168cc:	vmrs	APSR_nzcv, fpscr
   168d0:	blt	16954 <__assert_fail@plt+0x5624>
   168d4:	vadd.f32	s13, s13, s11
   168d8:	vldr	s11, [r2, #4]
   168dc:	vcmpe.f32	s13, s11
   168e0:	vmrs	APSR_nzcv, fpscr
   168e4:	bpl	16954 <__assert_fail@plt+0x5624>
   168e8:	vldr	s10, [pc, #148]	; 16984 <__assert_fail@plt+0x5654>
   168ec:	vcmpe.f32	s11, s10
   168f0:	vmrs	APSR_nzcv, fpscr
   168f4:	bhi	16954 <__assert_fail@plt+0x5624>
   168f8:	vcmpe.f32	s12, s13
   168fc:	vmrs	APSR_nzcv, fpscr
   16900:	ble	16954 <__assert_fail@plt+0x5624>
   16904:	ldrb	r3, [r2, #16]
   16908:	vmul.f32	s15, s15, s11
   1690c:	cmp	r3, #0
   16910:	beq	16970 <__assert_fail@plt+0x5640>
   16914:	vcvt.u32.f32	s15, s15
   16918:	mov	r0, r4
   1691c:	vmov	r1, s15
   16920:	bl	1619c <__assert_fail@plt+0x4e6c>
   16924:	cmp	r0, #0
   16928:	bne	16834 <__assert_fail@plt+0x5504>
   1692c:	ldr	r0, [r4, #36]	; 0x24
   16930:	cmp	r0, #0
   16934:	beq	16948 <__assert_fail@plt+0x5618>
   16938:	ldr	r6, [r0, #4]
   1693c:	bl	12d1c <__assert_fail@plt+0x19ec>
   16940:	subs	r0, r6, #0
   16944:	bne	16938 <__assert_fail@plt+0x5608>
   16948:	mov	r3, #0
   1694c:	str	r3, [r4, #36]	; 0x24
   16950:	b	16834 <__assert_fail@plt+0x5504>
   16954:	vldr	s13, [pc, #44]	; 16988 <__assert_fail@plt+0x5658>
   16958:	str	r3, [r4, #20]
   1695c:	vmul.f32	s13, s15, s13
   16960:	vcmpe.f32	s14, s13
   16964:	vmrs	APSR_nzcv, fpscr
   16968:	bpl	16834 <__assert_fail@plt+0x5504>
   1696c:	vldr	s12, [pc, #24]	; 1698c <__assert_fail@plt+0x565c>
   16970:	vmul.f32	s15, s15, s12
   16974:	b	16914 <__assert_fail@plt+0x55e4>
   16978:	stclcc	12, cr12, [ip, #820]	; 0x334
   1697c:	svccc	0x00666666
   16980:	svccc	0x008ccccd
   16984:	svccc	0x00800000
   16988:	andeq	r0, r0, r0
   1698c:	svccc	0x004ccccd
   16990:	strd	r4, [sp, #-16]!
   16994:	mov	r3, #1
   16998:	mov	r4, r0
   1699c:	str	r6, [sp, #8]
   169a0:	str	lr, [sp, #12]
   169a4:	sub	sp, sp, #8
   169a8:	add	r2, sp, #4
   169ac:	bl	15448 <__assert_fail@plt+0x4118>
   169b0:	subs	r5, r0, #0
   169b4:	beq	169d4 <__assert_fail@plt+0x56a4>
   169b8:	ldr	r2, [sp, #4]
   169bc:	ldr	r3, [r4, #16]
   169c0:	ldr	r2, [r2]
   169c4:	sub	r3, r3, #1
   169c8:	str	r3, [r4, #16]
   169cc:	cmp	r2, #0
   169d0:	beq	169ec <__assert_fail@plt+0x56bc>
   169d4:	mov	r0, r5
   169d8:	add	sp, sp, #8
   169dc:	ldrd	r4, [sp]
   169e0:	ldr	r6, [sp, #8]
   169e4:	add	sp, sp, #12
   169e8:	pop	{pc}		; (ldr pc, [sp], #4)
   169ec:	vldr	s15, [r4, #8]
   169f0:	ldr	r3, [r4, #12]
   169f4:	ldr	r2, [r4, #20]
   169f8:	vcvt.f32.u32	s15, s15
   169fc:	sub	r3, r3, #1
   16a00:	vmov	s14, r3
   16a04:	vldr	s13, [r2]
   16a08:	str	r3, [r4, #12]
   16a0c:	vmul.f32	s12, s13, s15
   16a10:	vcvt.f32.u32	s14, s14
   16a14:	vcmpe.f32	s14, s12
   16a18:	vmrs	APSR_nzcv, fpscr
   16a1c:	bpl	169d4 <__assert_fail@plt+0x56a4>
   16a20:	movw	r3, #56772	; 0xddc4
   16a24:	movt	r3, #1
   16a28:	cmp	r2, r3
   16a2c:	beq	16b0c <__assert_fail@plt+0x57dc>
   16a30:	vldr	s11, [pc, #224]	; 16b18 <__assert_fail@plt+0x57e8>
   16a34:	vldr	s12, [r2, #8]
   16a38:	vcmpe.f32	s12, s11
   16a3c:	vmrs	APSR_nzcv, fpscr
   16a40:	ble	16af4 <__assert_fail@plt+0x57c4>
   16a44:	vldr	s10, [pc, #208]	; 16b1c <__assert_fail@plt+0x57ec>
   16a48:	vcmpe.f32	s12, s10
   16a4c:	vmrs	APSR_nzcv, fpscr
   16a50:	bpl	16af4 <__assert_fail@plt+0x57c4>
   16a54:	vldr	s10, [pc, #196]	; 16b20 <__assert_fail@plt+0x57f0>
   16a58:	vldr	s9, [r2, #12]
   16a5c:	vcmpe.f32	s9, s10
   16a60:	vmrs	APSR_nzcv, fpscr
   16a64:	ble	16af4 <__assert_fail@plt+0x57c4>
   16a68:	vcmpe.f32	s13, #0.0
   16a6c:	vmrs	APSR_nzcv, fpscr
   16a70:	blt	16af4 <__assert_fail@plt+0x57c4>
   16a74:	vadd.f32	s13, s13, s11
   16a78:	vldr	s11, [r2, #4]
   16a7c:	vcmpe.f32	s13, s11
   16a80:	vmrs	APSR_nzcv, fpscr
   16a84:	bpl	16af4 <__assert_fail@plt+0x57c4>
   16a88:	vldr	s10, [pc, #148]	; 16b24 <__assert_fail@plt+0x57f4>
   16a8c:	vcmpe.f32	s11, s10
   16a90:	vmrs	APSR_nzcv, fpscr
   16a94:	bhi	16af4 <__assert_fail@plt+0x57c4>
   16a98:	vcmpe.f32	s12, s13
   16a9c:	vmrs	APSR_nzcv, fpscr
   16aa0:	ble	16af4 <__assert_fail@plt+0x57c4>
   16aa4:	ldrb	r3, [r2, #16]
   16aa8:	vmul.f32	s15, s15, s11
   16aac:	cmp	r3, #0
   16ab0:	beq	16b10 <__assert_fail@plt+0x57e0>
   16ab4:	vcvt.u32.f32	s15, s15
   16ab8:	mov	r0, r4
   16abc:	vmov	r1, s15
   16ac0:	bl	1619c <__assert_fail@plt+0x4e6c>
   16ac4:	cmp	r0, #0
   16ac8:	bne	169d4 <__assert_fail@plt+0x56a4>
   16acc:	ldr	r0, [r4, #36]	; 0x24
   16ad0:	cmp	r0, #0
   16ad4:	beq	16ae8 <__assert_fail@plt+0x57b8>
   16ad8:	ldr	r6, [r0, #4]
   16adc:	bl	12d1c <__assert_fail@plt+0x19ec>
   16ae0:	subs	r0, r6, #0
   16ae4:	bne	16ad8 <__assert_fail@plt+0x57a8>
   16ae8:	mov	r3, #0
   16aec:	str	r3, [r4, #36]	; 0x24
   16af0:	b	169d4 <__assert_fail@plt+0x56a4>
   16af4:	vldr	s13, [pc, #44]	; 16b28 <__assert_fail@plt+0x57f8>
   16af8:	str	r3, [r4, #20]
   16afc:	vmul.f32	s13, s15, s13
   16b00:	vcmpe.f32	s14, s13
   16b04:	vmrs	APSR_nzcv, fpscr
   16b08:	bpl	169d4 <__assert_fail@plt+0x56a4>
   16b0c:	vldr	s12, [pc, #24]	; 16b2c <__assert_fail@plt+0x57fc>
   16b10:	vmul.f32	s15, s15, s12
   16b14:	b	16ab4 <__assert_fail@plt+0x5784>
   16b18:	stclcc	12, cr12, [ip, #820]	; 0x334
   16b1c:	svccc	0x00666666
   16b20:	svccc	0x008ccccd
   16b24:	svccc	0x00800000
   16b28:	andeq	r0, r0, r0
   16b2c:	svccc	0x004ccccd
   16b30:	mov	r3, #0
   16b34:	mov	r2, #1
   16b38:	str	r1, [r0]
   16b3c:	str	r1, [r0, #4]
   16b40:	str	r1, [r0, #8]
   16b44:	str	r1, [r0, #12]
   16b48:	str	r1, [r0, #16]
   16b4c:	str	r3, [r0, #20]
   16b50:	str	r3, [r0, #24]
   16b54:	strb	r2, [r0, #28]
   16b58:	bx	lr
   16b5c:	ldrb	r0, [r0, #28]
   16b60:	bx	lr
   16b64:	ldrb	ip, [r0, #28]
   16b68:	mov	r2, r0
   16b6c:	ldr	r3, [r0, #20]
   16b70:	eor	ip, ip, #1
   16b74:	add	r3, ip, r3
   16b78:	and	r3, r3, #3
   16b7c:	ldr	r0, [r0, r3, lsl #2]
   16b80:	str	r1, [r2, r3, lsl #2]
   16b84:	ldr	r1, [r2, #24]
   16b88:	str	r3, [r2, #20]
   16b8c:	cmp	r1, r3
   16b90:	bne	16ba0 <__assert_fail@plt+0x5870>
   16b94:	add	ip, ip, r1
   16b98:	and	ip, ip, #3
   16b9c:	str	ip, [r2, #24]
   16ba0:	mov	r3, #0
   16ba4:	strb	r3, [r2, #28]
   16ba8:	bx	lr
   16bac:	ldrb	r3, [r0, #28]
   16bb0:	cmp	r3, #0
   16bb4:	bne	16bf0 <__assert_fail@plt+0x58c0>
   16bb8:	ldr	r1, [r0, #16]
   16bbc:	ldr	r3, [r0, #20]
   16bc0:	ldr	r2, [r0, r3, lsl #2]
   16bc4:	str	r1, [r0, r3, lsl #2]
   16bc8:	ldr	r1, [r0, #24]
   16bcc:	cmp	r3, r1
   16bd0:	moveq	r3, #1
   16bd4:	strbeq	r3, [r0, #28]
   16bd8:	beq	16be8 <__assert_fail@plt+0x58b8>
   16bdc:	add	r3, r3, #3
   16be0:	and	r3, r3, #3
   16be4:	str	r3, [r0, #20]
   16be8:	mov	r0, r2
   16bec:	bx	lr
   16bf0:	str	r4, [sp, #-8]!
   16bf4:	str	lr, [sp, #4]
   16bf8:	bl	112e8 <abort@plt>
   16bfc:	mov	r3, #0
   16c00:	strd	r4, [sp, #-16]!
   16c04:	mov	r4, r0
   16c08:	mov	r5, r1
   16c0c:	str	r6, [sp, #8]
   16c10:	add	r6, r2, #20
   16c14:	str	lr, [sp, #12]
   16c18:	strb	r3, [r2, #20]
   16c1c:	mov	r0, r4
   16c20:	mov	r1, r5
   16c24:	mov	r2, #10
   16c28:	mov	r3, #0
   16c2c:	bl	1ccd4 <__assert_fail@plt+0xb9a4>
   16c30:	add	ip, r2, #48	; 0x30
   16c34:	mov	r0, r4
   16c38:	mov	r1, r5
   16c3c:	mov	r2, #10
   16c40:	mov	r3, #0
   16c44:	strb	ip, [r6, #-1]!
   16c48:	bl	1ccd4 <__assert_fail@plt+0xb9a4>
   16c4c:	cmp	r5, #0
   16c50:	mov	r5, r1
   16c54:	cmpeq	r4, #9
   16c58:	mov	r4, r0
   16c5c:	bhi	16c1c <__assert_fail@plt+0x58ec>
   16c60:	mov	r0, r6
   16c64:	ldrd	r4, [sp]
   16c68:	ldr	r6, [sp, #8]
   16c6c:	add	sp, sp, #12
   16c70:	pop	{pc}		; (ldr pc, [sp], #4)
   16c74:	push	{r2, r3}
   16c78:	push	{lr}		; (str lr, [sp, #-4]!)
   16c7c:	sub	sp, sp, #12
   16c80:	ldr	r2, [sp, #16]
   16c84:	ands	r3, r2, #64	; 0x40
   16c88:	bne	16ca4 <__assert_fail@plt+0x5974>
   16c8c:	bl	111d4 <openat64@plt>
   16c90:	bl	1a878 <__assert_fail@plt+0x9548>
   16c94:	add	sp, sp, #12
   16c98:	pop	{lr}		; (ldr lr, [sp], #4)
   16c9c:	add	sp, sp, #8
   16ca0:	bx	lr
   16ca4:	add	ip, sp, #20
   16ca8:	ldr	r3, [sp, #20]
   16cac:	str	ip, [sp, #4]
   16cb0:	b	16c8c <__assert_fail@plt+0x595c>
   16cb4:	orr	r2, r2, #540672	; 0x84000
   16cb8:	strd	r4, [sp, #-16]!
   16cbc:	orr	r2, r2, #2304	; 0x900
   16cc0:	str	r6, [sp, #8]
   16cc4:	mov	r6, r3
   16cc8:	str	lr, [sp, #12]
   16ccc:	bl	16c74 <__assert_fail@plt+0x5944>
   16cd0:	subs	r5, r0, #0
   16cd4:	movlt	r4, #0
   16cd8:	blt	16cec <__assert_fail@plt+0x59bc>
   16cdc:	bl	11288 <fdopendir@plt>
   16ce0:	subs	r4, r0, #0
   16ce4:	beq	16d00 <__assert_fail@plt+0x59d0>
   16ce8:	str	r5, [r6]
   16cec:	mov	r0, r4
   16cf0:	ldrd	r4, [sp]
   16cf4:	ldr	r6, [sp, #8]
   16cf8:	add	sp, sp, #12
   16cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   16d00:	bl	111ec <__errno_location@plt>
   16d04:	mov	r6, r0
   16d08:	mov	r0, r5
   16d0c:	ldr	r5, [r6]
   16d10:	bl	112f4 <close@plt>
   16d14:	b	16ce8 <__assert_fail@plt+0x59b8>
   16d18:	strd	r4, [sp, #-16]!
   16d1c:	subs	r4, r0, #0
   16d20:	str	r6, [sp, #8]
   16d24:	str	lr, [sp, #12]
   16d28:	beq	16dc0 <__assert_fail@plt+0x5a90>
   16d2c:	mov	r1, #47	; 0x2f
   16d30:	bl	11264 <strrchr@plt>
   16d34:	subs	r5, r0, #0
   16d38:	beq	16d98 <__assert_fail@plt+0x5a68>
   16d3c:	add	r6, r5, #1
   16d40:	sub	r3, r6, r4
   16d44:	cmp	r3, #6
   16d48:	ble	16d98 <__assert_fail@plt+0x5a68>
   16d4c:	movw	r1, #56956	; 0xde7c
   16d50:	movt	r1, #1
   16d54:	mov	r2, #7
   16d58:	sub	r0, r5, #6
   16d5c:	bl	112dc <strncmp@plt>
   16d60:	cmp	r0, #0
   16d64:	bne	16d98 <__assert_fail@plt+0x5a68>
   16d68:	movw	r1, #56964	; 0xde84
   16d6c:	movt	r1, #1
   16d70:	mov	r2, #3
   16d74:	mov	r0, r6
   16d78:	bl	112dc <strncmp@plt>
   16d7c:	cmp	r0, #0
   16d80:	movne	r4, r6
   16d84:	bne	16d98 <__assert_fail@plt+0x5a68>
   16d88:	add	r4, r5, #4
   16d8c:	movw	r3, #61824	; 0xf180
   16d90:	movt	r3, #2
   16d94:	str	r4, [r3]
   16d98:	movw	r2, #61888	; 0xf1c0
   16d9c:	movt	r2, #2
   16da0:	ldr	r6, [sp, #8]
   16da4:	movw	r3, #61828	; 0xf184
   16da8:	movt	r3, #2
   16dac:	str	r4, [r2]
   16db0:	str	r4, [r3]
   16db4:	ldrd	r4, [sp]
   16db8:	add	sp, sp, #12
   16dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   16dc0:	movw	r3, #61840	; 0xf190
   16dc4:	movt	r3, #2
   16dc8:	movw	r0, #56900	; 0xde44
   16dcc:	movt	r0, #1
   16dd0:	ldr	r3, [r3]
   16dd4:	mov	r2, #55	; 0x37
   16dd8:	mov	r1, #1
   16ddc:	bl	11108 <fwrite@plt>
   16de0:	bl	112e8 <abort@plt>
   16de4:	mov	r2, #5
   16de8:	strd	r4, [sp, #-16]!
   16dec:	mov	r5, r0
   16df0:	str	r6, [sp, #8]
   16df4:	mov	r6, r1
   16df8:	mov	r1, r0
   16dfc:	mov	r0, #0
   16e00:	str	lr, [sp, #12]
   16e04:	bl	110c0 <dcgettext@plt>
   16e08:	cmp	r5, r0
   16e0c:	mov	r4, r0
   16e10:	beq	16e28 <__assert_fail@plt+0x5af8>
   16e14:	mov	r0, r4
   16e18:	ldrd	r4, [sp]
   16e1c:	ldr	r6, [sp, #8]
   16e20:	add	sp, sp, #12
   16e24:	pop	{pc}		; (ldr pc, [sp], #4)
   16e28:	bl	1cab8 <__assert_fail@plt+0xb788>
   16e2c:	ldrb	r3, [r0]
   16e30:	bic	r3, r3, #32
   16e34:	cmp	r3, #85	; 0x55
   16e38:	bne	16ea0 <__assert_fail@plt+0x5b70>
   16e3c:	ldrb	r3, [r0, #1]
   16e40:	bic	r3, r3, #32
   16e44:	cmp	r3, #84	; 0x54
   16e48:	bne	16f20 <__assert_fail@plt+0x5bf0>
   16e4c:	ldrb	r3, [r0, #2]
   16e50:	bic	r3, r3, #32
   16e54:	cmp	r3, #70	; 0x46
   16e58:	bne	16f20 <__assert_fail@plt+0x5bf0>
   16e5c:	ldrb	r3, [r0, #3]
   16e60:	cmp	r3, #45	; 0x2d
   16e64:	bne	16f20 <__assert_fail@plt+0x5bf0>
   16e68:	ldrb	r3, [r0, #4]
   16e6c:	cmp	r3, #56	; 0x38
   16e70:	bne	16f20 <__assert_fail@plt+0x5bf0>
   16e74:	ldrb	r3, [r0, #5]
   16e78:	cmp	r3, #0
   16e7c:	bne	16f20 <__assert_fail@plt+0x5bf0>
   16e80:	ldrb	r2, [r4]
   16e84:	movw	r3, #57056	; 0xdee0
   16e88:	movt	r3, #1
   16e8c:	movw	r4, #57068	; 0xdeec
   16e90:	movt	r4, #1
   16e94:	cmp	r2, #96	; 0x60
   16e98:	movne	r4, r3
   16e9c:	b	16e14 <__assert_fail@plt+0x5ae4>
   16ea0:	cmp	r3, #71	; 0x47
   16ea4:	bne	16f20 <__assert_fail@plt+0x5bf0>
   16ea8:	ldrb	r3, [r0, #1]
   16eac:	bic	r3, r3, #32
   16eb0:	cmp	r3, #66	; 0x42
   16eb4:	bne	16f20 <__assert_fail@plt+0x5bf0>
   16eb8:	ldrb	r3, [r0, #2]
   16ebc:	cmp	r3, #49	; 0x31
   16ec0:	bne	16f20 <__assert_fail@plt+0x5bf0>
   16ec4:	ldrb	r3, [r0, #3]
   16ec8:	cmp	r3, #56	; 0x38
   16ecc:	bne	16f20 <__assert_fail@plt+0x5bf0>
   16ed0:	ldrb	r3, [r0, #4]
   16ed4:	cmp	r3, #48	; 0x30
   16ed8:	bne	16f20 <__assert_fail@plt+0x5bf0>
   16edc:	ldrb	r3, [r0, #5]
   16ee0:	cmp	r3, #51	; 0x33
   16ee4:	bne	16f20 <__assert_fail@plt+0x5bf0>
   16ee8:	ldrb	r3, [r0, #6]
   16eec:	cmp	r3, #48	; 0x30
   16ef0:	bne	16f20 <__assert_fail@plt+0x5bf0>
   16ef4:	ldrb	r3, [r0, #7]
   16ef8:	cmp	r3, #0
   16efc:	bne	16f20 <__assert_fail@plt+0x5bf0>
   16f00:	ldrb	r2, [r4]
   16f04:	movw	r3, #57060	; 0xdee4
   16f08:	movt	r3, #1
   16f0c:	movw	r4, #57064	; 0xdee8
   16f10:	movt	r4, #1
   16f14:	cmp	r2, #96	; 0x60
   16f18:	movne	r4, r3
   16f1c:	b	16e14 <__assert_fail@plt+0x5ae4>
   16f20:	movw	r3, #57072	; 0xdef0
   16f24:	movt	r3, #1
   16f28:	cmp	r6, #9
   16f2c:	movw	r4, #57052	; 0xdedc
   16f30:	movt	r4, #1
   16f34:	movne	r4, r3
   16f38:	b	16e14 <__assert_fail@plt+0x5ae4>
   16f3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16f40:	strd	r6, [sp, #8]
   16f44:	strd	r8, [sp, #16]
   16f48:	mov	r8, r3
   16f4c:	strd	sl, [sp, #24]
   16f50:	mov	fp, r0
   16f54:	mov	sl, r1
   16f58:	str	lr, [sp, #32]
   16f5c:	sub	sp, sp, #140	; 0x8c
   16f60:	ldr	r3, [sp, #180]	; 0xb4
   16f64:	str	r2, [sp, #28]
   16f68:	and	r4, r3, #2
   16f6c:	ubfx	r3, r3, #1, #1
   16f70:	str	r3, [sp, #44]	; 0x2c
   16f74:	bl	11120 <__ctype_get_mb_cur_max@plt>
   16f78:	ldr	r3, [sp, #176]	; 0xb0
   16f7c:	str	r0, [sp, #76]	; 0x4c
   16f80:	cmp	r3, #10
   16f84:	ldrls	pc, [pc, r3, lsl #2]
   16f88:	b	18924 <__assert_fail@plt+0x75f4>
   16f8c:	andeq	r7, r1, ip, lsl #8
   16f90:	andeq	r7, r1, r8, lsr #10
   16f94:	andeq	r7, r1, r4, lsr #21
   16f98:	muleq	r1, r4, r5
   16f9c:	andeq	r7, r1, r4, lsl r3
   16fa0:	muleq	r1, r0, r3
   16fa4:	andeq	r7, r1, r8, ror #8
   16fa8:	ldrdeq	r7, [r1], -r0
   16fac:			; <UNDEFINED> instruction: 0x00016fb8
   16fb0:			; <UNDEFINED> instruction: 0x00016fb8
   16fb4:			; <UNDEFINED> instruction: 0x00016fb8
   16fb8:	ldr	r3, [sp, #176]	; 0xb0
   16fbc:	cmp	r3, #10
   16fc0:	beq	16fec <__assert_fail@plt+0x5cbc>
   16fc4:	mov	r1, r3
   16fc8:	movw	r0, #57076	; 0xdef4
   16fcc:	movt	r0, #1
   16fd0:	bl	16de4 <__assert_fail@plt+0x5ab4>
   16fd4:	str	r0, [sp, #188]	; 0xbc
   16fd8:	movw	r0, #57072	; 0xdef0
   16fdc:	movt	r0, #1
   16fe0:	ldr	r1, [sp, #176]	; 0xb0
   16fe4:	bl	16de4 <__assert_fail@plt+0x5ab4>
   16fe8:	str	r0, [sp, #192]	; 0xc0
   16fec:	cmp	r4, #0
   16ff0:	movne	r4, #0
   16ff4:	beq	186b0 <__assert_fail@plt+0x7380>
   16ff8:	mov	r5, #0
   16ffc:	ldr	r0, [sp, #192]	; 0xc0
   17000:	mov	r9, r5
   17004:	str	r5, [sp, #64]	; 0x40
   17008:	bl	111bc <strlen@plt>
   1700c:	mov	r3, #1
   17010:	ldr	r2, [sp, #44]	; 0x2c
   17014:	cmp	r0, r5
   17018:	moveq	r2, r5
   1701c:	str	r3, [sp, #32]
   17020:	str	r3, [sp, #48]	; 0x30
   17024:	str	r5, [sp, #52]	; 0x34
   17028:	str	r3, [sp, #60]	; 0x3c
   1702c:	ldr	r3, [sp, #180]	; 0xb4
   17030:	str	r0, [sp, #56]	; 0x38
   17034:	str	r5, [sp, #68]	; 0x44
   17038:	str	r5, [sp, #80]	; 0x50
   1703c:	str	r5, [sp, #84]	; 0x54
   17040:	and	r3, r3, #1
   17044:	str	r2, [sp, #88]	; 0x58
   17048:	str	r3, [sp, #92]	; 0x5c
   1704c:	ldr	r3, [sp, #180]	; 0xb4
   17050:	and	r3, r3, #4
   17054:	str	r3, [sp, #96]	; 0x60
   17058:	ldr	r3, [sp, #192]	; 0xc0
   1705c:	str	r3, [sp, #72]	; 0x48
   17060:	mov	r3, fp
   17064:	mov	r7, #0
   17068:	mov	fp, r9
   1706c:	mov	r9, r3
   17070:	cmn	r8, #1
   17074:	beq	17678 <__assert_fail@plt+0x6348>
   17078:	subs	r6, r8, r7
   1707c:	movne	r6, #1
   17080:	cmp	r6, #0
   17084:	beq	17690 <__assert_fail@plt+0x6360>
   17088:	ldr	r0, [sp, #28]
   1708c:	ldr	r3, [sp, #48]	; 0x30
   17090:	cmp	r3, #0
   17094:	add	r3, r0, r7
   17098:	str	r3, [sp, #36]	; 0x24
   1709c:	beq	17b1c <__assert_fail@plt+0x67ec>
   170a0:	ldr	r2, [sp, #56]	; 0x38
   170a4:	cmp	r2, #0
   170a8:	beq	1801c <__assert_fail@plt+0x6cec>
   170ac:	cmp	r2, #1
   170b0:	mov	r3, r2
   170b4:	movls	r3, #0
   170b8:	movhi	r3, #1
   170bc:	cmn	r8, #1
   170c0:	add	r5, r7, r2
   170c4:	movne	r3, #0
   170c8:	cmp	r3, #0
   170cc:	beq	170d8 <__assert_fail@plt+0x5da8>
   170d0:	bl	111bc <strlen@plt>
   170d4:	mov	r8, r0
   170d8:	cmp	r5, r8
   170dc:	bhi	1801c <__assert_fail@plt+0x6cec>
   170e0:	ldr	r0, [sp, #36]	; 0x24
   170e4:	ldr	r2, [sp, #56]	; 0x38
   170e8:	ldr	r1, [sp, #72]	; 0x48
   170ec:	bl	1109c <memcmp@plt>
   170f0:	cmp	r0, #0
   170f4:	bne	1801c <__assert_fail@plt+0x6cec>
   170f8:	ldr	r3, [sp, #44]	; 0x2c
   170fc:	cmp	r3, #0
   17100:	bne	187c8 <__assert_fail@plt+0x7498>
   17104:	ldr	r3, [sp, #36]	; 0x24
   17108:	ldrb	r5, [r3]
   1710c:	cmp	r5, #126	; 0x7e
   17110:	ldrls	pc, [pc, r5, lsl #2]
   17114:	b	185b0 <__assert_fail@plt+0x7280>
   17118:	andeq	r7, r1, ip, ror #15
   1711c:			; <UNDEFINED> instruction: 0x000185b0
   17120:			; <UNDEFINED> instruction: 0x000185b0
   17124:			; <UNDEFINED> instruction: 0x000185b0
   17128:			; <UNDEFINED> instruction: 0x000185b0
   1712c:			; <UNDEFINED> instruction: 0x000185b0
   17130:			; <UNDEFINED> instruction: 0x000185b0
   17134:	andeq	r7, r1, r4, asr #14
   17138:	andeq	r7, r1, ip, lsr r7
   1713c:	andeq	r7, r1, ip, asr #14
   17140:	ldrdeq	r7, [r1], -r0
   17144:	andeq	r7, r1, r0, asr #17
   17148:	andeq	r7, r1, r8, ror #11
   1714c:	muleq	r1, ip, r8
   17150:			; <UNDEFINED> instruction: 0x000185b0
   17154:			; <UNDEFINED> instruction: 0x000185b0
   17158:			; <UNDEFINED> instruction: 0x000185b0
   1715c:			; <UNDEFINED> instruction: 0x000185b0
   17160:			; <UNDEFINED> instruction: 0x000185b0
   17164:			; <UNDEFINED> instruction: 0x000185b0
   17168:			; <UNDEFINED> instruction: 0x000185b0
   1716c:			; <UNDEFINED> instruction: 0x000185b0
   17170:			; <UNDEFINED> instruction: 0x000185b0
   17174:			; <UNDEFINED> instruction: 0x000185b0
   17178:			; <UNDEFINED> instruction: 0x000185b0
   1717c:			; <UNDEFINED> instruction: 0x000185b0
   17180:			; <UNDEFINED> instruction: 0x000185b0
   17184:			; <UNDEFINED> instruction: 0x000185b0
   17188:			; <UNDEFINED> instruction: 0x000185b0
   1718c:			; <UNDEFINED> instruction: 0x000185b0
   17190:			; <UNDEFINED> instruction: 0x000185b0
   17194:			; <UNDEFINED> instruction: 0x000185b0
   17198:	andeq	r7, r1, r8, asr #18
   1719c:	andeq	r7, r1, ip, lsr r9
   171a0:	andeq	r7, r1, ip, lsr r9
   171a4:	andeq	r7, r1, r0, lsr r9
   171a8:	andeq	r7, r1, ip, lsr r9
   171ac:	andeq	r7, r1, r4, lsl sl
   171b0:	andeq	r7, r1, ip, lsr r9
   171b4:	andeq	r7, r1, r4, lsl #21
   171b8:	andeq	r7, r1, ip, lsr r9
   171bc:	andeq	r7, r1, ip, lsr r9
   171c0:	andeq	r7, r1, ip, lsr r9
   171c4:	andeq	r7, r1, r4, lsl sl
   171c8:	andeq	r7, r1, r4, lsl sl
   171cc:	andeq	r7, r1, r4, lsl sl
   171d0:	andeq	r7, r1, r4, lsl sl
   171d4:	andeq	r7, r1, r4, lsl sl
   171d8:	andeq	r7, r1, r4, lsl sl
   171dc:	andeq	r7, r1, r4, lsl sl
   171e0:	andeq	r7, r1, r4, lsl sl
   171e4:	andeq	r7, r1, r4, lsl sl
   171e8:	andeq	r7, r1, r4, lsl sl
   171ec:	andeq	r7, r1, r4, lsl sl
   171f0:	andeq	r7, r1, r4, lsl sl
   171f4:	andeq	r7, r1, r4, lsl sl
   171f8:	andeq	r7, r1, r4, lsl sl
   171fc:	andeq	r7, r1, r4, lsl sl
   17200:	andeq	r7, r1, r4, lsl sl
   17204:	andeq	r7, r1, ip, lsr r9
   17208:	andeq	r7, r1, ip, lsr r9
   1720c:	andeq	r7, r1, ip, lsr r9
   17210:	andeq	r7, r1, ip, lsr r9
   17214:	andeq	r7, r1, r4, lsr sl
   17218:			; <UNDEFINED> instruction: 0x000185b0
   1721c:	andeq	r7, r1, r4, lsl sl
   17220:	andeq	r7, r1, r4, lsl sl
   17224:	andeq	r7, r1, r4, lsl sl
   17228:	andeq	r7, r1, r4, lsl sl
   1722c:	andeq	r7, r1, r4, lsl sl
   17230:	andeq	r7, r1, r4, lsl sl
   17234:	andeq	r7, r1, r4, lsl sl
   17238:	andeq	r7, r1, r4, lsl sl
   1723c:	andeq	r7, r1, r4, lsl sl
   17240:	andeq	r7, r1, r4, lsl sl
   17244:	andeq	r7, r1, r4, lsl sl
   17248:	andeq	r7, r1, r4, lsl sl
   1724c:	andeq	r7, r1, r4, lsl sl
   17250:	andeq	r7, r1, r4, lsl sl
   17254:	andeq	r7, r1, r4, lsl sl
   17258:	andeq	r7, r1, r4, lsl sl
   1725c:	andeq	r7, r1, r4, lsl sl
   17260:	andeq	r7, r1, r4, lsl sl
   17264:	andeq	r7, r1, r4, lsl sl
   17268:	andeq	r7, r1, r4, lsl sl
   1726c:	andeq	r7, r1, r4, lsl sl
   17270:	andeq	r7, r1, r4, lsl sl
   17274:	andeq	r7, r1, r4, lsl sl
   17278:	andeq	r7, r1, r4, lsl sl
   1727c:	andeq	r7, r1, r4, lsl sl
   17280:	andeq	r7, r1, r4, lsl sl
   17284:	andeq	r7, r1, ip, lsr r9
   17288:	ldrdeq	r7, [r1], -r8
   1728c:	andeq	r7, r1, r4, lsl sl
   17290:	andeq	r7, r1, ip, lsr r9
   17294:	andeq	r7, r1, r4, lsl sl
   17298:	andeq	r7, r1, ip, lsr r9
   1729c:	andeq	r7, r1, r4, lsl sl
   172a0:	andeq	r7, r1, r4, lsl sl
   172a4:	andeq	r7, r1, r4, lsl sl
   172a8:	andeq	r7, r1, r4, lsl sl
   172ac:	andeq	r7, r1, r4, lsl sl
   172b0:	andeq	r7, r1, r4, lsl sl
   172b4:	andeq	r7, r1, r4, lsl sl
   172b8:	andeq	r7, r1, r4, lsl sl
   172bc:	andeq	r7, r1, r4, lsl sl
   172c0:	andeq	r7, r1, r4, lsl sl
   172c4:	andeq	r7, r1, r4, lsl sl
   172c8:	andeq	r7, r1, r4, lsl sl
   172cc:	andeq	r7, r1, r4, lsl sl
   172d0:	andeq	r7, r1, r4, lsl sl
   172d4:	andeq	r7, r1, r4, lsl sl
   172d8:	andeq	r7, r1, r4, lsl sl
   172dc:	andeq	r7, r1, r4, lsl sl
   172e0:	andeq	r7, r1, r4, lsl sl
   172e4:	andeq	r7, r1, r4, lsl sl
   172e8:	andeq	r7, r1, r4, lsl sl
   172ec:	andeq	r7, r1, r4, lsl sl
   172f0:	andeq	r7, r1, r4, lsl sl
   172f4:	andeq	r7, r1, r4, lsl sl
   172f8:	andeq	r7, r1, r4, lsl sl
   172fc:	andeq	r7, r1, r4, lsl sl
   17300:	andeq	r7, r1, r4, lsl sl
   17304:	andeq	r7, r1, r4, ror #17
   17308:	andeq	r7, r1, ip, lsr r9
   1730c:	andeq	r7, r1, r4, ror #17
   17310:	andeq	r7, r1, r0, lsr r9
   17314:	ldr	r3, [sp, #180]	; 0xb4
   17318:	cmp	r4, #0
   1731c:	and	r3, r3, #1
   17320:	str	r3, [sp, #92]	; 0x5c
   17324:	ldr	r3, [sp, #180]	; 0xb4
   17328:	and	r3, r3, #4
   1732c:	str	r3, [sp, #96]	; 0x60
   17330:	moveq	r3, #1
   17334:	streq	r3, [sp, #60]	; 0x3c
   17338:	beq	17ac8 <__assert_fail@plt+0x6798>
   1733c:	mov	r3, #0
   17340:	mov	r2, #1
   17344:	mov	r4, r3
   17348:	mov	r9, r3
   1734c:	str	r2, [sp, #32]
   17350:	str	r2, [sp, #44]	; 0x2c
   17354:	str	r3, [sp, #48]	; 0x30
   17358:	str	r2, [sp, #52]	; 0x34
   1735c:	str	r2, [sp, #56]	; 0x38
   17360:	str	r3, [sp, #60]	; 0x3c
   17364:	str	r2, [sp, #64]	; 0x40
   17368:	str	r2, [sp, #68]	; 0x44
   1736c:	str	r3, [sp, #80]	; 0x50
   17370:	str	r3, [sp, #84]	; 0x54
   17374:	str	r3, [sp, #88]	; 0x58
   17378:	movw	r3, #57072	; 0xdef0
   1737c:	movt	r3, #1
   17380:	str	r3, [sp, #72]	; 0x48
   17384:	mov	r3, #2
   17388:	str	r3, [sp, #176]	; 0xb0
   1738c:	b	17060 <__assert_fail@plt+0x5d30>
   17390:	ldr	r3, [sp, #180]	; 0xb4
   17394:	cmp	r4, #0
   17398:	and	r3, r3, #1
   1739c:	str	r3, [sp, #92]	; 0x5c
   173a0:	ldr	r3, [sp, #180]	; 0xb4
   173a4:	and	r3, r3, #4
   173a8:	str	r3, [sp, #96]	; 0x60
   173ac:	bne	18780 <__assert_fail@plt+0x7450>
   173b0:	cmp	sl, #0
   173b4:	beq	1852c <__assert_fail@plt+0x71fc>
   173b8:	mov	r3, #34	; 0x22
   173bc:	mov	r2, r4
   173c0:	mov	r1, #1
   173c4:	mov	r9, r2
   173c8:	strb	r3, [fp]
   173cc:	movw	r3, #57052	; 0xdedc
   173d0:	movt	r3, #1
   173d4:	mov	r4, r1
   173d8:	str	r1, [sp, #32]
   173dc:	str	r2, [sp, #44]	; 0x2c
   173e0:	str	r1, [sp, #48]	; 0x30
   173e4:	str	r2, [sp, #52]	; 0x34
   173e8:	str	r1, [sp, #56]	; 0x38
   173ec:	str	r1, [sp, #60]	; 0x3c
   173f0:	str	r2, [sp, #64]	; 0x40
   173f4:	str	r2, [sp, #68]	; 0x44
   173f8:	str	r3, [sp, #72]	; 0x48
   173fc:	str	r2, [sp, #80]	; 0x50
   17400:	str	r2, [sp, #84]	; 0x54
   17404:	str	r2, [sp, #88]	; 0x58
   17408:	b	17060 <__assert_fail@plt+0x5d30>
   1740c:	mov	r3, #0
   17410:	mov	r2, #1
   17414:	mov	r9, r3
   17418:	str	r2, [sp, #32]
   1741c:	str	r3, [sp, #44]	; 0x2c
   17420:	str	r3, [sp, #48]	; 0x30
   17424:	str	r3, [sp, #52]	; 0x34
   17428:	str	r3, [sp, #60]	; 0x3c
   1742c:	strd	r2, [sp, #64]	; 0x40
   17430:	str	r3, [sp, #72]	; 0x48
   17434:	str	r3, [sp, #80]	; 0x50
   17438:	str	r3, [sp, #88]	; 0x58
   1743c:	ldr	r3, [sp, #180]	; 0xb4
   17440:	and	r3, r3, r2
   17444:	str	r3, [sp, #92]	; 0x5c
   17448:	ldr	r3, [sp, #180]	; 0xb4
   1744c:	and	r3, r3, #4
   17450:	str	r3, [sp, #96]	; 0x60
   17454:	ldr	r3, [sp, #176]	; 0xb0
   17458:	mov	r4, r3
   1745c:	str	r3, [sp, #56]	; 0x38
   17460:	str	r3, [sp, #84]	; 0x54
   17464:	b	17060 <__assert_fail@plt+0x5d30>
   17468:	mov	r3, #1
   1746c:	mov	r4, #0
   17470:	mov	r9, r4
   17474:	str	r3, [sp, #32]
   17478:	str	r3, [sp, #44]	; 0x2c
   1747c:	str	r3, [sp, #48]	; 0x30
   17480:	str	r4, [sp, #52]	; 0x34
   17484:	str	r3, [sp, #56]	; 0x38
   17488:	str	r3, [sp, #60]	; 0x3c
   1748c:	str	r3, [sp, #88]	; 0x58
   17490:	movw	r3, #57052	; 0xdedc
   17494:	movt	r3, #1
   17498:	str	r4, [sp, #64]	; 0x40
   1749c:	str	r4, [sp, #68]	; 0x44
   174a0:	str	r3, [sp, #72]	; 0x48
   174a4:	ldr	r3, [sp, #180]	; 0xb4
   174a8:	str	r4, [sp, #80]	; 0x50
   174ac:	str	r4, [sp, #84]	; 0x54
   174b0:	and	r3, r3, #1
   174b4:	str	r3, [sp, #92]	; 0x5c
   174b8:	ldr	r3, [sp, #180]	; 0xb4
   174bc:	and	r3, r3, #4
   174c0:	str	r3, [sp, #96]	; 0x60
   174c4:	mov	r3, #5
   174c8:	str	r3, [sp, #176]	; 0xb0
   174cc:	b	17060 <__assert_fail@plt+0x5d30>
   174d0:	mov	r3, #1
   174d4:	mov	r4, #0
   174d8:	mov	r9, r4
   174dc:	str	r3, [sp, #32]
   174e0:	str	r4, [sp, #44]	; 0x2c
   174e4:	str	r3, [sp, #48]	; 0x30
   174e8:	str	r3, [sp, #60]	; 0x3c
   174ec:	ldr	r3, [sp, #180]	; 0xb4
   174f0:	str	r4, [sp, #52]	; 0x34
   174f4:	str	r4, [sp, #56]	; 0x38
   174f8:	str	r4, [sp, #64]	; 0x40
   174fc:	str	r4, [sp, #68]	; 0x44
   17500:	and	r3, r3, #1
   17504:	str	r4, [sp, #72]	; 0x48
   17508:	str	r4, [sp, #80]	; 0x50
   1750c:	str	r4, [sp, #84]	; 0x54
   17510:	str	r3, [sp, #92]	; 0x5c
   17514:	ldr	r3, [sp, #180]	; 0xb4
   17518:	str	r4, [sp, #88]	; 0x58
   1751c:	and	r3, r3, #4
   17520:	str	r3, [sp, #96]	; 0x60
   17524:	b	17060 <__assert_fail@plt+0x5d30>
   17528:	mov	r3, #0
   1752c:	mov	r2, #1
   17530:	ldr	r1, [sp, #176]	; 0xb0
   17534:	mov	r4, r3
   17538:	mov	r9, r3
   1753c:	movw	r3, #57072	; 0xdef0
   17540:	movt	r3, #1
   17544:	str	r2, [sp, #32]
   17548:	str	r2, [sp, #44]	; 0x2c
   1754c:	str	r4, [sp, #48]	; 0x30
   17550:	strd	r2, [sp, #68]	; 0x44
   17554:	ldr	r3, [sp, #180]	; 0xb4
   17558:	str	r2, [sp, #52]	; 0x34
   1755c:	str	r1, [sp, #56]	; 0x38
   17560:	str	r4, [sp, #60]	; 0x3c
   17564:	str	r2, [sp, #64]	; 0x40
   17568:	and	r3, r3, r2
   1756c:	str	r4, [sp, #80]	; 0x50
   17570:	str	r4, [sp, #84]	; 0x54
   17574:	str	r4, [sp, #88]	; 0x58
   17578:	str	r3, [sp, #92]	; 0x5c
   1757c:	ldr	r3, [sp, #180]	; 0xb4
   17580:	and	r3, r3, #4
   17584:	str	r3, [sp, #96]	; 0x60
   17588:	mov	r3, #2
   1758c:	str	r3, [sp, #176]	; 0xb0
   17590:	b	17060 <__assert_fail@plt+0x5d30>
   17594:	mov	r3, #1
   17598:	mov	r2, #0
   1759c:	mov	r4, r2
   175a0:	mov	r9, r2
   175a4:	str	r3, [sp, #32]
   175a8:	str	r3, [sp, #44]	; 0x2c
   175ac:	str	r2, [sp, #48]	; 0x30
   175b0:	str	r3, [sp, #52]	; 0x34
   175b4:	str	r3, [sp, #56]	; 0x38
   175b8:	str	r3, [sp, #60]	; 0x3c
   175bc:	str	r3, [sp, #64]	; 0x40
   175c0:	str	r3, [sp, #68]	; 0x44
   175c4:	str	r3, [sp, #88]	; 0x58
   175c8:	movw	r3, #57072	; 0xdef0
   175cc:	movt	r3, #1
   175d0:	str	r3, [sp, #72]	; 0x48
   175d4:	ldr	r3, [sp, #180]	; 0xb4
   175d8:	str	r2, [sp, #80]	; 0x50
   175dc:	str	r2, [sp, #84]	; 0x54
   175e0:	and	r3, r3, #1
   175e4:	b	17578 <__assert_fail@plt+0x6248>
   175e8:	mov	r5, #102	; 0x66
   175ec:	mov	r6, #0
   175f0:	ldr	r3, [sp, #44]	; 0x2c
   175f4:	cmp	r3, #0
   175f8:	bne	184a8 <__assert_fail@plt+0x7178>
   175fc:	ldr	r2, [sp, #52]	; 0x34
   17600:	eor	r3, fp, #1
   17604:	ands	r3, r2, r3
   17608:	beq	17640 <__assert_fail@plt+0x6310>
   1760c:	cmp	sl, r4
   17610:	mov	fp, r3
   17614:	movhi	r2, #39	; 0x27
   17618:	strbhi	r2, [r9, r4]
   1761c:	add	r2, r4, #1
   17620:	cmp	sl, r2
   17624:	movhi	r1, #36	; 0x24
   17628:	strbhi	r1, [r9, r2]
   1762c:	add	r2, r4, #2
   17630:	add	r4, r4, #3
   17634:	cmp	sl, r2
   17638:	movhi	r1, #39	; 0x27
   1763c:	strbhi	r1, [r9, r2]
   17640:	cmp	sl, r4
   17644:	add	r7, r7, #1
   17648:	movhi	r3, #92	; 0x5c
   1764c:	strbhi	r3, [r9, r4]
   17650:	add	r4, r4, #1
   17654:	cmp	r4, sl
   17658:	ldr	r3, [sp, #32]
   1765c:	strbcc	r5, [r9, r4]
   17660:	cmp	r6, #0
   17664:	add	r4, r4, #1
   17668:	moveq	r3, #0
   1766c:	cmn	r8, #1
   17670:	str	r3, [sp, #32]
   17674:	bne	17078 <__assert_fail@plt+0x5d48>
   17678:	ldr	r3, [sp, #28]
   1767c:	ldrb	r6, [r3, r7]
   17680:	adds	r6, r6, #0
   17684:	movne	r6, #1
   17688:	cmp	r6, #0
   1768c:	bne	17088 <__assert_fail@plt+0x5d58>
   17690:	mov	r3, r9
   17694:	mov	r9, fp
   17698:	mov	fp, r3
   1769c:	ldr	r3, [sp, #68]	; 0x44
   176a0:	cmp	r4, #0
   176a4:	movne	r3, #0
   176a8:	cmp	r3, #0
   176ac:	bne	188a0 <__assert_fail@plt+0x7570>
   176b0:	ldr	r3, [sp, #44]	; 0x2c
   176b4:	ldr	r2, [sp, #52]	; 0x34
   176b8:	eor	r3, r3, #1
   176bc:	ands	r2, r3, r2
   176c0:	beq	187d8 <__assert_fail@plt+0x74a8>
   176c4:	ldr	r3, [sp, #80]	; 0x50
   176c8:	cmp	r3, #0
   176cc:	beq	187dc <__assert_fail@plt+0x74ac>
   176d0:	ldr	r3, [sp, #32]
   176d4:	cmp	r3, #0
   176d8:	bne	18850 <__assert_fail@plt+0x7520>
   176dc:	ldr	r3, [sp, #84]	; 0x54
   176e0:	adds	r3, r3, #0
   176e4:	movne	r3, #1
   176e8:	cmp	sl, #0
   176ec:	movne	r3, #0
   176f0:	cmp	r3, #0
   176f4:	ldreq	r2, [sp, #80]	; 0x50
   176f8:	beq	187dc <__assert_fail@plt+0x74ac>
   176fc:	ldr	r2, [sp, #84]	; 0x54
   17700:	mov	sl, r2
   17704:	mov	r0, #0
   17708:	mov	r4, #1
   1770c:	mov	r1, #39	; 0x27
   17710:	str	r0, [sp, #44]	; 0x2c
   17714:	strb	r1, [fp]
   17718:	str	r0, [sp, #48]	; 0x30
   1771c:	str	r4, [sp, #52]	; 0x34
   17720:	str	r4, [sp, #56]	; 0x38
   17724:	str	r4, [sp, #64]	; 0x40
   17728:	str	r0, [sp, #68]	; 0x44
   1772c:	str	r3, [sp, #80]	; 0x50
   17730:	str	r2, [sp, #84]	; 0x54
   17734:	str	r0, [sp, #88]	; 0x58
   17738:	b	17378 <__assert_fail@plt+0x6048>
   1773c:	mov	r5, #98	; 0x62
   17740:	b	175ec <__assert_fail@plt+0x62bc>
   17744:	mov	r5, #97	; 0x61
   17748:	b	175ec <__assert_fail@plt+0x62bc>
   1774c:	ldr	r3, [sp, #48]	; 0x30
   17750:	str	r3, [sp, #40]	; 0x28
   17754:	mov	r3, #116	; 0x74
   17758:	ldr	r2, [sp, #68]	; 0x44
   1775c:	cmp	r2, #0
   17760:	bne	1795c <__assert_fail@plt+0x662c>
   17764:	ldr	r2, [sp, #60]	; 0x3c
   17768:	cmp	r2, #0
   1776c:	bne	178b8 <__assert_fail@plt+0x6588>
   17770:	ldr	r3, [sp, #44]	; 0x2c
   17774:	mov	r6, #0
   17778:	cmp	r3, #0
   1777c:	beq	17928 <__assert_fail@plt+0x65f8>
   17780:	mov	r3, fp
   17784:	ldr	r2, [sp, #184]	; 0xb8
   17788:	cmp	r2, #0
   1778c:	beq	177ac <__assert_fail@plt+0x647c>
   17790:	ubfx	r1, r5, #5, #8
   17794:	mov	r0, r2
   17798:	and	r2, r5, #31
   1779c:	ldr	r1, [r0, r1, lsl #2]
   177a0:	lsr	r2, r1, r2
   177a4:	tst	r2, #1
   177a8:	bne	175f0 <__assert_fail@plt+0x62c0>
   177ac:	ldr	r2, [sp, #40]	; 0x28
   177b0:	cmp	r2, #0
   177b4:	addeq	r7, r7, #1
   177b8:	bne	175f0 <__assert_fail@plt+0x62c0>
   177bc:	cmp	r3, #0
   177c0:	beq	17654 <__assert_fail@plt+0x6324>
   177c4:	cmp	sl, r4
   177c8:	mov	fp, #0
   177cc:	movhi	r3, #39	; 0x27
   177d0:	strbhi	r3, [r9, r4]
   177d4:	add	r3, r4, #1
   177d8:	add	r4, r4, #2
   177dc:	cmp	sl, r3
   177e0:	movhi	r2, #39	; 0x27
   177e4:	strbhi	r2, [r9, r3]
   177e8:	b	17654 <__assert_fail@plt+0x6324>
   177ec:	ldr	r3, [sp, #48]	; 0x30
   177f0:	str	r3, [sp, #40]	; 0x28
   177f4:	eor	r3, fp, #1
   177f8:	ldr	r2, [sp, #52]	; 0x34
   177fc:	ands	r2, r2, r3
   17800:	beq	184c0 <__assert_fail@plt+0x7190>
   17804:	cmp	sl, r4
   17808:	movhi	r3, #39	; 0x27
   1780c:	strbhi	r3, [r9, r4]
   17810:	add	r3, r4, #1
   17814:	cmp	sl, r3
   17818:	movhi	r1, #36	; 0x24
   1781c:	strbhi	r1, [r9, r3]
   17820:	add	r3, r4, #2
   17824:	cmp	sl, r3
   17828:	movhi	r1, #39	; 0x27
   1782c:	strbhi	r1, [r9, r3]
   17830:	add	r3, r4, #3
   17834:	cmp	sl, r3
   17838:	bls	1850c <__assert_fail@plt+0x71dc>
   1783c:	mov	r4, r3
   17840:	mov	r3, #92	; 0x5c
   17844:	mov	fp, r2
   17848:	mov	r2, r4
   1784c:	strb	r3, [r9, r4]
   17850:	ldr	r3, [sp, #176]	; 0xb0
   17854:	add	r4, r4, #1
   17858:	cmp	r3, #2
   1785c:	beq	18574 <__assert_fail@plt+0x7244>
   17860:	add	r3, r7, #1
   17864:	cmp	r3, r8
   17868:	bcs	17880 <__assert_fail@plt+0x6550>
   1786c:	ldr	r1, [sp, #28]
   17870:	ldrb	r3, [r1, r3]
   17874:	sub	r3, r3, #48	; 0x30
   17878:	cmp	r3, #9
   1787c:	bls	18584 <__assert_fail@plt+0x7254>
   17880:	mov	r3, #0
   17884:	mov	r5, #48	; 0x30
   17888:	ldr	r6, [sp, #64]	; 0x40
   1788c:	cmp	r6, #0
   17890:	beq	17784 <__assert_fail@plt+0x6454>
   17894:	mov	r6, #0
   17898:	b	177ac <__assert_fail@plt+0x647c>
   1789c:	ldr	r3, [sp, #48]	; 0x30
   178a0:	str	r3, [sp, #40]	; 0x28
   178a4:	ldr	r2, [sp, #60]	; 0x3c
   178a8:	mov	r5, #13
   178ac:	mov	r3, #114	; 0x72
   178b0:	cmp	r2, #0
   178b4:	beq	17770 <__assert_fail@plt+0x6440>
   178b8:	mov	r5, r3
   178bc:	b	175ec <__assert_fail@plt+0x62bc>
   178c0:	ldr	r3, [sp, #48]	; 0x30
   178c4:	str	r3, [sp, #40]	; 0x28
   178c8:	mov	r3, #118	; 0x76
   178cc:	b	17764 <__assert_fail@plt+0x6434>
   178d0:	ldr	r3, [sp, #48]	; 0x30
   178d4:	str	r3, [sp, #40]	; 0x28
   178d8:	mov	r5, #10
   178dc:	mov	r3, #110	; 0x6e
   178e0:	b	17764 <__assert_fail@plt+0x6434>
   178e4:	ldr	r3, [sp, #48]	; 0x30
   178e8:	cmn	r8, #1
   178ec:	str	r3, [sp, #40]	; 0x28
   178f0:	beq	17d38 <__assert_fail@plt+0x6a08>
   178f4:	subs	r3, r8, #1
   178f8:	movne	r3, #1
   178fc:	cmp	r3, #0
   17900:	bne	1790c <__assert_fail@plt+0x65dc>
   17904:	cmp	r7, #0
   17908:	beq	17950 <__assert_fail@plt+0x6620>
   1790c:	mov	r6, #0
   17910:	ldr	r3, [sp, #64]	; 0x40
   17914:	cmp	r3, #0
   17918:	beq	17780 <__assert_fail@plt+0x6450>
   1791c:	ldr	r3, [sp, #44]	; 0x2c
   17920:	cmp	r3, #0
   17924:	bne	17780 <__assert_fail@plt+0x6450>
   17928:	mov	r3, fp
   1792c:	b	177ac <__assert_fail@plt+0x647c>
   17930:	ldr	r3, [sp, #48]	; 0x30
   17934:	str	r3, [sp, #40]	; 0x28
   17938:	b	17904 <__assert_fail@plt+0x65d4>
   1793c:	ldr	r3, [sp, #48]	; 0x30
   17940:	str	r3, [sp, #40]	; 0x28
   17944:	b	1790c <__assert_fail@plt+0x65dc>
   17948:	ldr	r6, [sp, #48]	; 0x30
   1794c:	str	r6, [sp, #40]	; 0x28
   17950:	ldr	r3, [sp, #68]	; 0x44
   17954:	cmp	r3, #0
   17958:	beq	17910 <__assert_fail@plt+0x65e0>
   1795c:	mov	r3, #2
   17960:	mov	fp, r9
   17964:	str	r3, [sp, #176]	; 0xb0
   17968:	ldr	r3, [sp, #60]	; 0x3c
   1796c:	cmp	r3, #0
   17970:	ldr	r3, [sp, #176]	; 0xb0
   17974:	movne	r3, #4
   17978:	str	r3, [sp, #176]	; 0xb0
   1797c:	mov	lr, #0
   17980:	mov	r0, fp
   17984:	ldr	r2, [sp, #28]
   17988:	ldr	r3, [sp, #180]	; 0xb4
   1798c:	ldr	r1, [sp, #188]	; 0xbc
   17990:	bic	ip, r3, #2
   17994:	ldr	r3, [sp, #176]	; 0xb0
   17998:	stm	sp, {r3, ip, lr}
   1799c:	mov	r3, r8
   179a0:	ldr	ip, [sp, #192]	; 0xc0
   179a4:	str	r1, [sp, #12]
   179a8:	mov	r1, sl
   179ac:	str	ip, [sp, #16]
   179b0:	bl	16f3c <__assert_fail@plt+0x5c0c>
   179b4:	mov	r4, r0
   179b8:	mov	r0, r4
   179bc:	add	sp, sp, #140	; 0x8c
   179c0:	ldrd	r4, [sp]
   179c4:	ldrd	r6, [sp, #8]
   179c8:	ldrd	r8, [sp, #16]
   179cc:	ldrd	sl, [sp, #24]
   179d0:	add	sp, sp, #32
   179d4:	pop	{pc}		; (ldr pc, [sp], #4)
   179d8:	ldr	r3, [sp, #48]	; 0x30
   179dc:	str	r3, [sp, #40]	; 0x28
   179e0:	ldr	r3, [sp, #176]	; 0xb0
   179e4:	cmp	r3, #2
   179e8:	beq	17d60 <__assert_fail@plt+0x6a30>
   179ec:	ldr	r3, [sp, #88]	; 0x58
   179f0:	cmp	r3, #0
   179f4:	moveq	r5, #92	; 0x5c
   179f8:	moveq	r3, r5
   179fc:	beq	17764 <__assert_fail@plt+0x6434>
   17a00:	add	r7, r7, #1
   17a04:	mov	r3, fp
   17a08:	mov	r6, #0
   17a0c:	mov	r5, #92	; 0x5c
   17a10:	b	177bc <__assert_fail@plt+0x648c>
   17a14:	ldr	r3, [sp, #64]	; 0x40
   17a18:	cmp	r3, #0
   17a1c:	bne	18894 <__assert_fail@plt+0x7564>
   17a20:	ldr	r2, [sp, #48]	; 0x30
   17a24:	mov	r3, fp
   17a28:	mov	r6, r2
   17a2c:	str	r2, [sp, #40]	; 0x28
   17a30:	b	17784 <__assert_fail@plt+0x6454>
   17a34:	ldr	r3, [sp, #176]	; 0xb0
   17a38:	cmp	r3, #2
   17a3c:	beq	187d0 <__assert_fail@plt+0x74a0>
   17a40:	cmp	r3, #5
   17a44:	ldr	r3, [sp, #48]	; 0x30
   17a48:	str	r3, [sp, #40]	; 0x28
   17a4c:	bne	17a78 <__assert_fail@plt+0x6748>
   17a50:	ldr	r3, [sp, #96]	; 0x60
   17a54:	cmp	r3, #0
   17a58:	beq	184d4 <__assert_fail@plt+0x71a4>
   17a5c:	add	r3, r7, #2
   17a60:	cmp	r3, r8
   17a64:	bcs	17a78 <__assert_fail@plt+0x6748>
   17a68:	ldr	r2, [sp, #36]	; 0x24
   17a6c:	ldrb	r5, [r2, #1]
   17a70:	cmp	r5, #63	; 0x3f
   17a74:	beq	185bc <__assert_fail@plt+0x728c>
   17a78:	mov	r6, #0
   17a7c:	mov	r5, #63	; 0x3f
   17a80:	b	17910 <__assert_fail@plt+0x65e0>
   17a84:	ldr	r3, [sp, #176]	; 0xb0
   17a88:	cmp	r3, #2
   17a8c:	ldr	r3, [sp, #48]	; 0x30
   17a90:	beq	18278 <__assert_fail@plt+0x6f48>
   17a94:	mov	r5, #39	; 0x27
   17a98:	str	r3, [sp, #40]	; 0x28
   17a9c:	str	r6, [sp, #80]	; 0x50
   17aa0:	b	17910 <__assert_fail@plt+0x65e0>
   17aa4:	ldr	r3, [sp, #180]	; 0xb4
   17aa8:	cmp	r4, #0
   17aac:	and	r3, r3, #1
   17ab0:	str	r3, [sp, #92]	; 0x5c
   17ab4:	ldr	r3, [sp, #180]	; 0xb4
   17ab8:	and	r3, r3, #4
   17abc:	str	r3, [sp, #96]	; 0x60
   17ac0:	bne	188e0 <__assert_fail@plt+0x75b0>
   17ac4:	str	r4, [sp, #60]	; 0x3c
   17ac8:	cmp	sl, #0
   17acc:	bne	188c4 <__assert_fail@plt+0x7594>
   17ad0:	mov	r3, #1
   17ad4:	movw	r2, #57072	; 0xdef0
   17ad8:	movt	r2, #1
   17adc:	mov	r4, r3
   17ae0:	mov	r3, #2
   17ae4:	mov	r9, sl
   17ae8:	str	r4, [sp, #32]
   17aec:	str	sl, [sp, #44]	; 0x2c
   17af0:	str	sl, [sp, #48]	; 0x30
   17af4:	str	r4, [sp, #52]	; 0x34
   17af8:	str	r4, [sp, #56]	; 0x38
   17afc:	str	r4, [sp, #64]	; 0x40
   17b00:	str	sl, [sp, #68]	; 0x44
   17b04:	str	r2, [sp, #72]	; 0x48
   17b08:	str	sl, [sp, #80]	; 0x50
   17b0c:	str	sl, [sp, #84]	; 0x54
   17b10:	str	sl, [sp, #88]	; 0x58
   17b14:	str	r3, [sp, #176]	; 0xb0
   17b18:	b	17060 <__assert_fail@plt+0x5d30>
   17b1c:	ldrb	r5, [r0, r7]
   17b20:	cmp	r5, #126	; 0x7e
   17b24:	ldrls	pc, [pc, r5, lsl #2]
   17b28:	b	17e8c <__assert_fail@plt+0x6b5c>
   17b2c:	andeq	r7, r1, r8, asr lr
   17b30:	andeq	r7, r1, ip, lsl #29
   17b34:	andeq	r7, r1, ip, lsl #29
   17b38:	andeq	r7, r1, ip, lsl #29
   17b3c:	andeq	r7, r1, ip, lsl #29
   17b40:	andeq	r7, r1, ip, lsl #29
   17b44:	andeq	r7, r1, ip, lsl #29
   17b48:	andeq	r7, r1, r8, asr #28
   17b4c:	andeq	r7, r1, r8, lsr lr
   17b50:			; <UNDEFINED> instruction: 0x00017dbc
   17b54:	andeq	r7, r1, r8, lsr #28
   17b58:	muleq	r1, ip, sp
   17b5c:	andeq	r7, r1, ip, ror lr
   17b60:	andeq	r7, r1, r8, lsl #28
   17b64:	andeq	r7, r1, ip, lsl #29
   17b68:	andeq	r7, r1, ip, lsl #29
   17b6c:	andeq	r7, r1, ip, lsl #29
   17b70:	andeq	r7, r1, ip, lsl #29
   17b74:	andeq	r7, r1, ip, lsl #29
   17b78:	andeq	r7, r1, ip, lsl #29
   17b7c:	andeq	r7, r1, ip, lsl #29
   17b80:	andeq	r7, r1, ip, lsl #29
   17b84:	andeq	r7, r1, ip, lsl #29
   17b88:	andeq	r7, r1, ip, lsl #29
   17b8c:	andeq	r7, r1, ip, lsl #29
   17b90:	andeq	r7, r1, ip, lsl #29
   17b94:	andeq	r7, r1, ip, lsl #29
   17b98:	andeq	r7, r1, ip, lsl #29
   17b9c:	andeq	r7, r1, ip, lsl #29
   17ba0:	andeq	r7, r1, ip, lsl #29
   17ba4:	andeq	r7, r1, ip, lsl #29
   17ba8:	andeq	r7, r1, ip, lsl #29
   17bac:			; <UNDEFINED> instruction: 0x00017db0
   17bb0:	andeq	r7, r1, r8, lsl lr
   17bb4:	andeq	r7, r1, r8, lsl lr
   17bb8:	muleq	r1, r0, sp
   17bbc:	andeq	r7, r1, r8, lsl lr
   17bc0:	andeq	r7, r1, r4, lsl #27
   17bc4:	andeq	r7, r1, r8, lsl lr
   17bc8:	strdeq	r7, [r1], -r4
   17bcc:	andeq	r7, r1, r8, lsl lr
   17bd0:	andeq	r7, r1, r8, lsl lr
   17bd4:	andeq	r7, r1, r8, lsl lr
   17bd8:	andeq	r7, r1, r4, lsl #27
   17bdc:	andeq	r7, r1, r4, lsl #27
   17be0:	andeq	r7, r1, r4, lsl #27
   17be4:	andeq	r7, r1, r4, lsl #27
   17be8:	andeq	r7, r1, r4, lsl #27
   17bec:	andeq	r7, r1, r4, lsl #27
   17bf0:	andeq	r7, r1, r4, lsl #27
   17bf4:	andeq	r7, r1, r4, lsl #27
   17bf8:	andeq	r7, r1, r4, lsl #27
   17bfc:	andeq	r7, r1, r4, lsl #27
   17c00:	andeq	r7, r1, r4, lsl #27
   17c04:	andeq	r7, r1, r4, lsl #27
   17c08:	andeq	r7, r1, r4, lsl #27
   17c0c:	andeq	r7, r1, r4, lsl #27
   17c10:	andeq	r7, r1, r4, lsl #27
   17c14:	andeq	r7, r1, r4, lsl #27
   17c18:	andeq	r7, r1, r8, lsl lr
   17c1c:	andeq	r7, r1, r8, lsl lr
   17c20:	andeq	r7, r1, r8, lsl lr
   17c24:	andeq	r7, r1, r8, lsl lr
   17c28:	andeq	r7, r1, ip, asr #27
   17c2c:	andeq	r7, r1, ip, lsl #29
   17c30:	andeq	r7, r1, r4, lsl #27
   17c34:	andeq	r7, r1, r4, lsl #27
   17c38:	andeq	r7, r1, r4, lsl #27
   17c3c:	andeq	r7, r1, r4, lsl #27
   17c40:	andeq	r7, r1, r4, lsl #27
   17c44:	andeq	r7, r1, r4, lsl #27
   17c48:	andeq	r7, r1, r4, lsl #27
   17c4c:	andeq	r7, r1, r4, lsl #27
   17c50:	andeq	r7, r1, r4, lsl #27
   17c54:	andeq	r7, r1, r4, lsl #27
   17c58:	andeq	r7, r1, r4, lsl #27
   17c5c:	andeq	r7, r1, r4, lsl #27
   17c60:	andeq	r7, r1, r4, lsl #27
   17c64:	andeq	r7, r1, r4, lsl #27
   17c68:	andeq	r7, r1, r4, lsl #27
   17c6c:	andeq	r7, r1, r4, lsl #27
   17c70:	andeq	r7, r1, r4, lsl #27
   17c74:	andeq	r7, r1, r4, lsl #27
   17c78:	andeq	r7, r1, r4, lsl #27
   17c7c:	andeq	r7, r1, r4, lsl #27
   17c80:	andeq	r7, r1, r4, lsl #27
   17c84:	andeq	r7, r1, r4, lsl #27
   17c88:	andeq	r7, r1, r4, lsl #27
   17c8c:	andeq	r7, r1, r4, lsl #27
   17c90:	andeq	r7, r1, r4, lsl #27
   17c94:	andeq	r7, r1, r4, lsl #27
   17c98:	andeq	r7, r1, r8, lsl lr
   17c9c:	andeq	r7, r1, ip, asr #26
   17ca0:	andeq	r7, r1, r4, lsl #27
   17ca4:	andeq	r7, r1, r8, lsl lr
   17ca8:	andeq	r7, r1, r4, lsl #27
   17cac:	andeq	r7, r1, r8, lsl lr
   17cb0:	andeq	r7, r1, r4, lsl #27
   17cb4:	andeq	r7, r1, r4, lsl #27
   17cb8:	andeq	r7, r1, r4, lsl #27
   17cbc:	andeq	r7, r1, r4, lsl #27
   17cc0:	andeq	r7, r1, r4, lsl #27
   17cc4:	andeq	r7, r1, r4, lsl #27
   17cc8:	andeq	r7, r1, r4, lsl #27
   17ccc:	andeq	r7, r1, r4, lsl #27
   17cd0:	andeq	r7, r1, r4, lsl #27
   17cd4:	andeq	r7, r1, r4, lsl #27
   17cd8:	andeq	r7, r1, r4, lsl #27
   17cdc:	andeq	r7, r1, r4, lsl #27
   17ce0:	andeq	r7, r1, r4, lsl #27
   17ce4:	andeq	r7, r1, r4, lsl #27
   17ce8:	andeq	r7, r1, r4, lsl #27
   17cec:	andeq	r7, r1, r4, lsl #27
   17cf0:	andeq	r7, r1, r4, lsl #27
   17cf4:	andeq	r7, r1, r4, lsl #27
   17cf8:	andeq	r7, r1, r4, lsl #27
   17cfc:	andeq	r7, r1, r4, lsl #27
   17d00:	andeq	r7, r1, r4, lsl #27
   17d04:	andeq	r7, r1, r4, lsl #27
   17d08:	andeq	r7, r1, r4, lsl #27
   17d0c:	andeq	r7, r1, r4, lsl #27
   17d10:	andeq	r7, r1, r4, lsl #27
   17d14:	andeq	r7, r1, r4, lsl #27
   17d18:	andeq	r7, r1, r8, lsr #26
   17d1c:	andeq	r7, r1, r8, lsl lr
   17d20:	andeq	r7, r1, r8, lsr #26
   17d24:	muleq	r1, r0, sp
   17d28:	mov	r3, #0
   17d2c:	cmn	r8, #1
   17d30:	str	r3, [sp, #40]	; 0x28
   17d34:	bne	178f4 <__assert_fail@plt+0x65c4>
   17d38:	ldr	r3, [sp, #28]
   17d3c:	ldrb	r3, [r3, #1]
   17d40:	adds	r3, r3, #0
   17d44:	movne	r3, #1
   17d48:	b	178fc <__assert_fail@plt+0x65cc>
   17d4c:	mov	r3, #0
   17d50:	str	r3, [sp, #40]	; 0x28
   17d54:	ldr	r3, [sp, #176]	; 0xb0
   17d58:	cmp	r3, #2
   17d5c:	bne	179ec <__assert_fail@plt+0x66bc>
   17d60:	ldr	r3, [sp, #44]	; 0x2c
   17d64:	cmp	r3, #0
   17d68:	bne	186a8 <__assert_fail@plt+0x7378>
   17d6c:	mov	r6, r3
   17d70:	add	r7, r7, #1
   17d74:	mov	r3, fp
   17d78:	mov	r5, #92	; 0x5c
   17d7c:	b	177bc <__assert_fail@plt+0x648c>
   17d80:	ldr	r6, [sp, #48]	; 0x30
   17d84:	mov	r3, #0
   17d88:	str	r3, [sp, #40]	; 0x28
   17d8c:	b	17910 <__assert_fail@plt+0x65e0>
   17d90:	mov	r3, #0
   17d94:	str	r3, [sp, #40]	; 0x28
   17d98:	b	17904 <__assert_fail@plt+0x65d4>
   17d9c:	mov	r3, #0
   17da0:	str	r3, [sp, #40]	; 0x28
   17da4:	mov	r3, #118	; 0x76
   17da8:	b	17764 <__assert_fail@plt+0x6434>
   17dac:	ldr	r6, [sp, #48]	; 0x30
   17db0:	mov	r3, #0
   17db4:	str	r3, [sp, #40]	; 0x28
   17db8:	b	17950 <__assert_fail@plt+0x6620>
   17dbc:	mov	r3, #0
   17dc0:	str	r3, [sp, #40]	; 0x28
   17dc4:	mov	r3, #116	; 0x74
   17dc8:	b	17758 <__assert_fail@plt+0x6428>
   17dcc:	ldr	r3, [sp, #176]	; 0xb0
   17dd0:	cmp	r3, #2
   17dd4:	beq	182e4 <__assert_fail@plt+0x6fb4>
   17dd8:	cmp	r3, #5
   17ddc:	mov	r3, #0
   17de0:	str	r3, [sp, #40]	; 0x28
   17de4:	beq	17a50 <__assert_fail@plt+0x6720>
   17de8:	mov	r6, #0
   17dec:	mov	r5, #63	; 0x3f
   17df0:	b	17910 <__assert_fail@plt+0x65e0>
   17df4:	ldr	r3, [sp, #176]	; 0xb0
   17df8:	cmp	r3, #2
   17dfc:	beq	1826c <__assert_fail@plt+0x6f3c>
   17e00:	mov	r3, #0
   17e04:	b	17a94 <__assert_fail@plt+0x6764>
   17e08:	mov	r3, #0
   17e0c:	str	r3, [sp, #40]	; 0x28
   17e10:	mov	r3, #114	; 0x72
   17e14:	b	17758 <__assert_fail@plt+0x6428>
   17e18:	mov	r3, #0
   17e1c:	mov	r6, r3
   17e20:	str	r3, [sp, #40]	; 0x28
   17e24:	b	17950 <__assert_fail@plt+0x6620>
   17e28:	mov	r3, #0
   17e2c:	str	r3, [sp, #40]	; 0x28
   17e30:	mov	r3, #110	; 0x6e
   17e34:	b	17758 <__assert_fail@plt+0x6428>
   17e38:	mov	r3, #0
   17e3c:	str	r3, [sp, #40]	; 0x28
   17e40:	mov	r3, #98	; 0x62
   17e44:	b	17764 <__assert_fail@plt+0x6434>
   17e48:	mov	r3, #0
   17e4c:	str	r3, [sp, #40]	; 0x28
   17e50:	mov	r3, #97	; 0x61
   17e54:	b	17764 <__assert_fail@plt+0x6434>
   17e58:	ldr	r3, [sp, #60]	; 0x3c
   17e5c:	cmp	r3, #0
   17e60:	bne	18250 <__assert_fail@plt+0x6f20>
   17e64:	ldr	r3, [sp, #92]	; 0x5c
   17e68:	cmp	r3, #0
   17e6c:	addne	r7, r7, #1
   17e70:	bne	17070 <__assert_fail@plt+0x5d40>
   17e74:	str	r3, [sp, #40]	; 0x28
   17e78:	b	17770 <__assert_fail@plt+0x6440>
   17e7c:	mov	r3, #0
   17e80:	str	r3, [sp, #40]	; 0x28
   17e84:	mov	r3, #102	; 0x66
   17e88:	b	17764 <__assert_fail@plt+0x6434>
   17e8c:	mov	r3, #0
   17e90:	str	r3, [sp, #40]	; 0x28
   17e94:	ldr	r3, [sp, #76]	; 0x4c
   17e98:	cmp	r3, #1
   17e9c:	bne	18304 <__assert_fail@plt+0x6fd4>
   17ea0:	bl	111a4 <__ctype_b_loc@plt>
   17ea4:	ldr	r2, [r0]
   17ea8:	sxth	r3, r5
   17eac:	lsl	r3, r3, #1
   17eb0:	ldr	r1, [sp, #76]	; 0x4c
   17eb4:	ldrh	r3, [r2, r3]
   17eb8:	mov	r0, r1
   17ebc:	and	r3, r3, #16384	; 0x4000
   17ec0:	cmp	r3, #0
   17ec4:	ldr	r3, [sp, #60]	; 0x3c
   17ec8:	movne	r6, #1
   17ecc:	moveq	r6, #0
   17ed0:	movne	r2, #0
   17ed4:	andeq	r2, r3, #1
   17ed8:	cmp	r2, #0
   17edc:	beq	17910 <__assert_fail@plt+0x65e0>
   17ee0:	ldr	r2, [sp, #60]	; 0x3c
   17ee4:	mov	r6, #0
   17ee8:	add	r1, r0, r7
   17eec:	mov	ip, #39	; 0x27
   17ef0:	str	r6, [sp, #100]	; 0x64
   17ef4:	mov	r0, #0
   17ef8:	ldr	lr, [sp, #36]	; 0x24
   17efc:	str	r8, [sp, #36]	; 0x24
   17f00:	ldr	r6, [sp, #40]	; 0x28
   17f04:	ldr	r8, [sp, #44]	; 0x2c
   17f08:	b	17fb8 <__assert_fail@plt+0x6c88>
   17f0c:	cmp	r8, #0
   17f10:	bne	184ec <__assert_fail@plt+0x71bc>
   17f14:	ldr	r0, [sp, #52]	; 0x34
   17f18:	eor	r3, fp, #1
   17f1c:	ands	r3, r0, r3
   17f20:	beq	17f50 <__assert_fail@plt+0x6c20>
   17f24:	cmp	sl, r4
   17f28:	add	r0, r4, #1
   17f2c:	strbhi	ip, [r9, r4]
   17f30:	cmp	sl, r0
   17f34:	movhi	fp, #36	; 0x24
   17f38:	strbhi	fp, [r9, r0]
   17f3c:	add	r0, r4, #2
   17f40:	mov	fp, r3
   17f44:	cmp	sl, r0
   17f48:	add	r4, r4, #3
   17f4c:	strbhi	ip, [r9, r0]
   17f50:	cmp	sl, r4
   17f54:	movhi	r3, #92	; 0x5c
   17f58:	strbhi	r3, [r9, r4]
   17f5c:	add	r3, r4, #1
   17f60:	cmp	sl, r3
   17f64:	bls	17f74 <__assert_fail@plt+0x6c44>
   17f68:	lsr	r0, r5, #6
   17f6c:	add	r0, r0, #48	; 0x30
   17f70:	strb	r0, [r9, r3]
   17f74:	add	r3, r4, #2
   17f78:	cmp	sl, r3
   17f7c:	bls	17f8c <__assert_fail@plt+0x6c5c>
   17f80:	ubfx	r0, r5, #3, #3
   17f84:	add	r0, r0, #48	; 0x30
   17f88:	strb	r0, [r9, r3]
   17f8c:	add	r7, r7, #1
   17f90:	and	r5, r5, #7
   17f94:	cmp	r1, r7
   17f98:	add	r5, r5, #48	; 0x30
   17f9c:	add	r4, r4, #3
   17fa0:	bls	18500 <__assert_fail@plt+0x71d0>
   17fa4:	mov	r0, r2
   17fa8:	cmp	sl, r4
   17fac:	strbhi	r5, [r9, r4]
   17fb0:	add	r4, r4, #1
   17fb4:	ldrb	r5, [lr, #1]!
   17fb8:	cmp	r2, #0
   17fbc:	bne	17f0c <__assert_fail@plt+0x6bdc>
   17fc0:	eor	r3, r0, #1
   17fc4:	cmp	r6, #0
   17fc8:	and	r3, r3, fp
   17fcc:	uxtb	r3, r3
   17fd0:	beq	17fe4 <__assert_fail@plt+0x6cb4>
   17fd4:	cmp	sl, r4
   17fd8:	movhi	r6, #92	; 0x5c
   17fdc:	strbhi	r6, [r9, r4]
   17fe0:	add	r4, r4, #1
   17fe4:	add	r7, r7, #1
   17fe8:	cmp	r7, r1
   17fec:	bcs	184e0 <__assert_fail@plt+0x71b0>
   17ff0:	cmp	r3, #0
   17ff4:	beq	18524 <__assert_fail@plt+0x71f4>
   17ff8:	cmp	sl, r4
   17ffc:	add	r3, r4, #1
   18000:	mov	r6, #0
   18004:	strbhi	ip, [r9, r4]
   18008:	cmp	sl, r3
   1800c:	add	r4, r4, #2
   18010:	mov	fp, r6
   18014:	strbhi	ip, [r9, r3]
   18018:	b	17fa8 <__assert_fail@plt+0x6c78>
   1801c:	ldr	r3, [sp, #36]	; 0x24
   18020:	ldrb	r5, [r3]
   18024:	cmp	r5, #126	; 0x7e
   18028:	ldrls	pc, [pc, r5, lsl #2]
   1802c:	b	17e8c <__assert_fail@plt+0x6b5c>
   18030:	andeq	r8, r1, r0, asr r2
   18034:	andeq	r7, r1, ip, lsl #29
   18038:	andeq	r7, r1, ip, lsl #29
   1803c:	andeq	r7, r1, ip, lsl #29
   18040:	andeq	r7, r1, ip, lsl #29
   18044:	andeq	r7, r1, ip, lsl #29
   18048:	andeq	r7, r1, ip, lsl #29
   1804c:	andeq	r7, r1, r4, asr #14
   18050:	andeq	r7, r1, ip, lsr r7
   18054:			; <UNDEFINED> instruction: 0x00017dbc
   18058:	andeq	r8, r1, r4, asr #4
   1805c:	muleq	r1, ip, sp
   18060:	andeq	r7, r1, r8, ror #11
   18064:	andeq	r8, r1, r8, lsr r2
   18068:	andeq	r7, r1, ip, lsl #29
   1806c:	andeq	r7, r1, ip, lsl #29
   18070:	andeq	r7, r1, ip, lsl #29
   18074:	andeq	r7, r1, ip, lsl #29
   18078:	andeq	r7, r1, ip, lsl #29
   1807c:	andeq	r7, r1, ip, lsl #29
   18080:	andeq	r7, r1, ip, lsl #29
   18084:	andeq	r7, r1, ip, lsl #29
   18088:	andeq	r7, r1, ip, lsl #29
   1808c:	andeq	r7, r1, ip, lsl #29
   18090:	andeq	r7, r1, ip, lsl #29
   18094:	andeq	r7, r1, ip, lsl #29
   18098:	andeq	r7, r1, ip, lsl #29
   1809c:	andeq	r7, r1, ip, lsl #29
   180a0:	andeq	r7, r1, ip, lsl #29
   180a4:	andeq	r7, r1, ip, lsl #29
   180a8:	andeq	r7, r1, ip, lsl #29
   180ac:	andeq	r7, r1, ip, lsl #29
   180b0:	andeq	r7, r1, ip, lsr #27
   180b4:	andeq	r8, r1, ip, lsr #4
   180b8:	andeq	r8, r1, ip, lsr #4
   180bc:	muleq	r1, r0, sp
   180c0:	andeq	r8, r1, ip, lsr #4
   180c4:	andeq	r7, r1, r0, lsl #27
   180c8:	andeq	r8, r1, ip, lsr #4
   180cc:	strdeq	r7, [r1], -r4
   180d0:	andeq	r8, r1, ip, lsr #4
   180d4:	andeq	r8, r1, ip, lsr #4
   180d8:	andeq	r8, r1, ip, lsr #4
   180dc:	andeq	r7, r1, r0, lsl #27
   180e0:	andeq	r7, r1, r0, lsl #27
   180e4:	andeq	r7, r1, r0, lsl #27
   180e8:	andeq	r7, r1, r0, lsl #27
   180ec:	andeq	r7, r1, r0, lsl #27
   180f0:	andeq	r7, r1, r0, lsl #27
   180f4:	andeq	r7, r1, r0, lsl #27
   180f8:	andeq	r7, r1, r0, lsl #27
   180fc:	andeq	r7, r1, r0, lsl #27
   18100:	andeq	r7, r1, r0, lsl #27
   18104:	andeq	r7, r1, r0, lsl #27
   18108:	andeq	r7, r1, r0, lsl #27
   1810c:	andeq	r7, r1, r0, lsl #27
   18110:	andeq	r7, r1, r0, lsl #27
   18114:	andeq	r7, r1, r0, lsl #27
   18118:	andeq	r7, r1, r0, lsl #27
   1811c:	andeq	r8, r1, ip, lsr #4
   18120:	andeq	r8, r1, ip, lsr #4
   18124:	andeq	r8, r1, ip, lsr #4
   18128:	andeq	r8, r1, ip, lsr #4
   1812c:	andeq	r7, r1, ip, asr #27
   18130:	andeq	r7, r1, ip, lsl #29
   18134:	andeq	r7, r1, r0, lsl #27
   18138:	andeq	r7, r1, r0, lsl #27
   1813c:	andeq	r7, r1, r0, lsl #27
   18140:	andeq	r7, r1, r0, lsl #27
   18144:	andeq	r7, r1, r0, lsl #27
   18148:	andeq	r7, r1, r0, lsl #27
   1814c:	andeq	r7, r1, r0, lsl #27
   18150:	andeq	r7, r1, r0, lsl #27
   18154:	andeq	r7, r1, r0, lsl #27
   18158:	andeq	r7, r1, r0, lsl #27
   1815c:	andeq	r7, r1, r0, lsl #27
   18160:	andeq	r7, r1, r0, lsl #27
   18164:	andeq	r7, r1, r0, lsl #27
   18168:	andeq	r7, r1, r0, lsl #27
   1816c:	andeq	r7, r1, r0, lsl #27
   18170:	andeq	r7, r1, r0, lsl #27
   18174:	andeq	r7, r1, r0, lsl #27
   18178:	andeq	r7, r1, r0, lsl #27
   1817c:	andeq	r7, r1, r0, lsl #27
   18180:	andeq	r7, r1, r0, lsl #27
   18184:	andeq	r7, r1, r0, lsl #27
   18188:	andeq	r7, r1, r0, lsl #27
   1818c:	andeq	r7, r1, r0, lsl #27
   18190:	andeq	r7, r1, r0, lsl #27
   18194:	andeq	r7, r1, r0, lsl #27
   18198:	andeq	r7, r1, r0, lsl #27
   1819c:	andeq	r8, r1, ip, lsr #4
   181a0:	andeq	r7, r1, ip, asr #26
   181a4:	andeq	r7, r1, r0, lsl #27
   181a8:	andeq	r8, r1, ip, lsr #4
   181ac:	andeq	r7, r1, r0, lsl #27
   181b0:	andeq	r8, r1, ip, lsr #4
   181b4:	andeq	r7, r1, r0, lsl #27
   181b8:	andeq	r7, r1, r0, lsl #27
   181bc:	andeq	r7, r1, r0, lsl #27
   181c0:	andeq	r7, r1, r0, lsl #27
   181c4:	andeq	r7, r1, r0, lsl #27
   181c8:	andeq	r7, r1, r0, lsl #27
   181cc:	andeq	r7, r1, r0, lsl #27
   181d0:	andeq	r7, r1, r0, lsl #27
   181d4:	andeq	r7, r1, r0, lsl #27
   181d8:	andeq	r7, r1, r0, lsl #27
   181dc:	andeq	r7, r1, r0, lsl #27
   181e0:	andeq	r7, r1, r0, lsl #27
   181e4:	andeq	r7, r1, r0, lsl #27
   181e8:	andeq	r7, r1, r0, lsl #27
   181ec:	andeq	r7, r1, r0, lsl #27
   181f0:	andeq	r7, r1, r0, lsl #27
   181f4:	andeq	r7, r1, r0, lsl #27
   181f8:	andeq	r7, r1, r0, lsl #27
   181fc:	andeq	r7, r1, r0, lsl #27
   18200:	andeq	r7, r1, r0, lsl #27
   18204:	andeq	r7, r1, r0, lsl #27
   18208:	andeq	r7, r1, r0, lsl #27
   1820c:	andeq	r7, r1, r0, lsl #27
   18210:	andeq	r7, r1, r0, lsl #27
   18214:	andeq	r7, r1, r0, lsl #27
   18218:	andeq	r7, r1, r0, lsl #27
   1821c:	andeq	r7, r1, r8, lsr #26
   18220:	andeq	r8, r1, ip, lsr #4
   18224:	andeq	r7, r1, r8, lsr #26
   18228:	muleq	r1, r0, sp
   1822c:	mov	r3, #0
   18230:	str	r3, [sp, #40]	; 0x28
   18234:	b	1790c <__assert_fail@plt+0x65dc>
   18238:	mov	r3, #0
   1823c:	str	r3, [sp, #40]	; 0x28
   18240:	b	178a4 <__assert_fail@plt+0x6574>
   18244:	mov	r3, #0
   18248:	str	r3, [sp, #40]	; 0x28
   1824c:	b	178d8 <__assert_fail@plt+0x65a8>
   18250:	ldr	r3, [sp, #44]	; 0x2c
   18254:	cmp	r3, #0
   18258:	beq	177f0 <__assert_fail@plt+0x64c0>
   1825c:	ldr	r3, [sp, #52]	; 0x34
   18260:	mov	fp, r9
   18264:	str	r3, [sp, #60]	; 0x3c
   18268:	b	17968 <__assert_fail@plt+0x6638>
   1826c:	ldr	r3, [sp, #44]	; 0x2c
   18270:	cmp	r3, #0
   18274:	bne	186a8 <__assert_fail@plt+0x7378>
   18278:	str	r3, [sp, #40]	; 0x28
   1827c:	cmp	sl, #0
   18280:	ldr	r3, [sp, #84]	; 0x54
   18284:	clz	r3, r3
   18288:	lsr	r3, r3, #5
   1828c:	moveq	r3, #0
   18290:	cmp	r3, #0
   18294:	strne	sl, [sp, #84]	; 0x54
   18298:	movne	sl, #0
   1829c:	bne	182cc <__assert_fail@plt+0x6f9c>
   182a0:	cmp	sl, r4
   182a4:	movhi	r3, #39	; 0x27
   182a8:	strbhi	r3, [r9, r4]
   182ac:	add	r3, r4, #1
   182b0:	cmp	sl, r3
   182b4:	movhi	r2, #92	; 0x5c
   182b8:	strbhi	r2, [r9, r3]
   182bc:	add	r3, r4, #2
   182c0:	cmp	sl, r3
   182c4:	movhi	r2, #39	; 0x27
   182c8:	strbhi	r2, [r9, r3]
   182cc:	mov	r3, #0
   182d0:	add	r4, r4, #3
   182d4:	str	r6, [sp, #80]	; 0x50
   182d8:	mov	fp, r3
   182dc:	mov	r5, #39	; 0x27
   182e0:	b	177ac <__assert_fail@plt+0x647c>
   182e4:	ldr	r3, [sp, #44]	; 0x2c
   182e8:	cmp	r3, #0
   182ec:	bne	186a8 <__assert_fail@plt+0x7378>
   182f0:	mov	r6, #0
   182f4:	mov	r5, #63	; 0x3f
   182f8:	str	r3, [sp, #40]	; 0x28
   182fc:	mov	r3, fp
   18300:	b	177ac <__assert_fail@plt+0x647c>
   18304:	mov	r2, #0
   18308:	mov	r3, #0
   1830c:	cmn	r8, #1
   18310:	strd	r2, [sp, #128]	; 0x80
   18314:	bne	18324 <__assert_fail@plt+0x6ff4>
   18318:	ldr	r0, [sp, #28]
   1831c:	bl	111bc <strlen@plt>
   18320:	mov	r8, r0
   18324:	str	r9, [sp, #100]	; 0x64
   18328:	mov	r3, #0
   1832c:	strd	sl, [sp, #104]	; 0x68
   18330:	ldr	sl, [sp, #28]
   18334:	str	r5, [sp, #112]	; 0x70
   18338:	mov	r5, r3
   1833c:	ldr	r9, [sp, #68]	; 0x44
   18340:	str	r4, [sp, #116]	; 0x74
   18344:	add	r4, r7, r5
   18348:	add	r3, sp, #128	; 0x80
   1834c:	add	fp, sl, r4
   18350:	sub	r2, r8, r4
   18354:	mov	r1, fp
   18358:	add	r0, sp, #124	; 0x7c
   1835c:	bl	1cb04 <__assert_fail@plt+0xb7d4>
   18360:	subs	r1, r0, #0
   18364:	beq	183a4 <__assert_fail@plt+0x7074>
   18368:	cmn	r1, #1
   1836c:	beq	186fc <__assert_fail@plt+0x73cc>
   18370:	cmn	r1, #2
   18374:	beq	1871c <__assert_fail@plt+0x73ec>
   18378:	cmp	r9, #0
   1837c:	bne	183d4 <__assert_fail@plt+0x70a4>
   18380:	ldr	r0, [sp, #124]	; 0x7c
   18384:	add	r5, r5, r1
   18388:	bl	110f0 <iswprint@plt>
   1838c:	cmp	r0, #0
   18390:	add	r0, sp, #128	; 0x80
   18394:	moveq	r6, #0
   18398:	bl	11090 <mbsinit@plt>
   1839c:	cmp	r0, #0
   183a0:	beq	18344 <__assert_fail@plt+0x7014>
   183a4:	ldr	r3, [sp, #60]	; 0x3c
   183a8:	add	r9, sp, #100	; 0x64
   183ac:	mov	r0, r5
   183b0:	ldm	r9, {r9, sl, fp}
   183b4:	eor	r2, r6, #1
   183b8:	ldr	r5, [sp, #112]	; 0x70
   183bc:	and	r2, r2, r3
   183c0:	uxtb	r2, r2
   183c4:	ldr	r4, [sp, #116]	; 0x74
   183c8:	cmp	r0, #1
   183cc:	bhi	17ee8 <__assert_fail@plt+0x6bb8>
   183d0:	b	17ed8 <__assert_fail@plt+0x6ba8>
   183d4:	cmp	r1, #1
   183d8:	beq	18380 <__assert_fail@plt+0x7050>
   183dc:	add	r2, r4, #1
   183e0:	add	r3, sl, r1
   183e4:	add	r2, sl, r2
   183e8:	add	r4, r3, r4
   183ec:	ldrb	r3, [r2], #1
   183f0:	sub	r3, r3, #91	; 0x5b
   183f4:	cmp	r3, #33	; 0x21
   183f8:	ldrls	pc, [pc, r3, lsl #2]
   183fc:	b	18488 <__assert_fail@plt+0x7158>
   18400:	muleq	r1, r4, r4
   18404:	muleq	r1, r4, r4
   18408:	andeq	r8, r1, r8, lsl #9
   1840c:	muleq	r1, r4, r4
   18410:	andeq	r8, r1, r8, lsl #9
   18414:	muleq	r1, r4, r4
   18418:	andeq	r8, r1, r8, lsl #9
   1841c:	andeq	r8, r1, r8, lsl #9
   18420:	andeq	r8, r1, r8, lsl #9
   18424:	andeq	r8, r1, r8, lsl #9
   18428:	andeq	r8, r1, r8, lsl #9
   1842c:	andeq	r8, r1, r8, lsl #9
   18430:	andeq	r8, r1, r8, lsl #9
   18434:	andeq	r8, r1, r8, lsl #9
   18438:	andeq	r8, r1, r8, lsl #9
   1843c:	andeq	r8, r1, r8, lsl #9
   18440:	andeq	r8, r1, r8, lsl #9
   18444:	andeq	r8, r1, r8, lsl #9
   18448:	andeq	r8, r1, r8, lsl #9
   1844c:	andeq	r8, r1, r8, lsl #9
   18450:	andeq	r8, r1, r8, lsl #9
   18454:	andeq	r8, r1, r8, lsl #9
   18458:	andeq	r8, r1, r8, lsl #9
   1845c:	andeq	r8, r1, r8, lsl #9
   18460:	andeq	r8, r1, r8, lsl #9
   18464:	andeq	r8, r1, r8, lsl #9
   18468:	andeq	r8, r1, r8, lsl #9
   1846c:	andeq	r8, r1, r8, lsl #9
   18470:	andeq	r8, r1, r8, lsl #9
   18474:	andeq	r8, r1, r8, lsl #9
   18478:	andeq	r8, r1, r8, lsl #9
   1847c:	andeq	r8, r1, r8, lsl #9
   18480:	andeq	r8, r1, r8, lsl #9
   18484:	muleq	r1, r4, r4
   18488:	cmp	r4, r2
   1848c:	bne	183ec <__assert_fail@plt+0x70bc>
   18490:	b	18380 <__assert_fail@plt+0x7050>
   18494:	mov	r3, #2
   18498:	ldr	fp, [sp, #100]	; 0x64
   1849c:	str	r3, [sp, #176]	; 0xb0
   184a0:	ldr	sl, [sp, #104]	; 0x68
   184a4:	b	17968 <__assert_fail@plt+0x6638>
   184a8:	ldr	r2, [sp, #52]	; 0x34
   184ac:	mov	fp, r9
   184b0:	ldr	r3, [sp, #60]	; 0x3c
   184b4:	and	r3, r3, r2
   184b8:	str	r3, [sp, #60]	; 0x3c
   184bc:	b	17968 <__assert_fail@plt+0x6638>
   184c0:	cmp	sl, r4
   184c4:	movhi	r2, fp
   184c8:	bhi	17840 <__assert_fail@plt+0x6510>
   184cc:	mov	r2, r4
   184d0:	b	17850 <__assert_fail@plt+0x6520>
   184d4:	mov	r6, r3
   184d8:	mov	r5, #63	; 0x3f
   184dc:	b	17910 <__assert_fail@plt+0x65e0>
   184e0:	ldr	r8, [sp, #36]	; 0x24
   184e4:	ldr	r6, [sp, #100]	; 0x64
   184e8:	b	177bc <__assert_fail@plt+0x648c>
   184ec:	mov	fp, r9
   184f0:	ldr	r8, [sp, #36]	; 0x24
   184f4:	ldr	r3, [sp, #52]	; 0x34
   184f8:	str	r3, [sp, #60]	; 0x3c
   184fc:	b	17968 <__assert_fail@plt+0x6638>
   18500:	ldr	r8, [sp, #36]	; 0x24
   18504:	ldr	r6, [sp, #100]	; 0x64
   18508:	b	17654 <__assert_fail@plt+0x6324>
   1850c:	mov	r3, #0
   18510:	add	r4, r4, #4
   18514:	mov	fp, r2
   18518:	mov	r6, r3
   1851c:	mov	r5, #48	; 0x30
   18520:	b	177ac <__assert_fail@plt+0x647c>
   18524:	mov	r6, r3
   18528:	b	17fa8 <__assert_fail@plt+0x6c78>
   1852c:	mov	r3, #1
   18530:	movw	r2, #57052	; 0xdedc
   18534:	movt	r2, #1
   18538:	mov	r4, r3
   1853c:	mov	r9, sl
   18540:	str	r3, [sp, #32]
   18544:	str	sl, [sp, #44]	; 0x2c
   18548:	str	r3, [sp, #48]	; 0x30
   1854c:	str	sl, [sp, #52]	; 0x34
   18550:	str	r3, [sp, #56]	; 0x38
   18554:	str	r3, [sp, #60]	; 0x3c
   18558:	str	sl, [sp, #64]	; 0x40
   1855c:	str	sl, [sp, #68]	; 0x44
   18560:	str	r2, [sp, #72]	; 0x48
   18564:	str	sl, [sp, #80]	; 0x50
   18568:	str	sl, [sp, #84]	; 0x54
   1856c:	str	sl, [sp, #88]	; 0x58
   18570:	b	17060 <__assert_fail@plt+0x5d30>
   18574:	mov	r3, #0
   18578:	mov	r5, #48	; 0x30
   1857c:	mov	r6, r3
   18580:	b	177ac <__assert_fail@plt+0x647c>
   18584:	cmp	sl, r4
   18588:	mov	r5, #48	; 0x30
   1858c:	movhi	r3, #48	; 0x30
   18590:	strbhi	r3, [r9, r4]
   18594:	add	r3, r2, #2
   18598:	add	r4, r2, #3
   1859c:	cmp	sl, r3
   185a0:	movhi	r1, #48	; 0x30
   185a4:	strbhi	r1, [r9, r3]
   185a8:	mov	r3, #0
   185ac:	b	17888 <__assert_fail@plt+0x6558>
   185b0:	ldr	r3, [sp, #48]	; 0x30
   185b4:	str	r3, [sp, #40]	; 0x28
   185b8:	b	17e94 <__assert_fail@plt+0x6b64>
   185bc:	ldr	r2, [sp, #28]
   185c0:	ldrb	r2, [r2, r3]
   185c4:	sub	r1, r2, #33	; 0x21
   185c8:	cmp	r1, #29
   185cc:	ldrls	pc, [pc, r1, lsl #2]
   185d0:	b	1790c <__assert_fail@plt+0x65dc>
   185d4:	andeq	r8, r1, ip, asr #12
   185d8:	andeq	r7, r1, ip, lsl #18
   185dc:	andeq	r7, r1, ip, lsl #18
   185e0:	andeq	r7, r1, ip, lsl #18
   185e4:	andeq	r7, r1, ip, lsl #18
   185e8:	andeq	r7, r1, ip, lsl #18
   185ec:	andeq	r8, r1, ip, asr #12
   185f0:	andeq	r8, r1, ip, asr #12
   185f4:	andeq	r8, r1, ip, asr #12
   185f8:	andeq	r7, r1, ip, lsl #18
   185fc:	andeq	r7, r1, ip, lsl #18
   18600:	andeq	r7, r1, ip, lsl #18
   18604:	andeq	r8, r1, ip, asr #12
   18608:	andeq	r7, r1, ip, lsl #18
   1860c:	andeq	r8, r1, ip, asr #12
   18610:	andeq	r7, r1, ip, lsl #18
   18614:	andeq	r7, r1, ip, lsl #18
   18618:	andeq	r7, r1, ip, lsl #18
   1861c:	andeq	r7, r1, ip, lsl #18
   18620:	andeq	r7, r1, ip, lsl #18
   18624:	andeq	r7, r1, ip, lsl #18
   18628:	andeq	r7, r1, ip, lsl #18
   1862c:	andeq	r7, r1, ip, lsl #18
   18630:	andeq	r7, r1, ip, lsl #18
   18634:	andeq	r7, r1, ip, lsl #18
   18638:	andeq	r7, r1, ip, lsl #18
   1863c:	andeq	r7, r1, ip, lsl #18
   18640:	andeq	r8, r1, ip, asr #12
   18644:	andeq	r8, r1, ip, asr #12
   18648:	andeq	r8, r1, ip, asr #12
   1864c:	ldr	r1, [sp, #44]	; 0x2c
   18650:	cmp	r1, #0
   18654:	bne	188b4 <__assert_fail@plt+0x7584>
   18658:	cmp	sl, r4
   1865c:	mov	r7, r3
   18660:	movhi	r1, #63	; 0x3f
   18664:	mov	r5, r2
   18668:	mov	r3, fp
   1866c:	strbhi	r1, [r9, r4]
   18670:	add	r1, r4, #1
   18674:	cmp	sl, r1
   18678:	movhi	r0, #34	; 0x22
   1867c:	strbhi	r0, [r9, r1]
   18680:	add	r1, r4, #2
   18684:	cmp	sl, r1
   18688:	movhi	r0, #34	; 0x22
   1868c:	strbhi	r0, [r9, r1]
   18690:	add	r1, r4, #3
   18694:	add	r4, r4, #4
   18698:	cmp	sl, r1
   1869c:	movhi	r0, #63	; 0x3f
   186a0:	strbhi	r0, [r9, r1]
   186a4:	b	17888 <__assert_fail@plt+0x6558>
   186a8:	mov	fp, r9
   186ac:	b	17968 <__assert_fail@plt+0x6638>
   186b0:	ldr	r3, [sp, #188]	; 0xbc
   186b4:	ldrb	r3, [r3]
   186b8:	cmp	r3, #0
   186bc:	beq	16ff8 <__assert_fail@plt+0x5cc8>
   186c0:	ldr	r2, [sp, #188]	; 0xbc
   186c4:	cmp	sl, r4
   186c8:	bls	186e8 <__assert_fail@plt+0x73b8>
   186cc:	strb	r3, [fp, r4]
   186d0:	add	r4, r4, #1
   186d4:	ldrb	r3, [r2, #1]!
   186d8:	cmp	r3, #0
   186dc:	beq	16ff8 <__assert_fail@plt+0x5cc8>
   186e0:	cmp	sl, r4
   186e4:	bhi	186cc <__assert_fail@plt+0x739c>
   186e8:	ldrb	r3, [r2, #1]!
   186ec:	add	r4, r4, #1
   186f0:	cmp	r3, #0
   186f4:	bne	186c4 <__assert_fail@plt+0x7394>
   186f8:	b	16ff8 <__assert_fail@plt+0x5cc8>
   186fc:	add	r9, sp, #100	; 0x64
   18700:	mov	r0, r5
   18704:	ldr	r2, [sp, #60]	; 0x3c
   18708:	mov	r6, #0
   1870c:	ldm	r9, {r9, sl, fp}
   18710:	ldr	r5, [sp, #112]	; 0x70
   18714:	ldr	r4, [sp, #116]	; 0x74
   18718:	b	183c8 <__assert_fail@plt+0x7098>
   1871c:	cmp	r4, r8
   18720:	add	r9, sp, #100	; 0x64
   18724:	mov	r1, r4
   18728:	mov	r2, fp
   1872c:	ldm	r9, {r9, sl, fp}
   18730:	mov	r3, r5
   18734:	mov	r0, r5
   18738:	ldr	r5, [sp, #112]	; 0x70
   1873c:	ldr	r4, [sp, #116]	; 0x74
   18740:	bcs	18774 <__assert_fail@plt+0x7444>
   18744:	ldrb	r6, [r2]
   18748:	cmp	r6, #0
   1874c:	bne	18760 <__assert_fail@plt+0x7430>
   18750:	b	188ac <__assert_fail@plt+0x757c>
   18754:	ldrb	r6, [r2, #1]!
   18758:	cmp	r6, #0
   1875c:	beq	18844 <__assert_fail@plt+0x7514>
   18760:	add	r3, r3, #1
   18764:	add	r1, r7, r3
   18768:	cmp	r8, r1
   1876c:	bhi	18754 <__assert_fail@plt+0x7424>
   18770:	mov	r0, r3
   18774:	mov	r6, #0
   18778:	ldr	r2, [sp, #60]	; 0x3c
   1877c:	b	183c8 <__assert_fail@plt+0x7098>
   18780:	mov	r3, #1
   18784:	mov	r4, #0
   18788:	mov	r9, r4
   1878c:	str	r3, [sp, #32]
   18790:	str	r3, [sp, #44]	; 0x2c
   18794:	str	r3, [sp, #48]	; 0x30
   18798:	str	r4, [sp, #52]	; 0x34
   1879c:	str	r3, [sp, #56]	; 0x38
   187a0:	str	r3, [sp, #60]	; 0x3c
   187a4:	str	r3, [sp, #88]	; 0x58
   187a8:	movw	r3, #57052	; 0xdedc
   187ac:	movt	r3, #1
   187b0:	str	r4, [sp, #64]	; 0x40
   187b4:	str	r4, [sp, #68]	; 0x44
   187b8:	str	r3, [sp, #72]	; 0x48
   187bc:	str	r4, [sp, #80]	; 0x50
   187c0:	str	r4, [sp, #84]	; 0x54
   187c4:	b	17060 <__assert_fail@plt+0x5d30>
   187c8:	mov	fp, r9
   187cc:	b	1797c <__assert_fail@plt+0x664c>
   187d0:	ldr	r3, [sp, #48]	; 0x30
   187d4:	b	182f0 <__assert_fail@plt+0x6fc0>
   187d8:	mov	r2, r3
   187dc:	ldr	r3, [sp, #72]	; 0x48
   187e0:	cmp	r3, #0
   187e4:	moveq	r2, #0
   187e8:	andne	r2, r2, #1
   187ec:	cmp	r2, #0
   187f0:	beq	18820 <__assert_fail@plt+0x74f0>
   187f4:	mov	r2, r3
   187f8:	ldrb	r3, [r3]
   187fc:	cmp	r3, #0
   18800:	beq	18820 <__assert_fail@plt+0x74f0>
   18804:	cmp	sl, r4
   18808:	bls	18830 <__assert_fail@plt+0x7500>
   1880c:	strb	r3, [fp, r4]
   18810:	add	r4, r4, #1
   18814:	ldrb	r3, [r2, #1]!
   18818:	cmp	r3, #0
   1881c:	bne	18804 <__assert_fail@plt+0x74d4>
   18820:	cmp	sl, r4
   18824:	movhi	r3, #0
   18828:	strbhi	r3, [fp, r4]
   1882c:	b	179b8 <__assert_fail@plt+0x6688>
   18830:	ldrb	r3, [r2, #1]!
   18834:	add	r4, r4, #1
   18838:	cmp	r3, #0
   1883c:	bne	18804 <__assert_fail@plt+0x74d4>
   18840:	b	18820 <__assert_fail@plt+0x74f0>
   18844:	mov	r0, r3
   18848:	ldr	r2, [sp, #60]	; 0x3c
   1884c:	b	183c8 <__assert_fail@plt+0x7098>
   18850:	mov	ip, #5
   18854:	mov	r3, r8
   18858:	ldr	r1, [sp, #84]	; 0x54
   1885c:	str	ip, [sp]
   18860:	ldr	r2, [sp, #180]	; 0xb4
   18864:	ldr	ip, [sp, #188]	; 0xbc
   18868:	ldr	r0, [sp, #184]	; 0xb8
   1886c:	str	r2, [sp, #4]
   18870:	ldr	r2, [sp, #28]
   18874:	str	ip, [sp, #12]
   18878:	ldr	ip, [sp, #192]	; 0xc0
   1887c:	str	r0, [sp, #8]
   18880:	mov	r0, fp
   18884:	str	ip, [sp, #16]
   18888:	bl	16f3c <__assert_fail@plt+0x5c0c>
   1888c:	mov	r4, r0
   18890:	b	179b8 <__assert_fail@plt+0x6688>
   18894:	mov	r6, r3
   18898:	str	r3, [sp, #40]	; 0x28
   1889c:	b	17928 <__assert_fail@plt+0x65f8>
   188a0:	mov	r3, #2
   188a4:	str	r3, [sp, #176]	; 0xb0
   188a8:	b	17968 <__assert_fail@plt+0x6638>
   188ac:	ldr	r2, [sp, #60]	; 0x3c
   188b0:	b	183c8 <__assert_fail@plt+0x7098>
   188b4:	mov	r3, #5
   188b8:	mov	fp, r9
   188bc:	str	r3, [sp, #176]	; 0xb0
   188c0:	b	1797c <__assert_fail@plt+0x664c>
   188c4:	mov	r1, #1
   188c8:	mov	r9, #0
   188cc:	mov	r3, r9
   188d0:	mov	r2, r9
   188d4:	str	r1, [sp, #32]
   188d8:	str	sl, [sp, #84]	; 0x54
   188dc:	b	17704 <__assert_fail@plt+0x63d4>
   188e0:	mov	r3, #0
   188e4:	mov	r2, #1
   188e8:	mov	r9, r3
   188ec:	mov	r4, r3
   188f0:	str	r2, [sp, #32]
   188f4:	strd	r2, [sp, #44]	; 0x2c
   188f8:	strd	r2, [sp, #56]	; 0x38
   188fc:	str	r3, [sp, #80]	; 0x50
   18900:	str	r3, [sp, #84]	; 0x54
   18904:	str	r3, [sp, #88]	; 0x58
   18908:	movw	r3, #57072	; 0xdef0
   1890c:	movt	r3, #1
   18910:	str	r2, [sp, #52]	; 0x34
   18914:	str	r2, [sp, #64]	; 0x40
   18918:	str	r2, [sp, #68]	; 0x44
   1891c:	str	r3, [sp, #72]	; 0x48
   18920:	b	17060 <__assert_fail@plt+0x5d30>
   18924:	bl	112e8 <abort@plt>
   18928:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1892c:	mov	r4, r0
   18930:	mov	r5, r3
   18934:	strd	r6, [sp, #8]
   18938:	movw	r7, #61756	; 0xf13c
   1893c:	movt	r7, #2
   18940:	strd	r8, [sp, #16]
   18944:	strd	sl, [sp, #24]
   18948:	mov	sl, r1
   1894c:	mov	fp, r2
   18950:	str	lr, [sp, #32]
   18954:	sub	sp, sp, #60	; 0x3c
   18958:	bl	111ec <__errno_location@plt>
   1895c:	mov	r8, r0
   18960:	cmn	r4, #-2147483647	; 0x80000001
   18964:	ldr	r6, [r7]
   18968:	movne	r0, #0
   1896c:	moveq	r0, #1
   18970:	ldr	r3, [r8]
   18974:	orrs	r0, r0, r4, lsr #31
   18978:	str	r3, [sp, #28]
   1897c:	bne	18b0c <__assert_fail@plt+0x77dc>
   18980:	ldr	r3, [r7, #4]
   18984:	cmp	r3, r4
   18988:	bgt	189e8 <__assert_fail@plt+0x76b8>
   1898c:	add	r1, r7, #8
   18990:	sub	r2, r4, r3
   18994:	str	r3, [sp, #52]	; 0x34
   18998:	cmp	r6, r1
   1899c:	add	r2, r2, #1
   189a0:	beq	18ae4 <__assert_fail@plt+0x77b4>
   189a4:	mov	r1, #8
   189a8:	mov	r0, r6
   189ac:	mvn	r3, #-2147483648	; 0x80000000
   189b0:	str	r1, [sp]
   189b4:	add	r1, sp, #52	; 0x34
   189b8:	bl	1b300 <__assert_fail@plt+0x9fd0>
   189bc:	mov	r6, r0
   189c0:	str	r0, [r7]
   189c4:	ldr	r0, [r7, #4]
   189c8:	mov	r1, #0
   189cc:	ldr	r2, [sp, #52]	; 0x34
   189d0:	sub	r2, r2, r0
   189d4:	add	r0, r6, r0, lsl #3
   189d8:	lsl	r2, r2, #3
   189dc:	bl	11204 <memset@plt>
   189e0:	ldr	r3, [sp, #52]	; 0x34
   189e4:	str	r3, [r7, #4]
   189e8:	ldr	r1, [r5, #4]
   189ec:	add	r0, r6, r4, lsl #3
   189f0:	add	ip, r5, #8
   189f4:	mov	r3, fp
   189f8:	mov	r2, sl
   189fc:	ldr	r7, [r0, #4]
   18a00:	str	r0, [sp, #36]	; 0x24
   18a04:	str	ip, [sp, #40]	; 0x28
   18a08:	orr	r0, r1, #1
   18a0c:	ldr	r9, [r6, r4, lsl #3]
   18a10:	str	ip, [sp, #8]
   18a14:	ldr	lr, [r5, #44]	; 0x2c
   18a18:	str	r0, [sp, #4]
   18a1c:	ldr	ip, [r5]
   18a20:	mov	r1, r9
   18a24:	str	ip, [sp, #32]
   18a28:	ldr	ip, [r5, #40]	; 0x28
   18a2c:	str	ip, [sp, #12]
   18a30:	ldr	ip, [sp, #32]
   18a34:	str	lr, [sp, #16]
   18a38:	str	r0, [sp, #44]	; 0x2c
   18a3c:	mov	r0, r7
   18a40:	str	ip, [sp]
   18a44:	bl	16f3c <__assert_fail@plt+0x5c0c>
   18a48:	cmp	r9, r0
   18a4c:	bhi	18abc <__assert_fail@plt+0x778c>
   18a50:	add	r9, r0, #1
   18a54:	movw	r3, #61892	; 0xf1c4
   18a58:	movt	r3, #2
   18a5c:	cmp	r7, r3
   18a60:	str	r9, [r6, r4, lsl #3]
   18a64:	beq	18a70 <__assert_fail@plt+0x7740>
   18a68:	mov	r0, r7
   18a6c:	bl	12d1c <__assert_fail@plt+0x19ec>
   18a70:	mov	r0, r9
   18a74:	bl	1b05c <__assert_fail@plt+0x9d2c>
   18a78:	ldr	ip, [r5]
   18a7c:	mov	r3, fp
   18a80:	mov	r2, sl
   18a84:	mov	r1, r9
   18a88:	mov	r7, r0
   18a8c:	ldr	lr, [sp, #36]	; 0x24
   18a90:	ldr	r4, [r5, #40]	; 0x28
   18a94:	str	r0, [lr, #4]
   18a98:	ldr	lr, [r5, #44]	; 0x2c
   18a9c:	str	ip, [sp]
   18aa0:	ldr	ip, [sp, #44]	; 0x2c
   18aa4:	str	ip, [sp, #4]
   18aa8:	ldr	ip, [sp, #40]	; 0x28
   18aac:	str	r4, [sp, #12]
   18ab0:	str	lr, [sp, #16]
   18ab4:	str	ip, [sp, #8]
   18ab8:	bl	16f3c <__assert_fail@plt+0x5c0c>
   18abc:	ldr	r3, [sp, #28]
   18ac0:	mov	r0, r7
   18ac4:	str	r3, [r8]
   18ac8:	add	sp, sp, #60	; 0x3c
   18acc:	ldrd	r4, [sp]
   18ad0:	ldrd	r6, [sp, #8]
   18ad4:	ldrd	r8, [sp, #16]
   18ad8:	ldrd	sl, [sp, #24]
   18adc:	add	sp, sp, #32
   18ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ae4:	mov	r1, #8
   18ae8:	mvn	r3, #-2147483648	; 0x80000000
   18aec:	str	r1, [sp]
   18af0:	add	r1, sp, #52	; 0x34
   18af4:	bl	1b300 <__assert_fail@plt+0x9fd0>
   18af8:	ldrd	r2, [r7, #8]
   18afc:	mov	r6, r0
   18b00:	str	r0, [r7]
   18b04:	strd	r2, [r0]
   18b08:	b	189c4 <__assert_fail@plt+0x7694>
   18b0c:	bl	112e8 <abort@plt>
   18b10:	strd	r4, [sp, #-16]!
   18b14:	mov	r5, r0
   18b18:	str	r6, [sp, #8]
   18b1c:	str	lr, [sp, #12]
   18b20:	bl	111ec <__errno_location@plt>
   18b24:	mov	r4, r0
   18b28:	cmp	r5, #0
   18b2c:	ldr	r0, [pc, #32]	; 18b54 <__assert_fail@plt+0x7824>
   18b30:	mov	r1, #48	; 0x30
   18b34:	movne	r0, r5
   18b38:	ldr	r6, [r4]
   18b3c:	bl	1b4a0 <__assert_fail@plt+0xa170>
   18b40:	str	r6, [r4]
   18b44:	ldrd	r4, [sp]
   18b48:	ldr	r6, [sp, #8]
   18b4c:	add	sp, sp, #12
   18b50:	pop	{pc}		; (ldr pc, [sp], #4)
   18b54:	andeq	pc, r2, r4, asr #5
   18b58:	ldr	r3, [pc, #12]	; 18b6c <__assert_fail@plt+0x783c>
   18b5c:	cmp	r0, #0
   18b60:	moveq	r0, r3
   18b64:	ldr	r0, [r0]
   18b68:	bx	lr
   18b6c:	andeq	pc, r2, r4, asr #5
   18b70:	ldr	r3, [pc, #12]	; 18b84 <__assert_fail@plt+0x7854>
   18b74:	cmp	r0, #0
   18b78:	moveq	r0, r3
   18b7c:	str	r1, [r0]
   18b80:	bx	lr
   18b84:	andeq	pc, r2, r4, asr #5
   18b88:	ldr	r3, [pc, #52]	; 18bc4 <__assert_fail@plt+0x7894>
   18b8c:	cmp	r0, #0
   18b90:	push	{lr}		; (str lr, [sp, #-4]!)
   18b94:	lsr	lr, r1, #5
   18b98:	and	r1, r1, #31
   18b9c:	moveq	r0, r3
   18ba0:	add	r3, r0, #8
   18ba4:	ldr	ip, [r3, lr, lsl #2]
   18ba8:	lsr	r0, ip, r1
   18bac:	eor	r2, r2, r0
   18bb0:	and	r0, r0, #1
   18bb4:	and	r2, r2, #1
   18bb8:	eor	r1, ip, r2, lsl r1
   18bbc:	str	r1, [r3, lr, lsl #2]
   18bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   18bc4:	andeq	pc, r2, r4, asr #5
   18bc8:	ldr	r3, [pc, #16]	; 18be0 <__assert_fail@plt+0x78b0>
   18bcc:	cmp	r0, #0
   18bd0:	movne	r3, r0
   18bd4:	ldr	r0, [r3, #4]
   18bd8:	str	r1, [r3, #4]
   18bdc:	bx	lr
   18be0:	andeq	pc, r2, r4, asr #5
   18be4:	ldr	r3, [pc, #48]	; 18c1c <__assert_fail@plt+0x78ec>
   18be8:	cmp	r0, #0
   18bec:	mov	ip, #10
   18bf0:	moveq	r0, r3
   18bf4:	cmp	r2, #0
   18bf8:	cmpne	r1, #0
   18bfc:	str	ip, [r0]
   18c00:	beq	18c10 <__assert_fail@plt+0x78e0>
   18c04:	str	r1, [r0, #40]	; 0x28
   18c08:	str	r2, [r0, #44]	; 0x2c
   18c0c:	bx	lr
   18c10:	str	r4, [sp, #-8]!
   18c14:	str	lr, [sp, #4]
   18c18:	bl	112e8 <abort@plt>
   18c1c:	andeq	pc, r2, r4, asr #5
   18c20:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18c24:	strd	r6, [sp, #8]
   18c28:	mov	r7, r0
   18c2c:	mov	r6, r1
   18c30:	strd	r8, [sp, #16]
   18c34:	mov	r8, r2
   18c38:	mov	r9, r3
   18c3c:	str	lr, [sp, #24]
   18c40:	sub	sp, sp, #28
   18c44:	ldr	r4, [sp, #56]	; 0x38
   18c48:	ldr	ip, [pc, #104]	; 18cb8 <__assert_fail@plt+0x7988>
   18c4c:	cmp	r4, #0
   18c50:	moveq	r4, ip
   18c54:	bl	111ec <__errno_location@plt>
   18c58:	ldr	ip, [r4, #44]	; 0x2c
   18c5c:	mov	r5, r0
   18c60:	mov	r1, r6
   18c64:	add	lr, r4, #8
   18c68:	mov	r3, r9
   18c6c:	ldr	r6, [r5]
   18c70:	mov	r2, r8
   18c74:	mov	r0, r7
   18c78:	str	ip, [sp, #16]
   18c7c:	ldr	ip, [r4, #40]	; 0x28
   18c80:	str	lr, [sp, #8]
   18c84:	str	ip, [sp, #12]
   18c88:	ldr	ip, [r4, #4]
   18c8c:	str	ip, [sp, #4]
   18c90:	ldr	ip, [r4]
   18c94:	str	ip, [sp]
   18c98:	bl	16f3c <__assert_fail@plt+0x5c0c>
   18c9c:	str	r6, [r5]
   18ca0:	add	sp, sp, #28
   18ca4:	ldrd	r4, [sp]
   18ca8:	ldrd	r6, [sp, #8]
   18cac:	ldrd	r8, [sp, #16]
   18cb0:	add	sp, sp, #24
   18cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   18cb8:	andeq	pc, r2, r4, asr #5
   18cbc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18cc0:	cmp	r2, #0
   18cc4:	ldr	r4, [pc, #192]	; 18d8c <__assert_fail@plt+0x7a5c>
   18cc8:	movne	r4, r2
   18ccc:	strd	r6, [sp, #8]
   18cd0:	strd	r8, [sp, #16]
   18cd4:	mov	r9, r1
   18cd8:	mov	r8, r0
   18cdc:	strd	sl, [sp, #24]
   18ce0:	str	lr, [sp, #32]
   18ce4:	sub	sp, sp, #36	; 0x24
   18ce8:	bl	111ec <__errno_location@plt>
   18cec:	ldr	r5, [r4, #4]
   18cf0:	mov	r6, r0
   18cf4:	add	r7, r4, #8
   18cf8:	mov	r1, #0
   18cfc:	mov	r3, r9
   18d00:	ldr	ip, [r4, #44]	; 0x2c
   18d04:	mov	r2, r8
   18d08:	mov	r0, r1
   18d0c:	ldr	sl, [r6]
   18d10:	orr	r5, r5, #1
   18d14:	str	ip, [sp, #16]
   18d18:	ldr	ip, [r4, #40]	; 0x28
   18d1c:	stmib	sp, {r5, r7, ip}
   18d20:	ldr	ip, [r4]
   18d24:	str	ip, [sp]
   18d28:	bl	16f3c <__assert_fail@plt+0x5c0c>
   18d2c:	add	r1, r0, #1
   18d30:	mov	r0, r1
   18d34:	str	r1, [sp, #28]
   18d38:	bl	1b05c <__assert_fail@plt+0x9d2c>
   18d3c:	ldr	ip, [r4, #44]	; 0x2c
   18d40:	mov	fp, r0
   18d44:	mov	r3, r9
   18d48:	mov	r2, r8
   18d4c:	ldr	r1, [sp, #28]
   18d50:	str	ip, [sp, #16]
   18d54:	ldr	ip, [r4, #40]	; 0x28
   18d58:	stmib	sp, {r5, r7, ip}
   18d5c:	ldr	ip, [r4]
   18d60:	str	ip, [sp]
   18d64:	bl	16f3c <__assert_fail@plt+0x5c0c>
   18d68:	mov	r0, fp
   18d6c:	str	sl, [r6]
   18d70:	add	sp, sp, #36	; 0x24
   18d74:	ldrd	r4, [sp]
   18d78:	ldrd	r6, [sp, #8]
   18d7c:	ldrd	r8, [sp, #16]
   18d80:	ldrd	sl, [sp, #24]
   18d84:	add	sp, sp, #32
   18d88:	pop	{pc}		; (ldr pc, [sp], #4)
   18d8c:	andeq	pc, r2, r4, asr #5
   18d90:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18d94:	cmp	r3, #0
   18d98:	ldr	r4, [pc, #220]	; 18e7c <__assert_fail@plt+0x7b4c>
   18d9c:	movne	r4, r3
   18da0:	strd	r6, [sp, #8]
   18da4:	mov	r6, r2
   18da8:	strd	r8, [sp, #16]
   18dac:	mov	r9, r0
   18db0:	strd	sl, [sp, #24]
   18db4:	mov	sl, r1
   18db8:	str	lr, [sp, #32]
   18dbc:	sub	sp, sp, #44	; 0x2c
   18dc0:	bl	111ec <__errno_location@plt>
   18dc4:	ldr	r5, [r4, #4]
   18dc8:	mov	r7, r0
   18dcc:	mov	r1, #0
   18dd0:	add	r8, r4, #8
   18dd4:	mov	r3, sl
   18dd8:	ldr	ip, [r4, #44]	; 0x2c
   18ddc:	mov	r2, r9
   18de0:	mov	r0, r1
   18de4:	ldr	lr, [r7]
   18de8:	cmp	r6, r1
   18dec:	orreq	r5, r5, #1
   18df0:	str	ip, [sp, #16]
   18df4:	ldr	ip, [r4, #40]	; 0x28
   18df8:	stmib	sp, {r5, r8, ip}
   18dfc:	ldr	ip, [r4]
   18e00:	str	lr, [sp, #28]
   18e04:	str	ip, [sp]
   18e08:	bl	16f3c <__assert_fail@plt+0x5c0c>
   18e0c:	add	r1, r0, #1
   18e10:	mov	fp, r0
   18e14:	mov	r0, r1
   18e18:	str	r1, [sp, #36]	; 0x24
   18e1c:	bl	1b05c <__assert_fail@plt+0x9d2c>
   18e20:	ldr	ip, [r4, #44]	; 0x2c
   18e24:	mov	r3, sl
   18e28:	mov	r2, r9
   18e2c:	ldr	r1, [sp, #36]	; 0x24
   18e30:	str	ip, [sp, #16]
   18e34:	ldr	ip, [r4, #40]	; 0x28
   18e38:	str	r0, [sp, #32]
   18e3c:	stmib	sp, {r5, r8, ip}
   18e40:	ldr	ip, [r4]
   18e44:	str	ip, [sp]
   18e48:	bl	16f3c <__assert_fail@plt+0x5c0c>
   18e4c:	ldr	lr, [sp, #28]
   18e50:	cmp	r6, #0
   18e54:	ldr	r0, [sp, #32]
   18e58:	str	lr, [r7]
   18e5c:	strne	fp, [r6]
   18e60:	add	sp, sp, #44	; 0x2c
   18e64:	ldrd	r4, [sp]
   18e68:	ldrd	r6, [sp, #8]
   18e6c:	ldrd	r8, [sp, #16]
   18e70:	ldrd	sl, [sp, #24]
   18e74:	add	sp, sp, #32
   18e78:	pop	{pc}		; (ldr pc, [sp], #4)
   18e7c:	andeq	pc, r2, r4, asr #5
   18e80:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18e84:	movw	r5, #61756	; 0xf13c
   18e88:	movt	r5, #2
   18e8c:	ldr	r3, [r5, #4]
   18e90:	strd	r6, [sp, #8]
   18e94:	str	r8, [sp, #16]
   18e98:	str	lr, [sp, #20]
   18e9c:	ldr	r7, [r5]
   18ea0:	cmp	r3, #1
   18ea4:	ble	18ec8 <__assert_fail@plt+0x7b98>
   18ea8:	mov	r4, #1
   18eac:	add	r6, r7, #4
   18eb0:	ldr	r0, [r6, r4, lsl #3]
   18eb4:	add	r4, r4, #1
   18eb8:	bl	12d1c <__assert_fail@plt+0x19ec>
   18ebc:	ldr	r3, [r5, #4]
   18ec0:	cmp	r3, r4
   18ec4:	bgt	18eb0 <__assert_fail@plt+0x7b80>
   18ec8:	ldr	r0, [r7, #4]
   18ecc:	movw	r4, #61892	; 0xf1c4
   18ed0:	movt	r4, #2
   18ed4:	cmp	r0, r4
   18ed8:	beq	18eec <__assert_fail@plt+0x7bbc>
   18edc:	bl	12d1c <__assert_fail@plt+0x19ec>
   18ee0:	mov	r3, #256	; 0x100
   18ee4:	str	r3, [r5, #8]
   18ee8:	str	r4, [r5, #12]
   18eec:	ldr	r4, [pc, #44]	; 18f20 <__assert_fail@plt+0x7bf0>
   18ef0:	cmp	r7, r4
   18ef4:	beq	18f04 <__assert_fail@plt+0x7bd4>
   18ef8:	mov	r0, r7
   18efc:	bl	12d1c <__assert_fail@plt+0x19ec>
   18f00:	str	r4, [r5]
   18f04:	mov	r3, #1
   18f08:	ldrd	r6, [sp, #8]
   18f0c:	str	r3, [r5, #4]
   18f10:	ldrd	r4, [sp]
   18f14:	ldr	r8, [sp, #16]
   18f18:	add	sp, sp, #20
   18f1c:	pop	{pc}		; (ldr pc, [sp], #4)
   18f20:	andeq	pc, r2, r4, asr #2
   18f24:	ldr	r3, [pc, #4]	; 18f30 <__assert_fail@plt+0x7c00>
   18f28:	mvn	r2, #0
   18f2c:	b	18928 <__assert_fail@plt+0x75f8>
   18f30:	andeq	pc, r2, r4, asr #5
   18f34:	ldr	r3, [pc]	; 18f3c <__assert_fail@plt+0x7c0c>
   18f38:	b	18928 <__assert_fail@plt+0x75f8>
   18f3c:	andeq	pc, r2, r4, asr #5
   18f40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18f44:	movw	r4, #61756	; 0xf13c
   18f48:	movt	r4, #2
   18f4c:	strd	r6, [sp, #8]
   18f50:	strd	r8, [sp, #16]
   18f54:	strd	sl, [sp, #24]
   18f58:	mov	sl, r0
   18f5c:	str	lr, [sp, #32]
   18f60:	sub	sp, sp, #44	; 0x2c
   18f64:	bl	111ec <__errno_location@plt>
   18f68:	ldr	r3, [r0]
   18f6c:	mov	r8, r0
   18f70:	ldr	r2, [r4, #4]
   18f74:	ldr	r5, [r4]
   18f78:	str	r3, [sp, #28]
   18f7c:	cmp	r2, #0
   18f80:	bgt	18fdc <__assert_fail@plt+0x7cac>
   18f84:	add	r3, r4, #8
   18f88:	str	r2, [sp, #36]	; 0x24
   18f8c:	rsb	r2, r2, #1
   18f90:	cmp	r5, r3
   18f94:	beq	190a8 <__assert_fail@plt+0x7d78>
   18f98:	mov	r1, #8
   18f9c:	mov	r0, r5
   18fa0:	mvn	r3, #-2147483648	; 0x80000000
   18fa4:	str	r1, [sp]
   18fa8:	add	r1, sp, #36	; 0x24
   18fac:	bl	1b300 <__assert_fail@plt+0x9fd0>
   18fb0:	mov	r5, r0
   18fb4:	str	r0, [r4]
   18fb8:	ldr	r0, [r4, #4]
   18fbc:	mov	r1, #0
   18fc0:	ldr	r2, [sp, #36]	; 0x24
   18fc4:	sub	r2, r2, r0
   18fc8:	add	r0, r5, r0, lsl #3
   18fcc:	lsl	r2, r2, #3
   18fd0:	bl	11204 <memset@plt>
   18fd4:	ldr	r3, [sp, #36]	; 0x24
   18fd8:	str	r3, [r4, #4]
   18fdc:	movw	r4, #61892	; 0xf1c4
   18fe0:	movt	r4, #2
   18fe4:	ldr	r9, [r5]
   18fe8:	add	fp, r4, #264	; 0x108
   18fec:	mvn	r3, #0
   18ff0:	ldr	r7, [r4, #260]	; 0x104
   18ff4:	mov	r2, sl
   18ff8:	ldr	r6, [r5, #4]
   18ffc:	str	fp, [sp, #8]
   19000:	mov	r1, r9
   19004:	ldr	ip, [r4, #256]	; 0x100
   19008:	orr	r7, r7, #1
   1900c:	ldr	lr, [r4, #300]	; 0x12c
   19010:	mov	r0, r6
   19014:	str	ip, [sp]
   19018:	str	r7, [sp, #4]
   1901c:	str	lr, [sp, #16]
   19020:	ldr	ip, [r4, #296]	; 0x128
   19024:	str	ip, [sp, #12]
   19028:	bl	16f3c <__assert_fail@plt+0x5c0c>
   1902c:	cmp	r9, r0
   19030:	bhi	19080 <__assert_fail@plt+0x7d50>
   19034:	add	r9, r0, #1
   19038:	cmp	r6, r4
   1903c:	str	r9, [r5]
   19040:	beq	1904c <__assert_fail@plt+0x7d1c>
   19044:	mov	r0, r6
   19048:	bl	12d1c <__assert_fail@plt+0x19ec>
   1904c:	mov	r0, r9
   19050:	bl	1b05c <__assert_fail@plt+0x9d2c>
   19054:	ldr	r3, [r4, #256]	; 0x100
   19058:	mov	r2, sl
   1905c:	mov	r1, r9
   19060:	mov	r6, r0
   19064:	ldr	lr, [r4, #296]	; 0x128
   19068:	ldr	ip, [r4, #300]	; 0x12c
   1906c:	str	r0, [r5, #4]
   19070:	stm	sp, {r3, r7, fp, lr}
   19074:	mvn	r3, #0
   19078:	str	ip, [sp, #16]
   1907c:	bl	16f3c <__assert_fail@plt+0x5c0c>
   19080:	ldr	r3, [sp, #28]
   19084:	mov	r0, r6
   19088:	str	r3, [r8]
   1908c:	add	sp, sp, #44	; 0x2c
   19090:	ldrd	r4, [sp]
   19094:	ldrd	r6, [sp, #8]
   19098:	ldrd	r8, [sp, #16]
   1909c:	ldrd	sl, [sp, #24]
   190a0:	add	sp, sp, #32
   190a4:	pop	{pc}		; (ldr pc, [sp], #4)
   190a8:	mov	r0, #8
   190ac:	mvn	r3, #-2147483648	; 0x80000000
   190b0:	add	r1, sp, #36	; 0x24
   190b4:	str	r0, [sp]
   190b8:	mov	r0, #0
   190bc:	bl	1b300 <__assert_fail@plt+0x9fd0>
   190c0:	ldrd	r2, [r4, #8]
   190c4:	mov	r5, r0
   190c8:	str	r0, [r4]
   190cc:	strd	r2, [r0]
   190d0:	b	18fb8 <__assert_fail@plt+0x7c88>
   190d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   190d8:	movw	r4, #61756	; 0xf13c
   190dc:	movt	r4, #2
   190e0:	strd	r6, [sp, #8]
   190e4:	strd	r8, [sp, #16]
   190e8:	strd	sl, [sp, #24]
   190ec:	mov	sl, r0
   190f0:	mov	fp, r1
   190f4:	str	lr, [sp, #32]
   190f8:	sub	sp, sp, #44	; 0x2c
   190fc:	bl	111ec <__errno_location@plt>
   19100:	ldr	r3, [r0]
   19104:	mov	r8, r0
   19108:	ldr	r2, [r4, #4]
   1910c:	ldr	r5, [r4]
   19110:	str	r3, [sp, #28]
   19114:	cmp	r2, #0
   19118:	bgt	19174 <__assert_fail@plt+0x7e44>
   1911c:	add	r3, r4, #8
   19120:	str	r2, [sp, #36]	; 0x24
   19124:	rsb	r2, r2, #1
   19128:	cmp	r5, r3
   1912c:	beq	19250 <__assert_fail@plt+0x7f20>
   19130:	mov	r1, #8
   19134:	mov	r0, r5
   19138:	mvn	r3, #-2147483648	; 0x80000000
   1913c:	str	r1, [sp]
   19140:	add	r1, sp, #36	; 0x24
   19144:	bl	1b300 <__assert_fail@plt+0x9fd0>
   19148:	mov	r5, r0
   1914c:	str	r0, [r4]
   19150:	ldr	r0, [r4, #4]
   19154:	mov	r1, #0
   19158:	ldr	r2, [sp, #36]	; 0x24
   1915c:	sub	r2, r2, r0
   19160:	add	r0, r5, r0, lsl #3
   19164:	lsl	r2, r2, #3
   19168:	bl	11204 <memset@plt>
   1916c:	ldr	r3, [sp, #36]	; 0x24
   19170:	str	r3, [r4, #4]
   19174:	movw	r4, #61892	; 0xf1c4
   19178:	movt	r4, #2
   1917c:	ldr	r9, [r5]
   19180:	add	r0, r4, #264	; 0x108
   19184:	mov	r3, fp
   19188:	ldr	r7, [r4, #260]	; 0x104
   1918c:	mov	r2, sl
   19190:	ldr	r6, [r5, #4]
   19194:	str	r0, [sp, #8]
   19198:	mov	r1, r9
   1919c:	ldr	ip, [r4, #256]	; 0x100
   191a0:	orr	r7, r7, #1
   191a4:	ldr	lr, [r4, #300]	; 0x12c
   191a8:	mov	r0, r6
   191ac:	str	ip, [sp]
   191b0:	str	r7, [sp, #4]
   191b4:	str	lr, [sp, #16]
   191b8:	ldr	ip, [r4, #296]	; 0x128
   191bc:	str	ip, [sp, #12]
   191c0:	bl	16f3c <__assert_fail@plt+0x5c0c>
   191c4:	cmp	r9, r0
   191c8:	bhi	19228 <__assert_fail@plt+0x7ef8>
   191cc:	add	r9, r0, #1
   191d0:	cmp	r6, r4
   191d4:	str	r9, [r5]
   191d8:	beq	191e4 <__assert_fail@plt+0x7eb4>
   191dc:	mov	r0, r6
   191e0:	bl	12d1c <__assert_fail@plt+0x19ec>
   191e4:	mov	r0, r9
   191e8:	bl	1b05c <__assert_fail@plt+0x9d2c>
   191ec:	ldr	ip, [r4, #256]	; 0x100
   191f0:	mov	r1, r9
   191f4:	mov	r3, fp
   191f8:	mov	r2, sl
   191fc:	mov	r6, r0
   19200:	ldr	r9, [r4, #296]	; 0x128
   19204:	ldr	lr, [r4, #300]	; 0x12c
   19208:	str	r0, [r5, #4]
   1920c:	str	ip, [sp]
   19210:	ldr	ip, [pc, #100]	; 1927c <__assert_fail@plt+0x7f4c>
   19214:	str	r7, [sp, #4]
   19218:	str	ip, [sp, #8]
   1921c:	str	r9, [sp, #12]
   19220:	str	lr, [sp, #16]
   19224:	bl	16f3c <__assert_fail@plt+0x5c0c>
   19228:	ldr	r3, [sp, #28]
   1922c:	mov	r0, r6
   19230:	str	r3, [r8]
   19234:	add	sp, sp, #44	; 0x2c
   19238:	ldrd	r4, [sp]
   1923c:	ldrd	r6, [sp, #8]
   19240:	ldrd	r8, [sp, #16]
   19244:	ldrd	sl, [sp, #24]
   19248:	add	sp, sp, #32
   1924c:	pop	{pc}		; (ldr pc, [sp], #4)
   19250:	mov	r0, #8
   19254:	mvn	r3, #-2147483648	; 0x80000000
   19258:	add	r1, sp, #36	; 0x24
   1925c:	str	r0, [sp]
   19260:	mov	r0, #0
   19264:	bl	1b300 <__assert_fail@plt+0x9fd0>
   19268:	ldrd	r2, [r4, #8]
   1926c:	mov	r5, r0
   19270:	str	r0, [r4]
   19274:	strd	r2, [r0]
   19278:	b	19150 <__assert_fail@plt+0x7e20>
   1927c:	andeq	pc, r2, ip, asr #5
   19280:	strd	r4, [sp, #-20]!	; 0xffffffec
   19284:	mov	r4, #0
   19288:	mov	r5, #0
   1928c:	strd	r6, [sp, #8]
   19290:	cmp	r1, #10
   19294:	str	lr, [sp, #16]
   19298:	sub	sp, sp, #100	; 0x64
   1929c:	strd	r4, [sp, #48]	; 0x30
   192a0:	beq	192e8 <__assert_fail@plt+0x7fb8>
   192a4:	mov	r3, sp
   192a8:	strd	r4, [sp, #8]
   192ac:	str	r1, [sp, #48]	; 0x30
   192b0:	mov	r1, r2
   192b4:	mvn	r2, #0
   192b8:	ldrd	r6, [sp, #48]	; 0x30
   192bc:	strd	r6, [sp]
   192c0:	strd	r4, [sp, #16]
   192c4:	strd	r4, [sp, #24]
   192c8:	strd	r4, [sp, #32]
   192cc:	strd	r4, [sp, #40]	; 0x28
   192d0:	bl	18928 <__assert_fail@plt+0x75f8>
   192d4:	add	sp, sp, #100	; 0x64
   192d8:	ldrd	r4, [sp]
   192dc:	ldrd	r6, [sp, #8]
   192e0:	add	sp, sp, #16
   192e4:	pop	{pc}		; (ldr pc, [sp], #4)
   192e8:	bl	112e8 <abort@plt>
   192ec:	strd	r4, [sp, #-20]!	; 0xffffffec
   192f0:	mov	r4, #0
   192f4:	mov	r5, #0
   192f8:	strd	r6, [sp, #8]
   192fc:	cmp	r1, #10
   19300:	str	lr, [sp, #16]
   19304:	sub	sp, sp, #100	; 0x64
   19308:	strd	r4, [sp, #48]	; 0x30
   1930c:	beq	19358 <__assert_fail@plt+0x8028>
   19310:	mov	ip, r2
   19314:	mov	r2, r3
   19318:	strd	r4, [sp, #8]
   1931c:	str	r1, [sp, #48]	; 0x30
   19320:	mov	r3, sp
   19324:	mov	r1, ip
   19328:	ldrd	r6, [sp, #48]	; 0x30
   1932c:	strd	r6, [sp]
   19330:	strd	r4, [sp, #16]
   19334:	strd	r4, [sp, #24]
   19338:	strd	r4, [sp, #32]
   1933c:	strd	r4, [sp, #40]	; 0x28
   19340:	bl	18928 <__assert_fail@plt+0x75f8>
   19344:	add	sp, sp, #100	; 0x64
   19348:	ldrd	r4, [sp]
   1934c:	ldrd	r6, [sp, #8]
   19350:	add	sp, sp, #16
   19354:	pop	{pc}		; (ldr pc, [sp], #4)
   19358:	bl	112e8 <abort@plt>
   1935c:	mov	r2, #0
   19360:	mov	r3, #0
   19364:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19368:	strd	r6, [sp, #8]
   1936c:	cmp	r0, #10
   19370:	strd	r8, [sp, #16]
   19374:	strd	sl, [sp, #24]
   19378:	str	lr, [sp, #32]
   1937c:	sub	sp, sp, #124	; 0x7c
   19380:	strd	r2, [sp, #72]	; 0x48
   19384:	strd	r2, [sp, #80]	; 0x50
   19388:	strd	r2, [sp, #88]	; 0x58
   1938c:	strd	r2, [sp, #96]	; 0x60
   19390:	strd	r2, [sp, #104]	; 0x68
   19394:	strd	r2, [sp, #112]	; 0x70
   19398:	beq	1953c <__assert_fail@plt+0x820c>
   1939c:	mov	r6, r1
   193a0:	movw	r4, #61756	; 0xf13c
   193a4:	movt	r4, #2
   193a8:	str	r0, [sp, #72]	; 0x48
   193ac:	ldrd	r0, [sp, #72]	; 0x48
   193b0:	strd	r0, [sp, #24]
   193b4:	strd	r2, [sp, #32]
   193b8:	strd	r2, [sp, #40]	; 0x28
   193bc:	strd	r2, [sp, #48]	; 0x30
   193c0:	strd	r2, [sp, #56]	; 0x38
   193c4:	strd	r2, [sp, #64]	; 0x40
   193c8:	bl	111ec <__errno_location@plt>
   193cc:	mov	r8, r0
   193d0:	ldr	r5, [r4]
   193d4:	ldr	r2, [r4, #4]
   193d8:	ldr	r9, [r0]
   193dc:	cmp	r2, #0
   193e0:	bgt	1943c <__assert_fail@plt+0x810c>
   193e4:	add	r3, r4, #8
   193e8:	str	r2, [sp, #72]	; 0x48
   193ec:	rsb	r2, r2, #1
   193f0:	cmp	r5, r3
   193f4:	beq	19510 <__assert_fail@plt+0x81e0>
   193f8:	mov	r3, #8
   193fc:	mov	r0, r5
   19400:	add	r1, sp, #72	; 0x48
   19404:	str	r3, [sp]
   19408:	mvn	r3, #-2147483648	; 0x80000000
   1940c:	bl	1b300 <__assert_fail@plt+0x9fd0>
   19410:	mov	r5, r0
   19414:	str	r0, [r4]
   19418:	ldr	r0, [r4, #4]
   1941c:	mov	r1, #0
   19420:	ldr	r2, [sp, #72]	; 0x48
   19424:	sub	r2, r2, r0
   19428:	add	r0, r5, r0, lsl #3
   1942c:	lsl	r2, r2, #3
   19430:	bl	11204 <memset@plt>
   19434:	ldr	r3, [sp, #72]	; 0x48
   19438:	str	r3, [r4, #4]
   1943c:	ldr	sl, [r5]
   19440:	add	r0, sp, #32
   19444:	mvn	r3, #0
   19448:	mov	r2, r6
   1944c:	ldr	r7, [sp, #28]
   19450:	ldr	r4, [r5, #4]
   19454:	mov	r1, sl
   19458:	str	r0, [sp, #8]
   1945c:	ldr	lr, [sp, #24]
   19460:	orr	r7, r7, #1
   19464:	ldr	ip, [sp, #64]	; 0x40
   19468:	mov	r0, r4
   1946c:	ldr	fp, [sp, #68]	; 0x44
   19470:	str	lr, [sp]
   19474:	str	r7, [sp, #4]
   19478:	str	ip, [sp, #12]
   1947c:	str	fp, [sp, #16]
   19480:	bl	16f3c <__assert_fail@plt+0x5c0c>
   19484:	cmp	sl, r0
   19488:	bhi	194ec <__assert_fail@plt+0x81bc>
   1948c:	add	sl, r0, #1
   19490:	movw	r3, #61892	; 0xf1c4
   19494:	movt	r3, #2
   19498:	cmp	r4, r3
   1949c:	str	sl, [r5]
   194a0:	beq	194ac <__assert_fail@plt+0x817c>
   194a4:	mov	r0, r4
   194a8:	bl	12d1c <__assert_fail@plt+0x19ec>
   194ac:	mov	r0, sl
   194b0:	bl	1b05c <__assert_fail@plt+0x9d2c>
   194b4:	ldr	r3, [sp, #24]
   194b8:	mov	r2, r6
   194bc:	mov	r1, sl
   194c0:	mov	r4, r0
   194c4:	ldr	lr, [sp, #64]	; 0x40
   194c8:	ldr	ip, [sp, #68]	; 0x44
   194cc:	str	r0, [r5, #4]
   194d0:	add	r5, sp, #32
   194d4:	stm	sp, {r3, r7}
   194d8:	mvn	r3, #0
   194dc:	str	r5, [sp, #8]
   194e0:	str	lr, [sp, #12]
   194e4:	str	ip, [sp, #16]
   194e8:	bl	16f3c <__assert_fail@plt+0x5c0c>
   194ec:	mov	r0, r4
   194f0:	str	r9, [r8]
   194f4:	add	sp, sp, #124	; 0x7c
   194f8:	ldrd	r4, [sp]
   194fc:	ldrd	r6, [sp, #8]
   19500:	ldrd	r8, [sp, #16]
   19504:	ldrd	sl, [sp, #24]
   19508:	add	sp, sp, #32
   1950c:	pop	{pc}		; (ldr pc, [sp], #4)
   19510:	mov	r0, #8
   19514:	mvn	r3, #-2147483648	; 0x80000000
   19518:	add	r1, sp, #72	; 0x48
   1951c:	str	r0, [sp]
   19520:	mov	r0, #0
   19524:	bl	1b300 <__assert_fail@plt+0x9fd0>
   19528:	ldrd	r2, [r4, #8]
   1952c:	mov	r5, r0
   19530:	str	r0, [r4]
   19534:	strd	r2, [r0]
   19538:	b	19418 <__assert_fail@plt+0x80e8>
   1953c:	bl	112e8 <abort@plt>
   19540:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19544:	cmp	r0, #10
   19548:	strd	r6, [sp, #8]
   1954c:	mov	r6, #0
   19550:	mov	r7, #0
   19554:	strd	r8, [sp, #16]
   19558:	strd	sl, [sp, #24]
   1955c:	str	lr, [sp, #32]
   19560:	sub	sp, sp, #124	; 0x7c
   19564:	strd	r6, [sp, #72]	; 0x48
   19568:	strd	r6, [sp, #80]	; 0x50
   1956c:	strd	r6, [sp, #88]	; 0x58
   19570:	strd	r6, [sp, #96]	; 0x60
   19574:	strd	r6, [sp, #104]	; 0x68
   19578:	strd	r6, [sp, #112]	; 0x70
   1957c:	beq	19728 <__assert_fail@plt+0x83f8>
   19580:	mov	sl, r2
   19584:	movw	r5, #61756	; 0xf13c
   19588:	movt	r5, #2
   1958c:	str	r0, [sp, #72]	; 0x48
   19590:	mov	r9, r1
   19594:	ldrd	r2, [sp, #72]	; 0x48
   19598:	strd	r2, [sp, #24]
   1959c:	strd	r6, [sp, #32]
   195a0:	strd	r6, [sp, #40]	; 0x28
   195a4:	strd	r6, [sp, #48]	; 0x30
   195a8:	strd	r6, [sp, #56]	; 0x38
   195ac:	strd	r6, [sp, #64]	; 0x40
   195b0:	bl	111ec <__errno_location@plt>
   195b4:	mov	r7, r0
   195b8:	ldr	r4, [r5]
   195bc:	ldr	r2, [r5, #4]
   195c0:	ldr	fp, [r0]
   195c4:	cmp	r2, #0
   195c8:	bgt	19624 <__assert_fail@plt+0x82f4>
   195cc:	add	r3, r5, #8
   195d0:	str	r2, [sp, #72]	; 0x48
   195d4:	rsb	r2, r2, #1
   195d8:	cmp	r4, r3
   195dc:	beq	196fc <__assert_fail@plt+0x83cc>
   195e0:	mov	r3, #8
   195e4:	mov	r0, r4
   195e8:	add	r1, sp, #72	; 0x48
   195ec:	str	r3, [sp]
   195f0:	mvn	r3, #-2147483648	; 0x80000000
   195f4:	bl	1b300 <__assert_fail@plt+0x9fd0>
   195f8:	mov	r4, r0
   195fc:	str	r0, [r5]
   19600:	ldr	r0, [r5, #4]
   19604:	mov	r1, #0
   19608:	ldr	r2, [sp, #72]	; 0x48
   1960c:	sub	r2, r2, r0
   19610:	add	r0, r4, r0, lsl #3
   19614:	lsl	r2, r2, #3
   19618:	bl	11204 <memset@plt>
   1961c:	ldr	r3, [sp, #72]	; 0x48
   19620:	str	r3, [r5, #4]
   19624:	ldr	ip, [sp, #24]
   19628:	add	r0, sp, #32
   1962c:	mov	r3, sl
   19630:	mov	r2, r9
   19634:	ldr	r6, [sp, #28]
   19638:	ldr	r8, [r4]
   1963c:	ldr	r5, [r4, #4]
   19640:	str	ip, [sp]
   19644:	orr	r6, r6, #1
   19648:	ldr	ip, [sp, #64]	; 0x40
   1964c:	mov	r1, r8
   19650:	str	r6, [sp, #4]
   19654:	ldr	lr, [sp, #68]	; 0x44
   19658:	str	r0, [sp, #8]
   1965c:	mov	r0, r5
   19660:	str	ip, [sp, #12]
   19664:	str	lr, [sp, #16]
   19668:	bl	16f3c <__assert_fail@plt+0x5c0c>
   1966c:	cmp	r8, r0
   19670:	bhi	196d8 <__assert_fail@plt+0x83a8>
   19674:	add	r8, r0, #1
   19678:	movw	r3, #61892	; 0xf1c4
   1967c:	movt	r3, #2
   19680:	cmp	r5, r3
   19684:	str	r8, [r4]
   19688:	beq	19694 <__assert_fail@plt+0x8364>
   1968c:	mov	r0, r5
   19690:	bl	12d1c <__assert_fail@plt+0x19ec>
   19694:	mov	r0, r8
   19698:	bl	1b05c <__assert_fail@plt+0x9d2c>
   1969c:	ldr	lr, [sp, #24]
   196a0:	mov	r1, r8
   196a4:	mov	r3, sl
   196a8:	mov	r2, r9
   196ac:	mov	r5, r0
   196b0:	ldr	r8, [sp, #64]	; 0x40
   196b4:	ldr	ip, [sp, #68]	; 0x44
   196b8:	str	r0, [r4, #4]
   196bc:	str	lr, [sp]
   196c0:	add	lr, sp, #32
   196c4:	str	r6, [sp, #4]
   196c8:	str	lr, [sp, #8]
   196cc:	str	r8, [sp, #12]
   196d0:	str	ip, [sp, #16]
   196d4:	bl	16f3c <__assert_fail@plt+0x5c0c>
   196d8:	mov	r0, r5
   196dc:	str	fp, [r7]
   196e0:	add	sp, sp, #124	; 0x7c
   196e4:	ldrd	r4, [sp]
   196e8:	ldrd	r6, [sp, #8]
   196ec:	ldrd	r8, [sp, #16]
   196f0:	ldrd	sl, [sp, #24]
   196f4:	add	sp, sp, #32
   196f8:	pop	{pc}		; (ldr pc, [sp], #4)
   196fc:	mov	r0, #8
   19700:	mvn	r3, #-2147483648	; 0x80000000
   19704:	add	r1, sp, #72	; 0x48
   19708:	str	r0, [sp]
   1970c:	mov	r0, #0
   19710:	bl	1b300 <__assert_fail@plt+0x9fd0>
   19714:	ldrd	r2, [r5, #8]
   19718:	mov	r4, r0
   1971c:	str	r0, [r5]
   19720:	strd	r2, [r0]
   19724:	b	19600 <__assert_fail@plt+0x82d0>
   19728:	bl	112e8 <abort@plt>
   1972c:	ldr	r3, [pc, #492]	; 19920 <__assert_fail@plt+0x85f0>
   19730:	lsr	ip, r2, #5
   19734:	and	r2, r2, #31
   19738:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1973c:	movw	r5, #61756	; 0xf13c
   19740:	movt	r5, #2
   19744:	strd	r6, [sp, #8]
   19748:	strd	r8, [sp, #16]
   1974c:	strd	sl, [sp, #24]
   19750:	mov	sl, r0
   19754:	mov	fp, r1
   19758:	ldrd	r0, [r3]
   1975c:	str	lr, [sp, #32]
   19760:	sub	sp, sp, #92	; 0x5c
   19764:	ldrd	r8, [r3, #8]
   19768:	add	r6, sp, #48	; 0x30
   1976c:	strd	r0, [sp, #40]	; 0x28
   19770:	ldrd	r0, [r3, #16]
   19774:	strd	r8, [sp, #48]	; 0x30
   19778:	ldrd	r8, [r3, #24]
   1977c:	strd	r0, [sp, #56]	; 0x38
   19780:	ldrd	r0, [r3, #32]
   19784:	strd	r8, [sp, #64]	; 0x40
   19788:	ldrd	r8, [r3, #40]	; 0x28
   1978c:	strd	r0, [sp, #72]	; 0x48
   19790:	strd	r8, [sp, #80]	; 0x50
   19794:	ldr	r3, [r6, ip, lsl #2]
   19798:	mvn	r1, r3, lsr r2
   1979c:	and	r1, r1, #1
   197a0:	eor	r2, r3, r1, lsl r2
   197a4:	str	r2, [r6, ip, lsl #2]
   197a8:	bl	111ec <__errno_location@plt>
   197ac:	ldr	r3, [r0]
   197b0:	mov	r8, r0
   197b4:	ldr	r2, [r5, #4]
   197b8:	ldr	r4, [r5]
   197bc:	str	r3, [sp, #28]
   197c0:	cmp	r2, #0
   197c4:	bgt	19820 <__assert_fail@plt+0x84f0>
   197c8:	add	r3, r5, #8
   197cc:	str	r2, [sp, #36]	; 0x24
   197d0:	rsb	r2, r2, #1
   197d4:	cmp	r4, r3
   197d8:	beq	198f4 <__assert_fail@plt+0x85c4>
   197dc:	mov	r1, #8
   197e0:	mov	r0, r4
   197e4:	mvn	r3, #-2147483648	; 0x80000000
   197e8:	str	r1, [sp]
   197ec:	add	r1, sp, #36	; 0x24
   197f0:	bl	1b300 <__assert_fail@plt+0x9fd0>
   197f4:	mov	r4, r0
   197f8:	str	r0, [r5]
   197fc:	ldr	r0, [r5, #4]
   19800:	mov	r1, #0
   19804:	ldr	r2, [sp, #36]	; 0x24
   19808:	sub	r2, r2, r0
   1980c:	add	r0, r4, r0, lsl #3
   19810:	lsl	r2, r2, #3
   19814:	bl	11204 <memset@plt>
   19818:	ldr	r3, [sp, #36]	; 0x24
   1981c:	str	r3, [r5, #4]
   19820:	ldr	ip, [sp, #40]	; 0x28
   19824:	mov	r3, fp
   19828:	mov	r2, sl
   1982c:	ldr	r7, [sp, #44]	; 0x2c
   19830:	ldr	r9, [r4]
   19834:	ldr	r5, [r4, #4]
   19838:	str	ip, [sp]
   1983c:	orr	r7, r7, #1
   19840:	ldr	ip, [sp, #80]	; 0x50
   19844:	mov	r1, r9
   19848:	str	r7, [sp, #4]
   1984c:	ldr	lr, [sp, #84]	; 0x54
   19850:	mov	r0, r5
   19854:	str	r6, [sp, #8]
   19858:	str	ip, [sp, #12]
   1985c:	str	lr, [sp, #16]
   19860:	bl	16f3c <__assert_fail@plt+0x5c0c>
   19864:	cmp	r9, r0
   19868:	bhi	198cc <__assert_fail@plt+0x859c>
   1986c:	add	r9, r0, #1
   19870:	movw	r3, #61892	; 0xf1c4
   19874:	movt	r3, #2
   19878:	cmp	r5, r3
   1987c:	str	r9, [r4]
   19880:	beq	1988c <__assert_fail@plt+0x855c>
   19884:	mov	r0, r5
   19888:	bl	12d1c <__assert_fail@plt+0x19ec>
   1988c:	mov	r0, r9
   19890:	bl	1b05c <__assert_fail@plt+0x9d2c>
   19894:	mov	r1, r9
   19898:	ldr	ip, [sp, #40]	; 0x28
   1989c:	mov	r3, fp
   198a0:	mov	r2, sl
   198a4:	mov	r5, r0
   198a8:	ldr	r9, [sp, #80]	; 0x50
   198ac:	ldr	lr, [sp, #84]	; 0x54
   198b0:	str	r0, [r4, #4]
   198b4:	str	ip, [sp]
   198b8:	str	r7, [sp, #4]
   198bc:	str	r6, [sp, #8]
   198c0:	str	r9, [sp, #12]
   198c4:	str	lr, [sp, #16]
   198c8:	bl	16f3c <__assert_fail@plt+0x5c0c>
   198cc:	ldr	r3, [sp, #28]
   198d0:	mov	r0, r5
   198d4:	str	r3, [r8]
   198d8:	add	sp, sp, #92	; 0x5c
   198dc:	ldrd	r4, [sp]
   198e0:	ldrd	r6, [sp, #8]
   198e4:	ldrd	r8, [sp, #16]
   198e8:	ldrd	sl, [sp, #24]
   198ec:	add	sp, sp, #32
   198f0:	pop	{pc}		; (ldr pc, [sp], #4)
   198f4:	mov	r0, #8
   198f8:	mvn	r3, #-2147483648	; 0x80000000
   198fc:	add	r1, sp, #36	; 0x24
   19900:	str	r0, [sp]
   19904:	mov	r0, #0
   19908:	bl	1b300 <__assert_fail@plt+0x9fd0>
   1990c:	ldrd	r2, [r5, #8]
   19910:	mov	r4, r0
   19914:	str	r0, [r5]
   19918:	strd	r2, [r0]
   1991c:	b	197fc <__assert_fail@plt+0x84cc>
   19920:	andeq	pc, r2, r4, asr #5
   19924:	ldr	ip, [pc, #476]	; 19b08 <__assert_fail@plt+0x87d8>
   19928:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1992c:	movw	r4, #61756	; 0xf13c
   19930:	movt	r4, #2
   19934:	ldrd	r2, [ip, #8]
   19938:	strd	r6, [sp, #8]
   1993c:	lsr	r7, r1, #5
   19940:	mov	r6, r0
   19944:	strd	r8, [sp, #16]
   19948:	str	lr, [sp, #32]
   1994c:	and	lr, r1, #31
   19950:	ldrd	r0, [ip]
   19954:	strd	sl, [sp, #24]
   19958:	sub	sp, sp, #84	; 0x54
   1995c:	add	r5, sp, #40	; 0x28
   19960:	strd	r0, [sp, #32]
   19964:	strd	r2, [sp, #40]	; 0x28
   19968:	ldrd	r0, [ip, #16]
   1996c:	ldrd	r2, [ip, #24]
   19970:	strd	r0, [sp, #48]	; 0x30
   19974:	ldrd	r0, [ip, #32]
   19978:	strd	r2, [sp, #56]	; 0x38
   1997c:	ldrd	r2, [ip, #40]	; 0x28
   19980:	strd	r0, [sp, #64]	; 0x40
   19984:	strd	r2, [sp, #72]	; 0x48
   19988:	ldr	r1, [r5, r7, lsl #2]
   1998c:	mvn	r3, r1, lsr lr
   19990:	and	r3, r3, #1
   19994:	eor	r1, r1, r3, lsl lr
   19998:	str	r1, [r5, r7, lsl #2]
   1999c:	bl	111ec <__errno_location@plt>
   199a0:	mov	r9, r0
   199a4:	ldr	sl, [r0]
   199a8:	ldr	r2, [r4, #4]
   199ac:	ldr	r7, [r4]
   199b0:	cmp	r2, #0
   199b4:	bgt	19a10 <__assert_fail@plt+0x86e0>
   199b8:	add	r3, r4, #8
   199bc:	str	r2, [sp, #28]
   199c0:	rsb	r2, r2, #1
   199c4:	cmp	r7, r3
   199c8:	beq	19adc <__assert_fail@plt+0x87ac>
   199cc:	mov	r1, #8
   199d0:	mov	r0, r7
   199d4:	mvn	r3, #-2147483648	; 0x80000000
   199d8:	str	r1, [sp]
   199dc:	add	r1, sp, #28
   199e0:	bl	1b300 <__assert_fail@plt+0x9fd0>
   199e4:	mov	r7, r0
   199e8:	str	r0, [r4]
   199ec:	ldr	r0, [r4, #4]
   199f0:	mov	r1, #0
   199f4:	ldr	r2, [sp, #28]
   199f8:	sub	r2, r2, r0
   199fc:	add	r0, r7, r0, lsl #3
   19a00:	lsl	r2, r2, #3
   19a04:	bl	11204 <memset@plt>
   19a08:	ldr	r3, [sp, #28]
   19a0c:	str	r3, [r4, #4]
   19a10:	ldr	ip, [sp, #32]
   19a14:	mvn	r3, #0
   19a18:	mov	r2, r6
   19a1c:	ldr	r8, [sp, #36]	; 0x24
   19a20:	ldr	fp, [r7]
   19a24:	ldr	r4, [r7, #4]
   19a28:	str	ip, [sp]
   19a2c:	orr	r8, r8, #1
   19a30:	ldr	ip, [sp, #72]	; 0x48
   19a34:	mov	r1, fp
   19a38:	str	r8, [sp, #4]
   19a3c:	ldr	lr, [sp, #76]	; 0x4c
   19a40:	mov	r0, r4
   19a44:	str	r5, [sp, #8]
   19a48:	str	ip, [sp, #12]
   19a4c:	str	lr, [sp, #16]
   19a50:	bl	16f3c <__assert_fail@plt+0x5c0c>
   19a54:	cmp	fp, r0
   19a58:	bhi	19ab8 <__assert_fail@plt+0x8788>
   19a5c:	add	fp, r0, #1
   19a60:	movw	r3, #61892	; 0xf1c4
   19a64:	movt	r3, #2
   19a68:	cmp	r4, r3
   19a6c:	str	fp, [r7]
   19a70:	beq	19a7c <__assert_fail@plt+0x874c>
   19a74:	mov	r0, r4
   19a78:	bl	12d1c <__assert_fail@plt+0x19ec>
   19a7c:	mov	r0, fp
   19a80:	bl	1b05c <__assert_fail@plt+0x9d2c>
   19a84:	ldr	r3, [sp, #32]
   19a88:	mov	r2, r6
   19a8c:	mov	r1, fp
   19a90:	mov	r4, r0
   19a94:	ldr	lr, [sp, #72]	; 0x48
   19a98:	ldr	ip, [sp, #76]	; 0x4c
   19a9c:	str	r0, [r7, #4]
   19aa0:	stm	sp, {r3, r8}
   19aa4:	mvn	r3, #0
   19aa8:	str	r5, [sp, #8]
   19aac:	str	lr, [sp, #12]
   19ab0:	str	ip, [sp, #16]
   19ab4:	bl	16f3c <__assert_fail@plt+0x5c0c>
   19ab8:	mov	r0, r4
   19abc:	str	sl, [r9]
   19ac0:	add	sp, sp, #84	; 0x54
   19ac4:	ldrd	r4, [sp]
   19ac8:	ldrd	r6, [sp, #8]
   19acc:	ldrd	r8, [sp, #16]
   19ad0:	ldrd	sl, [sp, #24]
   19ad4:	add	sp, sp, #32
   19ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   19adc:	mov	r0, #8
   19ae0:	mvn	r3, #-2147483648	; 0x80000000
   19ae4:	add	r1, sp, #28
   19ae8:	str	r0, [sp]
   19aec:	mov	r0, #0
   19af0:	bl	1b300 <__assert_fail@plt+0x9fd0>
   19af4:	ldrd	r2, [r4, #8]
   19af8:	mov	r7, r0
   19afc:	str	r0, [r4]
   19b00:	strd	r2, [r0]
   19b04:	b	199ec <__assert_fail@plt+0x86bc>
   19b08:	andeq	pc, r2, r4, asr #5
   19b0c:	ldr	ip, [pc, #472]	; 19cec <__assert_fail@plt+0x89bc>
   19b10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19b14:	mov	r5, r0
   19b18:	movw	r4, #61756	; 0xf13c
   19b1c:	movt	r4, #2
   19b20:	ldrd	r2, [ip]
   19b24:	ldrd	r0, [ip, #8]
   19b28:	strd	r6, [sp, #8]
   19b2c:	strd	r8, [sp, #16]
   19b30:	strd	sl, [sp, #24]
   19b34:	str	lr, [sp, #32]
   19b38:	sub	sp, sp, #84	; 0x54
   19b3c:	strd	r2, [sp, #32]
   19b40:	strd	r0, [sp, #40]	; 0x28
   19b44:	ldr	r6, [sp, #44]	; 0x2c
   19b48:	ldrd	r2, [ip, #16]
   19b4c:	ldrd	r0, [ip, #24]
   19b50:	mvn	lr, r6
   19b54:	and	lr, lr, #67108864	; 0x4000000
   19b58:	eor	lr, lr, r6
   19b5c:	ldrd	r6, [ip, #40]	; 0x28
   19b60:	strd	r2, [sp, #48]	; 0x30
   19b64:	ldrd	r2, [ip, #32]
   19b68:	str	lr, [sp, #44]	; 0x2c
   19b6c:	strd	r0, [sp, #56]	; 0x38
   19b70:	strd	r2, [sp, #64]	; 0x40
   19b74:	strd	r6, [sp, #72]	; 0x48
   19b78:	bl	111ec <__errno_location@plt>
   19b7c:	mov	r8, r0
   19b80:	ldr	r9, [r0]
   19b84:	ldr	r2, [r4, #4]
   19b88:	ldr	r6, [r4]
   19b8c:	cmp	r2, #0
   19b90:	bgt	19bec <__assert_fail@plt+0x88bc>
   19b94:	add	r3, r4, #8
   19b98:	str	r2, [sp, #28]
   19b9c:	rsb	r2, r2, #1
   19ba0:	cmp	r6, r3
   19ba4:	beq	19cc0 <__assert_fail@plt+0x8990>
   19ba8:	mov	r1, #8
   19bac:	mov	r0, r6
   19bb0:	mvn	r3, #-2147483648	; 0x80000000
   19bb4:	str	r1, [sp]
   19bb8:	add	r1, sp, #28
   19bbc:	bl	1b300 <__assert_fail@plt+0x9fd0>
   19bc0:	mov	r6, r0
   19bc4:	str	r0, [r4]
   19bc8:	ldr	r0, [r4, #4]
   19bcc:	mov	r1, #0
   19bd0:	ldr	r2, [sp, #28]
   19bd4:	sub	r2, r2, r0
   19bd8:	add	r0, r6, r0, lsl #3
   19bdc:	lsl	r2, r2, #3
   19be0:	bl	11204 <memset@plt>
   19be4:	ldr	r3, [sp, #28]
   19be8:	str	r3, [r4, #4]
   19bec:	ldr	sl, [r6]
   19bf0:	add	r0, sp, #40	; 0x28
   19bf4:	mvn	r3, #0
   19bf8:	mov	r2, r5
   19bfc:	ldr	r7, [sp, #36]	; 0x24
   19c00:	ldr	r4, [r6, #4]
   19c04:	mov	r1, sl
   19c08:	str	r0, [sp, #8]
   19c0c:	ldr	lr, [sp, #32]
   19c10:	orr	r7, r7, #1
   19c14:	ldr	ip, [sp, #72]	; 0x48
   19c18:	mov	r0, r4
   19c1c:	ldr	fp, [sp, #76]	; 0x4c
   19c20:	str	lr, [sp]
   19c24:	str	r7, [sp, #4]
   19c28:	str	ip, [sp, #12]
   19c2c:	str	fp, [sp, #16]
   19c30:	bl	16f3c <__assert_fail@plt+0x5c0c>
   19c34:	cmp	sl, r0
   19c38:	bhi	19c9c <__assert_fail@plt+0x896c>
   19c3c:	add	sl, r0, #1
   19c40:	movw	r3, #61892	; 0xf1c4
   19c44:	movt	r3, #2
   19c48:	cmp	r4, r3
   19c4c:	str	sl, [r6]
   19c50:	beq	19c5c <__assert_fail@plt+0x892c>
   19c54:	mov	r0, r4
   19c58:	bl	12d1c <__assert_fail@plt+0x19ec>
   19c5c:	mov	r0, sl
   19c60:	bl	1b05c <__assert_fail@plt+0x9d2c>
   19c64:	ldr	r3, [sp, #32]
   19c68:	mov	r2, r5
   19c6c:	add	r5, sp, #40	; 0x28
   19c70:	mov	r1, sl
   19c74:	mov	r4, r0
   19c78:	ldr	lr, [sp, #72]	; 0x48
   19c7c:	ldr	ip, [sp, #76]	; 0x4c
   19c80:	str	r0, [r6, #4]
   19c84:	stm	sp, {r3, r7}
   19c88:	mvn	r3, #0
   19c8c:	str	r5, [sp, #8]
   19c90:	str	lr, [sp, #12]
   19c94:	str	ip, [sp, #16]
   19c98:	bl	16f3c <__assert_fail@plt+0x5c0c>
   19c9c:	mov	r0, r4
   19ca0:	str	r9, [r8]
   19ca4:	add	sp, sp, #84	; 0x54
   19ca8:	ldrd	r4, [sp]
   19cac:	ldrd	r6, [sp, #8]
   19cb0:	ldrd	r8, [sp, #16]
   19cb4:	ldrd	sl, [sp, #24]
   19cb8:	add	sp, sp, #32
   19cbc:	pop	{pc}		; (ldr pc, [sp], #4)
   19cc0:	mov	r0, #8
   19cc4:	mvn	r3, #-2147483648	; 0x80000000
   19cc8:	add	r1, sp, #28
   19ccc:	str	r0, [sp]
   19cd0:	mov	r0, #0
   19cd4:	bl	1b300 <__assert_fail@plt+0x9fd0>
   19cd8:	ldrd	r2, [r4, #8]
   19cdc:	mov	r6, r0
   19ce0:	str	r0, [r4]
   19ce4:	strd	r2, [r0]
   19ce8:	b	19bc8 <__assert_fail@plt+0x8898>
   19cec:	andeq	pc, r2, r4, asr #5
   19cf0:	ldr	ip, [pc, #480]	; 19ed8 <__assert_fail@plt+0x8ba8>
   19cf4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19cf8:	mov	r5, r0
   19cfc:	movw	r4, #61756	; 0xf13c
   19d00:	movt	r4, #2
   19d04:	ldrd	r2, [ip]
   19d08:	strd	r6, [sp, #8]
   19d0c:	mov	r6, r1
   19d10:	ldrd	r0, [ip, #8]
   19d14:	strd	r8, [sp, #16]
   19d18:	strd	sl, [sp, #24]
   19d1c:	str	lr, [sp, #32]
   19d20:	sub	sp, sp, #84	; 0x54
   19d24:	ldrd	r8, [ip, #40]	; 0x28
   19d28:	strd	r2, [sp, #32]
   19d2c:	strd	r0, [sp, #40]	; 0x28
   19d30:	ldrd	r2, [ip, #16]
   19d34:	ldr	r7, [sp, #44]	; 0x2c
   19d38:	ldrd	r0, [ip, #24]
   19d3c:	strd	r2, [sp, #48]	; 0x30
   19d40:	ldrd	r2, [ip, #32]
   19d44:	mvn	lr, r7
   19d48:	and	lr, lr, #67108864	; 0x4000000
   19d4c:	eor	lr, lr, r7
   19d50:	str	lr, [sp, #44]	; 0x2c
   19d54:	strd	r0, [sp, #56]	; 0x38
   19d58:	strd	r2, [sp, #64]	; 0x40
   19d5c:	strd	r8, [sp, #72]	; 0x48
   19d60:	bl	111ec <__errno_location@plt>
   19d64:	mov	r9, r0
   19d68:	ldr	sl, [r0]
   19d6c:	ldr	r2, [r4, #4]
   19d70:	ldr	r7, [r4]
   19d74:	cmp	r2, #0
   19d78:	bgt	19dd4 <__assert_fail@plt+0x8aa4>
   19d7c:	add	r3, r4, #8
   19d80:	str	r2, [sp, #28]
   19d84:	rsb	r2, r2, #1
   19d88:	cmp	r7, r3
   19d8c:	beq	19eac <__assert_fail@plt+0x8b7c>
   19d90:	mov	r1, #8
   19d94:	mov	r0, r7
   19d98:	mvn	r3, #-2147483648	; 0x80000000
   19d9c:	str	r1, [sp]
   19da0:	add	r1, sp, #28
   19da4:	bl	1b300 <__assert_fail@plt+0x9fd0>
   19da8:	mov	r7, r0
   19dac:	str	r0, [r4]
   19db0:	ldr	r0, [r4, #4]
   19db4:	mov	r1, #0
   19db8:	ldr	r2, [sp, #28]
   19dbc:	sub	r2, r2, r0
   19dc0:	add	r0, r7, r0, lsl #3
   19dc4:	lsl	r2, r2, #3
   19dc8:	bl	11204 <memset@plt>
   19dcc:	ldr	r3, [sp, #28]
   19dd0:	str	r3, [r4, #4]
   19dd4:	ldr	ip, [sp, #32]
   19dd8:	add	r0, sp, #40	; 0x28
   19ddc:	mov	r3, r6
   19de0:	mov	r2, r5
   19de4:	ldr	r8, [sp, #36]	; 0x24
   19de8:	ldr	fp, [r7]
   19dec:	ldr	r4, [r7, #4]
   19df0:	str	ip, [sp]
   19df4:	orr	r8, r8, #1
   19df8:	ldr	ip, [sp, #72]	; 0x48
   19dfc:	mov	r1, fp
   19e00:	str	r8, [sp, #4]
   19e04:	ldr	lr, [sp, #76]	; 0x4c
   19e08:	str	r0, [sp, #8]
   19e0c:	mov	r0, r4
   19e10:	str	ip, [sp, #12]
   19e14:	str	lr, [sp, #16]
   19e18:	bl	16f3c <__assert_fail@plt+0x5c0c>
   19e1c:	cmp	fp, r0
   19e20:	bhi	19e88 <__assert_fail@plt+0x8b58>
   19e24:	add	fp, r0, #1
   19e28:	movw	r3, #61892	; 0xf1c4
   19e2c:	movt	r3, #2
   19e30:	cmp	r4, r3
   19e34:	str	fp, [r7]
   19e38:	beq	19e44 <__assert_fail@plt+0x8b14>
   19e3c:	mov	r0, r4
   19e40:	bl	12d1c <__assert_fail@plt+0x19ec>
   19e44:	mov	r0, fp
   19e48:	bl	1b05c <__assert_fail@plt+0x9d2c>
   19e4c:	ldr	lr, [sp, #32]
   19e50:	mov	r2, r5
   19e54:	mov	r3, r6
   19e58:	mov	r1, fp
   19e5c:	mov	r4, r0
   19e60:	ldr	r5, [sp, #72]	; 0x48
   19e64:	ldr	ip, [sp, #76]	; 0x4c
   19e68:	str	r0, [r7, #4]
   19e6c:	str	lr, [sp]
   19e70:	add	lr, sp, #40	; 0x28
   19e74:	str	r8, [sp, #4]
   19e78:	str	lr, [sp, #8]
   19e7c:	str	r5, [sp, #12]
   19e80:	str	ip, [sp, #16]
   19e84:	bl	16f3c <__assert_fail@plt+0x5c0c>
   19e88:	mov	r0, r4
   19e8c:	str	sl, [r9]
   19e90:	add	sp, sp, #84	; 0x54
   19e94:	ldrd	r4, [sp]
   19e98:	ldrd	r6, [sp, #8]
   19e9c:	ldrd	r8, [sp, #16]
   19ea0:	ldrd	sl, [sp, #24]
   19ea4:	add	sp, sp, #32
   19ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   19eac:	mov	r0, #8
   19eb0:	mvn	r3, #-2147483648	; 0x80000000
   19eb4:	add	r1, sp, #28
   19eb8:	str	r0, [sp]
   19ebc:	mov	r0, #0
   19ec0:	bl	1b300 <__assert_fail@plt+0x9fd0>
   19ec4:	ldrd	r2, [r4, #8]
   19ec8:	mov	r7, r0
   19ecc:	str	r0, [r4]
   19ed0:	strd	r2, [r0]
   19ed4:	b	19db0 <__assert_fail@plt+0x8a80>
   19ed8:	andeq	pc, r2, r4, asr #5
   19edc:	strd	r4, [sp, #-12]!
   19ee0:	mov	r4, #0
   19ee4:	mov	r5, #0
   19ee8:	str	lr, [sp, #8]
   19eec:	sub	sp, sp, #100	; 0x64
   19ef0:	cmp	r1, #10
   19ef4:	strd	r4, [sp]
   19ef8:	strd	r4, [sp, #8]
   19efc:	strd	r4, [sp, #16]
   19f00:	strd	r4, [sp, #24]
   19f04:	strd	r4, [sp, #32]
   19f08:	strd	r4, [sp, #40]	; 0x28
   19f0c:	beq	19f3c <__assert_fail@plt+0x8c0c>
   19f10:	mov	ip, #67108864	; 0x4000000
   19f14:	mov	r3, sp
   19f18:	str	r1, [sp]
   19f1c:	mov	r1, r2
   19f20:	mvn	r2, #0
   19f24:	str	ip, [sp, #12]
   19f28:	bl	18928 <__assert_fail@plt+0x75f8>
   19f2c:	add	sp, sp, #100	; 0x64
   19f30:	ldrd	r4, [sp]
   19f34:	add	sp, sp, #8
   19f38:	pop	{pc}		; (ldr pc, [sp], #4)
   19f3c:	bl	112e8 <abort@plt>
   19f40:	ldr	ip, [pc, #156]	; 19fe4 <__assert_fail@plt+0x8cb4>
   19f44:	cmp	r2, #0
   19f48:	cmpne	r1, #0
   19f4c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19f50:	strd	r6, [sp, #8]
   19f54:	mov	r6, r2
   19f58:	str	r8, [sp, #16]
   19f5c:	mov	r8, r3
   19f60:	strd	sl, [sp, #20]
   19f64:	ldrd	r4, [ip]
   19f68:	str	lr, [sp, #28]
   19f6c:	sub	sp, sp, #48	; 0x30
   19f70:	mov	lr, #10
   19f74:	ldrd	r2, [ip, #8]
   19f78:	ldrd	sl, [ip, #16]
   19f7c:	strd	r4, [sp]
   19f80:	ldrd	r4, [ip, #32]
   19f84:	str	lr, [sp]
   19f88:	strd	r2, [sp, #8]
   19f8c:	strd	sl, [sp, #16]
   19f90:	ldrd	r2, [ip, #24]
   19f94:	ldrd	sl, [ip, #40]	; 0x28
   19f98:	strd	r2, [sp, #24]
   19f9c:	strd	r4, [sp, #32]
   19fa0:	strd	sl, [sp, #40]	; 0x28
   19fa4:	beq	19fe0 <__assert_fail@plt+0x8cb0>
   19fa8:	mov	r7, r1
   19fac:	mov	r3, sp
   19fb0:	mov	r1, r8
   19fb4:	mvn	r2, #0
   19fb8:	str	r7, [sp, #40]	; 0x28
   19fbc:	str	r6, [sp, #44]	; 0x2c
   19fc0:	bl	18928 <__assert_fail@plt+0x75f8>
   19fc4:	add	sp, sp, #48	; 0x30
   19fc8:	ldrd	r4, [sp]
   19fcc:	ldrd	r6, [sp, #8]
   19fd0:	ldr	r8, [sp, #16]
   19fd4:	ldrd	sl, [sp, #20]
   19fd8:	add	sp, sp, #28
   19fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   19fe0:	bl	112e8 <abort@plt>
   19fe4:	andeq	pc, r2, r4, asr #5
   19fe8:	ldr	ip, [pc, #156]	; 1a08c <__assert_fail@plt+0x8d5c>
   19fec:	cmp	r2, #0
   19ff0:	cmpne	r1, #0
   19ff4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19ff8:	strd	r6, [sp, #8]
   19ffc:	mov	r6, r2
   1a000:	str	r8, [sp, #16]
   1a004:	mov	r8, r3
   1a008:	strd	sl, [sp, #20]
   1a00c:	ldrd	r4, [ip]
   1a010:	str	lr, [sp, #28]
   1a014:	sub	sp, sp, #48	; 0x30
   1a018:	mov	lr, #10
   1a01c:	ldrd	r2, [ip, #8]
   1a020:	ldrd	sl, [ip, #16]
   1a024:	strd	r4, [sp]
   1a028:	ldrd	r4, [ip, #32]
   1a02c:	str	lr, [sp]
   1a030:	strd	r2, [sp, #8]
   1a034:	strd	sl, [sp, #16]
   1a038:	ldrd	r2, [ip, #24]
   1a03c:	ldrd	sl, [ip, #40]	; 0x28
   1a040:	strd	r2, [sp, #24]
   1a044:	strd	r4, [sp, #32]
   1a048:	strd	sl, [sp, #40]	; 0x28
   1a04c:	beq	1a088 <__assert_fail@plt+0x8d58>
   1a050:	ldr	r2, [sp, #80]	; 0x50
   1a054:	mov	r7, r1
   1a058:	mov	r3, sp
   1a05c:	mov	r1, r8
   1a060:	str	r7, [sp, #40]	; 0x28
   1a064:	str	r6, [sp, #44]	; 0x2c
   1a068:	bl	18928 <__assert_fail@plt+0x75f8>
   1a06c:	add	sp, sp, #48	; 0x30
   1a070:	ldrd	r4, [sp]
   1a074:	ldrd	r6, [sp, #8]
   1a078:	ldr	r8, [sp, #16]
   1a07c:	ldrd	sl, [sp, #20]
   1a080:	add	sp, sp, #28
   1a084:	pop	{pc}		; (ldr pc, [sp], #4)
   1a088:	bl	112e8 <abort@plt>
   1a08c:	andeq	pc, r2, r4, asr #5
   1a090:	ldr	ip, [pc, #512]	; 1a298 <__assert_fail@plt+0x8f68>
   1a094:	cmp	r0, #0
   1a098:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a09c:	ldrd	r4, [ip, #16]
   1a0a0:	strd	r6, [sp, #8]
   1a0a4:	clz	r6, r1
   1a0a8:	mov	r7, r1
   1a0ac:	strd	r8, [sp, #16]
   1a0b0:	mov	r8, r0
   1a0b4:	lsr	r6, r6, #5
   1a0b8:	strd	sl, [sp, #24]
   1a0bc:	mov	fp, r2
   1a0c0:	mov	sl, #10
   1a0c4:	ldrd	r2, [ip]
   1a0c8:	moveq	r6, #1
   1a0cc:	str	lr, [sp, #32]
   1a0d0:	sub	sp, sp, #92	; 0x5c
   1a0d4:	cmp	r6, #0
   1a0d8:	ldrd	r0, [ip, #8]
   1a0dc:	strd	r2, [sp, #40]	; 0x28
   1a0e0:	strd	r4, [sp, #56]	; 0x38
   1a0e4:	ldrd	r2, [ip, #24]
   1a0e8:	strd	r0, [sp, #48]	; 0x30
   1a0ec:	ldrd	r0, [ip, #32]
   1a0f0:	str	sl, [sp, #40]	; 0x28
   1a0f4:	ldrd	r4, [ip, #40]	; 0x28
   1a0f8:	strd	r2, [sp, #64]	; 0x40
   1a0fc:	strd	r0, [sp, #72]	; 0x48
   1a100:	strd	r4, [sp, #80]	; 0x50
   1a104:	bne	1a294 <__assert_fail@plt+0x8f64>
   1a108:	movw	r5, #61756	; 0xf13c
   1a10c:	movt	r5, #2
   1a110:	str	r8, [sp, #80]	; 0x50
   1a114:	str	r7, [sp, #84]	; 0x54
   1a118:	bl	111ec <__errno_location@plt>
   1a11c:	ldr	r3, [r0]
   1a120:	mov	r9, r0
   1a124:	ldr	r2, [r5, #4]
   1a128:	ldr	r4, [r5]
   1a12c:	str	r3, [sp, #28]
   1a130:	cmp	r2, #0
   1a134:	movgt	r1, sl
   1a138:	bgt	1a1a0 <__assert_fail@plt+0x8e70>
   1a13c:	add	r3, r5, #8
   1a140:	str	r2, [sp, #36]	; 0x24
   1a144:	rsb	r2, r2, #1
   1a148:	cmp	r4, r3
   1a14c:	beq	1a268 <__assert_fail@plt+0x8f38>
   1a150:	mov	r1, #8
   1a154:	mov	r0, r4
   1a158:	mvn	r3, #-2147483648	; 0x80000000
   1a15c:	str	r1, [sp]
   1a160:	add	r1, sp, #36	; 0x24
   1a164:	bl	1b300 <__assert_fail@plt+0x9fd0>
   1a168:	mov	r4, r0
   1a16c:	str	r0, [r5]
   1a170:	ldr	r0, [r5, #4]
   1a174:	mov	r1, #0
   1a178:	ldr	r2, [sp, #36]	; 0x24
   1a17c:	sub	r2, r2, r0
   1a180:	add	r0, r4, r0, lsl #3
   1a184:	lsl	r2, r2, #3
   1a188:	bl	11204 <memset@plt>
   1a18c:	ldr	r3, [sp, #36]	; 0x24
   1a190:	ldr	r1, [sp, #40]	; 0x28
   1a194:	ldr	r8, [sp, #80]	; 0x50
   1a198:	str	r3, [r5, #4]
   1a19c:	ldr	r7, [sp, #84]	; 0x54
   1a1a0:	mvn	r3, #0
   1a1a4:	mov	r2, fp
   1a1a8:	ldr	r6, [sp, #44]	; 0x2c
   1a1ac:	ldr	sl, [r4]
   1a1b0:	ldr	r5, [r4, #4]
   1a1b4:	orr	r6, r6, #1
   1a1b8:	stm	sp, {r1, r6}
   1a1bc:	add	r1, sp, #48	; 0x30
   1a1c0:	str	r8, [sp, #12]
   1a1c4:	mov	r0, r5
   1a1c8:	str	r1, [sp, #8]
   1a1cc:	mov	r1, sl
   1a1d0:	str	r7, [sp, #16]
   1a1d4:	bl	16f3c <__assert_fail@plt+0x5c0c>
   1a1d8:	cmp	sl, r0
   1a1dc:	bhi	1a240 <__assert_fail@plt+0x8f10>
   1a1e0:	add	r7, r0, #1
   1a1e4:	movw	r3, #61892	; 0xf1c4
   1a1e8:	movt	r3, #2
   1a1ec:	cmp	r5, r3
   1a1f0:	str	r7, [r4]
   1a1f4:	beq	1a200 <__assert_fail@plt+0x8ed0>
   1a1f8:	mov	r0, r5
   1a1fc:	bl	12d1c <__assert_fail@plt+0x19ec>
   1a200:	mov	r0, r7
   1a204:	bl	1b05c <__assert_fail@plt+0x9d2c>
   1a208:	ldr	r3, [sp, #40]	; 0x28
   1a20c:	mov	r2, fp
   1a210:	mov	r1, r7
   1a214:	mov	r5, r0
   1a218:	ldr	lr, [sp, #80]	; 0x50
   1a21c:	ldr	ip, [sp, #84]	; 0x54
   1a220:	str	r0, [r4, #4]
   1a224:	add	r4, sp, #48	; 0x30
   1a228:	stm	sp, {r3, r6}
   1a22c:	mvn	r3, #0
   1a230:	str	r4, [sp, #8]
   1a234:	str	lr, [sp, #12]
   1a238:	str	ip, [sp, #16]
   1a23c:	bl	16f3c <__assert_fail@plt+0x5c0c>
   1a240:	ldr	r3, [sp, #28]
   1a244:	mov	r0, r5
   1a248:	str	r3, [r9]
   1a24c:	add	sp, sp, #92	; 0x5c
   1a250:	ldrd	r4, [sp]
   1a254:	ldrd	r6, [sp, #8]
   1a258:	ldrd	r8, [sp, #16]
   1a25c:	ldrd	sl, [sp, #24]
   1a260:	add	sp, sp, #32
   1a264:	pop	{pc}		; (ldr pc, [sp], #4)
   1a268:	mov	r1, #8
   1a26c:	mvn	r3, #-2147483648	; 0x80000000
   1a270:	mov	r0, r6
   1a274:	str	r1, [sp]
   1a278:	add	r1, sp, #36	; 0x24
   1a27c:	bl	1b300 <__assert_fail@plt+0x9fd0>
   1a280:	ldrd	r2, [r5, #8]
   1a284:	mov	r4, r0
   1a288:	str	r0, [r5]
   1a28c:	strd	r2, [r0]
   1a290:	b	1a170 <__assert_fail@plt+0x8e40>
   1a294:	bl	112e8 <abort@plt>
   1a298:	andeq	pc, r2, r4, asr #5
   1a29c:	ldr	ip, [pc, #536]	; 1a4bc <__assert_fail@plt+0x918c>
   1a2a0:	cmp	r0, #0
   1a2a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a2a8:	ldrd	r4, [ip, #16]
   1a2ac:	strd	r6, [sp, #8]
   1a2b0:	mov	r6, r1
   1a2b4:	mov	r7, r0
   1a2b8:	strd	r8, [sp, #16]
   1a2bc:	mov	r9, #10
   1a2c0:	strd	sl, [sp, #24]
   1a2c4:	mov	sl, r2
   1a2c8:	mov	fp, r3
   1a2cc:	str	lr, [sp, #32]
   1a2d0:	clz	lr, r1
   1a2d4:	sub	sp, sp, #92	; 0x5c
   1a2d8:	ldrd	r2, [ip]
   1a2dc:	lsr	lr, lr, #5
   1a2e0:	moveq	lr, #1
   1a2e4:	ldrd	r0, [ip, #8]
   1a2e8:	cmp	lr, #0
   1a2ec:	strd	r4, [sp, #56]	; 0x38
   1a2f0:	ldrd	r4, [ip, #40]	; 0x28
   1a2f4:	str	lr, [sp, #28]
   1a2f8:	strd	r2, [sp, #40]	; 0x28
   1a2fc:	ldrd	r2, [ip, #24]
   1a300:	strd	r0, [sp, #48]	; 0x30
   1a304:	ldrd	r0, [ip, #32]
   1a308:	str	r9, [sp, #40]	; 0x28
   1a30c:	strd	r2, [sp, #64]	; 0x40
   1a310:	strd	r4, [sp, #80]	; 0x50
   1a314:	strd	r0, [sp, #72]	; 0x48
   1a318:	bne	1a4b8 <__assert_fail@plt+0x9188>
   1a31c:	movw	r5, #61756	; 0xf13c
   1a320:	movt	r5, #2
   1a324:	str	r7, [sp, #80]	; 0x50
   1a328:	str	r6, [sp, #84]	; 0x54
   1a32c:	bl	111ec <__errno_location@plt>
   1a330:	ldr	r3, [r0]
   1a334:	mov	r8, r0
   1a338:	ldr	r2, [r5, #4]
   1a33c:	ldr	r4, [r5]
   1a340:	str	r3, [sp, #24]
   1a344:	cmp	r2, #0
   1a348:	movgt	r1, r9
   1a34c:	bgt	1a3b4 <__assert_fail@plt+0x9084>
   1a350:	add	r3, r5, #8
   1a354:	str	r2, [sp, #36]	; 0x24
   1a358:	rsb	r2, r2, #1
   1a35c:	cmp	r4, r3
   1a360:	beq	1a48c <__assert_fail@plt+0x915c>
   1a364:	mov	r1, #8
   1a368:	mov	r0, r4
   1a36c:	mvn	r3, #-2147483648	; 0x80000000
   1a370:	str	r1, [sp]
   1a374:	add	r1, sp, #36	; 0x24
   1a378:	bl	1b300 <__assert_fail@plt+0x9fd0>
   1a37c:	mov	r4, r0
   1a380:	str	r0, [r5]
   1a384:	ldr	r0, [r5, #4]
   1a388:	mov	r1, #0
   1a38c:	ldr	r2, [sp, #36]	; 0x24
   1a390:	sub	r2, r2, r0
   1a394:	add	r0, r4, r0, lsl #3
   1a398:	lsl	r2, r2, #3
   1a39c:	bl	11204 <memset@plt>
   1a3a0:	ldr	r3, [sp, #36]	; 0x24
   1a3a4:	ldr	r1, [sp, #40]	; 0x28
   1a3a8:	ldr	r7, [sp, #80]	; 0x50
   1a3ac:	str	r3, [r5, #4]
   1a3b0:	ldr	r6, [sp, #84]	; 0x54
   1a3b4:	mov	r3, fp
   1a3b8:	mov	r2, sl
   1a3bc:	ldr	r0, [sp, #44]	; 0x2c
   1a3c0:	ldr	r9, [r4]
   1a3c4:	ldr	r5, [r4, #4]
   1a3c8:	orr	r0, r0, #1
   1a3cc:	str	r1, [sp]
   1a3d0:	add	r1, sp, #48	; 0x30
   1a3d4:	str	r0, [sp, #4]
   1a3d8:	str	r1, [sp, #8]
   1a3dc:	mov	r1, r9
   1a3e0:	str	r7, [sp, #12]
   1a3e4:	str	r6, [sp, #16]
   1a3e8:	str	r0, [sp, #28]
   1a3ec:	mov	r0, r5
   1a3f0:	bl	16f3c <__assert_fail@plt+0x5c0c>
   1a3f4:	cmp	r9, r0
   1a3f8:	bhi	1a464 <__assert_fail@plt+0x9134>
   1a3fc:	add	r6, r0, #1
   1a400:	movw	r3, #61892	; 0xf1c4
   1a404:	movt	r3, #2
   1a408:	cmp	r5, r3
   1a40c:	str	r6, [r4]
   1a410:	beq	1a41c <__assert_fail@plt+0x90ec>
   1a414:	mov	r0, r5
   1a418:	bl	12d1c <__assert_fail@plt+0x19ec>
   1a41c:	mov	r0, r6
   1a420:	bl	1b05c <__assert_fail@plt+0x9d2c>
   1a424:	ldr	lr, [sp, #40]	; 0x28
   1a428:	mov	r1, r6
   1a42c:	mov	r3, fp
   1a430:	mov	r2, sl
   1a434:	mov	r5, r0
   1a438:	ldr	r6, [sp, #80]	; 0x50
   1a43c:	ldr	ip, [sp, #84]	; 0x54
   1a440:	str	r0, [r4, #4]
   1a444:	str	lr, [sp]
   1a448:	ldr	lr, [sp, #28]
   1a44c:	str	lr, [sp, #4]
   1a450:	add	lr, sp, #48	; 0x30
   1a454:	str	r6, [sp, #12]
   1a458:	str	lr, [sp, #8]
   1a45c:	str	ip, [sp, #16]
   1a460:	bl	16f3c <__assert_fail@plt+0x5c0c>
   1a464:	ldr	r3, [sp, #24]
   1a468:	mov	r0, r5
   1a46c:	str	r3, [r8]
   1a470:	add	sp, sp, #92	; 0x5c
   1a474:	ldrd	r4, [sp]
   1a478:	ldrd	r6, [sp, #8]
   1a47c:	ldrd	r8, [sp, #16]
   1a480:	ldrd	sl, [sp, #24]
   1a484:	add	sp, sp, #32
   1a488:	pop	{pc}		; (ldr pc, [sp], #4)
   1a48c:	mov	r1, #8
   1a490:	mvn	r3, #-2147483648	; 0x80000000
   1a494:	ldr	r0, [sp, #28]
   1a498:	str	r1, [sp]
   1a49c:	add	r1, sp, #36	; 0x24
   1a4a0:	bl	1b300 <__assert_fail@plt+0x9fd0>
   1a4a4:	ldrd	r2, [r5, #8]
   1a4a8:	mov	r4, r0
   1a4ac:	str	r0, [r5]
   1a4b0:	strd	r2, [r0]
   1a4b4:	b	1a384 <__assert_fail@plt+0x9054>
   1a4b8:	bl	112e8 <abort@plt>
   1a4bc:	andeq	pc, r2, r4, asr #5
   1a4c0:	ldr	r3, [pc]	; 1a4c8 <__assert_fail@plt+0x9198>
   1a4c4:	b	18928 <__assert_fail@plt+0x75f8>
   1a4c8:	andeq	pc, r2, ip, asr #2
   1a4cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a4d0:	movw	r4, #61756	; 0xf13c
   1a4d4:	movt	r4, #2
   1a4d8:	strd	r6, [sp, #8]
   1a4dc:	strd	r8, [sp, #16]
   1a4e0:	strd	sl, [sp, #24]
   1a4e4:	mov	sl, r0
   1a4e8:	mov	fp, r1
   1a4ec:	str	lr, [sp, #32]
   1a4f0:	sub	sp, sp, #44	; 0x2c
   1a4f4:	bl	111ec <__errno_location@plt>
   1a4f8:	ldr	r3, [r0]
   1a4fc:	mov	r8, r0
   1a500:	ldr	r2, [r4, #4]
   1a504:	ldr	r5, [r4]
   1a508:	str	r3, [sp, #28]
   1a50c:	cmp	r2, #0
   1a510:	bgt	1a56c <__assert_fail@plt+0x923c>
   1a514:	add	r3, r4, #8
   1a518:	str	r2, [sp, #36]	; 0x24
   1a51c:	rsb	r2, r2, #1
   1a520:	cmp	r5, r3
   1a524:	beq	1a648 <__assert_fail@plt+0x9318>
   1a528:	mov	r1, #8
   1a52c:	mov	r0, r5
   1a530:	mvn	r3, #-2147483648	; 0x80000000
   1a534:	str	r1, [sp]
   1a538:	add	r1, sp, #36	; 0x24
   1a53c:	bl	1b300 <__assert_fail@plt+0x9fd0>
   1a540:	mov	r5, r0
   1a544:	str	r0, [r4]
   1a548:	ldr	r0, [r4, #4]
   1a54c:	mov	r1, #0
   1a550:	ldr	r2, [sp, #36]	; 0x24
   1a554:	sub	r2, r2, r0
   1a558:	add	r0, r5, r0, lsl #3
   1a55c:	lsl	r2, r2, #3
   1a560:	bl	11204 <memset@plt>
   1a564:	ldr	r3, [sp, #36]	; 0x24
   1a568:	str	r3, [r4, #4]
   1a56c:	ldr	ip, [r4, #16]
   1a570:	mov	r3, fp
   1a574:	mov	r2, sl
   1a578:	ldr	r7, [r4, #20]
   1a57c:	ldr	r0, [pc, #240]	; 1a674 <__assert_fail@plt+0x9344>
   1a580:	ldr	r9, [r5]
   1a584:	orr	r7, r7, #1
   1a588:	ldr	r6, [r5, #4]
   1a58c:	str	ip, [sp]
   1a590:	ldr	ip, [r4, #56]	; 0x38
   1a594:	mov	r1, r9
   1a598:	str	r7, [sp, #4]
   1a59c:	ldr	lr, [r4, #60]	; 0x3c
   1a5a0:	str	r0, [sp, #8]
   1a5a4:	mov	r0, r6
   1a5a8:	str	ip, [sp, #12]
   1a5ac:	str	lr, [sp, #16]
   1a5b0:	bl	16f3c <__assert_fail@plt+0x5c0c>
   1a5b4:	cmp	r9, r0
   1a5b8:	bhi	1a620 <__assert_fail@plt+0x92f0>
   1a5bc:	add	r9, r0, #1
   1a5c0:	movw	r3, #61892	; 0xf1c4
   1a5c4:	movt	r3, #2
   1a5c8:	cmp	r6, r3
   1a5cc:	str	r9, [r5]
   1a5d0:	beq	1a5dc <__assert_fail@plt+0x92ac>
   1a5d4:	mov	r0, r6
   1a5d8:	bl	12d1c <__assert_fail@plt+0x19ec>
   1a5dc:	mov	r0, r9
   1a5e0:	bl	1b05c <__assert_fail@plt+0x9d2c>
   1a5e4:	ldr	ip, [r4, #16]
   1a5e8:	mov	r1, r9
   1a5ec:	mov	r3, fp
   1a5f0:	mov	r2, sl
   1a5f4:	mov	r6, r0
   1a5f8:	ldr	r9, [r4, #56]	; 0x38
   1a5fc:	ldr	lr, [r4, #60]	; 0x3c
   1a600:	str	r0, [r5, #4]
   1a604:	str	ip, [sp]
   1a608:	ldr	ip, [pc, #100]	; 1a674 <__assert_fail@plt+0x9344>
   1a60c:	str	r7, [sp, #4]
   1a610:	str	ip, [sp, #8]
   1a614:	str	r9, [sp, #12]
   1a618:	str	lr, [sp, #16]
   1a61c:	bl	16f3c <__assert_fail@plt+0x5c0c>
   1a620:	ldr	r3, [sp, #28]
   1a624:	mov	r0, r6
   1a628:	str	r3, [r8]
   1a62c:	add	sp, sp, #44	; 0x2c
   1a630:	ldrd	r4, [sp]
   1a634:	ldrd	r6, [sp, #8]
   1a638:	ldrd	r8, [sp, #16]
   1a63c:	ldrd	sl, [sp, #24]
   1a640:	add	sp, sp, #32
   1a644:	pop	{pc}		; (ldr pc, [sp], #4)
   1a648:	mov	r0, #8
   1a64c:	mvn	r3, #-2147483648	; 0x80000000
   1a650:	add	r1, sp, #36	; 0x24
   1a654:	str	r0, [sp]
   1a658:	mov	r0, #0
   1a65c:	bl	1b300 <__assert_fail@plt+0x9fd0>
   1a660:	ldrd	r2, [r4, #8]
   1a664:	mov	r5, r0
   1a668:	str	r0, [r4]
   1a66c:	strd	r2, [r0]
   1a670:	b	1a548 <__assert_fail@plt+0x9218>
   1a674:	andeq	pc, r2, r4, asr r1	; <UNPREDICTABLE>
   1a678:	ldr	r3, [pc, #4]	; 1a684 <__assert_fail@plt+0x9354>
   1a67c:	mvn	r2, #0
   1a680:	b	18928 <__assert_fail@plt+0x75f8>
   1a684:	andeq	pc, r2, ip, asr #2
   1a688:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a68c:	movw	r4, #61756	; 0xf13c
   1a690:	movt	r4, #2
   1a694:	strd	r6, [sp, #8]
   1a698:	strd	r8, [sp, #16]
   1a69c:	strd	sl, [sp, #24]
   1a6a0:	mov	sl, r0
   1a6a4:	str	lr, [sp, #32]
   1a6a8:	sub	sp, sp, #44	; 0x2c
   1a6ac:	bl	111ec <__errno_location@plt>
   1a6b0:	ldr	r3, [r0]
   1a6b4:	mov	r8, r0
   1a6b8:	ldr	r2, [r4, #4]
   1a6bc:	ldr	r5, [r4]
   1a6c0:	str	r3, [sp, #28]
   1a6c4:	cmp	r2, #0
   1a6c8:	bgt	1a724 <__assert_fail@plt+0x93f4>
   1a6cc:	add	r3, r4, #8
   1a6d0:	str	r2, [sp, #36]	; 0x24
   1a6d4:	rsb	r2, r2, #1
   1a6d8:	cmp	r5, r3
   1a6dc:	beq	1a7ec <__assert_fail@plt+0x94bc>
   1a6e0:	mov	r1, #8
   1a6e4:	mov	r0, r5
   1a6e8:	mvn	r3, #-2147483648	; 0x80000000
   1a6ec:	str	r1, [sp]
   1a6f0:	add	r1, sp, #36	; 0x24
   1a6f4:	bl	1b300 <__assert_fail@plt+0x9fd0>
   1a6f8:	mov	r5, r0
   1a6fc:	str	r0, [r4]
   1a700:	ldr	r0, [r4, #4]
   1a704:	mov	r1, #0
   1a708:	ldr	r2, [sp, #36]	; 0x24
   1a70c:	sub	r2, r2, r0
   1a710:	add	r0, r5, r0, lsl #3
   1a714:	lsl	r2, r2, #3
   1a718:	bl	11204 <memset@plt>
   1a71c:	ldr	r3, [sp, #36]	; 0x24
   1a720:	str	r3, [r4, #4]
   1a724:	ldr	ip, [r4, #16]
   1a728:	mvn	r3, #0
   1a72c:	mov	r2, sl
   1a730:	ldr	r7, [r4, #20]
   1a734:	ldr	fp, [pc, #220]	; 1a818 <__assert_fail@plt+0x94e8>
   1a738:	ldr	r9, [r5]
   1a73c:	orr	r7, r7, #1
   1a740:	ldr	r6, [r5, #4]
   1a744:	str	ip, [sp]
   1a748:	ldr	ip, [r4, #56]	; 0x38
   1a74c:	mov	r1, r9
   1a750:	stmib	sp, {r7, fp}
   1a754:	ldr	lr, [r4, #60]	; 0x3c
   1a758:	mov	r0, r6
   1a75c:	str	ip, [sp, #12]
   1a760:	str	lr, [sp, #16]
   1a764:	bl	16f3c <__assert_fail@plt+0x5c0c>
   1a768:	cmp	r9, r0
   1a76c:	bhi	1a7c4 <__assert_fail@plt+0x9494>
   1a770:	add	r9, r0, #1
   1a774:	movw	r3, #61892	; 0xf1c4
   1a778:	movt	r3, #2
   1a77c:	cmp	r6, r3
   1a780:	str	r9, [r5]
   1a784:	beq	1a790 <__assert_fail@plt+0x9460>
   1a788:	mov	r0, r6
   1a78c:	bl	12d1c <__assert_fail@plt+0x19ec>
   1a790:	mov	r0, r9
   1a794:	bl	1b05c <__assert_fail@plt+0x9d2c>
   1a798:	ldr	r3, [r4, #16]
   1a79c:	mov	r2, sl
   1a7a0:	mov	r1, r9
   1a7a4:	mov	r6, r0
   1a7a8:	ldr	lr, [r4, #56]	; 0x38
   1a7ac:	ldr	ip, [r4, #60]	; 0x3c
   1a7b0:	str	r0, [r5, #4]
   1a7b4:	stm	sp, {r3, r7, fp, lr}
   1a7b8:	mvn	r3, #0
   1a7bc:	str	ip, [sp, #16]
   1a7c0:	bl	16f3c <__assert_fail@plt+0x5c0c>
   1a7c4:	ldr	r3, [sp, #28]
   1a7c8:	mov	r0, r6
   1a7cc:	str	r3, [r8]
   1a7d0:	add	sp, sp, #44	; 0x2c
   1a7d4:	ldrd	r4, [sp]
   1a7d8:	ldrd	r6, [sp, #8]
   1a7dc:	ldrd	r8, [sp, #16]
   1a7e0:	ldrd	sl, [sp, #24]
   1a7e4:	add	sp, sp, #32
   1a7e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7ec:	mov	r0, #8
   1a7f0:	mvn	r3, #-2147483648	; 0x80000000
   1a7f4:	add	r1, sp, #36	; 0x24
   1a7f8:	str	r0, [sp]
   1a7fc:	mov	r0, #0
   1a800:	bl	1b300 <__assert_fail@plt+0x9fd0>
   1a804:	ldrd	r2, [r4, #8]
   1a808:	mov	r5, r0
   1a80c:	str	r0, [r4]
   1a810:	strd	r2, [r0]
   1a814:	b	1a700 <__assert_fail@plt+0x93d0>
   1a818:	andeq	pc, r2, r4, asr r1	; <UNPREDICTABLE>
   1a81c:	str	r4, [sp, #-16]!
   1a820:	movw	r1, #55468	; 0xd8ac
   1a824:	movt	r1, #1
   1a828:	strd	r6, [sp, #4]
   1a82c:	mov	r4, r0
   1a830:	mov	r0, #3
   1a834:	str	lr, [sp, #12]
   1a838:	sub	sp, sp, #104	; 0x68
   1a83c:	mov	r2, sp
   1a840:	bl	11300 <__lxstat64@plt>
   1a844:	cmp	r0, #0
   1a848:	movne	r0, #0
   1a84c:	bne	1a864 <__assert_fail@plt+0x9534>
   1a850:	ldrd	r6, [sp]
   1a854:	mov	r0, r4
   1a858:	ldrd	r2, [sp, #96]	; 0x60
   1a85c:	strd	r2, [r4]
   1a860:	strd	r6, [r4, #8]
   1a864:	add	sp, sp, #104	; 0x68
   1a868:	ldr	r4, [sp]
   1a86c:	ldrd	r6, [sp, #4]
   1a870:	add	sp, sp, #12
   1a874:	pop	{pc}		; (ldr pc, [sp], #4)
   1a878:	cmp	r0, #2
   1a87c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a880:	mov	r4, r0
   1a884:	strd	r6, [sp, #8]
   1a888:	str	r8, [sp, #16]
   1a88c:	str	lr, [sp, #20]
   1a890:	bls	1a8ac <__assert_fail@plt+0x957c>
   1a894:	mov	r0, r4
   1a898:	ldrd	r4, [sp]
   1a89c:	ldrd	r6, [sp, #8]
   1a8a0:	ldr	r8, [sp, #16]
   1a8a4:	add	sp, sp, #20
   1a8a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8ac:	bl	1cbac <__assert_fail@plt+0xb87c>
   1a8b0:	mov	r7, r0
   1a8b4:	bl	111ec <__errno_location@plt>
   1a8b8:	mov	r5, r0
   1a8bc:	mov	r0, r4
   1a8c0:	ldr	r6, [r5]
   1a8c4:	mov	r4, r7
   1a8c8:	bl	112f4 <close@plt>
   1a8cc:	str	r6, [r5]
   1a8d0:	b	1a894 <__assert_fail@plt+0x9564>
   1a8d4:	cmp	r1, #0
   1a8d8:	strd	r4, [sp, #-16]!
   1a8dc:	mov	ip, r3
   1a8e0:	str	r6, [sp, #8]
   1a8e4:	mov	r4, r0
   1a8e8:	str	lr, [sp, #12]
   1a8ec:	sub	sp, sp, #32
   1a8f0:	ldr	r5, [sp, #48]	; 0x30
   1a8f4:	ldr	r6, [sp, #52]	; 0x34
   1a8f8:	beq	1aa3c <__assert_fail@plt+0x970c>
   1a8fc:	mov	r3, r1
   1a900:	mov	r1, #1
   1a904:	stm	sp, {r2, ip}
   1a908:	movw	r2, #57180	; 0xdf5c
   1a90c:	movt	r2, #1
   1a910:	bl	11228 <__fprintf_chk@plt>
   1a914:	mov	r2, #5
   1a918:	movw	r1, #57200	; 0xdf70
   1a91c:	movt	r1, #1
   1a920:	mov	r0, #0
   1a924:	bl	110c0 <dcgettext@plt>
   1a928:	movw	ip, #2022	; 0x7e6
   1a92c:	mov	r3, r0
   1a930:	mov	r1, #1
   1a934:	movw	r2, #57928	; 0xe248
   1a938:	movt	r2, #1
   1a93c:	mov	r0, r4
   1a940:	str	ip, [sp]
   1a944:	bl	11228 <__fprintf_chk@plt>
   1a948:	mov	r1, r4
   1a94c:	mov	r0, #10
   1a950:	bl	110b4 <fputc_unlocked@plt>
   1a954:	mov	r2, #5
   1a958:	movw	r1, #57204	; 0xdf74
   1a95c:	movt	r1, #1
   1a960:	mov	r0, #0
   1a964:	bl	110c0 <dcgettext@plt>
   1a968:	mov	r2, r0
   1a96c:	mov	r1, #1
   1a970:	movw	r3, #57376	; 0xe020
   1a974:	movt	r3, #1
   1a978:	mov	r0, r4
   1a97c:	bl	11228 <__fprintf_chk@plt>
   1a980:	mov	r1, r4
   1a984:	mov	r0, #10
   1a988:	bl	110b4 <fputc_unlocked@plt>
   1a98c:	cmp	r6, #9
   1a990:	ldrls	pc, [pc, r6, lsl #2]
   1a994:	b	1aca8 <__assert_fail@plt+0x9978>
   1a998:	andeq	sl, r1, r8, lsr #20
   1a99c:	andeq	sl, r1, r8, asr sl
   1a9a0:	muleq	r1, r4, sl
   1a9a4:	ldrdeq	sl, [r1], -r4
   1a9a8:	andeq	sl, r1, ip, lsl fp
   1a9ac:	andeq	sl, r1, r4, asr fp
   1a9b0:	muleq	r1, ip, fp
   1a9b4:	strdeq	sl, [r1], -r0
   1a9b8:	andeq	sl, r1, r8, asr #24
   1a9bc:	andeq	sl, r1, r0, asr #19
   1a9c0:	movw	r1, #57680	; 0xe150
   1a9c4:	movt	r1, #1
   1a9c8:	mov	r2, #5
   1a9cc:	mov	r0, #0
   1a9d0:	bl	110c0 <dcgettext@plt>
   1a9d4:	ldr	lr, [r5, #4]
   1a9d8:	mov	r2, r0
   1a9dc:	mov	r1, #1
   1a9e0:	mov	r0, r4
   1a9e4:	ldr	r3, [r5, #8]
   1a9e8:	ldr	ip, [r5, #32]
   1a9ec:	str	lr, [sp]
   1a9f0:	ldr	lr, [r5, #12]
   1a9f4:	str	ip, [sp, #28]
   1a9f8:	ldr	ip, [r5, #28]
   1a9fc:	str	r3, [sp, #4]
   1aa00:	ldr	r3, [r5, #16]
   1aa04:	str	lr, [sp, #8]
   1aa08:	ldr	lr, [r5, #20]
   1aa0c:	str	ip, [sp, #24]
   1aa10:	ldr	ip, [r5, #24]
   1aa14:	str	r3, [sp, #12]
   1aa18:	ldr	r3, [r5]
   1aa1c:	str	lr, [sp, #16]
   1aa20:	str	ip, [sp, #20]
   1aa24:	bl	11228 <__fprintf_chk@plt>
   1aa28:	add	sp, sp, #32
   1aa2c:	ldrd	r4, [sp]
   1aa30:	ldr	r6, [sp, #8]
   1aa34:	add	sp, sp, #12
   1aa38:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa3c:	mov	r3, r2
   1aa40:	mov	r1, #1
   1aa44:	str	ip, [sp]
   1aa48:	movw	r2, #57192	; 0xdf68
   1aa4c:	movt	r2, #1
   1aa50:	bl	11228 <__fprintf_chk@plt>
   1aa54:	b	1a914 <__assert_fail@plt+0x95e4>
   1aa58:	mov	r2, #5
   1aa5c:	movw	r1, #57412	; 0xe044
   1aa60:	movt	r1, #1
   1aa64:	mov	r0, #0
   1aa68:	bl	110c0 <dcgettext@plt>
   1aa6c:	ldr	r3, [r5]
   1aa70:	mov	r2, r0
   1aa74:	mov	r1, #1
   1aa78:	mov	r0, r4
   1aa7c:	add	sp, sp, #32
   1aa80:	ldrd	r4, [sp]
   1aa84:	ldr	r6, [sp, #8]
   1aa88:	ldr	lr, [sp, #12]
   1aa8c:	add	sp, sp, #16
   1aa90:	b	11228 <__fprintf_chk@plt>
   1aa94:	mov	r2, #5
   1aa98:	movw	r1, #57428	; 0xe054
   1aa9c:	movt	r1, #1
   1aaa0:	mov	r0, #0
   1aaa4:	bl	110c0 <dcgettext@plt>
   1aaa8:	ldm	r5, {r3, ip}
   1aaac:	mov	r2, r0
   1aab0:	mov	r1, #1
   1aab4:	mov	r0, r4
   1aab8:	str	ip, [sp, #48]	; 0x30
   1aabc:	add	sp, sp, #32
   1aac0:	ldrd	r4, [sp]
   1aac4:	ldr	r6, [sp, #8]
   1aac8:	ldr	lr, [sp, #12]
   1aacc:	add	sp, sp, #16
   1aad0:	b	11228 <__fprintf_chk@plt>
   1aad4:	mov	r2, #5
   1aad8:	movw	r1, #57452	; 0xe06c
   1aadc:	movt	r1, #1
   1aae0:	mov	r0, #0
   1aae4:	bl	110c0 <dcgettext@plt>
   1aae8:	ldm	r5, {r3, lr}
   1aaec:	mov	r2, r0
   1aaf0:	mov	r1, #1
   1aaf4:	mov	r0, r4
   1aaf8:	ldr	ip, [r5, #8]
   1aafc:	str	lr, [sp, #48]	; 0x30
   1ab00:	str	ip, [sp, #52]	; 0x34
   1ab04:	add	sp, sp, #32
   1ab08:	ldrd	r4, [sp]
   1ab0c:	ldr	r6, [sp, #8]
   1ab10:	ldr	lr, [sp, #12]
   1ab14:	add	sp, sp, #16
   1ab18:	b	11228 <__fprintf_chk@plt>
   1ab1c:	mov	r2, #5
   1ab20:	movw	r1, #57480	; 0xe088
   1ab24:	movt	r1, #1
   1ab28:	mov	r0, #0
   1ab2c:	bl	110c0 <dcgettext@plt>
   1ab30:	ldmib	r5, {r3, ip, lr}
   1ab34:	mov	r2, r0
   1ab38:	mov	r1, #1
   1ab3c:	mov	r0, r4
   1ab40:	str	r3, [sp]
   1ab44:	ldr	r3, [r5]
   1ab48:	stmib	sp, {ip, lr}
   1ab4c:	bl	11228 <__fprintf_chk@plt>
   1ab50:	b	1aa28 <__assert_fail@plt+0x96f8>
   1ab54:	mov	r2, #5
   1ab58:	movw	r1, #57512	; 0xe0a8
   1ab5c:	movt	r1, #1
   1ab60:	mov	r0, #0
   1ab64:	bl	110c0 <dcgettext@plt>
   1ab68:	ldmib	r5, {ip, lr}
   1ab6c:	mov	r2, r0
   1ab70:	mov	r1, #1
   1ab74:	mov	r0, r4
   1ab78:	ldr	r3, [r5, #16]
   1ab7c:	str	ip, [sp]
   1ab80:	ldr	ip, [r5, #12]
   1ab84:	str	r3, [sp, #12]
   1ab88:	ldr	r3, [r5]
   1ab8c:	str	lr, [sp, #4]
   1ab90:	str	ip, [sp, #8]
   1ab94:	bl	11228 <__fprintf_chk@plt>
   1ab98:	b	1aa28 <__assert_fail@plt+0x96f8>
   1ab9c:	mov	r2, #5
   1aba0:	movw	r1, #57548	; 0xe0cc
   1aba4:	movt	r1, #1
   1aba8:	mov	r0, #0
   1abac:	bl	110c0 <dcgettext@plt>
   1abb0:	ldr	lr, [r5, #4]
   1abb4:	mov	r2, r0
   1abb8:	mov	r1, #1
   1abbc:	mov	r0, r4
   1abc0:	ldr	r3, [r5, #8]
   1abc4:	ldr	ip, [r5, #20]
   1abc8:	str	lr, [sp]
   1abcc:	ldr	lr, [r5, #12]
   1abd0:	str	ip, [sp, #16]
   1abd4:	ldr	ip, [r5, #16]
   1abd8:	str	r3, [sp, #4]
   1abdc:	ldr	r3, [r5]
   1abe0:	str	lr, [sp, #8]
   1abe4:	str	ip, [sp, #12]
   1abe8:	bl	11228 <__fprintf_chk@plt>
   1abec:	b	1aa28 <__assert_fail@plt+0x96f8>
   1abf0:	mov	r2, #5
   1abf4:	movw	r1, #57588	; 0xe0f4
   1abf8:	movt	r1, #1
   1abfc:	mov	r0, #0
   1ac00:	bl	110c0 <dcgettext@plt>
   1ac04:	ldmib	r5, {r3, ip}
   1ac08:	mov	r2, r0
   1ac0c:	mov	r1, #1
   1ac10:	mov	r0, r4
   1ac14:	ldr	lr, [r5, #24]
   1ac18:	str	r3, [sp]
   1ac1c:	ldr	r3, [r5, #12]
   1ac20:	str	lr, [sp, #20]
   1ac24:	ldr	lr, [r5, #20]
   1ac28:	str	ip, [sp, #4]
   1ac2c:	ldr	ip, [r5, #16]
   1ac30:	str	r3, [sp, #8]
   1ac34:	ldr	r3, [r5]
   1ac38:	str	ip, [sp, #12]
   1ac3c:	str	lr, [sp, #16]
   1ac40:	bl	11228 <__fprintf_chk@plt>
   1ac44:	b	1aa28 <__assert_fail@plt+0x96f8>
   1ac48:	mov	r2, #5
   1ac4c:	movw	r1, #57632	; 0xe120
   1ac50:	movt	r1, #1
   1ac54:	mov	r0, #0
   1ac58:	bl	110c0 <dcgettext@plt>
   1ac5c:	ldmib	r5, {ip, lr}
   1ac60:	mov	r2, r0
   1ac64:	mov	r1, #1
   1ac68:	mov	r0, r4
   1ac6c:	ldr	r3, [r5, #28]
   1ac70:	str	ip, [sp]
   1ac74:	ldr	ip, [r5, #12]
   1ac78:	str	r3, [sp, #24]
   1ac7c:	ldr	r3, [r5, #24]
   1ac80:	str	lr, [sp, #4]
   1ac84:	ldr	lr, [r5, #16]
   1ac88:	str	ip, [sp, #8]
   1ac8c:	ldr	ip, [r5, #20]
   1ac90:	str	r3, [sp, #20]
   1ac94:	ldr	r3, [r5]
   1ac98:	str	lr, [sp, #12]
   1ac9c:	str	ip, [sp, #16]
   1aca0:	bl	11228 <__fprintf_chk@plt>
   1aca4:	b	1aa28 <__assert_fail@plt+0x96f8>
   1aca8:	movw	r1, #57732	; 0xe184
   1acac:	movt	r1, #1
   1acb0:	b	1a9c8 <__assert_fail@plt+0x9698>
   1acb4:	strd	r4, [sp, #-12]!
   1acb8:	str	lr, [sp, #8]
   1acbc:	sub	sp, sp, #12
   1acc0:	ldr	r5, [sp, #24]
   1acc4:	ldr	ip, [r5]
   1acc8:	cmp	ip, #0
   1accc:	beq	1ace8 <__assert_fail@plt+0x99b8>
   1acd0:	mov	lr, r5
   1acd4:	mov	ip, #0
   1acd8:	ldr	r4, [lr, #4]!
   1acdc:	add	ip, ip, #1
   1ace0:	cmp	r4, #0
   1ace4:	bne	1acd8 <__assert_fail@plt+0x99a8>
   1ace8:	stm	sp, {r5, ip}
   1acec:	bl	1a8d4 <__assert_fail@plt+0x95a4>
   1acf0:	add	sp, sp, #12
   1acf4:	ldrd	r4, [sp]
   1acf8:	add	sp, sp, #8
   1acfc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad00:	push	{lr}		; (str lr, [sp, #-4]!)
   1ad04:	sub	sp, sp, #52	; 0x34
   1ad08:	ldr	ip, [sp, #56]	; 0x38
   1ad0c:	ldr	lr, [ip]
   1ad10:	cmp	lr, #0
   1ad14:	str	lr, [sp, #8]
   1ad18:	beq	1adb0 <__assert_fail@plt+0x9a80>
   1ad1c:	ldr	lr, [ip, #4]
   1ad20:	cmp	lr, #0
   1ad24:	str	lr, [sp, #12]
   1ad28:	beq	1adc4 <__assert_fail@plt+0x9a94>
   1ad2c:	ldr	lr, [ip, #8]
   1ad30:	cmp	lr, #0
   1ad34:	str	lr, [sp, #16]
   1ad38:	beq	1adcc <__assert_fail@plt+0x9a9c>
   1ad3c:	ldr	lr, [ip, #12]
   1ad40:	cmp	lr, #0
   1ad44:	str	lr, [sp, #20]
   1ad48:	beq	1add4 <__assert_fail@plt+0x9aa4>
   1ad4c:	ldr	lr, [ip, #16]
   1ad50:	cmp	lr, #0
   1ad54:	str	lr, [sp, #24]
   1ad58:	beq	1addc <__assert_fail@plt+0x9aac>
   1ad5c:	ldr	lr, [ip, #20]
   1ad60:	cmp	lr, #0
   1ad64:	str	lr, [sp, #28]
   1ad68:	beq	1ade4 <__assert_fail@plt+0x9ab4>
   1ad6c:	ldr	lr, [ip, #24]
   1ad70:	cmp	lr, #0
   1ad74:	str	lr, [sp, #32]
   1ad78:	beq	1adec <__assert_fail@plt+0x9abc>
   1ad7c:	ldr	lr, [ip, #28]
   1ad80:	cmp	lr, #0
   1ad84:	str	lr, [sp, #36]	; 0x24
   1ad88:	beq	1adf4 <__assert_fail@plt+0x9ac4>
   1ad8c:	ldr	lr, [ip, #32]
   1ad90:	cmp	lr, #0
   1ad94:	str	lr, [sp, #40]	; 0x28
   1ad98:	beq	1adfc <__assert_fail@plt+0x9acc>
   1ad9c:	ldr	ip, [ip, #36]	; 0x24
   1ada0:	cmp	ip, #0
   1ada4:	str	ip, [sp, #44]	; 0x2c
   1ada8:	movne	lr, #10
   1adac:	moveq	lr, #9
   1adb0:	add	ip, sp, #8
   1adb4:	stm	sp, {ip, lr}
   1adb8:	bl	1a8d4 <__assert_fail@plt+0x95a4>
   1adbc:	add	sp, sp, #52	; 0x34
   1adc0:	pop	{pc}		; (ldr pc, [sp], #4)
   1adc4:	mov	lr, #1
   1adc8:	b	1adb0 <__assert_fail@plt+0x9a80>
   1adcc:	mov	lr, #2
   1add0:	b	1adb0 <__assert_fail@plt+0x9a80>
   1add4:	mov	lr, #3
   1add8:	b	1adb0 <__assert_fail@plt+0x9a80>
   1addc:	mov	lr, #4
   1ade0:	b	1adb0 <__assert_fail@plt+0x9a80>
   1ade4:	mov	lr, #5
   1ade8:	b	1adb0 <__assert_fail@plt+0x9a80>
   1adec:	mov	lr, #6
   1adf0:	b	1adb0 <__assert_fail@plt+0x9a80>
   1adf4:	mov	lr, #7
   1adf8:	b	1adb0 <__assert_fail@plt+0x9a80>
   1adfc:	mov	lr, #8
   1ae00:	b	1adb0 <__assert_fail@plt+0x9a80>
   1ae04:	push	{r3}		; (str r3, [sp, #-4]!)
   1ae08:	push	{lr}		; (str lr, [sp, #-4]!)
   1ae0c:	sub	sp, sp, #56	; 0x38
   1ae10:	ldr	ip, [sp, #64]	; 0x40
   1ae14:	add	r3, sp, #64	; 0x40
   1ae18:	str	r3, [sp, #12]
   1ae1c:	cmp	ip, #0
   1ae20:	str	ip, [sp, #16]
   1ae24:	beq	1aebc <__assert_fail@plt+0x9b8c>
   1ae28:	ldr	ip, [sp, #68]	; 0x44
   1ae2c:	cmp	ip, #0
   1ae30:	str	ip, [sp, #20]
   1ae34:	beq	1aee0 <__assert_fail@plt+0x9bb0>
   1ae38:	ldr	ip, [sp, #72]	; 0x48
   1ae3c:	cmp	ip, #0
   1ae40:	str	ip, [sp, #24]
   1ae44:	beq	1aee8 <__assert_fail@plt+0x9bb8>
   1ae48:	ldr	ip, [sp, #76]	; 0x4c
   1ae4c:	cmp	ip, #0
   1ae50:	str	ip, [sp, #28]
   1ae54:	beq	1aef0 <__assert_fail@plt+0x9bc0>
   1ae58:	ldr	ip, [sp, #80]	; 0x50
   1ae5c:	cmp	ip, #0
   1ae60:	str	ip, [sp, #32]
   1ae64:	beq	1aef8 <__assert_fail@plt+0x9bc8>
   1ae68:	ldr	ip, [sp, #84]	; 0x54
   1ae6c:	cmp	ip, #0
   1ae70:	str	ip, [sp, #36]	; 0x24
   1ae74:	beq	1af00 <__assert_fail@plt+0x9bd0>
   1ae78:	ldr	ip, [sp, #88]	; 0x58
   1ae7c:	cmp	ip, #0
   1ae80:	str	ip, [sp, #40]	; 0x28
   1ae84:	beq	1af08 <__assert_fail@plt+0x9bd8>
   1ae88:	ldr	ip, [sp, #92]	; 0x5c
   1ae8c:	cmp	ip, #0
   1ae90:	str	ip, [sp, #44]	; 0x2c
   1ae94:	beq	1af10 <__assert_fail@plt+0x9be0>
   1ae98:	ldr	ip, [sp, #96]	; 0x60
   1ae9c:	cmp	ip, #0
   1aea0:	str	ip, [sp, #48]	; 0x30
   1aea4:	beq	1af18 <__assert_fail@plt+0x9be8>
   1aea8:	ldr	r3, [sp, #100]	; 0x64
   1aeac:	cmp	r3, #0
   1aeb0:	str	r3, [sp, #52]	; 0x34
   1aeb4:	movne	ip, #10
   1aeb8:	moveq	ip, #9
   1aebc:	ldr	r3, [sp, #60]	; 0x3c
   1aec0:	add	lr, sp, #16
   1aec4:	str	lr, [sp]
   1aec8:	str	ip, [sp, #4]
   1aecc:	bl	1a8d4 <__assert_fail@plt+0x95a4>
   1aed0:	add	sp, sp, #56	; 0x38
   1aed4:	pop	{lr}		; (ldr lr, [sp], #4)
   1aed8:	add	sp, sp, #4
   1aedc:	bx	lr
   1aee0:	mov	ip, #1
   1aee4:	b	1aebc <__assert_fail@plt+0x9b8c>
   1aee8:	mov	ip, #2
   1aeec:	b	1aebc <__assert_fail@plt+0x9b8c>
   1aef0:	mov	ip, #3
   1aef4:	b	1aebc <__assert_fail@plt+0x9b8c>
   1aef8:	mov	ip, #4
   1aefc:	b	1aebc <__assert_fail@plt+0x9b8c>
   1af00:	mov	ip, #5
   1af04:	b	1aebc <__assert_fail@plt+0x9b8c>
   1af08:	mov	ip, #6
   1af0c:	b	1aebc <__assert_fail@plt+0x9b8c>
   1af10:	mov	ip, #7
   1af14:	b	1aebc <__assert_fail@plt+0x9b8c>
   1af18:	mov	ip, #8
   1af1c:	b	1aebc <__assert_fail@plt+0x9b8c>
   1af20:	movw	r3, #61844	; 0xf194
   1af24:	movt	r3, #2
   1af28:	str	r4, [sp, #-8]!
   1af2c:	mov	r0, #10
   1af30:	ldr	r1, [r3]
   1af34:	str	lr, [sp, #4]
   1af38:	bl	110b4 <fputc_unlocked@plt>
   1af3c:	mov	r2, #5
   1af40:	movw	r1, #57792	; 0xe1c0
   1af44:	movt	r1, #1
   1af48:	mov	r0, #0
   1af4c:	bl	110c0 <dcgettext@plt>
   1af50:	mov	r1, r0
   1af54:	movw	r2, #57812	; 0xe1d4
   1af58:	movt	r2, #1
   1af5c:	mov	r0, #1
   1af60:	bl	11210 <__printf_chk@plt>
   1af64:	mov	r2, #5
   1af68:	movw	r1, #57836	; 0xe1ec
   1af6c:	movt	r1, #1
   1af70:	mov	r0, #0
   1af74:	bl	110c0 <dcgettext@plt>
   1af78:	mov	r1, r0
   1af7c:	movw	r3, #55048	; 0xd708
   1af80:	movt	r3, #1
   1af84:	movw	r2, #55088	; 0xd730
   1af88:	movt	r2, #1
   1af8c:	mov	r0, #1
   1af90:	bl	11210 <__printf_chk@plt>
   1af94:	mov	r2, #5
   1af98:	movw	r1, #57856	; 0xe200
   1af9c:	movt	r1, #1
   1afa0:	mov	r0, #0
   1afa4:	bl	110c0 <dcgettext@plt>
   1afa8:	mov	r1, r0
   1afac:	movw	r2, #57896	; 0xe228
   1afb0:	movt	r2, #1
   1afb4:	mov	r0, #1
   1afb8:	ldr	r4, [sp]
   1afbc:	ldr	lr, [sp, #4]
   1afc0:	add	sp, sp, #8
   1afc4:	b	11210 <__printf_chk@plt>
   1afc8:	strd	r4, [sp, #-16]!
   1afcc:	mov	r4, r0
   1afd0:	mov	r5, r2
   1afd4:	str	r6, [sp, #8]
   1afd8:	mov	r6, r1
   1afdc:	str	lr, [sp, #12]
   1afe0:	bl	1cb74 <__assert_fail@plt+0xb844>
   1afe4:	cmp	r0, #0
   1afe8:	beq	1affc <__assert_fail@plt+0x9ccc>
   1afec:	ldrd	r4, [sp]
   1aff0:	ldr	r6, [sp, #8]
   1aff4:	add	sp, sp, #12
   1aff8:	pop	{pc}		; (ldr pc, [sp], #4)
   1affc:	cmp	r4, #0
   1b000:	beq	1b010 <__assert_fail@plt+0x9ce0>
   1b004:	cmp	r6, #0
   1b008:	cmpne	r5, #0
   1b00c:	beq	1afec <__assert_fail@plt+0x9cbc>
   1b010:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b014:	str	r4, [sp, #-8]!
   1b018:	str	lr, [sp, #4]
   1b01c:	bl	1c470 <__assert_fail@plt+0xb140>
   1b020:	cmp	r0, #0
   1b024:	beq	1b034 <__assert_fail@plt+0x9d04>
   1b028:	ldr	r4, [sp]
   1b02c:	add	sp, sp, #4
   1b030:	pop	{pc}		; (ldr pc, [sp], #4)
   1b034:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b038:	str	r4, [sp, #-8]!
   1b03c:	str	lr, [sp, #4]
   1b040:	bl	1c470 <__assert_fail@plt+0xb140>
   1b044:	cmp	r0, #0
   1b048:	beq	1b058 <__assert_fail@plt+0x9d28>
   1b04c:	ldr	r4, [sp]
   1b050:	add	sp, sp, #4
   1b054:	pop	{pc}		; (ldr pc, [sp], #4)
   1b058:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b05c:	str	r4, [sp, #-8]!
   1b060:	str	lr, [sp, #4]
   1b064:	bl	1c470 <__assert_fail@plt+0xb140>
   1b068:	cmp	r0, #0
   1b06c:	beq	1b07c <__assert_fail@plt+0x9d4c>
   1b070:	ldr	r4, [sp]
   1b074:	add	sp, sp, #4
   1b078:	pop	{pc}		; (ldr pc, [sp], #4)
   1b07c:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b080:	strd	r4, [sp, #-16]!
   1b084:	mov	r5, r0
   1b088:	mov	r4, r1
   1b08c:	str	r6, [sp, #8]
   1b090:	str	lr, [sp, #12]
   1b094:	bl	1c4ac <__assert_fail@plt+0xb17c>
   1b098:	cmp	r0, #0
   1b09c:	beq	1b0b0 <__assert_fail@plt+0x9d80>
   1b0a0:	ldrd	r4, [sp]
   1b0a4:	ldr	r6, [sp, #8]
   1b0a8:	add	sp, sp, #12
   1b0ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0b0:	adds	r4, r4, #0
   1b0b4:	movne	r4, #1
   1b0b8:	cmp	r5, #0
   1b0bc:	moveq	r4, #1
   1b0c0:	cmp	r4, #0
   1b0c4:	beq	1b0a0 <__assert_fail@plt+0x9d70>
   1b0c8:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b0cc:	cmp	r1, #0
   1b0d0:	orreq	r1, r1, #1
   1b0d4:	str	r4, [sp, #-8]!
   1b0d8:	str	lr, [sp, #4]
   1b0dc:	bl	1c4ac <__assert_fail@plt+0xb17c>
   1b0e0:	cmp	r0, #0
   1b0e4:	beq	1b0f4 <__assert_fail@plt+0x9dc4>
   1b0e8:	ldr	r4, [sp]
   1b0ec:	add	sp, sp, #4
   1b0f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0f4:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b0f8:	strd	r4, [sp, #-16]!
   1b0fc:	mov	r4, r0
   1b100:	mov	r5, r2
   1b104:	str	r6, [sp, #8]
   1b108:	mov	r6, r1
   1b10c:	str	lr, [sp, #12]
   1b110:	bl	1cb74 <__assert_fail@plt+0xb844>
   1b114:	cmp	r0, #0
   1b118:	beq	1b12c <__assert_fail@plt+0x9dfc>
   1b11c:	ldrd	r4, [sp]
   1b120:	ldr	r6, [sp, #8]
   1b124:	add	sp, sp, #12
   1b128:	pop	{pc}		; (ldr pc, [sp], #4)
   1b12c:	cmp	r4, #0
   1b130:	beq	1b140 <__assert_fail@plt+0x9e10>
   1b134:	cmp	r6, #0
   1b138:	cmpne	r5, #0
   1b13c:	beq	1b11c <__assert_fail@plt+0x9dec>
   1b140:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b144:	cmp	r2, #0
   1b148:	cmpne	r1, #0
   1b14c:	str	r4, [sp, #-8]!
   1b150:	moveq	r2, #1
   1b154:	str	lr, [sp, #4]
   1b158:	moveq	r1, r2
   1b15c:	bl	1cb74 <__assert_fail@plt+0xb844>
   1b160:	cmp	r0, #0
   1b164:	beq	1b174 <__assert_fail@plt+0x9e44>
   1b168:	ldr	r4, [sp]
   1b16c:	add	sp, sp, #4
   1b170:	pop	{pc}		; (ldr pc, [sp], #4)
   1b174:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b178:	mov	r2, r1
   1b17c:	mov	r1, r0
   1b180:	str	r4, [sp, #-8]!
   1b184:	mov	r0, #0
   1b188:	str	lr, [sp, #4]
   1b18c:	bl	1cb74 <__assert_fail@plt+0xb844>
   1b190:	cmp	r0, #0
   1b194:	beq	1b1a4 <__assert_fail@plt+0x9e74>
   1b198:	ldr	r4, [sp]
   1b19c:	add	sp, sp, #4
   1b1a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1a4:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b1a8:	cmp	r1, #0
   1b1ac:	cmpne	r0, #0
   1b1b0:	str	r4, [sp, #-8]!
   1b1b4:	moveq	r2, #1
   1b1b8:	movne	r2, r1
   1b1bc:	str	lr, [sp, #4]
   1b1c0:	movne	r1, r0
   1b1c4:	moveq	r1, r2
   1b1c8:	mov	r0, #0
   1b1cc:	bl	1cb74 <__assert_fail@plt+0xb844>
   1b1d0:	cmp	r0, #0
   1b1d4:	beq	1b1e4 <__assert_fail@plt+0x9eb4>
   1b1d8:	ldr	r4, [sp]
   1b1dc:	add	sp, sp, #4
   1b1e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1e4:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b1e8:	cmp	r0, #0
   1b1ec:	strd	r4, [sp, #-16]!
   1b1f0:	mov	r5, r1
   1b1f4:	ldr	r4, [r1]
   1b1f8:	str	r6, [sp, #8]
   1b1fc:	str	lr, [sp, #12]
   1b200:	beq	1b248 <__assert_fail@plt+0x9f18>
   1b204:	lsr	r3, r4, #1
   1b208:	add	r3, r3, #1
   1b20c:	adds	r4, r4, r3
   1b210:	bcs	1b244 <__assert_fail@plt+0x9f14>
   1b214:	mov	r2, #1
   1b218:	mov	r1, r4
   1b21c:	bl	1cb74 <__assert_fail@plt+0xb844>
   1b220:	cmp	r0, #0
   1b224:	beq	1b23c <__assert_fail@plt+0x9f0c>
   1b228:	ldr	r6, [sp, #8]
   1b22c:	str	r4, [r5]
   1b230:	ldrd	r4, [sp]
   1b234:	add	sp, sp, #12
   1b238:	pop	{pc}		; (ldr pc, [sp], #4)
   1b23c:	cmp	r4, #0
   1b240:	beq	1b228 <__assert_fail@plt+0x9ef8>
   1b244:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b248:	cmp	r4, #0
   1b24c:	mov	r2, #1
   1b250:	moveq	r4, #64	; 0x40
   1b254:	mov	r1, r4
   1b258:	bl	1cb74 <__assert_fail@plt+0xb844>
   1b25c:	cmp	r0, #0
   1b260:	bne	1b228 <__assert_fail@plt+0x9ef8>
   1b264:	b	1b244 <__assert_fail@plt+0x9f14>
   1b268:	cmp	r0, #0
   1b26c:	strd	r4, [sp, #-16]!
   1b270:	mov	r5, r1
   1b274:	ldr	r4, [r1]
   1b278:	str	r6, [sp, #8]
   1b27c:	mov	r6, r2
   1b280:	str	lr, [sp, #12]
   1b284:	beq	1b2cc <__assert_fail@plt+0x9f9c>
   1b288:	lsr	r3, r4, #1
   1b28c:	add	r3, r3, #1
   1b290:	adds	r4, r4, r3
   1b294:	bcs	1b2c8 <__assert_fail@plt+0x9f98>
   1b298:	mov	r1, r4
   1b29c:	bl	1cb74 <__assert_fail@plt+0xb844>
   1b2a0:	cmp	r0, #0
   1b2a4:	beq	1b2bc <__assert_fail@plt+0x9f8c>
   1b2a8:	ldr	r6, [sp, #8]
   1b2ac:	str	r4, [r5]
   1b2b0:	ldrd	r4, [sp]
   1b2b4:	add	sp, sp, #12
   1b2b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2bc:	cmp	r4, #0
   1b2c0:	cmpne	r6, #0
   1b2c4:	beq	1b2a8 <__assert_fail@plt+0x9f78>
   1b2c8:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b2cc:	cmp	r4, #0
   1b2d0:	bne	1b2e4 <__assert_fail@plt+0x9fb4>
   1b2d4:	mov	r4, #64	; 0x40
   1b2d8:	udiv	r4, r4, r2
   1b2dc:	cmp	r2, #64	; 0x40
   1b2e0:	addhi	r4, r4, #1
   1b2e4:	mov	r2, r6
   1b2e8:	mov	r1, r4
   1b2ec:	mov	r0, #0
   1b2f0:	bl	1cb74 <__assert_fail@plt+0xb844>
   1b2f4:	cmp	r0, #0
   1b2f8:	bne	1b2a8 <__assert_fail@plt+0x9f78>
   1b2fc:	b	1b2c8 <__assert_fail@plt+0x9f98>
   1b300:	ldr	ip, [r1]
   1b304:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b308:	strd	r6, [sp, #8]
   1b30c:	mov	r7, r1
   1b310:	mov	r6, r0
   1b314:	str	r8, [sp, #16]
   1b318:	mvn	r8, r3
   1b31c:	lsr	r8, r8, #31
   1b320:	str	lr, [sp, #20]
   1b324:	asr	r1, ip, #1
   1b328:	ldr	lr, [sp, #24]
   1b32c:	adds	r4, ip, r1
   1b330:	mvnvs	r4, #-2147483648	; 0x80000000
   1b334:	cmp	r3, r4
   1b338:	movge	r1, #0
   1b33c:	andlt	r1, r8, #1
   1b340:	cmp	r1, #0
   1b344:	movne	r4, r3
   1b348:	smull	r0, r1, r4, lr
   1b34c:	cmp	r1, r0, asr #31
   1b350:	bne	1b400 <__assert_fail@plt+0xa0d0>
   1b354:	cmp	r0, #63	; 0x3f
   1b358:	mov	r5, r0
   1b35c:	ble	1b3cc <__assert_fail@plt+0xa09c>
   1b360:	cmp	r6, #0
   1b364:	sub	r1, r4, ip
   1b368:	streq	r6, [r7]
   1b36c:	cmp	r1, r2
   1b370:	bge	1b3a0 <__assert_fail@plt+0xa070>
   1b374:	adds	r4, ip, r2
   1b378:	bvs	1b3fc <__assert_fail@plt+0xa0cc>
   1b37c:	cmp	r4, r3
   1b380:	movle	r3, #0
   1b384:	andgt	r3, r8, #1
   1b388:	cmp	r3, #0
   1b38c:	bne	1b3fc <__assert_fail@plt+0xa0cc>
   1b390:	smull	r0, r1, r4, lr
   1b394:	cmp	r1, r0, asr #31
   1b398:	mov	r5, r0
   1b39c:	bne	1b3fc <__assert_fail@plt+0xa0cc>
   1b3a0:	mov	r1, r5
   1b3a4:	mov	r0, r6
   1b3a8:	bl	1c4ac <__assert_fail@plt+0xb17c>
   1b3ac:	cmp	r0, #0
   1b3b0:	beq	1b3e0 <__assert_fail@plt+0xa0b0>
   1b3b4:	ldr	r8, [sp, #16]
   1b3b8:	str	r4, [r7]
   1b3bc:	ldrd	r4, [sp]
   1b3c0:	ldrd	r6, [sp, #8]
   1b3c4:	add	sp, sp, #20
   1b3c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3cc:	mov	r0, #64	; 0x40
   1b3d0:	sdiv	r4, r0, lr
   1b3d4:	mls	r5, lr, r4, r0
   1b3d8:	sub	r5, r0, r5
   1b3dc:	b	1b360 <__assert_fail@plt+0xa030>
   1b3e0:	adds	r5, r5, #0
   1b3e4:	movne	r5, #1
   1b3e8:	cmp	r6, #0
   1b3ec:	movne	r6, r5
   1b3f0:	moveq	r6, #1
   1b3f4:	cmp	r6, #0
   1b3f8:	beq	1b3b4 <__assert_fail@plt+0xa084>
   1b3fc:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b400:	mvn	r0, #-2147483648	; 0x80000000
   1b404:	b	1b3d0 <__assert_fail@plt+0xa0a0>
   1b408:	mov	r1, #1
   1b40c:	str	r4, [sp, #-8]!
   1b410:	str	lr, [sp, #4]
   1b414:	bl	1c3fc <__assert_fail@plt+0xb0cc>
   1b418:	cmp	r0, #0
   1b41c:	beq	1b42c <__assert_fail@plt+0xa0fc>
   1b420:	ldr	r4, [sp]
   1b424:	add	sp, sp, #4
   1b428:	pop	{pc}		; (ldr pc, [sp], #4)
   1b42c:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b430:	mov	r1, #1
   1b434:	str	r4, [sp, #-8]!
   1b438:	str	lr, [sp, #4]
   1b43c:	bl	1c3fc <__assert_fail@plt+0xb0cc>
   1b440:	cmp	r0, #0
   1b444:	beq	1b454 <__assert_fail@plt+0xa124>
   1b448:	ldr	r4, [sp]
   1b44c:	add	sp, sp, #4
   1b450:	pop	{pc}		; (ldr pc, [sp], #4)
   1b454:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b458:	str	r4, [sp, #-8]!
   1b45c:	str	lr, [sp, #4]
   1b460:	bl	1c3fc <__assert_fail@plt+0xb0cc>
   1b464:	cmp	r0, #0
   1b468:	beq	1b478 <__assert_fail@plt+0xa148>
   1b46c:	ldr	r4, [sp]
   1b470:	add	sp, sp, #4
   1b474:	pop	{pc}		; (ldr pc, [sp], #4)
   1b478:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b47c:	str	r4, [sp, #-8]!
   1b480:	str	lr, [sp, #4]
   1b484:	bl	1c3fc <__assert_fail@plt+0xb0cc>
   1b488:	cmp	r0, #0
   1b48c:	beq	1b49c <__assert_fail@plt+0xa16c>
   1b490:	ldr	r4, [sp]
   1b494:	add	sp, sp, #4
   1b498:	pop	{pc}		; (ldr pc, [sp], #4)
   1b49c:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b4a0:	strd	r4, [sp, #-16]!
   1b4a4:	mov	r4, r1
   1b4a8:	str	r6, [sp, #8]
   1b4ac:	mov	r6, r0
   1b4b0:	mov	r0, r1
   1b4b4:	str	lr, [sp, #12]
   1b4b8:	bl	1c470 <__assert_fail@plt+0xb140>
   1b4bc:	subs	r5, r0, #0
   1b4c0:	beq	1b4e4 <__assert_fail@plt+0xa1b4>
   1b4c4:	mov	r2, r4
   1b4c8:	mov	r1, r6
   1b4cc:	bl	11078 <memcpy@plt>
   1b4d0:	mov	r0, r5
   1b4d4:	ldrd	r4, [sp]
   1b4d8:	ldr	r6, [sp, #8]
   1b4dc:	add	sp, sp, #12
   1b4e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4e4:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b4e8:	strd	r4, [sp, #-16]!
   1b4ec:	mov	r4, r1
   1b4f0:	str	r6, [sp, #8]
   1b4f4:	mov	r6, r0
   1b4f8:	mov	r0, r1
   1b4fc:	str	lr, [sp, #12]
   1b500:	bl	1c470 <__assert_fail@plt+0xb140>
   1b504:	subs	r5, r0, #0
   1b508:	beq	1b52c <__assert_fail@plt+0xa1fc>
   1b50c:	mov	r2, r4
   1b510:	mov	r1, r6
   1b514:	bl	11078 <memcpy@plt>
   1b518:	mov	r0, r5
   1b51c:	ldrd	r4, [sp]
   1b520:	ldr	r6, [sp, #8]
   1b524:	add	sp, sp, #12
   1b528:	pop	{pc}		; (ldr pc, [sp], #4)
   1b52c:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b530:	strd	r4, [sp, #-16]!
   1b534:	mov	r4, r1
   1b538:	str	r6, [sp, #8]
   1b53c:	mov	r6, r0
   1b540:	add	r0, r1, #1
   1b544:	str	lr, [sp, #12]
   1b548:	bl	1c470 <__assert_fail@plt+0xb140>
   1b54c:	subs	r5, r0, #0
   1b550:	beq	1b57c <__assert_fail@plt+0xa24c>
   1b554:	mov	r3, #0
   1b558:	mov	r1, r6
   1b55c:	mov	r2, r4
   1b560:	strb	r3, [r5, r4]
   1b564:	bl	11078 <memcpy@plt>
   1b568:	mov	r0, r5
   1b56c:	ldrd	r4, [sp]
   1b570:	ldr	r6, [sp, #8]
   1b574:	add	sp, sp, #12
   1b578:	pop	{pc}		; (ldr pc, [sp], #4)
   1b57c:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b580:	strd	r4, [sp, #-16]!
   1b584:	str	r6, [sp, #8]
   1b588:	mov	r6, r0
   1b58c:	str	lr, [sp, #12]
   1b590:	bl	111bc <strlen@plt>
   1b594:	add	r4, r0, #1
   1b598:	mov	r0, r4
   1b59c:	bl	1c470 <__assert_fail@plt+0xb140>
   1b5a0:	subs	r5, r0, #0
   1b5a4:	beq	1b5c8 <__assert_fail@plt+0xa298>
   1b5a8:	mov	r2, r4
   1b5ac:	mov	r1, r6
   1b5b0:	bl	11078 <memcpy@plt>
   1b5b4:	mov	r0, r5
   1b5b8:	ldrd	r4, [sp]
   1b5bc:	ldr	r6, [sp, #8]
   1b5c0:	add	sp, sp, #12
   1b5c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5c8:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b5cc:	movw	r3, #61752	; 0xf138
   1b5d0:	movt	r3, #2
   1b5d4:	str	r4, [sp, #-8]!
   1b5d8:	ldr	r4, [r3]
   1b5dc:	mov	r2, #5
   1b5e0:	movw	r1, #57976	; 0xe278
   1b5e4:	movt	r1, #1
   1b5e8:	mov	r0, #0
   1b5ec:	str	lr, [sp, #4]
   1b5f0:	bl	110c0 <dcgettext@plt>
   1b5f4:	mov	r3, r0
   1b5f8:	movw	r2, #56712	; 0xdd88
   1b5fc:	movt	r2, #1
   1b600:	mov	r1, #0
   1b604:	mov	r0, r4
   1b608:	bl	11150 <error@plt>
   1b60c:	bl	112e8 <abort@plt>
   1b610:	orr	r1, r1, #512	; 0x200
   1b614:	str	r4, [sp, #-8]!
   1b618:	str	lr, [sp, #4]
   1b61c:	bl	1425c <__assert_fail@plt+0x2f2c>
   1b620:	cmp	r0, #0
   1b624:	beq	1b634 <__assert_fail@plt+0xa304>
   1b628:	ldr	r4, [sp]
   1b62c:	add	sp, sp, #4
   1b630:	pop	{pc}		; (ldr pc, [sp], #4)
   1b634:	bl	111ec <__errno_location@plt>
   1b638:	ldr	r3, [r0]
   1b63c:	cmp	r3, #22
   1b640:	beq	1b648 <__assert_fail@plt+0xa318>
   1b644:	bl	1b5cc <__assert_fail@plt+0xa29c>
   1b648:	movw	r3, #57996	; 0xe28c
   1b64c:	movt	r3, #1
   1b650:	movw	r1, #58008	; 0xe298
   1b654:	movt	r1, #1
   1b658:	movw	r0, #58020	; 0xe2a4
   1b65c:	movt	r0, #1
   1b660:	mov	r2, #41	; 0x29
   1b664:	bl	11330 <__assert_fail@plt>
   1b668:	ldr	r3, [r0, #48]	; 0x30
   1b66c:	and	r3, r3, #17
   1b670:	cmp	r3, #16
   1b674:	beq	1b698 <__assert_fail@plt+0xa368>
   1b678:	cmp	r3, #17
   1b67c:	beq	1b688 <__assert_fail@plt+0xa358>
   1b680:	mov	r0, #0
   1b684:	bx	lr
   1b688:	ldr	r0, [r1, #48]	; 0x30
   1b68c:	adds	r0, r0, #0
   1b690:	movne	r0, #1
   1b694:	bx	lr
   1b698:	mov	r0, #1
   1b69c:	bx	lr
   1b6a0:	cmp	r2, #36	; 0x24
   1b6a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b6a8:	strd	r6, [sp, #8]
   1b6ac:	strd	r8, [sp, #16]
   1b6b0:	strd	sl, [sp, #24]
   1b6b4:	str	lr, [sp, #32]
   1b6b8:	sub	sp, sp, #36	; 0x24
   1b6bc:	bhi	1c334 <__assert_fail@plt+0xb004>
   1b6c0:	cmp	r1, #0
   1b6c4:	mov	r6, r2
   1b6c8:	mov	r5, r1
   1b6cc:	mov	sl, r0
   1b6d0:	addeq	r5, sp, #28
   1b6d4:	mov	r9, r3
   1b6d8:	bl	111ec <__errno_location@plt>
   1b6dc:	mov	r3, #0
   1b6e0:	mov	fp, r0
   1b6e4:	str	r3, [r0]
   1b6e8:	ldrb	r4, [sl]
   1b6ec:	bl	111a4 <__ctype_b_loc@plt>
   1b6f0:	ldr	r2, [r0]
   1b6f4:	lsl	r3, r4, #1
   1b6f8:	ldrh	r3, [r2, r3]
   1b6fc:	tst	r3, #8192	; 0x2000
   1b700:	beq	1b71c <__assert_fail@plt+0xa3ec>
   1b704:	mov	r3, sl
   1b708:	ldrb	r4, [r3, #1]!
   1b70c:	lsl	r1, r4, #1
   1b710:	ldrh	r1, [r2, r1]
   1b714:	tst	r1, #8192	; 0x2000
   1b718:	bne	1b708 <__assert_fail@plt+0xa3d8>
   1b71c:	cmp	r4, #45	; 0x2d
   1b720:	beq	1b7bc <__assert_fail@plt+0xa48c>
   1b724:	mov	r2, r6
   1b728:	mov	r3, #0
   1b72c:	mov	r1, r5
   1b730:	mov	r0, sl
   1b734:	bl	11084 <__strtoull_internal@plt>
   1b738:	ldr	r8, [r5]
   1b73c:	mov	r6, r0
   1b740:	mov	r7, r1
   1b744:	cmp	r8, sl
   1b748:	beq	1b7a4 <__assert_fail@plt+0xa474>
   1b74c:	ldr	r4, [fp]
   1b750:	cmp	r4, #0
   1b754:	bne	1b794 <__assert_fail@plt+0xa464>
   1b758:	ldr	r3, [sp, #72]	; 0x48
   1b75c:	cmp	r3, #0
   1b760:	beq	1b770 <__assert_fail@plt+0xa440>
   1b764:	ldrb	sl, [r8]
   1b768:	cmp	sl, #0
   1b76c:	bne	1bb28 <__assert_fail@plt+0xa7f8>
   1b770:	strd	r6, [r9]
   1b774:	mov	r0, r4
   1b778:	add	sp, sp, #36	; 0x24
   1b77c:	ldrd	r4, [sp]
   1b780:	ldrd	r6, [sp, #8]
   1b784:	ldrd	r8, [sp, #16]
   1b788:	ldrd	sl, [sp, #24]
   1b78c:	add	sp, sp, #32
   1b790:	pop	{pc}		; (ldr pc, [sp], #4)
   1b794:	cmp	r4, #34	; 0x22
   1b798:	bne	1b7bc <__assert_fail@plt+0xa48c>
   1b79c:	mov	r4, #1
   1b7a0:	b	1b758 <__assert_fail@plt+0xa428>
   1b7a4:	ldr	r3, [sp, #72]	; 0x48
   1b7a8:	cmp	r3, #0
   1b7ac:	beq	1b7bc <__assert_fail@plt+0xa48c>
   1b7b0:	ldrb	sl, [sl]
   1b7b4:	cmp	sl, #0
   1b7b8:	bne	1b7c4 <__assert_fail@plt+0xa494>
   1b7bc:	mov	r4, #4
   1b7c0:	b	1b774 <__assert_fail@plt+0xa444>
   1b7c4:	mov	r1, sl
   1b7c8:	mov	r0, r3
   1b7cc:	bl	111c8 <strchr@plt>
   1b7d0:	cmp	r0, #0
   1b7d4:	movne	r4, #0
   1b7d8:	movne	r6, #1
   1b7dc:	movne	r7, r4
   1b7e0:	beq	1b7bc <__assert_fail@plt+0xa48c>
   1b7e4:	sub	r3, sl, #69	; 0x45
   1b7e8:	cmp	r3, #47	; 0x2f
   1b7ec:	ldrls	pc, [pc, r3, lsl #2]
   1b7f0:	b	1b8f8 <__assert_fail@plt+0xa5c8>
   1b7f4:			; <UNDEFINED> instruction: 0x0001b8b4
   1b7f8:	strdeq	fp, [r1], -r8
   1b7fc:			; <UNDEFINED> instruction: 0x0001b8b4
   1b800:	strdeq	fp, [r1], -r8
   1b804:	strdeq	fp, [r1], -r8
   1b808:	strdeq	fp, [r1], -r8
   1b80c:			; <UNDEFINED> instruction: 0x0001b8b4
   1b810:	strdeq	fp, [r1], -r8
   1b814:			; <UNDEFINED> instruction: 0x0001b8b4
   1b818:	strdeq	fp, [r1], -r8
   1b81c:	strdeq	fp, [r1], -r8
   1b820:			; <UNDEFINED> instruction: 0x0001b8b4
   1b824:	strdeq	fp, [r1], -r8
   1b828:	strdeq	fp, [r1], -r8
   1b82c:	strdeq	fp, [r1], -r8
   1b830:			; <UNDEFINED> instruction: 0x0001b8b4
   1b834:	strdeq	fp, [r1], -r8
   1b838:	strdeq	fp, [r1], -r8
   1b83c:	strdeq	fp, [r1], -r8
   1b840:	strdeq	fp, [r1], -r8
   1b844:			; <UNDEFINED> instruction: 0x0001b8b4
   1b848:			; <UNDEFINED> instruction: 0x0001b8b4
   1b84c:	strdeq	fp, [r1], -r8
   1b850:	strdeq	fp, [r1], -r8
   1b854:	strdeq	fp, [r1], -r8
   1b858:	strdeq	fp, [r1], -r8
   1b85c:	strdeq	fp, [r1], -r8
   1b860:	strdeq	fp, [r1], -r8
   1b864:	strdeq	fp, [r1], -r8
   1b868:	strdeq	fp, [r1], -r8
   1b86c:	strdeq	fp, [r1], -r8
   1b870:	strdeq	fp, [r1], -r8
   1b874:	strdeq	fp, [r1], -r8
   1b878:	strdeq	fp, [r1], -r8
   1b87c:			; <UNDEFINED> instruction: 0x0001b8b4
   1b880:	strdeq	fp, [r1], -r8
   1b884:	strdeq	fp, [r1], -r8
   1b888:	strdeq	fp, [r1], -r8
   1b88c:			; <UNDEFINED> instruction: 0x0001b8b4
   1b890:	strdeq	fp, [r1], -r8
   1b894:			; <UNDEFINED> instruction: 0x0001b8b4
   1b898:	strdeq	fp, [r1], -r8
   1b89c:	strdeq	fp, [r1], -r8
   1b8a0:	strdeq	fp, [r1], -r8
   1b8a4:	strdeq	fp, [r1], -r8
   1b8a8:	strdeq	fp, [r1], -r8
   1b8ac:	strdeq	fp, [r1], -r8
   1b8b0:			; <UNDEFINED> instruction: 0x0001b8b4
   1b8b4:	mov	r1, #48	; 0x30
   1b8b8:	ldr	r0, [sp, #72]	; 0x48
   1b8bc:	bl	111c8 <strchr@plt>
   1b8c0:	cmp	r0, #0
   1b8c4:	beq	1b8f8 <__assert_fail@plt+0xa5c8>
   1b8c8:	ldrb	r3, [r8, #1]
   1b8cc:	cmp	r3, #68	; 0x44
   1b8d0:	beq	1be88 <__assert_fail@plt+0xab58>
   1b8d4:	cmp	r3, #105	; 0x69
   1b8d8:	beq	1bb40 <__assert_fail@plt+0xa810>
   1b8dc:	cmp	r3, #66	; 0x42
   1b8e0:	moveq	r3, #2
   1b8e4:	movne	r3, #1
   1b8e8:	moveq	ip, #1000	; 0x3e8
   1b8ec:	movne	ip, #1024	; 0x400
   1b8f0:	str	r3, [sp, #12]
   1b8f4:	b	1b904 <__assert_fail@plt+0xa5d4>
   1b8f8:	mov	r3, #1
   1b8fc:	mov	ip, #1024	; 0x400
   1b900:	str	r3, [sp, #12]
   1b904:	sub	sl, sl, #66	; 0x42
   1b908:	cmp	sl, #53	; 0x35
   1b90c:	ldrls	pc, [pc, sl, lsl #2]
   1b910:	b	1baec <__assert_fail@plt+0xa7bc>
   1b914:	ldrdeq	fp, [r1], -r4
   1b918:	andeq	fp, r1, ip, ror #21
   1b91c:	andeq	fp, r1, ip, ror #21
   1b920:	andeq	fp, r1, r4, ror sp
   1b924:	andeq	fp, r1, ip, ror #21
   1b928:	strdeq	fp, [r1], -r0
   1b92c:	andeq	fp, r1, ip, ror #21
   1b930:	andeq	fp, r1, ip, ror #21
   1b934:	andeq	fp, r1, ip, ror #21
   1b938:	strdeq	fp, [r1], -r4
   1b93c:	andeq	fp, r1, ip, ror #21
   1b940:	andeq	fp, r1, ip, lsl sp
   1b944:	andeq	fp, r1, ip, ror #21
   1b948:	andeq	fp, r1, ip, ror #21
   1b94c:	andeq	fp, r1, r0, asr #25
   1b950:	andeq	fp, r1, ip, ror #21
   1b954:	andeq	fp, r1, ip, ror #21
   1b958:	andeq	fp, r1, ip, ror #21
   1b95c:	andeq	fp, r1, r0, ror #24
   1b960:	andeq	fp, r1, ip, ror #21
   1b964:	andeq	fp, r1, ip, ror #21
   1b968:	andeq	fp, r1, ip, ror #21
   1b96c:	andeq	fp, r1, ip, ror #21
   1b970:	muleq	r1, r4, fp
   1b974:	andeq	fp, r1, ip, ror #19
   1b978:	andeq	fp, r1, ip, ror #21
   1b97c:	andeq	fp, r1, ip, ror #21
   1b980:	andeq	fp, r1, ip, ror #21
   1b984:	andeq	fp, r1, ip, ror #21
   1b988:	andeq	fp, r1, ip, ror #21
   1b98c:	andeq	fp, r1, ip, ror #21
   1b990:	andeq	fp, r1, ip, ror #21
   1b994:	andeq	fp, r1, r4, ror fp
   1b998:	ldrdeq	fp, [r1], -r4
   1b99c:	andeq	fp, r1, ip, ror #21
   1b9a0:	andeq	fp, r1, ip, ror #21
   1b9a4:	andeq	fp, r1, ip, ror #21
   1b9a8:	strdeq	fp, [r1], -r0
   1b9ac:	andeq	fp, r1, ip, ror #21
   1b9b0:	andeq	fp, r1, ip, ror #21
   1b9b4:	andeq	fp, r1, ip, ror #21
   1b9b8:	strdeq	fp, [r1], -r4
   1b9bc:	andeq	fp, r1, ip, ror #21
   1b9c0:	andeq	fp, r1, ip, lsl sp
   1b9c4:	andeq	fp, r1, ip, ror #21
   1b9c8:	andeq	fp, r1, ip, ror #21
   1b9cc:	andeq	fp, r1, ip, ror #21
   1b9d0:	andeq	fp, r1, ip, ror #21
   1b9d4:	andeq	fp, r1, ip, ror #21
   1b9d8:	andeq	fp, r1, ip, ror #21
   1b9dc:	andeq	fp, r1, r0, ror #24
   1b9e0:	andeq	fp, r1, ip, ror #21
   1b9e4:	andeq	fp, r1, ip, ror #21
   1b9e8:	andeq	fp, r1, ip, asr fp
   1b9ec:	asr	r3, ip, #31
   1b9f0:	mov	r2, ip
   1b9f4:	cmp	r7, #0
   1b9f8:	mov	r1, #0
   1b9fc:	strd	r2, [sp]
   1ba00:	bne	1bf40 <__assert_fail@plt+0xac10>
   1ba04:	umull	r6, r7, r6, ip
   1ba08:	mov	r2, r6
   1ba0c:	mov	r3, r7
   1ba10:	cmp	r1, #0
   1ba14:	bne	1be54 <__assert_fail@plt+0xab24>
   1ba18:	cmp	r3, #0
   1ba1c:	mov	lr, r1
   1ba20:	bne	1c06c <__assert_fail@plt+0xad3c>
   1ba24:	umull	r2, r3, r2, ip
   1ba28:	mov	r0, r2
   1ba2c:	mov	r1, r3
   1ba30:	cmp	lr, #0
   1ba34:	bne	1be54 <__assert_fail@plt+0xab24>
   1ba38:	cmp	r1, #0
   1ba3c:	bne	1c048 <__assert_fail@plt+0xad18>
   1ba40:	umull	r0, r1, r0, ip
   1ba44:	mov	r2, r0
   1ba48:	mov	r3, r1
   1ba4c:	cmp	lr, #0
   1ba50:	bne	1be54 <__assert_fail@plt+0xab24>
   1ba54:	cmp	r3, #0
   1ba58:	bne	1bcf8 <__assert_fail@plt+0xa9c8>
   1ba5c:	umull	r2, r3, r2, ip
   1ba60:	mov	r0, r2
   1ba64:	mov	r1, r3
   1ba68:	cmp	lr, #0
   1ba6c:	bne	1be54 <__assert_fail@plt+0xab24>
   1ba70:	cmp	r1, #0
   1ba74:	bne	1bef8 <__assert_fail@plt+0xabc8>
   1ba78:	umull	r0, r1, r0, ip
   1ba7c:	mov	r2, r0
   1ba80:	mov	r3, r1
   1ba84:	cmp	lr, #0
   1ba88:	bne	1be54 <__assert_fail@plt+0xab24>
   1ba8c:	cmp	r3, #0
   1ba90:	mov	r7, lr
   1ba94:	bne	1bed4 <__assert_fail@plt+0xaba4>
   1ba98:	umull	r2, r3, r2, ip
   1ba9c:	mov	r6, r2
   1baa0:	mov	lr, r3
   1baa4:	cmp	r7, #0
   1baa8:	bne	1be54 <__assert_fail@plt+0xab24>
   1baac:	cmp	lr, #0
   1bab0:	bne	1be98 <__assert_fail@plt+0xab68>
   1bab4:	umull	r2, r3, r6, ip
   1bab8:	mov	r0, r2
   1babc:	mov	r2, r3
   1bac0:	subs	r3, r7, #0
   1bac4:	bne	1be54 <__assert_fail@plt+0xab24>
   1bac8:	mov	r6, r0
   1bacc:	mov	r7, r2
   1bad0:	orr	r4, r4, r3
   1bad4:	ldr	r2, [sp, #12]
   1bad8:	add	r3, r8, r2
   1badc:	str	r3, [r5]
   1bae0:	ldrb	r3, [r8, r2]
   1bae4:	cmp	r3, #0
   1bae8:	beq	1b770 <__assert_fail@plt+0xa440>
   1baec:	orr	r4, r4, #2
   1baf0:	b	1b770 <__assert_fail@plt+0xa440>
   1baf4:	cmp	r7, #0
   1baf8:	asr	r1, ip, #31
   1bafc:	mov	lr, #0
   1bb00:	bne	1be64 <__assert_fail@plt+0xab34>
   1bb04:	umull	r2, r3, r6, ip
   1bb08:	mov	r6, r2
   1bb0c:	mov	r7, r3
   1bb10:	cmp	lr, #0
   1bb14:	beq	1bad4 <__assert_fail@plt+0xa7a4>
   1bb18:	mvn	r6, #0
   1bb1c:	mov	r4, #1
   1bb20:	mov	r7, r6
   1bb24:	b	1bad4 <__assert_fail@plt+0xa7a4>
   1bb28:	mov	r0, r3
   1bb2c:	mov	r1, sl
   1bb30:	bl	111c8 <strchr@plt>
   1bb34:	cmp	r0, #0
   1bb38:	bne	1b7e4 <__assert_fail@plt+0xa4b4>
   1bb3c:	b	1baec <__assert_fail@plt+0xa7bc>
   1bb40:	ldrb	r3, [r8, #2]
   1bb44:	mov	ip, #1024	; 0x400
   1bb48:	cmp	r3, #66	; 0x42
   1bb4c:	movne	r3, #1
   1bb50:	moveq	r3, #3
   1bb54:	str	r3, [sp, #12]
   1bb58:	b	1b904 <__assert_fail@plt+0xa5d4>
   1bb5c:	lsr	r3, r7, #31
   1bb60:	adds	r6, r6, r6
   1bb64:	adc	r7, r7, r7
   1bb68:	cmp	r3, #0
   1bb6c:	beq	1bad4 <__assert_fail@plt+0xa7a4>
   1bb70:	b	1bb18 <__assert_fail@plt+0xa7e8>
   1bb74:	lsr	r3, r7, #23
   1bb78:	lsl	r7, r7, #9
   1bb7c:	cmp	r3, #0
   1bb80:	lsl	r3, r6, #9
   1bb84:	orr	r7, r7, r6, lsr #23
   1bb88:	bne	1bb18 <__assert_fail@plt+0xa7e8>
   1bb8c:	mov	r6, r3
   1bb90:	b	1bad4 <__assert_fail@plt+0xa7a4>
   1bb94:	asr	r3, ip, #31
   1bb98:	mov	r2, ip
   1bb9c:	cmp	r7, #0
   1bba0:	mov	r1, #0
   1bba4:	strd	r2, [sp]
   1bba8:	bne	1bfb4 <__assert_fail@plt+0xac84>
   1bbac:	umull	r6, r7, r6, ip
   1bbb0:	mov	r0, r6
   1bbb4:	mov	fp, r7
   1bbb8:	cmp	r1, #0
   1bbbc:	bne	1be54 <__assert_fail@plt+0xab24>
   1bbc0:	cmp	fp, #0
   1bbc4:	mov	lr, r1
   1bbc8:	bne	1c144 <__assert_fail@plt+0xae14>
   1bbcc:	umull	r0, r1, r0, ip
   1bbd0:	mov	r2, r0
   1bbd4:	mov	r3, r1
   1bbd8:	cmp	lr, #0
   1bbdc:	bne	1be54 <__assert_fail@plt+0xab24>
   1bbe0:	cmp	r3, #0
   1bbe4:	bne	1c16c <__assert_fail@plt+0xae3c>
   1bbe8:	umull	r2, r3, r2, ip
   1bbec:	mov	r0, r2
   1bbf0:	mov	r1, r3
   1bbf4:	cmp	lr, #0
   1bbf8:	bne	1be54 <__assert_fail@plt+0xab24>
   1bbfc:	cmp	r1, #0
   1bc00:	bne	1c0ec <__assert_fail@plt+0xadbc>
   1bc04:	umull	r0, r1, r0, ip
   1bc08:	mov	r2, r0
   1bc0c:	mov	r3, r1
   1bc10:	cmp	lr, #0
   1bc14:	bne	1be54 <__assert_fail@plt+0xab24>
   1bc18:	cmp	r3, #0
   1bc1c:	bne	1bf1c <__assert_fail@plt+0xabec>
   1bc20:	umull	r2, r3, r2, ip
   1bc24:	mov	r0, r2
   1bc28:	mov	r1, r3
   1bc2c:	cmp	lr, #0
   1bc30:	bne	1be54 <__assert_fail@plt+0xab24>
   1bc34:	cmp	r1, #0
   1bc38:	beq	1ba78 <__assert_fail@plt+0xa748>
   1bc3c:	umull	r6, r7, r0, ip
   1bc40:	mov	fp, lr
   1bc44:	mov	sl, r7
   1bc48:	umlal	sl, fp, r1, ip
   1bc4c:	cmp	fp, #0
   1bc50:	bne	1c354 <__assert_fail@plt+0xb024>
   1bc54:	mov	r2, r6
   1bc58:	mov	r3, sl
   1bc5c:	b	1ba84 <__assert_fail@plt+0xa754>
   1bc60:	asr	r3, ip, #31
   1bc64:	mov	r2, ip
   1bc68:	cmp	r7, #0
   1bc6c:	mov	r1, #0
   1bc70:	strd	r2, [sp]
   1bc74:	bne	1bfd8 <__assert_fail@plt+0xaca8>
   1bc78:	umull	r6, r7, r6, ip
   1bc7c:	mov	r0, r6
   1bc80:	mov	fp, r7
   1bc84:	cmp	r1, #0
   1bc88:	bne	1be54 <__assert_fail@plt+0xab24>
   1bc8c:	cmp	fp, #0
   1bc90:	mov	lr, r1
   1bc94:	beq	1ba78 <__assert_fail@plt+0xa748>
   1bc98:	umull	r6, r7, r0, ip
   1bc9c:	mov	r3, r1
   1bca0:	mov	r2, r7
   1bca4:	umlal	r2, r3, fp, ip
   1bca8:	cmp	r3, #0
   1bcac:	strd	r2, [sp, #16]
   1bcb0:	bne	1c238 <__assert_fail@plt+0xaf08>
   1bcb4:	mov	r2, r6
   1bcb8:	ldr	r3, [sp, #16]
   1bcbc:	b	1ba84 <__assert_fail@plt+0xa754>
   1bcc0:	asr	r3, ip, #31
   1bcc4:	mov	r2, ip
   1bcc8:	cmp	r7, #0
   1bccc:	mov	r1, #0
   1bcd0:	strd	r2, [sp]
   1bcd4:	bne	1c020 <__assert_fail@plt+0xacf0>
   1bcd8:	umull	r6, r7, r6, ip
   1bcdc:	mov	r2, r6
   1bce0:	mov	r3, r7
   1bce4:	cmp	r1, #0
   1bce8:	bne	1be54 <__assert_fail@plt+0xab24>
   1bcec:	cmp	r3, #0
   1bcf0:	mov	lr, r1
   1bcf4:	beq	1ba5c <__assert_fail@plt+0xa72c>
   1bcf8:	umull	r6, r7, r2, ip
   1bcfc:	mov	fp, lr
   1bd00:	mov	sl, r7
   1bd04:	umlal	sl, fp, r3, ip
   1bd08:	cmp	fp, #0
   1bd0c:	bne	1c318 <__assert_fail@plt+0xafe8>
   1bd10:	mov	r0, r6
   1bd14:	mov	r1, sl
   1bd18:	b	1ba68 <__assert_fail@plt+0xa738>
   1bd1c:	asr	r3, ip, #31
   1bd20:	mov	r2, ip
   1bd24:	cmp	r7, #0
   1bd28:	mov	r1, #0
   1bd2c:	strd	r2, [sp]
   1bd30:	bne	1bffc <__assert_fail@plt+0xaccc>
   1bd34:	umull	r6, r7, r6, ip
   1bd38:	mov	sl, r6
   1bd3c:	mov	lr, r7
   1bd40:	cmp	r1, #0
   1bd44:	bne	1bb18 <__assert_fail@plt+0xa7e8>
   1bd48:	cmp	lr, #0
   1bd4c:	mov	r7, r1
   1bd50:	bne	1c110 <__assert_fail@plt+0xade0>
   1bd54:	umull	sl, fp, sl, ip
   1bd58:	mov	r0, sl
   1bd5c:	mov	r2, fp
   1bd60:	cmp	r7, #0
   1bd64:	mov	r6, r0
   1bd68:	mov	r7, r2
   1bd6c:	beq	1bad4 <__assert_fail@plt+0xa7a4>
   1bd70:	b	1bb18 <__assert_fail@plt+0xa7e8>
   1bd74:	asr	r3, ip, #31
   1bd78:	mov	r2, ip
   1bd7c:	cmp	r7, #0
   1bd80:	mov	r1, #0
   1bd84:	strd	r2, [sp]
   1bd88:	bne	1bf90 <__assert_fail@plt+0xac60>
   1bd8c:	umull	r6, r7, r6, ip
   1bd90:	mov	r0, r6
   1bd94:	mov	fp, r7
   1bd98:	cmp	r1, #0
   1bd9c:	bne	1be54 <__assert_fail@plt+0xab24>
   1bda0:	cmp	fp, #0
   1bda4:	mov	lr, r1
   1bda8:	beq	1bc04 <__assert_fail@plt+0xa8d4>
   1bdac:	umull	r6, r7, r0, ip
   1bdb0:	mov	r3, r1
   1bdb4:	mov	r2, r7
   1bdb8:	umlal	r2, r3, fp, ip
   1bdbc:	cmp	r3, #0
   1bdc0:	strd	r2, [sp, #16]
   1bdc4:	bne	1c2a8 <__assert_fail@plt+0xaf78>
   1bdc8:	mov	r2, r6
   1bdcc:	ldr	r3, [sp, #16]
   1bdd0:	b	1bc10 <__assert_fail@plt+0xa8e0>
   1bdd4:	lsr	r3, r7, #22
   1bdd8:	lsl	r7, r7, #10
   1bddc:	cmp	r3, #0
   1bde0:	lsl	r3, r6, #10
   1bde4:	orr	r7, r7, r6, lsr #22
   1bde8:	beq	1bb8c <__assert_fail@plt+0xa85c>
   1bdec:	b	1bb18 <__assert_fail@plt+0xa7e8>
   1bdf0:	asr	r3, ip, #31
   1bdf4:	mov	r2, ip
   1bdf8:	cmp	r7, #0
   1bdfc:	mov	r1, #0
   1be00:	strd	r2, [sp]
   1be04:	bne	1bf68 <__assert_fail@plt+0xac38>
   1be08:	umull	r6, r7, r6, ip
   1be0c:	mov	r2, r6
   1be10:	mov	r3, r7
   1be14:	cmp	r1, #0
   1be18:	bne	1bb18 <__assert_fail@plt+0xa7e8>
   1be1c:	cmp	r3, #0
   1be20:	mov	r7, r1
   1be24:	bne	1c0cc <__assert_fail@plt+0xad9c>
   1be28:	umull	r2, r3, r2, ip
   1be2c:	mov	r6, r2
   1be30:	mov	lr, r3
   1be34:	cmp	r7, #0
   1be38:	bne	1bb18 <__assert_fail@plt+0xa7e8>
   1be3c:	cmp	lr, #0
   1be40:	bne	1c090 <__assert_fail@plt+0xad60>
   1be44:	umull	r2, r3, r6, ip
   1be48:	mov	r0, r2
   1be4c:	mov	r2, r3
   1be50:	b	1bd60 <__assert_fail@plt+0xaa30>
   1be54:	mvn	r6, #0
   1be58:	mov	r3, #1
   1be5c:	mov	r7, r6
   1be60:	b	1bad0 <__assert_fail@plt+0xa7a0>
   1be64:	umull	sl, fp, r6, ip
   1be68:	mov	r3, lr
   1be6c:	mov	r2, fp
   1be70:	umlal	r2, r3, r7, ip
   1be74:	cmp	r3, #0
   1be78:	bne	1c270 <__assert_fail@plt+0xaf40>
   1be7c:	mov	r6, sl
   1be80:	mov	r7, r2
   1be84:	b	1bb10 <__assert_fail@plt+0xa7e0>
   1be88:	mov	r3, #2
   1be8c:	mov	ip, #1000	; 0x3e8
   1be90:	str	r3, [sp, #12]
   1be94:	b	1b904 <__assert_fail@plt+0xa5d4>
   1be98:	umull	r0, r1, r6, ip
   1be9c:	mov	r3, r7
   1bea0:	mov	r2, r1
   1bea4:	strd	r0, [sp, #16]
   1bea8:	umlal	r2, r3, lr, ip
   1beac:	cmp	r3, #0
   1beb0:	beq	1bac0 <__assert_fail@plt+0xa790>
   1beb4:	ldrd	sl, [sp]
   1beb8:	mov	r7, #1
   1bebc:	ldr	r0, [sp, #16]
   1bec0:	ldr	r3, [sp, #20]
   1bec4:	mul	r2, r6, fp
   1bec8:	mla	r2, lr, sl, r2
   1becc:	add	r2, r2, r3
   1bed0:	b	1bac0 <__assert_fail@plt+0xa790>
   1bed4:	umull	sl, fp, r2, ip
   1bed8:	mov	r1, lr
   1bedc:	mov	r0, fp
   1bee0:	umlal	r0, r1, r3, ip
   1bee4:	cmp	r1, #0
   1bee8:	bne	1c1c8 <__assert_fail@plt+0xae98>
   1beec:	mov	r6, sl
   1bef0:	mov	lr, r0
   1bef4:	b	1baa4 <__assert_fail@plt+0xa774>
   1bef8:	umull	sl, fp, r0, ip
   1befc:	mov	r7, lr
   1bf00:	mov	r6, fp
   1bf04:	umlal	r6, r7, r1, ip
   1bf08:	cmp	r7, #0
   1bf0c:	bne	1c370 <__assert_fail@plt+0xb040>
   1bf10:	mov	r2, sl
   1bf14:	mov	r3, r6
   1bf18:	b	1ba84 <__assert_fail@plt+0xa754>
   1bf1c:	umull	sl, fp, r2, ip
   1bf20:	mov	r7, lr
   1bf24:	mov	r6, fp
   1bf28:	umlal	r6, r7, r3, ip
   1bf2c:	cmp	r7, #0
   1bf30:	bne	1c200 <__assert_fail@plt+0xaed0>
   1bf34:	mov	r0, sl
   1bf38:	mov	r1, r6
   1bf3c:	b	1bc2c <__assert_fail@plt+0xa8fc>
   1bf40:	umull	sl, fp, r6, ip
   1bf44:	mov	r3, r1
   1bf48:	mov	r2, fp
   1bf4c:	umlal	r2, r3, r7, ip
   1bf50:	cmp	r3, #0
   1bf54:	strd	r2, [sp, #16]
   1bf58:	bne	1c1e4 <__assert_fail@plt+0xaeb4>
   1bf5c:	mov	r2, sl
   1bf60:	ldr	r3, [sp, #16]
   1bf64:	b	1ba10 <__assert_fail@plt+0xa6e0>
   1bf68:	umull	sl, fp, r6, ip
   1bf6c:	mov	r3, r1
   1bf70:	mov	r2, fp
   1bf74:	umlal	r2, r3, r7, ip
   1bf78:	cmp	r3, #0
   1bf7c:	strd	r2, [sp, #16]
   1bf80:	bne	1c2c4 <__assert_fail@plt+0xaf94>
   1bf84:	mov	r2, sl
   1bf88:	ldr	r3, [sp, #16]
   1bf8c:	b	1be14 <__assert_fail@plt+0xaae4>
   1bf90:	umull	sl, fp, r6, ip
   1bf94:	mov	r3, r1
   1bf98:	mov	r2, fp
   1bf9c:	umlal	r2, r3, r7, ip
   1bfa0:	cmp	r3, #0
   1bfa4:	bne	1c190 <__assert_fail@plt+0xae60>
   1bfa8:	mov	r0, sl
   1bfac:	mov	fp, r2
   1bfb0:	b	1bd98 <__assert_fail@plt+0xaa68>
   1bfb4:	umull	sl, fp, r6, ip
   1bfb8:	mov	r3, r1
   1bfbc:	mov	r2, fp
   1bfc0:	umlal	r2, r3, r7, ip
   1bfc4:	cmp	r3, #0
   1bfc8:	bne	1c254 <__assert_fail@plt+0xaf24>
   1bfcc:	mov	r0, sl
   1bfd0:	mov	fp, r2
   1bfd4:	b	1bbb8 <__assert_fail@plt+0xa888>
   1bfd8:	umull	sl, fp, r6, ip
   1bfdc:	mov	r3, r1
   1bfe0:	mov	r2, fp
   1bfe4:	umlal	r2, r3, r7, ip
   1bfe8:	cmp	r3, #0
   1bfec:	bne	1c2e0 <__assert_fail@plt+0xafb0>
   1bff0:	mov	r0, sl
   1bff4:	mov	fp, r2
   1bff8:	b	1bc84 <__assert_fail@plt+0xa954>
   1bffc:	umull	sl, fp, r6, ip
   1c000:	mov	r3, r1
   1c004:	mov	r2, fp
   1c008:	strd	sl, [sp, #16]
   1c00c:	umlal	r2, r3, r7, ip
   1c010:	cmp	r3, #0
   1c014:	bne	1c288 <__assert_fail@plt+0xaf58>
   1c018:	mov	lr, r2
   1c01c:	b	1bd40 <__assert_fail@plt+0xaa10>
   1c020:	umull	sl, fp, r6, ip
   1c024:	mov	r3, r1
   1c028:	mov	r2, fp
   1c02c:	umlal	r2, r3, r7, ip
   1c030:	cmp	r3, #0
   1c034:	strd	r2, [sp, #16]
   1c038:	bne	1c38c <__assert_fail@plt+0xb05c>
   1c03c:	mov	r2, sl
   1c040:	ldr	r3, [sp, #16]
   1c044:	b	1bce4 <__assert_fail@plt+0xa9b4>
   1c048:	umull	sl, fp, r0, ip
   1c04c:	mov	r7, lr
   1c050:	mov	r6, fp
   1c054:	umlal	r6, r7, r1, ip
   1c058:	cmp	r7, #0
   1c05c:	bne	1c3a8 <__assert_fail@plt+0xb078>
   1c060:	mov	r2, sl
   1c064:	mov	r3, r6
   1c068:	b	1ba4c <__assert_fail@plt+0xa71c>
   1c06c:	umull	r6, r7, r2, ip
   1c070:	mov	fp, r1
   1c074:	mov	sl, r7
   1c078:	umlal	sl, fp, r3, ip
   1c07c:	cmp	fp, #0
   1c080:	bne	1c21c <__assert_fail@plt+0xaeec>
   1c084:	mov	r0, r6
   1c088:	mov	r1, sl
   1c08c:	b	1ba30 <__assert_fail@plt+0xa700>
   1c090:	umull	r0, r1, r6, ip
   1c094:	mov	r3, r7
   1c098:	mov	r2, r1
   1c09c:	strd	r0, [sp, #16]
   1c0a0:	umlal	r2, r3, lr, ip
   1c0a4:	cmp	r3, #0
   1c0a8:	beq	1bd60 <__assert_fail@plt+0xaa30>
   1c0ac:	ldrd	sl, [sp]
   1c0b0:	mov	r7, #1
   1c0b4:	ldr	r0, [sp, #16]
   1c0b8:	ldr	r3, [sp, #20]
   1c0bc:	mul	r2, r6, fp
   1c0c0:	mla	r2, lr, sl, r2
   1c0c4:	add	r2, r2, r3
   1c0c8:	b	1bd60 <__assert_fail@plt+0xaa30>
   1c0cc:	umull	sl, fp, r2, ip
   1c0d0:	mov	r0, fp
   1c0d4:	umlal	r0, r1, r3, ip
   1c0d8:	cmp	r1, #0
   1c0dc:	bne	1c3c4 <__assert_fail@plt+0xb094>
   1c0e0:	mov	r6, sl
   1c0e4:	mov	lr, r0
   1c0e8:	b	1be34 <__assert_fail@plt+0xab04>
   1c0ec:	umull	r6, r7, r0, ip
   1c0f0:	mov	fp, lr
   1c0f4:	mov	sl, r7
   1c0f8:	umlal	sl, fp, r1, ip
   1c0fc:	cmp	fp, #0
   1c100:	bne	1c2fc <__assert_fail@plt+0xafcc>
   1c104:	mov	r2, r6
   1c108:	mov	r3, sl
   1c10c:	b	1bc10 <__assert_fail@plt+0xa8e0>
   1c110:	umull	r0, r1, sl, ip
   1c114:	mov	r3, r7
   1c118:	mov	r2, r1
   1c11c:	umlal	r2, r3, lr, ip
   1c120:	cmp	r3, #0
   1c124:	beq	1bd60 <__assert_fail@plt+0xaa30>
   1c128:	ldr	r3, [sp, #4]
   1c12c:	mov	r7, #1
   1c130:	mul	r2, sl, r3
   1c134:	ldr	r3, [sp]
   1c138:	mla	r2, lr, r3, r2
   1c13c:	add	r2, r2, r1
   1c140:	b	1bd60 <__assert_fail@plt+0xaa30>
   1c144:	umull	r6, r7, r0, ip
   1c148:	mov	r3, r1
   1c14c:	mov	r2, r7
   1c150:	umlal	r2, r3, fp, ip
   1c154:	cmp	r3, #0
   1c158:	strd	r2, [sp, #16]
   1c15c:	bne	1c3e0 <__assert_fail@plt+0xb0b0>
   1c160:	mov	r2, r6
   1c164:	ldr	r3, [sp, #16]
   1c168:	b	1bbd8 <__assert_fail@plt+0xa8a8>
   1c16c:	umull	sl, fp, r2, ip
   1c170:	mov	r7, lr
   1c174:	mov	r6, fp
   1c178:	umlal	r6, r7, r3, ip
   1c17c:	cmp	r7, #0
   1c180:	bne	1c1ac <__assert_fail@plt+0xae7c>
   1c184:	mov	r0, sl
   1c188:	mov	r1, r6
   1c18c:	b	1bbf4 <__assert_fail@plt+0xa8c4>
   1c190:	ldrd	r2, [sp]
   1c194:	mov	r0, sl
   1c198:	mov	r1, #1
   1c19c:	mul	r6, r6, r3
   1c1a0:	mla	r7, r2, r7, r6
   1c1a4:	add	fp, r7, fp
   1c1a8:	b	1bd98 <__assert_fail@plt+0xaa68>
   1c1ac:	ldrd	r6, [sp]
   1c1b0:	mov	r0, sl
   1c1b4:	mov	lr, #1
   1c1b8:	mul	r2, r2, r7
   1c1bc:	mla	r1, r3, r6, r2
   1c1c0:	add	r1, r1, fp
   1c1c4:	b	1bbf4 <__assert_fail@plt+0xa8c4>
   1c1c8:	ldrd	r0, [sp]
   1c1cc:	mov	r6, sl
   1c1d0:	mov	r7, #1
   1c1d4:	mul	r2, r2, r1
   1c1d8:	mla	lr, r3, r0, r2
   1c1dc:	add	lr, lr, fp
   1c1e0:	b	1baa4 <__assert_fail@plt+0xa774>
   1c1e4:	ldm	sp, {r0, r3}
   1c1e8:	mov	r2, sl
   1c1ec:	mov	r1, #1
   1c1f0:	mul	r3, r6, r3
   1c1f4:	mla	r3, r0, r7, r3
   1c1f8:	add	r3, r3, fp
   1c1fc:	b	1ba10 <__assert_fail@plt+0xa6e0>
   1c200:	ldrd	r6, [sp]
   1c204:	mov	r0, sl
   1c208:	mov	lr, #1
   1c20c:	mul	r2, r2, r7
   1c210:	mla	r1, r3, r6, r2
   1c214:	add	r1, r1, fp
   1c218:	b	1bc2c <__assert_fail@plt+0xa8fc>
   1c21c:	ldrd	sl, [sp]
   1c220:	mov	r0, r6
   1c224:	mov	lr, #1
   1c228:	mul	r2, r2, fp
   1c22c:	mla	r1, r3, sl, r2
   1c230:	add	r1, r1, r7
   1c234:	b	1ba30 <__assert_fail@plt+0xa700>
   1c238:	ldm	sp, {r1, r3}
   1c23c:	mov	r2, r6
   1c240:	mov	lr, #1
   1c244:	mul	r3, r0, r3
   1c248:	mla	r3, fp, r1, r3
   1c24c:	add	r3, r3, r7
   1c250:	b	1ba84 <__assert_fail@plt+0xa754>
   1c254:	ldrd	r2, [sp]
   1c258:	mov	r0, sl
   1c25c:	mov	r1, #1
   1c260:	mul	r6, r6, r3
   1c264:	mla	r7, r2, r7, r6
   1c268:	add	fp, r7, fp
   1c26c:	b	1bbb8 <__assert_fail@plt+0xa888>
   1c270:	mul	r3, r6, r1
   1c274:	mov	lr, #1
   1c278:	mov	r6, sl
   1c27c:	mla	r7, ip, r7, r3
   1c280:	add	r7, r7, fp
   1c284:	b	1bb10 <__assert_fail@plt+0xa7e0>
   1c288:	ldrd	r2, [sp]
   1c28c:	mov	r1, #1
   1c290:	ldr	sl, [sp, #16]
   1c294:	mul	lr, r6, r3
   1c298:	ldr	r3, [sp, #20]
   1c29c:	mla	lr, r2, r7, lr
   1c2a0:	add	lr, lr, r3
   1c2a4:	b	1bd40 <__assert_fail@plt+0xaa10>
   1c2a8:	ldm	sp, {r1, r3}
   1c2ac:	mov	r2, r6
   1c2b0:	mov	lr, #1
   1c2b4:	mul	r3, r0, r3
   1c2b8:	mla	r3, fp, r1, r3
   1c2bc:	add	r3, r3, r7
   1c2c0:	b	1bc10 <__assert_fail@plt+0xa8e0>
   1c2c4:	ldm	sp, {r0, r3}
   1c2c8:	mov	r2, sl
   1c2cc:	mov	r1, #1
   1c2d0:	mul	r3, r6, r3
   1c2d4:	mla	r3, r0, r7, r3
   1c2d8:	add	r3, r3, fp
   1c2dc:	b	1be14 <__assert_fail@plt+0xaae4>
   1c2e0:	ldrd	r2, [sp]
   1c2e4:	mov	r0, sl
   1c2e8:	mov	r1, #1
   1c2ec:	mul	r6, r6, r3
   1c2f0:	mla	r7, r2, r7, r6
   1c2f4:	add	fp, r7, fp
   1c2f8:	b	1bc84 <__assert_fail@plt+0xa954>
   1c2fc:	ldrd	sl, [sp]
   1c300:	mov	r2, r6
   1c304:	mov	lr, #1
   1c308:	mul	r3, r0, fp
   1c30c:	mla	r3, r1, sl, r3
   1c310:	add	r3, r3, r7
   1c314:	b	1bc10 <__assert_fail@plt+0xa8e0>
   1c318:	ldrd	sl, [sp]
   1c31c:	mov	r0, r6
   1c320:	mov	lr, #1
   1c324:	mul	r2, r2, fp
   1c328:	mla	r1, r3, sl, r2
   1c32c:	add	r1, r1, r7
   1c330:	b	1ba68 <__assert_fail@plt+0xa738>
   1c334:	movw	r3, #58036	; 0xe2b4
   1c338:	movt	r3, #1
   1c33c:	movw	r1, #58048	; 0xe2c0
   1c340:	movt	r1, #1
   1c344:	movw	r0, #58064	; 0xe2d0
   1c348:	movt	r0, #1
   1c34c:	mov	r2, #85	; 0x55
   1c350:	bl	11330 <__assert_fail@plt>
   1c354:	ldrd	sl, [sp]
   1c358:	mov	r2, r6
   1c35c:	mov	lr, #1
   1c360:	mul	r3, r0, fp
   1c364:	mla	r3, r1, sl, r3
   1c368:	add	r3, r3, r7
   1c36c:	b	1ba84 <__assert_fail@plt+0xa754>
   1c370:	ldrd	r6, [sp]
   1c374:	mov	r2, sl
   1c378:	mov	lr, #1
   1c37c:	mul	r3, r0, r7
   1c380:	mla	r3, r1, r6, r3
   1c384:	add	r3, r3, fp
   1c388:	b	1ba84 <__assert_fail@plt+0xa754>
   1c38c:	ldm	sp, {r0, r3}
   1c390:	mov	r2, sl
   1c394:	mov	r1, #1
   1c398:	mul	r3, r6, r3
   1c39c:	mla	r3, r0, r7, r3
   1c3a0:	add	r3, r3, fp
   1c3a4:	b	1bce4 <__assert_fail@plt+0xa9b4>
   1c3a8:	ldrd	r6, [sp]
   1c3ac:	mov	r2, sl
   1c3b0:	mov	lr, #1
   1c3b4:	mul	r3, r0, r7
   1c3b8:	mla	r3, r1, r6, r3
   1c3bc:	add	r3, r3, fp
   1c3c0:	b	1ba4c <__assert_fail@plt+0xa71c>
   1c3c4:	ldrd	r0, [sp]
   1c3c8:	mov	r6, sl
   1c3cc:	mov	r7, #1
   1c3d0:	mul	r2, r2, r1
   1c3d4:	mla	lr, r3, r0, r2
   1c3d8:	add	lr, lr, fp
   1c3dc:	b	1be34 <__assert_fail@plt+0xab04>
   1c3e0:	ldm	sp, {r1, r3}
   1c3e4:	mov	r2, r6
   1c3e8:	mov	lr, #1
   1c3ec:	mul	r3, r0, r3
   1c3f0:	mla	r3, fp, r1, r3
   1c3f4:	add	r3, r3, r7
   1c3f8:	b	1bbd8 <__assert_fail@plt+0xa8a8>
   1c3fc:	cmp	r1, #0
   1c400:	cmpne	r0, #0
   1c404:	beq	1c450 <__assert_fail@plt+0xb120>
   1c408:	strd	r4, [sp, #-16]!
   1c40c:	umull	r4, r5, r0, r1
   1c410:	str	r6, [sp, #8]
   1c414:	str	lr, [sp, #12]
   1c418:	adds	r3, r5, #0
   1c41c:	movne	r3, #1
   1c420:	cmp	r4, #0
   1c424:	blt	1c430 <__assert_fail@plt+0xb100>
   1c428:	cmp	r3, #0
   1c42c:	beq	1c45c <__assert_fail@plt+0xb12c>
   1c430:	bl	111ec <__errno_location@plt>
   1c434:	mov	r3, #12
   1c438:	ldrd	r4, [sp]
   1c43c:	ldr	r6, [sp, #8]
   1c440:	add	sp, sp, #12
   1c444:	str	r3, [r0]
   1c448:	mov	r0, #0
   1c44c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c450:	mov	r1, #1
   1c454:	mov	r0, r1
   1c458:	b	10ff4 <calloc@plt>
   1c45c:	ldrd	r4, [sp]
   1c460:	ldr	r6, [sp, #8]
   1c464:	ldr	lr, [sp, #12]
   1c468:	add	sp, sp, #16
   1c46c:	b	10ff4 <calloc@plt>
   1c470:	cmp	r0, #0
   1c474:	beq	1c480 <__assert_fail@plt+0xb150>
   1c478:	blt	1c488 <__assert_fail@plt+0xb158>
   1c47c:	b	11168 <malloc@plt>
   1c480:	mov	r0, #1
   1c484:	b	11168 <malloc@plt>
   1c488:	str	r4, [sp, #-8]!
   1c48c:	str	lr, [sp, #4]
   1c490:	bl	111ec <__errno_location@plt>
   1c494:	mov	r3, #12
   1c498:	ldr	r4, [sp]
   1c49c:	add	sp, sp, #4
   1c4a0:	str	r3, [r0]
   1c4a4:	mov	r0, #0
   1c4a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c4ac:	cmp	r0, #0
   1c4b0:	beq	1c4d8 <__assert_fail@plt+0xb1a8>
   1c4b4:	cmp	r1, #0
   1c4b8:	str	r4, [sp, #-8]!
   1c4bc:	str	lr, [sp, #4]
   1c4c0:	beq	1c4e0 <__assert_fail@plt+0xb1b0>
   1c4c4:	blt	1c4f4 <__assert_fail@plt+0xb1c4>
   1c4c8:	ldr	r4, [sp]
   1c4cc:	ldr	lr, [sp, #4]
   1c4d0:	add	sp, sp, #8
   1c4d4:	b	110cc <realloc@plt>
   1c4d8:	mov	r0, r1
   1c4dc:	b	1c470 <__assert_fail@plt+0xb140>
   1c4e0:	bl	12d1c <__assert_fail@plt+0x19ec>
   1c4e4:	ldr	r4, [sp]
   1c4e8:	add	sp, sp, #4
   1c4ec:	mov	r0, #0
   1c4f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c4f4:	bl	111ec <__errno_location@plt>
   1c4f8:	mov	r3, #12
   1c4fc:	str	r3, [r0]
   1c500:	b	1c4e4 <__assert_fail@plt+0xb1b4>
   1c504:	strd	r4, [sp, #-16]!
   1c508:	mov	r4, r0
   1c50c:	str	r6, [sp, #8]
   1c510:	str	lr, [sp, #12]
   1c514:	bl	11138 <__fpending@plt>
   1c518:	ldr	r5, [r4]
   1c51c:	mov	r6, r0
   1c520:	mov	r0, r4
   1c524:	bl	1c6ac <__assert_fail@plt+0xb37c>
   1c528:	mov	r4, r0
   1c52c:	and	r5, r5, #32
   1c530:	cmp	r5, #0
   1c534:	bne	1c56c <__assert_fail@plt+0xb23c>
   1c538:	cmp	r0, #0
   1c53c:	beq	1c558 <__assert_fail@plt+0xb228>
   1c540:	cmp	r6, #0
   1c544:	bne	1c584 <__assert_fail@plt+0xb254>
   1c548:	bl	111ec <__errno_location@plt>
   1c54c:	ldr	r4, [r0]
   1c550:	subs	r4, r4, #9
   1c554:	mvnne	r4, #0
   1c558:	mov	r0, r4
   1c55c:	ldrd	r4, [sp]
   1c560:	ldr	r6, [sp, #8]
   1c564:	add	sp, sp, #12
   1c568:	pop	{pc}		; (ldr pc, [sp], #4)
   1c56c:	cmp	r0, #0
   1c570:	bne	1c584 <__assert_fail@plt+0xb254>
   1c574:	bl	111ec <__errno_location@plt>
   1c578:	str	r4, [r0]
   1c57c:	mvn	r4, #0
   1c580:	b	1c558 <__assert_fail@plt+0xb228>
   1c584:	mvn	r4, #0
   1c588:	b	1c558 <__assert_fail@plt+0xb228>
   1c58c:	movw	r3, #62998	; 0xf616
   1c590:	movt	r3, #149	; 0x95
   1c594:	strd	r4, [sp, #-8]!
   1c598:	mov	r4, #0
   1c59c:	mov	r5, #0
   1c5a0:	strd	r4, [r0, #16]
   1c5a4:	str	r3, [r0, #24]
   1c5a8:	ldrd	r4, [sp]
   1c5ac:	add	sp, sp, #8
   1c5b0:	bx	lr
   1c5b4:	ldr	r2, [r0, #24]
   1c5b8:	movw	r3, #62998	; 0xf616
   1c5bc:	movt	r3, #149	; 0x95
   1c5c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c5c4:	strd	r6, [sp, #8]
   1c5c8:	strd	r8, [sp, #16]
   1c5cc:	strd	sl, [sp, #24]
   1c5d0:	cmp	r2, r3
   1c5d4:	str	lr, [sp, #32]
   1c5d8:	sub	sp, sp, #4
   1c5dc:	bne	1c68c <__assert_fail@plt+0xb35c>
   1c5e0:	ldrd	r6, [r0, #16]
   1c5e4:	ldrd	sl, [r1, #96]	; 0x60
   1c5e8:	orrs	r3, r6, r7
   1c5ec:	beq	1c640 <__assert_fail@plt+0xb310>
   1c5f0:	ldrd	r2, [r0]
   1c5f4:	cmp	r3, fp
   1c5f8:	cmpeq	r2, sl
   1c5fc:	beq	1c660 <__assert_fail@plt+0xb330>
   1c600:	adds	r8, r6, #1
   1c604:	adc	r9, r7, #0
   1c608:	and	r2, r6, r8
   1c60c:	and	r3, r7, r9
   1c610:	orrs	r3, r2, r3
   1c614:	strd	r8, [r0, #16]
   1c618:	movne	r1, #0
   1c61c:	beq	1c67c <__assert_fail@plt+0xb34c>
   1c620:	mov	r0, r1
   1c624:	add	sp, sp, #4
   1c628:	ldrd	r4, [sp]
   1c62c:	ldrd	r6, [sp, #8]
   1c630:	ldrd	r8, [sp, #16]
   1c634:	ldrd	sl, [sp, #24]
   1c638:	add	sp, sp, #32
   1c63c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c640:	mov	r2, #1
   1c644:	mov	r3, #0
   1c648:	strd	r2, [r0, #16]
   1c64c:	ldrd	r2, [r1]
   1c650:	mov	r1, #0
   1c654:	strd	sl, [r0]
   1c658:	strd	r2, [r0, #8]
   1c65c:	b	1c620 <__assert_fail@plt+0xb2f0>
   1c660:	ldrd	r4, [r1]
   1c664:	ldrd	r2, [r0, #8]
   1c668:	cmp	r5, r3
   1c66c:	cmpeq	r4, r2
   1c670:	bne	1c600 <__assert_fail@plt+0xb2d0>
   1c674:	mov	r1, #1
   1c678:	b	1c620 <__assert_fail@plt+0xb2f0>
   1c67c:	orrs	r3, r8, r9
   1c680:	bne	1c64c <__assert_fail@plt+0xb31c>
   1c684:	mov	r1, #1
   1c688:	b	1c620 <__assert_fail@plt+0xb2f0>
   1c68c:	movw	r3, #58104	; 0xe2f8
   1c690:	movt	r3, #1
   1c694:	movw	r1, #58116	; 0xe304
   1c698:	movt	r1, #1
   1c69c:	movw	r0, #58136	; 0xe318
   1c6a0:	movt	r0, #1
   1c6a4:	mov	r2, #60	; 0x3c
   1c6a8:	bl	11330 <__assert_fail@plt>
   1c6ac:	strd	r4, [sp, #-12]!
   1c6b0:	mov	r4, r0
   1c6b4:	str	lr, [sp, #8]
   1c6b8:	sub	sp, sp, #12
   1c6bc:	bl	1121c <fileno@plt>
   1c6c0:	cmp	r0, #0
   1c6c4:	mov	r0, r4
   1c6c8:	blt	1c74c <__assert_fail@plt+0xb41c>
   1c6cc:	bl	11180 <__freading@plt>
   1c6d0:	cmp	r0, #0
   1c6d4:	bne	1c718 <__assert_fail@plt+0xb3e8>
   1c6d8:	mov	r0, r4
   1c6dc:	bl	1c988 <__assert_fail@plt+0xb658>
   1c6e0:	cmp	r0, #0
   1c6e4:	beq	1c748 <__assert_fail@plt+0xb418>
   1c6e8:	bl	111ec <__errno_location@plt>
   1c6ec:	mov	r5, r0
   1c6f0:	mov	r0, r4
   1c6f4:	ldr	r4, [r5]
   1c6f8:	bl	11234 <fclose@plt>
   1c6fc:	cmp	r4, #0
   1c700:	mvnne	r0, #0
   1c704:	strne	r4, [r5]
   1c708:	add	sp, sp, #12
   1c70c:	ldrd	r4, [sp]
   1c710:	add	sp, sp, #8
   1c714:	pop	{pc}		; (ldr pc, [sp], #4)
   1c718:	mov	r0, r4
   1c71c:	bl	1121c <fileno@plt>
   1c720:	mov	r1, #1
   1c724:	mov	r2, #0
   1c728:	mov	r3, #0
   1c72c:	str	r1, [sp]
   1c730:	bl	11114 <lseek64@plt>
   1c734:	mvn	r3, #0
   1c738:	mvn	r2, #0
   1c73c:	cmp	r1, r3
   1c740:	cmpeq	r0, r2
   1c744:	bne	1c6d8 <__assert_fail@plt+0xb3a8>
   1c748:	mov	r0, r4
   1c74c:	add	sp, sp, #12
   1c750:	ldrd	r4, [sp]
   1c754:	ldr	lr, [sp, #8]
   1c758:	add	sp, sp, #12
   1c75c:	b	11234 <fclose@plt>
   1c760:	push	{r1, r2, r3}
   1c764:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c768:	strd	r6, [sp, #8]
   1c76c:	str	lr, [sp, #16]
   1c770:	sub	sp, sp, #8
   1c774:	ldr	r1, [sp, #28]
   1c778:	add	r2, sp, #32
   1c77c:	str	r2, [sp, #4]
   1c780:	cmp	r1, #0
   1c784:	beq	1c860 <__assert_fail@plt+0xb530>
   1c788:	movw	r3, #1030	; 0x406
   1c78c:	mov	r6, r0
   1c790:	cmp	r1, r3
   1c794:	beq	1c870 <__assert_fail@plt+0xb540>
   1c798:	cmp	r1, #11
   1c79c:	beq	1c818 <__assert_fail@plt+0xb4e8>
   1c7a0:	ble	1c7f8 <__assert_fail@plt+0xb4c8>
   1c7a4:	movw	r2, #1031	; 0x407
   1c7a8:	cmp	r1, r2
   1c7ac:	bgt	1c834 <__assert_fail@plt+0xb504>
   1c7b0:	cmp	r1, r3
   1c7b4:	bge	1c7c4 <__assert_fail@plt+0xb494>
   1c7b8:	movw	r3, #1025	; 0x401
   1c7bc:	cmp	r1, r3
   1c7c0:	beq	1c818 <__assert_fail@plt+0xb4e8>
   1c7c4:	ldr	r3, [sp, #4]
   1c7c8:	mov	r0, r6
   1c7cc:	ldr	r2, [r3]
   1c7d0:	bl	1124c <fcntl64@plt>
   1c7d4:	mov	r4, r0
   1c7d8:	mov	r0, r4
   1c7dc:	add	sp, sp, #8
   1c7e0:	ldrd	r4, [sp]
   1c7e4:	ldrd	r6, [sp, #8]
   1c7e8:	ldr	lr, [sp, #16]
   1c7ec:	add	sp, sp, #20
   1c7f0:	add	sp, sp, #12
   1c7f4:	bx	lr
   1c7f8:	cmp	r1, #4
   1c7fc:	beq	1c7c4 <__assert_fail@plt+0xb494>
   1c800:	bgt	1c828 <__assert_fail@plt+0xb4f8>
   1c804:	cmp	r1, #2
   1c808:	beq	1c7c4 <__assert_fail@plt+0xb494>
   1c80c:	bgt	1c818 <__assert_fail@plt+0xb4e8>
   1c810:	cmp	r1, #1
   1c814:	bne	1c7c4 <__assert_fail@plt+0xb494>
   1c818:	mov	r0, r6
   1c81c:	bl	1124c <fcntl64@plt>
   1c820:	mov	r4, r0
   1c824:	b	1c7d8 <__assert_fail@plt+0xb4a8>
   1c828:	cmp	r1, #9
   1c82c:	bne	1c7c4 <__assert_fail@plt+0xb494>
   1c830:	b	1c818 <__assert_fail@plt+0xb4e8>
   1c834:	movw	r3, #1033	; 0x409
   1c838:	cmp	r1, r3
   1c83c:	beq	1c7c4 <__assert_fail@plt+0xb494>
   1c840:	blt	1c818 <__assert_fail@plt+0xb4e8>
   1c844:	movw	r3, #1034	; 0x40a
   1c848:	cmp	r1, r3
   1c84c:	bne	1c7c4 <__assert_fail@plt+0xb494>
   1c850:	mov	r0, r6
   1c854:	bl	1124c <fcntl64@plt>
   1c858:	mov	r4, r0
   1c85c:	b	1c7d8 <__assert_fail@plt+0xb4a8>
   1c860:	ldr	r2, [sp, #32]
   1c864:	bl	1124c <fcntl64@plt>
   1c868:	mov	r4, r0
   1c86c:	b	1c7d8 <__assert_fail@plt+0xb4a8>
   1c870:	movw	r5, #62196	; 0xf2f4
   1c874:	movt	r5, #2
   1c878:	ldr	r7, [r2]
   1c87c:	add	r2, sp, #36	; 0x24
   1c880:	ldr	r3, [r5]
   1c884:	str	r2, [sp, #4]
   1c888:	mov	r2, r7
   1c88c:	cmp	r3, #0
   1c890:	blt	1c8ac <__assert_fail@plt+0xb57c>
   1c894:	bl	1124c <fcntl64@plt>
   1c898:	subs	r4, r0, #0
   1c89c:	blt	1c914 <__assert_fail@plt+0xb5e4>
   1c8a0:	mov	r3, #1
   1c8a4:	str	r3, [r5]
   1c8a8:	b	1c7d8 <__assert_fail@plt+0xb4a8>
   1c8ac:	mov	r1, #0
   1c8b0:	bl	1124c <fcntl64@plt>
   1c8b4:	subs	r4, r0, #0
   1c8b8:	blt	1c7d8 <__assert_fail@plt+0xb4a8>
   1c8bc:	ldr	r3, [r5]
   1c8c0:	cmn	r3, #1
   1c8c4:	bne	1c7d8 <__assert_fail@plt+0xb4a8>
   1c8c8:	mov	r1, #1
   1c8cc:	mov	r0, r4
   1c8d0:	bl	1124c <fcntl64@plt>
   1c8d4:	subs	r2, r0, #0
   1c8d8:	blt	1c8f4 <__assert_fail@plt+0xb5c4>
   1c8dc:	orr	r2, r2, #1
   1c8e0:	mov	r1, #2
   1c8e4:	mov	r0, r4
   1c8e8:	bl	1124c <fcntl64@plt>
   1c8ec:	cmn	r0, #1
   1c8f0:	bne	1c7d8 <__assert_fail@plt+0xb4a8>
   1c8f4:	bl	111ec <__errno_location@plt>
   1c8f8:	mov	r5, r0
   1c8fc:	mov	r0, r4
   1c900:	ldr	r6, [r5]
   1c904:	mvn	r4, #0
   1c908:	bl	112f4 <close@plt>
   1c90c:	str	r6, [r5]
   1c910:	b	1c7d8 <__assert_fail@plt+0xb4a8>
   1c914:	bl	111ec <__errno_location@plt>
   1c918:	ldr	r3, [r0]
   1c91c:	cmp	r3, #22
   1c920:	bne	1c8a0 <__assert_fail@plt+0xb570>
   1c924:	mov	r2, r7
   1c928:	mov	r0, r6
   1c92c:	mov	r1, #0
   1c930:	bl	1124c <fcntl64@plt>
   1c934:	subs	r4, r0, #0
   1c938:	mvnge	r3, #0
   1c93c:	strge	r3, [r5]
   1c940:	bge	1c8c8 <__assert_fail@plt+0xb598>
   1c944:	b	1c7d8 <__assert_fail@plt+0xb4a8>
   1c948:	push	{r1, r2, r3}
   1c94c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c950:	sub	sp, sp, #8
   1c954:	ldr	r1, [sp, #12]
   1c958:	ands	r2, r1, #64	; 0x40
   1c95c:	bne	1c978 <__assert_fail@plt+0xb648>
   1c960:	bl	1115c <open64@plt>
   1c964:	bl	1a878 <__assert_fail@plt+0x9548>
   1c968:	add	sp, sp, #8
   1c96c:	pop	{lr}		; (ldr lr, [sp], #4)
   1c970:	add	sp, sp, #12
   1c974:	bx	lr
   1c978:	add	r3, sp, #16
   1c97c:	ldr	r2, [sp, #16]
   1c980:	str	r3, [sp, #4]
   1c984:	b	1c960 <__assert_fail@plt+0xb630>
   1c988:	str	r4, [sp, #-8]!
   1c98c:	subs	r4, r0, #0
   1c990:	str	lr, [sp, #4]
   1c994:	sub	sp, sp, #8
   1c998:	beq	1c9b4 <__assert_fail@plt+0xb684>
   1c99c:	bl	11180 <__freading@plt>
   1c9a0:	cmp	r0, #0
   1c9a4:	beq	1c9b4 <__assert_fail@plt+0xb684>
   1c9a8:	ldr	r3, [r4]
   1c9ac:	tst	r3, #256	; 0x100
   1c9b0:	bne	1c9cc <__assert_fail@plt+0xb69c>
   1c9b4:	mov	r0, r4
   1c9b8:	add	sp, sp, #8
   1c9bc:	ldr	r4, [sp]
   1c9c0:	ldr	lr, [sp, #4]
   1c9c4:	add	sp, sp, #8
   1c9c8:	b	1103c <fflush@plt>
   1c9cc:	mov	r1, #1
   1c9d0:	mov	r2, #0
   1c9d4:	mov	r3, #0
   1c9d8:	mov	r0, r4
   1c9dc:	str	r1, [sp]
   1c9e0:	bl	1c9e8 <__assert_fail@plt+0xb6b8>
   1c9e4:	b	1c9b4 <__assert_fail@plt+0xb684>
   1c9e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c9ec:	mov	r4, r0
   1c9f0:	ldr	ip, [r0, #4]
   1c9f4:	strd	r6, [sp, #8]
   1c9f8:	str	lr, [sp, #20]
   1c9fc:	ldr	lr, [r0, #8]
   1ca00:	str	r8, [sp, #16]
   1ca04:	sub	sp, sp, #8
   1ca08:	ldr	r5, [sp, #32]
   1ca0c:	cmp	lr, ip
   1ca10:	beq	1ca38 <__assert_fail@plt+0xb708>
   1ca14:	mov	r0, r4
   1ca18:	str	r5, [sp, #32]
   1ca1c:	add	sp, sp, #8
   1ca20:	ldrd	r4, [sp]
   1ca24:	ldrd	r6, [sp, #8]
   1ca28:	ldr	r8, [sp, #16]
   1ca2c:	ldr	lr, [sp, #20]
   1ca30:	add	sp, sp, #24
   1ca34:	b	11240 <fseeko64@plt>
   1ca38:	ldr	ip, [r0, #16]
   1ca3c:	ldr	lr, [r0, #20]
   1ca40:	cmp	lr, ip
   1ca44:	bne	1ca14 <__assert_fail@plt+0xb6e4>
   1ca48:	ldr	r8, [r0, #36]	; 0x24
   1ca4c:	cmp	r8, #0
   1ca50:	bne	1ca14 <__assert_fail@plt+0xb6e4>
   1ca54:	mov	r6, r2
   1ca58:	mov	r7, r3
   1ca5c:	bl	1121c <fileno@plt>
   1ca60:	mov	r2, r6
   1ca64:	mov	r3, r7
   1ca68:	str	r5, [sp]
   1ca6c:	bl	11114 <lseek64@plt>
   1ca70:	mvn	r3, #0
   1ca74:	mvn	r2, #0
   1ca78:	cmp	r1, r3
   1ca7c:	cmpeq	r0, r2
   1ca80:	beq	1cab0 <__assert_fail@plt+0xb780>
   1ca84:	ldr	r3, [r4]
   1ca88:	strd	r0, [r4, #80]	; 0x50
   1ca8c:	bic	r3, r3, #16
   1ca90:	str	r3, [r4]
   1ca94:	mov	r0, r8
   1ca98:	add	sp, sp, #8
   1ca9c:	ldrd	r4, [sp]
   1caa0:	ldrd	r6, [sp, #8]
   1caa4:	ldr	r8, [sp, #16]
   1caa8:	add	sp, sp, #20
   1caac:	pop	{pc}		; (ldr pc, [sp], #4)
   1cab0:	mvn	r8, #0
   1cab4:	b	1ca94 <__assert_fail@plt+0xb764>
   1cab8:	mov	r0, #14
   1cabc:	str	r4, [sp, #-8]!
   1cac0:	str	lr, [sp, #4]
   1cac4:	bl	11270 <nl_langinfo@plt>
   1cac8:	cmp	r0, #0
   1cacc:	beq	1caf0 <__assert_fail@plt+0xb7c0>
   1cad0:	ldrb	r2, [r0]
   1cad4:	movw	r3, #58160	; 0xe330
   1cad8:	movt	r3, #1
   1cadc:	ldr	r4, [sp]
   1cae0:	add	sp, sp, #4
   1cae4:	cmp	r2, #0
   1cae8:	moveq	r0, r3
   1caec:	pop	{pc}		; (ldr pc, [sp], #4)
   1caf0:	ldr	r4, [sp]
   1caf4:	add	sp, sp, #4
   1caf8:	movw	r0, #58160	; 0xe330
   1cafc:	movt	r0, #1
   1cb00:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb04:	strd	r4, [sp, #-20]!	; 0xffffffec
   1cb08:	mov	r5, r2
   1cb0c:	strd	r6, [sp, #8]
   1cb10:	subs	r6, r0, #0
   1cb14:	mov	r7, r1
   1cb18:	str	lr, [sp, #16]
   1cb1c:	sub	sp, sp, #12
   1cb20:	addeq	r6, sp, #4
   1cb24:	mov	r0, r6
   1cb28:	bl	11144 <mbrtowc@plt>
   1cb2c:	cmp	r5, #0
   1cb30:	cmnne	r0, #3
   1cb34:	mov	r4, r0
   1cb38:	bhi	1cb54 <__assert_fail@plt+0xb824>
   1cb3c:	mov	r0, r4
   1cb40:	add	sp, sp, #12
   1cb44:	ldrd	r4, [sp]
   1cb48:	ldrd	r6, [sp, #8]
   1cb4c:	add	sp, sp, #16
   1cb50:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb54:	mov	r0, #0
   1cb58:	bl	1cbb8 <__assert_fail@plt+0xb888>
   1cb5c:	cmp	r0, #0
   1cb60:	bne	1cb3c <__assert_fail@plt+0xb80c>
   1cb64:	ldrb	r3, [r7]
   1cb68:	mov	r4, #1
   1cb6c:	str	r3, [r6]
   1cb70:	b	1cb3c <__assert_fail@plt+0xb80c>
   1cb74:	umull	r2, r3, r1, r2
   1cb78:	cmp	r3, #0
   1cb7c:	bne	1cb88 <__assert_fail@plt+0xb858>
   1cb80:	mov	r1, r2
   1cb84:	b	1c4ac <__assert_fail@plt+0xb17c>
   1cb88:	str	r4, [sp, #-8]!
   1cb8c:	str	lr, [sp, #4]
   1cb90:	bl	111ec <__errno_location@plt>
   1cb94:	mov	r3, #12
   1cb98:	ldr	r4, [sp]
   1cb9c:	add	sp, sp, #4
   1cba0:	str	r3, [r0]
   1cba4:	mov	r0, #0
   1cba8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cbac:	mov	r2, #3
   1cbb0:	mov	r1, #0
   1cbb4:	b	1c760 <__assert_fail@plt+0xb430>
   1cbb8:	push	{lr}		; (str lr, [sp, #-4]!)
   1cbbc:	sub	sp, sp, #268	; 0x10c
   1cbc0:	movw	r2, #257	; 0x101
   1cbc4:	add	r1, sp, #4
   1cbc8:	bl	1cc10 <__assert_fail@plt+0xb8e0>
   1cbcc:	cmp	r0, #0
   1cbd0:	movne	r0, #0
   1cbd4:	bne	1cc08 <__assert_fail@plt+0xb8d8>
   1cbd8:	movw	r1, #58168	; 0xe338
   1cbdc:	movt	r1, #1
   1cbe0:	add	r0, sp, #4
   1cbe4:	bl	11024 <strcmp@plt>
   1cbe8:	cmp	r0, #0
   1cbec:	beq	1cc08 <__assert_fail@plt+0xb8d8>
   1cbf0:	add	r0, sp, #4
   1cbf4:	movw	r1, #58172	; 0xe33c
   1cbf8:	movt	r1, #1
   1cbfc:	bl	11024 <strcmp@plt>
   1cc00:	adds	r0, r0, #0
   1cc04:	movne	r0, #1
   1cc08:	add	sp, sp, #268	; 0x10c
   1cc0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc10:	strd	r4, [sp, #-16]!
   1cc14:	mov	r5, r1
   1cc18:	mov	r1, #0
   1cc1c:	mov	r4, r2
   1cc20:	str	r6, [sp, #8]
   1cc24:	str	lr, [sp, #12]
   1cc28:	bl	11258 <setlocale@plt>
   1cc2c:	subs	r6, r0, #0
   1cc30:	beq	1ccb0 <__assert_fail@plt+0xb980>
   1cc34:	bl	111bc <strlen@plt>
   1cc38:	cmp	r4, r0
   1cc3c:	bhi	1cc5c <__assert_fail@plt+0xb92c>
   1cc40:	cmp	r4, #0
   1cc44:	moveq	r0, #34	; 0x22
   1cc48:	bne	1cc80 <__assert_fail@plt+0xb950>
   1cc4c:	ldrd	r4, [sp]
   1cc50:	ldr	r6, [sp, #8]
   1cc54:	add	sp, sp, #12
   1cc58:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc5c:	add	r2, r0, #1
   1cc60:	mov	r1, r6
   1cc64:	mov	r0, r5
   1cc68:	bl	11078 <memcpy@plt>
   1cc6c:	ldrd	r4, [sp]
   1cc70:	mov	r0, #0
   1cc74:	ldr	r6, [sp, #8]
   1cc78:	add	sp, sp, #12
   1cc7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc80:	sub	r4, r4, #1
   1cc84:	mov	r1, r6
   1cc88:	mov	r2, r4
   1cc8c:	mov	r0, r5
   1cc90:	bl	11078 <memcpy@plt>
   1cc94:	mov	r3, #0
   1cc98:	mov	r0, #34	; 0x22
   1cc9c:	strb	r3, [r5, r4]
   1cca0:	ldrd	r4, [sp]
   1cca4:	ldr	r6, [sp, #8]
   1cca8:	add	sp, sp, #12
   1ccac:	pop	{pc}		; (ldr pc, [sp], #4)
   1ccb0:	cmp	r4, #0
   1ccb4:	mov	r0, #22
   1ccb8:	strbne	r6, [r5]
   1ccbc:	ldrd	r4, [sp]
   1ccc0:	ldr	r6, [sp, #8]
   1ccc4:	add	sp, sp, #12
   1ccc8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cccc:	mov	r1, #0
   1ccd0:	b	11258 <setlocale@plt>
   1ccd4:	cmp	r3, #0
   1ccd8:	cmpeq	r2, #0
   1ccdc:	bne	1ccf4 <__assert_fail@plt+0xb9c4>
   1cce0:	cmp	r1, #0
   1cce4:	cmpeq	r0, #0
   1cce8:	mvnne	r1, #0
   1ccec:	mvnne	r0, #0
   1ccf0:	b	1cd10 <__assert_fail@plt+0xb9e0>
   1ccf4:	sub	sp, sp, #8
   1ccf8:	push	{sp, lr}
   1ccfc:	bl	1cd20 <__assert_fail@plt+0xb9f0>
   1cd00:	ldr	lr, [sp, #4]
   1cd04:	add	sp, sp, #8
   1cd08:	pop	{r2, r3}
   1cd0c:	bx	lr
   1cd10:	push	{r1, lr}
   1cd14:	mov	r0, #8
   1cd18:	bl	11018 <raise@plt>
   1cd1c:	pop	{r1, pc}
   1cd20:	cmp	r1, r3
   1cd24:	cmpeq	r0, r2
   1cd28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd2c:	mov	r4, r0
   1cd30:	movcc	r0, #0
   1cd34:	mov	r5, r1
   1cd38:	ldr	lr, [sp, #36]	; 0x24
   1cd3c:	movcc	r1, r0
   1cd40:	bcc	1ce3c <__assert_fail@plt+0xbb0c>
   1cd44:	cmp	r3, #0
   1cd48:	clzeq	ip, r2
   1cd4c:	clzne	ip, r3
   1cd50:	addeq	ip, ip, #32
   1cd54:	cmp	r5, #0
   1cd58:	clzeq	r1, r4
   1cd5c:	addeq	r1, r1, #32
   1cd60:	clzne	r1, r5
   1cd64:	sub	ip, ip, r1
   1cd68:	sub	sl, ip, #32
   1cd6c:	lsl	r9, r3, ip
   1cd70:	rsb	fp, ip, #32
   1cd74:	orr	r9, r9, r2, lsl sl
   1cd78:	orr	r9, r9, r2, lsr fp
   1cd7c:	lsl	r8, r2, ip
   1cd80:	cmp	r5, r9
   1cd84:	cmpeq	r4, r8
   1cd88:	movcc	r0, #0
   1cd8c:	movcc	r1, r0
   1cd90:	bcc	1cdac <__assert_fail@plt+0xba7c>
   1cd94:	mov	r0, #1
   1cd98:	subs	r4, r4, r8
   1cd9c:	lsl	r1, r0, sl
   1cda0:	orr	r1, r1, r0, lsr fp
   1cda4:	lsl	r0, r0, ip
   1cda8:	sbc	r5, r5, r9
   1cdac:	cmp	ip, #0
   1cdb0:	beq	1ce3c <__assert_fail@plt+0xbb0c>
   1cdb4:	lsr	r6, r8, #1
   1cdb8:	orr	r6, r6, r9, lsl #31
   1cdbc:	lsr	r7, r9, #1
   1cdc0:	mov	r2, ip
   1cdc4:	b	1cde8 <__assert_fail@plt+0xbab8>
   1cdc8:	subs	r3, r4, r6
   1cdcc:	sbc	r8, r5, r7
   1cdd0:	adds	r3, r3, r3
   1cdd4:	adc	r8, r8, r8
   1cdd8:	adds	r4, r3, #1
   1cddc:	adc	r5, r8, #0
   1cde0:	subs	r2, r2, #1
   1cde4:	beq	1ce04 <__assert_fail@plt+0xbad4>
   1cde8:	cmp	r5, r7
   1cdec:	cmpeq	r4, r6
   1cdf0:	bcs	1cdc8 <__assert_fail@plt+0xba98>
   1cdf4:	adds	r4, r4, r4
   1cdf8:	adc	r5, r5, r5
   1cdfc:	subs	r2, r2, #1
   1ce00:	bne	1cde8 <__assert_fail@plt+0xbab8>
   1ce04:	lsr	r3, r4, ip
   1ce08:	orr	r3, r3, r5, lsl fp
   1ce0c:	lsr	r2, r5, ip
   1ce10:	orr	r3, r3, r5, lsr sl
   1ce14:	adds	r0, r0, r4
   1ce18:	mov	r4, r3
   1ce1c:	lsl	r3, r2, ip
   1ce20:	orr	r3, r3, r4, lsl sl
   1ce24:	lsl	ip, r4, ip
   1ce28:	orr	r3, r3, r4, lsr fp
   1ce2c:	adc	r1, r1, r5
   1ce30:	subs	r0, r0, ip
   1ce34:	mov	r5, r2
   1ce38:	sbc	r1, r1, r3
   1ce3c:	cmp	lr, #0
   1ce40:	strdne	r4, [lr]
   1ce44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ce4c:	mov	r7, r0
   1ce50:	ldr	r6, [pc, #72]	; 1cea0 <__assert_fail@plt+0xbb70>
   1ce54:	ldr	r5, [pc, #72]	; 1cea4 <__assert_fail@plt+0xbb74>
   1ce58:	add	r6, pc, r6
   1ce5c:	add	r5, pc, r5
   1ce60:	sub	r6, r6, r5
   1ce64:	mov	r8, r1
   1ce68:	mov	r9, r2
   1ce6c:	bl	10fc8 <fstatfs64@plt-0x20>
   1ce70:	asrs	r6, r6, #2
   1ce74:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ce78:	mov	r4, #0
   1ce7c:	add	r4, r4, #1
   1ce80:	ldr	r3, [r5], #4
   1ce84:	mov	r2, r9
   1ce88:	mov	r1, r8
   1ce8c:	mov	r0, r7
   1ce90:	blx	r3
   1ce94:	cmp	r6, r4
   1ce98:	bne	1ce7c <__assert_fail@plt+0xbb4c>
   1ce9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cea0:	strheq	r2, [r1], -r4
   1cea4:	andeq	r2, r1, ip, lsr #1
   1cea8:	bx	lr
   1ceac:	ldr	r3, [pc, #12]	; 1cec0 <__assert_fail@plt+0xbb90>
   1ceb0:	mov	r1, #0
   1ceb4:	add	r3, pc, r3
   1ceb8:	ldr	r2, [r3]
   1cebc:	b	111f8 <__cxa_atexit@plt>
   1cec0:	andeq	r2, r1, r4, ror r2

Disassembly of section .fini:

0001cec4 <.fini>:
   1cec4:	push	{r3, lr}
   1cec8:	pop	{r3, pc}
