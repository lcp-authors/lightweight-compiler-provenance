
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_prefix/monster_test_prefix:     file format elf32-littlearm


Disassembly of section .init:

00012268 <.init>:
   12268:	push	{r3, lr}
   1226c:	bl	1246c <_start@@Base+0x3c>
   12270:	pop	{r3, pc}

Disassembly of section .plt:

00012274 <free@plt-0x14>:
   12274:	push	{lr}		; (str lr, [sp, #-4]!)
   12278:	ldr	lr, [pc, #4]	; 12284 <free@plt-0x4>
   1227c:	add	lr, pc, lr
   12280:	ldr	pc, [lr, #8]!
   12284:	andeq	r9, r1, ip, ror sp

00012288 <free@plt>:
   12288:	add	ip, pc, #0, 12
   1228c:	add	ip, ip, #102400	; 0x19000
   12290:	ldr	pc, [ip, #3452]!	; 0xd7c

00012294 <memcpy@plt>:
   12294:	add	ip, pc, #0, 12
   12298:	add	ip, ip, #102400	; 0x19000
   1229c:	ldr	pc, [ip, #3444]!	; 0xd74

000122a0 <memcmp@plt>:
   122a0:	add	ip, pc, #0, 12
   122a4:	add	ip, ip, #102400	; 0x19000
   122a8:	ldr	pc, [ip, #3436]!	; 0xd6c

000122ac <realloc@plt>:
   122ac:	add	ip, pc, #0, 12
   122b0:	add	ip, ip, #102400	; 0x19000
   122b4:	ldr	pc, [ip, #3428]!	; 0xd64

000122b8 <malloc@plt>:
   122b8:	add	ip, pc, #0, 12
   122bc:	add	ip, ip, #102400	; 0x19000
   122c0:	ldr	pc, [ip, #3420]!	; 0xd5c

000122c4 <__libc_start_main@plt>:
   122c4:	add	ip, pc, #0, 12
   122c8:	add	ip, ip, #102400	; 0x19000
   122cc:	ldr	pc, [ip, #3412]!	; 0xd54

000122d0 <__gmon_start__@plt>:
   122d0:	add	ip, pc, #0, 12
   122d4:	add	ip, ip, #102400	; 0x19000
   122d8:	ldr	pc, [ip, #3404]!	; 0xd4c

000122dc <strlen@plt>:
   122dc:	add	ip, pc, #0, 12
   122e0:	add	ip, ip, #102400	; 0x19000
   122e4:	ldr	pc, [ip, #3396]!	; 0xd44

000122e8 <posix_memalign@plt>:
   122e8:	add	ip, pc, #0, 12
   122ec:	add	ip, ip, #102400	; 0x19000
   122f0:	ldr	pc, [ip, #3388]!	; 0xd3c

000122f4 <memset@plt>:
   122f4:	add	ip, pc, #0, 12
   122f8:	add	ip, ip, #102400	; 0x19000
   122fc:	ldr	pc, [ip, #3380]!	; 0xd34

00012300 <strncpy@plt>:
   12300:	add	ip, pc, #0, 12
   12304:	add	ip, ip, #102400	; 0x19000
   12308:	ldr	pc, [ip, #3372]!	; 0xd2c

0001230c <memchr@plt>:
   1230c:	add	ip, pc, #0, 12
   12310:	add	ip, ip, #102400	; 0x19000
   12314:	ldr	pc, [ip, #3364]!	; 0xd24

00012318 <abort@plt>:
   12318:	add	ip, pc, #0, 12
   1231c:	add	ip, ip, #102400	; 0x19000
   12320:	ldr	pc, [ip, #3356]!	; 0xd1c

00012324 <__assert_fail@plt>:
   12324:	add	ip, pc, #0, 12
   12328:	add	ip, ip, #102400	; 0x19000
   1232c:	ldr	pc, [ip, #3348]!	; 0xd14

Disassembly of section .text:

00012330 <main@@Base>:
   12330:	str	r4, [sp, #-8]!
   12334:	str	lr, [sp, #4]
   12338:	sub	sp, sp, #240	; 0xf0
   1233c:	add	r0, sp, #8
   12340:	bl	1358c <flatcc_builder_init@@Base>
   12344:	mov	r3, #0
   12348:	add	r0, sp, #8
   1234c:	mov	r2, r3
   12350:	movw	r1, #43336	; 0xa948
   12354:	movt	r1, #1
   12358:	bl	14024 <flatcc_builder_start_buffer@@Base>
   1235c:	cmp	r0, #0
   12360:	bne	12370 <main@@Base+0x40>
   12364:	mov	r1, #36	; 0x24
   12368:	add	r0, sp, #8
   1236c:	bl	15b10 <flatcc_builder_start_table@@Base>
   12370:	movw	r1, #43344	; 0xa950
   12374:	movt	r1, #1
   12378:	add	r0, sp, #8
   1237c:	bl	17a98 <flatcc_builder_create_string_str@@Base>
   12380:	subs	r4, r0, #0
   12384:	beq	1239c <main@@Base+0x6c>
   12388:	mov	r1, #3
   1238c:	add	r0, sp, #8
   12390:	bl	18254 <flatcc_builder_table_add_offset@@Base>
   12394:	cmp	r0, #0
   12398:	strne	r4, [r0]
   1239c:	movw	r1, #43300	; 0xa924
   123a0:	movt	r1, #1
   123a4:	mov	r2, #1
   123a8:	add	r0, sp, #8
   123ac:	bl	163f4 <flatcc_builder_check_required@@Base>
   123b0:	cmp	r0, #0
   123b4:	beq	12410 <main@@Base+0xe0>
   123b8:	add	r0, sp, #8
   123bc:	bl	16490 <flatcc_builder_end_table@@Base>
   123c0:	mov	r1, r0
   123c4:	add	r0, sp, #8
   123c8:	bl	141d0 <flatcc_builder_end_buffer@@Base>
   123cc:	add	r1, sp, #4
   123d0:	add	r0, sp, #8
   123d4:	bl	18864 <flatcc_builder_get_direct_buffer@@Base>
   123d8:	movw	r3, #10232	; 0x27f8
   123dc:	movt	r3, #1
   123e0:	ldr	r1, [sp, #4]
   123e4:	movw	r2, #43336	; 0xa948
   123e8:	movt	r2, #1
   123ec:	bl	19e00 <flatcc_verify_table_as_root@@Base>
   123f0:	mov	r4, r0
   123f4:	add	r0, sp, #8
   123f8:	bl	13754 <flatcc_builder_clear@@Base>
   123fc:	mov	r0, r4
   12400:	add	sp, sp, #240	; 0xf0
   12404:	ldr	r4, [sp]
   12408:	add	sp, sp, #4
   1240c:	pop	{pc}		; (ldr pc, [sp], #4)
   12410:	movw	r1, #43356	; 0xa95c
   12414:	movt	r1, #1
   12418:	ldr	r3, [pc, #12]	; 1242c <main@@Base+0xfc>
   1241c:	movw	r0, #43460	; 0xa9c4
   12420:	movt	r0, #1
   12424:	movw	r2, #2398	; 0x95e
   12428:	bl	12324 <__assert_fail@plt>
   1242c:	andeq	sl, r1, r8, lsr #18

00012430 <_start@@Base>:
   12430:	mov	fp, #0
   12434:	mov	lr, #0
   12438:	pop	{r1}		; (ldr r1, [sp], #4)
   1243c:	mov	r2, sp
   12440:	push	{r2}		; (str r2, [sp, #-4]!)
   12444:	push	{r0}		; (str r0, [sp, #-4]!)
   12448:	ldr	ip, [pc, #16]	; 12460 <_start@@Base+0x30>
   1244c:	push	{ip}		; (str ip, [sp, #-4]!)
   12450:	ldr	r0, [pc, #12]	; 12464 <_start@@Base+0x34>
   12454:	ldr	r3, [pc, #12]	; 12468 <_start@@Base+0x38>
   12458:	bl	122c4 <__libc_start_main@plt>
   1245c:	bl	12318 <abort@plt>
   12460:	andeq	sl, r1, r4, lsl r9
   12464:	andeq	r2, r1, r0, lsr r3
   12468:			; <UNDEFINED> instruction: 0x0001a8b4
   1246c:	ldr	r3, [pc, #20]	; 12488 <_start@@Base+0x58>
   12470:	ldr	r2, [pc, #20]	; 1248c <_start@@Base+0x5c>
   12474:	add	r3, pc, r3
   12478:	ldr	r2, [r3, r2]
   1247c:	cmp	r2, #0
   12480:	bxeq	lr
   12484:	b	122d0 <__gmon_start__@plt>
   12488:	andeq	r9, r1, r4, lsl #23
   1248c:	andeq	r0, r0, r4, asr #32
   12490:	ldr	r0, [pc, #24]	; 124b0 <_start@@Base+0x80>
   12494:	ldr	r3, [pc, #24]	; 124b4 <_start@@Base+0x84>
   12498:	cmp	r3, r0
   1249c:	bxeq	lr
   124a0:	ldr	r3, [pc, #16]	; 124b8 <_start@@Base+0x88>
   124a4:	cmp	r3, #0
   124a8:	bxeq	lr
   124ac:	bx	r3
   124b0:	andeq	ip, r2, r0, asr r0
   124b4:	andeq	ip, r2, r0, asr r0
   124b8:	andeq	r0, r0, r0
   124bc:	ldr	r0, [pc, #36]	; 124e8 <_start@@Base+0xb8>
   124c0:	ldr	r1, [pc, #36]	; 124ec <_start@@Base+0xbc>
   124c4:	sub	r1, r1, r0
   124c8:	asr	r1, r1, #2
   124cc:	add	r1, r1, r1, lsr #31
   124d0:	asrs	r1, r1, #1
   124d4:	bxeq	lr
   124d8:	ldr	r3, [pc, #16]	; 124f0 <_start@@Base+0xc0>
   124dc:	cmp	r3, #0
   124e0:	bxeq	lr
   124e4:	bx	r3
   124e8:	andeq	ip, r2, r0, asr r0
   124ec:	andeq	ip, r2, r0, asr r0
   124f0:	andeq	r0, r0, r0
   124f4:	push	{r4, lr}
   124f8:	ldr	r4, [pc, #24]	; 12518 <_start@@Base+0xe8>
   124fc:	ldrb	r3, [r4]
   12500:	cmp	r3, #0
   12504:	popne	{r4, pc}
   12508:	bl	12490 <_start@@Base+0x60>
   1250c:	mov	r3, #1
   12510:	strb	r3, [r4]
   12514:	pop	{r4, pc}
   12518:	andeq	ip, r2, r0, asr r0
   1251c:	b	124bc <_start@@Base+0x8c>
   12520:	mov	r0, #0
   12524:	bx	lr
   12528:	mov	r3, #4
   1252c:	mov	r1, #0
   12530:	mov	r2, r3
   12534:	b	190f4 <flatcc_verify_field@@Base>
   12538:	mov	r3, #8
   1253c:	mov	r1, #0
   12540:	str	r4, [sp, #-8]!
   12544:	mov	r2, r3
   12548:	mov	r4, r0
   1254c:	str	lr, [sp, #4]
   12550:	bl	190f4 <flatcc_verify_field@@Base>
   12554:	cmp	r0, #0
   12558:	beq	12568 <_start@@Base+0x138>
   1255c:	ldr	r4, [sp]
   12560:	add	sp, sp, #4
   12564:	pop	{pc}		; (ldr pc, [sp], #4)
   12568:	mov	r3, #4
   1256c:	mov	r0, r4
   12570:	ldr	r4, [sp]
   12574:	mov	r2, r3
   12578:	mov	r1, #1
   1257c:	ldr	lr, [sp, #4]
   12580:	add	sp, sp, #8
   12584:	b	190f4 <flatcc_verify_field@@Base>
   12588:	mov	r3, #1
   1258c:	mov	r1, #0
   12590:	str	r4, [sp, #-8]!
   12594:	mov	r2, r3
   12598:	mov	r4, r0
   1259c:	str	lr, [sp, #4]
   125a0:	bl	190f4 <flatcc_verify_field@@Base>
   125a4:	cmp	r0, #0
   125a8:	beq	125b8 <_start@@Base+0x188>
   125ac:	ldr	r4, [sp]
   125b0:	add	sp, sp, #4
   125b4:	pop	{pc}		; (ldr pc, [sp], #4)
   125b8:	mov	r3, #1
   125bc:	mov	r0, r4
   125c0:	mov	r2, r3
   125c4:	mov	r1, r3
   125c8:	bl	190f4 <flatcc_verify_field@@Base>
   125cc:	cmp	r0, #0
   125d0:	bne	125ac <_start@@Base+0x17c>
   125d4:	mov	r3, #1
   125d8:	mov	r1, #2
   125dc:	mov	r2, r3
   125e0:	mov	r0, r4
   125e4:	bl	190f4 <flatcc_verify_field@@Base>
   125e8:	cmp	r0, #0
   125ec:	bne	125ac <_start@@Base+0x17c>
   125f0:	mov	r3, #1
   125f4:	mov	r0, r4
   125f8:	ldr	r4, [sp]
   125fc:	mov	r2, r3
   12600:	mov	r1, #3
   12604:	ldr	lr, [sp, #4]
   12608:	add	sp, sp, #8
   1260c:	b	190f4 <flatcc_verify_field@@Base>
   12610:	mov	r2, #0
   12614:	str	r4, [sp, #-8]!
   12618:	mov	r4, r0
   1261c:	mov	r1, r2
   12620:	str	lr, [sp, #4]
   12624:	bl	19160 <flatcc_verify_string_field@@Base>
   12628:	cmp	r0, #0
   1262c:	beq	1263c <_start@@Base+0x20c>
   12630:	ldr	r4, [sp]
   12634:	add	sp, sp, #4
   12638:	pop	{pc}		; (ldr pc, [sp], #4)
   1263c:	mov	r3, #8
   12640:	mov	r1, #1
   12644:	mov	r2, r3
   12648:	mov	r0, r4
   1264c:	bl	190f4 <flatcc_verify_field@@Base>
   12650:	cmp	r0, #0
   12654:	bne	12630 <_start@@Base+0x200>
   12658:	mov	r3, #2
   1265c:	mov	r0, r4
   12660:	ldr	r4, [sp]
   12664:	mov	r2, r3
   12668:	mov	r1, r3
   1266c:	ldr	lr, [sp, #4]
   12670:	add	sp, sp, #8
   12674:	b	190f4 <flatcc_verify_field@@Base>
   12678:	mov	r2, #0
   1267c:	str	r4, [sp, #-8]!
   12680:	mov	r4, r0
   12684:	mov	r1, r2
   12688:	str	lr, [sp, #4]
   1268c:	bl	19160 <flatcc_verify_string_field@@Base>
   12690:	cmp	r0, #0
   12694:	beq	126a4 <_start@@Base+0x274>
   12698:	ldr	r4, [sp]
   1269c:	add	sp, sp, #4
   126a0:	pop	{pc}		; (ldr pc, [sp], #4)
   126a4:	mov	r3, #4
   126a8:	mov	r1, #1
   126ac:	mov	r2, r3
   126b0:	mov	r0, r4
   126b4:	bl	190f4 <flatcc_verify_field@@Base>
   126b8:	cmp	r0, #0
   126bc:	bne	12698 <_start@@Base+0x268>
   126c0:	mov	r2, r0
   126c4:	mov	r1, #2
   126c8:	mov	r0, r4
   126cc:	bl	19160 <flatcc_verify_string_field@@Base>
   126d0:	cmp	r0, #0
   126d4:	bne	12698 <_start@@Base+0x268>
   126d8:	mov	r3, #8
   126dc:	mov	r1, #3
   126e0:	mov	r2, r3
   126e4:	mov	r0, r4
   126e8:	bl	190f4 <flatcc_verify_field@@Base>
   126ec:	cmp	r0, #0
   126f0:	bne	12698 <_start@@Base+0x268>
   126f4:	mov	r2, r0
   126f8:	mov	r1, #4
   126fc:	mov	r0, r4
   12700:	bl	19160 <flatcc_verify_string_field@@Base>
   12704:	cmp	r0, #0
   12708:	bne	12698 <_start@@Base+0x268>
   1270c:	mov	r3, #8
   12710:	mov	r1, #5
   12714:	mov	r2, r3
   12718:	mov	r0, r4
   1271c:	bl	190f4 <flatcc_verify_field@@Base>
   12720:	cmp	r0, #0
   12724:	bne	12698 <_start@@Base+0x268>
   12728:	mov	r3, #4
   1272c:	mov	r1, #6
   12730:	mov	r2, r3
   12734:	mov	r0, r4
   12738:	bl	190f4 <flatcc_verify_field@@Base>
   1273c:	cmp	r0, #0
   12740:	bne	12698 <_start@@Base+0x268>
   12744:	mov	r3, #8
   12748:	mov	r1, #7
   1274c:	mov	r2, r3
   12750:	mov	r0, r4
   12754:	bl	190f4 <flatcc_verify_field@@Base>
   12758:	cmp	r0, #0
   1275c:	bne	12698 <_start@@Base+0x268>
   12760:	mov	r3, #4
   12764:	mov	r0, r4
   12768:	ldr	r4, [sp]
   1276c:	mov	r2, r3
   12770:	mov	r1, #8
   12774:	ldr	lr, [sp, #4]
   12778:	add	sp, sp, #8
   1277c:	b	190f4 <flatcc_verify_field@@Base>
   12780:	mov	r2, #0
   12784:	movw	r3, #9848	; 0x2678
   12788:	movt	r3, #1
   1278c:	mov	r1, r2
   12790:	str	r4, [sp, #-8]!
   12794:	mov	r4, r0
   12798:	str	lr, [sp, #4]
   1279c:	bl	19528 <flatcc_verify_table_field@@Base>
   127a0:	cmp	r0, #0
   127a4:	beq	127b4 <_start@@Base+0x384>
   127a8:	ldr	r4, [sp]
   127ac:	add	sp, sp, #4
   127b0:	pop	{pc}		; (ldr pc, [sp], #4)
   127b4:	mov	r2, r0
   127b8:	movw	r3, #12008	; 0x2ee8
   127bc:	movt	r3, #1
   127c0:	mov	r1, #1
   127c4:	mov	r0, r4
   127c8:	bl	19528 <flatcc_verify_table_field@@Base>
   127cc:	cmp	r0, #0
   127d0:	bne	127a8 <_start@@Base+0x378>
   127d4:	mov	r2, r0
   127d8:	movw	r3, #9528	; 0x2538
   127dc:	movt	r3, #1
   127e0:	mov	r0, r4
   127e4:	ldr	r4, [sp]
   127e8:	mov	r1, #2
   127ec:	ldr	lr, [sp, #4]
   127f0:	add	sp, sp, #8
   127f4:	b	19528 <flatcc_verify_table_field@@Base>
   127f8:	mov	r3, #16
   127fc:	mov	r2, #32
   12800:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12804:	mov	r1, #0
   12808:	strd	r6, [sp, #8]
   1280c:	mov	r4, r0
   12810:	str	r8, [sp, #16]
   12814:	str	lr, [sp, #20]
   12818:	sub	sp, sp, #8
   1281c:	bl	190f4 <flatcc_verify_field@@Base>
   12820:	cmp	r0, #0
   12824:	beq	12840 <_start@@Base+0x410>
   12828:	add	sp, sp, #8
   1282c:	ldrd	r4, [sp]
   12830:	ldrd	r6, [sp, #8]
   12834:	ldr	r8, [sp, #16]
   12838:	add	sp, sp, #20
   1283c:	pop	{pc}		; (ldr pc, [sp], #4)
   12840:	mov	r3, #2
   12844:	mov	r0, r4
   12848:	mov	r2, r3
   1284c:	mov	r1, r3
   12850:	bl	190f4 <flatcc_verify_field@@Base>
   12854:	cmp	r0, #0
   12858:	bne	12828 <_start@@Base+0x3f8>
   1285c:	mov	r3, #2
   12860:	mov	r1, #1
   12864:	mov	r2, r3
   12868:	mov	r0, r4
   1286c:	bl	190f4 <flatcc_verify_field@@Base>
   12870:	cmp	r0, #0
   12874:	bne	12828 <_start@@Base+0x3f8>
   12878:	mov	r2, #1
   1287c:	mov	r1, #3
   12880:	mov	r0, r4
   12884:	bl	19160 <flatcc_verify_string_field@@Base>
   12888:	cmp	r0, #0
   1288c:	bne	12828 <_start@@Base+0x3f8>
   12890:	mov	r3, #1
   12894:	mov	r1, #6
   12898:	mov	r2, r3
   1289c:	mov	r0, r4
   128a0:	bl	190f4 <flatcc_verify_field@@Base>
   128a4:	cmp	r0, #0
   128a8:	bne	12828 <_start@@Base+0x3f8>
   128ac:	mov	r5, #1
   128b0:	mvn	r6, #0
   128b4:	mov	r2, r0
   128b8:	mov	r3, r5
   128bc:	mov	r1, #5
   128c0:	mov	r0, r4
   128c4:	stm	sp, {r5, r6}
   128c8:	bl	19240 <flatcc_verify_vector_field@@Base>
   128cc:	cmp	r0, #0
   128d0:	bne	12828 <_start@@Base+0x3f8>
   128d4:	mov	r2, r0
   128d8:	movw	r3, #10232	; 0x27f8
   128dc:	movt	r3, #1
   128e0:	mov	r1, #11
   128e4:	mov	r0, r4
   128e8:	bl	19694 <flatcc_verify_table_vector_field@@Base>
   128ec:	cmp	r0, #0
   128f0:	bne	12828 <_start@@Base+0x3f8>
   128f4:	mov	r2, r0
   128f8:	mov	r1, #10
   128fc:	mov	r0, r4
   12900:	bl	19344 <flatcc_verify_string_vector_field@@Base>
   12904:	cmp	r0, #0
   12908:	bne	12828 <_start@@Base+0x3f8>
   1290c:	mov	r2, r0
   12910:	mov	r1, #28
   12914:	mov	r0, r4
   12918:	bl	19344 <flatcc_verify_string_vector_field@@Base>
   1291c:	cmp	r0, #0
   12920:	bne	12828 <_start@@Base+0x3f8>
   12924:	mov	r2, r0
   12928:	mov	r3, r5
   1292c:	stm	sp, {r5, r6}
   12930:	mov	r1, #24
   12934:	mov	r0, r4
   12938:	bl	19240 <flatcc_verify_vector_field@@Base>
   1293c:	cmp	r0, #0
   12940:	bne	12828 <_start@@Base+0x3f8>
   12944:	mvn	ip, #-536870912	; 0xe0000000
   12948:	mov	r5, #4
   1294c:	mov	r3, #8
   12950:	mov	r2, #0
   12954:	mov	r1, #29
   12958:	mov	r0, r4
   1295c:	stm	sp, {r5, ip}
   12960:	bl	19240 <flatcc_verify_vector_field@@Base>
   12964:	cmp	r0, #0
   12968:	bne	12828 <_start@@Base+0x3f8>
   1296c:	movw	r6, #10232	; 0x27f8
   12970:	movt	r6, #1
   12974:	mov	r2, r0
   12978:	mov	r3, r6
   1297c:	mov	r1, #12
   12980:	mov	r0, r4
   12984:	bl	19528 <flatcc_verify_table_field@@Base>
   12988:	cmp	r0, #0
   1298c:	bne	12828 <_start@@Base+0x3f8>
   12990:	mov	r2, r0
   12994:	movw	r3, #11496	; 0x2ce8
   12998:	movt	r3, #1
   1299c:	mov	r1, #8
   129a0:	mov	r0, r4
   129a4:	bl	1a4d4 <flatcc_verify_union_field@@Base>
   129a8:	cmp	r0, #0
   129ac:	bne	12828 <_start@@Base+0x3f8>
   129b0:	mvn	r7, #-1073741824	; 0xc0000000
   129b4:	mov	r8, #2
   129b8:	mov	r2, r0
   129bc:	mov	r3, r5
   129c0:	mov	r1, #9
   129c4:	mov	r0, r4
   129c8:	str	r8, [sp]
   129cc:	str	r7, [sp, #4]
   129d0:	bl	19240 <flatcc_verify_vector_field@@Base>
   129d4:	cmp	r0, #0
   129d8:	bne	12828 <_start@@Base+0x3f8>
   129dc:	mov	r2, r0
   129e0:	mov	r3, r5
   129e4:	str	r8, [sp]
   129e8:	mov	r1, #31
   129ec:	mov	r0, r4
   129f0:	str	r7, [sp, #4]
   129f4:	bl	19240 <flatcc_verify_vector_field@@Base>
   129f8:	cmp	r0, #0
   129fc:	bne	12828 <_start@@Base+0x3f8>
   12a00:	mov	r7, #1
   12a04:	mov	r3, r0
   12a08:	mov	r2, r0
   12a0c:	mov	r1, #13
   12a10:	mov	r0, r4
   12a14:	str	r7, [sp]
   12a18:	str	r6, [sp, #4]
   12a1c:	bl	1a27c <flatcc_verify_table_as_nested_root@@Base>
   12a20:	cmp	r0, #0
   12a24:	bne	12828 <_start@@Base+0x3f8>
   12a28:	mov	r2, r0
   12a2c:	movw	r3, #9744	; 0x2610
   12a30:	movt	r3, #1
   12a34:	mov	r1, #14
   12a38:	mov	r0, r4
   12a3c:	bl	19528 <flatcc_verify_table_field@@Base>
   12a40:	cmp	r0, #0
   12a44:	bne	12828 <_start@@Base+0x3f8>
   12a48:	mov	r3, r7
   12a4c:	mov	r2, r7
   12a50:	mov	r1, #15
   12a54:	mov	r0, r4
   12a58:	bl	190f4 <flatcc_verify_field@@Base>
   12a5c:	cmp	r0, #0
   12a60:	bne	12828 <_start@@Base+0x3f8>
   12a64:	mov	r3, r5
   12a68:	mov	r2, r5
   12a6c:	mov	r1, #16
   12a70:	mov	r0, r4
   12a74:	bl	190f4 <flatcc_verify_field@@Base>
   12a78:	cmp	r0, #0
   12a7c:	bne	12828 <_start@@Base+0x3f8>
   12a80:	mov	r3, r5
   12a84:	mov	r2, r5
   12a88:	mov	r1, #17
   12a8c:	mov	r0, r4
   12a90:	bl	190f4 <flatcc_verify_field@@Base>
   12a94:	cmp	r0, #0
   12a98:	bne	12828 <_start@@Base+0x3f8>
   12a9c:	mov	r3, #8
   12aa0:	mov	r1, #18
   12aa4:	mov	r2, r3
   12aa8:	mov	r0, r4
   12aac:	bl	190f4 <flatcc_verify_field@@Base>
   12ab0:	cmp	r0, #0
   12ab4:	bne	12828 <_start@@Base+0x3f8>
   12ab8:	mov	r3, #8
   12abc:	mov	r1, #19
   12ac0:	mov	r2, r3
   12ac4:	mov	r0, r4
   12ac8:	bl	190f4 <flatcc_verify_field@@Base>
   12acc:	cmp	r0, #0
   12ad0:	bne	12828 <_start@@Base+0x3f8>
   12ad4:	mov	r3, r5
   12ad8:	mov	r1, #20
   12adc:	mov	r2, r5
   12ae0:	mov	r0, r4
   12ae4:	bl	190f4 <flatcc_verify_field@@Base>
   12ae8:	cmp	r0, #0
   12aec:	bne	12828 <_start@@Base+0x3f8>
   12af0:	mov	r3, r5
   12af4:	mov	r1, #21
   12af8:	mov	r2, r5
   12afc:	mov	r0, r4
   12b00:	bl	190f4 <flatcc_verify_field@@Base>
   12b04:	cmp	r0, #0
   12b08:	bne	12828 <_start@@Base+0x3f8>
   12b0c:	mov	r3, #8
   12b10:	mov	r1, #22
   12b14:	mov	r2, r3
   12b18:	mov	r0, r4
   12b1c:	bl	190f4 <flatcc_verify_field@@Base>
   12b20:	cmp	r0, #0
   12b24:	bne	12828 <_start@@Base+0x3f8>
   12b28:	mov	r3, #8
   12b2c:	mov	r1, #23
   12b30:	mov	r2, r3
   12b34:	mov	r0, r4
   12b38:	bl	190f4 <flatcc_verify_field@@Base>
   12b3c:	cmp	r0, #0
   12b40:	bne	12828 <_start@@Base+0x3f8>
   12b44:	mov	r3, r5
   12b48:	mov	r1, #25
   12b4c:	mov	r2, r5
   12b50:	mov	r0, r4
   12b54:	bl	190f4 <flatcc_verify_field@@Base>
   12b58:	cmp	r0, #0
   12b5c:	bne	12828 <_start@@Base+0x3f8>
   12b60:	mov	r3, r5
   12b64:	mov	r1, #26
   12b68:	mov	r2, r5
   12b6c:	mov	r0, r4
   12b70:	bl	190f4 <flatcc_verify_field@@Base>
   12b74:	cmp	r0, #0
   12b78:	bne	12828 <_start@@Base+0x3f8>
   12b7c:	mov	r3, r5
   12b80:	mov	r1, #27
   12b84:	mov	r2, r5
   12b88:	mov	r0, r4
   12b8c:	bl	190f4 <flatcc_verify_field@@Base>
   12b90:	cmp	r0, #0
   12b94:	bne	12828 <_start@@Base+0x3f8>
   12b98:	mvn	ip, #0
   12b9c:	mov	r1, r7
   12ba0:	mov	r2, r0
   12ba4:	mov	r3, r7
   12ba8:	mov	r0, r4
   12bac:	stm	sp, {r1, ip}
   12bb0:	mov	r1, #30
   12bb4:	bl	19240 <flatcc_verify_vector_field@@Base>
   12bb8:	cmp	r0, #0
   12bbc:	bne	12828 <_start@@Base+0x3f8>
   12bc0:	mov	r5, #8
   12bc4:	mvn	r6, #-536870912	; 0xe0000000
   12bc8:	mov	r3, r5
   12bcc:	mov	r2, #0
   12bd0:	mov	r1, #32
   12bd4:	mov	r0, r4
   12bd8:	stm	sp, {r5, r6}
   12bdc:	bl	19240 <flatcc_verify_vector_field@@Base>
   12be0:	cmp	r0, #0
   12be4:	bne	12828 <_start@@Base+0x3f8>
   12be8:	mov	r2, r0
   12bec:	mov	r3, r5
   12bf0:	stm	sp, {r5, r6}
   12bf4:	mov	r1, #33	; 0x21
   12bf8:	mov	r0, r4
   12bfc:	bl	19240 <flatcc_verify_vector_field@@Base>
   12c00:	cmp	r0, #0
   12c04:	bne	12828 <_start@@Base+0x3f8>
   12c08:	mov	r2, r0
   12c0c:	movw	r3, #9504	; 0x2520
   12c10:	movt	r3, #1
   12c14:	mov	r1, #34	; 0x22
   12c18:	mov	r0, r4
   12c1c:	bl	19528 <flatcc_verify_table_field@@Base>
   12c20:	cmp	r0, #0
   12c24:	bne	12828 <_start@@Base+0x3f8>
   12c28:	mov	r2, r0
   12c2c:	movw	r3, #11352	; 0x2c58
   12c30:	movt	r3, #1
   12c34:	mov	r0, r4
   12c38:	mov	r1, #35	; 0x23
   12c3c:	add	sp, sp, #8
   12c40:	ldrd	r4, [sp]
   12c44:	ldrd	r6, [sp, #8]
   12c48:	ldr	r8, [sp, #16]
   12c4c:	ldr	lr, [sp, #20]
   12c50:	add	sp, sp, #24
   12c54:	b	19528 <flatcc_verify_table_field@@Base>
   12c58:	strd	r4, [sp, #-16]!
   12c5c:	mov	r4, #1
   12c60:	mvn	r5, #0
   12c64:	str	r6, [sp, #8]
   12c68:	mov	r2, #0
   12c6c:	mov	r3, r4
   12c70:	str	lr, [sp, #12]
   12c74:	sub	sp, sp, #8
   12c78:	mov	r1, r2
   12c7c:	mov	r6, r0
   12c80:	strd	r4, [sp]
   12c84:	bl	19240 <flatcc_verify_vector_field@@Base>
   12c88:	subs	r2, r0, #0
   12c8c:	beq	12ca8 <_start@@Base+0x878>
   12c90:	mov	r0, r2
   12c94:	add	sp, sp, #8
   12c98:	ldrd	r4, [sp]
   12c9c:	ldr	r6, [sp, #8]
   12ca0:	add	sp, sp, #12
   12ca4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ca8:	mov	r3, r4
   12cac:	mov	r1, r4
   12cb0:	strd	r4, [sp]
   12cb4:	mov	r0, r6
   12cb8:	bl	19240 <flatcc_verify_vector_field@@Base>
   12cbc:	subs	r2, r0, #0
   12cc0:	bne	12c90 <_start@@Base+0x860>
   12cc4:	movw	ip, #10232	; 0x27f8
   12cc8:	movt	ip, #1
   12ccc:	mov	r3, r2
   12cd0:	mov	r0, r6
   12cd4:	mov	r1, #2
   12cd8:	stm	sp, {r4, ip}
   12cdc:	bl	1a27c <flatcc_verify_table_as_nested_root@@Base>
   12ce0:	mov	r2, r0
   12ce4:	b	12c90 <_start@@Base+0x860>
   12ce8:	ldrb	r3, [r0, #12]
   12cec:	sub	r3, r3, #1
   12cf0:	cmp	r3, #3
   12cf4:	ldrls	pc, [pc, r3, lsl #2]
   12cf8:	b	12d3c <_start@@Base+0x90c>
   12cfc:	andeq	r2, r1, r0, lsr sp
   12d00:	andeq	r2, r1, r4, lsr #26
   12d04:	andeq	r2, r1, r8, lsl sp
   12d08:	andeq	r2, r1, ip, lsl #26
   12d0c:	movw	r1, #11588	; 0x2d44
   12d10:	movt	r1, #1
   12d14:	b	199b0 <flatcc_verify_union_table@@Base>
   12d18:	movw	r1, #12000	; 0x2ee0
   12d1c:	movt	r1, #1
   12d20:	b	199b0 <flatcc_verify_union_table@@Base>
   12d24:	movw	r1, #9608	; 0x2588
   12d28:	movt	r1, #1
   12d2c:	b	199b0 <flatcc_verify_union_table@@Base>
   12d30:	movw	r1, #10232	; 0x27f8
   12d34:	movt	r1, #1
   12d38:	b	199b0 <flatcc_verify_union_table@@Base>
   12d3c:	mov	r0, #0
   12d40:	bx	lr
   12d44:	mov	r2, #0
   12d48:	movw	r3, #10112	; 0x2780
   12d4c:	movt	r3, #1
   12d50:	mov	r1, r2
   12d54:	str	r4, [sp, #-8]!
   12d58:	mov	r4, r0
   12d5c:	str	lr, [sp, #4]
   12d60:	bl	19528 <flatcc_verify_table_field@@Base>
   12d64:	cmp	r0, #0
   12d68:	beq	12d78 <_start@@Base+0x948>
   12d6c:	ldr	r4, [sp]
   12d70:	add	sp, sp, #4
   12d74:	pop	{pc}		; (ldr pc, [sp], #4)
   12d78:	mov	r2, r0
   12d7c:	movw	r3, #11708	; 0x2dbc
   12d80:	movt	r3, #1
   12d84:	mov	r1, #1
   12d88:	mov	r0, r4
   12d8c:	bl	19528 <flatcc_verify_table_field@@Base>
   12d90:	cmp	r0, #0
   12d94:	bne	12d6c <_start@@Base+0x93c>
   12d98:	mov	r2, r0
   12d9c:	movw	r3, #11496	; 0x2ce8
   12da0:	movt	r3, #1
   12da4:	mov	r0, r4
   12da8:	ldr	r4, [sp]
   12dac:	mov	r1, #3
   12db0:	ldr	lr, [sp, #4]
   12db4:	add	sp, sp, #8
   12db8:	b	1a628 <flatcc_verify_union_vector_field@@Base>
   12dbc:	movw	r3, #11892	; 0x2e74
   12dc0:	movt	r3, #1
   12dc4:	str	r4, [sp, #-8]!
   12dc8:	mov	r2, #0
   12dcc:	mov	r1, #1
   12dd0:	str	lr, [sp, #4]
   12dd4:	mov	r4, r0
   12dd8:	bl	1a4d4 <flatcc_verify_union_field@@Base>
   12ddc:	cmp	r0, #0
   12de0:	beq	12df0 <_start@@Base+0x9c0>
   12de4:	ldr	r4, [sp]
   12de8:	add	sp, sp, #4
   12dec:	pop	{pc}		; (ldr pc, [sp], #4)
   12df0:	mov	r2, r0
   12df4:	movw	r3, #11892	; 0x2e74
   12df8:	movt	r3, #1
   12dfc:	mov	r1, #3
   12e00:	mov	r0, r4
   12e04:	bl	1a4d4 <flatcc_verify_union_field@@Base>
   12e08:	cmp	r0, #0
   12e0c:	bne	12de4 <_start@@Base+0x9b4>
   12e10:	mov	r2, r0
   12e14:	movw	r3, #11892	; 0x2e74
   12e18:	movt	r3, #1
   12e1c:	mov	r1, #5
   12e20:	mov	r0, r4
   12e24:	bl	1a4d4 <flatcc_verify_union_field@@Base>
   12e28:	cmp	r0, #0
   12e2c:	bne	12de4 <_start@@Base+0x9b4>
   12e30:	mov	r2, r0
   12e34:	movw	r3, #11892	; 0x2e74
   12e38:	movt	r3, #1
   12e3c:	mov	r1, #7
   12e40:	mov	r0, r4
   12e44:	bl	1a4d4 <flatcc_verify_union_field@@Base>
   12e48:	cmp	r0, #0
   12e4c:	bne	12de4 <_start@@Base+0x9b4>
   12e50:	mov	r2, r0
   12e54:	movw	r3, #11892	; 0x2e74
   12e58:	movt	r3, #1
   12e5c:	mov	r0, r4
   12e60:	ldr	r4, [sp]
   12e64:	mov	r1, #9
   12e68:	ldr	lr, [sp, #4]
   12e6c:	add	sp, sp, #8
   12e70:	b	1a628 <flatcc_verify_union_vector_field@@Base>
   12e74:	ldrb	r3, [r0, #12]
   12e78:	mov	r2, r0
   12e7c:	cmp	r3, #10
   12e80:	bhi	12ea8 <_start@@Base+0xa78>
   12e84:	cmp	r3, #9
   12e88:	bcs	12ec0 <_start@@Base+0xa90>
   12e8c:	cmp	r3, #2
   12e90:	beq	12ed4 <_start@@Base+0xaa4>
   12e94:	cmp	r3, #8
   12e98:	bne	12ecc <_start@@Base+0xa9c>
   12e9c:	mov	r2, #2
   12ea0:	mov	r1, r2
   12ea4:	b	19aac <flatcc_verify_union_struct@@Base>
   12ea8:	cmp	r3, #11
   12eac:	beq	12eb8 <_start@@Base+0xa88>
   12eb0:	cmp	r3, #255	; 0xff
   12eb4:	bne	12ecc <_start@@Base+0xa9c>
   12eb8:	mov	r0, r2
   12ebc:	b	19b0c <flatcc_verify_union_string@@Base>
   12ec0:	mov	r2, #4
   12ec4:	mov	r1, r2
   12ec8:	b	19aac <flatcc_verify_union_struct@@Base>
   12ecc:	mov	r0, #0
   12ed0:	bx	lr
   12ed4:	movw	r1, #9512	; 0x2528
   12ed8:	movt	r1, #1
   12edc:	b	199b0 <flatcc_verify_union_table@@Base>
   12ee0:	mov	r0, #0
   12ee4:	bx	lr
   12ee8:	mov	r3, #8
   12eec:	mov	r1, #0
   12ef0:	str	r4, [sp, #-8]!
   12ef4:	mov	r2, r3
   12ef8:	mov	r4, r0
   12efc:	str	lr, [sp, #4]
   12f00:	bl	190f4 <flatcc_verify_field@@Base>
   12f04:	cmp	r0, #0
   12f08:	beq	12f18 <_start@@Base+0xae8>
   12f0c:	ldr	r4, [sp]
   12f10:	add	sp, sp, #4
   12f14:	pop	{pc}		; (ldr pc, [sp], #4)
   12f18:	mov	r3, #4
   12f1c:	mov	r0, r4
   12f20:	ldr	r4, [sp]
   12f24:	mov	r2, r3
   12f28:	mov	r1, #1
   12f2c:	ldr	lr, [sp, #4]
   12f30:	add	sp, sp, #8
   12f34:	b	190f4 <flatcc_verify_field@@Base>

00012f38 <flatcc_builder_default_alloc@@Base>:
   12f38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12f3c:	subs	r5, r2, #0
   12f40:	strd	r6, [sp, #8]
   12f44:	mov	r6, r1
   12f48:	str	r8, [sp, #16]
   12f4c:	str	lr, [sp, #20]
   12f50:	beq	12f88 <flatcc_builder_default_alloc@@Base+0x50>
   12f54:	mov	r7, r3
   12f58:	ldr	r3, [sp, #24]
   12f5c:	sub	r2, r3, #1
   12f60:	cmp	r2, #6
   12f64:	ldrls	pc, [pc, r2, lsl #2]
   12f68:	b	13038 <flatcc_builder_default_alloc@@Base+0x100>
   12f6c:			; <UNDEFINED> instruction: 0x00012fb8
   12f70:	andeq	r3, r1, r8, lsr r0
   12f74:	andeq	r3, r1, r8, lsr r0
   12f78:	andeq	r3, r1, r0, lsr r0
   12f7c:	andeq	r3, r1, r0, lsr #32
   12f80:	andeq	r3, r1, r8, lsr r0
   12f84:	andeq	r3, r1, r8, lsr #32
   12f88:	ldr	r0, [r1]
   12f8c:	cmp	r0, #0
   12f90:	beq	12fa4 <flatcc_builder_default_alloc@@Base+0x6c>
   12f94:	bl	12288 <free@plt>
   12f98:	mov	r0, r5
   12f9c:	str	r5, [r6]
   12fa0:	str	r5, [r6, #4]
   12fa4:	ldrd	r4, [sp]
   12fa8:	ldrd	r6, [sp, #8]
   12fac:	ldr	r8, [sp, #16]
   12fb0:	add	sp, sp, #20
   12fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   12fb8:	mov	r4, #256	; 0x100
   12fbc:	cmp	r4, r5
   12fc0:	bcs	12fd0 <flatcc_builder_default_alloc@@Base+0x98>
   12fc4:	lsl	r4, r4, #1
   12fc8:	cmp	r5, r4
   12fcc:	bhi	12fc4 <flatcc_builder_default_alloc@@Base+0x8c>
   12fd0:	ldr	r2, [r6, #4]
   12fd4:	cmp	r5, r2
   12fd8:	bhi	12fe8 <flatcc_builder_default_alloc@@Base+0xb0>
   12fdc:	cmp	r4, r2, lsr #1
   12fe0:	movls	r0, #0
   12fe4:	bls	12fa4 <flatcc_builder_default_alloc@@Base+0x6c>
   12fe8:	mov	r1, r4
   12fec:	ldr	r0, [r6]
   12ff0:	bl	122ac <realloc@plt>
   12ff4:	subs	r5, r0, #0
   12ff8:	beq	13054 <flatcc_builder_default_alloc@@Base+0x11c>
   12ffc:	cmp	r7, #0
   13000:	beq	13010 <flatcc_builder_default_alloc@@Base+0xd8>
   13004:	ldr	r0, [r6, #4]
   13008:	cmp	r0, r4
   1300c:	bcc	13040 <flatcc_builder_default_alloc@@Base+0x108>
   13010:	mov	r0, #0
   13014:	str	r5, [r6]
   13018:	str	r4, [r6, #4]
   1301c:	b	12fa4 <flatcc_builder_default_alloc@@Base+0x6c>
   13020:	mov	r4, r5
   13024:	b	12fd0 <flatcc_builder_default_alloc@@Base+0x98>
   13028:	mov	r4, #64	; 0x40
   1302c:	b	12fbc <flatcc_builder_default_alloc@@Base+0x84>
   13030:	mov	r4, #288	; 0x120
   13034:	b	12fbc <flatcc_builder_default_alloc@@Base+0x84>
   13038:	mov	r4, #32
   1303c:	b	12fbc <flatcc_builder_default_alloc@@Base+0x84>
   13040:	sub	r2, r4, r0
   13044:	mov	r1, #0
   13048:	add	r0, r5, r0
   1304c:	bl	122f4 <memset@plt>
   13050:	b	13010 <flatcc_builder_default_alloc@@Base+0xd8>
   13054:	mvn	r0, #0
   13058:	b	12fa4 <flatcc_builder_default_alloc@@Base+0x6c>
   1305c:	movw	r3, #43636	; 0xaa74
   13060:	movt	r3, #1
   13064:	str	r4, [sp, #-8]!
   13068:	movw	r1, #45508	; 0xb1c4
   1306c:	movt	r1, #1
   13070:	str	lr, [sp, #4]
   13074:	movw	r0, #45700	; 0xb284
   13078:	movt	r0, #1
   1307c:	mov	r2, #308	; 0x134
   13080:	bl	12324 <__assert_fail@plt>
   13084:	movw	r1, #45508	; 0xb1c4
   13088:	movt	r1, #1
   1308c:	ldr	r3, [pc, #20]	; 130a8 <flatcc_builder_default_alloc@@Base+0x170>
   13090:	movw	r0, #45700	; 0xb284
   13094:	movt	r0, #1
   13098:	str	r4, [sp, #-8]!
   1309c:	movw	r2, #677	; 0x2a5
   130a0:	str	lr, [sp, #4]
   130a4:	bl	12324 <__assert_fail@plt>
   130a8:	andeq	sl, r1, r4, lsl #21
   130ac:	movw	r1, #45508	; 0xb1c4
   130b0:	movt	r1, #1
   130b4:	ldr	r3, [pc, #20]	; 130d0 <flatcc_builder_default_alloc@@Base+0x198>
   130b8:	movw	r0, #45700	; 0xb284
   130bc:	movt	r0, #1
   130c0:	str	r4, [sp, #-8]!
   130c4:	movw	r2, #702	; 0x2be
   130c8:	str	lr, [sp, #4]
   130cc:	bl	12324 <__assert_fail@plt>
   130d0:	muleq	r1, r0, sl
   130d4:	movw	r1, #45508	; 0xb1c4
   130d8:	movt	r1, #1
   130dc:	ldr	r3, [pc, #20]	; 130f8 <flatcc_builder_default_alloc@@Base+0x1c0>
   130e0:	movw	r0, #45700	; 0xb284
   130e4:	movt	r0, #1
   130e8:	str	r4, [sp, #-8]!
   130ec:	movw	r2, #651	; 0x28b
   130f0:	str	lr, [sp, #4]
   130f4:	bl	12324 <__assert_fail@plt>
   130f8:	andeq	sl, r1, r0, lsr #21
   130fc:	movw	r1, #45508	; 0xb1c4
   13100:	movt	r1, #1
   13104:	ldr	r3, [pc, #20]	; 13120 <flatcc_builder_default_alloc@@Base+0x1e8>
   13108:	movw	r0, #45580	; 0xb20c
   1310c:	movt	r0, #1
   13110:	str	r4, [sp, #-8]!
   13114:	mov	r2, #892	; 0x37c
   13118:	str	lr, [sp, #4]
   1311c:	bl	12324 <__assert_fail@plt>
   13120:	andeq	sl, r1, ip, lsr #21
   13124:	movw	r1, #45508	; 0xb1c4
   13128:	movt	r1, #1
   1312c:	ldr	r3, [pc, #20]	; 13148 <flatcc_builder_default_alloc@@Base+0x210>
   13130:	movw	r0, #45608	; 0xb228
   13134:	movt	r0, #1
   13138:	str	r4, [sp, #-8]!
   1313c:	movw	r2, #542	; 0x21e
   13140:	str	lr, [sp, #4]
   13144:	bl	12324 <__assert_fail@plt>
   13148:	andeq	sl, r1, r0, asr #21
   1314c:	movw	r1, #45508	; 0xb1c4
   13150:	movt	r1, #1
   13154:	ldr	r3, [pc, #20]	; 13170 <flatcc_builder_default_alloc@@Base+0x238>
   13158:	movw	r0, #45636	; 0xb244
   1315c:	movt	r0, #1
   13160:	str	r4, [sp, #-8]!
   13164:	movw	r2, #966	; 0x3c6
   13168:	str	lr, [sp, #4]
   1316c:	bl	12324 <__assert_fail@plt>
   13170:	andeq	sl, r1, r0, ror #21
   13174:	movw	r1, #45508	; 0xb1c4
   13178:	movt	r1, #1
   1317c:	ldr	r3, [pc, #20]	; 13198 <flatcc_builder_default_alloc@@Base+0x260>
   13180:	movw	r0, #45680	; 0xb270
   13184:	movt	r0, #1
   13188:	str	r4, [sp, #-8]!
   1318c:	movw	r2, #1926	; 0x786
   13190:	str	lr, [sp, #4]
   13194:	bl	12324 <__assert_fail@plt>
   13198:	andeq	sl, r1, r0, lsl #22
   1319c:	ldrd	r2, [r0, #156]	; 0x9c
   131a0:	strd	r4, [sp, #-20]!	; 0xffffffec
   131a4:	mov	r5, r1
   131a8:	mov	r4, r0
   131ac:	strd	r6, [sp, #8]
   131b0:	str	lr, [sp, #16]
   131b4:	sub	sp, sp, #12
   131b8:	add	r1, r2, #1
   131bc:	cmp	r1, r3
   131c0:	str	r1, [r0, #156]	; 0x9c
   131c4:	ble	132a4 <flatcc_builder_default_alloc@@Base+0x36c>
   131c8:	ldr	r3, [r0, #176]	; 0xb0
   131cc:	cmp	r1, r3
   131d0:	cmpgt	r3, #0
   131d4:	movgt	r3, #1
   131d8:	movle	r3, #0
   131dc:	bgt	132b4 <flatcc_builder_default_alloc@@Base+0x37c>
   131e0:	add	r2, r2, r2, lsl #3
   131e4:	ldr	r1, [r0, #88]	; 0x58
   131e8:	lsl	r6, r2, #2
   131ec:	add	r2, r6, #36	; 0x24
   131f0:	cmp	r2, r1
   131f4:	bls	13218 <flatcc_builder_default_alloc@@Base+0x2e0>
   131f8:	mov	ip, #4
   131fc:	add	r1, r0, #84	; 0x54
   13200:	ldr	r0, [r0, #40]	; 0x28
   13204:	str	ip, [sp]
   13208:	ldr	r7, [r4, #48]	; 0x30
   1320c:	blx	r7
   13210:	cmp	r0, #0
   13214:	bne	132bc <flatcc_builder_default_alloc@@Base+0x384>
   13218:	ldr	r2, [r4, #84]	; 0x54
   1321c:	add	r2, r2, r6
   13220:	cmp	r2, #0
   13224:	str	r2, [r4, #32]
   13228:	beq	132b4 <flatcc_builder_default_alloc@@Base+0x37c>
   1322c:	ldr	r3, [r4, #88]	; 0x58
   13230:	movw	r0, #36409	; 0x8e39
   13234:	movt	r0, #14563	; 0x38e3
   13238:	ldr	r1, [r4, #176]	; 0xb0
   1323c:	umull	r0, r3, r0, r3
   13240:	lsr	r3, r3, #3
   13244:	cmp	r3, r1
   13248:	cmpgt	r1, #0
   1324c:	movgt	r3, r1
   13250:	str	r3, [r4, #160]	; 0xa0
   13254:	ldr	r3, [r4, #20]
   13258:	mov	r1, #0
   1325c:	mvn	lr, #3
   13260:	mov	r0, r1
   13264:	ldr	ip, [r4, #28]
   13268:	ldrh	r6, [r4, #130]	; 0x82
   1326c:	str	r3, [r2, #8]
   13270:	add	r3, r3, ip
   13274:	add	r3, r3, #7
   13278:	bic	r3, r3, #7
   1327c:	strh	r6, [r2, #12]
   13280:	strh	r5, [r4, #130]	; 0x82
   13284:	stm	r2, {ip, lr}
   13288:	str	r1, [r4, #20]
   1328c:	str	r3, [r4, #28]
   13290:	add	sp, sp, #12
   13294:	ldrd	r4, [sp]
   13298:	ldrd	r6, [sp, #8]
   1329c:	add	sp, sp, #16
   132a0:	pop	{pc}		; (ldr pc, [sp], #4)
   132a4:	ldr	r2, [r0, #32]
   132a8:	add	r2, r2, #36	; 0x24
   132ac:	str	r2, [r0, #32]
   132b0:	b	13254 <flatcc_builder_default_alloc@@Base+0x31c>
   132b4:	mvn	r0, #0
   132b8:	b	13290 <flatcc_builder_default_alloc@@Base+0x358>
   132bc:	bl	1305c <flatcc_builder_default_alloc@@Base+0x124>
   132c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   132c4:	mov	r4, r0
   132c8:	ldrh	r0, [r0, #128]	; 0x80
   132cc:	strd	r6, [sp, #8]
   132d0:	mov	r6, #4
   132d4:	ldr	r5, [r4, #136]	; 0x88
   132d8:	str	lr, [sp, #20]
   132dc:	mov	lr, r2
   132e0:	str	r8, [sp, #16]
   132e4:	sub	sp, sp, #88	; 0x58
   132e8:	cmp	r0, #3
   132ec:	add	r0, sp, #12
   132f0:	movls	r2, #4
   132f4:	str	lr, [sp, #12]
   132f8:	str	r6, [sp, #16]
   132fc:	strhls	r2, [r4, #128]	; 0x80
   13300:	mov	r2, #1
   13304:	lsls	ip, lr, #2
   13308:	moveq	r7, #2
   1330c:	str	r2, [sp, #20]
   13310:	str	r0, [sp, #24]
   13314:	and	r0, r5, #3
   13318:	str	r6, [sp, #28]
   1331c:	beq	13340 <flatcc_builder_default_alloc@@Base+0x408>
   13320:	mov	r8, #2
   13324:	add	r6, ip, r6
   13328:	mov	r2, r8
   1332c:	mov	r7, #3
   13330:	str	r6, [sp, #16]
   13334:	str	r8, [sp, #20]
   13338:	str	r1, [sp, #32]
   1333c:	str	ip, [sp, #36]	; 0x24
   13340:	cmp	r0, #0
   13344:	beq	1336c <flatcc_builder_default_alloc@@Base+0x434>
   13348:	ldr	r8, [pc, #360]	; 134b8 <flatcc_builder_default_alloc@@Base+0x580>
   1334c:	add	r2, r2, #1
   13350:	add	ip, sp, #88	; 0x58
   13354:	add	ip, ip, r2, lsl #3
   13358:	add	r6, r6, r0
   1335c:	mov	r2, r7
   13360:	strd	r6, [sp, #16]
   13364:	str	r8, [ip, #-72]	; 0xffffffb8
   13368:	str	r0, [ip, #-68]	; 0xffffffbc
   1336c:	cmp	lr, #0
   13370:	beq	13400 <flatcc_builder_default_alloc@@Base+0x4c8>
   13374:	cmp	r3, #0
   13378:	subne	r5, r1, r5
   1337c:	addne	lr, r3, lr
   13380:	addne	r5, r5, r6
   13384:	bne	133b0 <flatcc_builder_default_alloc@@Base+0x478>
   13388:	b	13468 <flatcc_builder_default_alloc@@Base+0x530>
   1338c:	sub	ip, r5, r1
   13390:	add	r0, ip, r0
   13394:	str	r0, [r1, #-4]
   13398:	ldrb	r0, [r3]
   1339c:	cmp	r0, #0
   133a0:	beq	1344c <flatcc_builder_default_alloc@@Base+0x514>
   133a4:	add	r3, r3, #1
   133a8:	cmp	r3, lr
   133ac:	beq	133fc <flatcc_builder_default_alloc@@Base+0x4c4>
   133b0:	ldr	r0, [r1], #4
   133b4:	cmp	r0, #0
   133b8:	bne	1338c <flatcc_builder_default_alloc@@Base+0x454>
   133bc:	ldrb	r0, [r3]
   133c0:	cmp	r0, #0
   133c4:	beq	133a4 <flatcc_builder_default_alloc@@Base+0x46c>
   133c8:	movw	r1, #45508	; 0xb1c4
   133cc:	movt	r1, #1
   133d0:	ldr	r3, [pc, #228]	; 134bc <flatcc_builder_default_alloc@@Base+0x584>
   133d4:	movw	r0, #45704	; 0xb288
   133d8:	movt	r0, #1
   133dc:	movw	r2, #1461	; 0x5b5
   133e0:	bl	12324 <__assert_fail@plt>
   133e4:	sub	r0, ip, r1
   133e8:	add	r3, r3, #1
   133ec:	add	r0, r0, r5
   133f0:	cmp	lr, r3
   133f4:	str	r0, [r1, #-4]
   133f8:	bne	13470 <flatcc_builder_default_alloc@@Base+0x538>
   133fc:	ldr	r5, [r4, #136]	; 0x88
   13400:	sub	r7, r5, r6
   13404:	cmp	r7, r5
   13408:	bge	1349c <flatcc_builder_default_alloc@@Base+0x564>
   1340c:	mov	r3, r7
   13410:	add	r1, sp, #24
   13414:	str	r6, [sp]
   13418:	ldr	r0, [r4, #36]	; 0x24
   1341c:	ldr	r5, [r4, #44]	; 0x2c
   13420:	blx	r5
   13424:	cmp	r0, #0
   13428:	bne	13498 <flatcc_builder_default_alloc@@Base+0x560>
   1342c:	mov	r0, r7
   13430:	str	r7, [r4, #136]	; 0x88
   13434:	add	sp, sp, #88	; 0x58
   13438:	ldrd	r4, [sp]
   1343c:	ldrd	r6, [sp, #8]
   13440:	ldr	r8, [sp, #16]
   13444:	add	sp, sp, #20
   13448:	pop	{pc}		; (ldr pc, [sp], #4)
   1344c:	movw	r1, #45508	; 0xb1c4
   13450:	movt	r1, #1
   13454:	ldr	r3, [pc, #96]	; 134bc <flatcc_builder_default_alloc@@Base+0x584>
   13458:	movw	r0, #45688	; 0xb278
   1345c:	movt	r0, #1
   13460:	movw	r2, #1457	; 0x5b1
   13464:	bl	12324 <__assert_fail@plt>
   13468:	sub	ip, r1, r5
   1346c:	add	ip, ip, r6
   13470:	ldr	r5, [r1], #4
   13474:	cmp	r5, #0
   13478:	bne	133e4 <flatcc_builder_default_alloc@@Base+0x4ac>
   1347c:	movw	r1, #45508	; 0xb1c4
   13480:	movt	r1, #1
   13484:	ldr	r3, [pc, #48]	; 134bc <flatcc_builder_default_alloc@@Base+0x584>
   13488:	movw	r0, #45700	; 0xb284
   1348c:	movt	r0, #1
   13490:	movw	r2, #1463	; 0x5b7
   13494:	bl	12324 <__assert_fail@plt>
   13498:	bl	130d4 <flatcc_builder_default_alloc@@Base+0x19c>
   1349c:	movw	r1, #45508	; 0xb1c4
   134a0:	movt	r1, #1
   134a4:	ldr	r3, [pc, #20]	; 134c0 <flatcc_builder_default_alloc@@Base+0x588>
   134a8:	movw	r0, #45700	; 0xb284
   134ac:	movt	r0, #1
   134b0:	movw	r2, #647	; 0x287
   134b4:	bl	12324 <__assert_fail@plt>
   134b8:	andeq	sl, r1, ip, lsl fp
   134bc:	andeq	sl, r1, ip, lsl sp
   134c0:	andeq	sl, r1, r0, lsr #21

000134c4 <flatcc_builder_flush_vtable_cache@@Base>:
   134c4:	ldr	r3, [r0, #116]	; 0x74
   134c8:	cmp	r3, #0
   134cc:	bxeq	lr
   134d0:	str	r4, [sp, #-8]!
   134d4:	mov	r4, r0
   134d8:	mov	r1, #0
   134dc:	ldr	r0, [r0, #92]	; 0x5c
   134e0:	ldr	r2, [r4, #96]	; 0x60
   134e4:	str	lr, [sp, #4]
   134e8:	bl	122f4 <memset@plt>
   134ec:	mov	r3, #16
   134f0:	mov	r2, #0
   134f4:	strd	r2, [r4, #120]	; 0x78
   134f8:	ldr	r4, [sp]
   134fc:	add	sp, sp, #4
   13500:	pop	{pc}		; (ldr pc, [sp], #4)

00013504 <flatcc_builder_custom_init@@Base>:
   13504:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13508:	mov	r5, r3
   1350c:	mov	r4, r0
   13510:	strd	r6, [sp, #8]
   13514:	mov	r6, r1
   13518:	mov	r7, r2
   1351c:	mov	r1, #0
   13520:	mov	r2, #232	; 0xe8
   13524:	str	r8, [sp, #16]
   13528:	str	lr, [sp, #20]
   1352c:	ldr	r8, [sp, #24]
   13530:	bl	122f4 <memset@plt>
   13534:	cmp	r6, #0
   13538:	beq	13574 <flatcc_builder_custom_init@@Base+0x70>
   1353c:	cmp	r5, #0
   13540:	movw	r3, #12088	; 0x2f38
   13544:	movt	r3, #1
   13548:	str	r7, [r4, #36]	; 0x24
   1354c:	mov	r0, #0
   13550:	moveq	r5, r3
   13554:	str	r8, [r4, #40]	; 0x28
   13558:	str	r6, [r4, #44]	; 0x2c
   1355c:	str	r5, [r4, #48]	; 0x30
   13560:	ldrd	r4, [sp]
   13564:	ldrd	r6, [sp, #8]
   13568:	ldr	r8, [sp, #16]
   1356c:	add	sp, sp, #20
   13570:	pop	{pc}		; (ldr pc, [sp], #4)
   13574:	mov	r3, #1
   13578:	movw	r6, #35956	; 0x8c74
   1357c:	movt	r6, #1
   13580:	add	r7, r4, #188	; 0xbc
   13584:	str	r3, [r4, #184]	; 0xb8
   13588:	b	1353c <flatcc_builder_custom_init@@Base+0x38>

0001358c <flatcc_builder_init@@Base>:
   1358c:	mov	r2, #232	; 0xe8
   13590:	mov	r1, #0
   13594:	str	r4, [sp, #-8]!
   13598:	str	lr, [sp, #4]
   1359c:	bl	122f4 <memset@plt>
   135a0:	mov	r3, r0
   135a4:	movw	r2, #12088	; 0x2f38
   135a8:	movt	r2, #1
   135ac:	mov	r0, #1
   135b0:	ldr	r4, [sp]
   135b4:	add	ip, r3, #188	; 0xbc
   135b8:	movw	r1, #35956	; 0x8c74
   135bc:	movt	r1, #1
   135c0:	add	sp, sp, #4
   135c4:	str	ip, [r3, #36]	; 0x24
   135c8:	str	r1, [r3, #44]	; 0x2c
   135cc:	str	r2, [r3, #48]	; 0x30
   135d0:	str	r0, [r3, #184]	; 0xb8
   135d4:	mov	r0, #0
   135d8:	pop	{pc}		; (ldr pc, [sp], #4)

000135dc <flatcc_builder_custom_reset@@Base>:
   135dc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   135e0:	mov	r5, #0
   135e4:	mov	r4, r0
   135e8:	strd	r6, [sp, #8]
   135ec:	mov	r6, r0
   135f0:	strd	r8, [sp, #16]
   135f4:	mov	r8, r1
   135f8:	mov	r9, r2
   135fc:	str	lr, [sp, #24]
   13600:	sub	sp, sp, #12
   13604:	b	13654 <flatcc_builder_custom_reset@@Base+0x78>
   13608:	cmp	r5, #5
   1360c:	cmpne	r9, #0
   13610:	beq	13638 <flatcc_builder_custom_reset@@Base+0x5c>
   13614:	mov	r3, #1
   13618:	str	r5, [sp]
   1361c:	mov	r2, r3
   13620:	ldr	r0, [r6, #40]	; 0x28
   13624:	ldr	r7, [r6, #48]	; 0x30
   13628:	blx	r7
   1362c:	cmp	r0, #0
   13630:	bne	1373c <flatcc_builder_custom_reset@@Base+0x160>
   13634:	ldr	r0, [r4, #52]	; 0x34
   13638:	mov	r1, #0
   1363c:	ldr	r2, [r4, #56]	; 0x38
   13640:	bl	122f4 <memset@plt>
   13644:	add	r5, r5, #1
   13648:	add	r4, r4, #8
   1364c:	cmp	r5, #8
   13650:	beq	1368c <flatcc_builder_custom_reset@@Base+0xb0>
   13654:	ldr	r0, [r4, #52]	; 0x34
   13658:	add	r1, r4, #52	; 0x34
   1365c:	cmp	r0, #0
   13660:	bne	13608 <flatcc_builder_custom_reset@@Base+0x2c>
   13664:	ldr	r3, [r4, #56]	; 0x38
   13668:	cmp	r3, #0
   1366c:	beq	13644 <flatcc_builder_custom_reset@@Base+0x68>
   13670:	movw	r1, #45508	; 0xb1c4
   13674:	movt	r1, #1
   13678:	ldr	r3, [pc, #196]	; 13744 <flatcc_builder_custom_reset@@Base+0x168>
   1367c:	movw	r0, #45720	; 0xb298
   13680:	movt	r0, #1
   13684:	movw	r2, #434	; 0x1b2
   13688:	bl	12324 <__assert_fail@plt>
   1368c:	mov	r2, #0
   13690:	ldr	r0, [r6, #52]	; 0x34
   13694:	ldr	r3, [r6, #124]	; 0x7c
   13698:	ldr	r1, [r6, #60]	; 0x3c
   1369c:	str	r0, [r6, #4]
   136a0:	str	r2, [r6, #120]	; 0x78
   136a4:	cmp	r3, r2
   136a8:	ldr	r2, [r6, #76]	; 0x4c
   136ac:	movne	r3, #16
   136b0:	strne	r3, [r6, #124]	; 0x7c
   136b4:	mov	r3, #0
   136b8:	cmp	r8, r3
   136bc:	str	r2, [r6]
   136c0:	str	r1, [r6, #16]
   136c4:	str	r3, [r6, #20]
   136c8:	str	r3, [r6, #24]
   136cc:	str	r3, [r6, #32]
   136d0:	strh	r3, [r6, #128]	; 0x80
   136d4:	str	r3, [r6, #136]	; 0x88
   136d8:	str	r3, [r6, #140]	; 0x8c
   136dc:	str	r3, [r6, #148]	; 0x94
   136e0:	str	r3, [r6, #152]	; 0x98
   136e4:	str	r3, [r6, #156]	; 0x9c
   136e8:	str	r3, [r6, #160]	; 0xa0
   136ec:	bne	13714 <flatcc_builder_custom_reset@@Base+0x138>
   136f0:	ldr	r0, [r6, #184]	; 0xb8
   136f4:	cmp	r0, #0
   136f8:	bne	1372c <flatcc_builder_custom_reset@@Base+0x150>
   136fc:	add	sp, sp, #12
   13700:	ldrd	r4, [sp]
   13704:	ldrd	r6, [sp, #8]
   13708:	ldrd	r8, [sp, #16]
   1370c:	add	sp, sp, #24
   13710:	pop	{pc}		; (ldr pc, [sp], #4)
   13714:	ldr	r0, [r6, #184]	; 0xb8
   13718:	str	r3, [r6, #172]	; 0xac
   1371c:	str	r3, [r6, #176]	; 0xb0
   13720:	str	r3, [r6, #180]	; 0xb4
   13724:	cmp	r0, #0
   13728:	beq	136fc <flatcc_builder_custom_reset@@Base+0x120>
   1372c:	add	r0, r6, #188	; 0xbc
   13730:	bl	18b20 <flatcc_emitter_reset@@Base>
   13734:	mov	r0, #0
   13738:	b	136fc <flatcc_builder_custom_reset@@Base+0x120>
   1373c:	mvn	r0, #0
   13740:	b	136fc <flatcc_builder_custom_reset@@Base+0x120>
   13744:	andeq	sl, r1, ip, lsr sp

00013748 <flatcc_builder_reset@@Base>:
   13748:	mov	r2, #0
   1374c:	mov	r1, r2
   13750:	b	135dc <flatcc_builder_custom_reset@@Base>

00013754 <flatcc_builder_clear@@Base>:
   13754:	strd	r4, [sp, #-20]!	; 0xffffffec
   13758:	mov	r4, #0
   1375c:	add	r5, r0, #52	; 0x34
   13760:	strd	r6, [sp, #8]
   13764:	mov	r6, r0
   13768:	str	lr, [sp, #16]
   1376c:	sub	sp, sp, #12
   13770:	mov	r3, #0
   13774:	mov	r1, r5
   13778:	str	r4, [sp]
   1377c:	mov	r2, r3
   13780:	add	r4, r4, #1
   13784:	ldr	r0, [r6, #40]	; 0x28
   13788:	add	r5, r5, #8
   1378c:	ldr	r7, [r6, #48]	; 0x30
   13790:	blx	r7
   13794:	cmp	r4, #8
   13798:	bne	13770 <flatcc_builder_clear@@Base+0x1c>
   1379c:	ldr	r3, [r6, #184]	; 0xb8
   137a0:	cmp	r3, #0
   137a4:	bne	137cc <flatcc_builder_clear@@Base+0x78>
   137a8:	mov	r0, r6
   137ac:	mov	r2, #232	; 0xe8
   137b0:	mov	r1, #0
   137b4:	add	sp, sp, #12
   137b8:	ldrd	r4, [sp]
   137bc:	ldrd	r6, [sp, #8]
   137c0:	ldr	lr, [sp, #16]
   137c4:	add	sp, sp, #20
   137c8:	b	122f4 <memset@plt>
   137cc:	add	r0, r6, #188	; 0xbc
   137d0:	bl	18bf4 <flatcc_emitter_clear@@Base>
   137d4:	b	137a8 <flatcc_builder_clear@@Base+0x54>

000137d8 <flatcc_builder_enter_user_frame_ptr@@Base>:
   137d8:	strd	r4, [sp, #-20]!	; 0xffffffec
   137dc:	add	r4, r1, #3
   137e0:	mov	r5, r0
   137e4:	ldr	r3, [r0, #112]	; 0x70
   137e8:	bic	r4, r4, #3
   137ec:	strd	r6, [sp, #8]
   137f0:	add	r4, r4, #4
   137f4:	ldr	r6, [r0, #228]	; 0xe4
   137f8:	str	lr, [sp, #16]
   137fc:	sub	sp, sp, #12
   13800:	add	r2, r6, r4
   13804:	cmp	r2, r3
   13808:	bls	13830 <flatcc_builder_enter_user_frame_ptr@@Base+0x58>
   1380c:	mov	ip, #7
   13810:	add	r1, r0, #108	; 0x6c
   13814:	ldr	r0, [r0, #40]	; 0x28
   13818:	mov	r3, #0
   1381c:	str	ip, [sp]
   13820:	ldr	r7, [r5, #48]	; 0x30
   13824:	blx	r7
   13828:	cmp	r0, #0
   1382c:	bne	13884 <flatcc_builder_enter_user_frame_ptr@@Base+0xac>
   13830:	ldr	r7, [r5, #108]	; 0x6c
   13834:	adds	r3, r7, r6
   13838:	moveq	r0, r3
   1383c:	beq	13870 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   13840:	mov	r2, r4
   13844:	mov	r0, r3
   13848:	mov	r1, #0
   1384c:	bl	122f4 <memset@plt>
   13850:	ldr	r2, [r5, #224]	; 0xe0
   13854:	add	r0, r0, #4
   13858:	str	r2, [r7, r6]
   1385c:	ldr	r3, [r5, #228]	; 0xe4
   13860:	add	r4, r3, r4
   13864:	add	r3, r3, #4
   13868:	str	r3, [r5, #224]	; 0xe0
   1386c:	str	r4, [r5, #228]	; 0xe4
   13870:	add	sp, sp, #12
   13874:	ldrd	r4, [sp]
   13878:	ldrd	r6, [sp, #8]
   1387c:	add	sp, sp, #16
   13880:	pop	{pc}		; (ldr pc, [sp], #4)
   13884:	bl	1305c <flatcc_builder_default_alloc@@Base+0x124>

00013888 <flatcc_builder_enter_user_frame@@Base>:
   13888:	strd	r4, [sp, #-20]!	; 0xffffffec
   1388c:	add	r4, r1, #3
   13890:	mov	r5, r0
   13894:	ldr	r3, [r0, #112]	; 0x70
   13898:	bic	r4, r4, #3
   1389c:	strd	r6, [sp, #8]
   138a0:	add	r4, r4, #4
   138a4:	ldr	r6, [r0, #228]	; 0xe4
   138a8:	str	lr, [sp, #16]
   138ac:	sub	sp, sp, #12
   138b0:	add	r2, r6, r4
   138b4:	cmp	r2, r3
   138b8:	bls	138e0 <flatcc_builder_enter_user_frame@@Base+0x58>
   138bc:	mov	ip, #7
   138c0:	add	r1, r0, #108	; 0x6c
   138c4:	ldr	r0, [r0, #40]	; 0x28
   138c8:	mov	r3, #0
   138cc:	str	ip, [sp]
   138d0:	ldr	r7, [r5, #48]	; 0x30
   138d4:	blx	r7
   138d8:	cmp	r0, #0
   138dc:	bne	13928 <flatcc_builder_enter_user_frame@@Base+0xa0>
   138e0:	ldr	r7, [r5, #108]	; 0x6c
   138e4:	adds	r0, r7, r6
   138e8:	beq	13914 <flatcc_builder_enter_user_frame@@Base+0x8c>
   138ec:	mov	r2, r4
   138f0:	mov	r1, #0
   138f4:	bl	122f4 <memset@plt>
   138f8:	ldr	r3, [r5, #224]	; 0xe0
   138fc:	str	r3, [r7, r6]
   13900:	ldr	r0, [r5, #228]	; 0xe4
   13904:	add	r4, r0, r4
   13908:	add	r0, r0, #4
   1390c:	str	r0, [r5, #224]	; 0xe0
   13910:	str	r4, [r5, #228]	; 0xe4
   13914:	add	sp, sp, #12
   13918:	ldrd	r4, [sp]
   1391c:	ldrd	r6, [sp, #8]
   13920:	add	sp, sp, #16
   13924:	pop	{pc}		; (ldr pc, [sp], #4)
   13928:	bl	1305c <flatcc_builder_default_alloc@@Base+0x124>

0001392c <flatcc_builder_exit_user_frame@@Base>:
   1392c:	ldr	r2, [r0, #224]	; 0xe0
   13930:	cmp	r2, #0
   13934:	beq	1395c <flatcc_builder_exit_user_frame@@Base+0x30>
   13938:	mov	r3, r0
   1393c:	sub	r0, r2, #4
   13940:	ldr	r1, [r3, #108]	; 0x6c
   13944:	str	r0, [r3, #228]	; 0xe4
   13948:	add	r2, r1, r2
   1394c:	ldr	r2, [r2, #-4]
   13950:	mov	r0, r2
   13954:	str	r2, [r3, #224]	; 0xe0
   13958:	bx	lr
   1395c:	str	r4, [sp, #-8]!
   13960:	str	lr, [sp, #4]
   13964:	bl	13124 <flatcc_builder_default_alloc@@Base+0x1ec>

00013968 <flatcc_builder_exit_user_frame_at@@Base>:
   13968:	ldr	r2, [r0, #224]	; 0xe0
   1396c:	str	r4, [sp, #-8]!
   13970:	str	lr, [sp, #4]
   13974:	cmp	r2, r1
   13978:	bcc	139b4 <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   1397c:	cmp	r1, #0
   13980:	mov	r3, r0
   13984:	str	r1, [r0, #224]	; 0xe0
   13988:	beq	139d0 <flatcc_builder_exit_user_frame_at@@Base+0x68>
   1398c:	ldr	r2, [r3, #108]	; 0x6c
   13990:	sub	r0, r1, #4
   13994:	ldr	r4, [sp]
   13998:	add	sp, sp, #4
   1399c:	str	r0, [r3, #228]	; 0xe4
   139a0:	add	r1, r2, r1
   139a4:	ldr	r2, [r1, #-4]
   139a8:	mov	r0, r2
   139ac:	str	r2, [r3, #224]	; 0xe0
   139b0:	pop	{pc}		; (ldr pc, [sp], #4)
   139b4:	movw	r1, #45508	; 0xb1c4
   139b8:	movt	r1, #1
   139bc:	ldr	r3, [pc, #16]	; 139d4 <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   139c0:	movw	r0, #45740	; 0xb2ac
   139c4:	movt	r0, #1
   139c8:	movw	r2, #551	; 0x227
   139cc:	bl	12324 <__assert_fail@plt>
   139d0:	bl	13124 <flatcc_builder_default_alloc@@Base+0x1ec>
   139d4:	andeq	sl, r1, r8, asr sp

000139d8 <flatcc_builder_get_current_user_frame@@Base>:
   139d8:	ldr	r0, [r0, #224]	; 0xe0
   139dc:	bx	lr

000139e0 <flatcc_builder_get_user_frame_ptr@@Base>:
   139e0:	ldr	r0, [r0, #108]	; 0x6c
   139e4:	add	r0, r0, r1
   139e8:	bx	lr

000139ec <flatcc_builder_embed_buffer@@Base>:
   139ec:	strd	r4, [sp, #-32]!	; 0xffffffe0
   139f0:	mov	r5, r0
   139f4:	ldr	r0, [r0, #152]	; 0x98
   139f8:	strd	r6, [sp, #8]
   139fc:	mov	r7, r2
   13a00:	mov	r6, r3
   13a04:	strd	r8, [sp, #16]
   13a08:	str	sl, [sp, #24]
   13a0c:	str	lr, [sp, #28]
   13a10:	sub	sp, sp, #88	; 0x58
   13a14:	ldrh	r4, [sp, #120]	; 0x78
   13a18:	ldr	r8, [sp, #124]	; 0x7c
   13a1c:	cmp	r4, #4
   13a20:	movcc	r4, #4
   13a24:	cmp	r1, #0
   13a28:	and	r8, r8, #2
   13a2c:	bne	13a3c <flatcc_builder_embed_buffer@@Base+0x50>
   13a30:	ldrh	r1, [r5, #132]	; 0x84
   13a34:	cmp	r1, #0
   13a38:	beq	13a5c <flatcc_builder_embed_buffer@@Base+0x70>
   13a3c:	cmp	r1, r4
   13a40:	movcs	r4, r1
   13a44:	cmp	r0, #0
   13a48:	bne	13a5c <flatcc_builder_embed_buffer@@Base+0x70>
   13a4c:	ldr	r9, [r5, #140]	; 0x8c
   13a50:	sub	r1, r1, #1
   13a54:	ands	r1, r1, r9
   13a58:	bne	13b84 <flatcc_builder_embed_buffer@@Base+0x198>
   13a5c:	ldr	r1, [r5, #136]	; 0x88
   13a60:	cmp	r8, #0
   13a64:	sub	r4, r4, #1
   13a68:	movne	ip, #4
   13a6c:	moveq	ip, #0
   13a70:	mov	r2, #0
   13a74:	cmp	r0, r2
   13a78:	str	r2, [sp, #16]
   13a7c:	sub	r3, r1, r6
   13a80:	str	r2, [sp, #20]
   13a84:	sub	r3, r3, ip
   13a88:	and	r4, r4, r3
   13a8c:	add	r3, r6, r4
   13a90:	str	r3, [sp, #12]
   13a94:	bne	13b54 <flatcc_builder_embed_buffer@@Base+0x168>
   13a98:	mov	lr, #2
   13a9c:	mov	r3, #1
   13aa0:	mov	r2, r0
   13aa4:	cmp	r6, #0
   13aa8:	beq	13ad4 <flatcc_builder_embed_buffer@@Base+0xe8>
   13aac:	add	r2, r2, #1
   13ab0:	add	ip, sp, #88	; 0x58
   13ab4:	add	ip, ip, r2, lsl #3
   13ab8:	add	r0, r0, r6
   13abc:	mov	r2, r3
   13ac0:	str	r0, [sp, #16]
   13ac4:	str	r7, [ip, #-72]	; 0xffffffb8
   13ac8:	str	r6, [ip, #-68]	; 0xffffffbc
   13acc:	str	r3, [sp, #20]
   13ad0:	mov	r3, lr
   13ad4:	cmp	r4, #0
   13ad8:	beq	13b04 <flatcc_builder_embed_buffer@@Base+0x118>
   13adc:	ldr	lr, [pc, #312]	; 13c1c <flatcc_builder_embed_buffer@@Base+0x230>
   13ae0:	add	r2, r2, #1
   13ae4:	add	ip, sp, #88	; 0x58
   13ae8:	add	ip, ip, r2, lsl #3
   13aec:	add	r0, r0, r4
   13af0:	mov	r2, r3
   13af4:	str	r0, [sp, #16]
   13af8:	str	lr, [ip, #-72]	; 0xffffffb8
   13afc:	str	r4, [ip, #-68]	; 0xffffffbc
   13b00:	str	r3, [sp, #20]
   13b04:	sub	r4, r1, r0
   13b08:	cmp	r1, r4
   13b0c:	ble	13bdc <flatcc_builder_embed_buffer@@Base+0x1f0>
   13b10:	mov	r3, r4
   13b14:	add	r1, sp, #24
   13b18:	str	r0, [sp]
   13b1c:	ldr	r0, [r5, #36]	; 0x24
   13b20:	ldr	r6, [r5, #44]	; 0x2c
   13b24:	blx	r6
   13b28:	cmp	r0, #0
   13b2c:	bne	13bd8 <flatcc_builder_embed_buffer@@Base+0x1ec>
   13b30:	mov	r0, r4
   13b34:	str	r4, [r5, #136]	; 0x88
   13b38:	add	sp, sp, #88	; 0x58
   13b3c:	ldrd	r4, [sp]
   13b40:	ldrd	r6, [sp, #8]
   13b44:	ldrd	r8, [sp, #16]
   13b48:	ldr	sl, [sp, #24]
   13b4c:	add	sp, sp, #28
   13b50:	pop	{pc}		; (ldr pc, [sp], #4)
   13b54:	mov	ip, #4
   13b58:	mov	r3, #1
   13b5c:	add	r8, sp, #12
   13b60:	mov	r2, r3
   13b64:	mov	r0, ip
   13b68:	mov	lr, #3
   13b6c:	str	ip, [sp, #16]
   13b70:	str	r3, [sp, #20]
   13b74:	mov	r3, #2
   13b78:	str	r8, [sp, #24]
   13b7c:	str	ip, [sp, #28]
   13b80:	b	13aa4 <flatcc_builder_embed_buffer@@Base+0xb8>
   13b84:	ldr	r3, [pc, #144]	; 13c1c <flatcc_builder_embed_buffer@@Base+0x230>
   13b88:	add	r0, r9, r1
   13b8c:	mov	r2, #1
   13b90:	cmp	r9, r0
   13b94:	str	r1, [sp, #16]
   13b98:	str	r0, [r5, #140]	; 0x8c
   13b9c:	strd	r2, [sp, #20]
   13ba0:	str	r1, [sp, #28]
   13ba4:	bgt	13bf8 <flatcc_builder_embed_buffer@@Base+0x20c>
   13ba8:	mov	r3, r9
   13bac:	str	r1, [sp]
   13bb0:	add	r1, sp, #24
   13bb4:	ldr	r0, [r5, #36]	; 0x24
   13bb8:	ldr	sl, [r5, #44]	; 0x2c
   13bbc:	blx	sl
   13bc0:	cmp	r0, #0
   13bc4:	bne	13c18 <flatcc_builder_embed_buffer@@Base+0x22c>
   13bc8:	cmn	r9, #1
   13bcc:	beq	13c14 <flatcc_builder_embed_buffer@@Base+0x228>
   13bd0:	ldr	r0, [r5, #152]	; 0x98
   13bd4:	b	13a5c <flatcc_builder_embed_buffer@@Base+0x70>
   13bd8:	bl	130d4 <flatcc_builder_default_alloc@@Base+0x19c>
   13bdc:	movw	r1, #45508	; 0xb1c4
   13be0:	movt	r1, #1
   13be4:	ldr	r3, [pc, #52]	; 13c20 <flatcc_builder_embed_buffer@@Base+0x234>
   13be8:	movw	r0, #45700	; 0xb284
   13bec:	movt	r0, #1
   13bf0:	movw	r2, #647	; 0x287
   13bf4:	bl	12324 <__assert_fail@plt>
   13bf8:	movw	r1, #45508	; 0xb1c4
   13bfc:	movt	r1, #1
   13c00:	movw	r0, #45700	; 0xb284
   13c04:	movt	r0, #1
   13c08:	sub	r3, r3, #152	; 0x98
   13c0c:	movw	r2, #673	; 0x2a1
   13c10:	bl	12324 <__assert_fail@plt>
   13c14:	bl	130ac <flatcc_builder_default_alloc@@Base+0x174>
   13c18:	bl	13084 <flatcc_builder_default_alloc@@Base+0x14c>
   13c1c:	andeq	sl, r1, ip, lsl fp
   13c20:	andeq	sl, r1, r0, lsr #21

00013c24 <flatcc_builder_create_buffer@@Base>:
   13c24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13c28:	mov	ip, #0
   13c2c:	mov	r5, r0
   13c30:	strd	r6, [sp, #8]
   13c34:	mov	r7, r3
   13c38:	strd	r8, [sp, #16]
   13c3c:	mov	r9, r1
   13c40:	strd	sl, [sp, #24]
   13c44:	str	lr, [sp, #32]
   13c48:	sub	sp, sp, #100	; 0x64
   13c4c:	ldrh	r4, [sp, #136]	; 0x88
   13c50:	str	ip, [sp, #20]
   13c54:	ldr	r6, [sp, #140]	; 0x8c
   13c58:	cmp	r4, #4
   13c5c:	movcc	r4, #4
   13c60:	cmp	r2, #0
   13c64:	and	r8, r6, #1
   13c68:	bne	13c78 <flatcc_builder_create_buffer@@Base+0x54>
   13c6c:	ldrh	r2, [r0, #132]	; 0x84
   13c70:	cmp	r2, ip
   13c74:	beq	13c98 <flatcc_builder_create_buffer@@Base+0x74>
   13c78:	cmp	r2, r4
   13c7c:	movcs	r4, r2
   13c80:	cmp	r8, #0
   13c84:	bne	13c98 <flatcc_builder_create_buffer@@Base+0x74>
   13c88:	ldr	sl, [r5, #140]	; 0x8c
   13c8c:	sub	r2, r2, #1
   13c90:	ands	r1, r2, sl
   13c94:	bne	13e2c <flatcc_builder_create_buffer@@Base+0x208>
   13c98:	ldrh	r3, [r5, #128]	; 0x80
   13c9c:	ldr	r0, [r5, #136]	; 0x88
   13ca0:	cmp	r3, r4
   13ca4:	strhcc	r4, [r5, #128]	; 0x80
   13ca8:	cmp	r9, #0
   13cac:	sub	r4, r4, #1
   13cb0:	ldrne	r3, [r9]
   13cb4:	ldreq	r1, [sp, #20]
   13cb8:	movne	r1, r3
   13cbc:	strne	r3, [sp, #20]
   13cc0:	sub	r3, r0, #4
   13cc4:	cmp	r1, #0
   13cc8:	movne	r1, #4
   13ccc:	tst	r6, #2
   13cd0:	movne	r2, #4
   13cd4:	moveq	r2, #0
   13cd8:	sub	r3, r3, r1
   13cdc:	ands	r6, r6, #3
   13ce0:	sub	r3, r3, r2
   13ce4:	and	r4, r4, r3
   13ce8:	bne	13e04 <flatcc_builder_create_buffer@@Base+0x1e0>
   13cec:	mov	r3, r6
   13cf0:	mov	r9, #3
   13cf4:	mov	lr, #2
   13cf8:	mov	r2, #1
   13cfc:	mov	ip, #4
   13d00:	add	fp, sp, #96	; 0x60
   13d04:	add	r3, r3, #1
   13d08:	str	ip, [sp, #24]
   13d0c:	add	r3, fp, r3, lsl #3
   13d10:	add	sl, sp, #12
   13d14:	mov	fp, #4
   13d18:	cmp	r1, #0
   13d1c:	strd	sl, [r3, #-72]	; 0xffffffb8
   13d20:	str	r2, [sp, #28]
   13d24:	beq	13d54 <flatcc_builder_create_buffer@@Base+0x130>
   13d28:	add	r2, r2, #1
   13d2c:	add	r3, sp, #96	; 0x60
   13d30:	add	r3, r3, r2, lsl #3
   13d34:	add	ip, ip, r1
   13d38:	add	sl, sp, #20
   13d3c:	mov	r2, lr
   13d40:	str	ip, [sp, #24]
   13d44:	str	sl, [r3, #-72]	; 0xffffffb8
   13d48:	str	r1, [r3, #-68]	; 0xffffffbc
   13d4c:	str	lr, [sp, #28]
   13d50:	mov	lr, r9
   13d54:	cmp	r4, #0
   13d58:	beq	13d84 <flatcc_builder_create_buffer@@Base+0x160>
   13d5c:	ldr	r1, [pc, #372]	; 13ed8 <flatcc_builder_create_buffer@@Base+0x2b4>
   13d60:	add	r2, r2, #1
   13d64:	add	r3, sp, #96	; 0x60
   13d68:	add	r3, r3, r2, lsl #3
   13d6c:	add	ip, ip, r4
   13d70:	mov	r2, lr
   13d74:	str	ip, [sp, #24]
   13d78:	str	r1, [r3, #-72]	; 0xffffffb8
   13d7c:	str	r4, [r3, #-68]	; 0xffffffbc
   13d80:	str	lr, [sp, #28]
   13d84:	sub	r4, r0, ip
   13d88:	cmp	r6, #0
   13d8c:	mov	r1, r4
   13d90:	addne	r1, r4, #4
   13d94:	cmp	r8, #0
   13d98:	sub	r7, r7, r1
   13d9c:	ldrne	r3, [r5, #144]	; 0x90
   13da0:	str	r7, [sp, #12]
   13da4:	ldreq	r3, [r5, #140]	; 0x8c
   13da8:	cmp	r0, r4
   13dac:	sub	r3, r3, r1
   13db0:	str	r3, [sp, #16]
   13db4:	ble	13e7c <flatcc_builder_create_buffer@@Base+0x258>
   13db8:	mov	r3, r4
   13dbc:	add	r1, sp, #32
   13dc0:	str	ip, [sp]
   13dc4:	ldr	r0, [r5, #36]	; 0x24
   13dc8:	ldr	r6, [r5, #44]	; 0x2c
   13dcc:	blx	r6
   13dd0:	cmp	r0, #0
   13dd4:	bne	13e98 <flatcc_builder_create_buffer@@Base+0x274>
   13dd8:	cmp	r4, #0
   13ddc:	str	r4, [r5, #136]	; 0x88
   13de0:	beq	13e9c <flatcc_builder_create_buffer@@Base+0x278>
   13de4:	mov	r0, r4
   13de8:	add	sp, sp, #100	; 0x64
   13dec:	ldrd	r4, [sp]
   13df0:	ldrd	r6, [sp, #8]
   13df4:	ldrd	r8, [sp, #16]
   13df8:	ldrd	sl, [sp, #24]
   13dfc:	add	sp, sp, #32
   13e00:	pop	{pc}		; (ldr pc, [sp], #4)
   13e04:	mov	ip, #4
   13e08:	add	r3, sp, #16
   13e0c:	mov	r9, ip
   13e10:	mov	lr, #3
   13e14:	mov	r2, #2
   13e18:	str	r3, [sp, #32]
   13e1c:	mov	r3, #1
   13e20:	str	ip, [sp, #36]	; 0x24
   13e24:	mov	ip, #8
   13e28:	b	13d00 <flatcc_builder_create_buffer@@Base+0xdc>
   13e2c:	ldr	r3, [pc, #164]	; 13ed8 <flatcc_builder_create_buffer@@Base+0x2b4>
   13e30:	add	r0, sl, r1
   13e34:	mov	r2, #1
   13e38:	cmp	sl, r0
   13e3c:	str	r1, [sp, #24]
   13e40:	str	r0, [r5, #140]	; 0x8c
   13e44:	strd	r2, [sp, #28]
   13e48:	str	r1, [sp, #36]	; 0x24
   13e4c:	bgt	13ebc <flatcc_builder_create_buffer@@Base+0x298>
   13e50:	mov	r3, sl
   13e54:	str	r1, [sp]
   13e58:	add	r1, sp, #32
   13e5c:	ldr	r0, [r5, #36]	; 0x24
   13e60:	ldr	fp, [r5, #44]	; 0x2c
   13e64:	blx	fp
   13e68:	cmp	r0, #0
   13e6c:	bne	13eb8 <flatcc_builder_create_buffer@@Base+0x294>
   13e70:	cmn	sl, #1
   13e74:	bne	13c98 <flatcc_builder_create_buffer@@Base+0x74>
   13e78:	bl	130ac <flatcc_builder_default_alloc@@Base+0x174>
   13e7c:	movw	r1, #45508	; 0xb1c4
   13e80:	movt	r1, #1
   13e84:	ldr	r3, [pc, #80]	; 13edc <flatcc_builder_create_buffer@@Base+0x2b8>
   13e88:	movw	r0, #45700	; 0xb284
   13e8c:	movt	r0, #1
   13e90:	movw	r2, #647	; 0x287
   13e94:	bl	12324 <__assert_fail@plt>
   13e98:	bl	130d4 <flatcc_builder_default_alloc@@Base+0x19c>
   13e9c:	movw	r1, #45508	; 0xb1c4
   13ea0:	movt	r1, #1
   13ea4:	ldr	r3, [pc, #52]	; 13ee0 <flatcc_builder_create_buffer@@Base+0x2bc>
   13ea8:	movw	r0, #45700	; 0xb284
   13eac:	movt	r0, #1
   13eb0:	mov	r2, #772	; 0x304
   13eb4:	bl	12324 <__assert_fail@plt>
   13eb8:	bl	13084 <flatcc_builder_default_alloc@@Base+0x14c>
   13ebc:	movw	r1, #45508	; 0xb1c4
   13ec0:	movt	r1, #1
   13ec4:	movw	r0, #45700	; 0xb284
   13ec8:	movt	r0, #1
   13ecc:	sub	r3, r3, #152	; 0x98
   13ed0:	movw	r2, #673	; 0x2a1
   13ed4:	bl	12324 <__assert_fail@plt>
   13ed8:	andeq	sl, r1, ip, lsl fp
   13edc:	andeq	sl, r1, r0, lsr #21
   13ee0:	andeq	sl, r1, ip, ror sp

00013ee4 <flatcc_builder_create_struct@@Base>:
   13ee4:	cmp	r3, #0
   13ee8:	strd	r4, [sp, #-16]!
   13eec:	str	r6, [sp, #8]
   13ef0:	str	lr, [sp, #12]
   13ef4:	sub	sp, sp, #80	; 0x50
   13ef8:	beq	13ffc <flatcc_builder_create_struct@@Base+0x118>
   13efc:	mov	r4, r0
   13f00:	mov	r0, r2
   13f04:	ldrh	r2, [r4, #128]	; 0x80
   13f08:	ldr	ip, [r4, #136]	; 0x88
   13f0c:	cmp	r2, r3
   13f10:	mov	r2, #0
   13f14:	strhcc	r3, [r4, #128]	; 0x80
   13f18:	sub	r5, ip, r0
   13f1c:	sub	r3, r3, #1
   13f20:	cmp	r0, r2
   13f24:	and	r3, r3, r5
   13f28:	str	r2, [sp, #8]
   13f2c:	str	r2, [sp, #12]
   13f30:	bne	13fb0 <flatcc_builder_create_struct@@Base+0xcc>
   13f34:	cmp	r3, #0
   13f38:	movne	r1, r2
   13f3c:	movne	r0, r3
   13f40:	movne	r2, #1
   13f44:	beq	13fdc <flatcc_builder_create_struct@@Base+0xf8>
   13f48:	ldr	lr, [pc, #200]	; 14018 <flatcc_builder_create_struct@@Base+0x134>
   13f4c:	add	r5, sp, #80	; 0x50
   13f50:	add	r1, r1, #1
   13f54:	add	r1, r5, r1, lsl #3
   13f58:	sub	r5, ip, r0
   13f5c:	str	r0, [sp, #8]
   13f60:	str	r2, [sp, #12]
   13f64:	str	lr, [r1, #-72]	; 0xffffffb8
   13f68:	str	r3, [r1, #-68]	; 0xffffffbc
   13f6c:	cmp	ip, r5
   13f70:	ble	13fdc <flatcc_builder_create_struct@@Base+0xf8>
   13f74:	mov	r3, r5
   13f78:	add	r1, sp, #16
   13f7c:	str	r0, [sp]
   13f80:	ldr	r0, [r4, #36]	; 0x24
   13f84:	ldr	r6, [r4, #44]	; 0x2c
   13f88:	blx	r6
   13f8c:	cmp	r0, #0
   13f90:	bne	13ff8 <flatcc_builder_create_struct@@Base+0x114>
   13f94:	mov	r0, r5
   13f98:	str	r5, [r4, #136]	; 0x88
   13f9c:	add	sp, sp, #80	; 0x50
   13fa0:	ldrd	r4, [sp]
   13fa4:	ldr	r6, [sp, #8]
   13fa8:	add	sp, sp, #12
   13fac:	pop	{pc}		; (ldr pc, [sp], #4)
   13fb0:	mov	r2, #1
   13fb4:	cmp	r3, #0
   13fb8:	str	r0, [sp, #8]
   13fbc:	str	r2, [sp, #12]
   13fc0:	str	r1, [sp, #16]
   13fc4:	movne	r1, r2
   13fc8:	movne	r2, #2
   13fcc:	str	r0, [sp, #20]
   13fd0:	addne	r0, r0, r3
   13fd4:	beq	13f6c <flatcc_builder_create_struct@@Base+0x88>
   13fd8:	b	13f48 <flatcc_builder_create_struct@@Base+0x64>
   13fdc:	movw	r1, #45508	; 0xb1c4
   13fe0:	movt	r1, #1
   13fe4:	ldr	r3, [pc, #48]	; 1401c <flatcc_builder_create_struct@@Base+0x138>
   13fe8:	movw	r0, #45700	; 0xb284
   13fec:	movt	r0, #1
   13ff0:	movw	r2, #647	; 0x287
   13ff4:	bl	12324 <__assert_fail@plt>
   13ff8:	bl	130d4 <flatcc_builder_default_alloc@@Base+0x19c>
   13ffc:	movw	r1, #45508	; 0xb1c4
   14000:	movt	r1, #1
   14004:	ldr	r3, [pc, #20]	; 14020 <flatcc_builder_create_struct@@Base+0x13c>
   14008:	movw	r0, #45772	; 0xb2cc
   1400c:	movt	r0, #1
   14010:	movw	r2, #783	; 0x30f
   14014:	bl	12324 <__assert_fail@plt>
   14018:	andeq	sl, r1, ip, lsl fp
   1401c:	andeq	sl, r1, r0, lsr #21
   14020:	muleq	r1, ip, sp

00014024 <flatcc_builder_start_buffer@@Base>:
   14024:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14028:	mov	r5, r1
   1402c:	mov	r4, r0
   14030:	ldr	r1, [r0, #156]	; 0x9c
   14034:	strd	r6, [sp, #8]
   14038:	mov	r6, r3
   1403c:	mov	r7, r2
   14040:	ldr	r3, [r0, #160]	; 0xa0
   14044:	strd	r8, [sp, #16]
   14048:	ldrh	r8, [r0, #128]	; 0x80
   1404c:	add	r2, r1, #1
   14050:	strd	sl, [sp, #24]
   14054:	str	lr, [sp, #32]
   14058:	sub	sp, sp, #12
   1405c:	cmp	r2, r3
   14060:	str	r2, [r0, #156]	; 0x9c
   14064:	ble	141b0 <flatcc_builder_start_buffer@@Base+0x18c>
   14068:	ldr	r3, [r0, #176]	; 0xb0
   1406c:	cmp	r3, #0
   14070:	cmpgt	r2, r3
   14074:	movgt	r3, #1
   14078:	movle	r3, #0
   1407c:	bgt	141c0 <flatcc_builder_start_buffer@@Base+0x19c>
   14080:	add	r1, r1, r1, lsl #3
   14084:	ldr	r0, [r0, #88]	; 0x58
   14088:	lsl	r9, r1, #2
   1408c:	add	r2, r9, #36	; 0x24
   14090:	cmp	r2, r0
   14094:	bls	140b8 <flatcc_builder_start_buffer@@Base+0x94>
   14098:	mov	ip, #4
   1409c:	add	r1, r4, #84	; 0x54
   140a0:	ldr	r0, [r4, #40]	; 0x28
   140a4:	str	ip, [sp]
   140a8:	ldr	sl, [r4, #48]	; 0x30
   140ac:	blx	sl
   140b0:	cmp	r0, #0
   140b4:	bne	141c8 <flatcc_builder_start_buffer@@Base+0x1a4>
   140b8:	ldr	r3, [r4, #84]	; 0x54
   140bc:	add	r3, r3, r9
   140c0:	cmp	r3, #0
   140c4:	str	r3, [r4, #32]
   140c8:	beq	141c0 <flatcc_builder_start_buffer@@Base+0x19c>
   140cc:	ldr	r2, [r4, #88]	; 0x58
   140d0:	movw	r0, #36409	; 0x8e39
   140d4:	movt	r0, #14563	; 0x38e3
   140d8:	ldr	r1, [r4, #176]	; 0xb0
   140dc:	umull	r0, r2, r0, r2
   140e0:	lsr	r2, r2, #3
   140e4:	cmp	r1, #0
   140e8:	cmpgt	r2, r1
   140ec:	movgt	r2, r1
   140f0:	str	r2, [r4, #160]	; 0xa0
   140f4:	ldr	sl, [pc, #208]	; 141cc <flatcc_builder_start_buffer@@Base+0x1a8>
   140f8:	mov	r0, #0
   140fc:	mvn	lr, #3
   14100:	cmp	r5, r0
   14104:	ldr	r2, [r4, #20]
   14108:	ldr	ip, [r4, #28]
   1410c:	moveq	r5, sl
   14110:	ldrh	r9, [r4, #130]	; 0x82
   14114:	ldrh	fp, [r4, #132]	; 0x84
   14118:	ldr	r1, [r4, #148]	; 0x94
   1411c:	ldr	sl, [r4, #152]	; 0x98
   14120:	str	r2, [r3, #8]
   14124:	add	r2, r2, ip
   14128:	add	r2, r2, #7
   1412c:	strh	r9, [r3, #12]
   14130:	bic	r2, r2, #7
   14134:	strh	r8, [r4, #130]	; 0x82
   14138:	ldrh	r8, [r4, #164]	; 0xa4
   1413c:	ldr	r9, [r4, #136]	; 0x88
   14140:	stm	r3, {ip, lr}
   14144:	mov	ip, #1
   14148:	str	r0, [r4, #20]
   1414c:	str	r2, [r4, #28]
   14150:	add	r2, r1, ip
   14154:	strh	ip, [r4, #128]	; 0x80
   14158:	ldr	lr, [r4, #144]	; 0x90
   1415c:	strh	fp, [r3, #34]	; 0x22
   14160:	strh	r7, [r4, #132]	; 0x84
   14164:	ldr	r7, [r4, #168]	; 0xa8
   14168:	strh	r8, [r3, #32]
   1416c:	strh	r6, [r4, #164]	; 0xa4
   14170:	str	lr, [r3, #20]
   14174:	str	sl, [r3, #28]
   14178:	str	r9, [r4, #144]	; 0x90
   1417c:	str	r2, [r4, #148]	; 0x94
   14180:	str	r1, [r4, #152]	; 0x98
   14184:	str	r7, [r3, #16]
   14188:	ldr	r2, [r5]
   1418c:	str	r2, [r4, #168]	; 0xa8
   14190:	strh	ip, [r3, #14]
   14194:	add	sp, sp, #12
   14198:	ldrd	r4, [sp]
   1419c:	ldrd	r6, [sp, #8]
   141a0:	ldrd	r8, [sp, #16]
   141a4:	ldrd	sl, [sp, #24]
   141a8:	add	sp, sp, #32
   141ac:	pop	{pc}		; (ldr pc, [sp], #4)
   141b0:	ldr	r3, [r0, #32]
   141b4:	add	r3, r3, #36	; 0x24
   141b8:	str	r3, [r0, #32]
   141bc:	b	140f4 <flatcc_builder_start_buffer@@Base+0xd0>
   141c0:	mvn	r0, #0
   141c4:	b	14194 <flatcc_builder_start_buffer@@Base+0x170>
   141c8:	bl	1305c <flatcc_builder_default_alloc@@Base+0x124>
   141cc:	andeq	sl, r1, ip, lsl fp

000141d0 <flatcc_builder_end_buffer@@Base>:
   141d0:	ldr	ip, [r0, #32]
   141d4:	strd	r4, [sp, #-16]!
   141d8:	mov	r4, r0
   141dc:	ldrh	r2, [r0, #164]	; 0xa4
   141e0:	ldr	r0, [r0, #152]	; 0x98
   141e4:	ldrh	ip, [ip, #14]
   141e8:	and	r2, r2, #2
   141ec:	str	r6, [sp, #8]
   141f0:	str	lr, [sp, #12]
   141f4:	sub	sp, sp, #8
   141f8:	cmp	r0, #0
   141fc:	moveq	r0, r2
   14200:	orrne	r0, r2, #1
   14204:	cmp	ip, #1
   14208:	bne	142f0 <flatcc_builder_end_buffer@@Base+0x120>
   1420c:	ldrh	r2, [r4, #132]	; 0x84
   14210:	mov	r3, r1
   14214:	add	r1, r4, #168	; 0xa8
   14218:	ldrh	ip, [r4, #128]	; 0x80
   1421c:	cmp	r2, ip
   14220:	movhi	ip, r2
   14224:	strhhi	r2, [r4, #128]	; 0x80
   14228:	str	ip, [sp]
   1422c:	str	r0, [sp, #4]
   14230:	mov	r0, r4
   14234:	bl	13c24 <flatcc_builder_create_buffer@@Base>
   14238:	subs	r5, r0, #0
   1423c:	beq	142d8 <flatcc_builder_end_buffer@@Base+0x108>
   14240:	mov	r1, #0
   14244:	ldr	r0, [r4, #16]
   14248:	ldr	r3, [r4, #32]
   1424c:	ldr	r2, [r4, #20]
   14250:	ldrh	lr, [r3, #32]
   14254:	ldr	ip, [r3, #16]
   14258:	ldr	r6, [r3, #20]
   1425c:	ldr	r3, [r3, #28]
   14260:	str	r6, [r4, #144]	; 0x90
   14264:	strh	lr, [r4, #164]	; 0xa4
   14268:	str	r3, [r4, #152]	; 0x98
   1426c:	str	ip, [r4, #168]	; 0xa8
   14270:	bl	122f4 <memset@plt>
   14274:	ldr	r3, [r4, #32]
   14278:	ldr	r0, [r4, #60]	; 0x3c
   1427c:	ldr	r2, [r4, #64]	; 0x40
   14280:	ldr	ip, [r3]
   14284:	ldmib	r3, {r1, lr}
   14288:	add	r0, r0, ip
   1428c:	sub	r2, r2, ip
   14290:	str	r0, [r4, #16]
   14294:	cmp	r2, r1
   14298:	ldrh	r0, [r4, #128]	; 0x80
   1429c:	movcs	r2, r1
   142a0:	str	lr, [r4, #20]
   142a4:	str	ip, [r4, #28]
   142a8:	ldrh	ip, [r4, #130]	; 0x82
   142ac:	str	r2, [r4, #24]
   142b0:	ldr	r2, [r4, #156]	; 0x9c
   142b4:	str	r1, [r3, #4]
   142b8:	cmp	r0, ip
   142bc:	sub	r0, r3, #36	; 0x24
   142c0:	strhcc	ip, [r4, #128]	; 0x80
   142c4:	ldrh	r1, [r3, #12]
   142c8:	sub	r3, r2, #1
   142cc:	str	r0, [r4, #32]
   142d0:	strh	r1, [r4, #130]	; 0x82
   142d4:	str	r3, [r4, #156]	; 0x9c
   142d8:	mov	r0, r5
   142dc:	add	sp, sp, #8
   142e0:	ldrd	r4, [sp]
   142e4:	ldr	r6, [sp, #8]
   142e8:	add	sp, sp, #12
   142ec:	pop	{pc}		; (ldr pc, [sp], #4)
   142f0:	movw	r1, #45508	; 0xb1c4
   142f4:	movt	r1, #1
   142f8:	ldr	r3, [pc, #12]	; 1430c <flatcc_builder_end_buffer@@Base+0x13c>
   142fc:	movw	r0, #45784	; 0xb2d8
   14300:	movt	r0, #1
   14304:	movw	r2, #838	; 0x346
   14308:	bl	12324 <__assert_fail@plt>
   1430c:			; <UNDEFINED> instruction: 0x0001adbc

00014310 <flatcc_builder_start_struct@@Base>:
   14310:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14314:	mov	r5, r1
   14318:	mov	r4, r0
   1431c:	ldr	r1, [r0, #156]	; 0x9c
   14320:	ldr	r3, [r0, #160]	; 0xa0
   14324:	strd	r6, [sp, #8]
   14328:	mov	r6, r2
   1432c:	str	r8, [sp, #16]
   14330:	add	r2, r1, #1
   14334:	str	lr, [sp, #20]
   14338:	sub	sp, sp, #8
   1433c:	cmp	r2, r3
   14340:	str	r2, [r0, #156]	; 0x9c
   14344:	ble	14464 <flatcc_builder_start_struct@@Base+0x154>
   14348:	ldr	r3, [r0, #176]	; 0xb0
   1434c:	cmp	r3, #0
   14350:	cmpgt	r2, r3
   14354:	movgt	r3, #1
   14358:	movle	r3, #0
   1435c:	bgt	144d0 <flatcc_builder_start_struct@@Base+0x1c0>
   14360:	add	r1, r1, r1, lsl #3
   14364:	ldr	r0, [r0, #88]	; 0x58
   14368:	lsl	r7, r1, #2
   1436c:	add	r2, r7, #36	; 0x24
   14370:	cmp	r2, r0
   14374:	bls	14398 <flatcc_builder_start_struct@@Base+0x88>
   14378:	mov	ip, #4
   1437c:	add	r1, r4, #84	; 0x54
   14380:	ldr	r0, [r4, #40]	; 0x28
   14384:	str	ip, [sp]
   14388:	ldr	r8, [r4, #48]	; 0x30
   1438c:	blx	r8
   14390:	cmp	r0, #0
   14394:	bne	144d8 <flatcc_builder_start_struct@@Base+0x1c8>
   14398:	ldr	r1, [r4, #84]	; 0x54
   1439c:	add	r1, r1, r7
   143a0:	cmp	r1, #0
   143a4:	str	r1, [r4, #32]
   143a8:	beq	144d0 <flatcc_builder_start_struct@@Base+0x1c0>
   143ac:	ldr	r3, [r4, #88]	; 0x58
   143b0:	movw	r0, #36409	; 0x8e39
   143b4:	movt	r0, #14563	; 0x38e3
   143b8:	ldr	r2, [r4, #176]	; 0xb0
   143bc:	umull	r0, r3, r0, r3
   143c0:	lsr	r3, r3, #3
   143c4:	cmp	r2, #0
   143c8:	cmpgt	r3, r2
   143cc:	movgt	r3, r2
   143d0:	str	r3, [r4, #160]	; 0xa0
   143d4:	ldr	r3, [r4, #20]
   143d8:	mvn	lr, #3
   143dc:	ldr	ip, [r4, #28]
   143e0:	ldrh	r7, [r4, #130]	; 0x82
   143e4:	ldr	r2, [r4, #64]	; 0x40
   143e8:	ldr	r0, [r4, #60]	; 0x3c
   143ec:	str	r3, [r1, #8]
   143f0:	add	r3, r3, ip
   143f4:	add	r3, r3, #7
   143f8:	strh	r7, [r1, #12]
   143fc:	mov	r7, #0
   14400:	bic	r3, r3, #7
   14404:	strh	r6, [r4, #130]	; 0x82
   14408:	mvn	r6, #3
   1440c:	sub	r2, r2, r3
   14410:	stm	r1, {ip, lr}
   14414:	mov	ip, #2
   14418:	cmp	r2, lr
   1441c:	add	r0, r0, r3
   14420:	str	r7, [r4, #20]
   14424:	movhi	r2, lr
   14428:	str	r3, [r4, #28]
   1442c:	strh	ip, [r1, #14]
   14430:	strls	r2, [r4, #24]
   14434:	strhi	lr, [r4, #24]
   14438:	cmp	r5, r2
   1443c:	str	r0, [r4, #16]
   14440:	str	r6, [r1, #4]
   14444:	str	r5, [r4, #20]
   14448:	bcs	14474 <flatcc_builder_start_struct@@Base+0x164>
   1444c:	add	sp, sp, #8
   14450:	ldrd	r4, [sp]
   14454:	ldrd	r6, [sp, #8]
   14458:	ldr	r8, [sp, #16]
   1445c:	add	sp, sp, #20
   14460:	pop	{pc}		; (ldr pc, [sp], #4)
   14464:	ldr	r1, [r0, #32]
   14468:	add	r1, r1, #36	; 0x24
   1446c:	str	r1, [r0, #32]
   14470:	b	143d4 <flatcc_builder_start_struct@@Base+0xc4>
   14474:	mov	ip, #1
   14478:	add	r1, r4, #60	; 0x3c
   1447c:	ldr	r0, [r4, #40]	; 0x28
   14480:	add	r2, r5, ip
   14484:	add	r2, r2, r3
   14488:	mov	r3, ip
   1448c:	str	ip, [sp]
   14490:	ldr	r5, [r4, #48]	; 0x30
   14494:	blx	r5
   14498:	cmp	r0, #0
   1449c:	bne	144d0 <flatcc_builder_start_struct@@Base+0x1c0>
   144a0:	ldr	r0, [r4, #28]
   144a4:	ldr	r2, [r4, #32]
   144a8:	ldr	r3, [r4, #64]	; 0x40
   144ac:	ldr	r1, [r4, #60]	; 0x3c
   144b0:	sub	r3, r3, r0
   144b4:	cmp	r3, r6
   144b8:	movhi	r3, r6
   144bc:	add	r0, r1, r0
   144c0:	str	r0, [r4, #16]
   144c4:	str	r3, [r4, #24]
   144c8:	str	r6, [r2, #4]
   144cc:	b	1444c <flatcc_builder_start_struct@@Base+0x13c>
   144d0:	mov	r0, #0
   144d4:	b	1444c <flatcc_builder_start_struct@@Base+0x13c>
   144d8:	bl	1305c <flatcc_builder_default_alloc@@Base+0x124>

000144dc <flatcc_builder_struct_edit@@Base>:
   144dc:	ldr	r0, [r0, #16]
   144e0:	bx	lr

000144e4 <flatcc_builder_end_struct@@Base>:
   144e4:	ldr	r3, [r0, #32]
   144e8:	strd	r4, [sp, #-16]!
   144ec:	ldrh	r3, [r3, #14]
   144f0:	str	r6, [sp, #8]
   144f4:	str	lr, [sp, #12]
   144f8:	sub	sp, sp, #80	; 0x50
   144fc:	cmp	r3, #2
   14500:	bne	146a8 <flatcc_builder_end_struct@@Base+0x1c4>
   14504:	ldrh	r3, [r0, #130]	; 0x82
   14508:	mov	r4, r0
   1450c:	ldr	r1, [r0, #16]
   14510:	ldr	r0, [r0, #20]
   14514:	cmp	r3, #0
   14518:	beq	1468c <flatcc_builder_end_struct@@Base+0x1a8>
   1451c:	ldrh	r2, [r4, #128]	; 0x80
   14520:	ldr	ip, [r4, #136]	; 0x88
   14524:	cmp	r2, r3
   14528:	mov	r2, #0
   1452c:	strhcc	r3, [r4, #128]	; 0x80
   14530:	sub	r5, ip, r0
   14534:	sub	r3, r3, #1
   14538:	cmp	r0, r2
   1453c:	and	r3, r3, r5
   14540:	str	r2, [sp, #8]
   14544:	str	r2, [sp, #12]
   14548:	bne	14640 <flatcc_builder_end_struct@@Base+0x15c>
   1454c:	cmp	r3, #0
   14550:	movne	r1, r2
   14554:	movne	r0, r3
   14558:	movne	r2, #1
   1455c:	beq	1466c <flatcc_builder_end_struct@@Base+0x188>
   14560:	ldr	lr, [pc, #348]	; 146c4 <flatcc_builder_end_struct@@Base+0x1e0>
   14564:	add	r5, sp, #80	; 0x50
   14568:	add	r1, r1, #1
   1456c:	add	r1, r5, r1, lsl #3
   14570:	sub	r5, ip, r0
   14574:	str	r0, [sp, #8]
   14578:	str	r2, [sp, #12]
   1457c:	str	lr, [r1, #-72]	; 0xffffffb8
   14580:	str	r3, [r1, #-68]	; 0xffffffbc
   14584:	cmp	ip, r5
   14588:	ble	1466c <flatcc_builder_end_struct@@Base+0x188>
   1458c:	add	r1, sp, #16
   14590:	mov	r3, r5
   14594:	str	r0, [sp]
   14598:	ldr	r0, [r4, #36]	; 0x24
   1459c:	ldr	r6, [r4, #44]	; 0x2c
   145a0:	blx	r6
   145a4:	subs	r1, r0, #0
   145a8:	bne	14688 <flatcc_builder_end_struct@@Base+0x1a4>
   145ac:	cmp	r5, #0
   145b0:	str	r5, [r4, #136]	; 0x88
   145b4:	beq	14628 <flatcc_builder_end_struct@@Base+0x144>
   145b8:	ldr	r0, [r4, #16]
   145bc:	ldr	r2, [r4, #20]
   145c0:	bl	122f4 <memset@plt>
   145c4:	ldr	r3, [r4, #32]
   145c8:	ldr	r0, [r4, #60]	; 0x3c
   145cc:	ldr	r2, [r4, #64]	; 0x40
   145d0:	ldr	ip, [r3]
   145d4:	ldmib	r3, {r1, lr}
   145d8:	add	r0, r0, ip
   145dc:	sub	r2, r2, ip
   145e0:	str	r0, [r4, #16]
   145e4:	cmp	r2, r1
   145e8:	ldrh	r0, [r4, #128]	; 0x80
   145ec:	movcs	r2, r1
   145f0:	str	lr, [r4, #20]
   145f4:	str	ip, [r4, #28]
   145f8:	ldrh	ip, [r4, #130]	; 0x82
   145fc:	str	r2, [r4, #24]
   14600:	ldr	r2, [r4, #156]	; 0x9c
   14604:	str	r1, [r3, #4]
   14608:	cmp	r0, ip
   1460c:	sub	r0, r3, #36	; 0x24
   14610:	strhcc	ip, [r4, #128]	; 0x80
   14614:	ldrh	r1, [r3, #12]
   14618:	sub	r3, r2, #1
   1461c:	str	r0, [r4, #32]
   14620:	strh	r1, [r4, #130]	; 0x82
   14624:	str	r3, [r4, #156]	; 0x9c
   14628:	mov	r0, r5
   1462c:	add	sp, sp, #80	; 0x50
   14630:	ldrd	r4, [sp]
   14634:	ldr	r6, [sp, #8]
   14638:	add	sp, sp, #12
   1463c:	pop	{pc}		; (ldr pc, [sp], #4)
   14640:	mov	r2, #1
   14644:	cmp	r3, #0
   14648:	str	r0, [sp, #8]
   1464c:	str	r2, [sp, #12]
   14650:	str	r1, [sp, #16]
   14654:	movne	r1, r2
   14658:	movne	r2, #2
   1465c:	str	r0, [sp, #20]
   14660:	addne	r0, r0, r3
   14664:	beq	14584 <flatcc_builder_end_struct@@Base+0xa0>
   14668:	b	14560 <flatcc_builder_end_struct@@Base+0x7c>
   1466c:	movw	r1, #45508	; 0xb1c4
   14670:	movt	r1, #1
   14674:	ldr	r3, [pc, #76]	; 146c8 <flatcc_builder_end_struct@@Base+0x1e4>
   14678:	movw	r0, #45700	; 0xb284
   1467c:	movt	r0, #1
   14680:	movw	r2, #647	; 0x287
   14684:	bl	12324 <__assert_fail@plt>
   14688:	bl	130d4 <flatcc_builder_default_alloc@@Base+0x19c>
   1468c:	movw	r1, #45508	; 0xb1c4
   14690:	movt	r1, #1
   14694:	ldr	r3, [pc, #48]	; 146cc <flatcc_builder_end_struct@@Base+0x1e8>
   14698:	movw	r0, #45772	; 0xb2cc
   1469c:	movt	r0, #1
   146a0:	movw	r2, #783	; 0x30f
   146a4:	bl	12324 <__assert_fail@plt>
   146a8:	movw	r1, #45508	; 0xb1c4
   146ac:	movt	r1, #1
   146b0:	ldr	r3, [pc, #24]	; 146d0 <flatcc_builder_end_struct@@Base+0x1ec>
   146b4:	movw	r0, #45828	; 0xb304
   146b8:	movt	r0, #1
   146bc:	mov	r2, #872	; 0x368
   146c0:	bl	12324 <__assert_fail@plt>
   146c4:	andeq	sl, r1, ip, lsl fp
   146c8:	andeq	sl, r1, r0, lsr #21
   146cc:	muleq	r1, ip, sp
   146d0:	ldrdeq	sl, [r1], -r8

000146d4 <flatcc_builder_extend_vector@@Base>:
   146d4:	ldr	ip, [r0, #32]
   146d8:	strd	r4, [sp, #-20]!	; 0xffffffec
   146dc:	mov	r4, r0
   146e0:	ldr	r3, [ip, #20]
   146e4:	ldr	r0, [ip, #24]
   146e8:	strd	r6, [sp, #8]
   146ec:	str	lr, [sp, #16]
   146f0:	sub	sp, sp, #12
   146f4:	adds	r3, r1, r3
   146f8:	movcs	r5, #1
   146fc:	movcc	r5, #0
   14700:	cmp	r0, r3
   14704:	orrcc	r5, r5, #1
   14708:	cmp	r5, #0
   1470c:	bne	147b8 <flatcc_builder_extend_vector@@Base+0xe4>
   14710:	ldr	r2, [ip, #16]
   14714:	ldr	r6, [r4, #20]
   14718:	str	r3, [ip, #20]
   1471c:	ldr	r3, [r4, #24]
   14720:	mla	r2, r2, r1, r6
   14724:	cmp	r2, r3
   14728:	str	r2, [r4, #20]
   1472c:	bcs	1474c <flatcc_builder_extend_vector@@Base+0x78>
   14730:	ldr	r0, [r4, #16]
   14734:	add	r0, r0, r6
   14738:	add	sp, sp, #12
   1473c:	ldrd	r4, [sp]
   14740:	ldrd	r6, [sp, #8]
   14744:	add	sp, sp, #16
   14748:	pop	{pc}		; (ldr pc, [sp], #4)
   1474c:	ldr	ip, [r4, #28]
   14750:	mov	r0, #1
   14754:	add	r1, r4, #60	; 0x3c
   14758:	mov	r3, r0
   1475c:	str	r0, [sp]
   14760:	ldr	r7, [r4, #48]	; 0x30
   14764:	add	ip, ip, r0
   14768:	ldr	r0, [r4, #40]	; 0x28
   1476c:	add	r2, ip, r2
   14770:	blx	r7
   14774:	cmp	r0, #0
   14778:	bne	147b0 <flatcc_builder_extend_vector@@Base+0xdc>
   1477c:	ldr	r2, [r4, #28]
   14780:	ldr	r0, [r4, #60]	; 0x3c
   14784:	ldr	r3, [r4, #64]	; 0x40
   14788:	add	r0, r0, r2
   1478c:	sub	r3, r3, r2
   14790:	mvn	r2, #3
   14794:	str	r0, [r4, #16]
   14798:	cmn	r3, #4
   1479c:	mvnhi	r3, #3
   147a0:	str	r3, [r4, #24]
   147a4:	ldr	r3, [r4, #32]
   147a8:	str	r2, [r3, #4]
   147ac:	b	14734 <flatcc_builder_extend_vector@@Base+0x60>
   147b0:	mov	r0, r5
   147b4:	b	14738 <flatcc_builder_extend_vector@@Base+0x64>
   147b8:	bl	130fc <flatcc_builder_default_alloc@@Base+0x1c4>

000147bc <flatcc_builder_vector_push@@Base>:
   147bc:	ldr	r3, [r0, #32]
   147c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   147c4:	ldrh	r2, [r3, #14]
   147c8:	strd	r6, [sp, #8]
   147cc:	str	r8, [sp, #16]
   147d0:	str	lr, [sp, #20]
   147d4:	sub	sp, sp, #8
   147d8:	cmp	r2, #4
   147dc:	bne	148e0 <flatcc_builder_vector_push@@Base+0x124>
   147e0:	mov	r6, r1
   147e4:	ldr	r2, [r3, #20]
   147e8:	ldr	r1, [r3, #24]
   147ec:	cmp	r2, r1
   147f0:	bhi	148c4 <flatcc_builder_vector_push@@Base+0x108>
   147f4:	add	r2, r2, #1
   147f8:	ldr	r5, [r3, #16]
   147fc:	mov	r4, r0
   14800:	ldr	r7, [r0, #20]
   14804:	str	r2, [r3, #20]
   14808:	ldr	r3, [r0, #24]
   1480c:	add	ip, r5, r7
   14810:	cmp	ip, r3
   14814:	str	ip, [r0, #20]
   14818:	bcs	14858 <flatcc_builder_vector_push@@Base+0x9c>
   1481c:	ldr	r3, [r0, #16]
   14820:	adds	r3, r3, r7
   14824:	beq	1483c <flatcc_builder_vector_push@@Base+0x80>
   14828:	mov	r0, r3
   1482c:	mov	r2, r5
   14830:	mov	r1, r6
   14834:	bl	12294 <memcpy@plt>
   14838:	mov	r3, r0
   1483c:	mov	r0, r3
   14840:	add	sp, sp, #8
   14844:	ldrd	r4, [sp]
   14848:	ldrd	r6, [sp, #8]
   1484c:	ldr	r8, [sp, #16]
   14850:	add	sp, sp, #20
   14854:	pop	{pc}		; (ldr pc, [sp], #4)
   14858:	ldr	r2, [r4, #28]
   1485c:	mov	r0, #1
   14860:	add	r1, r4, #60	; 0x3c
   14864:	mov	r3, r0
   14868:	str	r0, [sp]
   1486c:	ldr	r8, [r4, #48]	; 0x30
   14870:	add	r2, r2, r0
   14874:	ldr	r0, [r4, #40]	; 0x28
   14878:	add	r2, r2, ip
   1487c:	blx	r8
   14880:	cmp	r0, #0
   14884:	bne	148bc <flatcc_builder_vector_push@@Base+0x100>
   14888:	ldr	r1, [r4, #28]
   1488c:	ldr	r3, [r4, #60]	; 0x3c
   14890:	ldr	r2, [r4, #64]	; 0x40
   14894:	add	r3, r3, r1
   14898:	sub	r2, r2, r1
   1489c:	mvn	r1, #3
   148a0:	str	r3, [r4, #16]
   148a4:	cmn	r2, #4
   148a8:	mvnhi	r2, #3
   148ac:	str	r2, [r4, #24]
   148b0:	ldr	r2, [r4, #32]
   148b4:	str	r1, [r2, #4]
   148b8:	b	14820 <flatcc_builder_vector_push@@Base+0x64>
   148bc:	mov	r3, #0
   148c0:	b	1483c <flatcc_builder_vector_push@@Base+0x80>
   148c4:	movw	r1, #45508	; 0xb1c4
   148c8:	movt	r1, #1
   148cc:	ldr	r3, [pc, #40]	; 148fc <flatcc_builder_vector_push@@Base+0x140>
   148d0:	movw	r0, #45916	; 0xb35c
   148d4:	movt	r0, #1
   148d8:	mov	r2, #908	; 0x38c
   148dc:	bl	12324 <__assert_fail@plt>
   148e0:	movw	r1, #45508	; 0xb1c4
   148e4:	movt	r1, #1
   148e8:	ldr	r3, [pc, #12]	; 148fc <flatcc_builder_vector_push@@Base+0x140>
   148ec:	movw	r0, #45872	; 0xb330
   148f0:	movt	r0, #1
   148f4:	movw	r2, #907	; 0x38b
   148f8:	bl	12324 <__assert_fail@plt>
   148fc:	strdeq	sl, [r1], -r4

00014900 <flatcc_builder_append_vector@@Base>:
   14900:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14904:	mov	r5, r0
   14908:	ldr	r0, [r0, #32]
   1490c:	ldrh	r3, [r0, #14]
   14910:	strd	r6, [sp, #8]
   14914:	strd	r8, [sp, #16]
   14918:	str	lr, [sp, #24]
   1491c:	sub	sp, sp, #12
   14920:	cmp	r3, #4
   14924:	bne	14a24 <flatcc_builder_append_vector@@Base+0x124>
   14928:	mov	r6, r1
   1492c:	ldr	r1, [r0, #20]
   14930:	ldr	r4, [r0, #24]
   14934:	adds	r1, r2, r1
   14938:	movcs	r3, #1
   1493c:	movcc	r3, #0
   14940:	cmp	r4, r1
   14944:	movcs	r4, r3
   14948:	orrcc	r4, r3, #1
   1494c:	cmp	r4, #0
   14950:	bne	14a20 <flatcc_builder_append_vector@@Base+0x120>
   14954:	ldr	r7, [r0, #16]
   14958:	ldr	r8, [r5, #20]
   1495c:	ldr	r3, [r5, #24]
   14960:	mul	r7, r7, r2
   14964:	str	r1, [r0, #20]
   14968:	add	ip, r7, r8
   1496c:	cmp	ip, r3
   14970:	str	ip, [r5, #20]
   14974:	bcs	149b4 <flatcc_builder_append_vector@@Base+0xb4>
   14978:	ldr	r3, [r5, #16]
   1497c:	adds	r3, r3, r8
   14980:	beq	14998 <flatcc_builder_append_vector@@Base+0x98>
   14984:	mov	r0, r3
   14988:	mov	r2, r7
   1498c:	mov	r1, r6
   14990:	bl	12294 <memcpy@plt>
   14994:	mov	r3, r0
   14998:	mov	r0, r3
   1499c:	add	sp, sp, #12
   149a0:	ldrd	r4, [sp]
   149a4:	ldrd	r6, [sp, #8]
   149a8:	ldrd	r8, [sp, #16]
   149ac:	add	sp, sp, #24
   149b0:	pop	{pc}		; (ldr pc, [sp], #4)
   149b4:	ldr	r2, [r5, #28]
   149b8:	mov	r0, #1
   149bc:	add	r1, r5, #60	; 0x3c
   149c0:	mov	r3, r0
   149c4:	str	r0, [sp]
   149c8:	ldr	r9, [r5, #48]	; 0x30
   149cc:	add	r2, r2, r0
   149d0:	ldr	r0, [r5, #40]	; 0x28
   149d4:	add	r2, r2, ip
   149d8:	blx	r9
   149dc:	cmp	r0, #0
   149e0:	bne	14a18 <flatcc_builder_append_vector@@Base+0x118>
   149e4:	ldr	r1, [r5, #28]
   149e8:	ldr	r3, [r5, #60]	; 0x3c
   149ec:	ldr	r2, [r5, #64]	; 0x40
   149f0:	add	r3, r3, r1
   149f4:	sub	r2, r2, r1
   149f8:	mvn	r1, #3
   149fc:	str	r3, [r5, #16]
   14a00:	cmn	r2, #4
   14a04:	mvnhi	r2, #3
   14a08:	str	r2, [r5, #24]
   14a0c:	ldr	r2, [r5, #32]
   14a10:	str	r1, [r2, #4]
   14a14:	b	1497c <flatcc_builder_append_vector@@Base+0x7c>
   14a18:	mov	r3, r4
   14a1c:	b	14998 <flatcc_builder_append_vector@@Base+0x98>
   14a20:	bl	130fc <flatcc_builder_default_alloc@@Base+0x1c4>
   14a24:	movw	r1, #45508	; 0xb1c4
   14a28:	movt	r1, #1
   14a2c:	ldr	r3, [pc, #12]	; 14a40 <flatcc_builder_append_vector@@Base+0x140>
   14a30:	movw	r0, #45872	; 0xb330
   14a34:	movt	r0, #1
   14a38:	movw	r2, #915	; 0x393
   14a3c:	bl	12324 <__assert_fail@plt>
   14a40:	andeq	sl, r1, r0, lsl lr

00014a44 <flatcc_builder_extend_offset_vector@@Base>:
   14a44:	ldr	ip, [r0, #32]
   14a48:	strd	r4, [sp, #-20]!	; 0xffffffec
   14a4c:	mov	r4, r0
   14a50:	ldr	r3, [ip, #20]
   14a54:	strd	r6, [sp, #8]
   14a58:	str	lr, [sp, #16]
   14a5c:	sub	sp, sp, #12
   14a60:	adds	r3, r1, r3
   14a64:	movcs	r2, #1
   14a68:	movcc	r2, #0
   14a6c:	cmn	r3, #-1073741823	; 0xc0000001
   14a70:	movls	r0, #0
   14a74:	movhi	r0, #1
   14a78:	orrs	r5, r2, r0
   14a7c:	bne	14b24 <flatcc_builder_extend_offset_vector@@Base+0xe0>
   14a80:	ldr	r6, [r4, #20]
   14a84:	str	r3, [ip, #20]
   14a88:	ldr	r3, [r4, #24]
   14a8c:	add	r2, r6, r1, lsl #2
   14a90:	cmp	r2, r3
   14a94:	str	r2, [r4, #20]
   14a98:	bcs	14ab8 <flatcc_builder_extend_offset_vector@@Base+0x74>
   14a9c:	ldr	r0, [r4, #16]
   14aa0:	add	r0, r0, r6
   14aa4:	add	sp, sp, #12
   14aa8:	ldrd	r4, [sp]
   14aac:	ldrd	r6, [sp, #8]
   14ab0:	add	sp, sp, #16
   14ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ab8:	ldr	ip, [r4, #28]
   14abc:	mov	r0, #1
   14ac0:	add	r1, r4, #60	; 0x3c
   14ac4:	mov	r3, r0
   14ac8:	str	r0, [sp]
   14acc:	ldr	r7, [r4, #48]	; 0x30
   14ad0:	add	ip, ip, r0
   14ad4:	ldr	r0, [r4, #40]	; 0x28
   14ad8:	add	r2, ip, r2
   14adc:	blx	r7
   14ae0:	cmp	r0, #0
   14ae4:	bne	14b1c <flatcc_builder_extend_offset_vector@@Base+0xd8>
   14ae8:	ldr	r2, [r4, #28]
   14aec:	ldr	r0, [r4, #60]	; 0x3c
   14af0:	ldr	r3, [r4, #64]	; 0x40
   14af4:	add	r0, r0, r2
   14af8:	sub	r3, r3, r2
   14afc:	mvn	r2, #3
   14b00:	str	r0, [r4, #16]
   14b04:	cmn	r3, #4
   14b08:	mvnhi	r3, #3
   14b0c:	str	r3, [r4, #24]
   14b10:	ldr	r3, [r4, #32]
   14b14:	str	r2, [r3, #4]
   14b18:	b	14aa0 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   14b1c:	mov	r0, r5
   14b20:	b	14aa4 <flatcc_builder_extend_offset_vector@@Base+0x60>
   14b24:	bl	130fc <flatcc_builder_default_alloc@@Base+0x1c4>

00014b28 <flatcc_builder_offset_vector_push@@Base>:
   14b28:	ldr	r2, [r0, #32]
   14b2c:	strd	r4, [sp, #-20]!	; 0xffffffec
   14b30:	ldrh	r3, [r2, #14]
   14b34:	strd	r6, [sp, #8]
   14b38:	str	lr, [sp, #16]
   14b3c:	sub	sp, sp, #12
   14b40:	cmp	r3, #5
   14b44:	bne	14c08 <flatcc_builder_offset_vector_push@@Base+0xe0>
   14b48:	ldr	r3, [r2, #20]
   14b4c:	cmn	r3, #-1073741823	; 0xc0000001
   14b50:	beq	14c00 <flatcc_builder_offset_vector_push@@Base+0xd8>
   14b54:	ldr	r5, [r0, #20]
   14b58:	mov	r6, r1
   14b5c:	add	r3, r3, #1
   14b60:	mov	r4, r0
   14b64:	ldr	r1, [r0, #24]
   14b68:	str	r3, [r2, #20]
   14b6c:	add	r3, r5, #4
   14b70:	cmp	r3, r1
   14b74:	str	r3, [r0, #20]
   14b78:	bcs	14b9c <flatcc_builder_offset_vector_push@@Base+0x74>
   14b7c:	ldr	r3, [r0, #16]
   14b80:	adds	r0, r3, r5
   14b84:	strne	r6, [r3, r5]
   14b88:	add	sp, sp, #12
   14b8c:	ldrd	r4, [sp]
   14b90:	ldrd	r6, [sp, #8]
   14b94:	add	sp, sp, #16
   14b98:	pop	{pc}		; (ldr pc, [sp], #4)
   14b9c:	ldr	r2, [r4, #28]
   14ba0:	mov	r0, #1
   14ba4:	add	r1, r4, #60	; 0x3c
   14ba8:	mov	r3, r0
   14bac:	str	r0, [sp]
   14bb0:	ldr	r0, [r4, #40]	; 0x28
   14bb4:	add	r2, r5, r2
   14bb8:	ldr	r7, [r4, #48]	; 0x30
   14bbc:	add	r2, r2, #5
   14bc0:	blx	r7
   14bc4:	cmp	r0, #0
   14bc8:	bne	14c00 <flatcc_builder_offset_vector_push@@Base+0xd8>
   14bcc:	ldr	r1, [r4, #28]
   14bd0:	ldr	r3, [r4, #60]	; 0x3c
   14bd4:	ldr	r2, [r4, #64]	; 0x40
   14bd8:	add	r3, r3, r1
   14bdc:	sub	r2, r2, r1
   14be0:	mvn	r1, #3
   14be4:	str	r3, [r4, #16]
   14be8:	cmn	r2, #4
   14bec:	mvnhi	r2, #3
   14bf0:	str	r2, [r4, #24]
   14bf4:	ldr	r2, [r4, #32]
   14bf8:	str	r1, [r2, #4]
   14bfc:	b	14b80 <flatcc_builder_offset_vector_push@@Base+0x58>
   14c00:	mov	r0, #0
   14c04:	b	14b88 <flatcc_builder_offset_vector_push@@Base+0x60>
   14c08:	movw	r1, #45508	; 0xb1c4
   14c0c:	movt	r1, #1
   14c10:	ldr	r3, [pc, #12]	; 14c24 <flatcc_builder_offset_vector_push@@Base+0xfc>
   14c14:	movw	r0, #45980	; 0xb39c
   14c18:	movt	r0, #1
   14c1c:	movw	r2, #934	; 0x3a6
   14c20:	bl	12324 <__assert_fail@plt>
   14c24:	andeq	sl, r1, r0, lsr lr

00014c28 <flatcc_builder_append_offset_vector@@Base>:
   14c28:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14c2c:	mov	r5, r0
   14c30:	ldr	r0, [r0, #32]
   14c34:	ldrh	r3, [r0, #14]
   14c38:	strd	r6, [sp, #8]
   14c3c:	strd	r8, [sp, #16]
   14c40:	str	lr, [sp, #24]
   14c44:	sub	sp, sp, #12
   14c48:	cmp	r3, #5
   14c4c:	bne	14d44 <flatcc_builder_append_offset_vector@@Base+0x11c>
   14c50:	ldr	r3, [r0, #20]
   14c54:	mov	r7, r1
   14c58:	adds	r1, r2, r3
   14c5c:	movcs	r4, #1
   14c60:	movcc	r4, #0
   14c64:	cmn	r1, #-1073741823	; 0xc0000001
   14c68:	movls	r3, #0
   14c6c:	movhi	r3, #1
   14c70:	orrs	r4, r4, r3
   14c74:	bne	14d40 <flatcc_builder_append_offset_vector@@Base+0x118>
   14c78:	ldr	r8, [r5, #20]
   14c7c:	lsl	r6, r2, #2
   14c80:	ldr	r3, [r5, #24]
   14c84:	str	r1, [r0, #20]
   14c88:	add	ip, r6, r8
   14c8c:	cmp	ip, r3
   14c90:	str	ip, [r5, #20]
   14c94:	bcs	14cd4 <flatcc_builder_append_offset_vector@@Base+0xac>
   14c98:	ldr	r3, [r5, #16]
   14c9c:	adds	r3, r3, r8
   14ca0:	beq	14cb8 <flatcc_builder_append_offset_vector@@Base+0x90>
   14ca4:	mov	r0, r3
   14ca8:	mov	r2, r6
   14cac:	mov	r1, r7
   14cb0:	bl	12294 <memcpy@plt>
   14cb4:	mov	r3, r0
   14cb8:	mov	r0, r3
   14cbc:	add	sp, sp, #12
   14cc0:	ldrd	r4, [sp]
   14cc4:	ldrd	r6, [sp, #8]
   14cc8:	ldrd	r8, [sp, #16]
   14ccc:	add	sp, sp, #24
   14cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   14cd4:	ldr	r2, [r5, #28]
   14cd8:	mov	r0, #1
   14cdc:	add	r1, r5, #60	; 0x3c
   14ce0:	mov	r3, r0
   14ce4:	str	r0, [sp]
   14ce8:	ldr	r9, [r5, #48]	; 0x30
   14cec:	add	r2, r2, r0
   14cf0:	ldr	r0, [r5, #40]	; 0x28
   14cf4:	add	r2, r2, ip
   14cf8:	blx	r9
   14cfc:	cmp	r0, #0
   14d00:	bne	14d38 <flatcc_builder_append_offset_vector@@Base+0x110>
   14d04:	ldr	r1, [r5, #28]
   14d08:	ldr	r3, [r5, #60]	; 0x3c
   14d0c:	ldr	r2, [r5, #64]	; 0x40
   14d10:	add	r3, r3, r1
   14d14:	sub	r2, r2, r1
   14d18:	mvn	r1, #3
   14d1c:	str	r3, [r5, #16]
   14d20:	cmn	r2, #4
   14d24:	mvnhi	r2, #3
   14d28:	str	r2, [r5, #24]
   14d2c:	ldr	r2, [r5, #32]
   14d30:	str	r1, [r2, #4]
   14d34:	b	14c9c <flatcc_builder_append_offset_vector@@Base+0x74>
   14d38:	mov	r3, r4
   14d3c:	b	14cb8 <flatcc_builder_append_offset_vector@@Base+0x90>
   14d40:	bl	130fc <flatcc_builder_default_alloc@@Base+0x1c4>
   14d44:	movw	r1, #45508	; 0xb1c4
   14d48:	movt	r1, #1
   14d4c:	ldr	r3, [pc, #12]	; 14d60 <flatcc_builder_append_offset_vector@@Base+0x138>
   14d50:	movw	r0, #45980	; 0xb39c
   14d54:	movt	r0, #1
   14d58:	mov	r2, #948	; 0x3b4
   14d5c:	bl	12324 <__assert_fail@plt>
   14d60:	andeq	sl, r1, r4, asr lr

00014d64 <flatcc_builder_extend_string@@Base>:
   14d64:	ldr	r2, [r0, #32]
   14d68:	strd	r4, [sp, #-16]!
   14d6c:	ldrh	r3, [r2, #14]
   14d70:	str	r6, [sp, #8]
   14d74:	str	lr, [sp, #12]
   14d78:	sub	sp, sp, #8
   14d7c:	cmp	r3, #6
   14d80:	bne	14e3c <flatcc_builder_extend_string@@Base+0xd8>
   14d84:	ldr	r3, [r2, #20]
   14d88:	adds	r3, r1, r3
   14d8c:	bcs	14e38 <flatcc_builder_extend_string@@Base+0xd4>
   14d90:	ldr	r5, [r0, #20]
   14d94:	mov	r4, r0
   14d98:	str	r3, [r2, #20]
   14d9c:	ldr	r3, [r0, #24]
   14da0:	add	r2, r1, r5
   14da4:	cmp	r2, r3
   14da8:	str	r2, [r0, #20]
   14dac:	bcs	14dcc <flatcc_builder_extend_string@@Base+0x68>
   14db0:	ldr	r0, [r0, #16]
   14db4:	add	r0, r0, r5
   14db8:	add	sp, sp, #8
   14dbc:	ldrd	r4, [sp]
   14dc0:	ldr	r6, [sp, #8]
   14dc4:	add	sp, sp, #12
   14dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   14dcc:	ldr	ip, [r4, #28]
   14dd0:	mov	r0, #1
   14dd4:	add	r1, r4, #60	; 0x3c
   14dd8:	mov	r3, r0
   14ddc:	str	r0, [sp]
   14de0:	ldr	r6, [r4, #48]	; 0x30
   14de4:	add	ip, ip, r0
   14de8:	ldr	r0, [r4, #40]	; 0x28
   14dec:	add	r2, ip, r2
   14df0:	blx	r6
   14df4:	cmp	r0, #0
   14df8:	bne	14e30 <flatcc_builder_extend_string@@Base+0xcc>
   14dfc:	ldr	r2, [r4, #28]
   14e00:	ldr	r0, [r4, #60]	; 0x3c
   14e04:	ldr	r3, [r4, #64]	; 0x40
   14e08:	add	r0, r0, r2
   14e0c:	sub	r3, r3, r2
   14e10:	mvn	r2, #3
   14e14:	str	r0, [r4, #16]
   14e18:	cmn	r3, #4
   14e1c:	mvnhi	r3, #3
   14e20:	str	r3, [r4, #24]
   14e24:	ldr	r3, [r4, #32]
   14e28:	str	r2, [r3, #4]
   14e2c:	b	14db4 <flatcc_builder_extend_string@@Base+0x50>
   14e30:	mov	r0, #0
   14e34:	b	14db8 <flatcc_builder_extend_string@@Base+0x54>
   14e38:	bl	130fc <flatcc_builder_default_alloc@@Base+0x1c4>
   14e3c:	movw	r1, #45508	; 0xb1c4
   14e40:	movt	r1, #1
   14e44:	ldr	r3, [pc, #12]	; 14e58 <flatcc_builder_extend_string@@Base+0xf4>
   14e48:	movw	r0, #45636	; 0xb244
   14e4c:	movt	r0, #1
   14e50:	movw	r2, #957	; 0x3bd
   14e54:	bl	12324 <__assert_fail@plt>
   14e58:	andeq	sl, r1, r8, ror lr

00014e5c <flatcc_builder_append_string@@Base>:
   14e5c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14e60:	strd	r6, [sp, #8]
   14e64:	mov	r6, r1
   14e68:	ldr	r1, [r0, #32]
   14e6c:	str	r8, [sp, #16]
   14e70:	str	lr, [sp, #20]
   14e74:	sub	sp, sp, #8
   14e78:	ldrh	r3, [r1, #14]
   14e7c:	cmp	r3, #6
   14e80:	bne	14f60 <flatcc_builder_append_string@@Base+0x104>
   14e84:	ldr	r3, [r1, #20]
   14e88:	mov	r5, r2
   14e8c:	adds	r3, r2, r3
   14e90:	bcs	14f5c <flatcc_builder_append_string@@Base+0x100>
   14e94:	ldr	r7, [r0, #20]
   14e98:	mov	r4, r0
   14e9c:	str	r3, [r1, #20]
   14ea0:	ldr	r3, [r0, #24]
   14ea4:	add	ip, r2, r7
   14ea8:	cmp	ip, r3
   14eac:	str	ip, [r0, #20]
   14eb0:	bcs	14ef0 <flatcc_builder_append_string@@Base+0x94>
   14eb4:	ldr	r3, [r0, #16]
   14eb8:	adds	r3, r3, r7
   14ebc:	beq	14ed4 <flatcc_builder_append_string@@Base+0x78>
   14ec0:	mov	r0, r3
   14ec4:	mov	r2, r5
   14ec8:	mov	r1, r6
   14ecc:	bl	12294 <memcpy@plt>
   14ed0:	mov	r3, r0
   14ed4:	mov	r0, r3
   14ed8:	add	sp, sp, #8
   14edc:	ldrd	r4, [sp]
   14ee0:	ldrd	r6, [sp, #8]
   14ee4:	ldr	r8, [sp, #16]
   14ee8:	add	sp, sp, #20
   14eec:	pop	{pc}		; (ldr pc, [sp], #4)
   14ef0:	ldr	r2, [r4, #28]
   14ef4:	mov	r0, #1
   14ef8:	add	r1, r4, #60	; 0x3c
   14efc:	mov	r3, r0
   14f00:	str	r0, [sp]
   14f04:	ldr	r8, [r4, #48]	; 0x30
   14f08:	add	r2, r2, r0
   14f0c:	ldr	r0, [r4, #40]	; 0x28
   14f10:	add	r2, r2, ip
   14f14:	blx	r8
   14f18:	cmp	r0, #0
   14f1c:	bne	14f54 <flatcc_builder_append_string@@Base+0xf8>
   14f20:	ldr	r1, [r4, #28]
   14f24:	ldr	r3, [r4, #60]	; 0x3c
   14f28:	ldr	r2, [r4, #64]	; 0x40
   14f2c:	add	r3, r3, r1
   14f30:	sub	r2, r2, r1
   14f34:	mvn	r1, #3
   14f38:	str	r3, [r4, #16]
   14f3c:	cmn	r2, #4
   14f40:	mvnhi	r2, #3
   14f44:	str	r2, [r4, #24]
   14f48:	ldr	r2, [r4, #32]
   14f4c:	str	r1, [r2, #4]
   14f50:	b	14eb8 <flatcc_builder_append_string@@Base+0x5c>
   14f54:	mov	r3, #0
   14f58:	b	14ed4 <flatcc_builder_append_string@@Base+0x78>
   14f5c:	bl	130fc <flatcc_builder_default_alloc@@Base+0x1c4>
   14f60:	bl	1314c <flatcc_builder_default_alloc@@Base+0x214>

00014f64 <flatcc_builder_append_string_str@@Base>:
   14f64:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14f68:	mov	r4, r0
   14f6c:	mov	r0, r1
   14f70:	strd	r6, [sp, #8]
   14f74:	mov	r6, r1
   14f78:	str	r8, [sp, #16]
   14f7c:	str	lr, [sp, #20]
   14f80:	sub	sp, sp, #8
   14f84:	bl	122dc <strlen@plt>
   14f88:	ldr	r2, [r4, #32]
   14f8c:	ldrh	r3, [r2, #14]
   14f90:	cmp	r3, #6
   14f94:	bne	15070 <flatcc_builder_append_string_str@@Base+0x10c>
   14f98:	ldr	r3, [r2, #20]
   14f9c:	mov	r5, r0
   14fa0:	adds	r3, r0, r3
   14fa4:	bcs	1506c <flatcc_builder_append_string_str@@Base+0x108>
   14fa8:	ldr	r7, [r4, #20]
   14fac:	str	r3, [r2, #20]
   14fb0:	ldr	r3, [r4, #24]
   14fb4:	add	ip, r0, r7
   14fb8:	cmp	ip, r3
   14fbc:	str	ip, [r4, #20]
   14fc0:	bcs	15000 <flatcc_builder_append_string_str@@Base+0x9c>
   14fc4:	ldr	r3, [r4, #16]
   14fc8:	adds	r3, r3, r7
   14fcc:	beq	14fe4 <flatcc_builder_append_string_str@@Base+0x80>
   14fd0:	mov	r0, r3
   14fd4:	mov	r2, r5
   14fd8:	mov	r1, r6
   14fdc:	bl	12294 <memcpy@plt>
   14fe0:	mov	r3, r0
   14fe4:	mov	r0, r3
   14fe8:	add	sp, sp, #8
   14fec:	ldrd	r4, [sp]
   14ff0:	ldrd	r6, [sp, #8]
   14ff4:	ldr	r8, [sp, #16]
   14ff8:	add	sp, sp, #20
   14ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   15000:	ldr	r2, [r4, #28]
   15004:	mov	r0, #1
   15008:	add	r1, r4, #60	; 0x3c
   1500c:	mov	r3, r0
   15010:	str	r0, [sp]
   15014:	ldr	r8, [r4, #48]	; 0x30
   15018:	add	r2, r2, r0
   1501c:	ldr	r0, [r4, #40]	; 0x28
   15020:	add	r2, r2, ip
   15024:	blx	r8
   15028:	cmp	r0, #0
   1502c:	bne	15064 <flatcc_builder_append_string_str@@Base+0x100>
   15030:	ldr	r1, [r4, #28]
   15034:	ldr	r3, [r4, #60]	; 0x3c
   15038:	ldr	r2, [r4, #64]	; 0x40
   1503c:	add	r3, r3, r1
   15040:	sub	r2, r2, r1
   15044:	mvn	r1, #3
   15048:	str	r3, [r4, #16]
   1504c:	cmn	r2, #4
   15050:	mvnhi	r2, #3
   15054:	str	r2, [r4, #24]
   15058:	ldr	r2, [r4, #32]
   1505c:	str	r1, [r2, #4]
   15060:	b	14fc8 <flatcc_builder_append_string_str@@Base+0x64>
   15064:	mov	r3, #0
   15068:	b	14fe4 <flatcc_builder_append_string_str@@Base+0x80>
   1506c:	bl	130fc <flatcc_builder_default_alloc@@Base+0x1c4>
   15070:	bl	1314c <flatcc_builder_default_alloc@@Base+0x214>

00015074 <flatcc_builder_append_string_strn@@Base>:
   15074:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15078:	mov	r4, r0
   1507c:	mov	r5, r2
   15080:	strd	r6, [sp, #8]
   15084:	mov	r6, r1
   15088:	mov	r1, #0
   1508c:	mov	r0, r6
   15090:	str	r8, [sp, #16]
   15094:	str	lr, [sp, #20]
   15098:	sub	sp, sp, #8
   1509c:	bl	1230c <memchr@plt>
   150a0:	ldr	r2, [r4, #32]
   150a4:	cmp	r0, #0
   150a8:	subne	r5, r0, r6
   150ac:	ldrh	r3, [r2, #14]
   150b0:	cmp	r3, #6
   150b4:	bne	1518c <flatcc_builder_append_string_strn@@Base+0x118>
   150b8:	ldr	r3, [r2, #20]
   150bc:	adds	r3, r5, r3
   150c0:	bcs	15188 <flatcc_builder_append_string_strn@@Base+0x114>
   150c4:	ldr	r7, [r4, #20]
   150c8:	str	r3, [r2, #20]
   150cc:	ldr	r3, [r4, #24]
   150d0:	add	ip, r5, r7
   150d4:	cmp	ip, r3
   150d8:	str	ip, [r4, #20]
   150dc:	bcs	1511c <flatcc_builder_append_string_strn@@Base+0xa8>
   150e0:	ldr	r3, [r4, #16]
   150e4:	adds	r3, r3, r7
   150e8:	beq	15100 <flatcc_builder_append_string_strn@@Base+0x8c>
   150ec:	mov	r0, r3
   150f0:	mov	r2, r5
   150f4:	mov	r1, r6
   150f8:	bl	12294 <memcpy@plt>
   150fc:	mov	r3, r0
   15100:	mov	r0, r3
   15104:	add	sp, sp, #8
   15108:	ldrd	r4, [sp]
   1510c:	ldrd	r6, [sp, #8]
   15110:	ldr	r8, [sp, #16]
   15114:	add	sp, sp, #20
   15118:	pop	{pc}		; (ldr pc, [sp], #4)
   1511c:	ldr	r2, [r4, #28]
   15120:	mov	r0, #1
   15124:	add	r1, r4, #60	; 0x3c
   15128:	mov	r3, r0
   1512c:	str	r0, [sp]
   15130:	ldr	r8, [r4, #48]	; 0x30
   15134:	add	r2, r2, r0
   15138:	ldr	r0, [r4, #40]	; 0x28
   1513c:	add	r2, r2, ip
   15140:	blx	r8
   15144:	cmp	r0, #0
   15148:	bne	15180 <flatcc_builder_append_string_strn@@Base+0x10c>
   1514c:	ldr	r1, [r4, #28]
   15150:	ldr	r3, [r4, #60]	; 0x3c
   15154:	ldr	r2, [r4, #64]	; 0x40
   15158:	add	r3, r3, r1
   1515c:	sub	r2, r2, r1
   15160:	mvn	r1, #3
   15164:	str	r3, [r4, #16]
   15168:	cmn	r2, #4
   1516c:	mvnhi	r2, #3
   15170:	str	r2, [r4, #24]
   15174:	ldr	r2, [r4, #32]
   15178:	str	r1, [r2, #4]
   1517c:	b	150e4 <flatcc_builder_append_string_strn@@Base+0x70>
   15180:	mov	r3, #0
   15184:	b	15100 <flatcc_builder_append_string_strn@@Base+0x8c>
   15188:	bl	130fc <flatcc_builder_default_alloc@@Base+0x1c4>
   1518c:	bl	1314c <flatcc_builder_default_alloc@@Base+0x214>

00015190 <flatcc_builder_truncate_vector@@Base>:
   15190:	mov	r3, r0
   15194:	ldr	r0, [r0, #32]
   15198:	str	r4, [sp, #-8]!
   1519c:	ldrh	r2, [r0, #14]
   151a0:	str	lr, [sp, #4]
   151a4:	cmp	r2, #4
   151a8:	bne	151f8 <flatcc_builder_truncate_vector@@Base+0x68>
   151ac:	mov	lr, r1
   151b0:	ldr	r1, [r0, #20]
   151b4:	cmp	r1, lr
   151b8:	bcc	15214 <flatcc_builder_truncate_vector@@Base+0x84>
   151bc:	ldr	r2, [r0, #16]
   151c0:	sub	ip, r1, lr
   151c4:	mov	r1, #0
   151c8:	str	ip, [r0, #20]
   151cc:	ldr	r0, [r3, #16]
   151d0:	ldr	ip, [r3, #20]
   151d4:	mul	r2, r2, lr
   151d8:	sub	ip, ip, r2
   151dc:	add	r0, r0, ip
   151e0:	str	ip, [r3, #20]
   151e4:	bl	122f4 <memset@plt>
   151e8:	ldr	r4, [sp]
   151ec:	add	sp, sp, #4
   151f0:	mov	r0, #0
   151f4:	pop	{pc}		; (ldr pc, [sp], #4)
   151f8:	movw	r1, #45508	; 0xb1c4
   151fc:	movt	r1, #1
   15200:	ldr	r3, [pc, #40]	; 15230 <flatcc_builder_truncate_vector@@Base+0xa0>
   15204:	movw	r0, #45872	; 0xb330
   15208:	movt	r0, #1
   1520c:	movw	r2, #985	; 0x3d9
   15210:	bl	12324 <__assert_fail@plt>
   15214:	movw	r1, #45508	; 0xb1c4
   15218:	movt	r1, #1
   1521c:	ldr	r3, [pc, #12]	; 15230 <flatcc_builder_truncate_vector@@Base+0xa0>
   15220:	movw	r0, #46032	; 0xb3d0
   15224:	movt	r0, #1
   15228:	movw	r2, #986	; 0x3da
   1522c:	bl	12324 <__assert_fail@plt>
   15230:	muleq	r1, r8, lr

00015234 <flatcc_builder_truncate_offset_vector@@Base>:
   15234:	mov	r3, r0
   15238:	ldr	r0, [r0, #32]
   1523c:	str	r4, [sp, #-8]!
   15240:	ldrh	r2, [r0, #14]
   15244:	str	lr, [sp, #4]
   15248:	cmp	r2, #5
   1524c:	bne	1529c <flatcc_builder_truncate_offset_vector@@Base+0x68>
   15250:	mov	lr, r1
   15254:	ldr	r1, [r0, #20]
   15258:	cmp	r1, lr
   1525c:	bcc	152b8 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   15260:	ldr	r2, [r0, #16]
   15264:	sub	ip, r1, lr
   15268:	mov	r1, #0
   1526c:	str	ip, [r0, #20]
   15270:	ldr	r0, [r3, #16]
   15274:	ldr	ip, [r3, #20]
   15278:	mul	r2, r2, lr
   1527c:	sub	ip, ip, r2
   15280:	add	r0, r0, ip
   15284:	str	ip, [r3, #20]
   15288:	bl	122f4 <memset@plt>
   1528c:	ldr	r4, [sp]
   15290:	add	sp, sp, #4
   15294:	mov	r0, #0
   15298:	pop	{pc}		; (ldr pc, [sp], #4)
   1529c:	movw	r1, #45508	; 0xb1c4
   152a0:	movt	r1, #1
   152a4:	ldr	r3, [pc, #40]	; 152d4 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   152a8:	movw	r0, #45980	; 0xb39c
   152ac:	movt	r0, #1
   152b0:	movw	r2, #994	; 0x3e2
   152b4:	bl	12324 <__assert_fail@plt>
   152b8:	movw	r1, #45508	; 0xb1c4
   152bc:	movt	r1, #1
   152c0:	ldr	r3, [pc, #12]	; 152d4 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   152c4:	movw	r0, #46068	; 0xb3f4
   152c8:	movt	r0, #1
   152cc:	movw	r2, #995	; 0x3e3
   152d0:	bl	12324 <__assert_fail@plt>
   152d4:			; <UNDEFINED> instruction: 0x0001aeb8

000152d8 <flatcc_builder_truncate_string@@Base>:
   152d8:	str	r4, [sp, #-8]!
   152dc:	str	lr, [sp, #4]
   152e0:	ldr	lr, [r0, #32]
   152e4:	ldrh	r2, [lr, #14]
   152e8:	cmp	r2, #6
   152ec:	bne	1533c <flatcc_builder_truncate_string@@Base+0x64>
   152f0:	ldr	r2, [lr, #20]
   152f4:	mov	ip, r1
   152f8:	cmp	r2, r1
   152fc:	bcc	15358 <flatcc_builder_truncate_string@@Base+0x80>
   15300:	sub	r1, r2, r1
   15304:	mov	r3, r0
   15308:	ldr	r0, [r0, #16]
   1530c:	mov	r2, ip
   15310:	str	r1, [lr, #20]
   15314:	mov	r1, #0
   15318:	ldr	lr, [r3, #20]
   1531c:	sub	ip, lr, ip
   15320:	add	r0, r0, ip
   15324:	str	ip, [r3, #20]
   15328:	bl	122f4 <memset@plt>
   1532c:	ldr	r4, [sp]
   15330:	add	sp, sp, #4
   15334:	mov	r0, #0
   15338:	pop	{pc}		; (ldr pc, [sp], #4)
   1533c:	movw	r1, #45508	; 0xb1c4
   15340:	movt	r1, #1
   15344:	ldr	r3, [pc, #40]	; 15374 <flatcc_builder_truncate_string@@Base+0x9c>
   15348:	movw	r0, #45636	; 0xb244
   1534c:	movt	r0, #1
   15350:	movw	r2, #1003	; 0x3eb
   15354:	bl	12324 <__assert_fail@plt>
   15358:	movw	r1, #45508	; 0xb1c4
   1535c:	movt	r1, #1
   15360:	ldr	r3, [pc, #12]	; 15374 <flatcc_builder_truncate_string@@Base+0x9c>
   15364:	movw	r0, #46128	; 0xb430
   15368:	movt	r0, #1
   1536c:	mov	r2, #1004	; 0x3ec
   15370:	bl	12324 <__assert_fail@plt>
   15374:	andeq	sl, r1, r0, ror #29

00015378 <flatcc_builder_start_vector@@Base>:
   15378:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1537c:	mov	r4, r0
   15380:	mov	r5, r3
   15384:	ldr	r0, [r0, #156]	; 0x9c
   15388:	cmp	r2, #4
   1538c:	ldr	r3, [r4, #160]	; 0xa0
   15390:	strd	r6, [sp, #8]
   15394:	movcs	r7, r2
   15398:	movcc	r7, #4
   1539c:	mov	r6, r1
   153a0:	strd	r8, [sp, #16]
   153a4:	add	r2, r0, #1
   153a8:	str	lr, [sp, #24]
   153ac:	sub	sp, sp, #12
   153b0:	cmp	r2, r3
   153b4:	str	r2, [r4, #156]	; 0x9c
   153b8:	ble	154d4 <flatcc_builder_start_vector@@Base+0x15c>
   153bc:	ldr	r3, [r4, #176]	; 0xb0
   153c0:	cmp	r3, #0
   153c4:	cmpgt	r2, r3
   153c8:	movgt	r3, #1
   153cc:	movle	r3, #0
   153d0:	bgt	154e4 <flatcc_builder_start_vector@@Base+0x16c>
   153d4:	add	r0, r0, r0, lsl #3
   153d8:	ldr	r1, [r4, #88]	; 0x58
   153dc:	lsl	r8, r0, #2
   153e0:	add	r2, r8, #36	; 0x24
   153e4:	cmp	r2, r1
   153e8:	bls	1540c <flatcc_builder_start_vector@@Base+0x94>
   153ec:	mov	ip, #4
   153f0:	add	r1, r4, #84	; 0x54
   153f4:	ldr	r0, [r4, #40]	; 0x28
   153f8:	str	ip, [sp]
   153fc:	ldr	r9, [r4, #48]	; 0x30
   15400:	blx	r9
   15404:	cmp	r0, #0
   15408:	bne	154ec <flatcc_builder_start_vector@@Base+0x174>
   1540c:	ldr	r3, [r4, #84]	; 0x54
   15410:	add	r3, r3, r8
   15414:	cmp	r3, #0
   15418:	str	r3, [r4, #32]
   1541c:	beq	154e4 <flatcc_builder_start_vector@@Base+0x16c>
   15420:	ldr	r2, [r4, #88]	; 0x58
   15424:	movw	r0, #36409	; 0x8e39
   15428:	movt	r0, #14563	; 0x38e3
   1542c:	ldr	r1, [r4, #176]	; 0xb0
   15430:	umull	r0, r2, r0, r2
   15434:	lsr	r2, r2, #3
   15438:	cmp	r1, #0
   1543c:	cmpgt	r2, r1
   15440:	movgt	r2, r1
   15444:	str	r2, [r4, #160]	; 0xa0
   15448:	ldr	r2, [r4, #20]
   1544c:	mvn	r9, #3
   15450:	mov	ip, #0
   15454:	ldr	r0, [r4, #28]
   15458:	ldrh	lr, [r4, #130]	; 0x82
   1545c:	ldr	r1, [r4, #64]	; 0x40
   15460:	ldr	r8, [r4, #60]	; 0x3c
   15464:	str	r2, [r3, #8]
   15468:	add	r2, r2, r0
   1546c:	add	r2, r2, #7
   15470:	strh	lr, [r3, #12]
   15474:	bic	r2, r2, #7
   15478:	strh	r7, [r4, #130]	; 0x82
   1547c:	mov	r7, #4
   15480:	sub	r1, r1, r2
   15484:	str	r0, [r3]
   15488:	mov	r0, ip
   1548c:	cmp	r1, r9
   15490:	add	lr, r8, r2
   15494:	str	ip, [r4, #20]
   15498:	movhi	r1, r9
   1549c:	str	r2, [r4, #28]
   154a0:	strh	r7, [r3, #14]
   154a4:	str	r6, [r3, #16]
   154a8:	str	ip, [r3, #20]
   154ac:	str	r5, [r3, #24]
   154b0:	str	lr, [r4, #16]
   154b4:	str	r1, [r4, #24]
   154b8:	str	r9, [r3, #4]
   154bc:	add	sp, sp, #12
   154c0:	ldrd	r4, [sp]
   154c4:	ldrd	r6, [sp, #8]
   154c8:	ldrd	r8, [sp, #16]
   154cc:	add	sp, sp, #24
   154d0:	pop	{pc}		; (ldr pc, [sp], #4)
   154d4:	ldr	r3, [r4, #32]
   154d8:	add	r3, r3, #36	; 0x24
   154dc:	str	r3, [r4, #32]
   154e0:	b	15448 <flatcc_builder_start_vector@@Base+0xd0>
   154e4:	mvn	r0, #0
   154e8:	b	154bc <flatcc_builder_start_vector@@Base+0x144>
   154ec:	bl	1305c <flatcc_builder_default_alloc@@Base+0x124>

000154f0 <flatcc_builder_start_offset_vector@@Base>:
   154f0:	ldrd	r2, [r0, #156]	; 0x9c
   154f4:	strd	r4, [sp, #-16]!
   154f8:	mov	r4, r0
   154fc:	str	r6, [sp, #8]
   15500:	str	lr, [sp, #12]
   15504:	sub	sp, sp, #8
   15508:	add	r1, r2, #1
   1550c:	cmp	r1, r3
   15510:	str	r1, [r0, #156]	; 0x9c
   15514:	ble	1562c <flatcc_builder_start_offset_vector@@Base+0x13c>
   15518:	ldr	r3, [r0, #176]	; 0xb0
   1551c:	cmp	r3, #0
   15520:	cmpgt	r1, r3
   15524:	movgt	r3, #1
   15528:	movle	r3, #0
   1552c:	bgt	1563c <flatcc_builder_start_offset_vector@@Base+0x14c>
   15530:	add	r2, r2, r2, lsl #3
   15534:	ldr	r1, [r0, #88]	; 0x58
   15538:	lsl	r5, r2, #2
   1553c:	add	r2, r5, #36	; 0x24
   15540:	cmp	r2, r1
   15544:	bls	15568 <flatcc_builder_start_offset_vector@@Base+0x78>
   15548:	mov	ip, #4
   1554c:	add	r1, r0, #84	; 0x54
   15550:	ldr	r0, [r0, #40]	; 0x28
   15554:	str	ip, [sp]
   15558:	ldr	r6, [r4, #48]	; 0x30
   1555c:	blx	r6
   15560:	cmp	r0, #0
   15564:	bne	15644 <flatcc_builder_start_offset_vector@@Base+0x154>
   15568:	ldr	r3, [r4, #84]	; 0x54
   1556c:	add	r3, r3, r5
   15570:	cmp	r3, #0
   15574:	str	r3, [r4, #32]
   15578:	beq	1563c <flatcc_builder_start_offset_vector@@Base+0x14c>
   1557c:	ldr	r2, [r4, #88]	; 0x58
   15580:	movw	r0, #36409	; 0x8e39
   15584:	movt	r0, #14563	; 0x38e3
   15588:	ldr	r1, [r4, #176]	; 0xb0
   1558c:	umull	r0, r2, r0, r2
   15590:	lsr	r2, r2, #3
   15594:	cmp	r1, #0
   15598:	cmpgt	r2, r1
   1559c:	movgt	r2, r1
   155a0:	str	r2, [r4, #160]	; 0xa0
   155a4:	ldr	r2, [r4, #20]
   155a8:	mvn	r5, #3
   155ac:	mov	lr, #0
   155b0:	ldr	r0, [r4, #28]
   155b4:	ldrh	r6, [r4, #130]	; 0x82
   155b8:	ldr	ip, [r4, #60]	; 0x3c
   155bc:	ldr	r1, [r4, #64]	; 0x40
   155c0:	str	r2, [r3, #8]
   155c4:	add	r2, r2, r0
   155c8:	add	r2, r2, #7
   155cc:	strh	r6, [r3, #12]
   155d0:	mov	r6, #4
   155d4:	bic	r2, r2, #7
   155d8:	add	ip, ip, r2
   155dc:	strh	r6, [r4, #130]	; 0x82
   155e0:	sub	r1, r1, r2
   155e4:	str	r0, [r3]
   155e8:	mov	r0, lr
   155ec:	cmp	r1, r5
   155f0:	str	lr, [r4, #20]
   155f4:	movhi	r1, r5
   155f8:	str	r2, [r4, #28]
   155fc:	mov	r2, #5
   15600:	strh	r2, [r3, #14]
   15604:	str	r6, [r3, #16]
   15608:	str	lr, [r3, #20]
   1560c:	str	ip, [r4, #16]
   15610:	str	r1, [r4, #24]
   15614:	str	r5, [r3, #4]
   15618:	add	sp, sp, #8
   1561c:	ldrd	r4, [sp]
   15620:	ldr	r6, [sp, #8]
   15624:	add	sp, sp, #12
   15628:	pop	{pc}		; (ldr pc, [sp], #4)
   1562c:	ldr	r3, [r0, #32]
   15630:	add	r3, r3, #36	; 0x24
   15634:	str	r3, [r0, #32]
   15638:	b	155a4 <flatcc_builder_start_offset_vector@@Base+0xb4>
   1563c:	mvn	r0, #0
   15640:	b	15618 <flatcc_builder_start_offset_vector@@Base+0x128>
   15644:	bl	1305c <flatcc_builder_default_alloc@@Base+0x124>

00015648 <flatcc_builder_create_offset_vector@@Base>:
   15648:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1564c:	mov	r5, r2
   15650:	mov	r4, r0
   15654:	ldr	r3, [r0, #160]	; 0xa0
   15658:	strd	r6, [sp, #8]
   1565c:	mov	r6, r1
   15660:	ldr	r1, [r0, #156]	; 0x9c
   15664:	strd	r8, [sp, #16]
   15668:	str	lr, [sp, #24]
   1566c:	sub	sp, sp, #12
   15670:	add	r2, r1, #1
   15674:	cmp	r2, r3
   15678:	str	r2, [r0, #156]	; 0x9c
   1567c:	ble	157f4 <flatcc_builder_create_offset_vector@@Base+0x1ac>
   15680:	ldr	r3, [r0, #176]	; 0xb0
   15684:	cmp	r2, r3
   15688:	cmpgt	r3, #0
   1568c:	movgt	r3, #1
   15690:	movle	r3, #0
   15694:	bgt	157d4 <flatcc_builder_create_offset_vector@@Base+0x18c>
   15698:	add	r1, r1, r1, lsl #3
   1569c:	ldr	r0, [r0, #88]	; 0x58
   156a0:	lsl	r7, r1, #2
   156a4:	add	r2, r7, #36	; 0x24
   156a8:	cmp	r2, r0
   156ac:	bls	156d0 <flatcc_builder_create_offset_vector@@Base+0x88>
   156b0:	mov	ip, #4
   156b4:	add	r1, r4, #84	; 0x54
   156b8:	ldr	r0, [r4, #40]	; 0x28
   156bc:	str	ip, [sp]
   156c0:	ldr	r8, [r4, #48]	; 0x30
   156c4:	blx	r8
   156c8:	cmp	r0, #0
   156cc:	bne	15898 <flatcc_builder_create_offset_vector@@Base+0x250>
   156d0:	ldr	r3, [r4, #84]	; 0x54
   156d4:	add	r3, r3, r7
   156d8:	cmp	r3, #0
   156dc:	str	r3, [r4, #32]
   156e0:	beq	157d4 <flatcc_builder_create_offset_vector@@Base+0x18c>
   156e4:	ldr	r2, [r4, #88]	; 0x58
   156e8:	movw	r0, #36409	; 0x8e39
   156ec:	movt	r0, #14563	; 0x38e3
   156f0:	ldr	r1, [r4, #176]	; 0xb0
   156f4:	umull	r0, r2, r0, r2
   156f8:	lsr	r2, r2, #3
   156fc:	cmp	r2, r1
   15700:	cmpgt	r1, #0
   15704:	movgt	r2, r1
   15708:	str	r2, [r4, #160]	; 0xa0
   1570c:	ldr	r2, [r4, #20]
   15710:	mvn	lr, #3
   15714:	mov	r0, #4
   15718:	ldr	r8, [r4, #28]
   1571c:	ldrh	r7, [r4, #130]	; 0x82
   15720:	ldr	r1, [r4, #64]	; 0x40
   15724:	ldr	r9, [r4, #60]	; 0x3c
   15728:	str	r2, [r3, #8]
   1572c:	add	r2, r2, r8
   15730:	add	r2, r2, #7
   15734:	strh	r7, [r3, #12]
   15738:	mov	r7, #0
   1573c:	bic	r2, r2, #7
   15740:	strh	r0, [r4, #130]	; 0x82
   15744:	sub	r1, r1, r2
   15748:	str	r8, [r3]
   1574c:	cmp	r1, lr
   15750:	add	r9, r9, r2
   15754:	str	r7, [r4, #20]
   15758:	movls	ip, r1
   1575c:	movhi	ip, lr
   15760:	str	r2, [r4, #28]
   15764:	mov	r1, #5
   15768:	strh	r1, [r3, #14]
   1576c:	mov	r1, r5
   15770:	str	r0, [r3, #16]
   15774:	mov	r0, r4
   15778:	str	r7, [r3, #20]
   1577c:	str	r9, [r4, #16]
   15780:	str	ip, [r4, #24]
   15784:	str	lr, [r3, #4]
   15788:	bl	14a44 <flatcc_builder_extend_offset_vector@@Base>
   1578c:	cmp	r0, r7
   15790:	beq	157d4 <flatcc_builder_create_offset_vector@@Base+0x18c>
   15794:	lsl	r2, r5, #2
   15798:	mov	r1, r6
   1579c:	bl	12294 <memcpy@plt>
   157a0:	ldr	r3, [r4, #32]
   157a4:	ldrh	r2, [r3, #14]
   157a8:	cmp	r2, #5
   157ac:	bne	1587c <flatcc_builder_create_offset_vector@@Base+0x234>
   157b0:	ldr	r2, [r3, #20]
   157b4:	cmn	r2, #-1073741823	; 0xc0000001
   157b8:	bhi	157d4 <flatcc_builder_create_offset_vector@@Base+0x18c>
   157bc:	mov	r3, r7
   157c0:	mov	r0, r4
   157c4:	ldr	r1, [r4, #16]
   157c8:	bl	132c0 <flatcc_builder_default_alloc@@Base+0x388>
   157cc:	subs	r5, r0, #0
   157d0:	bne	15804 <flatcc_builder_create_offset_vector@@Base+0x1bc>
   157d4:	mov	r5, #0
   157d8:	mov	r0, r5
   157dc:	add	sp, sp, #12
   157e0:	ldrd	r4, [sp]
   157e4:	ldrd	r6, [sp, #8]
   157e8:	ldrd	r8, [sp, #16]
   157ec:	add	sp, sp, #24
   157f0:	pop	{pc}		; (ldr pc, [sp], #4)
   157f4:	ldr	r3, [r0, #32]
   157f8:	add	r3, r3, #36	; 0x24
   157fc:	str	r3, [r0, #32]
   15800:	b	1570c <flatcc_builder_create_offset_vector@@Base+0xc4>
   15804:	mov	r1, r7
   15808:	ldr	r0, [r4, #16]
   1580c:	ldr	r2, [r4, #20]
   15810:	bl	122f4 <memset@plt>
   15814:	ldr	r3, [r4, #32]
   15818:	ldr	r0, [r4, #60]	; 0x3c
   1581c:	ldr	r2, [r4, #64]	; 0x40
   15820:	ldr	ip, [r3]
   15824:	ldmib	r3, {r1, lr}
   15828:	add	r0, r0, ip
   1582c:	sub	r2, r2, ip
   15830:	str	r0, [r4, #16]
   15834:	cmp	r2, r1
   15838:	ldrh	r0, [r4, #128]	; 0x80
   1583c:	movcs	r2, r1
   15840:	str	lr, [r4, #20]
   15844:	str	ip, [r4, #28]
   15848:	ldrh	ip, [r4, #130]	; 0x82
   1584c:	str	r2, [r4, #24]
   15850:	ldr	r2, [r4, #156]	; 0x9c
   15854:	str	r1, [r3, #4]
   15858:	cmp	r0, ip
   1585c:	sub	r0, r3, #36	; 0x24
   15860:	strhcc	ip, [r4, #128]	; 0x80
   15864:	ldrh	r1, [r3, #12]
   15868:	sub	r3, r2, #1
   1586c:	str	r0, [r4, #32]
   15870:	strh	r1, [r4, #130]	; 0x82
   15874:	str	r3, [r4, #156]	; 0x9c
   15878:	b	157d8 <flatcc_builder_create_offset_vector@@Base+0x190>
   1587c:	movw	r1, #45508	; 0xb1c4
   15880:	movt	r1, #1
   15884:	ldr	r3, [pc, #16]	; 1589c <flatcc_builder_create_offset_vector@@Base+0x254>
   15888:	movw	r0, #45980	; 0xb39c
   1588c:	movt	r0, #1
   15890:	movw	r2, #1480	; 0x5c8
   15894:	bl	12324 <__assert_fail@plt>
   15898:	bl	1305c <flatcc_builder_default_alloc@@Base+0x124>
   1589c:	andeq	sl, r1, r0, lsl #30

000158a0 <flatcc_builder_start_string@@Base>:
   158a0:	ldrd	r2, [r0, #156]	; 0x9c
   158a4:	strd	r4, [sp, #-16]!
   158a8:	mov	r4, r0
   158ac:	str	r6, [sp, #8]
   158b0:	str	lr, [sp, #12]
   158b4:	sub	sp, sp, #8
   158b8:	add	r1, r2, #1
   158bc:	cmp	r1, r3
   158c0:	str	r1, [r0, #156]	; 0x9c
   158c4:	ble	159dc <flatcc_builder_start_string@@Base+0x13c>
   158c8:	ldr	r3, [r0, #176]	; 0xb0
   158cc:	cmp	r3, #0
   158d0:	cmpgt	r1, r3
   158d4:	movgt	r3, #1
   158d8:	movle	r3, #0
   158dc:	bgt	159ec <flatcc_builder_start_string@@Base+0x14c>
   158e0:	add	r2, r2, r2, lsl #3
   158e4:	ldr	r1, [r0, #88]	; 0x58
   158e8:	lsl	r5, r2, #2
   158ec:	add	r2, r5, #36	; 0x24
   158f0:	cmp	r2, r1
   158f4:	bls	15918 <flatcc_builder_start_string@@Base+0x78>
   158f8:	mov	ip, #4
   158fc:	add	r1, r0, #84	; 0x54
   15900:	ldr	r0, [r0, #40]	; 0x28
   15904:	str	ip, [sp]
   15908:	ldr	r6, [r4, #48]	; 0x30
   1590c:	blx	r6
   15910:	cmp	r0, #0
   15914:	bne	159f4 <flatcc_builder_start_string@@Base+0x154>
   15918:	ldr	r3, [r4, #84]	; 0x54
   1591c:	add	r3, r3, r5
   15920:	cmp	r3, #0
   15924:	str	r3, [r4, #32]
   15928:	beq	159ec <flatcc_builder_start_string@@Base+0x14c>
   1592c:	ldr	r2, [r4, #88]	; 0x58
   15930:	movw	r0, #36409	; 0x8e39
   15934:	movt	r0, #14563	; 0x38e3
   15938:	ldr	r1, [r4, #176]	; 0xb0
   1593c:	umull	r0, r2, r0, r2
   15940:	lsr	r2, r2, #3
   15944:	cmp	r1, #0
   15948:	cmpgt	r2, r1
   1594c:	movgt	r2, r1
   15950:	str	r2, [r4, #160]	; 0xa0
   15954:	ldr	r2, [r4, #20]
   15958:	mvn	r5, #3
   1595c:	mov	lr, #0
   15960:	ldr	r0, [r4, #28]
   15964:	ldrh	r6, [r4, #130]	; 0x82
   15968:	ldr	ip, [r4, #60]	; 0x3c
   1596c:	ldr	r1, [r4, #64]	; 0x40
   15970:	str	r2, [r3, #8]
   15974:	add	r2, r2, r0
   15978:	add	r2, r2, #7
   1597c:	strh	r6, [r3, #12]
   15980:	mov	r6, #1
   15984:	bic	r2, r2, #7
   15988:	add	ip, ip, r2
   1598c:	strh	r6, [r4, #130]	; 0x82
   15990:	sub	r1, r1, r2
   15994:	str	r0, [r3]
   15998:	mov	r0, lr
   1599c:	cmp	r1, r5
   159a0:	str	lr, [r4, #20]
   159a4:	movhi	r1, r5
   159a8:	str	r2, [r4, #28]
   159ac:	mov	r2, #6
   159b0:	strh	r2, [r3, #14]
   159b4:	str	r6, [r3, #16]
   159b8:	str	lr, [r3, #20]
   159bc:	str	ip, [r4, #16]
   159c0:	str	r1, [r4, #24]
   159c4:	str	r5, [r3, #4]
   159c8:	add	sp, sp, #8
   159cc:	ldrd	r4, [sp]
   159d0:	ldr	r6, [sp, #8]
   159d4:	add	sp, sp, #12
   159d8:	pop	{pc}		; (ldr pc, [sp], #4)
   159dc:	ldr	r3, [r0, #32]
   159e0:	add	r3, r3, #36	; 0x24
   159e4:	str	r3, [r0, #32]
   159e8:	b	15954 <flatcc_builder_start_string@@Base+0xb4>
   159ec:	mvn	r0, #0
   159f0:	b	159c8 <flatcc_builder_start_string@@Base+0x128>
   159f4:	bl	1305c <flatcc_builder_default_alloc@@Base+0x124>

000159f8 <flatcc_builder_reserve_table@@Base>:
   159f8:	cmp	r1, #0
   159fc:	strd	r4, [sp, #-20]!	; 0xffffffec
   15a00:	strd	r6, [sp, #8]
   15a04:	str	lr, [sp, #16]
   15a08:	sub	sp, sp, #12
   15a0c:	blt	15af0 <flatcc_builder_reserve_table@@Base+0xf8>
   15a10:	ldr	r2, [r0, #32]
   15a14:	add	r1, r1, #2
   15a18:	mov	r4, r0
   15a1c:	lsl	r5, r1, #1
   15a20:	ldr	r1, [r0, #56]	; 0x38
   15a24:	ldrh	r6, [r2, #28]
   15a28:	ldr	r3, [r2, #16]
   15a2c:	add	r6, r3, r6, lsl #1
   15a30:	add	r2, r6, r5
   15a34:	cmp	r2, r1
   15a38:	bhi	15aa0 <flatcc_builder_reserve_table@@Base+0xa8>
   15a3c:	ldr	r3, [r4, #52]	; 0x34
   15a40:	adds	r3, r3, r6
   15a44:	mvneq	r0, #0
   15a48:	streq	r3, [r4, #4]
   15a4c:	beq	15a8c <flatcc_builder_reserve_table@@Base+0x94>
   15a50:	ldr	r2, [r4, #32]
   15a54:	add	r3, r3, #4
   15a58:	ldr	r1, [r4, #80]	; 0x50
   15a5c:	ldr	r6, [r2, #20]
   15a60:	str	r3, [r4, #4]
   15a64:	add	r2, r5, r6
   15a68:	sub	r2, r2, #3
   15a6c:	cmp	r2, r1
   15a70:	bhi	15ac8 <flatcc_builder_reserve_table@@Base+0xd0>
   15a74:	ldr	r3, [r4, #76]	; 0x4c
   15a78:	add	r3, r3, r6
   15a7c:	clz	r0, r3
   15a80:	lsr	r0, r0, #5
   15a84:	str	r3, [r4]
   15a88:	rsb	r0, r0, #0
   15a8c:	add	sp, sp, #12
   15a90:	ldrd	r4, [sp]
   15a94:	ldrd	r6, [sp, #8]
   15a98:	add	sp, sp, #16
   15a9c:	pop	{pc}		; (ldr pc, [sp], #4)
   15aa0:	mov	ip, #0
   15aa4:	add	r1, r0, #52	; 0x34
   15aa8:	ldr	r0, [r0, #40]	; 0x28
   15aac:	mov	r3, #1
   15ab0:	str	ip, [sp]
   15ab4:	ldr	r7, [r4, #48]	; 0x30
   15ab8:	blx	r7
   15abc:	cmp	r0, #0
   15ac0:	beq	15a3c <flatcc_builder_reserve_table@@Base+0x44>
   15ac4:	bl	1305c <flatcc_builder_default_alloc@@Base+0x124>
   15ac8:	mov	ip, #3
   15acc:	mov	r3, #0
   15ad0:	ldr	r0, [r4, #40]	; 0x28
   15ad4:	add	r1, r4, #76	; 0x4c
   15ad8:	str	ip, [sp]
   15adc:	ldr	r5, [r4, #48]	; 0x30
   15ae0:	blx	r5
   15ae4:	cmp	r0, #0
   15ae8:	beq	15a74 <flatcc_builder_reserve_table@@Base+0x7c>
   15aec:	b	15ac4 <flatcc_builder_reserve_table@@Base+0xcc>
   15af0:	movw	r1, #45508	; 0xb1c4
   15af4:	movt	r1, #1
   15af8:	ldr	r3, [pc, #12]	; 15b0c <flatcc_builder_reserve_table@@Base+0x114>
   15afc:	movw	r0, #46164	; 0xb454
   15b00:	movt	r0, #1
   15b04:	movw	r2, #1065	; 0x429
   15b08:	bl	12324 <__assert_fail@plt>
   15b0c:	andeq	sl, r1, r4, lsr #30

00015b10 <flatcc_builder_start_table@@Base>:
   15b10:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15b14:	mov	r5, r1
   15b18:	mov	r1, #4
   15b1c:	strd	r6, [sp, #8]
   15b20:	mov	r4, r0
   15b24:	strd	r8, [sp, #16]
   15b28:	str	sl, [sp, #24]
   15b2c:	str	lr, [sp, #28]
   15b30:	sub	sp, sp, #8
   15b34:	bl	1319c <flatcc_builder_default_alloc@@Base+0x264>
   15b38:	subs	r7, r0, #0
   15b3c:	bne	15c84 <flatcc_builder_start_table@@Base+0x174>
   15b40:	ldm	r4, {r0, r2}
   15b44:	add	r5, r5, #2
   15b48:	movw	ip, #15186	; 0x3b52
   15b4c:	movt	ip, #12137	; 0x2f69
   15b50:	lsl	r5, r5, #1
   15b54:	mov	r8, #3
   15b58:	ldrh	lr, [r4, #8]
   15b5c:	ldr	r1, [r4, #52]	; 0x34
   15b60:	ldr	sl, [r4, #76]	; 0x4c
   15b64:	ldr	r3, [r4, #32]
   15b68:	sub	r2, r2, r1
   15b6c:	ldr	r9, [r4, #56]	; 0x38
   15b70:	add	r6, r2, lr, lsl #1
   15b74:	sub	r0, r0, sl
   15b78:	ldr	sl, [r4, #12]
   15b7c:	str	r2, [r3, #16]
   15b80:	add	r2, r6, r5
   15b84:	str	r0, [r3, #20]
   15b88:	cmp	r2, r9
   15b8c:	str	sl, [r3, #24]
   15b90:	strh	lr, [r3, #28]
   15b94:	strh	r7, [r4, #8]
   15b98:	str	ip, [r4, #12]
   15b9c:	strh	r8, [r3, #14]
   15ba0:	bls	15bc8 <flatcc_builder_start_table@@Base+0xb8>
   15ba4:	mov	r3, #1
   15ba8:	add	r1, r4, #52	; 0x34
   15bac:	str	r7, [sp]
   15bb0:	ldr	r0, [r4, #40]	; 0x28
   15bb4:	ldr	r8, [r4, #48]	; 0x30
   15bb8:	blx	r8
   15bbc:	cmp	r0, #0
   15bc0:	bne	15c80 <flatcc_builder_start_table@@Base+0x170>
   15bc4:	ldr	r1, [r4, #52]	; 0x34
   15bc8:	adds	r6, r6, r1
   15bcc:	streq	r6, [r4, #4]
   15bd0:	beq	15c84 <flatcc_builder_start_table@@Base+0x174>
   15bd4:	ldr	r1, [r4, #32]
   15bd8:	sub	r2, r5, #3
   15bdc:	add	r6, r6, #4
   15be0:	ldr	r3, [r4, #80]	; 0x50
   15be4:	ldr	r5, [r1, #20]
   15be8:	str	r6, [r4, #4]
   15bec:	add	r2, r2, r5
   15bf0:	cmp	r2, r3
   15bf4:	bhi	15c5c <flatcc_builder_start_table@@Base+0x14c>
   15bf8:	ldr	r3, [r4, #76]	; 0x4c
   15bfc:	add	r3, r3, r5
   15c00:	cmp	r3, #0
   15c04:	str	r3, [r4]
   15c08:	beq	15c84 <flatcc_builder_start_table@@Base+0x174>
   15c0c:	ldr	r0, [r4, #28]
   15c10:	movw	r2, #65532	; 0xfffc
   15c14:	ldr	ip, [r4, #32]
   15c18:	ldr	r3, [r4, #64]	; 0x40
   15c1c:	ldr	r1, [r4, #60]	; 0x3c
   15c20:	sub	r3, r3, r0
   15c24:	cmp	r3, r2
   15c28:	add	r1, r1, r0
   15c2c:	movcs	r3, r2
   15c30:	str	r1, [r4, #16]
   15c34:	str	r3, [r4, #24]
   15c38:	str	r2, [ip, #4]
   15c3c:	mov	r0, r7
   15c40:	add	sp, sp, #8
   15c44:	ldrd	r4, [sp]
   15c48:	ldrd	r6, [sp, #8]
   15c4c:	ldrd	r8, [sp, #16]
   15c50:	ldr	sl, [sp, #24]
   15c54:	add	sp, sp, #28
   15c58:	pop	{pc}		; (ldr pc, [sp], #4)
   15c5c:	mov	ip, #3
   15c60:	mov	r3, #0
   15c64:	ldr	r0, [r4, #40]	; 0x28
   15c68:	add	r1, r4, #76	; 0x4c
   15c6c:	str	ip, [sp]
   15c70:	ldr	r6, [r4, #48]	; 0x30
   15c74:	blx	r6
   15c78:	cmp	r0, #0
   15c7c:	beq	15bf8 <flatcc_builder_start_table@@Base+0xe8>
   15c80:	bl	1305c <flatcc_builder_default_alloc@@Base+0x124>
   15c84:	mvn	r7, #0
   15c88:	b	15c3c <flatcc_builder_start_table@@Base+0x12c>

00015c8c <flatcc_builder_create_vtable@@Base>:
   15c8c:	strd	r4, [sp, #-16]!
   15c90:	mov	r5, r0
   15c94:	mov	r3, #0
   15c98:	ldr	ip, [r5, #152]	; 0x98
   15c9c:	subs	r0, r2, #0
   15ca0:	str	r6, [sp, #8]
   15ca4:	str	lr, [sp, #12]
   15ca8:	sub	sp, sp, #80	; 0x50
   15cac:	str	r3, [sp, #8]
   15cb0:	str	r3, [sp, #12]
   15cb4:	beq	15d30 <flatcc_builder_create_vtable@@Base+0xa4>
   15cb8:	mov	r2, #1
   15cbc:	cmp	ip, r3
   15cc0:	str	r0, [sp, #8]
   15cc4:	str	r2, [sp, #12]
   15cc8:	str	r1, [sp, #16]
   15ccc:	str	r0, [sp, #20]
   15cd0:	beq	15d60 <flatcc_builder_create_vtable@@Base+0xd4>
   15cd4:	ldr	r3, [r5, #136]	; 0x88
   15cd8:	sub	r4, r3, r0
   15cdc:	cmp	r3, r4
   15ce0:	ble	15d44 <flatcc_builder_create_vtable@@Base+0xb8>
   15ce4:	mov	r3, r4
   15ce8:	mov	r2, #1
   15cec:	str	r0, [sp]
   15cf0:	add	r1, sp, #16
   15cf4:	ldr	r0, [r5, #36]	; 0x24
   15cf8:	ldr	r6, [r5, #44]	; 0x2c
   15cfc:	blx	r6
   15d00:	cmp	r0, #0
   15d04:	bne	15da8 <flatcc_builder_create_vtable@@Base+0x11c>
   15d08:	cmp	r4, #0
   15d0c:	str	r4, [r5, #136]	; 0x88
   15d10:	beq	15d18 <flatcc_builder_create_vtable@@Base+0x8c>
   15d14:	add	r4, r4, #1
   15d18:	mov	r0, r4
   15d1c:	add	sp, sp, #80	; 0x50
   15d20:	ldrd	r4, [sp]
   15d24:	ldr	r6, [sp, #8]
   15d28:	add	sp, sp, #12
   15d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d30:	cmp	ip, #0
   15d34:	bne	15d44 <flatcc_builder_create_vtable@@Base+0xb8>
   15d38:	ldr	r2, [r5, #180]	; 0xb4
   15d3c:	cmp	r2, #0
   15d40:	beq	15da0 <flatcc_builder_create_vtable@@Base+0x114>
   15d44:	movw	r1, #45508	; 0xb1c4
   15d48:	movt	r1, #1
   15d4c:	ldr	r3, [pc, #88]	; 15dac <flatcc_builder_create_vtable@@Base+0x120>
   15d50:	movw	r0, #45700	; 0xb284
   15d54:	movt	r0, #1
   15d58:	movw	r2, #647	; 0x287
   15d5c:	bl	12324 <__assert_fail@plt>
   15d60:	ldr	r3, [r5, #180]	; 0xb4
   15d64:	cmp	r3, #0
   15d68:	bne	15cd4 <flatcc_builder_create_vtable@@Base+0x48>
   15d6c:	ldr	r4, [r5, #140]	; 0x8c
   15d70:	mov	ip, r0
   15d74:	add	r0, r4, r0
   15d78:	str	r0, [r5, #140]	; 0x8c
   15d7c:	mov	r3, r4
   15d80:	add	r1, sp, #16
   15d84:	str	ip, [sp]
   15d88:	ldr	r0, [r5, #36]	; 0x24
   15d8c:	ldr	r5, [r5, #44]	; 0x2c
   15d90:	blx	r5
   15d94:	cmp	r0, #0
   15d98:	beq	15d14 <flatcc_builder_create_vtable@@Base+0x88>
   15d9c:	bl	13084 <flatcc_builder_default_alloc@@Base+0x14c>
   15da0:	ldr	r4, [r5, #140]	; 0x8c
   15da4:	b	15d7c <flatcc_builder_create_vtable@@Base+0xf0>
   15da8:	bl	130d4 <flatcc_builder_default_alloc@@Base+0x19c>
   15dac:	andeq	sl, r1, r0, lsr #21

00015db0 <flatcc_builder_create_cached_vtable@@Base>:
   15db0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15db4:	strd	r6, [sp, #8]
   15db8:	mov	r6, r0
   15dbc:	strd	r8, [sp, #16]
   15dc0:	mov	r9, r2
   15dc4:	mov	r8, r3
   15dc8:	strd	sl, [sp, #24]
   15dcc:	str	lr, [sp, #32]
   15dd0:	sub	sp, sp, #28
   15dd4:	str	r1, [sp, #8]
   15dd8:	ldr	r1, [r0, #116]	; 0x74
   15ddc:	cmp	r1, #0
   15de0:	rsbne	r1, r1, #32
   15de4:	beq	15f6c <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   15de8:	ldr	sl, [r6, #92]	; 0x5c
   15dec:	lsr	r8, r8, r1
   15df0:	adds	fp, sl, r8, lsl #2
   15df4:	str	fp, [sp, #12]
   15df8:	beq	16008 <flatcc_builder_create_cached_vtable@@Base+0x258>
   15dfc:	ldr	r5, [sl, r8, lsl #2]
   15e00:	cmp	r5, #0
   15e04:	beq	1603c <flatcc_builder_create_cached_vtable@@Base+0x28c>
   15e08:	mov	r3, #0
   15e0c:	str	r8, [sp, #16]
   15e10:	mov	r8, fp
   15e14:	mov	fp, r6
   15e18:	ldr	r7, [r6, #68]	; 0x44
   15e1c:	str	r3, [sp, #20]
   15e20:	ldr	r3, [r6, #100]	; 0x64
   15e24:	mov	r6, r3
   15e28:	add	r4, r6, r5
   15e2c:	ldr	r1, [r4, #8]
   15e30:	ldrh	r2, [r7, r1]
   15e34:	add	r1, r7, r1
   15e38:	cmp	r2, r9
   15e3c:	bne	15f18 <flatcc_builder_create_cached_vtable@@Base+0x168>
   15e40:	mov	r2, r9
   15e44:	ldr	r0, [sp, #8]
   15e48:	bl	122a0 <memcmp@plt>
   15e4c:	cmp	r0, #0
   15e50:	bne	15f18 <flatcc_builder_create_cached_vtable@@Base+0x168>
   15e54:	ldr	r1, [r4, #4]
   15e58:	ldr	r2, [fp, #152]	; 0x98
   15e5c:	cmp	r1, r2
   15e60:	beq	15f24 <flatcc_builder_create_cached_vtable@@Base+0x174>
   15e64:	ldr	r5, [r4, #12]
   15e68:	add	r8, r4, #12
   15e6c:	str	r4, [sp, #20]
   15e70:	cmp	r5, #0
   15e74:	bne	15e28 <flatcc_builder_create_cached_vtable@@Base+0x78>
   15e78:	ldr	r8, [sp, #16]
   15e7c:	mov	r6, fp
   15e80:	ldr	r3, [r6, #104]	; 0x68
   15e84:	ldr	r4, [r6, #124]	; 0x7c
   15e88:	add	r2, r4, #16
   15e8c:	cmp	r2, r3
   15e90:	bls	15eb8 <flatcc_builder_create_cached_vtable@@Base+0x108>
   15e94:	mov	ip, #6
   15e98:	mov	r3, #0
   15e9c:	ldr	r0, [r6, #40]	; 0x28
   15ea0:	add	r1, r6, #100	; 0x64
   15ea4:	str	ip, [sp]
   15ea8:	ldr	r5, [r6, #48]	; 0x30
   15eac:	blx	r5
   15eb0:	cmp	r0, #0
   15eb4:	bne	16038 <flatcc_builder_create_cached_vtable@@Base+0x288>
   15eb8:	ldr	r5, [r6, #100]	; 0x64
   15ebc:	adds	r7, r5, r4
   15ec0:	beq	16008 <flatcc_builder_create_cached_vtable@@Base+0x258>
   15ec4:	ldr	r3, [r6, #124]	; 0x7c
   15ec8:	mov	r2, r9
   15ecc:	ldr	r0, [r6, #152]	; 0x98
   15ed0:	ldr	r1, [sp, #8]
   15ed4:	add	ip, r3, #16
   15ed8:	str	ip, [r6, #124]	; 0x7c
   15edc:	str	r0, [r7, #4]
   15ee0:	mov	r0, r6
   15ee4:	ldr	ip, [sl, r8, lsl #2]
   15ee8:	str	ip, [r7, #12]
   15eec:	str	r3, [sl, r8, lsl #2]
   15ef0:	bl	15c8c <flatcc_builder_create_vtable@@Base>
   15ef4:	cmp	r0, #0
   15ef8:	str	r0, [r5, r4]
   15efc:	beq	16008 <flatcc_builder_create_cached_vtable@@Base+0x258>
   15f00:	ldr	r3, [sp, #20]
   15f04:	cmp	r3, #0
   15f08:	beq	1604c <flatcc_builder_create_cached_vtable@@Base+0x29c>
   15f0c:	ldr	r3, [r3, #8]
   15f10:	str	r3, [r7, #8]
   15f14:	b	15f50 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15f18:	add	r8, r4, #12
   15f1c:	ldr	r5, [r4, #12]
   15f20:	b	15e70 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   15f24:	ldr	r3, [sp, #12]
   15f28:	mov	fp, r8
   15f2c:	ldr	r8, [sp, #16]
   15f30:	cmp	r3, fp
   15f34:	beq	15f4c <flatcc_builder_create_cached_vtable@@Base+0x19c>
   15f38:	ldr	r3, [r4, #12]
   15f3c:	str	r3, [fp]
   15f40:	ldr	r3, [sl, r8, lsl #2]
   15f44:	str	r3, [r4, #12]
   15f48:	str	r5, [sl, r8, lsl #2]
   15f4c:	ldr	r0, [r4]
   15f50:	add	sp, sp, #28
   15f54:	ldrd	r4, [sp]
   15f58:	ldrd	r6, [sp, #8]
   15f5c:	ldrd	r8, [sp, #16]
   15f60:	ldrd	sl, [sp, #24]
   15f64:	add	sp, sp, #32
   15f68:	pop	{pc}		; (ldr pc, [sp], #4)
   15f6c:	ldr	r4, [r0, #124]	; 0x7c
   15f70:	add	r5, r0, #92	; 0x5c
   15f74:	cmp	r4, #0
   15f78:	bne	160fc <flatcc_builder_create_cached_vtable@@Base+0x34c>
   15f7c:	ldr	r3, [r0, #104]	; 0x68
   15f80:	cmp	r3, #15
   15f84:	bls	16010 <flatcc_builder_create_cached_vtable@@Base+0x260>
   15f88:	ldr	r3, [r6, #100]	; 0x64
   15f8c:	cmp	r3, #0
   15f90:	beq	16008 <flatcc_builder_create_cached_vtable@@Base+0x258>
   15f94:	mov	ip, #16
   15f98:	mov	r2, #5
   15f9c:	ldr	r0, [r6, #40]	; 0x28
   15fa0:	mov	r1, r5
   15fa4:	mov	r3, #1
   15fa8:	str	r2, [sp]
   15fac:	mov	r2, #256	; 0x100
   15fb0:	str	ip, [r6, #124]	; 0x7c
   15fb4:	ldr	r5, [r6, #48]	; 0x30
   15fb8:	blx	r5
   15fbc:	cmp	r0, #0
   15fc0:	bne	16008 <flatcc_builder_create_cached_vtable@@Base+0x258>
   15fc4:	mov	r3, #256	; 0x100
   15fc8:	ldr	r1, [r6, #96]	; 0x60
   15fcc:	b	15fd4 <flatcc_builder_create_cached_vtable@@Base+0x224>
   15fd0:	mov	r3, r2
   15fd4:	lsl	r2, r3, #1
   15fd8:	cmp	r2, r1
   15fdc:	bls	15fd0 <flatcc_builder_create_cached_vtable@@Base+0x220>
   15fe0:	lsr	r3, r3, #2
   15fe4:	cmp	r3, #1
   15fe8:	bls	16044 <flatcc_builder_create_cached_vtable@@Base+0x294>
   15fec:	mov	r2, #1
   15ff0:	add	r4, r4, #1
   15ff4:	cmp	r3, r2, lsl r4
   15ff8:	bhi	15ff0 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15ffc:	rsb	r1, r4, #32
   16000:	str	r4, [r6, #116]	; 0x74
   16004:	b	15de8 <flatcc_builder_create_cached_vtable@@Base+0x38>
   16008:	mov	r0, #0
   1600c:	b	15f50 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   16010:	mov	ip, #6
   16014:	add	r1, r0, #100	; 0x64
   16018:	ldr	r0, [r0, #40]	; 0x28
   1601c:	mov	r3, r4
   16020:	mov	r2, #16
   16024:	str	ip, [sp]
   16028:	ldr	r7, [r6, #48]	; 0x30
   1602c:	blx	r7
   16030:	cmp	r0, #0
   16034:	beq	15f88 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   16038:	bl	1305c <flatcc_builder_default_alloc@@Base+0x124>
   1603c:	str	r5, [sp, #20]
   16040:	b	15e80 <flatcc_builder_create_cached_vtable@@Base+0xd0>
   16044:	mov	r1, #32
   16048:	b	16000 <flatcc_builder_create_cached_vtable@@Base+0x250>
   1604c:	ldr	r8, [r6, #120]	; 0x78
   16050:	ldr	r3, [r6, #172]	; 0xac
   16054:	add	r2, r9, r8
   16058:	cmp	r3, #0
   1605c:	beq	1609c <flatcc_builder_create_cached_vtable@@Base+0x2ec>
   16060:	cmp	r3, r2
   16064:	bcs	1609c <flatcc_builder_create_cached_vtable@@Base+0x2ec>
   16068:	ldr	r3, [r6, #116]	; 0x74
   1606c:	cmp	r3, #0
   16070:	beq	15f50 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   16074:	ldr	r7, [sp, #20]
   16078:	ldr	r0, [r6, #92]	; 0x5c
   1607c:	ldr	r2, [r6, #96]	; 0x60
   16080:	mov	r1, r7
   16084:	bl	122f4 <memset@plt>
   16088:	mov	r3, #16
   1608c:	mov	r2, r7
   16090:	ldr	r0, [r5, r4]
   16094:	strd	r2, [r6, #120]	; 0x78
   16098:	b	15f50 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   1609c:	ldr	r3, [r6, #72]	; 0x48
   160a0:	cmp	r3, r2
   160a4:	bcs	160cc <flatcc_builder_create_cached_vtable@@Base+0x31c>
   160a8:	mov	ip, #2
   160ac:	mov	r3, #0
   160b0:	ldr	r0, [r6, #40]	; 0x28
   160b4:	add	r1, r6, #68	; 0x44
   160b8:	str	ip, [sp]
   160bc:	ldr	sl, [r6, #48]	; 0x30
   160c0:	blx	sl
   160c4:	cmp	r0, #0
   160c8:	bne	16038 <flatcc_builder_create_cached_vtable@@Base+0x288>
   160cc:	ldr	r3, [r6, #68]	; 0x44
   160d0:	adds	r0, r3, r8
   160d4:	beq	16118 <flatcc_builder_create_cached_vtable@@Base+0x368>
   160d8:	ldr	r3, [r6, #120]	; 0x78
   160dc:	mov	r2, r9
   160e0:	ldr	r1, [sp, #8]
   160e4:	add	r9, r3, r9
   160e8:	str	r3, [r7, #8]
   160ec:	str	r9, [r6, #120]	; 0x78
   160f0:	bl	12294 <memcpy@plt>
   160f4:	ldr	r0, [r5, r4]
   160f8:	b	15f50 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   160fc:	movw	r1, #45508	; 0xb1c4
   16100:	movt	r1, #1
   16104:	ldr	r3, [pc, #20]	; 16120 <flatcc_builder_create_cached_vtable@@Base+0x370>
   16108:	movw	r0, #46176	; 0xb460
   1610c:	movt	r0, #1
   16110:	movw	r2, #342	; 0x156
   16114:	bl	12324 <__assert_fail@plt>
   16118:	mvn	r0, #0
   1611c:	b	15f50 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   16120:	andeq	sl, r1, r4, asr #30

00016124 <flatcc_builder_create_table@@Base>:
   16124:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16128:	mov	r5, r0
   1612c:	strd	r6, [sp, #8]
   16130:	str	r8, [sp, #16]
   16134:	str	lr, [sp, #20]
   16138:	sub	sp, sp, #88	; 0x58
   1613c:	ldr	r6, [sp, #116]	; 0x74
   16140:	ldr	r0, [sp, #120]	; 0x78
   16144:	cmp	r6, #0
   16148:	blt	162b0 <flatcc_builder_create_table@@Base+0x18c>
   1614c:	ands	r7, r0, #1
   16150:	beq	16294 <flatcc_builder_create_table@@Base+0x170>
   16154:	ldrh	ip, [r5, #128]	; 0x80
   16158:	cmp	r3, #4
   1615c:	sub	r0, r0, #1
   16160:	movcc	r3, #4
   16164:	cmp	ip, r3
   16168:	ldr	ip, [r5, #136]	; 0x88
   1616c:	strhcc	r3, [r5, #128]	; 0x80
   16170:	sub	r3, r3, #1
   16174:	cmp	r6, #0
   16178:	sub	r4, ip, r2
   1617c:	mov	r8, r4
   16180:	sub	r4, r4, #4
   16184:	and	r8, r8, r3
   16188:	sub	r0, r4, r0
   1618c:	sub	r0, r0, r8
   16190:	str	r0, [sp, #12]
   16194:	beq	161c8 <flatcc_builder_create_table@@Base+0xa4>
   16198:	ldr	ip, [sp, #112]	; 0x70
   1619c:	sub	r4, r8, r4
   161a0:	sub	r4, r4, #4
   161a4:	add	r6, ip, r6, lsl #1
   161a8:	ldrh	r3, [ip], #2
   161ac:	ldr	r0, [r1, r3]
   161b0:	sub	lr, r4, r3
   161b4:	cmp	r6, ip
   161b8:	add	r0, r0, lr
   161bc:	str	r0, [r1, r3]
   161c0:	bne	161a8 <flatcc_builder_create_table@@Base+0x84>
   161c4:	ldr	ip, [r5, #136]	; 0x88
   161c8:	mov	r0, #4
   161cc:	add	r3, sp, #12
   161d0:	mov	lr, #1
   161d4:	cmp	r2, #0
   161d8:	moveq	r2, #2
   161dc:	str	r0, [sp, #16]
   161e0:	str	lr, [sp, #20]
   161e4:	str	r3, [sp, #24]
   161e8:	str	r0, [sp, #28]
   161ec:	beq	16210 <flatcc_builder_create_table@@Base+0xec>
   161f0:	mov	r3, #2
   161f4:	add	r0, r2, r0
   161f8:	mov	r7, r3
   161fc:	str	r0, [sp, #16]
   16200:	str	r2, [sp, #36]	; 0x24
   16204:	mov	r2, #3
   16208:	str	r3, [sp, #20]
   1620c:	str	r1, [sp, #32]
   16210:	cmp	r8, #0
   16214:	bne	16268 <flatcc_builder_create_table@@Base+0x144>
   16218:	sub	r4, ip, r0
   1621c:	cmp	r4, ip
   16220:	bge	162d0 <flatcc_builder_create_table@@Base+0x1ac>
   16224:	mov	r2, r7
   16228:	mov	r3, r4
   1622c:	str	r0, [sp]
   16230:	add	r1, sp, #24
   16234:	ldr	r0, [r5, #36]	; 0x24
   16238:	ldr	r6, [r5, #44]	; 0x2c
   1623c:	blx	r6
   16240:	cmp	r0, #0
   16244:	bne	162cc <flatcc_builder_create_table@@Base+0x1a8>
   16248:	mov	r0, r4
   1624c:	str	r4, [r5, #136]	; 0x88
   16250:	add	sp, sp, #88	; 0x58
   16254:	ldrd	r4, [sp]
   16258:	ldrd	r6, [sp, #8]
   1625c:	ldr	r8, [sp, #16]
   16260:	add	sp, sp, #20
   16264:	pop	{pc}		; (ldr pc, [sp], #4)
   16268:	ldr	r1, [pc, #124]	; 162ec <flatcc_builder_create_table@@Base+0x1c8>
   1626c:	add	r7, r7, #1
   16270:	add	r3, sp, #88	; 0x58
   16274:	add	r3, r3, r7, lsl #3
   16278:	add	r0, r0, r8
   1627c:	mov	r7, r2
   16280:	str	r0, [sp, #16]
   16284:	str	r2, [sp, #20]
   16288:	str	r1, [r3, #-72]	; 0xffffffb8
   1628c:	str	r8, [r3, #-68]	; 0xffffffbc
   16290:	b	16218 <flatcc_builder_create_table@@Base+0xf4>
   16294:	movw	r1, #45508	; 0xb1c4
   16298:	movt	r1, #1
   1629c:	ldr	r3, [pc, #76]	; 162f0 <flatcc_builder_create_table@@Base+0x1cc>
   162a0:	movw	r0, #46212	; 0xb484
   162a4:	movt	r0, #1
   162a8:	movw	r2, #1243	; 0x4db
   162ac:	bl	12324 <__assert_fail@plt>
   162b0:	movw	r1, #45508	; 0xb1c4
   162b4:	movt	r1, #1
   162b8:	ldr	r3, [pc, #48]	; 162f0 <flatcc_builder_create_table@@Base+0x1cc>
   162bc:	movw	r0, #46192	; 0xb470
   162c0:	movt	r0, #1
   162c4:	movw	r2, #1237	; 0x4d5
   162c8:	bl	12324 <__assert_fail@plt>
   162cc:	bl	130d4 <flatcc_builder_default_alloc@@Base+0x19c>
   162d0:	movw	r1, #45508	; 0xb1c4
   162d4:	movt	r1, #1
   162d8:	ldr	r3, [pc, #20]	; 162f4 <flatcc_builder_create_table@@Base+0x1d0>
   162dc:	movw	r0, #45700	; 0xb284
   162e0:	movt	r0, #1
   162e4:	movw	r2, #647	; 0x287
   162e8:	bl	12324 <__assert_fail@plt>
   162ec:	andeq	sl, r1, ip, lsl fp
   162f0:	andeq	sl, r1, r0, asr pc
   162f4:	andeq	sl, r1, r0, lsr #21

000162f8 <flatcc_builder_check_required_field@@Base>:
   162f8:	ldr	r3, [r0, #32]
   162fc:	ldrh	r3, [r3, #14]
   16300:	cmp	r3, #3
   16304:	bne	16334 <flatcc_builder_check_required_field@@Base+0x3c>
   16308:	ldrh	r3, [r0, #8]
   1630c:	cmp	r3, r1
   16310:	bls	1632c <flatcc_builder_check_required_field@@Base+0x34>
   16314:	ldr	r3, [r0, #4]
   16318:	lsl	r1, r1, #1
   1631c:	ldrh	r0, [r3, r1]
   16320:	adds	r0, r0, #0
   16324:	movne	r0, #1
   16328:	bx	lr
   1632c:	mov	r0, #0
   16330:	bx	lr
   16334:	movw	r1, #45508	; 0xb1c4
   16338:	movt	r1, #1
   1633c:	ldr	r3, [pc, #20]	; 16358 <flatcc_builder_check_required_field@@Base+0x60>
   16340:	movw	r0, #46224	; 0xb490
   16344:	movt	r0, #1
   16348:	str	r4, [sp, #-8]!
   1634c:	movw	r2, #1272	; 0x4f8
   16350:	str	lr, [sp, #4]
   16354:	bl	12324 <__assert_fail@plt>
   16358:	andeq	sl, r1, ip, ror #30

0001635c <flatcc_builder_check_union_field@@Base>:
   1635c:	ldr	r3, [r0, #32]
   16360:	ldrh	r3, [r3, #14]
   16364:	cmp	r3, #3
   16368:	bne	163cc <flatcc_builder_check_union_field@@Base+0x70>
   1636c:	cmp	r1, #0
   16370:	beq	163b8 <flatcc_builder_check_union_field@@Base+0x5c>
   16374:	ldrh	r3, [r0, #8]
   16378:	cmp	r3, r1
   1637c:	bls	163b8 <flatcc_builder_check_union_field@@Base+0x5c>
   16380:	ldr	r3, [r0, #4]
   16384:	sub	r1, r1, #-2147483647	; 0x80000001
   16388:	lsl	r1, r1, #1
   1638c:	ldrh	r2, [r3, r1]!
   16390:	cmp	r2, #0
   16394:	ldrh	r1, [r3, #2]
   16398:	beq	163ac <flatcc_builder_check_union_field@@Base+0x50>
   1639c:	ldr	r3, [r0, #16]
   163a0:	ldrb	r3, [r3, r2]
   163a4:	cmp	r3, #0
   163a8:	bne	163c0 <flatcc_builder_check_union_field@@Base+0x64>
   163ac:	clz	r0, r1
   163b0:	lsr	r0, r0, #5
   163b4:	bx	lr
   163b8:	mov	r0, #0
   163bc:	bx	lr
   163c0:	adds	r0, r1, #0
   163c4:	movne	r0, #1
   163c8:	bx	lr
   163cc:	movw	r1, #45508	; 0xb1c4
   163d0:	movt	r1, #1
   163d4:	ldr	r3, [pc, #20]	; 163f0 <flatcc_builder_check_union_field@@Base+0x94>
   163d8:	movw	r0, #46224	; 0xb490
   163dc:	movt	r0, #1
   163e0:	str	r4, [sp, #-8]!
   163e4:	movw	r2, #1279	; 0x4ff
   163e8:	str	lr, [sp, #4]
   163ec:	bl	12324 <__assert_fail@plt>
   163f0:	muleq	r1, r0, pc	; <UNPREDICTABLE>

000163f4 <flatcc_builder_check_required@@Base>:
   163f4:	ldr	r3, [r0, #32]
   163f8:	ldrh	r3, [r3, #14]
   163fc:	cmp	r3, #3
   16400:	bne	16468 <flatcc_builder_check_required@@Base+0x74>
   16404:	ldrh	r3, [r0, #8]
   16408:	cmp	r3, r2
   1640c:	blt	16460 <flatcc_builder_check_required@@Base+0x6c>
   16410:	cmp	r2, #0
   16414:	ble	16458 <flatcc_builder_check_required@@Base+0x64>
   16418:	ldrh	r3, [r1]
   1641c:	ldr	ip, [r0, #4]
   16420:	lsl	r3, r3, #1
   16424:	ldrh	r0, [ip, r3]
   16428:	cmp	r0, #0
   1642c:	bxeq	lr
   16430:	add	r2, r1, r2, lsl #1
   16434:	add	r1, r1, #2
   16438:	b	16450 <flatcc_builder_check_required@@Base+0x5c>
   1643c:	ldrh	r3, [r1], #2
   16440:	lsl	r3, r3, #1
   16444:	ldrh	r0, [ip, r3]
   16448:	cmp	r0, #0
   1644c:	bxeq	lr
   16450:	cmp	r1, r2
   16454:	bne	1643c <flatcc_builder_check_required@@Base+0x48>
   16458:	mov	r0, #1
   1645c:	bx	lr
   16460:	mov	r0, #0
   16464:	bx	lr
   16468:	movw	r1, #45508	; 0xb1c4
   1646c:	movt	r1, #1
   16470:	ldr	r3, [pc, #20]	; 1648c <flatcc_builder_check_required@@Base+0x98>
   16474:	movw	r0, #46224	; 0xb490
   16478:	movt	r0, #1
   1647c:	str	r4, [sp, #-8]!
   16480:	movw	r2, #1297	; 0x511
   16484:	str	lr, [sp, #4]
   16488:	bl	12324 <__assert_fail@plt>
   1648c:			; <UNDEFINED> instruction: 0x0001afb4

00016490 <flatcc_builder_end_table@@Base>:
   16490:	ldr	r3, [r0, #32]
   16494:	strd	r4, [sp, #-20]!	; 0xffffffec
   16498:	ldrh	r3, [r3, #14]
   1649c:	strd	r6, [sp, #8]
   164a0:	str	lr, [sp, #16]
   164a4:	sub	sp, sp, #20
   164a8:	cmp	r3, #3
   164ac:	bne	16630 <flatcc_builder_end_table@@Base+0x1a0>
   164b0:	ldrh	r5, [r0, #8]
   164b4:	movw	ip, #31153	; 0x79b1
   164b8:	movt	ip, #40503	; 0x9e37
   164bc:	mov	r4, r0
   164c0:	ldr	r1, [r0, #4]
   164c4:	ldr	r3, [r0, #12]
   164c8:	add	r5, r5, #2
   164cc:	lsl	r5, r5, #1
   164d0:	ldr	lr, [r0, #20]
   164d4:	sub	r6, r1, #4
   164d8:	uxth	r5, r5
   164dc:	eor	r3, r3, r5
   164e0:	mov	r2, r5
   164e4:	strh	r5, [r1, #-4]
   164e8:	mul	r3, ip, r3
   164ec:	add	lr, lr, #4
   164f0:	uxth	lr, lr
   164f4:	eor	r3, r3, lr
   164f8:	strh	lr, [r1, #-2]
   164fc:	mov	r1, r6
   16500:	mul	r3, ip, r3
   16504:	str	r3, [r0, #12]
   16508:	bl	15db0 <flatcc_builder_create_cached_vtable@@Base>
   1650c:	subs	r7, r0, #0
   16510:	bne	16530 <flatcc_builder_end_table@@Base+0xa0>
   16514:	mov	r5, #0
   16518:	mov	r0, r5
   1651c:	add	sp, sp, #20
   16520:	ldrd	r4, [sp]
   16524:	ldrd	r6, [sp, #8]
   16528:	add	sp, sp, #16
   1652c:	pop	{pc}		; (ldr pc, [sp], #4)
   16530:	mov	r2, r5
   16534:	mov	r1, #0
   16538:	mov	r0, r6
   1653c:	bl	122f4 <memset@plt>
   16540:	ldr	ip, [r4]
   16544:	mov	r0, r4
   16548:	ldr	r3, [r4, #32]
   1654c:	ldr	r2, [r4, #76]	; 0x4c
   16550:	ldr	r1, [r3, #20]
   16554:	str	r7, [sp, #8]
   16558:	ldrh	r3, [r4, #130]	; 0x82
   1655c:	add	r2, r2, r1
   16560:	ldr	r1, [r4, #16]
   16564:	sub	ip, ip, r2
   16568:	asr	ip, ip, #1
   1656c:	str	r2, [sp]
   16570:	ldr	r2, [r4, #20]
   16574:	str	ip, [sp, #4]
   16578:	bl	16124 <flatcc_builder_create_table@@Base>
   1657c:	subs	r5, r0, #0
   16580:	beq	16514 <flatcc_builder_end_table@@Base+0x84>
   16584:	ldr	r3, [r4, #32]
   16588:	mov	r1, #0
   1658c:	ldr	r0, [r4, #52]	; 0x34
   16590:	ldr	r2, [r4, #76]	; 0x4c
   16594:	ldr	ip, [r3, #16]
   16598:	ldr	r6, [r3, #20]
   1659c:	ldrh	lr, [r3, #28]
   165a0:	add	r0, r0, ip
   165a4:	ldr	ip, [r3, #24]
   165a8:	add	r3, r2, r6
   165ac:	ldr	r2, [r4, #20]
   165b0:	str	r3, [r4]
   165b4:	str	r0, [r4, #4]
   165b8:	strh	lr, [r4, #8]
   165bc:	str	ip, [r4, #12]
   165c0:	ldr	r0, [r4, #16]
   165c4:	bl	122f4 <memset@plt>
   165c8:	ldr	r3, [r4, #32]
   165cc:	ldr	r0, [r4, #60]	; 0x3c
   165d0:	ldr	r2, [r4, #64]	; 0x40
   165d4:	ldr	ip, [r3]
   165d8:	ldmib	r3, {r1, lr}
   165dc:	add	r0, r0, ip
   165e0:	sub	r2, r2, ip
   165e4:	str	r0, [r4, #16]
   165e8:	cmp	r2, r1
   165ec:	ldrh	r0, [r4, #128]	; 0x80
   165f0:	movcs	r2, r1
   165f4:	str	lr, [r4, #20]
   165f8:	str	ip, [r4, #28]
   165fc:	ldrh	ip, [r4, #130]	; 0x82
   16600:	str	r2, [r4, #24]
   16604:	ldr	r2, [r4, #156]	; 0x9c
   16608:	str	r1, [r3, #4]
   1660c:	cmp	r0, ip
   16610:	sub	r0, r3, #36	; 0x24
   16614:	strhcc	ip, [r4, #128]	; 0x80
   16618:	ldrh	r1, [r3, #12]
   1661c:	sub	r3, r2, #1
   16620:	str	r0, [r4, #32]
   16624:	strh	r1, [r4, #130]	; 0x82
   16628:	str	r3, [r4, #156]	; 0x9c
   1662c:	b	16518 <flatcc_builder_end_table@@Base+0x88>
   16630:	movw	r1, #45508	; 0xb1c4
   16634:	movt	r1, #1
   16638:	ldr	r3, [pc, #12]	; 1664c <flatcc_builder_end_table@@Base+0x1bc>
   1663c:	movw	r0, #46224	; 0xb490
   16640:	movt	r0, #1
   16644:	movw	r2, #1317	; 0x525
   16648:	bl	12324 <__assert_fail@plt>
   1664c:	ldrdeq	sl, [r1], -r4

00016650 <flatcc_builder_create_vector@@Base>:
   16650:	strd	r4, [sp, #-16]!
   16654:	mov	r4, r0
   16658:	str	r6, [sp, #8]
   1665c:	str	lr, [sp, #12]
   16660:	sub	sp, sp, #88	; 0x58
   16664:	ldr	ip, [sp, #108]	; 0x6c
   16668:	ldrh	r0, [sp, #104]	; 0x68
   1666c:	cmp	r2, ip
   16670:	bhi	16764 <flatcc_builder_create_vector@@Base+0x114>
   16674:	ldrh	ip, [r4, #128]	; 0x80
   16678:	cmp	r0, #4
   1667c:	mul	r3, r3, r2
   16680:	movcc	r0, #4
   16684:	add	lr, sp, #12
   16688:	str	r2, [sp, #12]
   1668c:	ldr	r6, [r4, #136]	; 0x88
   16690:	mov	r2, #1
   16694:	str	lr, [sp, #24]
   16698:	cmp	ip, r0
   1669c:	mov	ip, #4
   166a0:	strhcc	r0, [r4, #128]	; 0x80
   166a4:	sub	lr, r6, r3
   166a8:	sub	r0, r0, #1
   166ac:	cmp	r3, #0
   166b0:	and	r0, r0, lr
   166b4:	str	ip, [sp, #16]
   166b8:	moveq	r3, #2
   166bc:	str	r2, [sp, #20]
   166c0:	str	ip, [sp, #28]
   166c4:	beq	166e8 <flatcc_builder_create_vector@@Base+0x98>
   166c8:	mov	lr, #2
   166cc:	add	ip, r3, ip
   166d0:	mov	r2, lr
   166d4:	str	ip, [sp, #16]
   166d8:	str	r3, [sp, #36]	; 0x24
   166dc:	mov	r3, #3
   166e0:	str	lr, [sp, #20]
   166e4:	str	r1, [sp, #32]
   166e8:	cmp	r0, #0
   166ec:	bne	16738 <flatcc_builder_create_vector@@Base+0xe8>
   166f0:	sub	r5, r6, ip
   166f4:	cmp	r6, r5
   166f8:	ble	16784 <flatcc_builder_create_vector@@Base+0x134>
   166fc:	mov	r3, r5
   16700:	add	r1, sp, #24
   16704:	str	ip, [sp]
   16708:	ldr	r0, [r4, #36]	; 0x24
   1670c:	ldr	r6, [r4, #44]	; 0x2c
   16710:	blx	r6
   16714:	cmp	r0, #0
   16718:	bne	16780 <flatcc_builder_create_vector@@Base+0x130>
   1671c:	mov	r0, r5
   16720:	str	r5, [r4, #136]	; 0x88
   16724:	add	sp, sp, #88	; 0x58
   16728:	ldrd	r4, [sp]
   1672c:	ldr	r6, [sp, #8]
   16730:	add	sp, sp, #12
   16734:	pop	{pc}		; (ldr pc, [sp], #4)
   16738:	ldr	lr, [pc, #96]	; 167a0 <flatcc_builder_create_vector@@Base+0x150>
   1673c:	add	r2, r2, #1
   16740:	add	r1, sp, #88	; 0x58
   16744:	add	r1, r1, r2, lsl #3
   16748:	add	ip, ip, r0
   1674c:	mov	r2, r3
   16750:	str	ip, [sp, #16]
   16754:	str	r3, [sp, #20]
   16758:	str	lr, [r1, #-72]	; 0xffffffb8
   1675c:	str	r0, [r1, #-68]	; 0xffffffbc
   16760:	b	166f0 <flatcc_builder_create_vector@@Base+0xa0>
   16764:	movw	r1, #45508	; 0xb1c4
   16768:	movt	r1, #1
   1676c:	ldr	r3, [pc, #48]	; 167a4 <flatcc_builder_create_vector@@Base+0x154>
   16770:	movw	r0, #46268	; 0xb4bc
   16774:	movt	r0, #1
   16778:	movw	r2, #1365	; 0x555
   1677c:	bl	12324 <__assert_fail@plt>
   16780:	bl	130d4 <flatcc_builder_default_alloc@@Base+0x19c>
   16784:	movw	r1, #45508	; 0xb1c4
   16788:	movt	r1, #1
   1678c:	ldr	r3, [pc, #20]	; 167a8 <flatcc_builder_create_vector@@Base+0x158>
   16790:	movw	r0, #45700	; 0xb284
   16794:	movt	r0, #1
   16798:	movw	r2, #647	; 0x287
   1679c:	bl	12324 <__assert_fail@plt>
   167a0:	andeq	sl, r1, ip, lsl fp
   167a4:	strdeq	sl, [r1], -r0
   167a8:	andeq	sl, r1, r0, lsr #21

000167ac <flatcc_builder_end_vector@@Base>:
   167ac:	ldr	r2, [r0, #32]
   167b0:	strd	r4, [sp, #-16]!
   167b4:	ldrh	r3, [r2, #14]
   167b8:	str	r6, [sp, #8]
   167bc:	str	lr, [sp, #12]
   167c0:	sub	sp, sp, #88	; 0x58
   167c4:	cmp	r3, #4
   167c8:	bne	16990 <flatcc_builder_end_vector@@Base+0x1e4>
   167cc:	ldr	ip, [r2, #20]
   167d0:	mov	r4, r0
   167d4:	ldr	r1, [r2, #24]
   167d8:	ldrh	r3, [r0, #130]	; 0x82
   167dc:	ldr	r5, [r4, #16]
   167e0:	cmp	ip, r1
   167e4:	ldr	r0, [r2, #16]
   167e8:	bhi	16974 <flatcc_builder_end_vector@@Base+0x1c8>
   167ec:	cmp	r3, #4
   167f0:	mul	r0, r0, ip
   167f4:	mov	r1, #4
   167f8:	ldrh	r2, [r4, #128]	; 0x80
   167fc:	movcc	r3, #4
   16800:	add	r6, sp, #12
   16804:	str	ip, [sp, #12]
   16808:	ldr	lr, [r4, #136]	; 0x88
   1680c:	str	r1, [sp, #16]
   16810:	str	r6, [sp, #24]
   16814:	cmp	r2, r3
   16818:	mov	r2, #1
   1681c:	strhcc	r3, [r4, #128]	; 0x80
   16820:	sub	ip, lr, r0
   16824:	sub	r3, r3, #1
   16828:	cmp	r0, #0
   1682c:	and	r3, r3, ip
   16830:	str	r2, [sp, #20]
   16834:	moveq	r0, #2
   16838:	str	r1, [sp, #28]
   1683c:	beq	16860 <flatcc_builder_end_vector@@Base+0xb4>
   16840:	mov	ip, #2
   16844:	add	r1, r0, r1
   16848:	mov	r2, ip
   1684c:	str	r1, [sp, #16]
   16850:	str	r0, [sp, #36]	; 0x24
   16854:	mov	r0, #3
   16858:	str	ip, [sp, #20]
   1685c:	str	r5, [sp, #32]
   16860:	cmp	r3, #0
   16864:	bne	16928 <flatcc_builder_end_vector@@Base+0x17c>
   16868:	sub	r5, lr, r1
   1686c:	cmp	lr, r5
   16870:	ble	16958 <flatcc_builder_end_vector@@Base+0x1ac>
   16874:	mov	r3, r5
   16878:	str	r1, [sp]
   1687c:	add	r1, sp, #24
   16880:	ldr	r0, [r4, #36]	; 0x24
   16884:	ldr	r6, [r4, #44]	; 0x2c
   16888:	blx	r6
   1688c:	subs	r1, r0, #0
   16890:	bne	16954 <flatcc_builder_end_vector@@Base+0x1a8>
   16894:	cmp	r5, #0
   16898:	str	r5, [r4, #136]	; 0x88
   1689c:	beq	16910 <flatcc_builder_end_vector@@Base+0x164>
   168a0:	ldr	r0, [r4, #16]
   168a4:	ldr	r2, [r4, #20]
   168a8:	bl	122f4 <memset@plt>
   168ac:	ldr	r3, [r4, #32]
   168b0:	ldr	r0, [r4, #60]	; 0x3c
   168b4:	ldr	r2, [r4, #64]	; 0x40
   168b8:	ldr	ip, [r3]
   168bc:	ldmib	r3, {r1, lr}
   168c0:	add	r0, r0, ip
   168c4:	sub	r2, r2, ip
   168c8:	str	r0, [r4, #16]
   168cc:	cmp	r2, r1
   168d0:	ldrh	r0, [r4, #128]	; 0x80
   168d4:	movcs	r2, r1
   168d8:	str	lr, [r4, #20]
   168dc:	str	ip, [r4, #28]
   168e0:	ldrh	ip, [r4, #130]	; 0x82
   168e4:	str	r2, [r4, #24]
   168e8:	ldr	r2, [r4, #156]	; 0x9c
   168ec:	str	r1, [r3, #4]
   168f0:	cmp	r0, ip
   168f4:	sub	r0, r3, #36	; 0x24
   168f8:	strhcc	ip, [r4, #128]	; 0x80
   168fc:	ldrh	r1, [r3, #12]
   16900:	sub	r3, r2, #1
   16904:	str	r0, [r4, #32]
   16908:	strh	r1, [r4, #130]	; 0x82
   1690c:	str	r3, [r4, #156]	; 0x9c
   16910:	mov	r0, r5
   16914:	add	sp, sp, #88	; 0x58
   16918:	ldrd	r4, [sp]
   1691c:	ldr	r6, [sp, #8]
   16920:	add	sp, sp, #12
   16924:	pop	{pc}		; (ldr pc, [sp], #4)
   16928:	ldr	r5, [pc, #124]	; 169ac <flatcc_builder_end_vector@@Base+0x200>
   1692c:	add	r2, r2, #1
   16930:	add	ip, sp, #88	; 0x58
   16934:	add	ip, ip, r2, lsl #3
   16938:	add	r1, r1, r3
   1693c:	mov	r2, r0
   16940:	str	r1, [sp, #16]
   16944:	str	r0, [sp, #20]
   16948:	str	r5, [ip, #-72]	; 0xffffffb8
   1694c:	str	r3, [ip, #-68]	; 0xffffffbc
   16950:	b	16868 <flatcc_builder_end_vector@@Base+0xbc>
   16954:	bl	130d4 <flatcc_builder_default_alloc@@Base+0x19c>
   16958:	movw	r1, #45508	; 0xb1c4
   1695c:	movt	r1, #1
   16960:	ldr	r3, [pc, #72]	; 169b0 <flatcc_builder_end_vector@@Base+0x204>
   16964:	movw	r0, #45700	; 0xb284
   16968:	movt	r0, #1
   1696c:	movw	r2, #647	; 0x287
   16970:	bl	12324 <__assert_fail@plt>
   16974:	movw	r1, #45508	; 0xb1c4
   16978:	movt	r1, #1
   1697c:	ldr	r3, [pc, #48]	; 169b4 <flatcc_builder_end_vector@@Base+0x208>
   16980:	movw	r0, #46268	; 0xb4bc
   16984:	movt	r0, #1
   16988:	movw	r2, #1365	; 0x555
   1698c:	bl	12324 <__assert_fail@plt>
   16990:	movw	r1, #45508	; 0xb1c4
   16994:	movt	r1, #1
   16998:	ldr	r3, [pc, #24]	; 169b8 <flatcc_builder_end_vector@@Base+0x20c>
   1699c:	movw	r0, #45872	; 0xb330
   169a0:	movt	r0, #1
   169a4:	movw	r2, #1400	; 0x578
   169a8:	bl	12324 <__assert_fail@plt>
   169ac:	andeq	sl, r1, ip, lsl fp
   169b0:	andeq	sl, r1, r0, lsr #21
   169b4:	strdeq	sl, [r1], -r0
   169b8:	andeq	fp, r1, r0, lsl r0

000169bc <flatcc_builder_vector_count@@Base>:
   169bc:	ldr	r3, [r0, #32]
   169c0:	ldr	r0, [r3, #20]
   169c4:	bx	lr

000169c8 <flatcc_builder_vector_edit@@Base>:
   169c8:	ldr	r0, [r0, #16]
   169cc:	bx	lr

000169d0 <flatcc_builder_create_offset_vector_direct@@Base>:
   169d0:	cmn	r2, #-1073741823	; 0xc0000001
   169d4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   169d8:	strd	r6, [sp, #8]
   169dc:	str	r8, [sp, #16]
   169e0:	str	lr, [sp, #20]
   169e4:	sub	sp, sp, #88	; 0x58
   169e8:	bhi	16aec <flatcc_builder_create_offset_vector_direct@@Base+0x11c>
   169ec:	ldrh	r3, [r0, #128]	; 0x80
   169f0:	mov	r4, r0
   169f4:	mov	ip, #1
   169f8:	str	r2, [sp, #12]
   169fc:	ldr	r5, [r4, #136]	; 0x88
   16a00:	str	ip, [sp, #20]
   16a04:	cmp	r3, #3
   16a08:	movls	r3, #4
   16a0c:	strhls	r3, [r0, #128]	; 0x80
   16a10:	mov	r0, #4
   16a14:	add	r3, sp, #12
   16a18:	lsls	lr, r2, #2
   16a1c:	str	r0, [sp, #16]
   16a20:	moveq	r7, #2
   16a24:	str	r3, [sp, #24]
   16a28:	and	r3, r5, #3
   16a2c:	str	r0, [sp, #28]
   16a30:	beq	16a54 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   16a34:	mov	r6, #2
   16a38:	add	r0, lr, r0
   16a3c:	mov	ip, r6
   16a40:	mov	r7, #3
   16a44:	str	r0, [sp, #16]
   16a48:	str	r6, [sp, #20]
   16a4c:	str	r1, [sp, #32]
   16a50:	str	lr, [sp, #36]	; 0x24
   16a54:	cmp	r3, #0
   16a58:	bne	16ac0 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   16a5c:	cmp	r2, #0
   16a60:	beq	16b10 <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   16a64:	ldr	r3, [r1]
   16a68:	cmp	r3, #0
   16a6c:	subne	lr, lr, #4
   16a70:	movne	r2, #0
   16a74:	beq	16aa4 <flatcc_builder_create_offset_vector_direct@@Base+0xd4>
   16a78:	sub	r3, r3, #4
   16a7c:	cmp	r2, lr
   16a80:	sub	r3, r3, r5
   16a84:	add	r3, r3, r0
   16a88:	sub	r3, r3, r2
   16a8c:	str	r3, [r1]
   16a90:	beq	16b0c <flatcc_builder_create_offset_vector_direct@@Base+0x13c>
   16a94:	ldr	r3, [r1, #4]!
   16a98:	add	r2, r2, #4
   16a9c:	cmp	r3, #0
   16aa0:	bne	16a78 <flatcc_builder_create_offset_vector_direct@@Base+0xa8>
   16aa4:	movw	r1, #45508	; 0xb1c4
   16aa8:	movt	r1, #1
   16aac:	ldr	r3, [pc, #176]	; 16b64 <flatcc_builder_create_offset_vector_direct@@Base+0x194>
   16ab0:	movw	r0, #45700	; 0xb284
   16ab4:	movt	r0, #1
   16ab8:	movw	r2, #1463	; 0x5b7
   16abc:	bl	12324 <__assert_fail@plt>
   16ac0:	ldr	r8, [pc, #160]	; 16b68 <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   16ac4:	add	ip, ip, #1
   16ac8:	add	r6, sp, #88	; 0x58
   16acc:	add	r6, r6, ip, lsl #3
   16ad0:	add	r0, r0, r3
   16ad4:	mov	ip, r7
   16ad8:	str	r0, [sp, #16]
   16adc:	str	r7, [sp, #20]
   16ae0:	str	r8, [r6, #-72]	; 0xffffffb8
   16ae4:	str	r3, [r6, #-68]	; 0xffffffbc
   16ae8:	b	16a5c <flatcc_builder_create_offset_vector_direct@@Base+0x8c>
   16aec:	mov	r6, #0
   16af0:	mov	r0, r6
   16af4:	add	sp, sp, #88	; 0x58
   16af8:	ldrd	r4, [sp]
   16afc:	ldrd	r6, [sp, #8]
   16b00:	ldr	r8, [sp, #16]
   16b04:	add	sp, sp, #20
   16b08:	pop	{pc}		; (ldr pc, [sp], #4)
   16b0c:	ldr	r5, [r4, #136]	; 0x88
   16b10:	sub	r6, r5, r0
   16b14:	cmp	r6, r5
   16b18:	bge	16b48 <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   16b1c:	mov	r2, ip
   16b20:	mov	r3, r6
   16b24:	str	r0, [sp]
   16b28:	add	r1, sp, #24
   16b2c:	ldr	r0, [r4, #36]	; 0x24
   16b30:	ldr	r5, [r4, #44]	; 0x2c
   16b34:	blx	r5
   16b38:	cmp	r0, #0
   16b3c:	streq	r6, [r4, #136]	; 0x88
   16b40:	beq	16af0 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   16b44:	bl	130d4 <flatcc_builder_default_alloc@@Base+0x19c>
   16b48:	movw	r1, #45508	; 0xb1c4
   16b4c:	movt	r1, #1
   16b50:	ldr	r3, [pc, #20]	; 16b6c <flatcc_builder_create_offset_vector_direct@@Base+0x19c>
   16b54:	movw	r0, #45700	; 0xb284
   16b58:	movt	r0, #1
   16b5c:	movw	r2, #647	; 0x287
   16b60:	bl	12324 <__assert_fail@plt>
   16b64:	andeq	sl, r1, ip, lsl sp
   16b68:	andeq	sl, r1, ip, lsl fp
   16b6c:	andeq	sl, r1, r0, lsr #21

00016b70 <flatcc_builder_end_offset_vector@@Base>:
   16b70:	ldr	r3, [r0, #32]
   16b74:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16b78:	ldrh	r2, [r3, #14]
   16b7c:	strd	r6, [sp, #8]
   16b80:	str	r8, [sp, #16]
   16b84:	str	lr, [sp, #20]
   16b88:	sub	sp, sp, #88	; 0x58
   16b8c:	cmp	r2, #5
   16b90:	bne	16d78 <flatcc_builder_end_offset_vector@@Base+0x208>
   16b94:	ldr	r3, [r3, #20]
   16b98:	cmn	r3, #-1073741823	; 0xc0000001
   16b9c:	bhi	16ca0 <flatcc_builder_end_offset_vector@@Base+0x130>
   16ba0:	ldrh	r2, [r0, #128]	; 0x80
   16ba4:	mov	r4, r0
   16ba8:	add	r5, sp, #12
   16bac:	mov	r1, #1
   16bb0:	str	r3, [sp, #12]
   16bb4:	ldr	ip, [r4, #136]	; 0x88
   16bb8:	str	r1, [sp, #20]
   16bbc:	ldr	r0, [r0, #16]
   16bc0:	cmp	r2, #3
   16bc4:	str	r5, [sp, #24]
   16bc8:	movls	r2, #4
   16bcc:	and	r5, ip, #3
   16bd0:	strhls	r2, [r4, #128]	; 0x80
   16bd4:	mov	r2, #4
   16bd8:	lsls	lr, r3, #2
   16bdc:	moveq	r6, #2
   16be0:	str	r2, [sp, #16]
   16be4:	str	r2, [sp, #28]
   16be8:	beq	16c0c <flatcc_builder_end_offset_vector@@Base+0x9c>
   16bec:	mov	r7, #2
   16bf0:	add	r2, lr, r2
   16bf4:	mov	r1, r7
   16bf8:	mov	r6, #3
   16bfc:	str	r2, [sp, #16]
   16c00:	str	r7, [sp, #20]
   16c04:	str	r0, [sp, #32]
   16c08:	str	lr, [sp, #36]	; 0x24
   16c0c:	cmp	r5, #0
   16c10:	bne	16c78 <flatcc_builder_end_offset_vector@@Base+0x108>
   16c14:	cmp	r3, #0
   16c18:	beq	16cc8 <flatcc_builder_end_offset_vector@@Base+0x158>
   16c1c:	ldr	r3, [r0]
   16c20:	cmp	r3, #0
   16c24:	subne	lr, lr, #4
   16c28:	movne	r1, #0
   16c2c:	beq	16c5c <flatcc_builder_end_offset_vector@@Base+0xec>
   16c30:	sub	r3, r3, #4
   16c34:	cmp	r1, lr
   16c38:	sub	r3, r3, ip
   16c3c:	add	r3, r3, r2
   16c40:	sub	r3, r3, r1
   16c44:	str	r3, [r0]
   16c48:	beq	16cc0 <flatcc_builder_end_offset_vector@@Base+0x150>
   16c4c:	ldr	r3, [r0, #4]!
   16c50:	add	r1, r1, #4
   16c54:	cmp	r3, #0
   16c58:	bne	16c30 <flatcc_builder_end_offset_vector@@Base+0xc0>
   16c5c:	movw	r1, #45508	; 0xb1c4
   16c60:	movt	r1, #1
   16c64:	ldr	r3, [pc, #328]	; 16db4 <flatcc_builder_end_offset_vector@@Base+0x244>
   16c68:	movw	r0, #45700	; 0xb284
   16c6c:	movt	r0, #1
   16c70:	movw	r2, #1463	; 0x5b7
   16c74:	bl	12324 <__assert_fail@plt>
   16c78:	ldr	r7, [pc, #312]	; 16db8 <flatcc_builder_end_offset_vector@@Base+0x248>
   16c7c:	add	r1, r1, #1
   16c80:	add	r8, sp, #88	; 0x58
   16c84:	add	r1, r8, r1, lsl #3
   16c88:	add	r2, r2, r5
   16c8c:	str	r2, [sp, #16]
   16c90:	str	r6, [sp, #20]
   16c94:	str	r7, [r1, #-72]	; 0xffffffb8
   16c98:	str	r5, [r1, #-68]	; 0xffffffbc
   16c9c:	b	16c14 <flatcc_builder_end_offset_vector@@Base+0xa4>
   16ca0:	mov	r5, #0
   16ca4:	mov	r0, r5
   16ca8:	add	sp, sp, #88	; 0x58
   16cac:	ldrd	r4, [sp]
   16cb0:	ldrd	r6, [sp, #8]
   16cb4:	ldr	r8, [sp, #16]
   16cb8:	add	sp, sp, #20
   16cbc:	pop	{pc}		; (ldr pc, [sp], #4)
   16cc0:	ldr	r2, [sp, #16]
   16cc4:	ldr	ip, [r4, #136]	; 0x88
   16cc8:	sub	r5, ip, r2
   16ccc:	cmp	r5, ip
   16cd0:	bge	16d98 <flatcc_builder_end_offset_vector@@Base+0x228>
   16cd4:	add	r1, sp, #24
   16cd8:	mov	r3, r5
   16cdc:	str	r2, [sp]
   16ce0:	ldr	r2, [sp, #20]
   16ce4:	ldr	r0, [r4, #36]	; 0x24
   16ce8:	ldr	r6, [r4, #44]	; 0x2c
   16cec:	blx	r6
   16cf0:	subs	r1, r0, #0
   16cf4:	bne	16d94 <flatcc_builder_end_offset_vector@@Base+0x224>
   16cf8:	cmp	r5, #0
   16cfc:	str	r5, [r4, #136]	; 0x88
   16d00:	beq	16ca0 <flatcc_builder_end_offset_vector@@Base+0x130>
   16d04:	ldr	r0, [r4, #16]
   16d08:	ldr	r2, [r4, #20]
   16d0c:	bl	122f4 <memset@plt>
   16d10:	ldr	r3, [r4, #32]
   16d14:	ldr	r0, [r4, #60]	; 0x3c
   16d18:	ldr	r2, [r4, #64]	; 0x40
   16d1c:	ldr	ip, [r3]
   16d20:	ldmib	r3, {r1, lr}
   16d24:	add	r0, r0, ip
   16d28:	sub	r2, r2, ip
   16d2c:	str	r0, [r4, #16]
   16d30:	cmp	r2, r1
   16d34:	ldrh	r0, [r4, #128]	; 0x80
   16d38:	movcs	r2, r1
   16d3c:	str	lr, [r4, #20]
   16d40:	str	ip, [r4, #28]
   16d44:	ldrh	ip, [r4, #130]	; 0x82
   16d48:	str	r2, [r4, #24]
   16d4c:	ldr	r2, [r4, #156]	; 0x9c
   16d50:	str	r1, [r3, #4]
   16d54:	cmp	r0, ip
   16d58:	sub	r0, r3, #36	; 0x24
   16d5c:	strhcc	ip, [r4, #128]	; 0x80
   16d60:	ldrh	r1, [r3, #12]
   16d64:	sub	r3, r2, #1
   16d68:	str	r0, [r4, #32]
   16d6c:	strh	r1, [r4, #130]	; 0x82
   16d70:	str	r3, [r4, #156]	; 0x9c
   16d74:	b	16ca4 <flatcc_builder_end_offset_vector@@Base+0x134>
   16d78:	movw	r1, #45508	; 0xb1c4
   16d7c:	movt	r1, #1
   16d80:	ldr	r3, [pc, #52]	; 16dbc <flatcc_builder_end_offset_vector@@Base+0x24c>
   16d84:	movw	r0, #45980	; 0xb39c
   16d88:	movt	r0, #1
   16d8c:	movw	r2, #1480	; 0x5c8
   16d90:	bl	12324 <__assert_fail@plt>
   16d94:	bl	130d4 <flatcc_builder_default_alloc@@Base+0x19c>
   16d98:	movw	r1, #45508	; 0xb1c4
   16d9c:	movt	r1, #1
   16da0:	ldr	r3, [pc, #24]	; 16dc0 <flatcc_builder_end_offset_vector@@Base+0x250>
   16da4:	movw	r0, #45700	; 0xb284
   16da8:	movt	r0, #1
   16dac:	movw	r2, #647	; 0x287
   16db0:	bl	12324 <__assert_fail@plt>
   16db4:	andeq	sl, r1, ip, lsl sp
   16db8:	andeq	sl, r1, ip, lsl fp
   16dbc:	andeq	sl, r1, r0, lsl #30
   16dc0:	andeq	sl, r1, r0, lsr #21

00016dc4 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   16dc4:	ldr	r2, [r0, #32]
   16dc8:	strd	r4, [sp, #-16]!
   16dcc:	ldrh	ip, [r2, #14]
   16dd0:	str	r6, [sp, #8]
   16dd4:	str	lr, [sp, #12]
   16dd8:	cmp	ip, #5
   16ddc:	bne	16e94 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   16de0:	ldr	r2, [r2, #20]
   16de4:	cmn	r2, #-1073741823	; 0xc0000001
   16de8:	bhi	16e04 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
   16dec:	mov	r3, r1
   16df0:	ldr	r1, [r0, #16]
   16df4:	mov	r4, r0
   16df8:	bl	132c0 <flatcc_builder_default_alloc@@Base+0x388>
   16dfc:	subs	r5, r0, #0
   16e00:	bne	16e1c <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   16e04:	mov	r5, #0
   16e08:	mov	r0, r5
   16e0c:	ldrd	r4, [sp]
   16e10:	ldr	r6, [sp, #8]
   16e14:	add	sp, sp, #12
   16e18:	pop	{pc}		; (ldr pc, [sp], #4)
   16e1c:	mov	r1, #0
   16e20:	ldr	r0, [r4, #16]
   16e24:	ldr	r2, [r4, #20]
   16e28:	bl	122f4 <memset@plt>
   16e2c:	ldr	r3, [r4, #32]
   16e30:	ldr	r0, [r4, #60]	; 0x3c
   16e34:	ldr	r2, [r4, #64]	; 0x40
   16e38:	ldr	ip, [r3]
   16e3c:	ldmib	r3, {r1, lr}
   16e40:	add	r0, r0, ip
   16e44:	sub	r2, r2, ip
   16e48:	str	r0, [r4, #16]
   16e4c:	cmp	r2, r1
   16e50:	ldrh	r0, [r4, #128]	; 0x80
   16e54:	movcs	r2, r1
   16e58:	str	lr, [r4, #20]
   16e5c:	str	ip, [r4, #28]
   16e60:	ldrh	ip, [r4, #130]	; 0x82
   16e64:	str	r2, [r4, #24]
   16e68:	ldr	r2, [r4, #156]	; 0x9c
   16e6c:	str	r1, [r3, #4]
   16e70:	cmp	r0, ip
   16e74:	sub	r0, r3, #36	; 0x24
   16e78:	strhcc	ip, [r4, #128]	; 0x80
   16e7c:	ldrh	r1, [r3, #12]
   16e80:	sub	r3, r2, #1
   16e84:	str	r0, [r4, #32]
   16e88:	strh	r1, [r4, #130]	; 0x82
   16e8c:	str	r3, [r4, #156]	; 0x9c
   16e90:	b	16e08 <flatcc_builder_end_offset_vector_for_unions@@Base+0x44>
   16e94:	movw	r1, #45508	; 0xb1c4
   16e98:	movt	r1, #1
   16e9c:	ldr	r3, [pc, #12]	; 16eb0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   16ea0:	movw	r0, #45980	; 0xb39c
   16ea4:	movt	r0, #1
   16ea8:	movw	r2, #1493	; 0x5d5
   16eac:	bl	12324 <__assert_fail@plt>
   16eb0:	andeq	fp, r1, ip, lsr #32

00016eb4 <flatcc_builder_offset_vector_edit@@Base>:
   16eb4:	ldr	r0, [r0, #16]
   16eb8:	bx	lr

00016ebc <flatcc_builder_offset_vector_count@@Base>:
   16ebc:	ldr	r3, [r0, #32]
   16ec0:	ldr	r0, [r3, #20]
   16ec4:	bx	lr

00016ec8 <flatcc_builder_create_union_vector@@Base>:
   16ec8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16ecc:	mov	r4, r1
   16ed0:	mov	r1, #4
   16ed4:	strd	r6, [sp, #8]
   16ed8:	mov	r6, r0
   16edc:	mov	r0, r4
   16ee0:	strd	r8, [sp, #16]
   16ee4:	mov	r5, r2
   16ee8:	mov	r7, r3
   16eec:	str	sl, [sp, #24]
   16ef0:	str	lr, [sp, #28]
   16ef4:	sub	sp, sp, #8
   16ef8:	bl	1319c <flatcc_builder_default_alloc@@Base+0x264>
   16efc:	cmp	r0, #0
   16f00:	bne	1706c <flatcc_builder_create_union_vector@@Base+0x1a4>
   16f04:	ldr	ip, [r4, #28]
   16f08:	mov	lr, #4
   16f0c:	mov	r8, #5
   16f10:	mvn	r9, #3
   16f14:	ldr	r3, [r4, #32]
   16f18:	ldr	r2, [r4, #64]	; 0x40
   16f1c:	ldr	r1, [r4, #60]	; 0x3c
   16f20:	strh	r8, [r3, #14]
   16f24:	str	lr, [r3, #16]
   16f28:	sub	r2, r2, ip
   16f2c:	str	r0, [r3, #20]
   16f30:	mov	r0, r4
   16f34:	cmn	r2, #4
   16f38:	add	r1, r1, ip
   16f3c:	mvnhi	r2, #3
   16f40:	str	r1, [r4, #16]
   16f44:	mov	r1, r7
   16f48:	str	r2, [r4, #24]
   16f4c:	str	r9, [r3, #4]
   16f50:	bl	14a44 <flatcc_builder_extend_offset_vector@@Base>
   16f54:	cmp	r0, #0
   16f58:	beq	1706c <flatcc_builder_create_union_vector@@Base+0x1a4>
   16f5c:	ldr	r8, [r4, #20]
   16f60:	ldr	r3, [r4, #24]
   16f64:	add	r2, r7, r8
   16f68:	cmp	r2, r3
   16f6c:	str	r2, [r4, #20]
   16f70:	bcs	17098 <flatcc_builder_create_union_vector@@Base+0x1d0>
   16f74:	ldr	r1, [r4, #16]
   16f78:	adds	r8, r1, r8
   16f7c:	beq	1706c <flatcc_builder_create_union_vector@@Base+0x1a4>
   16f80:	cmp	r7, #0
   16f84:	beq	16fb4 <flatcc_builder_create_union_vector@@Base+0xec>
   16f88:	add	lr, r5, r7, lsl #3
   16f8c:	mov	r2, r5
   16f90:	sub	r0, r8, #1
   16f94:	sub	r3, r1, #4
   16f98:	ldrb	ip, [r2]
   16f9c:	add	r2, r2, #8
   16fa0:	strb	ip, [r0, #1]!
   16fa4:	ldr	ip, [r2, #-4]
   16fa8:	cmp	lr, r2
   16fac:	str	ip, [r3, #4]!
   16fb0:	bne	16f98 <flatcc_builder_create_union_vector@@Base+0xd0>
   16fb4:	mov	r3, r8
   16fb8:	mov	r2, r7
   16fbc:	mov	r0, r4
   16fc0:	bl	132c0 <flatcc_builder_default_alloc@@Base+0x388>
   16fc4:	subs	r5, r0, #0
   16fc8:	beq	170f8 <flatcc_builder_create_union_vector@@Base+0x230>
   16fcc:	mvn	ip, #0
   16fd0:	mov	r3, #1
   16fd4:	mov	r2, r7
   16fd8:	mov	r1, r8
   16fdc:	mov	r0, r4
   16fe0:	stm	sp, {r3, ip}
   16fe4:	bl	16650 <flatcc_builder_create_vector@@Base>
   16fe8:	mov	r7, r0
   16fec:	mov	r1, #0
   16ff0:	ldr	r0, [r4, #16]
   16ff4:	ldr	r2, [r4, #20]
   16ff8:	bl	122f4 <memset@plt>
   16ffc:	ldr	r3, [r4, #32]
   17000:	str	r7, [r6]
   17004:	ldr	r0, [r4, #60]	; 0x3c
   17008:	str	r5, [r6, #4]
   1700c:	ldr	r2, [r4, #64]	; 0x40
   17010:	ldr	ip, [r3]
   17014:	ldmib	r3, {r1, lr}
   17018:	add	r0, r0, ip
   1701c:	sub	r2, r2, ip
   17020:	str	r0, [r4, #16]
   17024:	cmp	r2, r1
   17028:	ldrh	r0, [r4, #128]	; 0x80
   1702c:	movcs	r2, r1
   17030:	str	lr, [r4, #20]
   17034:	str	ip, [r4, #28]
   17038:	ldrh	ip, [r4, #130]	; 0x82
   1703c:	str	r2, [r4, #24]
   17040:	ldr	r2, [r4, #156]	; 0x9c
   17044:	str	r1, [r3, #4]
   17048:	cmp	r0, ip
   1704c:	sub	r0, r3, #36	; 0x24
   17050:	strhcc	ip, [r4, #128]	; 0x80
   17054:	ldrh	r1, [r3, #12]
   17058:	sub	r3, r2, #1
   1705c:	str	r0, [r4, #32]
   17060:	strh	r1, [r4, #130]	; 0x82
   17064:	str	r3, [r4, #156]	; 0x9c
   17068:	b	17078 <flatcc_builder_create_union_vector@@Base+0x1b0>
   1706c:	mov	r3, #0
   17070:	str	r3, [r6]
   17074:	str	r3, [r6, #4]
   17078:	mov	r0, r6
   1707c:	add	sp, sp, #8
   17080:	ldrd	r4, [sp]
   17084:	ldrd	r6, [sp, #8]
   17088:	ldrd	r8, [sp, #16]
   1708c:	ldr	sl, [sp, #24]
   17090:	add	sp, sp, #28
   17094:	pop	{pc}		; (ldr pc, [sp], #4)
   17098:	ldr	ip, [r4, #28]
   1709c:	mov	r0, #1
   170a0:	add	r1, r4, #60	; 0x3c
   170a4:	mov	r3, r0
   170a8:	str	r0, [sp]
   170ac:	ldr	sl, [r4, #48]	; 0x30
   170b0:	add	ip, ip, r0
   170b4:	ldr	r0, [r4, #40]	; 0x28
   170b8:	add	r2, ip, r2
   170bc:	blx	sl
   170c0:	cmp	r0, #0
   170c4:	bne	1706c <flatcc_builder_create_union_vector@@Base+0x1a4>
   170c8:	ldr	r1, [r4, #28]
   170cc:	ldr	r2, [r4, #32]
   170d0:	ldr	r3, [r4, #64]	; 0x40
   170d4:	ldr	r0, [r4, #60]	; 0x3c
   170d8:	sub	r3, r3, r1
   170dc:	cmn	r3, #4
   170e0:	movhi	r3, r9
   170e4:	add	r1, r0, r1
   170e8:	str	r1, [r4, #16]
   170ec:	str	r3, [r4, #24]
   170f0:	str	r9, [r2, #4]
   170f4:	b	16f78 <flatcc_builder_create_union_vector@@Base+0xb0>
   170f8:	mov	r7, r5
   170fc:	b	16fec <flatcc_builder_create_union_vector@@Base+0x124>

00017100 <flatcc_builder_create_union_vector_direct@@Base>:
   17100:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17104:	strd	r6, [sp, #8]
   17108:	mov	r6, r0
   1710c:	str	r8, [sp, #16]
   17110:	str	lr, [sp, #20]
   17114:	sub	sp, sp, #88	; 0x58
   17118:	ldr	r4, [sp, #112]	; 0x70
   1711c:	cmn	r4, #-1073741823	; 0xc0000001
   17120:	bhi	171f4 <flatcc_builder_create_union_vector_direct@@Base+0xf4>
   17124:	mov	r5, r1
   17128:	mov	r8, r2
   1712c:	mov	r1, r3
   17130:	mov	r0, r5
   17134:	mov	r3, r2
   17138:	mov	r2, r4
   1713c:	bl	132c0 <flatcc_builder_default_alloc@@Base+0x388>
   17140:	subs	r7, r0, #0
   17144:	beq	171f4 <flatcc_builder_create_union_vector_direct@@Base+0xf4>
   17148:	ldrh	r3, [r5, #128]	; 0x80
   1714c:	mov	r2, #1
   17150:	mov	r1, #4
   17154:	str	r4, [sp, #12]
   17158:	ldr	r0, [r5, #136]	; 0x88
   1715c:	str	r1, [sp, #16]
   17160:	str	r1, [sp, #28]
   17164:	cmp	r3, #3
   17168:	movls	r3, #4
   1716c:	strhls	r3, [r5, #128]	; 0x80
   17170:	add	r3, sp, #12
   17174:	cmp	r4, #0
   17178:	moveq	ip, #2
   1717c:	strd	r2, [sp, #20]
   17180:	sub	r3, r0, r4
   17184:	and	r3, r3, #3
   17188:	bne	1721c <flatcc_builder_create_union_vector_direct@@Base+0x11c>
   1718c:	cmp	r3, #0
   17190:	beq	171bc <flatcc_builder_create_union_vector_direct@@Base+0xbc>
   17194:	ldr	r4, [pc, #196]	; 17260 <flatcc_builder_create_union_vector_direct@@Base+0x160>
   17198:	add	r2, r2, #1
   1719c:	add	lr, sp, #88	; 0x58
   171a0:	add	lr, lr, r2, lsl #3
   171a4:	add	r1, r1, r3
   171a8:	mov	r2, ip
   171ac:	str	r1, [sp, #16]
   171b0:	str	ip, [sp, #20]
   171b4:	str	r4, [lr, #-72]	; 0xffffffb8
   171b8:	str	r3, [lr, #-68]	; 0xffffffbc
   171bc:	sub	r4, r0, r1
   171c0:	cmp	r0, r4
   171c4:	ble	17240 <flatcc_builder_create_union_vector_direct@@Base+0x140>
   171c8:	mov	r3, r4
   171cc:	str	r1, [sp]
   171d0:	add	r1, sp, #24
   171d4:	ldr	r0, [r5, #36]	; 0x24
   171d8:	ldr	r8, [r5, #44]	; 0x2c
   171dc:	blx	r8
   171e0:	cmp	r0, #0
   171e4:	bne	1725c <flatcc_builder_create_union_vector_direct@@Base+0x15c>
   171e8:	stm	r6, {r4, r7}
   171ec:	str	r4, [r5, #136]	; 0x88
   171f0:	b	17200 <flatcc_builder_create_union_vector_direct@@Base+0x100>
   171f4:	mov	r3, #0
   171f8:	str	r3, [r6]
   171fc:	str	r3, [r6, #4]
   17200:	mov	r0, r6
   17204:	add	sp, sp, #88	; 0x58
   17208:	ldrd	r4, [sp]
   1720c:	ldrd	r6, [sp, #8]
   17210:	ldr	r8, [sp, #16]
   17214:	add	sp, sp, #20
   17218:	pop	{pc}		; (ldr pc, [sp], #4)
   1721c:	mov	lr, #2
   17220:	add	r1, r4, r1
   17224:	mov	r2, lr
   17228:	mov	ip, #3
   1722c:	str	r1, [sp, #16]
   17230:	str	lr, [sp, #20]
   17234:	str	r8, [sp, #32]
   17238:	str	r4, [sp, #36]	; 0x24
   1723c:	b	1718c <flatcc_builder_create_union_vector_direct@@Base+0x8c>
   17240:	movw	r1, #45508	; 0xb1c4
   17244:	movt	r1, #1
   17248:	ldr	r3, [pc, #20]	; 17264 <flatcc_builder_create_union_vector_direct@@Base+0x164>
   1724c:	movw	r0, #45700	; 0xb284
   17250:	movt	r0, #1
   17254:	movw	r2, #647	; 0x287
   17258:	bl	12324 <__assert_fail@plt>
   1725c:	bl	130d4 <flatcc_builder_default_alloc@@Base+0x19c>
   17260:	andeq	sl, r1, ip, lsl fp
   17264:	andeq	sl, r1, r0, lsr #21

00017268 <flatcc_builder_start_union_vector@@Base>:
   17268:	ldrd	r2, [r0, #156]	; 0x9c
   1726c:	strd	r4, [sp, #-16]!
   17270:	mov	r4, r0
   17274:	str	r6, [sp, #8]
   17278:	str	lr, [sp, #12]
   1727c:	sub	sp, sp, #8
   17280:	add	r1, r2, #1
   17284:	cmp	r1, r3
   17288:	str	r1, [r0, #156]	; 0x9c
   1728c:	ble	173a8 <flatcc_builder_start_union_vector@@Base+0x140>
   17290:	ldr	r3, [r0, #176]	; 0xb0
   17294:	cmp	r3, #0
   17298:	cmpgt	r1, r3
   1729c:	movgt	r3, #1
   172a0:	movle	r3, #0
   172a4:	bgt	173b8 <flatcc_builder_start_union_vector@@Base+0x150>
   172a8:	add	r2, r2, r2, lsl #3
   172ac:	ldr	r1, [r0, #88]	; 0x58
   172b0:	lsl	r5, r2, #2
   172b4:	add	r2, r5, #36	; 0x24
   172b8:	cmp	r2, r1
   172bc:	bls	172e0 <flatcc_builder_start_union_vector@@Base+0x78>
   172c0:	mov	ip, #4
   172c4:	add	r1, r0, #84	; 0x54
   172c8:	ldr	r0, [r0, #40]	; 0x28
   172cc:	str	ip, [sp]
   172d0:	ldr	r6, [r4, #48]	; 0x30
   172d4:	blx	r6
   172d8:	cmp	r0, #0
   172dc:	bne	173c0 <flatcc_builder_start_union_vector@@Base+0x158>
   172e0:	ldr	r3, [r4, #84]	; 0x54
   172e4:	add	r3, r3, r5
   172e8:	cmp	r3, #0
   172ec:	str	r3, [r4, #32]
   172f0:	beq	173b8 <flatcc_builder_start_union_vector@@Base+0x150>
   172f4:	ldr	r2, [r4, #88]	; 0x58
   172f8:	movw	r0, #36409	; 0x8e39
   172fc:	movt	r0, #14563	; 0x38e3
   17300:	ldr	r1, [r4, #176]	; 0xb0
   17304:	umull	r0, r2, r0, r2
   17308:	lsr	r2, r2, #3
   1730c:	cmp	r1, #0
   17310:	cmpgt	r2, r1
   17314:	movgt	r2, r1
   17318:	str	r2, [r4, #160]	; 0xa0
   1731c:	ldr	r2, [r4, #20]
   17320:	mvn	r5, #3
   17324:	mov	lr, #0
   17328:	ldr	r6, [r4, #28]
   1732c:	ldrh	r0, [r4, #130]	; 0x82
   17330:	ldr	ip, [r4, #60]	; 0x3c
   17334:	ldr	r1, [r4, #64]	; 0x40
   17338:	str	r2, [r3, #8]
   1733c:	add	r2, r2, r6
   17340:	add	r2, r2, #7
   17344:	strh	r0, [r3, #12]
   17348:	mov	r0, #4
   1734c:	bic	r2, r2, #7
   17350:	add	ip, ip, r2
   17354:	strh	r0, [r4, #130]	; 0x82
   17358:	mov	r0, lr
   1735c:	sub	r1, r1, r2
   17360:	str	r6, [r3]
   17364:	mov	r6, #8
   17368:	cmp	r1, r5
   1736c:	str	lr, [r4, #20]
   17370:	movhi	r1, r5
   17374:	str	r2, [r4, #28]
   17378:	mov	r2, #7
   1737c:	strh	r2, [r3, #14]
   17380:	str	r6, [r3, #16]
   17384:	str	lr, [r3, #20]
   17388:	str	ip, [r4, #16]
   1738c:	str	r1, [r4, #24]
   17390:	str	r5, [r3, #4]
   17394:	add	sp, sp, #8
   17398:	ldrd	r4, [sp]
   1739c:	ldr	r6, [sp, #8]
   173a0:	add	sp, sp, #12
   173a4:	pop	{pc}		; (ldr pc, [sp], #4)
   173a8:	ldr	r3, [r0, #32]
   173ac:	add	r3, r3, #36	; 0x24
   173b0:	str	r3, [r0, #32]
   173b4:	b	1731c <flatcc_builder_start_union_vector@@Base+0xb4>
   173b8:	mvn	r0, #0
   173bc:	b	17394 <flatcc_builder_start_union_vector@@Base+0x12c>
   173c0:	bl	1305c <flatcc_builder_default_alloc@@Base+0x124>

000173c4 <flatcc_builder_end_union_vector@@Base>:
   173c4:	ldr	r3, [r1, #32]
   173c8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   173cc:	ldrh	r2, [r3, #14]
   173d0:	strd	r6, [sp, #8]
   173d4:	strd	r8, [sp, #16]
   173d8:	str	lr, [sp, #24]
   173dc:	sub	sp, sp, #12
   173e0:	cmp	r2, #7
   173e4:	bne	175a0 <flatcc_builder_end_union_vector@@Base+0x1dc>
   173e8:	ldr	r5, [r3, #20]
   173ec:	mov	r4, r1
   173f0:	mov	r6, r0
   173f4:	ldr	r8, [r1, #20]
   173f8:	ldr	r3, [r1, #24]
   173fc:	lsl	r7, r5, #2
   17400:	add	r2, r7, r5
   17404:	add	r2, r2, r8
   17408:	cmp	r2, r3
   1740c:	str	r2, [r1, #20]
   17410:	bcs	17520 <flatcc_builder_end_union_vector@@Base+0x15c>
   17414:	ldr	r3, [r1, #16]
   17418:	adds	r1, r3, r8
   1741c:	beq	17588 <flatcc_builder_end_union_vector@@Base+0x1c4>
   17420:	cmp	r5, #0
   17424:	add	r7, r1, r7
   17428:	subne	r0, r7, #1
   1742c:	addne	lr, r3, r5, lsl #3
   17430:	subne	r2, r1, #4
   17434:	beq	17454 <flatcc_builder_end_union_vector@@Base+0x90>
   17438:	ldrb	ip, [r3]
   1743c:	add	r3, r3, #8
   17440:	strb	ip, [r0, #1]!
   17444:	ldr	ip, [r3, #-4]
   17448:	cmp	lr, r3
   1744c:	str	ip, [r2, #4]!
   17450:	bne	17438 <flatcc_builder_end_union_vector@@Base+0x74>
   17454:	mov	r3, r7
   17458:	mov	r2, r5
   1745c:	mov	r0, r4
   17460:	bl	132c0 <flatcc_builder_default_alloc@@Base+0x388>
   17464:	subs	r8, r0, #0
   17468:	beq	17598 <flatcc_builder_end_union_vector@@Base+0x1d4>
   1746c:	mvn	ip, #0
   17470:	mov	r3, #1
   17474:	mov	r2, r5
   17478:	mov	r1, r7
   1747c:	mov	r0, r4
   17480:	stm	sp, {r3, ip}
   17484:	bl	16650 <flatcc_builder_create_vector@@Base>
   17488:	mov	r5, r0
   1748c:	mov	r1, #0
   17490:	ldr	r0, [r4, #16]
   17494:	ldr	r2, [r4, #20]
   17498:	bl	122f4 <memset@plt>
   1749c:	ldr	r3, [r4, #32]
   174a0:	stm	r6, {r5, r8}
   174a4:	ldr	r0, [r4, #60]	; 0x3c
   174a8:	ldr	r2, [r4, #64]	; 0x40
   174ac:	ldr	ip, [r3]
   174b0:	ldmib	r3, {r1, lr}
   174b4:	add	r0, r0, ip
   174b8:	sub	r2, r2, ip
   174bc:	str	r0, [r4, #16]
   174c0:	cmp	r2, r1
   174c4:	ldrh	r0, [r4, #128]	; 0x80
   174c8:	movcs	r2, r1
   174cc:	str	lr, [r4, #20]
   174d0:	str	ip, [r4, #28]
   174d4:	ldrh	ip, [r4, #130]	; 0x82
   174d8:	str	r2, [r4, #24]
   174dc:	ldr	r2, [r4, #156]	; 0x9c
   174e0:	str	r1, [r3, #4]
   174e4:	cmp	r0, ip
   174e8:	sub	r0, r3, #36	; 0x24
   174ec:	strhcc	ip, [r4, #128]	; 0x80
   174f0:	ldrh	r1, [r3, #12]
   174f4:	sub	r3, r2, #1
   174f8:	str	r0, [r4, #32]
   174fc:	strh	r1, [r4, #130]	; 0x82
   17500:	str	r3, [r4, #156]	; 0x9c
   17504:	mov	r0, r6
   17508:	add	sp, sp, #12
   1750c:	ldrd	r4, [sp]
   17510:	ldrd	r6, [sp, #8]
   17514:	ldrd	r8, [sp, #16]
   17518:	add	sp, sp, #24
   1751c:	pop	{pc}		; (ldr pc, [sp], #4)
   17520:	ldr	ip, [r4, #28]
   17524:	mov	r0, #1
   17528:	add	r1, r1, #60	; 0x3c
   1752c:	mov	r3, r0
   17530:	str	r0, [sp]
   17534:	ldr	r9, [r4, #48]	; 0x30
   17538:	add	ip, ip, r0
   1753c:	ldr	r0, [r4, #40]	; 0x28
   17540:	add	r2, ip, r2
   17544:	blx	r9
   17548:	cmp	r0, #0
   1754c:	bne	17588 <flatcc_builder_end_union_vector@@Base+0x1c4>
   17550:	ldr	r1, [r4, #28]
   17554:	ldr	r3, [r4, #60]	; 0x3c
   17558:	ldr	r2, [r4, #64]	; 0x40
   1755c:	add	r3, r3, r1
   17560:	sub	r2, r2, r1
   17564:	mvn	r1, #3
   17568:	str	r3, [r4, #16]
   1756c:	cmn	r2, #4
   17570:	mvnhi	r2, #3
   17574:	str	r2, [r4, #24]
   17578:	ldr	r2, [r4, #32]
   1757c:	str	r1, [r2, #4]
   17580:	adds	r1, r3, r8
   17584:	bne	17420 <flatcc_builder_end_union_vector@@Base+0x5c>
   17588:	mov	r3, #0
   1758c:	str	r3, [r6]
   17590:	str	r3, [r6, #4]
   17594:	b	17504 <flatcc_builder_end_union_vector@@Base+0x140>
   17598:	mov	r5, r8
   1759c:	b	1748c <flatcc_builder_end_union_vector@@Base+0xc8>
   175a0:	movw	r1, #45508	; 0xb1c4
   175a4:	movt	r1, #1
   175a8:	ldr	r3, [pc, #12]	; 175bc <flatcc_builder_end_union_vector@@Base+0x1f8>
   175ac:	movw	r0, #46288	; 0xb4d0
   175b0:	movt	r0, #1
   175b4:	movw	r2, #1617	; 0x651
   175b8:	bl	12324 <__assert_fail@plt>
   175bc:	andeq	fp, r1, r8, asr r0

000175c0 <flatcc_builder_union_vector_edit@@Base>:
   175c0:	ldr	r0, [r0, #16]
   175c4:	bx	lr

000175c8 <flatcc_builder_union_vector_count@@Base>:
   175c8:	ldr	r3, [r0, #32]
   175cc:	ldr	r0, [r3, #20]
   175d0:	bx	lr

000175d4 <flatcc_builder_extend_union_vector@@Base>:
   175d4:	ldr	ip, [r0, #32]
   175d8:	strd	r4, [sp, #-20]!	; 0xffffffec
   175dc:	mov	r4, r0
   175e0:	ldr	r3, [ip, #20]
   175e4:	strd	r6, [sp, #8]
   175e8:	str	lr, [sp, #16]
   175ec:	sub	sp, sp, #12
   175f0:	adds	r3, r1, r3
   175f4:	movcs	r2, #1
   175f8:	movcc	r2, #0
   175fc:	cmn	r3, #-536870911	; 0xe0000001
   17600:	movls	r0, #0
   17604:	movhi	r0, #1
   17608:	orrs	r5, r2, r0
   1760c:	bne	176b4 <flatcc_builder_extend_union_vector@@Base+0xe0>
   17610:	ldr	r6, [r4, #20]
   17614:	str	r3, [ip, #20]
   17618:	ldr	r3, [r4, #24]
   1761c:	add	r2, r6, r1, lsl #3
   17620:	cmp	r2, r3
   17624:	str	r2, [r4, #20]
   17628:	bcs	17648 <flatcc_builder_extend_union_vector@@Base+0x74>
   1762c:	ldr	r0, [r4, #16]
   17630:	add	r0, r0, r6
   17634:	add	sp, sp, #12
   17638:	ldrd	r4, [sp]
   1763c:	ldrd	r6, [sp, #8]
   17640:	add	sp, sp, #16
   17644:	pop	{pc}		; (ldr pc, [sp], #4)
   17648:	ldr	ip, [r4, #28]
   1764c:	mov	r0, #1
   17650:	add	r1, r4, #60	; 0x3c
   17654:	mov	r3, r0
   17658:	str	r0, [sp]
   1765c:	ldr	r7, [r4, #48]	; 0x30
   17660:	add	ip, ip, r0
   17664:	ldr	r0, [r4, #40]	; 0x28
   17668:	add	r2, ip, r2
   1766c:	blx	r7
   17670:	cmp	r0, #0
   17674:	bne	176ac <flatcc_builder_extend_union_vector@@Base+0xd8>
   17678:	ldr	r2, [r4, #28]
   1767c:	ldr	r0, [r4, #60]	; 0x3c
   17680:	ldr	r3, [r4, #64]	; 0x40
   17684:	add	r0, r0, r2
   17688:	sub	r3, r3, r2
   1768c:	mvn	r2, #3
   17690:	str	r0, [r4, #16]
   17694:	cmn	r3, #4
   17698:	mvnhi	r3, #3
   1769c:	str	r3, [r4, #24]
   176a0:	ldr	r3, [r4, #32]
   176a4:	str	r2, [r3, #4]
   176a8:	b	17630 <flatcc_builder_extend_union_vector@@Base+0x5c>
   176ac:	mov	r0, r5
   176b0:	b	17634 <flatcc_builder_extend_union_vector@@Base+0x60>
   176b4:	bl	130fc <flatcc_builder_default_alloc@@Base+0x1c4>

000176b8 <flatcc_builder_truncate_union_vector@@Base>:
   176b8:	mov	r3, r0
   176bc:	ldr	r0, [r0, #32]
   176c0:	str	r4, [sp, #-8]!
   176c4:	ldrh	r2, [r0, #14]
   176c8:	str	lr, [sp, #4]
   176cc:	cmp	r2, #7
   176d0:	bne	17720 <flatcc_builder_truncate_union_vector@@Base+0x68>
   176d4:	mov	lr, r1
   176d8:	ldr	r1, [r0, #20]
   176dc:	cmp	r1, lr
   176e0:	bcc	1773c <flatcc_builder_truncate_union_vector@@Base+0x84>
   176e4:	ldr	r2, [r0, #16]
   176e8:	sub	ip, r1, lr
   176ec:	mov	r1, #0
   176f0:	str	ip, [r0, #20]
   176f4:	ldr	r0, [r3, #16]
   176f8:	ldr	ip, [r3, #20]
   176fc:	mul	r2, r2, lr
   17700:	sub	ip, ip, r2
   17704:	add	r0, r0, ip
   17708:	str	ip, [r3, #20]
   1770c:	bl	122f4 <memset@plt>
   17710:	ldr	r4, [sp]
   17714:	add	sp, sp, #4
   17718:	mov	r0, #0
   1771c:	pop	{pc}		; (ldr pc, [sp], #4)
   17720:	movw	r1, #45508	; 0xb1c4
   17724:	movt	r1, #1
   17728:	ldr	r3, [pc, #40]	; 17758 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   1772c:	movw	r0, #46288	; 0xb4d0
   17730:	movt	r0, #1
   17734:	movw	r2, #1665	; 0x681
   17738:	bl	12324 <__assert_fail@plt>
   1773c:	movw	r1, #45508	; 0xb1c4
   17740:	movt	r1, #1
   17744:	ldr	r3, [pc, #12]	; 17758 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   17748:	movw	r0, #46068	; 0xb3f4
   1774c:	movt	r0, #1
   17750:	movw	r2, #1666	; 0x682
   17754:	bl	12324 <__assert_fail@plt>
   17758:	andeq	fp, r1, r8, ror r0

0001775c <flatcc_builder_union_vector_push@@Base>:
   1775c:	strd	r4, [sp, #-20]!	; 0xffffffec
   17760:	strd	r6, [sp, #8]
   17764:	str	lr, [sp, #16]
   17768:	sub	sp, sp, #20
   1776c:	add	r3, sp, #16
   17770:	stmdb	r3, {r1, r2}
   17774:	ldr	r2, [r0, #32]
   17778:	ldrh	r3, [r2, #14]
   1777c:	cmp	r3, #7
   17780:	bne	17844 <flatcc_builder_union_vector_push@@Base+0xe8>
   17784:	ldr	r3, [r2, #20]
   17788:	cmn	r3, #-536870911	; 0xe0000001
   1778c:	beq	1783c <flatcc_builder_union_vector_push@@Base+0xe0>
   17790:	ldr	r5, [r0, #20]
   17794:	add	r3, r3, #1
   17798:	mov	r4, r0
   1779c:	ldr	r1, [r0, #24]
   177a0:	str	r3, [r2, #20]
   177a4:	add	r3, r5, #8
   177a8:	cmp	r3, r1
   177ac:	str	r3, [r0, #20]
   177b0:	bcs	177d8 <flatcc_builder_union_vector_push@@Base+0x7c>
   177b4:	ldr	r3, [r0, #16]
   177b8:	adds	r0, r3, r5
   177bc:	ldrdne	r6, [sp, #8]
   177c0:	strdne	r6, [r3, r5]
   177c4:	add	sp, sp, #20
   177c8:	ldrd	r4, [sp]
   177cc:	ldrd	r6, [sp, #8]
   177d0:	add	sp, sp, #16
   177d4:	pop	{pc}		; (ldr pc, [sp], #4)
   177d8:	ldr	r2, [r4, #28]
   177dc:	mov	r0, #1
   177e0:	add	r1, r4, #60	; 0x3c
   177e4:	mov	r3, r0
   177e8:	str	r0, [sp]
   177ec:	ldr	r0, [r4, #40]	; 0x28
   177f0:	add	r2, r5, r2
   177f4:	ldr	r6, [r4, #48]	; 0x30
   177f8:	add	r2, r2, #9
   177fc:	blx	r6
   17800:	cmp	r0, #0
   17804:	bne	1783c <flatcc_builder_union_vector_push@@Base+0xe0>
   17808:	ldr	r1, [r4, #28]
   1780c:	ldr	r3, [r4, #60]	; 0x3c
   17810:	ldr	r2, [r4, #64]	; 0x40
   17814:	add	r3, r3, r1
   17818:	sub	r2, r2, r1
   1781c:	mvn	r1, #3
   17820:	str	r3, [r4, #16]
   17824:	cmn	r2, #4
   17828:	mvnhi	r2, #3
   1782c:	str	r2, [r4, #24]
   17830:	ldr	r2, [r4, #32]
   17834:	str	r1, [r2, #4]
   17838:	b	177b8 <flatcc_builder_union_vector_push@@Base+0x5c>
   1783c:	mov	r0, #0
   17840:	b	177c4 <flatcc_builder_union_vector_push@@Base+0x68>
   17844:	movw	r1, #45508	; 0xb1c4
   17848:	movt	r1, #1
   1784c:	ldr	r3, [pc, #12]	; 17860 <flatcc_builder_union_vector_push@@Base+0x104>
   17850:	movw	r0, #46288	; 0xb4d0
   17854:	movt	r0, #1
   17858:	movw	r2, #1677	; 0x68d
   1785c:	bl	12324 <__assert_fail@plt>
   17860:	andeq	fp, r1, r0, lsr #1

00017864 <flatcc_builder_append_union_vector@@Base>:
   17864:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17868:	mov	r5, r0
   1786c:	ldr	r0, [r0, #32]
   17870:	ldrh	r3, [r0, #14]
   17874:	strd	r6, [sp, #8]
   17878:	strd	r8, [sp, #16]
   1787c:	str	lr, [sp, #24]
   17880:	sub	sp, sp, #12
   17884:	cmp	r3, #7
   17888:	bne	17980 <flatcc_builder_append_union_vector@@Base+0x11c>
   1788c:	ldr	r3, [r0, #20]
   17890:	mov	r7, r1
   17894:	adds	r1, r2, r3
   17898:	movcs	r4, #1
   1789c:	movcc	r4, #0
   178a0:	cmn	r1, #-536870911	; 0xe0000001
   178a4:	movls	r3, #0
   178a8:	movhi	r3, #1
   178ac:	orrs	r4, r4, r3
   178b0:	bne	1797c <flatcc_builder_append_union_vector@@Base+0x118>
   178b4:	ldr	r8, [r5, #20]
   178b8:	lsl	r6, r2, #3
   178bc:	ldr	r3, [r5, #24]
   178c0:	str	r1, [r0, #20]
   178c4:	add	ip, r6, r8
   178c8:	cmp	ip, r3
   178cc:	str	ip, [r5, #20]
   178d0:	bcs	17910 <flatcc_builder_append_union_vector@@Base+0xac>
   178d4:	ldr	r3, [r5, #16]
   178d8:	adds	r3, r3, r8
   178dc:	beq	178f4 <flatcc_builder_append_union_vector@@Base+0x90>
   178e0:	mov	r0, r3
   178e4:	mov	r2, r6
   178e8:	mov	r1, r7
   178ec:	bl	12294 <memcpy@plt>
   178f0:	mov	r3, r0
   178f4:	mov	r0, r3
   178f8:	add	sp, sp, #12
   178fc:	ldrd	r4, [sp]
   17900:	ldrd	r6, [sp, #8]
   17904:	ldrd	r8, [sp, #16]
   17908:	add	sp, sp, #24
   1790c:	pop	{pc}		; (ldr pc, [sp], #4)
   17910:	ldr	r2, [r5, #28]
   17914:	mov	r0, #1
   17918:	add	r1, r5, #60	; 0x3c
   1791c:	mov	r3, r0
   17920:	str	r0, [sp]
   17924:	ldr	r9, [r5, #48]	; 0x30
   17928:	add	r2, r2, r0
   1792c:	ldr	r0, [r5, #40]	; 0x28
   17930:	add	r2, r2, ip
   17934:	blx	r9
   17938:	cmp	r0, #0
   1793c:	bne	17974 <flatcc_builder_append_union_vector@@Base+0x110>
   17940:	ldr	r1, [r5, #28]
   17944:	ldr	r3, [r5, #60]	; 0x3c
   17948:	ldr	r2, [r5, #64]	; 0x40
   1794c:	add	r3, r3, r1
   17950:	sub	r2, r2, r1
   17954:	mvn	r1, #3
   17958:	str	r3, [r5, #16]
   1795c:	cmn	r2, #4
   17960:	mvnhi	r2, #3
   17964:	str	r2, [r5, #24]
   17968:	ldr	r2, [r5, #32]
   1796c:	str	r1, [r2, #4]
   17970:	b	178d8 <flatcc_builder_append_union_vector@@Base+0x74>
   17974:	mov	r3, r4
   17978:	b	178f4 <flatcc_builder_append_union_vector@@Base+0x90>
   1797c:	bl	130fc <flatcc_builder_default_alloc@@Base+0x1c4>
   17980:	movw	r1, #45508	; 0xb1c4
   17984:	movt	r1, #1
   17988:	ldr	r3, [pc, #12]	; 1799c <flatcc_builder_append_union_vector@@Base+0x138>
   1798c:	movw	r0, #46288	; 0xb4d0
   17990:	movt	r0, #1
   17994:	movw	r2, #1692	; 0x69c
   17998:	bl	12324 <__assert_fail@plt>
   1799c:	andeq	fp, r1, r4, asr #1

000179a0 <flatcc_builder_create_string@@Base>:
   179a0:	strd	r4, [sp, #-16]!
   179a4:	mov	r4, r0
   179a8:	mov	ip, #4
   179ac:	str	r6, [sp, #8]
   179b0:	cmp	r2, #0
   179b4:	str	lr, [sp, #12]
   179b8:	sub	sp, sp, #88	; 0x58
   179bc:	moveq	r6, #2
   179c0:	ldr	lr, [r0, #136]	; 0x88
   179c4:	add	r3, sp, #12
   179c8:	str	r2, [sp, #12]
   179cc:	str	r3, [sp, #24]
   179d0:	mov	r3, #1
   179d4:	moveq	r1, r3
   179d8:	str	ip, [sp, #28]
   179dc:	sub	r0, lr, r2
   179e0:	sub	r0, r0, #1
   179e4:	and	r0, r0, #3
   179e8:	add	r0, r0, r3
   179ec:	beq	17a04 <flatcc_builder_create_string@@Base+0x64>
   179f0:	add	ip, r2, ip
   179f4:	mov	r6, #3
   179f8:	str	r1, [sp, #32]
   179fc:	mov	r1, #2
   17a00:	str	r2, [sp, #36]	; 0x24
   17a04:	ldr	r3, [pc, #136]	; 17a94 <flatcc_builder_create_string@@Base+0xf4>
   17a08:	add	r1, r1, #1
   17a0c:	add	r2, sp, #88	; 0x58
   17a10:	add	ip, r0, ip
   17a14:	add	r1, r2, r1, lsl #3
   17a18:	sub	r5, lr, ip
   17a1c:	cmp	lr, r5
   17a20:	str	ip, [sp, #16]
   17a24:	str	r6, [sp, #20]
   17a28:	str	r3, [r1, #-72]	; 0xffffffb8
   17a2c:	str	r0, [r1, #-68]	; 0xffffffbc
   17a30:	ble	17a74 <flatcc_builder_create_string@@Base+0xd4>
   17a34:	mov	r2, r6
   17a38:	mov	r3, r5
   17a3c:	str	ip, [sp]
   17a40:	add	r1, sp, #24
   17a44:	ldr	r0, [r4, #36]	; 0x24
   17a48:	ldr	r6, [r4, #44]	; 0x2c
   17a4c:	blx	r6
   17a50:	cmp	r0, #0
   17a54:	bne	17a90 <flatcc_builder_create_string@@Base+0xf0>
   17a58:	mov	r0, r5
   17a5c:	str	r5, [r4, #136]	; 0x88
   17a60:	add	sp, sp, #88	; 0x58
   17a64:	ldrd	r4, [sp]
   17a68:	ldr	r6, [sp, #8]
   17a6c:	add	sp, sp, #12
   17a70:	pop	{pc}		; (ldr pc, [sp], #4)
   17a74:	movw	r1, #45508	; 0xb1c4
   17a78:	movt	r1, #1
   17a7c:	movw	r0, #45700	; 0xb284
   17a80:	movt	r0, #1
   17a84:	sub	r3, r3, #124	; 0x7c
   17a88:	movw	r2, #647	; 0x287
   17a8c:	bl	12324 <__assert_fail@plt>
   17a90:	bl	130d4 <flatcc_builder_default_alloc@@Base+0x19c>
   17a94:	andeq	sl, r1, ip, lsl fp

00017a98 <flatcc_builder_create_string_str@@Base>:
   17a98:	strd	r4, [sp, #-16]!
   17a9c:	mov	r4, r0
   17aa0:	mov	r0, r1
   17aa4:	str	r6, [sp, #8]
   17aa8:	mov	r6, r1
   17aac:	str	lr, [sp, #12]
   17ab0:	sub	sp, sp, #88	; 0x58
   17ab4:	bl	122dc <strlen@plt>
   17ab8:	ldr	r5, [r4, #136]	; 0x88
   17abc:	mov	r2, #4
   17ac0:	add	r1, sp, #12
   17ac4:	mov	r3, #1
   17ac8:	cmp	r0, #0
   17acc:	str	r0, [sp, #12]
   17ad0:	str	r1, [sp, #24]
   17ad4:	str	r2, [sp, #28]
   17ad8:	sub	ip, r5, #1
   17adc:	sub	ip, ip, r0
   17ae0:	and	ip, ip, #3
   17ae4:	add	ip, ip, r3
   17ae8:	beq	17b6c <flatcc_builder_create_string_str@@Base+0xd4>
   17aec:	add	lr, r0, r2
   17af0:	mov	r1, #2
   17af4:	str	r6, [sp, #32]
   17af8:	mov	r2, #3
   17afc:	str	r0, [sp, #36]	; 0x24
   17b00:	ldr	r3, [pc, #148]	; 17b9c <flatcc_builder_create_string_str@@Base+0x104>
   17b04:	add	r0, ip, lr
   17b08:	add	r1, r1, #1
   17b0c:	add	lr, sp, #88	; 0x58
   17b10:	sub	r6, r5, r0
   17b14:	add	r1, lr, r1, lsl #3
   17b18:	cmp	r5, r6
   17b1c:	str	r0, [sp, #16]
   17b20:	str	r2, [sp, #20]
   17b24:	str	r3, [r1, #-72]	; 0xffffffb8
   17b28:	str	ip, [r1, #-68]	; 0xffffffbc
   17b2c:	ble	17b7c <flatcc_builder_create_string_str@@Base+0xe4>
   17b30:	mov	r3, r6
   17b34:	add	r1, sp, #24
   17b38:	str	r0, [sp]
   17b3c:	ldr	r0, [r4, #36]	; 0x24
   17b40:	ldr	r5, [r4, #44]	; 0x2c
   17b44:	blx	r5
   17b48:	cmp	r0, #0
   17b4c:	bne	17b98 <flatcc_builder_create_string_str@@Base+0x100>
   17b50:	mov	r0, r6
   17b54:	str	r6, [r4, #136]	; 0x88
   17b58:	add	sp, sp, #88	; 0x58
   17b5c:	ldrd	r4, [sp]
   17b60:	ldr	r6, [sp, #8]
   17b64:	add	sp, sp, #12
   17b68:	pop	{pc}		; (ldr pc, [sp], #4)
   17b6c:	mov	lr, r2
   17b70:	mov	r1, r3
   17b74:	mov	r2, #2
   17b78:	b	17b00 <flatcc_builder_create_string_str@@Base+0x68>
   17b7c:	movw	r1, #45508	; 0xb1c4
   17b80:	movt	r1, #1
   17b84:	movw	r0, #45700	; 0xb284
   17b88:	movt	r0, #1
   17b8c:	sub	r3, r3, #124	; 0x7c
   17b90:	movw	r2, #647	; 0x287
   17b94:	bl	12324 <__assert_fail@plt>
   17b98:	bl	130d4 <flatcc_builder_default_alloc@@Base+0x19c>
   17b9c:	andeq	sl, r1, ip, lsl fp

00017ba0 <flatcc_builder_create_string_strn@@Base>:
   17ba0:	strd	r4, [sp, #-16]!
   17ba4:	mov	r4, r0
   17ba8:	mov	r5, r2
   17bac:	str	r6, [sp, #8]
   17bb0:	mov	r6, r1
   17bb4:	mov	r1, #0
   17bb8:	mov	r0, r6
   17bbc:	str	lr, [sp, #12]
   17bc0:	sub	sp, sp, #88	; 0x58
   17bc4:	bl	1230c <memchr@plt>
   17bc8:	ldr	lr, [r4, #136]	; 0x88
   17bcc:	cmp	r0, #0
   17bd0:	mov	ip, #4
   17bd4:	subne	r5, r0, r6
   17bd8:	add	r3, sp, #12
   17bdc:	cmp	r5, #0
   17be0:	mov	r0, #1
   17be4:	moveq	r2, #2
   17be8:	str	r5, [sp, #12]
   17bec:	str	r3, [sp, #24]
   17bf0:	sub	r1, lr, #1
   17bf4:	str	ip, [sp, #28]
   17bf8:	sub	r1, r1, r5
   17bfc:	and	r1, r1, #3
   17c00:	add	r1, r1, r0
   17c04:	beq	17c1c <flatcc_builder_create_string_strn@@Base+0x7c>
   17c08:	add	ip, r5, ip
   17c0c:	mov	r2, #3
   17c10:	str	r6, [sp, #32]
   17c14:	mov	r0, #2
   17c18:	str	r5, [sp, #36]	; 0x24
   17c1c:	ldr	r3, [pc, #132]	; 17ca8 <flatcc_builder_create_string_strn@@Base+0x108>
   17c20:	add	r5, sp, #88	; 0x58
   17c24:	add	r0, r0, #1
   17c28:	add	r0, r5, r0, lsl #3
   17c2c:	add	ip, r1, ip
   17c30:	sub	r5, lr, ip
   17c34:	cmp	lr, r5
   17c38:	str	ip, [sp, #16]
   17c3c:	str	r2, [sp, #20]
   17c40:	str	r3, [r0, #-72]	; 0xffffffb8
   17c44:	str	r1, [r0, #-68]	; 0xffffffbc
   17c48:	ble	17c88 <flatcc_builder_create_string_strn@@Base+0xe8>
   17c4c:	mov	r3, r5
   17c50:	add	r1, sp, #24
   17c54:	str	ip, [sp]
   17c58:	ldr	r0, [r4, #36]	; 0x24
   17c5c:	ldr	r6, [r4, #44]	; 0x2c
   17c60:	blx	r6
   17c64:	cmp	r0, #0
   17c68:	bne	17ca4 <flatcc_builder_create_string_strn@@Base+0x104>
   17c6c:	mov	r0, r5
   17c70:	str	r5, [r4, #136]	; 0x88
   17c74:	add	sp, sp, #88	; 0x58
   17c78:	ldrd	r4, [sp]
   17c7c:	ldr	r6, [sp, #8]
   17c80:	add	sp, sp, #12
   17c84:	pop	{pc}		; (ldr pc, [sp], #4)
   17c88:	movw	r1, #45508	; 0xb1c4
   17c8c:	movt	r1, #1
   17c90:	movw	r0, #45700	; 0xb284
   17c94:	movt	r0, #1
   17c98:	sub	r3, r3, #124	; 0x7c
   17c9c:	movw	r2, #647	; 0x287
   17ca0:	bl	12324 <__assert_fail@plt>
   17ca4:	bl	130d4 <flatcc_builder_default_alloc@@Base+0x19c>
   17ca8:	andeq	sl, r1, ip, lsl fp

00017cac <flatcc_builder_end_string@@Base>:
   17cac:	ldr	r3, [r0, #32]
   17cb0:	strd	r4, [sp, #-16]!
   17cb4:	ldrh	r2, [r3, #14]
   17cb8:	str	r6, [sp, #8]
   17cbc:	str	lr, [sp, #12]
   17cc0:	sub	sp, sp, #88	; 0x58
   17cc4:	cmp	r2, #6
   17cc8:	bne	17e50 <flatcc_builder_end_string@@Base+0x1a4>
   17ccc:	ldr	r3, [r3, #20]
   17cd0:	mov	r4, r0
   17cd4:	ldr	r2, [r0, #20]
   17cd8:	cmp	r3, r2
   17cdc:	bne	17e34 <flatcc_builder_end_string@@Base+0x188>
   17ce0:	ldr	lr, [r4, #136]	; 0x88
   17ce4:	add	r2, sp, #12
   17ce8:	mov	ip, #4
   17cec:	cmp	r3, #0
   17cf0:	mov	r0, #1
   17cf4:	str	r3, [sp, #12]
   17cf8:	str	r2, [sp, #24]
   17cfc:	str	ip, [sp, #28]
   17d00:	ldr	r2, [r4, #16]
   17d04:	moveq	r2, #2
   17d08:	sub	r1, lr, r3
   17d0c:	sub	r1, r1, #1
   17d10:	and	r1, r1, #3
   17d14:	add	r1, r1, r0
   17d18:	bne	17e00 <flatcc_builder_end_string@@Base+0x154>
   17d1c:	ldr	r3, [pc, #328]	; 17e6c <flatcc_builder_end_string@@Base+0x1c0>
   17d20:	add	r5, sp, #88	; 0x58
   17d24:	add	r0, r0, #1
   17d28:	add	r0, r5, r0, lsl #3
   17d2c:	add	ip, r1, ip
   17d30:	sub	r5, lr, ip
   17d34:	cmp	lr, r5
   17d38:	str	ip, [sp, #16]
   17d3c:	str	r2, [sp, #20]
   17d40:	str	r3, [r0, #-72]	; 0xffffffb8
   17d44:	str	r1, [r0, #-68]	; 0xffffffbc
   17d48:	ble	17e18 <flatcc_builder_end_string@@Base+0x16c>
   17d4c:	add	r1, sp, #24
   17d50:	mov	r3, r5
   17d54:	str	ip, [sp]
   17d58:	ldr	r0, [r4, #36]	; 0x24
   17d5c:	ldr	r6, [r4, #44]	; 0x2c
   17d60:	blx	r6
   17d64:	subs	r1, r0, #0
   17d68:	bne	17e14 <flatcc_builder_end_string@@Base+0x168>
   17d6c:	cmp	r5, #0
   17d70:	str	r5, [r4, #136]	; 0x88
   17d74:	beq	17de8 <flatcc_builder_end_string@@Base+0x13c>
   17d78:	ldr	r0, [r4, #16]
   17d7c:	ldr	r2, [r4, #20]
   17d80:	bl	122f4 <memset@plt>
   17d84:	ldr	r3, [r4, #32]
   17d88:	ldr	r0, [r4, #60]	; 0x3c
   17d8c:	ldr	r2, [r4, #64]	; 0x40
   17d90:	ldr	ip, [r3]
   17d94:	ldmib	r3, {r1, lr}
   17d98:	add	r0, r0, ip
   17d9c:	sub	r2, r2, ip
   17da0:	str	r0, [r4, #16]
   17da4:	cmp	r2, r1
   17da8:	ldrh	r0, [r4, #128]	; 0x80
   17dac:	movcs	r2, r1
   17db0:	str	lr, [r4, #20]
   17db4:	str	ip, [r4, #28]
   17db8:	ldrh	ip, [r4, #130]	; 0x82
   17dbc:	str	r2, [r4, #24]
   17dc0:	ldr	r2, [r4, #156]	; 0x9c
   17dc4:	str	r1, [r3, #4]
   17dc8:	cmp	r0, ip
   17dcc:	sub	r0, r3, #36	; 0x24
   17dd0:	strhcc	ip, [r4, #128]	; 0x80
   17dd4:	ldrh	r1, [r3, #12]
   17dd8:	sub	r3, r2, #1
   17ddc:	str	r0, [r4, #32]
   17de0:	strh	r1, [r4, #130]	; 0x82
   17de4:	str	r3, [r4, #156]	; 0x9c
   17de8:	mov	r0, r5
   17dec:	add	sp, sp, #88	; 0x58
   17df0:	ldrd	r4, [sp]
   17df4:	ldr	r6, [sp, #8]
   17df8:	add	sp, sp, #12
   17dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   17e00:	add	ip, r3, ip
   17e04:	mov	r0, #2
   17e08:	strd	r2, [sp, #32]
   17e0c:	mov	r2, #3
   17e10:	b	17d1c <flatcc_builder_end_string@@Base+0x70>
   17e14:	bl	130d4 <flatcc_builder_default_alloc@@Base+0x19c>
   17e18:	movw	r1, #45508	; 0xb1c4
   17e1c:	movt	r1, #1
   17e20:	movw	r0, #45700	; 0xb284
   17e24:	movt	r0, #1
   17e28:	sub	r3, r3, #124	; 0x7c
   17e2c:	movw	r2, #647	; 0x287
   17e30:	bl	12324 <__assert_fail@plt>
   17e34:	movw	r1, #45508	; 0xb1c4
   17e38:	movt	r1, #1
   17e3c:	ldr	r3, [pc, #44]	; 17e70 <flatcc_builder_end_string@@Base+0x1c4>
   17e40:	movw	r0, #46340	; 0xb504
   17e44:	movt	r0, #1
   17e48:	movw	r2, #1733	; 0x6c5
   17e4c:	bl	12324 <__assert_fail@plt>
   17e50:	movw	r1, #45508	; 0xb1c4
   17e54:	movt	r1, #1
   17e58:	ldr	r3, [pc, #16]	; 17e70 <flatcc_builder_end_string@@Base+0x1c4>
   17e5c:	movw	r0, #45636	; 0xb244
   17e60:	movt	r0, #1
   17e64:	movw	r2, #1732	; 0x6c4
   17e68:	bl	12324 <__assert_fail@plt>
   17e6c:	andeq	sl, r1, ip, lsl fp
   17e70:	andeq	fp, r1, r8, ror #1

00017e74 <flatcc_builder_string_edit@@Base>:
   17e74:	ldr	r0, [r0, #16]
   17e78:	bx	lr

00017e7c <flatcc_builder_string_len@@Base>:
   17e7c:	ldr	r3, [r0, #32]
   17e80:	ldr	r0, [r3, #20]
   17e84:	bx	lr

00017e88 <flatcc_builder_table_add@@Base>:
   17e88:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17e8c:	mov	r4, r0
   17e90:	ldr	r0, [r0, #32]
   17e94:	ldrh	r0, [r0, #14]
   17e98:	strd	r6, [sp, #8]
   17e9c:	strd	r8, [sp, #16]
   17ea0:	str	lr, [sp, #24]
   17ea4:	sub	sp, sp, #12
   17ea8:	cmp	r0, #3
   17eac:	bne	18010 <flatcc_builder_table_add@@Base+0x188>
   17eb0:	movw	r0, #32764	; 0x7ffc
   17eb4:	cmp	r1, r0
   17eb8:	bhi	17ff4 <flatcc_builder_table_add@@Base+0x16c>
   17ebc:	ldrh	r0, [r4, #130]	; 0x82
   17ec0:	lsl	r7, r1, #1
   17ec4:	ldr	ip, [r4, #4]
   17ec8:	cmp	r0, r3
   17ecc:	strhcc	r3, [r4, #130]	; 0x82
   17ed0:	ldrh	r5, [ip, r7]
   17ed4:	add	ip, ip, r7
   17ed8:	cmp	r5, #0
   17edc:	bne	17fd8 <flatcc_builder_table_add@@Base+0x150>
   17ee0:	ldr	r9, [r4, #12]
   17ee4:	movw	lr, #31153	; 0x79b1
   17ee8:	movt	lr, #40503	; 0x9e37
   17eec:	uxth	r6, r1
   17ef0:	sub	r8, r3, #1
   17ef4:	ldr	r0, [r4, #20]
   17ef8:	rsb	r3, r3, #0
   17efc:	eor	r1, r1, r9
   17f00:	mul	r1, lr, r1
   17f04:	add	r8, r8, r0
   17f08:	ldr	r0, [r4, #24]
   17f0c:	and	r8, r8, r3
   17f10:	eor	r1, r1, r2
   17f14:	add	r2, r2, r8
   17f18:	mul	r1, lr, r1
   17f1c:	cmp	r2, r0
   17f20:	str	r1, [r4, #12]
   17f24:	str	r2, [r4, #20]
   17f28:	bcs	17f64 <flatcc_builder_table_add@@Base+0xdc>
   17f2c:	ldr	r0, [r4, #16]
   17f30:	add	r3, r8, #4
   17f34:	add	r0, r0, r8
   17f38:	strh	r3, [ip]
   17f3c:	ldrh	r3, [r4, #8]
   17f40:	cmp	r3, r6
   17f44:	addls	r6, r6, #1
   17f48:	strhls	r6, [r4, #8]
   17f4c:	add	sp, sp, #12
   17f50:	ldrd	r4, [sp]
   17f54:	ldrd	r6, [sp, #8]
   17f58:	ldrd	r8, [sp, #16]
   17f5c:	add	sp, sp, #24
   17f60:	pop	{pc}		; (ldr pc, [sp], #4)
   17f64:	ldr	ip, [r4, #28]
   17f68:	mov	r0, #1
   17f6c:	add	r1, r4, #60	; 0x3c
   17f70:	mov	r3, r0
   17f74:	str	r0, [sp]
   17f78:	ldr	r9, [r4, #48]	; 0x30
   17f7c:	add	ip, ip, r0
   17f80:	ldr	r0, [r4, #40]	; 0x28
   17f84:	add	r2, ip, r2
   17f88:	blx	r9
   17f8c:	cmp	r0, #0
   17f90:	bne	17fd0 <flatcc_builder_table_add@@Base+0x148>
   17f94:	ldr	ip, [r4, #4]
   17f98:	movw	r2, #65532	; 0xfffc
   17f9c:	ldr	r5, [r4, #28]
   17fa0:	ldr	r3, [r4, #64]	; 0x40
   17fa4:	add	ip, ip, r7
   17fa8:	ldr	r0, [r4, #60]	; 0x3c
   17fac:	ldr	r1, [r4, #32]
   17fb0:	sub	r3, r3, r5
   17fb4:	cmp	r3, r2
   17fb8:	add	r0, r0, r5
   17fbc:	movcs	r3, r2
   17fc0:	str	r0, [r4, #16]
   17fc4:	str	r3, [r4, #24]
   17fc8:	str	r2, [r1, #4]
   17fcc:	b	17f30 <flatcc_builder_table_add@@Base+0xa8>
   17fd0:	mov	r0, r5
   17fd4:	b	17f4c <flatcc_builder_table_add@@Base+0xc4>
   17fd8:	movw	r1, #45508	; 0xb1c4
   17fdc:	movt	r1, #1
   17fe0:	ldr	r3, [pc, #68]	; 1802c <flatcc_builder_table_add@@Base+0x1a4>
   17fe4:	movw	r0, #45700	; 0xb284
   17fe8:	movt	r0, #1
   17fec:	movw	r2, #1784	; 0x6f8
   17ff0:	bl	12324 <__assert_fail@plt>
   17ff4:	movw	r1, #45508	; 0xb1c4
   17ff8:	movt	r1, #1
   17ffc:	ldr	r3, [pc, #40]	; 1802c <flatcc_builder_table_add@@Base+0x1a4>
   18000:	movw	r0, #46376	; 0xb528
   18004:	movt	r0, #1
   18008:	movw	r2, #1774	; 0x6ee
   1800c:	bl	12324 <__assert_fail@plt>
   18010:	movw	r1, #45508	; 0xb1c4
   18014:	movt	r1, #1
   18018:	ldr	r3, [pc, #12]	; 1802c <flatcc_builder_table_add@@Base+0x1a4>
   1801c:	movw	r0, #46224	; 0xb490
   18020:	movt	r0, #1
   18024:	movw	r2, #1773	; 0x6ed
   18028:	bl	12324 <__assert_fail@plt>
   1802c:	andeq	fp, r1, r4, lsl #2

00018030 <flatcc_builder_table_edit@@Base>:
   18030:	ldr	r2, [r0, #32]
   18034:	ldrh	r2, [r2, #14]
   18038:	cmp	r2, #3
   1803c:	bne	18054 <flatcc_builder_table_edit@@Base+0x24>
   18040:	ldr	r3, [r0, #20]
   18044:	ldr	r0, [r0, #16]
   18048:	sub	r3, r3, r1
   1804c:	add	r0, r0, r3
   18050:	bx	lr
   18054:	movw	r1, #45508	; 0xb1c4
   18058:	movt	r1, #1
   1805c:	ldr	r3, [pc, #20]	; 18078 <flatcc_builder_table_edit@@Base+0x48>
   18060:	movw	r0, #46224	; 0xb490
   18064:	movt	r0, #1
   18068:	str	r4, [sp, #-8]!
   1806c:	movw	r2, #1794	; 0x702
   18070:	str	lr, [sp, #4]
   18074:	bl	12324 <__assert_fail@plt>
   18078:	andeq	fp, r1, r0, lsr #2

0001807c <flatcc_builder_table_add_copy@@Base>:
   1807c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18080:	mov	r5, r3
   18084:	ldr	r3, [r0, #32]
   18088:	ldrh	r3, [r3, #14]
   1808c:	strd	r6, [sp, #8]
   18090:	strd	r8, [sp, #16]
   18094:	strd	sl, [sp, #24]
   18098:	str	lr, [sp, #32]
   1809c:	sub	sp, sp, #12
   180a0:	cmp	r3, #3
   180a4:	ldrh	ip, [sp, #48]	; 0x30
   180a8:	bne	18234 <flatcc_builder_table_add_copy@@Base+0x1b8>
   180ac:	movw	r3, #32764	; 0x7ffc
   180b0:	cmp	r1, r3
   180b4:	bhi	18218 <flatcc_builder_table_add_copy@@Base+0x19c>
   180b8:	ldrh	r3, [r0, #130]	; 0x82
   180bc:	mov	r7, r2
   180c0:	lsl	r8, r1, #1
   180c4:	mov	r4, r0
   180c8:	ldr	r2, [r0, #4]
   180cc:	cmp	r3, ip
   180d0:	strhcc	ip, [r0, #130]	; 0x82
   180d4:	ldrh	r9, [r2, r8]
   180d8:	add	r2, r2, r8
   180dc:	cmp	r9, #0
   180e0:	bne	181fc <flatcc_builder_table_add_copy@@Base+0x180>
   180e4:	ldr	lr, [r4, #12]
   180e8:	movw	r0, #31153	; 0x79b1
   180ec:	movt	r0, #40503	; 0x9e37
   180f0:	uxth	r6, r1
   180f4:	sub	r3, ip, #1
   180f8:	ldr	sl, [r4, #20]
   180fc:	rsb	ip, ip, #0
   18100:	eor	r1, r1, lr
   18104:	ldr	lr, [r4, #24]
   18108:	mul	r1, r0, r1
   1810c:	add	r3, r3, sl
   18110:	and	sl, r3, ip
   18114:	add	ip, r5, sl
   18118:	eor	r1, r1, r5
   1811c:	cmp	ip, lr
   18120:	str	ip, [r4, #20]
   18124:	mul	r1, r0, r1
   18128:	str	r1, [r4, #12]
   1812c:	bcs	18188 <flatcc_builder_table_add_copy@@Base+0x10c>
   18130:	ldr	r3, [r4, #16]
   18134:	add	r1, sl, #4
   18138:	strh	r1, [r2]
   1813c:	ldrh	r2, [r4, #8]
   18140:	cmp	r2, r6
   18144:	addls	r6, r6, #1
   18148:	strhls	r6, [r4, #8]
   1814c:	adds	r3, r3, sl
   18150:	beq	18168 <flatcc_builder_table_add_copy@@Base+0xec>
   18154:	mov	r0, r3
   18158:	mov	r2, r5
   1815c:	mov	r1, r7
   18160:	bl	12294 <memcpy@plt>
   18164:	mov	r3, r0
   18168:	mov	r0, r3
   1816c:	add	sp, sp, #12
   18170:	ldrd	r4, [sp]
   18174:	ldrd	r6, [sp, #8]
   18178:	ldrd	r8, [sp, #16]
   1817c:	ldrd	sl, [sp, #24]
   18180:	add	sp, sp, #32
   18184:	pop	{pc}		; (ldr pc, [sp], #4)
   18188:	ldr	r2, [r4, #28]
   1818c:	mov	r0, #1
   18190:	add	r1, r4, #60	; 0x3c
   18194:	mov	r3, r0
   18198:	str	r0, [sp]
   1819c:	ldr	fp, [r4, #48]	; 0x30
   181a0:	add	r2, r2, r0
   181a4:	ldr	r0, [r4, #40]	; 0x28
   181a8:	add	r2, r2, ip
   181ac:	blx	fp
   181b0:	cmp	r0, #0
   181b4:	bne	181f4 <flatcc_builder_table_add_copy@@Base+0x178>
   181b8:	ldr	r2, [r4, #4]
   181bc:	movw	r0, #65532	; 0xfffc
   181c0:	ldr	r3, [r4, #28]
   181c4:	ldr	r1, [r4, #64]	; 0x40
   181c8:	add	r2, r2, r8
   181cc:	ldr	lr, [r4, #60]	; 0x3c
   181d0:	ldr	ip, [r4, #32]
   181d4:	sub	r1, r1, r3
   181d8:	cmp	r1, r0
   181dc:	add	r3, lr, r3
   181e0:	movcs	r1, r0
   181e4:	str	r3, [r4, #16]
   181e8:	str	r1, [r4, #24]
   181ec:	str	r0, [ip, #4]
   181f0:	b	18134 <flatcc_builder_table_add_copy@@Base+0xb8>
   181f4:	mov	r3, r9
   181f8:	b	18168 <flatcc_builder_table_add_copy@@Base+0xec>
   181fc:	movw	r1, #45508	; 0xb1c4
   18200:	movt	r1, #1
   18204:	ldr	r3, [pc, #68]	; 18250 <flatcc_builder_table_add_copy@@Base+0x1d4>
   18208:	movw	r0, #45700	; 0xb284
   1820c:	movt	r0, #1
   18210:	movw	r2, #1784	; 0x6f8
   18214:	bl	12324 <__assert_fail@plt>
   18218:	movw	r1, #45508	; 0xb1c4
   1821c:	movt	r1, #1
   18220:	ldr	r3, [pc, #40]	; 18250 <flatcc_builder_table_add_copy@@Base+0x1d4>
   18224:	movw	r0, #46376	; 0xb528
   18228:	movt	r0, #1
   1822c:	movw	r2, #1774	; 0x6ee
   18230:	bl	12324 <__assert_fail@plt>
   18234:	movw	r1, #45508	; 0xb1c4
   18238:	movt	r1, #1
   1823c:	ldr	r3, [pc, #12]	; 18250 <flatcc_builder_table_add_copy@@Base+0x1d4>
   18240:	movw	r0, #46224	; 0xb490
   18244:	movt	r0, #1
   18248:	movw	r2, #1773	; 0x6ed
   1824c:	bl	12324 <__assert_fail@plt>
   18250:	andeq	fp, r1, r4, lsl #2

00018254 <flatcc_builder_table_add_offset@@Base>:
   18254:	ldr	r3, [r0, #32]
   18258:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1825c:	ldrh	r3, [r3, #14]
   18260:	strd	r6, [sp, #8]
   18264:	strd	r8, [sp, #16]
   18268:	str	lr, [sp, #24]
   1826c:	sub	sp, sp, #12
   18270:	cmp	r3, #3
   18274:	bne	183d4 <flatcc_builder_table_add_offset@@Base+0x180>
   18278:	movw	r3, #32764	; 0x7ffc
   1827c:	cmp	r1, r3
   18280:	bhi	183b8 <flatcc_builder_table_add_offset@@Base+0x164>
   18284:	ldr	ip, [r0, #4]
   18288:	lsl	r7, r1, #1
   1828c:	mov	r4, r0
   18290:	ldrh	r5, [ip, r7]
   18294:	add	ip, ip, r7
   18298:	cmp	r5, #0
   1829c:	bne	1839c <flatcc_builder_table_add_offset@@Base+0x148>
   182a0:	ldr	r2, [r0, #12]
   182a4:	movw	r3, #31153	; 0x79b1
   182a8:	movt	r3, #40503	; 0x9e37
   182ac:	uxth	r6, r1
   182b0:	ldr	r8, [r0, #20]
   182b4:	ldr	r0, [r0, #24]
   182b8:	eor	r1, r1, r2
   182bc:	mul	r1, r3, r1
   182c0:	add	r8, r8, #3
   182c4:	bic	r8, r8, #3
   182c8:	add	r2, r8, #4
   182cc:	eor	r1, r1, #4
   182d0:	cmp	r2, r0
   182d4:	str	r2, [r4, #20]
   182d8:	mul	r1, r3, r1
   182dc:	str	r1, [r4, #12]
   182e0:	bhi	18330 <flatcc_builder_table_add_offset@@Base+0xdc>
   182e4:	ldr	r0, [r4, #16]
   182e8:	uxth	r2, r8
   182ec:	add	r0, r0, r8
   182f0:	add	r3, r2, #4
   182f4:	strh	r3, [ip]
   182f8:	ldrh	r3, [r4, #8]
   182fc:	cmp	r3, r6
   18300:	ldr	r3, [r4]
   18304:	addls	r6, r6, #1
   18308:	strhls	r6, [r4, #8]
   1830c:	add	r1, r3, #2
   18310:	str	r1, [r4]
   18314:	strh	r2, [r3]
   18318:	add	sp, sp, #12
   1831c:	ldrd	r4, [sp]
   18320:	ldrd	r6, [sp, #8]
   18324:	ldrd	r8, [sp, #16]
   18328:	add	sp, sp, #24
   1832c:	pop	{pc}		; (ldr pc, [sp], #4)
   18330:	ldr	ip, [r4, #28]
   18334:	mov	r0, #1
   18338:	add	r1, r4, #60	; 0x3c
   1833c:	mov	r3, r0
   18340:	str	r0, [sp]
   18344:	ldr	r0, [r4, #40]	; 0x28
   18348:	add	r2, r2, ip
   1834c:	ldr	r9, [r4, #48]	; 0x30
   18350:	blx	r9
   18354:	cmp	r0, #0
   18358:	bne	18394 <flatcc_builder_table_add_offset@@Base+0x140>
   1835c:	ldr	ip, [r4, #4]
   18360:	movw	r2, #65532	; 0xfffc
   18364:	ldrd	r0, [r4, #28]
   18368:	ldr	r3, [r4, #64]	; 0x40
   1836c:	add	ip, ip, r7
   18370:	ldr	r5, [r4, #60]	; 0x3c
   18374:	sub	r3, r3, r0
   18378:	cmp	r3, r2
   1837c:	add	r0, r5, r0
   18380:	movcs	r3, r2
   18384:	str	r0, [r4, #16]
   18388:	str	r3, [r4, #24]
   1838c:	str	r2, [r1, #4]
   18390:	b	182e8 <flatcc_builder_table_add_offset@@Base+0x94>
   18394:	mov	r0, r5
   18398:	b	18318 <flatcc_builder_table_add_offset@@Base+0xc4>
   1839c:	movw	r1, #45508	; 0xb1c4
   183a0:	movt	r1, #1
   183a4:	ldr	r3, [pc, #68]	; 183f0 <flatcc_builder_table_add_offset@@Base+0x19c>
   183a8:	movw	r0, #45700	; 0xb284
   183ac:	movt	r0, #1
   183b0:	movw	r2, #1819	; 0x71b
   183b4:	bl	12324 <__assert_fail@plt>
   183b8:	movw	r1, #45508	; 0xb1c4
   183bc:	movt	r1, #1
   183c0:	ldr	r3, [pc, #40]	; 183f0 <flatcc_builder_table_add_offset@@Base+0x19c>
   183c4:	movw	r0, #46376	; 0xb528
   183c8:	movt	r0, #1
   183cc:	movw	r2, #1812	; 0x714
   183d0:	bl	12324 <__assert_fail@plt>
   183d4:	movw	r1, #45508	; 0xb1c4
   183d8:	movt	r1, #1
   183dc:	ldr	r3, [pc, #12]	; 183f0 <flatcc_builder_table_add_offset@@Base+0x19c>
   183e0:	movw	r0, #46224	; 0xb490
   183e4:	movt	r0, #1
   183e8:	movw	r2, #1811	; 0x713
   183ec:	bl	12324 <__assert_fail@plt>
   183f0:	andeq	fp, r1, ip, lsr r1

000183f4 <flatcc_builder_table_add_union@@Base>:
   183f4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   183f8:	strd	r6, [sp, #8]
   183fc:	strd	r8, [sp, #16]
   18400:	str	lr, [sp, #24]
   18404:	sub	sp, sp, #20
   18408:	add	ip, sp, #16
   1840c:	stmdb	ip, {r2, r3}
   18410:	ldr	r3, [r0, #32]
   18414:	ldrb	r7, [sp, #8]
   18418:	ldr	r6, [sp, #12]
   1841c:	ldrh	r3, [r3, #14]
   18420:	cmp	r3, #3
   18424:	bne	185e0 <flatcc_builder_table_add_union@@Base+0x1ec>
   18428:	cmp	r7, #0
   1842c:	mov	r4, r0
   18430:	mov	r5, r1
   18434:	beq	18518 <flatcc_builder_table_add_union@@Base+0x124>
   18438:	cmp	r6, #0
   1843c:	beq	18460 <flatcc_builder_table_add_union@@Base+0x6c>
   18440:	bl	18254 <flatcc_builder_table_add_offset@@Base>
   18444:	cmp	r0, #0
   18448:	beq	18634 <flatcc_builder_table_add_union@@Base+0x240>
   1844c:	ldr	r3, [r4, #32]
   18450:	ldrh	r3, [r3, #14]
   18454:	str	r6, [r0]
   18458:	cmp	r3, #3
   1845c:	bne	185fc <flatcc_builder_table_add_union@@Base+0x208>
   18460:	sub	r1, r5, #1
   18464:	movw	r3, #32764	; 0x7ffc
   18468:	cmp	r1, r3
   1846c:	bhi	18618 <flatcc_builder_table_add_union@@Base+0x224>
   18470:	ldrh	r3, [r4, #130]	; 0x82
   18474:	lsl	r8, r1, #1
   18478:	cmp	r3, #0
   1847c:	moveq	r3, #1
   18480:	strheq	r3, [r4, #130]	; 0x82
   18484:	ldr	r3, [r4, #4]
   18488:	ldrh	r2, [r3, r8]
   1848c:	add	r0, r3, r8
   18490:	cmp	r2, #0
   18494:	bne	185c4 <flatcc_builder_table_add_union@@Base+0x1d0>
   18498:	ldr	r2, [r4, #12]
   1849c:	movw	r3, #31153	; 0x79b1
   184a0:	movt	r3, #40503	; 0x9e37
   184a4:	uxth	r6, r1
   184a8:	ldr	r5, [r4, #20]
   184ac:	ldr	ip, [r4, #24]
   184b0:	eor	r1, r1, r2
   184b4:	mul	r1, r3, r1
   184b8:	add	r2, r5, #1
   184bc:	cmp	r2, ip
   184c0:	str	r2, [r4, #20]
   184c4:	eor	r1, r1, #1
   184c8:	mul	r1, r3, r1
   184cc:	str	r1, [r4, #12]
   184d0:	bcs	1853c <flatcc_builder_table_add_union@@Base+0x148>
   184d4:	ldr	r3, [r4, #16]
   184d8:	add	r2, r5, #4
   184dc:	strh	r2, [r0]
   184e0:	ldrh	r2, [r4, #8]
   184e4:	cmp	r2, r6
   184e8:	addls	r6, r6, #1
   184ec:	strhls	r6, [r4, #8]
   184f0:	cmn	r3, r5
   184f4:	beq	185a8 <flatcc_builder_table_add_union@@Base+0x1b4>
   184f8:	mov	r0, #0
   184fc:	strb	r7, [r3, r5]
   18500:	add	sp, sp, #20
   18504:	ldrd	r4, [sp]
   18508:	ldrd	r6, [sp, #8]
   1850c:	ldrd	r8, [sp, #16]
   18510:	add	sp, sp, #24
   18514:	pop	{pc}		; (ldr pc, [sp], #4)
   18518:	cmp	r6, #0
   1851c:	beq	18460 <flatcc_builder_table_add_union@@Base+0x6c>
   18520:	movw	r1, #45508	; 0xb1c4
   18524:	movt	r1, #1
   18528:	ldr	r3, [pc, #288]	; 18650 <flatcc_builder_table_add_union@@Base+0x25c>
   1852c:	movw	r0, #46444	; 0xb56c
   18530:	movt	r0, #1
   18534:	movw	r2, #1519	; 0x5ef
   18538:	bl	12324 <__assert_fail@plt>
   1853c:	ldr	r2, [r4, #28]
   18540:	mov	r0, #1
   18544:	add	r1, r4, #60	; 0x3c
   18548:	mov	r3, r0
   1854c:	str	r0, [sp]
   18550:	ldr	r0, [r4, #40]	; 0x28
   18554:	add	r2, r5, r2
   18558:	ldr	r9, [r4, #48]	; 0x30
   1855c:	add	r2, r2, #2
   18560:	blx	r9
   18564:	cmp	r0, #0
   18568:	bne	185a8 <flatcc_builder_table_add_union@@Base+0x1b4>
   1856c:	ldr	r0, [r4, #4]
   18570:	movw	r1, #65532	; 0xfffc
   18574:	ldr	ip, [r4, #28]
   18578:	ldr	r2, [r4, #64]	; 0x40
   1857c:	add	r0, r0, r8
   18580:	ldr	r3, [r4, #60]	; 0x3c
   18584:	ldr	lr, [r4, #32]
   18588:	sub	r2, r2, ip
   1858c:	cmp	r2, r1
   18590:	add	r3, r3, ip
   18594:	movcs	r2, r1
   18598:	str	r3, [r4, #16]
   1859c:	str	r2, [r4, #24]
   185a0:	str	r1, [lr, #4]
   185a4:	b	184d8 <flatcc_builder_table_add_union@@Base+0xe4>
   185a8:	movw	r1, #45508	; 0xb1c4
   185ac:	movt	r1, #1
   185b0:	ldr	r3, [pc, #152]	; 18650 <flatcc_builder_table_add_union@@Base+0x25c>
   185b4:	movw	r0, #46492	; 0xb59c
   185b8:	movt	r0, #1
   185bc:	movw	r2, #1526	; 0x5f6
   185c0:	bl	12324 <__assert_fail@plt>
   185c4:	movw	r1, #45508	; 0xb1c4
   185c8:	movt	r1, #1
   185cc:	ldr	r3, [pc, #128]	; 18654 <flatcc_builder_table_add_union@@Base+0x260>
   185d0:	movw	r0, #45700	; 0xb284
   185d4:	movt	r0, #1
   185d8:	movw	r2, #1784	; 0x6f8
   185dc:	bl	12324 <__assert_fail@plt>
   185e0:	movw	r1, #45508	; 0xb1c4
   185e4:	movt	r1, #1
   185e8:	ldr	r3, [pc, #96]	; 18650 <flatcc_builder_table_add_union@@Base+0x25c>
   185ec:	movw	r0, #46224	; 0xb490
   185f0:	movt	r0, #1
   185f4:	movw	r2, #1518	; 0x5ee
   185f8:	bl	12324 <__assert_fail@plt>
   185fc:	movw	r1, #45508	; 0xb1c4
   18600:	movt	r1, #1
   18604:	ldr	r3, [pc, #72]	; 18654 <flatcc_builder_table_add_union@@Base+0x260>
   18608:	movw	r0, #46224	; 0xb490
   1860c:	movt	r0, #1
   18610:	movw	r2, #1773	; 0x6ed
   18614:	bl	12324 <__assert_fail@plt>
   18618:	movw	r1, #45508	; 0xb1c4
   1861c:	movt	r1, #1
   18620:	ldr	r3, [pc, #44]	; 18654 <flatcc_builder_table_add_union@@Base+0x260>
   18624:	movw	r0, #46376	; 0xb528
   18628:	movt	r0, #1
   1862c:	movw	r2, #1774	; 0x6ee
   18630:	bl	12324 <__assert_fail@plt>
   18634:	movw	r1, #45508	; 0xb1c4
   18638:	movt	r1, #1
   1863c:	ldr	r3, [pc, #12]	; 18650 <flatcc_builder_table_add_union@@Base+0x25c>
   18640:	movw	r0, #46480	; 0xb590
   18644:	movt	r0, #1
   18648:	movw	r2, #1522	; 0x5f2
   1864c:	bl	12324 <__assert_fail@plt>
   18650:	andeq	fp, r1, ip, asr r1
   18654:	andeq	fp, r1, r4, lsl #2

00018658 <flatcc_builder_table_add_union_vector@@Base>:
   18658:	strd	r4, [sp, #-20]!	; 0xffffffec
   1865c:	strd	r6, [sp, #8]
   18660:	mov	r7, r1
   18664:	str	lr, [sp, #16]
   18668:	sub	sp, sp, #12
   1866c:	add	r1, sp, #8
   18670:	stmdb	r1, {r2, r3}
   18674:	ldr	r3, [r0, #32]
   18678:	ldm	sp, {r4, r6}
   1867c:	ldrh	r3, [r3, #14]
   18680:	cmp	r3, #3
   18684:	bne	18724 <flatcc_builder_table_add_union_vector@@Base+0xcc>
   18688:	clz	r3, r6
   1868c:	clz	r2, r4
   18690:	lsr	r3, r3, #5
   18694:	lsr	r2, r2, #5
   18698:	cmp	r2, r3
   1869c:	beq	186cc <flatcc_builder_table_add_union_vector@@Base+0x74>
   186a0:	adds	r4, r4, #0
   186a4:	movne	r4, #1
   186a8:	cmp	r4, r3
   186ac:	mvnne	r4, #0
   186b0:	beq	18740 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   186b4:	mov	r0, r4
   186b8:	add	sp, sp, #12
   186bc:	ldrd	r4, [sp]
   186c0:	ldrd	r6, [sp, #8]
   186c4:	add	sp, sp, #16
   186c8:	pop	{pc}		; (ldr pc, [sp], #4)
   186cc:	cmp	r4, #0
   186d0:	beq	186b4 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   186d4:	sub	r1, r7, #1
   186d8:	mov	r5, r0
   186dc:	bl	18254 <flatcc_builder_table_add_offset@@Base>
   186e0:	subs	r3, r0, #0
   186e4:	beq	1875c <flatcc_builder_table_add_union_vector@@Base+0x104>
   186e8:	mov	r1, r7
   186ec:	mov	r0, r5
   186f0:	str	r4, [r3]
   186f4:	bl	18254 <flatcc_builder_table_add_offset@@Base>
   186f8:	cmp	r0, #0
   186fc:	movne	r4, #0
   18700:	strne	r6, [r0]
   18704:	bne	186b4 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   18708:	movw	r1, #45508	; 0xb1c4
   1870c:	movt	r1, #1
   18710:	ldr	r3, [pc, #96]	; 18778 <flatcc_builder_table_add_union_vector@@Base+0x120>
   18714:	movw	r0, #46480	; 0xb590
   18718:	movt	r0, #1
   1871c:	movw	r2, #1544	; 0x608
   18720:	bl	12324 <__assert_fail@plt>
   18724:	movw	r1, #45508	; 0xb1c4
   18728:	movt	r1, #1
   1872c:	ldr	r3, [pc, #68]	; 18778 <flatcc_builder_table_add_union_vector@@Base+0x120>
   18730:	movw	r0, #46224	; 0xb490
   18734:	movt	r0, #1
   18738:	mov	r2, #1536	; 0x600
   1873c:	bl	12324 <__assert_fail@plt>
   18740:	movw	r1, #45508	; 0xb1c4
   18744:	movt	r1, #1
   18748:	ldr	r3, [pc, #40]	; 18778 <flatcc_builder_table_add_union_vector@@Base+0x120>
   1874c:	movw	r0, #46504	; 0xb5a8
   18750:	movt	r0, #1
   18754:	movw	r2, #1537	; 0x601
   18758:	bl	12324 <__assert_fail@plt>
   1875c:	movw	r1, #45508	; 0xb1c4
   18760:	movt	r1, #1
   18764:	ldr	r3, [pc, #12]	; 18778 <flatcc_builder_table_add_union_vector@@Base+0x120>
   18768:	movw	r0, #46480	; 0xb590
   1876c:	movt	r0, #1
   18770:	movw	r2, #1540	; 0x604
   18774:	bl	12324 <__assert_fail@plt>
   18778:	andeq	fp, r1, ip, ror r1

0001877c <flatcc_builder_push_buffer_alignment@@Base>:
   1877c:	mov	r3, r0
   18780:	mov	r2, #4
   18784:	ldrh	r0, [r0, #128]	; 0x80
   18788:	strh	r2, [r3, #128]	; 0x80
   1878c:	bx	lr

00018790 <flatcc_builder_pop_buffer_alignment@@Base>:
   18790:	ldrh	r3, [r0, #128]	; 0x80
   18794:	cmp	r3, r1
   18798:	strhcc	r1, [r0, #128]	; 0x80
   1879c:	bx	lr

000187a0 <flatcc_builder_get_buffer_alignment@@Base>:
   187a0:	ldrh	r0, [r0, #128]	; 0x80
   187a4:	bx	lr

000187a8 <flatcc_builder_set_vtable_clustering@@Base>:
   187a8:	clz	r1, r1
   187ac:	lsr	r1, r1, #5
   187b0:	str	r1, [r0, #180]	; 0xb4
   187b4:	bx	lr

000187b8 <flatcc_builder_set_block_align@@Base>:
   187b8:	strh	r1, [r0, #132]	; 0x84
   187bc:	bx	lr

000187c0 <flatcc_builder_get_level@@Base>:
   187c0:	ldr	r0, [r0, #156]	; 0x9c
   187c4:	bx	lr

000187c8 <flatcc_builder_set_max_level@@Base>:
   187c8:	ldr	r3, [r0, #160]	; 0xa0
   187cc:	str	r1, [r0, #176]	; 0xb0
   187d0:	cmp	r3, r1
   187d4:	strlt	r1, [r0, #160]	; 0xa0
   187d8:	bx	lr

000187dc <flatcc_builder_get_buffer_size@@Base>:
   187dc:	ldr	r3, [r0, #136]	; 0x88
   187e0:	ldr	r0, [r0, #140]	; 0x8c
   187e4:	sub	r0, r0, r3
   187e8:	bx	lr

000187ec <flatcc_builder_get_buffer_start@@Base>:
   187ec:	ldr	r0, [r0, #136]	; 0x88
   187f0:	bx	lr

000187f4 <flatcc_builder_get_buffer_end@@Base>:
   187f4:	ldr	r0, [r0, #140]	; 0x8c
   187f8:	bx	lr

000187fc <flatcc_builder_set_vtable_cache_limit@@Base>:
   187fc:	str	r1, [r0, #172]	; 0xac
   18800:	bx	lr

00018804 <flatcc_builder_set_identifier@@Base>:
   18804:	ldr	r3, [pc, #16]	; 1881c <flatcc_builder_set_identifier@@Base+0x18>
   18808:	cmp	r1, #0
   1880c:	moveq	r1, r3
   18810:	ldr	r3, [r1]
   18814:	str	r3, [r0, #168]	; 0xa8
   18818:	bx	lr
   1881c:	andeq	sl, r1, ip, lsl fp

00018820 <flatcc_builder_get_type@@Base>:
   18820:	ldr	r0, [r0, #32]
   18824:	cmp	r0, #0
   18828:	ldrhne	r0, [r0, #14]
   1882c:	bx	lr

00018830 <flatcc_builder_get_type_at@@Base>:
   18830:	cmp	r1, #0
   18834:	ble	1885c <flatcc_builder_get_type_at@@Base+0x2c>
   18838:	ldr	r3, [r0, #156]	; 0x9c
   1883c:	cmp	r3, r1
   18840:	blt	1885c <flatcc_builder_get_type_at@@Base+0x2c>
   18844:	ldr	r2, [r0, #32]
   18848:	sub	r1, r1, r3
   1884c:	add	r1, r1, r1, lsl #3
   18850:	add	r1, r2, r1, lsl #2
   18854:	ldrh	r0, [r1, #14]
   18858:	bx	lr
   1885c:	mov	r0, #0
   18860:	bx	lr

00018864 <flatcc_builder_get_direct_buffer@@Base>:
   18864:	ldr	r3, [r0, #184]	; 0xb8
   18868:	cmp	r3, #0
   1886c:	bne	18888 <flatcc_builder_get_direct_buffer@@Base+0x24>
   18870:	cmp	r1, #0
   18874:	movne	r3, #0
   18878:	movne	r0, r3
   1887c:	moveq	r0, r1
   18880:	strne	r3, [r1]
   18884:	bx	lr
   18888:	ldrd	r2, [r0, #188]	; 0xbc
   1888c:	cmp	r2, r3
   18890:	bne	18870 <flatcc_builder_get_direct_buffer@@Base+0xc>
   18894:	cmp	r1, #0
   18898:	ldrne	r3, [r0, #212]	; 0xd4
   1889c:	ldr	r0, [r0, #196]	; 0xc4
   188a0:	strne	r3, [r1]
   188a4:	bx	lr

000188a8 <flatcc_builder_copy_buffer@@Base>:
   188a8:	ldr	r3, [r0, #184]	; 0xb8
   188ac:	cmp	r3, #0
   188b0:	beq	188d8 <flatcc_builder_copy_buffer@@Base+0x30>
   188b4:	add	r0, r0, #188	; 0xbc
   188b8:	str	r4, [sp, #-8]!
   188bc:	str	lr, [sp, #4]
   188c0:	bl	19014 <flatcc_emitter_copy_buffer@@Base>
   188c4:	cmp	r0, #0
   188c8:	beq	188e0 <flatcc_builder_copy_buffer@@Base+0x38>
   188cc:	ldr	r4, [sp]
   188d0:	add	sp, sp, #4
   188d4:	pop	{pc}		; (ldr pc, [sp], #4)
   188d8:	mov	r0, r3
   188dc:	bx	lr
   188e0:	bl	13174 <flatcc_builder_default_alloc@@Base+0x23c>

000188e4 <flatcc_builder_finalize_buffer@@Base>:
   188e4:	strd	r4, [sp, #-16]!
   188e8:	cmp	r1, #0
   188ec:	mov	r5, r0
   188f0:	ldr	r2, [r0, #136]	; 0x88
   188f4:	ldr	r4, [r0, #140]	; 0x8c
   188f8:	str	r6, [sp, #8]
   188fc:	str	lr, [sp, #12]
   18900:	sub	r4, r4, r2
   18904:	mov	r0, r4
   18908:	strne	r4, [r1]
   1890c:	bl	122b8 <malloc@plt>
   18910:	subs	r6, r0, #0
   18914:	beq	1896c <flatcc_builder_finalize_buffer@@Base+0x88>
   18918:	ldr	r3, [r5, #184]	; 0xb8
   1891c:	cmp	r3, #0
   18920:	beq	18950 <flatcc_builder_finalize_buffer@@Base+0x6c>
   18924:	mov	r2, r4
   18928:	add	r0, r5, #188	; 0xbc
   1892c:	mov	r1, r6
   18930:	bl	19014 <flatcc_emitter_copy_buffer@@Base>
   18934:	cmp	r0, #0
   18938:	beq	18988 <flatcc_builder_finalize_buffer@@Base+0xa4>
   1893c:	mov	r0, r6
   18940:	ldrd	r4, [sp]
   18944:	ldr	r6, [sp, #8]
   18948:	add	sp, sp, #12
   1894c:	pop	{pc}		; (ldr pc, [sp], #4)
   18950:	movw	r1, #45508	; 0xb1c4
   18954:	movt	r1, #1
   18958:	ldr	r3, [pc, #44]	; 1898c <flatcc_builder_finalize_buffer@@Base+0xa8>
   1895c:	movw	r0, #45700	; 0xb284
   18960:	movt	r0, #1
   18964:	movw	r2, #1948	; 0x79c
   18968:	bl	12324 <__assert_fail@plt>
   1896c:	movw	r1, #45508	; 0xb1c4
   18970:	movt	r1, #1
   18974:	ldr	r3, [pc, #16]	; 1898c <flatcc_builder_finalize_buffer@@Base+0xa8>
   18978:	movw	r0, #45700	; 0xb284
   1897c:	movt	r0, #1
   18980:	movw	r2, #1944	; 0x798
   18984:	bl	12324 <__assert_fail@plt>
   18988:	bl	13174 <flatcc_builder_default_alloc@@Base+0x23c>
   1898c:	andeq	fp, r1, r4, lsr #3

00018990 <flatcc_builder_finalize_aligned_buffer@@Base>:
   18990:	strd	r4, [sp, #-20]!	; 0xffffffec
   18994:	mov	r2, #0
   18998:	mov	r5, r0
   1899c:	ldr	r3, [r0, #136]	; 0x88
   189a0:	ldr	r4, [r0, #140]	; 0x8c
   189a4:	strd	r6, [sp, #8]
   189a8:	subs	r6, r1, #0
   189ac:	ldrh	r1, [r0, #128]	; 0x80
   189b0:	str	lr, [sp, #16]
   189b4:	sub	sp, sp, #12
   189b8:	add	r0, sp, #4
   189bc:	sub	r3, r4, r3
   189c0:	str	r2, [sp, #4]
   189c4:	sub	r4, r1, #1
   189c8:	rsb	r2, r1, #0
   189cc:	strne	r3, [r6]
   189d0:	add	r4, r4, r3
   189d4:	cmp	r1, #4
   189d8:	and	r4, r4, r2
   189dc:	movcc	r1, #4
   189e0:	mov	r2, r4
   189e4:	bl	122e8 <posix_memalign@plt>
   189e8:	cmp	r0, #0
   189ec:	beq	18a2c <flatcc_builder_finalize_aligned_buffer@@Base+0x9c>
   189f0:	ldr	r0, [sp, #4]
   189f4:	cmp	r0, #0
   189f8:	beq	18a00 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   189fc:	bl	12288 <free@plt>
   18a00:	cmp	r6, #0
   18a04:	movne	r3, #0
   18a08:	moveq	r7, r6
   18a0c:	movne	r7, r3
   18a10:	strne	r3, [r6]
   18a14:	mov	r0, r7
   18a18:	add	sp, sp, #12
   18a1c:	ldrd	r4, [sp]
   18a20:	ldrd	r6, [sp, #8]
   18a24:	add	sp, sp, #16
   18a28:	pop	{pc}		; (ldr pc, [sp], #4)
   18a2c:	ldr	r7, [sp, #4]
   18a30:	cmp	r7, #0
   18a34:	beq	18a00 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   18a38:	ldr	r3, [r5, #184]	; 0xb8
   18a3c:	cmp	r3, #0
   18a40:	beq	18a60 <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   18a44:	mov	r2, r4
   18a48:	add	r0, r5, #188	; 0xbc
   18a4c:	mov	r1, r7
   18a50:	bl	19014 <flatcc_emitter_copy_buffer@@Base>
   18a54:	cmp	r0, #0
   18a58:	bne	18a14 <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   18a5c:	bl	13174 <flatcc_builder_default_alloc@@Base+0x23c>
   18a60:	mov	r0, r7
   18a64:	b	189fc <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>

00018a68 <flatcc_builder_aligned_alloc@@Base>:
   18a68:	cmp	r0, #4
   18a6c:	str	r4, [sp, #-8]!
   18a70:	mov	r4, #0
   18a74:	str	lr, [sp, #4]
   18a78:	sub	sp, sp, #8
   18a7c:	mov	r2, r1
   18a80:	movcs	r1, r0
   18a84:	movcc	r1, #4
   18a88:	add	r0, sp, #4
   18a8c:	str	r4, [sp, #4]
   18a90:	bl	122e8 <posix_memalign@plt>
   18a94:	cmp	r0, r4
   18a98:	ldr	r0, [sp, #4]
   18a9c:	beq	18ab0 <flatcc_builder_aligned_alloc@@Base+0x48>
   18aa0:	cmp	r0, #0
   18aa4:	beq	18ab0 <flatcc_builder_aligned_alloc@@Base+0x48>
   18aa8:	bl	12288 <free@plt>
   18aac:	mov	r0, r4
   18ab0:	add	sp, sp, #8
   18ab4:	ldr	r4, [sp]
   18ab8:	add	sp, sp, #4
   18abc:	pop	{pc}		; (ldr pc, [sp], #4)

00018ac0 <flatcc_builder_aligned_free@@Base>:
   18ac0:	b	12288 <free@plt>

00018ac4 <flatcc_builder_get_emit_context@@Base>:
   18ac4:	ldr	r0, [r0, #36]	; 0x24
   18ac8:	bx	lr

00018acc <flatcc_emitter_recycle_page@@Base>:
   18acc:	ldr	r3, [r0]
   18ad0:	cmp	r3, r1
   18ad4:	beq	18b18 <flatcc_emitter_recycle_page@@Base+0x4c>
   18ad8:	ldr	r2, [r0, #4]
   18adc:	cmp	r2, r1
   18ae0:	beq	18b18 <flatcc_emitter_recycle_page@@Base+0x4c>
   18ae4:	push	{lr}		; (str lr, [sp, #-4]!)
   18ae8:	mov	r0, #0
   18aec:	ldr	lr, [r1, #2944]	; 0xb80
   18af0:	ldr	ip, [r1, #2948]	; 0xb84
   18af4:	str	ip, [lr, #2948]	; 0xb84
   18af8:	ldr	r2, [r3, #2948]	; 0xb84
   18afc:	str	lr, [ip, #2944]	; 0xb80
   18b00:	str	r3, [r1, #2944]	; 0xb80
   18b04:	str	r2, [r1, #2948]	; 0xb84
   18b08:	str	r1, [r2, #2944]	; 0xb80
   18b0c:	ldr	r3, [r1, #2944]	; 0xb80
   18b10:	str	r1, [r3, #2948]	; 0xb84
   18b14:	pop	{pc}		; (ldr pc, [sp], #4)
   18b18:	mvn	r0, #0
   18b1c:	bx	lr

00018b20 <flatcc_emitter_reset@@Base>:
   18b20:	ldr	r2, [r0]
   18b24:	cmp	r2, #0
   18b28:	bxeq	lr
   18b2c:	strd	r4, [sp, #-16]!
   18b30:	movw	ip, #64064	; 0xfa40
   18b34:	movt	ip, #65535	; 0xffff
   18b38:	ldr	r1, [r0, #24]
   18b3c:	add	r4, r2, #1472	; 0x5c0
   18b40:	ldr	r3, [r0, #32]
   18b44:	ldr	r5, [r0, #28]
   18b48:	str	r6, [sp, #8]
   18b4c:	str	lr, [sp, #12]
   18b50:	mov	lr, #1472	; 0x5c0
   18b54:	cmp	r3, #0
   18b58:	stmib	r0, {r2, r4}
   18b5c:	moveq	r3, r1
   18b60:	lsr	r1, r1, #2
   18b64:	str	lr, [r0, #12]
   18b68:	add	r3, r3, r3, lsl #1
   18b6c:	str	r4, [r0, #16]
   18b70:	str	lr, [r0, #20]
   18b74:	add	r3, r1, r3, lsr #2
   18b78:	str	ip, [r2, #2952]	; 0xb88
   18b7c:	mov	ip, #0
   18b80:	cmp	r5, r3, lsl #1
   18b84:	str	ip, [r0, #24]
   18b88:	str	r3, [r0, #32]
   18b8c:	bls	18be4 <flatcc_emitter_reset@@Base+0xc4>
   18b90:	ldr	r3, [r2, #2944]	; 0xb80
   18b94:	mov	r4, r0
   18b98:	cmp	r2, r3
   18b9c:	bne	18bb4 <flatcc_emitter_reset@@Base+0x94>
   18ba0:	b	18be4 <flatcc_emitter_reset@@Base+0xc4>
   18ba4:	ldm	r4, {r1, r2}
   18ba8:	ldr	r3, [r2, #2944]	; 0xb80
   18bac:	cmp	r3, r1
   18bb0:	beq	18be4 <flatcc_emitter_reset@@Base+0xc4>
   18bb4:	ldr	r1, [r3, #2944]	; 0xb80
   18bb8:	mov	r0, r3
   18bbc:	str	r1, [r2, #2944]	; 0xb80
   18bc0:	ldr	r3, [r3, #2944]	; 0xb80
   18bc4:	str	r2, [r3, #2948]	; 0xb84
   18bc8:	bl	12288 <free@plt>
   18bcc:	ldr	r3, [r4, #28]
   18bd0:	ldr	r2, [r4, #32]
   18bd4:	sub	r3, r3, #2944	; 0xb80
   18bd8:	cmp	r3, r2, lsl #1
   18bdc:	str	r3, [r4, #28]
   18be0:	bhi	18ba4 <flatcc_emitter_reset@@Base+0x84>
   18be4:	ldrd	r4, [sp]
   18be8:	ldr	r6, [sp, #8]
   18bec:	add	sp, sp, #12
   18bf0:	pop	{pc}		; (ldr pc, [sp], #4)

00018bf4 <flatcc_emitter_clear@@Base>:
   18bf4:	ldr	r3, [r0]
   18bf8:	cmp	r3, #0
   18bfc:	bxeq	lr
   18c00:	mov	r1, #0
   18c04:	strd	r4, [sp, #-16]!
   18c08:	mov	r5, r0
   18c0c:	ldr	r2, [r3, #2948]	; 0xb84
   18c10:	str	r6, [sp, #8]
   18c14:	str	lr, [sp, #12]
   18c18:	str	r1, [r2, #2944]	; 0xb80
   18c1c:	ldr	r4, [r3, #2944]	; 0xb80
   18c20:	cmp	r4, r1
   18c24:	bne	18c30 <flatcc_emitter_clear@@Base+0x3c>
   18c28:	b	18c6c <flatcc_emitter_clear@@Base+0x78>
   18c2c:	mov	r4, r3
   18c30:	ldr	r0, [r4, #2948]	; 0xb84
   18c34:	bl	12288 <free@plt>
   18c38:	ldr	r3, [r4, #2944]	; 0xb80
   18c3c:	cmp	r3, #0
   18c40:	bne	18c2c <flatcc_emitter_clear@@Base+0x38>
   18c44:	mov	r0, r4
   18c48:	bl	12288 <free@plt>
   18c4c:	mov	r0, r5
   18c50:	mov	r2, #36	; 0x24
   18c54:	ldrd	r4, [sp]
   18c58:	mov	r1, #0
   18c5c:	ldr	r6, [sp, #8]
   18c60:	ldr	lr, [sp, #12]
   18c64:	add	sp, sp, #16
   18c68:	b	122f4 <memset@plt>
   18c6c:	mov	r4, r3
   18c70:	b	18c44 <flatcc_emitter_clear@@Base+0x50>

00018c74 <flatcc_emitter@@Base>:
   18c74:	cmp	r3, #0
   18c78:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18c7c:	mov	r4, r0
   18c80:	ldr	r3, [r0, #24]
   18c84:	strd	r6, [sp, #8]
   18c88:	strd	r8, [sp, #16]
   18c8c:	sub	r8, r2, #1
   18c90:	strd	sl, [sp, #24]
   18c94:	str	lr, [sp, #32]
   18c98:	sub	sp, sp, #12
   18c9c:	ldr	ip, [sp, #48]	; 0x30
   18ca0:	add	r3, r3, ip
   18ca4:	str	r3, [r0, #24]
   18ca8:	blt	18e8c <flatcc_emitter@@Base+0x218>
   18cac:	ldr	r0, [r0, #20]
   18cb0:	cmp	r0, ip
   18cb4:	bcs	18d4c <flatcc_emitter@@Base+0xd8>
   18cb8:	cmp	r2, #0
   18cbc:	beq	18d90 <flatcc_emitter@@Base+0x11c>
   18cc0:	movw	r3, #64064	; 0xfa40
   18cc4:	movt	r3, #65535	; 0xffff
   18cc8:	add	r5, r1, #8
   18ccc:	mov	r8, r2
   18cd0:	mov	r9, #1472	; 0x5c0
   18cd4:	str	r3, [sp, #4]
   18cd8:	ldr	r7, [r5, #-8]
   18cdc:	ldr	r6, [r5, #-4]
   18ce0:	cmp	r6, #0
   18ce4:	beq	18e28 <flatcc_emitter@@Base+0x1b4>
   18ce8:	mov	r3, r0
   18cec:	cmp	r6, r3
   18cf0:	bls	18d44 <flatcc_emitter@@Base+0xd0>
   18cf4:	cmp	r3, #0
   18cf8:	beq	18db0 <flatcc_emitter@@Base+0x13c>
   18cfc:	sub	fp, r6, r3
   18d00:	mov	r6, r3
   18d04:	mov	r2, r6
   18d08:	mov	r1, r7
   18d0c:	ldr	r0, [r4, #16]
   18d10:	bl	12294 <memcpy@plt>
   18d14:	ldr	r2, [r4, #16]
   18d18:	cmp	fp, #0
   18d1c:	add	r7, r7, r6
   18d20:	ldr	r0, [r4, #20]
   18d24:	add	r2, r2, r6
   18d28:	sub	r3, r0, r6
   18d2c:	mov	r0, r3
   18d30:	strd	r2, [r4, #16]
   18d34:	beq	18e28 <flatcc_emitter@@Base+0x1b4>
   18d38:	mov	r6, fp
   18d3c:	cmp	r6, r3
   18d40:	bhi	18cf4 <flatcc_emitter@@Base+0x80>
   18d44:	mov	fp, #0
   18d48:	b	18d04 <flatcc_emitter@@Base+0x90>
   18d4c:	ldr	r3, [r4, #16]
   18d50:	sub	r0, r0, ip
   18d54:	str	r0, [r4, #20]
   18d58:	add	ip, r3, ip
   18d5c:	str	ip, [r4, #16]
   18d60:	cmp	r2, #0
   18d64:	addne	r4, r1, #8
   18d68:	beq	18d90 <flatcc_emitter@@Base+0x11c>
   18d6c:	mov	r0, r3
   18d70:	ldmdb	r4, {r1, r2}
   18d74:	sub	r8, r8, #1
   18d78:	bl	12294 <memcpy@plt>
   18d7c:	ldr	r2, [r4, #-4]
   18d80:	cmn	r8, #1
   18d84:	add	r4, r4, #8
   18d88:	add	r3, r0, r2
   18d8c:	bne	18d6c <flatcc_emitter@@Base+0xf8>
   18d90:	mov	r0, #0
   18d94:	add	sp, sp, #12
   18d98:	ldrd	r4, [sp]
   18d9c:	ldrd	r6, [sp, #8]
   18da0:	ldrd	r8, [sp, #16]
   18da4:	ldrd	sl, [sp, #24]
   18da8:	add	sp, sp, #32
   18dac:	pop	{pc}		; (ldr pc, [sp], #4)
   18db0:	ldr	fp, [r4, #4]
   18db4:	cmp	fp, #0
   18db8:	beq	18e38 <flatcc_emitter@@Base+0x1c4>
   18dbc:	ldr	sl, [r4]
   18dc0:	ldr	r0, [fp, #2944]	; 0xb80
   18dc4:	cmp	r0, sl
   18dc8:	beq	18df4 <flatcc_emitter@@Base+0x180>
   18dcc:	str	r0, [r4, #4]
   18dd0:	ldr	r1, [r0, #2948]	; 0xb84
   18dd4:	mov	r2, #2944	; 0xb80
   18dd8:	mov	r3, r2
   18ddc:	str	r0, [r4, #16]
   18de0:	str	r2, [r4, #20]
   18de4:	ldr	r2, [r1, #2952]	; 0xb88
   18de8:	add	r2, r2, r3
   18dec:	str	r2, [r0, #2952]	; 0xb88
   18df0:	b	18cec <flatcc_emitter@@Base+0x78>
   18df4:	movw	r0, #2956	; 0xb8c
   18df8:	bl	122b8 <malloc@plt>
   18dfc:	cmp	r0, #0
   18e00:	beq	18e84 <flatcc_emitter@@Base+0x210>
   18e04:	ldr	r2, [r4, #28]
   18e08:	str	sl, [r0, #2944]	; 0xb80
   18e0c:	str	fp, [r0, #2948]	; 0xb84
   18e10:	add	r2, r2, #2944	; 0xb80
   18e14:	str	r2, [r4, #28]
   18e18:	str	r0, [sl, #2948]	; 0xb84
   18e1c:	str	r0, [fp, #2944]	; 0xb80
   18e20:	str	r0, [r4, #4]
   18e24:	b	18dd0 <flatcc_emitter@@Base+0x15c>
   18e28:	subs	r8, r8, #1
   18e2c:	add	r5, r5, #8
   18e30:	bne	18cd8 <flatcc_emitter@@Base+0x64>
   18e34:	b	18d90 <flatcc_emitter@@Base+0x11c>
   18e38:	movw	r0, #2956	; 0xb8c
   18e3c:	bl	122b8 <malloc@plt>
   18e40:	cmp	r0, #0
   18e44:	beq	18e84 <flatcc_emitter@@Base+0x210>
   18e48:	ldr	r2, [r4, #28]
   18e4c:	add	r1, r0, #1472	; 0x5c0
   18e50:	mov	r3, #1472	; 0x5c0
   18e54:	str	r0, [r4]
   18e58:	strd	r0, [r4, #4]
   18e5c:	str	r9, [r4, #12]
   18e60:	str	r1, [r4, #16]
   18e64:	add	r2, r2, #2944	; 0xb80
   18e68:	str	r9, [r4, #20]
   18e6c:	str	r0, [r0, #2944]	; 0xb80
   18e70:	str	r2, [r4, #28]
   18e74:	ldr	r2, [sp, #4]
   18e78:	str	r0, [r0, #2948]	; 0xb84
   18e7c:	str	r2, [r0, #2952]	; 0xb88
   18e80:	b	18cec <flatcc_emitter@@Base+0x78>
   18e84:	mvn	r0, #0
   18e88:	b	18d94 <flatcc_emitter@@Base+0x120>
   18e8c:	ldr	r0, [r0, #12]
   18e90:	cmp	r0, ip
   18e94:	bcs	18ffc <flatcc_emitter@@Base+0x388>
   18e98:	add	r5, r1, r2, lsl #3
   18e9c:	movw	r3, #64064	; 0xfa40
   18ea0:	movt	r3, #65535	; 0xffff
   18ea4:	str	r3, [sp, #4]
   18ea8:	cmn	r8, #1
   18eac:	beq	18d90 <flatcc_emitter@@Base+0x11c>
   18eb0:	ldr	r7, [r5, #-8]
   18eb4:	ldr	r6, [r5, #-4]
   18eb8:	cmp	r6, #0
   18ebc:	add	r7, r7, r6
   18ec0:	beq	18f10 <flatcc_emitter@@Base+0x29c>
   18ec4:	mov	r9, #1472	; 0x5c0
   18ec8:	ldr	r2, [r4, #12]
   18ecc:	cmp	r2, r6
   18ed0:	bcs	18f74 <flatcc_emitter@@Base+0x300>
   18ed4:	cmp	r2, #0
   18ed8:	beq	18f1c <flatcc_emitter@@Base+0x2a8>
   18edc:	sub	r6, r6, r2
   18ee0:	mov	r1, #0
   18ee4:	ldr	r3, [r4, #8]
   18ee8:	rsb	r0, r2, #0
   18eec:	add	r7, r7, r0
   18ef0:	str	r1, [r4, #12]
   18ef4:	mov	r1, r7
   18ef8:	add	r3, r3, r0
   18efc:	mov	r0, r3
   18f00:	str	r3, [r4, #8]
   18f04:	bl	12294 <memcpy@plt>
   18f08:	cmp	r6, #0
   18f0c:	bne	18ec8 <flatcc_emitter@@Base+0x254>
   18f10:	sub	r5, r5, #8
   18f14:	sub	r8, r8, #1
   18f18:	b	18ea8 <flatcc_emitter@@Base+0x234>
   18f1c:	ldr	fp, [r4]
   18f20:	cmp	fp, #0
   18f24:	beq	18fb8 <flatcc_emitter@@Base+0x344>
   18f28:	ldr	sl, [r4, #4]
   18f2c:	ldr	r0, [fp, #2948]	; 0xb84
   18f30:	cmp	r0, sl
   18f34:	beq	18f84 <flatcc_emitter@@Base+0x310>
   18f38:	ldr	r3, [fp, #2952]	; 0xb88
   18f3c:	sub	r3, r3, #2944	; 0xb80
   18f40:	str	r3, [r0, #2952]	; 0xb88
   18f44:	str	r0, [r4]
   18f48:	ldr	r3, [r0, #2944]	; 0xb80
   18f4c:	mov	r2, #2944	; 0xb80
   18f50:	add	r1, r0, #2944	; 0xb80
   18f54:	ldr	r3, [r3, #2952]	; 0xb88
   18f58:	str	r1, [r4, #8]
   18f5c:	str	r2, [r4, #12]
   18f60:	sub	r3, r3, #2944	; 0xb80
   18f64:	str	r3, [r0, #2952]	; 0xb88
   18f68:	ldr	r2, [r4, #12]
   18f6c:	cmp	r2, r6
   18f70:	bcc	18ed4 <flatcc_emitter@@Base+0x260>
   18f74:	sub	r1, r2, r6
   18f78:	mov	r2, r6
   18f7c:	mov	r6, #0
   18f80:	b	18ee4 <flatcc_emitter@@Base+0x270>
   18f84:	movw	r0, #2956	; 0xb8c
   18f88:	bl	122b8 <malloc@plt>
   18f8c:	cmp	r0, #0
   18f90:	beq	18e84 <flatcc_emitter@@Base+0x210>
   18f94:	ldr	r2, [r4, #28]
   18f98:	str	fp, [r0, #2944]	; 0xb80
   18f9c:	str	sl, [r0, #2948]	; 0xb84
   18fa0:	add	r2, r2, #2944	; 0xb80
   18fa4:	str	r2, [r4, #28]
   18fa8:	str	r0, [fp, #2948]	; 0xb84
   18fac:	str	r0, [sl, #2944]	; 0xb80
   18fb0:	str	r0, [r4]
   18fb4:	b	18f48 <flatcc_emitter@@Base+0x2d4>
   18fb8:	movw	r0, #2956	; 0xb8c
   18fbc:	bl	122b8 <malloc@plt>
   18fc0:	cmp	r0, #0
   18fc4:	beq	18e84 <flatcc_emitter@@Base+0x210>
   18fc8:	ldr	r3, [r4, #28]
   18fcc:	add	r2, r0, #1472	; 0x5c0
   18fd0:	str	r0, [r4]
   18fd4:	stmib	r4, {r0, r2, r9}
   18fd8:	add	r3, r3, #2944	; 0xb80
   18fdc:	str	r2, [r4, #16]
   18fe0:	str	r9, [r4, #20]
   18fe4:	str	r3, [r4, #28]
   18fe8:	ldr	r3, [sp, #4]
   18fec:	str	r0, [r0, #2944]	; 0xb80
   18ff0:	str	r0, [r0, #2948]	; 0xb84
   18ff4:	str	r3, [r0, #2952]	; 0xb88
   18ff8:	b	18ec8 <flatcc_emitter@@Base+0x254>
   18ffc:	ldr	r3, [r4, #8]
   19000:	sub	r0, r0, ip
   19004:	str	r0, [r4, #12]
   19008:	sub	r3, r3, ip
   1900c:	str	r3, [r4, #8]
   19010:	b	18d60 <flatcc_emitter@@Base+0xec>

00019014 <flatcc_emitter_copy_buffer@@Base>:
   19014:	ldr	r3, [r0, #24]
   19018:	strd	r4, [sp, #-16]!
   1901c:	str	r6, [sp, #8]
   19020:	str	lr, [sp, #12]
   19024:	cmp	r3, r2
   19028:	movhi	r5, #0
   1902c:	bhi	190ac <flatcc_emitter_copy_buffer@@Base+0x98>
   19030:	ldr	r5, [r0]
   19034:	mov	r6, r0
   19038:	cmp	r5, #0
   1903c:	beq	190ac <flatcc_emitter_copy_buffer@@Base+0x98>
   19040:	ldr	r2, [r6, #4]
   19044:	mov	r0, r1
   19048:	ldr	r1, [r6, #8]
   1904c:	cmp	r5, r2
   19050:	beq	190c0 <flatcc_emitter_copy_buffer@@Base+0xac>
   19054:	ldr	r2, [r6, #12]
   19058:	rsb	r2, r2, #2944	; 0xb80
   1905c:	add	r5, r0, r2
   19060:	bl	12294 <memcpy@plt>
   19064:	ldrd	r2, [r6]
   19068:	ldr	r4, [r2, #2944]	; 0xb80
   1906c:	cmp	r4, r3
   19070:	beq	19098 <flatcc_emitter_copy_buffer@@Base+0x84>
   19074:	mov	r2, #2944	; 0xb80
   19078:	mov	r1, r4
   1907c:	mov	r0, r5
   19080:	add	r5, r5, r2
   19084:	bl	12294 <memcpy@plt>
   19088:	ldr	r3, [r6, #4]
   1908c:	ldr	r4, [r4, #2944]	; 0xb80
   19090:	cmp	r3, r4
   19094:	bne	19074 <flatcc_emitter_copy_buffer@@Base+0x60>
   19098:	ldr	r2, [r6, #20]
   1909c:	mov	r1, r4
   190a0:	mov	r0, r5
   190a4:	rsb	r2, r2, #2944	; 0xb80
   190a8:	bl	12294 <memcpy@plt>
   190ac:	mov	r0, r5
   190b0:	ldrd	r4, [sp]
   190b4:	ldr	r6, [sp, #8]
   190b8:	add	sp, sp, #12
   190bc:	pop	{pc}		; (ldr pc, [sp], #4)
   190c0:	mov	r2, r3
   190c4:	mov	r5, r0
   190c8:	bl	12294 <memcpy@plt>
   190cc:	b	190ac <flatcc_emitter_copy_buffer@@Base+0x98>

000190d0 <flatcc_verify_error_string@@Base>:
   190d0:	cmp	r0, #36	; 0x24
   190d4:	bhi	190e8 <flatcc_verify_error_string@@Base+0x18>
   190d8:	movw	r3, #46544	; 0xb5d0
   190dc:	movt	r3, #1
   190e0:	ldr	r0, [r3, r0, lsl #2]
   190e4:	bx	lr
   190e8:	movw	r0, #46692	; 0xb664
   190ec:	movt	r0, #1
   190f0:	bx	lr

000190f4 <flatcc_verify_field@@Base>:
   190f4:	ldrh	ip, [r0, #22]
   190f8:	add	r1, r1, #2
   190fc:	lsl	r1, r1, #1
   19100:	uxth	r1, r1
   19104:	cmp	ip, r1
   19108:	bls	19150 <flatcc_verify_field@@Base+0x5c>
   1910c:	ldr	ip, [r0, #12]
   19110:	ldrh	r1, [ip, r1]
   19114:	cmp	r1, #0
   19118:	beq	19150 <flatcc_verify_field@@Base+0x5c>
   1911c:	ldrh	ip, [r0, #20]
   19120:	add	r2, r2, r1
   19124:	cmp	r2, ip
   19128:	bhi	19158 <flatcc_verify_field@@Base+0x64>
   1912c:	ldr	r2, [r0]
   19130:	sub	r3, r3, #1
   19134:	ldr	r0, [r0, #16]
   19138:	add	r2, r2, r0
   1913c:	add	r1, r2, r1
   19140:	tst	r1, r3
   19144:	moveq	r0, #0
   19148:	movne	r0, #12
   1914c:	bx	lr
   19150:	mov	r0, #0
   19154:	bx	lr
   19158:	mov	r0, #13
   1915c:	bx	lr

00019160 <flatcc_verify_string_field@@Base>:
   19160:	ldrh	r3, [r0, #22]
   19164:	add	r1, r1, #2
   19168:	lsl	r1, r1, #1
   1916c:	uxth	r1, r1
   19170:	cmp	r3, r1
   19174:	bls	19210 <flatcc_verify_string_field@@Base+0xb0>
   19178:	ldr	r3, [r0, #12]
   1917c:	ldrh	r3, [r3, r1]
   19180:	cmp	r3, #0
   19184:	beq	19210 <flatcc_verify_string_field@@Base+0xb0>
   19188:	ldrh	r2, [r0, #20]
   1918c:	add	r1, r3, #4
   19190:	cmp	r1, r2
   19194:	bhi	19220 <flatcc_verify_string_field@@Base+0xc0>
   19198:	ldr	r2, [r0, #16]
   1919c:	add	r3, r3, r2
   191a0:	tst	r3, #3
   191a4:	bne	19228 <flatcc_verify_string_field@@Base+0xc8>
   191a8:	cmp	r3, #0
   191ac:	beq	19238 <flatcc_verify_string_field@@Base+0xd8>
   191b0:	ldr	r1, [r0]
   191b4:	ldr	r2, [r1, r3]
   191b8:	add	r2, r3, r2
   191bc:	cmp	r3, r2
   191c0:	bcs	19208 <flatcc_verify_string_field@@Base+0xa8>
   191c4:	ldr	r3, [r0, #4]
   191c8:	add	r0, r2, #4
   191cc:	cmp	r3, r0
   191d0:	bcc	19208 <flatcc_verify_string_field@@Base+0xa8>
   191d4:	tst	r2, #3
   191d8:	bne	19208 <flatcc_verify_string_field@@Base+0xa8>
   191dc:	ldr	r2, [r1, r2]
   191e0:	sub	r3, r3, r0
   191e4:	add	ip, r2, #1
   191e8:	cmp	r3, ip
   191ec:	bcc	19230 <flatcc_verify_string_field@@Base+0xd0>
   191f0:	add	r1, r1, r0
   191f4:	ldrb	r3, [r1, r2]
   191f8:	cmp	r3, #0
   191fc:	moveq	r0, #0
   19200:	movne	r0, #7
   19204:	bx	lr
   19208:	mov	r0, #17
   1920c:	bx	lr
   19210:	cmp	r2, #0
   19214:	moveq	r0, #0
   19218:	movne	r0, #4
   1921c:	bx	lr
   19220:	mov	r0, #13
   19224:	bx	lr
   19228:	mov	r0, #12
   1922c:	bx	lr
   19230:	mov	r0, #8
   19234:	bx	lr
   19238:	mov	r0, r3
   1923c:	bx	lr

00019240 <flatcc_verify_vector_field@@Base>:
   19240:	ldrh	ip, [r0, #22]
   19244:	add	r1, r1, #2
   19248:	lsl	r1, r1, #1
   1924c:	str	r4, [sp, #-8]!
   19250:	str	lr, [sp, #4]
   19254:	uxth	r1, r1
   19258:	ldrh	lr, [sp, #8]
   1925c:	cmp	ip, r1
   19260:	bls	19324 <flatcc_verify_vector_field@@Base+0xe4>
   19264:	ldr	ip, [r0, #12]
   19268:	ldrh	r1, [ip, r1]
   1926c:	cmp	r1, #0
   19270:	beq	19324 <flatcc_verify_vector_field@@Base+0xe4>
   19274:	ldrh	r2, [r0, #20]
   19278:	add	ip, r1, #4
   1927c:	cmp	ip, r2
   19280:	movhi	r0, #13
   19284:	bhi	19308 <flatcc_verify_vector_field@@Base+0xc8>
   19288:	ldr	r2, [r0, #16]
   1928c:	add	r2, r1, r2
   19290:	tst	r2, #3
   19294:	movne	r0, #12
   19298:	bne	19308 <flatcc_verify_vector_field@@Base+0xc8>
   1929c:	cmp	r2, #0
   192a0:	beq	1933c <flatcc_verify_vector_field@@Base+0xfc>
   192a4:	ldr	r4, [r0]
   192a8:	ldr	ip, [r4, r2]
   192ac:	add	ip, r2, ip
   192b0:	cmp	r2, ip
   192b4:	bcs	19314 <flatcc_verify_vector_field@@Base+0xd4>
   192b8:	ldr	r1, [r0, #4]
   192bc:	add	r0, ip, #4
   192c0:	cmp	r1, r0
   192c4:	bcc	19314 <flatcc_verify_vector_field@@Base+0xd4>
   192c8:	cmp	lr, #4
   192cc:	movcc	lr, #4
   192d0:	sub	lr, lr, #1
   192d4:	orr	lr, lr, #3
   192d8:	tst	lr, r0
   192dc:	bne	19314 <flatcc_verify_vector_field@@Base+0xd4>
   192e0:	ldr	r2, [r4, ip]
   192e4:	ldr	ip, [sp, #12]
   192e8:	cmp	ip, r2
   192ec:	movcc	r0, #25
   192f0:	bcc	19308 <flatcc_verify_vector_field@@Base+0xc8>
   192f4:	mul	r2, r2, r3
   192f8:	sub	r0, r1, r0
   192fc:	cmp	r0, r2
   19300:	movcc	r0, #26
   19304:	movcs	r0, #0
   19308:	ldr	r4, [sp]
   1930c:	add	sp, sp, #4
   19310:	pop	{pc}		; (ldr pc, [sp], #4)
   19314:	ldr	r4, [sp]
   19318:	add	sp, sp, #4
   1931c:	mov	r0, #16
   19320:	pop	{pc}		; (ldr pc, [sp], #4)
   19324:	cmp	r2, #0
   19328:	ldr	r4, [sp]
   1932c:	add	sp, sp, #4
   19330:	moveq	r0, #0
   19334:	movne	r0, #4
   19338:	pop	{pc}		; (ldr pc, [sp], #4)
   1933c:	mov	r0, r2
   19340:	b	19308 <flatcc_verify_vector_field@@Base+0xc8>

00019344 <flatcc_verify_string_vector_field@@Base>:
   19344:	ldrh	r3, [r0, #22]
   19348:	add	r1, r1, #2
   1934c:	lsl	r1, r1, #1
   19350:	uxth	r1, r1
   19354:	cmp	r3, r1
   19358:	bls	194b4 <flatcc_verify_string_vector_field@@Base+0x170>
   1935c:	ldr	r3, [r0, #12]
   19360:	ldrh	r3, [r3, r1]
   19364:	cmp	r3, #0
   19368:	beq	194b4 <flatcc_verify_string_vector_field@@Base+0x170>
   1936c:	ldrh	r2, [r0, #20]
   19370:	add	r1, r3, #4
   19374:	cmp	r1, r2
   19378:	bhi	194c4 <flatcc_verify_string_vector_field@@Base+0x180>
   1937c:	ldr	r2, [r0, #16]
   19380:	add	r3, r3, r2
   19384:	tst	r3, #3
   19388:	bne	194cc <flatcc_verify_string_vector_field@@Base+0x188>
   1938c:	cmp	r3, #0
   19390:	beq	19504 <flatcc_verify_string_vector_field@@Base+0x1c0>
   19394:	ldr	r1, [r0]
   19398:	ldr	r2, [r1, r3]
   1939c:	add	r2, r3, r2
   193a0:	cmp	r3, r2
   193a4:	bcs	194ac <flatcc_verify_string_vector_field@@Base+0x168>
   193a8:	ldr	ip, [r0, #4]
   193ac:	add	r0, r2, #4
   193b0:	cmp	ip, r0
   193b4:	bcc	194ac <flatcc_verify_string_vector_field@@Base+0x168>
   193b8:	tst	r0, #3
   193bc:	bne	194ac <flatcc_verify_string_vector_field@@Base+0x168>
   193c0:	ldr	r3, [r1, r2]
   193c4:	strd	r4, [sp, #-16]!
   193c8:	str	r6, [sp, #8]
   193cc:	str	lr, [sp, #12]
   193d0:	cmn	r3, #-1073741823	; 0xc0000001
   193d4:	bhi	194d4 <flatcc_verify_string_vector_field@@Base+0x190>
   193d8:	lsl	lr, r3, #2
   193dc:	sub	r4, ip, r0
   193e0:	cmp	r4, lr
   193e4:	bcc	194d4 <flatcc_verify_string_vector_field@@Base+0x190>
   193e8:	cmp	r3, #0
   193ec:	beq	19520 <flatcc_verify_string_vector_field@@Base+0x1dc>
   193f0:	ldr	r2, [r1, r0]
   193f4:	add	r2, r0, r2
   193f8:	cmp	r0, r2
   193fc:	bcs	19518 <flatcc_verify_string_vector_field@@Base+0x1d4>
   19400:	add	r4, r2, #4
   19404:	cmp	ip, r4
   19408:	bcc	19518 <flatcc_verify_string_vector_field@@Base+0x1d4>
   1940c:	tst	r2, #3
   19410:	bne	19518 <flatcc_verify_string_vector_field@@Base+0x1d4>
   19414:	ldr	r3, [r1, r2]
   19418:	sub	r5, ip, r4
   1941c:	add	r6, r3, #1
   19420:	cmp	r6, r5
   19424:	addls	lr, r0, lr
   19428:	bhi	19480 <flatcc_verify_string_vector_field@@Base+0x13c>
   1942c:	add	r3, r1, r3
   19430:	add	r0, r0, #4
   19434:	ldrb	r3, [r3, r4]
   19438:	cmp	r3, #0
   1943c:	bne	1950c <flatcc_verify_string_vector_field@@Base+0x1c8>
   19440:	cmp	r0, lr
   19444:	beq	19520 <flatcc_verify_string_vector_field@@Base+0x1dc>
   19448:	ldr	r2, [r1, r0]
   1944c:	add	r2, r0, r2
   19450:	cmp	r2, r0
   19454:	add	r4, r2, #4
   19458:	bls	19518 <flatcc_verify_string_vector_field@@Base+0x1d4>
   1945c:	cmp	ip, r4
   19460:	bcc	19518 <flatcc_verify_string_vector_field@@Base+0x1d4>
   19464:	tst	r2, #3
   19468:	sub	r5, ip, r4
   1946c:	bne	19518 <flatcc_verify_string_vector_field@@Base+0x1d4>
   19470:	ldr	r3, [r1, r2]
   19474:	add	r6, r3, #1
   19478:	cmp	r5, r6
   1947c:	bcs	1942c <flatcc_verify_string_vector_field@@Base+0xe8>
   19480:	ldr	r3, [r1, r2]
   19484:	add	r2, r3, #1
   19488:	cmp	r5, r2
   1948c:	movcc	r0, #8
   19490:	bcc	194f4 <flatcc_verify_string_vector_field@@Base+0x1b0>
   19494:	add	r3, r1, r3
   19498:	ldrb	r3, [r3, r4]
   1949c:	cmp	r3, #0
   194a0:	moveq	r0, #0
   194a4:	movne	r0, #7
   194a8:	b	194f4 <flatcc_verify_string_vector_field@@Base+0x1b0>
   194ac:	mov	r0, #16
   194b0:	bx	lr
   194b4:	cmp	r2, #0
   194b8:	movne	r0, #4
   194bc:	moveq	r0, #0
   194c0:	bx	lr
   194c4:	mov	r0, #13
   194c8:	bx	lr
   194cc:	mov	r0, #12
   194d0:	bx	lr
   194d4:	ldr	r3, [r1, r2]
   194d8:	cmn	r3, #-1073741823	; 0xc0000001
   194dc:	movhi	r0, #25
   194e0:	bhi	194f4 <flatcc_verify_string_vector_field@@Base+0x1b0>
   194e4:	sub	r0, ip, r0
   194e8:	cmp	r0, r3, lsl #2
   194ec:	movcs	r0, #0
   194f0:	movcc	r0, #26
   194f4:	ldrd	r4, [sp]
   194f8:	ldr	r6, [sp, #8]
   194fc:	add	sp, sp, #12
   19500:	pop	{pc}		; (ldr pc, [sp], #4)
   19504:	mov	r0, r3
   19508:	bx	lr
   1950c:	cmp	ip, r4
   19510:	subcs	r5, ip, r4
   19514:	bcs	19480 <flatcc_verify_string_vector_field@@Base+0x13c>
   19518:	mov	r0, #17
   1951c:	b	194f4 <flatcc_verify_string_vector_field@@Base+0x1b0>
   19520:	mov	r0, r3
   19524:	b	194f4 <flatcc_verify_string_vector_field@@Base+0x1b0>

00019528 <flatcc_verify_table_field@@Base>:
   19528:	ldrh	ip, [r0, #22]
   1952c:	add	r1, r1, #2
   19530:	lsl	r1, r1, #1
   19534:	uxth	r1, r1
   19538:	cmp	ip, r1
   1953c:	bls	1965c <flatcc_verify_table_field@@Base+0x134>
   19540:	ldr	ip, [r0, #12]
   19544:	ldrh	r1, [ip, r1]
   19548:	cmp	r1, #0
   1954c:	beq	1965c <flatcc_verify_table_field@@Base+0x134>
   19550:	ldrh	r2, [r0, #20]
   19554:	add	ip, r1, #4
   19558:	cmp	ip, r2
   1955c:	bhi	1966c <flatcc_verify_table_field@@Base+0x144>
   19560:	ldr	r2, [r0, #16]
   19564:	add	r1, r1, r2
   19568:	tst	r1, #3
   1956c:	bne	19674 <flatcc_verify_table_field@@Base+0x14c>
   19570:	cmp	r1, #0
   19574:	beq	1967c <flatcc_verify_table_field@@Base+0x154>
   19578:	ldr	ip, [r0]
   1957c:	strd	r4, [sp, #-12]!
   19580:	ldr	r2, [r0, #8]
   19584:	str	lr, [sp, #8]
   19588:	sub	sp, sp, #28
   1958c:	ldr	lr, [r0, #4]
   19590:	ldr	r0, [ip, r1]
   19594:	sub	r2, r2, #1
   19598:	cmp	r2, #0
   1959c:	moveq	r0, #3
   195a0:	str	r2, [sp, #8]
   195a4:	beq	1964c <flatcc_verify_table_field@@Base+0x124>
   195a8:	add	r2, r1, r0
   195ac:	cmp	r1, r2
   195b0:	bcs	19648 <flatcc_verify_table_field@@Base+0x120>
   195b4:	add	r1, r2, #4
   195b8:	cmp	lr, r1
   195bc:	bcc	19648 <flatcc_verify_table_field@@Base+0x120>
   195c0:	tst	r2, #3
   195c4:	bne	19648 <flatcc_verify_table_field@@Base+0x120>
   195c8:	str	r2, [sp, #16]
   195cc:	ldr	r1, [ip, r2]
   195d0:	subs	r1, r2, r1
   195d4:	bmi	19684 <flatcc_verify_table_field@@Base+0x15c>
   195d8:	tst	r1, #1
   195dc:	bne	19684 <flatcc_verify_table_field@@Base+0x15c>
   195e0:	add	r4, r1, #2
   195e4:	cmp	lr, r4
   195e8:	movcc	r0, #27
   195ec:	bcc	1964c <flatcc_verify_table_field@@Base+0x124>
   195f0:	ldrh	r0, [ip, r1]
   195f4:	add	r5, ip, r1
   195f8:	add	r1, r0, r1
   195fc:	strh	r0, [sp, #22]
   19600:	cmp	lr, r1
   19604:	bcc	1968c <flatcc_verify_table_field@@Base+0x164>
   19608:	tst	r0, #1
   1960c:	bne	1968c <flatcc_verify_table_field@@Base+0x164>
   19610:	cmp	r0, #3
   19614:	movls	r0, #28
   19618:	bls	1964c <flatcc_verify_table_field@@Base+0x124>
   1961c:	ldrh	r1, [ip, r4]
   19620:	sub	r2, lr, r2
   19624:	cmp	r2, r1
   19628:	strh	r1, [sp, #20]
   1962c:	movcc	r0, #20
   19630:	bcc	1964c <flatcc_verify_table_field@@Base+0x124>
   19634:	mov	r0, sp
   19638:	stm	sp, {ip, lr}
   1963c:	str	r5, [sp, #12]
   19640:	blx	r3
   19644:	b	1964c <flatcc_verify_table_field@@Base+0x124>
   19648:	mov	r0, #15
   1964c:	add	sp, sp, #28
   19650:	ldrd	r4, [sp]
   19654:	add	sp, sp, #8
   19658:	pop	{pc}		; (ldr pc, [sp], #4)
   1965c:	cmp	r2, #0
   19660:	moveq	r0, #0
   19664:	movne	r0, #4
   19668:	bx	lr
   1966c:	mov	r0, #13
   19670:	bx	lr
   19674:	mov	r0, #12
   19678:	bx	lr
   1967c:	mov	r0, r1
   19680:	bx	lr
   19684:	mov	r0, #29
   19688:	b	1964c <flatcc_verify_table_field@@Base+0x124>
   1968c:	mov	r0, #30
   19690:	b	1964c <flatcc_verify_table_field@@Base+0x124>

00019694 <flatcc_verify_table_vector_field@@Base>:
   19694:	ldrh	ip, [r0, #22]
   19698:	add	r1, r1, #2
   1969c:	lsl	r1, r1, #1
   196a0:	uxth	r1, r1
   196a4:	cmp	ip, r1
   196a8:	bls	19920 <flatcc_verify_table_vector_field@@Base+0x28c>
   196ac:	ldr	ip, [r0, #12]
   196b0:	ldrh	r1, [ip, r1]
   196b4:	cmp	r1, #0
   196b8:	beq	19920 <flatcc_verify_table_vector_field@@Base+0x28c>
   196bc:	ldrh	r2, [r0, #20]
   196c0:	add	ip, r1, #4
   196c4:	cmp	ip, r2
   196c8:	bhi	19930 <flatcc_verify_table_vector_field@@Base+0x29c>
   196cc:	ldr	r2, [r0, #16]
   196d0:	add	r1, r1, r2
   196d4:	tst	r1, #3
   196d8:	bne	19948 <flatcc_verify_table_vector_field@@Base+0x2b4>
   196dc:	cmp	r1, #0
   196e0:	beq	19928 <flatcc_verify_table_vector_field@@Base+0x294>
   196e4:	ldr	ip, [r0, #8]
   196e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   196ec:	strd	r6, [sp, #8]
   196f0:	ldr	r6, [r0]
   196f4:	strd	r8, [sp, #16]
   196f8:	cmp	ip, #0
   196fc:	strd	sl, [sp, #24]
   19700:	str	lr, [sp, #32]
   19704:	sub	sp, sp, #36	; 0x24
   19708:	ldr	r2, [r6, r1]
   1970c:	ble	19940 <flatcc_verify_table_vector_field@@Base+0x2ac>
   19710:	add	r2, r1, r2
   19714:	cmp	r1, r2
   19718:	bcs	19900 <flatcc_verify_table_vector_field@@Base+0x26c>
   1971c:	ldr	r8, [r0, #4]
   19720:	add	r5, r2, #4
   19724:	cmp	r8, r5
   19728:	bcc	19900 <flatcc_verify_table_vector_field@@Base+0x26c>
   1972c:	tst	r5, #3
   19730:	bne	19900 <flatcc_verify_table_vector_field@@Base+0x26c>
   19734:	ldr	r1, [r6, r2]
   19738:	cmn	r1, #-1073741823	; 0xc0000001
   1973c:	bhi	19950 <flatcc_verify_table_vector_field@@Base+0x2bc>
   19740:	lsl	r9, r1, #2
   19744:	sub	r0, r8, r5
   19748:	cmp	r0, r9
   1974c:	bcc	19950 <flatcc_verify_table_vector_field@@Base+0x2bc>
   19750:	cmp	r1, #0
   19754:	beq	19970 <flatcc_verify_table_vector_field@@Base+0x2dc>
   19758:	sub	r7, ip, #2
   1975c:	add	fp, r6, r5
   19760:	ldr	r1, [r6, r5]
   19764:	cmp	r7, #0
   19768:	str	r7, [sp, #16]
   1976c:	beq	19940 <flatcc_verify_table_vector_field@@Base+0x2ac>
   19770:	add	r1, r5, r1
   19774:	mov	sl, r3
   19778:	cmp	r5, r1
   1977c:	bcs	19990 <flatcc_verify_table_vector_field@@Base+0x2fc>
   19780:	add	r3, r1, #4
   19784:	cmp	r8, r3
   19788:	bcc	19990 <flatcc_verify_table_vector_field@@Base+0x2fc>
   1978c:	tst	r1, #3
   19790:	bne	19990 <flatcc_verify_table_vector_field@@Base+0x2fc>
   19794:	movw	r3, #65532	; 0xfffc
   19798:	movt	r3, #65535	; 0xffff
   1979c:	sub	r3, r3, r2
   197a0:	add	r2, r2, #8
   197a4:	add	r9, r5, r9
   197a8:	add	fp, fp, r3
   197ac:	add	r4, r6, r2
   197b0:	str	r1, [sp, #24]
   197b4:	add	r3, fp, r5
   197b8:	ldr	r2, [r6, r1]
   197bc:	subs	r2, r1, r2
   197c0:	bmi	19854 <flatcc_verify_table_vector_field@@Base+0x1c0>
   197c4:	tst	r2, #1
   197c8:	bne	19854 <flatcc_verify_table_vector_field@@Base+0x1c0>
   197cc:	add	lr, r2, #2
   197d0:	cmp	r8, lr
   197d4:	bcc	19854 <flatcc_verify_table_vector_field@@Base+0x1c0>
   197d8:	ldrh	r0, [r6, r2]
   197dc:	add	ip, r6, r2
   197e0:	add	r2, r0, r2
   197e4:	strh	r0, [sp, #30]
   197e8:	cmp	r8, r2
   197ec:	bcc	19854 <flatcc_verify_table_vector_field@@Base+0x1c0>
   197f0:	tst	r0, #1
   197f4:	bne	19854 <flatcc_verify_table_vector_field@@Base+0x1c0>
   197f8:	cmp	r0, #3
   197fc:	bls	19854 <flatcc_verify_table_vector_field@@Base+0x1c0>
   19800:	ldrh	r2, [r6, lr]
   19804:	sub	r1, r8, r1
   19808:	cmp	r1, r2
   1980c:	strh	r2, [sp, #28]
   19810:	bcc	19854 <flatcc_verify_table_vector_field@@Base+0x1c0>
   19814:	add	r0, sp, #8
   19818:	stmib	sp, {r3, r6, r8}
   1981c:	str	ip, [sp, #20]
   19820:	blx	sl
   19824:	cmp	r0, #0
   19828:	ldr	r3, [sp, #4]
   1982c:	bne	19854 <flatcc_verify_table_vector_field@@Base+0x1c0>
   19830:	add	r5, r5, #4
   19834:	cmp	r5, r9
   19838:	beq	19970 <flatcc_verify_table_vector_field@@Base+0x2dc>
   1983c:	mov	r3, r4
   19840:	ldr	r1, [r4], #4
   19844:	str	r7, [sp, #16]
   19848:	add	r1, r1, r5
   1984c:	cmp	r5, r1
   19850:	bcc	19978 <flatcc_verify_table_vector_field@@Base+0x2e4>
   19854:	ldr	r3, [r3]
   19858:	str	r7, [sp, #16]
   1985c:	add	r3, r5, r3
   19860:	cmp	r3, r5
   19864:	bls	19998 <flatcc_verify_table_vector_field@@Base+0x304>
   19868:	add	r2, r3, #4
   1986c:	cmp	r8, r2
   19870:	bcc	19998 <flatcc_verify_table_vector_field@@Base+0x304>
   19874:	tst	r3, #3
   19878:	bne	19998 <flatcc_verify_table_vector_field@@Base+0x304>
   1987c:	str	r3, [sp, #24]
   19880:	ldr	r2, [r6, r3]
   19884:	subs	r2, r3, r2
   19888:	bmi	199a0 <flatcc_verify_table_vector_field@@Base+0x30c>
   1988c:	tst	r2, #1
   19890:	bne	199a0 <flatcc_verify_table_vector_field@@Base+0x30c>
   19894:	add	r0, r2, #2
   19898:	cmp	r8, r0
   1989c:	movcc	r0, #27
   198a0:	bcc	19904 <flatcc_verify_table_vector_field@@Base+0x270>
   198a4:	ldrh	r1, [r6, r2]
   198a8:	add	ip, r6, r2
   198ac:	add	r2, r1, r2
   198b0:	strh	r1, [sp, #30]
   198b4:	cmp	r8, r2
   198b8:	bcc	199a8 <flatcc_verify_table_vector_field@@Base+0x314>
   198bc:	tst	r1, #1
   198c0:	bne	199a8 <flatcc_verify_table_vector_field@@Base+0x314>
   198c4:	cmp	r1, #3
   198c8:	movls	r0, #28
   198cc:	bls	19904 <flatcc_verify_table_vector_field@@Base+0x270>
   198d0:	ldrh	r2, [r6, r0]
   198d4:	sub	r3, r8, r3
   198d8:	cmp	r3, r2
   198dc:	strh	r2, [sp, #28]
   198e0:	movcc	r0, #20
   198e4:	bcc	19904 <flatcc_verify_table_vector_field@@Base+0x270>
   198e8:	add	r0, sp, #8
   198ec:	str	r6, [sp, #8]
   198f0:	str	r8, [sp, #12]
   198f4:	str	ip, [sp, #20]
   198f8:	blx	sl
   198fc:	b	19904 <flatcc_verify_table_vector_field@@Base+0x270>
   19900:	mov	r0, #16
   19904:	add	sp, sp, #36	; 0x24
   19908:	ldrd	r4, [sp]
   1990c:	ldrd	r6, [sp, #8]
   19910:	ldrd	r8, [sp, #16]
   19914:	ldrd	sl, [sp, #24]
   19918:	add	sp, sp, #32
   1991c:	pop	{pc}		; (ldr pc, [sp], #4)
   19920:	cmp	r2, #0
   19924:	bne	19938 <flatcc_verify_table_vector_field@@Base+0x2a4>
   19928:	mov	r0, #0
   1992c:	bx	lr
   19930:	mov	r0, #13
   19934:	bx	lr
   19938:	mov	r0, #4
   1993c:	bx	lr
   19940:	mov	r0, #3
   19944:	b	19904 <flatcc_verify_table_vector_field@@Base+0x270>
   19948:	mov	r0, #12
   1994c:	bx	lr
   19950:	ldr	r3, [r6, r2]
   19954:	cmn	r3, #-1073741823	; 0xc0000001
   19958:	movhi	r0, #25
   1995c:	bhi	19904 <flatcc_verify_table_vector_field@@Base+0x270>
   19960:	sub	r5, r8, r5
   19964:	cmp	r5, r3, lsl #2
   19968:	movcc	r0, #26
   1996c:	bcc	19904 <flatcc_verify_table_vector_field@@Base+0x270>
   19970:	mov	r0, #0
   19974:	b	19904 <flatcc_verify_table_vector_field@@Base+0x270>
   19978:	add	r2, r1, #4
   1997c:	cmp	r8, r2
   19980:	bcc	19854 <flatcc_verify_table_vector_field@@Base+0x1c0>
   19984:	tst	r1, #3
   19988:	beq	197b0 <flatcc_verify_table_vector_field@@Base+0x11c>
   1998c:	b	19854 <flatcc_verify_table_vector_field@@Base+0x1c0>
   19990:	mov	r3, fp
   19994:	b	19854 <flatcc_verify_table_vector_field@@Base+0x1c0>
   19998:	mov	r0, #15
   1999c:	b	19904 <flatcc_verify_table_vector_field@@Base+0x270>
   199a0:	mov	r0, #29
   199a4:	b	19904 <flatcc_verify_table_vector_field@@Base+0x270>
   199a8:	mov	r0, #30
   199ac:	b	19904 <flatcc_verify_table_vector_field@@Base+0x270>

000199b0 <flatcc_verify_union_table@@Base>:
   199b0:	strd	r4, [sp, #-12]!
   199b4:	ldr	r3, [r0, #8]
   199b8:	ldr	ip, [r0, #4]
   199bc:	ldr	r2, [r0, #16]
   199c0:	sub	r3, r3, #1
   199c4:	str	lr, [sp, #8]
   199c8:	sub	sp, sp, #28
   199cc:	cmp	r3, #0
   199d0:	ldr	lr, [r0]
   199d4:	str	r3, [sp, #8]
   199d8:	ldr	r3, [r0, #20]
   199dc:	moveq	r0, #3
   199e0:	beq	199f4 <flatcc_verify_union_table@@Base+0x44>
   199e4:	add	r3, r2, r3
   199e8:	cmp	r2, r3
   199ec:	bcc	19a04 <flatcc_verify_union_table@@Base+0x54>
   199f0:	mov	r0, #15
   199f4:	add	sp, sp, #28
   199f8:	ldrd	r4, [sp]
   199fc:	add	sp, sp, #8
   19a00:	pop	{pc}		; (ldr pc, [sp], #4)
   19a04:	add	r2, r3, #4
   19a08:	cmp	ip, r2
   19a0c:	bcc	199f0 <flatcc_verify_union_table@@Base+0x40>
   19a10:	tst	r3, #3
   19a14:	bne	199f0 <flatcc_verify_union_table@@Base+0x40>
   19a18:	str	r3, [sp, #16]
   19a1c:	ldr	r2, [lr, r3]
   19a20:	subs	r2, r3, r2
   19a24:	bmi	19aa4 <flatcc_verify_union_table@@Base+0xf4>
   19a28:	tst	r2, #1
   19a2c:	bne	19aa4 <flatcc_verify_union_table@@Base+0xf4>
   19a30:	add	r4, r2, #2
   19a34:	cmp	ip, r4
   19a38:	movcc	r0, #27
   19a3c:	bcc	199f4 <flatcc_verify_union_table@@Base+0x44>
   19a40:	ldrh	r0, [lr, r2]
   19a44:	add	r5, lr, r2
   19a48:	add	r2, r0, r2
   19a4c:	strh	r0, [sp, #22]
   19a50:	cmp	ip, r2
   19a54:	bcc	19a9c <flatcc_verify_union_table@@Base+0xec>
   19a58:	tst	r0, #1
   19a5c:	bne	19a9c <flatcc_verify_union_table@@Base+0xec>
   19a60:	cmp	r0, #3
   19a64:	movls	r0, #28
   19a68:	bls	199f4 <flatcc_verify_union_table@@Base+0x44>
   19a6c:	ldrh	r2, [lr, r4]
   19a70:	sub	r3, ip, r3
   19a74:	cmp	r3, r2
   19a78:	strh	r2, [sp, #20]
   19a7c:	movcc	r0, #20
   19a80:	bcc	199f4 <flatcc_verify_union_table@@Base+0x44>
   19a84:	mov	r0, sp
   19a88:	str	lr, [sp]
   19a8c:	str	ip, [sp, #4]
   19a90:	str	r5, [sp, #12]
   19a94:	blx	r1
   19a98:	b	199f4 <flatcc_verify_union_table@@Base+0x44>
   19a9c:	mov	r0, #30
   19aa0:	b	199f4 <flatcc_verify_union_table@@Base+0x44>
   19aa4:	mov	r0, #29
   19aa8:	b	199f4 <flatcc_verify_union_table@@Base+0x44>

00019aac <flatcc_verify_union_struct@@Base>:
   19aac:	push	{lr}		; (str lr, [sp, #-4]!)
   19ab0:	ldr	ip, [r0, #20]
   19ab4:	ldr	lr, [r0, #4]
   19ab8:	ldr	r3, [r0, #16]
   19abc:	cmp	ip, #0
   19ac0:	beq	19af4 <flatcc_verify_union_struct@@Base+0x48>
   19ac4:	add	r3, r3, ip
   19ac8:	cmp	lr, r3
   19acc:	bcc	19af4 <flatcc_verify_union_struct@@Base+0x48>
   19ad0:	adds	r1, r1, r3
   19ad4:	bcs	19b04 <flatcc_verify_union_struct@@Base+0x58>
   19ad8:	cmp	lr, r1
   19adc:	bcc	19afc <flatcc_verify_union_struct@@Base+0x50>
   19ae0:	sub	r2, r2, #1
   19ae4:	tst	r2, r3
   19ae8:	moveq	r0, #0
   19aec:	movne	r0, #11
   19af0:	pop	{pc}		; (ldr pc, [sp], #4)
   19af4:	mov	r0, #18
   19af8:	pop	{pc}		; (ldr pc, [sp], #4)
   19afc:	mov	r0, #9
   19b00:	pop	{pc}		; (ldr pc, [sp], #4)
   19b04:	mov	r0, #10
   19b08:	b	19af0 <flatcc_verify_union_struct@@Base+0x44>

00019b0c <flatcc_verify_union_string@@Base>:
   19b0c:	ldrd	r2, [r0, #16]
   19b10:	add	r3, r2, r3
   19b14:	cmp	r2, r3
   19b18:	bcs	19b64 <flatcc_verify_union_string@@Base+0x58>
   19b1c:	ldr	r2, [r0, #4]
   19b20:	add	r1, r3, #4
   19b24:	cmp	r2, r1
   19b28:	bcc	19b64 <flatcc_verify_union_string@@Base+0x58>
   19b2c:	tst	r3, #3
   19b30:	bne	19b64 <flatcc_verify_union_string@@Base+0x58>
   19b34:	ldr	r0, [r0]
   19b38:	sub	r2, r2, r1
   19b3c:	ldr	r3, [r0, r3]
   19b40:	add	ip, r3, #1
   19b44:	cmp	r2, ip
   19b48:	bcc	19b6c <flatcc_verify_union_string@@Base+0x60>
   19b4c:	add	r1, r0, r1
   19b50:	ldrb	r3, [r1, r3]
   19b54:	cmp	r3, #0
   19b58:	moveq	r0, #0
   19b5c:	movne	r0, #7
   19b60:	bx	lr
   19b64:	mov	r0, #17
   19b68:	bx	lr
   19b6c:	mov	r0, #8
   19b70:	bx	lr

00019b74 <flatcc_verify_buffer_header@@Base>:
   19b74:	tst	r0, #3
   19b78:	bne	19be4 <flatcc_verify_buffer_header@@Base+0x70>
   19b7c:	cmn	r1, #9
   19b80:	bhi	19bec <flatcc_verify_buffer_header@@Base+0x78>
   19b84:	cmp	r1, #7
   19b88:	bls	19bdc <flatcc_verify_buffer_header@@Base+0x68>
   19b8c:	cmp	r2, #0
   19b90:	beq	19bf4 <flatcc_verify_buffer_header@@Base+0x80>
   19b94:	mov	r1, r2
   19b98:	mov	r2, #4
   19b9c:	str	r4, [sp, #-8]!
   19ba0:	str	lr, [sp, #4]
   19ba4:	sub	sp, sp, #8
   19ba8:	mov	r4, r0
   19bac:	add	r0, sp, r2
   19bb0:	bl	12300 <strncpy@plt>
   19bb4:	ldr	r2, [r4, #4]
   19bb8:	ldr	r3, [sp, #4]
   19bbc:	cmp	r3, #0
   19bc0:	cmpne	r2, r3
   19bc4:	movne	r0, #2
   19bc8:	moveq	r0, #0
   19bcc:	add	sp, sp, #8
   19bd0:	ldr	r4, [sp]
   19bd4:	add	sp, sp, #4
   19bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   19bdc:	mov	r0, #1
   19be0:	bx	lr
   19be4:	mov	r0, #5
   19be8:	bx	lr
   19bec:	mov	r0, #6
   19bf0:	bx	lr
   19bf4:	mov	r0, #0
   19bf8:	bx	lr

00019bfc <flatcc_verify_typed_buffer_header@@Base>:
   19bfc:	tst	r0, #3
   19c00:	bne	19c38 <flatcc_verify_typed_buffer_header@@Base+0x3c>
   19c04:	cmn	r1, #9
   19c08:	bhi	19c48 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   19c0c:	cmp	r1, #7
   19c10:	bls	19c30 <flatcc_verify_typed_buffer_header@@Base+0x34>
   19c14:	cmp	r2, #0
   19c18:	beq	19c40 <flatcc_verify_typed_buffer_header@@Base+0x44>
   19c1c:	ldr	r0, [r0, #4]
   19c20:	cmp	r2, r0
   19c24:	movne	r0, #2
   19c28:	moveq	r0, #0
   19c2c:	bx	lr
   19c30:	mov	r0, #1
   19c34:	bx	lr
   19c38:	mov	r0, #5
   19c3c:	bx	lr
   19c40:	mov	r0, r2
   19c44:	bx	lr
   19c48:	mov	r0, #6
   19c4c:	bx	lr

00019c50 <flatcc_verify_struct_as_root@@Base>:
   19c50:	tst	r0, #3
   19c54:	strd	r4, [sp, #-28]!	; 0xffffffe4
   19c58:	strd	r6, [sp, #8]
   19c5c:	movne	r0, #5
   19c60:	strd	r8, [sp, #16]
   19c64:	str	lr, [sp, #24]
   19c68:	sub	sp, sp, #12
   19c6c:	ldrh	r5, [sp, #40]	; 0x28
   19c70:	bne	19d0c <flatcc_verify_struct_as_root@@Base+0xbc>
   19c74:	cmn	r1, #9
   19c78:	movhi	r0, #6
   19c7c:	bhi	19d0c <flatcc_verify_struct_as_root@@Base+0xbc>
   19c80:	cmp	r1, #7
   19c84:	movls	r0, #1
   19c88:	bls	19d0c <flatcc_verify_struct_as_root@@Base+0xbc>
   19c8c:	cmp	r2, #0
   19c90:	mov	r7, r3
   19c94:	mov	r8, r2
   19c98:	mov	r6, r1
   19c9c:	mov	r4, r0
   19ca0:	beq	19cc8 <flatcc_verify_struct_as_root@@Base+0x78>
   19ca4:	mov	r2, #4
   19ca8:	mov	r1, r8
   19cac:	add	r0, sp, r2
   19cb0:	bl	12300 <strncpy@plt>
   19cb4:	ldr	r9, [r4, #4]
   19cb8:	ldr	r3, [sp, #4]
   19cbc:	cmp	r3, r9
   19cc0:	cmpne	r3, #0
   19cc4:	bne	19d34 <flatcc_verify_struct_as_root@@Base+0xe4>
   19cc8:	ldr	r2, [r4]
   19ccc:	cmp	r6, r2
   19cd0:	movcs	r0, #0
   19cd4:	movcc	r0, #1
   19cd8:	cmp	r2, #0
   19cdc:	moveq	r0, #1
   19ce0:	cmp	r0, #0
   19ce4:	bne	19d24 <flatcc_verify_struct_as_root@@Base+0xd4>
   19ce8:	adds	r3, r7, r2
   19cec:	bcs	19d5c <flatcc_verify_struct_as_root@@Base+0x10c>
   19cf0:	cmp	r6, r3
   19cf4:	bcc	19d2c <flatcc_verify_struct_as_root@@Base+0xdc>
   19cf8:	sub	r5, r5, #1
   19cfc:	tst	r5, r2
   19d00:	movne	r0, #11
   19d04:	bne	19d0c <flatcc_verify_struct_as_root@@Base+0xbc>
   19d08:	mov	r0, #0
   19d0c:	add	sp, sp, #12
   19d10:	ldrd	r4, [sp]
   19d14:	ldrd	r6, [sp, #8]
   19d18:	ldrd	r8, [sp, #16]
   19d1c:	add	sp, sp, #24
   19d20:	pop	{pc}		; (ldr pc, [sp], #4)
   19d24:	mov	r0, #18
   19d28:	b	19d0c <flatcc_verify_struct_as_root@@Base+0xbc>
   19d2c:	mov	r0, #9
   19d30:	b	19d0c <flatcc_verify_struct_as_root@@Base+0xbc>
   19d34:	mov	r1, r8
   19d38:	add	r0, sp, #4
   19d3c:	mov	r2, #4
   19d40:	bl	12300 <strncpy@plt>
   19d44:	ldr	r3, [sp, #4]
   19d48:	cmp	r9, r3
   19d4c:	cmpne	r3, #0
   19d50:	beq	19d08 <flatcc_verify_struct_as_root@@Base+0xb8>
   19d54:	mov	r0, #2
   19d58:	b	19d0c <flatcc_verify_struct_as_root@@Base+0xbc>
   19d5c:	mov	r0, #10
   19d60:	b	19d0c <flatcc_verify_struct_as_root@@Base+0xbc>

00019d64 <flatcc_verify_struct_as_typed_root@@Base>:
   19d64:	tst	r0, #3
   19d68:	push	{lr}		; (str lr, [sp, #-4]!)
   19d6c:	movne	r0, #5
   19d70:	ldrh	ip, [sp, #4]
   19d74:	bne	19dec <flatcc_verify_struct_as_typed_root@@Base+0x88>
   19d78:	cmn	r1, #9
   19d7c:	movhi	r0, #6
   19d80:	bhi	19dec <flatcc_verify_struct_as_typed_root@@Base+0x88>
   19d84:	cmp	r1, #7
   19d88:	movls	r0, #1
   19d8c:	bls	19dec <flatcc_verify_struct_as_typed_root@@Base+0x88>
   19d90:	cmp	r2, #0
   19d94:	beq	19da8 <flatcc_verify_struct_as_typed_root@@Base+0x44>
   19d98:	ldr	lr, [r0, #4]
   19d9c:	cmp	r2, lr
   19da0:	movne	r0, #2
   19da4:	bne	19dec <flatcc_verify_struct_as_typed_root@@Base+0x88>
   19da8:	ldr	r2, [r0]
   19dac:	cmp	r1, r2
   19db0:	movcs	r0, #0
   19db4:	movcc	r0, #1
   19db8:	cmp	r2, #0
   19dbc:	moveq	r0, #1
   19dc0:	cmp	r0, #0
   19dc4:	movne	r0, #18
   19dc8:	bne	19dec <flatcc_verify_struct_as_typed_root@@Base+0x88>
   19dcc:	adds	r3, r3, r2
   19dd0:	bcs	19df8 <flatcc_verify_struct_as_typed_root@@Base+0x94>
   19dd4:	cmp	r1, r3
   19dd8:	bcc	19df0 <flatcc_verify_struct_as_typed_root@@Base+0x8c>
   19ddc:	sub	ip, ip, #1
   19de0:	tst	ip, r2
   19de4:	moveq	r0, #0
   19de8:	movne	r0, #11
   19dec:	pop	{pc}		; (ldr pc, [sp], #4)
   19df0:	mov	r0, #9
   19df4:	b	19dec <flatcc_verify_struct_as_typed_root@@Base+0x88>
   19df8:	mov	r0, #10
   19dfc:	b	19dec <flatcc_verify_struct_as_typed_root@@Base+0x88>

00019e00 <flatcc_verify_table_as_root@@Base>:
   19e00:	tst	r0, #3
   19e04:	bne	19f34 <flatcc_verify_table_as_root@@Base+0x134>
   19e08:	cmn	r1, #9
   19e0c:	bhi	19f64 <flatcc_verify_table_as_root@@Base+0x164>
   19e10:	cmp	r1, #7
   19e14:	bls	19f10 <flatcc_verify_table_as_root@@Base+0x110>
   19e18:	cmp	r2, #0
   19e1c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19e20:	mov	r4, r2
   19e24:	mov	r5, r0
   19e28:	strd	r6, [sp, #8]
   19e2c:	mov	r7, r3
   19e30:	mov	r6, r1
   19e34:	str	r8, [sp, #16]
   19e38:	str	lr, [sp, #20]
   19e3c:	sub	sp, sp, #24
   19e40:	beq	19e68 <flatcc_verify_table_as_root@@Base+0x68>
   19e44:	mov	r2, #4
   19e48:	mov	r0, sp
   19e4c:	mov	r1, r4
   19e50:	bl	12300 <strncpy@plt>
   19e54:	ldr	r3, [sp]
   19e58:	ldr	r8, [r5, #4]
   19e5c:	cmp	r3, r8
   19e60:	cmpne	r3, #0
   19e64:	bne	19f3c <flatcc_verify_table_as_root@@Base+0x13c>
   19e68:	ldr	r2, [r5]
   19e6c:	mov	r3, #99	; 0x63
   19e70:	str	r3, [sp, #8]
   19e74:	cmp	r2, #0
   19e78:	beq	19f18 <flatcc_verify_table_as_root@@Base+0x118>
   19e7c:	add	r3, r2, #4
   19e80:	cmp	r6, r3
   19e84:	bcc	19f18 <flatcc_verify_table_as_root@@Base+0x118>
   19e88:	tst	r2, #3
   19e8c:	bne	19f18 <flatcc_verify_table_as_root@@Base+0x118>
   19e90:	ldr	r3, [r5, r2]
   19e94:	str	r2, [sp, #16]
   19e98:	subs	r3, r2, r3
   19e9c:	bmi	19f6c <flatcc_verify_table_as_root@@Base+0x16c>
   19ea0:	tst	r3, #1
   19ea4:	bne	19f6c <flatcc_verify_table_as_root@@Base+0x16c>
   19ea8:	add	r0, r3, #2
   19eac:	cmp	r6, r0
   19eb0:	movcc	r0, #27
   19eb4:	bcc	19f1c <flatcc_verify_table_as_root@@Base+0x11c>
   19eb8:	ldrh	r1, [r5, r3]
   19ebc:	add	ip, r5, r3
   19ec0:	add	r3, r1, r3
   19ec4:	strh	r1, [sp, #22]
   19ec8:	cmp	r6, r3
   19ecc:	bcc	19f74 <flatcc_verify_table_as_root@@Base+0x174>
   19ed0:	tst	r1, #1
   19ed4:	bne	19f74 <flatcc_verify_table_as_root@@Base+0x174>
   19ed8:	cmp	r1, #3
   19edc:	movls	r0, #28
   19ee0:	bls	19f1c <flatcc_verify_table_as_root@@Base+0x11c>
   19ee4:	ldrh	r3, [r5, r0]
   19ee8:	sub	r2, r6, r2
   19eec:	cmp	r2, r3
   19ef0:	strh	r3, [sp, #20]
   19ef4:	movcc	r0, #20
   19ef8:	bcc	19f1c <flatcc_verify_table_as_root@@Base+0x11c>
   19efc:	mov	r0, sp
   19f00:	stm	sp, {r5, r6}
   19f04:	str	ip, [sp, #12]
   19f08:	blx	r7
   19f0c:	b	19f1c <flatcc_verify_table_as_root@@Base+0x11c>
   19f10:	mov	r0, #1
   19f14:	bx	lr
   19f18:	mov	r0, #15
   19f1c:	add	sp, sp, #24
   19f20:	ldrd	r4, [sp]
   19f24:	ldrd	r6, [sp, #8]
   19f28:	ldr	r8, [sp, #16]
   19f2c:	add	sp, sp, #20
   19f30:	pop	{pc}		; (ldr pc, [sp], #4)
   19f34:	mov	r0, #5
   19f38:	bx	lr
   19f3c:	mov	r1, r4
   19f40:	mov	r0, sp
   19f44:	mov	r2, #4
   19f48:	bl	12300 <strncpy@plt>
   19f4c:	ldr	r3, [sp]
   19f50:	cmp	r8, r3
   19f54:	cmpne	r3, #0
   19f58:	moveq	r0, #0
   19f5c:	movne	r0, #2
   19f60:	b	19f1c <flatcc_verify_table_as_root@@Base+0x11c>
   19f64:	mov	r0, #6
   19f68:	bx	lr
   19f6c:	mov	r0, #29
   19f70:	b	19f1c <flatcc_verify_table_as_root@@Base+0x11c>
   19f74:	mov	r0, #30
   19f78:	b	19f1c <flatcc_verify_table_as_root@@Base+0x11c>

00019f7c <flatcc_verify_table_as_typed_root@@Base>:
   19f7c:	tst	r0, #3
   19f80:	bne	1a06c <flatcc_verify_table_as_typed_root@@Base+0xf0>
   19f84:	cmn	r1, #9
   19f88:	bhi	1a088 <flatcc_verify_table_as_typed_root@@Base+0x10c>
   19f8c:	cmp	r1, #7
   19f90:	bls	1a064 <flatcc_verify_table_as_typed_root@@Base+0xe8>
   19f94:	cmp	r2, #0
   19f98:	beq	19fa8 <flatcc_verify_table_as_typed_root@@Base+0x2c>
   19f9c:	ldr	ip, [r0, #4]
   19fa0:	cmp	r2, ip
   19fa4:	bne	1a090 <flatcc_verify_table_as_typed_root@@Base+0x114>
   19fa8:	ldr	r2, [r0]
   19fac:	mov	ip, #99	; 0x63
   19fb0:	strd	r4, [sp, #-12]!
   19fb4:	str	lr, [sp, #8]
   19fb8:	sub	sp, sp, #28
   19fbc:	str	ip, [sp, #8]
   19fc0:	cmp	r2, #0
   19fc4:	beq	1a074 <flatcc_verify_table_as_typed_root@@Base+0xf8>
   19fc8:	add	ip, r2, #4
   19fcc:	cmp	r1, ip
   19fd0:	bcc	1a074 <flatcc_verify_table_as_typed_root@@Base+0xf8>
   19fd4:	tst	r2, #3
   19fd8:	bne	1a074 <flatcc_verify_table_as_typed_root@@Base+0xf8>
   19fdc:	ldr	ip, [r0, r2]
   19fe0:	str	r2, [sp, #16]
   19fe4:	subs	ip, r2, ip
   19fe8:	bmi	1a098 <flatcc_verify_table_as_typed_root@@Base+0x11c>
   19fec:	tst	ip, #1
   19ff0:	bne	1a098 <flatcc_verify_table_as_typed_root@@Base+0x11c>
   19ff4:	add	r4, ip, #2
   19ff8:	cmp	r1, r4
   19ffc:	movcc	r0, #27
   1a000:	bcc	1a078 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1a004:	ldrh	lr, [r0, ip]
   1a008:	add	r5, r0, ip
   1a00c:	add	ip, lr, ip
   1a010:	strh	lr, [sp, #22]
   1a014:	cmp	r1, ip
   1a018:	bcc	1a0a0 <flatcc_verify_table_as_typed_root@@Base+0x124>
   1a01c:	tst	lr, #1
   1a020:	bne	1a0a0 <flatcc_verify_table_as_typed_root@@Base+0x124>
   1a024:	cmp	lr, #3
   1a028:	movls	r0, #28
   1a02c:	bls	1a078 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1a030:	ldrh	ip, [r0, r4]
   1a034:	sub	r2, r1, r2
   1a038:	cmp	r2, ip
   1a03c:	strh	ip, [sp, #20]
   1a040:	movcc	r0, #20
   1a044:	bcc	1a078 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1a048:	mov	r2, r0
   1a04c:	mov	r0, sp
   1a050:	str	r2, [sp]
   1a054:	str	r1, [sp, #4]
   1a058:	str	r5, [sp, #12]
   1a05c:	blx	r3
   1a060:	b	1a078 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1a064:	mov	r0, #1
   1a068:	bx	lr
   1a06c:	mov	r0, #5
   1a070:	bx	lr
   1a074:	mov	r0, #15
   1a078:	add	sp, sp, #28
   1a07c:	ldrd	r4, [sp]
   1a080:	add	sp, sp, #8
   1a084:	pop	{pc}		; (ldr pc, [sp], #4)
   1a088:	mov	r0, #6
   1a08c:	bx	lr
   1a090:	mov	r0, #2
   1a094:	bx	lr
   1a098:	mov	r0, #29
   1a09c:	b	1a078 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1a0a0:	mov	r0, #30
   1a0a4:	b	1a078 <flatcc_verify_table_as_typed_root@@Base+0xfc>

0001a0a8 <flatcc_verify_struct_as_nested_root@@Base>:
   1a0a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a0ac:	add	ip, r1, #2
   1a0b0:	lsl	ip, ip, #1
   1a0b4:	strd	r6, [sp, #8]
   1a0b8:	str	lr, [sp, #20]
   1a0bc:	ldrh	lr, [r0, #22]
   1a0c0:	uxth	ip, ip
   1a0c4:	str	r8, [sp, #16]
   1a0c8:	sub	sp, sp, #8
   1a0cc:	ldrh	r4, [sp, #36]	; 0x24
   1a0d0:	cmp	lr, ip
   1a0d4:	bls	1a224 <flatcc_verify_struct_as_nested_root@@Base+0x17c>
   1a0d8:	ldr	r1, [r0, #12]
   1a0dc:	ldrh	ip, [r1, ip]
   1a0e0:	cmp	ip, #0
   1a0e4:	beq	1a224 <flatcc_verify_struct_as_nested_root@@Base+0x17c>
   1a0e8:	ldrh	r2, [r0, #20]
   1a0ec:	add	r1, ip, #4
   1a0f0:	cmp	r1, r2
   1a0f4:	movhi	r0, #13
   1a0f8:	bhi	1a204 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   1a0fc:	ldr	r2, [r0, #16]
   1a100:	add	r2, ip, r2
   1a104:	tst	r2, #3
   1a108:	movne	r0, #12
   1a10c:	bne	1a204 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   1a110:	cmp	r2, #0
   1a114:	ldr	ip, [r0]
   1a118:	beq	1a15c <flatcc_verify_struct_as_nested_root@@Base+0xb4>
   1a11c:	ldr	lr, [ip, r2]
   1a120:	add	lr, r2, lr
   1a124:	cmp	r2, lr
   1a128:	bcs	1a21c <flatcc_verify_struct_as_nested_root@@Base+0x174>
   1a12c:	ldr	r1, [r0, #4]
   1a130:	add	r0, lr, #4
   1a134:	cmp	r1, r0
   1a138:	bcc	1a21c <flatcc_verify_struct_as_nested_root@@Base+0x174>
   1a13c:	tst	r0, #3
   1a140:	bne	1a21c <flatcc_verify_struct_as_nested_root@@Base+0x174>
   1a144:	ldr	lr, [ip, lr]
   1a148:	sub	r1, r1, r0
   1a14c:	mul	r0, lr, r4
   1a150:	cmp	r1, r0
   1a154:	movcc	r0, #26
   1a158:	bcc	1a204 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   1a15c:	adds	r1, ip, r2
   1a160:	beq	1a22c <flatcc_verify_struct_as_nested_root@@Base+0x184>
   1a164:	ldr	r2, [ip, r2]
   1a168:	add	r7, r1, r2
   1a16c:	tst	r7, #3
   1a170:	movne	r0, #5
   1a174:	bne	1a204 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   1a178:	ldr	r6, [r1, r2]
   1a17c:	cmn	r6, #9
   1a180:	movhi	r0, #6
   1a184:	bhi	1a204 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   1a188:	cmp	r6, #7
   1a18c:	movls	r0, #1
   1a190:	bls	1a204 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   1a194:	cmp	r3, #0
   1a198:	beq	1a1c4 <flatcc_verify_struct_as_nested_root@@Base+0x11c>
   1a19c:	mov	r2, #4
   1a1a0:	mov	r1, r3
   1a1a4:	add	r0, sp, r2
   1a1a8:	mov	r5, r3
   1a1ac:	bl	12300 <strncpy@plt>
   1a1b0:	ldr	r3, [sp, #4]
   1a1b4:	ldr	r8, [r7, #8]
   1a1b8:	cmp	r3, r8
   1a1bc:	cmpne	r3, #0
   1a1c0:	bne	1a24c <flatcc_verify_struct_as_nested_root@@Base+0x1a4>
   1a1c4:	ldr	r2, [r7, #4]
   1a1c8:	clz	r3, r2
   1a1cc:	lsr	r3, r3, #5
   1a1d0:	cmp	r6, r2
   1a1d4:	orrcc	r3, r3, #1
   1a1d8:	cmp	r3, #0
   1a1dc:	bne	1a23c <flatcc_verify_struct_as_nested_root@@Base+0x194>
   1a1e0:	ldr	r3, [sp, #32]
   1a1e4:	adds	r3, r3, r2
   1a1e8:	bcs	1a274 <flatcc_verify_struct_as_nested_root@@Base+0x1cc>
   1a1ec:	cmp	r6, r3
   1a1f0:	bcc	1a244 <flatcc_verify_struct_as_nested_root@@Base+0x19c>
   1a1f4:	sub	r4, r4, #1
   1a1f8:	tst	r4, r2
   1a1fc:	movne	r0, #11
   1a200:	beq	1a22c <flatcc_verify_struct_as_nested_root@@Base+0x184>
   1a204:	add	sp, sp, #8
   1a208:	ldrd	r4, [sp]
   1a20c:	ldrd	r6, [sp, #8]
   1a210:	ldr	r8, [sp, #16]
   1a214:	add	sp, sp, #20
   1a218:	pop	{pc}		; (ldr pc, [sp], #4)
   1a21c:	mov	r0, #16
   1a220:	b	1a204 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   1a224:	cmp	r2, #0
   1a228:	bne	1a234 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   1a22c:	mov	r0, #0
   1a230:	b	1a204 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   1a234:	mov	r0, #4
   1a238:	b	1a204 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   1a23c:	mov	r0, #18
   1a240:	b	1a204 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   1a244:	mov	r0, #9
   1a248:	b	1a204 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   1a24c:	mov	r1, r5
   1a250:	add	r0, sp, #4
   1a254:	mov	r2, #4
   1a258:	bl	12300 <strncpy@plt>
   1a25c:	ldr	r3, [sp, #4]
   1a260:	cmp	r8, r3
   1a264:	cmpne	r3, #0
   1a268:	beq	1a22c <flatcc_verify_struct_as_nested_root@@Base+0x184>
   1a26c:	mov	r0, #2
   1a270:	b	1a204 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   1a274:	mov	r0, #10
   1a278:	b	1a204 <flatcc_verify_struct_as_nested_root@@Base+0x15c>

0001a27c <flatcc_verify_table_as_nested_root@@Base>:
   1a27c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1a280:	add	ip, r1, #2
   1a284:	lsl	ip, ip, #1
   1a288:	strd	r6, [sp, #8]
   1a28c:	str	lr, [sp, #24]
   1a290:	ldrh	lr, [r0, #22]
   1a294:	uxth	ip, ip
   1a298:	strd	r8, [sp, #16]
   1a29c:	sub	sp, sp, #28
   1a2a0:	ldrh	r4, [sp, #56]	; 0x38
   1a2a4:	cmp	lr, ip
   1a2a8:	bls	1a474 <flatcc_verify_table_as_nested_root@@Base+0x1f8>
   1a2ac:	ldr	r1, [r0, #12]
   1a2b0:	ldrh	ip, [r1, ip]
   1a2b4:	cmp	ip, #0
   1a2b8:	beq	1a474 <flatcc_verify_table_as_nested_root@@Base+0x1f8>
   1a2bc:	ldrh	r2, [r0, #20]
   1a2c0:	add	r1, ip, #4
   1a2c4:	cmp	r1, r2
   1a2c8:	movhi	r0, #13
   1a2cc:	bhi	1a454 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   1a2d0:	ldr	r2, [r0, #16]
   1a2d4:	add	r2, ip, r2
   1a2d8:	tst	r2, #3
   1a2dc:	movne	r0, #12
   1a2e0:	bne	1a454 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   1a2e4:	cmp	r2, #0
   1a2e8:	ldr	ip, [r0]
   1a2ec:	beq	1a330 <flatcc_verify_table_as_nested_root@@Base+0xb4>
   1a2f0:	ldr	lr, [ip, r2]
   1a2f4:	add	lr, r2, lr
   1a2f8:	cmp	r2, lr
   1a2fc:	bcs	1a46c <flatcc_verify_table_as_nested_root@@Base+0x1f0>
   1a300:	ldr	r1, [r0, #4]
   1a304:	add	r5, lr, #4
   1a308:	cmp	r1, r5
   1a30c:	bcc	1a46c <flatcc_verify_table_as_nested_root@@Base+0x1f0>
   1a310:	tst	r5, #3
   1a314:	bne	1a46c <flatcc_verify_table_as_nested_root@@Base+0x1f0>
   1a318:	ldr	lr, [ip, lr]
   1a31c:	sub	r1, r1, r5
   1a320:	mul	r4, lr, r4
   1a324:	cmp	r1, r4
   1a328:	movcc	r0, #26
   1a32c:	bcc	1a454 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   1a330:	adds	r1, ip, r2
   1a334:	beq	1a47c <flatcc_verify_table_as_nested_root@@Base+0x200>
   1a338:	ldr	r2, [ip, r2]
   1a33c:	add	r6, r1, r2
   1a340:	add	r7, r6, #4
   1a344:	tst	r7, #3
   1a348:	movne	r0, #5
   1a34c:	bne	1a454 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   1a350:	ldr	r8, [r1, r2]
   1a354:	cmn	r8, #9
   1a358:	movhi	r0, #6
   1a35c:	bhi	1a454 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   1a360:	cmp	r8, #7
   1a364:	movls	r0, #1
   1a368:	bls	1a454 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   1a36c:	cmp	r3, #0
   1a370:	mov	r5, r3
   1a374:	mov	r4, r0
   1a378:	beq	1a3a0 <flatcc_verify_table_as_nested_root@@Base+0x124>
   1a37c:	mov	r1, r3
   1a380:	mov	r2, #4
   1a384:	mov	r0, sp
   1a388:	bl	12300 <strncpy@plt>
   1a38c:	ldr	r3, [sp]
   1a390:	ldr	r9, [r6, #8]
   1a394:	cmp	r3, r9
   1a398:	cmpne	r3, #0
   1a39c:	bne	1a49c <flatcc_verify_table_as_nested_root@@Base+0x220>
   1a3a0:	ldr	r3, [r4, #8]
   1a3a4:	ldr	r2, [r6, #4]
   1a3a8:	sub	r3, r3, #1
   1a3ac:	cmp	r3, #0
   1a3b0:	str	r3, [sp, #8]
   1a3b4:	beq	1a494 <flatcc_verify_table_as_nested_root@@Base+0x218>
   1a3b8:	cmp	r2, #0
   1a3bc:	beq	1a484 <flatcc_verify_table_as_nested_root@@Base+0x208>
   1a3c0:	add	r3, r2, #4
   1a3c4:	cmp	r8, r3
   1a3c8:	bcc	1a484 <flatcc_verify_table_as_nested_root@@Base+0x208>
   1a3cc:	tst	r2, #3
   1a3d0:	bne	1a484 <flatcc_verify_table_as_nested_root@@Base+0x208>
   1a3d4:	str	r2, [sp, #16]
   1a3d8:	ldr	r3, [r7, r2]
   1a3dc:	subs	r3, r2, r3
   1a3e0:	bmi	1a4c4 <flatcc_verify_table_as_nested_root@@Base+0x248>
   1a3e4:	tst	r3, #1
   1a3e8:	bne	1a4c4 <flatcc_verify_table_as_nested_root@@Base+0x248>
   1a3ec:	add	r0, r3, #2
   1a3f0:	cmp	r8, r0
   1a3f4:	movcc	r0, #27
   1a3f8:	bcc	1a454 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   1a3fc:	ldrh	r1, [r7, r3]
   1a400:	add	ip, r7, r3
   1a404:	add	r3, r1, r3
   1a408:	strh	r1, [sp, #22]
   1a40c:	cmp	r8, r3
   1a410:	bcc	1a4cc <flatcc_verify_table_as_nested_root@@Base+0x250>
   1a414:	tst	r1, #1
   1a418:	bne	1a4cc <flatcc_verify_table_as_nested_root@@Base+0x250>
   1a41c:	cmp	r1, #3
   1a420:	movls	r0, #28
   1a424:	bls	1a454 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   1a428:	ldrh	r3, [r7, r0]
   1a42c:	sub	r2, r8, r2
   1a430:	cmp	r2, r3
   1a434:	strh	r3, [sp, #20]
   1a438:	movcc	r0, #20
   1a43c:	bcc	1a454 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   1a440:	mov	r0, sp
   1a444:	ldr	r3, [sp, #60]	; 0x3c
   1a448:	stm	sp, {r7, r8}
   1a44c:	str	ip, [sp, #12]
   1a450:	blx	r3
   1a454:	add	sp, sp, #28
   1a458:	ldrd	r4, [sp]
   1a45c:	ldrd	r6, [sp, #8]
   1a460:	ldrd	r8, [sp, #16]
   1a464:	add	sp, sp, #24
   1a468:	pop	{pc}		; (ldr pc, [sp], #4)
   1a46c:	mov	r0, #16
   1a470:	b	1a454 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   1a474:	cmp	r2, #0
   1a478:	bne	1a48c <flatcc_verify_table_as_nested_root@@Base+0x210>
   1a47c:	mov	r0, #0
   1a480:	b	1a454 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   1a484:	mov	r0, #15
   1a488:	b	1a454 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   1a48c:	mov	r0, #4
   1a490:	b	1a454 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   1a494:	mov	r0, #3
   1a498:	b	1a454 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   1a49c:	mov	r1, r5
   1a4a0:	mov	r0, sp
   1a4a4:	mov	r2, #4
   1a4a8:	bl	12300 <strncpy@plt>
   1a4ac:	ldr	r3, [sp]
   1a4b0:	cmp	r9, r3
   1a4b4:	cmpne	r3, #0
   1a4b8:	movne	r0, #2
   1a4bc:	beq	1a47c <flatcc_verify_table_as_nested_root@@Base+0x200>
   1a4c0:	b	1a454 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   1a4c4:	mov	r0, #29
   1a4c8:	b	1a454 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   1a4cc:	mov	r0, #30
   1a4d0:	b	1a454 <flatcc_verify_table_as_nested_root@@Base+0x1d8>

0001a4d4 <flatcc_verify_union_field@@Base>:
   1a4d4:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a4d8:	add	r1, r1, #1
   1a4dc:	ldr	r4, [r0, #12]
   1a4e0:	lsl	r1, r1, #1
   1a4e4:	strd	r6, [sp, #8]
   1a4e8:	str	lr, [sp, #16]
   1a4ec:	uxth	r1, r1
   1a4f0:	sub	sp, sp, #28
   1a4f4:	ldrh	lr, [r0, #22]
   1a4f8:	cmp	r1, lr
   1a4fc:	bcs	1a5a8 <flatcc_verify_union_field@@Base+0xd4>
   1a500:	ldrh	ip, [r4, r1]
   1a504:	cmp	ip, #0
   1a508:	beq	1a5a8 <flatcc_verify_union_field@@Base+0xd4>
   1a50c:	ldrh	r5, [r0, #20]
   1a510:	add	r6, ip, #1
   1a514:	cmp	r6, r5
   1a518:	bhi	1a5f8 <flatcc_verify_union_field@@Base+0x124>
   1a51c:	ldr	r6, [r0]
   1a520:	add	r1, r1, #2
   1a524:	uxth	r1, r1
   1a528:	ldr	r7, [r0, #16]
   1a52c:	cmp	lr, r1
   1a530:	add	lr, ip, r7
   1a534:	ldrb	ip, [r6, lr]
   1a538:	bls	1a600 <flatcc_verify_union_field@@Base+0x12c>
   1a53c:	cmp	ip, #0
   1a540:	ldrh	r1, [r4, r1]
   1a544:	beq	1a5e8 <flatcc_verify_union_field@@Base+0x114>
   1a548:	cmp	r1, #0
   1a54c:	beq	1a610 <flatcc_verify_union_field@@Base+0x13c>
   1a550:	add	r2, r1, #4
   1a554:	cmp	r5, r2
   1a558:	bcc	1a5f8 <flatcc_verify_union_field@@Base+0x124>
   1a55c:	add	r1, r1, r7
   1a560:	tst	r1, #3
   1a564:	movne	r0, #12
   1a568:	bne	1a5d4 <flatcc_verify_union_field@@Base+0x100>
   1a56c:	cmp	r1, #0
   1a570:	beq	1a620 <flatcc_verify_union_field@@Base+0x14c>
   1a574:	mov	r2, r0
   1a578:	str	r1, [sp, #16]
   1a57c:	mov	r0, sp
   1a580:	ldr	ip, [r2, #4]
   1a584:	ldr	r2, [r2, #8]
   1a588:	stm	sp, {r6, ip}
   1a58c:	str	r2, [sp, #8]
   1a590:	ldr	r2, [r6, r1]
   1a594:	str	r2, [sp, #20]
   1a598:	ldrb	r2, [r6, lr]
   1a59c:	strb	r2, [sp, #12]
   1a5a0:	blx	r3
   1a5a4:	b	1a5d4 <flatcc_verify_union_field@@Base+0x100>
   1a5a8:	add	r1, r1, #2
   1a5ac:	uxth	r1, r1
   1a5b0:	cmp	lr, r1
   1a5b4:	bls	1a5c8 <flatcc_verify_union_field@@Base+0xf4>
   1a5b8:	ldrh	r3, [r4, r1]
   1a5bc:	cmp	r3, #0
   1a5c0:	movne	r0, #23
   1a5c4:	bne	1a5d4 <flatcc_verify_union_field@@Base+0x100>
   1a5c8:	cmp	r2, #0
   1a5cc:	moveq	r0, #0
   1a5d0:	movne	r0, #21
   1a5d4:	add	sp, sp, #28
   1a5d8:	ldrd	r4, [sp]
   1a5dc:	ldrd	r6, [sp, #8]
   1a5e0:	add	sp, sp, #16
   1a5e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a5e8:	cmp	r1, #0
   1a5ec:	movne	r0, #24
   1a5f0:	moveq	r0, #0
   1a5f4:	b	1a5d4 <flatcc_verify_union_field@@Base+0x100>
   1a5f8:	mov	r0, #13
   1a5fc:	b	1a5d4 <flatcc_verify_union_field@@Base+0x100>
   1a600:	cmp	ip, #0
   1a604:	bne	1a610 <flatcc_verify_union_field@@Base+0x13c>
   1a608:	mov	r0, ip
   1a60c:	b	1a5d4 <flatcc_verify_union_field@@Base+0x100>
   1a610:	cmp	r2, #0
   1a614:	moveq	r0, #0
   1a618:	movne	r0, #4
   1a61c:	b	1a5d4 <flatcc_verify_union_field@@Base+0x100>
   1a620:	mov	r0, r1
   1a624:	b	1a5d4 <flatcc_verify_union_field@@Base+0x100>

0001a628 <flatcc_verify_union_vector_field@@Base>:
   1a628:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a62c:	add	r1, r1, #1
   1a630:	ldrh	r4, [r0, #22]
   1a634:	lsl	r1, r1, #1
   1a638:	uxth	r1, r1
   1a63c:	ldr	r5, [r0, #12]
   1a640:	strd	r6, [sp, #8]
   1a644:	strd	r8, [sp, #16]
   1a648:	cmp	r1, r4
   1a64c:	strd	sl, [sp, #24]
   1a650:	str	lr, [sp, #32]
   1a654:	sub	sp, sp, #28
   1a658:	bcs	1a760 <flatcc_verify_union_vector_field@@Base+0x138>
   1a65c:	ldrh	ip, [r5, r1]
   1a660:	cmp	ip, #0
   1a664:	beq	1a760 <flatcc_verify_union_vector_field@@Base+0x138>
   1a668:	ldrh	r7, [r0, #20]
   1a66c:	add	lr, ip, #4
   1a670:	cmp	lr, r7
   1a674:	bhi	1a79c <flatcc_verify_union_vector_field@@Base+0x174>
   1a678:	ldr	r8, [r0, #16]
   1a67c:	add	ip, ip, r8
   1a680:	tst	ip, #3
   1a684:	bne	1a7c8 <flatcc_verify_union_vector_field@@Base+0x1a0>
   1a688:	ldr	r6, [r0]
   1a68c:	cmp	ip, #0
   1a690:	add	lr, r6, ip
   1a694:	beq	1a6d8 <flatcc_verify_union_vector_field@@Base+0xb0>
   1a698:	ldr	r9, [r6, ip]
   1a69c:	add	sl, ip, r9
   1a6a0:	cmp	ip, sl
   1a6a4:	bcs	1a740 <flatcc_verify_union_vector_field@@Base+0x118>
   1a6a8:	ldr	ip, [r0, #4]
   1a6ac:	add	fp, sl, #4
   1a6b0:	cmp	ip, fp
   1a6b4:	bcc	1a740 <flatcc_verify_union_vector_field@@Base+0x118>
   1a6b8:	tst	fp, #3
   1a6bc:	bne	1a740 <flatcc_verify_union_vector_field@@Base+0x118>
   1a6c0:	ldr	sl, [r6, sl]
   1a6c4:	sub	ip, ip, fp
   1a6c8:	cmp	sl, ip
   1a6cc:	bls	1a6e4 <flatcc_verify_union_vector_field@@Base+0xbc>
   1a6d0:	mov	r0, #26
   1a6d4:	b	1a744 <flatcc_verify_union_vector_field@@Base+0x11c>
   1a6d8:	cmp	lr, #0
   1a6dc:	beq	1a7c0 <flatcc_verify_union_vector_field@@Base+0x198>
   1a6e0:	ldr	r9, [r6]
   1a6e4:	add	r1, r1, #2
   1a6e8:	uxth	r1, r1
   1a6ec:	cmp	r4, r1
   1a6f0:	bls	1a77c <flatcc_verify_union_vector_field@@Base+0x154>
   1a6f4:	ldrh	r1, [r5, r1]
   1a6f8:	cmp	r1, #0
   1a6fc:	beq	1a77c <flatcc_verify_union_vector_field@@Base+0x154>
   1a700:	add	r2, r1, #4
   1a704:	cmp	r2, r7
   1a708:	bhi	1a79c <flatcc_verify_union_vector_field@@Base+0x174>
   1a70c:	add	r8, r1, r8
   1a710:	tst	r8, #3
   1a714:	bne	1a7c8 <flatcc_verify_union_vector_field@@Base+0x1a0>
   1a718:	cmp	r8, #0
   1a71c:	beq	1a7c0 <flatcc_verify_union_vector_field@@Base+0x198>
   1a720:	ldr	r1, [r0, #8]
   1a724:	ldr	r2, [r6, r8]
   1a728:	cmp	r1, #0
   1a72c:	movle	r0, #3
   1a730:	ble	1a744 <flatcc_verify_union_vector_field@@Base+0x11c>
   1a734:	add	r2, r8, r2
   1a738:	cmp	r8, r2
   1a73c:	bcc	1a7d0 <flatcc_verify_union_vector_field@@Base+0x1a8>
   1a740:	mov	r0, #16
   1a744:	add	sp, sp, #28
   1a748:	ldrd	r4, [sp]
   1a74c:	ldrd	r6, [sp, #8]
   1a750:	ldrd	r8, [sp, #16]
   1a754:	ldrd	sl, [sp, #24]
   1a758:	add	sp, sp, #32
   1a75c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a760:	add	r1, r1, #2
   1a764:	uxth	r1, r1
   1a768:	cmp	r4, r1
   1a76c:	bls	1a78c <flatcc_verify_union_vector_field@@Base+0x164>
   1a770:	ldrh	r3, [r5, r1]
   1a774:	cmp	r3, #0
   1a778:	beq	1a78c <flatcc_verify_union_vector_field@@Base+0x164>
   1a77c:	cmp	r2, #0
   1a780:	moveq	r0, #0
   1a784:	movne	r0, #4
   1a788:	b	1a744 <flatcc_verify_union_vector_field@@Base+0x11c>
   1a78c:	cmp	r2, #0
   1a790:	moveq	r0, #0
   1a794:	movne	r0, #22
   1a798:	b	1a744 <flatcc_verify_union_vector_field@@Base+0x11c>
   1a79c:	mov	r0, #13
   1a7a0:	b	1a744 <flatcc_verify_union_vector_field@@Base+0x11c>
   1a7a4:	ldr	r3, [r6, r2]
   1a7a8:	cmn	r3, #-1073741823	; 0xc0000001
   1a7ac:	movhi	r0, #25
   1a7b0:	bhi	1a744 <flatcc_verify_union_vector_field@@Base+0x11c>
   1a7b4:	sub	r0, r4, r0
   1a7b8:	cmp	r0, r3, lsl #2
   1a7bc:	bcc	1a6d0 <flatcc_verify_union_vector_field@@Base+0xa8>
   1a7c0:	mov	r0, #0
   1a7c4:	b	1a744 <flatcc_verify_union_vector_field@@Base+0x11c>
   1a7c8:	mov	r0, #12
   1a7cc:	b	1a744 <flatcc_verify_union_vector_field@@Base+0x11c>
   1a7d0:	ldr	r4, [r0, #4]
   1a7d4:	add	r0, r2, #4
   1a7d8:	cmp	r4, r0
   1a7dc:	bcc	1a740 <flatcc_verify_union_vector_field@@Base+0x118>
   1a7e0:	tst	r0, #3
   1a7e4:	bne	1a740 <flatcc_verify_union_vector_field@@Base+0x118>
   1a7e8:	ldr	ip, [r6, r2]
   1a7ec:	add	r5, r6, r2
   1a7f0:	cmn	ip, #-1073741823	; 0xc0000001
   1a7f4:	bhi	1a7a4 <flatcc_verify_union_vector_field@@Base+0x17c>
   1a7f8:	sub	r7, r4, r0
   1a7fc:	cmp	r7, ip, lsl #2
   1a800:	bcc	1a7a4 <flatcc_verify_union_vector_field@@Base+0x17c>
   1a804:	ldr	r2, [lr, r9]
   1a808:	add	r0, lr, r9
   1a80c:	cmp	r2, ip
   1a810:	bne	1a89c <flatcc_verify_union_vector_field@@Base+0x274>
   1a814:	sub	r1, r1, #1
   1a818:	cmp	ip, #0
   1a81c:	str	r6, [sp]
   1a820:	str	r4, [sp, #4]
   1a824:	str	r1, [sp, #8]
   1a828:	beq	1a7c0 <flatcc_verify_union_vector_field@@Base+0x198>
   1a82c:	add	ip, ip, #4
   1a830:	mov	r7, r3
   1a834:	add	r8, ip, r0
   1a838:	add	r4, r0, #4
   1a83c:	rsb	r6, r6, #4
   1a840:	b	1a854 <flatcc_verify_union_vector_field@@Base+0x22c>
   1a844:	cmp	r2, #0
   1a848:	bne	1a8a4 <flatcc_verify_union_vector_field@@Base+0x27c>
   1a84c:	cmp	r8, r4
   1a850:	beq	1a7c0 <flatcc_verify_union_vector_field@@Base+0x198>
   1a854:	add	r1, r6, r5
   1a858:	ldr	r3, [r5, #4]!
   1a85c:	mov	r0, sp
   1a860:	add	r4, r4, #1
   1a864:	ldrb	r2, [r4, #-1]
   1a868:	cmp	r3, #0
   1a86c:	beq	1a844 <flatcc_verify_union_vector_field@@Base+0x21c>
   1a870:	cmp	r2, #0
   1a874:	beq	1a8ac <flatcc_verify_union_vector_field@@Base+0x284>
   1a878:	strb	r2, [sp, #12]
   1a87c:	str	r1, [sp, #16]
   1a880:	str	r3, [sp, #20]
   1a884:	blx	r7
   1a888:	cmp	r0, #0
   1a88c:	beq	1a84c <flatcc_verify_union_vector_field@@Base+0x224>
   1a890:	mov	r0, sp
   1a894:	blx	r7
   1a898:	b	1a744 <flatcc_verify_union_vector_field@@Base+0x11c>
   1a89c:	mov	r0, #34	; 0x22
   1a8a0:	b	1a744 <flatcc_verify_union_vector_field@@Base+0x11c>
   1a8a4:	mov	r0, #32
   1a8a8:	b	1a744 <flatcc_verify_union_vector_field@@Base+0x11c>
   1a8ac:	mov	r0, #33	; 0x21
   1a8b0:	b	1a744 <flatcc_verify_union_vector_field@@Base+0x11c>

0001a8b4 <__libc_csu_init@@Base>:
   1a8b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a8b8:	mov	r7, r0
   1a8bc:	ldr	r6, [pc, #72]	; 1a90c <__libc_csu_init@@Base+0x58>
   1a8c0:	ldr	r5, [pc, #72]	; 1a910 <__libc_csu_init@@Base+0x5c>
   1a8c4:	add	r6, pc, r6
   1a8c8:	add	r5, pc, r5
   1a8cc:	sub	r6, r6, r5
   1a8d0:	mov	r8, r1
   1a8d4:	mov	r9, r2
   1a8d8:	bl	12268 <free@plt-0x20>
   1a8dc:	asrs	r6, r6, #2
   1a8e0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a8e4:	mov	r4, #0
   1a8e8:	add	r4, r4, #1
   1a8ec:	ldr	r3, [r5], #4
   1a8f0:	mov	r2, r9
   1a8f4:	mov	r1, r8
   1a8f8:	mov	r0, r7
   1a8fc:	blx	r3
   1a900:	cmp	r6, r4
   1a904:	bne	1a8e8 <__libc_csu_init@@Base+0x34>
   1a908:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a90c:	andeq	r1, r1, r8, asr #12
   1a910:	andeq	r1, r1, r0, asr #12

0001a914 <__libc_csu_fini@@Base>:
   1a914:	bx	lr

Disassembly of section .fini:

0001a918 <.fini>:
   1a918:	push	{r3, lr}
   1a91c:	pop	{r3, pc}
