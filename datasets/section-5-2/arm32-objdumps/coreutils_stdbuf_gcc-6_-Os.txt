
../repos/coreutils/src/stdbuf:     file format elf32-littlearm


Disassembly of section .init:

00010d18 <.init>:
   10d18:	push	{r3, lr}
   10d1c:	bl	1167c <__assert_fail@plt+0x6a4>
   10d20:	pop	{r3, pc}

Disassembly of section .plt:

00010d24 <calloc@plt-0x14>:
   10d24:	push	{lr}		; (str lr, [sp, #-4]!)
   10d28:	ldr	lr, [pc, #4]	; 10d34 <calloc@plt-0x4>
   10d2c:	add	lr, pc, lr
   10d30:	ldr	pc, [lr, #8]!
   10d34:	andeq	r5, r1, ip, asr #5

00010d38 <calloc@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #86016	; 0x15000
   10d40:	ldr	pc, [ip, #716]!	; 0x2cc

00010d44 <fputs_unlocked@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #86016	; 0x15000
   10d4c:	ldr	pc, [ip, #708]!	; 0x2c4

00010d50 <raise@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #86016	; 0x15000
   10d58:	ldr	pc, [ip, #700]!	; 0x2bc

00010d5c <strcmp@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #86016	; 0x15000
   10d64:	ldr	pc, [ip, #692]!	; 0x2b4

00010d68 <fflush@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #86016	; 0x15000
   10d70:	ldr	pc, [ip, #684]!	; 0x2ac

00010d74 <free@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #86016	; 0x15000
   10d7c:	ldr	pc, [ip, #676]!	; 0x2a4

00010d80 <_exit@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #86016	; 0x15000
   10d88:	ldr	pc, [ip, #668]!	; 0x29c

00010d8c <memcpy@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #86016	; 0x15000
   10d94:	ldr	pc, [ip, #660]!	; 0x294

00010d98 <execvp@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #86016	; 0x15000
   10da0:	ldr	pc, [ip, #652]!	; 0x28c

00010da4 <mbsinit@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #86016	; 0x15000
   10dac:	ldr	pc, [ip, #644]!	; 0x284

00010db0 <memcmp@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #86016	; 0x15000
   10db8:	ldr	pc, [ip, #636]!	; 0x27c

00010dbc <fputc_unlocked@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #86016	; 0x15000
   10dc4:	ldr	pc, [ip, #628]!	; 0x274

00010dc8 <dcgettext@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #86016	; 0x15000
   10dd0:	ldr	pc, [ip, #620]!	; 0x26c

00010dd4 <realloc@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #86016	; 0x15000
   10ddc:	ldr	pc, [ip, #612]!	; 0x264

00010de0 <textdomain@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #86016	; 0x15000
   10de8:	ldr	pc, [ip, #604]!	; 0x25c

00010dec <iswprint@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #596]!	; 0x254

00010df8 <readlink@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #588]!	; 0x24c

00010e04 <lseek64@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #580]!	; 0x244

00010e10 <__ctype_get_mb_cur_max@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #86016	; 0x15000
   10e18:	ldr	pc, [ip, #572]!	; 0x23c

00010e1c <__fpending@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #86016	; 0x15000
   10e24:	ldr	pc, [ip, #564]!	; 0x234

00010e28 <ferror_unlocked@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #86016	; 0x15000
   10e30:	ldr	pc, [ip, #556]!	; 0x22c

00010e34 <mbrtowc@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #86016	; 0x15000
   10e3c:	ldr	pc, [ip, #548]!	; 0x224

00010e40 <error@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #540]!	; 0x21c

00010e4c <__asprintf_chk@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #532]!	; 0x214

00010e58 <getenv@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #86016	; 0x15000
   10e60:	ldr	pc, [ip, #524]!	; 0x20c

00010e64 <malloc@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #86016	; 0x15000
   10e6c:	ldr	pc, [ip, #516]!	; 0x204

00010e70 <__libc_start_main@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #86016	; 0x15000
   10e78:	ldr	pc, [ip, #508]!	; 0x1fc

00010e7c <__freading@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #86016	; 0x15000
   10e84:	ldr	pc, [ip, #500]!	; 0x1f4

00010e88 <__gmon_start__@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #86016	; 0x15000
   10e90:	ldr	pc, [ip, #492]!	; 0x1ec

00010e94 <mempcpy@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #86016	; 0x15000
   10e9c:	ldr	pc, [ip, #484]!	; 0x1e4

00010ea0 <getopt_long@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #86016	; 0x15000
   10ea8:	ldr	pc, [ip, #476]!	; 0x1dc

00010eac <__ctype_b_loc@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #86016	; 0x15000
   10eb4:	ldr	pc, [ip, #468]!	; 0x1d4

00010eb8 <exit@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #86016	; 0x15000
   10ec0:	ldr	pc, [ip, #460]!	; 0x1cc

00010ec4 <strlen@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #452]!	; 0x1c4

00010ed0 <strchr@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #86016	; 0x15000
   10ed8:	ldr	pc, [ip, #444]!	; 0x1bc

00010edc <__errno_location@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #86016	; 0x15000
   10ee4:	ldr	pc, [ip, #436]!	; 0x1b4

00010ee8 <__cxa_atexit@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #86016	; 0x15000
   10ef0:	ldr	pc, [ip, #428]!	; 0x1ac

00010ef4 <memset@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #86016	; 0x15000
   10efc:	ldr	pc, [ip, #420]!	; 0x1a4

00010f00 <__printf_chk@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #86016	; 0x15000
   10f08:	ldr	pc, [ip, #412]!	; 0x19c

00010f0c <fileno@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #86016	; 0x15000
   10f14:	ldr	pc, [ip, #404]!	; 0x194

00010f18 <strtoumax@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #86016	; 0x15000
   10f20:	ldr	pc, [ip, #396]!	; 0x18c

00010f24 <__fprintf_chk@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #86016	; 0x15000
   10f2c:	ldr	pc, [ip, #388]!	; 0x184

00010f30 <access@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #86016	; 0x15000
   10f38:	ldr	pc, [ip, #380]!	; 0x17c

00010f3c <fclose@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #86016	; 0x15000
   10f44:	ldr	pc, [ip, #372]!	; 0x174

00010f48 <fseeko64@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #86016	; 0x15000
   10f50:	ldr	pc, [ip, #364]!	; 0x16c

00010f54 <strtok@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #86016	; 0x15000
   10f5c:	ldr	pc, [ip, #356]!	; 0x164

00010f60 <setlocale@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #86016	; 0x15000
   10f68:	ldr	pc, [ip, #348]!	; 0x15c

00010f6c <putenv@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #86016	; 0x15000
   10f74:	ldr	pc, [ip, #340]!	; 0x154

00010f78 <toupper@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #86016	; 0x15000
   10f80:	ldr	pc, [ip, #332]!	; 0x14c

00010f84 <strrchr@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #86016	; 0x15000
   10f8c:	ldr	pc, [ip, #324]!	; 0x144

00010f90 <nl_langinfo@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #86016	; 0x15000
   10f98:	ldr	pc, [ip, #316]!	; 0x13c

00010f9c <bindtextdomain@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #86016	; 0x15000
   10fa4:	ldr	pc, [ip, #308]!	; 0x134

00010fa8 <__xstat64@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #86016	; 0x15000
   10fb0:	ldr	pc, [ip, #300]!	; 0x12c

00010fb4 <fputs@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #86016	; 0x15000
   10fbc:	ldr	pc, [ip, #292]!	; 0x124

00010fc0 <strncmp@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #86016	; 0x15000
   10fc8:	ldr	pc, [ip, #284]!	; 0x11c

00010fcc <abort@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #86016	; 0x15000
   10fd4:	ldr	pc, [ip, #276]!	; 0x114

00010fd8 <__assert_fail@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #86016	; 0x15000
   10fe0:	ldr	pc, [ip, #268]!	; 0x10c

Disassembly of section .text:

00010fe4 <.text>:
   10fe4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fe8:	mov	r8, r0
   10fec:	sub	sp, sp, #156	; 0x9c
   10ff0:	ldr	r0, [r1]
   10ff4:	mov	r5, r1
   10ff8:	bl	11d18 <__assert_fail@plt+0xd40>
   10ffc:	ldr	r1, [pc, #1428]	; 11598 <__assert_fail@plt+0x5c0>
   11000:	mov	r0, #6
   11004:	bl	10f60 <setlocale@plt>
   11008:	ldr	r1, [pc, #1420]	; 1159c <__assert_fail@plt+0x5c4>
   1100c:	ldr	r0, [pc, #1420]	; 115a0 <__assert_fail@plt+0x5c8>
   11010:	bl	10f9c <bindtextdomain@plt>
   11014:	ldr	r0, [pc, #1412]	; 115a0 <__assert_fail@plt+0x5c8>
   11018:	bl	10de0 <textdomain@plt>
   1101c:	ldr	r3, [pc, #1408]	; 115a4 <__assert_fail@plt+0x5cc>
   11020:	mov	r2, #125	; 0x7d
   11024:	ldr	r0, [pc, #1404]	; 115a8 <__assert_fail@plt+0x5d0>
   11028:	str	r2, [r3]
   1102c:	bl	14e70 <__assert_fail@plt+0x3e98>
   11030:	ldr	r4, [pc, #1396]	; 115ac <__assert_fail@plt+0x5d4>
   11034:	ldr	r9, [pc, #1396]	; 115b0 <__assert_fail@plt+0x5d8>
   11038:	mov	sl, #0
   1103c:	str	sl, [sp]
   11040:	ldr	r3, [pc, #1388]	; 115b4 <__assert_fail@plt+0x5dc>
   11044:	ldr	r2, [pc, #1388]	; 115b8 <__assert_fail@plt+0x5e0>
   11048:	mov	r1, r5
   1104c:	mov	r0, r8
   11050:	bl	10ea0 <getopt_long@plt>
   11054:	cmn	r0, #1
   11058:	bne	110d4 <__assert_fail@plt+0xfc>
   1105c:	ldr	r3, [pc, #1368]	; 115bc <__assert_fail@plt+0x5e4>
   11060:	ldr	r6, [r3]
   11064:	sub	r8, r8, r6
   11068:	cmp	r8, sl
   1106c:	add	r3, r5, r6, lsl #2
   11070:	str	r3, [sp, #20]
   11074:	movle	r2, #5
   11078:	ldrle	r1, [pc, #1344]	; 115c0 <__assert_fail@plt+0x5e8>
   1107c:	ble	1118c <__assert_fail@plt+0x1b4>
   11080:	ldr	r8, [pc, #1316]	; 115ac <__assert_fail@plt+0x5d4>
   11084:	ldr	r7, [pc, #1336]	; 115c4 <__assert_fail@plt+0x5ec>
   11088:	mov	r9, sl
   1108c:	mov	fp, #1
   11090:	ldr	r2, [r8, #8]
   11094:	cmp	r2, #0
   11098:	beq	112a4 <__assert_fail@plt+0x2cc>
   1109c:	ldrb	r3, [r2]
   110a0:	ldr	r0, [r8, #4]
   110a4:	cmp	r3, #76	; 0x4c
   110a8:	bne	11240 <__assert_fail@plt+0x268>
   110ac:	bl	10f78 <toupper@plt>
   110b0:	mov	r3, r7
   110b4:	ldr	r2, [pc, #1292]	; 115c8 <__assert_fail@plt+0x5f0>
   110b8:	mov	r1, fp
   110bc:	str	r0, [sp]
   110c0:	add	r0, sp, #28
   110c4:	bl	10e4c <__asprintf_chk@plt>
   110c8:	cmp	r0, #0
   110cc:	bge	1126c <__assert_fail@plt+0x294>
   110d0:	bl	13cf4 <__assert_fail@plt+0x2d1c>
   110d4:	cmp	r0, #101	; 0x65
   110d8:	beq	1110c <__assert_fail@plt+0x134>
   110dc:	bgt	110fc <__assert_fail@plt+0x124>
   110e0:	cmn	r0, #3
   110e4:	beq	11210 <__assert_fail@plt+0x238>
   110e8:	cmn	r0, #2
   110ec:	moveq	r0, sl
   110f0:	beq	110f8 <__assert_fail@plt+0x120>
   110f4:	mov	r0, #125	; 0x7d
   110f8:	bl	11768 <__assert_fail@plt+0x790>
   110fc:	cmp	r0, #105	; 0x69
   11100:	beq	1110c <__assert_fail@plt+0x134>
   11104:	cmp	r0, #111	; 0x6f
   11108:	bne	110f4 <__assert_fail@plt+0x11c>
   1110c:	ldr	r3, [pc, #1208]	; 115cc <__assert_fail@plt+0x5f4>
   11110:	add	r2, r3, r0
   11114:	ldrsb	r7, [r2, #-45]	; 0xffffffd3
   11118:	cmp	r7, #2
   1111c:	bls	11134 <__assert_fail@plt+0x15c>
   11120:	add	r3, r3, #67	; 0x43
   11124:	mov	r2, #336	; 0x150
   11128:	ldr	r1, [pc, #1184]	; 115d0 <__assert_fail@plt+0x5f8>
   1112c:	ldr	r0, [pc, #1184]	; 115d4 <__assert_fail@plt+0x5fc>
   11130:	bl	10fd8 <__assert_fail@plt>
   11134:	mov	r3, #12
   11138:	ldr	r1, [pc, #1176]	; 115d8 <__assert_fail@plt+0x600>
   1113c:	mla	r3, r3, r7, r4
   11140:	mov	r2, #1
   11144:	str	r0, [r3, #4]
   11148:	ldr	r6, [r9]
   1114c:	ldrb	r3, [r6]
   11150:	sub	r3, r3, #9
   11154:	cmp	r3, #23
   11158:	bhi	11164 <__assert_fail@plt+0x18c>
   1115c:	ands	r3, r1, r2, lsl r3
   11160:	bne	114e4 <__assert_fail@plt+0x50c>
   11164:	mov	r3, #12
   11168:	cmp	r0, #105	; 0x69
   1116c:	mla	r3, r3, r7, r4
   11170:	str	r6, [r3, #8]
   11174:	bne	111a8 <__assert_fail@plt+0x1d0>
   11178:	ldrb	r3, [r6]
   1117c:	cmp	r3, #76	; 0x4c
   11180:	bne	111a8 <__assert_fail@plt+0x1d0>
   11184:	ldr	r1, [pc, #1104]	; 115dc <__assert_fail@plt+0x604>
   11188:	mov	r2, #5
   1118c:	mov	r0, #0
   11190:	bl	10dc8 <dcgettext@plt>
   11194:	mov	r1, #0
   11198:	mov	r2, r0
   1119c:	mov	r0, r1
   111a0:	bl	10e40 <error@plt>
   111a4:	b	110f4 <__assert_fail@plt+0x11c>
   111a8:	ldr	r1, [pc, #1072]	; 115e0 <__assert_fail@plt+0x608>
   111ac:	mov	r0, r6
   111b0:	bl	10d5c <strcmp@plt>
   111b4:	cmp	r0, #0
   111b8:	beq	11038 <__assert_fail@plt+0x60>
   111bc:	ldr	r3, [pc, #1056]	; 115e4 <__assert_fail@plt+0x60c>
   111c0:	mov	r0, r6
   111c4:	str	r3, [sp]
   111c8:	mov	r2, #10
   111cc:	add	r3, sp, #48	; 0x30
   111d0:	mov	r1, #0
   111d4:	bl	13e30 <__assert_fail@plt+0x2e58>
   111d8:	subs	r6, r0, #0
   111dc:	bne	114f4 <__assert_fail@plt+0x51c>
   111e0:	ldrd	sl, [sp, #48]	; 0x30
   111e4:	mov	r3, #0
   111e8:	mvn	r2, #0
   111ec:	cmp	fp, r3
   111f0:	cmpeq	sl, r2
   111f4:	bhi	114f0 <__assert_fail@plt+0x518>
   111f8:	bl	10edc <__errno_location@plt>
   111fc:	mov	r3, #12
   11200:	mul	r7, r3, r7
   11204:	str	r6, [r0]
   11208:	str	sl, [r4, r7]
   1120c:	b	11038 <__assert_fail@plt+0x60>
   11210:	ldr	r3, [pc, #976]	; 115e8 <__assert_fail@plt+0x610>
   11214:	ldr	r0, [pc, #976]	; 115ec <__assert_fail@plt+0x614>
   11218:	str	r3, [sp]
   1121c:	ldr	r3, [pc, #972]	; 115f0 <__assert_fail@plt+0x618>
   11220:	str	sl, [sp, #4]
   11224:	ldr	r2, [pc, #968]	; 115f4 <__assert_fail@plt+0x61c>
   11228:	ldr	r0, [r0]
   1122c:	ldr	r3, [r3]
   11230:	ldr	r1, [pc, #960]	; 115f8 <__assert_fail@plt+0x620>
   11234:	bl	13798 <__assert_fail@plt+0x27c0>
   11238:	mov	r0, sl
   1123c:	bl	10eb8 <exit@plt>
   11240:	bl	10f78 <toupper@plt>
   11244:	ldr	r2, [r8]
   11248:	mov	r3, #0
   1124c:	mov	r1, fp
   11250:	strd	r2, [sp, #8]
   11254:	mov	r3, r7
   11258:	ldr	r2, [pc, #924]	; 115fc <__assert_fail@plt+0x624>
   1125c:	str	r0, [sp]
   11260:	add	r0, sp, #28
   11264:	bl	10e4c <__asprintf_chk@plt>
   11268:	b	110c8 <__assert_fail@plt+0xf0>
   1126c:	ldr	r0, [sp, #28]
   11270:	bl	10f6c <putenv@plt>
   11274:	cmp	r0, #0
   11278:	beq	112a0 <__assert_fail@plt+0x2c8>
   1127c:	bl	10edc <__errno_location@plt>
   11280:	mov	r2, #5
   11284:	ldr	r1, [pc, #884]	; 11600 <__assert_fail@plt+0x628>
   11288:	ldr	r4, [r0]
   1128c:	mov	r0, #0
   11290:	bl	10dc8 <dcgettext@plt>
   11294:	mov	r5, r0
   11298:	ldr	r0, [sp, #28]
   1129c:	b	11520 <__assert_fail@plt+0x548>
   112a0:	mov	sl, fp
   112a4:	add	r9, r9, #1
   112a8:	cmp	r9, #3
   112ac:	add	r8, r8, #12
   112b0:	bne	11090 <__assert_fail@plt+0xb8>
   112b4:	cmp	sl, #0
   112b8:	moveq	r2, #5
   112bc:	ldreq	r1, [pc, #832]	; 11604 <__assert_fail@plt+0x62c>
   112c0:	beq	1118c <__assert_fail@plt+0x1b4>
   112c4:	ldr	r3, [pc, #828]	; 11608 <__assert_fail@plt+0x630>
   112c8:	mov	r1, #47	; 0x2f
   112cc:	ldr	r9, [r3]
   112d0:	mov	r0, r9
   112d4:	bl	10ed0 <strchr@plt>
   112d8:	subs	r7, r0, #0
   112dc:	beq	113b8 <__assert_fail@plt+0x3e0>
   112e0:	mov	r0, r9
   112e4:	bl	11b38 <__assert_fail@plt+0xb60>
   112e8:	str	r0, [r4, #36]	; 0x24
   112ec:	ldr	r3, [r4, #36]	; 0x24
   112f0:	cmp	r3, #0
   112f4:	bne	11304 <__assert_fail@plt+0x32c>
   112f8:	ldr	r0, [pc, #780]	; 1160c <__assert_fail@plt+0x634>
   112fc:	bl	13cd8 <__assert_fail@plt+0x2d00>
   11300:	str	r0, [r4, #36]	; 0x24
   11304:	ldr	r0, [pc, #772]	; 11610 <__assert_fail@plt+0x638>
   11308:	bl	10e58 <getenv@plt>
   1130c:	ldr	r3, [r4, #36]	; 0x24
   11310:	ldr	fp, [pc, #764]	; 11614 <__assert_fail@plt+0x63c>
   11314:	str	r3, [sp, #36]	; 0x24
   11318:	ldr	r3, [pc, #760]	; 11618 <__assert_fail@plt+0x640>
   1131c:	add	r8, sp, #36	; 0x24
   11320:	str	r3, [sp, #40]	; 0x28
   11324:	mov	r3, #0
   11328:	str	r3, [sp, #44]	; 0x2c
   1132c:	mov	r9, r0
   11330:	ldr	r3, [r8]
   11334:	ldrb	r2, [r3]
   11338:	cmp	r2, #0
   1133c:	bne	11454 <__assert_fail@plt+0x47c>
   11340:	ldr	r0, [pc, #716]	; 11614 <__assert_fail@plt+0x63c>
   11344:	bl	13cd8 <__assert_fail@plt+0x2d00>
   11348:	str	r0, [sp, #32]
   1134c:	cmp	r9, #0
   11350:	ldr	r3, [sp, #32]
   11354:	beq	114c8 <__assert_fail@plt+0x4f0>
   11358:	str	r3, [sp, #4]
   1135c:	str	r9, [sp]
   11360:	ldr	r3, [pc, #680]	; 11610 <__assert_fail@plt+0x638>
   11364:	ldr	r2, [pc, #688]	; 1161c <__assert_fail@plt+0x644>
   11368:	mov	r1, #1
   1136c:	add	r0, sp, #48	; 0x30
   11370:	bl	10e4c <__asprintf_chk@plt>
   11374:	cmp	r0, #0
   11378:	blt	110d0 <__assert_fail@plt+0xf8>
   1137c:	ldr	r0, [sp, #32]
   11380:	bl	11cc4 <__assert_fail@plt+0xcec>
   11384:	ldr	r0, [sp, #48]	; 0x30
   11388:	bl	10f6c <putenv@plt>
   1138c:	subs	r7, r0, #0
   11390:	beq	11534 <__assert_fail@plt+0x55c>
   11394:	bl	10edc <__errno_location@plt>
   11398:	mov	r2, #5
   1139c:	ldr	r1, [pc, #604]	; 11600 <__assert_fail@plt+0x628>
   113a0:	ldr	r4, [r0]
   113a4:	mov	r0, #0
   113a8:	bl	10dc8 <dcgettext@plt>
   113ac:	mov	r5, r0
   113b0:	ldr	r0, [sp, #48]	; 0x30
   113b4:	b	11520 <__assert_fail@plt+0x548>
   113b8:	ldr	r0, [pc, #608]	; 11620 <__assert_fail@plt+0x648>
   113bc:	bl	13d34 <__assert_fail@plt+0x2d5c>
   113c0:	subs	r8, r0, #0
   113c4:	beq	113dc <__assert_fail@plt+0x404>
   113c8:	bl	11b38 <__assert_fail@plt+0xb60>
   113cc:	str	r0, [r4, #36]	; 0x24
   113d0:	mov	r0, r8
   113d4:	bl	11cc4 <__assert_fail@plt+0xcec>
   113d8:	b	112ec <__assert_fail@plt+0x314>
   113dc:	ldr	r0, [pc, #576]	; 11624 <__assert_fail@plt+0x64c>
   113e0:	bl	10e58 <getenv@plt>
   113e4:	subs	r8, r0, #0
   113e8:	beq	113d0 <__assert_fail@plt+0x3f8>
   113ec:	bl	13cd8 <__assert_fail@plt+0x2d00>
   113f0:	ldr	r1, [pc, #560]	; 11628 <__assert_fail@plt+0x650>
   113f4:	ldr	fp, [pc, #556]	; 11628 <__assert_fail@plt+0x650>
   113f8:	mov	r8, r0
   113fc:	bl	10f54 <strtok@plt>
   11400:	cmp	r0, #0
   11404:	beq	113d0 <__assert_fail@plt+0x3f8>
   11408:	mov	r2, r7
   1140c:	mov	r1, r9
   11410:	bl	11be8 <__assert_fail@plt+0xc10>
   11414:	mov	r1, #1
   11418:	mov	sl, r0
   1141c:	bl	10f30 <access@plt>
   11420:	cmp	r0, #0
   11424:	mov	r0, sl
   11428:	bne	11440 <__assert_fail@plt+0x468>
   1142c:	bl	11b38 <__assert_fail@plt+0xb60>
   11430:	str	r0, [r4, #36]	; 0x24
   11434:	mov	r0, sl
   11438:	bl	11cc4 <__assert_fail@plt+0xcec>
   1143c:	b	113d0 <__assert_fail@plt+0x3f8>
   11440:	bl	11cc4 <__assert_fail@plt+0xcec>
   11444:	mov	r1, fp
   11448:	mov	r0, r7
   1144c:	bl	10f54 <strtok@plt>
   11450:	b	11400 <__assert_fail@plt+0x428>
   11454:	str	fp, [sp]
   11458:	ldr	r2, [pc, #460]	; 1162c <__assert_fail@plt+0x654>
   1145c:	mov	r1, #1
   11460:	add	r0, sp, #32
   11464:	bl	10e4c <__asprintf_chk@plt>
   11468:	cmp	r0, #0
   1146c:	blt	110d0 <__assert_fail@plt+0xf8>
   11470:	add	r1, sp, #48	; 0x30
   11474:	ldr	r0, [sp, #32]
   11478:	bl	14e88 <__assert_fail@plt+0x3eb0>
   1147c:	cmp	r0, #0
   11480:	beq	1134c <__assert_fail@plt+0x374>
   11484:	ldr	r0, [sp, #32]
   11488:	bl	11cc4 <__assert_fail@plt+0xcec>
   1148c:	ldr	r7, [r8, #4]!
   11490:	cmp	r7, #0
   11494:	bne	11330 <__assert_fail@plt+0x358>
   11498:	mov	r2, #5
   1149c:	ldr	r1, [pc, #396]	; 11630 <__assert_fail@plt+0x658>
   114a0:	mov	r0, r7
   114a4:	bl	10dc8 <dcgettext@plt>
   114a8:	mov	r4, r0
   114ac:	ldr	r0, [pc, #352]	; 11614 <__assert_fail@plt+0x63c>
   114b0:	bl	13348 <__assert_fail@plt+0x2370>
   114b4:	mov	r2, r4
   114b8:	mov	r1, r7
   114bc:	mov	r3, r0
   114c0:	mov	r0, #125	; 0x7d
   114c4:	bl	10e40 <error@plt>
   114c8:	str	r3, [sp]
   114cc:	ldr	r2, [pc, #352]	; 11634 <__assert_fail@plt+0x65c>
   114d0:	ldr	r3, [pc, #312]	; 11610 <__assert_fail@plt+0x638>
   114d4:	mov	r1, #1
   114d8:	add	r0, sp, #48	; 0x30
   114dc:	bl	10e4c <__asprintf_chk@plt>
   114e0:	b	11374 <__assert_fail@plt+0x39c>
   114e4:	add	r6, r6, #1
   114e8:	str	r6, [r9]
   114ec:	b	11148 <__assert_fail@plt+0x170>
   114f0:	mov	r6, #1
   114f4:	bl	10edc <__errno_location@plt>
   114f8:	cmp	r6, #1
   114fc:	moveq	r4, #75	; 0x4b
   11500:	ldrne	r4, [r0]
   11504:	str	r4, [r0]
   11508:	mov	r2, #5
   1150c:	ldr	r1, [pc, #292]	; 11638 <__assert_fail@plt+0x660>
   11510:	mov	r0, #0
   11514:	bl	10dc8 <dcgettext@plt>
   11518:	mov	r5, r0
   1151c:	ldr	r0, [r9]
   11520:	bl	13348 <__assert_fail@plt+0x2370>
   11524:	mov	r2, r5
   11528:	mov	r1, r4
   1152c:	mov	r3, r0
   11530:	b	114c0 <__assert_fail@plt+0x4e8>
   11534:	ldr	r0, [r4, #36]	; 0x24
   11538:	bl	11cc4 <__assert_fail@plt+0xcec>
   1153c:	ldr	r1, [sp, #20]
   11540:	ldr	r0, [r5, r6, lsl #2]
   11544:	bl	10d98 <execvp@plt>
   11548:	bl	10edc <__errno_location@plt>
   1154c:	mov	r2, #5
   11550:	ldr	r1, [pc, #228]	; 1163c <__assert_fail@plt+0x664>
   11554:	ldr	r4, [r0]
   11558:	mov	r0, r7
   1155c:	cmp	r4, #2
   11560:	moveq	r8, #127	; 0x7f
   11564:	movne	r8, #126	; 0x7e
   11568:	bl	10dc8 <dcgettext@plt>
   1156c:	mov	r9, r0
   11570:	ldr	r0, [r5, r6, lsl #2]
   11574:	bl	13348 <__assert_fail@plt+0x2370>
   11578:	mov	r2, r9
   1157c:	mov	r1, r4
   11580:	mov	r3, r0
   11584:	mov	r0, r7
   11588:	bl	10e40 <error@plt>
   1158c:	mov	r0, r8
   11590:	add	sp, sp, #156	; 0x9c
   11594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11598:	andeq	r5, r1, r9, lsl r5
   1159c:	andeq	r5, r1, sl, lsl r5
   115a0:	andeq	r5, r1, r7, ror r4
   115a4:	andeq	r6, r2, r0, lsl #2
   115a8:	andeq	r1, r1, r4, asr sl
   115ac:	andeq	r6, r2, r8, ror #2
   115b0:	andeq	r6, r2, r0, ror #2
   115b4:	andeq	r4, r1, ip, ror #29
   115b8:	andeq	r5, r1, r7, asr #11
   115bc:	andeq	r6, r2, r0, asr r1
   115c0:	andeq	r5, r1, pc, asr #11
   115c4:	ldrdeq	r5, [r1], -pc	; <UNPREDICTABLE>
   115c8:	andeq	r5, r1, r8, ror #11
   115cc:	andeq	r4, r1, r4, lsr #29
   115d0:	andeq	r5, r1, r2, lsr r5
   115d4:	andeq	r5, r1, pc, lsr r5
   115d8:	addeq	r0, r0, pc, lsl r0
   115dc:	andeq	r5, r1, sl, ror r5
   115e0:	andeq	r5, r1, sp, ror #11
   115e4:	muleq	r1, lr, r5
   115e8:			; <UNDEFINED> instruction: 0x000155b9
   115ec:	andeq	r6, r2, ip, asr r1
   115f0:	strdeq	r6, [r2], -ip
   115f4:	andeq	r5, r1, r3, ror r4
   115f8:	andeq	r4, r1, ip, asr #30
   115fc:	andeq	r5, r1, pc, ror #11
   11600:	strdeq	r5, [r1], -r9
   11604:	andeq	r5, r1, r2, lsr #12
   11608:	muleq	r2, r8, r1
   1160c:	andeq	r5, r1, pc, asr r6
   11610:	andeq	r5, r1, r8, ror r6
   11614:	andeq	r5, r1, r0, lsr #13
   11618:	andeq	r5, r1, r3, lsl #13
   1161c:	andeq	r5, r1, r5, asr #13
   11620:	andeq	r5, r1, fp, asr #12
   11624:	andeq	r5, r1, sl, asr r6
   11628:	andeq	r5, r1, sp, asr #11
   1162c:	andeq	r5, r1, sp, lsr #13
   11630:			; <UNDEFINED> instruction: 0x000156b3
   11634:	andeq	r5, r1, lr, asr #13
   11638:	andeq	r5, r1, r9, lsr #11
   1163c:	ldrdeq	r5, [r1], -r4
   11640:	mov	fp, #0
   11644:	mov	lr, #0
   11648:	pop	{r1}		; (ldr r1, [sp], #4)
   1164c:	mov	r2, sp
   11650:	push	{r2}		; (str r2, [sp, #-4]!)
   11654:	push	{r0}		; (str r0, [sp, #-4]!)
   11658:	ldr	ip, [pc, #16]	; 11670 <__assert_fail@plt+0x698>
   1165c:	push	{ip}		; (str ip, [sp, #-4]!)
   11660:	ldr	r0, [pc, #12]	; 11674 <__assert_fail@plt+0x69c>
   11664:	ldr	r3, [pc, #12]	; 11678 <__assert_fail@plt+0x6a0>
   11668:	bl	10e70 <__libc_start_main@plt>
   1166c:	bl	10fcc <abort@plt>
   11670:	andeq	r4, r1, ip, ror #28
   11674:	andeq	r0, r1, r4, ror #31
   11678:	andeq	r4, r1, ip, lsl #28
   1167c:	ldr	r3, [pc, #20]	; 11698 <__assert_fail@plt+0x6c0>
   11680:	ldr	r2, [pc, #20]	; 1169c <__assert_fail@plt+0x6c4>
   11684:	add	r3, pc, r3
   11688:	ldr	r2, [r3, r2]
   1168c:	cmp	r2, #0
   11690:	bxeq	lr
   11694:	b	10e88 <__gmon_start__@plt>
   11698:	andeq	r4, r1, r4, ror r9
   1169c:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   116a0:	ldr	r3, [pc, #28]	; 116c4 <__assert_fail@plt+0x6ec>
   116a4:	ldr	r0, [pc, #28]	; 116c8 <__assert_fail@plt+0x6f0>
   116a8:	sub	r3, r3, r0
   116ac:	cmp	r3, #6
   116b0:	bxls	lr
   116b4:	ldr	r3, [pc, #16]	; 116cc <__assert_fail@plt+0x6f4>
   116b8:	cmp	r3, #0
   116bc:	bxeq	lr
   116c0:	bx	r3
   116c4:	andeq	r6, r2, r7, asr #2
   116c8:	andeq	r6, r2, r4, asr #2
   116cc:	andeq	r0, r0, r0
   116d0:	ldr	r1, [pc, #36]	; 116fc <__assert_fail@plt+0x724>
   116d4:	ldr	r0, [pc, #36]	; 11700 <__assert_fail@plt+0x728>
   116d8:	sub	r1, r1, r0
   116dc:	asr	r1, r1, #2
   116e0:	add	r1, r1, r1, lsr #31
   116e4:	asrs	r1, r1, #1
   116e8:	bxeq	lr
   116ec:	ldr	r3, [pc, #16]	; 11704 <__assert_fail@plt+0x72c>
   116f0:	cmp	r3, #0
   116f4:	bxeq	lr
   116f8:	bx	r3
   116fc:	andeq	r6, r2, r4, asr #2
   11700:	andeq	r6, r2, r4, asr #2
   11704:	andeq	r0, r0, r0
   11708:	push	{r4, lr}
   1170c:	ldr	r4, [pc, #24]	; 1172c <__assert_fail@plt+0x754>
   11710:	ldrb	r3, [r4]
   11714:	cmp	r3, #0
   11718:	popne	{r4, pc}
   1171c:	bl	116a0 <__assert_fail@plt+0x6c8>
   11720:	mov	r3, #1
   11724:	strb	r3, [r4]
   11728:	pop	{r4, pc}
   1172c:	andeq	r6, r2, r4, ror #2
   11730:	ldr	r0, [pc, #40]	; 11760 <__assert_fail@plt+0x788>
   11734:	ldr	r3, [r0]
   11738:	cmp	r3, #0
   1173c:	bne	11744 <__assert_fail@plt+0x76c>
   11740:	b	116d0 <__assert_fail@plt+0x6f8>
   11744:	ldr	r3, [pc, #24]	; 11764 <__assert_fail@plt+0x78c>
   11748:	cmp	r3, #0
   1174c:	beq	11740 <__assert_fail@plt+0x768>
   11750:	push	{r4, lr}
   11754:	blx	r3
   11758:	pop	{r4, lr}
   1175c:	b	116d0 <__assert_fail@plt+0x6f8>
   11760:	andeq	r5, r2, r4, lsl pc
   11764:	andeq	r0, r0, r0
   11768:	subs	r5, r0, #0
   1176c:	push	{r7, lr}
   11770:	sub	sp, sp, #56	; 0x38
   11774:	ldr	r4, [pc, #596]	; 119d0 <__assert_fail@plt+0x9f8>
   11778:	beq	117b0 <__assert_fail@plt+0x7d8>
   1177c:	ldr	r3, [pc, #592]	; 119d4 <__assert_fail@plt+0x9fc>
   11780:	mov	r2, #5
   11784:	ldr	r1, [pc, #588]	; 119d8 <__assert_fail@plt+0xa00>
   11788:	mov	r0, #0
   1178c:	ldr	r6, [r3]
   11790:	bl	10dc8 <dcgettext@plt>
   11794:	ldr	r3, [r4]
   11798:	mov	r1, #1
   1179c:	mov	r2, r0
   117a0:	mov	r0, r6
   117a4:	bl	10f24 <__fprintf_chk@plt>
   117a8:	mov	r0, r5
   117ac:	bl	10eb8 <exit@plt>
   117b0:	mov	r2, #5
   117b4:	ldr	r1, [pc, #544]	; 119dc <__assert_fail@plt+0xa04>
   117b8:	bl	10dc8 <dcgettext@plt>
   117bc:	ldr	r2, [r4]
   117c0:	ldr	r4, [pc, #536]	; 119e0 <__assert_fail@plt+0xa08>
   117c4:	ldr	r8, [pc, #536]	; 119e4 <__assert_fail@plt+0xa0c>
   117c8:	mov	r6, r5
   117cc:	mov	r1, r0
   117d0:	mov	r0, #1
   117d4:	bl	10f00 <__printf_chk@plt>
   117d8:	mov	r2, #5
   117dc:	ldr	r1, [pc, #516]	; 119e8 <__assert_fail@plt+0xa10>
   117e0:	mov	r0, r5
   117e4:	bl	10dc8 <dcgettext@plt>
   117e8:	ldr	r1, [r4]
   117ec:	bl	10d44 <fputs_unlocked@plt>
   117f0:	mov	r2, #5
   117f4:	ldr	r1, [pc, #496]	; 119ec <__assert_fail@plt+0xa14>
   117f8:	mov	r0, r5
   117fc:	bl	10dc8 <dcgettext@plt>
   11800:	ldr	r1, [r4]
   11804:	bl	10d44 <fputs_unlocked@plt>
   11808:	mov	r2, #5
   1180c:	ldr	r1, [pc, #476]	; 119f0 <__assert_fail@plt+0xa18>
   11810:	mov	r0, r5
   11814:	bl	10dc8 <dcgettext@plt>
   11818:	ldr	r1, [r4]
   1181c:	bl	10d44 <fputs_unlocked@plt>
   11820:	mov	r2, #5
   11824:	ldr	r1, [pc, #456]	; 119f4 <__assert_fail@plt+0xa1c>
   11828:	mov	r0, r5
   1182c:	bl	10dc8 <dcgettext@plt>
   11830:	ldr	r1, [r4]
   11834:	bl	10d44 <fputs_unlocked@plt>
   11838:	mov	r2, #5
   1183c:	ldr	r1, [pc, #436]	; 119f8 <__assert_fail@plt+0xa20>
   11840:	mov	r0, r5
   11844:	bl	10dc8 <dcgettext@plt>
   11848:	ldr	r1, [r4]
   1184c:	bl	10d44 <fputs_unlocked@plt>
   11850:	mov	r2, #5
   11854:	ldr	r1, [pc, #416]	; 119fc <__assert_fail@plt+0xa24>
   11858:	mov	r0, r5
   1185c:	bl	10dc8 <dcgettext@plt>
   11860:	ldr	r1, [r4]
   11864:	bl	10d44 <fputs_unlocked@plt>
   11868:	mov	r2, #5
   1186c:	ldr	r1, [pc, #396]	; 11a00 <__assert_fail@plt+0xa28>
   11870:	mov	r0, r5
   11874:	bl	10dc8 <dcgettext@plt>
   11878:	ldr	r1, [r4]
   1187c:	bl	10d44 <fputs_unlocked@plt>
   11880:	mov	r2, #5
   11884:	ldr	r1, [pc, #376]	; 11a04 <__assert_fail@plt+0xa2c>
   11888:	mov	r0, r5
   1188c:	bl	10dc8 <dcgettext@plt>
   11890:	ldr	r1, [r4]
   11894:	bl	10d44 <fputs_unlocked@plt>
   11898:	mov	r2, #5
   1189c:	ldr	r1, [pc, #356]	; 11a08 <__assert_fail@plt+0xa30>
   118a0:	mov	r0, r5
   118a4:	bl	10dc8 <dcgettext@plt>
   118a8:	ldr	r1, [r4]
   118ac:	bl	10d44 <fputs_unlocked@plt>
   118b0:	ldr	lr, [pc, #340]	; 11a0c <__assert_fail@plt+0xa34>
   118b4:	mov	ip, sp
   118b8:	ldm	lr!, {r0, r1, r2, r3}
   118bc:	stmia	ip!, {r0, r1, r2, r3}
   118c0:	ldm	lr!, {r0, r1, r2, r3}
   118c4:	stmia	ip!, {r0, r1, r2, r3}
   118c8:	ldm	lr!, {r0, r1, r2, r3}
   118cc:	stmia	ip!, {r0, r1, r2, r3}
   118d0:	ldm	lr, {r0, r1}
   118d4:	stm	ip, {r0, r1}
   118d8:	ldr	r1, [sp, r6]
   118dc:	add	r7, sp, r6
   118e0:	cmp	r1, #0
   118e4:	bne	11988 <__assert_fail@plt+0x9b0>
   118e8:	ldr	r6, [r7, #4]
   118ec:	ldr	r7, [pc, #240]	; 119e4 <__assert_fail@plt+0xa0c>
   118f0:	cmp	r6, #0
   118f4:	mov	r2, #5
   118f8:	ldr	r1, [pc, #272]	; 11a10 <__assert_fail@plt+0xa38>
   118fc:	mov	r0, #0
   11900:	moveq	r6, r7
   11904:	bl	10dc8 <dcgettext@plt>
   11908:	ldr	r3, [pc, #260]	; 11a14 <__assert_fail@plt+0xa3c>
   1190c:	ldr	r2, [pc, #260]	; 11a18 <__assert_fail@plt+0xa40>
   11910:	mov	r1, r0
   11914:	mov	r0, #1
   11918:	bl	10f00 <__printf_chk@plt>
   1191c:	mov	r1, #0
   11920:	mov	r0, #5
   11924:	bl	10f60 <setlocale@plt>
   11928:	cmp	r0, #0
   1192c:	bne	119a0 <__assert_fail@plt+0x9c8>
   11930:	mov	r2, #5
   11934:	ldr	r1, [pc, #224]	; 11a1c <__assert_fail@plt+0xa44>
   11938:	mov	r0, #0
   1193c:	bl	10dc8 <dcgettext@plt>
   11940:	ldr	r3, [pc, #156]	; 119e4 <__assert_fail@plt+0xa0c>
   11944:	ldr	r2, [pc, #200]	; 11a14 <__assert_fail@plt+0xa3c>
   11948:	mov	r1, r0
   1194c:	mov	r0, #1
   11950:	bl	10f00 <__printf_chk@plt>
   11954:	mov	r2, #5
   11958:	ldr	r1, [pc, #192]	; 11a20 <__assert_fail@plt+0xa48>
   1195c:	mov	r0, #0
   11960:	bl	10dc8 <dcgettext@plt>
   11964:	ldr	r2, [pc, #184]	; 11a24 <__assert_fail@plt+0xa4c>
   11968:	cmp	r6, r7
   1196c:	ldr	r3, [pc, #180]	; 11a28 <__assert_fail@plt+0xa50>
   11970:	moveq	r3, r2
   11974:	mov	r2, r6
   11978:	mov	r1, r0
   1197c:	mov	r0, #1
   11980:	bl	10f00 <__printf_chk@plt>
   11984:	b	117a8 <__assert_fail@plt+0x7d0>
   11988:	mov	r0, r8
   1198c:	bl	10d5c <strcmp@plt>
   11990:	add	r6, r6, #8
   11994:	cmp	r0, #0
   11998:	bne	118d8 <__assert_fail@plt+0x900>
   1199c:	b	118e8 <__assert_fail@plt+0x910>
   119a0:	mov	r2, #3
   119a4:	ldr	r1, [pc, #128]	; 11a2c <__assert_fail@plt+0xa54>
   119a8:	bl	10fc0 <strncmp@plt>
   119ac:	cmp	r0, #0
   119b0:	beq	11930 <__assert_fail@plt+0x958>
   119b4:	mov	r2, #5
   119b8:	ldr	r1, [pc, #112]	; 11a30 <__assert_fail@plt+0xa58>
   119bc:	mov	r0, #0
   119c0:	bl	10dc8 <dcgettext@plt>
   119c4:	ldr	r1, [r4]
   119c8:	bl	10d44 <fputs_unlocked@plt>
   119cc:	b	11930 <__assert_fail@plt+0x958>
   119d0:	muleq	r2, r8, r1
   119d4:	andeq	r6, r2, r8, asr r1
   119d8:	andeq	r4, r1, r3, asr pc
   119dc:	andeq	r4, r1, sl, ror pc
   119e0:	andeq	r6, r2, ip, asr r1
   119e4:	andeq	r4, r1, ip, asr #30
   119e8:	muleq	r1, r7, pc	; <UNPREDICTABLE>
   119ec:	andeq	r4, r1, r2, ror #31
   119f0:	andeq	r5, r1, sp, lsr #32
   119f4:	andeq	r5, r1, r3, ror #1
   119f8:	andeq	r5, r1, r0, lsl r1
   119fc:	andeq	r5, r1, r6, asr #2
   11a00:			; <UNDEFINED> instruction: 0x000151b3
   11a04:	strdeq	r5, [r1], -r1
   11a08:	andeq	r5, r1, r9, lsr #6
   11a0c:	andeq	r4, r1, r4, lsr #29
   11a10:	andeq	r5, r1, r4, lsr r4
   11a14:	andeq	r5, r1, fp, asr #8
   11a18:	andeq	r5, r1, r3, ror r4
   11a1c:	andeq	r5, r1, ip, asr #9
   11a20:	andeq	r5, r1, r7, ror #9
   11a24:	andeq	r5, r1, r9, lsl #14
   11a28:	andeq	r5, r1, r9, lsl r5
   11a2c:	andeq	r5, r1, r1, lsl #9
   11a30:	andeq	r5, r1, r5, lsl #9
   11a34:	ldr	r3, [pc, #4]	; 11a40 <__assert_fail@plt+0xa68>
   11a38:	str	r0, [r3]
   11a3c:	bx	lr
   11a40:	muleq	r2, r0, r1
   11a44:	ldr	r3, [pc, #4]	; 11a50 <__assert_fail@plt+0xa78>
   11a48:	strb	r0, [r3, #4]
   11a4c:	bx	lr
   11a50:	muleq	r2, r0, r1
   11a54:	ldr	r3, [pc, #192]	; 11b1c <__assert_fail@plt+0xb44>
   11a58:	push	{r0, r1, r4, r5, r6, lr}
   11a5c:	ldr	r0, [r3]
   11a60:	bl	144a0 <__assert_fail@plt+0x34c8>
   11a64:	cmp	r0, #0
   11a68:	beq	11b00 <__assert_fail@plt+0xb28>
   11a6c:	ldr	r3, [pc, #172]	; 11b20 <__assert_fail@plt+0xb48>
   11a70:	mov	r4, r3
   11a74:	ldrb	r2, [r3, #4]
   11a78:	cmp	r2, #0
   11a7c:	beq	11a90 <__assert_fail@plt+0xab8>
   11a80:	bl	10edc <__errno_location@plt>
   11a84:	ldr	r3, [r0]
   11a88:	cmp	r3, #32
   11a8c:	beq	11b00 <__assert_fail@plt+0xb28>
   11a90:	mov	r2, #5
   11a94:	ldr	r1, [pc, #136]	; 11b24 <__assert_fail@plt+0xb4c>
   11a98:	mov	r0, #0
   11a9c:	bl	10dc8 <dcgettext@plt>
   11aa0:	ldr	r4, [r4]
   11aa4:	cmp	r4, #0
   11aa8:	mov	r5, r0
   11aac:	beq	11ae4 <__assert_fail@plt+0xb0c>
   11ab0:	bl	10edc <__errno_location@plt>
   11ab4:	ldr	r6, [r0]
   11ab8:	mov	r0, r4
   11abc:	bl	131f8 <__assert_fail@plt+0x2220>
   11ac0:	str	r5, [sp]
   11ac4:	ldr	r2, [pc, #92]	; 11b28 <__assert_fail@plt+0xb50>
   11ac8:	mov	r1, r6
   11acc:	mov	r3, r0
   11ad0:	mov	r0, #0
   11ad4:	bl	10e40 <error@plt>
   11ad8:	ldr	r3, [pc, #76]	; 11b2c <__assert_fail@plt+0xb54>
   11adc:	ldr	r0, [r3]
   11ae0:	bl	10d80 <_exit@plt>
   11ae4:	bl	10edc <__errno_location@plt>
   11ae8:	mov	r3, r5
   11aec:	ldr	r2, [pc, #60]	; 11b30 <__assert_fail@plt+0xb58>
   11af0:	ldr	r1, [r0]
   11af4:	mov	r0, r4
   11af8:	bl	10e40 <error@plt>
   11afc:	b	11ad8 <__assert_fail@plt+0xb00>
   11b00:	ldr	r3, [pc, #44]	; 11b34 <__assert_fail@plt+0xb5c>
   11b04:	ldr	r0, [r3]
   11b08:	bl	144a0 <__assert_fail@plt+0x34c8>
   11b0c:	cmp	r0, #0
   11b10:	bne	11ad8 <__assert_fail@plt+0xb00>
   11b14:	add	sp, sp, #8
   11b18:	pop	{r4, r5, r6, pc}
   11b1c:	andeq	r6, r2, ip, asr r1
   11b20:	muleq	r2, r0, r1
   11b24:	andeq	r5, r1, r5, ror r7
   11b28:	andeq	r5, r1, r1, lsl #15
   11b2c:	andeq	r6, r2, r0, lsl #2
   11b30:	andeq	r5, r1, r5, lsl #15
   11b34:	andeq	r6, r2, r8, asr r1
   11b38:	push	{r4, lr}
   11b3c:	bl	11b90 <__assert_fail@plt+0xbb8>
   11b40:	cmp	r0, #0
   11b44:	popne	{r4, pc}
   11b48:	bl	13cf4 <__assert_fail@plt+0x2d1c>
   11b4c:	push	{r4, r5, r6, lr}
   11b50:	mov	r5, r0
   11b54:	ldrb	r4, [r0]
   11b58:	bl	14294 <__assert_fail@plt+0x32bc>
   11b5c:	sub	r4, r4, #47	; 0x2f
   11b60:	clz	r4, r4
   11b64:	lsr	r4, r4, #5
   11b68:	sub	r0, r0, r5
   11b6c:	cmp	r0, r4
   11b70:	bhi	11b78 <__assert_fail@plt+0xba0>
   11b74:	pop	{r4, r5, r6, pc}
   11b78:	sub	r3, r0, #1
   11b7c:	ldrb	r2, [r5, r3]
   11b80:	cmp	r2, #47	; 0x2f
   11b84:	popne	{r4, r5, r6, pc}
   11b88:	mov	r0, r3
   11b8c:	b	11b6c <__assert_fail@plt+0xb94>
   11b90:	push	{r4, r5, r6, lr}
   11b94:	mov	r6, r0
   11b98:	bl	11b4c <__assert_fail@plt+0xb74>
   11b9c:	add	r3, r0, #1
   11ba0:	mov	r4, r0
   11ba4:	cmp	r0, #0
   11ba8:	movne	r0, r3
   11bac:	addeq	r0, r3, #1
   11bb0:	bl	141a4 <__assert_fail@plt+0x31cc>
   11bb4:	subs	r5, r0, #0
   11bb8:	beq	11be0 <__assert_fail@plt+0xc08>
   11bbc:	mov	r2, r4
   11bc0:	mov	r1, r6
   11bc4:	bl	10d8c <memcpy@plt>
   11bc8:	cmp	r4, #0
   11bcc:	moveq	r3, #46	; 0x2e
   11bd0:	moveq	r4, #1
   11bd4:	strbeq	r3, [r5]
   11bd8:	mov	r3, #0
   11bdc:	strb	r3, [r5, r4]
   11be0:	mov	r0, r5
   11be4:	pop	{r4, r5, r6, pc}
   11be8:	push	{r4, lr}
   11bec:	bl	11bfc <__assert_fail@plt+0xc24>
   11bf0:	cmp	r0, #0
   11bf4:	popne	{r4, pc}
   11bf8:	bl	13cf4 <__assert_fail@plt+0x2d1c>
   11bfc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c00:	mov	r6, r1
   11c04:	mov	r9, r2
   11c08:	mov	r7, r0
   11c0c:	bl	14294 <__assert_fail@plt+0x32bc>
   11c10:	mov	r5, r0
   11c14:	bl	142f4 <__assert_fail@plt+0x331c>
   11c18:	sub	r5, r5, r7
   11c1c:	mov	r4, r0
   11c20:	add	r5, r5, r0
   11c24:	mov	r0, r6
   11c28:	bl	10ec4 <strlen@plt>
   11c2c:	cmp	r4, #0
   11c30:	mov	r8, r0
   11c34:	beq	11cb0 <__assert_fail@plt+0xcd8>
   11c38:	add	r3, r7, r5
   11c3c:	ldrb	r3, [r3, #-1]
   11c40:	cmp	r3, #47	; 0x2f
   11c44:	moveq	r4, #0
   11c48:	beq	11c5c <__assert_fail@plt+0xc84>
   11c4c:	ldrb	r4, [r6]
   11c50:	cmp	r4, #47	; 0x2f
   11c54:	movne	r4, #47	; 0x2f
   11c58:	moveq	r4, #0
   11c5c:	adds	fp, r4, #0
   11c60:	add	r0, r8, #1
   11c64:	movne	fp, #1
   11c68:	add	r0, r0, r5
   11c6c:	add	r0, r0, fp
   11c70:	bl	141a4 <__assert_fail@plt+0x31cc>
   11c74:	subs	sl, r0, #0
   11c78:	beq	11ca8 <__assert_fail@plt+0xcd0>
   11c7c:	mov	r2, r5
   11c80:	mov	r1, r7
   11c84:	bl	10e94 <mempcpy@plt>
   11c88:	cmp	r9, #0
   11c8c:	mov	r2, r8
   11c90:	mov	r1, r6
   11c94:	strb	r4, [r0], fp
   11c98:	strne	r0, [r9]
   11c9c:	bl	10e94 <mempcpy@plt>
   11ca0:	mov	r3, #0
   11ca4:	strb	r3, [r0]
   11ca8:	mov	r0, sl
   11cac:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cb0:	ldrb	r4, [r6]
   11cb4:	cmp	r4, #47	; 0x2f
   11cb8:	moveq	r4, #46	; 0x2e
   11cbc:	movne	r4, #0
   11cc0:	b	11c5c <__assert_fail@plt+0xc84>
   11cc4:	push	{r0, r1, r2, r4, r5, lr}
   11cc8:	mov	r5, r0
   11ccc:	bl	10edc <__errno_location@plt>
   11cd0:	ldr	r3, [r0]
   11cd4:	mov	r4, r0
   11cd8:	str	r3, [sp]
   11cdc:	str	r3, [sp, #4]
   11ce0:	mov	r3, #0
   11ce4:	str	r3, [r0]
   11ce8:	mov	r0, r5
   11cec:	bl	10d74 <free@plt>
   11cf0:	ldr	r3, [r4]
   11cf4:	add	r2, sp, #8
   11cf8:	cmp	r3, #0
   11cfc:	moveq	r3, #4
   11d00:	movne	r3, #0
   11d04:	add	r3, r2, r3
   11d08:	ldr	r3, [r3, #-8]
   11d0c:	str	r3, [r4]
   11d10:	add	sp, sp, #12
   11d14:	pop	{r4, r5, pc}
   11d18:	push	{r4, r5, r6, lr}
   11d1c:	subs	r5, r0, #0
   11d20:	bne	11d38 <__assert_fail@plt+0xd60>
   11d24:	ldr	r3, [pc, #124]	; 11da8 <__assert_fail@plt+0xdd0>
   11d28:	ldr	r0, [pc, #124]	; 11dac <__assert_fail@plt+0xdd4>
   11d2c:	ldr	r1, [r3]
   11d30:	bl	10fb4 <fputs@plt>
   11d34:	bl	10fcc <abort@plt>
   11d38:	mov	r1, #47	; 0x2f
   11d3c:	bl	10f84 <strrchr@plt>
   11d40:	cmp	r0, #0
   11d44:	addne	r4, r0, #1
   11d48:	moveq	r4, r5
   11d4c:	sub	r3, r4, r5
   11d50:	cmp	r3, #6
   11d54:	ble	11d94 <__assert_fail@plt+0xdbc>
   11d58:	mov	r2, #7
   11d5c:	ldr	r1, [pc, #76]	; 11db0 <__assert_fail@plt+0xdd8>
   11d60:	sub	r0, r4, #7
   11d64:	bl	10fc0 <strncmp@plt>
   11d68:	cmp	r0, #0
   11d6c:	bne	11d94 <__assert_fail@plt+0xdbc>
   11d70:	mov	r2, #3
   11d74:	ldr	r1, [pc, #56]	; 11db4 <__assert_fail@plt+0xddc>
   11d78:	mov	r0, r4
   11d7c:	bl	10fc0 <strncmp@plt>
   11d80:	cmp	r0, #0
   11d84:	movne	r5, r4
   11d88:	ldreq	r3, [pc, #40]	; 11db8 <__assert_fail@plt+0xde0>
   11d8c:	addeq	r5, r4, #3
   11d90:	streq	r5, [r3]
   11d94:	ldr	r3, [pc, #32]	; 11dbc <__assert_fail@plt+0xde4>
   11d98:	str	r5, [r3]
   11d9c:	ldr	r3, [pc, #28]	; 11dc0 <__assert_fail@plt+0xde8>
   11da0:	str	r5, [r3]
   11da4:	pop	{r4, r5, r6, pc}
   11da8:	andeq	r6, r2, r8, asr r1
   11dac:	andeq	r5, r1, r8, lsl #15
   11db0:	andeq	r5, r1, r0, asr #15
   11db4:	andeq	r5, r1, r8, asr #15
   11db8:	andeq	r6, r2, r8, asr #2
   11dbc:	muleq	r2, r8, r1
   11dc0:	andeq	r6, r2, ip, asr #2
   11dc4:	push	{r4, r5, r6, lr}
   11dc8:	mov	r2, #48	; 0x30
   11dcc:	mov	r5, r1
   11dd0:	mov	r1, #0
   11dd4:	mov	r4, r0
   11dd8:	bl	10ef4 <memset@plt>
   11ddc:	cmp	r5, #10
   11de0:	bne	11de8 <__assert_fail@plt+0xe10>
   11de4:	bl	10fcc <abort@plt>
   11de8:	str	r5, [r4]
   11dec:	mov	r0, r4
   11df0:	pop	{r4, r5, r6, pc}
   11df4:	push	{r4, r5, r6, lr}
   11df8:	mov	r4, r0
   11dfc:	mov	r5, r1
   11e00:	bl	1469c <__assert_fail@plt+0x36c4>
   11e04:	ldrb	r3, [r0]
   11e08:	bic	r3, r3, #32
   11e0c:	cmp	r3, #85	; 0x55
   11e10:	bne	11e80 <__assert_fail@plt+0xea8>
   11e14:	ldrb	r3, [r0, #1]
   11e18:	bic	r3, r3, #32
   11e1c:	cmp	r3, #84	; 0x54
   11e20:	bne	11e58 <__assert_fail@plt+0xe80>
   11e24:	ldrb	r3, [r0, #2]
   11e28:	bic	r3, r3, #32
   11e2c:	cmp	r3, #70	; 0x46
   11e30:	bne	11e58 <__assert_fail@plt+0xe80>
   11e34:	ldrb	r3, [r0, #3]
   11e38:	cmp	r3, #45	; 0x2d
   11e3c:	bne	11e58 <__assert_fail@plt+0xe80>
   11e40:	ldrb	r3, [r0, #4]
   11e44:	cmp	r3, #56	; 0x38
   11e48:	bne	11e58 <__assert_fail@plt+0xe80>
   11e4c:	ldrb	r3, [r0, #5]
   11e50:	cmp	r3, #0
   11e54:	beq	11e6c <__assert_fail@plt+0xe94>
   11e58:	ldr	r1, [pc, #144]	; 11ef0 <__assert_fail@plt+0xf18>
   11e5c:	ldr	r0, [pc, #144]	; 11ef4 <__assert_fail@plt+0xf1c>
   11e60:	cmp	r5, #9
   11e64:	movne	r0, r1
   11e68:	pop	{r4, r5, r6, pc}
   11e6c:	ldrb	r3, [r4]
   11e70:	ldr	r1, [pc, #128]	; 11ef8 <__assert_fail@plt+0xf20>
   11e74:	ldr	r0, [pc, #128]	; 11efc <__assert_fail@plt+0xf24>
   11e78:	cmp	r3, #96	; 0x60
   11e7c:	b	11e64 <__assert_fail@plt+0xe8c>
   11e80:	cmp	r3, #71	; 0x47
   11e84:	bne	11e58 <__assert_fail@plt+0xe80>
   11e88:	ldrb	r3, [r0, #1]
   11e8c:	bic	r3, r3, #32
   11e90:	cmp	r3, #66	; 0x42
   11e94:	bne	11e58 <__assert_fail@plt+0xe80>
   11e98:	ldrb	r3, [r0, #2]
   11e9c:	cmp	r3, #49	; 0x31
   11ea0:	bne	11e58 <__assert_fail@plt+0xe80>
   11ea4:	ldrb	r3, [r0, #3]
   11ea8:	cmp	r3, #56	; 0x38
   11eac:	bne	11e58 <__assert_fail@plt+0xe80>
   11eb0:	ldrb	r3, [r0, #4]
   11eb4:	cmp	r3, #48	; 0x30
   11eb8:	bne	11e58 <__assert_fail@plt+0xe80>
   11ebc:	ldrb	r3, [r0, #5]
   11ec0:	cmp	r3, #51	; 0x33
   11ec4:	bne	11e58 <__assert_fail@plt+0xe80>
   11ec8:	ldrb	r3, [r0, #6]
   11ecc:	cmp	r3, #48	; 0x30
   11ed0:	bne	11e58 <__assert_fail@plt+0xe80>
   11ed4:	ldrb	r3, [r0, #7]
   11ed8:	cmp	r3, #0
   11edc:	bne	11e58 <__assert_fail@plt+0xe80>
   11ee0:	ldrb	r3, [r4]
   11ee4:	ldr	r1, [pc, #20]	; 11f00 <__assert_fail@plt+0xf28>
   11ee8:	ldr	r0, [pc, #20]	; 11f04 <__assert_fail@plt+0xf2c>
   11eec:	b	11e78 <__assert_fail@plt+0xea0>
   11ef0:	andeq	r5, r1, r1, lsr r8
   11ef4:	andeq	r5, r1, pc, lsr #16
   11ef8:	andeq	r5, r1, r4, lsr #16
   11efc:	andeq	r5, r1, r0, lsr #16
   11f00:	andeq	r5, r1, ip, lsr #16
   11f04:	andeq	r5, r1, r8, lsr #16
   11f08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f0c:	sub	sp, sp, #108	; 0x6c
   11f10:	mov	r8, r0
   11f14:	str	r3, [sp, #36]	; 0x24
   11f18:	mov	r5, r1
   11f1c:	str	r2, [sp, #44]	; 0x2c
   11f20:	ldr	sl, [sp, #144]	; 0x90
   11f24:	bl	10e10 <__ctype_get_mb_cur_max@plt>
   11f28:	ldr	r3, [sp, #148]	; 0x94
   11f2c:	mov	r7, #0
   11f30:	str	r7, [sp, #48]	; 0x30
   11f34:	lsr	r6, r3, #1
   11f38:	and	r6, r6, #1
   11f3c:	mov	r3, #1
   11f40:	str	r3, [sp, #72]	; 0x48
   11f44:	str	r7, [sp, #24]
   11f48:	str	r7, [sp, #32]
   11f4c:	str	r7, [sp, #40]	; 0x28
   11f50:	str	r7, [sp, #60]	; 0x3c
   11f54:	str	r0, [sp, #76]	; 0x4c
   11f58:	cmp	sl, #10
   11f5c:	ldrls	pc, [pc, sl, lsl #2]
   11f60:	b	1219c <__assert_fail@plt+0x11c4>
   11f64:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11f68:	andeq	r2, r1, r4, lsr #24
   11f6c:	andeq	r2, r1, r8, ror #2
   11f70:			; <UNDEFINED> instruction: 0x000121b4
   11f74:	andeq	r2, r1, r4, asr #2
   11f78:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   11f7c:	andeq	r2, r1, r4, lsl #24
   11f80:	andeq	r2, r1, r0, lsr #3
   11f84:	muleq	r1, r4, r0
   11f88:	muleq	r1, r4, r0
   11f8c:	muleq	r1, r4, r0
   11f90:	mov	r6, #0
   11f94:	mov	r4, #0
   11f98:	b	11fc8 <__assert_fail@plt+0xff0>
   11f9c:	cmp	r6, #0
   11fa0:	bne	121c4 <__assert_fail@plt+0x11ec>
   11fa4:	cmp	r5, #0
   11fa8:	movne	r3, #34	; 0x22
   11fac:	strbne	r3, [r8]
   11fb0:	mov	r3, #1
   11fb4:	str	r3, [sp, #24]
   11fb8:	str	r3, [sp, #32]
   11fbc:	mov	r4, #1
   11fc0:	ldr	r3, [pc, #3172]	; 12c2c <__assert_fail@plt+0x1c54>
   11fc4:	str	r3, [sp, #40]	; 0x28
   11fc8:	mov	r9, r5
   11fcc:	mov	r3, #0
   11fd0:	str	r7, [sp, #68]	; 0x44
   11fd4:	str	r3, [sp, #28]
   11fd8:	ldr	r3, [sp, #36]	; 0x24
   11fdc:	cmn	r3, #1
   11fe0:	bne	12b70 <__assert_fail@plt+0x1b98>
   11fe4:	ldr	r3, [sp, #44]	; 0x2c
   11fe8:	ldr	r2, [sp, #28]
   11fec:	ldrb	r3, [r3, r2]
   11ff0:	adds	r3, r3, #0
   11ff4:	movne	r3, #1
   11ff8:	str	r3, [sp, #52]	; 0x34
   11ffc:	ldr	r3, [sp, #52]	; 0x34
   12000:	cmp	r3, #0
   12004:	bne	121ec <__assert_fail@plt+0x1214>
   12008:	sub	r2, sl, #2
   1200c:	clz	r2, r2
   12010:	lsr	r2, r2, #5
   12014:	and	r3, r6, r2
   12018:	cmp	r4, #0
   1201c:	movne	r3, #0
   12020:	andeq	r3, r3, #1
   12024:	cmp	r3, #0
   12028:	bne	123b4 <__assert_fail@plt+0x13dc>
   1202c:	eor	r3, r6, #1
   12030:	ands	r2, r2, r3
   12034:	beq	12ba8 <__assert_fail@plt+0x1bd0>
   12038:	ldr	r3, [sp, #68]	; 0x44
   1203c:	cmp	r3, #0
   12040:	beq	12be0 <__assert_fail@plt+0x1c08>
   12044:	ldr	r3, [sp, #72]	; 0x48
   12048:	cmp	r3, #0
   1204c:	beq	12b84 <__assert_fail@plt+0x1bac>
   12050:	ldr	r3, [sp, #160]	; 0xa0
   12054:	ldr	r2, [sp, #44]	; 0x2c
   12058:	str	r3, [sp, #16]
   1205c:	ldr	r3, [sp, #156]	; 0x9c
   12060:	ldr	r1, [sp, #60]	; 0x3c
   12064:	str	r3, [sp, #12]
   12068:	ldr	r3, [sp, #152]	; 0x98
   1206c:	str	r3, [sp, #8]
   12070:	ldr	r3, [sp, #148]	; 0x94
   12074:	str	r3, [sp, #4]
   12078:	mov	r3, #5
   1207c:	str	r3, [sp]
   12080:	ldr	r3, [sp, #36]	; 0x24
   12084:	mov	r0, r8
   12088:	bl	11f08 <__assert_fail@plt+0xf30>
   1208c:	mov	r4, r0
   12090:	b	12bd4 <__assert_fail@plt+0x1bfc>
   12094:	cmp	sl, #10
   12098:	beq	120f4 <__assert_fail@plt+0x111c>
   1209c:	ldr	r4, [pc, #2956]	; 12c30 <__assert_fail@plt+0x1c58>
   120a0:	mov	r2, #5
   120a4:	mov	r1, r4
   120a8:	mov	r0, #0
   120ac:	bl	10dc8 <dcgettext@plt>
   120b0:	cmp	r0, r4
   120b4:	str	r0, [sp, #156]	; 0x9c
   120b8:	bne	120c8 <__assert_fail@plt+0x10f0>
   120bc:	mov	r1, sl
   120c0:	bl	11df4 <__assert_fail@plt+0xe1c>
   120c4:	str	r0, [sp, #156]	; 0x9c
   120c8:	ldr	r4, [pc, #2916]	; 12c34 <__assert_fail@plt+0x1c5c>
   120cc:	mov	r2, #5
   120d0:	mov	r1, r4
   120d4:	mov	r0, #0
   120d8:	bl	10dc8 <dcgettext@plt>
   120dc:	cmp	r0, r4
   120e0:	str	r0, [sp, #160]	; 0xa0
   120e4:	bne	120f4 <__assert_fail@plt+0x111c>
   120e8:	mov	r1, sl
   120ec:	bl	11df4 <__assert_fail@plt+0xe1c>
   120f0:	str	r0, [sp, #160]	; 0xa0
   120f4:	cmp	r6, #0
   120f8:	moveq	r4, r6
   120fc:	beq	12114 <__assert_fail@plt+0x113c>
   12100:	mov	r4, #0
   12104:	b	12124 <__assert_fail@plt+0x114c>
   12108:	cmp	r5, r4
   1210c:	strbhi	r3, [r8, r4]
   12110:	add	r4, r4, #1
   12114:	ldr	r3, [sp, #156]	; 0x9c
   12118:	ldrb	r3, [r3, r4]
   1211c:	cmp	r3, #0
   12120:	bne	12108 <__assert_fail@plt+0x1130>
   12124:	ldr	r0, [sp, #160]	; 0xa0
   12128:	bl	10ec4 <strlen@plt>
   1212c:	ldr	r3, [sp, #160]	; 0xa0
   12130:	str	r3, [sp, #40]	; 0x28
   12134:	mov	r3, #1
   12138:	str	r3, [sp, #24]
   1213c:	str	r0, [sp, #32]
   12140:	b	11fc8 <__assert_fail@plt+0xff0>
   12144:	mov	r3, #1
   12148:	cmp	r6, #0
   1214c:	streq	r3, [sp, #24]
   12150:	beq	12170 <__assert_fail@plt+0x1198>
   12154:	str	r3, [sp, #32]
   12158:	ldr	r3, [pc, #2772]	; 12c34 <__assert_fail@plt+0x1c5c>
   1215c:	mov	r4, #0
   12160:	str	r3, [sp, #40]	; 0x28
   12164:	b	12194 <__assert_fail@plt+0x11bc>
   12168:	cmp	r6, #0
   1216c:	bne	121dc <__assert_fail@plt+0x1204>
   12170:	cmp	r5, #0
   12174:	movne	r3, #39	; 0x27
   12178:	strbne	r3, [r8]
   1217c:	mov	r3, #1
   12180:	str	r3, [sp, #32]
   12184:	mov	r6, #0
   12188:	ldr	r3, [pc, #2724]	; 12c34 <__assert_fail@plt+0x1c5c>
   1218c:	mov	r4, #1
   12190:	str	r3, [sp, #40]	; 0x28
   12194:	mov	sl, #2
   12198:	b	11fc8 <__assert_fail@plt+0xff0>
   1219c:	bl	10fcc <abort@plt>
   121a0:	mov	r6, #0
   121a4:	mov	r3, #1
   121a8:	str	r3, [sp, #24]
   121ac:	mov	r4, r6
   121b0:	b	11fc8 <__assert_fail@plt+0xff0>
   121b4:	mov	r6, #1
   121b8:	str	r6, [sp, #24]
   121bc:	str	r6, [sp, #32]
   121c0:	b	12158 <__assert_fail@plt+0x1180>
   121c4:	mov	r3, #1
   121c8:	str	r3, [sp, #32]
   121cc:	ldr	r3, [pc, #2648]	; 12c2c <__assert_fail@plt+0x1c54>
   121d0:	str	r6, [sp, #24]
   121d4:	str	r3, [sp, #40]	; 0x28
   121d8:	b	11f94 <__assert_fail@plt+0xfbc>
   121dc:	mov	r3, #1
   121e0:	str	r3, [sp, #32]
   121e4:	ldr	r3, [pc, #2632]	; 12c34 <__assert_fail@plt+0x1c5c>
   121e8:	b	121d4 <__assert_fail@plt+0x11fc>
   121ec:	ldr	r3, [sp, #32]
   121f0:	ldr	fp, [sp, #24]
   121f4:	cmp	sl, #2
   121f8:	moveq	fp, #0
   121fc:	andne	fp, fp, #1
   12200:	adds	r5, r3, #0
   12204:	movne	r5, #1
   12208:	ands	r3, r5, fp
   1220c:	str	r3, [sp, #64]	; 0x40
   12210:	beq	122e0 <__assert_fail@plt+0x1308>
   12214:	ldr	r2, [sp, #32]
   12218:	ldr	r3, [sp, #28]
   1221c:	add	r7, r3, r2
   12220:	mov	r3, r2
   12224:	ldr	r2, [sp, #36]	; 0x24
   12228:	cmp	r3, #1
   1222c:	movls	r3, #0
   12230:	movhi	r3, #1
   12234:	cmn	r2, #1
   12238:	movne	r3, #0
   1223c:	cmp	r3, #0
   12240:	beq	12250 <__assert_fail@plt+0x1278>
   12244:	ldr	r0, [sp, #44]	; 0x2c
   12248:	bl	10ec4 <strlen@plt>
   1224c:	str	r0, [sp, #36]	; 0x24
   12250:	ldr	r3, [sp, #36]	; 0x24
   12254:	cmp	r3, r7
   12258:	bcc	122d8 <__assert_fail@plt+0x1300>
   1225c:	ldr	r3, [sp, #44]	; 0x2c
   12260:	ldr	r0, [sp, #28]
   12264:	ldr	r2, [sp, #32]
   12268:	ldr	r1, [sp, #40]	; 0x28
   1226c:	add	r0, r3, r0
   12270:	bl	10db0 <memcmp@plt>
   12274:	cmp	r0, #0
   12278:	bne	122d8 <__assert_fail@plt+0x1300>
   1227c:	cmp	r6, #0
   12280:	beq	122e0 <__assert_fail@plt+0x1308>
   12284:	str	r6, [sp, #24]
   12288:	ldr	r3, [sp, #24]
   1228c:	ldr	r2, [sp, #44]	; 0x2c
   12290:	cmp	sl, #2
   12294:	movne	r3, #0
   12298:	andeq	r3, r3, #1
   1229c:	cmp	r3, #0
   122a0:	ldr	r3, [sp, #160]	; 0xa0
   122a4:	movne	sl, #4
   122a8:	str	r3, [sp, #16]
   122ac:	ldr	r3, [sp, #156]	; 0x9c
   122b0:	str	sl, [sp]
   122b4:	str	r3, [sp, #12]
   122b8:	mov	r3, #0
   122bc:	str	r3, [sp, #8]
   122c0:	ldr	r3, [sp, #148]	; 0x94
   122c4:	mov	r1, r9
   122c8:	bic	r3, r3, #2
   122cc:	str	r3, [sp, #4]
   122d0:	ldr	r3, [sp, #36]	; 0x24
   122d4:	b	12084 <__assert_fail@plt+0x10ac>
   122d8:	mov	r3, #0
   122dc:	str	r3, [sp, #64]	; 0x40
   122e0:	ldr	r2, [sp, #28]
   122e4:	ldr	r3, [sp, #44]	; 0x2c
   122e8:	add	r3, r3, r2
   122ec:	str	r3, [sp, #80]	; 0x50
   122f0:	ldr	r3, [sp, #44]	; 0x2c
   122f4:	ldrb	r7, [r3, r2]
   122f8:	cmp	r7, #58	; 0x3a
   122fc:	bhi	12464 <__assert_fail@plt+0x148c>
   12300:	cmp	r7, #43	; 0x2b
   12304:	bcs	124b8 <__assert_fail@plt+0x14e0>
   12308:	cmp	r7, #32
   1230c:	beq	12510 <__assert_fail@plt+0x1538>
   12310:	bhi	123bc <__assert_fail@plt+0x13e4>
   12314:	cmp	r7, #9
   12318:	beq	127c4 <__assert_fail@plt+0x17ec>
   1231c:	bhi	12380 <__assert_fail@plt+0x13a8>
   12320:	cmp	r7, #7
   12324:	beq	12870 <__assert_fail@plt+0x1898>
   12328:	bhi	1252c <__assert_fail@plt+0x1554>
   1232c:	cmp	r7, #0
   12330:	beq	12548 <__assert_fail@plt+0x1570>
   12334:	ldr	r3, [sp, #76]	; 0x4c
   12338:	cmp	r3, #1
   1233c:	bne	128b4 <__assert_fail@plt+0x18dc>
   12340:	bl	10eac <__ctype_b_loc@plt>
   12344:	sxth	r3, r7
   12348:	lsl	r3, r3, #1
   1234c:	ldr	r2, [r0]
   12350:	ldrh	r5, [r2, r3]
   12354:	ldr	r3, [sp, #76]	; 0x4c
   12358:	str	r3, [sp, #56]	; 0x38
   1235c:	lsr	r5, r5, #14
   12360:	and	r5, r5, #1
   12364:	ldr	r3, [sp, #24]
   12368:	eor	fp, r5, #1
   1236c:	and	fp, fp, r3
   12370:	ands	fp, fp, #255	; 0xff
   12374:	beq	126fc <__assert_fail@plt+0x1724>
   12378:	mov	r5, #0
   1237c:	b	12960 <__assert_fail@plt+0x1988>
   12380:	cmp	r7, #11
   12384:	beq	127cc <__assert_fail@plt+0x17f4>
   12388:	bcc	12868 <__assert_fail@plt+0x1890>
   1238c:	cmp	r7, #12
   12390:	beq	12878 <__assert_fail@plt+0x18a0>
   12394:	cmp	r7, #13
   12398:	moveq	r3, #114	; 0x72
   1239c:	bne	12334 <__assert_fail@plt+0x135c>
   123a0:	cmp	sl, #2
   123a4:	movne	r2, #0
   123a8:	andeq	r2, r6, #1
   123ac:	cmp	r2, #0
   123b0:	beq	12530 <__assert_fail@plt+0x1558>
   123b4:	mov	sl, #2
   123b8:	b	12288 <__assert_fail@plt+0x12b0>
   123bc:	cmp	r7, #37	; 0x25
   123c0:	beq	124b8 <__assert_fail@plt+0x14e0>
   123c4:	bhi	123d8 <__assert_fail@plt+0x1400>
   123c8:	cmp	r7, #35	; 0x23
   123cc:	beq	12504 <__assert_fail@plt+0x152c>
   123d0:	mov	r5, #0
   123d4:	b	12514 <__assert_fail@plt+0x153c>
   123d8:	cmp	r7, #39	; 0x27
   123dc:	bne	123d0 <__assert_fail@plt+0x13f8>
   123e0:	cmp	sl, #2
   123e4:	ldrne	r5, [sp, #52]	; 0x34
   123e8:	movne	r3, r5
   123ec:	strne	r3, [sp, #68]	; 0x44
   123f0:	bne	124bc <__assert_fail@plt+0x14e4>
   123f4:	cmp	r6, #0
   123f8:	bne	12288 <__assert_fail@plt+0x12b0>
   123fc:	ldr	r2, [sp, #60]	; 0x3c
   12400:	adds	r3, r9, #0
   12404:	movne	r3, #1
   12408:	cmp	r2, #0
   1240c:	movne	r3, #0
   12410:	cmp	r3, #0
   12414:	strne	r9, [sp, #60]	; 0x3c
   12418:	movne	r9, #0
   1241c:	bne	1242c <__assert_fail@plt+0x1454>
   12420:	cmp	r9, r4
   12424:	movhi	r3, #39	; 0x27
   12428:	strbhi	r3, [r8, r4]
   1242c:	add	r3, r4, #1
   12430:	cmp	r3, r9
   12434:	movcc	r2, #92	; 0x5c
   12438:	strbcc	r2, [r8, r3]
   1243c:	add	r3, r4, #2
   12440:	cmp	r3, r9
   12444:	ldr	r5, [sp, #52]	; 0x34
   12448:	movcc	r2, #39	; 0x27
   1244c:	strbcc	r2, [r8, r3]
   12450:	add	r4, r4, #3
   12454:	mov	fp, r6
   12458:	str	r5, [sp, #68]	; 0x44
   1245c:	str	r6, [sp, #48]	; 0x30
   12460:	b	126fc <__assert_fail@plt+0x1724>
   12464:	cmp	r7, #94	; 0x5e
   12468:	beq	123d0 <__assert_fail@plt+0x13f8>
   1246c:	bhi	124c4 <__assert_fail@plt+0x14ec>
   12470:	cmp	r7, #90	; 0x5a
   12474:	bhi	124ac <__assert_fail@plt+0x14d4>
   12478:	cmp	r7, #65	; 0x41
   1247c:	bcs	124b8 <__assert_fail@plt+0x14e0>
   12480:	cmp	r7, #62	; 0x3e
   12484:	bls	123d0 <__assert_fail@plt+0x13f8>
   12488:	cmp	r7, #63	; 0x3f
   1248c:	bne	12334 <__assert_fail@plt+0x135c>
   12490:	cmp	sl, #2
   12494:	beq	12638 <__assert_fail@plt+0x1660>
   12498:	cmp	sl, #5
   1249c:	beq	12648 <__assert_fail@plt+0x1670>
   124a0:	mov	fp, #0
   124a4:	mov	r5, fp
   124a8:	b	126fc <__assert_fail@plt+0x1724>
   124ac:	cmp	r7, #92	; 0x5c
   124b0:	beq	127d4 <__assert_fail@plt+0x17fc>
   124b4:	bls	123d0 <__assert_fail@plt+0x13f8>
   124b8:	ldr	r5, [sp, #52]	; 0x34
   124bc:	mov	fp, #0
   124c0:	b	126fc <__assert_fail@plt+0x1724>
   124c4:	cmp	r7, #122	; 0x7a
   124c8:	bhi	124e8 <__assert_fail@plt+0x1510>
   124cc:	cmp	r7, #97	; 0x61
   124d0:	bcs	124b8 <__assert_fail@plt+0x14e0>
   124d4:	cmp	r7, #95	; 0x5f
   124d8:	beq	124b8 <__assert_fail@plt+0x14e0>
   124dc:	cmp	r7, #96	; 0x60
   124e0:	bne	12334 <__assert_fail@plt+0x135c>
   124e4:	b	123d0 <__assert_fail@plt+0x13f8>
   124e8:	cmp	r7, #124	; 0x7c
   124ec:	beq	123d0 <__assert_fail@plt+0x13f8>
   124f0:	bcc	12880 <__assert_fail@plt+0x18a8>
   124f4:	cmp	r7, #125	; 0x7d
   124f8:	beq	12880 <__assert_fail@plt+0x18a8>
   124fc:	cmp	r7, #126	; 0x7e
   12500:	bne	12334 <__assert_fail@plt+0x135c>
   12504:	ldr	r3, [sp, #28]
   12508:	cmp	r3, #0
   1250c:	bne	12640 <__assert_fail@plt+0x1668>
   12510:	ldr	r5, [sp, #52]	; 0x34
   12514:	cmp	sl, #2
   12518:	movne	fp, #0
   1251c:	andeq	fp, r6, #1
   12520:	cmp	fp, #0
   12524:	beq	126fc <__assert_fail@plt+0x1724>
   12528:	b	123b4 <__assert_fail@plt+0x13dc>
   1252c:	mov	r3, #98	; 0x62
   12530:	ldr	r2, [sp, #24]
   12534:	cmp	r2, #0
   12538:	beq	12640 <__assert_fail@plt+0x1668>
   1253c:	mov	r7, r3
   12540:	mov	r5, #0
   12544:	b	12754 <__assert_fail@plt+0x177c>
   12548:	ldr	r3, [sp, #24]
   1254c:	cmp	r3, #0
   12550:	beq	1261c <__assert_fail@plt+0x1644>
   12554:	cmp	r6, #0
   12558:	bne	12284 <__assert_fail@plt+0x12ac>
   1255c:	ldr	r3, [sp, #48]	; 0x30
   12560:	eor	r2, r3, #1
   12564:	cmp	sl, #2
   12568:	movne	r2, #0
   1256c:	andeq	r2, r2, #1
   12570:	cmp	r2, #0
   12574:	moveq	r3, r4
   12578:	beq	125b0 <__assert_fail@plt+0x15d8>
   1257c:	cmp	r9, r4
   12580:	movhi	r3, #39	; 0x27
   12584:	strbhi	r3, [r8, r4]
   12588:	add	r3, r4, #1
   1258c:	cmp	r9, r3
   12590:	movhi	r1, #36	; 0x24
   12594:	strbhi	r1, [r8, r3]
   12598:	add	r3, r4, #2
   1259c:	cmp	r9, r3
   125a0:	movhi	r1, #39	; 0x27
   125a4:	strbhi	r1, [r8, r3]
   125a8:	add	r3, r4, #3
   125ac:	str	r2, [sp, #48]	; 0x30
   125b0:	cmp	r9, r3
   125b4:	movhi	r2, #92	; 0x5c
   125b8:	strbhi	r2, [r8, r3]
   125bc:	cmp	fp, #0
   125c0:	add	r4, r3, #1
   125c4:	beq	12b54 <__assert_fail@plt+0x1b7c>
   125c8:	ldr	r2, [sp, #28]
   125cc:	ldr	r1, [sp, #36]	; 0x24
   125d0:	add	r2, r2, #1
   125d4:	cmp	r1, r2
   125d8:	bls	12614 <__assert_fail@plt+0x163c>
   125dc:	ldr	r1, [sp, #44]	; 0x2c
   125e0:	mov	r7, #48	; 0x30
   125e4:	ldrb	r2, [r1, r2]
   125e8:	sub	r2, r2, #48	; 0x30
   125ec:	cmp	r2, #9
   125f0:	movhi	r5, r6
   125f4:	bhi	126fc <__assert_fail@plt+0x1724>
   125f8:	cmp	r9, r4
   125fc:	add	r2, r3, #2
   12600:	strbhi	r7, [r8, r4]
   12604:	cmp	r9, r2
   12608:	add	r4, r3, #3
   1260c:	movhi	r1, #48	; 0x30
   12610:	strbhi	r1, [r8, r2]
   12614:	mov	r5, r6
   12618:	b	12b5c <__assert_fail@plt+0x1b84>
   1261c:	ldr	r3, [sp, #148]	; 0x94
   12620:	tst	r3, #1
   12624:	ldreq	r5, [sp, #24]
   12628:	beq	12b68 <__assert_fail@plt+0x1b90>
   1262c:	ldr	r3, [sp, #28]
   12630:	add	r3, r3, #1
   12634:	b	11fd4 <__assert_fail@plt+0xffc>
   12638:	cmp	r6, #0
   1263c:	bne	12288 <__assert_fail@plt+0x12b0>
   12640:	mov	r5, #0
   12644:	b	124bc <__assert_fail@plt+0x14e4>
   12648:	ldr	r3, [sp, #148]	; 0x94
   1264c:	tst	r3, #4
   12650:	beq	12640 <__assert_fail@plt+0x1668>
   12654:	ldr	r3, [sp, #28]
   12658:	add	r2, r3, #2
   1265c:	ldr	r3, [sp, #36]	; 0x24
   12660:	cmp	r3, r2
   12664:	bls	12640 <__assert_fail@plt+0x1668>
   12668:	ldr	r3, [sp, #44]	; 0x2c
   1266c:	ldr	r1, [sp, #28]
   12670:	add	r3, r3, r1
   12674:	ldrb	r0, [r3, #1]
   12678:	cmp	r0, #63	; 0x3f
   1267c:	bne	12640 <__assert_fail@plt+0x1668>
   12680:	ldr	r3, [sp, #44]	; 0x2c
   12684:	ldrb	r1, [r3, r2]
   12688:	sub	r3, r1, #33	; 0x21
   1268c:	uxtb	r3, r3
   12690:	cmp	r3, #29
   12694:	bhi	12b64 <__assert_fail@plt+0x1b8c>
   12698:	mov	ip, #1
   1269c:	ldr	r5, [pc, #1428]	; 12c38 <__assert_fail@plt+0x1c60>
   126a0:	ands	r5, r5, ip, lsl r3
   126a4:	beq	124bc <__assert_fail@plt+0x14e4>
   126a8:	cmp	r6, #0
   126ac:	bne	12288 <__assert_fail@plt+0x12b0>
   126b0:	add	r3, r4, #1
   126b4:	cmp	r9, r4
   126b8:	strbhi	r0, [r8, r4]
   126bc:	cmp	r9, r3
   126c0:	movhi	r0, #34	; 0x22
   126c4:	strbhi	r0, [r8, r3]
   126c8:	add	r3, r4, #2
   126cc:	cmp	r9, r3
   126d0:	movhi	r0, #34	; 0x22
   126d4:	strbhi	r0, [r8, r3]
   126d8:	add	r3, r4, #3
   126dc:	cmp	r9, r3
   126e0:	add	r4, r4, #4
   126e4:	mov	r5, r6
   126e8:	mov	fp, r6
   126ec:	mov	r7, r1
   126f0:	movhi	r0, #63	; 0x3f
   126f4:	strbhi	r0, [r8, r3]
   126f8:	str	r2, [sp, #28]
   126fc:	ldr	r3, [sp, #24]
   12700:	eor	r3, r3, #1
   12704:	cmp	sl, #2
   12708:	orreq	r3, r3, #1
   1270c:	eor	r3, r3, #1
   12710:	orr	r3, r6, r3
   12714:	tst	r3, #255	; 0xff
   12718:	beq	12748 <__assert_fail@plt+0x1770>
   1271c:	ldr	r3, [sp, #152]	; 0x98
   12720:	cmp	r3, #0
   12724:	beq	12748 <__assert_fail@plt+0x1770>
   12728:	lsr	r2, r7, #5
   1272c:	ldr	r1, [sp, #152]	; 0x98
   12730:	uxtb	r2, r2
   12734:	and	r3, r7, #31
   12738:	ldr	r2, [r1, r2, lsl #2]
   1273c:	lsr	r3, r2, r3
   12740:	tst	r3, #1
   12744:	bne	12754 <__assert_fail@plt+0x177c>
   12748:	ldr	r3, [sp, #64]	; 0x40
   1274c:	cmp	r3, #0
   12750:	beq	127ec <__assert_fail@plt+0x1814>
   12754:	cmp	r6, #0
   12758:	bne	12288 <__assert_fail@plt+0x12b0>
   1275c:	ldr	r3, [sp, #48]	; 0x30
   12760:	eor	r3, r3, #1
   12764:	cmp	sl, #2
   12768:	movne	r3, #0
   1276c:	andeq	r3, r3, #1
   12770:	cmp	r3, #0
   12774:	beq	127ac <__assert_fail@plt+0x17d4>
   12778:	cmp	r9, r4
   1277c:	movhi	r2, #39	; 0x27
   12780:	strbhi	r2, [r8, r4]
   12784:	add	r2, r4, #1
   12788:	cmp	r9, r2
   1278c:	movhi	r1, #36	; 0x24
   12790:	strbhi	r1, [r8, r2]
   12794:	add	r2, r4, #2
   12798:	cmp	r9, r2
   1279c:	add	r4, r4, #3
   127a0:	movhi	r1, #39	; 0x27
   127a4:	strbhi	r1, [r8, r2]
   127a8:	str	r3, [sp, #48]	; 0x30
   127ac:	cmp	r9, r4
   127b0:	movhi	r3, #92	; 0x5c
   127b4:	strbhi	r3, [r8, r4]
   127b8:	ldr	fp, [sp, #52]	; 0x34
   127bc:	add	r4, r4, #1
   127c0:	b	127ec <__assert_fail@plt+0x1814>
   127c4:	mov	r3, #116	; 0x74
   127c8:	b	123a0 <__assert_fail@plt+0x13c8>
   127cc:	mov	r3, #118	; 0x76
   127d0:	b	12530 <__assert_fail@plt+0x1558>
   127d4:	cmp	sl, #2
   127d8:	bne	12848 <__assert_fail@plt+0x1870>
   127dc:	cmp	r6, #0
   127e0:	bne	12288 <__assert_fail@plt+0x12b0>
   127e4:	mov	r5, r6
   127e8:	mov	fp, r6
   127ec:	ldr	r3, [sp, #48]	; 0x30
   127f0:	eor	fp, fp, #1
   127f4:	and	fp, fp, r3
   127f8:	tst	fp, #255	; 0xff
   127fc:	beq	12828 <__assert_fail@plt+0x1850>
   12800:	cmp	r9, r4
   12804:	movhi	r3, #39	; 0x27
   12808:	strbhi	r3, [r8, r4]
   1280c:	add	r3, r4, #1
   12810:	cmp	r9, r3
   12814:	movhi	r2, #39	; 0x27
   12818:	add	r4, r4, #2
   1281c:	strbhi	r2, [r8, r3]
   12820:	mov	r3, #0
   12824:	str	r3, [sp, #48]	; 0x30
   12828:	cmp	r9, r4
   1282c:	strbhi	r7, [r8, r4]
   12830:	ldr	r3, [sp, #72]	; 0x48
   12834:	cmp	r5, #0
   12838:	moveq	r3, #0
   1283c:	add	r4, r4, #1
   12840:	str	r3, [sp, #72]	; 0x48
   12844:	b	1262c <__assert_fail@plt+0x1654>
   12848:	ldr	r3, [sp, #24]
   1284c:	and	r3, r3, r6
   12850:	tst	r5, r3
   12854:	moveq	r3, r7
   12858:	beq	123a0 <__assert_fail@plt+0x13c8>
   1285c:	mov	fp, #0
   12860:	mov	r5, fp
   12864:	b	127ec <__assert_fail@plt+0x1814>
   12868:	mov	r3, #110	; 0x6e
   1286c:	b	123a0 <__assert_fail@plt+0x13c8>
   12870:	mov	r3, #97	; 0x61
   12874:	b	12530 <__assert_fail@plt+0x1558>
   12878:	mov	r3, #102	; 0x66
   1287c:	b	12530 <__assert_fail@plt+0x1558>
   12880:	ldr	r3, [sp, #36]	; 0x24
   12884:	cmn	r3, #1
   12888:	bne	128a8 <__assert_fail@plt+0x18d0>
   1288c:	ldr	r3, [sp, #44]	; 0x2c
   12890:	ldrb	r3, [r3, #1]
   12894:	adds	r3, r3, #0
   12898:	movne	r3, #1
   1289c:	cmp	r3, #0
   128a0:	bne	12640 <__assert_fail@plt+0x1668>
   128a4:	b	12504 <__assert_fail@plt+0x152c>
   128a8:	ldr	r3, [sp, #36]	; 0x24
   128ac:	subs	r3, r3, #1
   128b0:	b	12898 <__assert_fail@plt+0x18c0>
   128b4:	mov	r3, #0
   128b8:	str	r3, [sp, #96]	; 0x60
   128bc:	str	r3, [sp, #100]	; 0x64
   128c0:	ldr	r3, [sp, #36]	; 0x24
   128c4:	cmn	r3, #1
   128c8:	bne	128d8 <__assert_fail@plt+0x1900>
   128cc:	ldr	r0, [sp, #44]	; 0x2c
   128d0:	bl	10ec4 <strlen@plt>
   128d4:	str	r0, [sp, #36]	; 0x24
   128d8:	ldr	r5, [sp, #52]	; 0x34
   128dc:	mov	r3, #0
   128e0:	str	r3, [sp, #56]	; 0x38
   128e4:	ldr	r3, [sp, #28]
   128e8:	ldr	r2, [sp, #56]	; 0x38
   128ec:	ldr	r1, [sp, #36]	; 0x24
   128f0:	add	r2, r3, r2
   128f4:	ldr	r3, [sp, #44]	; 0x2c
   128f8:	add	r0, sp, #92	; 0x5c
   128fc:	add	fp, r3, r2
   12900:	sub	r2, r1, r2
   12904:	add	r3, sp, #96	; 0x60
   12908:	mov	r1, fp
   1290c:	bl	146d0 <__assert_fail@plt+0x36f8>
   12910:	subs	r2, r0, #0
   12914:	beq	12954 <__assert_fail@plt+0x197c>
   12918:	cmn	r2, #1
   1291c:	beq	12b2c <__assert_fail@plt+0x1b54>
   12920:	cmn	r2, #2
   12924:	bne	12a9c <__assert_fail@plt+0x1ac4>
   12928:	ldr	r2, [sp, #56]	; 0x38
   1292c:	ldr	r3, [sp, #28]
   12930:	add	r3, r3, r2
   12934:	ldr	r2, [sp, #36]	; 0x24
   12938:	cmp	r2, r3
   1293c:	bls	12b2c <__assert_fail@plt+0x1b54>
   12940:	ldr	r3, [sp, #80]	; 0x50
   12944:	ldr	r2, [sp, #56]	; 0x38
   12948:	ldrb	r5, [r3, r2]
   1294c:	cmp	r5, #0
   12950:	bne	12a8c <__assert_fail@plt+0x1ab4>
   12954:	ldr	r3, [sp, #56]	; 0x38
   12958:	cmp	r3, #1
   1295c:	bls	12364 <__assert_fail@plt+0x138c>
   12960:	ldr	r2, [sp, #56]	; 0x38
   12964:	ldr	r3, [sp, #28]
   12968:	mov	fp, #0
   1296c:	add	r3, r3, r2
   12970:	ldr	r2, [sp, #24]
   12974:	str	r3, [sp, #52]	; 0x34
   12978:	eor	r3, r5, #1
   1297c:	and	r3, r3, r2
   12980:	mov	ip, #92	; 0x5c
   12984:	uxtb	r3, r3
   12988:	mov	r2, #39	; 0x27
   1298c:	cmp	r3, #0
   12990:	beq	12b34 <__assert_fail@plt+0x1b5c>
   12994:	cmp	r6, #0
   12998:	bne	12284 <__assert_fail@plt+0x12ac>
   1299c:	ldr	r1, [sp, #48]	; 0x30
   129a0:	eor	r1, r1, #1
   129a4:	cmp	sl, #2
   129a8:	movne	r1, #0
   129ac:	andeq	r1, r1, #1
   129b0:	cmp	r1, #0
   129b4:	beq	129e4 <__assert_fail@plt+0x1a0c>
   129b8:	add	r0, r4, #1
   129bc:	cmp	r9, r4
   129c0:	strbhi	r2, [r8, r4]
   129c4:	cmp	r9, r0
   129c8:	movhi	lr, #36	; 0x24
   129cc:	strbhi	lr, [r8, r0]
   129d0:	add	r0, r4, #2
   129d4:	add	r4, r4, #3
   129d8:	cmp	r9, r0
   129dc:	strbhi	r2, [r8, r0]
   129e0:	str	r1, [sp, #48]	; 0x30
   129e4:	add	r0, r4, #1
   129e8:	cmp	r9, r4
   129ec:	strbhi	ip, [r8, r4]
   129f0:	cmp	r9, r0
   129f4:	lsrhi	r1, r7, #6
   129f8:	addhi	r1, r1, #48	; 0x30
   129fc:	strbhi	r1, [r8, r0]
   12a00:	add	r0, r4, #2
   12a04:	cmp	r9, r0
   12a08:	lsrhi	r1, r7, #3
   12a0c:	and	r7, r7, #7
   12a10:	andhi	r1, r1, #7
   12a14:	add	r4, r4, #3
   12a18:	add	r7, r7, #48	; 0x30
   12a1c:	mov	fp, r3
   12a20:	addhi	r1, r1, #48	; 0x30
   12a24:	strbhi	r1, [r8, r0]
   12a28:	ldr	r1, [sp, #28]
   12a2c:	ldr	r0, [sp, #52]	; 0x34
   12a30:	add	r1, r1, #1
   12a34:	cmp	r0, r1
   12a38:	bls	127ec <__assert_fail@plt+0x1814>
   12a3c:	ldr	lr, [sp, #48]	; 0x30
   12a40:	eor	r0, fp, #1
   12a44:	and	r0, r0, lr
   12a48:	tst	r0, #255	; 0xff
   12a4c:	beq	12a70 <__assert_fail@plt+0x1a98>
   12a50:	add	r0, r4, #1
   12a54:	cmp	r9, r4
   12a58:	strbhi	r2, [r8, r4]
   12a5c:	cmp	r9, r0
   12a60:	add	r4, r4, #2
   12a64:	strbhi	r2, [r8, r0]
   12a68:	mov	r0, #0
   12a6c:	str	r0, [sp, #48]	; 0x30
   12a70:	ldr	r0, [sp, #44]	; 0x2c
   12a74:	cmp	r9, r4
   12a78:	strbhi	r7, [r8, r4]
   12a7c:	str	r1, [sp, #28]
   12a80:	add	r4, r4, #1
   12a84:	ldrb	r7, [r0, r1]
   12a88:	b	1298c <__assert_fail@plt+0x19b4>
   12a8c:	ldr	r3, [sp, #56]	; 0x38
   12a90:	add	r3, r3, #1
   12a94:	str	r3, [sp, #56]	; 0x38
   12a98:	b	12928 <__assert_fail@plt+0x1950>
   12a9c:	cmp	sl, #2
   12aa0:	movne	r3, #0
   12aa4:	andeq	r3, r6, #1
   12aa8:	cmp	r3, #0
   12aac:	movne	r1, #1
   12ab0:	bne	12b0c <__assert_fail@plt+0x1b34>
   12ab4:	ldr	r0, [sp, #92]	; 0x5c
   12ab8:	str	r2, [sp, #84]	; 0x54
   12abc:	bl	10dec <iswprint@plt>
   12ac0:	ldr	r3, [sp, #56]	; 0x38
   12ac4:	ldr	r2, [sp, #84]	; 0x54
   12ac8:	add	r3, r3, r2
   12acc:	str	r3, [sp, #56]	; 0x38
   12ad0:	cmp	r0, #0
   12ad4:	add	r0, sp, #96	; 0x60
   12ad8:	moveq	r5, #0
   12adc:	bl	10da4 <mbsinit@plt>
   12ae0:	cmp	r0, #0
   12ae4:	beq	128e4 <__assert_fail@plt+0x190c>
   12ae8:	b	12954 <__assert_fail@plt+0x197c>
   12aec:	ldrb	r3, [fp, r1]
   12af0:	cmp	r3, #94	; 0x5e
   12af4:	beq	123b4 <__assert_fail@plt+0x13dc>
   12af8:	bhi	12b18 <__assert_fail@plt+0x1b40>
   12afc:	sub	r3, r3, #91	; 0x5b
   12b00:	cmp	r3, #1
   12b04:	bls	123b4 <__assert_fail@plt+0x13dc>
   12b08:	add	r1, r1, #1
   12b0c:	cmp	r1, r2
   12b10:	bne	12aec <__assert_fail@plt+0x1b14>
   12b14:	b	12ab4 <__assert_fail@plt+0x1adc>
   12b18:	cmp	r3, #96	; 0x60
   12b1c:	beq	123b4 <__assert_fail@plt+0x13dc>
   12b20:	cmp	r3, #124	; 0x7c
   12b24:	bne	12b08 <__assert_fail@plt+0x1b30>
   12b28:	b	123b4 <__assert_fail@plt+0x13dc>
   12b2c:	mov	r5, #0
   12b30:	b	12954 <__assert_fail@plt+0x197c>
   12b34:	ldr	r1, [sp, #64]	; 0x40
   12b38:	cmp	r1, #0
   12b3c:	beq	12a28 <__assert_fail@plt+0x1a50>
   12b40:	cmp	r9, r4
   12b44:	strbhi	ip, [r8, r4]
   12b48:	str	r3, [sp, #64]	; 0x40
   12b4c:	add	r4, r4, #1
   12b50:	b	12a28 <__assert_fail@plt+0x1a50>
   12b54:	mov	r5, fp
   12b58:	ldr	fp, [sp, #24]
   12b5c:	mov	r7, #48	; 0x30
   12b60:	b	126fc <__assert_fail@plt+0x1724>
   12b64:	mov	r5, #0
   12b68:	mov	fp, r5
   12b6c:	b	126fc <__assert_fail@plt+0x1724>
   12b70:	ldr	r3, [sp, #36]	; 0x24
   12b74:	ldr	r2, [sp, #28]
   12b78:	subs	r3, r3, r2
   12b7c:	movne	r3, #1
   12b80:	b	11ff8 <__assert_fail@plt+0x1020>
   12b84:	ldr	r3, [sp, #60]	; 0x3c
   12b88:	clz	r7, r9
   12b8c:	cmp	r3, #0
   12b90:	lsr	r7, r7, #5
   12b94:	moveq	r7, #0
   12b98:	cmp	r7, #0
   12b9c:	mov	r5, r3
   12ba0:	bne	11f58 <__assert_fail@plt+0xf80>
   12ba4:	ldr	r3, [sp, #68]	; 0x44
   12ba8:	ldr	r2, [sp, #40]	; 0x28
   12bac:	cmp	r2, #0
   12bb0:	moveq	r3, #0
   12bb4:	andne	r3, r3, #1
   12bb8:	cmp	r3, #0
   12bbc:	movne	r3, r2
   12bc0:	subne	r2, r3, #1
   12bc4:	bne	12bf4 <__assert_fail@plt+0x1c1c>
   12bc8:	cmp	r9, r4
   12bcc:	movhi	r3, #0
   12bd0:	strbhi	r3, [r8, r4]
   12bd4:	mov	r0, r4
   12bd8:	add	sp, sp, #108	; 0x6c
   12bdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12be0:	mov	r3, r2
   12be4:	b	12ba8 <__assert_fail@plt+0x1bd0>
   12be8:	cmp	r9, r4
   12bec:	strbhi	r3, [r8, r4]
   12bf0:	add	r4, r4, #1
   12bf4:	ldrb	r3, [r2, #1]!
   12bf8:	cmp	r3, #0
   12bfc:	bne	12be8 <__assert_fail@plt+0x1c10>
   12c00:	b	12bc8 <__assert_fail@plt+0x1bf0>
   12c04:	ldr	r3, [pc, #32]	; 12c2c <__assert_fail@plt+0x1c54>
   12c08:	mov	r6, #1
   12c0c:	str	r6, [sp, #24]
   12c10:	str	r6, [sp, #32]
   12c14:	str	r3, [sp, #40]	; 0x28
   12c18:	mov	r4, #0
   12c1c:	mov	sl, #5
   12c20:	b	11fc8 <__assert_fail@plt+0xff0>
   12c24:	mov	r6, #1
   12c28:	b	121bc <__assert_fail@plt+0x11e4>
   12c2c:	andeq	r5, r1, pc, lsr #16
   12c30:	andeq	r5, r1, r3, lsr r8
   12c34:	andeq	r5, r1, r1, lsr r8
   12c38:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12c3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c40:	sub	sp, sp, #52	; 0x34
   12c44:	mov	r6, r0
   12c48:	mov	r5, r3
   12c4c:	mov	r8, r1
   12c50:	mov	r9, r2
   12c54:	bl	10edc <__errno_location@plt>
   12c58:	ldr	r7, [pc, #380]	; 12ddc <__assert_fail@plt+0x1e04>
   12c5c:	cmn	r6, #-2147483647	; 0x80000001
   12c60:	ldr	r4, [r7]
   12c64:	ldr	r3, [r0]
   12c68:	str	r0, [sp, #24]
   12c6c:	str	r3, [sp, #32]
   12c70:	movne	r3, #0
   12c74:	moveq	r3, #1
   12c78:	orrs	r3, r3, r6, lsr #31
   12c7c:	beq	12c84 <__assert_fail@plt+0x1cac>
   12c80:	bl	10fcc <abort@plt>
   12c84:	ldr	r2, [r7, #4]
   12c88:	cmp	r6, r2
   12c8c:	blt	12cfc <__assert_fail@plt+0x1d24>
   12c90:	add	r1, sp, #48	; 0x30
   12c94:	add	sl, r7, #8
   12c98:	str	r2, [r1, #-4]!
   12c9c:	cmp	r4, sl
   12ca0:	mov	r3, #8
   12ca4:	sub	r2, r6, r2
   12ca8:	movne	r0, r4
   12cac:	str	r3, [sp]
   12cb0:	add	r2, r2, #1
   12cb4:	mvn	r3, #-2147483648	; 0x80000000
   12cb8:	moveq	r0, #0
   12cbc:	bl	139d0 <__assert_fail@plt+0x29f8>
   12cc0:	cmp	r4, sl
   12cc4:	ldr	r2, [sp, #44]	; 0x2c
   12cc8:	mov	fp, r0
   12ccc:	str	r0, [r7]
   12cd0:	ldmeq	r4, {r0, r1}
   12cd4:	mov	r4, fp
   12cd8:	stmeq	fp, {r0, r1}
   12cdc:	ldr	r0, [r7, #4]
   12ce0:	mov	r1, #0
   12ce4:	sub	r2, r2, r0
   12ce8:	add	r0, fp, r0, lsl #3
   12cec:	lsl	r2, r2, #3
   12cf0:	bl	10ef4 <memset@plt>
   12cf4:	ldr	r3, [sp, #44]	; 0x2c
   12cf8:	str	r3, [r7, #4]
   12cfc:	ldr	r3, [r5, #4]
   12d00:	add	sl, r4, r6, lsl #3
   12d04:	orr	r3, r3, #1
   12d08:	str	r3, [sp, #28]
   12d0c:	add	r3, r5, #8
   12d10:	str	r3, [sp, #36]	; 0x24
   12d14:	ldr	r3, [r5, #44]	; 0x2c
   12d18:	ldr	fp, [r4, r6, lsl #3]
   12d1c:	ldr	r7, [sl, #4]
   12d20:	str	r3, [sp, #16]
   12d24:	ldr	r3, [r5, #40]	; 0x28
   12d28:	mov	r2, r8
   12d2c:	str	r3, [sp, #12]
   12d30:	add	r3, r5, #8
   12d34:	str	r3, [sp, #8]
   12d38:	ldr	r3, [sp, #28]
   12d3c:	mov	r1, fp
   12d40:	str	r3, [sp, #4]
   12d44:	ldr	r3, [r5]
   12d48:	mov	r0, r7
   12d4c:	str	r3, [sp]
   12d50:	mov	r3, r9
   12d54:	bl	11f08 <__assert_fail@plt+0xf30>
   12d58:	cmp	fp, r0
   12d5c:	bhi	12dc4 <__assert_fail@plt+0x1dec>
   12d60:	ldr	r3, [pc, #120]	; 12de0 <__assert_fail@plt+0x1e08>
   12d64:	add	fp, r0, #1
   12d68:	cmp	r7, r3
   12d6c:	str	fp, [r4, r6, lsl #3]
   12d70:	beq	12d7c <__assert_fail@plt+0x1da4>
   12d74:	mov	r0, r7
   12d78:	bl	11cc4 <__assert_fail@plt+0xcec>
   12d7c:	mov	r0, fp
   12d80:	bl	13888 <__assert_fail@plt+0x28b0>
   12d84:	ldr	r3, [r5, #44]	; 0x2c
   12d88:	mov	r2, r8
   12d8c:	mov	r1, fp
   12d90:	str	r0, [sl, #4]
   12d94:	str	r3, [sp, #16]
   12d98:	ldr	r3, [r5, #40]	; 0x28
   12d9c:	mov	r7, r0
   12da0:	str	r3, [sp, #12]
   12da4:	add	r3, r5, #8
   12da8:	str	r3, [sp, #8]
   12dac:	ldr	r3, [sp, #28]
   12db0:	str	r3, [sp, #4]
   12db4:	ldr	r3, [r5]
   12db8:	str	r3, [sp]
   12dbc:	mov	r3, r9
   12dc0:	bl	11f08 <__assert_fail@plt+0xf30>
   12dc4:	ldr	r3, [sp, #24]
   12dc8:	ldr	r2, [sp, #32]
   12dcc:	mov	r0, r7
   12dd0:	str	r2, [r3]
   12dd4:	add	sp, sp, #52	; 0x34
   12dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ddc:	andeq	r6, r2, r4, lsl #2
   12de0:	muleq	r2, ip, r1
   12de4:	push	{r4, r5, r6, lr}
   12de8:	mov	r5, r0
   12dec:	bl	10edc <__errno_location@plt>
   12df0:	cmp	r5, #0
   12df4:	mov	r1, #48	; 0x30
   12df8:	ldr	r6, [r0]
   12dfc:	mov	r4, r0
   12e00:	ldr	r0, [pc, #12]	; 12e14 <__assert_fail@plt+0x1e3c>
   12e04:	movne	r0, r5
   12e08:	bl	13c64 <__assert_fail@plt+0x2c8c>
   12e0c:	str	r6, [r4]
   12e10:	pop	{r4, r5, r6, pc}
   12e14:	muleq	r2, ip, r2
   12e18:	ldr	r3, [pc, #12]	; 12e2c <__assert_fail@plt+0x1e54>
   12e1c:	cmp	r0, #0
   12e20:	moveq	r0, r3
   12e24:	ldr	r0, [r0]
   12e28:	bx	lr
   12e2c:	muleq	r2, ip, r2
   12e30:	ldr	r3, [pc, #12]	; 12e44 <__assert_fail@plt+0x1e6c>
   12e34:	cmp	r0, #0
   12e38:	moveq	r0, r3
   12e3c:	str	r1, [r0]
   12e40:	bx	lr
   12e44:	muleq	r2, ip, r2
   12e48:	ldr	r3, [pc, #52]	; 12e84 <__assert_fail@plt+0x1eac>
   12e4c:	cmp	r0, #0
   12e50:	moveq	r0, r3
   12e54:	add	r3, r0, #8
   12e58:	push	{lr}		; (str lr, [sp, #-4]!)
   12e5c:	lsr	lr, r1, #5
   12e60:	and	r1, r1, #31
   12e64:	ldr	ip, [r3, lr, lsl #2]
   12e68:	lsr	r0, ip, r1
   12e6c:	eor	r2, r2, r0
   12e70:	and	r2, r2, #1
   12e74:	and	r0, r0, #1
   12e78:	eor	r1, ip, r2, lsl r1
   12e7c:	str	r1, [r3, lr, lsl #2]
   12e80:	pop	{pc}		; (ldr pc, [sp], #4)
   12e84:	muleq	r2, ip, r2
   12e88:	ldr	r3, [pc, #16]	; 12ea0 <__assert_fail@plt+0x1ec8>
   12e8c:	cmp	r0, #0
   12e90:	movne	r3, r0
   12e94:	ldr	r0, [r3, #4]
   12e98:	str	r1, [r3, #4]
   12e9c:	bx	lr
   12ea0:	muleq	r2, ip, r2
   12ea4:	ldr	r3, [pc, #44]	; 12ed8 <__assert_fail@plt+0x1f00>
   12ea8:	cmp	r0, #0
   12eac:	moveq	r0, r3
   12eb0:	mov	r3, #10
   12eb4:	cmp	r2, #0
   12eb8:	cmpne	r1, #0
   12ebc:	str	r3, [r0]
   12ec0:	bne	12ecc <__assert_fail@plt+0x1ef4>
   12ec4:	push	{r4, lr}
   12ec8:	bl	10fcc <abort@plt>
   12ecc:	str	r1, [r0, #40]	; 0x28
   12ed0:	str	r2, [r0, #44]	; 0x2c
   12ed4:	bx	lr
   12ed8:	muleq	r2, ip, r2
   12edc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12ee0:	sub	sp, sp, #24
   12ee4:	mov	sl, r3
   12ee8:	ldr	r4, [sp, #56]	; 0x38
   12eec:	ldr	r3, [pc, #100]	; 12f58 <__assert_fail@plt+0x1f80>
   12ef0:	cmp	r4, #0
   12ef4:	moveq	r4, r3
   12ef8:	mov	r7, r0
   12efc:	mov	r8, r1
   12f00:	mov	r9, r2
   12f04:	bl	10edc <__errno_location@plt>
   12f08:	ldr	r3, [r4, #44]	; 0x2c
   12f0c:	mov	r2, r9
   12f10:	mov	r1, r8
   12f14:	ldr	r6, [r0]
   12f18:	str	r3, [sp, #16]
   12f1c:	ldr	r3, [r4, #40]	; 0x28
   12f20:	mov	r5, r0
   12f24:	str	r3, [sp, #12]
   12f28:	add	r3, r4, #8
   12f2c:	str	r3, [sp, #8]
   12f30:	ldr	r3, [r4, #4]
   12f34:	mov	r0, r7
   12f38:	str	r3, [sp, #4]
   12f3c:	ldr	r3, [r4]
   12f40:	str	r3, [sp]
   12f44:	mov	r3, sl
   12f48:	bl	11f08 <__assert_fail@plt+0xf30>
   12f4c:	str	r6, [r5]
   12f50:	add	sp, sp, #24
   12f54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f58:	muleq	r2, ip, r2
   12f5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f60:	cmp	r3, #0
   12f64:	sub	sp, sp, #44	; 0x2c
   12f68:	ldr	r4, [pc, #188]	; 1302c <__assert_fail@plt+0x2054>
   12f6c:	mov	r6, r2
   12f70:	movne	r4, r3
   12f74:	mov	sl, r1
   12f78:	mov	r9, r0
   12f7c:	bl	10edc <__errno_location@plt>
   12f80:	ldr	r5, [r4, #4]
   12f84:	add	fp, r4, #8
   12f88:	cmp	r6, #0
   12f8c:	orreq	r5, r5, #1
   12f90:	mov	r1, #0
   12f94:	mov	r2, r9
   12f98:	ldr	r3, [r0]
   12f9c:	mov	r8, r0
   12fa0:	str	r3, [sp, #28]
   12fa4:	ldr	r3, [r4, #44]	; 0x2c
   12fa8:	mov	r0, r1
   12fac:	str	r3, [sp, #16]
   12fb0:	ldr	r3, [r4, #40]	; 0x28
   12fb4:	stmib	sp, {r5, fp}
   12fb8:	str	r3, [sp, #12]
   12fbc:	ldr	r3, [r4]
   12fc0:	str	r3, [sp]
   12fc4:	mov	r3, sl
   12fc8:	bl	11f08 <__assert_fail@plt+0xf30>
   12fcc:	add	r1, r0, #1
   12fd0:	mov	r7, r0
   12fd4:	mov	r0, r1
   12fd8:	str	r1, [sp, #36]	; 0x24
   12fdc:	bl	13888 <__assert_fail@plt+0x28b0>
   12fe0:	ldr	r3, [r4, #44]	; 0x2c
   12fe4:	mov	r2, r9
   12fe8:	str	r3, [sp, #16]
   12fec:	ldr	r3, [r4, #40]	; 0x28
   12ff0:	stmib	sp, {r5, fp}
   12ff4:	str	r3, [sp, #12]
   12ff8:	ldr	r3, [r4]
   12ffc:	ldr	r1, [sp, #36]	; 0x24
   13000:	str	r3, [sp]
   13004:	mov	r3, sl
   13008:	str	r0, [sp, #32]
   1300c:	bl	11f08 <__assert_fail@plt+0xf30>
   13010:	ldr	r3, [sp, #28]
   13014:	cmp	r6, #0
   13018:	str	r3, [r8]
   1301c:	ldr	r0, [sp, #32]
   13020:	strne	r7, [r6]
   13024:	add	sp, sp, #44	; 0x2c
   13028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1302c:	muleq	r2, ip, r2
   13030:	mov	r3, r2
   13034:	mov	r2, #0
   13038:	b	12f5c <__assert_fail@plt+0x1f84>
   1303c:	push	{r4, r5, r6, r7, r8, lr}
   13040:	mov	r6, #1
   13044:	ldr	r4, [pc, #104]	; 130b4 <__assert_fail@plt+0x20dc>
   13048:	ldr	r5, [r4]
   1304c:	add	r7, r5, #12
   13050:	ldr	r3, [r4, #4]
   13054:	add	r7, r7, #8
   13058:	cmp	r6, r3
   1305c:	blt	130a4 <__assert_fail@plt+0x20cc>
   13060:	ldr	r0, [r5, #4]
   13064:	ldr	r6, [pc, #76]	; 130b8 <__assert_fail@plt+0x20e0>
   13068:	cmp	r0, r6
   1306c:	beq	13080 <__assert_fail@plt+0x20a8>
   13070:	bl	11cc4 <__assert_fail@plt+0xcec>
   13074:	mov	r3, #256	; 0x100
   13078:	str	r3, [r4, #8]
   1307c:	str	r6, [r4, #12]
   13080:	ldr	r6, [pc, #52]	; 130bc <__assert_fail@plt+0x20e4>
   13084:	cmp	r5, r6
   13088:	beq	13098 <__assert_fail@plt+0x20c0>
   1308c:	mov	r0, r5
   13090:	bl	11cc4 <__assert_fail@plt+0xcec>
   13094:	str	r6, [r4]
   13098:	mov	r3, #1
   1309c:	str	r3, [r4, #4]
   130a0:	pop	{r4, r5, r6, r7, r8, pc}
   130a4:	ldr	r0, [r7, #-8]
   130a8:	bl	11cc4 <__assert_fail@plt+0xcec>
   130ac:	add	r6, r6, #1
   130b0:	b	13050 <__assert_fail@plt+0x2078>
   130b4:	andeq	r6, r2, r4, lsl #2
   130b8:	muleq	r2, ip, r1
   130bc:	andeq	r6, r2, ip, lsl #2
   130c0:	ldr	r3, [pc, #4]	; 130cc <__assert_fail@plt+0x20f4>
   130c4:	mvn	r2, #0
   130c8:	b	12c3c <__assert_fail@plt+0x1c64>
   130cc:	muleq	r2, ip, r2
   130d0:	ldr	r3, [pc]	; 130d8 <__assert_fail@plt+0x2100>
   130d4:	b	12c3c <__assert_fail@plt+0x1c64>
   130d8:	muleq	r2, ip, r2
   130dc:	mov	r1, r0
   130e0:	mov	r0, #0
   130e4:	b	130c0 <__assert_fail@plt+0x20e8>
   130e8:	mov	r2, r1
   130ec:	mov	r1, r0
   130f0:	mov	r0, #0
   130f4:	b	130d0 <__assert_fail@plt+0x20f8>
   130f8:	push	{r4, r5, lr}
   130fc:	sub	sp, sp, #52	; 0x34
   13100:	mov	r5, r2
   13104:	mov	r4, r0
   13108:	mov	r0, sp
   1310c:	bl	11dc4 <__assert_fail@plt+0xdec>
   13110:	mov	r3, sp
   13114:	mvn	r2, #0
   13118:	mov	r1, r5
   1311c:	mov	r0, r4
   13120:	bl	12c3c <__assert_fail@plt+0x1c64>
   13124:	add	sp, sp, #52	; 0x34
   13128:	pop	{r4, r5, pc}
   1312c:	push	{r4, r5, r6, lr}
   13130:	sub	sp, sp, #48	; 0x30
   13134:	mov	r5, r2
   13138:	mov	r6, r3
   1313c:	mov	r4, r0
   13140:	mov	r0, sp
   13144:	bl	11dc4 <__assert_fail@plt+0xdec>
   13148:	mov	r3, sp
   1314c:	mov	r2, r6
   13150:	mov	r1, r5
   13154:	mov	r0, r4
   13158:	bl	12c3c <__assert_fail@plt+0x1c64>
   1315c:	add	sp, sp, #48	; 0x30
   13160:	pop	{r4, r5, r6, pc}
   13164:	mov	r2, r1
   13168:	mov	r1, r0
   1316c:	mov	r0, #0
   13170:	b	130f8 <__assert_fail@plt+0x2120>
   13174:	mov	r3, r2
   13178:	mov	r2, r1
   1317c:	mov	r1, r0
   13180:	mov	r0, #0
   13184:	b	1312c <__assert_fail@plt+0x2154>
   13188:	push	{r4, r5, r6, lr}
   1318c:	mov	r4, r0
   13190:	ldr	lr, [pc, #80]	; 131e8 <__assert_fail@plt+0x2210>
   13194:	mov	r5, r1
   13198:	mov	r6, r2
   1319c:	ldm	lr!, {r0, r1, r2, r3}
   131a0:	sub	sp, sp, #48	; 0x30
   131a4:	mov	ip, sp
   131a8:	stmia	ip!, {r0, r1, r2, r3}
   131ac:	ldm	lr!, {r0, r1, r2, r3}
   131b0:	stmia	ip!, {r0, r1, r2, r3}
   131b4:	ldm	lr, {r0, r1, r2, r3}
   131b8:	stm	ip, {r0, r1, r2, r3}
   131bc:	mov	r1, r6
   131c0:	mov	r2, #1
   131c4:	mov	r0, sp
   131c8:	bl	12e48 <__assert_fail@plt+0x1e70>
   131cc:	mov	r3, sp
   131d0:	mov	r2, r5
   131d4:	mov	r1, r4
   131d8:	mov	r0, #0
   131dc:	bl	12c3c <__assert_fail@plt+0x1c64>
   131e0:	add	sp, sp, #48	; 0x30
   131e4:	pop	{r4, r5, r6, pc}
   131e8:	muleq	r2, ip, r2
   131ec:	mov	r2, r1
   131f0:	mvn	r1, #0
   131f4:	b	13188 <__assert_fail@plt+0x21b0>
   131f8:	mov	r1, #58	; 0x3a
   131fc:	b	131ec <__assert_fail@plt+0x2214>
   13200:	mov	r2, #58	; 0x3a
   13204:	b	13188 <__assert_fail@plt+0x21b0>
   13208:	push	{r4, r5, lr}
   1320c:	sub	sp, sp, #100	; 0x64
   13210:	mov	r4, r0
   13214:	mov	r0, sp
   13218:	mov	r5, r2
   1321c:	bl	11dc4 <__assert_fail@plt+0xdec>
   13220:	mov	ip, sp
   13224:	add	lr, sp, #48	; 0x30
   13228:	ldm	ip!, {r0, r1, r2, r3}
   1322c:	stmia	lr!, {r0, r1, r2, r3}
   13230:	ldm	ip!, {r0, r1, r2, r3}
   13234:	stmia	lr!, {r0, r1, r2, r3}
   13238:	ldm	ip, {r0, r1, r2, r3}
   1323c:	stm	lr, {r0, r1, r2, r3}
   13240:	mov	r2, #1
   13244:	mov	r1, #58	; 0x3a
   13248:	add	r0, sp, #48	; 0x30
   1324c:	bl	12e48 <__assert_fail@plt+0x1e70>
   13250:	add	r3, sp, #48	; 0x30
   13254:	mvn	r2, #0
   13258:	mov	r1, r5
   1325c:	mov	r0, r4
   13260:	bl	12c3c <__assert_fail@plt+0x1c64>
   13264:	add	sp, sp, #100	; 0x64
   13268:	pop	{r4, r5, pc}
   1326c:	push	{r4, r5, r6, r7, lr}
   13270:	mov	r4, r0
   13274:	ldr	lr, [pc, #84]	; 132d0 <__assert_fail@plt+0x22f8>
   13278:	mov	r6, r1
   1327c:	mov	r7, r2
   13280:	mov	r5, r3
   13284:	ldm	lr!, {r0, r1, r2, r3}
   13288:	sub	sp, sp, #52	; 0x34
   1328c:	mov	ip, sp
   13290:	stmia	ip!, {r0, r1, r2, r3}
   13294:	ldm	lr!, {r0, r1, r2, r3}
   13298:	stmia	ip!, {r0, r1, r2, r3}
   1329c:	ldm	lr, {r0, r1, r2, r3}
   132a0:	stm	ip, {r0, r1, r2, r3}
   132a4:	mov	r2, r7
   132a8:	mov	r1, r6
   132ac:	mov	r0, sp
   132b0:	bl	12ea4 <__assert_fail@plt+0x1ecc>
   132b4:	mov	r3, sp
   132b8:	ldr	r2, [sp, #72]	; 0x48
   132bc:	mov	r1, r5
   132c0:	mov	r0, r4
   132c4:	bl	12c3c <__assert_fail@plt+0x1c64>
   132c8:	add	sp, sp, #52	; 0x34
   132cc:	pop	{r4, r5, r6, r7, pc}
   132d0:	muleq	r2, ip, r2
   132d4:	mvn	ip, #0
   132d8:	push	{r0, r1, r2, lr}
   132dc:	str	ip, [sp]
   132e0:	bl	1326c <__assert_fail@plt+0x2294>
   132e4:	add	sp, sp, #12
   132e8:	pop	{pc}		; (ldr pc, [sp], #4)
   132ec:	mov	r3, r2
   132f0:	mov	r2, r1
   132f4:	mov	r1, r0
   132f8:	mov	r0, #0
   132fc:	b	132d4 <__assert_fail@plt+0x22fc>
   13300:	push	{r0, r1, r2, lr}
   13304:	str	r3, [sp]
   13308:	mov	r3, r2
   1330c:	mov	r2, r1
   13310:	mov	r1, r0
   13314:	mov	r0, #0
   13318:	bl	1326c <__assert_fail@plt+0x2294>
   1331c:	add	sp, sp, #12
   13320:	pop	{pc}		; (ldr pc, [sp], #4)
   13324:	ldr	r3, [pc]	; 1332c <__assert_fail@plt+0x2354>
   13328:	b	12c3c <__assert_fail@plt+0x1c64>
   1332c:	andeq	r6, r2, r4, lsl r1
   13330:	mov	r2, r1
   13334:	mov	r1, r0
   13338:	mov	r0, #0
   1333c:	b	13324 <__assert_fail@plt+0x234c>
   13340:	mvn	r2, #0
   13344:	b	13324 <__assert_fail@plt+0x234c>
   13348:	mov	r1, r0
   1334c:	mov	r0, #0
   13350:	b	13340 <__assert_fail@plt+0x2368>
   13354:	push	{r4, r5, r6, lr}
   13358:	sub	sp, sp, #32
   1335c:	cmp	r1, #0
   13360:	mov	r5, r0
   13364:	ldr	r4, [sp, #48]	; 0x30
   13368:	ldr	r6, [sp, #52]	; 0x34
   1336c:	beq	13420 <__assert_fail@plt+0x2448>
   13370:	stm	sp, {r2, r3}
   13374:	mov	r3, r1
   13378:	ldr	r2, [pc, #860]	; 136dc <__assert_fail@plt+0x2704>
   1337c:	mov	r1, #1
   13380:	bl	10f24 <__fprintf_chk@plt>
   13384:	mov	r2, #5
   13388:	ldr	r1, [pc, #848]	; 136e0 <__assert_fail@plt+0x2708>
   1338c:	mov	r0, #0
   13390:	bl	10dc8 <dcgettext@plt>
   13394:	ldr	r3, [pc, #840]	; 136e4 <__assert_fail@plt+0x270c>
   13398:	ldr	r2, [pc, #840]	; 136e8 <__assert_fail@plt+0x2710>
   1339c:	str	r3, [sp]
   133a0:	mov	r1, #1
   133a4:	mov	r3, r0
   133a8:	mov	r0, r5
   133ac:	bl	10f24 <__fprintf_chk@plt>
   133b0:	mov	r1, r5
   133b4:	mov	r0, #10
   133b8:	bl	10dbc <fputc_unlocked@plt>
   133bc:	mov	r2, #5
   133c0:	ldr	r1, [pc, #804]	; 136ec <__assert_fail@plt+0x2714>
   133c4:	mov	r0, #0
   133c8:	bl	10dc8 <dcgettext@plt>
   133cc:	mov	r1, #1
   133d0:	ldr	r3, [pc, #792]	; 136f0 <__assert_fail@plt+0x2718>
   133d4:	mov	r2, r0
   133d8:	mov	r0, r5
   133dc:	bl	10f24 <__fprintf_chk@plt>
   133e0:	mov	r1, r5
   133e4:	mov	r0, #10
   133e8:	bl	10dbc <fputc_unlocked@plt>
   133ec:	cmp	r6, #9
   133f0:	ldrls	pc, [pc, r6, lsl #2]
   133f4:	b	136d0 <__assert_fail@plt+0x26f8>
   133f8:	andeq	r3, r1, r0, lsl r5
   133fc:	andeq	r3, r1, r8, lsr r4
   13400:	andeq	r3, r1, r4, ror #8
   13404:	muleq	r1, r8, r4
   13408:	ldrdeq	r3, [r1], -r4
   1340c:	andeq	r3, r1, r8, lsl r5
   13410:	andeq	r3, r1, r0, ror #10
   13414:			; <UNDEFINED> instruction: 0x000135b0
   13418:	andeq	r3, r1, r8, lsl #12
   1341c:	andeq	r3, r1, r8, ror #12
   13420:	str	r3, [sp]
   13424:	mov	r1, #1
   13428:	mov	r3, r2
   1342c:	ldr	r2, [pc, #704]	; 136f4 <__assert_fail@plt+0x271c>
   13430:	bl	10f24 <__fprintf_chk@plt>
   13434:	b	13384 <__assert_fail@plt+0x23ac>
   13438:	mov	r2, #5
   1343c:	ldr	r1, [pc, #692]	; 136f8 <__assert_fail@plt+0x2720>
   13440:	mov	r0, #0
   13444:	bl	10dc8 <dcgettext@plt>
   13448:	ldr	r3, [r4]
   1344c:	mov	r1, #1
   13450:	mov	r2, r0
   13454:	mov	r0, r5
   13458:	add	sp, sp, #32
   1345c:	pop	{r4, r5, r6, lr}
   13460:	b	10f24 <__fprintf_chk@plt>
   13464:	mov	r2, #5
   13468:	ldr	r1, [pc, #652]	; 136fc <__assert_fail@plt+0x2724>
   1346c:	mov	r0, #0
   13470:	bl	10dc8 <dcgettext@plt>
   13474:	ldr	r3, [r4, #4]
   13478:	mov	r1, #1
   1347c:	str	r3, [sp, #48]	; 0x30
   13480:	ldr	r3, [r4]
   13484:	mov	r2, r0
   13488:	mov	r0, r5
   1348c:	add	sp, sp, #32
   13490:	pop	{r4, r5, r6, lr}
   13494:	b	10f24 <__fprintf_chk@plt>
   13498:	mov	r2, #5
   1349c:	ldr	r1, [pc, #604]	; 13700 <__assert_fail@plt+0x2728>
   134a0:	mov	r0, #0
   134a4:	bl	10dc8 <dcgettext@plt>
   134a8:	ldr	r3, [r4, #8]
   134ac:	mov	r1, #1
   134b0:	str	r3, [sp, #52]	; 0x34
   134b4:	ldr	r3, [r4, #4]
   134b8:	str	r3, [sp, #48]	; 0x30
   134bc:	ldr	r3, [r4]
   134c0:	mov	r2, r0
   134c4:	mov	r0, r5
   134c8:	add	sp, sp, #32
   134cc:	pop	{r4, r5, r6, lr}
   134d0:	b	10f24 <__fprintf_chk@plt>
   134d4:	mov	r2, #5
   134d8:	ldr	r1, [pc, #548]	; 13704 <__assert_fail@plt+0x272c>
   134dc:	mov	r0, #0
   134e0:	bl	10dc8 <dcgettext@plt>
   134e4:	ldr	r3, [r4, #12]
   134e8:	mov	r1, #1
   134ec:	str	r3, [sp, #8]
   134f0:	ldr	r3, [r4, #8]
   134f4:	str	r3, [sp, #4]
   134f8:	ldr	r3, [r4, #4]
   134fc:	str	r3, [sp]
   13500:	ldr	r3, [r4]
   13504:	mov	r2, r0
   13508:	mov	r0, r5
   1350c:	bl	10f24 <__fprintf_chk@plt>
   13510:	add	sp, sp, #32
   13514:	pop	{r4, r5, r6, pc}
   13518:	mov	r2, #5
   1351c:	ldr	r1, [pc, #484]	; 13708 <__assert_fail@plt+0x2730>
   13520:	mov	r0, #0
   13524:	bl	10dc8 <dcgettext@plt>
   13528:	ldr	r3, [r4, #16]
   1352c:	mov	r1, #1
   13530:	str	r3, [sp, #12]
   13534:	ldr	r3, [r4, #12]
   13538:	str	r3, [sp, #8]
   1353c:	ldr	r3, [r4, #8]
   13540:	str	r3, [sp, #4]
   13544:	ldr	r3, [r4, #4]
   13548:	str	r3, [sp]
   1354c:	ldr	r3, [r4]
   13550:	mov	r2, r0
   13554:	mov	r0, r5
   13558:	bl	10f24 <__fprintf_chk@plt>
   1355c:	b	13510 <__assert_fail@plt+0x2538>
   13560:	mov	r2, #5
   13564:	ldr	r1, [pc, #416]	; 1370c <__assert_fail@plt+0x2734>
   13568:	mov	r0, #0
   1356c:	bl	10dc8 <dcgettext@plt>
   13570:	ldr	r3, [r4, #20]
   13574:	mov	r1, #1
   13578:	str	r3, [sp, #16]
   1357c:	ldr	r3, [r4, #16]
   13580:	str	r3, [sp, #12]
   13584:	ldr	r3, [r4, #12]
   13588:	str	r3, [sp, #8]
   1358c:	ldr	r3, [r4, #8]
   13590:	str	r3, [sp, #4]
   13594:	ldr	r3, [r4, #4]
   13598:	str	r3, [sp]
   1359c:	ldr	r3, [r4]
   135a0:	mov	r2, r0
   135a4:	mov	r0, r5
   135a8:	bl	10f24 <__fprintf_chk@plt>
   135ac:	b	13510 <__assert_fail@plt+0x2538>
   135b0:	mov	r2, #5
   135b4:	ldr	r1, [pc, #340]	; 13710 <__assert_fail@plt+0x2738>
   135b8:	mov	r0, #0
   135bc:	bl	10dc8 <dcgettext@plt>
   135c0:	ldr	r3, [r4, #24]
   135c4:	mov	r1, #1
   135c8:	str	r3, [sp, #20]
   135cc:	ldr	r3, [r4, #20]
   135d0:	str	r3, [sp, #16]
   135d4:	ldr	r3, [r4, #16]
   135d8:	str	r3, [sp, #12]
   135dc:	ldr	r3, [r4, #12]
   135e0:	str	r3, [sp, #8]
   135e4:	ldr	r3, [r4, #8]
   135e8:	str	r3, [sp, #4]
   135ec:	ldr	r3, [r4, #4]
   135f0:	str	r3, [sp]
   135f4:	ldr	r3, [r4]
   135f8:	mov	r2, r0
   135fc:	mov	r0, r5
   13600:	bl	10f24 <__fprintf_chk@plt>
   13604:	b	13510 <__assert_fail@plt+0x2538>
   13608:	mov	r2, #5
   1360c:	ldr	r1, [pc, #256]	; 13714 <__assert_fail@plt+0x273c>
   13610:	mov	r0, #0
   13614:	bl	10dc8 <dcgettext@plt>
   13618:	ldr	r3, [r4, #28]
   1361c:	mov	r1, #1
   13620:	str	r3, [sp, #24]
   13624:	ldr	r3, [r4, #24]
   13628:	str	r3, [sp, #20]
   1362c:	ldr	r3, [r4, #20]
   13630:	str	r3, [sp, #16]
   13634:	ldr	r3, [r4, #16]
   13638:	str	r3, [sp, #12]
   1363c:	ldr	r3, [r4, #12]
   13640:	str	r3, [sp, #8]
   13644:	ldr	r3, [r4, #8]
   13648:	str	r3, [sp, #4]
   1364c:	ldr	r3, [r4, #4]
   13650:	str	r3, [sp]
   13654:	ldr	r3, [r4]
   13658:	mov	r2, r0
   1365c:	mov	r0, r5
   13660:	bl	10f24 <__fprintf_chk@plt>
   13664:	b	13510 <__assert_fail@plt+0x2538>
   13668:	ldr	r1, [pc, #168]	; 13718 <__assert_fail@plt+0x2740>
   1366c:	mov	r2, #5
   13670:	mov	r0, #0
   13674:	bl	10dc8 <dcgettext@plt>
   13678:	ldr	r3, [r4, #32]
   1367c:	mov	r1, #1
   13680:	str	r3, [sp, #28]
   13684:	ldr	r3, [r4, #28]
   13688:	str	r3, [sp, #24]
   1368c:	ldr	r3, [r4, #24]
   13690:	str	r3, [sp, #20]
   13694:	ldr	r3, [r4, #20]
   13698:	str	r3, [sp, #16]
   1369c:	ldr	r3, [r4, #16]
   136a0:	str	r3, [sp, #12]
   136a4:	ldr	r3, [r4, #12]
   136a8:	str	r3, [sp, #8]
   136ac:	ldr	r3, [r4, #8]
   136b0:	str	r3, [sp, #4]
   136b4:	ldr	r3, [r4, #4]
   136b8:	str	r3, [sp]
   136bc:	ldr	r3, [r4]
   136c0:	mov	r2, r0
   136c4:	mov	r0, r5
   136c8:	bl	10f24 <__fprintf_chk@plt>
   136cc:	b	13510 <__assert_fail@plt+0x2538>
   136d0:	mov	r2, #5
   136d4:	ldr	r1, [pc, #64]	; 1371c <__assert_fail@plt+0x2744>
   136d8:	b	13670 <__assert_fail@plt+0x2698>
   136dc:	andeq	r5, r1, r1, lsl #17
   136e0:	muleq	r1, r4, r8
   136e4:	andeq	r0, r0, r6, ror #15
   136e8:	andeq	r5, r1, r2, ror #22
   136ec:	muleq	r1, r8, r8
   136f0:	andeq	r5, r1, r3, asr #18
   136f4:	andeq	r5, r1, sp, lsl #17
   136f8:	andeq	r5, r1, r5, ror #18
   136fc:	andeq	r5, r1, r5, ror r9
   13700:	andeq	r5, r1, ip, lsl #19
   13704:	andeq	r5, r1, r8, lsr #19
   13708:	andeq	r5, r1, r8, asr #19
   1370c:	andeq	r5, r1, ip, ror #19
   13710:	andeq	r5, r1, r4, lsl sl
   13714:	andeq	r5, r1, r0, asr #20
   13718:	andeq	r5, r1, r0, ror sl
   1371c:	andeq	r5, r1, r4, lsr #21
   13720:	push	{r0, r1, r4, lr}
   13724:	mov	ip, #0
   13728:	ldr	lr, [sp, #16]
   1372c:	ldr	r4, [lr, ip, lsl #2]
   13730:	cmp	r4, #0
   13734:	bne	1374c <__assert_fail@plt+0x2774>
   13738:	str	ip, [sp, #4]
   1373c:	str	lr, [sp]
   13740:	bl	13354 <__assert_fail@plt+0x237c>
   13744:	add	sp, sp, #8
   13748:	pop	{r4, pc}
   1374c:	add	ip, ip, #1
   13750:	b	1372c <__assert_fail@plt+0x2754>
   13754:	push	{r4, r5, lr}
   13758:	sub	sp, sp, #52	; 0x34
   1375c:	mov	ip, #0
   13760:	ldr	r5, [sp, #64]	; 0x40
   13764:	add	lr, sp, #8
   13768:	ldr	r4, [r5, ip, lsl #2]
   1376c:	cmp	r4, #0
   13770:	str	r4, [lr, ip, lsl #2]
   13774:	beq	13784 <__assert_fail@plt+0x27ac>
   13778:	add	ip, ip, #1
   1377c:	cmp	ip, #10
   13780:	bne	13768 <__assert_fail@plt+0x2790>
   13784:	str	ip, [sp, #4]
   13788:	str	lr, [sp]
   1378c:	bl	13354 <__assert_fail@plt+0x237c>
   13790:	add	sp, sp, #52	; 0x34
   13794:	pop	{r4, r5, pc}
   13798:	push	{r3}		; (str r3, [sp, #-4]!)
   1379c:	push	{r0, r1, r2, r3, lr}
   137a0:	add	r3, sp, #24
   137a4:	str	r3, [sp, #12]
   137a8:	str	r3, [sp]
   137ac:	ldr	r3, [sp, #20]
   137b0:	bl	13754 <__assert_fail@plt+0x277c>
   137b4:	add	sp, sp, #16
   137b8:	pop	{lr}		; (ldr lr, [sp], #4)
   137bc:	add	sp, sp, #4
   137c0:	bx	lr
   137c4:	ldr	r3, [pc, #116]	; 13840 <__assert_fail@plt+0x2868>
   137c8:	push	{r4, lr}
   137cc:	mov	r0, #10
   137d0:	ldr	r1, [r3]
   137d4:	bl	10dbc <fputc_unlocked@plt>
   137d8:	mov	r2, #5
   137dc:	ldr	r1, [pc, #96]	; 13844 <__assert_fail@plt+0x286c>
   137e0:	mov	r0, #0
   137e4:	bl	10dc8 <dcgettext@plt>
   137e8:	ldr	r2, [pc, #88]	; 13848 <__assert_fail@plt+0x2870>
   137ec:	mov	r1, r0
   137f0:	mov	r0, #1
   137f4:	bl	10f00 <__printf_chk@plt>
   137f8:	mov	r2, #5
   137fc:	ldr	r1, [pc, #72]	; 1384c <__assert_fail@plt+0x2874>
   13800:	mov	r0, #0
   13804:	bl	10dc8 <dcgettext@plt>
   13808:	ldr	r3, [pc, #64]	; 13850 <__assert_fail@plt+0x2878>
   1380c:	ldr	r2, [pc, #64]	; 13854 <__assert_fail@plt+0x287c>
   13810:	mov	r1, r0
   13814:	mov	r0, #1
   13818:	bl	10f00 <__printf_chk@plt>
   1381c:	mov	r2, #5
   13820:	ldr	r1, [pc, #48]	; 13858 <__assert_fail@plt+0x2880>
   13824:	mov	r0, #0
   13828:	bl	10dc8 <dcgettext@plt>
   1382c:	ldr	r2, [pc, #40]	; 1385c <__assert_fail@plt+0x2884>
   13830:	pop	{r4, lr}
   13834:	mov	r1, r0
   13838:	mov	r0, #1
   1383c:	b	10f00 <__printf_chk@plt>
   13840:	andeq	r6, r2, ip, asr r1
   13844:	andeq	r5, r1, r0, ror #21
   13848:	strdeq	r5, [r1], -r4
   1384c:	andeq	r5, r1, sl, lsl #22
   13850:	andeq	r5, r1, fp, asr #8
   13854:	andeq	r5, r1, r3, ror r4
   13858:	andeq	r5, r1, lr, lsl fp
   1385c:	andeq	r5, r1, r5, asr #22
   13860:	push	{r4, lr}
   13864:	bl	141a4 <__assert_fail@plt+0x31cc>
   13868:	cmp	r0, #0
   1386c:	popne	{r4, pc}
   13870:	bl	13cf4 <__assert_fail@plt+0x2d1c>
   13874:	push	{r4, lr}
   13878:	bl	141a4 <__assert_fail@plt+0x31cc>
   1387c:	cmp	r0, #0
   13880:	popne	{r4, pc}
   13884:	bl	13cf4 <__assert_fail@plt+0x2d1c>
   13888:	b	13860 <__assert_fail@plt+0x2888>
   1388c:	push	{r4, r5, r6, lr}
   13890:	mov	r5, r0
   13894:	mov	r4, r1
   13898:	bl	141e4 <__assert_fail@plt+0x320c>
   1389c:	cmp	r0, #0
   138a0:	popne	{r4, r5, r6, pc}
   138a4:	adds	r4, r4, #0
   138a8:	movne	r4, #1
   138ac:	cmp	r5, #0
   138b0:	orreq	r4, r4, #1
   138b4:	cmp	r4, #0
   138b8:	popeq	{r4, r5, r6, pc}
   138bc:	bl	13cf4 <__assert_fail@plt+0x2d1c>
   138c0:	push	{r4, lr}
   138c4:	cmp	r1, #0
   138c8:	orreq	r1, r1, #1
   138cc:	bl	141e4 <__assert_fail@plt+0x320c>
   138d0:	cmp	r0, #0
   138d4:	popne	{r4, pc}
   138d8:	bl	13cf4 <__assert_fail@plt+0x2d1c>
   138dc:	push	{r4, r5, r6, lr}
   138e0:	mov	r6, r0
   138e4:	mov	r5, r1
   138e8:	mov	r4, r2
   138ec:	bl	14720 <__assert_fail@plt+0x3748>
   138f0:	cmp	r0, #0
   138f4:	popne	{r4, r5, r6, pc}
   138f8:	cmp	r6, #0
   138fc:	beq	1390c <__assert_fail@plt+0x2934>
   13900:	cmp	r5, #0
   13904:	cmpne	r4, #0
   13908:	popeq	{r4, r5, r6, pc}
   1390c:	bl	13cf4 <__assert_fail@plt+0x2d1c>
   13910:	b	138dc <__assert_fail@plt+0x2904>
   13914:	cmp	r2, #0
   13918:	cmpne	r1, #0
   1391c:	moveq	r2, #1
   13920:	moveq	r1, r2
   13924:	push	{r4, lr}
   13928:	bl	14720 <__assert_fail@plt+0x3748>
   1392c:	cmp	r0, #0
   13930:	popne	{r4, pc}
   13934:	bl	13cf4 <__assert_fail@plt+0x2d1c>
   13938:	mov	r2, r1
   1393c:	mov	r1, r0
   13940:	mov	r0, #0
   13944:	b	138dc <__assert_fail@plt+0x2904>
   13948:	mov	r2, r1
   1394c:	mov	r1, r0
   13950:	mov	r0, #0
   13954:	b	13914 <__assert_fail@plt+0x293c>
   13958:	push	{r4, r5, r6, r7, r8, lr}
   1395c:	subs	r7, r0, #0
   13960:	mov	r5, r1
   13964:	mov	r6, r2
   13968:	ldr	r4, [r1]
   1396c:	bne	139a8 <__assert_fail@plt+0x29d0>
   13970:	cmp	r4, #0
   13974:	bne	13990 <__assert_fail@plt+0x29b8>
   13978:	mov	r1, r2
   1397c:	mov	r0, #64	; 0x40
   13980:	bl	1484c <__assert_fail@plt+0x3874>
   13984:	cmp	r0, #0
   13988:	movne	r4, r0
   1398c:	addeq	r4, r0, #1
   13990:	mov	r2, r6
   13994:	mov	r1, r4
   13998:	mov	r0, r7
   1399c:	bl	138dc <__assert_fail@plt+0x2904>
   139a0:	str	r4, [r5]
   139a4:	pop	{r4, r5, r6, r7, r8, pc}
   139a8:	lsr	r2, r4, #1
   139ac:	add	r3, r2, #1
   139b0:	mvn	r3, r3
   139b4:	cmp	r4, r3
   139b8:	addls	r4, r4, #1
   139bc:	addls	r4, r4, r2
   139c0:	bls	13990 <__assert_fail@plt+0x29b8>
   139c4:	bl	13cf4 <__assert_fail@plt+0x2d1c>
   139c8:	mov	r2, #1
   139cc:	b	13958 <__assert_fail@plt+0x2980>
   139d0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139d4:	mov	sl, r0
   139d8:	ldr	r8, [r1]
   139dc:	mov	fp, r1
   139e0:	mov	r5, r2
   139e4:	asrs	r4, r8, #1
   139e8:	mov	r9, r3
   139ec:	ldr	r7, [sp, #48]	; 0x30
   139f0:	bpl	13a8c <__assert_fail@plt+0x2ab4>
   139f4:	rsb	r2, r4, #-2147483648	; 0x80000000
   139f8:	cmp	r8, r2
   139fc:	movge	r2, #0
   13a00:	movlt	r2, #1
   13a04:	mvn	r3, r9
   13a08:	cmp	r2, #0
   13a0c:	lsr	r3, r3, #31
   13a10:	addeq	r4, r4, r8
   13a14:	mvnne	r4, #-2147483648	; 0x80000000
   13a18:	mov	r0, r3
   13a1c:	cmp	r9, r4
   13a20:	movge	r0, #0
   13a24:	andlt	r0, r0, #1
   13a28:	cmp	r0, #0
   13a2c:	str	r3, [sp, #4]
   13a30:	bne	13c00 <__assert_fail@plt+0x2c28>
   13a34:	cmp	r7, #0
   13a38:	bge	13b4c <__assert_fail@plt+0x2b74>
   13a3c:	cmp	r4, #0
   13a40:	bge	13aa4 <__assert_fail@plt+0x2acc>
   13a44:	mov	r1, r7
   13a48:	mvn	r0, #-2147483648	; 0x80000000
   13a4c:	bl	14a58 <__assert_fail@plt+0x3a80>
   13a50:	cmp	r0, r4
   13a54:	movle	r0, #0
   13a58:	movgt	r0, #1
   13a5c:	cmp	r0, #0
   13a60:	mvnne	r6, #-2147483648	; 0x80000000
   13a64:	beq	13ab4 <__assert_fail@plt+0x2adc>
   13a68:	mov	r1, r7
   13a6c:	mov	r0, r6
   13a70:	bl	14a58 <__assert_fail@plt+0x3a80>
   13a74:	mov	r1, r7
   13a78:	mov	r4, r0
   13a7c:	mov	r0, r6
   13a80:	bl	14c78 <__assert_fail@plt+0x3ca0>
   13a84:	sub	r1, r6, r1
   13a88:	b	13ac4 <__assert_fail@plt+0x2aec>
   13a8c:	mvn	r2, #-2147483648	; 0x80000000
   13a90:	sub	r2, r2, r4
   13a94:	cmp	r8, r2
   13a98:	movle	r2, #0
   13a9c:	movgt	r2, #1
   13aa0:	b	13a04 <__assert_fail@plt+0x2a2c>
   13aa4:	cmn	r7, #1
   13aa8:	movne	r1, r7
   13aac:	movne	r0, #-2147483648	; 0x80000000
   13ab0:	bne	13c18 <__assert_fail@plt+0x2c40>
   13ab4:	mul	r1, r7, r4
   13ab8:	cmp	r1, #63	; 0x3f
   13abc:	movle	r6, #64	; 0x40
   13ac0:	ble	13a68 <__assert_fail@plt+0x2a90>
   13ac4:	cmp	sl, #0
   13ac8:	sub	r2, r4, r8
   13acc:	streq	sl, [fp]
   13ad0:	cmp	r2, r5
   13ad4:	bge	13ba8 <__assert_fail@plt+0x2bd0>
   13ad8:	cmp	r5, #0
   13adc:	bge	13b74 <__assert_fail@plt+0x2b9c>
   13ae0:	rsb	r2, r5, #-2147483648	; 0x80000000
   13ae4:	cmp	r8, r2
   13ae8:	movge	r2, #0
   13aec:	movlt	r2, #1
   13af0:	cmp	r2, #0
   13af4:	bne	13b48 <__assert_fail@plt+0x2b70>
   13af8:	ldr	r0, [sp, #4]
   13afc:	add	r5, r8, r5
   13b00:	cmp	r9, r5
   13b04:	movge	r0, #0
   13b08:	andlt	r0, r0, #1
   13b0c:	cmp	r0, #0
   13b10:	mov	r4, r5
   13b14:	bne	13b48 <__assert_fail@plt+0x2b70>
   13b18:	cmp	r7, #0
   13b1c:	bge	13bbc <__assert_fail@plt+0x2be4>
   13b20:	cmp	r5, #0
   13b24:	bge	13b94 <__assert_fail@plt+0x2bbc>
   13b28:	mov	r1, r7
   13b2c:	mvn	r0, #-2147483648	; 0x80000000
   13b30:	bl	14a58 <__assert_fail@plt+0x3a80>
   13b34:	cmp	r5, r0
   13b38:	movge	r0, #0
   13b3c:	movlt	r0, #1
   13b40:	cmp	r0, #0
   13b44:	beq	13ba4 <__assert_fail@plt+0x2bcc>
   13b48:	bl	13cf4 <__assert_fail@plt+0x2d1c>
   13b4c:	beq	13ab4 <__assert_fail@plt+0x2adc>
   13b50:	cmp	r4, #0
   13b54:	bge	13c10 <__assert_fail@plt+0x2c38>
   13b58:	cmn	r4, #1
   13b5c:	beq	13ab4 <__assert_fail@plt+0x2adc>
   13b60:	mov	r1, r4
   13b64:	mov	r0, #-2147483648	; 0x80000000
   13b68:	bl	14a58 <__assert_fail@plt+0x3a80>
   13b6c:	cmp	r7, r0
   13b70:	b	13a54 <__assert_fail@plt+0x2a7c>
   13b74:	cmp	r8, #0
   13b78:	blt	13af8 <__assert_fail@plt+0x2b20>
   13b7c:	mvn	r2, #-2147483648	; 0x80000000
   13b80:	sub	r2, r2, r5
   13b84:	cmp	r8, r2
   13b88:	movle	r2, #0
   13b8c:	movgt	r2, #1
   13b90:	b	13af0 <__assert_fail@plt+0x2b18>
   13b94:	cmn	r7, #1
   13b98:	movne	r1, r7
   13b9c:	movne	r0, #-2147483648	; 0x80000000
   13ba0:	bne	13bf4 <__assert_fail@plt+0x2c1c>
   13ba4:	mul	r1, r5, r7
   13ba8:	mov	r0, sl
   13bac:	bl	1388c <__assert_fail@plt+0x28b4>
   13bb0:	str	r4, [fp]
   13bb4:	add	sp, sp, #12
   13bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bbc:	beq	13ba4 <__assert_fail@plt+0x2bcc>
   13bc0:	cmp	r5, #0
   13bc4:	movge	r1, r7
   13bc8:	mvnge	r0, #-2147483648	; 0x80000000
   13bcc:	bge	13bf4 <__assert_fail@plt+0x2c1c>
   13bd0:	cmn	r5, #1
   13bd4:	beq	13ba4 <__assert_fail@plt+0x2bcc>
   13bd8:	mov	r1, r5
   13bdc:	mov	r0, #-2147483648	; 0x80000000
   13be0:	bl	14a58 <__assert_fail@plt+0x3a80>
   13be4:	cmp	r7, r0
   13be8:	movle	r0, #0
   13bec:	movgt	r0, #1
   13bf0:	b	13b40 <__assert_fail@plt+0x2b68>
   13bf4:	bl	14a58 <__assert_fail@plt+0x3a80>
   13bf8:	cmp	r5, r0
   13bfc:	b	13be8 <__assert_fail@plt+0x2c10>
   13c00:	cmp	r7, #0
   13c04:	mov	r4, r9
   13c08:	blt	13aa4 <__assert_fail@plt+0x2acc>
   13c0c:	beq	13ab4 <__assert_fail@plt+0x2adc>
   13c10:	mov	r1, r7
   13c14:	mvn	r0, #-2147483648	; 0x80000000
   13c18:	bl	14a58 <__assert_fail@plt+0x3a80>
   13c1c:	cmp	r0, r4
   13c20:	movge	r0, #0
   13c24:	movlt	r0, #1
   13c28:	b	13a5c <__assert_fail@plt+0x2a84>
   13c2c:	push	{r4, lr}
   13c30:	bl	1415c <__assert_fail@plt+0x3184>
   13c34:	cmp	r0, #0
   13c38:	popne	{r4, pc}
   13c3c:	bl	13cf4 <__assert_fail@plt+0x2d1c>
   13c40:	mov	r1, #1
   13c44:	b	13c2c <__assert_fail@plt+0x2c54>
   13c48:	push	{r4, lr}
   13c4c:	bl	1415c <__assert_fail@plt+0x3184>
   13c50:	cmp	r0, #0
   13c54:	popne	{r4, pc}
   13c58:	bl	13cf4 <__assert_fail@plt+0x2d1c>
   13c5c:	mov	r1, #1
   13c60:	b	13c48 <__assert_fail@plt+0x2c70>
   13c64:	push	{r4, r5, r6, lr}
   13c68:	mov	r4, r1
   13c6c:	mov	r5, r0
   13c70:	mov	r0, r1
   13c74:	bl	13860 <__assert_fail@plt+0x2888>
   13c78:	mov	r2, r4
   13c7c:	mov	r1, r5
   13c80:	pop	{r4, r5, r6, lr}
   13c84:	b	10d8c <memcpy@plt>
   13c88:	push	{r4, r5, r6, lr}
   13c8c:	mov	r4, r1
   13c90:	mov	r5, r0
   13c94:	mov	r0, r1
   13c98:	bl	13874 <__assert_fail@plt+0x289c>
   13c9c:	mov	r2, r4
   13ca0:	mov	r1, r5
   13ca4:	pop	{r4, r5, r6, lr}
   13ca8:	b	10d8c <memcpy@plt>
   13cac:	push	{r4, r5, r6, lr}
   13cb0:	mov	r5, r0
   13cb4:	add	r0, r1, #1
   13cb8:	mov	r4, r1
   13cbc:	bl	13874 <__assert_fail@plt+0x289c>
   13cc0:	mov	r2, #0
   13cc4:	mov	r1, r5
   13cc8:	strb	r2, [r0, r4]
   13ccc:	mov	r2, r4
   13cd0:	pop	{r4, r5, r6, lr}
   13cd4:	b	10d8c <memcpy@plt>
   13cd8:	push	{r4, lr}
   13cdc:	mov	r4, r0
   13ce0:	bl	10ec4 <strlen@plt>
   13ce4:	add	r1, r0, #1
   13ce8:	mov	r0, r4
   13cec:	pop	{r4, lr}
   13cf0:	b	13c64 <__assert_fail@plt+0x2c8c>
   13cf4:	ldr	r3, [pc, #44]	; 13d28 <__assert_fail@plt+0x2d50>
   13cf8:	push	{r4, lr}
   13cfc:	mov	r2, #5
   13d00:	ldr	r1, [pc, #36]	; 13d2c <__assert_fail@plt+0x2d54>
   13d04:	mov	r0, #0
   13d08:	ldr	r4, [r3]
   13d0c:	bl	10dc8 <dcgettext@plt>
   13d10:	ldr	r2, [pc, #24]	; 13d30 <__assert_fail@plt+0x2d58>
   13d14:	mov	r1, #0
   13d18:	mov	r3, r0
   13d1c:	mov	r0, r4
   13d20:	bl	10e40 <error@plt>
   13d24:	bl	10fcc <abort@plt>
   13d28:	andeq	r6, r2, r0, lsl #2
   13d2c:	muleq	r1, r1, fp
   13d30:	andeq	r5, r1, r5, lsl #15
   13d34:	push	{r4, lr}
   13d38:	bl	14264 <__assert_fail@plt+0x328c>
   13d3c:	subs	r4, r0, #0
   13d40:	bne	13d58 <__assert_fail@plt+0x2d80>
   13d44:	bl	10edc <__errno_location@plt>
   13d48:	ldr	r3, [r0]
   13d4c:	cmp	r3, #12
   13d50:	bne	13d58 <__assert_fail@plt+0x2d80>
   13d54:	bl	13cf4 <__assert_fail@plt+0x2d1c>
   13d58:	mov	r0, r4
   13d5c:	pop	{r4, pc}
   13d60:	push	{r4, r5, r6, lr}
   13d64:	subs	r5, r1, #0
   13d68:	mov	r4, r0
   13d6c:	bge	13dac <__assert_fail@plt+0x2dd4>
   13d70:	ldm	r0, {r0, r3}
   13d74:	orr	r0, r0, r3
   13d78:	adds	r0, r0, #0
   13d7c:	movne	r0, #1
   13d80:	cmp	r0, #0
   13d84:	bne	13de0 <__assert_fail@plt+0x2e08>
   13d88:	ldr	r2, [r4]
   13d8c:	asr	r3, r5, #31
   13d90:	ldr	r1, [r4, #4]
   13d94:	mul	r3, r3, r2
   13d98:	mla	r1, r5, r1, r3
   13d9c:	umull	r2, r3, r2, r5
   13da0:	add	r3, r1, r3
   13da4:	strd	r2, [r4]
   13da8:	pop	{r4, r5, r6, pc}
   13dac:	moveq	r0, r5
   13db0:	beq	13d80 <__assert_fail@plt+0x2da8>
   13db4:	mov	r2, r5
   13db8:	asr	r3, r5, #31
   13dbc:	mvn	r0, #0
   13dc0:	mvn	r1, #0
   13dc4:	bl	14c98 <__assert_fail@plt+0x3cc0>
   13dc8:	ldrd	r2, [r4]
   13dcc:	cmp	r1, r3
   13dd0:	cmpeq	r0, r2
   13dd4:	movcc	r0, #1
   13dd8:	movcs	r0, #0
   13ddc:	b	13d80 <__assert_fail@plt+0x2da8>
   13de0:	mvn	r2, #0
   13de4:	mvn	r3, #0
   13de8:	mov	r0, #1
   13dec:	strd	r2, [r4]
   13df0:	pop	{r4, r5, r6, pc}
   13df4:	push	{r4, r5, r6, r7, r8, lr}
   13df8:	mov	r6, r0
   13dfc:	mov	r7, r1
   13e00:	mov	r5, r2
   13e04:	mov	r4, #0
   13e08:	cmp	r5, #0
   13e0c:	bne	13e18 <__assert_fail@plt+0x2e40>
   13e10:	mov	r0, r4
   13e14:	pop	{r4, r5, r6, r7, r8, pc}
   13e18:	mov	r1, r7
   13e1c:	mov	r0, r6
   13e20:	bl	13d60 <__assert_fail@plt+0x2d88>
   13e24:	sub	r5, r5, #1
   13e28:	orr	r4, r4, r0
   13e2c:	b	13e08 <__assert_fail@plt+0x2e30>
   13e30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e34:	sub	sp, sp, #20
   13e38:	cmp	r2, #36	; 0x24
   13e3c:	ldr	r9, [sp, #56]	; 0x38
   13e40:	bls	13e58 <__assert_fail@plt+0x2e80>
   13e44:	ldr	r3, [pc, #772]	; 14150 <__assert_fail@plt+0x3178>
   13e48:	mov	r2, #85	; 0x55
   13e4c:	ldr	r1, [pc, #768]	; 14154 <__assert_fail@plt+0x317c>
   13e50:	ldr	r0, [pc, #768]	; 14158 <__assert_fail@plt+0x3180>
   13e54:	bl	10fd8 <__assert_fail@plt>
   13e58:	cmp	r1, #0
   13e5c:	mov	r7, r1
   13e60:	mov	r4, r0
   13e64:	mov	fp, r2
   13e68:	mov	r8, r3
   13e6c:	addeq	r7, sp, #4
   13e70:	bl	10edc <__errno_location@plt>
   13e74:	mov	r3, #0
   13e78:	str	r3, [r0]
   13e7c:	mov	sl, r0
   13e80:	bl	10eac <__ctype_b_loc@plt>
   13e84:	ldrb	r6, [r4]
   13e88:	mov	r3, r4
   13e8c:	ldr	r1, [r0]
   13e90:	lsl	r2, r6, #1
   13e94:	ldrh	r5, [r1, r2]
   13e98:	ands	r5, r5, #8192	; 0x2000
   13e9c:	bne	13eb8 <__assert_fail@plt+0x2ee0>
   13ea0:	cmp	r6, #45	; 0x2d
   13ea4:	bne	13ec0 <__assert_fail@plt+0x2ee8>
   13ea8:	mov	r5, #4
   13eac:	mov	r0, r5
   13eb0:	add	sp, sp, #20
   13eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13eb8:	ldrb	r6, [r3, #1]!
   13ebc:	b	13e90 <__assert_fail@plt+0x2eb8>
   13ec0:	mov	r2, fp
   13ec4:	mov	r1, r7
   13ec8:	mov	r0, r4
   13ecc:	bl	10f18 <strtoumax@plt>
   13ed0:	ldr	r6, [r7]
   13ed4:	cmp	r4, r6
   13ed8:	strd	r0, [sp, #8]
   13edc:	bne	13f40 <__assert_fail@plt+0x2f68>
   13ee0:	cmp	r9, #0
   13ee4:	beq	13ea8 <__assert_fail@plt+0x2ed0>
   13ee8:	ldrb	r1, [r6]
   13eec:	cmp	r1, #0
   13ef0:	beq	13ea8 <__assert_fail@plt+0x2ed0>
   13ef4:	mov	r0, r9
   13ef8:	bl	10ed0 <strchr@plt>
   13efc:	cmp	r0, #0
   13f00:	beq	13ea8 <__assert_fail@plt+0x2ed0>
   13f04:	mov	r2, #1
   13f08:	mov	r3, #0
   13f0c:	strd	r2, [sp, #8]
   13f10:	ldrb	r4, [r6]
   13f14:	cmp	r4, #0
   13f18:	beq	14050 <__assert_fail@plt+0x3078>
   13f1c:	mov	r1, r4
   13f20:	mov	r0, r9
   13f24:	bl	10ed0 <strchr@plt>
   13f28:	cmp	r0, #0
   13f2c:	bne	13f68 <__assert_fail@plt+0x2f90>
   13f30:	ldrd	r2, [sp, #8]
   13f34:	orr	r5, r5, #2
   13f38:	strd	r2, [r8]
   13f3c:	b	13eac <__assert_fail@plt+0x2ed4>
   13f40:	ldr	r5, [sl]
   13f44:	cmp	r5, #0
   13f48:	beq	13f58 <__assert_fail@plt+0x2f80>
   13f4c:	cmp	r5, #34	; 0x22
   13f50:	bne	13ea8 <__assert_fail@plt+0x2ed0>
   13f54:	mov	r5, #1
   13f58:	cmp	r9, #0
   13f5c:	bne	13f10 <__assert_fail@plt+0x2f38>
   13f60:	strd	r0, [r8]
   13f64:	b	13eac <__assert_fail@plt+0x2ed4>
   13f68:	cmp	r4, #84	; 0x54
   13f6c:	beq	13fc0 <__assert_fail@plt+0x2fe8>
   13f70:	bhi	13fa8 <__assert_fail@plt+0x2fd0>
   13f74:	cmp	r4, #75	; 0x4b
   13f78:	beq	13fc0 <__assert_fail@plt+0x2fe8>
   13f7c:	bhi	13f98 <__assert_fail@plt+0x2fc0>
   13f80:	cmp	r4, #69	; 0x45
   13f84:	beq	13fc0 <__assert_fail@plt+0x2fe8>
   13f88:	cmp	r4, #71	; 0x47
   13f8c:	beq	13fc0 <__assert_fail@plt+0x2fe8>
   13f90:	mov	r6, #1
   13f94:	b	14084 <__assert_fail@plt+0x30ac>
   13f98:	cmp	r4, #77	; 0x4d
   13f9c:	beq	13fc0 <__assert_fail@plt+0x2fe8>
   13fa0:	cmp	r4, #80	; 0x50
   13fa4:	b	13f8c <__assert_fail@plt+0x2fb4>
   13fa8:	cmp	r4, #103	; 0x67
   13fac:	beq	13fc0 <__assert_fail@plt+0x2fe8>
   13fb0:	bhi	1405c <__assert_fail@plt+0x3084>
   13fb4:	sub	r3, r4, #89	; 0x59
   13fb8:	cmp	r3, #1
   13fbc:	bhi	13f90 <__assert_fail@plt+0x2fb8>
   13fc0:	mov	r1, #48	; 0x30
   13fc4:	mov	r0, r9
   13fc8:	bl	10ed0 <strchr@plt>
   13fcc:	cmp	r0, #0
   13fd0:	beq	13f90 <__assert_fail@plt+0x2fb8>
   13fd4:	ldrb	r3, [r6, #1]
   13fd8:	cmp	r3, #68	; 0x44
   13fdc:	beq	13ff0 <__assert_fail@plt+0x3018>
   13fe0:	cmp	r3, #105	; 0x69
   13fe4:	beq	14074 <__assert_fail@plt+0x309c>
   13fe8:	cmp	r3, #66	; 0x42
   13fec:	bne	13f90 <__assert_fail@plt+0x2fb8>
   13ff0:	mov	r6, #2
   13ff4:	mov	r1, #1000	; 0x3e8
   13ff8:	cmp	r4, #89	; 0x59
   13ffc:	beq	14138 <__assert_fail@plt+0x3160>
   14000:	bhi	140ac <__assert_fail@plt+0x30d4>
   14004:	cmp	r4, #75	; 0x4b
   14008:	beq	140ec <__assert_fail@plt+0x3114>
   1400c:	bhi	1408c <__assert_fail@plt+0x30b4>
   14010:	cmp	r4, #69	; 0x45
   14014:	beq	14114 <__assert_fail@plt+0x313c>
   14018:	cmp	r4, #71	; 0x47
   1401c:	beq	14120 <__assert_fail@plt+0x3148>
   14020:	cmp	r4, #66	; 0x42
   14024:	moveq	r1, #1024	; 0x400
   14028:	bne	13f30 <__assert_fail@plt+0x2f58>
   1402c:	add	r0, sp, #8
   14030:	bl	13d60 <__assert_fail@plt+0x2d88>
   14034:	ldr	r3, [r7]
   14038:	orr	r5, r5, r0
   1403c:	add	r2, r3, r6
   14040:	str	r2, [r7]
   14044:	ldrb	r3, [r3, r6]
   14048:	cmp	r3, #0
   1404c:	orrne	r5, r5, #2
   14050:	ldrd	r2, [sp, #8]
   14054:	strd	r2, [r8]
   14058:	b	13eac <__assert_fail@plt+0x2ed4>
   1405c:	cmp	r4, #109	; 0x6d
   14060:	beq	13fc0 <__assert_fail@plt+0x2fe8>
   14064:	cmp	r4, #116	; 0x74
   14068:	beq	13fc0 <__assert_fail@plt+0x2fe8>
   1406c:	cmp	r4, #107	; 0x6b
   14070:	b	13f8c <__assert_fail@plt+0x2fb4>
   14074:	ldrb	r6, [r6, #2]
   14078:	cmp	r6, #66	; 0x42
   1407c:	movne	r6, #1
   14080:	moveq	r6, #3
   14084:	mov	r1, #1024	; 0x400
   14088:	b	13ff8 <__assert_fail@plt+0x3020>
   1408c:	cmp	r4, #80	; 0x50
   14090:	beq	14128 <__assert_fail@plt+0x3150>
   14094:	cmp	r4, #84	; 0x54
   14098:	beq	14130 <__assert_fail@plt+0x3158>
   1409c:	cmp	r4, #77	; 0x4d
   140a0:	bne	13f30 <__assert_fail@plt+0x2f58>
   140a4:	mov	r2, #2
   140a8:	b	14118 <__assert_fail@plt+0x3140>
   140ac:	cmp	r4, #103	; 0x67
   140b0:	beq	14120 <__assert_fail@plt+0x3148>
   140b4:	bhi	140d8 <__assert_fail@plt+0x3100>
   140b8:	cmp	r4, #98	; 0x62
   140bc:	beq	1410c <__assert_fail@plt+0x3134>
   140c0:	cmp	r4, #99	; 0x63
   140c4:	beq	14148 <__assert_fail@plt+0x3170>
   140c8:	cmp	r4, #90	; 0x5a
   140cc:	bne	13f30 <__assert_fail@plt+0x2f58>
   140d0:	mov	r2, #7
   140d4:	b	14118 <__assert_fail@plt+0x3140>
   140d8:	cmp	r4, #109	; 0x6d
   140dc:	beq	140a4 <__assert_fail@plt+0x30cc>
   140e0:	bhi	140f4 <__assert_fail@plt+0x311c>
   140e4:	cmp	r4, #107	; 0x6b
   140e8:	bne	13f30 <__assert_fail@plt+0x2f58>
   140ec:	mov	r2, #1
   140f0:	b	14118 <__assert_fail@plt+0x3140>
   140f4:	cmp	r4, #116	; 0x74
   140f8:	beq	14130 <__assert_fail@plt+0x3158>
   140fc:	cmp	r4, #119	; 0x77
   14100:	moveq	r1, #2
   14104:	beq	1402c <__assert_fail@plt+0x3054>
   14108:	b	13f30 <__assert_fail@plt+0x2f58>
   1410c:	mov	r1, #512	; 0x200
   14110:	b	1402c <__assert_fail@plt+0x3054>
   14114:	mov	r2, #6
   14118:	add	r0, sp, #8
   1411c:	b	14140 <__assert_fail@plt+0x3168>
   14120:	mov	r2, #3
   14124:	b	14118 <__assert_fail@plt+0x3140>
   14128:	mov	r2, #5
   1412c:	b	14118 <__assert_fail@plt+0x3140>
   14130:	mov	r2, #4
   14134:	b	14118 <__assert_fail@plt+0x3140>
   14138:	mov	r2, #8
   1413c:	add	r0, sp, r2
   14140:	bl	13df4 <__assert_fail@plt+0x2e1c>
   14144:	b	14034 <__assert_fail@plt+0x305c>
   14148:	mov	r0, #0
   1414c:	b	14034 <__assert_fail@plt+0x305c>
   14150:	andeq	r5, r1, r2, lsr #23
   14154:	andeq	r5, r1, sp, lsr #23
   14158:			; <UNDEFINED> instruction: 0x00015bbb
   1415c:	cmp	r1, #0
   14160:	cmpne	r0, #0
   14164:	moveq	r1, #1
   14168:	moveq	r0, r1
   1416c:	umull	r2, r3, r0, r1
   14170:	adds	r3, r3, #0
   14174:	movne	r3, #1
   14178:	cmp	r2, #0
   1417c:	blt	1418c <__assert_fail@plt+0x31b4>
   14180:	cmp	r3, #0
   14184:	bne	1418c <__assert_fail@plt+0x31b4>
   14188:	b	10d38 <calloc@plt>
   1418c:	push	{r4, lr}
   14190:	bl	10edc <__errno_location@plt>
   14194:	mov	r3, #12
   14198:	str	r3, [r0]
   1419c:	mov	r0, #0
   141a0:	pop	{r4, pc}
   141a4:	cmp	r0, #0
   141a8:	mov	r3, #0
   141ac:	moveq	r0, #1
   141b0:	adds	r3, r3, #0
   141b4:	movne	r3, #1
   141b8:	cmp	r0, #0
   141bc:	blt	141cc <__assert_fail@plt+0x31f4>
   141c0:	cmp	r3, #0
   141c4:	bne	141cc <__assert_fail@plt+0x31f4>
   141c8:	b	10e64 <malloc@plt>
   141cc:	push	{r4, lr}
   141d0:	bl	10edc <__errno_location@plt>
   141d4:	mov	r3, #12
   141d8:	str	r3, [r0]
   141dc:	mov	r0, #0
   141e0:	pop	{r4, pc}
   141e4:	cmp	r0, #0
   141e8:	push	{r4, lr}
   141ec:	mov	r4, r1
   141f0:	bne	14200 <__assert_fail@plt+0x3228>
   141f4:	mov	r0, r1
   141f8:	pop	{r4, lr}
   141fc:	b	141a4 <__assert_fail@plt+0x31cc>
   14200:	cmp	r1, #0
   14204:	bne	14214 <__assert_fail@plt+0x323c>
   14208:	bl	11cc4 <__assert_fail@plt+0xcec>
   1420c:	mov	r0, #0
   14210:	pop	{r4, pc}
   14214:	cmp	r1, #0
   14218:	blt	14228 <__assert_fail@plt+0x3250>
   1421c:	mov	r3, #0
   14220:	cmp	r3, r3
   14224:	beq	14238 <__assert_fail@plt+0x3260>
   14228:	bl	10edc <__errno_location@plt>
   1422c:	mov	r3, #12
   14230:	str	r3, [r0]
   14234:	b	1420c <__assert_fail@plt+0x3234>
   14238:	pop	{r4, lr}
   1423c:	b	10dd4 <realloc@plt>
   14240:	cmn	r0, #100	; 0x64
   14244:	beq	14250 <__assert_fail@plt+0x3278>
   14248:	push	{r4, lr}
   1424c:	bl	10fcc <abort@plt>
   14250:	mov	ip, r1
   14254:	mov	r0, ip
   14258:	mov	r1, r2
   1425c:	mov	r2, r3
   14260:	b	10df8 <readlink@plt>
   14264:	ldr	r3, [pc, #36]	; 14290 <__assert_fail@plt+0x32b8>
   14268:	push	{r0, r1, r2, lr}
   1426c:	mov	r1, r0
   14270:	str	r3, [sp, #4]
   14274:	mov	r3, #0
   14278:	str	r3, [sp]
   1427c:	mov	r2, r3
   14280:	mvn	r0, #99	; 0x63
   14284:	bl	14324 <__assert_fail@plt+0x334c>
   14288:	add	sp, sp, #12
   1428c:	pop	{pc}		; (ldr pc, [sp], #4)
   14290:	andeq	r4, r1, r0, asr #4
   14294:	mov	r2, r0
   14298:	push	{r4, lr}
   1429c:	mov	r0, r2
   142a0:	ldrb	r3, [r2]
   142a4:	add	r1, r2, #1
   142a8:	cmp	r3, #47	; 0x2f
   142ac:	beq	142d0 <__assert_fail@plt+0x32f8>
   142b0:	mov	r3, #0
   142b4:	mov	lr, #1
   142b8:	mov	r4, r3
   142bc:	mov	ip, r2
   142c0:	ldrb	r1, [r2], #1
   142c4:	cmp	r1, #0
   142c8:	bne	142d8 <__assert_fail@plt+0x3300>
   142cc:	pop	{r4, pc}
   142d0:	mov	r2, r1
   142d4:	b	1429c <__assert_fail@plt+0x32c4>
   142d8:	cmp	r1, #47	; 0x2f
   142dc:	moveq	r3, lr
   142e0:	beq	142bc <__assert_fail@plt+0x32e4>
   142e4:	cmp	r3, #0
   142e8:	movne	r0, ip
   142ec:	movne	r3, r4
   142f0:	b	142bc <__assert_fail@plt+0x32e4>
   142f4:	push	{r4, lr}
   142f8:	mov	r4, r0
   142fc:	bl	10ec4 <strlen@plt>
   14300:	cmp	r0, #1
   14304:	popls	{r4, pc}
   14308:	sub	r3, r0, #1
   1430c:	ldrb	r2, [r4, r3]
   14310:	cmp	r2, #47	; 0x2f
   14314:	beq	1431c <__assert_fail@plt+0x3344>
   14318:	pop	{r4, pc}
   1431c:	mov	r0, r3
   14320:	b	14300 <__assert_fail@plt+0x3328>
   14324:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14328:	sub	sp, sp, #1024	; 0x400
   1432c:	mov	r9, r1
   14330:	ldr	r6, [sp, #1056]	; 0x420
   14334:	ldr	r1, [pc, #352]	; 1449c <__assert_fail@plt+0x34c4>
   14338:	cmp	r6, #0
   1433c:	moveq	r6, r1
   14340:	subs	r8, r2, #0
   14344:	moveq	r3, #1024	; 0x400
   14348:	mvn	r5, #-2147483648	; 0x80000000
   1434c:	moveq	r8, sp
   14350:	ldr	sl, [sp, #1060]	; 0x424
   14354:	cmp	r3, r5
   14358:	mov	r7, r0
   1435c:	movcc	r5, r3
   14360:	mov	r4, r8
   14364:	mov	r3, r5
   14368:	mov	r2, r4
   1436c:	mov	r1, r9
   14370:	mov	r0, r7
   14374:	blx	sl
   14378:	cmp	r0, #0
   1437c:	bge	143ac <__assert_fail@plt+0x33d4>
   14380:	cmp	r8, r4
   14384:	beq	143a4 <__assert_fail@plt+0x33cc>
   14388:	bl	10edc <__errno_location@plt>
   1438c:	ldr	r3, [r6, #8]
   14390:	ldr	r7, [r0]
   14394:	mov	r5, r0
   14398:	mov	r0, r4
   1439c:	blx	r3
   143a0:	str	r7, [r5]
   143a4:	mov	r4, #0
   143a8:	b	143f0 <__assert_fail@plt+0x3418>
   143ac:	cmp	r0, r5
   143b0:	bge	1442c <__assert_fail@plt+0x3454>
   143b4:	mov	r3, #0
   143b8:	strb	r3, [r4, r0]
   143bc:	mov	r3, sp
   143c0:	cmp	r4, r3
   143c4:	add	r7, r0, #1
   143c8:	bne	143fc <__assert_fail@plt+0x3424>
   143cc:	ldr	r3, [r6]
   143d0:	mov	r0, r7
   143d4:	blx	r3
   143d8:	cmp	r0, #0
   143dc:	beq	14494 <__assert_fail@plt+0x34bc>
   143e0:	mov	r1, r4
   143e4:	mov	r2, r7
   143e8:	bl	10d8c <memcpy@plt>
   143ec:	mov	r4, r0
   143f0:	mov	r0, r4
   143f4:	add	sp, sp, #1024	; 0x400
   143f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   143fc:	cmp	r8, r4
   14400:	cmpne	r7, r5
   14404:	bge	143f0 <__assert_fail@plt+0x3418>
   14408:	ldr	r3, [r6, #4]
   1440c:	cmp	r3, #0
   14410:	beq	143f0 <__assert_fail@plt+0x3418>
   14414:	mov	r0, r4
   14418:	mov	r1, r7
   1441c:	blx	r3
   14420:	cmp	r0, #0
   14424:	movne	r4, r0
   14428:	b	143f0 <__assert_fail@plt+0x3418>
   1442c:	cmp	r8, r4
   14430:	beq	14440 <__assert_fail@plt+0x3468>
   14434:	ldr	r3, [r6, #8]
   14438:	mov	r0, r4
   1443c:	blx	r3
   14440:	cmn	r5, #-1073741822	; 0xc0000002
   14444:	ble	14458 <__assert_fail@plt+0x3480>
   14448:	bl	10edc <__errno_location@plt>
   1444c:	mov	r3, #36	; 0x24
   14450:	str	r3, [r0]
   14454:	b	143a4 <__assert_fail@plt+0x33cc>
   14458:	lsl	r5, r5, #1
   1445c:	add	r5, r5, #1
   14460:	ldr	r3, [r6]
   14464:	mov	r0, r5
   14468:	blx	r3
   1446c:	subs	r4, r0, #0
   14470:	bne	14364 <__assert_fail@plt+0x338c>
   14474:	ldr	r3, [r6, #12]
   14478:	cmp	r3, #0
   1447c:	beq	14488 <__assert_fail@plt+0x34b0>
   14480:	mov	r0, r5
   14484:	blx	r3
   14488:	bl	10edc <__errno_location@plt>
   1448c:	mov	r3, #12
   14490:	b	14450 <__assert_fail@plt+0x3478>
   14494:	mov	r5, r7
   14498:	b	14474 <__assert_fail@plt+0x349c>
   1449c:	andeq	r5, r1, r8, ror #23
   144a0:	push	{r4, r5, r6, lr}
   144a4:	mov	r4, r0
   144a8:	bl	10e1c <__fpending@plt>
   144ac:	mov	r5, r0
   144b0:	mov	r0, r4
   144b4:	bl	10e28 <ferror_unlocked@plt>
   144b8:	mov	r6, r0
   144bc:	mov	r0, r4
   144c0:	bl	14510 <__assert_fail@plt+0x3538>
   144c4:	cmp	r6, #0
   144c8:	mov	r4, r0
   144cc:	bne	144f8 <__assert_fail@plt+0x3520>
   144d0:	cmp	r0, #0
   144d4:	beq	144f0 <__assert_fail@plt+0x3518>
   144d8:	cmp	r5, #0
   144dc:	bne	14508 <__assert_fail@plt+0x3530>
   144e0:	bl	10edc <__errno_location@plt>
   144e4:	ldr	r4, [r0]
   144e8:	subs	r4, r4, #9
   144ec:	mvnne	r4, #0
   144f0:	mov	r0, r4
   144f4:	pop	{r4, r5, r6, pc}
   144f8:	cmp	r0, #0
   144fc:	bne	14508 <__assert_fail@plt+0x3530>
   14500:	bl	10edc <__errno_location@plt>
   14504:	str	r4, [r0]
   14508:	mvn	r4, #0
   1450c:	b	144f0 <__assert_fail@plt+0x3518>
   14510:	push	{r0, r1, r2, r4, r5, lr}
   14514:	mov	r4, r0
   14518:	bl	10f0c <fileno@plt>
   1451c:	cmp	r0, #0
   14520:	mov	r0, r4
   14524:	bge	14534 <__assert_fail@plt+0x355c>
   14528:	add	sp, sp, #12
   1452c:	pop	{r4, r5, lr}
   14530:	b	10f3c <fclose@plt>
   14534:	bl	10e7c <__freading@plt>
   14538:	cmp	r0, #0
   1453c:	bne	14578 <__assert_fail@plt+0x35a0>
   14540:	mov	r0, r4
   14544:	bl	145b8 <__assert_fail@plt+0x35e0>
   14548:	cmp	r0, #0
   1454c:	bne	145ac <__assert_fail@plt+0x35d4>
   14550:	mov	r5, #0
   14554:	mov	r0, r4
   14558:	bl	10f3c <fclose@plt>
   1455c:	cmp	r5, #0
   14560:	beq	14570 <__assert_fail@plt+0x3598>
   14564:	bl	10edc <__errno_location@plt>
   14568:	str	r5, [r0]
   1456c:	mvn	r0, #0
   14570:	add	sp, sp, #12
   14574:	pop	{r4, r5, pc}
   14578:	mov	r0, r4
   1457c:	bl	10f0c <fileno@plt>
   14580:	mov	r3, #1
   14584:	str	r3, [sp]
   14588:	mov	r2, #0
   1458c:	mov	r3, #0
   14590:	bl	10e04 <lseek64@plt>
   14594:	mvn	r3, #0
   14598:	mvn	r2, #0
   1459c:	cmp	r1, r3
   145a0:	cmpeq	r0, r2
   145a4:	bne	14540 <__assert_fail@plt+0x3568>
   145a8:	b	14550 <__assert_fail@plt+0x3578>
   145ac:	bl	10edc <__errno_location@plt>
   145b0:	ldr	r5, [r0]
   145b4:	b	14554 <__assert_fail@plt+0x357c>
   145b8:	push	{r0, r1, r4, lr}
   145bc:	subs	r4, r0, #0
   145c0:	bne	145d4 <__assert_fail@plt+0x35fc>
   145c4:	mov	r0, r4
   145c8:	add	sp, sp, #8
   145cc:	pop	{r4, lr}
   145d0:	b	10d68 <fflush@plt>
   145d4:	bl	10e7c <__freading@plt>
   145d8:	cmp	r0, #0
   145dc:	beq	145c4 <__assert_fail@plt+0x35ec>
   145e0:	ldr	r3, [r4]
   145e4:	tst	r3, #256	; 0x100
   145e8:	beq	145c4 <__assert_fail@plt+0x35ec>
   145ec:	mov	r3, #1
   145f0:	str	r3, [sp]
   145f4:	mov	r2, #0
   145f8:	mov	r3, #0
   145fc:	mov	r0, r4
   14600:	bl	14608 <__assert_fail@plt+0x3630>
   14604:	b	145c4 <__assert_fail@plt+0x35ec>
   14608:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1460c:	mov	r4, r0
   14610:	ldmib	r0, {ip, lr}
   14614:	ldr	r8, [sp, #32]
   14618:	cmp	lr, ip
   1461c:	bne	14688 <__assert_fail@plt+0x36b0>
   14620:	ldr	lr, [r0, #20]
   14624:	ldr	ip, [r0, #16]
   14628:	cmp	lr, ip
   1462c:	bne	14688 <__assert_fail@plt+0x36b0>
   14630:	ldr	r5, [r0, #36]	; 0x24
   14634:	cmp	r5, #0
   14638:	bne	14688 <__assert_fail@plt+0x36b0>
   1463c:	mov	r6, r2
   14640:	mov	r7, r3
   14644:	bl	10f0c <fileno@plt>
   14648:	mov	r2, r6
   1464c:	mov	r3, r7
   14650:	str	r8, [sp]
   14654:	bl	10e04 <lseek64@plt>
   14658:	mvn	r3, #0
   1465c:	mvn	r2, #0
   14660:	cmp	r1, r3
   14664:	cmpeq	r0, r2
   14668:	mvneq	r0, #0
   1466c:	ldrne	r3, [r4]
   14670:	strdne	r0, [r4, #80]	; 0x50
   14674:	movne	r0, r5
   14678:	bicne	r3, r3, #16
   1467c:	strne	r3, [r4]
   14680:	add	sp, sp, #8
   14684:	pop	{r4, r5, r6, r7, r8, pc}
   14688:	str	r8, [sp, #32]
   1468c:	mov	r0, r4
   14690:	add	sp, sp, #8
   14694:	pop	{r4, r5, r6, r7, r8, lr}
   14698:	b	10f48 <fseeko64@plt>
   1469c:	push	{r4, lr}
   146a0:	mov	r0, #14
   146a4:	bl	10f90 <nl_langinfo@plt>
   146a8:	ldr	r3, [pc, #24]	; 146c8 <__assert_fail@plt+0x36f0>
   146ac:	cmp	r0, #0
   146b0:	moveq	r0, r3
   146b4:	ldr	r3, [pc, #16]	; 146cc <__assert_fail@plt+0x36f4>
   146b8:	ldrb	r2, [r0]
   146bc:	cmp	r2, #0
   146c0:	moveq	r0, r3
   146c4:	pop	{r4, pc}
   146c8:	andeq	r5, r1, r9, lsl r5
   146cc:	andeq	r5, r1, r1, ror #23
   146d0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   146d4:	subs	r5, r0, #0
   146d8:	addeq	r5, sp, #4
   146dc:	mov	r0, r5
   146e0:	mov	r7, r2
   146e4:	mov	r6, r1
   146e8:	bl	10e34 <mbrtowc@plt>
   146ec:	cmp	r7, #0
   146f0:	cmnne	r0, #3
   146f4:	mov	r4, r0
   146f8:	bls	14714 <__assert_fail@plt+0x373c>
   146fc:	mov	r0, #0
   14700:	bl	1476c <__assert_fail@plt+0x3794>
   14704:	cmp	r0, #0
   14708:	moveq	r4, #1
   1470c:	ldrbeq	r3, [r6]
   14710:	streq	r3, [r5]
   14714:	mov	r0, r4
   14718:	add	sp, sp, #12
   1471c:	pop	{r4, r5, r6, r7, pc}
   14720:	push	{r4, r5, r6, lr}
   14724:	subs	r4, r2, #0
   14728:	mov	r6, r0
   1472c:	mov	r5, r1
   14730:	beq	14748 <__assert_fail@plt+0x3770>
   14734:	mov	r1, r4
   14738:	mvn	r0, #0
   1473c:	bl	1484c <__assert_fail@plt+0x3874>
   14740:	cmp	r0, r5
   14744:	bcc	14758 <__assert_fail@plt+0x3780>
   14748:	mul	r1, r5, r4
   1474c:	mov	r0, r6
   14750:	pop	{r4, r5, r6, lr}
   14754:	b	141e4 <__assert_fail@plt+0x320c>
   14758:	bl	10edc <__errno_location@plt>
   1475c:	mov	r3, #12
   14760:	str	r3, [r0]
   14764:	mov	r0, #0
   14768:	pop	{r4, r5, r6, pc}
   1476c:	push	{lr}		; (str lr, [sp, #-4]!)
   14770:	sub	sp, sp, #268	; 0x10c
   14774:	ldr	r2, [pc, #64]	; 147bc <__assert_fail@plt+0x37e4>
   14778:	add	r1, sp, #4
   1477c:	bl	147c8 <__assert_fail@plt+0x37f0>
   14780:	cmp	r0, #0
   14784:	movne	r0, #0
   14788:	bne	147b4 <__assert_fail@plt+0x37dc>
   1478c:	ldr	r1, [pc, #44]	; 147c0 <__assert_fail@plt+0x37e8>
   14790:	add	r0, sp, #4
   14794:	bl	10d5c <strcmp@plt>
   14798:	cmp	r0, #0
   1479c:	beq	147b4 <__assert_fail@plt+0x37dc>
   147a0:	ldr	r1, [pc, #28]	; 147c4 <__assert_fail@plt+0x37ec>
   147a4:	add	r0, sp, #4
   147a8:	bl	10d5c <strcmp@plt>
   147ac:	adds	r0, r0, #0
   147b0:	movne	r0, #1
   147b4:	add	sp, sp, #268	; 0x10c
   147b8:	pop	{pc}		; (ldr pc, [sp], #4)
   147bc:	andeq	r0, r0, r1, lsl #2
   147c0:	strdeq	r5, [r1], -r8
   147c4:	strdeq	r5, [r1], -sl
   147c8:	push	{r4, r5, r6, lr}
   147cc:	mov	r5, r1
   147d0:	mov	r1, #0
   147d4:	mov	r4, r2
   147d8:	bl	10f60 <setlocale@plt>
   147dc:	subs	r6, r0, #0
   147e0:	bne	147f4 <__assert_fail@plt+0x381c>
   147e4:	cmp	r4, #0
   147e8:	strbne	r6, [r5]
   147ec:	mov	r0, #22
   147f0:	pop	{r4, r5, r6, pc}
   147f4:	bl	10ec4 <strlen@plt>
   147f8:	cmp	r4, r0
   147fc:	bls	14818 <__assert_fail@plt+0x3840>
   14800:	add	r2, r0, #1
   14804:	mov	r1, r6
   14808:	mov	r0, r5
   1480c:	bl	10d8c <memcpy@plt>
   14810:	mov	r0, #0
   14814:	pop	{r4, r5, r6, pc}
   14818:	cmp	r4, #0
   1481c:	beq	1483c <__assert_fail@plt+0x3864>
   14820:	sub	r4, r4, #1
   14824:	mov	r2, r4
   14828:	mov	r1, r6
   1482c:	mov	r0, r5
   14830:	bl	10d8c <memcpy@plt>
   14834:	mov	r3, #0
   14838:	strb	r3, [r5, r4]
   1483c:	mov	r0, #34	; 0x22
   14840:	pop	{r4, r5, r6, pc}
   14844:	mov	r1, #0
   14848:	b	10f60 <setlocale@plt>
   1484c:	subs	r2, r1, #1
   14850:	bxeq	lr
   14854:	bcc	14a2c <__assert_fail@plt+0x3a54>
   14858:	cmp	r0, r1
   1485c:	bls	14a10 <__assert_fail@plt+0x3a38>
   14860:	tst	r1, r2
   14864:	beq	14a1c <__assert_fail@plt+0x3a44>
   14868:	clz	r3, r0
   1486c:	clz	r2, r1
   14870:	sub	r3, r2, r3
   14874:	rsbs	r3, r3, #31
   14878:	addne	r3, r3, r3, lsl #1
   1487c:	mov	r2, #0
   14880:	addne	pc, pc, r3, lsl #2
   14884:	nop			; (mov r0, r0)
   14888:	cmp	r0, r1, lsl #31
   1488c:	adc	r2, r2, r2
   14890:	subcs	r0, r0, r1, lsl #31
   14894:	cmp	r0, r1, lsl #30
   14898:	adc	r2, r2, r2
   1489c:	subcs	r0, r0, r1, lsl #30
   148a0:	cmp	r0, r1, lsl #29
   148a4:	adc	r2, r2, r2
   148a8:	subcs	r0, r0, r1, lsl #29
   148ac:	cmp	r0, r1, lsl #28
   148b0:	adc	r2, r2, r2
   148b4:	subcs	r0, r0, r1, lsl #28
   148b8:	cmp	r0, r1, lsl #27
   148bc:	adc	r2, r2, r2
   148c0:	subcs	r0, r0, r1, lsl #27
   148c4:	cmp	r0, r1, lsl #26
   148c8:	adc	r2, r2, r2
   148cc:	subcs	r0, r0, r1, lsl #26
   148d0:	cmp	r0, r1, lsl #25
   148d4:	adc	r2, r2, r2
   148d8:	subcs	r0, r0, r1, lsl #25
   148dc:	cmp	r0, r1, lsl #24
   148e0:	adc	r2, r2, r2
   148e4:	subcs	r0, r0, r1, lsl #24
   148e8:	cmp	r0, r1, lsl #23
   148ec:	adc	r2, r2, r2
   148f0:	subcs	r0, r0, r1, lsl #23
   148f4:	cmp	r0, r1, lsl #22
   148f8:	adc	r2, r2, r2
   148fc:	subcs	r0, r0, r1, lsl #22
   14900:	cmp	r0, r1, lsl #21
   14904:	adc	r2, r2, r2
   14908:	subcs	r0, r0, r1, lsl #21
   1490c:	cmp	r0, r1, lsl #20
   14910:	adc	r2, r2, r2
   14914:	subcs	r0, r0, r1, lsl #20
   14918:	cmp	r0, r1, lsl #19
   1491c:	adc	r2, r2, r2
   14920:	subcs	r0, r0, r1, lsl #19
   14924:	cmp	r0, r1, lsl #18
   14928:	adc	r2, r2, r2
   1492c:	subcs	r0, r0, r1, lsl #18
   14930:	cmp	r0, r1, lsl #17
   14934:	adc	r2, r2, r2
   14938:	subcs	r0, r0, r1, lsl #17
   1493c:	cmp	r0, r1, lsl #16
   14940:	adc	r2, r2, r2
   14944:	subcs	r0, r0, r1, lsl #16
   14948:	cmp	r0, r1, lsl #15
   1494c:	adc	r2, r2, r2
   14950:	subcs	r0, r0, r1, lsl #15
   14954:	cmp	r0, r1, lsl #14
   14958:	adc	r2, r2, r2
   1495c:	subcs	r0, r0, r1, lsl #14
   14960:	cmp	r0, r1, lsl #13
   14964:	adc	r2, r2, r2
   14968:	subcs	r0, r0, r1, lsl #13
   1496c:	cmp	r0, r1, lsl #12
   14970:	adc	r2, r2, r2
   14974:	subcs	r0, r0, r1, lsl #12
   14978:	cmp	r0, r1, lsl #11
   1497c:	adc	r2, r2, r2
   14980:	subcs	r0, r0, r1, lsl #11
   14984:	cmp	r0, r1, lsl #10
   14988:	adc	r2, r2, r2
   1498c:	subcs	r0, r0, r1, lsl #10
   14990:	cmp	r0, r1, lsl #9
   14994:	adc	r2, r2, r2
   14998:	subcs	r0, r0, r1, lsl #9
   1499c:	cmp	r0, r1, lsl #8
   149a0:	adc	r2, r2, r2
   149a4:	subcs	r0, r0, r1, lsl #8
   149a8:	cmp	r0, r1, lsl #7
   149ac:	adc	r2, r2, r2
   149b0:	subcs	r0, r0, r1, lsl #7
   149b4:	cmp	r0, r1, lsl #6
   149b8:	adc	r2, r2, r2
   149bc:	subcs	r0, r0, r1, lsl #6
   149c0:	cmp	r0, r1, lsl #5
   149c4:	adc	r2, r2, r2
   149c8:	subcs	r0, r0, r1, lsl #5
   149cc:	cmp	r0, r1, lsl #4
   149d0:	adc	r2, r2, r2
   149d4:	subcs	r0, r0, r1, lsl #4
   149d8:	cmp	r0, r1, lsl #3
   149dc:	adc	r2, r2, r2
   149e0:	subcs	r0, r0, r1, lsl #3
   149e4:	cmp	r0, r1, lsl #2
   149e8:	adc	r2, r2, r2
   149ec:	subcs	r0, r0, r1, lsl #2
   149f0:	cmp	r0, r1, lsl #1
   149f4:	adc	r2, r2, r2
   149f8:	subcs	r0, r0, r1, lsl #1
   149fc:	cmp	r0, r1
   14a00:	adc	r2, r2, r2
   14a04:	subcs	r0, r0, r1
   14a08:	mov	r0, r2
   14a0c:	bx	lr
   14a10:	moveq	r0, #1
   14a14:	movne	r0, #0
   14a18:	bx	lr
   14a1c:	clz	r2, r1
   14a20:	rsb	r2, r2, #31
   14a24:	lsr	r0, r0, r2
   14a28:	bx	lr
   14a2c:	cmp	r0, #0
   14a30:	mvnne	r0, #0
   14a34:	b	14cd4 <__assert_fail@plt+0x3cfc>
   14a38:	cmp	r1, #0
   14a3c:	beq	14a2c <__assert_fail@plt+0x3a54>
   14a40:	push	{r0, r1, lr}
   14a44:	bl	1484c <__assert_fail@plt+0x3874>
   14a48:	pop	{r1, r2, lr}
   14a4c:	mul	r3, r2, r0
   14a50:	sub	r1, r1, r3
   14a54:	bx	lr
   14a58:	cmp	r1, #0
   14a5c:	beq	14c68 <__assert_fail@plt+0x3c90>
   14a60:	eor	ip, r0, r1
   14a64:	rsbmi	r1, r1, #0
   14a68:	subs	r2, r1, #1
   14a6c:	beq	14c34 <__assert_fail@plt+0x3c5c>
   14a70:	movs	r3, r0
   14a74:	rsbmi	r3, r0, #0
   14a78:	cmp	r3, r1
   14a7c:	bls	14c40 <__assert_fail@plt+0x3c68>
   14a80:	tst	r1, r2
   14a84:	beq	14c50 <__assert_fail@plt+0x3c78>
   14a88:	clz	r2, r3
   14a8c:	clz	r0, r1
   14a90:	sub	r2, r0, r2
   14a94:	rsbs	r2, r2, #31
   14a98:	addne	r2, r2, r2, lsl #1
   14a9c:	mov	r0, #0
   14aa0:	addne	pc, pc, r2, lsl #2
   14aa4:	nop			; (mov r0, r0)
   14aa8:	cmp	r3, r1, lsl #31
   14aac:	adc	r0, r0, r0
   14ab0:	subcs	r3, r3, r1, lsl #31
   14ab4:	cmp	r3, r1, lsl #30
   14ab8:	adc	r0, r0, r0
   14abc:	subcs	r3, r3, r1, lsl #30
   14ac0:	cmp	r3, r1, lsl #29
   14ac4:	adc	r0, r0, r0
   14ac8:	subcs	r3, r3, r1, lsl #29
   14acc:	cmp	r3, r1, lsl #28
   14ad0:	adc	r0, r0, r0
   14ad4:	subcs	r3, r3, r1, lsl #28
   14ad8:	cmp	r3, r1, lsl #27
   14adc:	adc	r0, r0, r0
   14ae0:	subcs	r3, r3, r1, lsl #27
   14ae4:	cmp	r3, r1, lsl #26
   14ae8:	adc	r0, r0, r0
   14aec:	subcs	r3, r3, r1, lsl #26
   14af0:	cmp	r3, r1, lsl #25
   14af4:	adc	r0, r0, r0
   14af8:	subcs	r3, r3, r1, lsl #25
   14afc:	cmp	r3, r1, lsl #24
   14b00:	adc	r0, r0, r0
   14b04:	subcs	r3, r3, r1, lsl #24
   14b08:	cmp	r3, r1, lsl #23
   14b0c:	adc	r0, r0, r0
   14b10:	subcs	r3, r3, r1, lsl #23
   14b14:	cmp	r3, r1, lsl #22
   14b18:	adc	r0, r0, r0
   14b1c:	subcs	r3, r3, r1, lsl #22
   14b20:	cmp	r3, r1, lsl #21
   14b24:	adc	r0, r0, r0
   14b28:	subcs	r3, r3, r1, lsl #21
   14b2c:	cmp	r3, r1, lsl #20
   14b30:	adc	r0, r0, r0
   14b34:	subcs	r3, r3, r1, lsl #20
   14b38:	cmp	r3, r1, lsl #19
   14b3c:	adc	r0, r0, r0
   14b40:	subcs	r3, r3, r1, lsl #19
   14b44:	cmp	r3, r1, lsl #18
   14b48:	adc	r0, r0, r0
   14b4c:	subcs	r3, r3, r1, lsl #18
   14b50:	cmp	r3, r1, lsl #17
   14b54:	adc	r0, r0, r0
   14b58:	subcs	r3, r3, r1, lsl #17
   14b5c:	cmp	r3, r1, lsl #16
   14b60:	adc	r0, r0, r0
   14b64:	subcs	r3, r3, r1, lsl #16
   14b68:	cmp	r3, r1, lsl #15
   14b6c:	adc	r0, r0, r0
   14b70:	subcs	r3, r3, r1, lsl #15
   14b74:	cmp	r3, r1, lsl #14
   14b78:	adc	r0, r0, r0
   14b7c:	subcs	r3, r3, r1, lsl #14
   14b80:	cmp	r3, r1, lsl #13
   14b84:	adc	r0, r0, r0
   14b88:	subcs	r3, r3, r1, lsl #13
   14b8c:	cmp	r3, r1, lsl #12
   14b90:	adc	r0, r0, r0
   14b94:	subcs	r3, r3, r1, lsl #12
   14b98:	cmp	r3, r1, lsl #11
   14b9c:	adc	r0, r0, r0
   14ba0:	subcs	r3, r3, r1, lsl #11
   14ba4:	cmp	r3, r1, lsl #10
   14ba8:	adc	r0, r0, r0
   14bac:	subcs	r3, r3, r1, lsl #10
   14bb0:	cmp	r3, r1, lsl #9
   14bb4:	adc	r0, r0, r0
   14bb8:	subcs	r3, r3, r1, lsl #9
   14bbc:	cmp	r3, r1, lsl #8
   14bc0:	adc	r0, r0, r0
   14bc4:	subcs	r3, r3, r1, lsl #8
   14bc8:	cmp	r3, r1, lsl #7
   14bcc:	adc	r0, r0, r0
   14bd0:	subcs	r3, r3, r1, lsl #7
   14bd4:	cmp	r3, r1, lsl #6
   14bd8:	adc	r0, r0, r0
   14bdc:	subcs	r3, r3, r1, lsl #6
   14be0:	cmp	r3, r1, lsl #5
   14be4:	adc	r0, r0, r0
   14be8:	subcs	r3, r3, r1, lsl #5
   14bec:	cmp	r3, r1, lsl #4
   14bf0:	adc	r0, r0, r0
   14bf4:	subcs	r3, r3, r1, lsl #4
   14bf8:	cmp	r3, r1, lsl #3
   14bfc:	adc	r0, r0, r0
   14c00:	subcs	r3, r3, r1, lsl #3
   14c04:	cmp	r3, r1, lsl #2
   14c08:	adc	r0, r0, r0
   14c0c:	subcs	r3, r3, r1, lsl #2
   14c10:	cmp	r3, r1, lsl #1
   14c14:	adc	r0, r0, r0
   14c18:	subcs	r3, r3, r1, lsl #1
   14c1c:	cmp	r3, r1
   14c20:	adc	r0, r0, r0
   14c24:	subcs	r3, r3, r1
   14c28:	cmp	ip, #0
   14c2c:	rsbmi	r0, r0, #0
   14c30:	bx	lr
   14c34:	teq	ip, r0
   14c38:	rsbmi	r0, r0, #0
   14c3c:	bx	lr
   14c40:	movcc	r0, #0
   14c44:	asreq	r0, ip, #31
   14c48:	orreq	r0, r0, #1
   14c4c:	bx	lr
   14c50:	clz	r2, r1
   14c54:	rsb	r2, r2, #31
   14c58:	cmp	ip, #0
   14c5c:	lsr	r0, r3, r2
   14c60:	rsbmi	r0, r0, #0
   14c64:	bx	lr
   14c68:	cmp	r0, #0
   14c6c:	mvngt	r0, #-2147483648	; 0x80000000
   14c70:	movlt	r0, #-2147483648	; 0x80000000
   14c74:	b	14cd4 <__assert_fail@plt+0x3cfc>
   14c78:	cmp	r1, #0
   14c7c:	beq	14c68 <__assert_fail@plt+0x3c90>
   14c80:	push	{r0, r1, lr}
   14c84:	bl	14a60 <__assert_fail@plt+0x3a88>
   14c88:	pop	{r1, r2, lr}
   14c8c:	mul	r3, r2, r0
   14c90:	sub	r1, r1, r3
   14c94:	bx	lr
   14c98:	cmp	r3, #0
   14c9c:	cmpeq	r2, #0
   14ca0:	bne	14cb8 <__assert_fail@plt+0x3ce0>
   14ca4:	cmp	r1, #0
   14ca8:	cmpeq	r0, #0
   14cac:	mvnne	r1, #0
   14cb0:	mvnne	r0, #0
   14cb4:	b	14cd4 <__assert_fail@plt+0x3cfc>
   14cb8:	sub	sp, sp, #8
   14cbc:	push	{sp, lr}
   14cc0:	bl	14ce4 <__assert_fail@plt+0x3d0c>
   14cc4:	ldr	lr, [sp, #4]
   14cc8:	add	sp, sp, #8
   14ccc:	pop	{r2, r3}
   14cd0:	bx	lr
   14cd4:	push	{r1, lr}
   14cd8:	mov	r0, #8
   14cdc:	bl	10d50 <raise@plt>
   14ce0:	pop	{r1, pc}
   14ce4:	cmp	r1, r3
   14ce8:	push	{r4, r5, r6, r7, r8, r9, lr}
   14cec:	cmpeq	r0, r2
   14cf0:	mov	r4, r0
   14cf4:	mov	r5, r1
   14cf8:	ldr	r9, [sp, #28]
   14cfc:	movcc	r0, #0
   14d00:	movcc	r1, #0
   14d04:	bcc	14dfc <__assert_fail@plt+0x3e24>
   14d08:	cmp	r3, #0
   14d0c:	clzeq	ip, r2
   14d10:	clzne	ip, r3
   14d14:	addeq	ip, ip, #32
   14d18:	cmp	r5, #0
   14d1c:	clzeq	r1, r4
   14d20:	addeq	r1, r1, #32
   14d24:	clzne	r1, r5
   14d28:	sub	ip, ip, r1
   14d2c:	sub	lr, ip, #32
   14d30:	lsl	r7, r3, ip
   14d34:	rsb	r8, ip, #32
   14d38:	orr	r7, r7, r2, lsl lr
   14d3c:	orr	r7, r7, r2, lsr r8
   14d40:	lsl	r6, r2, ip
   14d44:	cmp	r5, r7
   14d48:	cmpeq	r4, r6
   14d4c:	movcc	r0, #0
   14d50:	movcc	r1, #0
   14d54:	bcc	14d70 <__assert_fail@plt+0x3d98>
   14d58:	mov	r3, #1
   14d5c:	subs	r4, r4, r6
   14d60:	lsl	r1, r3, lr
   14d64:	lsl	r0, r3, ip
   14d68:	orr	r1, r1, r3, lsr r8
   14d6c:	sbc	r5, r5, r7
   14d70:	cmp	ip, #0
   14d74:	beq	14dfc <__assert_fail@plt+0x3e24>
   14d78:	lsrs	r3, r7, #1
   14d7c:	rrx	r2, r6
   14d80:	mov	r6, ip
   14d84:	b	14da8 <__assert_fail@plt+0x3dd0>
   14d88:	subs	r4, r4, r2
   14d8c:	sbc	r5, r5, r3
   14d90:	adds	r4, r4, r4
   14d94:	adc	r5, r5, r5
   14d98:	adds	r4, r4, #1
   14d9c:	adc	r5, r5, #0
   14da0:	subs	r6, r6, #1
   14da4:	beq	14dc4 <__assert_fail@plt+0x3dec>
   14da8:	cmp	r5, r3
   14dac:	cmpeq	r4, r2
   14db0:	bcs	14d88 <__assert_fail@plt+0x3db0>
   14db4:	adds	r4, r4, r4
   14db8:	adc	r5, r5, r5
   14dbc:	subs	r6, r6, #1
   14dc0:	bne	14da8 <__assert_fail@plt+0x3dd0>
   14dc4:	lsr	r6, r4, ip
   14dc8:	lsr	r7, r5, ip
   14dcc:	orr	r6, r6, r5, lsl r8
   14dd0:	adds	r2, r0, r4
   14dd4:	orr	r6, r6, r5, lsr lr
   14dd8:	adc	r3, r1, r5
   14ddc:	lsl	r1, r7, ip
   14de0:	orr	r1, r1, r6, lsl lr
   14de4:	lsl	r0, r6, ip
   14de8:	orr	r1, r1, r6, lsr r8
   14dec:	subs	r0, r2, r0
   14df0:	mov	r4, r6
   14df4:	mov	r5, r7
   14df8:	sbc	r1, r3, r1
   14dfc:	cmp	r9, #0
   14e00:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   14e04:	strd	r4, [r9]
   14e08:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14e0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14e10:	mov	r7, r0
   14e14:	ldr	r6, [pc, #72]	; 14e64 <__assert_fail@plt+0x3e8c>
   14e18:	ldr	r5, [pc, #72]	; 14e68 <__assert_fail@plt+0x3e90>
   14e1c:	add	r6, pc, r6
   14e20:	add	r5, pc, r5
   14e24:	sub	r6, r6, r5
   14e28:	mov	r8, r1
   14e2c:	mov	r9, r2
   14e30:	bl	10d18 <calloc@plt-0x20>
   14e34:	asrs	r6, r6, #2
   14e38:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e3c:	mov	r4, #0
   14e40:	add	r4, r4, #1
   14e44:	ldr	r3, [r5], #4
   14e48:	mov	r2, r9
   14e4c:	mov	r1, r8
   14e50:	mov	r0, r7
   14e54:	blx	r3
   14e58:	cmp	r6, r4
   14e5c:	bne	14e40 <__assert_fail@plt+0x3e68>
   14e60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e64:	andeq	r1, r1, ip, ror #1
   14e68:	andeq	r1, r1, r4, ror #1
   14e6c:	bx	lr
   14e70:	ldr	r3, [pc, #12]	; 14e84 <__assert_fail@plt+0x3eac>
   14e74:	mov	r1, #0
   14e78:	add	r3, pc, r3
   14e7c:	ldr	r2, [r3]
   14e80:	b	10ee8 <__cxa_atexit@plt>
   14e84:	andeq	r1, r1, r8, ror r2
   14e88:	mov	r2, r1
   14e8c:	mov	r1, r0
   14e90:	mov	r0, #3
   14e94:	b	10fa8 <__xstat64@plt>

Disassembly of section .fini:

00014e98 <.fini>:
   14e98:	push	{r3, lr}
   14e9c:	pop	{r3, pc}
