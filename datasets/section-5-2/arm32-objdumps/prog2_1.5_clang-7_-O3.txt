
../repos/prog2/1.5:     file format elf32-littlearm


Disassembly of section .init:

000106a8 <.init>:
   106a8:	push	{r3, lr}
   106ac:	bl	10770 <_start@@Base+0x3c>
   106b0:	pop	{r3, pc}

Disassembly of section .plt:

000106b4 <strcmp@plt-0x14>:
   106b4:	push	{lr}		; (str lr, [sp, #-4]!)
   106b8:	ldr	lr, [pc, #4]	; 106c4 <strcmp@plt-0x4>
   106bc:	add	lr, pc, lr
   106c0:	ldr	pc, [lr, #8]!
   106c4:	andeq	r0, r1, ip, lsr r9

000106c8 <strcmp@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2364]!	; 0x93c

000106d4 <fopen@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2356]!	; 0x934

000106e0 <__libc_start_main@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #16, 20	; 0x10000
   106e8:	ldr	pc, [ip, #2348]!	; 0x92c

000106ec <__gmon_start__@plt>:
   106ec:	add	ip, pc, #0, 12
   106f0:	add	ip, ip, #16, 20	; 0x10000
   106f4:	ldr	pc, [ip, #2340]!	; 0x924

000106f8 <strlen@plt>:
   106f8:	add	ip, pc, #0, 12
   106fc:	add	ip, ip, #16, 20	; 0x10000
   10700:	ldr	pc, [ip, #2332]!	; 0x91c

00010704 <fgetc@plt>:
   10704:	add	ip, pc, #0, 12
   10708:	add	ip, ip, #16, 20	; 0x10000
   1070c:	ldr	pc, [ip, #2324]!	; 0x914

00010710 <fgetc_unlocked@plt>:
   10710:	add	ip, pc, #0, 12
   10714:	add	ip, ip, #16, 20	; 0x10000
   10718:	ldr	pc, [ip, #2316]!	; 0x90c

0001071c <fseek@plt>:
   1071c:	add	ip, pc, #0, 12
   10720:	add	ip, ip, #16, 20	; 0x10000
   10724:	ldr	pc, [ip, #2308]!	; 0x904

00010728 <abort@plt>:
   10728:	add	ip, pc, #0, 12
   1072c:	add	ip, ip, #16, 20	; 0x10000
   10730:	ldr	pc, [ip, #2300]!	; 0x8fc

Disassembly of section .text:

00010734 <_start@@Base>:
   10734:	mov	fp, #0
   10738:	mov	lr, #0
   1073c:	pop	{r1}		; (ldr r1, [sp], #4)
   10740:	mov	r2, sp
   10744:	push	{r2}		; (str r2, [sp, #-4]!)
   10748:	push	{r0}		; (str r0, [sp, #-4]!)
   1074c:	ldr	ip, [pc, #16]	; 10764 <_start@@Base+0x30>
   10750:	push	{ip}		; (str ip, [sp, #-4]!)
   10754:	ldr	r0, [pc, #12]	; 10768 <_start@@Base+0x34>
   10758:	ldr	r3, [pc, #12]	; 1076c <_start@@Base+0x38>
   1075c:	bl	106e0 <__libc_start_main@plt>
   10760:	bl	10728 <abort@plt>
   10764:	andeq	r0, r1, ip, asr sl
   10768:	andeq	r0, r1, r4, lsr #16
   1076c:	strdeq	r0, [r1], -ip
   10770:	ldr	r3, [pc, #20]	; 1078c <_start@@Base+0x58>
   10774:	ldr	r2, [pc, #20]	; 10790 <_start@@Base+0x5c>
   10778:	add	r3, pc, r3
   1077c:	ldr	r2, [r3, r2]
   10780:	cmp	r2, #0
   10784:	bxeq	lr
   10788:	b	106ec <__gmon_start__@plt>
   1078c:	andeq	r0, r1, r0, lsl #17
   10790:	andeq	r0, r0, r0, lsr r0
   10794:	ldr	r0, [pc, #24]	; 107b4 <_start@@Base+0x80>
   10798:	ldr	r3, [pc, #24]	; 107b8 <_start@@Base+0x84>
   1079c:	cmp	r3, r0
   107a0:	bxeq	lr
   107a4:	ldr	r3, [pc, #16]	; 107bc <_start@@Base+0x88>
   107a8:	cmp	r3, #0
   107ac:	bxeq	lr
   107b0:	bx	r3
   107b4:	andeq	r1, r2, ip, lsr r0
   107b8:	andeq	r1, r2, ip, lsr r0
   107bc:	andeq	r0, r0, r0
   107c0:	ldr	r0, [pc, #36]	; 107ec <_start@@Base+0xb8>
   107c4:	ldr	r1, [pc, #36]	; 107f0 <_start@@Base+0xbc>
   107c8:	sub	r1, r1, r0
   107cc:	asr	r1, r1, #2
   107d0:	add	r1, r1, r1, lsr #31
   107d4:	asrs	r1, r1, #1
   107d8:	bxeq	lr
   107dc:	ldr	r3, [pc, #16]	; 107f4 <_start@@Base+0xc0>
   107e0:	cmp	r3, #0
   107e4:	bxeq	lr
   107e8:	bx	r3
   107ec:	andeq	r1, r2, ip, lsr r0
   107f0:	andeq	r1, r2, ip, lsr r0
   107f4:	andeq	r0, r0, r0
   107f8:	push	{r4, lr}
   107fc:	ldr	r4, [pc, #24]	; 1081c <_start@@Base+0xe8>
   10800:	ldrb	r3, [r4]
   10804:	cmp	r3, #0
   10808:	popne	{r4, pc}
   1080c:	bl	10794 <_start@@Base+0x60>
   10810:	mov	r3, #1
   10814:	strb	r3, [r4]
   10818:	pop	{r4, pc}
   1081c:	andeq	r1, r2, ip, lsr r0
   10820:	b	107c0 <_start@@Base+0x8c>

00010824 <main@@Base>:
   10824:	push	{fp, lr}
   10828:	mov	fp, sp
   1082c:	movw	r0, #2668	; 0xa6c
   10830:	movw	r1, #2686	; 0xa7e
   10834:	movt	r0, #1
   10838:	movt	r1, #1
   1083c:	bl	106d4 <fopen@plt>
   10840:	mov	r4, r0
   10844:	mov	r5, #0
   10848:	b	10854 <main@@Base+0x30>
   1084c:	mov	r2, #1
   10850:	bl	1071c <fseek@plt>
   10854:	mov	r0, r4
   10858:	bl	10710 <fgetc_unlocked@plt>
   1085c:	uxtb	r0, r0
   10860:	cmp	r0, #111	; 0x6f
   10864:	ble	108bc <main@@Base+0x98>
   10868:	cmp	r0, #112	; 0x70
   1086c:	beq	108e8 <main@@Base+0xc4>
   10870:	cmp	r0, #115	; 0x73
   10874:	bne	10854 <main@@Base+0x30>
   10878:	mov	r0, r4
   1087c:	mvn	r1, #0
   10880:	mov	r2, #1
   10884:	bl	1071c <fseek@plt>
   10888:	mov	r0, r4
   1088c:	bl	10710 <fgetc_unlocked@plt>
   10890:	mov	r0, r4
   10894:	bl	10710 <fgetc_unlocked@plt>
   10898:	mov	r0, r4
   1089c:	bl	10710 <fgetc_unlocked@plt>
   108a0:	mov	r0, r4
   108a4:	bl	10710 <fgetc_unlocked@plt>
   108a8:	mov	r0, r4
   108ac:	bl	10710 <fgetc_unlocked@plt>
   108b0:	mov	r0, r4
   108b4:	mvn	r1, #3
   108b8:	b	1084c <main@@Base+0x28>
   108bc:	cmp	r0, #42	; 0x2a
   108c0:	beq	10934 <main@@Base+0x110>
   108c4:	cmp	r0, #47	; 0x2f
   108c8:	bne	10854 <main@@Base+0x30>
   108cc:	mov	r0, r4
   108d0:	bl	10710 <fgetc_unlocked@plt>
   108d4:	cmp	r5, #0
   108d8:	cmpeq	r0, #42	; 0x2a
   108dc:	bne	1094c <main@@Base+0x128>
   108e0:	mov	r5, #1
   108e4:	b	10854 <main@@Base+0x30>
   108e8:	mov	r0, r4
   108ec:	mvn	r1, #0
   108f0:	mov	r2, #1
   108f4:	bl	1071c <fseek@plt>
   108f8:	mov	r0, r4
   108fc:	bl	10710 <fgetc_unlocked@plt>
   10900:	mov	r0, r4
   10904:	bl	10710 <fgetc_unlocked@plt>
   10908:	mov	r0, r4
   1090c:	bl	10710 <fgetc_unlocked@plt>
   10910:	mov	r0, r4
   10914:	bl	10710 <fgetc_unlocked@plt>
   10918:	mov	r0, r4
   1091c:	bl	10710 <fgetc_unlocked@plt>
   10920:	mov	r0, r4
   10924:	bl	10710 <fgetc_unlocked@plt>
   10928:	mov	r0, r4
   1092c:	mvn	r1, #4
   10930:	b	1084c <main@@Base+0x28>
   10934:	mov	r0, r4
   10938:	bl	10710 <fgetc_unlocked@plt>
   1093c:	cmp	r5, #0
   10940:	beq	1094c <main@@Base+0x128>
   10944:	cmp	r0, #47	; 0x2f
   10948:	beq	10844 <main@@Base+0x20>
   1094c:	mov	r0, r4
   10950:	mvn	r1, #0
   10954:	b	1084c <main@@Base+0x28>

00010958 <IsIOFunction@@Base>:
   10958:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1095c:	add	fp, sp, #24
   10960:	sub	sp, sp, #8
   10964:	mov	r8, r0
   10968:	mov	r5, r1
   1096c:	mov	r0, r1
   10970:	mvn	r1, #0
   10974:	mov	r2, #1
   10978:	bl	1071c <fseek@plt>
   1097c:	mov	r0, r8
   10980:	bl	106f8 <strlen@plt>
   10984:	mov	r9, #0
   10988:	mov	r7, r0
   1098c:	cmp	r0, #1
   10990:	strb	r9, [sp, #6]
   10994:	strh	r9, [sp, #4]
   10998:	str	r9, [sp]
   1099c:	blt	109c8 <IsIOFunction@@Base+0x70>
   109a0:	mov	r4, sp
   109a4:	mov	r6, r7
   109a8:	mov	r0, r5
   109ac:	bl	10704 <fgetc@plt>
   109b0:	strb	r0, [r4], #1
   109b4:	subs	r6, r6, #1
   109b8:	bne	109a8 <IsIOFunction@@Base+0x50>
   109bc:	mov	r0, sp
   109c0:	add	r0, r0, r7
   109c4:	b	109cc <IsIOFunction@@Base+0x74>
   109c8:	mov	r0, sp
   109cc:	strb	r9, [r0]
   109d0:	rsb	r1, r7, #1
   109d4:	mov	r0, r5
   109d8:	mov	r2, #1
   109dc:	bl	1071c <fseek@plt>
   109e0:	mov	r1, sp
   109e4:	mov	r0, r8
   109e8:	bl	106c8 <strcmp@plt>
   109ec:	clz	r0, r0
   109f0:	lsr	r0, r0, #5
   109f4:	sub	sp, fp, #24
   109f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000109fc <__libc_csu_init@@Base>:
   109fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a00:	mov	r7, r0
   10a04:	ldr	r6, [pc, #72]	; 10a54 <__libc_csu_init@@Base+0x58>
   10a08:	ldr	r5, [pc, #72]	; 10a58 <__libc_csu_init@@Base+0x5c>
   10a0c:	add	r6, pc, r6
   10a10:	add	r5, pc, r5
   10a14:	sub	r6, r6, r5
   10a18:	mov	r8, r1
   10a1c:	mov	r9, r2
   10a20:	bl	106a8 <strcmp@plt-0x20>
   10a24:	asrs	r6, r6, #2
   10a28:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a2c:	mov	r4, #0
   10a30:	add	r4, r4, #1
   10a34:	ldr	r3, [r5], #4
   10a38:	mov	r2, r9
   10a3c:	mov	r1, r8
   10a40:	mov	r0, r7
   10a44:	blx	r3
   10a48:	cmp	r6, r4
   10a4c:	bne	10a30 <__libc_csu_init@@Base+0x34>
   10a50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a54:	strdeq	r0, [r1], -r8
   10a58:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>

00010a5c <__libc_csu_fini@@Base>:
   10a5c:	bx	lr

Disassembly of section .fini:

00010a60 <.fini>:
   10a60:	push	{r3, lr}
   10a64:	pop	{r3, pc}
