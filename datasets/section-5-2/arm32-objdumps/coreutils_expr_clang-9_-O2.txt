
../repos/coreutils/src/expr:     file format elf32-littlearm


Disassembly of section .init:

00011114 <.init>:
   11114:	push	{r3, lr}
   11118:	bl	1147c <__assert_fail@plt+0x48>
   1111c:	pop	{r3, pc}

Disassembly of section .plt:

00011120 <pthread_mutex_unlock@plt-0x14>:
   11120:	push	{lr}		; (str lr, [sp, #-4]!)
   11124:	ldr	lr, [pc, #4]	; 11130 <pthread_mutex_unlock@plt-0x4>
   11128:	add	lr, pc, lr
   1112c:	ldr	pc, [lr, #8]!
   11130:	ldrdeq	r9, [r3], -r0

00011134 <pthread_mutex_unlock@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #233472	; 0x39000
   1113c:	ldr	pc, [ip, #3792]!	; 0xed0

00011140 <calloc@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #233472	; 0x39000
   11148:	ldr	pc, [ip, #3784]!	; 0xec8

0001114c <fputs_unlocked@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #233472	; 0x39000
   11154:	ldr	pc, [ip, #3776]!	; 0xec0

00011158 <wctype@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #233472	; 0x39000
   11160:	ldr	pc, [ip, #3768]!	; 0xeb8

00011164 <wcrtomb@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #233472	; 0x39000
   1116c:	ldr	pc, [ip, #3760]!	; 0xeb0

00011170 <iswctype@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #233472	; 0x39000
   11178:	ldr	pc, [ip, #3752]!	; 0xea8

0001117c <strcmp@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #233472	; 0x39000
   11184:	ldr	pc, [ip, #3744]!	; 0xea0

00011188 <strcspn@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #233472	; 0x39000
   11190:	ldr	pc, [ip, #3736]!	; 0xe98

00011194 <pthread_mutex_destroy@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #233472	; 0x39000
   1119c:	ldr	pc, [ip, #3728]!	; 0xe90

000111a0 <fflush@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #233472	; 0x39000
   111a8:	ldr	pc, [ip, #3720]!	; 0xe88

000111ac <wcwidth@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #233472	; 0x39000
   111b4:	ldr	pc, [ip, #3712]!	; 0xe80

000111b8 <memmove@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #233472	; 0x39000
   111c0:	ldr	pc, [ip, #3704]!	; 0xe78

000111c4 <free@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #233472	; 0x39000
   111cc:	ldr	pc, [ip, #3696]!	; 0xe70

000111d0 <pthread_mutex_lock@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #233472	; 0x39000
   111d8:	ldr	pc, [ip, #3688]!	; 0xe68

000111dc <_exit@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #233472	; 0x39000
   111e4:	ldr	pc, [ip, #3680]!	; 0xe60

000111e8 <memcpy@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #233472	; 0x39000
   111f0:	ldr	pc, [ip, #3672]!	; 0xe58

000111f4 <pthread_mutex_init@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #233472	; 0x39000
   111fc:	ldr	pc, [ip, #3664]!	; 0xe50

00011200 <towlower@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #233472	; 0x39000
   11208:	ldr	pc, [ip, #3656]!	; 0xe48

0001120c <mbsinit@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #233472	; 0x39000
   11214:	ldr	pc, [ip, #3648]!	; 0xe40

00011218 <dcgettext@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #233472	; 0x39000
   11220:	ldr	pc, [ip, #3640]!	; 0xe38

00011224 <realloc@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #233472	; 0x39000
   1122c:	ldr	pc, [ip, #3632]!	; 0xe30

00011230 <textdomain@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #233472	; 0x39000
   11238:	ldr	pc, [ip, #3624]!	; 0xe28

0001123c <iswcntrl@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #233472	; 0x39000
   11244:	ldr	pc, [ip, #3616]!	; 0xe20

00011248 <iswprint@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #233472	; 0x39000
   11250:	ldr	pc, [ip, #3608]!	; 0xe18

00011254 <fwrite@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #233472	; 0x39000
   1125c:	ldr	pc, [ip, #3600]!	; 0xe10

00011260 <lseek64@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #233472	; 0x39000
   11268:	ldr	pc, [ip, #3592]!	; 0xe08

0001126c <__ctype_get_mb_cur_max@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #233472	; 0x39000
   11274:	ldr	pc, [ip, #3584]!	; 0xe00

00011278 <__fpending@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #233472	; 0x39000
   11280:	ldr	pc, [ip, #3576]!	; 0xdf8

00011284 <mbrtowc@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #233472	; 0x39000
   1128c:	ldr	pc, [ip, #3568]!	; 0xdf0

00011290 <error@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #233472	; 0x39000
   11298:	ldr	pc, [ip, #3560]!	; 0xde8

0001129c <strcoll@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #233472	; 0x39000
   112a4:	ldr	pc, [ip, #3552]!	; 0xde0

000112a8 <puts@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #233472	; 0x39000
   112b0:	ldr	pc, [ip, #3544]!	; 0xdd8

000112b4 <malloc@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #233472	; 0x39000
   112bc:	ldr	pc, [ip, #3536]!	; 0xdd0

000112c0 <__libc_start_main@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #233472	; 0x39000
   112c8:	ldr	pc, [ip, #3528]!	; 0xdc8

000112cc <__freading@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #233472	; 0x39000
   112d4:	ldr	pc, [ip, #3520]!	; 0xdc0

000112d8 <__ctype_tolower_loc@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #233472	; 0x39000
   112e0:	ldr	pc, [ip, #3512]!	; 0xdb8

000112e4 <__ctype_toupper_loc@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #233472	; 0x39000
   112ec:	ldr	pc, [ip, #3504]!	; 0xdb0

000112f0 <__gmon_start__@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #233472	; 0x39000
   112f8:	ldr	pc, [ip, #3496]!	; 0xda8

000112fc <getopt_long@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #233472	; 0x39000
   11304:	ldr	pc, [ip, #3488]!	; 0xda0

00011308 <__ctype_b_loc@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #233472	; 0x39000
   11310:	ldr	pc, [ip, #3480]!	; 0xd98

00011314 <exit@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #233472	; 0x39000
   1131c:	ldr	pc, [ip, #3472]!	; 0xd90

00011320 <bcmp@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #233472	; 0x39000
   11328:	ldr	pc, [ip, #3464]!	; 0xd88

0001132c <strlen@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #233472	; 0x39000
   11334:	ldr	pc, [ip, #3456]!	; 0xd80

00011338 <strchr@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #233472	; 0x39000
   11340:	ldr	pc, [ip, #3448]!	; 0xd78

00011344 <__errno_location@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #233472	; 0x39000
   1134c:	ldr	pc, [ip, #3440]!	; 0xd70

00011350 <iswalnum@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #233472	; 0x39000
   11358:	ldr	pc, [ip, #3432]!	; 0xd68

0001135c <__cxa_atexit@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #233472	; 0x39000
   11364:	ldr	pc, [ip, #3424]!	; 0xd60

00011368 <memset@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #233472	; 0x39000
   11370:	ldr	pc, [ip, #3416]!	; 0xd58

00011374 <btowc@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #233472	; 0x39000
   1137c:	ldr	pc, [ip, #3408]!	; 0xd50

00011380 <__printf_chk@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #233472	; 0x39000
   11388:	ldr	pc, [ip, #3400]!	; 0xd48

0001138c <fileno@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #233472	; 0x39000
   11394:	ldr	pc, [ip, #3392]!	; 0xd40

00011398 <__fprintf_chk@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #233472	; 0x39000
   113a0:	ldr	pc, [ip, #3384]!	; 0xd38

000113a4 <memchr@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #233472	; 0x39000
   113ac:	ldr	pc, [ip, #3376]!	; 0xd30

000113b0 <fclose@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #233472	; 0x39000
   113b8:	ldr	pc, [ip, #3368]!	; 0xd28

000113bc <fseeko64@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #233472	; 0x39000
   113c4:	ldr	pc, [ip, #3360]!	; 0xd20

000113c8 <__overflow@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #233472	; 0x39000
   113d0:	ldr	pc, [ip, #3352]!	; 0xd18

000113d4 <setlocale@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #233472	; 0x39000
   113dc:	ldr	pc, [ip, #3344]!	; 0xd10

000113e0 <strrchr@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #233472	; 0x39000
   113e8:	ldr	pc, [ip, #3336]!	; 0xd08

000113ec <nl_langinfo@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #233472	; 0x39000
   113f4:	ldr	pc, [ip, #3328]!	; 0xd00

000113f8 <bindtextdomain@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #233472	; 0x39000
   11400:	ldr	pc, [ip, #3320]!	; 0xcf8

00011404 <towupper@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #233472	; 0x39000
   1140c:	ldr	pc, [ip, #3312]!	; 0xcf0

00011410 <strncmp@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #233472	; 0x39000
   11418:	ldr	pc, [ip, #3304]!	; 0xce8

0001141c <abort@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #233472	; 0x39000
   11424:	ldr	pc, [ip, #3296]!	; 0xce0

00011428 <__mempcpy_chk@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #233472	; 0x39000
   11430:	ldr	pc, [ip, #3288]!	; 0xcd8

00011434 <__assert_fail@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #233472	; 0x39000
   1143c:	ldr	pc, [ip, #3280]!	; 0xcd0

Disassembly of section .text:

00011440 <.text>:
   11440:	mov	fp, #0
   11444:	mov	lr, #0
   11448:	pop	{r1}		; (ldr r1, [sp], #4)
   1144c:	mov	r2, sp
   11450:	push	{r2}		; (str r2, [sp, #-4]!)
   11454:	push	{r0}		; (str r0, [sp, #-4]!)
   11458:	ldr	ip, [pc, #16]	; 11470 <__assert_fail@plt+0x3c>
   1145c:	push	{ip}		; (str ip, [sp, #-4]!)
   11460:	ldr	r0, [pc, #12]	; 11474 <__assert_fail@plt+0x40>
   11464:	ldr	r3, [pc, #12]	; 11478 <__assert_fail@plt+0x44>
   11468:	bl	112c0 <__libc_start_main@plt>
   1146c:	bl	1141c <abort@plt>
   11470:	andeq	r8, r3, r0, asr r6
   11474:	andeq	r1, r1, ip, ror #16
   11478:	strdeq	r8, [r3], -r0
   1147c:	ldr	r3, [pc, #20]	; 11498 <__assert_fail@plt+0x64>
   11480:	ldr	r2, [pc, #20]	; 1149c <__assert_fail@plt+0x68>
   11484:	add	r3, pc, r3
   11488:	ldr	r2, [r3, r2]
   1148c:	cmp	r2, #0
   11490:	bxeq	lr
   11494:	b	112f0 <__gmon_start__@plt>
   11498:	andeq	r9, r3, r4, ror fp
   1149c:	andeq	r0, r0, r0, lsl r1
   114a0:	ldr	r0, [pc, #24]	; 114c0 <__assert_fail@plt+0x8c>
   114a4:	ldr	r3, [pc, #24]	; 114c4 <__assert_fail@plt+0x90>
   114a8:	cmp	r3, r0
   114ac:	bxeq	lr
   114b0:	ldr	r3, [pc, #16]	; 114c8 <__assert_fail@plt+0x94>
   114b4:	cmp	r3, #0
   114b8:	bxeq	lr
   114bc:	bx	r3
   114c0:	andeq	fp, r4, r0, ror r1
   114c4:	andeq	fp, r4, r0, ror r1
   114c8:	andeq	r0, r0, r0
   114cc:	ldr	r0, [pc, #36]	; 114f8 <__assert_fail@plt+0xc4>
   114d0:	ldr	r1, [pc, #36]	; 114fc <__assert_fail@plt+0xc8>
   114d4:	sub	r1, r1, r0
   114d8:	asr	r1, r1, #2
   114dc:	add	r1, r1, r1, lsr #31
   114e0:	asrs	r1, r1, #1
   114e4:	bxeq	lr
   114e8:	ldr	r3, [pc, #16]	; 11500 <__assert_fail@plt+0xcc>
   114ec:	cmp	r3, #0
   114f0:	bxeq	lr
   114f4:	bx	r3
   114f8:	andeq	fp, r4, r0, ror r1
   114fc:	andeq	fp, r4, r0, ror r1
   11500:	andeq	r0, r0, r0
   11504:	push	{r4, lr}
   11508:	ldr	r4, [pc, #24]	; 11528 <__assert_fail@plt+0xf4>
   1150c:	ldrb	r3, [r4]
   11510:	cmp	r3, #0
   11514:	popne	{r4, pc}
   11518:	bl	114a0 <__assert_fail@plt+0x6c>
   1151c:	mov	r3, #1
   11520:	strb	r3, [r4]
   11524:	pop	{r4, pc}
   11528:	andeq	fp, r4, ip, lsl #3
   1152c:	b	114cc <__assert_fail@plt+0x98>
   11530:	push	{fp, lr}
   11534:	mov	fp, sp
   11538:	sub	sp, sp, #56	; 0x38
   1153c:	mov	r4, r0
   11540:	cmp	r0, #0
   11544:	bne	11828 <__assert_fail@plt+0x3f4>
   11548:	movw	r1, #34467	; 0x86a3
   1154c:	mov	r0, #0
   11550:	mov	r2, #5
   11554:	movt	r1, #3
   11558:	bl	11218 <dcgettext@plt>
   1155c:	mov	r1, r0
   11560:	movw	r0, #45468	; 0xb19c
   11564:	movt	r0, #4
   11568:	ldr	r2, [r0]
   1156c:	mov	r0, #1
   11570:	mov	r3, r2
   11574:	bl	11380 <__printf_chk@plt>
   11578:	movw	r7, #45444	; 0xb184
   1157c:	movt	r7, #4
   11580:	ldr	r0, [r7]
   11584:	ldr	r1, [r0, #20]
   11588:	ldr	r2, [r0, #24]
   1158c:	cmp	r1, r2
   11590:	bcs	1181c <__assert_fail@plt+0x3e8>
   11594:	add	r2, r1, #1
   11598:	str	r2, [r0, #20]
   1159c:	mov	r0, #10
   115a0:	strb	r0, [r1]
   115a4:	movw	r1, #34506	; 0x86ca
   115a8:	mov	r0, #0
   115ac:	mov	r2, #5
   115b0:	movt	r1, #3
   115b4:	bl	11218 <dcgettext@plt>
   115b8:	ldr	r1, [r7]
   115bc:	bl	1114c <fputs_unlocked@plt>
   115c0:	movw	r1, #34551	; 0x86f7
   115c4:	mov	r0, #0
   115c8:	mov	r2, #5
   115cc:	movt	r1, #3
   115d0:	bl	11218 <dcgettext@plt>
   115d4:	ldr	r1, [r7]
   115d8:	bl	1114c <fputs_unlocked@plt>
   115dc:	movw	r1, #34605	; 0x872d
   115e0:	mov	r0, #0
   115e4:	mov	r2, #5
   115e8:	movt	r1, #3
   115ec:	bl	11218 <dcgettext@plt>
   115f0:	ldr	r1, [r7]
   115f4:	bl	1114c <fputs_unlocked@plt>
   115f8:	movw	r1, #34879	; 0x883f
   115fc:	mov	r0, #0
   11600:	mov	r2, #5
   11604:	movt	r1, #3
   11608:	bl	11218 <dcgettext@plt>
   1160c:	ldr	r1, [r7]
   11610:	bl	1114c <fputs_unlocked@plt>
   11614:	movw	r1, #35169	; 0x8961
   11618:	mov	r0, #0
   1161c:	mov	r2, #5
   11620:	movt	r1, #3
   11624:	bl	11218 <dcgettext@plt>
   11628:	ldr	r1, [r7]
   1162c:	bl	1114c <fputs_unlocked@plt>
   11630:	movw	r1, #35282	; 0x89d2
   11634:	mov	r0, #0
   11638:	mov	r2, #5
   1163c:	movt	r1, #3
   11640:	bl	11218 <dcgettext@plt>
   11644:	ldr	r1, [r7]
   11648:	bl	1114c <fputs_unlocked@plt>
   1164c:	movw	r1, #35469	; 0x8a8d
   11650:	mov	r0, #0
   11654:	mov	r2, #5
   11658:	movt	r1, #3
   1165c:	bl	11218 <dcgettext@plt>
   11660:	ldr	r1, [r7]
   11664:	bl	1114c <fputs_unlocked@plt>
   11668:	movw	r1, #35779	; 0x8bc3
   1166c:	mov	r0, #0
   11670:	mov	r2, #5
   11674:	movt	r1, #3
   11678:	bl	11218 <dcgettext@plt>
   1167c:	ldr	r1, [r7]
   11680:	bl	1114c <fputs_unlocked@plt>
   11684:	movw	r1, #35980	; 0x8c8c
   11688:	mov	r0, #0
   1168c:	mov	r2, #5
   11690:	movt	r1, #3
   11694:	bl	11218 <dcgettext@plt>
   11698:	ldr	r1, [r7]
   1169c:	bl	1114c <fputs_unlocked@plt>
   116a0:	movw	r1, #36272	; 0x8db0
   116a4:	mov	r0, #0
   116a8:	mov	r2, #5
   116ac:	movt	r1, #3
   116b0:	bl	11218 <dcgettext@plt>
   116b4:	ldr	r1, [r7]
   116b8:	bl	1114c <fputs_unlocked@plt>
   116bc:	movw	r0, #37176	; 0x9138
   116c0:	mov	r2, #48	; 0x30
   116c4:	mov	r6, sp
   116c8:	movw	r5, #36428	; 0x8e4c
   116cc:	movt	r0, #3
   116d0:	movt	r5, #3
   116d4:	add	r1, r0, #32
   116d8:	add	r3, r0, #16
   116dc:	vld1.64	{d18-d19}, [r0], r2
   116e0:	vld1.64	{d16-d17}, [r1]
   116e4:	vld1.64	{d20-d21}, [r3]
   116e8:	vldr	d22, [r0]
   116ec:	add	r1, r6, #32
   116f0:	add	r0, r6, #16
   116f4:	vst1.64	{d16-d17}, [r1]
   116f8:	movw	r1, #36581	; 0x8ee5
   116fc:	vst1.64	{d20-d21}, [r0]
   11700:	mov	r0, r6
   11704:	movt	r1, #3
   11708:	vst1.64	{d18-d19}, [r0], r2
   1170c:	vstr	d22, [r0]
   11710:	mov	r0, r5
   11714:	bl	1117c <strcmp@plt>
   11718:	cmp	r0, #0
   1171c:	ldrne	r1, [r6, #8]!
   11720:	cmpne	r1, #0
   11724:	bne	11710 <__assert_fail@plt+0x2dc>
   11728:	movw	r1, #36676	; 0x8f44
   1172c:	ldr	r6, [r6, #4]
   11730:	mov	r0, #0
   11734:	mov	r2, #5
   11738:	movt	r1, #3
   1173c:	bl	11218 <dcgettext@plt>
   11740:	movw	r2, #36457	; 0x8e69
   11744:	movw	r3, #36699	; 0x8f5b
   11748:	mov	r1, r0
   1174c:	mov	r0, #1
   11750:	movt	r2, #3
   11754:	movt	r3, #3
   11758:	bl	11380 <__printf_chk@plt>
   1175c:	cmp	r6, #0
   11760:	mov	r0, #5
   11764:	mov	r1, #0
   11768:	moveq	r6, r5
   1176c:	bl	113d4 <setlocale@plt>
   11770:	cmp	r0, #0
   11774:	beq	117ac <__assert_fail@plt+0x378>
   11778:	movw	r1, #36739	; 0x8f83
   1177c:	mov	r2, #3
   11780:	movt	r1, #3
   11784:	bl	11410 <strncmp@plt>
   11788:	cmp	r0, #0
   1178c:	beq	117ac <__assert_fail@plt+0x378>
   11790:	movw	r1, #36743	; 0x8f87
   11794:	mov	r0, #0
   11798:	mov	r2, #5
   1179c:	movt	r1, #3
   117a0:	bl	11218 <dcgettext@plt>
   117a4:	ldr	r1, [r7]
   117a8:	bl	1114c <fputs_unlocked@plt>
   117ac:	movw	r1, #36814	; 0x8fce
   117b0:	mov	r0, #0
   117b4:	mov	r2, #5
   117b8:	movt	r1, #3
   117bc:	bl	11218 <dcgettext@plt>
   117c0:	movw	r2, #36699	; 0x8f5b
   117c4:	mov	r1, r0
   117c8:	mov	r0, #1
   117cc:	mov	r3, r5
   117d0:	movt	r2, #3
   117d4:	bl	11380 <__printf_chk@plt>
   117d8:	movw	r1, #36841	; 0x8fe9
   117dc:	mov	r0, #0
   117e0:	mov	r2, #5
   117e4:	movt	r1, #3
   117e8:	bl	11218 <dcgettext@plt>
   117ec:	mov	r1, r0
   117f0:	movw	r0, #36609	; 0x8f01
   117f4:	movw	r3, #36891	; 0x901b
   117f8:	cmp	r6, r5
   117fc:	mov	r2, r6
   11800:	movt	r0, #3
   11804:	movt	r3, #3
   11808:	moveq	r3, r0
   1180c:	mov	r0, #1
   11810:	bl	11380 <__printf_chk@plt>
   11814:	mov	r0, r4
   11818:	bl	11314 <exit@plt>
   1181c:	mov	r1, #10
   11820:	bl	113c8 <__overflow@plt>
   11824:	b	115a4 <__assert_fail@plt+0x170>
   11828:	movw	r0, #45440	; 0xb180
   1182c:	movw	r1, #34428	; 0x867c
   11830:	mov	r2, #5
   11834:	movt	r0, #4
   11838:	movt	r1, #3
   1183c:	ldr	r5, [r0]
   11840:	mov	r0, #0
   11844:	bl	11218 <dcgettext@plt>
   11848:	mov	r2, r0
   1184c:	movw	r0, #45468	; 0xb19c
   11850:	mov	r1, #1
   11854:	movt	r0, #4
   11858:	ldr	r3, [r0]
   1185c:	mov	r0, r5
   11860:	bl	11398 <__fprintf_chk@plt>
   11864:	mov	r0, r4
   11868:	bl	11314 <exit@plt>
   1186c:	push	{r4, r5, r6, sl, fp, lr}
   11870:	add	fp, sp, #16
   11874:	sub	sp, sp, #24
   11878:	mov	r5, r0
   1187c:	ldr	r0, [r1]
   11880:	mov	r4, r1
   11884:	bl	23550 <__assert_fail@plt+0x1211c>
   11888:	movw	r1, #36891	; 0x901b
   1188c:	mov	r0, #6
   11890:	movt	r1, #3
   11894:	bl	113d4 <setlocale@plt>
   11898:	movw	r6, #36461	; 0x8e6d
   1189c:	movw	r1, #36433	; 0x8e51
   118a0:	movt	r6, #3
   118a4:	movt	r1, #3
   118a8:	mov	r0, r6
   118ac:	bl	113f8 <bindtextdomain@plt>
   118b0:	mov	r0, r6
   118b4:	bl	11230 <textdomain@plt>
   118b8:	movw	r0, #45344	; 0xb120
   118bc:	mov	r1, #3
   118c0:	movt	r0, #4
   118c4:	str	r1, [r0]
   118c8:	movw	r0, #14336	; 0x3800
   118cc:	movt	r0, #1
   118d0:	bl	38654 <__assert_fail@plt+0x27220>
   118d4:	movw	r2, #36498	; 0x8e92
   118d8:	movw	r3, #36486	; 0x8e86
   118dc:	movw	r0, #36471	; 0x8e77
   118e0:	movw	r1, #36513	; 0x8ea1
   118e4:	movw	r6, #5424	; 0x1530
   118e8:	mov	ip, #0
   118ec:	movt	r2, #3
   118f0:	movt	r3, #3
   118f4:	movt	r0, #3
   118f8:	movt	r6, #1
   118fc:	movt	r1, #3
   11900:	stm	sp, {r0, r6}
   11904:	str	r3, [sp, #8]
   11908:	movw	r3, #36457	; 0x8e69
   1190c:	str	r2, [sp, #12]
   11910:	movw	r2, #36428	; 0x8e4c
   11914:	str	r1, [sp, #16]
   11918:	mov	r0, r5
   1191c:	mov	r1, r4
   11920:	str	ip, [sp, #20]
   11924:	movt	r2, #3
   11928:	movt	r3, #3
   1192c:	bl	23028 <__assert_fail@plt+0x11bf4>
   11930:	cmp	r5, #2
   11934:	bcc	11a74 <__assert_fail@plt+0x640>
   11938:	mov	r6, r4
   1193c:	movw	r1, #36525	; 0x8ead
   11940:	ldr	r0, [r6, #4]!
   11944:	movt	r1, #3
   11948:	bl	1117c <strcmp@plt>
   1194c:	cmp	r0, #0
   11950:	bne	11964 <__assert_fail@plt+0x530>
   11954:	sub	r0, r5, #1
   11958:	mov	r4, r6
   1195c:	cmp	r0, #1
   11960:	bls	11a74 <__assert_fail@plt+0x640>
   11964:	movw	r5, #45456	; 0xb190
   11968:	add	r0, r4, #4
   1196c:	movt	r5, #4
   11970:	str	r0, [r5]
   11974:	mov	r0, #1
   11978:	bl	11ae0 <__assert_fail@plt+0x6ac>
   1197c:	mov	r4, r0
   11980:	ldr	r0, [r5]
   11984:	ldr	r0, [r0]
   11988:	cmp	r0, #0
   1198c:	bne	11aa0 <__assert_fail@plt+0x66c>
   11990:	ldr	r0, [r4]
   11994:	cmp	r0, #1
   11998:	beq	119e4 <__assert_fail@plt+0x5b0>
   1199c:	cmp	r0, #0
   119a0:	bne	11a70 <__assert_fail@plt+0x63c>
   119a4:	movw	r6, #45444	; 0xb184
   119a8:	add	r2, r4, #4
   119ac:	mov	r1, #10
   119b0:	mov	r5, #10
   119b4:	movt	r6, #4
   119b8:	ldr	r0, [r6]
   119bc:	bl	22644 <__assert_fail@plt+0x11210>
   119c0:	ldr	r0, [r6]
   119c4:	ldr	r1, [r0, #20]
   119c8:	ldr	r2, [r0, #24]
   119cc:	cmp	r1, r2
   119d0:	bcs	11a64 <__assert_fail@plt+0x630>
   119d4:	add	r2, r1, #1
   119d8:	str	r2, [r0, #20]
   119dc:	strb	r5, [r1]
   119e0:	b	119ec <__assert_fail@plt+0x5b8>
   119e4:	ldr	r0, [r4, #4]
   119e8:	bl	112a8 <puts@plt>
   119ec:	ldr	r0, [r4]
   119f0:	cmp	r0, #1
   119f4:	beq	11a18 <__assert_fail@plt+0x5e4>
   119f8:	cmp	r0, #0
   119fc:	bne	11a70 <__assert_fail@plt+0x63c>
   11a00:	add	r0, r4, #4
   11a04:	bl	169c8 <__assert_fail@plt+0x5594>
   11a08:	clz	r0, r0
   11a0c:	lsr	r0, r0, #5
   11a10:	sub	sp, fp, #16
   11a14:	pop	{r4, r5, r6, sl, fp, pc}
   11a18:	ldr	r1, [r4, #4]
   11a1c:	mov	r0, #1
   11a20:	ldrb	r2, [r1]
   11a24:	cmp	r2, #0
   11a28:	beq	11a50 <__assert_fail@plt+0x61c>
   11a2c:	cmp	r2, #45	; 0x2d
   11a30:	addeq	r1, r1, #1
   11a34:	ldrb	r2, [r1], #1
   11a38:	uxtb	r2, r2
   11a3c:	cmp	r2, #48	; 0x30
   11a40:	bne	11a58 <__assert_fail@plt+0x624>
   11a44:	ldrb	r2, [r1], #1
   11a48:	cmp	r2, #0
   11a4c:	bne	11a38 <__assert_fail@plt+0x604>
   11a50:	sub	sp, fp, #16
   11a54:	pop	{r4, r5, r6, sl, fp, pc}
   11a58:	mov	r0, #0
   11a5c:	sub	sp, fp, #16
   11a60:	pop	{r4, r5, r6, sl, fp, pc}
   11a64:	mov	r1, #10
   11a68:	bl	113c8 <__overflow@plt>
   11a6c:	b	119ec <__assert_fail@plt+0x5b8>
   11a70:	bl	1141c <abort@plt>
   11a74:	movw	r1, #36528	; 0x8eb0
   11a78:	mov	r0, #0
   11a7c:	mov	r2, #5
   11a80:	movt	r1, #3
   11a84:	bl	11218 <dcgettext@plt>
   11a88:	mov	r2, r0
   11a8c:	mov	r0, #0
   11a90:	mov	r1, #0
   11a94:	bl	11290 <error@plt>
   11a98:	mov	r0, #2
   11a9c:	bl	11530 <__assert_fail@plt+0xfc>
   11aa0:	movw	r1, #36544	; 0x8ec0
   11aa4:	mov	r0, #0
   11aa8:	mov	r2, #5
   11aac:	movt	r1, #3
   11ab0:	bl	11218 <dcgettext@plt>
   11ab4:	mov	r4, r0
   11ab8:	ldr	r0, [r5]
   11abc:	mov	r1, #8
   11ac0:	ldr	r2, [r0]
   11ac4:	mov	r0, #0
   11ac8:	bl	24bd4 <__assert_fail@plt+0x137a0>
   11acc:	mov	r3, r0
   11ad0:	mov	r0, #2
   11ad4:	mov	r1, #0
   11ad8:	mov	r2, r4
   11adc:	bl	11290 <error@plt>
   11ae0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11ae4:	add	fp, sp, #24
   11ae8:	mov	r4, r0
   11aec:	bl	11d28 <__assert_fail@plt+0x8f4>
   11af0:	movw	r5, #45456	; 0xb190
   11af4:	mov	r6, r0
   11af8:	movt	r5, #4
   11afc:	ldr	r7, [r5]
   11b00:	ldr	r0, [r7]
   11b04:	cmp	r0, #0
   11b08:	beq	11d1c <__assert_fail@plt+0x8e8>
   11b0c:	movw	r8, #36892	; 0x901c
   11b10:	mov	r9, #0
   11b14:	movt	r8, #3
   11b18:	b	11b38 <__assert_fail@plt+0x704>
   11b1c:	bl	157bc <__assert_fail@plt+0x4388>
   11b20:	mov	r0, r7
   11b24:	bl	138e8 <__assert_fail@plt+0x24b4>
   11b28:	ldr	r7, [r5]
   11b2c:	ldr	r0, [r7]
   11b30:	cmp	r0, #0
   11b34:	beq	11d1c <__assert_fail@plt+0x8e8>
   11b38:	mov	r1, r8
   11b3c:	bl	1117c <strcmp@plt>
   11b40:	clz	r1, r0
   11b44:	cmp	r0, #0
   11b48:	lsr	r1, r1, #5
   11b4c:	add	r1, r7, r1, lsl #2
   11b50:	str	r1, [r5]
   11b54:	bne	11d1c <__assert_fail@plt+0x8e8>
   11b58:	mov	r0, #0
   11b5c:	cmp	r4, #0
   11b60:	beq	11bc4 <__assert_fail@plt+0x790>
   11b64:	ldr	r1, [r6]
   11b68:	cmp	r1, #1
   11b6c:	beq	11b8c <__assert_fail@plt+0x758>
   11b70:	cmp	r1, #0
   11b74:	bne	11d24 <__assert_fail@plt+0x8f0>
   11b78:	add	r0, r6, #4
   11b7c:	bl	169c8 <__assert_fail@plt+0x5594>
   11b80:	clz	r0, r0
   11b84:	lsr	r0, r0, #5
   11b88:	b	11bc4 <__assert_fail@plt+0x790>
   11b8c:	ldr	r1, [r6, #4]
   11b90:	ldrb	r2, [r1]
   11b94:	cmp	r2, #0
   11b98:	beq	11bc0 <__assert_fail@plt+0x78c>
   11b9c:	cmp	r2, #45	; 0x2d
   11ba0:	addeq	r1, r1, #1
   11ba4:	ldrb	r2, [r1], #1
   11ba8:	uxtb	r2, r2
   11bac:	cmp	r2, #48	; 0x30
   11bb0:	bne	11bc4 <__assert_fail@plt+0x790>
   11bb4:	ldrb	r2, [r1], #1
   11bb8:	cmp	r2, #0
   11bbc:	bne	11ba8 <__assert_fail@plt+0x774>
   11bc0:	mov	r0, #1
   11bc4:	bl	11d28 <__assert_fail@plt+0x8f4>
   11bc8:	mov	r7, r0
   11bcc:	ldr	r0, [r6]
   11bd0:	cmp	r0, #0
   11bd4:	beq	11c1c <__assert_fail@plt+0x7e8>
   11bd8:	cmp	r0, #1
   11bdc:	bne	11d24 <__assert_fail@plt+0x8f0>
   11be0:	ldr	r0, [r6, #4]
   11be4:	ldrb	r1, [r0]
   11be8:	cmp	r1, #0
   11bec:	beq	11c14 <__assert_fail@plt+0x7e0>
   11bf0:	cmp	r1, #45	; 0x2d
   11bf4:	addeq	r0, r0, #1
   11bf8:	ldrb	r1, [r0], #1
   11bfc:	uxtb	r1, r1
   11c00:	cmp	r1, #48	; 0x30
   11c04:	bne	11c2c <__assert_fail@plt+0x7f8>
   11c08:	ldrb	r1, [r0], #1
   11c0c:	cmp	r1, #0
   11c10:	bne	11bfc <__assert_fail@plt+0x7c8>
   11c14:	add	r0, r6, #4
   11c18:	b	11c58 <__assert_fail@plt+0x824>
   11c1c:	add	r0, r6, #4
   11c20:	bl	169c8 <__assert_fail@plt+0x5594>
   11c24:	cmp	r0, #0
   11c28:	beq	11c48 <__assert_fail@plt+0x814>
   11c2c:	mov	r0, r7
   11c30:	ldr	r1, [r0], #4
   11c34:	cmp	r1, #1
   11c38:	bne	11b1c <__assert_fail@plt+0x6e8>
   11c3c:	ldr	r0, [r0]
   11c40:	bl	138e8 <__assert_fail@plt+0x24b4>
   11c44:	b	11b20 <__assert_fail@plt+0x6ec>
   11c48:	mov	r0, r6
   11c4c:	ldr	r1, [r0], #4
   11c50:	cmp	r1, #1
   11c54:	bne	11d0c <__assert_fail@plt+0x8d8>
   11c58:	ldr	r0, [r0]
   11c5c:	bl	138e8 <__assert_fail@plt+0x24b4>
   11c60:	mov	r0, r6
   11c64:	bl	138e8 <__assert_fail@plt+0x24b4>
   11c68:	ldr	r0, [r7]
   11c6c:	cmp	r0, #0
   11c70:	beq	11cb8 <__assert_fail@plt+0x884>
   11c74:	cmp	r0, #1
   11c78:	bne	11d24 <__assert_fail@plt+0x8f0>
   11c7c:	ldr	r0, [r7, #4]
   11c80:	ldrb	r1, [r0]
   11c84:	cmp	r1, #0
   11c88:	beq	11cb0 <__assert_fail@plt+0x87c>
   11c8c:	cmp	r1, #45	; 0x2d
   11c90:	addeq	r0, r0, #1
   11c94:	ldrb	r1, [r0], #1
   11c98:	uxtb	r1, r1
   11c9c:	cmp	r1, #48	; 0x30
   11ca0:	bne	11cc8 <__assert_fail@plt+0x894>
   11ca4:	ldrb	r1, [r0], #1
   11ca8:	cmp	r1, #0
   11cac:	bne	11c98 <__assert_fail@plt+0x864>
   11cb0:	add	r0, r7, #4
   11cb4:	b	11ce0 <__assert_fail@plt+0x8ac>
   11cb8:	add	r0, r7, #4
   11cbc:	bl	169c8 <__assert_fail@plt+0x5594>
   11cc0:	cmp	r0, #0
   11cc4:	beq	11cd0 <__assert_fail@plt+0x89c>
   11cc8:	mov	r6, r7
   11ccc:	b	11b28 <__assert_fail@plt+0x6f4>
   11cd0:	mov	r0, r7
   11cd4:	ldr	r1, [r0], #4
   11cd8:	cmp	r1, #1
   11cdc:	bne	11d14 <__assert_fail@plt+0x8e0>
   11ce0:	ldr	r0, [r0]
   11ce4:	bl	138e8 <__assert_fail@plt+0x24b4>
   11ce8:	mov	r0, r7
   11cec:	bl	138e8 <__assert_fail@plt+0x24b4>
   11cf0:	mov	r0, #16
   11cf4:	bl	37a1c <__assert_fail@plt+0x265e8>
   11cf8:	mov	r6, r0
   11cfc:	str	r9, [r0], #4
   11d00:	mov	r1, #0
   11d04:	bl	15b88 <__assert_fail@plt+0x4754>
   11d08:	b	11b28 <__assert_fail@plt+0x6f4>
   11d0c:	bl	157bc <__assert_fail@plt+0x4388>
   11d10:	b	11c60 <__assert_fail@plt+0x82c>
   11d14:	bl	157bc <__assert_fail@plt+0x4388>
   11d18:	b	11ce8 <__assert_fail@plt+0x8b4>
   11d1c:	mov	r0, r6
   11d20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11d24:	bl	1141c <abort@plt>
   11d28:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11d2c:	add	fp, sp, #24
   11d30:	mov	r4, r0
   11d34:	bl	11f70 <__assert_fail@plt+0xb3c>
   11d38:	movw	r5, #45456	; 0xb190
   11d3c:	mov	r6, r0
   11d40:	movt	r5, #4
   11d44:	ldr	r7, [r5]
   11d48:	ldr	r0, [r7]
   11d4c:	cmp	r0, #0
   11d50:	beq	11f64 <__assert_fail@plt+0xb30>
   11d54:	movw	r8, #36894	; 0x901e
   11d58:	mov	r9, #0
   11d5c:	movt	r8, #3
   11d60:	b	11d98 <__assert_fail@plt+0x964>
   11d64:	bl	157bc <__assert_fail@plt+0x4388>
   11d68:	mov	r0, r7
   11d6c:	bl	138e8 <__assert_fail@plt+0x24b4>
   11d70:	mov	r0, #16
   11d74:	bl	37a1c <__assert_fail@plt+0x265e8>
   11d78:	mov	r6, r0
   11d7c:	str	r9, [r0], #4
   11d80:	mov	r1, #0
   11d84:	bl	15b88 <__assert_fail@plt+0x4754>
   11d88:	ldr	r7, [r5]
   11d8c:	ldr	r0, [r7]
   11d90:	cmp	r0, #0
   11d94:	beq	11f64 <__assert_fail@plt+0xb30>
   11d98:	mov	r1, r8
   11d9c:	bl	1117c <strcmp@plt>
   11da0:	clz	r1, r0
   11da4:	cmp	r0, #0
   11da8:	lsr	r1, r1, #5
   11dac:	add	r1, r7, r1, lsl #2
   11db0:	str	r1, [r5]
   11db4:	bne	11f64 <__assert_fail@plt+0xb30>
   11db8:	mov	r0, #0
   11dbc:	cmp	r4, #0
   11dc0:	beq	11e30 <__assert_fail@plt+0x9fc>
   11dc4:	ldr	r0, [r6]
   11dc8:	cmp	r0, #1
   11dcc:	beq	11dec <__assert_fail@plt+0x9b8>
   11dd0:	cmp	r0, #0
   11dd4:	bne	11f6c <__assert_fail@plt+0xb38>
   11dd8:	add	r0, r6, #4
   11ddc:	bl	169c8 <__assert_fail@plt+0x5594>
   11de0:	clz	r0, r0
   11de4:	lsr	r0, r0, #5
   11de8:	b	11e2c <__assert_fail@plt+0x9f8>
   11dec:	ldr	r1, [r6, #4]
   11df0:	mov	r0, #1
   11df4:	ldrb	r2, [r1]
   11df8:	cmp	r2, #0
   11dfc:	beq	11e2c <__assert_fail@plt+0x9f8>
   11e00:	cmp	r2, #45	; 0x2d
   11e04:	addeq	r1, r1, #1
   11e08:	ldrb	r2, [r1], #1
   11e0c:	uxtb	r2, r2
   11e10:	cmp	r2, #48	; 0x30
   11e14:	bne	11e28 <__assert_fail@plt+0x9f4>
   11e18:	ldrb	r2, [r1], #1
   11e1c:	cmp	r2, #0
   11e20:	bne	11e0c <__assert_fail@plt+0x9d8>
   11e24:	b	11e2c <__assert_fail@plt+0x9f8>
   11e28:	mov	r0, #0
   11e2c:	eor	r0, r0, #1
   11e30:	bl	11f70 <__assert_fail@plt+0xb3c>
   11e34:	mov	r7, r0
   11e38:	ldr	r0, [r6]
   11e3c:	cmp	r0, #0
   11e40:	beq	11e84 <__assert_fail@plt+0xa50>
   11e44:	cmp	r0, #1
   11e48:	bne	11f6c <__assert_fail@plt+0xb38>
   11e4c:	ldr	r0, [r6, #4]
   11e50:	ldrb	r1, [r0]
   11e54:	cmp	r1, #0
   11e58:	beq	11f08 <__assert_fail@plt+0xad4>
   11e5c:	cmp	r1, #45	; 0x2d
   11e60:	addeq	r0, r0, #1
   11e64:	ldrb	r1, [r0], #1
   11e68:	uxtb	r1, r1
   11e6c:	cmp	r1, #48	; 0x30
   11e70:	bne	11e94 <__assert_fail@plt+0xa60>
   11e74:	ldrb	r1, [r0], #1
   11e78:	cmp	r1, #0
   11e7c:	bne	11e68 <__assert_fail@plt+0xa34>
   11e80:	b	11f08 <__assert_fail@plt+0xad4>
   11e84:	add	r0, r6, #4
   11e88:	bl	169c8 <__assert_fail@plt+0x5594>
   11e8c:	cmp	r0, #0
   11e90:	beq	11f08 <__assert_fail@plt+0xad4>
   11e94:	ldr	r0, [r7]
   11e98:	cmp	r0, #0
   11e9c:	beq	11ee0 <__assert_fail@plt+0xaac>
   11ea0:	cmp	r0, #1
   11ea4:	bne	11f6c <__assert_fail@plt+0xb38>
   11ea8:	ldr	r0, [r7, #4]
   11eac:	ldrb	r1, [r0]
   11eb0:	cmp	r1, #0
   11eb4:	beq	11f08 <__assert_fail@plt+0xad4>
   11eb8:	cmp	r1, #45	; 0x2d
   11ebc:	addeq	r0, r0, #1
   11ec0:	ldrb	r1, [r0], #1
   11ec4:	uxtb	r1, r1
   11ec8:	cmp	r1, #48	; 0x30
   11ecc:	bne	11f4c <__assert_fail@plt+0xb18>
   11ed0:	ldrb	r1, [r0], #1
   11ed4:	cmp	r1, #0
   11ed8:	bne	11ec4 <__assert_fail@plt+0xa90>
   11edc:	b	11f08 <__assert_fail@plt+0xad4>
   11ee0:	add	r0, r7, #4
   11ee4:	bl	169c8 <__assert_fail@plt+0x5594>
   11ee8:	cmp	r0, #0
   11eec:	beq	11f08 <__assert_fail@plt+0xad4>
   11ef0:	mov	r0, r7
   11ef4:	ldr	r1, [r0], #4
   11ef8:	cmp	r1, #1
   11efc:	beq	11f50 <__assert_fail@plt+0xb1c>
   11f00:	bl	157bc <__assert_fail@plt+0x4388>
   11f04:	b	11f58 <__assert_fail@plt+0xb24>
   11f08:	mov	r0, r6
   11f0c:	ldr	r1, [r0], #4
   11f10:	cmp	r1, #1
   11f14:	bne	11f24 <__assert_fail@plt+0xaf0>
   11f18:	ldr	r0, [r0]
   11f1c:	bl	138e8 <__assert_fail@plt+0x24b4>
   11f20:	b	11f28 <__assert_fail@plt+0xaf4>
   11f24:	bl	157bc <__assert_fail@plt+0x4388>
   11f28:	mov	r0, r6
   11f2c:	bl	138e8 <__assert_fail@plt+0x24b4>
   11f30:	mov	r0, r7
   11f34:	ldr	r1, [r0], #4
   11f38:	cmp	r1, #1
   11f3c:	bne	11d64 <__assert_fail@plt+0x930>
   11f40:	ldr	r0, [r0]
   11f44:	bl	138e8 <__assert_fail@plt+0x24b4>
   11f48:	b	11d68 <__assert_fail@plt+0x934>
   11f4c:	add	r0, r7, #4
   11f50:	ldr	r0, [r0]
   11f54:	bl	138e8 <__assert_fail@plt+0x24b4>
   11f58:	mov	r0, r7
   11f5c:	bl	138e8 <__assert_fail@plt+0x24b4>
   11f60:	b	11d88 <__assert_fail@plt+0x954>
   11f64:	mov	r0, r6
   11f68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11f6c:	bl	1141c <abort@plt>
   11f70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f74:	add	fp, sp, #28
   11f78:	sub	sp, sp, #4
   11f7c:	mov	r6, r0
   11f80:	bl	12348 <__assert_fail@plt+0xf14>
   11f84:	movw	r7, #45456	; 0xb190
   11f88:	mov	r5, r0
   11f8c:	movt	r7, #4
   11f90:	ldr	r4, [r7]
   11f94:	ldr	r0, [r4]
   11f98:	cmp	r0, #0
   11f9c:	beq	12338 <__assert_fail@plt+0xf04>
   11fa0:	mvn	r8, #47	; 0x2f
   11fa4:	str	r6, [sp]
   11fa8:	b	11fec <__assert_fail@plt+0xbb8>
   11fac:	bl	157bc <__assert_fail@plt+0x4388>
   11fb0:	mov	r0, sl
   11fb4:	bl	138e8 <__assert_fail@plt+0x24b4>
   11fb8:	mov	r0, #16
   11fbc:	bl	37a1c <__assert_fail@plt+0x265e8>
   11fc0:	mov	r1, #0
   11fc4:	mov	r5, r0
   11fc8:	str	r1, [r0], #4
   11fcc:	mov	r1, r9
   11fd0:	bl	15b88 <__assert_fail@plt+0x4754>
   11fd4:	movw	r7, #45456	; 0xb190
   11fd8:	movt	r7, #4
   11fdc:	ldr	r4, [r7]
   11fe0:	ldr	r0, [r4]
   11fe4:	cmp	r0, #0
   11fe8:	beq	12338 <__assert_fail@plt+0xf04>
   11fec:	movw	r1, #36896	; 0x9020
   11ff0:	mov	r9, r6
   11ff4:	movt	r1, #3
   11ff8:	bl	1117c <strcmp@plt>
   11ffc:	clz	r1, r0
   12000:	cmp	r0, #0
   12004:	lsr	r1, r1, #5
   12008:	add	r6, r4, r1, lsl #2
   1200c:	mov	r4, #0
   12010:	str	r6, [r7]
   12014:	beq	12148 <__assert_fail@plt+0xd14>
   12018:	ldr	r0, [r6]
   1201c:	cmp	r0, #0
   12020:	beq	12338 <__assert_fail@plt+0xf04>
   12024:	movw	r1, #36898	; 0x9022
   12028:	movt	r1, #3
   1202c:	bl	1117c <strcmp@plt>
   12030:	clz	r1, r0
   12034:	cmp	r0, #0
   12038:	lsr	r1, r1, #5
   1203c:	add	r4, r6, r1, lsl #2
   12040:	str	r4, [r7]
   12044:	beq	12144 <__assert_fail@plt+0xd10>
   12048:	ldr	r0, [r4]
   1204c:	cmp	r0, #0
   12050:	beq	12338 <__assert_fail@plt+0xf04>
   12054:	movw	r1, #36905	; 0x9029
   12058:	movt	r1, #3
   1205c:	bl	1117c <strcmp@plt>
   12060:	clz	r1, r0
   12064:	cmp	r0, #0
   12068:	lsr	r1, r1, #5
   1206c:	add	r6, r4, r1, lsl #2
   12070:	mov	r4, #2
   12074:	str	r6, [r7]
   12078:	beq	12148 <__assert_fail@plt+0xd14>
   1207c:	ldr	r0, [r6]
   12080:	cmp	r0, #0
   12084:	beq	12338 <__assert_fail@plt+0xf04>
   12088:	movw	r1, #36901	; 0x9025
   1208c:	movt	r1, #3
   12090:	bl	1117c <strcmp@plt>
   12094:	clz	r1, r0
   12098:	cmp	r0, #0
   1209c:	lsr	r1, r1, #5
   120a0:	add	r6, r6, r1, lsl #2
   120a4:	str	r6, [r7]
   120a8:	beq	12148 <__assert_fail@plt+0xd14>
   120ac:	ldr	r0, [r6]
   120b0:	cmp	r0, #0
   120b4:	beq	12338 <__assert_fail@plt+0xf04>
   120b8:	movw	r1, #36904	; 0x9028
   120bc:	movt	r1, #3
   120c0:	bl	1117c <strcmp@plt>
   120c4:	clz	r1, r0
   120c8:	cmp	r0, #0
   120cc:	lsr	r1, r1, #5
   120d0:	add	r4, r6, r1, lsl #2
   120d4:	str	r4, [r7]
   120d8:	beq	12328 <__assert_fail@plt+0xef4>
   120dc:	ldr	r0, [r4]
   120e0:	cmp	r0, #0
   120e4:	beq	12338 <__assert_fail@plt+0xf04>
   120e8:	movw	r1, #36907	; 0x902b
   120ec:	movt	r1, #3
   120f0:	bl	1117c <strcmp@plt>
   120f4:	clz	r1, r0
   120f8:	cmp	r0, #0
   120fc:	lsr	r1, r1, #5
   12100:	add	r4, r4, r1, lsl #2
   12104:	str	r4, [r7]
   12108:	beq	12330 <__assert_fail@plt+0xefc>
   1210c:	ldr	r0, [r4]
   12110:	cmp	r0, #0
   12114:	beq	12338 <__assert_fail@plt+0xf04>
   12118:	movw	r1, #36910	; 0x902e
   1211c:	movt	r1, #3
   12120:	bl	1117c <strcmp@plt>
   12124:	clz	r1, r0
   12128:	cmp	r0, #0
   1212c:	lsr	r1, r1, #5
   12130:	add	r1, r4, r1, lsl #2
   12134:	mov	r4, #5
   12138:	str	r1, [r7]
   1213c:	beq	12148 <__assert_fail@plt+0xd14>
   12140:	b	12338 <__assert_fail@plt+0xf04>
   12144:	mov	r4, #1
   12148:	mov	r0, r9
   1214c:	mov	r6, r9
   12150:	bl	12348 <__assert_fail@plt+0xf14>
   12154:	mov	sl, r0
   12158:	mov	r9, #0
   1215c:	cmp	r6, #0
   12160:	beq	122e4 <__assert_fail@plt+0xeb0>
   12164:	ldr	r0, [r5]
   12168:	cmp	r0, #1
   1216c:	beq	121a4 <__assert_fail@plt+0xd70>
   12170:	cmp	r0, #0
   12174:	bne	12344 <__assert_fail@plt+0xf10>
   12178:	add	r7, r5, #4
   1217c:	mov	r0, #0
   12180:	mov	r1, #10
   12184:	mov	r2, r7
   12188:	bl	21c0c <__assert_fail@plt+0x107d8>
   1218c:	mov	r6, r0
   12190:	mov	r0, r7
   12194:	bl	157bc <__assert_fail@plt+0x4388>
   12198:	mov	r0, #1
   1219c:	stm	r5, {r0, r6}
   121a0:	ldr	r6, [sp]
   121a4:	ldr	r0, [sl]
   121a8:	cmp	r0, #1
   121ac:	beq	121e4 <__assert_fail@plt+0xdb0>
   121b0:	cmp	r0, #0
   121b4:	bne	12344 <__assert_fail@plt+0xf10>
   121b8:	add	r6, sl, #4
   121bc:	mov	r0, #0
   121c0:	mov	r1, #10
   121c4:	mov	r2, r6
   121c8:	bl	21c0c <__assert_fail@plt+0x107d8>
   121cc:	mov	r7, r0
   121d0:	mov	r0, r6
   121d4:	bl	157bc <__assert_fail@plt+0x4388>
   121d8:	mov	r0, #1
   121dc:	stm	sl, {r0, r7}
   121e0:	ldr	r6, [sp]
   121e4:	ldr	r0, [r5, #4]
   121e8:	ldrb	r1, [r0]
   121ec:	sub	r1, r1, #45	; 0x2d
   121f0:	clz	r1, r1
   121f4:	lsr	r1, r1, #5
   121f8:	ldrb	r2, [r0, r1]
   121fc:	add	r1, r1, #1
   12200:	uxtab	r2, r8, r2
   12204:	cmp	r2, #9
   12208:	bhi	1225c <__assert_fail@plt+0xe28>
   1220c:	ldrb	r2, [r0, r1]
   12210:	add	r1, r1, #1
   12214:	cmp	r2, #0
   12218:	bne	12200 <__assert_fail@plt+0xdcc>
   1221c:	ldr	r1, [sl, #4]
   12220:	ldrb	r2, [r1]
   12224:	sub	r2, r2, #45	; 0x2d
   12228:	clz	r2, r2
   1222c:	lsr	r2, r2, #5
   12230:	ldrb	r3, [r1, r2]
   12234:	add	r2, r2, #1
   12238:	uxtab	r3, r8, r3
   1223c:	cmp	r3, #9
   12240:	bhi	1225c <__assert_fail@plt+0xe28>
   12244:	ldrb	r3, [r1, r2]
   12248:	add	r2, r2, #1
   1224c:	cmp	r3, #0
   12250:	bne	12238 <__assert_fail@plt+0xe04>
   12254:	bl	37110 <__assert_fail@plt+0x25cdc>
   12258:	b	12274 <__assert_fail@plt+0xe40>
   1225c:	bl	11344 <__errno_location@plt>
   12260:	mov	r1, #0
   12264:	str	r1, [r0]
   12268:	ldr	r0, [r5, #4]
   1226c:	ldr	r1, [sl, #4]
   12270:	bl	1129c <strcoll@plt>
   12274:	mov	r9, r0
   12278:	cmp	r4, #5
   1227c:	bhi	12344 <__assert_fail@plt+0xf10>
   12280:	add	r0, pc, #0
   12284:	ldr	pc, [r0, r4, lsl #2]
   12288:	andeq	r2, r1, r0, lsr #5
   1228c:			; <UNDEFINED> instruction: 0x000122bc
   12290:	andeq	r2, r1, r8, lsr #5
   12294:	andeq	r2, r1, ip, asr #5
   12298:			; <UNDEFINED> instruction: 0x000122b4
   1229c:	ldrdeq	r2, [r1], -r8
   122a0:	lsr	r9, r9, #31
   122a4:	b	122e4 <__assert_fail@plt+0xeb0>
   122a8:	clz	r0, r9
   122ac:	lsr	r9, r0, #5
   122b0:	b	122e4 <__assert_fail@plt+0xeb0>
   122b4:	cmn	r9, #1
   122b8:	b	122dc <__assert_fail@plt+0xea8>
   122bc:	cmp	r9, #1
   122c0:	mov	r9, #0
   122c4:	movwlt	r9, #1
   122c8:	b	122e4 <__assert_fail@plt+0xeb0>
   122cc:	cmp	r9, #0
   122d0:	movwne	r9, #1
   122d4:	b	122e4 <__assert_fail@plt+0xeb0>
   122d8:	cmp	r9, #0
   122dc:	mov	r9, #0
   122e0:	movwgt	r9, #1
   122e4:	mov	r0, r5
   122e8:	ldr	r1, [r0], #4
   122ec:	cmp	r1, #1
   122f0:	bne	12300 <__assert_fail@plt+0xecc>
   122f4:	ldr	r0, [r0]
   122f8:	bl	138e8 <__assert_fail@plt+0x24b4>
   122fc:	b	12304 <__assert_fail@plt+0xed0>
   12300:	bl	157bc <__assert_fail@plt+0x4388>
   12304:	mov	r0, r5
   12308:	bl	138e8 <__assert_fail@plt+0x24b4>
   1230c:	mov	r0, sl
   12310:	ldr	r1, [r0], #4
   12314:	cmp	r1, #1
   12318:	bne	11fac <__assert_fail@plt+0xb78>
   1231c:	ldr	r0, [r0]
   12320:	bl	138e8 <__assert_fail@plt+0x24b4>
   12324:	b	11fb0 <__assert_fail@plt+0xb7c>
   12328:	mov	r4, #3
   1232c:	b	12148 <__assert_fail@plt+0xd14>
   12330:	mov	r4, #4
   12334:	b	12148 <__assert_fail@plt+0xd14>
   12338:	mov	r0, r5
   1233c:	sub	sp, fp, #28
   12340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12344:	bl	1141c <abort@plt>
   12348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1234c:	add	fp, sp, #28
   12350:	sub	sp, sp, #4
   12354:	mov	r4, r0
   12358:	bl	12594 <__assert_fail@plt+0x1160>
   1235c:	movw	r8, #45456	; 0xb190
   12360:	str	r0, [sp]
   12364:	movt	r8, #4
   12368:	ldr	r5, [r8]
   1236c:	ldr	r0, [r5]
   12370:	cmp	r0, #0
   12374:	beq	12548 <__assert_fail@plt+0x1114>
   12378:	ldr	r1, [sp]
   1237c:	mvn	r9, #47	; 0x2f
   12380:	add	r6, r1, #4
   12384:	b	123a4 <__assert_fail@plt+0xf70>
   12388:	bl	157bc <__assert_fail@plt+0x4388>
   1238c:	mov	r0, r7
   12390:	bl	138e8 <__assert_fail@plt+0x24b4>
   12394:	ldr	r5, [r8]
   12398:	ldr	r0, [r5]
   1239c:	cmp	r0, #0
   123a0:	beq	12548 <__assert_fail@plt+0x1114>
   123a4:	movw	r1, #36912	; 0x9030
   123a8:	movt	r1, #3
   123ac:	bl	1117c <strcmp@plt>
   123b0:	clz	r1, r0
   123b4:	cmp	r0, #0
   123b8:	mov	sl, #0
   123bc:	lsr	r1, r1, #5
   123c0:	add	r5, r5, r1, lsl #2
   123c4:	str	r5, [r8]
   123c8:	beq	12400 <__assert_fail@plt+0xfcc>
   123cc:	ldr	r0, [r5]
   123d0:	cmp	r0, #0
   123d4:	beq	12548 <__assert_fail@plt+0x1114>
   123d8:	movw	r1, #36526	; 0x8eae
   123dc:	movt	r1, #3
   123e0:	bl	1117c <strcmp@plt>
   123e4:	clz	r1, r0
   123e8:	mov	sl, #1
   123ec:	cmp	r0, #0
   123f0:	lsr	r1, r1, #5
   123f4:	add	r1, r5, r1, lsl #2
   123f8:	str	r1, [r8]
   123fc:	bne	12548 <__assert_fail@plt+0x1114>
   12400:	mov	r0, r4
   12404:	bl	12594 <__assert_fail@plt+0x1160>
   12408:	mov	r7, r0
   1240c:	cmp	r4, #0
   12410:	beq	1252c <__assert_fail@plt+0x10f8>
   12414:	ldr	r0, [sp]
   12418:	ldr	r0, [r0]
   1241c:	cmp	r0, #0
   12420:	beq	12490 <__assert_fail@plt+0x105c>
   12424:	cmp	r0, #1
   12428:	bne	12578 <__assert_fail@plt+0x1144>
   1242c:	ldr	r5, [r6]
   12430:	ldrb	r0, [r5]
   12434:	sub	r0, r0, #45	; 0x2d
   12438:	clz	r0, r0
   1243c:	lsr	r0, r0, #5
   12440:	ldrb	r1, [r5, r0]
   12444:	add	r0, r0, #1
   12448:	uxtab	r1, r9, r1
   1244c:	cmp	r1, #9
   12450:	bhi	12554 <__assert_fail@plt+0x1120>
   12454:	ldrb	r1, [r5, r0]
   12458:	add	r0, r0, #1
   1245c:	cmp	r1, #0
   12460:	bne	12448 <__assert_fail@plt+0x1014>
   12464:	mov	r0, r6
   12468:	mov	r1, r5
   1246c:	mov	r2, #10
   12470:	bl	2262c <__assert_fail@plt+0x111f8>
   12474:	cmp	r0, #0
   12478:	bne	1257c <__assert_fail@plt+0x1148>
   1247c:	mov	r0, r5
   12480:	bl	138e8 <__assert_fail@plt+0x24b4>
   12484:	ldr	r0, [sp]
   12488:	mov	r1, #0
   1248c:	str	r1, [r0]
   12490:	ldr	r0, [r7]
   12494:	cmp	r0, #0
   12498:	beq	12504 <__assert_fail@plt+0x10d0>
   1249c:	cmp	r0, #1
   124a0:	bne	12578 <__assert_fail@plt+0x1144>
   124a4:	mov	r0, r7
   124a8:	ldr	r5, [r0, #4]!
   124ac:	ldrb	r1, [r5]
   124b0:	sub	r1, r1, #45	; 0x2d
   124b4:	clz	r1, r1
   124b8:	lsr	r1, r1, #5
   124bc:	ldrb	r2, [r5, r1]
   124c0:	add	r1, r1, #1
   124c4:	uxtab	r2, r9, r2
   124c8:	cmp	r2, #9
   124cc:	bhi	12554 <__assert_fail@plt+0x1120>
   124d0:	ldrb	r2, [r5, r1]
   124d4:	add	r1, r1, #1
   124d8:	cmp	r2, #0
   124dc:	bne	124c4 <__assert_fail@plt+0x1090>
   124e0:	mov	r1, r5
   124e4:	mov	r2, #10
   124e8:	bl	2262c <__assert_fail@plt+0x111f8>
   124ec:	cmp	r0, #0
   124f0:	bne	1257c <__assert_fail@plt+0x1148>
   124f4:	mov	r0, r5
   124f8:	bl	138e8 <__assert_fail@plt+0x24b4>
   124fc:	mov	r0, #0
   12500:	str	r0, [r7]
   12504:	movw	r0, #28796	; 0x707c
   12508:	movw	r3, #31204	; 0x79e4
   1250c:	cmp	sl, #0
   12510:	add	r2, r7, #4
   12514:	mov	r1, r6
   12518:	movt	r0, #1
   1251c:	movt	r3, #1
   12520:	moveq	r3, r0
   12524:	mov	r0, r6
   12528:	blx	r3
   1252c:	mov	r0, r7
   12530:	ldr	r1, [r0], #4
   12534:	cmp	r1, #1
   12538:	bne	12388 <__assert_fail@plt+0xf54>
   1253c:	ldr	r0, [r0]
   12540:	bl	138e8 <__assert_fail@plt+0x24b4>
   12544:	b	1238c <__assert_fail@plt+0xf58>
   12548:	ldr	r0, [sp]
   1254c:	sub	sp, fp, #28
   12550:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12554:	movw	r1, #36914	; 0x9032
   12558:	mov	r0, #0
   1255c:	mov	r2, #5
   12560:	movt	r1, #3
   12564:	bl	11218 <dcgettext@plt>
   12568:	mov	r2, r0
   1256c:	mov	r0, #2
   12570:	mov	r1, #0
   12574:	bl	11290 <error@plt>
   12578:	bl	1141c <abort@plt>
   1257c:	movw	r2, #37248	; 0x9180
   12580:	mov	r0, #3
   12584:	mov	r1, #34	; 0x22
   12588:	mov	r3, r5
   1258c:	movt	r2, #3
   12590:	bl	11290 <error@plt>
   12594:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12598:	add	fp, sp, #28
   1259c:	sub	sp, sp, #12
   125a0:	mov	r4, r0
   125a4:	bl	129d0 <__assert_fail@plt+0x159c>
   125a8:	movw	r8, #45456	; 0xb190
   125ac:	mov	sl, r0
   125b0:	movt	r8, #4
   125b4:	ldr	r6, [r8]
   125b8:	ldr	r0, [r6]
   125bc:	cmp	r0, #0
   125c0:	beq	12678 <__assert_fail@plt+0x1244>
   125c4:	movw	r9, #36956	; 0x905c
   125c8:	movt	r9, #3
   125cc:	b	125ec <__assert_fail@plt+0x11b8>
   125d0:	bl	157bc <__assert_fail@plt+0x4388>
   125d4:	mov	r0, r7
   125d8:	bl	138e8 <__assert_fail@plt+0x24b4>
   125dc:	ldr	r6, [r8]
   125e0:	ldr	r0, [r6]
   125e4:	cmp	r0, #0
   125e8:	beq	12678 <__assert_fail@plt+0x1244>
   125ec:	mov	r1, r9
   125f0:	bl	1117c <strcmp@plt>
   125f4:	clz	r1, r0
   125f8:	cmp	r0, #0
   125fc:	lsr	r1, r1, #5
   12600:	add	r6, r6, r1, lsl #2
   12604:	str	r6, [r8]
   12608:	bne	12678 <__assert_fail@plt+0x1244>
   1260c:	mov	r0, r4
   12610:	bl	129d0 <__assert_fail@plt+0x159c>
   12614:	mov	r7, r0
   12618:	cmp	r4, #0
   1261c:	beq	1265c <__assert_fail@plt+0x1228>
   12620:	mov	r0, sl
   12624:	mov	r1, r7
   12628:	bl	134c8 <__assert_fail@plt+0x2094>
   1262c:	mov	r5, r0
   12630:	mov	r0, sl
   12634:	ldr	r1, [r0], #4
   12638:	cmp	r1, #1
   1263c:	bne	1264c <__assert_fail@plt+0x1218>
   12640:	ldr	r0, [r0]
   12644:	bl	138e8 <__assert_fail@plt+0x24b4>
   12648:	b	12650 <__assert_fail@plt+0x121c>
   1264c:	bl	157bc <__assert_fail@plt+0x4388>
   12650:	mov	r0, sl
   12654:	bl	138e8 <__assert_fail@plt+0x24b4>
   12658:	mov	sl, r5
   1265c:	mov	r0, r7
   12660:	ldr	r1, [r0], #4
   12664:	cmp	r1, #1
   12668:	bne	125d0 <__assert_fail@plt+0x119c>
   1266c:	ldr	r0, [r0]
   12670:	bl	138e8 <__assert_fail@plt+0x24b4>
   12674:	b	125d4 <__assert_fail@plt+0x11a0>
   12678:	ldr	r0, [r6]
   1267c:	str	sl, [sp]
   12680:	cmp	r0, #0
   12684:	beq	12978 <__assert_fail@plt+0x1544>
   12688:	ldr	r1, [sp]
   1268c:	movw	r7, #36956	; 0x905c
   12690:	mvn	r5, #47	; 0x2f
   12694:	movt	r7, #3
   12698:	add	r1, r1, #4
   1269c:	str	r1, [sp, #4]
   126a0:	b	126c0 <__assert_fail@plt+0x128c>
   126a4:	bl	157bc <__assert_fail@plt+0x4388>
   126a8:	mov	r0, sl
   126ac:	bl	138e8 <__assert_fail@plt+0x24b4>
   126b0:	ldr	r6, [r8]
   126b4:	ldr	r0, [r6]
   126b8:	cmp	r0, #0
   126bc:	beq	12978 <__assert_fail@plt+0x1544>
   126c0:	movw	r1, #36935	; 0x9047
   126c4:	movt	r1, #3
   126c8:	bl	1117c <strcmp@plt>
   126cc:	clz	r1, r0
   126d0:	cmp	r0, #0
   126d4:	lsr	r1, r1, #5
   126d8:	add	r6, r6, r1, lsl #2
   126dc:	mov	r1, #0
   126e0:	str	r6, [r8]
   126e4:	beq	12754 <__assert_fail@plt+0x1320>
   126e8:	ldr	r0, [r6]
   126ec:	cmp	r0, #0
   126f0:	beq	12978 <__assert_fail@plt+0x1544>
   126f4:	movw	r1, #43776	; 0xab00
   126f8:	movt	r1, #3
   126fc:	bl	1117c <strcmp@plt>
   12700:	clz	r1, r0
   12704:	cmp	r0, #0
   12708:	lsr	r1, r1, #5
   1270c:	add	r6, r6, r1, lsl #2
   12710:	str	r6, [r8]
   12714:	beq	12750 <__assert_fail@plt+0x131c>
   12718:	ldr	r0, [r6]
   1271c:	cmp	r0, #0
   12720:	beq	12978 <__assert_fail@plt+0x1544>
   12724:	movw	r1, #36937	; 0x9049
   12728:	movt	r1, #3
   1272c:	bl	1117c <strcmp@plt>
   12730:	clz	r1, r0
   12734:	cmp	r0, #0
   12738:	lsr	r1, r1, #5
   1273c:	add	r1, r6, r1, lsl #2
   12740:	str	r1, [r8]
   12744:	mov	r1, #2
   12748:	beq	12754 <__assert_fail@plt+0x1320>
   1274c:	b	12978 <__assert_fail@plt+0x1544>
   12750:	mov	r1, #1
   12754:	mov	r0, r4
   12758:	str	r1, [sp, #8]
   1275c:	bl	129d0 <__assert_fail@plt+0x159c>
   12760:	mov	sl, r0
   12764:	b	12774 <__assert_fail@plt+0x1340>
   12768:	bl	157bc <__assert_fail@plt+0x4388>
   1276c:	mov	r0, r9
   12770:	bl	138e8 <__assert_fail@plt+0x24b4>
   12774:	ldr	r6, [r8]
   12778:	ldr	r0, [r6]
   1277c:	cmp	r0, #0
   12780:	beq	12810 <__assert_fail@plt+0x13dc>
   12784:	mov	r1, r7
   12788:	bl	1117c <strcmp@plt>
   1278c:	clz	r1, r0
   12790:	cmp	r0, #0
   12794:	lsr	r1, r1, #5
   12798:	add	r1, r6, r1, lsl #2
   1279c:	str	r1, [r8]
   127a0:	bne	12810 <__assert_fail@plt+0x13dc>
   127a4:	mov	r0, r4
   127a8:	bl	129d0 <__assert_fail@plt+0x159c>
   127ac:	mov	r9, r0
   127b0:	cmp	r4, #0
   127b4:	beq	127f4 <__assert_fail@plt+0x13c0>
   127b8:	mov	r0, sl
   127bc:	mov	r1, r9
   127c0:	bl	134c8 <__assert_fail@plt+0x2094>
   127c4:	mov	r6, r0
   127c8:	mov	r0, sl
   127cc:	ldr	r1, [r0], #4
   127d0:	cmp	r1, #1
   127d4:	bne	127e4 <__assert_fail@plt+0x13b0>
   127d8:	ldr	r0, [r0]
   127dc:	bl	138e8 <__assert_fail@plt+0x24b4>
   127e0:	b	127e8 <__assert_fail@plt+0x13b4>
   127e4:	bl	157bc <__assert_fail@plt+0x4388>
   127e8:	mov	r0, sl
   127ec:	bl	138e8 <__assert_fail@plt+0x24b4>
   127f0:	mov	sl, r6
   127f4:	mov	r0, r9
   127f8:	ldr	r1, [r0], #4
   127fc:	cmp	r1, #1
   12800:	bne	12768 <__assert_fail@plt+0x1334>
   12804:	ldr	r0, [r0]
   12808:	bl	138e8 <__assert_fail@plt+0x24b4>
   1280c:	b	1276c <__assert_fail@plt+0x1338>
   12810:	cmp	r4, #0
   12814:	beq	1295c <__assert_fail@plt+0x1528>
   12818:	ldr	r0, [sp]
   1281c:	ldr	r0, [r0]
   12820:	cmp	r0, #0
   12824:	beq	12898 <__assert_fail@plt+0x1464>
   12828:	cmp	r0, #1
   1282c:	bne	129a8 <__assert_fail@plt+0x1574>
   12830:	ldr	r0, [sp, #4]
   12834:	ldr	r6, [r0]
   12838:	ldrb	r0, [r6]
   1283c:	sub	r0, r0, #45	; 0x2d
   12840:	clz	r0, r0
   12844:	lsr	r0, r0, #5
   12848:	ldrb	r1, [r6, r0]
   1284c:	add	r0, r0, #1
   12850:	uxtab	r1, r5, r1
   12854:	cmp	r1, #9
   12858:	bhi	12984 <__assert_fail@plt+0x1550>
   1285c:	ldrb	r1, [r6, r0]
   12860:	add	r0, r0, #1
   12864:	cmp	r1, #0
   12868:	bne	12850 <__assert_fail@plt+0x141c>
   1286c:	ldr	r0, [sp, #4]
   12870:	mov	r1, r6
   12874:	mov	r2, #10
   12878:	bl	2262c <__assert_fail@plt+0x111f8>
   1287c:	cmp	r0, #0
   12880:	bne	129ac <__assert_fail@plt+0x1578>
   12884:	mov	r0, r6
   12888:	bl	138e8 <__assert_fail@plt+0x24b4>
   1288c:	ldr	r0, [sp]
   12890:	mov	r1, #0
   12894:	str	r1, [r0]
   12898:	ldr	r0, [sl]
   1289c:	cmp	r0, #0
   128a0:	beq	1290c <__assert_fail@plt+0x14d8>
   128a4:	cmp	r0, #1
   128a8:	bne	129a8 <__assert_fail@plt+0x1574>
   128ac:	mov	r0, sl
   128b0:	ldr	r6, [r0, #4]!
   128b4:	ldrb	r1, [r6]
   128b8:	sub	r1, r1, #45	; 0x2d
   128bc:	clz	r1, r1
   128c0:	lsr	r1, r1, #5
   128c4:	ldrb	r2, [r6, r1]
   128c8:	add	r1, r1, #1
   128cc:	uxtab	r2, r5, r2
   128d0:	cmp	r2, #9
   128d4:	bhi	12984 <__assert_fail@plt+0x1550>
   128d8:	ldrb	r2, [r6, r1]
   128dc:	add	r1, r1, #1
   128e0:	cmp	r2, #0
   128e4:	bne	128cc <__assert_fail@plt+0x1498>
   128e8:	mov	r1, r6
   128ec:	mov	r2, #10
   128f0:	bl	2262c <__assert_fail@plt+0x111f8>
   128f4:	cmp	r0, #0
   128f8:	bne	129ac <__assert_fail@plt+0x1578>
   128fc:	mov	r0, r6
   12900:	bl	138e8 <__assert_fail@plt+0x24b4>
   12904:	mov	r0, #0
   12908:	str	r0, [sl]
   1290c:	ldr	r0, [sp, #8]
   12910:	movw	r3, #32208	; 0x7dd0
   12914:	movt	r3, #1
   12918:	cmp	r0, #0
   1291c:	beq	1294c <__assert_fail@plt+0x1518>
   12920:	add	r0, sl, #4
   12924:	bl	169c8 <__assert_fail@plt+0x5594>
   12928:	cmp	r0, #0
   1292c:	beq	129c4 <__assert_fail@plt+0x1590>
   12930:	ldr	r0, [sp, #8]
   12934:	movw	r3, #36812	; 0x8fcc
   12938:	movt	r3, #1
   1293c:	cmp	r0, #1
   12940:	movw	r0, #36672	; 0x8f40
   12944:	movt	r0, #1
   12948:	moveq	r3, r0
   1294c:	ldr	r0, [sp, #4]
   12950:	add	r2, sl, #4
   12954:	mov	r1, r0
   12958:	blx	r3
   1295c:	mov	r0, sl
   12960:	ldr	r1, [r0], #4
   12964:	cmp	r1, #1
   12968:	bne	126a4 <__assert_fail@plt+0x1270>
   1296c:	ldr	r0, [r0]
   12970:	bl	138e8 <__assert_fail@plt+0x24b4>
   12974:	b	126a8 <__assert_fail@plt+0x1274>
   12978:	ldr	r0, [sp]
   1297c:	sub	sp, fp, #28
   12980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12984:	movw	r1, #36914	; 0x9032
   12988:	movt	r1, #3
   1298c:	mov	r0, #0
   12990:	mov	r2, #5
   12994:	bl	11218 <dcgettext@plt>
   12998:	mov	r2, r0
   1299c:	mov	r0, #2
   129a0:	mov	r1, #0
   129a4:	bl	11290 <error@plt>
   129a8:	bl	1141c <abort@plt>
   129ac:	movw	r2, #37248	; 0x9180
   129b0:	mov	r0, #3
   129b4:	mov	r1, #34	; 0x22
   129b8:	mov	r3, r6
   129bc:	movt	r2, #3
   129c0:	bl	11290 <error@plt>
   129c4:	movw	r1, #36939	; 0x904b
   129c8:	movt	r1, #3
   129cc:	b	1298c <__assert_fail@plt+0x1558>
   129d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129d4:	add	fp, sp, #28
   129d8:	sub	sp, sp, #132	; 0x84
   129dc:	movw	r6, #45456	; 0xb190
   129e0:	mov	r4, r0
   129e4:	movt	r6, #4
   129e8:	ldr	r5, [r6]
   129ec:	ldr	r0, [r5]
   129f0:	cmp	r0, #0
   129f4:	beq	1343c <__assert_fail@plt+0x2008>
   129f8:	movw	r1, #36912	; 0x9030
   129fc:	movt	r1, #3
   12a00:	bl	1117c <strcmp@plt>
   12a04:	clz	r1, r0
   12a08:	cmp	r0, #0
   12a0c:	lsr	r1, r1, #5
   12a10:	add	r7, r5, r1, lsl #2
   12a14:	str	r7, [r6]
   12a18:	ldr	r5, [r5, r1, lsl #2]
   12a1c:	beq	12b68 <__assert_fail@plt+0x1734>
   12a20:	cmp	r5, #0
   12a24:	beq	1343c <__assert_fail@plt+0x2008>
   12a28:	movw	r1, #36958	; 0x905e
   12a2c:	mov	r0, r5
   12a30:	movt	r1, #3
   12a34:	bl	1117c <strcmp@plt>
   12a38:	clz	r1, r0
   12a3c:	cmp	r0, #0
   12a40:	lsr	r1, r1, #5
   12a44:	add	r5, r7, r1, lsl #2
   12a48:	str	r5, [r6]
   12a4c:	beq	12b9c <__assert_fail@plt+0x1768>
   12a50:	ldr	r0, [r5]
   12a54:	cmp	r0, #0
   12a58:	beq	1343c <__assert_fail@plt+0x2008>
   12a5c:	movw	r1, #36965	; 0x9065
   12a60:	movt	r1, #3
   12a64:	bl	1117c <strcmp@plt>
   12a68:	clz	r1, r0
   12a6c:	cmp	r0, #0
   12a70:	lsr	r1, r1, #5
   12a74:	add	r5, r5, r1, lsl #2
   12a78:	str	r5, [r6]
   12a7c:	beq	12bc8 <__assert_fail@plt+0x1794>
   12a80:	ldr	r0, [r5]
   12a84:	cmp	r0, #0
   12a88:	beq	1343c <__assert_fail@plt+0x2008>
   12a8c:	movw	r1, #36971	; 0x906b
   12a90:	movt	r1, #3
   12a94:	bl	1117c <strcmp@plt>
   12a98:	clz	r1, r0
   12a9c:	cmp	r0, #0
   12aa0:	lsr	r1, r1, #5
   12aa4:	add	r5, r5, r1, lsl #2
   12aa8:	str	r5, [r6]
   12aac:	beq	12c7c <__assert_fail@plt+0x1848>
   12ab0:	ldr	r0, [r5]
   12ab4:	cmp	r0, #0
   12ab8:	beq	1343c <__assert_fail@plt+0x2008>
   12abc:	movw	r1, #36977	; 0x9071
   12ac0:	movt	r1, #3
   12ac4:	bl	1117c <strcmp@plt>
   12ac8:	clz	r1, r0
   12acc:	cmp	r0, #0
   12ad0:	lsr	r1, r1, #5
   12ad4:	add	r5, r5, r1, lsl #2
   12ad8:	str	r5, [r6]
   12adc:	beq	12cf8 <__assert_fail@plt+0x18c4>
   12ae0:	ldr	r0, [r5]
   12ae4:	cmp	r0, #0
   12ae8:	beq	1343c <__assert_fail@plt+0x2008>
   12aec:	movw	r1, #37024	; 0x90a0
   12af0:	movt	r1, #3
   12af4:	bl	1117c <strcmp@plt>
   12af8:	clz	r1, r0
   12afc:	cmp	r0, #0
   12b00:	lsr	r1, r1, #5
   12b04:	add	r5, r5, r1, lsl #2
   12b08:	str	r5, [r6]
   12b0c:	beq	13098 <__assert_fail@plt+0x1c64>
   12b10:	ldr	r0, [r5]
   12b14:	cmp	r0, #0
   12b18:	beq	12b40 <__assert_fail@plt+0x170c>
   12b1c:	movw	r1, #39728	; 0x9b30
   12b20:	movt	r1, #3
   12b24:	bl	1117c <strcmp@plt>
   12b28:	clz	r1, r0
   12b2c:	cmp	r0, #0
   12b30:	lsr	r1, r1, #5
   12b34:	add	r5, r5, r1, lsl #2
   12b38:	str	r5, [r6]
   12b3c:	beq	13480 <__assert_fail@plt+0x204c>
   12b40:	add	r0, r5, #4
   12b44:	str	r0, [r6]
   12b48:	mov	r0, #16
   12b4c:	ldr	r4, [r5]
   12b50:	bl	37a1c <__assert_fail@plt+0x265e8>
   12b54:	mov	r7, r0
   12b58:	mov	r0, #1
   12b5c:	str	r0, [r7]
   12b60:	mov	r0, r4
   12b64:	b	12b90 <__assert_fail@plt+0x175c>
   12b68:	cmp	r5, #0
   12b6c:	beq	1343c <__assert_fail@plt+0x2008>
   12b70:	add	r0, r7, #4
   12b74:	str	r0, [r6]
   12b78:	mov	r0, #16
   12b7c:	bl	37a1c <__assert_fail@plt+0x265e8>
   12b80:	mov	r7, r0
   12b84:	mov	r0, #1
   12b88:	str	r0, [r7]
   12b8c:	mov	r0, r5
   12b90:	bl	37f20 <__assert_fail@plt+0x26aec>
   12b94:	str	r0, [r7, #4]
   12b98:	b	131bc <__assert_fail@plt+0x1d88>
   12b9c:	mov	r0, r4
   12ba0:	bl	129d0 <__assert_fail@plt+0x159c>
   12ba4:	mov	r4, r0
   12ba8:	ldr	r0, [r0]
   12bac:	cmp	r0, #0
   12bb0:	beq	12c14 <__assert_fail@plt+0x17e0>
   12bb4:	cmp	r0, #1
   12bb8:	bne	1347c <__assert_fail@plt+0x2048>
   12bbc:	mov	r5, r4
   12bc0:	ldr	r6, [r5, #4]!
   12bc4:	b	12c3c <__assert_fail@plt+0x1808>
   12bc8:	mov	r0, r4
   12bcc:	bl	129d0 <__assert_fail@plt+0x159c>
   12bd0:	mov	r6, r0
   12bd4:	mov	r0, r4
   12bd8:	bl	129d0 <__assert_fail@plt+0x159c>
   12bdc:	mov	r5, r0
   12be0:	cmp	r4, #0
   12be4:	beq	12cf0 <__assert_fail@plt+0x18bc>
   12be8:	mov	r0, r6
   12bec:	mov	r1, r5
   12bf0:	bl	134c8 <__assert_fail@plt+0x2094>
   12bf4:	mov	r7, r0
   12bf8:	mov	r0, r6
   12bfc:	ldr	r1, [r0], #4
   12c00:	cmp	r1, #1
   12c04:	bne	13064 <__assert_fail@plt+0x1c30>
   12c08:	ldr	r0, [r0]
   12c0c:	bl	138e8 <__assert_fail@plt+0x24b4>
   12c10:	b	13068 <__assert_fail@plt+0x1c34>
   12c14:	add	r5, r4, #4
   12c18:	mov	r0, #0
   12c1c:	mov	r1, #10
   12c20:	mov	r2, r5
   12c24:	bl	21c0c <__assert_fail@plt+0x107d8>
   12c28:	mov	r6, r0
   12c2c:	mov	r0, r5
   12c30:	bl	157bc <__assert_fail@plt+0x4388>
   12c34:	mov	r0, #1
   12c38:	stm	r4, {r0, r6}
   12c3c:	mov	r0, r6
   12c40:	bl	23278 <__assert_fail@plt+0x11e44>
   12c44:	mov	r6, r0
   12c48:	mov	r0, #16
   12c4c:	bl	37a1c <__assert_fail@plt+0x265e8>
   12c50:	mov	r1, #0
   12c54:	mov	r7, r0
   12c58:	str	r1, [r0], #4
   12c5c:	mov	r1, r6
   12c60:	bl	15b88 <__assert_fail@plt+0x4754>
   12c64:	ldr	r0, [r4]
   12c68:	cmp	r0, #1
   12c6c:	bne	131ac <__assert_fail@plt+0x1d78>
   12c70:	ldr	r0, [r5]
   12c74:	bl	138e8 <__assert_fail@plt+0x24b4>
   12c78:	b	131b4 <__assert_fail@plt+0x1d80>
   12c7c:	mov	r0, r4
   12c80:	bl	129d0 <__assert_fail@plt+0x159c>
   12c84:	mov	r8, r0
   12c88:	mov	r0, r4
   12c8c:	bl	129d0 <__assert_fail@plt+0x159c>
   12c90:	mov	r4, r0
   12c94:	ldr	r0, [r8]
   12c98:	cmp	r0, #1
   12c9c:	beq	12cd0 <__assert_fail@plt+0x189c>
   12ca0:	cmp	r0, #0
   12ca4:	bne	1347c <__assert_fail@plt+0x2048>
   12ca8:	add	r6, r8, #4
   12cac:	mov	r0, #0
   12cb0:	mov	r1, #10
   12cb4:	mov	r2, r6
   12cb8:	bl	21c0c <__assert_fail@plt+0x107d8>
   12cbc:	mov	r7, r0
   12cc0:	mov	r0, r6
   12cc4:	bl	157bc <__assert_fail@plt+0x4388>
   12cc8:	mov	r0, #1
   12ccc:	stm	r8, {r0, r7}
   12cd0:	ldr	r0, [r4]
   12cd4:	cmp	r0, #0
   12cd8:	beq	12e8c <__assert_fail@plt+0x1a58>
   12cdc:	cmp	r0, #1
   12ce0:	bne	1347c <__assert_fail@plt+0x2048>
   12ce4:	mov	r9, r4
   12ce8:	ldr	r7, [r9, #4]!
   12cec:	b	12eb4 <__assert_fail@plt+0x1a80>
   12cf0:	mov	r7, r6
   12cf4:	b	13070 <__assert_fail@plt+0x1c3c>
   12cf8:	mov	r0, r4
   12cfc:	bl	129d0 <__assert_fail@plt+0x159c>
   12d00:	mov	r6, r0
   12d04:	mov	r0, r4
   12d08:	bl	129d0 <__assert_fail@plt+0x159c>
   12d0c:	mov	r8, r0
   12d10:	mov	r0, r4
   12d14:	bl	129d0 <__assert_fail@plt+0x159c>
   12d18:	mov	sl, r0
   12d1c:	ldr	r0, [r6]
   12d20:	cmp	r0, #1
   12d24:	beq	12d58 <__assert_fail@plt+0x1924>
   12d28:	cmp	r0, #0
   12d2c:	bne	1347c <__assert_fail@plt+0x2048>
   12d30:	add	r4, r6, #4
   12d34:	mov	r0, #0
   12d38:	mov	r1, #10
   12d3c:	mov	r2, r4
   12d40:	bl	21c0c <__assert_fail@plt+0x107d8>
   12d44:	mov	r5, r0
   12d48:	mov	r0, r4
   12d4c:	bl	157bc <__assert_fail@plt+0x4388>
   12d50:	mov	r0, #1
   12d54:	stm	r6, {r0, r5}
   12d58:	ldr	r0, [r8]
   12d5c:	cmp	r0, #0
   12d60:	beq	12dd0 <__assert_fail@plt+0x199c>
   12d64:	cmp	r0, #1
   12d68:	bne	1347c <__assert_fail@plt+0x2048>
   12d6c:	mov	r0, r8
   12d70:	mvn	r2, #47	; 0x2f
   12d74:	ldr	r4, [r0, #4]!
   12d78:	ldrb	r1, [r4]
   12d7c:	sub	r1, r1, #45	; 0x2d
   12d80:	clz	r1, r1
   12d84:	lsr	r1, r1, #5
   12d88:	ldrb	r3, [r4, r1]
   12d8c:	add	r1, r1, #1
   12d90:	uxtab	r3, r2, r3
   12d94:	cmp	r3, #9
   12d98:	bhi	13118 <__assert_fail@plt+0x1ce4>
   12d9c:	ldrb	r3, [r4, r1]
   12da0:	add	r1, r1, #1
   12da4:	cmp	r3, #0
   12da8:	bne	12d90 <__assert_fail@plt+0x195c>
   12dac:	mov	r1, r4
   12db0:	mov	r2, #10
   12db4:	bl	2262c <__assert_fail@plt+0x111f8>
   12db8:	cmp	r0, #0
   12dbc:	bne	134b0 <__assert_fail@plt+0x207c>
   12dc0:	mov	r0, r4
   12dc4:	bl	138e8 <__assert_fail@plt+0x24b4>
   12dc8:	mov	r0, #0
   12dcc:	str	r0, [r8]
   12dd0:	ldr	r0, [sl]
   12dd4:	cmp	r0, #0
   12dd8:	beq	12e48 <__assert_fail@plt+0x1a14>
   12ddc:	cmp	r0, #1
   12de0:	bne	1347c <__assert_fail@plt+0x2048>
   12de4:	mov	r0, sl
   12de8:	mvn	r2, #47	; 0x2f
   12dec:	ldr	r4, [r0, #4]!
   12df0:	ldrb	r1, [r4]
   12df4:	sub	r1, r1, #45	; 0x2d
   12df8:	clz	r1, r1
   12dfc:	lsr	r1, r1, #5
   12e00:	ldrb	r3, [r4, r1]
   12e04:	add	r1, r1, #1
   12e08:	uxtab	r3, r2, r3
   12e0c:	cmp	r3, #9
   12e10:	bhi	13118 <__assert_fail@plt+0x1ce4>
   12e14:	ldrb	r3, [r4, r1]
   12e18:	add	r1, r1, #1
   12e1c:	cmp	r3, #0
   12e20:	bne	12e08 <__assert_fail@plt+0x19d4>
   12e24:	mov	r1, r4
   12e28:	mov	r2, #10
   12e2c:	bl	2262c <__assert_fail@plt+0x111f8>
   12e30:	cmp	r0, #0
   12e34:	bne	134b0 <__assert_fail@plt+0x207c>
   12e38:	mov	r0, r4
   12e3c:	bl	138e8 <__assert_fail@plt+0x24b4>
   12e40:	mov	r0, #0
   12e44:	str	r0, [sl]
   12e48:	add	r5, r8, #4
   12e4c:	mov	r0, r5
   12e50:	bl	169c8 <__assert_fail@plt+0x5594>
   12e54:	mvn	r4, #0
   12e58:	cmp	r0, #0
   12e5c:	mvn	r7, #0
   12e60:	bmi	131cc <__assert_fail@plt+0x1d98>
   12e64:	mov	r0, r5
   12e68:	bl	15f00 <__assert_fail@plt+0x4acc>
   12e6c:	cmp	r0, #0
   12e70:	beq	131c8 <__assert_fail@plt+0x1d94>
   12e74:	mov	r0, r5
   12e78:	bl	160f4 <__assert_fail@plt+0x4cc0>
   12e7c:	cmn	r0, #1
   12e80:	mov	r7, r0
   12e84:	mvneq	r7, #1
   12e88:	b	131cc <__assert_fail@plt+0x1d98>
   12e8c:	add	r9, r4, #4
   12e90:	mov	r0, #0
   12e94:	mov	r1, #10
   12e98:	mov	r2, r9
   12e9c:	bl	21c0c <__assert_fail@plt+0x107d8>
   12ea0:	mov	r7, r0
   12ea4:	mov	r0, r9
   12ea8:	bl	157bc <__assert_fail@plt+0x4388>
   12eac:	mov	r0, #1
   12eb0:	stm	r4, {r0, r7}
   12eb4:	mov	r5, r8
   12eb8:	ldrb	r0, [r7]
   12ebc:	mov	sl, #0
   12ec0:	ldr	r6, [r5, #4]!
   12ec4:	cmp	r0, #0
   12ec8:	beq	13150 <__assert_fail@plt+0x1d1c>
   12ecc:	bl	1126c <__ctype_get_mb_cur_max@plt>
   12ed0:	cmp	r0, #2
   12ed4:	bcc	130fc <__assert_fail@plt+0x1cc8>
   12ed8:	mov	sl, #0
   12edc:	add	r0, sp, #76	; 0x4c
   12ee0:	str	r4, [sp, #8]
   12ee4:	str	r5, [sp, #4]
   12ee8:	str	r9, [sp, #12]
   12eec:	str	sl, [sp, #84]	; 0x54
   12ef0:	str	sl, [sp, #80]	; 0x50
   12ef4:	strb	sl, [sp, #88]	; 0x58
   12ef8:	strb	sl, [sp, #76]	; 0x4c
   12efc:	str	r6, [sp, #92]	; 0x5c
   12f00:	bl	2332c <__assert_fail@plt+0x11ef8>
   12f04:	ldrb	r0, [sp, #100]	; 0x64
   12f08:	cmp	r0, #0
   12f0c:	beq	12f1c <__assert_fail@plt+0x1ae8>
   12f10:	ldr	r0, [sp, #104]	; 0x68
   12f14:	cmp	r0, #0
   12f18:	beq	13144 <__assert_fail@plt+0x1d10>
   12f1c:	add	r4, sp, #20
   12f20:	mov	r9, #0
   12f24:	mov	r5, #0
   12f28:	mov	sl, #0
   12f2c:	add	r0, r4, #4
   12f30:	str	r0, [sp, #16]
   12f34:	ldr	r0, [sp, #96]	; 0x60
   12f38:	add	r5, r5, #1
   12f3c:	cmp	r0, #1
   12f40:	bne	12f64 <__assert_fail@plt+0x1b30>
   12f44:	ldr	r6, [sp, #92]	; 0x5c
   12f48:	mov	r0, r7
   12f4c:	ldrb	r1, [r6]
   12f50:	bl	2319c <__assert_fail@plt+0x11d68>
   12f54:	mov	r1, #1
   12f58:	cmp	r0, #0
   12f5c:	beq	13034 <__assert_fail@plt+0x1c00>
   12f60:	b	13140 <__assert_fail@plt+0x1d0c>
   12f64:	ldr	r0, [sp, #16]
   12f68:	strb	r9, [sp, #20]
   12f6c:	str	r7, [sp, #36]	; 0x24
   12f70:	str	r9, [r0]
   12f74:	str	r9, [r0, #4]
   12f78:	mov	r0, r4
   12f7c:	strb	r9, [sp, #32]
   12f80:	bl	2332c <__assert_fail@plt+0x11ef8>
   12f84:	ldr	r0, [sp, #48]	; 0x30
   12f88:	ldrb	r1, [sp, #44]	; 0x2c
   12f8c:	cmp	r0, #0
   12f90:	bne	12f9c <__assert_fail@plt+0x1b68>
   12f94:	cmp	r1, #0
   12f98:	bne	1302c <__assert_fail@plt+0x1bf8>
   12f9c:	clz	r1, r1
   12fa0:	lsr	r1, r1, #5
   12fa4:	tst	r1, #1
   12fa8:	bne	12fcc <__assert_fail@plt+0x1b98>
   12fac:	ldrb	r1, [sp, #100]	; 0x64
   12fb0:	cmp	r1, #0
   12fb4:	beq	12fcc <__assert_fail@plt+0x1b98>
   12fb8:	ldr	r1, [sp, #104]	; 0x68
   12fbc:	cmp	r0, r1
   12fc0:	beq	13140 <__assert_fail@plt+0x1d0c>
   12fc4:	ldr	r6, [sp, #40]	; 0x28
   12fc8:	b	12ff4 <__assert_fail@plt+0x1bc0>
   12fcc:	ldr	r6, [sp, #40]	; 0x28
   12fd0:	ldr	r0, [sp, #96]	; 0x60
   12fd4:	cmp	r6, r0
   12fd8:	bne	12ff4 <__assert_fail@plt+0x1bc0>
   12fdc:	ldr	r1, [sp, #92]	; 0x5c
   12fe0:	ldr	r0, [sp, #36]	; 0x24
   12fe4:	mov	r2, r6
   12fe8:	bl	11320 <bcmp@plt>
   12fec:	cmp	r0, #0
   12ff0:	beq	13140 <__assert_fail@plt+0x1d0c>
   12ff4:	strb	r9, [sp, #32]
   12ff8:	ldr	r0, [sp, #36]	; 0x24
   12ffc:	add	r0, r0, r6
   13000:	str	r0, [sp, #36]	; 0x24
   13004:	mov	r0, r4
   13008:	bl	2332c <__assert_fail@plt+0x11ef8>
   1300c:	ldrb	r2, [sp, #44]	; 0x2c
   13010:	clz	r0, r2
   13014:	lsr	r1, r0, #5
   13018:	ldr	r0, [sp, #48]	; 0x30
   1301c:	cmp	r0, #0
   13020:	bne	12fa4 <__assert_fail@plt+0x1b70>
   13024:	cmp	r2, #0
   13028:	beq	12fa4 <__assert_fail@plt+0x1b70>
   1302c:	ldr	r6, [sp, #92]	; 0x5c
   13030:	ldr	r1, [sp, #96]	; 0x60
   13034:	add	r0, r6, r1
   13038:	strb	sl, [sp, #88]	; 0x58
   1303c:	str	r0, [sp, #92]	; 0x5c
   13040:	add	r0, sp, #76	; 0x4c
   13044:	bl	2332c <__assert_fail@plt+0x11ef8>
   13048:	ldrb	r0, [sp, #100]	; 0x64
   1304c:	cmp	r0, #0
   13050:	beq	12f34 <__assert_fail@plt+0x1b00>
   13054:	ldr	r0, [sp, #104]	; 0x68
   13058:	cmp	r0, #0
   1305c:	bne	12f34 <__assert_fail@plt+0x1b00>
   13060:	b	13144 <__assert_fail@plt+0x1d10>
   13064:	bl	157bc <__assert_fail@plt+0x4388>
   13068:	mov	r0, r6
   1306c:	bl	138e8 <__assert_fail@plt+0x24b4>
   13070:	mov	r0, r5
   13074:	ldr	r1, [r0], #4
   13078:	cmp	r1, #1
   1307c:	bne	1308c <__assert_fail@plt+0x1c58>
   13080:	ldr	r0, [r0]
   13084:	bl	138e8 <__assert_fail@plt+0x24b4>
   13088:	b	13090 <__assert_fail@plt+0x1c5c>
   1308c:	bl	157bc <__assert_fail@plt+0x4388>
   13090:	mov	r0, r5
   13094:	b	131b8 <__assert_fail@plt+0x1d84>
   13098:	mov	r0, r4
   1309c:	bl	11ae0 <__assert_fail@plt+0x6ac>
   130a0:	ldr	r4, [r6]
   130a4:	mov	r7, r0
   130a8:	ldr	r0, [r4]
   130ac:	cmp	r0, #0
   130b0:	beq	134a4 <__assert_fail@plt+0x2070>
   130b4:	movw	r1, #39728	; 0x9b30
   130b8:	movt	r1, #3
   130bc:	bl	1117c <strcmp@plt>
   130c0:	clz	r1, r0
   130c4:	cmp	r0, #0
   130c8:	lsr	r1, r1, #5
   130cc:	add	r1, r4, r1, lsl #2
   130d0:	str	r1, [r6]
   130d4:	beq	131bc <__assert_fail@plt+0x1d88>
   130d8:	movw	r1, #37063	; 0x90c7
   130dc:	mov	r0, #0
   130e0:	mov	r2, #5
   130e4:	movt	r1, #3
   130e8:	bl	11218 <dcgettext@plt>
   130ec:	mov	r4, r0
   130f0:	ldr	r0, [r6]
   130f4:	ldr	r2, [r0]
   130f8:	b	1345c <__assert_fail@plt+0x2028>
   130fc:	mov	r0, r6
   13100:	mov	r1, r7
   13104:	bl	11188 <strcspn@plt>
   13108:	ldrb	sl, [r6, r0]
   1310c:	cmp	sl, #0
   13110:	addne	sl, r0, #1
   13114:	b	13150 <__assert_fail@plt+0x1d1c>
   13118:	mov	r0, #16
   1311c:	bl	37a1c <__assert_fail@plt+0x265e8>
   13120:	mov	r7, r0
   13124:	mov	r0, #1
   13128:	str	r0, [r7]
   1312c:	movw	r0, #36891	; 0x901b
   13130:	movt	r0, #3
   13134:	bl	37f20 <__assert_fail@plt+0x26aec>
   13138:	str	r0, [r7, #4]
   1313c:	b	133c4 <__assert_fail@plt+0x1f90>
   13140:	mov	sl, r5
   13144:	ldr	r9, [sp, #12]
   13148:	ldr	r5, [sp, #4]
   1314c:	ldr	r4, [sp, #8]
   13150:	mov	r0, #16
   13154:	bl	37a1c <__assert_fail@plt+0x265e8>
   13158:	mov	r1, #0
   1315c:	mov	r7, r0
   13160:	str	r1, [r0], #4
   13164:	mov	r1, sl
   13168:	bl	15b88 <__assert_fail@plt+0x4754>
   1316c:	ldr	r0, [r8]
   13170:	cmp	r0, #1
   13174:	bne	13184 <__assert_fail@plt+0x1d50>
   13178:	ldr	r0, [r5]
   1317c:	bl	138e8 <__assert_fail@plt+0x24b4>
   13180:	b	1318c <__assert_fail@plt+0x1d58>
   13184:	mov	r0, r5
   13188:	bl	157bc <__assert_fail@plt+0x4388>
   1318c:	mov	r0, r8
   13190:	bl	138e8 <__assert_fail@plt+0x24b4>
   13194:	ldr	r0, [r4]
   13198:	cmp	r0, #1
   1319c:	bne	131ac <__assert_fail@plt+0x1d78>
   131a0:	ldr	r0, [r9]
   131a4:	bl	138e8 <__assert_fail@plt+0x24b4>
   131a8:	b	131b4 <__assert_fail@plt+0x1d80>
   131ac:	add	r0, r4, #4
   131b0:	bl	157bc <__assert_fail@plt+0x4388>
   131b4:	mov	r0, r4
   131b8:	bl	138e8 <__assert_fail@plt+0x24b4>
   131bc:	mov	r0, r7
   131c0:	sub	sp, fp, #28
   131c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131c8:	mvn	r7, #1
   131cc:	add	r5, sl, #4
   131d0:	str	r8, [sp, #16]
   131d4:	mov	r0, r5
   131d8:	bl	169c8 <__assert_fail@plt+0x5594>
   131dc:	cmp	r0, #0
   131e0:	bmi	13210 <__assert_fail@plt+0x1ddc>
   131e4:	mov	r0, r5
   131e8:	bl	15f00 <__assert_fail@plt+0x4acc>
   131ec:	cmp	r0, #0
   131f0:	beq	1320c <__assert_fail@plt+0x1dd8>
   131f4:	mov	r0, r5
   131f8:	bl	160f4 <__assert_fail@plt+0x4cc0>
   131fc:	cmn	r0, #1
   13200:	mov	r4, r0
   13204:	mvneq	r4, #1
   13208:	b	13210 <__assert_fail@plt+0x1ddc>
   1320c:	mvn	r4, #1
   13210:	ldr	r8, [r6, #4]
   13214:	str	r6, [sp, #12]
   13218:	mov	r0, r8
   1321c:	bl	1132c <strlen@plt>
   13220:	mov	r6, r0
   13224:	bl	1126c <__ctype_get_mb_cur_max@plt>
   13228:	cmp	r0, #2
   1322c:	mov	r0, r6
   13230:	bcc	1323c <__assert_fail@plt+0x1e08>
   13234:	mov	r0, r8
   13238:	bl	23278 <__assert_fail@plt+0x11e44>
   1323c:	add	r1, r4, #1
   13240:	cmp	r1, #2
   13244:	bcc	13298 <__assert_fail@plt+0x1e64>
   13248:	sub	r1, r7, #1
   1324c:	cmp	r1, r0
   13250:	bcs	13298 <__assert_fail@plt+0x1e64>
   13254:	sub	r0, r0, r7
   13258:	add	r5, r0, #1
   1325c:	cmp	r5, r4
   13260:	movhi	r5, r4
   13264:	bl	1126c <__ctype_get_mb_cur_max@plt>
   13268:	cmp	r0, #1
   1326c:	bne	132ac <__assert_fail@plt+0x1e78>
   13270:	add	r0, r5, #1
   13274:	add	r4, r8, r7
   13278:	bl	37a1c <__assert_fail@plt+0x265e8>
   1327c:	sub	r1, r4, #1
   13280:	mov	r2, r5
   13284:	mvn	r3, #0
   13288:	mov	r9, r0
   1328c:	bl	11428 <__mempcpy_chk@plt>
   13290:	mov	r4, r0
   13294:	b	1338c <__assert_fail@plt+0x1f58>
   13298:	movw	r0, #36891	; 0x901b
   1329c:	movt	r0, #3
   132a0:	bl	37f20 <__assert_fail@plt+0x26aec>
   132a4:	mov	r9, r0
   132a8:	b	13394 <__assert_fail@plt+0x1f60>
   132ac:	add	r0, r6, #1
   132b0:	str	sl, [sp, #8]
   132b4:	bl	37a1c <__assert_fail@plt+0x265e8>
   132b8:	mov	r9, r0
   132bc:	mov	r0, #0
   132c0:	str	r0, [sp, #84]	; 0x54
   132c4:	str	r0, [sp, #80]	; 0x50
   132c8:	strb	r0, [sp, #88]	; 0x58
   132cc:	strb	r0, [sp, #76]	; 0x4c
   132d0:	add	r0, sp, #76	; 0x4c
   132d4:	str	r8, [sp, #92]	; 0x5c
   132d8:	bl	2332c <__assert_fail@plt+0x11ef8>
   132dc:	ldr	r0, [sp, #104]	; 0x68
   132e0:	mov	r4, r9
   132e4:	cmp	r0, #0
   132e8:	movwne	r0, #1
   132ec:	cmp	r5, #0
   132f0:	beq	13388 <__assert_fail@plt+0x1f54>
   132f4:	ldrb	r1, [sp, #100]	; 0x64
   132f8:	mov	r4, r9
   132fc:	clz	r1, r1
   13300:	lsr	r1, r1, #5
   13304:	orrs	r0, r1, r0
   13308:	beq	13388 <__assert_fail@plt+0x1f54>
   1330c:	mov	r6, #1
   13310:	mov	sl, #0
   13314:	add	r8, sp, #76	; 0x4c
   13318:	mov	r4, r9
   1331c:	cmp	r6, r7
   13320:	bcc	13340 <__assert_fail@plt+0x1f0c>
   13324:	ldr	r1, [sp, #92]	; 0x5c
   13328:	ldr	r2, [sp, #96]	; 0x60
   1332c:	mov	r0, r4
   13330:	mvn	r3, #0
   13334:	bl	11428 <__mempcpy_chk@plt>
   13338:	mov	r4, r0
   1333c:	sub	r5, r5, #1
   13340:	strb	sl, [sp, #88]	; 0x58
   13344:	ldr	r0, [sp, #92]	; 0x5c
   13348:	ldr	r1, [sp, #96]	; 0x60
   1334c:	add	r0, r0, r1
   13350:	str	r0, [sp, #92]	; 0x5c
   13354:	mov	r0, r8
   13358:	bl	2332c <__assert_fail@plt+0x11ef8>
   1335c:	ldr	r0, [sp, #104]	; 0x68
   13360:	cmp	r0, #0
   13364:	movwne	r0, #1
   13368:	cmp	r5, #0
   1336c:	beq	13388 <__assert_fail@plt+0x1f54>
   13370:	ldrb	r1, [sp, #100]	; 0x64
   13374:	add	r6, r6, #1
   13378:	clz	r1, r1
   1337c:	lsr	r1, r1, #5
   13380:	orrs	r0, r1, r0
   13384:	bne	1331c <__assert_fail@plt+0x1ee8>
   13388:	ldr	sl, [sp, #8]
   1338c:	mov	r0, #0
   13390:	strb	r0, [r4]
   13394:	ldr	r8, [sp, #16]
   13398:	ldr	r6, [sp, #12]
   1339c:	mov	r0, #16
   133a0:	bl	37a1c <__assert_fail@plt+0x265e8>
   133a4:	mov	r7, r0
   133a8:	mov	r0, #1
   133ac:	str	r0, [r7]
   133b0:	mov	r0, r9
   133b4:	bl	37f20 <__assert_fail@plt+0x26aec>
   133b8:	str	r0, [r7, #4]
   133bc:	mov	r0, r9
   133c0:	bl	138e8 <__assert_fail@plt+0x24b4>
   133c4:	mov	r0, r6
   133c8:	ldr	r1, [r0], #4
   133cc:	cmp	r1, #1
   133d0:	bne	133e0 <__assert_fail@plt+0x1fac>
   133d4:	ldr	r0, [r0]
   133d8:	bl	138e8 <__assert_fail@plt+0x24b4>
   133dc:	b	133e4 <__assert_fail@plt+0x1fb0>
   133e0:	bl	157bc <__assert_fail@plt+0x4388>
   133e4:	mov	r0, r6
   133e8:	bl	138e8 <__assert_fail@plt+0x24b4>
   133ec:	mov	r0, r8
   133f0:	ldr	r1, [r0], #4
   133f4:	cmp	r1, #1
   133f8:	bne	13408 <__assert_fail@plt+0x1fd4>
   133fc:	ldr	r0, [r0]
   13400:	bl	138e8 <__assert_fail@plt+0x24b4>
   13404:	b	1340c <__assert_fail@plt+0x1fd8>
   13408:	bl	157bc <__assert_fail@plt+0x4388>
   1340c:	mov	r0, r8
   13410:	bl	138e8 <__assert_fail@plt+0x24b4>
   13414:	mov	r0, sl
   13418:	ldr	r1, [r0], #4
   1341c:	cmp	r1, #1
   13420:	bne	13430 <__assert_fail@plt+0x1ffc>
   13424:	ldr	r0, [r0]
   13428:	bl	138e8 <__assert_fail@plt+0x24b4>
   1342c:	b	13434 <__assert_fail@plt+0x2000>
   13430:	bl	157bc <__assert_fail@plt+0x4388>
   13434:	mov	r0, sl
   13438:	b	131b8 <__assert_fail@plt+0x1d84>
   1343c:	movw	r1, #36984	; 0x9078
   13440:	movt	r1, #3
   13444:	mov	r0, #0
   13448:	mov	r2, #5
   1344c:	bl	11218 <dcgettext@plt>
   13450:	mov	r4, r0
   13454:	ldr	r0, [r6]
   13458:	ldr	r2, [r0, #-4]
   1345c:	mov	r0, #0
   13460:	mov	r1, #8
   13464:	bl	24bd4 <__assert_fail@plt+0x137a0>
   13468:	mov	r3, r0
   1346c:	mov	r0, #2
   13470:	mov	r1, #0
   13474:	mov	r2, r4
   13478:	bl	11290 <error@plt>
   1347c:	bl	1141c <abort@plt>
   13480:	movw	r1, #37105	; 0x90f1
   13484:	mov	r0, #0
   13488:	mov	r2, #5
   1348c:	movt	r1, #3
   13490:	bl	11218 <dcgettext@plt>
   13494:	mov	r2, r0
   13498:	mov	r0, #2
   1349c:	mov	r1, #0
   134a0:	bl	11290 <error@plt>
   134a4:	movw	r1, #37026	; 0x90a2
   134a8:	movt	r1, #3
   134ac:	b	13444 <__assert_fail@plt+0x2010>
   134b0:	movw	r2, #37248	; 0x9180
   134b4:	mov	r0, #3
   134b8:	mov	r1, #34	; 0x22
   134bc:	mov	r3, r4
   134c0:	movt	r2, #3
   134c4:	bl	11290 <error@plt>
   134c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   134cc:	add	fp, sp, #24
   134d0:	sub	sp, sp, #360	; 0x168
   134d4:	mov	r4, r0
   134d8:	ldr	r0, [r0]
   134dc:	mov	r5, r1
   134e0:	cmp	r0, #1
   134e4:	beq	13518 <__assert_fail@plt+0x20e4>
   134e8:	cmp	r0, #0
   134ec:	bne	1378c <__assert_fail@plt+0x2358>
   134f0:	add	r6, r4, #4
   134f4:	mov	r0, #0
   134f8:	mov	r1, #10
   134fc:	mov	r2, r6
   13500:	bl	21c0c <__assert_fail@plt+0x107d8>
   13504:	mov	r7, r0
   13508:	mov	r0, r6
   1350c:	bl	157bc <__assert_fail@plt+0x4388>
   13510:	mov	r0, #1
   13514:	stm	r4, {r0, r7}
   13518:	ldr	r0, [r5]
   1351c:	cmp	r0, #0
   13520:	beq	13534 <__assert_fail@plt+0x2100>
   13524:	cmp	r0, #1
   13528:	bne	1378c <__assert_fail@plt+0x2358>
   1352c:	ldr	r6, [r5, #4]
   13530:	b	1355c <__assert_fail@plt+0x2128>
   13534:	add	r7, r5, #4
   13538:	mov	r0, #0
   1353c:	mov	r1, #10
   13540:	mov	r2, r7
   13544:	bl	21c0c <__assert_fail@plt+0x107d8>
   13548:	mov	r6, r0
   1354c:	mov	r0, r7
   13550:	bl	157bc <__assert_fail@plt+0x4388>
   13554:	mov	r0, #1
   13558:	stm	r5, {r0, r6}
   1355c:	movw	r0, #45776	; 0xb2d0
   13560:	movw	r1, #710	; 0x2c6
   13564:	movt	r0, #4
   13568:	str	r1, [r0]
   1356c:	mov	r0, #0
   13570:	add	r1, sp, #16
   13574:	str	r0, [sp, #12]
   13578:	str	r0, [sp, #8]
   1357c:	str	r0, [fp, #-92]	; 0xffffffa4
   13580:	str	r1, [fp, #-96]	; 0xffffffa0
   13584:	str	r0, [fp, #-108]	; 0xffffff94
   13588:	str	r0, [sp, #4]
   1358c:	str	r0, [fp, #-112]	; 0xffffff90
   13590:	mov	r0, r6
   13594:	bl	1132c <strlen@plt>
   13598:	mov	r1, r0
   1359c:	sub	r2, fp, #112	; 0x70
   135a0:	mov	r0, r6
   135a4:	bl	252f0 <__assert_fail@plt+0x13ebc>
   135a8:	cmp	r0, #0
   135ac:	bne	13790 <__assert_fail@plt+0x235c>
   135b0:	ldrb	r0, [fp, #-84]	; 0xffffffac
   135b4:	and	r0, r0, #127	; 0x7f
   135b8:	strb	r0, [fp, #-84]	; 0xffffffac
   135bc:	ldr	r5, [r4, #4]
   135c0:	mov	r0, r5
   135c4:	bl	1132c <strlen@plt>
   135c8:	mov	r2, r0
   135cc:	add	r0, sp, #4
   135d0:	mov	r1, r5
   135d4:	mov	r3, #0
   135d8:	str	r0, [sp]
   135dc:	sub	r0, fp, #112	; 0x70
   135e0:	bl	29eb4 <__assert_fail@plt+0x18a80>
   135e4:	mov	r5, r0
   135e8:	cmp	r0, #0
   135ec:	bmi	13640 <__assert_fail@plt+0x220c>
   135f0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   135f4:	cmp	r0, #0
   135f8:	beq	13674 <__assert_fail@plt+0x2240>
   135fc:	ldr	r0, [sp, #12]
   13600:	ldr	r0, [r0, #4]
   13604:	cmn	r0, #1
   13608:	ble	13730 <__assert_fail@plt+0x22fc>
   1360c:	ldr	r1, [r4, #4]
   13610:	mov	r2, #0
   13614:	strb	r2, [r1, r0]
   13618:	ldr	r0, [sp, #8]
   1361c:	ldr	r5, [r4, #4]
   13620:	ldr	r6, [r0, #4]
   13624:	mov	r0, #16
   13628:	bl	37a1c <__assert_fail@plt+0x265e8>
   1362c:	mov	r4, r0
   13630:	mov	r0, #1
   13634:	str	r0, [r4]
   13638:	add	r0, r5, r6
   1363c:	b	1374c <__assert_fail@plt+0x2318>
   13640:	cmn	r5, #1
   13644:	bne	137a8 <__assert_fail@plt+0x2374>
   13648:	ldr	r5, [fp, #-88]	; 0xffffffa8
   1364c:	mov	r0, #16
   13650:	bl	37a1c <__assert_fail@plt+0x265e8>
   13654:	mov	r4, r0
   13658:	cmp	r5, #0
   1365c:	bne	1373c <__assert_fail@plt+0x2308>
   13660:	mov	r1, #0
   13664:	mov	r0, r4
   13668:	str	r1, [r0], #4
   1366c:	mov	r1, #0
   13670:	b	13728 <__assert_fail@plt+0x22f4>
   13674:	bl	1126c <__ctype_get_mb_cur_max@plt>
   13678:	cmp	r0, #1
   1367c:	mov	r6, r5
   13680:	beq	13710 <__assert_fail@plt+0x22dc>
   13684:	ldr	r7, [r4, #4]
   13688:	mov	r6, #0
   1368c:	sub	r0, fp, #80	; 0x50
   13690:	str	r6, [fp, #-72]	; 0xffffffb8
   13694:	str	r6, [fp, #-76]	; 0xffffffb4
   13698:	strb	r6, [fp, #-68]	; 0xffffffbc
   1369c:	strb	r6, [fp, #-80]	; 0xffffffb0
   136a0:	str	r7, [fp, #-64]	; 0xffffffc0
   136a4:	bl	2332c <__assert_fail@plt+0x11ef8>
   136a8:	ldrb	r0, [fp, #-56]	; 0xffffffc8
   136ac:	cmp	r0, #0
   136b0:	beq	136c0 <__assert_fail@plt+0x228c>
   136b4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   136b8:	cmp	r0, #0
   136bc:	beq	13710 <__assert_fail@plt+0x22dc>
   136c0:	mov	r8, #0
   136c4:	sub	r4, fp, #80	; 0x50
   136c8:	mov	r6, #0
   136cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   136d0:	sub	r1, r0, r7
   136d4:	cmp	r1, r5
   136d8:	addcc	r6, r6, #1
   136dc:	bcs	13710 <__assert_fail@plt+0x22dc>
   136e0:	strb	r8, [fp, #-68]	; 0xffffffbc
   136e4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   136e8:	add	r0, r0, r1
   136ec:	str	r0, [fp, #-64]	; 0xffffffc0
   136f0:	mov	r0, r4
   136f4:	bl	2332c <__assert_fail@plt+0x11ef8>
   136f8:	ldrb	r0, [fp, #-56]	; 0xffffffc8
   136fc:	cmp	r0, #0
   13700:	beq	136cc <__assert_fail@plt+0x2298>
   13704:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13708:	cmp	r0, #0
   1370c:	bne	136cc <__assert_fail@plt+0x2298>
   13710:	mov	r0, #16
   13714:	bl	37a1c <__assert_fail@plt+0x265e8>
   13718:	mov	r1, #0
   1371c:	mov	r4, r0
   13720:	str	r1, [r0], #4
   13724:	mov	r1, r6
   13728:	bl	15b88 <__assert_fail@plt+0x4754>
   1372c:	b	13754 <__assert_fail@plt+0x2320>
   13730:	mov	r0, #16
   13734:	bl	37a1c <__assert_fail@plt+0x265e8>
   13738:	mov	r4, r0
   1373c:	mov	r0, #1
   13740:	str	r0, [r4]
   13744:	movw	r0, #36891	; 0x901b
   13748:	movt	r0, #3
   1374c:	bl	37f20 <__assert_fail@plt+0x26aec>
   13750:	str	r0, [r4, #4]
   13754:	ldr	r0, [sp, #4]
   13758:	cmp	r0, #0
   1375c:	beq	13770 <__assert_fail@plt+0x233c>
   13760:	ldr	r0, [sp, #8]
   13764:	bl	138e8 <__assert_fail@plt+0x24b4>
   13768:	ldr	r0, [sp, #12]
   1376c:	bl	138e8 <__assert_fail@plt+0x24b4>
   13770:	mov	r0, #0
   13774:	str	r0, [fp, #-96]	; 0xffffffa0
   13778:	sub	r0, fp, #112	; 0x70
   1377c:	bl	26eb4 <__assert_fail@plt+0x15a80>
   13780:	mov	r0, r4
   13784:	sub	sp, fp, #24
   13788:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1378c:	bl	1141c <abort@plt>
   13790:	movw	r2, #37248	; 0x9180
   13794:	mov	r3, r0
   13798:	mov	r0, #2
   1379c:	mov	r1, #0
   137a0:	movt	r2, #3
   137a4:	bl	11290 <error@plt>
   137a8:	mov	r4, #75	; 0x4b
   137ac:	cmn	r5, #2
   137b0:	bne	137bc <__assert_fail@plt+0x2388>
   137b4:	bl	11344 <__errno_location@plt>
   137b8:	ldr	r4, [r0]
   137bc:	movw	r1, #37134	; 0x910e
   137c0:	mov	r0, #0
   137c4:	mov	r2, #5
   137c8:	movt	r1, #3
   137cc:	bl	11218 <dcgettext@plt>
   137d0:	mov	r2, r0
   137d4:	mov	r0, #3
   137d8:	mov	r1, r4
   137dc:	bl	11290 <error@plt>
   137e0:	movw	r1, #45460	; 0xb194
   137e4:	movt	r1, #4
   137e8:	str	r0, [r1]
   137ec:	bx	lr
   137f0:	movw	r1, #45464	; 0xb198
   137f4:	movt	r1, #4
   137f8:	strb	r0, [r1]
   137fc:	bx	lr
   13800:	push	{r4, r5, r6, sl, fp, lr}
   13804:	add	fp, sp, #16
   13808:	sub	sp, sp, #8
   1380c:	movw	r0, #45444	; 0xb184
   13810:	movt	r0, #4
   13814:	ldr	r0, [r0]
   13818:	bl	38074 <__assert_fail@plt+0x26c40>
   1381c:	cmp	r0, #0
   13820:	beq	13848 <__assert_fail@plt+0x2414>
   13824:	movw	r0, #45464	; 0xb198
   13828:	movt	r0, #4
   1382c:	ldrb	r0, [r0]
   13830:	cmp	r0, #0
   13834:	beq	13868 <__assert_fail@plt+0x2434>
   13838:	bl	11344 <__errno_location@plt>
   1383c:	ldr	r0, [r0]
   13840:	cmp	r0, #32
   13844:	bne	13868 <__assert_fail@plt+0x2434>
   13848:	movw	r0, #45440	; 0xb180
   1384c:	movt	r0, #4
   13850:	ldr	r0, [r0]
   13854:	bl	38074 <__assert_fail@plt+0x26c40>
   13858:	cmp	r0, #0
   1385c:	subeq	sp, fp, #16
   13860:	popeq	{r4, r5, r6, sl, fp, pc}
   13864:	b	138d8 <__assert_fail@plt+0x24a4>
   13868:	movw	r1, #37232	; 0x9170
   1386c:	mov	r0, #0
   13870:	mov	r2, #5
   13874:	movt	r1, #3
   13878:	bl	11218 <dcgettext@plt>
   1387c:	mov	r4, r0
   13880:	movw	r0, #45460	; 0xb194
   13884:	movt	r0, #4
   13888:	ldr	r6, [r0]
   1388c:	bl	11344 <__errno_location@plt>
   13890:	ldr	r5, [r0]
   13894:	cmp	r6, #0
   13898:	bne	138b4 <__assert_fail@plt+0x2480>
   1389c:	movw	r2, #37248	; 0x9180
   138a0:	mov	r0, #0
   138a4:	mov	r1, r5
   138a8:	mov	r3, r4
   138ac:	movt	r2, #3
   138b0:	b	138d4 <__assert_fail@plt+0x24a0>
   138b4:	mov	r0, r6
   138b8:	bl	24e1c <__assert_fail@plt+0x139e8>
   138bc:	movw	r2, #37244	; 0x917c
   138c0:	mov	r3, r0
   138c4:	str	r4, [sp]
   138c8:	mov	r0, #0
   138cc:	mov	r1, r5
   138d0:	movt	r2, #3
   138d4:	bl	11290 <error@plt>
   138d8:	movw	r0, #45344	; 0xb120
   138dc:	movt	r0, #4
   138e0:	ldr	r0, [r0]
   138e4:	bl	111dc <_exit@plt>
   138e8:	push	{r4, r5, r6, sl, fp, lr}
   138ec:	add	fp, sp, #16
   138f0:	mov	r4, r0
   138f4:	bl	11344 <__errno_location@plt>
   138f8:	ldr	r6, [r0]
   138fc:	mov	r5, r0
   13900:	mov	r0, r4
   13904:	bl	111c4 <free@plt>
   13908:	str	r6, [r5]
   1390c:	pop	{r4, r5, r6, sl, fp, pc}
   13910:	cmp	r0, #0
   13914:	beq	13928 <__assert_fail@plt+0x24f4>
   13918:	movw	r3, #45348	; 0xb124
   1391c:	movt	r3, #4
   13920:	ldr	r3, [r3]
   13924:	str	r3, [r0]
   13928:	cmp	r1, #0
   1392c:	beq	13940 <__assert_fail@plt+0x250c>
   13930:	movw	r0, #45352	; 0xb128
   13934:	movt	r0, #4
   13938:	ldr	r0, [r0]
   1393c:	str	r0, [r1]
   13940:	cmp	r2, #0
   13944:	bxeq	lr
   13948:	movw	r0, #45356	; 0xb12c
   1394c:	movt	r0, #4
   13950:	ldr	r0, [r0]
   13954:	str	r0, [r2]
   13958:	bx	lr
   1395c:	movw	r3, #14844	; 0x39fc
   13960:	cmp	r1, #0
   13964:	movt	r3, #1
   13968:	movne	r3, r1
   1396c:	movw	r1, #45352	; 0xb128
   13970:	cmp	r0, #0
   13974:	movt	r1, #4
   13978:	str	r3, [r1]
   1397c:	movw	r1, #14772	; 0x39b4
   13980:	movt	r1, #1
   13984:	movne	r1, r0
   13988:	movw	r0, #45348	; 0xb124
   1398c:	cmp	r2, #0
   13990:	movt	r0, #4
   13994:	str	r1, [r0]
   13998:	movw	r1, #45356	; 0xb12c
   1399c:	movw	r0, #14880	; 0x3a20
   139a0:	movt	r1, #4
   139a4:	movt	r0, #1
   139a8:	movne	r0, r2
   139ac:	str	r0, [r1]
   139b0:	bx	lr
   139b4:	push	{fp, lr}
   139b8:	mov	fp, sp
   139bc:	cmp	r0, #0
   139c0:	beq	139dc <__assert_fail@plt+0x25a8>
   139c4:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   139c8:	cmp	r0, #0
   139cc:	popne	{fp, pc}
   139d0:	movw	r0, #39986	; 0x9c32
   139d4:	movt	r0, #3
   139d8:	bl	1d324 <__assert_fail@plt+0xbef0>
   139dc:	movw	r0, #40769	; 0x9f41
   139e0:	movw	r1, #37260	; 0x918c
   139e4:	movw	r3, #39954	; 0x9c12
   139e8:	movw	r2, #291	; 0x123
   139ec:	movt	r0, #3
   139f0:	movt	r1, #3
   139f4:	movt	r3, #3
   139f8:	bl	11434 <__assert_fail@plt>
   139fc:	push	{fp, lr}
   13a00:	mov	fp, sp
   13a04:	mov	r1, r2
   13a08:	bl	38020 <__assert_fail@plt+0x26bec>
   13a0c:	cmp	r0, #0
   13a10:	popne	{fp, pc}
   13a14:	movw	r0, #40031	; 0x9c5f
   13a18:	movt	r0, #3
   13a1c:	bl	1d324 <__assert_fail@plt+0xbef0>
   13a20:	b	138e8 <__assert_fail@plt+0x24b4>
   13a24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a28:	add	fp, sp, #28
   13a2c:	sub	sp, sp, #8
   13a30:	cmp	r2, #1
   13a34:	blt	13b84 <__assert_fail@plt+0x2750>
   13a38:	mov	r3, #0
   13a3c:	cmp	r2, #4
   13a40:	bcc	13b18 <__assert_fail@plt+0x26e4>
   13a44:	add	r6, r1, r2, lsl #2
   13a48:	cmp	r6, r0
   13a4c:	addhi	r6, r0, r2, lsl #2
   13a50:	cmphi	r6, r1
   13a54:	bhi	13b18 <__assert_fail@plt+0x26e4>
   13a58:	bic	r3, r2, #3
   13a5c:	mov	r6, #1
   13a60:	str	r2, [sp]
   13a64:	mov	lr, #0
   13a68:	sub	r5, r3, #4
   13a6c:	add	r4, r6, r5, lsr #2
   13a70:	cmp	r5, #12
   13a74:	and	r2, r4, #3
   13a78:	str	r2, [sp, #4]
   13a7c:	bcc	13ae4 <__assert_fail@plt+0x26b0>
   13a80:	ldr	r2, [sp, #4]
   13a84:	mov	r5, #0
   13a88:	mov	lr, #0
   13a8c:	sub	r9, r4, r2
   13a90:	mov	r2, #48	; 0x30
   13a94:	add	r7, r1, r5
   13a98:	add	r4, r0, r5
   13a9c:	add	r5, r5, #64	; 0x40
   13aa0:	subs	r9, r9, #4
   13aa4:	add	lr, lr, #16
   13aa8:	mov	sl, r7
   13aac:	mov	r8, r4
   13ab0:	add	ip, r7, #16
   13ab4:	add	r6, r4, #16
   13ab8:	add	r7, r7, #32
   13abc:	vld1.32	{d16-d17}, [sl], r2
   13ac0:	vst1.32	{d16-d17}, [r8], r2
   13ac4:	vld1.32	{d16-d17}, [ip]
   13ac8:	vst1.32	{d16-d17}, [r6]
   13acc:	vld1.32	{d16-d17}, [r7]
   13ad0:	add	r7, r4, #32
   13ad4:	vst1.32	{d16-d17}, [r7]
   13ad8:	vld1.32	{d16-d17}, [sl]
   13adc:	vst1.32	{d16-d17}, [r8]
   13ae0:	bne	13a94 <__assert_fail@plt+0x2660>
   13ae4:	ldr	r2, [sp, #4]
   13ae8:	cmp	r2, #0
   13aec:	beq	13b0c <__assert_fail@plt+0x26d8>
   13af0:	add	r4, r1, lr, lsl #2
   13af4:	add	r6, r0, lr, lsl #2
   13af8:	rsb	r5, r2, #0
   13afc:	vld1.32	{d16-d17}, [r4]!
   13b00:	adds	r5, r5, #1
   13b04:	vst1.32	{d16-d17}, [r6]!
   13b08:	bcc	13afc <__assert_fail@plt+0x26c8>
   13b0c:	ldr	r2, [sp]
   13b10:	cmp	r3, r2
   13b14:	beq	13b84 <__assert_fail@plt+0x2750>
   13b18:	mvn	r7, r3
   13b1c:	ands	r5, r2, #3
   13b20:	add	r6, r7, r2
   13b24:	beq	13b3c <__assert_fail@plt+0x2708>
   13b28:	ldr	r7, [r1, r3, lsl #2]
   13b2c:	subs	r5, r5, #1
   13b30:	str	r7, [r0, r3, lsl #2]
   13b34:	add	r3, r3, #1
   13b38:	bne	13b28 <__assert_fail@plt+0x26f4>
   13b3c:	cmp	r6, #3
   13b40:	bcc	13b84 <__assert_fail@plt+0x2750>
   13b44:	sub	r2, r2, r3
   13b48:	lsl	r3, r3, #2
   13b4c:	add	r7, r1, #16
   13b50:	ldr	r6, [r1, r3]!
   13b54:	add	r5, r0, #16
   13b58:	subs	r2, r2, #4
   13b5c:	str	r6, [r0, r3]!
   13b60:	ldr	r6, [r1, #4]
   13b64:	str	r6, [r0, #4]
   13b68:	ldr	r6, [r1, #8]
   13b6c:	str	r6, [r0, #8]
   13b70:	ldr	r1, [r1, #12]
   13b74:	str	r1, [r0, #12]
   13b78:	mov	r1, r7
   13b7c:	mov	r0, r5
   13b80:	bne	13b4c <__assert_fail@plt+0x2718>
   13b84:	sub	sp, fp, #28
   13b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b90:	add	fp, sp, #24
   13b94:	cmp	r2, #1
   13b98:	blt	13c54 <__assert_fail@plt+0x2820>
   13b9c:	cmp	r2, #4
   13ba0:	bcc	13c38 <__assert_fail@plt+0x2804>
   13ba4:	add	r3, r1, r2, lsl #2
   13ba8:	cmp	r3, r0
   13bac:	addhi	r3, r0, r2, lsl #2
   13bb0:	cmphi	r3, r1
   13bb4:	bhi	13c38 <__assert_fail@plt+0x2804>
   13bb8:	bic	ip, r2, #3
   13bbc:	mov	r7, #1
   13bc0:	subs	r3, ip, #4
   13bc4:	add	r3, r7, r3, lsr #2
   13bc8:	and	lr, r3, #1
   13bcc:	beq	13c58 <__assert_fail@plt+0x2824>
   13bd0:	mvn	r8, #31
   13bd4:	sub	r4, r3, lr
   13bd8:	add	r3, r8, r2, lsl #2
   13bdc:	add	r6, r1, r3
   13be0:	add	r7, r0, r3
   13be4:	mvn	r3, #0
   13be8:	add	r5, r6, #16
   13bec:	sub	r3, r3, #8
   13bf0:	subs	r4, r4, #2
   13bf4:	vld1.32	{d16-d17}, [r5]
   13bf8:	add	r5, r7, #16
   13bfc:	vst1.32	{d16-d17}, [r5]
   13c00:	vld1.32	{d16-d17}, [r6], r8
   13c04:	vst1.32	{d16-d17}, [r7], r8
   13c08:	bne	13be8 <__assert_fail@plt+0x27b4>
   13c0c:	cmp	lr, #0
   13c10:	beq	13c30 <__assert_fail@plt+0x27fc>
   13c14:	add	r3, r3, r2
   13c18:	add	r7, r1, r3, lsl #2
   13c1c:	add	r3, r0, r3, lsl #2
   13c20:	sub	r7, r7, #12
   13c24:	sub	r3, r3, #12
   13c28:	vld1.32	{d16-d17}, [r7]
   13c2c:	vst1.32	{d16-d17}, [r3]
   13c30:	subs	r2, r2, ip
   13c34:	beq	13c54 <__assert_fail@plt+0x2820>
   13c38:	sub	r0, r0, #4
   13c3c:	sub	r1, r1, #4
   13c40:	ldr	r3, [r1, r2, lsl #2]
   13c44:	str	r3, [r0, r2, lsl #2]
   13c48:	sub	r2, r2, #1
   13c4c:	cmp	r2, #0
   13c50:	bgt	13c40 <__assert_fail@plt+0x280c>
   13c54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c58:	mvn	r3, #0
   13c5c:	cmp	lr, #0
   13c60:	bne	13c14 <__assert_fail@plt+0x27e0>
   13c64:	b	13c30 <__assert_fail@plt+0x27fc>
   13c68:	sub	ip, r1, #4
   13c6c:	sub	r0, r0, #4
   13c70:	cmp	r2, #1
   13c74:	movlt	r0, #0
   13c78:	bxlt	lr
   13c7c:	sub	r3, r2, #1
   13c80:	ldr	r1, [ip, r2, lsl #2]
   13c84:	ldr	r2, [r0, r2, lsl #2]
   13c88:	cmp	r2, r1
   13c8c:	mov	r2, r3
   13c90:	beq	13c70 <__assert_fail@plt+0x283c>
   13c94:	mvn	r0, #0
   13c98:	movwhi	r0, #1
   13c9c:	bx	lr
   13ca0:	sub	r0, r0, #4
   13ca4:	mov	r2, r1
   13ca8:	cmp	r1, #1
   13cac:	blt	13cc0 <__assert_fail@plt+0x288c>
   13cb0:	ldr	r3, [r0, r2, lsl #2]
   13cb4:	sub	r1, r2, #1
   13cb8:	cmp	r3, #0
   13cbc:	beq	13ca4 <__assert_fail@plt+0x2870>
   13cc0:	clz	r0, r2
   13cc4:	lsr	r0, r0, #5
   13cc8:	bx	lr
   13ccc:	cmp	r1, #1
   13cd0:	bxlt	lr
   13cd4:	push	{fp, lr}
   13cd8:	mov	fp, sp
   13cdc:	lsl	r2, r1, #2
   13ce0:	mov	r1, #0
   13ce4:	bl	11368 <memset@plt>
   13ce8:	pop	{fp, lr}
   13cec:	bx	lr
   13cf0:	push	{r4, r5, r6, r7, fp, lr}
   13cf4:	add	fp, sp, #16
   13cf8:	cmp	r2, #1
   13cfc:	blt	13d84 <__assert_fail@plt+0x2950>
   13d00:	and	ip, r2, #1
   13d04:	cmp	r2, #1
   13d08:	bne	13d1c <__assert_fail@plt+0x28e8>
   13d0c:	mov	r2, #0
   13d10:	cmp	ip, #0
   13d14:	bne	13d68 <__assert_fail@plt+0x2934>
   13d18:	b	13d7c <__assert_fail@plt+0x2948>
   13d1c:	sub	lr, r2, ip
   13d20:	add	r4, r0, #4
   13d24:	add	r5, r1, #4
   13d28:	mov	r6, #0
   13d2c:	mov	r2, #0
   13d30:	ldr	r7, [r5, #-4]
   13d34:	add	r2, r2, #2
   13d38:	adds	r3, r7, r3
   13d3c:	str	r3, [r4, #-4]
   13d40:	ldr	r3, [r5]
   13d44:	add	r5, r5, #8
   13d48:	adcs	r3, r3, #0
   13d4c:	str	r3, [r4]
   13d50:	adc	r3, r6, #0
   13d54:	add	r4, r4, #8
   13d58:	cmp	lr, r2
   13d5c:	bne	13d30 <__assert_fail@plt+0x28fc>
   13d60:	cmp	ip, #0
   13d64:	beq	13d7c <__assert_fail@plt+0x2948>
   13d68:	ldr	r1, [r1, r2, lsl #2]
   13d6c:	adds	r1, r1, r3
   13d70:	str	r1, [r0, r2, lsl #2]
   13d74:	mov	r0, #0
   13d78:	adc	r3, r0, #0
   13d7c:	mov	r0, r3
   13d80:	pop	{r4, r5, r6, r7, fp, pc}
   13d84:	movw	r0, #40586	; 0x9e8a
   13d88:	movw	r1, #37260	; 0x918c
   13d8c:	movw	r3, #37277	; 0x919d
   13d90:	movw	r2, #442	; 0x1ba
   13d94:	movt	r0, #3
   13d98:	movt	r1, #3
   13d9c:	movt	r3, #3
   13da0:	bl	11434 <__assert_fail@plt>
   13da4:	push	{r4, r5, r6, sl, fp, lr}
   13da8:	add	fp, sp, #16
   13dac:	cmp	r3, #1
   13db0:	blt	13dec <__assert_fail@plt+0x29b8>
   13db4:	mov	lr, #0
   13db8:	mov	ip, #0
   13dbc:	ldr	r5, [r1], #4
   13dc0:	ldr	r4, [r2], #4
   13dc4:	adds	r6, r5, ip
   13dc8:	adds	r4, r6, r4
   13dcc:	adc	r6, lr, #0
   13dd0:	adds	r5, r5, ip
   13dd4:	str	r4, [r0], #4
   13dd8:	adc	ip, r6, #0
   13ddc:	subs	r3, r3, #1
   13de0:	bne	13dbc <__assert_fail@plt+0x2988>
   13de4:	mov	r0, ip
   13de8:	pop	{r4, r5, r6, sl, fp, pc}
   13dec:	mov	ip, #0
   13df0:	mov	r0, ip
   13df4:	pop	{r4, r5, r6, sl, fp, pc}
   13df8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dfc:	add	fp, sp, #28
   13e00:	sub	sp, sp, #4
   13e04:	mov	r6, r0
   13e08:	ldr	r0, [fp, #8]
   13e0c:	cmp	r2, r0
   13e10:	blt	13f2c <__assert_fail@plt+0x2af8>
   13e14:	cmp	r0, #1
   13e18:	str	r1, [sp]
   13e1c:	blt	13e68 <__assert_fail@plt+0x2a34>
   13e20:	mov	r5, r1
   13e24:	mov	r8, #0
   13e28:	mov	r1, r6
   13e2c:	mov	r7, r0
   13e30:	mov	ip, #0
   13e34:	ldr	sl, [r5], #4
   13e38:	ldr	r9, [r3], #4
   13e3c:	adds	r4, sl, ip
   13e40:	adds	r9, r4, r9
   13e44:	adc	lr, r8, #0
   13e48:	adds	r4, sl, ip
   13e4c:	str	r9, [r6], #4
   13e50:	adc	ip, lr, #0
   13e54:	subs	r7, r7, #1
   13e58:	bne	13e34 <__assert_fail@plt+0x2a00>
   13e5c:	cmp	r2, r0
   13e60:	bgt	13e78 <__assert_fail@plt+0x2a44>
   13e64:	b	13f20 <__assert_fail@plt+0x2aec>
   13e68:	mov	r1, r6
   13e6c:	mov	ip, #0
   13e70:	cmp	r2, r0
   13e74:	ble	13f20 <__assert_fail@plt+0x2aec>
   13e78:	sub	r3, r2, r0
   13e7c:	mvn	r7, r0
   13e80:	and	lr, r3, #1
   13e84:	cmn	r7, r2
   13e88:	bne	13ea4 <__assert_fail@plt+0x2a70>
   13e8c:	mov	r8, r1
   13e90:	ldr	r1, [sp]
   13e94:	mov	r2, #0
   13e98:	cmp	lr, #0
   13e9c:	bne	13f04 <__assert_fail@plt+0x2ad0>
   13ea0:	b	13f20 <__assert_fail@plt+0x2aec>
   13ea4:	add	r7, r0, lr
   13ea8:	mov	r8, r1
   13eac:	mov	r6, #0
   13eb0:	sub	r2, r7, r2
   13eb4:	add	r7, r0, #1
   13eb8:	add	r4, r1, r7, lsl #2
   13ebc:	ldr	r1, [sp]
   13ec0:	add	r5, r1, r7, lsl #2
   13ec4:	mov	r7, #0
   13ec8:	ldr	r3, [r5, #-4]
   13ecc:	sub	r6, r6, #2
   13ed0:	adds	r3, r3, ip
   13ed4:	str	r3, [r4, #-4]
   13ed8:	ldr	r3, [r5]
   13edc:	add	r5, r5, #8
   13ee0:	adcs	r3, r3, #0
   13ee4:	str	r3, [r4]
   13ee8:	adc	ip, r7, #0
   13eec:	add	r4, r4, #8
   13ef0:	cmp	r2, r6
   13ef4:	bne	13ec8 <__assert_fail@plt+0x2a94>
   13ef8:	rsb	r2, r6, #0
   13efc:	cmp	lr, #0
   13f00:	beq	13f20 <__assert_fail@plt+0x2aec>
   13f04:	add	r1, r1, r0, lsl #2
   13f08:	add	r0, r8, r0, lsl #2
   13f0c:	ldr	r1, [r1, r2, lsl #2]
   13f10:	adds	r1, r1, ip
   13f14:	str	r1, [r0, r2, lsl #2]
   13f18:	mov	r0, #0
   13f1c:	adc	ip, r0, #0
   13f20:	mov	r0, ip
   13f24:	sub	sp, fp, #28
   13f28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f2c:	movw	r0, #37338	; 0x91da
   13f30:	movw	r1, #37260	; 0x918c
   13f34:	movw	r3, #37347	; 0x91e3
   13f38:	mov	r2, #480	; 0x1e0
   13f3c:	movt	r0, #3
   13f40:	movt	r1, #3
   13f44:	movt	r3, #3
   13f48:	bl	11434 <__assert_fail@plt>
   13f4c:	push	{r4, r5, r6, sl, fp, lr}
   13f50:	add	fp, sp, #16
   13f54:	cmp	r2, #1
   13f58:	blt	13fe8 <__assert_fail@plt+0x2bb4>
   13f5c:	and	ip, r2, #1
   13f60:	cmp	r2, #1
   13f64:	bne	13f78 <__assert_fail@plt+0x2b44>
   13f68:	mov	r2, #0
   13f6c:	cmp	ip, #0
   13f70:	bne	13fcc <__assert_fail@plt+0x2b98>
   13f74:	b	13fe0 <__assert_fail@plt+0x2bac>
   13f78:	sub	lr, r2, ip
   13f7c:	add	r4, r0, #4
   13f80:	add	r5, r1, #4
   13f84:	mov	r2, #0
   13f88:	ldr	r6, [r5, #-4]
   13f8c:	add	r2, r2, #2
   13f90:	subs	r3, r6, r3
   13f94:	str	r3, [r4, #-4]
   13f98:	mov	r3, #0
   13f9c:	movwcc	r3, #1
   13fa0:	ldr	r6, [r5]
   13fa4:	add	r5, r5, #8
   13fa8:	subs	r3, r6, r3
   13fac:	str	r3, [r4]
   13fb0:	mov	r3, #0
   13fb4:	movwcc	r3, #1
   13fb8:	add	r4, r4, #8
   13fbc:	cmp	lr, r2
   13fc0:	bne	13f88 <__assert_fail@plt+0x2b54>
   13fc4:	cmp	ip, #0
   13fc8:	beq	13fe0 <__assert_fail@plt+0x2bac>
   13fcc:	ldr	r1, [r1, r2, lsl #2]
   13fd0:	subs	r1, r1, r3
   13fd4:	mov	r3, #0
   13fd8:	movwcc	r3, #1
   13fdc:	str	r1, [r0, r2, lsl #2]
   13fe0:	mov	r0, r3
   13fe4:	pop	{r4, r5, r6, sl, fp, pc}
   13fe8:	movw	r0, #40586	; 0x9e8a
   13fec:	movw	r1, #37260	; 0x918c
   13ff0:	movw	r3, #37417	; 0x9229
   13ff4:	movw	r2, #493	; 0x1ed
   13ff8:	movt	r0, #3
   13ffc:	movt	r1, #3
   14000:	movt	r3, #3
   14004:	bl	11434 <__assert_fail@plt>
   14008:	push	{r4, r5, fp, lr}
   1400c:	add	fp, sp, #8
   14010:	mov	ip, #0
   14014:	cmp	r3, #1
   14018:	blt	1404c <__assert_fail@plt+0x2c18>
   1401c:	ldr	r4, [r2], #4
   14020:	ldr	lr, [r1], #4
   14024:	adds	r5, r4, ip
   14028:	cmp	lr, r5
   1402c:	mov	r5, #0
   14030:	movwcc	r5, #1
   14034:	adds	r4, r4, ip
   14038:	adc	ip, r5, #0
   1403c:	sub	r5, lr, r4
   14040:	subs	r3, r3, #1
   14044:	str	r5, [r0], #4
   14048:	bne	1401c <__assert_fail@plt+0x2be8>
   1404c:	mov	r0, ip
   14050:	pop	{r4, r5, fp, pc}
   14054:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14058:	add	fp, sp, #24
   1405c:	ldr	lr, [fp, #8]
   14060:	cmp	r2, lr
   14064:	blt	14160 <__assert_fail@plt+0x2d2c>
   14068:	mov	ip, #0
   1406c:	cmp	lr, #1
   14070:	blt	140b0 <__assert_fail@plt+0x2c7c>
   14074:	mov	r4, r1
   14078:	mov	r5, r0
   1407c:	mov	r6, lr
   14080:	ldr	r9, [r3], #4
   14084:	ldr	r8, [r4], #4
   14088:	adds	r7, r9, ip
   1408c:	cmp	r8, r7
   14090:	mov	r7, #0
   14094:	movwcc	r7, #1
   14098:	adds	r9, r9, ip
   1409c:	adc	ip, r7, #0
   140a0:	sub	r7, r8, r9
   140a4:	subs	r6, r6, #1
   140a8:	str	r7, [r5], #4
   140ac:	bne	14080 <__assert_fail@plt+0x2c4c>
   140b0:	cmp	r2, lr
   140b4:	ble	14158 <__assert_fail@plt+0x2d24>
   140b8:	sub	r3, r2, lr
   140bc:	mvn	r4, lr
   140c0:	and	r8, r3, #1
   140c4:	cmn	r4, r2
   140c8:	bne	140dc <__assert_fail@plt+0x2ca8>
   140cc:	mov	r2, #0
   140d0:	cmp	r8, #0
   140d4:	bne	1413c <__assert_fail@plt+0x2d08>
   140d8:	b	14158 <__assert_fail@plt+0x2d24>
   140dc:	add	r4, lr, r8
   140e0:	add	r5, lr, #1
   140e4:	sub	r2, r4, r2
   140e8:	add	r4, r0, r5, lsl #2
   140ec:	add	r6, r1, r5, lsl #2
   140f0:	mov	r5, #0
   140f4:	ldr	r7, [r6, #-4]
   140f8:	sub	r5, r5, #2
   140fc:	subs	r7, r7, ip
   14100:	mov	ip, #0
   14104:	str	r7, [r4, #-4]
   14108:	mov	r7, #0
   1410c:	movwcc	r7, #1
   14110:	ldr	r3, [r6]
   14114:	add	r6, r6, #8
   14118:	subs	r3, r3, r7
   1411c:	str	r3, [r4]
   14120:	movwcc	ip, #1
   14124:	add	r4, r4, #8
   14128:	cmp	r2, r5
   1412c:	bne	140f4 <__assert_fail@plt+0x2cc0>
   14130:	rsb	r2, r5, #0
   14134:	cmp	r8, #0
   14138:	beq	14158 <__assert_fail@plt+0x2d24>
   1413c:	add	r1, r1, lr, lsl #2
   14140:	add	r0, r0, lr, lsl #2
   14144:	ldr	r1, [r1, r2, lsl #2]
   14148:	subs	r1, r1, ip
   1414c:	mov	ip, #0
   14150:	movwcc	ip, #1
   14154:	str	r1, [r0, r2, lsl #2]
   14158:	mov	r0, ip
   1415c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14160:	movw	r0, #37338	; 0x91da
   14164:	movw	r1, #37260	; 0x918c
   14168:	movw	r3, #37478	; 0x9266
   1416c:	mov	r2, #532	; 0x214
   14170:	movt	r0, #3
   14174:	movt	r1, #3
   14178:	movt	r3, #3
   1417c:	bl	11434 <__assert_fail@plt>
   14180:	push	{r4, r5, r6, r7, fp, lr}
   14184:	add	fp, sp, #16
   14188:	cmp	r2, #1
   1418c:	blt	141e8 <__assert_fail@plt+0x2db4>
   14190:	uxth	lr, r3
   14194:	lsr	ip, r3, #16
   14198:	mov	r3, #0
   1419c:	ldr	r4, [r1], #4
   141a0:	uxth	r5, r4
   141a4:	lsr	r4, r4, #16
   141a8:	mul	r7, r4, lr
   141ac:	mul	r6, r5, ip
   141b0:	mul	r5, r5, lr
   141b4:	mla	r6, r4, lr, r6
   141b8:	mul	r4, r4, ip
   141bc:	add	r6, r6, r5, lsr #16
   141c0:	pkhbt	r5, r5, r6, lsl #16
   141c4:	cmp	r6, r7
   141c8:	addcc	r4, r4, #65536	; 0x10000
   141cc:	adds	r5, r5, r3
   141d0:	adc	r3, r4, r6, lsr #16
   141d4:	str	r5, [r0], #4
   141d8:	subs	r2, r2, #1
   141dc:	bne	1419c <__assert_fail@plt+0x2d68>
   141e0:	mov	r0, r3
   141e4:	pop	{r4, r5, r6, r7, fp, pc}
   141e8:	movw	r0, #37817	; 0x93b9
   141ec:	movw	r1, #37260	; 0x918c
   141f0:	movw	r3, #37548	; 0x92ac
   141f4:	movw	r2, #545	; 0x221
   141f8:	movt	r0, #3
   141fc:	movt	r1, #3
   14200:	movt	r3, #3
   14204:	bl	11434 <__assert_fail@plt>
   14208:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1420c:	add	fp, sp, #24
   14210:	cmp	r2, #1
   14214:	blt	14284 <__assert_fail@plt+0x2e50>
   14218:	uxth	lr, r3
   1421c:	lsr	ip, r3, #16
   14220:	mov	r8, #0
   14224:	mov	r3, #0
   14228:	ldr	r5, [r1], #4
   1422c:	uxth	r6, r5
   14230:	lsr	r5, r5, #16
   14234:	mul	r4, r5, lr
   14238:	mul	r7, r6, ip
   1423c:	mul	r6, r6, lr
   14240:	mla	r7, r5, lr, r7
   14244:	mul	r5, r5, ip
   14248:	add	r7, r7, r6, lsr #16
   1424c:	cmp	r7, r4
   14250:	addcc	r5, r5, #65536	; 0x10000
   14254:	add	r4, r5, r7, lsr #16
   14258:	pkhbt	r5, r6, r7, lsl #16
   1425c:	ldr	r6, [r0]
   14260:	adds	r3, r5, r3
   14264:	adc	r5, r8, #0
   14268:	adds	r6, r3, r6
   1426c:	adc	r3, r4, r5
   14270:	str	r6, [r0], #4
   14274:	subs	r2, r2, #1
   14278:	bne	14228 <__assert_fail@plt+0x2df4>
   1427c:	mov	r0, r3
   14280:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14284:	movw	r0, #37817	; 0x93b9
   14288:	movw	r1, #37260	; 0x918c
   1428c:	movw	r3, #37609	; 0x92e9
   14290:	mov	r2, #568	; 0x238
   14294:	movt	r0, #3
   14298:	movt	r1, #3
   1429c:	movt	r3, #3
   142a0:	bl	11434 <__assert_fail@plt>
   142a4:	push	{r4, r5, r6, r7, fp, lr}
   142a8:	add	fp, sp, #16
   142ac:	cmp	r2, #1
   142b0:	blt	14324 <__assert_fail@plt+0x2ef0>
   142b4:	uxth	lr, r3
   142b8:	lsr	ip, r3, #16
   142bc:	mov	r3, #0
   142c0:	ldr	r4, [r1], #4
   142c4:	uxth	r5, r4
   142c8:	lsr	r4, r4, #16
   142cc:	mul	r7, r4, lr
   142d0:	mul	r6, r5, ip
   142d4:	mul	r5, r5, lr
   142d8:	mla	r6, r4, lr, r6
   142dc:	mul	r4, r4, ip
   142e0:	add	r6, r6, r5, lsr #16
   142e4:	pkhbt	r5, r5, r6, lsl #16
   142e8:	cmp	r6, r7
   142ec:	addcc	r4, r4, #65536	; 0x10000
   142f0:	adds	r5, r5, r3
   142f4:	add	r3, r4, r6, lsr #16
   142f8:	adc	r7, r4, r6, lsr #16
   142fc:	ldr	r4, [r0]
   14300:	adc	r3, r3, #1
   14304:	cmp	r4, r5
   14308:	sub	r4, r4, r5
   1430c:	movcs	r3, r7
   14310:	str	r4, [r0], #4
   14314:	subs	r2, r2, #1
   14318:	bne	142c0 <__assert_fail@plt+0x2e8c>
   1431c:	mov	r0, r3
   14320:	pop	{r4, r5, r6, r7, fp, pc}
   14324:	movw	r0, #37817	; 0x93b9
   14328:	movw	r1, #37260	; 0x918c
   1432c:	movw	r3, #37673	; 0x9329
   14330:	movw	r2, #594	; 0x252
   14334:	movt	r0, #3
   14338:	movt	r1, #3
   1433c:	movt	r3, #3
   14340:	bl	11434 <__assert_fail@plt>
   14344:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14348:	add	fp, sp, #28
   1434c:	sub	sp, sp, #12
   14350:	ldr	lr, [fp, #8]
   14354:	cmp	r2, lr
   14358:	blt	144ac <__assert_fail@plt+0x3078>
   1435c:	cmp	lr, #0
   14360:	ble	144c4 <__assert_fail@plt+0x3090>
   14364:	add	r7, lr, r2
   14368:	add	r6, r1, r2, lsl #2
   1436c:	add	r7, r0, r7, lsl #2
   14370:	cmp	r6, r0
   14374:	cmphi	r7, r1
   14378:	bhi	144dc <__assert_fail@plt+0x30a8>
   1437c:	add	r6, r3, lr, lsl #2
   14380:	cmp	r6, r0
   14384:	cmphi	r7, r3
   14388:	bhi	144f4 <__assert_fail@plt+0x30c0>
   1438c:	cmp	r2, #1
   14390:	blt	14514 <__assert_fail@plt+0x30e0>
   14394:	ldr	r7, [r3]
   14398:	mov	r6, #0
   1439c:	mov	ip, #0
   143a0:	uxth	r9, r7
   143a4:	lsr	r8, r7, #16
   143a8:	ldr	r7, [r1, r6, lsl #2]
   143ac:	uxth	r4, r7
   143b0:	lsr	r7, r7, #16
   143b4:	mul	sl, r7, r9
   143b8:	mul	r5, r4, r8
   143bc:	mul	r4, r4, r9
   143c0:	mla	r5, r7, r9, r5
   143c4:	mul	r7, r7, r8
   143c8:	add	r5, r5, r4, lsr #16
   143cc:	pkhbt	r4, r4, r5, lsl #16
   143d0:	cmp	r5, sl
   143d4:	addcc	r7, r7, #65536	; 0x10000
   143d8:	adds	r4, r4, ip
   143dc:	str	r4, [r0, r6, lsl #2]
   143e0:	adc	ip, r7, r5, lsr #16
   143e4:	add	r6, r6, #1
   143e8:	cmp	r2, r6
   143ec:	bne	143a8 <__assert_fail@plt+0x2f74>
   143f0:	sub	r7, lr, #1
   143f4:	str	ip, [r0, r2, lsl #2]
   143f8:	cmp	r7, #1
   143fc:	blt	144a0 <__assert_fail@plt+0x306c>
   14400:	mov	r9, #0
   14404:	str	r7, [sp, #4]
   14408:	add	r7, r0, #4
   1440c:	mov	r5, #0
   14410:	mov	ip, #0
   14414:	str	r7, [sp]
   14418:	ldr	r7, [r3, #4]!
   1441c:	str	r3, [sp, #8]
   14420:	uxth	lr, r7
   14424:	lsr	sl, r7, #16
   14428:	ldr	r4, [r1, r5, lsl #2]
   1442c:	uxth	r6, r4
   14430:	lsr	r4, r4, #16
   14434:	mul	r7, r4, lr
   14438:	mul	r8, r6, sl
   1443c:	mul	r6, r6, lr
   14440:	mla	r3, r4, lr, r8
   14444:	mul	r4, r4, sl
   14448:	add	r3, r3, r6, lsr #16
   1444c:	pkhbt	r6, r6, r3, lsl #16
   14450:	adds	r8, r6, ip
   14454:	adc	ip, r9, #0
   14458:	cmp	r3, r7
   1445c:	add	r7, r0, r5, lsl #2
   14460:	add	r5, r5, #1
   14464:	addcc	r4, r4, #65536	; 0x10000
   14468:	ldr	r6, [r7, #4]
   1446c:	add	r3, r4, r3, lsr #16
   14470:	adds	r6, r8, r6
   14474:	adc	ip, r3, ip
   14478:	cmp	r2, r5
   1447c:	str	r6, [r7, #4]
   14480:	bne	14428 <__assert_fail@plt+0x2ff4>
   14484:	ldr	r7, [sp, #4]
   14488:	ldr	r0, [sp]
   1448c:	ldr	r3, [sp, #8]
   14490:	sub	r7, r7, #1
   14494:	str	ip, [r0, r2, lsl #2]
   14498:	cmp	r7, #0
   1449c:	bgt	14404 <__assert_fail@plt+0x2fd0>
   144a0:	mov	r0, ip
   144a4:	sub	sp, fp, #28
   144a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144ac:	movw	r0, #37737	; 0x9369
   144b0:	movw	r1, #37260	; 0x918c
   144b4:	movw	r3, #37746	; 0x9372
   144b8:	movw	r2, #618	; 0x26a
   144bc:	movt	r0, #3
   144c0:	b	14508 <__assert_fail@plt+0x30d4>
   144c4:	movw	r0, #37816	; 0x93b8
   144c8:	movw	r1, #37260	; 0x918c
   144cc:	movw	r3, #37746	; 0x9372
   144d0:	movw	r2, #619	; 0x26b
   144d4:	movt	r0, #3
   144d8:	b	14508 <__assert_fail@plt+0x30d4>
   144dc:	movw	r0, #37824	; 0x93c0
   144e0:	movw	r1, #37260	; 0x918c
   144e4:	movw	r3, #37746	; 0x9372
   144e8:	mov	r2, #620	; 0x26c
   144ec:	movt	r0, #3
   144f0:	b	14508 <__assert_fail@plt+0x30d4>
   144f4:	movw	r0, #37864	; 0x93e8
   144f8:	movw	r1, #37260	; 0x918c
   144fc:	movw	r3, #37746	; 0x9372
   14500:	movw	r2, #621	; 0x26d
   14504:	movt	r0, #3
   14508:	movt	r1, #3
   1450c:	movt	r3, #3
   14510:	bl	11434 <__assert_fail@plt>
   14514:	movw	r0, #37817	; 0x93b9
   14518:	movw	r1, #37260	; 0x918c
   1451c:	movw	r3, #37548	; 0x92ac
   14520:	movw	r2, #545	; 0x221
   14524:	movt	r0, #3
   14528:	movt	r1, #3
   1452c:	movt	r3, #3
   14530:	bl	11434 <__assert_fail@plt>
   14534:	push	{fp, lr}
   14538:	mov	fp, sp
   1453c:	sub	sp, sp, #8
   14540:	mov	ip, r2
   14544:	str	r3, [sp]
   14548:	mov	r2, r3
   1454c:	mov	r3, ip
   14550:	bl	14344 <__assert_fail@plt+0x2f10>
   14554:	mov	sp, fp
   14558:	pop	{fp, pc}
   1455c:	push	{fp, lr}
   14560:	mov	fp, sp
   14564:	sub	sp, sp, #8
   14568:	mov	r3, r1
   1456c:	str	r2, [sp]
   14570:	bl	14344 <__assert_fail@plt+0x2f10>
   14574:	mov	sp, fp
   14578:	pop	{fp, pc}
   1457c:	push	{r4, r5, r6, sl, fp, lr}
   14580:	add	fp, sp, #16
   14584:	cmp	r2, #0
   14588:	ble	14618 <__assert_fail@plt+0x31e4>
   1458c:	cmp	r3, #0
   14590:	beq	14630 <__assert_fail@plt+0x31fc>
   14594:	cmp	r3, #32
   14598:	bcs	14648 <__assert_fail@plt+0x3214>
   1459c:	add	r5, r1, r2, lsl #2
   145a0:	add	ip, r0, r2, lsl #2
   145a4:	rsb	lr, r3, #32
   145a8:	subs	r4, r2, #1
   145ac:	ldr	r0, [r5, #-4]!
   145b0:	lsl	r1, r0, r3
   145b4:	lsr	r0, r0, lr
   145b8:	beq	14610 <__assert_fail@plt+0x31dc>
   145bc:	tst	r2, #1
   145c0:	bne	145d8 <__assert_fail@plt+0x31a4>
   145c4:	ldr	r4, [r5, #-4]!
   145c8:	orr	r1, r1, r4, lsr lr
   145cc:	str	r1, [ip, #-4]!
   145d0:	lsl	r1, r4, r3
   145d4:	sub	r4, r2, #2
   145d8:	cmp	r2, #2
   145dc:	beq	14610 <__assert_fail@plt+0x31dc>
   145e0:	sub	r2, r5, #4
   145e4:	ldr	r5, [r2]
   145e8:	subs	r4, r4, #2
   145ec:	orr	r1, r1, r5, lsr lr
   145f0:	str	r1, [ip, #-4]
   145f4:	ldr	r6, [r2, #-4]
   145f8:	sub	r2, r2, #8
   145fc:	lsl	r1, r6, r3
   14600:	lsr	r6, r6, lr
   14604:	orr	r5, r6, r5, lsl r3
   14608:	str	r5, [ip, #-8]!
   1460c:	bne	145e4 <__assert_fail@plt+0x31b0>
   14610:	str	r1, [ip, #-4]
   14614:	pop	{r4, r5, r6, sl, fp, pc}
   14618:	movw	r0, #37817	; 0x93b9
   1461c:	movw	r1, #37260	; 0x918c
   14620:	movw	r3, #37904	; 0x9410
   14624:	movw	r2, #659	; 0x293
   14628:	movt	r0, #3
   1462c:	b	1465c <__assert_fail@plt+0x3228>
   14630:	movw	r0, #37969	; 0x9451
   14634:	movw	r1, #37260	; 0x918c
   14638:	movw	r3, #37904	; 0x9410
   1463c:	mov	r2, #660	; 0x294
   14640:	movt	r0, #3
   14644:	b	1465c <__assert_fail@plt+0x3228>
   14648:	movw	r0, #37978	; 0x945a
   1464c:	movw	r1, #37260	; 0x918c
   14650:	movw	r3, #37904	; 0x9410
   14654:	movw	r2, #661	; 0x295
   14658:	movt	r0, #3
   1465c:	movt	r1, #3
   14660:	movt	r3, #3
   14664:	bl	11434 <__assert_fail@plt>
   14668:	push	{r4, r5, r6, r7, fp, lr}
   1466c:	add	fp, sp, #16
   14670:	cmp	r2, #0
   14674:	ble	14704 <__assert_fail@plt+0x32d0>
   14678:	cmp	r3, #0
   1467c:	beq	1471c <__assert_fail@plt+0x32e8>
   14680:	cmp	r3, #32
   14684:	bcs	14734 <__assert_fail@plt+0x3300>
   14688:	ldr	r5, [r1]
   1468c:	rsb	r7, r3, #32
   14690:	lsr	lr, r5, r3
   14694:	lsl	ip, r5, r7
   14698:	subs	r5, r2, #1
   1469c:	beq	146f8 <__assert_fail@plt+0x32c4>
   146a0:	tst	r2, #1
   146a4:	bne	146bc <__assert_fail@plt+0x3288>
   146a8:	ldr	r6, [r1, #4]!
   146ac:	orr	r5, lr, r6, lsl r7
   146b0:	lsr	lr, r6, r3
   146b4:	str	r5, [r0], #4
   146b8:	sub	r5, r2, #2
   146bc:	cmp	r2, #2
   146c0:	beq	146f8 <__assert_fail@plt+0x32c4>
   146c4:	add	r1, r1, #4
   146c8:	ldr	r2, [r1]
   146cc:	subs	r5, r5, #2
   146d0:	orr	r6, lr, r2, lsl r7
   146d4:	str	r6, [r0]
   146d8:	ldr	r6, [r1, #4]
   146dc:	add	r1, r1, #8
   146e0:	lsl	r4, r6, r7
   146e4:	lsr	lr, r6, r3
   146e8:	orr	r2, r4, r2, lsr r3
   146ec:	str	r2, [r0, #4]
   146f0:	add	r0, r0, #8
   146f4:	bne	146c8 <__assert_fail@plt+0x3294>
   146f8:	str	lr, [r0]
   146fc:	mov	r0, ip
   14700:	pop	{r4, r5, r6, r7, fp, pc}
   14704:	movw	r0, #37817	; 0x93b9
   14708:	movw	r1, #37260	; 0x918c
   1470c:	movw	r3, #37998	; 0x946e
   14710:	movw	r2, #689	; 0x2b1
   14714:	movt	r0, #3
   14718:	b	14748 <__assert_fail@plt+0x3314>
   1471c:	movw	r0, #37969	; 0x9451
   14720:	movw	r1, #37260	; 0x918c
   14724:	movw	r3, #37998	; 0x946e
   14728:	movw	r2, #690	; 0x2b2
   1472c:	movt	r0, #3
   14730:	b	14748 <__assert_fail@plt+0x3314>
   14734:	movw	r0, #37978	; 0x945a
   14738:	movw	r1, #37260	; 0x918c
   1473c:	movw	r3, #37998	; 0x946e
   14740:	movw	r2, #691	; 0x2b3
   14744:	movt	r0, #3
   14748:	movt	r1, #3
   1474c:	movt	r3, #3
   14750:	bl	11434 <__assert_fail@plt>
   14754:	lsr	ip, r1, #5
   14758:	and	r1, r1, #31
   1475c:	mvn	r2, #0
   14760:	ldr	r3, [r0, ip, lsl #2]
   14764:	and	r1, r3, r2, lsl r1
   14768:	cmp	r1, #0
   1476c:	bne	1479c <__assert_fail@plt+0x3368>
   14770:	add	r0, r0, ip, lsl #2
   14774:	add	r3, r0, #4
   14778:	mov	r0, #0
   1477c:	cmp	r0, #1
   14780:	mvneq	r0, #0
   14784:	bxeq	lr
   14788:	ldr	r1, [r3, -r0, lsl #2]
   1478c:	sub	r0, r0, #1
   14790:	cmp	r1, #0
   14794:	beq	1477c <__assert_fail@plt+0x3348>
   14798:	sub	ip, ip, r0
   1479c:	rsb	r0, r1, #0
   147a0:	and	r1, r1, r0
   147a4:	mov	r0, #0
   147a8:	cmp	r0, r1, lsr #24
   147ac:	bne	147c4 <__assert_fail@plt+0x3390>
   147b0:	mov	r0, #0
   147b4:	lsl	r1, r1, #8
   147b8:	add	r0, r0, #8
   147bc:	cmp	r1, #16777216	; 0x1000000
   147c0:	bcc	147b4 <__assert_fail@plt+0x3380>
   147c4:	cmp	r1, #0
   147c8:	bmi	147dc <__assert_fail@plt+0x33a8>
   147cc:	lsl	r1, r1, #1
   147d0:	add	r0, r0, #1
   147d4:	cmn	r1, #1
   147d8:	bgt	147cc <__assert_fail@plt+0x3398>
   147dc:	mov	r1, #31
   147e0:	orr	r1, r1, ip, lsl #5
   147e4:	sub	r0, r1, r0
   147e8:	bx	lr
   147ec:	push	{r4, sl, fp, lr}
   147f0:	add	fp, sp, #8
   147f4:	ldr	ip, [fp, #8]
   147f8:	add	r4, ip, #1
   147fc:	cmp	r4, #2
   14800:	bcs	148c0 <__assert_fail@plt+0x348c>
   14804:	cmp	r1, #0
   14808:	bmi	148a8 <__assert_fail@plt+0x3474>
   1480c:	cmp	r1, r3
   14810:	bgt	148a8 <__assert_fail@plt+0x3474>
   14814:	cmp	r0, #0
   14818:	beq	14824 <__assert_fail@plt+0x33f0>
   1481c:	mov	r2, r1
   14820:	b	14848 <__assert_fail@plt+0x3414>
   14824:	sub	lr, r3, #1
   14828:	add	r4, r2, #4
   1482c:	cmp	lr, r1
   14830:	beq	14898 <__assert_fail@plt+0x3464>
   14834:	ldr	r0, [r4, r1, lsl #2]
   14838:	add	r2, r1, #1
   1483c:	mov	r1, r2
   14840:	eors	r0, r0, ip
   14844:	beq	1482c <__assert_fail@plt+0x33f8>
   14848:	rsb	r1, r0, #0
   1484c:	and	r1, r0, r1
   14850:	mov	r0, #0
   14854:	cmp	r0, r1, lsr #24
   14858:	bne	14870 <__assert_fail@plt+0x343c>
   1485c:	mov	r0, #0
   14860:	lsl	r1, r1, #8
   14864:	add	r0, r0, #8
   14868:	cmp	r1, #16777216	; 0x1000000
   1486c:	bcc	14860 <__assert_fail@plt+0x342c>
   14870:	cmp	r1, #0
   14874:	bmi	14888 <__assert_fail@plt+0x3454>
   14878:	lsl	r1, r1, #1
   1487c:	add	r0, r0, #1
   14880:	cmn	r1, #1
   14884:	bgt	14878 <__assert_fail@plt+0x3444>
   14888:	mov	r1, #31
   1488c:	orr	r1, r1, r2, lsl #5
   14890:	sub	r0, r1, r0
   14894:	pop	{r4, sl, fp, pc}
   14898:	cmp	ip, #0
   1489c:	lsl	r0, r3, #5
   148a0:	mvneq	r0, #0
   148a4:	pop	{r4, sl, fp, pc}
   148a8:	movw	r0, #40191	; 0x9cff
   148ac:	movw	r1, #37260	; 0x918c
   148b0:	movw	r3, #40108	; 0x9cac
   148b4:	mov	r2, #716	; 0x2cc
   148b8:	movt	r0, #3
   148bc:	b	148d4 <__assert_fail@plt+0x34a0>
   148c0:	movw	r0, #40078	; 0x9c8e
   148c4:	movw	r1, #37260	; 0x918c
   148c8:	movw	r3, #40108	; 0x9cac
   148cc:	movw	r2, #715	; 0x2cb
   148d0:	movt	r0, #3
   148d4:	movt	r1, #3
   148d8:	movt	r3, #3
   148dc:	bl	11434 <__assert_fail@plt>
   148e0:	push	{fp, lr}
   148e4:	mov	fp, sp
   148e8:	lsr	ip, r1, #5
   148ec:	and	r3, r1, #31
   148f0:	ldr	r2, [r0, ip, lsl #2]
   148f4:	mvn	lr, r2
   148f8:	mvn	r2, #0
   148fc:	and	r3, lr, r2, lsl r3
   14900:	cmp	r3, #0
   14904:	bne	14934 <__assert_fail@plt+0x3500>
   14908:	add	r0, r0, ip, lsl #2
   1490c:	add	r3, r0, #4
   14910:	mov	r0, #0
   14914:	cmp	r0, #1
   14918:	beq	14984 <__assert_fail@plt+0x3550>
   1491c:	ldr	r2, [r3, -r0, lsl #2]
   14920:	sub	r0, r0, #1
   14924:	cmn	r2, #1
   14928:	beq	14914 <__assert_fail@plt+0x34e0>
   1492c:	sub	ip, ip, r0
   14930:	mvn	r3, r2
   14934:	rsb	r0, r3, #0
   14938:	and	r1, r3, r0
   1493c:	mov	r0, #0
   14940:	cmp	r0, r1, lsr #24
   14944:	bne	1495c <__assert_fail@plt+0x3528>
   14948:	mov	r0, #0
   1494c:	lsl	r1, r1, #8
   14950:	add	r0, r0, #8
   14954:	cmp	r1, #16777216	; 0x1000000
   14958:	bcc	1494c <__assert_fail@plt+0x3518>
   1495c:	cmp	r1, #0
   14960:	bmi	14974 <__assert_fail@plt+0x3540>
   14964:	lsl	r1, r1, #1
   14968:	add	r0, r0, #1
   1496c:	cmn	r1, #1
   14970:	bgt	14964 <__assert_fail@plt+0x3530>
   14974:	mov	r1, #31
   14978:	orr	r1, r1, ip, lsl #5
   1497c:	sub	r0, r1, r0
   14980:	pop	{fp, pc}
   14984:	bic	r0, r1, #31
   14988:	pop	{fp, pc}
   1498c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14990:	add	fp, sp, #24
   14994:	cmp	r2, #1
   14998:	blt	14a54 <__assert_fail@plt+0x3620>
   1499c:	cmp	r2, #4
   149a0:	bcc	14a3c <__assert_fail@plt+0x3608>
   149a4:	add	r3, r1, r2, lsl #2
   149a8:	cmp	r3, r0
   149ac:	addhi	r3, r0, r2, lsl #2
   149b0:	cmphi	r3, r1
   149b4:	bhi	14a3c <__assert_fail@plt+0x3608>
   149b8:	bic	ip, r2, #3
   149bc:	mov	r7, #1
   149c0:	subs	r3, ip, #4
   149c4:	add	r3, r7, r3, lsr #2
   149c8:	and	lr, r3, #1
   149cc:	beq	14a58 <__assert_fail@plt+0x3624>
   149d0:	sub	r4, r3, lr
   149d4:	mov	r3, #0
   149d8:	mov	r8, #32
   149dc:	mov	r6, r0
   149e0:	mov	r7, r1
   149e4:	add	r9, r7, #16
   149e8:	vld1.32	{d16-d17}, [r7], r8
   149ec:	add	r5, r6, #16
   149f0:	subs	r4, r4, #2
   149f4:	add	r3, r3, #8
   149f8:	vmvn	q8, q8
   149fc:	vst1.32	{d16-d17}, [r6], r8
   14a00:	vld1.32	{d16-d17}, [r9]
   14a04:	vmvn	q8, q8
   14a08:	vst1.32	{d16-d17}, [r5]
   14a0c:	bne	149e4 <__assert_fail@plt+0x35b0>
   14a10:	cmp	lr, #0
   14a14:	beq	14a2c <__assert_fail@plt+0x35f8>
   14a18:	add	r7, r1, r3, lsl #2
   14a1c:	add	r3, r0, r3, lsl #2
   14a20:	vld1.32	{d16-d17}, [r7]
   14a24:	vmvn	q8, q8
   14a28:	vst1.32	{d16-d17}, [r3]
   14a2c:	subs	r2, r2, ip
   14a30:	beq	14a54 <__assert_fail@plt+0x3620>
   14a34:	add	r0, r0, ip, lsl #2
   14a38:	add	r1, r1, ip, lsl #2
   14a3c:	ldr	r3, [r1], #4
   14a40:	sub	r2, r2, #1
   14a44:	cmp	r2, #0
   14a48:	mvn	r3, r3
   14a4c:	str	r3, [r0], #4
   14a50:	bgt	14a3c <__assert_fail@plt+0x3608>
   14a54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14a58:	mov	r3, #0
   14a5c:	cmp	lr, #0
   14a60:	bne	14a18 <__assert_fail@plt+0x35e4>
   14a64:	b	14a2c <__assert_fail@plt+0x35f8>
   14a68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14a6c:	add	fp, sp, #24
   14a70:	ldr	r3, [r1]
   14a74:	cmp	r3, #0
   14a78:	bne	14abc <__assert_fail@plt+0x3688>
   14a7c:	mov	ip, #0
   14a80:	mov	r7, #0
   14a84:	mov	r6, #0
   14a88:	add	r3, r2, r6
   14a8c:	str	ip, [r0, -r6, lsl #2]
   14a90:	cmp	r3, #1
   14a94:	beq	14bb0 <__assert_fail@plt+0x377c>
   14a98:	sub	r3, r1, r6, lsl #2
   14a9c:	sub	r7, r7, #4
   14aa0:	sub	r6, r6, #1
   14aa4:	ldr	r3, [r3, #4]
   14aa8:	cmp	r3, #0
   14aac:	beq	14a88 <__assert_fail@plt+0x3654>
   14ab0:	sub	r0, r0, r7
   14ab4:	sub	r1, r1, r7
   14ab8:	add	r2, r2, r6
   14abc:	rsb	r3, r3, #0
   14ac0:	str	r3, [r0]
   14ac4:	sub	r3, r2, #1
   14ac8:	cmp	r3, #1
   14acc:	blt	14bac <__assert_fail@plt+0x3778>
   14ad0:	sub	lr, r2, #1
   14ad4:	cmp	lr, #4
   14ad8:	bcc	14b8c <__assert_fail@plt+0x3758>
   14adc:	add	r7, r1, r2, lsl #2
   14ae0:	add	r6, r0, #4
   14ae4:	cmp	r6, r7
   14ae8:	addcc	r2, r0, r2, lsl #2
   14aec:	addcc	r7, r1, #4
   14af0:	cmpcc	r7, r2
   14af4:	bcc	14b8c <__assert_fail@plt+0x3758>
   14af8:	bic	r8, lr, #3
   14afc:	mov	r7, #1
   14b00:	subs	r2, r8, #4
   14b04:	add	r2, r7, r2, lsr #2
   14b08:	and	ip, r2, #1
   14b0c:	beq	14bb8 <__assert_fail@plt+0x3784>
   14b10:	sub	r5, ip, r2
   14b14:	add	r6, r1, #20
   14b18:	add	r7, r0, #20
   14b1c:	mov	r4, #0
   14b20:	mov	r9, #32
   14b24:	sub	r2, r6, #16
   14b28:	adds	r5, r5, #2
   14b2c:	add	r4, r4, #8
   14b30:	vld1.32	{d16-d17}, [r2]
   14b34:	sub	r2, r7, #16
   14b38:	vmvn	q8, q8
   14b3c:	vst1.32	{d16-d17}, [r2]
   14b40:	vld1.32	{d16-d17}, [r6], r9
   14b44:	vmvn	q8, q8
   14b48:	vst1.32	{d16-d17}, [r7], r9
   14b4c:	bne	14b24 <__assert_fail@plt+0x36f0>
   14b50:	cmp	ip, #0
   14b54:	beq	14b74 <__assert_fail@plt+0x3740>
   14b58:	add	r2, r1, r4, lsl #2
   14b5c:	add	r2, r2, #4
   14b60:	vld1.32	{d16-d17}, [r2]
   14b64:	add	r2, r0, r4, lsl #2
   14b68:	add	r2, r2, #4
   14b6c:	vmvn	q8, q8
   14b70:	vst1.32	{d16-d17}, [r2]
   14b74:	mov	ip, #1
   14b78:	cmp	lr, r8
   14b7c:	beq	14bb0 <__assert_fail@plt+0x377c>
   14b80:	add	r0, r0, r8, lsl #2
   14b84:	add	r1, r1, r8, lsl #2
   14b88:	sub	r3, r3, r8
   14b8c:	add	r0, r0, #4
   14b90:	add	r1, r1, #4
   14b94:	ldr	r2, [r1], #4
   14b98:	sub	r3, r3, #1
   14b9c:	cmp	r3, #0
   14ba0:	mvn	r2, r2
   14ba4:	str	r2, [r0], #4
   14ba8:	bgt	14b94 <__assert_fail@plt+0x3760>
   14bac:	mov	ip, #1
   14bb0:	mov	r0, ip
   14bb4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14bb8:	mov	r4, #0
   14bbc:	cmp	ip, #0
   14bc0:	bne	14b58 <__assert_fail@plt+0x3724>
   14bc4:	b	14b74 <__assert_fail@plt+0x3740>
   14bc8:	push	{r4, r5, r6, r7, fp, lr}
   14bcc:	add	fp, sp, #16
   14bd0:	lsr	r3, r0, #16
   14bd4:	mvn	r4, r0
   14bd8:	uxth	r2, r0
   14bdc:	movw	ip, #65535	; 0xffff
   14be0:	udiv	r6, r4, r3
   14be4:	mul	lr, r6, r2
   14be8:	mls	r2, r6, r3, r4
   14bec:	orr	r3, ip, r2, lsl #16
   14bf0:	cmp	r3, lr
   14bf4:	bcs	14c20 <__assert_fail@plt+0x37ec>
   14bf8:	add	r3, r3, r0
   14bfc:	sub	r4, r6, #1
   14c00:	cmp	r3, r0
   14c04:	bcc	14c1c <__assert_fail@plt+0x37e8>
   14c08:	cmp	r3, lr
   14c0c:	subcc	r6, r6, #2
   14c10:	addcc	r3, r3, r0
   14c14:	movcs	r6, r4
   14c18:	b	14c20 <__assert_fail@plt+0x37ec>
   14c1c:	mov	r6, r4
   14c20:	sub	r2, r3, lr
   14c24:	lsr	r3, r2, #16
   14c28:	mla	r4, r3, r6, r2
   14c2c:	mov	r3, #1
   14c30:	orr	r2, ip, r2, lsl #16
   14c34:	add	r5, r3, r4, lsr #16
   14c38:	mls	r3, r5, r0, r2
   14c3c:	cmp	r3, r4, lsl #16
   14c40:	lsrcs	r5, r4, #16
   14c44:	addcs	r3, r3, r0
   14c48:	add	r2, r5, r6, lsl #16
   14c4c:	cmp	r3, r0
   14c50:	mov	r6, #0
   14c54:	movwcs	r6, #1
   14c58:	cmp	r1, #0
   14c5c:	add	ip, r2, r6
   14c60:	beq	14d04 <__assert_fail@plt+0x38d0>
   14c64:	mvn	r2, r3
   14c68:	cmp	r3, r0
   14c6c:	add	r2, r2, r1
   14c70:	addcs	r2, r2, r0
   14c74:	cmp	r2, r1
   14c78:	bcs	14c90 <__assert_fail@plt+0x385c>
   14c7c:	subs	r2, r2, r0
   14c80:	mvn	r3, #1
   14c84:	mvncc	r3, #0
   14c88:	subcs	r2, r2, r0
   14c8c:	add	ip, r3, ip
   14c90:	uxth	r3, r1
   14c94:	lsr	r4, ip, #16
   14c98:	uxth	r7, ip
   14c9c:	lsr	r5, r1, #16
   14ca0:	mul	r6, r4, r3
   14ca4:	mul	lr, r7, r3
   14ca8:	mul	r4, r4, r5
   14cac:	mla	r6, r7, r5, r6
   14cb0:	add	r3, r6, lr, lsr #16
   14cb4:	mul	r6, r7, r5
   14cb8:	cmp	r3, r6
   14cbc:	addcc	r4, r4, #65536	; 0x10000
   14cc0:	add	r4, r4, r3, lsr #16
   14cc4:	adds	r2, r4, r2
   14cc8:	bcc	14d04 <__assert_fail@plt+0x38d0>
   14ccc:	pkhbt	r3, lr, r3, lsl #16
   14cd0:	cmp	r2, r0
   14cd4:	sub	r0, r2, r0
   14cd8:	mov	r5, #0
   14cdc:	mov	r4, #0
   14ce0:	clz	r0, r0
   14ce4:	movwhi	r5, #1
   14ce8:	cmp	r3, r1
   14cec:	lsr	r0, r0, #5
   14cf0:	movwhi	r4, #1
   14cf4:	and	r0, r4, r0
   14cf8:	orr	r0, r5, r0
   14cfc:	mvn	r0, r0
   14d00:	add	ip, ip, r0
   14d04:	mov	r0, ip
   14d08:	pop	{r4, r5, r6, r7, fp, pc}
   14d0c:	push	{r4, sl, fp, lr}
   14d10:	add	fp, sp, #8
   14d14:	sub	sp, sp, #16
   14d18:	cmp	r3, #0
   14d1c:	ble	14e80 <__assert_fail@plt+0x3a4c>
   14d20:	mov	ip, r2
   14d24:	add	r2, r2, r3, lsl #2
   14d28:	ldr	r2, [r2, #-4]
   14d2c:	cmp	r2, #0
   14d30:	beq	14e98 <__assert_fail@plt+0x3a64>
   14d34:	cmp	r1, #63	; 0x3f
   14d38:	bgt	14dd8 <__assert_fail@plt+0x39a4>
   14d3c:	sub	r4, r1, #2
   14d40:	cmp	r4, #30
   14d44:	bhi	14e30 <__assert_fail@plt+0x39fc>
   14d48:	add	r2, pc, #4
   14d4c:	mov	lr, #1
   14d50:	ldr	pc, [r2, r4, lsl #2]
   14d54:	andeq	r4, r1, ip, lsl lr
   14d58:	andeq	r4, r1, r0, lsr lr
   14d5c:	ldrdeq	r4, [r1], -r0
   14d60:	andeq	r4, r1, r0, lsr lr
   14d64:	andeq	r4, r1, r0, lsr lr
   14d68:	andeq	r4, r1, r0, lsr lr
   14d6c:	andeq	r4, r1, r0, lsl #28
   14d70:	andeq	r4, r1, r0, lsr lr
   14d74:	andeq	r4, r1, r0, lsr lr
   14d78:	andeq	r4, r1, r0, lsr lr
   14d7c:	andeq	r4, r1, r0, lsr lr
   14d80:	andeq	r4, r1, r0, lsr lr
   14d84:	andeq	r4, r1, r0, lsr lr
   14d88:	andeq	r4, r1, r0, lsr lr
   14d8c:	strdeq	r4, [r1], -r8
   14d90:	andeq	r4, r1, r0, lsr lr
   14d94:	andeq	r4, r1, r0, lsr lr
   14d98:	andeq	r4, r1, r0, lsr lr
   14d9c:	andeq	r4, r1, r0, lsr lr
   14da0:	andeq	r4, r1, r0, lsr lr
   14da4:	andeq	r4, r1, r0, lsr lr
   14da8:	andeq	r4, r1, r0, lsr lr
   14dac:	andeq	r4, r1, r0, lsr lr
   14db0:	andeq	r4, r1, r0, lsr lr
   14db4:	andeq	r4, r1, r0, lsr lr
   14db8:	andeq	r4, r1, r0, lsr lr
   14dbc:	andeq	r4, r1, r0, lsr lr
   14dc0:	andeq	r4, r1, r0, lsr lr
   14dc4:	andeq	r4, r1, r0, lsr lr
   14dc8:	andeq	r4, r1, r0, lsr lr
   14dcc:	andeq	r4, r1, r8, lsl #28
   14dd0:	mov	lr, #2
   14dd4:	b	14e1c <__assert_fail@plt+0x39e8>
   14dd8:	cmp	r1, #64	; 0x40
   14ddc:	beq	14e10 <__assert_fail@plt+0x39dc>
   14de0:	cmp	r1, #128	; 0x80
   14de4:	beq	14e18 <__assert_fail@plt+0x39e4>
   14de8:	cmp	r1, #256	; 0x100
   14dec:	bne	14e30 <__assert_fail@plt+0x39fc>
   14df0:	mov	lr, #8
   14df4:	b	14e1c <__assert_fail@plt+0x39e8>
   14df8:	mov	lr, #4
   14dfc:	b	14e1c <__assert_fail@plt+0x39e8>
   14e00:	mov	lr, #3
   14e04:	b	14e1c <__assert_fail@plt+0x39e8>
   14e08:	mov	lr, #5
   14e0c:	b	14e1c <__assert_fail@plt+0x39e8>
   14e10:	mov	lr, #6
   14e14:	b	14e1c <__assert_fail@plt+0x39e8>
   14e18:	mov	lr, #7
   14e1c:	mov	r1, lr
   14e20:	mov	r2, ip
   14e24:	sub	sp, fp, #8
   14e28:	pop	{r4, sl, fp, lr}
   14e2c:	b	14eb8 <__assert_fail@plt+0x3a84>
   14e30:	mvn	r2, #0
   14e34:	mov	r4, r1
   14e38:	udiv	lr, r2, r1
   14e3c:	mov	r2, #1
   14e40:	cmp	lr, r1
   14e44:	bcc	14e60 <__assert_fail@plt+0x3a2c>
   14e48:	mov	r2, #1
   14e4c:	mov	r4, r1
   14e50:	mul	r4, r4, r1
   14e54:	add	r2, r2, #1
   14e58:	cmp	r4, lr
   14e5c:	bls	14e50 <__assert_fail@plt+0x3a1c>
   14e60:	str	r4, [sp, #12]
   14e64:	str	r2, [sp, #8]
   14e68:	str	r3, [sp]
   14e6c:	add	r2, sp, #8
   14e70:	mov	r3, ip
   14e74:	bl	14fb8 <__assert_fail@plt+0x3b84>
   14e78:	sub	sp, fp, #8
   14e7c:	pop	{r4, sl, fp, pc}
   14e80:	movw	r0, #38063	; 0x94af
   14e84:	movw	r1, #37260	; 0x918c
   14e88:	movw	r3, #38070	; 0x94b6
   14e8c:	movw	r2, #1316	; 0x524
   14e90:	movt	r0, #3
   14e94:	b	14eac <__assert_fail@plt+0x3a78>
   14e98:	movw	r0, #38130	; 0x94f2
   14e9c:	movw	r1, #37260	; 0x918c
   14ea0:	movw	r3, #38070	; 0x94b6
   14ea4:	movw	r2, #1317	; 0x525
   14ea8:	movt	r0, #3
   14eac:	movt	r1, #3
   14eb0:	movt	r3, #3
   14eb4:	bl	11434 <__assert_fail@plt>
   14eb8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14ebc:	add	fp, sp, #24
   14ec0:	sub	r4, r3, #1
   14ec4:	ldr	ip, [r2, r4, lsl #2]
   14ec8:	cmp	ip, #0
   14ecc:	beq	14f98 <__assert_fail@plt+0x3b64>
   14ed0:	mov	lr, #0
   14ed4:	cmp	lr, ip, lsr #24
   14ed8:	bne	14ef0 <__assert_fail@plt+0x3abc>
   14edc:	mov	lr, #0
   14ee0:	lsl	ip, ip, #8
   14ee4:	add	lr, lr, #8
   14ee8:	cmp	ip, #16777216	; 0x1000000
   14eec:	bcc	14ee0 <__assert_fail@plt+0x3aac>
   14ef0:	lsl	r4, r4, #5
   14ef4:	cmp	ip, #0
   14ef8:	bmi	14f0c <__assert_fail@plt+0x3ad8>
   14efc:	lsl	ip, ip, #1
   14f00:	add	lr, lr, #1
   14f04:	cmn	ip, #1
   14f08:	bgt	14efc <__assert_fail@plt+0x3ac8>
   14f0c:	add	r7, r1, r4
   14f10:	sub	r7, r7, lr
   14f14:	add	r7, r7, #31
   14f18:	udiv	ip, r7, r1
   14f1c:	cmp	r7, r1
   14f20:	bcc	14f90 <__assert_fail@plt+0x3b5c>
   14f24:	mvn	r7, #0
   14f28:	mov	r6, #255	; 0xff
   14f2c:	mov	r5, #0
   14f30:	mov	r4, ip
   14f34:	mov	r8, #0
   14f38:	eor	lr, r6, r7, lsl r1
   14f3c:	b	14f54 <__assert_fail@plt+0x3b20>
   14f40:	mov	r5, r6
   14f44:	and	r6, r7, lr
   14f48:	cmp	r4, #0
   14f4c:	strb	r6, [r0, r4]
   14f50:	beq	14f90 <__assert_fail@plt+0x3b5c>
   14f54:	ldr	r7, [r2, r8, lsl #2]
   14f58:	add	r6, r5, r1
   14f5c:	sub	r4, r4, #1
   14f60:	cmp	r6, #32
   14f64:	lsr	r7, r7, r5
   14f68:	bcc	14f40 <__assert_fail@plt+0x3b0c>
   14f6c:	add	r8, r8, #1
   14f70:	cmp	r8, r3
   14f74:	bge	14f40 <__assert_fail@plt+0x3b0c>
   14f78:	ldr	r9, [r2, r8, lsl #2]
   14f7c:	sub	r5, r6, #32
   14f80:	uxtb	r7, r7
   14f84:	sub	r6, r1, r5
   14f88:	orr	r7, r7, r9, lsl r6
   14f8c:	b	14f44 <__assert_fail@plt+0x3b10>
   14f90:	mov	r0, ip
   14f94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14f98:	movw	r0, #41907	; 0xa3b3
   14f9c:	movw	r1, #37260	; 0x918c
   14fa0:	movw	r3, #41913	; 0xa3b9
   14fa4:	movw	r2, #1210	; 0x4ba
   14fa8:	movt	r0, #3
   14fac:	movt	r1, #3
   14fb0:	movt	r3, #3
   14fb4:	bl	11434 <__assert_fail@plt>
   14fb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fbc:	add	fp, sp, #28
   14fc0:	sub	sp, sp, #44	; 0x2c
   14fc4:	cmp	r1, #0
   14fc8:	str	r3, [sp, #8]
   14fcc:	beq	15280 <__assert_fail@plt+0x3e4c>
   14fd0:	mov	r6, r2
   14fd4:	mov	r2, #0
   14fd8:	mov	r4, r0
   14fdc:	mov	r0, r1
   14fe0:	cmp	r2, r1, lsr #24
   14fe4:	bne	15000 <__assert_fail@plt+0x3bcc>
   14fe8:	mov	r2, #0
   14fec:	mov	r0, r1
   14ff0:	lsl	r0, r0, #8
   14ff4:	add	r2, r2, #8
   14ff8:	cmp	r0, #16777216	; 0x1000000
   14ffc:	bcc	14ff0 <__assert_fail@plt+0x3bbc>
   15000:	cmp	r0, #0
   15004:	bmi	15018 <__assert_fail@plt+0x3be4>
   15008:	lsl	r0, r0, #1
   1500c:	add	r2, r2, #1
   15010:	cmn	r0, #1
   15014:	bgt	15008 <__assert_fail@plt+0x3bd4>
   15018:	lsl	r0, r1, r2
   1501c:	str	r2, [sp, #28]
   15020:	mvn	r2, r1, lsl r2
   15024:	ldr	r7, [fp, #8]
   15028:	movw	lr, #65535	; 0xffff
   1502c:	lsr	r5, r0, #16
   15030:	uxth	r3, r0
   15034:	str	r0, [sp, #32]
   15038:	udiv	r1, r2, r5
   1503c:	mls	r5, r1, r5, r2
   15040:	mul	r3, r1, r3
   15044:	orr	r5, lr, r5, lsl #16
   15048:	cmp	r5, r3
   1504c:	bcs	15078 <__assert_fail@plt+0x3c44>
   15050:	add	r5, r5, r0
   15054:	sub	ip, r1, #1
   15058:	cmp	r5, r0
   1505c:	bcc	15074 <__assert_fail@plt+0x3c40>
   15060:	cmp	r5, r3
   15064:	subcc	r1, r1, #2
   15068:	addcc	r5, r5, r0
   1506c:	movcs	r1, ip
   15070:	b	15078 <__assert_fail@plt+0x3c44>
   15074:	mov	r1, ip
   15078:	sub	r3, r5, r3
   1507c:	mov	r2, #1
   15080:	mov	r8, #0
   15084:	lsr	r5, r3, #16
   15088:	mla	r5, r5, r1, r3
   1508c:	orr	r3, lr, r3, lsl #16
   15090:	add	r2, r2, r5, lsr #16
   15094:	mls	r3, r2, r0, r3
   15098:	cmp	r3, r5, lsl #16
   1509c:	lsrcs	r2, r5, #16
   150a0:	addcs	r3, r3, r0
   150a4:	add	r1, r2, r1, lsl #16
   150a8:	cmp	r3, r0
   150ac:	addcs	r1, r1, #1
   150b0:	cmp	r7, #2
   150b4:	str	r1, [sp, #40]	; 0x28
   150b8:	blt	15230 <__assert_fail@plt+0x3dfc>
   150bc:	ldr	r0, [r6, #4]
   150c0:	cmp	r0, #0
   150c4:	beq	15280 <__assert_fail@plt+0x3e4c>
   150c8:	mov	r2, #0
   150cc:	mov	r1, r0
   150d0:	cmp	r2, r0, lsr #24
   150d4:	bne	150f0 <__assert_fail@plt+0x3cbc>
   150d8:	mov	r2, #0
   150dc:	mov	r1, r0
   150e0:	lsl	r1, r1, #8
   150e4:	add	r2, r2, #8
   150e8:	cmp	r1, #16777216	; 0x1000000
   150ec:	bcc	150e0 <__assert_fail@plt+0x3cac>
   150f0:	cmp	r1, #0
   150f4:	bmi	15108 <__assert_fail@plt+0x3cd4>
   150f8:	lsl	r1, r1, #1
   150fc:	add	r2, r2, #1
   15100:	cmn	r1, #1
   15104:	bgt	150f8 <__assert_fail@plt+0x3cc4>
   15108:	lsl	r1, r0, r2
   1510c:	str	r2, [sp, #12]
   15110:	mvn	r2, r0, lsl r2
   15114:	movw	lr, #65535	; 0xffff
   15118:	str	r4, [sp, #4]
   1511c:	lsr	r5, r1, #16
   15120:	uxth	r3, r1
   15124:	str	r1, [sp, #16]
   15128:	udiv	r0, r2, r5
   1512c:	mls	r5, r0, r5, r2
   15130:	mul	r3, r0, r3
   15134:	orr	r5, lr, r5, lsl #16
   15138:	cmp	r5, r3
   1513c:	bcs	15168 <__assert_fail@plt+0x3d34>
   15140:	add	r5, r5, r1
   15144:	sub	ip, r0, #1
   15148:	cmp	r5, r1
   1514c:	bcc	15164 <__assert_fail@plt+0x3d30>
   15150:	cmp	r5, r3
   15154:	subcc	r0, r0, #2
   15158:	addcc	r5, r5, r1
   1515c:	movcs	r0, ip
   15160:	b	15168 <__assert_fail@plt+0x3d34>
   15164:	mov	r0, ip
   15168:	sub	r3, r5, r3
   1516c:	mov	r2, #1
   15170:	mov	r9, #0
   15174:	mov	r8, #0
   15178:	lsr	r5, r3, #16
   1517c:	mla	r5, r5, r0, r3
   15180:	orr	r3, lr, r3, lsl #16
   15184:	add	r2, r2, r5, lsr #16
   15188:	mls	r3, r2, r1, r3
   1518c:	cmp	r3, r5, lsl #16
   15190:	lsrcs	r2, r5, #16
   15194:	addcs	r3, r3, r1
   15198:	add	r0, r2, r0, lsl #16
   1519c:	cmp	r3, r1
   151a0:	addcs	r0, r0, #1
   151a4:	str	r0, [sp, #24]
   151a8:	b	151b8 <__assert_fail@plt+0x3d84>
   151ac:	add	r8, r0, r8
   151b0:	cmp	r7, #1
   151b4:	ble	1522c <__assert_fail@plt+0x3df8>
   151b8:	ldr	r5, [sp, #8]
   151bc:	mov	r2, r7
   151c0:	add	r3, sp, #12
   151c4:	mov	r0, r5
   151c8:	mov	r1, r5
   151cc:	bl	219a8 <__assert_fail@plt+0x10574>
   151d0:	mov	r1, r0
   151d4:	ldr	r0, [sp, #4]
   151d8:	sub	sl, r7, #1
   151dc:	mov	r4, r7
   151e0:	add	r2, sp, #28
   151e4:	ldr	r7, [r5, sl, lsl #2]
   151e8:	add	r5, r0, r8
   151ec:	mov	r0, r5
   151f0:	bl	22b58 <__assert_fail@plt+0x11724>
   151f4:	ldr	r1, [r6]
   151f8:	cmp	r7, #0
   151fc:	mov	r7, r4
   15200:	moveq	r7, sl
   15204:	cmp	r0, r1
   15208:	bcs	151ac <__assert_fail@plt+0x3d78>
   1520c:	strb	r9, [r5, r0]
   15210:	add	r0, r0, #1
   15214:	ldr	r1, [r6]
   15218:	cmp	r0, r1
   1521c:	bcc	1520c <__assert_fail@plt+0x3dd8>
   15220:	add	r8, r8, r0
   15224:	cmp	r7, #1
   15228:	bgt	151b8 <__assert_fail@plt+0x3d84>
   1522c:	ldr	r4, [sp, #4]
   15230:	ldr	r1, [sp, #8]
   15234:	add	r0, r4, r8
   15238:	add	r2, sp, #28
   1523c:	ldr	r1, [r1]
   15240:	bl	22b58 <__assert_fail@plt+0x11724>
   15244:	add	r0, r0, r8
   15248:	cmp	r0, #2
   1524c:	bcc	15278 <__assert_fail@plt+0x3e44>
   15250:	add	r1, r0, r4
   15254:	mov	r2, #1
   15258:	sub	r1, r1, #1
   1525c:	ldrb	r3, [r4]
   15260:	ldrb	r7, [r1]
   15264:	add	r2, r2, #2
   15268:	cmp	r2, r0
   1526c:	strb	r7, [r4], #1
   15270:	strb	r3, [r1], #-1
   15274:	bcc	1525c <__assert_fail@plt+0x3e28>
   15278:	sub	sp, fp, #28
   1527c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15280:	movw	r0, #41960	; 0xa3e8
   15284:	movw	r1, #37260	; 0x918c
   15288:	movw	r3, #41966	; 0xa3ee
   1528c:	movw	r2, #902	; 0x386
   15290:	movt	r0, #3
   15294:	movt	r1, #3
   15298:	movt	r3, #3
   1529c:	bl	11434 <__assert_fail@plt>
   152a0:	push	{r4, r5, fp, lr}
   152a4:	add	fp, sp, #8
   152a8:	sub	sp, sp, #16
   152ac:	cmp	r2, #0
   152b0:	beq	15358 <__assert_fail@plt+0x3f24>
   152b4:	cmp	r3, #63	; 0x3f
   152b8:	bgt	15364 <__assert_fail@plt+0x3f30>
   152bc:	sub	r5, r3, #2
   152c0:	cmp	r5, #30
   152c4:	bhi	1543c <__assert_fail@plt+0x4008>
   152c8:	add	r4, pc, #4
   152cc:	mov	ip, #1
   152d0:	ldr	pc, [r4, r5, lsl #2]
   152d4:	andeq	r5, r1, r8, lsr #7
   152d8:	andeq	r5, r1, ip, lsr r4
   152dc:	andeq	r5, r1, r0, asr r3
   152e0:	andeq	r5, r1, ip, lsr r4
   152e4:	andeq	r5, r1, ip, lsr r4
   152e8:	andeq	r5, r1, ip, lsr r4
   152ec:	andeq	r5, r1, r4, lsl #7
   152f0:	andeq	r5, r1, ip, lsr r4
   152f4:	andeq	r5, r1, ip, lsr r4
   152f8:	andeq	r5, r1, ip, lsr r4
   152fc:	andeq	r5, r1, ip, lsr r4
   15300:	andeq	r5, r1, ip, lsr r4
   15304:	andeq	r5, r1, ip, lsr r4
   15308:	andeq	r5, r1, ip, lsr r4
   1530c:	andeq	r5, r1, ip, lsl #7
   15310:	andeq	r5, r1, ip, lsr r4
   15314:	andeq	r5, r1, ip, lsr r4
   15318:	andeq	r5, r1, ip, lsr r4
   1531c:	andeq	r5, r1, ip, lsr r4
   15320:	andeq	r5, r1, ip, lsr r4
   15324:	andeq	r5, r1, ip, lsr r4
   15328:	andeq	r5, r1, ip, lsr r4
   1532c:	andeq	r5, r1, ip, lsr r4
   15330:	andeq	r5, r1, ip, lsr r4
   15334:	andeq	r5, r1, ip, lsr r4
   15338:	andeq	r5, r1, ip, lsr r4
   1533c:	andeq	r5, r1, ip, lsr r4
   15340:	andeq	r5, r1, ip, lsr r4
   15344:	andeq	r5, r1, ip, lsr r4
   15348:	andeq	r5, r1, ip, lsr r4
   1534c:	muleq	r1, r4, r3
   15350:	mov	ip, #2
   15354:	b	153a8 <__assert_fail@plt+0x3f74>
   15358:	mov	r0, #0
   1535c:	sub	sp, fp, #8
   15360:	pop	{r4, r5, fp, pc}
   15364:	cmp	r3, #64	; 0x40
   15368:	beq	1539c <__assert_fail@plt+0x3f68>
   1536c:	cmp	r3, #128	; 0x80
   15370:	beq	153a4 <__assert_fail@plt+0x3f70>
   15374:	cmp	r3, #256	; 0x100
   15378:	bne	1543c <__assert_fail@plt+0x4008>
   1537c:	mov	ip, #8
   15380:	b	153a8 <__assert_fail@plt+0x3f74>
   15384:	mov	ip, #3
   15388:	b	153a8 <__assert_fail@plt+0x3f74>
   1538c:	mov	ip, #4
   15390:	b	153a8 <__assert_fail@plt+0x3f74>
   15394:	mov	ip, #5
   15398:	b	153a8 <__assert_fail@plt+0x3f74>
   1539c:	mov	ip, #6
   153a0:	b	153a8 <__assert_fail@plt+0x3f74>
   153a4:	mov	ip, #7
   153a8:	sub	lr, r1, #1
   153ac:	mov	r3, #0
   153b0:	mov	r4, #0
   153b4:	mov	r1, #0
   153b8:	b	153c8 <__assert_fail@plt+0x3f94>
   153bc:	cmp	r5, #0
   153c0:	mov	r2, r5
   153c4:	beq	153fc <__assert_fail@plt+0x3fc8>
   153c8:	ldrb	r5, [lr, r2]
   153cc:	orr	r4, r4, r5, lsl r3
   153d0:	add	r3, r3, ip
   153d4:	sub	r5, r2, #1
   153d8:	cmp	r3, #32
   153dc:	bcc	153bc <__assert_fail@plt+0x3f88>
   153e0:	str	r4, [r0, r1, lsl #2]
   153e4:	sub	r3, r3, #32
   153e8:	add	r1, r1, #1
   153ec:	ldrb	r2, [lr, r2]
   153f0:	sub	r4, ip, r3
   153f4:	lsr	r4, r2, r4
   153f8:	b	153bc <__assert_fail@plt+0x3f88>
   153fc:	cmp	r4, #0
   15400:	beq	15414 <__assert_fail@plt+0x3fe0>
   15404:	str	r4, [r0, r1, lsl #2]
   15408:	add	r0, r1, #1
   1540c:	sub	sp, fp, #8
   15410:	pop	{r4, r5, fp, pc}
   15414:	sub	r2, r0, #4
   15418:	mov	r0, r1
   1541c:	cmp	r1, #1
   15420:	blt	15434 <__assert_fail@plt+0x4000>
   15424:	ldr	r3, [r2, r0, lsl #2]
   15428:	sub	r1, r0, #1
   1542c:	cmp	r3, #0
   15430:	beq	15418 <__assert_fail@plt+0x3fe4>
   15434:	sub	sp, fp, #8
   15438:	pop	{r4, r5, fp, pc}
   1543c:	mvn	r5, #0
   15440:	mov	r4, #1
   15444:	udiv	ip, r5, r3
   15448:	mov	r5, r3
   1544c:	cmp	ip, r3
   15450:	bcc	1546c <__assert_fail@plt+0x4038>
   15454:	mov	r4, #1
   15458:	mov	r5, r3
   1545c:	mul	r5, r5, r3
   15460:	add	r4, r4, #1
   15464:	cmp	r5, ip
   15468:	bls	1545c <__assert_fail@plt+0x4028>
   1546c:	str	r5, [sp, #12]
   15470:	add	r5, sp, #8
   15474:	str	r4, [sp, #8]
   15478:	str	r5, [sp]
   1547c:	bl	15488 <__assert_fail@plt+0x4054>
   15480:	sub	sp, fp, #8
   15484:	pop	{r4, r5, fp, pc}
   15488:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1548c:	add	fp, sp, #28
   15490:	sub	sp, sp, #36	; 0x24
   15494:	cmp	r2, #0
   15498:	beq	15744 <__assert_fail@plt+0x4310>
   1549c:	ldr	r7, [fp, #8]
   154a0:	ldrb	r8, [r1]
   154a4:	mov	ip, #1
   154a8:	ldr	r9, [r7]
   154ac:	sub	r7, r2, #1
   154b0:	udiv	r6, r7, r9
   154b4:	mls	r4, r6, r9, r7
   154b8:	cmp	r4, #0
   154bc:	beq	154e4 <__assert_fail@plt+0x40b0>
   154c0:	mul	r6, r6, r9
   154c4:	sub	r5, r2, #2
   154c8:	and	lr, r4, #1
   154cc:	cmp	r5, r6
   154d0:	bne	154ec <__assert_fail@plt+0x40b8>
   154d4:	mov	r4, #1
   154d8:	cmp	lr, #0
   154dc:	bne	15520 <__assert_fail@plt+0x40ec>
   154e0:	b	1552c <__assert_fail@plt+0x40f8>
   154e4:	mov	r4, #1
   154e8:	b	1552c <__assert_fail@plt+0x40f8>
   154ec:	sub	r6, r4, lr
   154f0:	mov	r4, #0
   154f4:	add	r5, r1, r4
   154f8:	add	r4, r4, #2
   154fc:	subs	r6, r6, #2
   15500:	ldrb	r7, [r5, #1]
   15504:	ldrb	r5, [r5, #2]
   15508:	mla	r7, r8, r3, r7
   1550c:	mla	r8, r7, r3, r5
   15510:	bne	154f4 <__assert_fail@plt+0x40c0>
   15514:	add	r4, r4, #1
   15518:	cmp	lr, #0
   1551c:	beq	1552c <__assert_fail@plt+0x40f8>
   15520:	ldrb	r7, [r1, r4]
   15524:	add	r4, r4, #1
   15528:	mla	r8, r8, r3, r7
   1552c:	cmp	r4, r2
   15530:	str	r8, [r0]
   15534:	bcs	156f0 <__assert_fail@plt+0x42bc>
   15538:	cmp	r9, #1
   1553c:	mov	r7, #1
   15540:	add	sl, r1, r4
   15544:	mov	ip, #1
   15548:	str	r2, [sp, #24]
   1554c:	str	r1, [sp, #20]
   15550:	str	r9, [sp, #16]
   15554:	movhi	r7, r9
   15558:	str	r7, [sp, #12]
   1555c:	sub	r7, r9, #1
   15560:	and	r6, r7, #1
   15564:	sub	lr, r7, r6
   15568:	str	r6, [sp, #4]
   1556c:	str	lr, [sp, #8]
   15570:	b	155a4 <__assert_fail@plt+0x4170>
   15574:	adds	r1, r9, r8
   15578:	ldr	r7, [sp, #12]
   1557c:	ldr	r4, [sp, #32]
   15580:	ldr	r5, [sp, #28]
   15584:	ldr	r9, [sp, #16]
   15588:	strne	r1, [r0, ip, lsl #2]
   1558c:	ldr	r1, [sp, #20]
   15590:	addne	ip, ip, #1
   15594:	add	sl, sl, r7
   15598:	add	r4, r4, r7
   1559c:	cmp	r5, r2
   155a0:	bcs	156f4 <__assert_fail@plt+0x42c0>
   155a4:	ldrb	r8, [r1, r4]
   155a8:	add	r5, r4, #1
   155ac:	cmp	r9, #2
   155b0:	bcc	155fc <__assert_fail@plt+0x41c8>
   155b4:	beq	155e4 <__assert_fail@plt+0x41b0>
   155b8:	mov	r6, #0
   155bc:	add	r7, sl, r6
   155c0:	add	r6, r6, #2
   155c4:	ldrb	r5, [r7, #1]
   155c8:	ldrb	r7, [r7, #2]
   155cc:	cmp	lr, r6
   155d0:	mla	r5, r8, r3, r5
   155d4:	mla	r8, r5, r3, r7
   155d8:	bne	155bc <__assert_fail@plt+0x4188>
   155dc:	add	r7, r4, r6
   155e0:	add	r5, r7, #1
   155e4:	ldr	r7, [sp, #4]
   155e8:	cmp	r7, #0
   155ec:	beq	155f8 <__assert_fail@plt+0x41c4>
   155f0:	ldrb	r7, [r1, r5]
   155f4:	mla	r8, r8, r3, r7
   155f8:	add	r5, r9, r4
   155fc:	cmp	ip, #1
   15600:	str	r5, [sp, #28]
   15604:	str	r4, [sp, #32]
   15608:	blt	15724 <__assert_fail@plt+0x42f0>
   1560c:	ldr	r1, [fp, #8]
   15610:	mov	r5, #0
   15614:	mov	r9, #0
   15618:	ldr	r1, [r1, #4]
   1561c:	lsr	r2, r1, #16
   15620:	uxth	r1, r1
   15624:	ldr	r4, [r0, r5, lsl #2]
   15628:	uxth	r7, r4
   1562c:	lsr	r4, r4, #16
   15630:	mul	lr, r4, r1
   15634:	mul	r6, r7, r2
   15638:	mul	r7, r7, r1
   1563c:	mla	r6, r4, r1, r6
   15640:	mul	r4, r4, r2
   15644:	add	r6, r6, r7, lsr #16
   15648:	pkhbt	r7, r7, r6, lsl #16
   1564c:	cmp	r6, lr
   15650:	addcc	r4, r4, #65536	; 0x10000
   15654:	adds	r7, r7, r9
   15658:	str	r7, [r0, r5, lsl #2]
   1565c:	adc	r9, r4, r6, lsr #16
   15660:	add	r5, r5, #1
   15664:	cmp	ip, r5
   15668:	bne	15624 <__assert_fail@plt+0x41f0>
   1566c:	and	r4, ip, #1
   15670:	mov	r5, #0
   15674:	cmp	ip, #1
   15678:	bne	15694 <__assert_fail@plt+0x4260>
   1567c:	ldr	r2, [sp, #24]
   15680:	ldr	lr, [sp, #8]
   15684:	mov	r6, #0
   15688:	cmp	r4, #0
   1568c:	beq	15574 <__assert_fail@plt+0x4140>
   15690:	b	156dc <__assert_fail@plt+0x42a8>
   15694:	ldr	r2, [sp, #24]
   15698:	ldr	lr, [sp, #8]
   1569c:	sub	r1, ip, r4
   156a0:	mov	r5, #0
   156a4:	mov	r7, r0
   156a8:	ldr	r6, [r7, r5, lsl #2]!
   156ac:	add	r5, r5, #2
   156b0:	adds	r6, r6, r8
   156b4:	str	r6, [r7]
   156b8:	ldr	r6, [r7, #4]
   156bc:	adcs	r6, r6, #0
   156c0:	str	r6, [r7, #4]
   156c4:	mov	r6, #0
   156c8:	adc	r8, r6, #0
   156cc:	cmp	r1, r5
   156d0:	bne	156a4 <__assert_fail@plt+0x4270>
   156d4:	cmp	r4, #0
   156d8:	beq	15574 <__assert_fail@plt+0x4140>
   156dc:	ldr	r1, [r0, r5, lsl #2]
   156e0:	adds	r1, r1, r8
   156e4:	adc	r8, r6, #0
   156e8:	str	r1, [r0, r5, lsl #2]
   156ec:	b	15574 <__assert_fail@plt+0x4140>
   156f0:	mov	r5, r4
   156f4:	cmp	r5, r2
   156f8:	moveq	r0, ip
   156fc:	subeq	sp, fp, #28
   15700:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15704:	movw	r0, #40467	; 0x9e13
   15708:	movw	r1, #37260	; 0x918c
   1570c:	movw	r3, #40359	; 0x9da7
   15710:	movw	r2, #1394	; 0x572
   15714:	movt	r0, #3
   15718:	movt	r1, #3
   1571c:	movt	r3, #3
   15720:	bl	11434 <__assert_fail@plt>
   15724:	movw	r0, #37817	; 0x93b9
   15728:	movw	r1, #37260	; 0x918c
   1572c:	movw	r3, #37548	; 0x92ac
   15730:	movw	r2, #545	; 0x221
   15734:	movt	r0, #3
   15738:	movt	r1, #3
   1573c:	movt	r3, #3
   15740:	bl	11434 <__assert_fail@plt>
   15744:	movw	r0, #40352	; 0x9da0
   15748:	movw	r1, #37260	; 0x918c
   1574c:	movw	r3, #40359	; 0x9da7
   15750:	movw	r2, #1370	; 0x55a
   15754:	movt	r0, #3
   15758:	b	15718 <__assert_fail@plt+0x42e4>
   1575c:	movw	r1, #37256	; 0x9188
   15760:	mov	r2, #0
   15764:	movt	r1, #3
   15768:	str	r2, [r0]
   1576c:	str	r2, [r0, #4]
   15770:	str	r1, [r0, #8]
   15774:	bx	lr
   15778:	push	{r4, sl, fp, lr}
   1577c:	add	fp, sp, #8
   15780:	cmp	r1, #0
   15784:	mov	r2, #1
   15788:	mov	r4, r0
   1578c:	mov	r0, #0
   15790:	subne	r1, r1, #1
   15794:	add	r1, r2, r1, lsr #5
   15798:	str	r1, [r4]
   1579c:	str	r0, [r4, #4]
   157a0:	lsl	r0, r1, #2
   157a4:	movw	r1, #45348	; 0xb124
   157a8:	movt	r1, #4
   157ac:	ldr	r1, [r1]
   157b0:	blx	r1
   157b4:	str	r0, [r4, #8]
   157b8:	pop	{r4, sl, fp, pc}
   157bc:	ldr	r1, [r0]
   157c0:	cmp	r1, #0
   157c4:	bxeq	lr
   157c8:	movw	r2, #45356	; 0xb12c
   157cc:	ldr	r0, [r0, #8]
   157d0:	lsl	r1, r1, #2
   157d4:	movt	r2, #4
   157d8:	ldr	r2, [r2]
   157dc:	bx	r2
   157e0:	push	{r4, r5, fp, lr}
   157e4:	add	fp, sp, #8
   157e8:	mov	r5, r1
   157ec:	mov	r4, r0
   157f0:	cmp	r1, #0
   157f4:	bmi	15804 <__assert_fail@plt+0x43d0>
   157f8:	beq	1584c <__assert_fail@plt+0x4418>
   157fc:	mov	r0, #1
   15800:	b	1580c <__assert_fail@plt+0x43d8>
   15804:	mvn	r0, #0
   15808:	rsb	r5, r5, #0
   1580c:	str	r0, [r4, #4]
   15810:	ldr	r1, [r4]
   15814:	cmp	r1, #0
   15818:	ble	15828 <__assert_fail@plt+0x43f4>
   1581c:	ldr	r0, [r4, #8]
   15820:	str	r5, [r0]
   15824:	pop	{r4, r5, fp, pc}
   15828:	beq	15858 <__assert_fail@plt+0x4424>
   1582c:	movw	r0, #45352	; 0xb128
   15830:	lsl	r1, r1, #2
   15834:	mov	r2, #4
   15838:	movt	r0, #4
   1583c:	ldr	r3, [r0]
   15840:	ldr	r0, [r4, #8]
   15844:	blx	r3
   15848:	b	1586c <__assert_fail@plt+0x4438>
   1584c:	mov	r0, #0
   15850:	str	r0, [r4, #4]
   15854:	pop	{r4, r5, fp, pc}
   15858:	movw	r0, #45348	; 0xb124
   1585c:	movt	r0, #4
   15860:	ldr	r1, [r0]
   15864:	mov	r0, #4
   15868:	blx	r1
   1586c:	mov	r1, #1
   15870:	str	r0, [r4, #8]
   15874:	str	r1, [r4]
   15878:	ldr	r1, [r4, #4]
   1587c:	cmp	r1, #0
   15880:	rsbmi	r1, r1, #0
   15884:	cmp	r1, #2
   15888:	blt	15894 <__assert_fail@plt+0x4460>
   1588c:	mov	r1, #0
   15890:	str	r1, [r4, #4]
   15894:	str	r5, [r0]
   15898:	pop	{r4, r5, fp, pc}
   1589c:	push	{r4, r5, fp, lr}
   158a0:	add	fp, sp, #8
   158a4:	mov	r5, r0
   158a8:	cmp	r1, #0
   158ac:	beq	158d4 <__assert_fail@plt+0x44a0>
   158b0:	mov	r0, #1
   158b4:	mov	r4, r1
   158b8:	str	r0, [r5, #4]
   158bc:	ldr	r1, [r5]
   158c0:	cmp	r1, #0
   158c4:	ble	158e0 <__assert_fail@plt+0x44ac>
   158c8:	ldr	r0, [r5, #8]
   158cc:	str	r4, [r0]
   158d0:	pop	{r4, r5, fp, pc}
   158d4:	mov	r0, #0
   158d8:	str	r0, [r5, #4]
   158dc:	pop	{r4, r5, fp, pc}
   158e0:	beq	15904 <__assert_fail@plt+0x44d0>
   158e4:	movw	r0, #45352	; 0xb128
   158e8:	lsl	r1, r1, #2
   158ec:	mov	r2, #4
   158f0:	movt	r0, #4
   158f4:	ldr	r3, [r0]
   158f8:	ldr	r0, [r5, #8]
   158fc:	blx	r3
   15900:	b	15918 <__assert_fail@plt+0x44e4>
   15904:	movw	r0, #45348	; 0xb124
   15908:	movt	r0, #4
   1590c:	ldr	r1, [r0]
   15910:	mov	r0, #4
   15914:	blx	r1
   15918:	mov	r1, #1
   1591c:	str	r0, [r5, #8]
   15920:	str	r1, [r5]
   15924:	ldr	r1, [r5, #4]
   15928:	cmp	r1, #0
   1592c:	rsbmi	r1, r1, #0
   15930:	cmp	r1, #2
   15934:	blt	15940 <__assert_fail@plt+0x450c>
   15938:	mov	r1, #0
   1593c:	str	r1, [r5, #4]
   15940:	str	r4, [r0]
   15944:	pop	{r4, r5, fp, pc}
   15948:	cmp	r0, r1
   1594c:	bxeq	lr
   15950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15954:	add	fp, sp, #28
   15958:	sub	sp, sp, #20
   1595c:	mov	r8, r1
   15960:	ldr	r1, [r0]
   15964:	mov	r4, r0
   15968:	ldr	r5, [r8, #4]
   1596c:	cmp	r5, #0
   15970:	rsbmi	r5, r5, #0
   15974:	cmp	r5, r1
   15978:	ble	159b0 <__assert_fail@plt+0x457c>
   1597c:	cmp	r5, #1
   15980:	mov	r7, r5
   15984:	movle	r7, #1
   15988:	cmp	r1, #0
   1598c:	beq	159c0 <__assert_fail@plt+0x458c>
   15990:	movw	r0, #45352	; 0xb128
   15994:	lsl	r1, r1, #2
   15998:	lsl	r2, r7, #2
   1599c:	movt	r0, #4
   159a0:	ldr	r3, [r0]
   159a4:	ldr	r0, [r4, #8]
   159a8:	blx	r3
   159ac:	b	159d4 <__assert_fail@plt+0x45a0>
   159b0:	ldr	r0, [r4, #8]
   159b4:	cmp	r5, #1
   159b8:	bge	159fc <__assert_fail@plt+0x45c8>
   159bc:	b	15b58 <__assert_fail@plt+0x4724>
   159c0:	movw	r0, #45348	; 0xb124
   159c4:	movt	r0, #4
   159c8:	ldr	r1, [r0]
   159cc:	lsl	r0, r7, #2
   159d0:	blx	r1
   159d4:	str	r0, [r4, #8]
   159d8:	str	r7, [r4]
   159dc:	ldr	r1, [r4, #4]
   159e0:	cmp	r1, #0
   159e4:	rsbmi	r1, r1, #0
   159e8:	cmp	r1, r7
   159ec:	movgt	r1, #0
   159f0:	strgt	r1, [r4, #4]
   159f4:	cmp	r5, #1
   159f8:	blt	15b58 <__assert_fail@plt+0x4724>
   159fc:	ldr	r1, [r8, #8]
   15a00:	mov	r2, #0
   15a04:	cmp	r5, #4
   15a08:	bcc	15aec <__assert_fail@plt+0x46b8>
   15a0c:	add	r3, r1, r5, lsl #2
   15a10:	cmp	r0, r3
   15a14:	addcc	r3, r0, r5, lsl #2
   15a18:	cmpcc	r1, r3
   15a1c:	bcc	15aec <__assert_fail@plt+0x46b8>
   15a20:	bic	r2, r5, #-2147483645	; 0x80000003
   15a24:	stmib	sp, {r5, r8}
   15a28:	mov	r3, #1
   15a2c:	mov	sl, #0
   15a30:	str	r4, [sp, #12]
   15a34:	sub	r5, r2, #4
   15a38:	add	r3, r3, r5, lsr #2
   15a3c:	cmp	r5, #12
   15a40:	and	r7, r3, #3
   15a44:	str	r7, [sp, #16]
   15a48:	bcc	15ab0 <__assert_fail@plt+0x467c>
   15a4c:	ldr	r7, [sp, #16]
   15a50:	mov	r5, #0
   15a54:	mov	lr, #48	; 0x30
   15a58:	mov	sl, #0
   15a5c:	sub	r3, r3, r7
   15a60:	add	r6, r1, r5
   15a64:	add	ip, r0, r5
   15a68:	add	r5, r5, #64	; 0x40
   15a6c:	subs	r3, r3, #4
   15a70:	add	sl, sl, #16
   15a74:	mov	r4, r6
   15a78:	mov	r8, ip
   15a7c:	add	r9, r6, #16
   15a80:	add	r7, ip, #16
   15a84:	add	r6, r6, #32
   15a88:	vld1.32	{d16-d17}, [r4], lr
   15a8c:	vst1.32	{d16-d17}, [r8], lr
   15a90:	vld1.32	{d16-d17}, [r9]
   15a94:	vst1.32	{d16-d17}, [r7]
   15a98:	add	r7, ip, #32
   15a9c:	vld1.32	{d16-d17}, [r6]
   15aa0:	vst1.32	{d16-d17}, [r7]
   15aa4:	vld1.32	{d16-d17}, [r4]
   15aa8:	vst1.32	{d16-d17}, [r8]
   15aac:	bne	15a60 <__assert_fail@plt+0x462c>
   15ab0:	ldr	r6, [sp, #16]
   15ab4:	cmp	r6, #0
   15ab8:	beq	15ad8 <__assert_fail@plt+0x46a4>
   15abc:	add	r3, r1, sl, lsl #2
   15ac0:	add	r7, r0, sl, lsl #2
   15ac4:	rsb	r5, r6, #0
   15ac8:	vld1.32	{d16-d17}, [r3]!
   15acc:	adds	r5, r5, #1
   15ad0:	vst1.32	{d16-d17}, [r7]!
   15ad4:	bcc	15ac8 <__assert_fail@plt+0x4694>
   15ad8:	ldr	r5, [sp, #4]
   15adc:	ldr	r4, [sp, #12]
   15ae0:	ldr	r8, [sp, #8]
   15ae4:	cmp	r5, r2
   15ae8:	beq	15b58 <__assert_fail@plt+0x4724>
   15aec:	mvn	r3, r2
   15af0:	ands	r7, r5, #3
   15af4:	add	r3, r5, r3
   15af8:	beq	15b10 <__assert_fail@plt+0x46dc>
   15afc:	ldr	r6, [r1, r2, lsl #2]
   15b00:	subs	r7, r7, #1
   15b04:	str	r6, [r0, r2, lsl #2]
   15b08:	add	r2, r2, #1
   15b0c:	bne	15afc <__assert_fail@plt+0x46c8>
   15b10:	cmp	r3, #3
   15b14:	bcc	15b58 <__assert_fail@plt+0x4724>
   15b18:	sub	r3, r5, r2
   15b1c:	lsl	r2, r2, #2
   15b20:	add	r7, r1, #16
   15b24:	ldr	r6, [r1, r2]!
   15b28:	add	r5, r0, #16
   15b2c:	subs	r3, r3, #4
   15b30:	str	r6, [r0, r2]!
   15b34:	ldr	r6, [r1, #4]
   15b38:	str	r6, [r0, #4]
   15b3c:	ldr	r6, [r1, #8]
   15b40:	str	r6, [r0, #8]
   15b44:	ldr	r1, [r1, #12]
   15b48:	str	r1, [r0, #12]
   15b4c:	mov	r1, r7
   15b50:	mov	r0, r5
   15b54:	bne	15b20 <__assert_fail@plt+0x46ec>
   15b58:	ldr	r0, [r8, #4]
   15b5c:	str	r0, [r4, #4]
   15b60:	sub	sp, fp, #28
   15b64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b68:	bx	lr
   15b6c:	movw	r2, #37256	; 0x9188
   15b70:	mov	r3, #0
   15b74:	movt	r2, #3
   15b78:	str	r3, [r0]
   15b7c:	str	r3, [r0, #4]
   15b80:	str	r2, [r0, #8]
   15b84:	b	157e0 <__assert_fail@plt+0x43ac>
   15b88:	push	{r4, r5, r6, sl, fp, lr}
   15b8c:	add	fp, sp, #16
   15b90:	mov	r4, r1
   15b94:	movw	r1, #37256	; 0x9188
   15b98:	mov	r5, r0
   15b9c:	mov	r0, #0
   15ba0:	cmp	r4, #0
   15ba4:	movt	r1, #3
   15ba8:	str	r0, [r5]
   15bac:	stmib	r5, {r0, r1}
   15bb0:	beq	15bf8 <__assert_fail@plt+0x47c4>
   15bb4:	movw	r0, #45348	; 0xb124
   15bb8:	mov	r6, #1
   15bbc:	movt	r0, #4
   15bc0:	str	r6, [r5, #4]
   15bc4:	ldr	r1, [r0]
   15bc8:	mov	r0, #4
   15bcc:	blx	r1
   15bd0:	str	r0, [r5, #8]
   15bd4:	str	r6, [r5]
   15bd8:	ldr	r1, [r5, #4]
   15bdc:	cmp	r1, #0
   15be0:	rsbmi	r1, r1, #0
   15be4:	cmp	r1, #2
   15be8:	movge	r1, #0
   15bec:	strge	r1, [r5, #4]
   15bf0:	str	r4, [r0]
   15bf4:	pop	{r4, r5, r6, sl, fp, pc}
   15bf8:	str	r0, [r5, #4]
   15bfc:	pop	{r4, r5, r6, sl, fp, pc}
   15c00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c04:	add	fp, sp, #28
   15c08:	sub	sp, sp, #12
   15c0c:	mov	sl, r0
   15c10:	movw	r0, #37256	; 0x9188
   15c14:	mov	r4, r1
   15c18:	mov	r1, #0
   15c1c:	movt	r0, #3
   15c20:	cmp	sl, r4
   15c24:	str	r1, [sl]
   15c28:	str	r1, [sl, #4]
   15c2c:	str	r0, [sl, #8]
   15c30:	beq	15de4 <__assert_fail@plt+0x49b0>
   15c34:	ldr	r0, [r4, #4]
   15c38:	cmp	r0, #0
   15c3c:	mov	r5, r0
   15c40:	rsbmi	r5, r0, #0
   15c44:	cmp	r5, #1
   15c48:	blt	15de0 <__assert_fail@plt+0x49ac>
   15c4c:	movw	r0, #45348	; 0xb124
   15c50:	movt	r0, #4
   15c54:	ldr	r1, [r0]
   15c58:	lsl	r0, r5, #2
   15c5c:	blx	r1
   15c60:	str	r0, [sl, #8]
   15c64:	str	r5, [sl]
   15c68:	mov	r2, #0
   15c6c:	ldr	r1, [sl, #4]
   15c70:	cmp	r1, #0
   15c74:	rsbmi	r1, r1, #0
   15c78:	cmp	r1, r5
   15c7c:	movgt	r1, #0
   15c80:	strgt	r1, [sl, #4]
   15c84:	cmp	r5, #4
   15c88:	ldr	r1, [r4, #8]
   15c8c:	bcc	15d70 <__assert_fail@plt+0x493c>
   15c90:	add	r3, r1, r5, lsl #2
   15c94:	cmp	r0, r3
   15c98:	bcs	15ca8 <__assert_fail@plt+0x4874>
   15c9c:	add	r3, r0, r5, lsl #2
   15ca0:	cmp	r3, r1
   15ca4:	bhi	15d70 <__assert_fail@plt+0x493c>
   15ca8:	bic	r2, r5, #-2147483645	; 0x80000003
   15cac:	mov	r3, #1
   15cb0:	mov	lr, #0
   15cb4:	str	r4, [sp, #4]
   15cb8:	str	r5, [sp]
   15cbc:	sub	r6, r2, #4
   15cc0:	add	r7, r3, r6, lsr #2
   15cc4:	cmp	r6, #12
   15cc8:	and	r3, r7, #3
   15ccc:	str	r3, [sp, #8]
   15cd0:	bcc	15d38 <__assert_fail@plt+0x4904>
   15cd4:	ldr	r3, [sp, #8]
   15cd8:	mov	lr, #0
   15cdc:	sub	r5, r7, r3
   15ce0:	mov	r7, #0
   15ce4:	add	r6, r1, r7
   15ce8:	mov	r3, #48	; 0x30
   15cec:	add	ip, r0, r7
   15cf0:	add	r7, r7, #64	; 0x40
   15cf4:	subs	r5, r5, #4
   15cf8:	add	lr, lr, #16
   15cfc:	mov	r4, r6
   15d00:	mov	r8, ip
   15d04:	add	r9, r6, #16
   15d08:	vld1.32	{d16-d17}, [r4], r3
   15d0c:	vst1.32	{d16-d17}, [r8], r3
   15d10:	add	r3, ip, #16
   15d14:	vld1.32	{d16-d17}, [r9]
   15d18:	vst1.32	{d16-d17}, [r3]
   15d1c:	add	r3, r6, #32
   15d20:	vld1.32	{d16-d17}, [r3]
   15d24:	add	r3, ip, #32
   15d28:	vst1.32	{d16-d17}, [r3]
   15d2c:	vld1.32	{d16-d17}, [r4]
   15d30:	vst1.32	{d16-d17}, [r8]
   15d34:	bne	15ce4 <__assert_fail@plt+0x48b0>
   15d38:	ldr	r6, [sp, #8]
   15d3c:	cmp	r6, #0
   15d40:	beq	15d60 <__assert_fail@plt+0x492c>
   15d44:	add	r7, r1, lr, lsl #2
   15d48:	add	r3, r0, lr, lsl #2
   15d4c:	rsb	r6, r6, #0
   15d50:	vld1.32	{d16-d17}, [r7]!
   15d54:	adds	r6, r6, #1
   15d58:	vst1.32	{d16-d17}, [r3]!
   15d5c:	bcc	15d50 <__assert_fail@plt+0x491c>
   15d60:	ldr	r5, [sp]
   15d64:	ldr	r4, [sp, #4]
   15d68:	cmp	r5, r2
   15d6c:	beq	15ddc <__assert_fail@plt+0x49a8>
   15d70:	mvn	r3, r2
   15d74:	ands	r7, r5, #3
   15d78:	add	r3, r5, r3
   15d7c:	beq	15d94 <__assert_fail@plt+0x4960>
   15d80:	ldr	r6, [r1, r2, lsl #2]
   15d84:	subs	r7, r7, #1
   15d88:	str	r6, [r0, r2, lsl #2]
   15d8c:	add	r2, r2, #1
   15d90:	bne	15d80 <__assert_fail@plt+0x494c>
   15d94:	cmp	r3, #3
   15d98:	bcc	15ddc <__assert_fail@plt+0x49a8>
   15d9c:	sub	r3, r5, r2
   15da0:	lsl	r2, r2, #2
   15da4:	add	r7, r1, #16
   15da8:	ldr	r6, [r1, r2]!
   15dac:	add	r5, r0, #16
   15db0:	subs	r3, r3, #4
   15db4:	str	r6, [r0, r2]!
   15db8:	ldr	r6, [r1, #4]
   15dbc:	str	r6, [r0, #4]
   15dc0:	ldr	r6, [r1, #8]
   15dc4:	str	r6, [r0, #8]
   15dc8:	ldr	r1, [r1, #12]
   15dcc:	str	r1, [r0, #12]
   15dd0:	mov	r1, r7
   15dd4:	mov	r0, r5
   15dd8:	bne	15da4 <__assert_fail@plt+0x4970>
   15ddc:	ldr	r0, [r4, #4]
   15de0:	str	r0, [sl, #4]
   15de4:	sub	sp, fp, #28
   15de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dec:	ldr	r3, [r0, #4]
   15df0:	mov	r1, r0
   15df4:	cmp	r3, #0
   15df8:	bmi	15e3c <__assert_fail@plt+0x4a08>
   15dfc:	mov	r0, #0
   15e00:	cmp	r3, #1
   15e04:	bxgt	lr
   15e08:	cmp	r3, #0
   15e0c:	mov	r0, #0
   15e10:	mov	r3, #0
   15e14:	beq	15e20 <__assert_fail@plt+0x49ec>
   15e18:	ldr	r1, [r1, #8]
   15e1c:	ldr	r3, [r1]
   15e20:	cmn	r3, #-2147483647	; 0x80000001
   15e24:	mov	r1, #0
   15e28:	mov	r2, #1
   15e2c:	movwcc	r1, #1
   15e30:	cmp	r1, r3, lsr #31
   15e34:	movcs	r0, r2
   15e38:	bx	lr
   15e3c:	mov	r2, #0
   15e40:	cmn	r3, #1
   15e44:	beq	15e50 <__assert_fail@plt+0x4a1c>
   15e48:	mov	r0, r2
   15e4c:	bx	lr
   15e50:	ldr	r0, [r1, #8]
   15e54:	ldr	r0, [r0]
   15e58:	mvn	r1, r0
   15e5c:	cmp	r0, #-2147483648	; 0x80000000
   15e60:	lsr	r1, r1, #31
   15e64:	asrhi	r1, r0, #31
   15e68:	mvn	r0, r1
   15e6c:	lsr	r2, r0, #31
   15e70:	mov	r0, r2
   15e74:	bx	lr
   15e78:	ldr	r3, [r0, #4]
   15e7c:	mov	r2, r0
   15e80:	cmp	r1, #0
   15e84:	bmi	15ec8 <__assert_fail@plt+0x4a94>
   15e88:	cmp	r3, #0
   15e8c:	mvnmi	r0, #0
   15e90:	bxmi	lr
   15e94:	mov	r0, #1
   15e98:	cmp	r3, #1
   15e9c:	bgt	15ed4 <__assert_fail@plt+0x4aa0>
   15ea0:	cmp	r3, #0
   15ea4:	mov	r0, #0
   15ea8:	mov	r3, #0
   15eac:	beq	15eb8 <__assert_fail@plt+0x4a84>
   15eb0:	ldr	r2, [r2, #8]
   15eb4:	ldr	r3, [r2]
   15eb8:	cmp	r3, r1
   15ebc:	movwhi	r0, #1
   15ec0:	subcc	r0, r0, #1
   15ec4:	bx	lr
   15ec8:	mov	r0, #1
   15ecc:	cmn	r3, #1
   15ed0:	ble	15ed8 <__assert_fail@plt+0x4aa4>
   15ed4:	bx	lr
   15ed8:	mvn	r0, #0
   15edc:	bxne	lr
   15ee0:	ldr	r0, [r2, #8]
   15ee4:	rsb	r1, r1, #0
   15ee8:	ldr	r2, [r0]
   15eec:	mov	r0, #0
   15ef0:	cmp	r2, r1
   15ef4:	movwcc	r0, #1
   15ef8:	subhi	r0, r0, #1
   15efc:	bx	lr
   15f00:	ldr	r1, [r0, #4]
   15f04:	mov	r0, #0
   15f08:	cmp	r1, #2
   15f0c:	movwcc	r0, #1
   15f10:	bx	lr
   15f14:	ldr	r3, [r0, #4]
   15f18:	mov	r1, r0
   15f1c:	cmp	r3, #0
   15f20:	bmi	15f64 <__assert_fail@plt+0x4b30>
   15f24:	mov	r0, #0
   15f28:	cmp	r3, #1
   15f2c:	bxgt	lr
   15f30:	cmp	r3, #0
   15f34:	mov	r0, #0
   15f38:	mov	r3, #0
   15f3c:	beq	15f48 <__assert_fail@plt+0x4b14>
   15f40:	ldr	r1, [r1, #8]
   15f44:	ldr	r3, [r1]
   15f48:	cmn	r3, #-2147483647	; 0x80000001
   15f4c:	mov	r1, #0
   15f50:	mov	r2, #1
   15f54:	movwcc	r1, #1
   15f58:	cmp	r1, r3, lsr #31
   15f5c:	movcs	r0, r2
   15f60:	bx	lr
   15f64:	mov	r2, #0
   15f68:	cmn	r3, #1
   15f6c:	beq	15f78 <__assert_fail@plt+0x4b44>
   15f70:	mov	r0, r2
   15f74:	bx	lr
   15f78:	ldr	r0, [r1, #8]
   15f7c:	ldr	r0, [r0]
   15f80:	mvn	r1, r0
   15f84:	cmp	r0, #-2147483648	; 0x80000000
   15f88:	lsr	r1, r1, #31
   15f8c:	asrhi	r1, r0, #31
   15f90:	mvn	r0, r1
   15f94:	lsr	r2, r0, #31
   15f98:	mov	r0, r2
   15f9c:	bx	lr
   15fa0:	ldr	r1, [r0, #4]
   15fa4:	mov	r0, #0
   15fa8:	cmp	r1, #2
   15fac:	movwcc	r0, #1
   15fb0:	bx	lr
   15fb4:	ldr	r3, [r0, #4]
   15fb8:	mov	ip, r0
   15fbc:	mov	r0, #1
   15fc0:	cmp	r3, #0
   15fc4:	mov	r2, r3
   15fc8:	rsbmi	r2, r3, #0
   15fcc:	cmp	r2, #1
   15fd0:	bxgt	lr
   15fd4:	mov	r0, #0
   15fd8:	cmp	r3, #0
   15fdc:	mov	r2, #0
   15fe0:	beq	15fec <__assert_fail@plt+0x4bb8>
   15fe4:	ldr	r2, [ip, #8]
   15fe8:	ldr	r2, [r2]
   15fec:	cmp	r2, r1
   15ff0:	movwhi	r0, #1
   15ff4:	subcc	r0, r0, #1
   15ff8:	bx	lr
   15ffc:	ldr	r3, [r0, #4]
   16000:	cmp	r3, #0
   16004:	bmi	16038 <__assert_fail@plt+0x4c04>
   16008:	mov	r1, #0
   1600c:	cmp	r3, #1
   16010:	bgt	16030 <__assert_fail@plt+0x4bfc>
   16014:	mov	r2, #1
   16018:	cmp	r3, #0
   1601c:	beq	16064 <__assert_fail@plt+0x4c30>
   16020:	ldr	r0, [r0, #8]
   16024:	ldr	r0, [r0]
   16028:	cmp	r0, #32768	; 0x8000
   1602c:	movcc	r1, r2
   16030:	mov	r0, r1
   16034:	bx	lr
   16038:	mov	r2, #0
   1603c:	cmn	r3, #1
   16040:	bne	16064 <__assert_fail@plt+0x4c30>
   16044:	ldr	r0, [r0, #8]
   16048:	mov	r1, #0
   1604c:	ldr	r0, [r0]
   16050:	cmp	r0, #32768	; 0x8000
   16054:	movwcc	r1, #1
   16058:	subhi	r1, r1, #1
   1605c:	mvn	r0, r1
   16060:	lsr	r2, r0, #31
   16064:	mov	r1, r2
   16068:	mov	r0, r1
   1606c:	bx	lr
   16070:	ldr	r2, [r0, #4]
   16074:	mov	r1, r0
   16078:	mov	r0, #0
   1607c:	cmp	r2, #0
   16080:	bxmi	lr
   16084:	cmp	r2, #1
   16088:	bgt	160ac <__assert_fail@plt+0x4c78>
   1608c:	cmp	r2, #0
   16090:	moveq	r0, #1
   16094:	bxeq	lr
   16098:	ldr	r0, [r1, #8]
   1609c:	ldr	r1, [r0]
   160a0:	mov	r0, #0
   160a4:	cmp	r1, #65536	; 0x10000
   160a8:	movwcc	r0, #1
   160ac:	bx	lr
   160b0:	ldr	r1, [r0, #4]
   160b4:	cmp	r1, #0
   160b8:	beq	160d4 <__assert_fail@plt+0x4ca0>
   160bc:	ldr	r0, [r0, #8]
   160c0:	cmn	r1, #1
   160c4:	ldr	r0, [r0]
   160c8:	ble	160e0 <__assert_fail@plt+0x4cac>
   160cc:	bic	r0, r0, #-2147483648	; 0x80000000
   160d0:	bx	lr
   160d4:	mov	r0, #0
   160d8:	bic	r0, r0, #-2147483648	; 0x80000000
   160dc:	bx	lr
   160e0:	sub	r0, r0, #1
   160e4:	mvn	r1, #-2147483648	; 0x80000000
   160e8:	orr	r0, r0, #-2147483648	; 0x80000000
   160ec:	eor	r0, r0, r1
   160f0:	bx	lr
   160f4:	ldr	r1, [r0, #4]
   160f8:	cmp	r1, #0
   160fc:	moveq	r0, #0
   16100:	bxeq	lr
   16104:	ldr	r0, [r0, #8]
   16108:	ldr	r0, [r0]
   1610c:	bx	lr
   16110:	ldr	r0, [r0, #4]
   16114:	cmp	r0, #0
   16118:	rsbmi	r0, r0, #0
   1611c:	bx	lr
   16120:	mov	r2, r0
   16124:	mov	r0, #0
   16128:	cmp	r1, #0
   1612c:	bmi	1614c <__assert_fail@plt+0x4d18>
   16130:	ldr	r3, [r2, #4]
   16134:	cmp	r3, #0
   16138:	rsbmi	r3, r3, #0
   1613c:	cmp	r3, r1
   16140:	bxle	lr
   16144:	ldr	r0, [r2, #8]
   16148:	ldr	r0, [r0, r1, lsl #2]
   1614c:	bx	lr
   16150:	push	{r4, r5, fp, lr}
   16154:	add	fp, sp, #8
   16158:	cmp	r1, #0
   1615c:	mov	r4, r0
   16160:	mov	r0, #1
   16164:	subne	r1, r1, #1
   16168:	add	r5, r0, r1, lsr #5
   1616c:	ldr	r1, [r4]
   16170:	cmp	r1, #0
   16174:	beq	16198 <__assert_fail@plt+0x4d64>
   16178:	movw	r0, #45352	; 0xb128
   1617c:	lsl	r1, r1, #2
   16180:	lsl	r2, r5, #2
   16184:	movt	r0, #4
   16188:	ldr	r3, [r0]
   1618c:	ldr	r0, [r4, #8]
   16190:	blx	r3
   16194:	b	161ac <__assert_fail@plt+0x4d78>
   16198:	movw	r0, #45348	; 0xb124
   1619c:	movt	r0, #4
   161a0:	ldr	r1, [r0]
   161a4:	lsl	r0, r5, #2
   161a8:	blx	r1
   161ac:	str	r0, [r4, #8]
   161b0:	str	r5, [r4]
   161b4:	ldr	r0, [r4, #4]
   161b8:	cmp	r0, #0
   161bc:	rsbmi	r0, r0, #0
   161c0:	cmp	r0, r5
   161c4:	movgt	r0, #0
   161c8:	strgt	r0, [r4, #4]
   161cc:	pop	{r4, r5, fp, pc}
   161d0:	ldr	r0, [r0, #8]
   161d4:	bx	lr
   161d8:	push	{r4, r5, fp, lr}
   161dc:	add	fp, sp, #8
   161e0:	cmp	r1, #0
   161e4:	ble	16270 <__assert_fail@plt+0x4e3c>
   161e8:	mov	r5, r1
   161ec:	ldr	r1, [r0]
   161f0:	mov	r4, r0
   161f4:	cmp	r1, r5
   161f8:	bge	1622c <__assert_fail@plt+0x4df8>
   161fc:	cmp	r5, #1
   16200:	movle	r5, #1
   16204:	cmp	r1, #0
   16208:	beq	16234 <__assert_fail@plt+0x4e00>
   1620c:	movw	r0, #45352	; 0xb128
   16210:	lsl	r1, r1, #2
   16214:	lsl	r2, r5, #2
   16218:	movt	r0, #4
   1621c:	ldr	r3, [r0]
   16220:	ldr	r0, [r4, #8]
   16224:	blx	r3
   16228:	b	16248 <__assert_fail@plt+0x4e14>
   1622c:	ldr	r0, [r4, #8]
   16230:	pop	{r4, r5, fp, pc}
   16234:	movw	r0, #45348	; 0xb124
   16238:	movt	r0, #4
   1623c:	ldr	r1, [r0]
   16240:	lsl	r0, r5, #2
   16244:	blx	r1
   16248:	str	r0, [r4, #8]
   1624c:	str	r5, [r4]
   16250:	ldr	r1, [r4, #4]
   16254:	cmp	r1, #0
   16258:	rsbmi	r1, r1, #0
   1625c:	cmp	r1, r5
   16260:	pople	{r4, r5, fp, pc}
   16264:	mov	r1, #0
   16268:	str	r1, [r4, #4]
   1626c:	pop	{r4, r5, fp, pc}
   16270:	movw	r0, #40586	; 0x9e8a
   16274:	movw	r1, #37260	; 0x918c
   16278:	movw	r3, #38143	; 0x94ff
   1627c:	movw	r2, #1663	; 0x67f
   16280:	movt	r0, #3
   16284:	movt	r1, #3
   16288:	movt	r3, #3
   1628c:	bl	11434 <__assert_fail@plt>
   16290:	push	{r4, r5, fp, lr}
   16294:	add	fp, sp, #8
   16298:	cmp	r1, #0
   1629c:	ble	16328 <__assert_fail@plt+0x4ef4>
   162a0:	mov	r5, r1
   162a4:	ldr	r1, [r0]
   162a8:	mov	r4, r0
   162ac:	cmp	r1, r5
   162b0:	bge	162e4 <__assert_fail@plt+0x4eb0>
   162b4:	cmp	r5, #1
   162b8:	movle	r5, #1
   162bc:	cmp	r1, #0
   162c0:	beq	162ec <__assert_fail@plt+0x4eb8>
   162c4:	movw	r0, #45352	; 0xb128
   162c8:	lsl	r1, r1, #2
   162cc:	lsl	r2, r5, #2
   162d0:	movt	r0, #4
   162d4:	ldr	r3, [r0]
   162d8:	ldr	r0, [r4, #8]
   162dc:	blx	r3
   162e0:	b	16300 <__assert_fail@plt+0x4ecc>
   162e4:	ldr	r0, [r4, #8]
   162e8:	pop	{r4, r5, fp, pc}
   162ec:	movw	r0, #45348	; 0xb124
   162f0:	movt	r0, #4
   162f4:	ldr	r1, [r0]
   162f8:	lsl	r0, r5, #2
   162fc:	blx	r1
   16300:	str	r0, [r4, #8]
   16304:	str	r5, [r4]
   16308:	ldr	r1, [r4, #4]
   1630c:	cmp	r1, #0
   16310:	rsbmi	r1, r1, #0
   16314:	cmp	r1, r5
   16318:	pople	{r4, r5, fp, pc}
   1631c:	mov	r1, #0
   16320:	str	r1, [r4, #4]
   16324:	pop	{r4, r5, fp, pc}
   16328:	movw	r0, #40586	; 0x9e8a
   1632c:	movw	r1, #37260	; 0x918c
   16330:	movw	r3, #38143	; 0x94ff
   16334:	movw	r2, #1663	; 0x67f
   16338:	movt	r0, #3
   1633c:	movt	r1, #3
   16340:	movt	r3, #3
   16344:	bl	11434 <__assert_fail@plt>
   16348:	cmp	r1, #0
   1634c:	mov	r3, r1
   16350:	rsbmi	r3, r1, #0
   16354:	push	{fp, lr}
   16358:	mov	fp, sp
   1635c:	ldr	r2, [r0, #8]
   16360:	sub	ip, r2, #4
   16364:	mov	r2, r3
   16368:	cmp	r3, #1
   1636c:	blt	16380 <__assert_fail@plt+0x4f4c>
   16370:	ldr	lr, [ip, r2, lsl #2]
   16374:	sub	r3, r2, #1
   16378:	cmp	lr, #0
   1637c:	beq	16364 <__assert_fail@plt+0x4f30>
   16380:	cmp	r1, #0
   16384:	rsbmi	r2, r2, #0
   16388:	str	r2, [r0, #4]
   1638c:	pop	{fp, pc}
   16390:	push	{fp, lr}
   16394:	mov	fp, sp
   16398:	mov	r3, #0
   1639c:	cmp	r2, #0
   163a0:	sub	ip, r1, #4
   163a4:	str	r3, [r0]
   163a8:	mov	r3, r2
   163ac:	rsbmi	r3, r2, #0
   163b0:	str	r2, [r0, #4]
   163b4:	str	r1, [r0, #8]
   163b8:	mov	r1, r3
   163bc:	cmp	r3, #1
   163c0:	blt	163d4 <__assert_fail@plt+0x4fa0>
   163c4:	ldr	lr, [ip, r1, lsl #2]
   163c8:	sub	r3, r1, #1
   163cc:	cmp	lr, #0
   163d0:	beq	163b8 <__assert_fail@plt+0x4f84>
   163d4:	cmp	r2, #0
   163d8:	rsbmi	r1, r1, #0
   163dc:	str	r1, [r0, #4]
   163e0:	pop	{fp, pc}
   163e4:	nop	{0}
   163e8:	push	{r4, r5, r6, sl, fp, lr}
   163ec:	add	fp, sp, #16
   163f0:	vpush	{d8-d11}
   163f4:	vcmpe.f64	d0, d0
   163f8:	mov	r4, r0
   163fc:	mov	r5, #0
   16400:	vmrs	APSR_nzcv, fpscr
   16404:	bvs	16560 <__assert_fail@plt+0x512c>
   16408:	vmov.f64	d16, #96	; 0x3f000000  0.5
   1640c:	vmov.f64	d8, d0
   16410:	vmul.f64	d16, d0, d16
   16414:	vcmp.f64	d16, d0
   16418:	vmrs	APSR_nzcv, fpscr
   1641c:	beq	16560 <__assert_fail@plt+0x512c>
   16420:	vcmpe.f64	d8, #0.0
   16424:	vneg.f64	d16, d8
   16428:	vmov.f64	d11, d8
   1642c:	vmov.f64	d9, #112	; 0x3f800000  1.0
   16430:	vmrs	APSR_nzcv, fpscr
   16434:	vmovmi.f64	d11, d16
   16438:	vcmpe.f64	d11, d9
   1643c:	vmrs	APSR_nzcv, fpscr
   16440:	bmi	16560 <__assert_fail@plt+0x512c>
   16444:	vldr	d10, [pc, #340]	; 165a0 <__assert_fail@plt+0x516c>
   16448:	mov	r5, #1
   1644c:	vcmpe.f64	d11, d10
   16450:	vmrs	APSR_nzcv, fpscr
   16454:	blt	16474 <__assert_fail@plt+0x5040>
   16458:	vldr	d16, [pc, #328]	; 165a8 <__assert_fail@plt+0x5174>
   1645c:	mov	r5, #1
   16460:	vmul.f64	d11, d11, d16
   16464:	add	r5, r5, #1
   16468:	vcmpe.f64	d11, d10
   1646c:	vmrs	APSR_nzcv, fpscr
   16470:	bge	16460 <__assert_fail@plt+0x502c>
   16474:	ldr	r1, [r4]
   16478:	cmp	r5, r1
   1647c:	ble	164b4 <__assert_fail@plt+0x5080>
   16480:	cmp	r5, #1
   16484:	mov	r6, r5
   16488:	movls	r6, #1
   1648c:	cmp	r1, #0
   16490:	beq	164bc <__assert_fail@plt+0x5088>
   16494:	movw	r0, #45352	; 0xb128
   16498:	lsl	r1, r1, #2
   1649c:	lsl	r2, r6, #2
   164a0:	movt	r0, #4
   164a4:	ldr	r3, [r0]
   164a8:	ldr	r0, [r4, #8]
   164ac:	blx	r3
   164b0:	b	164d0 <__assert_fail@plt+0x509c>
   164b4:	ldr	r0, [r4, #8]
   164b8:	b	164f0 <__assert_fail@plt+0x50bc>
   164bc:	movw	r0, #45348	; 0xb124
   164c0:	movt	r0, #4
   164c4:	ldr	r1, [r0]
   164c8:	lsl	r0, r6, #2
   164cc:	blx	r1
   164d0:	str	r0, [r4, #8]
   164d4:	str	r6, [r4]
   164d8:	ldr	r1, [r4, #4]
   164dc:	cmp	r1, #0
   164e0:	rsbmi	r1, r1, #0
   164e4:	cmp	r1, r6
   164e8:	movgt	r1, #0
   164ec:	strgt	r1, [r4, #4]
   164f0:	vcvt.u32.f64	s0, d11
   164f4:	vcvt.f64.u32	d16, s0
   164f8:	vsub.f64	d16, d11, d16
   164fc:	vcmpe.f64	d16, d9
   16500:	vmrs	APSR_nzcv, fpscr
   16504:	bpl	1658c <__assert_fail@plt+0x5158>
   16508:	vmov	r1, s0
   1650c:	sub	r2, r5, #1
   16510:	cmp	r2, #1
   16514:	str	r1, [r0, r2, lsl #2]
   16518:	blt	16554 <__assert_fail@plt+0x5120>
   1651c:	sub	r1, r5, #2
   16520:	vmul.f64	d16, d16, d10
   16524:	vcvt.u32.f64	s0, d16
   16528:	vcvt.f64.u32	d17, s0
   1652c:	vsub.f64	d16, d16, d17
   16530:	vcmpe.f64	d16, d9
   16534:	vmrs	APSR_nzcv, fpscr
   16538:	bpl	1656c <__assert_fail@plt+0x5138>
   1653c:	vmov	r2, s0
   16540:	cmp	r1, #0
   16544:	str	r2, [r0, r1, lsl #2]
   16548:	sub	r2, r1, #1
   1654c:	mov	r1, r2
   16550:	bgt	16520 <__assert_fail@plt+0x50ec>
   16554:	vcmpe.f64	d8, #0.0
   16558:	vmrs	APSR_nzcv, fpscr
   1655c:	rsbmi	r5, r5, #0
   16560:	str	r5, [r4, #4]
   16564:	vpop	{d8-d11}
   16568:	pop	{r4, r5, r6, sl, fp, pc}
   1656c:	movw	r0, #38194	; 0x9532
   16570:	movw	r1, #37260	; 0x918c
   16574:	movw	r3, #38202	; 0x953a
   16578:	mov	r2, #1744	; 0x6d0
   1657c:	movt	r0, #3
   16580:	movt	r1, #3
   16584:	movt	r3, #3
   16588:	bl	11434 <__assert_fail@plt>
   1658c:	movw	r0, #38194	; 0x9532
   16590:	movw	r1, #37260	; 0x918c
   16594:	movw	r3, #38202	; 0x953a
   16598:	movw	r2, #1736	; 0x6c8
   1659c:	b	1657c <__assert_fail@plt+0x5148>
   165a0:	andeq	r0, r0, r0
   165a4:	mvnsmi	r0, r0
   165a8:	andeq	r0, r0, r0
   165ac:	ldclcc	0, cr0, [r0]
   165b0:	movw	r1, #37256	; 0x9188
   165b4:	mov	r2, #0
   165b8:	movt	r1, #3
   165bc:	str	r2, [r0]
   165c0:	str	r2, [r0, #4]
   165c4:	str	r1, [r0, #8]
   165c8:	b	163e8 <__assert_fail@plt+0x4fb4>
   165cc:	nop	{0}
   165d0:	push	{r4, r5, fp, lr}
   165d4:	add	fp, sp, #8
   165d8:	ldr	lr, [r0, #4]
   165dc:	cmp	lr, #0
   165e0:	mov	r2, lr
   165e4:	rsbmi	r2, lr, #0
   165e8:	cmp	r2, #0
   165ec:	beq	166cc <__assert_fail@plt+0x5298>
   165f0:	ldr	r0, [r0, #8]
   165f4:	sub	ip, r2, #1
   165f8:	mov	r4, #0
   165fc:	ldr	r3, [r0, ip, lsl #2]
   16600:	cmp	r4, r3, lsr #24
   16604:	mov	r1, r3
   16608:	bne	16624 <__assert_fail@plt+0x51f0>
   1660c:	mov	r4, #0
   16610:	mov	r1, r3
   16614:	lsl	r1, r1, #8
   16618:	add	r4, r4, #8
   1661c:	cmp	r1, #16777216	; 0x1000000
   16620:	bcc	16614 <__assert_fail@plt+0x51e0>
   16624:	cmp	r1, #0
   16628:	bmi	1663c <__assert_fail@plt+0x5208>
   1662c:	lsl	r1, r1, #1
   16630:	add	r4, r4, #1
   16634:	cmn	r1, #1
   16638:	bgt	1662c <__assert_fail@plt+0x51f8>
   1663c:	add	r5, r4, #21
   16640:	cmn	r5, #1
   16644:	bgt	16658 <__assert_fail@plt+0x5224>
   16648:	mvn	r1, #20
   1664c:	sub	r1, r1, r4
   16650:	mvn	r4, #0
   16654:	and	r3, r3, r4, lsl r1
   16658:	vmov	s0, r3
   1665c:	cmp	ip, #1
   16660:	vcvt.f64.u32	d16, s0
   16664:	blt	166bc <__assert_fail@plt+0x5288>
   16668:	vldr	d17, [pc, #104]	; 166d8 <__assert_fail@plt+0x52a4>
   1666c:	sub	r2, r2, #2
   16670:	mvn	r3, #0
   16674:	b	16688 <__assert_fail@plt+0x5254>
   16678:	sub	r1, r2, #1
   1667c:	cmp	r2, #0
   16680:	mov	r2, r1
   16684:	ble	166bc <__assert_fail@plt+0x5288>
   16688:	vmul.f64	d16, d16, d17
   1668c:	cmp	r5, #1
   16690:	blt	16678 <__assert_fail@plt+0x5244>
   16694:	ldr	r4, [r0, r2, lsl #2]
   16698:	sub	r1, r5, #32
   1669c:	cmn	r1, #1
   166a0:	rsble	r5, r5, #32
   166a4:	andle	r4, r4, r3, lsl r5
   166a8:	mov	r5, r1
   166ac:	vmov	s0, r4
   166b0:	vcvt.f64.u32	d18, s0
   166b4:	vadd.f64	d16, d16, d18
   166b8:	b	16678 <__assert_fail@plt+0x5244>
   166bc:	vneg.f64	d17, d16
   166c0:	cmp	lr, #0
   166c4:	vselge.f64	d0, d16, d17
   166c8:	pop	{r4, r5, fp, pc}
   166cc:	vmov.i32	d0, #0	; 0x00000000
   166d0:	pop	{r4, r5, fp, pc}
   166d4:	nop	{0}
   166d8:	andeq	r0, r0, r0
   166dc:	mvnsmi	r0, r0
   166e0:	vcmpe.f64	d0, #0.0
   166e4:	vneg.f64	d16, d0
   166e8:	ldr	r2, [r0, #4]
   166ec:	vmrs	APSR_nzcv, fpscr
   166f0:	vselge.f64	d16, d0, d16
   166f4:	cmp	r2, #0
   166f8:	beq	167ac <__assert_fail@plt+0x5378>
   166fc:	rsbmi	r2, r2, #0
   16700:	cmp	r2, #2
   16704:	blt	16758 <__assert_fail@plt+0x5324>
   16708:	sub	r1, r2, #1
   1670c:	sub	r3, r2, #2
   16710:	and	r1, r1, #3
   16714:	cmp	r3, #3
   16718:	bcc	16740 <__assert_fail@plt+0x530c>
   1671c:	vldr	d17, [pc, #172]	; 167d0 <__assert_fail@plt+0x539c>
   16720:	sub	r3, r1, r2
   16724:	add	r3, r3, #1
   16728:	vmul.f64	d16, d16, d17
   1672c:	adds	r3, r3, #4
   16730:	vmul.f64	d16, d16, d17
   16734:	vmul.f64	d16, d16, d17
   16738:	vmul.f64	d16, d16, d17
   1673c:	bne	16728 <__assert_fail@plt+0x52f4>
   16740:	cmp	r1, #0
   16744:	beq	16758 <__assert_fail@plt+0x5324>
   16748:	vldr	d17, [pc, #128]	; 167d0 <__assert_fail@plt+0x539c>
   1674c:	vmul.f64	d16, d16, d17
   16750:	subs	r1, r1, #1
   16754:	bne	1674c <__assert_fail@plt+0x5318>
   16758:	vldr	d17, [pc, #120]	; 167d8 <__assert_fail@plt+0x53a4>
   1675c:	mvn	ip, #0
   16760:	vcmpe.f64	d16, d17
   16764:	vmrs	APSR_nzcv, fpscr
   16768:	bge	167bc <__assert_fail@plt+0x5388>
   1676c:	cmp	r2, #1
   16770:	blt	167ac <__assert_fail@plt+0x5378>
   16774:	ldr	r0, [r0, #8]
   16778:	sub	r0, r0, #4
   1677c:	vcvt.u32.f64	s0, d16
   16780:	ldr	r3, [r0, r2, lsl #2]
   16784:	vmov	r1, s0
   16788:	cmp	r3, r1
   1678c:	bhi	167c4 <__assert_fail@plt+0x5390>
   16790:	bcc	167bc <__assert_fail@plt+0x5388>
   16794:	vcvt.f64.u32	d18, s0
   16798:	sub	r2, r2, #1
   1679c:	cmp	r2, #0
   167a0:	vsub.f64	d16, d16, d18
   167a4:	vmul.f64	d16, d16, d17
   167a8:	bgt	1677c <__assert_fail@plt+0x5348>
   167ac:	vcmpe.f64	d16, #0.0
   167b0:	mov	ip, #0
   167b4:	vmrs	APSR_nzcv, fpscr
   167b8:	mvngt	ip, #0
   167bc:	mov	r0, ip
   167c0:	bx	lr
   167c4:	mov	ip, #1
   167c8:	mov	r0, ip
   167cc:	bx	lr
   167d0:	andeq	r0, r0, r0
   167d4:	ldclcc	0, cr0, [r0]
   167d8:	andeq	r0, r0, r0
   167dc:	mvnsmi	r0, r0
   167e0:	ldr	r2, [r0, #4]
   167e4:	mov	ip, r0
   167e8:	cmn	r2, #1
   167ec:	ble	168d4 <__assert_fail@plt+0x54a0>
   167f0:	vcmpe.f64	d0, #0.0
   167f4:	mov	r0, #1
   167f8:	vmrs	APSR_nzcv, fpscr
   167fc:	bmi	169a0 <__assert_fail@plt+0x556c>
   16800:	vcmpe.f64	d0, #0.0
   16804:	vneg.f64	d16, d0
   16808:	vmrs	APSR_nzcv, fpscr
   1680c:	vselge.f64	d16, d0, d16
   16810:	cmp	r2, #0
   16814:	beq	168c0 <__assert_fail@plt+0x548c>
   16818:	cmp	r2, #2
   1681c:	blt	16870 <__assert_fail@plt+0x543c>
   16820:	sub	r1, r2, #1
   16824:	and	r3, r1, #3
   16828:	sub	r1, r2, #2
   1682c:	cmp	r1, #3
   16830:	bcc	16858 <__assert_fail@plt+0x5424>
   16834:	vldr	d17, [pc, #380]	; 169b8 <__assert_fail@plt+0x5584>
   16838:	sub	r1, r3, r2
   1683c:	add	r1, r1, #1
   16840:	vmul.f64	d16, d16, d17
   16844:	adds	r1, r1, #4
   16848:	vmul.f64	d16, d16, d17
   1684c:	vmul.f64	d16, d16, d17
   16850:	vmul.f64	d16, d16, d17
   16854:	bne	16840 <__assert_fail@plt+0x540c>
   16858:	cmp	r3, #0
   1685c:	beq	16870 <__assert_fail@plt+0x543c>
   16860:	vldr	d17, [pc, #336]	; 169b8 <__assert_fail@plt+0x5584>
   16864:	vmul.f64	d16, d16, d17
   16868:	subs	r3, r3, #1
   1686c:	bne	16864 <__assert_fail@plt+0x5430>
   16870:	vldr	d17, [pc, #328]	; 169c0 <__assert_fail@plt+0x558c>
   16874:	vcmpe.f64	d16, d17
   16878:	vmrs	APSR_nzcv, fpscr
   1687c:	bge	169a4 <__assert_fail@plt+0x5570>
   16880:	cmp	r2, #1
   16884:	blt	168c0 <__assert_fail@plt+0x548c>
   16888:	ldr	r1, [ip, #8]
   1688c:	sub	ip, r1, #4
   16890:	vcvt.u32.f64	s0, d16
   16894:	ldr	r3, [ip, r2, lsl #2]
   16898:	vmov	r1, s0
   1689c:	cmp	r3, r1
   168a0:	bxhi	lr
   168a4:	bcc	169a4 <__assert_fail@plt+0x5570>
   168a8:	vcvt.f64.u32	d18, s0
   168ac:	sub	r2, r2, #1
   168b0:	cmp	r2, #0
   168b4:	vsub.f64	d16, d16, d18
   168b8:	vmul.f64	d16, d16, d17
   168bc:	bgt	16890 <__assert_fail@plt+0x545c>
   168c0:	vcmpe.f64	d16, #0.0
   168c4:	mov	r0, #0
   168c8:	vmrs	APSR_nzcv, fpscr
   168cc:	mvngt	r0, #0
   168d0:	bx	lr
   168d4:	vcmpe.f64	d0, #0.0
   168d8:	mvn	r0, #0
   168dc:	vmrs	APSR_nzcv, fpscr
   168e0:	bge	169a0 <__assert_fail@plt+0x556c>
   168e4:	vneg.f64	d16, d0
   168e8:	cmn	r2, #2
   168ec:	bgt	16944 <__assert_fail@plt+0x5510>
   168f0:	mov	r1, #3
   168f4:	bic	r3, r1, r2
   168f8:	mvn	r1, #1
   168fc:	sub	r1, r1, r2
   16900:	cmp	r1, #3
   16904:	bcc	1692c <__assert_fail@plt+0x54f8>
   16908:	vldr	d17, [pc, #168]	; 169b8 <__assert_fail@plt+0x5584>
   1690c:	add	r1, r2, r3
   16910:	add	r1, r1, #1
   16914:	vmul.f64	d16, d16, d17
   16918:	adds	r1, r1, #4
   1691c:	vmul.f64	d16, d16, d17
   16920:	vmul.f64	d16, d16, d17
   16924:	vmul.f64	d16, d16, d17
   16928:	bne	16914 <__assert_fail@plt+0x54e0>
   1692c:	cmp	r3, #0
   16930:	beq	16944 <__assert_fail@plt+0x5510>
   16934:	vldr	d17, [pc, #124]	; 169b8 <__assert_fail@plt+0x5584>
   16938:	vmul.f64	d16, d16, d17
   1693c:	subs	r3, r3, #1
   16940:	bne	16938 <__assert_fail@plt+0x5504>
   16944:	vldr	d17, [pc, #116]	; 169c0 <__assert_fail@plt+0x558c>
   16948:	vcmpe.f64	d16, d17
   1694c:	vmrs	APSR_nzcv, fpscr
   16950:	bge	169ac <__assert_fail@plt+0x5578>
   16954:	ldr	r1, [ip, #8]
   16958:	rsb	r2, r2, #0
   1695c:	sub	ip, r1, #4
   16960:	vcvt.u32.f64	s0, d16
   16964:	ldr	r3, [ip, r2, lsl #2]
   16968:	vmov	r1, s0
   1696c:	cmp	r3, r1
   16970:	bhi	169a0 <__assert_fail@plt+0x556c>
   16974:	bcc	169ac <__assert_fail@plt+0x5578>
   16978:	vcvt.f64.u32	d18, s0
   1697c:	sub	r2, r2, #1
   16980:	cmp	r2, #0
   16984:	vsub.f64	d16, d16, d18
   16988:	vmul.f64	d16, d16, d17
   1698c:	bgt	16960 <__assert_fail@plt+0x552c>
   16990:	vcmpe.f64	d16, #0.0
   16994:	mov	r0, #0
   16998:	vmrs	APSR_nzcv, fpscr
   1699c:	movwgt	r0, #1
   169a0:	bx	lr
   169a4:	mvn	r0, #0
   169a8:	bx	lr
   169ac:	mov	r0, #1
   169b0:	bx	lr
   169b4:	nop	{0}
   169b8:	andeq	r0, r0, r0
   169bc:	ldclcc	0, cr0, [r0]
   169c0:	andeq	r0, r0, r0
   169c4:	mvnsmi	r0, r0
   169c8:	ldr	r1, [r0, #4]
   169cc:	mov	r2, #1
   169d0:	cmp	r1, #0
   169d4:	asr	r0, r1, #31
   169d8:	addgt	r0, r2, r1, asr #31
   169dc:	bx	lr
   169e0:	ldr	r3, [r0, #4]
   169e4:	cmp	r3, #0
   169e8:	mvnmi	r0, #0
   169ec:	bxmi	lr
   169f0:	mov	r2, r0
   169f4:	mov	r0, #1
   169f8:	cmp	r3, #1
   169fc:	bxgt	lr
   16a00:	cmp	r3, #0
   16a04:	mov	r0, #0
   16a08:	mov	r3, #0
   16a0c:	beq	16a18 <__assert_fail@plt+0x55e4>
   16a10:	ldr	r2, [r2, #8]
   16a14:	ldr	r3, [r2]
   16a18:	cmp	r3, r1
   16a1c:	movwhi	r0, #1
   16a20:	subcc	r0, r0, #1
   16a24:	bx	lr
   16a28:	ldr	r3, [r1, #4]
   16a2c:	ldr	r2, [r0, #4]
   16a30:	cmp	r2, r3
   16a34:	bne	16a74 <__assert_fail@plt+0x5640>
   16a38:	cmp	r2, #0
   16a3c:	bmi	16a80 <__assert_fail@plt+0x564c>
   16a40:	ldr	r1, [r1, #8]
   16a44:	ldr	r0, [r0, #8]
   16a48:	sub	ip, r0, #4
   16a4c:	sub	r1, r1, #4
   16a50:	cmp	r2, #1
   16a54:	blt	16ac0 <__assert_fail@plt+0x568c>
   16a58:	sub	r3, r2, #1
   16a5c:	ldr	r0, [r1, r2, lsl #2]
   16a60:	ldr	r2, [ip, r2, lsl #2]
   16a64:	cmp	r2, r0
   16a68:	mov	r2, r3
   16a6c:	beq	16a50 <__assert_fail@plt+0x561c>
   16a70:	b	16ab4 <__assert_fail@plt+0x5680>
   16a74:	mov	r0, #1
   16a78:	mvnlt	r0, #0
   16a7c:	bx	lr
   16a80:	ldr	r0, [r0, #8]
   16a84:	ldr	r1, [r1, #8]
   16a88:	rsb	r2, r2, #0
   16a8c:	sub	ip, r1, #4
   16a90:	sub	r0, r0, #4
   16a94:	cmp	r2, #1
   16a98:	blt	16ac0 <__assert_fail@plt+0x568c>
   16a9c:	sub	r3, r2, #1
   16aa0:	ldr	r1, [r0, r2, lsl #2]
   16aa4:	ldr	r2, [ip, r2, lsl #2]
   16aa8:	cmp	r2, r1
   16aac:	mov	r2, r3
   16ab0:	beq	16a94 <__assert_fail@plt+0x5660>
   16ab4:	mvn	r0, #0
   16ab8:	movwhi	r0, #1
   16abc:	bx	lr
   16ac0:	mov	r0, #0
   16ac4:	bx	lr
   16ac8:	ldr	r3, [r1, #4]
   16acc:	ldr	r2, [r1, #8]
   16ad0:	ldr	r1, [r0, #4]
   16ad4:	ldr	r0, [r0, #8]
   16ad8:	cmp	r3, #0
   16adc:	rsbmi	r3, r3, #0
   16ae0:	cmp	r1, #0
   16ae4:	rsbmi	r1, r1, #0
   16ae8:	cmp	r1, r3
   16aec:	bne	16b28 <__assert_fail@plt+0x56f4>
   16af0:	sub	ip, r0, #4
   16af4:	sub	r2, r2, #4
   16af8:	cmp	r1, #1
   16afc:	movlt	r0, #0
   16b00:	bxlt	lr
   16b04:	sub	r3, r1, #1
   16b08:	ldr	r0, [r2, r1, lsl #2]
   16b0c:	ldr	r1, [ip, r1, lsl #2]
   16b10:	cmp	r1, r0
   16b14:	mov	r1, r3
   16b18:	beq	16af8 <__assert_fail@plt+0x56c4>
   16b1c:	mvn	r0, #0
   16b20:	movwhi	r0, #1
   16b24:	bx	lr
   16b28:	mov	r0, #1
   16b2c:	mvnlt	r0, #0
   16b30:	bx	lr
   16b34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b38:	add	fp, sp, #28
   16b3c:	sub	sp, sp, #20
   16b40:	mov	r4, r0
   16b44:	cmp	r0, r1
   16b48:	beq	16b9c <__assert_fail@plt+0x5768>
   16b4c:	mov	r8, r1
   16b50:	ldr	r1, [r4]
   16b54:	ldr	r5, [r8, #4]
   16b58:	cmp	r5, #0
   16b5c:	rsbmi	r5, r5, #0
   16b60:	cmp	r5, r1
   16b64:	ble	16ba4 <__assert_fail@plt+0x5770>
   16b68:	cmp	r5, #1
   16b6c:	mov	r7, r5
   16b70:	movle	r7, #1
   16b74:	cmp	r1, #0
   16b78:	beq	16bb4 <__assert_fail@plt+0x5780>
   16b7c:	movw	r0, #45352	; 0xb128
   16b80:	lsl	r1, r1, #2
   16b84:	lsl	r2, r7, #2
   16b88:	movt	r0, #4
   16b8c:	ldr	r3, [r0]
   16b90:	ldr	r0, [r4, #8]
   16b94:	blx	r3
   16b98:	b	16bc8 <__assert_fail@plt+0x5794>
   16b9c:	ldr	r0, [r4, #4]
   16ba0:	b	16d54 <__assert_fail@plt+0x5920>
   16ba4:	ldr	r0, [r4, #8]
   16ba8:	cmp	r5, #1
   16bac:	bge	16bf0 <__assert_fail@plt+0x57bc>
   16bb0:	b	16d4c <__assert_fail@plt+0x5918>
   16bb4:	movw	r0, #45348	; 0xb124
   16bb8:	movt	r0, #4
   16bbc:	ldr	r1, [r0]
   16bc0:	lsl	r0, r7, #2
   16bc4:	blx	r1
   16bc8:	str	r0, [r4, #8]
   16bcc:	str	r7, [r4]
   16bd0:	ldr	r1, [r4, #4]
   16bd4:	cmp	r1, #0
   16bd8:	rsbmi	r1, r1, #0
   16bdc:	cmp	r1, r7
   16be0:	movgt	r1, #0
   16be4:	strgt	r1, [r4, #4]
   16be8:	cmp	r5, #1
   16bec:	blt	16d4c <__assert_fail@plt+0x5918>
   16bf0:	ldr	r1, [r8, #8]
   16bf4:	mov	r2, #0
   16bf8:	cmp	r5, #4
   16bfc:	bcc	16ce0 <__assert_fail@plt+0x58ac>
   16c00:	add	r3, r1, r5, lsl #2
   16c04:	cmp	r0, r3
   16c08:	addcc	r3, r0, r5, lsl #2
   16c0c:	cmpcc	r1, r3
   16c10:	bcc	16ce0 <__assert_fail@plt+0x58ac>
   16c14:	bic	r2, r5, #-2147483645	; 0x80000003
   16c18:	stmib	sp, {r5, r8}
   16c1c:	mov	r3, #1
   16c20:	mov	sl, #0
   16c24:	str	r4, [sp, #12]
   16c28:	sub	r5, r2, #4
   16c2c:	add	r3, r3, r5, lsr #2
   16c30:	cmp	r5, #12
   16c34:	and	r7, r3, #3
   16c38:	str	r7, [sp, #16]
   16c3c:	bcc	16ca4 <__assert_fail@plt+0x5870>
   16c40:	ldr	r7, [sp, #16]
   16c44:	mov	r5, #0
   16c48:	mov	lr, #48	; 0x30
   16c4c:	mov	sl, #0
   16c50:	sub	r3, r3, r7
   16c54:	add	r6, r1, r5
   16c58:	add	ip, r0, r5
   16c5c:	add	r5, r5, #64	; 0x40
   16c60:	subs	r3, r3, #4
   16c64:	add	sl, sl, #16
   16c68:	mov	r4, r6
   16c6c:	mov	r8, ip
   16c70:	add	r9, r6, #16
   16c74:	add	r7, ip, #16
   16c78:	add	r6, r6, #32
   16c7c:	vld1.32	{d16-d17}, [r4], lr
   16c80:	vst1.32	{d16-d17}, [r8], lr
   16c84:	vld1.32	{d16-d17}, [r9]
   16c88:	vst1.32	{d16-d17}, [r7]
   16c8c:	add	r7, ip, #32
   16c90:	vld1.32	{d16-d17}, [r6]
   16c94:	vst1.32	{d16-d17}, [r7]
   16c98:	vld1.32	{d16-d17}, [r4]
   16c9c:	vst1.32	{d16-d17}, [r8]
   16ca0:	bne	16c54 <__assert_fail@plt+0x5820>
   16ca4:	ldr	r6, [sp, #16]
   16ca8:	cmp	r6, #0
   16cac:	beq	16ccc <__assert_fail@plt+0x5898>
   16cb0:	add	r3, r1, sl, lsl #2
   16cb4:	add	r7, r0, sl, lsl #2
   16cb8:	rsb	r5, r6, #0
   16cbc:	vld1.32	{d16-d17}, [r3]!
   16cc0:	adds	r5, r5, #1
   16cc4:	vst1.32	{d16-d17}, [r7]!
   16cc8:	bcc	16cbc <__assert_fail@plt+0x5888>
   16ccc:	ldr	r5, [sp, #4]
   16cd0:	ldr	r4, [sp, #12]
   16cd4:	ldr	r8, [sp, #8]
   16cd8:	cmp	r5, r2
   16cdc:	beq	16d4c <__assert_fail@plt+0x5918>
   16ce0:	mvn	r3, r2
   16ce4:	ands	r7, r5, #3
   16ce8:	add	r3, r5, r3
   16cec:	beq	16d04 <__assert_fail@plt+0x58d0>
   16cf0:	ldr	r6, [r1, r2, lsl #2]
   16cf4:	subs	r7, r7, #1
   16cf8:	str	r6, [r0, r2, lsl #2]
   16cfc:	add	r2, r2, #1
   16d00:	bne	16cf0 <__assert_fail@plt+0x58bc>
   16d04:	cmp	r3, #3
   16d08:	bcc	16d4c <__assert_fail@plt+0x5918>
   16d0c:	sub	r3, r5, r2
   16d10:	lsl	r2, r2, #2
   16d14:	add	r7, r1, #16
   16d18:	ldr	r6, [r1, r2]!
   16d1c:	add	r5, r0, #16
   16d20:	subs	r3, r3, #4
   16d24:	str	r6, [r0, r2]!
   16d28:	ldr	r6, [r1, #4]
   16d2c:	str	r6, [r0, #4]
   16d30:	ldr	r6, [r1, #8]
   16d34:	str	r6, [r0, #8]
   16d38:	ldr	r1, [r1, #12]
   16d3c:	str	r1, [r0, #12]
   16d40:	mov	r1, r7
   16d44:	mov	r0, r5
   16d48:	bne	16d14 <__assert_fail@plt+0x58e0>
   16d4c:	ldr	r0, [r8, #4]
   16d50:	str	r0, [r4, #4]
   16d54:	cmp	r0, #0
   16d58:	rsbmi	r0, r0, #0
   16d5c:	str	r0, [r4, #4]
   16d60:	sub	sp, fp, #28
   16d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d6c:	add	fp, sp, #28
   16d70:	sub	sp, sp, #20
   16d74:	mov	r4, r0
   16d78:	cmp	r0, r1
   16d7c:	beq	16dd0 <__assert_fail@plt+0x599c>
   16d80:	mov	r8, r1
   16d84:	ldr	r1, [r4]
   16d88:	ldr	r5, [r8, #4]
   16d8c:	cmp	r5, #0
   16d90:	rsbmi	r5, r5, #0
   16d94:	cmp	r5, r1
   16d98:	ble	16dd8 <__assert_fail@plt+0x59a4>
   16d9c:	cmp	r5, #1
   16da0:	mov	r7, r5
   16da4:	movle	r7, #1
   16da8:	cmp	r1, #0
   16dac:	beq	16de8 <__assert_fail@plt+0x59b4>
   16db0:	movw	r0, #45352	; 0xb128
   16db4:	lsl	r1, r1, #2
   16db8:	lsl	r2, r7, #2
   16dbc:	movt	r0, #4
   16dc0:	ldr	r3, [r0]
   16dc4:	ldr	r0, [r4, #8]
   16dc8:	blx	r3
   16dcc:	b	16dfc <__assert_fail@plt+0x59c8>
   16dd0:	ldr	r0, [r4, #4]
   16dd4:	b	16f88 <__assert_fail@plt+0x5b54>
   16dd8:	ldr	r0, [r4, #8]
   16ddc:	cmp	r5, #1
   16de0:	bge	16e24 <__assert_fail@plt+0x59f0>
   16de4:	b	16f80 <__assert_fail@plt+0x5b4c>
   16de8:	movw	r0, #45348	; 0xb124
   16dec:	movt	r0, #4
   16df0:	ldr	r1, [r0]
   16df4:	lsl	r0, r7, #2
   16df8:	blx	r1
   16dfc:	str	r0, [r4, #8]
   16e00:	str	r7, [r4]
   16e04:	ldr	r1, [r4, #4]
   16e08:	cmp	r1, #0
   16e0c:	rsbmi	r1, r1, #0
   16e10:	cmp	r1, r7
   16e14:	movgt	r1, #0
   16e18:	strgt	r1, [r4, #4]
   16e1c:	cmp	r5, #1
   16e20:	blt	16f80 <__assert_fail@plt+0x5b4c>
   16e24:	ldr	r1, [r8, #8]
   16e28:	mov	r2, #0
   16e2c:	cmp	r5, #4
   16e30:	bcc	16f14 <__assert_fail@plt+0x5ae0>
   16e34:	add	r3, r1, r5, lsl #2
   16e38:	cmp	r0, r3
   16e3c:	addcc	r3, r0, r5, lsl #2
   16e40:	cmpcc	r1, r3
   16e44:	bcc	16f14 <__assert_fail@plt+0x5ae0>
   16e48:	bic	r2, r5, #-2147483645	; 0x80000003
   16e4c:	stmib	sp, {r5, r8}
   16e50:	mov	r3, #1
   16e54:	mov	sl, #0
   16e58:	str	r4, [sp, #12]
   16e5c:	sub	r5, r2, #4
   16e60:	add	r3, r3, r5, lsr #2
   16e64:	cmp	r5, #12
   16e68:	and	r7, r3, #3
   16e6c:	str	r7, [sp, #16]
   16e70:	bcc	16ed8 <__assert_fail@plt+0x5aa4>
   16e74:	ldr	r7, [sp, #16]
   16e78:	mov	r5, #0
   16e7c:	mov	lr, #48	; 0x30
   16e80:	mov	sl, #0
   16e84:	sub	r3, r3, r7
   16e88:	add	r6, r1, r5
   16e8c:	add	ip, r0, r5
   16e90:	add	r5, r5, #64	; 0x40
   16e94:	subs	r3, r3, #4
   16e98:	add	sl, sl, #16
   16e9c:	mov	r4, r6
   16ea0:	mov	r8, ip
   16ea4:	add	r9, r6, #16
   16ea8:	add	r7, ip, #16
   16eac:	add	r6, r6, #32
   16eb0:	vld1.32	{d16-d17}, [r4], lr
   16eb4:	vst1.32	{d16-d17}, [r8], lr
   16eb8:	vld1.32	{d16-d17}, [r9]
   16ebc:	vst1.32	{d16-d17}, [r7]
   16ec0:	add	r7, ip, #32
   16ec4:	vld1.32	{d16-d17}, [r6]
   16ec8:	vst1.32	{d16-d17}, [r7]
   16ecc:	vld1.32	{d16-d17}, [r4]
   16ed0:	vst1.32	{d16-d17}, [r8]
   16ed4:	bne	16e88 <__assert_fail@plt+0x5a54>
   16ed8:	ldr	r6, [sp, #16]
   16edc:	cmp	r6, #0
   16ee0:	beq	16f00 <__assert_fail@plt+0x5acc>
   16ee4:	add	r3, r1, sl, lsl #2
   16ee8:	add	r7, r0, sl, lsl #2
   16eec:	rsb	r5, r6, #0
   16ef0:	vld1.32	{d16-d17}, [r3]!
   16ef4:	adds	r5, r5, #1
   16ef8:	vst1.32	{d16-d17}, [r7]!
   16efc:	bcc	16ef0 <__assert_fail@plt+0x5abc>
   16f00:	ldr	r5, [sp, #4]
   16f04:	ldr	r4, [sp, #12]
   16f08:	ldr	r8, [sp, #8]
   16f0c:	cmp	r5, r2
   16f10:	beq	16f80 <__assert_fail@plt+0x5b4c>
   16f14:	mvn	r3, r2
   16f18:	ands	r7, r5, #3
   16f1c:	add	r3, r5, r3
   16f20:	beq	16f38 <__assert_fail@plt+0x5b04>
   16f24:	ldr	r6, [r1, r2, lsl #2]
   16f28:	subs	r7, r7, #1
   16f2c:	str	r6, [r0, r2, lsl #2]
   16f30:	add	r2, r2, #1
   16f34:	bne	16f24 <__assert_fail@plt+0x5af0>
   16f38:	cmp	r3, #3
   16f3c:	bcc	16f80 <__assert_fail@plt+0x5b4c>
   16f40:	sub	r3, r5, r2
   16f44:	lsl	r2, r2, #2
   16f48:	add	r7, r1, #16
   16f4c:	ldr	r6, [r1, r2]!
   16f50:	add	r5, r0, #16
   16f54:	subs	r3, r3, #4
   16f58:	str	r6, [r0, r2]!
   16f5c:	ldr	r6, [r1, #4]
   16f60:	str	r6, [r0, #4]
   16f64:	ldr	r6, [r1, #8]
   16f68:	str	r6, [r0, #8]
   16f6c:	ldr	r1, [r1, #12]
   16f70:	str	r1, [r0, #12]
   16f74:	mov	r1, r7
   16f78:	mov	r0, r5
   16f7c:	bne	16f48 <__assert_fail@plt+0x5b14>
   16f80:	ldr	r0, [r8, #4]
   16f84:	str	r0, [r4, #4]
   16f88:	rsb	r0, r0, #0
   16f8c:	str	r0, [r4, #4]
   16f90:	sub	sp, fp, #28
   16f94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f98:	ldr	r2, [r0, #4]
   16f9c:	ldr	r3, [r1, #4]
   16fa0:	str	r3, [r0, #4]
   16fa4:	str	r2, [r1, #4]
   16fa8:	ldr	r2, [r0]
   16fac:	ldr	r3, [r1]
   16fb0:	str	r3, [r0]
   16fb4:	str	r2, [r1]
   16fb8:	ldr	r2, [r0, #8]
   16fbc:	ldr	r3, [r1, #8]
   16fc0:	str	r3, [r0, #8]
   16fc4:	str	r2, [r1, #8]
   16fc8:	bx	lr
   16fcc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16fd0:	add	fp, sp, #24
   16fd4:	sub	sp, sp, #16
   16fd8:	mov	r5, r0
   16fdc:	movw	r0, #37256	; 0x9188
   16fe0:	mov	r4, r1
   16fe4:	cmp	r2, #0
   16fe8:	movt	r0, #3
   16fec:	str	r0, [sp, #12]
   16ff0:	mov	r0, #0
   16ff4:	str	r0, [sp, #8]
   16ff8:	str	r0, [sp, #4]
   16ffc:	beq	17060 <__assert_fail@plt+0x5c2c>
   17000:	movw	r0, #45348	; 0xb124
   17004:	mov	r8, #1
   17008:	mov	r6, r2
   1700c:	movt	r0, #4
   17010:	str	r8, [sp, #8]
   17014:	ldr	r1, [r0]
   17018:	mov	r0, #4
   1701c:	blx	r1
   17020:	str	r0, [sp, #12]
   17024:	str	r8, [sp, #4]
   17028:	mov	r7, r0
   1702c:	str	r6, [r0]
   17030:	add	r2, sp, #4
   17034:	mov	r0, r5
   17038:	mov	r1, r4
   1703c:	bl	1707c <__assert_fail@plt+0x5c48>
   17040:	movw	r0, #45356	; 0xb12c
   17044:	mov	r1, #4
   17048:	movt	r0, #4
   1704c:	ldr	r2, [r0]
   17050:	mov	r0, r7
   17054:	blx	r2
   17058:	sub	sp, fp, #24
   1705c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17060:	str	r0, [sp, #8]
   17064:	add	r2, sp, #4
   17068:	mov	r0, r5
   1706c:	mov	r1, r4
   17070:	bl	1707c <__assert_fail@plt+0x5c48>
   17074:	sub	sp, fp, #24
   17078:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1707c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17080:	add	fp, sp, #28
   17084:	sub	sp, sp, #20
   17088:	mov	r4, r0
   1708c:	ldr	r0, [r1, #4]
   17090:	ldr	sl, [r2, #4]
   17094:	mov	r5, r1
   17098:	mov	r6, r2
   1709c:	eors	r1, sl, r0
   170a0:	bmi	170e4 <__assert_fail@plt+0x5cb0>
   170a4:	cmp	sl, #0
   170a8:	ldr	r1, [r4]
   170ac:	mov	r7, r5
   170b0:	rsbmi	sl, sl, #0
   170b4:	cmp	r0, #0
   170b8:	rsbmi	r0, r0, #0
   170bc:	cmp	r0, sl
   170c0:	mov	r8, r0
   170c4:	movlt	r8, sl
   170c8:	movlt	r7, r6
   170cc:	movlt	r6, r5
   170d0:	movlt	sl, r0
   170d4:	cmp	r8, r1
   170d8:	bge	170f8 <__assert_fail@plt+0x5cc4>
   170dc:	ldr	r0, [r4, #8]
   170e0:	b	17158 <__assert_fail@plt+0x5d24>
   170e4:	mov	r0, r4
   170e8:	mov	r1, r5
   170ec:	mov	r2, r6
   170f0:	bl	1758c <__assert_fail@plt+0x6158>
   170f4:	b	1727c <__assert_fail@plt+0x5e48>
   170f8:	add	r9, r8, #1
   170fc:	cmp	r1, #0
   17100:	beq	17124 <__assert_fail@plt+0x5cf0>
   17104:	movw	r0, #45352	; 0xb128
   17108:	lsl	r1, r1, #2
   1710c:	lsl	r2, r9, #2
   17110:	movt	r0, #4
   17114:	ldr	r3, [r0]
   17118:	ldr	r0, [r4, #8]
   1711c:	blx	r3
   17120:	b	17138 <__assert_fail@plt+0x5d04>
   17124:	movw	r0, #45348	; 0xb124
   17128:	movt	r0, #4
   1712c:	ldr	r1, [r0]
   17130:	lsl	r0, r9, #2
   17134:	blx	r1
   17138:	str	r0, [r4, #8]
   1713c:	str	r9, [r4]
   17140:	ldr	r1, [r4, #4]
   17144:	cmp	r1, #0
   17148:	rsbmi	r1, r1, #0
   1714c:	cmp	r1, r9
   17150:	movgt	r1, #0
   17154:	strgt	r1, [r4, #4]
   17158:	ldr	r1, [r7, #8]
   1715c:	cmp	sl, #1
   17160:	add	r2, sp, #8
   17164:	stm	r2, {r0, r4, r5}
   17168:	str	r1, [sp, #4]
   1716c:	blt	171e4 <__assert_fail@plt+0x5db0>
   17170:	ldr	r3, [r6, #8]
   17174:	mov	lr, #0
   17178:	mov	r5, r0
   1717c:	mov	r7, sl
   17180:	mov	r9, #0
   17184:	ldr	r6, [r1], #4
   17188:	ldr	r4, [r3], #4
   1718c:	adds	ip, r6, r9
   17190:	adds	r4, ip, r4
   17194:	adc	r2, lr, #0
   17198:	adds	r6, r6, r9
   1719c:	str	r4, [r5], #4
   171a0:	adc	r9, r2, #0
   171a4:	subs	r7, r7, #1
   171a8:	bne	17184 <__assert_fail@plt+0x5d50>
   171ac:	cmp	r8, sl
   171b0:	ble	171f0 <__assert_fail@plt+0x5dbc>
   171b4:	ldr	r4, [sp, #12]
   171b8:	ldr	r0, [sp, #8]
   171bc:	sub	r1, r8, sl
   171c0:	add	r3, sl, #1
   171c4:	and	lr, r1, #1
   171c8:	cmp	r8, r3
   171cc:	bne	171fc <__assert_fail@plt+0x5dc8>
   171d0:	ldr	ip, [sp, #4]
   171d4:	mov	r1, #0
   171d8:	cmp	lr, #0
   171dc:	bne	17254 <__assert_fail@plt+0x5e20>
   171e0:	b	17270 <__assert_fail@plt+0x5e3c>
   171e4:	mov	r9, #0
   171e8:	cmp	r8, sl
   171ec:	bgt	171b4 <__assert_fail@plt+0x5d80>
   171f0:	ldr	r4, [sp, #12]
   171f4:	ldr	r0, [sp, #8]
   171f8:	b	17270 <__assert_fail@plt+0x5e3c>
   171fc:	ldr	ip, [sp, #4]
   17200:	add	r1, sl, lr
   17204:	add	r6, r0, r3, lsl #2
   17208:	mov	r5, #0
   1720c:	sub	r1, r1, r8
   17210:	add	r7, ip, r3, lsl #2
   17214:	mov	r3, #0
   17218:	ldr	r2, [r7, #-4]
   1721c:	sub	r5, r5, #2
   17220:	adds	r2, r2, r9
   17224:	str	r2, [r6, #-4]
   17228:	ldr	r2, [r7]
   1722c:	add	r7, r7, #8
   17230:	adcs	r2, r2, #0
   17234:	str	r2, [r6]
   17238:	adc	r9, r3, #0
   1723c:	add	r6, r6, #8
   17240:	cmp	r1, r5
   17244:	bne	17218 <__assert_fail@plt+0x5de4>
   17248:	rsb	r1, r5, #0
   1724c:	cmp	lr, #0
   17250:	beq	17270 <__assert_fail@plt+0x5e3c>
   17254:	add	r2, ip, sl, lsl #2
   17258:	add	r3, r0, sl, lsl #2
   1725c:	ldr	r2, [r2, r1, lsl #2]
   17260:	adds	r2, r2, r9
   17264:	str	r2, [r3, r1, lsl #2]
   17268:	mov	r1, #0
   1726c:	adc	r9, r1, #0
   17270:	ldr	r5, [sp, #16]
   17274:	str	r9, [r0, r8, lsl #2]
   17278:	add	r0, r9, r8
   1727c:	ldr	r1, [r5, #4]
   17280:	cmn	r1, #1
   17284:	rsble	r0, r0, #0
   17288:	str	r0, [r4, #4]
   1728c:	sub	sp, fp, #28
   17290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17294:	push	{r4, sl, fp, lr}
   17298:	add	fp, sp, #8
   1729c:	mov	r3, r1
   172a0:	mov	r1, r2
   172a4:	mov	r4, r0
   172a8:	mov	r2, r3
   172ac:	bl	172c0 <__assert_fail@plt+0x5e8c>
   172b0:	ldr	r0, [r4, #4]
   172b4:	rsb	r0, r0, #0
   172b8:	str	r0, [r4, #4]
   172bc:	pop	{r4, sl, fp, pc}
   172c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172c4:	add	fp, sp, #28
   172c8:	sub	sp, sp, #36	; 0x24
   172cc:	mov	r8, r1
   172d0:	mov	r4, r0
   172d4:	cmp	r0, r2
   172d8:	beq	1732c <__assert_fail@plt+0x5ef8>
   172dc:	ldr	r5, [r2, #4]
   172e0:	ldr	r1, [r4]
   172e4:	mov	r9, r2
   172e8:	cmp	r5, #0
   172ec:	rsbmi	r5, r5, #0
   172f0:	cmp	r5, r1
   172f4:	ble	17334 <__assert_fail@plt+0x5f00>
   172f8:	cmp	r5, #1
   172fc:	mov	r7, r5
   17300:	movle	r7, #1
   17304:	cmp	r1, #0
   17308:	beq	17344 <__assert_fail@plt+0x5f10>
   1730c:	movw	r0, #45352	; 0xb128
   17310:	lsl	r1, r1, #2
   17314:	lsl	r2, r7, #2
   17318:	movt	r0, #4
   1731c:	ldr	r3, [r0]
   17320:	ldr	r0, [r4, #8]
   17324:	blx	r3
   17328:	b	17358 <__assert_fail@plt+0x5f24>
   1732c:	ldr	r0, [r4, #4]
   17330:	b	174ec <__assert_fail@plt+0x60b8>
   17334:	ldr	r0, [r4, #8]
   17338:	cmp	r5, #1
   1733c:	bge	17380 <__assert_fail@plt+0x5f4c>
   17340:	b	174e4 <__assert_fail@plt+0x60b0>
   17344:	movw	r0, #45348	; 0xb124
   17348:	movt	r0, #4
   1734c:	ldr	r1, [r0]
   17350:	lsl	r0, r7, #2
   17354:	blx	r1
   17358:	str	r0, [r4, #8]
   1735c:	str	r7, [r4]
   17360:	ldr	r1, [r4, #4]
   17364:	cmp	r1, #0
   17368:	rsbmi	r1, r1, #0
   1736c:	cmp	r1, r7
   17370:	movgt	r1, #0
   17374:	strgt	r1, [r4, #4]
   17378:	cmp	r5, #1
   1737c:	blt	174e4 <__assert_fail@plt+0x60b0>
   17380:	ldr	r1, [r9, #8]
   17384:	mov	r2, #0
   17388:	cmp	r5, #4
   1738c:	bcc	17478 <__assert_fail@plt+0x6044>
   17390:	add	r3, r1, r5, lsl #2
   17394:	cmp	r0, r3
   17398:	addcc	r3, r0, r5, lsl #2
   1739c:	cmpcc	r1, r3
   173a0:	bcc	17478 <__assert_fail@plt+0x6044>
   173a4:	bic	r2, r5, #-2147483645	; 0x80000003
   173a8:	mov	r3, #1
   173ac:	str	r8, [sp, #12]
   173b0:	mov	r8, #0
   173b4:	str	r4, [sp, #16]
   173b8:	stmib	sp, {r5, r9}
   173bc:	sub	r6, r2, #4
   173c0:	add	r3, r3, r6, lsr #2
   173c4:	cmp	r6, #12
   173c8:	and	r7, r3, #3
   173cc:	str	r7, [sp, #20]
   173d0:	bcc	17438 <__assert_fail@plt+0x6004>
   173d4:	ldr	r7, [sp, #20]
   173d8:	mov	r6, #0
   173dc:	mov	lr, #48	; 0x30
   173e0:	mov	r8, #0
   173e4:	sub	r3, r3, r7
   173e8:	add	r4, r1, r6
   173ec:	add	ip, r0, r6
   173f0:	add	r6, r6, #64	; 0x40
   173f4:	subs	r3, r3, #4
   173f8:	add	r8, r8, #16
   173fc:	mov	r5, r4
   17400:	mov	r9, ip
   17404:	add	sl, r4, #16
   17408:	add	r7, ip, #16
   1740c:	add	r4, r4, #32
   17410:	vld1.32	{d16-d17}, [r5], lr
   17414:	vst1.32	{d16-d17}, [r9], lr
   17418:	vld1.32	{d16-d17}, [sl]
   1741c:	vst1.32	{d16-d17}, [r7]
   17420:	add	r7, ip, #32
   17424:	vld1.32	{d16-d17}, [r4]
   17428:	vst1.32	{d16-d17}, [r7]
   1742c:	vld1.32	{d16-d17}, [r5]
   17430:	vst1.32	{d16-d17}, [r9]
   17434:	bne	173e8 <__assert_fail@plt+0x5fb4>
   17438:	ldr	r6, [sp, #20]
   1743c:	cmp	r6, #0
   17440:	beq	17460 <__assert_fail@plt+0x602c>
   17444:	add	r3, r1, r8, lsl #2
   17448:	add	r7, r0, r8, lsl #2
   1744c:	rsb	r6, r6, #0
   17450:	vld1.32	{d16-d17}, [r3]!
   17454:	adds	r6, r6, #1
   17458:	vst1.32	{d16-d17}, [r7]!
   1745c:	bcc	17450 <__assert_fail@plt+0x601c>
   17460:	ldr	r5, [sp, #4]
   17464:	ldr	r4, [sp, #16]
   17468:	ldr	r8, [sp, #12]
   1746c:	ldr	r9, [sp, #8]
   17470:	cmp	r5, r2
   17474:	beq	174e4 <__assert_fail@plt+0x60b0>
   17478:	mvn	r3, r2
   1747c:	ands	r7, r5, #3
   17480:	add	r3, r5, r3
   17484:	beq	1749c <__assert_fail@plt+0x6068>
   17488:	ldr	r6, [r1, r2, lsl #2]
   1748c:	subs	r7, r7, #1
   17490:	str	r6, [r0, r2, lsl #2]
   17494:	add	r2, r2, #1
   17498:	bne	17488 <__assert_fail@plt+0x6054>
   1749c:	cmp	r3, #3
   174a0:	bcc	174e4 <__assert_fail@plt+0x60b0>
   174a4:	sub	r3, r5, r2
   174a8:	lsl	r2, r2, #2
   174ac:	add	r7, r1, #16
   174b0:	ldr	r6, [r1, r2]!
   174b4:	add	r5, r0, #16
   174b8:	subs	r3, r3, #4
   174bc:	str	r6, [r0, r2]!
   174c0:	ldr	r6, [r1, #4]
   174c4:	str	r6, [r0, #4]
   174c8:	ldr	r6, [r1, #8]
   174cc:	str	r6, [r0, #8]
   174d0:	ldr	r1, [r1, #12]
   174d4:	str	r1, [r0, #12]
   174d8:	mov	r1, r7
   174dc:	mov	r0, r5
   174e0:	bne	174ac <__assert_fail@plt+0x6078>
   174e4:	ldr	r0, [r9, #4]
   174e8:	str	r0, [r4, #4]
   174ec:	rsb	r0, r0, #0
   174f0:	cmp	r8, #0
   174f4:	str	r0, [r4, #4]
   174f8:	movw	r0, #37256	; 0x9188
   174fc:	movt	r0, #3
   17500:	str	r0, [sp, #32]
   17504:	mov	r0, #0
   17508:	str	r0, [sp, #28]
   1750c:	str	r0, [sp, #24]
   17510:	beq	17570 <__assert_fail@plt+0x613c>
   17514:	movw	r0, #45348	; 0xb124
   17518:	mov	r5, #1
   1751c:	movt	r0, #4
   17520:	str	r5, [sp, #28]
   17524:	ldr	r1, [r0]
   17528:	mov	r0, #4
   1752c:	blx	r1
   17530:	str	r0, [sp, #32]
   17534:	str	r5, [sp, #24]
   17538:	mov	r6, r0
   1753c:	str	r8, [r0]
   17540:	add	r2, sp, #24
   17544:	mov	r0, r4
   17548:	mov	r1, r4
   1754c:	bl	1707c <__assert_fail@plt+0x5c48>
   17550:	movw	r0, #45356	; 0xb12c
   17554:	mov	r1, #4
   17558:	movt	r0, #4
   1755c:	ldr	r2, [r0]
   17560:	mov	r0, r6
   17564:	blx	r2
   17568:	sub	sp, fp, #28
   1756c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17570:	str	r0, [sp, #28]
   17574:	add	r2, sp, #24
   17578:	mov	r0, r4
   1757c:	mov	r1, r4
   17580:	bl	1707c <__assert_fail@plt+0x5c48>
   17584:	sub	sp, fp, #28
   17588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1758c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17590:	add	fp, sp, #28
   17594:	sub	sp, sp, #4
   17598:	mov	r5, r1
   1759c:	ldr	sl, [r2, #4]
   175a0:	mov	r6, r0
   175a4:	ldr	r0, [r2, #8]
   175a8:	mov	r8, r2
   175ac:	ldr	r9, [r5, #4]
   175b0:	ldr	r1, [r5, #8]
   175b4:	cmp	sl, #0
   175b8:	rsbmi	sl, sl, #0
   175bc:	cmp	r9, #0
   175c0:	rsbmi	r9, r9, #0
   175c4:	cmp	r9, sl
   175c8:	bne	1763c <__assert_fail@plt+0x6208>
   175cc:	sub	r1, r1, #4
   175d0:	sub	r0, r0, #4
   175d4:	mov	r2, r9
   175d8:	cmp	r2, #1
   175dc:	blt	17680 <__assert_fail@plt+0x624c>
   175e0:	sub	r3, r2, #1
   175e4:	ldr	r7, [r0, r2, lsl #2]
   175e8:	ldr	r2, [r1, r2, lsl #2]
   175ec:	cmp	r2, r7
   175f0:	mov	r2, r3
   175f4:	beq	175d8 <__assert_fail@plt+0x61a4>
   175f8:	bhi	17640 <__assert_fail@plt+0x620c>
   175fc:	ldr	r1, [r6]
   17600:	cmp	sl, r1
   17604:	ble	1768c <__assert_fail@plt+0x6258>
   17608:	cmp	sl, #1
   1760c:	mov	r4, sl
   17610:	movle	r4, #1
   17614:	cmp	r1, #0
   17618:	beq	176ac <__assert_fail@plt+0x6278>
   1761c:	movw	r0, #45352	; 0xb128
   17620:	lsl	r1, r1, #2
   17624:	lsl	r2, r4, #2
   17628:	movt	r0, #4
   1762c:	ldr	r3, [r0]
   17630:	ldr	r0, [r6, #8]
   17634:	blx	r3
   17638:	b	176c0 <__assert_fail@plt+0x628c>
   1763c:	blt	175fc <__assert_fail@plt+0x61c8>
   17640:	ldr	r1, [r6]
   17644:	cmp	r9, r1
   17648:	ble	1769c <__assert_fail@plt+0x6268>
   1764c:	cmp	r9, #1
   17650:	mov	r4, r9
   17654:	movle	r4, #1
   17658:	cmp	r1, #0
   1765c:	beq	17820 <__assert_fail@plt+0x63ec>
   17660:	movw	r0, #45352	; 0xb128
   17664:	lsl	r1, r1, #2
   17668:	lsl	r2, r4, #2
   1766c:	movt	r0, #4
   17670:	ldr	r3, [r0]
   17674:	ldr	r0, [r6, #8]
   17678:	blx	r3
   1767c:	b	17834 <__assert_fail@plt+0x6400>
   17680:	mov	r0, #0
   17684:	sub	sp, fp, #28
   17688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1768c:	ldr	r0, [r6, #8]
   17690:	cmp	sl, r9
   17694:	bge	176e8 <__assert_fail@plt+0x62b4>
   17698:	b	17990 <__assert_fail@plt+0x655c>
   1769c:	ldr	r0, [r6, #8]
   176a0:	cmp	r9, sl
   176a4:	bge	1785c <__assert_fail@plt+0x6428>
   176a8:	b	17990 <__assert_fail@plt+0x655c>
   176ac:	movw	r0, #45348	; 0xb124
   176b0:	movt	r0, #4
   176b4:	ldr	r1, [r0]
   176b8:	lsl	r0, r4, #2
   176bc:	blx	r1
   176c0:	str	r0, [r6, #8]
   176c4:	str	r4, [r6]
   176c8:	ldr	r1, [r6, #4]
   176cc:	cmp	r1, #0
   176d0:	rsbmi	r1, r1, #0
   176d4:	cmp	r1, r4
   176d8:	movgt	r1, #0
   176dc:	strgt	r1, [r6, #4]
   176e0:	cmp	sl, r9
   176e4:	blt	17990 <__assert_fail@plt+0x655c>
   176e8:	ldr	ip, [r8, #8]
   176ec:	cmp	r9, #1
   176f0:	blt	17744 <__assert_fail@plt+0x6310>
   176f4:	ldr	r3, [r5, #8]
   176f8:	mov	r8, #0
   176fc:	mov	r1, ip
   17700:	mov	r6, r0
   17704:	mov	r4, r9
   17708:	ldr	r5, [r3], #4
   1770c:	ldr	r7, [r1], #4
   17710:	adds	r2, r5, r8
   17714:	cmp	r7, r2
   17718:	mov	r2, #0
   1771c:	movwcc	r2, #1
   17720:	adds	r5, r5, r8
   17724:	adc	r8, r2, #0
   17728:	sub	r2, r7, r5
   1772c:	subs	r4, r4, #1
   17730:	str	r2, [r6], #4
   17734:	bne	17708 <__assert_fail@plt+0x62d4>
   17738:	cmp	sl, r9
   1773c:	bgt	17750 <__assert_fail@plt+0x631c>
   17740:	b	177ec <__assert_fail@plt+0x63b8>
   17744:	mov	r8, #0
   17748:	cmp	sl, r9
   1774c:	ble	177ec <__assert_fail@plt+0x63b8>
   17750:	sub	r1, sl, r9
   17754:	add	r3, r9, #1
   17758:	and	lr, r1, #1
   1775c:	cmp	sl, r3
   17760:	bne	17774 <__assert_fail@plt+0x6340>
   17764:	mov	r1, #0
   17768:	cmp	lr, #0
   1776c:	bne	177d0 <__assert_fail@plt+0x639c>
   17770:	b	177ec <__assert_fail@plt+0x63b8>
   17774:	add	r1, r9, lr
   17778:	mov	r5, #0
   1777c:	sub	r6, r1, sl
   17780:	add	r1, r0, r3, lsl #2
   17784:	add	r3, ip, r3, lsl #2
   17788:	ldr	r2, [r3, #-4]
   1778c:	sub	r5, r5, #2
   17790:	subs	r2, r2, r8
   17794:	mov	r8, #0
   17798:	str	r2, [r1, #-4]
   1779c:	mov	r2, #0
   177a0:	movwcc	r2, #1
   177a4:	ldr	r4, [r3]
   177a8:	add	r3, r3, #8
   177ac:	subs	r2, r4, r2
   177b0:	str	r2, [r1]
   177b4:	movwcc	r8, #1
   177b8:	add	r1, r1, #8
   177bc:	cmp	r6, r5
   177c0:	bne	17788 <__assert_fail@plt+0x6354>
   177c4:	rsb	r1, r5, #0
   177c8:	cmp	lr, #0
   177cc:	beq	177ec <__assert_fail@plt+0x63b8>
   177d0:	add	r2, ip, r9, lsl #2
   177d4:	add	r3, r0, r9, lsl #2
   177d8:	ldr	r2, [r2, r1, lsl #2]
   177dc:	subs	r2, r2, r8
   177e0:	mov	r8, #0
   177e4:	movwcc	r8, #1
   177e8:	str	r2, [r3, r1, lsl #2]
   177ec:	cmp	r8, #0
   177f0:	bne	179b0 <__assert_fail@plt+0x657c>
   177f4:	sub	r0, r0, #4
   177f8:	mov	r1, sl
   177fc:	cmp	sl, #1
   17800:	blt	17814 <__assert_fail@plt+0x63e0>
   17804:	ldr	r2, [r0, r1, lsl #2]
   17808:	sub	sl, r1, #1
   1780c:	cmp	r2, #0
   17810:	beq	177f8 <__assert_fail@plt+0x63c4>
   17814:	rsb	r0, r1, #0
   17818:	sub	sp, fp, #28
   1781c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17820:	movw	r0, #45348	; 0xb124
   17824:	movt	r0, #4
   17828:	ldr	r1, [r0]
   1782c:	lsl	r0, r4, #2
   17830:	blx	r1
   17834:	str	r0, [r6, #8]
   17838:	str	r4, [r6]
   1783c:	ldr	r1, [r6, #4]
   17840:	cmp	r1, #0
   17844:	rsbmi	r1, r1, #0
   17848:	cmp	r1, r4
   1784c:	movgt	r1, #0
   17850:	strgt	r1, [r6, #4]
   17854:	cmp	r9, sl
   17858:	blt	17990 <__assert_fail@plt+0x655c>
   1785c:	ldr	lr, [r5, #8]
   17860:	cmp	sl, #1
   17864:	blt	178b8 <__assert_fail@plt+0x6484>
   17868:	ldr	r3, [r8, #8]
   1786c:	mov	r8, #0
   17870:	mov	r1, lr
   17874:	mov	r6, r0
   17878:	mov	r7, sl
   1787c:	ldr	r4, [r3], #4
   17880:	ldr	r5, [r1], #4
   17884:	adds	r2, r4, r8
   17888:	cmp	r5, r2
   1788c:	mov	r2, #0
   17890:	movwcc	r2, #1
   17894:	adds	r4, r4, r8
   17898:	adc	r8, r2, #0
   1789c:	sub	r2, r5, r4
   178a0:	subs	r7, r7, #1
   178a4:	str	r2, [r6], #4
   178a8:	bne	1787c <__assert_fail@plt+0x6448>
   178ac:	cmp	r9, sl
   178b0:	bgt	178c4 <__assert_fail@plt+0x6490>
   178b4:	b	17960 <__assert_fail@plt+0x652c>
   178b8:	mov	r8, #0
   178bc:	cmp	r9, sl
   178c0:	ble	17960 <__assert_fail@plt+0x652c>
   178c4:	sub	r1, r9, sl
   178c8:	add	r3, sl, #1
   178cc:	and	ip, r1, #1
   178d0:	cmp	r9, r3
   178d4:	bne	178e8 <__assert_fail@plt+0x64b4>
   178d8:	mov	r1, #0
   178dc:	cmp	ip, #0
   178e0:	bne	17944 <__assert_fail@plt+0x6510>
   178e4:	b	17960 <__assert_fail@plt+0x652c>
   178e8:	add	r1, sl, ip
   178ec:	add	r5, lr, r3, lsl #2
   178f0:	sub	r6, r1, r9
   178f4:	add	r1, r0, r3, lsl #2
   178f8:	mov	r3, #0
   178fc:	ldr	r2, [r5, #-4]
   17900:	sub	r3, r3, #2
   17904:	subs	r2, r2, r8
   17908:	mov	r8, #0
   1790c:	str	r2, [r1, #-4]
   17910:	mov	r2, #0
   17914:	movwcc	r2, #1
   17918:	ldr	r4, [r5]
   1791c:	add	r5, r5, #8
   17920:	subs	r2, r4, r2
   17924:	str	r2, [r1]
   17928:	movwcc	r8, #1
   1792c:	add	r1, r1, #8
   17930:	cmp	r6, r3
   17934:	bne	178fc <__assert_fail@plt+0x64c8>
   17938:	rsb	r1, r3, #0
   1793c:	cmp	ip, #0
   17940:	beq	17960 <__assert_fail@plt+0x652c>
   17944:	add	r2, lr, sl, lsl #2
   17948:	add	r3, r0, sl, lsl #2
   1794c:	ldr	r2, [r2, r1, lsl #2]
   17950:	subs	r2, r2, r8
   17954:	mov	r8, #0
   17958:	movwcc	r8, #1
   1795c:	str	r2, [r3, r1, lsl #2]
   17960:	cmp	r8, #0
   17964:	bne	179c4 <__assert_fail@plt+0x6590>
   17968:	sub	r1, r0, #4
   1796c:	mov	r0, r9
   17970:	cmp	r9, #1
   17974:	blt	17988 <__assert_fail@plt+0x6554>
   17978:	ldr	r2, [r1, r0, lsl #2]
   1797c:	sub	r9, r0, #1
   17980:	cmp	r2, #0
   17984:	beq	1796c <__assert_fail@plt+0x6538>
   17988:	sub	sp, fp, #28
   1798c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17990:	movw	r0, #37338	; 0x91da
   17994:	movw	r1, #37260	; 0x918c
   17998:	movw	r3, #37478	; 0x9266
   1799c:	mov	r2, #532	; 0x214
   179a0:	movt	r0, #3
   179a4:	movt	r1, #3
   179a8:	movt	r3, #3
   179ac:	bl	11434 <__assert_fail@plt>
   179b0:	movw	r0, #38241	; 0x9561
   179b4:	movw	r1, #37260	; 0x918c
   179b8:	movw	r3, #40475	; 0x9e1b
   179bc:	movw	r2, #2012	; 0x7dc
   179c0:	b	179d4 <__assert_fail@plt+0x65a0>
   179c4:	movw	r0, #38241	; 0x9561
   179c8:	movw	r1, #37260	; 0x918c
   179cc:	movw	r3, #40475	; 0x9e1b
   179d0:	movw	r2, #2006	; 0x7d6
   179d4:	movt	r0, #3
   179d8:	movt	r1, #3
   179dc:	movt	r3, #3
   179e0:	bl	11434 <__assert_fail@plt>
   179e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179e8:	add	fp, sp, #28
   179ec:	sub	sp, sp, #12
   179f0:	mov	r5, r0
   179f4:	ldr	r0, [r1, #4]
   179f8:	ldr	r9, [r2, #4]
   179fc:	mov	r8, r1
   17a00:	mov	r6, r2
   17a04:	eors	r1, r9, r0
   17a08:	bmi	17a20 <__assert_fail@plt+0x65ec>
   17a0c:	mov	r0, r5
   17a10:	mov	r1, r8
   17a14:	mov	r2, r6
   17a18:	bl	1758c <__assert_fail@plt+0x6158>
   17a1c:	b	17be4 <__assert_fail@plt+0x67b0>
   17a20:	cmp	r9, #0
   17a24:	ldr	r1, [r5]
   17a28:	mov	r7, r8
   17a2c:	rsbmi	r9, r9, #0
   17a30:	cmp	r0, #0
   17a34:	rsbmi	r0, r0, #0
   17a38:	cmp	r0, r9
   17a3c:	mov	r2, r0
   17a40:	movlt	r2, r9
   17a44:	movlt	r7, r6
   17a48:	movlt	r6, r8
   17a4c:	movlt	r9, r0
   17a50:	cmp	r2, r1
   17a54:	bge	17a60 <__assert_fail@plt+0x662c>
   17a58:	ldr	r4, [r5, #8]
   17a5c:	b	17acc <__assert_fail@plt+0x6698>
   17a60:	add	sl, r2, #1
   17a64:	cmp	r1, #0
   17a68:	str	r2, [sp, #4]
   17a6c:	beq	17a90 <__assert_fail@plt+0x665c>
   17a70:	movw	r0, #45352	; 0xb128
   17a74:	lsl	r1, r1, #2
   17a78:	lsl	r2, sl, #2
   17a7c:	movt	r0, #4
   17a80:	ldr	r3, [r0]
   17a84:	ldr	r0, [r5, #8]
   17a88:	blx	r3
   17a8c:	b	17aa4 <__assert_fail@plt+0x6670>
   17a90:	movw	r0, #45348	; 0xb124
   17a94:	movt	r0, #4
   17a98:	ldr	r1, [r0]
   17a9c:	lsl	r0, sl, #2
   17aa0:	blx	r1
   17aa4:	str	r0, [r5, #8]
   17aa8:	str	sl, [r5]
   17aac:	mov	r4, r0
   17ab0:	ldr	r1, [r5, #4]
   17ab4:	ldr	r2, [sp, #4]
   17ab8:	cmp	r1, #0
   17abc:	rsbmi	r1, r1, #0
   17ac0:	cmp	r1, sl
   17ac4:	movgt	r1, #0
   17ac8:	strgt	r1, [r5, #4]
   17acc:	ldr	r1, [r7, #8]
   17ad0:	cmp	r9, #1
   17ad4:	mov	r0, r2
   17ad8:	stm	sp, {r1, r4, r5}
   17adc:	blt	17b4c <__assert_fail@plt+0x6718>
   17ae0:	ldr	r3, [r6, #8]
   17ae4:	mov	lr, #0
   17ae8:	mov	r7, r9
   17aec:	mov	sl, #0
   17af0:	ldr	r6, [r1], #4
   17af4:	ldr	r5, [r3], #4
   17af8:	adds	ip, r6, sl
   17afc:	adds	r5, ip, r5
   17b00:	adc	r2, lr, #0
   17b04:	adds	r6, r6, sl
   17b08:	str	r5, [r4], #4
   17b0c:	adc	sl, r2, #0
   17b10:	subs	r7, r7, #1
   17b14:	bne	17af0 <__assert_fail@plt+0x66bc>
   17b18:	cmp	r0, r9
   17b1c:	ble	17b58 <__assert_fail@plt+0x6724>
   17b20:	ldr	r5, [sp, #8]
   17b24:	ldr	ip, [sp, #4]
   17b28:	sub	r1, r0, r9
   17b2c:	add	r3, r9, #1
   17b30:	and	lr, r1, #1
   17b34:	cmp	r0, r3
   17b38:	bne	17b64 <__assert_fail@plt+0x6730>
   17b3c:	mov	r1, #0
   17b40:	cmp	lr, #0
   17b44:	bne	17bbc <__assert_fail@plt+0x6788>
   17b48:	b	17bdc <__assert_fail@plt+0x67a8>
   17b4c:	mov	sl, #0
   17b50:	cmp	r0, r9
   17b54:	bgt	17b20 <__assert_fail@plt+0x66ec>
   17b58:	ldr	r5, [sp, #8]
   17b5c:	ldr	ip, [sp, #4]
   17b60:	b	17bdc <__assert_fail@plt+0x67a8>
   17b64:	ldr	r2, [sp]
   17b68:	add	r1, r9, lr
   17b6c:	add	r6, ip, r3, lsl #2
   17b70:	mov	r4, #0
   17b74:	sub	r1, r1, r0
   17b78:	add	r7, r2, r3, lsl #2
   17b7c:	mov	r3, #0
   17b80:	ldr	r2, [r7, #-4]
   17b84:	sub	r4, r4, #2
   17b88:	adds	r2, r2, sl
   17b8c:	str	r2, [r6, #-4]
   17b90:	ldr	r2, [r7]
   17b94:	add	r7, r7, #8
   17b98:	adcs	r2, r2, #0
   17b9c:	str	r2, [r6]
   17ba0:	adc	sl, r3, #0
   17ba4:	add	r6, r6, #8
   17ba8:	cmp	r1, r4
   17bac:	bne	17b80 <__assert_fail@plt+0x674c>
   17bb0:	rsb	r1, r4, #0
   17bb4:	cmp	lr, #0
   17bb8:	beq	17bdc <__assert_fail@plt+0x67a8>
   17bbc:	ldr	r2, [sp]
   17bc0:	add	r3, ip, r9, lsl #2
   17bc4:	add	r2, r2, r9, lsl #2
   17bc8:	ldr	r2, [r2, r1, lsl #2]
   17bcc:	adds	r2, r2, sl
   17bd0:	str	r2, [r3, r1, lsl #2]
   17bd4:	mov	r1, #0
   17bd8:	adc	sl, r1, #0
   17bdc:	str	sl, [ip, r0, lsl #2]
   17be0:	add	r0, sl, r0
   17be4:	ldr	r1, [r8, #4]
   17be8:	cmn	r1, #1
   17bec:	rsble	r0, r0, #0
   17bf0:	str	r0, [r5, #4]
   17bf4:	sub	sp, fp, #28
   17bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17bfc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17c00:	add	fp, sp, #24
   17c04:	sub	sp, sp, #16
   17c08:	mov	r6, r2
   17c0c:	mov	r5, r1
   17c10:	mov	r4, r0
   17c14:	cmn	r2, #1
   17c18:	ble	17c98 <__assert_fail@plt+0x6864>
   17c1c:	movw	r0, #37256	; 0x9188
   17c20:	cmp	r6, #0
   17c24:	movt	r0, #3
   17c28:	str	r0, [sp, #12]
   17c2c:	mov	r0, #0
   17c30:	str	r0, [sp, #8]
   17c34:	str	r0, [sp, #4]
   17c38:	beq	17d04 <__assert_fail@plt+0x68d0>
   17c3c:	movw	r0, #45348	; 0xb124
   17c40:	mov	r8, #1
   17c44:	movt	r0, #4
   17c48:	str	r8, [sp, #8]
   17c4c:	ldr	r1, [r0]
   17c50:	mov	r0, #4
   17c54:	blx	r1
   17c58:	str	r0, [sp, #12]
   17c5c:	str	r8, [sp, #4]
   17c60:	mov	r7, r0
   17c64:	str	r6, [r0]
   17c68:	add	r2, sp, #4
   17c6c:	mov	r0, r4
   17c70:	mov	r1, r5
   17c74:	bl	17dd0 <__assert_fail@plt+0x699c>
   17c78:	movw	r0, #45356	; 0xb12c
   17c7c:	mov	r1, #4
   17c80:	movt	r0, #4
   17c84:	ldr	r2, [r0]
   17c88:	mov	r0, r7
   17c8c:	blx	r2
   17c90:	sub	sp, fp, #24
   17c94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17c98:	movw	r0, #45348	; 0xb124
   17c9c:	mov	r8, #1
   17ca0:	movt	r0, #4
   17ca4:	str	r8, [sp, #8]
   17ca8:	ldr	r1, [r0]
   17cac:	mov	r0, #4
   17cb0:	blx	r1
   17cb4:	str	r0, [sp, #12]
   17cb8:	mov	r7, r0
   17cbc:	rsb	r0, r6, #0
   17cc0:	str	r8, [sp, #4]
   17cc4:	add	r2, sp, #4
   17cc8:	mov	r1, r5
   17ccc:	str	r0, [r7]
   17cd0:	mov	r0, r4
   17cd4:	bl	17dd0 <__assert_fail@plt+0x699c>
   17cd8:	movw	r0, #45356	; 0xb12c
   17cdc:	mov	r1, #4
   17ce0:	movt	r0, #4
   17ce4:	ldr	r2, [r0]
   17ce8:	mov	r0, r7
   17cec:	blx	r2
   17cf0:	ldr	r0, [r4, #4]
   17cf4:	rsb	r0, r0, #0
   17cf8:	str	r0, [r4, #4]
   17cfc:	sub	sp, fp, #24
   17d00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17d04:	str	r0, [sp, #8]
   17d08:	add	r2, sp, #4
   17d0c:	mov	r0, r4
   17d10:	mov	r1, r5
   17d14:	bl	17dd0 <__assert_fail@plt+0x699c>
   17d18:	sub	sp, fp, #24
   17d1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17d20:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17d24:	add	fp, sp, #24
   17d28:	sub	sp, sp, #16
   17d2c:	mov	r5, r0
   17d30:	movw	r0, #37256	; 0x9188
   17d34:	mov	r4, r1
   17d38:	cmp	r2, #0
   17d3c:	movt	r0, #3
   17d40:	str	r0, [sp, #12]
   17d44:	mov	r0, #0
   17d48:	str	r0, [sp, #8]
   17d4c:	str	r0, [sp, #4]
   17d50:	beq	17db4 <__assert_fail@plt+0x6980>
   17d54:	movw	r0, #45348	; 0xb124
   17d58:	mov	r8, #1
   17d5c:	mov	r6, r2
   17d60:	movt	r0, #4
   17d64:	str	r8, [sp, #8]
   17d68:	ldr	r1, [r0]
   17d6c:	mov	r0, #4
   17d70:	blx	r1
   17d74:	str	r0, [sp, #12]
   17d78:	str	r8, [sp, #4]
   17d7c:	mov	r7, r0
   17d80:	str	r6, [r0]
   17d84:	add	r2, sp, #4
   17d88:	mov	r0, r5
   17d8c:	mov	r1, r4
   17d90:	bl	17dd0 <__assert_fail@plt+0x699c>
   17d94:	movw	r0, #45356	; 0xb12c
   17d98:	mov	r1, #4
   17d9c:	movt	r0, #4
   17da0:	ldr	r2, [r0]
   17da4:	mov	r0, r7
   17da8:	blx	r2
   17dac:	sub	sp, fp, #24
   17db0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17db4:	str	r0, [sp, #8]
   17db8:	add	r2, sp, #4
   17dbc:	mov	r0, r5
   17dc0:	mov	r1, r4
   17dc4:	bl	17dd0 <__assert_fail@plt+0x699c>
   17dc8:	sub	sp, fp, #24
   17dcc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17dd4:	add	fp, sp, #28
   17dd8:	sub	sp, sp, #12
   17ddc:	ldr	sl, [r1, #4]
   17de0:	mov	r4, r0
   17de4:	cmp	sl, #0
   17de8:	ldrne	r5, [r2, #4]
   17dec:	cmpne	r5, #0
   17df0:	bne	17e04 <__assert_fail@plt+0x69d0>
   17df4:	mov	r0, #0
   17df8:	str	r0, [r4, #4]
   17dfc:	sub	sp, fp, #28
   17e00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e04:	cmp	sl, #0
   17e08:	mov	r8, sl
   17e0c:	mov	r9, r5
   17e10:	str	r2, [sp, #8]
   17e14:	mov	r2, #0
   17e18:	mvn	r0, #0
   17e1c:	mov	r6, r1
   17e20:	rsbmi	r8, sl, #0
   17e24:	cmp	r5, #0
   17e28:	rsbmi	r9, r5, #0
   17e2c:	add	r7, r9, r8
   17e30:	cmp	r2, r7, lsl #5
   17e34:	lsl	r1, r7, #5
   17e38:	addne	r1, r0, r7, lsl #5
   17e3c:	mov	r0, #1
   17e40:	add	r2, r0, r1, lsr #5
   17e44:	movw	r0, #45348	; 0xb124
   17e48:	movt	r0, #4
   17e4c:	str	r2, [sp, #4]
   17e50:	ldr	r1, [r0]
   17e54:	lsl	r0, r2, #2
   17e58:	blx	r1
   17e5c:	mov	r2, r0
   17e60:	eor	r5, r5, sl
   17e64:	cmp	r8, r9
   17e68:	bge	17e8c <__assert_fail@plt+0x6a58>
   17e6c:	ldr	r0, [sp, #8]
   17e70:	ldr	r3, [r6, #8]
   17e74:	mov	r6, r2
   17e78:	ldr	r1, [r0, #8]
   17e7c:	mov	r0, r2
   17e80:	mov	r2, r9
   17e84:	str	r8, [sp]
   17e88:	b	17ea8 <__assert_fail@plt+0x6a74>
   17e8c:	ldr	r0, [sp, #8]
   17e90:	ldr	r1, [r6, #8]
   17e94:	mov	r6, r2
   17e98:	ldr	r3, [r0, #8]
   17e9c:	mov	r0, r2
   17ea0:	str	r9, [sp]
   17ea4:	mov	r2, r8
   17ea8:	bl	14344 <__assert_fail@plt+0x2f10>
   17eac:	sub	r2, r7, #1
   17eb0:	ldr	r1, [r4]
   17eb4:	ldr	r0, [r4, #8]
   17eb8:	ldr	r3, [r6, r2, lsl #2]
   17ebc:	cmp	r3, #0
   17ec0:	moveq	r7, r2
   17ec4:	ldr	r2, [sp, #4]
   17ec8:	cmp	r5, #0
   17ecc:	rsbmi	r7, r7, #0
   17ed0:	cmp	r1, #0
   17ed4:	stm	r4, {r2, r7}
   17ed8:	str	r6, [r4, #8]
   17edc:	beq	17dfc <__assert_fail@plt+0x69c8>
   17ee0:	movw	r2, #45356	; 0xb12c
   17ee4:	lsl	r1, r1, #2
   17ee8:	movt	r2, #4
   17eec:	ldr	r2, [r2]
   17ef0:	sub	sp, fp, #28
   17ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ef8:	bx	r2
   17efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f00:	add	fp, sp, #28
   17f04:	sub	sp, sp, #28
   17f08:	ldr	r5, [r1, #4]
   17f0c:	mov	r7, r1
   17f10:	mov	sl, r0
   17f14:	cmp	r5, #0
   17f18:	rsbmi	r5, r5, #0
   17f1c:	cmp	r5, #0
   17f20:	beq	17f7c <__assert_fail@plt+0x6b48>
   17f24:	lsr	lr, r2, #5
   17f28:	mov	r4, #1
   17f2c:	ands	r9, r2, #31
   17f30:	ldr	r1, [sl]
   17f34:	mov	r0, lr
   17f38:	addne	r0, r4, r2, lsr #5
   17f3c:	add	r8, r0, r5
   17f40:	cmp	r8, r1
   17f44:	ble	17f84 <__assert_fail@plt+0x6b50>
   17f48:	cmp	r8, #1
   17f4c:	mov	r6, lr
   17f50:	movhi	r4, r8
   17f54:	cmp	r1, #0
   17f58:	beq	17f8c <__assert_fail@plt+0x6b58>
   17f5c:	movw	r0, #45352	; 0xb128
   17f60:	lsl	r1, r1, #2
   17f64:	lsl	r2, r4, #2
   17f68:	movt	r0, #4
   17f6c:	ldr	r3, [r0]
   17f70:	ldr	r0, [sl, #8]
   17f74:	blx	r3
   17f78:	b	17fa0 <__assert_fail@plt+0x6b6c>
   17f7c:	mov	r8, #0
   17f80:	b	181cc <__assert_fail@plt+0x6d98>
   17f84:	ldr	r0, [sl, #8]
   17f88:	b	17fc4 <__assert_fail@plt+0x6b90>
   17f8c:	movw	r0, #45348	; 0xb124
   17f90:	movt	r0, #4
   17f94:	ldr	r1, [r0]
   17f98:	lsl	r0, r4, #2
   17f9c:	blx	r1
   17fa0:	str	r0, [sl, #8]
   17fa4:	str	r4, [sl]
   17fa8:	mov	lr, r6
   17fac:	ldr	r1, [sl, #4]
   17fb0:	cmp	r1, #0
   17fb4:	rsbmi	r1, r1, #0
   17fb8:	cmp	r1, r4
   17fbc:	movgt	r1, #0
   17fc0:	strgt	r1, [sl, #4]
   17fc4:	ldr	r6, [r7, #8]
   17fc8:	add	r3, r0, lr, lsl #2
   17fcc:	cmp	r9, #0
   17fd0:	beq	18078 <__assert_fail@plt+0x6c44>
   17fd4:	cmp	r5, #0
   17fd8:	ble	181d8 <__assert_fail@plt+0x6da4>
   17fdc:	add	r6, r6, r5, lsl #2
   17fe0:	add	r2, r3, r5, lsl #2
   17fe4:	rsb	r1, r9, #32
   17fe8:	str	r7, [sp, #24]
   17fec:	ldr	r4, [r6, #-4]!
   17ff0:	lsl	r3, r4, r9
   17ff4:	lsr	ip, r4, r1
   17ff8:	subs	r4, r5, #1
   17ffc:	beq	18054 <__assert_fail@plt+0x6c20>
   18000:	tst	r5, #1
   18004:	bne	1801c <__assert_fail@plt+0x6be8>
   18008:	ldr	r4, [r6, #-4]!
   1800c:	orr	r3, r3, r4, lsr r1
   18010:	str	r3, [r2, #-4]!
   18014:	lsl	r3, r4, r9
   18018:	sub	r4, r5, #2
   1801c:	cmp	r5, #2
   18020:	beq	18054 <__assert_fail@plt+0x6c20>
   18024:	sub	r6, r6, #4
   18028:	ldr	r5, [r6]
   1802c:	subs	r4, r4, #2
   18030:	orr	r3, r3, r5, lsr r1
   18034:	str	r3, [r2, #-4]
   18038:	ldr	r7, [r6, #-4]
   1803c:	sub	r6, r6, #8
   18040:	lsl	r3, r7, r9
   18044:	lsr	r7, r7, r1
   18048:	orr	r7, r7, r5, lsl r9
   1804c:	str	r7, [r2, #-8]!
   18050:	bne	18028 <__assert_fail@plt+0x6bf4>
   18054:	ldr	r7, [sp, #24]
   18058:	sub	r1, r8, #1
   1805c:	cmp	ip, #0
   18060:	str	r3, [r2, #-4]
   18064:	str	ip, [r0, r1, lsl #2]
   18068:	moveq	r8, r1
   1806c:	cmp	lr, #0
   18070:	bne	181b4 <__assert_fail@plt+0x6d80>
   18074:	b	181c0 <__assert_fail@plt+0x6d8c>
   18078:	cmp	r5, #1
   1807c:	blt	181ac <__assert_fail@plt+0x6d78>
   18080:	cmp	r5, #4
   18084:	bcc	1818c <__assert_fail@plt+0x6d58>
   18088:	add	r1, r6, r5, lsl #2
   1808c:	cmp	r3, r1
   18090:	addcc	r1, r5, lr
   18094:	addcc	r1, r0, r1, lsl #2
   18098:	cmpcc	r6, r1
   1809c:	bcc	1818c <__assert_fail@plt+0x6d58>
   180a0:	bic	r4, r5, #-2147483645	; 0x80000003
   180a4:	mov	r2, #1
   180a8:	subs	r1, r4, #4
   180ac:	add	r9, r2, r1, lsr #2
   180b0:	and	r1, r9, #1
   180b4:	beq	1815c <__assert_fail@plt+0x6d28>
   180b8:	mvn	r2, #0
   180bc:	str	r4, [sp, #4]
   180c0:	str	r1, [sp]
   180c4:	rsb	r4, r1, #0
   180c8:	sub	r1, r9, #1
   180cc:	str	r0, [sp, #16]
   180d0:	str	lr, [sp, #20]
   180d4:	str	r7, [sp, #24]
   180d8:	str	r6, [sp, #12]
   180dc:	add	ip, r2, r5, lsl #2
   180e0:	mov	r2, r3
   180e4:	mvn	r9, r1
   180e8:	mov	r3, #0
   180ec:	mov	r1, r6
   180f0:	str	r2, [sp, #8]
   180f4:	add	r7, r1, ip
   180f8:	add	r0, r2, ip
   180fc:	sub	r4, r4, #2
   18100:	sub	r1, r1, #32
   18104:	sub	r2, r2, #32
   18108:	add	r3, r3, #8
   1810c:	sub	lr, r7, #15
   18110:	sub	r6, r0, #15
   18114:	sub	r7, r7, #31
   18118:	cmp	r9, r4
   1811c:	sub	r0, r0, #31
   18120:	vld1.32	{d16-d17}, [lr]
   18124:	vst1.32	{d16-d17}, [r6]
   18128:	vld1.32	{d16-d17}, [r7]
   1812c:	vst1.32	{d16-d17}, [r0]
   18130:	bne	180f4 <__assert_fail@plt+0x6cc0>
   18134:	mvn	r2, r3
   18138:	ldr	r7, [sp, #24]
   1813c:	ldr	lr, [sp, #20]
   18140:	ldr	r0, [sp, #16]
   18144:	ldr	r6, [sp, #12]
   18148:	ldr	r3, [sp, #8]
   1814c:	ldm	sp, {r1, r4}
   18150:	cmp	r1, #0
   18154:	bne	18168 <__assert_fail@plt+0x6d34>
   18158:	b	18184 <__assert_fail@plt+0x6d50>
   1815c:	mvn	r2, #0
   18160:	cmp	r1, #0
   18164:	beq	18184 <__assert_fail@plt+0x6d50>
   18168:	add	r2, r5, r2
   1816c:	add	r1, r6, r2, lsl #2
   18170:	sub	r1, r1, #12
   18174:	vld1.32	{d16-d17}, [r1]
   18178:	add	r1, r3, r2, lsl #2
   1817c:	sub	r1, r1, #12
   18180:	vst1.32	{d16-d17}, [r1]
   18184:	subs	r5, r5, r4
   18188:	beq	181ac <__assert_fail@plt+0x6d78>
   1818c:	add	r1, r0, lr, lsl #2
   18190:	sub	r2, r6, #4
   18194:	sub	r1, r1, #4
   18198:	ldr	r3, [r2, r5, lsl #2]
   1819c:	str	r3, [r1, r5, lsl #2]
   181a0:	sub	r5, r5, #1
   181a4:	cmp	r5, #0
   181a8:	bgt	18198 <__assert_fail@plt+0x6d64>
   181ac:	cmp	lr, #0
   181b0:	beq	181c0 <__assert_fail@plt+0x6d8c>
   181b4:	lsl	r2, lr, #2
   181b8:	mov	r1, #0
   181bc:	bl	11368 <memset@plt>
   181c0:	ldr	r0, [r7, #4]
   181c4:	cmp	r0, #0
   181c8:	rsbmi	r8, r8, #0
   181cc:	str	r8, [sl, #4]
   181d0:	sub	sp, fp, #28
   181d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181d8:	movw	r0, #37817	; 0x93b9
   181dc:	movw	r1, #37260	; 0x918c
   181e0:	movw	r3, #37904	; 0x9410
   181e4:	movw	r2, #659	; 0x293
   181e8:	movt	r0, #3
   181ec:	movt	r1, #3
   181f0:	movt	r3, #3
   181f4:	bl	11434 <__assert_fail@plt>
   181f8:	push	{r4, r5, r6, r7, fp, lr}
   181fc:	add	fp, sp, #16
   18200:	sub	sp, sp, #16
   18204:	mov	r4, r0
   18208:	movw	r0, #37256	; 0x9188
   1820c:	mov	r5, r1
   18210:	cmp	r2, #0
   18214:	movt	r0, #3
   18218:	str	r0, [sp, #12]
   1821c:	mov	r0, #0
   18220:	str	r0, [sp, #8]
   18224:	str	r0, [sp, #4]
   18228:	beq	1825c <__assert_fail@plt+0x6e28>
   1822c:	movw	r0, #45348	; 0xb124
   18230:	mov	r7, #1
   18234:	mov	r6, r2
   18238:	movt	r0, #4
   1823c:	str	r7, [sp, #8]
   18240:	ldr	r1, [r0]
   18244:	mov	r0, #4
   18248:	blx	r1
   1824c:	str	r0, [sp, #12]
   18250:	str	r7, [sp, #4]
   18254:	str	r6, [r0]
   18258:	b	18260 <__assert_fail@plt+0x6e2c>
   1825c:	str	r0, [sp, #8]
   18260:	add	r6, sp, #4
   18264:	mov	r1, r5
   18268:	mov	r0, r6
   1826c:	mov	r2, r6
   18270:	bl	17dd0 <__assert_fail@plt+0x699c>
   18274:	mov	r0, r4
   18278:	mov	r1, r4
   1827c:	mov	r2, r6
   18280:	bl	1707c <__assert_fail@plt+0x5c48>
   18284:	ldr	r0, [sp, #4]
   18288:	cmp	r0, #0
   1828c:	beq	182a8 <__assert_fail@plt+0x6e74>
   18290:	movw	r1, #45356	; 0xb12c
   18294:	movt	r1, #4
   18298:	ldr	r2, [r1]
   1829c:	lsl	r1, r0, #2
   182a0:	ldr	r0, [sp, #12]
   182a4:	blx	r2
   182a8:	sub	sp, fp, #16
   182ac:	pop	{r4, r5, r6, r7, fp, pc}
   182b0:	push	{r4, r5, r6, r7, fp, lr}
   182b4:	add	fp, sp, #16
   182b8:	sub	sp, sp, #16
   182bc:	mov	r4, r0
   182c0:	movw	r0, #37256	; 0x9188
   182c4:	mov	r5, r1
   182c8:	cmp	r2, #0
   182cc:	movt	r0, #3
   182d0:	str	r0, [sp, #12]
   182d4:	mov	r0, #0
   182d8:	str	r0, [sp, #8]
   182dc:	str	r0, [sp, #4]
   182e0:	beq	18314 <__assert_fail@plt+0x6ee0>
   182e4:	movw	r0, #45348	; 0xb124
   182e8:	mov	r7, #1
   182ec:	mov	r6, r2
   182f0:	movt	r0, #4
   182f4:	str	r7, [sp, #8]
   182f8:	ldr	r1, [r0]
   182fc:	mov	r0, #4
   18300:	blx	r1
   18304:	str	r0, [sp, #12]
   18308:	str	r7, [sp, #4]
   1830c:	str	r6, [r0]
   18310:	b	18318 <__assert_fail@plt+0x6ee4>
   18314:	str	r0, [sp, #8]
   18318:	add	r6, sp, #4
   1831c:	mov	r1, r5
   18320:	mov	r0, r6
   18324:	mov	r2, r6
   18328:	bl	17dd0 <__assert_fail@plt+0x699c>
   1832c:	mov	r0, r4
   18330:	mov	r1, r4
   18334:	mov	r2, r6
   18338:	bl	179e4 <__assert_fail@plt+0x65b0>
   1833c:	ldr	r0, [sp, #4]
   18340:	cmp	r0, #0
   18344:	beq	18360 <__assert_fail@plt+0x6f2c>
   18348:	movw	r1, #45356	; 0xb12c
   1834c:	movt	r1, #4
   18350:	ldr	r2, [r1]
   18354:	lsl	r1, r0, #2
   18358:	ldr	r0, [sp, #12]
   1835c:	blx	r2
   18360:	sub	sp, fp, #16
   18364:	pop	{r4, r5, r6, r7, fp, pc}
   18368:	push	{r4, r5, fp, lr}
   1836c:	add	fp, sp, #8
   18370:	sub	sp, sp, #16
   18374:	mov	r4, r0
   18378:	movw	r0, #37256	; 0x9188
   1837c:	add	r5, sp, #4
   18380:	movt	r0, #3
   18384:	str	r0, [sp, #12]
   18388:	mov	r0, #0
   1838c:	str	r0, [sp, #8]
   18390:	str	r0, [sp, #4]
   18394:	mov	r0, r5
   18398:	bl	17dd0 <__assert_fail@plt+0x699c>
   1839c:	mov	r0, r4
   183a0:	mov	r1, r4
   183a4:	mov	r2, r5
   183a8:	bl	1707c <__assert_fail@plt+0x5c48>
   183ac:	ldr	r0, [sp, #4]
   183b0:	cmp	r0, #0
   183b4:	beq	183d0 <__assert_fail@plt+0x6f9c>
   183b8:	movw	r1, #45356	; 0xb12c
   183bc:	movt	r1, #4
   183c0:	ldr	r2, [r1]
   183c4:	lsl	r1, r0, #2
   183c8:	ldr	r0, [sp, #12]
   183cc:	blx	r2
   183d0:	sub	sp, fp, #8
   183d4:	pop	{r4, r5, fp, pc}
   183d8:	push	{r4, r5, fp, lr}
   183dc:	add	fp, sp, #8
   183e0:	sub	sp, sp, #16
   183e4:	mov	r4, r0
   183e8:	movw	r0, #37256	; 0x9188
   183ec:	add	r5, sp, #4
   183f0:	movt	r0, #3
   183f4:	str	r0, [sp, #12]
   183f8:	mov	r0, #0
   183fc:	str	r0, [sp, #8]
   18400:	str	r0, [sp, #4]
   18404:	mov	r0, r5
   18408:	bl	17dd0 <__assert_fail@plt+0x699c>
   1840c:	mov	r0, r4
   18410:	mov	r1, r4
   18414:	mov	r2, r5
   18418:	bl	179e4 <__assert_fail@plt+0x65b0>
   1841c:	ldr	r0, [sp, #4]
   18420:	cmp	r0, #0
   18424:	beq	18440 <__assert_fail@plt+0x700c>
   18428:	movw	r1, #45356	; 0xb12c
   1842c:	movt	r1, #4
   18430:	ldr	r2, [r1]
   18434:	lsl	r1, r0, #2
   18438:	ldr	r0, [sp, #12]
   1843c:	blx	r2
   18440:	sub	sp, fp, #8
   18444:	pop	{r4, r5, fp, pc}
   18448:	push	{fp, lr}
   1844c:	mov	fp, sp
   18450:	sub	sp, sp, #8
   18454:	mov	ip, #1
   18458:	str	ip, [sp]
   1845c:	bl	18468 <__assert_fail@plt+0x7034>
   18460:	mov	sp, fp
   18464:	pop	{fp, pc}
   18468:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1846c:	add	fp, sp, #28
   18470:	sub	sp, sp, #92	; 0x5c
   18474:	mov	r8, r0
   18478:	ldr	r0, [r3, #4]
   1847c:	cmp	r0, #0
   18480:	beq	18e44 <__assert_fail@plt+0x7a10>
   18484:	ldr	r4, [r2, #4]
   18488:	mov	sl, r1
   1848c:	cmp	r4, #0
   18490:	beq	184f4 <__assert_fail@plt+0x70c0>
   18494:	mov	r5, r3
   18498:	cmp	r0, #0
   1849c:	ldr	r3, [fp, #8]
   184a0:	mov	r9, r0
   184a4:	mov	ip, r4
   184a8:	eor	r1, r0, r4
   184ac:	rsbmi	r9, r0, #0
   184b0:	cmp	r4, #0
   184b4:	rsbmi	ip, r4, #0
   184b8:	cmp	ip, r9
   184bc:	bge	18510 <__assert_fail@plt+0x70dc>
   184c0:	cmp	r3, #1
   184c4:	bne	1871c <__assert_fail@plt+0x72e8>
   184c8:	cmp	r1, #0
   184cc:	bmi	1871c <__assert_fail@plt+0x72e8>
   184d0:	cmp	sl, #0
   184d4:	movne	r1, r2
   184d8:	movne	r0, sl
   184dc:	movne	r2, r5
   184e0:	blne	179e4 <__assert_fail@plt+0x65b0>
   184e4:	cmp	r8, #0
   184e8:	beq	18764 <__assert_fail@plt+0x7330>
   184ec:	mov	r0, #1
   184f0:	b	1874c <__assert_fail@plt+0x7318>
   184f4:	cmp	r8, #0
   184f8:	mov	r4, #0
   184fc:	movne	r0, #0
   18500:	strne	r0, [r8, #4]
   18504:	cmp	sl, #0
   18508:	strne	r4, [sl, #4]
   1850c:	b	18e38 <__assert_fail@plt+0x7a04>
   18510:	movw	r0, #37256	; 0x9188
   18514:	mov	r6, #0
   18518:	str	r4, [sp, #32]
   1851c:	str	r8, [sp, #44]	; 0x2c
   18520:	str	sl, [sp, #40]	; 0x28
   18524:	str	r5, [sp, #28]
   18528:	str	r1, [sp, #36]	; 0x24
   1852c:	movt	r0, #3
   18530:	str	r0, [sp, #60]	; 0x3c
   18534:	str	r0, [sp, #48]	; 0x30
   18538:	add	r0, sp, #52	; 0x34
   1853c:	str	r6, [sp, #56]	; 0x38
   18540:	str	r6, [sp, #52]	; 0x34
   18544:	cmp	r0, r2
   18548:	beq	187d4 <__assert_fail@plt+0x73a0>
   1854c:	cmp	ip, #1
   18550:	blt	187c0 <__assert_fail@plt+0x738c>
   18554:	movw	r0, #45348	; 0xb124
   18558:	str	r2, [sp, #24]
   1855c:	mov	r4, ip
   18560:	movt	r0, #4
   18564:	ldr	r1, [r0]
   18568:	lsl	r0, ip, #2
   1856c:	blx	r1
   18570:	str	r0, [sp, #60]	; 0x3c
   18574:	str	r4, [sp, #52]	; 0x34
   18578:	mov	ip, r4
   1857c:	ldr	r4, [sp, #24]
   18580:	ldr	r1, [sp, #56]	; 0x38
   18584:	cmp	r1, #0
   18588:	rsbmi	r1, r1, #0
   1858c:	cmp	r1, ip
   18590:	movgt	r1, #0
   18594:	strgt	r1, [sp, #56]	; 0x38
   18598:	mov	r1, #0
   1859c:	cmp	ip, #4
   185a0:	ldr	lr, [r4, #8]
   185a4:	bcc	18698 <__assert_fail@plt+0x7264>
   185a8:	add	r2, lr, ip, lsl #2
   185ac:	cmp	r0, r2
   185b0:	bcs	185c0 <__assert_fail@plt+0x718c>
   185b4:	add	r2, r0, ip, lsl #2
   185b8:	cmp	r2, lr
   185bc:	bhi	18698 <__assert_fail@plt+0x7264>
   185c0:	bic	r1, ip, #-2147483645	; 0x80000003
   185c4:	mov	r2, #1
   185c8:	mov	r8, #0
   185cc:	str	ip, [sp, #20]
   185d0:	sub	r7, r1, #4
   185d4:	add	r2, r2, r7, lsr #2
   185d8:	cmp	r7, #12
   185dc:	and	r3, r2, #3
   185e0:	str	r3, [sp, #16]
   185e4:	mov	r3, r0
   185e8:	bcc	18658 <__assert_fail@plt+0x7224>
   185ec:	ldr	r0, [sp, #16]
   185f0:	mov	r7, #0
   185f4:	mov	r8, #0
   185f8:	sub	sl, r2, r0
   185fc:	add	r6, lr, r7
   18600:	mov	r5, #48	; 0x30
   18604:	mov	r0, r3
   18608:	add	r3, r3, r7
   1860c:	add	r7, r7, #64	; 0x40
   18610:	subs	sl, sl, #4
   18614:	add	r8, r8, #16
   18618:	mov	r4, r6
   1861c:	mov	r2, r3
   18620:	add	ip, r6, #16
   18624:	add	r6, r6, #32
   18628:	vld1.32	{d16-d17}, [r4], r5
   1862c:	vst1.32	{d16-d17}, [r2], r5
   18630:	add	r5, r3, #16
   18634:	add	r3, r3, #32
   18638:	vld1.32	{d16-d17}, [ip]
   1863c:	vst1.32	{d16-d17}, [r5]
   18640:	vld1.32	{d16-d17}, [r6]
   18644:	vst1.32	{d16-d17}, [r3]
   18648:	mov	r3, r0
   1864c:	vld1.32	{d16-d17}, [r4]
   18650:	vst1.32	{d16-d17}, [r2]
   18654:	bne	185fc <__assert_fail@plt+0x71c8>
   18658:	ldr	r7, [sp, #16]
   1865c:	mov	r0, r3
   18660:	cmp	r7, #0
   18664:	beq	18684 <__assert_fail@plt+0x7250>
   18668:	add	r2, lr, r8, lsl #2
   1866c:	add	r3, r0, r8, lsl #2
   18670:	rsb	r7, r7, #0
   18674:	vld1.32	{d16-d17}, [r2]!
   18678:	adds	r7, r7, #1
   1867c:	vst1.32	{d16-d17}, [r3]!
   18680:	bcc	18674 <__assert_fail@plt+0x7240>
   18684:	ldr	ip, [sp, #20]
   18688:	ldr	r8, [sp, #44]	; 0x2c
   1868c:	ldr	r4, [sp, #24]
   18690:	cmp	ip, r1
   18694:	beq	18708 <__assert_fail@plt+0x72d4>
   18698:	mvn	r2, r1
   1869c:	ands	r3, ip, #3
   186a0:	add	r2, ip, r2
   186a4:	beq	186bc <__assert_fail@plt+0x7288>
   186a8:	ldr	r7, [lr, r1, lsl #2]
   186ac:	subs	r3, r3, #1
   186b0:	str	r7, [r0, r1, lsl #2]
   186b4:	add	r1, r1, #1
   186b8:	bne	186a8 <__assert_fail@plt+0x7274>
   186bc:	cmp	r2, #3
   186c0:	bcc	18708 <__assert_fail@plt+0x72d4>
   186c4:	sub	r2, ip, r1
   186c8:	lsl	r1, r1, #2
   186cc:	mov	r3, r0
   186d0:	add	r7, lr, #16
   186d4:	ldr	r6, [lr, r1]!
   186d8:	add	r5, r3, #16
   186dc:	subs	r2, r2, #4
   186e0:	str	r6, [r3, r1]!
   186e4:	ldr	r6, [lr, #4]
   186e8:	str	r6, [r3, #4]
   186ec:	ldr	r6, [lr, #8]
   186f0:	str	r6, [r3, #8]
   186f4:	ldr	r6, [lr, #12]
   186f8:	mov	lr, r7
   186fc:	str	r6, [r3, #12]
   18700:	mov	r3, r5
   18704:	bne	186d0 <__assert_fail@plt+0x729c>
   18708:	str	r0, [sp, #48]	; 0x30
   1870c:	ldr	r0, [r4, #4]
   18710:	ldr	r5, [sp, #28]
   18714:	mov	r6, #0
   18718:	b	187d0 <__assert_fail@plt+0x739c>
   1871c:	cmp	r3, #0
   18720:	bne	1876c <__assert_fail@plt+0x7338>
   18724:	cmn	r1, #1
   18728:	bgt	1876c <__assert_fail@plt+0x7338>
   1872c:	cmp	sl, #0
   18730:	movne	r1, r2
   18734:	movne	r0, sl
   18738:	movne	r2, r5
   1873c:	blne	1707c <__assert_fail@plt+0x5c48>
   18740:	cmp	r8, #0
   18744:	beq	18764 <__assert_fail@plt+0x7330>
   18748:	mvn	r0, #0
   1874c:	str	r0, [r8, #4]
   18750:	ldr	r1, [r8]
   18754:	cmp	r1, #0
   18758:	ble	18908 <__assert_fail@plt+0x74d4>
   1875c:	ldr	r0, [r8, #8]
   18760:	b	18c6c <__assert_fail@plt+0x7838>
   18764:	mov	r4, #1
   18768:	b	18e38 <__assert_fail@plt+0x7a04>
   1876c:	cmp	sl, r2
   18770:	cmpne	sl, #0
   18774:	beq	18e28 <__assert_fail@plt+0x79f4>
   18778:	ldr	r1, [sl]
   1877c:	cmp	ip, r1
   18780:	ble	18c78 <__assert_fail@plt+0x7844>
   18784:	cmp	ip, #1
   18788:	mov	r4, ip
   1878c:	mov	r6, r2
   18790:	mov	r5, ip
   18794:	movle	r4, #1
   18798:	cmp	r1, #0
   1879c:	beq	18c88 <__assert_fail@plt+0x7854>
   187a0:	movw	r0, #45352	; 0xb128
   187a4:	lsl	r1, r1, #2
   187a8:	lsl	r2, r4, #2
   187ac:	movt	r0, #4
   187b0:	ldr	r3, [r0]
   187b4:	ldr	r0, [sl, #8]
   187b8:	blx	r3
   187bc:	b	18c9c <__assert_fail@plt+0x7868>
   187c0:	movw	r0, #37256	; 0x9188
   187c4:	movt	r0, #3
   187c8:	str	r0, [sp, #48]	; 0x30
   187cc:	mov	r0, r4
   187d0:	str	r0, [sp, #56]	; 0x38
   187d4:	sub	r1, ip, r9
   187d8:	mov	r4, ip
   187dc:	cmp	r8, #0
   187e0:	add	sl, r1, #1
   187e4:	mov	r0, r1
   187e8:	str	r1, [sp, #24]
   187ec:	beq	18830 <__assert_fail@plt+0x73fc>
   187f0:	mov	r0, #0
   187f4:	mvn	r1, #0
   187f8:	lsl	r2, sl, #5
   187fc:	cmp	r0, sl, lsl #5
   18800:	str	r0, [fp, #-52]	; 0xffffffcc
   18804:	mov	r0, #1
   18808:	addne	r2, r1, sl, lsl #5
   1880c:	movw	r1, #45348	; 0xb124
   18810:	movt	r1, #4
   18814:	add	r0, r0, r2, lsr #5
   18818:	ldr	r1, [r1]
   1881c:	str	r0, [fp, #-56]	; 0xffffffc8
   18820:	lsl	r0, r0, #2
   18824:	blx	r1
   18828:	mov	r6, r0
   1882c:	str	r0, [fp, #-48]	; 0xffffffd0
   18830:	cmp	r9, #0
   18834:	ble	18e50 <__assert_fail@plt+0x7a1c>
   18838:	ldr	r7, [r5, #8]
   1883c:	sub	r5, fp, #44	; 0x2c
   18840:	mov	r2, r9
   18844:	mov	r0, r5
   18848:	mov	r1, r7
   1884c:	bl	1d350 <__assert_fail@plt+0xbf1c>
   18850:	cmp	r9, #3
   18854:	blt	188d4 <__assert_fail@plt+0x74a0>
   18858:	ldr	r8, [fp, #-44]	; 0xffffffd4
   1885c:	cmp	r8, #0
   18860:	beq	188d4 <__assert_fail@plt+0x74a0>
   18864:	movw	r0, #45348	; 0xb124
   18868:	movt	r0, #4
   1886c:	ldr	r1, [r0]
   18870:	lsl	r0, r9, #2
   18874:	str	r0, [sp, #12]
   18878:	blx	r1
   1887c:	cmp	r8, #32
   18880:	bcs	18e68 <__assert_fail@plt+0x7a34>
   18884:	str	r0, [sp, #16]
   18888:	add	r1, r0, r9, lsl #2
   1888c:	add	r0, r7, r9, lsl #2
   18890:	rsb	r2, r8, #32
   18894:	tst	r9, #1
   18898:	str	r6, [sp, #20]
   1889c:	ldr	ip, [r0, #-4]!
   188a0:	lsl	r3, ip, r8
   188a4:	bne	1892c <__assert_fail@plt+0x74f8>
   188a8:	mov	r5, r4
   188ac:	ldr	r4, [r0, #-4]!
   188b0:	mov	lr, r1
   188b4:	sub	r7, r9, #2
   188b8:	orr	r3, r3, r4, lsr r2
   188bc:	str	r3, [lr, #-4]!
   188c0:	lsl	r3, r4, r8
   188c4:	mov	r4, r5
   188c8:	cmp	r9, #2
   188cc:	bne	1893c <__assert_fail@plt+0x7508>
   188d0:	b	18970 <__assert_fail@plt+0x753c>
   188d4:	ldr	r1, [sp, #48]	; 0x30
   188d8:	mov	r0, r6
   188dc:	mov	r2, r4
   188e0:	mov	r3, r7
   188e4:	str	r9, [sp]
   188e8:	str	r5, [sp, #4]
   188ec:	bl	1d5c8 <__assert_fail@plt+0xc194>
   188f0:	cmp	r6, #0
   188f4:	bne	189d0 <__assert_fail@plt+0x759c>
   188f8:	add	r7, sp, #36	; 0x24
   188fc:	mov	ip, #0
   18900:	ldm	r7, {r3, r6, r7}
   18904:	b	189fc <__assert_fail@plt+0x75c8>
   18908:	beq	18c34 <__assert_fail@plt+0x7800>
   1890c:	movw	r0, #45352	; 0xb128
   18910:	lsl	r1, r1, #2
   18914:	mov	r2, #4
   18918:	movt	r0, #4
   1891c:	ldr	r3, [r0]
   18920:	ldr	r0, [r8, #8]
   18924:	blx	r3
   18928:	b	18c48 <__assert_fail@plt+0x7814>
   1892c:	sub	r7, r9, #1
   18930:	mov	lr, r1
   18934:	cmp	r9, #2
   18938:	beq	18970 <__assert_fail@plt+0x753c>
   1893c:	sub	r0, r0, #4
   18940:	add	r1, lr, #4
   18944:	ldr	r6, [r0]
   18948:	subs	r7, r7, #2
   1894c:	orr	r3, r3, r6, lsr r2
   18950:	str	r3, [r1, #-8]!
   18954:	ldr	r3, [r0, #-4]
   18958:	sub	r0, r0, #8
   1895c:	lsr	r5, r3, r2
   18960:	lsl	r3, r3, r8
   18964:	orr	r6, r5, r6, lsl r8
   18968:	str	r6, [r1, #-4]
   1896c:	bne	18944 <__assert_fail@plt+0x7510>
   18970:	mov	r0, #0
   18974:	str	r3, [r1, #-8]
   18978:	cmp	r0, ip, lsr r2
   1897c:	bne	18e88 <__assert_fail@plt+0x7a54>
   18980:	mov	r2, r4
   18984:	ldr	r4, [sp, #16]
   18988:	ldr	r6, [sp, #20]
   1898c:	ldr	r1, [sp, #48]	; 0x30
   18990:	sub	r0, fp, #44	; 0x2c
   18994:	str	r9, [sp]
   18998:	str	r0, [sp, #4]
   1899c:	mov	r0, r6
   189a0:	mov	r3, r4
   189a4:	bl	1d5c8 <__assert_fail@plt+0xc194>
   189a8:	cmp	r4, #0
   189ac:	beq	189c8 <__assert_fail@plt+0x7594>
   189b0:	movw	r0, #45356	; 0xb12c
   189b4:	ldr	r1, [sp, #12]
   189b8:	movt	r0, #4
   189bc:	ldr	r2, [r0]
   189c0:	mov	r0, r4
   189c4:	blx	r2
   189c8:	cmp	r6, #0
   189cc:	beq	188f8 <__assert_fail@plt+0x74c4>
   189d0:	ldr	r0, [sp, #24]
   189d4:	ldr	r3, [sp, #36]	; 0x24
   189d8:	ldr	r7, [sp, #44]	; 0x2c
   189dc:	ldr	r0, [r6, r0, lsl #2]
   189e0:	ldr	r6, [sp, #40]	; 0x28
   189e4:	cmp	r0, #0
   189e8:	subeq	sl, sl, #1
   189ec:	cmp	r3, #0
   189f0:	rsbmi	sl, sl, #0
   189f4:	rsb	ip, sl, #0
   189f8:	str	sl, [fp, #-52]	; 0xffffffcc
   189fc:	ldr	r1, [sp, #48]	; 0x30
   18a00:	ldr	r5, [fp, #8]
   18a04:	ldr	r0, [sp, #32]
   18a08:	sub	r1, r1, #4
   18a0c:	mov	r4, r9
   18a10:	cmp	r9, #1
   18a14:	blt	18a28 <__assert_fail@plt+0x75f4>
   18a18:	ldr	r2, [r1, r4, lsl #2]
   18a1c:	sub	r9, r4, #1
   18a20:	cmp	r2, #0
   18a24:	beq	18a0c <__assert_fail@plt+0x75d8>
   18a28:	cmp	r0, #0
   18a2c:	mov	r1, r4
   18a30:	rsbmi	r1, r1, #0
   18a34:	cmp	r5, #0
   18a38:	str	r1, [sp, #56]	; 0x38
   18a3c:	bne	18ae0 <__assert_fail@plt+0x76ac>
   18a40:	cmn	r3, #1
   18a44:	bgt	18ae0 <__assert_fail@plt+0x76ac>
   18a48:	cmp	r4, #0
   18a4c:	beq	18ae0 <__assert_fail@plt+0x76ac>
   18a50:	cmp	r7, #0
   18a54:	beq	18abc <__assert_fail@plt+0x7688>
   18a58:	movw	r0, #45348	; 0xb124
   18a5c:	mov	r8, #1
   18a60:	str	ip, [fp, #-52]	; 0xffffffcc
   18a64:	movt	r0, #4
   18a68:	str	r8, [fp, #-40]	; 0xffffffd8
   18a6c:	ldr	r1, [r0]
   18a70:	mov	r0, #4
   18a74:	blx	r1
   18a78:	str	r0, [fp, #-36]	; 0xffffffdc
   18a7c:	str	r8, [fp, #-44]	; 0xffffffd4
   18a80:	mov	r5, r0
   18a84:	str	r8, [r0]
   18a88:	sub	r0, fp, #56	; 0x38
   18a8c:	sub	r2, fp, #44	; 0x2c
   18a90:	mov	r1, r0
   18a94:	bl	1707c <__assert_fail@plt+0x5c48>
   18a98:	movw	r0, #45356	; 0xb12c
   18a9c:	mov	r1, #4
   18aa0:	movt	r0, #4
   18aa4:	ldr	r2, [r0]
   18aa8:	mov	r0, r5
   18aac:	blx	r2
   18ab0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18ab4:	rsb	r0, r0, #0
   18ab8:	str	r0, [fp, #-52]	; 0xffffffcc
   18abc:	cmp	r6, #0
   18ac0:	beq	18b6c <__assert_fail@plt+0x7738>
   18ac4:	ldr	r2, [sp, #28]
   18ac8:	add	r0, sp, #52	; 0x34
   18acc:	mov	r1, r0
   18ad0:	bl	1707c <__assert_fail@plt+0x5c48>
   18ad4:	cmp	r7, #0
   18ad8:	bne	18b74 <__assert_fail@plt+0x7740>
   18adc:	b	18bc0 <__assert_fail@plt+0x778c>
   18ae0:	cmp	r5, #1
   18ae4:	bne	18b6c <__assert_fail@plt+0x7738>
   18ae8:	cmp	r3, #0
   18aec:	bmi	18b6c <__assert_fail@plt+0x7738>
   18af0:	cmp	r4, #0
   18af4:	beq	18b6c <__assert_fail@plt+0x7738>
   18af8:	cmp	r7, #0
   18afc:	beq	18b54 <__assert_fail@plt+0x7720>
   18b00:	movw	r0, #45348	; 0xb124
   18b04:	mov	r8, #1
   18b08:	movt	r0, #4
   18b0c:	str	r8, [fp, #-40]	; 0xffffffd8
   18b10:	ldr	r1, [r0]
   18b14:	mov	r0, #4
   18b18:	blx	r1
   18b1c:	str	r0, [fp, #-36]	; 0xffffffdc
   18b20:	str	r8, [fp, #-44]	; 0xffffffd4
   18b24:	mov	r5, r0
   18b28:	str	r8, [r0]
   18b2c:	sub	r0, fp, #56	; 0x38
   18b30:	sub	r2, fp, #44	; 0x2c
   18b34:	mov	r1, r0
   18b38:	bl	1707c <__assert_fail@plt+0x5c48>
   18b3c:	movw	r0, #45356	; 0xb12c
   18b40:	mov	r1, #4
   18b44:	movt	r0, #4
   18b48:	ldr	r2, [r0]
   18b4c:	mov	r0, r5
   18b50:	blx	r2
   18b54:	cmp	r6, #0
   18b58:	beq	18b6c <__assert_fail@plt+0x7738>
   18b5c:	ldr	r2, [sp, #28]
   18b60:	add	r0, sp, #52	; 0x34
   18b64:	mov	r1, r0
   18b68:	bl	179e4 <__assert_fail@plt+0x65b0>
   18b6c:	cmp	r7, #0
   18b70:	beq	18bc0 <__assert_fail@plt+0x778c>
   18b74:	ldr	r0, [r7, #4]
   18b78:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18b7c:	str	r0, [fp, #-52]	; 0xffffffcc
   18b80:	str	r1, [r7, #4]
   18b84:	ldr	r1, [r7]
   18b88:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18b8c:	str	r1, [fp, #-56]	; 0xffffffc8
   18b90:	str	r0, [r7]
   18b94:	cmp	r1, #0
   18b98:	ldr	r0, [r7, #8]
   18b9c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   18ba0:	str	r0, [fp, #-48]	; 0xffffffd0
   18ba4:	str	r2, [r7, #8]
   18ba8:	beq	18bc0 <__assert_fail@plt+0x778c>
   18bac:	movw	r2, #45356	; 0xb12c
   18bb0:	lsl	r1, r1, #2
   18bb4:	movt	r2, #4
   18bb8:	ldr	r2, [r2]
   18bbc:	blx	r2
   18bc0:	cmp	r6, #0
   18bc4:	beq	18c24 <__assert_fail@plt+0x77f0>
   18bc8:	ldr	r0, [r6, #4]
   18bcc:	ldr	r1, [sp, #56]	; 0x38
   18bd0:	str	r0, [sp, #56]	; 0x38
   18bd4:	str	r1, [r6, #4]
   18bd8:	ldr	r0, [r6]
   18bdc:	ldr	r1, [sp, #52]	; 0x34
   18be0:	str	r0, [sp, #52]	; 0x34
   18be4:	str	r1, [r6]
   18be8:	ldr	r1, [r6, #8]
   18bec:	ldr	r2, [sp, #60]	; 0x3c
   18bf0:	str	r1, [sp, #60]	; 0x3c
   18bf4:	str	r2, [r6, #8]
   18bf8:	cmp	r0, #0
   18bfc:	beq	18c18 <__assert_fail@plt+0x77e4>
   18c00:	movw	r1, #45356	; 0xb12c
   18c04:	movt	r1, #4
   18c08:	ldr	r2, [r1]
   18c0c:	lsl	r1, r0, #2
   18c10:	ldr	r0, [sp, #60]	; 0x3c
   18c14:	blx	r2
   18c18:	cmp	r4, #0
   18c1c:	movwne	r4, #1
   18c20:	b	18e38 <__assert_fail@plt+0x7a04>
   18c24:	ldr	r0, [sp, #52]	; 0x34
   18c28:	cmp	r0, #0
   18c2c:	bne	18c00 <__assert_fail@plt+0x77cc>
   18c30:	b	18c18 <__assert_fail@plt+0x77e4>
   18c34:	movw	r0, #45348	; 0xb124
   18c38:	movt	r0, #4
   18c3c:	ldr	r1, [r0]
   18c40:	mov	r0, #4
   18c44:	blx	r1
   18c48:	mov	r1, #1
   18c4c:	str	r0, [r8, #8]
   18c50:	str	r1, [r8]
   18c54:	ldr	r1, [r8, #4]
   18c58:	cmp	r1, #0
   18c5c:	rsbmi	r1, r1, #0
   18c60:	cmp	r1, #2
   18c64:	movge	r1, #0
   18c68:	strge	r1, [r8, #4]
   18c6c:	mov	r4, #1
   18c70:	str	r4, [r0]
   18c74:	b	18e38 <__assert_fail@plt+0x7a04>
   18c78:	ldr	r0, [sl, #8]
   18c7c:	cmp	ip, #1
   18c80:	bge	18cc4 <__assert_fail@plt+0x7890>
   18c84:	b	18e20 <__assert_fail@plt+0x79ec>
   18c88:	movw	r0, #45348	; 0xb124
   18c8c:	movt	r0, #4
   18c90:	ldr	r1, [r0]
   18c94:	lsl	r0, r4, #2
   18c98:	blx	r1
   18c9c:	str	r0, [sl, #8]
   18ca0:	str	r4, [sl]
   18ca4:	mov	r2, r6
   18ca8:	mov	ip, r5
   18cac:	ldr	r1, [sl, #4]
   18cb0:	cmp	r1, #0
   18cb4:	rsbmi	r1, r1, #0
   18cb8:	cmp	r1, r4
   18cbc:	movgt	r1, #0
   18cc0:	strgt	r1, [sl, #4]
   18cc4:	ldr	r1, [r2, #8]
   18cc8:	mov	r9, #0
   18ccc:	cmp	ip, #4
   18cd0:	bcc	18db4 <__assert_fail@plt+0x7980>
   18cd4:	add	r3, r1, ip, lsl #2
   18cd8:	cmp	r0, r3
   18cdc:	addcc	r3, r0, ip, lsl #2
   18ce0:	cmpcc	r1, r3
   18ce4:	bcc	18db4 <__assert_fail@plt+0x7980>
   18ce8:	bic	r9, ip, #-2147483645	; 0x80000003
   18cec:	mov	r3, #1
   18cf0:	str	sl, [sp, #40]	; 0x28
   18cf4:	str	r2, [sp, #24]
   18cf8:	mov	sl, #0
   18cfc:	str	r8, [sp, #44]	; 0x2c
   18d00:	str	ip, [sp, #20]
   18d04:	sub	r5, r9, #4
   18d08:	add	r7, r3, r5, lsr #2
   18d0c:	cmp	r5, #12
   18d10:	and	r2, r7, #3
   18d14:	bcc	18d78 <__assert_fail@plt+0x7944>
   18d18:	sub	r8, r7, r2
   18d1c:	mov	r4, #0
   18d20:	mov	sl, #0
   18d24:	add	r3, r1, r4
   18d28:	mov	r5, #48	; 0x30
   18d2c:	add	r6, r0, r4
   18d30:	add	r4, r4, #64	; 0x40
   18d34:	subs	r8, r8, #4
   18d38:	add	sl, sl, #16
   18d3c:	mov	r7, r3
   18d40:	mov	ip, r6
   18d44:	add	lr, r3, #16
   18d48:	add	r3, r3, #32
   18d4c:	vld1.32	{d16-d17}, [r7], r5
   18d50:	vst1.32	{d16-d17}, [ip], r5
   18d54:	add	r5, r6, #16
   18d58:	vld1.32	{d16-d17}, [lr]
   18d5c:	vst1.32	{d16-d17}, [r5]
   18d60:	vld1.32	{d16-d17}, [r3]
   18d64:	add	r3, r6, #32
   18d68:	vst1.32	{d16-d17}, [r3]
   18d6c:	vld1.32	{d16-d17}, [r7]
   18d70:	vst1.32	{d16-d17}, [ip]
   18d74:	bne	18d24 <__assert_fail@plt+0x78f0>
   18d78:	cmp	r2, #0
   18d7c:	beq	18d9c <__assert_fail@plt+0x7968>
   18d80:	add	r7, r1, sl, lsl #2
   18d84:	add	r6, r0, sl, lsl #2
   18d88:	rsb	r3, r2, #0
   18d8c:	vld1.32	{d16-d17}, [r7]!
   18d90:	adds	r3, r3, #1
   18d94:	vst1.32	{d16-d17}, [r6]!
   18d98:	bcc	18d8c <__assert_fail@plt+0x7958>
   18d9c:	ldr	ip, [sp, #20]
   18da0:	ldr	r8, [sp, #44]	; 0x2c
   18da4:	ldr	sl, [sp, #40]	; 0x28
   18da8:	ldr	r2, [sp, #24]
   18dac:	cmp	ip, r9
   18db0:	beq	18e20 <__assert_fail@plt+0x79ec>
   18db4:	mvn	r3, r9
   18db8:	ands	r7, ip, #3
   18dbc:	add	r3, ip, r3
   18dc0:	beq	18dd8 <__assert_fail@plt+0x79a4>
   18dc4:	ldr	r6, [r1, r9, lsl #2]
   18dc8:	subs	r7, r7, #1
   18dcc:	str	r6, [r0, r9, lsl #2]
   18dd0:	add	r9, r9, #1
   18dd4:	bne	18dc4 <__assert_fail@plt+0x7990>
   18dd8:	cmp	r3, #3
   18ddc:	bcc	18e20 <__assert_fail@plt+0x79ec>
   18de0:	sub	r3, ip, r9
   18de4:	lsl	r4, r9, #2
   18de8:	add	r7, r1, #16
   18dec:	ldr	r6, [r1, r4]!
   18df0:	add	r5, r0, #16
   18df4:	subs	r3, r3, #4
   18df8:	str	r6, [r0, r4]!
   18dfc:	ldr	r6, [r1, #4]
   18e00:	str	r6, [r0, #4]
   18e04:	ldr	r6, [r1, #8]
   18e08:	str	r6, [r0, #8]
   18e0c:	ldr	r1, [r1, #12]
   18e10:	str	r1, [r0, #12]
   18e14:	mov	r1, r7
   18e18:	mov	r0, r5
   18e1c:	bne	18de8 <__assert_fail@plt+0x79b4>
   18e20:	ldr	r0, [r2, #4]
   18e24:	str	r0, [sl, #4]
   18e28:	cmp	r8, #0
   18e2c:	mov	r4, #1
   18e30:	movne	r0, #0
   18e34:	strne	r0, [r8, #4]
   18e38:	mov	r0, r4
   18e3c:	sub	sp, fp, #28
   18e40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e44:	movw	r0, #40557	; 0x9e6d
   18e48:	movt	r0, #3
   18e4c:	bl	1d324 <__assert_fail@plt+0xbef0>
   18e50:	movw	r0, #40585	; 0x9e89
   18e54:	movw	r1, #37260	; 0x918c
   18e58:	movw	r3, #40592	; 0x9e90
   18e5c:	movw	r2, #1148	; 0x47c
   18e60:	movt	r0, #3
   18e64:	b	18e9c <__assert_fail@plt+0x7a68>
   18e68:	movw	r0, #37978	; 0x945a
   18e6c:	movw	r1, #37260	; 0x918c
   18e70:	movw	r3, #37904	; 0x9410
   18e74:	movw	r2, #661	; 0x295
   18e78:	movt	r0, #3
   18e7c:	movt	r1, #3
   18e80:	movt	r3, #3
   18e84:	bl	11434 <__assert_fail@plt>
   18e88:	movw	r0, #38241	; 0x9561
   18e8c:	movw	r1, #37260	; 0x918c
   18e90:	movw	r3, #40592	; 0x9e90
   18e94:	movw	r2, #1155	; 0x483
   18e98:	movt	r0, #3
   18e9c:	movt	r1, #3
   18ea0:	movt	r3, #3
   18ea4:	bl	11434 <__assert_fail@plt>
   18ea8:	push	{fp, lr}
   18eac:	mov	fp, sp
   18eb0:	sub	sp, sp, #8
   18eb4:	mov	ip, #0
   18eb8:	str	ip, [sp]
   18ebc:	bl	18468 <__assert_fail@plt+0x7034>
   18ec0:	mov	sp, fp
   18ec4:	pop	{fp, pc}
   18ec8:	push	{fp, lr}
   18ecc:	mov	fp, sp
   18ed0:	sub	sp, sp, #8
   18ed4:	mov	ip, #2
   18ed8:	str	ip, [sp]
   18edc:	bl	18468 <__assert_fail@plt+0x7034>
   18ee0:	mov	sp, fp
   18ee4:	pop	{fp, pc}
   18ee8:	push	{fp, lr}
   18eec:	mov	fp, sp
   18ef0:	sub	sp, sp, #8
   18ef4:	mov	r3, r2
   18ef8:	mov	r2, r1
   18efc:	mov	r1, #1
   18f00:	str	r1, [sp]
   18f04:	mov	r1, #0
   18f08:	bl	18468 <__assert_fail@plt+0x7034>
   18f0c:	mov	sp, fp
   18f10:	pop	{fp, pc}
   18f14:	push	{fp, lr}
   18f18:	mov	fp, sp
   18f1c:	sub	sp, sp, #8
   18f20:	mov	r3, r2
   18f24:	mov	r2, r1
   18f28:	mov	r1, #0
   18f2c:	str	r1, [sp]
   18f30:	mov	r1, #0
   18f34:	bl	18468 <__assert_fail@plt+0x7034>
   18f38:	mov	sp, fp
   18f3c:	pop	{fp, pc}
   18f40:	push	{fp, lr}
   18f44:	mov	fp, sp
   18f48:	sub	sp, sp, #8
   18f4c:	mov	r3, r2
   18f50:	mov	r2, r1
   18f54:	mov	r1, #2
   18f58:	str	r1, [sp]
   18f5c:	mov	r1, #0
   18f60:	bl	18468 <__assert_fail@plt+0x7034>
   18f64:	mov	sp, fp
   18f68:	pop	{fp, pc}
   18f6c:	push	{fp, lr}
   18f70:	mov	fp, sp
   18f74:	sub	sp, sp, #8
   18f78:	mov	r3, r2
   18f7c:	mov	r2, r1
   18f80:	mov	r1, r0
   18f84:	mov	r0, #1
   18f88:	str	r0, [sp]
   18f8c:	mov	r0, #0
   18f90:	bl	18468 <__assert_fail@plt+0x7034>
   18f94:	mov	sp, fp
   18f98:	pop	{fp, pc}
   18f9c:	push	{fp, lr}
   18fa0:	mov	fp, sp
   18fa4:	sub	sp, sp, #8
   18fa8:	mov	r3, r2
   18fac:	mov	r2, r1
   18fb0:	mov	r1, r0
   18fb4:	mov	r0, #0
   18fb8:	str	r0, [sp]
   18fbc:	mov	r0, #0
   18fc0:	bl	18468 <__assert_fail@plt+0x7034>
   18fc4:	mov	sp, fp
   18fc8:	pop	{fp, pc}
   18fcc:	push	{fp, lr}
   18fd0:	mov	fp, sp
   18fd4:	sub	sp, sp, #8
   18fd8:	mov	r3, r2
   18fdc:	mov	r2, r1
   18fe0:	mov	r1, r0
   18fe4:	mov	r0, #2
   18fe8:	str	r0, [sp]
   18fec:	mov	r0, #0
   18ff0:	bl	18468 <__assert_fail@plt+0x7034>
   18ff4:	mov	sp, fp
   18ff8:	pop	{fp, pc}
   18ffc:	push	{fp, lr}
   19000:	mov	fp, sp
   19004:	sub	sp, sp, #8
   19008:	mov	r3, r2
   1900c:	mov	r2, r1
   19010:	mov	r1, r0
   19014:	ldr	r0, [r3, #4]
   19018:	lsr	r0, r0, #31
   1901c:	str	r0, [sp]
   19020:	mov	r0, #0
   19024:	bl	18468 <__assert_fail@plt+0x7034>
   19028:	mov	sp, fp
   1902c:	pop	{fp, pc}
   19030:	mov	r3, #1
   19034:	b	19038 <__assert_fail@plt+0x7c04>
   19038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1903c:	add	fp, sp, #28
   19040:	sub	sp, sp, #44	; 0x2c
   19044:	ldr	r9, [r1, #4]
   19048:	mov	lr, r0
   1904c:	cmp	r9, #0
   19050:	beq	1910c <__assert_fail@plt+0x7cd8>
   19054:	mov	r6, r9
   19058:	rsbmi	r6, r9, #0
   1905c:	cmp	r9, #0
   19060:	mov	r5, r1
   19064:	mov	r1, #0
   19068:	mov	r0, #0
   1906c:	and	r8, r2, #31
   19070:	lsr	r4, r2, #5
   19074:	mov	ip, #0
   19078:	movwgt	r1, #1
   1907c:	sub	sl, r6, r2, lsr #5
   19080:	cmp	r1, r3
   19084:	bne	190b8 <__assert_fail@plt+0x7c84>
   19088:	cmp	sl, #0
   1908c:	ble	19124 <__assert_fail@plt+0x7cf0>
   19090:	ldr	r1, [r5, #8]
   19094:	mov	r3, r4
   19098:	sub	r2, r1, #4
   1909c:	cmp	r3, #1
   190a0:	blt	19134 <__assert_fail@plt+0x7d00>
   190a4:	ldr	r7, [r2, r3, lsl #2]
   190a8:	sub	r3, r3, #1
   190ac:	cmp	r7, #0
   190b0:	beq	1909c <__assert_fail@plt+0x7c68>
   190b4:	mov	ip, #1
   190b8:	cmp	sl, #1
   190bc:	blt	193dc <__assert_fail@plt+0x7fa8>
   190c0:	ldr	r1, [lr]
   190c4:	str	ip, [sp, #28]
   190c8:	cmp	sl, r1
   190cc:	ble	1911c <__assert_fail@plt+0x7ce8>
   190d0:	cmp	sl, #1
   190d4:	mov	r7, sl
   190d8:	str	r6, [sp, #24]
   190dc:	movle	r7, #1
   190e0:	cmp	r1, #0
   190e4:	beq	19154 <__assert_fail@plt+0x7d20>
   190e8:	movw	r0, #45352	; 0xb128
   190ec:	lsl	r1, r1, #2
   190f0:	lsl	r2, r7, #2
   190f4:	mov	r6, lr
   190f8:	movt	r0, #4
   190fc:	ldr	r3, [r0]
   19100:	ldr	r0, [lr, #8]
   19104:	blx	r3
   19108:	b	1916c <__assert_fail@plt+0x7d38>
   1910c:	mov	r0, #0
   19110:	str	r0, [lr, #4]
   19114:	sub	sp, fp, #28
   19118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1911c:	ldr	r0, [lr, #8]
   19120:	b	19194 <__assert_fail@plt+0x7d60>
   19124:	mov	r0, #0
   19128:	mov	r7, lr
   1912c:	str	r0, [r7, #4]!
   19130:	b	193ec <__assert_fail@plt+0x7fb8>
   19134:	ldr	r1, [r1, r4, lsl #2]
   19138:	mvn	r2, #0
   1913c:	bic	ip, r1, r2, lsl r8
   19140:	cmp	ip, #0
   19144:	movwne	ip, #1
   19148:	cmp	sl, #1
   1914c:	bge	190c0 <__assert_fail@plt+0x7c8c>
   19150:	b	193dc <__assert_fail@plt+0x7fa8>
   19154:	movw	r0, #45348	; 0xb124
   19158:	mov	r6, lr
   1915c:	movt	r0, #4
   19160:	ldr	r1, [r0]
   19164:	lsl	r0, r7, #2
   19168:	blx	r1
   1916c:	str	r0, [r6, #8]
   19170:	str	r7, [r6]
   19174:	mov	lr, r6
   19178:	ldr	r1, [r6, #4]
   1917c:	ldr	r6, [sp, #24]
   19180:	cmp	r1, #0
   19184:	rsbmi	r1, r1, #0
   19188:	cmp	r1, r7
   1918c:	movgt	r1, #0
   19190:	strgt	r1, [lr, #4]
   19194:	ldr	r5, [r5, #8]
   19198:	cmp	r8, #0
   1919c:	add	r1, r5, r4, lsl #2
   191a0:	beq	191e0 <__assert_fail@plt+0x7dac>
   191a4:	ldr	r2, [r1]
   191a8:	subs	ip, sl, #1
   191ac:	lsr	r3, r2, r8
   191b0:	beq	1935c <__assert_fail@plt+0x7f28>
   191b4:	mvn	r2, r4
   191b8:	str	lr, [sp, #20]
   191bc:	rsb	r5, r8, #32
   191c0:	sub	lr, r6, #2
   191c4:	str	r4, [sp, #16]
   191c8:	add	r2, r6, r2
   191cc:	tst	r2, #1
   191d0:	bne	19364 <__assert_fail@plt+0x7f30>
   191d4:	mov	r7, ip
   191d8:	mov	r2, r0
   191dc:	b	1937c <__assert_fail@plt+0x7f48>
   191e0:	sub	r7, r6, r4
   191e4:	mov	r2, #0
   191e8:	cmp	r7, #3
   191ec:	bls	192e0 <__assert_fail@plt+0x7eac>
   191f0:	add	r3, r5, r6, lsl #2
   191f4:	cmp	r0, r3
   191f8:	addcc	r3, r0, r7, lsl #2
   191fc:	cmpcc	r1, r3
   19200:	bcc	192e0 <__assert_fail@plt+0x7eac>
   19204:	bic	r2, r7, #3
   19208:	stm	sp, {r5, r7, r9, sl}
   1920c:	mov	r3, #1
   19210:	str	r6, [sp, #24]
   19214:	mov	r7, #0
   19218:	str	r4, [sp, #16]
   1921c:	str	lr, [sp, #20]
   19220:	sub	r5, r2, #4
   19224:	add	r3, r3, r5, lsr #2
   19228:	cmp	r5, #12
   1922c:	and	r6, r3, #3
   19230:	bcc	19294 <__assert_fail@plt+0x7e60>
   19234:	sub	r3, r6, r3
   19238:	mov	r5, #0
   1923c:	mov	r7, #0
   19240:	add	lr, r1, r5
   19244:	mov	r4, #48	; 0x30
   19248:	add	sl, r0, r5
   1924c:	adds	r3, r3, #4
   19250:	add	r5, r5, #64	; 0x40
   19254:	add	r7, r7, #16
   19258:	mov	ip, lr
   1925c:	mov	r9, sl
   19260:	add	r8, lr, #16
   19264:	vld1.32	{d16-d17}, [ip], r4
   19268:	vst1.32	{d16-d17}, [r9], r4
   1926c:	add	r4, sl, #16
   19270:	vld1.32	{d16-d17}, [r8]
   19274:	vst1.32	{d16-d17}, [r4]
   19278:	add	r4, lr, #32
   1927c:	vld1.32	{d16-d17}, [r4]
   19280:	add	r4, sl, #32
   19284:	vst1.32	{d16-d17}, [r4]
   19288:	vld1.32	{d16-d17}, [ip]
   1928c:	vst1.32	{d16-d17}, [r9]
   19290:	bne	19240 <__assert_fail@plt+0x7e0c>
   19294:	ldr	r4, [sp, #16]
   19298:	cmp	r6, #0
   1929c:	beq	192c4 <__assert_fail@plt+0x7e90>
   192a0:	ldr	r5, [sp]
   192a4:	add	r3, r0, r7, lsl #2
   192a8:	add	r7, r7, r4
   192ac:	add	r7, r5, r7, lsl #2
   192b0:	rsb	r5, r6, #0
   192b4:	vld1.32	{d16-d17}, [r7]!
   192b8:	adds	r5, r5, #1
   192bc:	vst1.32	{d16-d17}, [r3]!
   192c0:	bcc	192b4 <__assert_fail@plt+0x7e80>
   192c4:	ldr	r7, [sp, #4]
   192c8:	ldr	r9, [sp, #8]
   192cc:	ldr	lr, [sp, #20]
   192d0:	ldr	sl, [sp, #12]
   192d4:	ldr	r6, [sp, #24]
   192d8:	cmp	r7, r2
   192dc:	beq	193d4 <__assert_fail@plt+0x7fa0>
   192e0:	mvn	r3, r2
   192e4:	ands	r7, r7, #3
   192e8:	add	r3, r6, r3
   192ec:	sub	r3, r3, r4
   192f0:	beq	19308 <__assert_fail@plt+0x7ed4>
   192f4:	ldr	r5, [r1, r2, lsl #2]
   192f8:	subs	r7, r7, #1
   192fc:	str	r5, [r0, r2, lsl #2]
   19300:	add	r2, r2, #1
   19304:	bne	192f4 <__assert_fail@plt+0x7ec0>
   19308:	cmp	r3, #3
   1930c:	bcc	193d4 <__assert_fail@plt+0x7fa0>
   19310:	ldr	ip, [sp, #28]
   19314:	add	r3, r2, r4
   19318:	lsl	r2, r2, #2
   1931c:	sub	r3, r3, r6
   19320:	add	r7, r1, #16
   19324:	ldr	r6, [r1, r2]!
   19328:	add	r5, r0, #16
   1932c:	adds	r3, r3, #4
   19330:	str	r6, [r0, r2]!
   19334:	ldr	r6, [r1, #4]
   19338:	str	r6, [r0, #4]
   1933c:	ldr	r6, [r1, #8]
   19340:	str	r6, [r0, #8]
   19344:	ldr	r1, [r1, #12]
   19348:	str	r1, [r0, #12]
   1934c:	mov	r1, r7
   19350:	mov	r0, r5
   19354:	bne	19320 <__assert_fail@plt+0x7eec>
   19358:	b	193d8 <__assert_fail@plt+0x7fa4>
   1935c:	mov	r2, r0
   19360:	b	193c4 <__assert_fail@plt+0x7f90>
   19364:	ldr	r4, [r1, #4]!
   19368:	mov	r2, r0
   1936c:	sub	r7, sl, #2
   19370:	orr	r3, r3, r4, lsl r5
   19374:	str	r3, [r2], #4
   19378:	lsr	r3, r4, r8
   1937c:	ldr	r4, [sp, #16]
   19380:	cmp	lr, r4
   19384:	ldr	lr, [sp, #20]
   19388:	beq	193c4 <__assert_fail@plt+0x7f90>
   1938c:	add	r1, r1, #4
   19390:	ldr	r4, [r1]
   19394:	subs	r7, r7, #2
   19398:	orr	r3, r3, r4, lsl r5
   1939c:	str	r3, [r2]
   193a0:	ldr	r3, [r1, #4]
   193a4:	add	r1, r1, #8
   193a8:	lsl	r6, r3, r5
   193ac:	lsr	r3, r3, r8
   193b0:	orr	r6, r6, r4, lsr r8
   193b4:	str	r6, [r2, #4]
   193b8:	add	r2, r2, #8
   193bc:	bne	19390 <__assert_fail@plt+0x7f5c>
   193c0:	ldr	lr, [sp, #20]
   193c4:	str	r3, [r2]
   193c8:	ldr	r0, [r0, ip, lsl #2]
   193cc:	cmp	r0, #0
   193d0:	moveq	sl, ip
   193d4:	ldr	ip, [sp, #28]
   193d8:	mov	r0, sl
   193dc:	mov	r7, lr
   193e0:	cmp	ip, #0
   193e4:	str	r0, [r7, #4]!
   193e8:	beq	19444 <__assert_fail@plt+0x8010>
   193ec:	movw	r0, #45348	; 0xb124
   193f0:	mov	r4, #1
   193f4:	mov	r6, lr
   193f8:	movt	r0, #4
   193fc:	str	r4, [sp, #36]	; 0x24
   19400:	ldr	r1, [r0]
   19404:	mov	r0, #4
   19408:	blx	r1
   1940c:	str	r0, [sp, #40]	; 0x28
   19410:	str	r4, [sp, #32]
   19414:	mov	r5, r0
   19418:	str	r4, [r0]
   1941c:	add	r2, sp, #32
   19420:	mov	r0, r6
   19424:	mov	r1, r6
   19428:	bl	1707c <__assert_fail@plt+0x5c48>
   1942c:	movw	r0, #45356	; 0xb12c
   19430:	mov	r1, #4
   19434:	movt	r0, #4
   19438:	ldr	r2, [r0]
   1943c:	mov	r0, r5
   19440:	blx	r2
   19444:	cmn	r9, #1
   19448:	ble	19454 <__assert_fail@plt+0x8020>
   1944c:	sub	sp, fp, #28
   19450:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19454:	ldr	r0, [r7]
   19458:	rsb	r0, r0, #0
   1945c:	str	r0, [r7]
   19460:	sub	sp, fp, #28
   19464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19468:	mov	r3, #0
   1946c:	b	19038 <__assert_fail@plt+0x7c04>
   19470:	mov	r3, #2
   19474:	b	19038 <__assert_fail@plt+0x7c04>
   19478:	mov	r3, #1
   1947c:	b	19480 <__assert_fail@plt+0x804c>
   19480:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19484:	add	fp, sp, #28
   19488:	sub	sp, sp, #28
   1948c:	cmp	r2, #0
   19490:	mov	r5, r0
   19494:	mov	r0, #0
   19498:	ldrne	lr, [r1, #4]
   1949c:	movne	r7, r1
   194a0:	cmpne	lr, #0
   194a4:	beq	19c28 <__assert_fail@plt+0x87f4>
   194a8:	add	r8, r2, #31
   194ac:	mov	r0, #0
   194b0:	mov	r6, r2
   194b4:	cmp	r0, r8, lsr #5
   194b8:	beq	19c4c <__assert_fail@plt+0x8818>
   194bc:	ldr	r1, [r5]
   194c0:	lsr	r4, r8, #5
   194c4:	cmp	r4, r1
   194c8:	ble	19508 <__assert_fail@plt+0x80d4>
   194cc:	cmp	r4, #1
   194d0:	mov	r9, r4
   194d4:	str	r3, [sp, #24]
   194d8:	str	lr, [sp, #20]
   194dc:	movls	r9, #1
   194e0:	cmp	r1, #0
   194e4:	beq	19510 <__assert_fail@plt+0x80dc>
   194e8:	movw	r0, #45352	; 0xb128
   194ec:	lsl	r1, r1, #2
   194f0:	lsl	r2, r9, #2
   194f4:	movt	r0, #4
   194f8:	ldr	r3, [r0]
   194fc:	ldr	r0, [r5, #8]
   19500:	blx	r3
   19504:	b	19524 <__assert_fail@plt+0x80f0>
   19508:	ldr	sl, [r5, #8]
   1950c:	b	19550 <__assert_fail@plt+0x811c>
   19510:	movw	r0, #45348	; 0xb124
   19514:	movt	r0, #4
   19518:	ldr	r1, [r0]
   1951c:	lsl	r0, r9, #2
   19520:	blx	r1
   19524:	str	r0, [r5, #8]
   19528:	str	r9, [r5]
   1952c:	mov	sl, r0
   19530:	ldr	r0, [r5, #4]
   19534:	ldr	lr, [sp, #20]
   19538:	ldr	r3, [sp, #24]
   1953c:	cmp	r0, #0
   19540:	rsbmi	r0, r0, #0
   19544:	cmp	r0, r9
   19548:	movgt	r0, #0
   1954c:	strgt	r0, [r5, #4]
   19550:	bic	r0, r8, #31
   19554:	cmp	lr, #0
   19558:	mov	r9, lr
   1955c:	mvn	r2, #0
   19560:	rsb	r8, lr, #0
   19564:	rsbmi	r9, lr, #0
   19568:	sub	r0, r0, r6
   1956c:	lsr	ip, r2, r0
   19570:	cmp	r4, r9
   19574:	ble	195a8 <__assert_fail@plt+0x8174>
   19578:	cmp	lr, #0
   1957c:	mov	r0, #0
   19580:	movwgt	r0, #1
   19584:	cmp	r0, r3
   19588:	bne	1975c <__assert_fail@plt+0x8328>
   1958c:	ldr	r0, [r7, #8]
   19590:	ldr	r2, [r0]
   19594:	cmp	r2, #0
   19598:	beq	19920 <__assert_fail@plt+0x84ec>
   1959c:	mov	lr, sl
   195a0:	mov	r3, r9
   195a4:	b	19960 <__assert_fail@plt+0x852c>
   195a8:	ldr	r9, [r7, #8]
   195ac:	sub	r6, r4, #1
   195b0:	cmp	r5, r7
   195b4:	beq	19894 <__assert_fail@plt+0x8460>
   195b8:	cmp	r6, #1
   195bc:	blt	19890 <__assert_fail@plt+0x845c>
   195c0:	mov	r2, #0
   195c4:	cmp	r6, #4
   195c8:	str	r3, [sp, #24]
   195cc:	bcc	196b8 <__assert_fail@plt+0x8284>
   195d0:	add	r0, r9, r6, lsl #2
   195d4:	cmp	sl, r0
   195d8:	addcc	r0, sl, r6, lsl #2
   195dc:	cmpcc	r9, r0
   195e0:	bcc	196b8 <__assert_fail@plt+0x8284>
   195e4:	add	r0, sp, #12
   195e8:	bic	r2, r6, #3
   195ec:	stmib	sp, {r8, ip}
   195f0:	stm	r0, {r5, r6, lr}
   195f4:	sub	r3, r2, #4
   195f8:	mov	r0, #1
   195fc:	mov	lr, #0
   19600:	add	r0, r0, r3, lsr #2
   19604:	cmp	r3, #12
   19608:	and	r1, r0, #3
   1960c:	str	r1, [sp]
   19610:	bcc	19678 <__assert_fail@plt+0x8244>
   19614:	ldr	r1, [sp]
   19618:	mov	r6, #0
   1961c:	mov	lr, #0
   19620:	sub	r3, r1, r0
   19624:	add	r5, r9, r6
   19628:	mov	r7, #48	; 0x30
   1962c:	add	r1, sl, r6
   19630:	adds	r3, r3, #4
   19634:	add	r6, r6, #64	; 0x40
   19638:	add	lr, lr, #16
   1963c:	mov	r0, r5
   19640:	mov	ip, r1
   19644:	add	r8, r5, #16
   19648:	add	r5, r5, #32
   1964c:	vld1.32	{d16-d17}, [r0], r7
   19650:	vst1.32	{d16-d17}, [ip], r7
   19654:	add	r7, r1, #16
   19658:	add	r1, r1, #32
   1965c:	vld1.32	{d16-d17}, [r8]
   19660:	vst1.32	{d16-d17}, [r7]
   19664:	vld1.32	{d16-d17}, [r5]
   19668:	vst1.32	{d16-d17}, [r1]
   1966c:	vld1.32	{d16-d17}, [r0]
   19670:	vst1.32	{d16-d17}, [ip]
   19674:	bne	19624 <__assert_fail@plt+0x81f0>
   19678:	ldr	r1, [sp]
   1967c:	cmp	r1, #0
   19680:	beq	196a0 <__assert_fail@plt+0x826c>
   19684:	add	r0, r9, lr, lsl #2
   19688:	add	r3, sl, lr, lsl #2
   1968c:	rsb	r7, r1, #0
   19690:	vld1.32	{d16-d17}, [r0]!
   19694:	adds	r7, r7, #1
   19698:	vst1.32	{d16-d17}, [r3]!
   1969c:	bcc	19690 <__assert_fail@plt+0x825c>
   196a0:	ldr	r6, [sp, #16]
   196a4:	ldr	r5, [sp, #12]
   196a8:	ldr	lr, [sp, #20]
   196ac:	ldmib	sp, {r8, ip}
   196b0:	cmp	r6, r2
   196b4:	beq	19754 <__assert_fail@plt+0x8320>
   196b8:	sub	r0, r4, r2
   196bc:	sub	r1, r4, #1
   196c0:	sub	r0, r0, #2
   196c4:	ands	r3, r1, #3
   196c8:	beq	196e0 <__assert_fail@plt+0x82ac>
   196cc:	ldr	r1, [r9, r2, lsl #2]
   196d0:	subs	r3, r3, #1
   196d4:	str	r1, [sl, r2, lsl #2]
   196d8:	add	r2, r2, #1
   196dc:	bne	196cc <__assert_fail@plt+0x8298>
   196e0:	cmp	r0, #3
   196e4:	bcc	19754 <__assert_fail@plt+0x8320>
   196e8:	mvn	r0, r2
   196ec:	str	lr, [sp, #20]
   196f0:	mov	lr, ip
   196f4:	mov	ip, r5
   196f8:	lsl	r2, r2, #2
   196fc:	mov	r3, r9
   19700:	mov	r7, sl
   19704:	str	r6, [sp, #16]
   19708:	add	r0, r0, r4
   1970c:	add	r1, r3, #16
   19710:	ldr	r6, [r3, r2]!
   19714:	add	r5, r7, #16
   19718:	subs	r0, r0, #4
   1971c:	str	r6, [r7, r2]!
   19720:	ldr	r6, [r3, #4]
   19724:	str	r6, [r7, #4]
   19728:	ldr	r6, [r3, #8]
   1972c:	str	r6, [r7, #8]
   19730:	ldr	r3, [r3, #12]
   19734:	str	r3, [r7, #12]
   19738:	mov	r3, r1
   1973c:	mov	r7, r5
   19740:	bne	1970c <__assert_fail@plt+0x82d8>
   19744:	mov	r5, ip
   19748:	mov	ip, lr
   1974c:	ldr	lr, [sp, #20]
   19750:	ldr	r6, [sp, #16]
   19754:	ldr	r3, [sp, #24]
   19758:	b	19894 <__assert_fail@plt+0x8460>
   1975c:	cmp	r5, r7
   19760:	beq	19884 <__assert_fail@plt+0x8450>
   19764:	cmp	r9, #1
   19768:	blt	19a78 <__assert_fail@plt+0x8644>
   1976c:	ldr	r2, [r7, #8]
   19770:	mov	r0, #0
   19774:	cmp	r9, #4
   19778:	bcc	19858 <__assert_fail@plt+0x8424>
   1977c:	add	r3, r2, r9, lsl #2
   19780:	cmp	sl, r3
   19784:	addcc	r3, sl, r9, lsl #2
   19788:	cmpcc	r2, r3
   1978c:	bcc	19858 <__assert_fail@plt+0x8424>
   19790:	bic	r0, r9, #-2147483645	; 0x80000003
   19794:	mov	r3, #1
   19798:	mov	r8, #0
   1979c:	str	lr, [sp, #20]
   197a0:	str	r5, [sp, #12]
   197a4:	sub	r6, r0, #4
   197a8:	add	r3, r3, r6, lsr #2
   197ac:	cmp	r6, #12
   197b0:	and	r1, r3, #3
   197b4:	str	r1, [sp, #24]
   197b8:	bcc	19820 <__assert_fail@plt+0x83ec>
   197bc:	ldr	r1, [sp, #24]
   197c0:	mov	r4, #0
   197c4:	mov	r8, #0
   197c8:	sub	lr, r3, r1
   197cc:	add	r5, r2, r4
   197d0:	mov	r6, #48	; 0x30
   197d4:	add	r1, sl, r4
   197d8:	add	r4, r4, #64	; 0x40
   197dc:	subs	lr, lr, #4
   197e0:	add	r8, r8, #16
   197e4:	mov	r3, r5
   197e8:	mov	r7, r1
   197ec:	add	ip, r5, #16
   197f0:	vld1.32	{d16-d17}, [r3], r6
   197f4:	vst1.32	{d16-d17}, [r7], r6
   197f8:	add	r6, r1, #16
   197fc:	add	r1, r1, #32
   19800:	vld1.32	{d16-d17}, [ip]
   19804:	vst1.32	{d16-d17}, [r6]
   19808:	add	r6, r5, #32
   1980c:	vld1.32	{d16-d17}, [r6]
   19810:	vst1.32	{d16-d17}, [r1]
   19814:	vld1.32	{d16-d17}, [r3]
   19818:	vst1.32	{d16-d17}, [r7]
   1981c:	bne	197cc <__assert_fail@plt+0x8398>
   19820:	ldr	r1, [sp, #24]
   19824:	cmp	r1, #0
   19828:	beq	19848 <__assert_fail@plt+0x8414>
   1982c:	add	r3, r2, r8, lsl #2
   19830:	add	r7, sl, r8, lsl #2
   19834:	rsb	r6, r1, #0
   19838:	vld1.32	{d16-d17}, [r3]!
   1983c:	adds	r6, r6, #1
   19840:	vst1.32	{d16-d17}, [r7]!
   19844:	bcc	19838 <__assert_fail@plt+0x8404>
   19848:	ldr	r5, [sp, #12]
   1984c:	ldr	lr, [sp, #20]
   19850:	cmp	r9, r0
   19854:	beq	19884 <__assert_fail@plt+0x8450>
   19858:	mvn	r1, r0
   1985c:	ands	r7, r9, #3
   19860:	add	r3, r9, r1
   19864:	beq	1987c <__assert_fail@plt+0x8448>
   19868:	ldr	r1, [r2, r0, lsl #2]
   1986c:	subs	r7, r7, #1
   19870:	str	r1, [sl, r0, lsl #2]
   19874:	add	r0, r0, #1
   19878:	bne	19868 <__assert_fail@plt+0x8434>
   1987c:	cmp	r3, #3
   19880:	bcs	19a84 <__assert_fail@plt+0x8650>
   19884:	mov	r4, r9
   19888:	mov	r8, lr
   1988c:	b	19c00 <__assert_fail@plt+0x87cc>
   19890:	mov	r6, #0
   19894:	ldr	r0, [r9, r6, lsl #2]
   19898:	cmp	lr, #0
   1989c:	and	r0, r0, ip
   198a0:	str	r0, [sl, r6, lsl #2]
   198a4:	mov	r0, #0
   198a8:	movwgt	r0, #1
   198ac:	cmp	r0, r3
   198b0:	bne	19918 <__assert_fail@plt+0x84e4>
   198b4:	ldr	r2, [sl]
   198b8:	mov	r1, sl
   198bc:	mov	r3, r4
   198c0:	cmp	r2, #0
   198c4:	bne	198ec <__assert_fail@plt+0x84b8>
   198c8:	mov	r0, #0
   198cc:	mov	r3, r4
   198d0:	mov	r1, sl
   198d4:	subs	r3, r3, #1
   198d8:	str	r0, [r1]
   198dc:	beq	19b40 <__assert_fail@plt+0x870c>
   198e0:	ldr	r2, [r1, #4]!
   198e4:	cmp	r2, #0
   198e8:	beq	198d4 <__assert_fail@plt+0x84a0>
   198ec:	rsb	r0, r2, #0
   198f0:	sub	r2, r3, #1
   198f4:	cmp	r2, #1
   198f8:	str	r0, [r1]
   198fc:	blt	19b40 <__assert_fail@plt+0x870c>
   19900:	mov	r9, r8
   19904:	sub	r8, r3, #1
   19908:	cmp	r8, #4
   1990c:	bcs	19a10 <__assert_fail@plt+0x85dc>
   19910:	mov	r8, r9
   19914:	b	19b20 <__assert_fail@plt+0x86ec>
   19918:	mov	r8, lr
   1991c:	b	19c00 <__assert_fail@plt+0x87cc>
   19920:	mov	r6, #0
   19924:	mov	r3, #0
   19928:	mov	r7, #0
   1992c:	add	r2, r9, r7
   19930:	str	r6, [sl, -r7, lsl #2]
   19934:	cmp	r2, #1
   19938:	beq	19c34 <__assert_fail@plt+0x8800>
   1993c:	sub	r2, r0, r7, lsl #2
   19940:	sub	r3, r3, #4
   19944:	sub	r7, r7, #1
   19948:	ldr	r2, [r2, #4]
   1994c:	cmp	r2, #0
   19950:	beq	1992c <__assert_fail@plt+0x84f8>
   19954:	sub	lr, sl, r3
   19958:	sub	r0, r0, r3
   1995c:	add	r3, r9, r7
   19960:	rsb	r2, r2, #0
   19964:	str	r2, [lr]
   19968:	sub	r2, r3, #1
   1996c:	cmp	r2, #1
   19970:	blt	19bcc <__assert_fail@plt+0x8798>
   19974:	sub	r1, r3, #1
   19978:	cmp	r1, #4
   1997c:	bcc	19bac <__assert_fail@plt+0x8778>
   19980:	add	r7, r0, r3, lsl #2
   19984:	add	r6, lr, #4
   19988:	cmp	r6, r7
   1998c:	addcc	r3, lr, r3, lsl #2
   19990:	addcc	r7, r0, #4
   19994:	cmpcc	r7, r3
   19998:	bcc	19bac <__assert_fail@plt+0x8778>
   1999c:	str	r1, [sp, #24]
   199a0:	bic	r1, r1, #3
   199a4:	mov	r7, #1
   199a8:	stmib	sp, {r8, ip}
   199ac:	str	r5, [sp, #12]
   199b0:	subs	r3, r1, #4
   199b4:	str	r1, [sp, #20]
   199b8:	add	r3, r7, r3, lsr #2
   199bc:	and	r1, r3, #1
   199c0:	str	r1, [sp, #16]
   199c4:	beq	19b50 <__assert_fail@plt+0x871c>
   199c8:	sub	r6, r1, r3
   199cc:	mov	r1, lr
   199d0:	add	r3, r0, #20
   199d4:	add	lr, lr, #20
   199d8:	mov	r7, #0
   199dc:	mov	ip, #32
   199e0:	sub	r8, r3, #16
   199e4:	sub	r5, lr, #16
   199e8:	adds	r6, r6, #2
   199ec:	add	r7, r7, #8
   199f0:	vld1.32	{d16-d17}, [r8]
   199f4:	vmvn	q8, q8
   199f8:	vst1.32	{d16-d17}, [r5]
   199fc:	vld1.32	{d16-d17}, [r3], ip
   19a00:	vmvn	q8, q8
   19a04:	vst1.32	{d16-d17}, [lr], ip
   19a08:	bne	199e0 <__assert_fail@plt+0x85ac>
   19a0c:	b	19b58 <__assert_fail@plt+0x8724>
   19a10:	bic	lr, r8, #3
   19a14:	mov	r3, #1
   19a18:	str	r6, [sp, #16]
   19a1c:	str	ip, [sp, #8]
   19a20:	str	r5, [sp, #12]
   19a24:	subs	r0, lr, #4
   19a28:	add	r0, r3, r0, lsr #2
   19a2c:	and	r3, r0, #1
   19a30:	str	r3, [sp, #24]
   19a34:	beq	19adc <__assert_fail@plt+0x86a8>
   19a38:	sub	r0, r3, r0
   19a3c:	add	r5, r1, #20
   19a40:	mov	r7, #0
   19a44:	mvn	r3, #15
   19a48:	mov	ip, #32
   19a4c:	mov	r6, r5
   19a50:	adds	r0, r0, #2
   19a54:	add	r7, r7, #8
   19a58:	vld1.32	{d16-d17}, [r6], r3
   19a5c:	vld1.32	{d18-d19}, [r6]
   19a60:	vmvn	q8, q8
   19a64:	vmvn	q9, q9
   19a68:	vst1.32	{d18-d19}, [r6]
   19a6c:	vst1.32	{d16-d17}, [r5], ip
   19a70:	bne	19a4c <__assert_fail@plt+0x8618>
   19a74:	b	19ae0 <__assert_fail@plt+0x86ac>
   19a78:	mov	r4, #-2147483648	; 0x80000000
   19a7c:	mov	r8, lr
   19a80:	b	19c00 <__assert_fail@plt+0x87cc>
   19a84:	mov	ip, r5
   19a88:	lsl	r3, r0, #2
   19a8c:	mov	r5, sl
   19a90:	add	r1, r2, #16
   19a94:	ldr	r7, [r2, r3]!
   19a98:	add	r6, r5, #16
   19a9c:	add	r0, r0, #4
   19aa0:	cmp	r9, r0
   19aa4:	str	r7, [r5, r3]!
   19aa8:	ldr	r7, [r2, #4]
   19aac:	str	r7, [r5, #4]
   19ab0:	ldr	r7, [r2, #8]
   19ab4:	str	r7, [r5, #8]
   19ab8:	ldr	r2, [r2, #12]
   19abc:	str	r2, [r5, #12]
   19ac0:	mov	r2, r1
   19ac4:	mov	r5, r6
   19ac8:	bne	19a90 <__assert_fail@plt+0x865c>
   19acc:	mov	r4, r9
   19ad0:	mov	r8, lr
   19ad4:	mov	r5, ip
   19ad8:	b	19c00 <__assert_fail@plt+0x87cc>
   19adc:	mov	r7, #0
   19ae0:	ldr	r0, [sp, #24]
   19ae4:	cmp	r0, #0
   19ae8:	beq	19b00 <__assert_fail@plt+0x86cc>
   19aec:	add	r0, r1, r7, lsl #2
   19af0:	add	r0, r0, #4
   19af4:	vld1.32	{d16-d17}, [r0]
   19af8:	vmvn	q8, q8
   19afc:	vst1.32	{d16-d17}, [r0]
   19b00:	ldr	r5, [sp, #12]
   19b04:	ldr	ip, [sp, #8]
   19b08:	ldr	r6, [sp, #16]
   19b0c:	cmp	r8, lr
   19b10:	mov	r8, r9
   19b14:	beq	19b40 <__assert_fail@plt+0x870c>
   19b18:	add	r1, r1, lr, lsl #2
   19b1c:	sub	r2, r2, lr
   19b20:	add	r0, r1, #4
   19b24:	add	r1, r1, #4
   19b28:	ldr	r3, [r1], #4
   19b2c:	sub	r2, r2, #1
   19b30:	cmp	r2, #0
   19b34:	mvn	r3, r3
   19b38:	str	r3, [r0], #4
   19b3c:	bgt	19b28 <__assert_fail@plt+0x86f4>
   19b40:	ldr	r0, [sl, r6, lsl #2]
   19b44:	and	r0, r0, ip
   19b48:	str	r0, [sl, r6, lsl #2]
   19b4c:	b	19c00 <__assert_fail@plt+0x87cc>
   19b50:	mov	r1, lr
   19b54:	mov	r7, #0
   19b58:	ldr	r3, [sp, #16]
   19b5c:	mov	lr, r1
   19b60:	cmp	r3, #0
   19b64:	beq	19b84 <__assert_fail@plt+0x8750>
   19b68:	add	r3, r0, r7, lsl #2
   19b6c:	add	r3, r3, #4
   19b70:	vld1.32	{d16-d17}, [r3]
   19b74:	add	r3, lr, r7, lsl #2
   19b78:	add	r3, r3, #4
   19b7c:	vmvn	q8, q8
   19b80:	vst1.32	{d16-d17}, [r3]
   19b84:	ldr	r1, [sp, #24]
   19b88:	ldr	r3, [sp, #20]
   19b8c:	ldr	r5, [sp, #12]
   19b90:	ldmib	sp, {r8, ip}
   19b94:	cmp	r1, r3
   19b98:	beq	19bcc <__assert_fail@plt+0x8798>
   19b9c:	add	lr, lr, r3, lsl #2
   19ba0:	add	r0, r0, r3, lsl #2
   19ba4:	sub	r2, r2, r3
   19ba8:	mov	r1, r3
   19bac:	add	r3, lr, #4
   19bb0:	add	r0, r0, #4
   19bb4:	ldr	r7, [r0], #4
   19bb8:	sub	r2, r2, #1
   19bbc:	cmp	r2, #0
   19bc0:	mvn	r7, r7
   19bc4:	str	r7, [r3], #4
   19bc8:	bgt	19bb4 <__assert_fail@plt+0x8780>
   19bcc:	mov	r6, r5
   19bd0:	sub	r5, r4, #1
   19bd4:	cmp	r5, r9
   19bd8:	ble	19bf8 <__assert_fail@plt+0x87c4>
   19bdc:	sub	r1, r5, r9
   19be0:	add	r0, sl, r9, lsl #2
   19be4:	mov	r7, ip
   19be8:	lsl	r2, r1, #2
   19bec:	mov	r1, #255	; 0xff
   19bf0:	bl	11368 <memset@plt>
   19bf4:	mov	ip, r7
   19bf8:	str	ip, [sl, r5, lsl #2]
   19bfc:	mov	r5, r6
   19c00:	sub	r1, sl, #4
   19c04:	mov	r0, r4
   19c08:	cmp	r4, #1
   19c0c:	blt	19c20 <__assert_fail@plt+0x87ec>
   19c10:	ldr	r2, [r1, r0, lsl #2]
   19c14:	sub	r4, r0, #1
   19c18:	cmp	r2, #0
   19c1c:	beq	19c04 <__assert_fail@plt+0x87d0>
   19c20:	cmp	r8, #0
   19c24:	rsbmi	r0, r0, #0
   19c28:	str	r0, [r5, #4]
   19c2c:	sub	sp, fp, #28
   19c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c34:	movw	r0, #38241	; 0x9561
   19c38:	movw	r1, #37260	; 0x918c
   19c3c:	movw	r3, #40666	; 0x9eda
   19c40:	movw	r2, #2443	; 0x98b
   19c44:	movt	r0, #3
   19c48:	b	19c60 <__assert_fail@plt+0x882c>
   19c4c:	movw	r0, #39572	; 0x9a94
   19c50:	movw	r1, #37260	; 0x918c
   19c54:	movw	r3, #40666	; 0x9eda
   19c58:	movw	r2, #2427	; 0x97b
   19c5c:	movt	r0, #3
   19c60:	movt	r1, #3
   19c64:	movt	r3, #3
   19c68:	bl	11434 <__assert_fail@plt>
   19c6c:	mov	r3, #0
   19c70:	b	19480 <__assert_fail@plt+0x804c>
   19c74:	mov	r3, #2
   19c78:	b	19480 <__assert_fail@plt+0x804c>
   19c7c:	push	{fp, lr}
   19c80:	mov	fp, sp
   19c84:	sub	sp, sp, #8
   19c88:	mov	r3, r2
   19c8c:	mov	r2, r1
   19c90:	mov	r1, #2
   19c94:	str	r1, [sp]
   19c98:	mov	r1, #0
   19c9c:	bl	18468 <__assert_fail@plt+0x7034>
   19ca0:	cmp	r0, #0
   19ca4:	moveq	sp, fp
   19ca8:	popeq	{fp, pc}
   19cac:	movw	r0, #38241	; 0x9561
   19cb0:	movw	r1, #37260	; 0x918c
   19cb4:	movw	r3, #38251	; 0x956b
   19cb8:	movw	r2, #2521	; 0x9d9
   19cbc:	movt	r0, #3
   19cc0:	movt	r1, #3
   19cc4:	movt	r3, #3
   19cc8:	bl	11434 <__assert_fail@plt>
   19ccc:	push	{fp, lr}
   19cd0:	mov	fp, sp
   19cd4:	sub	sp, sp, #8
   19cd8:	mov	r2, r0
   19cdc:	mov	r0, #2
   19ce0:	mov	r3, r1
   19ce4:	mov	r1, #0
   19ce8:	str	r0, [sp]
   19cec:	mov	r0, #0
   19cf0:	bl	18468 <__assert_fail@plt+0x7034>
   19cf4:	clz	r0, r0
   19cf8:	lsr	r0, r0, #5
   19cfc:	mov	sp, fp
   19d00:	pop	{fp, pc}
   19d04:	push	{r4, r5, fp, lr}
   19d08:	add	fp, sp, #8
   19d0c:	sub	sp, sp, #16
   19d10:	mov	r5, r2
   19d14:	mov	r2, r1
   19d18:	mov	r1, r0
   19d1c:	mov	r3, #0
   19d20:	mov	r4, #0
   19d24:	ldr	r0, [r5, #4]
   19d28:	cmp	r0, #0
   19d2c:	movwgt	r3, #1
   19d30:	cmp	r3, r0, lsr #31
   19d34:	bne	19d84 <__assert_fail@plt+0x8950>
   19d38:	ldr	r0, [r1, #4]
   19d3c:	ldr	r3, [r2, #4]
   19d40:	cmp	r0, r3
   19d44:	bne	19e2c <__assert_fail@plt+0x89f8>
   19d48:	cmp	r0, #0
   19d4c:	bmi	19df0 <__assert_fail@plt+0x89bc>
   19d50:	ldr	r1, [r1, #8]
   19d54:	ldr	r2, [r2, #8]
   19d58:	sub	r1, r1, #4
   19d5c:	sub	r2, r2, #4
   19d60:	cmp	r0, #1
   19d64:	blt	19e28 <__assert_fail@plt+0x89f4>
   19d68:	sub	r3, r0, #1
   19d6c:	ldr	r5, [r2, r0, lsl #2]
   19d70:	ldr	r0, [r1, r0, lsl #2]
   19d74:	cmp	r0, r5
   19d78:	mov	r0, r3
   19d7c:	beq	19d60 <__assert_fail@plt+0x892c>
   19d80:	b	19e2c <__assert_fail@plt+0x89f8>
   19d84:	movw	r0, #37256	; 0x9188
   19d88:	movt	r0, #3
   19d8c:	str	r0, [sp, #12]
   19d90:	str	r4, [sp, #8]
   19d94:	str	r4, [sp, #4]
   19d98:	add	r4, sp, #4
   19d9c:	mov	r0, r4
   19da0:	bl	179e4 <__assert_fail@plt+0x65b0>
   19da4:	mov	r0, #2
   19da8:	mov	r1, #0
   19dac:	mov	r2, r4
   19db0:	mov	r3, r5
   19db4:	str	r0, [sp]
   19db8:	mov	r0, #0
   19dbc:	bl	18468 <__assert_fail@plt+0x7034>
   19dc0:	clz	r0, r0
   19dc4:	lsr	r4, r0, #5
   19dc8:	ldr	r0, [sp, #4]
   19dcc:	cmp	r0, #0
   19dd0:	beq	19e2c <__assert_fail@plt+0x89f8>
   19dd4:	movw	r1, #45356	; 0xb12c
   19dd8:	movt	r1, #4
   19ddc:	ldr	r2, [r1]
   19de0:	lsl	r1, r0, #2
   19de4:	ldr	r0, [sp, #12]
   19de8:	blx	r2
   19dec:	b	19e2c <__assert_fail@plt+0x89f8>
   19df0:	ldr	r1, [r1, #8]
   19df4:	rsb	r3, r0, #0
   19df8:	ldr	r0, [r2, #8]
   19dfc:	sub	r0, r0, #4
   19e00:	sub	r1, r1, #4
   19e04:	cmp	r3, #1
   19e08:	blt	19e28 <__assert_fail@plt+0x89f4>
   19e0c:	sub	r2, r3, #1
   19e10:	ldr	r5, [r1, r3, lsl #2]
   19e14:	ldr	r3, [r0, r3, lsl #2]
   19e18:	cmp	r3, r5
   19e1c:	mov	r3, r2
   19e20:	beq	19e04 <__assert_fail@plt+0x89d0>
   19e24:	b	19e2c <__assert_fail@plt+0x89f8>
   19e28:	mov	r4, #1
   19e2c:	mov	r0, r4
   19e30:	sub	sp, fp, #8
   19e34:	pop	{r4, r5, fp, pc}
   19e38:	push	{fp, lr}
   19e3c:	mov	fp, sp
   19e40:	sub	sp, sp, #8
   19e44:	mov	ip, #1
   19e48:	str	ip, [sp]
   19e4c:	bl	19e58 <__assert_fail@plt+0x8a24>
   19e50:	mov	sp, fp
   19e54:	pop	{fp, pc}
   19e58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e5c:	add	fp, sp, #28
   19e60:	sub	sp, sp, #28
   19e64:	mov	r4, r1
   19e68:	movw	r1, #37256	; 0x9188
   19e6c:	movw	r6, #45356	; 0xb12c
   19e70:	mov	sl, r0
   19e74:	mov	r8, r2
   19e78:	mov	r0, #0
   19e7c:	cmp	r3, #0
   19e80:	movt	r1, #3
   19e84:	movt	r6, #4
   19e88:	str	r1, [sp, #24]
   19e8c:	str	r1, [sp, #12]
   19e90:	ldr	r1, [fp, #8]
   19e94:	str	r0, [sp, #20]
   19e98:	str	r0, [sp, #8]
   19e9c:	str	r0, [sp, #16]
   19ea0:	str	r0, [sp, #4]
   19ea4:	beq	19f08 <__assert_fail@plt+0x8ad4>
   19ea8:	movw	r0, #45348	; 0xb124
   19eac:	mov	r9, #1
   19eb0:	mov	r7, r3
   19eb4:	movt	r0, #4
   19eb8:	str	r9, [sp, #8]
   19ebc:	ldr	r1, [r0]
   19ec0:	mov	r0, #4
   19ec4:	blx	r1
   19ec8:	str	r0, [sp, #12]
   19ecc:	str	r9, [sp, #4]
   19ed0:	mov	r5, r0
   19ed4:	str	r7, [r0]
   19ed8:	ldr	r0, [fp, #8]
   19edc:	add	r1, sp, #16
   19ee0:	add	r3, sp, #4
   19ee4:	mov	r2, r8
   19ee8:	str	r0, [sp]
   19eec:	mov	r0, sl
   19ef0:	bl	18468 <__assert_fail@plt+0x7034>
   19ef4:	ldr	r2, [r6]
   19ef8:	mov	r0, r5
   19efc:	mov	r1, #4
   19f00:	blx	r2
   19f04:	b	19f24 <__assert_fail@plt+0x8af0>
   19f08:	str	r0, [sp, #8]
   19f0c:	str	r1, [sp]
   19f10:	add	r1, sp, #16
   19f14:	add	r3, sp, #4
   19f18:	mov	r0, sl
   19f1c:	mov	r2, r8
   19f20:	bl	18468 <__assert_fail@plt+0x7034>
   19f24:	ldr	r0, [sp, #20]
   19f28:	cmp	r0, #0
   19f2c:	beq	19f90 <__assert_fail@plt+0x8b5c>
   19f30:	ldr	r1, [sp, #24]
   19f34:	ldr	r5, [r1]
   19f38:	cmp	r4, #0
   19f3c:	beq	19f9c <__assert_fail@plt+0x8b68>
   19f40:	ldr	r1, [r4, #4]
   19f44:	str	r0, [r4, #4]
   19f48:	str	r1, [sp, #20]
   19f4c:	ldr	r0, [r4]
   19f50:	ldr	r1, [sp, #16]
   19f54:	str	r1, [r4]
   19f58:	str	r0, [sp, #16]
   19f5c:	ldr	r1, [r4, #8]
   19f60:	ldr	r2, [sp, #24]
   19f64:	str	r2, [r4, #8]
   19f68:	str	r1, [sp, #24]
   19f6c:	cmp	r0, #0
   19f70:	beq	19f84 <__assert_fail@plt+0x8b50>
   19f74:	lsl	r1, r0, #2
   19f78:	ldr	r2, [r6]
   19f7c:	ldr	r0, [sp, #24]
   19f80:	blx	r2
   19f84:	mov	r0, r5
   19f88:	sub	sp, fp, #28
   19f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f90:	mov	r5, #0
   19f94:	cmp	r4, #0
   19f98:	bne	19f40 <__assert_fail@plt+0x8b0c>
   19f9c:	ldr	r0, [sp, #16]
   19fa0:	cmp	r0, #0
   19fa4:	bne	19f74 <__assert_fail@plt+0x8b40>
   19fa8:	b	19f84 <__assert_fail@plt+0x8b50>
   19fac:	push	{fp, lr}
   19fb0:	mov	fp, sp
   19fb4:	sub	sp, sp, #8
   19fb8:	mov	ip, #0
   19fbc:	str	ip, [sp]
   19fc0:	bl	19e58 <__assert_fail@plt+0x8a24>
   19fc4:	mov	sp, fp
   19fc8:	pop	{fp, pc}
   19fcc:	push	{fp, lr}
   19fd0:	mov	fp, sp
   19fd4:	sub	sp, sp, #8
   19fd8:	mov	ip, #2
   19fdc:	str	ip, [sp]
   19fe0:	bl	19e58 <__assert_fail@plt+0x8a24>
   19fe4:	mov	sp, fp
   19fe8:	pop	{fp, pc}
   19fec:	push	{fp, lr}
   19ff0:	mov	fp, sp
   19ff4:	sub	sp, sp, #8
   19ff8:	mov	r3, r2
   19ffc:	mov	r2, r1
   1a000:	mov	r1, #1
   1a004:	str	r1, [sp]
   1a008:	mov	r1, #0
   1a00c:	bl	19e58 <__assert_fail@plt+0x8a24>
   1a010:	mov	sp, fp
   1a014:	pop	{fp, pc}
   1a018:	push	{fp, lr}
   1a01c:	mov	fp, sp
   1a020:	sub	sp, sp, #8
   1a024:	mov	r3, r2
   1a028:	mov	r2, r1
   1a02c:	mov	r1, #0
   1a030:	str	r1, [sp]
   1a034:	mov	r1, #0
   1a038:	bl	19e58 <__assert_fail@plt+0x8a24>
   1a03c:	mov	sp, fp
   1a040:	pop	{fp, pc}
   1a044:	push	{fp, lr}
   1a048:	mov	fp, sp
   1a04c:	sub	sp, sp, #8
   1a050:	mov	r3, r2
   1a054:	mov	r2, r1
   1a058:	mov	r1, #2
   1a05c:	str	r1, [sp]
   1a060:	mov	r1, #0
   1a064:	bl	19e58 <__assert_fail@plt+0x8a24>
   1a068:	mov	sp, fp
   1a06c:	pop	{fp, pc}
   1a070:	push	{fp, lr}
   1a074:	mov	fp, sp
   1a078:	sub	sp, sp, #8
   1a07c:	mov	r3, r2
   1a080:	mov	r2, r1
   1a084:	mov	r1, r0
   1a088:	mov	r0, #1
   1a08c:	str	r0, [sp]
   1a090:	mov	r0, #0
   1a094:	bl	19e58 <__assert_fail@plt+0x8a24>
   1a098:	mov	sp, fp
   1a09c:	pop	{fp, pc}
   1a0a0:	push	{fp, lr}
   1a0a4:	mov	fp, sp
   1a0a8:	sub	sp, sp, #8
   1a0ac:	mov	r3, r2
   1a0b0:	mov	r2, r1
   1a0b4:	mov	r1, r0
   1a0b8:	mov	r0, #0
   1a0bc:	str	r0, [sp]
   1a0c0:	mov	r0, #0
   1a0c4:	bl	19e58 <__assert_fail@plt+0x8a24>
   1a0c8:	mov	sp, fp
   1a0cc:	pop	{fp, pc}
   1a0d0:	push	{fp, lr}
   1a0d4:	mov	fp, sp
   1a0d8:	sub	sp, sp, #8
   1a0dc:	mov	r3, r2
   1a0e0:	mov	r2, r1
   1a0e4:	mov	r1, r0
   1a0e8:	mov	r0, #2
   1a0ec:	str	r0, [sp]
   1a0f0:	mov	r0, #0
   1a0f4:	bl	19e58 <__assert_fail@plt+0x8a24>
   1a0f8:	mov	sp, fp
   1a0fc:	pop	{fp, pc}
   1a100:	push	{fp, lr}
   1a104:	mov	fp, sp
   1a108:	sub	sp, sp, #8
   1a10c:	mov	r2, r0
   1a110:	mov	r0, #1
   1a114:	mov	r3, r1
   1a118:	mov	r1, #0
   1a11c:	str	r0, [sp]
   1a120:	mov	r0, #0
   1a124:	bl	19e58 <__assert_fail@plt+0x8a24>
   1a128:	mov	sp, fp
   1a12c:	pop	{fp, pc}
   1a130:	push	{fp, lr}
   1a134:	mov	fp, sp
   1a138:	sub	sp, sp, #8
   1a13c:	mov	r2, r0
   1a140:	mov	r0, #0
   1a144:	mov	r3, r1
   1a148:	mov	r1, #0
   1a14c:	str	r0, [sp]
   1a150:	mov	r0, #0
   1a154:	bl	19e58 <__assert_fail@plt+0x8a24>
   1a158:	mov	sp, fp
   1a15c:	pop	{fp, pc}
   1a160:	push	{fp, lr}
   1a164:	mov	fp, sp
   1a168:	sub	sp, sp, #8
   1a16c:	mov	r2, r0
   1a170:	mov	r0, #2
   1a174:	mov	r3, r1
   1a178:	mov	r1, #0
   1a17c:	str	r0, [sp]
   1a180:	mov	r0, #0
   1a184:	bl	19e58 <__assert_fail@plt+0x8a24>
   1a188:	mov	sp, fp
   1a18c:	pop	{fp, pc}
   1a190:	push	{fp, lr}
   1a194:	mov	fp, sp
   1a198:	sub	sp, sp, #8
   1a19c:	mov	r3, r2
   1a1a0:	mov	r2, r1
   1a1a4:	mov	r1, r0
   1a1a8:	mov	r0, #0
   1a1ac:	str	r0, [sp]
   1a1b0:	mov	r0, #0
   1a1b4:	bl	19e58 <__assert_fail@plt+0x8a24>
   1a1b8:	mov	sp, fp
   1a1bc:	pop	{fp, pc}
   1a1c0:	push	{fp, lr}
   1a1c4:	mov	fp, sp
   1a1c8:	sub	sp, sp, #8
   1a1cc:	mov	r3, r2
   1a1d0:	mov	r2, r1
   1a1d4:	mov	r1, #2
   1a1d8:	str	r1, [sp]
   1a1dc:	mov	r1, #0
   1a1e0:	bl	19e58 <__assert_fail@plt+0x8a24>
   1a1e4:	cmp	r0, #0
   1a1e8:	moveq	sp, fp
   1a1ec:	popeq	{fp, pc}
   1a1f0:	movw	r0, #38241	; 0x9561
   1a1f4:	movw	r1, #37260	; 0x918c
   1a1f8:	movw	r3, #38329	; 0x95b9
   1a1fc:	movw	r2, #2647	; 0xa57
   1a200:	movt	r0, #3
   1a204:	movt	r1, #3
   1a208:	movt	r3, #3
   1a20c:	bl	11434 <__assert_fail@plt>
   1a210:	push	{fp, lr}
   1a214:	mov	fp, sp
   1a218:	sub	sp, sp, #8
   1a21c:	mov	r2, r0
   1a220:	mov	r0, #2
   1a224:	mov	r3, r1
   1a228:	mov	r1, #0
   1a22c:	str	r0, [sp]
   1a230:	mov	r0, #0
   1a234:	bl	19e58 <__assert_fail@plt+0x8a24>
   1a238:	clz	r0, r0
   1a23c:	lsr	r0, r0, #5
   1a240:	mov	sp, fp
   1a244:	pop	{fp, pc}
   1a248:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a24c:	add	fp, sp, #24
   1a250:	sub	sp, sp, #16
   1a254:	mov	r5, r0
   1a258:	movw	r0, #37256	; 0x9188
   1a25c:	mov	r6, r1
   1a260:	mov	r4, #0
   1a264:	cmp	r2, #0
   1a268:	movt	r0, #3
   1a26c:	str	r0, [sp, #12]
   1a270:	str	r4, [sp, #8]
   1a274:	str	r4, [sp, #4]
   1a278:	beq	1a330 <__assert_fail@plt+0x8efc>
   1a27c:	movw	r0, #45348	; 0xb124
   1a280:	mov	r8, #1
   1a284:	mov	r7, r2
   1a288:	movt	r0, #4
   1a28c:	str	r8, [sp, #8]
   1a290:	ldr	r1, [r0]
   1a294:	mov	r0, #4
   1a298:	blx	r1
   1a29c:	str	r0, [sp, #12]
   1a2a0:	str	r8, [sp, #4]
   1a2a4:	str	r7, [r0]
   1a2a8:	add	r0, sp, #4
   1a2ac:	mov	r1, r6
   1a2b0:	mov	r2, r0
   1a2b4:	bl	1a360 <__assert_fail@plt+0x8f2c>
   1a2b8:	ldr	r0, [sp, #8]
   1a2bc:	cmp	r0, #0
   1a2c0:	beq	1a2cc <__assert_fail@plt+0x8e98>
   1a2c4:	ldr	r0, [sp, #12]
   1a2c8:	ldr	r4, [r0]
   1a2cc:	cmp	r5, #0
   1a2d0:	beq	1a350 <__assert_fail@plt+0x8f1c>
   1a2d4:	ldr	r0, [r5, #4]
   1a2d8:	ldr	r1, [sp, #8]
   1a2dc:	str	r0, [sp, #8]
   1a2e0:	str	r1, [r5, #4]
   1a2e4:	ldr	r0, [r5]
   1a2e8:	ldr	r1, [sp, #4]
   1a2ec:	str	r0, [sp, #4]
   1a2f0:	str	r1, [r5]
   1a2f4:	ldr	r1, [r5, #8]
   1a2f8:	ldr	r2, [sp, #12]
   1a2fc:	str	r1, [sp, #12]
   1a300:	str	r2, [r5, #8]
   1a304:	cmp	r0, #0
   1a308:	beq	1a324 <__assert_fail@plt+0x8ef0>
   1a30c:	movw	r1, #45356	; 0xb12c
   1a310:	movt	r1, #4
   1a314:	ldr	r2, [r1]
   1a318:	lsl	r1, r0, #2
   1a31c:	ldr	r0, [sp, #12]
   1a320:	blx	r2
   1a324:	mov	r0, r4
   1a328:	sub	sp, fp, #24
   1a32c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a330:	add	r0, sp, #4
   1a334:	mov	r4, #0
   1a338:	mov	r1, r6
   1a33c:	mov	r2, r0
   1a340:	str	r4, [sp, #8]
   1a344:	bl	1a360 <__assert_fail@plt+0x8f2c>
   1a348:	cmp	r5, #0
   1a34c:	bne	1a2d4 <__assert_fail@plt+0x8ea0>
   1a350:	ldr	r0, [sp, #4]
   1a354:	cmp	r0, #0
   1a358:	bne	1a30c <__assert_fail@plt+0x8ed8>
   1a35c:	b	1a324 <__assert_fail@plt+0x8ef0>
   1a360:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a364:	add	fp, sp, #28
   1a368:	sub	sp, sp, #52	; 0x34
   1a36c:	ldr	r8, [r1, #4]
   1a370:	mov	r9, r2
   1a374:	mov	r6, r0
   1a378:	cmp	r8, #0
   1a37c:	beq	1a668 <__assert_fail@plt+0x9234>
   1a380:	ldr	r0, [r9, #4]
   1a384:	mov	sl, r1
   1a388:	cmp	r0, #0
   1a38c:	beq	1a6bc <__assert_fail@plt+0x9288>
   1a390:	movw	r0, #37256	; 0x9188
   1a394:	add	r2, sp, #40	; 0x28
   1a398:	mov	r1, #0
   1a39c:	movt	r0, #3
   1a3a0:	cmp	r2, sl
   1a3a4:	str	r0, [sp, #48]	; 0x30
   1a3a8:	str	r1, [sp, #44]	; 0x2c
   1a3ac:	str	r0, [sp, #36]	; 0x24
   1a3b0:	str	r1, [sp, #32]
   1a3b4:	str	r1, [sp, #40]	; 0x28
   1a3b8:	str	r1, [sp, #28]
   1a3bc:	beq	1b144 <__assert_fail@plt+0x9d10>
   1a3c0:	cmp	r8, #0
   1a3c4:	mov	r4, r8
   1a3c8:	str	r6, [sp, #24]
   1a3cc:	rsbmi	r4, r8, #0
   1a3d0:	cmp	r4, #1
   1a3d4:	blt	1a578 <__assert_fail@plt+0x9144>
   1a3d8:	movw	r0, #45348	; 0xb124
   1a3dc:	movt	r0, #4
   1a3e0:	ldr	r1, [r0]
   1a3e4:	lsl	r0, r4, #2
   1a3e8:	blx	r1
   1a3ec:	str	r0, [sp, #48]	; 0x30
   1a3f0:	str	r4, [sp, #40]	; 0x28
   1a3f4:	mov	r2, #0
   1a3f8:	str	r9, [sp, #20]
   1a3fc:	ldr	r1, [sp, #44]	; 0x2c
   1a400:	cmp	r1, #0
   1a404:	rsbmi	r1, r1, #0
   1a408:	cmp	r1, r4
   1a40c:	movgt	r1, #0
   1a410:	strgt	r1, [sp, #44]	; 0x2c
   1a414:	cmp	r4, #4
   1a418:	ldr	r1, [sl, #8]
   1a41c:	bcc	1a500 <__assert_fail@plt+0x90cc>
   1a420:	add	r3, r1, r4, lsl #2
   1a424:	cmp	r0, r3
   1a428:	bcs	1a438 <__assert_fail@plt+0x9004>
   1a42c:	add	r3, r0, r4, lsl #2
   1a430:	cmp	r3, r1
   1a434:	bhi	1a500 <__assert_fail@plt+0x90cc>
   1a438:	bic	r2, r4, #-2147483645	; 0x80000003
   1a43c:	mov	r3, #1
   1a440:	mov	r8, #0
   1a444:	str	sl, [sp, #16]
   1a448:	str	r4, [sp, #8]
   1a44c:	sub	r6, r2, #4
   1a450:	add	r3, r3, r6, lsr #2
   1a454:	cmp	r6, #12
   1a458:	and	r7, r3, #3
   1a45c:	str	r7, [sp, #12]
   1a460:	bcc	1a4c8 <__assert_fail@plt+0x9094>
   1a464:	ldr	r7, [sp, #12]
   1a468:	mov	r5, #0
   1a46c:	mov	lr, #48	; 0x30
   1a470:	mov	r8, #0
   1a474:	sub	sl, r3, r7
   1a478:	add	r4, r1, r5
   1a47c:	add	r7, r0, r5
   1a480:	add	r5, r5, #64	; 0x40
   1a484:	subs	sl, sl, #4
   1a488:	add	r8, r8, #16
   1a48c:	mov	r9, r4
   1a490:	mov	r3, r7
   1a494:	add	ip, r4, #16
   1a498:	add	r6, r7, #16
   1a49c:	add	r7, r7, #32
   1a4a0:	vld1.32	{d16-d17}, [r9], lr
   1a4a4:	vst1.32	{d16-d17}, [r3], lr
   1a4a8:	vld1.32	{d16-d17}, [ip]
   1a4ac:	vst1.32	{d16-d17}, [r6]
   1a4b0:	add	r6, r4, #32
   1a4b4:	vld1.32	{d16-d17}, [r6]
   1a4b8:	vst1.32	{d16-d17}, [r7]
   1a4bc:	vld1.32	{d16-d17}, [r9]
   1a4c0:	vst1.32	{d16-d17}, [r3]
   1a4c4:	bne	1a478 <__assert_fail@plt+0x9044>
   1a4c8:	ldr	r6, [sp, #12]
   1a4cc:	cmp	r6, #0
   1a4d0:	beq	1a4f0 <__assert_fail@plt+0x90bc>
   1a4d4:	add	r3, r1, r8, lsl #2
   1a4d8:	add	r7, r0, r8, lsl #2
   1a4dc:	rsb	r6, r6, #0
   1a4e0:	vld1.32	{d16-d17}, [r3]!
   1a4e4:	adds	r6, r6, #1
   1a4e8:	vst1.32	{d16-d17}, [r7]!
   1a4ec:	bcc	1a4e0 <__assert_fail@plt+0x90ac>
   1a4f0:	ldr	r4, [sp, #8]
   1a4f4:	ldr	sl, [sp, #16]
   1a4f8:	cmp	r4, r2
   1a4fc:	beq	1a570 <__assert_fail@plt+0x913c>
   1a500:	mvn	r3, r2
   1a504:	ands	r7, r4, #3
   1a508:	add	r3, r4, r3
   1a50c:	beq	1a524 <__assert_fail@plt+0x90f0>
   1a510:	ldr	r6, [r1, r2, lsl #2]
   1a514:	subs	r7, r7, #1
   1a518:	str	r6, [r0, r2, lsl #2]
   1a51c:	add	r2, r2, #1
   1a520:	bne	1a510 <__assert_fail@plt+0x90dc>
   1a524:	cmp	r3, #3
   1a528:	bcc	1a570 <__assert_fail@plt+0x913c>
   1a52c:	sub	r3, r4, r2
   1a530:	lsl	r2, r2, #2
   1a534:	mov	r7, r0
   1a538:	add	r6, r1, #16
   1a53c:	ldr	r5, [r1, r2]!
   1a540:	add	r4, r7, #16
   1a544:	subs	r3, r3, #4
   1a548:	str	r5, [r7, r2]!
   1a54c:	ldr	r5, [r1, #4]
   1a550:	str	r5, [r7, #4]
   1a554:	ldr	r5, [r1, #8]
   1a558:	str	r5, [r7, #8]
   1a55c:	ldr	r1, [r1, #12]
   1a560:	str	r1, [r7, #12]
   1a564:	mov	r1, r6
   1a568:	mov	r7, r4
   1a56c:	bne	1a538 <__assert_fail@plt+0x9104>
   1a570:	ldr	r8, [sl, #4]
   1a574:	ldr	r9, [sp, #20]
   1a578:	rsb	r1, r8, #0
   1a57c:	cmp	r8, #0
   1a580:	movpl	r1, r8
   1a584:	cmp	r1, #0
   1a588:	str	r1, [sp, #44]	; 0x2c
   1a58c:	ble	1b148 <__assert_fail@plt+0x9d14>
   1a590:	ldr	r2, [r0]
   1a594:	mov	r1, #31
   1a598:	cmp	r2, #0
   1a59c:	bne	1a5b8 <__assert_fail@plt+0x9184>
   1a5a0:	add	r0, r0, #4
   1a5a4:	mov	r1, #31
   1a5a8:	ldr	r2, [r0], #4
   1a5ac:	add	r1, r1, #32
   1a5b0:	cmp	r2, #0
   1a5b4:	beq	1a5a8 <__assert_fail@plt+0x9174>
   1a5b8:	rsb	r0, r2, #0
   1a5bc:	and	r2, r2, r0
   1a5c0:	mov	r0, #0
   1a5c4:	cmp	r0, r2, lsr #24
   1a5c8:	bne	1a5e0 <__assert_fail@plt+0x91ac>
   1a5cc:	mov	r0, #0
   1a5d0:	lsl	r2, r2, #8
   1a5d4:	add	r0, r0, #8
   1a5d8:	cmp	r2, #16777216	; 0x1000000
   1a5dc:	bcc	1a5d0 <__assert_fail@plt+0x919c>
   1a5e0:	cmp	r2, #0
   1a5e4:	bmi	1a5f8 <__assert_fail@plt+0x91c4>
   1a5e8:	lsl	r2, r2, #1
   1a5ec:	add	r0, r0, #1
   1a5f0:	cmn	r2, #1
   1a5f4:	bgt	1a5e8 <__assert_fail@plt+0x91b4>
   1a5f8:	sub	r8, r1, r0
   1a5fc:	add	r0, sp, #40	; 0x28
   1a600:	mov	r3, #2
   1a604:	mov	r1, r0
   1a608:	mov	r2, r8
   1a60c:	bl	19038 <__assert_fail@plt+0x7c04>
   1a610:	add	r0, sp, #28
   1a614:	cmp	r0, r9
   1a618:	beq	1a70c <__assert_fail@plt+0x92d8>
   1a61c:	ldr	r4, [r9, #4]
   1a620:	ldr	r1, [sp, #28]
   1a624:	cmp	r4, #0
   1a628:	rsbmi	r4, r4, #0
   1a62c:	cmp	r4, r1
   1a630:	ble	1a714 <__assert_fail@plt+0x92e0>
   1a634:	cmp	r4, #1
   1a638:	mov	r6, r4
   1a63c:	movle	r6, #1
   1a640:	cmp	r1, #0
   1a644:	beq	1a740 <__assert_fail@plt+0x930c>
   1a648:	movw	r0, #45352	; 0xb128
   1a64c:	lsl	r1, r1, #2
   1a650:	lsl	r2, r6, #2
   1a654:	movt	r0, #4
   1a658:	ldr	r3, [r0]
   1a65c:	ldr	r0, [sp, #36]	; 0x24
   1a660:	blx	r3
   1a664:	b	1a754 <__assert_fail@plt+0x9320>
   1a668:	ldr	sl, [r9, #4]
   1a66c:	cmp	r6, r9
   1a670:	beq	1addc <__assert_fail@plt+0x99a8>
   1a674:	ldr	r1, [r6]
   1a678:	cmp	sl, #0
   1a67c:	rsbmi	sl, sl, #0
   1a680:	cmp	sl, r1
   1a684:	ble	1a724 <__assert_fail@plt+0x92f0>
   1a688:	cmp	sl, #1
   1a68c:	mov	r4, sl
   1a690:	movle	r4, #1
   1a694:	cmp	r1, #0
   1a698:	beq	1ac24 <__assert_fail@plt+0x97f0>
   1a69c:	movw	r0, #45352	; 0xb128
   1a6a0:	lsl	r1, r1, #2
   1a6a4:	lsl	r2, r4, #2
   1a6a8:	movt	r0, #4
   1a6ac:	ldr	r3, [r0]
   1a6b0:	ldr	r0, [r6, #8]
   1a6b4:	blx	r3
   1a6b8:	b	1ac38 <__assert_fail@plt+0x9804>
   1a6bc:	cmp	r6, sl
   1a6c0:	beq	1af98 <__assert_fail@plt+0x9b64>
   1a6c4:	ldr	r1, [r6]
   1a6c8:	cmp	r8, #0
   1a6cc:	rsbmi	r8, r8, #0
   1a6d0:	cmp	r8, r1
   1a6d4:	ble	1a72c <__assert_fail@plt+0x92f8>
   1a6d8:	cmp	r8, #1
   1a6dc:	mov	r4, r8
   1a6e0:	movle	r4, #1
   1a6e4:	cmp	r1, #0
   1a6e8:	beq	1adf0 <__assert_fail@plt+0x99bc>
   1a6ec:	movw	r0, #45352	; 0xb128
   1a6f0:	lsl	r1, r1, #2
   1a6f4:	lsl	r2, r4, #2
   1a6f8:	movt	r0, #4
   1a6fc:	ldr	r3, [r0]
   1a700:	ldr	r0, [r6, #8]
   1a704:	blx	r3
   1a708:	b	1ae04 <__assert_fail@plt+0x99d0>
   1a70c:	ldr	r0, [sp, #32]
   1a710:	b	1a8e4 <__assert_fail@plt+0x94b0>
   1a714:	ldr	r0, [sp, #36]	; 0x24
   1a718:	cmp	r4, #1
   1a71c:	bge	1a77c <__assert_fail@plt+0x9348>
   1a720:	b	1a8dc <__assert_fail@plt+0x94a8>
   1a724:	ldr	r0, [r6, #8]
   1a728:	b	1ac6c <__assert_fail@plt+0x9838>
   1a72c:	ldr	r0, [r6, #8]
   1a730:	mov	r4, r6
   1a734:	cmp	r8, #1
   1a738:	bge	1ae34 <__assert_fail@plt+0x9a00>
   1a73c:	b	1af8c <__assert_fail@plt+0x9b58>
   1a740:	movw	r0, #45348	; 0xb124
   1a744:	movt	r0, #4
   1a748:	ldr	r1, [r0]
   1a74c:	lsl	r0, r6, #2
   1a750:	blx	r1
   1a754:	str	r0, [sp, #36]	; 0x24
   1a758:	str	r6, [sp, #28]
   1a75c:	ldr	r1, [sp, #32]
   1a760:	cmp	r1, #0
   1a764:	rsbmi	r1, r1, #0
   1a768:	cmp	r1, r6
   1a76c:	movgt	r1, #0
   1a770:	strgt	r1, [sp, #32]
   1a774:	cmp	r4, #1
   1a778:	blt	1a8dc <__assert_fail@plt+0x94a8>
   1a77c:	ldr	r1, [r9, #8]
   1a780:	mov	r2, #0
   1a784:	cmp	r4, #4
   1a788:	bcc	1a870 <__assert_fail@plt+0x943c>
   1a78c:	add	r3, r1, r4, lsl #2
   1a790:	cmp	r0, r3
   1a794:	addcc	r3, r0, r4, lsl #2
   1a798:	cmpcc	r1, r3
   1a79c:	bcc	1a870 <__assert_fail@plt+0x943c>
   1a7a0:	bic	r2, r4, #-2147483645	; 0x80000003
   1a7a4:	mov	r3, #1
   1a7a8:	str	r9, [sp, #20]
   1a7ac:	mov	r9, #0
   1a7b0:	str	r8, [sp, #12]
   1a7b4:	str	r4, [sp, #8]
   1a7b8:	sub	r6, r2, #4
   1a7bc:	add	r3, r3, r6, lsr #2
   1a7c0:	cmp	r6, #12
   1a7c4:	and	r7, r3, #3
   1a7c8:	str	r7, [sp, #16]
   1a7cc:	bcc	1a834 <__assert_fail@plt+0x9400>
   1a7d0:	ldr	r7, [sp, #16]
   1a7d4:	mov	r5, #0
   1a7d8:	mov	lr, #48	; 0x30
   1a7dc:	mov	r9, #0
   1a7e0:	sub	r8, r3, r7
   1a7e4:	add	r7, r1, r5
   1a7e8:	add	r4, r0, r5
   1a7ec:	add	r5, r5, #64	; 0x40
   1a7f0:	subs	r8, r8, #4
   1a7f4:	add	r9, r9, #16
   1a7f8:	mov	r6, r7
   1a7fc:	mov	ip, r4
   1a800:	add	sl, r7, #16
   1a804:	add	r3, r4, #16
   1a808:	vld1.32	{d16-d17}, [r6], lr
   1a80c:	vst1.32	{d16-d17}, [ip], lr
   1a810:	vld1.32	{d16-d17}, [sl]
   1a814:	vst1.32	{d16-d17}, [r3]
   1a818:	add	r3, r7, #32
   1a81c:	vld1.32	{d16-d17}, [r3]
   1a820:	add	r3, r4, #32
   1a824:	vst1.32	{d16-d17}, [r3]
   1a828:	vld1.32	{d16-d17}, [r6]
   1a82c:	vst1.32	{d16-d17}, [ip]
   1a830:	bne	1a7e4 <__assert_fail@plt+0x93b0>
   1a834:	ldr	r7, [sp, #16]
   1a838:	cmp	r7, #0
   1a83c:	beq	1a85c <__assert_fail@plt+0x9428>
   1a840:	add	r3, r1, r9, lsl #2
   1a844:	add	r6, r0, r9, lsl #2
   1a848:	rsb	r5, r7, #0
   1a84c:	vld1.32	{d16-d17}, [r3]!
   1a850:	adds	r5, r5, #1
   1a854:	vst1.32	{d16-d17}, [r6]!
   1a858:	bcc	1a84c <__assert_fail@plt+0x9418>
   1a85c:	ldr	r4, [sp, #8]
   1a860:	ldr	r9, [sp, #20]
   1a864:	ldr	r8, [sp, #12]
   1a868:	cmp	r4, r2
   1a86c:	beq	1a8dc <__assert_fail@plt+0x94a8>
   1a870:	mvn	r3, r2
   1a874:	ands	r6, r4, #3
   1a878:	add	r3, r4, r3
   1a87c:	beq	1a894 <__assert_fail@plt+0x9460>
   1a880:	ldr	r7, [r1, r2, lsl #2]
   1a884:	subs	r6, r6, #1
   1a888:	str	r7, [r0, r2, lsl #2]
   1a88c:	add	r2, r2, #1
   1a890:	bne	1a880 <__assert_fail@plt+0x944c>
   1a894:	cmp	r3, #3
   1a898:	bcc	1a8dc <__assert_fail@plt+0x94a8>
   1a89c:	sub	r3, r4, r2
   1a8a0:	lsl	r2, r2, #2
   1a8a4:	add	r7, r1, #16
   1a8a8:	ldr	r6, [r1, r2]!
   1a8ac:	add	r5, r0, #16
   1a8b0:	subs	r3, r3, #4
   1a8b4:	str	r6, [r0, r2]!
   1a8b8:	ldr	r6, [r1, #4]
   1a8bc:	str	r6, [r0, #4]
   1a8c0:	ldr	r6, [r1, #8]
   1a8c4:	str	r6, [r0, #8]
   1a8c8:	ldr	r1, [r1, #12]
   1a8cc:	str	r1, [r0, #12]
   1a8d0:	mov	r1, r7
   1a8d4:	mov	r0, r5
   1a8d8:	bne	1a8a4 <__assert_fail@plt+0x9470>
   1a8dc:	ldr	r0, [r9, #4]
   1a8e0:	str	r0, [sp, #32]
   1a8e4:	ldr	sl, [sp, #24]
   1a8e8:	cmp	r0, #0
   1a8ec:	rsbmi	r0, r0, #0
   1a8f0:	cmp	r0, #0
   1a8f4:	str	r0, [sp, #32]
   1a8f8:	ble	1b148 <__assert_fail@plt+0x9d14>
   1a8fc:	ldr	r2, [sp, #36]	; 0x24
   1a900:	mov	r0, #31
   1a904:	ldr	r1, [r2]
   1a908:	cmp	r1, #0
   1a90c:	bne	1a928 <__assert_fail@plt+0x94f4>
   1a910:	add	r2, r2, #4
   1a914:	mov	r0, #31
   1a918:	ldr	r1, [r2], #4
   1a91c:	add	r0, r0, #32
   1a920:	cmp	r1, #0
   1a924:	beq	1a918 <__assert_fail@plt+0x94e4>
   1a928:	rsb	r2, r1, #0
   1a92c:	and	r2, r1, r2
   1a930:	mov	r1, #0
   1a934:	cmp	r1, r2, lsr #24
   1a938:	bne	1a950 <__assert_fail@plt+0x951c>
   1a93c:	mov	r1, #0
   1a940:	lsl	r2, r2, #8
   1a944:	add	r1, r1, #8
   1a948:	cmp	r2, #16777216	; 0x1000000
   1a94c:	bcc	1a940 <__assert_fail@plt+0x950c>
   1a950:	cmp	r2, #0
   1a954:	bmi	1a968 <__assert_fail@plt+0x9534>
   1a958:	lsl	r2, r2, #1
   1a95c:	add	r1, r1, #1
   1a960:	cmn	r2, #1
   1a964:	bgt	1a958 <__assert_fail@plt+0x9524>
   1a968:	sub	r9, r0, r1
   1a96c:	add	r0, sp, #28
   1a970:	mov	r3, #2
   1a974:	mov	r4, #2
   1a978:	mov	r1, r0
   1a97c:	mov	r2, r9
   1a980:	bl	19038 <__assert_fail@plt+0x7c04>
   1a984:	ldr	r0, [sp, #32]
   1a988:	ldr	r1, [sp, #44]	; 0x2c
   1a98c:	cmp	r8, r9
   1a990:	movcc	r9, r8
   1a994:	cmp	r1, r0
   1a998:	bge	1a9c4 <__assert_fail@plt+0x9590>
   1a99c:	str	r1, [sp, #32]
   1a9a0:	str	r0, [sp, #44]	; 0x2c
   1a9a4:	ldr	r0, [sp, #40]	; 0x28
   1a9a8:	ldr	r1, [sp, #48]	; 0x30
   1a9ac:	ldr	r2, [sp, #28]
   1a9b0:	ldr	r3, [sp, #36]	; 0x24
   1a9b4:	str	r2, [sp, #40]	; 0x28
   1a9b8:	str	r0, [sp, #28]
   1a9bc:	str	r3, [sp, #48]	; 0x30
   1a9c0:	str	r1, [sp, #36]	; 0x24
   1a9c4:	add	r1, sp, #40	; 0x28
   1a9c8:	add	r3, sp, #28
   1a9cc:	mov	r0, #0
   1a9d0:	str	r4, [sp]
   1a9d4:	mov	r2, r1
   1a9d8:	bl	18468 <__assert_fail@plt+0x7034>
   1a9dc:	ldr	r0, [sp, #44]	; 0x2c
   1a9e0:	cmp	r0, #0
   1a9e4:	beq	1ab98 <__assert_fail@plt+0x9764>
   1a9e8:	cmp	r0, #1
   1a9ec:	blt	1b148 <__assert_fail@plt+0x9d14>
   1a9f0:	add	r8, sp, #40	; 0x28
   1a9f4:	add	r4, sp, #28
   1a9f8:	ldr	r2, [sp, #48]	; 0x30
   1a9fc:	mov	r0, #31
   1aa00:	ldr	r1, [r2]
   1aa04:	cmp	r1, #0
   1aa08:	bne	1aa24 <__assert_fail@plt+0x95f0>
   1aa0c:	add	r2, r2, #4
   1aa10:	mov	r0, #31
   1aa14:	ldr	r1, [r2], #4
   1aa18:	add	r0, r0, #32
   1aa1c:	cmp	r1, #0
   1aa20:	beq	1aa14 <__assert_fail@plt+0x95e0>
   1aa24:	rsb	r2, r1, #0
   1aa28:	and	r2, r1, r2
   1aa2c:	mov	r1, #0
   1aa30:	cmp	r1, r2, lsr #24
   1aa34:	bne	1aa4c <__assert_fail@plt+0x9618>
   1aa38:	mov	r1, #0
   1aa3c:	lsl	r2, r2, #8
   1aa40:	add	r1, r1, #8
   1aa44:	cmp	r2, #16777216	; 0x1000000
   1aa48:	bcc	1aa3c <__assert_fail@plt+0x9608>
   1aa4c:	cmp	r2, #0
   1aa50:	bmi	1aa64 <__assert_fail@plt+0x9630>
   1aa54:	lsl	r2, r2, #1
   1aa58:	add	r1, r1, #1
   1aa5c:	cmn	r2, #1
   1aa60:	bgt	1aa54 <__assert_fail@plt+0x9620>
   1aa64:	sub	r2, r0, r1
   1aa68:	mov	r0, r8
   1aa6c:	mov	r1, r8
   1aa70:	mov	r3, #2
   1aa74:	bl	19038 <__assert_fail@plt+0x7c04>
   1aa78:	ldr	r5, [sp, #32]
   1aa7c:	ldr	r1, [sp, #44]	; 0x2c
   1aa80:	cmp	r1, r5
   1aa84:	bne	1aac8 <__assert_fail@plt+0x9694>
   1aa88:	mov	ip, r4
   1aa8c:	cmp	r1, #0
   1aa90:	bmi	1aae8 <__assert_fail@plt+0x96b4>
   1aa94:	ldr	r3, [sp, #36]	; 0x24
   1aa98:	ldr	r2, [sp, #48]	; 0x30
   1aa9c:	mov	r0, r1
   1aaa0:	sub	r4, r3, #4
   1aaa4:	subs	r7, r0, #1
   1aaa8:	blt	1ab68 <__assert_fail@plt+0x9734>
   1aaac:	ldr	r6, [r4, r0, lsl #2]
   1aab0:	add	r0, r2, r0, lsl #2
   1aab4:	ldr	r0, [r0, #-4]
   1aab8:	cmp	r0, r6
   1aabc:	mov	r0, r7
   1aac0:	beq	1aaa4 <__assert_fail@plt+0x9670>
   1aac4:	b	1ab18 <__assert_fail@plt+0x96e4>
   1aac8:	bge	1aad8 <__assert_fail@plt+0x96a4>
   1aacc:	ldr	r3, [sp, #36]	; 0x24
   1aad0:	ldr	r2, [sp, #48]	; 0x30
   1aad4:	b	1ab20 <__assert_fail@plt+0x96ec>
   1aad8:	mov	r1, r5
   1aadc:	cmp	r1, #1
   1aae0:	bne	1ab48 <__assert_fail@plt+0x9714>
   1aae4:	b	1afac <__assert_fail@plt+0x9b78>
   1aae8:	ldr	r3, [sp, #36]	; 0x24
   1aaec:	ldr	r2, [sp, #48]	; 0x30
   1aaf0:	rsb	r7, r1, #0
   1aaf4:	sub	r4, r3, #4
   1aaf8:	subs	r0, r7, #1
   1aafc:	blt	1ab68 <__assert_fail@plt+0x9734>
   1ab00:	ldr	r6, [r4, r7, lsl #2]
   1ab04:	add	r7, r2, r7, lsl #2
   1ab08:	ldr	r7, [r7, #-4]
   1ab0c:	cmp	r6, r7
   1ab10:	mov	r7, r0
   1ab14:	beq	1aaf8 <__assert_fail@plt+0x96c4>
   1ab18:	mov	r4, ip
   1ab1c:	bhi	1ab40 <__assert_fail@plt+0x970c>
   1ab20:	str	r1, [sp, #32]
   1ab24:	str	r2, [sp, #36]	; 0x24
   1ab28:	str	r5, [sp, #44]	; 0x2c
   1ab2c:	str	r3, [sp, #48]	; 0x30
   1ab30:	ldr	r0, [sp, #40]	; 0x28
   1ab34:	ldr	r2, [sp, #28]
   1ab38:	str	r2, [sp, #40]	; 0x28
   1ab3c:	str	r0, [sp, #28]
   1ab40:	cmp	r1, #1
   1ab44:	beq	1afac <__assert_fail@plt+0x9b78>
   1ab48:	mov	r0, r8
   1ab4c:	mov	r1, r8
   1ab50:	mov	r2, r4
   1ab54:	bl	179e4 <__assert_fail@plt+0x65b0>
   1ab58:	ldr	r0, [sp, #44]	; 0x2c
   1ab5c:	cmp	r0, #0
   1ab60:	bgt	1a9f8 <__assert_fail@plt+0x95c4>
   1ab64:	b	1b148 <__assert_fail@plt+0x9d14>
   1ab68:	ldr	r0, [sl, #4]
   1ab6c:	str	r1, [sl, #4]
   1ab70:	mov	r6, sl
   1ab74:	str	r0, [sp, #44]	; 0x2c
   1ab78:	ldr	r0, [sl]
   1ab7c:	ldr	r1, [sp, #40]	; 0x28
   1ab80:	str	r1, [sl]
   1ab84:	str	r0, [sp, #40]	; 0x28
   1ab88:	ldr	r0, [sl, #8]
   1ab8c:	str	r2, [sl, #8]
   1ab90:	str	r0, [sp, #48]	; 0x30
   1ab94:	b	1abcc <__assert_fail@plt+0x9798>
   1ab98:	ldr	r0, [sl, #4]
   1ab9c:	ldr	r1, [sp, #32]
   1aba0:	mov	r6, sl
   1aba4:	str	r1, [sl, #4]
   1aba8:	str	r0, [sp, #32]
   1abac:	ldr	r0, [sl]
   1abb0:	ldr	r1, [sp, #28]
   1abb4:	str	r1, [sl]
   1abb8:	str	r0, [sp, #28]
   1abbc:	ldr	r0, [sl, #8]
   1abc0:	ldr	r1, [sp, #36]	; 0x24
   1abc4:	str	r1, [sl, #8]
   1abc8:	str	r0, [sp, #36]	; 0x24
   1abcc:	ldr	r0, [sp, #40]	; 0x28
   1abd0:	movw	r4, #45356	; 0xb12c
   1abd4:	movt	r4, #4
   1abd8:	cmp	r0, #0
   1abdc:	beq	1abf0 <__assert_fail@plt+0x97bc>
   1abe0:	lsl	r1, r0, #2
   1abe4:	ldr	r2, [r4]
   1abe8:	ldr	r0, [sp, #48]	; 0x30
   1abec:	blx	r2
   1abf0:	ldr	r0, [sp, #28]
   1abf4:	cmp	r0, #0
   1abf8:	beq	1ac0c <__assert_fail@plt+0x97d8>
   1abfc:	lsl	r1, r0, #2
   1ac00:	ldr	r2, [r4]
   1ac04:	ldr	r0, [sp, #36]	; 0x24
   1ac08:	blx	r2
   1ac0c:	mov	r0, r6
   1ac10:	mov	r1, r6
   1ac14:	mov	r2, r9
   1ac18:	bl	17efc <__assert_fail@plt+0x6ac8>
   1ac1c:	sub	sp, fp, #28
   1ac20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac24:	movw	r0, #45348	; 0xb124
   1ac28:	movt	r0, #4
   1ac2c:	ldr	r1, [r0]
   1ac30:	lsl	r0, r4, #2
   1ac34:	blx	r1
   1ac38:	str	r0, [r6, #8]
   1ac3c:	str	r4, [r6]
   1ac40:	ldr	r1, [r6, #4]
   1ac44:	cmp	r1, #0
   1ac48:	rsbmi	r1, r1, #0
   1ac4c:	cmp	r1, r4
   1ac50:	ble	1ac6c <__assert_fail@plt+0x9838>
   1ac54:	mov	r1, #0
   1ac58:	mov	r4, r6
   1ac5c:	str	r1, [r6, #4]
   1ac60:	cmp	sl, #1
   1ac64:	bge	1ac78 <__assert_fail@plt+0x9844>
   1ac68:	b	1add0 <__assert_fail@plt+0x999c>
   1ac6c:	mov	r4, r6
   1ac70:	cmp	sl, #1
   1ac74:	blt	1add0 <__assert_fail@plt+0x999c>
   1ac78:	ldr	r1, [r9, #8]
   1ac7c:	mov	r2, #0
   1ac80:	cmp	sl, #4
   1ac84:	bcc	1ad64 <__assert_fail@plt+0x9930>
   1ac88:	add	r3, r1, sl, lsl #2
   1ac8c:	cmp	r0, r3
   1ac90:	addcc	r3, r0, sl, lsl #2
   1ac94:	cmpcc	r1, r3
   1ac98:	bcc	1ad64 <__assert_fail@plt+0x9930>
   1ac9c:	bic	r2, sl, #-2147483645	; 0x80000003
   1aca0:	mov	r3, #1
   1aca4:	mov	lr, #0
   1aca8:	str	r9, [sp, #20]
   1acac:	str	r4, [sp, #24]
   1acb0:	sub	r5, r2, #4
   1acb4:	add	r3, r3, r5, lsr #2
   1acb8:	cmp	r5, #12
   1acbc:	and	r7, r3, #3
   1acc0:	str	r7, [sp, #16]
   1acc4:	bcc	1ad2c <__assert_fail@plt+0x98f8>
   1acc8:	ldr	r7, [sp, #16]
   1accc:	mov	lr, #0
   1acd0:	sub	r4, r3, r7
   1acd4:	mov	r3, #0
   1acd8:	add	r5, r1, r3
   1acdc:	mov	r7, #48	; 0x30
   1ace0:	add	ip, r0, r3
   1ace4:	add	r3, r3, #64	; 0x40
   1ace8:	subs	r4, r4, #4
   1acec:	add	lr, lr, #16
   1acf0:	mov	r6, r5
   1acf4:	mov	r8, ip
   1acf8:	add	r9, r5, #16
   1acfc:	add	r5, r5, #32
   1ad00:	vld1.32	{d16-d17}, [r6], r7
   1ad04:	vst1.32	{d16-d17}, [r8], r7
   1ad08:	add	r7, ip, #16
   1ad0c:	vld1.32	{d16-d17}, [r9]
   1ad10:	vst1.32	{d16-d17}, [r7]
   1ad14:	add	r7, ip, #32
   1ad18:	vld1.32	{d16-d17}, [r5]
   1ad1c:	vst1.32	{d16-d17}, [r7]
   1ad20:	vld1.32	{d16-d17}, [r6]
   1ad24:	vst1.32	{d16-d17}, [r8]
   1ad28:	bne	1acd8 <__assert_fail@plt+0x98a4>
   1ad2c:	ldr	r6, [sp, #16]
   1ad30:	cmp	r6, #0
   1ad34:	beq	1ad54 <__assert_fail@plt+0x9920>
   1ad38:	add	r3, r1, lr, lsl #2
   1ad3c:	add	r7, r0, lr, lsl #2
   1ad40:	rsb	r5, r6, #0
   1ad44:	vld1.32	{d16-d17}, [r3]!
   1ad48:	adds	r5, r5, #1
   1ad4c:	vst1.32	{d16-d17}, [r7]!
   1ad50:	bcc	1ad44 <__assert_fail@plt+0x9910>
   1ad54:	ldr	r4, [sp, #24]
   1ad58:	ldr	r9, [sp, #20]
   1ad5c:	cmp	sl, r2
   1ad60:	beq	1add0 <__assert_fail@plt+0x999c>
   1ad64:	mvn	r3, r2
   1ad68:	ands	r7, sl, #3
   1ad6c:	add	r3, sl, r3
   1ad70:	beq	1ad88 <__assert_fail@plt+0x9954>
   1ad74:	ldr	r6, [r1, r2, lsl #2]
   1ad78:	subs	r7, r7, #1
   1ad7c:	str	r6, [r0, r2, lsl #2]
   1ad80:	add	r2, r2, #1
   1ad84:	bne	1ad74 <__assert_fail@plt+0x9940>
   1ad88:	cmp	r3, #3
   1ad8c:	bcc	1add0 <__assert_fail@plt+0x999c>
   1ad90:	sub	r3, sl, r2
   1ad94:	lsl	r2, r2, #2
   1ad98:	add	r7, r1, #16
   1ad9c:	ldr	r6, [r1, r2]!
   1ada0:	add	r5, r0, #16
   1ada4:	subs	r3, r3, #4
   1ada8:	str	r6, [r0, r2]!
   1adac:	ldr	r6, [r1, #4]
   1adb0:	str	r6, [r0, #4]
   1adb4:	ldr	r6, [r1, #8]
   1adb8:	str	r6, [r0, #8]
   1adbc:	ldr	r1, [r1, #12]
   1adc0:	str	r1, [r0, #12]
   1adc4:	mov	r1, r7
   1adc8:	mov	r0, r5
   1adcc:	bne	1ad98 <__assert_fail@plt+0x9964>
   1add0:	ldr	sl, [r9, #4]
   1add4:	mov	r6, r4
   1add8:	str	sl, [r4, #4]
   1addc:	cmp	sl, #0
   1ade0:	rsbmi	sl, sl, #0
   1ade4:	str	sl, [r6, #4]
   1ade8:	sub	sp, fp, #28
   1adec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1adf0:	movw	r0, #45348	; 0xb124
   1adf4:	movt	r0, #4
   1adf8:	ldr	r1, [r0]
   1adfc:	lsl	r0, r4, #2
   1ae00:	blx	r1
   1ae04:	str	r0, [r6, #8]
   1ae08:	str	r4, [r6]
   1ae0c:	ldr	r1, [r6, #4]
   1ae10:	cmp	r1, #0
   1ae14:	rsbmi	r1, r1, #0
   1ae18:	cmp	r1, r4
   1ae1c:	ble	1ae30 <__assert_fail@plt+0x99fc>
   1ae20:	mov	r1, #0
   1ae24:	mov	r4, r6
   1ae28:	str	r1, [r6, #4]
   1ae2c:	b	1ae34 <__assert_fail@plt+0x9a00>
   1ae30:	mov	r4, r6
   1ae34:	ldr	r1, [sl, #8]
   1ae38:	mov	r2, #0
   1ae3c:	cmp	r8, #4
   1ae40:	bcc	1af20 <__assert_fail@plt+0x9aec>
   1ae44:	add	r3, r1, r8, lsl #2
   1ae48:	cmp	r0, r3
   1ae4c:	addcc	r3, r0, r8, lsl #2
   1ae50:	cmpcc	r1, r3
   1ae54:	bcc	1af20 <__assert_fail@plt+0x9aec>
   1ae58:	bic	r2, r8, #-2147483645	; 0x80000003
   1ae5c:	mov	r3, #1
   1ae60:	mov	r9, #0
   1ae64:	str	sl, [sp, #16]
   1ae68:	str	r4, [sp, #24]
   1ae6c:	sub	r6, r2, #4
   1ae70:	add	r3, r3, r6, lsr #2
   1ae74:	cmp	r6, #12
   1ae78:	and	r7, r3, #3
   1ae7c:	str	r7, [sp, #20]
   1ae80:	bcc	1aee8 <__assert_fail@plt+0x9ab4>
   1ae84:	ldr	r7, [sp, #20]
   1ae88:	mov	r9, #0
   1ae8c:	sub	lr, r3, r7
   1ae90:	mov	r3, #0
   1ae94:	add	r6, r1, r3
   1ae98:	mov	r4, #48	; 0x30
   1ae9c:	add	r5, r0, r3
   1aea0:	add	r3, r3, #64	; 0x40
   1aea4:	subs	lr, lr, #4
   1aea8:	add	r9, r9, #16
   1aeac:	mov	r7, r6
   1aeb0:	mov	ip, r5
   1aeb4:	add	sl, r6, #16
   1aeb8:	vld1.32	{d16-d17}, [r7], r4
   1aebc:	vst1.32	{d16-d17}, [ip], r4
   1aec0:	add	r4, r5, #16
   1aec4:	vld1.32	{d16-d17}, [sl]
   1aec8:	vst1.32	{d16-d17}, [r4]
   1aecc:	add	r4, r6, #32
   1aed0:	vld1.32	{d16-d17}, [r4]
   1aed4:	add	r4, r5, #32
   1aed8:	vst1.32	{d16-d17}, [r4]
   1aedc:	vld1.32	{d16-d17}, [r7]
   1aee0:	vst1.32	{d16-d17}, [ip]
   1aee4:	bne	1ae94 <__assert_fail@plt+0x9a60>
   1aee8:	ldr	r7, [sp, #20]
   1aeec:	cmp	r7, #0
   1aef0:	beq	1af10 <__assert_fail@plt+0x9adc>
   1aef4:	add	r3, r1, r9, lsl #2
   1aef8:	add	r6, r0, r9, lsl #2
   1aefc:	rsb	r5, r7, #0
   1af00:	vld1.32	{d16-d17}, [r3]!
   1af04:	adds	r5, r5, #1
   1af08:	vst1.32	{d16-d17}, [r6]!
   1af0c:	bcc	1af00 <__assert_fail@plt+0x9acc>
   1af10:	ldr	r4, [sp, #24]
   1af14:	ldr	sl, [sp, #16]
   1af18:	cmp	r8, r2
   1af1c:	beq	1af8c <__assert_fail@plt+0x9b58>
   1af20:	mvn	r3, r2
   1af24:	ands	r6, r8, #3
   1af28:	add	r3, r8, r3
   1af2c:	beq	1af44 <__assert_fail@plt+0x9b10>
   1af30:	ldr	r7, [r1, r2, lsl #2]
   1af34:	subs	r6, r6, #1
   1af38:	str	r7, [r0, r2, lsl #2]
   1af3c:	add	r2, r2, #1
   1af40:	bne	1af30 <__assert_fail@plt+0x9afc>
   1af44:	cmp	r3, #3
   1af48:	bcc	1af8c <__assert_fail@plt+0x9b58>
   1af4c:	sub	r3, r8, r2
   1af50:	lsl	r2, r2, #2
   1af54:	add	r7, r1, #16
   1af58:	ldr	r6, [r1, r2]!
   1af5c:	add	r5, r0, #16
   1af60:	subs	r3, r3, #4
   1af64:	str	r6, [r0, r2]!
   1af68:	ldr	r6, [r1, #4]
   1af6c:	str	r6, [r0, #4]
   1af70:	ldr	r6, [r1, #8]
   1af74:	str	r6, [r0, #8]
   1af78:	ldr	r1, [r1, #12]
   1af7c:	str	r1, [r0, #12]
   1af80:	mov	r1, r7
   1af84:	mov	r0, r5
   1af88:	bne	1af54 <__assert_fail@plt+0x9b20>
   1af8c:	ldr	r8, [sl, #4]
   1af90:	mov	r6, r4
   1af94:	str	r8, [r4, #4]
   1af98:	cmp	r8, #0
   1af9c:	rsbmi	r8, r8, #0
   1afa0:	str	r8, [r6, #4]
   1afa4:	sub	sp, fp, #28
   1afa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afac:	mov	r0, #2
   1afb0:	add	r1, sp, #40	; 0x28
   1afb4:	add	r3, sp, #28
   1afb8:	str	r0, [sp]
   1afbc:	mov	r0, #0
   1afc0:	mov	r2, r1
   1afc4:	bl	18468 <__assert_fail@plt+0x7034>
   1afc8:	ldr	r1, [sl]
   1afcc:	cmp	r1, #0
   1afd0:	ble	1afe0 <__assert_fail@plt+0x9bac>
   1afd4:	ldr	r0, [sl, #8]
   1afd8:	mov	r6, sl
   1afdc:	b	1b048 <__assert_fail@plt+0x9c14>
   1afe0:	mov	r6, sl
   1afe4:	beq	1b00c <__assert_fail@plt+0x9bd8>
   1afe8:	movw	r0, #45352	; 0xb128
   1afec:	lsl	r1, r1, #2
   1aff0:	mov	r2, #4
   1aff4:	mov	r4, r6
   1aff8:	movt	r0, #4
   1affc:	ldr	r3, [r0]
   1b000:	ldr	r0, [r6, #8]
   1b004:	blx	r3
   1b008:	b	1b024 <__assert_fail@plt+0x9bf0>
   1b00c:	movw	r0, #45348	; 0xb124
   1b010:	movt	r0, #4
   1b014:	ldr	r1, [r0]
   1b018:	mov	r0, #4
   1b01c:	blx	r1
   1b020:	mov	r4, r6
   1b024:	mov	r1, #1
   1b028:	str	r0, [r6, #8]
   1b02c:	str	r1, [r4]
   1b030:	ldr	r1, [r4, #4]
   1b034:	cmp	r1, #0
   1b038:	rsbmi	r1, r1, #0
   1b03c:	cmp	r1, #2
   1b040:	movge	r1, #0
   1b044:	strge	r1, [r6, #4]
   1b048:	ldr	r1, [sp, #48]	; 0x30
   1b04c:	ldr	r2, [sp, #36]	; 0x24
   1b050:	ldr	r1, [r1]
   1b054:	ldr	r2, [r2]
   1b058:	orrs	r3, r2, r1
   1b05c:	beq	1b168 <__assert_fail@plt+0x9d34>
   1b060:	cmp	r1, #0
   1b064:	beq	1b130 <__assert_fail@plt+0x9cfc>
   1b068:	cmp	r2, #0
   1b06c:	beq	1b12c <__assert_fail@plt+0x9cf8>
   1b070:	rsb	r7, r3, #0
   1b074:	and	r7, r3, r7
   1b078:	mov	r3, #0
   1b07c:	cmp	r3, r7, lsr #24
   1b080:	bne	1b098 <__assert_fail@plt+0x9c64>
   1b084:	mov	r3, #0
   1b088:	lsl	r7, r7, #8
   1b08c:	add	r3, r3, #8
   1b090:	cmp	r7, #16777216	; 0x1000000
   1b094:	bcc	1b088 <__assert_fail@plt+0x9c54>
   1b098:	cmp	r7, #0
   1b09c:	bmi	1b0b0 <__assert_fail@plt+0x9c7c>
   1b0a0:	lsl	r7, r7, #1
   1b0a4:	add	r3, r3, #1
   1b0a8:	cmn	r7, #1
   1b0ac:	bgt	1b0a0 <__assert_fail@plt+0x9c6c>
   1b0b0:	rsb	r3, r3, #31
   1b0b4:	mov	r7, #1
   1b0b8:	and	r4, r7, r1, lsr r3
   1b0bc:	lsr	r2, r2, r3
   1b0c0:	mov	r5, r2
   1b0c4:	cmp	r4, #0
   1b0c8:	lsreq	r5, r1, r3
   1b0cc:	mov	r7, r5
   1b0d0:	lsr	r5, r5, #1
   1b0d4:	tst	r7, #1
   1b0d8:	beq	1b0cc <__assert_fail@plt+0x9c98>
   1b0dc:	cmp	r4, #0
   1b0e0:	lsrne	r2, r1, r3
   1b0e4:	cmp	r2, r7
   1b0e8:	beq	1b124 <__assert_fail@plt+0x9cf0>
   1b0ec:	cmp	r2, r7
   1b0f0:	bls	1b10c <__assert_fail@plt+0x9cd8>
   1b0f4:	sub	r1, r2, r7
   1b0f8:	lsr	r2, r1, #1
   1b0fc:	tst	r1, #2
   1b100:	mov	r1, r2
   1b104:	beq	1b0f8 <__assert_fail@plt+0x9cc4>
   1b108:	b	1b0e4 <__assert_fail@plt+0x9cb0>
   1b10c:	sub	r1, r7, r2
   1b110:	lsr	r7, r1, #1
   1b114:	tst	r1, #2
   1b118:	mov	r1, r7
   1b11c:	beq	1b110 <__assert_fail@plt+0x9cdc>
   1b120:	b	1b0e4 <__assert_fail@plt+0x9cb0>
   1b124:	lsl	r2, r7, r3
   1b128:	b	1b130 <__assert_fail@plt+0x9cfc>
   1b12c:	mov	r2, r1
   1b130:	cmp	r2, #0
   1b134:	str	r2, [r0]
   1b138:	movwne	r2, #1
   1b13c:	str	r2, [r6, #4]
   1b140:	b	1abcc <__assert_fail@plt+0x9798>
   1b144:	str	r1, [sp, #44]	; 0x2c
   1b148:	movw	r0, #40762	; 0x9f3a
   1b14c:	movw	r1, #37260	; 0x918c
   1b150:	movw	r3, #40778	; 0x9f4a
   1b154:	movw	r2, #2723	; 0xaa3
   1b158:	movt	r0, #3
   1b15c:	movt	r1, #3
   1b160:	movt	r3, #3
   1b164:	bl	11434 <__assert_fail@plt>
   1b168:	movw	r0, #40819	; 0x9f73
   1b16c:	movw	r1, #37260	; 0x918c
   1b170:	movw	r3, #40831	; 0x9f7f
   1b174:	movw	r2, #2663	; 0xa67
   1b178:	movt	r0, #3
   1b17c:	movt	r1, #3
   1b180:	movt	r3, #3
   1b184:	bl	11434 <__assert_fail@plt>
   1b188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b18c:	add	fp, sp, #28
   1b190:	sub	sp, sp, #108	; 0x6c
   1b194:	mov	sl, r2
   1b198:	ldr	r2, [fp, #8]
   1b19c:	ldr	r9, [r3, #4]
   1b1a0:	mov	ip, r0
   1b1a4:	str	r0, [sp, #28]
   1b1a8:	ldr	r8, [r2, #4]
   1b1ac:	cmp	r9, #0
   1b1b0:	str	r2, [sp, #32]
   1b1b4:	beq	1b4d0 <__assert_fail@plt+0xa09c>
   1b1b8:	cmp	r8, #0
   1b1bc:	str	r3, [sp, #20]
   1b1c0:	beq	1b538 <__assert_fail@plt+0xa104>
   1b1c4:	movw	r0, #37256	; 0x9188
   1b1c8:	sub	r2, fp, #40	; 0x28
   1b1cc:	str	r1, [sp, #24]
   1b1d0:	mov	r1, #0
   1b1d4:	movt	r0, #3
   1b1d8:	cmp	r2, r3
   1b1dc:	str	r0, [fp, #-32]	; 0xffffffe0
   1b1e0:	str	r1, [fp, #-36]	; 0xffffffdc
   1b1e4:	str	r0, [fp, #-44]	; 0xffffffd4
   1b1e8:	str	r1, [fp, #-48]	; 0xffffffd0
   1b1ec:	str	r0, [fp, #-56]	; 0xffffffc8
   1b1f0:	str	r1, [fp, #-60]	; 0xffffffc4
   1b1f4:	str	r0, [sp, #68]	; 0x44
   1b1f8:	str	r1, [sp, #64]	; 0x40
   1b1fc:	str	r0, [sp, #56]	; 0x38
   1b200:	str	r1, [sp, #52]	; 0x34
   1b204:	str	r0, [sp, #44]	; 0x2c
   1b208:	str	r1, [sp, #40]	; 0x28
   1b20c:	str	r1, [fp, #-40]	; 0xffffffd8
   1b210:	str	r1, [fp, #-52]	; 0xffffffcc
   1b214:	str	r1, [fp, #-64]	; 0xffffffc0
   1b218:	str	r1, [sp, #60]	; 0x3c
   1b21c:	str	r1, [sp, #48]	; 0x30
   1b220:	str	r1, [sp, #36]	; 0x24
   1b224:	beq	1c418 <__assert_fail@plt+0xafe4>
   1b228:	cmp	r9, #0
   1b22c:	mov	r4, r9
   1b230:	rsbmi	r4, r9, #0
   1b234:	cmp	r4, #1
   1b238:	blt	1b3dc <__assert_fail@plt+0x9fa8>
   1b23c:	movw	r0, #45348	; 0xb124
   1b240:	movt	r0, #4
   1b244:	ldr	r1, [r0]
   1b248:	lsl	r0, r4, #2
   1b24c:	blx	r1
   1b250:	str	r0, [fp, #-32]	; 0xffffffe0
   1b254:	str	r4, [fp, #-40]	; 0xffffffd8
   1b258:	ldr	ip, [sp, #20]
   1b25c:	mov	r2, #0
   1b260:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b264:	cmp	r1, #0
   1b268:	rsbmi	r1, r1, #0
   1b26c:	cmp	r1, r4
   1b270:	movgt	r1, #0
   1b274:	strgt	r1, [fp, #-36]	; 0xffffffdc
   1b278:	cmp	r4, #4
   1b27c:	ldr	r1, [ip, #8]
   1b280:	bcc	1b368 <__assert_fail@plt+0x9f34>
   1b284:	add	r3, r1, r4, lsl #2
   1b288:	cmp	r0, r3
   1b28c:	bcs	1b29c <__assert_fail@plt+0x9e68>
   1b290:	add	r3, r0, r4, lsl #2
   1b294:	cmp	r3, r1
   1b298:	bhi	1b368 <__assert_fail@plt+0x9f34>
   1b29c:	bic	r2, r4, #-2147483645	; 0x80000003
   1b2a0:	mov	r3, #1
   1b2a4:	mov	r9, #0
   1b2a8:	str	sl, [sp, #12]
   1b2ac:	str	r4, [sp, #8]
   1b2b0:	sub	r6, r2, #4
   1b2b4:	add	r3, r3, r6, lsr #2
   1b2b8:	cmp	r6, #12
   1b2bc:	and	r7, r3, #3
   1b2c0:	str	r7, [sp, #16]
   1b2c4:	bcc	1b32c <__assert_fail@plt+0x9ef8>
   1b2c8:	ldr	r7, [sp, #16]
   1b2cc:	mov	r5, #0
   1b2d0:	mov	lr, #48	; 0x30
   1b2d4:	mov	r9, #0
   1b2d8:	sub	sl, r3, r7
   1b2dc:	add	r4, r1, r5
   1b2e0:	add	r7, r0, r5
   1b2e4:	add	r5, r5, #64	; 0x40
   1b2e8:	subs	sl, sl, #4
   1b2ec:	add	r9, r9, #16
   1b2f0:	mov	r8, r4
   1b2f4:	mov	r6, r7
   1b2f8:	add	ip, r4, #16
   1b2fc:	add	r3, r7, #16
   1b300:	vld1.32	{d16-d17}, [r8], lr
   1b304:	vst1.32	{d16-d17}, [r6], lr
   1b308:	vld1.32	{d16-d17}, [ip]
   1b30c:	vst1.32	{d16-d17}, [r3]
   1b310:	add	r3, r4, #32
   1b314:	vld1.32	{d16-d17}, [r3]
   1b318:	add	r3, r7, #32
   1b31c:	vst1.32	{d16-d17}, [r3]
   1b320:	vld1.32	{d16-d17}, [r8]
   1b324:	vst1.32	{d16-d17}, [r6]
   1b328:	bne	1b2dc <__assert_fail@plt+0x9ea8>
   1b32c:	ldr	r6, [sp, #16]
   1b330:	cmp	r6, #0
   1b334:	beq	1b354 <__assert_fail@plt+0x9f20>
   1b338:	add	r3, r1, r9, lsl #2
   1b33c:	add	r7, r0, r9, lsl #2
   1b340:	rsb	r6, r6, #0
   1b344:	vld1.32	{d16-d17}, [r3]!
   1b348:	adds	r6, r6, #1
   1b34c:	vst1.32	{d16-d17}, [r7]!
   1b350:	bcc	1b344 <__assert_fail@plt+0x9f10>
   1b354:	ldr	r4, [sp, #8]
   1b358:	ldr	sl, [sp, #12]
   1b35c:	ldr	ip, [sp, #20]
   1b360:	cmp	r4, r2
   1b364:	beq	1b3d8 <__assert_fail@plt+0x9fa4>
   1b368:	mvn	r3, r2
   1b36c:	ands	r7, r4, #3
   1b370:	add	r3, r4, r3
   1b374:	beq	1b38c <__assert_fail@plt+0x9f58>
   1b378:	ldr	r6, [r1, r2, lsl #2]
   1b37c:	subs	r7, r7, #1
   1b380:	str	r6, [r0, r2, lsl #2]
   1b384:	add	r2, r2, #1
   1b388:	bne	1b378 <__assert_fail@plt+0x9f44>
   1b38c:	cmp	r3, #3
   1b390:	bcc	1b3d8 <__assert_fail@plt+0x9fa4>
   1b394:	sub	r3, r4, r2
   1b398:	lsl	r2, r2, #2
   1b39c:	mov	r7, r0
   1b3a0:	add	r6, r1, #16
   1b3a4:	ldr	r5, [r1, r2]!
   1b3a8:	add	r4, r7, #16
   1b3ac:	subs	r3, r3, #4
   1b3b0:	str	r5, [r7, r2]!
   1b3b4:	ldr	r5, [r1, #4]
   1b3b8:	str	r5, [r7, #4]
   1b3bc:	ldr	r5, [r1, #8]
   1b3c0:	str	r5, [r7, #8]
   1b3c4:	ldr	r1, [r1, #12]
   1b3c8:	str	r1, [r7, #12]
   1b3cc:	mov	r1, r6
   1b3d0:	mov	r7, r4
   1b3d4:	bne	1b3a0 <__assert_fail@plt+0x9f6c>
   1b3d8:	ldr	r9, [ip, #4]
   1b3dc:	cmp	r9, #0
   1b3e0:	rsb	r1, r9, #0
   1b3e4:	movpl	r1, r9
   1b3e8:	cmp	r1, #0
   1b3ec:	str	r1, [fp, #-36]	; 0xffffffdc
   1b3f0:	ble	1c41c <__assert_fail@plt+0xafe8>
   1b3f4:	ldr	r2, [r0]
   1b3f8:	ldr	r4, [fp, #8]
   1b3fc:	mov	r1, #31
   1b400:	cmp	r2, #0
   1b404:	bne	1b420 <__assert_fail@plt+0x9fec>
   1b408:	add	r0, r0, #4
   1b40c:	mov	r1, #31
   1b410:	ldr	r2, [r0], #4
   1b414:	add	r1, r1, #32
   1b418:	cmp	r2, #0
   1b41c:	beq	1b410 <__assert_fail@plt+0x9fdc>
   1b420:	rsb	r0, r2, #0
   1b424:	and	r2, r2, r0
   1b428:	mov	r0, #0
   1b42c:	cmp	r0, r2, lsr #24
   1b430:	bne	1b448 <__assert_fail@plt+0xa014>
   1b434:	mov	r0, #0
   1b438:	lsl	r2, r2, #8
   1b43c:	add	r0, r0, #8
   1b440:	cmp	r2, #16777216	; 0x1000000
   1b444:	bcc	1b438 <__assert_fail@plt+0xa004>
   1b448:	cmp	r2, #0
   1b44c:	bmi	1b460 <__assert_fail@plt+0xa02c>
   1b450:	lsl	r2, r2, #1
   1b454:	add	r0, r0, #1
   1b458:	cmn	r2, #1
   1b45c:	bgt	1b450 <__assert_fail@plt+0xa01c>
   1b460:	sub	r8, r1, r0
   1b464:	sub	r0, fp, #40	; 0x28
   1b468:	mov	r3, #2
   1b46c:	mov	r1, r0
   1b470:	mov	r2, r8
   1b474:	bl	19038 <__assert_fail@plt+0x7c04>
   1b478:	sub	r0, fp, #52	; 0x34
   1b47c:	cmp	r0, r4
   1b480:	beq	1b59c <__assert_fail@plt+0xa168>
   1b484:	ldr	r5, [r4, #4]
   1b488:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1b48c:	cmp	r5, #0
   1b490:	rsbmi	r5, r5, #0
   1b494:	cmp	r5, r1
   1b498:	ble	1b5a4 <__assert_fail@plt+0xa170>
   1b49c:	cmp	r5, #1
   1b4a0:	mov	r6, r5
   1b4a4:	movle	r6, #1
   1b4a8:	cmp	r1, #0
   1b4ac:	beq	1b5d4 <__assert_fail@plt+0xa1a0>
   1b4b0:	movw	r0, #45352	; 0xb128
   1b4b4:	lsl	r1, r1, #2
   1b4b8:	lsl	r2, r6, #2
   1b4bc:	movt	r0, #4
   1b4c0:	ldr	r3, [r0]
   1b4c4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1b4c8:	blx	r3
   1b4cc:	b	1b5e8 <__assert_fail@plt+0xa1b4>
   1b4d0:	mov	r0, #1
   1b4d4:	cmp	r8, #0
   1b4d8:	asr	r4, r8, #31
   1b4dc:	addgt	r4, r0, r8, asr #31
   1b4e0:	cmp	ip, r2
   1b4e4:	beq	1c1c8 <__assert_fail@plt+0xad94>
   1b4e8:	mov	r9, r2
   1b4ec:	ldr	r2, [ip]
   1b4f0:	cmp	r8, #0
   1b4f4:	str	r1, [sp, #24]
   1b4f8:	rsbmi	r8, r8, #0
   1b4fc:	cmp	r8, r2
   1b500:	ble	1b5b4 <__assert_fail@plt+0xa180>
   1b504:	cmp	r8, #1
   1b508:	mov	r5, r8
   1b50c:	movle	r5, #1
   1b510:	cmp	r2, #0
   1b514:	beq	1c01c <__assert_fail@plt+0xabe8>
   1b518:	movw	r0, #45352	; 0xb128
   1b51c:	lsl	r1, r2, #2
   1b520:	lsl	r2, r5, #2
   1b524:	movt	r0, #4
   1b528:	ldr	r3, [r0]
   1b52c:	ldr	r0, [ip, #8]
   1b530:	blx	r3
   1b534:	b	1c030 <__assert_fail@plt+0xabfc>
   1b538:	mov	r0, #1
   1b53c:	cmp	r9, #0
   1b540:	asr	r8, r9, #31
   1b544:	addgt	r8, r0, r9, asr #31
   1b548:	cmp	ip, r3
   1b54c:	beq	1c3a4 <__assert_fail@plt+0xaf70>
   1b550:	str	r1, [sp, #24]
   1b554:	ldr	r1, [ip]
   1b558:	cmp	r9, #0
   1b55c:	rsbmi	r9, r9, #0
   1b560:	cmp	r9, r1
   1b564:	ble	1b5c4 <__assert_fail@plt+0xa190>
   1b568:	cmp	r9, #1
   1b56c:	mov	r6, r9
   1b570:	movle	r6, #1
   1b574:	cmp	r1, #0
   1b578:	beq	1c1fc <__assert_fail@plt+0xadc8>
   1b57c:	movw	r0, #45352	; 0xb128
   1b580:	lsl	r1, r1, #2
   1b584:	lsl	r2, r6, #2
   1b588:	movt	r0, #4
   1b58c:	ldr	r3, [r0]
   1b590:	ldr	r0, [ip, #8]
   1b594:	blx	r3
   1b598:	b	1c210 <__assert_fail@plt+0xaddc>
   1b59c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1b5a0:	b	1b774 <__assert_fail@plt+0xa340>
   1b5a4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1b5a8:	cmp	r5, #1
   1b5ac:	bge	1b610 <__assert_fail@plt+0xa1dc>
   1b5b0:	b	1b76c <__assert_fail@plt+0xa338>
   1b5b4:	ldr	r0, [ip, #8]
   1b5b8:	cmp	r8, #1
   1b5bc:	bge	1c05c <__assert_fail@plt+0xac28>
   1b5c0:	b	1c1bc <__assert_fail@plt+0xad88>
   1b5c4:	ldr	r0, [ip, #8]
   1b5c8:	cmp	r9, #1
   1b5cc:	bge	1c238 <__assert_fail@plt+0xae04>
   1b5d0:	b	1c398 <__assert_fail@plt+0xaf64>
   1b5d4:	movw	r0, #45348	; 0xb124
   1b5d8:	movt	r0, #4
   1b5dc:	ldr	r1, [r0]
   1b5e0:	lsl	r0, r6, #2
   1b5e4:	blx	r1
   1b5e8:	str	r0, [fp, #-44]	; 0xffffffd4
   1b5ec:	str	r6, [fp, #-52]	; 0xffffffcc
   1b5f0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1b5f4:	cmp	r1, #0
   1b5f8:	rsbmi	r1, r1, #0
   1b5fc:	cmp	r1, r6
   1b600:	movgt	r1, #0
   1b604:	strgt	r1, [fp, #-48]	; 0xffffffd0
   1b608:	cmp	r5, #1
   1b60c:	blt	1b76c <__assert_fail@plt+0xa338>
   1b610:	ldr	r1, [r4, #8]
   1b614:	mov	r2, #0
   1b618:	cmp	r5, #4
   1b61c:	bcc	1b700 <__assert_fail@plt+0xa2cc>
   1b620:	add	r3, r1, r5, lsl #2
   1b624:	cmp	r0, r3
   1b628:	addcc	r3, r0, r5, lsl #2
   1b62c:	cmpcc	r1, r3
   1b630:	bcc	1b700 <__assert_fail@plt+0xa2cc>
   1b634:	bic	r2, r5, #-2147483645	; 0x80000003
   1b638:	mov	r3, #1
   1b63c:	mov	r9, #0
   1b640:	stmib	sp, {r5, r8, sl}
   1b644:	sub	r7, r2, #4
   1b648:	add	r3, r3, r7, lsr #2
   1b64c:	cmp	r7, #12
   1b650:	and	r6, r3, #3
   1b654:	str	r6, [sp, #16]
   1b658:	bcc	1b6c0 <__assert_fail@plt+0xa28c>
   1b65c:	ldr	r7, [sp, #16]
   1b660:	mov	lr, #48	; 0x30
   1b664:	mov	r9, #0
   1b668:	sub	r8, r3, r7
   1b66c:	mov	r3, #0
   1b670:	add	r4, r1, r3
   1b674:	add	r6, r0, r3
   1b678:	add	r3, r3, #64	; 0x40
   1b67c:	subs	r8, r8, #4
   1b680:	add	r9, r9, #16
   1b684:	mov	r7, r4
   1b688:	mov	ip, r6
   1b68c:	add	sl, r4, #16
   1b690:	add	r5, r6, #16
   1b694:	add	r4, r4, #32
   1b698:	vld1.32	{d16-d17}, [r7], lr
   1b69c:	vst1.32	{d16-d17}, [ip], lr
   1b6a0:	vld1.32	{d16-d17}, [sl]
   1b6a4:	vst1.32	{d16-d17}, [r5]
   1b6a8:	vld1.32	{d16-d17}, [r4]
   1b6ac:	add	r4, r6, #32
   1b6b0:	vst1.32	{d16-d17}, [r4]
   1b6b4:	vld1.32	{d16-d17}, [r7]
   1b6b8:	vst1.32	{d16-d17}, [ip]
   1b6bc:	bne	1b670 <__assert_fail@plt+0xa23c>
   1b6c0:	ldr	r6, [sp, #16]
   1b6c4:	cmp	r6, #0
   1b6c8:	beq	1b6e8 <__assert_fail@plt+0xa2b4>
   1b6cc:	add	r3, r1, r9, lsl #2
   1b6d0:	add	r7, r0, r9, lsl #2
   1b6d4:	rsb	r6, r6, #0
   1b6d8:	vld1.32	{d16-d17}, [r3]!
   1b6dc:	adds	r6, r6, #1
   1b6e0:	vst1.32	{d16-d17}, [r7]!
   1b6e4:	bcc	1b6d8 <__assert_fail@plt+0xa2a4>
   1b6e8:	ldr	r5, [sp, #4]
   1b6ec:	ldr	sl, [sp, #12]
   1b6f0:	ldr	r4, [fp, #8]
   1b6f4:	ldr	r8, [sp, #8]
   1b6f8:	cmp	r5, r2
   1b6fc:	beq	1b76c <__assert_fail@plt+0xa338>
   1b700:	mvn	r3, r2
   1b704:	ands	r7, r5, #3
   1b708:	add	r3, r5, r3
   1b70c:	beq	1b724 <__assert_fail@plt+0xa2f0>
   1b710:	ldr	r6, [r1, r2, lsl #2]
   1b714:	subs	r7, r7, #1
   1b718:	str	r6, [r0, r2, lsl #2]
   1b71c:	add	r2, r2, #1
   1b720:	bne	1b710 <__assert_fail@plt+0xa2dc>
   1b724:	cmp	r3, #3
   1b728:	bcc	1b76c <__assert_fail@plt+0xa338>
   1b72c:	sub	r3, r5, r2
   1b730:	lsl	r2, r2, #2
   1b734:	add	r7, r1, #16
   1b738:	ldr	r6, [r1, r2]!
   1b73c:	add	r5, r0, #16
   1b740:	subs	r3, r3, #4
   1b744:	str	r6, [r0, r2]!
   1b748:	ldr	r6, [r1, #4]
   1b74c:	str	r6, [r0, #4]
   1b750:	ldr	r6, [r1, #8]
   1b754:	str	r6, [r0, #8]
   1b758:	ldr	r1, [r1, #12]
   1b75c:	str	r1, [r0, #12]
   1b760:	mov	r1, r7
   1b764:	mov	r0, r5
   1b768:	bne	1b734 <__assert_fail@plt+0xa300>
   1b76c:	ldr	r0, [r4, #4]
   1b770:	str	r0, [fp, #-48]	; 0xffffffd0
   1b774:	cmp	r0, #0
   1b778:	rsbmi	r0, r0, #0
   1b77c:	cmp	r0, #0
   1b780:	str	r0, [fp, #-48]	; 0xffffffd0
   1b784:	ble	1c41c <__assert_fail@plt+0xafe8>
   1b788:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1b78c:	mov	r0, #31
   1b790:	ldr	r1, [r2]
   1b794:	cmp	r1, #0
   1b798:	bne	1b7b4 <__assert_fail@plt+0xa380>
   1b79c:	add	r2, r2, #4
   1b7a0:	mov	r0, #31
   1b7a4:	ldr	r1, [r2], #4
   1b7a8:	add	r0, r0, #32
   1b7ac:	cmp	r1, #0
   1b7b0:	beq	1b7a4 <__assert_fail@plt+0xa370>
   1b7b4:	rsb	r2, r1, #0
   1b7b8:	and	r2, r1, r2
   1b7bc:	mov	r1, #0
   1b7c0:	cmp	r1, r2, lsr #24
   1b7c4:	bne	1b7dc <__assert_fail@plt+0xa3a8>
   1b7c8:	mov	r1, #0
   1b7cc:	lsl	r2, r2, #8
   1b7d0:	add	r1, r1, #8
   1b7d4:	cmp	r2, #16777216	; 0x1000000
   1b7d8:	bcc	1b7cc <__assert_fail@plt+0xa398>
   1b7dc:	cmp	r2, #0
   1b7e0:	bmi	1b7f4 <__assert_fail@plt+0xa3c0>
   1b7e4:	lsl	r2, r2, #1
   1b7e8:	add	r1, r1, #1
   1b7ec:	cmn	r2, #1
   1b7f0:	bgt	1b7e4 <__assert_fail@plt+0xa3b0>
   1b7f4:	sub	r5, r0, r1
   1b7f8:	sub	r0, fp, #52	; 0x34
   1b7fc:	mov	r3, #2
   1b800:	mov	r6, #2
   1b804:	mov	r1, r0
   1b808:	mov	r2, r5
   1b80c:	bl	19038 <__assert_fail@plt+0x7c04>
   1b810:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1b814:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1b818:	cmp	r8, r5
   1b81c:	mov	r0, r8
   1b820:	mov	r8, r5
   1b824:	movcc	r8, r0
   1b828:	sub	r9, r5, r8
   1b82c:	sub	r0, r0, r8
   1b830:	cmp	r2, r1
   1b834:	bge	1b878 <__assert_fail@plt+0xa444>
   1b838:	str	r2, [fp, #-48]	; 0xffffffd0
   1b83c:	str	r1, [fp, #-36]	; 0xffffffdc
   1b840:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1b844:	ldr	r7, [fp, #-44]	; 0xffffffd4
   1b848:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1b84c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b850:	str	r3, [fp, #-40]	; 0xffffffd8
   1b854:	str	r7, [fp, #-32]	; 0xffffffe0
   1b858:	mov	r7, r0
   1b85c:	ldr	r0, [sp, #20]
   1b860:	str	r1, [fp, #-52]	; 0xffffffcc
   1b864:	str	r2, [fp, #-44]	; 0xffffffd4
   1b868:	str	r0, [sp, #16]
   1b86c:	ldr	r0, [sp, #24]
   1b870:	str	r0, [sp, #20]
   1b874:	b	1b898 <__assert_fail@plt+0xa464>
   1b878:	mov	r7, r9
   1b87c:	mov	r9, r0
   1b880:	ldr	r0, [fp, #8]
   1b884:	str	r0, [sp, #16]
   1b888:	ldr	r0, [sp, #20]
   1b88c:	str	sl, [sp, #20]
   1b890:	ldr	sl, [sp, #24]
   1b894:	str	r0, [sp, #32]
   1b898:	str	r6, [sp]
   1b89c:	add	r6, sp, #36	; 0x24
   1b8a0:	sub	r1, fp, #40	; 0x28
   1b8a4:	sub	r3, fp, #52	; 0x34
   1b8a8:	mov	r0, r6
   1b8ac:	mov	r2, r1
   1b8b0:	bl	18468 <__assert_fail@plt+0x7034>
   1b8b4:	mov	r0, r6
   1b8b8:	mov	r1, r6
   1b8bc:	mov	r2, r9
   1b8c0:	bl	17efc <__assert_fail@plt+0x6ac8>
   1b8c4:	ldr	r0, [sp, #64]	; 0x40
   1b8c8:	cmp	r0, #0
   1b8cc:	mov	r1, r0
   1b8d0:	rsbmi	r1, r0, #0
   1b8d4:	cmp	r1, r7, lsr #5
   1b8d8:	ble	1b93c <__assert_fail@plt+0xa508>
   1b8dc:	ldr	r3, [sp, #68]	; 0x44
   1b8e0:	lsr	r5, r7, #5
   1b8e4:	and	r4, r7, #31
   1b8e8:	mov	r1, #1
   1b8ec:	cmn	r0, #1
   1b8f0:	ldr	r6, [r3, r5, lsl #2]
   1b8f4:	and	r1, r1, r6, lsr r4
   1b8f8:	bgt	1b940 <__assert_fail@plt+0xa50c>
   1b8fc:	cmp	r4, #0
   1b900:	rsbne	r2, r4, #32
   1b904:	movne	r4, #0
   1b908:	cmpne	r4, r6, lsl r2
   1b90c:	bne	1b92c <__assert_fail@plt+0xa4f8>
   1b910:	sub	r3, r3, #4
   1b914:	subs	r2, r5, #1
   1b918:	blt	1b940 <__assert_fail@plt+0xa50c>
   1b91c:	ldr	r6, [r3, r5, lsl #2]
   1b920:	mov	r5, r2
   1b924:	cmp	r6, #0
   1b928:	beq	1b914 <__assert_fail@plt+0xa4e0>
   1b92c:	eor	r1, r1, #1
   1b930:	cmp	r1, #0
   1b934:	bne	1b96c <__assert_fail@plt+0xa538>
   1b938:	b	1b948 <__assert_fail@plt+0xa514>
   1b93c:	lsr	r1, r0, #31
   1b940:	cmp	r1, #0
   1b944:	bne	1b96c <__assert_fail@plt+0xa538>
   1b948:	cmp	r0, #0
   1b94c:	bmi	1b960 <__assert_fail@plt+0xa52c>
   1b950:	add	r0, sp, #60	; 0x3c
   1b954:	mov	r1, r7
   1b958:	bl	204ac <__assert_fail@plt+0xf078>
   1b95c:	b	1b96c <__assert_fail@plt+0xa538>
   1b960:	add	r0, sp, #60	; 0x3c
   1b964:	mov	r1, r7
   1b968:	bl	206b8 <__assert_fail@plt+0xf284>
   1b96c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1b970:	str	sl, [sp, #12]
   1b974:	add	sl, r9, r7
   1b978:	cmp	r0, #1
   1b97c:	blt	1bc6c <__assert_fail@plt+0xa838>
   1b980:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b984:	mov	r0, #31
   1b988:	ldr	r1, [r2]
   1b98c:	cmp	r1, #0
   1b990:	bne	1b9ac <__assert_fail@plt+0xa578>
   1b994:	add	r2, r2, #4
   1b998:	mov	r0, #31
   1b99c:	ldr	r1, [r2], #4
   1b9a0:	add	r0, r0, #32
   1b9a4:	cmp	r1, #0
   1b9a8:	beq	1b99c <__assert_fail@plt+0xa568>
   1b9ac:	rsb	r2, r1, #0
   1b9b0:	and	r2, r1, r2
   1b9b4:	mov	r1, #0
   1b9b8:	cmp	r1, r2, lsr #24
   1b9bc:	bne	1b9d4 <__assert_fail@plt+0xa5a0>
   1b9c0:	mov	r1, #0
   1b9c4:	lsl	r2, r2, #8
   1b9c8:	add	r1, r1, #8
   1b9cc:	cmp	r2, #16777216	; 0x1000000
   1b9d0:	bcc	1b9c4 <__assert_fail@plt+0xa590>
   1b9d4:	cmp	r2, #0
   1b9d8:	bmi	1b9ec <__assert_fail@plt+0xa5b8>
   1b9dc:	lsl	r2, r2, #1
   1b9e0:	add	r1, r1, #1
   1b9e4:	cmn	r2, #1
   1b9e8:	bgt	1b9dc <__assert_fail@plt+0xa5a8>
   1b9ec:	sub	r7, r0, r1
   1b9f0:	sub	r6, fp, #40	; 0x28
   1b9f4:	mov	r3, #2
   1b9f8:	mov	r0, r6
   1b9fc:	mov	r1, r6
   1ba00:	mov	r2, r7
   1ba04:	bl	19038 <__assert_fail@plt+0x7c04>
   1ba08:	add	r5, sp, #48	; 0x30
   1ba0c:	add	r1, r7, r9
   1ba10:	mov	r0, r5
   1ba14:	bl	204ac <__assert_fail@plt+0xf078>
   1ba18:	add	sl, r7, sl
   1ba1c:	sub	r9, fp, #64	; 0x40
   1ba20:	add	r4, sp, #60	; 0x3c
   1ba24:	b	1ba64 <__assert_fail@plt+0xa630>
   1ba28:	sub	r7, r0, r1
   1ba2c:	sub	r0, fp, #52	; 0x34
   1ba30:	mov	r3, #2
   1ba34:	mov	r1, r0
   1ba38:	mov	r2, r7
   1ba3c:	bl	19038 <__assert_fail@plt+0x7c04>
   1ba40:	add	r0, sp, #36	; 0x24
   1ba44:	mov	r2, r7
   1ba48:	mov	r1, r0
   1ba4c:	bl	17efc <__assert_fail@plt+0x6ac8>
   1ba50:	mov	r0, r4
   1ba54:	mov	r1, r4
   1ba58:	mov	r2, r7
   1ba5c:	bl	17efc <__assert_fail@plt+0x6ac8>
   1ba60:	add	sl, r7, sl
   1ba64:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1ba68:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1ba6c:	cmp	r0, r1
   1ba70:	bne	1baac <__assert_fail@plt+0xa678>
   1ba74:	cmp	r0, #0
   1ba78:	bmi	1bb5c <__assert_fail@plt+0xa728>
   1ba7c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1ba80:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1ba84:	sub	r1, r1, #4
   1ba88:	sub	r2, r2, #4
   1ba8c:	subs	r3, r0, #1
   1ba90:	blt	1bc78 <__assert_fail@plt+0xa844>
   1ba94:	ldr	r7, [r2, r0, lsl #2]
   1ba98:	ldr	r0, [r1, r0, lsl #2]
   1ba9c:	cmp	r0, r7
   1baa0:	mov	r0, r3
   1baa4:	beq	1ba8c <__assert_fail@plt+0xa658>
   1baa8:	b	1bb8c <__assert_fail@plt+0xa758>
   1baac:	bge	1bb90 <__assert_fail@plt+0xa75c>
   1bab0:	sub	r0, fp, #52	; 0x34
   1bab4:	mov	r2, r6
   1bab8:	mov	r1, r0
   1babc:	bl	179e4 <__assert_fail@plt+0x65b0>
   1bac0:	mov	r0, r5
   1bac4:	mov	r1, r5
   1bac8:	add	r2, sp, #36	; 0x24
   1bacc:	bl	1707c <__assert_fail@plt+0x5c48>
   1bad0:	mov	r0, r9
   1bad4:	mov	r1, r9
   1bad8:	mov	r2, r4
   1badc:	bl	1707c <__assert_fail@plt+0x5c48>
   1bae0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1bae4:	cmp	r0, #0
   1bae8:	ble	1c41c <__assert_fail@plt+0xafe8>
   1baec:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1baf0:	mov	r0, #31
   1baf4:	ldr	r1, [r2]
   1baf8:	cmp	r1, #0
   1bafc:	bne	1bb18 <__assert_fail@plt+0xa6e4>
   1bb00:	add	r2, r2, #4
   1bb04:	mov	r0, #31
   1bb08:	ldr	r1, [r2], #4
   1bb0c:	add	r0, r0, #32
   1bb10:	cmp	r1, #0
   1bb14:	beq	1bb08 <__assert_fail@plt+0xa6d4>
   1bb18:	rsb	r2, r1, #0
   1bb1c:	and	r2, r1, r2
   1bb20:	mov	r1, #0
   1bb24:	cmp	r1, r2, lsr #24
   1bb28:	bne	1bb40 <__assert_fail@plt+0xa70c>
   1bb2c:	mov	r1, #0
   1bb30:	lsl	r2, r2, #8
   1bb34:	add	r1, r1, #8
   1bb38:	cmp	r2, #16777216	; 0x1000000
   1bb3c:	bcc	1bb30 <__assert_fail@plt+0xa6fc>
   1bb40:	cmp	r2, #0
   1bb44:	bmi	1ba28 <__assert_fail@plt+0xa5f4>
   1bb48:	lsl	r2, r2, #1
   1bb4c:	add	r1, r1, #1
   1bb50:	cmn	r2, #1
   1bb54:	bgt	1bb48 <__assert_fail@plt+0xa714>
   1bb58:	b	1ba28 <__assert_fail@plt+0xa5f4>
   1bb5c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1bb60:	rsb	r1, r0, #0
   1bb64:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1bb68:	sub	r0, r0, #4
   1bb6c:	sub	r2, r2, #4
   1bb70:	subs	r3, r1, #1
   1bb74:	blt	1bc78 <__assert_fail@plt+0xa844>
   1bb78:	ldr	r7, [r2, r1, lsl #2]
   1bb7c:	ldr	r1, [r0, r1, lsl #2]
   1bb80:	cmp	r1, r7
   1bb84:	mov	r1, r3
   1bb88:	beq	1bb70 <__assert_fail@plt+0xa73c>
   1bb8c:	bls	1bab0 <__assert_fail@plt+0xa67c>
   1bb90:	mov	r0, r6
   1bb94:	mov	r1, r6
   1bb98:	sub	r2, fp, #52	; 0x34
   1bb9c:	bl	179e4 <__assert_fail@plt+0x65b0>
   1bba0:	add	r0, sp, #36	; 0x24
   1bba4:	mov	r1, r5
   1bba8:	mov	r2, r0
   1bbac:	bl	1707c <__assert_fail@plt+0x5c48>
   1bbb0:	mov	r0, r4
   1bbb4:	mov	r1, r9
   1bbb8:	mov	r2, r4
   1bbbc:	bl	1707c <__assert_fail@plt+0x5c48>
   1bbc0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1bbc4:	cmp	r0, #0
   1bbc8:	ble	1c41c <__assert_fail@plt+0xafe8>
   1bbcc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1bbd0:	mov	r0, #31
   1bbd4:	ldr	r1, [r2]
   1bbd8:	cmp	r1, #0
   1bbdc:	bne	1bbf8 <__assert_fail@plt+0xa7c4>
   1bbe0:	add	r2, r2, #4
   1bbe4:	mov	r0, #31
   1bbe8:	ldr	r1, [r2], #4
   1bbec:	add	r0, r0, #32
   1bbf0:	cmp	r1, #0
   1bbf4:	beq	1bbe8 <__assert_fail@plt+0xa7b4>
   1bbf8:	rsb	r2, r1, #0
   1bbfc:	and	r2, r1, r2
   1bc00:	mov	r1, #0
   1bc04:	cmp	r1, r2, lsr #24
   1bc08:	bne	1bc20 <__assert_fail@plt+0xa7ec>
   1bc0c:	mov	r1, #0
   1bc10:	lsl	r2, r2, #8
   1bc14:	add	r1, r1, #8
   1bc18:	cmp	r2, #16777216	; 0x1000000
   1bc1c:	bcc	1bc10 <__assert_fail@plt+0xa7dc>
   1bc20:	cmp	r2, #0
   1bc24:	bmi	1bc38 <__assert_fail@plt+0xa804>
   1bc28:	lsl	r2, r2, #1
   1bc2c:	add	r1, r1, #1
   1bc30:	cmn	r2, #1
   1bc34:	bgt	1bc28 <__assert_fail@plt+0xa7f4>
   1bc38:	sub	r7, r0, r1
   1bc3c:	mov	r0, r6
   1bc40:	mov	r1, r6
   1bc44:	mov	r3, #2
   1bc48:	mov	r2, r7
   1bc4c:	bl	19038 <__assert_fail@plt+0x7c04>
   1bc50:	mov	r0, r5
   1bc54:	mov	r1, r5
   1bc58:	mov	r2, r7
   1bc5c:	bl	17efc <__assert_fail@plt+0x6ac8>
   1bc60:	mov	r0, r9
   1bc64:	mov	r1, r9
   1bc68:	b	1ba58 <__assert_fail@plt+0xa624>
   1bc6c:	add	r0, sp, #48	; 0x30
   1bc70:	mov	r1, r9
   1bc74:	bl	204ac <__assert_fail@plt+0xf078>
   1bc78:	sub	r5, fp, #52	; 0x34
   1bc7c:	mov	r2, r8
   1bc80:	mov	r0, r5
   1bc84:	mov	r1, r5
   1bc88:	bl	17efc <__assert_fail@plt+0x6ac8>
   1bc8c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1bc90:	ldr	r2, [sp, #16]
   1bc94:	mov	r1, #0
   1bc98:	mov	r3, r5
   1bc9c:	rsb	r6, r0, #0
   1bca0:	mov	r0, #2
   1bca4:	str	r0, [sp]
   1bca8:	add	r0, sp, #60	; 0x3c
   1bcac:	str	r6, [fp, #-60]	; 0xffffffc4
   1bcb0:	bl	18468 <__assert_fail@plt+0x7034>
   1bcb4:	ldr	r2, [sp, #32]
   1bcb8:	cmp	r0, #0
   1bcbc:	bne	1c3f8 <__assert_fail@plt+0xafc4>
   1bcc0:	ldr	r0, [sp, #64]	; 0x40
   1bcc4:	sub	r3, fp, #52	; 0x34
   1bcc8:	mov	r1, #0
   1bccc:	cmp	r0, #0
   1bcd0:	rsbmi	r0, r0, #0
   1bcd4:	str	r0, [sp, #64]	; 0x40
   1bcd8:	mov	r0, #2
   1bcdc:	str	r0, [sp]
   1bce0:	add	r0, sp, #36	; 0x24
   1bce4:	bl	18468 <__assert_fail@plt+0x7034>
   1bce8:	cmp	r0, #0
   1bcec:	bne	1c3f8 <__assert_fail@plt+0xafc4>
   1bcf0:	ldr	r0, [sp, #40]	; 0x28
   1bcf4:	cmp	r0, #0
   1bcf8:	rsbmi	r0, r0, #0
   1bcfc:	cmp	sl, #0
   1bd00:	str	r0, [sp, #40]	; 0x28
   1bd04:	beq	1bde0 <__assert_fail@plt+0xa9ac>
   1bd08:	sub	r4, fp, #64	; 0x40
   1bd0c:	add	r5, sp, #48	; 0x30
   1bd10:	add	r8, sp, #60	; 0x3c
   1bd14:	add	r7, sp, #36	; 0x24
   1bd18:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1bd1c:	cmp	r6, #0
   1bd20:	movwne	r6, #1
   1bd24:	ldr	r0, [r0]
   1bd28:	tst	r0, r6
   1bd2c:	bne	1bd50 <__assert_fail@plt+0xa91c>
   1bd30:	ldr	r1, [sp, #56]	; 0x38
   1bd34:	ldr	r0, [sp, #52]	; 0x34
   1bd38:	ldr	r1, [r1]
   1bd3c:	cmp	r0, #0
   1bd40:	mov	r2, r0
   1bd44:	movwne	r2, #1
   1bd48:	tst	r1, r2
   1bd4c:	beq	1bd7c <__assert_fail@plt+0xa948>
   1bd50:	mov	r0, r4
   1bd54:	mov	r1, r4
   1bd58:	mov	r2, r8
   1bd5c:	bl	179e4 <__assert_fail@plt+0x65b0>
   1bd60:	mov	r0, r5
   1bd64:	mov	r1, r5
   1bd68:	mov	r2, r7
   1bd6c:	bl	1707c <__assert_fail@plt+0x5c48>
   1bd70:	ldr	r1, [sp, #56]	; 0x38
   1bd74:	ldr	r0, [sp, #52]	; 0x34
   1bd78:	ldr	r1, [r1]
   1bd7c:	cmp	r0, #0
   1bd80:	movwne	r0, #1
   1bd84:	tst	r1, r0
   1bd88:	bne	1c3d8 <__assert_fail@plt+0xafa4>
   1bd8c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1bd90:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1bd94:	ldr	r1, [r1]
   1bd98:	cmp	r0, #0
   1bd9c:	movwne	r0, #1
   1bda0:	tst	r1, r0
   1bda4:	bne	1c3d8 <__assert_fail@plt+0xafa4>
   1bda8:	mov	r0, r4
   1bdac:	mov	r1, r4
   1bdb0:	mov	r2, #1
   1bdb4:	mov	r3, #2
   1bdb8:	sub	sl, sl, #1
   1bdbc:	bl	19038 <__assert_fail@plt+0x7c04>
   1bdc0:	mov	r0, r5
   1bdc4:	mov	r1, r5
   1bdc8:	mov	r2, #1
   1bdcc:	mov	r3, #2
   1bdd0:	bl	19038 <__assert_fail@plt+0x7c04>
   1bdd4:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1bdd8:	cmp	sl, #0
   1bddc:	bne	1bd18 <__assert_fail@plt+0xa8e4>
   1bde0:	add	r0, sp, #60	; 0x3c
   1bde4:	sub	r1, fp, #64	; 0x40
   1bde8:	mov	r2, r0
   1bdec:	bl	1707c <__assert_fail@plt+0x5c48>
   1bdf0:	ldr	sl, [sp, #64]	; 0x40
   1bdf4:	cmp	r6, #0
   1bdf8:	ldr	r8, [sp, #68]	; 0x44
   1bdfc:	ldr	r9, [sp, #12]
   1be00:	ldr	r5, [sp, #28]
   1be04:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1be08:	mov	r1, r6
   1be0c:	rsbmi	r1, r6, #0
   1be10:	cmp	sl, #0
   1be14:	mov	r2, sl
   1be18:	rsbmi	r2, sl, #0
   1be1c:	cmp	r1, r2
   1be20:	bne	1be5c <__assert_fail@plt+0xaa28>
   1be24:	sub	r2, r0, #4
   1be28:	sub	r3, r8, #4
   1be2c:	cmp	r1, #1
   1be30:	blt	1be50 <__assert_fail@plt+0xaa1c>
   1be34:	sub	r7, r1, #1
   1be38:	ldr	r4, [r3, r1, lsl #2]
   1be3c:	ldr	r1, [r2, r1, lsl #2]
   1be40:	cmp	r1, r4
   1be44:	mov	r1, r7
   1be48:	beq	1be2c <__assert_fail@plt+0xa9f8>
   1be4c:	bhi	1be60 <__assert_fail@plt+0xaa2c>
   1be50:	mov	r8, r0
   1be54:	mov	sl, r6
   1be58:	b	1be94 <__assert_fail@plt+0xaa60>
   1be5c:	blt	1be50 <__assert_fail@plt+0xaa1c>
   1be60:	str	sl, [fp, #-60]	; 0xffffffc4
   1be64:	str	r8, [fp, #-56]	; 0xffffffc8
   1be68:	str	r6, [sp, #64]	; 0x40
   1be6c:	str	r0, [sp, #68]	; 0x44
   1be70:	add	r2, sp, #36	; 0x24
   1be74:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1be78:	ldr	r1, [sp, #60]	; 0x3c
   1be7c:	str	r0, [sp, #60]	; 0x3c
   1be80:	add	r0, sp, #48	; 0x30
   1be84:	str	r1, [fp, #-64]	; 0xffffffc0
   1be88:	mov	r1, r0
   1be8c:	bl	179e4 <__assert_fail@plt+0x65b0>
   1be90:	ldr	r5, [sp, #28]
   1be94:	ldr	r0, [sp, #32]
   1be98:	ldr	r3, [sp, #20]
   1be9c:	ldr	r0, [r0, #4]
   1bea0:	cmn	r0, #1
   1bea4:	ldr	r0, [sp, #16]
   1bea8:	rsble	sl, sl, #0
   1beac:	strle	sl, [fp, #-60]	; 0xffffffc4
   1beb0:	ldr	r0, [r0, #4]
   1beb4:	cmn	r0, #1
   1beb8:	bgt	1bec8 <__assert_fail@plt+0xaa94>
   1bebc:	ldr	r0, [sp, #52]	; 0x34
   1bec0:	rsb	r0, r0, #0
   1bec4:	str	r0, [sp, #52]	; 0x34
   1bec8:	ldr	r0, [r5, #4]
   1becc:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1bed0:	cmp	r9, #0
   1bed4:	str	r1, [r5, #4]
   1bed8:	str	r0, [fp, #-48]	; 0xffffffd0
   1bedc:	ldr	r0, [r5]
   1bee0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1bee4:	str	r1, [r5]
   1bee8:	str	r0, [fp, #-52]	; 0xffffffcc
   1beec:	ldr	r1, [r5, #8]
   1bef0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1bef4:	str	r2, [r5, #8]
   1bef8:	str	r1, [fp, #-44]	; 0xffffffd4
   1befc:	beq	1bf2c <__assert_fail@plt+0xaaf8>
   1bf00:	ldr	r1, [r9, #4]
   1bf04:	str	sl, [r9, #4]
   1bf08:	str	r1, [fp, #-60]	; 0xffffffc4
   1bf0c:	ldr	r1, [r9]
   1bf10:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1bf14:	str	r2, [r9]
   1bf18:	str	r1, [fp, #-64]	; 0xffffffc0
   1bf1c:	ldr	r1, [r9, #8]
   1bf20:	str	r8, [r9, #8]
   1bf24:	mov	r8, r1
   1bf28:	str	r1, [fp, #-56]	; 0xffffffc8
   1bf2c:	cmp	r3, #0
   1bf30:	beq	1bf64 <__assert_fail@plt+0xab30>
   1bf34:	ldr	r1, [r3, #4]
   1bf38:	ldr	r2, [sp, #52]	; 0x34
   1bf3c:	str	r2, [r3, #4]
   1bf40:	str	r1, [sp, #52]	; 0x34
   1bf44:	ldr	r1, [r3]
   1bf48:	ldr	r2, [sp, #48]	; 0x30
   1bf4c:	str	r2, [r3]
   1bf50:	str	r1, [sp, #48]	; 0x30
   1bf54:	ldr	r1, [r3, #8]
   1bf58:	ldr	r2, [sp, #56]	; 0x38
   1bf5c:	str	r2, [r3, #8]
   1bf60:	str	r1, [sp, #56]	; 0x38
   1bf64:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1bf68:	movw	r5, #45356	; 0xb12c
   1bf6c:	movt	r5, #4
   1bf70:	cmp	r1, #0
   1bf74:	beq	1bf8c <__assert_fail@plt+0xab58>
   1bf78:	ldr	r2, [r5]
   1bf7c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1bf80:	lsl	r1, r1, #2
   1bf84:	blx	r2
   1bf88:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1bf8c:	cmp	r0, #0
   1bf90:	beq	1bfa4 <__assert_fail@plt+0xab70>
   1bf94:	lsl	r1, r0, #2
   1bf98:	ldr	r2, [r5]
   1bf9c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1bfa0:	blx	r2
   1bfa4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1bfa8:	cmp	r0, #0
   1bfac:	beq	1bfc0 <__assert_fail@plt+0xab8c>
   1bfb0:	ldr	r2, [r5]
   1bfb4:	lsl	r1, r0, #2
   1bfb8:	mov	r0, r8
   1bfbc:	blx	r2
   1bfc0:	ldr	r0, [sp, #60]	; 0x3c
   1bfc4:	cmp	r0, #0
   1bfc8:	beq	1bfdc <__assert_fail@plt+0xaba8>
   1bfcc:	lsl	r1, r0, #2
   1bfd0:	ldr	r2, [r5]
   1bfd4:	ldr	r0, [sp, #68]	; 0x44
   1bfd8:	blx	r2
   1bfdc:	ldr	r0, [sp, #48]	; 0x30
   1bfe0:	cmp	r0, #0
   1bfe4:	beq	1bff8 <__assert_fail@plt+0xabc4>
   1bfe8:	lsl	r1, r0, #2
   1bfec:	ldr	r2, [r5]
   1bff0:	ldr	r0, [sp, #56]	; 0x38
   1bff4:	blx	r2
   1bff8:	ldr	r0, [sp, #36]	; 0x24
   1bffc:	cmp	r0, #0
   1c000:	beq	1c3d0 <__assert_fail@plt+0xaf9c>
   1c004:	lsl	r1, r0, #2
   1c008:	ldr	r2, [r5]
   1c00c:	ldr	r0, [sp, #44]	; 0x2c
   1c010:	blx	r2
   1c014:	sub	sp, fp, #28
   1c018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c01c:	movw	r0, #45348	; 0xb124
   1c020:	movt	r0, #4
   1c024:	ldr	r1, [r0]
   1c028:	lsl	r0, r5, #2
   1c02c:	blx	r1
   1c030:	ldr	ip, [sp, #28]
   1c034:	str	r0, [ip, #8]
   1c038:	str	r5, [ip]
   1c03c:	ldr	r1, [ip, #4]
   1c040:	cmp	r1, #0
   1c044:	rsbmi	r1, r1, #0
   1c048:	cmp	r1, r5
   1c04c:	movgt	r1, #0
   1c050:	strgt	r1, [ip, #4]
   1c054:	cmp	r8, #1
   1c058:	blt	1c1bc <__assert_fail@plt+0xad88>
   1c05c:	ldr	r1, [r9, #8]
   1c060:	mov	r2, #0
   1c064:	cmp	r8, #4
   1c068:	bcc	1c150 <__assert_fail@plt+0xad1c>
   1c06c:	add	r3, r1, r8, lsl #2
   1c070:	cmp	r0, r3
   1c074:	addcc	r3, r0, r8, lsl #2
   1c078:	cmpcc	r1, r3
   1c07c:	bcc	1c150 <__assert_fail@plt+0xad1c>
   1c080:	bic	r2, r8, #-2147483645	; 0x80000003
   1c084:	mov	r3, #1
   1c088:	str	sl, [sp, #12]
   1c08c:	mov	sl, #0
   1c090:	str	r4, [sp, #16]
   1c094:	sub	r5, r2, #4
   1c098:	add	r3, r3, r5, lsr #2
   1c09c:	cmp	r5, #12
   1c0a0:	and	r7, r3, #3
   1c0a4:	str	r7, [sp, #20]
   1c0a8:	bcc	1c110 <__assert_fail@plt+0xacdc>
   1c0ac:	ldr	r7, [sp, #20]
   1c0b0:	mov	sl, #0
   1c0b4:	sub	lr, r3, r7
   1c0b8:	mov	r3, #0
   1c0bc:	add	r4, r1, r3
   1c0c0:	mov	r5, #48	; 0x30
   1c0c4:	add	r6, r0, r3
   1c0c8:	add	r3, r3, #64	; 0x40
   1c0cc:	subs	lr, lr, #4
   1c0d0:	add	sl, sl, #16
   1c0d4:	mov	r7, r4
   1c0d8:	mov	ip, r6
   1c0dc:	add	r9, r4, #16
   1c0e0:	add	r4, r4, #32
   1c0e4:	vld1.32	{d16-d17}, [r7], r5
   1c0e8:	vst1.32	{d16-d17}, [ip], r5
   1c0ec:	add	r5, r6, #16
   1c0f0:	vld1.32	{d16-d17}, [r9]
   1c0f4:	vst1.32	{d16-d17}, [r5]
   1c0f8:	vld1.32	{d16-d17}, [r4]
   1c0fc:	add	r4, r6, #32
   1c100:	vst1.32	{d16-d17}, [r4]
   1c104:	vld1.32	{d16-d17}, [r7]
   1c108:	vst1.32	{d16-d17}, [ip]
   1c10c:	bne	1c0bc <__assert_fail@plt+0xac88>
   1c110:	ldr	r7, [sp, #20]
   1c114:	cmp	r7, #0
   1c118:	beq	1c138 <__assert_fail@plt+0xad04>
   1c11c:	add	r3, r1, sl, lsl #2
   1c120:	add	r6, r0, sl, lsl #2
   1c124:	rsb	r5, r7, #0
   1c128:	vld1.32	{d16-d17}, [r3]!
   1c12c:	adds	r5, r5, #1
   1c130:	vst1.32	{d16-d17}, [r6]!
   1c134:	bcc	1c128 <__assert_fail@plt+0xacf4>
   1c138:	ldr	sl, [sp, #12]
   1c13c:	ldr	ip, [sp, #28]
   1c140:	ldr	r9, [fp, #8]
   1c144:	ldr	r4, [sp, #16]
   1c148:	cmp	r8, r2
   1c14c:	beq	1c1bc <__assert_fail@plt+0xad88>
   1c150:	mvn	r3, r2
   1c154:	ands	r6, r8, #3
   1c158:	add	r3, r8, r3
   1c15c:	beq	1c174 <__assert_fail@plt+0xad40>
   1c160:	ldr	r7, [r1, r2, lsl #2]
   1c164:	subs	r6, r6, #1
   1c168:	str	r7, [r0, r2, lsl #2]
   1c16c:	add	r2, r2, #1
   1c170:	bne	1c160 <__assert_fail@plt+0xad2c>
   1c174:	cmp	r3, #3
   1c178:	bcc	1c1bc <__assert_fail@plt+0xad88>
   1c17c:	sub	r3, r8, r2
   1c180:	lsl	r2, r2, #2
   1c184:	add	r7, r1, #16
   1c188:	ldr	r6, [r1, r2]!
   1c18c:	add	r5, r0, #16
   1c190:	subs	r3, r3, #4
   1c194:	str	r6, [r0, r2]!
   1c198:	ldr	r6, [r1, #4]
   1c19c:	str	r6, [r0, #4]
   1c1a0:	ldr	r6, [r1, #8]
   1c1a4:	str	r6, [r0, #8]
   1c1a8:	ldr	r1, [r1, #12]
   1c1ac:	str	r1, [r0, #12]
   1c1b0:	mov	r1, r7
   1c1b4:	mov	r0, r5
   1c1b8:	bne	1c184 <__assert_fail@plt+0xad50>
   1c1bc:	ldr	r8, [r9, #4]
   1c1c0:	ldr	r1, [sp, #24]
   1c1c4:	str	r8, [ip, #4]
   1c1c8:	cmp	r8, #0
   1c1cc:	rsbmi	r8, r8, #0
   1c1d0:	cmp	r1, #0
   1c1d4:	movne	r0, #0
   1c1d8:	str	r8, [ip, #4]
   1c1dc:	strne	r0, [r1, #4]
   1c1e0:	cmp	sl, #0
   1c1e4:	beq	1c3d0 <__assert_fail@plt+0xaf9c>
   1c1e8:	mov	r0, sl
   1c1ec:	mov	r1, r4
   1c1f0:	bl	157e0 <__assert_fail@plt+0x43ac>
   1c1f4:	sub	sp, fp, #28
   1c1f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1fc:	movw	r0, #45348	; 0xb124
   1c200:	movt	r0, #4
   1c204:	ldr	r1, [r0]
   1c208:	lsl	r0, r6, #2
   1c20c:	blx	r1
   1c210:	ldr	ip, [sp, #28]
   1c214:	str	r0, [ip, #8]
   1c218:	str	r6, [ip]
   1c21c:	ldr	r1, [ip, #4]
   1c220:	ldr	r3, [sp, #20]
   1c224:	cmp	r1, #0
   1c228:	rsbmi	r1, r1, #0
   1c22c:	cmp	r1, r6
   1c230:	movgt	r1, #0
   1c234:	strgt	r1, [ip, #4]
   1c238:	ldr	r1, [r3, #8]
   1c23c:	mov	r2, #0
   1c240:	cmp	r9, #4
   1c244:	bcc	1c32c <__assert_fail@plt+0xaef8>
   1c248:	add	r7, r1, r9, lsl #2
   1c24c:	cmp	r0, r7
   1c250:	addcc	r7, r0, r9, lsl #2
   1c254:	cmpcc	r1, r7
   1c258:	bcc	1c32c <__assert_fail@plt+0xaef8>
   1c25c:	bic	r2, r9, #-2147483645	; 0x80000003
   1c260:	mov	r3, #1
   1c264:	str	r8, [sp, #16]
   1c268:	mov	r8, #0
   1c26c:	str	sl, [sp, #12]
   1c270:	sub	r6, r2, #4
   1c274:	add	r3, r3, r6, lsr #2
   1c278:	cmp	r6, #12
   1c27c:	and	r7, r3, #3
   1c280:	str	r7, [sp, #32]
   1c284:	bcc	1c2ec <__assert_fail@plt+0xaeb8>
   1c288:	ldr	r7, [sp, #32]
   1c28c:	mov	r8, #0
   1c290:	sub	lr, r3, r7
   1c294:	mov	r3, #0
   1c298:	add	r4, r1, r3
   1c29c:	mov	r6, #48	; 0x30
   1c2a0:	add	r7, r0, r3
   1c2a4:	add	r3, r3, #64	; 0x40
   1c2a8:	subs	lr, lr, #4
   1c2ac:	add	r8, r8, #16
   1c2b0:	mov	r5, r4
   1c2b4:	mov	ip, r7
   1c2b8:	add	sl, r4, #16
   1c2bc:	add	r4, r4, #32
   1c2c0:	vld1.32	{d16-d17}, [r5], r6
   1c2c4:	vst1.32	{d16-d17}, [ip], r6
   1c2c8:	add	r6, r7, #16
   1c2cc:	vld1.32	{d16-d17}, [sl]
   1c2d0:	vst1.32	{d16-d17}, [r6]
   1c2d4:	vld1.32	{d16-d17}, [r4]
   1c2d8:	add	r4, r7, #32
   1c2dc:	vst1.32	{d16-d17}, [r4]
   1c2e0:	vld1.32	{d16-d17}, [r5]
   1c2e4:	vst1.32	{d16-d17}, [ip]
   1c2e8:	bne	1c298 <__assert_fail@plt+0xae64>
   1c2ec:	ldr	r6, [sp, #32]
   1c2f0:	cmp	r6, #0
   1c2f4:	beq	1c314 <__assert_fail@plt+0xaee0>
   1c2f8:	add	r3, r1, r8, lsl #2
   1c2fc:	add	r7, r0, r8, lsl #2
   1c300:	rsb	r6, r6, #0
   1c304:	vld1.32	{d16-d17}, [r3]!
   1c308:	adds	r6, r6, #1
   1c30c:	vst1.32	{d16-d17}, [r7]!
   1c310:	bcc	1c304 <__assert_fail@plt+0xaed0>
   1c314:	ldr	sl, [sp, #12]
   1c318:	ldr	ip, [sp, #28]
   1c31c:	ldr	r3, [sp, #20]
   1c320:	ldr	r8, [sp, #16]
   1c324:	cmp	r9, r2
   1c328:	beq	1c398 <__assert_fail@plt+0xaf64>
   1c32c:	mvn	r7, r2
   1c330:	add	r5, r9, r7
   1c334:	ands	r7, r9, #3
   1c338:	beq	1c350 <__assert_fail@plt+0xaf1c>
   1c33c:	ldr	r6, [r1, r2, lsl #2]
   1c340:	subs	r7, r7, #1
   1c344:	str	r6, [r0, r2, lsl #2]
   1c348:	add	r2, r2, #1
   1c34c:	bne	1c33c <__assert_fail@plt+0xaf08>
   1c350:	cmp	r5, #3
   1c354:	bcc	1c398 <__assert_fail@plt+0xaf64>
   1c358:	sub	r4, r9, r2
   1c35c:	lsl	r2, r2, #2
   1c360:	add	r7, r1, #16
   1c364:	ldr	r6, [r1, r2]!
   1c368:	add	r5, r0, #16
   1c36c:	subs	r4, r4, #4
   1c370:	str	r6, [r0, r2]!
   1c374:	ldr	r6, [r1, #4]
   1c378:	str	r6, [r0, #4]
   1c37c:	ldr	r6, [r1, #8]
   1c380:	str	r6, [r0, #8]
   1c384:	ldr	r1, [r1, #12]
   1c388:	str	r1, [r0, #12]
   1c38c:	mov	r1, r7
   1c390:	mov	r0, r5
   1c394:	bne	1c360 <__assert_fail@plt+0xaf2c>
   1c398:	ldr	r9, [r3, #4]
   1c39c:	ldr	r1, [sp, #24]
   1c3a0:	str	r9, [ip, #4]
   1c3a4:	cmp	r9, #0
   1c3a8:	rsbmi	r9, r9, #0
   1c3ac:	cmp	r1, #0
   1c3b0:	movne	r0, r1
   1c3b4:	movne	r1, r8
   1c3b8:	str	r9, [ip, #4]
   1c3bc:	blne	157e0 <__assert_fail@plt+0x43ac>
   1c3c0:	cmp	sl, #0
   1c3c4:	beq	1c3d0 <__assert_fail@plt+0xaf9c>
   1c3c8:	mov	r0, #0
   1c3cc:	str	r0, [sl, #4]
   1c3d0:	sub	sp, fp, #28
   1c3d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c3d8:	movw	r0, #38403	; 0x9603
   1c3dc:	movw	r1, #37260	; 0x918c
   1c3e0:	movw	r3, #38438	; 0x9626
   1c3e4:	movw	r2, #2950	; 0xb86
   1c3e8:	movt	r0, #3
   1c3ec:	movt	r1, #3
   1c3f0:	movt	r3, #3
   1c3f4:	bl	11434 <__assert_fail@plt>
   1c3f8:	movw	r0, #38241	; 0x9561
   1c3fc:	movw	r1, #37260	; 0x918c
   1c400:	movw	r3, #38251	; 0x956b
   1c404:	movw	r2, #2521	; 0x9d9
   1c408:	movt	r0, #3
   1c40c:	movt	r1, #3
   1c410:	movt	r3, #3
   1c414:	bl	11434 <__assert_fail@plt>
   1c418:	str	r1, [fp, #-36]	; 0xffffffdc
   1c41c:	movw	r0, #40762	; 0x9f3a
   1c420:	movw	r1, #37260	; 0x918c
   1c424:	movw	r3, #40778	; 0x9f4a
   1c428:	movw	r2, #2723	; 0xaa3
   1c42c:	movt	r0, #3
   1c430:	movt	r1, #3
   1c434:	movt	r3, #3
   1c438:	bl	11434 <__assert_fail@plt>
   1c43c:	push	{r4, r5, r6, sl, fp, lr}
   1c440:	add	fp, sp, #16
   1c444:	ldr	r2, [r0, #4]
   1c448:	cmp	r2, #0
   1c44c:	mov	r3, r2
   1c450:	rsbmi	r3, r2, #0
   1c454:	cmp	r3, r1, lsr #5
   1c458:	ble	1c4b4 <__assert_fail@plt+0xb080>
   1c45c:	ldr	lr, [r0, #8]
   1c460:	lsr	r6, r1, #5
   1c464:	and	r5, r1, #31
   1c468:	mov	r3, #1
   1c46c:	cmn	r2, #1
   1c470:	ldr	r4, [lr, r6, lsl #2]
   1c474:	and	ip, r3, r4, lsr r5
   1c478:	bgt	1c4b8 <__assert_fail@plt+0xb084>
   1c47c:	cmp	r5, #0
   1c480:	rsbne	r3, r5, #32
   1c484:	movne	r5, #0
   1c488:	cmpne	r5, r4, lsl r3
   1c48c:	bne	1c4ac <__assert_fail@plt+0xb078>
   1c490:	sub	r4, lr, #4
   1c494:	subs	r3, r6, #1
   1c498:	blt	1c4b8 <__assert_fail@plt+0xb084>
   1c49c:	ldr	r6, [r4, r6, lsl #2]
   1c4a0:	cmp	r6, #0
   1c4a4:	mov	r6, r3
   1c4a8:	beq	1c494 <__assert_fail@plt+0xb060>
   1c4ac:	eor	ip, ip, #1
   1c4b0:	b	1c4b8 <__assert_fail@plt+0xb084>
   1c4b4:	lsr	ip, r2, #31
   1c4b8:	cmp	ip, #0
   1c4bc:	popne	{r4, r5, r6, sl, fp, pc}
   1c4c0:	cmp	r2, #0
   1c4c4:	bmi	1c4d0 <__assert_fail@plt+0xb09c>
   1c4c8:	pop	{r4, r5, r6, sl, fp, lr}
   1c4cc:	b	204ac <__assert_fail@plt+0xf078>
   1c4d0:	pop	{r4, r5, r6, sl, fp, lr}
   1c4d4:	b	206b8 <__assert_fail@plt+0xf284>
   1c4d8:	push	{r4, r5, r6, r7, fp, lr}
   1c4dc:	add	fp, sp, #16
   1c4e0:	sub	sp, sp, #16
   1c4e4:	mov	r4, r0
   1c4e8:	ldr	r0, [r1, #4]
   1c4ec:	cmp	r0, #0
   1c4f0:	beq	1c598 <__assert_fail@plt+0xb164>
   1c4f4:	ldr	r0, [r2, #4]
   1c4f8:	mov	r5, r2
   1c4fc:	cmp	r0, #0
   1c500:	beq	1c598 <__assert_fail@plt+0xb164>
   1c504:	movw	r0, #37256	; 0x9188
   1c508:	add	r7, sp, #4
   1c50c:	mov	r2, r5
   1c510:	mov	r6, r1
   1c514:	movt	r0, #3
   1c518:	str	r0, [sp, #12]
   1c51c:	mov	r0, #0
   1c520:	str	r0, [sp, #8]
   1c524:	str	r0, [sp, #4]
   1c528:	mov	r0, r7
   1c52c:	bl	1a360 <__assert_fail@plt+0x8f2c>
   1c530:	mov	r0, #2
   1c534:	mov	r1, #0
   1c538:	mov	r2, r6
   1c53c:	mov	r3, r7
   1c540:	str	r0, [sp]
   1c544:	mov	r0, r7
   1c548:	bl	18468 <__assert_fail@plt+0x7034>
   1c54c:	cmp	r0, #0
   1c550:	bne	1c5a8 <__assert_fail@plt+0xb174>
   1c554:	add	r1, sp, #4
   1c558:	mov	r0, r4
   1c55c:	mov	r2, r5
   1c560:	bl	17dd0 <__assert_fail@plt+0x699c>
   1c564:	ldr	r0, [sp, #4]
   1c568:	cmp	r0, #0
   1c56c:	beq	1c588 <__assert_fail@plt+0xb154>
   1c570:	movw	r1, #45356	; 0xb12c
   1c574:	movt	r1, #4
   1c578:	ldr	r2, [r1]
   1c57c:	lsl	r1, r0, #2
   1c580:	ldr	r0, [sp, #12]
   1c584:	blx	r2
   1c588:	ldr	r0, [r4, #4]
   1c58c:	cmp	r0, #0
   1c590:	rsbmi	r0, r0, #0
   1c594:	b	1c59c <__assert_fail@plt+0xb168>
   1c598:	mov	r0, #0
   1c59c:	str	r0, [r4, #4]
   1c5a0:	sub	sp, fp, #16
   1c5a4:	pop	{r4, r5, r6, r7, fp, pc}
   1c5a8:	movw	r0, #38241	; 0x9561
   1c5ac:	movw	r1, #37260	; 0x918c
   1c5b0:	movw	r3, #38251	; 0x956b
   1c5b4:	movw	r2, #2521	; 0x9d9
   1c5b8:	movt	r0, #3
   1c5bc:	movt	r1, #3
   1c5c0:	movt	r3, #3
   1c5c4:	bl	11434 <__assert_fail@plt>
   1c5c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5cc:	add	fp, sp, #28
   1c5d0:	sub	sp, sp, #12
   1c5d4:	mov	r4, r0
   1c5d8:	cmp	r2, #0
   1c5dc:	beq	1c644 <__assert_fail@plt+0xb210>
   1c5e0:	ldr	r0, [r1, #4]
   1c5e4:	mov	r5, r1
   1c5e8:	cmp	r0, #0
   1c5ec:	beq	1c644 <__assert_fail@plt+0xb210>
   1c5f0:	movw	sl, #45348	; 0xb124
   1c5f4:	mov	r7, #1
   1c5f8:	mov	r0, #4
   1c5fc:	mov	r6, r2
   1c600:	movt	sl, #4
   1c604:	str	r7, [sp, #4]
   1c608:	ldr	r1, [sl]
   1c60c:	blx	r1
   1c610:	str	r0, [sp, #8]
   1c614:	str	r7, [sp]
   1c618:	str	r6, [r0]
   1c61c:	mov	r0, sp
   1c620:	mov	r1, r5
   1c624:	mov	r2, r0
   1c628:	bl	1a360 <__assert_fail@plt+0x8f2c>
   1c62c:	ldr	r0, [sp, #4]
   1c630:	cmp	r0, #0
   1c634:	beq	1c64c <__assert_fail@plt+0xb218>
   1c638:	ldr	r0, [sp, #8]
   1c63c:	ldr	r9, [r0]
   1c640:	b	1c650 <__assert_fail@plt+0xb21c>
   1c644:	mov	r0, #0
   1c648:	b	1c704 <__assert_fail@plt+0xb2d0>
   1c64c:	mov	r9, #0
   1c650:	ldr	r0, [sp]
   1c654:	movw	r8, #45356	; 0xb12c
   1c658:	movt	r8, #4
   1c65c:	cmp	r0, #0
   1c660:	beq	1c674 <__assert_fail@plt+0xb240>
   1c664:	lsl	r1, r0, #2
   1c668:	ldr	r2, [r8]
   1c66c:	ldr	r0, [sp, #8]
   1c670:	blx	r2
   1c674:	movw	r0, #37256	; 0x9188
   1c678:	cmp	r9, r6
   1c67c:	movt	r0, #3
   1c680:	str	r0, [sp, #8]
   1c684:	mov	r0, #0
   1c688:	str	r0, [sp, #4]
   1c68c:	str	r0, [sp]
   1c690:	bls	1c6ac <__assert_fail@plt+0xb278>
   1c694:	str	r0, [sp, #4]
   1c698:	mov	r2, sp
   1c69c:	mov	r0, r4
   1c6a0:	mov	r1, r5
   1c6a4:	bl	17dd0 <__assert_fail@plt+0x699c>
   1c6a8:	b	1c6f8 <__assert_fail@plt+0xb2c4>
   1c6ac:	mov	r0, sl
   1c6b0:	mov	sl, #1
   1c6b4:	ldr	r1, [r0]
   1c6b8:	mov	r0, #4
   1c6bc:	str	sl, [sp, #4]
   1c6c0:	blx	r1
   1c6c4:	str	r0, [sp, #8]
   1c6c8:	mov	r7, r0
   1c6cc:	udiv	r0, r6, r9
   1c6d0:	str	sl, [sp]
   1c6d4:	mov	r2, sp
   1c6d8:	mov	r1, r5
   1c6dc:	str	r0, [r7]
   1c6e0:	mov	r0, r4
   1c6e4:	bl	17dd0 <__assert_fail@plt+0x699c>
   1c6e8:	ldr	r2, [r8]
   1c6ec:	mov	r0, r7
   1c6f0:	mov	r1, #4
   1c6f4:	blx	r2
   1c6f8:	ldr	r0, [r4, #4]
   1c6fc:	cmp	r0, #0
   1c700:	rsbmi	r0, r0, #0
   1c704:	str	r0, [r4, #4]
   1c708:	sub	sp, fp, #28
   1c70c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c710:	push	{r4, r5, r6, sl, fp, lr}
   1c714:	add	fp, sp, #16
   1c718:	sub	sp, sp, #32
   1c71c:	mov	r5, r0
   1c720:	ldr	r0, [r1, #4]
   1c724:	mov	r4, #0
   1c728:	cmp	r0, #0
   1c72c:	beq	1c86c <__assert_fail@plt+0xb438>
   1c730:	ldr	r0, [r2, #4]
   1c734:	mov	r3, r1
   1c738:	mov	r6, r2
   1c73c:	cmp	r0, #0
   1c740:	mov	r1, r0
   1c744:	rsbmi	r1, r0, #0
   1c748:	cmp	r1, #1
   1c74c:	bgt	1c768 <__assert_fail@plt+0xb334>
   1c750:	cmp	r0, #0
   1c754:	beq	1c86c <__assert_fail@plt+0xb438>
   1c758:	ldr	r0, [r6, #8]
   1c75c:	ldr	r0, [r0]
   1c760:	cmp	r0, #2
   1c764:	bcc	1c86c <__assert_fail@plt+0xb438>
   1c768:	movw	r0, #37256	; 0x9188
   1c76c:	mov	r4, #0
   1c770:	add	r1, sp, #8
   1c774:	mov	r2, #0
   1c778:	str	r6, [sp]
   1c77c:	movt	r0, #3
   1c780:	str	r0, [sp, #28]
   1c784:	str	r0, [sp, #16]
   1c788:	add	r0, sp, #20
   1c78c:	str	r4, [sp, #24]
   1c790:	str	r4, [sp, #12]
   1c794:	str	r4, [sp, #20]
   1c798:	str	r4, [sp, #8]
   1c79c:	bl	1b188 <__assert_fail@plt+0x9d54>
   1c7a0:	ldr	r0, [sp, #24]
   1c7a4:	cmp	r0, #1
   1c7a8:	bne	1c82c <__assert_fail@plt+0xb3f8>
   1c7ac:	ldr	r0, [sp, #28]
   1c7b0:	ldr	r0, [r0]
   1c7b4:	cmp	r0, #1
   1c7b8:	bne	1c82c <__assert_fail@plt+0xb3f8>
   1c7bc:	ldr	r0, [sp, #12]
   1c7c0:	cmn	r0, #1
   1c7c4:	bgt	1c7f8 <__assert_fail@plt+0xb3c4>
   1c7c8:	ldr	r0, [r6, #4]
   1c7cc:	cmp	r0, #0
   1c7d0:	bmi	1c7e8 <__assert_fail@plt+0xb3b4>
   1c7d4:	add	r0, sp, #8
   1c7d8:	mov	r2, r6
   1c7dc:	mov	r1, r0
   1c7e0:	bl	1707c <__assert_fail@plt+0x5c48>
   1c7e4:	b	1c7f8 <__assert_fail@plt+0xb3c4>
   1c7e8:	add	r0, sp, #8
   1c7ec:	mov	r2, r6
   1c7f0:	mov	r1, r0
   1c7f4:	bl	179e4 <__assert_fail@plt+0x65b0>
   1c7f8:	ldr	r0, [r5, #4]
   1c7fc:	ldr	r1, [sp, #12]
   1c800:	mov	r4, #1
   1c804:	str	r1, [r5, #4]
   1c808:	str	r0, [sp, #12]
   1c80c:	ldr	r0, [r5]
   1c810:	ldr	r1, [sp, #8]
   1c814:	str	r1, [r5]
   1c818:	str	r0, [sp, #8]
   1c81c:	ldr	r0, [r5, #8]
   1c820:	ldr	r1, [sp, #16]
   1c824:	str	r1, [r5, #8]
   1c828:	str	r0, [sp, #16]
   1c82c:	ldr	r0, [sp, #20]
   1c830:	movw	r5, #45356	; 0xb12c
   1c834:	movt	r5, #4
   1c838:	cmp	r0, #0
   1c83c:	beq	1c850 <__assert_fail@plt+0xb41c>
   1c840:	lsl	r1, r0, #2
   1c844:	ldr	r2, [r5]
   1c848:	ldr	r0, [sp, #28]
   1c84c:	blx	r2
   1c850:	ldr	r0, [sp, #8]
   1c854:	cmp	r0, #0
   1c858:	beq	1c86c <__assert_fail@plt+0xb438>
   1c85c:	lsl	r1, r0, #2
   1c860:	ldr	r2, [r5]
   1c864:	ldr	r0, [sp, #16]
   1c868:	blx	r2
   1c86c:	mov	r0, r4
   1c870:	sub	sp, fp, #16
   1c874:	pop	{r4, r5, r6, sl, fp, pc}
   1c878:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c87c:	add	fp, sp, #24
   1c880:	sub	sp, sp, #16
   1c884:	mov	r8, r0
   1c888:	movw	r0, #45348	; 0xb124
   1c88c:	mov	r9, r1
   1c890:	mov	r4, #1
   1c894:	mov	r5, r2
   1c898:	movt	r0, #4
   1c89c:	str	r4, [sp, #8]
   1c8a0:	ldr	r1, [r0]
   1c8a4:	mov	r0, #4
   1c8a8:	blx	r1
   1c8ac:	str	r0, [sp, #12]
   1c8b0:	str	r4, [sp, #4]
   1c8b4:	str	r4, [r0]
   1c8b8:	mov	r4, #-2147483648	; 0x80000000
   1c8bc:	add	r7, sp, #4
   1c8c0:	mov	r6, #0
   1c8c4:	mov	r0, r7
   1c8c8:	mov	r1, r7
   1c8cc:	mov	r2, r7
   1c8d0:	bl	17dd0 <__assert_fail@plt+0x699c>
   1c8d4:	tst	r4, r5
   1c8d8:	movne	r0, r7
   1c8dc:	movne	r1, r7
   1c8e0:	movne	r2, r9
   1c8e4:	blne	17dd0 <__assert_fail@plt+0x699c>
   1c8e8:	lsr	r0, r4, #1
   1c8ec:	cmp	r6, r4, lsr #1
   1c8f0:	mov	r4, r0
   1c8f4:	bne	1c8c4 <__assert_fail@plt+0xb490>
   1c8f8:	ldr	r0, [r8, #4]
   1c8fc:	ldr	r1, [sp, #8]
   1c900:	str	r1, [r8, #4]
   1c904:	str	r0, [sp, #8]
   1c908:	ldr	r1, [r8]
   1c90c:	ldr	r0, [sp, #4]
   1c910:	str	r0, [r8]
   1c914:	str	r1, [sp, #4]
   1c918:	cmp	r1, #0
   1c91c:	ldr	r0, [r8, #8]
   1c920:	ldr	r2, [sp, #12]
   1c924:	str	r2, [r8, #8]
   1c928:	str	r0, [sp, #12]
   1c92c:	beq	1c944 <__assert_fail@plt+0xb510>
   1c930:	movw	r2, #45356	; 0xb12c
   1c934:	lsl	r1, r1, #2
   1c938:	movt	r2, #4
   1c93c:	ldr	r2, [r2]
   1c940:	blx	r2
   1c944:	sub	sp, fp, #24
   1c948:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c94c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c950:	add	fp, sp, #28
   1c954:	sub	sp, sp, #28
   1c958:	movw	r7, #45348	; 0xb124
   1c95c:	mov	sl, r0
   1c960:	movw	r0, #37256	; 0x9188
   1c964:	mov	r6, r2
   1c968:	mov	r9, #0
   1c96c:	cmp	r1, #0
   1c970:	movt	r0, #3
   1c974:	movt	r7, #4
   1c978:	str	r0, [sp, #12]
   1c97c:	str	r9, [sp, #8]
   1c980:	str	r9, [sp, #4]
   1c984:	beq	1c9b0 <__assert_fail@plt+0xb57c>
   1c988:	mov	r4, r1
   1c98c:	ldr	r1, [r7]
   1c990:	mov	r9, #1
   1c994:	mov	r0, #4
   1c998:	str	r9, [sp, #8]
   1c99c:	blx	r1
   1c9a0:	str	r0, [sp, #12]
   1c9a4:	stm	sp, {r0, r9}
   1c9a8:	str	r4, [r0]
   1c9ac:	b	1c9b8 <__assert_fail@plt+0xb584>
   1c9b0:	str	r0, [sp]
   1c9b4:	str	r9, [sp, #8]
   1c9b8:	ldr	r1, [r7]
   1c9bc:	mov	r4, #1
   1c9c0:	mov	r0, #4
   1c9c4:	str	r4, [sp, #20]
   1c9c8:	blx	r1
   1c9cc:	str	r0, [sp, #24]
   1c9d0:	str	r4, [sp, #16]
   1c9d4:	str	r4, [r0]
   1c9d8:	mov	r5, #-2147483648	; 0x80000000
   1c9dc:	add	r7, sp, #16
   1c9e0:	mov	r8, #0
   1c9e4:	add	r4, sp, #4
   1c9e8:	mov	r0, r7
   1c9ec:	mov	r1, r7
   1c9f0:	mov	r2, r7
   1c9f4:	bl	17dd0 <__assert_fail@plt+0x699c>
   1c9f8:	tst	r5, r6
   1c9fc:	movne	r0, r7
   1ca00:	movne	r1, r7
   1ca04:	movne	r2, r4
   1ca08:	blne	17dd0 <__assert_fail@plt+0x699c>
   1ca0c:	lsr	r0, r5, #1
   1ca10:	cmp	r8, r5, lsr #1
   1ca14:	mov	r5, r0
   1ca18:	bne	1c9e8 <__assert_fail@plt+0xb5b4>
   1ca1c:	ldr	r0, [sl, #4]
   1ca20:	ldr	r1, [sp, #20]
   1ca24:	movw	r4, #45356	; 0xb12c
   1ca28:	movt	r4, #4
   1ca2c:	str	r1, [sl, #4]
   1ca30:	str	r0, [sp, #20]
   1ca34:	ldr	r1, [sl]
   1ca38:	ldr	r0, [sp, #16]
   1ca3c:	str	r0, [sl]
   1ca40:	str	r1, [sp, #16]
   1ca44:	cmp	r1, #0
   1ca48:	ldr	r0, [sl, #8]
   1ca4c:	ldr	r2, [sp, #24]
   1ca50:	str	r2, [sl, #8]
   1ca54:	str	r0, [sp, #24]
   1ca58:	beq	1ca68 <__assert_fail@plt+0xb634>
   1ca5c:	ldr	r2, [r4]
   1ca60:	lsl	r1, r1, #2
   1ca64:	blx	r2
   1ca68:	cmp	r9, #0
   1ca6c:	beq	1ca80 <__assert_fail@plt+0xb64c>
   1ca70:	ldr	r2, [r4]
   1ca74:	ldr	r0, [sp]
   1ca78:	lsl	r1, r9, #2
   1ca7c:	blx	r2
   1ca80:	sub	sp, fp, #28
   1ca84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca8c:	add	fp, sp, #28
   1ca90:	sub	sp, sp, #92	; 0x5c
   1ca94:	mov	r5, r0
   1ca98:	ldr	r0, [r3, #4]
   1ca9c:	str	r2, [sp, #36]	; 0x24
   1caa0:	mov	r8, r1
   1caa4:	mov	r4, r3
   1caa8:	cmp	r0, #0
   1caac:	rsbmi	r0, r0, #0
   1cab0:	str	r0, [sp, #48]	; 0x30
   1cab4:	ldr	r0, [sp, #36]	; 0x24
   1cab8:	ldr	r1, [r0, #4]
   1cabc:	ldr	r0, [sp, #48]	; 0x30
   1cac0:	cmp	r1, #0
   1cac4:	rsbmi	r1, r1, #0
   1cac8:	cmp	r0, #0
   1cacc:	beq	1d2c0 <__assert_fail@plt+0xbe8c>
   1cad0:	cmp	r1, #0
   1cad4:	beq	1cbe8 <__assert_fail@plt+0xb7b4>
   1cad8:	str	r5, [sp, #32]
   1cadc:	ldr	r5, [sp, #48]	; 0x30
   1cae0:	str	r1, [sp, #40]	; 0x28
   1cae4:	ldr	r1, [r4, #8]
   1cae8:	add	r0, sp, #52	; 0x34
   1caec:	mov	r2, r5
   1caf0:	str	r1, [sp, #44]	; 0x2c
   1caf4:	bl	1d350 <__assert_fail@plt+0xbf1c>
   1caf8:	ldr	r9, [sp, #52]	; 0x34
   1cafc:	movw	r7, #45348	; 0xb124
   1cb00:	mov	r0, #0
   1cb04:	movt	r7, #4
   1cb08:	cmp	r9, #0
   1cb0c:	beq	1cc04 <__assert_fail@plt+0xb7d0>
   1cb10:	ldr	r1, [r7]
   1cb14:	mov	r0, #0
   1cb18:	str	r0, [sp, #52]	; 0x34
   1cb1c:	lsl	r0, r5, #2
   1cb20:	blx	r1
   1cb24:	cmp	r5, #0
   1cb28:	ble	1d2cc <__assert_fail@plt+0xbe98>
   1cb2c:	cmp	r9, #32
   1cb30:	bcs	1d2e4 <__assert_fail@plt+0xbeb0>
   1cb34:	ldr	r1, [sp, #44]	; 0x2c
   1cb38:	mov	sl, r0
   1cb3c:	add	r0, r0, r5, lsl #2
   1cb40:	rsb	r3, r9, #32
   1cb44:	mov	lr, r7
   1cb48:	add	r6, r1, r5, lsl #2
   1cb4c:	ldr	r1, [r6, #-4]!
   1cb50:	lsl	r2, r1, r9
   1cb54:	lsr	ip, r1, r3
   1cb58:	mov	r1, r5
   1cb5c:	subs	r5, r5, #1
   1cb60:	beq	1cbb8 <__assert_fail@plt+0xb784>
   1cb64:	tst	r1, #1
   1cb68:	bne	1cb80 <__assert_fail@plt+0xb74c>
   1cb6c:	ldr	r5, [r6, #-4]!
   1cb70:	orr	r2, r2, r5, lsr r3
   1cb74:	str	r2, [r0, #-4]!
   1cb78:	lsl	r2, r5, r9
   1cb7c:	sub	r5, r1, #2
   1cb80:	cmp	r1, #2
   1cb84:	beq	1cbb8 <__assert_fail@plt+0xb784>
   1cb88:	sub	r6, r6, #4
   1cb8c:	ldr	r7, [r6]
   1cb90:	subs	r5, r5, #2
   1cb94:	orr	r2, r2, r7, lsr r3
   1cb98:	str	r2, [r0, #-4]
   1cb9c:	ldr	r1, [r6, #-4]
   1cba0:	sub	r6, r6, #8
   1cba4:	lsl	r2, r1, r9
   1cba8:	lsr	r1, r1, r3
   1cbac:	orr	r1, r1, r7, lsl r9
   1cbb0:	str	r1, [r0, #-8]!
   1cbb4:	bne	1cb8c <__assert_fail@plt+0xb758>
   1cbb8:	str	r2, [r0, #-4]
   1cbbc:	cmp	ip, #0
   1cbc0:	mov	ip, sl
   1cbc4:	mov	r7, lr
   1cbc8:	mov	r0, #0
   1cbcc:	str	sl, [sp, #44]	; 0x2c
   1cbd0:	beq	1cc08 <__assert_fail@plt+0xb7d4>
   1cbd4:	movw	r0, #38241	; 0x9561
   1cbd8:	movw	r1, #37260	; 0x918c
   1cbdc:	movw	r3, #38569	; 0x96a9
   1cbe0:	movw	r2, #3116	; 0xc2c
   1cbe4:	b	1d314 <__assert_fail@plt+0xbee0>
   1cbe8:	mov	r0, #1
   1cbec:	str	r0, [r5, #4]
   1cbf0:	ldr	r1, [r5]
   1cbf4:	cmp	r1, #0
   1cbf8:	ble	1ce30 <__assert_fail@plt+0xb9fc>
   1cbfc:	ldr	r0, [r5, #8]
   1cc00:	b	1cf4c <__assert_fail@plt+0xbb18>
   1cc04:	mov	ip, #0
   1cc08:	movw	r1, #37256	; 0x9188
   1cc0c:	str	ip, [sp, #28]
   1cc10:	str	r9, [sp, #24]
   1cc14:	movt	r1, #3
   1cc18:	str	r1, [fp, #-44]	; 0xffffffd4
   1cc1c:	str	r0, [fp, #-48]	; 0xffffffd0
   1cc20:	str	r0, [fp, #-52]	; 0xffffffcc
   1cc24:	ldr	r0, [sp, #36]	; 0x24
   1cc28:	ldr	r0, [r0, #4]
   1cc2c:	cmn	r0, #1
   1cc30:	sub	r0, fp, #52	; 0x34
   1cc34:	ble	1ce04 <__assert_fail@plt+0xb9d0>
   1cc38:	ldr	r5, [sp, #48]	; 0x30
   1cc3c:	cmp	r0, r8
   1cc40:	beq	1ce28 <__assert_fail@plt+0xb9f4>
   1cc44:	ldr	r0, [r8, #4]
   1cc48:	cmp	r0, #0
   1cc4c:	mov	r4, r0
   1cc50:	rsbmi	r4, r0, #0
   1cc54:	cmp	r4, #1
   1cc58:	blt	1ce54 <__assert_fail@plt+0xba20>
   1cc5c:	ldr	r1, [r7]
   1cc60:	lsl	r0, r4, #2
   1cc64:	blx	r1
   1cc68:	str	r0, [fp, #-44]	; 0xffffffd4
   1cc6c:	str	r4, [fp, #-52]	; 0xffffffcc
   1cc70:	mov	r1, r0
   1cc74:	mov	r2, #0
   1cc78:	str	r8, [sp, #20]
   1cc7c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1cc80:	cmp	r0, #0
   1cc84:	rsbmi	r0, r0, #0
   1cc88:	cmp	r0, r4
   1cc8c:	movgt	r0, #0
   1cc90:	strgt	r0, [fp, #-48]	; 0xffffffd0
   1cc94:	cmp	r4, #4
   1cc98:	ldr	r0, [r8, #8]
   1cc9c:	bcc	1cd78 <__assert_fail@plt+0xb944>
   1cca0:	add	r3, r0, r4, lsl #2
   1cca4:	cmp	r1, r3
   1cca8:	bcs	1ccb8 <__assert_fail@plt+0xb884>
   1ccac:	add	r3, r1, r4, lsl #2
   1ccb0:	cmp	r3, r0
   1ccb4:	bhi	1cd78 <__assert_fail@plt+0xb944>
   1ccb8:	bic	r2, r4, #-2147483645	; 0x80000003
   1ccbc:	mov	r3, #1
   1ccc0:	mov	sl, #0
   1ccc4:	str	r4, [sp, #12]
   1ccc8:	sub	r6, r2, #4
   1cccc:	add	r3, r3, r6, lsr #2
   1ccd0:	cmp	r6, #12
   1ccd4:	and	r7, r3, #3
   1ccd8:	str	r7, [sp, #16]
   1ccdc:	bcc	1cd44 <__assert_fail@plt+0xb910>
   1cce0:	ldr	r7, [sp, #16]
   1cce4:	mov	r5, #0
   1cce8:	mov	lr, #48	; 0x30
   1ccec:	mov	sl, #0
   1ccf0:	sub	r6, r3, r7
   1ccf4:	add	r4, r0, r5
   1ccf8:	add	r9, r1, r5
   1ccfc:	add	r5, r5, #64	; 0x40
   1cd00:	subs	r6, r6, #4
   1cd04:	add	sl, sl, #16
   1cd08:	mov	r3, r4
   1cd0c:	mov	ip, r9
   1cd10:	add	r8, r4, #16
   1cd14:	add	r7, r9, #16
   1cd18:	add	r4, r4, #32
   1cd1c:	vld1.32	{d16-d17}, [r3], lr
   1cd20:	vst1.32	{d16-d17}, [ip], lr
   1cd24:	vld1.32	{d16-d17}, [r8]
   1cd28:	vst1.32	{d16-d17}, [r7]
   1cd2c:	vld1.32	{d16-d17}, [r4]
   1cd30:	add	r4, r9, #32
   1cd34:	vst1.32	{d16-d17}, [r4]
   1cd38:	vld1.32	{d16-d17}, [r3]
   1cd3c:	vst1.32	{d16-d17}, [ip]
   1cd40:	bne	1ccf4 <__assert_fail@plt+0xb8c0>
   1cd44:	ldr	r6, [sp, #16]
   1cd48:	cmp	r6, #0
   1cd4c:	beq	1cd6c <__assert_fail@plt+0xb938>
   1cd50:	add	r3, r0, sl, lsl #2
   1cd54:	add	r7, r1, sl, lsl #2
   1cd58:	rsb	r6, r6, #0
   1cd5c:	vld1.32	{d16-d17}, [r3]!
   1cd60:	adds	r6, r6, #1
   1cd64:	vst1.32	{d16-d17}, [r7]!
   1cd68:	bcc	1cd5c <__assert_fail@plt+0xb928>
   1cd6c:	ldr	r4, [sp, #12]
   1cd70:	cmp	r4, r2
   1cd74:	beq	1cde8 <__assert_fail@plt+0xb9b4>
   1cd78:	mvn	r3, r2
   1cd7c:	ands	r7, r4, #3
   1cd80:	add	r3, r4, r3
   1cd84:	beq	1cd9c <__assert_fail@plt+0xb968>
   1cd88:	ldr	r6, [r0, r2, lsl #2]
   1cd8c:	subs	r7, r7, #1
   1cd90:	str	r6, [r1, r2, lsl #2]
   1cd94:	add	r2, r2, #1
   1cd98:	bne	1cd88 <__assert_fail@plt+0xb954>
   1cd9c:	cmp	r3, #3
   1cda0:	bcc	1cde8 <__assert_fail@plt+0xb9b4>
   1cda4:	sub	r3, r4, r2
   1cda8:	lsl	r2, r2, #2
   1cdac:	mov	r7, r1
   1cdb0:	add	r6, r0, #16
   1cdb4:	ldr	r5, [r0, r2]!
   1cdb8:	add	r4, r7, #16
   1cdbc:	subs	r3, r3, #4
   1cdc0:	str	r5, [r7, r2]!
   1cdc4:	ldr	r5, [r0, #4]
   1cdc8:	str	r5, [r7, #4]
   1cdcc:	ldr	r5, [r0, #8]
   1cdd0:	str	r5, [r7, #8]
   1cdd4:	ldr	r0, [r0, #12]
   1cdd8:	str	r0, [r7, #12]
   1cddc:	mov	r0, r6
   1cde0:	mov	r7, r4
   1cde4:	bne	1cdb0 <__assert_fail@plt+0xb97c>
   1cde8:	ldr	r8, [sp, #20]
   1cdec:	ldr	r5, [sp, #48]	; 0x30
   1cdf0:	movw	r7, #45348	; 0xb124
   1cdf4:	movt	r7, #4
   1cdf8:	ldr	r0, [r8, #4]
   1cdfc:	rsb	sl, r0, #0
   1ce00:	b	1ce60 <__assert_fail@plt+0xba2c>
   1ce04:	mov	r1, r8
   1ce08:	mov	r2, r4
   1ce0c:	bl	1c710 <__assert_fail@plt+0xb2dc>
   1ce10:	ldr	r5, [sp, #48]	; 0x30
   1ce14:	cmp	r0, #0
   1ce18:	bne	1d0cc <__assert_fail@plt+0xbc98>
   1ce1c:	movw	r0, #38665	; 0x9709
   1ce20:	movt	r0, #3
   1ce24:	bl	1d324 <__assert_fail@plt+0xbef0>
   1ce28:	mov	sl, #0
   1ce2c:	b	1ce6c <__assert_fail@plt+0xba38>
   1ce30:	beq	1cf14 <__assert_fail@plt+0xbae0>
   1ce34:	movw	r0, #45352	; 0xb128
   1ce38:	lsl	r1, r1, #2
   1ce3c:	mov	r2, #4
   1ce40:	movt	r0, #4
   1ce44:	ldr	r3, [r0]
   1ce48:	ldr	r0, [r5, #8]
   1ce4c:	blx	r3
   1ce50:	b	1cf28 <__assert_fail@plt+0xbaf4>
   1ce54:	movw	r1, #37256	; 0x9188
   1ce58:	rsb	sl, r0, #0
   1ce5c:	movt	r1, #3
   1ce60:	cmp	r0, #0
   1ce64:	str	r0, [fp, #-48]	; 0xffffffd0
   1ce68:	movpl	sl, r0
   1ce6c:	cmp	sl, r5
   1ce70:	str	sl, [fp, #-48]	; 0xffffffd0
   1ce74:	blt	1ce98 <__assert_fail@plt+0xba64>
   1ce78:	ldr	r3, [sp, #44]	; 0x2c
   1ce7c:	add	r0, sp, #52	; 0x34
   1ce80:	mov	r2, sl
   1ce84:	str	r5, [sp]
   1ce88:	str	r0, [sp, #4]
   1ce8c:	mov	r0, #0
   1ce90:	bl	1d5c8 <__assert_fail@plt+0xc194>
   1ce94:	mov	sl, r5
   1ce98:	ldr	r0, [r8, #4]
   1ce9c:	cmp	r0, #0
   1cea0:	bmi	1ceac <__assert_fail@plt+0xba78>
   1cea4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1cea8:	b	1d0a8 <__assert_fail@plt+0xbc74>
   1ceac:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ceb0:	cmp	r5, r1
   1ceb4:	ble	1cee8 <__assert_fail@plt+0xbab4>
   1ceb8:	cmp	r5, #1
   1cebc:	movle	r5, #1
   1cec0:	cmp	r1, #0
   1cec4:	beq	1cf5c <__assert_fail@plt+0xbb28>
   1cec8:	movw	r0, #45352	; 0xb128
   1cecc:	lsl	r1, r1, #2
   1ced0:	lsl	r2, r5, #2
   1ced4:	movt	r0, #4
   1ced8:	ldr	r3, [r0]
   1cedc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1cee0:	blx	r3
   1cee4:	b	1cf68 <__assert_fail@plt+0xbb34>
   1cee8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1ceec:	cmp	r5, sl
   1cef0:	bge	1cf94 <__assert_fail@plt+0xbb60>
   1cef4:	movw	r0, #37338	; 0x91da
   1cef8:	movw	r1, #37260	; 0x918c
   1cefc:	movw	r3, #37478	; 0x9266
   1cf00:	mov	r2, #532	; 0x214
   1cf04:	movt	r0, #3
   1cf08:	movt	r1, #3
   1cf0c:	movt	r3, #3
   1cf10:	bl	11434 <__assert_fail@plt>
   1cf14:	movw	r0, #45348	; 0xb124
   1cf18:	movt	r0, #4
   1cf1c:	ldr	r1, [r0]
   1cf20:	mov	r0, #4
   1cf24:	blx	r1
   1cf28:	mov	r1, #1
   1cf2c:	str	r0, [r5, #8]
   1cf30:	str	r1, [r5]
   1cf34:	ldr	r1, [r5, #4]
   1cf38:	cmp	r1, #0
   1cf3c:	rsbmi	r1, r1, #0
   1cf40:	cmp	r1, #2
   1cf44:	movge	r1, #0
   1cf48:	strge	r1, [r5, #4]
   1cf4c:	mov	r1, #1
   1cf50:	str	r1, [r0]
   1cf54:	sub	sp, fp, #28
   1cf58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf5c:	ldr	r1, [r7]
   1cf60:	lsl	r0, r5, #2
   1cf64:	blx	r1
   1cf68:	str	r0, [fp, #-44]	; 0xffffffd4
   1cf6c:	str	r5, [fp, #-52]	; 0xffffffcc
   1cf70:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1cf74:	cmp	r1, #0
   1cf78:	rsbmi	r1, r1, #0
   1cf7c:	cmp	r1, r5
   1cf80:	ldr	r5, [sp, #48]	; 0x30
   1cf84:	movgt	r1, #0
   1cf88:	strgt	r1, [fp, #-48]	; 0xffffffd0
   1cf8c:	cmp	r5, sl
   1cf90:	blt	1cef4 <__assert_fail@plt+0xbac0>
   1cf94:	mov	ip, r7
   1cf98:	mov	r1, #0
   1cf9c:	cmp	sl, #1
   1cfa0:	blt	1cfe0 <__assert_fail@plt+0xbbac>
   1cfa4:	ldr	r2, [sp, #44]	; 0x2c
   1cfa8:	mov	r3, r0
   1cfac:	mov	r4, sl
   1cfb0:	ldr	r6, [r3]
   1cfb4:	ldr	r7, [r2], #4
   1cfb8:	adds	r5, r6, r1
   1cfbc:	cmp	r7, r5
   1cfc0:	mov	r5, #0
   1cfc4:	movwcc	r5, #1
   1cfc8:	adds	r6, r6, r1
   1cfcc:	sub	r7, r7, r6
   1cfd0:	adc	r1, r5, #0
   1cfd4:	subs	r4, r4, #1
   1cfd8:	str	r7, [r3], #4
   1cfdc:	bne	1cfb0 <__assert_fail@plt+0xbb7c>
   1cfe0:	ldr	r5, [sp, #48]	; 0x30
   1cfe4:	cmp	r5, sl
   1cfe8:	ble	1d008 <__assert_fail@plt+0xbbd4>
   1cfec:	sub	r2, r5, sl
   1cff0:	add	r6, sl, #1
   1cff4:	and	r2, r2, #1
   1cff8:	cmp	r5, r6
   1cffc:	bne	1d010 <__assert_fail@plt+0xbbdc>
   1d000:	mov	r3, #0
   1d004:	b	1d06c <__assert_fail@plt+0xbc38>
   1d008:	mov	r7, ip
   1d00c:	b	1d09c <__assert_fail@plt+0xbc68>
   1d010:	add	r3, sl, r2
   1d014:	add	r7, r0, r6, lsl #2
   1d018:	sub	r3, r3, r5
   1d01c:	ldr	r5, [sp, #44]	; 0x2c
   1d020:	add	r5, r5, r6, lsl #2
   1d024:	mov	r6, #0
   1d028:	ldr	r4, [r5, #-4]
   1d02c:	sub	r6, r6, #2
   1d030:	subs	r1, r4, r1
   1d034:	str	r1, [r7, #-4]
   1d038:	mov	r1, #0
   1d03c:	movwcc	r1, #1
   1d040:	ldr	r4, [r5]
   1d044:	add	r5, r5, #8
   1d048:	subs	r1, r4, r1
   1d04c:	str	r1, [r7]
   1d050:	mov	r1, #0
   1d054:	movwcc	r1, #1
   1d058:	add	r7, r7, #8
   1d05c:	cmp	r3, r6
   1d060:	bne	1d028 <__assert_fail@plt+0xbbf4>
   1d064:	ldr	r5, [sp, #48]	; 0x30
   1d068:	rsb	r3, r6, #0
   1d06c:	mov	r7, ip
   1d070:	cmp	r2, #0
   1d074:	beq	1d09c <__assert_fail@plt+0xbc68>
   1d078:	ldr	r2, [sp, #44]	; 0x2c
   1d07c:	add	r7, r0, sl, lsl #2
   1d080:	add	r2, r2, sl, lsl #2
   1d084:	ldr	r2, [r2, r3, lsl #2]
   1d088:	subs	r1, r2, r1
   1d08c:	str	r1, [r7, r3, lsl #2]
   1d090:	mov	r1, #0
   1d094:	mov	r7, ip
   1d098:	movwcc	r1, #1
   1d09c:	cmp	r1, #0
   1d0a0:	mov	sl, r5
   1d0a4:	bne	1d304 <__assert_fail@plt+0xbed0>
   1d0a8:	sub	r0, r0, #4
   1d0ac:	mov	r1, sl
   1d0b0:	cmp	sl, #1
   1d0b4:	blt	1d0c8 <__assert_fail@plt+0xbc94>
   1d0b8:	ldr	r2, [r0, r1, lsl #2]
   1d0bc:	sub	sl, r1, #1
   1d0c0:	cmp	r2, #0
   1d0c4:	beq	1d0ac <__assert_fail@plt+0xbc78>
   1d0c8:	str	r1, [fp, #-48]	; 0xffffffd0
   1d0cc:	ldr	r1, [r7]
   1d0d0:	mov	r6, #1
   1d0d4:	mov	r0, #4
   1d0d8:	str	r6, [fp, #-36]	; 0xffffffdc
   1d0dc:	blx	r1
   1d0e0:	ldr	r1, [sp, #40]	; 0x28
   1d0e4:	str	r0, [fp, #-32]	; 0xffffffe0
   1d0e8:	str	r6, [fp, #-40]	; 0xffffffd8
   1d0ec:	str	r6, [r0]
   1d0f0:	cmp	r1, #1
   1d0f4:	blt	1d1c8 <__assert_fail@plt+0xbd94>
   1d0f8:	sub	r7, fp, #40	; 0x28
   1d0fc:	mov	r9, #0
   1d100:	sub	r4, fp, #52	; 0x34
   1d104:	b	1d114 <__assert_fail@plt+0xbce0>
   1d108:	ldr	r1, [sp, #40]	; 0x28
   1d10c:	cmp	r1, #1
   1d110:	blt	1d1c8 <__assert_fail@plt+0xbd94>
   1d114:	ldr	r0, [sp, #36]	; 0x24
   1d118:	sub	r1, r1, #1
   1d11c:	mov	r8, #-2147483648	; 0x80000000
   1d120:	str	r1, [sp, #40]	; 0x28
   1d124:	ldr	r0, [r0, #8]
   1d128:	ldr	sl, [r0, r1, lsl #2]
   1d12c:	b	1d144 <__assert_fail@plt+0xbd10>
   1d130:	str	r6, [fp, #-36]	; 0xffffffdc
   1d134:	lsr	r0, r8, #1
   1d138:	cmp	r9, r8, lsr #1
   1d13c:	mov	r8, r0
   1d140:	beq	1d108 <__assert_fail@plt+0xbcd4>
   1d144:	mov	r0, r7
   1d148:	mov	r1, r7
   1d14c:	mov	r2, r7
   1d150:	bl	17dd0 <__assert_fail@plt+0x699c>
   1d154:	tst	r8, sl
   1d158:	movne	r0, r7
   1d15c:	movne	r1, r7
   1d160:	movne	r2, r4
   1d164:	blne	17dd0 <__assert_fail@plt+0x699c>
   1d168:	ldr	r6, [fp, #-36]	; 0xffffffdc
   1d16c:	cmp	r6, r5
   1d170:	ble	1d134 <__assert_fail@plt+0xbd00>
   1d174:	ldr	r0, [sp, #48]	; 0x30
   1d178:	ldr	r5, [fp, #-32]	; 0xffffffe0
   1d17c:	ldr	r3, [sp, #44]	; 0x2c
   1d180:	mov	r2, r6
   1d184:	str	r0, [sp]
   1d188:	add	r0, sp, #52	; 0x34
   1d18c:	mov	r1, r5
   1d190:	str	r0, [sp, #4]
   1d194:	mov	r0, #0
   1d198:	bl	1d5c8 <__assert_fail@plt+0xc194>
   1d19c:	sub	r0, r5, #4
   1d1a0:	ldr	r5, [sp, #48]	; 0x30
   1d1a4:	mov	r1, r5
   1d1a8:	mov	r6, r1
   1d1ac:	cmp	r1, #1
   1d1b0:	blt	1d130 <__assert_fail@plt+0xbcfc>
   1d1b4:	ldr	r2, [r0, r6, lsl #2]
   1d1b8:	sub	r1, r6, #1
   1d1bc:	cmp	r2, #0
   1d1c0:	beq	1d1a8 <__assert_fail@plt+0xbd74>
   1d1c4:	b	1d130 <__assert_fail@plt+0xbcfc>
   1d1c8:	cmp	r6, r5
   1d1cc:	bge	1d1dc <__assert_fail@plt+0xbda8>
   1d1d0:	ldr	r5, [sp, #32]
   1d1d4:	ldr	r3, [sp, #28]
   1d1d8:	b	1d238 <__assert_fail@plt+0xbe04>
   1d1dc:	ldr	r0, [sp, #24]
   1d1e0:	ldr	r4, [fp, #-32]	; 0xffffffe0
   1d1e4:	ldr	r3, [sp, #44]	; 0x2c
   1d1e8:	mov	r2, r6
   1d1ec:	str	r5, [sp]
   1d1f0:	str	r0, [sp, #52]	; 0x34
   1d1f4:	add	r0, sp, #52	; 0x34
   1d1f8:	mov	r1, r4
   1d1fc:	str	r0, [sp, #4]
   1d200:	mov	r0, #0
   1d204:	bl	1d5c8 <__assert_fail@plt+0xc194>
   1d208:	mov	r1, r5
   1d20c:	ldr	r5, [sp, #32]
   1d210:	ldr	r3, [sp, #28]
   1d214:	sub	r0, r4, #4
   1d218:	mov	r6, r1
   1d21c:	cmp	r1, #1
   1d220:	blt	1d234 <__assert_fail@plt+0xbe00>
   1d224:	ldr	r2, [r0, r6, lsl #2]
   1d228:	sub	r1, r6, #1
   1d22c:	cmp	r2, #0
   1d230:	beq	1d218 <__assert_fail@plt+0xbde4>
   1d234:	str	r6, [fp, #-36]	; 0xffffffdc
   1d238:	movw	r4, #45356	; 0xb12c
   1d23c:	cmp	r3, #0
   1d240:	movt	r4, #4
   1d244:	beq	1d25c <__assert_fail@plt+0xbe28>
   1d248:	ldr	r0, [sp, #48]	; 0x30
   1d24c:	ldr	r2, [r4]
   1d250:	lsl	r1, r0, #2
   1d254:	mov	r0, r3
   1d258:	blx	r2
   1d25c:	ldr	r0, [r5, #4]
   1d260:	str	r6, [r5, #4]
   1d264:	str	r0, [fp, #-36]	; 0xffffffdc
   1d268:	ldr	r1, [r5]
   1d26c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1d270:	str	r0, [r5]
   1d274:	str	r1, [fp, #-40]	; 0xffffffd8
   1d278:	cmp	r1, #0
   1d27c:	ldr	r0, [r5, #8]
   1d280:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1d284:	str	r2, [r5, #8]
   1d288:	str	r0, [fp, #-32]	; 0xffffffe0
   1d28c:	beq	1d29c <__assert_fail@plt+0xbe68>
   1d290:	ldr	r2, [r4]
   1d294:	lsl	r1, r1, #2
   1d298:	blx	r2
   1d29c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1d2a0:	cmp	r0, #0
   1d2a4:	beq	1d2b8 <__assert_fail@plt+0xbe84>
   1d2a8:	lsl	r1, r0, #2
   1d2ac:	ldr	r2, [r4]
   1d2b0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1d2b4:	blx	r2
   1d2b8:	sub	sp, fp, #28
   1d2bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2c0:	movw	r0, #38546	; 0x9692
   1d2c4:	movt	r0, #3
   1d2c8:	bl	1d324 <__assert_fail@plt+0xbef0>
   1d2cc:	movw	r0, #37817	; 0x93b9
   1d2d0:	movw	r1, #37260	; 0x918c
   1d2d4:	movw	r3, #37904	; 0x9410
   1d2d8:	movw	r2, #659	; 0x293
   1d2dc:	movt	r0, #3
   1d2e0:	b	1d2f8 <__assert_fail@plt+0xbec4>
   1d2e4:	movw	r0, #37978	; 0x945a
   1d2e8:	movw	r1, #37260	; 0x918c
   1d2ec:	movw	r3, #37904	; 0x9410
   1d2f0:	movw	r2, #661	; 0x295
   1d2f4:	movt	r0, #3
   1d2f8:	movt	r1, #3
   1d2fc:	movt	r3, #3
   1d300:	bl	11434 <__assert_fail@plt>
   1d304:	movw	r0, #38241	; 0x9561
   1d308:	movw	r1, #37260	; 0x918c
   1d30c:	movw	r3, #38569	; 0x96a9
   1d310:	movw	r2, #3145	; 0xc49
   1d314:	movt	r0, #3
   1d318:	movt	r1, #3
   1d31c:	movt	r3, #3
   1d320:	bl	11434 <__assert_fail@plt>
   1d324:	push	{fp, lr}
   1d328:	mov	fp, sp
   1d32c:	mov	r3, r0
   1d330:	movw	r0, #45440	; 0xb180
   1d334:	movw	r2, #43049	; 0xa829
   1d338:	mov	r1, #1
   1d33c:	movt	r0, #4
   1d340:	movt	r2, #3
   1d344:	ldr	r0, [r0]
   1d348:	bl	11398 <__fprintf_chk@plt>
   1d34c:	bl	1141c <abort@plt>
   1d350:	push	{r4, r5, fp, lr}
   1d354:	add	fp, sp, #8
   1d358:	cmp	r2, #0
   1d35c:	ble	1d550 <__assert_fail@plt+0xc11c>
   1d360:	mov	r5, r0
   1d364:	cmp	r2, #2
   1d368:	beq	1d418 <__assert_fail@plt+0xbfe4>
   1d36c:	cmp	r2, #1
   1d370:	bne	1d484 <__assert_fail@plt+0xc050>
   1d374:	ldr	r0, [r1]
   1d378:	cmp	r0, #0
   1d37c:	beq	1d568 <__assert_fail@plt+0xc134>
   1d380:	mov	r2, #0
   1d384:	mov	r1, r0
   1d388:	cmp	r2, r0, lsr #24
   1d38c:	bne	1d3a8 <__assert_fail@plt+0xbf74>
   1d390:	mov	r2, #0
   1d394:	mov	r1, r0
   1d398:	lsl	r1, r1, #8
   1d39c:	add	r2, r2, #8
   1d3a0:	cmp	r1, #16777216	; 0x1000000
   1d3a4:	bcc	1d398 <__assert_fail@plt+0xbf64>
   1d3a8:	cmp	r1, #0
   1d3ac:	bmi	1d3c0 <__assert_fail@plt+0xbf8c>
   1d3b0:	lsl	r1, r1, #1
   1d3b4:	add	r2, r2, #1
   1d3b8:	cmn	r1, #1
   1d3bc:	bgt	1d3b0 <__assert_fail@plt+0xbf7c>
   1d3c0:	lsl	r1, r0, r2
   1d3c4:	str	r2, [r5]
   1d3c8:	mvn	r2, r0, lsl r2
   1d3cc:	movw	ip, #65535	; 0xffff
   1d3d0:	lsr	r4, r1, #16
   1d3d4:	uxth	r3, r1
   1d3d8:	str	r1, [r5, #4]
   1d3dc:	udiv	r0, r2, r4
   1d3e0:	mls	r2, r0, r4, r2
   1d3e4:	mul	r3, r0, r3
   1d3e8:	orr	r2, ip, r2, lsl #16
   1d3ec:	cmp	r2, r3
   1d3f0:	bcs	1d514 <__assert_fail@plt+0xc0e0>
   1d3f4:	add	r2, r2, r1
   1d3f8:	sub	lr, r0, #1
   1d3fc:	cmp	r2, r1
   1d400:	bcc	1d510 <__assert_fail@plt+0xc0dc>
   1d404:	cmp	r2, r3
   1d408:	subcc	r0, r0, #2
   1d40c:	addcc	r2, r2, r1
   1d410:	movcs	r0, lr
   1d414:	b	1d514 <__assert_fail@plt+0xc0e0>
   1d418:	ldr	r0, [r1, #4]
   1d41c:	cmp	r0, #0
   1d420:	beq	1d588 <__assert_fail@plt+0xc154>
   1d424:	ldr	r1, [r1]
   1d428:	mov	r2, #0
   1d42c:	mov	r3, r0
   1d430:	cmp	r2, r0, lsr #24
   1d434:	bne	1d450 <__assert_fail@plt+0xc01c>
   1d438:	mov	r2, #0
   1d43c:	mov	r3, r0
   1d440:	lsl	r3, r3, #8
   1d444:	add	r2, r2, #8
   1d448:	cmp	r3, #16777216	; 0x1000000
   1d44c:	bcc	1d440 <__assert_fail@plt+0xc00c>
   1d450:	cmp	r3, #0
   1d454:	bmi	1d468 <__assert_fail@plt+0xc034>
   1d458:	lsl	r3, r3, #1
   1d45c:	add	r2, r2, #1
   1d460:	cmn	r3, #1
   1d464:	bgt	1d458 <__assert_fail@plt+0xc024>
   1d468:	cmp	r2, #0
   1d46c:	str	r2, [r5]
   1d470:	rsbne	r3, r2, #32
   1d474:	lsrne	r3, r1, r3
   1d478:	lslne	r1, r1, r2
   1d47c:	orrne	r0, r3, r0, lsl r2
   1d480:	b	1d4fc <__assert_fail@plt+0xc0c8>
   1d484:	add	ip, r1, r2, lsl #2
   1d488:	ldr	r0, [ip, #-4]
   1d48c:	cmp	r0, #0
   1d490:	beq	1d5a8 <__assert_fail@plt+0xc174>
   1d494:	ldr	r1, [ip, #-8]
   1d498:	mov	r3, #0
   1d49c:	mov	r2, r0
   1d4a0:	cmp	r3, r0, lsr #24
   1d4a4:	bne	1d4c0 <__assert_fail@plt+0xc08c>
   1d4a8:	mov	r3, #0
   1d4ac:	mov	r2, r0
   1d4b0:	lsl	r2, r2, #8
   1d4b4:	add	r3, r3, #8
   1d4b8:	cmp	r2, #16777216	; 0x1000000
   1d4bc:	bcc	1d4b0 <__assert_fail@plt+0xc07c>
   1d4c0:	cmp	r2, #0
   1d4c4:	bmi	1d4d8 <__assert_fail@plt+0xc0a4>
   1d4c8:	lsl	r2, r2, #1
   1d4cc:	add	r3, r3, #1
   1d4d0:	cmn	r2, #1
   1d4d4:	bgt	1d4c8 <__assert_fail@plt+0xc094>
   1d4d8:	cmp	r3, #0
   1d4dc:	str	r3, [r5]
   1d4e0:	beq	1d4fc <__assert_fail@plt+0xc0c8>
   1d4e4:	rsb	r2, r3, #32
   1d4e8:	lsr	r4, r1, r2
   1d4ec:	orr	r0, r4, r0, lsl r3
   1d4f0:	ldr	r4, [ip, #-12]
   1d4f4:	lsr	r2, r4, r2
   1d4f8:	orr	r1, r2, r1, lsl r3
   1d4fc:	str	r0, [r5, #4]
   1d500:	str	r1, [r5, #8]
   1d504:	bl	14bc8 <__assert_fail@plt+0x3794>
   1d508:	str	r0, [r5, #12]
   1d50c:	pop	{r4, r5, fp, pc}
   1d510:	mov	r0, lr
   1d514:	sub	r2, r2, r3
   1d518:	mov	r4, #1
   1d51c:	lsr	r3, r2, #16
   1d520:	mla	r3, r3, r0, r2
   1d524:	orr	r2, ip, r2, lsl #16
   1d528:	add	r4, r4, r3, lsr #16
   1d52c:	mls	r2, r4, r1, r2
   1d530:	cmp	r2, r3, lsl #16
   1d534:	lsrcs	r4, r3, #16
   1d538:	addcs	r2, r2, r1
   1d53c:	add	r0, r4, r0, lsl #16
   1d540:	cmp	r2, r1
   1d544:	addcs	r0, r0, #1
   1d548:	str	r0, [r5, #12]
   1d54c:	pop	{r4, r5, fp, pc}
   1d550:	movw	r0, #40585	; 0x9e89
   1d554:	movw	r1, #37260	; 0x918c
   1d558:	movw	r3, #40874	; 0x9faa
   1d55c:	mov	r2, #932	; 0x3a4
   1d560:	movt	r0, #3
   1d564:	b	1d5bc <__assert_fail@plt+0xc188>
   1d568:	movw	r0, #41960	; 0xa3e8
   1d56c:	movw	r1, #37260	; 0x918c
   1d570:	movw	r3, #41966	; 0xa3ee
   1d574:	movw	r2, #902	; 0x386
   1d578:	movt	r0, #3
   1d57c:	movt	r1, #3
   1d580:	movt	r3, #3
   1d584:	bl	11434 <__assert_fail@plt>
   1d588:	movw	r0, #40945	; 0x9ff1
   1d58c:	movw	r1, #37260	; 0x918c
   1d590:	movw	r3, #40952	; 0x9ff8
   1d594:	movw	r2, #915	; 0x393
   1d598:	movt	r0, #3
   1d59c:	movt	r1, #3
   1d5a0:	movt	r3, #3
   1d5a4:	bl	11434 <__assert_fail@plt>
   1d5a8:	movw	r0, #40945	; 0x9ff1
   1d5ac:	movw	r1, #37260	; 0x918c
   1d5b0:	movw	r3, #40874	; 0x9faa
   1d5b4:	movw	r2, #945	; 0x3b1
   1d5b8:	movt	r0, #3
   1d5bc:	movt	r1, #3
   1d5c0:	movt	r3, #3
   1d5c4:	bl	11434 <__assert_fail@plt>
   1d5c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5cc:	add	fp, sp, #28
   1d5d0:	sub	sp, sp, #52	; 0x34
   1d5d4:	ldr	r5, [fp, #8]
   1d5d8:	cmp	r5, #0
   1d5dc:	ble	1da58 <__assert_fail@plt+0xc624>
   1d5e0:	cmp	r2, r5
   1d5e4:	blt	1da70 <__assert_fail@plt+0xc63c>
   1d5e8:	ldr	ip, [fp, #12]
   1d5ec:	mov	r4, r1
   1d5f0:	cmp	r5, #2
   1d5f4:	str	r0, [sp, #36]	; 0x24
   1d5f8:	beq	1d61c <__assert_fail@plt+0xc1e8>
   1d5fc:	cmp	r5, #1
   1d600:	bne	1d698 <__assert_fail@plt+0xc264>
   1d604:	mov	r1, r4
   1d608:	mov	r3, ip
   1d60c:	bl	219a8 <__assert_fail@plt+0x10574>
   1d610:	str	r0, [r4]
   1d614:	sub	sp, fp, #28
   1d618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d61c:	cmp	r2, #1
   1d620:	ble	1daa0 <__assert_fail@plt+0xc66c>
   1d624:	ldm	ip, {r0, r1}
   1d628:	str	r1, [fp, #-32]	; 0xffffffe0
   1d62c:	ldr	r1, [ip, #8]
   1d630:	ldr	r9, [ip, #12]
   1d634:	str	r4, [sp, #40]	; 0x28
   1d638:	cmp	r0, #0
   1d63c:	str	r0, [sp, #12]
   1d640:	str	r1, [fp, #-36]	; 0xffffffdc
   1d644:	beq	1d7d4 <__assert_fail@plt+0xc3a0>
   1d648:	cmp	r0, #32
   1d64c:	bcs	1da88 <__assert_fail@plt+0xc654>
   1d650:	add	r6, r4, r2, lsl #2
   1d654:	sub	r8, r2, #1
   1d658:	rsb	ip, r0, #32
   1d65c:	tst	r2, #1
   1d660:	mov	sl, r6
   1d664:	ldr	lr, [sl, #-4]!
   1d668:	lsl	r5, lr, r0
   1d66c:	bne	1d800 <__assert_fail@plt+0xc3cc>
   1d670:	ldr	r1, [r6, #-8]
   1d674:	mov	r3, r6
   1d678:	sub	sl, sl, #4
   1d67c:	orr	r4, r5, r1, lsr ip
   1d680:	lsl	r5, r1, r0
   1d684:	str	r4, [r3, #-4]!
   1d688:	sub	r4, r2, #2
   1d68c:	cmp	r2, #2
   1d690:	bne	1d810 <__assert_fail@plt+0xc3dc>
   1d694:	b	1d844 <__assert_fail@plt+0xc410>
   1d698:	sub	r8, r5, #1
   1d69c:	ldr	r1, [ip, #4]
   1d6a0:	ldr	r7, [r3, r8, lsl #2]
   1d6a4:	cmp	r1, r7
   1d6a8:	bne	1dab8 <__assert_fail@plt+0xc684>
   1d6ac:	add	r7, r3, r5, lsl #2
   1d6b0:	ldr	r6, [r7, #-8]
   1d6b4:	ldr	r7, [ip, #8]
   1d6b8:	cmp	r7, r6
   1d6bc:	bne	1dad0 <__assert_fail@plt+0xc69c>
   1d6c0:	cmp	r1, #0
   1d6c4:	bpl	1dae8 <__assert_fail@plt+0xc6b4>
   1d6c8:	ldr	r9, [ip]
   1d6cc:	cmp	r9, #0
   1d6d0:	beq	1d7e0 <__assert_fail@plt+0xc3ac>
   1d6d4:	cmp	r2, #0
   1d6d8:	ble	1db00 <__assert_fail@plt+0xc6cc>
   1d6dc:	cmp	r9, #32
   1d6e0:	bcs	1da88 <__assert_fail@plt+0xc654>
   1d6e4:	add	r1, r4, r2, lsl #2
   1d6e8:	rsb	sl, r9, #32
   1d6ec:	str	r4, [sp, #40]	; 0x28
   1d6f0:	subs	r6, r2, #1
   1d6f4:	mov	lr, r1
   1d6f8:	ldr	r0, [lr, #-4]!
   1d6fc:	lsl	r4, r0, r9
   1d700:	lsr	r0, r0, sl
   1d704:	str	r0, [fp, #-32]	; 0xffffffe0
   1d708:	beq	1d764 <__assert_fail@plt+0xc330>
   1d70c:	tst	r2, #1
   1d710:	bne	1d72c <__assert_fail@plt+0xc2f8>
   1d714:	ldr	r0, [r1, #-8]
   1d718:	sub	r6, r2, #2
   1d71c:	sub	lr, lr, #4
   1d720:	orr	r4, r4, r0, lsr sl
   1d724:	str	r4, [r1, #-4]!
   1d728:	lsl	r4, r0, r9
   1d72c:	cmp	r2, #2
   1d730:	beq	1d764 <__assert_fail@plt+0xc330>
   1d734:	sub	r7, lr, #4
   1d738:	ldr	r0, [r7]
   1d73c:	subs	r6, r6, #2
   1d740:	orr	r4, r4, r0, lsr sl
   1d744:	str	r4, [r1, #-4]
   1d748:	ldr	r5, [r7, #-4]
   1d74c:	sub	r7, r7, #8
   1d750:	lsl	r4, r5, r9
   1d754:	lsr	r5, r5, sl
   1d758:	orr	r0, r5, r0, lsl r9
   1d75c:	str	r0, [r1, #-8]!
   1d760:	bne	1d738 <__assert_fail@plt+0xc304>
   1d764:	str	r4, [r1, #-4]
   1d768:	ldr	r4, [sp, #40]	; 0x28
   1d76c:	ldr	r5, [fp, #8]
   1d770:	ldr	r0, [ip, #12]
   1d774:	str	r3, [sp]
   1d778:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d77c:	mov	r1, r4
   1d780:	str	r5, [sp, #4]
   1d784:	str	r0, [sp, #8]
   1d788:	ldr	r0, [sp, #36]	; 0x24
   1d78c:	bl	22c54 <__assert_fail@plt+0x11820>
   1d790:	ldr	r0, [r4]
   1d794:	cmp	r8, #0
   1d798:	lsr	r1, r0, r9
   1d79c:	lsl	r0, r0, sl
   1d7a0:	beq	1da08 <__assert_fail@plt+0xc5d4>
   1d7a4:	tst	r5, #1
   1d7a8:	bne	1da10 <__assert_fail@plt+0xc5dc>
   1d7ac:	mov	r2, r4
   1d7b0:	sub	r8, r5, #2
   1d7b4:	ldr	r3, [r2, #4]!
   1d7b8:	orr	r1, r1, r3, lsl sl
   1d7bc:	str	r1, [r4]
   1d7c0:	lsr	r1, r3, r9
   1d7c4:	mov	r4, r2
   1d7c8:	cmp	r5, #2
   1d7cc:	bne	1da18 <__assert_fail@plt+0xc5e4>
   1d7d0:	b	1da44 <__assert_fail@plt+0xc610>
   1d7d4:	sub	r8, r2, #1
   1d7d8:	mov	r6, #0
   1d7dc:	b	1d854 <__assert_fail@plt+0xc420>
   1d7e0:	ldr	r1, [ip, #12]
   1d7e4:	stm	sp, {r3, r5}
   1d7e8:	mov	r3, #0
   1d7ec:	str	r1, [sp, #8]
   1d7f0:	mov	r1, r4
   1d7f4:	bl	22c54 <__assert_fail@plt+0x11820>
   1d7f8:	sub	sp, fp, #28
   1d7fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d800:	mov	r4, r8
   1d804:	mov	r3, r6
   1d808:	cmp	r2, #2
   1d80c:	beq	1d844 <__assert_fail@plt+0xc410>
   1d810:	sub	r1, sl, #4
   1d814:	add	r6, r3, #4
   1d818:	ldr	r3, [r1]
   1d81c:	subs	r4, r4, #2
   1d820:	orr	r5, r5, r3, lsr ip
   1d824:	str	r5, [r6, #-8]!
   1d828:	ldr	r5, [r1, #-4]
   1d82c:	sub	r1, r1, #8
   1d830:	lsr	r7, r5, ip
   1d834:	lsl	r5, r5, r0
   1d838:	orr	r3, r7, r3, lsl r0
   1d83c:	str	r3, [r6, #-4]
   1d840:	bne	1d818 <__assert_fail@plt+0xc3e4>
   1d844:	ldr	r4, [sp, #40]	; 0x28
   1d848:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1d84c:	str	r5, [r6, #-8]
   1d850:	lsr	r6, lr, ip
   1d854:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d858:	ldr	lr, [r4, r8, lsl #2]
   1d85c:	ldr	r8, [fp, #-32]	; 0xffffffe0
   1d860:	sub	sl, r2, #2
   1d864:	rsb	r0, r0, #0
   1d868:	str	r0, [sp, #16]
   1d86c:	lsr	r0, r1, #16
   1d870:	str	r0, [sp, #32]
   1d874:	uxth	r0, r1
   1d878:	str	r0, [sp, #28]
   1d87c:	lsr	r0, r9, #16
   1d880:	str	r0, [sp, #24]
   1d884:	uxth	r0, r9
   1d888:	ldr	r9, [fp, #-36]	; 0xffffffdc
   1d88c:	str	r0, [sp, #20]
   1d890:	b	1d8b0 <__assert_fail@plt+0xc47c>
   1d894:	ldr	r1, [sp, #36]	; 0x24
   1d898:	cmp	r1, #0
   1d89c:	sub	r0, sl, #1
   1d8a0:	strne	ip, [r1, sl, lsl #2]
   1d8a4:	cmp	sl, #0
   1d8a8:	mov	sl, r0
   1d8ac:	ble	1d9c4 <__assert_fail@plt+0xc590>
   1d8b0:	ldr	r2, [sp, #24]
   1d8b4:	uxth	r1, r6
   1d8b8:	ldr	r0, [sp, #20]
   1d8bc:	lsr	r5, r6, #16
   1d8c0:	mul	r3, r1, r2
   1d8c4:	mul	r1, r1, r0
   1d8c8:	mla	r3, r5, r0, r3
   1d8cc:	mul	r0, r5, r0
   1d8d0:	mul	r5, r5, r2
   1d8d4:	ldr	r2, [sp, #32]
   1d8d8:	add	r3, r3, r1, lsr #16
   1d8dc:	pkhbt	r1, r1, r3, lsl #16
   1d8e0:	cmp	r3, r0
   1d8e4:	add	r0, r6, r3, lsr #16
   1d8e8:	ldr	r3, [sp, #28]
   1d8ec:	addcc	r5, r5, #65536	; 0x10000
   1d8f0:	adds	ip, r1, lr
   1d8f4:	adc	r1, r0, r5
   1d8f8:	add	r0, r0, r5
   1d8fc:	ldr	r5, [sp, #40]	; 0x28
   1d900:	lsr	r6, r1, #16
   1d904:	uxth	r7, r1
   1d908:	sbc	r0, r0, #0
   1d90c:	mul	r4, r6, r3
   1d910:	mul	r6, r6, r2
   1d914:	mul	r3, r7, r3
   1d918:	ldr	r5, [r5, sl, lsl #2]
   1d91c:	mla	r4, r7, r2, r4
   1d920:	mul	r7, r7, r2
   1d924:	add	r4, r4, r3, lsr #16
   1d928:	cmp	r4, r7
   1d92c:	sub	r7, lr, r8
   1d930:	pkhbt	r3, r3, r4, lsl #16
   1d934:	addcc	r6, r6, #65536	; 0x10000
   1d938:	cmp	r5, r9
   1d93c:	subcc	r7, r7, #1
   1d940:	mls	r7, r1, r8, r7
   1d944:	sub	r7, r7, r4, lsr #16
   1d948:	sub	r7, r7, r6
   1d94c:	sub	r6, r5, r9
   1d950:	mov	r5, #0
   1d954:	cmp	r6, r3
   1d958:	sub	r3, r6, r3
   1d95c:	subcc	r7, r7, #1
   1d960:	cmp	r7, ip
   1d964:	mvncs	r5, #0
   1d968:	and	r4, r8, r5
   1d96c:	and	r5, r9, r5
   1d970:	adds	lr, r5, r3
   1d974:	adc	r6, r4, r7
   1d978:	cmp	r7, ip
   1d97c:	movcc	r0, r1
   1d980:	cmp	r6, r8
   1d984:	add	ip, r0, #1
   1d988:	bcc	1d894 <__assert_fail@plt+0xc460>
   1d98c:	ldr	r1, [sp, #36]	; 0x24
   1d990:	cmp	lr, r9
   1d994:	bcs	1d9a4 <__assert_fail@plt+0xc570>
   1d998:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d99c:	cmp	r6, r0
   1d9a0:	bls	1d898 <__assert_fail@plt+0xc464>
   1d9a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1d9a8:	ldr	r0, [sp, #16]
   1d9ac:	add	ip, ip, #1
   1d9b0:	cmp	lr, r3
   1d9b4:	sub	lr, lr, r3
   1d9b8:	subcc	r0, r0, #1
   1d9bc:	add	r6, r0, r6
   1d9c0:	b	1d898 <__assert_fail@plt+0xc464>
   1d9c4:	ldr	r2, [sp, #12]
   1d9c8:	cmp	r2, #0
   1d9cc:	beq	1d9f4 <__assert_fail@plt+0xc5c0>
   1d9d0:	rsb	r0, r2, #32
   1d9d4:	mvn	r1, #0
   1d9d8:	tst	lr, r1, lsr r0
   1d9dc:	ldr	r1, [sp, #40]	; 0x28
   1d9e0:	bne	1db20 <__assert_fail@plt+0xc6ec>
   1d9e4:	lsl	r0, r6, r0
   1d9e8:	lsr	r6, r6, r2
   1d9ec:	orr	lr, r0, lr, lsr r2
   1d9f0:	b	1d9f8 <__assert_fail@plt+0xc5c4>
   1d9f4:	ldr	r1, [sp, #40]	; 0x28
   1d9f8:	str	lr, [r1]
   1d9fc:	str	r6, [r1, #4]
   1da00:	sub	sp, fp, #28
   1da04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da08:	mov	r2, r4
   1da0c:	b	1da44 <__assert_fail@plt+0xc610>
   1da10:	cmp	r5, #2
   1da14:	beq	1da44 <__assert_fail@plt+0xc610>
   1da18:	mov	r2, r4
   1da1c:	ldr	r3, [r4, #4]
   1da20:	ldr	r7, [r2, #8]!
   1da24:	subs	r8, r8, #2
   1da28:	orr	r1, r1, r3, lsl sl
   1da2c:	lsl	r6, r7, sl
   1da30:	orr	r3, r6, r3, lsr r9
   1da34:	stm	r4, {r1, r3}
   1da38:	lsr	r1, r7, r9
   1da3c:	mov	r4, r2
   1da40:	bne	1da1c <__assert_fail@plt+0xc5e8>
   1da44:	cmp	r0, #0
   1da48:	str	r1, [r2]
   1da4c:	bne	1db40 <__assert_fail@plt+0xc70c>
   1da50:	sub	sp, fp, #28
   1da54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da58:	movw	r0, #40585	; 0x9e89
   1da5c:	movw	r1, #37260	; 0x918c
   1da60:	movw	r3, #41025	; 0xa041
   1da64:	movw	r2, #1113	; 0x459
   1da68:	movt	r0, #3
   1da6c:	b	1db54 <__assert_fail@plt+0xc720>
   1da70:	movw	r0, #40657	; 0x9ed1
   1da74:	movw	r1, #37260	; 0x918c
   1da78:	movw	r3, #41025	; 0xa041
   1da7c:	movw	r2, #1114	; 0x45a
   1da80:	movt	r0, #3
   1da84:	b	1db54 <__assert_fail@plt+0xc720>
   1da88:	movw	r0, #37978	; 0x945a
   1da8c:	movw	r1, #37260	; 0x918c
   1da90:	movw	r3, #37904	; 0x9410
   1da94:	movw	r2, #661	; 0x295
   1da98:	movt	r0, #3
   1da9c:	b	1db14 <__assert_fail@plt+0xc6e0>
   1daa0:	movw	r0, #41203	; 0xa0f3
   1daa4:	movw	r1, #37260	; 0x918c
   1daa8:	movw	r3, #41211	; 0xa0fb
   1daac:	movw	r2, #1009	; 0x3f1
   1dab0:	movt	r0, #3
   1dab4:	b	1db34 <__assert_fail@plt+0xc700>
   1dab8:	movw	r0, #41129	; 0xa0a9
   1dabc:	movw	r1, #37260	; 0x918c
   1dac0:	movw	r3, #41025	; 0xa041
   1dac4:	movw	r2, #1125	; 0x465
   1dac8:	movt	r0, #3
   1dacc:	b	1db54 <__assert_fail@plt+0xc720>
   1dad0:	movw	r0, #41149	; 0xa0bd
   1dad4:	movw	r1, #37260	; 0x918c
   1dad8:	movw	r3, #41025	; 0xa041
   1dadc:	movw	r2, #1126	; 0x466
   1dae0:	movt	r0, #3
   1dae4:	b	1db54 <__assert_fail@plt+0xc720>
   1dae8:	movw	r0, #41169	; 0xa0d1
   1daec:	movw	r1, #37260	; 0x918c
   1daf0:	movw	r3, #41025	; 0xa041
   1daf4:	movw	r2, #1127	; 0x467
   1daf8:	movt	r0, #3
   1dafc:	b	1db54 <__assert_fail@plt+0xc720>
   1db00:	movw	r0, #37817	; 0x93b9
   1db04:	movw	r1, #37260	; 0x918c
   1db08:	movw	r3, #37904	; 0x9410
   1db0c:	movw	r2, #659	; 0x293
   1db10:	movt	r0, #3
   1db14:	movt	r1, #3
   1db18:	movt	r3, #3
   1db1c:	bl	11434 <__assert_fail@plt>
   1db20:	movw	r0, #41295	; 0xa14f
   1db24:	movw	r1, #37260	; 0x918c
   1db28:	movw	r3, #41211	; 0xa0fb
   1db2c:	movw	r2, #1036	; 0x40c
   1db30:	movt	r0, #3
   1db34:	movt	r1, #3
   1db38:	movt	r3, #3
   1db3c:	bl	11434 <__assert_fail@plt>
   1db40:	movw	r0, #38241	; 0x9561
   1db44:	movw	r1, #37260	; 0x918c
   1db48:	movw	r3, #41025	; 0xa041
   1db4c:	movw	r2, #1138	; 0x472
   1db50:	movt	r0, #3
   1db54:	movt	r1, #3
   1db58:	movt	r3, #3
   1db5c:	bl	11434 <__assert_fail@plt>
   1db60:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1db64:	add	fp, sp, #24
   1db68:	sub	sp, sp, #16
   1db6c:	mov	r6, r0
   1db70:	movw	r0, #37256	; 0x9188
   1db74:	mov	r8, r3
   1db78:	mov	r5, r1
   1db7c:	cmp	r2, #0
   1db80:	movt	r0, #3
   1db84:	str	r0, [sp, #12]
   1db88:	mov	r0, #0
   1db8c:	str	r0, [sp, #8]
   1db90:	str	r0, [sp, #4]
   1db94:	beq	1dbfc <__assert_fail@plt+0xc7c8>
   1db98:	movw	r0, #45348	; 0xb124
   1db9c:	mov	r9, #1
   1dba0:	mov	r7, r2
   1dba4:	movt	r0, #4
   1dba8:	str	r9, [sp, #8]
   1dbac:	ldr	r1, [r0]
   1dbb0:	mov	r0, #4
   1dbb4:	blx	r1
   1dbb8:	str	r0, [sp, #12]
   1dbbc:	str	r9, [sp, #4]
   1dbc0:	mov	r4, r0
   1dbc4:	str	r7, [r0]
   1dbc8:	add	r2, sp, #4
   1dbcc:	mov	r0, r6
   1dbd0:	mov	r1, r5
   1dbd4:	mov	r3, r8
   1dbd8:	bl	1ca88 <__assert_fail@plt+0xb654>
   1dbdc:	movw	r0, #45356	; 0xb12c
   1dbe0:	mov	r1, #4
   1dbe4:	movt	r0, #4
   1dbe8:	ldr	r2, [r0]
   1dbec:	mov	r0, r4
   1dbf0:	blx	r2
   1dbf4:	sub	sp, fp, #24
   1dbf8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1dbfc:	str	r0, [sp, #8]
   1dc00:	add	r2, sp, #4
   1dc04:	mov	r0, r6
   1dc08:	mov	r1, r5
   1dc0c:	mov	r3, r8
   1dc10:	bl	1ca88 <__assert_fail@plt+0xb654>
   1dc14:	sub	sp, fp, #24
   1dc18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1dc1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc20:	add	fp, sp, #28
   1dc24:	sub	sp, sp, #76	; 0x4c
   1dc28:	ldr	r5, [r2, #4]
   1dc2c:	mov	r9, r0
   1dc30:	mvn	r0, r3
   1dc34:	str	r2, [sp, #24]
   1dc38:	tst	r0, r5, lsr #31
   1dc3c:	bne	1e470 <__assert_fail@plt+0xd03c>
   1dc40:	cmp	r3, #0
   1dc44:	str	r3, [sp, #12]
   1dc48:	beq	1e47c <__assert_fail@plt+0xd048>
   1dc4c:	cmp	r5, #0
   1dc50:	mov	r8, r5
   1dc54:	mov	sl, r1
   1dc58:	rsbmi	r8, r5, #0
   1dc5c:	cmp	r8, #1
   1dc60:	bgt	1dc9c <__assert_fail@plt+0xc868>
   1dc64:	cmp	r5, #0
   1dc68:	beq	1dc80 <__assert_fail@plt+0xc84c>
   1dc6c:	ldr	r0, [sp, #24]
   1dc70:	ldr	r0, [r0, #8]
   1dc74:	ldr	r0, [r0]
   1dc78:	cmp	r0, #1
   1dc7c:	bhi	1dc9c <__assert_fail@plt+0xc868>
   1dc80:	cmp	r9, #0
   1dc84:	ldrne	r0, [sp, #24]
   1dc88:	cmpne	r9, r0
   1dc8c:	bne	1e26c <__assert_fail@plt+0xce38>
   1dc90:	cmp	sl, #0
   1dc94:	bne	1e460 <__assert_fail@plt+0xd02c>
   1dc98:	b	1e250 <__assert_fail@plt+0xce1c>
   1dc9c:	movw	r1, #37256	; 0x9188
   1dca0:	mov	r0, #0
   1dca4:	cmp	r8, #0
   1dca8:	movt	r1, #3
   1dcac:	str	r1, [sp, #48]	; 0x30
   1dcb0:	str	r0, [sp, #44]	; 0x2c
   1dcb4:	str	r1, [sp, #60]	; 0x3c
   1dcb8:	str	r0, [sp, #56]	; 0x38
   1dcbc:	str	r0, [sp, #40]	; 0x28
   1dcc0:	str	r0, [sp, #52]	; 0x34
   1dcc4:	beq	1dd24 <__assert_fail@plt+0xc8f0>
   1dcc8:	ldr	r0, [sp, #24]
   1dccc:	sub	r2, r8, #1
   1dcd0:	ldr	r0, [r0, #8]
   1dcd4:	ldr	r0, [r0, r2, lsl #2]
   1dcd8:	cmp	r0, #0
   1dcdc:	beq	1e488 <__assert_fail@plt+0xd054>
   1dce0:	mov	r1, #0
   1dce4:	cmp	r1, r0, lsr #24
   1dce8:	bne	1dd00 <__assert_fail@plt+0xc8cc>
   1dcec:	mov	r1, #0
   1dcf0:	lsl	r0, r0, #8
   1dcf4:	add	r1, r1, #8
   1dcf8:	cmp	r0, #16777216	; 0x1000000
   1dcfc:	bcc	1dcf0 <__assert_fail@plt+0xc8bc>
   1dd00:	lsl	r2, r2, #5
   1dd04:	cmp	r0, #0
   1dd08:	bmi	1dd1c <__assert_fail@plt+0xc8e8>
   1dd0c:	lsl	r0, r0, #1
   1dd10:	add	r1, r1, #1
   1dd14:	cmn	r0, #1
   1dd18:	bgt	1dd0c <__assert_fail@plt+0xc8d8>
   1dd1c:	orr	r0, r2, #31
   1dd20:	sub	r0, r0, r1
   1dd24:	ldr	r4, [sp, #12]
   1dd28:	udiv	r0, r0, r4
   1dd2c:	add	r1, r0, #1
   1dd30:	add	r0, sp, #52	; 0x34
   1dd34:	bl	204ac <__assert_fail@plt+0xf078>
   1dd38:	cmp	r4, #2
   1dd3c:	str	r9, [sp, #4]
   1dd40:	bne	1de4c <__assert_fail@plt+0xca18>
   1dd44:	ldr	r1, [sp, #56]	; 0x38
   1dd48:	ldr	r0, [sp, #60]	; 0x3c
   1dd4c:	movw	r2, #37256	; 0x9188
   1dd50:	mov	r3, #0
   1dd54:	mov	r8, #2
   1dd58:	add	r4, sp, #52	; 0x34
   1dd5c:	add	r9, sp, #40	; 0x28
   1dd60:	mov	r7, #0
   1dd64:	movt	r2, #3
   1dd68:	b	1dd7c <__assert_fail@plt+0xc948>
   1dd6c:	ldr	r3, [sp, #20]
   1dd70:	mov	r2, lr
   1dd74:	mov	r7, r6
   1dd78:	bge	1e0f8 <__assert_fail@plt+0xccc4>
   1dd7c:	str	r7, [sp, #56]	; 0x38
   1dd80:	str	r1, [sp, #44]	; 0x2c
   1dd84:	mov	r6, r1
   1dd88:	mov	r5, r0
   1dd8c:	str	r0, [sp, #48]	; 0x30
   1dd90:	mov	r0, r4
   1dd94:	str	r8, [sp]
   1dd98:	ldr	r1, [sp, #52]	; 0x34
   1dd9c:	str	r3, [sp, #52]	; 0x34
   1dda0:	str	r2, [sp, #60]	; 0x3c
   1dda4:	ldr	r2, [sp, #24]
   1dda8:	mov	r3, r9
   1ddac:	str	r1, [sp, #20]
   1ddb0:	str	r1, [sp, #40]	; 0x28
   1ddb4:	mov	r1, #0
   1ddb8:	bl	18468 <__assert_fail@plt+0x7034>
   1ddbc:	mov	r0, r4
   1ddc0:	mov	r1, r4
   1ddc4:	mov	r2, r9
   1ddc8:	bl	1707c <__assert_fail@plt+0x5c48>
   1ddcc:	mov	r0, r4
   1ddd0:	mov	r1, r4
   1ddd4:	mov	r2, #1
   1ddd8:	mov	r3, #2
   1dddc:	bl	19038 <__assert_fail@plt+0x7c04>
   1dde0:	ldr	r1, [sp, #56]	; 0x38
   1dde4:	cmp	r6, #0
   1dde8:	ldr	r0, [sp, #60]	; 0x3c
   1ddec:	mov	r3, r6
   1ddf0:	mov	lr, r5
   1ddf4:	rsbmi	r3, r6, #0
   1ddf8:	cmp	r1, #0
   1ddfc:	mov	r2, r1
   1de00:	rsbmi	r2, r1, #0
   1de04:	cmp	r2, r3
   1de08:	bne	1dd6c <__assert_fail@plt+0xc938>
   1de0c:	mov	ip, r6
   1de10:	sub	r3, r0, #4
   1de14:	sub	r7, lr, #4
   1de18:	subs	r6, r2, #1
   1de1c:	blt	1e0f4 <__assert_fail@plt+0xccc0>
   1de20:	ldr	r5, [r7, r2, lsl #2]
   1de24:	ldr	r2, [r3, r2, lsl #2]
   1de28:	cmp	r2, r5
   1de2c:	mov	r2, r6
   1de30:	beq	1de18 <__assert_fail@plt+0xc9e4>
   1de34:	ldr	r3, [sp, #20]
   1de38:	mov	r2, lr
   1de3c:	mov	r6, ip
   1de40:	mov	r7, ip
   1de44:	bls	1dd7c <__assert_fail@plt+0xc948>
   1de48:	b	1e0f8 <__assert_fail@plt+0xccc4>
   1de4c:	movw	r0, #37256	; 0x9188
   1de50:	cmn	r5, #1
   1de54:	ldr	r1, [sp, #12]
   1de58:	movw	r2, #37256	; 0x9188
   1de5c:	mov	r4, #0
   1de60:	sub	r5, fp, #40	; 0x28
   1de64:	add	r8, sp, #40	; 0x28
   1de68:	mov	r3, #0
   1de6c:	mov	r7, #0
   1de70:	movt	r0, #3
   1de74:	movt	r2, #3
   1de78:	str	r0, [sp, #36]	; 0x24
   1de7c:	ldr	r0, [sp, #56]	; 0x38
   1de80:	str	r4, [sp, #32]
   1de84:	str	r4, [sp, #28]
   1de88:	sub	r9, r1, #1
   1de8c:	rsble	r0, r0, #0
   1de90:	strle	r0, [sp, #56]	; 0x38
   1de94:	ldr	ip, [sp, #60]	; 0x3c
   1de98:	b	1dea8 <__assert_fail@plt+0xca74>
   1de9c:	ldr	r3, [sp, #20]
   1dea0:	mov	r2, lr
   1dea4:	bge	1e0c4 <__assert_fail@plt+0xcc90>
   1dea8:	str	r7, [sp, #56]	; 0x38
   1deac:	str	r0, [sp, #44]	; 0x2c
   1deb0:	str	r0, [sp, #16]
   1deb4:	str	ip, [sp, #48]	; 0x30
   1deb8:	mov	r6, #1
   1debc:	str	ip, [sp, #8]
   1dec0:	ldr	r0, [sp, #52]	; 0x34
   1dec4:	str	r3, [sp, #52]	; 0x34
   1dec8:	str	r2, [sp, #60]	; 0x3c
   1decc:	str	r6, [fp, #-36]	; 0xffffffdc
   1ded0:	str	r0, [sp, #20]
   1ded4:	str	r0, [sp, #40]	; 0x28
   1ded8:	movw	r0, #45348	; 0xb124
   1dedc:	movt	r0, #4
   1dee0:	ldr	r1, [r0]
   1dee4:	mov	r0, #4
   1dee8:	blx	r1
   1deec:	str	r0, [fp, #-32]	; 0xffffffe0
   1def0:	str	r6, [fp, #-40]	; 0xffffffd8
   1def4:	str	r6, [r0]
   1def8:	mov	r6, #-2147483648	; 0x80000000
   1defc:	mov	r0, r5
   1df00:	mov	r1, r5
   1df04:	mov	r2, r5
   1df08:	bl	17dd0 <__assert_fail@plt+0x699c>
   1df0c:	tst	r6, r9
   1df10:	movne	r0, r5
   1df14:	movne	r1, r5
   1df18:	movne	r2, r8
   1df1c:	blne	17dd0 <__assert_fail@plt+0x699c>
   1df20:	lsr	r0, r6, #1
   1df24:	cmp	r4, r6, lsr #1
   1df28:	mov	r6, r0
   1df2c:	bne	1defc <__assert_fail@plt+0xcac8>
   1df30:	ldr	r1, [sp, #52]	; 0x34
   1df34:	ldr	r2, [sp, #56]	; 0x38
   1df38:	ldr	r0, [sp, #60]	; 0x3c
   1df3c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1df40:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1df44:	ldr	r6, [fp, #-32]	; 0xffffffe0
   1df48:	cmp	r1, #0
   1df4c:	str	r7, [sp, #56]	; 0x38
   1df50:	str	r2, [fp, #-36]	; 0xffffffdc
   1df54:	str	r3, [sp, #52]	; 0x34
   1df58:	str	r1, [fp, #-40]	; 0xffffffd8
   1df5c:	str	r6, [sp, #60]	; 0x3c
   1df60:	str	r0, [fp, #-32]	; 0xffffffe0
   1df64:	beq	1df7c <__assert_fail@plt+0xcb48>
   1df68:	movw	r2, #45356	; 0xb12c
   1df6c:	lsl	r1, r1, #2
   1df70:	movt	r2, #4
   1df74:	ldr	r2, [r2]
   1df78:	blx	r2
   1df7c:	ldr	r2, [sp, #24]
   1df80:	mov	r0, #2
   1df84:	mov	r1, #0
   1df88:	str	r0, [sp]
   1df8c:	add	r0, sp, #52	; 0x34
   1df90:	mov	r3, r0
   1df94:	bl	18468 <__assert_fail@plt+0x7034>
   1df98:	movw	r0, #37256	; 0x9188
   1df9c:	cmp	r9, #0
   1dfa0:	movt	r0, #3
   1dfa4:	str	r0, [fp, #-32]	; 0xffffffe0
   1dfa8:	str	r4, [fp, #-36]	; 0xffffffdc
   1dfac:	str	r4, [fp, #-40]	; 0xffffffd8
   1dfb0:	beq	1e018 <__assert_fail@plt+0xcbe4>
   1dfb4:	movw	r0, #45348	; 0xb124
   1dfb8:	mov	r7, #1
   1dfbc:	movt	r0, #4
   1dfc0:	str	r7, [fp, #-36]	; 0xffffffdc
   1dfc4:	ldr	r1, [r0]
   1dfc8:	mov	r0, #4
   1dfcc:	blx	r1
   1dfd0:	str	r0, [fp, #-32]	; 0xffffffe0
   1dfd4:	str	r7, [fp, #-40]	; 0xffffffd8
   1dfd8:	add	r7, sp, #28
   1dfdc:	mov	r6, sl
   1dfe0:	mov	sl, r0
   1dfe4:	str	r9, [r0]
   1dfe8:	mov	r1, r8
   1dfec:	mov	r2, r5
   1dff0:	mov	r0, r7
   1dff4:	bl	17dd0 <__assert_fail@plt+0x699c>
   1dff8:	movw	r0, #45356	; 0xb12c
   1dffc:	mov	r1, #4
   1e000:	movt	r0, #4
   1e004:	ldr	r2, [r0]
   1e008:	mov	r0, sl
   1e00c:	mov	sl, r6
   1e010:	blx	r2
   1e014:	b	1e030 <__assert_fail@plt+0xcbfc>
   1e018:	add	r7, sp, #28
   1e01c:	mov	r1, r8
   1e020:	mov	r2, r5
   1e024:	str	r4, [fp, #-36]	; 0xffffffdc
   1e028:	mov	r0, r7
   1e02c:	bl	17dd0 <__assert_fail@plt+0x699c>
   1e030:	add	r6, sp, #52	; 0x34
   1e034:	mov	r2, r7
   1e038:	mov	r0, r6
   1e03c:	mov	r1, r6
   1e040:	bl	1707c <__assert_fail@plt+0x5c48>
   1e044:	ldr	r3, [sp, #12]
   1e048:	mov	r0, #2
   1e04c:	mov	r1, #0
   1e050:	mov	r2, r6
   1e054:	str	r0, [sp]
   1e058:	mov	r0, r6
   1e05c:	bl	19e58 <__assert_fail@plt+0x8a24>
   1e060:	ldr	r7, [sp, #16]
   1e064:	ldr	r0, [sp, #56]	; 0x38
   1e068:	ldr	ip, [sp, #60]	; 0x3c
   1e06c:	ldr	lr, [sp, #8]
   1e070:	cmp	r7, #0
   1e074:	mov	r3, r7
   1e078:	mov	r2, r0
   1e07c:	rsbmi	r3, r7, #0
   1e080:	cmp	r0, #0
   1e084:	rsbmi	r2, r0, #0
   1e088:	cmp	r2, r3
   1e08c:	bne	1de9c <__assert_fail@plt+0xca68>
   1e090:	sub	r3, ip, #4
   1e094:	sub	r7, lr, #4
   1e098:	subs	r6, r2, #1
   1e09c:	blt	1e0c4 <__assert_fail@plt+0xcc90>
   1e0a0:	ldr	r1, [r7, r2, lsl #2]
   1e0a4:	ldr	r2, [r3, r2, lsl #2]
   1e0a8:	cmp	r2, r1
   1e0ac:	mov	r2, r6
   1e0b0:	beq	1e098 <__assert_fail@plt+0xcc64>
   1e0b4:	ldr	r3, [sp, #20]
   1e0b8:	ldr	r7, [sp, #16]
   1e0bc:	mov	r2, lr
   1e0c0:	bls	1dea8 <__assert_fail@plt+0xca74>
   1e0c4:	ldr	r0, [sp, #28]
   1e0c8:	cmp	r0, #0
   1e0cc:	beq	1e0ec <__assert_fail@plt+0xccb8>
   1e0d0:	movw	r1, #45356	; 0xb12c
   1e0d4:	movt	r1, #4
   1e0d8:	ldr	r2, [r1]
   1e0dc:	lsl	r1, r0, #2
   1e0e0:	ldr	r0, [sp, #36]	; 0x24
   1e0e4:	blx	r2
   1e0e8:	ldr	lr, [sp, #8]
   1e0ec:	ldr	r6, [sp, #16]
   1e0f0:	b	1e0f8 <__assert_fail@plt+0xccc4>
   1e0f4:	mov	r6, ip
   1e0f8:	ldr	r8, [sp, #4]
   1e0fc:	cmp	sl, #0
   1e100:	beq	1e1e0 <__assert_fail@plt+0xcdac>
   1e104:	movw	r0, #45348	; 0xb124
   1e108:	mov	r4, #1
   1e10c:	str	r6, [sp, #16]
   1e110:	str	lr, [sp, #8]
   1e114:	movt	r0, #4
   1e118:	str	r4, [fp, #-36]	; 0xffffffdc
   1e11c:	ldr	r1, [r0]
   1e120:	mov	r0, #4
   1e124:	blx	r1
   1e128:	ldr	r5, [sp, #12]
   1e12c:	str	r0, [fp, #-32]	; 0xffffffe0
   1e130:	str	r4, [fp, #-40]	; 0xffffffd8
   1e134:	str	r4, [r0]
   1e138:	mov	r6, #-2147483648	; 0x80000000
   1e13c:	sub	r4, fp, #40	; 0x28
   1e140:	mov	r7, #0
   1e144:	add	r9, sp, #40	; 0x28
   1e148:	mov	r0, r4
   1e14c:	mov	r1, r4
   1e150:	mov	r2, r4
   1e154:	bl	17dd0 <__assert_fail@plt+0x699c>
   1e158:	tst	r6, r5
   1e15c:	movne	r0, r4
   1e160:	movne	r1, r4
   1e164:	movne	r2, r9
   1e168:	blne	17dd0 <__assert_fail@plt+0x699c>
   1e16c:	lsr	r0, r6, #1
   1e170:	cmp	r7, r6, lsr #1
   1e174:	mov	r6, r0
   1e178:	bne	1e148 <__assert_fail@plt+0xcd14>
   1e17c:	ldr	r1, [sp, #52]	; 0x34
   1e180:	ldr	r2, [sp, #56]	; 0x38
   1e184:	ldr	r0, [sp, #60]	; 0x3c
   1e188:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1e18c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1e190:	ldr	r6, [fp, #-32]	; 0xffffffe0
   1e194:	cmp	r1, #0
   1e198:	str	r7, [sp, #56]	; 0x38
   1e19c:	str	r2, [fp, #-36]	; 0xffffffdc
   1e1a0:	str	r3, [sp, #52]	; 0x34
   1e1a4:	str	r1, [fp, #-40]	; 0xffffffd8
   1e1a8:	str	r6, [sp, #60]	; 0x3c
   1e1ac:	str	r0, [fp, #-32]	; 0xffffffe0
   1e1b0:	beq	1e1c8 <__assert_fail@plt+0xcd94>
   1e1b4:	movw	r2, #45356	; 0xb12c
   1e1b8:	lsl	r1, r1, #2
   1e1bc:	movt	r2, #4
   1e1c0:	ldr	r2, [r2]
   1e1c4:	blx	r2
   1e1c8:	ldr	r1, [sp, #24]
   1e1cc:	add	r2, sp, #52	; 0x34
   1e1d0:	mov	r0, sl
   1e1d4:	bl	179e4 <__assert_fail@plt+0x65b0>
   1e1d8:	ldr	lr, [sp, #8]
   1e1dc:	ldr	r6, [sp, #16]
   1e1e0:	cmp	r8, #0
   1e1e4:	beq	1e258 <__assert_fail@plt+0xce24>
   1e1e8:	ldr	r0, [r8, #4]
   1e1ec:	str	r6, [r8, #4]
   1e1f0:	str	r0, [sp, #44]	; 0x2c
   1e1f4:	ldr	r0, [sp, #20]
   1e1f8:	ldr	r1, [r8]
   1e1fc:	str	r0, [r8]
   1e200:	str	r1, [sp, #40]	; 0x28
   1e204:	ldr	r0, [r8, #8]
   1e208:	str	lr, [r8, #8]
   1e20c:	str	r0, [sp, #48]	; 0x30
   1e210:	cmp	r1, #0
   1e214:	beq	1e22c <__assert_fail@plt+0xcdf8>
   1e218:	movw	r2, #45356	; 0xb12c
   1e21c:	lsl	r1, r1, #2
   1e220:	movt	r2, #4
   1e224:	ldr	r2, [r2]
   1e228:	blx	r2
   1e22c:	ldr	r0, [sp, #52]	; 0x34
   1e230:	cmp	r0, #0
   1e234:	beq	1e250 <__assert_fail@plt+0xce1c>
   1e238:	movw	r1, #45356	; 0xb12c
   1e23c:	movt	r1, #4
   1e240:	ldr	r2, [r1]
   1e244:	lsl	r1, r0, #2
   1e248:	ldr	r0, [sp, #60]	; 0x3c
   1e24c:	blx	r2
   1e250:	sub	sp, fp, #28
   1e254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e258:	ldr	r1, [sp, #20]
   1e25c:	mov	r0, lr
   1e260:	cmp	r1, #0
   1e264:	bne	1e218 <__assert_fail@plt+0xcde4>
   1e268:	b	1e22c <__assert_fail@plt+0xcdf8>
   1e26c:	ldr	r1, [r9]
   1e270:	cmp	r8, r1
   1e274:	ble	1e2a0 <__assert_fail@plt+0xce6c>
   1e278:	cmp	r1, #0
   1e27c:	beq	1e2b0 <__assert_fail@plt+0xce7c>
   1e280:	movw	r0, #45352	; 0xb128
   1e284:	lsl	r1, r1, #2
   1e288:	mov	r2, #4
   1e28c:	movt	r0, #4
   1e290:	ldr	r3, [r0]
   1e294:	ldr	r0, [r9, #8]
   1e298:	blx	r3
   1e29c:	b	1e2c4 <__assert_fail@plt+0xce90>
   1e2a0:	ldr	r0, [r9, #8]
   1e2a4:	cmp	r8, #1
   1e2a8:	bge	1e2f0 <__assert_fail@plt+0xcebc>
   1e2ac:	b	1e44c <__assert_fail@plt+0xd018>
   1e2b0:	movw	r0, #45348	; 0xb124
   1e2b4:	movt	r0, #4
   1e2b8:	ldr	r1, [r0]
   1e2bc:	mov	r0, #4
   1e2c0:	blx	r1
   1e2c4:	mov	r1, #1
   1e2c8:	str	r0, [r9, #8]
   1e2cc:	str	r1, [r9]
   1e2d0:	ldr	r1, [r9, #4]
   1e2d4:	cmp	r1, #0
   1e2d8:	rsbmi	r1, r1, #0
   1e2dc:	cmp	r1, #2
   1e2e0:	movge	r1, #0
   1e2e4:	strge	r1, [r9, #4]
   1e2e8:	cmp	r8, #1
   1e2ec:	blt	1e44c <__assert_fail@plt+0xd018>
   1e2f0:	ldr	r1, [sp, #24]
   1e2f4:	mov	r2, #0
   1e2f8:	cmp	r8, #4
   1e2fc:	ldr	r1, [r1, #8]
   1e300:	bcc	1e3e0 <__assert_fail@plt+0xcfac>
   1e304:	add	r3, r1, r8, lsl #2
   1e308:	cmp	r0, r3
   1e30c:	addcc	r3, r0, r8, lsl #2
   1e310:	cmpcc	r1, r3
   1e314:	bcc	1e3e0 <__assert_fail@plt+0xcfac>
   1e318:	bic	r2, r8, #-2147483645	; 0x80000003
   1e31c:	mov	r3, #1
   1e320:	str	r9, [sp, #4]
   1e324:	mov	r9, #0
   1e328:	str	sl, [sp, #16]
   1e32c:	sub	r6, r2, #4
   1e330:	add	r3, r3, r6, lsr #2
   1e334:	cmp	r6, #12
   1e338:	and	r7, r3, #3
   1e33c:	str	r7, [sp, #20]
   1e340:	bcc	1e3a8 <__assert_fail@plt+0xcf74>
   1e344:	ldr	r7, [sp, #20]
   1e348:	mov	r5, #0
   1e34c:	mov	r9, #0
   1e350:	sub	sl, r3, r7
   1e354:	add	r3, r1, r5
   1e358:	mov	r4, #48	; 0x30
   1e35c:	add	r7, r0, r5
   1e360:	add	r5, r5, #64	; 0x40
   1e364:	subs	sl, sl, #4
   1e368:	add	r9, r9, #16
   1e36c:	mov	lr, r3
   1e370:	mov	r6, r7
   1e374:	add	ip, r3, #16
   1e378:	add	r3, r3, #32
   1e37c:	vld1.32	{d16-d17}, [lr], r4
   1e380:	vst1.32	{d16-d17}, [r6], r4
   1e384:	add	r4, r7, #16
   1e388:	vld1.32	{d16-d17}, [ip]
   1e38c:	vst1.32	{d16-d17}, [r4]
   1e390:	vld1.32	{d16-d17}, [r3]
   1e394:	add	r3, r7, #32
   1e398:	vst1.32	{d16-d17}, [r3]
   1e39c:	vld1.32	{d16-d17}, [lr]
   1e3a0:	vst1.32	{d16-d17}, [r6]
   1e3a4:	bne	1e354 <__assert_fail@plt+0xcf20>
   1e3a8:	ldr	r6, [sp, #20]
   1e3ac:	cmp	r6, #0
   1e3b0:	beq	1e3d0 <__assert_fail@plt+0xcf9c>
   1e3b4:	add	r3, r1, r9, lsl #2
   1e3b8:	add	r7, r0, r9, lsl #2
   1e3bc:	rsb	r6, r6, #0
   1e3c0:	vld1.32	{d16-d17}, [r3]!
   1e3c4:	adds	r6, r6, #1
   1e3c8:	vst1.32	{d16-d17}, [r7]!
   1e3cc:	bcc	1e3c0 <__assert_fail@plt+0xcf8c>
   1e3d0:	ldr	r9, [sp, #4]
   1e3d4:	ldr	sl, [sp, #16]
   1e3d8:	cmp	r8, r2
   1e3dc:	beq	1e44c <__assert_fail@plt+0xd018>
   1e3e0:	mvn	r3, r2
   1e3e4:	ands	r7, r8, #3
   1e3e8:	add	r3, r8, r3
   1e3ec:	beq	1e404 <__assert_fail@plt+0xcfd0>
   1e3f0:	ldr	r6, [r1, r2, lsl #2]
   1e3f4:	subs	r7, r7, #1
   1e3f8:	str	r6, [r0, r2, lsl #2]
   1e3fc:	add	r2, r2, #1
   1e400:	bne	1e3f0 <__assert_fail@plt+0xcfbc>
   1e404:	cmp	r3, #3
   1e408:	bcc	1e44c <__assert_fail@plt+0xd018>
   1e40c:	sub	r3, r8, r2
   1e410:	lsl	r2, r2, #2
   1e414:	add	r7, r1, #16
   1e418:	ldr	r6, [r1, r2]!
   1e41c:	add	r5, r0, #16
   1e420:	subs	r3, r3, #4
   1e424:	str	r6, [r0, r2]!
   1e428:	ldr	r6, [r1, #4]
   1e42c:	str	r6, [r0, #4]
   1e430:	ldr	r6, [r1, #8]
   1e434:	str	r6, [r0, #8]
   1e438:	ldr	r1, [r1, #12]
   1e43c:	str	r1, [r0, #12]
   1e440:	mov	r1, r7
   1e444:	mov	r0, r5
   1e448:	bne	1e414 <__assert_fail@plt+0xcfe0>
   1e44c:	ldr	r0, [sp, #24]
   1e450:	ldr	r0, [r0, #4]
   1e454:	str	r0, [r9, #4]
   1e458:	cmp	sl, #0
   1e45c:	beq	1e250 <__assert_fail@plt+0xce1c>
   1e460:	mov	r0, #0
   1e464:	str	r0, [sl, #4]
   1e468:	sub	sp, fp, #28
   1e46c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e470:	movw	r0, #38718	; 0x973e
   1e474:	movt	r0, #3
   1e478:	bl	1d324 <__assert_fail@plt+0xbef0>
   1e47c:	movw	r0, #38766	; 0x976e
   1e480:	movt	r0, #3
   1e484:	bl	1d324 <__assert_fail@plt+0xbef0>
   1e488:	movw	r0, #41907	; 0xa3b3
   1e48c:	movw	r1, #37260	; 0x918c
   1e490:	movw	r3, #41913	; 0xa3b9
   1e494:	movw	r2, #1210	; 0x4ba
   1e498:	movt	r0, #3
   1e49c:	movt	r1, #3
   1e4a0:	movt	r3, #3
   1e4a4:	bl	11434 <__assert_fail@plt>
   1e4a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e4ac:	add	fp, sp, #28
   1e4b0:	sub	sp, sp, #28
   1e4b4:	cmp	r1, #1
   1e4b8:	ble	1e8cc <__assert_fail@plt+0xd498>
   1e4bc:	mov	r8, r1
   1e4c0:	cmp	r1, #63	; 0x3f
   1e4c4:	bge	1e8e4 <__assert_fail@plt+0xd4b0>
   1e4c8:	ldr	r4, [r0, #4]
   1e4cc:	cmp	r4, #0
   1e4d0:	rsbmi	r4, r4, #0
   1e4d4:	cmp	r4, #0
   1e4d8:	beq	1e5d0 <__assert_fail@plt+0xd19c>
   1e4dc:	ldr	r5, [r0, #8]
   1e4e0:	sub	r0, r4, #1
   1e4e4:	ldr	r2, [r5, r0, lsl #2]
   1e4e8:	cmp	r2, #0
   1e4ec:	beq	1e904 <__assert_fail@plt+0xd4d0>
   1e4f0:	mov	r1, #0
   1e4f4:	cmp	r1, r2, lsr #24
   1e4f8:	bne	1e510 <__assert_fail@plt+0xd0dc>
   1e4fc:	mov	r1, #0
   1e500:	lsl	r2, r2, #8
   1e504:	add	r1, r1, #8
   1e508:	cmp	r2, #16777216	; 0x1000000
   1e50c:	bcc	1e500 <__assert_fail@plt+0xd0cc>
   1e510:	cmp	r2, #0
   1e514:	bmi	1e528 <__assert_fail@plt+0xd0f4>
   1e518:	lsl	r2, r2, #1
   1e51c:	add	r1, r1, #1
   1e520:	cmn	r2, #1
   1e524:	bgt	1e518 <__assert_fail@plt+0xd0e4>
   1e528:	sub	r2, r8, #2
   1e52c:	cmp	r2, #30
   1e530:	bhi	1e5d8 <__assert_fail@plt+0xd1a4>
   1e534:	lsl	r0, r0, #5
   1e538:	sub	r0, r0, r1
   1e53c:	add	r6, r0, #32
   1e540:	add	r0, pc, #0
   1e544:	ldr	pc, [r0, r2, lsl #2]
   1e548:	andeq	lr, r1, r0, asr #17
   1e54c:	ldrdeq	lr, [r1], -r8
   1e550:	andeq	lr, r1, r4, asr #11
   1e554:	ldrdeq	lr, [r1], -r8
   1e558:	ldrdeq	lr, [r1], -r8
   1e55c:	ldrdeq	lr, [r1], -r8
   1e560:	strdeq	lr, [r1], -r8
   1e564:	ldrdeq	lr, [r1], -r8
   1e568:	ldrdeq	lr, [r1], -r8
   1e56c:	ldrdeq	lr, [r1], -r8
   1e570:	ldrdeq	lr, [r1], -r8
   1e574:	ldrdeq	lr, [r1], -r8
   1e578:	ldrdeq	lr, [r1], -r8
   1e57c:	ldrdeq	lr, [r1], -r8
   1e580:	andeq	lr, r1, r0, lsl r8
   1e584:	ldrdeq	lr, [r1], -r8
   1e588:	ldrdeq	lr, [r1], -r8
   1e58c:	ldrdeq	lr, [r1], -r8
   1e590:	ldrdeq	lr, [r1], -r8
   1e594:	ldrdeq	lr, [r1], -r8
   1e598:	ldrdeq	lr, [r1], -r8
   1e59c:	ldrdeq	lr, [r1], -r8
   1e5a0:	ldrdeq	lr, [r1], -r8
   1e5a4:	ldrdeq	lr, [r1], -r8
   1e5a8:	ldrdeq	lr, [r1], -r8
   1e5ac:	ldrdeq	lr, [r1], -r8
   1e5b0:	ldrdeq	lr, [r1], -r8
   1e5b4:	ldrdeq	lr, [r1], -r8
   1e5b8:	ldrdeq	lr, [r1], -r8
   1e5bc:	ldrdeq	lr, [r1], -r8
   1e5c0:	andeq	lr, r1, ip, lsl r8
   1e5c4:	add	r0, r6, #1
   1e5c8:	lsr	r6, r0, #1
   1e5cc:	b	1e8c0 <__assert_fail@plt+0xd48c>
   1e5d0:	mov	r6, #1
   1e5d4:	b	1e8c0 <__assert_fail@plt+0xd48c>
   1e5d8:	movw	r0, #45348	; 0xb124
   1e5dc:	lsl	r9, r4, #2
   1e5e0:	movt	r0, #4
   1e5e4:	ldr	r1, [r0]
   1e5e8:	mov	r0, r9
   1e5ec:	blx	r1
   1e5f0:	mov	r7, r0
   1e5f4:	cmp	r4, #1
   1e5f8:	blt	1e758 <__assert_fail@plt+0xd324>
   1e5fc:	mov	r0, #0
   1e600:	cmp	r4, #4
   1e604:	bcc	1e6e8 <__assert_fail@plt+0xd2b4>
   1e608:	add	r1, r5, r4, lsl #2
   1e60c:	cmp	r7, r1
   1e610:	bcs	1e620 <__assert_fail@plt+0xd1ec>
   1e614:	add	r1, r7, r4, lsl #2
   1e618:	cmp	r1, r5
   1e61c:	bhi	1e6e8 <__assert_fail@plt+0xd2b4>
   1e620:	bic	r0, r4, #-2147483645	; 0x80000003
   1e624:	mov	r1, #1
   1e628:	mov	sl, #0
   1e62c:	str	r9, [sp]
   1e630:	str	r8, [sp, #4]
   1e634:	sub	r3, r0, #4
   1e638:	add	r1, r1, r3, lsr #2
   1e63c:	cmp	r3, #12
   1e640:	and	r2, r1, #3
   1e644:	str	r2, [sp, #8]
   1e648:	bcc	1e6b0 <__assert_fail@plt+0xd27c>
   1e64c:	ldr	r2, [sp, #8]
   1e650:	mov	r6, #0
   1e654:	mov	sl, #0
   1e658:	sub	r9, r1, r2
   1e65c:	add	r1, r5, r6
   1e660:	mov	r3, #48	; 0x30
   1e664:	add	ip, r7, r6
   1e668:	add	r6, r6, #64	; 0x40
   1e66c:	subs	r9, r9, #4
   1e670:	add	sl, sl, #16
   1e674:	mov	r2, r1
   1e678:	mov	r8, ip
   1e67c:	add	lr, r1, #16
   1e680:	add	r1, r1, #32
   1e684:	vld1.32	{d16-d17}, [r2], r3
   1e688:	vst1.32	{d16-d17}, [r8], r3
   1e68c:	add	r3, ip, #16
   1e690:	vld1.32	{d16-d17}, [lr]
   1e694:	vst1.32	{d16-d17}, [r3]
   1e698:	vld1.32	{d16-d17}, [r1]
   1e69c:	add	r1, ip, #32
   1e6a0:	vst1.32	{d16-d17}, [r1]
   1e6a4:	vld1.32	{d16-d17}, [r2]
   1e6a8:	vst1.32	{d16-d17}, [r8]
   1e6ac:	bne	1e65c <__assert_fail@plt+0xd228>
   1e6b0:	ldr	r3, [sp, #8]
   1e6b4:	cmp	r3, #0
   1e6b8:	beq	1e6d8 <__assert_fail@plt+0xd2a4>
   1e6bc:	add	r1, r5, sl, lsl #2
   1e6c0:	add	r2, r7, sl, lsl #2
   1e6c4:	rsb	r3, r3, #0
   1e6c8:	vld1.32	{d16-d17}, [r1]!
   1e6cc:	adds	r3, r3, #1
   1e6d0:	vst1.32	{d16-d17}, [r2]!
   1e6d4:	bcc	1e6c8 <__assert_fail@plt+0xd294>
   1e6d8:	ldr	r8, [sp, #4]
   1e6dc:	ldr	r9, [sp]
   1e6e0:	cmp	r4, r0
   1e6e4:	beq	1e758 <__assert_fail@plt+0xd324>
   1e6e8:	mvn	r1, r0
   1e6ec:	ands	r2, r4, #3
   1e6f0:	add	r1, r4, r1
   1e6f4:	beq	1e70c <__assert_fail@plt+0xd2d8>
   1e6f8:	ldr	r3, [r5, r0, lsl #2]
   1e6fc:	subs	r2, r2, #1
   1e700:	str	r3, [r7, r0, lsl #2]
   1e704:	add	r0, r0, #1
   1e708:	bne	1e6f8 <__assert_fail@plt+0xd2c4>
   1e70c:	cmp	r1, #3
   1e710:	bcc	1e758 <__assert_fail@plt+0xd324>
   1e714:	sub	r1, r4, r0
   1e718:	lsl	ip, r0, #2
   1e71c:	mov	r2, r7
   1e720:	add	r3, r5, #16
   1e724:	ldr	r6, [r5, ip]!
   1e728:	add	r0, r2, #16
   1e72c:	subs	r1, r1, #4
   1e730:	str	r6, [r2, ip]!
   1e734:	ldr	r6, [r5, #4]
   1e738:	str	r6, [r2, #4]
   1e73c:	ldr	r6, [r5, #8]
   1e740:	str	r6, [r2, #8]
   1e744:	ldr	r6, [r5, #12]
   1e748:	mov	r5, r3
   1e74c:	str	r6, [r2, #12]
   1e750:	mov	r2, r0
   1e754:	bne	1e720 <__assert_fail@plt+0xd2ec>
   1e758:	cmp	r8, #0
   1e75c:	beq	1e924 <__assert_fail@plt+0xd4f0>
   1e760:	mov	r1, #0
   1e764:	mov	r0, r8
   1e768:	cmp	r1, r8, lsr #24
   1e76c:	bne	1e788 <__assert_fail@plt+0xd354>
   1e770:	mov	r1, #0
   1e774:	mov	r0, r8
   1e778:	lsl	r0, r0, #8
   1e77c:	add	r1, r1, #8
   1e780:	cmp	r0, #16777216	; 0x1000000
   1e784:	bcc	1e778 <__assert_fail@plt+0xd344>
   1e788:	cmp	r0, #0
   1e78c:	bmi	1e7a0 <__assert_fail@plt+0xd36c>
   1e790:	lsl	r0, r0, #1
   1e794:	add	r1, r1, #1
   1e798:	cmn	r0, #1
   1e79c:	bgt	1e790 <__assert_fail@plt+0xd35c>
   1e7a0:	lsl	r0, r8, r1
   1e7a4:	mvn	r2, r8, lsl r1
   1e7a8:	str	r1, [sp, #12]
   1e7ac:	lsr	r6, r0, #16
   1e7b0:	uxth	r3, r0
   1e7b4:	str	r0, [sp, #16]
   1e7b8:	udiv	r1, r2, r6
   1e7bc:	mls	r6, r1, r6, r2
   1e7c0:	movw	r2, #65535	; 0xffff
   1e7c4:	mul	r3, r1, r3
   1e7c8:	orr	r6, r2, r6, lsl #16
   1e7cc:	cmp	r6, r3
   1e7d0:	bcs	1e838 <__assert_fail@plt+0xd404>
   1e7d4:	add	r6, r6, r0
   1e7d8:	sub	r5, r1, #1
   1e7dc:	cmp	r6, r0
   1e7e0:	bcc	1e834 <__assert_fail@plt+0xd400>
   1e7e4:	cmp	r6, r3
   1e7e8:	subcc	r1, r1, #2
   1e7ec:	addcc	r6, r6, r0
   1e7f0:	movcs	r1, r5
   1e7f4:	b	1e838 <__assert_fail@plt+0xd404>
   1e7f8:	movw	r1, #43691	; 0xaaab
   1e7fc:	add	r0, r6, #2
   1e800:	movt	r1, #43690	; 0xaaaa
   1e804:	umull	r0, r1, r0, r1
   1e808:	lsr	r6, r1, #1
   1e80c:	b	1e8c0 <__assert_fail@plt+0xd48c>
   1e810:	add	r0, r6, #3
   1e814:	lsr	r6, r0, #2
   1e818:	b	1e8c0 <__assert_fail@plt+0xd48c>
   1e81c:	movw	r1, #52429	; 0xcccd
   1e820:	add	r0, r6, #4
   1e824:	movt	r1, #52428	; 0xcccc
   1e828:	umull	r0, r1, r0, r1
   1e82c:	lsr	r6, r1, #2
   1e830:	b	1e8c0 <__assert_fail@plt+0xd48c>
   1e834:	mov	r1, r5
   1e838:	sub	r3, r6, r3
   1e83c:	mov	r5, #1
   1e840:	lsr	r6, r3, #16
   1e844:	orr	r2, r2, r3, lsl #16
   1e848:	mla	r6, r6, r1, r3
   1e84c:	add	r5, r5, r6, lsr #16
   1e850:	mls	r2, r5, r0, r2
   1e854:	cmp	r2, r6, lsl #16
   1e858:	lsrcs	r5, r6, #16
   1e85c:	addcs	r2, r2, r0
   1e860:	mov	r6, #0
   1e864:	add	r1, r5, r1, lsl #16
   1e868:	cmp	r2, r0
   1e86c:	add	r5, sp, #12
   1e870:	addcs	r1, r1, #1
   1e874:	str	r1, [sp, #24]
   1e878:	mov	r0, r7
   1e87c:	mov	r1, r7
   1e880:	mov	r2, r4
   1e884:	mov	r3, r5
   1e888:	bl	219a8 <__assert_fail@plt+0x10574>
   1e88c:	sub	r0, r4, #1
   1e890:	add	r6, r6, #1
   1e894:	ldr	r1, [r7, r0, lsl #2]
   1e898:	cmp	r1, #0
   1e89c:	moveq	r4, r0
   1e8a0:	cmp	r4, #0
   1e8a4:	bgt	1e878 <__assert_fail@plt+0xd444>
   1e8a8:	movw	r0, #45356	; 0xb12c
   1e8ac:	mov	r1, r9
   1e8b0:	movt	r0, #4
   1e8b4:	ldr	r2, [r0]
   1e8b8:	mov	r0, r7
   1e8bc:	blx	r2
   1e8c0:	mov	r0, r6
   1e8c4:	sub	sp, fp, #28
   1e8c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8cc:	movw	r0, #39312	; 0x9990
   1e8d0:	movw	r1, #37260	; 0x918c
   1e8d4:	movw	r3, #39322	; 0x999a
   1e8d8:	movw	r2, #4191	; 0x105f
   1e8dc:	movt	r0, #3
   1e8e0:	b	1e8f8 <__assert_fail@plt+0xd4c4>
   1e8e4:	movw	r0, #39371	; 0x99cb
   1e8e8:	movw	r1, #37260	; 0x918c
   1e8ec:	movw	r3, #39322	; 0x999a
   1e8f0:	movw	r2, #4192	; 0x1060
   1e8f4:	movt	r0, #3
   1e8f8:	movt	r1, #3
   1e8fc:	movt	r3, #3
   1e900:	bl	11434 <__assert_fail@plt>
   1e904:	movw	r0, #41907	; 0xa3b3
   1e908:	movw	r1, #37260	; 0x918c
   1e90c:	movw	r3, #41913	; 0xa3b9
   1e910:	movw	r2, #1210	; 0x4ba
   1e914:	movt	r0, #3
   1e918:	movt	r1, #3
   1e91c:	movt	r3, #3
   1e920:	bl	11434 <__assert_fail@plt>
   1e924:	movw	r0, #41960	; 0xa3e8
   1e928:	movw	r1, #37260	; 0x918c
   1e92c:	movw	r3, #41966	; 0xa3ee
   1e930:	movw	r2, #902	; 0x386
   1e934:	movt	r0, #3
   1e938:	movt	r1, #3
   1e93c:	movt	r3, #3
   1e940:	bl	11434 <__assert_fail@plt>
   1e944:	push	{r4, sl, fp, lr}
   1e948:	add	fp, sp, #8
   1e94c:	sub	sp, sp, #16
   1e950:	mov	r3, r2
   1e954:	mov	r2, r1
   1e958:	movw	r1, #37256	; 0x9188
   1e95c:	movt	r1, #3
   1e960:	str	r1, [sp, #12]
   1e964:	mov	r1, #0
   1e968:	str	r1, [sp, #8]
   1e96c:	str	r1, [sp, #4]
   1e970:	add	r1, sp, #4
   1e974:	bl	1dc1c <__assert_fail@plt+0xc7e8>
   1e978:	ldmib	sp, {r0, r1}
   1e97c:	clz	r1, r1
   1e980:	lsr	r4, r1, #5
   1e984:	cmp	r0, #0
   1e988:	beq	1e9a4 <__assert_fail@plt+0xd570>
   1e98c:	movw	r1, #45356	; 0xb12c
   1e990:	movt	r1, #4
   1e994:	ldr	r2, [r1]
   1e998:	lsl	r1, r0, #2
   1e99c:	ldr	r0, [sp, #12]
   1e9a0:	blx	r2
   1e9a4:	mov	r0, r4
   1e9a8:	sub	sp, fp, #8
   1e9ac:	pop	{r4, sl, fp, pc}
   1e9b0:	mov	r3, #2
   1e9b4:	b	1dc1c <__assert_fail@plt+0xc7e8>
   1e9b8:	mov	r2, r1
   1e9bc:	mov	r1, #0
   1e9c0:	mov	r3, #2
   1e9c4:	b	1dc1c <__assert_fail@plt+0xc7e8>
   1e9c8:	push	{r4, sl, fp, lr}
   1e9cc:	add	fp, sp, #8
   1e9d0:	sub	sp, sp, #16
   1e9d4:	ldr	r4, [r0, #4]
   1e9d8:	cmp	r4, #1
   1e9dc:	blt	1ea30 <__assert_fail@plt+0xd5fc>
   1e9e0:	mov	r2, r0
   1e9e4:	movw	r0, #37256	; 0x9188
   1e9e8:	add	r1, sp, #4
   1e9ec:	mov	r3, #2
   1e9f0:	movt	r0, #3
   1e9f4:	str	r0, [sp, #12]
   1e9f8:	mov	r0, #0
   1e9fc:	str	r0, [sp, #8]
   1ea00:	str	r0, [sp, #4]
   1ea04:	mov	r0, #0
   1ea08:	bl	1dc1c <__assert_fail@plt+0xc7e8>
   1ea0c:	ldmib	sp, {r0, r4}
   1ea10:	cmp	r0, #0
   1ea14:	beq	1ea30 <__assert_fail@plt+0xd5fc>
   1ea18:	movw	r1, #45356	; 0xb12c
   1ea1c:	movt	r1, #4
   1ea20:	ldr	r2, [r1]
   1ea24:	lsl	r1, r0, #2
   1ea28:	ldr	r0, [sp, #12]
   1ea2c:	blx	r2
   1ea30:	clz	r0, r4
   1ea34:	lsr	r0, r0, #5
   1ea38:	sub	sp, fp, #8
   1ea3c:	pop	{r4, sl, fp, pc}
   1ea40:	push	{r4, sl, fp, lr}
   1ea44:	add	fp, sp, #8
   1ea48:	sub	sp, sp, #24
   1ea4c:	cmp	r1, #0
   1ea50:	ble	1ead4 <__assert_fail@plt+0xd6a0>
   1ea54:	add	r2, r0, r1, lsl #2
   1ea58:	ldr	r2, [r2, #-4]
   1ea5c:	cmp	r2, #0
   1ea60:	beq	1eaec <__assert_fail@plt+0xd6b8>
   1ea64:	str	r0, [sp, #8]
   1ea68:	mov	r0, #0
   1ea6c:	mov	r2, sp
   1ea70:	mov	r3, #2
   1ea74:	stm	sp, {r0, r1}
   1ea78:	movw	r1, #37256	; 0x9188
   1ea7c:	movt	r1, #3
   1ea80:	str	r1, [sp, #20]
   1ea84:	str	r0, [sp, #16]
   1ea88:	str	r0, [sp, #12]
   1ea8c:	add	r1, sp, #12
   1ea90:	mov	r0, #0
   1ea94:	bl	1dc1c <__assert_fail@plt+0xc7e8>
   1ea98:	ldr	r1, [sp, #16]
   1ea9c:	ldr	r0, [sp, #12]
   1eaa0:	clz	r1, r1
   1eaa4:	cmp	r0, #0
   1eaa8:	lsr	r4, r1, #5
   1eaac:	beq	1eac8 <__assert_fail@plt+0xd694>
   1eab0:	movw	r1, #45356	; 0xb12c
   1eab4:	movt	r1, #4
   1eab8:	ldr	r2, [r1]
   1eabc:	lsl	r1, r0, #2
   1eac0:	ldr	r0, [sp, #20]
   1eac4:	blx	r2
   1eac8:	mov	r0, r4
   1eacc:	sub	sp, fp, #8
   1ead0:	pop	{r4, sl, fp, pc}
   1ead4:	movw	r0, #40586	; 0x9e8a
   1ead8:	movw	r1, #37260	; 0x918c
   1eadc:	movw	r3, #38792	; 0x9788
   1eae0:	movw	r2, #3302	; 0xce6
   1eae4:	movt	r0, #3
   1eae8:	b	1eb00 <__assert_fail@plt+0xd6cc>
   1eaec:	movw	r0, #38839	; 0x97b7
   1eaf0:	movw	r1, #37260	; 0x918c
   1eaf4:	movw	r3, #38792	; 0x9788
   1eaf8:	movw	r2, #3303	; 0xce7
   1eafc:	movt	r0, #3
   1eb00:	movt	r1, #3
   1eb04:	movt	r3, #3
   1eb08:	bl	11434 <__assert_fail@plt>
   1eb0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1eb10:	add	fp, sp, #24
   1eb14:	sub	sp, sp, #40	; 0x28
   1eb18:	cmp	r3, #0
   1eb1c:	ble	1ed9c <__assert_fail@plt+0xd968>
   1eb20:	mov	r9, r0
   1eb24:	add	r0, r2, r3, lsl #2
   1eb28:	mov	r6, r3
   1eb2c:	ldr	r0, [r0, #-4]
   1eb30:	cmp	r0, #0
   1eb34:	beq	1edb4 <__assert_fail@plt+0xd980>
   1eb38:	movw	r0, #37256	; 0x9188
   1eb3c:	mov	r8, r1
   1eb40:	mov	r1, #0
   1eb44:	str	r2, [sp, #12]
   1eb48:	add	r2, sp, #4
   1eb4c:	mov	r3, #2
   1eb50:	movt	r0, #3
   1eb54:	stmib	sp, {r1, r6}
   1eb58:	str	r0, [sp, #24]
   1eb5c:	str	r0, [sp, #36]	; 0x24
   1eb60:	str	r1, [sp, #20]
   1eb64:	str	r1, [sp, #32]
   1eb68:	str	r1, [sp, #16]
   1eb6c:	str	r1, [sp, #28]
   1eb70:	add	r0, sp, #28
   1eb74:	add	r1, sp, #16
   1eb78:	bl	1dc1c <__assert_fail@plt+0xc7e8>
   1eb7c:	ldr	r1, [sp, #32]
   1eb80:	add	r0, r6, #1
   1eb84:	add	r0, r0, r0, lsr #31
   1eb88:	cmp	r1, r0, asr #1
   1eb8c:	bne	1edcc <__assert_fail@plt+0xd998>
   1eb90:	ldr	r0, [sp, #36]	; 0x24
   1eb94:	cmp	r1, #1
   1eb98:	blt	1ec58 <__assert_fail@plt+0xd824>
   1eb9c:	cmp	r1, #4
   1eba0:	bcc	1ec3c <__assert_fail@plt+0xd808>
   1eba4:	add	r2, r0, r1, lsl #2
   1eba8:	cmp	r2, r9
   1ebac:	bls	1ebbc <__assert_fail@plt+0xd788>
   1ebb0:	add	r2, r9, r1, lsl #2
   1ebb4:	cmp	r0, r2
   1ebb8:	bcc	1ec3c <__assert_fail@plt+0xd808>
   1ebbc:	bic	ip, r1, #3
   1ebc0:	mov	r3, #1
   1ebc4:	subs	r2, ip, #4
   1ebc8:	add	r2, r3, r2, lsr #2
   1ebcc:	and	lr, r2, #1
   1ebd0:	beq	1ed7c <__assert_fail@plt+0xd948>
   1ebd4:	mvn	r3, #31
   1ebd8:	sub	r2, r2, lr
   1ebdc:	mvn	r6, #0
   1ebe0:	add	r4, r3, r1, lsl #2
   1ebe4:	add	r7, r0, r4
   1ebe8:	add	r4, r9, r4
   1ebec:	add	r5, r7, #16
   1ebf0:	sub	r6, r6, #8
   1ebf4:	subs	r2, r2, #2
   1ebf8:	vld1.32	{d16-d17}, [r5]
   1ebfc:	add	r5, r4, #16
   1ec00:	vst1.32	{d16-d17}, [r5]
   1ec04:	vld1.32	{d16-d17}, [r7], r3
   1ec08:	vst1.32	{d16-d17}, [r4], r3
   1ec0c:	bne	1ebec <__assert_fail@plt+0xd7b8>
   1ec10:	cmp	lr, #0
   1ec14:	beq	1ec34 <__assert_fail@plt+0xd800>
   1ec18:	add	r2, r1, r6
   1ec1c:	add	r3, r0, r2, lsl #2
   1ec20:	add	r2, r9, r2, lsl #2
   1ec24:	sub	r3, r3, #12
   1ec28:	sub	r2, r2, #12
   1ec2c:	vld1.32	{d16-d17}, [r3]
   1ec30:	vst1.32	{d16-d17}, [r2]
   1ec34:	subs	r1, r1, ip
   1ec38:	beq	1ec58 <__assert_fail@plt+0xd824>
   1ec3c:	sub	r2, r0, #4
   1ec40:	sub	r3, r9, #4
   1ec44:	ldr	r7, [r2, r1, lsl #2]
   1ec48:	str	r7, [r3, r1, lsl #2]
   1ec4c:	sub	r1, r1, #1
   1ec50:	cmp	r1, #0
   1ec54:	bgt	1ec44 <__assert_fail@plt+0xd810>
   1ec58:	ldr	r1, [sp, #28]
   1ec5c:	movw	r9, #45356	; 0xb12c
   1ec60:	movt	r9, #4
   1ec64:	cmp	r1, #0
   1ec68:	beq	1ec78 <__assert_fail@plt+0xd844>
   1ec6c:	ldr	r2, [r9]
   1ec70:	lsl	r1, r1, #2
   1ec74:	blx	r2
   1ec78:	ldr	r5, [sp, #20]
   1ec7c:	cmp	r8, #0
   1ec80:	beq	1ed54 <__assert_fail@plt+0xd920>
   1ec84:	cmp	r5, #1
   1ec88:	blt	1ed54 <__assert_fail@plt+0xd920>
   1ec8c:	ldr	r0, [sp, #24]
   1ec90:	cmp	r5, #4
   1ec94:	mov	r1, r5
   1ec98:	bcc	1ed38 <__assert_fail@plt+0xd904>
   1ec9c:	add	r1, r0, r5, lsl #2
   1eca0:	cmp	r1, r8
   1eca4:	bls	1ecb8 <__assert_fail@plt+0xd884>
   1eca8:	add	r1, r8, r5, lsl #2
   1ecac:	cmp	r0, r1
   1ecb0:	mov	r1, r5
   1ecb4:	bcc	1ed38 <__assert_fail@plt+0xd904>
   1ecb8:	bic	ip, r5, #3
   1ecbc:	mov	r2, #1
   1ecc0:	subs	r1, ip, #4
   1ecc4:	add	r1, r2, r1, lsr #2
   1ecc8:	and	lr, r1, #1
   1eccc:	beq	1ed8c <__assert_fail@plt+0xd958>
   1ecd0:	mvn	r2, #31
   1ecd4:	sub	r1, r1, lr
   1ecd8:	add	r3, r2, r5, lsl #2
   1ecdc:	add	r7, r0, r3
   1ece0:	add	r4, r8, r3
   1ece4:	mvn	r3, #0
   1ece8:	add	r6, r7, #16
   1ecec:	sub	r3, r3, #8
   1ecf0:	subs	r1, r1, #2
   1ecf4:	vld1.32	{d16-d17}, [r6]
   1ecf8:	add	r6, r4, #16
   1ecfc:	vst1.32	{d16-d17}, [r6]
   1ed00:	vld1.32	{d16-d17}, [r7], r2
   1ed04:	vst1.32	{d16-d17}, [r4], r2
   1ed08:	bne	1ece8 <__assert_fail@plt+0xd8b4>
   1ed0c:	cmp	lr, #0
   1ed10:	beq	1ed30 <__assert_fail@plt+0xd8fc>
   1ed14:	add	r1, r5, r3
   1ed18:	add	r2, r0, r1, lsl #2
   1ed1c:	add	r1, r8, r1, lsl #2
   1ed20:	sub	r2, r2, #12
   1ed24:	sub	r1, r1, #12
   1ed28:	vld1.32	{d16-d17}, [r2]
   1ed2c:	vst1.32	{d16-d17}, [r1]
   1ed30:	subs	r1, r5, ip
   1ed34:	beq	1ed54 <__assert_fail@plt+0xd920>
   1ed38:	sub	r0, r0, #4
   1ed3c:	sub	r2, r8, #4
   1ed40:	ldr	r3, [r0, r1, lsl #2]
   1ed44:	str	r3, [r2, r1, lsl #2]
   1ed48:	sub	r1, r1, #1
   1ed4c:	cmp	r1, #0
   1ed50:	bgt	1ed40 <__assert_fail@plt+0xd90c>
   1ed54:	ldr	r0, [sp, #16]
   1ed58:	cmp	r0, #0
   1ed5c:	beq	1ed70 <__assert_fail@plt+0xd93c>
   1ed60:	lsl	r1, r0, #2
   1ed64:	ldr	r2, [r9]
   1ed68:	ldr	r0, [sp, #24]
   1ed6c:	blx	r2
   1ed70:	mov	r0, r5
   1ed74:	sub	sp, fp, #24
   1ed78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ed7c:	mvn	r6, #0
   1ed80:	cmp	lr, #0
   1ed84:	bne	1ec18 <__assert_fail@plt+0xd7e4>
   1ed88:	b	1ec34 <__assert_fail@plt+0xd800>
   1ed8c:	mvn	r3, #0
   1ed90:	cmp	lr, #0
   1ed94:	bne	1ed14 <__assert_fail@plt+0xd8e0>
   1ed98:	b	1ed30 <__assert_fail@plt+0xd8fc>
   1ed9c:	movw	r0, #40586	; 0x9e8a
   1eda0:	movw	r1, #37260	; 0x918c
   1eda4:	movw	r3, #38852	; 0x97c4
   1eda8:	movw	r2, #3313	; 0xcf1
   1edac:	movt	r0, #3
   1edb0:	b	1ede0 <__assert_fail@plt+0xd9ac>
   1edb4:	movw	r0, #38839	; 0x97b7
   1edb8:	movw	r1, #37260	; 0x918c
   1edbc:	movw	r3, #38852	; 0x97c4
   1edc0:	movw	r2, #3314	; 0xcf2
   1edc4:	movt	r0, #3
   1edc8:	b	1ede0 <__assert_fail@plt+0xd9ac>
   1edcc:	movw	r0, #38912	; 0x9800
   1edd0:	movw	r1, #37260	; 0x918c
   1edd4:	movw	r3, #38852	; 0x97c4
   1edd8:	movw	r2, #3320	; 0xcf8
   1eddc:	movt	r0, #3
   1ede0:	movt	r1, #3
   1ede4:	movt	r3, #3
   1ede8:	bl	11434 <__assert_fail@plt>
   1edec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1edf0:	add	fp, sp, #28
   1edf4:	sub	sp, sp, #20
   1edf8:	cmp	r1, #0
   1edfc:	mov	r4, r1
   1ee00:	mov	r5, r1
   1ee04:	mov	r6, r0
   1ee08:	str	r2, [sp, #4]
   1ee0c:	addeq	r4, r4, #1
   1ee10:	cmp	r4, #0
   1ee14:	beq	1ee34 <__assert_fail@plt+0xda00>
   1ee18:	mov	r0, #1
   1ee1c:	str	r0, [r6, #4]
   1ee20:	ldr	r1, [r6]
   1ee24:	cmp	r1, #0
   1ee28:	ble	1ee40 <__assert_fail@plt+0xda0c>
   1ee2c:	ldr	r0, [r6, #8]
   1ee30:	b	1eea0 <__assert_fail@plt+0xda6c>
   1ee34:	mov	r0, #0
   1ee38:	str	r0, [r6, #4]
   1ee3c:	b	1eea4 <__assert_fail@plt+0xda70>
   1ee40:	beq	1ee64 <__assert_fail@plt+0xda30>
   1ee44:	movw	r0, #45352	; 0xb128
   1ee48:	lsl	r1, r1, #2
   1ee4c:	mov	r2, #4
   1ee50:	movt	r0, #4
   1ee54:	ldr	r3, [r0]
   1ee58:	ldr	r0, [r6, #8]
   1ee5c:	blx	r3
   1ee60:	b	1ee78 <__assert_fail@plt+0xda44>
   1ee64:	movw	r0, #45348	; 0xb124
   1ee68:	movt	r0, #4
   1ee6c:	ldr	r1, [r0]
   1ee70:	mov	r0, #4
   1ee74:	blx	r1
   1ee78:	mov	r1, #1
   1ee7c:	str	r0, [r6, #8]
   1ee80:	str	r1, [r6]
   1ee84:	ldr	r1, [r6, #4]
   1ee88:	cmp	r1, #0
   1ee8c:	rsbmi	r1, r1, #0
   1ee90:	cmp	r1, #2
   1ee94:	blt	1eea0 <__assert_fail@plt+0xda6c>
   1ee98:	mov	r1, #0
   1ee9c:	str	r1, [r6, #4]
   1eea0:	str	r4, [r0]
   1eea4:	ldr	r0, [sp, #4]
   1eea8:	add	r7, r0, #1
   1eeac:	cmp	r7, #2
   1eeb0:	bcc	1ef70 <__assert_fail@plt+0xdb3c>
   1eeb4:	cmp	r7, r5
   1eeb8:	bcs	1ef70 <__assert_fail@plt+0xdb3c>
   1eebc:	ldr	r0, [sp, #4]
   1eec0:	mov	r8, #0
   1eec4:	mov	sl, #1
   1eec8:	rsb	r0, r0, #0
   1eecc:	str	r0, [sp]
   1eed0:	b	1eef0 <__assert_fail@plt+0xdabc>
   1eed4:	mov	r0, r6
   1eed8:	mov	r1, r6
   1eedc:	add	r2, sp, #8
   1eee0:	str	r8, [sp, #12]
   1eee4:	bl	17dd0 <__assert_fail@plt+0x699c>
   1eee8:	cmp	r5, r7
   1eeec:	bls	1ef70 <__assert_fail@plt+0xdb3c>
   1eef0:	movw	r0, #37256	; 0x9188
   1eef4:	movt	r0, #3
   1eef8:	str	r0, [sp, #16]
   1eefc:	ldr	r0, [sp]
   1ef00:	str	r8, [sp, #12]
   1ef04:	str	r8, [sp, #8]
   1ef08:	adds	r9, r0, r5
   1ef0c:	ldr	r0, [sp, #4]
   1ef10:	sub	r5, r5, r0
   1ef14:	beq	1eed4 <__assert_fail@plt+0xdaa0>
   1ef18:	movw	r0, #45348	; 0xb124
   1ef1c:	str	sl, [sp, #12]
   1ef20:	movt	r0, #4
   1ef24:	ldr	r1, [r0]
   1ef28:	mov	r0, #4
   1ef2c:	blx	r1
   1ef30:	str	r0, [sp, #16]
   1ef34:	str	sl, [sp, #8]
   1ef38:	mov	r4, r0
   1ef3c:	str	r9, [r0]
   1ef40:	mov	r0, r6
   1ef44:	mov	r1, r6
   1ef48:	add	r2, sp, #8
   1ef4c:	bl	17dd0 <__assert_fail@plt+0x699c>
   1ef50:	movw	r0, #45356	; 0xb12c
   1ef54:	mov	r1, #4
   1ef58:	movt	r0, #4
   1ef5c:	ldr	r2, [r0]
   1ef60:	mov	r0, r4
   1ef64:	blx	r2
   1ef68:	cmp	r5, r7
   1ef6c:	bhi	1eef0 <__assert_fail@plt+0xdabc>
   1ef70:	sub	sp, fp, #28
   1ef74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef78:	mov	r2, #2
   1ef7c:	b	1edec <__assert_fail@plt+0xd9b8>
   1ef80:	mov	r2, #1
   1ef84:	b	1edec <__assert_fail@plt+0xd9b8>
   1ef88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef8c:	add	fp, sp, #28
   1ef90:	sub	sp, sp, #28
   1ef94:	cmp	r1, r2
   1ef98:	mov	r7, #0
   1ef9c:	mov	r4, r0
   1efa0:	mov	r6, r2
   1efa4:	mov	r5, r1
   1efa8:	mov	r0, #0
   1efac:	movwcs	r7, #1
   1efb0:	bcc	1efd0 <__assert_fail@plt+0xdb9c>
   1efb4:	mov	r0, #1
   1efb8:	str	r0, [r4, #4]
   1efbc:	ldr	r1, [r4]
   1efc0:	cmp	r1, #0
   1efc4:	ble	1efd8 <__assert_fail@plt+0xdba4>
   1efc8:	ldr	r0, [r4, #8]
   1efcc:	b	1f038 <__assert_fail@plt+0xdc04>
   1efd0:	str	r0, [r4, #4]
   1efd4:	b	1f03c <__assert_fail@plt+0xdc08>
   1efd8:	beq	1effc <__assert_fail@plt+0xdbc8>
   1efdc:	movw	r0, #45352	; 0xb128
   1efe0:	lsl	r1, r1, #2
   1efe4:	mov	r2, #4
   1efe8:	movt	r0, #4
   1efec:	ldr	r3, [r0]
   1eff0:	ldr	r0, [r4, #8]
   1eff4:	blx	r3
   1eff8:	b	1f010 <__assert_fail@plt+0xdbdc>
   1effc:	movw	r0, #45348	; 0xb124
   1f000:	movt	r0, #4
   1f004:	ldr	r1, [r0]
   1f008:	mov	r0, #4
   1f00c:	blx	r1
   1f010:	mov	r1, #1
   1f014:	str	r0, [r4, #8]
   1f018:	str	r1, [r4]
   1f01c:	ldr	r1, [r4, #4]
   1f020:	cmp	r1, #0
   1f024:	rsbmi	r1, r1, #0
   1f028:	cmp	r1, #2
   1f02c:	blt	1f038 <__assert_fail@plt+0xdc04>
   1f030:	mov	r1, #0
   1f034:	str	r1, [r4, #4]
   1f038:	str	r7, [r0]
   1f03c:	mov	r9, #0
   1f040:	subs	r7, r5, r6
   1f044:	movw	r0, #37256	; 0x9188
   1f048:	mov	r2, #1
   1f04c:	mov	sl, #1
   1f050:	movcc	r7, r9
   1f054:	cmp	r6, r5, lsr #1
   1f058:	movt	r0, #3
   1f05c:	movls	r7, r6
   1f060:	str	r0, [sp, #12]
   1f064:	add	r0, sp, #4
   1f068:	str	r9, [sp, #8]
   1f06c:	str	r9, [sp, #4]
   1f070:	mov	r1, r7
   1f074:	bl	1edec <__assert_fail@plt+0xd9b8>
   1f078:	cmp	r7, #0
   1f07c:	beq	1f118 <__assert_fail@plt+0xdce4>
   1f080:	add	r8, sp, #16
   1f084:	b	1f0e4 <__assert_fail@plt+0xdcb0>
   1f088:	movw	r0, #45348	; 0xb124
   1f08c:	str	sl, [sp, #20]
   1f090:	movt	r0, #4
   1f094:	ldr	r1, [r0]
   1f098:	mov	r0, #4
   1f09c:	blx	r1
   1f0a0:	str	r0, [sp, #24]
   1f0a4:	str	sl, [sp, #16]
   1f0a8:	mov	r6, r0
   1f0ac:	str	r5, [r0]
   1f0b0:	mov	r0, r4
   1f0b4:	mov	r1, r4
   1f0b8:	mov	r2, r8
   1f0bc:	bl	17dd0 <__assert_fail@plt+0x699c>
   1f0c0:	movw	r0, #45356	; 0xb12c
   1f0c4:	mov	r1, #4
   1f0c8:	movt	r0, #4
   1f0cc:	ldr	r2, [r0]
   1f0d0:	mov	r0, r6
   1f0d4:	blx	r2
   1f0d8:	sub	r5, r5, #1
   1f0dc:	subs	r7, r7, #1
   1f0e0:	beq	1f118 <__assert_fail@plt+0xdce4>
   1f0e4:	movw	r0, #37256	; 0x9188
   1f0e8:	cmp	r5, #0
   1f0ec:	movt	r0, #3
   1f0f0:	str	r0, [sp, #24]
   1f0f4:	str	r9, [sp, #20]
   1f0f8:	str	r9, [sp, #16]
   1f0fc:	bne	1f088 <__assert_fail@plt+0xdc54>
   1f100:	mov	r0, r4
   1f104:	mov	r1, r4
   1f108:	mov	r2, r8
   1f10c:	str	r9, [sp, #20]
   1f110:	bl	17dd0 <__assert_fail@plt+0x699c>
   1f114:	b	1f0d8 <__assert_fail@plt+0xdca4>
   1f118:	mov	r0, #2
   1f11c:	add	r3, sp, #4
   1f120:	mov	r1, #0
   1f124:	mov	r2, r4
   1f128:	str	r0, [sp]
   1f12c:	mov	r0, r4
   1f130:	bl	18468 <__assert_fail@plt+0x7034>
   1f134:	cmp	r0, #0
   1f138:	bne	1f168 <__assert_fail@plt+0xdd34>
   1f13c:	ldr	r0, [sp, #4]
   1f140:	cmp	r0, #0
   1f144:	beq	1f160 <__assert_fail@plt+0xdd2c>
   1f148:	movw	r1, #45356	; 0xb12c
   1f14c:	movt	r1, #4
   1f150:	ldr	r2, [r1]
   1f154:	lsl	r1, r0, #2
   1f158:	ldr	r0, [sp, #12]
   1f15c:	blx	r2
   1f160:	sub	sp, fp, #28
   1f164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f168:	movw	r0, #38241	; 0x9561
   1f16c:	movw	r1, #37260	; 0x918c
   1f170:	movw	r3, #38251	; 0x956b
   1f174:	movw	r2, #2521	; 0x9d9
   1f178:	movt	r0, #3
   1f17c:	movt	r1, #3
   1f180:	movt	r3, #3
   1f184:	bl	11434 <__assert_fail@plt>
   1f188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f18c:	add	fp, sp, #28
   1f190:	sub	sp, sp, #116	; 0x74
   1f194:	mov	r9, r0
   1f198:	mov	r8, r1
   1f19c:	ldr	r0, [r0, #4]
   1f1a0:	ldr	r1, [r9, #8]
   1f1a4:	cmp	r0, #0
   1f1a8:	mov	r2, r0
   1f1ac:	ldr	r1, [r1]
   1f1b0:	movwne	r2, #1
   1f1b4:	tst	r1, r2
   1f1b8:	beq	1f1f0 <__assert_fail@plt+0xddbc>
   1f1bc:	cmp	r0, #0
   1f1c0:	beq	2013c <__assert_fail@plt+0xed08>
   1f1c4:	rsbmi	r0, r0, #0
   1f1c8:	cmp	r0, #1
   1f1cc:	bgt	1f224 <__assert_fail@plt+0xddf0>
   1f1d0:	cmp	r1, #63	; 0x3f
   1f1d4:	bhi	1f224 <__assert_fail@plt+0xddf0>
   1f1d8:	lsr	r0, r1, #1
   1f1dc:	movw	r1, #38620	; 0x96dc
   1f1e0:	mov	r2, #2
   1f1e4:	movt	r1, #51561	; 0xc969
   1f1e8:	and	r7, r2, r1, lsr r0
   1f1ec:	b	20110 <__assert_fail@plt+0xecdc>
   1f1f0:	cmp	r0, #0
   1f1f4:	mov	r2, r0
   1f1f8:	mov	r7, #0
   1f1fc:	rsbmi	r2, r0, #0
   1f200:	cmp	r2, #1
   1f204:	bgt	20110 <__assert_fail@plt+0xecdc>
   1f208:	sub	r1, r1, #2
   1f20c:	cmp	r0, #0
   1f210:	clz	r1, r1
   1f214:	lsr	r1, r1, #5
   1f218:	lslne	r0, r1, #1
   1f21c:	mov	r7, r0
   1f220:	b	20110 <__assert_fail@plt+0xecdc>
   1f224:	movw	r0, #45348	; 0xb124
   1f228:	mov	r4, #1
   1f22c:	movt	r0, #4
   1f230:	str	r4, [fp, #-36]	; 0xffffffdc
   1f234:	ldr	r1, [r0]
   1f238:	mov	r0, #4
   1f23c:	blx	r1
   1f240:	movw	r1, #55191	; 0xd797
   1f244:	str	r0, [fp, #-32]	; 0xffffffe0
   1f248:	str	r4, [fp, #-40]	; 0xffffffd8
   1f24c:	movt	r1, #49359	; 0xc0cf
   1f250:	str	r1, [r0]
   1f254:	sub	r0, fp, #40	; 0x28
   1f258:	mov	r1, r9
   1f25c:	mov	r2, r0
   1f260:	bl	1a360 <__assert_fail@plt+0x8f2c>
   1f264:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1f268:	cmp	r0, #0
   1f26c:	beq	1f27c <__assert_fail@plt+0xde48>
   1f270:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1f274:	ldr	r4, [r0]
   1f278:	b	1f280 <__assert_fail@plt+0xde4c>
   1f27c:	mov	r4, #0
   1f280:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f284:	cmp	r0, #0
   1f288:	beq	1f2a4 <__assert_fail@plt+0xde70>
   1f28c:	movw	r1, #45356	; 0xb12c
   1f290:	movt	r1, #4
   1f294:	ldr	r2, [r1]
   1f298:	lsl	r1, r0, #2
   1f29c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1f2a0:	blx	r2
   1f2a4:	mov	r7, #0
   1f2a8:	cmp	r4, #1
   1f2ac:	bne	20110 <__assert_fail@plt+0xecdc>
   1f2b0:	ldr	r1, [r9, #4]
   1f2b4:	cmp	r1, #0
   1f2b8:	mov	sl, r1
   1f2bc:	rsbmi	sl, r1, #0
   1f2c0:	cmp	sl, #1
   1f2c4:	bgt	1f2e4 <__assert_fail@plt+0xdeb0>
   1f2c8:	mov	r7, #2
   1f2cc:	cmp	r1, #0
   1f2d0:	beq	20110 <__assert_fail@plt+0xecdc>
   1f2d4:	ldr	r0, [r9, #8]
   1f2d8:	ldr	r0, [r0]
   1f2dc:	cmp	r0, #960	; 0x3c0
   1f2e0:	bls	20110 <__assert_fail@plt+0xecdc>
   1f2e4:	movw	r0, #37256	; 0x9188
   1f2e8:	add	r2, sp, #56	; 0x38
   1f2ec:	mov	r5, #0
   1f2f0:	str	r9, [sp, #20]
   1f2f4:	movt	r0, #3
   1f2f8:	cmp	r2, r9
   1f2fc:	mov	r2, #0
   1f300:	str	r0, [sp, #64]	; 0x40
   1f304:	str	r5, [sp, #60]	; 0x3c
   1f308:	str	r0, [sp, #52]	; 0x34
   1f30c:	str	r5, [sp, #48]	; 0x30
   1f310:	str	r5, [sp, #56]	; 0x38
   1f314:	str	r5, [sp, #44]	; 0x2c
   1f318:	beq	1f4e8 <__assert_fail@plt+0xe0b4>
   1f31c:	cmp	sl, #1
   1f320:	blt	1f4d0 <__assert_fail@plt+0xe09c>
   1f324:	movw	r1, #45348	; 0xb124
   1f328:	mov	r4, sl
   1f32c:	movle	r4, #1
   1f330:	movt	r1, #4
   1f334:	lsl	r0, r4, #2
   1f338:	ldr	r1, [r1]
   1f33c:	blx	r1
   1f340:	str	r0, [sp, #64]	; 0x40
   1f344:	str	r4, [sp, #56]	; 0x38
   1f348:	mov	r2, #0
   1f34c:	ldr	r1, [sp, #60]	; 0x3c
   1f350:	cmp	r1, #0
   1f354:	rsbmi	r1, r1, #0
   1f358:	cmp	r1, r4
   1f35c:	movgt	r1, #0
   1f360:	strgt	r1, [sp, #60]	; 0x3c
   1f364:	cmp	sl, #4
   1f368:	ldr	r1, [r9, #8]
   1f36c:	bcc	1f454 <__assert_fail@plt+0xe020>
   1f370:	add	r3, r1, sl, lsl #2
   1f374:	cmp	r0, r3
   1f378:	bcs	1f388 <__assert_fail@plt+0xdf54>
   1f37c:	add	r3, r0, sl, lsl #2
   1f380:	cmp	r3, r1
   1f384:	bhi	1f454 <__assert_fail@plt+0xe020>
   1f388:	bic	r2, sl, #-2147483645	; 0x80000003
   1f38c:	mov	r3, #1
   1f390:	mov	r9, #0
   1f394:	str	r8, [sp, #8]
   1f398:	str	sl, [sp, #24]
   1f39c:	sub	r4, r2, #4
   1f3a0:	add	r3, r3, r4, lsr #2
   1f3a4:	cmp	r4, #12
   1f3a8:	and	r7, r3, #3
   1f3ac:	str	r7, [sp, #28]
   1f3b0:	bcc	1f418 <__assert_fail@plt+0xdfe4>
   1f3b4:	ldr	r7, [sp, #28]
   1f3b8:	mov	r4, #0
   1f3bc:	mov	r9, #0
   1f3c0:	sub	sl, r3, r7
   1f3c4:	add	r6, r1, r4
   1f3c8:	mov	r7, #48	; 0x30
   1f3cc:	add	r3, r0, r4
   1f3d0:	add	r4, r4, #64	; 0x40
   1f3d4:	subs	sl, sl, #4
   1f3d8:	add	r9, r9, #16
   1f3dc:	mov	r8, r6
   1f3e0:	mov	ip, r3
   1f3e4:	add	lr, r6, #16
   1f3e8:	vld1.32	{d16-d17}, [r8], r7
   1f3ec:	vst1.32	{d16-d17}, [ip], r7
   1f3f0:	add	r7, r3, #16
   1f3f4:	add	r3, r3, #32
   1f3f8:	vld1.32	{d16-d17}, [lr]
   1f3fc:	vst1.32	{d16-d17}, [r7]
   1f400:	add	r7, r6, #32
   1f404:	vld1.32	{d16-d17}, [r7]
   1f408:	vst1.32	{d16-d17}, [r3]
   1f40c:	vld1.32	{d16-d17}, [r8]
   1f410:	vst1.32	{d16-d17}, [ip]
   1f414:	bne	1f3c4 <__assert_fail@plt+0xdf90>
   1f418:	ldr	r6, [sp, #28]
   1f41c:	cmp	r6, #0
   1f420:	beq	1f440 <__assert_fail@plt+0xe00c>
   1f424:	add	r3, r1, r9, lsl #2
   1f428:	add	r7, r0, r9, lsl #2
   1f42c:	rsb	r4, r6, #0
   1f430:	vld1.32	{d16-d17}, [r3]!
   1f434:	adds	r4, r4, #1
   1f438:	vst1.32	{d16-d17}, [r7]!
   1f43c:	bcc	1f430 <__assert_fail@plt+0xdffc>
   1f440:	ldr	sl, [sp, #24]
   1f444:	ldr	r9, [sp, #20]
   1f448:	ldr	r8, [sp, #8]
   1f44c:	cmp	sl, r2
   1f450:	beq	1f4c4 <__assert_fail@plt+0xe090>
   1f454:	mvn	r3, r2
   1f458:	ands	r7, sl, #3
   1f45c:	add	r3, sl, r3
   1f460:	beq	1f478 <__assert_fail@plt+0xe044>
   1f464:	ldr	r6, [r1, r2, lsl #2]
   1f468:	subs	r7, r7, #1
   1f46c:	str	r6, [r0, r2, lsl #2]
   1f470:	add	r2, r2, #1
   1f474:	bne	1f464 <__assert_fail@plt+0xe030>
   1f478:	cmp	r3, #3
   1f47c:	bcc	1f4c4 <__assert_fail@plt+0xe090>
   1f480:	sub	r3, sl, r2
   1f484:	lsl	ip, r2, #2
   1f488:	mov	r7, r0
   1f48c:	add	r6, r1, #16
   1f490:	ldr	r4, [r1, ip]!
   1f494:	add	r2, r7, #16
   1f498:	subs	r3, r3, #4
   1f49c:	str	r4, [r7, ip]!
   1f4a0:	ldr	r4, [r1, #4]
   1f4a4:	str	r4, [r7, #4]
   1f4a8:	ldr	r4, [r1, #8]
   1f4ac:	str	r4, [r7, #8]
   1f4b0:	ldr	r1, [r1, #12]
   1f4b4:	str	r1, [r7, #12]
   1f4b8:	mov	r1, r6
   1f4bc:	mov	r7, r2
   1f4c0:	bne	1f48c <__assert_fail@plt+0xe058>
   1f4c4:	ldr	r1, [r9, #4]
   1f4c8:	rsb	r2, r1, #0
   1f4cc:	b	1f4dc <__assert_fail@plt+0xe0a8>
   1f4d0:	movw	r0, #37256	; 0x9188
   1f4d4:	rsb	r2, r1, #0
   1f4d8:	movt	r0, #3
   1f4dc:	cmp	r1, #0
   1f4e0:	str	r1, [sp, #60]	; 0x3c
   1f4e4:	movpl	r2, r1
   1f4e8:	str	r2, [sp, #60]	; 0x3c
   1f4ec:	ldr	r1, [r0]
   1f4f0:	subs	r1, r1, #1
   1f4f4:	str	r1, [r0]
   1f4f8:	bne	1f514 <__assert_fail@plt+0xe0e0>
   1f4fc:	add	r0, r0, #4
   1f500:	mov	r5, #0
   1f504:	ldr	r1, [r0, r5, lsl #2]
   1f508:	add	r5, r5, #1
   1f50c:	cmp	r1, #0
   1f510:	beq	1f504 <__assert_fail@plt+0xe0d0>
   1f514:	rsb	r0, r1, #0
   1f518:	and	r1, r1, r0
   1f51c:	mov	r0, #0
   1f520:	cmp	r0, r1, lsr #24
   1f524:	bne	1f53c <__assert_fail@plt+0xe108>
   1f528:	mov	r0, #0
   1f52c:	lsl	r1, r1, #8
   1f530:	add	r0, r0, #8
   1f534:	cmp	r1, #16777216	; 0x1000000
   1f538:	bcc	1f52c <__assert_fail@plt+0xe0f8>
   1f53c:	cmp	r1, #0
   1f540:	bmi	1f554 <__assert_fail@plt+0xe120>
   1f544:	lsl	r1, r1, #1
   1f548:	add	r0, r0, #1
   1f54c:	cmn	r1, #1
   1f550:	bgt	1f544 <__assert_fail@plt+0xe110>
   1f554:	mov	r1, #31
   1f558:	mov	r3, #2
   1f55c:	orr	r1, r1, r5, lsl #5
   1f560:	sub	r2, r1, r0
   1f564:	add	r0, sp, #44	; 0x2c
   1f568:	add	r1, sp, #56	; 0x38
   1f56c:	str	r2, [sp, #24]
   1f570:	bl	19038 <__assert_fail@plt+0x7c04>
   1f574:	movw	r5, #37256	; 0x9188
   1f578:	mov	r0, #0
   1f57c:	mov	r4, #1
   1f580:	movt	r5, #3
   1f584:	str	r5, [sp, #40]	; 0x28
   1f588:	str	r0, [sp, #32]
   1f58c:	movw	r0, #45348	; 0xb124
   1f590:	str	r4, [sp, #36]	; 0x24
   1f594:	movt	r0, #4
   1f598:	ldr	r1, [r0]
   1f59c:	mov	r0, #4
   1f5a0:	blx	r1
   1f5a4:	str	r0, [sp, #40]	; 0x28
   1f5a8:	str	r4, [sp, #32]
   1f5ac:	add	r2, sp, #32
   1f5b0:	add	r3, sp, #44	; 0x2c
   1f5b4:	ldr	r1, [sp, #36]	; 0x24
   1f5b8:	cmp	r1, #0
   1f5bc:	rsbmi	r1, r1, #0
   1f5c0:	cmp	r1, #2
   1f5c4:	movge	r1, #0
   1f5c8:	strge	r1, [sp, #36]	; 0x24
   1f5cc:	mov	r1, #2
   1f5d0:	str	r1, [r0]
   1f5d4:	ldr	r0, [sp, #24]
   1f5d8:	add	r1, sp, #56	; 0x38
   1f5dc:	str	r0, [sp]
   1f5e0:	mov	r0, r9
   1f5e4:	bl	20224 <__assert_fail@plt+0xedf0>
   1f5e8:	mov	r1, #0
   1f5ec:	cmp	r0, #0
   1f5f0:	mov	r7, #0
   1f5f4:	beq	1ff28 <__assert_fail@plt+0xeaf4>
   1f5f8:	ldmib	r9, {r0, r1}
   1f5fc:	mov	r2, #0
   1f600:	str	r2, [sp, #68]	; 0x44
   1f604:	str	r1, [sp, #76]	; 0x4c
   1f608:	cmp	r0, #0
   1f60c:	mov	r2, r0
   1f610:	rsbmi	r2, r0, #0
   1f614:	cmp	r0, #0
   1f618:	str	r2, [sp, #72]	; 0x48
   1f61c:	movwne	r0, #1
   1f620:	ldr	r1, [r1]
   1f624:	tst	r1, r0
   1f628:	beq	2015c <__assert_fail@plt+0xed28>
   1f62c:	mov	r7, #0
   1f630:	add	r0, sp, #32
   1f634:	sub	r1, fp, #52	; 0x34
   1f638:	add	r2, sp, #68	; 0x44
   1f63c:	mov	r3, #2
   1f640:	str	r5, [fp, #-44]	; 0xffffffd4
   1f644:	str	r8, [sp, #8]
   1f648:	str	r7, [fp, #-48]	; 0xffffffd0
   1f64c:	str	r7, [fp, #-52]	; 0xffffffcc
   1f650:	bl	1dc1c <__assert_fail@plt+0xc7e8>
   1f654:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1f658:	ldr	r4, [fp, #-48]	; 0xffffffd0
   1f65c:	cmp	r0, #0
   1f660:	beq	1f67c <__assert_fail@plt+0xe248>
   1f664:	movw	r1, #45356	; 0xb12c
   1f668:	movt	r1, #4
   1f66c:	ldr	r2, [r1]
   1f670:	lsl	r1, r0, #2
   1f674:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1f678:	blx	r2
   1f67c:	cmp	r4, #0
   1f680:	beq	1ff20 <__assert_fail@plt+0xeaec>
   1f684:	ldr	r0, [sp, #36]	; 0x24
   1f688:	mvn	r5, #0
   1f68c:	cmp	r0, #1
   1f690:	bne	1f6a0 <__assert_fail@plt+0xe26c>
   1f694:	ldr	r0, [sp, #40]	; 0x28
   1f698:	ldr	r0, [r0]
   1f69c:	sub	r5, r0, #1
   1f6a0:	mov	r6, #3
   1f6a4:	mov	r8, #2
   1f6a8:	add	r9, sp, #68	; 0x44
   1f6ac:	cmp	r6, r5
   1f6b0:	bcc	1f6c8 <__assert_fail@plt+0xe294>
   1f6b4:	b	1f7c8 <__assert_fail@plt+0xe394>
   1f6b8:	tst	r0, #1
   1f6bc:	bne	1f7d0 <__assert_fail@plt+0xe39c>
   1f6c0:	cmp	r6, r5
   1f6c4:	bcs	1f7c8 <__assert_fail@plt+0xe394>
   1f6c8:	add	r6, r6, #2
   1f6cc:	mov	r0, #0
   1f6d0:	mov	r1, #0
   1f6d4:	mov	r2, r9
   1f6d8:	str	r8, [sp]
   1f6dc:	mov	r7, #0
   1f6e0:	mov	r3, r6
   1f6e4:	bl	19e58 <__assert_fail@plt+0x8a24>
   1f6e8:	cmp	r0, #0
   1f6ec:	beq	1ff20 <__assert_fail@plt+0xeaec>
   1f6f0:	rsb	r1, r0, #0
   1f6f4:	mov	r3, #0
   1f6f8:	and	r1, r0, r1
   1f6fc:	cmp	r3, r1, lsr #24
   1f700:	bne	1f718 <__assert_fail@plt+0xe2e4>
   1f704:	mov	r3, #0
   1f708:	lsl	r1, r1, #8
   1f70c:	add	r3, r3, #8
   1f710:	cmp	r1, #16777216	; 0x1000000
   1f714:	bcc	1f708 <__assert_fail@plt+0xe2d4>
   1f718:	cmp	r1, #0
   1f71c:	bmi	1f730 <__assert_fail@plt+0xe2fc>
   1f720:	lsl	r1, r1, #1
   1f724:	add	r3, r3, #1
   1f728:	cmn	r1, #1
   1f72c:	bgt	1f720 <__assert_fail@plt+0xe2ec>
   1f730:	lsr	r2, r0, #1
   1f734:	lsr	r4, r6, #1
   1f738:	rsb	r3, r3, #31
   1f73c:	mov	r0, #0
   1f740:	b	1f748 <__assert_fail@plt+0xe314>
   1f744:	rsb	r3, r3, #32
   1f748:	eor	r7, r4, r4, lsr #1
   1f74c:	cmp	r4, r2, lsr r3
   1f750:	lsr	r1, r2, r3
   1f754:	and	r7, r7, r3
   1f758:	eor	r0, r7, r0
   1f75c:	bls	1f77c <__assert_fail@plt+0xe348>
   1f760:	cmp	r1, #0
   1f764:	beq	1f6b8 <__assert_fail@plt+0xe284>
   1f768:	and	r3, r1, r4
   1f76c:	sub	r2, r4, r1
   1f770:	mov	r4, r1
   1f774:	eor	r0, r0, r3
   1f778:	b	1f784 <__assert_fail@plt+0xe350>
   1f77c:	subs	r2, r1, r4
   1f780:	beq	2011c <__assert_fail@plt+0xece8>
   1f784:	rsb	r1, r2, #0
   1f788:	mov	r3, #0
   1f78c:	and	r7, r2, r1
   1f790:	cmp	r3, r7, lsr #24
   1f794:	bne	1f7ac <__assert_fail@plt+0xe378>
   1f798:	mov	r3, #0
   1f79c:	lsl	r7, r7, #8
   1f7a0:	add	r3, r3, #8
   1f7a4:	cmp	r7, #16777216	; 0x1000000
   1f7a8:	bcc	1f79c <__assert_fail@plt+0xe368>
   1f7ac:	cmp	r7, #0
   1f7b0:	bmi	1f744 <__assert_fail@plt+0xe310>
   1f7b4:	lsl	r7, r7, #1
   1f7b8:	add	r3, r3, #1
   1f7bc:	cmn	r7, #1
   1f7c0:	bgt	1f7b4 <__assert_fail@plt+0xe380>
   1f7c4:	b	1f744 <__assert_fail@plt+0xe310>
   1f7c8:	mov	r7, #1
   1f7cc:	b	1ff20 <__assert_fail@plt+0xeaec>
   1f7d0:	movw	r0, #37256	; 0x9188
   1f7d4:	mov	r5, #0
   1f7d8:	movt	r0, #3
   1f7dc:	str	r0, [fp, #-56]	; 0xffffffc8
   1f7e0:	ldr	r0, [sp, #72]	; 0x48
   1f7e4:	str	r5, [fp, #-60]	; 0xffffffc4
   1f7e8:	str	r5, [fp, #-64]	; 0xffffffc0
   1f7ec:	cmp	r0, #0
   1f7f0:	bmi	20194 <__assert_fail@plt+0xed60>
   1f7f4:	ldr	r2, [sp, #76]	; 0x4c
   1f7f8:	ldr	r4, [r2]
   1f7fc:	cmn	r4, #1
   1f800:	mov	r1, r4
   1f804:	bne	1f830 <__assert_fail@plt+0xe3fc>
   1f808:	add	r7, r2, #4
   1f80c:	sub	r3, r0, #1
   1f810:	mov	r2, #0
   1f814:	cmp	r3, r2
   1f818:	beq	1f91c <__assert_fail@plt+0xe4e8>
   1f81c:	ldr	r1, [r7, r2, lsl #2]
   1f820:	add	r5, r2, #1
   1f824:	mov	r2, r5
   1f828:	cmn	r1, #1
   1f82c:	beq	1f814 <__assert_fail@plt+0xe3e0>
   1f830:	add	r2, r1, #1
   1f834:	mov	r3, #0
   1f838:	bic	r7, r2, r1
   1f83c:	cmp	r3, r7, lsr #24
   1f840:	bne	1f858 <__assert_fail@plt+0xe424>
   1f844:	mov	r3, #0
   1f848:	lsl	r7, r7, #8
   1f84c:	add	r3, r3, #8
   1f850:	cmp	r7, #16777216	; 0x1000000
   1f854:	bcc	1f848 <__assert_fail@plt+0xe414>
   1f858:	cmp	r7, #0
   1f85c:	bmi	1f870 <__assert_fail@plt+0xe43c>
   1f860:	lsl	r7, r7, #1
   1f864:	add	r3, r3, #1
   1f868:	cmn	r7, #1
   1f86c:	bgt	1f860 <__assert_fail@plt+0xe42c>
   1f870:	mov	r1, #31
   1f874:	orr	r1, r1, r5, lsl #5
   1f878:	sub	r7, r1, r3
   1f87c:	mov	r2, #1
   1f880:	mov	r1, #0
   1f884:	tst	r6, #2
   1f888:	add	r5, r2, r6, lsr #2
   1f88c:	subeq	r5, r1, r6, lsr #2
   1f890:	cmp	r7, #0
   1f894:	beq	201b4 <__assert_fail@plt+0xed80>
   1f898:	cmp	r0, #1
   1f89c:	bgt	1f8b0 <__assert_fail@plt+0xe47c>
   1f8a0:	cmp	r4, #5
   1f8a4:	bcc	201cc <__assert_fail@plt+0xed98>
   1f8a8:	cmp	r0, #0
   1f8ac:	beq	201cc <__assert_fail@plt+0xed98>
   1f8b0:	tst	r4, #1
   1f8b4:	beq	201e4 <__assert_fail@plt+0xedb0>
   1f8b8:	movw	r0, #45348	; 0xb124
   1f8bc:	mov	r4, #1
   1f8c0:	movt	r0, #4
   1f8c4:	str	r4, [fp, #-36]	; 0xffffffdc
   1f8c8:	ldr	r1, [r0]
   1f8cc:	mov	r0, #4
   1f8d0:	blx	r1
   1f8d4:	str	r0, [fp, #-32]	; 0xffffffe0
   1f8d8:	str	r4, [fp, #-40]	; 0xffffffd8
   1f8dc:	str	r4, [r0]
   1f8e0:	str	r4, [fp, #-60]	; 0xffffffc4
   1f8e4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1f8e8:	cmp	r1, #0
   1f8ec:	ble	1f8f8 <__assert_fail@plt+0xe4c4>
   1f8f0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1f8f4:	b	1f95c <__assert_fail@plt+0xe528>
   1f8f8:	beq	1f924 <__assert_fail@plt+0xe4f0>
   1f8fc:	movw	r0, #45352	; 0xb128
   1f900:	lsl	r1, r1, #2
   1f904:	mov	r2, #4
   1f908:	movt	r0, #4
   1f90c:	ldr	r3, [r0]
   1f910:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1f914:	blx	r3
   1f918:	b	1f938 <__assert_fail@plt+0xe504>
   1f91c:	lsl	r7, r0, #5
   1f920:	b	1f87c <__assert_fail@plt+0xe448>
   1f924:	movw	r0, #45348	; 0xb124
   1f928:	movt	r0, #4
   1f92c:	ldr	r1, [r0]
   1f930:	mov	r0, #4
   1f934:	blx	r1
   1f938:	mov	r1, #1
   1f93c:	str	r0, [fp, #-56]	; 0xffffffc8
   1f940:	str	r1, [fp, #-64]	; 0xffffffc0
   1f944:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1f948:	cmp	r1, #0
   1f94c:	rsbmi	r1, r1, #0
   1f950:	cmp	r1, #2
   1f954:	movge	r1, #0
   1f958:	strge	r1, [fp, #-60]	; 0xffffffc4
   1f95c:	mov	r1, #1
   1f960:	cmp	r5, #0
   1f964:	str	r1, [r0]
   1f968:	bmi	1f98c <__assert_fail@plt+0xe558>
   1f96c:	beq	1f9ac <__assert_fail@plt+0xe578>
   1f970:	mov	r0, #1
   1f974:	str	r0, [sp, #36]	; 0x24
   1f978:	ldr	r1, [sp, #32]
   1f97c:	cmp	r1, #0
   1f980:	ble	1f9b8 <__assert_fail@plt+0xe584>
   1f984:	ldr	r0, [sp, #40]	; 0x28
   1f988:	b	1fa3c <__assert_fail@plt+0xe608>
   1f98c:	mvn	r0, #0
   1f990:	rsb	r4, r5, #0
   1f994:	str	r0, [sp, #36]	; 0x24
   1f998:	ldr	r1, [sp, #32]
   1f99c:	cmp	r1, #0
   1f9a0:	ble	1f9dc <__assert_fail@plt+0xe5a8>
   1f9a4:	ldr	r0, [sp, #40]	; 0x28
   1f9a8:	b	1fa7c <__assert_fail@plt+0xe648>
   1f9ac:	mov	r0, #0
   1f9b0:	str	r0, [sp, #36]	; 0x24
   1f9b4:	b	1fa80 <__assert_fail@plt+0xe64c>
   1f9b8:	beq	1fa00 <__assert_fail@plt+0xe5cc>
   1f9bc:	movw	r0, #45352	; 0xb128
   1f9c0:	lsl	r1, r1, #2
   1f9c4:	mov	r2, #4
   1f9c8:	movt	r0, #4
   1f9cc:	ldr	r3, [r0]
   1f9d0:	ldr	r0, [sp, #40]	; 0x28
   1f9d4:	blx	r3
   1f9d8:	b	1fa14 <__assert_fail@plt+0xe5e0>
   1f9dc:	beq	1fa44 <__assert_fail@plt+0xe610>
   1f9e0:	movw	r0, #45352	; 0xb128
   1f9e4:	lsl	r1, r1, #2
   1f9e8:	mov	r2, #4
   1f9ec:	movt	r0, #4
   1f9f0:	ldr	r3, [r0]
   1f9f4:	ldr	r0, [sp, #40]	; 0x28
   1f9f8:	blx	r3
   1f9fc:	b	1fa58 <__assert_fail@plt+0xe624>
   1fa00:	movw	r0, #45348	; 0xb124
   1fa04:	movt	r0, #4
   1fa08:	ldr	r1, [r0]
   1fa0c:	mov	r0, #4
   1fa10:	blx	r1
   1fa14:	mov	r1, #1
   1fa18:	str	r1, [sp, #32]
   1fa1c:	str	r0, [sp, #40]	; 0x28
   1fa20:	ldr	r1, [sp, #36]	; 0x24
   1fa24:	cmp	r1, #0
   1fa28:	rsbmi	r1, r1, #0
   1fa2c:	cmp	r1, #2
   1fa30:	blt	1fa3c <__assert_fail@plt+0xe608>
   1fa34:	mov	r1, #0
   1fa38:	str	r1, [sp, #36]	; 0x24
   1fa3c:	str	r5, [r0]
   1fa40:	b	1fa80 <__assert_fail@plt+0xe64c>
   1fa44:	movw	r0, #45348	; 0xb124
   1fa48:	movt	r0, #4
   1fa4c:	ldr	r1, [r0]
   1fa50:	mov	r0, #4
   1fa54:	blx	r1
   1fa58:	mov	r1, #1
   1fa5c:	str	r1, [sp, #32]
   1fa60:	str	r0, [sp, #40]	; 0x28
   1fa64:	ldr	r1, [sp, #36]	; 0x24
   1fa68:	cmp	r1, #0
   1fa6c:	rsbmi	r1, r1, #0
   1fa70:	cmp	r1, #2
   1fa74:	movge	r1, #0
   1fa78:	strge	r1, [sp, #36]	; 0x24
   1fa7c:	str	r4, [r0]
   1fa80:	ldr	r0, [sp, #72]	; 0x48
   1fa84:	cmp	r0, #0
   1fa88:	rsbmi	r0, r0, #0
   1fa8c:	cmp	r0, #0
   1fa90:	beq	1fb04 <__assert_fail@plt+0xe6d0>
   1fa94:	sub	r2, r0, #1
   1fa98:	ldr	r0, [sp, #76]	; 0x4c
   1fa9c:	ldr	r0, [r0, r2, lsl #2]
   1faa0:	cmp	r0, #0
   1faa4:	beq	20204 <__assert_fail@plt+0xedd0>
   1faa8:	mov	r1, #0
   1faac:	cmp	r1, r0, lsr #24
   1fab0:	bne	1fac8 <__assert_fail@plt+0xe694>
   1fab4:	mov	r1, #0
   1fab8:	lsl	r0, r0, #8
   1fabc:	add	r1, r1, #8
   1fac0:	cmp	r0, #16777216	; 0x1000000
   1fac4:	bcc	1fab8 <__assert_fail@plt+0xe684>
   1fac8:	lsl	r2, r2, #5
   1facc:	cmp	r0, #0
   1fad0:	bmi	1fae4 <__assert_fail@plt+0xe6b0>
   1fad4:	lsl	r0, r0, #1
   1fad8:	add	r1, r1, #1
   1fadc:	cmn	r0, #1
   1fae0:	bgt	1fad4 <__assert_fail@plt+0xe6a0>
   1fae4:	mvn	r0, r1
   1fae8:	orr	r1, r2, #31
   1faec:	add	sl, r1, r0
   1faf0:	cmp	sl, r7
   1faf4:	bcs	1fb08 <__assert_fail@plt+0xe6d4>
   1faf8:	mov	r0, #1
   1fafc:	mov	r4, #0
   1fb00:	b	1fdc8 <__assert_fail@plt+0xe994>
   1fb04:	mvn	sl, #0
   1fb08:	mov	r0, #0
   1fb0c:	str	r7, [sp, #28]
   1fb10:	sub	r4, fp, #40	; 0x28
   1fb14:	sub	r8, fp, #64	; 0x40
   1fb18:	add	r7, sp, #32
   1fb1c:	str	r5, [sp, #16]
   1fb20:	sub	r0, r0, r5, lsl #1
   1fb24:	str	r0, [sp, #12]
   1fb28:	b	1fc20 <__assert_fail@plt+0xe7ec>
   1fb2c:	ldr	r2, [sp, #16]
   1fb30:	mov	r0, r7
   1fb34:	mov	r1, r7
   1fb38:	mov	r9, r7
   1fb3c:	bl	17bfc <__assert_fail@plt+0x67c8>
   1fb40:	sub	r5, fp, #64	; 0x40
   1fb44:	sub	r2, fp, #40	; 0x28
   1fb48:	ldm	r5, {r3, r4, r5}
   1fb4c:	ldm	r2, {r0, r1, r2}
   1fb50:	str	r4, [fp, #-36]	; 0xffffffdc
   1fb54:	sub	r4, fp, #40	; 0x28
   1fb58:	str	r3, [fp, #-40]	; 0xffffffd8
   1fb5c:	sub	r3, fp, #64	; 0x40
   1fb60:	str	r5, [fp, #-32]	; 0xffffffe0
   1fb64:	stm	r3, {r0, r1, r2}
   1fb68:	mov	r0, r4
   1fb6c:	mov	r1, r4
   1fb70:	mov	r2, r8
   1fb74:	bl	1707c <__assert_fail@plt+0x5c48>
   1fb78:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1fb7c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1fb80:	ldr	r1, [r1]
   1fb84:	cmp	r0, #0
   1fb88:	movwne	r0, #1
   1fb8c:	tst	r1, r0
   1fb90:	movne	r0, r4
   1fb94:	movne	r1, r4
   1fb98:	addne	r2, sp, #68	; 0x44
   1fb9c:	blne	1707c <__assert_fail@plt+0x5c48>
   1fba0:	mov	r0, r4
   1fba4:	mov	r1, r4
   1fba8:	mov	r2, #1
   1fbac:	mov	r3, #2
   1fbb0:	bl	19038 <__assert_fail@plt+0x7c04>
   1fbb4:	ldr	r2, [sp, #12]
   1fbb8:	mov	r0, r8
   1fbbc:	mov	r1, r8
   1fbc0:	bl	17bfc <__assert_fail@plt+0x67c8>
   1fbc4:	mov	r0, r8
   1fbc8:	mov	r1, r4
   1fbcc:	mov	r2, r8
   1fbd0:	bl	1707c <__assert_fail@plt+0x5c48>
   1fbd4:	mov	r0, #2
   1fbd8:	mov	r1, r8
   1fbdc:	mov	r2, r8
   1fbe0:	add	r3, sp, #68	; 0x44
   1fbe4:	str	r0, [sp]
   1fbe8:	mov	r0, #0
   1fbec:	bl	18468 <__assert_fail@plt+0x7034>
   1fbf0:	mov	r7, r9
   1fbf4:	mov	r5, #2
   1fbf8:	mov	r0, #0
   1fbfc:	mov	r1, r4
   1fc00:	mov	r2, r4
   1fc04:	add	r3, sp, #68	; 0x44
   1fc08:	str	r5, [sp]
   1fc0c:	bl	18468 <__assert_fail@plt+0x7034>
   1fc10:	ldr	r0, [sp, #28]
   1fc14:	sub	sl, sl, #1
   1fc18:	cmp	sl, r0
   1fc1c:	bcc	1fdac <__assert_fail@plt+0xe978>
   1fc20:	mov	r0, r4
   1fc24:	mov	r1, r4
   1fc28:	mov	r2, r8
   1fc2c:	bl	17dd0 <__assert_fail@plt+0x699c>
   1fc30:	ldr	r0, [sp, #72]	; 0x48
   1fc34:	mov	r1, r7
   1fc38:	mov	r2, r7
   1fc3c:	add	r3, sp, #68	; 0x44
   1fc40:	lsr	r0, r0, #31
   1fc44:	str	r0, [sp]
   1fc48:	mov	r0, #0
   1fc4c:	bl	18468 <__assert_fail@plt+0x7034>
   1fc50:	mov	r0, r8
   1fc54:	mov	r1, r8
   1fc58:	mov	r2, r8
   1fc5c:	bl	17dd0 <__assert_fail@plt+0x699c>
   1fc60:	movw	r0, #45348	; 0xb124
   1fc64:	mov	r9, #1
   1fc68:	movt	r0, #4
   1fc6c:	str	r9, [fp, #-48]	; 0xffffffd0
   1fc70:	ldr	r1, [r0]
   1fc74:	mov	r0, #4
   1fc78:	blx	r1
   1fc7c:	sub	r6, fp, #52	; 0x34
   1fc80:	mov	r5, #2
   1fc84:	str	r0, [fp, #-44]	; 0xffffffd4
   1fc88:	str	r9, [fp, #-52]	; 0xffffffcc
   1fc8c:	mov	r1, r7
   1fc90:	str	r5, [r0]
   1fc94:	mov	r0, r6
   1fc98:	mov	r2, r6
   1fc9c:	bl	17dd0 <__assert_fail@plt+0x699c>
   1fca0:	mov	r0, r8
   1fca4:	mov	r1, r8
   1fca8:	mov	r2, r6
   1fcac:	bl	179e4 <__assert_fail@plt+0x65b0>
   1fcb0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1fcb4:	cmp	r0, #0
   1fcb8:	beq	1fcd4 <__assert_fail@plt+0xe8a0>
   1fcbc:	movw	r1, #45356	; 0xb12c
   1fcc0:	movt	r1, #4
   1fcc4:	ldr	r2, [r1]
   1fcc8:	lsl	r1, r0, #2
   1fccc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1fcd0:	blx	r2
   1fcd4:	mov	r0, #0
   1fcd8:	mov	r1, r8
   1fcdc:	mov	r2, r8
   1fce0:	add	r3, sp, #68	; 0x44
   1fce4:	str	r5, [sp]
   1fce8:	bl	18468 <__assert_fail@plt+0x7034>
   1fcec:	mov	r0, r7
   1fcf0:	mov	r1, r7
   1fcf4:	mov	r2, r7
   1fcf8:	bl	17dd0 <__assert_fail@plt+0x699c>
   1fcfc:	ldr	r0, [sp, #28]
   1fd00:	cmp	sl, r0
   1fd04:	beq	1fb2c <__assert_fail@plt+0xe6f8>
   1fd08:	ldr	r2, [sp, #72]	; 0x48
   1fd0c:	cmp	r2, #0
   1fd10:	mov	r0, r2
   1fd14:	rsbmi	r0, r2, #0
   1fd18:	cmp	r0, sl, lsr #5
   1fd1c:	ble	1fd50 <__assert_fail@plt+0xe91c>
   1fd20:	ldr	ip, [sp, #76]	; 0x4c
   1fd24:	lsr	r1, sl, #5
   1fd28:	and	r3, sl, #31
   1fd2c:	mov	r0, #1
   1fd30:	cmn	r2, #1
   1fd34:	ldr	r4, [ip, r1, lsl #2]
   1fd38:	and	r0, r0, r4, lsr r3
   1fd3c:	ble	1fd60 <__assert_fail@plt+0xe92c>
   1fd40:	sub	r4, fp, #40	; 0x28
   1fd44:	cmp	r0, #0
   1fd48:	bne	1fb2c <__assert_fail@plt+0xe6f8>
   1fd4c:	b	1fbf8 <__assert_fail@plt+0xe7c4>
   1fd50:	lsr	r0, r2, #31
   1fd54:	cmp	r0, #0
   1fd58:	bne	1fb2c <__assert_fail@plt+0xe6f8>
   1fd5c:	b	1fbf8 <__assert_fail@plt+0xe7c4>
   1fd60:	cmp	r3, #0
   1fd64:	rsbne	r2, r3, #32
   1fd68:	movne	r3, #0
   1fd6c:	cmpne	r3, r4, lsl r2
   1fd70:	bne	1fda4 <__assert_fail@plt+0xe970>
   1fd74:	sub	r2, ip, #4
   1fd78:	sub	r4, fp, #40	; 0x28
   1fd7c:	subs	r3, r1, #1
   1fd80:	blt	1fd54 <__assert_fail@plt+0xe920>
   1fd84:	ldr	r1, [r2, r1, lsl #2]
   1fd88:	cmp	r1, #0
   1fd8c:	mov	r1, r3
   1fd90:	beq	1fd7c <__assert_fail@plt+0xe948>
   1fd94:	eor	r0, r0, #1
   1fd98:	cmp	r0, #0
   1fd9c:	bne	1fb2c <__assert_fail@plt+0xe6f8>
   1fda0:	b	1fbf8 <__assert_fail@plt+0xe7c4>
   1fda4:	eor	r0, r0, #1
   1fda8:	b	1fd40 <__assert_fail@plt+0xe90c>
   1fdac:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1fdb0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1fdb4:	ldr	r7, [sp, #28]
   1fdb8:	clz	r1, r1
   1fdbc:	cmp	r0, #0
   1fdc0:	lsr	r4, r1, #5
   1fdc4:	beq	1fde0 <__assert_fail@plt+0xe9ac>
   1fdc8:	movw	r1, #45356	; 0xb12c
   1fdcc:	movt	r1, #4
   1fdd0:	ldr	r2, [r1]
   1fdd4:	lsl	r1, r0, #2
   1fdd8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1fddc:	blx	r2
   1fde0:	cmp	r4, #0
   1fde4:	bne	1fef4 <__assert_fail@plt+0xeac0>
   1fde8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1fdec:	cmp	r0, #0
   1fdf0:	beq	1fef4 <__assert_fail@plt+0xeac0>
   1fdf4:	add	r5, sp, #32
   1fdf8:	add	sl, sp, #68	; 0x44
   1fdfc:	sub	r6, fp, #64	; 0x40
   1fe00:	mov	r4, #1
   1fe04:	mov	r8, #2
   1fe08:	sub	r9, fp, #40	; 0x28
   1fe0c:	subs	r7, r7, #1
   1fe10:	bne	1fe54 <__assert_fail@plt+0xea20>
   1fe14:	b	1fef0 <__assert_fail@plt+0xeabc>
   1fe18:	mov	r0, #0
   1fe1c:	mov	r1, r6
   1fe20:	mov	r2, r6
   1fe24:	mov	r3, sl
   1fe28:	str	r8, [sp]
   1fe2c:	bl	18468 <__assert_fail@plt+0x7034>
   1fe30:	mov	r0, r5
   1fe34:	mov	r1, r5
   1fe38:	mov	r2, r5
   1fe3c:	bl	17dd0 <__assert_fail@plt+0x699c>
   1fe40:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1fe44:	cmp	r0, #0
   1fe48:	beq	1fef4 <__assert_fail@plt+0xeac0>
   1fe4c:	subs	r7, r7, #1
   1fe50:	beq	1fef0 <__assert_fail@plt+0xeabc>
   1fe54:	ldr	r0, [sp, #72]	; 0x48
   1fe58:	mov	r1, r5
   1fe5c:	mov	r2, r5
   1fe60:	mov	r3, sl
   1fe64:	lsr	r0, r0, #31
   1fe68:	str	r0, [sp]
   1fe6c:	mov	r0, #0
   1fe70:	bl	18468 <__assert_fail@plt+0x7034>
   1fe74:	mov	r0, r6
   1fe78:	mov	r1, r6
   1fe7c:	mov	r2, r6
   1fe80:	bl	17dd0 <__assert_fail@plt+0x699c>
   1fe84:	movw	r0, #45348	; 0xb124
   1fe88:	str	r4, [fp, #-36]	; 0xffffffdc
   1fe8c:	movt	r0, #4
   1fe90:	ldr	r1, [r0]
   1fe94:	mov	r0, #4
   1fe98:	blx	r1
   1fe9c:	str	r0, [fp, #-32]	; 0xffffffe0
   1fea0:	str	r4, [fp, #-40]	; 0xffffffd8
   1fea4:	str	r8, [r0]
   1fea8:	mov	r0, r9
   1feac:	mov	r1, r5
   1feb0:	mov	r2, r9
   1feb4:	bl	17dd0 <__assert_fail@plt+0x699c>
   1feb8:	mov	r0, r6
   1febc:	mov	r1, r6
   1fec0:	mov	r2, r9
   1fec4:	bl	179e4 <__assert_fail@plt+0x65b0>
   1fec8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1fecc:	cmp	r0, #0
   1fed0:	beq	1fe18 <__assert_fail@plt+0xe9e4>
   1fed4:	movw	r1, #45356	; 0xb12c
   1fed8:	movt	r1, #4
   1fedc:	ldr	r2, [r1]
   1fee0:	lsl	r1, r0, #2
   1fee4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1fee8:	blx	r2
   1feec:	b	1fe18 <__assert_fail@plt+0xe9e4>
   1fef0:	mov	r7, #0
   1fef4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1fef8:	cmp	r0, #0
   1fefc:	beq	1ff18 <__assert_fail@plt+0xeae4>
   1ff00:	movw	r1, #45356	; 0xb12c
   1ff04:	movt	r1, #4
   1ff08:	ldr	r2, [r1]
   1ff0c:	lsl	r1, r0, #2
   1ff10:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1ff14:	blx	r2
   1ff18:	cmp	r7, #0
   1ff1c:	movwne	r7, #1
   1ff20:	ldr	r8, [sp, #8]
   1ff24:	mov	r1, #0
   1ff28:	sub	r6, r8, #24
   1ff2c:	cmp	r6, #0
   1ff30:	movwgt	r1, #1
   1ff34:	tst	r7, r1
   1ff38:	beq	200a4 <__assert_fail@plt+0xec70>
   1ff3c:	mov	r5, #0
   1ff40:	add	sl, sp, #44	; 0x2c
   1ff44:	mov	r8, #1
   1ff48:	mla	r0, r5, r5, r5
   1ff4c:	adds	r9, r0, #41	; 0x29
   1ff50:	beq	1ff70 <__assert_fail@plt+0xeb3c>
   1ff54:	str	r8, [sp, #36]	; 0x24
   1ff58:	ldr	r1, [sp, #32]
   1ff5c:	cmp	r1, #0
   1ff60:	ble	1ff7c <__assert_fail@plt+0xeb48>
   1ff64:	ldr	r0, [sp, #40]	; 0x28
   1ff68:	mov	r1, #1
   1ff6c:	b	1ffdc <__assert_fail@plt+0xeba8>
   1ff70:	mov	r1, #0
   1ff74:	str	r1, [sp, #36]	; 0x24
   1ff78:	b	1ffe0 <__assert_fail@plt+0xebac>
   1ff7c:	beq	1ffa0 <__assert_fail@plt+0xeb6c>
   1ff80:	movw	r0, #45352	; 0xb128
   1ff84:	lsl	r1, r1, #2
   1ff88:	mov	r2, #4
   1ff8c:	movt	r0, #4
   1ff90:	ldr	r3, [r0]
   1ff94:	ldr	r0, [sp, #40]	; 0x28
   1ff98:	blx	r3
   1ff9c:	b	1ffb4 <__assert_fail@plt+0xeb80>
   1ffa0:	movw	r0, #45348	; 0xb124
   1ffa4:	movt	r0, #4
   1ffa8:	ldr	r1, [r0]
   1ffac:	mov	r0, #4
   1ffb0:	blx	r1
   1ffb4:	str	r8, [sp, #32]
   1ffb8:	str	r0, [sp, #40]	; 0x28
   1ffbc:	ldr	r1, [sp, #36]	; 0x24
   1ffc0:	cmp	r1, #0
   1ffc4:	mov	r2, r1
   1ffc8:	rsbmi	r2, r1, #0
   1ffcc:	cmp	r2, #2
   1ffd0:	blt	1ffdc <__assert_fail@plt+0xeba8>
   1ffd4:	mov	r1, #0
   1ffd8:	str	r1, [sp, #36]	; 0x24
   1ffdc:	str	r9, [r0]
   1ffe0:	ldr	r0, [sp, #60]	; 0x3c
   1ffe4:	cmp	r1, r0
   1ffe8:	bne	20024 <__assert_fail@plt+0xebf0>
   1ffec:	cmp	r1, #0
   1fff0:	bmi	2002c <__assert_fail@plt+0xebf8>
   1fff4:	ldr	r0, [sp, #40]	; 0x28
   1fff8:	ldr	r2, [sp, #64]	; 0x40
   1fffc:	sub	r0, r0, #4
   20000:	sub	r2, r2, #4
   20004:	subs	r3, r1, #1
   20008:	blt	2009c <__assert_fail@plt+0xec68>
   2000c:	ldr	r4, [r2, r1, lsl #2]
   20010:	ldr	r1, [r0, r1, lsl #2]
   20014:	cmp	r1, r4
   20018:	mov	r1, r3
   2001c:	beq	20004 <__assert_fail@plt+0xebd0>
   20020:	b	2005c <__assert_fail@plt+0xec28>
   20024:	blt	20060 <__assert_fail@plt+0xec2c>
   20028:	b	2009c <__assert_fail@plt+0xec68>
   2002c:	ldr	r0, [sp, #64]	; 0x40
   20030:	ldr	r2, [sp, #40]	; 0x28
   20034:	rsb	r1, r1, #0
   20038:	sub	r0, r0, #4
   2003c:	sub	r2, r2, #4
   20040:	subs	r3, r1, #1
   20044:	blt	2009c <__assert_fail@plt+0xec68>
   20048:	ldr	r4, [r2, r1, lsl #2]
   2004c:	ldr	r1, [r0, r1, lsl #2]
   20050:	cmp	r1, r4
   20054:	mov	r1, r3
   20058:	beq	20040 <__assert_fail@plt+0xec0c>
   2005c:	bhi	2009c <__assert_fail@plt+0xec68>
   20060:	ldr	r0, [sp, #24]
   20064:	add	r1, sp, #56	; 0x38
   20068:	add	r2, sp, #32
   2006c:	mov	r3, sl
   20070:	str	r0, [sp]
   20074:	ldr	r0, [sp, #20]
   20078:	bl	20224 <__assert_fail@plt+0xedf0>
   2007c:	add	r5, r5, #1
   20080:	mov	r7, r0
   20084:	mov	r0, #0
   20088:	cmp	r5, r6
   2008c:	movwlt	r0, #1
   20090:	tst	r7, r0
   20094:	bne	1ff48 <__assert_fail@plt+0xeb14>
   20098:	b	200a4 <__assert_fail@plt+0xec70>
   2009c:	cmp	r5, #29
   200a0:	bls	2017c <__assert_fail@plt+0xed48>
   200a4:	ldr	r0, [sp, #56]	; 0x38
   200a8:	cmp	r0, #0
   200ac:	beq	200c8 <__assert_fail@plt+0xec94>
   200b0:	movw	r1, #45356	; 0xb12c
   200b4:	movt	r1, #4
   200b8:	ldr	r2, [r1]
   200bc:	lsl	r1, r0, #2
   200c0:	ldr	r0, [sp, #64]	; 0x40
   200c4:	blx	r2
   200c8:	ldr	r0, [sp, #44]	; 0x2c
   200cc:	cmp	r0, #0
   200d0:	beq	200ec <__assert_fail@plt+0xecb8>
   200d4:	movw	r1, #45356	; 0xb12c
   200d8:	movt	r1, #4
   200dc:	ldr	r2, [r1]
   200e0:	lsl	r1, r0, #2
   200e4:	ldr	r0, [sp, #52]	; 0x34
   200e8:	blx	r2
   200ec:	ldr	r0, [sp, #32]
   200f0:	cmp	r0, #0
   200f4:	beq	20110 <__assert_fail@plt+0xecdc>
   200f8:	movw	r1, #45356	; 0xb12c
   200fc:	movt	r1, #4
   20100:	ldr	r2, [r1]
   20104:	lsl	r1, r0, #2
   20108:	ldr	r0, [sp, #40]	; 0x28
   2010c:	blx	r2
   20110:	mov	r0, r7
   20114:	sub	sp, fp, #28
   20118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2011c:	movw	r0, #41714	; 0xa2f2
   20120:	movw	r1, #37260	; 0x918c
   20124:	movw	r3, #41669	; 0xa2c5
   20128:	movw	r2, #3410	; 0xd52
   2012c:	movt	r0, #3
   20130:	movt	r1, #3
   20134:	movt	r3, #3
   20138:	bl	11434 <__assert_fail@plt>
   2013c:	movw	r0, #38935	; 0x9817
   20140:	movw	r1, #37260	; 0x918c
   20144:	movw	r3, #38952	; 0x9828
   20148:	movw	r2, #3590	; 0xe06
   2014c:	movt	r0, #3
   20150:	movt	r1, #3
   20154:	movt	r3, #3
   20158:	bl	11434 <__assert_fail@plt>
   2015c:	movw	r0, #41597	; 0xa27d
   20160:	movw	r1, #37260	; 0x918c
   20164:	movw	r3, #41611	; 0xa28b
   20168:	mov	r2, #3504	; 0xdb0
   2016c:	movt	r0, #3
   20170:	movt	r1, #3
   20174:	movt	r3, #3
   20178:	bl	11434 <__assert_fail@plt>
   2017c:	movw	r0, #39002	; 0x985a
   20180:	movw	r1, #37260	; 0x918c
   20184:	movw	r3, #38952	; 0x9828
   20188:	movw	r2, #3629	; 0xe2d
   2018c:	movt	r0, #3
   20190:	b	20150 <__assert_fail@plt+0xed1c>
   20194:	movw	r0, #40191	; 0x9cff
   20198:	movw	r1, #37260	; 0x918c
   2019c:	movw	r3, #40108	; 0x9cac
   201a0:	mov	r2, #716	; 0x2cc
   201a4:	movt	r0, #3
   201a8:	movt	r1, #3
   201ac:	movt	r3, #3
   201b0:	bl	11434 <__assert_fail@plt>
   201b4:	movw	r0, #41721	; 0xa2f9
   201b8:	movw	r1, #37260	; 0x918c
   201bc:	movw	r3, #41728	; 0xa300
   201c0:	movw	r2, #3442	; 0xd72
   201c4:	movt	r0, #3
   201c8:	b	201f8 <__assert_fail@plt+0xedc4>
   201cc:	movw	r0, #41819	; 0xa35b
   201d0:	movw	r1, #37260	; 0x918c
   201d4:	movw	r3, #41728	; 0xa300
   201d8:	movw	r2, #3445	; 0xd75
   201dc:	movt	r0, #3
   201e0:	b	201f8 <__assert_fail@plt+0xedc4>
   201e4:	movw	r0, #41597	; 0xa27d
   201e8:	movw	r1, #37260	; 0x918c
   201ec:	movw	r3, #41728	; 0xa300
   201f0:	movw	r2, #3446	; 0xd76
   201f4:	movt	r0, #3
   201f8:	movt	r1, #3
   201fc:	movt	r3, #3
   20200:	bl	11434 <__assert_fail@plt>
   20204:	movw	r0, #41907	; 0xa3b3
   20208:	movw	r1, #37260	; 0x918c
   2020c:	movw	r3, #41913	; 0xa3b9
   20210:	movw	r2, #1210	; 0x4ba
   20214:	movt	r0, #3
   20218:	movt	r1, #3
   2021c:	movt	r3, #3
   20220:	bl	11434 <__assert_fail@plt>
   20224:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20228:	add	fp, sp, #28
   2022c:	sub	sp, sp, #12
   20230:	ldr	r6, [fp, #8]
   20234:	cmp	r6, #0
   20238:	beq	20410 <__assert_fail@plt+0xefdc>
   2023c:	mov	r9, r0
   20240:	mov	r5, r1
   20244:	mov	r4, r2
   20248:	mov	r0, r2
   2024c:	mov	r1, r2
   20250:	mov	r2, r3
   20254:	mov	r3, r9
   20258:	bl	1ca88 <__assert_fail@plt+0xb654>
   2025c:	ldr	r0, [r4, #4]
   20260:	cmp	r0, #0
   20264:	bmi	2028c <__assert_fail@plt+0xee58>
   20268:	cmp	r0, #1
   2026c:	bgt	2028c <__assert_fail@plt+0xee58>
   20270:	cmp	r0, #0
   20274:	beq	2028c <__assert_fail@plt+0xee58>
   20278:	ldr	r1, [r4, #8]
   2027c:	mov	sl, #1
   20280:	ldr	r1, [r1]
   20284:	cmp	r1, #1
   20288:	beq	20404 <__assert_fail@plt+0xefd0>
   2028c:	ldr	r1, [r5, #4]
   20290:	cmp	r0, r1
   20294:	bne	20308 <__assert_fail@plt+0xeed4>
   20298:	cmp	r0, #0
   2029c:	bmi	202d4 <__assert_fail@plt+0xeea0>
   202a0:	ldr	r1, [r4, #8]
   202a4:	ldr	r2, [r5, #8]
   202a8:	sub	r1, r1, #4
   202ac:	sub	r2, r2, #4
   202b0:	cmp	r0, #1
   202b4:	blt	20400 <__assert_fail@plt+0xefcc>
   202b8:	sub	r3, r0, #1
   202bc:	ldr	r7, [r2, r0, lsl #2]
   202c0:	ldr	r0, [r1, r0, lsl #2]
   202c4:	cmp	r0, r7
   202c8:	mov	r0, r3
   202cc:	beq	202b0 <__assert_fail@plt+0xee7c>
   202d0:	b	20308 <__assert_fail@plt+0xeed4>
   202d4:	ldr	r2, [r4, #8]
   202d8:	rsb	r1, r0, #0
   202dc:	ldr	r0, [r5, #8]
   202e0:	sub	r0, r0, #4
   202e4:	sub	r2, r2, #4
   202e8:	cmp	r1, #1
   202ec:	blt	20400 <__assert_fail@plt+0xefcc>
   202f0:	sub	r3, r1, #1
   202f4:	ldr	r7, [r2, r1, lsl #2]
   202f8:	ldr	r1, [r0, r1, lsl #2]
   202fc:	cmp	r1, r7
   20300:	mov	r1, r3
   20304:	beq	202e8 <__assert_fail@plt+0xeeb4>
   20308:	subs	r7, r6, #1
   2030c:	mov	sl, #0
   20310:	beq	20404 <__assert_fail@plt+0xefd0>
   20314:	mov	r8, #1
   20318:	b	20324 <__assert_fail@plt+0xeef0>
   2031c:	subs	r7, r7, #1
   20320:	beq	20404 <__assert_fail@plt+0xefd0>
   20324:	movw	r0, #45348	; 0xb124
   20328:	str	r8, [sp, #4]
   2032c:	movt	r0, #4
   20330:	ldr	r1, [r0]
   20334:	mov	r0, #4
   20338:	blx	r1
   2033c:	str	r0, [sp, #8]
   20340:	mov	r6, r0
   20344:	mov	r0, #2
   20348:	str	r8, [sp]
   2034c:	mov	r1, r4
   20350:	mov	r2, sp
   20354:	mov	r3, r9
   20358:	str	r0, [r6]
   2035c:	mov	r0, r4
   20360:	bl	1ca88 <__assert_fail@plt+0xb654>
   20364:	movw	r0, #45356	; 0xb12c
   20368:	mov	r1, #4
   2036c:	movt	r0, #4
   20370:	ldr	r2, [r0]
   20374:	mov	r0, r6
   20378:	blx	r2
   2037c:	ldr	r0, [r4, #4]
   20380:	ldr	r1, [r5, #4]
   20384:	cmp	r0, r1
   20388:	bne	2031c <__assert_fail@plt+0xeee8>
   2038c:	cmp	r0, #0
   20390:	bmi	203c8 <__assert_fail@plt+0xef94>
   20394:	ldr	r1, [r4, #8]
   20398:	ldr	r2, [r5, #8]
   2039c:	sub	r1, r1, #4
   203a0:	sub	r2, r2, #4
   203a4:	cmp	r0, #1
   203a8:	blt	20400 <__assert_fail@plt+0xefcc>
   203ac:	sub	r3, r0, #1
   203b0:	ldr	r6, [r2, r0, lsl #2]
   203b4:	ldr	r0, [r1, r0, lsl #2]
   203b8:	cmp	r0, r6
   203bc:	mov	r0, r3
   203c0:	beq	203a4 <__assert_fail@plt+0xef70>
   203c4:	b	2031c <__assert_fail@plt+0xeee8>
   203c8:	ldr	r2, [r4, #8]
   203cc:	rsb	r1, r0, #0
   203d0:	ldr	r0, [r5, #8]
   203d4:	sub	r0, r0, #4
   203d8:	sub	r2, r2, #4
   203dc:	cmp	r1, #1
   203e0:	blt	20400 <__assert_fail@plt+0xefcc>
   203e4:	sub	r3, r1, #1
   203e8:	ldr	r6, [r2, r1, lsl #2]
   203ec:	ldr	r1, [r0, r1, lsl #2]
   203f0:	cmp	r1, r6
   203f4:	mov	r1, r3
   203f8:	beq	203dc <__assert_fail@plt+0xefa8>
   203fc:	b	2031c <__assert_fail@plt+0xeee8>
   20400:	mov	sl, #1
   20404:	mov	r0, sl
   20408:	sub	sp, fp, #28
   2040c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20410:	movw	r0, #41476	; 0xa204
   20414:	movw	r1, #37260	; 0x918c
   20418:	movw	r3, #41482	; 0xa20a
   2041c:	movw	r2, #3550	; 0xdde
   20420:	movt	r0, #3
   20424:	movt	r1, #3
   20428:	movt	r3, #3
   2042c:	bl	11434 <__assert_fail@plt>
   20430:	push	{fp, lr}
   20434:	mov	fp, sp
   20438:	ldr	r3, [r0, #4]
   2043c:	cmp	r3, #0
   20440:	mov	r2, r3
   20444:	rsbmi	r2, r3, #0
   20448:	cmp	r2, r1, lsr #5
   2044c:	lsrle	r0, r3, #31
   20450:	pople	{fp, pc}
   20454:	ldr	ip, [r0, #8]
   20458:	lsr	r2, r1, #5
   2045c:	and	r1, r1, #31
   20460:	mov	r0, #1
   20464:	cmn	r3, #1
   20468:	ldr	lr, [ip, r2, lsl #2]
   2046c:	and	r0, r0, lr, lsr r1
   20470:	popgt	{fp, pc}
   20474:	cmp	r1, #0
   20478:	rsbne	r1, r1, #32
   2047c:	movne	r3, #0
   20480:	cmpne	r3, lr, lsl r1
   20484:	bne	204a4 <__assert_fail@plt+0xf070>
   20488:	sub	r1, ip, #4
   2048c:	subs	r3, r2, #1
   20490:	blt	204a8 <__assert_fail@plt+0xf074>
   20494:	ldr	r2, [r1, r2, lsl #2]
   20498:	cmp	r2, #0
   2049c:	mov	r2, r3
   204a0:	beq	2048c <__assert_fail@plt+0xf058>
   204a4:	eor	r0, r0, #1
   204a8:	pop	{fp, pc}
   204ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   204b0:	add	fp, sp, #28
   204b4:	sub	sp, sp, #4
   204b8:	mov	r8, r0
   204bc:	and	r0, r1, #31
   204c0:	mov	r2, #1
   204c4:	lsr	r4, r1, #5
   204c8:	ldr	lr, [r8, #4]
   204cc:	lsl	r6, r2, r0
   204d0:	cmp	lr, #0
   204d4:	mov	sl, lr
   204d8:	rsbmi	sl, lr, #0
   204dc:	cmp	sl, r1, lsr #5
   204e0:	ble	20510 <__assert_fail@plt+0xf0dc>
   204e4:	ldr	r0, [r8, #8]
   204e8:	sub	r3, sl, r4
   204ec:	and	ip, r3, #1
   204f0:	add	r3, r4, #1
   204f4:	cmp	sl, r3
   204f8:	add	r5, r0, r4, lsl #2
   204fc:	bne	20528 <__assert_fail@plt+0xf0f4>
   20500:	mov	r7, #0
   20504:	cmp	ip, #0
   20508:	bne	20570 <__assert_fail@plt+0xf13c>
   2050c:	b	20584 <__assert_fail@plt+0xf150>
   20510:	ldr	r1, [r8]
   20514:	add	r7, r4, #1
   20518:	cmp	r4, r1
   2051c:	bge	205cc <__assert_fail@plt+0xf198>
   20520:	ldr	r0, [r8, #8]
   20524:	b	20640 <__assert_fail@plt+0xf20c>
   20528:	add	r3, r4, ip
   2052c:	mov	r7, #0
   20530:	sub	r4, r3, sl
   20534:	mov	r3, #0
   20538:	mov	r1, r5
   2053c:	ldr	r2, [r1, -r7, lsl #2]!
   20540:	sub	r7, r7, #2
   20544:	adds	r2, r2, r6
   20548:	str	r2, [r1]
   2054c:	ldr	r2, [r1, #4]
   20550:	adcs	r2, r2, #0
   20554:	adc	r6, r3, #0
   20558:	cmp	r4, r7
   2055c:	str	r2, [r1, #4]
   20560:	bne	20538 <__assert_fail@plt+0xf104>
   20564:	rsb	r7, r7, #0
   20568:	cmp	ip, #0
   2056c:	beq	20584 <__assert_fail@plt+0xf150>
   20570:	ldr	r1, [r5, r7, lsl #2]
   20574:	adds	r1, r1, r6
   20578:	str	r1, [r5, r7, lsl #2]
   2057c:	mov	r1, #0
   20580:	adc	r6, r1, #0
   20584:	tst	r6, #1
   20588:	beq	20600 <__assert_fail@plt+0xf1cc>
   2058c:	ldr	r1, [r8]
   20590:	add	r7, sl, #1
   20594:	cmp	sl, r1
   20598:	blt	206a0 <__assert_fail@plt+0xf26c>
   2059c:	cmp	r7, #1
   205a0:	mov	r4, r7
   205a4:	movls	r4, #1
   205a8:	cmp	r1, #0
   205ac:	beq	20668 <__assert_fail@plt+0xf234>
   205b0:	movw	r2, #45352	; 0xb128
   205b4:	lsl	r1, r1, #2
   205b8:	movt	r2, #4
   205bc:	ldr	r3, [r2]
   205c0:	lsl	r2, r4, #2
   205c4:	blx	r3
   205c8:	b	2067c <__assert_fail@plt+0xf248>
   205cc:	cmp	r7, #1
   205d0:	mov	r9, r7
   205d4:	movls	r9, #1
   205d8:	cmp	r1, #0
   205dc:	beq	20608 <__assert_fail@plt+0xf1d4>
   205e0:	movw	r0, #45352	; 0xb128
   205e4:	lsl	r1, r1, #2
   205e8:	lsl	r2, r9, #2
   205ec:	movt	r0, #4
   205f0:	ldr	r3, [r0]
   205f4:	ldr	r0, [r8, #8]
   205f8:	blx	r3
   205fc:	b	2061c <__assert_fail@plt+0xf1e8>
   20600:	mov	r7, sl
   20604:	b	206a4 <__assert_fail@plt+0xf270>
   20608:	movw	r0, #45348	; 0xb124
   2060c:	movt	r0, #4
   20610:	ldr	r1, [r0]
   20614:	lsl	r0, r9, #2
   20618:	blx	r1
   2061c:	str	r0, [r8, #8]
   20620:	str	r9, [r8]
   20624:	ldr	lr, [r8, #4]
   20628:	cmp	lr, #0
   2062c:	mov	r1, lr
   20630:	rsbmi	r1, lr, #0
   20634:	cmp	r1, r9
   20638:	movgt	lr, #0
   2063c:	strgt	lr, [r8, #4]
   20640:	cmp	sl, r4
   20644:	str	r6, [r0, r4, lsl #2]
   20648:	bcs	206a4 <__assert_fail@plt+0xf270>
   2064c:	sub	r1, r4, sl
   20650:	add	r0, r0, sl, lsl #2
   20654:	lsl	r2, r1, #2
   20658:	mov	r1, #0
   2065c:	bl	11368 <memset@plt>
   20660:	ldr	lr, [r8, #4]
   20664:	b	206a4 <__assert_fail@plt+0xf270>
   20668:	movw	r0, #45348	; 0xb124
   2066c:	movt	r0, #4
   20670:	ldr	r1, [r0]
   20674:	lsl	r0, r4, #2
   20678:	blx	r1
   2067c:	str	r0, [r8, #8]
   20680:	str	r4, [r8]
   20684:	ldr	lr, [r8, #4]
   20688:	cmp	lr, #0
   2068c:	mov	r1, lr
   20690:	rsbmi	r1, lr, #0
   20694:	cmp	r1, r4
   20698:	movgt	lr, #0
   2069c:	strgt	lr, [r8, #4]
   206a0:	str	r6, [r0, sl, lsl #2]
   206a4:	cmp	lr, #0
   206a8:	rsbmi	r7, r7, #0
   206ac:	str	r7, [r8, #4]
   206b0:	sub	sp, fp, #28
   206b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   206b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   206bc:	add	fp, sp, #24
   206c0:	ldr	lr, [r0, #4]
   206c4:	ldr	ip, [r0, #8]
   206c8:	cmp	lr, #0
   206cc:	mov	r3, lr
   206d0:	rsbmi	r3, lr, #0
   206d4:	cmp	r3, r1, lsr #5
   206d8:	ble	207b0 <__assert_fail@plt+0xf37c>
   206dc:	lsr	r5, r1, #5
   206e0:	and	r1, r1, #31
   206e4:	mov	r4, #1
   206e8:	lsl	r1, r4, r1
   206ec:	sub	r4, r3, r5
   206f0:	add	r6, r5, #1
   206f4:	add	r2, ip, r5, lsl #2
   206f8:	and	r8, r4, #1
   206fc:	cmp	r3, r6
   20700:	bne	20714 <__assert_fail@plt+0xf2e0>
   20704:	mov	r5, #0
   20708:	cmp	r8, #0
   2070c:	bne	20764 <__assert_fail@plt+0xf330>
   20710:	b	20778 <__assert_fail@plt+0xf344>
   20714:	add	r5, r5, r8
   20718:	sub	r6, r5, r3
   2071c:	mov	r5, #0
   20720:	mov	r7, r2
   20724:	ldr	r4, [r7, -r5, lsl #2]!
   20728:	sub	r5, r5, #2
   2072c:	subs	r1, r4, r1
   20730:	str	r1, [r7]
   20734:	mov	r1, #0
   20738:	movwcc	r1, #1
   2073c:	ldr	r4, [r7, #4]
   20740:	subs	r1, r4, r1
   20744:	str	r1, [r7, #4]
   20748:	mov	r1, #0
   2074c:	movwcc	r1, #1
   20750:	cmp	r6, r5
   20754:	bne	20720 <__assert_fail@plt+0xf2ec>
   20758:	rsb	r5, r5, #0
   2075c:	cmp	r8, #0
   20760:	beq	20778 <__assert_fail@plt+0xf344>
   20764:	ldr	r4, [r2, r5, lsl #2]
   20768:	subs	r1, r4, r1
   2076c:	str	r1, [r2, r5, lsl #2]
   20770:	mov	r1, #0
   20774:	movwcc	r1, #1
   20778:	tst	r1, #1
   2077c:	bne	207c8 <__assert_fail@plt+0xf394>
   20780:	sub	r2, ip, #4
   20784:	mov	r1, r3
   20788:	cmp	r3, #1
   2078c:	blt	207a0 <__assert_fail@plt+0xf36c>
   20790:	ldr	r7, [r2, r1, lsl #2]
   20794:	sub	r3, r1, #1
   20798:	cmp	r7, #0
   2079c:	beq	20784 <__assert_fail@plt+0xf350>
   207a0:	cmp	lr, #0
   207a4:	rsbmi	r1, r1, #0
   207a8:	str	r1, [r0, #4]
   207ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   207b0:	movw	r0, #41841	; 0xa371
   207b4:	movw	r1, #37260	; 0x918c
   207b8:	movw	r3, #41857	; 0xa381
   207bc:	movw	r2, #3753	; 0xea9
   207c0:	movt	r0, #3
   207c4:	b	207dc <__assert_fail@plt+0xf3a8>
   207c8:	movw	r0, #38241	; 0x9561
   207cc:	movw	r1, #37260	; 0x918c
   207d0:	movw	r3, #41857	; 0xa381
   207d4:	movw	r2, #3756	; 0xeac
   207d8:	movt	r0, #3
   207dc:	movt	r1, #3
   207e0:	movt	r3, #3
   207e4:	bl	11434 <__assert_fail@plt>
   207e8:	push	{r4, r5, r6, sl, fp, lr}
   207ec:	add	fp, sp, #16
   207f0:	ldr	r2, [r0, #4]
   207f4:	cmp	r2, #0
   207f8:	mov	r3, r2
   207fc:	rsbmi	r3, r2, #0
   20800:	cmp	r3, r1, lsr #5
   20804:	ble	20868 <__assert_fail@plt+0xf434>
   20808:	ldr	lr, [r0, #8]
   2080c:	lsr	r6, r1, #5
   20810:	and	r5, r1, #31
   20814:	mov	r3, #1
   20818:	cmn	r2, #1
   2081c:	ldr	r4, [lr, r6, lsl #2]
   20820:	and	ip, r3, r4, lsr r5
   20824:	bgt	2086c <__assert_fail@plt+0xf438>
   20828:	cmp	r5, #0
   2082c:	rsbne	r3, r5, #32
   20830:	movne	r5, #0
   20834:	cmpne	r5, r4, lsl r3
   20838:	bne	20858 <__assert_fail@plt+0xf424>
   2083c:	sub	r4, lr, #4
   20840:	subs	r3, r6, #1
   20844:	blt	2086c <__assert_fail@plt+0xf438>
   20848:	ldr	r6, [r4, r6, lsl #2]
   2084c:	cmp	r6, #0
   20850:	mov	r6, r3
   20854:	beq	20840 <__assert_fail@plt+0xf40c>
   20858:	eor	ip, ip, #1
   2085c:	cmp	ip, #0
   20860:	bne	20874 <__assert_fail@plt+0xf440>
   20864:	b	20884 <__assert_fail@plt+0xf450>
   20868:	lsr	ip, r2, #31
   2086c:	cmp	ip, #0
   20870:	beq	20884 <__assert_fail@plt+0xf450>
   20874:	cmp	r2, #0
   20878:	bmi	20888 <__assert_fail@plt+0xf454>
   2087c:	pop	{r4, r5, r6, sl, fp, lr}
   20880:	b	206b8 <__assert_fail@plt+0xf284>
   20884:	pop	{r4, r5, r6, sl, fp, pc}
   20888:	pop	{r4, r5, r6, sl, fp, lr}
   2088c:	b	204ac <__assert_fail@plt+0xf078>
   20890:	push	{r4, r5, r6, sl, fp, lr}
   20894:	add	fp, sp, #16
   20898:	ldr	r2, [r0, #4]
   2089c:	cmp	r2, #0
   208a0:	mov	r3, r2
   208a4:	rsbmi	r3, r2, #0
   208a8:	cmp	r3, r1, lsr #5
   208ac:	ble	20914 <__assert_fail@plt+0xf4e0>
   208b0:	ldr	lr, [r0, #8]
   208b4:	lsr	r6, r1, #5
   208b8:	and	r5, r1, #31
   208bc:	mov	r3, #1
   208c0:	cmn	r2, #1
   208c4:	ldr	r4, [lr, r6, lsl #2]
   208c8:	and	ip, r3, r4, lsr r5
   208cc:	bgt	20904 <__assert_fail@plt+0xf4d0>
   208d0:	cmp	r5, #0
   208d4:	rsbne	r3, r5, #32
   208d8:	movne	r5, #0
   208dc:	cmpne	r5, r4, lsl r3
   208e0:	bne	20900 <__assert_fail@plt+0xf4cc>
   208e4:	sub	r4, lr, #4
   208e8:	subs	r3, r6, #1
   208ec:	blt	20904 <__assert_fail@plt+0xf4d0>
   208f0:	ldr	r6, [r4, r6, lsl #2]
   208f4:	cmp	r6, #0
   208f8:	mov	r6, r3
   208fc:	beq	208e8 <__assert_fail@plt+0xf4b4>
   20900:	eor	ip, ip, #1
   20904:	cmp	ip, r2, lsr #31
   20908:	bne	20920 <__assert_fail@plt+0xf4ec>
   2090c:	pop	{r4, r5, r6, sl, fp, lr}
   20910:	b	204ac <__assert_fail@plt+0xf078>
   20914:	lsr	ip, r2, #31
   20918:	cmp	ip, r2, lsr #31
   2091c:	beq	2090c <__assert_fail@plt+0xf4d8>
   20920:	pop	{r4, r5, r6, sl, fp, lr}
   20924:	b	206b8 <__assert_fail@plt+0xf284>
   20928:	push	{r4, r5, r6, r7, fp, lr}
   2092c:	add	fp, sp, #16
   20930:	sub	sp, sp, #16
   20934:	mov	r5, r0
   20938:	movw	r0, #45348	; 0xb124
   2093c:	mov	r4, r1
   20940:	mov	r7, #1
   20944:	movt	r0, #4
   20948:	str	r7, [sp, #8]
   2094c:	ldr	r1, [r0]
   20950:	mov	r0, #4
   20954:	blx	r1
   20958:	str	r0, [sp, #12]
   2095c:	str	r7, [sp, #4]
   20960:	mov	r6, r0
   20964:	str	r7, [r0]
   20968:	add	r2, sp, #4
   2096c:	mov	r0, r5
   20970:	mov	r1, r4
   20974:	bl	1707c <__assert_fail@plt+0x5c48>
   20978:	movw	r0, #45356	; 0xb12c
   2097c:	mov	r1, #4
   20980:	movt	r0, #4
   20984:	ldr	r2, [r0]
   20988:	mov	r0, r6
   2098c:	blx	r2
   20990:	ldr	r0, [r5, #4]
   20994:	rsb	r0, r0, #0
   20998:	str	r0, [r5, #4]
   2099c:	sub	sp, fp, #16
   209a0:	pop	{r4, r5, r6, r7, fp, pc}
   209a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   209a8:	add	fp, sp, #28
   209ac:	sub	sp, sp, #36	; 0x24
   209b0:	mov	r9, r0
   209b4:	ldr	r0, [r2, #4]
   209b8:	mov	r7, r2
   209bc:	ldr	r2, [r1, #4]
   209c0:	mov	r6, r1
   209c4:	cmp	r0, #0
   209c8:	rsbmi	r0, r0, #0
   209cc:	cmp	r2, #0
   209d0:	rsbmi	r2, r2, #0
   209d4:	cmp	r2, r0
   209d8:	movlt	r6, r7
   209dc:	movlt	r7, r1
   209e0:	mov	r1, r0
   209e4:	movlt	r1, r2
   209e8:	cmp	r1, #0
   209ec:	beq	20a60 <__assert_fail@plt+0xf62c>
   209f0:	ldr	r3, [r7, #4]
   209f4:	cmp	r2, r0
   209f8:	ldr	r8, [r6, #4]
   209fc:	str	r1, [sp]
   20a00:	movlt	r2, r0
   20a04:	mov	r0, #0
   20a08:	cmp	r0, r3, asr #31
   20a0c:	lsr	sl, r3, #31
   20a10:	and	r4, sl, r8, lsr #31
   20a14:	moveq	r2, r1
   20a18:	ldr	r1, [r9]
   20a1c:	add	r5, r2, r4
   20a20:	str	r2, [sp, #12]
   20a24:	cmp	r5, r1
   20a28:	ble	20a68 <__assert_fail@plt+0xf634>
   20a2c:	cmp	r5, #1
   20a30:	str	r3, [sp, #32]
   20a34:	movls	r5, #1
   20a38:	cmp	r1, #0
   20a3c:	beq	20a70 <__assert_fail@plt+0xf63c>
   20a40:	movw	r0, #45352	; 0xb128
   20a44:	lsl	r1, r1, #2
   20a48:	lsl	r2, r5, #2
   20a4c:	movt	r0, #4
   20a50:	ldr	r3, [r0]
   20a54:	ldr	r0, [r9, #8]
   20a58:	blx	r3
   20a5c:	b	20a84 <__assert_fail@plt+0xf650>
   20a60:	mov	r0, #0
   20a64:	b	20bf4 <__assert_fail@plt+0xf7c0>
   20a68:	ldr	r0, [r9, #8]
   20a6c:	b	20aa8 <__assert_fail@plt+0xf674>
   20a70:	movw	r0, #45348	; 0xb124
   20a74:	movt	r0, #4
   20a78:	ldr	r1, [r0]
   20a7c:	lsl	r0, r5, #2
   20a80:	blx	r1
   20a84:	str	r0, [r9, #8]
   20a88:	str	r5, [r9]
   20a8c:	ldr	r1, [r9, #4]
   20a90:	ldr	r3, [sp, #32]
   20a94:	cmp	r1, #0
   20a98:	rsbmi	r1, r1, #0
   20a9c:	cmp	r1, r5
   20aa0:	movgt	r1, #0
   20aa4:	strgt	r1, [r9, #4]
   20aa8:	asr	r1, r3, #31
   20aac:	lsr	lr, r8, #31
   20ab0:	ldr	r6, [r6, #8]
   20ab4:	str	r9, [sp, #16]
   20ab8:	mov	r9, #0
   20abc:	mov	r2, #0
   20ac0:	str	r0, [sp, #4]
   20ac4:	str	r4, [sp, #8]
   20ac8:	str	r1, [sp, #32]
   20acc:	asr	r1, r8, #31
   20ad0:	ldr	r8, [sp]
   20ad4:	str	r1, [sp, #28]
   20ad8:	rsb	r1, r4, #0
   20adc:	ldr	r5, [sp, #32]
   20ae0:	str	r1, [sp, #24]
   20ae4:	ldr	r1, [r7, #8]
   20ae8:	mov	r7, r0
   20aec:	str	r1, [sp, #20]
   20af0:	mov	r1, r4
   20af4:	ldr	r0, [r6], #4
   20af8:	ldr	r3, [sp, #28]
   20afc:	mov	r4, sl
   20b00:	eor	r0, r0, r3
   20b04:	ldr	r3, [sp, #20]
   20b08:	adds	r0, r0, lr
   20b0c:	adc	lr, r9, #0
   20b10:	ldr	r3, [r3, r2, lsl #2]
   20b14:	add	r2, r2, #1
   20b18:	eor	r3, r3, r5
   20b1c:	adds	ip, r3, sl
   20b20:	ldr	r3, [sp, #24]
   20b24:	and	r0, ip, r0
   20b28:	adc	sl, r9, #0
   20b2c:	eor	r0, r0, r3
   20b30:	adds	r0, r0, r1
   20b34:	adc	r1, r9, #0
   20b38:	str	r0, [r7], #4
   20b3c:	cmp	r2, r8
   20b40:	bcc	20af4 <__assert_fail@plt+0xf6c0>
   20b44:	ldr	r8, [sp, #24]
   20b48:	ldr	r3, [sp, #28]
   20b4c:	ldr	r0, [sp, #32]
   20b50:	cmp	ip, r4
   20b54:	bcc	20c00 <__assert_fail@plt+0xf7cc>
   20b58:	ldr	r4, [sp, #12]
   20b5c:	cmp	r2, r4
   20b60:	bge	20bb8 <__assert_fail@plt+0xf784>
   20b64:	ldr	r9, [sp, #16]
   20b68:	mov	ip, r0
   20b6c:	sub	r2, r4, r2
   20b70:	mov	r5, #0
   20b74:	ldr	r0, [r6], #4
   20b78:	eor	r0, r0, r3
   20b7c:	adds	r0, r0, lr
   20b80:	and	r0, r0, ip
   20b84:	adc	lr, r5, #0
   20b88:	eor	r0, r0, r8
   20b8c:	adds	r0, r0, r1
   20b90:	adc	r1, r5, #0
   20b94:	str	r0, [r7], #4
   20b98:	subs	r2, r2, #1
   20b9c:	bne	20b74 <__assert_fail@plt+0xf740>
   20ba0:	cmp	r1, #0
   20ba4:	beq	20bc4 <__assert_fail@plt+0xf790>
   20ba8:	ldr	r0, [sp, #4]
   20bac:	str	r1, [r0, r4, lsl #2]
   20bb0:	add	r0, r4, #1
   20bb4:	b	20be8 <__assert_fail@plt+0xf7b4>
   20bb8:	ldr	r9, [sp, #16]
   20bbc:	cmp	r1, #0
   20bc0:	bne	20ba8 <__assert_fail@plt+0xf774>
   20bc4:	ldr	r0, [sp, #4]
   20bc8:	sub	r1, r0, #4
   20bcc:	mov	r0, r4
   20bd0:	cmp	r4, #1
   20bd4:	blt	20be8 <__assert_fail@plt+0xf7b4>
   20bd8:	ldr	r2, [r1, r0, lsl #2]
   20bdc:	sub	r4, r0, #1
   20be0:	cmp	r2, #0
   20be4:	beq	20bcc <__assert_fail@plt+0xf798>
   20be8:	ldr	r1, [sp, #8]
   20bec:	cmp	r1, #0
   20bf0:	rsbne	r0, r0, #0
   20bf4:	str	r0, [r9, #4]
   20bf8:	sub	sp, fp, #28
   20bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c00:	movw	r0, #39010	; 0x9862
   20c04:	movw	r1, #37260	; 0x918c
   20c08:	movw	r3, #39018	; 0x986a
   20c0c:	movw	r2, #3854	; 0xf0e
   20c10:	movt	r0, #3
   20c14:	movt	r1, #3
   20c18:	movt	r3, #3
   20c1c:	bl	11434 <__assert_fail@plt>
   20c20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c24:	add	fp, sp, #28
   20c28:	sub	sp, sp, #36	; 0x24
   20c2c:	mov	r9, r0
   20c30:	ldr	r0, [r2, #4]
   20c34:	mov	r6, r2
   20c38:	ldr	r2, [r1, #4]
   20c3c:	mov	r4, r1
   20c40:	cmp	r0, #0
   20c44:	rsbmi	r0, r0, #0
   20c48:	cmp	r2, #0
   20c4c:	rsbmi	r2, r2, #0
   20c50:	cmp	r2, r0
   20c54:	movlt	r4, r6
   20c58:	movlt	r6, r1
   20c5c:	mov	r1, r0
   20c60:	movlt	r1, r2
   20c64:	cmp	r1, #0
   20c68:	beq	20cdc <__assert_fail@plt+0xf8a8>
   20c6c:	ldr	r8, [r6, #4]
   20c70:	cmp	r2, r0
   20c74:	ldr	r5, [r4, #4]
   20c78:	str	r1, [sp]
   20c7c:	movlt	r2, r0
   20c80:	mov	r0, #0
   20c84:	cmp	r0, r8, asr #31
   20c88:	lsr	sl, r8, #31
   20c8c:	orr	r0, sl, r5, lsr #31
   20c90:	movne	r2, r1
   20c94:	ldr	r1, [r9]
   20c98:	add	r7, r2, r0
   20c9c:	str	r0, [sp, #16]
   20ca0:	str	r2, [sp, #8]
   20ca4:	cmp	r7, r1
   20ca8:	ble	20d30 <__assert_fail@plt+0xf8fc>
   20cac:	cmp	r7, #1
   20cb0:	movls	r7, #1
   20cb4:	cmp	r1, #0
   20cb8:	beq	20d38 <__assert_fail@plt+0xf904>
   20cbc:	movw	r0, #45352	; 0xb128
   20cc0:	lsl	r1, r1, #2
   20cc4:	lsl	r2, r7, #2
   20cc8:	movt	r0, #4
   20ccc:	ldr	r3, [r0]
   20cd0:	ldr	r0, [r9, #8]
   20cd4:	blx	r3
   20cd8:	b	20d4c <__assert_fail@plt+0xf918>
   20cdc:	cmp	r4, r9
   20ce0:	beq	21064 <__assert_fail@plt+0xfc30>
   20ce4:	ldr	r5, [r4, #4]
   20ce8:	ldr	r1, [r9]
   20cec:	cmp	r5, #0
   20cf0:	rsbmi	r5, r5, #0
   20cf4:	cmp	r5, r1
   20cf8:	ble	20eb0 <__assert_fail@plt+0xfa7c>
   20cfc:	cmp	r5, #1
   20d00:	mov	r6, r5
   20d04:	movle	r6, #1
   20d08:	cmp	r1, #0
   20d0c:	beq	20ec0 <__assert_fail@plt+0xfa8c>
   20d10:	movw	r0, #45352	; 0xb128
   20d14:	lsl	r1, r1, #2
   20d18:	lsl	r2, r6, #2
   20d1c:	movt	r0, #4
   20d20:	ldr	r3, [r0]
   20d24:	ldr	r0, [r9, #8]
   20d28:	blx	r3
   20d2c:	b	20ed4 <__assert_fail@plt+0xfaa0>
   20d30:	ldr	r0, [r9, #8]
   20d34:	b	20d6c <__assert_fail@plt+0xf938>
   20d38:	movw	r0, #45348	; 0xb124
   20d3c:	movt	r0, #4
   20d40:	ldr	r1, [r0]
   20d44:	lsl	r0, r7, #2
   20d48:	blx	r1
   20d4c:	str	r0, [r9, #8]
   20d50:	str	r7, [r9]
   20d54:	ldr	r1, [r9, #4]
   20d58:	cmp	r1, #0
   20d5c:	rsbmi	r1, r1, #0
   20d60:	cmp	r1, r7
   20d64:	movgt	r1, #0
   20d68:	strgt	r1, [r9, #4]
   20d6c:	asr	r1, r8, #31
   20d70:	str	r9, [sp, #12]
   20d74:	lsr	r9, r5, #31
   20d78:	ldr	r7, [r4, #8]
   20d7c:	ldr	r8, [sp]
   20d80:	mov	lr, #0
   20d84:	str	r0, [sp, #4]
   20d88:	str	r1, [sp, #32]
   20d8c:	asr	r1, r5, #31
   20d90:	str	r1, [sp, #28]
   20d94:	ldr	r1, [sp, #16]
   20d98:	ldr	r5, [sp, #32]
   20d9c:	rsb	r2, r1, #0
   20da0:	str	r2, [sp, #24]
   20da4:	ldr	r2, [r6, #8]
   20da8:	mov	r6, r0
   20dac:	str	r2, [sp, #20]
   20db0:	mov	r2, #0
   20db4:	ldr	r0, [r7], #4
   20db8:	ldr	r3, [sp, #28]
   20dbc:	mov	r4, sl
   20dc0:	eor	r0, r0, r3
   20dc4:	ldr	r3, [sp, #20]
   20dc8:	adds	r0, r0, r9
   20dcc:	adc	r9, lr, #0
   20dd0:	ldr	r3, [r3, r2, lsl #2]
   20dd4:	add	r2, r2, #1
   20dd8:	eor	r3, r3, r5
   20ddc:	adds	ip, r3, sl
   20de0:	ldr	r3, [sp, #24]
   20de4:	orr	r0, ip, r0
   20de8:	adc	sl, lr, #0
   20dec:	eor	r0, r0, r3
   20df0:	adds	r0, r0, r1
   20df4:	adc	r1, lr, #0
   20df8:	str	r0, [r6], #4
   20dfc:	cmp	r2, r8
   20e00:	bcc	20db4 <__assert_fail@plt+0xf980>
   20e04:	ldr	r8, [sp, #24]
   20e08:	ldr	lr, [sp, #28]
   20e0c:	ldr	r3, [sp, #32]
   20e10:	cmp	ip, r4
   20e14:	bcc	2106c <__assert_fail@plt+0xfc38>
   20e18:	ldr	r4, [sp, #8]
   20e1c:	ldr	r5, [sp, #12]
   20e20:	cmp	r2, r4
   20e24:	bge	20e5c <__assert_fail@plt+0xfa28>
   20e28:	sub	r2, r4, r2
   20e2c:	mov	ip, #0
   20e30:	ldr	r0, [r7], #4
   20e34:	eor	r0, r0, lr
   20e38:	adds	r0, r0, r9
   20e3c:	orr	r0, r0, r3
   20e40:	adc	r9, ip, #0
   20e44:	eor	r0, r0, r8
   20e48:	adds	r0, r0, r1
   20e4c:	adc	r1, ip, #0
   20e50:	str	r0, [r6], #4
   20e54:	subs	r2, r2, #1
   20e58:	bne	20e30 <__assert_fail@plt+0xf9fc>
   20e5c:	cmp	r1, #0
   20e60:	beq	20e78 <__assert_fail@plt+0xfa44>
   20e64:	ldr	r0, [sp, #4]
   20e68:	mov	r9, r5
   20e6c:	str	r1, [r0, r4, lsl #2]
   20e70:	add	r0, r4, #1
   20e74:	b	20ea0 <__assert_fail@plt+0xfa6c>
   20e78:	ldr	r0, [sp, #4]
   20e7c:	mov	r9, r5
   20e80:	sub	r1, r0, #4
   20e84:	mov	r0, r4
   20e88:	cmp	r4, #1
   20e8c:	blt	20ea0 <__assert_fail@plt+0xfa6c>
   20e90:	ldr	r2, [r1, r0, lsl #2]
   20e94:	sub	r4, r0, #1
   20e98:	cmp	r2, #0
   20e9c:	beq	20e84 <__assert_fail@plt+0xfa50>
   20ea0:	ldr	r1, [sp, #16]
   20ea4:	cmp	r1, #0
   20ea8:	rsbne	r0, r0, #0
   20eac:	b	21060 <__assert_fail@plt+0xfc2c>
   20eb0:	ldr	r0, [r9, #8]
   20eb4:	cmp	r5, #1
   20eb8:	bge	20efc <__assert_fail@plt+0xfac8>
   20ebc:	b	2105c <__assert_fail@plt+0xfc28>
   20ec0:	movw	r0, #45348	; 0xb124
   20ec4:	movt	r0, #4
   20ec8:	ldr	r1, [r0]
   20ecc:	lsl	r0, r6, #2
   20ed0:	blx	r1
   20ed4:	str	r0, [r9, #8]
   20ed8:	str	r6, [r9]
   20edc:	ldr	r1, [r9, #4]
   20ee0:	cmp	r1, #0
   20ee4:	rsbmi	r1, r1, #0
   20ee8:	cmp	r1, r6
   20eec:	movgt	r1, #0
   20ef0:	strgt	r1, [r9, #4]
   20ef4:	cmp	r5, #1
   20ef8:	blt	2105c <__assert_fail@plt+0xfc28>
   20efc:	ldr	r1, [r4, #8]
   20f00:	mov	r2, #0
   20f04:	cmp	r5, #4
   20f08:	bcc	20ff0 <__assert_fail@plt+0xfbbc>
   20f0c:	add	r3, r1, r5, lsl #2
   20f10:	cmp	r0, r3
   20f14:	addcc	r3, r0, r5, lsl #2
   20f18:	cmpcc	r1, r3
   20f1c:	bcc	20ff0 <__assert_fail@plt+0xfbbc>
   20f20:	bic	r2, r5, #-2147483645	; 0x80000003
   20f24:	mov	r3, #1
   20f28:	str	r9, [sp, #12]
   20f2c:	mov	r9, #0
   20f30:	str	r4, [sp, #28]
   20f34:	str	r5, [sp, #24]
   20f38:	sub	r6, r2, #4
   20f3c:	add	r3, r3, r6, lsr #2
   20f40:	cmp	r6, #12
   20f44:	and	r7, r3, #3
   20f48:	str	r7, [sp, #32]
   20f4c:	bcc	20fb4 <__assert_fail@plt+0xfb80>
   20f50:	ldr	r7, [sp, #32]
   20f54:	mov	r4, #0
   20f58:	mov	lr, #48	; 0x30
   20f5c:	mov	r9, #0
   20f60:	sub	sl, r3, r7
   20f64:	add	r5, r1, r4
   20f68:	add	r7, r0, r4
   20f6c:	add	r4, r4, #64	; 0x40
   20f70:	subs	sl, sl, #4
   20f74:	add	r9, r9, #16
   20f78:	mov	r8, r5
   20f7c:	mov	r6, r7
   20f80:	add	ip, r5, #16
   20f84:	add	r3, r7, #16
   20f88:	vld1.32	{d16-d17}, [r8], lr
   20f8c:	vst1.32	{d16-d17}, [r6], lr
   20f90:	vld1.32	{d16-d17}, [ip]
   20f94:	vst1.32	{d16-d17}, [r3]
   20f98:	add	r3, r5, #32
   20f9c:	vld1.32	{d16-d17}, [r3]
   20fa0:	add	r3, r7, #32
   20fa4:	vst1.32	{d16-d17}, [r3]
   20fa8:	vld1.32	{d16-d17}, [r8]
   20fac:	vst1.32	{d16-d17}, [r6]
   20fb0:	bne	20f64 <__assert_fail@plt+0xfb30>
   20fb4:	ldr	r6, [sp, #32]
   20fb8:	cmp	r6, #0
   20fbc:	beq	20fdc <__assert_fail@plt+0xfba8>
   20fc0:	add	r3, r1, r9, lsl #2
   20fc4:	add	r7, r0, r9, lsl #2
   20fc8:	rsb	r6, r6, #0
   20fcc:	vld1.32	{d16-d17}, [r3]!
   20fd0:	adds	r6, r6, #1
   20fd4:	vst1.32	{d16-d17}, [r7]!
   20fd8:	bcc	20fcc <__assert_fail@plt+0xfb98>
   20fdc:	ldr	r5, [sp, #24]
   20fe0:	ldr	r9, [sp, #12]
   20fe4:	ldr	r4, [sp, #28]
   20fe8:	cmp	r5, r2
   20fec:	beq	2105c <__assert_fail@plt+0xfc28>
   20ff0:	mvn	r3, r2
   20ff4:	ands	r7, r5, #3
   20ff8:	add	r3, r5, r3
   20ffc:	beq	21014 <__assert_fail@plt+0xfbe0>
   21000:	ldr	r6, [r1, r2, lsl #2]
   21004:	subs	r7, r7, #1
   21008:	str	r6, [r0, r2, lsl #2]
   2100c:	add	r2, r2, #1
   21010:	bne	21000 <__assert_fail@plt+0xfbcc>
   21014:	cmp	r3, #3
   21018:	bcc	2105c <__assert_fail@plt+0xfc28>
   2101c:	sub	r3, r5, r2
   21020:	lsl	r2, r2, #2
   21024:	add	r7, r1, #16
   21028:	ldr	r6, [r1, r2]!
   2102c:	add	r5, r0, #16
   21030:	subs	r3, r3, #4
   21034:	str	r6, [r0, r2]!
   21038:	ldr	r6, [r1, #4]
   2103c:	str	r6, [r0, #4]
   21040:	ldr	r6, [r1, #8]
   21044:	str	r6, [r0, #8]
   21048:	ldr	r1, [r1, #12]
   2104c:	str	r1, [r0, #12]
   21050:	mov	r1, r7
   21054:	mov	r0, r5
   21058:	bne	21024 <__assert_fail@plt+0xfbf0>
   2105c:	ldr	r0, [r4, #4]
   21060:	str	r0, [r9, #4]
   21064:	sub	sp, fp, #28
   21068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2106c:	movw	r0, #39010	; 0x9862
   21070:	movw	r1, #37260	; 0x918c
   21074:	movw	r3, #39091	; 0x98b3
   21078:	movw	r2, #3927	; 0xf57
   2107c:	movt	r0, #3
   21080:	movt	r1, #3
   21084:	movt	r3, #3
   21088:	bl	11434 <__assert_fail@plt>
   2108c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21090:	add	fp, sp, #28
   21094:	sub	sp, sp, #36	; 0x24
   21098:	ldr	r3, [r2, #4]
   2109c:	mov	r9, r0
   210a0:	ldr	r0, [r1, #4]
   210a4:	mov	r5, r2
   210a8:	mov	r7, r1
   210ac:	cmp	r3, #0
   210b0:	rsbmi	r3, r3, #0
   210b4:	cmp	r0, #0
   210b8:	rsbmi	r0, r0, #0
   210bc:	cmp	r0, r3
   210c0:	mov	r2, r0
   210c4:	movlt	r2, r3
   210c8:	movlt	r3, r0
   210cc:	movlt	r7, r5
   210d0:	movlt	r5, r1
   210d4:	cmp	r3, #0
   210d8:	beq	21138 <__assert_fail@plt+0xfd04>
   210dc:	ldr	r6, [r5, #4]
   210e0:	ldr	r8, [r7, #4]
   210e4:	ldr	r1, [r9]
   210e8:	str	r2, [sp, #4]
   210ec:	str	r3, [sp]
   210f0:	lsr	sl, r6, #31
   210f4:	eor	r0, sl, r8, lsr #31
   210f8:	add	r4, r0, r2
   210fc:	str	r0, [sp, #16]
   21100:	cmp	r4, r1
   21104:	ble	21190 <__assert_fail@plt+0xfd5c>
   21108:	cmp	r4, #1
   2110c:	movls	r4, #1
   21110:	cmp	r1, #0
   21114:	beq	2119c <__assert_fail@plt+0xfd68>
   21118:	movw	r0, #45352	; 0xb128
   2111c:	lsl	r1, r1, #2
   21120:	lsl	r2, r4, #2
   21124:	movt	r0, #4
   21128:	ldr	r3, [r0]
   2112c:	ldr	r0, [r9, #8]
   21130:	blx	r3
   21134:	b	211b0 <__assert_fail@plt+0xfd7c>
   21138:	cmp	r7, r9
   2113c:	beq	214bc <__assert_fail@plt+0x10088>
   21140:	ldr	r5, [r7, #4]
   21144:	ldr	r1, [r9]
   21148:	str	r7, [sp, #32]
   2114c:	cmp	r5, #0
   21150:	rsbmi	r5, r5, #0
   21154:	cmp	r5, r1
   21158:	ble	21308 <__assert_fail@plt+0xfed4>
   2115c:	cmp	r5, #1
   21160:	mov	r4, r5
   21164:	movle	r4, #1
   21168:	cmp	r1, #0
   2116c:	beq	21318 <__assert_fail@plt+0xfee4>
   21170:	movw	r0, #45352	; 0xb128
   21174:	lsl	r1, r1, #2
   21178:	lsl	r2, r4, #2
   2117c:	movt	r0, #4
   21180:	ldr	r3, [r0]
   21184:	ldr	r0, [r9, #8]
   21188:	blx	r3
   2118c:	b	2132c <__assert_fail@plt+0xfef8>
   21190:	ldr	r0, [r9, #8]
   21194:	str	r0, [sp, #12]
   21198:	b	211d4 <__assert_fail@plt+0xfda0>
   2119c:	movw	r0, #45348	; 0xb124
   211a0:	movt	r0, #4
   211a4:	ldr	r1, [r0]
   211a8:	lsl	r0, r4, #2
   211ac:	blx	r1
   211b0:	str	r0, [r9, #8]
   211b4:	str	r4, [r9]
   211b8:	str	r0, [sp, #12]
   211bc:	ldr	r1, [r9, #4]
   211c0:	cmp	r1, #0
   211c4:	rsbmi	r1, r1, #0
   211c8:	cmp	r1, r4
   211cc:	movgt	r1, #0
   211d0:	strgt	r1, [r9, #4]
   211d4:	ldr	r3, [sp, #16]
   211d8:	asr	r0, r6, #31
   211dc:	asr	ip, r8, #31
   211e0:	lsr	r2, r8, #31
   211e4:	ldr	lr, [sp]
   211e8:	ldr	r8, [sp, #12]
   211ec:	mov	r6, #0
   211f0:	mov	r4, #0
   211f4:	str	r9, [sp, #8]
   211f8:	str	r0, [sp, #28]
   211fc:	ldr	r1, [sp, #28]
   21200:	rsb	r0, r3, #0
   21204:	str	r0, [sp, #24]
   21208:	ldr	r0, [r5, #8]
   2120c:	str	r0, [sp, #20]
   21210:	ldr	r0, [r7, #8]
   21214:	str	r0, [sp, #32]
   21218:	ldr	r0, [sp, #32]
   2121c:	mov	r7, sl
   21220:	ldr	r5, [r0, r4, lsl #2]
   21224:	ldr	r0, [sp, #24]
   21228:	eor	r5, r5, ip
   2122c:	adds	r5, r5, r2
   21230:	eor	r5, r5, r0
   21234:	ldr	r0, [sp, #20]
   21238:	adc	r2, r6, #0
   2123c:	ldr	r0, [r0, r4, lsl #2]
   21240:	eor	r0, r0, r1
   21244:	adds	r9, r0, sl
   21248:	eor	r0, r5, r9
   2124c:	adc	sl, r6, #0
   21250:	adds	r0, r0, r3
   21254:	str	r0, [r8, r4, lsl #2]
   21258:	add	r4, r4, #1
   2125c:	adc	r3, r6, #0
   21260:	cmp	r4, lr
   21264:	bcc	21218 <__assert_fail@plt+0xfde4>
   21268:	ldr	r5, [sp, #32]
   2126c:	cmp	r9, r7
   21270:	bcc	214c4 <__assert_fail@plt+0x10090>
   21274:	ldr	r6, [sp, #4]
   21278:	ldr	r1, [sp, #12]
   2127c:	cmp	r4, r6
   21280:	bge	212cc <__assert_fail@plt+0xfe98>
   21284:	ldr	r9, [sp, #8]
   21288:	mov	r7, #0
   2128c:	ldr	r0, [r5, r4, lsl #2]
   21290:	eor	r0, r0, ip
   21294:	adds	r0, r0, r2
   21298:	eor	r0, r0, ip
   2129c:	adc	r2, r7, #0
   212a0:	adds	r0, r0, r3
   212a4:	str	r0, [r1, r4, lsl #2]
   212a8:	add	r4, r4, #1
   212ac:	adc	r3, r7, #0
   212b0:	cmp	r4, r6
   212b4:	blt	2128c <__assert_fail@plt+0xfe58>
   212b8:	cmp	r3, #0
   212bc:	beq	212d8 <__assert_fail@plt+0xfea4>
   212c0:	str	r3, [r1, r6, lsl #2]
   212c4:	add	r0, r6, #1
   212c8:	b	212f8 <__assert_fail@plt+0xfec4>
   212cc:	ldr	r9, [sp, #8]
   212d0:	cmp	r3, #0
   212d4:	bne	212c0 <__assert_fail@plt+0xfe8c>
   212d8:	sub	r1, r1, #4
   212dc:	mov	r0, r6
   212e0:	cmp	r6, #1
   212e4:	blt	212f8 <__assert_fail@plt+0xfec4>
   212e8:	ldr	r2, [r1, r0, lsl #2]
   212ec:	sub	r6, r0, #1
   212f0:	cmp	r2, #0
   212f4:	beq	212dc <__assert_fail@plt+0xfea8>
   212f8:	ldr	r1, [sp, #16]
   212fc:	cmp	r1, #0
   21300:	rsbne	r0, r0, #0
   21304:	b	214b8 <__assert_fail@plt+0x10084>
   21308:	ldr	r0, [r9, #8]
   2130c:	cmp	r5, #1
   21310:	bge	21354 <__assert_fail@plt+0xff20>
   21314:	b	214b0 <__assert_fail@plt+0x1007c>
   21318:	movw	r0, #45348	; 0xb124
   2131c:	movt	r0, #4
   21320:	ldr	r1, [r0]
   21324:	lsl	r0, r4, #2
   21328:	blx	r1
   2132c:	str	r0, [r9, #8]
   21330:	str	r4, [r9]
   21334:	ldr	r1, [r9, #4]
   21338:	cmp	r1, #0
   2133c:	rsbmi	r1, r1, #0
   21340:	cmp	r1, r4
   21344:	movgt	r1, #0
   21348:	strgt	r1, [r9, #4]
   2134c:	cmp	r5, #1
   21350:	blt	214b0 <__assert_fail@plt+0x1007c>
   21354:	ldr	r1, [sp, #32]
   21358:	mov	r2, #0
   2135c:	cmp	r5, #4
   21360:	ldr	r1, [r1, #8]
   21364:	bcc	21444 <__assert_fail@plt+0x10010>
   21368:	add	r3, r1, r5, lsl #2
   2136c:	cmp	r0, r3
   21370:	addcc	r3, r0, r5, lsl #2
   21374:	cmpcc	r1, r3
   21378:	bcc	21444 <__assert_fail@plt+0x10010>
   2137c:	bic	r2, r5, #-2147483645	; 0x80000003
   21380:	mov	r3, #1
   21384:	str	r9, [sp, #8]
   21388:	mov	r9, #0
   2138c:	str	r5, [sp, #24]
   21390:	sub	r6, r2, #4
   21394:	add	r3, r3, r6, lsr #2
   21398:	cmp	r6, #12
   2139c:	and	r7, r3, #3
   213a0:	str	r7, [sp, #28]
   213a4:	bcc	2140c <__assert_fail@plt+0xffd8>
   213a8:	ldr	r7, [sp, #28]
   213ac:	mov	r4, #0
   213b0:	mov	lr, #48	; 0x30
   213b4:	mov	r9, #0
   213b8:	sub	sl, r3, r7
   213bc:	add	r5, r1, r4
   213c0:	add	r7, r0, r4
   213c4:	add	r4, r4, #64	; 0x40
   213c8:	subs	sl, sl, #4
   213cc:	add	r9, r9, #16
   213d0:	mov	r8, r5
   213d4:	mov	r6, r7
   213d8:	add	ip, r5, #16
   213dc:	add	r3, r7, #16
   213e0:	vld1.32	{d16-d17}, [r8], lr
   213e4:	vst1.32	{d16-d17}, [r6], lr
   213e8:	vld1.32	{d16-d17}, [ip]
   213ec:	vst1.32	{d16-d17}, [r3]
   213f0:	add	r3, r5, #32
   213f4:	vld1.32	{d16-d17}, [r3]
   213f8:	add	r3, r7, #32
   213fc:	vst1.32	{d16-d17}, [r3]
   21400:	vld1.32	{d16-d17}, [r8]
   21404:	vst1.32	{d16-d17}, [r6]
   21408:	bne	213bc <__assert_fail@plt+0xff88>
   2140c:	ldr	r6, [sp, #28]
   21410:	cmp	r6, #0
   21414:	beq	21434 <__assert_fail@plt+0x10000>
   21418:	add	r3, r1, r9, lsl #2
   2141c:	add	r7, r0, r9, lsl #2
   21420:	rsb	r6, r6, #0
   21424:	vld1.32	{d16-d17}, [r3]!
   21428:	adds	r6, r6, #1
   2142c:	vst1.32	{d16-d17}, [r7]!
   21430:	bcc	21424 <__assert_fail@plt+0xfff0>
   21434:	ldr	r5, [sp, #24]
   21438:	ldr	r9, [sp, #8]
   2143c:	cmp	r5, r2
   21440:	beq	214b0 <__assert_fail@plt+0x1007c>
   21444:	mvn	r3, r2
   21448:	ands	r7, r5, #3
   2144c:	add	r3, r5, r3
   21450:	beq	21468 <__assert_fail@plt+0x10034>
   21454:	ldr	r6, [r1, r2, lsl #2]
   21458:	subs	r7, r7, #1
   2145c:	str	r6, [r0, r2, lsl #2]
   21460:	add	r2, r2, #1
   21464:	bne	21454 <__assert_fail@plt+0x10020>
   21468:	cmp	r3, #3
   2146c:	bcc	214b0 <__assert_fail@plt+0x1007c>
   21470:	sub	r3, r5, r2
   21474:	lsl	r2, r2, #2
   21478:	add	r7, r1, #16
   2147c:	ldr	r6, [r1, r2]!
   21480:	add	r5, r0, #16
   21484:	subs	r3, r3, #4
   21488:	str	r6, [r0, r2]!
   2148c:	ldr	r6, [r1, #4]
   21490:	str	r6, [r0, #4]
   21494:	ldr	r6, [r1, #8]
   21498:	str	r6, [r0, #8]
   2149c:	ldr	r1, [r1, #12]
   214a0:	str	r1, [r0, #12]
   214a4:	mov	r1, r7
   214a8:	mov	r0, r5
   214ac:	bne	21478 <__assert_fail@plt+0x10044>
   214b0:	ldr	r0, [sp, #32]
   214b4:	ldr	r0, [r0, #4]
   214b8:	str	r0, [r9, #4]
   214bc:	sub	sp, fp, #28
   214c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   214c4:	movw	r0, #39010	; 0x9862
   214c8:	movw	r1, #37260	; 0x918c
   214cc:	movw	r3, #39164	; 0x98fc
   214d0:	movw	r2, #3996	; 0xf9c
   214d4:	movt	r0, #3
   214d8:	movt	r1, #3
   214dc:	movt	r3, #3
   214e0:	bl	11434 <__assert_fail@plt>
   214e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   214e8:	add	fp, sp, #24
   214ec:	cmp	r1, #1
   214f0:	blt	21574 <__assert_fail@plt+0x10140>
   214f4:	mov	lr, #0
   214f8:	movw	r2, #21845	; 0x5555
   214fc:	movw	r3, #13107	; 0x3333
   21500:	mov	ip, #0
   21504:	mov	r8, #0
   21508:	b	2151c <__assert_fail@plt+0x100e8>
   2150c:	add	r8, r8, #1
   21510:	add	ip, r6, ip
   21514:	cmp	r8, r1
   21518:	beq	2156c <__assert_fail@plt+0x10138>
   2151c:	ldr	r5, [r0, r8, lsl #2]
   21520:	mov	r6, #0
   21524:	cmp	r5, #0
   21528:	beq	2150c <__assert_fail@plt+0x100d8>
   2152c:	mov	r6, #0
   21530:	and	r7, r2, r5, lsr #1
   21534:	cmp	lr, r5, lsr #16
   21538:	sub	r7, r5, r7
   2153c:	and	r4, r7, r3
   21540:	and	r7, r3, r7, lsr #2
   21544:	add	r4, r7, r4
   21548:	add	r4, r4, r4, lsr #4
   2154c:	and	r7, r4, #15
   21550:	ubfx	r4, r4, #8, #4
   21554:	add	r6, r7, r6
   21558:	add	r6, r6, r4
   2155c:	lsr	r4, r5, #16
   21560:	mov	r5, r4
   21564:	bne	21530 <__assert_fail@plt+0x100fc>
   21568:	b	2150c <__assert_fail@plt+0x100d8>
   2156c:	mov	r0, ip
   21570:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21574:	mov	ip, #0
   21578:	mov	r0, ip
   2157c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21580:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21584:	add	fp, sp, #24
   21588:	ldr	lr, [r0, #4]
   2158c:	cmp	lr, #0
   21590:	bmi	21618 <__assert_fail@plt+0x101e4>
   21594:	beq	21620 <__assert_fail@plt+0x101ec>
   21598:	ldr	ip, [r0, #8]
   2159c:	mov	r3, #0
   215a0:	movw	r2, #21845	; 0x5555
   215a4:	movw	r1, #13107	; 0x3333
   215a8:	mov	r0, #0
   215ac:	mov	r8, #0
   215b0:	b	215c4 <__assert_fail@plt+0x10190>
   215b4:	add	r8, r8, #1
   215b8:	add	r0, r6, r0
   215bc:	cmp	r8, lr
   215c0:	beq	21614 <__assert_fail@plt+0x101e0>
   215c4:	ldr	r5, [ip, r8, lsl #2]
   215c8:	mov	r6, #0
   215cc:	cmp	r5, #0
   215d0:	beq	215b4 <__assert_fail@plt+0x10180>
   215d4:	mov	r6, #0
   215d8:	and	r7, r2, r5, lsr #1
   215dc:	cmp	r3, r5, lsr #16
   215e0:	sub	r7, r5, r7
   215e4:	and	r4, r7, r1
   215e8:	and	r7, r1, r7, lsr #2
   215ec:	add	r4, r7, r4
   215f0:	add	r4, r4, r4, lsr #4
   215f4:	and	r7, r4, #15
   215f8:	ubfx	r4, r4, #8, #4
   215fc:	add	r6, r7, r6
   21600:	add	r6, r6, r4
   21604:	lsr	r4, r5, #16
   21608:	mov	r5, r4
   2160c:	bne	215d8 <__assert_fail@plt+0x101a4>
   21610:	b	215b4 <__assert_fail@plt+0x10180>
   21614:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21618:	mvn	r0, #0
   2161c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21620:	mov	r0, #0
   21624:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21628:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2162c:	add	fp, sp, #28
   21630:	sub	sp, sp, #20
   21634:	ldr	r3, [r0, #4]
   21638:	ldr	lr, [r1, #4]
   2163c:	eors	r7, lr, r3
   21640:	bmi	21654 <__assert_fail@plt+0x10220>
   21644:	cmn	r3, #1
   21648:	ble	21660 <__assert_fail@plt+0x1022c>
   2164c:	mov	r4, r3
   21650:	b	21670 <__assert_fail@plt+0x1023c>
   21654:	mvn	r0, #0
   21658:	sub	sp, fp, #28
   2165c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21660:	cmp	lr, #0
   21664:	bpl	2182c <__assert_fail@plt+0x103f8>
   21668:	rsb	lr, lr, #0
   2166c:	rsb	r4, r3, #0
   21670:	asr	r2, r3, #31
   21674:	cmp	r4, lr
   21678:	mov	r8, r4
   2167c:	lsr	ip, r3, #31
   21680:	str	r2, [sp, #16]
   21684:	ldr	r2, [r0, #8]
   21688:	ldr	r0, [r1, #8]
   2168c:	movlt	r8, lr
   21690:	movlt	lr, r4
   21694:	mov	r1, r0
   21698:	movlt	r1, r2
   2169c:	movlt	r2, r0
   216a0:	cmp	lr, #1
   216a4:	str	r1, [sp, #8]
   216a8:	str	r2, [sp, #12]
   216ac:	blt	21800 <__assert_fail@plt+0x103cc>
   216b0:	mov	r6, #0
   216b4:	movw	r7, #21845	; 0x5555
   216b8:	movw	r1, #13107	; 0x3333
   216bc:	mov	r0, #0
   216c0:	mov	r4, #0
   216c4:	mov	sl, ip
   216c8:	str	r8, [sp, #4]
   216cc:	b	216e0 <__assert_fail@plt+0x102ac>
   216d0:	add	r4, r4, #1
   216d4:	add	r0, r8, r0
   216d8:	cmp	r4, lr
   216dc:	bge	2175c <__assert_fail@plt+0x10328>
   216e0:	ldr	r2, [sp, #8]
   216e4:	ldr	r5, [sp, #12]
   216e8:	mov	r8, #0
   216ec:	ldr	r3, [r2, r4, lsl #2]
   216f0:	ldr	r2, [sp, #16]
   216f4:	ldr	r5, [r5, r4, lsl #2]
   216f8:	eor	r3, r3, r2
   216fc:	eor	r5, r5, r2
   21700:	adds	r3, r3, sl
   21704:	adc	sl, r6, #0
   21708:	adds	r5, r5, ip
   2170c:	eor	r3, r3, r5
   21710:	adc	ip, r6, #0
   21714:	cmp	r3, #0
   21718:	beq	216d0 <__assert_fail@plt+0x1029c>
   2171c:	mov	r8, #0
   21720:	and	r5, r7, r3, lsr #1
   21724:	cmp	r6, r3, lsr #16
   21728:	sub	r5, r3, r5
   2172c:	and	r9, r5, r1
   21730:	and	r5, r1, r5, lsr #2
   21734:	add	r5, r5, r9
   21738:	add	r5, r5, r5, lsr #4
   2173c:	and	r2, r5, #15
   21740:	ubfx	r5, r5, #8, #4
   21744:	add	r2, r2, r8
   21748:	add	r8, r2, r5
   2174c:	lsr	r2, r3, #16
   21750:	mov	r3, r2
   21754:	bne	21720 <__assert_fail@plt+0x102ec>
   21758:	b	216d0 <__assert_fail@plt+0x1029c>
   2175c:	ldr	r8, [sp, #4]
   21760:	cmp	sl, #0
   21764:	bne	21814 <__assert_fail@plt+0x103e0>
   21768:	cmp	lr, r8
   2176c:	bge	217f8 <__assert_fail@plt+0x103c4>
   21770:	movw	r1, #21845	; 0x5555
   21774:	movw	r4, #13107	; 0x3333
   21778:	mov	r5, #0
   2177c:	b	21790 <__assert_fail@plt+0x1035c>
   21780:	add	lr, lr, #1
   21784:	add	r0, r6, r0
   21788:	cmp	lr, r8
   2178c:	bge	217f8 <__assert_fail@plt+0x103c4>
   21790:	ldr	r2, [sp, #12]
   21794:	ldr	r3, [sp, #16]
   21798:	mov	r6, #0
   2179c:	ldr	r2, [r2, lr, lsl #2]
   217a0:	eor	r2, r2, r3
   217a4:	adds	r2, r2, ip
   217a8:	eor	r3, r2, r3
   217ac:	adc	ip, r5, #0
   217b0:	cmp	r3, #0
   217b4:	beq	21780 <__assert_fail@plt+0x1034c>
   217b8:	mov	r6, #0
   217bc:	and	r2, r1, r3, lsr #1
   217c0:	cmp	r5, r3, lsr #16
   217c4:	sub	r2, r3, r2
   217c8:	and	r7, r2, r4
   217cc:	and	r2, r4, r2, lsr #2
   217d0:	add	r2, r2, r7
   217d4:	add	r2, r2, r2, lsr #4
   217d8:	and	r7, r2, #15
   217dc:	ubfx	r2, r2, #8, #4
   217e0:	add	r6, r7, r6
   217e4:	add	r6, r6, r2
   217e8:	lsr	r2, r3, #16
   217ec:	mov	r3, r2
   217f0:	bne	217bc <__assert_fail@plt+0x10388>
   217f4:	b	21780 <__assert_fail@plt+0x1034c>
   217f8:	sub	sp, fp, #28
   217fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21800:	mov	lr, #0
   21804:	mov	sl, ip
   21808:	mov	r0, #0
   2180c:	cmp	sl, #0
   21810:	beq	21768 <__assert_fail@plt+0x10334>
   21814:	movw	r0, #39010	; 0x9862
   21818:	movw	r1, #37260	; 0x918c
   2181c:	movw	r3, #39244	; 0x994c
   21820:	movw	r2, #4100	; 0x1004
   21824:	movt	r0, #3
   21828:	b	21840 <__assert_fail@plt+0x1040c>
   2182c:	movw	r0, #39237	; 0x9945
   21830:	movw	r1, #37260	; 0x918c
   21834:	movw	r3, #39244	; 0x994c
   21838:	movw	r2, #4079	; 0xfef
   2183c:	movt	r0, #3
   21840:	movt	r1, #3
   21844:	movt	r3, #3
   21848:	bl	11434 <__assert_fail@plt>
   2184c:	push	{r4, r5, r6, sl, fp, lr}
   21850:	add	fp, sp, #16
   21854:	sub	sp, sp, #8
   21858:	ldr	r4, [r0, #4]
   2185c:	cmp	r4, #0
   21860:	mov	r3, r4
   21864:	rsbmi	r3, r4, #0
   21868:	cmp	r3, r1, lsr #5
   2186c:	ble	218ec <__assert_fail@plt+0x104b8>
   21870:	ldr	r2, [r0, #8]
   21874:	lsr	ip, r1, #5
   21878:	mov	lr, #0
   2187c:	cmp	r1, #0
   21880:	ldr	r0, [r2, ip, lsl #2]
   21884:	beq	218d8 <__assert_fail@plt+0x104a4>
   21888:	cmn	r4, #1
   2188c:	bgt	218cc <__assert_fail@plt+0x10498>
   21890:	sub	lr, r2, #4
   21894:	mov	r5, ip
   21898:	mov	r4, r5
   2189c:	cmp	r5, #1
   218a0:	blt	218b4 <__assert_fail@plt+0x10480>
   218a4:	ldr	r6, [lr, r4, lsl #2]
   218a8:	sub	r5, r4, #1
   218ac:	cmp	r6, #0
   218b0:	beq	21898 <__assert_fail@plt+0x10464>
   218b4:	clz	r6, r4
   218b8:	mvn	r0, r0
   218bc:	mov	lr, #0
   218c0:	lsr	r6, r6, #5
   218c4:	adds	r0, r6, r0
   218c8:	mvncc	lr, #0
   218cc:	and	r1, r1, #31
   218d0:	mvn	r4, #0
   218d4:	and	r0, r0, r4, lsl r1
   218d8:	mov	r1, ip
   218dc:	str	lr, [sp]
   218e0:	bl	147ec <__assert_fail@plt+0x33b8>
   218e4:	sub	sp, fp, #16
   218e8:	pop	{r4, r5, r6, sl, fp, pc}
   218ec:	cmn	r4, #1
   218f0:	mvngt	r1, #0
   218f4:	mov	r0, r1
   218f8:	sub	sp, fp, #16
   218fc:	pop	{r4, r5, r6, sl, fp, pc}
   21900:	push	{r4, r5, r6, r7, fp, lr}
   21904:	add	fp, sp, #16
   21908:	sub	sp, sp, #8
   2190c:	ldr	r2, [r0, #4]
   21910:	cmp	r2, #0
   21914:	mov	r3, r2
   21918:	rsbmi	r3, r2, #0
   2191c:	mvn	r2, r2
   21920:	cmp	r3, r1, lsr #5
   21924:	lsr	r4, r2, #31
   21928:	ble	21994 <__assert_fail@plt+0x10560>
   2192c:	asr	lr, r2, #31
   21930:	ldr	r2, [r0, #8]
   21934:	lsr	ip, r1, #5
   21938:	cmp	r4, #0
   2193c:	ldr	r0, [r2, ip, lsl #2]
   21940:	eor	r0, r0, lr
   21944:	bne	21974 <__assert_fail@plt+0x10540>
   21948:	sub	r4, r2, #4
   2194c:	mov	r6, ip
   21950:	mov	r5, r6
   21954:	cmp	r6, #1
   21958:	blt	2196c <__assert_fail@plt+0x10538>
   2195c:	ldr	r7, [r4, r5, lsl #2]
   21960:	sub	r6, r5, #1
   21964:	cmp	r7, #0
   21968:	beq	21950 <__assert_fail@plt+0x1051c>
   2196c:	cmp	r5, #0
   21970:	subeq	r0, r0, #1
   21974:	and	r1, r1, #31
   21978:	mvn	r7, #0
   2197c:	str	lr, [sp]
   21980:	and	r0, r0, r7, lsl r1
   21984:	mov	r1, ip
   21988:	bl	147ec <__assert_fail@plt+0x33b8>
   2198c:	sub	sp, fp, #16
   21990:	pop	{r4, r5, r6, r7, fp, pc}
   21994:	cmp	r4, #0
   21998:	mvneq	r1, #0
   2199c:	mov	r0, r1
   219a0:	sub	sp, fp, #16
   219a4:	pop	{r4, r5, r6, r7, fp, pc}
   219a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   219ac:	add	fp, sp, #28
   219b0:	sub	sp, sp, #20
   219b4:	ldr	ip, [r3]
   219b8:	mov	r9, r3
   219bc:	mov	r8, r2
   219c0:	mov	r7, r1
   219c4:	mov	r5, r0
   219c8:	cmp	ip, #0
   219cc:	beq	21a9c <__assert_fail@plt+0x10668>
   219d0:	mov	lr, #0
   219d4:	cmp	r5, #0
   219d8:	mov	r0, r5
   219dc:	bne	219fc <__assert_fail@plt+0x105c8>
   219e0:	movw	r0, #45348	; 0xb124
   219e4:	movt	r0, #4
   219e8:	ldr	r1, [r0]
   219ec:	lsl	r0, r8, #2
   219f0:	blx	r1
   219f4:	ldr	ip, [r9]
   219f8:	mov	lr, r8
   219fc:	cmp	r8, #0
   21a00:	ble	21bbc <__assert_fail@plt+0x10788>
   21a04:	cmp	ip, #0
   21a08:	beq	21bd4 <__assert_fail@plt+0x107a0>
   21a0c:	cmp	ip, #32
   21a10:	bcs	21bec <__assert_fail@plt+0x107b8>
   21a14:	str	r5, [sp, #16]
   21a18:	add	r5, r7, r8, lsl #2
   21a1c:	add	r3, r0, r8, lsl #2
   21a20:	rsb	sl, ip, #32
   21a24:	ldr	r1, [r5, #-4]!
   21a28:	lsl	r7, r1, ip
   21a2c:	lsr	r4, r1, sl
   21a30:	subs	r1, r8, #1
   21a34:	beq	21a8c <__assert_fail@plt+0x10658>
   21a38:	tst	r1, #1
   21a3c:	beq	21a54 <__assert_fail@plt+0x10620>
   21a40:	ldr	r1, [r5, #-4]!
   21a44:	orr	r7, r7, r1, lsr sl
   21a48:	str	r7, [r3, #-4]!
   21a4c:	lsl	r7, r1, ip
   21a50:	sub	r1, r8, #2
   21a54:	cmp	r8, #2
   21a58:	beq	21a8c <__assert_fail@plt+0x10658>
   21a5c:	sub	r5, r5, #4
   21a60:	ldr	r6, [r5]
   21a64:	subs	r1, r1, #2
   21a68:	orr	r7, r7, r6, lsr sl
   21a6c:	str	r7, [r3, #-4]
   21a70:	ldr	r2, [r5, #-4]
   21a74:	sub	r5, r5, #8
   21a78:	lsl	r7, r2, ip
   21a7c:	lsr	r2, r2, sl
   21a80:	orr	r2, r2, r6, lsl ip
   21a84:	str	r2, [r3, #-8]!
   21a88:	bne	21a60 <__assert_fail@plt+0x1062c>
   21a8c:	ldr	r5, [sp, #16]
   21a90:	str	r7, [r3, #-4]
   21a94:	mov	r7, r0
   21a98:	b	21aac <__assert_fail@plt+0x10678>
   21a9c:	mov	ip, #0
   21aa0:	mov	lr, #0
   21aa4:	mov	r0, #0
   21aa8:	mov	r4, #0
   21aac:	cmp	r8, #1
   21ab0:	str	r0, [sp]
   21ab4:	str	lr, [sp, #8]
   21ab8:	str	ip, [sp, #12]
   21abc:	str	r9, [sp, #4]
   21ac0:	blt	21b80 <__assert_fail@plt+0x1074c>
   21ac4:	ldr	r0, [r9, #12]
   21ac8:	ldr	r1, [r9, #4]
   21acc:	sub	r2, r5, #4
   21ad0:	mov	sl, r5
   21ad4:	sub	r9, r7, #4
   21ad8:	str	r2, [sp, #16]
   21adc:	uxth	r5, r0
   21ae0:	lsr	r7, r0, #16
   21ae4:	b	21af4 <__assert_fail@plt+0x106c0>
   21ae8:	cmp	r6, #0
   21aec:	mov	r8, r6
   21af0:	ble	21b80 <__assert_fail@plt+0x1074c>
   21af4:	uxth	r0, r4
   21af8:	lsr	r6, r4, #16
   21afc:	mov	ip, #0
   21b00:	mul	r3, r6, r5
   21b04:	mul	r2, r0, r7
   21b08:	mul	r0, r0, r5
   21b0c:	mla	r2, r6, r5, r2
   21b10:	mul	r6, r6, r7
   21b14:	add	r2, r2, r0, lsr #16
   21b18:	cmp	r2, r3
   21b1c:	add	r3, r4, r2, lsr #16
   21b20:	ldr	r4, [r9, r8, lsl #2]
   21b24:	pkhbt	r0, r0, r2, lsl #16
   21b28:	addcc	r6, r6, #65536	; 0x10000
   21b2c:	add	r3, r3, #1
   21b30:	adds	r0, r4, r0
   21b34:	adc	r2, r3, r6
   21b38:	sub	r6, r8, #1
   21b3c:	mls	r3, r2, r1, r4
   21b40:	cmp	r3, r0
   21b44:	mvnhi	ip, #0
   21b48:	and	r0, r1, ip
   21b4c:	add	lr, r0, r3
   21b50:	subs	r4, lr, r1
   21b54:	movcc	r4, lr
   21b58:	cmp	sl, #0
   21b5c:	beq	21ae8 <__assert_fail@plt+0x106b4>
   21b60:	cmp	lr, r1
   21b64:	mov	r0, #0
   21b68:	add	r2, r2, ip
   21b6c:	movwcs	r0, #1
   21b70:	add	r0, r2, r0
   21b74:	ldr	r2, [sp, #16]
   21b78:	str	r0, [r2, r8, lsl #2]
   21b7c:	b	21ae8 <__assert_fail@plt+0x106b4>
   21b80:	ldr	r1, [sp, #8]
   21b84:	ldr	r0, [sp, #12]
   21b88:	cmp	r1, #0
   21b8c:	beq	21bb0 <__assert_fail@plt+0x1077c>
   21b90:	movw	r0, #45356	; 0xb12c
   21b94:	lsl	r1, r1, #2
   21b98:	movt	r0, #4
   21b9c:	ldr	r2, [r0]
   21ba0:	ldr	r0, [sp]
   21ba4:	blx	r2
   21ba8:	ldr	r0, [sp, #4]
   21bac:	ldr	r0, [r0]
   21bb0:	lsr	r0, r4, r0
   21bb4:	sub	sp, fp, #28
   21bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21bbc:	movw	r0, #37817	; 0x93b9
   21bc0:	movw	r1, #37260	; 0x918c
   21bc4:	movw	r3, #37904	; 0x9410
   21bc8:	movw	r2, #659	; 0x293
   21bcc:	movt	r0, #3
   21bd0:	b	21c00 <__assert_fail@plt+0x107cc>
   21bd4:	movw	r0, #37969	; 0x9451
   21bd8:	movw	r1, #37260	; 0x918c
   21bdc:	movw	r3, #37904	; 0x9410
   21be0:	mov	r2, #660	; 0x294
   21be4:	movt	r0, #3
   21be8:	b	21c00 <__assert_fail@plt+0x107cc>
   21bec:	movw	r0, #37978	; 0x945a
   21bf0:	movw	r1, #37260	; 0x918c
   21bf4:	movw	r3, #37904	; 0x9410
   21bf8:	movw	r2, #661	; 0x295
   21bfc:	movt	r0, #3
   21c00:	movt	r1, #3
   21c04:	movt	r3, #3
   21c08:	bl	11434 <__assert_fail@plt>
   21c0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c10:	add	fp, sp, #28
   21c14:	sub	sp, sp, #36	; 0x24
   21c18:	mov	r5, r2
   21c1c:	mov	r6, r1
   21c20:	mov	r8, r0
   21c24:	cmp	r1, #2
   21c28:	blt	21c40 <__assert_fail@plt+0x1080c>
   21c2c:	cmp	r6, #37	; 0x25
   21c30:	bge	21c58 <__assert_fail@plt+0x10824>
   21c34:	movw	r9, #39445	; 0x9a15
   21c38:	movt	r9, #3
   21c3c:	b	21c80 <__assert_fail@plt+0x1084c>
   21c40:	movw	r9, #39382	; 0x99d6
   21c44:	cmn	r6, #2
   21c48:	movt	r9, #3
   21c4c:	ble	21c70 <__assert_fail@plt+0x1083c>
   21c50:	mov	r6, #10
   21c54:	b	21c80 <__assert_fail@plt+0x1084c>
   21c58:	mov	r0, #0
   21c5c:	cmp	r6, #62	; 0x3e
   21c60:	bgt	21e68 <__assert_fail@plt+0x10a34>
   21c64:	movw	r9, #39382	; 0x99d6
   21c68:	movt	r9, #3
   21c6c:	b	21c80 <__assert_fail@plt+0x1084c>
   21c70:	mov	r0, #0
   21c74:	cmn	r6, #36	; 0x24
   21c78:	blt	21e68 <__assert_fail@plt+0x10a34>
   21c7c:	rsb	r6, r6, #0
   21c80:	mov	r0, r5
   21c84:	mov	r1, r6
   21c88:	bl	1e4a8 <__assert_fail@plt+0xd074>
   21c8c:	mov	sl, #0
   21c90:	cmp	r8, #0
   21c94:	bne	21cb4 <__assert_fail@plt+0x10880>
   21c98:	movw	r1, #45348	; 0xb124
   21c9c:	add	sl, r0, #2
   21ca0:	movt	r1, #4
   21ca4:	mov	r0, sl
   21ca8:	ldr	r1, [r1]
   21cac:	blx	r1
   21cb0:	mov	r8, r0
   21cb4:	ldr	r0, [r5, #4]
   21cb8:	cmp	r0, #0
   21cbc:	mov	r3, r0
   21cc0:	rsbmi	r3, r0, #0
   21cc4:	cmp	r3, #0
   21cc8:	beq	21d84 <__assert_fail@plt+0x10950>
   21ccc:	cmn	r0, #1
   21cd0:	mov	r4, #0
   21cd4:	movle	r0, #45	; 0x2d
   21cd8:	movle	r4, #1
   21cdc:	strble	r0, [r8]
   21ce0:	cmp	r6, #63	; 0x3f
   21ce4:	bgt	21d94 <__assert_fail@plt+0x10960>
   21ce8:	sub	r0, r6, #2
   21cec:	cmp	r0, #30
   21cf0:	bhi	21e90 <__assert_fail@plt+0x10a5c>
   21cf4:	add	r2, pc, #4
   21cf8:	mov	r1, #1
   21cfc:	ldr	pc, [r2, r0, lsl #2]
   21d00:	ldrdeq	r1, [r2], -r8
   21d04:	muleq	r2, r0, lr
   21d08:	andeq	r1, r2, ip, ror sp
   21d0c:	muleq	r2, r0, lr
   21d10:	muleq	r2, r0, lr
   21d14:	muleq	r2, r0, lr
   21d18:			; <UNDEFINED> instruction: 0x00021db4
   21d1c:	muleq	r2, r0, lr
   21d20:	muleq	r2, r0, lr
   21d24:	muleq	r2, r0, lr
   21d28:	muleq	r2, r0, lr
   21d2c:	muleq	r2, r0, lr
   21d30:	muleq	r2, r0, lr
   21d34:	muleq	r2, r0, lr
   21d38:			; <UNDEFINED> instruction: 0x00021dbc
   21d3c:	muleq	r2, r0, lr
   21d40:	muleq	r2, r0, lr
   21d44:	muleq	r2, r0, lr
   21d48:	muleq	r2, r0, lr
   21d4c:	muleq	r2, r0, lr
   21d50:	muleq	r2, r0, lr
   21d54:	muleq	r2, r0, lr
   21d58:	muleq	r2, r0, lr
   21d5c:	muleq	r2, r0, lr
   21d60:	muleq	r2, r0, lr
   21d64:	muleq	r2, r0, lr
   21d68:	muleq	r2, r0, lr
   21d6c:	muleq	r2, r0, lr
   21d70:	muleq	r2, r0, lr
   21d74:	muleq	r2, r0, lr
   21d78:	andeq	r1, r2, r4, asr #27
   21d7c:	mov	r1, #2
   21d80:	b	21dd8 <__assert_fail@plt+0x109a4>
   21d84:	mov	r0, #48	; 0x30
   21d88:	strb	r0, [r8]
   21d8c:	mov	r0, #1
   21d90:	b	21e4c <__assert_fail@plt+0x10a18>
   21d94:	cmp	r6, #64	; 0x40
   21d98:	beq	21dcc <__assert_fail@plt+0x10998>
   21d9c:	cmp	r6, #128	; 0x80
   21da0:	beq	21dd4 <__assert_fail@plt+0x109a0>
   21da4:	cmp	r6, #256	; 0x100
   21da8:	bne	21e90 <__assert_fail@plt+0x10a5c>
   21dac:	mov	r1, #8
   21db0:	b	21dd8 <__assert_fail@plt+0x109a4>
   21db4:	mov	r1, #3
   21db8:	b	21dd8 <__assert_fail@plt+0x109a4>
   21dbc:	mov	r1, #4
   21dc0:	b	21dd8 <__assert_fail@plt+0x109a4>
   21dc4:	mov	r1, #5
   21dc8:	b	21dd8 <__assert_fail@plt+0x109a4>
   21dcc:	mov	r1, #6
   21dd0:	b	21dd8 <__assert_fail@plt+0x109a4>
   21dd4:	mov	r1, #7
   21dd8:	ldr	r2, [r5, #8]
   21ddc:	add	r0, r8, r4
   21de0:	bl	14eb8 <__assert_fail@plt+0x3a84>
   21de4:	mov	r5, r0
   21de8:	add	r0, r5, r4
   21dec:	cmp	r4, r0
   21df0:	bcs	21e4c <__assert_fail@plt+0x10a18>
   21df4:	tst	r5, #1
   21df8:	mov	r2, r4
   21dfc:	beq	21e10 <__assert_fail@plt+0x109dc>
   21e00:	ldrb	r1, [r8, r4]
   21e04:	add	r2, r4, #1
   21e08:	ldrb	r1, [r9, r1]
   21e0c:	strb	r1, [r8, r4]
   21e10:	cmp	r5, #1
   21e14:	beq	21e4c <__assert_fail@plt+0x10a18>
   21e18:	add	r1, r5, r4
   21e1c:	sub	r1, r1, r2
   21e20:	add	r2, r2, r8
   21e24:	add	r2, r2, #1
   21e28:	ldrb	r3, [r2, #-1]
   21e2c:	ldrb	r7, [r2]
   21e30:	subs	r1, r1, #2
   21e34:	ldrb	r3, [r9, r3]
   21e38:	strb	r3, [r2, #-1]
   21e3c:	ldrb	r3, [r9, r7]
   21e40:	strb	r3, [r2]
   21e44:	add	r2, r2, #2
   21e48:	bne	21e28 <__assert_fail@plt+0x109f4>
   21e4c:	cmp	sl, #0
   21e50:	mov	r1, #0
   21e54:	addne	r2, r0, #1
   21e58:	strb	r1, [r8, r0]
   21e5c:	cmpne	sl, r2
   21e60:	bne	21e70 <__assert_fail@plt+0x10a3c>
   21e64:	mov	r0, r8
   21e68:	sub	sp, fp, #28
   21e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e70:	movw	r0, #45352	; 0xb128
   21e74:	mov	r1, sl
   21e78:	movt	r0, #4
   21e7c:	ldr	r3, [r0]
   21e80:	mov	r0, r8
   21e84:	sub	sp, fp, #28
   21e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e8c:	bx	r3
   21e90:	mvn	r0, #0
   21e94:	mov	r2, r6
   21e98:	str	r4, [sp, #20]
   21e9c:	udiv	r1, r0, r6
   21ea0:	mov	r0, #1
   21ea4:	cmp	r1, r6
   21ea8:	bcc	21ec4 <__assert_fail@plt+0x10a90>
   21eac:	mov	r0, #1
   21eb0:	mov	r2, r6
   21eb4:	mul	r2, r2, r6
   21eb8:	add	r0, r0, #1
   21ebc:	cmp	r2, r1
   21ec0:	bls	21eb4 <__assert_fail@plt+0x10a80>
   21ec4:	str	r2, [sp, #32]
   21ec8:	str	r0, [sp, #28]
   21ecc:	movw	r0, #45348	; 0xb124
   21ed0:	movt	r0, #4
   21ed4:	ldr	r1, [r0]
   21ed8:	lsl	r0, r3, #2
   21edc:	str	r0, [sp, #16]
   21ee0:	str	r3, [sp, #24]
   21ee4:	blx	r1
   21ee8:	ldr	ip, [sp, #24]
   21eec:	mov	lr, r0
   21ef0:	cmp	ip, #1
   21ef4:	blt	2205c <__assert_fail@plt+0x10c28>
   21ef8:	ldr	r0, [r5, #8]
   21efc:	mov	r1, #0
   21f00:	cmp	ip, #4
   21f04:	bcc	21fec <__assert_fail@plt+0x10bb8>
   21f08:	add	r2, r0, ip, lsl #2
   21f0c:	cmp	lr, r2
   21f10:	bcs	21f20 <__assert_fail@plt+0x10aec>
   21f14:	add	r2, lr, ip, lsl #2
   21f18:	cmp	r2, r0
   21f1c:	bhi	21fec <__assert_fail@plt+0x10bb8>
   21f20:	bic	r1, ip, #-2147483645	; 0x80000003
   21f24:	mov	r2, #1
   21f28:	stmib	sp, {r8, sl}
   21f2c:	mov	r4, lr
   21f30:	sub	r5, r1, #4
   21f34:	add	r2, r2, r5, lsr #2
   21f38:	cmp	r5, #12
   21f3c:	and	r3, r2, #3
   21f40:	str	r3, [sp, #12]
   21f44:	mov	r3, #0
   21f48:	bcc	21fb0 <__assert_fail@plt+0x10b7c>
   21f4c:	ldr	r3, [sp, #12]
   21f50:	sub	r5, r2, r3
   21f54:	mov	r2, #0
   21f58:	mov	r3, #0
   21f5c:	add	ip, r0, r2
   21f60:	mov	r7, #48	; 0x30
   21f64:	add	r8, r4, r2
   21f68:	add	r2, r2, #64	; 0x40
   21f6c:	subs	r5, r5, #4
   21f70:	add	r3, r3, #16
   21f74:	mov	lr, ip
   21f78:	mov	sl, r8
   21f7c:	vld1.32	{d16-d17}, [lr], r7
   21f80:	vst1.32	{d16-d17}, [sl], r7
   21f84:	add	r7, ip, #16
   21f88:	vld1.32	{d16-d17}, [r7]
   21f8c:	add	r7, r8, #16
   21f90:	vst1.32	{d16-d17}, [r7]
   21f94:	add	r7, ip, #32
   21f98:	vld1.32	{d16-d17}, [r7]
   21f9c:	add	r7, r8, #32
   21fa0:	vst1.32	{d16-d17}, [r7]
   21fa4:	vld1.32	{d16-d17}, [lr]
   21fa8:	vst1.32	{d16-d17}, [sl]
   21fac:	bne	21f5c <__assert_fail@plt+0x10b28>
   21fb0:	ldr	r7, [sp, #12]
   21fb4:	mov	lr, r4
   21fb8:	cmp	r7, #0
   21fbc:	beq	21fdc <__assert_fail@plt+0x10ba8>
   21fc0:	add	r2, r0, r3, lsl #2
   21fc4:	add	r3, lr, r3, lsl #2
   21fc8:	rsb	r5, r7, #0
   21fcc:	vld1.32	{d16-d17}, [r2]!
   21fd0:	adds	r5, r5, #1
   21fd4:	vst1.32	{d16-d17}, [r3]!
   21fd8:	bcc	21fcc <__assert_fail@plt+0x10b98>
   21fdc:	ldr	ip, [sp, #24]
   21fe0:	ldmib	sp, {r8, sl}
   21fe4:	cmp	ip, r1
   21fe8:	beq	2205c <__assert_fail@plt+0x10c28>
   21fec:	mvn	r2, r1
   21ff0:	ands	r3, ip, #3
   21ff4:	add	r2, ip, r2
   21ff8:	beq	22010 <__assert_fail@plt+0x10bdc>
   21ffc:	ldr	r7, [r0, r1, lsl #2]
   22000:	subs	r3, r3, #1
   22004:	str	r7, [lr, r1, lsl #2]
   22008:	add	r1, r1, #1
   2200c:	bne	21ffc <__assert_fail@plt+0x10bc8>
   22010:	cmp	r2, #3
   22014:	bcc	2205c <__assert_fail@plt+0x10c28>
   22018:	sub	r2, ip, r1
   2201c:	lsl	r1, r1, #2
   22020:	mov	r3, lr
   22024:	add	r7, r0, #16
   22028:	ldr	r5, [r0, r1]!
   2202c:	add	r4, r3, #16
   22030:	subs	r2, r2, #4
   22034:	str	r5, [r3, r1]!
   22038:	ldr	r5, [r0, #4]
   2203c:	str	r5, [r3, #4]
   22040:	ldr	r5, [r0, #8]
   22044:	str	r5, [r3, #8]
   22048:	ldr	r0, [r0, #12]
   2204c:	str	r0, [r3, #12]
   22050:	mov	r0, r7
   22054:	mov	r3, r4
   22058:	bne	22024 <__assert_fail@plt+0x10bf0>
   2205c:	str	ip, [sp]
   22060:	mov	r1, r6
   22064:	add	r2, sp, #28
   22068:	mov	r3, lr
   2206c:	mov	r6, lr
   22070:	ldr	r4, [sp, #20]
   22074:	add	r0, r8, r4
   22078:	bl	14fb8 <__assert_fail@plt+0x3b84>
   2207c:	mov	r5, r0
   22080:	movw	r0, #45356	; 0xb12c
   22084:	ldr	r1, [sp, #16]
   22088:	movt	r0, #4
   2208c:	ldr	r2, [r0]
   22090:	mov	r0, r6
   22094:	blx	r2
   22098:	b	21de8 <__assert_fail@plt+0x109b4>
   2209c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   220a0:	add	fp, sp, #28
   220a4:	sub	sp, sp, #20
   220a8:	mov	r5, r2
   220ac:	cmp	r2, #0
   220b0:	mov	r8, r0
   220b4:	subne	r0, r5, #2
   220b8:	cmpne	r0, #60	; 0x3c
   220bc:	bhi	225f4 <__assert_fail@plt+0x111c0>
   220c0:	sub	r6, r1, #1
   220c4:	bl	11308 <__ctype_b_loc@plt>
   220c8:	mov	r4, r0
   220cc:	ldr	r0, [r0]
   220d0:	ldrb	sl, [r6, #1]!
   220d4:	add	r1, r0, sl, lsl #1
   220d8:	ldrb	r1, [r1, #1]
   220dc:	tst	r1, #32
   220e0:	bne	220d0 <__assert_fail@plt+0x10c9c>
   220e4:	sub	r0, sl, #45	; 0x2d
   220e8:	cmp	r5, #0
   220ec:	clz	r0, r0
   220f0:	lsr	r1, r0, #5
   220f4:	add	r7, r6, r1
   220f8:	beq	221d8 <__assert_fail@plt+0x10da4>
   220fc:	ldrb	r0, [r7]
   22100:	cmp	r0, #0
   22104:	beq	222e8 <__assert_fail@plt+0x10eb4>
   22108:	mov	r0, r7
   2210c:	str	r8, [sp, #8]
   22110:	bl	1132c <strlen@plt>
   22114:	movw	r6, #45348	; 0xb124
   22118:	str	r0, [sp, #4]
   2211c:	movt	r6, #4
   22120:	ldr	r1, [r6]
   22124:	blx	r1
   22128:	ldrb	r2, [r7]
   2212c:	mov	r9, r0
   22130:	cmp	r2, #0
   22134:	beq	222b8 <__assert_fail@plt+0x10e84>
   22138:	cmp	r5, #36	; 0x24
   2213c:	mvn	r0, #86	; 0x56
   22140:	add	r1, r7, #1
   22144:	mov	r8, #0
   22148:	mvngt	r0, #60	; 0x3c
   2214c:	b	22170 <__assert_fail@plt+0x10d3c>
   22150:	sub	r2, r3, #48	; 0x30
   22154:	cmp	r2, r5
   22158:	bcs	222b8 <__assert_fail@plt+0x10e84>
   2215c:	strb	r2, [r9, r8]
   22160:	add	r8, r8, #1
   22164:	ldrb	r2, [r1], #1
   22168:	cmp	r2, #0
   2216c:	beq	2220c <__assert_fail@plt+0x10dd8>
   22170:	ldr	r7, [r4]
   22174:	uxtb	r3, r2
   22178:	add	r7, r7, r3, lsl #1
   2217c:	ldrb	r7, [r7, #1]
   22180:	tst	r7, #32
   22184:	bne	22164 <__assert_fail@plt+0x10d30>
   22188:	sub	r7, r2, #48	; 0x30
   2218c:	uxtb	r7, r7
   22190:	cmp	r7, #9
   22194:	bls	22150 <__assert_fail@plt+0x10d1c>
   22198:	sub	r7, r2, #97	; 0x61
   2219c:	uxtb	r7, r7
   221a0:	cmp	r7, #25
   221a4:	bhi	221b8 <__assert_fail@plt+0x10d84>
   221a8:	add	r2, r0, r3
   221ac:	cmp	r2, r5
   221b0:	bcc	2215c <__assert_fail@plt+0x10d28>
   221b4:	b	222b8 <__assert_fail@plt+0x10e84>
   221b8:	sub	r2, r2, #65	; 0x41
   221bc:	uxtb	r2, r2
   221c0:	cmp	r2, #25
   221c4:	bhi	222b8 <__assert_fail@plt+0x10e84>
   221c8:	sub	r2, r3, #55	; 0x37
   221cc:	cmp	r2, r5
   221d0:	bcc	2215c <__assert_fail@plt+0x10d28>
   221d4:	b	222b8 <__assert_fail@plt+0x10e84>
   221d8:	ldrb	r0, [r6, r1]
   221dc:	cmp	r0, #48	; 0x30
   221e0:	bne	222dc <__assert_fail@plt+0x10ea8>
   221e4:	add	r0, r6, r1
   221e8:	ldrb	r1, [r0, #1]
   221ec:	cmp	r1, #97	; 0x61
   221f0:	bgt	222f4 <__assert_fail@plt+0x10ec0>
   221f4:	cmp	r1, #66	; 0x42
   221f8:	beq	22310 <__assert_fail@plt+0x10edc>
   221fc:	cmp	r1, #88	; 0x58
   22200:	beq	22304 <__assert_fail@plt+0x10ed0>
   22204:	mov	r5, #8
   22208:	b	22108 <__assert_fail@plt+0x10cd4>
   2220c:	cmp	r8, #0
   22210:	beq	222b8 <__assert_fail@plt+0x10e84>
   22214:	cmp	r5, #63	; 0x3f
   22218:	bgt	2231c <__assert_fail@plt+0x10ee8>
   2221c:	sub	r0, r5, #2
   22220:	cmp	r0, #30
   22224:	bhi	224a4 <__assert_fail@plt+0x11070>
   22228:	add	r1, pc, #4
   2222c:	mov	r4, #1
   22230:	ldr	pc, [r1, r0, lsl #2]
   22234:	andeq	r2, r2, r0, ror #6
   22238:	andeq	r2, r2, r4, lsr #9
   2223c:			; <UNDEFINED> instruction: 0x000222b0
   22240:	andeq	r2, r2, r4, lsr #9
   22244:	andeq	r2, r2, r4, lsr #9
   22248:	andeq	r2, r2, r4, lsr #9
   2224c:	andeq	r2, r2, r4, asr #6
   22250:	andeq	r2, r2, r4, lsr #9
   22254:	andeq	r2, r2, r4, lsr #9
   22258:	andeq	r2, r2, r4, lsr #9
   2225c:	andeq	r2, r2, r4, lsr #9
   22260:	andeq	r2, r2, r4, lsr #9
   22264:	andeq	r2, r2, r4, lsr #9
   22268:	andeq	r2, r2, r4, lsr #9
   2226c:	andeq	r2, r2, ip, lsr r3
   22270:	andeq	r2, r2, r4, lsr #9
   22274:	andeq	r2, r2, r4, lsr #9
   22278:	andeq	r2, r2, r4, lsr #9
   2227c:	andeq	r2, r2, r4, lsr #9
   22280:	andeq	r2, r2, r4, lsr #9
   22284:	andeq	r2, r2, r4, lsr #9
   22288:	andeq	r2, r2, r4, lsr #9
   2228c:	andeq	r2, r2, r4, lsr #9
   22290:	andeq	r2, r2, r4, lsr #9
   22294:	andeq	r2, r2, r4, lsr #9
   22298:	andeq	r2, r2, r4, lsr #9
   2229c:	andeq	r2, r2, r4, lsr #9
   222a0:	andeq	r2, r2, r4, lsr #9
   222a4:	andeq	r2, r2, r4, lsr #9
   222a8:	andeq	r2, r2, r4, lsr #9
   222ac:	andeq	r2, r2, ip, asr #6
   222b0:	mov	r4, #2
   222b4:	b	22360 <__assert_fail@plt+0x10f2c>
   222b8:	movw	r0, #45356	; 0xb12c
   222bc:	ldr	r1, [sp, #4]
   222c0:	movt	r0, #4
   222c4:	ldr	r2, [r0]
   222c8:	mov	r0, r9
   222cc:	blx	r2
   222d0:	mvn	r0, #0
   222d4:	mov	r4, #0
   222d8:	b	225e4 <__assert_fail@plt+0x111b0>
   222dc:	mov	r5, #10
   222e0:	cmp	r0, #0
   222e4:	bne	22108 <__assert_fail@plt+0x10cd4>
   222e8:	mvn	r0, #0
   222ec:	mov	r4, #0
   222f0:	b	225e8 <__assert_fail@plt+0x111b4>
   222f4:	cmp	r1, #98	; 0x62
   222f8:	beq	22310 <__assert_fail@plt+0x10edc>
   222fc:	cmp	r1, #120	; 0x78
   22300:	bne	22204 <__assert_fail@plt+0x10dd0>
   22304:	add	r7, r0, #2
   22308:	mov	r5, #16
   2230c:	b	220fc <__assert_fail@plt+0x10cc8>
   22310:	add	r7, r0, #2
   22314:	mov	r5, #2
   22318:	b	220fc <__assert_fail@plt+0x10cc8>
   2231c:	cmp	r5, #64	; 0x40
   22320:	beq	22354 <__assert_fail@plt+0x10f20>
   22324:	cmp	r5, #128	; 0x80
   22328:	beq	2235c <__assert_fail@plt+0x10f28>
   2232c:	cmp	r5, #256	; 0x100
   22330:	bne	224a4 <__assert_fail@plt+0x11070>
   22334:	mov	r4, #8
   22338:	b	22360 <__assert_fail@plt+0x10f2c>
   2233c:	mov	r4, #4
   22340:	b	22360 <__assert_fail@plt+0x10f2c>
   22344:	mov	r4, #3
   22348:	b	22360 <__assert_fail@plt+0x10f2c>
   2234c:	mov	r4, #5
   22350:	b	22360 <__assert_fail@plt+0x10f2c>
   22354:	mov	r4, #6
   22358:	b	22360 <__assert_fail@plt+0x10f2c>
   2235c:	mov	r4, #7
   22360:	ldr	r2, [sp, #8]
   22364:	mul	r0, r4, r8
   22368:	add	r0, r0, #31
   2236c:	ldr	r1, [r2]
   22370:	lsr	ip, r0, #5
   22374:	cmp	r1, r0, lsr #5
   22378:	bge	223b8 <__assert_fail@plt+0x10f84>
   2237c:	cmp	ip, #1
   22380:	mov	r5, ip
   22384:	mov	r7, ip
   22388:	movls	r5, #1
   2238c:	cmp	r1, #0
   22390:	beq	223c0 <__assert_fail@plt+0x10f8c>
   22394:	ldr	r6, [sp, #8]
   22398:	movw	r0, #45352	; 0xb128
   2239c:	lsl	r1, r1, #2
   223a0:	lsl	r2, r5, #2
   223a4:	movt	r0, #4
   223a8:	ldr	r3, [r0]
   223ac:	ldr	r0, [r6, #8]
   223b0:	blx	r3
   223b4:	b	223d0 <__assert_fail@plt+0x10f9c>
   223b8:	ldr	r0, [r2, #8]
   223bc:	b	223fc <__assert_fail@plt+0x10fc8>
   223c0:	ldr	r1, [r6]
   223c4:	lsl	r0, r5, #2
   223c8:	blx	r1
   223cc:	ldr	r6, [sp, #8]
   223d0:	str	r0, [r6, #8]
   223d4:	str	r5, [r6]
   223d8:	mov	ip, r7
   223dc:	ldr	r1, [r6, #4]
   223e0:	cmp	r1, #0
   223e4:	rsbmi	r1, r1, #0
   223e8:	cmp	r1, r5
   223ec:	ble	223fc <__assert_fail@plt+0x10fc8>
   223f0:	ldr	r2, [sp, #8]
   223f4:	mov	r1, #0
   223f8:	str	r1, [r2, #4]
   223fc:	sub	r2, r9, #1
   22400:	mov	r3, #0
   22404:	mov	r5, #0
   22408:	mov	r1, #0
   2240c:	b	2241c <__assert_fail@plt+0x10fe8>
   22410:	cmp	r7, #0
   22414:	mov	r8, r7
   22418:	beq	22450 <__assert_fail@plt+0x1101c>
   2241c:	ldrb	r7, [r2, r8]
   22420:	orr	r5, r5, r7, lsl r3
   22424:	add	r3, r3, r4
   22428:	sub	r7, r8, #1
   2242c:	cmp	r3, #32
   22430:	bcc	22410 <__assert_fail@plt+0x10fdc>
   22434:	str	r5, [r0, r1, lsl #2]
   22438:	sub	r3, r3, #32
   2243c:	add	r1, r1, #1
   22440:	ldrb	r5, [r2, r8]
   22444:	sub	r6, r4, r3
   22448:	lsr	r5, r5, r6
   2244c:	b	22410 <__assert_fail@plt+0x10fdc>
   22450:	cmp	r5, #0
   22454:	beq	22480 <__assert_fail@plt+0x1104c>
   22458:	str	r5, [r0, r1, lsl #2]
   2245c:	add	r4, r1, #1
   22460:	cmp	r4, ip
   22464:	ble	225c0 <__assert_fail@plt+0x1118c>
   22468:	movw	r0, #39579	; 0x9a9b
   2246c:	movw	r1, #37260	; 0x918c
   22470:	movw	r3, #39521	; 0x9a61
   22474:	movw	r2, #4408	; 0x1138
   22478:	movt	r0, #3
   2247c:	b	22608 <__assert_fail@plt+0x111d4>
   22480:	sub	r0, r0, #4
   22484:	mov	r4, r1
   22488:	cmp	r1, #1
   2248c:	blt	225b8 <__assert_fail@plt+0x11184>
   22490:	ldr	r2, [r0, r4, lsl #2]
   22494:	sub	r1, r4, #1
   22498:	cmp	r2, #0
   2249c:	beq	22484 <__assert_fail@plt+0x11050>
   224a0:	b	225b8 <__assert_fail@plt+0x11184>
   224a4:	mvn	r0, #0
   224a8:	mov	r2, r5
   224ac:	udiv	r1, r0, r5
   224b0:	mov	r0, #1
   224b4:	cmp	r1, r5
   224b8:	bcc	224d4 <__assert_fail@plt+0x110a0>
   224bc:	mov	r0, #1
   224c0:	mov	r2, r5
   224c4:	mul	r2, r2, r5
   224c8:	add	r0, r0, #1
   224cc:	cmp	r2, r1
   224d0:	bls	224c4 <__assert_fail@plt+0x11090>
   224d4:	add	r1, r8, r0
   224d8:	str	r2, [sp, #16]
   224dc:	str	r0, [sp, #12]
   224e0:	sub	r1, r1, #1
   224e4:	udiv	r4, r1, r0
   224e8:	ldr	r0, [sp, #8]
   224ec:	ldr	r1, [r0]
   224f0:	cmp	r4, r1
   224f4:	ble	22530 <__assert_fail@plt+0x110fc>
   224f8:	cmp	r4, #1
   224fc:	mov	r7, r4
   22500:	movle	r4, #1
   22504:	cmp	r1, #0
   22508:	beq	2253c <__assert_fail@plt+0x11108>
   2250c:	ldr	r6, [sp, #8]
   22510:	movw	r0, #45352	; 0xb128
   22514:	lsl	r1, r1, #2
   22518:	lsl	r2, r4, #2
   2251c:	movt	r0, #4
   22520:	ldr	r3, [r0]
   22524:	ldr	r0, [r6, #8]
   22528:	blx	r3
   2252c:	b	2254c <__assert_fail@plt+0x11118>
   22530:	ldr	r6, [r0, #8]
   22534:	mov	r7, r4
   22538:	b	2257c <__assert_fail@plt+0x11148>
   2253c:	ldr	r1, [r6]
   22540:	lsl	r0, r4, #2
   22544:	blx	r1
   22548:	ldr	r6, [sp, #8]
   2254c:	str	r0, [r6, #8]
   22550:	str	r4, [r6]
   22554:	mov	r1, r0
   22558:	ldr	r0, [r6, #4]
   2255c:	mov	r6, r1
   22560:	cmp	r0, #0
   22564:	rsbmi	r0, r0, #0
   22568:	cmp	r0, r4
   2256c:	ble	2257c <__assert_fail@plt+0x11148>
   22570:	ldr	r1, [sp, #8]
   22574:	mov	r0, #0
   22578:	str	r0, [r1, #4]
   2257c:	add	r0, sp, #12
   22580:	mov	r1, r9
   22584:	mov	r2, r8
   22588:	mov	r3, r5
   2258c:	str	r0, [sp]
   22590:	mov	r0, r6
   22594:	bl	15488 <__assert_fail@plt+0x4054>
   22598:	cmp	r0, #0
   2259c:	ble	22614 <__assert_fail@plt+0x111e0>
   225a0:	mov	r4, r0
   225a4:	sub	r0, r0, #1
   225a8:	mov	ip, r7
   225ac:	ldr	r1, [r6, r0, lsl #2]
   225b0:	cmp	r1, #0
   225b4:	moveq	r4, r0
   225b8:	cmp	r4, ip
   225bc:	bgt	22468 <__assert_fail@plt+0x11034>
   225c0:	movw	r0, #45356	; 0xb12c
   225c4:	ldr	r1, [sp, #4]
   225c8:	movt	r0, #4
   225cc:	ldr	r2, [r0]
   225d0:	mov	r0, r9
   225d4:	blx	r2
   225d8:	cmp	sl, #45	; 0x2d
   225dc:	mov	r0, #0
   225e0:	rsbeq	r4, r4, #0
   225e4:	ldr	r8, [sp, #8]
   225e8:	str	r4, [r8, #4]
   225ec:	sub	sp, fp, #28
   225f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   225f4:	movw	r0, #39482	; 0x9a3a
   225f8:	movw	r1, #37260	; 0x918c
   225fc:	movw	r3, #39521	; 0x9a61
   22600:	movw	r2, #4320	; 0x10e0
   22604:	movt	r0, #3
   22608:	movt	r1, #3
   2260c:	movt	r3, #3
   22610:	bl	11434 <__assert_fail@plt>
   22614:	movw	r0, #39572	; 0x9a94
   22618:	movw	r1, #37260	; 0x918c
   2261c:	movw	r3, #39521	; 0x9a61
   22620:	movw	r2, #4405	; 0x1135
   22624:	movt	r0, #3
   22628:	b	22608 <__assert_fail@plt+0x111d4>
   2262c:	movw	ip, #37256	; 0x9188
   22630:	mov	r3, #0
   22634:	movt	ip, #3
   22638:	str	r3, [r0]
   2263c:	stmib	r0, {r3, ip}
   22640:	b	2209c <__assert_fail@plt+0x10c68>
   22644:	push	{r4, r5, r6, sl, fp, lr}
   22648:	add	fp, sp, #16
   2264c:	mov	r5, r0
   22650:	mov	r0, #0
   22654:	bl	21c0c <__assert_fail@plt+0x107d8>
   22658:	cmp	r0, #0
   2265c:	beq	226a4 <__assert_fail@plt+0x11270>
   22660:	mov	r4, r0
   22664:	bl	1132c <strlen@plt>
   22668:	mov	r6, r0
   2266c:	mov	r0, r4
   22670:	mov	r1, #1
   22674:	mov	r3, r5
   22678:	mov	r2, r6
   2267c:	bl	11254 <fwrite@plt>
   22680:	mov	r5, r0
   22684:	movw	r0, #45356	; 0xb12c
   22688:	add	r1, r6, #1
   2268c:	movt	r0, #4
   22690:	ldr	r2, [r0]
   22694:	mov	r0, r4
   22698:	blx	r2
   2269c:	mov	r0, r5
   226a0:	pop	{r4, r5, r6, sl, fp, pc}
   226a4:	mov	r0, #0
   226a8:	pop	{r4, r5, r6, sl, fp, pc}
   226ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   226b0:	add	fp, sp, #28
   226b4:	sub	sp, sp, #4
   226b8:	mov	lr, r0
   226bc:	ldr	r0, [fp, #12]
   226c0:	cmp	r0, #0
   226c4:	bne	2288c <__assert_fail@plt+0x11458>
   226c8:	cmn	r2, #1
   226cc:	mov	r8, r3
   226d0:	mov	sl, r1
   226d4:	cmpne	r2, #1
   226d8:	bne	22898 <__assert_fail@plt+0x11464>
   226dc:	ldr	r5, [fp, #8]
   226e0:	add	r0, r5, #1
   226e4:	cmp	r0, #3
   226e8:	bcs	228b0 <__assert_fail@plt+0x1147c>
   226ec:	cmp	r5, #0
   226f0:	ldr	r7, [fp, #16]
   226f4:	ldr	r1, [lr]
   226f8:	mvneq	r5, #0
   226fc:	subs	r9, r5, r2
   22700:	lslne	r9, r8, #1
   22704:	cmp	r2, #1
   22708:	subeq	r0, sl, #1
   2270c:	rsbeq	r9, r9, #0
   22710:	mlaeq	r7, r0, r8, r7
   22714:	cmp	r5, #1
   22718:	add	r0, r8, r7
   2271c:	subeq	r7, r0, #1
   22720:	mul	r0, r8, sl
   22724:	add	r0, r0, #3
   22728:	cmp	r1, r0, lsr #2
   2272c:	lsr	r4, r0, #2
   22730:	str	r4, [sp]
   22734:	bge	2276c <__assert_fail@plt+0x11338>
   22738:	cmp	r4, #1
   2273c:	movls	r4, #1
   22740:	cmp	r1, #0
   22744:	beq	227e4 <__assert_fail@plt+0x113b0>
   22748:	movw	r0, #45352	; 0xb128
   2274c:	lsl	r1, r1, #2
   22750:	lsl	r2, r4, #2
   22754:	mov	r6, lr
   22758:	movt	r0, #4
   2275c:	ldr	r3, [r0]
   22760:	ldr	r0, [lr, #8]
   22764:	blx	r3
   22768:	b	227fc <__assert_fail@plt+0x113c8>
   2276c:	ldr	r0, [lr, #8]
   22770:	cmp	sl, #0
   22774:	beq	22828 <__assert_fail@plt+0x113f4>
   22778:	rsb	r3, r5, #0
   2277c:	mov	ip, #0
   22780:	mov	r4, #0
   22784:	mov	r2, #0
   22788:	cmp	r8, #0
   2278c:	bne	227a4 <__assert_fail@plt+0x11370>
   22790:	add	r7, r7, r9
   22794:	subs	sl, sl, #1
   22798:	beq	22834 <__assert_fail@plt+0x11400>
   2279c:	cmp	r8, #0
   227a0:	beq	22790 <__assert_fail@plt+0x1135c>
   227a4:	mov	r5, r8
   227a8:	b	227b8 <__assert_fail@plt+0x11384>
   227ac:	add	r7, r7, r3
   227b0:	subs	r5, r5, #1
   227b4:	beq	22790 <__assert_fail@plt+0x1135c>
   227b8:	ldrb	r6, [r7]
   227bc:	lsl	r1, r4, #3
   227c0:	add	r4, r4, #1
   227c4:	cmp	r4, #4
   227c8:	orr	r2, r2, r6, lsl r1
   227cc:	bne	227ac <__assert_fail@plt+0x11378>
   227d0:	str	r2, [r0, ip, lsl #2]
   227d4:	add	ip, ip, #1
   227d8:	mov	r2, #0
   227dc:	mov	r4, #0
   227e0:	b	227ac <__assert_fail@plt+0x11378>
   227e4:	movw	r0, #45348	; 0xb124
   227e8:	mov	r6, lr
   227ec:	movt	r0, #4
   227f0:	ldr	r1, [r0]
   227f4:	lsl	r0, r4, #2
   227f8:	blx	r1
   227fc:	str	r0, [r6, #8]
   22800:	str	r4, [r6]
   22804:	mov	lr, r6
   22808:	ldr	r1, [r6, #4]
   2280c:	cmp	r1, #0
   22810:	rsbmi	r1, r1, #0
   22814:	cmp	r1, r4
   22818:	movgt	r1, #0
   2281c:	strgt	r1, [lr, #4]
   22820:	cmp	sl, #0
   22824:	bne	22778 <__assert_fail@plt+0x11344>
   22828:	mov	r2, #0
   2282c:	mov	r4, #0
   22830:	mov	ip, #0
   22834:	cmp	r4, #0
   22838:	ldr	r4, [sp]
   2283c:	add	r3, ip, #1
   22840:	mov	r1, ip
   22844:	movne	r1, r3
   22848:	cmp	r1, r4
   2284c:	bne	228c8 <__assert_fail@plt+0x11494>
   22850:	cmp	r2, #0
   22854:	beq	22860 <__assert_fail@plt+0x1142c>
   22858:	str	r2, [r0, ip, lsl #2]
   2285c:	b	22880 <__assert_fail@plt+0x1144c>
   22860:	sub	r0, r0, #4
   22864:	mov	r3, ip
   22868:	cmp	ip, #1
   2286c:	blt	22880 <__assert_fail@plt+0x1144c>
   22870:	ldr	r1, [r0, r3, lsl #2]
   22874:	sub	ip, r3, #1
   22878:	cmp	r1, #0
   2287c:	beq	22864 <__assert_fail@plt+0x11430>
   22880:	str	r3, [lr, #4]
   22884:	sub	sp, fp, #28
   22888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2288c:	movw	r0, #39591	; 0x9aa7
   22890:	movt	r0, #3
   22894:	bl	1d324 <__assert_fail@plt+0xbef0>
   22898:	movw	r0, #39624	; 0x9ac8
   2289c:	movw	r1, #37260	; 0x918c
   228a0:	movw	r3, #39650	; 0x9ae2
   228a4:	movw	r2, #4468	; 0x1174
   228a8:	movt	r0, #3
   228ac:	b	228dc <__assert_fail@plt+0x114a8>
   228b0:	movw	r0, #39730	; 0x9b32
   228b4:	movw	r1, #37260	; 0x918c
   228b8:	movw	r3, #39650	; 0x9ae2
   228bc:	movw	r2, #4469	; 0x1175
   228c0:	movt	r0, #3
   228c4:	b	228dc <__assert_fail@plt+0x114a8>
   228c8:	movw	r0, #39758	; 0x9b4e
   228cc:	movw	r1, #37260	; 0x918c
   228d0:	movw	r3, #39650	; 0x9ae2
   228d4:	movw	r2, #4507	; 0x119b
   228d8:	movt	r0, #3
   228dc:	movt	r1, #3
   228e0:	movt	r3, #3
   228e4:	bl	11434 <__assert_fail@plt>
   228e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   228ec:	add	fp, sp, #28
   228f0:	sub	sp, sp, #4
   228f4:	mov	lr, r1
   228f8:	ldr	r1, [fp, #12]
   228fc:	cmp	r1, #0
   22900:	bne	22acc <__assert_fail@plt+0x11698>
   22904:	mov	r4, r2
   22908:	cmn	r2, #1
   2290c:	mov	sl, r3
   22910:	cmpne	r4, #1
   22914:	bne	22ad8 <__assert_fail@plt+0x116a4>
   22918:	ldr	r5, [fp, #8]
   2291c:	add	r1, r5, #1
   22920:	cmp	r1, #3
   22924:	bcs	22af0 <__assert_fail@plt+0x116bc>
   22928:	ldr	r9, [fp, #16]
   2292c:	cmp	sl, #0
   22930:	ldr	r8, [r9, #4]
   22934:	beq	229d4 <__assert_fail@plt+0x115a0>
   22938:	cmp	r8, #0
   2293c:	beq	229fc <__assert_fail@plt+0x115c8>
   22940:	ldr	r1, [r9, #8]
   22944:	rsbmi	r8, r8, #0
   22948:	add	r1, r1, r8, lsl #2
   2294c:	ldr	r1, [r1, #-4]
   22950:	cmp	r1, #0
   22954:	beq	22b08 <__assert_fail@plt+0x116d4>
   22958:	add	r2, sl, r8, lsl #2
   2295c:	sub	r6, r2, #5
   22960:	mov	r2, #0
   22964:	lsr	r3, r1, #8
   22968:	cmp	r2, r1, lsr #8
   2296c:	add	r6, r6, #1
   22970:	mov	r1, r3
   22974:	bne	22964 <__assert_fail@plt+0x11530>
   22978:	udiv	r1, r6, sl
   2297c:	cmp	r0, #0
   22980:	str	r1, [sp]
   22984:	bne	229a8 <__assert_fail@plt+0x11574>
   22988:	ldr	r0, [sp]
   2298c:	movw	r1, #45348	; 0xb124
   22990:	mov	r7, lr
   22994:	movt	r1, #4
   22998:	ldr	r1, [r1]
   2299c:	mul	r0, r0, sl
   229a0:	blx	r1
   229a4:	mov	lr, r7
   229a8:	cmp	r5, #0
   229ac:	mvneq	r5, #0
   229b0:	subs	ip, r5, r4
   229b4:	lslne	ip, sl, #1
   229b8:	cmp	r4, #1
   229bc:	bne	22a08 <__assert_fail@plt+0x115d4>
   229c0:	ldr	r1, [sp]
   229c4:	rsb	ip, ip, #0
   229c8:	sub	r1, r1, #1
   229cc:	mla	r2, r1, sl, r0
   229d0:	b	22a0c <__assert_fail@plt+0x115d8>
   229d4:	mov	r1, #0
   229d8:	cmp	r8, #0
   229dc:	str	r1, [sp]
   229e0:	beq	22ab8 <__assert_fail@plt+0x11684>
   229e4:	movw	r0, #39896	; 0x9bd8
   229e8:	movw	r1, #37260	; 0x918c
   229ec:	movw	r3, #39813	; 0x9b85
   229f0:	movw	r2, #4528	; 0x11b0
   229f4:	movt	r0, #3
   229f8:	b	22b4c <__assert_fail@plt+0x11718>
   229fc:	mov	r1, #0
   22a00:	str	r1, [sp]
   22a04:	b	22ab8 <__assert_fail@plt+0x11684>
   22a08:	mov	r2, r0
   22a0c:	cmp	r6, sl
   22a10:	mov	r3, #0
   22a14:	mov	r6, #0
   22a18:	bcc	22aa4 <__assert_fail@plt+0x11670>
   22a1c:	sub	r1, sl, #1
   22a20:	cmp	r5, #1
   22a24:	mov	r6, #0
   22a28:	mov	r4, #0
   22a2c:	mov	r3, #0
   22a30:	addeq	r2, r2, r1
   22a34:	rsb	r1, r5, #0
   22a38:	mov	r5, #0
   22a3c:	cmp	sl, #0
   22a40:	bne	22a60 <__assert_fail@plt+0x1162c>
   22a44:	ldr	r7, [sp]
   22a48:	add	r3, r3, #1
   22a4c:	add	r2, r2, ip
   22a50:	cmp	r3, r7
   22a54:	bcs	22aa4 <__assert_fail@plt+0x11670>
   22a58:	cmp	sl, #0
   22a5c:	beq	22a44 <__assert_fail@plt+0x11610>
   22a60:	mov	r7, sl
   22a64:	cmp	r4, #0
   22a68:	beq	22a88 <__assert_fail@plt+0x11654>
   22a6c:	strb	r5, [r2], r1
   22a70:	subs	r7, r7, #1
   22a74:	sub	r4, r4, #1
   22a78:	lsr	r5, r5, #8
   22a7c:	beq	22a44 <__assert_fail@plt+0x11610>
   22a80:	cmp	r4, #0
   22a84:	bne	22a6c <__assert_fail@plt+0x11638>
   22a88:	mov	r4, #4
   22a8c:	cmp	r6, r8
   22a90:	bge	22a6c <__assert_fail@plt+0x11638>
   22a94:	ldr	r5, [r9, #8]
   22a98:	ldr	r5, [r5, r6, lsl #2]
   22a9c:	add	r6, r6, #1
   22aa0:	b	22a6c <__assert_fail@plt+0x11638>
   22aa4:	cmp	r6, r8
   22aa8:	bne	22b20 <__assert_fail@plt+0x116ec>
   22aac:	ldr	r1, [sp]
   22ab0:	cmp	r3, r1
   22ab4:	bne	22b38 <__assert_fail@plt+0x11704>
   22ab8:	cmp	lr, #0
   22abc:	ldrne	r1, [sp]
   22ac0:	strne	r1, [lr]
   22ac4:	sub	sp, fp, #28
   22ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22acc:	movw	r0, #39780	; 0x9b64
   22ad0:	movt	r0, #3
   22ad4:	bl	1d324 <__assert_fail@plt+0xbef0>
   22ad8:	movw	r0, #39624	; 0x9ac8
   22adc:	movw	r1, #37260	; 0x918c
   22ae0:	movw	r3, #39813	; 0x9b85
   22ae4:	movw	r2, #4526	; 0x11ae
   22ae8:	movt	r0, #3
   22aec:	b	22b4c <__assert_fail@plt+0x11718>
   22af0:	movw	r0, #39730	; 0x9b32
   22af4:	movw	r1, #37260	; 0x918c
   22af8:	movw	r3, #39813	; 0x9b85
   22afc:	movw	r2, #4527	; 0x11af
   22b00:	movt	r0, #3
   22b04:	b	22b4c <__assert_fail@plt+0x11718>
   22b08:	movw	r0, #39925	; 0x9bf5
   22b0c:	movw	r1, #37260	; 0x918c
   22b10:	movw	r3, #39813	; 0x9b85
   22b14:	movw	r2, #4548	; 0x11c4
   22b18:	movt	r0, #3
   22b1c:	b	22b4c <__assert_fail@plt+0x11718>
   22b20:	movw	r0, #39935	; 0x9bff
   22b24:	movw	r1, #37260	; 0x918c
   22b28:	movw	r3, #39813	; 0x9b85
   22b2c:	movw	r2, #4611	; 0x1203
   22b30:	movt	r0, #3
   22b34:	b	22b4c <__assert_fail@plt+0x11718>
   22b38:	movw	r0, #39943	; 0x9c07
   22b3c:	movw	r1, #37260	; 0x918c
   22b40:	movw	r3, #39813	; 0x9b85
   22b44:	movw	r2, #4612	; 0x1204
   22b48:	movt	r0, #3
   22b4c:	movt	r1, #3
   22b50:	movt	r3, #3
   22b54:	bl	11434 <__assert_fail@plt>
   22b58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b5c:	add	fp, sp, #28
   22b60:	sub	sp, sp, #4
   22b64:	cmp	r1, #0
   22b68:	beq	22c28 <__assert_fail@plt+0x117f4>
   22b6c:	mov	lr, r0
   22b70:	mov	r0, #0
   22b74:	ldm	r2, {r4, ip}
   22b78:	ldr	r5, [r2, #12]
   22b7c:	rsb	r8, r4, #32
   22b80:	lsr	r6, r1, r8
   22b84:	lsr	r9, r5, #16
   22b88:	uxth	r5, r5
   22b8c:	lsr	r7, r6, #16
   22b90:	uxth	r6, r6
   22b94:	mul	sl, r6, r9
   22b98:	mul	r6, r6, r5
   22b9c:	mla	sl, r7, r5, sl
   22ba0:	mul	r5, r7, r5
   22ba4:	mul	r7, r7, r9
   22ba8:	add	r3, sl, r6, lsr #16
   22bac:	cmp	r3, r5
   22bb0:	lsr	r5, r3, #16
   22bb4:	pkhbt	r3, r6, r3, lsl #16
   22bb8:	add	r5, r5, r1, lsr r8
   22bbc:	addcc	r7, r7, #65536	; 0x10000
   22bc0:	adds	r3, r3, r1, lsl r4
   22bc4:	add	r5, r5, #1
   22bc8:	adc	r6, r5, r7
   22bcc:	mul	r5, r6, ip
   22bd0:	rsb	r5, r5, r1, lsl r4
   22bd4:	mov	r1, #0
   22bd8:	cmp	r5, r3
   22bdc:	mvnhi	r1, #0
   22be0:	and	r3, ip, r1
   22be4:	add	r7, r3, r5
   22be8:	mvn	r3, #0
   22bec:	subs	r5, r7, ip
   22bf0:	movcc	r5, r7
   22bf4:	tst	r5, r3, lsr r8
   22bf8:	bne	22c34 <__assert_fail@plt+0x11800>
   22bfc:	lsr	r3, r5, r4
   22c00:	cmp	r7, ip
   22c04:	add	r1, r6, r1
   22c08:	strb	r3, [lr, r0]
   22c0c:	mov	r3, #0
   22c10:	movwcs	r3, #1
   22c14:	add	r0, r0, #1
   22c18:	adds	r1, r1, r3
   22c1c:	bne	22b74 <__assert_fail@plt+0x11740>
   22c20:	sub	sp, fp, #28
   22c24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22c28:	mov	r0, #0
   22c2c:	sub	sp, fp, #28
   22c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22c34:	movw	r0, #40209	; 0x9d11
   22c38:	movw	r1, #37260	; 0x918c
   22c3c:	movw	r3, #40268	; 0x9d4c
   22c40:	movw	r2, #1259	; 0x4eb
   22c44:	movt	r0, #3
   22c48:	movt	r1, #3
   22c4c:	movt	r3, #3
   22c50:	bl	11434 <__assert_fail@plt>
   22c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c58:	add	fp, sp, #28
   22c5c:	sub	sp, sp, #60	; 0x3c
   22c60:	ldr	r6, [fp, #12]
   22c64:	cmp	r6, #2
   22c68:	ble	22fd8 <__assert_fail@plt+0x11ba4>
   22c6c:	cmp	r2, r6
   22c70:	blt	22ff0 <__assert_fail@plt+0x11bbc>
   22c74:	ldr	r5, [fp, #8]
   22c78:	sub	r7, r6, #1
   22c7c:	str	r7, [fp, #-40]	; 0xffffffd8
   22c80:	ldr	r4, [r5, r7, lsl #2]
   22c84:	cmp	r4, #0
   22c88:	bpl	23008 <__assert_fail@plt+0x11bd4>
   22c8c:	sub	r7, r6, #2
   22c90:	ldr	lr, [fp, #16]
   22c94:	add	ip, r1, r2, lsl #2
   22c98:	sub	r8, r2, r6
   22c9c:	str	r1, [sp, #28]
   22ca0:	str	r0, [sp, #24]
   22ca4:	str	r4, [fp, #-32]	; 0xffffffe0
   22ca8:	ldr	r5, [r5, r7, lsl #2]
   22cac:	str	r7, [sp, #20]
   22cb0:	rsb	r7, r4, #0
   22cb4:	str	r7, [sp]
   22cb8:	lsr	r2, r5, #16
   22cbc:	str	r5, [fp, #-36]	; 0xffffffdc
   22cc0:	str	r2, [sp, #16]
   22cc4:	uxth	r2, r5
   22cc8:	str	r2, [sp, #12]
   22ccc:	lsr	r2, lr, #16
   22cd0:	str	r2, [sp, #8]
   22cd4:	uxth	r2, lr
   22cd8:	str	r2, [sp, #4]
   22cdc:	b	22d08 <__assert_fail@plt+0x118d4>
   22ce0:	ldr	r0, [sp, #24]
   22ce4:	ldr	r4, [fp, #-32]	; 0xffffffe0
   22ce8:	ldr	r2, [sp, #44]	; 0x2c
   22cec:	cmp	r0, #0
   22cf0:	sub	ip, ip, #4
   22cf4:	strne	r2, [r0, r8, lsl #2]
   22cf8:	sub	r2, r8, #1
   22cfc:	cmp	r8, #0
   22d00:	mov	r8, r2
   22d04:	ble	22fc8 <__assert_fail@plt+0x11b94>
   22d08:	ldr	r2, [fp, #-40]	; 0xffffffd8
   22d0c:	cmp	r3, r4
   22d10:	add	lr, r8, r2
   22d14:	ldreq	r2, [fp, #-36]	; 0xffffffdc
   22d18:	ldr	r9, [r1, lr, lsl #2]
   22d1c:	cmpeq	r9, r2
   22d20:	beq	22e20 <__assert_fail@plt+0x119ec>
   22d24:	ldr	r0, [sp, #8]
   22d28:	uxth	r6, r3
   22d2c:	ldr	r4, [sp, #4]
   22d30:	lsr	r7, r3, #16
   22d34:	ldr	lr, [sp, #12]
   22d38:	mul	r2, r6, r0
   22d3c:	mul	r5, r6, r4
   22d40:	mul	r6, r7, r4
   22d44:	mla	r2, r7, r4, r2
   22d48:	mul	r7, r7, r0
   22d4c:	ldr	r0, [sp, #16]
   22d50:	add	r2, r2, r5, lsr #16
   22d54:	cmp	r2, r6
   22d58:	add	r3, r3, r2, lsr #16
   22d5c:	pkhbt	r2, r5, r2, lsl #16
   22d60:	addcc	r7, r7, #65536	; 0x10000
   22d64:	adds	sl, r2, r9
   22d68:	adc	r2, r3, r7
   22d6c:	add	r3, r3, r7
   22d70:	lsr	r4, r2, #16
   22d74:	sbc	r7, r3, #0
   22d78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   22d7c:	uxth	r5, r2
   22d80:	mul	r6, r4, lr
   22d84:	mul	r4, r4, r0
   22d88:	mul	lr, r5, lr
   22d8c:	mla	r6, r5, r0, r6
   22d90:	mul	r5, r5, r0
   22d94:	sub	r0, r9, r3
   22d98:	mls	r0, r2, r3, r0
   22d9c:	add	r6, r6, lr, lsr #16
   22da0:	cmp	r6, r5
   22da4:	sub	r0, r0, r6, lsr #16
   22da8:	pkhbt	r6, lr, r6, lsl #16
   22dac:	mov	r5, #0
   22db0:	addcc	r4, r4, #65536	; 0x10000
   22db4:	sub	r0, r0, r4
   22db8:	ldr	r4, [sp, #20]
   22dbc:	add	r9, r8, r4
   22dc0:	ldr	r4, [fp, #-36]	; 0xffffffdc
   22dc4:	ldr	r1, [r1, r9, lsl #2]
   22dc8:	str	r9, [sp, #40]	; 0x28
   22dcc:	cmp	r1, r4
   22dd0:	sub	r1, r1, r4
   22dd4:	subcc	r0, r0, #1
   22dd8:	cmp	r1, r6
   22ddc:	sub	r1, r1, r6
   22de0:	subcc	r0, r0, #1
   22de4:	cmp	r0, sl
   22de8:	mvncs	r5, #0
   22dec:	and	lr, r3, r5
   22df0:	and	r5, r4, r5
   22df4:	adds	r5, r5, r1
   22df8:	mov	r1, r3
   22dfc:	adc	r6, lr, r0
   22e00:	cmp	r0, sl
   22e04:	movcc	r7, r2
   22e08:	cmp	r6, r1
   22e0c:	add	r3, r7, #1
   22e10:	bcs	22e94 <__assert_fail@plt+0x11a60>
   22e14:	ldr	r2, [fp, #12]
   22e18:	ldr	r7, [fp, #8]
   22e1c:	b	22eac <__assert_fail@plt+0x11a78>
   22e20:	ldr	r6, [fp, #12]
   22e24:	ldr	r4, [fp, #8]
   22e28:	mov	r2, #0
   22e2c:	ldr	r3, [r4], #4
   22e30:	lsr	r7, r3, #16
   22e34:	lsl	r7, r7, #16
   22e38:	sub	r7, r7, r3, lsr #16
   22e3c:	uxth	r3, r3
   22e40:	rsb	r3, r3, r3, lsl #16
   22e44:	add	r5, r7, r3
   22e48:	add	r5, r5, r3, lsr #16
   22e4c:	pkhbt	r3, r3, r5, lsl #16
   22e50:	cmp	r5, r7
   22e54:	addcc	r7, r7, #65536	; 0x10000
   22e58:	adds	sl, r3, r2
   22e5c:	ldr	r3, [ip, -r6, lsl #2]
   22e60:	adc	r9, r7, r5, lsr #16
   22e64:	sub	r2, r3, sl
   22e68:	str	r2, [ip, -r6, lsl #2]
   22e6c:	add	r2, r7, r5, lsr #16
   22e70:	adc	r2, r2, #1
   22e74:	cmp	r3, sl
   22e78:	movcs	r2, r9
   22e7c:	subs	r6, r6, #1
   22e80:	bne	22e2c <__assert_fail@plt+0x119f8>
   22e84:	ldr	r3, [r1, lr, lsl #2]
   22e88:	ldr	r4, [fp, #-32]	; 0xffffffe0
   22e8c:	mvn	r2, #0
   22e90:	b	22cec <__assert_fail@plt+0x118b8>
   22e94:	ldr	r2, [fp, #12]
   22e98:	ldr	r7, [fp, #8]
   22e9c:	cmp	r5, r4
   22ea0:	bcs	22eb4 <__assert_fail@plt+0x11a80>
   22ea4:	cmp	r6, r1
   22ea8:	bhi	22eb4 <__assert_fail@plt+0x11a80>
   22eac:	str	r5, [sp, #32]
   22eb0:	b	22ed0 <__assert_fail@plt+0x11a9c>
   22eb4:	ldr	r0, [sp]
   22eb8:	cmp	r5, r4
   22ebc:	sub	r5, r5, r4
   22ec0:	add	r3, r3, #1
   22ec4:	str	r5, [sp, #32]
   22ec8:	subcc	r0, r0, #1
   22ecc:	add	r6, r0, r6
   22ed0:	str	r6, [sp, #36]	; 0x24
   22ed4:	uxth	sl, r3
   22ed8:	lsr	r9, r3, #16
   22edc:	mov	r1, #0
   22ee0:	mov	r0, r2
   22ee4:	str	r3, [sp, #44]	; 0x2c
   22ee8:	ldr	r5, [r7], #4
   22eec:	ldr	r2, [ip, -r0, lsl #2]
   22ef0:	uxth	r6, r5
   22ef4:	lsr	r5, r5, #16
   22ef8:	mul	lr, r5, sl
   22efc:	mul	r3, r6, r9
   22f00:	mul	r6, r6, sl
   22f04:	mla	r3, r5, sl, r3
   22f08:	mul	r5, r5, r9
   22f0c:	add	r3, r3, r6, lsr #16
   22f10:	pkhbt	r6, r6, r3, lsl #16
   22f14:	cmp	r3, lr
   22f18:	addcc	r5, r5, #65536	; 0x10000
   22f1c:	adds	r6, r6, r1
   22f20:	sub	r1, r2, r6
   22f24:	adc	r4, r5, r3, lsr #16
   22f28:	str	r1, [ip, -r0, lsl #2]
   22f2c:	add	r1, r5, r3, lsr #16
   22f30:	sub	r0, r0, #1
   22f34:	adc	r1, r1, #1
   22f38:	cmp	r2, r6
   22f3c:	movcs	r1, r4
   22f40:	cmp	r0, #2
   22f44:	bne	22ee8 <__assert_fail@plt+0x11ab4>
   22f48:	ldr	r0, [sp, #32]
   22f4c:	ldr	r2, [sp, #40]	; 0x28
   22f50:	subs	r0, r0, r1
   22f54:	ldr	r1, [sp, #28]
   22f58:	str	r0, [r1, r2, lsl #2]
   22f5c:	ldr	r2, [sp, #36]	; 0x24
   22f60:	mov	r0, #0
   22f64:	movwcc	r0, #1
   22f68:	subs	r3, r2, r0
   22f6c:	bcs	22ce0 <__assert_fail@plt+0x118ac>
   22f70:	ldr	r4, [fp, #8]
   22f74:	ldr	r2, [fp, #12]
   22f78:	ldr	r0, [sp, #24]
   22f7c:	mov	r6, #0
   22f80:	mov	r9, #0
   22f84:	ldr	r7, [ip, -r2, lsl #2]
   22f88:	ldr	lr, [r4], #4
   22f8c:	adds	r5, r7, r6
   22f90:	adds	lr, r5, lr
   22f94:	adc	r5, r9, #0
   22f98:	adds	r6, r7, r6
   22f9c:	str	lr, [ip, -r2, lsl #2]
   22fa0:	sub	r2, r2, #1
   22fa4:	adc	r6, r5, #0
   22fa8:	cmp	r2, #1
   22fac:	bne	22f84 <__assert_fail@plt+0x11b50>
   22fb0:	ldr	r4, [fp, #-32]	; 0xffffffe0
   22fb4:	add	r2, r3, r4
   22fb8:	add	r3, r2, r6
   22fbc:	ldr	r2, [sp, #44]	; 0x2c
   22fc0:	sub	r2, r2, #1
   22fc4:	b	22cec <__assert_fail@plt+0x118b8>
   22fc8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   22fcc:	str	r3, [r1, r0, lsl #2]
   22fd0:	sub	sp, fp, #28
   22fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22fd8:	movw	r0, #41349	; 0xa185
   22fdc:	movw	r1, #37260	; 0x918c
   22fe0:	movw	r3, #41356	; 0xa18c
   22fe4:	movw	r2, #1057	; 0x421
   22fe8:	movt	r0, #3
   22fec:	b	2301c <__assert_fail@plt+0x11be8>
   22ff0:	movw	r0, #40657	; 0x9ed1
   22ff4:	movw	r1, #37260	; 0x918c
   22ff8:	movw	r3, #41356	; 0xa18c
   22ffc:	movw	r2, #1058	; 0x422
   23000:	movt	r0, #3
   23004:	b	2301c <__assert_fail@plt+0x11be8>
   23008:	movw	r0, #41447	; 0xa1e7
   2300c:	movw	r1, #37260	; 0x918c
   23010:	movw	r3, #41356	; 0xa18c
   23014:	movw	r2, #1063	; 0x427
   23018:	movt	r0, #3
   2301c:	movt	r1, #3
   23020:	movt	r3, #3
   23024:	bl	11434 <__assert_fail@plt>
   23028:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2302c:	add	fp, sp, #24
   23030:	sub	sp, sp, #8
   23034:	movw	r6, #45448	; 0xb188
   23038:	mov	r4, #0
   2303c:	cmp	r0, #2
   23040:	movt	r6, #4
   23044:	ldr	r7, [r6]
   23048:	str	r4, [r6]
   2304c:	bne	230c0 <__assert_fail@plt+0x11c8c>
   23050:	mov	r8, r3
   23054:	movw	r3, #42044	; 0xa43c
   23058:	mov	r5, r2
   2305c:	movw	r2, #36912	; 0x9030
   23060:	mov	r0, #2
   23064:	str	r4, [sp]
   23068:	movt	r2, #3
   2306c:	movt	r3, #3
   23070:	bl	112fc <getopt_long@plt>
   23074:	cmp	r0, #104	; 0x68
   23078:	beq	230b4 <__assert_fail@plt+0x11c80>
   2307c:	cmp	r0, #118	; 0x76
   23080:	bne	230c0 <__assert_fail@plt+0x11c8c>
   23084:	movw	r0, #45444	; 0xb184
   23088:	ldr	r3, [fp, #8]
   2308c:	add	r1, fp, #16
   23090:	mov	r2, r8
   23094:	movt	r0, #4
   23098:	str	r1, [sp, #4]
   2309c:	str	r1, [sp]
   230a0:	mov	r1, r5
   230a4:	ldr	r0, [r0]
   230a8:	bl	376d4 <__assert_fail@plt+0x262a0>
   230ac:	mov	r0, #0
   230b0:	bl	11314 <exit@plt>
   230b4:	ldr	r1, [fp, #12]
   230b8:	mov	r0, #0
   230bc:	blx	r1
   230c0:	movw	r0, #45432	; 0xb178
   230c4:	str	r7, [r6]
   230c8:	movt	r0, #4
   230cc:	str	r4, [r0]
   230d0:	sub	sp, fp, #24
   230d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   230d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   230dc:	add	fp, sp, #24
   230e0:	sub	sp, sp, #8
   230e4:	mov	r8, r3
   230e8:	ldr	r3, [fp, #12]
   230ec:	movw	r7, #45448	; 0xb188
   230f0:	movw	r5, #36891	; 0x901b
   230f4:	mov	r9, r2
   230f8:	mov	r2, #1
   230fc:	mov	r6, #0
   23100:	movt	r7, #4
   23104:	movt	r5, #3
   23108:	str	r6, [sp]
   2310c:	ldr	r4, [r7]
   23110:	str	r2, [r7]
   23114:	movw	r2, #36912	; 0x9030
   23118:	cmp	r3, #0
   2311c:	movw	r3, #42044	; 0xa43c
   23120:	movt	r2, #3
   23124:	movt	r3, #3
   23128:	movne	r2, r5
   2312c:	bl	112fc <getopt_long@plt>
   23130:	cmn	r0, #1
   23134:	beq	23160 <__assert_fail@plt+0x11d2c>
   23138:	cmp	r0, #104	; 0x68
   2313c:	beq	23154 <__assert_fail@plt+0x11d20>
   23140:	cmp	r0, #118	; 0x76
   23144:	beq	2316c <__assert_fail@plt+0x11d38>
   23148:	movw	r0, #45344	; 0xb120
   2314c:	movt	r0, #4
   23150:	ldr	r6, [r0]
   23154:	ldr	r1, [fp, #16]
   23158:	mov	r0, r6
   2315c:	blx	r1
   23160:	str	r4, [r7]
   23164:	sub	sp, fp, #24
   23168:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2316c:	movw	r0, #45444	; 0xb184
   23170:	ldr	r3, [fp, #8]
   23174:	add	r1, fp, #20
   23178:	mov	r2, r8
   2317c:	movt	r0, #4
   23180:	str	r1, [sp, #4]
   23184:	str	r1, [sp]
   23188:	mov	r1, r9
   2318c:	ldr	r0, [r0]
   23190:	bl	376d4 <__assert_fail@plt+0x262a0>
   23194:	mov	r0, #0
   23198:	bl	11314 <exit@plt>
   2319c:	push	{r4, r5, r6, sl, fp, lr}
   231a0:	add	fp, sp, #16
   231a4:	sub	sp, sp, #56	; 0x38
   231a8:	mov	r5, r1
   231ac:	mov	r6, r0
   231b0:	and	r4, r1, #240	; 0xf0
   231b4:	bl	1126c <__ctype_get_mb_cur_max@plt>
   231b8:	cmp	r4, #48	; 0x30
   231bc:	cmpcs	r0, #2
   231c0:	bcs	231d8 <__assert_fail@plt+0x11da4>
   231c4:	mov	r0, r6
   231c8:	mov	r1, r5
   231cc:	sub	sp, fp, #16
   231d0:	pop	{r4, r5, r6, sl, fp, lr}
   231d4:	b	11338 <strchr@plt>
   231d8:	mov	r4, #0
   231dc:	mov	r0, sp
   231e0:	str	r4, [sp, #8]
   231e4:	str	r4, [sp, #4]
   231e8:	strb	r4, [sp, #12]
   231ec:	strb	r4, [sp]
   231f0:	str	r6, [sp, #16]
   231f4:	bl	2332c <__assert_fail@plt+0x11ef8>
   231f8:	ldrb	r0, [sp, #24]
   231fc:	cmp	r0, #0
   23200:	beq	23210 <__assert_fail@plt+0x11ddc>
   23204:	ldr	r0, [sp, #28]
   23208:	cmp	r0, #0
   2320c:	beq	2326c <__assert_fail@plt+0x11e38>
   23210:	uxtb	r6, r5
   23214:	mov	r5, sp
   23218:	mov	r4, #0
   2321c:	ldr	r1, [sp, #20]
   23220:	ldr	r0, [sp, #16]
   23224:	cmp	r1, #1
   23228:	bne	23238 <__assert_fail@plt+0x11e04>
   2322c:	ldrb	r2, [r0]
   23230:	cmp	r2, r6
   23234:	beq	23268 <__assert_fail@plt+0x11e34>
   23238:	add	r0, r0, r1
   2323c:	strb	r4, [sp, #12]
   23240:	str	r0, [sp, #16]
   23244:	mov	r0, r5
   23248:	bl	2332c <__assert_fail@plt+0x11ef8>
   2324c:	ldrb	r0, [sp, #24]
   23250:	cmp	r0, #0
   23254:	beq	2321c <__assert_fail@plt+0x11de8>
   23258:	ldr	r0, [sp, #28]
   2325c:	cmp	r0, #0
   23260:	bne	2321c <__assert_fail@plt+0x11de8>
   23264:	b	2326c <__assert_fail@plt+0x11e38>
   23268:	mov	r4, r0
   2326c:	mov	r0, r4
   23270:	sub	sp, fp, #16
   23274:	pop	{r4, r5, r6, sl, fp, pc}
   23278:	push	{r4, r5, r6, sl, fp, lr}
   2327c:	add	fp, sp, #16
   23280:	sub	sp, sp, #56	; 0x38
   23284:	mov	r5, r0
   23288:	bl	1126c <__ctype_get_mb_cur_max@plt>
   2328c:	cmp	r0, #2
   23290:	bcc	2331c <__assert_fail@plt+0x11ee8>
   23294:	mov	r4, #0
   23298:	mov	r0, sp
   2329c:	str	r4, [sp, #8]
   232a0:	str	r4, [sp, #4]
   232a4:	strb	r4, [sp, #12]
   232a8:	strb	r4, [sp]
   232ac:	str	r5, [sp, #16]
   232b0:	bl	2332c <__assert_fail@plt+0x11ef8>
   232b4:	ldrb	r0, [sp, #24]
   232b8:	cmp	r0, #0
   232bc:	beq	232cc <__assert_fail@plt+0x11e98>
   232c0:	ldr	r0, [sp, #28]
   232c4:	cmp	r0, #0
   232c8:	beq	23310 <__assert_fail@plt+0x11edc>
   232cc:	mov	r6, #0
   232d0:	mov	r5, sp
   232d4:	mov	r4, #0
   232d8:	strb	r6, [sp, #12]
   232dc:	ldr	r0, [sp, #16]
   232e0:	ldr	r1, [sp, #20]
   232e4:	add	r0, r0, r1
   232e8:	str	r0, [sp, #16]
   232ec:	mov	r0, r5
   232f0:	bl	2332c <__assert_fail@plt+0x11ef8>
   232f4:	ldrb	r1, [sp, #24]
   232f8:	ldr	r0, [sp, #28]
   232fc:	add	r4, r4, #1
   23300:	cmp	r1, #0
   23304:	beq	232d8 <__assert_fail@plt+0x11ea4>
   23308:	cmp	r0, #0
   2330c:	bne	232d8 <__assert_fail@plt+0x11ea4>
   23310:	mov	r0, r4
   23314:	sub	sp, fp, #16
   23318:	pop	{r4, r5, r6, sl, fp, pc}
   2331c:	mov	r0, r5
   23320:	sub	sp, fp, #16
   23324:	pop	{r4, r5, r6, sl, fp, lr}
   23328:	b	1132c <strlen@plt>
   2332c:	push	{r4, r5, r6, r7, fp, lr}
   23330:	add	fp, sp, #16
   23334:	mov	r4, r0
   23338:	ldrb	r0, [r0, #12]
   2333c:	cmp	r0, #0
   23340:	popne	{r4, r5, r6, r7, fp, pc}
   23344:	ldrb	r0, [r4]
   23348:	ldr	r5, [r4, #16]
   2334c:	cmp	r0, #0
   23350:	beq	233ac <__assert_fail@plt+0x11f78>
   23354:	bl	1126c <__ctype_get_mb_cur_max@plt>
   23358:	mov	r1, r0
   2335c:	mov	r0, r5
   23360:	bl	370e0 <__assert_fail@plt+0x25cac>
   23364:	add	r6, r4, #4
   23368:	add	r7, r4, #28
   2336c:	mov	r2, r0
   23370:	mov	r1, r5
   23374:	mov	r0, r7
   23378:	mov	r3, r6
   2337c:	bl	38444 <__assert_fail@plt+0x27010>
   23380:	cmn	r0, #2
   23384:	str	r0, [r4, #20]
   23388:	beq	23428 <__assert_fail@plt+0x11ff4>
   2338c:	cmp	r0, #0
   23390:	beq	233e4 <__assert_fail@plt+0x11fb0>
   23394:	cmn	r0, #1
   23398:	bne	23408 <__assert_fail@plt+0x11fd4>
   2339c:	mov	r0, #0
   233a0:	strb	r0, [r4, #24]
   233a4:	mov	r0, #1
   233a8:	b	23438 <__assert_fail@plt+0x12004>
   233ac:	ldrb	r0, [r5]
   233b0:	movw	r2, #43848	; 0xab48
   233b4:	movt	r2, #3
   233b8:	ubfx	r1, r0, #5, #3
   233bc:	ldr	r1, [r2, r1, lsl #2]
   233c0:	and	r2, r0, #31
   233c4:	mov	r0, #1
   233c8:	tst	r1, r0, lsl r2
   233cc:	beq	23448 <__assert_fail@plt+0x12014>
   233d0:	str	r0, [r4, #20]
   233d4:	ldrb	r1, [r5]
   233d8:	strb	r0, [r4, #24]
   233dc:	str	r1, [r4, #28]
   233e0:	b	2343c <__assert_fail@plt+0x12008>
   233e4:	mov	r0, #1
   233e8:	str	r0, [r4, #20]
   233ec:	ldr	r0, [r4, #16]
   233f0:	ldrb	r0, [r0]
   233f4:	cmp	r0, #0
   233f8:	bne	23464 <__assert_fail@plt+0x12030>
   233fc:	ldr	r0, [r7]
   23400:	cmp	r0, #0
   23404:	bne	2347c <__assert_fail@plt+0x12048>
   23408:	mov	r0, #1
   2340c:	strb	r0, [r4, #24]
   23410:	mov	r0, r6
   23414:	bl	1120c <mbsinit@plt>
   23418:	cmp	r0, #0
   2341c:	movne	r0, #0
   23420:	strbne	r0, [r4]
   23424:	b	2343c <__assert_fail@plt+0x12008>
   23428:	ldr	r0, [r4, #16]
   2342c:	bl	1132c <strlen@plt>
   23430:	mov	r1, #0
   23434:	strb	r1, [r4, #24]
   23438:	str	r0, [r4, #20]
   2343c:	mov	r0, #1
   23440:	strb	r0, [r4, #12]
   23444:	pop	{r4, r5, r6, r7, fp, pc}
   23448:	add	r0, r4, #4
   2344c:	bl	1120c <mbsinit@plt>
   23450:	cmp	r0, #0
   23454:	beq	23494 <__assert_fail@plt+0x12060>
   23458:	mov	r0, #1
   2345c:	strb	r0, [r4]
   23460:	b	23354 <__assert_fail@plt+0x11f20>
   23464:	movw	r0, #42179	; 0xa4c3
   23468:	movw	r1, #42115	; 0xa483
   2346c:	movw	r3, #42131	; 0xa493
   23470:	mov	r2, #171	; 0xab
   23474:	movt	r0, #3
   23478:	b	234a8 <__assert_fail@plt+0x12074>
   2347c:	movw	r0, #42202	; 0xa4da
   23480:	movw	r1, #42115	; 0xa483
   23484:	movw	r3, #42131	; 0xa493
   23488:	mov	r2, #172	; 0xac
   2348c:	movt	r0, #3
   23490:	b	234a8 <__assert_fail@plt+0x12074>
   23494:	movw	r0, #42092	; 0xa46c
   23498:	movw	r1, #42115	; 0xa483
   2349c:	movw	r3, #42131	; 0xa493
   234a0:	mov	r2, #143	; 0x8f
   234a4:	movt	r0, #3
   234a8:	movt	r1, #3
   234ac:	movt	r3, #3
   234b0:	bl	11434 <__assert_fail@plt>
   234b4:	ldr	r2, [r0, #16]
   234b8:	add	r1, r2, r1
   234bc:	str	r1, [r0, #16]
   234c0:	bx	lr
   234c4:	push	{r4, r5, r6, sl, fp, lr}
   234c8:	add	fp, sp, #16
   234cc:	mov	r5, r1
   234d0:	ldrb	r1, [r1]
   234d4:	mov	r4, r0
   234d8:	strb	r1, [r0], #4
   234dc:	cmp	r1, #0
   234e0:	beq	234f0 <__assert_fail@plt+0x120bc>
   234e4:	ldmib	r5, {r1, r2}
   234e8:	stm	r0, {r1, r2}
   234ec:	b	234fc <__assert_fail@plt+0x120c8>
   234f0:	mov	r1, #0
   234f4:	str	r1, [r0]
   234f8:	str	r1, [r0, #4]
   234fc:	ldrb	r0, [r5, #12]
   23500:	strb	r0, [r4, #12]
   23504:	add	r0, r5, #32
   23508:	ldr	r1, [r5, #16]
   2350c:	cmp	r1, r0
   23510:	beq	2351c <__assert_fail@plt+0x120e8>
   23514:	mov	r6, r1
   23518:	b	2352c <__assert_fail@plt+0x120f8>
   2351c:	ldr	r2, [r5, #20]
   23520:	add	r6, r4, #32
   23524:	mov	r0, r6
   23528:	bl	111e8 <memcpy@plt>
   2352c:	str	r6, [r4, #16]
   23530:	ldr	r0, [r5, #20]
   23534:	str	r0, [r4, #20]
   23538:	ldrb	r0, [r5, #24]
   2353c:	strb	r0, [r4, #24]
   23540:	cmp	r0, #0
   23544:	ldrne	r0, [r5, #28]
   23548:	strne	r0, [r4, #28]
   2354c:	pop	{r4, r5, r6, sl, fp, pc}
   23550:	push	{r4, r5, fp, lr}
   23554:	add	fp, sp, #8
   23558:	cmp	r0, #0
   2355c:	beq	235f0 <__assert_fail@plt+0x121bc>
   23560:	mov	r1, #47	; 0x2f
   23564:	mov	r4, r0
   23568:	bl	113e0 <strrchr@plt>
   2356c:	cmp	r0, #0
   23570:	mov	r5, r4
   23574:	addne	r5, r0, #1
   23578:	sub	r0, r5, r4
   2357c:	cmp	r0, #7
   23580:	blt	235d4 <__assert_fail@plt+0x121a0>
   23584:	movw	r1, #42276	; 0xa524
   23588:	sub	r0, r5, #7
   2358c:	mov	r2, #7
   23590:	movt	r1, #3
   23594:	bl	11410 <strncmp@plt>
   23598:	cmp	r0, #0
   2359c:	bne	235d4 <__assert_fail@plt+0x121a0>
   235a0:	movw	r1, #42284	; 0xa52c
   235a4:	mov	r0, r5
   235a8:	mov	r2, #3
   235ac:	movt	r1, #3
   235b0:	bl	11410 <strncmp@plt>
   235b4:	cmp	r0, #0
   235b8:	beq	235c4 <__assert_fail@plt+0x12190>
   235bc:	mov	r4, r5
   235c0:	b	235d4 <__assert_fail@plt+0x121a0>
   235c4:	movw	r0, #45424	; 0xb170
   235c8:	add	r4, r5, #3
   235cc:	movt	r0, #4
   235d0:	str	r4, [r0]
   235d4:	movw	r0, #45428	; 0xb174
   235d8:	movt	r0, #4
   235dc:	str	r4, [r0]
   235e0:	movw	r0, #45468	; 0xb19c
   235e4:	movt	r0, #4
   235e8:	str	r4, [r0]
   235ec:	pop	{r4, r5, fp, pc}
   235f0:	movw	r0, #45440	; 0xb180
   235f4:	mov	r1, #55	; 0x37
   235f8:	mov	r2, #1
   235fc:	movt	r0, #4
   23600:	ldr	r3, [r0]
   23604:	movw	r0, #42220	; 0xa4ec
   23608:	movt	r0, #3
   2360c:	bl	11254 <fwrite@plt>
   23610:	bl	1141c <abort@plt>
   23614:	push	{r4, r5, r6, sl, fp, lr}
   23618:	add	fp, sp, #16
   2361c:	mov	r4, r0
   23620:	movw	r0, #45472	; 0xb1a0
   23624:	movt	r0, #4
   23628:	cmp	r4, #0
   2362c:	moveq	r4, r0
   23630:	bl	11344 <__errno_location@plt>
   23634:	ldr	r6, [r0]
   23638:	mov	r5, r0
   2363c:	mov	r0, r4
   23640:	mov	r1, #48	; 0x30
   23644:	bl	37e7c <__assert_fail@plt+0x26a48>
   23648:	str	r6, [r5]
   2364c:	pop	{r4, r5, r6, sl, fp, pc}
   23650:	movw	r1, #45472	; 0xb1a0
   23654:	cmp	r0, #0
   23658:	movt	r1, #4
   2365c:	movne	r1, r0
   23660:	ldr	r0, [r1]
   23664:	bx	lr
   23668:	movw	r2, #45472	; 0xb1a0
   2366c:	cmp	r0, #0
   23670:	movt	r2, #4
   23674:	movne	r2, r0
   23678:	str	r1, [r2]
   2367c:	bx	lr
   23680:	movw	r3, #45472	; 0xb1a0
   23684:	cmp	r0, #0
   23688:	and	r2, r2, #1
   2368c:	movt	r3, #4
   23690:	movne	r3, r0
   23694:	ubfx	r0, r1, #5, #3
   23698:	and	r1, r1, #31
   2369c:	add	ip, r3, r0, lsl #2
   236a0:	mov	r0, #1
   236a4:	ldr	r3, [ip, #8]
   236a8:	and	r0, r0, r3, lsr r1
   236ac:	eor	r2, r0, r2
   236b0:	eor	r1, r3, r2, lsl r1
   236b4:	str	r1, [ip, #8]
   236b8:	bx	lr
   236bc:	movw	r2, #45472	; 0xb1a0
   236c0:	cmp	r0, #0
   236c4:	movt	r2, #4
   236c8:	movne	r2, r0
   236cc:	ldr	r0, [r2, #4]
   236d0:	str	r1, [r2, #4]
   236d4:	bx	lr
   236d8:	push	{fp, lr}
   236dc:	mov	fp, sp
   236e0:	movw	r3, #45472	; 0xb1a0
   236e4:	cmp	r0, #0
   236e8:	movt	r3, #4
   236ec:	movne	r3, r0
   236f0:	cmp	r1, #0
   236f4:	mov	r0, #10
   236f8:	cmpne	r2, #0
   236fc:	str	r0, [r3]
   23700:	bne	23708 <__assert_fail@plt+0x122d4>
   23704:	bl	1141c <abort@plt>
   23708:	str	r1, [r3, #40]	; 0x28
   2370c:	str	r2, [r3, #44]	; 0x2c
   23710:	pop	{fp, pc}
   23714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23718:	add	fp, sp, #28
   2371c:	sub	sp, sp, #20
   23720:	mov	r7, r0
   23724:	ldr	r0, [fp, #8]
   23728:	movw	r5, #45472	; 0xb1a0
   2372c:	mov	r8, r3
   23730:	mov	r9, r2
   23734:	mov	sl, r1
   23738:	movt	r5, #4
   2373c:	cmp	r0, #0
   23740:	movne	r5, r0
   23744:	bl	11344 <__errno_location@plt>
   23748:	ldr	r2, [r5, #40]	; 0x28
   2374c:	ldr	r3, [r5, #44]	; 0x2c
   23750:	mov	r4, r0
   23754:	ldm	r5, {r0, r1}
   23758:	add	r5, r5, #8
   2375c:	ldr	r6, [r4]
   23760:	stm	sp, {r0, r1, r5}
   23764:	mov	r0, r7
   23768:	mov	r1, sl
   2376c:	str	r2, [sp, #12]
   23770:	str	r3, [sp, #16]
   23774:	mov	r2, r9
   23778:	mov	r3, r8
   2377c:	bl	2378c <__assert_fail@plt+0x12358>
   23780:	str	r6, [r4]
   23784:	sub	sp, fp, #28
   23788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2378c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23790:	add	fp, sp, #28
   23794:	sub	sp, sp, #156	; 0x9c
   23798:	mov	r5, r0
   2379c:	add	r0, r2, #1
   237a0:	mov	r6, r1
   237a4:	mov	sl, r3
   237a8:	str	r2, [fp, #-80]	; 0xffffffb0
   237ac:	str	r0, [sp, #72]	; 0x48
   237b0:	ldr	r0, [fp, #12]
   237b4:	and	r1, r0, #1
   237b8:	str	r1, [sp, #36]	; 0x24
   237bc:	and	r1, r0, #4
   237c0:	str	r1, [sp, #32]
   237c4:	ubfx	r9, r0, #1, #1
   237c8:	bl	1126c <__ctype_get_mb_cur_max@plt>
   237cc:	str	r0, [sp, #40]	; 0x28
   237d0:	ldr	r0, [fp, #24]
   237d4:	ldr	r7, [fp, #8]
   237d8:	mov	r1, #0
   237dc:	str	r5, [fp, #-84]	; 0xffffffac
   237e0:	str	r1, [fp, #-56]	; 0xffffffc8
   237e4:	mov	r1, #0
   237e8:	str	r1, [sp, #60]	; 0x3c
   237ec:	mov	r1, #1
   237f0:	str	r1, [fp, #-48]	; 0xffffffd0
   237f4:	str	r0, [sp, #80]	; 0x50
   237f8:	ldr	r0, [fp, #20]
   237fc:	str	r0, [sp, #76]	; 0x4c
   23800:	mov	r0, #0
   23804:	str	r0, [sp, #56]	; 0x38
   23808:	mov	r0, #0
   2380c:	str	r0, [fp, #-88]	; 0xffffffa8
   23810:	mov	r0, #0
   23814:	str	r0, [fp, #-72]	; 0xffffffb8
   23818:	mov	r0, #0
   2381c:	cmp	r7, #10
   23820:	bhi	247b4 <__assert_fail@plt+0x13380>
   23824:	add	r1, pc, #24
   23828:	ldr	ip, [fp, #-80]	; 0xffffffb0
   2382c:	mov	r4, r6
   23830:	mov	r8, #0
   23834:	mov	r2, #1
   23838:	mov	r3, #0
   2383c:	mov	lr, sl
   23840:	ldr	pc, [r1, r7, lsl #2]
   23844:	andeq	r3, r2, r8, lsl #18
   23848:	andeq	r3, r2, ip, asr r9
   2384c:	andeq	r3, r2, ip, lsl r9
   23850:	andeq	r3, r2, r0, lsl #18
   23854:	andeq	r3, r2, r0, asr r9
   23858:	andeq	r3, r2, r4, lsl #19
   2385c:	andeq	r3, r2, ip, lsr #18
   23860:	andeq	r3, r2, r8, lsl #20
   23864:	andeq	r3, r2, r0, ror r8
   23868:	andeq	r3, r2, r0, ror r8
   2386c:	muleq	r2, r8, r8
   23870:	movw	r0, #42366	; 0xa57e
   23874:	mov	r1, r7
   23878:	movt	r0, #3
   2387c:	bl	251bc <__assert_fail@plt+0x13d88>
   23880:	str	r0, [sp, #76]	; 0x4c
   23884:	movw	r0, #37132	; 0x910c
   23888:	mov	r1, r7
   2388c:	movt	r0, #3
   23890:	bl	251bc <__assert_fail@plt+0x13d88>
   23894:	str	r0, [sp, #80]	; 0x50
   23898:	mov	r8, #0
   2389c:	tst	r9, #1
   238a0:	bne	238d8 <__assert_fail@plt+0x124a4>
   238a4:	ldr	r0, [sp, #76]	; 0x4c
   238a8:	ldrb	r0, [r0]
   238ac:	cmp	r0, #0
   238b0:	beq	238d8 <__assert_fail@plt+0x124a4>
   238b4:	ldr	r1, [sp, #76]	; 0x4c
   238b8:	mov	r8, #0
   238bc:	add	r1, r1, #1
   238c0:	cmp	r8, r4
   238c4:	strbcc	r0, [r5, r8]
   238c8:	ldrb	r0, [r1, r8]
   238cc:	add	r8, r8, #1
   238d0:	cmp	r0, #0
   238d4:	bne	238c0 <__assert_fail@plt+0x1248c>
   238d8:	ldr	r6, [sp, #80]	; 0x50
   238dc:	mov	r0, r6
   238e0:	bl	1132c <strlen@plt>
   238e4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   238e8:	str	r0, [fp, #-72]	; 0xffffffb8
   238ec:	str	r6, [fp, #-88]	; 0xffffffa8
   238f0:	mov	r2, #1
   238f4:	mov	r3, r9
   238f8:	mov	lr, sl
   238fc:	b	23a08 <__assert_fail@plt+0x125d4>
   23900:	mov	r0, #1
   23904:	b	2395c <__assert_fail@plt+0x12528>
   23908:	mov	r7, #0
   2390c:	mov	r8, #0
   23910:	mov	r2, r0
   23914:	mov	r3, #0
   23918:	b	23a08 <__assert_fail@plt+0x125d4>
   2391c:	tst	r9, #1
   23920:	bne	2395c <__assert_fail@plt+0x12528>
   23924:	mov	r2, r0
   23928:	b	239b4 <__assert_fail@plt+0x12580>
   2392c:	mov	r0, #1
   23930:	mov	r8, #0
   23934:	mov	r7, #5
   23938:	mov	r2, #1
   2393c:	str	r0, [fp, #-72]	; 0xffffffb8
   23940:	movw	r0, #42364	; 0xa57c
   23944:	movt	r0, #3
   23948:	str	r0, [fp, #-88]	; 0xffffffa8
   2394c:	b	2397c <__assert_fail@plt+0x12548>
   23950:	mov	r2, #1
   23954:	tst	r9, #1
   23958:	beq	239b4 <__assert_fail@plt+0x12580>
   2395c:	mov	r1, #1
   23960:	mov	r8, #0
   23964:	mov	r7, #2
   23968:	mov	r2, r0
   2396c:	str	r1, [fp, #-72]	; 0xffffffb8
   23970:	movw	r1, #37132	; 0x910c
   23974:	movt	r1, #3
   23978:	str	r1, [fp, #-88]	; 0xffffffa8
   2397c:	mov	r3, #1
   23980:	b	23a08 <__assert_fail@plt+0x125d4>
   23984:	tst	r9, #1
   23988:	beq	239d8 <__assert_fail@plt+0x125a4>
   2398c:	mov	r0, #1
   23990:	mov	r8, #0
   23994:	mov	r2, #1
   23998:	mov	r3, #1
   2399c:	mov	r7, #5
   239a0:	str	r0, [fp, #-72]	; 0xffffffb8
   239a4:	movw	r0, #42364	; 0xa57c
   239a8:	movt	r0, #3
   239ac:	str	r0, [fp, #-88]	; 0xffffffa8
   239b0:	b	23a08 <__assert_fail@plt+0x125d4>
   239b4:	cmp	r4, #0
   239b8:	mov	r8, #1
   239bc:	mov	r3, #0
   239c0:	mov	r7, #2
   239c4:	movne	r0, #39	; 0x27
   239c8:	strbne	r0, [r5]
   239cc:	movw	r0, #37132	; 0x910c
   239d0:	movt	r0, #3
   239d4:	b	239fc <__assert_fail@plt+0x125c8>
   239d8:	cmp	r4, #0
   239dc:	mov	r8, #1
   239e0:	mov	r2, #1
   239e4:	mov	r7, #5
   239e8:	mov	r3, #0
   239ec:	movne	r0, #34	; 0x22
   239f0:	strbne	r0, [r5]
   239f4:	movw	r0, #42364	; 0xa57c
   239f8:	movt	r0, #3
   239fc:	str	r0, [fp, #-88]	; 0xffffffa8
   23a00:	mov	r0, #1
   23a04:	str	r0, [fp, #-72]	; 0xffffffb8
   23a08:	ldr	r0, [fp, #-72]	; 0xffffffb8
   23a0c:	eor	r6, r3, #1
   23a10:	str	r7, [fp, #-68]	; 0xffffffbc
   23a14:	str	r3, [fp, #-76]	; 0xffffffb4
   23a18:	str	r2, [sp, #84]	; 0x54
   23a1c:	str	r6, [sp, #92]	; 0x5c
   23a20:	cmp	r0, #0
   23a24:	movwne	r0, #1
   23a28:	and	r1, r0, r3
   23a2c:	and	r1, r2, r1
   23a30:	str	r1, [sp, #48]	; 0x30
   23a34:	sub	r1, r7, #2
   23a38:	clz	r1, r1
   23a3c:	lsr	r1, r1, #5
   23a40:	and	r1, r1, r3
   23a44:	str	r1, [sp, #64]	; 0x40
   23a48:	subs	r1, r7, #2
   23a4c:	mov	r7, #0
   23a50:	movwne	r1, #1
   23a54:	orr	r6, r1, r6
   23a58:	and	r1, r1, r2
   23a5c:	and	r0, r0, r1
   23a60:	str	r6, [sp, #68]	; 0x44
   23a64:	str	r0, [fp, #-60]	; 0xffffffc4
   23a68:	orr	r0, r1, r3
   23a6c:	ldr	r1, [fp, #16]
   23a70:	eor	r0, r0, #1
   23a74:	clz	r1, r1
   23a78:	lsr	r1, r1, #5
   23a7c:	orr	r0, r1, r0
   23a80:	str	r0, [fp, #-64]	; 0xffffffc0
   23a84:	eor	r0, r2, #1
   23a88:	str	r0, [sp, #52]	; 0x34
   23a8c:	cmn	lr, #1
   23a90:	beq	23aa0 <__assert_fail@plt+0x1266c>
   23a94:	cmp	r7, lr
   23a98:	bne	23aac <__assert_fail@plt+0x12678>
   23a9c:	b	245f4 <__assert_fail@plt+0x131c0>
   23aa0:	ldrb	r0, [ip, r7]
   23aa4:	cmp	r0, #0
   23aa8:	beq	245fc <__assert_fail@plt+0x131c8>
   23aac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   23ab0:	mov	sl, #0
   23ab4:	cmp	r0, #0
   23ab8:	beq	23af0 <__assert_fail@plt+0x126bc>
   23abc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   23ac0:	add	r5, r7, r0
   23ac4:	cmp	r0, #2
   23ac8:	bcc	23ae4 <__assert_fail@plt+0x126b0>
   23acc:	cmn	lr, #1
   23ad0:	bne	23ae4 <__assert_fail@plt+0x126b0>
   23ad4:	mov	r0, ip
   23ad8:	bl	1132c <strlen@plt>
   23adc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   23ae0:	mov	lr, r0
   23ae4:	cmp	r5, lr
   23ae8:	bls	23af8 <__assert_fail@plt+0x126c4>
   23aec:	ldr	r5, [fp, #-84]	; 0xffffffac
   23af0:	mov	r0, #0
   23af4:	b	23b44 <__assert_fail@plt+0x12710>
   23af8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   23afc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   23b00:	add	r0, ip, r7
   23b04:	mov	r6, r4
   23b08:	mov	r4, lr
   23b0c:	bl	11320 <bcmp@plt>
   23b10:	ldr	r2, [sp, #92]	; 0x5c
   23b14:	cmp	r0, #0
   23b18:	ldr	r5, [fp, #-84]	; 0xffffffac
   23b1c:	mov	r1, r0
   23b20:	movwne	r1, #1
   23b24:	orr	r1, r1, r2
   23b28:	tst	r1, #1
   23b2c:	beq	24684 <__assert_fail@plt+0x13250>
   23b30:	ldr	ip, [fp, #-80]	; 0xffffffb0
   23b34:	clz	r0, r0
   23b38:	mov	lr, r4
   23b3c:	mov	r4, r6
   23b40:	lsr	r0, r0, #5
   23b44:	str	r0, [fp, #-52]	; 0xffffffcc
   23b48:	ldrb	r6, [ip, r7]
   23b4c:	cmp	r6, #126	; 0x7e
   23b50:	bhi	24080 <__assert_fail@plt+0x12c4c>
   23b54:	add	r3, pc, #16
   23b58:	mov	r9, #1
   23b5c:	mov	r2, #110	; 0x6e
   23b60:	mov	r0, #97	; 0x61
   23b64:	mov	r1, #0
   23b68:	ldr	pc, [r3, r6, lsl #2]
   23b6c:	andeq	r3, r2, r0, ror #29
   23b70:	andeq	r4, r2, r0, lsl #1
   23b74:	andeq	r4, r2, r0, lsl #1
   23b78:	andeq	r4, r2, r0, lsl #1
   23b7c:	andeq	r4, r2, r0, lsl #1
   23b80:	andeq	r4, r2, r0, lsl #1
   23b84:	andeq	r4, r2, r0, lsl #1
   23b88:	andeq	r4, r2, ip, asr r1
   23b8c:	andeq	r3, r2, r0, asr #29
   23b90:			; <UNDEFINED> instruction: 0x00023eb8
   23b94:	andeq	r3, r2, ip, asr #29
   23b98:	andeq	r3, r2, r8, ror #31
   23b9c:			; <UNDEFINED> instruction: 0x00023eb0
   23ba0:	andeq	r3, r2, r8, asr #29
   23ba4:	andeq	r4, r2, r0, lsl #1
   23ba8:	andeq	r4, r2, r0, lsl #1
   23bac:	andeq	r4, r2, r0, lsl #1
   23bb0:	andeq	r4, r2, r0, lsl #1
   23bb4:	andeq	r4, r2, r0, lsl #1
   23bb8:	andeq	r4, r2, r0, lsl #1
   23bbc:	andeq	r4, r2, r0, lsl #1
   23bc0:	andeq	r4, r2, r0, lsl #1
   23bc4:	andeq	r4, r2, r0, lsl #1
   23bc8:	andeq	r4, r2, r0, lsl #1
   23bcc:	andeq	r4, r2, r0, lsl #1
   23bd0:	andeq	r4, r2, r0, lsl #1
   23bd4:	andeq	r4, r2, r0, lsl #1
   23bd8:	andeq	r4, r2, r0, lsl #1
   23bdc:	andeq	r4, r2, r0, lsl #1
   23be0:	andeq	r4, r2, r0, lsl #1
   23be4:	andeq	r4, r2, r0, lsl #1
   23be8:	andeq	r4, r2, r0, lsl #1
   23bec:	andeq	r3, r2, r4, ror #28
   23bf0:	andeq	r3, r2, r8, ror #28
   23bf4:	andeq	r3, r2, r8, ror #28
   23bf8:	andeq	r3, r2, r0, asr lr
   23bfc:	andeq	r3, r2, r8, ror #28
   23c00:	andeq	r3, r2, r8, ror #26
   23c04:	andeq	r3, r2, r8, ror #28
   23c08:	strdeq	r3, [r2], -r0
   23c0c:	andeq	r3, r2, r8, ror #28
   23c10:	andeq	r3, r2, r8, ror #28
   23c14:	andeq	r3, r2, r8, ror #28
   23c18:	andeq	r3, r2, r8, ror #26
   23c1c:	andeq	r3, r2, r8, ror #26
   23c20:	andeq	r3, r2, r8, ror #26
   23c24:	andeq	r3, r2, r8, ror #26
   23c28:	andeq	r3, r2, r8, ror #26
   23c2c:	andeq	r3, r2, r8, ror #26
   23c30:	andeq	r3, r2, r8, ror #26
   23c34:	andeq	r3, r2, r8, ror #26
   23c38:	andeq	r3, r2, r8, ror #26
   23c3c:	andeq	r3, r2, r8, ror #26
   23c40:	andeq	r3, r2, r8, ror #26
   23c44:	andeq	r3, r2, r8, ror #26
   23c48:	andeq	r3, r2, r8, ror #26
   23c4c:	andeq	r3, r2, r8, ror #26
   23c50:	andeq	r3, r2, r8, ror #26
   23c54:	andeq	r3, r2, r8, ror #26
   23c58:	andeq	r3, r2, r8, ror #28
   23c5c:	andeq	r3, r2, r8, ror #28
   23c60:	andeq	r3, r2, r8, ror #28
   23c64:	andeq	r3, r2, r8, ror #28
   23c68:			; <UNDEFINED> instruction: 0x00023fb8
   23c6c:	andeq	r4, r2, r0, lsl #1
   23c70:	andeq	r3, r2, r8, ror #26
   23c74:	andeq	r3, r2, r8, ror #26
   23c78:	andeq	r3, r2, r8, ror #26
   23c7c:	andeq	r3, r2, r8, ror #26
   23c80:	andeq	r3, r2, r8, ror #26
   23c84:	andeq	r3, r2, r8, ror #26
   23c88:	andeq	r3, r2, r8, ror #26
   23c8c:	andeq	r3, r2, r8, ror #26
   23c90:	andeq	r3, r2, r8, ror #26
   23c94:	andeq	r3, r2, r8, ror #26
   23c98:	andeq	r3, r2, r8, ror #26
   23c9c:	andeq	r3, r2, r8, ror #26
   23ca0:	andeq	r3, r2, r8, ror #26
   23ca4:	andeq	r3, r2, r8, ror #26
   23ca8:	andeq	r3, r2, r8, ror #26
   23cac:	andeq	r3, r2, r8, ror #26
   23cb0:	andeq	r3, r2, r8, ror #26
   23cb4:	andeq	r3, r2, r8, ror #26
   23cb8:	andeq	r3, r2, r8, ror #26
   23cbc:	andeq	r3, r2, r8, ror #26
   23cc0:	andeq	r3, r2, r8, ror #26
   23cc4:	andeq	r3, r2, r8, ror #26
   23cc8:	andeq	r3, r2, r8, ror #26
   23ccc:	andeq	r3, r2, r8, ror #26
   23cd0:	andeq	r3, r2, r8, ror #26
   23cd4:	andeq	r3, r2, r8, ror #26
   23cd8:	andeq	r3, r2, r8, ror #28
   23cdc:	muleq	r2, r0, lr
   23ce0:	andeq	r3, r2, r8, ror #26
   23ce4:	andeq	r3, r2, r8, ror #28
   23ce8:	andeq	r3, r2, r8, ror #26
   23cec:	andeq	r3, r2, r8, ror #28
   23cf0:	andeq	r3, r2, r8, ror #26
   23cf4:	andeq	r3, r2, r8, ror #26
   23cf8:	andeq	r3, r2, r8, ror #26
   23cfc:	andeq	r3, r2, r8, ror #26
   23d00:	andeq	r3, r2, r8, ror #26
   23d04:	andeq	r3, r2, r8, ror #26
   23d08:	andeq	r3, r2, r8, ror #26
   23d0c:	andeq	r3, r2, r8, ror #26
   23d10:	andeq	r3, r2, r8, ror #26
   23d14:	andeq	r3, r2, r8, ror #26
   23d18:	andeq	r3, r2, r8, ror #26
   23d1c:	andeq	r3, r2, r8, ror #26
   23d20:	andeq	r3, r2, r8, ror #26
   23d24:	andeq	r3, r2, r8, ror #26
   23d28:	andeq	r3, r2, r8, ror #26
   23d2c:	andeq	r3, r2, r8, ror #26
   23d30:	andeq	r3, r2, r8, ror #26
   23d34:	andeq	r3, r2, r8, ror #26
   23d38:	andeq	r3, r2, r8, ror #26
   23d3c:	andeq	r3, r2, r8, ror #26
   23d40:	andeq	r3, r2, r8, ror #26
   23d44:	andeq	r3, r2, r8, ror #26
   23d48:	andeq	r3, r2, r8, ror #26
   23d4c:	andeq	r3, r2, r8, ror #26
   23d50:	andeq	r3, r2, r8, ror #26
   23d54:	andeq	r3, r2, r8, ror #26
   23d58:	andeq	r3, r2, r4, lsr #28
   23d5c:	andeq	r3, r2, r8, ror #28
   23d60:	andeq	r3, r2, r4, lsr #28
   23d64:	andeq	r3, r2, r0, asr lr
   23d68:	ldr	r0, [fp, #-64]	; 0xffffffc0
   23d6c:	tst	r0, #1
   23d70:	bne	23d9c <__assert_fail@plt+0x12968>
   23d74:	ldr	r1, [fp, #16]
   23d78:	ubfx	r0, r6, #5, #3
   23d7c:	mov	r2, #1
   23d80:	ldr	r0, [r1, r0, lsl #2]
   23d84:	and	r1, r6, #31
   23d88:	tst	r0, r2, lsl r1
   23d8c:	beq	23d9c <__assert_fail@plt+0x12968>
   23d90:	mov	r0, r6
   23d94:	mov	r1, r9
   23d98:	b	23db0 <__assert_fail@plt+0x1297c>
   23d9c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   23da0:	mov	r1, r9
   23da4:	cmp	r0, #0
   23da8:	mov	r0, r6
   23dac:	beq	240f0 <__assert_fail@plt+0x12cbc>
   23db0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   23db4:	tst	r2, #1
   23db8:	bne	246c0 <__assert_fail@plt+0x1328c>
   23dbc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   23dc0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   23dc4:	subs	r2, r2, #2
   23dc8:	movwne	r2, #1
   23dcc:	orr	r2, r2, r3
   23dd0:	tst	r2, #1
   23dd4:	bne	23e10 <__assert_fail@plt+0x129dc>
   23dd8:	cmp	r8, r4
   23ddc:	movcc	r2, #39	; 0x27
   23de0:	strbcc	r2, [r5, r8]
   23de4:	add	r2, r8, #1
   23de8:	cmp	r2, r4
   23dec:	movcc	r3, #36	; 0x24
   23df0:	strbcc	r3, [r5, r2]
   23df4:	add	r2, r8, #2
   23df8:	add	r8, r8, #3
   23dfc:	cmp	r2, r4
   23e00:	movcc	r3, #39	; 0x27
   23e04:	strbcc	r3, [r5, r2]
   23e08:	mov	r2, #1
   23e0c:	str	r2, [fp, #-56]	; 0xffffffc8
   23e10:	cmp	r8, r4
   23e14:	movcc	r2, #92	; 0x5c
   23e18:	strbcc	r2, [r5, r8]
   23e1c:	add	r8, r8, #1
   23e20:	b	24134 <__assert_fail@plt+0x12d00>
   23e24:	cmp	lr, #1
   23e28:	beq	23e50 <__assert_fail@plt+0x12a1c>
   23e2c:	mov	r9, #0
   23e30:	cmn	lr, #1
   23e34:	bne	23e5c <__assert_fail@plt+0x12a28>
   23e38:	ldrb	r0, [ip, #1]
   23e3c:	cmp	r0, #0
   23e40:	beq	23e50 <__assert_fail@plt+0x12a1c>
   23e44:	mvn	lr, #0
   23e48:	mov	sl, #0
   23e4c:	b	23d68 <__assert_fail@plt+0x12934>
   23e50:	mov	r9, #0
   23e54:	cmp	r7, #0
   23e58:	beq	23e64 <__assert_fail@plt+0x12a30>
   23e5c:	mov	sl, #0
   23e60:	b	23d68 <__assert_fail@plt+0x12934>
   23e64:	mov	r1, #1
   23e68:	ldr	r0, [fp, #-68]	; 0xffffffbc
   23e6c:	cmp	r0, #2
   23e70:	bne	23e88 <__assert_fail@plt+0x12a54>
   23e74:	ldr	r0, [fp, #-76]	; 0xffffffb4
   23e78:	mov	r9, r1
   23e7c:	tst	r0, #1
   23e80:	beq	23d68 <__assert_fail@plt+0x12934>
   23e84:	b	246c0 <__assert_fail@plt+0x1328c>
   23e88:	mov	r9, r1
   23e8c:	b	23d68 <__assert_fail@plt+0x12934>
   23e90:	ldr	r0, [fp, #-68]	; 0xffffffbc
   23e94:	cmp	r0, #2
   23e98:	bne	240d4 <__assert_fail@plt+0x12ca0>
   23e9c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   23ea0:	tst	r0, #1
   23ea4:	bne	246c0 <__assert_fail@plt+0x1328c>
   23ea8:	mov	sl, #0
   23eac:	b	240e8 <__assert_fail@plt+0x12cb4>
   23eb0:	mov	r0, #102	; 0x66
   23eb4:	b	2415c <__assert_fail@plt+0x12d28>
   23eb8:	mov	r2, #116	; 0x74
   23ebc:	b	23ecc <__assert_fail@plt+0x12a98>
   23ec0:	mov	r0, #98	; 0x62
   23ec4:	b	2415c <__assert_fail@plt+0x12d28>
   23ec8:	mov	r2, #114	; 0x72
   23ecc:	ldr	r0, [sp, #68]	; 0x44
   23ed0:	tst	r0, #1
   23ed4:	mov	r0, r2
   23ed8:	bne	2415c <__assert_fail@plt+0x12d28>
   23edc:	b	246c0 <__assert_fail@plt+0x1328c>
   23ee0:	ldr	r0, [sp, #84]	; 0x54
   23ee4:	tst	r0, #1
   23ee8:	beq	24178 <__assert_fail@plt+0x12d44>
   23eec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   23ef0:	tst	r0, #1
   23ef4:	bne	247ac <__assert_fail@plt+0x13378>
   23ef8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   23efc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   23f00:	subs	r0, r0, #2
   23f04:	movwne	r0, #1
   23f08:	orr	r0, r0, r1
   23f0c:	tst	r0, #1
   23f10:	bne	23f4c <__assert_fail@plt+0x12b18>
   23f14:	cmp	r8, r4
   23f18:	movcc	r0, #39	; 0x27
   23f1c:	strbcc	r0, [r5, r8]
   23f20:	add	r0, r8, #1
   23f24:	cmp	r0, r4
   23f28:	movcc	r1, #36	; 0x24
   23f2c:	strbcc	r1, [r5, r0]
   23f30:	add	r0, r8, #2
   23f34:	add	r8, r8, #3
   23f38:	cmp	r0, r4
   23f3c:	movcc	r1, #39	; 0x27
   23f40:	strbcc	r1, [r5, r0]
   23f44:	mov	r0, #1
   23f48:	str	r0, [fp, #-56]	; 0xffffffc8
   23f4c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   23f50:	cmp	r8, r4
   23f54:	mov	r9, #0
   23f58:	mov	sl, #1
   23f5c:	mov	r6, #48	; 0x30
   23f60:	movcc	r0, #92	; 0x5c
   23f64:	strbcc	r0, [r5, r8]
   23f68:	add	r0, r8, #1
   23f6c:	cmp	r1, #2
   23f70:	beq	24340 <__assert_fail@plt+0x12f0c>
   23f74:	add	r1, r7, #1
   23f78:	cmp	r1, lr
   23f7c:	bcs	24340 <__assert_fail@plt+0x12f0c>
   23f80:	ldrb	r1, [ip, r1]
   23f84:	sub	r1, r1, #48	; 0x30
   23f88:	uxtb	r1, r1
   23f8c:	cmp	r1, #9
   23f90:	bhi	24340 <__assert_fail@plt+0x12f0c>
   23f94:	cmp	r0, r4
   23f98:	movcc	r1, #48	; 0x30
   23f9c:	strbcc	r1, [r5, r0]
   23fa0:	add	r0, r8, #2
   23fa4:	add	r8, r8, #3
   23fa8:	cmp	r0, r4
   23fac:	movcc	r1, #48	; 0x30
   23fb0:	strbcc	r1, [r5, r0]
   23fb4:	b	23d68 <__assert_fail@plt+0x12934>
   23fb8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   23fbc:	mov	sl, #0
   23fc0:	mov	r6, #63	; 0x3f
   23fc4:	cmp	r0, #5
   23fc8:	beq	24348 <__assert_fail@plt+0x12f14>
   23fcc:	cmp	r0, #2
   23fd0:	bne	243f0 <__assert_fail@plt+0x12fbc>
   23fd4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   23fd8:	mov	r9, #0
   23fdc:	tst	r0, #1
   23fe0:	beq	23d68 <__assert_fail@plt+0x12934>
   23fe4:	b	246c0 <__assert_fail@plt+0x1328c>
   23fe8:	mov	r0, #118	; 0x76
   23fec:	b	2415c <__assert_fail@plt+0x12d28>
   23ff0:	mov	r0, #1
   23ff4:	mov	r6, #39	; 0x27
   23ff8:	str	r0, [sp, #60]	; 0x3c
   23ffc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   24000:	cmp	r0, #2
   24004:	bne	24194 <__assert_fail@plt+0x12d60>
   24008:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2400c:	tst	r0, #1
   24010:	bne	246c0 <__assert_fail@plt+0x1328c>
   24014:	ldr	r2, [sp, #56]	; 0x38
   24018:	clz	r1, r4
   2401c:	mov	sl, #0
   24020:	mov	r9, #1
   24024:	lsr	r1, r1, #5
   24028:	cmp	r2, #0
   2402c:	mov	r0, r2
   24030:	movwne	r0, #1
   24034:	orrs	r0, r0, r1
   24038:	moveq	r2, r4
   2403c:	moveq	r4, r0
   24040:	cmp	r8, r4
   24044:	str	r2, [sp, #56]	; 0x38
   24048:	movcc	r0, #39	; 0x27
   2404c:	strbcc	r0, [r5, r8]
   24050:	add	r0, r8, #1
   24054:	cmp	r0, r4
   24058:	movcc	r1, #92	; 0x5c
   2405c:	strbcc	r1, [r5, r0]
   24060:	add	r0, r8, #2
   24064:	add	r8, r8, #3
   24068:	cmp	r0, r4
   2406c:	movcc	r1, #39	; 0x27
   24070:	strbcc	r1, [r5, r0]
   24074:	mov	r0, #0
   24078:	str	r0, [fp, #-56]	; 0xffffffc8
   2407c:	b	23d68 <__assert_fail@plt+0x12934>
   24080:	ldr	r0, [sp, #40]	; 0x28
   24084:	str	r4, [sp, #88]	; 0x58
   24088:	cmp	r0, #1
   2408c:	bne	2419c <__assert_fail@plt+0x12d68>
   24090:	str	lr, [sp, #28]
   24094:	bl	11308 <__ctype_b_loc@plt>
   24098:	ldr	r0, [r0]
   2409c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   240a0:	mov	r2, #1
   240a4:	add	r0, r0, r6, lsl #1
   240a8:	ldrb	r0, [r0, #1]
   240ac:	ubfx	r9, r0, #6, #1
   240b0:	ldr	r0, [sp, #52]	; 0x34
   240b4:	cmp	r2, #1
   240b8:	orr	r0, r9, r0
   240bc:	bhi	243f8 <__assert_fail@plt+0x12fc4>
   240c0:	tst	r0, #1
   240c4:	beq	243f8 <__assert_fail@plt+0x12fc4>
   240c8:	ldr	lr, [sp, #28]
   240cc:	ldr	r4, [sp, #88]	; 0x58
   240d0:	b	23d68 <__assert_fail@plt+0x12934>
   240d4:	ldr	r1, [sp, #48]	; 0x30
   240d8:	mov	sl, #0
   240dc:	mov	r0, #92	; 0x5c
   240e0:	cmp	r1, #0
   240e4:	beq	2415c <__assert_fail@plt+0x12d28>
   240e8:	mov	r6, #92	; 0x5c
   240ec:	mov	r9, #0
   240f0:	cmp	sl, #0
   240f4:	bne	2412c <__assert_fail@plt+0x12cf8>
   240f8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   240fc:	tst	r0, #1
   24100:	beq	2412c <__assert_fail@plt+0x12cf8>
   24104:	cmp	r8, r4
   24108:	movcc	r0, #39	; 0x27
   2410c:	strbcc	r0, [r5, r8]
   24110:	add	r0, r8, #1
   24114:	add	r8, r8, #2
   24118:	cmp	r0, r4
   2411c:	movcc	r1, #39	; 0x27
   24120:	strbcc	r1, [r5, r0]
   24124:	mov	r0, #0
   24128:	str	r0, [fp, #-56]	; 0xffffffc8
   2412c:	mov	r1, r9
   24130:	mov	r0, r6
   24134:	cmp	r8, r4
   24138:	strbcc	r0, [r5, r8]
   2413c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24140:	add	r8, r8, #1
   24144:	and	r0, r0, r1
   24148:	str	r0, [fp, #-48]	; 0xffffffd0
   2414c:	add	r7, r7, #1
   24150:	cmn	lr, #1
   24154:	bne	23a94 <__assert_fail@plt+0x12660>
   24158:	b	23aa0 <__assert_fail@plt+0x1266c>
   2415c:	ldr	r1, [sp, #84]	; 0x54
   24160:	mov	sl, #0
   24164:	mov	r9, #0
   24168:	tst	r1, #1
   2416c:	mov	r1, #0
   24170:	beq	23d68 <__assert_fail@plt+0x12934>
   24174:	b	23db0 <__assert_fail@plt+0x1297c>
   24178:	ldr	r0, [sp, #36]	; 0x24
   2417c:	mov	r6, #0
   24180:	mov	sl, #0
   24184:	mov	r9, #0
   24188:	cmp	r0, #0
   2418c:	beq	23d68 <__assert_fail@plt+0x12934>
   24190:	b	2414c <__assert_fail@plt+0x12d18>
   24194:	mov	r9, #1
   24198:	b	23d68 <__assert_fail@plt+0x12934>
   2419c:	mov	r0, #0
   241a0:	cmn	lr, #1
   241a4:	sub	r4, fp, #40	; 0x28
   241a8:	str	r0, [fp, #-36]	; 0xffffffdc
   241ac:	str	r0, [fp, #-40]	; 0xffffffd8
   241b0:	bne	241c4 <__assert_fail@plt+0x12d90>
   241b4:	mov	r0, ip
   241b8:	bl	1132c <strlen@plt>
   241bc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   241c0:	mov	lr, r0
   241c4:	ldr	r0, [sp, #72]	; 0x48
   241c8:	mov	r9, #1
   241cc:	mov	r2, #0
   241d0:	str	lr, [sp, #28]
   241d4:	add	r0, r0, r7
   241d8:	str	r0, [sp, #20]
   241dc:	b	24220 <__assert_fail@plt+0x12dec>
   241e0:	ldr	r5, [sp, #44]	; 0x2c
   241e4:	add	r5, r0, r5
   241e8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   241ec:	bl	11248 <iswprint@plt>
   241f0:	cmp	r0, #0
   241f4:	sub	r4, fp, #40	; 0x28
   241f8:	movwne	r0, #1
   241fc:	and	r9, r9, r0
   24200:	mov	r0, r4
   24204:	bl	1120c <mbsinit@plt>
   24208:	mov	r2, r5
   2420c:	ldr	lr, [sp, #28]
   24210:	ldr	r5, [fp, #-84]	; 0xffffffac
   24214:	ldr	ip, [fp, #-80]	; 0xffffffb0
   24218:	cmp	r0, #0
   2421c:	bne	240b0 <__assert_fail@plt+0x12c7c>
   24220:	add	r0, r2, r7
   24224:	str	r2, [sp, #44]	; 0x2c
   24228:	mov	r3, r4
   2422c:	add	r1, ip, r0
   24230:	str	r0, [sp, #24]
   24234:	sub	r2, lr, r0
   24238:	sub	r0, fp, #44	; 0x2c
   2423c:	bl	38444 <__assert_fail@plt+0x27010>
   24240:	cmp	r0, #0
   24244:	beq	245e8 <__assert_fail@plt+0x131b4>
   24248:	cmn	r0, #1
   2424c:	beq	245a4 <__assert_fail@plt+0x13170>
   24250:	ldr	lr, [sp, #28]
   24254:	cmn	r0, #2
   24258:	beq	245ac <__assert_fail@plt+0x13178>
   2425c:	ldr	r2, [sp, #64]	; 0x40
   24260:	ldr	r4, [sp, #88]	; 0x58
   24264:	ldr	ip, [sp, #84]	; 0x54
   24268:	cmp	r0, #2
   2426c:	mov	r1, #0
   24270:	movwcc	r1, #1
   24274:	eor	r2, r2, #1
   24278:	orrs	r1, r2, r1
   2427c:	bne	241e0 <__assert_fail@plt+0x12dac>
   24280:	ldr	r1, [sp, #44]	; 0x2c
   24284:	ldr	r2, [sp, #20]
   24288:	add	r1, r2, r1
   2428c:	sub	r2, r0, #1
   24290:	b	242a0 <__assert_fail@plt+0x12e6c>
   24294:	add	r1, r1, #1
   24298:	subs	r2, r2, #1
   2429c:	beq	241e0 <__assert_fail@plt+0x12dac>
   242a0:	ldrb	r3, [r1]
   242a4:	sub	r3, r3, #91	; 0x5b
   242a8:	cmp	r3, #33	; 0x21
   242ac:	bhi	24294 <__assert_fail@plt+0x12e60>
   242b0:	add	r5, pc, #0
   242b4:	ldr	pc, [r5, r3, lsl #2]
   242b8:	muleq	r2, ip, r6
   242bc:	muleq	r2, ip, r6
   242c0:	muleq	r2, r4, r2
   242c4:	muleq	r2, ip, r6
   242c8:	muleq	r2, r4, r2
   242cc:	muleq	r2, ip, r6
   242d0:	muleq	r2, r4, r2
   242d4:	muleq	r2, r4, r2
   242d8:	muleq	r2, r4, r2
   242dc:	muleq	r2, r4, r2
   242e0:	muleq	r2, r4, r2
   242e4:	muleq	r2, r4, r2
   242e8:	muleq	r2, r4, r2
   242ec:	muleq	r2, r4, r2
   242f0:	muleq	r2, r4, r2
   242f4:	muleq	r2, r4, r2
   242f8:	muleq	r2, r4, r2
   242fc:	muleq	r2, r4, r2
   24300:	muleq	r2, r4, r2
   24304:	muleq	r2, r4, r2
   24308:	muleq	r2, r4, r2
   2430c:	muleq	r2, r4, r2
   24310:	muleq	r2, r4, r2
   24314:	muleq	r2, r4, r2
   24318:	muleq	r2, r4, r2
   2431c:	muleq	r2, r4, r2
   24320:	muleq	r2, r4, r2
   24324:	muleq	r2, r4, r2
   24328:	muleq	r2, r4, r2
   2432c:	muleq	r2, r4, r2
   24330:	muleq	r2, r4, r2
   24334:	muleq	r2, r4, r2
   24338:	muleq	r2, r4, r2
   2433c:	muleq	r2, ip, r6
   24340:	mov	r8, r0
   24344:	b	23d68 <__assert_fail@plt+0x12934>
   24348:	ldr	r0, [sp, #32]
   2434c:	cmp	r0, #0
   24350:	beq	243f0 <__assert_fail@plt+0x12fbc>
   24354:	add	r0, r7, #2
   24358:	cmp	r0, lr
   2435c:	bcs	243f0 <__assert_fail@plt+0x12fbc>
   24360:	add	r1, r7, ip
   24364:	ldrb	r1, [r1, #1]
   24368:	cmp	r1, #63	; 0x3f
   2436c:	bne	243f0 <__assert_fail@plt+0x12fbc>
   24370:	ldrb	r9, [ip, r0]
   24374:	sub	r2, r9, #33	; 0x21
   24378:	cmp	r2, #29
   2437c:	bhi	243f0 <__assert_fail@plt+0x12fbc>
   24380:	movw	r1, #20929	; 0x51c1
   24384:	mov	r3, #1
   24388:	movt	r1, #14336	; 0x3800
   2438c:	tst	r1, r3, lsl r2
   24390:	beq	243f0 <__assert_fail@plt+0x12fbc>
   24394:	ldr	r1, [fp, #-76]	; 0xffffffb4
   24398:	tst	r1, #1
   2439c:	bne	246c0 <__assert_fail@plt+0x1328c>
   243a0:	cmp	r8, r4
   243a4:	add	r2, r8, #1
   243a8:	mov	r6, r9
   243ac:	mov	r7, r0
   243b0:	mov	r9, #0
   243b4:	movcc	r1, #63	; 0x3f
   243b8:	strbcc	r1, [r5, r8]
   243bc:	cmp	r2, r4
   243c0:	movcc	r1, #34	; 0x22
   243c4:	strbcc	r1, [r5, r2]
   243c8:	add	r2, r8, #2
   243cc:	cmp	r2, r4
   243d0:	movcc	r1, #34	; 0x22
   243d4:	strbcc	r1, [r5, r2]
   243d8:	add	r2, r8, #3
   243dc:	add	r8, r8, #4
   243e0:	cmp	r2, r4
   243e4:	movcc	r1, #63	; 0x3f
   243e8:	strbcc	r1, [r5, r2]
   243ec:	b	23d68 <__assert_fail@plt+0x12934>
   243f0:	mov	r9, #0
   243f4:	b	23d68 <__assert_fail@plt+0x12934>
   243f8:	ldr	lr, [sp, #28]
   243fc:	ldr	r4, [fp, #-56]	; 0xffffffc8
   24400:	add	r1, r2, r7
   24404:	mov	r2, #0
   24408:	str	r1, [sp, #44]	; 0x2c
   2440c:	tst	r0, #1
   24410:	bne	2452c <__assert_fail@plt+0x130f8>
   24414:	ldr	r1, [fp, #-76]	; 0xffffffb4
   24418:	tst	r1, #1
   2441c:	bne	246bc <__assert_fail@plt+0x13288>
   24420:	ldr	r1, [fp, #-68]	; 0xffffffbc
   24424:	subs	r2, r1, #2
   24428:	movwne	r2, #1
   2442c:	orr	r2, r2, r4
   24430:	tst	r2, #1
   24434:	bne	24478 <__assert_fail@plt+0x13044>
   24438:	ldr	r1, [sp, #88]	; 0x58
   2443c:	add	r2, r8, #1
   24440:	mov	r4, #1
   24444:	cmp	r8, r1
   24448:	movcc	r1, #39	; 0x27
   2444c:	strbcc	r1, [r5, r8]
   24450:	ldr	r1, [sp, #88]	; 0x58
   24454:	cmp	r2, r1
   24458:	movcc	r1, #36	; 0x24
   2445c:	strbcc	r1, [r5, r2]
   24460:	ldr	r1, [sp, #88]	; 0x58
   24464:	add	r2, r8, #2
   24468:	add	r8, r8, #3
   2446c:	cmp	r2, r1
   24470:	movcc	r1, #39	; 0x27
   24474:	strbcc	r1, [r5, r2]
   24478:	ldr	r1, [sp, #88]	; 0x58
   2447c:	add	r2, r8, #1
   24480:	cmp	r8, r1
   24484:	movcc	r1, #92	; 0x5c
   24488:	strbcc	r1, [r5, r8]
   2448c:	ldr	r1, [sp, #88]	; 0x58
   24490:	cmp	r2, r1
   24494:	bcs	244a8 <__assert_fail@plt+0x13074>
   24498:	uxtb	r3, r6
   2449c:	mov	r1, #48	; 0x30
   244a0:	orr	r3, r1, r3, lsr #6
   244a4:	strb	r3, [r5, r2]
   244a8:	ldr	r1, [sp, #88]	; 0x58
   244ac:	add	r2, r8, #2
   244b0:	add	r8, r8, #3
   244b4:	cmp	r2, r1
   244b8:	lsrcc	r3, r6, #3
   244bc:	movcc	r1, #6
   244c0:	bficc	r3, r1, #3, #29
   244c4:	mov	r1, #6
   244c8:	bfi	r6, r1, #3, #29
   244cc:	strbcc	r3, [r5, r2]
   244d0:	mov	r2, #1
   244d4:	b	24554 <__assert_fail@plt+0x13120>
   244d8:	ldr	r1, [sp, #88]	; 0x58
   244dc:	ldr	r5, [fp, #-84]	; 0xffffffac
   244e0:	ldr	r4, [sp, #88]	; 0x58
   244e4:	cmp	r8, r1
   244e8:	movcc	r1, #39	; 0x27
   244ec:	strbcc	r1, [r5, r8]
   244f0:	add	r1, r8, #1
   244f4:	add	r8, r8, #2
   244f8:	cmp	r1, r4
   244fc:	movcc	r4, #39	; 0x27
   24500:	strbcc	r4, [r5, r1]
   24504:	mov	r4, #0
   24508:	ldr	r1, [sp, #88]	; 0x58
   2450c:	cmp	r8, r1
   24510:	ldr	r1, [sp, #72]	; 0x48
   24514:	strbcc	r6, [r5, r8]
   24518:	add	r8, r8, #1
   2451c:	ldrb	r6, [r1, r7]
   24520:	mov	r7, r3
   24524:	tst	r0, #1
   24528:	beq	24414 <__assert_fail@plt+0x12fe0>
   2452c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   24530:	tst	r1, #1
   24534:	beq	2454c <__assert_fail@plt+0x13118>
   24538:	ldr	r1, [sp, #88]	; 0x58
   2453c:	cmp	r8, r1
   24540:	movcc	r1, #92	; 0x5c
   24544:	strbcc	r1, [r5, r8]
   24548:	add	r8, r8, #1
   2454c:	mov	r1, #0
   24550:	str	r1, [fp, #-52]	; 0xffffffcc
   24554:	ldr	r1, [sp, #44]	; 0x2c
   24558:	add	r3, r7, #1
   2455c:	and	sl, r2, #1
   24560:	cmp	r1, r3
   24564:	bls	24588 <__assert_fail@plt+0x13154>
   24568:	cmp	sl, #0
   2456c:	mvn	r5, r4
   24570:	movwne	sl, #1
   24574:	orr	r5, r5, sl
   24578:	tst	r5, #1
   2457c:	beq	244d8 <__assert_fail@plt+0x130a4>
   24580:	ldr	r5, [fp, #-84]	; 0xffffffac
   24584:	b	24508 <__assert_fail@plt+0x130d4>
   24588:	str	r4, [fp, #-56]	; 0xffffffc8
   2458c:	ldr	r4, [sp, #88]	; 0x58
   24590:	cmp	sl, #0
   24594:	movwne	sl, #1
   24598:	cmp	sl, #0
   2459c:	beq	240f8 <__assert_fail@plt+0x12cc4>
   245a0:	b	2412c <__assert_fail@plt+0x12cf8>
   245a4:	mov	r9, #0
   245a8:	b	245e8 <__assert_fail@plt+0x131b4>
   245ac:	ldr	r0, [sp, #24]
   245b0:	mov	r9, #0
   245b4:	cmp	lr, r0
   245b8:	bls	245e8 <__assert_fail@plt+0x131b4>
   245bc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   245c0:	ldr	r2, [sp, #44]	; 0x2c
   245c4:	add	r0, ip, r7
   245c8:	ldrb	r1, [r0, r2]
   245cc:	cmp	r1, #0
   245d0:	beq	240b0 <__assert_fail@plt+0x12c7c>
   245d4:	add	r2, r2, #1
   245d8:	add	r1, r7, r2
   245dc:	cmp	r1, lr
   245e0:	bcc	245c8 <__assert_fail@plt+0x13194>
   245e4:	b	240b0 <__assert_fail@plt+0x12c7c>
   245e8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   245ec:	ldr	r2, [sp, #44]	; 0x2c
   245f0:	b	240b0 <__assert_fail@plt+0x12c7c>
   245f4:	mov	lr, r7
   245f8:	b	24600 <__assert_fail@plt+0x131cc>
   245fc:	mvn	lr, #0
   24600:	ldr	r1, [fp, #-68]	; 0xffffffbc
   24604:	ldr	r2, [fp, #-76]	; 0xffffffb4
   24608:	eor	r0, r1, #2
   2460c:	orr	r0, r0, r8
   24610:	clz	r0, r0
   24614:	lsr	r0, r0, #5
   24618:	tst	r2, r0
   2461c:	bne	246c0 <__assert_fail@plt+0x1328c>
   24620:	subs	r0, r1, #2
   24624:	movwne	r0, #1
   24628:	orr	r0, r2, r0
   2462c:	tst	r0, #1
   24630:	ldreq	r0, [sp, #60]	; 0x3c
   24634:	eoreq	r0, r0, #1
   24638:	tsteq	r0, #1
   2463c:	bne	24754 <__assert_fail@plt+0x13320>
   24640:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24644:	mov	sl, lr
   24648:	tst	r0, #1
   2464c:	bne	24720 <__assert_fail@plt+0x132ec>
   24650:	ldr	r6, [sp, #56]	; 0x38
   24654:	mov	r9, #0
   24658:	cmp	r6, #0
   2465c:	beq	2474c <__assert_fail@plt+0x13318>
   24660:	ldr	r0, [sp, #84]	; 0x54
   24664:	mov	r1, #0
   24668:	mov	r7, #2
   2466c:	cmp	r4, #0
   24670:	str	r1, [fp, #-48]	; 0xffffffd0
   24674:	mov	r1, #0
   24678:	str	r1, [fp, #-76]	; 0xffffffb4
   2467c:	beq	2381c <__assert_fail@plt+0x123e8>
   24680:	b	24754 <__assert_fail@plt+0x13320>
   24684:	ldr	ip, [fp, #-80]	; 0xffffffb0
   24688:	ldr	r1, [fp, #12]
   2468c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   24690:	mov	lr, r4
   24694:	mov	r4, r6
   24698:	b	246e0 <__assert_fail@plt+0x132ac>
   2469c:	tst	ip, #1
   246a0:	ldr	r5, [fp, #-84]	; 0xffffffac
   246a4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   246a8:	ldr	r1, [fp, #12]
   246ac:	mov	r0, #2
   246b0:	movwne	r0, #4
   246b4:	mov	r2, r0
   246b8:	b	246e0 <__assert_fail@plt+0x132ac>
   246bc:	ldr	r4, [sp, #88]	; 0x58
   246c0:	ldr	r1, [sp, #84]	; 0x54
   246c4:	mov	r0, #2
   246c8:	tst	r1, #1
   246cc:	movwne	r0, #4
   246d0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   246d4:	ldr	r1, [fp, #12]
   246d8:	cmp	r2, #2
   246dc:	moveq	r2, r0
   246e0:	mov	r0, #0
   246e4:	bic	r1, r1, #2
   246e8:	str	r2, [sp]
   246ec:	mov	r2, ip
   246f0:	mov	r3, lr
   246f4:	str	r0, [sp, #8]
   246f8:	ldr	r0, [sp, #76]	; 0x4c
   246fc:	str	r1, [sp, #4]
   24700:	mov	r1, r4
   24704:	str	r0, [sp, #12]
   24708:	ldr	r0, [sp, #80]	; 0x50
   2470c:	str	r0, [sp, #16]
   24710:	mov	r0, r5
   24714:	bl	2378c <__assert_fail@plt+0x12358>
   24718:	mov	r8, r0
   2471c:	b	247a0 <__assert_fail@plt+0x1336c>
   24720:	mov	r0, #5
   24724:	ldr	r1, [sp, #56]	; 0x38
   24728:	ldr	r2, [fp, #-80]	; 0xffffffb0
   2472c:	mov	r3, sl
   24730:	str	r0, [sp]
   24734:	ldr	r0, [fp, #12]
   24738:	str	r0, [sp, #4]
   2473c:	ldr	r0, [fp, #16]
   24740:	str	r0, [sp, #8]
   24744:	ldr	r0, [sp, #76]	; 0x4c
   24748:	b	24704 <__assert_fail@plt+0x132d0>
   2474c:	mov	r0, #0
   24750:	str	r0, [fp, #-76]	; 0xffffffb4
   24754:	ldr	r1, [fp, #-88]	; 0xffffffa8
   24758:	cmp	r1, #0
   2475c:	beq	24794 <__assert_fail@plt+0x13360>
   24760:	ldr	r0, [fp, #-76]	; 0xffffffb4
   24764:	tst	r0, #1
   24768:	bne	24794 <__assert_fail@plt+0x13360>
   2476c:	ldrb	r0, [r1]
   24770:	cmp	r0, #0
   24774:	beq	24794 <__assert_fail@plt+0x13360>
   24778:	add	r1, r1, #1
   2477c:	cmp	r8, r4
   24780:	strbcc	r0, [r5, r8]
   24784:	add	r8, r8, #1
   24788:	ldrb	r0, [r1], #1
   2478c:	cmp	r0, #0
   24790:	bne	2477c <__assert_fail@plt+0x13348>
   24794:	cmp	r8, r4
   24798:	movcc	r0, #0
   2479c:	strbcc	r0, [r5, r8]
   247a0:	mov	r0, r8
   247a4:	sub	sp, fp, #28
   247a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   247ac:	mov	r0, #4
   247b0:	b	246d0 <__assert_fail@plt+0x1329c>
   247b4:	bl	1141c <abort@plt>
   247b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   247bc:	add	fp, sp, #28
   247c0:	sub	sp, sp, #28
   247c4:	movw	r5, #45472	; 0xb1a0
   247c8:	cmp	r2, #0
   247cc:	mov	r4, r1
   247d0:	mov	r7, r0
   247d4:	str	r0, [sp, #20]
   247d8:	movt	r5, #4
   247dc:	movne	r5, r2
   247e0:	bl	11344 <__errno_location@plt>
   247e4:	mov	sl, r0
   247e8:	ldr	r2, [r5, #40]	; 0x28
   247ec:	ldr	r3, [r5, #44]	; 0x2c
   247f0:	ldm	r5, {r0, r1}
   247f4:	orr	r8, r1, #1
   247f8:	add	r9, r5, #8
   247fc:	mov	r1, #0
   24800:	ldr	r6, [sl]
   24804:	stm	sp, {r0, r8, r9}
   24808:	mov	r0, #0
   2480c:	str	r2, [sp, #12]
   24810:	str	r3, [sp, #16]
   24814:	mov	r2, r7
   24818:	mov	r3, r4
   2481c:	str	r6, [sp, #24]
   24820:	mov	r6, r4
   24824:	bl	2378c <__assert_fail@plt+0x12358>
   24828:	add	r7, r0, #1
   2482c:	mov	r0, r7
   24830:	bl	37a4c <__assert_fail@plt+0x26618>
   24834:	mov	r4, r0
   24838:	ldr	r0, [r5]
   2483c:	ldr	r2, [r5, #44]	; 0x2c
   24840:	ldr	r1, [r5, #40]	; 0x28
   24844:	mov	r3, r6
   24848:	stm	sp, {r0, r8, r9}
   2484c:	str	r2, [sp, #16]
   24850:	ldr	r2, [sp, #20]
   24854:	str	r1, [sp, #12]
   24858:	mov	r0, r4
   2485c:	mov	r1, r7
   24860:	bl	2378c <__assert_fail@plt+0x12358>
   24864:	ldr	r0, [sp, #24]
   24868:	str	r0, [sl]
   2486c:	mov	r0, r4
   24870:	sub	sp, fp, #28
   24874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2487c:	add	fp, sp, #28
   24880:	sub	sp, sp, #36	; 0x24
   24884:	movw	r8, #45472	; 0xb1a0
   24888:	cmp	r3, #0
   2488c:	mov	r4, r2
   24890:	str	r2, [sp, #24]
   24894:	mov	r5, r1
   24898:	mov	r6, r0
   2489c:	str	r0, [sp, #20]
   248a0:	movt	r8, #4
   248a4:	movne	r8, r3
   248a8:	bl	11344 <__errno_location@plt>
   248ac:	str	r0, [sp, #28]
   248b0:	ldr	r1, [r8, #40]	; 0x28
   248b4:	ldr	r2, [r8, #44]	; 0x2c
   248b8:	ldr	r7, [r0]
   248bc:	cmp	r4, #0
   248c0:	add	sl, r8, #8
   248c4:	mov	r0, #0
   248c8:	ldm	r8, {r3, r9}
   248cc:	orreq	r9, r9, #1
   248d0:	stm	sp, {r3, r9, sl}
   248d4:	str	r1, [sp, #12]
   248d8:	str	r2, [sp, #16]
   248dc:	mov	r1, #0
   248e0:	mov	r2, r6
   248e4:	mov	r3, r5
   248e8:	str	r7, [sp, #32]
   248ec:	mov	r7, r5
   248f0:	bl	2378c <__assert_fail@plt+0x12358>
   248f4:	add	r4, r0, #1
   248f8:	mov	r5, r0
   248fc:	mov	r0, r4
   24900:	bl	37a4c <__assert_fail@plt+0x26618>
   24904:	mov	r6, r0
   24908:	ldr	r0, [r8]
   2490c:	ldr	r2, [r8, #44]	; 0x2c
   24910:	ldr	r1, [r8, #40]	; 0x28
   24914:	mov	r3, r7
   24918:	stm	sp, {r0, r9, sl}
   2491c:	str	r2, [sp, #16]
   24920:	ldr	r2, [sp, #20]
   24924:	str	r1, [sp, #12]
   24928:	mov	r0, r6
   2492c:	mov	r1, r4
   24930:	bl	2378c <__assert_fail@plt+0x12358>
   24934:	ldr	r0, [sp, #24]
   24938:	ldr	r1, [sp, #32]
   2493c:	ldr	r2, [sp, #28]
   24940:	cmp	r0, #0
   24944:	str	r1, [r2]
   24948:	strne	r5, [r0]
   2494c:	mov	r0, r6
   24950:	sub	sp, fp, #28
   24954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24958:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2495c:	add	fp, sp, #24
   24960:	movw	r5, #45364	; 0xb134
   24964:	movw	r8, #45360	; 0xb130
   24968:	movt	r5, #4
   2496c:	movt	r8, #4
   24970:	ldr	r0, [r5]
   24974:	ldr	r4, [r8]
   24978:	cmp	r0, #2
   2497c:	blt	249a8 <__assert_fail@plt+0x13574>
   24980:	add	r7, r4, #12
   24984:	mov	r6, #0
   24988:	ldr	r0, [r7, r6, lsl #3]
   2498c:	bl	138e8 <__assert_fail@plt+0x24b4>
   24990:	ldr	r1, [r5]
   24994:	add	r2, r6, #2
   24998:	add	r0, r6, #1
   2499c:	mov	r6, r0
   249a0:	cmp	r2, r1
   249a4:	blt	24988 <__assert_fail@plt+0x13554>
   249a8:	ldr	r0, [r4, #4]
   249ac:	movw	r9, #45520	; 0xb1d0
   249b0:	movw	r7, #45368	; 0xb138
   249b4:	movt	r9, #4
   249b8:	movt	r7, #4
   249bc:	cmp	r0, r9
   249c0:	beq	249d0 <__assert_fail@plt+0x1359c>
   249c4:	bl	138e8 <__assert_fail@plt+0x24b4>
   249c8:	mov	r0, #256	; 0x100
   249cc:	stm	r7, {r0, r9}
   249d0:	cmp	r4, r7
   249d4:	beq	249e4 <__assert_fail@plt+0x135b0>
   249d8:	mov	r0, r4
   249dc:	bl	138e8 <__assert_fail@plt+0x24b4>
   249e0:	str	r7, [r8]
   249e4:	mov	r0, #1
   249e8:	str	r0, [r5]
   249ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   249f0:	movw	r3, #45472	; 0xb1a0
   249f4:	mvn	r2, #0
   249f8:	movt	r3, #4
   249fc:	b	24a00 <__assert_fail@plt+0x135cc>
   24a00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a04:	add	fp, sp, #28
   24a08:	sub	sp, sp, #44	; 0x2c
   24a0c:	mov	r7, r3
   24a10:	str	r2, [sp, #36]	; 0x24
   24a14:	str	r1, [sp, #32]
   24a18:	mov	r5, r0
   24a1c:	bl	11344 <__errno_location@plt>
   24a20:	cmp	r5, #0
   24a24:	bmi	24b94 <__assert_fail@plt+0x13760>
   24a28:	cmn	r5, #-2147483647	; 0x80000001
   24a2c:	beq	24b94 <__assert_fail@plt+0x13760>
   24a30:	movw	r8, #45364	; 0xb134
   24a34:	movw	r4, #45360	; 0xb130
   24a38:	str	r0, [sp, #28]
   24a3c:	ldr	r0, [r0]
   24a40:	movt	r8, #4
   24a44:	movt	r4, #4
   24a48:	ldr	r1, [r8]
   24a4c:	ldr	r6, [r4]
   24a50:	str	r0, [sp, #24]
   24a54:	cmp	r1, r5
   24a58:	ble	24a64 <__assert_fail@plt+0x13630>
   24a5c:	mov	sl, r6
   24a60:	b	24ad0 <__assert_fail@plt+0x1369c>
   24a64:	movw	r9, #45368	; 0xb138
   24a68:	mov	r0, #8
   24a6c:	str	r1, [fp, #-32]	; 0xffffffe0
   24a70:	sub	r1, r5, r1
   24a74:	mvn	r3, #-2147483648	; 0x80000000
   24a78:	movt	r9, #4
   24a7c:	str	r0, [sp]
   24a80:	add	r2, r1, #1
   24a84:	sub	r1, fp, #32
   24a88:	subs	r0, r6, r9
   24a8c:	movne	r0, r6
   24a90:	bl	37c4c <__assert_fail@plt+0x26818>
   24a94:	mov	sl, r0
   24a98:	cmp	r6, r9
   24a9c:	str	r0, [r4]
   24aa0:	bne	24aac <__assert_fail@plt+0x13678>
   24aa4:	ldrd	r0, [r9]
   24aa8:	stm	sl, {r0, r1}
   24aac:	ldr	r1, [r8]
   24ab0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   24ab4:	add	r0, sl, r1, lsl #3
   24ab8:	sub	r1, r2, r1
   24abc:	lsl	r2, r1, #3
   24ac0:	mov	r1, #0
   24ac4:	bl	11368 <memset@plt>
   24ac8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24acc:	str	r0, [r8]
   24ad0:	mov	r9, sl
   24ad4:	ldm	r7, {r0, r1}
   24ad8:	orr	r8, r1, #1
   24adc:	add	r1, r7, #8
   24ae0:	ldr	r2, [r7, #40]	; 0x28
   24ae4:	ldr	r3, [r7, #44]	; 0x2c
   24ae8:	ldr	r6, [r9, r5, lsl #3]!
   24aec:	str	r1, [sp, #20]
   24af0:	ldr	r4, [r9, #4]!
   24af4:	stm	sp, {r0, r8}
   24af8:	add	r0, sp, #8
   24afc:	stm	r0, {r1, r2, r3}
   24b00:	ldr	r2, [sp, #32]
   24b04:	ldr	r3, [sp, #36]	; 0x24
   24b08:	mov	r1, r6
   24b0c:	mov	r0, r4
   24b10:	bl	2378c <__assert_fail@plt+0x12358>
   24b14:	cmp	r6, r0
   24b18:	bhi	24b7c <__assert_fail@plt+0x13748>
   24b1c:	add	r6, r0, #1
   24b20:	movw	r0, #45520	; 0xb1d0
   24b24:	movt	r0, #4
   24b28:	str	r6, [sl, r5, lsl #3]
   24b2c:	cmp	r4, r0
   24b30:	beq	24b3c <__assert_fail@plt+0x13708>
   24b34:	mov	r0, r4
   24b38:	bl	138e8 <__assert_fail@plt+0x24b4>
   24b3c:	mov	r0, r6
   24b40:	bl	37a4c <__assert_fail@plt+0x26618>
   24b44:	str	r0, [r9]
   24b48:	mov	r4, r0
   24b4c:	add	r3, sp, #8
   24b50:	ldr	r0, [r7]
   24b54:	ldr	r1, [r7, #40]	; 0x28
   24b58:	ldr	r2, [r7, #44]	; 0x2c
   24b5c:	stm	sp, {r0, r8}
   24b60:	ldr	r0, [sp, #20]
   24b64:	stm	r3, {r0, r1, r2}
   24b68:	ldr	r2, [sp, #32]
   24b6c:	ldr	r3, [sp, #36]	; 0x24
   24b70:	mov	r0, r4
   24b74:	mov	r1, r6
   24b78:	bl	2378c <__assert_fail@plt+0x12358>
   24b7c:	ldr	r0, [sp, #28]
   24b80:	ldr	r1, [sp, #24]
   24b84:	str	r1, [r0]
   24b88:	mov	r0, r4
   24b8c:	sub	sp, fp, #28
   24b90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b94:	bl	1141c <abort@plt>
   24b98:	movw	r3, #45472	; 0xb1a0
   24b9c:	movt	r3, #4
   24ba0:	b	24a00 <__assert_fail@plt+0x135cc>
   24ba4:	movw	r3, #45472	; 0xb1a0
   24ba8:	mov	r1, r0
   24bac:	mov	r0, #0
   24bb0:	mvn	r2, #0
   24bb4:	movt	r3, #4
   24bb8:	b	24a00 <__assert_fail@plt+0x135cc>
   24bbc:	movw	r3, #45472	; 0xb1a0
   24bc0:	mov	r2, r1
   24bc4:	mov	r1, r0
   24bc8:	mov	r0, #0
   24bcc:	movt	r3, #4
   24bd0:	b	24a00 <__assert_fail@plt+0x135cc>
   24bd4:	push	{fp, lr}
   24bd8:	mov	fp, sp
   24bdc:	sub	sp, sp, #48	; 0x30
   24be0:	vmov.i32	q8, #0	; 0x00000000
   24be4:	mov	ip, #32
   24be8:	mov	r3, sp
   24bec:	mov	lr, r2
   24bf0:	cmp	r1, #10
   24bf4:	add	r2, r3, #16
   24bf8:	vst1.64	{d16-d17}, [r3], ip
   24bfc:	vst1.64	{d16-d17}, [r2]
   24c00:	vst1.64	{d16-d17}, [r3]
   24c04:	beq	24c24 <__assert_fail@plt+0x137f0>
   24c08:	str	r1, [sp]
   24c0c:	mov	r3, sp
   24c10:	mov	r1, lr
   24c14:	mvn	r2, #0
   24c18:	bl	24a00 <__assert_fail@plt+0x135cc>
   24c1c:	mov	sp, fp
   24c20:	pop	{fp, pc}
   24c24:	bl	1141c <abort@plt>
   24c28:	push	{r4, sl, fp, lr}
   24c2c:	add	fp, sp, #8
   24c30:	sub	sp, sp, #48	; 0x30
   24c34:	vmov.i32	q8, #0	; 0x00000000
   24c38:	mov	ip, r3
   24c3c:	mov	r3, sp
   24c40:	mov	lr, #32
   24c44:	cmp	r1, #10
   24c48:	add	r4, r3, #16
   24c4c:	vst1.64	{d16-d17}, [r3], lr
   24c50:	vst1.64	{d16-d17}, [r4]
   24c54:	vst1.64	{d16-d17}, [r3]
   24c58:	beq	24c78 <__assert_fail@plt+0x13844>
   24c5c:	str	r1, [sp]
   24c60:	mov	r1, r2
   24c64:	mov	r3, sp
   24c68:	mov	r2, ip
   24c6c:	bl	24a00 <__assert_fail@plt+0x135cc>
   24c70:	sub	sp, fp, #8
   24c74:	pop	{r4, sl, fp, pc}
   24c78:	bl	1141c <abort@plt>
   24c7c:	push	{fp, lr}
   24c80:	mov	fp, sp
   24c84:	sub	sp, sp, #48	; 0x30
   24c88:	vmov.i32	q8, #0	; 0x00000000
   24c8c:	mov	r3, sp
   24c90:	mov	ip, #32
   24c94:	cmp	r0, #10
   24c98:	add	r2, r3, #16
   24c9c:	vst1.64	{d16-d17}, [r3], ip
   24ca0:	vst1.64	{d16-d17}, [r2]
   24ca4:	vst1.64	{d16-d17}, [r3]
   24ca8:	beq	24cc8 <__assert_fail@plt+0x13894>
   24cac:	str	r0, [sp]
   24cb0:	mov	r3, sp
   24cb4:	mov	r0, #0
   24cb8:	mvn	r2, #0
   24cbc:	bl	24a00 <__assert_fail@plt+0x135cc>
   24cc0:	mov	sp, fp
   24cc4:	pop	{fp, pc}
   24cc8:	bl	1141c <abort@plt>
   24ccc:	push	{fp, lr}
   24cd0:	mov	fp, sp
   24cd4:	sub	sp, sp, #48	; 0x30
   24cd8:	vmov.i32	q8, #0	; 0x00000000
   24cdc:	mov	r3, sp
   24ce0:	mov	ip, #32
   24ce4:	cmp	r0, #10
   24ce8:	add	lr, r3, #16
   24cec:	vst1.64	{d16-d17}, [r3], ip
   24cf0:	vst1.64	{d16-d17}, [lr]
   24cf4:	vst1.64	{d16-d17}, [r3]
   24cf8:	beq	24d14 <__assert_fail@plt+0x138e0>
   24cfc:	str	r0, [sp]
   24d00:	mov	r3, sp
   24d04:	mov	r0, #0
   24d08:	bl	24a00 <__assert_fail@plt+0x135cc>
   24d0c:	mov	sp, fp
   24d10:	pop	{fp, pc}
   24d14:	bl	1141c <abort@plt>
   24d18:	push	{r4, sl, fp, lr}
   24d1c:	add	fp, sp, #8
   24d20:	sub	sp, sp, #48	; 0x30
   24d24:	mov	lr, r0
   24d28:	movw	r0, #45472	; 0xb1a0
   24d2c:	mov	ip, r1
   24d30:	mov	r1, #32
   24d34:	mov	r4, #1
   24d38:	movt	r0, #4
   24d3c:	add	r3, r0, #16
   24d40:	vld1.64	{d16-d17}, [r0], r1
   24d44:	vld1.64	{d20-d21}, [r0]
   24d48:	vld1.64	{d18-d19}, [r3]
   24d4c:	mov	r3, sp
   24d50:	add	r0, r3, #32
   24d54:	add	r1, r3, #16
   24d58:	vst1.64	{d20-d21}, [r0]
   24d5c:	mov	r0, #28
   24d60:	vst1.64	{d18-d19}, [r1]
   24d64:	mov	r1, r3
   24d68:	and	r0, r0, r2, lsr #3
   24d6c:	and	r2, r2, #31
   24d70:	vst1.64	{d16-d17}, [r1], r0
   24d74:	ldr	r0, [r1, #8]
   24d78:	bic	r4, r4, r0, lsr r2
   24d7c:	eor	r0, r0, r4, lsl r2
   24d80:	mov	r2, ip
   24d84:	str	r0, [r1, #8]
   24d88:	mov	r0, #0
   24d8c:	mov	r1, lr
   24d90:	bl	24a00 <__assert_fail@plt+0x135cc>
   24d94:	sub	sp, fp, #8
   24d98:	pop	{r4, sl, fp, pc}
   24d9c:	push	{fp, lr}
   24da0:	mov	fp, sp
   24da4:	sub	sp, sp, #48	; 0x30
   24da8:	mov	ip, r0
   24dac:	movw	r0, #45472	; 0xb1a0
   24db0:	mov	r2, #32
   24db4:	movt	r0, #4
   24db8:	add	r3, r0, #16
   24dbc:	vld1.64	{d16-d17}, [r0], r2
   24dc0:	vld1.64	{d20-d21}, [r0]
   24dc4:	vld1.64	{d18-d19}, [r3]
   24dc8:	mov	r3, sp
   24dcc:	add	r0, r3, #32
   24dd0:	add	r2, r3, #16
   24dd4:	vst1.64	{d20-d21}, [r0]
   24dd8:	mov	r0, #28
   24ddc:	vst1.64	{d18-d19}, [r2]
   24de0:	mov	r2, r3
   24de4:	and	r0, r0, r1, lsr #3
   24de8:	and	r1, r1, #31
   24dec:	vst1.64	{d16-d17}, [r2], r0
   24df0:	mov	r0, #1
   24df4:	ldr	lr, [r2, #8]
   24df8:	bic	r0, r0, lr, lsr r1
   24dfc:	eor	r0, lr, r0, lsl r1
   24e00:	mov	r1, ip
   24e04:	str	r0, [r2, #8]
   24e08:	mov	r0, #0
   24e0c:	mvn	r2, #0
   24e10:	bl	24a00 <__assert_fail@plt+0x135cc>
   24e14:	mov	sp, fp
   24e18:	pop	{fp, pc}
   24e1c:	push	{fp, lr}
   24e20:	mov	fp, sp
   24e24:	sub	sp, sp, #48	; 0x30
   24e28:	mov	r1, r0
   24e2c:	movw	r0, #45472	; 0xb1a0
   24e30:	mov	r3, #32
   24e34:	movt	r0, #4
   24e38:	add	r2, r0, #16
   24e3c:	vld1.64	{d16-d17}, [r0], r3
   24e40:	mov	r3, sp
   24e44:	vld1.64	{d18-d19}, [r2]
   24e48:	vld1.64	{d20-d21}, [r0]
   24e4c:	add	r2, r3, #16
   24e50:	add	r0, r3, #32
   24e54:	vst1.64	{d18-d19}, [r2]
   24e58:	vst1.64	{d20-d21}, [r0]
   24e5c:	mov	r0, #12
   24e60:	mov	r2, r3
   24e64:	vst1.64	{d16-d17}, [r2], r0
   24e68:	ldr	r0, [r2]
   24e6c:	orr	r0, r0, #67108864	; 0x4000000
   24e70:	str	r0, [r2]
   24e74:	mov	r0, #0
   24e78:	mvn	r2, #0
   24e7c:	bl	24a00 <__assert_fail@plt+0x135cc>
   24e80:	mov	sp, fp
   24e84:	pop	{fp, pc}
   24e88:	push	{fp, lr}
   24e8c:	mov	fp, sp
   24e90:	sub	sp, sp, #48	; 0x30
   24e94:	mov	ip, r1
   24e98:	mov	r1, r0
   24e9c:	movw	r0, #45472	; 0xb1a0
   24ea0:	mov	r2, #32
   24ea4:	movt	r0, #4
   24ea8:	add	r3, r0, #16
   24eac:	vld1.64	{d16-d17}, [r0], r2
   24eb0:	vld1.64	{d18-d19}, [r3]
   24eb4:	vld1.64	{d20-d21}, [r0]
   24eb8:	mov	r3, sp
   24ebc:	add	r2, r3, #16
   24ec0:	add	r0, r3, #32
   24ec4:	vst1.64	{d18-d19}, [r2]
   24ec8:	vst1.64	{d20-d21}, [r0]
   24ecc:	mov	r0, #12
   24ed0:	mov	r2, r3
   24ed4:	vst1.64	{d16-d17}, [r2], r0
   24ed8:	ldr	r0, [r2]
   24edc:	orr	r0, r0, #67108864	; 0x4000000
   24ee0:	str	r0, [r2]
   24ee4:	mov	r0, #0
   24ee8:	mov	r2, ip
   24eec:	bl	24a00 <__assert_fail@plt+0x135cc>
   24ef0:	mov	sp, fp
   24ef4:	pop	{fp, pc}
   24ef8:	push	{r4, sl, fp, lr}
   24efc:	add	fp, sp, #8
   24f00:	sub	sp, sp, #96	; 0x60
   24f04:	vmov.i32	q8, #0	; 0x00000000
   24f08:	mov	ip, r2
   24f0c:	mov	r2, sp
   24f10:	mov	r4, #28
   24f14:	cmp	r1, #10
   24f18:	mov	r3, r2
   24f1c:	add	lr, r2, #16
   24f20:	vst1.64	{d16-d17}, [r3], r4
   24f24:	vst1.64	{d16-d17}, [lr]
   24f28:	vst1.32	{d16-d17}, [r3]
   24f2c:	beq	24f7c <__assert_fail@plt+0x13b48>
   24f30:	vld1.64	{d16-d17}, [r2], r4
   24f34:	vld1.64	{d18-d19}, [lr]
   24f38:	add	r3, sp, #48	; 0x30
   24f3c:	vld1.32	{d20-d21}, [r2]
   24f40:	add	r2, r3, #20
   24f44:	add	r4, r3, #4
   24f48:	vst1.32	{d18-d19}, [r2]
   24f4c:	add	r2, r3, #32
   24f50:	vst1.32	{d16-d17}, [r4]
   24f54:	vst1.32	{d20-d21}, [r2]
   24f58:	str	r1, [sp, #48]	; 0x30
   24f5c:	mvn	r2, #0
   24f60:	ldr	r1, [sp, #60]	; 0x3c
   24f64:	orr	r1, r1, #67108864	; 0x4000000
   24f68:	str	r1, [sp, #60]	; 0x3c
   24f6c:	mov	r1, ip
   24f70:	bl	24a00 <__assert_fail@plt+0x135cc>
   24f74:	sub	sp, fp, #8
   24f78:	pop	{r4, sl, fp, pc}
   24f7c:	bl	1141c <abort@plt>
   24f80:	push	{r4, r5, r6, sl, fp, lr}
   24f84:	add	fp, sp, #16
   24f88:	sub	sp, sp, #48	; 0x30
   24f8c:	mov	ip, r3
   24f90:	movw	r3, #45472	; 0xb1a0
   24f94:	mov	r6, #32
   24f98:	cmp	r1, #0
   24f9c:	mov	r4, sp
   24fa0:	movt	r3, #4
   24fa4:	cmpne	r2, #0
   24fa8:	add	r5, r4, #16
   24fac:	add	lr, r3, #16
   24fb0:	vld1.64	{d16-d17}, [r3], r6
   24fb4:	vld1.64	{d18-d19}, [lr]
   24fb8:	vld1.64	{d20-d21}, [r3]
   24fbc:	mov	r3, #10
   24fc0:	vst1.64	{d16-d17}, [r4], r6
   24fc4:	vst1.64	{d18-d19}, [r5]
   24fc8:	vst1.64	{d20-d21}, [r4]
   24fcc:	str	r3, [sp]
   24fd0:	bne	24fd8 <__assert_fail@plt+0x13ba4>
   24fd4:	bl	1141c <abort@plt>
   24fd8:	str	r2, [sp, #44]	; 0x2c
   24fdc:	str	r1, [sp, #40]	; 0x28
   24fe0:	mov	r3, sp
   24fe4:	mov	r1, ip
   24fe8:	mvn	r2, #0
   24fec:	bl	24a00 <__assert_fail@plt+0x135cc>
   24ff0:	sub	sp, fp, #16
   24ff4:	pop	{r4, r5, r6, sl, fp, pc}
   24ff8:	push	{r4, r5, r6, sl, fp, lr}
   24ffc:	add	fp, sp, #16
   25000:	sub	sp, sp, #48	; 0x30
   25004:	mov	lr, r3
   25008:	movw	r3, #45472	; 0xb1a0
   2500c:	mov	r6, #32
   25010:	cmp	r1, #0
   25014:	mov	r4, sp
   25018:	movt	r3, #4
   2501c:	cmpne	r2, #0
   25020:	add	r5, r4, #16
   25024:	add	ip, r3, #16
   25028:	vld1.64	{d16-d17}, [r3], r6
   2502c:	vld1.64	{d18-d19}, [ip]
   25030:	vld1.64	{d20-d21}, [r3]
   25034:	mov	r3, #10
   25038:	vst1.64	{d16-d17}, [r4], r6
   2503c:	vst1.64	{d18-d19}, [r5]
   25040:	vst1.64	{d20-d21}, [r4]
   25044:	str	r3, [sp]
   25048:	bne	25050 <__assert_fail@plt+0x13c1c>
   2504c:	bl	1141c <abort@plt>
   25050:	ldr	ip, [fp, #8]
   25054:	str	r2, [sp, #44]	; 0x2c
   25058:	str	r1, [sp, #40]	; 0x28
   2505c:	mov	r3, sp
   25060:	mov	r1, lr
   25064:	mov	r2, ip
   25068:	bl	24a00 <__assert_fail@plt+0x135cc>
   2506c:	sub	sp, fp, #16
   25070:	pop	{r4, r5, r6, sl, fp, pc}
   25074:	push	{r4, sl, fp, lr}
   25078:	add	fp, sp, #8
   2507c:	sub	sp, sp, #48	; 0x30
   25080:	movw	r3, #45472	; 0xb1a0
   25084:	mov	lr, #32
   25088:	mov	ip, r2
   2508c:	cmp	r0, #0
   25090:	movt	r3, #4
   25094:	cmpne	r1, #0
   25098:	add	r2, r3, #16
   2509c:	vld1.64	{d16-d17}, [r3], lr
   250a0:	vld1.64	{d20-d21}, [r3]
   250a4:	vld1.64	{d18-d19}, [r2]
   250a8:	mov	r2, sp
   250ac:	add	r4, r2, #16
   250b0:	vst1.64	{d16-d17}, [r2], lr
   250b4:	vst1.64	{d20-d21}, [r2]
   250b8:	mov	r2, #10
   250bc:	vst1.64	{d18-d19}, [r4]
   250c0:	str	r2, [sp]
   250c4:	bne	250cc <__assert_fail@plt+0x13c98>
   250c8:	bl	1141c <abort@plt>
   250cc:	str	r1, [sp, #44]	; 0x2c
   250d0:	str	r0, [sp, #40]	; 0x28
   250d4:	mov	r3, sp
   250d8:	mov	r0, #0
   250dc:	mov	r1, ip
   250e0:	mvn	r2, #0
   250e4:	bl	24a00 <__assert_fail@plt+0x135cc>
   250e8:	sub	sp, fp, #8
   250ec:	pop	{r4, sl, fp, pc}
   250f0:	push	{r4, r5, fp, lr}
   250f4:	add	fp, sp, #8
   250f8:	sub	sp, sp, #48	; 0x30
   250fc:	mov	ip, r3
   25100:	movw	r3, #45472	; 0xb1a0
   25104:	mov	r4, #32
   25108:	mov	lr, r2
   2510c:	cmp	r0, #0
   25110:	movt	r3, #4
   25114:	cmpne	r1, #0
   25118:	add	r2, r3, #16
   2511c:	vld1.64	{d16-d17}, [r3], r4
   25120:	vld1.64	{d20-d21}, [r3]
   25124:	vld1.64	{d18-d19}, [r2]
   25128:	mov	r2, sp
   2512c:	add	r5, r2, #16
   25130:	vst1.64	{d16-d17}, [r2], r4
   25134:	vst1.64	{d20-d21}, [r2]
   25138:	mov	r2, #10
   2513c:	vst1.64	{d18-d19}, [r5]
   25140:	str	r2, [sp]
   25144:	bne	2514c <__assert_fail@plt+0x13d18>
   25148:	bl	1141c <abort@plt>
   2514c:	str	r1, [sp, #44]	; 0x2c
   25150:	str	r0, [sp, #40]	; 0x28
   25154:	mov	r3, sp
   25158:	mov	r0, #0
   2515c:	mov	r1, lr
   25160:	mov	r2, ip
   25164:	bl	24a00 <__assert_fail@plt+0x135cc>
   25168:	sub	sp, fp, #8
   2516c:	pop	{r4, r5, fp, pc}
   25170:	movw	r3, #45376	; 0xb140
   25174:	movt	r3, #4
   25178:	b	24a00 <__assert_fail@plt+0x135cc>
   2517c:	movw	r3, #45376	; 0xb140
   25180:	mov	r2, r1
   25184:	mov	r1, r0
   25188:	mov	r0, #0
   2518c:	movt	r3, #4
   25190:	b	24a00 <__assert_fail@plt+0x135cc>
   25194:	movw	r3, #45376	; 0xb140
   25198:	mvn	r2, #0
   2519c:	movt	r3, #4
   251a0:	b	24a00 <__assert_fail@plt+0x135cc>
   251a4:	movw	r3, #45376	; 0xb140
   251a8:	mov	r1, r0
   251ac:	mov	r0, #0
   251b0:	mvn	r2, #0
   251b4:	movt	r3, #4
   251b8:	b	24a00 <__assert_fail@plt+0x135cc>
   251bc:	push	{r4, r5, fp, lr}
   251c0:	add	fp, sp, #8
   251c4:	mov	r5, r0
   251c8:	mov	r4, r1
   251cc:	mov	r0, #0
   251d0:	mov	r2, #5
   251d4:	mov	r1, r5
   251d8:	bl	11218 <dcgettext@plt>
   251dc:	cmp	r0, r5
   251e0:	popne	{r4, r5, fp, pc}
   251e4:	bl	3835c <__assert_fail@plt+0x26f28>
   251e8:	ldrb	r1, [r0]
   251ec:	and	r1, r1, #223	; 0xdf
   251f0:	cmp	r1, #71	; 0x47
   251f4:	beq	2525c <__assert_fail@plt+0x13e28>
   251f8:	cmp	r1, #85	; 0x55
   251fc:	bne	252b4 <__assert_fail@plt+0x13e80>
   25200:	ldrb	r1, [r0, #1]
   25204:	and	r1, r1, #223	; 0xdf
   25208:	cmp	r1, #84	; 0x54
   2520c:	bne	252b4 <__assert_fail@plt+0x13e80>
   25210:	ldrb	r1, [r0, #2]
   25214:	and	r1, r1, #223	; 0xdf
   25218:	cmp	r1, #70	; 0x46
   2521c:	bne	252b4 <__assert_fail@plt+0x13e80>
   25220:	ldrb	r1, [r0, #3]
   25224:	cmp	r1, #45	; 0x2d
   25228:	bne	252b4 <__assert_fail@plt+0x13e80>
   2522c:	ldrb	r1, [r0, #4]
   25230:	cmp	r1, #56	; 0x38
   25234:	bne	252b4 <__assert_fail@plt+0x13e80>
   25238:	ldrb	r0, [r0, #5]
   2523c:	cmp	r0, #0
   25240:	bne	252b4 <__assert_fail@plt+0x13e80>
   25244:	ldrb	r1, [r5]
   25248:	movw	r2, #42368	; 0xa580
   2524c:	movw	r0, #42372	; 0xa584
   25250:	movt	r2, #3
   25254:	movt	r0, #3
   25258:	b	252e4 <__assert_fail@plt+0x13eb0>
   2525c:	ldrb	r1, [r0, #1]
   25260:	and	r1, r1, #223	; 0xdf
   25264:	cmp	r1, #66	; 0x42
   25268:	bne	252b4 <__assert_fail@plt+0x13e80>
   2526c:	ldrb	r1, [r0, #2]
   25270:	cmp	r1, #49	; 0x31
   25274:	bne	252b4 <__assert_fail@plt+0x13e80>
   25278:	ldrb	r1, [r0, #3]
   2527c:	cmp	r1, #56	; 0x38
   25280:	bne	252b4 <__assert_fail@plt+0x13e80>
   25284:	ldrb	r1, [r0, #4]
   25288:	cmp	r1, #48	; 0x30
   2528c:	bne	252b4 <__assert_fail@plt+0x13e80>
   25290:	ldrb	r1, [r0, #5]
   25294:	cmp	r1, #51	; 0x33
   25298:	bne	252b4 <__assert_fail@plt+0x13e80>
   2529c:	ldrb	r1, [r0, #6]
   252a0:	cmp	r1, #48	; 0x30
   252a4:	bne	252b4 <__assert_fail@plt+0x13e80>
   252a8:	ldrb	r0, [r0, #7]
   252ac:	cmp	r0, #0
   252b0:	beq	252d0 <__assert_fail@plt+0x13e9c>
   252b4:	movw	r1, #42364	; 0xa57c
   252b8:	movw	r0, #37132	; 0x910c
   252bc:	cmp	r4, #9
   252c0:	movt	r1, #3
   252c4:	movt	r0, #3
   252c8:	moveq	r0, r1
   252cc:	pop	{r4, r5, fp, pc}
   252d0:	ldrb	r1, [r5]
   252d4:	movw	r2, #42376	; 0xa588
   252d8:	movw	r0, #42380	; 0xa58c
   252dc:	movt	r2, #3
   252e0:	movt	r0, #3
   252e4:	cmp	r1, #96	; 0x60
   252e8:	moveq	r0, r2
   252ec:	pop	{r4, r5, fp, pc}
   252f0:	push	{fp, lr}
   252f4:	mov	fp, sp
   252f8:	mov	lr, r0
   252fc:	movw	r0, #45776	; 0xb2d0
   25300:	mov	ip, r1
   25304:	ldrb	r1, [r2, #28]
   25308:	movt	r0, #4
   2530c:	ldr	r3, [r0]
   25310:	mov	r0, #16
   25314:	and	r1, r1, #111	; 0x6f
   25318:	and	r0, r0, r3, lsr #21
   2531c:	orr	r0, r1, r0
   25320:	mov	r1, lr
   25324:	orr	r0, r0, #128	; 0x80
   25328:	strb	r0, [r2, #28]
   2532c:	mov	r0, r2
   25330:	mov	r2, ip
   25334:	bl	25370 <__assert_fail@plt+0x13f3c>
   25338:	cmp	r0, #0
   2533c:	beq	25368 <__assert_fail@plt+0x13f34>
   25340:	movw	r1, #42856	; 0xa768
   25344:	mov	r2, #5
   25348:	movt	r1, #3
   2534c:	ldr	r0, [r1, r0, lsl #2]
   25350:	movw	r1, #42472	; 0xa5e8
   25354:	movt	r1, #3
   25358:	add	r1, r1, r0
   2535c:	mov	r0, #0
   25360:	pop	{fp, lr}
   25364:	b	11218 <dcgettext@plt>
   25368:	mov	r0, #0
   2536c:	pop	{fp, pc}
   25370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25374:	add	fp, sp, #28
   25378:	sub	sp, sp, #140	; 0x8c
   2537c:	mov	sl, r0
   25380:	mov	r0, #0
   25384:	str	r3, [sp, #24]
   25388:	mov	r5, r1
   2538c:	mov	r9, r2
   25390:	str	r0, [fp, #-52]	; 0xffffffcc
   25394:	str	r0, [sl, #24]
   25398:	str	r0, [sl, #8]
   2539c:	str	r3, [sl, #12]
   253a0:	ldrb	r0, [sl, #28]
   253a4:	and	r0, r0, #144	; 0x90
   253a8:	strb	r0, [sl, #28]
   253ac:	ldm	sl, {r0, r1}
   253b0:	cmp	r1, #159	; 0x9f
   253b4:	bls	25b94 <__assert_fail@plt+0x14760>
   253b8:	mov	r1, #160	; 0xa0
   253bc:	mov	r2, #160	; 0xa0
   253c0:	str	r0, [sp, #28]
   253c4:	str	r1, [sl, #8]
   253c8:	mov	r1, #0
   253cc:	bl	11368 <memset@plt>
   253d0:	ldr	r3, [sp, #28]
   253d4:	mov	r0, #31
   253d8:	str	r0, [r3, #64]	; 0x40
   253dc:	movw	r0, #43689	; 0xaaa9
   253e0:	movt	r0, #2730	; 0xaaa
   253e4:	cmp	r9, r0
   253e8:	bhi	25588 <__assert_fail@plt+0x14154>
   253ec:	add	r7, r9, #1
   253f0:	mov	r4, r3
   253f4:	lsl	r0, r7, #3
   253f8:	str	r7, [r3, #4]
   253fc:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   25400:	str	r0, [r4]
   25404:	mov	r0, #1
   25408:	mov	r6, r0
   2540c:	lsl	r0, r0, #1
   25410:	cmp	r6, r9
   25414:	bls	25408 <__assert_fail@plt+0x13fd4>
   25418:	mov	r0, #12
   2541c:	mov	r1, r6
   25420:	str	r7, [sp, #12]
   25424:	str	r5, [sp, #20]
   25428:	bl	37f9c <__assert_fail@plt+0x26b68>
   2542c:	ldr	r4, [sp, #28]
   25430:	sub	r1, r6, #1
   25434:	str	r1, [r4, #68]	; 0x44
   25438:	str	r0, [r4, #32]
   2543c:	bl	1126c <__ctype_get_mb_cur_max@plt>
   25440:	str	r0, [r4, #92]	; 0x5c
   25444:	mov	r0, #14
   25448:	bl	113ec <nl_langinfo@plt>
   2544c:	ldrb	r1, [r0]
   25450:	orr	r1, r1, #32
   25454:	cmp	r1, #117	; 0x75
   25458:	bne	254ac <__assert_fail@plt+0x14078>
   2545c:	ldrb	r1, [r0, #1]
   25460:	orr	r1, r1, #32
   25464:	cmp	r1, #116	; 0x74
   25468:	bne	254ac <__assert_fail@plt+0x14078>
   2546c:	ldrb	r1, [r0, #2]
   25470:	orr	r1, r1, #32
   25474:	cmp	r1, #102	; 0x66
   25478:	bne	254ac <__assert_fail@plt+0x14078>
   2547c:	ldrb	r1, [r0, #3]!
   25480:	cmp	r1, #45	; 0x2d
   25484:	movw	r1, #42972	; 0xa7dc
   25488:	movt	r1, #3
   2548c:	addeq	r0, r0, #1
   25490:	bl	1117c <strcmp@plt>
   25494:	cmp	r0, #0
   25498:	bne	254ac <__assert_fail@plt+0x14078>
   2549c:	ldr	r1, [sp, #28]
   254a0:	ldrb	r0, [r1, #88]	; 0x58
   254a4:	orr	r0, r0, #4
   254a8:	strb	r0, [r1, #88]	; 0x58
   254ac:	ldr	r3, [sp, #28]
   254b0:	ldrb	r0, [r3, #88]	; 0x58
   254b4:	and	r1, r0, #247	; 0xf7
   254b8:	strb	r1, [r3, #88]	; 0x58
   254bc:	ldr	r1, [r3, #92]	; 0x5c
   254c0:	cmp	r1, #2
   254c4:	blt	25570 <__assert_fail@plt+0x1413c>
   254c8:	tst	r0, #4
   254cc:	bne	25564 <__assert_fail@plt+0x14130>
   254d0:	mov	r0, #32
   254d4:	mov	r1, #1
   254d8:	mov	r4, #1
   254dc:	bl	37f9c <__assert_fail@plt+0x26b68>
   254e0:	ldr	r3, [sp, #28]
   254e4:	cmp	r0, #0
   254e8:	str	r0, [r3, #60]	; 0x3c
   254ec:	beq	25588 <__assert_fail@plt+0x14154>
   254f0:	mov	r5, #0
   254f4:	mov	r7, #0
   254f8:	b	2550c <__assert_fail@plt+0x140d8>
   254fc:	add	r7, r7, #1
   25500:	add	r5, r5, r8
   25504:	cmp	r7, #8
   25508:	beq	25570 <__assert_fail@plt+0x1413c>
   2550c:	mov	r8, #0
   25510:	b	25520 <__assert_fail@plt+0x140ec>
   25514:	add	r8, r8, #1
   25518:	cmp	r8, #32
   2551c:	beq	254fc <__assert_fail@plt+0x140c8>
   25520:	add	r6, r5, r8
   25524:	mov	r0, r6
   25528:	bl	11374 <btowc@plt>
   2552c:	ldr	r3, [sp, #28]
   25530:	cmn	r0, #1
   25534:	beq	25548 <__assert_fail@plt+0x14114>
   25538:	ldr	r1, [r3, #60]	; 0x3c
   2553c:	ldr	r2, [r1, r7, lsl #2]
   25540:	orr	r2, r2, r4, lsl r8
   25544:	str	r2, [r1, r7, lsl #2]
   25548:	cmp	r6, #127	; 0x7f
   2554c:	bhi	25514 <__assert_fail@plt+0x140e0>
   25550:	cmp	r6, r0
   25554:	ldrbne	r0, [r3, #88]	; 0x58
   25558:	orrne	r0, r0, #8
   2555c:	strbne	r0, [r3, #88]	; 0x58
   25560:	b	25514 <__assert_fail@plt+0x140e0>
   25564:	movw	r0, #42924	; 0xa7ac
   25568:	movt	r0, #3
   2556c:	str	r0, [r3, #60]	; 0x3c
   25570:	ldr	r0, [r3]
   25574:	ldr	r7, [sp, #20]
   25578:	cmp	r0, #0
   2557c:	ldrne	r0, [r3, #32]
   25580:	cmpne	r0, #0
   25584:	bne	255a8 <__assert_fail@plt+0x14174>
   25588:	mov	r4, #12
   2558c:	mov	r0, r3
   25590:	str	r4, [fp, #-52]	; 0xffffffcc
   25594:	bl	26f1c <__assert_fail@plt+0x15ae8>
   25598:	mov	r0, #0
   2559c:	str	r0, [sl]
   255a0:	str	r0, [sl, #4]
   255a4:	b	267b8 <__assert_fail@plt+0x15384>
   255a8:	movw	r0, #0
   255ac:	movw	r1, #0
   255b0:	mov	r6, #0
   255b4:	movt	r0, #0
   255b8:	movt	r1, #0
   255bc:	str	r6, [fp, #-52]	; 0xffffffcc
   255c0:	orrs	r4, r1, r0
   255c4:	beq	255e0 <__assert_fail@plt+0x141ac>
   255c8:	add	r0, r3, #136	; 0x88
   255cc:	mov	r1, #0
   255d0:	bl	111f4 <pthread_mutex_init@plt>
   255d4:	ldr	r3, [sp, #28]
   255d8:	cmp	r0, #0
   255dc:	bne	25588 <__assert_fail@plt+0x14154>
   255e0:	vmov.i32	q8, #0	; 0x00000000
   255e4:	add	r1, sp, #32
   255e8:	str	r4, [sp, #8]
   255ec:	ldr	r4, [sl, #20]
   255f0:	ldr	r2, [sp, #24]
   255f4:	add	r0, r1, #64	; 0x40
   255f8:	vst1.32	{d16-d17}, [r0]
   255fc:	add	r0, r1, #52	; 0x34
   25600:	vst1.32	{d16-d17}, [r0]
   25604:	add	r0, r1, #36	; 0x24
   25608:	vst1.32	{d16-d17}, [r0]
   2560c:	add	r0, r1, #20
   25610:	vst1.32	{d16-d17}, [r0]
   25614:	add	r0, r1, #4
   25618:	add	r1, r1, #44	; 0x2c
   2561c:	vst1.32	{d16-d17}, [r0]
   25620:	str	r7, [sp, #32]
   25624:	ubfx	r0, r2, #22, #1
   25628:	vdup.32	q8, r9
   2562c:	strb	r0, [sp, #104]	; 0x68
   25630:	and	r0, r2, #4194304	; 0x400000
   25634:	str	r4, [sp, #96]	; 0x60
   25638:	orrs	r5, r0, r4
   2563c:	str	r0, [sp, #16]
   25640:	movwne	r5, #1
   25644:	cmp	r9, #1
   25648:	strb	r5, [sp, #107]	; 0x6b
   2564c:	ldr	r0, [r3, #92]	; 0x5c
   25650:	str	r0, [sp, #112]	; 0x70
   25654:	ldrb	r2, [r3, #88]	; 0x58
   25658:	vst1.32	{d16-d17}, [r1]
   2565c:	ubfx	r1, r2, #3, #1
   25660:	strb	r1, [sp, #106]	; 0x6a
   25664:	ubfx	r1, r2, #2, #1
   25668:	strb	r1, [sp, #105]	; 0x69
   2566c:	blt	256e4 <__assert_fail@plt+0x142b0>
   25670:	ldr	r8, [sp, #12]
   25674:	cmp	r0, #2
   25678:	blt	256a4 <__assert_fail@plt+0x14270>
   2567c:	mov	r6, #12
   25680:	cmn	r9, #-1073741822	; 0xc0000002
   25684:	bhi	25b8c <__assert_fail@plt+0x14758>
   25688:	lsl	r1, r8, #2
   2568c:	mov	r0, #0
   25690:	bl	38020 <__assert_fail@plt+0x26bec>
   25694:	ldr	r3, [sp, #28]
   25698:	cmp	r0, #0
   2569c:	beq	25b8c <__assert_fail@plt+0x14758>
   256a0:	str	r0, [sp, #40]	; 0x28
   256a4:	cmp	r5, #0
   256a8:	mov	r6, #0
   256ac:	mov	r5, #0
   256b0:	beq	256d8 <__assert_fail@plt+0x142a4>
   256b4:	mov	r0, #0
   256b8:	mov	r1, r8
   256bc:	bl	38020 <__assert_fail@plt+0x26bec>
   256c0:	cmp	r0, #0
   256c4:	beq	25b88 <__assert_fail@plt+0x14754>
   256c8:	ldr	r3, [sp, #28]
   256cc:	mov	r6, r0
   256d0:	mov	r5, #1
   256d4:	str	r0, [sp, #36]	; 0x24
   256d8:	str	r8, [sp, #68]	; 0x44
   256dc:	ldr	r0, [r3, #92]	; 0x5c
   256e0:	b	256e8 <__assert_fail@plt+0x142b4>
   256e4:	mov	r8, #0
   256e8:	ldr	r1, [sp, #16]
   256ec:	cmp	r5, #0
   256f0:	moveq	r6, r7
   256f4:	str	r6, [sp, #36]	; 0x24
   256f8:	cmp	r1, #0
   256fc:	beq	257e0 <__assert_fail@plt+0x143ac>
   25700:	cmp	r0, #2
   25704:	blt	257f4 <__assert_fail@plt+0x143c0>
   25708:	add	r0, sp, #32
   2570c:	bl	2a700 <__assert_fail@plt+0x192cc>
   25710:	cmp	r0, #0
   25714:	bne	25b80 <__assert_fail@plt+0x1474c>
   25718:	ldr	r1, [sp, #28]
   2571c:	add	r5, sp, #32
   25720:	b	2573c <__assert_fail@plt+0x14308>
   25724:	mov	r0, r5
   25728:	str	r4, [sp, #68]	; 0x44
   2572c:	bl	2a700 <__assert_fail@plt+0x192cc>
   25730:	ldr	r1, [sp, #28]
   25734:	cmp	r0, #0
   25738:	bne	25b80 <__assert_fail@plt+0x1474c>
   2573c:	ldr	r0, [sp, #64]	; 0x40
   25740:	cmp	r0, r9
   25744:	bge	258d0 <__assert_fail@plt+0x1449c>
   25748:	ldr	r0, [r1, #92]	; 0x5c
   2574c:	ldr	r2, [sp, #60]	; 0x3c
   25750:	ldr	r1, [sp, #68]	; 0x44
   25754:	add	r0, r0, r2
   25758:	cmp	r1, r0
   2575c:	bgt	258d0 <__assert_fail@plt+0x1449c>
   25760:	ldr	r0, [sp, #112]	; 0x70
   25764:	lsl	r4, r1, #1
   25768:	cmp	r0, #2
   2576c:	blt	257b8 <__assert_fail@plt+0x14384>
   25770:	mov	r6, #12
   25774:	cmn	r4, #-1073741823	; 0xc0000001
   25778:	bhi	25b8c <__assert_fail@plt+0x14758>
   2577c:	ldr	r0, [sp, #40]	; 0x28
   25780:	lsl	r8, r1, #3
   25784:	mov	r1, r8
   25788:	bl	38020 <__assert_fail@plt+0x26bec>
   2578c:	cmp	r0, #0
   25790:	beq	25b8c <__assert_fail@plt+0x14758>
   25794:	str	r0, [sp, #40]	; 0x28
   25798:	ldr	r0, [sp, #44]	; 0x2c
   2579c:	cmp	r0, #0
   257a0:	beq	257b8 <__assert_fail@plt+0x14384>
   257a4:	mov	r1, r8
   257a8:	bl	38020 <__assert_fail@plt+0x26bec>
   257ac:	cmp	r0, #0
   257b0:	beq	25b8c <__assert_fail@plt+0x14758>
   257b4:	str	r0, [sp, #44]	; 0x2c
   257b8:	ldrb	r0, [sp, #107]	; 0x6b
   257bc:	cmp	r0, #0
   257c0:	beq	25724 <__assert_fail@plt+0x142f0>
   257c4:	ldr	r0, [sp, #36]	; 0x24
   257c8:	mov	r1, r4
   257cc:	bl	38020 <__assert_fail@plt+0x26bec>
   257d0:	cmp	r0, #0
   257d4:	beq	25b88 <__assert_fail@plt+0x14754>
   257d8:	str	r0, [sp, #36]	; 0x24
   257dc:	b	25724 <__assert_fail@plt+0x142f0>
   257e0:	cmp	r0, #2
   257e4:	blt	25858 <__assert_fail@plt+0x14424>
   257e8:	add	r0, sp, #32
   257ec:	bl	2b000 <__assert_fail@plt+0x19bcc>
   257f0:	b	258d0 <__assert_fail@plt+0x1449c>
   257f4:	cmp	r8, r9
   257f8:	movgt	r8, r9
   257fc:	cmp	r8, #1
   25800:	blt	258c4 <__assert_fail@plt+0x14490>
   25804:	mov	r5, #0
   25808:	bl	112e4 <__ctype_toupper_loc@plt>
   2580c:	mov	r1, #0
   25810:	add	r2, r7, r5
   25814:	cmp	r4, #0
   25818:	ldrb	r2, [r2, r1]
   2581c:	bne	25850 <__assert_fail@plt+0x1441c>
   25820:	ldr	r3, [r0]
   25824:	ldr	r2, [r3, r2, lsl #2]
   25828:	ldr	r3, [sp, #36]	; 0x24
   2582c:	strb	r2, [r3, r1]
   25830:	add	r2, r1, #1
   25834:	cmp	r2, r8
   25838:	bge	258bc <__assert_fail@plt+0x14488>
   2583c:	ldr	r7, [sp, #32]
   25840:	ldr	r5, [sp, #56]	; 0x38
   25844:	ldr	r4, [sp, #96]	; 0x60
   25848:	mov	r1, r2
   2584c:	b	25810 <__assert_fail@plt+0x143dc>
   25850:	ldrb	r2, [r4, r2]
   25854:	b	25820 <__assert_fail@plt+0x143ec>
   25858:	cmp	r4, #0
   2585c:	beq	25ae0 <__assert_fail@plt+0x146ac>
   25860:	cmp	r8, r9
   25864:	movgt	r8, r9
   25868:	cmp	r8, #1
   2586c:	blt	258c4 <__assert_fail@plt+0x14490>
   25870:	ldrb	r0, [r7]
   25874:	cmp	r8, #1
   25878:	ldrb	r0, [r4, r0]
   2587c:	strb	r0, [r6]
   25880:	mov	r0, #1
   25884:	beq	258c8 <__assert_fail@plt+0x14494>
   25888:	mov	r0, #1
   2588c:	ldr	r1, [sp, #32]
   25890:	ldr	r3, [sp, #56]	; 0x38
   25894:	ldr	r7, [sp, #96]	; 0x60
   25898:	ldr	r2, [sp, #36]	; 0x24
   2589c:	add	r1, r1, r3
   258a0:	ldrb	r1, [r1, r0]
   258a4:	ldrb	r1, [r7, r1]
   258a8:	strb	r1, [r2, r0]
   258ac:	add	r0, r0, #1
   258b0:	cmp	r0, r8
   258b4:	blt	2588c <__assert_fail@plt+0x14458>
   258b8:	b	258c8 <__assert_fail@plt+0x14494>
   258bc:	add	r0, r1, #1
   258c0:	b	258c8 <__assert_fail@plt+0x14494>
   258c4:	mov	r0, #0
   258c8:	str	r0, [sp, #64]	; 0x40
   258cc:	str	r0, [sp, #60]	; 0x3c
   258d0:	mov	r5, #0
   258d4:	ldr	r4, [sp, #24]
   258d8:	sub	r8, fp, #48	; 0x30
   258dc:	add	r6, sp, #32
   258e0:	str	r5, [fp, #-52]	; 0xffffffcc
   258e4:	str	r5, [sl, #24]
   258e8:	mov	r0, r8
   258ec:	mov	r1, r6
   258f0:	ldr	r7, [sl]
   258f4:	orr	r2, r4, #8388608	; 0x800000
   258f8:	str	r4, [r7, #128]	; 0x80
   258fc:	bl	2b470 <__assert_fail@plt+0x1a03c>
   25900:	ldr	r1, [sp, #72]	; 0x48
   25904:	mov	r2, r8
   25908:	mov	r3, r4
   2590c:	str	r5, [sp]
   25910:	add	r0, r1, r0
   25914:	mov	r1, sl
   25918:	str	r0, [sp, #72]	; 0x48
   2591c:	sub	r0, fp, #52	; 0x34
   25920:	str	r0, [sp, #4]
   25924:	mov	r0, r6
   25928:	bl	2b204 <__assert_fail@plt+0x19dd0>
   2592c:	ldr	r5, [sp, #28]
   25930:	mov	r4, r0
   25934:	cmp	r0, #0
   25938:	bne	25948 <__assert_fail@plt+0x14514>
   2593c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   25940:	cmp	r0, #0
   25944:	bne	25c18 <__assert_fail@plt+0x147e4>
   25948:	ldr	r1, [r7, #64]	; 0x40
   2594c:	cmp	r1, #31
   25950:	beq	25bb0 <__assert_fail@plt+0x1477c>
   25954:	ldr	r0, [r7, #56]	; 0x38
   25958:	add	r0, r0, r1, lsl #5
   2595c:	add	r2, r1, #1
   25960:	vmov.i32	q8, #0	; 0x00000000
   25964:	mov	r1, #0
   25968:	str	r2, [r7, #64]	; 0x40
   2596c:	mov	r2, #2
   25970:	add	r6, r0, #4
   25974:	str	r1, [r0, #20]
   25978:	str	r1, [r0, #24]
   2597c:	str	r2, [r0, #28]
   25980:	mov	r0, #28
   25984:	mov	r1, r6
   25988:	vst1.32	{d16-d17}, [r1], r0
   2598c:	mvn	r0, #0
   25990:	str	r0, [r1]
   25994:	cmp	r4, #0
   25998:	mov	r0, r6
   2599c:	beq	259f0 <__assert_fail@plt+0x145bc>
   259a0:	ldr	r1, [r7, #64]	; 0x40
   259a4:	cmp	r1, #31
   259a8:	beq	25be4 <__assert_fail@plt+0x147b0>
   259ac:	ldr	r0, [r7, #56]	; 0x38
   259b0:	add	r0, r0, r1, lsl #5
   259b4:	add	r2, r1, #1
   259b8:	mov	r1, #0
   259bc:	cmp	r6, #0
   259c0:	mvn	r3, #0
   259c4:	str	r2, [r7, #64]	; 0x40
   259c8:	mov	r2, #16
   259cc:	str	r1, [r0, #4]!
   259d0:	add	ip, r0, #20
   259d4:	stmib	r0, {r4, r6}
   259d8:	str	r1, [r0, #12]
   259dc:	str	r1, [r0, #16]
   259e0:	stm	ip, {r1, r2, r3}
   259e4:	str	r0, [r4]
   259e8:	beq	25c10 <__assert_fail@plt+0x147dc>
   259ec:	str	r0, [r6]
   259f0:	cmp	r6, #0
   259f4:	cmpne	r0, #0
   259f8:	beq	25c10 <__assert_fail@plt+0x147dc>
   259fc:	str	r0, [r5, #52]	; 0x34
   25a00:	ldr	r9, [sl]
   25a04:	ldr	r0, [r9, #4]
   25a08:	lsl	r0, r0, #2
   25a0c:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   25a10:	str	r0, [r9, #12]
   25a14:	ldr	r0, [r9, #4]
   25a18:	lsl	r0, r0, #2
   25a1c:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   25a20:	str	r0, [r9, #16]
   25a24:	ldr	r0, [r9, #4]
   25a28:	add	r0, r0, r0, lsl #1
   25a2c:	lsl	r0, r0, #2
   25a30:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   25a34:	str	r0, [r9, #20]
   25a38:	ldr	r0, [r9, #4]
   25a3c:	add	r0, r0, r0, lsl #1
   25a40:	lsl	r0, r0, #2
   25a44:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   25a48:	str	r0, [r9, #24]
   25a4c:	ldr	r1, [r9, #12]
   25a50:	cmp	r1, #0
   25a54:	ldrne	r1, [r9, #16]
   25a58:	cmpne	r1, #0
   25a5c:	beq	25a70 <__assert_fail@plt+0x1463c>
   25a60:	cmp	r0, #0
   25a64:	ldrne	r0, [r9, #20]
   25a68:	cmpne	r0, #0
   25a6c:	bne	25a7c <__assert_fail@plt+0x14648>
   25a70:	mov	r0, #12
   25a74:	str	r0, [fp, #-52]	; 0xffffffcc
   25a78:	b	25c20 <__assert_fail@plt+0x147ec>
   25a7c:	ldr	r0, [sl, #24]
   25a80:	lsl	r0, r0, #2
   25a84:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   25a88:	cmp	r0, #0
   25a8c:	str	r0, [r9, #132]	; 0x84
   25a90:	beq	25ea4 <__assert_fail@plt+0x14a70>
   25a94:	ldr	r1, [sl, #24]
   25a98:	cmp	r1, #0
   25a9c:	beq	25cd8 <__assert_fail@plt+0x148a4>
   25aa0:	mov	r2, #0
   25aa4:	cmp	r1, #4
   25aa8:	bcc	25cc8 <__assert_fail@plt+0x14894>
   25aac:	bic	r2, r1, #3
   25ab0:	mov	r3, #1
   25ab4:	add	r7, pc, #964	; 0x3c4
   25ab8:	sub	r6, r2, #4
   25abc:	add	r3, r3, r6, lsr #2
   25ac0:	cmp	r6, #12
   25ac4:	and	ip, r3, #3
   25ac8:	bcs	25aec <__assert_fail@plt+0x146b8>
   25acc:	vld1.64	{d16-d17}, [r7 :128]
   25ad0:	mov	r7, #0
   25ad4:	cmp	ip, #0
   25ad8:	bne	25b5c <__assert_fail@plt+0x14728>
   25adc:	b	25cd0 <__assert_fail@plt+0x1489c>
   25ae0:	str	r8, [sp, #64]	; 0x40
   25ae4:	str	r8, [sp, #60]	; 0x3c
   25ae8:	b	258d0 <__assert_fail@plt+0x1449c>
   25aec:	sub	r6, r3, ip
   25af0:	add	r3, pc, #904	; 0x388
   25af4:	vmov.i32	q9, #12	; 0x0000000c
   25af8:	vmov.i32	q10, #8	; 0x00000008
   25afc:	vmov.i32	q11, #4	; 0x00000004
   25b00:	vmov.i32	q12, #16	; 0x00000010
   25b04:	mov	r7, #0
   25b08:	mov	lr, #64	; 0x40
   25b0c:	mov	r4, r0
   25b10:	vld1.64	{d16-d17}, [r3 :128]
   25b14:	mov	r3, r0
   25b18:	vadd.i32	q13, q8, q9
   25b1c:	add	r5, r3, #48	; 0x30
   25b20:	vadd.i32	q14, q8, q10
   25b24:	vadd.i32	q15, q8, q11
   25b28:	subs	r6, r6, #4
   25b2c:	add	r7, r7, #16
   25b30:	vst1.32	{d26-d27}, [r5]
   25b34:	vst1.32	{d16-d17}, [r4], lr
   25b38:	vadd.i32	q8, q8, q12
   25b3c:	add	r5, r3, #32
   25b40:	add	r3, r3, #16
   25b44:	vst1.32	{d28-d29}, [r5]
   25b48:	vst1.32	{d30-d31}, [r3]
   25b4c:	mov	r3, r4
   25b50:	bne	25b18 <__assert_fail@plt+0x146e4>
   25b54:	cmp	ip, #0
   25b58:	beq	25cd0 <__assert_fail@plt+0x1489c>
   25b5c:	vmov.i32	q9, #4	; 0x00000004
   25b60:	add	r3, r0, r7, lsl #2
   25b64:	rsb	r7, ip, #0
   25b68:	vadd.i32	q10, q8, q9
   25b6c:	vst1.32	{d16-d17}, [r3]!
   25b70:	adds	r7, r7, #1
   25b74:	vorr	q8, q10, q10
   25b78:	bcc	25b68 <__assert_fail@plt+0x14734>
   25b7c:	b	25cd0 <__assert_fail@plt+0x1489c>
   25b80:	mov	r6, r0
   25b84:	b	25b8c <__assert_fail@plt+0x14758>
   25b88:	mov	r6, #12
   25b8c:	str	r6, [fp, #-52]	; 0xffffffcc
   25b90:	b	25c20 <__assert_fail@plt+0x147ec>
   25b94:	mov	r1, #160	; 0xa0
   25b98:	mov	r4, #160	; 0xa0
   25b9c:	bl	38020 <__assert_fail@plt+0x26bec>
   25ba0:	cmp	r0, #0
   25ba4:	beq	25bdc <__assert_fail@plt+0x147a8>
   25ba8:	stm	sl, {r0, r4}
   25bac:	b	253b8 <__assert_fail@plt+0x13f84>
   25bb0:	mov	r0, #996	; 0x3e4
   25bb4:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   25bb8:	cmp	r0, #0
   25bbc:	beq	25cbc <__assert_fail@plt+0x14888>
   25bc0:	ldr	r1, [r7, #56]	; 0x38
   25bc4:	ldr	r5, [sp, #28]
   25bc8:	str	r1, [r0]
   25bcc:	mov	r1, #0
   25bd0:	str	r1, [r7, #64]	; 0x40
   25bd4:	str	r0, [r7, #56]	; 0x38
   25bd8:	b	25958 <__assert_fail@plt+0x14524>
   25bdc:	mov	r4, #12
   25be0:	b	267b8 <__assert_fail@plt+0x15384>
   25be4:	mov	r0, #996	; 0x3e4
   25be8:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   25bec:	ldr	r5, [sp, #28]
   25bf0:	cmp	r0, #0
   25bf4:	beq	25c10 <__assert_fail@plt+0x147dc>
   25bf8:	ldr	r1, [r7, #56]	; 0x38
   25bfc:	str	r1, [r0]
   25c00:	mov	r1, #0
   25c04:	str	r1, [r7, #64]	; 0x40
   25c08:	str	r0, [r7, #56]	; 0x38
   25c0c:	b	259b0 <__assert_fail@plt+0x1457c>
   25c10:	mov	r0, #12
   25c14:	str	r0, [fp, #-52]	; 0xffffffcc
   25c18:	mov	r0, #0
   25c1c:	str	r0, [r5, #52]	; 0x34
   25c20:	ldr	r4, [sl]
   25c24:	ldr	r0, [r4, #56]	; 0x38
   25c28:	cmp	r0, #0
   25c2c:	beq	25c44 <__assert_fail@plt+0x14810>
   25c30:	ldr	r5, [r0]
   25c34:	bl	138e8 <__assert_fail@plt+0x24b4>
   25c38:	cmp	r5, #0
   25c3c:	mov	r0, r5
   25c40:	bne	25c30 <__assert_fail@plt+0x147fc>
   25c44:	mov	r0, #31
   25c48:	mov	r5, #0
   25c4c:	str	r0, [r4, #64]	; 0x40
   25c50:	str	r5, [r4, #52]	; 0x34
   25c54:	str	r5, [r4, #56]	; 0x38
   25c58:	ldr	r0, [r4, #16]
   25c5c:	bl	138e8 <__assert_fail@plt+0x24b4>
   25c60:	str	r5, [r4, #16]
   25c64:	ldr	r0, [sp, #40]	; 0x28
   25c68:	bl	138e8 <__assert_fail@plt+0x24b4>
   25c6c:	ldr	r0, [sp, #44]	; 0x2c
   25c70:	bl	138e8 <__assert_fail@plt+0x24b4>
   25c74:	ldrb	r0, [sp, #107]	; 0x6b
   25c78:	cmp	r0, #0
   25c7c:	beq	25c88 <__assert_fail@plt+0x14854>
   25c80:	ldr	r0, [sp, #36]	; 0x24
   25c84:	bl	138e8 <__assert_fail@plt+0x24b4>
   25c88:	ldr	r0, [sp, #8]
   25c8c:	cmp	r0, #0
   25c90:	beq	25ca0 <__assert_fail@plt+0x1486c>
   25c94:	ldr	r0, [sp, #28]
   25c98:	add	r0, r0, #136	; 0x88
   25c9c:	bl	11194 <pthread_mutex_destroy@plt>
   25ca0:	ldr	r0, [sp, #28]
   25ca4:	bl	26f1c <__assert_fail@plt+0x15ae8>
   25ca8:	mov	r0, #0
   25cac:	str	r0, [sl]
   25cb0:	str	r0, [sl, #4]
   25cb4:	ldr	r4, [fp, #-52]	; 0xffffffcc
   25cb8:	b	267b8 <__assert_fail@plt+0x15384>
   25cbc:	ldr	r5, [sp, #28]
   25cc0:	mov	r6, #0
   25cc4:	b	25994 <__assert_fail@plt+0x14560>
   25cc8:	str	r2, [r0, r2, lsl #2]
   25ccc:	add	r2, r2, #1
   25cd0:	cmp	r1, r2
   25cd4:	bne	25cc8 <__assert_fail@plt+0x14894>
   25cd8:	ldr	r2, [r9, #52]	; 0x34
   25cdc:	ldrb	r1, [r2, #24]
   25ce0:	cmp	r1, #17
   25ce4:	beq	25d10 <__assert_fail@plt+0x148dc>
   25ce8:	cmp	r1, #4
   25cec:	bne	25d60 <__assert_fail@plt+0x1492c>
   25cf0:	ldr	r1, [r2, #20]
   25cf4:	mov	r3, #1
   25cf8:	ldr	r0, [r0, r1, lsl #2]
   25cfc:	str	r0, [r2, #20]
   25d00:	ldr	r1, [r9, #80]	; 0x50
   25d04:	orr	r0, r1, r3, lsl r0
   25d08:	str	r0, [r9, #80]	; 0x50
   25d0c:	b	25d60 <__assert_fail@plt+0x1492c>
   25d10:	ldr	r1, [r2, #4]
   25d14:	cmp	r1, #0
   25d18:	beq	25d60 <__assert_fail@plt+0x1492c>
   25d1c:	ldrb	r3, [r1, #24]
   25d20:	cmp	r3, #17
   25d24:	bne	25d60 <__assert_fail@plt+0x1492c>
   25d28:	ldr	r3, [r1, #4]
   25d2c:	ldr	r1, [r1, #20]
   25d30:	cmp	r3, #0
   25d34:	str	r3, [r2, #4]
   25d38:	strne	r2, [r3]
   25d3c:	cmp	r1, #31
   25d40:	ldr	r3, [r2, #20]
   25d44:	ldr	r3, [r0, r3, lsl #2]
   25d48:	str	r3, [r0, r1, lsl #2]
   25d4c:	bgt	25d60 <__assert_fail@plt+0x1492c>
   25d50:	ldr	r0, [r9, #80]	; 0x50
   25d54:	mov	r3, #1
   25d58:	bic	r0, r0, r3, lsl r1
   25d5c:	b	25d08 <__assert_fail@plt+0x148d4>
   25d60:	mov	r0, #1
   25d64:	ldr	r7, [r2, #4]
   25d68:	cmp	r7, #0
   25d6c:	bne	25d9c <__assert_fail@plt+0x14968>
   25d70:	mov	r3, #0
   25d74:	ldr	r7, [r2, #8]
   25d78:	mov	r1, r2
   25d7c:	cmp	r7, r3
   25d80:	cmpne	r7, #0
   25d84:	bne	25d9c <__assert_fail@plt+0x14968>
   25d88:	ldr	r2, [r1]
   25d8c:	mov	r3, r1
   25d90:	cmp	r2, #0
   25d94:	bne	25d74 <__assert_fail@plt+0x14940>
   25d98:	b	25e40 <__assert_fail@plt+0x14a0c>
   25d9c:	ldrb	r1, [r7, #24]
   25da0:	cmp	r1, #17
   25da4:	beq	25de4 <__assert_fail@plt+0x149b0>
   25da8:	cmp	r1, #4
   25dac:	mov	r2, r7
   25db0:	bne	25d64 <__assert_fail@plt+0x14930>
   25db4:	ldr	r1, [r9, #132]	; 0x84
   25db8:	mov	r2, r7
   25dbc:	cmp	r1, #0
   25dc0:	beq	25d64 <__assert_fail@plt+0x14930>
   25dc4:	ldr	r2, [r7, #20]
   25dc8:	ldr	r1, [r1, r2, lsl #2]
   25dcc:	str	r1, [r7, #20]
   25dd0:	ldr	r2, [r9, #80]	; 0x50
   25dd4:	orr	r1, r2, r0, lsl r1
   25dd8:	str	r1, [r9, #80]	; 0x50
   25ddc:	mov	r2, r7
   25de0:	b	25d64 <__assert_fail@plt+0x14930>
   25de4:	ldr	r3, [r7, #4]
   25de8:	mov	r2, r7
   25dec:	cmp	r3, #0
   25df0:	beq	25d64 <__assert_fail@plt+0x14930>
   25df4:	ldrb	r1, [r3, #24]
   25df8:	mov	r2, r7
   25dfc:	cmp	r1, #17
   25e00:	bne	25d64 <__assert_fail@plt+0x14930>
   25e04:	ldr	r1, [r3, #4]
   25e08:	ldr	r3, [r3, #20]
   25e0c:	cmp	r1, #0
   25e10:	str	r1, [r7, #4]
   25e14:	strne	r7, [r1]
   25e18:	cmp	r3, #31
   25e1c:	ldr	r1, [r7, #20]
   25e20:	ldr	r2, [r9, #132]	; 0x84
   25e24:	ldr	r1, [r2, r1, lsl #2]
   25e28:	str	r1, [r2, r3, lsl #2]
   25e2c:	mov	r2, r7
   25e30:	bgt	25d64 <__assert_fail@plt+0x14930>
   25e34:	ldr	r1, [r9, #80]	; 0x50
   25e38:	bic	r1, r1, r0, lsl r3
   25e3c:	b	25dd8 <__assert_fail@plt+0x149a4>
   25e40:	ldr	r1, [sl, #24]
   25e44:	cmp	r1, #0
   25e48:	beq	25e70 <__assert_fail@plt+0x14a3c>
   25e4c:	ldr	r0, [r9, #132]	; 0x84
   25e50:	mov	r2, #0
   25e54:	ldr	r3, [r0, r2, lsl #2]
   25e58:	cmp	r2, r3
   25e5c:	bne	25e90 <__assert_fail@plt+0x14a5c>
   25e60:	add	r2, r2, #1
   25e64:	cmp	r1, r2
   25e68:	bne	25e54 <__assert_fail@plt+0x14a20>
   25e6c:	b	25e98 <__assert_fail@plt+0x14a64>
   25e70:	ldr	r0, [r9, #132]	; 0x84
   25e74:	b	25e98 <__assert_fail@plt+0x14a64>
   25e78:	nop	{0}
   25e7c:	nop	{0}
   25e80:	andeq	r0, r0, r0
   25e84:	andeq	r0, r0, r1
   25e88:	andeq	r0, r0, r2
   25e8c:	andeq	r0, r0, r3
   25e90:	cmp	r1, r2
   25e94:	bne	25ea4 <__assert_fail@plt+0x14a70>
   25e98:	bl	138e8 <__assert_fail@plt+0x24b4>
   25e9c:	mov	r0, #0
   25ea0:	str	r0, [r9, #132]	; 0x84
   25ea4:	ldr	r0, [r9, #52]	; 0x34
   25ea8:	mov	r7, #0
   25eac:	sub	r8, fp, #48	; 0x30
   25eb0:	mov	r4, r0
   25eb4:	ldr	r0, [r0, #4]
   25eb8:	cmp	r0, #0
   25ebc:	bne	25eb0 <__assert_fail@plt+0x14a7c>
   25ec0:	ldr	r0, [r4, #8]
   25ec4:	cmp	r0, #0
   25ec8:	bne	25eb0 <__assert_fail@plt+0x14a7c>
   25ecc:	mov	r2, #0
   25ed0:	cmp	r2, #0
   25ed4:	str	r7, [fp, #-48]	; 0xffffffd0
   25ed8:	beq	25f00 <__assert_fail@plt+0x14acc>
   25edc:	ldrb	r0, [r2, #24]
   25ee0:	cmp	r0, #17
   25ee4:	bne	25f00 <__assert_fail@plt+0x14acc>
   25ee8:	mov	r0, r8
   25eec:	mov	r1, sl
   25ef0:	bl	2f81c <__assert_fail@plt+0x1e3e8>
   25ef4:	cmp	r0, #0
   25ef8:	str	r0, [r4, #4]
   25efc:	strne	r4, [r0]
   25f00:	ldr	r2, [r4, #8]
   25f04:	cmp	r2, #0
   25f08:	beq	25f30 <__assert_fail@plt+0x14afc>
   25f0c:	ldrb	r0, [r2, #24]
   25f10:	cmp	r0, #17
   25f14:	bne	25f30 <__assert_fail@plt+0x14afc>
   25f18:	mov	r0, r8
   25f1c:	mov	r1, sl
   25f20:	bl	2f81c <__assert_fail@plt+0x1e3e8>
   25f24:	cmp	r0, #0
   25f28:	str	r0, [r4, #8]
   25f2c:	strne	r4, [r0]
   25f30:	ldr	r0, [fp, #-48]	; 0xffffffd0
   25f34:	cmp	r0, #0
   25f38:	bne	25a74 <__assert_fail@plt+0x14640>
   25f3c:	ldr	r1, [r4]
   25f40:	cmp	r1, #0
   25f44:	beq	25f64 <__assert_fail@plt+0x14b30>
   25f48:	ldr	r0, [r1, #8]
   25f4c:	cmp	r0, r4
   25f50:	cmpne	r0, #0
   25f54:	bne	25eb0 <__assert_fail@plt+0x14a7c>
   25f58:	ldr	r2, [r1, #4]
   25f5c:	mov	r4, r1
   25f60:	b	25ed0 <__assert_fail@plt+0x14a9c>
   25f64:	ldr	r0, [r9, #52]	; 0x34
   25f68:	mov	r4, r0
   25f6c:	ldr	r0, [r0, #4]
   25f70:	cmp	r0, #0
   25f74:	bne	25f68 <__assert_fail@plt+0x14b34>
   25f78:	ldr	r0, [r4, #8]
   25f7c:	cmp	r0, #0
   25f80:	bne	25f68 <__assert_fail@plt+0x14b34>
   25f84:	ldr	r2, [r4, #24]
   25f88:	uxtb	r0, r2
   25f8c:	cmp	r0, #16
   25f90:	bne	25fac <__assert_fail@plt+0x14b78>
   25f94:	ldr	r0, [r4, #4]
   25f98:	ldr	r1, [r0, #12]
   25f9c:	str	r1, [r4, #12]
   25fa0:	ldr	r0, [r0, #28]
   25fa4:	str	r0, [r4, #28]
   25fa8:	b	25fec <__assert_fail@plt+0x14bb8>
   25fac:	str	r4, [r4, #12]
   25fb0:	mov	r0, r9
   25fb4:	ldr	r1, [r4, #20]
   25fb8:	bl	2fad8 <__assert_fail@plt+0x1e6a4>
   25fbc:	cmn	r0, #1
   25fc0:	str	r0, [r4, #28]
   25fc4:	beq	25a70 <__assert_fail@plt+0x1463c>
   25fc8:	ldrb	r1, [r4, #24]
   25fcc:	cmp	r1, #12
   25fd0:	bne	25fec <__assert_fail@plt+0x14bb8>
   25fd4:	ldr	r1, [r9]
   25fd8:	ldr	r2, [r4, #20]
   25fdc:	add	r0, r1, r0, lsl #3
   25fe0:	ldr	r1, [r0, #4]
   25fe4:	bfi	r1, r2, #8, #10
   25fe8:	str	r1, [r0, #4]
   25fec:	ldr	r1, [r4]
   25ff0:	cmp	r1, #0
   25ff4:	beq	26018 <__assert_fail@plt+0x14be4>
   25ff8:	ldr	r0, [r1, #8]
   25ffc:	cmp	r0, r4
   26000:	mov	r4, r1
   26004:	beq	25f84 <__assert_fail@plt+0x14b50>
   26008:	cmp	r0, #0
   2600c:	mov	r4, r1
   26010:	beq	25f84 <__assert_fail@plt+0x14b50>
   26014:	b	25f68 <__assert_fail@plt+0x14b34>
   26018:	ldr	r4, [r9, #52]	; 0x34
   2601c:	ldrb	r0, [r4, #24]
   26020:	cmp	r0, #16
   26024:	beq	2603c <__assert_fail@plt+0x14c08>
   26028:	cmp	r0, #11
   2602c:	bne	2604c <__assert_fail@plt+0x14c18>
   26030:	ldr	r0, [r4, #4]
   26034:	str	r4, [r0, #16]
   26038:	b	26070 <__assert_fail@plt+0x14c3c>
   2603c:	ldmib	r4, {r0, r1}
   26040:	ldr	r2, [r1, #12]
   26044:	str	r2, [r0, #16]
   26048:	b	26068 <__assert_fail@plt+0x14c34>
   2604c:	ldr	r0, [r4, #4]
   26050:	cmp	r0, #0
   26054:	ldrne	r1, [r4, #16]
   26058:	strne	r1, [r0, #16]
   2605c:	ldr	r1, [r4, #8]
   26060:	cmp	r1, #0
   26064:	beq	26070 <__assert_fail@plt+0x14c3c>
   26068:	ldr	r2, [r4, #16]
   2606c:	str	r2, [r1, #16]
   26070:	mov	r1, r4
   26074:	cmp	r0, #0
   26078:	bne	26090 <__assert_fail@plt+0x14c5c>
   2607c:	b	260e4 <__assert_fail@plt+0x14cb0>
   26080:	ldr	r0, [r1, #4]
   26084:	str	r1, [r0, #16]
   26088:	cmp	r0, #0
   2608c:	beq	260e4 <__assert_fail@plt+0x14cb0>
   26090:	mov	r1, r0
   26094:	ldrb	r0, [r0, #24]
   26098:	cmp	r0, #16
   2609c:	beq	260c8 <__assert_fail@plt+0x14c94>
   260a0:	cmp	r0, #11
   260a4:	beq	26080 <__assert_fail@plt+0x14c4c>
   260a8:	ldr	r0, [r1, #4]
   260ac:	cmp	r0, #0
   260b0:	ldrne	r2, [r1, #16]
   260b4:	strne	r2, [r0, #16]
   260b8:	ldr	r2, [r1, #8]
   260bc:	cmp	r2, #0
   260c0:	beq	26088 <__assert_fail@plt+0x14c54>
   260c4:	b	260d4 <__assert_fail@plt+0x14ca0>
   260c8:	ldmib	r1, {r0, r2}
   260cc:	ldr	r3, [r2, #12]
   260d0:	str	r3, [r0, #16]
   260d4:	ldr	r3, [r1, #16]
   260d8:	str	r3, [r2, #16]
   260dc:	cmp	r0, #0
   260e0:	bne	26090 <__assert_fail@plt+0x14c5c>
   260e4:	mov	r3, #0
   260e8:	ldr	r0, [r1, #8]
   260ec:	mov	r2, r1
   260f0:	cmp	r0, r3
   260f4:	cmpne	r0, #0
   260f8:	bne	26090 <__assert_fail@plt+0x14c5c>
   260fc:	ldr	r1, [r2]
   26100:	mov	r3, r2
   26104:	cmp	r1, #0
   26108:	bne	260e8 <__assert_fail@plt+0x14cb4>
   2610c:	mov	r0, r9
   26110:	mov	r1, r4
   26114:	bl	2f680 <__assert_fail@plt+0x1e24c>
   26118:	cmp	r0, #0
   2611c:	beq	2613c <__assert_fail@plt+0x14d08>
   26120:	b	25a74 <__assert_fail@plt+0x14640>
   26124:	mov	r0, r9
   26128:	mov	r1, r7
   2612c:	bl	2f680 <__assert_fail@plt+0x1e24c>
   26130:	cmp	r0, #0
   26134:	mov	r4, r7
   26138:	bne	25a74 <__assert_fail@plt+0x14640>
   2613c:	ldr	r7, [r4, #4]
   26140:	cmp	r7, #0
   26144:	bne	26124 <__assert_fail@plt+0x14cf0>
   26148:	mov	r1, #0
   2614c:	ldr	r7, [r4, #8]
   26150:	mov	r0, r4
   26154:	cmp	r7, r1
   26158:	cmpne	r7, #0
   2615c:	bne	26124 <__assert_fail@plt+0x14cf0>
   26160:	ldr	r4, [r0]
   26164:	mov	r1, r0
   26168:	cmp	r4, #0
   2616c:	bne	2614c <__assert_fail@plt+0x14d18>
   26170:	mov	r5, #0
   26174:	sub	r4, fp, #48	; 0x30
   26178:	mov	r7, #0
   2617c:	b	261ac <__assert_fail@plt+0x14d78>
   26180:	mov	r1, r5
   26184:	ldr	r2, [r9, #8]
   26188:	add	r0, r7, #1
   2618c:	subs	r3, r0, r2
   26190:	mov	r7, r3
   26194:	movwne	r3, #1
   26198:	movne	r7, r0
   2619c:	tst	r1, #1
   261a0:	and	r5, r1, r3
   261a4:	cmpeq	r0, r2
   261a8:	beq	26208 <__assert_fail@plt+0x14dd4>
   261ac:	ldr	r0, [r9, #24]
   261b0:	add	r6, r7, r7, lsl #1
   261b4:	add	r0, r0, r6, lsl #2
   261b8:	ldr	r0, [r0, #4]
   261bc:	cmp	r0, #0
   261c0:	bne	26180 <__assert_fail@plt+0x14d4c>
   261c4:	mov	r0, r4
   261c8:	mov	r1, r9
   261cc:	mov	r2, r7
   261d0:	mov	r3, #1
   261d4:	bl	2fca8 <__assert_fail@plt+0x1e874>
   261d8:	cmp	r0, #0
   261dc:	bne	25a74 <__assert_fail@plt+0x14640>
   261e0:	ldr	r0, [r9, #24]
   261e4:	mov	r1, r5
   261e8:	add	r0, r0, r6, lsl #2
   261ec:	ldr	r0, [r0, #4]
   261f0:	cmp	r0, #0
   261f4:	bne	26184 <__assert_fail@plt+0x14d50>
   261f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   261fc:	bl	138e8 <__assert_fail@plt+0x24b4>
   26200:	mov	r1, #1
   26204:	b	26184 <__assert_fail@plt+0x14d50>
   26208:	ldrb	r1, [sl, #28]
   2620c:	str	sl, [sp, #12]
   26210:	tst	r1, #16
   26214:	bne	26234 <__assert_fail@plt+0x14e00>
   26218:	ldr	r1, [sp, #12]
   2621c:	ldr	r1, [r1, #24]
   26220:	cmp	r1, #0
   26224:	beq	26234 <__assert_fail@plt+0x14e00>
   26228:	ldrb	r1, [r9, #88]	; 0x58
   2622c:	tst	r1, #1
   26230:	bne	26240 <__assert_fail@plt+0x14e0c>
   26234:	ldr	r1, [r9, #76]	; 0x4c
   26238:	cmp	r1, #0
   2623c:	beq	26388 <__assert_fail@plt+0x14f54>
   26240:	add	r0, r0, r0, lsl #1
   26244:	lsl	r0, r0, #2
   26248:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2624c:	cmp	r0, #0
   26250:	str	r0, [r9, #28]
   26254:	beq	267c4 <__assert_fail@plt+0x15390>
   26258:	ldr	r1, [r9, #8]
   2625c:	cmp	r1, #0
   26260:	beq	26388 <__assert_fail@plt+0x14f54>
   26264:	mov	r1, #0
   26268:	str	r1, [r0]
   2626c:	str	r1, [r0, #4]
   26270:	str	r1, [r0, #8]
   26274:	ldr	r0, [r9, #8]
   26278:	cmp	r0, #2
   2627c:	bcc	262ac <__assert_fail@plt+0x14e78>
   26280:	mov	r2, #1
   26284:	mov	r3, #12
   26288:	ldr	r0, [r9, #28]
   2628c:	add	r2, r2, #1
   26290:	str	r1, [r0, r3]!
   26294:	add	r3, r3, #12
   26298:	str	r1, [r0, #4]
   2629c:	str	r1, [r0, #8]
   262a0:	ldr	r0, [r9, #8]
   262a4:	cmp	r2, r0
   262a8:	bcc	26288 <__assert_fail@plt+0x14e54>
   262ac:	cmp	r0, #0
   262b0:	beq	26388 <__assert_fail@plt+0x14f54>
   262b4:	ldr	ip, [r9, #24]
   262b8:	mov	r6, #0
   262bc:	b	262d0 <__assert_fail@plt+0x14e9c>
   262c0:	ldr	r0, [r9, #8]
   262c4:	add	r6, r6, #1
   262c8:	cmp	r6, r0
   262cc:	bcs	26388 <__assert_fail@plt+0x14f54>
   262d0:	add	lr, r6, r6, lsl #1
   262d4:	add	r2, ip, lr, lsl #2
   262d8:	ldr	r3, [r2, #4]
   262dc:	cmp	r3, #1
   262e0:	blt	262c4 <__assert_fail@plt+0x14e90>
   262e4:	ldr	r1, [r2, #8]
   262e8:	mov	r5, #0
   262ec:	str	lr, [sp, #24]
   262f0:	str	r1, [sp, #20]
   262f4:	b	26320 <__assert_fail@plt+0x14eec>
   262f8:	add	r0, r4, r0, lsl #2
   262fc:	ldr	r0, [r0, #8]
   26300:	add	r3, r2, #1
   26304:	add	r5, r5, #1
   26308:	str	r3, [r8]
   2630c:	str	r6, [r0, r2, lsl #2]
   26310:	add	r0, ip, lr, lsl #2
   26314:	ldr	r0, [r0, #4]
   26318:	cmp	r5, r0
   2631c:	bge	262c0 <__assert_fail@plt+0x14e8c>
   26320:	ldr	r0, [r1, r5, lsl #2]
   26324:	ldr	r4, [r9, #28]
   26328:	add	r0, r0, r0, lsl #1
   2632c:	mov	r3, r4
   26330:	ldr	r7, [r3, r0, lsl #2]!
   26334:	mov	r8, r3
   26338:	ldr	r2, [r8, #4]!
   2633c:	cmp	r7, r2
   26340:	bne	262f8 <__assert_fail@plt+0x14ec4>
   26344:	mov	r1, #2
   26348:	mov	sl, r9
   2634c:	add	r9, r4, r0, lsl #2
   26350:	add	r1, r1, r7, lsl #1
   26354:	str	r1, [r3]
   26358:	lsl	r1, r1, #2
   2635c:	ldr	r0, [r9, #8]!
   26360:	bl	38020 <__assert_fail@plt+0x26bec>
   26364:	cmp	r0, #0
   26368:	beq	267c4 <__assert_fail@plt+0x15390>
   2636c:	str	r0, [r9]
   26370:	ldr	lr, [sp, #24]
   26374:	ldr	r1, [sp, #20]
   26378:	mov	r9, sl
   2637c:	ldr	ip, [sl, #24]
   26380:	ldr	r2, [r8]
   26384:	b	26300 <__assert_fail@plt+0x14ecc>
   26388:	mov	r0, #0
   2638c:	ldr	sl, [sp, #12]
   26390:	str	r0, [fp, #-52]	; 0xffffffcc
   26394:	ldr	r0, [sp, #16]
   26398:	cmp	r0, #0
   2639c:	bne	264e4 <__assert_fail@plt+0x150b0>
   263a0:	ldr	r0, [sp, #28]
   263a4:	ldrb	r2, [r0, #88]	; 0x58
   263a8:	ands	r0, r2, #4
   263ac:	beq	264e4 <__assert_fail@plt+0x150b0>
   263b0:	ldr	r0, [sl, #20]
   263b4:	cmp	r0, #0
   263b8:	bne	264e4 <__assert_fail@plt+0x150b0>
   263bc:	ldr	r5, [sp, #28]
   263c0:	mov	r9, #0
   263c4:	ldr	r7, [r5, #8]
   263c8:	cmp	r7, #0
   263cc:	beq	263ec <__assert_fail@plt+0x14fb8>
   263d0:	ldr	r3, [r5]
   263d4:	mov	r8, #0
   263d8:	mov	ip, #1
   263dc:	mov	lr, #139	; 0x8b
   263e0:	mov	r6, #0
   263e4:	mov	r4, #0
   263e8:	b	2643c <__assert_fail@plt+0x15008>
   263ec:	mov	r8, #0
   263f0:	mov	r0, #1
   263f4:	and	r1, r2, #249	; 0xf9
   263f8:	str	r0, [r5, #92]	; 0x5c
   263fc:	ldr	r0, [r5, #76]	; 0x4c
   26400:	cmp	r0, #0
   26404:	movwgt	r9, #1
   26408:	orr	r0, r8, r9
   2640c:	and	r0, r0, #1
   26410:	orr	r0, r1, r0, lsl #1
   26414:	strb	r0, [r5, #88]	; 0x58
   26418:	b	264e4 <__assert_fail@plt+0x150b0>
   2641c:	ldrsb	r0, [r5]
   26420:	cmp	r0, #0
   26424:	mov	r0, #0
   26428:	movwmi	r0, #1
   2642c:	orr	r6, r6, r0
   26430:	add	r4, r4, #1
   26434:	cmp	r7, r4
   26438:	beq	267d4 <__assert_fail@plt+0x153a0>
   2643c:	add	r5, r3, r4, lsl #3
   26440:	ldrb	r1, [r5, #4]
   26444:	sub	r1, r1, #1
   26448:	cmp	r1, #11
   2644c:	bhi	26864 <__assert_fail@plt+0x15430>
   26450:	add	r0, pc, #0
   26454:	ldr	pc, [r0, r1, lsl #2]
   26458:	andeq	r6, r2, ip, lsl r4
   2645c:	andeq	r6, r2, r0, lsr r4
   26460:	andeq	r6, r2, r8, lsl #9
   26464:	andeq	r6, r2, r0, lsr r4
   26468:	ldrdeq	r6, [r2], -ip
   2646c:	andeq	r6, r2, r4, ror #9
   26470:	andeq	r6, r2, r4, ror #16
   26474:	andeq	r6, r2, r0, lsr r4
   26478:	andeq	r6, r2, r0, lsr r4
   2647c:	andeq	r6, r2, r0, lsr r4
   26480:	andeq	r6, r2, r0, lsr r4
   26484:			; <UNDEFINED> instruction: 0x000264bc
   26488:	ldr	r5, [r3, r4, lsl #3]
   2648c:	ldr	r0, [r5, #16]
   26490:	cmp	r0, #0
   26494:	bne	264e4 <__assert_fail@plt+0x150b0>
   26498:	ldr	r0, [r5, #20]
   2649c:	cmp	r0, #0
   264a0:	ldreq	r0, [r5, #24]
   264a4:	cmpeq	r0, #0
   264a8:	bne	264e4 <__assert_fail@plt+0x150b0>
   264ac:	ldr	r0, [r5, #28]
   264b0:	cmp	r0, #0
   264b4:	beq	26430 <__assert_fail@plt+0x14ffc>
   264b8:	b	264e4 <__assert_fail@plt+0x150b0>
   264bc:	ldr	r0, [r3, r4, lsl #3]
   264c0:	sub	r0, r0, #16
   264c4:	ror	r1, r0, #4
   264c8:	cmp	r1, #7
   264cc:	bhi	264e4 <__assert_fail@plt+0x150b0>
   264d0:	tst	lr, ip, lsl r1
   264d4:	bne	26430 <__assert_fail@plt+0x14ffc>
   264d8:	b	264e4 <__assert_fail@plt+0x150b0>
   264dc:	mov	r8, #1
   264e0:	b	26430 <__assert_fail@plt+0x14ffc>
   264e4:	ldr	lr, [sp, #28]
   264e8:	ldr	r1, [lr, #52]	; 0x34
   264ec:	ldr	r0, [lr, #24]
   264f0:	ldr	r1, [r1, #12]
   264f4:	ldr	r1, [r1, #28]
   264f8:	str	r1, [lr, #72]	; 0x48
   264fc:	add	r1, r1, r1, lsl #1
   26500:	add	r5, r0, r1, lsl #2
   26504:	mov	r4, r5
   26508:	ldr	r7, [r4, #4]!
   2650c:	str	r7, [fp, #-44]	; 0xffffffd4
   26510:	ldr	r0, [r4]
   26514:	cmp	r0, #1
   26518:	blt	26664 <__assert_fail@plt+0x15230>
   2651c:	lsl	r0, r7, #2
   26520:	str	r7, [fp, #-48]	; 0xffffffd0
   26524:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   26528:	cmp	r0, #0
   2652c:	str	r0, [fp, #-40]	; 0xffffffd8
   26530:	beq	2684c <__assert_fail@plt+0x15418>
   26534:	mov	r6, r0
   26538:	ldr	r0, [r4]
   2653c:	ldr	r1, [r5, #8]
   26540:	lsl	r2, r0, #2
   26544:	mov	r0, r6
   26548:	bl	111e8 <memcpy@plt>
   2654c:	ldr	lr, [sp, #28]
   26550:	mov	r0, #0
   26554:	cmp	r7, #1
   26558:	str	r0, [fp, #-32]	; 0xffffffe0
   2655c:	ldrge	r0, [lr, #76]	; 0x4c
   26560:	cmpge	r0, #1
   26564:	blt	26678 <__assert_fail@plt+0x15244>
   26568:	mov	r0, #0
   2656c:	sub	r8, fp, #48	; 0x30
   26570:	mov	r9, #1
   26574:	ldr	r1, [r6, r0, lsl #2]
   26578:	ldr	r2, [lr]
   2657c:	add	r3, r2, r1, lsl #3
   26580:	ldrb	r3, [r3, #4]
   26584:	cmp	r3, #4
   26588:	bne	26650 <__assert_fail@plt+0x1521c>
   2658c:	mov	r3, #0
   26590:	cmp	r7, #1
   26594:	bge	265a8 <__assert_fail@plt+0x15174>
   26598:	b	265cc <__assert_fail@plt+0x15198>
   2659c:	add	r3, r3, #1
   265a0:	cmp	r7, r3
   265a4:	beq	26650 <__assert_fail@plt+0x1521c>
   265a8:	ldr	r5, [r6, r3, lsl #2]
   265ac:	add	r4, r2, r5, lsl #3
   265b0:	ldrb	r4, [r4, #4]
   265b4:	cmp	r4, #9
   265b8:	bne	2659c <__assert_fail@plt+0x15168>
   265bc:	ldr	r4, [r2, r1, lsl #3]
   265c0:	ldr	r5, [r2, r5, lsl #3]
   265c4:	cmp	r5, r4
   265c8:	bne	2659c <__assert_fail@plt+0x15168>
   265cc:	cmp	r3, r7
   265d0:	beq	26650 <__assert_fail@plt+0x1521c>
   265d4:	ldr	r2, [lr, #20]
   265d8:	add	r1, r1, r1, lsl #1
   265dc:	cmp	r7, #1
   265e0:	add	r1, r2, r1, lsl #2
   265e4:	ldr	r1, [r1, #8]
   265e8:	ldr	ip, [r1]
   265ec:	blt	26628 <__assert_fail@plt+0x151f4>
   265f0:	mov	r2, #0
   265f4:	subs	r3, r7, #1
   265f8:	beq	2661c <__assert_fail@plt+0x151e8>
   265fc:	add	r5, r2, r3
   26600:	lsr	r4, r5, #1
   26604:	ldr	r1, [r6, r4, lsl #2]
   26608:	cmp	r1, ip
   2660c:	addlt	r2, r9, r5, lsr #1
   26610:	movge	r3, r4
   26614:	cmp	r2, r3
   26618:	bcc	265fc <__assert_fail@plt+0x151c8>
   2661c:	ldr	r1, [r6, r2, lsl #2]
   26620:	cmp	r1, ip
   26624:	beq	26650 <__assert_fail@plt+0x1521c>
   26628:	ldr	r0, [lr, #24]
   2662c:	add	r1, ip, ip, lsl #1
   26630:	add	r1, r0, r1, lsl #2
   26634:	mov	r0, r8
   26638:	bl	30358 <__assert_fail@plt+0x1ef24>
   2663c:	cmp	r0, #0
   26640:	bne	26740 <__assert_fail@plt+0x1530c>
   26644:	ldr	r7, [fp, #-44]	; 0xffffffd4
   26648:	ldr	lr, [sp, #28]
   2664c:	mov	r0, #0
   26650:	add	r0, r0, #1
   26654:	cmp	r0, r7
   26658:	bge	26678 <__assert_fail@plt+0x15244>
   2665c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   26660:	b	26574 <__assert_fail@plt+0x15140>
   26664:	mov	r0, #0
   26668:	str	r0, [fp, #-44]	; 0xffffffd4
   2666c:	str	r0, [fp, #-48]	; 0xffffffd0
   26670:	str	r0, [fp, #-40]	; 0xffffffd8
   26674:	str	r0, [fp, #-32]	; 0xffffffe0
   26678:	sub	r0, fp, #32
   2667c:	sub	r2, fp, #48	; 0x30
   26680:	mov	r1, lr
   26684:	mov	r3, #0
   26688:	bl	30658 <__assert_fail@plt+0x1f224>
   2668c:	ldr	r1, [sp, #28]
   26690:	cmp	r0, #0
   26694:	str	r0, [r1, #36]	; 0x24
   26698:	beq	26720 <__assert_fail@plt+0x152ec>
   2669c:	ldrsb	r2, [r0, #52]	; 0x34
   266a0:	cmn	r2, #1
   266a4:	ble	266b8 <__assert_fail@plt+0x15284>
   266a8:	str	r0, [r1, #40]	; 0x28
   266ac:	str	r0, [r1, #44]	; 0x2c
   266b0:	str	r0, [r1, #48]	; 0x30
   266b4:	b	26734 <__assert_fail@plt+0x15300>
   266b8:	sub	r4, fp, #32
   266bc:	sub	r6, fp, #48	; 0x30
   266c0:	mov	r3, #1
   266c4:	mov	r0, r4
   266c8:	mov	r2, r6
   266cc:	bl	30658 <__assert_fail@plt+0x1f224>
   266d0:	ldr	r1, [sp, #28]
   266d4:	mov	r2, r6
   266d8:	mov	r3, #2
   266dc:	str	r0, [r1, #40]	; 0x28
   266e0:	ldr	r1, [sp, #28]
   266e4:	mov	r0, r4
   266e8:	bl	30658 <__assert_fail@plt+0x1f224>
   266ec:	ldr	r1, [sp, #28]
   266f0:	mov	r2, r6
   266f4:	mov	r3, #6
   266f8:	str	r0, [r1, #44]	; 0x2c
   266fc:	ldr	r1, [sp, #28]
   26700:	mov	r0, r4
   26704:	bl	30658 <__assert_fail@plt+0x1f224>
   26708:	ldr	r2, [sp, #28]
   2670c:	str	r0, [r2, #48]	; 0x30
   26710:	ldr	r1, [r2, #40]	; 0x28
   26714:	cmp	r1, #0
   26718:	cmpne	r0, #0
   2671c:	bne	26728 <__assert_fail@plt+0x152f4>
   26720:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26724:	b	26740 <__assert_fail@plt+0x1530c>
   26728:	ldr	r0, [r2, #44]	; 0x2c
   2672c:	cmp	r0, #0
   26730:	beq	26720 <__assert_fail@plt+0x152ec>
   26734:	ldr	r0, [fp, #-40]	; 0xffffffd8
   26738:	bl	138e8 <__assert_fail@plt+0x24b4>
   2673c:	mov	r0, #0
   26740:	str	r0, [fp, #-52]	; 0xffffffcc
   26744:	ldr	r5, [sl]
   26748:	ldr	r0, [r5, #56]	; 0x38
   2674c:	cmp	r0, #0
   26750:	beq	26768 <__assert_fail@plt+0x15334>
   26754:	ldr	r4, [r0]
   26758:	bl	138e8 <__assert_fail@plt+0x24b4>
   2675c:	cmp	r4, #0
   26760:	mov	r0, r4
   26764:	bne	26754 <__assert_fail@plt+0x15320>
   26768:	mov	r0, #31
   2676c:	mov	r4, #0
   26770:	str	r0, [r5, #64]	; 0x40
   26774:	str	r4, [r5, #52]	; 0x34
   26778:	str	r4, [r5, #56]	; 0x38
   2677c:	ldr	r0, [r5, #16]
   26780:	bl	138e8 <__assert_fail@plt+0x24b4>
   26784:	str	r4, [r5, #16]
   26788:	ldr	r0, [sp, #40]	; 0x28
   2678c:	bl	138e8 <__assert_fail@plt+0x24b4>
   26790:	ldr	r0, [sp, #44]	; 0x2c
   26794:	bl	138e8 <__assert_fail@plt+0x24b4>
   26798:	ldrb	r0, [sp, #107]	; 0x6b
   2679c:	cmp	r0, #0
   267a0:	beq	267ac <__assert_fail@plt+0x15378>
   267a4:	ldr	r0, [sp, #36]	; 0x24
   267a8:	bl	138e8 <__assert_fail@plt+0x24b4>
   267ac:	ldr	r0, [fp, #-52]	; 0xffffffcc
   267b0:	cmp	r0, #0
   267b4:	bne	25c88 <__assert_fail@plt+0x14854>
   267b8:	mov	r0, r4
   267bc:	sub	sp, fp, #28
   267c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   267c4:	ldr	sl, [sp, #12]
   267c8:	mov	r0, #12
   267cc:	str	r0, [fp, #-52]	; 0xffffffcc
   267d0:	b	25c20 <__assert_fail@plt+0x147ec>
   267d4:	orr	r0, r6, r8
   267d8:	tst	r0, #1
   267dc:	beq	2683c <__assert_fail@plt+0x15408>
   267e0:	ldr	r5, [sp, #28]
   267e4:	mov	r2, #0
   267e8:	mov	r7, #7
   267ec:	add	r3, r3, r2, lsl #3
   267f0:	ldr	r6, [r3, #4]
   267f4:	uxtb	r1, r6
   267f8:	cmp	r1, #5
   267fc:	beq	2681c <__assert_fail@plt+0x153e8>
   26800:	cmp	r1, #1
   26804:	bne	26824 <__assert_fail@plt+0x153f0>
   26808:	ldrsb	r0, [r3]
   2680c:	cmn	r0, #1
   26810:	bicle	r0, r6, #2097152	; 0x200000
   26814:	strle	r0, [r3, #4]
   26818:	b	26824 <__assert_fail@plt+0x153f0>
   2681c:	bfi	r6, r7, #0, #8
   26820:	str	r6, [r3, #4]
   26824:	ldr	r0, [r5, #8]
   26828:	add	r2, r2, #1
   2682c:	cmp	r2, r0
   26830:	bcs	26844 <__assert_fail@plt+0x15410>
   26834:	ldr	r3, [r5]
   26838:	b	267ec <__assert_fail@plt+0x153b8>
   2683c:	ldr	r5, [sp, #28]
   26840:	b	263f0 <__assert_fail@plt+0x14fbc>
   26844:	ldrb	r2, [r5, #88]	; 0x58
   26848:	b	263f0 <__assert_fail@plt+0x14fbc>
   2684c:	mov	r0, #0
   26850:	str	r0, [fp, #-48]	; 0xffffffd0
   26854:	str	r0, [fp, #-44]	; 0xffffffd4
   26858:	mov	r0, #12
   2685c:	str	r0, [fp, #-32]	; 0xffffffe0
   26860:	b	26740 <__assert_fail@plt+0x1530c>
   26864:	bl	1141c <abort@plt>
   26868:	movw	r2, #45776	; 0xb2d0
   2686c:	movt	r2, #4
   26870:	ldr	r1, [r2]
   26874:	str	r0, [r2]
   26878:	mov	r0, r1
   2687c:	bx	lr
   26880:	push	{r4, r5, r6, sl, fp, lr}
   26884:	add	fp, sp, #16
   26888:	ldr	r5, [r0, #16]
   2688c:	ldr	r6, [r0]
   26890:	mov	r4, r0
   26894:	mov	r1, #0
   26898:	mov	r2, #256	; 0x100
   2689c:	mov	r0, r5
   268a0:	bl	11368 <memset@plt>
   268a4:	ldr	r1, [r6, #36]	; 0x24
   268a8:	mov	r0, r4
   268ac:	mov	r2, r5
   268b0:	bl	26918 <__assert_fail@plt+0x154e4>
   268b4:	ldr	r0, [r6, #36]	; 0x24
   268b8:	ldr	r1, [r6, #40]	; 0x28
   268bc:	cmp	r0, r1
   268c0:	beq	268d4 <__assert_fail@plt+0x154a0>
   268c4:	mov	r0, r4
   268c8:	mov	r2, r5
   268cc:	bl	26918 <__assert_fail@plt+0x154e4>
   268d0:	ldr	r0, [r6, #36]	; 0x24
   268d4:	ldr	r1, [r6, #44]	; 0x2c
   268d8:	cmp	r0, r1
   268dc:	beq	268f0 <__assert_fail@plt+0x154bc>
   268e0:	mov	r0, r4
   268e4:	mov	r2, r5
   268e8:	bl	26918 <__assert_fail@plt+0x154e4>
   268ec:	ldr	r0, [r6, #36]	; 0x24
   268f0:	ldr	r1, [r6, #48]	; 0x30
   268f4:	cmp	r0, r1
   268f8:	movne	r0, r4
   268fc:	movne	r2, r5
   26900:	blne	26918 <__assert_fail@plt+0x154e4>
   26904:	ldrb	r0, [r4, #28]
   26908:	orr	r0, r0, #8
   2690c:	strb	r0, [r4, #28]
   26910:	mov	r0, #0
   26914:	pop	{r4, r5, r6, sl, fp, pc}
   26918:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2691c:	add	fp, sp, #28
   26920:	sub	sp, sp, #316	; 0x13c
   26924:	ldr	sl, [r0]
   26928:	str	r0, [sp, #20]
   2692c:	mov	r3, #0
   26930:	str	r2, [sp, #36]	; 0x24
   26934:	ldr	r0, [sl, #92]	; 0x5c
   26938:	cmp	r0, #1
   2693c:	bne	2694c <__assert_fail@plt+0x15518>
   26940:	ldr	r0, [sp, #20]
   26944:	ldrb	r0, [r0, #14]
   26948:	ubfx	r3, r0, #6, #1
   2694c:	ldr	r0, [r1, #8]
   26950:	cmp	r0, #1
   26954:	blt	26d24 <__assert_fail@plt+0x158f0>
   26958:	add	r0, sp, #40	; 0x28
   2695c:	mov	r4, #1
   26960:	mov	r2, #0
   26964:	str	r3, [sp, #32]
   26968:	str	r1, [sp, #12]
   2696c:	str	sl, [sp, #24]
   26970:	add	r0, r0, #1
   26974:	str	r0, [sp, #8]
   26978:	movw	r0, #1
   2697c:	movt	r0, #32
   26980:	add	r0, r0, #254	; 0xfe
   26984:	str	r0, [sp, #4]
   26988:	b	269a8 <__assert_fail@plt+0x15574>
   2698c:	ldr	r3, [sp, #32]
   26990:	ldr	r1, [sp, #12]
   26994:	ldr	r2, [sp, #16]
   26998:	ldr	r0, [r1, #8]
   2699c:	add	r2, r2, #1
   269a0:	cmp	r2, r0
   269a4:	bge	26d24 <__assert_fail@plt+0x158f0>
   269a8:	ldr	r0, [r1, #12]
   269ac:	str	r2, [sp, #16]
   269b0:	ldr	r5, [r0, r2, lsl #2]
   269b4:	ldr	r0, [sl]
   269b8:	add	r1, r0, r5, lsl #3
   269bc:	ldrb	r6, [r1, #4]
   269c0:	sub	r1, r6, #1
   269c4:	cmp	r1, #6
   269c8:	bhi	26990 <__assert_fail@plt+0x1555c>
   269cc:	add	r2, pc, #0
   269d0:	ldr	pc, [r2, r1, lsl #2]
   269d4:	strdeq	r6, [r2], -r0
   269d8:	strdeq	r6, [r2], -ip
   269dc:	andeq	r6, r2, r4, lsl #22
   269e0:	muleq	r2, r0, r9
   269e4:	strdeq	r6, [r2], -ip
   269e8:	andeq	r6, r2, r0, lsr #23
   269ec:	strdeq	r6, [r2], -ip
   269f0:	ldrb	r6, [r0, r5, lsl #3]
   269f4:	ldr	r0, [sp, #36]	; 0x24
   269f8:	cmp	r3, #0
   269fc:	strb	r4, [r0, r6]
   26a00:	beq	26a1c <__assert_fail@plt+0x155e8>
   26a04:	bl	112d8 <__ctype_tolower_loc@plt>
   26a08:	ldr	r0, [r0]
   26a0c:	ldr	r3, [sp, #32]
   26a10:	ldr	r1, [sp, #36]	; 0x24
   26a14:	ldr	r0, [r0, r6, lsl #2]
   26a18:	strb	r4, [r1, r0]
   26a1c:	ldr	r0, [sp, #20]
   26a20:	ldrb	r0, [r0, #14]
   26a24:	tst	r0, #64	; 0x40
   26a28:	beq	26990 <__assert_fail@plt+0x1555c>
   26a2c:	ldr	r0, [sl, #92]	; 0x5c
   26a30:	cmp	r0, #2
   26a34:	blt	26990 <__assert_fail@plt+0x1555c>
   26a38:	ldr	r0, [sl]
   26a3c:	add	r1, r5, #1
   26a40:	ldr	r7, [sp, #4]
   26a44:	movw	r6, #1
   26a48:	add	r8, sp, #40	; 0x28
   26a4c:	mov	ip, #0
   26a50:	sub	r9, fp, #48	; 0x30
   26a54:	movt	r6, #32
   26a58:	ldrb	r0, [r0, r5, lsl #3]
   26a5c:	strb	r0, [sp, #40]	; 0x28
   26a60:	ldr	r0, [sl, #8]
   26a64:	cmp	r1, r0
   26a68:	ldr	r0, [sp, #8]
   26a6c:	bcs	26aac <__assert_fail@plt+0x15678>
   26a70:	ldr	r0, [sp, #8]
   26a74:	ldr	r1, [sl]
   26a78:	add	r1, r1, r5, lsl #3
   26a7c:	ldr	r2, [r1, #12]
   26a80:	and	r2, r2, r7
   26a84:	cmp	r2, r6
   26a88:	bne	26aac <__assert_fail@plt+0x15678>
   26a8c:	ldrb	r1, [r1, #8]
   26a90:	add	r3, r5, #2
   26a94:	strb	r1, [r0], #1
   26a98:	add	r1, r5, #1
   26a9c:	ldr	r2, [sl, #8]
   26aa0:	mov	r5, r1
   26aa4:	cmp	r3, r2
   26aa8:	bcc	26a74 <__assert_fail@plt+0x15640>
   26aac:	sub	r5, r0, r8
   26ab0:	sub	r0, fp, #36	; 0x24
   26ab4:	mov	r1, r8
   26ab8:	mov	r3, r9
   26abc:	str	ip, [fp, #-44]	; 0xffffffd4
   26ac0:	str	ip, [fp, #-48]	; 0xffffffd0
   26ac4:	mov	r2, r5
   26ac8:	bl	38444 <__assert_fail@plt+0x27010>
   26acc:	cmp	r0, r5
   26ad0:	bne	2698c <__assert_fail@plt+0x15558>
   26ad4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   26ad8:	bl	11200 <towlower@plt>
   26adc:	mov	r1, r0
   26ae0:	mov	r0, r8
   26ae4:	mov	r2, r9
   26ae8:	bl	11164 <wcrtomb@plt>
   26aec:	cmn	r0, #1
   26af0:	beq	2698c <__assert_fail@plt+0x15558>
   26af4:	ldrb	r0, [sp, #40]	; 0x28
   26af8:	ldr	r1, [sp, #36]	; 0x24
   26afc:	strb	r4, [r1, r0]
   26b00:	b	2698c <__assert_fail@plt+0x15558>
   26b04:	mov	r7, #0
   26b08:	mov	r6, #0
   26b0c:	str	r5, [sp, #28]
   26b10:	ldr	r0, [r0, r5, lsl #3]
   26b14:	ldr	r1, [sp, #36]	; 0x24
   26b18:	lsl	sl, r7, #2
   26b1c:	mov	r8, #0
   26b20:	add	r9, r1, r7
   26b24:	ldr	r5, [r0, r6, lsl #2]
   26b28:	b	26b54 <__assert_fail@plt+0x15720>
   26b2c:	bl	112d8 <__ctype_tolower_loc@plt>
   26b30:	ldr	r0, [r0]
   26b34:	ldr	r3, [sp, #32]
   26b38:	add	r0, r0, sl
   26b3c:	ldr	r0, [r0, r8, lsl #2]
   26b40:	ldr	r1, [sp, #36]	; 0x24
   26b44:	strb	r4, [r1, r0]
   26b48:	add	r8, r8, #1
   26b4c:	cmp	r8, #32
   26b50:	beq	26b80 <__assert_fail@plt+0x1574c>
   26b54:	tst	r5, r4, lsl r8
   26b58:	strbne	r4, [r9, r8]
   26b5c:	cmpne	r3, #0
   26b60:	beq	26b48 <__assert_fail@plt+0x15714>
   26b64:	add	r0, r7, r8
   26b68:	add	r0, r0, #128	; 0x80
   26b6c:	lsr	r0, r0, #7
   26b70:	cmp	r0, #2
   26b74:	bls	26b2c <__assert_fail@plt+0x156f8>
   26b78:	add	r0, r7, r8
   26b7c:	b	26b40 <__assert_fail@plt+0x1570c>
   26b80:	ldr	sl, [sp, #24]
   26b84:	ldr	r5, [sp, #28]
   26b88:	add	r6, r6, #1
   26b8c:	cmp	r6, #8
   26b90:	beq	26990 <__assert_fail@plt+0x1555c>
   26b94:	ldr	r0, [sl]
   26b98:	add	r7, r7, r8
   26b9c:	b	26b10 <__assert_fail@plt+0x156dc>
   26ba0:	ldr	r6, [r0, r5, lsl #3]
   26ba4:	ldr	r0, [sl, #92]	; 0x5c
   26ba8:	cmp	r0, #2
   26bac:	blt	26c28 <__assert_fail@plt+0x157f4>
   26bb0:	ldr	r0, [r6, #36]	; 0x24
   26bb4:	cmp	r0, #0
   26bb8:	bne	26bd4 <__assert_fail@plt+0x157a0>
   26bbc:	ldrb	r0, [r6, #16]
   26bc0:	tst	r0, #1
   26bc4:	bne	26bd4 <__assert_fail@plt+0x157a0>
   26bc8:	ldr	r0, [r6, #32]
   26bcc:	cmp	r0, #0
   26bd0:	beq	26c28 <__assert_fail@plt+0x157f4>
   26bd4:	mov	r7, #0
   26bd8:	add	r8, sp, #40	; 0x28
   26bdc:	sub	r6, fp, #48	; 0x30
   26be0:	strb	r7, [fp, #-48]	; 0xffffffd0
   26be4:	mov	r0, #0
   26be8:	mov	r1, r6
   26bec:	mov	r2, #1
   26bf0:	mov	r3, r8
   26bf4:	str	r7, [sp, #44]	; 0x2c
   26bf8:	str	r7, [sp, #40]	; 0x28
   26bfc:	bl	38444 <__assert_fail@plt+0x27010>
   26c00:	cmn	r0, #2
   26c04:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   26c08:	ldreq	r0, [sp, #36]	; 0x24
   26c0c:	strbeq	r4, [r0, r1]
   26c10:	add	r0, r1, #1
   26c14:	uxtb	r1, r0
   26c18:	strb	r0, [fp, #-48]	; 0xffffffd0
   26c1c:	cmp	r1, r0
   26c20:	beq	26be4 <__assert_fail@plt+0x157b0>
   26c24:	b	2698c <__assert_fail@plt+0x15558>
   26c28:	ldr	r0, [r6, #20]
   26c2c:	cmp	r0, #1
   26c30:	blt	26990 <__assert_fail@plt+0x1555c>
   26c34:	mov	r9, #0
   26c38:	b	26c4c <__assert_fail@plt+0x15818>
   26c3c:	ldr	r0, [r6, #20]
   26c40:	add	r9, r9, #1
   26c44:	cmp	r9, r0
   26c48:	bge	26990 <__assert_fail@plt+0x1555c>
   26c4c:	mov	r0, #0
   26c50:	add	r8, sp, #40	; 0x28
   26c54:	sub	r2, fp, #48	; 0x30
   26c58:	str	r0, [fp, #-44]	; 0xffffffd4
   26c5c:	str	r0, [fp, #-48]	; 0xffffffd0
   26c60:	ldr	r0, [r6]
   26c64:	ldr	r1, [r0, r9, lsl #2]
   26c68:	mov	r0, r8
   26c6c:	bl	11164 <wcrtomb@plt>
   26c70:	ldr	r3, [sp, #32]
   26c74:	cmn	r0, #1
   26c78:	beq	26ca8 <__assert_fail@plt+0x15874>
   26c7c:	ldrb	r7, [sp, #40]	; 0x28
   26c80:	ldr	r0, [sp, #36]	; 0x24
   26c84:	cmp	r3, #0
   26c88:	strb	r4, [r0, r7]
   26c8c:	beq	26ca8 <__assert_fail@plt+0x15874>
   26c90:	bl	112d8 <__ctype_tolower_loc@plt>
   26c94:	ldr	r0, [r0]
   26c98:	ldr	r3, [sp, #32]
   26c9c:	ldr	r1, [sp, #36]	; 0x24
   26ca0:	ldr	r0, [r0, r7, lsl #2]
   26ca4:	strb	r4, [r1, r0]
   26ca8:	ldr	r0, [sp, #20]
   26cac:	ldrb	r0, [r0, #14]
   26cb0:	tst	r0, #64	; 0x40
   26cb4:	beq	26c3c <__assert_fail@plt+0x15808>
   26cb8:	ldr	r0, [sl, #92]	; 0x5c
   26cbc:	cmp	r0, #2
   26cc0:	blt	26c3c <__assert_fail@plt+0x15808>
   26cc4:	ldr	r0, [r6]
   26cc8:	ldr	r0, [r0, r9, lsl #2]
   26ccc:	bl	11200 <towlower@plt>
   26cd0:	mov	r1, r0
   26cd4:	mov	r0, r8
   26cd8:	sub	r2, fp, #48	; 0x30
   26cdc:	bl	11164 <wcrtomb@plt>
   26ce0:	ldr	r3, [sp, #32]
   26ce4:	cmn	r0, #1
   26ce8:	beq	26c3c <__assert_fail@plt+0x15808>
   26cec:	ldrb	r0, [sp, #40]	; 0x28
   26cf0:	ldr	r1, [sp, #36]	; 0x24
   26cf4:	strb	r4, [r1, r0]
   26cf8:	b	26c3c <__assert_fail@plt+0x15808>
   26cfc:	ldr	r0, [sp, #36]	; 0x24
   26d00:	mov	r1, #1
   26d04:	mov	r2, #256	; 0x100
   26d08:	bl	11368 <memset@plt>
   26d0c:	cmp	r6, #2
   26d10:	bne	26d24 <__assert_fail@plt+0x158f0>
   26d14:	ldr	r1, [sp, #20]
   26d18:	ldrb	r0, [r1, #28]
   26d1c:	orr	r0, r0, #1
   26d20:	strb	r0, [r1, #28]
   26d24:	sub	sp, fp, #28
   26d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26d2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   26d30:	add	fp, sp, #24
   26d34:	mov	r4, r0
   26d38:	mov	r0, #0
   26d3c:	mov	r6, r2
   26d40:	mov	r8, r1
   26d44:	str	r0, [r4]
   26d48:	str	r0, [r4, #4]
   26d4c:	str	r0, [r4, #8]
   26d50:	mov	r0, #256	; 0x100
   26d54:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   26d58:	cmp	r0, #0
   26d5c:	str	r0, [r4, #16]
   26d60:	beq	26e10 <__assert_fail@plt+0x159dc>
   26d64:	movw	r0, #45820	; 0xb2fc
   26d68:	tst	r6, #1
   26d6c:	and	r1, r6, #2
   26d70:	movt	r0, #3
   26d74:	movweq	r0, #710	; 0x2c6
   26d78:	movteq	r0, #257	; 0x101
   26d7c:	tst	r6, #4
   26d80:	orr	r5, r0, r1, lsl #21
   26d84:	bne	26d98 <__assert_fail@plt+0x15964>
   26d88:	ldrb	r0, [r4, #28]
   26d8c:	and	r0, r0, #127	; 0x7f
   26d90:	strb	r0, [r4, #28]
   26d94:	b	26db8 <__assert_fail@plt+0x15984>
   26d98:	ldrb	r0, [r4, #28]
   26d9c:	mvn	r1, #127	; 0x7f
   26da0:	orr	r0, r0, r1
   26da4:	movw	r1, #45758	; 0xb2be
   26da8:	movt	r1, #323	; 0x143
   26dac:	strb	r0, [r4, #28]
   26db0:	and	r1, r5, r1
   26db4:	orr	r5, r1, #256	; 0x100
   26db8:	and	r1, r6, #8
   26dbc:	and	r0, r0, #239	; 0xef
   26dc0:	mov	r7, #0
   26dc4:	orr	r0, r0, r1, lsl #1
   26dc8:	str	r7, [r4, #20]
   26dcc:	strb	r0, [r4, #28]
   26dd0:	mov	r0, r8
   26dd4:	bl	1132c <strlen@plt>
   26dd8:	mov	r2, r0
   26ddc:	mov	r0, r4
   26de0:	mov	r1, r8
   26de4:	mov	r3, r5
   26de8:	bl	25370 <__assert_fail@plt+0x13f3c>
   26dec:	cmp	r0, #16
   26df0:	mov	r5, r0
   26df4:	movweq	r5, #8
   26df8:	cmp	r5, #0
   26dfc:	bne	26e1c <__assert_fail@plt+0x159e8>
   26e00:	mov	r0, r4
   26e04:	bl	26880 <__assert_fail@plt+0x1544c>
   26e08:	mov	r0, r7
   26e0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   26e10:	mov	r7, #12
   26e14:	mov	r0, r7
   26e18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   26e1c:	ldr	r0, [r4, #16]
   26e20:	bl	138e8 <__assert_fail@plt+0x24b4>
   26e24:	mov	r0, r5
   26e28:	str	r7, [r4, #16]
   26e2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   26e30:	push	{r4, r5, r6, r7, fp, lr}
   26e34:	add	fp, sp, #16
   26e38:	cmp	r0, #17
   26e3c:	bcs	26eb0 <__assert_fail@plt+0x15a7c>
   26e40:	movw	r1, #42856	; 0xa768
   26e44:	mov	r4, r2
   26e48:	mov	r2, #5
   26e4c:	mov	r5, r3
   26e50:	movt	r1, #3
   26e54:	ldr	r0, [r1, r0, lsl #2]
   26e58:	movw	r1, #42472	; 0xa5e8
   26e5c:	movt	r1, #3
   26e60:	add	r1, r1, r0
   26e64:	mov	r0, #0
   26e68:	bl	11218 <dcgettext@plt>
   26e6c:	mov	r6, r0
   26e70:	bl	1132c <strlen@plt>
   26e74:	add	r7, r0, #1
   26e78:	cmp	r5, #0
   26e7c:	beq	26e98 <__assert_fail@plt+0x15a64>
   26e80:	cmp	r7, r5
   26e84:	mov	r2, r7
   26e88:	bhi	26ea0 <__assert_fail@plt+0x15a6c>
   26e8c:	mov	r0, r4
   26e90:	mov	r1, r6
   26e94:	bl	111e8 <memcpy@plt>
   26e98:	mov	r0, r7
   26e9c:	pop	{r4, r5, r6, r7, fp, pc}
   26ea0:	sub	r2, r5, #1
   26ea4:	mov	r0, #0
   26ea8:	strb	r0, [r4, r2]
   26eac:	b	26e8c <__assert_fail@plt+0x15a58>
   26eb0:	bl	1141c <abort@plt>
   26eb4:	push	{r4, r5, fp, lr}
   26eb8:	add	fp, sp, #8
   26ebc:	ldr	r5, [r0]
   26ec0:	mov	r4, r0
   26ec4:	cmp	r5, #0
   26ec8:	beq	26ef4 <__assert_fail@plt+0x15ac0>
   26ecc:	movw	r0, #0
   26ed0:	movw	r1, #0
   26ed4:	movt	r0, #0
   26ed8:	movt	r1, #0
   26edc:	orrs	r0, r1, r0
   26ee0:	beq	26eec <__assert_fail@plt+0x15ab8>
   26ee4:	add	r0, r5, #136	; 0x88
   26ee8:	bl	11194 <pthread_mutex_destroy@plt>
   26eec:	mov	r0, r5
   26ef0:	bl	26f1c <__assert_fail@plt+0x15ae8>
   26ef4:	mov	r5, #0
   26ef8:	str	r5, [r4]
   26efc:	str	r5, [r4, #4]
   26f00:	ldr	r0, [r4, #16]
   26f04:	bl	138e8 <__assert_fail@plt+0x24b4>
   26f08:	str	r5, [r4, #16]
   26f0c:	ldr	r0, [r4, #20]
   26f10:	bl	138e8 <__assert_fail@plt+0x24b4>
   26f14:	str	r5, [r4, #20]
   26f18:	pop	{r4, r5, fp, pc}
   26f1c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   26f20:	add	fp, sp, #24
   26f24:	mov	r8, r0
   26f28:	ldr	r0, [r0]
   26f2c:	cmp	r0, #0
   26f30:	beq	26fb4 <__assert_fail@plt+0x15b80>
   26f34:	ldr	r1, [r8, #8]
   26f38:	cmp	r1, #0
   26f3c:	beq	26fb4 <__assert_fail@plt+0x15b80>
   26f40:	movw	r7, #255	; 0xff
   26f44:	mov	r6, #0
   26f48:	movt	r7, #4
   26f4c:	add	r1, r0, r6, lsl #3
   26f50:	ldr	r1, [r1, #4]
   26f54:	and	r1, r1, r7
   26f58:	cmp	r1, #3
   26f5c:	beq	26f90 <__assert_fail@plt+0x15b5c>
   26f60:	cmp	r1, #6
   26f64:	bne	26f9c <__assert_fail@plt+0x15b68>
   26f68:	ldr	r5, [r0, r6, lsl #3]
   26f6c:	ldr	r0, [r5]
   26f70:	bl	138e8 <__assert_fail@plt+0x24b4>
   26f74:	ldr	r0, [r5, #4]
   26f78:	bl	138e8 <__assert_fail@plt+0x24b4>
   26f7c:	ldr	r0, [r5, #8]
   26f80:	bl	138e8 <__assert_fail@plt+0x24b4>
   26f84:	ldr	r0, [r5, #12]
   26f88:	bl	138e8 <__assert_fail@plt+0x24b4>
   26f8c:	b	26f94 <__assert_fail@plt+0x15b60>
   26f90:	ldr	r5, [r0, r6, lsl #3]
   26f94:	mov	r0, r5
   26f98:	bl	138e8 <__assert_fail@plt+0x24b4>
   26f9c:	ldr	r0, [r8, #8]
   26fa0:	add	r6, r6, #1
   26fa4:	cmp	r6, r0
   26fa8:	bcs	26fb4 <__assert_fail@plt+0x15b80>
   26fac:	ldr	r0, [r8]
   26fb0:	b	26f4c <__assert_fail@plt+0x15b18>
   26fb4:	ldr	r0, [r8, #12]
   26fb8:	bl	138e8 <__assert_fail@plt+0x24b4>
   26fbc:	ldr	r0, [r8, #8]
   26fc0:	cmp	r0, #0
   26fc4:	beq	27028 <__assert_fail@plt+0x15bf4>
   26fc8:	mov	r5, #0
   26fcc:	mov	r6, #8
   26fd0:	b	26fe8 <__assert_fail@plt+0x15bb4>
   26fd4:	ldr	r0, [r8, #8]
   26fd8:	add	r5, r5, #1
   26fdc:	add	r6, r6, #12
   26fe0:	cmp	r5, r0
   26fe4:	bcs	27028 <__assert_fail@plt+0x15bf4>
   26fe8:	ldr	r0, [r8, #24]
   26fec:	cmp	r0, #0
   26ff0:	beq	26ffc <__assert_fail@plt+0x15bc8>
   26ff4:	ldr	r0, [r0, r6]
   26ff8:	bl	138e8 <__assert_fail@plt+0x24b4>
   26ffc:	ldr	r0, [r8, #28]
   27000:	cmp	r0, #0
   27004:	beq	27010 <__assert_fail@plt+0x15bdc>
   27008:	ldr	r0, [r0, r6]
   2700c:	bl	138e8 <__assert_fail@plt+0x24b4>
   27010:	ldr	r0, [r8, #20]
   27014:	cmp	r0, #0
   27018:	beq	26fd4 <__assert_fail@plt+0x15ba0>
   2701c:	ldr	r0, [r0, r6]
   27020:	bl	138e8 <__assert_fail@plt+0x24b4>
   27024:	b	26fd4 <__assert_fail@plt+0x15ba0>
   27028:	ldr	r0, [r8, #20]
   2702c:	bl	138e8 <__assert_fail@plt+0x24b4>
   27030:	ldr	r0, [r8, #24]
   27034:	bl	138e8 <__assert_fail@plt+0x24b4>
   27038:	ldr	r0, [r8, #28]
   2703c:	bl	138e8 <__assert_fail@plt+0x24b4>
   27040:	ldr	r0, [r8]
   27044:	bl	138e8 <__assert_fail@plt+0x24b4>
   27048:	ldr	r5, [r8, #32]
   2704c:	cmp	r5, #0
   27050:	beq	270b0 <__assert_fail@plt+0x15c7c>
   27054:	mov	r6, #0
   27058:	add	r0, r6, r6, lsl #1
   2705c:	ldr	r0, [r5, r0, lsl #2]!
   27060:	add	r7, r5, #8
   27064:	cmp	r0, #1
   27068:	blt	2708c <__assert_fail@plt+0x15c58>
   2706c:	mov	r4, #0
   27070:	ldr	r0, [r7]
   27074:	ldr	r0, [r0, r4, lsl #2]
   27078:	bl	2a698 <__assert_fail@plt+0x19264>
   2707c:	ldr	r0, [r5]
   27080:	add	r4, r4, #1
   27084:	cmp	r4, r0
   27088:	blt	27070 <__assert_fail@plt+0x15c3c>
   2708c:	ldr	r0, [r7]
   27090:	bl	138e8 <__assert_fail@plt+0x24b4>
   27094:	ldr	r0, [r8, #68]	; 0x44
   27098:	cmp	r6, r0
   2709c:	bcs	270ac <__assert_fail@plt+0x15c78>
   270a0:	ldr	r5, [r8, #32]
   270a4:	add	r6, r6, #1
   270a8:	b	27058 <__assert_fail@plt+0x15c24>
   270ac:	ldr	r5, [r8, #32]
   270b0:	mov	r0, r5
   270b4:	bl	138e8 <__assert_fail@plt+0x24b4>
   270b8:	ldr	r0, [r8, #60]	; 0x3c
   270bc:	movw	r1, #42924	; 0xa7ac
   270c0:	movt	r1, #3
   270c4:	cmp	r0, r1
   270c8:	beq	270d0 <__assert_fail@plt+0x15c9c>
   270cc:	bl	138e8 <__assert_fail@plt+0x24b4>
   270d0:	ldr	r0, [r8, #132]	; 0x84
   270d4:	bl	138e8 <__assert_fail@plt+0x24b4>
   270d8:	mov	r0, r8
   270dc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   270e0:	b	138e8 <__assert_fail@plt+0x24b4>
   270e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   270e8:	add	fp, sp, #28
   270ec:	sub	sp, sp, #28
   270f0:	ldr	sl, [fp, #8]
   270f4:	mov	r7, #2
   270f8:	cmp	sl, #7
   270fc:	bhi	271d0 <__assert_fail@plt+0x15d9c>
   27100:	mov	r5, r0
   27104:	ldr	r0, [r0]
   27108:	mov	r6, r3
   2710c:	mov	r9, r2
   27110:	mov	r4, r1
   27114:	tst	sl, #4
   27118:	str	r0, [sp, #24]
   2711c:	bne	27134 <__assert_fail@plt+0x15d00>
   27120:	mov	r0, r4
   27124:	bl	1132c <strlen@plt>
   27128:	mov	r7, r0
   2712c:	mov	r8, #0
   27130:	b	2713c <__assert_fail@plt+0x15d08>
   27134:	ldr	r8, [r6]
   27138:	ldr	r7, [r6, #4]
   2713c:	movw	r0, #0
   27140:	movw	r1, #0
   27144:	movt	r0, #0
   27148:	movt	r1, #0
   2714c:	orrs	r0, r1, r0
   27150:	str	r0, [sp, #20]
   27154:	beq	27164 <__assert_fail@plt+0x15d30>
   27158:	ldr	r0, [sp, #24]
   2715c:	add	r0, r0, #136	; 0x88
   27160:	bl	111d0 <pthread_mutex_lock@plt>
   27164:	ldrb	r0, [r5, #28]
   27168:	tst	r0, #16
   2716c:	bne	27180 <__assert_fail@plt+0x15d4c>
   27170:	str	r7, [sp]
   27174:	stmib	sp, {r7, r9}
   27178:	str	r6, [sp, #12]
   2717c:	b	27194 <__assert_fail@plt+0x15d60>
   27180:	mov	r0, #0
   27184:	str	r7, [sp]
   27188:	str	r7, [sp, #4]
   2718c:	str	r0, [sp, #8]
   27190:	str	r0, [sp, #12]
   27194:	mov	r0, r5
   27198:	mov	r1, r4
   2719c:	mov	r2, r7
   271a0:	mov	r3, r8
   271a4:	str	sl, [sp, #16]
   271a8:	bl	271dc <__assert_fail@plt+0x15da8>
   271ac:	mov	r7, r0
   271b0:	ldr	r0, [sp, #20]
   271b4:	cmp	r0, #0
   271b8:	beq	271c8 <__assert_fail@plt+0x15d94>
   271bc:	ldr	r0, [sp, #24]
   271c0:	add	r0, r0, #136	; 0x88
   271c4:	bl	11134 <pthread_mutex_unlock@plt>
   271c8:	cmp	r7, #0
   271cc:	movwne	r7, #1
   271d0:	mov	r0, r7
   271d4:	sub	sp, fp, #28
   271d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   271dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   271e0:	add	fp, sp, #28
   271e4:	sub	sp, sp, #412	; 0x19c
   271e8:	ldr	r8, [r0]
   271ec:	str	r2, [sp, #68]	; 0x44
   271f0:	str	r1, [sp, #100]	; 0x64
   271f4:	mov	r4, r0
   271f8:	add	r0, sp, #104	; 0x68
   271fc:	mov	r1, #0
   27200:	mov	r2, #136	; 0x88
   27204:	mov	r6, r3
   27208:	mov	r9, #0
   2720c:	bl	11368 <memset@plt>
   27210:	str	r8, [sp, #188]	; 0xbc
   27214:	ldr	lr, [fp, #16]
   27218:	ldr	ip, [fp, #8]
   2721c:	mov	r5, #0
   27220:	ldr	r1, [r4, #16]
   27224:	cmp	r1, #0
   27228:	beq	27244 <__assert_fail@plt+0x15e10>
   2722c:	ldrb	r2, [r4, #28]
   27230:	and	r2, r2, #9
   27234:	cmp	r2, #8
   27238:	movne	r1, #0
   2723c:	subs	r5, r6, ip
   27240:	movne	r5, r1
   27244:	ldr	r2, [r4, #24]
   27248:	ldr	r1, [r4, #8]
   2724c:	mov	sl, #1
   27250:	mvn	r3, r2
   27254:	cmp	r2, lr
   27258:	addcc	r9, r3, lr
   2725c:	cmp	r1, #0
   27260:	beq	29d28 <__assert_fail@plt+0x188f4>
   27264:	ldr	r1, [r8, #36]	; 0x24
   27268:	cmp	r1, #0
   2726c:	ldrne	r0, [r8, #40]	; 0x28
   27270:	cmpne	r0, #0
   27274:	beq	29d28 <__assert_fail@plt+0x188f4>
   27278:	ldr	r3, [r8, #44]	; 0x2c
   2727c:	cmp	r3, #0
   27280:	ldrne	r7, [r8, #48]	; 0x30
   27284:	cmpne	r7, #0
   27288:	beq	29d28 <__assert_fail@plt+0x188f4>
   2728c:	ldr	r1, [r1, #8]
   27290:	ldr	r2, [r4, #20]
   27294:	cmp	r1, #0
   27298:	beq	272a4 <__assert_fail@plt+0x15e70>
   2729c:	ldr	r7, [sp, #100]	; 0x64
   272a0:	b	272b4 <__assert_fail@plt+0x15e80>
   272a4:	ldr	r1, [r0, #8]
   272a8:	ldr	r7, [sp, #100]	; 0x64
   272ac:	cmp	r1, #0
   272b0:	beq	28e34 <__assert_fail@plt+0x17a00>
   272b4:	str	ip, [sp, #72]	; 0x48
   272b8:	subs	r0, lr, r9
   272bc:	str	r9, [sp, #32]
   272c0:	str	r0, [sp, #84]	; 0x54
   272c4:	mov	r0, #1
   272c8:	str	r0, [sp, #44]	; 0x2c
   272cc:	bne	272e0 <__assert_fail@plt+0x15eac>
   272d0:	ldr	r0, [r8, #76]	; 0x4c
   272d4:	cmp	r0, #0
   272d8:	movwne	r0, #1
   272dc:	str	r0, [sp, #44]	; 0x2c
   272e0:	ldr	r0, [r4, #12]
   272e4:	ldr	sl, [r8, #92]	; 0x5c
   272e8:	ldr	ip, [r8, #8]
   272ec:	str	r2, [sp, #168]	; 0xa8
   272f0:	str	r7, [sp, #104]	; 0x68
   272f4:	mov	lr, r4
   272f8:	str	sl, [sp, #184]	; 0xb8
   272fc:	ubfx	r3, r0, #22, #1
   27300:	ldr	r4, [sp, #68]	; 0x44
   27304:	and	r0, r0, #4194304	; 0x400000
   27308:	add	r1, ip, #1
   2730c:	orrs	r9, r2, r0
   27310:	strb	r3, [sp, #176]	; 0xb0
   27314:	add	r3, sp, #104	; 0x68
   27318:	movwne	r9, #1
   2731c:	add	r3, r3, #44	; 0x2c
   27320:	cmp	sl, r1
   27324:	strb	r9, [sp, #179]	; 0xb3
   27328:	movgt	r1, sl
   2732c:	vdup.32	q8, r4
   27330:	ldrb	r0, [r8, #88]	; 0x58
   27334:	vst1.32	{d16-d17}, [r3]
   27338:	ubfx	r3, r0, #3, #1
   2733c:	strb	r3, [sp, #178]	; 0xb2
   27340:	ubfx	r0, r0, #2, #1
   27344:	str	r8, [sp, #96]	; 0x60
   27348:	str	lr, [sp, #52]	; 0x34
   2734c:	str	r5, [sp, #92]	; 0x5c
   27350:	str	r2, [sp, #88]	; 0x58
   27354:	strb	r0, [sp, #177]	; 0xb1
   27358:	add	r0, r4, #1
   2735c:	cmp	r0, r1
   27360:	movlt	r1, r0
   27364:	cmp	sl, #2
   27368:	mov	r0, lr
   2736c:	str	r1, [sp, #80]	; 0x50
   27370:	blt	273b0 <__assert_fail@plt+0x15f7c>
   27374:	mov	sl, #12
   27378:	cmn	r1, #-1073741823	; 0xc0000001
   2737c:	bhi	29cd4 <__assert_fail@plt+0x188a0>
   27380:	lsl	r1, r1, #2
   27384:	mov	r0, #0
   27388:	bl	38020 <__assert_fail@plt+0x26bec>
   2738c:	ldr	r1, [sp, #80]	; 0x50
   27390:	ldr	r2, [sp, #88]	; 0x58
   27394:	ldr	r5, [sp, #92]	; 0x5c
   27398:	ldr	r7, [sp, #100]	; 0x64
   2739c:	cmp	r0, #0
   273a0:	beq	29cd4 <__assert_fail@plt+0x188a0>
   273a4:	str	r0, [sp, #112]	; 0x70
   273a8:	ldr	r8, [sp, #96]	; 0x60
   273ac:	ldr	r0, [sp, #52]	; 0x34
   273b0:	cmp	r9, #0
   273b4:	mov	r4, #1
   273b8:	mov	r9, r0
   273bc:	beq	273e8 <__assert_fail@plt+0x15fb4>
   273c0:	mov	r0, #0
   273c4:	mov	r4, #0
   273c8:	bl	38020 <__assert_fail@plt+0x26bec>
   273cc:	cmp	r0, #0
   273d0:	beq	29bbc <__assert_fail@plt+0x18788>
   273d4:	ldr	r7, [sp, #100]	; 0x64
   273d8:	ldr	r5, [sp, #92]	; 0x5c
   273dc:	ldr	r2, [sp, #88]	; 0x58
   273e0:	ldr	r1, [sp, #80]	; 0x50
   273e4:	str	r0, [sp, #108]	; 0x6c
   273e8:	add	r3, r8, #96	; 0x60
   273ec:	str	r1, [sp, #140]	; 0x8c
   273f0:	ldr	r0, [fp, #12]
   273f4:	cmp	r4, #0
   273f8:	str	r3, [sp, #172]	; 0xac
   273fc:	ldrb	r3, [r8, #88]	; 0x58
   27400:	ubfx	r3, r3, #4, #1
   27404:	strb	r3, [sp, #182]	; 0xb6
   27408:	mov	r3, #0
   2740c:	beq	27424 <__assert_fail@plt+0x15ff0>
   27410:	str	r7, [sp, #108]	; 0x6c
   27414:	ldr	r3, [r8, #92]	; 0x5c
   27418:	cmp	r3, #1
   2741c:	ldr	r3, [sp, #68]	; 0x44
   27420:	movwgt	r3, #0
   27424:	str	r0, [sp, #160]	; 0xa0
   27428:	str	r3, [sp, #136]	; 0x88
   2742c:	str	r3, [sp, #132]	; 0x84
   27430:	str	r0, [sp, #156]	; 0x9c
   27434:	ldrb	r0, [r9, #28]
   27438:	lsr	r0, r0, #7
   2743c:	strb	r0, [sp, #181]	; 0xb5
   27440:	mvn	r0, #0
   27444:	ldr	r8, [r8, #76]	; 0x4c
   27448:	str	r0, [sp, #196]	; 0xc4
   2744c:	ldr	r0, [fp, #24]
   27450:	lsl	r9, r8, #1
   27454:	cmp	r8, #1
   27458:	str	r0, [sp, #192]	; 0xc0
   2745c:	blt	274b4 <__assert_fail@plt+0x16080>
   27460:	movw	r0, #43690	; 0xaaaa
   27464:	mov	sl, #12
   27468:	movt	r0, #2730	; 0xaaa
   2746c:	cmp	r9, r0
   27470:	bhi	29cd4 <__assert_fail@plt+0x188a0>
   27474:	add	r0, r8, r8, lsl #1
   27478:	lsl	r0, r0, #4
   2747c:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   27480:	mov	r5, r0
   27484:	str	r0, [sp, #220]	; 0xdc
   27488:	lsl	r0, r8, #3
   2748c:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   27490:	cmp	r0, #0
   27494:	str	r0, [sp, #236]	; 0xec
   27498:	beq	29cd4 <__assert_fail@plt+0x188a0>
   2749c:	cmp	r5, #0
   274a0:	ldr	r7, [sp, #100]	; 0x64
   274a4:	ldr	r5, [sp, #92]	; 0x5c
   274a8:	ldr	r2, [sp, #88]	; 0x58
   274ac:	ldr	r1, [sp, #80]	; 0x50
   274b0:	beq	29cd4 <__assert_fail@plt+0x188a0>
   274b4:	mov	r0, #1
   274b8:	str	r9, [sp, #232]	; 0xe8
   274bc:	str	r0, [sp, #224]	; 0xe0
   274c0:	ldr	r0, [sp, #84]	; 0x54
   274c4:	str	r9, [sp, #216]	; 0xd8
   274c8:	cmp	r0, #1
   274cc:	bhi	274e0 <__assert_fail@plt+0x160ac>
   274d0:	ldr	r0, [sp, #96]	; 0x60
   274d4:	ldrb	r0, [r0, #88]	; 0x58
   274d8:	tst	r0, #2
   274dc:	beq	27510 <__assert_fail@plt+0x160dc>
   274e0:	mov	sl, #12
   274e4:	cmn	r1, #-1073741822	; 0xc0000002
   274e8:	bhi	29cd4 <__assert_fail@plt+0x188a0>
   274ec:	mov	r0, #4
   274f0:	add	r0, r0, r1, lsl #2
   274f4:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   274f8:	ldr	r2, [sp, #88]	; 0x58
   274fc:	ldr	r5, [sp, #92]	; 0x5c
   27500:	ldr	r7, [sp, #100]	; 0x64
   27504:	cmp	r0, #0
   27508:	str	r0, [sp, #204]	; 0xcc
   2750c:	beq	29cd4 <__assert_fail@plt+0x188a0>
   27510:	ldr	r1, [fp, #24]
   27514:	ldr	r3, [sp, #72]	; 0x48
   27518:	str	r6, [fp, #-200]	; 0xffffff38
   2751c:	mov	r0, #4
   27520:	mov	r8, #1
   27524:	mov	r9, r6
   27528:	tst	r1, #1
   2752c:	mov	r1, #4
   27530:	mov	r4, r3
   27534:	movweq	r1, #6
   27538:	cmp	r3, r6
   2753c:	str	r1, [sp, #164]	; 0xa4
   27540:	ldr	r1, [sp, #96]	; 0x60
   27544:	mvnlt	r8, #0
   27548:	movlt	r4, r6
   2754c:	movlt	r9, r3
   27550:	cmp	r5, #0
   27554:	ldr	r1, [r1, #92]	; 0x5c
   27558:	str	r1, [sp, #56]	; 0x38
   2755c:	beq	275a0 <__assert_fail@plt+0x1616c>
   27560:	cmp	r1, #1
   27564:	beq	27584 <__assert_fail@plt+0x16150>
   27568:	ldr	r0, [sp, #52]	; 0x34
   2756c:	ldr	r0, [r0, #12]
   27570:	and	r0, r0, #4194304	; 0x400000
   27574:	orr	r0, r2, r0
   27578:	clz	r0, r0
   2757c:	lsr	r0, r0, #5
   27580:	lsl	r0, r0, #2
   27584:	cmp	r2, #0
   27588:	mov	r1, r2
   2758c:	movwne	r1, #1
   27590:	cmp	r3, r6
   27594:	orrge	r1, r1, #2
   27598:	orr	r0, r1, r0
   2759c:	b	275a4 <__assert_fail@plt+0x16170>
   275a0:	mov	r0, #8
   275a4:	add	r1, sp, #104	; 0x68
   275a8:	cmp	r3, r6
   275ac:	sub	r0, r0, #4
   275b0:	str	r8, [sp, #60]	; 0x3c
   275b4:	str	r4, [sp, #80]	; 0x50
   275b8:	str	r9, [sp, #76]	; 0x4c
   275bc:	add	r1, r1, #32
   275c0:	str	r0, [sp, #72]	; 0x48
   275c4:	str	r1, [sp, #28]
   275c8:	sub	r1, fp, #200	; 0xc8
   275cc:	movwlt	r1, #0
   275d0:	cmp	r1, #0
   275d4:	str	r1, [sp, #40]	; 0x28
   275d8:	movwne	r1, #1
   275dc:	str	r1, [sp, #48]	; 0x30
   275e0:	sub	r1, fp, #192	; 0xc0
   275e4:	add	r1, r1, #16
   275e8:	str	r1, [sp, #36]	; 0x24
   275ec:	ldr	r1, [sp, #72]	; 0x48
   275f0:	cmp	r1, #4
   275f4:	bhi	276d8 <__assert_fail@plt+0x162a4>
   275f8:	add	r0, pc, #0
   275fc:	ldr	pc, [r0, r1, lsl #2]
   27600:	andeq	r7, r2, r4, lsl r6
   27604:	andeq	r7, r2, r4, lsl r6
   27608:	andeq	r7, r2, ip, lsl #13
   2760c:	andeq	r7, r2, r4, ror #12
   27610:	andeq	r7, r2, ip, asr r7
   27614:	mov	sl, #1
   27618:	cmp	r6, r9
   2761c:	blt	29cd4 <__assert_fail@plt+0x188a0>
   27620:	ldr	r1, [sp, #68]	; 0x44
   27624:	cmp	r6, r1
   27628:	mov	r0, #0
   2762c:	ldrblt	r0, [r7, r6]
   27630:	cmp	r2, #0
   27634:	ldrbne	r0, [r2, r0]
   27638:	ldrb	r0, [r5, r0]
   2763c:	cmp	r0, #0
   27640:	bne	2775c <__assert_fail@plt+0x16328>
   27644:	sub	r0, r6, #1
   27648:	cmp	r6, r9
   2764c:	mov	r6, r0
   27650:	str	r0, [fp, #-200]	; 0xffffff38
   27654:	bgt	27624 <__assert_fail@plt+0x161f0>
   27658:	b	29cd4 <__assert_fail@plt+0x188a0>
   2765c:	add	r6, r6, #1
   27660:	str	r6, [fp, #-200]	; 0xffffff38
   27664:	cmp	r6, r4
   27668:	bge	276a4 <__assert_fail@plt+0x16270>
   2766c:	ldrb	r0, [r7, r6]
   27670:	ldrb	r0, [r2, r0]
   27674:	ldrb	r0, [r5, r0]
   27678:	cmp	r0, #0
   2767c:	beq	2765c <__assert_fail@plt+0x16228>
   27680:	b	276a4 <__assert_fail@plt+0x16270>
   27684:	add	r6, r6, #1
   27688:	str	r6, [fp, #-200]	; 0xffffff38
   2768c:	cmp	r6, r4
   27690:	bge	276a4 <__assert_fail@plt+0x16270>
   27694:	ldrb	r0, [r7, r6]
   27698:	ldrb	r0, [r5, r0]
   2769c:	cmp	r0, #0
   276a0:	beq	27684 <__assert_fail@plt+0x16250>
   276a4:	cmp	r6, r4
   276a8:	bne	2775c <__assert_fail@plt+0x16328>
   276ac:	ldr	r1, [sp, #68]	; 0x44
   276b0:	mov	r0, #0
   276b4:	mov	r6, r4
   276b8:	cmp	r4, r1
   276bc:	ldrblt	r0, [r7, r4]
   276c0:	cmp	r2, #0
   276c4:	ldrbne	r0, [r2, r0]
   276c8:	ldrb	r0, [r5, r0]
   276cc:	cmp	r0, #0
   276d0:	bne	2775c <__assert_fail@plt+0x16328>
   276d4:	b	29e90 <__assert_fail@plt+0x18a5c>
   276d8:	ldr	r0, [sp, #128]	; 0x80
   276dc:	ldr	r2, [sp, #136]	; 0x88
   276e0:	sub	r1, r6, r0
   276e4:	cmp	r1, r2
   276e8:	bcs	27730 <__assert_fail@plt+0x162fc>
   276ec:	ldr	r3, [sp, #132]	; 0x84
   276f0:	mov	r2, #0
   276f4:	cmp	r1, r3
   276f8:	bcs	27704 <__assert_fail@plt+0x162d0>
   276fc:	ldr	r2, [sp, #108]	; 0x6c
   27700:	ldrb	r2, [r2, r1]
   27704:	ldrb	r1, [r5, r2]
   27708:	cmp	r1, #0
   2770c:	bne	2775c <__assert_fail@plt+0x16328>
   27710:	add	r6, r6, r8
   27714:	mov	sl, #1
   27718:	cmp	r6, r9
   2771c:	str	r6, [fp, #-200]	; 0xffffff38
   27720:	blt	29cd4 <__assert_fail@plt+0x188a0>
   27724:	cmp	r6, r4
   27728:	ble	276dc <__assert_fail@plt+0x162a8>
   2772c:	b	29cd4 <__assert_fail@plt+0x188a0>
   27730:	ldr	r2, [fp, #24]
   27734:	add	r0, sp, #104	; 0x68
   27738:	mov	r1, r6
   2773c:	bl	30c4c <__assert_fail@plt+0x1f818>
   27740:	cmp	r0, #0
   27744:	bne	29d3c <__assert_fail@plt+0x18908>
   27748:	ldr	r0, [sp, #128]	; 0x80
   2774c:	ldr	r6, [fp, #-200]	; 0xffffff38
   27750:	ldr	r5, [sp, #92]	; 0x5c
   27754:	sub	r1, r6, r0
   27758:	b	276ec <__assert_fail@plt+0x162b8>
   2775c:	ldr	r2, [fp, #24]
   27760:	add	r0, sp, #104	; 0x68
   27764:	mov	r1, r6
   27768:	bl	30c4c <__assert_fail@plt+0x1f818>
   2776c:	cmp	r0, #0
   27770:	bne	29d3c <__assert_fail@plt+0x18908>
   27774:	ldr	r0, [sp, #56]	; 0x38
   27778:	cmp	r0, #1
   2777c:	ldrne	r0, [sp, #132]	; 0x84
   27780:	cmpne	r0, #0
   27784:	bne	277c4 <__assert_fail@plt+0x16390>
   27788:	mov	r0, #0
   2778c:	str	r0, [sp, #212]	; 0xd4
   27790:	str	r0, [sp, #224]	; 0xe0
   27794:	str	r0, [sp, #208]	; 0xd0
   27798:	str	r0, [fp, #-196]	; 0xffffff3c
   2779c:	ldr	r4, [sp, #188]	; 0xbc
   277a0:	ldr	r5, [sp, #144]	; 0x90
   277a4:	ldr	r9, [r4, #36]	; 0x24
   277a8:	ldrsb	r0, [r9, #52]	; 0x34
   277ac:	cmn	r0, #1
   277b0:	ble	277d8 <__assert_fail@plt+0x163a4>
   277b4:	ldr	r1, [sp, #48]	; 0x30
   277b8:	cmp	r9, #0
   277bc:	bne	27908 <__assert_fail@plt+0x164d4>
   277c0:	b	29bbc <__assert_fail@plt+0x18788>
   277c4:	ldr	r0, [sp, #112]	; 0x70
   277c8:	ldr	r0, [r0]
   277cc:	cmn	r0, #1
   277d0:	bne	27788 <__assert_fail@plt+0x16354>
   277d4:	b	28bb0 <__assert_fail@plt+0x1777c>
   277d8:	cmp	r5, #0
   277dc:	ble	27818 <__assert_fail@plt+0x163e4>
   277e0:	ldr	r1, [sp, #152]	; 0x98
   277e4:	sub	r0, r5, #1
   277e8:	cmp	r1, r0
   277ec:	beq	278e4 <__assert_fail@plt+0x164b0>
   277f0:	ldr	r1, [sp, #184]	; 0xb8
   277f4:	cmp	r1, #2
   277f8:	blt	2782c <__assert_fail@plt+0x163f8>
   277fc:	ldr	r1, [sp, #112]	; 0x70
   27800:	ldr	r6, [r1, r0, lsl #2]
   27804:	cmn	r6, #1
   27808:	bne	27860 <__assert_fail@plt+0x1642c>
   2780c:	sub	r0, r0, #1
   27810:	cmn	r0, #1
   27814:	bne	27800 <__assert_fail@plt+0x163cc>
   27818:	ldr	r3, [sp, #164]	; 0xa4
   2781c:	ldr	r1, [sp, #48]	; 0x30
   27820:	tst	r3, #1
   27824:	beq	27890 <__assert_fail@plt+0x1645c>
   27828:	b	278fc <__assert_fail@plt+0x164c8>
   2782c:	ldr	r1, [sp, #108]	; 0x6c
   27830:	ldr	r2, [sp, #172]	; 0xac
   27834:	mov	r3, #1
   27838:	ldrb	r0, [r1, r0]
   2783c:	ubfx	r1, r0, #5, #3
   27840:	ldr	r1, [r2, r1, lsl #2]
   27844:	and	r2, r0, #31
   27848:	tst	r1, r3, lsl r2
   2784c:	ldr	r1, [sp, #48]	; 0x30
   27850:	bne	278fc <__assert_fail@plt+0x164c8>
   27854:	cmp	r0, #10
   27858:	beq	27878 <__assert_fail@plt+0x16444>
   2785c:	b	27900 <__assert_fail@plt+0x164cc>
   27860:	ldrb	r0, [sp, #182]	; 0xb6
   27864:	ldr	r1, [sp, #48]	; 0x30
   27868:	cmp	r0, #0
   2786c:	bne	287f8 <__assert_fail@plt+0x173c4>
   27870:	cmp	r6, #10
   27874:	bne	27900 <__assert_fail@plt+0x164cc>
   27878:	ldrb	r0, [sp, #181]	; 0xb5
   2787c:	cmp	r0, #0
   27880:	movwne	r0, #1
   27884:	lsl	r3, r0, #1
   27888:	tst	r3, #1
   2788c:	bne	278fc <__assert_fail@plt+0x164c8>
   27890:	cmp	r3, #0
   27894:	beq	27900 <__assert_fail@plt+0x164cc>
   27898:	ands	r1, r3, #2
   2789c:	and	r0, r3, #4
   278a0:	cmpne	r0, #0
   278a4:	bne	278d4 <__assert_fail@plt+0x164a0>
   278a8:	cmp	r1, #0
   278ac:	bne	278dc <__assert_fail@plt+0x164a8>
   278b0:	ldr	r9, [r4, #36]	; 0x24
   278b4:	cmp	r0, #0
   278b8:	beq	277b4 <__assert_fail@plt+0x16380>
   278bc:	ldr	r2, [r9, #40]	; 0x28
   278c0:	sub	r0, fp, #196	; 0xc4
   278c4:	mov	r1, r4
   278c8:	bl	30658 <__assert_fail@plt+0x1f224>
   278cc:	mov	r9, r0
   278d0:	b	277b4 <__assert_fail@plt+0x16380>
   278d4:	ldr	r9, [r4, #48]	; 0x30
   278d8:	b	277b4 <__assert_fail@plt+0x16380>
   278dc:	ldr	r9, [r4, #44]	; 0x2c
   278e0:	b	277b4 <__assert_fail@plt+0x16380>
   278e4:	ldr	r0, [sp, #192]	; 0xc0
   278e8:	ldr	r1, [sp, #48]	; 0x30
   278ec:	and	r0, r0, #2
   278f0:	eor	r3, r0, #10
   278f4:	tst	r3, #1
   278f8:	beq	27890 <__assert_fail@plt+0x1645c>
   278fc:	ldr	r9, [r4, #40]	; 0x28
   27900:	cmp	r9, #0
   27904:	beq	29bbc <__assert_fail@plt+0x18788>
   27908:	ldr	r0, [sp, #204]	; 0xcc
   2790c:	mov	r6, r1
   27910:	cmp	r0, #0
   27914:	beq	2792c <__assert_fail@plt+0x164f8>
   27918:	str	r9, [r0, r5, lsl #2]
   2791c:	mov	r6, r1
   27920:	ldr	r0, [r4, #76]	; 0x4c
   27924:	cmp	r0, #0
   27928:	bne	28624 <__assert_fail@plt+0x171f0>
   2792c:	ldrb	r0, [r9, #52]	; 0x34
   27930:	mvn	sl, #0
   27934:	tst	r0, #16
   27938:	bne	285f8 <__assert_fail@plt+0x171c4>
   2793c:	mov	r0, #0
   27940:	str	r0, [sp, #64]	; 0x40
   27944:	ldr	r0, [sp, #144]	; 0x90
   27948:	ldr	r1, [sp, #160]	; 0xa0
   2794c:	cmp	r1, r0
   27950:	ble	2795c <__assert_fail@plt+0x16528>
   27954:	ldr	r8, [sp, #40]	; 0x28
   27958:	b	2797c <__assert_fail@plt+0x16548>
   2795c:	ldr	r8, [sp, #40]	; 0x28
   27960:	b	2821c <__assert_fail@plt+0x16de8>
   27964:	ldr	r6, [sp, #24]
   27968:	mov	r5, lr
   2796c:	ldr	r0, [sp, #144]	; 0x90
   27970:	ldr	r1, [sp, #160]	; 0xa0
   27974:	cmp	r1, r0
   27978:	ble	2821c <__assert_fail@plt+0x16de8>
   2797c:	ldr	r2, [sp, #140]	; 0x8c
   27980:	ldr	r1, [sp, #152]	; 0x98
   27984:	add	r7, r0, #1
   27988:	mov	r4, r9
   2798c:	cmp	r7, r2
   27990:	blt	2799c <__assert_fail@plt+0x16568>
   27994:	cmp	r2, r1
   27998:	blt	280b4 <__assert_fail@plt+0x16c80>
   2799c:	ldr	r2, [sp, #132]	; 0x84
   279a0:	cmp	r7, r2
   279a4:	blt	279b0 <__assert_fail@plt+0x1657c>
   279a8:	cmp	r2, r1
   279ac:	blt	280b4 <__assert_fail@plt+0x16c80>
   279b0:	ldrb	r0, [r4, #52]	; 0x34
   279b4:	tst	r0, #32
   279b8:	bne	27c74 <__assert_fail@plt+0x16840>
   279bc:	ldr	r1, [sp, #144]	; 0x90
   279c0:	ldr	r0, [sp, #108]	; 0x6c
   279c4:	add	r2, r1, #1
   279c8:	str	r2, [sp, #144]	; 0x90
   279cc:	ldrb	r9, [r0, r1]
   279d0:	ldr	r0, [r4, #44]	; 0x2c
   279d4:	cmp	r0, #0
   279d8:	bne	27a0c <__assert_fail@plt+0x165d8>
   279dc:	ldr	r2, [r4, #48]	; 0x30
   279e0:	cmp	r2, #0
   279e4:	bne	280d0 <__assert_fail@plt+0x16c9c>
   279e8:	ldr	r0, [sp, #188]	; 0xbc
   279ec:	mov	r1, r4
   279f0:	bl	3449c <__assert_fail@plt+0x23068>
   279f4:	cmp	r0, #0
   279f8:	bne	279d0 <__assert_fail@plt+0x1659c>
   279fc:	mov	r0, #12
   27a00:	mov	r9, #0
   27a04:	str	r0, [fp, #-196]	; 0xffffff3c
   27a08:	b	27a10 <__assert_fail@plt+0x165dc>
   27a0c:	ldr	r9, [r0, r9, lsl #2]
   27a10:	ldr	r0, [sp, #204]	; 0xcc
   27a14:	cmp	r0, #0
   27a18:	beq	27a30 <__assert_fail@plt+0x165fc>
   27a1c:	sub	r0, fp, #196	; 0xc4
   27a20:	add	r1, sp, #104	; 0x68
   27a24:	mov	r2, r9
   27a28:	bl	3236c <__assert_fail@plt+0x20f38>
   27a2c:	mov	r9, r0
   27a30:	cmp	r9, #0
   27a34:	beq	27a88 <__assert_fail@plt+0x16654>
   27a38:	sub	r0, r4, r9
   27a3c:	clz	r0, r0
   27a40:	lsr	r0, r0, #5
   27a44:	ands	r6, r6, r0
   27a48:	ldrb	r0, [r9, #52]	; 0x34
   27a4c:	moveq	r7, r5
   27a50:	mov	r5, r7
   27a54:	tst	r0, #16
   27a58:	beq	2796c <__assert_fail@plt+0x16538>
   27a5c:	sxtb	r0, r0
   27a60:	cmn	r0, #1
   27a64:	ble	27b14 <__assert_fail@plt+0x166e0>
   27a68:	ldr	r0, [sp, #44]	; 0x2c
   27a6c:	ldr	sl, [sp, #144]	; 0x90
   27a70:	cmp	r0, #0
   27a74:	beq	28230 <__assert_fail@plt+0x16dfc>
   27a78:	mov	r8, #0
   27a7c:	mov	r0, #1
   27a80:	str	r0, [sp, #64]	; 0x40
   27a84:	b	2796c <__assert_fail@plt+0x16538>
   27a88:	ldr	r0, [fp, #-196]	; 0xffffff3c
   27a8c:	cmp	r0, #0
   27a90:	bne	29bbc <__assert_fail@plt+0x18788>
   27a94:	ldr	r0, [sp, #64]	; 0x40
   27a98:	ldr	r1, [sp, #44]	; 0x2c
   27a9c:	cmp	r0, #0
   27aa0:	mvn	r1, r1
   27aa4:	movwne	r0, #1
   27aa8:	tst	r1, r0
   27aac:	bne	2821c <__assert_fail@plt+0x16de8>
   27ab0:	ldr	r0, [sp, #204]	; 0xcc
   27ab4:	cmp	r0, #0
   27ab8:	beq	2821c <__assert_fail@plt+0x16de8>
   27abc:	ldr	r2, [sp, #144]	; 0x90
   27ac0:	ldr	r1, [sp, #208]	; 0xd0
   27ac4:	add	r0, r0, #4
   27ac8:	cmp	r2, r1
   27acc:	bge	2821c <__assert_fail@plt+0x16de8>
   27ad0:	add	r3, r2, #1
   27ad4:	str	r3, [sp, #144]	; 0x90
   27ad8:	ldr	r2, [r0, r2, lsl #2]
   27adc:	cmp	r2, #0
   27ae0:	mov	r2, r3
   27ae4:	beq	27ac8 <__assert_fail@plt+0x16694>
   27ae8:	sub	r0, fp, #196	; 0xc4
   27aec:	add	r1, sp, #104	; 0x68
   27af0:	mov	r2, #0
   27af4:	bl	3236c <__assert_fail@plt+0x20f38>
   27af8:	cmp	r0, #0
   27afc:	mov	r9, r0
   27b00:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   27b04:	cmpeq	r0, #0
   27b08:	bne	27b5c <__assert_fail@plt+0x16728>
   27b0c:	ldr	r0, [sp, #204]	; 0xcc
   27b10:	b	27abc <__assert_fail@plt+0x16688>
   27b14:	ldr	r0, [sp, #144]	; 0x90
   27b18:	cmn	r0, #1
   27b1c:	ble	27b54 <__assert_fail@plt+0x16720>
   27b20:	ldr	r1, [sp, #152]	; 0x98
   27b24:	cmp	r1, r0
   27b28:	beq	28188 <__assert_fail@plt+0x16d54>
   27b2c:	ldr	r1, [sp, #184]	; 0xb8
   27b30:	cmp	r1, #2
   27b34:	blt	27b68 <__assert_fail@plt+0x16734>
   27b38:	ldr	r1, [sp, #112]	; 0x70
   27b3c:	ldr	r4, [r1, r0, lsl #2]
   27b40:	cmn	r4, #1
   27b44:	bne	27b98 <__assert_fail@plt+0x16764>
   27b48:	sub	r0, r0, #1
   27b4c:	cmn	r0, #1
   27b50:	bne	27b3c <__assert_fail@plt+0x16708>
   27b54:	ldr	r3, [sp, #164]	; 0xa4
   27b58:	b	27bc0 <__assert_fail@plt+0x1678c>
   27b5c:	cmp	r9, #0
   27b60:	bne	27a38 <__assert_fail@plt+0x16604>
   27b64:	b	2821c <__assert_fail@plt+0x16de8>
   27b68:	ldr	r1, [sp, #108]	; 0x6c
   27b6c:	ldr	r2, [sp, #172]	; 0xac
   27b70:	mov	r3, #1
   27b74:	ldrb	r0, [r1, r0]
   27b78:	ubfx	r1, r0, #5, #3
   27b7c:	ldr	r1, [r2, r1, lsl #2]
   27b80:	and	r2, r0, #31
   27b84:	tst	r1, r3, lsl r2
   27b88:	moveq	r3, #0
   27b8c:	cmpeq	r0, #10
   27b90:	bne	27bc0 <__assert_fail@plt+0x1678c>
   27b94:	b	27bb0 <__assert_fail@plt+0x1677c>
   27b98:	ldrb	r0, [sp, #182]	; 0xb6
   27b9c:	cmp	r0, #0
   27ba0:	bne	281b0 <__assert_fail@plt+0x16d7c>
   27ba4:	mov	r3, #0
   27ba8:	cmp	r4, #10
   27bac:	bne	27bc0 <__assert_fail@plt+0x1678c>
   27bb0:	ldrb	r0, [sp, #181]	; 0xb5
   27bb4:	cmp	r0, #0
   27bb8:	movwne	r0, #1
   27bbc:	lsl	r3, r0, #1
   27bc0:	ldr	r0, [r9, #8]
   27bc4:	cmp	r0, #1
   27bc8:	blt	2796c <__assert_fail@plt+0x16538>
   27bcc:	ldr	r1, [sp, #188]	; 0xbc
   27bd0:	mov	lr, r5
   27bd4:	ldr	r7, [r9, #12]
   27bd8:	and	ip, r3, #8
   27bdc:	and	r2, r3, #2
   27be0:	and	r3, r3, #1
   27be4:	str	r6, [sp, #24]
   27be8:	ldr	r5, [r1]
   27bec:	b	27bfc <__assert_fail@plt+0x167c8>
   27bf0:	add	r7, r7, #4
   27bf4:	subs	r0, r0, #1
   27bf8:	beq	27964 <__assert_fail@plt+0x16530>
   27bfc:	ldr	r4, [r7]
   27c00:	add	r1, r5, r4, lsl #3
   27c04:	ldr	r1, [r1, #4]
   27c08:	uxtb	r6, r1
   27c0c:	cmp	r6, #2
   27c10:	bne	27bf0 <__assert_fail@plt+0x167bc>
   27c14:	movw	r6, #65280	; 0xff00
   27c18:	movt	r6, #3
   27c1c:	tst	r1, r6
   27c20:	beq	27c60 <__assert_fail@plt+0x1682c>
   27c24:	cmp	r3, #0
   27c28:	bne	27c34 <__assert_fail@plt+0x16800>
   27c2c:	ands	r6, r1, #1024	; 0x400
   27c30:	bne	27bf0 <__assert_fail@plt+0x167bc>
   27c34:	cmp	r3, #0
   27c38:	andsne	r6, r1, #2048	; 0x800
   27c3c:	bne	27bf0 <__assert_fail@plt+0x167bc>
   27c40:	cmp	r2, #0
   27c44:	bne	27c50 <__assert_fail@plt+0x1681c>
   27c48:	ands	r6, r1, #8192	; 0x2000
   27c4c:	bne	27bf0 <__assert_fail@plt+0x167bc>
   27c50:	cmp	ip, #0
   27c54:	bne	27c60 <__assert_fail@plt+0x1682c>
   27c58:	ands	r1, r1, #32768	; 0x8000
   27c5c:	bne	27bf0 <__assert_fail@plt+0x167bc>
   27c60:	ldr	r6, [sp, #24]
   27c64:	cmp	r4, #0
   27c68:	mov	r5, lr
   27c6c:	bne	27a68 <__assert_fail@plt+0x16634>
   27c70:	b	2796c <__assert_fail@plt+0x16538>
   27c74:	ldr	r0, [r4, #8]
   27c78:	str	r6, [sp, #24]
   27c7c:	cmp	r0, #1
   27c80:	blt	2811c <__assert_fail@plt+0x16ce8>
   27c84:	ldr	ip, [sp, #188]	; 0xbc
   27c88:	mov	r6, #0
   27c8c:	str	r5, [sp, #12]
   27c90:	str	ip, [sp, #20]
   27c94:	b	27ca8 <__assert_fail@plt+0x16874>
   27c98:	ldr	r0, [r4, #8]
   27c9c:	add	r6, r6, #1
   27ca0:	cmp	r6, r0
   27ca4:	bge	2811c <__assert_fail@plt+0x16ce8>
   27ca8:	ldr	r0, [r4, #12]
   27cac:	ldr	r1, [r0, r6, lsl #2]
   27cb0:	ldr	r0, [ip]
   27cb4:	add	r0, r0, r1, lsl #3
   27cb8:	ldr	r3, [r0, #4]
   27cbc:	tst	r3, #1048576	; 0x100000
   27cc0:	beq	27c98 <__assert_fail@plt+0x16864>
   27cc4:	movw	r0, #65280	; 0xff00
   27cc8:	movt	r0, #3
   27ccc:	tst	r3, r0
   27cd0:	beq	27de0 <__assert_fail@plt+0x169ac>
   27cd4:	ldr	r0, [sp, #144]	; 0x90
   27cd8:	cmn	r0, #1
   27cdc:	ble	27d18 <__assert_fail@plt+0x168e4>
   27ce0:	ldr	r2, [sp, #152]	; 0x98
   27ce4:	cmp	r2, r0
   27ce8:	beq	27ffc <__assert_fail@plt+0x16bc8>
   27cec:	ldr	r2, [sp, #184]	; 0xb8
   27cf0:	cmp	r2, #2
   27cf4:	blt	27d20 <__assert_fail@plt+0x168ec>
   27cf8:	ldr	r2, [sp, #112]	; 0x70
   27cfc:	ldr	r5, [sp, #12]
   27d00:	ldr	r9, [r2, r0, lsl #2]
   27d04:	cmn	r9, #1
   27d08:	bne	27d64 <__assert_fail@plt+0x16930>
   27d0c:	sub	r0, r0, #1
   27d10:	cmn	r0, #1
   27d14:	bne	27d00 <__assert_fail@plt+0x168cc>
   27d18:	ldr	lr, [sp, #164]	; 0xa4
   27d1c:	b	27d8c <__assert_fail@plt+0x16958>
   27d20:	mov	r9, r3
   27d24:	ldr	r3, [sp, #108]	; 0x6c
   27d28:	ldr	r2, [sp, #172]	; 0xac
   27d2c:	mov	lr, #1
   27d30:	ldrb	r0, [r3, r0]
   27d34:	ubfx	r3, r0, #5, #3
   27d38:	and	r5, r0, #31
   27d3c:	ldr	r3, [r2, r3, lsl #2]
   27d40:	mov	r2, #0
   27d44:	tst	r3, lr, lsl r5
   27d48:	ldr	r5, [sp, #12]
   27d4c:	bne	27da4 <__assert_fail@plt+0x16970>
   27d50:	mov	r3, r9
   27d54:	mov	lr, #0
   27d58:	cmp	r0, #10
   27d5c:	beq	27d7c <__assert_fail@plt+0x16948>
   27d60:	b	27d8c <__assert_fail@plt+0x16958>
   27d64:	ldrb	r0, [sp, #182]	; 0xb6
   27d68:	cmp	r0, #0
   27d6c:	bne	28034 <__assert_fail@plt+0x16c00>
   27d70:	mov	lr, #0
   27d74:	cmp	r9, #10
   27d78:	bne	27d8c <__assert_fail@plt+0x16958>
   27d7c:	ldrb	r0, [sp, #181]	; 0xb5
   27d80:	cmp	r0, #0
   27d84:	movwne	r0, #1
   27d88:	lsl	lr, r0, #1
   27d8c:	and	r0, lr, #1
   27d90:	tst	r3, #1024	; 0x400
   27d94:	eor	r2, r0, #1
   27d98:	beq	27da4 <__assert_fail@plt+0x16970>
   27d9c:	cmp	r0, #0
   27da0:	beq	27c98 <__assert_fail@plt+0x16864>
   27da4:	ldr	r0, [ip]
   27da8:	cmp	r2, #0
   27dac:	add	r0, r0, r1, lsl #3
   27db0:	ldr	r0, [r0, #4]
   27db4:	bne	27dc0 <__assert_fail@plt+0x1698c>
   27db8:	ands	r2, r0, #2048	; 0x800
   27dbc:	bne	27c98 <__assert_fail@plt+0x16864>
   27dc0:	tst	lr, #2
   27dc4:	bne	27dd0 <__assert_fail@plt+0x1699c>
   27dc8:	ands	r2, r0, #8192	; 0x2000
   27dcc:	bne	27c98 <__assert_fail@plt+0x16864>
   27dd0:	tst	lr, #8
   27dd4:	bne	27de0 <__assert_fail@plt+0x169ac>
   27dd8:	ands	r0, r0, #32768	; 0x8000
   27ddc:	bne	27c98 <__assert_fail@plt+0x16864>
   27de0:	ldr	r3, [sp, #144]	; 0x90
   27de4:	mov	r0, ip
   27de8:	add	r2, sp, #104	; 0x68
   27dec:	str	r6, [sp, #16]
   27df0:	mov	r9, r1
   27df4:	bl	33f28 <__assert_fail@plt+0x22af4>
   27df8:	ldr	r6, [sp, #16]
   27dfc:	ldr	ip, [sp, #20]
   27e00:	cmp	r0, #0
   27e04:	beq	27c98 <__assert_fail@plt+0x16864>
   27e08:	ldr	r1, [sp, #224]	; 0xe0
   27e0c:	mov	r3, r9
   27e10:	cmp	r1, r0
   27e14:	movlt	r1, r0
   27e18:	str	r1, [sp, #224]	; 0xe0
   27e1c:	ldr	r6, [sp, #144]	; 0x90
   27e20:	ldr	r2, [sp, #140]	; 0x8c
   27e24:	ldr	r1, [sp, #152]	; 0x98
   27e28:	ldr	r5, [sp, #208]	; 0xd0
   27e2c:	add	r6, r6, r0
   27e30:	cmp	r2, r6
   27e34:	cmple	r2, r1
   27e38:	blt	27e4c <__assert_fail@plt+0x16a18>
   27e3c:	ldr	r0, [sp, #132]	; 0x84
   27e40:	cmp	r0, r6
   27e44:	cmple	r0, r1
   27e48:	bge	27e68 <__assert_fail@plt+0x16a34>
   27e4c:	add	r1, r6, #1
   27e50:	add	r0, sp, #104	; 0x68
   27e54:	bl	32170 <__assert_fail@plt+0x20d3c>
   27e58:	ldr	ip, [sp, #20]
   27e5c:	mov	r3, r9
   27e60:	cmp	r0, #0
   27e64:	bne	28198 <__assert_fail@plt+0x16d64>
   27e68:	cmp	r6, r5
   27e6c:	ble	27e98 <__assert_fail@plt+0x16a64>
   27e70:	sub	r0, r6, r5
   27e74:	mov	r1, #0
   27e78:	lsl	r2, r0, #2
   27e7c:	ldr	r0, [sp, #204]	; 0xcc
   27e80:	add	r0, r0, r5, lsl #2
   27e84:	add	r0, r0, #4
   27e88:	bl	11368 <memset@plt>
   27e8c:	ldr	ip, [sp, #20]
   27e90:	mov	r3, r9
   27e94:	str	r6, [sp, #208]	; 0xd0
   27e98:	mov	r0, #0
   27e9c:	str	r0, [fp, #-48]	; 0xffffffd0
   27ea0:	ldr	r0, [sp, #204]	; 0xcc
   27ea4:	ldr	r1, [ip, #24]
   27ea8:	ldr	r9, [r0, r6, lsl #2]
   27eac:	ldr	r0, [ip, #12]
   27eb0:	ldr	r0, [r0, r3, lsl #2]
   27eb4:	cmp	r9, #0
   27eb8:	add	r0, r0, r0, lsl #1
   27ebc:	add	r2, r1, r0, lsl #2
   27ec0:	beq	27ee4 <__assert_fail@plt+0x16ab0>
   27ec4:	ldr	r1, [r9, #40]	; 0x28
   27ec8:	sub	r0, fp, #192	; 0xc0
   27ecc:	bl	3257c <__assert_fail@plt+0x21148>
   27ed0:	ldr	r5, [sp, #12]
   27ed4:	cmp	r0, #0
   27ed8:	str	r0, [fp, #-48]	; 0xffffffd0
   27edc:	beq	27ef8 <__assert_fail@plt+0x16ac4>
   27ee0:	b	281a0 <__assert_fail@plt+0x16d6c>
   27ee4:	vldr	d16, [r2]
   27ee8:	ldr	r0, [r2, #8]
   27eec:	ldr	r5, [sp, #12]
   27ef0:	str	r0, [fp, #-184]	; 0xffffff48
   27ef4:	vstr	d16, [fp, #-192]	; 0xffffff40
   27ef8:	cmp	r6, #0
   27efc:	str	r6, [sp, #8]
   27f00:	str	r9, [sp, #4]
   27f04:	ble	28010 <__assert_fail@plt+0x16bdc>
   27f08:	ldr	r1, [sp, #152]	; 0x98
   27f0c:	sub	r3, r6, #1
   27f10:	cmp	r1, r3
   27f14:	ldr	r1, [sp, #20]
   27f18:	beq	28020 <__assert_fail@plt+0x16bec>
   27f1c:	ldr	r0, [sp, #184]	; 0xb8
   27f20:	cmp	r0, #2
   27f24:	blt	27f50 <__assert_fail@plt+0x16b1c>
   27f28:	ldr	r2, [sp, #112]	; 0x70
   27f2c:	sub	r0, fp, #48	; 0x30
   27f30:	ldr	r9, [r2, r3, lsl #2]
   27f34:	cmn	r9, #1
   27f38:	bne	27f84 <__assert_fail@plt+0x16b50>
   27f3c:	sub	r3, r3, #1
   27f40:	cmn	r3, #1
   27f44:	bne	27f30 <__assert_fail@plt+0x16afc>
   27f48:	ldr	r3, [sp, #164]	; 0xa4
   27f4c:	b	27fac <__assert_fail@plt+0x16b78>
   27f50:	ldr	r0, [sp, #108]	; 0x6c
   27f54:	ldr	r2, [sp, #172]	; 0xac
   27f58:	ldrb	r6, [r0, r3]
   27f5c:	mov	r3, #1
   27f60:	ubfx	r0, r6, #5, #3
   27f64:	ldr	r0, [r2, r0, lsl #2]
   27f68:	and	r2, r6, #31
   27f6c:	tst	r0, r3, lsl r2
   27f70:	sub	r0, fp, #48	; 0x30
   27f74:	moveq	r3, #0
   27f78:	cmpeq	r6, #10
   27f7c:	bne	27fac <__assert_fail@plt+0x16b78>
   27f80:	b	27f9c <__assert_fail@plt+0x16b68>
   27f84:	ldrb	r2, [sp, #182]	; 0xb6
   27f88:	cmp	r2, #0
   27f8c:	bne	28070 <__assert_fail@plt+0x16c3c>
   27f90:	mov	r3, #0
   27f94:	cmp	r9, #10
   27f98:	bne	27fac <__assert_fail@plt+0x16b78>
   27f9c:	ldrb	r2, [sp, #181]	; 0xb5
   27fa0:	cmp	r2, #0
   27fa4:	movwne	r2, #1
   27fa8:	lsl	r3, r2, #1
   27fac:	sub	r2, fp, #192	; 0xc0
   27fb0:	bl	30658 <__assert_fail@plt+0x1f224>
   27fb4:	ldr	r1, [sp, #204]	; 0xcc
   27fb8:	ldr	r6, [sp, #8]
   27fbc:	str	r0, [r1, r6, lsl #2]
   27fc0:	ldr	r0, [sp, #4]
   27fc4:	cmp	r0, #0
   27fc8:	beq	27fd4 <__assert_fail@plt+0x16ba0>
   27fcc:	ldr	r0, [fp, #-184]	; 0xffffff48
   27fd0:	bl	138e8 <__assert_fail@plt+0x24b4>
   27fd4:	ldr	r0, [sp, #204]	; 0xcc
   27fd8:	ldr	ip, [sp, #20]
   27fdc:	ldr	r0, [r0, r6, lsl #2]
   27fe0:	ldr	r6, [sp, #16]
   27fe4:	cmp	r0, #0
   27fe8:	bne	27c98 <__assert_fail@plt+0x16864>
   27fec:	ldr	r0, [fp, #-48]	; 0xffffffd0
   27ff0:	cmp	r0, #0
   27ff4:	beq	27c98 <__assert_fail@plt+0x16864>
   27ff8:	b	281a0 <__assert_fail@plt+0x16d6c>
   27ffc:	ldr	r0, [sp, #192]	; 0xc0
   28000:	ldr	r5, [sp, #12]
   28004:	and	r0, r0, #2
   28008:	eor	lr, r0, #10
   2800c:	b	27d8c <__assert_fail@plt+0x16958>
   28010:	ldr	r3, [sp, #164]	; 0xa4
   28014:	ldr	r1, [sp, #20]
   28018:	sub	r0, fp, #48	; 0x30
   2801c:	b	27fac <__assert_fail@plt+0x16b78>
   28020:	ldr	r0, [sp, #192]	; 0xc0
   28024:	and	r0, r0, #2
   28028:	eor	r3, r0, #10
   2802c:	sub	r0, fp, #48	; 0x30
   28030:	b	27fac <__assert_fail@plt+0x16b78>
   28034:	mov	r0, r9
   28038:	str	r3, [sp, #4]
   2803c:	str	r1, [sp, #8]
   28040:	bl	11350 <iswalnum@plt>
   28044:	mov	lr, #1
   28048:	mov	r2, #0
   2804c:	cmp	r9, #95	; 0x5f
   28050:	beq	2809c <__assert_fail@plt+0x16c68>
   28054:	ldr	r5, [sp, #12]
   28058:	ldr	ip, [sp, #20]
   2805c:	ldr	r1, [sp, #8]
   28060:	ldr	r3, [sp, #4]
   28064:	cmp	r0, #0
   28068:	beq	27d70 <__assert_fail@plt+0x1693c>
   2806c:	b	27da4 <__assert_fail@plt+0x16970>
   28070:	mov	r0, r9
   28074:	bl	11350 <iswalnum@plt>
   28078:	mov	r3, #1
   2807c:	cmp	r9, #95	; 0x5f
   28080:	beq	280ac <__assert_fail@plt+0x16c78>
   28084:	ldr	r5, [sp, #12]
   28088:	ldr	r1, [sp, #20]
   2808c:	cmp	r0, #0
   28090:	sub	r0, fp, #48	; 0x30
   28094:	beq	27f90 <__assert_fail@plt+0x16b5c>
   28098:	b	27fac <__assert_fail@plt+0x16b78>
   2809c:	ldr	r5, [sp, #12]
   280a0:	ldr	ip, [sp, #20]
   280a4:	ldr	r1, [sp, #8]
   280a8:	b	27da4 <__assert_fail@plt+0x16970>
   280ac:	ldr	r5, [sp, #12]
   280b0:	b	28014 <__assert_fail@plt+0x16be0>
   280b4:	add	r1, r0, #2
   280b8:	add	r0, sp, #104	; 0x68
   280bc:	bl	32170 <__assert_fail@plt+0x20d3c>
   280c0:	cmp	r0, #0
   280c4:	str	r0, [fp, #-196]	; 0xffffff3c
   280c8:	beq	279b0 <__assert_fail@plt+0x1657c>
   280cc:	b	29bbc <__assert_fail@plt+0x18788>
   280d0:	ldr	r0, [sp, #144]	; 0x90
   280d4:	cmp	r0, #0
   280d8:	ble	28114 <__assert_fail@plt+0x16ce0>
   280dc:	ldr	r1, [sp, #152]	; 0x98
   280e0:	sub	r3, r0, #1
   280e4:	cmp	r1, r3
   280e8:	beq	281d0 <__assert_fail@plt+0x16d9c>
   280ec:	ldr	r1, [sp, #184]	; 0xb8
   280f0:	cmp	r1, #2
   280f4:	blt	2812c <__assert_fail@plt+0x16cf8>
   280f8:	ldr	r1, [sp, #112]	; 0x70
   280fc:	ldr	r0, [r1, r3, lsl #2]
   28100:	cmn	r0, #1
   28104:	bne	28154 <__assert_fail@plt+0x16d20>
   28108:	sub	r3, r3, #1
   2810c:	cmn	r3, #1
   28110:	bne	280fc <__assert_fail@plt+0x16cc8>
   28114:	ldr	r1, [sp, #164]	; 0xa4
   28118:	b	2817c <__assert_fail@plt+0x16d48>
   2811c:	ldr	r6, [sp, #24]
   28120:	mov	r0, #0
   28124:	str	r0, [fp, #-196]	; 0xffffff3c
   28128:	b	279bc <__assert_fail@plt+0x16588>
   2812c:	ldr	r1, [sp, #108]	; 0x6c
   28130:	ldr	ip, [sp, #172]	; 0xac
   28134:	ldrb	r0, [r1, r3]
   28138:	ubfx	r1, r0, #5, #3
   2813c:	and	r3, r0, #31
   28140:	ldr	ip, [ip, r1, lsl #2]
   28144:	mov	r1, #1
   28148:	tst	ip, r1, lsl r3
   2814c:	bne	2817c <__assert_fail@plt+0x16d48>
   28150:	b	28160 <__assert_fail@plt+0x16d2c>
   28154:	ldrb	r1, [sp, #182]	; 0xb6
   28158:	cmp	r1, #0
   2815c:	bne	281d8 <__assert_fail@plt+0x16da4>
   28160:	mov	r1, #0
   28164:	cmp	r0, #10
   28168:	bne	2817c <__assert_fail@plt+0x16d48>
   2816c:	ldrb	r0, [sp, #181]	; 0xb5
   28170:	cmp	r0, #0
   28174:	movwne	r0, #1
   28178:	lsl	r1, r0, #1
   2817c:	bfi	r9, r1, #8, #1
   28180:	ldr	r9, [r2, r9, lsl #2]
   28184:	b	27a10 <__assert_fail@plt+0x165dc>
   28188:	ldr	r0, [sp, #192]	; 0xc0
   2818c:	and	r0, r0, #2
   28190:	eor	r3, r0, #10
   28194:	b	27bc0 <__assert_fail@plt+0x1678c>
   28198:	ldr	r5, [sp, #12]
   2819c:	str	r0, [fp, #-48]	; 0xffffffd0
   281a0:	ldr	r6, [sp, #24]
   281a4:	str	r0, [fp, #-196]	; 0xffffff3c
   281a8:	mov	r9, #0
   281ac:	b	27a10 <__assert_fail@plt+0x165dc>
   281b0:	mov	r0, r4
   281b4:	bl	11350 <iswalnum@plt>
   281b8:	mov	r3, #1
   281bc:	cmp	r4, #95	; 0x5f
   281c0:	beq	27bc0 <__assert_fail@plt+0x1678c>
   281c4:	cmp	r0, #0
   281c8:	beq	27ba4 <__assert_fail@plt+0x16770>
   281cc:	b	27bc0 <__assert_fail@plt+0x1678c>
   281d0:	mov	r1, #10
   281d4:	b	2817c <__assert_fail@plt+0x16d48>
   281d8:	str	r5, [sp, #12]
   281dc:	str	r2, [sp, #24]
   281e0:	mov	r5, r0
   281e4:	bl	11350 <iswalnum@plt>
   281e8:	mov	r1, #1
   281ec:	cmp	r5, #95	; 0x5f
   281f0:	beq	28210 <__assert_fail@plt+0x16ddc>
   281f4:	mov	r3, r5
   281f8:	ldr	r5, [sp, #12]
   281fc:	ldr	r2, [sp, #24]
   28200:	cmp	r0, #0
   28204:	mov	r0, r3
   28208:	beq	28160 <__assert_fail@plt+0x16d2c>
   2820c:	b	2817c <__assert_fail@plt+0x16d48>
   28210:	ldr	r5, [sp, #12]
   28214:	ldr	r2, [sp, #24]
   28218:	b	2817c <__assert_fail@plt+0x16d48>
   2821c:	cmp	r8, #0
   28220:	beq	28230 <__assert_fail@plt+0x16dfc>
   28224:	ldr	r0, [r8]
   28228:	add	r0, r0, r5
   2822c:	str	r0, [r8]
   28230:	ldr	r8, [sp, #60]	; 0x3c
   28234:	ldr	r4, [sp, #80]	; 0x50
   28238:	ldr	r9, [sp, #76]	; 0x4c
   2823c:	cmn	sl, #1
   28240:	beq	28ba8 <__assert_fail@plt+0x17774>
   28244:	cmn	sl, #2
   28248:	beq	29bbc <__assert_fail@plt+0x18788>
   2824c:	ldr	r9, [sp, #52]	; 0x34
   28250:	str	sl, [sp, #196]	; 0xc4
   28254:	ldr	r2, [sp, #84]	; 0x54
   28258:	ldr	lr, [sp, #96]	; 0x60
   2825c:	ldrb	r0, [r9, #28]
   28260:	cmp	r2, #2
   28264:	bcc	28270 <__assert_fail@plt+0x16e3c>
   28268:	ands	r1, r0, #16
   2826c:	beq	2827c <__assert_fail@plt+0x16e48>
   28270:	ldr	r1, [lr, #76]	; 0x4c
   28274:	cmp	r1, #0
   28278:	beq	283dc <__assert_fail@plt+0x16fa8>
   2827c:	ldr	r0, [sp, #204]	; 0xcc
   28280:	cmn	sl, #1
   28284:	ldr	r6, [r0, sl, lsl #2]
   28288:	ble	282c0 <__assert_fail@plt+0x16e8c>
   2828c:	ldr	r0, [sp, #152]	; 0x98
   28290:	cmp	r0, sl
   28294:	beq	28718 <__assert_fail@plt+0x172e4>
   28298:	ldr	r0, [sp, #184]	; 0xb8
   2829c:	cmp	r0, #2
   282a0:	blt	282d0 <__assert_fail@plt+0x16e9c>
   282a4:	ldr	r0, [sp, #112]	; 0x70
   282a8:	ldr	r4, [r0, sl, lsl #2]
   282ac:	cmn	r4, #1
   282b0:	bne	28308 <__assert_fail@plt+0x16ed4>
   282b4:	sub	sl, sl, #1
   282b8:	cmn	sl, #1
   282bc:	bne	282a8 <__assert_fail@plt+0x16e74>
   282c0:	ldr	r3, [sp, #164]	; 0xa4
   282c4:	movw	sl, #65280	; 0xff00
   282c8:	movt	sl, #3
   282cc:	b	28338 <__assert_fail@plt+0x16f04>
   282d0:	ldr	r0, [sp, #108]	; 0x6c
   282d4:	ldr	r1, [sp, #172]	; 0xac
   282d8:	mov	r3, #1
   282dc:	ldrb	r0, [r0, sl]
   282e0:	movw	sl, #65280	; 0xff00
   282e4:	movt	sl, #3
   282e8:	ubfx	r2, r0, #5, #3
   282ec:	ldr	r1, [r1, r2, lsl #2]
   282f0:	and	r2, r0, #31
   282f4:	tst	r1, r3, lsl r2
   282f8:	moveq	r3, #0
   282fc:	cmpeq	r0, #10
   28300:	bne	28338 <__assert_fail@plt+0x16f04>
   28304:	b	28328 <__assert_fail@plt+0x16ef4>
   28308:	ldrb	r0, [sp, #182]	; 0xb6
   2830c:	movw	sl, #65280	; 0xff00
   28310:	movt	sl, #3
   28314:	cmp	r0, #0
   28318:	bne	287d0 <__assert_fail@plt+0x1739c>
   2831c:	mov	r3, #0
   28320:	cmp	r4, #10
   28324:	bne	28338 <__assert_fail@plt+0x16f04>
   28328:	ldrb	r0, [sp, #181]	; 0xb5
   2832c:	cmp	r0, #0
   28330:	movwne	r0, #1
   28334:	lsl	r3, r0, #1
   28338:	ldr	r0, [r6, #8]
   2833c:	cmp	r0, #1
   28340:	blt	283cc <__assert_fail@plt+0x16f98>
   28344:	ldr	r7, [r6, #12]
   28348:	ldr	r6, [sp, #188]	; 0xbc
   2834c:	and	ip, r3, #8
   28350:	and	r2, r3, #2
   28354:	and	r3, r3, #1
   28358:	ldr	r6, [r6]
   2835c:	b	2836c <__assert_fail@plt+0x16f38>
   28360:	add	r7, r7, #4
   28364:	subs	r0, r0, #1
   28368:	beq	283cc <__assert_fail@plt+0x16f98>
   2836c:	ldr	r5, [r7]
   28370:	add	r4, r6, r5, lsl #3
   28374:	ldr	r4, [r4, #4]
   28378:	uxtb	r1, r4
   2837c:	cmp	r1, #2
   28380:	bne	28360 <__assert_fail@plt+0x16f2c>
   28384:	tst	r4, sl
   28388:	beq	283d0 <__assert_fail@plt+0x16f9c>
   2838c:	cmp	r3, #0
   28390:	bne	2839c <__assert_fail@plt+0x16f68>
   28394:	ands	r1, r4, #1024	; 0x400
   28398:	bne	28360 <__assert_fail@plt+0x16f2c>
   2839c:	cmp	r3, #0
   283a0:	andsne	r1, r4, #2048	; 0x800
   283a4:	bne	28360 <__assert_fail@plt+0x16f2c>
   283a8:	cmp	r2, #0
   283ac:	bne	283b8 <__assert_fail@plt+0x16f84>
   283b0:	ands	r1, r4, #8192	; 0x2000
   283b4:	bne	28360 <__assert_fail@plt+0x16f2c>
   283b8:	cmp	ip, #0
   283bc:	bne	283d0 <__assert_fail@plt+0x16f9c>
   283c0:	ands	r1, r4, #32768	; 0x8000
   283c4:	bne	28360 <__assert_fail@plt+0x16f2c>
   283c8:	b	283d0 <__assert_fail@plt+0x16f9c>
   283cc:	mov	r5, #0
   283d0:	str	r5, [sp, #200]	; 0xc8
   283d4:	ldr	r2, [sp, #84]	; 0x54
   283d8:	ldrb	r0, [r9, #28]
   283dc:	ldr	r4, [sp, #80]	; 0x50
   283e0:	ldr	r9, [sp, #76]	; 0x4c
   283e4:	cmp	r2, #2
   283e8:	bcc	28400 <__assert_fail@plt+0x16fcc>
   283ec:	ands	r0, r0, #16
   283f0:	bne	28400 <__assert_fail@plt+0x16fcc>
   283f4:	ldrb	r0, [lr, #88]	; 0x58
   283f8:	tst	r0, #1
   283fc:	bne	2840c <__assert_fail@plt+0x16fd8>
   28400:	ldr	r0, [lr, #76]	; 0x4c
   28404:	cmp	r0, #0
   28408:	beq	28c80 <__assert_fail@plt+0x1784c>
   2840c:	ldr	r6, [sp, #196]	; 0xc4
   28410:	cmn	r6, #-1073741823	; 0xc0000001
   28414:	bcs	29bbc <__assert_fail@plt+0x18788>
   28418:	ldr	r0, [sp, #188]	; 0xbc
   2841c:	ldr	r8, [sp, #200]	; 0xc8
   28420:	str	r0, [sp, #64]	; 0x40
   28424:	mov	r0, #4
   28428:	add	r5, r0, r6, lsl #2
   2842c:	mov	r0, r5
   28430:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   28434:	mov	r7, r0
   28438:	cmp	r0, #0
   2843c:	beq	29d44 <__assert_fail@plt+0x18910>
   28440:	ldr	r0, [sp, #64]	; 0x40
   28444:	ldr	r0, [r0, #76]	; 0x4c
   28448:	cmp	r0, #0
   2844c:	beq	28570 <__assert_fail@plt+0x1713c>
   28450:	mov	r0, r5
   28454:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   28458:	cmp	r0, #0
   2845c:	beq	29d44 <__assert_fail@plt+0x18910>
   28460:	add	r9, r6, #1
   28464:	mov	r1, #0
   28468:	mov	r5, r0
   2846c:	lsl	r2, r9, #2
   28470:	bl	11368 <memset@plt>
   28474:	ldr	r0, [sp, #36]	; 0x24
   28478:	mov	r1, #0
   2847c:	str	r6, [fp, #-180]	; 0xffffff4c
   28480:	str	r8, [fp, #-184]	; 0xffffff48
   28484:	str	r5, [fp, #-188]	; 0xffffff44
   28488:	str	r7, [fp, #-192]	; 0xffffff40
   2848c:	str	r1, [r0]
   28490:	str	r1, [r0, #4]
   28494:	str	r1, [r0, #8]
   28498:	add	r0, sp, #104	; 0x68
   2849c:	sub	r1, fp, #192	; 0xc0
   284a0:	bl	355d0 <__assert_fail@plt+0x2419c>
   284a4:	mov	sl, r0
   284a8:	mov	r0, #0
   284ac:	bl	138e8 <__assert_fail@plt+0x24b4>
   284b0:	cmp	sl, #0
   284b4:	bne	28be0 <__assert_fail@plt+0x177ac>
   284b8:	ldr	r0, [r7]
   284bc:	cmp	r0, #0
   284c0:	beq	28974 <__assert_fail@plt+0x17540>
   284c4:	mov	r1, #0
   284c8:	cmp	r6, #0
   284cc:	mov	sl, #0
   284d0:	str	r5, [sp, #20]
   284d4:	str	r7, [sp, #24]
   284d8:	str	r6, [sp, #16]
   284dc:	str	r1, [sp, #12]
   284e0:	bmi	285cc <__assert_fail@plt+0x17198>
   284e4:	ldr	r1, [sp, #24]
   284e8:	ldr	r6, [sp, #20]
   284ec:	sub	r7, r9, #1
   284f0:	add	r5, r1, #4
   284f4:	ldr	r2, [r6]
   284f8:	cmp	r0, #0
   284fc:	beq	28554 <__assert_fail@plt+0x17120>
   28500:	cmp	r2, #0
   28504:	beq	28558 <__assert_fail@plt+0x17124>
   28508:	sub	r4, fp, #48	; 0x30
   2850c:	add	r1, r0, #4
   28510:	add	r2, r2, #4
   28514:	mov	r0, r4
   28518:	bl	3257c <__assert_fail@plt+0x21148>
   2851c:	cmp	r0, #0
   28520:	str	r0, [fp, #-196]	; 0xffffff3c
   28524:	bne	285f0 <__assert_fail@plt+0x171bc>
   28528:	ldr	r1, [sp, #64]	; 0x40
   2852c:	sub	r0, fp, #196	; 0xc4
   28530:	mov	r2, r4
   28534:	bl	33c10 <__assert_fail@plt+0x227dc>
   28538:	str	r0, [r5, #-4]
   2853c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   28540:	bl	138e8 <__assert_fail@plt+0x24b4>
   28544:	ldr	sl, [fp, #-196]	; 0xffffff3c
   28548:	cmp	sl, #0
   2854c:	beq	28558 <__assert_fail@plt+0x17124>
   28550:	b	285cc <__assert_fail@plt+0x17198>
   28554:	str	r2, [r5, #-4]
   28558:	cmp	r7, #0
   2855c:	beq	285c8 <__assert_fail@plt+0x17194>
   28560:	ldr	r0, [r5], #4
   28564:	add	r6, r6, #4
   28568:	sub	r7, r7, #1
   2856c:	b	284f4 <__assert_fail@plt+0x170c0>
   28570:	ldr	r0, [sp, #36]	; 0x24
   28574:	mov	r1, #0
   28578:	str	r6, [fp, #-180]	; 0xffffff4c
   2857c:	str	r8, [fp, #-184]	; 0xffffff48
   28580:	str	r1, [fp, #-188]	; 0xffffff44
   28584:	str	r7, [fp, #-192]	; 0xffffff40
   28588:	str	r1, [r0]
   2858c:	str	r1, [r0, #4]
   28590:	str	r1, [r0, #8]
   28594:	add	r0, sp, #104	; 0x68
   28598:	sub	r1, fp, #192	; 0xc0
   2859c:	bl	355d0 <__assert_fail@plt+0x2419c>
   285a0:	mov	sl, r0
   285a4:	mov	r0, #0
   285a8:	bl	138e8 <__assert_fail@plt+0x24b4>
   285ac:	cmp	sl, #0
   285b0:	bne	287c4 <__assert_fail@plt+0x17390>
   285b4:	ldr	r0, [r7]
   285b8:	mov	r5, #0
   285bc:	cmp	r0, #0
   285c0:	beq	28b94 <__assert_fail@plt+0x17760>
   285c4:	b	28c58 <__assert_fail@plt+0x17824>
   285c8:	mov	sl, #0
   285cc:	ldr	r0, [sp, #20]
   285d0:	bl	138e8 <__assert_fail@plt+0x24b4>
   285d4:	ldr	r4, [sp, #80]	; 0x50
   285d8:	ldr	r9, [sp, #76]	; 0x4c
   285dc:	ldr	r7, [sp, #24]
   285e0:	ldr	r6, [sp, #16]
   285e4:	cmp	sl, #0
   285e8:	beq	28c58 <__assert_fail@plt+0x17824>
   285ec:	b	28bec <__assert_fail@plt+0x177b8>
   285f0:	mov	sl, r0
   285f4:	b	285cc <__assert_fail@plt+0x17198>
   285f8:	sxtb	r0, r0
   285fc:	cmn	r0, #1
   28600:	ble	28728 <__assert_fail@plt+0x172f4>
   28604:	mov	r0, #1
   28608:	mov	sl, r5
   2860c:	str	r0, [sp, #64]	; 0x40
   28610:	ldr	r0, [sp, #44]	; 0x2c
   28614:	cmp	r0, #0
   28618:	bne	27944 <__assert_fail@plt+0x16510>
   2861c:	mov	sl, r5
   28620:	b	28234 <__assert_fail@plt+0x16e00>
   28624:	ldr	r0, [r9, #8]
   28628:	str	r5, [sp, #12]
   2862c:	cmp	r0, #1
   28630:	blt	286fc <__assert_fail@plt+0x172c8>
   28634:	ldr	r4, [sp, #188]	; 0xbc
   28638:	mov	r6, #0
   2863c:	b	28664 <__assert_fail@plt+0x17230>
   28640:	add	r1, r1, #1
   28644:	str	r5, [r0, #4]
   28648:	str	r1, [sp, #228]	; 0xe4
   2864c:	mov	r1, #0
   28650:	str	r1, [r0]
   28654:	ldr	r0, [r9, #8]
   28658:	add	r6, r6, #1
   2865c:	cmp	r6, r0
   28660:	bge	286fc <__assert_fail@plt+0x172c8>
   28664:	ldr	r1, [r9, #12]
   28668:	ldr	r5, [r1, r6, lsl #2]
   2866c:	ldr	r1, [r4]
   28670:	add	r2, r1, r5, lsl #3
   28674:	ldrb	r2, [r2, #4]
   28678:	cmp	r2, #8
   2867c:	bne	28658 <__assert_fail@plt+0x17224>
   28680:	ldr	r1, [r1, r5, lsl #3]
   28684:	cmp	r1, #31
   28688:	bgt	28658 <__assert_fail@plt+0x17224>
   2868c:	ldr	r2, [r4, #80]	; 0x50
   28690:	mov	r3, #1
   28694:	tst	r2, r3, lsl r1
   28698:	beq	28658 <__assert_fail@plt+0x17224>
   2869c:	ldr	r0, [sp, #228]	; 0xe4
   286a0:	ldr	r7, [sp, #232]	; 0xe8
   286a4:	cmp	r0, r7
   286a8:	beq	286d8 <__assert_fail@plt+0x172a4>
   286ac:	mov	r0, #1
   286b0:	mov	r1, #24
   286b4:	bl	37f9c <__assert_fail@plt+0x26b68>
   286b8:	ldr	r1, [sp, #228]	; 0xe4
   286bc:	ldr	r2, [sp, #236]	; 0xec
   286c0:	str	r0, [r2, r1, lsl #2]
   286c4:	ldr	r0, [sp, #236]	; 0xec
   286c8:	ldr	r0, [r0, r1, lsl #2]
   286cc:	cmp	r0, #0
   286d0:	bne	28640 <__assert_fail@plt+0x1720c>
   286d4:	b	28c20 <__assert_fail@plt+0x177ec>
   286d8:	ldr	r0, [sp, #236]	; 0xec
   286dc:	lsl	r1, r7, #3
   286e0:	bl	38020 <__assert_fail@plt+0x26bec>
   286e4:	cmp	r0, #0
   286e8:	beq	28c20 <__assert_fail@plt+0x177ec>
   286ec:	str	r0, [sp, #236]	; 0xec
   286f0:	lsl	r0, r7, #1
   286f4:	str	r0, [sp, #232]	; 0xe8
   286f8:	b	286ac <__assert_fail@plt+0x17278>
   286fc:	mov	r6, #0
   28700:	str	r6, [fp, #-196]	; 0xffffff3c
   28704:	ldrb	r0, [r9, #52]	; 0x34
   28708:	tst	r0, #64	; 0x40
   2870c:	bne	28770 <__assert_fail@plt+0x1733c>
   28710:	ldr	r5, [sp, #12]
   28714:	b	2792c <__assert_fail@plt+0x164f8>
   28718:	ldr	r0, [sp, #192]	; 0xc0
   2871c:	and	r0, r0, #2
   28720:	eor	r3, r0, #10
   28724:	b	282c4 <__assert_fail@plt+0x16e90>
   28728:	cmn	r5, #1
   2872c:	ble	28768 <__assert_fail@plt+0x17334>
   28730:	ldr	r0, [sp, #152]	; 0x98
   28734:	cmp	r0, r5
   28738:	beq	28c28 <__assert_fail@plt+0x177f4>
   2873c:	ldr	r0, [sp, #184]	; 0xb8
   28740:	cmp	r0, #2
   28744:	blt	28794 <__assert_fail@plt+0x17360>
   28748:	ldr	r0, [sp, #112]	; 0x70
   2874c:	mov	r1, r5
   28750:	ldr	r4, [r0, r1, lsl #2]
   28754:	cmn	r4, #1
   28758:	bne	28818 <__assert_fail@plt+0x173e4>
   2875c:	sub	r1, r1, #1
   28760:	cmn	r1, #1
   28764:	bne	28750 <__assert_fail@plt+0x1731c>
   28768:	ldr	r3, [sp, #164]	; 0xa4
   2876c:	b	28840 <__assert_fail@plt+0x1740c>
   28770:	add	r1, r9, #4
   28774:	add	r0, sp, #104	; 0x68
   28778:	bl	317f0 <__assert_fail@plt+0x203bc>
   2877c:	ldr	r5, [sp, #12]
   28780:	cmp	r0, #0
   28784:	str	r0, [fp, #-196]	; 0xffffff3c
   28788:	beq	2792c <__assert_fail@plt+0x164f8>
   2878c:	mov	sl, r0
   28790:	b	28234 <__assert_fail@plt+0x16e00>
   28794:	ldr	r0, [sp, #108]	; 0x6c
   28798:	ldr	r1, [sp, #172]	; 0xac
   2879c:	mov	r3, #1
   287a0:	ldrb	r0, [r0, r5]
   287a4:	ubfx	r2, r0, #5, #3
   287a8:	ldr	r1, [r1, r2, lsl #2]
   287ac:	and	r2, r0, #31
   287b0:	tst	r1, r3, lsl r2
   287b4:	moveq	r3, #0
   287b8:	cmpeq	r0, #10
   287bc:	bne	28840 <__assert_fail@plt+0x1740c>
   287c0:	b	28830 <__assert_fail@plt+0x173fc>
   287c4:	mov	r0, #0
   287c8:	str	r0, [sp, #12]
   287cc:	b	28bec <__assert_fail@plt+0x177b8>
   287d0:	mov	r0, r4
   287d4:	mov	r5, lr
   287d8:	bl	11350 <iswalnum@plt>
   287dc:	mov	r3, #1
   287e0:	cmp	r4, #95	; 0x5f
   287e4:	beq	28c18 <__assert_fail@plt+0x177e4>
   287e8:	cmp	r0, #0
   287ec:	mov	lr, r5
   287f0:	beq	2831c <__assert_fail@plt+0x16ee8>
   287f4:	b	28338 <__assert_fail@plt+0x16f04>
   287f8:	mov	r0, r6
   287fc:	bl	11350 <iswalnum@plt>
   28800:	ldr	r1, [sp, #48]	; 0x30
   28804:	cmp	r6, #95	; 0x5f
   28808:	beq	278fc <__assert_fail@plt+0x164c8>
   2880c:	cmp	r0, #0
   28810:	beq	27870 <__assert_fail@plt+0x1643c>
   28814:	b	278fc <__assert_fail@plt+0x164c8>
   28818:	ldrb	r0, [sp, #182]	; 0xb6
   2881c:	cmp	r0, #0
   28820:	bne	28c38 <__assert_fail@plt+0x17804>
   28824:	mov	r3, #0
   28828:	cmp	r4, #10
   2882c:	bne	28840 <__assert_fail@plt+0x1740c>
   28830:	ldrb	r0, [sp, #181]	; 0xb5
   28834:	cmp	r0, #0
   28838:	movwne	r0, #1
   2883c:	lsl	r3, r0, #1
   28840:	ldr	r0, [r9, #8]
   28844:	cmp	r0, #1
   28848:	blt	2793c <__assert_fail@plt+0x16508>
   2884c:	str	r6, [sp, #24]
   28850:	ldr	r6, [sp, #188]	; 0xbc
   28854:	ldr	r7, [r9, #12]
   28858:	mov	ip, r5
   2885c:	and	r1, r3, #8
   28860:	and	r2, r3, #2
   28864:	and	r3, r3, #1
   28868:	ldr	r6, [r6]
   2886c:	b	2887c <__assert_fail@plt+0x17448>
   28870:	add	r7, r7, #4
   28874:	subs	r0, r0, #1
   28878:	beq	2891c <__assert_fail@plt+0x174e8>
   2887c:	ldr	r4, [r7]
   28880:	add	r5, r6, r4, lsl #3
   28884:	mov	lr, r4
   28888:	ldr	r5, [r5, #4]
   2888c:	uxtb	r4, r5
   28890:	cmp	r4, #2
   28894:	bne	28870 <__assert_fail@plt+0x1743c>
   28898:	movw	r4, #65280	; 0xff00
   2889c:	movt	r4, #3
   288a0:	tst	r5, r4
   288a4:	beq	288e4 <__assert_fail@plt+0x174b0>
   288a8:	cmp	r3, #0
   288ac:	bne	288b8 <__assert_fail@plt+0x17484>
   288b0:	ands	r4, r5, #1024	; 0x400
   288b4:	bne	28870 <__assert_fail@plt+0x1743c>
   288b8:	cmp	r3, #0
   288bc:	andsne	r4, r5, #2048	; 0x800
   288c0:	bne	28870 <__assert_fail@plt+0x1743c>
   288c4:	cmp	r2, #0
   288c8:	bne	288d4 <__assert_fail@plt+0x174a0>
   288cc:	ands	r4, r5, #8192	; 0x2000
   288d0:	bne	28870 <__assert_fail@plt+0x1743c>
   288d4:	cmp	r1, #0
   288d8:	bne	288e4 <__assert_fail@plt+0x174b0>
   288dc:	ands	r5, r5, #32768	; 0x8000
   288e0:	bne	28870 <__assert_fail@plt+0x1743c>
   288e4:	ldr	r1, [sp, #44]	; 0x2c
   288e8:	clz	r0, lr
   288ec:	ldr	r6, [sp, #24]
   288f0:	cmp	lr, #0
   288f4:	mov	sl, ip
   288f8:	mov	r5, ip
   288fc:	lsr	r0, r0, #5
   28900:	movwne	lr, #1
   28904:	mvneq	sl, #0
   28908:	str	lr, [sp, #64]	; 0x40
   2890c:	orr	r0, r1, r0
   28910:	cmp	r0, #0
   28914:	bne	27944 <__assert_fail@plt+0x16510>
   28918:	b	2861c <__assert_fail@plt+0x171e8>
   2891c:	ldr	r6, [sp, #24]
   28920:	mov	r0, #0
   28924:	mov	r5, ip
   28928:	b	27940 <__assert_fail@plt+0x1650c>
   2892c:	ldr	r3, [sp, #164]	; 0xa4
   28930:	movw	lr, #65280	; 0xff00
   28934:	movt	lr, #3
   28938:	b	28a84 <__assert_fail@plt+0x17650>
   2893c:	ldr	r0, [sp, #192]	; 0xc0
   28940:	and	r0, r0, #2
   28944:	eor	r3, r0, #10
   28948:	b	28a84 <__assert_fail@plt+0x17650>
   2894c:	mov	r0, r7
   28950:	bl	11350 <iswalnum@plt>
   28954:	mov	r3, #1
   28958:	cmp	r7, #95	; 0x5f
   2895c:	beq	28930 <__assert_fail@plt+0x174fc>
   28960:	movw	lr, #65280	; 0xff00
   28964:	cmp	r0, #0
   28968:	movt	lr, #3
   2896c:	beq	28a68 <__assert_fail@plt+0x17634>
   28970:	b	28a84 <__assert_fail@plt+0x17650>
   28974:	ldr	r1, [r5]
   28978:	cmp	r1, #0
   2897c:	bne	284c4 <__assert_fail@plt+0x17090>
   28980:	cmp	r6, #1
   28984:	blt	28b8c <__assert_fail@plt+0x17758>
   28988:	ldr	r0, [sp, #204]	; 0xcc
   2898c:	lsl	r4, r6, #2
   28990:	mov	r9, r6
   28994:	sub	r0, r0, #4
   28998:	b	289b0 <__assert_fail@plt+0x1757c>
   2899c:	sub	r9, r9, #1
   289a0:	sub	r4, r4, #4
   289a4:	add	r1, r9, #1
   289a8:	cmp	r1, #2
   289ac:	blt	28b8c <__assert_fail@plt+0x17758>
   289b0:	ldr	r6, [r0, r9, lsl #2]
   289b4:	cmp	r6, #0
   289b8:	beq	2899c <__assert_fail@plt+0x17568>
   289bc:	ldrb	r1, [r6, #52]	; 0x34
   289c0:	tst	r1, #16
   289c4:	beq	2899c <__assert_fail@plt+0x17568>
   289c8:	sub	sl, r9, #1
   289cc:	cmp	r9, #0
   289d0:	str	r7, [sp, #24]
   289d4:	str	r5, [sp, #20]
   289d8:	ble	2892c <__assert_fail@plt+0x174f8>
   289dc:	ldr	r0, [sp, #152]	; 0x98
   289e0:	movw	lr, #65280	; 0xff00
   289e4:	movt	lr, #3
   289e8:	add	r0, r0, #1
   289ec:	cmp	r0, r9
   289f0:	beq	2893c <__assert_fail@plt+0x17508>
   289f4:	ldr	r0, [sp, #184]	; 0xb8
   289f8:	cmp	r0, #2
   289fc:	blt	28a28 <__assert_fail@plt+0x175f4>
   28a00:	ldr	r0, [sp, #112]	; 0x70
   28a04:	mov	r1, sl
   28a08:	ldr	r7, [r0, r1, lsl #2]
   28a0c:	cmn	r7, #1
   28a10:	bne	28a5c <__assert_fail@plt+0x17628>
   28a14:	sub	r1, r1, #1
   28a18:	cmn	r1, #1
   28a1c:	bne	28a08 <__assert_fail@plt+0x175d4>
   28a20:	ldr	r3, [sp, #164]	; 0xa4
   28a24:	b	28a84 <__assert_fail@plt+0x17650>
   28a28:	ldr	r0, [sp, #108]	; 0x6c
   28a2c:	ldr	r1, [sp, #172]	; 0xac
   28a30:	mov	r3, #1
   28a34:	add	r0, r0, r9
   28a38:	ldrb	r0, [r0, #-1]
   28a3c:	ubfx	r2, r0, #5, #3
   28a40:	ldr	r1, [r1, r2, lsl #2]
   28a44:	and	r2, r0, #31
   28a48:	tst	r1, r3, lsl r2
   28a4c:	moveq	r3, #0
   28a50:	cmpeq	r0, #10
   28a54:	bne	28a84 <__assert_fail@plt+0x17650>
   28a58:	b	28a74 <__assert_fail@plt+0x17640>
   28a5c:	ldrb	r0, [sp, #182]	; 0xb6
   28a60:	cmp	r0, #0
   28a64:	bne	2894c <__assert_fail@plt+0x17518>
   28a68:	mov	r3, #0
   28a6c:	cmp	r7, #10
   28a70:	bne	28a84 <__assert_fail@plt+0x17650>
   28a74:	ldrb	r0, [sp, #181]	; 0xb5
   28a78:	cmp	r0, #0
   28a7c:	movwne	r0, #1
   28a80:	lsl	r3, r0, #1
   28a84:	ldr	r0, [r6, #8]
   28a88:	cmp	r0, #1
   28a8c:	blt	28b18 <__assert_fail@plt+0x176e4>
   28a90:	ldr	r7, [r6, #12]
   28a94:	ldr	r6, [sp, #188]	; 0xbc
   28a98:	and	ip, r3, #8
   28a9c:	and	r2, r3, #2
   28aa0:	and	r3, r3, #1
   28aa4:	ldr	r6, [r6]
   28aa8:	b	28ab8 <__assert_fail@plt+0x17684>
   28aac:	add	r7, r7, #4
   28ab0:	subs	r0, r0, #1
   28ab4:	beq	28b18 <__assert_fail@plt+0x176e4>
   28ab8:	ldr	r8, [r7]
   28abc:	add	r5, r6, r8, lsl #3
   28ac0:	ldr	r5, [r5, #4]
   28ac4:	uxtb	r1, r5
   28ac8:	cmp	r1, #2
   28acc:	bne	28aac <__assert_fail@plt+0x17678>
   28ad0:	tst	r5, lr
   28ad4:	beq	28b1c <__assert_fail@plt+0x176e8>
   28ad8:	cmp	r3, #0
   28adc:	bne	28ae8 <__assert_fail@plt+0x176b4>
   28ae0:	ands	r1, r5, #1024	; 0x400
   28ae4:	bne	28aac <__assert_fail@plt+0x17678>
   28ae8:	cmp	r3, #0
   28aec:	andsne	r1, r5, #2048	; 0x800
   28af0:	bne	28aac <__assert_fail@plt+0x17678>
   28af4:	cmp	r2, #0
   28af8:	bne	28b04 <__assert_fail@plt+0x176d0>
   28afc:	ands	r1, r5, #8192	; 0x2000
   28b00:	bne	28aac <__assert_fail@plt+0x17678>
   28b04:	cmp	ip, #0
   28b08:	bne	28b1c <__assert_fail@plt+0x176e8>
   28b0c:	ands	r1, r5, #32768	; 0x8000
   28b10:	bne	28aac <__assert_fail@plt+0x17678>
   28b14:	b	28b1c <__assert_fail@plt+0x176e8>
   28b18:	mov	r8, #0
   28b1c:	ldr	r5, [sp, #20]
   28b20:	mov	r1, #0
   28b24:	mov	r2, r4
   28b28:	mov	r0, r5
   28b2c:	bl	11368 <memset@plt>
   28b30:	sub	r0, fp, #188	; 0xbc
   28b34:	ldr	r7, [sp, #24]
   28b38:	mov	r1, #0
   28b3c:	mov	r6, sl
   28b40:	stm	r0, {r5, r8, sl}
   28b44:	ldr	r0, [sp, #36]	; 0x24
   28b48:	str	r7, [fp, #-192]	; 0xffffff40
   28b4c:	str	r1, [r0]
   28b50:	str	r1, [r0, #4]
   28b54:	str	r1, [r0, #8]
   28b58:	add	r0, sp, #104	; 0x68
   28b5c:	sub	r1, fp, #192	; 0xc0
   28b60:	bl	355d0 <__assert_fail@plt+0x2419c>
   28b64:	mov	sl, r0
   28b68:	mov	r0, #0
   28b6c:	bl	138e8 <__assert_fail@plt+0x24b4>
   28b70:	cmp	sl, #0
   28b74:	bne	28be0 <__assert_fail@plt+0x177ac>
   28b78:	ldr	r0, [r7]
   28b7c:	cmp	r0, #0
   28b80:	beq	28974 <__assert_fail@plt+0x17540>
   28b84:	sub	r6, r9, #1
   28b88:	b	284c4 <__assert_fail@plt+0x17090>
   28b8c:	ldr	r4, [sp, #80]	; 0x50
   28b90:	ldr	r9, [sp, #76]	; 0x4c
   28b94:	mov	r0, r7
   28b98:	bl	138e8 <__assert_fail@plt+0x24b4>
   28b9c:	mov	r0, r5
   28ba0:	bl	138e8 <__assert_fail@plt+0x24b4>
   28ba4:	ldr	r8, [sp, #60]	; 0x3c
   28ba8:	add	r0, sp, #104	; 0x68
   28bac:	bl	31640 <__assert_fail@plt+0x2020c>
   28bb0:	ldr	r0, [fp, #-200]	; 0xffffff38
   28bb4:	mov	sl, #1
   28bb8:	add	r6, r0, r8
   28bbc:	cmp	r6, r9
   28bc0:	str	r6, [fp, #-200]	; 0xffffff38
   28bc4:	blt	29cd4 <__assert_fail@plt+0x188a0>
   28bc8:	ldr	r7, [sp, #100]	; 0x64
   28bcc:	ldr	r5, [sp, #92]	; 0x5c
   28bd0:	ldr	r2, [sp, #88]	; 0x58
   28bd4:	cmp	r4, r6
   28bd8:	bge	275ec <__assert_fail@plt+0x161b8>
   28bdc:	b	29cd4 <__assert_fail@plt+0x188a0>
   28be0:	ldr	r4, [sp, #80]	; 0x50
   28be4:	ldr	r9, [sp, #76]	; 0x4c
   28be8:	str	r5, [sp, #12]
   28bec:	mov	r0, r7
   28bf0:	bl	138e8 <__assert_fail@plt+0x24b4>
   28bf4:	ldr	r0, [sp, #12]
   28bf8:	bl	138e8 <__assert_fail@plt+0x24b4>
   28bfc:	ldr	r8, [sp, #60]	; 0x3c
   28c00:	ldr	lr, [sp, #96]	; 0x60
   28c04:	cmp	sl, #0
   28c08:	beq	28c80 <__assert_fail@plt+0x1784c>
   28c0c:	cmp	sl, #1
   28c10:	beq	28ba8 <__assert_fail@plt+0x17774>
   28c14:	b	29cd4 <__assert_fail@plt+0x188a0>
   28c18:	mov	lr, r5
   28c1c:	b	28338 <__assert_fail@plt+0x16f04>
   28c20:	mov	sl, #12
   28c24:	b	2824c <__assert_fail@plt+0x16e18>
   28c28:	ldr	r0, [sp, #192]	; 0xc0
   28c2c:	and	r0, r0, #2
   28c30:	eor	r3, r0, #10
   28c34:	b	28840 <__assert_fail@plt+0x1740c>
   28c38:	mov	r0, r4
   28c3c:	bl	11350 <iswalnum@plt>
   28c40:	mov	r3, #1
   28c44:	cmp	r4, #95	; 0x5f
   28c48:	beq	28840 <__assert_fail@plt+0x1740c>
   28c4c:	cmp	r0, #0
   28c50:	beq	28824 <__assert_fail@plt+0x173f0>
   28c54:	b	28840 <__assert_fail@plt+0x1740c>
   28c58:	ldr	r0, [sp, #204]	; 0xcc
   28c5c:	bl	138e8 <__assert_fail@plt+0x24b4>
   28c60:	mov	r0, #0
   28c64:	str	r8, [sp, #200]	; 0xc8
   28c68:	str	r7, [sp, #204]	; 0xcc
   28c6c:	str	r6, [sp, #196]	; 0xc4
   28c70:	bl	138e8 <__assert_fail@plt+0x24b4>
   28c74:	mov	r0, #0
   28c78:	bl	138e8 <__assert_fail@plt+0x24b4>
   28c7c:	ldr	lr, [sp, #96]	; 0x60
   28c80:	ldr	r4, [sp, #84]	; 0x54
   28c84:	cmp	r4, #0
   28c88:	beq	29cd0 <__assert_fail@plt+0x1889c>
   28c8c:	ldr	r5, [sp, #32]
   28c90:	ldr	r9, [fp, #16]
   28c94:	cmp	r4, #1
   28c98:	beq	28cc0 <__assert_fail@plt+0x1788c>
   28c9c:	mvn	r0, r5
   28ca0:	mov	r1, #255	; 0xff
   28ca4:	mov	r6, lr
   28ca8:	add	r0, r0, r9
   28cac:	lsl	r2, r0, #3
   28cb0:	ldr	r0, [fp, #20]
   28cb4:	add	r0, r0, #8
   28cb8:	bl	11368 <memset@plt>
   28cbc:	mov	lr, r6
   28cc0:	ldr	r2, [fp, #20]
   28cc4:	cmp	r4, #2
   28cc8:	mov	r0, #0
   28ccc:	ldr	r1, [sp, #196]	; 0xc4
   28cd0:	stm	r2, {r0, r1}
   28cd4:	bcc	29ba0 <__assert_fail@plt+0x1876c>
   28cd8:	ldr	r0, [sp, #52]	; 0x34
   28cdc:	ldrb	r0, [r0, #28]
   28ce0:	ands	r0, r0, #16
   28ce4:	bne	29ba0 <__assert_fail@plt+0x1876c>
   28ce8:	ldrb	r1, [lr, #88]	; 0x58
   28cec:	mov	r0, #0
   28cf0:	tst	r1, #1
   28cf4:	mov	r1, #0
   28cf8:	beq	28d0c <__assert_fail@plt+0x178d8>
   28cfc:	ldr	r2, [lr, #76]	; 0x4c
   28d00:	mov	r1, #0
   28d04:	cmp	r2, #0
   28d08:	movwgt	r1, #1
   28d0c:	ldr	r2, [sp, #52]	; 0x34
   28d10:	cmp	r1, #0
   28d14:	mov	r1, #0
   28d18:	ldr	r7, [r2]
   28d1c:	movw	r2, #42960	; 0xa7d0
   28d20:	movt	r2, #3
   28d24:	vldr	d16, [r2]
   28d28:	ldr	r2, [r2, #8]
   28d2c:	str	r2, [fp, #-40]	; 0xffffffd8
   28d30:	sub	r2, fp, #192	; 0xc0
   28d34:	add	r6, r2, #12
   28d38:	mov	r2, #16
   28d3c:	vstr	d16, [fp, #-48]	; 0xffffffd0
   28d40:	str	r6, [fp, #-184]	; 0xffffff48
   28d44:	str	r2, [fp, #-188]	; 0xffffff44
   28d48:	str	r0, [fp, #-192]	; 0xffffff40
   28d4c:	beq	28d6c <__assert_fail@plt+0x17938>
   28d50:	mov	r0, #48	; 0x30
   28d54:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   28d58:	cmp	r0, #0
   28d5c:	str	r0, [fp, #-40]	; 0xffffffd8
   28d60:	beq	29bbc <__assert_fail@plt+0x18788>
   28d64:	ldr	r0, [fp, #-192]	; 0xffffff40
   28d68:	sub	r1, fp, #48	; 0x30
   28d6c:	ldr	sl, [r7, #72]	; 0x48
   28d70:	cmp	r0, r4
   28d74:	str	r1, [sp, #88]	; 0x58
   28d78:	str	r6, [sp, #72]	; 0x48
   28d7c:	str	r7, [sp, #76]	; 0x4c
   28d80:	bcs	28e6c <__assert_fail@plt+0x17a38>
   28d84:	sub	r0, fp, #192	; 0xc0
   28d88:	mov	r1, r4
   28d8c:	mov	r2, r6
   28d90:	mov	r3, #8
   28d94:	bl	380f8 <__assert_fail@plt+0x26cc4>
   28d98:	cmp	r0, #0
   28d9c:	bne	28e70 <__assert_fail@plt+0x17a3c>
   28da0:	ldr	r0, [fp, #-184]	; 0xffffff48
   28da4:	ldr	r1, [sp, #72]	; 0x48
   28da8:	cmp	r0, r1
   28dac:	beq	28db4 <__assert_fail@plt+0x17980>
   28db0:	bl	138e8 <__assert_fail@plt+0x24b4>
   28db4:	ldr	r0, [sp, #72]	; 0x48
   28db8:	mov	sl, #12
   28dbc:	str	r0, [fp, #-184]	; 0xffffff48
   28dc0:	mov	r0, #16
   28dc4:	str	r0, [fp, #-188]	; 0xffffff44
   28dc8:	mov	r0, #0
   28dcc:	str	r0, [fp, #-192]	; 0xffffff40
   28dd0:	ldr	r0, [sp, #88]	; 0x58
   28dd4:	cmp	r0, #0
   28dd8:	beq	29cd4 <__assert_fail@plt+0x188a0>
   28ddc:	ldr	r0, [sp, #88]	; 0x58
   28de0:	ldr	r1, [r0]
   28de4:	ldr	r0, [r0, #8]
   28de8:	cmp	r1, #1
   28dec:	blt	29df0 <__assert_fail@plt+0x189bc>
   28df0:	ldr	r4, [sp, #88]	; 0x58
   28df4:	mov	r5, #0
   28df8:	mov	r6, #0
   28dfc:	add	r0, r0, r5
   28e00:	ldr	r0, [r0, #20]
   28e04:	bl	138e8 <__assert_fail@plt+0x24b4>
   28e08:	ldr	r0, [r4, #8]
   28e0c:	add	r0, r0, r5
   28e10:	ldr	r0, [r0, #8]
   28e14:	bl	138e8 <__assert_fail@plt+0x24b4>
   28e18:	ldr	r1, [r4]
   28e1c:	ldr	r0, [r4, #8]
   28e20:	add	r6, r6, #1
   28e24:	add	r5, r5, #24
   28e28:	cmp	r6, r1
   28e2c:	blt	28dfc <__assert_fail@plt+0x179c8>
   28e30:	b	29df0 <__assert_fail@plt+0x189bc>
   28e34:	ldr	r1, [r3, #8]
   28e38:	cmp	r1, #0
   28e3c:	beq	28e4c <__assert_fail@plt+0x17a18>
   28e40:	ldrsb	r1, [r4, #28]
   28e44:	cmp	r1, #0
   28e48:	bmi	272b4 <__assert_fail@plt+0x15e80>
   28e4c:	mov	r0, #0
   28e50:	cmp	r6, #0
   28e54:	str	r0, [sp, #72]	; 0x48
   28e58:	beq	29bb4 <__assert_fail@plt+0x18780>
   28e5c:	cmp	ip, #0
   28e60:	mov	r6, #0
   28e64:	bne	29d28 <__assert_fail@plt+0x188f4>
   28e68:	b	272b8 <__assert_fail@plt+0x15e84>
   28e6c:	str	r4, [fp, #-192]	; 0xffffff40
   28e70:	ldr	r6, [fp, #20]
   28e74:	ldr	r0, [fp, #-184]	; 0xffffff48
   28e78:	lsl	r2, r4, #3
   28e7c:	str	r2, [sp, #64]	; 0x40
   28e80:	mov	r1, r6
   28e84:	str	r0, [sp, #68]	; 0x44
   28e88:	bl	111e8 <memcpy@plt>
   28e8c:	ldr	r3, [r6]
   28e90:	ldr	r0, [r6, #4]
   28e94:	mov	r6, #0
   28e98:	cmp	r3, r0
   28e9c:	ble	28f44 <__assert_fail@plt+0x17b10>
   28ea0:	mov	r0, r6
   28ea4:	bl	138e8 <__assert_fail@plt+0x24b4>
   28ea8:	ldr	r0, [fp, #-184]	; 0xffffff48
   28eac:	ldr	r6, [sp, #72]	; 0x48
   28eb0:	cmp	r0, r6
   28eb4:	beq	28ebc <__assert_fail@plt+0x17a88>
   28eb8:	bl	138e8 <__assert_fail@plt+0x24b4>
   28ebc:	str	r6, [fp, #-184]	; 0xffffff48
   28ec0:	ldr	r6, [sp, #88]	; 0x58
   28ec4:	ldr	lr, [sp, #96]	; 0x60
   28ec8:	mov	r0, #16
   28ecc:	str	r0, [fp, #-188]	; 0xffffff44
   28ed0:	mov	r0, #0
   28ed4:	str	r0, [fp, #-192]	; 0xffffff40
   28ed8:	cmp	r6, #0
   28edc:	beq	29ba0 <__assert_fail@plt+0x1876c>
   28ee0:	ldr	r1, [r6]
   28ee4:	ldr	r0, [r6, #8]
   28ee8:	mov	r7, lr
   28eec:	cmp	r1, #1
   28ef0:	blt	28f30 <__assert_fail@plt+0x17afc>
   28ef4:	mov	r4, #0
   28ef8:	mov	r5, #0
   28efc:	add	r0, r0, r4
   28f00:	ldr	r0, [r0, #20]
   28f04:	bl	138e8 <__assert_fail@plt+0x24b4>
   28f08:	ldr	r0, [r6, #8]
   28f0c:	add	r0, r0, r4
   28f10:	ldr	r0, [r0, #8]
   28f14:	bl	138e8 <__assert_fail@plt+0x24b4>
   28f18:	ldr	r1, [r6]
   28f1c:	ldr	r0, [r6, #8]
   28f20:	add	r5, r5, #1
   28f24:	add	r4, r4, #24
   28f28:	cmp	r5, r1
   28f2c:	blt	28efc <__assert_fail@plt+0x17ac8>
   28f30:	bl	138e8 <__assert_fail@plt+0x24b4>
   28f34:	ldr	r5, [sp, #32]
   28f38:	ldr	r4, [sp, #84]	; 0x54
   28f3c:	mov	lr, r7
   28f40:	b	29ba0 <__assert_fail@plt+0x1876c>
   28f44:	ldr	r0, [fp, #20]
   28f48:	mov	r8, #1
   28f4c:	mov	ip, #0
   28f50:	mov	r6, #0
   28f54:	mov	lr, #0
   28f58:	add	r0, r0, #4
   28f5c:	str	r0, [sp, #52]	; 0x34
   28f60:	lsl	r0, r4, #4
   28f64:	str	r0, [sp, #44]	; 0x2c
   28f68:	mov	r0, #0
   28f6c:	str	r0, [sp, #60]	; 0x3c
   28f70:	ldr	r0, [sp, #76]	; 0x4c
   28f74:	ldr	r0, [r0]
   28f78:	add	r1, r0, sl, lsl #3
   28f7c:	ldr	r7, [r1, #4]
   28f80:	uxtb	r2, r7
   28f84:	cmp	r2, #9
   28f88:	beq	28fb8 <__assert_fail@plt+0x17b84>
   28f8c:	cmp	r2, #8
   28f90:	bne	29040 <__assert_fail@plt+0x17c0c>
   28f94:	ldr	r0, [r0, sl, lsl #3]
   28f98:	add	r0, r0, #1
   28f9c:	cmp	r0, r4
   28fa0:	bge	29040 <__assert_fail@plt+0x17c0c>
   28fa4:	ldr	r1, [fp, #20]
   28fa8:	str	r3, [r1, r0, lsl #3]!
   28fac:	mvn	r0, #0
   28fb0:	str	r0, [r1, #4]
   28fb4:	b	29040 <__assert_fail@plt+0x17c0c>
   28fb8:	ldr	r0, [r0, sl, lsl #3]
   28fbc:	add	r0, r0, #1
   28fc0:	cmp	r0, r4
   28fc4:	bge	29040 <__assert_fail@plt+0x17c0c>
   28fc8:	ldr	r1, [fp, #20]
   28fcc:	ldr	r2, [r1, r0, lsl #3]
   28fd0:	cmp	r2, r3
   28fd4:	bge	28fe8 <__assert_fail@plt+0x17bb4>
   28fd8:	add	r0, r1, r0, lsl #3
   28fdc:	str	r3, [r0, #4]
   28fe0:	ldr	r0, [sp, #68]	; 0x44
   28fe4:	b	29008 <__assert_fail@plt+0x17bd4>
   28fe8:	tst	r7, #524288	; 0x80000
   28fec:	beq	29034 <__assert_fail@plt+0x17c00>
   28ff0:	ldr	r1, [sp, #68]	; 0x44
   28ff4:	ldr	r1, [r1, r0, lsl #3]
   28ff8:	cmn	r1, #1
   28ffc:	beq	29034 <__assert_fail@plt+0x17c00>
   29000:	ldr	r0, [fp, #20]
   29004:	ldr	r1, [sp, #68]	; 0x44
   29008:	ldr	r2, [sp, #64]	; 0x40
   2900c:	str	r6, [sp, #48]	; 0x30
   29010:	mov	r7, r3
   29014:	mov	r6, ip
   29018:	str	lr, [sp, #56]	; 0x38
   2901c:	bl	111e8 <memcpy@plt>
   29020:	mov	ip, r6
   29024:	ldr	lr, [sp, #56]	; 0x38
   29028:	ldr	r6, [sp, #48]	; 0x30
   2902c:	mov	r3, r7
   29030:	b	29040 <__assert_fail@plt+0x17c0c>
   29034:	ldr	r1, [fp, #20]
   29038:	add	r0, r1, r0, lsl #3
   2903c:	str	r3, [r0, #4]
   29040:	ldr	r0, [fp, #20]
   29044:	ldr	r0, [r0, #4]
   29048:	cmp	r3, r0
   2904c:	ldreq	r0, [sp, #200]	; 0xc8
   29050:	cmpeq	sl, r0
   29054:	beq	290c0 <__assert_fail@plt+0x17c8c>
   29058:	ldr	r0, [sp, #88]	; 0x58
   2905c:	cmp	r0, #0
   29060:	beq	29190 <__assert_fail@plt+0x17d5c>
   29064:	cmp	lr, #1
   29068:	blt	29190 <__assert_fail@plt+0x17d5c>
   2906c:	mov	r0, lr
   29070:	mov	lr, r6
   29074:	subs	r1, r0, #1
   29078:	str	r0, [sp, #56]	; 0x38
   2907c:	beq	290a8 <__assert_fail@plt+0x17c74>
   29080:	mov	r0, #0
   29084:	add	r2, r0, r1
   29088:	lsr	r6, r2, #1
   2908c:	ldr	r7, [ip, r6, lsl #2]
   29090:	cmp	r7, sl
   29094:	addlt	r0, r8, r2, lsr #1
   29098:	movge	r1, r6
   2909c:	cmp	r0, r1
   290a0:	bcc	29084 <__assert_fail@plt+0x17c50>
   290a4:	b	290ac <__assert_fail@plt+0x17c78>
   290a8:	mov	r0, #0
   290ac:	ldr	r0, [ip, r0, lsl #2]
   290b0:	mov	r6, lr
   290b4:	ldr	lr, [sp, #56]	; 0x38
   290b8:	cmp	r0, sl
   290bc:	bne	29190 <__assert_fail@plt+0x17d5c>
   290c0:	ldr	r7, [sp, #88]	; 0x58
   290c4:	cmp	r7, #0
   290c8:	beq	29b04 <__assert_fail@plt+0x186d0>
   290cc:	ldr	r1, [sp, #52]	; 0x34
   290d0:	mov	r0, r4
   290d4:	b	290e4 <__assert_fail@plt+0x17cb0>
   290d8:	subs	r0, r0, #1
   290dc:	add	r1, r1, #8
   290e0:	beq	29b04 <__assert_fail@plt+0x186d0>
   290e4:	ldr	r2, [r1, #-4]
   290e8:	cmp	r2, #0
   290ec:	bmi	290d8 <__assert_fail@plt+0x17ca4>
   290f0:	ldr	r2, [r1]
   290f4:	cmn	r2, #1
   290f8:	bne	290d8 <__assert_fail@plt+0x17ca4>
   290fc:	ldr	r0, [r7]
   29100:	cmp	r0, #0
   29104:	beq	29b04 <__assert_fail@plt+0x186d0>
   29108:	sub	r0, r0, #1
   2910c:	mov	sl, r4
   29110:	mov	r9, r6
   29114:	ldr	r6, [sp, #64]	; 0x40
   29118:	str	r0, [r7]
   2911c:	add	r5, r0, r0, lsl #1
   29120:	ldr	r4, [r7, #8]
   29124:	mov	r2, r6
   29128:	ldr	r0, [r4, r5, lsl #3]!
   2912c:	ldr	r1, [r4, #8]
   29130:	str	r0, [sp, #80]	; 0x50
   29134:	ldr	r0, [fp, #20]
   29138:	bl	111e8 <memcpy@plt>
   2913c:	ldr	r0, [r4, #8]
   29140:	mov	r2, r6
   29144:	add	r1, r0, sl, lsl #3
   29148:	ldr	r0, [sp, #68]	; 0x44
   2914c:	bl	111e8 <memcpy@plt>
   29150:	mov	r0, r9
   29154:	bl	138e8 <__assert_fail@plt+0x24b4>
   29158:	ldr	r0, [r7, #8]
   2915c:	add	r0, r0, r5, lsl #3
   29160:	ldr	r0, [r0, #8]
   29164:	bl	138e8 <__assert_fail@plt+0x24b4>
   29168:	ldr	r0, [r7, #8]
   2916c:	ldr	r3, [sp, #80]	; 0x50
   29170:	add	r0, r0, r5, lsl #3
   29174:	ldr	r5, [sp, #32]
   29178:	ldr	r6, [r0, #20]
   2917c:	ldr	r1, [r0, #12]
   29180:	ldr	sl, [r0, #4]
   29184:	ldr	lr, [r0, #16]
   29188:	mov	ip, r6
   2918c:	str	r1, [sp, #60]	; 0x3c
   29190:	ldr	r4, [sp, #188]	; 0xbc
   29194:	str	r3, [sp, #80]	; 0x50
   29198:	ldr	r0, [r4]
   2919c:	add	r1, r0, sl, lsl #3
   291a0:	ldr	r1, [r1, #4]
   291a4:	tst	r1, #8
   291a8:	bne	29240 <__assert_fail@plt+0x17e0c>
   291ac:	tst	r1, #1048576	; 0x100000
   291b0:	bne	292b8 <__assert_fail@plt+0x17e84>
   291b4:	uxtb	r1, r1
   291b8:	cmp	r1, #4
   291bc:	bne	292e0 <__assert_fail@plt+0x17eac>
   291c0:	ldr	r0, [r0, sl, lsl #3]
   291c4:	ldr	r1, [sp, #84]	; 0x54
   291c8:	mov	r7, #0
   291cc:	add	r0, r0, #1
   291d0:	cmp	r0, r1
   291d4:	bge	291e8 <__assert_fail@plt+0x17db4>
   291d8:	ldr	r1, [fp, #20]
   291dc:	ldr	r2, [r1, r0, lsl #3]!
   291e0:	ldr	r1, [r1, #4]
   291e4:	sub	r7, r1, r2
   291e8:	ldr	r1, [sp, #88]	; 0x58
   291ec:	cmp	r1, #0
   291f0:	beq	295c8 <__assert_fail@plt+0x18194>
   291f4:	ldr	r1, [sp, #84]	; 0x54
   291f8:	cmp	r0, r1
   291fc:	bge	29238 <__assert_fail@plt+0x17e04>
   29200:	ldr	r2, [fp, #20]
   29204:	ldr	r1, [r2, r0, lsl #3]
   29208:	cmn	r1, #1
   2920c:	beq	29238 <__assert_fail@plt+0x17e04>
   29210:	add	r0, r2, r0, lsl #3
   29214:	ldr	r0, [r0, #4]
   29218:	cmn	r0, #1
   2921c:	beq	29238 <__assert_fail@plt+0x17e04>
   29220:	cmp	r7, #0
   29224:	beq	295ec <__assert_fail@plt+0x181b8>
   29228:	ldr	r0, [sp, #132]	; 0x84
   2922c:	sub	r0, r0, r3
   29230:	cmp	r0, r7
   29234:	bge	2984c <__assert_fail@plt+0x18418>
   29238:	ldr	r7, [sp, #88]	; 0x58
   2923c:	b	294c4 <__assert_fail@plt+0x18090>
   29240:	ldr	r0, [sp, #204]	; 0xcc
   29244:	ldr	r4, [r4, #20]
   29248:	cmp	lr, #1
   2924c:	ldr	r0, [r0, r3, lsl #2]
   29250:	str	r0, [sp, #100]	; 0x64
   29254:	blt	29298 <__assert_fail@plt+0x17e64>
   29258:	mov	r0, #0
   2925c:	subs	r1, lr, #1
   29260:	beq	29284 <__assert_fail@plt+0x17e50>
   29264:	add	r2, r0, r1
   29268:	lsr	r3, r2, #1
   2926c:	ldr	r7, [ip, r3, lsl #2]
   29270:	cmp	r7, sl
   29274:	addlt	r0, r8, r2, lsr #1
   29278:	movge	r1, r3
   2927c:	cmp	r0, r1
   29280:	bcc	29264 <__assert_fail@plt+0x17e30>
   29284:	ldr	r0, [ip, r0, lsl #2]
   29288:	cmp	r0, sl
   2928c:	bne	29298 <__assert_fail@plt+0x17e64>
   29290:	str	lr, [sp, #56]	; 0x38
   29294:	b	293d8 <__assert_fail@plt+0x17fa4>
   29298:	ldr	r0, [sp, #60]	; 0x3c
   2929c:	cmp	r0, #0
   292a0:	beq	293ac <__assert_fail@plt+0x17f78>
   292a4:	cmp	lr, #0
   292a8:	bne	298a4 <__assert_fail@plt+0x18470>
   292ac:	mov	r0, #1
   292b0:	str	sl, [ip]
   292b4:	b	293d4 <__assert_fail@plt+0x17fa0>
   292b8:	mov	r0, r4
   292bc:	mov	r1, sl
   292c0:	add	r2, sp, #104	; 0x68
   292c4:	mov	r9, ip
   292c8:	bl	33f28 <__assert_fail@plt+0x22af4>
   292cc:	ldr	r3, [sp, #80]	; 0x50
   292d0:	mov	r1, r0
   292d4:	cmp	r1, #0
   292d8:	mov	ip, r9
   292dc:	bne	29314 <__assert_fail@plt+0x17ee0>
   292e0:	ldr	r0, [r4]
   292e4:	mov	r2, r3
   292e8:	mov	r7, r6
   292ec:	mov	r6, ip
   292f0:	add	r1, r0, sl, lsl #3
   292f4:	add	r0, sp, #104	; 0x68
   292f8:	bl	3428c <__assert_fail@plt+0x22e58>
   292fc:	ldr	r3, [sp, #80]	; 0x50
   29300:	mov	ip, r6
   29304:	mov	r6, r7
   29308:	mov	r1, #1
   2930c:	cmp	r0, #0
   29310:	beq	294b8 <__assert_fail@plt+0x18084>
   29314:	ldr	r0, [r4, #12]
   29318:	ldr	r7, [sp, #88]	; 0x58
   2931c:	add	r3, r1, r3
   29320:	ldr	sl, [r0, sl, lsl #2]
   29324:	cmp	r7, #0
   29328:	beq	29560 <__assert_fail@plt+0x1812c>
   2932c:	ldr	r0, [sp, #196]	; 0xc4
   29330:	cmp	r3, r0
   29334:	bgt	294c4 <__assert_fail@plt+0x18090>
   29338:	ldr	r0, [sp, #204]	; 0xcc
   2933c:	ldr	r0, [r0, r3, lsl #2]
   29340:	cmp	r0, #0
   29344:	beq	294c4 <__assert_fail@plt+0x18090>
   29348:	ldr	r1, [r0, #8]
   2934c:	cmp	r1, #1
   29350:	blt	294c4 <__assert_fail@plt+0x18090>
   29354:	ldr	r0, [r0, #12]
   29358:	mov	lr, ip
   2935c:	mov	ip, r6
   29360:	subs	r1, r1, #1
   29364:	mov	r2, #0
   29368:	beq	29390 <__assert_fail@plt+0x17f5c>
   2936c:	mov	r2, #0
   29370:	add	r4, r2, r1
   29374:	lsr	r7, r4, #1
   29378:	ldr	r6, [r0, r7, lsl #2]
   2937c:	cmp	r6, sl
   29380:	addlt	r2, r8, r4, lsr #1
   29384:	movge	r1, r7
   29388:	cmp	r2, r1
   2938c:	bcc	29370 <__assert_fail@plt+0x17f3c>
   29390:	ldr	r0, [r0, r2, lsl #2]
   29394:	mov	r6, ip
   29398:	mov	ip, lr
   2939c:	mov	lr, #0
   293a0:	cmp	r0, sl
   293a4:	beq	29768 <__assert_fail@plt+0x18334>
   293a8:	b	294b8 <__assert_fail@plt+0x18084>
   293ac:	mov	r0, #4
   293b0:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   293b4:	cmp	r0, #0
   293b8:	beq	29e98 <__assert_fail@plt+0x18a64>
   293bc:	mov	r6, r0
   293c0:	str	sl, [r0]
   293c4:	mov	r0, #1
   293c8:	str	r0, [sp, #60]	; 0x3c
   293cc:	mov	r0, #1
   293d0:	mov	ip, r6
   293d4:	str	r0, [sp, #56]	; 0x38
   293d8:	add	r0, sl, sl, lsl #1
   293dc:	add	r1, r4, r0, lsl #2
   293e0:	ldr	lr, [r1, #4]
   293e4:	cmp	lr, #1
   293e8:	blt	294b8 <__assert_fail@plt+0x18084>
   293ec:	ldr	r0, [sp, #100]	; 0x64
   293f0:	str	ip, [sp, #40]	; 0x28
   293f4:	ldr	ip, [r1, #8]
   293f8:	str	r6, [sp, #48]	; 0x30
   293fc:	mov	r6, #0
   29400:	ldr	r2, [r0, #8]
   29404:	mvn	r0, #0
   29408:	str	r0, [sp, #92]	; 0x5c
   2940c:	sub	sl, r2, #1
   29410:	cmp	r2, #1
   29414:	bge	29434 <__assert_fail@plt+0x18000>
   29418:	b	29420 <__assert_fail@plt+0x17fec>
   2941c:	ldr	r5, [sp, #32]
   29420:	add	r6, r6, #1
   29424:	cmp	r6, lr
   29428:	beq	29494 <__assert_fail@plt+0x18060>
   2942c:	cmp	r2, #1
   29430:	blt	29420 <__assert_fail@plt+0x17fec>
   29434:	ldr	r0, [sp, #100]	; 0x64
   29438:	ldr	r4, [ip, r6, lsl #2]
   2943c:	mov	r5, #0
   29440:	cmp	sl, #0
   29444:	ldr	r7, [r0, #12]
   29448:	beq	29470 <__assert_fail@plt+0x1803c>
   2944c:	mov	r3, sl
   29450:	add	r0, r5, r3
   29454:	lsr	r1, r0, #1
   29458:	ldr	r9, [r7, r1, lsl #2]
   2945c:	cmp	r9, r4
   29460:	addlt	r5, r8, r0, lsr #1
   29464:	movge	r3, r1
   29468:	cmp	r5, r3
   2946c:	bcc	29450 <__assert_fail@plt+0x1801c>
   29470:	ldr	r0, [r7, r5, lsl #2]
   29474:	cmp	r0, r4
   29478:	bne	2941c <__assert_fail@plt+0x17fe8>
   2947c:	ldr	r0, [sp, #92]	; 0x5c
   29480:	ldr	r5, [sp, #32]
   29484:	cmn	r0, #1
   29488:	bne	29570 <__assert_fail@plt+0x1813c>
   2948c:	str	r4, [sp, #92]	; 0x5c
   29490:	b	29420 <__assert_fail@plt+0x17fec>
   29494:	ldr	r6, [sp, #48]	; 0x30
   29498:	ldr	r3, [sp, #80]	; 0x50
   2949c:	ldr	ip, [sp, #40]	; 0x28
   294a0:	ldr	lr, [sp, #56]	; 0x38
   294a4:	ldr	sl, [sp, #92]	; 0x5c
   294a8:	cmn	sl, #1
   294ac:	bgt	29770 <__assert_fail@plt+0x1833c>
   294b0:	cmn	sl, #2
   294b4:	beq	29dfc <__assert_fail@plt+0x189c8>
   294b8:	ldr	r7, [sp, #88]	; 0x58
   294bc:	cmp	r7, #0
   294c0:	beq	29d5c <__assert_fail@plt+0x18928>
   294c4:	ldr	r0, [r7]
   294c8:	cmp	r0, #0
   294cc:	beq	29d34 <__assert_fail@plt+0x18900>
   294d0:	sub	r0, r0, #1
   294d4:	mov	sl, r6
   294d8:	ldr	r6, [sp, #64]	; 0x40
   294dc:	ldr	r9, [fp, #20]
   294e0:	str	r0, [r7]
   294e4:	add	r5, r0, r0, lsl #1
   294e8:	ldr	r4, [r7, #8]
   294ec:	mov	r2, r6
   294f0:	ldr	r0, [r4, r5, lsl #3]!
   294f4:	ldr	r1, [r4, #8]
   294f8:	str	r0, [sp, #80]	; 0x50
   294fc:	mov	r0, r9
   29500:	bl	111e8 <memcpy@plt>
   29504:	ldr	r0, [r4, #8]
   29508:	ldr	r4, [sp, #84]	; 0x54
   2950c:	mov	r2, r6
   29510:	add	r1, r0, r4, lsl #3
   29514:	ldr	r0, [sp, #68]	; 0x44
   29518:	bl	111e8 <memcpy@plt>
   2951c:	mov	r0, sl
   29520:	bl	138e8 <__assert_fail@plt+0x24b4>
   29524:	ldr	r0, [r7, #8]
   29528:	add	r0, r0, r5, lsl #3
   2952c:	ldr	r0, [r0, #8]
   29530:	bl	138e8 <__assert_fail@plt+0x24b4>
   29534:	ldr	r0, [r7, #8]
   29538:	ldr	r3, [sp, #80]	; 0x50
   2953c:	add	r0, r0, r5, lsl #3
   29540:	ldr	r5, [sp, #32]
   29544:	ldr	r6, [r0, #20]
   29548:	ldr	r1, [r0, #12]
   2954c:	ldr	sl, [r0, #4]
   29550:	ldr	lr, [r0, #16]
   29554:	mov	ip, r6
   29558:	str	r1, [sp, #60]	; 0x3c
   2955c:	b	29778 <__assert_fail@plt+0x18344>
   29560:	mov	lr, #0
   29564:	cmn	sl, #1
   29568:	bgt	29770 <__assert_fail@plt+0x1833c>
   2956c:	b	294b0 <__assert_fail@plt+0x1807c>
   29570:	ldr	lr, [sp, #56]	; 0x38
   29574:	ldr	sl, [sp, #88]	; 0x58
   29578:	ldr	r6, [sp, #48]	; 0x30
   2957c:	ldr	r3, [sp, #80]	; 0x50
   29580:	ldr	ip, [sp, #40]	; 0x28
   29584:	cmp	lr, #1
   29588:	blt	29634 <__assert_fail@plt+0x18200>
   2958c:	mov	r0, lr
   29590:	mov	r9, lr
   29594:	mov	r0, #0
   29598:	subs	r1, lr, #1
   2959c:	beq	2960c <__assert_fail@plt+0x181d8>
   295a0:	ldr	lr, [sp, #92]	; 0x5c
   295a4:	add	r2, r0, r1
   295a8:	lsr	r6, r2, #1
   295ac:	ldr	r7, [ip, r6, lsl #2]
   295b0:	cmp	r7, lr
   295b4:	addlt	r0, r8, r2, lsr #1
   295b8:	movge	r1, r6
   295bc:	cmp	r0, r1
   295c0:	bcc	295a4 <__assert_fail@plt+0x18170>
   295c4:	b	29610 <__assert_fail@plt+0x181dc>
   295c8:	cmp	r7, #0
   295cc:	beq	295ec <__assert_fail@plt+0x181b8>
   295d0:	ldr	r0, [r4, #12]
   295d4:	add	r3, r7, r3
   295d8:	mov	lr, #0
   295dc:	ldr	sl, [r0, sl, lsl #2]
   295e0:	cmn	sl, #1
   295e4:	bgt	29770 <__assert_fail@plt+0x1833c>
   295e8:	b	294b0 <__assert_fail@plt+0x1807c>
   295ec:	ldr	r0, [sp, #60]	; 0x3c
   295f0:	cmp	r0, #0
   295f4:	beq	2978c <__assert_fail@plt+0x18358>
   295f8:	cmp	lr, #0
   295fc:	bne	299d0 <__assert_fail@plt+0x1859c>
   29600:	str	sl, [ip]
   29604:	mov	r2, #1
   29608:	b	297b8 <__assert_fail@plt+0x18384>
   2960c:	ldr	lr, [sp, #92]	; 0x5c
   29610:	ldr	r0, [ip, r0, lsl #2]
   29614:	ldr	r6, [sp, #48]	; 0x30
   29618:	cmp	r0, lr
   2961c:	mov	lr, r9
   29620:	bne	29634 <__assert_fail@plt+0x18200>
   29624:	mov	sl, r4
   29628:	cmn	sl, #1
   2962c:	bgt	29770 <__assert_fail@plt+0x1833c>
   29630:	b	294b0 <__assert_fail@plt+0x1807c>
   29634:	cmp	sl, #0
   29638:	beq	294a4 <__assert_fail@plt+0x18070>
   2963c:	ldr	r6, [sl]
   29640:	ldr	r0, [sl, #4]
   29644:	add	r1, r6, #1
   29648:	cmp	r1, r0
   2964c:	str	r1, [sl]
   29650:	bne	29684 <__assert_fail@plt+0x18250>
   29654:	ldr	r0, [sl, #8]
   29658:	add	r1, r1, r1, lsl #1
   2965c:	lsl	r1, r1, #4
   29660:	bl	38020 <__assert_fail@plt+0x26bec>
   29664:	cmp	r0, #0
   29668:	beq	29df8 <__assert_fail@plt+0x189c4>
   2966c:	str	r0, [sl, #8]
   29670:	ldr	r3, [sp, #80]	; 0x50
   29674:	ldr	r1, [sl, #4]
   29678:	lsl	r1, r1, #1
   2967c:	str	r1, [sl, #4]
   29680:	b	29688 <__assert_fail@plt+0x18254>
   29684:	ldr	r0, [sl, #8]
   29688:	add	r6, r6, r6, lsl #1
   2968c:	str	r3, [r0, r6, lsl #3]!
   29690:	str	r4, [r0, #4]
   29694:	ldr	r0, [sp, #44]	; 0x2c
   29698:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2969c:	ldr	r1, [sl, #8]
   296a0:	cmp	r0, #0
   296a4:	add	r4, r1, r6, lsl #3
   296a8:	str	r0, [r4, #8]!
   296ac:	beq	29df8 <__assert_fail@plt+0x189c4>
   296b0:	ldr	r5, [sp, #64]	; 0x40
   296b4:	ldr	r1, [fp, #20]
   296b8:	mov	r2, r5
   296bc:	bl	111e8 <memcpy@plt>
   296c0:	ldr	r0, [r4]
   296c4:	ldr	r1, [sp, #84]	; 0x54
   296c8:	mov	r2, r5
   296cc:	add	r0, r0, r1, lsl #3
   296d0:	ldr	r1, [sp, #68]	; 0x44
   296d4:	bl	111e8 <memcpy@plt>
   296d8:	ldr	r0, [sl, #8]
   296dc:	ldr	lr, [sp, #56]	; 0x38
   296e0:	add	r7, r0, r6, lsl #3
   296e4:	cmp	lr, #1
   296e8:	mov	r6, r7
   296ec:	str	lr, [r6, #16]!
   296f0:	sub	r5, r6, #4
   296f4:	blt	29744 <__assert_fail@plt+0x18310>
   296f8:	lsl	r4, lr, #2
   296fc:	str	lr, [r5]
   29700:	mov	r0, r4
   29704:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   29708:	ldr	sl, [sp, #92]	; 0x5c
   2970c:	cmp	r0, #0
   29710:	str	r0, [r7, #20]
   29714:	beq	29ea0 <__assert_fail@plt+0x18a6c>
   29718:	ldr	r6, [sp, #48]	; 0x30
   2971c:	mov	r2, r4
   29720:	mov	r1, r6
   29724:	bl	111e8 <memcpy@plt>
   29728:	ldr	r5, [sp, #32]
   2972c:	ldr	r3, [sp, #80]	; 0x50
   29730:	ldr	ip, [sp, #40]	; 0x28
   29734:	ldr	lr, [sp, #56]	; 0x38
   29738:	cmn	sl, #1
   2973c:	bgt	29770 <__assert_fail@plt+0x1833c>
   29740:	b	294b0 <__assert_fail@plt+0x1807c>
   29744:	mov	r0, #0
   29748:	ldr	r6, [sp, #48]	; 0x30
   2974c:	ldr	r3, [sp, #80]	; 0x50
   29750:	ldr	ip, [sp, #40]	; 0x28
   29754:	ldr	sl, [sp, #92]	; 0x5c
   29758:	str	r0, [r5]
   2975c:	str	r0, [r5, #4]
   29760:	str	r0, [r5, #8]
   29764:	ldr	r5, [sp, #32]
   29768:	cmn	sl, #1
   2976c:	ble	294b0 <__assert_fail@plt+0x1807c>
   29770:	ldr	r4, [sp, #84]	; 0x54
   29774:	ldr	r9, [fp, #20]
   29778:	ldr	r0, [r9, #4]
   2977c:	ldr	r9, [fp, #16]
   29780:	cmp	r3, r0
   29784:	ble	28f70 <__assert_fail@plt+0x17b3c>
   29788:	b	28ea0 <__assert_fail@plt+0x17a6c>
   2978c:	mov	r0, #4
   29790:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   29794:	cmp	r0, #0
   29798:	beq	29e98 <__assert_fail@plt+0x18a64>
   2979c:	ldr	r3, [sp, #80]	; 0x50
   297a0:	mov	r6, r0
   297a4:	str	sl, [r0]
   297a8:	mov	r0, #1
   297ac:	mov	r2, #1
   297b0:	str	r0, [sp, #60]	; 0x3c
   297b4:	mov	ip, r6
   297b8:	ldr	r0, [sp, #204]	; 0xcc
   297bc:	ldr	r0, [r0, r3, lsl #2]
   297c0:	ldr	r1, [r0, #8]
   297c4:	cmp	r1, #1
   297c8:	blt	292e0 <__assert_fail@plt+0x17eac>
   297cc:	str	r2, [sp, #56]	; 0x38
   297d0:	ldr	r2, [r4, #20]
   297d4:	str	r7, [sp, #100]	; 0x64
   297d8:	add	r7, sl, sl, lsl #1
   297dc:	ldr	lr, [r0, #12]
   297e0:	mov	r9, ip
   297e4:	str	r6, [sp, #48]	; 0x30
   297e8:	add	r2, r2, r7, lsl #2
   297ec:	ldr	r2, [r2, #8]
   297f0:	ldr	r2, [r2]
   297f4:	str	r2, [sp, #92]	; 0x5c
   297f8:	subs	r2, r1, #1
   297fc:	mov	r1, #0
   29800:	beq	2982c <__assert_fail@plt+0x183f8>
   29804:	ldr	ip, [sp, #92]	; 0x5c
   29808:	add	r0, r1, r2
   2980c:	lsr	r7, r0, #1
   29810:	ldr	r6, [lr, r7, lsl #2]
   29814:	cmp	r6, ip
   29818:	addlt	r1, r8, r0, lsr #1
   2981c:	movge	r2, r7
   29820:	cmp	r1, r2
   29824:	bcc	29808 <__assert_fail@plt+0x183d4>
   29828:	b	29830 <__assert_fail@plt+0x183fc>
   2982c:	ldr	ip, [sp, #92]	; 0x5c
   29830:	ldr	r0, [lr, r1, lsl #2]
   29834:	ldr	r6, [sp, #48]	; 0x30
   29838:	ldr	r1, [sp, #100]	; 0x64
   2983c:	cmp	r0, ip
   29840:	bne	292d4 <__assert_fail@plt+0x17ea0>
   29844:	mov	ip, r9
   29848:	b	294a0 <__assert_fail@plt+0x1806c>
   2984c:	ldr	r2, [sp, #108]	; 0x6c
   29850:	str	r6, [sp, #48]	; 0x30
   29854:	mov	r6, ip
   29858:	mov	r9, r3
   2985c:	add	r0, r2, r1
   29860:	add	r1, r2, r3
   29864:	mov	r2, r7
   29868:	bl	11320 <bcmp@plt>
   2986c:	cmp	r0, #0
   29870:	beq	29884 <__assert_fail@plt+0x18450>
   29874:	mov	ip, r6
   29878:	ldr	r7, [sp, #88]	; 0x58
   2987c:	ldr	r6, [sp, #48]	; 0x30
   29880:	b	294c4 <__assert_fail@plt+0x18090>
   29884:	ldr	r0, [r4, #12]
   29888:	add	r9, r7, r9
   2988c:	mov	ip, r6
   29890:	ldr	r7, [sp, #88]	; 0x58
   29894:	ldr	r6, [sp, #48]	; 0x30
   29898:	mov	r3, r9
   2989c:	ldr	sl, [r0, sl, lsl #2]
   298a0:	b	2932c <__assert_fail@plt+0x17ef8>
   298a4:	ldr	r1, [sp, #60]	; 0x3c
   298a8:	mov	r9, ip
   298ac:	mov	r0, r6
   298b0:	str	lr, [sp, #56]	; 0x38
   298b4:	cmp	r1, lr
   298b8:	bne	298ec <__assert_fail@plt+0x184b8>
   298bc:	ldr	r1, [sp, #60]	; 0x3c
   298c0:	lsl	r1, r1, #3
   298c4:	bl	38020 <__assert_fail@plt+0x26bec>
   298c8:	cmp	r0, #0
   298cc:	mov	ip, r9
   298d0:	beq	29dfc <__assert_fail@plt+0x189c8>
   298d4:	mov	r1, r0
   298d8:	ldr	r0, [sp, #60]	; 0x3c
   298dc:	mov	r9, r1
   298e0:	lsl	r0, r0, #1
   298e4:	str	r0, [sp, #60]	; 0x3c
   298e8:	mov	r0, r1
   298ec:	ldr	r1, [r9]
   298f0:	cmp	r1, sl
   298f4:	ble	29978 <__assert_fail@plt+0x18544>
   298f8:	ldr	ip, [sp, #56]	; 0x38
   298fc:	cmp	ip, #1
   29900:	blt	299b0 <__assert_fail@plt+0x1857c>
   29904:	ldr	r5, [sp, #56]	; 0x38
   29908:	ands	r1, r5, #3
   2990c:	sub	r2, r5, #1
   29910:	beq	29938 <__assert_fail@plt+0x18504>
   29914:	ldr	r5, [sp, #56]	; 0x38
   29918:	add	r7, r9, r5, lsl #2
   2991c:	mov	r3, r7
   29920:	ldr	r6, [r3, #-4]!
   29924:	subs	r1, r1, #1
   29928:	sub	r5, r5, #1
   2992c:	str	r6, [r7]
   29930:	mov	r7, r3
   29934:	bne	29920 <__assert_fail@plt+0x184ec>
   29938:	mov	ip, #0
   2993c:	cmp	r2, #3
   29940:	bcc	299b0 <__assert_fail@plt+0x1857c>
   29944:	add	r2, r9, r5, lsl #2
   29948:	sub	r2, r2, #8
   2994c:	ldr	r6, [r2]
   29950:	ldr	r1, [r2, #4]
   29954:	ldmdb	r2, {r3, r7}
   29958:	sub	r5, r5, #4
   2995c:	cmp	r5, #0
   29960:	stmda	r2, {r3, r7}
   29964:	str	r6, [r2, #4]
   29968:	str	r1, [r2, #8]
   2996c:	sub	r2, r2, #16
   29970:	bgt	2994c <__assert_fail@plt+0x18518>
   29974:	b	299b0 <__assert_fail@plt+0x1857c>
   29978:	ldr	ip, [sp, #56]	; 0x38
   2997c:	add	r3, r9, ip, lsl #2
   29980:	ldr	r2, [r3, #-4]
   29984:	cmp	r2, sl
   29988:	ble	299b0 <__assert_fail@plt+0x1857c>
   2998c:	ldr	r1, [sp, #56]	; 0x38
   29990:	sub	r1, r1, #2
   29994:	str	r2, [r3]
   29998:	sub	r1, r1, #1
   2999c:	ldr	r2, [r3, #-8]
   299a0:	sub	r3, r3, #4
   299a4:	cmp	r2, sl
   299a8:	bgt	29994 <__assert_fail@plt+0x18560>
   299ac:	add	ip, r1, #2
   299b0:	ldr	r1, [sp, #56]	; 0x38
   299b4:	ldr	r5, [sp, #32]
   299b8:	str	sl, [r9, ip, lsl #2]
   299bc:	mov	ip, r9
   299c0:	mov	r6, r0
   299c4:	add	r1, r1, #1
   299c8:	str	r1, [sp, #56]	; 0x38
   299cc:	b	293d8 <__assert_fail@plt+0x17fa4>
   299d0:	ldr	r1, [sp, #60]	; 0x3c
   299d4:	mov	r9, ip
   299d8:	mov	r0, r6
   299dc:	str	r7, [sp, #100]	; 0x64
   299e0:	str	lr, [sp, #56]	; 0x38
   299e4:	cmp	r1, lr
   299e8:	bne	29a1c <__assert_fail@plt+0x185e8>
   299ec:	ldr	r1, [sp, #60]	; 0x3c
   299f0:	lsl	r1, r1, #3
   299f4:	bl	38020 <__assert_fail@plt+0x26bec>
   299f8:	cmp	r0, #0
   299fc:	mov	ip, r9
   29a00:	beq	29dfc <__assert_fail@plt+0x189c8>
   29a04:	mov	r1, r0
   29a08:	ldr	r0, [sp, #60]	; 0x3c
   29a0c:	mov	r9, r1
   29a10:	lsl	r0, r0, #1
   29a14:	str	r0, [sp, #60]	; 0x3c
   29a18:	mov	r0, r1
   29a1c:	ldr	r1, [r9]
   29a20:	cmp	r1, sl
   29a24:	ble	29aa8 <__assert_fail@plt+0x18674>
   29a28:	ldr	ip, [sp, #56]	; 0x38
   29a2c:	cmp	ip, #1
   29a30:	blt	29ae0 <__assert_fail@plt+0x186ac>
   29a34:	ldr	r5, [sp, #56]	; 0x38
   29a38:	ands	r1, r5, #3
   29a3c:	sub	r2, r5, #1
   29a40:	beq	29a68 <__assert_fail@plt+0x18634>
   29a44:	ldr	r5, [sp, #56]	; 0x38
   29a48:	add	r7, r9, r5, lsl #2
   29a4c:	mov	r3, r7
   29a50:	ldr	r6, [r3, #-4]!
   29a54:	subs	r1, r1, #1
   29a58:	sub	r5, r5, #1
   29a5c:	str	r6, [r7]
   29a60:	mov	r7, r3
   29a64:	bne	29a50 <__assert_fail@plt+0x1861c>
   29a68:	mov	ip, #0
   29a6c:	cmp	r2, #3
   29a70:	bcc	29ae0 <__assert_fail@plt+0x186ac>
   29a74:	add	r2, r9, r5, lsl #2
   29a78:	sub	r2, r2, #8
   29a7c:	ldr	r6, [r2]
   29a80:	ldr	r1, [r2, #4]
   29a84:	ldmdb	r2, {r3, r7}
   29a88:	sub	r5, r5, #4
   29a8c:	cmp	r5, #0
   29a90:	stmda	r2, {r3, r7}
   29a94:	str	r6, [r2, #4]
   29a98:	str	r1, [r2, #8]
   29a9c:	sub	r2, r2, #16
   29aa0:	bgt	29a7c <__assert_fail@plt+0x18648>
   29aa4:	b	29ae0 <__assert_fail@plt+0x186ac>
   29aa8:	ldr	ip, [sp, #56]	; 0x38
   29aac:	add	r3, r9, ip, lsl #2
   29ab0:	ldr	r2, [r3, #-4]
   29ab4:	cmp	r2, sl
   29ab8:	ble	29ae0 <__assert_fail@plt+0x186ac>
   29abc:	ldr	r1, [sp, #56]	; 0x38
   29ac0:	sub	r1, r1, #2
   29ac4:	str	r2, [r3]
   29ac8:	sub	r1, r1, #1
   29acc:	ldr	r2, [r3, #-8]
   29ad0:	sub	r3, r3, #4
   29ad4:	cmp	r2, sl
   29ad8:	bgt	29ac4 <__assert_fail@plt+0x18690>
   29adc:	add	ip, r1, #2
   29ae0:	ldr	r2, [sp, #56]	; 0x38
   29ae4:	ldr	r5, [sp, #32]
   29ae8:	ldr	r3, [sp, #80]	; 0x50
   29aec:	ldr	r7, [sp, #100]	; 0x64
   29af0:	str	sl, [r9, ip, lsl #2]
   29af4:	mov	ip, r9
   29af8:	mov	r6, r0
   29afc:	add	r2, r2, #1
   29b00:	b	297b8 <__assert_fail@plt+0x18384>
   29b04:	mov	r0, r6
   29b08:	bl	138e8 <__assert_fail@plt+0x24b4>
   29b0c:	ldr	r0, [fp, #-184]	; 0xffffff48
   29b10:	ldr	r6, [sp, #72]	; 0x48
   29b14:	cmp	r0, r6
   29b18:	beq	29b20 <__assert_fail@plt+0x186ec>
   29b1c:	bl	138e8 <__assert_fail@plt+0x24b4>
   29b20:	ldr	lr, [sp, #96]	; 0x60
   29b24:	mov	r0, #16
   29b28:	str	r6, [fp, #-184]	; 0xffffff48
   29b2c:	cmp	r7, #0
   29b30:	str	r0, [fp, #-188]	; 0xffffff44
   29b34:	mov	r0, #0
   29b38:	str	r0, [fp, #-192]	; 0xffffff40
   29b3c:	beq	29ba0 <__assert_fail@plt+0x1876c>
   29b40:	ldr	r1, [r7]
   29b44:	ldr	r0, [r7, #8]
   29b48:	mov	r6, lr
   29b4c:	cmp	r1, #1
   29b50:	blt	29b90 <__assert_fail@plt+0x1875c>
   29b54:	mov	r4, #0
   29b58:	mov	r5, #0
   29b5c:	add	r0, r0, r4
   29b60:	ldr	r0, [r0, #20]
   29b64:	bl	138e8 <__assert_fail@plt+0x24b4>
   29b68:	ldr	r0, [r7, #8]
   29b6c:	add	r0, r0, r4
   29b70:	ldr	r0, [r0, #8]
   29b74:	bl	138e8 <__assert_fail@plt+0x24b4>
   29b78:	ldr	r1, [r7]
   29b7c:	ldr	r0, [r7, #8]
   29b80:	add	r5, r5, #1
   29b84:	add	r4, r4, #24
   29b88:	cmp	r5, r1
   29b8c:	blt	29b5c <__assert_fail@plt+0x18728>
   29b90:	bl	138e8 <__assert_fail@plt+0x24b4>
   29b94:	ldr	r5, [sp, #32]
   29b98:	ldr	r4, [sp, #84]	; 0x54
   29b9c:	mov	lr, r6
   29ba0:	ldr	r0, [fp, #20]
   29ba4:	ldrb	r1, [sp, #180]	; 0xb4
   29ba8:	mov	r2, r9
   29bac:	add	r0, r0, #4
   29bb0:	b	29c1c <__assert_fail@plt+0x187e8>
   29bb4:	mov	r6, #0
   29bb8:	b	272b8 <__assert_fail@plt+0x15e84>
   29bbc:	mov	sl, #12
   29bc0:	b	29cd4 <__assert_fail@plt+0x188a0>
   29bc4:	ldr	r7, [sp, #132]	; 0x84
   29bc8:	ldr	r6, [sp, #28]
   29bcc:	ldr	ip, [sp, #116]	; 0x74
   29bd0:	cmp	r3, r7
   29bd4:	mov	r5, r6
   29bd8:	addne	r5, ip, r3, lsl #2
   29bdc:	ldr	r3, [r5]
   29be0:	str	r3, [r0, #-4]
   29be4:	ldr	r5, [r0]
   29be8:	cmp	r5, r7
   29bec:	addne	r6, ip, r5, lsl #2
   29bf0:	ldr	r5, [sp, #32]
   29bf4:	ldr	r7, [r6]
   29bf8:	str	r7, [r0]
   29bfc:	ldr	r6, [fp, #-200]	; 0xffffff38
   29c00:	add	r3, r3, r6
   29c04:	add	r7, r7, r6
   29c08:	stmda	r0, {r3, r7}
   29c0c:	sub	r2, r2, #1
   29c10:	add	r0, r0, #8
   29c14:	cmp	r5, r2
   29c18:	beq	29c38 <__assert_fail@plt+0x18804>
   29c1c:	ldr	r3, [r0, #-4]
   29c20:	cmn	r3, #1
   29c24:	beq	29c0c <__assert_fail@plt+0x187d8>
   29c28:	cmp	r1, #0
   29c2c:	bne	29bc4 <__assert_fail@plt+0x18790>
   29c30:	ldr	r7, [r0]
   29c34:	b	29bfc <__assert_fail@plt+0x187c8>
   29c38:	cmp	r5, #1
   29c3c:	blt	29c5c <__assert_fail@plt+0x18828>
   29c40:	ldr	r0, [fp, #20]
   29c44:	lsl	r2, r5, #3
   29c48:	mov	r1, #255	; 0xff
   29c4c:	add	r0, r0, r4, lsl #3
   29c50:	mov	r4, lr
   29c54:	bl	11368 <memset@plt>
   29c58:	mov	lr, r4
   29c5c:	ldr	r0, [lr, #132]	; 0x84
   29c60:	mov	sl, #0
   29c64:	cmp	r0, #0
   29c68:	beq	29cd4 <__assert_fail@plt+0x188a0>
   29c6c:	ldr	r1, [sp, #84]	; 0x54
   29c70:	cmp	r1, #2
   29c74:	bcc	29cd4 <__assert_fail@plt+0x188a0>
   29c78:	ldr	r1, [sp, #32]
   29c7c:	ldr	r2, [fp, #16]
   29c80:	ldr	r6, [fp, #20]
   29c84:	mvn	r1, r1
   29c88:	add	r1, r1, r2
   29c8c:	mov	r2, #0
   29c90:	b	29ca0 <__assert_fail@plt+0x1886c>
   29c94:	add	r2, r2, #1
   29c98:	cmp	r1, r2
   29c9c:	beq	29cd0 <__assert_fail@plt+0x1889c>
   29ca0:	ldr	r3, [r0, r2, lsl #2]
   29ca4:	cmp	r2, r3
   29ca8:	beq	29c94 <__assert_fail@plt+0x18860>
   29cac:	add	r3, r6, r3, lsl #3
   29cb0:	add	r7, r6, r2, lsl #3
   29cb4:	ldr	r3, [r3, #8]
   29cb8:	str	r3, [r7, #8]
   29cbc:	ldr	r3, [r0, r2, lsl #2]
   29cc0:	add	r3, r6, r3, lsl #3
   29cc4:	ldr	r3, [r3, #12]
   29cc8:	str	r3, [r7, #12]
   29ccc:	b	29c94 <__assert_fail@plt+0x18860>
   29cd0:	mov	sl, #0
   29cd4:	ldr	r0, [sp, #204]	; 0xcc
   29cd8:	bl	138e8 <__assert_fail@plt+0x24b4>
   29cdc:	ldr	r0, [sp, #96]	; 0x60
   29ce0:	ldr	r0, [r0, #76]	; 0x4c
   29ce4:	cmp	r0, #0
   29ce8:	beq	29d04 <__assert_fail@plt+0x188d0>
   29cec:	add	r0, sp, #104	; 0x68
   29cf0:	bl	31640 <__assert_fail@plt+0x2020c>
   29cf4:	ldr	r0, [sp, #236]	; 0xec
   29cf8:	bl	138e8 <__assert_fail@plt+0x24b4>
   29cfc:	ldr	r0, [sp, #220]	; 0xdc
   29d00:	bl	138e8 <__assert_fail@plt+0x24b4>
   29d04:	ldr	r0, [sp, #112]	; 0x70
   29d08:	bl	138e8 <__assert_fail@plt+0x24b4>
   29d0c:	ldr	r0, [sp, #116]	; 0x74
   29d10:	bl	138e8 <__assert_fail@plt+0x24b4>
   29d14:	ldrb	r0, [sp, #179]	; 0xb3
   29d18:	cmp	r0, #0
   29d1c:	beq	29d28 <__assert_fail@plt+0x188f4>
   29d20:	ldr	r0, [sp, #108]	; 0x6c
   29d24:	bl	138e8 <__assert_fail@plt+0x24b4>
   29d28:	mov	r0, sl
   29d2c:	sub	sp, fp, #28
   29d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29d34:	mov	r5, #0
   29d38:	b	29d60 <__assert_fail@plt+0x1892c>
   29d3c:	mov	sl, r0
   29d40:	b	29cd4 <__assert_fail@plt+0x188a0>
   29d44:	mov	r0, r7
   29d48:	bl	138e8 <__assert_fail@plt+0x24b4>
   29d4c:	mov	r0, #0
   29d50:	bl	138e8 <__assert_fail@plt+0x24b4>
   29d54:	mov	sl, #12
   29d58:	b	29cd4 <__assert_fail@plt+0x188a0>
   29d5c:	mov	r5, #1
   29d60:	mov	r0, ip
   29d64:	bl	138e8 <__assert_fail@plt+0x24b4>
   29d68:	ldr	r0, [fp, #-184]	; 0xffffff48
   29d6c:	ldr	r4, [sp, #72]	; 0x48
   29d70:	cmp	r0, r4
   29d74:	beq	29d7c <__assert_fail@plt+0x18948>
   29d78:	bl	138e8 <__assert_fail@plt+0x24b4>
   29d7c:	mov	r0, #16
   29d80:	str	r4, [fp, #-184]	; 0xffffff48
   29d84:	mov	sl, #1
   29d88:	cmp	r5, #0
   29d8c:	str	r0, [fp, #-188]	; 0xffffff44
   29d90:	mov	r0, #0
   29d94:	str	r0, [fp, #-192]	; 0xffffff40
   29d98:	bne	29cd4 <__assert_fail@plt+0x188a0>
   29d9c:	ldr	r0, [sp, #88]	; 0x58
   29da0:	ldr	r1, [r0]
   29da4:	ldr	r0, [r0, #8]
   29da8:	cmp	r1, #1
   29dac:	blt	29df0 <__assert_fail@plt+0x189bc>
   29db0:	ldr	r4, [sp, #88]	; 0x58
   29db4:	mov	r5, #0
   29db8:	mov	r6, #0
   29dbc:	add	r0, r0, r5
   29dc0:	ldr	r0, [r0, #20]
   29dc4:	bl	138e8 <__assert_fail@plt+0x24b4>
   29dc8:	ldr	r0, [r4, #8]
   29dcc:	add	r0, r0, r5
   29dd0:	ldr	r0, [r0, #8]
   29dd4:	bl	138e8 <__assert_fail@plt+0x24b4>
   29dd8:	ldr	r1, [r4]
   29ddc:	ldr	r0, [r4, #8]
   29de0:	add	r6, r6, #1
   29de4:	add	r5, r5, #24
   29de8:	cmp	r6, r1
   29dec:	blt	29dbc <__assert_fail@plt+0x18988>
   29df0:	bl	138e8 <__assert_fail@plt+0x24b4>
   29df4:	b	29cd4 <__assert_fail@plt+0x188a0>
   29df8:	ldr	ip, [sp, #40]	; 0x28
   29dfc:	mov	r0, ip
   29e00:	bl	138e8 <__assert_fail@plt+0x24b4>
   29e04:	ldr	r0, [fp, #-184]	; 0xffffff48
   29e08:	ldr	r4, [sp, #72]	; 0x48
   29e0c:	cmp	r0, r4
   29e10:	beq	29e18 <__assert_fail@plt+0x189e4>
   29e14:	bl	138e8 <__assert_fail@plt+0x24b4>
   29e18:	mov	r0, #16
   29e1c:	str	r4, [fp, #-184]	; 0xffffff48
   29e20:	mov	sl, #12
   29e24:	str	r0, [fp, #-188]	; 0xffffff44
   29e28:	mov	r0, #0
   29e2c:	str	r0, [fp, #-192]	; 0xffffff40
   29e30:	ldr	r0, [sp, #88]	; 0x58
   29e34:	cmp	r0, #0
   29e38:	beq	29cd4 <__assert_fail@plt+0x188a0>
   29e3c:	ldr	r1, [r0]
   29e40:	ldr	r0, [r0, #8]
   29e44:	cmp	r1, #1
   29e48:	blt	29df0 <__assert_fail@plt+0x189bc>
   29e4c:	ldr	r4, [sp, #88]	; 0x58
   29e50:	mov	r5, #0
   29e54:	mov	r6, #0
   29e58:	add	r0, r0, r5
   29e5c:	ldr	r0, [r0, #20]
   29e60:	bl	138e8 <__assert_fail@plt+0x24b4>
   29e64:	ldr	r0, [r4, #8]
   29e68:	add	r0, r0, r5
   29e6c:	ldr	r0, [r0, #8]
   29e70:	bl	138e8 <__assert_fail@plt+0x24b4>
   29e74:	ldr	r1, [r4]
   29e78:	ldr	r0, [r4, #8]
   29e7c:	add	r6, r6, #1
   29e80:	add	r5, r5, #24
   29e84:	cmp	r6, r1
   29e88:	blt	29e58 <__assert_fail@plt+0x18a24>
   29e8c:	b	29df0 <__assert_fail@plt+0x189bc>
   29e90:	mov	sl, #1
   29e94:	b	29cd4 <__assert_fail@plt+0x188a0>
   29e98:	mov	ip, #0
   29e9c:	b	29dfc <__assert_fail@plt+0x189c8>
   29ea0:	ldr	ip, [sp, #40]	; 0x28
   29ea4:	mov	r0, #0
   29ea8:	str	r0, [r6]
   29eac:	str	r0, [r5]
   29eb0:	b	29dfc <__assert_fail@plt+0x189c8>
   29eb4:	push	{fp, lr}
   29eb8:	mov	fp, sp
   29ebc:	sub	sp, sp, #16
   29ec0:	mov	ip, #1
   29ec4:	str	r2, [sp, #4]
   29ec8:	str	ip, [sp, #12]
   29ecc:	mov	ip, #0
   29ed0:	str	ip, [sp]
   29ed4:	ldr	ip, [fp, #8]
   29ed8:	str	ip, [sp, #8]
   29edc:	bl	29ee8 <__assert_fail@plt+0x18ab4>
   29ee0:	mov	sp, fp
   29ee4:	pop	{fp, pc}
   29ee8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29eec:	add	fp, sp, #28
   29ef0:	sub	sp, sp, #60	; 0x3c
   29ef4:	mvn	r4, #0
   29ef8:	cmp	r3, #0
   29efc:	bmi	2a084 <__assert_fail@plt+0x18c50>
   29f00:	mov	r5, r3
   29f04:	mov	r8, r2
   29f08:	cmp	r3, r2
   29f0c:	bgt	2a084 <__assert_fail@plt+0x18c50>
   29f10:	mov	r6, r0
   29f14:	ldr	r0, [fp, #8]
   29f18:	mov	sl, r1
   29f1c:	movw	r1, #0
   29f20:	mov	r9, r8
   29f24:	ldr	r7, [r6]
   29f28:	movt	r1, #0
   29f2c:	add	r0, r0, r5
   29f30:	cmp	r0, r8
   29f34:	bicle	r9, r0, r0, asr #31
   29f38:	movw	r0, #0
   29f3c:	movt	r0, #0
   29f40:	orrs	r4, r1, r0
   29f44:	beq	29f50 <__assert_fail@plt+0x18b1c>
   29f48:	add	r0, r7, #136	; 0x88
   29f4c:	bl	111d0 <pthread_mutex_lock@plt>
   29f50:	ldrb	r0, [r6, #28]
   29f54:	ldr	r3, [fp, #16]
   29f58:	str	r6, [fp, #-32]	; 0xffffffe0
   29f5c:	cmp	r9, r5
   29f60:	ubfx	r1, r0, #5, #2
   29f64:	str	r7, [fp, #-36]	; 0xffffffdc
   29f68:	str	r4, [fp, #-40]	; 0xffffffd8
   29f6c:	str	sl, [sp, #44]	; 0x2c
   29f70:	str	r1, [sp, #40]	; 0x28
   29f74:	ble	29fa8 <__assert_fail@plt+0x18b74>
   29f78:	tst	r0, #8
   29f7c:	bne	29fa8 <__assert_fail@plt+0x18b74>
   29f80:	ldr	r1, [fp, #-32]	; 0xffffffe0
   29f84:	ldr	r1, [r1, #16]
   29f88:	cmp	r1, #0
   29f8c:	beq	29fa8 <__assert_fail@plt+0x18b74>
   29f90:	ldr	r4, [fp, #-32]	; 0xffffffe0
   29f94:	mov	r6, r3
   29f98:	mov	r0, r4
   29f9c:	bl	26880 <__assert_fail@plt+0x1544c>
   29fa0:	ldrb	r0, [r4, #28]
   29fa4:	mov	r3, r6
   29fa8:	mov	sl, #1
   29fac:	mov	r2, #0
   29fb0:	cmp	r3, #0
   29fb4:	beq	2a004 <__assert_fail@plt+0x18bd0>
   29fb8:	ands	r1, r0, #16
   29fbc:	bne	2a004 <__assert_fail@plt+0x18bd0>
   29fc0:	and	r0, r0, #6
   29fc4:	cmp	r0, #4
   29fc8:	bne	29ff4 <__assert_fail@plt+0x18bc0>
   29fcc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   29fd0:	ldr	sl, [r3]
   29fd4:	ldr	r0, [r0, #24]
   29fd8:	cmp	sl, r0
   29fdc:	bhi	29ffc <__assert_fail@plt+0x18bc8>
   29fe0:	cmp	sl, #1
   29fe4:	bge	2a000 <__assert_fail@plt+0x18bcc>
   29fe8:	mov	sl, #1
   29fec:	mov	r2, #0
   29ff0:	b	2a004 <__assert_fail@plt+0x18bd0>
   29ff4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   29ff8:	ldr	r0, [r0, #24]
   29ffc:	add	sl, r0, #1
   2a000:	mov	r2, r3
   2a004:	lsl	r0, sl, #3
   2a008:	str	r2, [sp, #36]	; 0x24
   2a00c:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2a010:	cmp	r0, #0
   2a014:	beq	2a3a4 <__assert_fail@plt+0x18f70>
   2a018:	mov	r6, r0
   2a01c:	ldr	r0, [fp, #12]
   2a020:	str	r9, [sp]
   2a024:	ldr	r9, [fp, #-32]	; 0xffffffe0
   2a028:	ldr	r1, [sp, #44]	; 0x2c
   2a02c:	mov	r2, r8
   2a030:	mov	r3, r5
   2a034:	stmib	sp, {r0, sl}
   2a038:	ldr	r0, [sp, #40]	; 0x28
   2a03c:	str	r6, [sp, #12]
   2a040:	str	r0, [sp, #16]
   2a044:	mov	r0, r9
   2a048:	bl	271dc <__assert_fail@plt+0x15da8>
   2a04c:	cmp	r0, #0
   2a050:	mov	r8, r6
   2a054:	beq	2a090 <__assert_fail@plt+0x18c5c>
   2a058:	cmp	r0, #1
   2a05c:	mvn	r4, #1
   2a060:	mvneq	r4, #0
   2a064:	ldr	r6, [fp, #-40]	; 0xffffffd8
   2a068:	ldr	r5, [fp, #-36]	; 0xffffffdc
   2a06c:	mov	r0, r8
   2a070:	bl	138e8 <__assert_fail@plt+0x24b4>
   2a074:	cmp	r6, #0
   2a078:	beq	2a084 <__assert_fail@plt+0x18c50>
   2a07c:	add	r0, r5, #136	; 0x88
   2a080:	bl	11134 <pthread_mutex_unlock@plt>
   2a084:	mov	r0, r4
   2a088:	sub	sp, fp, #28
   2a08c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a090:	ldr	lr, [sp, #36]	; 0x24
   2a094:	str	r5, [sp, #44]	; 0x2c
   2a098:	cmp	lr, #0
   2a09c:	beq	2a378 <__assert_fail@plt+0x18f44>
   2a0a0:	ldrb	r0, [r9, #28]
   2a0a4:	add	r7, sl, #1
   2a0a8:	ubfx	r0, r0, #1, #2
   2a0ac:	cmp	r0, #1
   2a0b0:	beq	2a110 <__assert_fail@plt+0x18cdc>
   2a0b4:	cmp	r0, #0
   2a0b8:	bne	2a13c <__assert_fail@plt+0x18d08>
   2a0bc:	mov	r4, r8
   2a0c0:	lsl	r8, r7, #2
   2a0c4:	mov	r5, lr
   2a0c8:	mov	r0, r8
   2a0cc:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2a0d0:	mov	r6, #0
   2a0d4:	cmp	r0, #0
   2a0d8:	str	r0, [r5, #4]
   2a0dc:	beq	2a3bc <__assert_fail@plt+0x18f88>
   2a0e0:	mov	r0, r8
   2a0e4:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2a0e8:	cmp	r0, #0
   2a0ec:	mov	lr, r5
   2a0f0:	str	r0, [r5, #8]
   2a0f4:	beq	2a428 <__assert_fail@plt+0x18ff4>
   2a0f8:	str	r7, [lr]
   2a0fc:	mov	r6, #1
   2a100:	mov	r8, r4
   2a104:	cmp	sl, #1
   2a108:	bge	2a14c <__assert_fail@plt+0x18d18>
   2a10c:	b	2a12c <__assert_fail@plt+0x18cf8>
   2a110:	ldr	r0, [lr]
   2a114:	mov	r6, #1
   2a118:	cmp	r7, r0
   2a11c:	bhi	2a3c4 <__assert_fail@plt+0x18f90>
   2a120:	mov	r7, r0
   2a124:	cmp	sl, #1
   2a128:	bge	2a14c <__assert_fail@plt+0x18d18>
   2a12c:	mov	sl, #0
   2a130:	cmp	sl, r7
   2a134:	bcc	2a340 <__assert_fail@plt+0x18f0c>
   2a138:	b	2a360 <__assert_fail@plt+0x18f2c>
   2a13c:	ldr	r7, [lr]
   2a140:	mov	r6, #2
   2a144:	cmp	sl, #1
   2a148:	blt	2a12c <__assert_fail@plt+0x18cf8>
   2a14c:	ldr	r5, [lr, #4]
   2a150:	ldr	r4, [lr, #8]
   2a154:	mov	r2, #0
   2a158:	cmp	sl, #3
   2a15c:	str	r6, [sp, #40]	; 0x28
   2a160:	bhi	2a1f0 <__assert_fail@plt+0x18dbc>
   2a164:	tst	sl, #1
   2a168:	mov	r3, r2
   2a16c:	beq	2a188 <__assert_fail@plt+0x18d54>
   2a170:	mov	r0, r8
   2a174:	orr	r3, r2, #1
   2a178:	ldr	r1, [r0, r2, lsl #3]!
   2a17c:	str	r1, [r5, r2, lsl #2]
   2a180:	ldr	r0, [r0, #4]
   2a184:	str	r0, [r4, r2, lsl #2]
   2a188:	orr	r0, r2, #1
   2a18c:	cmp	sl, r0
   2a190:	beq	2a330 <__assert_fail@plt+0x18efc>
   2a194:	add	r2, r3, #1
   2a198:	add	ip, r8, r3, lsl #3
   2a19c:	sub	r0, sl, r3
   2a1a0:	mov	r6, #0
   2a1a4:	add	r1, r5, r2, lsl #2
   2a1a8:	add	r2, r4, r2, lsl #2
   2a1ac:	add	r7, ip, #12
   2a1b0:	ldr	r4, [r7, #-12]
   2a1b4:	add	r5, r1, r6
   2a1b8:	subs	r0, r0, #2
   2a1bc:	str	r4, [r5, #-4]
   2a1c0:	add	r4, ip, r6, lsl #1
   2a1c4:	add	r5, r2, r6
   2a1c8:	ldr	r3, [r4, #4]
   2a1cc:	str	r3, [r5, #-4]
   2a1d0:	ldr	r3, [r4, #8]
   2a1d4:	str	r3, [r1, r6]
   2a1d8:	ldr	r3, [r7]
   2a1dc:	add	r7, r7, #16
   2a1e0:	str	r3, [r2, r6]
   2a1e4:	add	r6, r6, #8
   2a1e8:	bne	2a1b0 <__assert_fail@plt+0x18d7c>
   2a1ec:	b	2a330 <__assert_fail@plt+0x18efc>
   2a1f0:	add	lr, r4, sl, lsl #2
   2a1f4:	add	r7, r8, sl, lsl #3
   2a1f8:	add	r6, r5, sl, lsl #2
   2a1fc:	mov	r9, #0
   2a200:	mov	r1, #0
   2a204:	mov	r3, #0
   2a208:	mov	r0, #0
   2a20c:	mov	r2, #0
   2a210:	cmp	r8, lr
   2a214:	movwcc	r9, #1
   2a218:	cmp	r7, r4
   2a21c:	movwhi	r1, #1
   2a220:	cmp	r8, r6
   2a224:	movwcc	r3, #1
   2a228:	cmp	r7, r5
   2a22c:	mov	r7, #0
   2a230:	movwhi	r7, #1
   2a234:	cmp	r4, r6
   2a238:	mov	r6, #0
   2a23c:	movwcc	r6, #1
   2a240:	cmp	r5, lr
   2a244:	movwcc	r0, #1
   2a248:	tst	r0, r6
   2a24c:	andseq	r0, r7, r3
   2a250:	bne	2a2dc <__assert_fail@plt+0x18ea8>
   2a254:	ands	r0, r1, r9
   2a258:	ldr	r9, [fp, #-32]	; 0xffffffe0
   2a25c:	ldr	lr, [sp, #36]	; 0x24
   2a260:	bne	2a164 <__assert_fail@plt+0x18d30>
   2a264:	bic	r0, sl, #3
   2a268:	mov	r1, #1
   2a26c:	str	r4, [sp, #32]
   2a270:	str	r0, [sp, #28]
   2a274:	subs	r0, r0, #4
   2a278:	add	r0, r1, r0, lsr #2
   2a27c:	and	r1, r0, #1
   2a280:	str	r1, [sp, #24]
   2a284:	beq	2a2e8 <__assert_fail@plt+0x18eb4>
   2a288:	sub	r6, r0, r1
   2a28c:	mov	r1, r4
   2a290:	mov	r3, #0
   2a294:	mov	r7, #64	; 0x40
   2a298:	mov	r0, #32
   2a29c:	mov	lr, r5
   2a2a0:	mov	r4, r8
   2a2a4:	mov	r9, r8
   2a2a8:	add	ip, r9, #32
   2a2ac:	vld2.32	{d16-d19}, [r9], r7
   2a2b0:	add	r8, lr, #16
   2a2b4:	add	r2, r1, #16
   2a2b8:	subs	r6, r6, #2
   2a2bc:	add	r3, r3, #8
   2a2c0:	vst1.32	{d16-d17}, [lr], r0
   2a2c4:	vst1.32	{d18-d19}, [r1], r0
   2a2c8:	vld2.32	{d16-d19}, [ip]
   2a2cc:	vst1.32	{d16-d17}, [r8]
   2a2d0:	vst1.32	{d18-d19}, [r2]
   2a2d4:	bne	2a2a8 <__assert_fail@plt+0x18e74>
   2a2d8:	b	2a2f0 <__assert_fail@plt+0x18ebc>
   2a2dc:	ldr	r9, [fp, #-32]	; 0xffffffe0
   2a2e0:	ldr	lr, [sp, #36]	; 0x24
   2a2e4:	b	2a164 <__assert_fail@plt+0x18d30>
   2a2e8:	mov	r4, r8
   2a2ec:	mov	r3, #0
   2a2f0:	ldr	r0, [sp, #24]
   2a2f4:	mov	r8, r4
   2a2f8:	ldr	r9, [fp, #-32]	; 0xffffffe0
   2a2fc:	ldr	lr, [sp, #36]	; 0x24
   2a300:	ldr	r4, [sp, #32]
   2a304:	cmp	r0, #0
   2a308:	beq	2a324 <__assert_fail@plt+0x18ef0>
   2a30c:	add	r0, r8, r3, lsl #3
   2a310:	vld2.32	{d16-d19}, [r0]
   2a314:	add	r0, r5, r3, lsl #2
   2a318:	vst1.32	{d16-d17}, [r0]
   2a31c:	add	r0, r4, r3, lsl #2
   2a320:	vst1.32	{d18-d19}, [r0]
   2a324:	ldr	r2, [sp, #28]
   2a328:	cmp	sl, r2
   2a32c:	bne	2a164 <__assert_fail@plt+0x18d30>
   2a330:	ldr	r7, [lr]
   2a334:	ldr	r6, [sp, #40]	; 0x28
   2a338:	cmp	sl, r7
   2a33c:	bcs	2a360 <__assert_fail@plt+0x18f2c>
   2a340:	ldmib	lr, {r0, r1}
   2a344:	mvn	r2, #0
   2a348:	str	r2, [r1, sl, lsl #2]
   2a34c:	str	r2, [r0, sl, lsl #2]
   2a350:	add	sl, sl, #1
   2a354:	ldr	r3, [lr]
   2a358:	cmp	sl, r3
   2a35c:	bcc	2a348 <__assert_fail@plt+0x18f14>
   2a360:	ldrb	r0, [r9, #28]
   2a364:	cmp	r6, #0
   2a368:	and	r0, r0, #249	; 0xf9
   2a36c:	orr	r0, r0, r6, lsl #1
   2a370:	strb	r0, [r9, #28]
   2a374:	beq	2a39c <__assert_fail@plt+0x18f68>
   2a378:	ldr	r0, [fp, #20]
   2a37c:	cmp	r0, #0
   2a380:	beq	2a394 <__assert_fail@plt+0x18f60>
   2a384:	ldr	r0, [r8, #4]
   2a388:	ldr	r1, [sp, #44]	; 0x2c
   2a38c:	sub	r4, r0, r1
   2a390:	b	2a064 <__assert_fail@plt+0x18c30>
   2a394:	ldr	r4, [r8]
   2a398:	b	2a064 <__assert_fail@plt+0x18c30>
   2a39c:	mvn	r4, #1
   2a3a0:	b	2a064 <__assert_fail@plt+0x18c30>
   2a3a4:	ldr	r6, [fp, #-40]	; 0xffffffd8
   2a3a8:	ldr	r5, [fp, #-36]	; 0xffffffdc
   2a3ac:	mvn	r4, #1
   2a3b0:	cmp	r6, #0
   2a3b4:	bne	2a07c <__assert_fail@plt+0x18c48>
   2a3b8:	b	2a084 <__assert_fail@plt+0x18c50>
   2a3bc:	mov	r8, r4
   2a3c0:	b	2a360 <__assert_fail@plt+0x18f2c>
   2a3c4:	ldr	r0, [lr, #4]
   2a3c8:	mov	r4, r8
   2a3cc:	lsl	r8, r7, #2
   2a3d0:	mov	r1, r8
   2a3d4:	bl	38020 <__assert_fail@plt+0x26bec>
   2a3d8:	mov	r6, #0
   2a3dc:	cmp	r0, #0
   2a3e0:	beq	2a440 <__assert_fail@plt+0x1900c>
   2a3e4:	mov	r5, r0
   2a3e8:	ldr	r0, [sp, #36]	; 0x24
   2a3ec:	mov	r1, r8
   2a3f0:	ldr	r0, [r0, #8]
   2a3f4:	bl	38020 <__assert_fail@plt+0x26bec>
   2a3f8:	cmp	r0, #0
   2a3fc:	beq	2a438 <__assert_fail@plt+0x19004>
   2a400:	ldr	lr, [sp, #36]	; 0x24
   2a404:	ldr	r9, [fp, #-32]	; 0xffffffe0
   2a408:	mov	r8, r4
   2a40c:	mov	r6, #1
   2a410:	str	r7, [lr]
   2a414:	str	r5, [lr, #4]
   2a418:	str	r0, [lr, #8]
   2a41c:	cmp	sl, #1
   2a420:	bge	2a14c <__assert_fail@plt+0x18d18>
   2a424:	b	2a12c <__assert_fail@plt+0x18cf8>
   2a428:	ldr	r0, [lr, #4]
   2a42c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2a430:	mov	r8, r4
   2a434:	b	2a360 <__assert_fail@plt+0x18f2c>
   2a438:	mov	r0, r5
   2a43c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2a440:	ldr	r9, [fp, #-32]	; 0xffffffe0
   2a444:	mov	r8, r4
   2a448:	b	2a360 <__assert_fail@plt+0x18f2c>
   2a44c:	push	{fp, lr}
   2a450:	mov	fp, sp
   2a454:	sub	sp, sp, #16
   2a458:	mov	ip, #0
   2a45c:	str	r2, [sp, #4]
   2a460:	str	ip, [sp, #12]
   2a464:	ldr	ip, [fp, #12]
   2a468:	str	ip, [sp, #8]
   2a46c:	ldr	ip, [fp, #8]
   2a470:	str	ip, [sp]
   2a474:	bl	29ee8 <__assert_fail@plt+0x18ab4>
   2a478:	mov	sp, fp
   2a47c:	pop	{fp, pc}
   2a480:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a484:	add	fp, sp, #28
   2a488:	sub	sp, sp, #20
   2a48c:	ldr	r4, [fp, #8]
   2a490:	mov	r8, r1
   2a494:	mov	r1, r0
   2a498:	mov	r6, r2
   2a49c:	orr	r0, r4, r2
   2a4a0:	ldr	r2, [fp, #20]
   2a4a4:	orrs	r0, r0, r2
   2a4a8:	bmi	2a568 <__assert_fail@plt+0x19134>
   2a4ac:	adds	sl, r6, r4
   2a4b0:	bvs	2a568 <__assert_fail@plt+0x19134>
   2a4b4:	mov	r5, #0
   2a4b8:	cmp	r4, #1
   2a4bc:	blt	2a514 <__assert_fail@plt+0x190e0>
   2a4c0:	mov	r9, r3
   2a4c4:	cmp	r6, #1
   2a4c8:	blt	2a51c <__assert_fail@plt+0x190e8>
   2a4cc:	mov	r0, sl
   2a4d0:	mov	r5, r1
   2a4d4:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2a4d8:	cmp	r0, #0
   2a4dc:	beq	2a568 <__assert_fail@plt+0x19134>
   2a4e0:	mov	r1, r8
   2a4e4:	mov	r2, r6
   2a4e8:	mov	r7, r0
   2a4ec:	bl	111e8 <memcpy@plt>
   2a4f0:	add	r0, r7, r6
   2a4f4:	mov	r1, r9
   2a4f8:	mov	r2, r4
   2a4fc:	bl	111e8 <memcpy@plt>
   2a500:	ldr	r2, [fp, #20]
   2a504:	mov	r1, r5
   2a508:	mov	r4, r7
   2a50c:	mov	r5, #0
   2a510:	b	2a524 <__assert_fail@plt+0x190f0>
   2a514:	mov	r7, r8
   2a518:	b	2a520 <__assert_fail@plt+0x190ec>
   2a51c:	mov	r7, r9
   2a520:	mov	r4, #0
   2a524:	ldr	r0, [fp, #16]
   2a528:	ldr	r3, [fp, #12]
   2a52c:	mov	r6, #1
   2a530:	str	r2, [sp, #4]
   2a534:	mov	r2, sl
   2a538:	str	r5, [sp]
   2a53c:	str	r6, [sp, #12]
   2a540:	str	r0, [sp, #8]
   2a544:	mov	r0, r1
   2a548:	mov	r1, r7
   2a54c:	bl	29ee8 <__assert_fail@plt+0x18ab4>
   2a550:	mov	r5, r0
   2a554:	mov	r0, r4
   2a558:	bl	138e8 <__assert_fail@plt+0x24b4>
   2a55c:	mov	r0, r5
   2a560:	sub	sp, fp, #28
   2a564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a568:	mvn	r0, #1
   2a56c:	sub	sp, fp, #28
   2a570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a578:	add	fp, sp, #28
   2a57c:	sub	sp, sp, #20
   2a580:	ldr	r4, [fp, #8]
   2a584:	mov	r8, r1
   2a588:	mov	r1, r0
   2a58c:	mov	r6, r2
   2a590:	orr	r0, r4, r2
   2a594:	ldr	r2, [fp, #24]
   2a598:	orrs	r0, r0, r2
   2a59c:	bmi	2a65c <__assert_fail@plt+0x19228>
   2a5a0:	adds	sl, r6, r4
   2a5a4:	bvs	2a65c <__assert_fail@plt+0x19228>
   2a5a8:	mov	r5, #0
   2a5ac:	cmp	r4, #1
   2a5b0:	blt	2a608 <__assert_fail@plt+0x191d4>
   2a5b4:	mov	r9, r3
   2a5b8:	cmp	r6, #1
   2a5bc:	blt	2a610 <__assert_fail@plt+0x191dc>
   2a5c0:	mov	r0, sl
   2a5c4:	mov	r5, r1
   2a5c8:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2a5cc:	cmp	r0, #0
   2a5d0:	beq	2a65c <__assert_fail@plt+0x19228>
   2a5d4:	mov	r1, r8
   2a5d8:	mov	r2, r6
   2a5dc:	mov	r7, r0
   2a5e0:	bl	111e8 <memcpy@plt>
   2a5e4:	add	r0, r7, r6
   2a5e8:	mov	r1, r9
   2a5ec:	mov	r2, r4
   2a5f0:	bl	111e8 <memcpy@plt>
   2a5f4:	ldr	r2, [fp, #24]
   2a5f8:	mov	r1, r5
   2a5fc:	mov	r4, r7
   2a600:	mov	r5, #0
   2a604:	b	2a618 <__assert_fail@plt+0x191e4>
   2a608:	mov	r7, r8
   2a60c:	b	2a614 <__assert_fail@plt+0x191e0>
   2a610:	mov	r7, r9
   2a614:	mov	r4, #0
   2a618:	ldr	r0, [fp, #20]
   2a61c:	ldr	r6, [fp, #16]
   2a620:	ldr	r3, [fp, #12]
   2a624:	str	r2, [sp, #4]
   2a628:	mov	r2, sl
   2a62c:	str	r5, [sp, #12]
   2a630:	str	r0, [sp, #8]
   2a634:	mov	r0, r1
   2a638:	mov	r1, r7
   2a63c:	str	r6, [sp]
   2a640:	bl	29ee8 <__assert_fail@plt+0x18ab4>
   2a644:	mov	r5, r0
   2a648:	mov	r0, r4
   2a64c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2a650:	mov	r0, r5
   2a654:	sub	sp, fp, #28
   2a658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a65c:	mvn	r0, #1
   2a660:	sub	sp, fp, #28
   2a664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a668:	ldrb	ip, [r0, #28]
   2a66c:	cmp	r2, #0
   2a670:	bic	ip, ip, #6
   2a674:	orrne	ip, ip, #2
   2a678:	strb	ip, [r0, #28]
   2a67c:	ldr	r0, [sp]
   2a680:	moveq	r0, r2
   2a684:	cmp	r2, #0
   2a688:	moveq	r3, r2
   2a68c:	stm	r1, {r2, r3}
   2a690:	str	r0, [r1, #8]
   2a694:	bx	lr
   2a698:	push	{r4, sl, fp, lr}
   2a69c:	add	fp, sp, #8
   2a6a0:	mov	r4, r0
   2a6a4:	ldr	r0, [r0, #24]
   2a6a8:	bl	138e8 <__assert_fail@plt+0x24b4>
   2a6ac:	ldr	r0, [r4, #36]	; 0x24
   2a6b0:	bl	138e8 <__assert_fail@plt+0x24b4>
   2a6b4:	ldr	r0, [r4, #40]	; 0x28
   2a6b8:	add	r1, r4, #4
   2a6bc:	cmp	r0, r1
   2a6c0:	beq	2a6d4 <__assert_fail@plt+0x192a0>
   2a6c4:	ldr	r0, [r0, #8]
   2a6c8:	bl	138e8 <__assert_fail@plt+0x24b4>
   2a6cc:	ldr	r0, [r4, #40]	; 0x28
   2a6d0:	bl	138e8 <__assert_fail@plt+0x24b4>
   2a6d4:	ldr	r0, [r4, #12]
   2a6d8:	bl	138e8 <__assert_fail@plt+0x24b4>
   2a6dc:	ldr	r0, [r4, #48]	; 0x30
   2a6e0:	bl	138e8 <__assert_fail@plt+0x24b4>
   2a6e4:	ldr	r0, [r4, #44]	; 0x2c
   2a6e8:	bl	138e8 <__assert_fail@plt+0x24b4>
   2a6ec:	mov	r0, r4
   2a6f0:	pop	{r4, sl, fp, lr}
   2a6f4:	b	138e8 <__assert_fail@plt+0x24b4>
   2a6f8:	nop	{0}
   2a6fc:	nop	{0}
   2a700:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a704:	add	fp, sp, #28
   2a708:	sub	sp, sp, #108	; 0x6c
   2a70c:	mov	r3, r0
   2a710:	ldrb	r0, [r0, #74]	; 0x4a
   2a714:	ldr	r9, [r3, #36]	; 0x24
   2a718:	ldr	r1, [r3, #48]	; 0x30
   2a71c:	ldr	r8, [r3, #28]
   2a720:	str	r3, [sp, #20]
   2a724:	cmp	r9, r1
   2a728:	movgt	r9, r1
   2a72c:	cmp	r0, #0
   2a730:	bne	2a74c <__assert_fail@plt+0x19318>
   2a734:	ldr	r0, [r3, #64]	; 0x40
   2a738:	cmp	r0, #0
   2a73c:	bne	2a74c <__assert_fail@plt+0x19318>
   2a740:	ldrb	r0, [r3, #76]	; 0x4c
   2a744:	cmp	r0, #0
   2a748:	beq	2a754 <__assert_fail@plt+0x19320>
   2a74c:	ldr	r7, [r3, #32]
   2a750:	b	2a96c <__assert_fail@plt+0x19538>
   2a754:	cmp	r9, r8
   2a758:	ble	2a944 <__assert_fail@plt+0x19510>
   2a75c:	add	r5, r3, #16
   2a760:	add	sl, sp, #32
   2a764:	str	r9, [sp, #16]
   2a768:	b	2a788 <__assert_fail@plt+0x19354>
   2a76c:	mov	r8, r9
   2a770:	ldr	r9, [sp, #16]
   2a774:	mov	r3, sl
   2a778:	add	sl, sp, #32
   2a77c:	cmp	r9, r8
   2a780:	mov	r7, r8
   2a784:	ble	2ad3c <__assert_fail@plt+0x19908>
   2a788:	ldr	r6, [r3, #24]
   2a78c:	ldr	r4, [r3]
   2a790:	add	r0, r6, r8
   2a794:	ldrb	r7, [r4, r0]
   2a798:	tst	r7, #128	; 0x80
   2a79c:	bne	2a7e8 <__assert_fail@plt+0x193b4>
   2a7a0:	mov	r0, r5
   2a7a4:	bl	1120c <mbsinit@plt>
   2a7a8:	cmp	r0, #0
   2a7ac:	beq	2a7e8 <__assert_fail@plt+0x193b4>
   2a7b0:	mov	r0, r7
   2a7b4:	bl	11404 <towupper@plt>
   2a7b8:	cmp	r0, #128	; 0x80
   2a7bc:	bcs	2a7dc <__assert_fail@plt+0x193a8>
   2a7c0:	ldr	r3, [sp, #20]
   2a7c4:	ldr	r1, [r3, #4]
   2a7c8:	strb	r0, [r1, r8]
   2a7cc:	ldr	r1, [r3, #8]
   2a7d0:	str	r0, [r1, r8, lsl #2]
   2a7d4:	add	r8, r8, #1
   2a7d8:	b	2a77c <__assert_fail@plt+0x19348>
   2a7dc:	ldr	r0, [sp, #20]
   2a7e0:	ldr	r4, [r0]
   2a7e4:	ldr	r6, [r0, #24]
   2a7e8:	ldm	r5, {r0, r1}
   2a7ec:	str	r1, [fp, #-36]	; 0xffffffdc
   2a7f0:	sub	r2, r9, r8
   2a7f4:	mov	r3, r5
   2a7f8:	str	r0, [fp, #-40]	; 0xffffffd8
   2a7fc:	add	r0, r4, r6
   2a800:	add	r1, r0, r8
   2a804:	add	r0, sp, #28
   2a808:	bl	38444 <__assert_fail@plt+0x27010>
   2a80c:	sub	r4, r0, #1
   2a810:	mov	r6, r0
   2a814:	cmn	r4, #4
   2a818:	bhi	2a8f8 <__assert_fail@plt+0x194c4>
   2a81c:	ldr	r0, [sp, #28]
   2a820:	bl	11404 <towupper@plt>
   2a824:	mov	r7, r0
   2a828:	ldr	r0, [sp, #28]
   2a82c:	cmp	r7, r0
   2a830:	bne	2a854 <__assert_fail@plt+0x19420>
   2a834:	ldr	sl, [sp, #20]
   2a838:	ldr	r1, [sl]
   2a83c:	ldr	r2, [sl, #24]
   2a840:	ldr	r0, [sl, #4]
   2a844:	add	r1, r1, r2
   2a848:	add	r0, r0, r8
   2a84c:	add	r1, r1, r8
   2a850:	b	2a87c <__assert_fail@plt+0x19448>
   2a854:	mov	r0, sl
   2a858:	mov	r1, r7
   2a85c:	sub	r2, fp, #40	; 0x28
   2a860:	bl	11164 <wcrtomb@plt>
   2a864:	cmp	r6, r0
   2a868:	bne	2a94c <__assert_fail@plt+0x19518>
   2a86c:	mov	r1, sl
   2a870:	ldr	sl, [sp, #20]
   2a874:	ldr	r0, [sl, #4]
   2a878:	add	r0, r0, r8
   2a87c:	mov	r2, r6
   2a880:	bl	111e8 <memcpy@plt>
   2a884:	ldr	r0, [sl, #8]
   2a888:	add	r9, r8, #1
   2a88c:	str	r7, [r0, r8, lsl #2]
   2a890:	add	r7, r6, r8
   2a894:	cmp	r9, r7
   2a898:	bge	2a76c <__assert_fail@plt+0x19338>
   2a89c:	add	r0, r0, r8, lsl #2
   2a8a0:	mvn	r1, #3
   2a8a4:	add	r2, r1, r6, lsl #2
   2a8a8:	mov	r1, #255	; 0xff
   2a8ac:	add	r0, r0, #4
   2a8b0:	bl	11368 <memset@plt>
   2a8b4:	sub	r0, r6, #2
   2a8b8:	ands	r1, r4, #7
   2a8bc:	add	sl, sp, #32
   2a8c0:	beq	2a8d0 <__assert_fail@plt+0x1949c>
   2a8c4:	subs	r1, r1, #1
   2a8c8:	add	r9, r9, #1
   2a8cc:	bne	2a8c4 <__assert_fail@plt+0x19490>
   2a8d0:	ldr	r3, [sp, #20]
   2a8d4:	cmp	r0, #7
   2a8d8:	bcc	2a8ec <__assert_fail@plt+0x194b8>
   2a8dc:	add	r0, r6, r8
   2a8e0:	sub	r0, r0, r9
   2a8e4:	subs	r0, r0, #8
   2a8e8:	bne	2a8e4 <__assert_fail@plt+0x194b0>
   2a8ec:	ldr	r9, [sp, #16]
   2a8f0:	mov	r8, r7
   2a8f4:	b	2a77c <__assert_fail@plt+0x19348>
   2a8f8:	ldr	r3, [sp, #20]
   2a8fc:	add	r0, r6, #1
   2a900:	cmp	r0, #2
   2a904:	bcc	2a918 <__assert_fail@plt+0x194e4>
   2a908:	ldr	r0, [r3, #36]	; 0x24
   2a90c:	ldr	r1, [r3, #48]	; 0x30
   2a910:	cmp	r0, r1
   2a914:	blt	2a958 <__assert_fail@plt+0x19524>
   2a918:	ldr	r0, [r3, #4]
   2a91c:	cmn	r6, #1
   2a920:	strb	r7, [r0, r8]
   2a924:	ldr	r0, [r3, #8]
   2a928:	str	r7, [r0, r8, lsl #2]
   2a92c:	add	r8, r8, #1
   2a930:	bne	2a77c <__assert_fail@plt+0x19348>
   2a934:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2a938:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2a93c:	stm	r5, {r0, r1}
   2a940:	b	2a77c <__assert_fail@plt+0x19348>
   2a944:	mov	r7, r8
   2a948:	b	2ad3c <__assert_fail@plt+0x19908>
   2a94c:	ldr	r3, [sp, #20]
   2a950:	mov	r7, r8
   2a954:	b	2a974 <__assert_fail@plt+0x19540>
   2a958:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2a95c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2a960:	mov	r7, r8
   2a964:	stm	r5, {r0, r1}
   2a968:	b	2ad3c <__assert_fail@plt+0x19908>
   2a96c:	cmp	r8, r9
   2a970:	bge	2ad3c <__assert_fail@plt+0x19908>
   2a974:	mov	r4, r3
   2a978:	mov	sl, r9
   2a97c:	sub	r2, r9, r8
   2a980:	ldr	r0, [r4, #16]!
   2a984:	ldr	r1, [r4, #4]
   2a988:	str	r0, [fp, #-40]	; 0xffffffd8
   2a98c:	str	r1, [fp, #-36]	; 0xffffffdc
   2a990:	ldr	r0, [r4, #48]	; 0x30
   2a994:	cmp	r0, #0
   2a998:	bne	2aab8 <__assert_fail@plt+0x19684>
   2a99c:	ldr	r0, [r3]
   2a9a0:	ldr	r1, [r3, #24]
   2a9a4:	mov	r9, r7
   2a9a8:	add	r0, r0, r1
   2a9ac:	add	r7, r0, r7
   2a9b0:	add	r0, sp, #24
   2a9b4:	mov	r1, r7
   2a9b8:	mov	r3, r4
   2a9bc:	bl	38444 <__assert_fail@plt+0x27010>
   2a9c0:	mov	r5, r0
   2a9c4:	sub	r0, r0, #1
   2a9c8:	cmn	r0, #4
   2a9cc:	str	r0, [sp, #16]
   2a9d0:	bhi	2ab0c <__assert_fail@plt+0x196d8>
   2a9d4:	ldr	r0, [sp, #24]
   2a9d8:	bl	11404 <towupper@plt>
   2a9dc:	mov	r6, r0
   2a9e0:	ldr	r0, [sp, #24]
   2a9e4:	cmp	r6, r0
   2a9e8:	bne	2a9f8 <__assert_fail@plt+0x195c4>
   2a9ec:	ldr	r4, [sp, #20]
   2a9f0:	mov	r1, r7
   2a9f4:	b	2aa18 <__assert_fail@plt+0x195e4>
   2a9f8:	add	r0, sp, #32
   2a9fc:	sub	r2, fp, #40	; 0x28
   2aa00:	mov	r1, r6
   2aa04:	bl	11164 <wcrtomb@plt>
   2aa08:	cmp	r0, r5
   2aa0c:	bne	2ab8c <__assert_fail@plt+0x19758>
   2aa10:	ldr	r4, [sp, #20]
   2aa14:	add	r1, sp, #32
   2aa18:	ldr	r0, [r4, #4]
   2aa1c:	add	r0, r0, r8
   2aa20:	mov	r2, r5
   2aa24:	bl	111e8 <memcpy@plt>
   2aa28:	ldrb	r0, [r4, #76]	; 0x4c
   2aa2c:	mov	r7, r9
   2aa30:	mov	r9, sl
   2aa34:	mov	r3, r4
   2aa38:	cmp	r0, #0
   2aa3c:	bne	2ac40 <__assert_fail@plt+0x1980c>
   2aa40:	ldr	r0, [r3, #8]
   2aa44:	add	r4, r5, r8
   2aa48:	add	r7, r5, r7
   2aa4c:	str	r6, [r0, r8, lsl #2]
   2aa50:	add	r6, r8, #1
   2aa54:	cmp	r6, r4
   2aa58:	bge	2aab0 <__assert_fail@plt+0x1967c>
   2aa5c:	mvn	r1, #3
   2aa60:	add	r0, r0, r6, lsl #2
   2aa64:	add	r2, r1, r5, lsl #2
   2aa68:	mov	r1, #255	; 0xff
   2aa6c:	bl	11368 <memset@plt>
   2aa70:	ldr	r1, [sp, #16]
   2aa74:	sub	r0, r5, #2
   2aa78:	ands	r1, r1, #7
   2aa7c:	beq	2aa8c <__assert_fail@plt+0x19658>
   2aa80:	subs	r1, r1, #1
   2aa84:	add	r6, r6, #1
   2aa88:	bne	2aa80 <__assert_fail@plt+0x1964c>
   2aa8c:	ldr	r3, [sp, #20]
   2aa90:	cmp	r0, #7
   2aa94:	bcc	2aaa8 <__assert_fail@plt+0x19674>
   2aa98:	add	r0, r5, r8
   2aa9c:	sub	r0, r0, r6
   2aaa0:	subs	r0, r0, #8
   2aaa4:	bne	2aaa0 <__assert_fail@plt+0x1966c>
   2aaa8:	mov	r8, r4
   2aaac:	b	2a96c <__assert_fail@plt+0x19538>
   2aab0:	mov	r8, r6
   2aab4:	b	2a96c <__assert_fail@plt+0x19538>
   2aab8:	cmp	r2, #1
   2aabc:	mov	r9, r7
   2aac0:	add	r7, sp, #32
   2aac4:	ldrge	r1, [r3, #80]	; 0x50
   2aac8:	cmpge	r1, #1
   2aacc:	blt	2a9b0 <__assert_fail@plt+0x1957c>
   2aad0:	ldr	r7, [r3, #24]
   2aad4:	ldr	r6, [r3]
   2aad8:	add	r7, r9, r7
   2aadc:	add	r3, r6, r7
   2aae0:	mov	r6, #0
   2aae4:	add	r7, sp, #32
   2aae8:	ldrb	r5, [r3, r6]
   2aaec:	ldrb	r5, [r0, r5]
   2aaf0:	strb	r5, [r7, r6]
   2aaf4:	add	r6, r6, #1
   2aaf8:	cmp	r6, r2
   2aafc:	bge	2a9b0 <__assert_fail@plt+0x1957c>
   2ab00:	cmp	r6, r1
   2ab04:	blt	2aae8 <__assert_fail@plt+0x196b4>
   2ab08:	b	2a9b0 <__assert_fail@plt+0x1957c>
   2ab0c:	ldr	r3, [sp, #20]
   2ab10:	add	r0, r5, #1
   2ab14:	cmp	r0, #2
   2ab18:	bcc	2ab2c <__assert_fail@plt+0x196f8>
   2ab1c:	ldr	r0, [r3, #36]	; 0x24
   2ab20:	ldr	r1, [r3, #48]	; 0x30
   2ab24:	cmp	r0, r1
   2ab28:	blt	2ad2c <__assert_fail@plt+0x198f8>
   2ab2c:	ldr	r2, [r3, #24]
   2ab30:	ldr	r0, [r3]
   2ab34:	ldr	r1, [r3, #64]	; 0x40
   2ab38:	mov	r7, r9
   2ab3c:	add	r2, r2, r9
   2ab40:	cmp	r1, #0
   2ab44:	ldrb	r0, [r0, r2]
   2ab48:	bne	2afc0 <__assert_fail@plt+0x19b8c>
   2ab4c:	ldr	r1, [r3, #4]
   2ab50:	mov	r9, sl
   2ab54:	strb	r0, [r1, r8]
   2ab58:	ldrb	r1, [r3, #76]	; 0x4c
   2ab5c:	cmp	r1, #0
   2ab60:	bne	2afc8 <__assert_fail@plt+0x19b94>
   2ab64:	ldr	r1, [r3, #8]
   2ab68:	add	r7, r7, #1
   2ab6c:	cmn	r5, #1
   2ab70:	str	r0, [r1, r8, lsl #2]
   2ab74:	add	r8, r8, #1
   2ab78:	bne	2a96c <__assert_fail@plt+0x19538>
   2ab7c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2ab80:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2ab84:	stm	r4, {r0, r1}
   2ab88:	b	2a96c <__assert_fail@plt+0x19538>
   2ab8c:	ldr	r3, [sp, #20]
   2ab90:	mov	r2, r0
   2ab94:	cmn	r0, #1
   2ab98:	beq	2acbc <__assert_fail@plt+0x19888>
   2ab9c:	ldr	r1, [r3, #36]	; 0x24
   2aba0:	add	r0, r2, r8
   2aba4:	cmp	r0, r1
   2aba8:	bhi	2ad2c <__assert_fail@plt+0x198f8>
   2abac:	str	r0, [sp, #12]
   2abb0:	ldr	r0, [r3, #12]
   2abb4:	mov	r7, r9
   2abb8:	cmp	r0, #0
   2abbc:	bne	2abe0 <__assert_fail@plt+0x197ac>
   2abc0:	lsl	r0, r1, #2
   2abc4:	mov	r4, r2
   2abc8:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2abcc:	ldr	r3, [sp, #20]
   2abd0:	mov	r2, r4
   2abd4:	cmp	r0, #0
   2abd8:	str	r0, [r3, #12]
   2abdc:	beq	2afb4 <__assert_fail@plt+0x19b80>
   2abe0:	ldrb	r1, [r3, #76]	; 0x4c
   2abe4:	ldr	r9, [sp, #16]
   2abe8:	cmp	r1, #0
   2abec:	bne	2ae0c <__assert_fail@plt+0x199d8>
   2abf0:	cmp	r8, #0
   2abf4:	beq	2ae04 <__assert_fail@plt+0x199d0>
   2abf8:	mov	r1, #0
   2abfc:	cmp	r8, #4
   2ac00:	bcc	2adf4 <__assert_fail@plt+0x199c0>
   2ac04:	bic	r1, r8, #3
   2ac08:	stmib	sp, {r2, r7}
   2ac0c:	mov	r2, #1
   2ac10:	add	r3, pc, #968	; 0x3c8
   2ac14:	sub	r7, r1, #4
   2ac18:	add	r2, r2, r7, lsr #2
   2ac1c:	cmp	r7, #12
   2ac20:	and	r4, r2, #3
   2ac24:	bcs	2ad50 <__assert_fail@plt+0x1991c>
   2ac28:	vld1.64	{d16-d17}, [r3 :128]
   2ac2c:	mov	sl, r4
   2ac30:	mov	r3, #0
   2ac34:	cmp	sl, #0
   2ac38:	bne	2adc4 <__assert_fail@plt+0x19990>
   2ac3c:	b	2ade4 <__assert_fail@plt+0x199b0>
   2ac40:	ldr	lr, [r3, #12]
   2ac44:	mov	r1, #0
   2ac48:	cmp	r5, #4
   2ac4c:	bcc	2ad08 <__assert_fail@plt+0x198d4>
   2ac50:	vdup.32	q8, r7
   2ac54:	bic	r1, r5, #3
   2ac58:	mov	r3, #1
   2ac5c:	mov	r9, r7
   2ac60:	subs	r2, r1, #4
   2ac64:	add	r2, r3, r2, lsr #2
   2ac68:	add	r3, pc, #880	; 0x370
   2ac6c:	and	ip, r2, #1
   2ac70:	beq	2acd4 <__assert_fail@plt+0x198a0>
   2ac74:	sub	r4, r2, ip
   2ac78:	add	r2, pc, #864	; 0x360
   2ac7c:	vmov.i32	q10, #4	; 0x00000004
   2ac80:	vmov.i32	q11, #8	; 0x00000008
   2ac84:	add	r7, lr, r8, lsl #2
   2ac88:	mov	r3, #0
   2ac8c:	vld1.64	{d18-d19}, [r2 :128]
   2ac90:	mov	r2, #32
   2ac94:	vadd.i32	q12, q9, q8
   2ac98:	vadd.i32	q9, q9, q11
   2ac9c:	add	r0, r7, #16
   2aca0:	subs	r4, r4, #2
   2aca4:	add	r3, r3, #8
   2aca8:	vadd.i32	q13, q12, q10
   2acac:	vst1.32	{d24-d25}, [r7], r2
   2acb0:	vst1.32	{d26-d27}, [r0]
   2acb4:	bne	2ac94 <__assert_fail@plt+0x19860>
   2acb8:	b	2acdc <__assert_fail@plt+0x198a8>
   2acbc:	ldr	r0, [r3, #4]
   2acc0:	mov	r1, r7
   2acc4:	mov	r2, r5
   2acc8:	mov	r4, r3
   2accc:	add	r0, r0, r8
   2acd0:	b	2aa24 <__assert_fail@plt+0x195f0>
   2acd4:	vld1.64	{d18-d19}, [r3 :128]
   2acd8:	mov	r3, #0
   2acdc:	cmp	ip, #0
   2ace0:	beq	2acf4 <__assert_fail@plt+0x198c0>
   2ace4:	add	r0, r3, r8
   2ace8:	vadd.i32	q8, q9, q8
   2acec:	add	r0, lr, r0, lsl #2
   2acf0:	vst1.32	{d16-d17}, [r0]
   2acf4:	ldr	r3, [sp, #20]
   2acf8:	mov	r7, r9
   2acfc:	cmp	r5, r1
   2ad00:	mov	r9, sl
   2ad04:	beq	2aa40 <__assert_fail@plt+0x1960c>
   2ad08:	add	r0, r8, r1
   2ad0c:	add	r2, r7, r1
   2ad10:	sub	r4, r5, r1
   2ad14:	add	r0, lr, r0, lsl #2
   2ad18:	str	r2, [r0], #4
   2ad1c:	add	r2, r2, #1
   2ad20:	subs	r4, r4, #1
   2ad24:	bne	2ad18 <__assert_fail@plt+0x198e4>
   2ad28:	b	2aa40 <__assert_fail@plt+0x1960c>
   2ad2c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2ad30:	mov	r7, r9
   2ad34:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2ad38:	stm	r4, {r0, r1}
   2ad3c:	str	r8, [r3, #28]
   2ad40:	str	r7, [r3, #32]
   2ad44:	mov	r0, #0
   2ad48:	sub	sp, fp, #28
   2ad4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ad50:	mov	sl, r4
   2ad54:	sub	r4, r2, r4
   2ad58:	add	r2, pc, #640	; 0x280
   2ad5c:	vmov.i32	q9, #12	; 0x0000000c
   2ad60:	vmov.i32	q10, #8	; 0x00000008
   2ad64:	vmov.i32	q11, #4	; 0x00000004
   2ad68:	vmov.i32	q12, #16	; 0x00000010
   2ad6c:	mov	r3, #0
   2ad70:	mov	lr, #64	; 0x40
   2ad74:	mov	r7, r0
   2ad78:	vld1.64	{d16-d17}, [r2 :128]
   2ad7c:	mov	r2, r0
   2ad80:	vadd.i32	q13, q8, q9
   2ad84:	add	ip, r2, #48	; 0x30
   2ad88:	vadd.i32	q14, q8, q10
   2ad8c:	vadd.i32	q15, q8, q11
   2ad90:	subs	r4, r4, #4
   2ad94:	add	r3, r3, #16
   2ad98:	vst1.32	{d26-d27}, [ip]
   2ad9c:	vst1.32	{d16-d17}, [r7], lr
   2ada0:	vadd.i32	q8, q8, q12
   2ada4:	add	ip, r2, #32
   2ada8:	add	r2, r2, #16
   2adac:	vst1.32	{d28-d29}, [ip]
   2adb0:	vst1.32	{d30-d31}, [r2]
   2adb4:	mov	r2, r7
   2adb8:	bne	2ad80 <__assert_fail@plt+0x1994c>
   2adbc:	cmp	sl, #0
   2adc0:	beq	2ade4 <__assert_fail@plt+0x199b0>
   2adc4:	vmov.i32	q9, #4	; 0x00000004
   2adc8:	add	r2, r0, r3, lsl #2
   2adcc:	rsb	r3, sl, #0
   2add0:	vadd.i32	q10, q8, q9
   2add4:	vst1.32	{d16-d17}, [r2]!
   2add8:	adds	r3, r3, #1
   2addc:	vorr	q8, q10, q10
   2ade0:	bcc	2add0 <__assert_fail@plt+0x1999c>
   2ade4:	ldr	r3, [sp, #20]
   2ade8:	ldmib	sp, {r2, r7}
   2adec:	cmp	r8, r1
   2adf0:	beq	2ae04 <__assert_fail@plt+0x199d0>
   2adf4:	str	r1, [r0, r1, lsl #2]
   2adf8:	add	r1, r1, #1
   2adfc:	cmp	r8, r1
   2ae00:	bne	2adf4 <__assert_fail@plt+0x199c0>
   2ae04:	mov	r0, #1
   2ae08:	strb	r0, [r3, #76]	; 0x4c
   2ae0c:	ldr	r0, [r3, #4]
   2ae10:	add	r1, sp, #32
   2ae14:	mov	r4, r3
   2ae18:	mov	sl, r2
   2ae1c:	add	r0, r0, r8
   2ae20:	bl	111e8 <memcpy@plt>
   2ae24:	ldr	r0, [r4, #8]
   2ae28:	cmp	sl, #2
   2ae2c:	str	r6, [r0, r8, lsl #2]
   2ae30:	mov	r6, r7
   2ae34:	ldr	r1, [r4, #12]
   2ae38:	str	r7, [r1, r8, lsl #2]
   2ae3c:	bcc	2af6c <__assert_fail@plt+0x19b38>
   2ae40:	sub	lr, sl, #1
   2ae44:	mov	ip, r6
   2ae48:	mov	r2, #1
   2ae4c:	cmp	lr, #4
   2ae50:	bcc	2aed4 <__assert_fail@plt+0x19aa0>
   2ae54:	add	r7, sl, r8
   2ae58:	add	r4, r8, #1
   2ae5c:	str	ip, [sp, #8]
   2ae60:	add	r6, r0, r4, lsl #2
   2ae64:	add	r3, r0, r7, lsl #2
   2ae68:	add	r4, r1, r4, lsl #2
   2ae6c:	cmp	r4, r3
   2ae70:	addcc	r3, r1, r7, lsl #2
   2ae74:	cmpcc	r6, r3
   2ae78:	bcc	2aed4 <__assert_fail@plt+0x19aa0>
   2ae7c:	add	r2, pc, #364	; 0x16c
   2ae80:	ldr	r3, [sp, #8]
   2ae84:	vdup.32	q9, r9
   2ae88:	vdup.32	q10, r5
   2ae8c:	vmov.i32	q12, #4	; 0x00000004
   2ae90:	vmov.i8	q13, #255	; 0xff
   2ae94:	vld1.64	{d22-d23}, [r2 :128]
   2ae98:	vdup.32	q8, r3
   2ae9c:	bic	r3, lr, #3
   2aea0:	orr	r2, r3, #1
   2aea4:	mov	r7, r3
   2aea8:	vcgt.u32	q14, q10, q11
   2aeac:	subs	r7, r7, #4
   2aeb0:	vbsl	q14, q11, q9
   2aeb4:	vadd.i32	q11, q11, q12
   2aeb8:	vadd.i32	q14, q14, q8
   2aebc:	vst1.32	{d28-d29}, [r4]!
   2aec0:	vst1.32	{d26-d27}, [r6]!
   2aec4:	bne	2aea8 <__assert_fail@plt+0x19a74>
   2aec8:	cmp	lr, r3
   2aecc:	mov	r6, ip
   2aed0:	beq	2af6c <__assert_fail@plt+0x19b38>
   2aed4:	tst	sl, #1
   2aed8:	mov	r3, r2
   2aedc:	bne	2af04 <__assert_fail@plt+0x19ad0>
   2aee0:	cmp	r2, r5
   2aee4:	mov	r3, r9
   2aee8:	add	r7, r2, r8
   2aeec:	movcc	r3, r2
   2aef0:	add	r3, r3, ip
   2aef4:	str	r3, [r1, r7, lsl #2]
   2aef8:	mvn	r3, #0
   2aefc:	str	r3, [r0, r7, lsl #2]
   2af00:	add	r3, r2, #1
   2af04:	add	r2, r2, #1
   2af08:	mov	r6, ip
   2af0c:	cmp	sl, r2
   2af10:	beq	2af6c <__assert_fail@plt+0x19b38>
   2af14:	add	r2, r8, r3
   2af18:	add	r2, r2, #1
   2af1c:	add	r1, r1, r2, lsl #2
   2af20:	add	r0, r0, r2, lsl #2
   2af24:	mvn	r2, #0
   2af28:	cmp	r3, r5
   2af2c:	mov	r7, r9
   2af30:	movcc	r7, r3
   2af34:	add	r7, r7, r6
   2af38:	str	r7, [r1, #-4]
   2af3c:	add	r7, r3, #1
   2af40:	add	r3, r3, #2
   2af44:	str	r2, [r0, #-4]
   2af48:	cmp	r7, r5
   2af4c:	movcs	r7, r9
   2af50:	cmp	r3, sl
   2af54:	add	r7, r7, r6
   2af58:	str	r7, [r1]
   2af5c:	str	r2, [r0]
   2af60:	add	r1, r1, #8
   2af64:	add	r0, r0, #8
   2af68:	bne	2af28 <__assert_fail@plt+0x19af4>
   2af6c:	ldr	r3, [sp, #20]
   2af70:	sub	r1, sl, r5
   2af74:	mov	r7, r6
   2af78:	ldr	r0, [r3, #48]	; 0x30
   2af7c:	ldr	r2, [r3, #52]	; 0x34
   2af80:	add	r0, r0, r1
   2af84:	cmp	r2, r6
   2af88:	str	r0, [r3, #48]	; 0x30
   2af8c:	ble	2af9c <__assert_fail@plt+0x19b68>
   2af90:	ldr	r2, [r3, #56]	; 0x38
   2af94:	add	r1, r2, r1
   2af98:	str	r1, [r3, #56]	; 0x38
   2af9c:	ldr	r9, [r3, #36]	; 0x24
   2afa0:	ldr	r8, [sp, #12]
   2afa4:	add	r7, r5, r7
   2afa8:	cmp	r9, r0
   2afac:	movgt	r9, r0
   2afb0:	b	2a96c <__assert_fail@plt+0x19538>
   2afb4:	mov	r0, #12
   2afb8:	sub	sp, fp, #28
   2afbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2afc0:	ldrb	r0, [r1, r0]
   2afc4:	b	2ab4c <__assert_fail@plt+0x19718>
   2afc8:	ldr	r1, [r3, #12]
   2afcc:	str	r7, [r1, r8, lsl #2]
   2afd0:	b	2ab64 <__assert_fail@plt+0x19730>
   2afd4:	nop	{0}
   2afd8:	nop	{0}
   2afdc:	nop	{0}
   2afe0:	andeq	r0, r0, r0
   2afe4:	andeq	r0, r0, r1
   2afe8:	andeq	r0, r0, r2
   2afec:	andeq	r0, r0, r3
   2aff0:	andeq	r0, r0, r1
   2aff4:	andeq	r0, r0, r2
   2aff8:	andeq	r0, r0, r3
   2affc:	andeq	r0, r0, r4
   2b000:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b004:	add	fp, sp, #28
   2b008:	sub	sp, sp, #68	; 0x44
   2b00c:	mov	r4, r0
   2b010:	ldr	r8, [r0, #28]
   2b014:	ldr	r5, [r0, #36]	; 0x24
   2b018:	ldr	r0, [r0, #48]	; 0x30
   2b01c:	cmp	r5, r0
   2b020:	movgt	r5, r0
   2b024:	cmp	r5, r8
   2b028:	ble	2b1f4 <__assert_fail@plt+0x19dc0>
   2b02c:	add	r9, r4, #16
   2b030:	mov	r0, sp
   2b034:	ldr	r3, [r4, #64]	; 0x40
   2b038:	ldm	r9, {r6, sl}
   2b03c:	sub	r2, r5, r8
   2b040:	cmp	r3, #0
   2b044:	bne	2b138 <__assert_fail@plt+0x19d04>
   2b048:	ldr	r3, [r4]
   2b04c:	ldr	r1, [r4, #24]
   2b050:	add	r1, r3, r1
   2b054:	add	r1, r1, r8
   2b058:	mov	r3, r9
   2b05c:	bl	38444 <__assert_fail@plt+0x27010>
   2b060:	mov	r7, r0
   2b064:	add	r0, r0, #1
   2b068:	cmp	r0, #2
   2b06c:	bcc	2b088 <__assert_fail@plt+0x19c54>
   2b070:	cmn	r7, #2
   2b074:	bne	2b0b4 <__assert_fail@plt+0x19c80>
   2b078:	ldr	r0, [r4, #36]	; 0x24
   2b07c:	ldr	r1, [r4, #48]	; 0x30
   2b080:	cmp	r0, r1
   2b084:	blt	2b1f0 <__assert_fail@plt+0x19dbc>
   2b088:	ldr	r1, [r4, #24]
   2b08c:	ldr	r0, [r4]
   2b090:	add	r1, r1, r8
   2b094:	ldrb	r0, [r0, r1]
   2b098:	str	r0, [sp]
   2b09c:	ldr	r1, [r4, #64]	; 0x40
   2b0a0:	cmp	r1, #0
   2b0a4:	bne	2b1e4 <__assert_fail@plt+0x19db0>
   2b0a8:	mov	r7, #1
   2b0ac:	stm	r9, {r6, sl}
   2b0b0:	b	2b0b8 <__assert_fail@plt+0x19c84>
   2b0b4:	ldr	r0, [sp]
   2b0b8:	ldr	r1, [r4, #8]
   2b0bc:	add	sl, r7, r8
   2b0c0:	add	r6, r8, #1
   2b0c4:	cmp	r6, sl
   2b0c8:	str	r0, [r1, r8, lsl #2]
   2b0cc:	bge	2b124 <__assert_fail@plt+0x19cf0>
   2b0d0:	mvn	r0, #3
   2b0d4:	add	r2, r0, r7, lsl #2
   2b0d8:	add	r0, r1, r8, lsl #2
   2b0dc:	mov	r1, #255	; 0xff
   2b0e0:	add	r0, r0, #4
   2b0e4:	bl	11368 <memset@plt>
   2b0e8:	sub	r1, r7, #1
   2b0ec:	sub	r0, r7, #2
   2b0f0:	ands	r1, r1, #7
   2b0f4:	beq	2b104 <__assert_fail@plt+0x19cd0>
   2b0f8:	subs	r1, r1, #1
   2b0fc:	add	r6, r6, #1
   2b100:	bne	2b0f8 <__assert_fail@plt+0x19cc4>
   2b104:	cmp	r0, #7
   2b108:	bcc	2b11c <__assert_fail@plt+0x19ce8>
   2b10c:	add	r0, r7, r8
   2b110:	sub	r0, r0, r6
   2b114:	subs	r0, r0, #8
   2b118:	bne	2b114 <__assert_fail@plt+0x19ce0>
   2b11c:	mov	r8, sl
   2b120:	b	2b128 <__assert_fail@plt+0x19cf4>
   2b124:	mov	r8, r6
   2b128:	mov	r0, sp
   2b12c:	cmp	r5, r8
   2b130:	bgt	2b034 <__assert_fail@plt+0x19c00>
   2b134:	b	2b1f4 <__assert_fail@plt+0x19dc0>
   2b138:	cmp	r2, #1
   2b13c:	add	r1, sp, #4
   2b140:	blt	2b058 <__assert_fail@plt+0x19c24>
   2b144:	ldr	r1, [r4, #80]	; 0x50
   2b148:	cmp	r1, #1
   2b14c:	add	r1, sp, #4
   2b150:	blt	2b058 <__assert_fail@plt+0x19c24>
   2b154:	ldr	r7, [r4, #24]
   2b158:	ldm	r4, {r1, ip}
   2b15c:	cmp	r2, #2
   2b160:	add	r7, r8, r7
   2b164:	ldrb	r1, [r1, r7]
   2b168:	ldrb	r1, [r3, r1]
   2b16c:	strb	r1, [ip, r8]
   2b170:	strb	r1, [sp, #4]
   2b174:	add	r1, sp, #4
   2b178:	blt	2b058 <__assert_fail@plt+0x19c24>
   2b17c:	ldr	r1, [r4, #80]	; 0x50
   2b180:	cmp	r1, #2
   2b184:	add	r1, sp, #4
   2b188:	blt	2b058 <__assert_fail@plt+0x19c24>
   2b18c:	mov	lr, r0
   2b190:	mov	r0, #1
   2b194:	ldr	r7, [r4, #24]
   2b198:	ldm	r4, {r1, ip}
   2b19c:	ldr	r3, [r4, #64]	; 0x40
   2b1a0:	add	r1, r1, r7
   2b1a4:	add	r1, r1, r8
   2b1a8:	ldrb	r1, [r1, r0]
   2b1ac:	ldrb	r1, [r3, r1]
   2b1b0:	add	r3, ip, r8
   2b1b4:	strb	r1, [r3, r0]
   2b1b8:	add	r3, sp, #4
   2b1bc:	strb	r1, [r3, r0]
   2b1c0:	add	r0, r0, #1
   2b1c4:	cmp	r0, r2
   2b1c8:	bge	2b1d8 <__assert_fail@plt+0x19da4>
   2b1cc:	ldr	r1, [r4, #80]	; 0x50
   2b1d0:	cmp	r0, r1
   2b1d4:	blt	2b194 <__assert_fail@plt+0x19d60>
   2b1d8:	add	r1, sp, #4
   2b1dc:	mov	r0, lr
   2b1e0:	b	2b058 <__assert_fail@plt+0x19c24>
   2b1e4:	ldrb	r0, [r1, r0]
   2b1e8:	str	r0, [sp]
   2b1ec:	b	2b0a8 <__assert_fail@plt+0x19c74>
   2b1f0:	stm	r9, {r6, sl}
   2b1f4:	str	r8, [r4, #28]
   2b1f8:	str	r8, [r4, #32]
   2b1fc:	sub	sp, fp, #28
   2b200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b204:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b208:	add	fp, sp, #28
   2b20c:	sub	sp, sp, #28
   2b210:	ldr	r9, [r1]
   2b214:	mov	r5, r0
   2b218:	ldr	r4, [fp, #12]
   2b21c:	mov	r6, r2
   2b220:	str	r1, [sp, #16]
   2b224:	str	r3, [sp, #20]
   2b228:	ldr	r0, [r9, #84]	; 0x54
   2b22c:	str	r4, [sp, #4]
   2b230:	str	r0, [sp, #12]
   2b234:	ldr	r0, [fp, #8]
   2b238:	str	r0, [sp]
   2b23c:	mov	r0, r5
   2b240:	bl	2bcac <__assert_fail@plt+0x1a878>
   2b244:	mov	r7, r0
   2b248:	cmp	r0, #0
   2b24c:	bne	2b25c <__assert_fail@plt+0x19e28>
   2b250:	ldr	r0, [r4]
   2b254:	cmp	r0, #0
   2b258:	bne	2b468 <__assert_fail@plt+0x1a034>
   2b25c:	ldrb	r0, [r6, #4]
   2b260:	cmp	r0, #10
   2b264:	bne	2b3a4 <__assert_fail@plt+0x19f70>
   2b268:	ldr	r0, [sp, #20]
   2b26c:	mov	sl, #0
   2b270:	orr	r0, r0, #8388608	; 0x800000
   2b274:	str	r0, [sp, #24]
   2b278:	ldr	r2, [sp, #24]
   2b27c:	mov	r0, r6
   2b280:	mov	r1, r5
   2b284:	bl	2b470 <__assert_fail@plt+0x1a03c>
   2b288:	ldr	r1, [r5, #40]	; 0x28
   2b28c:	mov	r8, #0
   2b290:	add	r0, r1, r0
   2b294:	str	r0, [r5, #40]	; 0x28
   2b298:	ldrb	r0, [r6, #4]
   2b29c:	orr	r1, r0, #8
   2b2a0:	cmp	r1, #10
   2b2a4:	bne	2b308 <__assert_fail@plt+0x19ed4>
   2b2a8:	ldr	r1, [r9, #64]	; 0x40
   2b2ac:	cmp	r1, #31
   2b2b0:	beq	2b37c <__assert_fail@plt+0x19f48>
   2b2b4:	ldr	r0, [r9, #56]	; 0x38
   2b2b8:	add	r4, r0, r1, lsl #5
   2b2bc:	add	r2, r1, #1
   2b2c0:	mov	r0, #10
   2b2c4:	cmp	r7, #0
   2b2c8:	str	r2, [r9, #64]	; 0x40
   2b2cc:	str	sl, [r4, #4]!
   2b2d0:	stmib	r4, {r7, r8, sl}
   2b2d4:	str	sl, [r4, #16]
   2b2d8:	str	sl, [r4, #20]
   2b2dc:	str	r0, [r4, #24]
   2b2e0:	mvn	r0, #0
   2b2e4:	str	r0, [r4, #28]
   2b2e8:	strne	r4, [r7]
   2b2ec:	cmp	r8, #0
   2b2f0:	mov	r7, r4
   2b2f4:	strne	r4, [r8]
   2b2f8:	ldrb	r0, [r6, #4]
   2b2fc:	cmp	r0, #10
   2b300:	beq	2b278 <__assert_fail@plt+0x19e44>
   2b304:	b	2b3a8 <__assert_fail@plt+0x19f74>
   2b308:	ldr	r1, [fp, #8]
   2b30c:	cmp	r1, #0
   2b310:	beq	2b320 <__assert_fail@plt+0x19eec>
   2b314:	cmp	r0, #9
   2b318:	mov	r8, #0
   2b31c:	beq	2b2a8 <__assert_fail@plt+0x19e74>
   2b320:	ldr	r0, [sp, #12]
   2b324:	ldr	r4, [r9, #84]	; 0x54
   2b328:	ldr	r1, [sp, #16]
   2b32c:	ldr	r3, [sp, #20]
   2b330:	mov	r2, r6
   2b334:	str	r0, [r9, #84]	; 0x54
   2b338:	ldr	r0, [fp, #8]
   2b33c:	str	r0, [sp]
   2b340:	ldr	r0, [fp, #12]
   2b344:	str	r0, [sp, #4]
   2b348:	mov	r0, r5
   2b34c:	bl	2bcac <__assert_fail@plt+0x1a878>
   2b350:	mov	r8, r0
   2b354:	cmp	r0, #0
   2b358:	bne	2b36c <__assert_fail@plt+0x19f38>
   2b35c:	ldr	r0, [fp, #12]
   2b360:	ldr	r0, [r0]
   2b364:	cmp	r0, #0
   2b368:	bne	2b3b4 <__assert_fail@plt+0x19f80>
   2b36c:	ldr	r0, [r9, #84]	; 0x54
   2b370:	orr	r0, r0, r4
   2b374:	str	r0, [r9, #84]	; 0x54
   2b378:	b	2b2a8 <__assert_fail@plt+0x19e74>
   2b37c:	mov	r0, #996	; 0x3e4
   2b380:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2b384:	cmp	r0, #0
   2b388:	beq	2b45c <__assert_fail@plt+0x1a028>
   2b38c:	ldr	r1, [r9, #56]	; 0x38
   2b390:	str	r1, [r0]
   2b394:	mov	r1, #0
   2b398:	str	r1, [r9, #64]	; 0x40
   2b39c:	str	r0, [r9, #56]	; 0x38
   2b3a0:	b	2b2b8 <__assert_fail@plt+0x19e84>
   2b3a4:	mov	r4, r7
   2b3a8:	mov	r0, r4
   2b3ac:	sub	sp, fp, #28
   2b3b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b3b4:	mov	r4, #0
   2b3b8:	cmp	r7, #0
   2b3bc:	beq	2b3a8 <__assert_fail@plt+0x19f74>
   2b3c0:	movw	r8, #255	; 0xff
   2b3c4:	movt	r8, #4
   2b3c8:	mov	r6, r7
   2b3cc:	ldr	r7, [r7, #4]
   2b3d0:	cmp	r7, #0
   2b3d4:	bne	2b3c8 <__assert_fail@plt+0x19f94>
   2b3d8:	ldr	r7, [r6, #8]
   2b3dc:	cmp	r7, #0
   2b3e0:	bne	2b3c8 <__assert_fail@plt+0x19f94>
   2b3e4:	ldr	r0, [r6, #24]
   2b3e8:	and	r0, r0, r8
   2b3ec:	cmp	r0, #3
   2b3f0:	beq	2b424 <__assert_fail@plt+0x19ff0>
   2b3f4:	cmp	r0, #6
   2b3f8:	bne	2b430 <__assert_fail@plt+0x19ffc>
   2b3fc:	ldr	r5, [r6, #20]
   2b400:	ldr	r0, [r5]
   2b404:	bl	138e8 <__assert_fail@plt+0x24b4>
   2b408:	ldr	r0, [r5, #4]
   2b40c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2b410:	ldr	r0, [r5, #8]
   2b414:	bl	138e8 <__assert_fail@plt+0x24b4>
   2b418:	ldr	r0, [r5, #12]
   2b41c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2b420:	b	2b428 <__assert_fail@plt+0x19ff4>
   2b424:	ldr	r5, [r6, #20]
   2b428:	mov	r0, r5
   2b42c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2b430:	ldr	r0, [r6]
   2b434:	cmp	r0, #0
   2b438:	beq	2b3a8 <__assert_fail@plt+0x19f74>
   2b43c:	ldr	r7, [r0, #8]
   2b440:	cmp	r7, r6
   2b444:	mov	r6, r0
   2b448:	beq	2b3e4 <__assert_fail@plt+0x19fb0>
   2b44c:	cmp	r7, #0
   2b450:	mov	r6, r0
   2b454:	beq	2b3e4 <__assert_fail@plt+0x19fb0>
   2b458:	b	2b3c8 <__assert_fail@plt+0x19f94>
   2b45c:	ldr	r1, [fp, #12]
   2b460:	mov	r0, #12
   2b464:	str	r0, [r1]
   2b468:	mov	r4, #0
   2b46c:	b	2b3a8 <__assert_fail@plt+0x19f74>
   2b470:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2b474:	add	fp, sp, #24
   2b478:	sub	sp, sp, #8
   2b47c:	mov	r9, r0
   2b480:	mov	r7, r1
   2b484:	ldr	r0, [r1, #40]	; 0x28
   2b488:	ldr	r1, [r1, #56]	; 0x38
   2b48c:	cmp	r1, r0
   2b490:	ble	2b578 <__assert_fail@plt+0x1a144>
   2b494:	ldr	r1, [r7, #4]
   2b498:	mov	r5, r9
   2b49c:	mov	r8, r2
   2b4a0:	ldrb	r6, [r1, r0]
   2b4a4:	strb	r6, [r5], #4
   2b4a8:	ldr	r0, [r5]
   2b4ac:	bic	r1, r0, #6291456	; 0x600000
   2b4b0:	str	r1, [r5]
   2b4b4:	ldr	r3, [r7, #80]	; 0x50
   2b4b8:	cmp	r3, #2
   2b4bc:	blt	2b4e0 <__assert_fail@plt+0x1a0ac>
   2b4c0:	ldr	r2, [r7, #28]
   2b4c4:	ldr	r1, [r7, #40]	; 0x28
   2b4c8:	cmp	r1, r2
   2b4cc:	beq	2b4e0 <__assert_fail@plt+0x1a0ac>
   2b4d0:	ldr	r2, [r7, #8]
   2b4d4:	ldr	r1, [r2, r1, lsl #2]
   2b4d8:	cmn	r1, #1
   2b4dc:	beq	2b9b4 <__assert_fail@plt+0x1a580>
   2b4e0:	movw	r1, #65280	; 0xff00
   2b4e4:	cmp	r6, #92	; 0x5c
   2b4e8:	movt	r1, #65439	; 0xff9f
   2b4ec:	bne	2b588 <__assert_fail@plt+0x1a154>
   2b4f0:	ldr	r6, [r7, #40]	; 0x28
   2b4f4:	ldr	r4, [r7, #48]	; 0x30
   2b4f8:	add	r2, r6, #1
   2b4fc:	cmp	r2, r4
   2b500:	bge	2b5dc <__assert_fail@plt+0x1a1a8>
   2b504:	ldrb	r4, [r7, #75]	; 0x4b
   2b508:	cmp	r4, #0
   2b50c:	bne	2bc38 <__assert_fail@plt+0x1a804>
   2b510:	ldr	r3, [r7, #4]
   2b514:	ldrb	r6, [r3, r2]
   2b518:	and	r0, r0, r1
   2b51c:	strb	r6, [r9]
   2b520:	orr	r4, r0, #1
   2b524:	str	r4, [r9, #4]
   2b528:	ldr	r0, [r7, #80]	; 0x50
   2b52c:	cmp	r0, #2
   2b530:	blt	2b800 <__assert_fail@plt+0x1a3cc>
   2b534:	ldr	r0, [r7, #8]
   2b538:	ldr	r1, [r7, #40]	; 0x28
   2b53c:	add	r0, r0, r1, lsl #2
   2b540:	ldr	r4, [r0, #4]
   2b544:	mov	r0, r4
   2b548:	bl	11350 <iswalnum@plt>
   2b54c:	sub	r1, r4, #95	; 0x5f
   2b550:	cmp	r0, #0
   2b554:	clz	r1, r1
   2b558:	movwne	r0, #1
   2b55c:	lsr	r1, r1, #5
   2b560:	orr	r0, r1, r0
   2b564:	ldr	r1, [r5]
   2b568:	bic	r1, r1, #4194304	; 0x400000
   2b56c:	orr	r0, r1, r0, lsl #22
   2b570:	uxtb	r1, r6
   2b574:	b	2b824 <__assert_fail@plt+0x1a3f0>
   2b578:	mov	r0, #2
   2b57c:	mov	r4, #0
   2b580:	strb	r0, [r9, #4]
   2b584:	b	2bc2c <__assert_fail@plt+0x1a7f8>
   2b588:	and	r0, r0, r1
   2b58c:	orr	r4, r0, #1
   2b590:	str	r4, [r5]
   2b594:	ldr	r0, [r7, #80]	; 0x50
   2b598:	cmp	r0, #2
   2b59c:	blt	2b5e8 <__assert_fail@plt+0x1a1b4>
   2b5a0:	ldr	r0, [r7, #8]
   2b5a4:	ldr	r1, [r7, #40]	; 0x28
   2b5a8:	ldr	r4, [r0, r1, lsl #2]
   2b5ac:	mov	r0, r4
   2b5b0:	bl	11350 <iswalnum@plt>
   2b5b4:	sub	r1, r4, #95	; 0x5f
   2b5b8:	cmp	r0, #0
   2b5bc:	clz	r1, r1
   2b5c0:	movwne	r0, #1
   2b5c4:	lsr	r1, r1, #5
   2b5c8:	orr	r0, r1, r0
   2b5cc:	ldr	r1, [r5]
   2b5d0:	bic	r1, r1, #4194304	; 0x400000
   2b5d4:	orr	r0, r1, r0, lsl #22
   2b5d8:	b	2b608 <__assert_fail@plt+0x1a1d4>
   2b5dc:	and	r0, r0, r1
   2b5e0:	orr	r0, r0, #36	; 0x24
   2b5e4:	b	2b9c8 <__assert_fail@plt+0x1a594>
   2b5e8:	bl	11308 <__ctype_b_loc@plt>
   2b5ec:	ldr	r0, [r0]
   2b5f0:	cmp	r6, #95	; 0x5f
   2b5f4:	add	r0, r0, r6, lsl #1
   2b5f8:	ldrh	r0, [r0]
   2b5fc:	ubfx	r0, r0, #3, #1
   2b600:	movweq	r0, #1
   2b604:	orr	r0, r4, r0, lsl #22
   2b608:	sub	r1, r6, #10
   2b60c:	mov	r4, #1
   2b610:	str	r0, [r5]
   2b614:	cmp	r1, #115	; 0x73
   2b618:	bhi	2bc2c <__assert_fail@plt+0x1a7f8>
   2b61c:	add	r2, pc, #0
   2b620:	ldr	pc, [r2, r1, lsl #2]
   2b624:	strdeq	fp, [r2], -r4
   2b628:	andeq	fp, r2, ip, lsr #24
   2b62c:	andeq	fp, r2, ip, lsr #24
   2b630:	andeq	fp, r2, ip, lsr #24
   2b634:	andeq	fp, r2, ip, lsr #24
   2b638:	andeq	fp, r2, ip, lsr #24
   2b63c:	andeq	fp, r2, ip, lsr #24
   2b640:	andeq	fp, r2, ip, lsr #24
   2b644:	andeq	fp, r2, ip, lsr #24
   2b648:	andeq	fp, r2, ip, lsr #24
   2b64c:	andeq	fp, r2, ip, lsr #24
   2b650:	andeq	fp, r2, ip, lsr #24
   2b654:	andeq	fp, r2, ip, lsr #24
   2b658:	andeq	fp, r2, ip, lsr #24
   2b65c:	andeq	fp, r2, ip, lsr #24
   2b660:	andeq	fp, r2, ip, lsr #24
   2b664:	andeq	fp, r2, ip, lsr #24
   2b668:	andeq	fp, r2, ip, lsr #24
   2b66c:	andeq	fp, r2, ip, lsr #24
   2b670:	andeq	fp, r2, ip, lsr #24
   2b674:	andeq	fp, r2, ip, lsr #24
   2b678:	andeq	fp, r2, ip, lsr #24
   2b67c:	andeq	fp, r2, ip, lsr #24
   2b680:	andeq	fp, r2, ip, lsr #24
   2b684:	andeq	fp, r2, ip, lsr #24
   2b688:	andeq	fp, r2, ip, lsr #24
   2b68c:	ldrdeq	fp, [r2], -r4
   2b690:	andeq	fp, r2, ip, lsr #24
   2b694:	andeq	fp, r2, ip, lsr #24
   2b698:	andeq	fp, r2, ip, lsr #24
   2b69c:	andeq	fp, r2, ip, lsr #20
   2b6a0:	andeq	fp, r2, r8, lsr sl
   2b6a4:	andeq	fp, r2, r4, asr #20
   2b6a8:	andeq	fp, r2, ip, asr #20
   2b6ac:	andeq	fp, r2, ip, lsr #24
   2b6b0:	andeq	fp, r2, ip, lsr #24
   2b6b4:	andeq	fp, r2, ip, asr sl
   2b6b8:	andeq	fp, r2, ip, lsr #24
   2b6bc:	andeq	fp, r2, ip, lsr #24
   2b6c0:	andeq	fp, r2, ip, lsr #24
   2b6c4:	andeq	fp, r2, ip, lsr #24
   2b6c8:	andeq	fp, r2, ip, lsr #24
   2b6cc:	andeq	fp, r2, ip, lsr #24
   2b6d0:	andeq	fp, r2, ip, lsr #24
   2b6d4:	andeq	fp, r2, ip, lsr #24
   2b6d8:	andeq	fp, r2, ip, lsr #24
   2b6dc:	andeq	fp, r2, ip, lsr #24
   2b6e0:	andeq	fp, r2, ip, lsr #24
   2b6e4:	andeq	fp, r2, ip, lsr #24
   2b6e8:	andeq	fp, r2, ip, lsr #24
   2b6ec:	andeq	fp, r2, ip, lsr #24
   2b6f0:	andeq	fp, r2, ip, lsr #24
   2b6f4:	andeq	fp, r2, ip, lsr #24
   2b6f8:	andeq	fp, r2, r4, ror #20
   2b6fc:	andeq	fp, r2, ip, lsr #24
   2b700:	andeq	fp, r2, ip, lsr #24
   2b704:	andeq	fp, r2, ip, lsr #24
   2b708:	andeq	fp, r2, ip, lsr #24
   2b70c:	andeq	fp, r2, ip, lsr #24
   2b710:	andeq	fp, r2, ip, lsr #24
   2b714:	andeq	fp, r2, ip, lsr #24
   2b718:	andeq	fp, r2, ip, lsr #24
   2b71c:	andeq	fp, r2, ip, lsr #24
   2b720:	andeq	fp, r2, ip, lsr #24
   2b724:	andeq	fp, r2, ip, lsr #24
   2b728:	andeq	fp, r2, ip, lsr #24
   2b72c:	andeq	fp, r2, ip, lsr #24
   2b730:	andeq	fp, r2, ip, lsr #24
   2b734:	andeq	fp, r2, ip, lsr #24
   2b738:	andeq	fp, r2, ip, lsr #24
   2b73c:	andeq	fp, r2, ip, lsr #24
   2b740:	andeq	fp, r2, ip, lsr #24
   2b744:	andeq	fp, r2, ip, lsr #24
   2b748:	andeq	fp, r2, ip, lsr #24
   2b74c:	andeq	fp, r2, ip, lsr #24
   2b750:	andeq	fp, r2, ip, lsr #24
   2b754:	andeq	fp, r2, ip, lsr #24
   2b758:	andeq	fp, r2, ip, lsr #24
   2b75c:	andeq	fp, r2, ip, lsr #24
   2b760:	andeq	fp, r2, ip, lsr #24
   2b764:	andeq	fp, r2, ip, lsr #24
   2b768:	andeq	fp, r2, r4, ror sl
   2b76c:	andeq	fp, r2, ip, lsr #24
   2b770:	andeq	fp, r2, ip, lsr #24
   2b774:	andeq	fp, r2, ip, ror sl
   2b778:	andeq	fp, r2, ip, lsr #24
   2b77c:	andeq	fp, r2, ip, lsr #24
   2b780:	andeq	fp, r2, ip, lsr #24
   2b784:	andeq	fp, r2, ip, lsr #24
   2b788:	andeq	fp, r2, ip, lsr #24
   2b78c:	andeq	fp, r2, ip, lsr #24
   2b790:	andeq	fp, r2, ip, lsr #24
   2b794:	andeq	fp, r2, ip, lsr #24
   2b798:	andeq	fp, r2, ip, lsr #24
   2b79c:	andeq	fp, r2, ip, lsr #24
   2b7a0:	andeq	fp, r2, ip, lsr #24
   2b7a4:	andeq	fp, r2, ip, lsr #24
   2b7a8:	andeq	fp, r2, ip, lsr #24
   2b7ac:	andeq	fp, r2, ip, lsr #24
   2b7b0:	andeq	fp, r2, ip, lsr #24
   2b7b4:	andeq	fp, r2, ip, lsr #24
   2b7b8:	andeq	fp, r2, ip, lsr #24
   2b7bc:	andeq	fp, r2, ip, lsr #24
   2b7c0:	andeq	fp, r2, ip, lsr #24
   2b7c4:	andeq	fp, r2, ip, lsr #24
   2b7c8:	andeq	fp, r2, ip, lsr #24
   2b7cc:	andeq	fp, r2, ip, lsr #24
   2b7d0:	andeq	fp, r2, ip, lsr #24
   2b7d4:	andeq	fp, r2, ip, lsr #24
   2b7d8:	andeq	fp, r2, ip, lsr #24
   2b7dc:	andeq	fp, r2, ip, lsr #24
   2b7e0:	andeq	fp, r2, ip, lsr #24
   2b7e4:	andeq	fp, r2, ip, lsr #24
   2b7e8:	andeq	fp, r2, r4, lsr #21
   2b7ec:			; <UNDEFINED> instruction: 0x0002bab4
   2b7f0:	andeq	fp, r2, r8, asr #21
   2b7f4:	tst	r8, #2048	; 0x800
   2b7f8:	bne	2bac0 <__assert_fail@plt+0x1a68c>
   2b7fc:	b	2bc2c <__assert_fail@plt+0x1a7f8>
   2b800:	bl	11308 <__ctype_b_loc@plt>
   2b804:	ldr	r0, [r0]
   2b808:	uxtb	r1, r6
   2b80c:	cmp	r1, #95	; 0x5f
   2b810:	add	r0, r0, r1, lsl #1
   2b814:	ldrh	r0, [r0]
   2b818:	ubfx	r0, r0, #3, #1
   2b81c:	movweq	r0, #1
   2b820:	orr	r0, r4, r0, lsl #22
   2b824:	mvn	r2, #38	; 0x26
   2b828:	mov	r4, #2
   2b82c:	str	r0, [r5]
   2b830:	uxtab	r2, r2, r6
   2b834:	cmp	r2, #86	; 0x56
   2b838:	bhi	2bc2c <__assert_fail@plt+0x1a7f8>
   2b83c:	add	r3, pc, #0
   2b840:	ldr	pc, [r3, r2, lsl #2]
   2b844:	andeq	fp, r2, r4, lsl #22
   2b848:	andeq	fp, r2, r4, lsl fp
   2b84c:	andeq	fp, r2, r4, lsr #22
   2b850:	andeq	fp, r2, ip, lsr #24
   2b854:	andeq	fp, r2, r4, lsr fp
   2b858:	andeq	fp, r2, ip, lsr #24
   2b85c:	andeq	fp, r2, ip, lsr #24
   2b860:	andeq	fp, r2, ip, lsr #24
   2b864:	andeq	fp, r2, ip, lsr #24
   2b868:	andeq	fp, r2, ip, lsr #24
   2b86c:	andeq	fp, r2, r0, lsr #19
   2b870:	andeq	fp, r2, r0, lsr #19
   2b874:	andeq	fp, r2, r0, lsr #19
   2b878:	andeq	fp, r2, r0, lsr #19
   2b87c:	andeq	fp, r2, r0, lsr #19
   2b880:	andeq	fp, r2, r0, lsr #19
   2b884:	andeq	fp, r2, r0, lsr #19
   2b888:	andeq	fp, r2, r0, lsr #19
   2b88c:	andeq	fp, r2, r0, lsr #19
   2b890:	andeq	fp, r2, ip, lsr #24
   2b894:	andeq	fp, r2, ip, lsr #24
   2b898:	andeq	fp, r2, ip, asr #22
   2b89c:	andeq	fp, r2, ip, lsr #24
   2b8a0:	andeq	fp, r2, ip, asr fp
   2b8a4:	andeq	fp, r2, ip, ror #22
   2b8a8:	andeq	fp, r2, ip, lsr #24
   2b8ac:	andeq	fp, r2, ip, lsr #24
   2b8b0:	andeq	fp, r2, r4, lsl #23
   2b8b4:	andeq	fp, r2, ip, lsr #24
   2b8b8:	andeq	fp, r2, ip, lsr #24
   2b8bc:	andeq	fp, r2, ip, lsr #24
   2b8c0:	andeq	fp, r2, ip, lsr #24
   2b8c4:	andeq	fp, r2, ip, lsr #24
   2b8c8:	andeq	fp, r2, ip, lsr #24
   2b8cc:	andeq	fp, r2, ip, lsr #24
   2b8d0:	andeq	fp, r2, ip, lsr #24
   2b8d4:	andeq	fp, r2, ip, lsr #24
   2b8d8:	andeq	fp, r2, ip, lsr #24
   2b8dc:	andeq	fp, r2, ip, lsr #24
   2b8e0:	andeq	fp, r2, ip, lsr #24
   2b8e4:	andeq	fp, r2, ip, lsr #24
   2b8e8:	andeq	fp, r2, ip, lsr #24
   2b8ec:	andeq	fp, r2, ip, lsr #24
   2b8f0:	andeq	fp, r2, ip, lsr #24
   2b8f4:	muleq	r2, r4, fp
   2b8f8:	andeq	fp, r2, ip, lsr #24
   2b8fc:	andeq	fp, r2, ip, lsr #24
   2b900:	andeq	fp, r2, ip, lsr #24
   2b904:	andeq	fp, r2, r4, lsr #23
   2b908:	andeq	fp, r2, ip, lsr #24
   2b90c:	andeq	fp, r2, ip, lsr #24
   2b910:	andeq	fp, r2, ip, lsr #24
   2b914:	andeq	fp, r2, ip, lsr #24
   2b918:	andeq	fp, r2, ip, lsr #24
   2b91c:	andeq	fp, r2, ip, lsr #24
   2b920:	andeq	fp, r2, ip, lsr #24
   2b924:	andeq	fp, r2, ip, lsr #24
   2b928:			; <UNDEFINED> instruction: 0x0002bbb4
   2b92c:	andeq	fp, r2, ip, lsr #24
   2b930:	andeq	fp, r2, r4, asr #23
   2b934:	andeq	fp, r2, ip, lsr #24
   2b938:	andeq	fp, r2, ip, lsr #24
   2b93c:	andeq	fp, r2, ip, lsr #24
   2b940:	andeq	fp, r2, ip, lsr #24
   2b944:	andeq	fp, r2, ip, lsr #24
   2b948:	andeq	fp, r2, ip, lsr #24
   2b94c:	andeq	fp, r2, ip, lsr #24
   2b950:	andeq	fp, r2, ip, lsr #24
   2b954:	andeq	fp, r2, ip, lsr #24
   2b958:	andeq	fp, r2, ip, lsr #24
   2b95c:	andeq	fp, r2, ip, lsr #24
   2b960:	andeq	fp, r2, ip, lsr #24
   2b964:	andeq	fp, r2, ip, lsr #24
   2b968:	andeq	fp, r2, ip, lsr #24
   2b96c:	andeq	fp, r2, ip, lsr #24
   2b970:	andeq	fp, r2, ip, lsr #24
   2b974:	ldrdeq	fp, [r2], -r4
   2b978:	andeq	fp, r2, ip, lsr #24
   2b97c:	andeq	fp, r2, ip, lsr #24
   2b980:	andeq	fp, r2, ip, lsr #24
   2b984:	andeq	fp, r2, r4, ror #23
   2b988:	andeq	fp, r2, ip, lsr #24
   2b98c:	andeq	fp, r2, ip, lsr #24
   2b990:	andeq	fp, r2, ip, lsr #24
   2b994:	strdeq	fp, [r2], -r4
   2b998:	andeq	fp, r2, r8, lsl #24
   2b99c:	andeq	fp, r2, r4, lsl ip
   2b9a0:	tst	r8, #16384	; 0x4000
   2b9a4:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2b9a8:	sub	r1, r1, #49	; 0x31
   2b9ac:	mov	r2, #4
   2b9b0:	b	2ba94 <__assert_fail@plt+0x1a660>
   2b9b4:	movw	r1, #65280	; 0xff00
   2b9b8:	movt	r1, #65439	; 0xff9f
   2b9bc:	and	r0, r0, r1
   2b9c0:	orr	r0, r0, #1
   2b9c4:	orr	r0, r0, #2097152	; 0x200000
   2b9c8:	str	r0, [r5]
   2b9cc:	mov	r4, #1
   2b9d0:	b	2bc2c <__assert_fail@plt+0x1a7f8>
   2b9d4:	tst	r8, #8
   2b9d8:	bne	2ba24 <__assert_fail@plt+0x1a5f0>
   2b9dc:	ldr	r1, [r7, #40]	; 0x28
   2b9e0:	ldr	r2, [r7, #48]	; 0x30
   2b9e4:	add	r1, r1, #1
   2b9e8:	cmp	r1, r2
   2b9ec:	beq	2ba24 <__assert_fail@plt+0x1a5f0>
   2b9f0:	str	r1, [r7, #40]	; 0x28
   2b9f4:	mov	r0, sp
   2b9f8:	mov	r1, r7
   2b9fc:	mov	r2, r8
   2ba00:	bl	2b470 <__assert_fail@plt+0x1a03c>
   2ba04:	ldr	r0, [r7, #40]	; 0x28
   2ba08:	sub	r0, r0, #1
   2ba0c:	str	r0, [r7, #40]	; 0x28
   2ba10:	ldrb	r0, [sp, #4]
   2ba14:	sub	r0, r0, #9
   2ba18:	cmp	r0, #1
   2ba1c:	bhi	2bc2c <__assert_fail@plt+0x1a7f8>
   2ba20:	ldr	r0, [r5]
   2ba24:	mov	r1, #32
   2ba28:	b	2ba90 <__assert_fail@plt+0x1a65c>
   2ba2c:	tst	r8, #8192	; 0x2000
   2ba30:	bne	2bb1c <__assert_fail@plt+0x1a6e8>
   2ba34:	b	2bc2c <__assert_fail@plt+0x1a7f8>
   2ba38:	tst	r8, #8192	; 0x2000
   2ba3c:	bne	2bb2c <__assert_fail@plt+0x1a6f8>
   2ba40:	b	2bc2c <__assert_fail@plt+0x1a7f8>
   2ba44:	mov	r1, #11
   2ba48:	b	2bc24 <__assert_fail@plt+0x1a7f0>
   2ba4c:	movw	r1, #1026	; 0x402
   2ba50:	tst	r8, r1
   2ba54:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2ba58:	b	2bb44 <__assert_fail@plt+0x1a710>
   2ba5c:	mov	r1, #5
   2ba60:	b	2bc24 <__assert_fail@plt+0x1a7f0>
   2ba64:	movw	r1, #1026	; 0x402
   2ba68:	tst	r8, r1
   2ba6c:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2ba70:	b	2bb7c <__assert_fail@plt+0x1a748>
   2ba74:	mov	r1, #20
   2ba78:	b	2bc24 <__assert_fail@plt+0x1a7f0>
   2ba7c:	movw	r1, #8
   2ba80:	movt	r1, #128	; 0x80
   2ba84:	tst	r8, r1
   2ba88:	beq	2bad8 <__assert_fail@plt+0x1a6a4>
   2ba8c:	mov	r1, #16
   2ba90:	mov	r2, #12
   2ba94:	bfi	r0, r2, #0, #8
   2ba98:	str	r1, [r9]
   2ba9c:	str	r0, [r9, #4]
   2baa0:	b	2bc2c <__assert_fail@plt+0x1a7f8>
   2baa4:	and	r1, r8, #4608	; 0x1200
   2baa8:	cmp	r1, #4608	; 0x1200
   2baac:	beq	2bc00 <__assert_fail@plt+0x1a7cc>
   2bab0:	b	2bc2c <__assert_fail@plt+0x1a7f8>
   2bab4:	and	r1, r8, #33792	; 0x8400
   2bab8:	cmp	r1, #32768	; 0x8000
   2babc:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2bac0:	mov	r1, #10
   2bac4:	b	2bc24 <__assert_fail@plt+0x1a7f0>
   2bac8:	and	r1, r8, #4608	; 0x1200
   2bacc:	cmp	r1, #4608	; 0x1200
   2bad0:	beq	2bc20 <__assert_fail@plt+0x1a7ec>
   2bad4:	b	2bc2c <__assert_fail@plt+0x1a7f8>
   2bad8:	ldr	r1, [r7, #40]	; 0x28
   2badc:	cmp	r1, #0
   2bae0:	beq	2ba8c <__assert_fail@plt+0x1a658>
   2bae4:	tst	r8, #2048	; 0x800
   2bae8:	beq	2bc2c <__assert_fail@plt+0x1a7f8>
   2baec:	ldr	r2, [r7, #4]
   2baf0:	add	r1, r1, r2
   2baf4:	ldrb	r1, [r1, #-1]
   2baf8:	cmp	r1, #10
   2bafc:	beq	2ba8c <__assert_fail@plt+0x1a658>
   2bb00:	b	2bc2c <__assert_fail@plt+0x1a7f8>
   2bb04:	tst	r8, #524288	; 0x80000
   2bb08:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2bb0c:	mov	r1, #128	; 0x80
   2bb10:	b	2ba90 <__assert_fail@plt+0x1a65c>
   2bb14:	tst	r8, #8192	; 0x2000
   2bb18:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2bb1c:	mov	r1, #8
   2bb20:	b	2bc24 <__assert_fail@plt+0x1a7f0>
   2bb24:	tst	r8, #8192	; 0x2000
   2bb28:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2bb2c:	mov	r1, #9
   2bb30:	b	2bc24 <__assert_fail@plt+0x1a7f0>
   2bb34:	movw	r1, #1026	; 0x402
   2bb38:	and	r1, r8, r1
   2bb3c:	cmp	r1, #2
   2bb40:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2bb44:	mov	r1, #18
   2bb48:	b	2bc24 <__assert_fail@plt+0x1a7f0>
   2bb4c:	tst	r8, #524288	; 0x80000
   2bb50:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2bb54:	mov	r1, #6
   2bb58:	b	2ba90 <__assert_fail@plt+0x1a65c>
   2bb5c:	tst	r8, #524288	; 0x80000
   2bb60:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2bb64:	mov	r1, #9
   2bb68:	b	2ba90 <__assert_fail@plt+0x1a65c>
   2bb6c:	movw	r1, #1026	; 0x402
   2bb70:	and	r1, r8, r1
   2bb74:	cmp	r1, #2
   2bb78:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2bb7c:	mov	r1, #19
   2bb80:	b	2bc24 <__assert_fail@plt+0x1a7f0>
   2bb84:	tst	r8, #524288	; 0x80000
   2bb88:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2bb8c:	mov	r1, #512	; 0x200
   2bb90:	b	2ba90 <__assert_fail@plt+0x1a65c>
   2bb94:	tst	r8, #524288	; 0x80000
   2bb98:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2bb9c:	mov	r1, #35	; 0x23
   2bba0:	b	2bc24 <__assert_fail@plt+0x1a7f0>
   2bba4:	tst	r8, #524288	; 0x80000
   2bba8:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2bbac:	mov	r1, #33	; 0x21
   2bbb0:	b	2bc24 <__assert_fail@plt+0x1a7f0>
   2bbb4:	tst	r8, #524288	; 0x80000
   2bbb8:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2bbbc:	mov	r1, #64	; 0x40
   2bbc0:	b	2ba90 <__assert_fail@plt+0x1a65c>
   2bbc4:	tst	r8, #524288	; 0x80000
   2bbc8:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2bbcc:	mov	r1, #256	; 0x100
   2bbd0:	b	2ba90 <__assert_fail@plt+0x1a65c>
   2bbd4:	tst	r8, #524288	; 0x80000
   2bbd8:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2bbdc:	mov	r1, #34	; 0x22
   2bbe0:	b	2bc24 <__assert_fail@plt+0x1a7f0>
   2bbe4:	tst	r8, #524288	; 0x80000
   2bbe8:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2bbec:	mov	r1, #32
   2bbf0:	b	2bc24 <__assert_fail@plt+0x1a7f0>
   2bbf4:	and	r1, r8, #4608	; 0x1200
   2bbf8:	cmp	r1, #512	; 0x200
   2bbfc:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2bc00:	mov	r1, #23
   2bc04:	b	2bc24 <__assert_fail@plt+0x1a7f0>
   2bc08:	tst	r8, #33792	; 0x8400
   2bc0c:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2bc10:	b	2bac0 <__assert_fail@plt+0x1a68c>
   2bc14:	and	r1, r8, #4608	; 0x1200
   2bc18:	cmp	r1, #512	; 0x200
   2bc1c:	bne	2bc2c <__assert_fail@plt+0x1a7f8>
   2bc20:	mov	r1, #24
   2bc24:	bfi	r0, r1, #0, #8
   2bc28:	str	r0, [r5]
   2bc2c:	mov	r0, r4
   2bc30:	sub	sp, fp, #24
   2bc34:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2bc38:	cmp	r3, #2
   2bc3c:	blt	2bc6c <__assert_fail@plt+0x1a838>
   2bc40:	ldr	r3, [r7, #8]
   2bc44:	ldr	r4, [r3, r2, lsl #2]
   2bc48:	cmn	r4, #1
   2bc4c:	beq	2b510 <__assert_fail@plt+0x1a0dc>
   2bc50:	ldr	r4, [r7, #28]
   2bc54:	add	r6, r6, #2
   2bc58:	cmp	r4, r6
   2bc5c:	beq	2bc6c <__assert_fail@plt+0x1a838>
   2bc60:	ldr	r3, [r3, r6, lsl #2]
   2bc64:	cmn	r3, #1
   2bc68:	beq	2b510 <__assert_fail@plt+0x1a0dc>
   2bc6c:	ldrb	r3, [r7, #76]	; 0x4c
   2bc70:	mov	r6, r2
   2bc74:	cmp	r3, #0
   2bc78:	beq	2bc84 <__assert_fail@plt+0x1a850>
   2bc7c:	ldr	r6, [r7, #12]
   2bc80:	ldr	r6, [r6, r2, lsl #2]
   2bc84:	ldr	r4, [r7, #24]
   2bc88:	ldr	ip, [r7]
   2bc8c:	cmp	r3, #0
   2bc90:	add	r6, r4, r6
   2bc94:	add	r6, ip, r6
   2bc98:	ldrsb	r6, [r6]
   2bc9c:	beq	2b518 <__assert_fail@plt+0x1a0e4>
   2bca0:	cmn	r6, #1
   2bca4:	ble	2b510 <__assert_fail@plt+0x1a0dc>
   2bca8:	b	2b518 <__assert_fail@plt+0x1a0e4>
   2bcac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bcb0:	add	fp, sp, #28
   2bcb4:	sub	sp, sp, #20
   2bcb8:	ldr	r4, [fp, #12]
   2bcbc:	ldr	r7, [fp, #8]
   2bcc0:	ldr	sl, [r1]
   2bcc4:	mov	r6, r2
   2bcc8:	str	r0, [sp, #12]
   2bccc:	str	r1, [sp, #8]
   2bcd0:	str	r3, [sp, #16]
   2bcd4:	str	r4, [sp, #4]
   2bcd8:	str	r7, [sp]
   2bcdc:	bl	2c000 <__assert_fail@plt+0x1abcc>
   2bce0:	mov	r3, r4
   2bce4:	mov	r4, r0
   2bce8:	cmp	r0, #0
   2bcec:	bne	2bd18 <__assert_fail@plt+0x1a8e4>
   2bcf0:	ldr	r0, [r3]
   2bcf4:	cmp	r0, #0
   2bcf8:	beq	2bd18 <__assert_fail@plt+0x1a8e4>
   2bcfc:	b	2bfe8 <__assert_fail@plt+0x1abb4>
   2bd00:	cmp	r4, #0
   2bd04:	cmpne	r5, #0
   2bd08:	bne	2bd7c <__assert_fail@plt+0x1a948>
   2bd0c:	cmp	r4, #0
   2bd10:	mov	r7, r8
   2bd14:	moveq	r4, r5
   2bd18:	ldrb	r0, [r6, #4]
   2bd1c:	orr	r1, r0, #8
   2bd20:	cmp	r1, #10
   2bd24:	beq	2bfec <__assert_fail@plt+0x1abb8>
   2bd28:	cmp	r7, #0
   2bd2c:	beq	2bd38 <__assert_fail@plt+0x1a904>
   2bd30:	cmp	r0, #9
   2bd34:	beq	2bfec <__assert_fail@plt+0x1abb8>
   2bd38:	str	r3, [sp, #4]
   2bd3c:	mov	r9, r3
   2bd40:	ldr	r0, [sp, #12]
   2bd44:	ldr	r1, [sp, #8]
   2bd48:	ldr	r3, [sp, #16]
   2bd4c:	mov	r2, r6
   2bd50:	mov	r8, r7
   2bd54:	str	r7, [sp]
   2bd58:	bl	2c000 <__assert_fail@plt+0x1abcc>
   2bd5c:	mov	r3, r9
   2bd60:	mov	r5, r0
   2bd64:	cmp	r0, #0
   2bd68:	bne	2bd00 <__assert_fail@plt+0x1a8cc>
   2bd6c:	ldr	r0, [r3]
   2bd70:	cmp	r0, #0
   2bd74:	beq	2bd00 <__assert_fail@plt+0x1a8cc>
   2bd78:	b	2be00 <__assert_fail@plt+0x1a9cc>
   2bd7c:	ldr	r1, [sl, #64]	; 0x40
   2bd80:	cmp	r1, #31
   2bd84:	beq	2bdd4 <__assert_fail@plt+0x1a9a0>
   2bd88:	ldr	r0, [sl, #56]	; 0x38
   2bd8c:	add	r0, r0, r1, lsl #5
   2bd90:	add	r2, r1, #1
   2bd94:	mov	r1, #0
   2bd98:	mov	r7, r8
   2bd9c:	str	r2, [sl, #64]	; 0x40
   2bda0:	str	r1, [r0, #4]!
   2bda4:	stmib	r0, {r4, r5}
   2bda8:	str	r1, [r0, #12]
   2bdac:	str	r1, [r0, #16]
   2bdb0:	str	r1, [r0, #20]
   2bdb4:	mov	r1, #16
   2bdb8:	str	r1, [r0, #24]
   2bdbc:	mvn	r1, #0
   2bdc0:	str	r1, [r0, #28]
   2bdc4:	str	r0, [r4]
   2bdc8:	str	r0, [r5]
   2bdcc:	mov	r4, r0
   2bdd0:	b	2bd18 <__assert_fail@plt+0x1a8e4>
   2bdd4:	mov	r0, #996	; 0x3e4
   2bdd8:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2bddc:	cmp	r0, #0
   2bde0:	beq	2bea4 <__assert_fail@plt+0x1aa70>
   2bde4:	ldr	r1, [sl, #56]	; 0x38
   2bde8:	mov	r3, r9
   2bdec:	str	r1, [r0]
   2bdf0:	mov	r1, #0
   2bdf4:	str	r1, [sl, #64]	; 0x40
   2bdf8:	str	r0, [sl, #56]	; 0x38
   2bdfc:	b	2bd8c <__assert_fail@plt+0x1a958>
   2be00:	cmp	r4, #0
   2be04:	beq	2bfe8 <__assert_fail@plt+0x1abb4>
   2be08:	movw	r5, #255	; 0xff
   2be0c:	movt	r5, #4
   2be10:	mov	r6, r4
   2be14:	ldr	r4, [r4, #4]
   2be18:	cmp	r4, #0
   2be1c:	bne	2be10 <__assert_fail@plt+0x1a9dc>
   2be20:	ldr	r4, [r6, #8]
   2be24:	cmp	r4, #0
   2be28:	bne	2be10 <__assert_fail@plt+0x1a9dc>
   2be2c:	ldr	r0, [r6, #24]
   2be30:	and	r0, r0, r5
   2be34:	cmp	r0, #3
   2be38:	beq	2be6c <__assert_fail@plt+0x1aa38>
   2be3c:	cmp	r0, #6
   2be40:	bne	2be78 <__assert_fail@plt+0x1aa44>
   2be44:	ldr	r4, [r6, #20]
   2be48:	ldr	r0, [r4]
   2be4c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2be50:	ldr	r0, [r4, #4]
   2be54:	bl	138e8 <__assert_fail@plt+0x24b4>
   2be58:	ldr	r0, [r4, #8]
   2be5c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2be60:	ldr	r0, [r4, #12]
   2be64:	bl	138e8 <__assert_fail@plt+0x24b4>
   2be68:	b	2be70 <__assert_fail@plt+0x1aa3c>
   2be6c:	ldr	r4, [r6, #20]
   2be70:	mov	r0, r4
   2be74:	bl	138e8 <__assert_fail@plt+0x24b4>
   2be78:	ldr	r0, [r6]
   2be7c:	cmp	r0, #0
   2be80:	beq	2bfe8 <__assert_fail@plt+0x1abb4>
   2be84:	ldr	r4, [r0, #8]
   2be88:	cmp	r4, r6
   2be8c:	mov	r6, r0
   2be90:	beq	2be2c <__assert_fail@plt+0x1a9f8>
   2be94:	cmp	r4, #0
   2be98:	mov	r6, r0
   2be9c:	beq	2be2c <__assert_fail@plt+0x1a9f8>
   2bea0:	b	2be10 <__assert_fail@plt+0x1a9dc>
   2bea4:	movw	r6, #255	; 0xff
   2bea8:	mov	r1, r9
   2beac:	movt	r6, #4
   2beb0:	mov	r7, r5
   2beb4:	ldr	r5, [r5, #4]
   2beb8:	cmp	r5, #0
   2bebc:	bne	2beb0 <__assert_fail@plt+0x1aa7c>
   2bec0:	ldr	r5, [r7, #8]
   2bec4:	cmp	r5, #0
   2bec8:	bne	2beb0 <__assert_fail@plt+0x1aa7c>
   2becc:	ldr	r0, [r7, #24]
   2bed0:	and	r0, r0, r6
   2bed4:	cmp	r0, #3
   2bed8:	beq	2bf0c <__assert_fail@plt+0x1aad8>
   2bedc:	cmp	r0, #6
   2bee0:	bne	2bf1c <__assert_fail@plt+0x1aae8>
   2bee4:	ldr	r5, [r7, #20]
   2bee8:	ldr	r0, [r5]
   2beec:	bl	138e8 <__assert_fail@plt+0x24b4>
   2bef0:	ldr	r0, [r5, #4]
   2bef4:	bl	138e8 <__assert_fail@plt+0x24b4>
   2bef8:	ldr	r0, [r5, #8]
   2befc:	bl	138e8 <__assert_fail@plt+0x24b4>
   2bf00:	ldr	r0, [r5, #12]
   2bf04:	bl	138e8 <__assert_fail@plt+0x24b4>
   2bf08:	b	2bf10 <__assert_fail@plt+0x1aadc>
   2bf0c:	ldr	r5, [r7, #20]
   2bf10:	mov	r0, r5
   2bf14:	bl	138e8 <__assert_fail@plt+0x24b4>
   2bf18:	mov	r1, r9
   2bf1c:	ldr	r0, [r7]
   2bf20:	cmp	r0, #0
   2bf24:	beq	2bf48 <__assert_fail@plt+0x1ab14>
   2bf28:	ldr	r5, [r0, #8]
   2bf2c:	cmp	r5, r7
   2bf30:	mov	r7, r0
   2bf34:	beq	2becc <__assert_fail@plt+0x1aa98>
   2bf38:	cmp	r5, #0
   2bf3c:	mov	r7, r0
   2bf40:	beq	2becc <__assert_fail@plt+0x1aa98>
   2bf44:	b	2beb0 <__assert_fail@plt+0x1aa7c>
   2bf48:	mov	r5, r4
   2bf4c:	ldr	r4, [r4, #4]
   2bf50:	cmp	r4, #0
   2bf54:	bne	2bf48 <__assert_fail@plt+0x1ab14>
   2bf58:	ldr	r4, [r5, #8]
   2bf5c:	cmp	r4, #0
   2bf60:	bne	2bf48 <__assert_fail@plt+0x1ab14>
   2bf64:	ldr	r0, [r5, #24]
   2bf68:	and	r0, r0, r6
   2bf6c:	cmp	r0, #3
   2bf70:	beq	2bfa4 <__assert_fail@plt+0x1ab70>
   2bf74:	cmp	r0, #6
   2bf78:	bne	2bfb4 <__assert_fail@plt+0x1ab80>
   2bf7c:	ldr	r4, [r5, #20]
   2bf80:	ldr	r0, [r4]
   2bf84:	bl	138e8 <__assert_fail@plt+0x24b4>
   2bf88:	ldr	r0, [r4, #4]
   2bf8c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2bf90:	ldr	r0, [r4, #8]
   2bf94:	bl	138e8 <__assert_fail@plt+0x24b4>
   2bf98:	ldr	r0, [r4, #12]
   2bf9c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2bfa0:	b	2bfa8 <__assert_fail@plt+0x1ab74>
   2bfa4:	ldr	r4, [r5, #20]
   2bfa8:	mov	r0, r4
   2bfac:	bl	138e8 <__assert_fail@plt+0x24b4>
   2bfb0:	mov	r1, r9
   2bfb4:	ldr	r0, [r5]
   2bfb8:	cmp	r0, #0
   2bfbc:	beq	2bfe0 <__assert_fail@plt+0x1abac>
   2bfc0:	ldr	r4, [r0, #8]
   2bfc4:	cmp	r4, r5
   2bfc8:	mov	r5, r0
   2bfcc:	beq	2bf64 <__assert_fail@plt+0x1ab30>
   2bfd0:	cmp	r4, #0
   2bfd4:	mov	r5, r0
   2bfd8:	beq	2bf64 <__assert_fail@plt+0x1ab30>
   2bfdc:	b	2bf48 <__assert_fail@plt+0x1ab14>
   2bfe0:	mov	r0, #12
   2bfe4:	str	r0, [r1]
   2bfe8:	mov	r4, #0
   2bfec:	mov	r0, r4
   2bff0:	sub	sp, fp, #28
   2bff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bff8:	nop	{0}
   2bffc:	nop	{0}
   2c000:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c004:	add	fp, sp, #28
   2c008:	sub	sp, sp, #156	; 0x9c
   2c00c:	mov	r5, r0
   2c010:	mov	lr, r2
   2c014:	ldr	r0, [r2, #4]
   2c018:	ldr	r2, [fp, #12]
   2c01c:	mov	r7, r1
   2c020:	mvn	r1, #0
   2c024:	mov	r9, #0
   2c028:	mov	ip, r3
   2c02c:	ldr	sl, [r7]
   2c030:	str	r2, [sp, #20]
   2c034:	uxtab	r1, r1, r0
   2c038:	ldr	r6, [fp, #8]
   2c03c:	add	r2, pc, #12
   2c040:	str	r5, [sp, #28]
   2c044:	str	r3, [sp, #48]	; 0x30
   2c048:	str	lr, [sp, #44]	; 0x2c
   2c04c:	ldr	pc, [r2, r1, lsl #2]
   2c050:	andeq	ip, r2, r8, lsr #6
   2c054:	andeq	sp, r2, r8, lsl #30
   2c058:	andeq	lr, r2, r0, lsr #11
   2c05c:	andeq	ip, r2, r8, ror #9
   2c060:	andeq	ip, r2, r8, ror #10
   2c064:	andeq	lr, r2, r0, lsr #11
   2c068:	andeq	lr, r2, r0, lsr #11
   2c06c:	ldrdeq	ip, [r2], -r0
   2c070:	andeq	ip, r2, r0, lsl #2
   2c074:	andeq	sp, r2, r8, lsl #30
   2c078:	strdeq	ip, [r2], -r0
   2c07c:	strdeq	ip, [r2], -r4
   2c080:	andeq	lr, r2, r0, lsr #11
   2c084:	andeq	lr, r2, r0, lsr #11
   2c088:	andeq	lr, r2, r0, lsr #11
   2c08c:	andeq	lr, r2, r0, lsr #11
   2c090:	andeq	lr, r2, r0, lsr #11
   2c094:	strdeq	ip, [r2], -r0
   2c098:	strdeq	ip, [r2], -r0
   2c09c:			; <UNDEFINED> instruction: 0x0002c2b4
   2c0a0:	andeq	lr, r2, r0, lsr #11
   2c0a4:	andeq	lr, r2, r0, lsr #11
   2c0a8:	andeq	ip, r2, ip, asr #12
   2c0ac:	andeq	ip, r2, r0, lsl r1
   2c0b0:	andeq	lr, r2, r0, lsr #11
   2c0b4:	andeq	lr, r2, r0, lsr #11
   2c0b8:	andeq	lr, r2, r0, lsr #11
   2c0bc:	andeq	lr, r2, r0, lsr #11
   2c0c0:	andeq	lr, r2, r0, lsr #11
   2c0c4:	andeq	lr, r2, r0, lsr #11
   2c0c8:	andeq	lr, r2, r0, lsr #11
   2c0cc:	andeq	ip, r2, ip, ror #2
   2c0d0:	andeq	ip, r2, ip, ror #2
   2c0d4:	andeq	ip, r2, ip, lsl #3
   2c0d8:	andeq	ip, r2, ip, lsl #3
   2c0dc:	andeq	ip, r2, ip, asr r6
   2c0e0:	andeq	r0, r0, r0
   2c0e4:	mvnseq	r0, #0
   2c0e8:			; <UNDEFINED> instruction: 0x87fffffe
   2c0ec:			; <UNDEFINED> instruction: 0x07fffffe
   2c0f0:	tst	ip, #32
   2c0f4:	bne	2c654 <__assert_fail@plt+0x1b220>
   2c0f8:	tst	ip, #16
   2c0fc:	bne	2c66c <__assert_fail@plt+0x1b238>
   2c100:	tst	ip, #131072	; 0x20000
   2c104:	uxtbeq	r1, r0
   2c108:	cmpeq	r1, #9
   2c10c:	beq	2c6ac <__assert_fail@plt+0x1b278>
   2c110:	mov	r1, #1
   2c114:	bfi	r0, r1, #0, #8
   2c118:	str	r0, [lr, #4]
   2c11c:	ldr	r1, [sl, #64]	; 0x40
   2c120:	cmp	r1, #31
   2c124:	beq	2e0b4 <__assert_fail@plt+0x1cc80>
   2c128:	ldr	r0, [sl, #56]	; 0x38
   2c12c:	add	r7, r0, r1, lsl #5
   2c130:	add	r2, r1, #1
   2c134:	mov	r0, #0
   2c138:	mvn	r3, #0
   2c13c:	str	r2, [sl, #64]	; 0x40
   2c140:	str	r0, [r7, #4]!
   2c144:	str	r0, [r7, #8]
   2c148:	str	r0, [r7, #4]
   2c14c:	ldm	lr, {r1, r2}
   2c150:	str	r3, [r7, #28]
   2c154:	str	r0, [r7, #16]
   2c158:	str	r0, [r7, #12]
   2c15c:	bic	r0, r2, #786432	; 0xc0000
   2c160:	str	r1, [r7, #20]
   2c164:	str	r0, [r7, #24]
   2c168:	b	2d090 <__assert_fail@plt+0x1bc5c>
   2c16c:	mvn	r2, #32
   2c170:	ldr	r1, [r5, #64]	; 0x40
   2c174:	movw	r3, #36741	; 0x8f85
   2c178:	uxtab	r0, r2, r0
   2c17c:	movw	r2, #42974	; 0xa7de
   2c180:	movt	r3, #3
   2c184:	movt	r2, #3
   2c188:	b	2c1a8 <__assert_fail@plt+0x1ad74>
   2c18c:	mvn	r2, #34	; 0x22
   2c190:	ldr	r1, [r5, #64]	; 0x40
   2c194:	movw	r3, #36891	; 0x901b
   2c198:	uxtab	r0, r2, r0
   2c19c:	movw	r2, #42980	; 0xa7e4
   2c1a0:	movt	r3, #3
   2c1a4:	movt	r2, #3
   2c1a8:	clz	r0, r0
   2c1ac:	lsr	r0, r0, #5
   2c1b0:	str	r0, [sp]
   2c1b4:	ldr	r4, [sp, #20]
   2c1b8:	str	r4, [sp, #4]
   2c1bc:	mov	r0, sl
   2c1c0:	bl	2e5a0 <__assert_fail@plt+0x1d16c>
   2c1c4:	mov	r7, r0
   2c1c8:	cmp	r0, #0
   2c1cc:	bne	2c1e8 <__assert_fail@plt+0x1adb4>
   2c1d0:	ldr	r0, [r4]
   2c1d4:	cmp	r0, #0
   2c1d8:	ldr	ip, [sp, #48]	; 0x30
   2c1dc:	ldr	lr, [sp, #44]	; 0x2c
   2c1e0:	beq	2d090 <__assert_fail@plt+0x1bc5c>
   2c1e4:	b	2df08 <__assert_fail@plt+0x1cad4>
   2c1e8:	ldr	ip, [sp, #48]	; 0x30
   2c1ec:	ldr	lr, [sp, #44]	; 0x2c
   2c1f0:	b	2d090 <__assert_fail@plt+0x1bc5c>
   2c1f4:	ldr	r0, [lr]
   2c1f8:	movw	r1, #783	; 0x30f
   2c1fc:	tst	r0, r1
   2c200:	beq	2c248 <__assert_fail@plt+0x1ae14>
   2c204:	ldrb	r0, [sl, #88]	; 0x58
   2c208:	tst	r0, #16
   2c20c:	bne	2c244 <__assert_fail@plt+0x1ae10>
   2c210:	orr	r1, r0, #16
   2c214:	tst	r0, #8
   2c218:	strb	r1, [sl, #88]	; 0x58
   2c21c:	bne	2e3b8 <__assert_fail@plt+0x1cf84>
   2c220:	sub	r1, pc, #328	; 0x148
   2c224:	tst	r0, #4
   2c228:	vld1.64	{d16-d17}, [r1 :128]
   2c22c:	add	r1, sl, #96	; 0x60
   2c230:	vst1.32	{d16-d17}, [r1]
   2c234:	beq	2e3c4 <__assert_fail@plt+0x1cf90>
   2c238:	vmov.i32	q8, #0	; 0x00000000
   2c23c:	add	r0, sl, #112	; 0x70
   2c240:	vst1.32	{d16-d17}, [r0]
   2c244:	ldr	r0, [lr]
   2c248:	cmp	r0, #512	; 0x200
   2c24c:	beq	2ce90 <__assert_fail@plt+0x1ba5c>
   2c250:	cmp	r0, #256	; 0x100
   2c254:	bne	2cf9c <__assert_fail@plt+0x1bb68>
   2c258:	mov	r0, #6
   2c25c:	str	r0, [lr]
   2c260:	ldr	r1, [sl, #64]	; 0x40
   2c264:	cmp	r1, #31
   2c268:	beq	2e318 <__assert_fail@plt+0x1cee4>
   2c26c:	ldr	r0, [sl, #56]	; 0x38
   2c270:	add	r4, r0, r1, lsl #5
   2c274:	add	r2, r1, #1
   2c278:	mov	r0, #0
   2c27c:	mvn	r3, #0
   2c280:	str	r2, [sl, #64]	; 0x40
   2c284:	str	r0, [r4, #4]!
   2c288:	str	r0, [r4, #8]
   2c28c:	str	r0, [r4, #4]
   2c290:	ldm	lr, {r1, r2}
   2c294:	str	r3, [r4, #28]
   2c298:	str	r0, [r4, #16]
   2c29c:	str	r0, [r4, #12]
   2c2a0:	bic	r0, r2, #786432	; 0xc0000
   2c2a4:	str	r1, [r4, #20]
   2c2a8:	str	r0, [r4, #24]
   2c2ac:	mov	r0, #9
   2c2b0:	b	2cee8 <__assert_fail@plt+0x1bab4>
   2c2b4:	mov	r9, #0
   2c2b8:	mov	r0, #32
   2c2bc:	mov	r1, #1
   2c2c0:	str	r9, [fp, #-32]	; 0xffffffe0
   2c2c4:	bl	37f9c <__assert_fail@plt+0x26b68>
   2c2c8:	mov	r8, r0
   2c2cc:	mov	r0, #40	; 0x28
   2c2d0:	mov	r1, #1
   2c2d4:	bl	37f9c <__assert_fail@plt+0x26b68>
   2c2d8:	mov	r7, r0
   2c2dc:	cmp	r8, #0
   2c2e0:	cmpne	r7, #0
   2c2e4:	beq	2e114 <__assert_fail@plt+0x1cce0>
   2c2e8:	ldr	r6, [sp, #44]	; 0x2c
   2c2ec:	ldr	r4, [sp, #48]	; 0x30
   2c2f0:	mov	r1, r5
   2c2f4:	mov	r0, r6
   2c2f8:	mov	r2, r4
   2c2fc:	bl	2e95c <__assert_fail@plt+0x1d528>
   2c300:	mov	r3, r0
   2c304:	ldr	r0, [r6, #4]
   2c308:	str	r7, [sp, #60]	; 0x3c
   2c30c:	uxtb	r1, r0
   2c310:	cmp	r1, #25
   2c314:	beq	2c6b4 <__assert_fail@plt+0x1b280>
   2c318:	cmp	r1, #2
   2c31c:	beq	2e100 <__assert_fail@plt+0x1cccc>
   2c320:	mov	r1, #0
   2c324:	b	2c70c <__assert_fail@plt+0x1b2d8>
   2c328:	ldr	r1, [sl, #64]	; 0x40
   2c32c:	cmp	r1, #31
   2c330:	beq	2e128 <__assert_fail@plt+0x1ccf4>
   2c334:	ldr	r0, [sl, #56]	; 0x38
   2c338:	add	r4, r0, r1, lsl #5
   2c33c:	add	r2, r1, #1
   2c340:	mov	r0, #0
   2c344:	mvn	r3, #0
   2c348:	str	r2, [sl, #64]	; 0x40
   2c34c:	str	r0, [r4, #4]!
   2c350:	str	r0, [r4, #8]
   2c354:	str	r0, [r4, #4]
   2c358:	ldm	lr, {r1, r2}
   2c35c:	str	r3, [r4, #28]
   2c360:	str	r0, [r4, #16]
   2c364:	str	r0, [r4, #12]
   2c368:	bic	r0, r2, #786432	; 0xc0000
   2c36c:	str	r1, [r4, #20]
   2c370:	str	r0, [r4, #24]
   2c374:	ldr	r0, [sl, #92]	; 0x5c
   2c378:	cmp	r0, #2
   2c37c:	blt	2c664 <__assert_fail@plt+0x1b230>
   2c380:	ldr	r0, [r5, #40]	; 0x28
   2c384:	ldr	r1, [r5, #56]	; 0x38
   2c388:	cmp	r1, r0
   2c38c:	ble	2c664 <__assert_fail@plt+0x1b230>
   2c390:	mov	r8, #0
   2c394:	mvn	r9, #0
   2c398:	ldr	r1, [r5, #28]
   2c39c:	cmp	r0, r1
   2c3a0:	beq	2c664 <__assert_fail@plt+0x1b230>
   2c3a4:	ldr	r1, [r5, #8]
   2c3a8:	ldr	r0, [r1, r0, lsl #2]
   2c3ac:	cmn	r0, #1
   2c3b0:	bne	2c664 <__assert_fail@plt+0x1b230>
   2c3b4:	mov	r0, lr
   2c3b8:	mov	r1, r5
   2c3bc:	mov	r2, ip
   2c3c0:	bl	2b470 <__assert_fail@plt+0x1a03c>
   2c3c4:	ldr	r1, [r5, #40]	; 0x28
   2c3c8:	add	r0, r1, r0
   2c3cc:	str	r0, [r5, #40]	; 0x28
   2c3d0:	ldr	r1, [sl, #64]	; 0x40
   2c3d4:	cmp	r1, #31
   2c3d8:	beq	2c480 <__assert_fail@plt+0x1b04c>
   2c3dc:	ldr	r0, [sl, #56]	; 0x38
   2c3e0:	add	r6, r0, r1, lsl #5
   2c3e4:	ldr	lr, [sp, #44]	; 0x2c
   2c3e8:	add	r2, r1, #1
   2c3ec:	ldr	ip, [sp, #48]	; 0x30
   2c3f0:	str	r2, [sl, #64]	; 0x40
   2c3f4:	str	r8, [r6, #4]!
   2c3f8:	str	r8, [r6, #8]
   2c3fc:	str	r8, [r6, #4]
   2c400:	ldm	lr, {r0, r1}
   2c404:	str	r9, [r6, #28]
   2c408:	str	r8, [r6, #16]
   2c40c:	str	r8, [r6, #12]
   2c410:	str	r0, [r6, #20]
   2c414:	bic	r0, r1, #786432	; 0xc0000
   2c418:	str	r0, [r6, #24]
   2c41c:	ldr	r1, [sl, #64]	; 0x40
   2c420:	cmp	r1, #31
   2c424:	beq	2c4a8 <__assert_fail@plt+0x1b074>
   2c428:	ldr	r0, [sl, #56]	; 0x38
   2c42c:	add	r7, r0, r1, lsl #5
   2c430:	add	r2, r1, #1
   2c434:	mov	r0, #16
   2c438:	cmp	r6, #0
   2c43c:	str	r2, [sl, #64]	; 0x40
   2c440:	str	r8, [r7, #4]!
   2c444:	stmib	r7, {r4, r6, r8}
   2c448:	str	r8, [r7, #16]
   2c44c:	str	r8, [r7, #20]
   2c450:	str	r0, [r7, #24]
   2c454:	str	r9, [r7, #28]
   2c458:	str	r7, [r4]
   2c45c:	beq	2e3b0 <__assert_fail@plt+0x1cf7c>
   2c460:	ldr	r5, [sp, #28]
   2c464:	str	r7, [r6]
   2c468:	mov	r4, r7
   2c46c:	ldr	r0, [r5, #40]	; 0x28
   2c470:	ldr	r1, [r5, #56]	; 0x38
   2c474:	cmp	r1, r0
   2c478:	bgt	2c398 <__assert_fail@plt+0x1af64>
   2c47c:	b	2d090 <__assert_fail@plt+0x1bc5c>
   2c480:	mov	r0, #996	; 0x3e4
   2c484:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2c488:	cmp	r0, #0
   2c48c:	beq	2c4d8 <__assert_fail@plt+0x1b0a4>
   2c490:	ldr	r1, [sl, #56]	; 0x38
   2c494:	str	r1, [r0]
   2c498:	mov	r1, #0
   2c49c:	str	r1, [sl, #64]	; 0x40
   2c4a0:	str	r0, [sl, #56]	; 0x38
   2c4a4:	b	2c3e0 <__assert_fail@plt+0x1afac>
   2c4a8:	mov	r0, #996	; 0x3e4
   2c4ac:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2c4b0:	ldr	lr, [sp, #44]	; 0x2c
   2c4b4:	ldr	ip, [sp, #48]	; 0x30
   2c4b8:	cmp	r0, #0
   2c4bc:	beq	2e3b0 <__assert_fail@plt+0x1cf7c>
   2c4c0:	ldr	r1, [sl, #56]	; 0x38
   2c4c4:	str	r1, [r0]
   2c4c8:	mov	r1, #0
   2c4cc:	str	r1, [sl, #64]	; 0x40
   2c4d0:	str	r0, [sl, #56]	; 0x38
   2c4d4:	b	2c42c <__assert_fail@plt+0x1aff8>
   2c4d8:	ldr	ip, [sp, #48]	; 0x30
   2c4dc:	ldr	lr, [sp, #44]	; 0x2c
   2c4e0:	mov	r6, #0
   2c4e4:	b	2c41c <__assert_fail@plt+0x1afe8>
   2c4e8:	ldr	r0, [lr]
   2c4ec:	ldr	r2, [sl, #84]	; 0x54
   2c4f0:	mov	r1, #1
   2c4f4:	tst	r2, r1, lsl r0
   2c4f8:	beq	2e15c <__assert_fail@plt+0x1cd28>
   2c4fc:	lsl	r0, r1, r0
   2c500:	ldr	r1, [sl, #64]	; 0x40
   2c504:	ldr	r2, [sl, #80]	; 0x50
   2c508:	orr	r0, r2, r0
   2c50c:	cmp	r1, #31
   2c510:	str	r0, [sl, #80]	; 0x50
   2c514:	beq	2e198 <__assert_fail@plt+0x1cd64>
   2c518:	ldr	r0, [sl, #56]	; 0x38
   2c51c:	add	r7, r0, r1, lsl #5
   2c520:	add	r2, r1, #1
   2c524:	mov	r0, #0
   2c528:	mvn	r3, #0
   2c52c:	str	r2, [sl, #64]	; 0x40
   2c530:	str	r0, [r7, #4]!
   2c534:	str	r0, [r7, #8]
   2c538:	str	r0, [r7, #4]
   2c53c:	ldm	lr, {r1, r2}
   2c540:	str	r3, [r7, #28]
   2c544:	str	r0, [r7, #16]
   2c548:	str	r0, [r7, #12]
   2c54c:	bic	r0, r2, #786432	; 0xc0000
   2c550:	str	r1, [r7, #20]
   2c554:	str	r0, [r7, #24]
   2c558:	ldr	r0, [sl, #76]	; 0x4c
   2c55c:	add	r0, r0, #1
   2c560:	str	r0, [sl, #76]	; 0x4c
   2c564:	b	2c5c0 <__assert_fail@plt+0x1b18c>
   2c568:	ldr	r1, [sl, #64]	; 0x40
   2c56c:	cmp	r1, #31
   2c570:	beq	2e164 <__assert_fail@plt+0x1cd30>
   2c574:	ldr	r0, [sl, #56]	; 0x38
   2c578:	add	r7, r0, r1, lsl #5
   2c57c:	add	r2, r1, #1
   2c580:	mov	r0, #0
   2c584:	mvn	r3, #0
   2c588:	str	r2, [sl, #64]	; 0x40
   2c58c:	str	r0, [r7, #4]!
   2c590:	str	r0, [r7, #8]
   2c594:	str	r0, [r7, #4]
   2c598:	ldm	lr, {r1, r2}
   2c59c:	str	r3, [r7, #28]
   2c5a0:	str	r0, [r7, #16]
   2c5a4:	str	r0, [r7, #12]
   2c5a8:	bic	r0, r2, #786432	; 0xc0000
   2c5ac:	str	r1, [r7, #20]
   2c5b0:	str	r0, [r7, #24]
   2c5b4:	ldr	r0, [sl, #92]	; 0x5c
   2c5b8:	cmp	r0, #2
   2c5bc:	blt	2d090 <__assert_fail@plt+0x1bc5c>
   2c5c0:	ldrb	r0, [sl, #88]	; 0x58
   2c5c4:	orr	r0, r0, #2
   2c5c8:	strb	r0, [sl, #88]	; 0x58
   2c5cc:	b	2d090 <__assert_fail@plt+0x1bc5c>
   2c5d0:	ldr	r4, [r7, #24]
   2c5d4:	orr	r2, ip, #8388608	; 0x800000
   2c5d8:	mov	r1, r5
   2c5dc:	add	r0, r4, #1
   2c5e0:	str	r0, [r7, #24]
   2c5e4:	mov	r0, lr
   2c5e8:	bl	2b470 <__assert_fail@plt+0x1a03c>
   2c5ec:	ldr	r1, [r5, #40]	; 0x28
   2c5f0:	ldr	lr, [sp, #44]	; 0x2c
   2c5f4:	mov	r9, #0
   2c5f8:	add	r0, r1, r0
   2c5fc:	str	r0, [r5, #40]	; 0x28
   2c600:	ldrb	r0, [lr, #4]
   2c604:	cmp	r0, #9
   2c608:	beq	2d020 <__assert_fail@plt+0x1bbec>
   2c60c:	add	r0, r6, #1
   2c610:	mov	r1, r7
   2c614:	mov	r2, lr
   2c618:	mov	r7, lr
   2c61c:	str	r0, [sp]
   2c620:	mov	r0, r5
   2c624:	ldr	r6, [sp, #20]
   2c628:	str	r6, [sp, #4]
   2c62c:	ldr	r3, [sp, #48]	; 0x30
   2c630:	bl	2b204 <__assert_fail@plt+0x19dd0>
   2c634:	mov	r9, r0
   2c638:	ldr	r0, [r6]
   2c63c:	cmp	r0, #0
   2c640:	beq	2d010 <__assert_fail@plt+0x1bbdc>
   2c644:	mov	r9, #0
   2c648:	b	2df08 <__assert_fail@plt+0x1cad4>
   2c64c:	tst	ip, #16777216	; 0x1000000
   2c650:	beq	2c0f0 <__assert_fail@plt+0x1acbc>
   2c654:	mov	r0, #13
   2c658:	b	2cf94 <__assert_fail@plt+0x1bb60>
   2c65c:	mov	r0, #5
   2c660:	b	2cf94 <__assert_fail@plt+0x1bb60>
   2c664:	mov	r7, r4
   2c668:	b	2d090 <__assert_fail@plt+0x1bc5c>
   2c66c:	mov	r0, lr
   2c670:	mov	r1, r5
   2c674:	mov	r2, ip
   2c678:	mov	r4, ip
   2c67c:	mov	r6, lr
   2c680:	bl	2b470 <__assert_fail@plt+0x1a03c>
   2c684:	ldr	r1, [r5, #40]	; 0x28
   2c688:	mov	r2, r6
   2c68c:	mov	r3, r4
   2c690:	add	r0, r1, r0
   2c694:	mov	r1, r7
   2c698:	str	r0, [r5, #40]	; 0x28
   2c69c:	mov	r0, r5
   2c6a0:	sub	sp, fp, #28
   2c6a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c6a8:	b	2c000 <__assert_fail@plt+0x1abcc>
   2c6ac:	mov	r0, #16
   2c6b0:	b	2cf94 <__assert_fail@plt+0x1bb60>
   2c6b4:	ldrb	r0, [r7, #16]
   2c6b8:	tst	r4, #256	; 0x100
   2c6bc:	orr	r0, r0, #1
   2c6c0:	strb	r0, [r7, #16]
   2c6c4:	beq	2c6d4 <__assert_fail@plt+0x1b2a0>
   2c6c8:	ldr	r0, [r8]
   2c6cc:	orr	r0, r0, #1024	; 0x400
   2c6d0:	str	r0, [r8]
   2c6d4:	ldr	r0, [r5, #40]	; 0x28
   2c6d8:	mov	r1, r5
   2c6dc:	mov	r2, r4
   2c6e0:	add	r0, r0, r3
   2c6e4:	str	r0, [r5, #40]	; 0x28
   2c6e8:	mov	r0, r6
   2c6ec:	bl	2e95c <__assert_fail@plt+0x1d528>
   2c6f0:	ldr	r6, [sp, #44]	; 0x2c
   2c6f4:	mov	r3, r0
   2c6f8:	ldr	r0, [r6, #4]
   2c6fc:	uxtb	r1, r0
   2c700:	cmp	r1, #2
   2c704:	beq	2e100 <__assert_fail@plt+0x1cccc>
   2c708:	mov	r1, #1
   2c70c:	str	r1, [sp, #56]	; 0x38
   2c710:	uxtb	r1, r0
   2c714:	mov	r2, r6
   2c718:	ldr	r7, [sp, #48]	; 0x30
   2c71c:	cmp	r1, #21
   2c720:	moveq	r1, #1
   2c724:	bfieq	r0, r1, #0, #8
   2c728:	mov	r1, r5
   2c72c:	streq	r0, [r6, #4]
   2c730:	sub	r0, fp, #80	; 0x50
   2c734:	str	r0, [fp, #-36]	; 0xffffffdc
   2c738:	mov	r0, #3
   2c73c:	str	r0, [fp, #-40]	; 0xffffffd8
   2c740:	mov	r0, #1
   2c744:	str	r7, [sp]
   2c748:	str	r0, [sp, #4]
   2c74c:	sub	r0, fp, #40	; 0x28
   2c750:	bl	2ead4 <__assert_fail@plt+0x1d6a0>
   2c754:	cmp	r0, #0
   2c758:	bne	2e0e8 <__assert_fail@plt+0x1ccb4>
   2c75c:	and	r0, r7, #65536	; 0x10000
   2c760:	mov	r2, r7
   2c764:	str	r0, [sp, #40]	; 0x28
   2c768:	mov	r0, #0
   2c76c:	str	r0, [sp, #36]	; 0x24
   2c770:	mov	r0, #0
   2c774:	str	r0, [sp, #32]
   2c778:	ldr	r4, [sp, #44]	; 0x2c
   2c77c:	ldr	r7, [sp, #60]	; 0x3c
   2c780:	mov	r0, r4
   2c784:	mov	r1, r5
   2c788:	bl	2e95c <__assert_fail@plt+0x1d528>
   2c78c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   2c790:	mov	r9, r0
   2c794:	cmp	r6, #2
   2c798:	beq	2c978 <__assert_fail@plt+0x1b544>
   2c79c:	cmp	r6, #4
   2c7a0:	bne	2c7e4 <__assert_fail@plt+0x1b3b0>
   2c7a4:	ldr	r5, [sp, #28]
   2c7a8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2c7ac:	mov	r2, r7
   2c7b0:	sub	r3, fp, #32
   2c7b4:	ldr	r0, [r5, #64]	; 0x40
   2c7b8:	str	r1, [sp]
   2c7bc:	ldr	r1, [sp, #48]	; 0x30
   2c7c0:	str	r1, [sp, #4]
   2c7c4:	mov	r1, r8
   2c7c8:	bl	2eda0 <__assert_fail@plt+0x1d96c>
   2c7cc:	ldr	r1, [sp, #20]
   2c7d0:	ldr	lr, [sp, #44]	; 0x2c
   2c7d4:	cmp	r0, #0
   2c7d8:	str	r0, [r1]
   2c7dc:	beq	2c9c0 <__assert_fail@plt+0x1b58c>
   2c7e0:	b	2e070 <__assert_fail@plt+0x1cc3c>
   2c7e4:	ldr	r0, [sp, #44]	; 0x2c
   2c7e8:	ldr	r2, [sp, #48]	; 0x30
   2c7ec:	mov	r4, r9
   2c7f0:	mov	r9, #7
   2c7f4:	str	sl, [sp, #52]	; 0x34
   2c7f8:	ldrb	r0, [r0, #4]
   2c7fc:	cmp	r0, #22
   2c800:	beq	2c810 <__assert_fail@plt+0x1b3dc>
   2c804:	cmp	r0, #2
   2c808:	bne	2c92c <__assert_fail@plt+0x1b4f8>
   2c80c:	b	2e05c <__assert_fail@plt+0x1cc28>
   2c810:	ldr	r7, [sp, #28]
   2c814:	mov	r5, r4
   2c818:	ldr	r0, [r7, #40]	; 0x28
   2c81c:	mov	r1, r7
   2c820:	add	r0, r0, r4
   2c824:	str	r0, [r7, #40]	; 0x28
   2c828:	add	r0, sp, #64	; 0x40
   2c82c:	bl	2e95c <__assert_fail@plt+0x1d528>
   2c830:	mov	r3, r0
   2c834:	ldrb	r0, [sp, #68]	; 0x44
   2c838:	cmp	r0, #21
   2c83c:	beq	2c914 <__assert_fail@plt+0x1b4e0>
   2c840:	ldr	r4, [sp, #48]	; 0x30
   2c844:	cmp	r0, #2
   2c848:	beq	2e05c <__assert_fail@plt+0x1cc28>
   2c84c:	mov	r0, #3
   2c850:	str	r8, [sp, #24]
   2c854:	add	r2, sp, #64	; 0x40
   2c858:	str	r0, [fp, #-48]	; 0xffffffd0
   2c85c:	add	r0, sp, #72	; 0x48
   2c860:	str	r0, [fp, #-44]	; 0xffffffd4
   2c864:	mov	r0, #1
   2c868:	str	r4, [sp]
   2c86c:	str	r0, [sp, #4]
   2c870:	sub	r0, fp, #48	; 0x30
   2c874:	ldr	r7, [sp, #28]
   2c878:	mov	r1, r7
   2c87c:	bl	2ead4 <__assert_fail@plt+0x1d6a0>
   2c880:	cmp	r0, #0
   2c884:	bne	2e50c <__assert_fail@plt+0x1d0d8>
   2c888:	ldr	r0, [sp, #44]	; 0x2c
   2c88c:	mov	r1, r7
   2c890:	mov	r2, r4
   2c894:	bl	2e95c <__assert_fail@plt+0x1d528>
   2c898:	ldr	r8, [fp, #-48]	; 0xffffffd0
   2c89c:	mov	r9, #11
   2c8a0:	str	r0, [sp, #16]
   2c8a4:	cmp	r8, #2
   2c8a8:	beq	2e058 <__assert_fail@plt+0x1cc24>
   2c8ac:	cmp	r8, #4
   2c8b0:	beq	2e058 <__assert_fail@plt+0x1cc24>
   2c8b4:	cmp	r6, #3
   2c8b8:	bne	2c8cc <__assert_fail@plt+0x1b498>
   2c8bc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2c8c0:	bl	1132c <strlen@plt>
   2c8c4:	cmp	r0, #1
   2c8c8:	bhi	2e518 <__assert_fail@plt+0x1d0e4>
   2c8cc:	cmp	r8, #3
   2c8d0:	bne	2c8e4 <__assert_fail@plt+0x1b4b0>
   2c8d4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2c8d8:	bl	1132c <strlen@plt>
   2c8dc:	cmp	r0, #1
   2c8e0:	bhi	2e518 <__assert_fail@plt+0x1d0e4>
   2c8e4:	ldr	lr, [sp, #44]	; 0x2c
   2c8e8:	cmp	r6, #3
   2c8ec:	beq	2ca64 <__assert_fail@plt+0x1b630>
   2c8f0:	cmp	r6, #0
   2c8f4:	mov	r7, #0
   2c8f8:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   2c8fc:	cmp	r8, #3
   2c900:	beq	2ca74 <__assert_fail@plt+0x1b640>
   2c904:	cmp	r8, #0
   2c908:	mov	sl, #0
   2c90c:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   2c910:	b	2ca7c <__assert_fail@plt+0x1b648>
   2c914:	ldr	r0, [r7, #40]	; 0x28
   2c918:	mov	r1, #1
   2c91c:	sub	r0, r0, r5
   2c920:	str	r0, [r7, #40]	; 0x28
   2c924:	ldr	r0, [sp, #44]	; 0x2c
   2c928:	strb	r1, [r0, #4]
   2c92c:	add	r0, pc, #12
   2c930:	ldr	sl, [sp, #52]	; 0x34
   2c934:	ldr	r7, [sp, #60]	; 0x3c
   2c938:	mov	r9, r4
   2c93c:	ldr	pc, [r0, r6, lsl #2]
   2c940:	andeq	ip, r2, r0, asr r9
   2c944:	andeq	ip, r2, ip, lsl sl
   2c948:	andeq	ip, r2, r8, ror r9
   2c94c:	andeq	ip, r2, ip, asr #20
   2c950:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   2c954:	mov	r3, #1
   2c958:	ubfx	r1, r0, #5, #3
   2c95c:	and	r0, r0, #31
   2c960:	ldr	r5, [sp, #28]
   2c964:	ldr	lr, [sp, #44]	; 0x2c
   2c968:	ldr	r2, [r8, r1, lsl #2]
   2c96c:	orr	r0, r2, r3, lsl r0
   2c970:	str	r0, [r8, r1, lsl #2]
   2c974:	b	2c9c0 <__assert_fail@plt+0x1b58c>
   2c978:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2c97c:	mov	r0, r7
   2c980:	bl	1132c <strlen@plt>
   2c984:	cmp	r0, #1
   2c988:	bne	2e25c <__assert_fail@plt+0x1ce28>
   2c98c:	ldrb	r0, [r7]
   2c990:	mov	r3, #1
   2c994:	ubfx	r1, r0, #5, #3
   2c998:	and	r0, r0, #31
   2c99c:	ldr	r2, [r8, r1, lsl #2]
   2c9a0:	orr	r0, r2, r3, lsl r0
   2c9a4:	str	r0, [r8, r1, lsl #2]
   2c9a8:	mov	r1, #0
   2c9ac:	ldr	r0, [sp, #20]
   2c9b0:	ldr	r5, [sp, #28]
   2c9b4:	ldr	lr, [sp, #44]	; 0x2c
   2c9b8:	ldr	r7, [sp, #60]	; 0x3c
   2c9bc:	str	r1, [r0]
   2c9c0:	ldrb	r0, [lr, #4]
   2c9c4:	cmp	r0, #21
   2c9c8:	beq	2cc48 <__assert_fail@plt+0x1b814>
   2c9cc:	cmp	r0, #2
   2c9d0:	ldr	r0, [sp, #48]	; 0x30
   2c9d4:	beq	2e0f4 <__assert_fail@plt+0x1ccc0>
   2c9d8:	sub	r1, fp, #80	; 0x50
   2c9dc:	mov	r2, lr
   2c9e0:	mov	r3, r9
   2c9e4:	mov	r4, lr
   2c9e8:	str	r1, [fp, #-36]	; 0xffffffdc
   2c9ec:	mov	r1, #3
   2c9f0:	str	r1, [fp, #-40]	; 0xffffffd8
   2c9f4:	str	r0, [sp]
   2c9f8:	mov	r0, #0
   2c9fc:	mov	r1, r5
   2ca00:	str	r0, [sp, #4]
   2ca04:	sub	r0, fp, #40	; 0x28
   2ca08:	bl	2ead4 <__assert_fail@plt+0x1d6a0>
   2ca0c:	ldr	r2, [sp, #48]	; 0x30
   2ca10:	cmp	r0, #0
   2ca14:	beq	2c780 <__assert_fail@plt+0x1b34c>
   2ca18:	b	2e0e8 <__assert_fail@plt+0x1ccb4>
   2ca1c:	ldr	r1, [r7, #20]
   2ca20:	ldr	r0, [sp, #36]	; 0x24
   2ca24:	cmp	r0, r1
   2ca28:	beq	2cbac <__assert_fail@plt+0x1b778>
   2ca2c:	ldr	r0, [r7]
   2ca30:	ldr	r5, [sp, #28]
   2ca34:	ldr	lr, [sp, #44]	; 0x2c
   2ca38:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2ca3c:	add	r2, r1, #1
   2ca40:	str	r2, [r7, #20]
   2ca44:	str	r3, [r0, r1, lsl #2]
   2ca48:	b	2c9c0 <__assert_fail@plt+0x1b58c>
   2ca4c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2ca50:	mov	r0, r7
   2ca54:	bl	1132c <strlen@plt>
   2ca58:	cmp	r0, #1
   2ca5c:	beq	2c98c <__assert_fail@plt+0x1b558>
   2ca60:	b	2e260 <__assert_fail@plt+0x1ce2c>
   2ca64:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2ca68:	ldrb	r7, [r0]
   2ca6c:	cmp	r8, #3
   2ca70:	bne	2c904 <__assert_fail@plt+0x1b4d0>
   2ca74:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2ca78:	ldrb	sl, [r0]
   2ca7c:	cmp	r6, #3
   2ca80:	cmpne	r6, #0
   2ca84:	bne	2caac <__assert_fail@plt+0x1b678>
   2ca88:	ldr	r0, [sp, #52]	; 0x34
   2ca8c:	ldr	r0, [r0, #92]	; 0x5c
   2ca90:	cmp	r0, #2
   2ca94:	blt	2cab0 <__assert_fail@plt+0x1b67c>
   2ca98:	mov	r0, r7
   2ca9c:	bl	11374 <btowc@plt>
   2caa0:	ldr	lr, [sp, #44]	; 0x2c
   2caa4:	mov	r7, r0
   2caa8:	b	2cab0 <__assert_fail@plt+0x1b67c>
   2caac:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2cab0:	cmp	r8, #3
   2cab4:	cmpne	r8, #0
   2cab8:	bne	2cae0 <__assert_fail@plt+0x1b6ac>
   2cabc:	ldr	r0, [sp, #52]	; 0x34
   2cac0:	ldr	r0, [r0, #92]	; 0x5c
   2cac4:	cmp	r0, #2
   2cac8:	blt	2cae4 <__assert_fail@plt+0x1b6b0>
   2cacc:	mov	r0, sl
   2cad0:	bl	11374 <btowc@plt>
   2cad4:	ldr	lr, [sp, #44]	; 0x2c
   2cad8:	mov	sl, r0
   2cadc:	b	2cae4 <__assert_fail@plt+0x1b6b0>
   2cae0:	ldr	sl, [fp, #-44]	; 0xffffffd4
   2cae4:	ldr	r8, [sp, #24]
   2cae8:	cmn	r7, #1
   2caec:	mov	r9, #3
   2caf0:	cmnne	sl, #1
   2caf4:	beq	2e05c <__assert_fail@plt+0x1cc28>
   2caf8:	ldr	r0, [sp, #40]	; 0x28
   2cafc:	cmp	r0, #0
   2cb00:	beq	2cb10 <__assert_fail@plt+0x1b6dc>
   2cb04:	cmp	r7, sl
   2cb08:	mov	r9, #11
   2cb0c:	bhi	2e05c <__assert_fail@plt+0x1cc28>
   2cb10:	ldr	r0, [sp, #52]	; 0x34
   2cb14:	ldr	r0, [r0, #92]	; 0x5c
   2cb18:	cmp	r0, #2
   2cb1c:	blt	2cb54 <__assert_fail@plt+0x1b720>
   2cb20:	ldr	r4, [sp, #60]	; 0x3c
   2cb24:	ldr	r1, [sp, #32]
   2cb28:	ldr	r5, [sp, #28]
   2cb2c:	ldr	r0, [r4, #32]
   2cb30:	cmp	r1, r0
   2cb34:	beq	2cbec <__assert_fail@plt+0x1b7b8>
   2cb38:	ldmib	r4, {r6, r9}
   2cb3c:	str	r7, [r6, r0, lsl #2]
   2cb40:	ldr	r0, [r4, #32]
   2cb44:	add	r1, r0, #1
   2cb48:	str	r1, [r4, #32]
   2cb4c:	str	sl, [r9, r0, lsl #2]
   2cb50:	b	2cb58 <__assert_fail@plt+0x1b724>
   2cb54:	ldr	r5, [sp, #28]
   2cb58:	ldr	r9, [sp, #16]
   2cb5c:	mov	r0, #0
   2cb60:	b	2cb70 <__assert_fail@plt+0x1b73c>
   2cb64:	add	r0, r0, #1
   2cb68:	cmp	r0, #256	; 0x100
   2cb6c:	beq	2cb98 <__assert_fail@plt+0x1b764>
   2cb70:	cmp	r7, r0
   2cb74:	cmpls	r0, sl
   2cb78:	bhi	2cb64 <__assert_fail@plt+0x1b730>
   2cb7c:	ubfx	r1, r0, #5, #3
   2cb80:	and	r3, r0, #31
   2cb84:	mov	r4, #1
   2cb88:	ldr	r2, [r8, r1, lsl #2]
   2cb8c:	orr	r2, r2, r4, lsl r3
   2cb90:	str	r2, [r8, r1, lsl #2]
   2cb94:	b	2cb64 <__assert_fail@plt+0x1b730>
   2cb98:	ldr	r0, [sp, #20]
   2cb9c:	ldr	sl, [sp, #52]	; 0x34
   2cba0:	ldr	r7, [sp, #60]	; 0x3c
   2cba4:	mov	r1, #0
   2cba8:	b	2c9bc <__assert_fail@plt+0x1b588>
   2cbac:	ldr	r1, [sp, #36]	; 0x24
   2cbb0:	mov	r0, #1
   2cbb4:	orr	r1, r0, r1, lsl #1
   2cbb8:	ldr	r0, [r7]
   2cbbc:	str	r1, [sp, #36]	; 0x24
   2cbc0:	lsl	r1, r1, #2
   2cbc4:	bl	38020 <__assert_fail@plt+0x26bec>
   2cbc8:	cmp	r0, #0
   2cbcc:	beq	2e56c <__assert_fail@plt+0x1d138>
   2cbd0:	ldr	r7, [sp, #60]	; 0x3c
   2cbd4:	ldr	r5, [sp, #28]
   2cbd8:	ldr	lr, [sp, #44]	; 0x2c
   2cbdc:	mov	r9, r4
   2cbe0:	str	r0, [r7]
   2cbe4:	ldr	r1, [r7, #20]
   2cbe8:	b	2ca38 <__assert_fail@plt+0x1b604>
   2cbec:	ldr	r1, [sp, #32]
   2cbf0:	mov	r0, #1
   2cbf4:	orr	r1, r0, r1, lsl #1
   2cbf8:	ldr	r0, [r4, #4]
   2cbfc:	lsl	r9, r1, #2
   2cc00:	str	r1, [sp, #32]
   2cc04:	mov	r1, r9
   2cc08:	bl	38020 <__assert_fail@plt+0x26bec>
   2cc0c:	mov	r6, r0
   2cc10:	ldr	r0, [r4, #8]
   2cc14:	mov	r1, r9
   2cc18:	bl	38020 <__assert_fail@plt+0x26bec>
   2cc1c:	mov	r9, r0
   2cc20:	cmp	r6, #0
   2cc24:	cmpne	r9, #0
   2cc28:	beq	2e584 <__assert_fail@plt+0x1d150>
   2cc2c:	ldr	r4, [sp, #60]	; 0x3c
   2cc30:	stmib	r4, {r6, r9}
   2cc34:	ldr	r0, [r4, #32]
   2cc38:	ldr	r5, [sp, #28]
   2cc3c:	ldr	lr, [sp, #44]	; 0x2c
   2cc40:	ldr	r8, [sp, #24]
   2cc44:	b	2cb3c <__assert_fail@plt+0x1b708>
   2cc48:	ldr	r0, [r5, #40]	; 0x28
   2cc4c:	ldr	ip, [sp, #48]	; 0x30
   2cc50:	add	r0, r0, r9
   2cc54:	str	r0, [r5, #40]	; 0x28
   2cc58:	ldr	r0, [sp, #56]	; 0x38
   2cc5c:	cmp	r0, #0
   2cc60:	beq	2cc80 <__assert_fail@plt+0x1b84c>
   2cc64:	vld1.32	{d16-d17}, [r8]
   2cc68:	mov	r0, r8
   2cc6c:	vmvn	q8, q8
   2cc70:	vst1.32	{d16-d17}, [r0]!
   2cc74:	vld1.32	{d16-d17}, [r0]
   2cc78:	vmvn	q8, q8
   2cc7c:	vst1.32	{d16-d17}, [r0]
   2cc80:	ldr	r0, [sl, #92]	; 0x5c
   2cc84:	cmp	r0, #2
   2cc88:	blt	2cd0c <__assert_fail@plt+0x1b8d8>
   2cc8c:	ldr	r6, [sl, #60]	; 0x3c
   2cc90:	ldm	r8, {r1, r2, r3, r7}
   2cc94:	ldr	r5, [r6]
   2cc98:	and	r1, r1, r5
   2cc9c:	ldr	r5, [sp, #28]
   2cca0:	str	r1, [r8]
   2cca4:	ldr	r1, [r6, #4]
   2cca8:	and	r1, r2, r1
   2ccac:	str	r1, [r8, #4]
   2ccb0:	ldr	r1, [r6, #8]
   2ccb4:	and	r1, r3, r1
   2ccb8:	str	r1, [r8, #8]
   2ccbc:	ldr	r1, [r6, #12]
   2ccc0:	and	r1, r7, r1
   2ccc4:	ldr	r7, [sp, #60]	; 0x3c
   2ccc8:	str	r1, [r8, #12]
   2cccc:	ldr	r1, [r8, #16]
   2ccd0:	ldr	r2, [r6, #16]
   2ccd4:	and	r1, r1, r2
   2ccd8:	str	r1, [r8, #16]
   2ccdc:	ldr	r1, [r6, #20]
   2cce0:	ldr	r2, [r8, #20]
   2cce4:	and	r1, r2, r1
   2cce8:	str	r1, [r8, #20]
   2ccec:	ldr	r1, [r6, #24]
   2ccf0:	ldr	r2, [r8, #24]
   2ccf4:	and	r1, r2, r1
   2ccf8:	str	r1, [r8, #24]
   2ccfc:	ldr	r1, [r6, #28]
   2cd00:	ldr	r2, [r8, #28]
   2cd04:	and	r1, r2, r1
   2cd08:	str	r1, [r8, #28]
   2cd0c:	ldr	r1, [r7, #20]
   2cd10:	cmp	r1, #0
   2cd14:	bne	2cd3c <__assert_fail@plt+0x1b908>
   2cd18:	ldr	r1, [r7, #24]
   2cd1c:	cmp	r1, #0
   2cd20:	bne	2cd3c <__assert_fail@plt+0x1b908>
   2cd24:	ldr	r1, [r7, #28]
   2cd28:	cmp	r1, #0
   2cd2c:	bne	2cd3c <__assert_fail@plt+0x1b908>
   2cd30:	ldr	r1, [r7, #32]
   2cd34:	cmp	r1, #0
   2cd38:	beq	2dfb8 <__assert_fail@plt+0x1cb84>
   2cd3c:	ldrb	r0, [sl, #88]	; 0x58
   2cd40:	orr	r0, r0, #2
   2cd44:	strb	r0, [sl, #88]	; 0x58
   2cd48:	ldr	r1, [sl, #64]	; 0x40
   2cd4c:	cmp	r1, #31
   2cd50:	beq	2e1cc <__assert_fail@plt+0x1cd98>
   2cd54:	ldr	r0, [sl, #56]	; 0x38
   2cd58:	add	r0, r0, r1, lsl #5
   2cd5c:	add	r2, r1, #1
   2cd60:	vmov.i32	q8, #0	; 0x00000000
   2cd64:	mov	r1, #6
   2cd68:	str	r2, [sl, #64]	; 0x40
   2cd6c:	mov	r2, #0
   2cd70:	add	r4, r0, #4
   2cd74:	str	r2, [r0, #20]
   2cd78:	str	r7, [r0, #24]
   2cd7c:	str	r1, [r0, #28]
   2cd80:	mov	r0, #28
   2cd84:	mov	r1, r4
   2cd88:	vst1.32	{d16-d17}, [r1], r0
   2cd8c:	mvn	r0, #0
   2cd90:	str	r0, [r1]
   2cd94:	ldr	r0, [r8]
   2cd98:	cmp	r0, #0
   2cd9c:	bne	2cdf4 <__assert_fail@plt+0x1b9c0>
   2cda0:	ldr	r0, [r8, #4]
   2cda4:	cmp	r0, #0
   2cda8:	bne	2cdf4 <__assert_fail@plt+0x1b9c0>
   2cdac:	ldr	r0, [r8, #8]
   2cdb0:	cmp	r0, #0
   2cdb4:	bne	2cdf4 <__assert_fail@plt+0x1b9c0>
   2cdb8:	ldr	r0, [r8, #12]
   2cdbc:	cmp	r0, #0
   2cdc0:	bne	2cdf4 <__assert_fail@plt+0x1b9c0>
   2cdc4:	ldr	r0, [r8, #16]
   2cdc8:	cmp	r0, #0
   2cdcc:	bne	2cdf4 <__assert_fail@plt+0x1b9c0>
   2cdd0:	ldr	r0, [r8, #20]
   2cdd4:	cmp	r0, #0
   2cdd8:	bne	2cdf4 <__assert_fail@plt+0x1b9c0>
   2cddc:	ldr	r0, [r8, #24]
   2cde0:	cmp	r0, #0
   2cde4:	bne	2cdf4 <__assert_fail@plt+0x1b9c0>
   2cde8:	ldr	r0, [r8, #28]
   2cdec:	cmp	r0, #0
   2cdf0:	beq	2e268 <__assert_fail@plt+0x1ce34>
   2cdf4:	ldr	r1, [sl, #64]	; 0x40
   2cdf8:	cmp	r1, #31
   2cdfc:	beq	2e1fc <__assert_fail@plt+0x1cdc8>
   2ce00:	ldr	r0, [sl, #56]	; 0x38
   2ce04:	add	r0, r0, r1, lsl #5
   2ce08:	add	r2, r1, #1
   2ce0c:	vmov.i32	q8, #0	; 0x00000000
   2ce10:	mov	r1, #3
   2ce14:	str	r2, [sl, #64]	; 0x40
   2ce18:	mov	r2, #0
   2ce1c:	add	r6, r0, #4
   2ce20:	str	r2, [r0, #20]
   2ce24:	str	r8, [r0, #24]
   2ce28:	str	r1, [r0, #28]
   2ce2c:	mov	r0, #28
   2ce30:	mov	r1, r6
   2ce34:	vst1.32	{d16-d17}, [r1], r0
   2ce38:	mvn	r0, #0
   2ce3c:	str	r0, [r1]
   2ce40:	ldr	r1, [sl, #64]	; 0x40
   2ce44:	cmp	r1, #31
   2ce48:	beq	2e22c <__assert_fail@plt+0x1cdf8>
   2ce4c:	ldr	r0, [sl, #56]	; 0x38
   2ce50:	add	r7, r0, r1, lsl #5
   2ce54:	add	r2, r1, #1
   2ce58:	mov	r0, #0
   2ce5c:	mov	r1, #10
   2ce60:	str	r2, [sl, #64]	; 0x40
   2ce64:	mvn	r2, #0
   2ce68:	str	r0, [r7, #4]!
   2ce6c:	add	r3, r7, #20
   2ce70:	str	r6, [r7, #4]
   2ce74:	str	r4, [r7, #8]
   2ce78:	str	r0, [r7, #12]
   2ce7c:	str	r0, [r7, #16]
   2ce80:	stm	r3, {r0, r1, r2}
   2ce84:	str	r7, [r6]
   2ce88:	str	r7, [r4]
   2ce8c:	b	2d090 <__assert_fail@plt+0x1bc5c>
   2ce90:	mov	r0, #5
   2ce94:	str	r0, [lr]
   2ce98:	ldr	r1, [sl, #64]	; 0x40
   2ce9c:	cmp	r1, #31
   2cea0:	beq	2e34c <__assert_fail@plt+0x1cf18>
   2cea4:	ldr	r0, [sl, #56]	; 0x38
   2cea8:	add	r4, r0, r1, lsl #5
   2ceac:	add	r2, r1, #1
   2ceb0:	mov	r0, #0
   2ceb4:	mvn	r3, #0
   2ceb8:	str	r2, [sl, #64]	; 0x40
   2cebc:	str	r0, [r4, #4]!
   2cec0:	str	r0, [r4, #8]
   2cec4:	str	r0, [r4, #4]
   2cec8:	ldm	lr, {r1, r2}
   2cecc:	str	r3, [r4, #28]
   2ced0:	str	r0, [r4, #16]
   2ced4:	str	r0, [r4, #12]
   2ced8:	bic	r0, r2, #786432	; 0xc0000
   2cedc:	str	r1, [r4, #20]
   2cee0:	str	r0, [r4, #24]
   2cee4:	mov	r0, #10
   2cee8:	str	r0, [lr]
   2ceec:	ldr	r1, [sl, #64]	; 0x40
   2cef0:	cmp	r1, #31
   2cef4:	beq	2e2b4 <__assert_fail@plt+0x1ce80>
   2cef8:	ldr	r0, [sl, #56]	; 0x38
   2cefc:	add	r5, r0, r1, lsl #5
   2cf00:	add	r2, r1, #1
   2cf04:	mov	r0, #0
   2cf08:	mvn	r3, #0
   2cf0c:	str	r2, [sl, #64]	; 0x40
   2cf10:	str	r0, [r5, #4]!
   2cf14:	str	r0, [r5, #8]
   2cf18:	str	r0, [r5, #4]
   2cf1c:	ldm	lr, {r1, r2}
   2cf20:	str	r3, [r5, #28]
   2cf24:	str	r0, [r5, #16]
   2cf28:	str	r0, [r5, #12]
   2cf2c:	bic	r0, r2, #786432	; 0xc0000
   2cf30:	str	r1, [r5, #20]
   2cf34:	str	r0, [r5, #24]
   2cf38:	ldr	r1, [sl, #64]	; 0x40
   2cf3c:	cmp	r1, #31
   2cf40:	beq	2e2e8 <__assert_fail@plt+0x1ceb4>
   2cf44:	ldr	r0, [sl, #56]	; 0x38
   2cf48:	add	r6, r0, r1, lsl #5
   2cf4c:	add	r2, r1, #1
   2cf50:	mov	r0, #0
   2cf54:	cmp	r4, #0
   2cf58:	mov	r1, #10
   2cf5c:	str	r2, [sl, #64]	; 0x40
   2cf60:	mvn	r2, #0
   2cf64:	str	r0, [r6, #4]!
   2cf68:	add	r3, r6, #20
   2cf6c:	stmib	r6, {r4, r5}
   2cf70:	str	r0, [r6, #12]
   2cf74:	str	r0, [r6, #16]
   2cf78:	stm	r3, {r0, r1, r2}
   2cf7c:	strne	r6, [r4]
   2cf80:	cmp	r5, #0
   2cf84:	strne	r6, [r5]
   2cf88:	cmpne	r4, #0
   2cf8c:	bne	2cfe8 <__assert_fail@plt+0x1bbb4>
   2cf90:	mov	r0, #12
   2cf94:	ldr	r1, [sp, #20]
   2cf98:	b	2df04 <__assert_fail@plt+0x1cad0>
   2cf9c:	ldr	r1, [sl, #64]	; 0x40
   2cfa0:	cmp	r1, #31
   2cfa4:	beq	2e380 <__assert_fail@plt+0x1cf4c>
   2cfa8:	ldr	r0, [sl, #56]	; 0x38
   2cfac:	add	r6, r0, r1, lsl #5
   2cfb0:	add	r2, r1, #1
   2cfb4:	mov	r0, #0
   2cfb8:	mvn	r3, #0
   2cfbc:	str	r2, [sl, #64]	; 0x40
   2cfc0:	str	r0, [r6, #4]!
   2cfc4:	str	r0, [r6, #8]
   2cfc8:	str	r0, [r6, #4]
   2cfcc:	ldm	lr, {r1, r2}
   2cfd0:	str	r3, [r6, #28]
   2cfd4:	str	r0, [r6, #16]
   2cfd8:	str	r0, [r6, #12]
   2cfdc:	bic	r0, r2, #786432	; 0xc0000
   2cfe0:	str	r1, [r6, #20]
   2cfe4:	str	r0, [r6, #24]
   2cfe8:	ldr	r4, [sp, #28]
   2cfec:	mov	r0, lr
   2cff0:	mov	r2, ip
   2cff4:	mov	r1, r4
   2cff8:	bl	2b470 <__assert_fail@plt+0x1a03c>
   2cffc:	ldr	r1, [r4, #40]	; 0x28
   2d000:	mov	r9, r6
   2d004:	add	r0, r1, r0
   2d008:	str	r0, [r4, #40]	; 0x28
   2d00c:	b	2df08 <__assert_fail@plt+0x1cad4>
   2d010:	ldrb	r0, [r7, #4]
   2d014:	cmp	r0, #9
   2d018:	bne	2e460 <__assert_fail@plt+0x1d02c>
   2d01c:	mov	lr, r7
   2d020:	cmp	r4, #8
   2d024:	bhi	2d038 <__assert_fail@plt+0x1bc04>
   2d028:	ldr	r0, [sl, #84]	; 0x54
   2d02c:	mov	r1, #1
   2d030:	orr	r0, r0, r1, lsl r4
   2d034:	str	r0, [sl, #84]	; 0x54
   2d038:	ldr	r1, [sl, #64]	; 0x40
   2d03c:	ldr	ip, [sp, #48]	; 0x30
   2d040:	cmp	r1, #31
   2d044:	beq	2e280 <__assert_fail@plt+0x1ce4c>
   2d048:	ldr	r0, [sl, #56]	; 0x38
   2d04c:	add	r0, r0, r1, lsl #5
   2d050:	add	r2, r1, #1
   2d054:	mov	r1, #0
   2d058:	cmp	r9, #0
   2d05c:	mvn	r3, #0
   2d060:	str	r2, [sl, #64]	; 0x40
   2d064:	mov	r2, #17
   2d068:	mov	r7, r0
   2d06c:	str	r1, [r7, #4]!
   2d070:	add	r6, r7, #20
   2d074:	str	r9, [r7, #4]
   2d078:	str	r1, [r7, #8]
   2d07c:	str	r1, [r7, #12]
   2d080:	str	r1, [r7, #16]
   2d084:	stm	r6, {r1, r2, r3}
   2d088:	strne	r7, [r9]
   2d08c:	str	r4, [r0, #24]
   2d090:	mov	r0, lr
   2d094:	mov	r1, r5
   2d098:	mov	r2, ip
   2d09c:	bl	2b470 <__assert_fail@plt+0x1a03c>
   2d0a0:	ldr	r1, [r5, #40]	; 0x28
   2d0a4:	ldr	ip, [sp, #48]	; 0x30
   2d0a8:	ldr	lr, [sp, #44]	; 0x2c
   2d0ac:	mov	r4, #0
   2d0b0:	add	r0, r1, r0
   2d0b4:	str	r0, [r5, #40]	; 0x28
   2d0b8:	and	r0, ip, #16777216	; 0x1000000
   2d0bc:	str	r0, [sp, #32]
   2d0c0:	and	r0, ip, #2097152	; 0x200000
   2d0c4:	str	r0, [sp, #16]
   2d0c8:	add	r0, sl, #56	; 0x38
   2d0cc:	str	r0, [sp, #60]	; 0x3c
   2d0d0:	add	r0, sl, #64	; 0x40
   2d0d4:	str	r0, [sp, #24]
   2d0d8:	ldrb	r0, [lr, #4]
   2d0dc:	mov	r9, r7
   2d0e0:	cmp	r0, #23
   2d0e4:	bhi	2df08 <__assert_fail@plt+0x1cad4>
   2d0e8:	movw	r2, #2048	; 0x800
   2d0ec:	mov	r1, #1
   2d0f0:	movt	r2, #140	; 0x8c
   2d0f4:	tst	r2, r1, lsl r0
   2d0f8:	beq	2df08 <__assert_fail@plt+0x1cad4>
   2d0fc:	cmp	r0, #23
   2d100:	str	r9, [sp, #40]	; 0x28
   2d104:	bne	2d1b4 <__assert_fail@plt+0x1bd80>
   2d108:	ldr	r9, [r5, #40]	; 0x28
   2d10c:	ldm	lr, {r7, sl}
   2d110:	mov	r6, r5
   2d114:	mvn	r2, #0
   2d118:	mov	r8, r2
   2d11c:	mov	r0, lr
   2d120:	mov	r1, r6
   2d124:	mov	r2, ip
   2d128:	mov	r5, r6
   2d12c:	bl	2b470 <__assert_fail@plt+0x1a03c>
   2d130:	ldr	r1, [r6, #40]	; 0x28
   2d134:	ldr	lr, [sp, #44]	; 0x2c
   2d138:	add	r0, r1, r0
   2d13c:	str	r0, [r6, #40]	; 0x28
   2d140:	ldrb	r0, [lr, #4]
   2d144:	ldrb	r1, [lr]
   2d148:	cmp	r0, #24
   2d14c:	beq	2d1d0 <__assert_fail@plt+0x1bd9c>
   2d150:	cmp	r0, #2
   2d154:	beq	2d7e4 <__assert_fail@plt+0x1c3b0>
   2d158:	cmp	r1, #44	; 0x2c
   2d15c:	beq	2d1d0 <__assert_fail@plt+0x1bd9c>
   2d160:	ldr	ip, [sp, #48]	; 0x30
   2d164:	mvn	r2, #1
   2d168:	cmp	r1, #48	; 0x30
   2d16c:	bcc	2d118 <__assert_fail@plt+0x1bce4>
   2d170:	cmp	r0, #1
   2d174:	bne	2d118 <__assert_fail@plt+0x1bce4>
   2d178:	cmn	r8, #2
   2d17c:	beq	2d118 <__assert_fail@plt+0x1bce4>
   2d180:	cmp	r1, #57	; 0x39
   2d184:	bhi	2d118 <__assert_fail@plt+0x1bce4>
   2d188:	cmn	r8, #1
   2d18c:	beq	2d1ac <__assert_fail@plt+0x1bd78>
   2d190:	add	r0, r8, r8, lsl #2
   2d194:	add	r0, r1, r0, lsl #1
   2d198:	movw	r1, #32816	; 0x8030
   2d19c:	cmp	r0, r1
   2d1a0:	movge	r0, r1
   2d1a4:	sub	r2, r0, #48	; 0x30
   2d1a8:	b	2d118 <__assert_fail@plt+0x1bce4>
   2d1ac:	sub	r2, r1, #48	; 0x30
   2d1b0:	b	2d118 <__assert_fail@plt+0x1bce4>
   2d1b4:	cmp	r0, #19
   2d1b8:	sub	r0, r0, #18
   2d1bc:	mvn	sl, #0
   2d1c0:	clz	r0, r0
   2d1c4:	movweq	sl, #1
   2d1c8:	lsr	r8, r0, #5
   2d1cc:	b	2d364 <__assert_fail@plt+0x1bf30>
   2d1d0:	cmn	r8, #1
   2d1d4:	bne	2d208 <__assert_fail@plt+0x1bdd4>
   2d1d8:	ldr	ip, [sp, #48]	; 0x30
   2d1dc:	cmp	r1, #44	; 0x2c
   2d1e0:	moveq	r8, #0
   2d1e4:	cmpeq	r0, #1
   2d1e8:	beq	2d254 <__assert_fail@plt+0x1be20>
   2d1ec:	ldr	r0, [sp, #20]
   2d1f0:	mov	r1, #10
   2d1f4:	str	r1, [r0]
   2d1f8:	ldr	r9, [sp, #40]	; 0x28
   2d1fc:	mov	r7, #0
   2d200:	mov	r5, r6
   2d204:	b	2de18 <__assert_fail@plt+0x1c9e4>
   2d208:	ldr	ip, [sp, #48]	; 0x30
   2d20c:	cmn	r8, #2
   2d210:	beq	2d228 <__assert_fail@plt+0x1bdf4>
   2d214:	cmp	r0, #24
   2d218:	beq	2d310 <__assert_fail@plt+0x1bedc>
   2d21c:	cmp	r0, #1
   2d220:	cmpeq	r1, #44	; 0x2c
   2d224:	beq	2d254 <__assert_fail@plt+0x1be20>
   2d228:	ldr	r1, [sp, #16]
   2d22c:	cmp	r1, #0
   2d230:	beq	2dd74 <__assert_fail@plt+0x1c940>
   2d234:	mov	r0, #1
   2d238:	str	r9, [r6, #40]	; 0x28
   2d23c:	mov	r5, r6
   2d240:	bfi	sl, r0, #0, #8
   2d244:	stm	lr, {r7, sl}
   2d248:	ldr	r9, [sp, #40]	; 0x28
   2d24c:	mov	r7, r9
   2d250:	b	2de18 <__assert_fail@plt+0x1c9e4>
   2d254:	mvn	r2, #0
   2d258:	str	r9, [sp, #56]	; 0x38
   2d25c:	mov	r9, r2
   2d260:	mov	r0, lr
   2d264:	mov	r1, r6
   2d268:	mov	r2, ip
   2d26c:	mov	r5, r6
   2d270:	bl	2b470 <__assert_fail@plt+0x1a03c>
   2d274:	ldr	r1, [r6, #40]	; 0x28
   2d278:	ldr	lr, [sp, #44]	; 0x2c
   2d27c:	add	r0, r1, r0
   2d280:	str	r0, [r6, #40]	; 0x28
   2d284:	ldrb	r0, [lr, #4]
   2d288:	cmp	r0, #24
   2d28c:	beq	2d2f8 <__assert_fail@plt+0x1bec4>
   2d290:	cmp	r0, #2
   2d294:	beq	2dbe8 <__assert_fail@plt+0x1c7b4>
   2d298:	ldrb	r1, [lr]
   2d29c:	ldr	ip, [sp, #48]	; 0x30
   2d2a0:	cmp	r1, #44	; 0x2c
   2d2a4:	beq	2d2fc <__assert_fail@plt+0x1bec8>
   2d2a8:	mvn	r2, #1
   2d2ac:	cmp	r1, #48	; 0x30
   2d2b0:	bcc	2d25c <__assert_fail@plt+0x1be28>
   2d2b4:	cmp	r0, #1
   2d2b8:	bne	2d25c <__assert_fail@plt+0x1be28>
   2d2bc:	cmn	r9, #2
   2d2c0:	beq	2d25c <__assert_fail@plt+0x1be28>
   2d2c4:	cmp	r1, #57	; 0x39
   2d2c8:	bhi	2d25c <__assert_fail@plt+0x1be28>
   2d2cc:	cmn	r9, #1
   2d2d0:	beq	2d2f0 <__assert_fail@plt+0x1bebc>
   2d2d4:	add	r0, r9, r9, lsl #2
   2d2d8:	add	r0, r1, r0, lsl #1
   2d2dc:	movw	r1, #32816	; 0x8030
   2d2e0:	cmp	r0, r1
   2d2e4:	movge	r0, r1
   2d2e8:	sub	r2, r0, #48	; 0x30
   2d2ec:	b	2d25c <__assert_fail@plt+0x1be28>
   2d2f0:	sub	r2, r1, #48	; 0x30
   2d2f4:	b	2d25c <__assert_fail@plt+0x1be28>
   2d2f8:	ldr	ip, [sp, #48]	; 0x30
   2d2fc:	mov	r2, r9
   2d300:	ldr	r9, [sp, #56]	; 0x38
   2d304:	cmn	r2, #2
   2d308:	bne	2d31c <__assert_fail@plt+0x1bee8>
   2d30c:	b	2d228 <__assert_fail@plt+0x1bdf4>
   2d310:	mov	r2, r8
   2d314:	cmn	r2, #2
   2d318:	beq	2d228 <__assert_fail@plt+0x1bdf4>
   2d31c:	ldr	r9, [sp, #40]	; 0x28
   2d320:	cmp	r8, r2
   2d324:	mov	r1, #0
   2d328:	mov	r5, r6
   2d32c:	movwle	r1, #1
   2d330:	cmp	r0, #24
   2d334:	bne	2dba8 <__assert_fail@plt+0x1c774>
   2d338:	add	r0, r2, #1
   2d33c:	mov	sl, r2
   2d340:	clz	r0, r0
   2d344:	lsr	r0, r0, #5
   2d348:	orrs	r0, r1, r0
   2d34c:	beq	2dba8 <__assert_fail@plt+0x1c774>
   2d350:	cmn	sl, #1
   2d354:	mov	r0, sl
   2d358:	moveq	r0, r8
   2d35c:	cmp	r0, #32768	; 0x8000
   2d360:	bge	2dd60 <__assert_fail@plt+0x1c92c>
   2d364:	mov	r0, lr
   2d368:	mov	r1, r5
   2d36c:	mov	r2, ip
   2d370:	bl	2b470 <__assert_fail@plt+0x1a03c>
   2d374:	ldr	r1, [r5, #40]	; 0x28
   2d378:	mov	r7, #0
   2d37c:	cmp	r9, #0
   2d380:	add	r0, r1, r0
   2d384:	str	r0, [r5, #40]	; 0x28
   2d388:	beq	2d7ec <__assert_fail@plt+0x1c3b8>
   2d38c:	ldr	ip, [sp, #48]	; 0x30
   2d390:	orrs	r0, sl, r8
   2d394:	beq	2d7f8 <__assert_fail@plt+0x1c3c4>
   2d398:	mov	r0, #0
   2d39c:	cmp	r8, #1
   2d3a0:	mov	r7, r9
   2d3a4:	str	r0, [sp, #36]	; 0x24
   2d3a8:	ldr	lr, [sp, #44]	; 0x2c
   2d3ac:	ldr	r5, [sp, #24]
   2d3b0:	bge	2d8ac <__assert_fail@plt+0x1c478>
   2d3b4:	ldrb	r0, [r7, #24]
   2d3b8:	cmp	r0, #17
   2d3bc:	bne	2d430 <__assert_fail@plt+0x1bffc>
   2d3c0:	ldr	r0, [r7, #20]
   2d3c4:	mov	r2, r7
   2d3c8:	mov	r1, r2
   2d3cc:	ldr	r2, [r2, #4]
   2d3d0:	cmp	r2, #0
   2d3d4:	bne	2d3c8 <__assert_fail@plt+0x1bf94>
   2d3d8:	ldr	r2, [r1, #8]
   2d3dc:	cmp	r2, #0
   2d3e0:	bne	2d3c8 <__assert_fail@plt+0x1bf94>
   2d3e4:	ldr	r2, [r1, #24]
   2d3e8:	uxtb	r3, r2
   2d3ec:	cmp	r3, #17
   2d3f0:	bne	2d404 <__assert_fail@plt+0x1bfd0>
   2d3f4:	ldr	r3, [r1, #20]
   2d3f8:	cmp	r3, r0
   2d3fc:	orreq	r2, r2, #524288	; 0x80000
   2d400:	streq	r2, [r1, #24]
   2d404:	ldr	r3, [r1]
   2d408:	cmp	r3, #0
   2d40c:	beq	2d430 <__assert_fail@plt+0x1bffc>
   2d410:	ldr	r2, [r3, #8]
   2d414:	cmp	r2, r1
   2d418:	mov	r1, r3
   2d41c:	beq	2d3e4 <__assert_fail@plt+0x1bfb0>
   2d420:	cmp	r2, #0
   2d424:	mov	r1, r3
   2d428:	beq	2d3e4 <__assert_fail@plt+0x1bfb0>
   2d42c:	b	2d3c8 <__assert_fail@plt+0x1bf94>
   2d430:	ldr	r1, [r5]
   2d434:	cmn	sl, #1
   2d438:	mov	r6, #10
   2d43c:	movweq	r6, #11
   2d440:	cmp	r1, #31
   2d444:	beq	2db58 <__assert_fail@plt+0x1c724>
   2d448:	ldr	r0, [sp, #60]	; 0x3c
   2d44c:	ldr	r0, [r0]
   2d450:	add	r9, r0, r1, lsl #5
   2d454:	add	r2, r1, #1
   2d458:	mvn	r0, #0
   2d45c:	str	r2, [r5]
   2d460:	str	r4, [r9, #4]!
   2d464:	str	r7, [r9, #4]
   2d468:	str	r4, [r9, #8]
   2d46c:	str	r4, [r9, #12]
   2d470:	str	r4, [r9, #16]
   2d474:	str	r4, [r9, #20]
   2d478:	str	r6, [r9, #24]
   2d47c:	str	r0, [r9, #28]
   2d480:	add	r0, r8, #2
   2d484:	str	r9, [r7]
   2d488:	cmp	r0, sl
   2d48c:	bgt	2d770 <__assert_fail@plt+0x1c33c>
   2d490:	str	sl, [sp, #52]	; 0x34
   2d494:	mov	sl, r9
   2d498:	ldr	r1, [r5]
   2d49c:	str	r0, [sp, #56]	; 0x38
   2d4a0:	cmp	r1, #31
   2d4a4:	beq	2d6b0 <__assert_fail@plt+0x1c27c>
   2d4a8:	ldr	r0, [sp, #60]	; 0x3c
   2d4ac:	ldr	r0, [r0]
   2d4b0:	add	r8, r0, r1, lsl #5
   2d4b4:	add	r3, r1, #1
   2d4b8:	add	r2, r7, #20
   2d4bc:	sub	r6, fp, #80	; 0x50
   2d4c0:	str	r3, [r5]
   2d4c4:	str	r4, [r8, #4]!
   2d4c8:	str	r4, [r8, #8]
   2d4cc:	str	r4, [r8, #4]
   2d4d0:	ldm	r2, {r0, r1}
   2d4d4:	mvn	r2, #0
   2d4d8:	str	r2, [r8, #28]
   2d4dc:	str	r4, [r8, #16]
   2d4e0:	str	r4, [r8, #12]
   2d4e4:	str	r0, [r8, #20]
   2d4e8:	bic	r0, r1, #786432	; 0xc0000
   2d4ec:	str	r0, [r8, #24]
   2d4f0:	mov	r0, r8
   2d4f4:	str	r8, [fp, #-80]	; 0xffffffb0
   2d4f8:	str	r9, [r0]
   2d4fc:	ldr	r0, [r6]
   2d500:	ldr	r1, [r0, #24]
   2d504:	orr	r1, r1, #262144	; 0x40000
   2d508:	str	r1, [r0, #24]
   2d50c:	ldr	r0, [r7, #4]
   2d510:	ldr	r9, [r6]
   2d514:	cmp	r0, #0
   2d518:	beq	2d528 <__assert_fail@plt+0x1c0f4>
   2d51c:	add	r6, r9, #4
   2d520:	mov	r7, r0
   2d524:	b	2d55c <__assert_fail@plt+0x1c128>
   2d528:	mov	r1, #0
   2d52c:	mov	r0, r7
   2d530:	ldr	r7, [r7, #8]
   2d534:	cmp	r7, r1
   2d538:	cmpne	r7, #0
   2d53c:	bne	2d558 <__assert_fail@plt+0x1c124>
   2d540:	ldr	r7, [r0]
   2d544:	ldr	r9, [r9]
   2d548:	mov	r1, r0
   2d54c:	cmp	r7, #0
   2d550:	bne	2d52c <__assert_fail@plt+0x1c0f8>
   2d554:	b	2d5e8 <__assert_fail@plt+0x1c1b4>
   2d558:	add	r6, r9, #8
   2d55c:	ldr	r1, [r5]
   2d560:	cmp	r1, #31
   2d564:	beq	2d5b4 <__assert_fail@plt+0x1c180>
   2d568:	ldr	r0, [sp, #60]	; 0x3c
   2d56c:	ldr	r0, [r0]
   2d570:	add	r0, r0, r1, lsl #5
   2d574:	add	r3, r1, #1
   2d578:	add	r2, r7, #20
   2d57c:	str	r3, [r5]
   2d580:	mvn	r3, #0
   2d584:	str	r4, [r0, #4]!
   2d588:	str	r4, [r0, #8]
   2d58c:	str	r4, [r0, #4]
   2d590:	ldm	r2, {r1, r2}
   2d594:	str	r3, [r0, #28]
   2d598:	str	r4, [r0, #16]
   2d59c:	str	r4, [r0, #12]
   2d5a0:	str	r1, [r0, #20]
   2d5a4:	bic	r1, r2, #786432	; 0xc0000
   2d5a8:	str	r1, [r0, #24]
   2d5ac:	str	r0, [r6]
   2d5b0:	b	2d4f8 <__assert_fail@plt+0x1c0c4>
   2d5b4:	mov	r0, #996	; 0x3e4
   2d5b8:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2d5bc:	cmp	r0, #0
   2d5c0:	beq	2d758 <__assert_fail@plt+0x1c324>
   2d5c4:	ldr	r2, [sp, #60]	; 0x3c
   2d5c8:	ldr	ip, [sp, #48]	; 0x30
   2d5cc:	ldr	lr, [sp, #44]	; 0x2c
   2d5d0:	ldr	r1, [r2]
   2d5d4:	str	r1, [r0]
   2d5d8:	mov	r1, #0
   2d5dc:	str	r0, [r2]
   2d5e0:	str	r1, [r5]
   2d5e4:	b	2d570 <__assert_fail@plt+0x1c13c>
   2d5e8:	mov	r7, r8
   2d5ec:	ldr	r1, [r5]
   2d5f0:	cmp	r1, #31
   2d5f4:	beq	2d6e4 <__assert_fail@plt+0x1c2b0>
   2d5f8:	ldr	r0, [sp, #60]	; 0x3c
   2d5fc:	ldr	r0, [r0]
   2d600:	add	r6, r0, r1, lsl #5
   2d604:	add	r2, r1, #1
   2d608:	mov	r0, #16
   2d60c:	cmp	r7, #0
   2d610:	str	r2, [r5]
   2d614:	str	r4, [r6, #4]!
   2d618:	str	sl, [r6, #4]
   2d61c:	str	r7, [r6, #8]
   2d620:	str	r4, [r6, #12]
   2d624:	str	r4, [r6, #16]
   2d628:	str	r4, [r6, #20]
   2d62c:	str	r0, [r6, #24]
   2d630:	mvn	r0, #0
   2d634:	str	r0, [r6, #28]
   2d638:	str	r6, [sl]
   2d63c:	beq	2de00 <__assert_fail@plt+0x1c9cc>
   2d640:	str	r6, [r7]
   2d644:	ldr	r1, [r5]
   2d648:	cmp	r1, #31
   2d64c:	beq	2d718 <__assert_fail@plt+0x1c2e4>
   2d650:	ldr	r0, [sp, #60]	; 0x3c
   2d654:	ldr	r0, [r0]
   2d658:	add	sl, r0, r1, lsl #5
   2d65c:	add	r2, r1, #1
   2d660:	mov	r0, #10
   2d664:	ldr	r1, [sp, #56]	; 0x38
   2d668:	str	r2, [r5]
   2d66c:	str	r4, [sl, #4]!
   2d670:	str	r6, [sl, #4]
   2d674:	str	r4, [sl, #8]
   2d678:	str	r4, [sl, #12]
   2d67c:	str	r4, [sl, #16]
   2d680:	str	r4, [sl, #20]
   2d684:	str	r0, [sl, #24]
   2d688:	mvn	r0, #0
   2d68c:	str	r0, [sl, #28]
   2d690:	ldr	r0, [sp, #52]	; 0x34
   2d694:	str	sl, [r6]
   2d698:	cmp	r1, r0
   2d69c:	bge	2d76c <__assert_fail@plt+0x1c338>
   2d6a0:	ldr	r9, [r7]
   2d6a4:	mov	r0, r1
   2d6a8:	add	r0, r1, #1
   2d6ac:	b	2d498 <__assert_fail@plt+0x1c064>
   2d6b0:	mov	r0, #996	; 0x3e4
   2d6b4:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2d6b8:	cmp	r0, #0
   2d6bc:	beq	2d74c <__assert_fail@plt+0x1c318>
   2d6c0:	ldr	r2, [sp, #60]	; 0x3c
   2d6c4:	ldr	ip, [sp, #48]	; 0x30
   2d6c8:	ldr	lr, [sp, #44]	; 0x2c
   2d6cc:	ldr	r1, [r2]
   2d6d0:	str	r1, [r0]
   2d6d4:	mov	r1, #0
   2d6d8:	str	r0, [r2]
   2d6dc:	str	r1, [r5]
   2d6e0:	b	2d4b0 <__assert_fail@plt+0x1c07c>
   2d6e4:	mov	r0, #996	; 0x3e4
   2d6e8:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2d6ec:	ldr	lr, [sp, #44]	; 0x2c
   2d6f0:	ldr	ip, [sp, #48]	; 0x30
   2d6f4:	cmp	r0, #0
   2d6f8:	beq	2de00 <__assert_fail@plt+0x1c9cc>
   2d6fc:	ldr	r2, [sp, #60]	; 0x3c
   2d700:	ldr	r1, [r2]
   2d704:	str	r1, [r0]
   2d708:	mov	r1, #0
   2d70c:	str	r0, [r2]
   2d710:	str	r1, [r5]
   2d714:	b	2d600 <__assert_fail@plt+0x1c1cc>
   2d718:	mov	r0, #996	; 0x3e4
   2d71c:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2d720:	ldr	lr, [sp, #44]	; 0x2c
   2d724:	ldr	ip, [sp, #48]	; 0x30
   2d728:	cmp	r0, #0
   2d72c:	beq	2de00 <__assert_fail@plt+0x1c9cc>
   2d730:	ldr	r2, [sp, #60]	; 0x3c
   2d734:	ldr	r1, [r2]
   2d738:	str	r1, [r0]
   2d73c:	mov	r1, #0
   2d740:	str	r0, [r2]
   2d744:	str	r1, [r5]
   2d748:	b	2d658 <__assert_fail@plt+0x1c224>
   2d74c:	mov	r7, #0
   2d750:	str	r7, [fp, #-80]	; 0xffffffb0
   2d754:	b	2d760 <__assert_fail@plt+0x1c32c>
   2d758:	mov	r7, #0
   2d75c:	str	r7, [r6]
   2d760:	ldr	ip, [sp, #48]	; 0x30
   2d764:	ldr	lr, [sp, #44]	; 0x2c
   2d768:	b	2d5ec <__assert_fail@plt+0x1c1b8>
   2d76c:	mov	r9, sl
   2d770:	ldr	r6, [sp, #36]	; 0x24
   2d774:	ldr	r8, [sp, #28]
   2d778:	cmp	r6, #0
   2d77c:	beq	2d7d4 <__assert_fail@plt+0x1c3a0>
   2d780:	ldr	r1, [r5]
   2d784:	cmp	r1, #31
   2d788:	beq	2dbb4 <__assert_fail@plt+0x1c780>
   2d78c:	ldr	r0, [sp, #60]	; 0x3c
   2d790:	ldr	r0, [r0]
   2d794:	add	r7, r0, r1, lsl #5
   2d798:	add	r2, r1, #1
   2d79c:	mov	r0, #0
   2d7a0:	mov	r1, #16
   2d7a4:	str	r2, [r5]
   2d7a8:	str	r0, [r7, #4]!
   2d7ac:	stmib	r7, {r6, r9}
   2d7b0:	str	r0, [r7, #12]
   2d7b4:	str	r0, [r7, #16]
   2d7b8:	str	r0, [r7, #20]
   2d7bc:	str	r1, [r7, #24]
   2d7c0:	mvn	r1, #0
   2d7c4:	str	r1, [r7, #28]
   2d7c8:	str	r7, [r6]
   2d7cc:	str	r7, [r9]
   2d7d0:	b	2d7dc <__assert_fail@plt+0x1c3a8>
   2d7d4:	mov	r0, #0
   2d7d8:	mov	r7, r9
   2d7dc:	mov	r5, r8
   2d7e0:	b	2de38 <__assert_fail@plt+0x1ca04>
   2d7e4:	ldr	ip, [sp, #48]	; 0x30
   2d7e8:	b	2d228 <__assert_fail@plt+0x1bdf4>
   2d7ec:	ldr	ip, [sp, #48]	; 0x30
   2d7f0:	ldr	lr, [sp, #44]	; 0x2c
   2d7f4:	b	2de18 <__assert_fail@plt+0x1c9e4>
   2d7f8:	ldr	lr, [sp, #44]	; 0x2c
   2d7fc:	mov	r0, r9
   2d800:	mov	r6, r0
   2d804:	ldr	r0, [r0, #4]
   2d808:	cmp	r0, #0
   2d80c:	bne	2d800 <__assert_fail@plt+0x1c3cc>
   2d810:	ldr	r0, [r6, #8]
   2d814:	cmp	r0, #0
   2d818:	bne	2d800 <__assert_fail@plt+0x1c3cc>
   2d81c:	ldr	r0, [r6, #24]
   2d820:	movw	r1, #255	; 0xff
   2d824:	movt	r1, #4
   2d828:	and	r0, r0, r1
   2d82c:	cmp	r0, #3
   2d830:	beq	2d864 <__assert_fail@plt+0x1c430>
   2d834:	cmp	r0, #6
   2d838:	bne	2d878 <__assert_fail@plt+0x1c444>
   2d83c:	ldr	r5, [r6, #20]
   2d840:	ldr	r0, [r5]
   2d844:	bl	138e8 <__assert_fail@plt+0x24b4>
   2d848:	ldr	r0, [r5, #4]
   2d84c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2d850:	ldr	r0, [r5, #8]
   2d854:	bl	138e8 <__assert_fail@plt+0x24b4>
   2d858:	ldr	r0, [r5, #12]
   2d85c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2d860:	b	2d868 <__assert_fail@plt+0x1c434>
   2d864:	ldr	r5, [r6, #20]
   2d868:	mov	r0, r5
   2d86c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2d870:	ldr	ip, [sp, #48]	; 0x30
   2d874:	ldr	lr, [sp, #44]	; 0x2c
   2d878:	ldr	r1, [r6]
   2d87c:	cmp	r1, #0
   2d880:	beq	2d8a4 <__assert_fail@plt+0x1c470>
   2d884:	ldr	r0, [r1, #8]
   2d888:	cmp	r0, r6
   2d88c:	mov	r6, r1
   2d890:	beq	2d81c <__assert_fail@plt+0x1c3e8>
   2d894:	cmp	r0, #0
   2d898:	mov	r6, r1
   2d89c:	beq	2d81c <__assert_fail@plt+0x1c3e8>
   2d8a0:	b	2d800 <__assert_fail@plt+0x1c3cc>
   2d8a4:	ldr	r5, [sp, #28]
   2d8a8:	b	2de18 <__assert_fail@plt+0x1c9e4>
   2d8ac:	mov	r3, r9
   2d8b0:	str	sl, [sp, #52]	; 0x34
   2d8b4:	str	r9, [sp, #36]	; 0x24
   2d8b8:	beq	2db8c <__assert_fail@plt+0x1c758>
   2d8bc:	ldr	sl, [sp, #40]	; 0x28
   2d8c0:	ldr	r0, [sl]
   2d8c4:	mov	r3, sl
   2d8c8:	str	r0, [sp, #36]	; 0x24
   2d8cc:	mov	r0, #2
   2d8d0:	ldr	r1, [r5]
   2d8d4:	str	r0, [sp, #56]	; 0x38
   2d8d8:	cmp	r1, #31
   2d8dc:	beq	2dab0 <__assert_fail@plt+0x1c67c>
   2d8e0:	ldr	r0, [sp, #60]	; 0x3c
   2d8e4:	ldr	r0, [r0]
   2d8e8:	add	r6, r0, r1, lsl #5
   2d8ec:	add	r2, r3, #20
   2d8f0:	mov	r9, r3
   2d8f4:	add	r3, r1, #1
   2d8f8:	sub	r7, fp, #80	; 0x50
   2d8fc:	str	r3, [r5]
   2d900:	str	r4, [r6, #4]!
   2d904:	str	r4, [r6, #8]
   2d908:	str	r4, [r6, #4]
   2d90c:	ldm	r2, {r0, r1}
   2d910:	mvn	r2, #0
   2d914:	str	r2, [r6, #28]
   2d918:	str	r4, [r6, #16]
   2d91c:	str	r4, [r6, #12]
   2d920:	str	r0, [r6, #20]
   2d924:	bic	r0, r1, #786432	; 0xc0000
   2d928:	str	r0, [r6, #24]
   2d92c:	mov	r0, r6
   2d930:	str	r6, [fp, #-80]	; 0xffffffb0
   2d934:	ldr	r1, [sp, #36]	; 0x24
   2d938:	str	r1, [r0]
   2d93c:	ldr	r0, [r7]
   2d940:	ldr	r1, [r0, #24]
   2d944:	orr	r1, r1, #262144	; 0x40000
   2d948:	str	r1, [r0, #24]
   2d94c:	ldr	r0, [r9, #4]
   2d950:	ldr	r1, [r7]
   2d954:	cmp	r0, #0
   2d958:	str	r1, [sp, #36]	; 0x24
   2d95c:	beq	2d96c <__assert_fail@plt+0x1c538>
   2d960:	add	r7, r1, #4
   2d964:	mov	r9, r0
   2d968:	b	2d9ac <__assert_fail@plt+0x1c578>
   2d96c:	mov	r1, #0
   2d970:	mov	r0, r9
   2d974:	ldr	r9, [r9, #8]
   2d978:	cmp	r9, r1
   2d97c:	cmpne	r9, #0
   2d980:	bne	2d9a4 <__assert_fail@plt+0x1c570>
   2d984:	ldr	r1, [sp, #36]	; 0x24
   2d988:	ldr	r9, [r0]
   2d98c:	ldr	r1, [r1]
   2d990:	cmp	r9, #0
   2d994:	str	r1, [sp, #36]	; 0x24
   2d998:	mov	r1, r0
   2d99c:	bne	2d970 <__assert_fail@plt+0x1c53c>
   2d9a0:	b	2da38 <__assert_fail@plt+0x1c604>
   2d9a4:	ldr	r0, [sp, #36]	; 0x24
   2d9a8:	add	r7, r0, #8
   2d9ac:	ldr	r1, [r5]
   2d9b0:	cmp	r1, #31
   2d9b4:	beq	2da04 <__assert_fail@plt+0x1c5d0>
   2d9b8:	ldr	r0, [sp, #60]	; 0x3c
   2d9bc:	ldr	r0, [r0]
   2d9c0:	add	r0, r0, r1, lsl #5
   2d9c4:	add	r3, r1, #1
   2d9c8:	add	r2, r9, #20
   2d9cc:	str	r3, [r5]
   2d9d0:	mvn	r3, #0
   2d9d4:	str	r4, [r0, #4]!
   2d9d8:	str	r4, [r0, #8]
   2d9dc:	str	r4, [r0, #4]
   2d9e0:	ldm	r2, {r1, r2}
   2d9e4:	str	r3, [r0, #28]
   2d9e8:	str	r4, [r0, #16]
   2d9ec:	str	r4, [r0, #12]
   2d9f0:	str	r1, [r0, #20]
   2d9f4:	bic	r1, r2, #786432	; 0xc0000
   2d9f8:	str	r1, [r0, #24]
   2d9fc:	str	r0, [r7]
   2da00:	b	2d934 <__assert_fail@plt+0x1c500>
   2da04:	mov	r0, #996	; 0x3e4
   2da08:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2da0c:	cmp	r0, #0
   2da10:	beq	2db44 <__assert_fail@plt+0x1c710>
   2da14:	ldr	r2, [sp, #60]	; 0x3c
   2da18:	ldr	ip, [sp, #48]	; 0x30
   2da1c:	ldr	lr, [sp, #44]	; 0x2c
   2da20:	ldr	r1, [r2]
   2da24:	str	r1, [r0]
   2da28:	mov	r1, #0
   2da2c:	str	r0, [r2]
   2da30:	str	r1, [r5]
   2da34:	b	2d9c0 <__assert_fail@plt+0x1c58c>
   2da38:	mov	r3, r6
   2da3c:	ldr	r1, [r5]
   2da40:	cmp	r1, #31
   2da44:	beq	2daf0 <__assert_fail@plt+0x1c6bc>
   2da48:	ldr	r0, [sp, #60]	; 0x3c
   2da4c:	ldr	r0, [r0]
   2da50:	add	r2, r1, #1
   2da54:	add	r1, r0, r1, lsl #5
   2da58:	mov	r0, #16
   2da5c:	cmp	r3, #0
   2da60:	str	r2, [r5]
   2da64:	str	r4, [r1, #4]!
   2da68:	str	sl, [r1, #4]
   2da6c:	str	r3, [r1, #8]
   2da70:	str	r4, [r1, #12]
   2da74:	str	r4, [r1, #16]
   2da78:	str	r4, [r1, #20]
   2da7c:	str	r0, [r1, #24]
   2da80:	mvn	r0, #0
   2da84:	str	r1, [sp, #36]	; 0x24
   2da88:	str	r0, [r1, #28]
   2da8c:	str	r1, [sl]
   2da90:	beq	2de00 <__assert_fail@plt+0x1c9cc>
   2da94:	ldr	r1, [sp, #56]	; 0x38
   2da98:	ldr	sl, [sp, #36]	; 0x24
   2da9c:	add	r0, r1, #1
   2daa0:	cmp	r1, r8
   2daa4:	str	sl, [r3]
   2daa8:	bne	2d8d0 <__assert_fail@plt+0x1c49c>
   2daac:	b	2db8c <__assert_fail@plt+0x1c758>
   2dab0:	mov	r0, #996	; 0x3e4
   2dab4:	mov	r6, r3
   2dab8:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2dabc:	cmp	r0, #0
   2dac0:	beq	2db2c <__assert_fail@plt+0x1c6f8>
   2dac4:	ldr	r2, [sp, #60]	; 0x3c
   2dac8:	ldr	r5, [sp, #24]
   2dacc:	ldr	ip, [sp, #48]	; 0x30
   2dad0:	ldr	lr, [sp, #44]	; 0x2c
   2dad4:	mov	r3, r6
   2dad8:	ldr	r1, [r2]
   2dadc:	str	r1, [r0]
   2dae0:	mov	r1, #0
   2dae4:	str	r0, [r2]
   2dae8:	str	r1, [r5]
   2daec:	b	2d8e8 <__assert_fail@plt+0x1c4b4>
   2daf0:	mov	r0, #996	; 0x3e4
   2daf4:	mov	r6, r3
   2daf8:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2dafc:	ldr	lr, [sp, #44]	; 0x2c
   2db00:	ldr	ip, [sp, #48]	; 0x30
   2db04:	cmp	r0, #0
   2db08:	beq	2de00 <__assert_fail@plt+0x1c9cc>
   2db0c:	ldr	r2, [sp, #60]	; 0x3c
   2db10:	mov	r3, r6
   2db14:	ldr	r1, [r2]
   2db18:	str	r1, [r0]
   2db1c:	mov	r1, #0
   2db20:	str	r0, [r2]
   2db24:	str	r1, [r5]
   2db28:	b	2da50 <__assert_fail@plt+0x1c61c>
   2db2c:	ldr	ip, [sp, #48]	; 0x30
   2db30:	ldr	lr, [sp, #44]	; 0x2c
   2db34:	ldr	r5, [sp, #24]
   2db38:	mov	r3, #0
   2db3c:	str	r3, [fp, #-80]	; 0xffffffb0
   2db40:	b	2da3c <__assert_fail@plt+0x1c608>
   2db44:	ldr	ip, [sp, #48]	; 0x30
   2db48:	ldr	lr, [sp, #44]	; 0x2c
   2db4c:	mov	r3, #0
   2db50:	str	r3, [r7]
   2db54:	b	2da3c <__assert_fail@plt+0x1c608>
   2db58:	mov	r0, #996	; 0x3e4
   2db5c:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2db60:	ldr	lr, [sp, #44]	; 0x2c
   2db64:	ldr	ip, [sp, #48]	; 0x30
   2db68:	cmp	r0, #0
   2db6c:	beq	2de00 <__assert_fail@plt+0x1c9cc>
   2db70:	ldr	r2, [sp, #60]	; 0x3c
   2db74:	ldr	r1, [r2]
   2db78:	str	r1, [r0]
   2db7c:	mov	r1, #0
   2db80:	str	r0, [r2]
   2db84:	str	r1, [r5]
   2db88:	b	2d450 <__assert_fail@plt+0x1c01c>
   2db8c:	ldr	sl, [sp, #52]	; 0x34
   2db90:	mov	r0, #0
   2db94:	cmp	r8, sl
   2db98:	bne	2dbf4 <__assert_fail@plt+0x1c7c0>
   2db9c:	ldr	r7, [sp, #36]	; 0x24
   2dba0:	ldr	r5, [sp, #28]
   2dba4:	b	2de38 <__assert_fail@plt+0x1ca04>
   2dba8:	ldr	r0, [sp, #20]
   2dbac:	mov	r1, #10
   2dbb0:	b	2dd68 <__assert_fail@plt+0x1c934>
   2dbb4:	mov	r0, #996	; 0x3e4
   2dbb8:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2dbbc:	cmp	r0, #0
   2dbc0:	beq	2dd8c <__assert_fail@plt+0x1c958>
   2dbc4:	ldr	r2, [sp, #60]	; 0x3c
   2dbc8:	ldr	ip, [sp, #48]	; 0x30
   2dbcc:	ldr	lr, [sp, #44]	; 0x2c
   2dbd0:	ldr	r1, [r2]
   2dbd4:	str	r1, [r0]
   2dbd8:	mov	r1, #0
   2dbdc:	str	r0, [r2]
   2dbe0:	str	r1, [r5]
   2dbe4:	b	2d794 <__assert_fail@plt+0x1c360>
   2dbe8:	ldr	ip, [sp, #48]	; 0x30
   2dbec:	ldr	r9, [sp, #56]	; 0x38
   2dbf0:	b	2d228 <__assert_fail@plt+0x1bdf4>
   2dbf4:	mov	r6, r3
   2dbf8:	ldr	r1, [r5]
   2dbfc:	ldr	r9, [r6], #20
   2dc00:	cmp	r1, #31
   2dc04:	beq	2dda4 <__assert_fail@plt+0x1c970>
   2dc08:	ldr	r0, [sp, #60]	; 0x3c
   2dc0c:	ldr	r0, [r0]
   2dc10:	add	r7, r0, r1, lsl #5
   2dc14:	add	r2, r1, #1
   2dc18:	str	r2, [r5]
   2dc1c:	mvn	r2, #0
   2dc20:	str	r4, [r7, #4]!
   2dc24:	str	r4, [r7, #8]
   2dc28:	str	r4, [r7, #4]
   2dc2c:	ldm	r6, {r0, r1}
   2dc30:	str	r2, [r7, #28]
   2dc34:	str	r4, [r7, #16]
   2dc38:	str	r4, [r7, #12]
   2dc3c:	sub	r6, fp, #80	; 0x50
   2dc40:	str	r0, [r7, #20]
   2dc44:	bic	r0, r1, #786432	; 0xc0000
   2dc48:	str	r0, [r7, #24]
   2dc4c:	mov	r0, r7
   2dc50:	str	r7, [fp, #-80]	; 0xffffffb0
   2dc54:	str	r9, [r0]
   2dc58:	ldr	r0, [r6]
   2dc5c:	ldr	r1, [r0, #24]
   2dc60:	orr	r1, r1, #262144	; 0x40000
   2dc64:	str	r1, [r0, #24]
   2dc68:	ldr	r0, [r3, #4]
   2dc6c:	ldr	r9, [r6]
   2dc70:	cmp	r0, #0
   2dc74:	beq	2dc84 <__assert_fail@plt+0x1c850>
   2dc78:	add	r2, r9, #4
   2dc7c:	mov	r6, r0
   2dc80:	b	2dcb8 <__assert_fail@plt+0x1c884>
   2dc84:	mov	r1, #0
   2dc88:	ldr	r6, [r3, #8]
   2dc8c:	mov	r0, r3
   2dc90:	cmp	r6, r1
   2dc94:	cmpne	r6, #0
   2dc98:	bne	2dcb4 <__assert_fail@plt+0x1c880>
   2dc9c:	ldr	r3, [r0]
   2dca0:	ldr	r9, [r9]
   2dca4:	mov	r1, r0
   2dca8:	cmp	r3, #0
   2dcac:	bne	2dc88 <__assert_fail@plt+0x1c854>
   2dcb0:	b	2d3b4 <__assert_fail@plt+0x1bf80>
   2dcb4:	add	r2, r9, #8
   2dcb8:	ldr	r1, [r5]
   2dcbc:	str	r2, [sp, #56]	; 0x38
   2dcc0:	cmp	r1, #31
   2dcc4:	beq	2dd1c <__assert_fail@plt+0x1c8e8>
   2dcc8:	ldr	r0, [sp, #60]	; 0x3c
   2dccc:	ldr	r0, [r0]
   2dcd0:	add	r0, r0, r1, lsl #5
   2dcd4:	add	r3, r1, #1
   2dcd8:	add	r2, r6, #20
   2dcdc:	str	r3, [r5]
   2dce0:	mvn	r3, #0
   2dce4:	str	r4, [r0, #4]!
   2dce8:	str	r4, [r0, #8]
   2dcec:	str	r4, [r0, #4]
   2dcf0:	ldm	r2, {r1, r2}
   2dcf4:	str	r3, [r0, #28]
   2dcf8:	mov	r3, r6
   2dcfc:	ldr	r6, [sp, #56]	; 0x38
   2dd00:	str	r4, [r0, #16]
   2dd04:	str	r4, [r0, #12]
   2dd08:	str	r1, [r0, #20]
   2dd0c:	bic	r1, r2, #786432	; 0xc0000
   2dd10:	str	r1, [r0, #24]
   2dd14:	str	r0, [r6]
   2dd18:	b	2dc54 <__assert_fail@plt+0x1c820>
   2dd1c:	mov	r0, #996	; 0x3e4
   2dd20:	str	r6, [sp, #12]
   2dd24:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2dd28:	cmp	r0, #0
   2dd2c:	beq	2ddf0 <__assert_fail@plt+0x1c9bc>
   2dd30:	ldr	r2, [sp, #60]	; 0x3c
   2dd34:	ldr	r5, [sp, #24]
   2dd38:	ldr	ip, [sp, #48]	; 0x30
   2dd3c:	ldr	lr, [sp, #44]	; 0x2c
   2dd40:	ldr	sl, [sp, #52]	; 0x34
   2dd44:	ldr	r6, [sp, #12]
   2dd48:	ldr	r1, [r2]
   2dd4c:	str	r1, [r0]
   2dd50:	mov	r1, #0
   2dd54:	str	r0, [r2]
   2dd58:	str	r1, [r5]
   2dd5c:	b	2dcd0 <__assert_fail@plt+0x1c89c>
   2dd60:	ldr	r0, [sp, #20]
   2dd64:	mov	r1, #15
   2dd68:	str	r1, [r0]
   2dd6c:	mov	r7, #0
   2dd70:	b	2de18 <__assert_fail@plt+0x1c9e4>
   2dd74:	ldr	r1, [sp, #20]
   2dd78:	cmp	r0, #2
   2dd7c:	mov	r0, #10
   2dd80:	movweq	r0, #9
   2dd84:	str	r0, [r1]
   2dd88:	b	2d1f8 <__assert_fail@plt+0x1bdc4>
   2dd8c:	ldr	ip, [sp, #48]	; 0x30
   2dd90:	ldr	lr, [sp, #44]	; 0x2c
   2dd94:	ldr	r9, [sp, #40]	; 0x28
   2dd98:	mov	r7, #0
   2dd9c:	mov	r5, r8
   2dda0:	b	2de18 <__assert_fail@plt+0x1c9e4>
   2dda4:	mov	r0, #996	; 0x3e4
   2dda8:	mov	r7, r3
   2ddac:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2ddb0:	cmp	r0, #0
   2ddb4:	beq	2dde8 <__assert_fail@plt+0x1c9b4>
   2ddb8:	ldr	r2, [sp, #60]	; 0x3c
   2ddbc:	ldr	r5, [sp, #24]
   2ddc0:	ldr	ip, [sp, #48]	; 0x30
   2ddc4:	ldr	lr, [sp, #44]	; 0x2c
   2ddc8:	ldr	sl, [sp, #52]	; 0x34
   2ddcc:	mov	r3, r7
   2ddd0:	ldr	r1, [r2]
   2ddd4:	str	r1, [r0]
   2ddd8:	mov	r1, #0
   2dddc:	str	r0, [r2]
   2dde0:	str	r1, [r5]
   2dde4:	b	2dc10 <__assert_fail@plt+0x1c7dc>
   2dde8:	str	r4, [fp, #-80]	; 0xffffffb0
   2ddec:	b	2ddf8 <__assert_fail@plt+0x1c9c4>
   2ddf0:	ldr	r0, [sp, #56]	; 0x38
   2ddf4:	str	r4, [r0]
   2ddf8:	ldr	ip, [sp, #48]	; 0x30
   2ddfc:	ldr	lr, [sp, #44]	; 0x2c
   2de00:	ldr	r0, [sp, #20]
   2de04:	ldr	r5, [sp, #28]
   2de08:	ldr	r9, [sp, #40]	; 0x28
   2de0c:	mov	r1, #12
   2de10:	mov	r7, #0
   2de14:	str	r1, [r0]
   2de18:	clz	r0, r7
   2de1c:	cmp	r7, #0
   2de20:	lsr	r0, r0, #5
   2de24:	bne	2de38 <__assert_fail@plt+0x1ca04>
   2de28:	ldr	r1, [sp, #20]
   2de2c:	ldr	r1, [r1]
   2de30:	cmp	r1, #0
   2de34:	bne	2df14 <__assert_fail@plt+0x1cae0>
   2de38:	ldr	r1, [sp, #32]
   2de3c:	cmp	r1, #0
   2de40:	beq	2d0d8 <__assert_fail@plt+0x1bca4>
   2de44:	ldrb	r1, [lr, #4]
   2de48:	cmp	r1, #23
   2de4c:	cmpne	r1, #11
   2de50:	bne	2d0d8 <__assert_fail@plt+0x1bca4>
   2de54:	movw	r6, #255	; 0xff
   2de58:	cmp	r0, #0
   2de5c:	movt	r6, #4
   2de60:	bne	2def8 <__assert_fail@plt+0x1cac4>
   2de64:	mov	r5, r7
   2de68:	ldr	r7, [r7, #4]
   2de6c:	cmp	r7, #0
   2de70:	bne	2de64 <__assert_fail@plt+0x1ca30>
   2de74:	ldr	r7, [r5, #8]
   2de78:	cmp	r7, #0
   2de7c:	bne	2de64 <__assert_fail@plt+0x1ca30>
   2de80:	ldr	r0, [r5, #24]
   2de84:	and	r0, r0, r6
   2de88:	cmp	r0, #3
   2de8c:	beq	2dec0 <__assert_fail@plt+0x1ca8c>
   2de90:	cmp	r0, #6
   2de94:	bne	2decc <__assert_fail@plt+0x1ca98>
   2de98:	ldr	r4, [r5, #20]
   2de9c:	ldr	r0, [r4]
   2dea0:	bl	138e8 <__assert_fail@plt+0x24b4>
   2dea4:	ldr	r0, [r4, #4]
   2dea8:	bl	138e8 <__assert_fail@plt+0x24b4>
   2deac:	ldr	r0, [r4, #8]
   2deb0:	bl	138e8 <__assert_fail@plt+0x24b4>
   2deb4:	ldr	r0, [r4, #12]
   2deb8:	bl	138e8 <__assert_fail@plt+0x24b4>
   2debc:	b	2dec4 <__assert_fail@plt+0x1ca90>
   2dec0:	ldr	r4, [r5, #20]
   2dec4:	mov	r0, r4
   2dec8:	bl	138e8 <__assert_fail@plt+0x24b4>
   2decc:	ldr	r0, [r5]
   2ded0:	cmp	r0, #0
   2ded4:	beq	2def8 <__assert_fail@plt+0x1cac4>
   2ded8:	ldr	r7, [r0, #8]
   2dedc:	cmp	r7, r5
   2dee0:	mov	r5, r0
   2dee4:	beq	2de80 <__assert_fail@plt+0x1ca4c>
   2dee8:	cmp	r7, #0
   2deec:	mov	r5, r0
   2def0:	beq	2de80 <__assert_fail@plt+0x1ca4c>
   2def4:	b	2de64 <__assert_fail@plt+0x1ca30>
   2def8:	mov	r0, #13
   2defc:	ldr	r1, [sp, #20]
   2df00:	mov	r9, #0
   2df04:	str	r0, [r1]
   2df08:	mov	r0, r9
   2df0c:	sub	sp, fp, #28
   2df10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2df14:	cmp	r9, #0
   2df18:	beq	2c644 <__assert_fail@plt+0x1b210>
   2df1c:	movw	r6, #255	; 0xff
   2df20:	movt	r6, #4
   2df24:	mov	r5, r9
   2df28:	ldr	r9, [r9, #4]
   2df2c:	cmp	r9, #0
   2df30:	bne	2df24 <__assert_fail@plt+0x1caf0>
   2df34:	ldr	r9, [r5, #8]
   2df38:	cmp	r9, #0
   2df3c:	bne	2df24 <__assert_fail@plt+0x1caf0>
   2df40:	ldr	r0, [r5, #24]
   2df44:	and	r0, r0, r6
   2df48:	cmp	r0, #3
   2df4c:	beq	2df80 <__assert_fail@plt+0x1cb4c>
   2df50:	cmp	r0, #6
   2df54:	bne	2df8c <__assert_fail@plt+0x1cb58>
   2df58:	ldr	r4, [r5, #20]
   2df5c:	ldr	r0, [r4]
   2df60:	bl	138e8 <__assert_fail@plt+0x24b4>
   2df64:	ldr	r0, [r4, #4]
   2df68:	bl	138e8 <__assert_fail@plt+0x24b4>
   2df6c:	ldr	r0, [r4, #8]
   2df70:	bl	138e8 <__assert_fail@plt+0x24b4>
   2df74:	ldr	r0, [r4, #12]
   2df78:	bl	138e8 <__assert_fail@plt+0x24b4>
   2df7c:	b	2df84 <__assert_fail@plt+0x1cb50>
   2df80:	ldr	r4, [r5, #20]
   2df84:	mov	r0, r4
   2df88:	bl	138e8 <__assert_fail@plt+0x24b4>
   2df8c:	ldr	r0, [r5]
   2df90:	cmp	r0, #0
   2df94:	beq	2c644 <__assert_fail@plt+0x1b210>
   2df98:	ldr	r9, [r0, #8]
   2df9c:	cmp	r9, r5
   2dfa0:	mov	r5, r0
   2dfa4:	beq	2df40 <__assert_fail@plt+0x1cb0c>
   2dfa8:	cmp	r9, #0
   2dfac:	mov	r5, r0
   2dfb0:	beq	2df40 <__assert_fail@plt+0x1cb0c>
   2dfb4:	b	2df24 <__assert_fail@plt+0x1caf0>
   2dfb8:	cmp	r0, #2
   2dfbc:	blt	2dfd8 <__assert_fail@plt+0x1cba4>
   2dfc0:	ldr	r0, [r7, #36]	; 0x24
   2dfc4:	cmp	r0, #0
   2dfc8:	bne	2cd3c <__assert_fail@plt+0x1b908>
   2dfcc:	ldrb	r0, [r7, #16]
   2dfd0:	tst	r0, #1
   2dfd4:	bne	2cd3c <__assert_fail@plt+0x1b908>
   2dfd8:	ldr	r0, [r7]
   2dfdc:	bl	138e8 <__assert_fail@plt+0x24b4>
   2dfe0:	ldr	r0, [r7, #4]
   2dfe4:	bl	138e8 <__assert_fail@plt+0x24b4>
   2dfe8:	ldr	r0, [r7, #8]
   2dfec:	bl	138e8 <__assert_fail@plt+0x24b4>
   2dff0:	ldr	r0, [r7, #12]
   2dff4:	bl	138e8 <__assert_fail@plt+0x24b4>
   2dff8:	mov	r0, r7
   2dffc:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e000:	ldr	r1, [sl, #64]	; 0x40
   2e004:	cmp	r1, #31
   2e008:	beq	2e544 <__assert_fail@plt+0x1d110>
   2e00c:	ldr	r0, [sl, #56]	; 0x38
   2e010:	add	r0, r0, r1, lsl #5
   2e014:	add	r2, r1, #1
   2e018:	vmov.i32	q8, #0	; 0x00000000
   2e01c:	ldr	ip, [sp, #48]	; 0x30
   2e020:	ldr	lr, [sp, #44]	; 0x2c
   2e024:	mov	r1, #3
   2e028:	str	r2, [sl, #64]	; 0x40
   2e02c:	mov	r2, #0
   2e030:	add	r7, r0, #4
   2e034:	str	r2, [r0, #20]
   2e038:	str	r8, [r0, #24]
   2e03c:	str	r1, [r0, #28]
   2e040:	mov	r0, #28
   2e044:	mov	r1, r7
   2e048:	vst1.32	{d16-d17}, [r1], r0
   2e04c:	mvn	r0, #0
   2e050:	str	r0, [r1]
   2e054:	b	2d090 <__assert_fail@plt+0x1bc5c>
   2e058:	ldr	r8, [sp, #24]
   2e05c:	ldr	r0, [sp, #20]
   2e060:	ldr	r5, [sp, #28]
   2e064:	ldr	sl, [sp, #52]	; 0x34
   2e068:	ldr	r7, [sp, #60]	; 0x3c
   2e06c:	str	r9, [r0]
   2e070:	ldr	r4, [sp, #20]
   2e074:	mov	r0, r8
   2e078:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e07c:	ldr	r0, [r7]
   2e080:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e084:	ldr	r0, [r7, #4]
   2e088:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e08c:	ldr	r0, [r7, #8]
   2e090:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e094:	ldr	r0, [r7, #12]
   2e098:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e09c:	mov	r0, r7
   2e0a0:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e0a4:	ldr	r0, [r4]
   2e0a8:	mov	r7, #0
   2e0ac:	mov	r9, #0
   2e0b0:	b	2c1d4 <__assert_fail@plt+0x1ada0>
   2e0b4:	mov	r0, #996	; 0x3e4
   2e0b8:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2e0bc:	cmp	r0, #0
   2e0c0:	beq	2e3b0 <__assert_fail@plt+0x1cf7c>
   2e0c4:	ldr	r1, [sl, #56]	; 0x38
   2e0c8:	ldr	r5, [sp, #28]
   2e0cc:	ldr	ip, [sp, #48]	; 0x30
   2e0d0:	ldr	lr, [sp, #44]	; 0x2c
   2e0d4:	str	r1, [r0]
   2e0d8:	mov	r1, #0
   2e0dc:	str	r1, [sl, #64]	; 0x40
   2e0e0:	str	r0, [sl, #56]	; 0x38
   2e0e4:	b	2c12c <__assert_fail@plt+0x1acf8>
   2e0e8:	mov	r9, r0
   2e0ec:	str	sl, [sp, #52]	; 0x34
   2e0f0:	b	2e05c <__assert_fail@plt+0x1cc28>
   2e0f4:	mov	r9, #7
   2e0f8:	str	sl, [sp, #52]	; 0x34
   2e0fc:	b	2e05c <__assert_fail@plt+0x1cc28>
   2e100:	ldr	r4, [sp, #20]
   2e104:	ldr	r7, [sp, #60]	; 0x3c
   2e108:	mov	r0, #2
   2e10c:	str	r0, [r4]
   2e110:	b	2e074 <__assert_fail@plt+0x1cc40>
   2e114:	mov	r0, r8
   2e118:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e11c:	mov	r0, r7
   2e120:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e124:	b	2cf90 <__assert_fail@plt+0x1bb5c>
   2e128:	mov	r0, #996	; 0x3e4
   2e12c:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2e130:	cmp	r0, #0
   2e134:	beq	2e3b0 <__assert_fail@plt+0x1cf7c>
   2e138:	ldr	r1, [sl, #56]	; 0x38
   2e13c:	ldr	r5, [sp, #28]
   2e140:	ldr	ip, [sp, #48]	; 0x30
   2e144:	ldr	lr, [sp, #44]	; 0x2c
   2e148:	str	r1, [r0]
   2e14c:	mov	r1, #0
   2e150:	str	r1, [sl, #64]	; 0x40
   2e154:	str	r0, [sl, #56]	; 0x38
   2e158:	b	2c338 <__assert_fail@plt+0x1af04>
   2e15c:	mov	r0, #6
   2e160:	b	2cf94 <__assert_fail@plt+0x1bb60>
   2e164:	mov	r0, #996	; 0x3e4
   2e168:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2e16c:	cmp	r0, #0
   2e170:	beq	2e3b0 <__assert_fail@plt+0x1cf7c>
   2e174:	ldr	r1, [sl, #56]	; 0x38
   2e178:	ldr	r5, [sp, #28]
   2e17c:	ldr	ip, [sp, #48]	; 0x30
   2e180:	ldr	lr, [sp, #44]	; 0x2c
   2e184:	str	r1, [r0]
   2e188:	mov	r1, #0
   2e18c:	str	r1, [sl, #64]	; 0x40
   2e190:	str	r0, [sl, #56]	; 0x38
   2e194:	b	2c578 <__assert_fail@plt+0x1b144>
   2e198:	mov	r0, #996	; 0x3e4
   2e19c:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2e1a0:	cmp	r0, #0
   2e1a4:	beq	2e3b0 <__assert_fail@plt+0x1cf7c>
   2e1a8:	ldr	r1, [sl, #56]	; 0x38
   2e1ac:	ldr	r5, [sp, #28]
   2e1b0:	ldr	ip, [sp, #48]	; 0x30
   2e1b4:	ldr	lr, [sp, #44]	; 0x2c
   2e1b8:	str	r1, [r0]
   2e1bc:	mov	r1, #0
   2e1c0:	str	r1, [sl, #64]	; 0x40
   2e1c4:	str	r0, [sl, #56]	; 0x38
   2e1c8:	b	2c51c <__assert_fail@plt+0x1b0e8>
   2e1cc:	mov	r0, #996	; 0x3e4
   2e1d0:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2e1d4:	cmp	r0, #0
   2e1d8:	beq	2e574 <__assert_fail@plt+0x1d140>
   2e1dc:	ldr	r1, [sl, #56]	; 0x38
   2e1e0:	ldr	ip, [sp, #48]	; 0x30
   2e1e4:	ldr	lr, [sp, #44]	; 0x2c
   2e1e8:	str	r1, [r0]
   2e1ec:	mov	r1, #0
   2e1f0:	str	r1, [sl, #64]	; 0x40
   2e1f4:	str	r0, [sl, #56]	; 0x38
   2e1f8:	b	2cd58 <__assert_fail@plt+0x1b924>
   2e1fc:	mov	r0, #996	; 0x3e4
   2e200:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2e204:	cmp	r0, #0
   2e208:	beq	2e574 <__assert_fail@plt+0x1d140>
   2e20c:	ldr	r1, [sl, #56]	; 0x38
   2e210:	ldr	ip, [sp, #48]	; 0x30
   2e214:	ldr	lr, [sp, #44]	; 0x2c
   2e218:	str	r1, [r0]
   2e21c:	mov	r1, #0
   2e220:	str	r1, [sl, #64]	; 0x40
   2e224:	str	r0, [sl, #56]	; 0x38
   2e228:	b	2ce04 <__assert_fail@plt+0x1b9d0>
   2e22c:	mov	r0, #996	; 0x3e4
   2e230:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2e234:	cmp	r0, #0
   2e238:	beq	2e574 <__assert_fail@plt+0x1d140>
   2e23c:	ldr	r1, [sl, #56]	; 0x38
   2e240:	ldr	ip, [sp, #48]	; 0x30
   2e244:	ldr	lr, [sp, #44]	; 0x2c
   2e248:	str	r1, [r0]
   2e24c:	mov	r1, #0
   2e250:	str	r1, [sl, #64]	; 0x40
   2e254:	str	r0, [sl, #56]	; 0x38
   2e258:	b	2ce50 <__assert_fail@plt+0x1ba1c>
   2e25c:	str	sl, [sp, #52]	; 0x34
   2e260:	mov	r9, #3
   2e264:	b	2e05c <__assert_fail@plt+0x1cc28>
   2e268:	mov	r0, r8
   2e26c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e270:	ldr	lr, [sp, #44]	; 0x2c
   2e274:	ldr	ip, [sp, #48]	; 0x30
   2e278:	mov	r7, r4
   2e27c:	b	2d090 <__assert_fail@plt+0x1bc5c>
   2e280:	mov	r0, #996	; 0x3e4
   2e284:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2e288:	cmp	r0, #0
   2e28c:	beq	2e3b0 <__assert_fail@plt+0x1cf7c>
   2e290:	ldr	r1, [sl, #56]	; 0x38
   2e294:	ldr	r5, [sp, #28]
   2e298:	ldr	ip, [sp, #48]	; 0x30
   2e29c:	ldr	lr, [sp, #44]	; 0x2c
   2e2a0:	str	r1, [r0]
   2e2a4:	mov	r1, #0
   2e2a8:	str	r1, [sl, #64]	; 0x40
   2e2ac:	str	r0, [sl, #56]	; 0x38
   2e2b0:	b	2d04c <__assert_fail@plt+0x1bc18>
   2e2b4:	mov	r0, #996	; 0x3e4
   2e2b8:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2e2bc:	cmp	r0, #0
   2e2c0:	beq	2e44c <__assert_fail@plt+0x1d018>
   2e2c4:	ldr	r1, [sl, #56]	; 0x38
   2e2c8:	ldr	ip, [sp, #48]	; 0x30
   2e2cc:	ldr	lr, [sp, #44]	; 0x2c
   2e2d0:	mov	r9, #0
   2e2d4:	str	r1, [r0]
   2e2d8:	mov	r1, #0
   2e2dc:	str	r1, [sl, #64]	; 0x40
   2e2e0:	str	r0, [sl, #56]	; 0x38
   2e2e4:	b	2cefc <__assert_fail@plt+0x1bac8>
   2e2e8:	mov	r0, #996	; 0x3e4
   2e2ec:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2e2f0:	ldr	lr, [sp, #44]	; 0x2c
   2e2f4:	ldr	ip, [sp, #48]	; 0x30
   2e2f8:	cmp	r0, #0
   2e2fc:	beq	2cf90 <__assert_fail@plt+0x1bb5c>
   2e300:	ldr	r1, [sl, #56]	; 0x38
   2e304:	str	r1, [r0]
   2e308:	mov	r1, #0
   2e30c:	str	r1, [sl, #64]	; 0x40
   2e310:	str	r0, [sl, #56]	; 0x38
   2e314:	b	2cf48 <__assert_fail@plt+0x1bb14>
   2e318:	mov	r0, #996	; 0x3e4
   2e31c:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2e320:	cmp	r0, #0
   2e324:	beq	2e520 <__assert_fail@plt+0x1d0ec>
   2e328:	ldr	r1, [sl, #56]	; 0x38
   2e32c:	ldr	ip, [sp, #48]	; 0x30
   2e330:	ldr	lr, [sp, #44]	; 0x2c
   2e334:	mov	r9, #0
   2e338:	str	r1, [r0]
   2e33c:	mov	r1, #0
   2e340:	str	r1, [sl, #64]	; 0x40
   2e344:	str	r0, [sl, #56]	; 0x38
   2e348:	b	2c270 <__assert_fail@plt+0x1ae3c>
   2e34c:	mov	r0, #996	; 0x3e4
   2e350:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2e354:	cmp	r0, #0
   2e358:	beq	2e52c <__assert_fail@plt+0x1d0f8>
   2e35c:	ldr	r1, [sl, #56]	; 0x38
   2e360:	ldr	ip, [sp, #48]	; 0x30
   2e364:	ldr	lr, [sp, #44]	; 0x2c
   2e368:	mov	r9, #0
   2e36c:	str	r1, [r0]
   2e370:	mov	r1, #0
   2e374:	str	r1, [sl, #64]	; 0x40
   2e378:	str	r0, [sl, #56]	; 0x38
   2e37c:	b	2cea8 <__assert_fail@plt+0x1ba74>
   2e380:	mov	r0, #996	; 0x3e4
   2e384:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2e388:	cmp	r0, #0
   2e38c:	beq	2e3b0 <__assert_fail@plt+0x1cf7c>
   2e390:	ldr	r1, [sl, #56]	; 0x38
   2e394:	ldr	ip, [sp, #48]	; 0x30
   2e398:	ldr	lr, [sp, #44]	; 0x2c
   2e39c:	str	r1, [r0]
   2e3a0:	mov	r1, #0
   2e3a4:	str	r1, [sl, #64]	; 0x40
   2e3a8:	str	r0, [sl, #56]	; 0x38
   2e3ac:	b	2cfac <__assert_fail@plt+0x1bb78>
   2e3b0:	mov	r0, #12
   2e3b4:	b	2defc <__assert_fail@plt+0x1cac8>
   2e3b8:	mov	r4, #0
   2e3bc:	mov	r5, #0
   2e3c0:	b	2e3cc <__assert_fail@plt+0x1cf98>
   2e3c4:	mov	r5, #4
   2e3c8:	mov	r4, #128	; 0x80
   2e3cc:	bl	11308 <__ctype_b_loc@plt>
   2e3d0:	ldr	r0, [r0]
   2e3d4:	ldr	ip, [sp, #48]	; 0x30
   2e3d8:	ldr	lr, [sp, #44]	; 0x2c
   2e3dc:	mov	r1, #1
   2e3e0:	mov	r9, #0
   2e3e4:	add	r7, r0, r4, lsl #1
   2e3e8:	b	2e400 <__assert_fail@plt+0x1cfcc>
   2e3ec:	add	r5, r5, #1
   2e3f0:	add	r7, r7, #64	; 0x40
   2e3f4:	add	r4, r4, #32
   2e3f8:	cmp	r5, #8
   2e3fc:	beq	2c244 <__assert_fail@plt+0x1ae10>
   2e400:	add	r0, sl, r5, lsl #2
   2e404:	mov	r3, #0
   2e408:	add	r2, r0, #96	; 0x60
   2e40c:	mov	r0, r7
   2e410:	b	2e430 <__assert_fail@plt+0x1cffc>
   2e414:	ldr	r6, [r2]
   2e418:	orr	r6, r6, r1, lsl r3
   2e41c:	str	r6, [r2]
   2e420:	add	r3, r3, #1
   2e424:	add	r0, r0, #2
   2e428:	cmp	r3, #32
   2e42c:	beq	2e3ec <__assert_fail@plt+0x1cfb8>
   2e430:	add	r6, r4, r3
   2e434:	cmp	r6, #95	; 0x5f
   2e438:	beq	2e414 <__assert_fail@plt+0x1cfe0>
   2e43c:	ldrh	r6, [r0]
   2e440:	ands	r6, r6, #8
   2e444:	beq	2e420 <__assert_fail@plt+0x1cfec>
   2e448:	b	2e414 <__assert_fail@plt+0x1cfe0>
   2e44c:	ldr	ip, [sp, #48]	; 0x30
   2e450:	ldr	lr, [sp, #44]	; 0x2c
   2e454:	mov	r5, #0
   2e458:	mov	r9, #0
   2e45c:	b	2cf38 <__assert_fail@plt+0x1bb04>
   2e460:	cmp	r9, #0
   2e464:	beq	2e504 <__assert_fail@plt+0x1d0d0>
   2e468:	movw	r5, #255	; 0xff
   2e46c:	movt	r5, #4
   2e470:	mov	r6, r9
   2e474:	ldr	r9, [r9, #4]
   2e478:	cmp	r9, #0
   2e47c:	bne	2e470 <__assert_fail@plt+0x1d03c>
   2e480:	ldr	r9, [r6, #8]
   2e484:	cmp	r9, #0
   2e488:	bne	2e470 <__assert_fail@plt+0x1d03c>
   2e48c:	ldr	r0, [r6, #24]
   2e490:	and	r0, r0, r5
   2e494:	cmp	r0, #3
   2e498:	beq	2e4cc <__assert_fail@plt+0x1d098>
   2e49c:	cmp	r0, #6
   2e4a0:	bne	2e4d8 <__assert_fail@plt+0x1d0a4>
   2e4a4:	ldr	r4, [r6, #20]
   2e4a8:	ldr	r0, [r4]
   2e4ac:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e4b0:	ldr	r0, [r4, #4]
   2e4b4:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e4b8:	ldr	r0, [r4, #8]
   2e4bc:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e4c0:	ldr	r0, [r4, #12]
   2e4c4:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e4c8:	b	2e4d0 <__assert_fail@plt+0x1d09c>
   2e4cc:	ldr	r4, [r6, #20]
   2e4d0:	mov	r0, r4
   2e4d4:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e4d8:	ldr	r0, [r6]
   2e4dc:	cmp	r0, #0
   2e4e0:	beq	2e504 <__assert_fail@plt+0x1d0d0>
   2e4e4:	ldr	r9, [r0, #8]
   2e4e8:	cmp	r9, r6
   2e4ec:	mov	r6, r0
   2e4f0:	beq	2e48c <__assert_fail@plt+0x1d058>
   2e4f4:	cmp	r9, #0
   2e4f8:	mov	r6, r0
   2e4fc:	beq	2e48c <__assert_fail@plt+0x1d058>
   2e500:	b	2e470 <__assert_fail@plt+0x1d03c>
   2e504:	mov	r0, #8
   2e508:	b	2defc <__assert_fail@plt+0x1cac8>
   2e50c:	ldr	r8, [sp, #24]
   2e510:	mov	r9, r0
   2e514:	b	2e05c <__assert_fail@plt+0x1cc28>
   2e518:	ldr	r8, [sp, #24]
   2e51c:	b	2e260 <__assert_fail@plt+0x1ce2c>
   2e520:	mov	r4, #0
   2e524:	mov	r0, #9
   2e528:	b	2e534 <__assert_fail@plt+0x1d100>
   2e52c:	mov	r4, #0
   2e530:	mov	r0, #10
   2e534:	ldr	ip, [sp, #48]	; 0x30
   2e538:	ldr	lr, [sp, #44]	; 0x2c
   2e53c:	mov	r9, #0
   2e540:	b	2cee8 <__assert_fail@plt+0x1bab4>
   2e544:	mov	r0, #996	; 0x3e4
   2e548:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2e54c:	cmp	r0, #0
   2e550:	beq	2e574 <__assert_fail@plt+0x1d140>
   2e554:	ldr	r1, [sl, #56]	; 0x38
   2e558:	str	r1, [r0]
   2e55c:	mov	r1, #0
   2e560:	str	r1, [sl, #64]	; 0x40
   2e564:	str	r0, [sl, #56]	; 0x38
   2e568:	b	2e010 <__assert_fail@plt+0x1cbdc>
   2e56c:	ldr	r5, [sp, #28]
   2e570:	ldr	r7, [sp, #60]	; 0x3c
   2e574:	ldr	r4, [sp, #20]
   2e578:	mov	r0, #12
   2e57c:	str	r0, [r4]
   2e580:	b	2e074 <__assert_fail@plt+0x1cc40>
   2e584:	mov	r0, r6
   2e588:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e58c:	mov	r0, r9
   2e590:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e594:	ldr	r8, [sp, #24]
   2e598:	mov	r9, #12
   2e59c:	b	2e05c <__assert_fail@plt+0x1cc28>
   2e5a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e5a4:	add	fp, sp, #28
   2e5a8:	sub	sp, sp, #12
   2e5ac:	mov	r9, r1
   2e5b0:	mov	r6, r0
   2e5b4:	mov	r4, #0
   2e5b8:	mov	r0, #32
   2e5bc:	mov	r1, #1
   2e5c0:	mov	sl, r3
   2e5c4:	mov	r5, r2
   2e5c8:	str	r4, [sp, #8]
   2e5cc:	bl	37f9c <__assert_fail@plt+0x26b68>
   2e5d0:	ldr	r1, [fp, #12]
   2e5d4:	cmp	r0, #0
   2e5d8:	beq	2e928 <__assert_fail@plt+0x1d4f4>
   2e5dc:	mov	r7, r0
   2e5e0:	mov	r0, #40	; 0x28
   2e5e4:	mov	r1, #1
   2e5e8:	bl	37f9c <__assert_fail@plt+0x26b68>
   2e5ec:	cmp	r0, #0
   2e5f0:	beq	2e848 <__assert_fail@plt+0x1d414>
   2e5f4:	mov	r8, r0
   2e5f8:	ldrb	r0, [r0, #16]
   2e5fc:	ldr	r1, [fp, #8]
   2e600:	mov	r4, #0
   2e604:	add	r3, sp, #8
   2e608:	str	r5, [sp]
   2e60c:	mov	r2, r8
   2e610:	str	r4, [sp, #4]
   2e614:	and	r0, r0, #254	; 0xfe
   2e618:	orr	r0, r0, r1
   2e61c:	mov	r1, r7
   2e620:	strb	r0, [r8, #16]
   2e624:	mov	r0, r9
   2e628:	bl	2eda0 <__assert_fail@plt+0x1d96c>
   2e62c:	cmp	r0, #0
   2e630:	bne	2e864 <__assert_fail@plt+0x1d430>
   2e634:	ldrb	r0, [sl]
   2e638:	cmp	r0, #0
   2e63c:	beq	2e668 <__assert_fail@plt+0x1d234>
   2e640:	add	r1, sl, #1
   2e644:	mov	r2, #1
   2e648:	ubfx	r3, r0, #5, #3
   2e64c:	and	r0, r0, #31
   2e650:	ldr	r5, [r7, r3, lsl #2]
   2e654:	orr	r0, r5, r2, lsl r0
   2e658:	str	r0, [r7, r3, lsl #2]
   2e65c:	ldrb	r0, [r1], #1
   2e660:	cmp	r0, #0
   2e664:	bne	2e648 <__assert_fail@plt+0x1d214>
   2e668:	ldr	r0, [fp, #8]
   2e66c:	cmp	r0, #0
   2e670:	beq	2e690 <__assert_fail@plt+0x1d25c>
   2e674:	vld1.32	{d16-d17}, [r7]
   2e678:	mov	r0, r7
   2e67c:	vmvn	q8, q8
   2e680:	vst1.32	{d16-d17}, [r0]!
   2e684:	vld1.32	{d16-d17}, [r0]
   2e688:	vmvn	q8, q8
   2e68c:	vst1.32	{d16-d17}, [r0]
   2e690:	ldr	r0, [r6, #92]	; 0x5c
   2e694:	cmp	r0, #2
   2e698:	blt	2e714 <__assert_fail@plt+0x1d2e0>
   2e69c:	ldr	r5, [r6, #60]	; 0x3c
   2e6a0:	ldm	r7, {r0, r1, r2, ip}
   2e6a4:	ldr	r3, [r5]
   2e6a8:	and	r0, r0, r3
   2e6ac:	str	r0, [r7]
   2e6b0:	ldr	r0, [r5, #4]
   2e6b4:	and	r0, r1, r0
   2e6b8:	str	r0, [r7, #4]
   2e6bc:	ldr	r0, [r5, #8]
   2e6c0:	and	r0, r2, r0
   2e6c4:	str	r0, [r7, #8]
   2e6c8:	ldr	r0, [r5, #12]
   2e6cc:	and	r0, ip, r0
   2e6d0:	str	r0, [r7, #12]
   2e6d4:	ldr	r0, [r7, #16]
   2e6d8:	ldr	r1, [r5, #16]
   2e6dc:	and	r0, r0, r1
   2e6e0:	str	r0, [r7, #16]
   2e6e4:	ldr	r0, [r5, #20]
   2e6e8:	ldr	r1, [r7, #20]
   2e6ec:	and	r0, r1, r0
   2e6f0:	str	r0, [r7, #20]
   2e6f4:	ldr	r0, [r5, #24]
   2e6f8:	ldr	r1, [r7, #24]
   2e6fc:	and	r0, r1, r0
   2e700:	str	r0, [r7, #24]
   2e704:	ldr	r0, [r5, #28]
   2e708:	ldr	r1, [r7, #28]
   2e70c:	and	r0, r1, r0
   2e710:	str	r0, [r7, #28]
   2e714:	ldr	r1, [r6, #64]	; 0x40
   2e718:	cmp	r1, #31
   2e71c:	beq	2e8a4 <__assert_fail@plt+0x1d470>
   2e720:	ldr	r0, [r6, #56]	; 0x38
   2e724:	add	r0, r0, r1, lsl #5
   2e728:	add	r2, r1, #1
   2e72c:	vmov.i32	q8, #0	; 0x00000000
   2e730:	mov	r1, #3
   2e734:	str	r2, [r6, #64]	; 0x40
   2e738:	mov	r2, #0
   2e73c:	add	r5, r0, #4
   2e740:	str	r2, [r0, #20]
   2e744:	str	r7, [r0, #24]
   2e748:	str	r1, [r0, #28]
   2e74c:	mov	r0, #28
   2e750:	mov	r1, r5
   2e754:	vst1.32	{d16-d17}, [r1], r0
   2e758:	mvn	r0, #0
   2e75c:	str	r0, [r1]
   2e760:	ldr	r0, [r6, #92]	; 0x5c
   2e764:	cmp	r0, #2
   2e768:	blt	2e810 <__assert_fail@plt+0x1d3dc>
   2e76c:	ldrb	r0, [r6, #88]	; 0x58
   2e770:	orr	r0, r0, #2
   2e774:	strb	r0, [r6, #88]	; 0x58
   2e778:	ldr	r1, [r6, #64]	; 0x40
   2e77c:	cmp	r1, #31
   2e780:	beq	2e8cc <__assert_fail@plt+0x1d498>
   2e784:	ldr	r0, [r6, #56]	; 0x38
   2e788:	add	r0, r0, r1, lsl #5
   2e78c:	vmov.i32	q8, #0	; 0x00000000
   2e790:	add	r2, r1, #1
   2e794:	mov	r1, #6
   2e798:	mov	r4, #0
   2e79c:	str	r2, [r6, #64]	; 0x40
   2e7a0:	add	r7, r0, #4
   2e7a4:	str	r4, [r0, #20]
   2e7a8:	str	r8, [r0, #24]
   2e7ac:	str	r1, [r0, #28]
   2e7b0:	mov	r0, #28
   2e7b4:	mov	r1, r7
   2e7b8:	vst1.32	{d16-d17}, [r1], r0
   2e7bc:	mvn	r0, #0
   2e7c0:	str	r0, [r1]
   2e7c4:	ldr	r1, [r6, #64]	; 0x40
   2e7c8:	cmp	r1, #31
   2e7cc:	beq	2e934 <__assert_fail@plt+0x1d500>
   2e7d0:	ldr	r0, [r6, #56]	; 0x38
   2e7d4:	add	r4, r0, r1, lsl #5
   2e7d8:	add	r2, r1, #1
   2e7dc:	mov	r0, #0
   2e7e0:	mov	r1, #10
   2e7e4:	str	r2, [r6, #64]	; 0x40
   2e7e8:	mvn	r2, #0
   2e7ec:	str	r0, [r4, #4]!
   2e7f0:	add	r3, r4, #20
   2e7f4:	stmib	r4, {r5, r7}
   2e7f8:	str	r0, [r4, #12]
   2e7fc:	str	r0, [r4, #16]
   2e800:	stm	r3, {r0, r1, r2}
   2e804:	str	r4, [r5]
   2e808:	str	r4, [r7]
   2e80c:	b	2e83c <__assert_fail@plt+0x1d408>
   2e810:	ldr	r0, [r8]
   2e814:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e818:	ldr	r0, [r8, #4]
   2e81c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e820:	ldr	r0, [r8, #8]
   2e824:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e828:	ldr	r0, [r8, #12]
   2e82c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e830:	mov	r0, r8
   2e834:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e838:	mov	r4, r5
   2e83c:	mov	r0, r4
   2e840:	sub	sp, fp, #28
   2e844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e848:	mov	r0, r7
   2e84c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e850:	ldr	r1, [fp, #12]
   2e854:	mov	r0, #12
   2e858:	mov	r4, #0
   2e85c:	str	r0, [r1]
   2e860:	b	2e83c <__assert_fail@plt+0x1d408>
   2e864:	mov	r5, r0
   2e868:	mov	r0, r7
   2e86c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e870:	ldr	r0, [r8]
   2e874:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e878:	ldr	r0, [r8, #4]
   2e87c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e880:	ldr	r0, [r8, #8]
   2e884:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e888:	ldr	r0, [r8, #12]
   2e88c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e890:	mov	r0, r8
   2e894:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e898:	ldr	r0, [fp, #12]
   2e89c:	str	r5, [r0]
   2e8a0:	b	2e83c <__assert_fail@plt+0x1d408>
   2e8a4:	mov	r0, #996	; 0x3e4
   2e8a8:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2e8ac:	cmp	r0, #0
   2e8b0:	beq	2e8f4 <__assert_fail@plt+0x1d4c0>
   2e8b4:	ldr	r1, [r6, #56]	; 0x38
   2e8b8:	str	r1, [r0]
   2e8bc:	mov	r1, #0
   2e8c0:	str	r1, [r6, #64]	; 0x40
   2e8c4:	str	r0, [r6, #56]	; 0x38
   2e8c8:	b	2e724 <__assert_fail@plt+0x1d2f0>
   2e8cc:	mov	r0, #996	; 0x3e4
   2e8d0:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2e8d4:	cmp	r0, #0
   2e8d8:	beq	2e8f4 <__assert_fail@plt+0x1d4c0>
   2e8dc:	ldr	r1, [r6, #56]	; 0x38
   2e8e0:	str	r1, [r0]
   2e8e4:	mov	r1, #0
   2e8e8:	str	r1, [r6, #64]	; 0x40
   2e8ec:	str	r0, [r6, #56]	; 0x38
   2e8f0:	b	2e788 <__assert_fail@plt+0x1d354>
   2e8f4:	mov	r0, r7
   2e8f8:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e8fc:	ldr	r0, [r8]
   2e900:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e904:	ldr	r0, [r8, #4]
   2e908:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e90c:	ldr	r0, [r8, #8]
   2e910:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e914:	ldr	r0, [r8, #12]
   2e918:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e91c:	mov	r0, r8
   2e920:	bl	138e8 <__assert_fail@plt+0x24b4>
   2e924:	ldr	r1, [fp, #12]
   2e928:	mov	r0, #12
   2e92c:	str	r0, [r1]
   2e930:	b	2e83c <__assert_fail@plt+0x1d408>
   2e934:	mov	r0, #996	; 0x3e4
   2e938:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2e93c:	cmp	r0, #0
   2e940:	beq	2e83c <__assert_fail@plt+0x1d408>
   2e944:	ldr	r1, [r6, #56]	; 0x38
   2e948:	str	r1, [r0]
   2e94c:	mov	r1, #0
   2e950:	str	r1, [r6, #64]	; 0x40
   2e954:	str	r0, [r6, #56]	; 0x38
   2e958:	b	2e7d4 <__assert_fail@plt+0x1d3a0>
   2e95c:	push	{fp, lr}
   2e960:	mov	fp, sp
   2e964:	ldr	ip, [r1, #40]	; 0x28
   2e968:	ldr	r3, [r1, #56]	; 0x38
   2e96c:	cmp	r3, ip
   2e970:	ble	2e9f0 <__assert_fail@plt+0x1d5bc>
   2e974:	ldr	r3, [r1, #4]
   2e978:	ldrb	lr, [r3, ip]
   2e97c:	strb	lr, [r0]
   2e980:	ldr	r3, [r1, #80]	; 0x50
   2e984:	cmp	r3, #2
   2e988:	blt	2e9ac <__assert_fail@plt+0x1d578>
   2e98c:	ldr	r3, [r1, #28]
   2e990:	ldr	ip, [r1, #40]	; 0x28
   2e994:	cmp	ip, r3
   2e998:	beq	2e9ac <__assert_fail@plt+0x1d578>
   2e99c:	ldr	r3, [r1, #8]
   2e9a0:	ldr	r3, [r3, ip, lsl #2]
   2e9a4:	cmn	r3, #1
   2e9a8:	beq	2eaa0 <__assert_fail@plt+0x1d66c>
   2e9ac:	tst	r2, #1
   2e9b0:	beq	2ea04 <__assert_fail@plt+0x1d5d0>
   2e9b4:	cmp	lr, #92	; 0x5c
   2e9b8:	bne	2ea04 <__assert_fail@plt+0x1d5d0>
   2e9bc:	ldr	r2, [r1, #40]	; 0x28
   2e9c0:	ldr	r3, [r1, #48]	; 0x30
   2e9c4:	add	r2, r2, #1
   2e9c8:	cmp	r2, r3
   2e9cc:	bge	2eaa0 <__assert_fail@plt+0x1d66c>
   2e9d0:	str	r2, [r1, #40]	; 0x28
   2e9d4:	ldr	r1, [r1, #4]
   2e9d8:	ldrb	r2, [r1, r2]
   2e9dc:	mov	r1, #1
   2e9e0:	strb	r1, [r0, #4]
   2e9e4:	strb	r2, [r0]
   2e9e8:	mov	r0, r1
   2e9ec:	pop	{fp, pc}
   2e9f0:	mov	r1, #2
   2e9f4:	strb	r1, [r0, #4]
   2e9f8:	mov	r1, #0
   2e9fc:	mov	r0, r1
   2ea00:	pop	{fp, pc}
   2ea04:	cmp	lr, #92	; 0x5c
   2ea08:	bgt	2ea5c <__assert_fail@plt+0x1d628>
   2ea0c:	cmp	lr, #45	; 0x2d
   2ea10:	beq	2ea74 <__assert_fail@plt+0x1d640>
   2ea14:	cmp	lr, #91	; 0x5b
   2ea18:	bne	2eaa0 <__assert_fail@plt+0x1d66c>
   2ea1c:	ldr	r3, [r1, #40]	; 0x28
   2ea20:	ldr	ip, [r1, #48]	; 0x30
   2ea24:	add	r3, r3, #1
   2ea28:	cmp	r3, ip
   2ea2c:	bge	2ea90 <__assert_fail@plt+0x1d65c>
   2ea30:	ldr	r1, [r1, #4]
   2ea34:	ldrb	r1, [r1, r3]
   2ea38:	cmp	r1, #61	; 0x3d
   2ea3c:	strb	r1, [r0]
   2ea40:	beq	2eab0 <__assert_fail@plt+0x1d67c>
   2ea44:	cmp	r1, #58	; 0x3a
   2ea48:	beq	2eab8 <__assert_fail@plt+0x1d684>
   2ea4c:	cmp	r1, #46	; 0x2e
   2ea50:	bne	2ea98 <__assert_fail@plt+0x1d664>
   2ea54:	mov	r1, #26
   2ea58:	b	2eac4 <__assert_fail@plt+0x1d690>
   2ea5c:	cmp	lr, #93	; 0x5d
   2ea60:	beq	2ea7c <__assert_fail@plt+0x1d648>
   2ea64:	cmp	lr, #94	; 0x5e
   2ea68:	bne	2eaa0 <__assert_fail@plt+0x1d66c>
   2ea6c:	mov	r1, #25
   2ea70:	b	2ea80 <__assert_fail@plt+0x1d64c>
   2ea74:	mov	r1, #22
   2ea78:	b	2ea80 <__assert_fail@plt+0x1d64c>
   2ea7c:	mov	r1, #21
   2ea80:	strb	r1, [r0, #4]
   2ea84:	mov	r1, #1
   2ea88:	mov	r0, r1
   2ea8c:	pop	{fp, pc}
   2ea90:	mov	r1, #0
   2ea94:	strb	r1, [r0]
   2ea98:	mov	r1, #91	; 0x5b
   2ea9c:	strb	r1, [r0]
   2eaa0:	mov	r1, #1
   2eaa4:	strb	r1, [r0, #4]
   2eaa8:	mov	r0, r1
   2eaac:	pop	{fp, pc}
   2eab0:	mov	r1, #28
   2eab4:	b	2eac4 <__assert_fail@plt+0x1d690>
   2eab8:	tst	r2, #4
   2eabc:	beq	2ea98 <__assert_fail@plt+0x1d664>
   2eac0:	mov	r1, #30
   2eac4:	strb	r1, [r0, #4]
   2eac8:	mov	r1, #2
   2eacc:	mov	r0, r1
   2ead0:	pop	{fp, pc}
   2ead4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2ead8:	add	fp, sp, #24
   2eadc:	sub	sp, sp, #8
   2eae0:	mov	r5, r2
   2eae4:	ldr	r2, [r1, #80]	; 0x50
   2eae8:	mov	r9, r0
   2eaec:	ldr	r0, [r1, #40]	; 0x28
   2eaf0:	cmp	r2, #1
   2eaf4:	beq	2eb6c <__assert_fail@plt+0x1d738>
   2eaf8:	ldr	r2, [r1, #28]
   2eafc:	add	r6, r0, #1
   2eb00:	cmp	r6, r2
   2eb04:	bge	2eb6c <__assert_fail@plt+0x1d738>
   2eb08:	ldr	lr, [r1, #8]
   2eb0c:	sub	r4, r0, r2
   2eb10:	sub	ip, r2, r0
   2eb14:	mvn	r2, #0
   2eb18:	add	r6, lr, r0, lsl #2
   2eb1c:	ldr	r7, [r6, -r2, lsl #2]
   2eb20:	cmn	r7, #1
   2eb24:	bne	2eb38 <__assert_fail@plt+0x1d704>
   2eb28:	sub	r2, r2, #1
   2eb2c:	cmp	r4, r2
   2eb30:	bne	2eb1c <__assert_fail@plt+0x1d6e8>
   2eb34:	b	2eb44 <__assert_fail@plt+0x1d710>
   2eb38:	rsb	ip, r2, #0
   2eb3c:	cmp	ip, #2
   2eb40:	bcc	2eb6c <__assert_fail@plt+0x1d738>
   2eb44:	mov	r2, #1
   2eb48:	str	r2, [r9]
   2eb4c:	ldr	r0, [lr, r0, lsl #2]
   2eb50:	str	r0, [r9, #4]
   2eb54:	ldr	r0, [r1, #40]	; 0x28
   2eb58:	add	r0, r0, ip
   2eb5c:	str	r0, [r1, #40]	; 0x28
   2eb60:	mov	r0, #0
   2eb64:	sub	sp, fp, #24
   2eb68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2eb6c:	add	r2, r0, r3
   2eb70:	str	r2, [r1, #40]	; 0x28
   2eb74:	ldrb	r6, [r5, #4]
   2eb78:	sub	r0, r6, #22
   2eb7c:	cmp	r0, #8
   2eb80:	bhi	2ed88 <__assert_fail@plt+0x1d954>
   2eb84:	add	r3, pc, #0
   2eb88:	ldr	pc, [r3, r0, lsl #2]
   2eb8c:	andeq	lr, r2, r0, ror #26
   2eb90:	andeq	lr, r2, r8, lsl #27
   2eb94:	andeq	lr, r2, r8, lsl #27
   2eb98:	andeq	lr, r2, r8, lsl #27
   2eb9c:			; <UNDEFINED> instruction: 0x0002ebb0
   2eba0:	andeq	lr, r2, r8, lsl #27
   2eba4:			; <UNDEFINED> instruction: 0x0002ebb0
   2eba8:	andeq	lr, r2, r8, lsl #27
   2ebac:			; <UNDEFINED> instruction: 0x0002ebb0
   2ebb0:	ldr	r3, [r1, #56]	; 0x38
   2ebb4:	mov	r0, #7
   2ebb8:	cmp	r3, r2
   2ebbc:	ble	2ed98 <__assert_fail@plt+0x1d964>
   2ebc0:	ldrb	r3, [r5]
   2ebc4:	mov	r2, #0
   2ebc8:	uxtb	r7, r6
   2ebcc:	cmp	r7, #30
   2ebd0:	bne	2ebe0 <__assert_fail@plt+0x1d7ac>
   2ebd4:	ldrb	r7, [r1, #75]	; 0x4b
   2ebd8:	cmp	r7, #0
   2ebdc:	bne	2ec38 <__assert_fail@plt+0x1d804>
   2ebe0:	ldr	r4, [r1, #40]	; 0x28
   2ebe4:	ldr	r7, [r1, #4]
   2ebe8:	add	r6, r4, #1
   2ebec:	str	r6, [r1, #40]	; 0x28
   2ebf0:	ldrb	r4, [r7, r4]
   2ebf4:	ldr	r7, [r1, #56]	; 0x38
   2ebf8:	cmp	r7, r6
   2ebfc:	ble	2ed98 <__assert_fail@plt+0x1d964>
   2ec00:	uxtb	r7, r4
   2ec04:	cmp	r7, r3
   2ec08:	bne	2ec1c <__assert_fail@plt+0x1d7e8>
   2ec0c:	ldr	r7, [r1, #4]
   2ec10:	ldrb	r7, [r7, r6]
   2ec14:	cmp	r7, #93	; 0x5d
   2ec18:	beq	2ed10 <__assert_fail@plt+0x1d8dc>
   2ec1c:	ldr	r7, [r9, #4]
   2ec20:	strb	r4, [r7, r2]
   2ec24:	add	r2, r2, #1
   2ec28:	cmp	r2, #32
   2ec2c:	beq	2ed98 <__assert_fail@plt+0x1d964>
   2ec30:	ldrb	r6, [r5, #4]
   2ec34:	b	2ebc8 <__assert_fail@plt+0x1d794>
   2ec38:	ldrb	r7, [r1, #76]	; 0x4c
   2ec3c:	cmp	r7, #0
   2ec40:	beq	2ecdc <__assert_fail@plt+0x1d8a8>
   2ec44:	ldr	lr, [r1, #28]
   2ec48:	ldr	ip, [r1, #40]	; 0x28
   2ec4c:	cmp	lr, ip
   2ec50:	beq	2ec64 <__assert_fail@plt+0x1d830>
   2ec54:	ldr	r4, [r1, #8]
   2ec58:	ldr	r4, [r4, ip, lsl #2]
   2ec5c:	cmn	r4, #1
   2ec60:	beq	2ecfc <__assert_fail@plt+0x1d8c8>
   2ec64:	ldr	r6, [r1, #12]
   2ec68:	ldr	r7, [r1, #24]
   2ec6c:	ldr	r4, [r1]
   2ec70:	ldr	r6, [r6, ip, lsl #2]
   2ec74:	add	r6, r7, r6
   2ec78:	add	r4, r4, r6
   2ec7c:	ldrsb	r4, [r4]
   2ec80:	cmn	r4, #1
   2ec84:	ble	2ecfc <__assert_fail@plt+0x1d8c8>
   2ec88:	ldr	r7, [r1, #80]	; 0x50
   2ec8c:	mov	r6, #1
   2ec90:	cmp	r7, #1
   2ec94:	beq	2ecd0 <__assert_fail@plt+0x1d89c>
   2ec98:	add	r7, ip, #1
   2ec9c:	cmp	r7, lr
   2eca0:	bge	2ecd0 <__assert_fail@plt+0x1d89c>
   2eca4:	ldr	r6, [r1, #8]
   2eca8:	sub	lr, lr, ip
   2ecac:	add	r8, r6, ip, lsl #2
   2ecb0:	mov	r6, #1
   2ecb4:	ldr	r7, [r8, r6, lsl #2]
   2ecb8:	cmn	r7, #1
   2ecbc:	bne	2ecd0 <__assert_fail@plt+0x1d89c>
   2ecc0:	add	r6, r6, #1
   2ecc4:	cmp	lr, r6
   2ecc8:	bne	2ecb4 <__assert_fail@plt+0x1d880>
   2eccc:	mov	r6, lr
   2ecd0:	add	r6, r6, ip
   2ecd4:	str	r6, [r1, #40]	; 0x28
   2ecd8:	b	2ebf4 <__assert_fail@plt+0x1d7c0>
   2ecdc:	ldr	r7, [r1, #40]	; 0x28
   2ece0:	ldr	r4, [r1, #24]
   2ece4:	ldr	ip, [r1]
   2ece8:	add	r6, r7, #1
   2ecec:	add	r7, r7, r4
   2ecf0:	str	r6, [r1, #40]	; 0x28
   2ecf4:	ldrb	r4, [ip, r7]
   2ecf8:	b	2ebf4 <__assert_fail@plt+0x1d7c0>
   2ecfc:	add	r6, ip, #1
   2ed00:	str	r6, [r1, #40]	; 0x28
   2ed04:	ldr	r7, [r1, #4]
   2ed08:	ldrb	r4, [r7, ip]
   2ed0c:	b	2ebf4 <__assert_fail@plt+0x1d7c0>
   2ed10:	add	r0, r6, #1
   2ed14:	str	r0, [r1, #40]	; 0x28
   2ed18:	mov	r0, #0
   2ed1c:	ldr	r1, [r9, #4]
   2ed20:	strb	r0, [r1, r2]
   2ed24:	ldrb	r1, [r5, #4]
   2ed28:	cmp	r1, #30
   2ed2c:	beq	2ed48 <__assert_fail@plt+0x1d914>
   2ed30:	cmp	r1, #28
   2ed34:	beq	2ed50 <__assert_fail@plt+0x1d91c>
   2ed38:	cmp	r1, #26
   2ed3c:	bne	2ed98 <__assert_fail@plt+0x1d964>
   2ed40:	mov	r1, #3
   2ed44:	b	2ed54 <__assert_fail@plt+0x1d920>
   2ed48:	mov	r1, #4
   2ed4c:	b	2ed54 <__assert_fail@plt+0x1d920>
   2ed50:	mov	r1, #2
   2ed54:	str	r1, [r9]
   2ed58:	sub	sp, fp, #24
   2ed5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2ed60:	ldr	r0, [fp, #12]
   2ed64:	cmp	r0, #0
   2ed68:	bne	2ed88 <__assert_fail@plt+0x1d954>
   2ed6c:	ldr	r2, [fp, #8]
   2ed70:	mov	r0, sp
   2ed74:	bl	2e95c <__assert_fail@plt+0x1d528>
   2ed78:	ldrb	r1, [sp, #4]
   2ed7c:	mov	r0, #11
   2ed80:	cmp	r1, #21
   2ed84:	bne	2ed98 <__assert_fail@plt+0x1d964>
   2ed88:	mov	r0, #0
   2ed8c:	str	r0, [r9]
   2ed90:	ldrb	r1, [r5]
   2ed94:	strb	r1, [r9, #4]
   2ed98:	sub	sp, fp, #24
   2ed9c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2eda0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2eda4:	add	fp, sp, #24
   2eda8:	mov	r8, r0
   2edac:	ldrb	r0, [fp, #14]
   2edb0:	ldr	r6, [fp, #8]
   2edb4:	mov	r5, r3
   2edb8:	mov	r7, r2
   2edbc:	mov	r4, r1
   2edc0:	tst	r0, #64	; 0x40
   2edc4:	beq	2ee00 <__assert_fail@plt+0x1d9cc>
   2edc8:	movw	r1, #42986	; 0xa7ea
   2edcc:	mov	r0, r6
   2edd0:	movt	r1, #3
   2edd4:	bl	1117c <strcmp@plt>
   2edd8:	cmp	r0, #0
   2eddc:	beq	2edf8 <__assert_fail@plt+0x1d9c4>
   2ede0:	movw	r1, #42992	; 0xa7f0
   2ede4:	mov	r0, r6
   2ede8:	movt	r1, #3
   2edec:	bl	1117c <strcmp@plt>
   2edf0:	cmp	r0, #0
   2edf4:	bne	2ee00 <__assert_fail@plt+0x1d9cc>
   2edf8:	movw	r6, #42998	; 0xa7f6
   2edfc:	movt	r6, #3
   2ee00:	ldr	r0, [r5]
   2ee04:	ldr	r1, [r7, #36]	; 0x24
   2ee08:	cmp	r0, r1
   2ee0c:	beq	2f334 <__assert_fail@plt+0x1df00>
   2ee10:	mov	r0, r6
   2ee14:	bl	11158 <wctype@plt>
   2ee18:	ldr	r2, [r7, #36]	; 0x24
   2ee1c:	ldr	r1, [r7, #12]
   2ee20:	add	r3, r2, #1
   2ee24:	str	r3, [r7, #36]	; 0x24
   2ee28:	str	r0, [r1, r2, lsl #2]
   2ee2c:	movw	r1, #42974	; 0xa7de
   2ee30:	mov	r0, r6
   2ee34:	movt	r1, #3
   2ee38:	bl	1117c <strcmp@plt>
   2ee3c:	cmp	r0, #0
   2ee40:	beq	2ef70 <__assert_fail@plt+0x1db3c>
   2ee44:	movw	r1, #43004	; 0xa7fc
   2ee48:	mov	r0, r6
   2ee4c:	movt	r1, #3
   2ee50:	bl	1117c <strcmp@plt>
   2ee54:	cmp	r0, #0
   2ee58:	beq	2efc0 <__assert_fail@plt+0x1db8c>
   2ee5c:	movw	r1, #42992	; 0xa7f0
   2ee60:	mov	r0, r6
   2ee64:	movt	r1, #3
   2ee68:	bl	1117c <strcmp@plt>
   2ee6c:	cmp	r0, #0
   2ee70:	beq	2f010 <__assert_fail@plt+0x1dbdc>
   2ee74:	movw	r1, #42980	; 0xa7e4
   2ee78:	mov	r0, r6
   2ee7c:	movt	r1, #3
   2ee80:	bl	1117c <strcmp@plt>
   2ee84:	cmp	r0, #0
   2ee88:	beq	2f060 <__assert_fail@plt+0x1dc2c>
   2ee8c:	movw	r1, #42998	; 0xa7f6
   2ee90:	mov	r0, r6
   2ee94:	movt	r1, #3
   2ee98:	bl	1117c <strcmp@plt>
   2ee9c:	cmp	r0, #0
   2eea0:	beq	2f0e8 <__assert_fail@plt+0x1dcb4>
   2eea4:	movw	r1, #43035	; 0xa81b
   2eea8:	mov	r0, r6
   2eeac:	movt	r1, #3
   2eeb0:	bl	1117c <strcmp@plt>
   2eeb4:	cmp	r0, #0
   2eeb8:	beq	2f138 <__assert_fail@plt+0x1dd04>
   2eebc:	movw	r1, #43010	; 0xa802
   2eec0:	mov	r0, r6
   2eec4:	movt	r1, #3
   2eec8:	bl	1117c <strcmp@plt>
   2eecc:	cmp	r0, #0
   2eed0:	beq	2f190 <__assert_fail@plt+0x1dd5c>
   2eed4:	movw	r1, #42986	; 0xa7ea
   2eed8:	mov	r0, r6
   2eedc:	movt	r1, #3
   2eee0:	bl	1117c <strcmp@plt>
   2eee4:	cmp	r0, #0
   2eee8:	beq	2f1e4 <__assert_fail@plt+0x1ddb0>
   2eeec:	movw	r1, #43016	; 0xa808
   2eef0:	mov	r0, r6
   2eef4:	movt	r1, #3
   2eef8:	bl	1117c <strcmp@plt>
   2eefc:	cmp	r0, #0
   2ef00:	beq	2f238 <__assert_fail@plt+0x1de04>
   2ef04:	movw	r1, #43022	; 0xa80e
   2ef08:	mov	r0, r6
   2ef0c:	movt	r1, #3
   2ef10:	bl	1117c <strcmp@plt>
   2ef14:	cmp	r0, #0
   2ef18:	beq	2f28c <__assert_fail@plt+0x1de58>
   2ef1c:	movw	r1, #43028	; 0xa814
   2ef20:	mov	r0, r6
   2ef24:	movt	r1, #3
   2ef28:	bl	1117c <strcmp@plt>
   2ef2c:	cmp	r0, #0
   2ef30:	beq	2f2e0 <__assert_fail@plt+0x1deac>
   2ef34:	movw	r1, #43034	; 0xa81a
   2ef38:	mov	r0, r6
   2ef3c:	movt	r1, #3
   2ef40:	bl	1117c <strcmp@plt>
   2ef44:	mov	r1, r0
   2ef48:	mov	r0, #4
   2ef4c:	cmp	r1, #0
   2ef50:	bne	2f674 <__assert_fail@plt+0x1e240>
   2ef54:	bl	11308 <__ctype_b_loc@plt>
   2ef58:	ldr	r1, [r0]
   2ef5c:	mov	r2, #0
   2ef60:	mov	r3, #1
   2ef64:	cmp	r8, #0
   2ef68:	beq	2f0c4 <__assert_fail@plt+0x1dc90>
   2ef6c:	b	2f5bc <__assert_fail@plt+0x1e188>
   2ef70:	bl	11308 <__ctype_b_loc@plt>
   2ef74:	ldr	r1, [r0]
   2ef78:	cmp	r8, #0
   2ef7c:	bne	2f3d4 <__assert_fail@plt+0x1dfa0>
   2ef80:	mov	r0, #0
   2ef84:	mov	r2, #1
   2ef88:	b	2ef9c <__assert_fail@plt+0x1db68>
   2ef8c:	add	r0, r0, #1
   2ef90:	add	r1, r1, #2
   2ef94:	cmp	r0, #256	; 0x100
   2ef98:	beq	2f188 <__assert_fail@plt+0x1dd54>
   2ef9c:	ldrb	r3, [r1]
   2efa0:	tst	r3, #8
   2efa4:	beq	2ef8c <__assert_fail@plt+0x1db58>
   2efa8:	ubfx	r3, r0, #5, #3
   2efac:	and	r6, r0, #31
   2efb0:	ldr	r7, [r4, r3, lsl #2]
   2efb4:	orr	r7, r7, r2, lsl r6
   2efb8:	str	r7, [r4, r3, lsl #2]
   2efbc:	b	2ef8c <__assert_fail@plt+0x1db58>
   2efc0:	bl	11308 <__ctype_b_loc@plt>
   2efc4:	ldr	r1, [r0]
   2efc8:	cmp	r8, #0
   2efcc:	bne	2f458 <__assert_fail@plt+0x1e024>
   2efd0:	mov	r0, #0
   2efd4:	mov	r2, #1
   2efd8:	b	2efec <__assert_fail@plt+0x1dbb8>
   2efdc:	add	r0, r0, #1
   2efe0:	add	r1, r1, #2
   2efe4:	cmp	r0, #256	; 0x100
   2efe8:	beq	2f188 <__assert_fail@plt+0x1dd54>
   2efec:	ldrb	r3, [r1]
   2eff0:	tst	r3, #2
   2eff4:	beq	2efdc <__assert_fail@plt+0x1dba8>
   2eff8:	ubfx	r3, r0, #5, #3
   2effc:	and	r6, r0, #31
   2f000:	ldr	r7, [r4, r3, lsl #2]
   2f004:	orr	r7, r7, r2, lsl r6
   2f008:	str	r7, [r4, r3, lsl #2]
   2f00c:	b	2efdc <__assert_fail@plt+0x1dba8>
   2f010:	bl	11308 <__ctype_b_loc@plt>
   2f014:	ldr	r1, [r0]
   2f018:	cmp	r8, #0
   2f01c:	bne	2f4dc <__assert_fail@plt+0x1e0a8>
   2f020:	mov	r0, #0
   2f024:	mov	r2, #1
   2f028:	b	2f03c <__assert_fail@plt+0x1dc08>
   2f02c:	add	r0, r0, #1
   2f030:	add	r1, r1, #2
   2f034:	cmp	r0, #256	; 0x100
   2f038:	beq	2f188 <__assert_fail@plt+0x1dd54>
   2f03c:	ldrb	r3, [r1, #1]
   2f040:	tst	r3, #2
   2f044:	beq	2f02c <__assert_fail@plt+0x1dbf8>
   2f048:	ubfx	r3, r0, #5, #3
   2f04c:	and	r6, r0, #31
   2f050:	ldr	r7, [r4, r3, lsl #2]
   2f054:	orr	r7, r7, r2, lsl r6
   2f058:	str	r7, [r4, r3, lsl #2]
   2f05c:	b	2f02c <__assert_fail@plt+0x1dbf8>
   2f060:	bl	11308 <__ctype_b_loc@plt>
   2f064:	ldr	r1, [r0]
   2f068:	cmp	r8, #0
   2f06c:	bne	2f560 <__assert_fail@plt+0x1e12c>
   2f070:	mov	r0, #0
   2f074:	mov	r2, #1
   2f078:	b	2f08c <__assert_fail@plt+0x1dc58>
   2f07c:	add	r0, r0, #1
   2f080:	add	r1, r1, #2
   2f084:	cmp	r0, #256	; 0x100
   2f088:	beq	2f188 <__assert_fail@plt+0x1dd54>
   2f08c:	ldrb	r3, [r1, #1]
   2f090:	tst	r3, #32
   2f094:	beq	2f07c <__assert_fail@plt+0x1dc48>
   2f098:	ubfx	r3, r0, #5, #3
   2f09c:	and	r6, r0, #31
   2f0a0:	ldr	r7, [r4, r3, lsl #2]
   2f0a4:	orr	r7, r7, r2, lsl r6
   2f0a8:	str	r7, [r4, r3, lsl #2]
   2f0ac:	b	2f07c <__assert_fail@plt+0x1dc48>
   2f0b0:	add	r2, r2, #1
   2f0b4:	add	r1, r1, #2
   2f0b8:	mov	r0, #0
   2f0bc:	cmp	r2, #256	; 0x100
   2f0c0:	beq	2f674 <__assert_fail@plt+0x1e240>
   2f0c4:	ldrb	r0, [r1, #1]
   2f0c8:	tst	r0, #16
   2f0cc:	beq	2f0b0 <__assert_fail@plt+0x1dc7c>
   2f0d0:	ubfx	r0, r2, #5, #3
   2f0d4:	and	r6, r2, #31
   2f0d8:	ldr	r7, [r4, r0, lsl #2]
   2f0dc:	orr	r7, r7, r3, lsl r6
   2f0e0:	str	r7, [r4, r0, lsl #2]
   2f0e4:	b	2f0b0 <__assert_fail@plt+0x1dc7c>
   2f0e8:	bl	11308 <__ctype_b_loc@plt>
   2f0ec:	ldr	r1, [r0]
   2f0f0:	cmp	r8, #0
   2f0f4:	bne	2f5e4 <__assert_fail@plt+0x1e1b0>
   2f0f8:	mov	r0, #0
   2f0fc:	mov	r2, #1
   2f100:	b	2f114 <__assert_fail@plt+0x1dce0>
   2f104:	add	r0, r0, #1
   2f108:	add	r1, r1, #2
   2f10c:	cmp	r0, #256	; 0x100
   2f110:	beq	2f188 <__assert_fail@plt+0x1dd54>
   2f114:	ldrb	r3, [r1, #1]
   2f118:	tst	r3, #4
   2f11c:	beq	2f104 <__assert_fail@plt+0x1dcd0>
   2f120:	ubfx	r3, r0, #5, #3
   2f124:	and	r6, r0, #31
   2f128:	ldr	r7, [r4, r3, lsl #2]
   2f12c:	orr	r7, r7, r2, lsl r6
   2f130:	str	r7, [r4, r3, lsl #2]
   2f134:	b	2f104 <__assert_fail@plt+0x1dcd0>
   2f138:	bl	11308 <__ctype_b_loc@plt>
   2f13c:	ldr	r1, [r0]
   2f140:	cmp	r8, #0
   2f144:	bne	2f62c <__assert_fail@plt+0x1e1f8>
   2f148:	mov	r0, #0
   2f14c:	mov	r2, #1
   2f150:	b	2f164 <__assert_fail@plt+0x1dd30>
   2f154:	add	r0, r0, #1
   2f158:	add	r1, r1, #2
   2f15c:	cmp	r0, #256	; 0x100
   2f160:	beq	2f188 <__assert_fail@plt+0x1dd54>
   2f164:	ldrb	r3, [r1, #1]
   2f168:	tst	r3, #8
   2f16c:	beq	2f154 <__assert_fail@plt+0x1dd20>
   2f170:	ubfx	r3, r0, #5, #3
   2f174:	and	r6, r0, #31
   2f178:	ldr	r7, [r4, r3, lsl #2]
   2f17c:	orr	r7, r7, r2, lsl r6
   2f180:	str	r7, [r4, r3, lsl #2]
   2f184:	b	2f154 <__assert_fail@plt+0x1dd20>
   2f188:	mov	r0, #0
   2f18c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2f190:	bl	11308 <__ctype_b_loc@plt>
   2f194:	ldr	r1, [r0]
   2f198:	mov	r2, #0
   2f19c:	mov	r3, #1
   2f1a0:	cmp	r8, #0
   2f1a4:	beq	2f1c0 <__assert_fail@plt+0x1dd8c>
   2f1a8:	b	2f370 <__assert_fail@plt+0x1df3c>
   2f1ac:	add	r2, r2, #1
   2f1b0:	add	r1, r1, #2
   2f1b4:	mov	r0, #0
   2f1b8:	cmp	r2, #256	; 0x100
   2f1bc:	beq	2f674 <__assert_fail@plt+0x1e240>
   2f1c0:	ldrb	r0, [r1, #1]
   2f1c4:	tst	r0, #64	; 0x40
   2f1c8:	beq	2f1ac <__assert_fail@plt+0x1dd78>
   2f1cc:	ubfx	r0, r2, #5, #3
   2f1d0:	and	r6, r2, #31
   2f1d4:	ldr	r7, [r4, r0, lsl #2]
   2f1d8:	orr	r7, r7, r3, lsl r6
   2f1dc:	str	r7, [r4, r0, lsl #2]
   2f1e0:	b	2f1ac <__assert_fail@plt+0x1dd78>
   2f1e4:	bl	11308 <__ctype_b_loc@plt>
   2f1e8:	ldr	r1, [r0]
   2f1ec:	mov	r2, #0
   2f1f0:	mov	r3, #1
   2f1f4:	cmp	r8, #0
   2f1f8:	beq	2f214 <__assert_fail@plt+0x1dde0>
   2f1fc:	b	2f3ac <__assert_fail@plt+0x1df78>
   2f200:	add	r2, r2, #1
   2f204:	add	r1, r1, #2
   2f208:	mov	r0, #0
   2f20c:	cmp	r2, #256	; 0x100
   2f210:	beq	2f674 <__assert_fail@plt+0x1e240>
   2f214:	ldrb	r0, [r1, #1]
   2f218:	tst	r0, #1
   2f21c:	beq	2f200 <__assert_fail@plt+0x1ddcc>
   2f220:	ubfx	r0, r2, #5, #3
   2f224:	and	r6, r2, #31
   2f228:	ldr	r7, [r4, r0, lsl #2]
   2f22c:	orr	r7, r7, r3, lsl r6
   2f230:	str	r7, [r4, r0, lsl #2]
   2f234:	b	2f200 <__assert_fail@plt+0x1ddcc>
   2f238:	bl	11308 <__ctype_b_loc@plt>
   2f23c:	ldr	r1, [r0]
   2f240:	mov	r2, #0
   2f244:	mov	r3, #1
   2f248:	cmp	r8, #0
   2f24c:	beq	2f268 <__assert_fail@plt+0x1de34>
   2f250:	b	2f430 <__assert_fail@plt+0x1dffc>
   2f254:	add	r2, r2, #1
   2f258:	add	r1, r1, #2
   2f25c:	mov	r0, #0
   2f260:	cmp	r2, #256	; 0x100
   2f264:	beq	2f674 <__assert_fail@plt+0x1e240>
   2f268:	ldrb	r0, [r1]
   2f26c:	tst	r0, #1
   2f270:	beq	2f254 <__assert_fail@plt+0x1de20>
   2f274:	ubfx	r0, r2, #5, #3
   2f278:	and	r6, r2, #31
   2f27c:	ldr	r7, [r4, r0, lsl #2]
   2f280:	orr	r7, r7, r3, lsl r6
   2f284:	str	r7, [r4, r0, lsl #2]
   2f288:	b	2f254 <__assert_fail@plt+0x1de20>
   2f28c:	bl	11308 <__ctype_b_loc@plt>
   2f290:	ldr	r1, [r0]
   2f294:	mov	r2, #0
   2f298:	mov	r3, #1
   2f29c:	cmp	r8, #0
   2f2a0:	beq	2f2bc <__assert_fail@plt+0x1de88>
   2f2a4:	b	2f4b4 <__assert_fail@plt+0x1e080>
   2f2a8:	add	r2, r2, #1
   2f2ac:	add	r1, r1, #2
   2f2b0:	mov	r0, #0
   2f2b4:	cmp	r2, #256	; 0x100
   2f2b8:	beq	2f674 <__assert_fail@plt+0x1e240>
   2f2bc:	ldrsh	r0, [r1]
   2f2c0:	cmn	r0, #1
   2f2c4:	bgt	2f2a8 <__assert_fail@plt+0x1de74>
   2f2c8:	ubfx	r0, r2, #5, #3
   2f2cc:	and	r6, r2, #31
   2f2d0:	ldr	r7, [r4, r0, lsl #2]
   2f2d4:	orr	r7, r7, r3, lsl r6
   2f2d8:	str	r7, [r4, r0, lsl #2]
   2f2dc:	b	2f2a8 <__assert_fail@plt+0x1de74>
   2f2e0:	bl	11308 <__ctype_b_loc@plt>
   2f2e4:	ldr	r1, [r0]
   2f2e8:	mov	r2, #0
   2f2ec:	mov	r3, #1
   2f2f0:	cmp	r8, #0
   2f2f4:	beq	2f310 <__assert_fail@plt+0x1dedc>
   2f2f8:	b	2f538 <__assert_fail@plt+0x1e104>
   2f2fc:	add	r2, r2, #1
   2f300:	add	r1, r1, #2
   2f304:	mov	r0, #0
   2f308:	cmp	r2, #256	; 0x100
   2f30c:	beq	2f674 <__assert_fail@plt+0x1e240>
   2f310:	ldrb	r0, [r1]
   2f314:	tst	r0, #4
   2f318:	beq	2f2fc <__assert_fail@plt+0x1dec8>
   2f31c:	ubfx	r0, r2, #5, #3
   2f320:	and	r6, r2, #31
   2f324:	ldr	r7, [r4, r0, lsl #2]
   2f328:	orr	r7, r7, r3, lsl r6
   2f32c:	str	r7, [r4, r0, lsl #2]
   2f330:	b	2f2fc <__assert_fail@plt+0x1dec8>
   2f334:	mov	r1, #1
   2f338:	orr	r9, r1, r0, lsl #1
   2f33c:	ldr	r0, [r7, #12]
   2f340:	lsl	r1, r9, #2
   2f344:	bl	38020 <__assert_fail@plt+0x26bec>
   2f348:	cmp	r0, #0
   2f34c:	beq	2f678 <__assert_fail@plt+0x1e244>
   2f350:	str	r0, [r7, #12]
   2f354:	str	r9, [r5]
   2f358:	b	2ee10 <__assert_fail@plt+0x1d9dc>
   2f35c:	add	r2, r2, #1
   2f360:	add	r1, r1, #2
   2f364:	mov	r0, #0
   2f368:	cmp	r2, #256	; 0x100
   2f36c:	beq	2f674 <__assert_fail@plt+0x1e240>
   2f370:	ldrb	r0, [r1, #1]
   2f374:	tst	r0, #64	; 0x40
   2f378:	beq	2f35c <__assert_fail@plt+0x1df28>
   2f37c:	ldrb	r0, [r8, r2]
   2f380:	ubfx	r7, r0, #5, #3
   2f384:	and	r0, r0, #31
   2f388:	ldr	r6, [r4, r7, lsl #2]
   2f38c:	orr	r0, r6, r3, lsl r0
   2f390:	str	r0, [r4, r7, lsl #2]
   2f394:	b	2f35c <__assert_fail@plt+0x1df28>
   2f398:	add	r2, r2, #1
   2f39c:	add	r1, r1, #2
   2f3a0:	mov	r0, #0
   2f3a4:	cmp	r2, #256	; 0x100
   2f3a8:	beq	2f674 <__assert_fail@plt+0x1e240>
   2f3ac:	ldrb	r0, [r1, #1]
   2f3b0:	tst	r0, #1
   2f3b4:	beq	2f398 <__assert_fail@plt+0x1df64>
   2f3b8:	ldrb	r0, [r8, r2]
   2f3bc:	ubfx	r7, r0, #5, #3
   2f3c0:	and	r0, r0, #31
   2f3c4:	ldr	r6, [r4, r7, lsl #2]
   2f3c8:	orr	r0, r6, r3, lsl r0
   2f3cc:	str	r0, [r4, r7, lsl #2]
   2f3d0:	b	2f398 <__assert_fail@plt+0x1df64>
   2f3d4:	mov	r2, #0
   2f3d8:	mov	r3, #1
   2f3dc:	b	2f3f4 <__assert_fail@plt+0x1dfc0>
   2f3e0:	add	r2, r2, #1
   2f3e4:	add	r1, r1, #2
   2f3e8:	mov	r0, #0
   2f3ec:	cmp	r2, #256	; 0x100
   2f3f0:	beq	2f674 <__assert_fail@plt+0x1e240>
   2f3f4:	ldrb	r0, [r1]
   2f3f8:	tst	r0, #8
   2f3fc:	beq	2f3e0 <__assert_fail@plt+0x1dfac>
   2f400:	ldrb	r0, [r8, r2]
   2f404:	ubfx	r7, r0, #5, #3
   2f408:	and	r0, r0, #31
   2f40c:	ldr	r6, [r4, r7, lsl #2]
   2f410:	orr	r0, r6, r3, lsl r0
   2f414:	str	r0, [r4, r7, lsl #2]
   2f418:	b	2f3e0 <__assert_fail@plt+0x1dfac>
   2f41c:	add	r2, r2, #1
   2f420:	add	r1, r1, #2
   2f424:	mov	r0, #0
   2f428:	cmp	r2, #256	; 0x100
   2f42c:	beq	2f674 <__assert_fail@plt+0x1e240>
   2f430:	ldrb	r0, [r1]
   2f434:	tst	r0, #1
   2f438:	beq	2f41c <__assert_fail@plt+0x1dfe8>
   2f43c:	ldrb	r0, [r8, r2]
   2f440:	ubfx	r7, r0, #5, #3
   2f444:	and	r0, r0, #31
   2f448:	ldr	r6, [r4, r7, lsl #2]
   2f44c:	orr	r0, r6, r3, lsl r0
   2f450:	str	r0, [r4, r7, lsl #2]
   2f454:	b	2f41c <__assert_fail@plt+0x1dfe8>
   2f458:	mov	r2, #0
   2f45c:	mov	r3, #1
   2f460:	b	2f478 <__assert_fail@plt+0x1e044>
   2f464:	add	r2, r2, #1
   2f468:	add	r1, r1, #2
   2f46c:	mov	r0, #0
   2f470:	cmp	r2, #256	; 0x100
   2f474:	beq	2f674 <__assert_fail@plt+0x1e240>
   2f478:	ldrb	r0, [r1]
   2f47c:	tst	r0, #2
   2f480:	beq	2f464 <__assert_fail@plt+0x1e030>
   2f484:	ldrb	r0, [r8, r2]
   2f488:	ubfx	r7, r0, #5, #3
   2f48c:	and	r0, r0, #31
   2f490:	ldr	r6, [r4, r7, lsl #2]
   2f494:	orr	r0, r6, r3, lsl r0
   2f498:	str	r0, [r4, r7, lsl #2]
   2f49c:	b	2f464 <__assert_fail@plt+0x1e030>
   2f4a0:	add	r2, r2, #1
   2f4a4:	add	r1, r1, #2
   2f4a8:	mov	r0, #0
   2f4ac:	cmp	r2, #256	; 0x100
   2f4b0:	beq	2f674 <__assert_fail@plt+0x1e240>
   2f4b4:	ldrsh	r0, [r1]
   2f4b8:	cmn	r0, #1
   2f4bc:	bgt	2f4a0 <__assert_fail@plt+0x1e06c>
   2f4c0:	ldrb	r0, [r8, r2]
   2f4c4:	ubfx	r7, r0, #5, #3
   2f4c8:	and	r0, r0, #31
   2f4cc:	ldr	r6, [r4, r7, lsl #2]
   2f4d0:	orr	r0, r6, r3, lsl r0
   2f4d4:	str	r0, [r4, r7, lsl #2]
   2f4d8:	b	2f4a0 <__assert_fail@plt+0x1e06c>
   2f4dc:	mov	r2, #0
   2f4e0:	mov	r3, #1
   2f4e4:	b	2f4fc <__assert_fail@plt+0x1e0c8>
   2f4e8:	add	r2, r2, #1
   2f4ec:	add	r1, r1, #2
   2f4f0:	mov	r0, #0
   2f4f4:	cmp	r2, #256	; 0x100
   2f4f8:	beq	2f674 <__assert_fail@plt+0x1e240>
   2f4fc:	ldrb	r0, [r1, #1]
   2f500:	tst	r0, #2
   2f504:	beq	2f4e8 <__assert_fail@plt+0x1e0b4>
   2f508:	ldrb	r0, [r8, r2]
   2f50c:	ubfx	r7, r0, #5, #3
   2f510:	and	r0, r0, #31
   2f514:	ldr	r6, [r4, r7, lsl #2]
   2f518:	orr	r0, r6, r3, lsl r0
   2f51c:	str	r0, [r4, r7, lsl #2]
   2f520:	b	2f4e8 <__assert_fail@plt+0x1e0b4>
   2f524:	add	r2, r2, #1
   2f528:	add	r1, r1, #2
   2f52c:	mov	r0, #0
   2f530:	cmp	r2, #256	; 0x100
   2f534:	beq	2f674 <__assert_fail@plt+0x1e240>
   2f538:	ldrb	r0, [r1]
   2f53c:	tst	r0, #4
   2f540:	beq	2f524 <__assert_fail@plt+0x1e0f0>
   2f544:	ldrb	r0, [r8, r2]
   2f548:	ubfx	r7, r0, #5, #3
   2f54c:	and	r0, r0, #31
   2f550:	ldr	r6, [r4, r7, lsl #2]
   2f554:	orr	r0, r6, r3, lsl r0
   2f558:	str	r0, [r4, r7, lsl #2]
   2f55c:	b	2f524 <__assert_fail@plt+0x1e0f0>
   2f560:	mov	r2, #0
   2f564:	mov	r3, #1
   2f568:	b	2f580 <__assert_fail@plt+0x1e14c>
   2f56c:	add	r2, r2, #1
   2f570:	add	r1, r1, #2
   2f574:	mov	r0, #0
   2f578:	cmp	r2, #256	; 0x100
   2f57c:	beq	2f674 <__assert_fail@plt+0x1e240>
   2f580:	ldrb	r0, [r1, #1]
   2f584:	tst	r0, #32
   2f588:	beq	2f56c <__assert_fail@plt+0x1e138>
   2f58c:	ldrb	r0, [r8, r2]
   2f590:	ubfx	r7, r0, #5, #3
   2f594:	and	r0, r0, #31
   2f598:	ldr	r6, [r4, r7, lsl #2]
   2f59c:	orr	r0, r6, r3, lsl r0
   2f5a0:	str	r0, [r4, r7, lsl #2]
   2f5a4:	b	2f56c <__assert_fail@plt+0x1e138>
   2f5a8:	add	r2, r2, #1
   2f5ac:	add	r1, r1, #2
   2f5b0:	mov	r0, #0
   2f5b4:	cmp	r2, #256	; 0x100
   2f5b8:	beq	2f674 <__assert_fail@plt+0x1e240>
   2f5bc:	ldrb	r0, [r1, #1]
   2f5c0:	tst	r0, #16
   2f5c4:	beq	2f5a8 <__assert_fail@plt+0x1e174>
   2f5c8:	ldrb	r0, [r8, r2]
   2f5cc:	ubfx	r7, r0, #5, #3
   2f5d0:	and	r0, r0, #31
   2f5d4:	ldr	r6, [r4, r7, lsl #2]
   2f5d8:	orr	r0, r6, r3, lsl r0
   2f5dc:	str	r0, [r4, r7, lsl #2]
   2f5e0:	b	2f5a8 <__assert_fail@plt+0x1e174>
   2f5e4:	mov	r2, #0
   2f5e8:	mov	r3, #1
   2f5ec:	b	2f604 <__assert_fail@plt+0x1e1d0>
   2f5f0:	add	r2, r2, #1
   2f5f4:	add	r1, r1, #2
   2f5f8:	mov	r0, #0
   2f5fc:	cmp	r2, #256	; 0x100
   2f600:	beq	2f674 <__assert_fail@plt+0x1e240>
   2f604:	ldrb	r0, [r1, #1]
   2f608:	tst	r0, #4
   2f60c:	beq	2f5f0 <__assert_fail@plt+0x1e1bc>
   2f610:	ldrb	r0, [r8, r2]
   2f614:	ubfx	r7, r0, #5, #3
   2f618:	and	r0, r0, #31
   2f61c:	ldr	r6, [r4, r7, lsl #2]
   2f620:	orr	r0, r6, r3, lsl r0
   2f624:	str	r0, [r4, r7, lsl #2]
   2f628:	b	2f5f0 <__assert_fail@plt+0x1e1bc>
   2f62c:	mov	r2, #0
   2f630:	mov	r3, #1
   2f634:	b	2f64c <__assert_fail@plt+0x1e218>
   2f638:	add	r2, r2, #1
   2f63c:	add	r1, r1, #2
   2f640:	mov	r0, #0
   2f644:	cmp	r2, #256	; 0x100
   2f648:	beq	2f674 <__assert_fail@plt+0x1e240>
   2f64c:	ldrb	r0, [r1, #1]
   2f650:	tst	r0, #8
   2f654:	beq	2f638 <__assert_fail@plt+0x1e204>
   2f658:	ldrb	r0, [r8, r2]
   2f65c:	ubfx	r7, r0, #5, #3
   2f660:	and	r0, r0, #31
   2f664:	ldr	r6, [r4, r7, lsl #2]
   2f668:	orr	r0, r6, r3, lsl r0
   2f66c:	str	r0, [r4, r7, lsl #2]
   2f670:	b	2f638 <__assert_fail@plt+0x1e204>
   2f674:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2f678:	mov	r0, #12
   2f67c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2f680:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2f684:	add	fp, sp, #24
   2f688:	ldr	r3, [r1, #24]
   2f68c:	mvn	r7, #1
   2f690:	ldr	r2, [r1, #28]
   2f694:	mov	r4, #0
   2f698:	uxtab	r3, r7, r3
   2f69c:	cmp	r3, #14
   2f6a0:	bhi	2f7c4 <__assert_fail@plt+0x1e390>
   2f6a4:	add	r7, pc, #0
   2f6a8:	ldr	pc, [r7, r3, lsl #2]
   2f6ac:	strdeq	pc, [r2], -r8
   2f6b0:	andeq	pc, r2, r4, asr #15
   2f6b4:	ldrdeq	pc, [r2], -ip
   2f6b8:	andeq	pc, r2, r4, asr #15
   2f6bc:	andeq	pc, r2, r4, asr #15
   2f6c0:	andeq	pc, r2, r4, asr #15
   2f6c4:	andeq	pc, r2, r8, ror #13
   2f6c8:	andeq	pc, r2, r8, ror #13
   2f6cc:	andeq	pc, r2, ip, lsr r7	; <UNPREDICTABLE>
   2f6d0:	andeq	pc, r2, ip, lsr r7	; <UNPREDICTABLE>
   2f6d4:	andeq	pc, r2, r8, ror #13
   2f6d8:	andeq	pc, r2, r4, asr #15
   2f6dc:	andeq	pc, r2, r4, asr #15
   2f6e0:	andeq	pc, r2, r4, asr #15
   2f6e4:	strdeq	pc, [r2], -r8
   2f6e8:	ldr	r1, [r1, #16]
   2f6ec:	ldr	r5, [r1, #28]
   2f6f0:	ldr	r6, [r0, #20]
   2f6f4:	add	r0, r2, r2, lsl #1
   2f6f8:	mov	r1, #1
   2f6fc:	str	r1, [r6, r0, lsl #2]!
   2f700:	mov	r0, #4
   2f704:	mov	r7, r6
   2f708:	str	r1, [r7, #4]!
   2f70c:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2f710:	cmp	r0, #0
   2f714:	str	r0, [r6, #8]
   2f718:	strne	r5, [r0]
   2f71c:	movne	r0, r4
   2f720:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   2f724:	mov	r0, #0
   2f728:	str	r0, [r7]
   2f72c:	str	r0, [r6]
   2f730:	mov	r4, #12
   2f734:	mov	r0, r4
   2f738:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2f73c:	ldrb	r3, [r0, #88]	; 0x58
   2f740:	add	r6, r1, #16
   2f744:	add	r5, r2, r2, lsl #1
   2f748:	orr	r3, r3, #1
   2f74c:	strb	r3, [r0, #88]	; 0x58
   2f750:	mov	r3, r6
   2f754:	ldr	r7, [r1, #4]
   2f758:	ldr	r1, [r1, #8]
   2f75c:	cmp	r1, #0
   2f760:	addne	r3, r1, #12
   2f764:	cmp	r7, #0
   2f768:	ldr	r1, [r3]
   2f76c:	addne	r6, r7, #12
   2f770:	ldr	r8, [r1, #28]
   2f774:	ldr	r1, [r6]
   2f778:	ldr	r6, [r0, #20]
   2f77c:	mov	r0, #2
   2f780:	ldr	r9, [r1, #28]
   2f784:	mov	r7, r6
   2f788:	str	r0, [r7, r5, lsl #2]!
   2f78c:	mov	r0, #8
   2f790:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2f794:	cmp	r0, #0
   2f798:	str	r0, [r7, #8]
   2f79c:	beq	2f730 <__assert_fail@plt+0x1e2fc>
   2f7a0:	add	r1, r6, r5, lsl #2
   2f7a4:	cmp	r9, r8
   2f7a8:	add	r1, r1, #4
   2f7ac:	bne	2f800 <__assert_fail@plt+0x1e3cc>
   2f7b0:	mov	r2, #1
   2f7b4:	str	r2, [r1]
   2f7b8:	str	r9, [r0]
   2f7bc:	mov	r0, r4
   2f7c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2f7c4:	ldr	r1, [r1, #16]
   2f7c8:	ldr	r0, [r0, #12]
   2f7cc:	ldr	r1, [r1, #28]
   2f7d0:	str	r1, [r0, r2, lsl #2]
   2f7d4:	mov	r0, r4
   2f7d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2f7dc:	ldr	r7, [r1, #16]
   2f7e0:	ldr	r3, [r0, #12]
   2f7e4:	ldr	r5, [r7, #28]
   2f7e8:	str	r5, [r3, r2, lsl #2]
   2f7ec:	ldrb	r1, [r1, #24]
   2f7f0:	cmp	r1, #4
   2f7f4:	beq	2f6f0 <__assert_fail@plt+0x1e2bc>
   2f7f8:	mov	r0, r4
   2f7fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2f800:	mov	r2, #2
   2f804:	str	r2, [r1]
   2f808:	stmcs	r0, {r8, r9}
   2f80c:	strcc	r9, [r0]
   2f810:	strcc	r8, [r0, #4]
   2f814:	mov	r0, r4
   2f818:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2f81c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f820:	add	fp, sp, #28
   2f824:	sub	sp, sp, #4
   2f828:	ldr	r6, [r2, #4]
   2f82c:	mov	r8, r0
   2f830:	ldr	r5, [r1]
   2f834:	mov	r9, r2
   2f838:	cmp	r6, #0
   2f83c:	ldrbne	r0, [r1, #28]
   2f840:	andsne	r0, r0, #16
   2f844:	bne	2f9e8 <__assert_fail@plt+0x1e5b4>
   2f848:	ldr	r1, [r5, #64]	; 0x40
   2f84c:	cmp	r1, #31
   2f850:	beq	2fa10 <__assert_fail@plt+0x1e5dc>
   2f854:	ldr	r0, [r5, #56]	; 0x38
   2f858:	add	r0, r0, r1, lsl #5
   2f85c:	add	r2, r1, #1
   2f860:	vmov.i32	q8, #0	; 0x00000000
   2f864:	mov	r1, #0
   2f868:	str	r2, [r5, #64]	; 0x40
   2f86c:	mov	r2, #8
   2f870:	add	sl, r0, #4
   2f874:	str	r1, [r0, #20]
   2f878:	str	r1, [r0, #24]
   2f87c:	str	r2, [r0, #28]
   2f880:	mov	r0, #28
   2f884:	mov	r1, sl
   2f888:	vst1.32	{d16-d17}, [r1], r0
   2f88c:	mvn	r0, #0
   2f890:	str	r0, [r1]
   2f894:	ldr	r1, [r5, #64]	; 0x40
   2f898:	cmp	r1, #31
   2f89c:	beq	2fa38 <__assert_fail@plt+0x1e604>
   2f8a0:	ldr	r0, [r5, #56]	; 0x38
   2f8a4:	add	r0, r0, r1, lsl #5
   2f8a8:	add	r2, r1, #1
   2f8ac:	vmov.i32	q8, #0	; 0x00000000
   2f8b0:	mov	r1, #0
   2f8b4:	str	r2, [r5, #64]	; 0x40
   2f8b8:	mov	r2, #9
   2f8bc:	add	r7, r0, #4
   2f8c0:	str	r1, [r0, #20]
   2f8c4:	str	r1, [r0, #24]
   2f8c8:	str	r2, [r0, #28]
   2f8cc:	mov	r0, #28
   2f8d0:	mov	r1, r7
   2f8d4:	vst1.32	{d16-d17}, [r1], r0
   2f8d8:	mvn	r0, #0
   2f8dc:	str	r0, [r1]
   2f8e0:	cmp	r6, #0
   2f8e4:	mov	r4, r7
   2f8e8:	beq	2f938 <__assert_fail@plt+0x1e504>
   2f8ec:	ldr	r1, [r5, #64]	; 0x40
   2f8f0:	cmp	r1, #31
   2f8f4:	beq	2fa88 <__assert_fail@plt+0x1e654>
   2f8f8:	ldr	r0, [r5, #56]	; 0x38
   2f8fc:	add	r4, r0, r1, lsl #5
   2f900:	add	r2, r1, #1
   2f904:	mov	r0, #0
   2f908:	cmp	r7, #0
   2f90c:	mov	r1, #16
   2f910:	str	r2, [r5, #64]	; 0x40
   2f914:	mvn	r2, #0
   2f918:	str	r0, [r4, #4]!
   2f91c:	add	r3, r4, #20
   2f920:	stmib	r4, {r6, r7}
   2f924:	str	r0, [r4, #12]
   2f928:	str	r0, [r4, #16]
   2f92c:	stm	r3, {r0, r1, r2}
   2f930:	str	r4, [r6]
   2f934:	strne	r4, [r7]
   2f938:	ldr	r1, [r5, #64]	; 0x40
   2f93c:	cmp	r1, #31
   2f940:	beq	2fa60 <__assert_fail@plt+0x1e62c>
   2f944:	ldr	r0, [r5, #56]	; 0x38
   2f948:	add	r6, r0, r1, lsl #5
   2f94c:	add	r2, r1, #1
   2f950:	mov	r0, #0
   2f954:	cmp	sl, #0
   2f958:	mov	r1, #16
   2f95c:	str	r2, [r5, #64]	; 0x40
   2f960:	mvn	r2, #0
   2f964:	str	r0, [r6, #4]!
   2f968:	add	r3, r6, #20
   2f96c:	str	sl, [r6, #4]
   2f970:	str	r4, [r6, #8]
   2f974:	str	r0, [r6, #12]
   2f978:	str	r0, [r6, #16]
   2f97c:	stm	r3, {r0, r1, r2}
   2f980:	strne	r6, [sl]
   2f984:	cmp	r4, #0
   2f988:	strne	r6, [r4]
   2f98c:	cmp	r7, #0
   2f990:	beq	2f9a0 <__assert_fail@plt+0x1e56c>
   2f994:	cmp	sl, #0
   2f998:	cmpne	r4, #0
   2f99c:	bne	2f9b0 <__assert_fail@plt+0x1e57c>
   2f9a0:	mov	r0, #12
   2f9a4:	mov	r6, #0
   2f9a8:	str	r0, [r8]
   2f9ac:	b	2fa04 <__assert_fail@plt+0x1e5d0>
   2f9b0:	cmp	r6, #0
   2f9b4:	beq	2f9a0 <__assert_fail@plt+0x1e56c>
   2f9b8:	ldr	r0, [r9, #20]
   2f9bc:	str	r0, [r7, #20]
   2f9c0:	str	r0, [sl, #20]
   2f9c4:	ldr	r1, [r9, #24]
   2f9c8:	ldr	r0, [r7, #24]
   2f9cc:	lsr	r1, r1, #19
   2f9d0:	bfi	r0, r1, #19, #1
   2f9d4:	str	r0, [r7, #24]
   2f9d8:	ldr	r0, [sl, #24]
   2f9dc:	bfi	r0, r1, #19, #1
   2f9e0:	str	r0, [sl, #24]
   2f9e4:	b	2fa04 <__assert_fail@plt+0x1e5d0>
   2f9e8:	ldr	r0, [r9, #20]
   2f9ec:	cmp	r0, #31
   2f9f0:	bgt	2fa04 <__assert_fail@plt+0x1e5d0>
   2f9f4:	ldr	r1, [r5, #80]	; 0x50
   2f9f8:	mov	r2, #1
   2f9fc:	tst	r1, r2, lsl r0
   2fa00:	bne	2f848 <__assert_fail@plt+0x1e414>
   2fa04:	mov	r0, r6
   2fa08:	sub	sp, fp, #28
   2fa0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fa10:	mov	r0, #996	; 0x3e4
   2fa14:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2fa18:	cmp	r0, #0
   2fa1c:	beq	2fab0 <__assert_fail@plt+0x1e67c>
   2fa20:	ldr	r1, [r5, #56]	; 0x38
   2fa24:	str	r1, [r0]
   2fa28:	mov	r1, #0
   2fa2c:	str	r1, [r5, #64]	; 0x40
   2fa30:	str	r0, [r5, #56]	; 0x38
   2fa34:	b	2f858 <__assert_fail@plt+0x1e424>
   2fa38:	mov	r0, #996	; 0x3e4
   2fa3c:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2fa40:	cmp	r0, #0
   2fa44:	beq	2fab8 <__assert_fail@plt+0x1e684>
   2fa48:	ldr	r1, [r5, #56]	; 0x38
   2fa4c:	str	r1, [r0]
   2fa50:	mov	r1, #0
   2fa54:	str	r1, [r5, #64]	; 0x40
   2fa58:	str	r0, [r5, #56]	; 0x38
   2fa5c:	b	2f8a4 <__assert_fail@plt+0x1e470>
   2fa60:	mov	r0, #996	; 0x3e4
   2fa64:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2fa68:	cmp	r0, #0
   2fa6c:	beq	2fac0 <__assert_fail@plt+0x1e68c>
   2fa70:	ldr	r1, [r5, #56]	; 0x38
   2fa74:	str	r1, [r0]
   2fa78:	mov	r1, #0
   2fa7c:	str	r1, [r5, #64]	; 0x40
   2fa80:	str	r0, [r5, #56]	; 0x38
   2fa84:	b	2f948 <__assert_fail@plt+0x1e514>
   2fa88:	mov	r0, #996	; 0x3e4
   2fa8c:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2fa90:	cmp	r0, #0
   2fa94:	beq	2fad0 <__assert_fail@plt+0x1e69c>
   2fa98:	ldr	r1, [r5, #56]	; 0x38
   2fa9c:	str	r1, [r0]
   2faa0:	mov	r1, #0
   2faa4:	str	r1, [r5, #64]	; 0x40
   2faa8:	str	r0, [r5, #56]	; 0x38
   2faac:	b	2f8fc <__assert_fail@plt+0x1e4c8>
   2fab0:	mov	sl, #0
   2fab4:	b	2f894 <__assert_fail@plt+0x1e460>
   2fab8:	mov	r7, #0
   2fabc:	b	2f8e0 <__assert_fail@plt+0x1e4ac>
   2fac0:	mov	r6, #0
   2fac4:	cmp	r7, #0
   2fac8:	bne	2f994 <__assert_fail@plt+0x1e560>
   2facc:	b	2f9a0 <__assert_fail@plt+0x1e56c>
   2fad0:	mov	r4, #0
   2fad4:	b	2f938 <__assert_fail@plt+0x1e504>
   2fad8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fadc:	add	fp, sp, #28
   2fae0:	sub	sp, sp, #12
   2fae4:	mov	r4, r0
   2fae8:	ldr	r7, [r0, #4]
   2faec:	ldr	r0, [r0, #8]
   2faf0:	mov	r5, r2
   2faf4:	mov	r9, r1
   2faf8:	cmp	r0, r7
   2fafc:	bcs	2fbc8 <__assert_fail@plt+0x1e794>
   2fb00:	ldr	r1, [r4]
   2fb04:	str	r9, [r1, r0, lsl #3]!
   2fb08:	str	r5, [r1, #4]
   2fb0c:	ldr	r0, [r4]
   2fb10:	ldr	r1, [r4, #8]
   2fb14:	add	r0, r0, r1, lsl #3
   2fb18:	ldr	r1, [r0, #4]
   2fb1c:	bfc	r1, #8, #10
   2fb20:	str	r1, [r0, #4]
   2fb24:	uxtb	r1, r5
   2fb28:	cmp	r1, #5
   2fb2c:	bne	2fb40 <__assert_fail@plt+0x1e70c>
   2fb30:	ldr	r2, [r4, #92]	; 0x5c
   2fb34:	mov	r0, #1048576	; 0x100000
   2fb38:	cmp	r2, #1
   2fb3c:	bgt	2fb50 <__assert_fail@plt+0x1e71c>
   2fb40:	sub	r0, r1, #6
   2fb44:	clz	r0, r0
   2fb48:	lsr	r0, r0, #5
   2fb4c:	lsl	r0, r0, #20
   2fb50:	ldr	r1, [r4]
   2fb54:	ldr	r2, [r4, #8]
   2fb58:	add	r1, r1, r2, lsl #3
   2fb5c:	ldr	r2, [r1, #4]
   2fb60:	bic	r2, r2, #1048576	; 0x100000
   2fb64:	orr	r0, r2, r0
   2fb68:	mvn	r2, #0
   2fb6c:	str	r0, [r1, #4]
   2fb70:	ldr	r0, [r4, #8]
   2fb74:	ldr	r1, [r4, #12]
   2fb78:	str	r2, [r1, r0, lsl #2]
   2fb7c:	mov	r2, #0
   2fb80:	ldr	r0, [r4, #8]
   2fb84:	ldr	r1, [r4, #20]
   2fb88:	add	r0, r0, r0, lsl #1
   2fb8c:	str	r2, [r1, r0, lsl #2]!
   2fb90:	str	r2, [r1, #4]
   2fb94:	str	r2, [r1, #8]
   2fb98:	ldr	r0, [r4, #8]
   2fb9c:	ldr	r1, [r4, #24]
   2fba0:	add	r0, r0, r0, lsl #1
   2fba4:	str	r2, [r1, r0, lsl #2]!
   2fba8:	str	r2, [r1, #4]
   2fbac:	str	r2, [r1, #8]
   2fbb0:	ldr	r6, [r4, #8]
   2fbb4:	add	r0, r6, #1
   2fbb8:	str	r0, [r4, #8]
   2fbbc:	mov	r0, r6
   2fbc0:	sub	sp, fp, #28
   2fbc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fbc8:	movw	r0, #21845	; 0x5555
   2fbcc:	lsl	r1, r7, #1
   2fbd0:	mvn	r6, #0
   2fbd4:	movt	r0, #5461	; 0x1555
   2fbd8:	cmp	r1, r0
   2fbdc:	bhi	2fbbc <__assert_fail@plt+0x1e788>
   2fbe0:	ldr	r0, [r4]
   2fbe4:	str	r1, [sp, #8]
   2fbe8:	lsl	r1, r7, #4
   2fbec:	bl	38020 <__assert_fail@plt+0x26bec>
   2fbf0:	cmp	r0, #0
   2fbf4:	beq	2fbbc <__assert_fail@plt+0x1e788>
   2fbf8:	str	r0, [r4]
   2fbfc:	lsl	r8, r7, #3
   2fc00:	ldr	r0, [r4, #12]
   2fc04:	mov	r1, r8
   2fc08:	bl	38020 <__assert_fail@plt+0x26bec>
   2fc0c:	str	r0, [sp, #4]
   2fc10:	ldr	r0, [r4, #16]
   2fc14:	mov	r1, r8
   2fc18:	bl	38020 <__assert_fail@plt+0x26bec>
   2fc1c:	mov	r2, r0
   2fc20:	add	r1, r7, r7, lsl #1
   2fc24:	ldr	r0, [r4, #20]
   2fc28:	mov	r7, r2
   2fc2c:	lsl	r8, r1, #3
   2fc30:	mov	r1, r8
   2fc34:	bl	38020 <__assert_fail@plt+0x26bec>
   2fc38:	mov	sl, r0
   2fc3c:	ldr	r0, [r4, #24]
   2fc40:	mov	r1, r8
   2fc44:	bl	38020 <__assert_fail@plt+0x26bec>
   2fc48:	mov	r8, r0
   2fc4c:	ldr	r0, [sp, #4]
   2fc50:	cmp	r0, #0
   2fc54:	beq	2fc64 <__assert_fail@plt+0x1e830>
   2fc58:	cmp	r7, #0
   2fc5c:	cmpne	sl, #0
   2fc60:	bne	2fc84 <__assert_fail@plt+0x1e850>
   2fc64:	bl	138e8 <__assert_fail@plt+0x24b4>
   2fc68:	mov	r0, r7
   2fc6c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2fc70:	mov	r0, sl
   2fc74:	bl	138e8 <__assert_fail@plt+0x24b4>
   2fc78:	mov	r0, r8
   2fc7c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2fc80:	b	2fbbc <__assert_fail@plt+0x1e788>
   2fc84:	cmp	r8, #0
   2fc88:	beq	2fc64 <__assert_fail@plt+0x1e830>
   2fc8c:	add	r1, r4, #12
   2fc90:	stm	r1, {r0, r7, sl}
   2fc94:	str	r8, [r4, #24]
   2fc98:	ldr	r0, [sp, #8]
   2fc9c:	str	r0, [r4, #4]
   2fca0:	ldr	r0, [r4, #8]
   2fca4:	b	2fb00 <__assert_fail@plt+0x1e6cc>
   2fca8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fcac:	add	fp, sp, #28
   2fcb0:	sub	sp, sp, #44	; 0x2c
   2fcb4:	mov	r8, r0
   2fcb8:	ldr	r0, [r1, #20]
   2fcbc:	add	r4, r2, r2, lsl #1
   2fcc0:	mov	r5, r1
   2fcc4:	mov	r1, #0
   2fcc8:	mov	r9, r3
   2fccc:	mov	r6, r2
   2fcd0:	add	r0, r0, r4, lsl #2
   2fcd4:	ldr	r0, [r0, #4]
   2fcd8:	str	r1, [sp, #36]	; 0x24
   2fcdc:	add	r0, r0, #1
   2fce0:	str	r0, [sp, #32]
   2fce4:	lsl	r0, r0, #2
   2fce8:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   2fcec:	cmp	r0, #0
   2fcf0:	str	r0, [sp, #40]	; 0x28
   2fcf4:	beq	2fec4 <__assert_fail@plt+0x1ea90>
   2fcf8:	mov	r1, #1
   2fcfc:	str	r6, [r0]
   2fd00:	str	r1, [sp, #36]	; 0x24
   2fd04:	mvn	r1, #0
   2fd08:	ldr	r0, [r5, #24]
   2fd0c:	add	r0, r0, r4, lsl #2
   2fd10:	str	r1, [r0, #4]
   2fd14:	ldr	r2, [r5]
   2fd18:	add	r0, r2, r6, lsl #3
   2fd1c:	ldr	r0, [r0, #4]
   2fd20:	ubfx	r1, r0, #8, #10
   2fd24:	cmp	r1, #0
   2fd28:	beq	2fd84 <__assert_fail@plt+0x1e950>
   2fd2c:	ldr	r3, [r5, #20]
   2fd30:	add	r3, r3, r4, lsl #2
   2fd34:	ldr	r7, [r3, #4]
   2fd38:	cmp	r7, #0
   2fd3c:	beq	2fd84 <__assert_fail@plt+0x1e950>
   2fd40:	ldr	r3, [r3, #8]
   2fd44:	ldr	r3, [r3]
   2fd48:	add	r2, r2, r3, lsl #3
   2fd4c:	ldrb	r2, [r2, #6]
   2fd50:	tst	r2, #4
   2fd54:	bne	2fd84 <__assert_fail@plt+0x1e950>
   2fd58:	str	r1, [sp]
   2fd5c:	mov	r0, r5
   2fd60:	mov	r1, r6
   2fd64:	mov	r2, r6
   2fd68:	mov	r3, r6
   2fd6c:	bl	2fed0 <__assert_fail@plt+0x1ea9c>
   2fd70:	cmp	r0, #0
   2fd74:	bne	2febc <__assert_fail@plt+0x1ea88>
   2fd78:	ldr	r0, [r5]
   2fd7c:	add	r0, r0, r6, lsl #3
   2fd80:	ldr	r0, [r0, #4]
   2fd84:	tst	r0, #8
   2fd88:	beq	2fe90 <__assert_fail@plt+0x1ea5c>
   2fd8c:	ldr	r0, [r5, #20]
   2fd90:	add	r1, r0, r4, lsl #2
   2fd94:	ldr	r1, [r1, #4]
   2fd98:	cmp	r1, #1
   2fd9c:	blt	2fe90 <__assert_fail@plt+0x1ea5c>
   2fda0:	str	r8, [sp, #12]
   2fda4:	mov	r8, #0
   2fda8:	add	r7, sp, #16
   2fdac:	add	sl, sp, #32
   2fdb0:	mov	r6, #0
   2fdb4:	str	r9, [sp, #8]
   2fdb8:	b	2fdd8 <__assert_fail@plt+0x1e9a4>
   2fdbc:	mov	r8, #1
   2fdc0:	ldr	r0, [r5, #20]
   2fdc4:	add	r6, r6, #1
   2fdc8:	add	r1, r0, r4, lsl #2
   2fdcc:	ldr	r1, [r1, #4]
   2fdd0:	cmp	r6, r1
   2fdd4:	bge	2fe64 <__assert_fail@plt+0x1ea30>
   2fdd8:	add	r0, r0, r4, lsl #2
   2fddc:	ldr	r0, [r0, #8]
   2fde0:	ldr	r2, [r0, r6, lsl #2]
   2fde4:	ldr	r0, [r5, #24]
   2fde8:	add	r9, r2, r2, lsl #1
   2fdec:	add	r0, r0, r9, lsl #2
   2fdf0:	ldr	r1, [r0, #4]
   2fdf4:	cmn	r1, #1
   2fdf8:	beq	2fdbc <__assert_fail@plt+0x1e988>
   2fdfc:	cmp	r1, #0
   2fe00:	bne	2fe20 <__assert_fail@plt+0x1e9ec>
   2fe04:	mov	r0, r7
   2fe08:	mov	r1, r5
   2fe0c:	mov	r3, #0
   2fe10:	bl	2fca8 <__assert_fail@plt+0x1e874>
   2fe14:	cmp	r0, #0
   2fe18:	beq	2fe30 <__assert_fail@plt+0x1e9fc>
   2fe1c:	b	2febc <__assert_fail@plt+0x1ea88>
   2fe20:	vldr	d16, [r0]
   2fe24:	ldr	r0, [r0, #8]
   2fe28:	str	r0, [sp, #24]
   2fe2c:	vstr	d16, [sp, #16]
   2fe30:	mov	r0, sl
   2fe34:	mov	r1, r7
   2fe38:	bl	30358 <__assert_fail@plt+0x1ef24>
   2fe3c:	cmp	r0, #0
   2fe40:	bne	2febc <__assert_fail@plt+0x1ea88>
   2fe44:	ldr	r0, [r5, #24]
   2fe48:	add	r0, r0, r9, lsl #2
   2fe4c:	ldr	r0, [r0, #4]
   2fe50:	cmp	r0, #0
   2fe54:	bne	2fdc0 <__assert_fail@plt+0x1e98c>
   2fe58:	ldr	r0, [sp, #24]
   2fe5c:	bl	138e8 <__assert_fail@plt+0x24b4>
   2fe60:	b	2fdbc <__assert_fail@plt+0x1e988>
   2fe64:	tst	r8, #1
   2fe68:	ldr	r8, [sp, #12]
   2fe6c:	ldr	r0, [sp, #8]
   2fe70:	beq	2fe90 <__assert_fail@plt+0x1ea5c>
   2fe74:	cmp	r0, #0
   2fe78:	bne	2fe90 <__assert_fail@plt+0x1ea5c>
   2fe7c:	ldr	r0, [r5, #24]
   2fe80:	mov	r1, #0
   2fe84:	add	r0, r0, r4, lsl #2
   2fe88:	str	r1, [r0, #4]
   2fe8c:	b	2fea8 <__assert_fail@plt+0x1ea74>
   2fe90:	ldr	r0, [r5, #24]
   2fe94:	vldr	d16, [sp, #32]
   2fe98:	ldr	r1, [sp, #40]	; 0x28
   2fe9c:	add	r0, r0, r4, lsl #2
   2fea0:	str	r1, [r0, #8]
   2fea4:	vstr	d16, [r0]
   2fea8:	ldr	r0, [sp, #40]	; 0x28
   2feac:	vldr	d16, [sp, #32]
   2feb0:	str	r0, [r8, #8]
   2feb4:	mov	r0, #0
   2feb8:	vstr	d16, [r8]
   2febc:	sub	sp, fp, #28
   2fec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fec4:	mov	r0, #12
   2fec8:	sub	sp, fp, #28
   2fecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fed0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fed4:	add	fp, sp, #28
   2fed8:	sub	sp, sp, #20
   2fedc:	mov	r9, r0
   2fee0:	ldr	r0, [fp, #8]
   2fee4:	mov	r8, r2
   2fee8:	mov	r5, r1
   2feec:	str	r3, [sp, #8]
   2fef0:	str	r0, [sp, #12]
   2fef4:	ldr	r1, [sp, #12]
   2fef8:	movw	r0, #65280	; 0xff00
   2fefc:	movt	r0, #3
   2ff00:	and	r0, r0, r1, lsl #8
   2ff04:	str	r0, [sp, #16]
   2ff08:	ldr	r2, [r9]
   2ff0c:	add	r3, r2, r5, lsl #3
   2ff10:	ldrb	r0, [r3, #4]!
   2ff14:	cmp	r0, #4
   2ff18:	bne	2fff0 <__assert_fail@plt+0x1ebbc>
   2ff1c:	ldr	r0, [r9, #12]
   2ff20:	ldr	r1, [r9, #20]
   2ff24:	add	r7, r8, r8, lsl #1
   2ff28:	ldr	r6, [r0, r5, lsl #2]
   2ff2c:	add	r0, r1, r7, lsl #2
   2ff30:	mov	r1, #0
   2ff34:	str	r1, [r0, #4]
   2ff38:	mov	r0, r9
   2ff3c:	ldr	r1, [r2, r6, lsl #3]!
   2ff40:	ldr	r2, [r2, #4]
   2ff44:	bl	2fad8 <__assert_fail@plt+0x1e6a4>
   2ff48:	cmn	r0, #1
   2ff4c:	beq	30350 <__assert_fail@plt+0x1ef1c>
   2ff50:	mov	r4, r0
   2ff54:	ldr	r0, [r9]
   2ff58:	movw	r2, #255	; 0xff
   2ff5c:	movt	r2, #65532	; 0xfffc
   2ff60:	add	r0, r0, r4, lsl #3
   2ff64:	ldr	r1, [r0, #4]
   2ff68:	and	r1, r1, r2
   2ff6c:	ldr	r2, [sp, #16]
   2ff70:	orr	r1, r1, r2
   2ff74:	movw	r2, #65280	; 0xff00
   2ff78:	str	r1, [r0, #4]
   2ff7c:	movt	r2, #3
   2ff80:	ldr	r0, [r9]
   2ff84:	add	r1, r0, r6, lsl #3
   2ff88:	add	r0, r0, r4, lsl #3
   2ff8c:	ldr	r1, [r1, #4]
   2ff90:	and	r1, r1, r2
   2ff94:	ldr	r2, [r0, #4]
   2ff98:	orr	r1, r1, r2
   2ff9c:	str	r1, [r0, #4]
   2ffa0:	ldr	r0, [r9]
   2ffa4:	add	r0, r0, r4, lsl #3
   2ffa8:	ldr	r1, [r0, #4]
   2ffac:	orr	r1, r1, #262144	; 0x40000
   2ffb0:	str	r1, [r0, #4]
   2ffb4:	ldr	r0, [r9, #16]
   2ffb8:	str	r6, [r0, r4, lsl #2]
   2ffbc:	ldr	r0, [r9, #12]
   2ffc0:	ldr	r1, [r0, r5, lsl #2]
   2ffc4:	str	r1, [r0, r8, lsl #2]
   2ffc8:	mov	r1, r4
   2ffcc:	ldr	r0, [r9, #20]
   2ffd0:	add	r0, r0, r7, lsl #2
   2ffd4:	bl	304e4 <__assert_fail@plt+0x1f0b0>
   2ffd8:	cmp	r0, #0
   2ffdc:	mov	r5, r6
   2ffe0:	mov	r8, r4
   2ffe4:	mov	r7, #12
   2ffe8:	bne	2ff08 <__assert_fail@plt+0x1ead4>
   2ffec:	b	30320 <__assert_fail@plt+0x1eeec>
   2fff0:	ldr	r0, [r9, #20]
   2fff4:	add	ip, r5, r5, lsl #1
   2fff8:	add	r7, r0, ip, lsl #2
   2fffc:	ldr	r1, [r7, #4]
   30000:	cmp	r1, #0
   30004:	beq	30304 <__assert_fail@plt+0x1eed0>
   30008:	ldr	r7, [r7, #8]
   3000c:	add	r4, r8, r8, lsl #1
   30010:	cmp	r1, #1
   30014:	add	r0, r0, r4, lsl #2
   30018:	ldr	sl, [r7]
   3001c:	mov	r7, #0
   30020:	str	r7, [r0, #4]
   30024:	beq	3022c <__assert_fail@plt+0x1edf8>
   30028:	ldr	r1, [r9, #8]
   3002c:	mov	r8, r4
   30030:	ldr	r4, [sp, #12]
   30034:	sub	r3, r1, #1
   30038:	cmp	r3, #1
   3003c:	blt	3008c <__assert_fail@plt+0x1ec58>
   30040:	add	r3, r2, r3, lsl #3
   30044:	ldr	r7, [r3, #4]
   30048:	ands	r3, r7, #262144	; 0x40000
   3004c:	beq	3008c <__assert_fail@plt+0x1ec58>
   30050:	ldr	r6, [r9, #16]
   30054:	sub	r3, r2, #12
   30058:	sub	r6, r6, #4
   3005c:	ldr	r5, [r6, r1, lsl #2]
   30060:	cmp	r5, sl
   30064:	ubfxeq	r7, r7, #8, #10
   30068:	cmpeq	r7, r4
   3006c:	beq	30210 <__assert_fail@plt+0x1eddc>
   30070:	sub	r7, r1, #2
   30074:	cmp	r7, #1
   30078:	blt	3008c <__assert_fail@plt+0x1ec58>
   3007c:	ldr	r7, [r3, r1, lsl #3]
   30080:	sub	r1, r1, #1
   30084:	ands	r5, r7, #262144	; 0x40000
   30088:	bne	3005c <__assert_fail@plt+0x1ec28>
   3008c:	ldr	r1, [r2, sl, lsl #3]!
   30090:	mov	r0, r9
   30094:	mov	r5, ip
   30098:	ldr	r2, [r2, #4]
   3009c:	bl	2fad8 <__assert_fail@plt+0x1e6a4>
   300a0:	mov	r7, #12
   300a4:	cmn	r0, #1
   300a8:	beq	30320 <__assert_fail@plt+0x1eeec>
   300ac:	mov	r6, r0
   300b0:	ldr	r0, [r9]
   300b4:	movw	r2, #255	; 0xff
   300b8:	mov	r4, r8
   300bc:	movt	r2, #65532	; 0xfffc
   300c0:	add	r0, r0, r6, lsl #3
   300c4:	ldr	r1, [r0, #4]
   300c8:	and	r1, r1, r2
   300cc:	ldr	r2, [sp, #16]
   300d0:	orr	r1, r1, r2
   300d4:	movw	r2, #65280	; 0xff00
   300d8:	str	r1, [r0, #4]
   300dc:	movt	r2, #3
   300e0:	ldr	r0, [r9]
   300e4:	add	r1, r0, sl, lsl #3
   300e8:	add	r0, r0, r6, lsl #3
   300ec:	ldr	r1, [r1, #4]
   300f0:	and	r1, r1, r2
   300f4:	ldr	r2, [r0, #4]
   300f8:	orr	r1, r1, r2
   300fc:	str	r1, [r0, #4]
   30100:	ldr	r0, [r9]
   30104:	add	r0, r0, r6, lsl #3
   30108:	ldr	r1, [r0, #4]
   3010c:	orr	r1, r1, #262144	; 0x40000
   30110:	str	r1, [r0, #4]
   30114:	mov	r1, r6
   30118:	ldr	r0, [r9, #16]
   3011c:	str	sl, [r0, r6, lsl #2]
   30120:	ldr	r0, [r9, #20]
   30124:	add	r0, r0, r8, lsl #2
   30128:	bl	304e4 <__assert_fail@plt+0x1f0b0>
   3012c:	cmp	r0, #0
   30130:	beq	30320 <__assert_fail@plt+0x1eeec>
   30134:	ldr	r0, [sp, #12]
   30138:	ldr	r3, [sp, #8]
   3013c:	mov	r1, sl
   30140:	mov	r2, r6
   30144:	str	r0, [sp]
   30148:	mov	r0, r9
   3014c:	bl	2fed0 <__assert_fail@plt+0x1ea9c>
   30150:	cmp	r0, #0
   30154:	bne	3031c <__assert_fail@plt+0x1eee8>
   30158:	ldr	r1, [r9, #20]
   3015c:	ldr	r0, [r9]
   30160:	add	r1, r1, r5, lsl #2
   30164:	ldr	r1, [r1, #8]
   30168:	ldr	r5, [r1, #4]
   3016c:	ldr	r1, [r0, r5, lsl #3]!
   30170:	ldr	r2, [r0, #4]
   30174:	mov	r0, r9
   30178:	bl	2fad8 <__assert_fail@plt+0x1e6a4>
   3017c:	mov	r7, #12
   30180:	cmn	r0, #1
   30184:	beq	30320 <__assert_fail@plt+0x1eeec>
   30188:	mov	r8, r0
   3018c:	ldr	r0, [r9]
   30190:	movw	r2, #255	; 0xff
   30194:	movt	r2, #65532	; 0xfffc
   30198:	add	r0, r0, r8, lsl #3
   3019c:	ldr	r1, [r0, #4]
   301a0:	and	r1, r1, r2
   301a4:	ldr	r2, [sp, #16]
   301a8:	orr	r1, r1, r2
   301ac:	movw	r2, #65280	; 0xff00
   301b0:	str	r1, [r0, #4]
   301b4:	movt	r2, #3
   301b8:	ldr	r0, [r9]
   301bc:	add	r1, r0, r5, lsl #3
   301c0:	add	r0, r0, r8, lsl #3
   301c4:	ldr	r1, [r1, #4]
   301c8:	and	r1, r1, r2
   301cc:	ldr	r2, [r0, #4]
   301d0:	orr	r1, r1, r2
   301d4:	str	r1, [r0, #4]
   301d8:	ldr	r0, [r9]
   301dc:	add	r0, r0, r8, lsl #3
   301e0:	ldr	r1, [r0, #4]
   301e4:	orr	r1, r1, #262144	; 0x40000
   301e8:	str	r1, [r0, #4]
   301ec:	mov	r1, r8
   301f0:	ldr	r0, [r9, #16]
   301f4:	str	r5, [r0, r8, lsl #2]
   301f8:	ldr	r0, [r9, #20]
   301fc:	add	r0, r0, r4, lsl #2
   30200:	bl	304e4 <__assert_fail@plt+0x1f0b0>
   30204:	cmp	r0, #0
   30208:	bne	2ff08 <__assert_fail@plt+0x1ead4>
   3020c:	b	30320 <__assert_fail@plt+0x1eeec>
   30210:	sub	r1, r1, #1
   30214:	mov	r5, ip
   30218:	bl	304e4 <__assert_fail@plt+0x1f0b0>
   3021c:	cmp	r0, #0
   30220:	mov	r4, r8
   30224:	bne	30158 <__assert_fail@plt+0x1ed24>
   30228:	b	30350 <__assert_fail@plt+0x1ef1c>
   3022c:	ldr	r1, [sp, #8]
   30230:	cmp	r5, r1
   30234:	bne	30240 <__assert_fail@plt+0x1ee0c>
   30238:	cmp	r8, r5
   3023c:	bne	3032c <__assert_fail@plt+0x1eef8>
   30240:	ldr	r1, [r2, sl, lsl #3]!
   30244:	ldr	r6, [r3]
   30248:	mov	r0, r9
   3024c:	ldr	r2, [r2, #4]
   30250:	bl	2fad8 <__assert_fail@plt+0x1e6a4>
   30254:	mov	r8, r0
   30258:	ubfx	r0, r6, #8, #10
   3025c:	mov	r7, #12
   30260:	cmn	r8, #1
   30264:	beq	30320 <__assert_fail@plt+0x1eeec>
   30268:	ldr	r1, [sp, #12]
   3026c:	movw	r7, #255	; 0xff
   30270:	movt	r7, #65532	; 0xfffc
   30274:	orr	r1, r0, r1
   30278:	movw	r0, #65280	; 0xff00
   3027c:	movt	r0, #3
   30280:	str	r1, [sp, #12]
   30284:	mov	r3, r0
   30288:	and	r0, r0, r1, lsl #8
   3028c:	ldr	r1, [r9]
   30290:	add	r1, r1, r8, lsl #3
   30294:	ldr	r2, [r1, #4]
   30298:	and	r2, r2, r7
   3029c:	mov	r7, #12
   302a0:	orr	r0, r2, r0
   302a4:	str	r0, [r1, #4]
   302a8:	ldr	r0, [r9]
   302ac:	add	r1, r0, sl, lsl #3
   302b0:	add	r0, r0, r8, lsl #3
   302b4:	ldr	r1, [r1, #4]
   302b8:	ldr	r2, [r0, #4]
   302bc:	and	r1, r1, r3
   302c0:	orr	r1, r1, r2
   302c4:	str	r1, [r0, #4]
   302c8:	ldr	r0, [r9]
   302cc:	add	r0, r0, r8, lsl #3
   302d0:	ldr	r1, [r0, #4]
   302d4:	orr	r1, r1, #262144	; 0x40000
   302d8:	str	r1, [r0, #4]
   302dc:	mov	r1, r8
   302e0:	ldr	r0, [r9, #16]
   302e4:	str	sl, [r0, r8, lsl #2]
   302e8:	ldr	r0, [r9, #20]
   302ec:	add	r0, r0, r4, lsl #2
   302f0:	bl	304e4 <__assert_fail@plt+0x1f0b0>
   302f4:	cmp	r0, #0
   302f8:	mov	r5, sl
   302fc:	bne	2fef4 <__assert_fail@plt+0x1eac0>
   30300:	b	30320 <__assert_fail@plt+0x1eeec>
   30304:	ldr	r0, [r9, #12]
   30308:	ldr	r1, [r0, r5, lsl #2]
   3030c:	str	r1, [r0, r8, lsl #2]
   30310:	mov	r0, #0
   30314:	sub	sp, fp, #28
   30318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3031c:	mov	r7, r0
   30320:	mov	r0, r7
   30324:	sub	sp, fp, #28
   30328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3032c:	mov	r1, sl
   30330:	bl	304e4 <__assert_fail@plt+0x1f0b0>
   30334:	mov	r1, r0
   30338:	mov	r7, #12
   3033c:	mov	r0, #0
   30340:	cmp	r1, #0
   30344:	moveq	r0, r7
   30348:	sub	sp, fp, #28
   3034c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30350:	mov	r7, #12
   30354:	b	30320 <__assert_fail@plt+0x1eeec>
   30358:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3035c:	add	fp, sp, #24
   30360:	mov	r8, #0
   30364:	cmp	r1, #0
   30368:	beq	304b8 <__assert_fail@plt+0x1f084>
   3036c:	mov	r6, r1
   30370:	ldr	r1, [r1, #4]
   30374:	cmp	r1, #0
   30378:	beq	304b8 <__assert_fail@plt+0x1f084>
   3037c:	mov	r9, r0
   30380:	ldr	r2, [r0]
   30384:	ldr	r0, [r0, #4]
   30388:	add	r3, r0, r1, lsl #1
   3038c:	cmp	r2, r3
   30390:	bge	303bc <__assert_fail@plt+0x1ef88>
   30394:	ldr	r0, [r9, #8]
   30398:	add	r7, r2, r1
   3039c:	lsl	r1, r7, #3
   303a0:	bl	38020 <__assert_fail@plt+0x26bec>
   303a4:	cmp	r0, #0
   303a8:	beq	304d8 <__assert_fail@plt+0x1f0a4>
   303ac:	str	r0, [r9, #8]
   303b0:	lsl	r0, r7, #1
   303b4:	str	r0, [r9]
   303b8:	ldr	r0, [r9, #4]
   303bc:	cmp	r0, #0
   303c0:	beq	304c0 <__assert_fail@plt+0x1f08c>
   303c4:	ldr	r2, [r6, #4]
   303c8:	sub	r1, r0, #1
   303cc:	add	r7, r0, r2, lsl #1
   303d0:	sub	r0, r2, #1
   303d4:	orrs	r2, r0, r1
   303d8:	bmi	30420 <__assert_fail@plt+0x1efec>
   303dc:	ldr	r2, [r6, #8]
   303e0:	ldr	r3, [r9, #8]
   303e4:	b	30404 <__assert_fail@plt+0x1efd0>
   303e8:	sublt	r7, r7, #1
   303ec:	subge	r1, r1, #1
   303f0:	sublt	r0, r0, #1
   303f4:	strlt	r4, [r3, r7, lsl #2]
   303f8:	orr	r5, r0, r1
   303fc:	cmn	r5, #1
   30400:	ble	30420 <__assert_fail@plt+0x1efec>
   30404:	ldr	r4, [r2, r0, lsl #2]
   30408:	ldr	r5, [r3, r1, lsl #2]
   3040c:	cmp	r5, r4
   30410:	bne	303e8 <__assert_fail@plt+0x1efb4>
   30414:	sub	r1, r1, #1
   30418:	sub	r0, r0, #1
   3041c:	b	303f8 <__assert_fail@plt+0x1efc4>
   30420:	cmp	r0, #0
   30424:	bmi	30444 <__assert_fail@plt+0x1f010>
   30428:	add	r2, r0, #1
   3042c:	ldr	r0, [r9, #8]
   30430:	ldr	r1, [r6, #8]
   30434:	sub	r7, r7, r2
   30438:	lsl	r2, r2, #2
   3043c:	add	r0, r0, r7, lsl #2
   30440:	bl	111e8 <memcpy@plt>
   30444:	ldr	r0, [r9, #4]
   30448:	ldr	r2, [r6, #4]
   3044c:	sub	r1, r0, #1
   30450:	add	r3, r1, r2, lsl #1
   30454:	sub	r2, r3, r7
   30458:	adds	r2, r2, #1
   3045c:	bcs	304b8 <__assert_fail@plt+0x1f084>
   30460:	add	r0, r2, r0
   30464:	str	r0, [r9, #4]
   30468:	ldr	r0, [r9, #8]
   3046c:	ldr	r6, [r0, r1, lsl #2]
   30470:	ldr	r5, [r0, r3, lsl #2]
   30474:	cmp	r5, r6
   30478:	ble	30494 <__assert_fail@plt+0x1f060>
   3047c:	add	r6, r2, r1
   30480:	subs	r2, r2, #1
   30484:	sub	r3, r3, #1
   30488:	str	r5, [r0, r6, lsl #2]
   3048c:	bne	3046c <__assert_fail@plt+0x1f038>
   30490:	b	304b8 <__assert_fail@plt+0x1f084>
   30494:	add	r5, r2, r1
   30498:	cmp	r1, #0
   3049c:	str	r6, [r0, r5, lsl #2]
   304a0:	sub	r6, r1, #1
   304a4:	mov	r1, r6
   304a8:	bgt	3046c <__assert_fail@plt+0x1f038>
   304ac:	add	r1, r0, r7, lsl #2
   304b0:	lsl	r2, r2, #2
   304b4:	bl	111e8 <memcpy@plt>
   304b8:	mov	r0, r8
   304bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   304c0:	ldr	r0, [r6, #4]
   304c4:	str	r0, [r9, #4]
   304c8:	ldr	r0, [r9, #8]
   304cc:	ldr	r2, [r6, #4]
   304d0:	ldr	r1, [r6, #8]
   304d4:	b	304b0 <__assert_fail@plt+0x1f07c>
   304d8:	mov	r8, #12
   304dc:	mov	r0, r8
   304e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   304e4:	push	{r4, r5, r6, sl, fp, lr}
   304e8:	add	fp, sp, #16
   304ec:	ldr	r2, [r0]
   304f0:	mov	r5, r1
   304f4:	mov	r4, r0
   304f8:	cmp	r2, #0
   304fc:	beq	3052c <__assert_fail@plt+0x1f0f8>
   30500:	ldr	r1, [r4, #4]
   30504:	cmp	r1, #0
   30508:	bne	30568 <__assert_fail@plt+0x1f134>
   3050c:	ldr	r0, [r4, #8]
   30510:	str	r5, [r0]
   30514:	ldr	r0, [r4, #4]
   30518:	mov	r6, #1
   3051c:	add	r0, r0, #1
   30520:	str	r0, [r4, #4]
   30524:	mov	r0, r6
   30528:	pop	{r4, r5, r6, sl, fp, pc}
   3052c:	mov	r6, #1
   30530:	mov	r0, #4
   30534:	str	r6, [r4]
   30538:	str	r6, [r4, #4]
   3053c:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   30540:	cmp	r0, #0
   30544:	str	r0, [r4, #8]
   30548:	strne	r5, [r0]
   3054c:	movne	r0, r6
   30550:	popne	{r4, r5, r6, sl, fp, pc}
   30554:	mov	r6, #0
   30558:	mov	r0, r6
   3055c:	str	r6, [r4]
   30560:	str	r6, [r4, #4]
   30564:	pop	{r4, r5, r6, sl, fp, pc}
   30568:	cmp	r2, r1
   3056c:	bne	30598 <__assert_fail@plt+0x1f164>
   30570:	lsl	r0, r2, #1
   30574:	lsl	r1, r2, #3
   30578:	str	r0, [r4]
   3057c:	ldr	r0, [r4, #8]
   30580:	bl	38020 <__assert_fail@plt+0x26bec>
   30584:	cmp	r0, #0
   30588:	beq	3064c <__assert_fail@plt+0x1f218>
   3058c:	str	r0, [r4, #8]
   30590:	ldr	r1, [r4, #4]
   30594:	b	3059c <__assert_fail@plt+0x1f168>
   30598:	ldr	r0, [r4, #8]
   3059c:	ldr	r2, [r0]
   305a0:	cmp	r2, r5
   305a4:	ble	30614 <__assert_fail@plt+0x1f1e0>
   305a8:	cmp	r1, #1
   305ac:	blt	30644 <__assert_fail@plt+0x1f210>
   305b0:	ands	r3, r1, #3
   305b4:	sub	ip, r1, #1
   305b8:	beq	305dc <__assert_fail@plt+0x1f1a8>
   305bc:	add	lr, r0, r1, lsl #2
   305c0:	mov	r6, lr
   305c4:	ldr	r2, [r6, #-4]!
   305c8:	subs	r3, r3, #1
   305cc:	sub	r1, r1, #1
   305d0:	str	r2, [lr]
   305d4:	mov	lr, r6
   305d8:	bne	305c4 <__assert_fail@plt+0x1f190>
   305dc:	cmp	ip, #3
   305e0:	bcc	3060c <__assert_fail@plt+0x1f1d8>
   305e4:	add	r2, r0, r1, lsl #2
   305e8:	sub	r2, r2, #8
   305ec:	sub	lr, r2, #8
   305f0:	sub	r1, r1, #4
   305f4:	sub	sl, r2, #4
   305f8:	sub	r2, r2, #16
   305fc:	ldm	lr, {r3, r6, ip, lr}
   30600:	cmp	r1, #0
   30604:	stm	sl, {r3, r6, ip, lr}
   30608:	bgt	305ec <__assert_fail@plt+0x1f1b8>
   3060c:	mov	r1, #0
   30610:	b	30644 <__assert_fail@plt+0x1f210>
   30614:	add	r2, r0, r1, lsl #2
   30618:	ldr	r3, [r2, #-4]
   3061c:	cmp	r3, r5
   30620:	ble	30644 <__assert_fail@plt+0x1f210>
   30624:	sub	r1, r1, #2
   30628:	str	r3, [r2]
   3062c:	sub	r1, r1, #1
   30630:	ldr	r3, [r2, #-8]
   30634:	sub	r2, r2, #4
   30638:	cmp	r3, r5
   3063c:	bgt	30628 <__assert_fail@plt+0x1f1f4>
   30640:	add	r1, r1, #2
   30644:	str	r5, [r0, r1, lsl #2]
   30648:	b	30514 <__assert_fail@plt+0x1f0e0>
   3064c:	mov	r6, #0
   30650:	mov	r0, r6
   30654:	pop	{r4, r5, r6, sl, fp, pc}
   30658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3065c:	add	fp, sp, #28
   30660:	sub	sp, sp, #28
   30664:	ldr	r8, [r2, #4]
   30668:	str	r2, [sp, #24]
   3066c:	cmp	r8, #0
   30670:	beq	3087c <__assert_fail@plt+0x1f448>
   30674:	mov	r9, r3
   30678:	add	r7, r8, r3
   3067c:	cmp	r8, #1
   30680:	str	r0, [sp, #4]
   30684:	blt	30768 <__assert_fail@plt+0x1f334>
   30688:	ldr	r0, [sp, #24]
   3068c:	mov	sl, #0
   30690:	cmp	r8, #4
   30694:	ldr	ip, [r0, #8]
   30698:	bcc	30750 <__assert_fail@plt+0x1f31c>
   3069c:	mov	r3, #0
   306a0:	bic	sl, r8, #3
   306a4:	mov	r0, #1
   306a8:	vdup.32	q8, r3
   306ac:	sub	r2, sl, #4
   306b0:	add	r0, r0, r2, lsr #2
   306b4:	cmp	r2, #12
   306b8:	and	lr, r0, #3
   306bc:	vmov.32	d16[0], r7
   306c0:	bcc	30714 <__assert_fail@plt+0x1f2e0>
   306c4:	sub	r5, r0, lr
   306c8:	mov	r3, #0
   306cc:	mov	r4, #64	; 0x40
   306d0:	mov	r7, ip
   306d4:	mov	r6, ip
   306d8:	vld1.32	{d18-d19}, [r6], r4
   306dc:	add	r2, r7, #16
   306e0:	add	r0, r7, #32
   306e4:	subs	r5, r5, #4
   306e8:	add	r3, r3, #16
   306ec:	vld1.32	{d20-d21}, [r2]
   306f0:	vadd.i32	q8, q9, q8
   306f4:	vld1.32	{d18-d19}, [r0]
   306f8:	add	r0, r7, #48	; 0x30
   306fc:	mov	r7, r6
   30700:	vadd.i32	q8, q10, q8
   30704:	vld1.32	{d20-d21}, [r0]
   30708:	vadd.i32	q8, q9, q8
   3070c:	vadd.i32	q8, q10, q8
   30710:	bne	306d8 <__assert_fail@plt+0x1f2a4>
   30714:	cmp	lr, #0
   30718:	beq	30734 <__assert_fail@plt+0x1f300>
   3071c:	add	r0, ip, r3, lsl #2
   30720:	rsb	r3, lr, #0
   30724:	vld1.32	{d18-d19}, [r0]!
   30728:	adds	r3, r3, #1
   3072c:	vadd.i32	q8, q9, q8
   30730:	bcc	30724 <__assert_fail@plt+0x1f2f0>
   30734:	vext.8	q9, q8, q8, #8
   30738:	cmp	r8, sl
   3073c:	vadd.i32	q8, q8, q9
   30740:	vdup.32	q9, d16[1]
   30744:	vadd.i32	q8, q8, q9
   30748:	vmov.32	r7, d16[0]
   3074c:	beq	30768 <__assert_fail@plt+0x1f334>
   30750:	add	r3, ip, sl, lsl #2
   30754:	sub	r2, r8, sl
   30758:	ldr	r0, [r3], #4
   3075c:	subs	r2, r2, #1
   30760:	add	r7, r0, r7
   30764:	bne	30758 <__assert_fail@plt+0x1f324>
   30768:	ldr	r0, [r1, #32]
   3076c:	mov	sl, r1
   30770:	ldr	r1, [r1, #68]	; 0x44
   30774:	and	r1, r1, r7
   30778:	add	r2, r1, r1, lsl #1
   3077c:	ldr	r1, [r0, r2, lsl #2]
   30780:	cmp	r1, #1
   30784:	blt	3081c <__assert_fail@plt+0x1f3e8>
   30788:	add	r0, r0, r2, lsl #2
   3078c:	sub	ip, r8, #1
   30790:	mov	r5, #0
   30794:	ldr	lr, [r0, #8]
   30798:	b	307a8 <__assert_fail@plt+0x1f374>
   3079c:	add	r5, r5, #1
   307a0:	cmp	r5, r1
   307a4:	bge	3081c <__assert_fail@plt+0x1f3e8>
   307a8:	ldr	r4, [lr, r5, lsl #2]
   307ac:	ldr	r0, [r4]
   307b0:	cmp	r0, r7
   307b4:	bne	3079c <__assert_fail@plt+0x1f368>
   307b8:	ldrb	r0, [r4, #52]	; 0x34
   307bc:	and	r0, r0, #15
   307c0:	cmp	r0, r9
   307c4:	bne	3079c <__assert_fail@plt+0x1f368>
   307c8:	ldr	r0, [sp, #24]
   307cc:	cmp	r0, #0
   307d0:	ldrne	r3, [r4, #40]	; 0x28
   307d4:	cmpne	r3, #0
   307d8:	beq	3079c <__assert_fail@plt+0x1f368>
   307dc:	ldr	r0, [r3, #4]
   307e0:	cmp	r0, r8
   307e4:	bne	3079c <__assert_fail@plt+0x1f368>
   307e8:	mov	r0, ip
   307ec:	add	r6, r0, #1
   307f0:	cmp	r6, #1
   307f4:	blt	30abc <__assert_fail@plt+0x1f688>
   307f8:	ldr	r2, [sp, #24]
   307fc:	ldr	r6, [r2, #8]
   30800:	ldr	r2, [r3, #8]
   30804:	ldr	r6, [r6, r0, lsl #2]
   30808:	ldr	r2, [r2, r0, lsl #2]
   3080c:	sub	r0, r0, #1
   30810:	cmp	r2, r6
   30814:	beq	307ec <__assert_fail@plt+0x1f3b8>
   30818:	b	3079c <__assert_fail@plt+0x1f368>
   3081c:	mov	r0, #56	; 0x38
   30820:	mov	r1, #1
   30824:	bl	37f9c <__assert_fail@plt+0x26b68>
   30828:	cmp	r0, #0
   3082c:	beq	30adc <__assert_fail@plt+0x1f6a8>
   30830:	mov	r4, r0
   30834:	ldr	r0, [sp, #24]
   30838:	add	r6, r4, #4
   3083c:	ldr	r8, [r0, #4]
   30840:	cmp	r8, #1
   30844:	str	r8, [r4, #8]
   30848:	blt	30888 <__assert_fail@plt+0x1f454>
   3084c:	lsl	r0, r8, #2
   30850:	str	r8, [r4, #4]
   30854:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   30858:	cmp	r0, #0
   3085c:	str	r0, [r4, #12]
   30860:	beq	30af0 <__assert_fail@plt+0x1f6bc>
   30864:	ldr	r1, [sp, #24]
   30868:	ldr	r8, [r1, #4]
   3086c:	ldr	r1, [r1, #8]
   30870:	lsl	r2, r8, #2
   30874:	bl	111e8 <memcpy@plt>
   30878:	b	30898 <__assert_fail@plt+0x1f464>
   3087c:	mov	r4, #0
   30880:	str	r4, [r0]
   30884:	b	30abc <__assert_fail@plt+0x1f688>
   30888:	mov	r0, #0
   3088c:	str	r0, [r6]
   30890:	str	r0, [r6, #4]
   30894:	str	r0, [r6, #8]
   30898:	str	r6, [r4, #40]	; 0x28
   3089c:	and	r0, r9, #15
   308a0:	cmp	r8, #1
   308a4:	ldrb	r1, [r4, #52]	; 0x34
   308a8:	and	r1, r1, #240	; 0xf0
   308ac:	orr	r0, r1, r0
   308b0:	strb	r0, [r4, #52]	; 0x34
   308b4:	mov	r0, sl
   308b8:	blt	30aa8 <__assert_fail@plt+0x1f674>
   308bc:	movw	lr, #65280	; 0xff00
   308c0:	and	r1, r9, #4
   308c4:	and	ip, r9, #1
   308c8:	mov	sl, #0
   308cc:	mov	r5, #0
   308d0:	str	r0, [sp, #16]
   308d4:	movt	lr, #3
   308d8:	str	r1, [sp]
   308dc:	and	r1, r9, #2
   308e0:	str	ip, [sp, #12]
   308e4:	str	r1, [sp, #8]
   308e8:	add	r1, lr, #255	; 0xff
   308ec:	str	r1, [sp, #20]
   308f0:	b	30904 <__assert_fail@plt+0x1f4d0>
   308f4:	add	r5, r5, #1
   308f8:	add	sl, sl, #1
   308fc:	cmp	sl, r8
   30900:	bge	30aa8 <__assert_fail@plt+0x1f674>
   30904:	ldr	r1, [sp, #24]
   30908:	ldr	r2, [r0]
   3090c:	ldr	r1, [r1, #8]
   30910:	ldr	r1, [r1, sl, lsl #2]
   30914:	add	r1, r2, r1, lsl #3
   30918:	ldr	r9, [r1, #4]
   3091c:	ldr	r1, [sp, #20]
   30920:	and	r1, r9, r1
   30924:	cmp	r1, #1
   30928:	beq	308f8 <__assert_fail@plt+0x1f4c4>
   3092c:	ldrb	r3, [r4, #52]	; 0x34
   30930:	mov	r2, #32
   30934:	and	r1, r9, lr
   30938:	and	r2, r2, r9, lsr #15
   3093c:	orr	r2, r3, r2
   30940:	uxtb	r3, r9
   30944:	strb	r2, [r4, #52]	; 0x34
   30948:	cmp	r3, #2
   3094c:	beq	30960 <__assert_fail@plt+0x1f52c>
   30950:	cmp	r3, #4
   30954:	bne	3096c <__assert_fail@plt+0x1f538>
   30958:	mov	r3, #64	; 0x40
   3095c:	b	30964 <__assert_fail@plt+0x1f530>
   30960:	mov	r3, #16
   30964:	orr	r2, r2, r3
   30968:	strb	r2, [r4, #52]	; 0x34
   3096c:	cmp	r1, #0
   30970:	beq	308f8 <__assert_fail@plt+0x1f4c4>
   30974:	ldr	r1, [r4, #40]	; 0x28
   30978:	cmp	r1, r6
   3097c:	beq	30994 <__assert_fail@plt+0x1f560>
   30980:	cmp	ip, #0
   30984:	bne	30a28 <__assert_fail@plt+0x1f5f4>
   30988:	ands	r1, r9, #256	; 0x100
   3098c:	bne	30a5c <__assert_fail@plt+0x1f628>
   30990:	b	30a28 <__assert_fail@plt+0x1f5f4>
   30994:	mov	r0, #12
   30998:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   3099c:	cmp	r0, #0
   309a0:	beq	30ad4 <__assert_fail@plt+0x1f6a0>
   309a4:	mov	r5, r0
   309a8:	str	r0, [r4, #40]	; 0x28
   309ac:	ldr	r0, [sp, #24]
   309b0:	ldr	r8, [r0, #4]
   309b4:	cmp	r8, #1
   309b8:	str	r8, [r5, #4]
   309bc:	blt	309f0 <__assert_fail@plt+0x1f5bc>
   309c0:	lsl	r0, r8, #2
   309c4:	str	r8, [r5]
   309c8:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   309cc:	cmp	r0, #0
   309d0:	str	r0, [r5, #8]
   309d4:	beq	30ac8 <__assert_fail@plt+0x1f694>
   309d8:	ldr	r1, [sp, #24]
   309dc:	ldr	r8, [r1, #4]
   309e0:	ldr	r1, [r1, #8]
   309e4:	lsl	r2, r8, #2
   309e8:	bl	111e8 <memcpy@plt>
   309ec:	b	30a00 <__assert_fail@plt+0x1f5cc>
   309f0:	mov	r0, #0
   309f4:	str	r0, [r5]
   309f8:	str	r0, [r5, #4]
   309fc:	str	r0, [r5, #8]
   30a00:	ldrb	r0, [r4, #52]	; 0x34
   30a04:	ldr	ip, [sp, #12]
   30a08:	movw	lr, #65280	; 0xff00
   30a0c:	mov	r5, #0
   30a10:	movt	lr, #3
   30a14:	orr	r0, r0, #128	; 0x80
   30a18:	strb	r0, [r4, #52]	; 0x34
   30a1c:	ldr	r0, [sp, #16]
   30a20:	cmp	ip, #0
   30a24:	beq	30988 <__assert_fail@plt+0x1f554>
   30a28:	cmp	ip, #0
   30a2c:	andsne	r1, r9, #512	; 0x200
   30a30:	bne	30a5c <__assert_fail@plt+0x1f628>
   30a34:	ldr	r1, [sp, #8]
   30a38:	cmp	r1, #0
   30a3c:	bne	30a48 <__assert_fail@plt+0x1f614>
   30a40:	ands	r1, r9, #4096	; 0x1000
   30a44:	bne	30a5c <__assert_fail@plt+0x1f628>
   30a48:	ldr	r1, [sp]
   30a4c:	cmp	r1, #0
   30a50:	bne	308f8 <__assert_fail@plt+0x1f4c4>
   30a54:	ands	r1, r9, #16384	; 0x4000
   30a58:	beq	308f8 <__assert_fail@plt+0x1f4c4>
   30a5c:	subs	r1, sl, r5
   30a60:	bmi	308f4 <__assert_fail@plt+0x1f4c0>
   30a64:	ldr	r2, [r4, #8]
   30a68:	cmp	r2, r1
   30a6c:	subgt	r2, r2, #1
   30a70:	strgt	r2, [r4, #8]
   30a74:	cmpgt	r2, r1
   30a78:	ble	308f4 <__assert_fail@plt+0x1f4c0>
   30a7c:	ldr	r2, [r4, #12]
   30a80:	add	r3, r2, r1, lsl #2
   30a84:	ldr	r3, [r3, #4]
   30a88:	str	r3, [r2, r1, lsl #2]
   30a8c:	add	r1, r1, #1
   30a90:	ldr	r3, [r4, #8]
   30a94:	cmp	r1, r3
   30a98:	blt	30a80 <__assert_fail@plt+0x1f64c>
   30a9c:	ldr	r1, [sp, #24]
   30aa0:	ldr	r8, [r1, #4]
   30aa4:	b	308f4 <__assert_fail@plt+0x1f4c0>
   30aa8:	mov	r1, r4
   30aac:	mov	r2, r7
   30ab0:	bl	30b08 <__assert_fail@plt+0x1f6d4>
   30ab4:	cmp	r0, #0
   30ab8:	bne	30ad4 <__assert_fail@plt+0x1f6a0>
   30abc:	mov	r0, r4
   30ac0:	sub	sp, fp, #28
   30ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30ac8:	mov	r0, #0
   30acc:	str	r0, [r5]
   30ad0:	str	r0, [r5, #4]
   30ad4:	mov	r0, r4
   30ad8:	bl	2a698 <__assert_fail@plt+0x19264>
   30adc:	ldr	r1, [sp, #4]
   30ae0:	mov	r0, #12
   30ae4:	mov	r4, #0
   30ae8:	str	r0, [r1]
   30aec:	b	30abc <__assert_fail@plt+0x1f688>
   30af0:	mov	r0, #0
   30af4:	str	r0, [r4, #4]
   30af8:	str	r0, [r4, #8]
   30afc:	mov	r0, r4
   30b00:	bl	138e8 <__assert_fail@plt+0x24b4>
   30b04:	b	30adc <__assert_fail@plt+0x1f6a8>
   30b08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30b0c:	add	fp, sp, #28
   30b10:	sub	sp, sp, #4
   30b14:	str	r2, [r1]
   30b18:	mov	r4, r1
   30b1c:	mov	r7, r0
   30b20:	mov	r0, #0
   30b24:	mov	r9, r2
   30b28:	ldr	r1, [r1, #8]
   30b2c:	str	r1, [r4, #16]
   30b30:	str	r0, [r4, #20]
   30b34:	lsl	r0, r1, #2
   30b38:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   30b3c:	mov	r8, #12
   30b40:	cmp	r0, #0
   30b44:	str	r0, [r4, #24]
   30b48:	beq	30c10 <__assert_fail@plt+0x1f7dc>
   30b4c:	ldr	r1, [r4, #8]
   30b50:	cmp	r1, #1
   30b54:	blt	30bd0 <__assert_fail@plt+0x1f79c>
   30b58:	mov	r5, #0
   30b5c:	mov	sl, #2
   30b60:	b	30b80 <__assert_fail@plt+0x1f74c>
   30b64:	add	r2, r1, #1
   30b68:	str	r2, [r4, #20]
   30b6c:	str	r6, [r0, r1, lsl #2]
   30b70:	ldr	r1, [r4, #8]
   30b74:	add	r5, r5, #1
   30b78:	cmp	r5, r1
   30b7c:	bge	30bd0 <__assert_fail@plt+0x1f79c>
   30b80:	ldr	r2, [r4, #12]
   30b84:	ldr	r6, [r2, r5, lsl #2]
   30b88:	ldr	r2, [r7]
   30b8c:	add	r2, r2, r6, lsl #3
   30b90:	ldrb	r2, [r2, #4]
   30b94:	tst	r2, #8
   30b98:	bne	30b74 <__assert_fail@plt+0x1f740>
   30b9c:	ldr	r2, [r4, #16]
   30ba0:	ldr	r1, [r4, #20]
   30ba4:	cmp	r2, r1
   30ba8:	bne	30b64 <__assert_fail@plt+0x1f730>
   30bac:	add	r1, sl, r2, lsl #1
   30bb0:	str	r1, [r4, #16]
   30bb4:	lsl	r1, r1, #2
   30bb8:	bl	38020 <__assert_fail@plt+0x26bec>
   30bbc:	cmp	r0, #0
   30bc0:	beq	30c10 <__assert_fail@plt+0x1f7dc>
   30bc4:	str	r0, [r4, #24]
   30bc8:	ldr	r1, [r4, #20]
   30bcc:	b	30b64 <__assert_fail@plt+0x1f730>
   30bd0:	ldr	r1, [r7, #68]	; 0x44
   30bd4:	ldr	r0, [r7, #32]
   30bd8:	and	r1, r1, r9
   30bdc:	mov	r5, r0
   30be0:	add	r2, r1, r1, lsl #1
   30be4:	ldr	r1, [r5, r2, lsl #2]!
   30be8:	mov	r6, r5
   30bec:	ldr	r3, [r6, #4]!
   30bf0:	cmp	r3, r1
   30bf4:	ble	30c1c <__assert_fail@plt+0x1f7e8>
   30bf8:	add	r0, r0, r2, lsl #2
   30bfc:	ldr	r0, [r0, #8]
   30c00:	add	r2, r1, #1
   30c04:	mov	r8, #0
   30c08:	str	r2, [r5]
   30c0c:	str	r4, [r0, r1, lsl #2]
   30c10:	mov	r0, r8
   30c14:	sub	sp, fp, #28
   30c18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30c1c:	add	r7, r0, r2, lsl #2
   30c20:	mov	r2, #2
   30c24:	add	r9, r2, r1, lsl #1
   30c28:	ldr	r0, [r7, #8]!
   30c2c:	lsl	r1, r9, #2
   30c30:	bl	38020 <__assert_fail@plt+0x26bec>
   30c34:	cmp	r0, #0
   30c38:	beq	30c10 <__assert_fail@plt+0x1f7dc>
   30c3c:	str	r0, [r7]
   30c40:	str	r9, [r6]
   30c44:	ldr	r1, [r5]
   30c48:	b	30c00 <__assert_fail@plt+0x1f7cc>
   30c4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30c50:	add	fp, sp, #28
   30c54:	sub	sp, sp, #36	; 0x24
   30c58:	mov	r4, r0
   30c5c:	ldr	r0, [r0, #24]
   30c60:	mov	r6, r2
   30c64:	mov	r9, r1
   30c68:	cmp	r0, r1
   30c6c:	ble	30e68 <__assert_fail@plt+0x1fa34>
   30c70:	ldr	r0, [r4, #80]	; 0x50
   30c74:	mov	r1, #4
   30c78:	cmp	r0, #2
   30c7c:	movge	r0, #0
   30c80:	strge	r0, [r4, #16]
   30c84:	strge	r0, [r4, #20]
   30c88:	mov	r0, #0
   30c8c:	tst	r6, #1
   30c90:	strb	r0, [r4, #76]	; 0x4c
   30c94:	str	r0, [r4, #24]
   30c98:	str	r0, [r4, #28]
   30c9c:	str	r0, [r4, #32]
   30ca0:	movweq	r1, #6
   30ca4:	ldr	r2, [r4, #44]	; 0x2c
   30ca8:	ldr	r3, [r4, #52]	; 0x34
   30cac:	str	r2, [r4, #48]	; 0x30
   30cb0:	str	r3, [r4, #56]	; 0x38
   30cb4:	str	r1, [r4, #60]	; 0x3c
   30cb8:	ldrb	r1, [r4, #75]	; 0x4b
   30cbc:	cmp	r1, #0
   30cc0:	bne	30ccc <__assert_fail@plt+0x1f898>
   30cc4:	ldr	r1, [r4]
   30cc8:	str	r1, [r4, #4]
   30ccc:	mov	r5, r9
   30cd0:	cmp	r5, #0
   30cd4:	beq	30df0 <__assert_fail@plt+0x1f9bc>
   30cd8:	ldr	r1, [r4, #32]
   30cdc:	cmp	r5, r1
   30ce0:	bge	30e78 <__assert_fail@plt+0x1fa44>
   30ce4:	ldrb	r0, [r4, #76]	; 0x4c
   30ce8:	cmp	r0, #0
   30cec:	bne	30ff4 <__assert_fail@plt+0x1fbc0>
   30cf0:	cmp	r5, #0
   30cf4:	ble	30d30 <__assert_fail@plt+0x1f8fc>
   30cf8:	ldr	r1, [r4, #48]	; 0x30
   30cfc:	sub	r0, r5, #1
   30d00:	cmp	r1, r0
   30d04:	beq	310ac <__assert_fail@plt+0x1fc78>
   30d08:	ldr	r1, [r4, #80]	; 0x50
   30d0c:	cmp	r1, #2
   30d10:	blt	30d38 <__assert_fail@plt+0x1f904>
   30d14:	ldr	r1, [r4, #8]
   30d18:	ldr	r6, [r1, r0, lsl #2]
   30d1c:	cmn	r6, #1
   30d20:	bne	30d68 <__assert_fail@plt+0x1f934>
   30d24:	sub	r0, r0, #1
   30d28:	cmn	r0, #1
   30d2c:	bne	30d18 <__assert_fail@plt+0x1f8e4>
   30d30:	ldr	r1, [r4, #60]	; 0x3c
   30d34:	b	30d90 <__assert_fail@plt+0x1f95c>
   30d38:	ldr	r1, [r4, #4]
   30d3c:	ldr	r2, [r4, #68]	; 0x44
   30d40:	ldrb	r0, [r1, r0]
   30d44:	ubfx	r1, r0, #5, #3
   30d48:	and	r3, r0, #31
   30d4c:	ldr	r2, [r2, r1, lsl #2]
   30d50:	mov	r1, #1
   30d54:	tst	r2, r1, lsl r3
   30d58:	moveq	r1, #0
   30d5c:	cmpeq	r0, #10
   30d60:	bne	30d90 <__assert_fail@plt+0x1f95c>
   30d64:	b	30d80 <__assert_fail@plt+0x1f94c>
   30d68:	ldrb	r0, [r4, #78]	; 0x4e
   30d6c:	cmp	r0, #0
   30d70:	bne	31344 <__assert_fail@plt+0x1ff10>
   30d74:	mov	r1, #0
   30d78:	cmp	r6, #10
   30d7c:	bne	30d90 <__assert_fail@plt+0x1f95c>
   30d80:	ldrb	r0, [r4, #77]	; 0x4d
   30d84:	cmp	r0, #0
   30d88:	movwne	r0, #1
   30d8c:	lsl	r1, r0, #1
   30d90:	str	r1, [r4, #60]	; 0x3c
   30d94:	ldr	r0, [r4, #80]	; 0x50
   30d98:	cmp	r0, #2
   30d9c:	blt	30db8 <__assert_fail@plt+0x1f984>
   30da0:	ldr	r2, [r4, #28]
   30da4:	ldr	r0, [r4, #8]
   30da8:	sub	r2, r2, r5
   30dac:	add	r1, r0, r5, lsl #2
   30db0:	lsl	r2, r2, #2
   30db4:	bl	111b8 <memmove@plt>
   30db8:	ldrb	r0, [r4, #75]	; 0x4b
   30dbc:	cmp	r0, #0
   30dc0:	bne	31094 <__assert_fail@plt+0x1fc60>
   30dc4:	ldr	r0, [r4, #28]
   30dc8:	ldr	r1, [r4, #32]
   30dcc:	sub	r0, r0, r5
   30dd0:	sub	r1, r1, r5
   30dd4:	str	r0, [r4, #28]
   30dd8:	str	r1, [r4, #32]
   30ddc:	ldrb	r0, [r4, #75]	; 0x4b
   30de0:	cmp	r0, #0
   30de4:	ldreq	r0, [r4, #4]
   30de8:	addeq	r0, r0, r5
   30dec:	streq	r0, [r4, #4]
   30df0:	str	r9, [r4, #24]
   30df4:	ldr	r0, [r4, #48]	; 0x30
   30df8:	ldr	r3, [r4, #80]	; 0x50
   30dfc:	ldr	r1, [r4, #56]	; 0x38
   30e00:	sub	r2, r0, r5
   30e04:	cmp	r3, #2
   30e08:	sub	r0, r1, r5
   30e0c:	str	r2, [r4, #48]	; 0x30
   30e10:	str	r0, [r4, #56]	; 0x38
   30e14:	blt	30e3c <__assert_fail@plt+0x1fa08>
   30e18:	ldrb	r0, [r4, #72]	; 0x48
   30e1c:	cmp	r0, #0
   30e20:	beq	30e50 <__assert_fail@plt+0x1fa1c>
   30e24:	mov	r0, r4
   30e28:	bl	2a700 <__assert_fail@plt+0x192cc>
   30e2c:	cmp	r0, #0
   30e30:	beq	30e58 <__assert_fail@plt+0x1fa24>
   30e34:	sub	sp, fp, #28
   30e38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30e3c:	ldrb	r0, [r4, #75]	; 0x4b
   30e40:	cmp	r0, #0
   30e44:	bne	310b8 <__assert_fail@plt+0x1fc84>
   30e48:	str	r2, [r4, #28]
   30e4c:	b	30e58 <__assert_fail@plt+0x1fa24>
   30e50:	mov	r0, r4
   30e54:	bl	2b000 <__assert_fail@plt+0x19bcc>
   30e58:	mov	r0, #0
   30e5c:	str	r0, [r4, #40]	; 0x28
   30e60:	sub	sp, fp, #28
   30e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30e68:	sub	r5, r9, r0
   30e6c:	cmp	r5, #0
   30e70:	bne	30cd8 <__assert_fail@plt+0x1f8a4>
   30e74:	b	30df0 <__assert_fail@plt+0x1f9bc>
   30e78:	ldrb	r2, [r4, #76]	; 0x4c
   30e7c:	ldr	lr, [r4, #28]
   30e80:	cmp	r2, #0
   30e84:	bne	31504 <__assert_fail@plt+0x200d0>
   30e88:	mov	r2, #0
   30e8c:	str	r2, [r4, #28]
   30e90:	ldr	r3, [r4, #80]	; 0x50
   30e94:	cmp	r3, #2
   30e98:	blt	31128 <__assert_fail@plt+0x1fcf4>
   30e9c:	ldrb	r2, [r4, #73]	; 0x49
   30ea0:	cmp	r2, #0
   30ea4:	beq	30f60 <__assert_fail@plt+0x1fb2c>
   30ea8:	ldr	r7, [r4]
   30eac:	sub	r3, r5, r3
   30eb0:	add	ip, r7, r0
   30eb4:	add	r3, ip, r3
   30eb8:	add	r8, ip, r5
   30ebc:	cmp	r3, r7
   30ec0:	movcc	r3, r7
   30ec4:	mov	r7, r8
   30ec8:	sub	r7, r7, #1
   30ecc:	cmp	r7, r3
   30ed0:	bcc	30f60 <__assert_fail@plt+0x1fb2c>
   30ed4:	ldrb	r2, [r7]
   30ed8:	and	r2, r2, #192	; 0xc0
   30edc:	cmp	r2, #128	; 0x80
   30ee0:	beq	30ec8 <__assert_fail@plt+0x1fa94>
   30ee4:	ldr	r0, [r4, #48]	; 0x30
   30ee8:	mov	sl, lr
   30eec:	mov	r1, r7
   30ef0:	add	r0, ip, r0
   30ef4:	sub	r2, r0, r7
   30ef8:	ldr	r0, [r4, #64]	; 0x40
   30efc:	cmp	r0, #0
   30f00:	bne	315dc <__assert_fail@plt+0x201a8>
   30f04:	mov	r0, #0
   30f08:	add	r3, sp, #24
   30f0c:	str	r0, [sp, #28]
   30f10:	str	r0, [sp, #24]
   30f14:	add	r0, sp, #20
   30f18:	bl	38444 <__assert_fail@plt+0x27010>
   30f1c:	sub	r1, r8, r7
   30f20:	mvn	r7, #0
   30f24:	cmp	r0, r1
   30f28:	bcc	30f4c <__assert_fail@plt+0x1fb18>
   30f2c:	cmn	r0, #3
   30f30:	bhi	30f4c <__assert_fail@plt+0x1fb18>
   30f34:	mov	r2, #0
   30f38:	sub	r0, r0, r1
   30f3c:	str	r2, [r4, #16]
   30f40:	str	r2, [r4, #20]
   30f44:	str	r0, [r4, #28]
   30f48:	ldr	r7, [sp, #20]
   30f4c:	cmn	r7, #1
   30f50:	bne	31384 <__assert_fail@plt+0x1ff50>
   30f54:	ldr	r0, [r4, #24]
   30f58:	ldr	r1, [r4, #32]
   30f5c:	mov	lr, sl
   30f60:	add	r8, r1, r0
   30f64:	cmp	r8, r9
   30f68:	bge	31364 <__assert_fail@plt+0x1ff30>
   30f6c:	add	sl, r4, #16
   30f70:	str	lr, [sp]
   30f74:	ldr	r0, [r4]
   30f78:	ldr	r2, [r4, #44]	; 0x2c
   30f7c:	mov	r3, sl
   30f80:	add	r1, r0, r8
   30f84:	ldr	r0, [sl]
   30f88:	sub	r7, r2, r8
   30f8c:	mov	r2, r7
   30f90:	str	r0, [sp, #8]
   30f94:	ldr	r0, [sl, #4]
   30f98:	str	r0, [sp, #4]
   30f9c:	add	r0, sp, #24
   30fa0:	bl	38444 <__assert_fail@plt+0x27010>
   30fa4:	sub	r1, r0, #1
   30fa8:	cmn	r1, #3
   30fac:	bcs	30fc4 <__assert_fail@plt+0x1fb90>
   30fb0:	ldr	r7, [sp, #24]
   30fb4:	add	r8, r0, r8
   30fb8:	cmp	r8, r9
   30fbc:	blt	30f74 <__assert_fail@plt+0x1fb40>
   30fc0:	b	31370 <__assert_fail@plt+0x1ff3c>
   30fc4:	ldr	r3, [sp, #4]
   30fc8:	ldr	r2, [sp, #8]
   30fcc:	cmp	r7, #0
   30fd0:	mov	r1, #0
   30fd4:	cmpne	r0, #0
   30fd8:	beq	30fe4 <__assert_fail@plt+0x1fbb0>
   30fdc:	ldr	r0, [r4]
   30fe0:	ldrb	r1, [r0, r8]
   30fe4:	stm	sl, {r2, r3}
   30fe8:	mov	r0, #1
   30fec:	mov	r7, r1
   30ff0:	b	30fb4 <__assert_fail@plt+0x1fb80>
   30ff4:	ldr	ip, [r4, #12]
   30ff8:	ldr	r0, [r4, #28]
   30ffc:	mov	r2, #0
   31000:	b	31010 <__assert_fail@plt+0x1fbdc>
   31004:	cmp	r2, r3
   31008:	mov	r0, r3
   3100c:	bge	3103c <__assert_fail@plt+0x1fc08>
   31010:	add	r1, r2, r0
   31014:	add	r1, r1, r1, lsr #31
   31018:	asr	r1, r1, #1
   3101c:	ldr	r7, [ip, r1, lsl #2]
   31020:	mov	r3, r1
   31024:	cmp	r7, r5
   31028:	bgt	31004 <__assert_fail@plt+0x1fbd0>
   3102c:	bge	3103c <__assert_fail@plt+0x1fc08>
   31030:	add	r2, r1, #1
   31034:	mov	r3, r0
   31038:	b	31004 <__assert_fail@plt+0x1fbd0>
   3103c:	cmp	r7, r5
   31040:	mov	r0, #0
   31044:	movwlt	r0, #1
   31048:	add	r7, r1, r0
   3104c:	cmp	r7, #0
   31050:	ble	3108c <__assert_fail@plt+0x1fc58>
   31054:	ldr	r1, [r4, #48]	; 0x30
   31058:	sub	r0, r7, #1
   3105c:	cmp	r1, r0
   31060:	beq	3152c <__assert_fail@plt+0x200f8>
   31064:	ldr	r1, [r4, #80]	; 0x50
   31068:	cmp	r1, #2
   3106c:	blt	31174 <__assert_fail@plt+0x1fd40>
   31070:	ldr	r1, [r4, #8]
   31074:	ldr	r6, [r1, r0, lsl #2]
   31078:	cmn	r6, #1
   3107c:	bne	311a4 <__assert_fail@plt+0x1fd70>
   31080:	sub	r0, r0, #1
   31084:	cmn	r0, #1
   31088:	bne	31074 <__assert_fail@plt+0x1fc40>
   3108c:	ldr	r1, [r4, #60]	; 0x3c
   31090:	b	311cc <__assert_fail@plt+0x1fd98>
   31094:	ldr	r2, [r4, #28]
   31098:	ldr	r0, [r4, #4]
   3109c:	add	r1, r0, r5
   310a0:	sub	r2, r2, r5
   310a4:	bl	111b8 <memmove@plt>
   310a8:	b	30dc4 <__assert_fail@plt+0x1f990>
   310ac:	and	r0, r6, #2
   310b0:	eor	r1, r0, #10
   310b4:	b	30d90 <__assert_fail@plt+0x1f95c>
   310b8:	ldrb	r0, [r4, #72]	; 0x48
   310bc:	cmp	r0, #0
   310c0:	beq	313e8 <__assert_fail@plt+0x1ffb4>
   310c4:	ldr	r6, [r4, #36]	; 0x24
   310c8:	ldr	r5, [r4, #28]
   310cc:	cmp	r6, r2
   310d0:	movgt	r6, r2
   310d4:	cmp	r5, r6
   310d8:	bge	31454 <__assert_fail@plt+0x20020>
   310dc:	bl	112e4 <__ctype_toupper_loc@plt>
   310e0:	ldr	r1, [r4]
   310e4:	ldr	r2, [r4, #64]	; 0x40
   310e8:	add	r1, r1, r9
   310ec:	cmp	r2, #0
   310f0:	ldrb	r1, [r1, r5]
   310f4:	bne	31120 <__assert_fail@plt+0x1fcec>
   310f8:	ldr	r2, [r0]
   310fc:	ldr	r1, [r2, r1, lsl #2]
   31100:	ldr	r2, [r4, #4]
   31104:	strb	r1, [r2, r5]
   31108:	add	r1, r5, #1
   3110c:	cmp	r1, r6
   31110:	bge	31450 <__assert_fail@plt+0x2001c>
   31114:	ldr	r9, [r4, #24]
   31118:	mov	r5, r1
   3111c:	b	310e0 <__assert_fail@plt+0x1fcac>
   31120:	ldrb	r1, [r2, r1]
   31124:	b	310f8 <__assert_fail@plt+0x1fcc4>
   31128:	ldr	r3, [r4]
   3112c:	add	r0, r5, r0
   31130:	ldr	r1, [r4, #64]	; 0x40
   31134:	add	r0, r0, r3
   31138:	cmp	r1, #0
   3113c:	ldrb	r0, [r0, #-1]
   31140:	str	r2, [r4, #32]
   31144:	ldrbne	r0, [r1, r0]
   31148:	ldr	r1, [r4, #68]	; 0x44
   3114c:	ubfx	r2, r0, #5, #3
   31150:	and	r3, r0, #31
   31154:	ldr	r2, [r1, r2, lsl #2]
   31158:	mov	r1, #1
   3115c:	tst	r2, r1, lsl r3
   31160:	moveq	r1, #0
   31164:	cmpeq	r0, #10
   31168:	beq	314ac <__assert_fail@plt+0x20078>
   3116c:	str	r1, [r4, #60]	; 0x3c
   31170:	b	30ddc <__assert_fail@plt+0x1f9a8>
   31174:	ldr	r1, [r4, #4]
   31178:	ldr	r2, [r4, #68]	; 0x44
   3117c:	ldrb	r0, [r1, r0]
   31180:	ubfx	r1, r0, #5, #3
   31184:	and	r3, r0, #31
   31188:	ldr	r2, [r2, r1, lsl #2]
   3118c:	mov	r1, #1
   31190:	tst	r2, r1, lsl r3
   31194:	moveq	r1, #0
   31198:	cmpeq	r0, #10
   3119c:	bne	311cc <__assert_fail@plt+0x1fd98>
   311a0:	b	311bc <__assert_fail@plt+0x1fd88>
   311a4:	ldrb	r0, [r4, #78]	; 0x4e
   311a8:	cmp	r0, #0
   311ac:	bne	3158c <__assert_fail@plt+0x20158>
   311b0:	mov	r1, #0
   311b4:	cmp	r6, #10
   311b8:	bne	311cc <__assert_fail@plt+0x1fd98>
   311bc:	ldrb	r0, [r4, #77]	; 0x4d
   311c0:	cmp	r0, #0
   311c4:	movwne	r0, #1
   311c8:	lsl	r1, r0, #1
   311cc:	str	r1, [r4, #60]	; 0x3c
   311d0:	cmp	r7, r5
   311d4:	ldr	r2, [r4, #28]
   311d8:	bne	31268 <__assert_fail@plt+0x1fe34>
   311dc:	cmp	r2, r5
   311e0:	ble	31268 <__assert_fail@plt+0x1fe34>
   311e4:	ldr	r0, [r4, #12]
   311e8:	ldr	r0, [r0, r5, lsl #2]
   311ec:	cmp	r0, r5
   311f0:	bne	31268 <__assert_fail@plt+0x1fe34>
   311f4:	ldr	r0, [r4, #8]
   311f8:	sub	r2, r2, r5
   311fc:	lsl	r2, r2, #2
   31200:	add	r1, r0, r5, lsl #2
   31204:	bl	111b8 <memmove@plt>
   31208:	ldr	r2, [r4, #28]
   3120c:	ldr	r0, [r4, #4]
   31210:	add	r1, r0, r5
   31214:	sub	r2, r2, r5
   31218:	bl	111b8 <memmove@plt>
   3121c:	ldr	r0, [r4, #28]
   31220:	ldr	r1, [r4, #32]
   31224:	sub	r0, r0, r5
   31228:	sub	r1, r1, r5
   3122c:	cmp	r0, #1
   31230:	str	r0, [r4, #28]
   31234:	str	r1, [r4, #32]
   31238:	blt	30ddc <__assert_fail@plt+0x1f9a8>
   3123c:	ldr	r0, [r4, #12]
   31240:	mov	r2, #0
   31244:	add	r1, r0, r5, lsl #2
   31248:	ldr	r3, [r1, r2, lsl #2]
   3124c:	sub	r3, r3, r5
   31250:	str	r3, [r0, r2, lsl #2]
   31254:	add	r2, r2, #1
   31258:	ldr	r3, [r4, #28]
   3125c:	cmp	r2, r3
   31260:	blt	31248 <__assert_fail@plt+0x1fe14>
   31264:	b	30ddc <__assert_fail@plt+0x1f9a8>
   31268:	mov	r0, #0
   3126c:	strb	r0, [r4, #76]	; 0x4c
   31270:	sub	r0, r5, r9
   31274:	ldr	r1, [r4, #44]	; 0x2c
   31278:	ldr	r3, [r4, #52]	; 0x34
   3127c:	add	r1, r0, r1
   31280:	add	r0, r0, r3
   31284:	str	r1, [r4, #48]	; 0x30
   31288:	sub	r1, r7, #1
   3128c:	str	r0, [r4, #56]	; 0x38
   31290:	add	r0, r1, #1
   31294:	cmp	r0, #1
   31298:	blt	312b0 <__assert_fail@plt+0x1fe7c>
   3129c:	ldr	r3, [r4, #12]
   312a0:	ldr	r3, [r3, r1, lsl #2]
   312a4:	sub	r1, r1, #1
   312a8:	cmp	r3, r5
   312ac:	beq	31290 <__assert_fail@plt+0x1fe5c>
   312b0:	cmp	r0, r2
   312b4:	bge	312d8 <__assert_fail@plt+0x1fea4>
   312b8:	ldr	r1, [r4, #8]
   312bc:	ldr	r3, [r1, r0, lsl #2]
   312c0:	cmn	r3, #1
   312c4:	bne	312d8 <__assert_fail@plt+0x1fea4>
   312c8:	add	r0, r0, #1
   312cc:	cmp	r2, r0
   312d0:	bne	312bc <__assert_fail@plt+0x1fe88>
   312d4:	b	312e0 <__assert_fail@plt+0x1feac>
   312d8:	cmp	r0, r2
   312dc:	bne	312f0 <__assert_fail@plt+0x1febc>
   312e0:	mov	r0, #0
   312e4:	str	r0, [r4, #28]
   312e8:	str	r0, [r4, #32]
   312ec:	b	30ddc <__assert_fail@plt+0x1f9a8>
   312f0:	ldr	r1, [r4, #12]
   312f4:	ldr	r0, [r1, r0, lsl #2]
   312f8:	subs	r2, r0, r5
   312fc:	str	r2, [r4, #28]
   31300:	beq	314a0 <__assert_fail@plt+0x2006c>
   31304:	cmp	r2, #1
   31308:	blt	3132c <__assert_fail@plt+0x1fef8>
   3130c:	ldr	r0, [r4, #8]
   31310:	mov	r1, #0
   31314:	mvn	r3, #0
   31318:	str	r3, [r0, r1, lsl #2]
   3131c:	add	r1, r1, #1
   31320:	ldr	r2, [r4, #28]
   31324:	cmp	r1, r2
   31328:	blt	31318 <__assert_fail@plt+0x1fee4>
   3132c:	ldr	r0, [r4, #4]
   31330:	mov	r1, #255	; 0xff
   31334:	bl	11368 <memset@plt>
   31338:	ldr	r0, [r4, #28]
   3133c:	str	r0, [r4, #32]
   31340:	b	30ddc <__assert_fail@plt+0x1f9a8>
   31344:	mov	r0, r6
   31348:	bl	11350 <iswalnum@plt>
   3134c:	mov	r1, #1
   31350:	cmp	r6, #95	; 0x5f
   31354:	beq	30d90 <__assert_fail@plt+0x1f95c>
   31358:	cmp	r0, #0
   3135c:	beq	30d74 <__assert_fail@plt+0x1f940>
   31360:	b	30d90 <__assert_fail@plt+0x1f95c>
   31364:	sub	r0, r8, r9
   31368:	str	r0, [r4, #28]
   3136c:	b	313a0 <__assert_fail@plt+0x1ff6c>
   31370:	ldr	lr, [sp]
   31374:	sub	r0, r8, r9
   31378:	cmn	r7, #1
   3137c:	str	r0, [r4, #28]
   31380:	beq	313a0 <__assert_fail@plt+0x1ff6c>
   31384:	ldrb	r0, [r4, #78]	; 0x4e
   31388:	cmp	r0, #0
   3138c:	bne	315ac <__assert_fail@plt+0x20178>
   31390:	mov	r1, #0
   31394:	cmp	r7, #10
   31398:	beq	314d8 <__assert_fail@plt+0x200a4>
   3139c:	b	314e8 <__assert_fail@plt+0x200b4>
   313a0:	cmp	lr, #0
   313a4:	ble	313e0 <__assert_fail@plt+0x1ffac>
   313a8:	ldr	r1, [r4, #48]	; 0x30
   313ac:	sub	r0, lr, #1
   313b0:	cmp	r1, r0
   313b4:	beq	31580 <__assert_fail@plt+0x2014c>
   313b8:	ldr	r1, [r4, #80]	; 0x50
   313bc:	cmp	r1, #2
   313c0:	blt	31460 <__assert_fail@plt+0x2002c>
   313c4:	ldr	r1, [r4, #8]
   313c8:	ldr	r6, [r1, r0, lsl #2]
   313cc:	cmn	r6, #1
   313d0:	bne	314c0 <__assert_fail@plt+0x2008c>
   313d4:	sub	r0, r0, #1
   313d8:	cmn	r0, #1
   313dc:	bne	313c8 <__assert_fail@plt+0x1ff94>
   313e0:	ldr	r1, [r4, #60]	; 0x3c
   313e4:	b	314e8 <__assert_fail@plt+0x200b4>
   313e8:	ldr	r3, [r4, #64]	; 0x40
   313ec:	cmp	r3, #0
   313f0:	beq	30e58 <__assert_fail@plt+0x1fa24>
   313f4:	ldr	r1, [r4, #36]	; 0x24
   313f8:	ldr	r0, [r4, #28]
   313fc:	cmp	r1, r2
   31400:	movgt	r1, r2
   31404:	cmp	r0, r1
   31408:	bge	31494 <__assert_fail@plt+0x20060>
   3140c:	ldr	r7, [r4]
   31410:	add	r2, r0, r9
   31414:	ldr	r6, [r4, #4]
   31418:	ldrb	r2, [r7, r2]
   3141c:	ldrb	r2, [r3, r2]
   31420:	strb	r2, [r6, r0]
   31424:	add	r0, r0, #1
   31428:	cmp	r0, r1
   3142c:	bge	31494 <__assert_fail@plt+0x20060>
   31430:	ldr	r7, [r4, #24]
   31434:	ldm	r4, {r2, r3}
   31438:	ldr	r6, [r4, #64]	; 0x40
   3143c:	add	r2, r2, r7
   31440:	ldrb	r2, [r2, r0]
   31444:	ldrb	r2, [r6, r2]
   31448:	strb	r2, [r3, r0]
   3144c:	b	31424 <__assert_fail@plt+0x1fff0>
   31450:	add	r5, r5, #1
   31454:	str	r5, [r4, #28]
   31458:	str	r5, [r4, #32]
   3145c:	b	30e58 <__assert_fail@plt+0x1fa24>
   31460:	ldr	r1, [r4, #4]
   31464:	ldr	r2, [r4, #68]	; 0x44
   31468:	ldrb	r0, [r1, r0]
   3146c:	ubfx	r1, r0, #5, #3
   31470:	and	r3, r0, #31
   31474:	ldr	r2, [r2, r1, lsl #2]
   31478:	mov	r1, #1
   3147c:	tst	r2, r1, lsl r3
   31480:	bne	314e8 <__assert_fail@plt+0x200b4>
   31484:	mov	r1, #0
   31488:	cmp	r0, #10
   3148c:	beq	314d8 <__assert_fail@plt+0x200a4>
   31490:	b	314e8 <__assert_fail@plt+0x200b4>
   31494:	str	r0, [r4, #28]
   31498:	str	r0, [r4, #32]
   3149c:	b	30e58 <__assert_fail@plt+0x1fa24>
   314a0:	mov	r0, #0
   314a4:	str	r0, [r4, #32]
   314a8:	b	30ddc <__assert_fail@plt+0x1f9a8>
   314ac:	ldrb	r0, [r4, #77]	; 0x4d
   314b0:	cmp	r0, #0
   314b4:	movwne	r0, #1
   314b8:	lsl	r1, r0, #1
   314bc:	b	3116c <__assert_fail@plt+0x1fd38>
   314c0:	ldrb	r0, [r4, #78]	; 0x4e
   314c4:	cmp	r0, #0
   314c8:	bne	31618 <__assert_fail@plt+0x201e4>
   314cc:	mov	r1, #0
   314d0:	cmp	r6, #10
   314d4:	bne	314e8 <__assert_fail@plt+0x200b4>
   314d8:	ldrb	r0, [r4, #77]	; 0x4d
   314dc:	cmp	r0, #0
   314e0:	movwne	r0, #1
   314e4:	lsl	r1, r0, #1
   314e8:	str	r1, [r4, #60]	; 0x3c
   314ec:	mov	r0, #0
   314f0:	ldr	r2, [r4, #28]
   314f4:	cmp	r2, #0
   314f8:	bne	31538 <__assert_fail@plt+0x20104>
   314fc:	str	r0, [r4, #32]
   31500:	b	30ddc <__assert_fail@plt+0x1f9a8>
   31504:	mov	r2, #0
   31508:	strb	r2, [r4, #76]	; 0x4c
   3150c:	sub	r2, r5, r9
   31510:	ldr	r3, [r4, #44]	; 0x2c
   31514:	ldr	r7, [r4, #52]	; 0x34
   31518:	add	r3, r2, r3
   3151c:	add	r2, r2, r7
   31520:	str	r3, [r4, #48]	; 0x30
   31524:	str	r2, [r4, #56]	; 0x38
   31528:	b	30e88 <__assert_fail@plt+0x1fa54>
   3152c:	and	r0, r6, #2
   31530:	eor	r1, r0, #10
   31534:	b	311cc <__assert_fail@plt+0x1fd98>
   31538:	cmp	r2, #1
   3153c:	blt	31560 <__assert_fail@plt+0x2012c>
   31540:	ldr	r0, [r4, #8]
   31544:	mov	r1, #0
   31548:	mvn	r3, #0
   3154c:	str	r3, [r0, r1, lsl #2]
   31550:	add	r1, r1, #1
   31554:	ldr	r2, [r4, #28]
   31558:	cmp	r1, r2
   3155c:	blt	3154c <__assert_fail@plt+0x20118>
   31560:	ldrb	r0, [r4, #75]	; 0x4b
   31564:	cmp	r0, #0
   31568:	beq	315d0 <__assert_fail@plt+0x2019c>
   3156c:	ldr	r0, [r4, #4]
   31570:	mov	r1, #255	; 0xff
   31574:	bl	11368 <memset@plt>
   31578:	ldr	r0, [r4, #28]
   3157c:	b	314fc <__assert_fail@plt+0x200c8>
   31580:	and	r0, r6, #2
   31584:	eor	r1, r0, #10
   31588:	b	314e8 <__assert_fail@plt+0x200b4>
   3158c:	mov	r0, r6
   31590:	bl	11350 <iswalnum@plt>
   31594:	mov	r1, #1
   31598:	cmp	r6, #95	; 0x5f
   3159c:	beq	311cc <__assert_fail@plt+0x1fd98>
   315a0:	cmp	r0, #0
   315a4:	beq	311b0 <__assert_fail@plt+0x1fd7c>
   315a8:	b	311cc <__assert_fail@plt+0x1fd98>
   315ac:	mov	r0, r7
   315b0:	bl	11350 <iswalnum@plt>
   315b4:	mov	r1, #1
   315b8:	cmp	r7, #95	; 0x5f
   315bc:	beq	314e8 <__assert_fail@plt+0x200b4>
   315c0:	cmp	r0, #0
   315c4:	mov	r2, r7
   315c8:	beq	31390 <__assert_fail@plt+0x1ff5c>
   315cc:	b	314e8 <__assert_fail@plt+0x200b4>
   315d0:	mov	r0, r2
   315d4:	str	r2, [r4, #32]
   315d8:	b	30ddc <__assert_fail@plt+0x1f9a8>
   315dc:	cmp	r2, #1
   315e0:	blt	31638 <__assert_fail@plt+0x20204>
   315e4:	cmp	r2, #6
   315e8:	mov	r1, r2
   315ec:	movge	r1, #6
   315f0:	sub	ip, r1, #1
   315f4:	add	r1, sp, #14
   315f8:	ldrb	r3, [r7, ip]
   315fc:	cmp	ip, #0
   31600:	ldrb	r3, [r0, r3]
   31604:	strb	r3, [r1, ip]
   31608:	sub	r3, ip, #1
   3160c:	mov	ip, r3
   31610:	bgt	315f8 <__assert_fail@plt+0x201c4>
   31614:	b	30f04 <__assert_fail@plt+0x1fad0>
   31618:	mov	r0, r6
   3161c:	bl	11350 <iswalnum@plt>
   31620:	mov	r1, #1
   31624:	cmp	r6, #95	; 0x5f
   31628:	beq	314e8 <__assert_fail@plt+0x200b4>
   3162c:	cmp	r0, #0
   31630:	beq	314cc <__assert_fail@plt+0x20098>
   31634:	b	314e8 <__assert_fail@plt+0x200b4>
   31638:	add	r1, sp, #14
   3163c:	b	30f04 <__assert_fail@plt+0x1fad0>
   31640:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   31644:	add	fp, sp, #24
   31648:	mov	r8, r0
   3164c:	ldr	r0, [r0, #124]	; 0x7c
   31650:	cmp	r0, #1
   31654:	blt	316e0 <__assert_fail@plt+0x202ac>
   31658:	mov	r7, #0
   3165c:	b	31678 <__assert_fail@plt+0x20244>
   31660:	mov	r0, r5
   31664:	bl	138e8 <__assert_fail@plt+0x24b4>
   31668:	ldr	r0, [r8, #124]	; 0x7c
   3166c:	add	r7, r7, #1
   31670:	cmp	r7, r0
   31674:	bge	316e0 <__assert_fail@plt+0x202ac>
   31678:	ldr	r0, [r8, #132]	; 0x84
   3167c:	ldr	r5, [r0, r7, lsl #2]
   31680:	ldr	r0, [r5, #16]
   31684:	cmp	r0, #1
   31688:	blt	316b8 <__assert_fail@plt+0x20284>
   3168c:	mov	r4, #0
   31690:	ldr	r0, [r5, #20]
   31694:	ldr	r6, [r0, r4, lsl #2]
   31698:	ldr	r0, [r6, #16]
   3169c:	bl	138e8 <__assert_fail@plt+0x24b4>
   316a0:	mov	r0, r6
   316a4:	bl	138e8 <__assert_fail@plt+0x24b4>
   316a8:	ldr	r0, [r5, #16]
   316ac:	add	r4, r4, #1
   316b0:	cmp	r4, r0
   316b4:	blt	31690 <__assert_fail@plt+0x2025c>
   316b8:	ldr	r0, [r5, #20]
   316bc:	bl	138e8 <__assert_fail@plt+0x24b4>
   316c0:	ldr	r0, [r5, #8]
   316c4:	cmp	r0, #0
   316c8:	beq	31660 <__assert_fail@plt+0x2022c>
   316cc:	ldr	r0, [r0, #8]
   316d0:	bl	138e8 <__assert_fail@plt+0x24b4>
   316d4:	ldr	r0, [r5, #8]
   316d8:	bl	138e8 <__assert_fail@plt+0x24b4>
   316dc:	b	31660 <__assert_fail@plt+0x2022c>
   316e0:	mov	r0, #0
   316e4:	str	r0, [r8, #108]	; 0x6c
   316e8:	str	r0, [r8, #124]	; 0x7c
   316ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   316f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   316f4:	add	fp, sp, #28
   316f8:	sub	sp, sp, #4
   316fc:	mov	sl, r0
   31700:	ldr	r0, [r1, #4]
   31704:	cmp	r0, #1
   31708:	blt	317d8 <__assert_fail@plt+0x203a4>
   3170c:	ldr	r7, [sl, #84]	; 0x54
   31710:	mov	r8, r2
   31714:	mov	r5, r1
   31718:	mov	r4, #0
   3171c:	b	3172c <__assert_fail@plt+0x202f8>
   31720:	add	r4, r4, #1
   31724:	cmp	r4, r0
   31728:	bge	317d8 <__assert_fail@plt+0x203a4>
   3172c:	ldr	r1, [r5, #8]
   31730:	ldr	r6, [r1, r4, lsl #2]
   31734:	ldr	r1, [r7]
   31738:	add	r2, r1, r6, lsl #3
   3173c:	ldrb	r2, [r2, #4]
   31740:	cmp	r2, #8
   31744:	bne	31720 <__assert_fail@plt+0x202ec>
   31748:	ldr	r1, [r1, r6, lsl #3]
   3174c:	cmp	r1, #31
   31750:	bgt	31720 <__assert_fail@plt+0x202ec>
   31754:	ldr	r2, [r7, #80]	; 0x50
   31758:	mov	r3, #1
   3175c:	tst	r2, r3, lsl r1
   31760:	beq	31720 <__assert_fail@plt+0x202ec>
   31764:	ldr	r0, [sl, #124]	; 0x7c
   31768:	ldr	r9, [sl, #128]	; 0x80
   3176c:	cmp	r0, r9
   31770:	beq	317b4 <__assert_fail@plt+0x20380>
   31774:	mov	r0, #1
   31778:	mov	r1, #24
   3177c:	bl	37f9c <__assert_fail@plt+0x26b68>
   31780:	ldr	r1, [sl, #124]	; 0x7c
   31784:	ldr	r2, [sl, #132]	; 0x84
   31788:	str	r0, [r2, r1, lsl #2]
   3178c:	ldr	r0, [sl, #132]	; 0x84
   31790:	ldr	r0, [r0, r1, lsl #2]
   31794:	cmp	r0, #0
   31798:	beq	317e4 <__assert_fail@plt+0x203b0>
   3179c:	add	r1, r1, #1
   317a0:	str	r6, [r0, #4]
   317a4:	str	r1, [sl, #124]	; 0x7c
   317a8:	str	r8, [r0]
   317ac:	ldr	r0, [r5, #4]
   317b0:	b	31720 <__assert_fail@plt+0x202ec>
   317b4:	ldr	r0, [sl, #132]	; 0x84
   317b8:	lsl	r1, r9, #3
   317bc:	bl	38020 <__assert_fail@plt+0x26bec>
   317c0:	cmp	r0, #0
   317c4:	beq	317e4 <__assert_fail@plt+0x203b0>
   317c8:	lsl	r1, r9, #1
   317cc:	str	r1, [sl, #128]	; 0x80
   317d0:	str	r0, [sl, #132]	; 0x84
   317d4:	b	31774 <__assert_fail@plt+0x20340>
   317d8:	mov	r0, #0
   317dc:	sub	sp, fp, #28
   317e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   317e4:	mov	r0, #12
   317e8:	sub	sp, fp, #28
   317ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   317f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   317f4:	add	fp, sp, #28
   317f8:	sub	sp, sp, #76	; 0x4c
   317fc:	mov	ip, r0
   31800:	ldr	r0, [r1, #4]
   31804:	cmp	r0, #1
   31808:	blt	32134 <__assert_fail@plt+0x20d00>
   3180c:	ldr	r2, [ip, #84]	; 0x54
   31810:	ldr	r0, [ip, #40]	; 0x28
   31814:	mov	r3, #0
   31818:	str	ip, [sp, #44]	; 0x2c
   3181c:	str	r1, [sp, #12]
   31820:	str	r0, [sp, #52]	; 0x34
   31824:	str	r2, [sp, #24]
   31828:	b	31848 <__assert_fail@plt+0x20414>
   3182c:	ldr	r1, [sp, #12]
   31830:	ldr	r3, [sp, #16]
   31834:	ldr	r2, [sp, #24]
   31838:	ldr	r0, [r1, #4]
   3183c:	add	r3, r3, #1
   31840:	cmp	r3, r0
   31844:	bge	32134 <__assert_fail@plt+0x20d00>
   31848:	ldr	r0, [r1, #8]
   3184c:	str	r3, [sp, #16]
   31850:	ldr	r3, [r0, r3, lsl #2]
   31854:	ldr	r0, [r2]
   31858:	add	r4, r0, r3, lsl #3
   3185c:	mov	r1, r3
   31860:	str	r3, [sp, #48]	; 0x30
   31864:	ldr	r5, [r4, #4]!
   31868:	uxtb	r0, r5
   3186c:	cmp	r0, #4
   31870:	bne	3182c <__assert_fail@plt+0x203f8>
   31874:	movw	r0, #65280	; 0xff00
   31878:	movt	r0, #3
   3187c:	tst	r5, r0
   31880:	beq	31980 <__assert_fail@plt+0x2054c>
   31884:	ldr	r1, [sp, #52]	; 0x34
   31888:	cmn	r1, #1
   3188c:	ble	318c8 <__assert_fail@plt+0x20494>
   31890:	ldr	r0, [ip, #48]	; 0x30
   31894:	cmp	r0, r1
   31898:	beq	320f4 <__assert_fail@plt+0x20cc0>
   3189c:	ldr	r0, [ip, #80]	; 0x50
   318a0:	cmp	r0, #2
   318a4:	blt	318d0 <__assert_fail@plt+0x2049c>
   318a8:	ldr	r0, [ip, #8]
   318ac:	ldr	r1, [sp, #52]	; 0x34
   318b0:	ldr	r6, [r0, r1, lsl #2]
   318b4:	cmn	r6, #1
   318b8:	bne	3190c <__assert_fail@plt+0x204d8>
   318bc:	sub	r1, r1, #1
   318c0:	cmn	r1, #1
   318c4:	bne	318b0 <__assert_fail@plt+0x2047c>
   318c8:	ldr	r1, [ip, #60]	; 0x3c
   318cc:	b	31934 <__assert_fail@plt+0x20500>
   318d0:	ldr	r0, [ip, #4]
   318d4:	ldr	r2, [sp, #52]	; 0x34
   318d8:	ldr	r1, [ip, #68]	; 0x44
   318dc:	ldrb	r0, [r0, r2]
   318e0:	ubfx	r2, r0, #5, #3
   318e4:	and	r7, r0, #31
   318e8:	ldr	r3, [r1, r2, lsl #2]
   318ec:	mov	r1, #1
   318f0:	mov	r2, #0
   318f4:	tst	r3, r1, lsl r7
   318f8:	bne	3194c <__assert_fail@plt+0x20518>
   318fc:	mov	r1, #0
   31900:	cmp	r0, #10
   31904:	beq	31924 <__assert_fail@plt+0x204f0>
   31908:	b	31934 <__assert_fail@plt+0x20500>
   3190c:	ldrb	r0, [ip, #78]	; 0x4e
   31910:	cmp	r0, #0
   31914:	bne	32104 <__assert_fail@plt+0x20cd0>
   31918:	mov	r1, #0
   3191c:	cmp	r6, #10
   31920:	bne	31934 <__assert_fail@plt+0x20500>
   31924:	ldrb	r0, [ip, #77]	; 0x4d
   31928:	cmp	r0, #0
   3192c:	movwne	r0, #1
   31930:	lsl	r1, r0, #1
   31934:	and	r0, r1, #1
   31938:	tst	r5, #1024	; 0x400
   3193c:	eor	r2, r0, #1
   31940:	beq	3194c <__assert_fail@plt+0x20518>
   31944:	cmp	r0, #0
   31948:	beq	3182c <__assert_fail@plt+0x203f8>
   3194c:	ldr	r0, [r4]
   31950:	cmp	r2, #0
   31954:	bne	31960 <__assert_fail@plt+0x2052c>
   31958:	ands	r2, r0, #2048	; 0x800
   3195c:	bne	3182c <__assert_fail@plt+0x203f8>
   31960:	tst	r1, #2
   31964:	bne	31970 <__assert_fail@plt+0x2053c>
   31968:	ands	r2, r0, #8192	; 0x2000
   3196c:	bne	3182c <__assert_fail@plt+0x203f8>
   31970:	tst	r1, #8
   31974:	bne	31980 <__assert_fail@plt+0x2054c>
   31978:	ands	r0, r0, #32768	; 0x8000
   3197c:	bne	3182c <__assert_fail@plt+0x203f8>
   31980:	ldr	r2, [ip, #108]	; 0x6c
   31984:	ldr	r0, [ip, #84]	; 0x54
   31988:	ldr	r9, [ip, #4]
   3198c:	cmp	r2, #1
   31990:	str	r0, [sp, #36]	; 0x24
   31994:	str	r2, [sp, #20]
   31998:	blt	319e0 <__assert_fail@plt+0x205ac>
   3199c:	ldr	r4, [sp, #52]	; 0x34
   319a0:	ldr	r1, [ip, #116]	; 0x74
   319a4:	mov	r0, #0
   319a8:	mov	r5, #1
   319ac:	mov	lr, r4
   319b0:	add	r3, r2, r0
   319b4:	add	r3, r3, r3, lsr #31
   319b8:	asr	r7, r3, #1
   319bc:	add	r6, r7, r7, lsl #1
   319c0:	add	r6, r1, r6, lsl #3
   319c4:	ldr	r6, [r6, #4]
   319c8:	cmp	r6, lr
   319cc:	addlt	r0, r5, r3, asr #1
   319d0:	movge	r2, r7
   319d4:	cmp	r0, r2
   319d8:	blt	319b0 <__assert_fail@plt+0x2057c>
   319dc:	b	319ec <__assert_fail@plt+0x205b8>
   319e0:	ldr	r4, [sp, #52]	; 0x34
   319e4:	mov	r0, #0
   319e8:	mov	lr, r4
   319ec:	ldr	r1, [sp, #20]
   319f0:	cmp	r0, r1
   319f4:	bge	31a38 <__assert_fail@plt+0x20604>
   319f8:	cmn	r0, #1
   319fc:	beq	31a38 <__assert_fail@plt+0x20604>
   31a00:	ldr	r1, [ip, #116]	; 0x74
   31a04:	add	r0, r0, r0, lsl #1
   31a08:	add	r0, r1, r0, lsl #3
   31a0c:	ldr	r1, [r0, #4]
   31a10:	cmp	r1, lr
   31a14:	bne	31a38 <__assert_fail@plt+0x20604>
   31a18:	ldr	r1, [r0]
   31a1c:	ldr	r2, [sp, #48]	; 0x30
   31a20:	cmp	r1, r2
   31a24:	beq	31e40 <__assert_fail@plt+0x20a0c>
   31a28:	ldrb	r1, [r0, #20]
   31a2c:	add	r0, r0, #24
   31a30:	cmp	r1, #0
   31a34:	bne	31a18 <__assert_fail@plt+0x205e4>
   31a38:	ldr	r0, [ip, #124]	; 0x7c
   31a3c:	cmp	r0, #1
   31a40:	ldr	r0, [sp, #20]
   31a44:	blt	31e44 <__assert_fail@plt+0x20a10>
   31a48:	ldr	r0, [sp, #36]	; 0x24
   31a4c:	ldr	r1, [sp, #48]	; 0x30
   31a50:	mov	r3, #0
   31a54:	ldr	r0, [r0]
   31a58:	ldr	r2, [r0, r1, lsl #3]
   31a5c:	str	r2, [sp, #32]
   31a60:	ldr	r1, [ip, #132]	; 0x84
   31a64:	str	r3, [sp, #28]
   31a68:	ldr	r6, [r1, r3, lsl #2]
   31a6c:	ldr	r1, [r6, #4]
   31a70:	ldr	r0, [r0, r1, lsl #3]
   31a74:	cmp	r0, r2
   31a78:	bne	31e14 <__assert_fail@plt+0x209e0>
   31a7c:	ldr	r0, [r6, #16]
   31a80:	ldr	r1, [r6]
   31a84:	mov	r8, #0
   31a88:	mov	r7, lr
   31a8c:	str	r6, [sp, #40]	; 0x28
   31a90:	cmp	r0, #1
   31a94:	blt	31bcc <__assert_fail@plt+0x20798>
   31a98:	mov	r5, r1
   31a9c:	ldr	r1, [r6, #20]
   31aa0:	ldr	r4, [r1, r8, lsl #2]
   31aa4:	ldr	r1, [r4, #4]
   31aa8:	sub	sl, r1, r5
   31aac:	str	r1, [fp, #-48]	; 0xffffffd0
   31ab0:	cmp	sl, #1
   31ab4:	blt	31ae8 <__assert_fail@plt+0x206b4>
   31ab8:	ldr	r1, [ip, #28]
   31abc:	add	r3, sl, r7
   31ac0:	cmp	r3, r1
   31ac4:	bgt	31b3c <__assert_fail@plt+0x20708>
   31ac8:	add	r0, r9, r7
   31acc:	add	r1, r9, r5
   31ad0:	mov	r2, sl
   31ad4:	bl	11320 <bcmp@plt>
   31ad8:	ldr	ip, [sp, #44]	; 0x2c
   31adc:	ldr	lr, [sp, #52]	; 0x34
   31ae0:	cmp	r0, #0
   31ae4:	bne	31bc4 <__assert_fail@plt+0x20790>
   31ae8:	ldr	r3, [sp, #48]	; 0x30
   31aec:	mov	r2, r4
   31af0:	mov	r0, ip
   31af4:	mov	r1, r6
   31af8:	str	lr, [sp]
   31afc:	mov	r4, ip
   31b00:	bl	32804 <__assert_fail@plt+0x213d0>
   31b04:	cmp	r0, #1
   31b08:	bhi	32148 <__assert_fail@plt+0x20d14>
   31b0c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   31b10:	ldr	r0, [r6, #16]
   31b14:	ldr	r9, [r4, #4]
   31b18:	mov	ip, r4
   31b1c:	ldr	r4, [sp, #52]	; 0x34
   31b20:	add	r8, r8, #1
   31b24:	add	r7, sl, r7
   31b28:	cmp	r8, r0
   31b2c:	mov	r5, r1
   31b30:	mov	lr, r4
   31b34:	blt	31a9c <__assert_fail@plt+0x20668>
   31b38:	b	31bcc <__assert_fail@plt+0x20798>
   31b3c:	ldr	r2, [ip, #48]	; 0x30
   31b40:	cmp	r3, r2
   31b44:	bgt	31e08 <__assert_fail@plt+0x209d4>
   31b48:	ldr	r0, [ip, #36]	; 0x24
   31b4c:	ldr	r6, [ip, #104]	; 0x68
   31b50:	cmp	r0, r3
   31b54:	cmple	r0, r2
   31b58:	blt	31b68 <__assert_fail@plt+0x20734>
   31b5c:	cmp	r1, r3
   31b60:	cmple	r1, r2
   31b64:	bge	31b88 <__assert_fail@plt+0x20754>
   31b68:	add	r1, r3, #1
   31b6c:	mov	r0, ip
   31b70:	mov	r9, r3
   31b74:	bl	32170 <__assert_fail@plt+0x20d3c>
   31b78:	ldr	ip, [sp, #44]	; 0x2c
   31b7c:	mov	r3, r9
   31b80:	cmp	r0, #0
   31b84:	bne	32148 <__assert_fail@plt+0x20d14>
   31b88:	cmp	r3, r6
   31b8c:	ble	31bb8 <__assert_fail@plt+0x20784>
   31b90:	sub	r0, r3, r6
   31b94:	mov	r1, #0
   31b98:	lsl	r2, r0, #2
   31b9c:	ldr	r0, [ip, #100]	; 0x64
   31ba0:	add	r0, r0, r6, lsl #2
   31ba4:	mov	r6, r3
   31ba8:	add	r0, r0, #4
   31bac:	bl	11368 <memset@plt>
   31bb0:	ldr	ip, [sp, #44]	; 0x2c
   31bb4:	str	r6, [ip, #104]	; 0x68
   31bb8:	ldr	r9, [ip, #4]
   31bbc:	ldr	r6, [sp, #40]	; 0x28
   31bc0:	b	31ac8 <__assert_fail@plt+0x20694>
   31bc4:	ldr	r0, [r6, #16]
   31bc8:	mov	r1, r5
   31bcc:	cmp	r8, r0
   31bd0:	blt	31e14 <__assert_fail@plt+0x209e0>
   31bd4:	cmp	r8, #0
   31bd8:	addne	r1, r1, #1
   31bdc:	cmp	r1, lr
   31be0:	ble	31bfc <__assert_fail@plt+0x207c8>
   31be4:	b	31e14 <__assert_fail@plt+0x209e0>
   31be8:	ldr	r6, [sp, #40]	; 0x28
   31bec:	add	r1, sl, #1
   31bf0:	cmp	sl, lr
   31bf4:	mov	r9, r8
   31bf8:	bge	31e14 <__assert_fail@plt+0x209e0>
   31bfc:	ldr	r0, [r6]
   31c00:	mov	sl, r1
   31c04:	cmp	r1, r0
   31c08:	ble	31c34 <__assert_fail@plt+0x20800>
   31c0c:	ldr	r0, [ip, #28]
   31c10:	cmp	r7, r0
   31c14:	bge	31d98 <__assert_fail@plt+0x20964>
   31c18:	add	r5, r7, #1
   31c1c:	add	r1, sl, r9
   31c20:	ldrb	r0, [r9, r7]
   31c24:	ldrb	r1, [r1, #-1]
   31c28:	cmp	r0, r1
   31c2c:	beq	31c38 <__assert_fail@plt+0x20804>
   31c30:	b	31e14 <__assert_fail@plt+0x209e0>
   31c34:	mov	r5, r7
   31c38:	ldr	r0, [ip, #100]	; 0x64
   31c3c:	mov	r8, r9
   31c40:	mov	r7, r5
   31c44:	ldr	r2, [r0, sl, lsl #2]
   31c48:	cmp	r2, #0
   31c4c:	beq	31be8 <__assert_fail@plt+0x207b4>
   31c50:	ldr	r0, [r2, #8]
   31c54:	cmp	r0, #1
   31c58:	blt	31be8 <__assert_fail@plt+0x207b4>
   31c5c:	ldr	r1, [sp, #36]	; 0x24
   31c60:	ldr	r2, [r2, #12]
   31c64:	ldr	r4, [sp, #32]
   31c68:	ldr	r1, [r1]
   31c6c:	b	31c7c <__assert_fail@plt+0x20848>
   31c70:	add	r2, r2, #4
   31c74:	subs	r0, r0, #1
   31c78:	beq	31be8 <__assert_fail@plt+0x207b4>
   31c7c:	ldr	r5, [r2]
   31c80:	add	r3, r1, r5, lsl #3
   31c84:	ldrb	r3, [r3, #4]
   31c88:	cmp	r3, #9
   31c8c:	bne	31c70 <__assert_fail@plt+0x2083c>
   31c90:	ldr	r3, [r1, r5, lsl #3]
   31c94:	cmp	r3, r4
   31c98:	bne	31c70 <__assert_fail@plt+0x2083c>
   31c9c:	cmn	r5, #1
   31ca0:	beq	31be8 <__assert_fail@plt+0x207b4>
   31ca4:	ldr	r1, [r6, #8]
   31ca8:	mov	r4, lr
   31cac:	str	r7, [fp, #-48]	; 0xffffffd0
   31cb0:	cmp	r1, #0
   31cb4:	bne	31ce4 <__assert_fail@plt+0x208b0>
   31cb8:	ldr	r0, [r6]
   31cbc:	mov	r9, #12
   31cc0:	sub	r0, sl, r0
   31cc4:	add	r1, r0, #1
   31cc8:	mov	r0, #12
   31ccc:	bl	37f9c <__assert_fail@plt+0x26b68>
   31cd0:	ldr	ip, [sp, #44]	; 0x2c
   31cd4:	mov	r1, r0
   31cd8:	cmp	r0, #0
   31cdc:	str	r0, [r6, #8]
   31ce0:	beq	32138 <__assert_fail@plt+0x20d04>
   31ce4:	ldr	r3, [r6]
   31ce8:	ldr	r2, [r6, #4]
   31cec:	mov	r0, #9
   31cf0:	stm	sp, {r5, sl}
   31cf4:	str	r0, [sp, #8]
   31cf8:	mov	r0, ip
   31cfc:	bl	329cc <__assert_fail@plt+0x21598>
   31d00:	ldr	ip, [sp, #44]	; 0x2c
   31d04:	ldr	r7, [fp, #-48]	; 0xffffffd0
   31d08:	cmp	r0, #1
   31d0c:	mov	lr, r4
   31d10:	beq	31be8 <__assert_fail@plt+0x207b4>
   31d14:	mov	r9, r0
   31d18:	cmp	r0, #0
   31d1c:	bne	32138 <__assert_fail@plt+0x20d04>
   31d20:	ldr	r7, [sp, #40]	; 0x28
   31d24:	ldr	r1, [r7, #12]
   31d28:	ldr	r0, [r7, #16]
   31d2c:	cmp	r0, r1
   31d30:	beq	31de0 <__assert_fail@plt+0x209ac>
   31d34:	mov	r0, #1
   31d38:	mov	r1, #20
   31d3c:	bl	37f9c <__assert_fail@plt+0x26b68>
   31d40:	cmp	r0, #0
   31d44:	beq	32160 <__assert_fail@plt+0x20d2c>
   31d48:	mov	r2, r0
   31d4c:	ldr	r0, [r7, #16]
   31d50:	ldr	r1, [r7, #20]
   31d54:	ldr	r3, [sp, #48]	; 0x30
   31d58:	str	r2, [r1, r0, lsl #2]
   31d5c:	stm	r2, {r5, sl}
   31d60:	ldr	r5, [sp, #44]	; 0x2c
   31d64:	add	r0, r0, #1
   31d68:	mov	r1, r7
   31d6c:	str	r0, [r7, #16]
   31d70:	str	r4, [sp]
   31d74:	mov	r0, r5
   31d78:	bl	32804 <__assert_fail@plt+0x213d0>
   31d7c:	cmp	r0, #1
   31d80:	bhi	32148 <__assert_fail@plt+0x20d14>
   31d84:	ldr	r8, [r5, #4]
   31d88:	ldr	r7, [fp, #-48]	; 0xffffffd0
   31d8c:	mov	ip, r5
   31d90:	mov	lr, r4
   31d94:	b	31be8 <__assert_fail@plt+0x207b4>
   31d98:	ldr	r0, [ip, #48]	; 0x30
   31d9c:	cmp	r7, r0
   31da0:	bge	31e14 <__assert_fail@plt+0x209e0>
   31da4:	add	r5, r7, #1
   31da8:	mov	r0, ip
   31dac:	mov	r8, r7
   31db0:	mov	r4, ip
   31db4:	mov	r1, r5
   31db8:	bl	32170 <__assert_fail@plt+0x20d3c>
   31dbc:	cmp	r0, #0
   31dc0:	bne	32148 <__assert_fail@plt+0x20d14>
   31dc4:	ldr	r9, [r4, #4]
   31dc8:	mov	ip, r4
   31dcc:	ldr	r4, [sp, #52]	; 0x34
   31dd0:	ldr	r6, [sp, #40]	; 0x28
   31dd4:	mov	r7, r8
   31dd8:	mov	lr, r4
   31ddc:	b	31c1c <__assert_fail@plt+0x207e8>
   31de0:	mov	r1, #1
   31de4:	orr	r6, r1, r0, lsl #1
   31de8:	ldr	r0, [r7, #20]
   31dec:	lsl	r1, r6, #2
   31df0:	bl	38020 <__assert_fail@plt+0x26bec>
   31df4:	cmp	r0, #0
   31df8:	beq	32160 <__assert_fail@plt+0x20d2c>
   31dfc:	str	r6, [r7, #12]
   31e00:	str	r0, [r7, #20]
   31e04:	b	31d34 <__assert_fail@plt+0x20900>
   31e08:	mov	r1, r5
   31e0c:	cmp	r8, r0
   31e10:	bge	31bd4 <__assert_fail@plt+0x207a0>
   31e14:	ldr	r3, [sp, #28]
   31e18:	ldr	r0, [ip, #124]	; 0x7c
   31e1c:	add	r3, r3, #1
   31e20:	cmp	r3, r0
   31e24:	bge	31e38 <__assert_fail@plt+0x20a04>
   31e28:	ldr	r0, [sp, #36]	; 0x24
   31e2c:	ldr	r2, [sp, #32]
   31e30:	ldr	r0, [r0]
   31e34:	b	31a60 <__assert_fail@plt+0x2062c>
   31e38:	ldr	r0, [ip, #108]	; 0x6c
   31e3c:	b	31e44 <__assert_fail@plt+0x20a10>
   31e40:	ldr	r0, [sp, #20]
   31e44:	ldr	r7, [sp, #20]
   31e48:	mov	r1, #0
   31e4c:	str	r1, [fp, #-32]	; 0xffffffe0
   31e50:	cmp	r7, r0
   31e54:	blt	31e6c <__assert_fail@plt+0x20a38>
   31e58:	b	3182c <__assert_fail@plt+0x203f8>
   31e5c:	ldr	r0, [ip, #108]	; 0x6c
   31e60:	add	r7, r7, #1
   31e64:	cmp	r7, r0
   31e68:	bge	3182c <__assert_fail@plt+0x203f8>
   31e6c:	ldr	r0, [ip, #116]	; 0x74
   31e70:	add	r1, r7, r7, lsl #1
   31e74:	ldr	r3, [sp, #48]	; 0x30
   31e78:	ldr	r2, [r0, r1, lsl #3]
   31e7c:	cmp	r2, r3
   31e80:	bne	31e5c <__assert_fail@plt+0x20a28>
   31e84:	add	r0, r0, r1, lsl #3
   31e88:	ldr	r2, [sp, #52]	; 0x34
   31e8c:	ldr	r1, [r0, #4]
   31e90:	cmp	r1, r2
   31e94:	bne	31e5c <__assert_fail@plt+0x20a28>
   31e98:	str	r7, [sp, #20]
   31e9c:	ldr	r4, [r0, #8]
   31ea0:	ldr	r7, [r0, #12]
   31ea4:	ldr	r0, [sp, #24]
   31ea8:	ldr	r8, [r0, #24]
   31eac:	cmp	r7, r4
   31eb0:	bne	31ecc <__assert_fail@plt+0x20a98>
   31eb4:	ldr	r1, [sp, #48]	; 0x30
   31eb8:	ldr	r0, [r0, #20]
   31ebc:	add	r1, r1, r1, lsl #1
   31ec0:	add	r0, r0, r1, lsl #2
   31ec4:	ldr	r0, [r0, #8]
   31ec8:	b	31ed8 <__assert_fail@plt+0x20aa4>
   31ecc:	ldr	r0, [r0, #12]
   31ed0:	ldr	r1, [sp, #48]	; 0x30
   31ed4:	add	r0, r0, r1, lsl #2
   31ed8:	ldr	r9, [r0]
   31edc:	ldr	r0, [sp, #52]	; 0x34
   31ee0:	add	r0, r7, r0
   31ee4:	sub	r5, r0, r4
   31ee8:	cmp	r5, #0
   31eec:	ble	31f28 <__assert_fail@plt+0x20af4>
   31ef0:	ldr	r1, [ip, #48]	; 0x30
   31ef4:	sub	r0, r5, #1
   31ef8:	cmp	r1, r0
   31efc:	beq	320b8 <__assert_fail@plt+0x20c84>
   31f00:	ldr	r1, [ip, #80]	; 0x50
   31f04:	cmp	r1, #2
   31f08:	blt	31f30 <__assert_fail@plt+0x20afc>
   31f0c:	ldr	r1, [ip, #8]
   31f10:	ldr	r6, [r1, r0, lsl #2]
   31f14:	cmn	r6, #1
   31f18:	bne	31f60 <__assert_fail@plt+0x20b2c>
   31f1c:	sub	r0, r0, #1
   31f20:	cmn	r0, #1
   31f24:	bne	31f10 <__assert_fail@plt+0x20adc>
   31f28:	ldr	sl, [ip, #60]	; 0x3c
   31f2c:	b	31f88 <__assert_fail@plt+0x20b54>
   31f30:	ldr	r1, [ip, #4]
   31f34:	ldr	r2, [ip, #68]	; 0x44
   31f38:	mov	sl, #1
   31f3c:	ldrb	r0, [r1, r0]
   31f40:	ubfx	r1, r0, #5, #3
   31f44:	ldr	r1, [r2, r1, lsl #2]
   31f48:	and	r2, r0, #31
   31f4c:	tst	r1, sl, lsl r2
   31f50:	moveq	sl, #0
   31f54:	cmpeq	r0, #10
   31f58:	bne	31f88 <__assert_fail@plt+0x20b54>
   31f5c:	b	31f78 <__assert_fail@plt+0x20b44>
   31f60:	ldrb	r0, [ip, #78]	; 0x4e
   31f64:	cmp	r0, #0
   31f68:	bne	320c8 <__assert_fail@plt+0x20c94>
   31f6c:	mov	sl, #0
   31f70:	cmp	r6, #10
   31f74:	bne	31f88 <__assert_fail@plt+0x20b54>
   31f78:	ldrb	r0, [ip, #77]	; 0x4d
   31f7c:	cmp	r0, #0
   31f80:	movwne	r0, #1
   31f84:	lsl	sl, r0, #1
   31f88:	ldr	r0, [ip, #100]	; 0x64
   31f8c:	ldr	r2, [sp, #52]	; 0x34
   31f90:	add	r1, r9, r9, lsl #1
   31f94:	ldr	r2, [r0, r2, lsl #2]
   31f98:	ldr	r0, [r0, r5, lsl #2]
   31f9c:	cmp	r2, #0
   31fa0:	beq	31fac <__assert_fail@plt+0x20b78>
   31fa4:	ldr	r2, [r2, #8]
   31fa8:	b	31fb0 <__assert_fail@plt+0x20b7c>
   31fac:	mov	r2, #0
   31fb0:	add	r8, r8, r1, lsl #2
   31fb4:	sub	r6, fp, #44	; 0x2c
   31fb8:	cmp	r0, #0
   31fbc:	str	r2, [fp, #-48]	; 0xffffffd0
   31fc0:	beq	32014 <__assert_fail@plt+0x20be0>
   31fc4:	ldr	r1, [r0, #40]	; 0x28
   31fc8:	mov	r0, r6
   31fcc:	mov	r2, r8
   31fd0:	bl	3257c <__assert_fail@plt+0x21148>
   31fd4:	cmp	r0, #0
   31fd8:	str	r0, [fp, #-32]	; 0xffffffe0
   31fdc:	bne	32150 <__assert_fail@plt+0x20d1c>
   31fe0:	ldr	r1, [sp, #24]
   31fe4:	sub	r0, fp, #32
   31fe8:	mov	r2, r6
   31fec:	mov	r3, sl
   31ff0:	bl	30658 <__assert_fail@plt+0x1f224>
   31ff4:	ldr	r6, [sp, #44]	; 0x2c
   31ff8:	ldr	r1, [r6, #100]	; 0x64
   31ffc:	str	r0, [r1, r5, lsl #2]
   32000:	ldr	r0, [fp, #-36]	; 0xffffffdc
   32004:	bl	138e8 <__assert_fail@plt+0x24b4>
   32008:	ldr	r0, [r6, #100]	; 0x64
   3200c:	mov	ip, r6
   32010:	b	32038 <__assert_fail@plt+0x20c04>
   32014:	ldr	r1, [sp, #24]
   32018:	sub	r0, fp, #32
   3201c:	mov	r2, r8
   32020:	mov	r3, sl
   32024:	bl	30658 <__assert_fail@plt+0x1f224>
   32028:	ldr	ip, [sp, #44]	; 0x2c
   3202c:	ldr	r1, [ip, #100]	; 0x64
   32030:	str	r0, [r1, r5, lsl #2]
   32034:	ldr	r0, [ip, #100]	; 0x64
   32038:	ldr	r1, [r0, r5, lsl #2]
   3203c:	cmp	r1, #0
   32040:	bne	32050 <__assert_fail@plt+0x20c1c>
   32044:	ldr	r9, [fp, #-32]	; 0xffffffe0
   32048:	cmp	r9, #0
   3204c:	bne	3213c <__assert_fail@plt+0x20d08>
   32050:	cmp	r7, r4
   32054:	ldr	r7, [sp, #20]
   32058:	bne	31e5c <__assert_fail@plt+0x20a28>
   3205c:	ldr	r1, [sp, #52]	; 0x34
   32060:	ldr	r0, [r0, r1, lsl #2]
   32064:	ldr	r1, [fp, #-48]	; 0xffffffd0
   32068:	ldr	r0, [r0, #8]
   3206c:	cmp	r0, r1
   32070:	ble	31e5c <__assert_fail@plt+0x20a28>
   32074:	ldr	r2, [sp, #52]	; 0x34
   32078:	mov	r0, ip
   3207c:	mov	r1, r8
   32080:	mov	r4, ip
   32084:	bl	316f0 <__assert_fail@plt+0x202bc>
   32088:	cmp	r0, #0
   3208c:	str	r0, [fp, #-32]	; 0xffffffe0
   32090:	bne	32168 <__assert_fail@plt+0x20d34>
   32094:	mov	r0, r4
   32098:	mov	r1, r8
   3209c:	bl	317f0 <__assert_fail@plt+0x203bc>
   320a0:	ldr	r7, [sp, #20]
   320a4:	cmp	r0, #0
   320a8:	mov	ip, r4
   320ac:	str	r0, [fp, #-32]	; 0xffffffe0
   320b0:	beq	31e5c <__assert_fail@plt+0x20a28>
   320b4:	b	32168 <__assert_fail@plt+0x20d34>
   320b8:	ldr	r0, [ip, #88]	; 0x58
   320bc:	and	r0, r0, #2
   320c0:	eor	sl, r0, #10
   320c4:	b	31f88 <__assert_fail@plt+0x20b54>
   320c8:	mov	r0, r6
   320cc:	bl	11350 <iswalnum@plt>
   320d0:	mov	sl, #1
   320d4:	cmp	r6, #95	; 0x5f
   320d8:	beq	320ec <__assert_fail@plt+0x20cb8>
   320dc:	ldr	ip, [sp, #44]	; 0x2c
   320e0:	cmp	r0, #0
   320e4:	beq	31f6c <__assert_fail@plt+0x20b38>
   320e8:	b	31f88 <__assert_fail@plt+0x20b54>
   320ec:	ldr	ip, [sp, #44]	; 0x2c
   320f0:	b	31f88 <__assert_fail@plt+0x20b54>
   320f4:	ldr	r0, [ip, #88]	; 0x58
   320f8:	and	r0, r0, #2
   320fc:	eor	r1, r0, #10
   32100:	b	31934 <__assert_fail@plt+0x20500>
   32104:	mov	r0, r6
   32108:	bl	11350 <iswalnum@plt>
   3210c:	mov	r1, #1
   32110:	mov	r2, #0
   32114:	cmp	r6, #95	; 0x5f
   32118:	beq	3212c <__assert_fail@plt+0x20cf8>
   3211c:	ldr	ip, [sp, #44]	; 0x2c
   32120:	cmp	r0, #0
   32124:	beq	31918 <__assert_fail@plt+0x204e4>
   32128:	b	3194c <__assert_fail@plt+0x20518>
   3212c:	ldr	ip, [sp, #44]	; 0x2c
   32130:	b	3194c <__assert_fail@plt+0x20518>
   32134:	mov	r9, #0
   32138:	str	r9, [fp, #-32]	; 0xffffffe0
   3213c:	mov	r0, r9
   32140:	sub	sp, fp, #28
   32144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32148:	mov	r9, r0
   3214c:	b	32138 <__assert_fail@plt+0x20d04>
   32150:	mov	r9, r0
   32154:	ldr	r0, [fp, #-36]	; 0xffffffdc
   32158:	bl	138e8 <__assert_fail@plt+0x24b4>
   3215c:	b	3213c <__assert_fail@plt+0x20d08>
   32160:	mov	r9, #12
   32164:	b	32138 <__assert_fail@plt+0x20d04>
   32168:	mov	r9, r0
   3216c:	b	3213c <__assert_fail@plt+0x20d08>
   32170:	push	{r4, r5, r6, r7, fp, lr}
   32174:	add	fp, sp, #16
   32178:	mov	r4, r0
   3217c:	ldr	r0, [r0, #36]	; 0x24
   32180:	mov	r5, #12
   32184:	cmn	r0, #-536870910	; 0xe0000002
   32188:	bhi	32364 <__assert_fail@plt+0x20f30>
   3218c:	ldr	r6, [r4, #48]	; 0x30
   32190:	ldr	r2, [r4, #80]	; 0x50
   32194:	cmp	r6, r0, lsl #1
   32198:	lslge	r6, r0, #1
   3219c:	cmp	r6, r1
   321a0:	movle	r6, r1
   321a4:	cmp	r2, #2
   321a8:	blt	321f0 <__assert_fail@plt+0x20dbc>
   321ac:	cmn	r6, #-1073741823	; 0xc0000001
   321b0:	bhi	32364 <__assert_fail@plt+0x20f30>
   321b4:	ldr	r0, [r4, #8]
   321b8:	lsl	r7, r6, #2
   321bc:	mov	r1, r7
   321c0:	bl	38020 <__assert_fail@plt+0x26bec>
   321c4:	cmp	r0, #0
   321c8:	beq	32364 <__assert_fail@plt+0x20f30>
   321cc:	str	r0, [r4, #8]
   321d0:	ldr	r0, [r4, #12]
   321d4:	cmp	r0, #0
   321d8:	beq	321f0 <__assert_fail@plt+0x20dbc>
   321dc:	mov	r1, r7
   321e0:	bl	38020 <__assert_fail@plt+0x26bec>
   321e4:	cmp	r0, #0
   321e8:	beq	32364 <__assert_fail@plt+0x20f30>
   321ec:	str	r0, [r4, #12]
   321f0:	ldrb	r0, [r4, #75]	; 0x4b
   321f4:	cmp	r0, #0
   321f8:	beq	32214 <__assert_fail@plt+0x20de0>
   321fc:	ldr	r0, [r4, #4]
   32200:	mov	r1, r6
   32204:	bl	38020 <__assert_fail@plt+0x26bec>
   32208:	cmp	r0, #0
   3220c:	beq	32364 <__assert_fail@plt+0x20f30>
   32210:	str	r0, [r4, #4]
   32214:	str	r6, [r4, #36]	; 0x24
   32218:	ldr	r0, [r4, #100]	; 0x64
   3221c:	cmp	r0, #0
   32220:	beq	3223c <__assert_fail@plt+0x20e08>
   32224:	mov	r1, #4
   32228:	add	r1, r1, r6, lsl #2
   3222c:	bl	38020 <__assert_fail@plt+0x26bec>
   32230:	cmp	r0, #0
   32234:	beq	32364 <__assert_fail@plt+0x20f30>
   32238:	str	r0, [r4, #100]	; 0x64
   3223c:	ldrb	r1, [r4, #72]	; 0x48
   32240:	ldr	r0, [r4, #80]	; 0x50
   32244:	cmp	r1, #0
   32248:	beq	32268 <__assert_fail@plt+0x20e34>
   3224c:	cmp	r0, #2
   32250:	blt	3227c <__assert_fail@plt+0x20e48>
   32254:	mov	r0, r4
   32258:	bl	2a700 <__assert_fail@plt+0x192cc>
   3225c:	cmp	r0, #0
   32260:	beq	32360 <__assert_fail@plt+0x20f2c>
   32264:	pop	{r4, r5, r6, r7, fp, pc}
   32268:	cmp	r0, #2
   3226c:	blt	322ec <__assert_fail@plt+0x20eb8>
   32270:	mov	r0, r4
   32274:	bl	2b000 <__assert_fail@plt+0x19bcc>
   32278:	b	32360 <__assert_fail@plt+0x20f2c>
   3227c:	ldr	r6, [r4, #36]	; 0x24
   32280:	ldr	r0, [r4, #48]	; 0x30
   32284:	ldr	r5, [r4, #28]
   32288:	cmp	r6, r0
   3228c:	movgt	r6, r0
   32290:	cmp	r5, r6
   32294:	bge	322e0 <__assert_fail@plt+0x20eac>
   32298:	bl	112e4 <__ctype_toupper_loc@plt>
   3229c:	ldr	r1, [r4]
   322a0:	ldr	r3, [r4, #24]
   322a4:	ldr	r2, [r4, #64]	; 0x40
   322a8:	add	r1, r1, r3
   322ac:	cmp	r2, #0
   322b0:	ldrb	r1, [r1, r5]
   322b4:	bne	322d8 <__assert_fail@plt+0x20ea4>
   322b8:	ldr	r2, [r0]
   322bc:	ldr	r1, [r2, r1, lsl #2]
   322c0:	ldr	r2, [r4, #4]
   322c4:	strb	r1, [r2, r5]
   322c8:	add	r5, r5, #1
   322cc:	cmp	r5, r6
   322d0:	blt	3229c <__assert_fail@plt+0x20e68>
   322d4:	b	322e0 <__assert_fail@plt+0x20eac>
   322d8:	ldrb	r1, [r2, r1]
   322dc:	b	322b8 <__assert_fail@plt+0x20e84>
   322e0:	str	r5, [r4, #28]
   322e4:	str	r5, [r4, #32]
   322e8:	b	32360 <__assert_fail@plt+0x20f2c>
   322ec:	ldr	r2, [r4, #64]	; 0x40
   322f0:	cmp	r2, #0
   322f4:	beq	32360 <__assert_fail@plt+0x20f2c>
   322f8:	ldr	r1, [r4, #36]	; 0x24
   322fc:	ldr	r3, [r4, #48]	; 0x30
   32300:	ldr	r0, [r4, #28]
   32304:	cmp	r1, r3
   32308:	movgt	r1, r3
   3230c:	cmp	r0, r1
   32310:	bge	32358 <__assert_fail@plt+0x20f24>
   32314:	ldr	r6, [r4, #24]
   32318:	ldm	r4, {r3, r7}
   3231c:	add	r6, r6, r0
   32320:	ldrb	r3, [r3, r6]
   32324:	ldrb	r2, [r2, r3]
   32328:	strb	r2, [r7, r0]
   3232c:	add	r0, r0, #1
   32330:	cmp	r0, r1
   32334:	bge	32358 <__assert_fail@plt+0x20f24>
   32338:	ldr	r7, [r4, #24]
   3233c:	ldm	r4, {r2, r3}
   32340:	ldr	r6, [r4, #64]	; 0x40
   32344:	add	r2, r2, r7
   32348:	ldrb	r2, [r2, r0]
   3234c:	ldrb	r2, [r6, r2]
   32350:	strb	r2, [r3, r0]
   32354:	b	3232c <__assert_fail@plt+0x20ef8>
   32358:	str	r0, [r4, #28]
   3235c:	str	r0, [r4, #32]
   32360:	mov	r5, #0
   32364:	mov	r0, r5
   32368:	pop	{r4, r5, r6, r7, fp, pc}
   3236c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   32370:	add	fp, sp, #24
   32374:	sub	sp, sp, #16
   32378:	mov	r9, r0
   3237c:	mov	r4, r1
   32380:	ldr	r5, [r1, #40]	; 0x28
   32384:	ldr	r7, [r1, #84]	; 0x54
   32388:	ldr	r0, [r1, #100]	; 0x64
   3238c:	ldr	r1, [r1, #104]	; 0x68
   32390:	mov	r6, r2
   32394:	cmp	r5, r1
   32398:	ble	323a8 <__assert_fail@plt+0x20f74>
   3239c:	str	r6, [r0, r5, lsl #2]
   323a0:	str	r5, [r4, #104]	; 0x68
   323a4:	b	324d8 <__assert_fail@plt+0x210a4>
   323a8:	ldr	r1, [r0, r5, lsl #2]
   323ac:	cmp	r1, #0
   323b0:	beq	323ec <__assert_fail@plt+0x20fb8>
   323b4:	ldr	r2, [r1, #40]	; 0x28
   323b8:	cmp	r6, #0
   323bc:	beq	323f4 <__assert_fail@plt+0x20fc0>
   323c0:	ldr	r8, [r6, #40]	; 0x28
   323c4:	mov	r0, sp
   323c8:	mov	r1, r8
   323cc:	bl	3257c <__assert_fail@plt+0x21148>
   323d0:	cmp	r0, #0
   323d4:	str	r0, [r9]
   323d8:	bne	32544 <__assert_fail@plt+0x21110>
   323dc:	ldr	r0, [r4, #40]	; 0x28
   323e0:	cmp	r0, #0
   323e4:	bgt	32414 <__assert_fail@plt+0x20fe0>
   323e8:	b	3244c <__assert_fail@plt+0x21018>
   323ec:	str	r6, [r0, r5, lsl #2]
   323f0:	b	324d8 <__assert_fail@plt+0x210a4>
   323f4:	vldr	d16, [r2]
   323f8:	ldr	r0, [r2, #8]
   323fc:	mov	r8, #0
   32400:	str	r0, [sp, #8]
   32404:	mov	r0, r5
   32408:	vstr	d16, [sp]
   3240c:	cmp	r0, #0
   32410:	ble	3244c <__assert_fail@plt+0x21018>
   32414:	ldr	r1, [r4, #48]	; 0x30
   32418:	sub	r0, r0, #1
   3241c:	cmp	r1, r0
   32420:	beq	3254c <__assert_fail@plt+0x21118>
   32424:	ldr	r1, [r4, #80]	; 0x50
   32428:	cmp	r1, #2
   3242c:	blt	32454 <__assert_fail@plt+0x21020>
   32430:	ldr	r1, [r4, #8]
   32434:	ldr	r6, [r1, r0, lsl #2]
   32438:	cmn	r6, #1
   3243c:	bne	32484 <__assert_fail@plt+0x21050>
   32440:	sub	r0, r0, #1
   32444:	cmn	r0, #1
   32448:	bne	32434 <__assert_fail@plt+0x21000>
   3244c:	ldr	r3, [r4, #60]	; 0x3c
   32450:	b	324ac <__assert_fail@plt+0x21078>
   32454:	ldr	r1, [r4, #4]
   32458:	ldr	r2, [r4, #68]	; 0x44
   3245c:	mov	r3, #1
   32460:	ldrb	r0, [r1, r0]
   32464:	ubfx	r1, r0, #5, #3
   32468:	ldr	r1, [r2, r1, lsl #2]
   3246c:	and	r2, r0, #31
   32470:	tst	r1, r3, lsl r2
   32474:	moveq	r3, #0
   32478:	cmpeq	r0, #10
   3247c:	bne	324ac <__assert_fail@plt+0x21078>
   32480:	b	3249c <__assert_fail@plt+0x21068>
   32484:	ldrb	r0, [r4, #78]	; 0x4e
   32488:	cmp	r0, #0
   3248c:	bne	3255c <__assert_fail@plt+0x21128>
   32490:	mov	r3, #0
   32494:	cmp	r6, #10
   32498:	bne	324ac <__assert_fail@plt+0x21078>
   3249c:	ldrb	r0, [r4, #77]	; 0x4d
   324a0:	cmp	r0, #0
   324a4:	movwne	r0, #1
   324a8:	lsl	r3, r0, #1
   324ac:	mov	r2, sp
   324b0:	mov	r0, r9
   324b4:	mov	r1, r7
   324b8:	bl	30658 <__assert_fail@plt+0x1f224>
   324bc:	mov	r6, r0
   324c0:	ldr	r0, [r4, #100]	; 0x64
   324c4:	cmp	r8, #0
   324c8:	str	r6, [r0, r5, lsl #2]
   324cc:	beq	324d8 <__assert_fail@plt+0x210a4>
   324d0:	ldr	r0, [sp, #8]
   324d4:	bl	138e8 <__assert_fail@plt+0x24b4>
   324d8:	cmp	r6, #0
   324dc:	ldrne	r0, [r7, #76]	; 0x4c
   324e0:	cmpne	r0, #0
   324e4:	bne	324f4 <__assert_fail@plt+0x210c0>
   324e8:	mov	r0, r6
   324ec:	sub	sp, fp, #24
   324f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   324f4:	add	r7, r6, #4
   324f8:	mov	r0, r4
   324fc:	mov	r2, r5
   32500:	mov	r1, r7
   32504:	bl	316f0 <__assert_fail@plt+0x202bc>
   32508:	cmp	r0, #0
   3250c:	str	r0, [r9]
   32510:	bne	32544 <__assert_fail@plt+0x21110>
   32514:	ldrb	r0, [r6, #52]	; 0x34
   32518:	tst	r0, #64	; 0x40
   3251c:	beq	324e8 <__assert_fail@plt+0x210b4>
   32520:	mov	r0, r4
   32524:	mov	r1, r7
   32528:	bl	317f0 <__assert_fail@plt+0x203bc>
   3252c:	str	r0, [r9]
   32530:	cmp	r0, #0
   32534:	mov	r6, #0
   32538:	ldreq	r0, [r4, #100]	; 0x64
   3253c:	ldreq	r6, [r0, r5, lsl #2]
   32540:	b	324e8 <__assert_fail@plt+0x210b4>
   32544:	mov	r6, #0
   32548:	b	324e8 <__assert_fail@plt+0x210b4>
   3254c:	ldr	r0, [r4, #88]	; 0x58
   32550:	and	r0, r0, #2
   32554:	eor	r3, r0, #10
   32558:	b	324ac <__assert_fail@plt+0x21078>
   3255c:	mov	r0, r6
   32560:	bl	11350 <iswalnum@plt>
   32564:	mov	r3, #1
   32568:	cmp	r6, #95	; 0x5f
   3256c:	beq	324ac <__assert_fail@plt+0x21078>
   32570:	cmp	r0, #0
   32574:	beq	32490 <__assert_fail@plt+0x2105c>
   32578:	b	324ac <__assert_fail@plt+0x21078>
   3257c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32580:	add	fp, sp, #28
   32584:	sub	sp, sp, #20
   32588:	mov	sl, r2
   3258c:	cmp	r1, #0
   32590:	str	r0, [sp, #16]
   32594:	beq	32708 <__assert_fail@plt+0x212d4>
   32598:	ldr	r0, [r1, #4]
   3259c:	mov	r8, r1
   325a0:	cmp	sl, #0
   325a4:	beq	326c4 <__assert_fail@plt+0x21290>
   325a8:	cmp	r0, #1
   325ac:	blt	326c4 <__assert_fail@plt+0x21290>
   325b0:	ldr	r1, [sl, #4]
   325b4:	cmp	r1, #1
   325b8:	blt	326c4 <__assert_fail@plt+0x21290>
   325bc:	ldr	r4, [sp, #16]
   325c0:	add	r0, r1, r0
   325c4:	str	r0, [r4]
   325c8:	lsl	r0, r0, #2
   325cc:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   325d0:	cmp	r0, #0
   325d4:	str	r0, [r4, #8]
   325d8:	beq	327f8 <__assert_fail@plt+0x213c4>
   325dc:	ldr	r9, [sl, #4]
   325e0:	ldr	lr, [r8, #4]
   325e4:	mov	r7, #0
   325e8:	mov	r1, #0
   325ec:	cmp	r9, #0
   325f0:	movwgt	r1, #1
   325f4:	cmp	lr, #1
   325f8:	blt	3277c <__assert_fail@plt+0x21348>
   325fc:	mov	r2, #0
   32600:	mov	ip, #0
   32604:	str	r2, [sp, #8]
   32608:	mov	r2, #0
   3260c:	str	r2, [sp, #12]
   32610:	mov	r2, #0
   32614:	ldr	r4, [sp, #12]
   32618:	mov	r7, ip
   3261c:	tst	r1, #1
   32620:	beq	327ac <__assert_fail@plt+0x21378>
   32624:	ldr	r1, [sl, #8]
   32628:	ldr	r5, [r1, r7, lsl #2]
   3262c:	ldr	r1, [r8, #8]
   32630:	ldr	r3, [r1, r2, lsl #2]
   32634:	cmp	r3, r5
   32638:	ble	32660 <__assert_fail@plt+0x2122c>
   3263c:	add	r7, r7, #1
   32640:	str	r5, [r0, r4, lsl #2]
   32644:	mov	r1, #0
   32648:	add	r4, r4, #1
   3264c:	cmp	r9, r7
   32650:	movwgt	r1, #1
   32654:	cmp	lr, r2
   32658:	bgt	3261c <__assert_fail@plt+0x211e8>
   3265c:	b	32780 <__assert_fail@plt+0x2134c>
   32660:	str	r3, [r0, r4, lsl #2]
   32664:	ldr	r6, [sp, #8]
   32668:	add	r1, r7, #1
   3266c:	mov	ip, r7
   32670:	add	r2, r2, #1
   32674:	ldr	r9, [sl, #4]
   32678:	ldr	lr, [r8, #4]
   3267c:	moveq	ip, r1
   32680:	str	r1, [sp, #4]
   32684:	mov	r1, #0
   32688:	sub	r6, r6, #1
   3268c:	cmp	r9, ip
   32690:	str	r6, [sp, #8]
   32694:	add	r6, r4, #1
   32698:	movwgt	r1, #1
   3269c:	cmp	lr, r2
   326a0:	str	r6, [sp, #12]
   326a4:	bgt	32614 <__assert_fail@plt+0x211e0>
   326a8:	ldr	r2, [sp, #4]
   326ac:	cmp	r3, r5
   326b0:	add	r4, r4, #1
   326b4:	moveq	r7, r2
   326b8:	cmp	r1, #0
   326bc:	bne	32788 <__assert_fail@plt+0x21354>
   326c0:	b	327d4 <__assert_fail@plt+0x213a0>
   326c4:	cmp	r0, #1
   326c8:	blt	32708 <__assert_fail@plt+0x212d4>
   326cc:	ldr	r1, [sp, #16]
   326d0:	str	r0, [r1, #4]
   326d4:	ldr	r1, [r8, #4]
   326d8:	cmp	r1, #1
   326dc:	blt	32760 <__assert_fail@plt+0x2132c>
   326e0:	ldr	r4, [sp, #16]
   326e4:	str	r0, [r4]
   326e8:	lsl	r0, r0, #2
   326ec:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   326f0:	cmp	r0, #0
   326f4:	str	r0, [r4, #8]
   326f8:	beq	327e8 <__assert_fail@plt+0x213b4>
   326fc:	ldr	r2, [r8, #4]
   32700:	ldr	r1, [r8, #8]
   32704:	b	32754 <__assert_fail@plt+0x21320>
   32708:	cmp	sl, #0
   3270c:	beq	32760 <__assert_fail@plt+0x2132c>
   32710:	ldr	r0, [sl, #4]
   32714:	cmp	r0, #1
   32718:	blt	32760 <__assert_fail@plt+0x2132c>
   3271c:	ldr	r1, [sp, #16]
   32720:	str	r0, [r1, #4]
   32724:	ldr	r1, [sl, #4]
   32728:	cmp	r1, #1
   3272c:	blt	32760 <__assert_fail@plt+0x2132c>
   32730:	ldr	r4, [sp, #16]
   32734:	str	r0, [r4]
   32738:	lsl	r0, r0, #2
   3273c:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   32740:	cmp	r0, #0
   32744:	str	r0, [r4, #8]
   32748:	beq	327e8 <__assert_fail@plt+0x213b4>
   3274c:	ldr	r2, [sl, #4]
   32750:	ldr	r1, [sl, #8]
   32754:	lsl	r2, r2, #2
   32758:	bl	111e8 <memcpy@plt>
   3275c:	b	327dc <__assert_fail@plt+0x213a8>
   32760:	ldr	r1, [sp, #16]
   32764:	mov	r0, #0
   32768:	str	r0, [r1]
   3276c:	str	r0, [r1, #4]
   32770:	str	r0, [r1, #8]
   32774:	sub	sp, fp, #28
   32778:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3277c:	mov	r4, #0
   32780:	cmp	r1, #0
   32784:	beq	327d4 <__assert_fail@plt+0x213a0>
   32788:	ldr	r1, [sl, #8]
   3278c:	sub	r2, r9, r7
   32790:	add	r0, r0, r4, lsl #2
   32794:	lsl	r2, r2, #2
   32798:	add	r1, r1, r7, lsl #2
   3279c:	bl	111e8 <memcpy@plt>
   327a0:	sub	r0, r4, r7
   327a4:	add	r4, r0, r9
   327a8:	b	327d4 <__assert_fail@plt+0x213a0>
   327ac:	ldr	r1, [r8, #8]
   327b0:	add	r0, r0, r4, lsl #2
   327b4:	add	r1, r1, r2, lsl #2
   327b8:	sub	r2, lr, r2
   327bc:	lsl	r2, r2, #2
   327c0:	bl	111e8 <memcpy@plt>
   327c4:	ldr	r0, [r8, #4]
   327c8:	ldr	r1, [sp, #8]
   327cc:	add	r0, r0, r1
   327d0:	add	r4, r0, r4
   327d4:	ldr	r0, [sp, #16]
   327d8:	str	r4, [r0, #4]
   327dc:	mov	r0, #0
   327e0:	sub	sp, fp, #28
   327e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   327e8:	ldr	r1, [sp, #16]
   327ec:	mov	r0, #0
   327f0:	str	r0, [r1]
   327f4:	str	r0, [r1, #4]
   327f8:	mov	r0, #12
   327fc:	sub	sp, fp, #28
   32800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32804:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32808:	add	fp, sp, #28
   3280c:	sub	sp, sp, #12
   32810:	mov	r6, r2
   32814:	mov	r7, r3
   32818:	ldr	r2, [r2]
   3281c:	mov	r4, r0
   32820:	mov	r0, #8
   32824:	mov	r8, r1
   32828:	ldr	r9, [fp, #8]
   3282c:	ldr	r3, [r6, #4]
   32830:	str	r0, [sp, #8]
   32834:	add	r1, r6, #8
   32838:	mov	r0, r4
   3283c:	stm	sp, {r7, r9}
   32840:	bl	329cc <__assert_fail@plt+0x21598>
   32844:	mov	r5, r0
   32848:	cmp	r0, #0
   3284c:	beq	3285c <__assert_fail@plt+0x21428>
   32850:	mov	r0, r5
   32854:	sub	sp, fp, #28
   32858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3285c:	ldr	r0, [r4, #108]	; 0x6c
   32860:	ldr	r1, [r4, #112]	; 0x70
   32864:	ldr	sl, [r6, #4]
   32868:	ldr	r5, [r8]
   3286c:	cmp	r0, r1
   32870:	blt	328c0 <__assert_fail@plt+0x2148c>
   32874:	ldr	r0, [r4, #116]	; 0x74
   32878:	add	r1, r1, r1, lsl #1
   3287c:	lsl	r1, r1, #4
   32880:	bl	38020 <__assert_fail@plt+0x26bec>
   32884:	cmp	r0, #0
   32888:	beq	329bc <__assert_fail@plt+0x21588>
   3288c:	str	r0, [r4, #116]	; 0x74
   32890:	ldr	r1, [r4, #108]	; 0x6c
   32894:	ldr	r2, [r4, #112]	; 0x70
   32898:	add	r1, r1, r1, lsl #1
   3289c:	add	r0, r0, r1, lsl #3
   328a0:	add	r1, r2, r2, lsl #1
   328a4:	lsl	r2, r1, #3
   328a8:	mov	r1, #0
   328ac:	bl	11368 <memset@plt>
   328b0:	ldr	r1, [r4, #112]	; 0x70
   328b4:	ldr	r0, [r4, #108]	; 0x6c
   328b8:	lsl	r1, r1, #1
   328bc:	str	r1, [r4, #112]	; 0x70
   328c0:	ldr	r1, [r4, #116]	; 0x74
   328c4:	cmp	r0, #1
   328c8:	blt	328e8 <__assert_fail@plt+0x214b4>
   328cc:	sub	r2, r0, #1
   328d0:	add	r2, r2, r2, lsl #1
   328d4:	add	r2, r1, r2, lsl #3
   328d8:	ldr	r3, [r2, #4]
   328dc:	cmp	r3, r9
   328e0:	moveq	r3, #1
   328e4:	strbeq	r3, [r2, #20]
   328e8:	add	r2, r0, r0, lsl #1
   328ec:	cmp	sl, r5
   328f0:	mov	r3, #0
   328f4:	mov	ip, #0
   328f8:	add	r0, r0, #1
   328fc:	mvneq	r3, #0
   32900:	str	r7, [r1, r2, lsl #3]!
   32904:	str	r9, [r1, #4]
   32908:	str	r5, [r1, #8]
   3290c:	str	sl, [r1, #12]
   32910:	str	r3, [r1, #16]
   32914:	str	r0, [r4, #108]	; 0x6c
   32918:	strb	ip, [r1, #20]
   3291c:	sub	r0, sl, r5
   32920:	ldr	r1, [r4, #120]	; 0x78
   32924:	cmp	r1, r0
   32928:	strlt	r0, [r4, #120]	; 0x78
   3292c:	ldr	r0, [r6, #4]
   32930:	ldr	r1, [r8]
   32934:	ldr	r7, [r4, #104]	; 0x68
   32938:	add	r0, r0, r9
   3293c:	sub	r6, r0, r1
   32940:	ldr	r0, [r4, #36]	; 0x24
   32944:	cmp	r0, r6
   32948:	bgt	32958 <__assert_fail@plt+0x21524>
   3294c:	ldr	r1, [r4, #48]	; 0x30
   32950:	cmp	r0, r1
   32954:	blt	32970 <__assert_fail@plt+0x2153c>
   32958:	ldr	r0, [r4, #28]
   3295c:	cmp	r0, r6
   32960:	bgt	32988 <__assert_fail@plt+0x21554>
   32964:	ldr	r1, [r4, #48]	; 0x30
   32968:	cmp	r0, r1
   3296c:	bge	32988 <__assert_fail@plt+0x21554>
   32970:	add	r1, r6, #1
   32974:	mov	r0, r4
   32978:	bl	32170 <__assert_fail@plt+0x20d3c>
   3297c:	mov	r5, r0
   32980:	cmp	r0, #0
   32984:	bne	32850 <__assert_fail@plt+0x2141c>
   32988:	mov	r5, #0
   3298c:	cmp	r6, r7
   32990:	ble	32850 <__assert_fail@plt+0x2141c>
   32994:	sub	r0, r6, r7
   32998:	mov	r1, #0
   3299c:	mov	r5, #0
   329a0:	lsl	r2, r0, #2
   329a4:	ldr	r0, [r4, #100]	; 0x64
   329a8:	add	r0, r0, r7, lsl #2
   329ac:	add	r0, r0, #4
   329b0:	bl	11368 <memset@plt>
   329b4:	str	r6, [r4, #104]	; 0x68
   329b8:	b	32850 <__assert_fail@plt+0x2141c>
   329bc:	ldr	r0, [r4, #116]	; 0x74
   329c0:	bl	138e8 <__assert_fail@plt+0x24b4>
   329c4:	mov	r5, #12
   329c8:	b	32850 <__assert_fail@plt+0x2141c>
   329cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   329d0:	add	fp, sp, #28
   329d4:	sub	sp, sp, #84	; 0x54
   329d8:	ldr	r7, [r0, #84]	; 0x54
   329dc:	mov	ip, r1
   329e0:	mov	r1, #0
   329e4:	mov	lr, r2
   329e8:	mov	r9, r3
   329ec:	str	r0, [sp, #44]	; 0x2c
   329f0:	str	r1, [fp, #-52]	; 0xffffffcc
   329f4:	ldr	r4, [ip, #4]
   329f8:	ldr	r1, [r7]
   329fc:	str	r7, [sp, #24]
   32a00:	ldr	sl, [r1, r2, lsl #3]
   32a04:	ldr	r1, [r0, #120]	; 0x78
   32a08:	ldr	r2, [fp, #12]
   32a0c:	add	r2, r1, r2
   32a10:	cmp	r4, r2
   32a14:	str	sl, [sp, #20]
   32a18:	ble	33328 <__assert_fail@plt+0x21ef4>
   32a1c:	ldr	r2, [r0, #100]	; 0x64
   32a20:	ldr	r5, [ip]
   32a24:	ldr	r4, [r0, #40]	; 0x28
   32a28:	ldr	r1, [r0, #88]	; 0x58
   32a2c:	str	r2, [sp, #8]
   32a30:	ldr	r2, [ip, #8]
   32a34:	cmp	r5, #0
   32a38:	str	r4, [sp, #12]
   32a3c:	moveq	r5, r9
   32a40:	cmp	r5, #0
   32a44:	str	r2, [r0, #100]	; 0x64
   32a48:	str	r5, [r0, #40]	; 0x28
   32a4c:	ble	33398 <__assert_fail@plt+0x21f64>
   32a50:	ldr	r2, [r0, #48]	; 0x30
   32a54:	sub	r3, r5, #1
   32a58:	cmp	r2, r3
   32a5c:	beq	333a0 <__assert_fail@plt+0x21f6c>
   32a60:	ldr	r1, [r0, #80]	; 0x50
   32a64:	cmp	r1, #2
   32a68:	blt	32a94 <__assert_fail@plt+0x21660>
   32a6c:	ldr	r1, [r0, #8]
   32a70:	ldr	r6, [r1, r3, lsl #2]
   32a74:	cmn	r6, #1
   32a78:	bne	32ac4 <__assert_fail@plt+0x21690>
   32a7c:	sub	r3, r3, #1
   32a80:	cmn	r3, #1
   32a84:	bne	32a70 <__assert_fail@plt+0x2163c>
   32a88:	ldr	r0, [sp, #44]	; 0x2c
   32a8c:	ldr	r8, [r0, #60]	; 0x3c
   32a90:	b	32af4 <__assert_fail@plt+0x216c0>
   32a94:	ldr	r1, [r0, #4]
   32a98:	ldr	r2, [r0, #68]	; 0x44
   32a9c:	mov	r8, #1
   32aa0:	ldrb	r0, [r1, r3]
   32aa4:	ubfx	r1, r0, #5, #3
   32aa8:	ldr	r1, [r2, r1, lsl #2]
   32aac:	and	r2, r0, #31
   32ab0:	tst	r1, r8, lsl r2
   32ab4:	moveq	r8, #0
   32ab8:	cmpeq	r0, #10
   32abc:	bne	32af4 <__assert_fail@plt+0x216c0>
   32ac0:	b	32ae0 <__assert_fail@plt+0x216ac>
   32ac4:	ldr	r0, [sp, #44]	; 0x2c
   32ac8:	ldrb	r0, [r0, #78]	; 0x4e
   32acc:	cmp	r0, #0
   32ad0:	bne	333d4 <__assert_fail@plt+0x21fa0>
   32ad4:	mov	r8, #0
   32ad8:	cmp	r6, #10
   32adc:	bne	32af4 <__assert_fail@plt+0x216c0>
   32ae0:	ldr	r0, [sp, #44]	; 0x2c
   32ae4:	ldrb	r0, [r0, #77]	; 0x4d
   32ae8:	cmp	r0, #0
   32aec:	movwne	r0, #1
   32af0:	lsl	r8, r0, #1
   32af4:	cmp	r5, r9
   32af8:	str	ip, [sp, #16]
   32afc:	bne	32bc0 <__assert_fail@plt+0x2178c>
   32b00:	mov	r0, #1
   32b04:	mov	r6, lr
   32b08:	str	r0, [sp, #52]	; 0x34
   32b0c:	str	r0, [sp, #48]	; 0x30
   32b10:	mov	r0, #4
   32b14:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   32b18:	cmp	r0, #0
   32b1c:	str	r0, [sp, #56]	; 0x38
   32b20:	beq	333bc <__assert_fail@plt+0x21f88>
   32b24:	ldr	r3, [fp, #16]
   32b28:	str	r6, [r0]
   32b2c:	mov	r0, #0
   32b30:	add	r1, sp, #48	; 0x30
   32b34:	mov	r2, sl
   32b38:	str	r0, [fp, #-52]	; 0xffffffcc
   32b3c:	mov	r0, r7
   32b40:	bl	33410 <__assert_fail@plt+0x21fdc>
   32b44:	cmp	r0, #0
   32b48:	str	r0, [fp, #-52]	; 0xffffffcc
   32b4c:	bne	333ac <__assert_fail@plt+0x21f78>
   32b50:	ldr	r0, [sp, #52]	; 0x34
   32b54:	ldr	r9, [sp, #44]	; 0x2c
   32b58:	cmp	r0, #0
   32b5c:	beq	32b88 <__assert_fail@plt+0x21754>
   32b60:	ldr	r0, [fp, #16]
   32b64:	ldr	r3, [sp, #20]
   32b68:	add	r1, sp, #48	; 0x30
   32b6c:	mov	r2, r5
   32b70:	str	r0, [sp]
   32b74:	mov	r0, r9
   32b78:	bl	33548 <__assert_fail@plt+0x22114>
   32b7c:	cmp	r0, #0
   32b80:	str	r0, [fp, #-52]	; 0xffffffcc
   32b84:	bne	333ac <__assert_fail@plt+0x21f78>
   32b88:	ldr	r1, [sp, #24]
   32b8c:	sub	r0, fp, #52	; 0x34
   32b90:	add	r2, sp, #48	; 0x30
   32b94:	mov	r3, r8
   32b98:	bl	30658 <__assert_fail@plt+0x1f224>
   32b9c:	mov	r6, r0
   32ba0:	cmp	r0, #0
   32ba4:	bne	32bb4 <__assert_fail@plt+0x21780>
   32ba8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   32bac:	cmp	r0, #0
   32bb0:	bne	33304 <__assert_fail@plt+0x21ed0>
   32bb4:	ldr	r0, [r9, #100]	; 0x64
   32bb8:	str	r6, [r0, r5, lsl #2]
   32bbc:	b	32c54 <__assert_fail@plt+0x21820>
   32bc0:	ldr	r9, [sp, #44]	; 0x2c
   32bc4:	ldr	r0, [r9, #100]	; 0x64
   32bc8:	ldr	r6, [r0, r5, lsl #2]
   32bcc:	cmp	r6, #0
   32bd0:	beq	32bf4 <__assert_fail@plt+0x217c0>
   32bd4:	ldrb	r0, [r6, #52]	; 0x34
   32bd8:	tst	r0, #64	; 0x40
   32bdc:	bne	32c08 <__assert_fail@plt+0x217d4>
   32be0:	mov	r0, #0
   32be4:	str	r0, [sp, #52]	; 0x34
   32be8:	str	r0, [sp, #48]	; 0x30
   32bec:	str	r0, [sp, #56]	; 0x38
   32bf0:	b	32c54 <__assert_fail@plt+0x21820>
   32bf4:	mov	r6, #0
   32bf8:	str	r6, [sp, #52]	; 0x34
   32bfc:	str	r6, [sp, #48]	; 0x30
   32c00:	str	r6, [sp, #56]	; 0x38
   32c04:	b	32c54 <__assert_fail@plt+0x21820>
   32c08:	ldr	r0, [r6, #8]
   32c0c:	cmp	r0, #1
   32c10:	str	r0, [sp, #52]	; 0x34
   32c14:	blt	332c8 <__assert_fail@plt+0x21e94>
   32c18:	str	r0, [sp, #48]	; 0x30
   32c1c:	lsl	r0, r0, #2
   32c20:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   32c24:	cmp	r0, #0
   32c28:	str	r0, [sp, #56]	; 0x38
   32c2c:	beq	333bc <__assert_fail@plt+0x21f88>
   32c30:	ldr	r2, [r6, #8]
   32c34:	ldr	r1, [r6, #12]
   32c38:	lsl	r2, r2, #2
   32c3c:	bl	111e8 <memcpy@plt>
   32c40:	ldrb	r0, [r6, #52]	; 0x34
   32c44:	mov	r1, #0
   32c48:	str	r1, [fp, #-52]	; 0xffffffcc
   32c4c:	tst	r0, #64	; 0x40
   32c50:	bne	32b60 <__assert_fail@plt+0x2172c>
   32c54:	ldr	r4, [fp, #12]
   32c58:	cmp	r5, r4
   32c5c:	bge	33220 <__assert_fail@plt+0x21dec>
   32c60:	ldr	r7, [sp, #24]
   32c64:	ldr	sl, [sp, #20]
   32c68:	ldr	r4, [fp, #16]
   32c6c:	add	r8, sp, #48	; 0x30
   32c70:	mov	r0, #0
   32c74:	str	r6, [sp, #40]	; 0x28
   32c78:	b	32ca8 <__assert_fail@plt+0x21874>
   32c7c:	ldr	r1, [sp, #40]	; 0x28
   32c80:	ldr	r0, [r9, #100]	; 0x64
   32c84:	ldr	r5, [sp, #28]
   32c88:	str	r1, [r0, r5, lsl #2]
   32c8c:	cmp	r1, #0
   32c90:	ldr	r1, [sp, #32]
   32c94:	mov	r0, #0
   32c98:	addeq	r0, r1, #1
   32c9c:	ldr	r1, [fp, #12]
   32ca0:	cmp	r5, r1
   32ca4:	beq	3321c <__assert_fail@plt+0x21de8>
   32ca8:	str	r0, [sp, #32]
   32cac:	ldr	r0, [r9, #120]	; 0x78
   32cb0:	ldr	r1, [sp, #32]
   32cb4:	cmp	r1, r0
   32cb8:	bgt	33220 <__assert_fail@plt+0x21dec>
   32cbc:	mov	r0, #0
   32cc0:	add	r1, r5, #1
   32cc4:	str	r0, [sp, #52]	; 0x34
   32cc8:	str	r1, [sp, #28]
   32ccc:	ldr	r0, [r9, #100]	; 0x64
   32cd0:	ldr	r0, [r0, r1, lsl #2]
   32cd4:	cmp	r0, #0
   32cd8:	beq	32cf4 <__assert_fail@plt+0x218c0>
   32cdc:	add	r1, r0, #4
   32ce0:	mov	r0, r8
   32ce4:	bl	30358 <__assert_fail@plt+0x1ef24>
   32ce8:	cmp	r0, #0
   32cec:	str	r0, [fp, #-52]	; 0xffffffcc
   32cf0:	bne	33304 <__assert_fail@plt+0x21ed0>
   32cf4:	ldr	r1, [sp, #40]	; 0x28
   32cf8:	cmp	r1, #0
   32cfc:	beq	330d4 <__assert_fail@plt+0x21ca0>
   32d00:	mov	r0, #0
   32d04:	ldr	r8, [r9, #84]	; 0x54
   32d08:	str	r0, [fp, #-32]	; 0xffffffe0
   32d0c:	str	r0, [fp, #-44]	; 0xffffffd4
   32d10:	str	r0, [fp, #-48]	; 0xffffffd0
   32d14:	str	r0, [fp, #-40]	; 0xffffffd8
   32d18:	ldr	r1, [r1, #20]
   32d1c:	cmp	r1, #1
   32d20:	blt	330c0 <__assert_fail@plt+0x21c8c>
   32d24:	ldr	r7, [sp, #40]	; 0x28
   32d28:	mov	r4, #0
   32d2c:	b	32d60 <__assert_fail@plt+0x2192c>
   32d30:	ldr	r1, [sp, #52]	; 0x34
   32d34:	cmp	r1, #0
   32d38:	bne	32edc <__assert_fail@plt+0x21aa8>
   32d3c:	ldr	r0, [sp, #56]	; 0x38
   32d40:	str	r6, [r0]
   32d44:	ldr	r0, [sp, #52]	; 0x34
   32d48:	add	r0, r0, #1
   32d4c:	str	r0, [sp, #52]	; 0x34
   32d50:	ldr	r0, [r7, #20]
   32d54:	add	r4, r4, #1
   32d58:	cmp	r4, r0
   32d5c:	bge	330b4 <__assert_fail@plt+0x21c80>
   32d60:	ldr	r0, [r7, #24]
   32d64:	ldr	sl, [r0, r4, lsl #2]
   32d68:	ldr	r0, [r8]
   32d6c:	add	r1, r0, sl, lsl #3
   32d70:	ldrb	r1, [r1, #6]
   32d74:	tst	r1, #16
   32d78:	beq	32e88 <__assert_fail@plt+0x21a54>
   32d7c:	mov	r0, r8
   32d80:	mov	r1, sl
   32d84:	mov	r2, r9
   32d88:	mov	r3, r5
   32d8c:	bl	33f28 <__assert_fail@plt+0x22af4>
   32d90:	mov	r9, r0
   32d94:	cmp	r0, #2
   32d98:	blt	32e74 <__assert_fail@plt+0x21a40>
   32d9c:	ldr	r0, [sp, #44]	; 0x2c
   32da0:	ldr	r1, [r8, #12]
   32da4:	add	r6, r9, r5
   32da8:	ldr	r0, [r0, #100]	; 0x64
   32dac:	ldr	r1, [r1, sl, lsl #2]
   32db0:	ldr	r0, [r0, r6, lsl #2]
   32db4:	str	r1, [sp, #36]	; 0x24
   32db8:	mov	r1, #0
   32dbc:	str	r1, [fp, #-44]	; 0xffffffd4
   32dc0:	cmp	r0, #0
   32dc4:	beq	32de0 <__assert_fail@plt+0x219ac>
   32dc8:	add	r1, r0, #4
   32dcc:	sub	r0, fp, #48	; 0x30
   32dd0:	bl	30358 <__assert_fail@plt+0x1ef24>
   32dd4:	cmp	r0, #0
   32dd8:	str	r0, [fp, #-32]	; 0xffffffe0
   32ddc:	bne	332f4 <__assert_fail@plt+0x21ec0>
   32de0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   32de4:	cmp	r2, #0
   32de8:	beq	32e14 <__assert_fail@plt+0x219e0>
   32dec:	ldr	r1, [fp, #-44]	; 0xffffffd4
   32df0:	ldr	r7, [sp, #36]	; 0x24
   32df4:	cmp	r1, #0
   32df8:	bne	32fc4 <__assert_fail@plt+0x21b90>
   32dfc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   32e00:	str	r7, [r0]
   32e04:	ldr	r0, [fp, #-44]	; 0xffffffd4
   32e08:	add	r0, r0, #1
   32e0c:	str	r0, [fp, #-44]	; 0xffffffd4
   32e10:	b	32e3c <__assert_fail@plt+0x21a08>
   32e14:	mov	r0, #1
   32e18:	str	r0, [fp, #-44]	; 0xffffffd4
   32e1c:	str	r0, [fp, #-48]	; 0xffffffd0
   32e20:	mov	r0, #4
   32e24:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   32e28:	ldr	r1, [sp, #36]	; 0x24
   32e2c:	cmp	r0, #0
   32e30:	str	r0, [fp, #-40]	; 0xffffffd8
   32e34:	beq	33314 <__assert_fail@plt+0x21ee0>
   32e38:	str	r1, [r0]
   32e3c:	sub	r0, fp, #32
   32e40:	mov	r1, r8
   32e44:	sub	r2, fp, #48	; 0x30
   32e48:	bl	33c10 <__assert_fail@plt+0x227dc>
   32e4c:	ldr	r2, [sp, #44]	; 0x2c
   32e50:	ldr	r1, [r2, #100]	; 0x64
   32e54:	str	r0, [r1, r6, lsl #2]
   32e58:	ldr	r0, [r2, #100]	; 0x64
   32e5c:	ldr	r0, [r0, r6, lsl #2]
   32e60:	cmp	r0, #0
   32e64:	bne	32e74 <__assert_fail@plt+0x21a40>
   32e68:	ldr	r7, [fp, #-32]	; 0xffffffe0
   32e6c:	cmp	r7, #0
   32e70:	bne	332f8 <__assert_fail@plt+0x21ec4>
   32e74:	cmp	r9, #0
   32e78:	ldr	r9, [sp, #44]	; 0x2c
   32e7c:	ldr	r7, [sp, #40]	; 0x28
   32e80:	bne	32ea0 <__assert_fail@plt+0x21a6c>
   32e84:	ldr	r0, [r8]
   32e88:	add	r1, r0, sl, lsl #3
   32e8c:	mov	r0, r9
   32e90:	mov	r2, r5
   32e94:	bl	3428c <__assert_fail@plt+0x22e58>
   32e98:	cmp	r0, #0
   32e9c:	beq	32d50 <__assert_fail@plt+0x2191c>
   32ea0:	ldr	r0, [r8, #12]
   32ea4:	ldr	r2, [sp, #48]	; 0x30
   32ea8:	ldr	r6, [r0, sl, lsl #2]
   32eac:	cmp	r2, #0
   32eb0:	bne	32d30 <__assert_fail@plt+0x218fc>
   32eb4:	mov	r0, #1
   32eb8:	str	r0, [sp, #52]	; 0x34
   32ebc:	str	r0, [sp, #48]	; 0x30
   32ec0:	mov	r0, #4
   32ec4:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   32ec8:	cmp	r0, #0
   32ecc:	str	r0, [sp, #56]	; 0x38
   32ed0:	beq	332e0 <__assert_fail@plt+0x21eac>
   32ed4:	str	r6, [r0]
   32ed8:	b	32d50 <__assert_fail@plt+0x2191c>
   32edc:	cmp	r2, r1
   32ee0:	bne	32f0c <__assert_fail@plt+0x21ad8>
   32ee4:	lsl	r0, r2, #1
   32ee8:	lsl	r1, r2, #3
   32eec:	str	r0, [sp, #48]	; 0x30
   32ef0:	ldr	r0, [sp, #56]	; 0x38
   32ef4:	bl	38020 <__assert_fail@plt+0x26bec>
   32ef8:	cmp	r0, #0
   32efc:	beq	332ec <__assert_fail@plt+0x21eb8>
   32f00:	str	r0, [sp, #56]	; 0x38
   32f04:	ldr	r1, [sp, #52]	; 0x34
   32f08:	b	32f10 <__assert_fail@plt+0x21adc>
   32f0c:	ldr	r0, [sp, #56]	; 0x38
   32f10:	ldr	r2, [r0]
   32f14:	cmp	r2, r6
   32f18:	ble	32f8c <__assert_fail@plt+0x21b58>
   32f1c:	cmp	r1, #1
   32f20:	blt	32fbc <__assert_fail@plt+0x21b88>
   32f24:	ands	r7, r1, #3
   32f28:	sub	ip, r1, #1
   32f2c:	beq	32f50 <__assert_fail@plt+0x21b1c>
   32f30:	add	lr, r0, r1, lsl #2
   32f34:	mov	r3, lr
   32f38:	ldr	r2, [r3, #-4]!
   32f3c:	subs	r7, r7, #1
   32f40:	sub	r1, r1, #1
   32f44:	str	r2, [lr]
   32f48:	mov	lr, r3
   32f4c:	bne	32f38 <__assert_fail@plt+0x21b04>
   32f50:	cmp	ip, #3
   32f54:	bcc	32f80 <__assert_fail@plt+0x21b4c>
   32f58:	add	r2, r0, r1, lsl #2
   32f5c:	sub	r2, r2, #8
   32f60:	sub	lr, r2, #8
   32f64:	sub	r1, r1, #4
   32f68:	sub	sl, r2, #4
   32f6c:	sub	r2, r2, #16
   32f70:	ldm	lr, {r3, r7, ip, lr}
   32f74:	cmp	r1, #0
   32f78:	stm	sl, {r3, r7, ip, lr}
   32f7c:	bgt	32f60 <__assert_fail@plt+0x21b2c>
   32f80:	ldr	r7, [sp, #40]	; 0x28
   32f84:	mov	r1, #0
   32f88:	b	32fbc <__assert_fail@plt+0x21b88>
   32f8c:	add	r2, r0, r1, lsl #2
   32f90:	ldr	r3, [r2, #-4]
   32f94:	cmp	r3, r6
   32f98:	ble	32fbc <__assert_fail@plt+0x21b88>
   32f9c:	sub	r1, r1, #2
   32fa0:	str	r3, [r2]
   32fa4:	sub	r1, r1, #1
   32fa8:	ldr	r3, [r2, #-8]
   32fac:	sub	r2, r2, #4
   32fb0:	cmp	r3, r6
   32fb4:	bgt	32fa0 <__assert_fail@plt+0x21b6c>
   32fb8:	add	r1, r1, #2
   32fbc:	str	r6, [r0, r1, lsl #2]
   32fc0:	b	32d44 <__assert_fail@plt+0x21910>
   32fc4:	cmp	r2, r1
   32fc8:	bne	32ff4 <__assert_fail@plt+0x21bc0>
   32fcc:	lsl	r0, r2, #1
   32fd0:	lsl	r1, r2, #3
   32fd4:	str	r0, [fp, #-48]	; 0xffffffd0
   32fd8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   32fdc:	bl	38020 <__assert_fail@plt+0x26bec>
   32fe0:	cmp	r0, #0
   32fe4:	beq	332ec <__assert_fail@plt+0x21eb8>
   32fe8:	str	r0, [fp, #-40]	; 0xffffffd8
   32fec:	ldr	r1, [fp, #-44]	; 0xffffffd4
   32ff0:	b	32ff8 <__assert_fail@plt+0x21bc4>
   32ff4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   32ff8:	ldr	r2, [r0]
   32ffc:	cmp	r2, r7
   33000:	ble	3307c <__assert_fail@plt+0x21c48>
   33004:	cmp	r1, #1
   33008:	blt	330ac <__assert_fail@plt+0x21c78>
   3300c:	ands	r3, r1, #3
   33010:	sub	ip, r1, #1
   33014:	beq	33038 <__assert_fail@plt+0x21c04>
   33018:	add	lr, r0, r1, lsl #2
   3301c:	mov	r7, lr
   33020:	ldr	r2, [r7, #-4]!
   33024:	subs	r3, r3, #1
   33028:	sub	r1, r1, #1
   3302c:	str	r2, [lr]
   33030:	mov	lr, r7
   33034:	bne	33020 <__assert_fail@plt+0x21bec>
   33038:	cmp	ip, #3
   3303c:	bcc	33070 <__assert_fail@plt+0x21c3c>
   33040:	add	r2, r0, r1, lsl #2
   33044:	sub	r2, r2, #8
   33048:	sub	lr, r2, #8
   3304c:	sub	r1, r1, #4
   33050:	ldm	lr, {r3, r7, ip, lr}
   33054:	cmp	r1, #0
   33058:	str	r3, [r2, #-4]
   3305c:	str	r7, [r2]
   33060:	str	ip, [r2, #4]
   33064:	str	lr, [r2, #8]
   33068:	sub	r2, r2, #16
   3306c:	bgt	33048 <__assert_fail@plt+0x21c14>
   33070:	ldr	r7, [sp, #36]	; 0x24
   33074:	mov	r1, #0
   33078:	b	330ac <__assert_fail@plt+0x21c78>
   3307c:	add	r2, r0, r1, lsl #2
   33080:	ldr	r3, [r2, #-4]
   33084:	cmp	r3, r7
   33088:	ble	330ac <__assert_fail@plt+0x21c78>
   3308c:	sub	r1, r1, #2
   33090:	str	r3, [r2]
   33094:	sub	r1, r1, #1
   33098:	ldr	r3, [r2, #-8]
   3309c:	sub	r2, r2, #4
   330a0:	cmp	r3, r7
   330a4:	bgt	33090 <__assert_fail@plt+0x21c5c>
   330a8:	add	r1, r1, #2
   330ac:	str	r7, [r0, r1, lsl #2]
   330b0:	b	32e04 <__assert_fail@plt+0x219d0>
   330b4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   330b8:	ldr	r7, [sp, #24]
   330bc:	ldr	sl, [sp, #20]
   330c0:	bl	138e8 <__assert_fail@plt+0x24b4>
   330c4:	ldr	r4, [fp, #16]
   330c8:	mov	r0, #0
   330cc:	add	r8, sp, #48	; 0x30
   330d0:	str	r0, [fp, #-52]	; 0xffffffcc
   330d4:	ldr	r0, [sp, #52]	; 0x34
   330d8:	cmp	r0, #0
   330dc:	beq	33124 <__assert_fail@plt+0x21cf0>
   330e0:	mov	r0, r7
   330e4:	mov	r1, r8
   330e8:	mov	r2, sl
   330ec:	mov	r3, r4
   330f0:	bl	33410 <__assert_fail@plt+0x21fdc>
   330f4:	cmp	r0, #0
   330f8:	str	r0, [fp, #-52]	; 0xffffffcc
   330fc:	bne	33304 <__assert_fail@plt+0x21ed0>
   33100:	ldr	r2, [sp, #28]
   33104:	mov	r0, r9
   33108:	mov	r1, r8
   3310c:	mov	r3, sl
   33110:	str	r4, [sp]
   33114:	bl	33548 <__assert_fail@plt+0x22114>
   33118:	cmp	r0, #0
   3311c:	str	r0, [fp, #-52]	; 0xffffffcc
   33120:	bne	33304 <__assert_fail@plt+0x21ed0>
   33124:	cmn	r5, #1
   33128:	ble	33160 <__assert_fail@plt+0x21d2c>
   3312c:	ldr	r0, [r9, #48]	; 0x30
   33130:	cmp	r0, r5
   33134:	beq	331ec <__assert_fail@plt+0x21db8>
   33138:	ldr	r0, [r9, #80]	; 0x50
   3313c:	cmp	r0, #2
   33140:	blt	33168 <__assert_fail@plt+0x21d34>
   33144:	ldr	r0, [r9, #8]
   33148:	ldr	r6, [r0, r5, lsl #2]
   3314c:	cmn	r6, #1
   33150:	bne	33198 <__assert_fail@plt+0x21d64>
   33154:	sub	r5, r5, #1
   33158:	cmn	r5, #1
   3315c:	bne	33148 <__assert_fail@plt+0x21d14>
   33160:	ldr	r3, [r9, #60]	; 0x3c
   33164:	b	331c0 <__assert_fail@plt+0x21d8c>
   33168:	ldr	r0, [r9, #4]
   3316c:	ldr	r1, [r9, #68]	; 0x44
   33170:	mov	r3, #1
   33174:	ldrb	r0, [r0, r5]
   33178:	ubfx	r2, r0, #5, #3
   3317c:	ldr	r1, [r1, r2, lsl #2]
   33180:	and	r2, r0, #31
   33184:	tst	r1, r3, lsl r2
   33188:	moveq	r3, #0
   3318c:	cmpeq	r0, #10
   33190:	bne	331c0 <__assert_fail@plt+0x21d8c>
   33194:	b	331b0 <__assert_fail@plt+0x21d7c>
   33198:	ldrb	r0, [r9, #78]	; 0x4e
   3319c:	cmp	r0, #0
   331a0:	bne	331fc <__assert_fail@plt+0x21dc8>
   331a4:	mov	r3, #0
   331a8:	cmp	r6, #10
   331ac:	bne	331c0 <__assert_fail@plt+0x21d8c>
   331b0:	ldrb	r0, [r9, #77]	; 0x4d
   331b4:	cmp	r0, #0
   331b8:	movwne	r0, #1
   331bc:	lsl	r3, r0, #1
   331c0:	sub	r0, fp, #52	; 0x34
   331c4:	mov	r1, r7
   331c8:	mov	r2, r8
   331cc:	bl	30658 <__assert_fail@plt+0x1f224>
   331d0:	cmp	r0, #0
   331d4:	str	r0, [sp, #40]	; 0x28
   331d8:	bne	32c7c <__assert_fail@plt+0x21848>
   331dc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   331e0:	cmp	r0, #0
   331e4:	beq	32c7c <__assert_fail@plt+0x21848>
   331e8:	b	33304 <__assert_fail@plt+0x21ed0>
   331ec:	ldr	r0, [r9, #88]	; 0x58
   331f0:	and	r0, r0, #2
   331f4:	eor	r3, r0, #10
   331f8:	b	331c0 <__assert_fail@plt+0x21d8c>
   331fc:	mov	r0, r6
   33200:	bl	11350 <iswalnum@plt>
   33204:	mov	r3, #1
   33208:	cmp	r6, #95	; 0x5f
   3320c:	beq	331c0 <__assert_fail@plt+0x21d8c>
   33210:	cmp	r0, #0
   33214:	beq	331a4 <__assert_fail@plt+0x21d70>
   33218:	b	331c0 <__assert_fail@plt+0x21d8c>
   3321c:	ldr	r5, [fp, #12]
   33220:	ldr	r0, [sp, #56]	; 0x38
   33224:	bl	138e8 <__assert_fail@plt+0x24b4>
   33228:	ldr	r0, [r9, #100]	; 0x64
   3322c:	ldr	r1, [fp, #12]
   33230:	mov	sl, #1
   33234:	ldr	r1, [r0, r1, lsl #2]
   33238:	ldr	r0, [sp, #16]
   3323c:	str	r5, [r0]
   33240:	ldr	r0, [sp, #12]
   33244:	cmp	r1, #0
   33248:	addne	r1, r1, #4
   3324c:	str	r0, [r9, #40]	; 0x28
   33250:	ldr	r0, [sp, #8]
   33254:	str	r0, [r9, #100]	; 0x64
   33258:	beq	332bc <__assert_fail@plt+0x21e88>
   3325c:	ldr	r2, [r1, #4]
   33260:	cmp	r2, #1
   33264:	blt	332b8 <__assert_fail@plt+0x21e84>
   33268:	ldr	r0, [fp, #8]
   3326c:	ldr	r1, [r1, #8]
   33270:	subs	r2, r2, #1
   33274:	mov	sl, #0
   33278:	mov	r3, #0
   3327c:	beq	332a8 <__assert_fail@plt+0x21e74>
   33280:	mov	r3, #0
   33284:	mov	r7, #1
   33288:	add	r5, r3, r2
   3328c:	lsr	r4, r5, #1
   33290:	ldr	r6, [r1, r4, lsl #2]
   33294:	cmp	r6, r0
   33298:	addlt	r3, r7, r5, lsr #1
   3329c:	movge	r2, r4
   332a0:	cmp	r3, r2
   332a4:	bcc	33288 <__assert_fail@plt+0x21e54>
   332a8:	ldr	r1, [r1, r3, lsl #2]
   332ac:	cmp	r1, r0
   332b0:	movne	sl, #1
   332b4:	b	332bc <__assert_fail@plt+0x21e88>
   332b8:	mov	sl, #1
   332bc:	mov	r0, sl
   332c0:	sub	sp, fp, #28
   332c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   332c8:	mov	r0, #0
   332cc:	str	r0, [sp, #52]	; 0x34
   332d0:	str	r0, [sp, #48]	; 0x30
   332d4:	str	r0, [sp, #56]	; 0x38
   332d8:	str	r0, [fp, #-52]	; 0xffffffcc
   332dc:	b	32b88 <__assert_fail@plt+0x21754>
   332e0:	mov	r0, #0
   332e4:	str	r0, [sp, #48]	; 0x30
   332e8:	str	r0, [sp, #52]	; 0x34
   332ec:	mov	r7, #12
   332f0:	b	332f8 <__assert_fail@plt+0x21ec4>
   332f4:	mov	r7, r0
   332f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   332fc:	bl	138e8 <__assert_fail@plt+0x24b4>
   33300:	str	r7, [fp, #-52]	; 0xffffffcc
   33304:	ldr	r0, [sp, #56]	; 0x38
   33308:	bl	138e8 <__assert_fail@plt+0x24b4>
   3330c:	ldr	sl, [fp, #-52]	; 0xffffffcc
   33310:	b	332bc <__assert_fail@plt+0x21e88>
   33314:	mov	r0, #0
   33318:	mov	r7, #12
   3331c:	str	r0, [fp, #-48]	; 0xffffffd0
   33320:	str	r0, [fp, #-44]	; 0xffffffd4
   33324:	b	332fc <__assert_fail@plt+0x21ec8>
   33328:	mvn	r1, #-2147483648	; 0x80000000
   3332c:	mov	sl, #12
   33330:	sub	r1, r1, r4
   33334:	cmp	r1, r2
   33338:	ble	332bc <__assert_fail@plt+0x21e88>
   3333c:	add	r8, r2, #1
   33340:	str	lr, [sp, #40]	; 0x28
   33344:	add	r5, r8, r4
   33348:	cmn	r5, #-1073741823	; 0xc0000001
   3334c:	bhi	332bc <__assert_fail@plt+0x21e88>
   33350:	ldr	r0, [ip, #8]
   33354:	lsl	r1, r5, #2
   33358:	mov	r6, ip
   3335c:	bl	38020 <__assert_fail@plt+0x26bec>
   33360:	cmp	r0, #0
   33364:	beq	332bc <__assert_fail@plt+0x21e88>
   33368:	str	r5, [r6, #4]
   3336c:	str	r0, [r6, #8]
   33370:	add	r0, r0, r4, lsl #2
   33374:	lsl	r2, r8, #2
   33378:	mov	r1, #0
   3337c:	bl	11368 <memset@plt>
   33380:	ldr	r0, [sp, #44]	; 0x2c
   33384:	ldr	r7, [sp, #24]
   33388:	ldr	sl, [sp, #20]
   3338c:	ldr	lr, [sp, #40]	; 0x28
   33390:	mov	ip, r6
   33394:	b	32a1c <__assert_fail@plt+0x215e8>
   33398:	ldr	r8, [r0, #60]	; 0x3c
   3339c:	b	32af4 <__assert_fail@plt+0x216c0>
   333a0:	and	r0, r1, #2
   333a4:	eor	r8, r0, #10
   333a8:	b	32af4 <__assert_fail@plt+0x216c0>
   333ac:	mov	sl, r0
   333b0:	ldr	r0, [sp, #56]	; 0x38
   333b4:	bl	138e8 <__assert_fail@plt+0x24b4>
   333b8:	b	332bc <__assert_fail@plt+0x21e88>
   333bc:	mov	r0, #0
   333c0:	mov	sl, #12
   333c4:	str	r0, [sp, #48]	; 0x30
   333c8:	str	r0, [sp, #52]	; 0x34
   333cc:	str	sl, [fp, #-52]	; 0xffffffcc
   333d0:	b	332bc <__assert_fail@plt+0x21e88>
   333d4:	mov	r0, r6
   333d8:	str	lr, [sp, #40]	; 0x28
   333dc:	mov	r4, ip
   333e0:	bl	11350 <iswalnum@plt>
   333e4:	mov	r8, #1
   333e8:	cmp	r6, #95	; 0x5f
   333ec:	beq	33404 <__assert_fail@plt+0x21fd0>
   333f0:	ldr	lr, [sp, #40]	; 0x28
   333f4:	cmp	r0, #0
   333f8:	mov	ip, r4
   333fc:	beq	32ad4 <__assert_fail@plt+0x216a0>
   33400:	b	32af4 <__assert_fail@plt+0x216c0>
   33404:	ldr	lr, [sp, #40]	; 0x28
   33408:	mov	ip, r4
   3340c:	b	32af4 <__assert_fail@plt+0x216c0>
   33410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33414:	add	fp, sp, #28
   33418:	sub	sp, sp, #20
   3341c:	str	r0, [sp, #4]
   33420:	ldr	r0, [r1, #4]
   33424:	mov	sl, r1
   33428:	mov	r1, #0
   3342c:	mov	r5, r3
   33430:	mov	r8, r2
   33434:	str	r1, [sp, #12]
   33438:	str	r0, [sp, #8]
   3343c:	lsl	r0, r0, #2
   33440:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   33444:	cmp	r0, #0
   33448:	str	r0, [sp, #16]
   3344c:	beq	33540 <__assert_fail@plt+0x2210c>
   33450:	ldr	r0, [sl, #4]
   33454:	cmp	r0, #1
   33458:	blt	33508 <__assert_fail@plt+0x220d4>
   3345c:	mov	r9, #0
   33460:	ldr	r0, [sl, #8]
   33464:	ldr	r1, [sp, #4]
   33468:	ldr	r2, [r0, r9, lsl #2]
   3346c:	ldr	r1, [r1, #24]
   33470:	add	r0, r2, r2, lsl #1
   33474:	add	r1, r1, r0, lsl #2
   33478:	ldr	r0, [r1, #4]
   3347c:	cmp	r0, #1
   33480:	blt	334e8 <__assert_fail@plt+0x220b4>
   33484:	ldr	r7, [sp, #4]
   33488:	ldr	r3, [r1, #8]
   3348c:	ldr	r7, [r7]
   33490:	b	334a0 <__assert_fail@plt+0x2206c>
   33494:	add	r3, r3, #4
   33498:	subs	r0, r0, #1
   3349c:	beq	334e8 <__assert_fail@plt+0x220b4>
   334a0:	ldr	r6, [r3]
   334a4:	add	r4, r7, r6, lsl #3
   334a8:	ldrb	r4, [r4, #4]
   334ac:	cmp	r4, r5
   334b0:	bne	33494 <__assert_fail@plt+0x22060>
   334b4:	ldr	r4, [r7, r6, lsl #3]
   334b8:	cmp	r4, r8
   334bc:	bne	33494 <__assert_fail@plt+0x22060>
   334c0:	cmn	r6, #1
   334c4:	beq	334e8 <__assert_fail@plt+0x220b4>
   334c8:	ldr	r0, [sp, #4]
   334cc:	add	r1, sp, #8
   334d0:	mov	r3, r8
   334d4:	str	r5, [sp]
   334d8:	bl	33ad8 <__assert_fail@plt+0x226a4>
   334dc:	cmp	r0, #0
   334e0:	beq	334f8 <__assert_fail@plt+0x220c4>
   334e4:	b	33530 <__assert_fail@plt+0x220fc>
   334e8:	add	r0, sp, #8
   334ec:	bl	30358 <__assert_fail@plt+0x1ef24>
   334f0:	cmp	r0, #0
   334f4:	bne	33530 <__assert_fail@plt+0x220fc>
   334f8:	ldr	r0, [sl, #4]
   334fc:	add	r9, r9, #1
   33500:	cmp	r9, r0
   33504:	blt	33460 <__assert_fail@plt+0x2202c>
   33508:	ldr	r0, [sl, #8]
   3350c:	bl	138e8 <__assert_fail@plt+0x24b4>
   33510:	vldr	d16, [sp, #8]
   33514:	ldr	r0, [sp, #16]
   33518:	mov	r7, #0
   3351c:	str	r0, [sl, #8]
   33520:	vstr	d16, [sl]
   33524:	mov	r0, r7
   33528:	sub	sp, fp, #28
   3352c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33530:	mov	r7, r0
   33534:	ldr	r0, [sp, #16]
   33538:	bl	138e8 <__assert_fail@plt+0x24b4>
   3353c:	b	33524 <__assert_fail@plt+0x220f0>
   33540:	mov	r7, #12
   33544:	b	33524 <__assert_fail@plt+0x220f0>
   33548:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3354c:	add	fp, sp, #28
   33550:	sub	sp, sp, #52	; 0x34
   33554:	ldr	ip, [r0, #108]	; 0x6c
   33558:	mov	lr, r1
   3355c:	ldr	r1, [r0, #84]	; 0x54
   33560:	str	r0, [sp, #24]
   33564:	mov	sl, r2
   33568:	mov	r8, #0
   3356c:	mov	r0, #0
   33570:	cmp	ip, #1
   33574:	str	r1, [sp, #28]
   33578:	blt	335bc <__assert_fail@plt+0x22188>
   3357c:	ldr	r0, [sp, #24]
   33580:	mov	r7, #1
   33584:	mov	r1, ip
   33588:	ldr	r2, [r0, #116]	; 0x74
   3358c:	mov	r0, #0
   33590:	add	r6, r1, r0
   33594:	add	r6, r6, r6, lsr #31
   33598:	asr	r4, r6, #1
   3359c:	add	r5, r4, r4, lsl #1
   335a0:	add	r5, r2, r5, lsl #3
   335a4:	ldr	r5, [r5, #4]
   335a8:	cmp	r5, sl
   335ac:	addlt	r0, r7, r6, asr #1
   335b0:	movge	r1, r4
   335b4:	cmp	r0, r1
   335b8:	blt	33590 <__assert_fail@plt+0x2215c>
   335bc:	cmp	r0, ip
   335c0:	bge	33ac4 <__assert_fail@plt+0x22690>
   335c4:	cmn	r0, #1
   335c8:	beq	33ac4 <__assert_fail@plt+0x22690>
   335cc:	ldr	r1, [sp, #24]
   335d0:	add	r0, r0, r0, lsl #1
   335d4:	str	r0, [sp, #8]
   335d8:	ldr	r1, [r1, #116]	; 0x74
   335dc:	add	r0, r1, r0, lsl #3
   335e0:	ldr	r0, [r0, #4]
   335e4:	cmp	r0, sl
   335e8:	bne	33ac4 <__assert_fail@plt+0x22690>
   335ec:	str	r3, [sp, #12]
   335f0:	mov	r9, #1
   335f4:	str	lr, [sp, #16]
   335f8:	ldr	r0, [sp, #8]
   335fc:	add	r0, r1, r0, lsl #3
   33600:	b	336a0 <__assert_fail@plt+0x2226c>
   33604:	mov	r0, #4
   33608:	str	r9, [sp, #36]	; 0x24
   3360c:	mov	r4, r1
   33610:	str	r9, [sp, #32]
   33614:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   33618:	cmp	r0, #0
   3361c:	str	r0, [sp, #40]	; 0x28
   33620:	beq	33938 <__assert_fail@plt+0x22504>
   33624:	str	r4, [r0]
   33628:	mov	r0, #0
   3362c:	str	r0, [fp, #-32]	; 0xffffffe0
   33630:	ldr	r1, [sp, #28]
   33634:	sub	r0, fp, #32
   33638:	add	r2, sp, #32
   3363c:	bl	33c10 <__assert_fail@plt+0x227dc>
   33640:	ldr	r4, [sp, #24]
   33644:	ldr	r1, [r4, #100]	; 0x64
   33648:	str	r0, [r1, r7, lsl #2]
   3364c:	ldr	r0, [sp, #40]	; 0x28
   33650:	bl	138e8 <__assert_fail@plt+0x24b4>
   33654:	ldr	r0, [r4, #100]	; 0x64
   33658:	ldr	r1, [fp, #-32]	; 0xffffffe0
   3365c:	ldr	r0, [r0, r7, lsl #2]
   33660:	cmp	r1, #0
   33664:	mov	r2, r1
   33668:	movwne	r2, #1
   3366c:	clz	r0, r0
   33670:	lsr	r0, r0, #5
   33674:	ands	r0, r0, r2
   33678:	ldreq	r1, [sp, #20]
   3367c:	str	r1, [sp, #20]
   33680:	ldr	lr, [sp, #16]
   33684:	cmp	r0, #0
   33688:	cmpne	r0, #4
   3368c:	bne	33aac <__assert_fail@plt+0x22678>
   33690:	ldrb	r1, [r8, #20]
   33694:	add	r0, r8, #24
   33698:	cmp	r1, #0
   3369c:	beq	33ac0 <__assert_fail@plt+0x2268c>
   336a0:	mov	r8, r0
   336a4:	ldr	r0, [lr, #4]
   336a8:	cmp	r0, #1
   336ac:	blt	33690 <__assert_fail@plt+0x2225c>
   336b0:	subs	r6, r0, #1
   336b4:	ldr	r2, [r8]
   336b8:	ldr	r0, [lr, #8]
   336bc:	mov	r3, #0
   336c0:	beq	336e8 <__assert_fail@plt+0x222b4>
   336c4:	mov	r1, r6
   336c8:	add	r7, r3, r1
   336cc:	lsr	r5, r7, #1
   336d0:	ldr	r4, [r0, r5, lsl #2]
   336d4:	cmp	r4, r2
   336d8:	addlt	r3, r9, r7, lsr #1
   336dc:	movge	r1, r5
   336e0:	cmp	r3, r1
   336e4:	bcc	336c8 <__assert_fail@plt+0x22294>
   336e8:	ldr	r1, [r0, r3, lsl #2]
   336ec:	cmp	r1, r2
   336f0:	bne	33690 <__assert_fail@plt+0x2225c>
   336f4:	ldr	r3, [r8, #12]
   336f8:	ldr	r1, [r8, #8]
   336fc:	add	r3, r3, sl
   33700:	sub	r7, r3, r1
   33704:	cmp	r7, sl
   33708:	bne	337f4 <__assert_fail@plt+0x223c0>
   3370c:	ldr	r1, [sp, #28]
   33710:	add	r2, r2, r2, lsl #1
   33714:	cmp	r6, #0
   33718:	ldr	r1, [r1, #20]
   3371c:	add	r1, r1, r2, lsl #2
   33720:	mov	r2, #0
   33724:	ldr	r1, [r1, #8]
   33728:	ldr	r4, [r1]
   3372c:	beq	33750 <__assert_fail@plt+0x2231c>
   33730:	add	r1, r2, r6
   33734:	lsr	r3, r1, #1
   33738:	ldr	r7, [r0, r3, lsl #2]
   3373c:	cmp	r7, r4
   33740:	addlt	r2, r9, r1, lsr #1
   33744:	movge	r6, r3
   33748:	cmp	r2, r6
   3374c:	bcc	33730 <__assert_fail@plt+0x222fc>
   33750:	ldr	r1, [r0, r2, lsl #2]
   33754:	mov	r0, #4
   33758:	cmp	r1, r4
   3375c:	beq	33684 <__assert_fail@plt+0x22250>
   33760:	mov	r0, #4
   33764:	str	r9, [sp, #36]	; 0x24
   33768:	str	r9, [sp, #32]
   3376c:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   33770:	cmp	r0, #0
   33774:	str	r0, [sp, #40]	; 0x28
   33778:	beq	33924 <__assert_fail@plt+0x224f0>
   3377c:	mov	r6, #0
   33780:	str	r4, [r0]
   33784:	ldr	r0, [sp, #28]
   33788:	ldr	r2, [sp, #12]
   3378c:	ldr	r3, [fp, #8]
   33790:	add	r4, sp, #32
   33794:	str	r6, [fp, #-32]	; 0xffffffe0
   33798:	mov	r1, r4
   3379c:	bl	33410 <__assert_fail@plt+0x21fdc>
   337a0:	ldr	r5, [sp, #16]
   337a4:	mov	r7, r0
   337a8:	mov	r1, r4
   337ac:	mov	r0, r5
   337b0:	bl	30358 <__assert_fail@plt+0x1ef24>
   337b4:	mov	r4, r0
   337b8:	ldr	r0, [sp, #40]	; 0x28
   337bc:	bl	138e8 <__assert_fail@plt+0x24b4>
   337c0:	orr	r0, r7, r6
   337c4:	mov	lr, r5
   337c8:	orrs	r0, r0, r4
   337cc:	mov	r0, #2
   337d0:	beq	33684 <__assert_fail@plt+0x22250>
   337d4:	cmp	r7, #0
   337d8:	mov	r0, #1
   337dc:	movne	r4, r7
   337e0:	cmp	r6, #0
   337e4:	movne	r4, r6
   337e8:	str	r4, [fp, #-32]	; 0xffffffe0
   337ec:	str	r4, [sp, #20]
   337f0:	b	33684 <__assert_fail@plt+0x22250>
   337f4:	ldr	r0, [sp, #24]
   337f8:	ldr	r0, [r0, #100]	; 0x64
   337fc:	ldr	r5, [r0, r7, lsl #2]
   33800:	ldr	r0, [sp, #28]
   33804:	ldr	r0, [r0, #12]
   33808:	cmp	r5, #0
   3380c:	ldr	r1, [r0, r2, lsl #2]
   33810:	beq	33604 <__assert_fail@plt+0x221d0>
   33814:	ldr	ip, [r5, #8]
   33818:	cmp	ip, #0
   3381c:	ble	338dc <__assert_fail@plt+0x224a8>
   33820:	ldr	r0, [r5, #12]
   33824:	subs	r3, ip, #1
   33828:	mov	r2, #0
   3382c:	str	r7, [sp, #4]
   33830:	beq	33854 <__assert_fail@plt+0x22420>
   33834:	add	r6, r2, r3
   33838:	lsr	r7, r6, #1
   3383c:	ldr	r4, [r0, r7, lsl #2]
   33840:	cmp	r4, r1
   33844:	addlt	r2, r9, r6, lsr #1
   33848:	movge	r3, r7
   3384c:	cmp	r2, r3
   33850:	bcc	33834 <__assert_fail@plt+0x22400>
   33854:	ldr	r2, [r0, r2, lsl #2]
   33858:	mov	r0, #4
   3385c:	cmp	r2, r1
   33860:	beq	33684 <__assert_fail@plt+0x22250>
   33864:	ldr	r7, [sp, #4]
   33868:	mov	r4, r1
   3386c:	cmp	ip, #1
   33870:	str	ip, [sp, #36]	; 0x24
   33874:	blt	338e4 <__assert_fail@plt+0x224b0>
   33878:	lsl	r0, ip, #2
   3387c:	str	ip, [sp, #32]
   33880:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   33884:	cmp	r0, #0
   33888:	str	r0, [sp, #40]	; 0x28
   3388c:	beq	3398c <__assert_fail@plt+0x22558>
   33890:	ldr	r2, [r5, #8]
   33894:	ldr	r1, [r5, #12]
   33898:	mov	r5, r0
   3389c:	lsl	r2, r2, #2
   338a0:	bl	111e8 <memcpy@plt>
   338a4:	ldr	r1, [sp, #32]
   338a8:	mov	r6, #0
   338ac:	str	r6, [fp, #-32]	; 0xffffffe0
   338b0:	cmp	r1, #0
   338b4:	beq	338f8 <__assert_fail@plt+0x224c4>
   338b8:	ldr	r0, [sp, #36]	; 0x24
   338bc:	cmp	r0, #0
   338c0:	bne	339a0 <__assert_fail@plt+0x2256c>
   338c4:	str	r4, [r5]
   338c8:	str	r9, [sp, #36]	; 0x24
   338cc:	mov	r6, #0
   338d0:	cmp	r6, #0
   338d4:	beq	33630 <__assert_fail@plt+0x221fc>
   338d8:	b	33964 <__assert_fail@plt+0x22530>
   338dc:	mov	r4, r1
   338e0:	str	ip, [sp, #36]	; 0x24
   338e4:	mov	r6, #0
   338e8:	str	r6, [sp, #36]	; 0x24
   338ec:	str	r6, [sp, #32]
   338f0:	str	r6, [sp, #40]	; 0x28
   338f4:	str	r6, [fp, #-32]	; 0xffffffe0
   338f8:	mov	r0, #4
   338fc:	str	r9, [sp, #36]	; 0x24
   33900:	str	r9, [sp, #32]
   33904:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   33908:	cmp	r0, #0
   3390c:	str	r0, [sp, #40]	; 0x28
   33910:	beq	33958 <__assert_fail@plt+0x22524>
   33914:	str	r4, [r0]
   33918:	cmp	r6, #0
   3391c:	beq	33630 <__assert_fail@plt+0x221fc>
   33920:	b	33964 <__assert_fail@plt+0x22530>
   33924:	mov	r0, #0
   33928:	mov	r6, #12
   3392c:	str	r0, [sp, #32]
   33930:	str	r0, [sp, #36]	; 0x24
   33934:	b	33784 <__assert_fail@plt+0x22350>
   33938:	mov	r0, #0
   3393c:	mov	r1, #12
   33940:	str	r0, [sp, #32]
   33944:	str	r0, [sp, #36]	; 0x24
   33948:	mov	r0, #12
   3394c:	str	r1, [fp, #-32]	; 0xffffffe0
   33950:	str	r0, [sp, #20]
   33954:	b	33984 <__assert_fail@plt+0x22550>
   33958:	mov	r0, #0
   3395c:	str	r0, [sp, #32]
   33960:	str	r0, [sp, #36]	; 0x24
   33964:	clz	r0, r6
   33968:	lsr	r4, r0, #5
   3396c:	ldr	r0, [sp, #40]	; 0x28
   33970:	bl	138e8 <__assert_fail@plt+0x24b4>
   33974:	cmp	r4, #0
   33978:	movwne	r6, #12
   3397c:	str	r6, [sp, #20]
   33980:	str	r6, [fp, #-32]	; 0xffffffe0
   33984:	mov	r0, #1
   33988:	b	33680 <__assert_fail@plt+0x2224c>
   3398c:	mov	r0, #0
   33990:	mov	r6, #12
   33994:	str	r0, [sp, #32]
   33998:	str	r0, [sp, #36]	; 0x24
   3399c:	b	338f4 <__assert_fail@plt+0x224c0>
   339a0:	cmp	r1, r0
   339a4:	bne	339d0 <__assert_fail@plt+0x2259c>
   339a8:	lsl	r0, r1, #1
   339ac:	lsl	r1, r1, #3
   339b0:	str	r0, [sp, #32]
   339b4:	mov	r0, r5
   339b8:	bl	38020 <__assert_fail@plt+0x26bec>
   339bc:	cmp	r0, #0
   339c0:	beq	33aa4 <__assert_fail@plt+0x22670>
   339c4:	str	r0, [sp, #40]	; 0x28
   339c8:	mov	r5, r0
   339cc:	ldr	r0, [sp, #36]	; 0x24
   339d0:	ldr	r1, [r5]
   339d4:	cmp	r1, r4
   339d8:	ble	33a4c <__assert_fail@plt+0x22618>
   339dc:	cmp	r0, #1
   339e0:	blt	33a80 <__assert_fail@plt+0x2264c>
   339e4:	ands	r2, r0, #3
   339e8:	sub	r1, r0, #1
   339ec:	beq	33a10 <__assert_fail@plt+0x225dc>
   339f0:	add	r6, r5, r0, lsl #2
   339f4:	mov	r3, r6
   339f8:	ldr	r7, [r3, #-4]!
   339fc:	subs	r2, r2, #1
   33a00:	sub	r0, r0, #1
   33a04:	str	r7, [r6]
   33a08:	mov	r6, r3
   33a0c:	bne	339f8 <__assert_fail@plt+0x225c4>
   33a10:	cmp	r1, #3
   33a14:	bcc	33a44 <__assert_fail@plt+0x22610>
   33a18:	add	r1, r5, r0, lsl #2
   33a1c:	sub	r1, r1, #8
   33a20:	ldr	r6, [r1, #4]
   33a24:	ldmda	r1, {r2, r3, r7}
   33a28:	sub	ip, r1, #4
   33a2c:	sub	r0, r0, #4
   33a30:	cmp	r0, #0
   33a34:	stm	ip, {r2, r3, r7}
   33a38:	str	r6, [r1, #8]
   33a3c:	sub	r1, r1, #16
   33a40:	bgt	33a20 <__assert_fail@plt+0x225ec>
   33a44:	mov	r0, #0
   33a48:	b	33a80 <__assert_fail@plt+0x2264c>
   33a4c:	add	r1, r5, r0, lsl #2
   33a50:	ldr	r2, [r1, #-4]
   33a54:	cmp	r2, r4
   33a58:	ble	33a80 <__assert_fail@plt+0x2264c>
   33a5c:	sub	r0, r0, #2
   33a60:	mov	r3, r4
   33a64:	str	r2, [r1]
   33a68:	sub	r0, r0, #1
   33a6c:	ldr	r2, [r1, #-8]
   33a70:	sub	r1, r1, #4
   33a74:	cmp	r2, r3
   33a78:	bgt	33a64 <__assert_fail@plt+0x22630>
   33a7c:	add	r0, r0, #2
   33a80:	str	r4, [r5, r0, lsl #2]
   33a84:	ldr	r7, [sp, #4]
   33a88:	mov	r6, #0
   33a8c:	ldr	r0, [sp, #36]	; 0x24
   33a90:	add	r0, r0, #1
   33a94:	str	r0, [sp, #36]	; 0x24
   33a98:	cmp	r6, #0
   33a9c:	beq	33630 <__assert_fail@plt+0x221fc>
   33aa0:	b	33964 <__assert_fail@plt+0x22530>
   33aa4:	mov	r6, #0
   33aa8:	b	33964 <__assert_fail@plt+0x22530>
   33aac:	cmp	r0, #2
   33ab0:	bne	33ad0 <__assert_fail@plt+0x2269c>
   33ab4:	ldr	r0, [sp, #24]
   33ab8:	ldr	r1, [r0, #116]	; 0x74
   33abc:	b	335f8 <__assert_fail@plt+0x221c4>
   33ac0:	mov	r8, #0
   33ac4:	mov	r0, r8
   33ac8:	sub	sp, fp, #28
   33acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33ad0:	ldr	r8, [sp, #20]
   33ad4:	b	33ac4 <__assert_fail@plt+0x22690>
   33ad8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33adc:	add	fp, sp, #28
   33ae0:	sub	sp, sp, #4
   33ae4:	ldr	r4, [fp, #8]
   33ae8:	mov	r9, r3
   33aec:	mov	r7, r2
   33af0:	mov	r8, r1
   33af4:	mov	sl, r0
   33af8:	mov	r5, #1
   33afc:	b	33b14 <__assert_fail@plt+0x226e0>
   33b00:	cmp	r2, #0
   33b04:	beq	33bf8 <__assert_fail@plt+0x227c4>
   33b08:	add	r0, r0, r7, lsl #2
   33b0c:	ldr	r0, [r0, #8]
   33b10:	ldr	r7, [r0]
   33b14:	ldr	r0, [r8, #4]
   33b18:	cmp	r0, #1
   33b1c:	blt	33b64 <__assert_fail@plt+0x22730>
   33b20:	subs	r2, r0, #1
   33b24:	ldr	r0, [r8, #8]
   33b28:	mov	ip, r4
   33b2c:	mov	r1, #0
   33b30:	beq	33b54 <__assert_fail@plt+0x22720>
   33b34:	add	r3, r1, r2
   33b38:	lsr	r6, r3, #1
   33b3c:	ldr	r4, [r0, r6, lsl #2]
   33b40:	cmp	r4, r7
   33b44:	addlt	r1, r5, r3, lsr #1
   33b48:	movge	r2, r6
   33b4c:	cmp	r1, r2
   33b50:	bcc	33b34 <__assert_fail@plt+0x22700>
   33b54:	ldr	r0, [r0, r1, lsl #2]
   33b58:	mov	r4, ip
   33b5c:	cmp	r0, r7
   33b60:	beq	33bf8 <__assert_fail@plt+0x227c4>
   33b64:	ldr	r0, [sl]
   33b68:	add	r1, r0, r7, lsl #3
   33b6c:	ldrb	r1, [r1, #4]
   33b70:	cmp	r1, r4
   33b74:	bne	33b84 <__assert_fail@plt+0x22750>
   33b78:	ldr	r0, [r0, r7, lsl #3]
   33b7c:	cmp	r0, r9
   33b80:	beq	33bdc <__assert_fail@plt+0x227a8>
   33b84:	mov	r0, r8
   33b88:	mov	r1, r7
   33b8c:	bl	304e4 <__assert_fail@plt+0x1f0b0>
   33b90:	cmp	r0, #0
   33b94:	beq	33c04 <__assert_fail@plt+0x227d0>
   33b98:	ldr	r0, [sl, #20]
   33b9c:	add	r7, r7, r7, lsl #1
   33ba0:	add	r1, r0, r7, lsl #2
   33ba4:	ldr	r2, [r1, #4]
   33ba8:	cmp	r2, #2
   33bac:	bne	33b00 <__assert_fail@plt+0x226cc>
   33bb0:	ldr	r0, [r1, #8]
   33bb4:	mov	r1, r8
   33bb8:	mov	r3, r9
   33bbc:	ldr	r2, [r0, #4]
   33bc0:	mov	r0, sl
   33bc4:	str	r4, [sp]
   33bc8:	bl	33ad8 <__assert_fail@plt+0x226a4>
   33bcc:	cmp	r0, #0
   33bd0:	bne	33bfc <__assert_fail@plt+0x227c8>
   33bd4:	ldr	r0, [sl, #20]
   33bd8:	b	33b08 <__assert_fail@plt+0x226d4>
   33bdc:	cmp	r4, #9
   33be0:	bne	33bf8 <__assert_fail@plt+0x227c4>
   33be4:	mov	r0, r8
   33be8:	mov	r1, r7
   33bec:	bl	304e4 <__assert_fail@plt+0x1f0b0>
   33bf0:	cmp	r0, #0
   33bf4:	beq	33c04 <__assert_fail@plt+0x227d0>
   33bf8:	mov	r0, #0
   33bfc:	sub	sp, fp, #28
   33c00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33c04:	mov	r0, #12
   33c08:	sub	sp, fp, #28
   33c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33c10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33c14:	add	fp, sp, #28
   33c18:	sub	sp, sp, #4
   33c1c:	ldr	r9, [r2, #4]
   33c20:	cmp	r9, #0
   33c24:	beq	33ee8 <__assert_fail@plt+0x22ab4>
   33c28:	mov	r6, r2
   33c2c:	mov	r8, r1
   33c30:	cmp	r9, #1
   33c34:	mov	r7, r9
   33c38:	blt	33d24 <__assert_fail@plt+0x228f0>
   33c3c:	ldr	ip, [r6, #8]
   33c40:	mov	sl, #0
   33c44:	cmp	r9, #4
   33c48:	mov	r7, r9
   33c4c:	bcc	33d0c <__assert_fail@plt+0x228d8>
   33c50:	mov	r3, #0
   33c54:	bic	sl, r9, #3
   33c58:	mov	r1, #1
   33c5c:	str	r8, [sp]
   33c60:	vdup.32	q8, r3
   33c64:	sub	r4, sl, #4
   33c68:	add	r1, r1, r4, lsr #2
   33c6c:	cmp	r4, #12
   33c70:	and	lr, r1, #3
   33c74:	vmov.32	d16[0], r9
   33c78:	bcc	33ccc <__assert_fail@plt+0x22898>
   33c7c:	sub	r5, r1, lr
   33c80:	mov	r3, #0
   33c84:	mov	r4, #64	; 0x40
   33c88:	mov	r7, ip
   33c8c:	mov	r1, ip
   33c90:	vld1.32	{d18-d19}, [r1], r4
   33c94:	add	r8, r7, #16
   33c98:	add	r2, r7, #32
   33c9c:	subs	r5, r5, #4
   33ca0:	add	r3, r3, #16
   33ca4:	vld1.32	{d20-d21}, [r8]
   33ca8:	vadd.i32	q8, q9, q8
   33cac:	vld1.32	{d18-d19}, [r2]
   33cb0:	add	r2, r7, #48	; 0x30
   33cb4:	mov	r7, r1
   33cb8:	vadd.i32	q8, q10, q8
   33cbc:	vld1.32	{d20-d21}, [r2]
   33cc0:	vadd.i32	q8, q9, q8
   33cc4:	vadd.i32	q8, q10, q8
   33cc8:	bne	33c90 <__assert_fail@plt+0x2285c>
   33ccc:	cmp	lr, #0
   33cd0:	beq	33cec <__assert_fail@plt+0x228b8>
   33cd4:	add	r1, ip, r3, lsl #2
   33cd8:	rsb	r3, lr, #0
   33cdc:	vld1.32	{d18-d19}, [r1]!
   33ce0:	adds	r3, r3, #1
   33ce4:	vadd.i32	q8, q9, q8
   33ce8:	bcc	33cdc <__assert_fail@plt+0x228a8>
   33cec:	vext.8	q9, q8, q8, #8
   33cf0:	ldr	r8, [sp]
   33cf4:	cmp	r9, sl
   33cf8:	vadd.i32	q8, q8, q9
   33cfc:	vdup.32	q9, d16[1]
   33d00:	vadd.i32	q8, q8, q9
   33d04:	vmov.32	r7, d16[0]
   33d08:	beq	33d24 <__assert_fail@plt+0x228f0>
   33d0c:	add	r1, ip, sl, lsl #2
   33d10:	sub	r2, r9, sl
   33d14:	ldr	r3, [r1], #4
   33d18:	subs	r2, r2, #1
   33d1c:	add	r7, r3, r7
   33d20:	bne	33d14 <__assert_fail@plt+0x228e0>
   33d24:	ldr	r1, [r8, #68]	; 0x44
   33d28:	ldr	r2, [r8, #32]
   33d2c:	str	r0, [sp]
   33d30:	and	r1, r1, r7
   33d34:	add	r3, r1, r1, lsl #1
   33d38:	ldr	r1, [r2, r3, lsl #2]
   33d3c:	cmp	r1, #1
   33d40:	blt	33dbc <__assert_fail@plt+0x22988>
   33d44:	add	r2, r2, r3, lsl #2
   33d48:	sub	ip, r9, #1
   33d4c:	mov	r5, #0
   33d50:	ldr	lr, [r2, #8]
   33d54:	cmp	r6, #0
   33d58:	bne	33d70 <__assert_fail@plt+0x2293c>
   33d5c:	add	r5, r5, #1
   33d60:	cmp	r5, r1
   33d64:	bge	33dbc <__assert_fail@plt+0x22988>
   33d68:	cmp	r6, #0
   33d6c:	beq	33d5c <__assert_fail@plt+0x22928>
   33d70:	ldr	r4, [lr, r5, lsl #2]
   33d74:	ldr	r3, [r4]
   33d78:	cmp	r7, r3
   33d7c:	bne	33d5c <__assert_fail@plt+0x22928>
   33d80:	ldr	r3, [r4, #8]
   33d84:	cmp	r3, r9
   33d88:	bne	33d5c <__assert_fail@plt+0x22928>
   33d8c:	mov	r3, ip
   33d90:	add	r0, r3, #1
   33d94:	cmp	r0, #1
   33d98:	blt	33edc <__assert_fail@plt+0x22aa8>
   33d9c:	ldr	r0, [r6, #8]
   33da0:	ldr	r2, [r4, #12]
   33da4:	ldr	r0, [r0, r3, lsl #2]
   33da8:	ldr	r2, [r2, r3, lsl #2]
   33dac:	sub	r3, r3, #1
   33db0:	cmp	r2, r0
   33db4:	beq	33d90 <__assert_fail@plt+0x2295c>
   33db8:	b	33d5c <__assert_fail@plt+0x22928>
   33dbc:	mov	r0, #56	; 0x38
   33dc0:	mov	r1, #1
   33dc4:	bl	37f9c <__assert_fail@plt+0x26b68>
   33dc8:	cmp	r0, #0
   33dcc:	beq	33f14 <__assert_fail@plt+0x22ae0>
   33dd0:	mov	r4, r0
   33dd4:	ldr	r0, [r6, #4]
   33dd8:	add	sl, r4, #4
   33ddc:	cmp	r0, #1
   33de0:	str	r0, [r4, #8]
   33de4:	blt	33eac <__assert_fail@plt+0x22a78>
   33de8:	str	r0, [r4, #4]
   33dec:	lsl	r0, r0, #2
   33df0:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   33df4:	cmp	r0, #0
   33df8:	str	r0, [r4, #12]
   33dfc:	beq	33f00 <__assert_fail@plt+0x22acc>
   33e00:	ldmib	r6, {r5, r6}
   33e04:	mov	r1, r6
   33e08:	mov	r9, r8
   33e0c:	lsl	r2, r5, #2
   33e10:	bl	111e8 <memcpy@plt>
   33e14:	cmp	r5, #1
   33e18:	str	sl, [r4, #40]	; 0x28
   33e1c:	blt	33ec4 <__assert_fail@plt+0x22a90>
   33e20:	movw	ip, #65280	; 0xff00
   33e24:	ldr	sl, [r9]
   33e28:	mov	lr, #32
   33e2c:	movt	ip, #3
   33e30:	add	r8, ip, #255	; 0xff
   33e34:	b	33e58 <__assert_fail@plt+0x22a24>
   33e38:	ldr	r0, [r1]
   33e3c:	tst	r0, ip
   33e40:	beq	33e4c <__assert_fail@plt+0x22a18>
   33e44:	orr	r0, r3, #128	; 0x80
   33e48:	strb	r0, [r4, #52]	; 0x34
   33e4c:	add	r6, r6, #4
   33e50:	subs	r5, r5, #1
   33e54:	beq	33ec4 <__assert_fail@plt+0x22a90>
   33e58:	ldr	r0, [r6]
   33e5c:	add	r1, sl, r0, lsl #3
   33e60:	ldr	r0, [r1, #4]!
   33e64:	and	r3, r0, r8
   33e68:	cmp	r3, #1
   33e6c:	beq	33e4c <__assert_fail@plt+0x22a18>
   33e70:	ldrb	r2, [r4, #52]	; 0x34
   33e74:	and	r3, lr, r0, lsr #15
   33e78:	uxtb	r0, r0
   33e7c:	cmp	r0, #12
   33e80:	orr	r3, r2, r3
   33e84:	strb	r3, [r4, #52]	; 0x34
   33e88:	beq	33e44 <__assert_fail@plt+0x22a10>
   33e8c:	cmp	r0, #4
   33e90:	beq	33ea4 <__assert_fail@plt+0x22a70>
   33e94:	cmp	r0, #2
   33e98:	bne	33e38 <__assert_fail@plt+0x22a04>
   33e9c:	orr	r0, r3, #16
   33ea0:	b	33e48 <__assert_fail@plt+0x22a14>
   33ea4:	orr	r0, r3, #64	; 0x40
   33ea8:	b	33e48 <__assert_fail@plt+0x22a14>
   33eac:	mov	r0, #0
   33eb0:	mov	r9, r8
   33eb4:	str	r0, [sl]
   33eb8:	str	r0, [sl, #4]
   33ebc:	str	r0, [sl, #8]
   33ec0:	str	sl, [r4, #40]	; 0x28
   33ec4:	mov	r0, r9
   33ec8:	mov	r1, r4
   33ecc:	mov	r2, r7
   33ed0:	bl	30b08 <__assert_fail@plt+0x1f6d4>
   33ed4:	cmp	r0, #0
   33ed8:	bne	33ef4 <__assert_fail@plt+0x22ac0>
   33edc:	mov	r0, r4
   33ee0:	sub	sp, fp, #28
   33ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33ee8:	mov	r4, #0
   33eec:	str	r4, [r0]
   33ef0:	b	33edc <__assert_fail@plt+0x22aa8>
   33ef4:	mov	r0, r4
   33ef8:	bl	2a698 <__assert_fail@plt+0x19264>
   33efc:	b	33f14 <__assert_fail@plt+0x22ae0>
   33f00:	mov	r0, #0
   33f04:	str	r0, [r4, #4]
   33f08:	str	r0, [r4, #8]
   33f0c:	mov	r0, r4
   33f10:	bl	138e8 <__assert_fail@plt+0x24b4>
   33f14:	ldr	r1, [sp]
   33f18:	mov	r0, #12
   33f1c:	mov	r4, #0
   33f20:	str	r0, [r1]
   33f24:	b	33edc <__assert_fail@plt+0x22aa8>
   33f28:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   33f2c:	add	fp, sp, #24
   33f30:	ldr	lr, [r0]
   33f34:	add	r7, lr, r1, lsl #3
   33f38:	ldrb	r9, [r7, #4]
   33f3c:	cmp	r9, #7
   33f40:	beq	34118 <__assert_fail@plt+0x22ce4>
   33f44:	ldr	ip, [r2, #80]	; 0x50
   33f48:	mov	r6, #1
   33f4c:	cmp	ip, #1
   33f50:	beq	33f90 <__assert_fail@plt+0x22b5c>
   33f54:	ldr	r5, [r2, #28]
   33f58:	add	r7, r3, #1
   33f5c:	cmp	r7, r5
   33f60:	bge	33f90 <__assert_fail@plt+0x22b5c>
   33f64:	ldr	r6, [r2, #8]
   33f68:	sub	r5, r5, r3
   33f6c:	add	r7, r6, r3, lsl #2
   33f70:	mov	r6, #1
   33f74:	ldr	r4, [r7, r6, lsl #2]
   33f78:	cmn	r4, #1
   33f7c:	bne	33f90 <__assert_fail@plt+0x22b5c>
   33f80:	add	r6, r6, #1
   33f84:	cmp	r5, r6
   33f88:	bne	33f74 <__assert_fail@plt+0x22b40>
   33f8c:	mov	r6, r5
   33f90:	mov	r8, #0
   33f94:	cmp	r9, #5
   33f98:	bne	33fe0 <__assert_fail@plt+0x22bac>
   33f9c:	cmp	r6, #2
   33fa0:	blt	34108 <__assert_fail@plt+0x22cd4>
   33fa4:	ldr	r0, [r0, #128]	; 0x80
   33fa8:	tst	r0, #64	; 0x40
   33fac:	bne	33fc0 <__assert_fail@plt+0x22b8c>
   33fb0:	ldr	r1, [r2, #4]
   33fb4:	ldrb	r1, [r1, r3]
   33fb8:	cmp	r1, #10
   33fbc:	beq	34108 <__assert_fail@plt+0x22cd4>
   33fc0:	tst	r0, #128	; 0x80
   33fc4:	beq	34104 <__assert_fail@plt+0x22cd0>
   33fc8:	ldr	r0, [r2, #4]
   33fcc:	ldrb	r0, [r0, r3]
   33fd0:	cmp	r0, #0
   33fd4:	movne	r8, r6
   33fd8:	mov	r0, r8
   33fdc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   33fe0:	cmp	r9, #6
   33fe4:	bne	34108 <__assert_fail@plt+0x22cd4>
   33fe8:	cmp	r6, #2
   33fec:	blt	34108 <__assert_fail@plt+0x22cd4>
   33ff0:	ldr	r7, [lr, r1, lsl #3]
   33ff4:	ldr	r0, [r7, #32]
   33ff8:	cmp	r0, #0
   33ffc:	bne	34018 <__assert_fail@plt+0x22be4>
   34000:	ldr	r1, [r7, #36]	; 0x24
   34004:	cmp	r1, #0
   34008:	bne	34018 <__assert_fail@plt+0x22be4>
   3400c:	ldr	r1, [r7, #20]
   34010:	cmp	r1, #0
   34014:	beq	34110 <__assert_fail@plt+0x22cdc>
   34018:	cmp	ip, #1
   3401c:	bne	3402c <__assert_fail@plt+0x22bf8>
   34020:	ldr	r1, [r2, #4]
   34024:	ldrb	r5, [r1, r3]
   34028:	b	34034 <__assert_fail@plt+0x22c00>
   3402c:	ldr	r1, [r2, #8]
   34030:	ldr	r5, [r1, r3, lsl #2]
   34034:	ldr	r1, [r7, #20]
   34038:	cmp	r1, #1
   3403c:	blt	34060 <__assert_fail@plt+0x22c2c>
   34040:	ldr	r2, [r7]
   34044:	mov	r3, #0
   34048:	ldr	r4, [r2, r3, lsl #2]
   3404c:	cmp	r5, r4
   34050:	beq	340d8 <__assert_fail@plt+0x22ca4>
   34054:	add	r3, r3, #1
   34058:	cmp	r3, r1
   3405c:	blt	34048 <__assert_fail@plt+0x22c14>
   34060:	ldr	r1, [r7, #36]	; 0x24
   34064:	cmp	r1, #1
   34068:	blt	3409c <__assert_fail@plt+0x22c68>
   3406c:	mov	r4, #0
   34070:	ldr	r0, [r7, #12]
   34074:	ldr	r1, [r0, r4, lsl #2]
   34078:	mov	r0, r5
   3407c:	bl	11170 <iswctype@plt>
   34080:	cmp	r0, #0
   34084:	bne	340d8 <__assert_fail@plt+0x22ca4>
   34088:	ldr	r0, [r7, #36]	; 0x24
   3408c:	add	r4, r4, #1
   34090:	cmp	r4, r0
   34094:	blt	34070 <__assert_fail@plt+0x22c3c>
   34098:	ldr	r0, [r7, #32]
   3409c:	cmp	r0, #1
   340a0:	blt	340e0 <__assert_fail@plt+0x22cac>
   340a4:	ldr	r1, [r7, #4]
   340a8:	mov	r2, #0
   340ac:	b	340bc <__assert_fail@plt+0x22c88>
   340b0:	add	r2, r2, #1
   340b4:	cmp	r2, r0
   340b8:	bge	340e0 <__assert_fail@plt+0x22cac>
   340bc:	ldr	r3, [r1, r2, lsl #2]
   340c0:	cmp	r3, r5
   340c4:	bhi	340b0 <__assert_fail@plt+0x22c7c>
   340c8:	ldr	r3, [r7, #8]
   340cc:	ldr	r3, [r3, r2, lsl #2]
   340d0:	cmp	r5, r3
   340d4:	bhi	340b0 <__assert_fail@plt+0x22c7c>
   340d8:	mov	r0, r6
   340dc:	b	340e4 <__assert_fail@plt+0x22cb0>
   340e0:	mov	r0, #0
   340e4:	ldrb	r1, [r7, #16]
   340e8:	tst	r1, #1
   340ec:	bne	340f4 <__assert_fail@plt+0x22cc0>
   340f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   340f4:	cmp	r0, #0
   340f8:	bgt	34108 <__assert_fail@plt+0x22cd4>
   340fc:	cmp	r6, #1
   34100:	movle	r6, #1
   34104:	mov	r8, r6
   34108:	mov	r0, r8
   3410c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   34110:	mov	r5, #0
   34114:	b	34034 <__assert_fail@plt+0x22c00>
   34118:	ldr	r0, [r2, #4]
   3411c:	mov	r8, #0
   34120:	ldrb	r6, [r0, r3]
   34124:	cmp	r6, #194	; 0xc2
   34128:	bcc	34108 <__assert_fail@plt+0x22cd4>
   3412c:	ldr	r2, [r2, #48]	; 0x30
   34130:	add	r1, r3, #2
   34134:	cmp	r1, r2
   34138:	bgt	34108 <__assert_fail@plt+0x22cd4>
   3413c:	add	r1, r3, r0
   34140:	cmp	r6, #223	; 0xdf
   34144:	ldrb	r7, [r1, #1]
   34148:	bhi	34170 <__assert_fail@plt+0x22d3c>
   3414c:	cmp	r7, #192	; 0xc0
   34150:	mov	r0, #0
   34154:	movwcc	r0, #1
   34158:	lsl	r8, r0, #1
   3415c:	sxtb	r0, r7
   34160:	cmn	r0, #1
   34164:	movwgt	r8, #0
   34168:	mov	r0, r8
   3416c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   34170:	cmp	r6, #239	; 0xef
   34174:	bhi	34190 <__assert_fail@plt+0x22d5c>
   34178:	mov	r0, #3
   3417c:	cmp	r6, #224	; 0xe0
   34180:	bne	341ec <__assert_fail@plt+0x22db8>
   34184:	cmp	r7, #160	; 0xa0
   34188:	bcc	34108 <__assert_fail@plt+0x22cd4>
   3418c:	b	341ec <__assert_fail@plt+0x22db8>
   34190:	cmp	r6, #247	; 0xf7
   34194:	bhi	341b0 <__assert_fail@plt+0x22d7c>
   34198:	mov	r0, #4
   3419c:	cmp	r6, #240	; 0xf0
   341a0:	bne	341ec <__assert_fail@plt+0x22db8>
   341a4:	cmp	r7, #144	; 0x90
   341a8:	bcc	34108 <__assert_fail@plt+0x22cd4>
   341ac:	b	341ec <__assert_fail@plt+0x22db8>
   341b0:	cmp	r6, #251	; 0xfb
   341b4:	bhi	341d0 <__assert_fail@plt+0x22d9c>
   341b8:	mov	r0, #5
   341bc:	cmp	r6, #248	; 0xf8
   341c0:	bne	341ec <__assert_fail@plt+0x22db8>
   341c4:	cmp	r7, #136	; 0x88
   341c8:	bcc	34108 <__assert_fail@plt+0x22cd4>
   341cc:	b	341ec <__assert_fail@plt+0x22db8>
   341d0:	cmp	r6, #253	; 0xfd
   341d4:	bhi	34108 <__assert_fail@plt+0x22cd4>
   341d8:	mov	r0, #6
   341dc:	cmp	r6, #252	; 0xfc
   341e0:	bne	341ec <__assert_fail@plt+0x22db8>
   341e4:	cmp	r7, #132	; 0x84
   341e8:	bcc	34108 <__assert_fail@plt+0x22cd4>
   341ec:	add	r3, r0, r3
   341f0:	cmp	r3, r2
   341f4:	bgt	34108 <__assert_fail@plt+0x22cd4>
   341f8:	ldrb	r2, [r1, #1]
   341fc:	sxtb	r3, r2
   34200:	cmn	r3, #1
   34204:	bgt	34108 <__assert_fail@plt+0x22cd4>
   34208:	cmp	r2, #191	; 0xbf
   3420c:	bhi	34108 <__assert_fail@plt+0x22cd4>
   34210:	ldrb	r2, [r1, #2]
   34214:	sxtb	r3, r2
   34218:	cmn	r3, #1
   3421c:	bgt	34108 <__assert_fail@plt+0x22cd4>
   34220:	cmp	r2, #191	; 0xbf
   34224:	bhi	34108 <__assert_fail@plt+0x22cd4>
   34228:	cmp	r0, #3
   3422c:	beq	340f0 <__assert_fail@plt+0x22cbc>
   34230:	ldrb	r2, [r1, #3]
   34234:	sxtb	r3, r2
   34238:	cmn	r3, #1
   3423c:	bgt	34108 <__assert_fail@plt+0x22cd4>
   34240:	cmp	r2, #191	; 0xbf
   34244:	bhi	34108 <__assert_fail@plt+0x22cd4>
   34248:	cmp	r0, #4
   3424c:	beq	340f0 <__assert_fail@plt+0x22cbc>
   34250:	ldrb	r2, [r1, #4]
   34254:	sxtb	r3, r2
   34258:	cmn	r3, #1
   3425c:	bgt	34108 <__assert_fail@plt+0x22cd4>
   34260:	cmp	r2, #191	; 0xbf
   34264:	bhi	34108 <__assert_fail@plt+0x22cd4>
   34268:	cmp	r0, #5
   3426c:	beq	340f0 <__assert_fail@plt+0x22cbc>
   34270:	ldrsb	r1, [r1, #5]
   34274:	uxtb	r2, r1
   34278:	cmp	r2, #191	; 0xbf
   3427c:	movwhi	r0, #0
   34280:	cmn	r1, #1
   34284:	movwgt	r0, #0
   34288:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3428c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   34290:	add	fp, sp, #24
   34294:	ldr	r4, [r1, #4]
   34298:	mov	r6, r0
   3429c:	mvn	r0, #0
   342a0:	mov	r8, #0
   342a4:	uxtab	r3, r0, r4
   342a8:	cmp	r3, #6
   342ac:	bhi	34448 <__assert_fail@plt+0x23014>
   342b0:	ldr	r0, [r6, #4]
   342b4:	mov	r9, r1
   342b8:	ldrb	r1, [r0, r2]
   342bc:	add	r7, pc, #4
   342c0:	sxtb	r0, r1
   342c4:	ldr	pc, [r7, r3, lsl #2]
   342c8:	andeq	r4, r3, r4, ror #5
   342cc:	andeq	r4, r3, r8, asr #8
   342d0:	strdeq	r4, [r3], -r8
   342d4:	andeq	r4, r3, r8, asr #8
   342d8:	andeq	r4, r3, r0, lsr #6
   342dc:	andeq	r4, r3, r8, asr #8
   342e0:	andeq	r4, r3, r8, lsl r3
   342e4:	ldrb	r3, [r9]
   342e8:	uxtb	r7, r0
   342ec:	cmp	r3, r7
   342f0:	beq	34354 <__assert_fail@plt+0x22f20>
   342f4:	b	34448 <__assert_fail@plt+0x23014>
   342f8:	ldr	r3, [r9]
   342fc:	ubfx	r7, r1, #5, #3
   34300:	mov	r5, #1
   34304:	ldr	r3, [r3, r7, lsl #2]
   34308:	and	r7, r1, #31
   3430c:	tst	r3, r5, lsl r7
   34310:	bne	34354 <__assert_fail@plt+0x22f20>
   34314:	b	34448 <__assert_fail@plt+0x23014>
   34318:	cmp	r0, #0
   3431c:	bmi	34448 <__assert_fail@plt+0x23014>
   34320:	cmp	r1, #0
   34324:	beq	34344 <__assert_fail@plt+0x22f10>
   34328:	cmp	r1, #10
   3432c:	bne	34354 <__assert_fail@plt+0x22f20>
   34330:	ldr	r3, [r6, #84]	; 0x54
   34334:	ldrb	r3, [r3, #128]	; 0x80
   34338:	tst	r3, #64	; 0x40
   3433c:	beq	34448 <__assert_fail@plt+0x23014>
   34340:	b	34354 <__assert_fail@plt+0x22f20>
   34344:	ldr	r3, [r6, #84]	; 0x54
   34348:	ldrb	r3, [r3, #128]	; 0x80
   3434c:	tst	r3, #128	; 0x80
   34350:	bne	34448 <__assert_fail@plt+0x23014>
   34354:	movw	r3, #65280	; 0xff00
   34358:	movt	r3, #3
   3435c:	tst	r4, r3
   34360:	beq	343a8 <__assert_fail@plt+0x22f74>
   34364:	cmn	r2, #1
   34368:	ble	343a0 <__assert_fail@plt+0x22f6c>
   3436c:	ldr	r3, [r6, #48]	; 0x30
   34370:	cmp	r3, r2
   34374:	beq	34468 <__assert_fail@plt+0x23034>
   34378:	ldr	r3, [r6, #80]	; 0x50
   3437c:	cmp	r3, #2
   34380:	blt	343b4 <__assert_fail@plt+0x22f80>
   34384:	ldr	r0, [r6, #8]
   34388:	ldr	r7, [r0, r2, lsl #2]
   3438c:	cmn	r7, #1
   34390:	bne	343e4 <__assert_fail@plt+0x22fb0>
   34394:	sub	r2, r2, #1
   34398:	cmn	r2, #1
   3439c:	bne	34388 <__assert_fail@plt+0x22f54>
   343a0:	ldr	r1, [r6, #60]	; 0x3c
   343a4:	b	3440c <__assert_fail@plt+0x22fd8>
   343a8:	mov	r8, #1
   343ac:	mov	r0, r8
   343b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   343b4:	ldr	r2, [r6, #68]	; 0x44
   343b8:	ubfx	r3, r1, #5, #3
   343bc:	and	r7, r1, #31
   343c0:	mov	r1, #1
   343c4:	ldr	r3, [r2, r3, lsl #2]
   343c8:	mov	r2, #0
   343cc:	tst	r3, r1, lsl r7
   343d0:	bne	34424 <__assert_fail@plt+0x22ff0>
   343d4:	mov	r1, #0
   343d8:	cmp	r0, #10
   343dc:	beq	343fc <__assert_fail@plt+0x22fc8>
   343e0:	b	3440c <__assert_fail@plt+0x22fd8>
   343e4:	ldrb	r0, [r6, #78]	; 0x4e
   343e8:	cmp	r0, #0
   343ec:	bne	34478 <__assert_fail@plt+0x23044>
   343f0:	mov	r1, #0
   343f4:	cmp	r7, #10
   343f8:	bne	3440c <__assert_fail@plt+0x22fd8>
   343fc:	ldrb	r0, [r6, #77]	; 0x4d
   34400:	cmp	r0, #0
   34404:	movwne	r0, #1
   34408:	lsl	r1, r0, #1
   3440c:	and	r0, r1, #1
   34410:	tst	r4, #1024	; 0x400
   34414:	eor	r2, r0, #1
   34418:	beq	34424 <__assert_fail@plt+0x22ff0>
   3441c:	cmp	r0, #0
   34420:	beq	34448 <__assert_fail@plt+0x23014>
   34424:	ldr	r0, [r9, #4]
   34428:	cmp	r2, #0
   3442c:	bne	34438 <__assert_fail@plt+0x23004>
   34430:	ands	r2, r0, #2048	; 0x800
   34434:	bne	34448 <__assert_fail@plt+0x23014>
   34438:	tst	r1, #2
   3443c:	bne	34450 <__assert_fail@plt+0x2301c>
   34440:	ands	r2, r0, #8192	; 0x2000
   34444:	beq	34450 <__assert_fail@plt+0x2301c>
   34448:	mov	r0, r8
   3444c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   34450:	uxth	r0, r0
   34454:	mov	r2, #1
   34458:	and	r1, r1, #8
   3445c:	eor	r0, r2, r0, lsr #15
   34460:	orr	r0, r0, r1, lsr #3
   34464:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   34468:	ldr	r0, [r6, #88]	; 0x58
   3446c:	and	r0, r0, #2
   34470:	eor	r1, r0, #10
   34474:	b	3440c <__assert_fail@plt+0x22fd8>
   34478:	mov	r0, r7
   3447c:	bl	11350 <iswalnum@plt>
   34480:	mov	r1, #1
   34484:	mov	r2, #0
   34488:	cmp	r7, #95	; 0x5f
   3448c:	beq	34424 <__assert_fail@plt+0x22ff0>
   34490:	cmp	r0, #0
   34494:	beq	343f0 <__assert_fail@plt+0x22fbc>
   34498:	b	34424 <__assert_fail@plt+0x22ff0>
   3449c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   344a0:	add	fp, sp, #28
   344a4:	sub	sp, sp, #4
   344a8:	vpush	{d8-d9}
   344ac:	sub	sp, sp, #2272	; 0x8e0
   344b0:	sub	sp, sp, #12288	; 0x3000
   344b4:	mov	lr, r0
   344b8:	mov	r0, #0
   344bc:	vmov.i32	q4, #0	; 0x00000000
   344c0:	mov	r8, r1
   344c4:	str	r0, [r1, #44]	; 0x2c
   344c8:	str	r0, [r1, #48]	; 0x30
   344cc:	sub	r0, fp, #1024	; 0x400
   344d0:	sub	r1, r0, #56	; 0x38
   344d4:	mov	r0, r1
   344d8:	vst1.64	{d8-d9}, [r0]!
   344dc:	vst1.64	{d8-d9}, [r0]
   344e0:	ldr	r0, [r8, #8]
   344e4:	cmp	r0, #0
   344e8:	ble	354bc <__assert_fail@plt+0x24088>
   344ec:	add	r0, lr, #96	; 0x60
   344f0:	mov	r2, #0
   344f4:	mov	r4, #0
   344f8:	str	lr, [sp, #140]	; 0x8c
   344fc:	str	r8, [sp, #12]
   34500:	str	r0, [sp, #4]
   34504:	add	r0, r0, #16
   34508:	str	r0, [sp]
   3450c:	add	r0, r1, #16
   34510:	str	r0, [sp, #8]
   34514:	b	3453c <__assert_fail@plt+0x23108>
   34518:	sub	r0, fp, #1024	; 0x400
   3451c:	mov	r4, r6
   34520:	sub	r0, r0, #56	; 0x38
   34524:	vst1.64	{d8-d9}, [r0]!
   34528:	vst1.64	{d8-d9}, [r0]
   3452c:	ldr	r0, [r8, #8]
   34530:	add	r2, r2, #1
   34534:	cmp	r2, r0
   34538:	bge	34ee4 <__assert_fail@plt+0x23ab0>
   3453c:	ldr	r0, [r8, #12]
   34540:	ldr	r1, [lr]
   34544:	mov	r6, r4
   34548:	str	r2, [sp, #24]
   3454c:	ldr	r0, [r0, r2, lsl #2]
   34550:	add	r5, r1, r0, lsl #3
   34554:	ldr	sl, [r5, #4]!
   34558:	uxtb	r3, sl
   3455c:	cmp	r3, #1
   34560:	str	r3, [sp, #64]	; 0x40
   34564:	bne	345e4 <__assert_fail@plt+0x231b0>
   34568:	ldrb	r2, [r1, r0, lsl #3]
   3456c:	str	r0, [sp, #16]
   34570:	sub	r0, fp, #1024	; 0x400
   34574:	mov	r4, r1
   34578:	sub	r7, r0, #56	; 0x38
   3457c:	mov	r0, #1
   34580:	mov	r1, r7
   34584:	ubfx	r3, r2, #5, #3
   34588:	and	r2, r2, #31
   3458c:	ldr	r7, [r7, r3, lsl #2]
   34590:	orr	r2, r7, r0, lsl r2
   34594:	str	r2, [r1, r3, lsl #2]
   34598:	movw	r2, #65280	; 0xff00
   3459c:	mov	r3, r4
   345a0:	movt	r2, #3
   345a4:	ands	r2, sl, r2
   345a8:	ldr	r2, [sp, #24]
   345ac:	beq	349f0 <__assert_fail@plt+0x235bc>
   345b0:	tst	sl, #8192	; 0x2000
   345b4:	beq	34648 <__assert_fail@plt+0x23214>
   345b8:	ldr	r2, [fp, #-1080]	; 0xfffffbc8
   345bc:	sub	r0, fp, #1024	; 0x400
   345c0:	mov	r1, r3
   345c4:	sub	r3, r0, #56	; 0x38
   345c8:	vst1.64	{d8-d9}, [r3]!
   345cc:	vst1.64	{d8-d9}, [r3]
   345d0:	tst	r2, #1024	; 0x400
   345d4:	bne	34638 <__assert_fail@plt+0x23204>
   345d8:	ldr	r2, [sp, #24]
   345dc:	mov	r4, r6
   345e0:	b	3452c <__assert_fail@plt+0x230f8>
   345e4:	cmp	r3, #7
   345e8:	beq	34684 <__assert_fail@plt+0x23250>
   345ec:	cmp	r3, #5
   345f0:	beq	346d8 <__assert_fail@plt+0x232a4>
   345f4:	cmp	r3, #3
   345f8:	bne	34edc <__assert_fail@plt+0x23aa8>
   345fc:	ldr	r2, [r1, r0, lsl #3]
   34600:	str	r0, [sp, #16]
   34604:	sub	r0, fp, #1024	; 0x400
   34608:	mov	r4, r1
   3460c:	sub	r3, r0, #56	; 0x38
   34610:	vld1.64	{d16-d17}, [r3]
   34614:	vld1.32	{d18-d19}, [r2]!
   34618:	vorr	q8, q8, q9
   3461c:	vst1.64	{d16-d17}, [r3]
   34620:	vld1.32	{d16-d17}, [r2]
   34624:	ldr	r2, [sp, #8]
   34628:	vld1.32	{d18-d19}, [r2]
   3462c:	vorr	q8, q9, q8
   34630:	vst1.32	{d16-d17}, [r2]
   34634:	b	34598 <__assert_fail@plt+0x23164>
   34638:	ldr	r2, [sp, #24]
   3463c:	mov	r0, #1024	; 0x400
   34640:	mov	r3, r1
   34644:	str	r0, [fp, #-1080]	; 0xfffffbc8
   34648:	tst	sl, #32768	; 0x8000
   3464c:	bne	34518 <__assert_fail@plt+0x230e4>
   34650:	tst	sl, #1024	; 0x400
   34654:	beq	34908 <__assert_fail@plt+0x234d4>
   34658:	ldr	r0, [sp, #64]	; 0x40
   3465c:	cmp	r0, #1
   34660:	bne	34724 <__assert_fail@plt+0x232f0>
   34664:	ldrb	r2, [r5, #2]
   34668:	tst	r2, #64	; 0x40
   3466c:	bne	34724 <__assert_fail@plt+0x232f0>
   34670:	sub	r0, fp, #1024	; 0x400
   34674:	sub	r0, r0, #56	; 0x38
   34678:	vst1.64	{d8-d9}, [r0]!
   3467c:	vst1.64	{d8-d9}, [r0]
   34680:	b	345d8 <__assert_fail@plt+0x231a4>
   34684:	str	r0, [sp, #16]
   34688:	mvn	r0, #0
   3468c:	mov	r4, r1
   34690:	str	r0, [fp, #-1068]	; 0xfffffbd4
   34694:	str	r0, [fp, #-1072]	; 0xfffffbd0
   34698:	str	r0, [fp, #-1076]	; 0xfffffbcc
   3469c:	str	r0, [fp, #-1080]	; 0xfffffbc8
   346a0:	ldr	r3, [lr, #128]	; 0x80
   346a4:	and	r2, r3, #128	; 0x80
   346a8:	ands	r3, r3, #64	; 0x40
   346ac:	beq	346b8 <__assert_fail@plt+0x23284>
   346b0:	cmp	r2, #0
   346b4:	beq	34598 <__assert_fail@plt+0x23164>
   346b8:	cmp	r3, #0
   346bc:	mvn	r3, #1
   346c0:	movweq	r3, #64510	; 0xfbfe
   346c4:	movteq	r3, #65535	; 0xffff
   346c8:	cmp	r2, #0
   346cc:	mvneq	r3, #1024	; 0x400
   346d0:	str	r3, [fp, #-1080]	; 0xfffffbc8
   346d4:	b	34598 <__assert_fail@plt+0x23164>
   346d8:	ldr	r2, [lr, #92]	; 0x5c
   346dc:	mov	r4, r1
   346e0:	str	r0, [sp, #16]
   346e4:	cmp	r2, #2
   346e8:	blt	347bc <__assert_fail@plt+0x23388>
   346ec:	ldr	r2, [lr, #60]	; 0x3c
   346f0:	sub	r0, fp, #1024	; 0x400
   346f4:	sub	r3, r0, #56	; 0x38
   346f8:	vld1.64	{d16-d17}, [r3]
   346fc:	vld1.32	{d18-d19}, [r2]!
   34700:	vorr	q8, q8, q9
   34704:	vst1.64	{d16-d17}, [r3]
   34708:	vld1.32	{d18-d19}, [r2]
   3470c:	ldr	r2, [sp, #8]
   34710:	vld1.32	{d20-d21}, [r2]
   34714:	vorr	q9, q10, q9
   34718:	vst1.32	{d18-d19}, [r2]
   3471c:	vmov.32	r2, d16[0]
   34720:	b	347e0 <__assert_fail@plt+0x233ac>
   34724:	ldr	r2, [lr, #92]	; 0x5c
   34728:	mov	r1, r3
   3472c:	cmp	r2, #1
   34730:	ble	3480c <__assert_fail@plt+0x233d8>
   34734:	ldr	r2, [lr, #60]	; 0x3c
   34738:	ldr	r3, [sp, #4]
   3473c:	sub	r0, fp, #1024	; 0x400
   34740:	vld1.32	{d16-d17}, [r3]
   34744:	vld1.32	{d18-d19}, [r2]!
   34748:	sub	r3, r0, #56	; 0x38
   3474c:	vld1.64	{d20-d21}, [r3]
   34750:	vorn	q8, q8, q9
   34754:	vand	q8, q10, q8
   34758:	vst1.64	{d16-d17}, [r3]
   3475c:	vmov.32	r3, d16[1]
   34760:	vld1.32	{d18-d19}, [r2]
   34764:	ldr	r2, [sp]
   34768:	vld1.32	{d20-d21}, [r2]
   3476c:	ldr	r2, [sp, #8]
   34770:	vld1.32	{d22-d23}, [r2]
   34774:	vorn	q9, q10, q9
   34778:	vand	q9, q11, q9
   3477c:	vst1.32	{d18-d19}, [r2]
   34780:	vmov.32	r2, d16[0]
   34784:	orr	r2, r3, r2
   34788:	vmov.32	r3, d17[0]
   3478c:	orr	r2, r2, r3
   34790:	vmov.32	r3, d17[1]
   34794:	orr	r2, r2, r3
   34798:	vmov.32	r3, d18[0]
   3479c:	orr	r2, r2, r3
   347a0:	vmov.32	r3, d18[1]
   347a4:	orr	r2, r2, r3
   347a8:	vmov.32	r3, d19[0]
   347ac:	orr	r2, r2, r3
   347b0:	vmov.32	r3, d19[1]
   347b4:	orr	r2, r2, r3
   347b8:	b	348f8 <__assert_fail@plt+0x234c4>
   347bc:	mvn	r2, #0
   347c0:	str	r2, [fp, #-1052]	; 0xfffffbe4
   347c4:	str	r2, [fp, #-1056]	; 0xfffffbe0
   347c8:	str	r2, [fp, #-1060]	; 0xfffffbdc
   347cc:	str	r2, [fp, #-1064]	; 0xfffffbd8
   347d0:	str	r2, [fp, #-1068]	; 0xfffffbd4
   347d4:	str	r2, [fp, #-1072]	; 0xfffffbd0
   347d8:	str	r2, [fp, #-1076]	; 0xfffffbcc
   347dc:	str	r2, [fp, #-1080]	; 0xfffffbc8
   347e0:	ldr	r3, [lr, #128]	; 0x80
   347e4:	ands	r7, r3, #64	; 0x40
   347e8:	and	r3, r3, #128	; 0x80
   347ec:	biceq	r2, r2, #1024	; 0x400
   347f0:	beq	347fc <__assert_fail@plt+0x233c8>
   347f4:	cmp	r3, #0
   347f8:	beq	34598 <__assert_fail@plt+0x23164>
   347fc:	cmp	r3, #0
   34800:	bicne	r2, r2, #1
   34804:	str	r2, [fp, #-1080]	; 0xfffffbc8
   34808:	b	34598 <__assert_fail@plt+0x23164>
   3480c:	ldr	r2, [sp, #140]	; 0x8c
   34810:	ldr	r3, [lr, #96]	; 0x60
   34814:	str	r1, [sp, #60]	; 0x3c
   34818:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   3481c:	mov	r9, r5
   34820:	str	r6, [sp, #152]	; 0x98
   34824:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   34828:	ldr	r6, [fp, #-1072]	; 0xfffffbd0
   3482c:	ldr	lr, [r2, #100]	; 0x64
   34830:	ldr	r2, [sp, #140]	; 0x8c
   34834:	and	r7, r4, r3
   34838:	ldr	r3, [sp, #12]
   3483c:	ldr	r1, [r2, #104]	; 0x68
   34840:	ldr	r2, [sp, #140]	; 0x8c
   34844:	and	lr, r5, lr
   34848:	ldr	r0, [r2, #108]	; 0x6c
   3484c:	ldr	r2, [sp, #140]	; 0x8c
   34850:	and	r1, r6, r1
   34854:	ldr	ip, [r2, #112]	; 0x70
   34858:	ldr	r2, [sp, #140]	; 0x8c
   3485c:	ldr	r8, [r2, #116]	; 0x74
   34860:	ldr	r2, [sp, #140]	; 0x8c
   34864:	ldr	r2, [r2, #120]	; 0x78
   34868:	str	r2, [sp, #160]	; 0xa0
   3486c:	ldr	r2, [sp, #140]	; 0x8c
   34870:	ldr	r2, [r2, #124]	; 0x7c
   34874:	str	r2, [sp, #164]	; 0xa4
   34878:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   3487c:	str	r7, [fp, #-1080]	; 0xfffffbc8
   34880:	str	lr, [fp, #-1076]	; 0xfffffbcc
   34884:	str	r1, [fp, #-1072]	; 0xfffffbd0
   34888:	orr	r7, lr, r7
   3488c:	ldr	lr, [sp, #140]	; 0x8c
   34890:	orr	r7, r7, r1
   34894:	ldr	r1, [sp, #60]	; 0x3c
   34898:	and	r2, r2, r0
   3489c:	ldr	r0, [sp, #160]	; 0xa0
   348a0:	str	r2, [fp, #-1068]	; 0xfffffbd4
   348a4:	orr	r2, r7, r2
   348a8:	ldr	r6, [fp, #-1064]	; 0xfffffbd8
   348ac:	and	r6, r6, ip
   348b0:	str	r6, [fp, #-1064]	; 0xfffffbd8
   348b4:	orr	r2, r2, r6
   348b8:	ldr	r6, [sp, #152]	; 0x98
   348bc:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   348c0:	and	r4, r4, r8
   348c4:	mov	r8, r3
   348c8:	str	r4, [fp, #-1060]	; 0xfffffbdc
   348cc:	orr	r2, r2, r4
   348d0:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   348d4:	and	r3, r3, r0
   348d8:	ldr	r0, [sp, #164]	; 0xa4
   348dc:	str	r3, [fp, #-1056]	; 0xfffffbe0
   348e0:	orr	r2, r2, r3
   348e4:	ldr	r5, [fp, #-1052]	; 0xfffffbe4
   348e8:	and	r0, r5, r0
   348ec:	mov	r5, r9
   348f0:	str	r0, [fp, #-1052]	; 0xfffffbe4
   348f4:	orr	r2, r2, r0
   348f8:	cmp	r2, #0
   348fc:	ldr	r2, [sp, #24]
   34900:	mov	r3, r1
   34904:	beq	34edc <__assert_fail@plt+0x23aa8>
   34908:	tst	sl, #2048	; 0x800
   3490c:	beq	349f0 <__assert_fail@plt+0x235bc>
   34910:	ldr	r0, [sp, #64]	; 0x40
   34914:	cmp	r0, #1
   34918:	bne	34928 <__assert_fail@plt+0x234f4>
   3491c:	ldrb	r0, [r5, #2]
   34920:	tst	r0, #64	; 0x40
   34924:	bne	34518 <__assert_fail@plt+0x230e4>
   34928:	ldr	r0, [lr, #92]	; 0x5c
   3492c:	cmp	r0, #1
   34930:	ble	3497c <__assert_fail@plt+0x23548>
   34934:	ldr	r0, [lr, #60]	; 0x3c
   34938:	ldr	r1, [sp, #4]
   3493c:	vld1.32	{d16-d17}, [r1]
   34940:	vld1.32	{d18-d19}, [r0]!
   34944:	sub	r1, fp, #1024	; 0x400
   34948:	sub	r1, r1, #56	; 0x38
   3494c:	vld1.64	{d20-d21}, [r1]
   34950:	vand	q8, q9, q8
   34954:	vbic	q9, q10, q8
   34958:	vst1.64	{d18-d19}, [r1]
   3495c:	ldr	r1, [sp]
   34960:	vld1.32	{d20-d21}, [r0]
   34964:	ldr	r0, [sp, #8]
   34968:	vld1.32	{d16-d17}, [r1]
   3496c:	vld1.32	{d22-d23}, [r0]
   34970:	vand	q8, q10, q8
   34974:	vbic	q8, q11, q8
   34978:	b	349ac <__assert_fail@plt+0x23578>
   3497c:	ldr	r0, [sp, #4]
   34980:	vld1.32	{d16-d17}, [r0]
   34984:	sub	r0, fp, #1024	; 0x400
   34988:	sub	r0, r0, #56	; 0x38
   3498c:	vld1.64	{d18-d19}, [r0]
   34990:	vbic	q9, q9, q8
   34994:	vst1.64	{d18-d19}, [r0]
   34998:	ldr	r0, [sp]
   3499c:	vld1.32	{d16-d17}, [r0]
   349a0:	ldr	r0, [sp, #8]
   349a4:	vld1.32	{d20-d21}, [r0]
   349a8:	vbic	q8, q10, q8
   349ac:	vst1.32	{d16-d17}, [r0]
   349b0:	vmov.32	r0, d18[0]
   349b4:	vmov.32	r1, d18[1]
   349b8:	orr	r0, r1, r0
   349bc:	vmov.32	r1, d19[0]
   349c0:	orr	r0, r0, r1
   349c4:	vmov.32	r1, d19[1]
   349c8:	orr	r0, r0, r1
   349cc:	vmov.32	r1, d16[0]
   349d0:	orr	r0, r0, r1
   349d4:	vmov.32	r1, d16[1]
   349d8:	orr	r0, r0, r1
   349dc:	vmov.32	r1, d17[0]
   349e0:	orr	r0, r0, r1
   349e4:	vmov.32	r1, d17[1]
   349e8:	orrs	r0, r0, r1
   349ec:	beq	34edc <__assert_fail@plt+0x23aa8>
   349f0:	mov	r4, r6
   349f4:	mov	r5, #0
   349f8:	cmp	r6, #1
   349fc:	blt	34e4c <__assert_fail@plt+0x23a18>
   34a00:	ldr	r0, [fp, #-1052]	; 0xfffffbe4
   34a04:	ldr	ip, [fp, #-1056]	; 0xfffffbe0
   34a08:	ldr	lr, [fp, #-1060]	; 0xfffffbdc
   34a0c:	ldr	r8, [fp, #-1072]	; 0xfffffbd0
   34a10:	ldr	r9, [sp, #64]	; 0x40
   34a14:	mov	r1, #28
   34a18:	str	r3, [sp, #60]	; 0x3c
   34a1c:	str	r0, [sp, #148]	; 0x94
   34a20:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   34a24:	str	r0, [sp, #120]	; 0x78
   34a28:	ldr	r0, [fp, #-1080]	; 0xfffffbc8
   34a2c:	str	r0, [sp, #108]	; 0x6c
   34a30:	ldr	r0, [fp, #-1076]	; 0xfffffbcc
   34a34:	str	r0, [sp, #112]	; 0x70
   34a38:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   34a3c:	str	r0, [sp, #116]	; 0x74
   34a40:	sub	r0, fp, #6144	; 0x1800
   34a44:	sub	r7, r0, #104	; 0x68
   34a48:	b	34a80 <__assert_fail@plt+0x2364c>
   34a4c:	ldr	r9, [sp, #64]	; 0x40
   34a50:	ldr	r7, [sp, #144]	; 0x90
   34a54:	ldr	ip, [sp, #164]	; 0xa4
   34a58:	ldr	lr, [sp, #160]	; 0xa0
   34a5c:	ldr	r5, [sp, #136]	; 0x88
   34a60:	ldr	r4, [sp, #152]	; 0x98
   34a64:	ldr	r3, [sp, #60]	; 0x3c
   34a68:	ldr	r8, [sp, #156]	; 0x9c
   34a6c:	add	r1, r1, #32
   34a70:	add	r7, r7, #12
   34a74:	add	r5, r5, #1
   34a78:	cmp	r5, r4
   34a7c:	bge	34e0c <__assert_fail@plt+0x239d8>
   34a80:	cmp	r9, #1
   34a84:	str	lr, [sp, #160]	; 0xa0
   34a88:	str	ip, [sp, #164]	; 0xa4
   34a8c:	str	r4, [sp, #152]	; 0x98
   34a90:	str	r5, [sp, #136]	; 0x88
   34a94:	str	r8, [sp, #156]	; 0x9c
   34a98:	bne	34acc <__assert_fail@plt+0x23698>
   34a9c:	ldr	r0, [sp, #16]
   34aa0:	add	r2, sp, #168	; 0xa8
   34aa4:	ldrb	r0, [r3, r0, lsl #3]
   34aa8:	mov	r3, r1
   34aac:	ubfx	r1, r0, #5, #3
   34ab0:	and	r0, r0, #31
   34ab4:	add	r1, r2, r1, lsl #2
   34ab8:	mov	r2, #1
   34abc:	ldr	r1, [r1, r5, lsl #5]
   34ac0:	tst	r1, r2, lsl r0
   34ac4:	mov	r1, r3
   34ac8:	beq	34a54 <__assert_fail@plt+0x23620>
   34acc:	add	r4, sp, #168	; 0xa8
   34ad0:	str	r7, [sp, #144]	; 0x90
   34ad4:	ldr	ip, [sp, #108]	; 0x6c
   34ad8:	ldr	r9, [sp, #112]	; 0x70
   34adc:	add	sl, r4, r5, lsl #5
   34ae0:	ldr	r5, [sp, #116]	; 0x74
   34ae4:	add	r7, sl, #8
   34ae8:	ldr	r3, [sl, #4]
   34aec:	ldm	r7, {r0, r6, r7}
   34af0:	str	r6, [sp, #132]	; 0x84
   34af4:	str	r7, [sp, #100]	; 0x64
   34af8:	str	r3, [sp, #128]	; 0x80
   34afc:	and	r3, r3, r9
   34b00:	and	r2, r0, r8
   34b04:	str	r0, [sp, #124]	; 0x7c
   34b08:	add	r0, r4, r1
   34b0c:	str	r3, [sp, #84]	; 0x54
   34b10:	ldr	r4, [r4, r1]
   34b14:	ldr	r8, [sp, #148]	; 0x94
   34b18:	ldr	lr, [r0, #-28]	; 0xffffffe4
   34b1c:	str	r0, [sp, #92]	; 0x5c
   34b20:	str	r2, [sp, #96]	; 0x60
   34b24:	and	r0, lr, ip
   34b28:	str	r0, [sp, #88]	; 0x58
   34b2c:	orr	r0, r3, r0
   34b30:	ldr	r3, [sl, #20]
   34b34:	orr	r0, r0, r2
   34b38:	and	r2, r6, r5
   34b3c:	ldr	r6, [sp, #120]	; 0x78
   34b40:	str	r2, [sp, #80]	; 0x50
   34b44:	orr	r0, r0, r2
   34b48:	and	r2, r7, r6
   34b4c:	ldr	r7, [sl, #24]
   34b50:	str	r2, [sp, #76]	; 0x4c
   34b54:	orr	r0, r0, r2
   34b58:	ldr	r2, [sp, #160]	; 0xa0
   34b5c:	and	r2, r3, r2
   34b60:	str	r2, [sp, #72]	; 0x48
   34b64:	orr	r0, r0, r2
   34b68:	ldr	r2, [sp, #164]	; 0xa4
   34b6c:	and	r2, r7, r2
   34b70:	str	r2, [sp, #68]	; 0x44
   34b74:	orr	r0, r0, r2
   34b78:	and	r2, r4, r8
   34b7c:	orrs	r0, r0, r2
   34b80:	beq	34a4c <__assert_fail@plt+0x23618>
   34b84:	bic	r0, ip, lr
   34b88:	str	r2, [sp, #20]
   34b8c:	ldr	r2, [sp, #156]	; 0x9c
   34b90:	ldr	r8, [sp, #100]	; 0x64
   34b94:	str	r1, [sp, #104]	; 0x68
   34b98:	ldr	r1, [sp, #128]	; 0x80
   34b9c:	bic	ip, lr, ip
   34ba0:	str	r0, [sp, #56]	; 0x38
   34ba4:	ldr	r0, [sp, #128]	; 0x80
   34ba8:	bic	lr, r1, r9
   34bac:	bic	r0, r9, r0
   34bb0:	orr	r1, lr, ip
   34bb4:	str	r0, [sp, #52]	; 0x34
   34bb8:	ldr	r0, [sp, #124]	; 0x7c
   34bbc:	bic	r0, r2, r0
   34bc0:	str	r0, [sp, #48]	; 0x30
   34bc4:	ldr	r0, [sp, #132]	; 0x84
   34bc8:	bic	r0, r5, r0
   34bcc:	str	r0, [sp, #44]	; 0x2c
   34bd0:	bic	r0, r6, r8
   34bd4:	bic	r6, r8, r6
   34bd8:	str	r0, [sp, #40]	; 0x28
   34bdc:	ldr	r0, [sp, #160]	; 0xa0
   34be0:	bic	r0, r0, r3
   34be4:	str	r0, [sp, #36]	; 0x24
   34be8:	ldr	r0, [sp, #164]	; 0xa4
   34bec:	bic	r0, r0, r7
   34bf0:	str	r0, [sp, #32]
   34bf4:	ldr	r0, [sp, #148]	; 0x94
   34bf8:	bic	r0, r0, r4
   34bfc:	str	r0, [sp, #28]
   34c00:	ldr	r0, [sp, #124]	; 0x7c
   34c04:	bic	r0, r0, r2
   34c08:	mov	r9, r0
   34c0c:	orr	r0, r1, r0
   34c10:	ldr	r1, [sp, #132]	; 0x84
   34c14:	bic	r1, r1, r5
   34c18:	orr	r5, r0, r1
   34c1c:	ldr	r0, [sp, #160]	; 0xa0
   34c20:	orr	r5, r5, r6
   34c24:	bic	r3, r3, r0
   34c28:	ldr	r0, [sp, #164]	; 0xa4
   34c2c:	orr	r5, r5, r3
   34c30:	bic	r7, r7, r0
   34c34:	ldr	r0, [sp, #148]	; 0x94
   34c38:	orr	r2, r5, r7
   34c3c:	bic	r4, r4, r0
   34c40:	orrs	r2, r2, r4
   34c44:	beq	34d24 <__assert_fail@plt+0x238f0>
   34c48:	ldr	r2, [sp, #152]	; 0x98
   34c4c:	add	r5, sp, #168	; 0xa8
   34c50:	add	r0, r5, r2, lsl #5
   34c54:	str	ip, [r5, r2, lsl #5]
   34c58:	str	lr, [r0, #4]
   34c5c:	str	r9, [r0, #8]
   34c60:	str	r1, [r0, #12]
   34c64:	str	r6, [r0, #16]
   34c68:	str	r3, [r0, #20]
   34c6c:	str	r7, [r0, #24]
   34c70:	str	r4, [r0, #28]
   34c74:	ldr	r0, [sp, #92]	; 0x5c
   34c78:	ldr	r1, [sp, #88]	; 0x58
   34c7c:	sub	lr, fp, #6144	; 0x1800
   34c80:	mov	r6, r2
   34c84:	str	r1, [r0, #-28]	; 0xffffffe4
   34c88:	ldr	r0, [sp, #84]	; 0x54
   34c8c:	ldr	r1, [sp, #20]
   34c90:	str	r0, [sl, #4]
   34c94:	ldr	r0, [sp, #96]	; 0x60
   34c98:	str	r0, [sl, #8]
   34c9c:	ldr	r0, [sp, #80]	; 0x50
   34ca0:	str	r0, [sl, #12]
   34ca4:	ldr	r0, [sp, #76]	; 0x4c
   34ca8:	str	r0, [sl, #16]
   34cac:	ldr	r0, [sp, #72]	; 0x48
   34cb0:	str	r0, [sl, #20]
   34cb4:	ldr	r0, [sp, #68]	; 0x44
   34cb8:	str	r0, [sl, #24]
   34cbc:	ldr	r0, [sp, #104]	; 0x68
   34cc0:	str	r1, [r5, r0]
   34cc4:	add	r0, r2, r2, lsl #1
   34cc8:	sub	r1, lr, #104	; 0x68
   34ccc:	add	r4, r1, r0, lsl #2
   34cd0:	ldr	r1, [sp, #144]	; 0x90
   34cd4:	mov	r5, r4
   34cd8:	ldr	r0, [r1, #4]
   34cdc:	str	r0, [r5, #4]!
   34ce0:	ldr	r7, [r1, #4]
   34ce4:	cmp	r7, #1
   34ce8:	blt	34d3c <__assert_fail@plt+0x23908>
   34cec:	str	r0, [r4]
   34cf0:	lsl	r0, r0, #2
   34cf4:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   34cf8:	ldr	r8, [sp, #36]	; 0x24
   34cfc:	ldr	sl, [sp, #28]
   34d00:	cmp	r0, #0
   34d04:	str	r0, [r4, #8]
   34d08:	beq	35428 <__assert_fail@plt+0x23ff4>
   34d0c:	ldr	r1, [sp, #144]	; 0x90
   34d10:	lsl	r2, r7, #2
   34d14:	ldr	r1, [r1, #8]
   34d18:	bl	111e8 <memcpy@plt>
   34d1c:	ldr	r1, [sp, #24]
   34d20:	b	34d58 <__assert_fail@plt+0x23924>
   34d24:	ldr	r4, [sp, #12]
   34d28:	ldr	r1, [sp, #24]
   34d2c:	ldr	r8, [sp, #36]	; 0x24
   34d30:	ldr	r5, [sp, #32]
   34d34:	ldr	sl, [sp, #28]
   34d38:	b	34d68 <__assert_fail@plt+0x23934>
   34d3c:	ldr	r1, [sp, #24]
   34d40:	ldr	r8, [sp, #36]	; 0x24
   34d44:	ldr	sl, [sp, #28]
   34d48:	mov	r0, #0
   34d4c:	str	r0, [r4]
   34d50:	str	r0, [r4, #4]
   34d54:	str	r0, [r4, #8]
   34d58:	ldr	r4, [sp, #12]
   34d5c:	ldr	r5, [sp, #32]
   34d60:	add	r6, r6, #1
   34d64:	str	r6, [sp, #152]	; 0x98
   34d68:	ldr	r0, [r4, #12]
   34d6c:	ldr	r7, [sp, #144]	; 0x90
   34d70:	ldr	r1, [r0, r1, lsl #2]
   34d74:	mov	r0, r7
   34d78:	bl	304e4 <__assert_fail@plt+0x1f0b0>
   34d7c:	ldr	r6, [sp, #40]	; 0x28
   34d80:	cmp	r0, #0
   34d84:	beq	353e8 <__assert_fail@plt+0x23fb4>
   34d88:	ldr	r2, [sp, #56]	; 0x38
   34d8c:	ldr	r4, [sp, #52]	; 0x34
   34d90:	ldr	r3, [sp, #48]	; 0x30
   34d94:	ldr	r1, [sp, #44]	; 0x2c
   34d98:	ldr	r9, [sp, #64]	; 0x40
   34d9c:	mov	ip, r5
   34da0:	mov	lr, r8
   34da4:	str	sl, [sp, #148]	; 0x94
   34da8:	str	r6, [sp, #120]	; 0x78
   34dac:	orr	r0, r4, r2
   34db0:	str	r1, [sp, #116]	; 0x74
   34db4:	str	r3, [sp, #156]	; 0x9c
   34db8:	str	r4, [sp, #112]	; 0x70
   34dbc:	str	r2, [sp, #108]	; 0x6c
   34dc0:	orr	r0, r0, r3
   34dc4:	orr	r0, r0, r1
   34dc8:	orr	r0, r0, r6
   34dcc:	orr	r0, r0, r8
   34dd0:	orr	r0, r0, r5
   34dd4:	orrs	r0, r0, sl
   34dd8:	mov	r0, r1
   34ddc:	ldr	r1, [sp, #104]	; 0x68
   34de0:	bne	34a5c <__assert_fail@plt+0x23628>
   34de4:	mov	ip, r5
   34de8:	str	r4, [sp, #112]	; 0x70
   34dec:	ldr	r4, [sp, #152]	; 0x98
   34df0:	ldr	r5, [sp, #136]	; 0x88
   34df4:	mov	lr, r8
   34df8:	str	sl, [sp, #148]	; 0x94
   34dfc:	str	r6, [sp, #120]	; 0x78
   34e00:	str	r0, [sp, #116]	; 0x74
   34e04:	mov	r8, r3
   34e08:	str	r2, [sp, #108]	; 0x6c
   34e0c:	ldr	r0, [sp, #148]	; 0x94
   34e10:	ldr	r2, [sp, #24]
   34e14:	str	r0, [fp, #-1052]	; 0xfffffbe4
   34e18:	ldr	r0, [sp, #120]	; 0x78
   34e1c:	str	ip, [fp, #-1056]	; 0xfffffbe0
   34e20:	str	lr, [fp, #-1060]	; 0xfffffbdc
   34e24:	ldr	lr, [sp, #140]	; 0x8c
   34e28:	str	r0, [fp, #-1064]	; 0xfffffbd8
   34e2c:	ldr	r0, [sp, #116]	; 0x74
   34e30:	str	r0, [fp, #-1068]	; 0xfffffbd4
   34e34:	ldr	r0, [sp, #112]	; 0x70
   34e38:	str	r8, [fp, #-1072]	; 0xfffffbd0
   34e3c:	ldr	r8, [sp, #12]
   34e40:	str	r0, [fp, #-1076]	; 0xfffffbcc
   34e44:	ldr	r0, [sp, #108]	; 0x6c
   34e48:	str	r0, [fp, #-1080]	; 0xfffffbc8
   34e4c:	cmp	r5, r4
   34e50:	bne	3452c <__assert_fail@plt+0x230f8>
   34e54:	sub	lr, fp, #1024	; 0x400
   34e58:	mov	r1, r8
   34e5c:	sub	r7, lr, #56	; 0x38
   34e60:	sub	lr, fp, #6144	; 0x1800
   34e64:	mov	sl, r1
   34e68:	mov	r0, r7
   34e6c:	mov	r8, r7
   34e70:	vld1.32	{d16-d17}, [r0]!
   34e74:	vld1.64	{d18-d19}, [r0]
   34e78:	add	r0, sp, #168	; 0xa8
   34e7c:	add	r0, r0, r5, lsl #5
   34e80:	vst1.32	{d16-d17}, [r0]!
   34e84:	vst1.32	{d18-d19}, [r0]
   34e88:	ldr	r0, [r1, #12]
   34e8c:	mov	r1, #1
   34e90:	ldr	r4, [r0, r2, lsl #2]
   34e94:	add	r0, r5, r5, lsl #1
   34e98:	sub	r2, lr, #104	; 0x68
   34e9c:	add	r7, r2, r0, lsl #2
   34ea0:	str	r1, [r2, r0, lsl #2]
   34ea4:	mov	r0, #4
   34ea8:	mov	r6, r7
   34eac:	str	r1, [r6, #4]!
   34eb0:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   34eb4:	cmp	r0, #0
   34eb8:	str	r0, [r7, #8]
   34ebc:	beq	35498 <__assert_fail@plt+0x24064>
   34ec0:	ldr	lr, [sp, #140]	; 0x8c
   34ec4:	ldr	r2, [sp, #24]
   34ec8:	str	r4, [r0]
   34ecc:	mov	r0, r8
   34ed0:	add	r4, r5, #1
   34ed4:	mov	r8, sl
   34ed8:	b	34524 <__assert_fail@plt+0x230f0>
   34edc:	mov	r4, r6
   34ee0:	b	3452c <__assert_fail@plt+0x230f8>
   34ee4:	cmp	r4, #0
   34ee8:	ble	354b4 <__assert_fail@plt+0x24080>
   34eec:	mov	r6, r4
   34ef0:	mov	r4, #0
   34ef4:	add	r0, r6, #1
   34ef8:	str	r4, [fp, #-3136]	; 0xfffff3c0
   34efc:	str	r0, [fp, #-3140]	; 0xfffff3bc
   34f00:	lsl	r0, r0, #2
   34f04:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   34f08:	ldr	r1, [sp, #140]	; 0x8c
   34f0c:	cmp	r0, #0
   34f10:	str	r0, [fp, #-3132]	; 0xfffff3c4
   34f14:	moveq	r4, #12
   34f18:	cmp	r0, #0
   34f1c:	str	r4, [fp, #-56]	; 0xffffffc8
   34f20:	beq	354e4 <__assert_fail@plt+0x240b0>
   34f24:	vmov.i32	q8, #0	; 0x00000000
   34f28:	sub	lr, fp, #3072	; 0xc00
   34f2c:	mov	r3, #0
   34f30:	mov	sl, #0
   34f34:	mov	r7, #0
   34f38:	mov	r2, #0
   34f3c:	mov	r8, #0
   34f40:	str	r6, [sp, #152]	; 0x98
   34f44:	sub	r0, lr, #104	; 0x68
   34f48:	sub	lr, fp, #3072	; 0xc00
   34f4c:	sub	r9, lr, #68	; 0x44
   34f50:	sub	lr, fp, #3072	; 0xc00
   34f54:	vst1.64	{d16-d17}, [r0]!
   34f58:	vst1.64	{d16-d17}, [r0]
   34f5c:	sub	r0, lr, #56	; 0x38
   34f60:	str	r0, [sp, #124]	; 0x7c
   34f64:	mov	r0, #0
   34f68:	str	r0, [sp, #144]	; 0x90
   34f6c:	mov	r0, #0
   34f70:	str	r0, [sp, #148]	; 0x94
   34f74:	mov	r0, #0
   34f78:	str	r0, [sp, #156]	; 0x9c
   34f7c:	mov	r0, #0
   34f80:	str	r0, [sp, #160]	; 0xa0
   34f84:	mov	r0, #0
   34f88:	str	r0, [sp, #164]	; 0xa4
   34f8c:	mov	r0, #0
   34f90:	str	r0, [sp, #128]	; 0x80
   34f94:	b	35054 <__assert_fail@plt+0x23c20>
   34f98:	ldrsb	r0, [r7, #52]	; 0x34
   34f9c:	cmn	r0, #1
   34fa0:	ble	35110 <__assert_fail@plt+0x23cdc>
   34fa4:	sub	lr, fp, #3072	; 0xc00
   34fa8:	sub	r0, lr, #56	; 0x38
   34fac:	sub	lr, fp, #2048	; 0x800
   34fb0:	str	r7, [r0, r8, lsl #2]
   34fb4:	sub	r0, lr, #56	; 0x38
   34fb8:	str	r7, [r0, r8, lsl #2]
   34fbc:	add	r0, sp, #168	; 0xa8
   34fc0:	ldr	r2, [sp, #164]	; 0xa4
   34fc4:	mov	r1, r0
   34fc8:	ldr	r0, [r0, r8, lsl #5]
   34fcc:	orr	r2, r2, r0
   34fd0:	add	r0, r1, r8, lsl #5
   34fd4:	add	r8, r8, #1
   34fd8:	str	r2, [sp, #164]	; 0xa4
   34fdc:	ldr	r2, [r0, #4]
   34fe0:	ldr	r1, [r0, #8]
   34fe4:	ldr	r7, [r0, #12]
   34fe8:	ldr	r5, [r0, #16]
   34fec:	ldr	r4, [r0, #20]
   34ff0:	ldr	r6, [r0, #24]
   34ff4:	ldr	r0, [r0, #28]
   34ff8:	orr	sl, sl, r0
   34ffc:	ldr	r0, [sp, #144]	; 0x90
   35000:	orr	r0, r0, r6
   35004:	ldr	r6, [sp, #148]	; 0x94
   35008:	str	r0, [sp, #144]	; 0x90
   3500c:	ldr	r0, [sp, #152]	; 0x98
   35010:	orr	r6, r6, r4
   35014:	str	r6, [sp, #148]	; 0x94
   35018:	ldr	r6, [sp, #156]	; 0x9c
   3501c:	cmp	r8, r0
   35020:	orr	r6, r6, r5
   35024:	str	r6, [sp, #156]	; 0x9c
   35028:	ldr	r6, [sp, #160]	; 0xa0
   3502c:	orr	r6, r6, r7
   35030:	ldr	r7, [sp, #132]	; 0x84
   35034:	str	r6, [sp, #160]	; 0xa0
   35038:	mov	r6, r0
   3503c:	orr	r7, r7, r1
   35040:	ldr	r1, [sp, #136]	; 0x88
   35044:	orr	r1, r1, r2
   35048:	mov	r2, r1
   3504c:	ldr	r1, [sp, #140]	; 0x8c
   35050:	beq	351e4 <__assert_fail@plt+0x23db0>
   35054:	mov	r0, #0
   35058:	sub	lr, fp, #6144	; 0x1800
   3505c:	str	r2, [sp, #136]	; 0x88
   35060:	str	r7, [sp, #132]	; 0x84
   35064:	str	r0, [fp, #-3136]	; 0xfffff3c0
   35068:	add	r0, r8, r8, lsl #1
   3506c:	sub	r2, lr, #104	; 0x68
   35070:	add	r0, r2, r0, lsl #2
   35074:	ldr	r7, [r0, #4]
   35078:	cmp	r7, #1
   3507c:	blt	350d8 <__assert_fail@plt+0x23ca4>
   35080:	ldr	r4, [r0, #8]
   35084:	mov	r5, #0
   35088:	b	35098 <__assert_fail@plt+0x23c64>
   3508c:	add	r5, r5, #1
   35090:	cmp	r5, r7
   35094:	bge	350d4 <__assert_fail@plt+0x23ca0>
   35098:	ldr	r0, [r4, r5, lsl #2]
   3509c:	ldr	r2, [r1, #12]
   350a0:	ldr	r0, [r2, r0, lsl #2]
   350a4:	cmn	r0, #1
   350a8:	beq	3508c <__assert_fail@plt+0x23c58>
   350ac:	ldr	r1, [r1, #24]
   350b0:	add	r0, r0, r0, lsl #1
   350b4:	add	r1, r1, r0, lsl #2
   350b8:	mov	r0, r9
   350bc:	bl	30358 <__assert_fail@plt+0x1ef24>
   350c0:	ldr	r1, [sp, #140]	; 0x8c
   350c4:	mov	r3, #0
   350c8:	cmp	r0, #0
   350cc:	beq	3508c <__assert_fail@plt+0x23c58>
   350d0:	b	35378 <__assert_fail@plt+0x23f44>
   350d4:	str	r3, [fp, #-56]	; 0xffffffc8
   350d8:	sub	r0, fp, #56	; 0x38
   350dc:	mov	r2, r9
   350e0:	mov	r3, #0
   350e4:	bl	30658 <__assert_fail@plt+0x1f224>
   350e8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   350ec:	mov	r7, r0
   350f0:	sub	lr, fp, #1024	; 0x400
   350f4:	sub	r0, lr, #56	; 0x38
   350f8:	cmp	r7, #0
   350fc:	str	r7, [r0, r8, lsl #2]
   35100:	bne	34f98 <__assert_fail@plt+0x23b64>
   35104:	cmp	r3, #0
   35108:	beq	34f98 <__assert_fail@plt+0x23b64>
   3510c:	b	351a4 <__assert_fail@plt+0x23d70>
   35110:	ldr	r1, [sp, #140]	; 0x8c
   35114:	sub	r0, fp, #56	; 0x38
   35118:	mov	r2, r9
   3511c:	mov	r3, #1
   35120:	bl	30658 <__assert_fail@plt+0x1f224>
   35124:	sub	lr, fp, #2048	; 0x800
   35128:	cmp	r0, #0
   3512c:	sub	r1, lr, #56	; 0x38
   35130:	str	r0, [r1, r8, lsl #2]
   35134:	bne	35144 <__assert_fail@plt+0x23d10>
   35138:	ldr	r1, [fp, #-56]	; 0xffffffc8
   3513c:	cmp	r1, #0
   35140:	bne	351a4 <__assert_fail@plt+0x23d70>
   35144:	cmp	r7, r0
   35148:	beq	35170 <__assert_fail@plt+0x23d3c>
   3514c:	ldr	r1, [sp, #140]	; 0x8c
   35150:	ldr	r2, [sp, #128]	; 0x80
   35154:	ldr	r0, [r1, #92]	; 0x5c
   35158:	cmp	r0, #1
   3515c:	mov	r0, #0
   35160:	movwgt	r0, #1
   35164:	orr	r2, r2, r0
   35168:	str	r2, [sp, #128]	; 0x80
   3516c:	b	35174 <__assert_fail@plt+0x23d40>
   35170:	ldr	r1, [sp, #140]	; 0x8c
   35174:	sub	r0, fp, #56	; 0x38
   35178:	mov	r2, r9
   3517c:	mov	r3, #2
   35180:	bl	30658 <__assert_fail@plt+0x1f224>
   35184:	ldr	r3, [fp, #-56]	; 0xffffffc8
   35188:	sub	lr, fp, #3072	; 0xc00
   3518c:	cmp	r0, #0
   35190:	sub	r1, lr, #56	; 0x38
   35194:	str	r0, [r1, r8, lsl #2]
   35198:	bne	34fbc <__assert_fail@plt+0x23b88>
   3519c:	cmp	r3, #0
   351a0:	beq	34fbc <__assert_fail@plt+0x23b88>
   351a4:	ldr	r0, [sp, #144]	; 0x90
   351a8:	str	sl, [fp, #-3148]	; 0xfffff3b4
   351ac:	str	r0, [fp, #-3152]	; 0xfffff3b0
   351b0:	ldr	r0, [sp, #148]	; 0x94
   351b4:	str	r0, [fp, #-3156]	; 0xfffff3ac
   351b8:	ldr	r0, [sp, #156]	; 0x9c
   351bc:	str	r0, [fp, #-3160]	; 0xfffff3a8
   351c0:	ldr	r0, [sp, #160]	; 0xa0
   351c4:	str	r0, [fp, #-3164]	; 0xfffff3a4
   351c8:	ldr	r0, [sp, #132]	; 0x84
   351cc:	str	r0, [fp, #-3168]	; 0xfffff3a0
   351d0:	ldr	r0, [sp, #136]	; 0x88
   351d4:	str	r0, [fp, #-3172]	; 0xfffff39c
   351d8:	ldr	r0, [sp, #164]	; 0xa4
   351dc:	str	r0, [fp, #-3176]	; 0xfffff398
   351e0:	b	353b8 <__assert_fail@plt+0x23f84>
   351e4:	ldr	r0, [sp, #144]	; 0x90
   351e8:	str	sl, [fp, #-3148]	; 0xfffff3b4
   351ec:	ldr	r9, [sp, #128]	; 0x80
   351f0:	ldr	sl, [sp, #164]	; 0xa4
   351f4:	str	r0, [fp, #-3152]	; 0xfffff3b0
   351f8:	ldr	r0, [sp, #148]	; 0x94
   351fc:	tst	r9, #1
   35200:	str	r0, [fp, #-3156]	; 0xfffff3ac
   35204:	ldr	r0, [sp, #156]	; 0x9c
   35208:	str	r0, [fp, #-3160]	; 0xfffff3a8
   3520c:	ldr	r0, [sp, #160]	; 0xa0
   35210:	str	r0, [fp, #-3164]	; 0xfffff3a4
   35214:	mov	r0, #4
   35218:	str	r7, [fp, #-3168]	; 0xfffff3a0
   3521c:	str	r2, [fp, #-3172]	; 0xfffff39c
   35220:	str	sl, [fp, #-3176]	; 0xfffff398
   35224:	bne	354f0 <__assert_fail@plt+0x240bc>
   35228:	mov	r1, #256	; 0x100
   3522c:	bl	37f9c <__assert_fail@plt+0x26b68>
   35230:	ldr	r1, [sp, #12]
   35234:	cmp	r0, #0
   35238:	str	r0, [r1, #44]	; 0x2c
   3523c:	beq	353b8 <__assert_fail@plt+0x23f84>
   35240:	ldr	r4, [sp, #140]	; 0x8c
   35244:	mov	r1, #0
   35248:	mov	r3, sl
   3524c:	mov	r2, #0
   35250:	add	r8, sp, #168	; 0xa8
   35254:	cmp	r3, #0
   35258:	bne	35278 <__assert_fail@plt+0x23e44>
   3525c:	b	352f0 <__assert_fail@plt+0x23ebc>
   35260:	sub	lr, fp, #3072	; 0xc00
   35264:	add	r8, r8, #4
   35268:	sub	r3, lr, #104	; 0x68
   3526c:	ldr	r3, [r3, r2, lsl #2]
   35270:	cmp	r3, #0
   35274:	beq	352f0 <__assert_fail@plt+0x23ebc>
   35278:	add	r7, r4, r2, lsl #2
   3527c:	lsl	r6, r2, #5
   35280:	mov	r5, #1
   35284:	add	ip, r7, #96	; 0x60
   35288:	tst	r3, #1
   3528c:	bne	352ac <__assert_fail@plt+0x23e78>
   35290:	lsr	r7, r3, #1
   35294:	cmp	r1, r3, lsr #1
   35298:	add	r6, r6, #1
   3529c:	lsl	r5, r5, #1
   352a0:	mov	r3, r7
   352a4:	bne	35288 <__assert_fail@plt+0x23e54>
   352a8:	b	352f0 <__assert_fail@plt+0x23ebc>
   352ac:	mov	lr, #0
   352b0:	ldr	r7, [r8, lr, lsl #3]
   352b4:	add	lr, lr, #4
   352b8:	tst	r7, r5
   352bc:	beq	352b0 <__assert_fail@plt+0x23e7c>
   352c0:	ldr	r7, [ip]
   352c4:	sub	r4, fp, #2048	; 0x800
   352c8:	tst	r7, r5
   352cc:	sub	r7, r4, #56	; 0x38
   352d0:	sub	r4, fp, #1024	; 0x400
   352d4:	sub	r4, r4, #56	; 0x38
   352d8:	moveq	r7, r4
   352dc:	ldr	r4, [sp, #140]	; 0x8c
   352e0:	add	r7, r7, lr
   352e4:	ldr	r7, [r7, #-4]
   352e8:	str	r7, [r0, r6, lsl #2]
   352ec:	b	35290 <__assert_fail@plt+0x23e5c>
   352f0:	add	r2, r2, #1
   352f4:	cmp	r2, #8
   352f8:	bne	35260 <__assert_fail@plt+0x23e2c>
   352fc:	ldr	r5, [sp, #152]	; 0x98
   35300:	tst	sl, #1024	; 0x400
   35304:	beq	3534c <__assert_fail@plt+0x23f18>
   35308:	add	r1, sp, #168	; 0xa8
   3530c:	mov	r2, r5
   35310:	ldrb	r3, [r1, #1]
   35314:	tst	r3, #4
   35318:	bne	35338 <__assert_fail@plt+0x23f04>
   3531c:	ldr	r3, [sp, #124]	; 0x7c
   35320:	add	r1, r1, #32
   35324:	subs	r2, r2, #1
   35328:	add	r3, r3, #4
   3532c:	str	r3, [sp, #124]	; 0x7c
   35330:	bne	35310 <__assert_fail@plt+0x23edc>
   35334:	b	3534c <__assert_fail@plt+0x23f18>
   35338:	ldr	r1, [sp, #124]	; 0x7c
   3533c:	tst	r9, #1
   35340:	ldr	r1, [r1]
   35344:	str	r1, [r0, #40]	; 0x28
   35348:	strne	r1, [r0, #1064]	; 0x428
   3534c:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   35350:	bl	138e8 <__assert_fail@plt+0x24b4>
   35354:	sub	lr, fp, #6144	; 0x1800
   35358:	sub	r0, lr, #104	; 0x68
   3535c:	add	r4, r0, #8
   35360:	ldr	r0, [r4], #12
   35364:	bl	138e8 <__assert_fail@plt+0x24b4>
   35368:	subs	r5, r5, #1
   3536c:	bne	35360 <__assert_fail@plt+0x23f2c>
   35370:	mov	r0, #1
   35374:	b	354d4 <__assert_fail@plt+0x240a0>
   35378:	ldr	r1, [sp, #144]	; 0x90
   3537c:	str	sl, [fp, #-3148]	; 0xfffff3b4
   35380:	str	r0, [fp, #-56]	; 0xffffffc8
   35384:	str	r1, [fp, #-3152]	; 0xfffff3b0
   35388:	ldr	r1, [sp, #148]	; 0x94
   3538c:	str	r1, [fp, #-3156]	; 0xfffff3ac
   35390:	ldr	r1, [sp, #156]	; 0x9c
   35394:	str	r1, [fp, #-3160]	; 0xfffff3a8
   35398:	ldr	r1, [sp, #160]	; 0xa0
   3539c:	str	r1, [fp, #-3164]	; 0xfffff3a4
   353a0:	ldr	r1, [sp, #132]	; 0x84
   353a4:	str	r1, [fp, #-3168]	; 0xfffff3a0
   353a8:	ldr	r1, [sp, #136]	; 0x88
   353ac:	str	r1, [fp, #-3172]	; 0xfffff39c
   353b0:	ldr	r1, [sp, #164]	; 0xa4
   353b4:	str	r1, [fp, #-3176]	; 0xfffff398
   353b8:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   353bc:	bl	138e8 <__assert_fail@plt+0x24b4>
   353c0:	cmp	r6, #1
   353c4:	blt	35490 <__assert_fail@plt+0x2405c>
   353c8:	sub	lr, fp, #6144	; 0x1800
   353cc:	sub	r0, lr, #104	; 0x68
   353d0:	add	r4, r0, #8
   353d4:	ldr	r0, [r4], #12
   353d8:	bl	138e8 <__assert_fail@plt+0x24b4>
   353dc:	subs	r6, r6, #1
   353e0:	bne	353d4 <__assert_fail@plt+0x23fa0>
   353e4:	b	35490 <__assert_fail@plt+0x2405c>
   353e8:	ldr	r0, [sp, #44]	; 0x2c
   353ec:	str	sl, [fp, #-1052]	; 0xfffffbe4
   353f0:	str	r5, [fp, #-1056]	; 0xfffffbe0
   353f4:	str	r8, [fp, #-1060]	; 0xfffffbdc
   353f8:	str	r6, [fp, #-1064]	; 0xfffffbd8
   353fc:	ldr	r6, [sp, #152]	; 0x98
   35400:	str	r0, [fp, #-1068]	; 0xfffffbd4
   35404:	ldr	r0, [sp, #48]	; 0x30
   35408:	str	r0, [fp, #-1072]	; 0xfffffbd0
   3540c:	ldr	r0, [sp, #52]	; 0x34
   35410:	str	r0, [fp, #-1076]	; 0xfffffbcc
   35414:	ldr	r0, [sp, #56]	; 0x38
   35418:	str	r0, [fp, #-1080]	; 0xfffffbc8
   3541c:	cmp	r6, #1
   35420:	bge	35474 <__assert_fail@plt+0x24040>
   35424:	b	35490 <__assert_fail@plt+0x2405c>
   35428:	ldr	r0, [sp, #32]
   3542c:	str	sl, [fp, #-1052]	; 0xfffffbe4
   35430:	str	r0, [fp, #-1056]	; 0xfffffbe0
   35434:	ldr	r0, [sp, #40]	; 0x28
   35438:	str	r8, [fp, #-1060]	; 0xfffffbdc
   3543c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   35440:	ldr	r0, [sp, #44]	; 0x2c
   35444:	str	r0, [fp, #-1068]	; 0xfffffbd4
   35448:	ldr	r0, [sp, #48]	; 0x30
   3544c:	str	r0, [fp, #-1072]	; 0xfffffbd0
   35450:	ldr	r0, [sp, #52]	; 0x34
   35454:	str	r0, [fp, #-1076]	; 0xfffffbcc
   35458:	ldr	r0, [sp, #56]	; 0x38
   3545c:	str	r0, [fp, #-1080]	; 0xfffffbc8
   35460:	mov	r0, #0
   35464:	str	r0, [r5]
   35468:	str	r0, [r4]
   3546c:	cmp	r6, #1
   35470:	blt	35490 <__assert_fail@plt+0x2405c>
   35474:	sub	lr, fp, #6144	; 0x1800
   35478:	sub	r0, lr, #104	; 0x68
   3547c:	add	r4, r0, #8
   35480:	ldr	r0, [r4], #12
   35484:	bl	138e8 <__assert_fail@plt+0x24b4>
   35488:	subs	r6, r6, #1
   3548c:	bne	35480 <__assert_fail@plt+0x2404c>
   35490:	mov	r0, #0
   35494:	b	354d4 <__assert_fail@plt+0x240a0>
   35498:	mov	r0, #0
   3549c:	str	r0, [r6]
   354a0:	str	r0, [r7]
   354a4:	mov	r6, r5
   354a8:	cmp	r6, #1
   354ac:	bge	35474 <__assert_fail@plt+0x24040>
   354b0:	b	35490 <__assert_fail@plt+0x2405c>
   354b4:	mov	r0, #0
   354b8:	bne	354d4 <__assert_fail@plt+0x240a0>
   354bc:	mov	r0, #4
   354c0:	mov	r1, #256	; 0x100
   354c4:	bl	37f9c <__assert_fail@plt+0x26b68>
   354c8:	cmp	r0, #0
   354cc:	str	r0, [r8, #44]	; 0x2c
   354d0:	movwne	r0, #1
   354d4:	sub	sp, fp, #48	; 0x30
   354d8:	vpop	{d8-d9}
   354dc:	add	sp, sp, #4
   354e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   354e4:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   354e8:	bl	138e8 <__assert_fail@plt+0x24b4>
   354ec:	b	353c8 <__assert_fail@plt+0x23f94>
   354f0:	mov	r1, #512	; 0x200
   354f4:	bl	37f9c <__assert_fail@plt+0x26b68>
   354f8:	ldr	r1, [sp, #12]
   354fc:	cmp	r0, #0
   35500:	str	r0, [r1, #48]	; 0x30
   35504:	beq	353b8 <__assert_fail@plt+0x23f84>
   35508:	sub	lr, fp, #1024	; 0x400
   3550c:	mov	r3, #0
   35510:	add	r8, sp, #168	; 0xa8
   35514:	mov	r5, sl
   35518:	mov	r6, #0
   3551c:	sub	r1, lr, #56	; 0x38
   35520:	sub	lr, fp, #2048	; 0x800
   35524:	sub	ip, r1, #4
   35528:	sub	r1, lr, #56	; 0x38
   3552c:	sub	lr, r1, #4
   35530:	cmp	r5, #0
   35534:	bne	35554 <__assert_fail@plt+0x24120>
   35538:	b	355c0 <__assert_fail@plt+0x2418c>
   3553c:	sub	r1, fp, #3072	; 0xc00
   35540:	add	r8, r8, #4
   35544:	sub	r1, r1, #104	; 0x68
   35548:	ldr	r5, [r1, r6, lsl #2]
   3554c:	cmp	r5, #0
   35550:	beq	355c0 <__assert_fail@plt+0x2418c>
   35554:	lsl	r4, r6, #5
   35558:	mov	r1, #1
   3555c:	tst	r5, #1
   35560:	bne	35580 <__assert_fail@plt+0x2414c>
   35564:	lsr	r2, r5, #1
   35568:	cmp	r3, r5, lsr #1
   3556c:	add	r4, r4, #1
   35570:	lsl	r1, r1, #1
   35574:	mov	r5, r2
   35578:	bne	3555c <__assert_fail@plt+0x24128>
   3557c:	b	355c0 <__assert_fail@plt+0x2418c>
   35580:	mov	r2, r8
   35584:	mov	sl, ip
   35588:	mov	r9, lr
   3558c:	ldr	r7, [r2], #32
   35590:	add	sl, sl, #4
   35594:	add	r9, r9, #4
   35598:	tst	r7, r1
   3559c:	beq	3558c <__assert_fail@plt+0x24158>
   355a0:	ldr	r2, [sl]
   355a4:	mov	r7, r0
   355a8:	str	r2, [r7, r4, lsl #2]!
   355ac:	ldr	r2, [r9]
   355b0:	ldr	r9, [sp, #128]	; 0x80
   355b4:	ldr	sl, [sp, #164]	; 0xa4
   355b8:	str	r2, [r7, #1024]	; 0x400
   355bc:	b	35564 <__assert_fail@plt+0x24130>
   355c0:	add	r6, r6, #1
   355c4:	cmp	r6, #8
   355c8:	bne	3553c <__assert_fail@plt+0x24108>
   355cc:	b	352fc <__assert_fail@plt+0x23ec8>
   355d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   355d4:	add	fp, sp, #28
   355d8:	sub	sp, sp, #52	; 0x34
   355dc:	ldr	r7, [r1, #8]
   355e0:	ldr	r4, [r1, #12]
   355e4:	mov	r5, r0
   355e8:	mov	r0, #1
   355ec:	mov	r9, r1
   355f0:	str	r0, [sp, #44]	; 0x2c
   355f4:	str	r0, [sp, #40]	; 0x28
   355f8:	mov	r0, #4
   355fc:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   35600:	cmp	r0, #0
   35604:	str	r0, [sp, #48]	; 0x30
   35608:	beq	35a5c <__assert_fail@plt+0x24628>
   3560c:	str	r7, [r0]
   35610:	add	r3, sp, #40	; 0x28
   35614:	mov	r0, r5
   35618:	mov	r1, r9
   3561c:	mov	r2, r4
   35620:	str	r5, [sp, #20]
   35624:	bl	35a78 <__assert_fail@plt+0x24644>
   35628:	cmp	r0, #0
   3562c:	bne	35a54 <__assert_fail@plt+0x24620>
   35630:	add	r0, r9, #16
   35634:	mov	r5, r4
   35638:	mov	r1, #0
   3563c:	str	r9, [sp, #12]
   35640:	str	r0, [sp, #16]
   35644:	cmp	r5, #1
   35648:	bge	35678 <__assert_fail@plt+0x24244>
   3564c:	b	35a14 <__assert_fail@plt+0x245e0>
   35650:	mov	r0, r7
   35654:	mov	r1, r9
   35658:	mov	r2, r5
   3565c:	add	r3, sp, #40	; 0x28
   35660:	bl	35a78 <__assert_fail@plt+0x24644>
   35664:	ldr	r1, [sp, #8]
   35668:	cmp	r0, #0
   3566c:	bne	35a54 <__assert_fail@plt+0x24620>
   35670:	cmp	r5, #1
   35674:	blt	35a14 <__assert_fail@plt+0x245e0>
   35678:	ldr	r0, [r9]
   3567c:	ldr	r7, [sp, #20]
   35680:	ldr	r2, [r0, r5, lsl #2]
   35684:	cmp	r2, #0
   35688:	mov	r2, #0
   3568c:	addeq	r2, r1, #1
   35690:	ldr	r1, [r7, #120]	; 0x78
   35694:	cmp	r2, r1
   35698:	bgt	35a1c <__assert_fail@plt+0x245e8>
   3569c:	mov	r0, #0
   356a0:	str	r5, [sp, #24]
   356a4:	sub	r5, r5, #1
   356a8:	str	r2, [sp, #8]
   356ac:	str	r0, [sp, #44]	; 0x2c
   356b0:	ldr	r0, [r7, #100]	; 0x64
   356b4:	ldr	r1, [r0, r5, lsl #2]
   356b8:	cmp	r1, #0
   356bc:	beq	35650 <__assert_fail@plt+0x2421c>
   356c0:	ldr	r0, [r1, #20]
   356c4:	cmp	r0, #1
   356c8:	blt	35650 <__assert_fail@plt+0x2421c>
   356cc:	ldr	r6, [r7, #84]	; 0x54
   356d0:	mov	r8, #0
   356d4:	str	r5, [sp, #28]
   356d8:	str	r1, [sp, #36]	; 0x24
   356dc:	str	r6, [sp, #32]
   356e0:	b	35724 <__assert_fail@plt+0x242f0>
   356e4:	ldr	r2, [sp, #40]	; 0x28
   356e8:	cmp	r2, #0
   356ec:	beq	358e4 <__assert_fail@plt+0x244b0>
   356f0:	ldr	r1, [sp, #44]	; 0x2c
   356f4:	cmp	r1, #0
   356f8:	bne	3590c <__assert_fail@plt+0x244d8>
   356fc:	ldr	r0, [sp, #48]	; 0x30
   35700:	str	sl, [r0]
   35704:	ldr	r0, [sp, #44]	; 0x2c
   35708:	add	r0, r0, #1
   3570c:	str	r0, [sp, #44]	; 0x2c
   35710:	ldr	r1, [sp, #36]	; 0x24
   35714:	add	r8, r8, #1
   35718:	ldr	r0, [r1, #20]
   3571c:	cmp	r8, r0
   35720:	bge	35650 <__assert_fail@plt+0x2421c>
   35724:	ldr	r0, [r1, #24]
   35728:	ldr	sl, [r0, r8, lsl #2]
   3572c:	ldr	r0, [r6]
   35730:	add	r0, r0, sl, lsl #3
   35734:	ldrb	r0, [r0, #6]
   35738:	tst	r0, #16
   3573c:	bne	357dc <__assert_fail@plt+0x243a8>
   35740:	ldr	r0, [r6]
   35744:	mov	r2, r5
   35748:	add	r1, r0, sl, lsl #3
   3574c:	mov	r0, r7
   35750:	bl	3428c <__assert_fail@plt+0x22e58>
   35754:	cmp	r0, #0
   35758:	beq	35710 <__assert_fail@plt+0x242dc>
   3575c:	ldr	r0, [r9]
   35760:	ldr	r1, [sp, #24]
   35764:	ldr	r0, [r0, r1, lsl #2]
   35768:	cmp	r0, #0
   3576c:	beq	35710 <__assert_fail@plt+0x242dc>
   35770:	ldr	r2, [r0, #8]
   35774:	cmp	r2, #1
   35778:	blt	35710 <__assert_fail@plt+0x242dc>
   3577c:	ldr	r1, [r6, #12]
   35780:	ldr	r0, [r0, #12]
   35784:	subs	r3, r2, #1
   35788:	mov	r2, #0
   3578c:	ldr	r1, [r1, sl, lsl #2]
   35790:	beq	357b8 <__assert_fail@plt+0x24384>
   35794:	mov	r4, #1
   35798:	add	r7, r2, r3
   3579c:	lsr	r6, r7, #1
   357a0:	ldr	r5, [r0, r6, lsl #2]
   357a4:	cmp	r5, r1
   357a8:	addlt	r2, r4, r7, lsr #1
   357ac:	movge	r3, r6
   357b0:	cmp	r2, r3
   357b4:	bcc	35798 <__assert_fail@plt+0x24364>
   357b8:	ldr	r2, [r0, r2, lsl #2]
   357bc:	ldr	r9, [sp, #12]
   357c0:	ldr	r7, [sp, #20]
   357c4:	ldr	r5, [sp, #28]
   357c8:	ldr	r6, [sp, #32]
   357cc:	mov	r0, #1
   357d0:	cmp	r2, r1
   357d4:	bne	35710 <__assert_fail@plt+0x242dc>
   357d8:	b	358ac <__assert_fail@plt+0x24478>
   357dc:	ldr	r4, [r7, #84]	; 0x54
   357e0:	ldr	r6, [r9, #12]
   357e4:	mov	r1, sl
   357e8:	mov	r2, r7
   357ec:	mov	r3, r5
   357f0:	mov	r0, r4
   357f4:	bl	33f28 <__assert_fail@plt+0x22af4>
   357f8:	cmp	r0, #1
   357fc:	blt	35818 <__assert_fail@plt+0x243e4>
   35800:	add	r1, r0, r5
   35804:	cmp	r1, r6
   35808:	ble	35828 <__assert_fail@plt+0x243f4>
   3580c:	ldr	r5, [sp, #28]
   35810:	ldr	r6, [sp, #32]
   35814:	b	358ac <__assert_fail@plt+0x24478>
   35818:	ldr	r6, [sp, #32]
   3581c:	cmp	r0, #0
   35820:	bne	358ac <__assert_fail@plt+0x24478>
   35824:	b	35740 <__assert_fail@plt+0x2430c>
   35828:	ldr	r2, [r9]
   3582c:	ldr	r5, [sp, #28]
   35830:	ldr	r6, [sp, #32]
   35834:	ldr	r2, [r2, r1, lsl #2]
   35838:	cmp	r2, #0
   3583c:	beq	35740 <__assert_fail@plt+0x2430c>
   35840:	ldr	r3, [r2, #8]
   35844:	cmp	r3, #1
   35848:	blt	35740 <__assert_fail@plt+0x2430c>
   3584c:	ldr	r1, [r4, #12]
   35850:	ldr	r2, [r2, #12]
   35854:	subs	r4, r3, #1
   35858:	mov	r3, #0
   3585c:	ldr	r1, [r1, sl, lsl #2]
   35860:	beq	35888 <__assert_fail@plt+0x24454>
   35864:	mov	ip, #1
   35868:	add	r5, r3, r4
   3586c:	lsr	r6, r5, #1
   35870:	ldr	r7, [r2, r6, lsl #2]
   35874:	cmp	r7, r1
   35878:	addlt	r3, ip, r5, lsr #1
   3587c:	movge	r4, r6
   35880:	cmp	r3, r4
   35884:	bcc	35868 <__assert_fail@plt+0x24434>
   35888:	ldr	r9, [sp, #12]
   3588c:	ldr	r7, [sp, #20]
   35890:	ldr	r5, [sp, #28]
   35894:	ldr	r6, [sp, #32]
   35898:	cmp	r0, #0
   3589c:	beq	35740 <__assert_fail@plt+0x2430c>
   358a0:	ldr	r2, [r2, r3, lsl #2]
   358a4:	cmp	r2, r1
   358a8:	bne	35740 <__assert_fail@plt+0x2430c>
   358ac:	ldr	r1, [r9, #20]
   358b0:	cmp	r1, #0
   358b4:	beq	356e4 <__assert_fail@plt+0x242b0>
   358b8:	ldr	r1, [r6, #12]
   358bc:	add	r3, r0, r5
   358c0:	mov	r0, r7
   358c4:	ldr	r2, [r1, sl, lsl #2]
   358c8:	ldr	r1, [sp, #16]
   358cc:	str	sl, [sp]
   358d0:	str	r5, [sp, #4]
   358d4:	bl	36c1c <__assert_fail@plt+0x257e8>
   358d8:	cmp	r0, #0
   358dc:	beq	356e4 <__assert_fail@plt+0x242b0>
   358e0:	b	35710 <__assert_fail@plt+0x242dc>
   358e4:	mov	r0, #1
   358e8:	str	r0, [sp, #44]	; 0x2c
   358ec:	str	r0, [sp, #40]	; 0x28
   358f0:	mov	r0, #4
   358f4:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   358f8:	cmp	r0, #0
   358fc:	str	r0, [sp, #48]	; 0x30
   35900:	beq	35a40 <__assert_fail@plt+0x2460c>
   35904:	str	sl, [r0]
   35908:	b	35710 <__assert_fail@plt+0x242dc>
   3590c:	cmp	r2, r1
   35910:	bne	3593c <__assert_fail@plt+0x24508>
   35914:	lsl	r0, r2, #1
   35918:	lsl	r1, r2, #3
   3591c:	str	r0, [sp, #40]	; 0x28
   35920:	ldr	r0, [sp, #48]	; 0x30
   35924:	bl	38020 <__assert_fail@plt+0x26bec>
   35928:	cmp	r0, #0
   3592c:	beq	35a70 <__assert_fail@plt+0x2463c>
   35930:	str	r0, [sp, #48]	; 0x30
   35934:	ldr	r1, [sp, #44]	; 0x2c
   35938:	b	35940 <__assert_fail@plt+0x2450c>
   3593c:	ldr	r0, [sp, #48]	; 0x30
   35940:	ldr	r2, [r0]
   35944:	cmp	r2, sl
   35948:	ble	35994 <__assert_fail@plt+0x24560>
   3594c:	cmp	r1, #1
   35950:	blt	35a0c <__assert_fail@plt+0x245d8>
   35954:	ands	r3, r1, #3
   35958:	sub	r2, r1, #1
   3595c:	beq	35980 <__assert_fail@plt+0x2454c>
   35960:	add	r4, r0, r1, lsl #2
   35964:	mov	r5, r4
   35968:	ldr	r7, [r5, #-4]!
   3596c:	subs	r3, r3, #1
   35970:	sub	r1, r1, #1
   35974:	str	r7, [r4]
   35978:	mov	r4, r5
   3597c:	bne	35968 <__assert_fail@plt+0x24534>
   35980:	cmp	r2, #3
   35984:	bcs	359c8 <__assert_fail@plt+0x24594>
   35988:	ldr	r7, [sp, #20]
   3598c:	ldr	r5, [sp, #28]
   35990:	b	35a08 <__assert_fail@plt+0x245d4>
   35994:	add	r2, r0, r1, lsl #2
   35998:	ldr	r3, [r2, #-4]
   3599c:	cmp	r3, sl
   359a0:	ble	35a0c <__assert_fail@plt+0x245d8>
   359a4:	sub	r1, r1, #2
   359a8:	str	r3, [r2]
   359ac:	sub	r1, r1, #1
   359b0:	ldr	r3, [r2, #-8]
   359b4:	sub	r2, r2, #4
   359b8:	cmp	r3, sl
   359bc:	bgt	359a8 <__assert_fail@plt+0x24574>
   359c0:	add	r1, r1, #2
   359c4:	b	35a0c <__assert_fail@plt+0x245d8>
   359c8:	add	r2, r0, r1, lsl #2
   359cc:	sub	r2, r2, #8
   359d0:	ldr	r6, [r2]
   359d4:	ldr	r5, [r2, #4]
   359d8:	ldmdb	r2, {r3, r7}
   359dc:	sub	r1, r1, #4
   359e0:	cmp	r1, #0
   359e4:	stmda	r2, {r3, r7}
   359e8:	str	r6, [r2, #4]
   359ec:	str	r5, [r2, #8]
   359f0:	sub	r2, r2, #16
   359f4:	bgt	359d0 <__assert_fail@plt+0x2459c>
   359f8:	ldr	r9, [sp, #12]
   359fc:	ldr	r7, [sp, #20]
   35a00:	ldr	r5, [sp, #28]
   35a04:	ldr	r6, [sp, #32]
   35a08:	mov	r1, #0
   35a0c:	str	sl, [r0, r1, lsl #2]
   35a10:	b	35704 <__assert_fail@plt+0x242d0>
   35a14:	mov	r7, #0
   35a18:	b	35a2c <__assert_fail@plt+0x245f8>
   35a1c:	lsl	r2, r5, #2
   35a20:	mov	r1, #0
   35a24:	mov	r7, #0
   35a28:	bl	11368 <memset@plt>
   35a2c:	ldr	r0, [sp, #48]	; 0x30
   35a30:	bl	138e8 <__assert_fail@plt+0x24b4>
   35a34:	mov	r0, r7
   35a38:	sub	sp, fp, #28
   35a3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35a40:	mov	r0, #0
   35a44:	mov	r7, #12
   35a48:	str	r0, [sp, #40]	; 0x28
   35a4c:	str	r0, [sp, #44]	; 0x2c
   35a50:	b	35a2c <__assert_fail@plt+0x245f8>
   35a54:	mov	r7, r0
   35a58:	b	35a2c <__assert_fail@plt+0x245f8>
   35a5c:	mov	r0, #0
   35a60:	mov	r7, #12
   35a64:	str	r0, [sp, #40]	; 0x28
   35a68:	str	r0, [sp, #44]	; 0x2c
   35a6c:	b	35a34 <__assert_fail@plt+0x24600>
   35a70:	mov	r7, #12
   35a74:	b	35a2c <__assert_fail@plt+0x245f8>
   35a78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35a7c:	add	fp, sp, #28
   35a80:	sub	sp, sp, #132	; 0x84
   35a84:	mov	r6, r0
   35a88:	ldr	r8, [r0, #84]	; 0x54
   35a8c:	mov	r0, #0
   35a90:	mov	sl, r1
   35a94:	mov	r5, r2
   35a98:	str	r2, [sp, #76]	; 0x4c
   35a9c:	str	r0, [fp, #-76]	; 0xffffffb4
   35aa0:	str	r6, [sp, #52]	; 0x34
   35aa4:	ldr	r1, [r6, #100]	; 0x64
   35aa8:	ldr	r7, [r1, r2, lsl #2]
   35aac:	ldr	r1, [r3, #4]
   35ab0:	cmp	r7, #0
   35ab4:	mov	r9, r7
   35ab8:	addne	r9, r9, #4
   35abc:	cmp	r1, #0
   35ac0:	beq	35e84 <__assert_fail@plt+0x24a50>
   35ac4:	mov	lr, r3
   35ac8:	cmp	r7, #0
   35acc:	beq	35eac <__assert_fail@plt+0x24a78>
   35ad0:	mov	r0, #0
   35ad4:	mov	r1, r8
   35ad8:	mov	r2, lr
   35adc:	str	r8, [sp, #80]	; 0x50
   35ae0:	str	lr, [sp, #60]	; 0x3c
   35ae4:	str	r0, [fp, #-72]	; 0xffffffb8
   35ae8:	sub	r0, fp, #72	; 0x48
   35aec:	bl	33c10 <__assert_fail@plt+0x227dc>
   35af0:	ldr	r8, [fp, #-72]	; 0xffffffb8
   35af4:	cmp	r8, #0
   35af8:	bne	36674 <__assert_fail@plt+0x25240>
   35afc:	mov	r5, r0
   35b00:	mov	r4, r0
   35b04:	ldr	r2, [sp, #60]	; 0x3c
   35b08:	ldr	r0, [r5, #28]!
   35b0c:	cmp	r0, #0
   35b10:	bne	35bb0 <__assert_fail@plt+0x2477c>
   35b14:	ldr	r0, [r2, #4]
   35b18:	mov	r1, #0
   35b1c:	str	r0, [r4, #28]
   35b20:	lsl	r0, r0, #2
   35b24:	str	r1, [r4, #32]
   35b28:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   35b2c:	cmp	r0, #0
   35b30:	mov	r1, #12
   35b34:	mov	r8, #12
   35b38:	str	r0, [r4, #36]	; 0x24
   35b3c:	movne	r1, #0
   35b40:	cmp	r0, #0
   35b44:	str	r1, [fp, #-72]	; 0xffffffb8
   35b48:	beq	36674 <__assert_fail@plt+0x25240>
   35b4c:	ldr	r2, [sp, #60]	; 0x3c
   35b50:	ldr	r0, [r2, #4]
   35b54:	cmp	r0, #1
   35b58:	blt	35bb0 <__assert_fail@plt+0x2477c>
   35b5c:	str	r9, [sp, #72]	; 0x48
   35b60:	mov	r4, #0
   35b64:	ldr	r0, [r2, #8]
   35b68:	ldr	r1, [sp, #80]	; 0x50
   35b6c:	mov	r9, r2
   35b70:	ldr	r0, [r0, r4, lsl #2]
   35b74:	ldr	r1, [r1, #28]
   35b78:	add	r0, r0, r0, lsl #1
   35b7c:	add	r1, r1, r0, lsl #2
   35b80:	mov	r0, r5
   35b84:	bl	30358 <__assert_fail@plt+0x1ef24>
   35b88:	cmp	r0, #0
   35b8c:	bne	36670 <__assert_fail@plt+0x2523c>
   35b90:	ldr	r0, [r9, #4]
   35b94:	add	r4, r4, #1
   35b98:	mov	r2, r9
   35b9c:	cmp	r4, r0
   35ba0:	blt	35b64 <__assert_fail@plt+0x24730>
   35ba4:	ldr	r9, [sp, #72]	; 0x48
   35ba8:	mov	r0, #0
   35bac:	str	r0, [fp, #-72]	; 0xffffffb8
   35bb0:	mov	r0, r2
   35bb4:	mov	r1, r9
   35bb8:	mov	r2, r5
   35bbc:	bl	366b4 <__assert_fail@plt+0x25280>
   35bc0:	cmp	r0, #0
   35bc4:	str	r0, [fp, #-76]	; 0xffffffb4
   35bc8:	bne	36684 <__assert_fail@plt+0x25250>
   35bcc:	ldr	r0, [sl, #20]
   35bd0:	ldr	r5, [sp, #76]	; 0x4c
   35bd4:	ldr	lr, [sp, #60]	; 0x3c
   35bd8:	ldr	r8, [sp, #80]	; 0x50
   35bdc:	cmp	r0, #0
   35be0:	beq	35eac <__assert_fail@plt+0x24a78>
   35be4:	cmp	r0, #1
   35be8:	str	r7, [sp, #48]	; 0x30
   35bec:	str	r9, [sp, #72]	; 0x48
   35bf0:	blt	35e98 <__assert_fail@plt+0x24a64>
   35bf4:	ldr	r0, [sp, #52]	; 0x34
   35bf8:	mov	r9, #0
   35bfc:	str	sl, [sp, #64]	; 0x40
   35c00:	ldr	r0, [r0, #116]	; 0x74
   35c04:	str	r0, [sp, #68]	; 0x44
   35c08:	b	35c20 <__assert_fail@plt+0x247ec>
   35c0c:	ldr	sl, [sp, #64]	; 0x40
   35c10:	add	r9, r9, #1
   35c14:	ldr	r0, [sl, #20]
   35c18:	cmp	r9, r0
   35c1c:	bge	35e98 <__assert_fail@plt+0x24a64>
   35c20:	ldr	r0, [sl, #24]
   35c24:	ldr	r1, [sp, #68]	; 0x44
   35c28:	ldr	r0, [r0, r9, lsl #2]
   35c2c:	add	r0, r0, r0, lsl #1
   35c30:	add	r1, r1, r0, lsl #3
   35c34:	ldr	r2, [r1, #8]
   35c38:	cmp	r2, r5
   35c3c:	bge	35c0c <__assert_fail@plt+0x247d8>
   35c40:	ldr	r1, [r1, #4]
   35c44:	cmp	r1, r5
   35c48:	blt	35c0c <__assert_fail@plt+0x247d8>
   35c4c:	ldr	r1, [sp, #68]	; 0x44
   35c50:	ldr	r2, [r8]
   35c54:	ldr	r0, [r1, r0, lsl #3]!
   35c58:	ldr	r1, [r1, #12]
   35c5c:	ldr	r4, [r2, r0, lsl #3]
   35c60:	ldr	r0, [lr, #4]
   35c64:	cmp	r1, r5
   35c68:	bne	35cc8 <__assert_fail@plt+0x24894>
   35c6c:	cmp	r0, #1
   35c70:	blt	35c0c <__assert_fail@plt+0x247d8>
   35c74:	ldr	r3, [lr, #8]
   35c78:	mvn	sl, #0
   35c7c:	mvn	r1, #0
   35c80:	b	35c9c <__assert_fail@plt+0x24868>
   35c84:	ldr	r6, [r2, r7, lsl #3]
   35c88:	cmp	r4, r6
   35c8c:	moveq	sl, r7
   35c90:	add	r3, r3, #4
   35c94:	subs	r0, r0, #1
   35c98:	beq	35d38 <__assert_fail@plt+0x24904>
   35c9c:	ldr	r7, [r3]
   35ca0:	add	r6, r2, r7, lsl #3
   35ca4:	ldrb	r6, [r6, #4]
   35ca8:	cmp	r6, #9
   35cac:	beq	35c84 <__assert_fail@plt+0x24850>
   35cb0:	cmp	r6, #8
   35cb4:	bne	35c90 <__assert_fail@plt+0x2485c>
   35cb8:	ldr	r6, [r2, r7, lsl #3]
   35cbc:	cmp	r4, r6
   35cc0:	moveq	r1, r7
   35cc4:	b	35c90 <__assert_fail@plt+0x2485c>
   35cc8:	cmp	r0, #1
   35ccc:	blt	35c0c <__assert_fail@plt+0x247d8>
   35cd0:	mov	r7, #0
   35cd4:	ldr	r1, [lr, #8]
   35cd8:	ldr	r1, [r1, r7, lsl #2]
   35cdc:	add	r3, r2, r1, lsl #3
   35ce0:	ldrb	r3, [r3, #4]
   35ce4:	orr	r3, r3, #1
   35ce8:	cmp	r3, #9
   35cec:	bne	35d24 <__assert_fail@plt+0x248f0>
   35cf0:	ldr	r2, [r2, r1, lsl #3]
   35cf4:	cmp	r4, r2
   35cf8:	bne	35d24 <__assert_fail@plt+0x248f0>
   35cfc:	ldr	r3, [sp, #72]	; 0x48
   35d00:	mov	r0, r8
   35d04:	mov	r2, lr
   35d08:	mov	r6, lr
   35d0c:	bl	36894 <__assert_fail@plt+0x25460>
   35d10:	cmp	r0, #0
   35d14:	bne	36630 <__assert_fail@plt+0x251fc>
   35d18:	ldr	r0, [r6, #4]
   35d1c:	ldr	r8, [sp, #80]	; 0x50
   35d20:	mov	lr, r6
   35d24:	add	r7, r7, #1
   35d28:	cmp	r7, r0
   35d2c:	bge	35c0c <__assert_fail@plt+0x247d8>
   35d30:	ldr	r2, [r8]
   35d34:	b	35cd4 <__assert_fail@plt+0x248a0>
   35d38:	cmp	r1, #0
   35d3c:	bmi	35d5c <__assert_fail@plt+0x24928>
   35d40:	ldr	r0, [sp, #80]	; 0x50
   35d44:	ldr	r3, [sp, #72]	; 0x48
   35d48:	mov	r2, lr
   35d4c:	bl	36894 <__assert_fail@plt+0x25460>
   35d50:	ldr	lr, [sp, #60]	; 0x3c
   35d54:	cmp	r0, #0
   35d58:	bne	36630 <__assert_fail@plt+0x251fc>
   35d5c:	ldr	r8, [sp, #80]	; 0x50
   35d60:	cmp	sl, #0
   35d64:	bmi	35c0c <__assert_fail@plt+0x247d8>
   35d68:	ldr	ip, [lr, #4]
   35d6c:	cmp	ip, #1
   35d70:	blt	35c0c <__assert_fail@plt+0x247d8>
   35d74:	mov	r4, #0
   35d78:	b	35d8c <__assert_fail@plt+0x24958>
   35d7c:	ldr	lr, [sp, #60]	; 0x3c
   35d80:	add	r4, r4, #1
   35d84:	cmp	r4, ip
   35d88:	bge	35c0c <__assert_fail@plt+0x247d8>
   35d8c:	ldr	r0, [lr, #8]
   35d90:	ldr	r1, [r0, r4, lsl #2]
   35d94:	ldr	r0, [r8, #28]
   35d98:	add	lr, r1, r1, lsl #1
   35d9c:	add	r3, r0, lr, lsl #2
   35da0:	ldr	r0, [r3, #4]
   35da4:	cmp	r0, #1
   35da8:	blt	35df8 <__assert_fail@plt+0x249c4>
   35dac:	ldr	r3, [r3, #8]
   35db0:	mov	r7, #0
   35db4:	subs	r0, r0, #1
   35db8:	str	ip, [sp, #56]	; 0x38
   35dbc:	beq	35de4 <__assert_fail@plt+0x249b0>
   35dc0:	add	r6, r7, r0
   35dc4:	mov	ip, #1
   35dc8:	lsr	r5, r6, #1
   35dcc:	ldr	r2, [r3, r5, lsl #2]
   35dd0:	cmp	r2, sl
   35dd4:	addlt	r7, ip, r6, lsr #1
   35dd8:	movge	r0, r5
   35ddc:	cmp	r7, r0
   35de0:	bcc	35dc0 <__assert_fail@plt+0x2498c>
   35de4:	ldr	r0, [r3, r7, lsl #2]
   35de8:	ldr	r5, [sp, #76]	; 0x4c
   35dec:	ldr	ip, [sp, #56]	; 0x38
   35df0:	cmp	r0, sl
   35df4:	beq	35d7c <__assert_fail@plt+0x24948>
   35df8:	ldr	r0, [r8, #24]
   35dfc:	add	r2, r0, lr, lsl #2
   35e00:	ldr	lr, [sp, #60]	; 0x3c
   35e04:	ldr	r0, [r2, #4]
   35e08:	cmp	r0, #1
   35e0c:	blt	35e54 <__assert_fail@plt+0x24a20>
   35e10:	ldr	r2, [r2, #8]
   35e14:	mov	r3, #0
   35e18:	subs	r0, r0, #1
   35e1c:	beq	35e44 <__assert_fail@plt+0x24a10>
   35e20:	add	r7, r3, r0
   35e24:	lsr	r6, r7, #1
   35e28:	ldr	r5, [r2, r6, lsl #2]
   35e2c:	cmp	r5, sl
   35e30:	movge	r0, r6
   35e34:	mov	r6, #1
   35e38:	addlt	r3, r6, r7, lsr #1
   35e3c:	cmp	r3, r0
   35e40:	bcc	35e20 <__assert_fail@plt+0x249ec>
   35e44:	ldr	r0, [r2, r3, lsl #2]
   35e48:	ldr	r5, [sp, #76]	; 0x4c
   35e4c:	cmp	r0, sl
   35e50:	beq	35d80 <__assert_fail@plt+0x2494c>
   35e54:	ldr	r3, [sp, #72]	; 0x48
   35e58:	mov	r0, r8
   35e5c:	mov	r2, lr
   35e60:	mov	r6, lr
   35e64:	bl	36894 <__assert_fail@plt+0x25460>
   35e68:	cmp	r0, #0
   35e6c:	bne	36630 <__assert_fail@plt+0x251fc>
   35e70:	ldr	ip, [r6, #4]
   35e74:	ldr	r8, [sp, #80]	; 0x50
   35e78:	sub	r4, r4, #1
   35e7c:	mov	lr, r6
   35e80:	b	35d80 <__assert_fail@plt+0x2494c>
   35e84:	ldr	r1, [sl]
   35e88:	str	r0, [r1, r5, lsl #2]
   35e8c:	cmp	r7, #0
   35e90:	bne	35ed8 <__assert_fail@plt+0x24aa4>
   35e94:	b	36620 <__assert_fail@plt+0x251ec>
   35e98:	ldr	r6, [sp, #52]	; 0x34
   35e9c:	ldr	r9, [sp, #72]	; 0x48
   35ea0:	ldr	r7, [sp, #48]	; 0x30
   35ea4:	mov	r0, #0
   35ea8:	str	r0, [fp, #-76]	; 0xffffffb4
   35eac:	sub	r0, fp, #76	; 0x4c
   35eb0:	mov	r1, r8
   35eb4:	mov	r2, lr
   35eb8:	bl	33c10 <__assert_fail@plt+0x227dc>
   35ebc:	ldr	r1, [sl]
   35ec0:	str	r0, [r1, r5, lsl #2]
   35ec4:	ldr	r8, [fp, #-76]	; 0xffffffb4
   35ec8:	cmp	r8, #0
   35ecc:	bne	36624 <__assert_fail@plt+0x251f0>
   35ed0:	cmp	r7, #0
   35ed4:	beq	36620 <__assert_fail@plt+0x251ec>
   35ed8:	ldr	r0, [r6, #100]	; 0x64
   35edc:	ldr	r0, [r0, r5, lsl #2]
   35ee0:	ldrb	r0, [r0, #52]	; 0x34
   35ee4:	tst	r0, #64	; 0x40
   35ee8:	beq	36620 <__assert_fail@plt+0x251ec>
   35eec:	ldr	r0, [r6, #108]	; 0x6c
   35ef0:	ldr	ip, [r6, #84]	; 0x54
   35ef4:	cmp	r0, #1
   35ef8:	blt	3660c <__assert_fail@plt+0x251d8>
   35efc:	ldr	r1, [r6, #116]	; 0x74
   35f00:	mov	lr, #0
   35f04:	mov	r2, #1
   35f08:	mov	r3, r0
   35f0c:	add	r7, r3, lr
   35f10:	add	r7, r7, r7, lsr #31
   35f14:	asr	r6, r7, #1
   35f18:	add	r4, r6, r6, lsl #1
   35f1c:	add	r4, r1, r4, lsl #3
   35f20:	ldr	r4, [r4, #4]
   35f24:	cmp	r4, r5
   35f28:	addlt	lr, r2, r7, asr #1
   35f2c:	movge	r3, r6
   35f30:	cmp	lr, r3
   35f34:	blt	35f0c <__assert_fail@plt+0x24ad8>
   35f38:	cmp	lr, r0
   35f3c:	bge	36618 <__assert_fail@plt+0x251e4>
   35f40:	cmn	lr, #1
   35f44:	beq	36618 <__assert_fail@plt+0x251e4>
   35f48:	ldr	r0, [sp, #52]	; 0x34
   35f4c:	add	r1, lr, lr, lsl #1
   35f50:	str	r1, [sp, #28]
   35f54:	ldr	r0, [r0, #116]	; 0x74
   35f58:	add	r0, r0, r1, lsl #3
   35f5c:	ldr	r0, [r0, #4]
   35f60:	cmp	r0, r5
   35f64:	bne	36618 <__assert_fail@plt+0x251e4>
   35f68:	mov	r1, #0
   35f6c:	ldr	r4, [sp, #52]	; 0x34
   35f70:	str	r1, [fp, #-72]	; 0xffffffb8
   35f74:	ldr	r0, [r9, #4]
   35f78:	cmp	r0, #0
   35f7c:	ble	3663c <__assert_fail@plt+0x25208>
   35f80:	add	r0, r5, #1
   35f84:	mov	r2, #0
   35f88:	mov	r3, ip
   35f8c:	str	ip, [sp, #80]	; 0x50
   35f90:	str	sl, [sp, #64]	; 0x40
   35f94:	str	r9, [sp, #72]	; 0x48
   35f98:	str	lr, [sp, #56]	; 0x38
   35f9c:	str	r0, [sp, #12]
   35fa0:	sub	r0, fp, #72	; 0x48
   35fa4:	add	r0, r0, #16
   35fa8:	str	r0, [sp, #8]
   35fac:	add	r0, sl, #16
   35fb0:	str	r0, [sp, #36]	; 0x24
   35fb4:	mov	r0, #0
   35fb8:	str	r0, [sp, #40]	; 0x28
   35fbc:	b	35fd8 <__assert_fail@plt+0x24ba4>
   35fc0:	ldr	r9, [sp, #72]	; 0x48
   35fc4:	ldr	r2, [sp, #48]	; 0x30
   35fc8:	ldr	r0, [r9, #4]
   35fcc:	add	r2, r2, #1
   35fd0:	cmp	r2, r0
   35fd4:	bge	36644 <__assert_fail@plt+0x25210>
   35fd8:	ldr	r0, [r9, #8]
   35fdc:	ldr	r1, [sl, #8]
   35fe0:	str	r2, [sp, #48]	; 0x30
   35fe4:	ldr	r7, [r0, r2, lsl #2]
   35fe8:	ldr	r0, [r3]
   35fec:	add	r0, r0, r7, lsl #3
   35ff0:	cmp	r7, r1
   35ff4:	ldrb	r0, [r0, #4]
   35ff8:	bne	36014 <__assert_fail@plt+0x24be0>
   35ffc:	cmp	r0, #4
   36000:	bne	35fc0 <__assert_fail@plt+0x24b8c>
   36004:	ldr	r0, [sl, #12]
   36008:	cmp	r0, r5
   3600c:	bne	3601c <__assert_fail@plt+0x24be8>
   36010:	b	35fc0 <__assert_fail@plt+0x24b8c>
   36014:	cmp	r0, #4
   36018:	bne	35fc0 <__assert_fail@plt+0x24b8c>
   3601c:	ldr	r0, [r4, #116]	; 0x74
   36020:	ldr	r1, [sp, #28]
   36024:	mov	r9, lr
   36028:	str	r7, [sp, #60]	; 0x3c
   3602c:	add	r6, r0, r1, lsl #3
   36030:	ldr	r0, [r6]
   36034:	cmp	r0, r7
   36038:	bne	36128 <__assert_fail@plt+0x24cf4>
   3603c:	ldr	r0, [r6, #8]
   36040:	ldr	r1, [r6, #12]
   36044:	subs	r0, r1, r0
   36048:	add	ip, r0, r5
   3604c:	beq	3605c <__assert_fail@plt+0x24c28>
   36050:	ldr	r1, [r3, #12]
   36054:	add	r1, r1, r7, lsl #2
   36058:	b	3606c <__assert_fail@plt+0x24c38>
   3605c:	ldr	r1, [r3, #20]
   36060:	add	r2, r7, r7, lsl #1
   36064:	add	r1, r1, r2, lsl #2
   36068:	ldr	r1, [r1, #8]
   3606c:	ldr	r2, [sl, #12]
   36070:	cmp	ip, r2
   36074:	bgt	36128 <__assert_fail@plt+0x24cf4>
   36078:	ldr	r2, [sl]
   3607c:	ldr	r2, [r2, ip, lsl #2]
   36080:	cmp	r2, #0
   36084:	beq	36128 <__assert_fail@plt+0x24cf4>
   36088:	ldr	r3, [r2, #8]
   3608c:	cmp	r3, #1
   36090:	blt	36124 <__assert_fail@plt+0x24cf0>
   36094:	ldr	r1, [r1]
   36098:	ldr	r2, [r2, #12]
   3609c:	subs	r7, r3, #1
   360a0:	mov	r3, #0
   360a4:	str	r8, [sp, #68]	; 0x44
   360a8:	beq	360d0 <__assert_fail@plt+0x24c9c>
   360ac:	mov	r8, #1
   360b0:	add	r5, r3, r7
   360b4:	lsr	r4, r5, #1
   360b8:	ldr	r0, [r2, r4, lsl #2]
   360bc:	cmp	r0, r1
   360c0:	addlt	r3, r8, r5, lsr #1
   360c4:	movge	r7, r4
   360c8:	cmp	r3, r7
   360cc:	bcc	360b0 <__assert_fail@plt+0x24c7c>
   360d0:	ldr	r0, [r2, r3, lsl #2]
   360d4:	cmp	r0, r1
   360d8:	bne	36114 <__assert_fail@plt+0x24ce0>
   360dc:	ldr	r4, [sp, #52]	; 0x34
   360e0:	ldr	r7, [sp, #60]	; 0x3c
   360e4:	ldr	r5, [sp, #76]	; 0x4c
   360e8:	stm	sp, {r1, ip}
   360ec:	ldr	r1, [sp, #36]	; 0x24
   360f0:	mov	r0, r4
   360f4:	mov	r2, r7
   360f8:	mov	r3, r5
   360fc:	bl	36c1c <__assert_fail@plt+0x257e8>
   36100:	ldr	r8, [sp, #68]	; 0x44
   36104:	cmp	r0, #0
   36108:	beq	36144 <__assert_fail@plt+0x24d10>
   3610c:	ldr	lr, [sp, #56]	; 0x38
   36110:	b	36124 <__assert_fail@plt+0x24cf0>
   36114:	ldr	r5, [sp, #76]	; 0x4c
   36118:	ldr	r4, [sp, #52]	; 0x34
   3611c:	ldr	r8, [sp, #68]	; 0x44
   36120:	ldr	r7, [sp, #60]	; 0x3c
   36124:	ldr	r3, [sp, #80]	; 0x50
   36128:	mov	r0, r6
   3612c:	add	r6, r0, #24
   36130:	ldrb	r0, [r0, #20]
   36134:	add	r9, r9, #1
   36138:	cmp	r0, #0
   3613c:	bne	36030 <__assert_fail@plt+0x24bfc>
   36140:	b	35fc0 <__assert_fail@plt+0x24b8c>
   36144:	ldr	r0, [sp, #40]	; 0x28
   36148:	ldr	r6, [sp, #44]	; 0x2c
   3614c:	cmp	r0, #0
   36150:	beq	36180 <__assert_fail@plt+0x24d4c>
   36154:	ldr	r0, [sp, #20]
   36158:	str	r5, [fp, #-60]	; 0xffffffc4
   3615c:	str	r7, [fp, #-64]	; 0xffffffc0
   36160:	cmp	r0, #0
   36164:	beq	362e8 <__assert_fail@plt+0x24eb4>
   36168:	cmp	r6, #0
   3616c:	bne	365f4 <__assert_fail@plt+0x251c0>
   36170:	mov	r6, #1
   36174:	str	r9, [r8]
   36178:	str	r8, [sp, #24]
   3617c:	b	3636c <__assert_fail@plt+0x24f38>
   36180:	add	r0, sl, #12
   36184:	mov	r3, #20
   36188:	sub	r2, fp, #72	; 0x48
   3618c:	vld1.32	{d16-d17}, [r0]
   36190:	mov	r0, sl
   36194:	add	r1, r2, #12
   36198:	vld1.32	{d18-d19}, [r0], r3
   3619c:	vst1.32	{d16-d17}, [r1]
   361a0:	mov	r1, r2
   361a4:	vst1.64	{d18-d19}, [r1], r3
   361a8:	ldr	r6, [r0]
   361ac:	mov	r0, #0
   361b0:	cmp	r6, #1
   361b4:	str	r6, [r1]
   361b8:	blt	362d0 <__assert_fail@plt+0x24e9c>
   361bc:	lsl	r0, r6, #2
   361c0:	str	r6, [fp, #-56]	; 0xffffffc8
   361c4:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   361c8:	cmp	r0, #0
   361cc:	str	r0, [fp, #-48]	; 0xffffffd0
   361d0:	beq	3668c <__assert_fail@plt+0x25258>
   361d4:	mov	r4, r0
   361d8:	ldr	r0, [sl, #20]
   361dc:	ldr	r1, [sl, #24]
   361e0:	lsl	r2, r0, #2
   361e4:	mov	r0, r4
   361e8:	bl	111e8 <memcpy@plt>
   361ec:	str	r5, [fp, #-60]	; 0xffffffc4
   361f0:	str	r7, [fp, #-64]	; 0xffffffc0
   361f4:	mov	r8, r4
   361f8:	lsl	r0, r6, #1
   361fc:	lsl	r1, r6, #3
   36200:	str	r0, [sp, #20]
   36204:	str	r0, [fp, #-56]	; 0xffffffc8
   36208:	mov	r0, r4
   3620c:	bl	38020 <__assert_fail@plt+0x26bec>
   36210:	cmp	r0, #0
   36214:	beq	366a8 <__assert_fail@plt+0x25274>
   36218:	mov	r8, r0
   3621c:	mov	r4, r0
   36220:	str	r0, [fp, #-48]	; 0xffffffd0
   36224:	str	r0, [sp, #16]
   36228:	ldr	r0, [r8]
   3622c:	str	r4, [sp, #24]
   36230:	cmp	r0, r9
   36234:	ble	36328 <__assert_fail@plt+0x24ef4>
   36238:	ldr	r4, [sp, #52]	; 0x34
   3623c:	cmp	r6, #1
   36240:	mov	r1, r6
   36244:	blt	36360 <__assert_fail@plt+0x24f2c>
   36248:	ands	r1, r6, #3
   3624c:	sub	r2, r6, #1
   36250:	mov	ip, r6
   36254:	mov	r0, r6
   36258:	beq	36280 <__assert_fail@plt+0x24e4c>
   3625c:	add	r7, r8, ip, lsl #2
   36260:	mov	r0, ip
   36264:	mov	r3, r7
   36268:	ldr	r6, [r3, #-4]!
   3626c:	subs	r1, r1, #1
   36270:	sub	r0, r0, #1
   36274:	str	r6, [r7]
   36278:	mov	r7, r3
   3627c:	bne	36268 <__assert_fail@plt+0x24e34>
   36280:	mov	r1, #0
   36284:	cmp	r2, #3
   36288:	bcc	362c0 <__assert_fail@plt+0x24e8c>
   3628c:	add	r2, r8, r0, lsl #2
   36290:	sub	r2, r2, #8
   36294:	ldr	r6, [r2]
   36298:	ldr	r5, [r2, #4]
   3629c:	ldmdb	r2, {r3, r7}
   362a0:	sub	r0, r0, #4
   362a4:	cmp	r0, #0
   362a8:	stmda	r2, {r3, r7}
   362ac:	str	r6, [r2, #4]
   362b0:	str	r5, [r2, #8]
   362b4:	sub	r2, r2, #16
   362b8:	bgt	36294 <__assert_fail@plt+0x24e60>
   362bc:	ldr	r5, [sp, #76]	; 0x4c
   362c0:	ldr	r4, [sp, #52]	; 0x34
   362c4:	ldr	r7, [sp, #60]	; 0x3c
   362c8:	mov	r6, ip
   362cc:	b	36360 <__assert_fail@plt+0x24f2c>
   362d0:	ldr	r1, [sp, #8]
   362d4:	str	r0, [r1]
   362d8:	str	r0, [r1, #4]
   362dc:	str	r0, [r1, #8]
   362e0:	str	r5, [fp, #-60]	; 0xffffffc4
   362e4:	str	r7, [fp, #-64]	; 0xffffffc0
   362e8:	mov	r0, #1
   362ec:	str	r0, [fp, #-52]	; 0xffffffcc
   362f0:	str	r0, [fp, #-56]	; 0xffffffc8
   362f4:	mov	r0, #4
   362f8:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   362fc:	cmp	r0, #0
   36300:	str	r0, [fp, #-48]	; 0xffffffd0
   36304:	beq	3668c <__assert_fail@plt+0x25258>
   36308:	str	r9, [r0]
   3630c:	str	r0, [sp, #16]
   36310:	str	r0, [sp, #68]	; 0x44
   36314:	str	r0, [sp, #24]
   36318:	mov	r0, #1
   3631c:	mov	r6, #1
   36320:	str	r0, [sp, #20]
   36324:	b	36370 <__assert_fail@plt+0x24f3c>
   36328:	add	r0, r8, r6, lsl #2
   3632c:	ldr	r4, [sp, #52]	; 0x34
   36330:	mov	r1, r6
   36334:	ldr	r2, [r0, #-4]
   36338:	cmp	r2, r9
   3633c:	ble	36360 <__assert_fail@plt+0x24f2c>
   36340:	sub	r1, r6, #2
   36344:	str	r2, [r0]
   36348:	sub	r1, r1, #1
   3634c:	ldr	r2, [r0, #-8]
   36350:	sub	r0, r0, #4
   36354:	cmp	r2, r9
   36358:	bgt	36344 <__assert_fail@plt+0x24f10>
   3635c:	add	r1, r1, #2
   36360:	add	r6, r6, #1
   36364:	str	r9, [r8, r1, lsl #2]
   36368:	str	r8, [sp, #68]	; 0x44
   3636c:	str	r6, [fp, #-52]	; 0xffffffcc
   36370:	ldr	r0, [fp, #-72]	; 0xffffffb8
   36374:	sub	r1, fp, #72	; 0x48
   36378:	str	r6, [sp, #44]	; 0x2c
   3637c:	str	r0, [sp, #40]	; 0x28
   36380:	ldr	r0, [r0, r5, lsl #2]
   36384:	str	r0, [sp, #32]
   36388:	mov	r0, r4
   3638c:	bl	355d0 <__assert_fail@plt+0x2419c>
   36390:	cmp	r0, #0
   36394:	bne	3667c <__assert_fail@plt+0x25248>
   36398:	ldr	r6, [sl, #4]
   3639c:	ldr	lr, [sp, #56]	; 0x38
   363a0:	cmp	r6, #0
   363a4:	beq	36444 <__assert_fail@plt+0x25010>
   363a8:	cmp	r5, #0
   363ac:	bmi	36438 <__assert_fail@plt+0x25004>
   363b0:	ldr	sl, [sp, #40]	; 0x28
   363b4:	ldr	r7, [sp, #12]
   363b8:	b	363d0 <__assert_fail@plt+0x24f9c>
   363bc:	str	r0, [r6]
   363c0:	add	r6, r6, #4
   363c4:	add	sl, sl, #4
   363c8:	subs	r7, r7, #1
   363cc:	beq	36438 <__assert_fail@plt+0x25004>
   363d0:	ldr	r1, [r6]
   363d4:	ldr	r0, [sl]
   363d8:	cmp	r1, #0
   363dc:	beq	363bc <__assert_fail@plt+0x24f88>
   363e0:	cmp	r0, #0
   363e4:	beq	363c0 <__assert_fail@plt+0x24f8c>
   363e8:	sub	r4, fp, #44	; 0x2c
   363ec:	add	r2, r0, #4
   363f0:	add	r1, r1, #4
   363f4:	mov	r0, r4
   363f8:	bl	3257c <__assert_fail@plt+0x21148>
   363fc:	cmp	r0, #0
   36400:	str	r0, [fp, #-32]	; 0xffffffe0
   36404:	bne	3667c <__assert_fail@plt+0x25248>
   36408:	ldr	r1, [sp, #80]	; 0x50
   3640c:	sub	r0, fp, #32
   36410:	mov	r2, r4
   36414:	bl	33c10 <__assert_fail@plt+0x227dc>
   36418:	str	r0, [r6]
   3641c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   36420:	bl	138e8 <__assert_fail@plt+0x24b4>
   36424:	ldr	r8, [fp, #-32]	; 0xffffffe0
   36428:	ldr	lr, [sp, #56]	; 0x38
   3642c:	cmp	r8, #0
   36430:	beq	363c0 <__assert_fail@plt+0x24f8c>
   36434:	b	3664c <__assert_fail@plt+0x25218>
   36438:	ldr	sl, [sp, #64]	; 0x40
   3643c:	ldr	r4, [sp, #52]	; 0x34
   36440:	ldr	r7, [sp, #60]	; 0x3c
   36444:	ldr	r0, [sp, #40]	; 0x28
   36448:	ldr	r1, [sp, #32]
   3644c:	str	r1, [r0, r5, lsl #2]
   36450:	ldr	r0, [sp, #44]	; 0x2c
   36454:	cmp	r0, #1
   36458:	blt	36534 <__assert_fail@plt+0x25100>
   3645c:	ldr	r8, [sp, #68]	; 0x44
   36460:	subs	r0, r0, #1
   36464:	mov	r1, #0
   36468:	beq	36494 <__assert_fail@plt+0x25060>
   3646c:	mov	r2, r0
   36470:	mov	r4, #1
   36474:	add	r3, r1, r2
   36478:	lsr	r7, r3, #1
   3647c:	ldr	r6, [r8, r7, lsl #2]
   36480:	cmp	r6, r9
   36484:	addlt	r1, r4, r3, lsr #1
   36488:	movge	r2, r7
   3648c:	cmp	r1, r2
   36490:	bcc	36474 <__assert_fail@plt+0x25040>
   36494:	ldr	r2, [r8, r1, lsl #2]
   36498:	mov	r7, #1
   3649c:	cmp	r2, r9
   364a0:	mov	r2, r1
   364a4:	mvnne	r2, #0
   364a8:	cmp	r2, #0
   364ac:	bmi	36540 <__assert_fail@plt+0x2510c>
   364b0:	ldr	r3, [sp, #44]	; 0x2c
   364b4:	ldr	r4, [sp, #52]	; 0x34
   364b8:	cmp	r3, r2
   364bc:	ble	3654c <__assert_fail@plt+0x25118>
   364c0:	cmp	r0, r2
   364c4:	str	r0, [fp, #-52]	; 0xffffffcc
   364c8:	ble	3655c <__assert_fail@plt+0x25128>
   364cc:	mvn	r2, r1
   364d0:	add	r2, r3, r2
   364d4:	cmp	r2, #4
   364d8:	bcc	365b4 <__assert_fail@plt+0x25180>
   364dc:	bic	lr, r2, #3
   364e0:	subs	r3, lr, #4
   364e4:	add	r3, r7, r3, lsr #2
   364e8:	and	r7, r3, #1
   364ec:	str	r7, [sp, #32]
   364f0:	beq	36564 <__assert_fail@plt+0x25130>
   364f4:	sub	r7, r7, r3
   364f8:	add	r3, r8, r1, lsl #2
   364fc:	mov	r6, #0
   36500:	mov	ip, #20
   36504:	add	r4, r3, #4
   36508:	adds	r7, r7, #2
   3650c:	add	r6, r6, #8
   36510:	vld1.32	{d16-d17}, [r4]
   36514:	mov	r4, r3
   36518:	vst1.32	{d16-d17}, [r4], ip
   3651c:	vld1.32	{d16-d17}, [r4]
   36520:	add	r4, r3, #16
   36524:	add	r3, r3, #32
   36528:	vst1.32	{d16-d17}, [r4]
   3652c:	bne	36504 <__assert_fail@plt+0x250d0>
   36530:	b	36568 <__assert_fail@plt+0x25134>
   36534:	ldr	r3, [sp, #80]	; 0x50
   36538:	ldr	r8, [sp, #68]	; 0x44
   3653c:	b	365e4 <__assert_fail@plt+0x251b0>
   36540:	ldr	r0, [sp, #16]
   36544:	ldr	r4, [sp, #52]	; 0x34
   36548:	b	36550 <__assert_fail@plt+0x2511c>
   3654c:	ldr	r0, [sp, #16]
   36550:	ldr	r7, [sp, #60]	; 0x3c
   36554:	str	r0, [sp, #24]
   36558:	b	365e0 <__assert_fail@plt+0x251ac>
   3655c:	ldr	r1, [sp, #16]
   36560:	b	3659c <__assert_fail@plt+0x25168>
   36564:	mov	r6, #0
   36568:	ldr	r3, [sp, #32]
   3656c:	cmp	r3, #0
   36570:	beq	36588 <__assert_fail@plt+0x25154>
   36574:	add	r3, r1, r6
   36578:	add	r3, r8, r3, lsl #2
   3657c:	add	r7, r3, #4
   36580:	vld1.32	{d16-d17}, [r7]
   36584:	vst1.32	{d16-d17}, [r3]
   36588:	cmp	r2, lr
   3658c:	bne	365a4 <__assert_fail@plt+0x25170>
   36590:	ldr	r1, [sp, #16]
   36594:	ldr	r4, [sp, #52]	; 0x34
   36598:	ldr	lr, [sp, #56]	; 0x38
   3659c:	ldr	r7, [sp, #60]	; 0x3c
   365a0:	b	365d8 <__assert_fail@plt+0x251a4>
   365a4:	add	r1, r1, lr
   365a8:	ldr	r4, [sp, #52]	; 0x34
   365ac:	ldr	lr, [sp, #56]	; 0x38
   365b0:	ldr	r3, [sp, #44]	; 0x2c
   365b4:	ldr	r7, [sp, #60]	; 0x3c
   365b8:	sub	r2, r3, #1
   365bc:	add	r3, r8, r1, lsl #2
   365c0:	ldr	r3, [r3, #4]
   365c4:	str	r3, [r8, r1, lsl #2]
   365c8:	add	r1, r1, #1
   365cc:	cmp	r2, r1
   365d0:	bne	365bc <__assert_fail@plt+0x25188>
   365d4:	ldr	r1, [sp, #16]
   365d8:	str	r0, [sp, #44]	; 0x2c
   365dc:	str	r1, [sp, #24]
   365e0:	ldr	r3, [sp, #80]	; 0x50
   365e4:	ldr	r0, [r4, #116]	; 0x74
   365e8:	add	r1, r9, r9, lsl #1
   365ec:	add	r0, r0, r1, lsl #3
   365f0:	b	3612c <__assert_fail@plt+0x24cf8>
   365f4:	ldr	r0, [sp, #20]
   365f8:	ldr	r4, [sp, #24]
   365fc:	cmp	r0, r6
   36600:	ldr	r0, [sp, #16]
   36604:	beq	361f8 <__assert_fail@plt+0x24dc4>
   36608:	b	36224 <__assert_fail@plt+0x24df0>
   3660c:	mov	lr, #0
   36610:	cmp	lr, r0
   36614:	blt	35f40 <__assert_fail@plt+0x24b0c>
   36618:	mov	r0, #0
   3661c:	str	r0, [fp, #-76]	; 0xffffffb4
   36620:	mov	r8, #0
   36624:	mov	r0, r8
   36628:	sub	sp, fp, #28
   3662c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36630:	mov	r8, r0
   36634:	str	r0, [fp, #-76]	; 0xffffffb4
   36638:	b	36624 <__assert_fail@plt+0x251f0>
   3663c:	str	r1, [fp, #-76]	; 0xffffffb4
   36640:	b	36620 <__assert_fail@plt+0x251ec>
   36644:	str	r8, [sp, #68]	; 0x44
   36648:	mov	r8, #0
   3664c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   36650:	cmp	r0, #0
   36654:	beq	36660 <__assert_fail@plt+0x2522c>
   36658:	ldr	r0, [sp, #68]	; 0x44
   3665c:	bl	138e8 <__assert_fail@plt+0x24b4>
   36660:	cmp	r8, #0
   36664:	str	r8, [fp, #-76]	; 0xffffffb4
   36668:	moveq	r8, #0
   3666c:	b	36624 <__assert_fail@plt+0x251f0>
   36670:	str	r0, [fp, #-72]	; 0xffffffb8
   36674:	str	r8, [fp, #-76]	; 0xffffffb4
   36678:	b	36624 <__assert_fail@plt+0x251f0>
   3667c:	mov	r8, r0
   36680:	b	3664c <__assert_fail@plt+0x25218>
   36684:	mov	r8, r0
   36688:	b	36624 <__assert_fail@plt+0x251f0>
   3668c:	mov	r1, #0
   36690:	mov	r0, #0
   36694:	mov	r8, #12
   36698:	str	r1, [fp, #-56]	; 0xffffffc8
   3669c:	str	r0, [sp, #68]	; 0x44
   366a0:	str	r1, [fp, #-52]	; 0xffffffcc
   366a4:	b	3664c <__assert_fail@plt+0x25218>
   366a8:	str	r8, [sp, #68]	; 0x44
   366ac:	mov	r8, #12
   366b0:	b	3664c <__assert_fail@plt+0x25218>
   366b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   366b8:	add	fp, sp, #28
   366bc:	sub	sp, sp, #4
   366c0:	mov	r9, r0
   366c4:	ldr	r0, [r1, #4]
   366c8:	mov	r8, #0
   366cc:	cmp	r0, #0
   366d0:	beq	36880 <__assert_fail@plt+0x2544c>
   366d4:	mov	r5, r2
   366d8:	ldr	r2, [r2, #4]
   366dc:	cmp	r2, #0
   366e0:	beq	36880 <__assert_fail@plt+0x2544c>
   366e4:	mov	sl, r1
   366e8:	ldr	r1, [r9, #4]
   366ec:	ldr	r7, [r9]
   366f0:	add	r3, r2, r0
   366f4:	add	r6, r1, r3
   366f8:	cmp	r6, r7
   366fc:	ble	3672c <__assert_fail@plt+0x252f8>
   36700:	ldr	r0, [r9, #8]
   36704:	add	r4, r7, r3
   36708:	lsl	r1, r4, #2
   3670c:	bl	38020 <__assert_fail@plt+0x26bec>
   36710:	cmp	r0, #0
   36714:	beq	3688c <__assert_fail@plt+0x25458>
   36718:	str	r4, [r9]
   3671c:	str	r0, [r9, #8]
   36720:	ldr	r1, [r9, #4]
   36724:	ldr	r2, [r5, #4]
   36728:	ldr	r0, [sl, #4]
   3672c:	ldr	lr, [r5, #8]
   36730:	ldr	r4, [sl, #8]
   36734:	add	r3, r0, r1
   36738:	sub	r7, r1, #1
   3673c:	add	ip, r3, r2
   36740:	sub	r0, r0, #1
   36744:	sub	r3, r2, #1
   36748:	ldr	r1, [lr, r3, lsl #2]
   3674c:	ldr	r6, [r4, r0, lsl #2]
   36750:	cmp	r6, r1
   36754:	beq	36780 <__assert_fail@plt+0x2534c>
   36758:	blt	36770 <__assert_fail@plt+0x2533c>
   3675c:	sub	r6, r0, #1
   36760:	cmp	r0, #0
   36764:	mov	r0, r6
   36768:	bgt	3674c <__assert_fail@plt+0x25318>
   3676c:	b	367e4 <__assert_fail@plt+0x253b0>
   36770:	cmp	r2, #2
   36774:	mov	r2, r3
   36778:	bge	36744 <__assert_fail@plt+0x25310>
   3677c:	b	367e4 <__assert_fail@plt+0x253b0>
   36780:	cmp	r7, #0
   36784:	bmi	367c0 <__assert_fail@plt+0x2538c>
   36788:	ldr	r8, [r9, #8]
   3678c:	mov	r1, r7
   36790:	ldr	r7, [r8, r1, lsl #2]
   36794:	cmp	r7, r6
   36798:	ble	367b0 <__assert_fail@plt+0x2537c>
   3679c:	sub	r7, r1, #1
   367a0:	cmp	r1, #0
   367a4:	mov	r1, r7
   367a8:	bgt	36790 <__assert_fail@plt+0x2535c>
   367ac:	b	367c0 <__assert_fail@plt+0x2538c>
   367b0:	mov	r7, r1
   367b4:	bne	367c0 <__assert_fail@plt+0x2538c>
   367b8:	mov	r7, r1
   367bc:	b	367cc <__assert_fail@plt+0x25398>
   367c0:	ldr	r1, [r9, #8]
   367c4:	sub	ip, ip, #1
   367c8:	str	r6, [r1, ip, lsl #2]
   367cc:	cmp	r0, #1
   367d0:	mov	r8, #0
   367d4:	blt	367e4 <__assert_fail@plt+0x253b0>
   367d8:	cmp	r2, #2
   367dc:	mov	r2, r3
   367e0:	bge	36740 <__assert_fail@plt+0x2530c>
   367e4:	ldr	r2, [r9, #4]
   367e8:	ldr	lr, [sl, #4]
   367ec:	ldr	r4, [r5, #4]
   367f0:	ldr	r0, [r9, #8]
   367f4:	subs	r1, r2, #1
   367f8:	add	r3, r1, lr
   367fc:	add	r3, r3, r4
   36800:	sub	r7, r3, ip
   36804:	add	r6, r7, #1
   36808:	add	r5, r6, r2
   3680c:	str	r5, [r9, #4]
   36810:	blt	36870 <__assert_fail@plt+0x2543c>
   36814:	cmp	r7, #0
   36818:	bmi	36870 <__assert_fail@plt+0x2543c>
   3681c:	add	r2, r2, r4
   36820:	add	r2, r2, lr
   36824:	sub	r2, r2, ip
   36828:	add	r7, r0, r2, lsl #2
   3682c:	ldr	r2, [r0, r1, lsl #2]
   36830:	ldr	r5, [r0, r3, lsl #2]
   36834:	cmp	r5, r2
   36838:	bgt	36854 <__assert_fail@plt+0x25420>
   3683c:	str	r2, [r7, r1, lsl #2]
   36840:	sub	r2, r1, #1
   36844:	cmp	r1, #0
   36848:	mov	r1, r2
   3684c:	bgt	3682c <__assert_fail@plt+0x253f8>
   36850:	b	36870 <__assert_fail@plt+0x2543c>
   36854:	str	r5, [r7, r1, lsl #2]
   36858:	sub	r7, r7, #4
   3685c:	subs	r6, r6, #1
   36860:	sub	r3, r3, #1
   36864:	mov	r2, #0
   36868:	bne	3682c <__assert_fail@plt+0x253f8>
   3686c:	b	36874 <__assert_fail@plt+0x25440>
   36870:	mov	r2, r6
   36874:	add	r1, r0, ip, lsl #2
   36878:	lsl	r2, r2, #2
   3687c:	bl	111e8 <memcpy@plt>
   36880:	mov	r0, r8
   36884:	sub	sp, fp, #28
   36888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3688c:	mov	r8, #12
   36890:	b	36880 <__assert_fail@plt+0x2544c>
   36894:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36898:	add	fp, sp, #28
   3689c:	sub	sp, sp, #44	; 0x2c
   368a0:	mov	ip, r0
   368a4:	ldr	r0, [r0, #28]
   368a8:	mov	r8, r2
   368ac:	add	r2, r1, r1, lsl #1
   368b0:	mov	r4, #0
   368b4:	str	r3, [sp, #4]
   368b8:	str	r4, [sp, #36]	; 0x24
   368bc:	str	r4, [sp, #32]
   368c0:	str	r4, [sp, #40]	; 0x28
   368c4:	add	r2, r0, r2, lsl #2
   368c8:	mov	r0, r2
   368cc:	ldr	r7, [r0, #4]!
   368d0:	str	r0, [sp, #28]
   368d4:	cmp	r7, #1
   368d8:	blt	36bf0 <__assert_fail@plt+0x257bc>
   368dc:	add	r4, r2, #8
   368e0:	mov	r9, #0
   368e4:	mov	sl, #1
   368e8:	str	r2, [sp]
   368ec:	str	r1, [sp, #12]
   368f0:	str	ip, [sp, #8]
   368f4:	str	r4, [sp, #20]
   368f8:	b	36908 <__assert_fail@plt+0x254d4>
   368fc:	add	r9, r9, #1
   36900:	cmp	r9, r7
   36904:	bge	36ac8 <__assert_fail@plt+0x25694>
   36908:	ldr	r3, [r4]
   3690c:	ldr	r0, [r3, r9, lsl #2]
   36910:	cmp	r0, r1
   36914:	beq	368fc <__assert_fail@plt+0x254c8>
   36918:	ldr	r2, [ip]
   3691c:	add	r2, r2, r0, lsl #3
   36920:	ldrb	r2, [r2, #4]
   36924:	tst	r2, #8
   36928:	beq	368fc <__assert_fail@plt+0x254c8>
   3692c:	ldr	r2, [ip, #20]
   36930:	add	r0, r0, r0, lsl #1
   36934:	mvn	lr, #0
   36938:	str	r7, [sp, #24]
   3693c:	str	r0, [sp, #16]
   36940:	add	r0, r2, r0, lsl #2
   36944:	ldr	r6, [r0, #4]
   36948:	ldr	r0, [r0, #8]
   3694c:	cmp	r6, #2
   36950:	ldr	r5, [r0]
   36954:	ldrge	lr, [r0, #4]
   36958:	cmp	r7, #1
   3695c:	blt	369a0 <__assert_fail@plt+0x2556c>
   36960:	mov	r2, #0
   36964:	subs	r6, r7, #1
   36968:	beq	3698c <__assert_fail@plt+0x25558>
   3696c:	add	r4, r2, r6
   36970:	lsr	r7, r4, #1
   36974:	ldr	r0, [r3, r7, lsl #2]
   36978:	cmp	r0, r5
   3697c:	addlt	r2, sl, r4, lsr #1
   36980:	movge	r6, r7
   36984:	cmp	r2, r6
   36988:	bcc	3696c <__assert_fail@plt+0x25538>
   3698c:	ldr	r0, [r3, r2, lsl #2]
   36990:	ldr	r4, [sp, #20]
   36994:	ldr	r7, [sp, #24]
   36998:	cmp	r0, r5
   3699c:	beq	369f8 <__assert_fail@plt+0x255c4>
   369a0:	ldr	r0, [r8, #4]
   369a4:	cmp	r0, #1
   369a8:	blt	369f8 <__assert_fail@plt+0x255c4>
   369ac:	ldr	r1, [r8, #8]
   369b0:	subs	r4, r0, #1
   369b4:	mov	r6, #0
   369b8:	beq	369dc <__assert_fail@plt+0x255a8>
   369bc:	add	r0, r6, r4
   369c0:	lsr	r7, r0, #1
   369c4:	ldr	ip, [r1, r7, lsl #2]
   369c8:	cmp	ip, r5
   369cc:	addlt	r6, sl, r0, lsr #1
   369d0:	movge	r4, r7
   369d4:	cmp	r6, r4
   369d8:	bcc	369bc <__assert_fail@plt+0x25588>
   369dc:	ldr	r0, [r1, r6, lsl #2]
   369e0:	ldr	r1, [sp, #12]
   369e4:	ldr	ip, [sp, #8]
   369e8:	ldr	r4, [sp, #20]
   369ec:	ldr	r7, [sp, #24]
   369f0:	cmp	r0, r5
   369f4:	beq	36a94 <__assert_fail@plt+0x25660>
   369f8:	cmp	lr, #1
   369fc:	blt	368fc <__assert_fail@plt+0x254c8>
   36a00:	cmp	r7, #1
   36a04:	blt	36a44 <__assert_fail@plt+0x25610>
   36a08:	mov	r2, #0
   36a0c:	subs	r6, r7, #1
   36a10:	beq	36a34 <__assert_fail@plt+0x25600>
   36a14:	add	r0, r2, r6
   36a18:	lsr	r7, r0, #1
   36a1c:	ldr	r5, [r3, r7, lsl #2]
   36a20:	cmp	r5, lr
   36a24:	addlt	r2, sl, r0, lsr #1
   36a28:	movge	r6, r7
   36a2c:	cmp	r2, r6
   36a30:	bcc	36a14 <__assert_fail@plt+0x255e0>
   36a34:	ldr	r0, [r3, r2, lsl #2]
   36a38:	ldr	r7, [sp, #24]
   36a3c:	cmp	r0, lr
   36a40:	beq	368fc <__assert_fail@plt+0x254c8>
   36a44:	ldr	r0, [r8, #4]
   36a48:	cmp	r0, #1
   36a4c:	blt	368fc <__assert_fail@plt+0x254c8>
   36a50:	ldr	r4, [r8, #8]
   36a54:	subs	r6, r0, #1
   36a58:	mov	r3, #0
   36a5c:	beq	36a80 <__assert_fail@plt+0x2564c>
   36a60:	add	r0, r3, r6
   36a64:	lsr	r7, r0, #1
   36a68:	ldr	r5, [r4, r7, lsl #2]
   36a6c:	cmp	r5, lr
   36a70:	addlt	r3, sl, r0, lsr #1
   36a74:	movge	r6, r7
   36a78:	cmp	r3, r6
   36a7c:	bcc	36a60 <__assert_fail@plt+0x2562c>
   36a80:	ldr	r0, [r4, r3, lsl #2]
   36a84:	ldr	r4, [sp, #20]
   36a88:	ldr	r7, [sp, #24]
   36a8c:	cmp	r0, lr
   36a90:	bne	368fc <__assert_fail@plt+0x254c8>
   36a94:	ldr	r0, [ip, #28]
   36a98:	ldr	r1, [sp, #16]
   36a9c:	add	r2, r0, r1, lsl #2
   36aa0:	ldr	r1, [sp, #4]
   36aa4:	add	r0, sp, #32
   36aa8:	bl	366b4 <__assert_fail@plt+0x25280>
   36aac:	cmp	r0, #0
   36ab0:	bne	36c0c <__assert_fail@plt+0x257d8>
   36ab4:	ldr	r0, [sp, #28]
   36ab8:	ldr	r1, [sp, #12]
   36abc:	ldr	ip, [sp, #8]
   36ac0:	ldr	r7, [r0]
   36ac4:	b	368fc <__assert_fail@plt+0x254c8>
   36ac8:	ldr	r0, [sp]
   36acc:	cmp	r7, #0
   36ad0:	mov	r4, #0
   36ad4:	ble	36bf0 <__assert_fail@plt+0x257bc>
   36ad8:	ldr	r9, [sp, #36]	; 0x24
   36adc:	ldr	lr, [r0, #8]
   36ae0:	ldr	r0, [sp, #40]	; 0x28
   36ae4:	mov	ip, #0
   36ae8:	mov	r6, #1
   36aec:	sub	r1, r9, #1
   36af0:	str	lr, [sp, #20]
   36af4:	str	r9, [sp, #16]
   36af8:	str	r1, [sp, #24]
   36afc:	b	36b14 <__assert_fail@plt+0x256e0>
   36b00:	ldr	r1, [sp, #28]
   36b04:	add	ip, ip, #1
   36b08:	ldr	r1, [r1]
   36b0c:	cmp	ip, r1
   36b10:	bge	36bf8 <__assert_fail@plt+0x257c4>
   36b14:	ldr	r5, [lr, ip, lsl #2]
   36b18:	cmp	r9, #1
   36b1c:	blt	36b5c <__assert_fail@plt+0x25728>
   36b20:	ldr	r2, [sp, #24]
   36b24:	mov	r1, #0
   36b28:	cmp	r2, #0
   36b2c:	beq	36b50 <__assert_fail@plt+0x2571c>
   36b30:	add	r3, r1, r2
   36b34:	lsr	r4, r3, #1
   36b38:	ldr	r7, [r0, r4, lsl #2]
   36b3c:	cmp	r7, r5
   36b40:	addlt	r1, r6, r3, lsr #1
   36b44:	movge	r2, r4
   36b48:	cmp	r1, r2
   36b4c:	bcc	36b30 <__assert_fail@plt+0x256fc>
   36b50:	ldr	r1, [r0, r1, lsl #2]
   36b54:	cmp	r1, r5
   36b58:	beq	36b00 <__assert_fail@plt+0x256cc>
   36b5c:	ldr	r3, [r8, #4]
   36b60:	cmp	r3, #1
   36b64:	blt	36b00 <__assert_fail@plt+0x256cc>
   36b68:	mov	r1, r8
   36b6c:	ldr	r1, [r8, #8]
   36b70:	subs	sl, r3, #1
   36b74:	mov	r2, #0
   36b78:	beq	36ba0 <__assert_fail@plt+0x2576c>
   36b7c:	mov	r4, sl
   36b80:	add	r7, r2, r4
   36b84:	lsr	lr, r7, #1
   36b88:	ldr	r9, [r1, lr, lsl #2]
   36b8c:	cmp	r9, r5
   36b90:	addlt	r2, r6, r7, lsr #1
   36b94:	movge	r4, lr
   36b98:	cmp	r2, r4
   36b9c:	bcc	36b80 <__assert_fail@plt+0x2574c>
   36ba0:	ldr	r7, [r1, r2, lsl #2]
   36ba4:	ldr	lr, [sp, #20]
   36ba8:	ldr	r9, [sp, #16]
   36bac:	mov	r4, r2
   36bb0:	cmp	r7, r5
   36bb4:	mvnne	r4, #0
   36bb8:	cmp	r4, #0
   36bbc:	bmi	36b00 <__assert_fail@plt+0x256cc>
   36bc0:	cmp	r3, r4
   36bc4:	strgt	sl, [r8, #4]
   36bc8:	cmpgt	sl, r4
   36bcc:	ble	36b00 <__assert_fail@plt+0x256cc>
   36bd0:	add	r3, r1, r2, lsl #2
   36bd4:	ldr	r3, [r3, #4]
   36bd8:	str	r3, [r1, r2, lsl #2]
   36bdc:	add	r2, r2, #1
   36be0:	ldr	r3, [r8, #4]
   36be4:	cmp	r2, r3
   36be8:	blt	36bd0 <__assert_fail@plt+0x2579c>
   36bec:	b	36b00 <__assert_fail@plt+0x256cc>
   36bf0:	ldr	r0, [sp, #40]	; 0x28
   36bf4:	b	36bfc <__assert_fail@plt+0x257c8>
   36bf8:	mov	r4, #0
   36bfc:	bl	138e8 <__assert_fail@plt+0x24b4>
   36c00:	mov	r0, r4
   36c04:	sub	sp, fp, #28
   36c08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36c0c:	mov	r1, r0
   36c10:	ldr	r0, [sp, #40]	; 0x28
   36c14:	mov	r4, r1
   36c18:	b	36bfc <__assert_fail@plt+0x257c8>
   36c1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36c20:	add	fp, sp, #28
   36c24:	sub	sp, sp, #28
   36c28:	ldr	ip, [r0, #108]	; 0x6c
   36c2c:	str	r1, [sp, #24]
   36c30:	ldr	r1, [r0, #84]	; 0x54
   36c34:	mov	r4, r3
   36c38:	str	r2, [sp, #8]
   36c3c:	str	r0, [sp, #16]
   36c40:	cmp	ip, #1
   36c44:	str	r1, [sp, #20]
   36c48:	blt	36cb0 <__assert_fail@plt+0x2587c>
   36c4c:	ldr	r1, [r0, #116]	; 0x74
   36c50:	mov	r9, #0
   36c54:	mov	r2, #1
   36c58:	mov	r3, ip
   36c5c:	add	r7, r3, r9
   36c60:	add	r7, r7, r7, lsr #31
   36c64:	asr	r6, r7, #1
   36c68:	add	r5, r6, r6, lsl #1
   36c6c:	add	r5, r1, r5, lsl #3
   36c70:	ldr	r5, [r5, #4]
   36c74:	cmp	r5, r4
   36c78:	addlt	r9, r2, r7, asr #1
   36c7c:	movge	r3, r6
   36c80:	cmp	r9, r3
   36c84:	blt	36c5c <__assert_fail@plt+0x25828>
   36c88:	cmp	r9, ip
   36c8c:	bge	36cbc <__assert_fail@plt+0x25888>
   36c90:	ldr	r0, [sp, #16]
   36c94:	add	r2, r9, r9, lsl #1
   36c98:	ldr	r1, [r0, #116]	; 0x74
   36c9c:	add	r1, r1, r2, lsl #3
   36ca0:	ldr	r1, [r1, #4]
   36ca4:	cmp	r1, r4
   36ca8:	mvnne	r9, #0
   36cac:	b	36cc0 <__assert_fail@plt+0x2588c>
   36cb0:	mov	r9, #0
   36cb4:	cmp	r9, ip
   36cb8:	blt	36c90 <__assert_fail@plt+0x2585c>
   36cbc:	mvn	r9, #0
   36cc0:	ldr	r8, [fp, #12]
   36cc4:	cmp	ip, #1
   36cc8:	blt	36d10 <__assert_fail@plt+0x258dc>
   36ccc:	ldr	r0, [sp, #16]
   36cd0:	mov	r6, #0
   36cd4:	mov	r2, #1
   36cd8:	mov	r3, ip
   36cdc:	ldr	r1, [r0, #116]	; 0x74
   36ce0:	add	r7, r3, r6
   36ce4:	add	r7, r7, r7, lsr #31
   36ce8:	asr	r5, r7, #1
   36cec:	add	r0, r5, r5, lsl #1
   36cf0:	add	r0, r1, r0, lsl #3
   36cf4:	ldr	r0, [r0, #4]
   36cf8:	cmp	r0, r8
   36cfc:	addlt	r6, r2, r7, asr #1
   36d00:	movge	r3, r5
   36d04:	cmp	r6, r3
   36d08:	blt	36ce0 <__assert_fail@plt+0x258ac>
   36d0c:	b	36d14 <__assert_fail@plt+0x258e0>
   36d10:	mov	r6, #0
   36d14:	cmp	r6, ip
   36d18:	ldr	ip, [sp, #16]
   36d1c:	bge	36d3c <__assert_fail@plt+0x25908>
   36d20:	ldr	r0, [ip, #116]	; 0x74
   36d24:	add	r1, r6, r6, lsl #1
   36d28:	add	r0, r0, r1, lsl #3
   36d2c:	ldr	r0, [r0, #4]
   36d30:	cmp	r0, r8
   36d34:	mvnne	r6, #0
   36d38:	b	36d40 <__assert_fail@plt+0x2590c>
   36d3c:	mvn	r6, #0
   36d40:	ldr	r0, [sp, #24]
   36d44:	ldr	r0, [r0, #4]
   36d48:	cmp	r0, #1
   36d4c:	blt	36ecc <__assert_fail@plt+0x25a98>
   36d50:	mov	sl, #0
   36d54:	str	r4, [sp, #12]
   36d58:	ldr	r0, [sp, #24]
   36d5c:	ldr	r3, [ip, #116]	; 0x74
   36d60:	ldr	r5, [sp, #20]
   36d64:	ldr	r0, [r0, #8]
   36d68:	ldr	r5, [r5]
   36d6c:	ldr	r2, [r0, sl, lsl #2]
   36d70:	mov	r0, r3
   36d74:	add	r1, r2, r2, lsl #1
   36d78:	ldr	r7, [r0, r1, lsl #3]!
   36d7c:	ldr	r0, [r0, #8]
   36d80:	ldr	r5, [r5, r7, lsl #3]
   36d84:	mvn	r7, #0
   36d88:	cmp	r0, r4
   36d8c:	ble	36d98 <__assert_fail@plt+0x25964>
   36d90:	mvn	r8, #0
   36d94:	b	36e24 <__assert_fail@plt+0x259f0>
   36d98:	add	r1, r3, r1, lsl #3
   36d9c:	mov	r8, #1
   36da0:	ldr	r1, [r1, #12]
   36da4:	cmp	r1, r4
   36da8:	blt	36e24 <__assert_fail@plt+0x259f0>
   36dac:	sub	r1, r1, r4
   36db0:	cmp	r0, r4
   36db4:	mov	lr, r5
   36db8:	mov	r4, #1
   36dbc:	clz	r1, r1
   36dc0:	lsr	r5, r1, #5
   36dc4:	lsl	r1, r5, #1
   36dc8:	orreq	r1, r4, r5, lsl #1
   36dcc:	cmp	r1, #0
   36dd0:	beq	36e18 <__assert_fail@plt+0x259e4>
   36dd4:	ldr	r3, [sp, #8]
   36dd8:	mov	r0, ip
   36ddc:	mov	r2, lr
   36de0:	str	r9, [sp]
   36de4:	mov	r5, lr
   36de8:	bl	36ed8 <__assert_fail@plt+0x25aa4>
   36dec:	mov	r8, r0
   36df0:	ldr	r0, [sp, #24]
   36df4:	ldr	ip, [sp, #16]
   36df8:	ldr	r4, [sp, #12]
   36dfc:	ldr	r0, [r0, #8]
   36e00:	ldr	r3, [ip, #116]	; 0x74
   36e04:	ldr	r2, [r0, sl, lsl #2]
   36e08:	add	r0, r2, r2, lsl #1
   36e0c:	add	r0, r3, r0, lsl #3
   36e10:	ldr	r0, [r0, #8]
   36e14:	b	36e24 <__assert_fail@plt+0x259f0>
   36e18:	ldr	r4, [sp, #12]
   36e1c:	mov	r8, #0
   36e20:	mov	r5, lr
   36e24:	ldr	r1, [fp, #12]
   36e28:	cmp	r0, r1
   36e2c:	bgt	36e94 <__assert_fail@plt+0x25a60>
   36e30:	add	r1, r2, r2, lsl #1
   36e34:	ldr	r2, [fp, #12]
   36e38:	mov	r7, #1
   36e3c:	add	r1, r3, r1, lsl #3
   36e40:	ldr	r1, [r1, #12]
   36e44:	cmp	r1, r2
   36e48:	blt	36e94 <__assert_fail@plt+0x25a60>
   36e4c:	ldr	r2, [fp, #12]
   36e50:	sub	r1, r1, r2
   36e54:	mov	r3, r2
   36e58:	clz	r1, r1
   36e5c:	cmp	r0, r3
   36e60:	mov	r0, #1
   36e64:	lsr	r2, r1, #5
   36e68:	lsl	r1, r2, #1
   36e6c:	orreq	r1, r0, r2, lsl #1
   36e70:	cmp	r1, #0
   36e74:	beq	36eb4 <__assert_fail@plt+0x25a80>
   36e78:	ldr	r3, [fp, #8]
   36e7c:	mov	r0, ip
   36e80:	mov	r2, r5
   36e84:	str	r6, [sp]
   36e88:	bl	36ed8 <__assert_fail@plt+0x25aa4>
   36e8c:	ldr	ip, [sp, #16]
   36e90:	mov	r7, r0
   36e94:	cmp	r7, r8
   36e98:	bne	36ec0 <__assert_fail@plt+0x25a8c>
   36e9c:	ldr	r0, [sp, #24]
   36ea0:	add	sl, sl, #1
   36ea4:	ldr	r0, [r0, #4]
   36ea8:	cmp	sl, r0
   36eac:	blt	36d58 <__assert_fail@plt+0x25924>
   36eb0:	b	36ecc <__assert_fail@plt+0x25a98>
   36eb4:	mov	r7, #0
   36eb8:	cmp	r7, r8
   36ebc:	beq	36e9c <__assert_fail@plt+0x25a68>
   36ec0:	mov	r0, #1
   36ec4:	sub	sp, fp, #28
   36ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36ecc:	mov	r0, #0
   36ed0:	sub	sp, fp, #28
   36ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36ed8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36edc:	add	fp, sp, #28
   36ee0:	sub	sp, sp, #36	; 0x24
   36ee4:	ldr	r4, [r0, #84]	; 0x54
   36ee8:	mov	r7, r0
   36eec:	mov	r5, r1
   36ef0:	add	r1, r3, r3, lsl #1
   36ef4:	str	r3, [sp, #32]
   36ef8:	ldr	r0, [r4, #24]
   36efc:	add	r1, r0, r1, lsl #2
   36f00:	mov	lr, r1
   36f04:	ldr	r0, [lr, #4]!
   36f08:	cmp	r0, #1
   36f0c:	blt	370b8 <__assert_fail@plt+0x25c84>
   36f10:	mov	ip, #1
   36f14:	mov	r6, r2
   36f18:	and	r3, r5, #2
   36f1c:	mov	sl, #0
   36f20:	mvn	r2, ip, lsl r2
   36f24:	cmp	r6, #31
   36f28:	str	r3, [sp, #16]
   36f2c:	str	r2, [sp, #24]
   36f30:	lsl	r2, ip, r6
   36f34:	and	ip, r5, #1
   36f38:	str	r2, [sp, #28]
   36f3c:	mov	r2, #0
   36f40:	movwgt	r2, #1
   36f44:	str	ip, [sp, #12]
   36f48:	orr	r2, r2, r3, lsr #1
   36f4c:	add	r3, r1, #8
   36f50:	stmib	sp, {r3, lr}
   36f54:	str	r2, [sp, #20]
   36f58:	b	36f78 <__assert_fail@plt+0x25b44>
   36f5c:	ldr	lr, [sp, #8]
   36f60:	ldr	ip, [sp, #12]
   36f64:	ldr	r3, [sp, #4]
   36f68:	ldr	r0, [lr]
   36f6c:	add	sl, sl, #1
   36f70:	cmp	sl, r0
   36f74:	bge	370b8 <__assert_fail@plt+0x25c84>
   36f78:	ldr	r1, [r3]
   36f7c:	ldr	r9, [r1, sl, lsl #2]
   36f80:	ldr	r1, [r4]
   36f84:	add	r2, r1, r9, lsl #3
   36f88:	ldrb	r2, [r2, #4]
   36f8c:	cmp	r2, #9
   36f90:	beq	3707c <__assert_fail@plt+0x25c48>
   36f94:	cmp	r2, #8
   36f98:	beq	37098 <__assert_fail@plt+0x25c64>
   36f9c:	cmp	r2, #4
   36fa0:	bne	36f6c <__assert_fail@plt+0x25b38>
   36fa4:	ldr	r1, [fp, #8]
   36fa8:	cmn	r1, #1
   36fac:	beq	36f6c <__assert_fail@plt+0x25b38>
   36fb0:	ldr	r1, [fp, #8]
   36fb4:	ldr	r0, [r7, #116]	; 0x74
   36fb8:	add	r1, r1, r1, lsl #1
   36fbc:	add	r0, r0, r1, lsl #3
   36fc0:	add	r8, r0, #16
   36fc4:	b	36fe8 <__assert_fail@plt+0x25bb4>
   36fc8:	ldr	r0, [r8]
   36fcc:	ldr	r1, [sp, #24]
   36fd0:	and	r0, r0, r1
   36fd4:	str	r0, [r8]
   36fd8:	ldrb	r0, [r8, #4]
   36fdc:	add	r8, r8, #24
   36fe0:	cmp	r0, #0
   36fe4:	beq	36f5c <__assert_fail@plt+0x25b28>
   36fe8:	ldr	r0, [r8, #-16]
   36fec:	cmp	r0, r9
   36ff0:	bne	36fd8 <__assert_fail@plt+0x25ba4>
   36ff4:	cmp	r6, #31
   36ff8:	bgt	3700c <__assert_fail@plt+0x25bd8>
   36ffc:	ldr	r0, [r8]
   37000:	ldr	r1, [sp, #28]
   37004:	tst	r0, r1
   37008:	beq	36fd8 <__assert_fail@plt+0x25ba4>
   3700c:	ldr	r0, [r4, #20]
   37010:	add	r1, r9, r9, lsl #1
   37014:	add	r0, r0, r1, lsl #2
   37018:	ldr	r0, [r0, #8]
   3701c:	ldr	r3, [r0]
   37020:	ldr	r0, [sp, #32]
   37024:	cmp	r3, r0
   37028:	beq	370c4 <__assert_fail@plt+0x25c90>
   3702c:	ldr	r0, [fp, #8]
   37030:	mov	r1, r5
   37034:	mov	r2, r6
   37038:	str	r0, [sp]
   3703c:	mov	r0, r7
   37040:	bl	36ed8 <__assert_fail@plt+0x25aa4>
   37044:	cmp	r0, #0
   37048:	beq	37060 <__assert_fail@plt+0x25c2c>
   3704c:	cmn	r0, #1
   37050:	beq	370d8 <__assert_fail@plt+0x25ca4>
   37054:	cmp	r6, #31
   37058:	ble	36fc8 <__assert_fail@plt+0x25b94>
   3705c:	b	36fd8 <__assert_fail@plt+0x25ba4>
   37060:	ldr	r0, [sp, #20]
   37064:	cmp	r0, #0
   37068:	beq	36fc8 <__assert_fail@plt+0x25b94>
   3706c:	ldr	r0, [sp, #16]
   37070:	cmp	r0, #0
   37074:	beq	36fd8 <__assert_fail@plt+0x25ba4>
   37078:	b	370d4 <__assert_fail@plt+0x25ca0>
   3707c:	ldr	r2, [sp, #16]
   37080:	cmp	r2, #0
   37084:	beq	36f6c <__assert_fail@plt+0x25b38>
   37088:	ldr	r1, [r1, r9, lsl #3]
   3708c:	cmp	r1, r6
   37090:	bne	36f6c <__assert_fail@plt+0x25b38>
   37094:	b	370d4 <__assert_fail@plt+0x25ca0>
   37098:	cmp	ip, #0
   3709c:	beq	36f6c <__assert_fail@plt+0x25b38>
   370a0:	ldr	r1, [r1, r9, lsl #3]
   370a4:	cmp	r1, r6
   370a8:	bne	36f6c <__assert_fail@plt+0x25b38>
   370ac:	mvn	r0, #0
   370b0:	sub	sp, fp, #28
   370b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   370b8:	ubfx	r0, r5, #1, #1
   370bc:	sub	sp, fp, #28
   370c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   370c4:	ldr	r0, [sp, #12]
   370c8:	rsb	r0, r0, #0
   370cc:	sub	sp, fp, #28
   370d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   370d4:	mov	r0, #0
   370d8:	sub	sp, fp, #28
   370dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   370e0:	push	{r4, r5, fp, lr}
   370e4:	add	fp, sp, #8
   370e8:	mov	r4, r1
   370ec:	mov	r1, #0
   370f0:	mov	r5, r0
   370f4:	mov	r2, r4
   370f8:	bl	113a4 <memchr@plt>
   370fc:	sub	r1, r0, r5
   37100:	cmp	r0, #0
   37104:	addne	r4, r1, #1
   37108:	mov	r0, r4
   3710c:	pop	{r4, r5, fp, pc}
   37110:	push	{r4, sl, fp, lr}
   37114:	add	fp, sp, #8
   37118:	ldrb	r3, [r0]
   3711c:	ldrb	ip, [r1]
   37120:	cmp	r3, #45	; 0x2d
   37124:	bne	371fc <__assert_fail@plt+0x25dc8>
   37128:	ldrb	r3, [r0, #1]!
   3712c:	cmp	r3, #48	; 0x30
   37130:	beq	37128 <__assert_fail@plt+0x25cf4>
   37134:	cmp	ip, #45	; 0x2d
   37138:	bne	37304 <__assert_fail@plt+0x25ed0>
   3713c:	ldrb	ip, [r1, #1]!
   37140:	cmp	ip, #48	; 0x30
   37144:	beq	3713c <__assert_fail@plt+0x25d08>
   37148:	sub	lr, r3, #48	; 0x30
   3714c:	cmp	lr, #9
   37150:	bhi	37190 <__assert_fail@plt+0x25d5c>
   37154:	cmp	ip, r3
   37158:	bne	37190 <__assert_fail@plt+0x25d5c>
   3715c:	mov	r2, #0
   37160:	add	r3, r1, r2
   37164:	ldrb	ip, [r3, #1]
   37168:	add	r3, r0, r2
   3716c:	add	r2, r2, #1
   37170:	ldrb	r3, [r3, #1]
   37174:	sub	lr, r3, #48	; 0x30
   37178:	cmp	ip, r3
   3717c:	bne	37188 <__assert_fail@plt+0x25d54>
   37180:	cmp	lr, #10
   37184:	bcc	37160 <__assert_fail@plt+0x25d2c>
   37188:	add	r1, r1, r2
   3718c:	add	r0, r0, r2
   37190:	cmp	lr, #9
   37194:	mov	r2, #0
   37198:	mov	lr, #0
   3719c:	bhi	371bc <__assert_fail@plt+0x25d88>
   371a0:	add	r0, r0, #1
   371a4:	mov	lr, #0
   371a8:	ldrb	r4, [r0, lr]
   371ac:	add	lr, lr, #1
   371b0:	sub	r4, r4, #48	; 0x30
   371b4:	cmp	r4, #10
   371b8:	bcc	371a8 <__assert_fail@plt+0x25d74>
   371bc:	sub	r0, ip, #48	; 0x30
   371c0:	cmp	r0, #9
   371c4:	bhi	371e4 <__assert_fail@plt+0x25db0>
   371c8:	add	r0, r1, #1
   371cc:	mov	r2, #0
   371d0:	ldrb	r1, [r0, r2]
   371d4:	add	r2, r2, #1
   371d8:	sub	r1, r1, #48	; 0x30
   371dc:	cmp	r1, #10
   371e0:	bcc	371d0 <__assert_fail@plt+0x25d9c>
   371e4:	cmp	lr, r2
   371e8:	bne	3731c <__assert_fail@plt+0x25ee8>
   371ec:	cmp	lr, #0
   371f0:	subne	lr, ip, r3
   371f4:	mov	r0, lr
   371f8:	pop	{r4, sl, fp, pc}
   371fc:	cmp	ip, #45	; 0x2d
   37200:	bne	3724c <__assert_fail@plt+0x25e18>
   37204:	add	r1, r1, #1
   37208:	ldrb	r2, [r1], #1
   3720c:	cmp	r2, #48	; 0x30
   37210:	beq	37208 <__assert_fail@plt+0x25dd4>
   37214:	sub	r1, r2, #48	; 0x30
   37218:	mov	lr, #1
   3721c:	cmp	r1, #10
   37220:	bcc	37314 <__assert_fail@plt+0x25ee0>
   37224:	cmp	r3, #48	; 0x30
   37228:	bne	3723c <__assert_fail@plt+0x25e08>
   3722c:	add	r0, r0, #1
   37230:	ldrb	r3, [r0], #1
   37234:	cmp	r3, #48	; 0x30
   37238:	beq	37230 <__assert_fail@plt+0x25dfc>
   3723c:	sub	r0, r3, #48	; 0x30
   37240:	mov	lr, #0
   37244:	cmp	r0, #10
   37248:	b	37320 <__assert_fail@plt+0x25eec>
   3724c:	cmp	r3, #48	; 0x30
   37250:	bne	37260 <__assert_fail@plt+0x25e2c>
   37254:	ldrb	r3, [r0, #1]!
   37258:	b	3724c <__assert_fail@plt+0x25e18>
   3725c:	ldrb	ip, [r1, #1]!
   37260:	cmp	ip, #48	; 0x30
   37264:	beq	3725c <__assert_fail@plt+0x25e28>
   37268:	sub	r2, r3, #48	; 0x30
   3726c:	cmp	r2, #9
   37270:	bhi	37298 <__assert_fail@plt+0x25e64>
   37274:	cmp	r3, ip
   37278:	bne	37298 <__assert_fail@plt+0x25e64>
   3727c:	ldrb	r3, [r0, #1]!
   37280:	ldrb	ip, [r1, #1]!
   37284:	sub	r2, r3, #48	; 0x30
   37288:	cmp	r3, ip
   3728c:	bne	37298 <__assert_fail@plt+0x25e64>
   37290:	cmp	r2, #10
   37294:	bcc	3727c <__assert_fail@plt+0x25e48>
   37298:	mov	r4, #0
   3729c:	cmp	r2, #9
   372a0:	mov	lr, #0
   372a4:	bhi	372c4 <__assert_fail@plt+0x25e90>
   372a8:	add	r0, r0, #1
   372ac:	mov	lr, #0
   372b0:	ldrb	r2, [r0, lr]
   372b4:	add	lr, lr, #1
   372b8:	sub	r2, r2, #48	; 0x30
   372bc:	cmp	r2, #10
   372c0:	bcc	372b0 <__assert_fail@plt+0x25e7c>
   372c4:	sub	r0, ip, #48	; 0x30
   372c8:	cmp	r0, #9
   372cc:	bhi	372ec <__assert_fail@plt+0x25eb8>
   372d0:	add	r0, r1, #1
   372d4:	mov	r4, #0
   372d8:	ldrb	r1, [r0, r4]
   372dc:	add	r4, r4, #1
   372e0:	sub	r1, r1, #48	; 0x30
   372e4:	cmp	r1, #10
   372e8:	bcc	372d8 <__assert_fail@plt+0x25ea4>
   372ec:	cmp	lr, r4
   372f0:	bne	3732c <__assert_fail@plt+0x25ef8>
   372f4:	cmp	lr, #0
   372f8:	subne	lr, r3, ip
   372fc:	mov	r0, lr
   37300:	pop	{r4, sl, fp, pc}
   37304:	sub	r0, r3, #48	; 0x30
   37308:	mvn	lr, #0
   3730c:	cmp	r0, #10
   37310:	bcs	37334 <__assert_fail@plt+0x25f00>
   37314:	mov	r0, lr
   37318:	pop	{r4, sl, fp, pc}
   3731c:	mvn	lr, #0
   37320:	movwcc	lr, #1
   37324:	mov	r0, lr
   37328:	pop	{r4, sl, fp, pc}
   3732c:	mov	lr, #1
   37330:	b	37358 <__assert_fail@plt+0x25f24>
   37334:	cmp	ip, #48	; 0x30
   37338:	bne	3734c <__assert_fail@plt+0x25f18>
   3733c:	add	r0, r1, #1
   37340:	ldrb	ip, [r0], #1
   37344:	cmp	ip, #48	; 0x30
   37348:	beq	37340 <__assert_fail@plt+0x25f0c>
   3734c:	sub	r0, ip, #48	; 0x30
   37350:	mov	lr, #0
   37354:	cmp	r0, #10
   37358:	mvncc	lr, #0
   3735c:	mov	r0, lr
   37360:	pop	{r4, sl, fp, pc}
   37364:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   37368:	add	fp, sp, #24
   3736c:	sub	sp, sp, #32
   37370:	ldr	r6, [fp, #12]
   37374:	ldr	r7, [fp, #8]
   37378:	mov	r4, r2
   3737c:	mov	r8, r0
   37380:	cmp	r1, #0
   37384:	beq	373ac <__assert_fail@plt+0x25f78>
   37388:	movw	r2, #43041	; 0xa821
   3738c:	mov	r5, r1
   37390:	str	r3, [sp, #4]
   37394:	str	r4, [sp]
   37398:	mov	r0, r8
   3739c:	mov	r1, #1
   373a0:	movt	r2, #3
   373a4:	mov	r3, r5
   373a8:	b	373c4 <__assert_fail@plt+0x25f90>
   373ac:	movw	r2, #43053	; 0xa82d
   373b0:	str	r3, [sp]
   373b4:	mov	r0, r8
   373b8:	mov	r1, #1
   373bc:	mov	r3, r4
   373c0:	movt	r2, #3
   373c4:	bl	11398 <__fprintf_chk@plt>
   373c8:	movw	r1, #43060	; 0xa834
   373cc:	mov	r0, #0
   373d0:	mov	r2, #5
   373d4:	movt	r1, #3
   373d8:	bl	11218 <dcgettext@plt>
   373dc:	movw	r2, #43778	; 0xab02
   373e0:	mov	r3, r0
   373e4:	movw	r0, #2022	; 0x7e6
   373e8:	mov	r1, #1
   373ec:	movt	r2, #3
   373f0:	str	r0, [sp]
   373f4:	mov	r0, r8
   373f8:	bl	11398 <__fprintf_chk@plt>
   373fc:	movw	r4, #36890	; 0x901a
   37400:	mov	r1, r8
   37404:	movt	r4, #3
   37408:	mov	r0, r4
   3740c:	bl	1114c <fputs_unlocked@plt>
   37410:	movw	r1, #43064	; 0xa838
   37414:	mov	r0, #0
   37418:	mov	r2, #5
   3741c:	movt	r1, #3
   37420:	bl	11218 <dcgettext@plt>
   37424:	movw	r3, #43235	; 0xa8e3
   37428:	mov	r2, r0
   3742c:	mov	r0, r8
   37430:	mov	r1, #1
   37434:	movt	r3, #3
   37438:	bl	11398 <__fprintf_chk@plt>
   3743c:	mov	r0, r4
   37440:	mov	r1, r8
   37444:	bl	1114c <fputs_unlocked@plt>
   37448:	cmp	r6, #9
   3744c:	bhi	37488 <__assert_fail@plt+0x26054>
   37450:	add	r0, pc, #0
   37454:	ldr	pc, [r0, r6, lsl #2]
   37458:	andeq	r7, r3, r0, lsl #9
   3745c:	muleq	r3, r4, r4
   37460:	andeq	r7, r3, r4, asr #9
   37464:	andeq	r7, r3, ip, ror #9
   37468:	andeq	r7, r3, r4, lsl r5
   3746c:	andeq	r7, r3, ip, lsr r5
   37470:	andeq	r7, r3, r4, ror #10
   37474:	muleq	r3, ip, r5
   37478:	andeq	r7, r3, ip, lsr r6
   3747c:	andeq	r7, r3, r4, ror #11
   37480:	sub	sp, fp, #24
   37484:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   37488:	movw	r1, #43588	; 0xaa44
   3748c:	movt	r1, #3
   37490:	b	375ec <__assert_fail@plt+0x261b8>
   37494:	movw	r1, #43269	; 0xa905
   37498:	mov	r0, #0
   3749c:	mov	r2, #5
   374a0:	movt	r1, #3
   374a4:	bl	11218 <dcgettext@plt>
   374a8:	ldr	r3, [r7]
   374ac:	mov	r2, r0
   374b0:	mov	r0, r8
   374b4:	mov	r1, #1
   374b8:	sub	sp, fp, #24
   374bc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   374c0:	b	11398 <__fprintf_chk@plt>
   374c4:	movw	r1, #43285	; 0xa915
   374c8:	mov	r0, #0
   374cc:	mov	r2, #5
   374d0:	movt	r1, #3
   374d4:	bl	11218 <dcgettext@plt>
   374d8:	mov	r2, r0
   374dc:	ldr	r3, [r7]
   374e0:	ldr	r0, [r7, #4]
   374e4:	str	r0, [sp]
   374e8:	b	375d8 <__assert_fail@plt+0x261a4>
   374ec:	movw	r1, #43308	; 0xa92c
   374f0:	mov	r0, #0
   374f4:	mov	r2, #5
   374f8:	movt	r1, #3
   374fc:	bl	11218 <dcgettext@plt>
   37500:	mov	r2, r0
   37504:	ldr	r3, [r7]
   37508:	ldmib	r7, {r0, r1}
   3750c:	stm	sp, {r0, r1}
   37510:	b	375d8 <__assert_fail@plt+0x261a4>
   37514:	movw	r1, #43336	; 0xa948
   37518:	mov	r0, #0
   3751c:	mov	r2, #5
   37520:	movt	r1, #3
   37524:	bl	11218 <dcgettext@plt>
   37528:	ldr	r3, [r7]
   3752c:	mov	r2, r0
   37530:	ldmib	r7, {r0, r1, r7}
   37534:	stm	sp, {r0, r1, r7}
   37538:	b	375d8 <__assert_fail@plt+0x261a4>
   3753c:	movw	r1, #43368	; 0xa968
   37540:	mov	r0, #0
   37544:	mov	r2, #5
   37548:	movt	r1, #3
   3754c:	bl	11218 <dcgettext@plt>
   37550:	ldr	r3, [r7]
   37554:	mov	r2, r0
   37558:	ldmib	r7, {r0, r1, r6, r7}
   3755c:	stm	sp, {r0, r1, r6, r7}
   37560:	b	375d8 <__assert_fail@plt+0x261a4>
   37564:	movw	r1, #43404	; 0xa98c
   37568:	mov	r0, #0
   3756c:	mov	r2, #5
   37570:	movt	r1, #3
   37574:	bl	11218 <dcgettext@plt>
   37578:	mov	r2, r0
   3757c:	ldr	r3, [r7]
   37580:	ldmib	r7, {r0, r1, r6}
   37584:	ldr	r5, [r7, #16]
   37588:	ldr	r7, [r7, #20]
   3758c:	stm	sp, {r0, r1, r6}
   37590:	str	r5, [sp, #12]
   37594:	str	r7, [sp, #16]
   37598:	b	375d8 <__assert_fail@plt+0x261a4>
   3759c:	movw	r1, #43444	; 0xa9b4
   375a0:	mov	r0, #0
   375a4:	mov	r2, #5
   375a8:	movt	r1, #3
   375ac:	bl	11218 <dcgettext@plt>
   375b0:	mov	r2, r0
   375b4:	ldr	r3, [r7]
   375b8:	ldmib	r7, {r0, r1, r6}
   375bc:	ldr	r5, [r7, #16]
   375c0:	ldr	r4, [r7, #20]
   375c4:	ldr	r7, [r7, #24]
   375c8:	stm	sp, {r0, r1, r6}
   375cc:	str	r5, [sp, #12]
   375d0:	str	r4, [sp, #16]
   375d4:	str	r7, [sp, #20]
   375d8:	mov	r0, r8
   375dc:	mov	r1, #1
   375e0:	b	3768c <__assert_fail@plt+0x26258>
   375e4:	movw	r1, #43536	; 0xaa10
   375e8:	movt	r1, #3
   375ec:	mov	r0, #0
   375f0:	mov	r2, #5
   375f4:	bl	11218 <dcgettext@plt>
   375f8:	mov	ip, r0
   375fc:	ldr	r3, [r7]
   37600:	ldr	r0, [r7, #4]
   37604:	ldr	r1, [r7, #8]
   37608:	ldr	r6, [r7, #12]
   3760c:	ldr	r5, [r7, #16]
   37610:	ldr	r4, [r7, #20]
   37614:	ldr	r2, [r7, #24]
   37618:	ldr	lr, [r7, #28]
   3761c:	ldr	r7, [r7, #32]
   37620:	stm	sp, {r0, r1, r6}
   37624:	str	r5, [sp, #12]
   37628:	str	r4, [sp, #16]
   3762c:	str	r2, [sp, #20]
   37630:	str	lr, [sp, #24]
   37634:	str	r7, [sp, #28]
   37638:	b	37680 <__assert_fail@plt+0x2624c>
   3763c:	movw	r1, #43488	; 0xa9e0
   37640:	mov	r0, #0
   37644:	mov	r2, #5
   37648:	movt	r1, #3
   3764c:	bl	11218 <dcgettext@plt>
   37650:	mov	ip, r0
   37654:	ldr	r3, [r7]
   37658:	ldmib	r7, {r0, r1, r6}
   3765c:	ldr	r5, [r7, #16]
   37660:	ldr	r4, [r7, #20]
   37664:	ldr	r2, [r7, #24]
   37668:	ldr	r7, [r7, #28]
   3766c:	stm	sp, {r0, r1, r6}
   37670:	str	r5, [sp, #12]
   37674:	str	r4, [sp, #16]
   37678:	str	r2, [sp, #20]
   3767c:	str	r7, [sp, #24]
   37680:	mov	r0, r8
   37684:	mov	r1, #1
   37688:	mov	r2, ip
   3768c:	bl	11398 <__fprintf_chk@plt>
   37690:	sub	sp, fp, #24
   37694:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   37698:	push	{r4, sl, fp, lr}
   3769c:	add	fp, sp, #8
   376a0:	sub	sp, sp, #8
   376a4:	ldr	ip, [fp, #8]
   376a8:	mov	lr, #0
   376ac:	ldr	r4, [ip, lr, lsl #2]
   376b0:	add	lr, lr, #1
   376b4:	cmp	r4, #0
   376b8:	bne	376ac <__assert_fail@plt+0x26278>
   376bc:	sub	r4, lr, #1
   376c0:	str	ip, [sp]
   376c4:	str	r4, [sp, #4]
   376c8:	bl	37364 <__assert_fail@plt+0x25f30>
   376cc:	sub	sp, fp, #8
   376d0:	pop	{r4, sl, fp, pc}
   376d4:	push	{fp, lr}
   376d8:	mov	fp, sp
   376dc:	sub	sp, sp, #48	; 0x30
   376e0:	ldr	ip, [fp, #8]
   376e4:	ldr	lr, [ip]
   376e8:	cmp	lr, #0
   376ec:	str	lr, [sp, #8]
   376f0:	beq	3778c <__assert_fail@plt+0x26358>
   376f4:	ldr	lr, [ip, #4]
   376f8:	cmp	lr, #0
   376fc:	str	lr, [sp, #12]
   37700:	beq	37794 <__assert_fail@plt+0x26360>
   37704:	ldr	lr, [ip, #8]
   37708:	cmp	lr, #0
   3770c:	str	lr, [sp, #16]
   37710:	beq	3779c <__assert_fail@plt+0x26368>
   37714:	ldr	lr, [ip, #12]
   37718:	cmp	lr, #0
   3771c:	str	lr, [sp, #20]
   37720:	beq	377a4 <__assert_fail@plt+0x26370>
   37724:	ldr	lr, [ip, #16]
   37728:	cmp	lr, #0
   3772c:	str	lr, [sp, #24]
   37730:	beq	377ac <__assert_fail@plt+0x26378>
   37734:	ldr	lr, [ip, #20]
   37738:	cmp	lr, #0
   3773c:	str	lr, [sp, #28]
   37740:	beq	377b4 <__assert_fail@plt+0x26380>
   37744:	ldr	lr, [ip, #24]
   37748:	cmp	lr, #0
   3774c:	str	lr, [sp, #32]
   37750:	beq	377bc <__assert_fail@plt+0x26388>
   37754:	ldr	lr, [ip, #28]
   37758:	cmp	lr, #0
   3775c:	str	lr, [sp, #36]	; 0x24
   37760:	beq	377c4 <__assert_fail@plt+0x26390>
   37764:	ldr	lr, [ip, #32]
   37768:	cmp	lr, #0
   3776c:	str	lr, [sp, #40]	; 0x28
   37770:	beq	377cc <__assert_fail@plt+0x26398>
   37774:	ldr	lr, [ip, #36]	; 0x24
   37778:	mov	ip, #10
   3777c:	cmp	lr, #0
   37780:	str	lr, [sp, #44]	; 0x2c
   37784:	movweq	ip, #9
   37788:	b	377d0 <__assert_fail@plt+0x2639c>
   3778c:	mov	ip, #0
   37790:	b	377d0 <__assert_fail@plt+0x2639c>
   37794:	mov	ip, #1
   37798:	b	377d0 <__assert_fail@plt+0x2639c>
   3779c:	mov	ip, #2
   377a0:	b	377d0 <__assert_fail@plt+0x2639c>
   377a4:	mov	ip, #3
   377a8:	b	377d0 <__assert_fail@plt+0x2639c>
   377ac:	mov	ip, #4
   377b0:	b	377d0 <__assert_fail@plt+0x2639c>
   377b4:	mov	ip, #5
   377b8:	b	377d0 <__assert_fail@plt+0x2639c>
   377bc:	mov	ip, #6
   377c0:	b	377d0 <__assert_fail@plt+0x2639c>
   377c4:	mov	ip, #7
   377c8:	b	377d0 <__assert_fail@plt+0x2639c>
   377cc:	mov	ip, #8
   377d0:	add	lr, sp, #8
   377d4:	str	ip, [sp, #4]
   377d8:	str	lr, [sp]
   377dc:	bl	37364 <__assert_fail@plt+0x25f30>
   377e0:	mov	sp, fp
   377e4:	pop	{fp, pc}
   377e8:	push	{fp, lr}
   377ec:	mov	fp, sp
   377f0:	sub	sp, sp, #56	; 0x38
   377f4:	add	ip, fp, #8
   377f8:	str	ip, [sp, #12]
   377fc:	ldr	lr, [fp, #8]
   37800:	cmp	lr, #0
   37804:	str	lr, [sp, #16]
   37808:	beq	378a4 <__assert_fail@plt+0x26470>
   3780c:	ldr	lr, [ip, #4]
   37810:	cmp	lr, #0
   37814:	str	lr, [sp, #20]
   37818:	beq	378ac <__assert_fail@plt+0x26478>
   3781c:	ldr	lr, [ip, #8]
   37820:	cmp	lr, #0
   37824:	str	lr, [sp, #24]
   37828:	beq	378b4 <__assert_fail@plt+0x26480>
   3782c:	ldr	lr, [ip, #12]
   37830:	cmp	lr, #0
   37834:	str	lr, [sp, #28]
   37838:	beq	378bc <__assert_fail@plt+0x26488>
   3783c:	ldr	lr, [ip, #16]
   37840:	cmp	lr, #0
   37844:	str	lr, [sp, #32]
   37848:	beq	378c4 <__assert_fail@plt+0x26490>
   3784c:	ldr	lr, [ip, #20]
   37850:	cmp	lr, #0
   37854:	str	lr, [sp, #36]	; 0x24
   37858:	beq	378cc <__assert_fail@plt+0x26498>
   3785c:	ldr	lr, [ip, #24]
   37860:	cmp	lr, #0
   37864:	str	lr, [sp, #40]	; 0x28
   37868:	beq	378d4 <__assert_fail@plt+0x264a0>
   3786c:	ldr	lr, [ip, #28]
   37870:	cmp	lr, #0
   37874:	str	lr, [sp, #44]	; 0x2c
   37878:	beq	378dc <__assert_fail@plt+0x264a8>
   3787c:	ldr	lr, [ip, #32]
   37880:	cmp	lr, #0
   37884:	str	lr, [sp, #48]	; 0x30
   37888:	beq	378e4 <__assert_fail@plt+0x264b0>
   3788c:	ldr	lr, [ip, #36]	; 0x24
   37890:	mov	ip, #10
   37894:	cmp	lr, #0
   37898:	str	lr, [sp, #52]	; 0x34
   3789c:	movweq	ip, #9
   378a0:	b	378e8 <__assert_fail@plt+0x264b4>
   378a4:	mov	ip, #0
   378a8:	b	378e8 <__assert_fail@plt+0x264b4>
   378ac:	mov	ip, #1
   378b0:	b	378e8 <__assert_fail@plt+0x264b4>
   378b4:	mov	ip, #2
   378b8:	b	378e8 <__assert_fail@plt+0x264b4>
   378bc:	mov	ip, #3
   378c0:	b	378e8 <__assert_fail@plt+0x264b4>
   378c4:	mov	ip, #4
   378c8:	b	378e8 <__assert_fail@plt+0x264b4>
   378cc:	mov	ip, #5
   378d0:	b	378e8 <__assert_fail@plt+0x264b4>
   378d4:	mov	ip, #6
   378d8:	b	378e8 <__assert_fail@plt+0x264b4>
   378dc:	mov	ip, #7
   378e0:	b	378e8 <__assert_fail@plt+0x264b4>
   378e4:	mov	ip, #8
   378e8:	add	lr, sp, #16
   378ec:	str	ip, [sp, #4]
   378f0:	str	lr, [sp]
   378f4:	bl	37364 <__assert_fail@plt+0x25f30>
   378f8:	mov	sp, fp
   378fc:	pop	{fp, pc}
   37900:	push	{fp, lr}
   37904:	mov	fp, sp
   37908:	movw	r0, #45444	; 0xb184
   3790c:	movt	r0, #4
   37910:	ldr	r1, [r0]
   37914:	movw	r0, #36890	; 0x901a
   37918:	movt	r0, #3
   3791c:	bl	1114c <fputs_unlocked@plt>
   37920:	movw	r1, #43648	; 0xaa80
   37924:	mov	r0, #0
   37928:	mov	r2, #5
   3792c:	movt	r1, #3
   37930:	bl	11218 <dcgettext@plt>
   37934:	movw	r2, #43668	; 0xaa94
   37938:	mov	r1, r0
   3793c:	mov	r0, #1
   37940:	movt	r2, #3
   37944:	bl	11380 <__printf_chk@plt>
   37948:	movw	r1, #43690	; 0xaaaa
   3794c:	mov	r0, #0
   37950:	mov	r2, #5
   37954:	movt	r1, #3
   37958:	bl	11218 <dcgettext@plt>
   3795c:	movw	r2, #36457	; 0x8e69
   37960:	movw	r3, #36699	; 0x8f5b
   37964:	mov	r1, r0
   37968:	mov	r0, #1
   3796c:	movt	r2, #3
   37970:	movt	r3, #3
   37974:	bl	11380 <__printf_chk@plt>
   37978:	movw	r1, #43710	; 0xaabe
   3797c:	mov	r0, #0
   37980:	mov	r2, #5
   37984:	movt	r1, #3
   37988:	bl	11218 <dcgettext@plt>
   3798c:	movw	r2, #43749	; 0xaae5
   37990:	mov	r1, r0
   37994:	mov	r0, #1
   37998:	movt	r2, #3
   3799c:	pop	{fp, lr}
   379a0:	b	11380 <__printf_chk@plt>
   379a4:	push	{r4, r5, r6, sl, fp, lr}
   379a8:	add	fp, sp, #16
   379ac:	mov	r4, r2
   379b0:	mov	r5, r1
   379b4:	mov	r6, r0
   379b8:	bl	384a8 <__assert_fail@plt+0x27074>
   379bc:	cmp	r0, #0
   379c0:	popne	{r4, r5, r6, sl, fp, pc}
   379c4:	cmp	r6, #0
   379c8:	beq	379dc <__assert_fail@plt+0x265a8>
   379cc:	cmp	r5, #0
   379d0:	cmpne	r4, #0
   379d4:	bne	379dc <__assert_fail@plt+0x265a8>
   379d8:	pop	{r4, r5, r6, sl, fp, pc}
   379dc:	bl	37f58 <__assert_fail@plt+0x26b24>
   379e0:	push	{r4, r5, r6, sl, fp, lr}
   379e4:	add	fp, sp, #16
   379e8:	mov	r4, r2
   379ec:	mov	r5, r1
   379f0:	mov	r6, r0
   379f4:	bl	384a8 <__assert_fail@plt+0x27074>
   379f8:	cmp	r0, #0
   379fc:	popne	{r4, r5, r6, sl, fp, pc}
   37a00:	cmp	r6, #0
   37a04:	beq	37a18 <__assert_fail@plt+0x265e4>
   37a08:	cmp	r5, #0
   37a0c:	cmpne	r4, #0
   37a10:	bne	37a18 <__assert_fail@plt+0x265e4>
   37a14:	pop	{r4, r5, r6, sl, fp, pc}
   37a18:	bl	37f58 <__assert_fail@plt+0x26b24>
   37a1c:	push	{fp, lr}
   37a20:	mov	fp, sp
   37a24:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   37a28:	cmp	r0, #0
   37a2c:	popne	{fp, pc}
   37a30:	bl	37f58 <__assert_fail@plt+0x26b24>
   37a34:	push	{fp, lr}
   37a38:	mov	fp, sp
   37a3c:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   37a40:	cmp	r0, #0
   37a44:	popne	{fp, pc}
   37a48:	bl	37f58 <__assert_fail@plt+0x26b24>
   37a4c:	push	{fp, lr}
   37a50:	mov	fp, sp
   37a54:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   37a58:	cmp	r0, #0
   37a5c:	popne	{fp, pc}
   37a60:	bl	37f58 <__assert_fail@plt+0x26b24>
   37a64:	push	{r4, r5, fp, lr}
   37a68:	add	fp, sp, #8
   37a6c:	mov	r4, r1
   37a70:	mov	r5, r0
   37a74:	bl	38020 <__assert_fail@plt+0x26bec>
   37a78:	cmp	r0, #0
   37a7c:	popne	{r4, r5, fp, pc}
   37a80:	cmp	r5, #0
   37a84:	beq	37a94 <__assert_fail@plt+0x26660>
   37a88:	cmp	r4, #0
   37a8c:	bne	37a94 <__assert_fail@plt+0x26660>
   37a90:	pop	{r4, r5, fp, pc}
   37a94:	bl	37f58 <__assert_fail@plt+0x26b24>
   37a98:	push	{fp, lr}
   37a9c:	mov	fp, sp
   37aa0:	cmp	r1, #0
   37aa4:	orreq	r1, r1, #1
   37aa8:	bl	38020 <__assert_fail@plt+0x26bec>
   37aac:	cmp	r0, #0
   37ab0:	popne	{fp, pc}
   37ab4:	bl	37f58 <__assert_fail@plt+0x26b24>
   37ab8:	push	{fp, lr}
   37abc:	mov	fp, sp
   37ac0:	clz	r3, r2
   37ac4:	lsr	ip, r3, #5
   37ac8:	clz	r3, r1
   37acc:	lsr	r3, r3, #5
   37ad0:	orrs	r3, r3, ip
   37ad4:	movwne	r1, #1
   37ad8:	movwne	r2, #1
   37adc:	bl	384a8 <__assert_fail@plt+0x27074>
   37ae0:	cmp	r0, #0
   37ae4:	popne	{fp, pc}
   37ae8:	bl	37f58 <__assert_fail@plt+0x26b24>
   37aec:	push	{fp, lr}
   37af0:	mov	fp, sp
   37af4:	mov	r2, r1
   37af8:	mov	r1, r0
   37afc:	mov	r0, #0
   37b00:	bl	384a8 <__assert_fail@plt+0x27074>
   37b04:	cmp	r0, #0
   37b08:	popne	{fp, pc}
   37b0c:	bl	37f58 <__assert_fail@plt+0x26b24>
   37b10:	push	{fp, lr}
   37b14:	mov	fp, sp
   37b18:	mov	r2, r1
   37b1c:	mov	r1, r0
   37b20:	clz	r0, r2
   37b24:	clz	r3, r1
   37b28:	lsr	r0, r0, #5
   37b2c:	lsr	r3, r3, #5
   37b30:	orrs	r0, r3, r0
   37b34:	mov	r0, #0
   37b38:	movwne	r1, #1
   37b3c:	movwne	r2, #1
   37b40:	bl	384a8 <__assert_fail@plt+0x27074>
   37b44:	cmp	r0, #0
   37b48:	popne	{fp, pc}
   37b4c:	bl	37f58 <__assert_fail@plt+0x26b24>
   37b50:	push	{r4, r5, r6, sl, fp, lr}
   37b54:	add	fp, sp, #16
   37b58:	ldr	r5, [r1]
   37b5c:	mov	r4, r1
   37b60:	mov	r6, r0
   37b64:	cmp	r0, #0
   37b68:	beq	37b80 <__assert_fail@plt+0x2674c>
   37b6c:	mov	r0, #1
   37b70:	add	r0, r0, r5, lsr #1
   37b74:	adds	r5, r5, r0
   37b78:	bcc	37b88 <__assert_fail@plt+0x26754>
   37b7c:	b	37bc4 <__assert_fail@plt+0x26790>
   37b80:	cmp	r5, #0
   37b84:	movweq	r5, #64	; 0x40
   37b88:	mov	r0, r6
   37b8c:	mov	r1, r5
   37b90:	mov	r2, #1
   37b94:	bl	384a8 <__assert_fail@plt+0x27074>
   37b98:	cmp	r5, #0
   37b9c:	mov	r1, r5
   37ba0:	movwne	r1, #1
   37ba4:	cmp	r0, #0
   37ba8:	bne	37bbc <__assert_fail@plt+0x26788>
   37bac:	clz	r2, r6
   37bb0:	lsr	r2, r2, #5
   37bb4:	orrs	r1, r2, r1
   37bb8:	bne	37bc4 <__assert_fail@plt+0x26790>
   37bbc:	str	r5, [r4]
   37bc0:	pop	{r4, r5, r6, sl, fp, pc}
   37bc4:	bl	37f58 <__assert_fail@plt+0x26b24>
   37bc8:	push	{r4, r5, r6, r7, fp, lr}
   37bcc:	add	fp, sp, #16
   37bd0:	ldr	r5, [r1]
   37bd4:	mov	r6, r2
   37bd8:	mov	r4, r1
   37bdc:	mov	r7, r0
   37be0:	cmp	r0, #0
   37be4:	beq	37bfc <__assert_fail@plt+0x267c8>
   37be8:	mov	r0, #1
   37bec:	add	r0, r0, r5, lsr #1
   37bf0:	adds	r5, r5, r0
   37bf4:	bcc	37c14 <__assert_fail@plt+0x267e0>
   37bf8:	b	37c48 <__assert_fail@plt+0x26814>
   37bfc:	cmp	r5, #0
   37c00:	bne	37c14 <__assert_fail@plt+0x267e0>
   37c04:	mov	r0, #64	; 0x40
   37c08:	cmp	r6, #64	; 0x40
   37c0c:	udiv	r5, r0, r6
   37c10:	addhi	r5, r5, #1
   37c14:	mov	r0, r7
   37c18:	mov	r1, r5
   37c1c:	mov	r2, r6
   37c20:	bl	384a8 <__assert_fail@plt+0x27074>
   37c24:	cmp	r0, #0
   37c28:	bne	37c40 <__assert_fail@plt+0x2680c>
   37c2c:	cmp	r7, #0
   37c30:	beq	37c48 <__assert_fail@plt+0x26814>
   37c34:	cmp	r6, #0
   37c38:	cmpne	r5, #0
   37c3c:	bne	37c48 <__assert_fail@plt+0x26814>
   37c40:	str	r5, [r4]
   37c44:	pop	{r4, r5, r6, r7, fp, pc}
   37c48:	bl	37f58 <__assert_fail@plt+0x26b24>
   37c4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   37c50:	add	fp, sp, #24
   37c54:	mov	r8, r1
   37c58:	ldr	r1, [r1]
   37c5c:	mov	r5, r0
   37c60:	add	r0, r1, r1, asr #1
   37c64:	cmp	r0, r1
   37c68:	mvnvs	r0, #-2147483648	; 0x80000000
   37c6c:	cmp	r0, r3
   37c70:	mov	r7, r0
   37c74:	movgt	r7, r3
   37c78:	cmn	r3, #1
   37c7c:	movle	r7, r0
   37c80:	ldr	r0, [fp, #8]
   37c84:	cmn	r0, #1
   37c88:	ble	37cb0 <__assert_fail@plt+0x2687c>
   37c8c:	cmp	r0, #0
   37c90:	beq	37d04 <__assert_fail@plt+0x268d0>
   37c94:	cmn	r7, #1
   37c98:	ble	37cd8 <__assert_fail@plt+0x268a4>
   37c9c:	mvn	r4, #-2147483648	; 0x80000000
   37ca0:	udiv	r6, r4, r0
   37ca4:	cmp	r6, r7
   37ca8:	bge	37d04 <__assert_fail@plt+0x268d0>
   37cac:	b	37d14 <__assert_fail@plt+0x268e0>
   37cb0:	cmn	r7, #1
   37cb4:	ble	37cf4 <__assert_fail@plt+0x268c0>
   37cb8:	cmn	r0, #1
   37cbc:	beq	37d04 <__assert_fail@plt+0x268d0>
   37cc0:	mov	r6, #-2147483648	; 0x80000000
   37cc4:	mvn	r4, #-2147483648	; 0x80000000
   37cc8:	sdiv	r6, r6, r0
   37ccc:	cmp	r6, r7
   37cd0:	bge	37d04 <__assert_fail@plt+0x268d0>
   37cd4:	b	37d14 <__assert_fail@plt+0x268e0>
   37cd8:	beq	37d04 <__assert_fail@plt+0x268d0>
   37cdc:	mov	r6, #-2147483648	; 0x80000000
   37ce0:	mvn	r4, #-2147483648	; 0x80000000
   37ce4:	sdiv	r6, r6, r7
   37ce8:	cmp	r6, r0
   37cec:	bge	37d04 <__assert_fail@plt+0x268d0>
   37cf0:	b	37d14 <__assert_fail@plt+0x268e0>
   37cf4:	mvn	r4, #-2147483648	; 0x80000000
   37cf8:	sdiv	r6, r4, r0
   37cfc:	cmp	r7, r6
   37d00:	blt	37d14 <__assert_fail@plt+0x268e0>
   37d04:	mul	r6, r7, r0
   37d08:	mov	r4, #64	; 0x40
   37d0c:	cmp	r6, #63	; 0x3f
   37d10:	bgt	37d1c <__assert_fail@plt+0x268e8>
   37d14:	sdiv	r7, r4, r0
   37d18:	mul	r6, r7, r0
   37d1c:	cmp	r5, #0
   37d20:	moveq	r4, #0
   37d24:	streq	r4, [r8]
   37d28:	sub	r4, r7, r1
   37d2c:	cmp	r4, r2
   37d30:	bge	37ddc <__assert_fail@plt+0x269a8>
   37d34:	add	r7, r1, r2
   37d38:	mov	r6, #0
   37d3c:	mov	r2, #0
   37d40:	cmp	r7, r3
   37d44:	movwgt	r6, #1
   37d48:	cmn	r3, #1
   37d4c:	movwgt	r2, #1
   37d50:	cmp	r7, r1
   37d54:	bvs	37e10 <__assert_fail@plt+0x269dc>
   37d58:	ands	r1, r2, r6
   37d5c:	bne	37e10 <__assert_fail@plt+0x269dc>
   37d60:	cmn	r0, #1
   37d64:	ble	37d8c <__assert_fail@plt+0x26958>
   37d68:	cmp	r0, #0
   37d6c:	beq	37dd8 <__assert_fail@plt+0x269a4>
   37d70:	cmn	r7, #1
   37d74:	ble	37db0 <__assert_fail@plt+0x2697c>
   37d78:	mvn	r1, #-2147483648	; 0x80000000
   37d7c:	udiv	r1, r1, r0
   37d80:	cmp	r1, r7
   37d84:	bge	37dd8 <__assert_fail@plt+0x269a4>
   37d88:	b	37e10 <__assert_fail@plt+0x269dc>
   37d8c:	cmn	r7, #1
   37d90:	ble	37dc8 <__assert_fail@plt+0x26994>
   37d94:	cmn	r0, #1
   37d98:	beq	37dd8 <__assert_fail@plt+0x269a4>
   37d9c:	mov	r1, #-2147483648	; 0x80000000
   37da0:	sdiv	r1, r1, r0
   37da4:	cmp	r1, r7
   37da8:	bge	37dd8 <__assert_fail@plt+0x269a4>
   37dac:	b	37e10 <__assert_fail@plt+0x269dc>
   37db0:	beq	37dd8 <__assert_fail@plt+0x269a4>
   37db4:	mov	r1, #-2147483648	; 0x80000000
   37db8:	sdiv	r1, r1, r7
   37dbc:	cmp	r1, r0
   37dc0:	bge	37dd8 <__assert_fail@plt+0x269a4>
   37dc4:	b	37e10 <__assert_fail@plt+0x269dc>
   37dc8:	mvn	r1, #-2147483648	; 0x80000000
   37dcc:	sdiv	r1, r1, r0
   37dd0:	cmp	r7, r1
   37dd4:	blt	37e10 <__assert_fail@plt+0x269dc>
   37dd8:	mul	r6, r7, r0
   37ddc:	mov	r0, r5
   37de0:	mov	r1, r6
   37de4:	bl	38020 <__assert_fail@plt+0x26bec>
   37de8:	cmp	r6, #0
   37dec:	movwne	r6, #1
   37df0:	cmp	r0, #0
   37df4:	bne	37e08 <__assert_fail@plt+0x269d4>
   37df8:	clz	r1, r5
   37dfc:	lsr	r1, r1, #5
   37e00:	orrs	r1, r1, r6
   37e04:	bne	37e10 <__assert_fail@plt+0x269dc>
   37e08:	str	r7, [r8]
   37e0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   37e10:	bl	37f58 <__assert_fail@plt+0x26b24>
   37e14:	push	{fp, lr}
   37e18:	mov	fp, sp
   37e1c:	mov	r1, #1
   37e20:	bl	37f9c <__assert_fail@plt+0x26b68>
   37e24:	cmp	r0, #0
   37e28:	popne	{fp, pc}
   37e2c:	bl	37f58 <__assert_fail@plt+0x26b24>
   37e30:	push	{fp, lr}
   37e34:	mov	fp, sp
   37e38:	bl	37f9c <__assert_fail@plt+0x26b68>
   37e3c:	cmp	r0, #0
   37e40:	popne	{fp, pc}
   37e44:	bl	37f58 <__assert_fail@plt+0x26b24>
   37e48:	push	{fp, lr}
   37e4c:	mov	fp, sp
   37e50:	mov	r1, #1
   37e54:	bl	37f9c <__assert_fail@plt+0x26b68>
   37e58:	cmp	r0, #0
   37e5c:	popne	{fp, pc}
   37e60:	bl	37f58 <__assert_fail@plt+0x26b24>
   37e64:	push	{fp, lr}
   37e68:	mov	fp, sp
   37e6c:	bl	37f9c <__assert_fail@plt+0x26b68>
   37e70:	cmp	r0, #0
   37e74:	popne	{fp, pc}
   37e78:	bl	37f58 <__assert_fail@plt+0x26b24>
   37e7c:	push	{r4, r5, fp, lr}
   37e80:	add	fp, sp, #8
   37e84:	mov	r5, r0
   37e88:	mov	r0, r1
   37e8c:	mov	r4, r1
   37e90:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   37e94:	cmp	r0, #0
   37e98:	beq	37eac <__assert_fail@plt+0x26a78>
   37e9c:	mov	r1, r5
   37ea0:	mov	r2, r4
   37ea4:	pop	{r4, r5, fp, lr}
   37ea8:	b	111e8 <memcpy@plt>
   37eac:	bl	37f58 <__assert_fail@plt+0x26b24>
   37eb0:	push	{r4, r5, fp, lr}
   37eb4:	add	fp, sp, #8
   37eb8:	mov	r5, r0
   37ebc:	mov	r0, r1
   37ec0:	mov	r4, r1
   37ec4:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   37ec8:	cmp	r0, #0
   37ecc:	beq	37ee0 <__assert_fail@plt+0x26aac>
   37ed0:	mov	r1, r5
   37ed4:	mov	r2, r4
   37ed8:	pop	{r4, r5, fp, lr}
   37edc:	b	111e8 <memcpy@plt>
   37ee0:	bl	37f58 <__assert_fail@plt+0x26b24>
   37ee4:	push	{r4, r5, fp, lr}
   37ee8:	add	fp, sp, #8
   37eec:	mov	r5, r0
   37ef0:	add	r0, r1, #1
   37ef4:	mov	r4, r1
   37ef8:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   37efc:	cmp	r0, #0
   37f00:	beq	37f1c <__assert_fail@plt+0x26ae8>
   37f04:	mov	r1, #0
   37f08:	mov	r2, r4
   37f0c:	strb	r1, [r0, r4]
   37f10:	mov	r1, r5
   37f14:	pop	{r4, r5, fp, lr}
   37f18:	b	111e8 <memcpy@plt>
   37f1c:	bl	37f58 <__assert_fail@plt+0x26b24>
   37f20:	push	{r4, r5, fp, lr}
   37f24:	add	fp, sp, #8
   37f28:	mov	r4, r0
   37f2c:	bl	1132c <strlen@plt>
   37f30:	add	r5, r0, #1
   37f34:	mov	r0, r5
   37f38:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   37f3c:	cmp	r0, #0
   37f40:	beq	37f54 <__assert_fail@plt+0x26b20>
   37f44:	mov	r1, r4
   37f48:	mov	r2, r5
   37f4c:	pop	{r4, r5, fp, lr}
   37f50:	b	111e8 <memcpy@plt>
   37f54:	bl	37f58 <__assert_fail@plt+0x26b24>
   37f58:	push	{fp, lr}
   37f5c:	mov	fp, sp
   37f60:	movw	r0, #45344	; 0xb120
   37f64:	movw	r1, #43825	; 0xab31
   37f68:	mov	r2, #5
   37f6c:	movt	r0, #4
   37f70:	movt	r1, #3
   37f74:	ldr	r4, [r0]
   37f78:	mov	r0, #0
   37f7c:	bl	11218 <dcgettext@plt>
   37f80:	movw	r2, #37248	; 0x9180
   37f84:	mov	r3, r0
   37f88:	mov	r0, r4
   37f8c:	mov	r1, #0
   37f90:	movt	r2, #3
   37f94:	bl	11290 <error@plt>
   37f98:	bl	1141c <abort@plt>
   37f9c:	clz	r2, r1
   37fa0:	clz	r3, r0
   37fa4:	lsr	r2, r2, #5
   37fa8:	lsr	r3, r3, #5
   37fac:	orrs	r2, r3, r2
   37fb0:	movwne	r1, #1
   37fb4:	movwne	r0, #1
   37fb8:	cmp	r1, #0
   37fbc:	beq	37fec <__assert_fail@plt+0x26bb8>
   37fc0:	mvn	r2, #-2147483648	; 0x80000000
   37fc4:	udiv	r2, r2, r1
   37fc8:	cmp	r2, r0
   37fcc:	bcs	37fec <__assert_fail@plt+0x26bb8>
   37fd0:	push	{fp, lr}
   37fd4:	mov	fp, sp
   37fd8:	bl	11344 <__errno_location@plt>
   37fdc:	mov	r1, #12
   37fe0:	str	r1, [r0]
   37fe4:	mov	r0, #0
   37fe8:	pop	{fp, pc}
   37fec:	b	11140 <calloc@plt>
   37ff0:	cmp	r0, #0
   37ff4:	movweq	r0, #1
   37ff8:	cmn	r0, #1
   37ffc:	ble	38004 <__assert_fail@plt+0x26bd0>
   38000:	b	112b4 <malloc@plt>
   38004:	push	{fp, lr}
   38008:	mov	fp, sp
   3800c:	bl	11344 <__errno_location@plt>
   38010:	mov	r1, #12
   38014:	str	r1, [r0]
   38018:	mov	r0, #0
   3801c:	pop	{fp, pc}
   38020:	push	{fp, lr}
   38024:	mov	fp, sp
   38028:	cmp	r0, #0
   3802c:	beq	38048 <__assert_fail@plt+0x26c14>
   38030:	cmp	r1, #0
   38034:	beq	38054 <__assert_fail@plt+0x26c20>
   38038:	cmn	r1, #1
   3803c:	ble	38060 <__assert_fail@plt+0x26c2c>
   38040:	pop	{fp, lr}
   38044:	b	11224 <realloc@plt>
   38048:	mov	r0, r1
   3804c:	pop	{fp, lr}
   38050:	b	37ff0 <__assert_fail@plt+0x26bbc>
   38054:	bl	138e8 <__assert_fail@plt+0x24b4>
   38058:	mov	r0, #0
   3805c:	pop	{fp, pc}
   38060:	bl	11344 <__errno_location@plt>
   38064:	mov	r1, #12
   38068:	str	r1, [r0]
   3806c:	mov	r0, #0
   38070:	pop	{fp, pc}
   38074:	push	{r4, r5, r6, sl, fp, lr}
   38078:	add	fp, sp, #16
   3807c:	mov	r4, r0
   38080:	bl	11278 <__fpending@plt>
   38084:	ldr	r6, [r4]
   38088:	mov	r5, r0
   3808c:	mov	r0, r4
   38090:	bl	381bc <__assert_fail@plt+0x26d88>
   38094:	tst	r6, #32
   38098:	bne	380d0 <__assert_fail@plt+0x26c9c>
   3809c:	cmp	r0, #0
   380a0:	mov	r4, r0
   380a4:	mvnne	r4, #0
   380a8:	cmp	r5, #0
   380ac:	bne	380dc <__assert_fail@plt+0x26ca8>
   380b0:	cmp	r0, #0
   380b4:	beq	380dc <__assert_fail@plt+0x26ca8>
   380b8:	bl	11344 <__errno_location@plt>
   380bc:	ldr	r0, [r0]
   380c0:	subs	r4, r0, #9
   380c4:	mvnne	r4, #0
   380c8:	mov	r0, r4
   380cc:	pop	{r4, r5, r6, sl, fp, pc}
   380d0:	mvn	r4, #0
   380d4:	cmp	r0, #0
   380d8:	beq	380e4 <__assert_fail@plt+0x26cb0>
   380dc:	mov	r0, r4
   380e0:	pop	{r4, r5, r6, sl, fp, pc}
   380e4:	bl	11344 <__errno_location@plt>
   380e8:	mov	r1, #0
   380ec:	str	r1, [r0]
   380f0:	mov	r0, r4
   380f4:	pop	{r4, r5, r6, sl, fp, pc}
   380f8:	push	{r4, r5, r6, r7, fp, lr}
   380fc:	add	fp, sp, #16
   38100:	mov	r4, r0
   38104:	ldr	r0, [r0, #4]
   38108:	mov	r5, r1
   3810c:	cmp	r0, r1
   38110:	bcs	38144 <__assert_fail@plt+0x26d10>
   38114:	mov	r6, r3
   38118:	cmp	r3, #0
   3811c:	beq	38150 <__assert_fail@plt+0x26d1c>
   38120:	mvn	r0, #0
   38124:	udiv	r0, r0, r6
   38128:	cmp	r0, r5
   3812c:	bcs	38150 <__assert_fail@plt+0x26d1c>
   38130:	bl	11344 <__errno_location@plt>
   38134:	mov	r1, #12
   38138:	str	r1, [r0]
   3813c:	mov	r0, #0
   38140:	pop	{r4, r5, r6, r7, fp, pc}
   38144:	mov	r0, #1
   38148:	str	r5, [r4]
   3814c:	pop	{r4, r5, r6, r7, fp, pc}
   38150:	ldr	r0, [r4, #8]
   38154:	mul	r1, r6, r5
   38158:	cmp	r0, r2
   3815c:	beq	38174 <__assert_fail@plt+0x26d40>
   38160:	bl	38020 <__assert_fail@plt+0x26bec>
   38164:	mov	r7, r0
   38168:	cmp	r0, #0
   3816c:	bne	381a4 <__assert_fail@plt+0x26d70>
   38170:	b	381b4 <__assert_fail@plt+0x26d80>
   38174:	mov	r0, r1
   38178:	bl	37ff0 <__assert_fail@plt+0x26bbc>
   3817c:	cmp	r0, #0
   38180:	beq	381b4 <__assert_fail@plt+0x26d80>
   38184:	ldr	r1, [r4, #8]
   38188:	mov	r7, r0
   3818c:	cmp	r1, #0
   38190:	beq	381a4 <__assert_fail@plt+0x26d70>
   38194:	ldr	r0, [r4]
   38198:	mul	r2, r0, r6
   3819c:	mov	r0, r7
   381a0:	bl	111e8 <memcpy@plt>
   381a4:	mov	r0, #1
   381a8:	str	r5, [r4]
   381ac:	stmib	r4, {r5, r7}
   381b0:	pop	{r4, r5, r6, r7, fp, pc}
   381b4:	mov	r0, #0
   381b8:	pop	{r4, r5, r6, r7, fp, pc}
   381bc:	push	{r4, r5, r6, sl, fp, lr}
   381c0:	add	fp, sp, #16
   381c4:	sub	sp, sp, #8
   381c8:	mov	r4, r0
   381cc:	bl	1138c <fileno@plt>
   381d0:	cmn	r0, #1
   381d4:	ble	38248 <__assert_fail@plt+0x26e14>
   381d8:	mov	r0, r4
   381dc:	bl	112cc <__freading@plt>
   381e0:	cmp	r0, #0
   381e4:	beq	38210 <__assert_fail@plt+0x26ddc>
   381e8:	mov	r0, r4
   381ec:	bl	1138c <fileno@plt>
   381f0:	mov	r1, #1
   381f4:	mov	r2, #0
   381f8:	mov	r3, #0
   381fc:	str	r1, [sp]
   38200:	bl	11260 <lseek64@plt>
   38204:	and	r0, r0, r1
   38208:	cmn	r0, #1
   3820c:	beq	38248 <__assert_fail@plt+0x26e14>
   38210:	mov	r0, r4
   38214:	bl	38258 <__assert_fail@plt+0x26e24>
   38218:	cmp	r0, #0
   3821c:	beq	38248 <__assert_fail@plt+0x26e14>
   38220:	bl	11344 <__errno_location@plt>
   38224:	ldr	r6, [r0]
   38228:	mov	r5, r0
   3822c:	mov	r0, r4
   38230:	bl	113b0 <fclose@plt>
   38234:	cmp	r6, #0
   38238:	strne	r6, [r5]
   3823c:	mvnne	r0, #0
   38240:	sub	sp, fp, #16
   38244:	pop	{r4, r5, r6, sl, fp, pc}
   38248:	mov	r0, r4
   3824c:	sub	sp, fp, #16
   38250:	pop	{r4, r5, r6, sl, fp, lr}
   38254:	b	113b0 <fclose@plt>
   38258:	push	{r4, sl, fp, lr}
   3825c:	add	fp, sp, #8
   38260:	sub	sp, sp, #8
   38264:	mov	r4, r0
   38268:	cmp	r0, #0
   3826c:	beq	382a4 <__assert_fail@plt+0x26e70>
   38270:	mov	r0, r4
   38274:	bl	112cc <__freading@plt>
   38278:	cmp	r0, #0
   3827c:	beq	382a4 <__assert_fail@plt+0x26e70>
   38280:	ldrb	r0, [r4, #1]
   38284:	tst	r0, #1
   38288:	beq	382a4 <__assert_fail@plt+0x26e70>
   3828c:	mov	r0, #1
   38290:	mov	r2, #0
   38294:	mov	r3, #0
   38298:	str	r0, [sp]
   3829c:	mov	r0, r4
   382a0:	bl	382b4 <__assert_fail@plt+0x26e80>
   382a4:	mov	r0, r4
   382a8:	sub	sp, fp, #8
   382ac:	pop	{r4, sl, fp, lr}
   382b0:	b	111a0 <fflush@plt>
   382b4:	push	{r4, r5, r6, r7, fp, lr}
   382b8:	add	fp, sp, #16
   382bc:	sub	sp, sp, #8
   382c0:	mov	r4, r0
   382c4:	ldr	r0, [r0, #4]
   382c8:	mov	r5, r3
   382cc:	mov	r6, r2
   382d0:	ldr	r1, [r4, #8]
   382d4:	cmp	r1, r0
   382d8:	bne	382f4 <__assert_fail@plt+0x26ec0>
   382dc:	ldrd	r0, [r4, #16]
   382e0:	cmp	r1, r0
   382e4:	bne	382f4 <__assert_fail@plt+0x26ec0>
   382e8:	ldr	r0, [r4, #36]	; 0x24
   382ec:	cmp	r0, #0
   382f0:	beq	3830c <__assert_fail@plt+0x26ed8>
   382f4:	mov	r0, r4
   382f8:	mov	r2, r6
   382fc:	mov	r3, r5
   38300:	sub	sp, fp, #16
   38304:	pop	{r4, r5, r6, r7, fp, lr}
   38308:	b	113bc <fseeko64@plt>
   3830c:	ldr	r7, [fp, #8]
   38310:	mov	r0, r4
   38314:	bl	1138c <fileno@plt>
   38318:	mov	r2, r6
   3831c:	mov	r3, r5
   38320:	str	r7, [sp]
   38324:	bl	11260 <lseek64@plt>
   38328:	and	r2, r0, r1
   3832c:	cmn	r2, #1
   38330:	beq	38350 <__assert_fail@plt+0x26f1c>
   38334:	strd	r0, [r4, #80]	; 0x50
   38338:	ldr	r0, [r4]
   3833c:	bic	r0, r0, #16
   38340:	str	r0, [r4]
   38344:	mov	r0, #0
   38348:	sub	sp, fp, #16
   3834c:	pop	{r4, r5, r6, r7, fp, pc}
   38350:	mvn	r0, #0
   38354:	sub	sp, fp, #16
   38358:	pop	{r4, r5, r6, r7, fp, pc}
   3835c:	push	{fp, lr}
   38360:	mov	fp, sp
   38364:	mov	r0, #14
   38368:	bl	113ec <nl_langinfo@plt>
   3836c:	movw	r1, #36891	; 0x901b
   38370:	cmp	r0, #0
   38374:	movt	r1, #3
   38378:	movne	r1, r0
   3837c:	movw	r0, #43842	; 0xab42
   38380:	ldrb	r2, [r1]
   38384:	movt	r0, #3
   38388:	cmp	r2, #0
   3838c:	movne	r0, r1
   38390:	pop	{fp, pc}
   38394:	push	{r4, sl, fp, lr}
   38398:	add	fp, sp, #8
   3839c:	mov	r4, r0
   383a0:	bl	111ac <wcwidth@plt>
   383a4:	cmn	r0, #1
   383a8:	popgt	{r4, sl, fp, pc}
   383ac:	mov	r0, r4
   383b0:	bl	1123c <iswcntrl@plt>
   383b4:	clz	r0, r0
   383b8:	lsr	r0, r0, #5
   383bc:	pop	{r4, sl, fp, pc}
   383c0:	push	{r4, r5, r6, sl, fp, lr}
   383c4:	add	fp, sp, #16
   383c8:	mov	r4, r0
   383cc:	mov	r0, r1
   383d0:	mov	r5, r1
   383d4:	ldr	r1, [r0], #16
   383d8:	cmp	r1, r0
   383dc:	beq	383e8 <__assert_fail@plt+0x26fb4>
   383e0:	mov	r6, r1
   383e4:	b	383f8 <__assert_fail@plt+0x26fc4>
   383e8:	ldr	r2, [r5, #4]
   383ec:	add	r6, r4, #16
   383f0:	mov	r0, r6
   383f4:	bl	111e8 <memcpy@plt>
   383f8:	str	r6, [r4]
   383fc:	ldr	r0, [r5, #4]
   38400:	str	r0, [r4, #4]
   38404:	ldrb	r0, [r5, #8]
   38408:	strb	r0, [r4, #8]
   3840c:	cmp	r0, #0
   38410:	ldrne	r0, [r5, #12]
   38414:	strne	r0, [r4, #12]
   38418:	pop	{r4, r5, r6, sl, fp, pc}
   3841c:	movw	r2, #43848	; 0xab48
   38420:	ubfx	r1, r0, #5, #3
   38424:	and	r0, r0, #31
   38428:	movt	r2, #3
   3842c:	ldr	r1, [r2, r1, lsl #2]
   38430:	mov	r2, #1
   38434:	and	r0, r1, r2, lsl r0
   38438:	cmp	r0, #0
   3843c:	movwne	r0, #1
   38440:	bx	lr
   38444:	push	{r4, r5, r6, r7, fp, lr}
   38448:	add	fp, sp, #16
   3844c:	sub	sp, sp, #8
   38450:	cmp	r0, #0
   38454:	add	r5, sp, #4
   38458:	mov	r7, r2
   3845c:	mov	r4, r1
   38460:	movne	r5, r0
   38464:	mov	r0, r5
   38468:	bl	11284 <mbrtowc@plt>
   3846c:	mov	r6, r0
   38470:	cmp	r7, #0
   38474:	beq	3849c <__assert_fail@plt+0x27068>
   38478:	cmn	r6, #2
   3847c:	bcc	3849c <__assert_fail@plt+0x27068>
   38480:	mov	r0, #0
   38484:	bl	384e4 <__assert_fail@plt+0x270b0>
   38488:	cmp	r0, #0
   3848c:	bne	3849c <__assert_fail@plt+0x27068>
   38490:	ldrb	r0, [r4]
   38494:	mov	r6, #1
   38498:	str	r0, [r5]
   3849c:	mov	r0, r6
   384a0:	sub	sp, fp, #16
   384a4:	pop	{r4, r5, r6, r7, fp, pc}
   384a8:	cmp	r2, #0
   384ac:	beq	384dc <__assert_fail@plt+0x270a8>
   384b0:	mvn	r3, #0
   384b4:	udiv	r3, r3, r2
   384b8:	cmp	r3, r1
   384bc:	bcs	384dc <__assert_fail@plt+0x270a8>
   384c0:	push	{fp, lr}
   384c4:	mov	fp, sp
   384c8:	bl	11344 <__errno_location@plt>
   384cc:	mov	r1, #12
   384d0:	str	r1, [r0]
   384d4:	mov	r0, #0
   384d8:	pop	{fp, pc}
   384dc:	mul	r1, r2, r1
   384e0:	b	38020 <__assert_fail@plt+0x26bec>
   384e4:	push	{r4, sl, fp, lr}
   384e8:	add	fp, sp, #8
   384ec:	sub	sp, sp, #264	; 0x108
   384f0:	add	r1, sp, #7
   384f4:	movw	r2, #257	; 0x101
   384f8:	bl	38550 <__assert_fail@plt+0x2711c>
   384fc:	mov	r4, #0
   38500:	cmp	r0, #0
   38504:	bne	38544 <__assert_fail@plt+0x27110>
   38508:	movw	r1, #43880	; 0xab68
   3850c:	add	r0, sp, #7
   38510:	mov	r2, #2
   38514:	movt	r1, #3
   38518:	bl	11320 <bcmp@plt>
   3851c:	cmp	r0, #0
   38520:	beq	38544 <__assert_fail@plt+0x27110>
   38524:	movw	r1, #43882	; 0xab6a
   38528:	add	r0, sp, #7
   3852c:	mov	r2, #6
   38530:	movt	r1, #3
   38534:	bl	11320 <bcmp@plt>
   38538:	cmp	r0, #0
   3853c:	mov	r4, r0
   38540:	movwne	r4, #1
   38544:	mov	r0, r4
   38548:	sub	sp, fp, #8
   3854c:	pop	{r4, sl, fp, pc}
   38550:	push	{r4, r5, r6, r7, fp, lr}
   38554:	add	fp, sp, #16
   38558:	mov	r4, r1
   3855c:	mov	r1, #0
   38560:	mov	r6, r2
   38564:	bl	113d4 <setlocale@plt>
   38568:	cmp	r0, #0
   3856c:	beq	3859c <__assert_fail@plt+0x27168>
   38570:	mov	r7, r0
   38574:	bl	1132c <strlen@plt>
   38578:	cmp	r0, r6
   3857c:	bcs	385b8 <__assert_fail@plt+0x27184>
   38580:	add	r2, r0, #1
   38584:	mov	r0, r4
   38588:	mov	r1, r7
   3858c:	bl	111e8 <memcpy@plt>
   38590:	mov	r5, #0
   38594:	mov	r0, r5
   38598:	pop	{r4, r5, r6, r7, fp, pc}
   3859c:	mov	r5, #22
   385a0:	cmp	r6, #0
   385a4:	beq	385e0 <__assert_fail@plt+0x271ac>
   385a8:	mov	r0, #0
   385ac:	strb	r0, [r4]
   385b0:	mov	r0, r5
   385b4:	pop	{r4, r5, r6, r7, fp, pc}
   385b8:	mov	r5, #34	; 0x22
   385bc:	cmp	r6, #0
   385c0:	beq	385e0 <__assert_fail@plt+0x271ac>
   385c4:	sub	r6, r6, #1
   385c8:	mov	r0, r4
   385cc:	mov	r1, r7
   385d0:	mov	r2, r6
   385d4:	bl	111e8 <memcpy@plt>
   385d8:	mov	r0, #0
   385dc:	strb	r0, [r4, r6]
   385e0:	mov	r0, r5
   385e4:	pop	{r4, r5, r6, r7, fp, pc}
   385e8:	mov	r1, #0
   385ec:	b	113d4 <setlocale@plt>
   385f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   385f4:	mov	r7, r0
   385f8:	ldr	r6, [pc, #72]	; 38648 <__assert_fail@plt+0x27214>
   385fc:	ldr	r5, [pc, #72]	; 3864c <__assert_fail@plt+0x27218>
   38600:	add	r6, pc, r6
   38604:	add	r5, pc, r5
   38608:	sub	r6, r6, r5
   3860c:	mov	r8, r1
   38610:	mov	r9, r2
   38614:	bl	11114 <pthread_mutex_unlock@plt-0x20>
   38618:	asrs	r6, r6, #2
   3861c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   38620:	mov	r4, #0
   38624:	add	r4, r4, #1
   38628:	ldr	r3, [r5], #4
   3862c:	mov	r2, r9
   38630:	mov	r1, r8
   38634:	mov	r0, r7
   38638:	blx	r3
   3863c:	cmp	r6, r4
   38640:	bne	38624 <__assert_fail@plt+0x271f0>
   38644:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   38648:	andeq	r2, r1, r4, lsl #18
   3864c:	strdeq	r2, [r1], -ip
   38650:	bx	lr
   38654:	ldr	r3, [pc, #12]	; 38668 <__assert_fail@plt+0x27234>
   38658:	mov	r1, #0
   3865c:	add	r3, pc, r3
   38660:	ldr	r2, [r3]
   38664:	b	1135c <__cxa_atexit@plt>
   38668:			; <UNDEFINED> instruction: 0x00012ab8

Disassembly of section .fini:

0003866c <.fini>:
   3866c:	push	{r3, lr}
   38670:	pop	{r3, pc}
