
../repos/eddieantonio-ocreval-3ab279a/nonstopacc/nonstopacc:     file format elf32-littlearm


Disassembly of section .init:

00010b1c <.init>:
   10b1c:	push	{r3, lr}
   10b20:	bl	10d34 <__assert_fail@plt+0x48>
   10b24:	pop	{r3, pc}

Disassembly of section .plt:

00010b28 <calloc@plt-0x14>:
   10b28:	push	{lr}		; (str lr, [sp, #-4]!)
   10b2c:	ldr	lr, [pc, #4]	; 10b38 <calloc@plt-0x4>
   10b30:	add	lr, pc, lr
   10b34:	ldr	pc, [lr, #8]!
   10b38:	andeq	r6, r1, r8, asr #9

00010b3c <calloc@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #90112	; 0x16000
   10b44:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b48 <strcmp@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #90112	; 0x16000
   10b50:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b54 <printf@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #90112	; 0x16000
   10b5c:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b60 <fopen@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #90112	; 0x16000
   10b68:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b6c <free@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #90112	; 0x16000
   10b74:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b78 <utf8proc_get_property@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #90112	; 0x16000
   10b80:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b84 <fgets@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #90112	; 0x16000
   10b8c:	ldr	pc, [ip, #1176]!	; 0x498

00010b90 <utf8proc_encode_char@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #90112	; 0x16000
   10b98:	ldr	pc, [ip, #1168]!	; 0x490

00010b9c <strdup@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #90112	; 0x16000
   10ba4:	ldr	pc, [ip, #1160]!	; 0x488

00010ba8 <rewind@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #90112	; 0x16000
   10bb0:	ldr	pc, [ip, #1152]!	; 0x480

00010bb4 <unlink@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #90112	; 0x16000
   10bbc:	ldr	pc, [ip, #1144]!	; 0x478

00010bc0 <utf8proc_tolower@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #90112	; 0x16000
   10bc8:	ldr	pc, [ip, #1136]!	; 0x470

00010bcc <__xstat@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #90112	; 0x16000
   10bd4:	ldr	pc, [ip, #1128]!	; 0x468

00010bd8 <fwrite@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #90112	; 0x16000
   10be0:	ldr	pc, [ip, #1120]!	; 0x460

00010be4 <fread@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #90112	; 0x16000
   10bec:	ldr	pc, [ip, #1112]!	; 0x458

00010bf0 <utf8proc_iterate@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #90112	; 0x16000
   10bf8:	ldr	pc, [ip, #1104]!	; 0x450

00010bfc <malloc@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #90112	; 0x16000
   10c04:	ldr	pc, [ip, #1096]!	; 0x448

00010c08 <__libc_start_main@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #90112	; 0x16000
   10c10:	ldr	pc, [ip, #1088]!	; 0x440

00010c14 <__sysv_signal@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #90112	; 0x16000
   10c1c:	ldr	pc, [ip, #1080]!	; 0x438

00010c20 <__gmon_start__@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #90112	; 0x16000
   10c28:	ldr	pc, [ip, #1072]!	; 0x430

00010c2c <getpid@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #90112	; 0x16000
   10c34:	ldr	pc, [ip, #1064]!	; 0x428

00010c38 <exit@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #90112	; 0x16000
   10c40:	ldr	pc, [ip, #1056]!	; 0x420

00010c44 <utf8proc_category@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #90112	; 0x16000
   10c4c:	ldr	pc, [ip, #1048]!	; 0x418

00010c50 <strlen@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #90112	; 0x16000
   10c58:	ldr	pc, [ip, #1040]!	; 0x410

00010c5c <fprintf@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #90112	; 0x16000
   10c64:	ldr	pc, [ip, #1032]!	; 0x408

00010c68 <__isoc99_sscanf@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #90112	; 0x16000
   10c70:	ldr	pc, [ip, #1024]!	; 0x400

00010c74 <fclose@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #90112	; 0x16000
   10c7c:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c80 <utf8proc_NFC@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #90112	; 0x16000
   10c88:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c8c <fputc@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #90112	; 0x16000
   10c94:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c98 <sprintf@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #90112	; 0x16000
   10ca0:	ldr	pc, [ip, #992]!	; 0x3e0

00010ca4 <atoi@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #90112	; 0x16000
   10cac:	ldr	pc, [ip, #984]!	; 0x3d8

00010cb0 <utf8proc_errmsg@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #90112	; 0x16000
   10cb8:	ldr	pc, [ip, #976]!	; 0x3d0

00010cbc <fputs@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #90112	; 0x16000
   10cc4:	ldr	pc, [ip, #968]!	; 0x3c8

00010cc8 <strncmp@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #90112	; 0x16000
   10cd0:	ldr	pc, [ip, #960]!	; 0x3c0

00010cd4 <abort@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #90112	; 0x16000
   10cdc:	ldr	pc, [ip, #952]!	; 0x3b8

00010ce0 <getc@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #90112	; 0x16000
   10ce8:	ldr	pc, [ip, #944]!	; 0x3b0

00010cec <__assert_fail@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #90112	; 0x16000
   10cf4:	ldr	pc, [ip, #936]!	; 0x3a8

Disassembly of section .text:

00010cf8 <error@@Base-0x16e8>:
   10cf8:	mov	fp, #0
   10cfc:	mov	lr, #0
   10d00:	pop	{r1}		; (ldr r1, [sp], #4)
   10d04:	mov	r2, sp
   10d08:	push	{r2}		; (str r2, [sp, #-4]!)
   10d0c:	push	{r0}		; (str r0, [sp, #-4]!)
   10d10:	ldr	ip, [pc, #16]	; 10d28 <__assert_fail@plt+0x3c>
   10d14:	push	{ip}		; (str ip, [sp, #-4]!)
   10d18:	ldr	r0, [pc, #12]	; 10d2c <__assert_fail@plt+0x40>
   10d1c:	ldr	r3, [pc, #12]	; 10d30 <__assert_fail@plt+0x44>
   10d20:	bl	10c08 <__libc_start_main@plt>
   10d24:	bl	10cd4 <abort@plt>
   10d28:	strheq	r3, [r1], -r4
   10d2c:	andeq	r0, r1, r8, lsr #30
   10d30:	andeq	r3, r1, r4, asr r0
   10d34:	ldr	r3, [pc, #20]	; 10d50 <__assert_fail@plt+0x64>
   10d38:	ldr	r2, [pc, #20]	; 10d54 <__assert_fail@plt+0x68>
   10d3c:	add	r3, pc, r3
   10d40:	ldr	r2, [r3, r2]
   10d44:	cmp	r2, #0
   10d48:	bxeq	lr
   10d4c:	b	10c20 <__gmon_start__@plt>
   10d50:			; <UNDEFINED> instruction: 0x000162bc
   10d54:	andeq	r0, r0, r0, lsr #1
   10d58:	ldr	r0, [pc, #24]	; 10d78 <__assert_fail@plt+0x8c>
   10d5c:	ldr	r3, [pc, #24]	; 10d7c <__assert_fail@plt+0x90>
   10d60:	cmp	r3, r0
   10d64:	bxeq	lr
   10d68:	ldr	r3, [pc, #16]	; 10d80 <__assert_fail@plt+0x94>
   10d6c:	cmp	r3, #0
   10d70:	bxeq	lr
   10d74:	bx	r3
   10d78:	andeq	r7, r2, r0, asr #1
   10d7c:	andeq	r7, r2, r0, asr #1
   10d80:	andeq	r0, r0, r0
   10d84:	ldr	r0, [pc, #36]	; 10db0 <__assert_fail@plt+0xc4>
   10d88:	ldr	r1, [pc, #36]	; 10db4 <__assert_fail@plt+0xc8>
   10d8c:	sub	r1, r1, r0
   10d90:	asr	r1, r1, #2
   10d94:	add	r1, r1, r1, lsr #31
   10d98:	asrs	r1, r1, #1
   10d9c:	bxeq	lr
   10da0:	ldr	r3, [pc, #16]	; 10db8 <__assert_fail@plt+0xcc>
   10da4:	cmp	r3, #0
   10da8:	bxeq	lr
   10dac:	bx	r3
   10db0:	andeq	r7, r2, r0, asr #1
   10db4:	andeq	r7, r2, r0, asr #1
   10db8:	andeq	r0, r0, r0
   10dbc:	push	{r4, lr}
   10dc0:	ldr	r4, [pc, #24]	; 10de0 <__assert_fail@plt+0xf4>
   10dc4:	ldrb	r3, [r4]
   10dc8:	cmp	r3, #0
   10dcc:	popne	{r4, pc}
   10dd0:	bl	10d58 <__assert_fail@plt+0x6c>
   10dd4:	mov	r3, #1
   10dd8:	strb	r3, [r4]
   10ddc:	pop	{r4, pc}
   10de0:	ldrdeq	r7, [r2], -r0
   10de4:	b	10d84 <__assert_fail@plt+0x98>
   10de8:	push	{fp, lr}
   10dec:	mov	fp, sp
   10df0:	bl	11854 <__assert_fail@plt+0xb68>
   10df4:	cmp	r0, #0
   10df8:	popeq	{fp, pc}
   10dfc:	ldr	r1, [r0, #12]
   10e00:	ldr	r0, [r0, #16]
   10e04:	movw	r2, #29000	; 0x7148
   10e08:	movt	r2, #2
   10e0c:	ldr	r3, [r2]
   10e10:	sub	r1, r3, r1
   10e14:	str	r1, [r2]
   10e18:	movw	r1, #46140	; 0xb43c
   10e1c:	movt	r1, #2
   10e20:	ldr	r2, [r1]
   10e24:	sub	r0, r2, r0
   10e28:	str	r0, [r1]
   10e2c:	pop	{fp, pc}
   10e30:	movw	r0, #46140	; 0xb43c
   10e34:	movt	r0, #2
   10e38:	ldr	r0, [r0]
   10e3c:	movw	r1, #29000	; 0x7148
   10e40:	movt	r1, #2
   10e44:	ldr	r2, [r1]
   10e48:	sub	r0, r2, r0
   10e4c:	movw	r3, #28884	; 0x70d4
   10e50:	movt	r3, #2
   10e54:	vldr	d16, [pc, #52]	; 10e90 <__assert_fail@plt+0x1a4>
   10e58:	ldr	r1, [r3]
   10e5c:	vmov	s0, r0
   10e60:	vmov	s2, r2
   10e64:	vcvt.f64.s32	d17, s0
   10e68:	vcvt.f64.s32	d18, s2
   10e6c:	vmul.f64	d16, d17, d16
   10e70:	add	r0, r1, #1
   10e74:	vdiv.f64	d16, d16, d18
   10e78:	str	r0, [r3]
   10e7c:	vmov	r2, r3, d16
   10e80:	movw	r0, #12500	; 0x30d4
   10e84:	movt	r0, #1
   10e88:	b	10b54 <printf@plt>
   10e8c:	nop	{0}
   10e90:	andeq	r0, r0, r0
   10e94:	subsmi	r0, r9, r0
   10e98:	push	{r4, r5, r6, r7, fp, lr}
   10e9c:	add	fp, sp, #16
   10ea0:	movw	r5, #29036	; 0x716c
   10ea4:	movt	r5, #2
   10ea8:	ldm	r5, {r0, r1}
   10eac:	movw	r6, #29000	; 0x7148
   10eb0:	movt	r6, #2
   10eb4:	str	r0, [r6]
   10eb8:	movw	r2, #46140	; 0xb43c
   10ebc:	movt	r2, #2
   10ec0:	str	r1, [r2]
   10ec4:	cmp	r0, #0
   10ec8:	beq	10f24 <__assert_fail@plt+0x238>
   10ecc:	bl	10e30 <__assert_fail@plt+0x144>
   10ed0:	movw	r0, #29020	; 0x715c
   10ed4:	movt	r0, #2
   10ed8:	ldr	r7, [r0]
   10edc:	cmp	r7, #0
   10ee0:	beq	10f24 <__assert_fail@plt+0x238>
   10ee4:	add	r4, r5, #992	; 0x3e0
   10ee8:	movw	r0, #9048	; 0x2358
   10eec:	add	r5, r5, r0
   10ef0:	ldr	r1, [r7, #8]
   10ef4:	mov	r0, r4
   10ef8:	bl	10de8 <__assert_fail@plt+0xfc>
   10efc:	ldr	r1, [r7, #8]
   10f00:	mov	r0, r5
   10f04:	bl	10de8 <__assert_fail@plt+0xfc>
   10f08:	ldr	r0, [r6]
   10f0c:	cmp	r0, #0
   10f10:	popeq	{r4, r5, r6, r7, fp, pc}
   10f14:	bl	10e30 <__assert_fail@plt+0x144>
   10f18:	ldr	r7, [r7, #4]
   10f1c:	cmp	r7, #0
   10f20:	bne	10ef0 <__assert_fail@plt+0x204>
   10f24:	pop	{r4, r5, r6, r7, fp, pc}
   10f28:	push	{fp, lr}
   10f2c:	mov	fp, sp
   10f30:	sub	sp, sp, #8
   10f34:	mov	r4, r1
   10f38:	str	r0, [sp, #4]
   10f3c:	add	r0, sp, #4
   10f40:	movw	r2, #12512	; 0x30e0
   10f44:	movt	r2, #1
   10f48:	mov	r3, #0
   10f4c:	bl	12260 <__assert_fail@plt+0x1574>
   10f50:	ldr	r0, [sp, #4]
   10f54:	cmp	r0, #2
   10f58:	bne	10fa0 <__assert_fail@plt+0x2b4>
   10f5c:	ldr	r1, [r4]
   10f60:	movw	r5, #29004	; 0x714c
   10f64:	movt	r5, #2
   10f68:	movw	r2, #28844	; 0x70ac
   10f6c:	movt	r2, #2
   10f70:	mov	r0, r5
   10f74:	bl	126cc <error@@Base+0x2ec>
   10f78:	movw	r0, #29020	; 0x715c
   10f7c:	movt	r0, #2
   10f80:	mov	r1, r5
   10f84:	bl	11a6c <__assert_fail@plt+0xd80>
   10f88:	ldr	r1, [r4, #4]
   10f8c:	movw	r0, #29036	; 0x716c
   10f90:	movt	r0, #2
   10f94:	bl	11028 <__assert_fail@plt+0x33c>
   10f98:	bl	10e98 <__assert_fail@plt+0x1ac>
   10f9c:	bl	123a0 <__assert_fail@plt+0x16b4>
   10fa0:	movw	r0, #12548	; 0x3104
   10fa4:	movt	r0, #1
   10fa8:	bl	123e0 <error@@Base>
   10fac:	andeq	r0, r0, r0
   10fb0:	ldm	r0, {r3, ip}
   10fb4:	add	r1, r3, r1
   10fb8:	add	r2, ip, r2
   10fbc:	stm	r0, {r1, r2}
   10fc0:	bx	lr
   10fc4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10fc8:	add	fp, sp, #24
   10fcc:	mov	r8, r3
   10fd0:	mov	r5, r2
   10fd4:	mov	r7, r1
   10fd8:	mov	r6, r0
   10fdc:	bl	11854 <__assert_fail@plt+0xb68>
   10fe0:	mov	r4, r0
   10fe4:	cmp	r0, #0
   10fe8:	bne	11014 <__assert_fail@plt+0x328>
   10fec:	mov	r0, #1
   10ff0:	mov	r1, #20
   10ff4:	bl	12040 <__assert_fail@plt+0x1354>
   10ff8:	mov	r4, r0
   10ffc:	mov	r0, r7
   11000:	bl	10b9c <strdup@plt>
   11004:	str	r0, [r4, #8]
   11008:	mov	r0, r6
   1100c:	mov	r1, r4
   11010:	bl	118fc <__assert_fail@plt+0xc10>
   11014:	add	r0, r4, #12
   11018:	mov	r1, r5
   1101c:	mov	r2, r8
   11020:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11024:	b	10fb0 <__assert_fail@plt+0x2c4>
   11028:	push	{r4, r5, r6, r7, fp, lr}
   1102c:	add	fp, sp, #16
   11030:	sub	sp, sp, #8
   11034:	mov	r6, r1
   11038:	mov	r5, r0
   1103c:	movw	r1, #26433	; 0x6741
   11040:	movt	r1, #1
   11044:	mov	r0, r6
   11048:	bl	120dc <__assert_fail@plt+0x13f0>
   1104c:	mov	r4, r0
   11050:	bl	1119c <__assert_fail@plt+0x4b0>
   11054:	cmp	r0, #0
   11058:	beq	11180 <__assert_fail@plt+0x494>
   1105c:	movw	r0, #28888	; 0x70d8
   11060:	movt	r0, #2
   11064:	movw	r1, #12572	; 0x311c
   11068:	movt	r1, #1
   1106c:	mov	r2, #45	; 0x2d
   11070:	bl	10cc8 <strncmp@plt>
   11074:	cmp	r0, #0
   11078:	bne	11180 <__assert_fail@plt+0x494>
   1107c:	mov	r0, r4
   11080:	bl	1119c <__assert_fail@plt+0x4b0>
   11084:	cmp	r0, #0
   11088:	beq	11180 <__assert_fail@plt+0x494>
   1108c:	movw	r0, #28888	; 0x70d8
   11090:	movt	r0, #2
   11094:	movw	r1, #26363	; 0x66fb
   11098:	movt	r1, #1
   1109c:	bl	10b48 <strcmp@plt>
   110a0:	cmp	r0, #0
   110a4:	bne	11180 <__assert_fail@plt+0x494>
   110a8:	add	r1, sp, #4
   110ac:	mov	r0, r4
   110b0:	bl	111c4 <__assert_fail@plt+0x4d8>
   110b4:	cmp	r0, #0
   110b8:	beq	11180 <__assert_fail@plt+0x494>
   110bc:	mov	r1, sp
   110c0:	mov	r0, r4
   110c4:	bl	111c4 <__assert_fail@plt+0x4d8>
   110c8:	cmp	r0, #0
   110cc:	beq	11180 <__assert_fail@plt+0x494>
   110d0:	mov	r0, r4
   110d4:	bl	1119c <__assert_fail@plt+0x4b0>
   110d8:	cmp	r0, #0
   110dc:	beq	11180 <__assert_fail@plt+0x494>
   110e0:	mov	r0, r4
   110e4:	bl	1119c <__assert_fail@plt+0x4b0>
   110e8:	cmp	r0, #0
   110ec:	beq	11180 <__assert_fail@plt+0x494>
   110f0:	ldr	r2, [sp]
   110f4:	ldr	r1, [sp, #4]
   110f8:	mov	r0, r5
   110fc:	bl	10fb0 <__assert_fail@plt+0x2c4>
   11100:	add	r1, r5, #8
   11104:	mov	r0, r4
   11108:	bl	11208 <__assert_fail@plt+0x51c>
   1110c:	mov	r7, r0
   11110:	add	r1, r5, #416	; 0x1a0
   11114:	mov	r0, r4
   11118:	bl	11208 <__assert_fail@plt+0x51c>
   1111c:	mov	r6, r0
   11120:	add	r1, r5, #824	; 0x338
   11124:	mov	r0, r4
   11128:	bl	11208 <__assert_fail@plt+0x51c>
   1112c:	ldr	r0, [sp, #4]
   11130:	cmp	r0, #1
   11134:	blt	11170 <__assert_fail@plt+0x484>
   11138:	add	r1, r5, #920	; 0x398
   1113c:	mov	r0, r4
   11140:	bl	11208 <__assert_fail@plt+0x51c>
   11144:	cmp	r7, #1
   11148:	blt	11158 <__assert_fail@plt+0x46c>
   1114c:	add	r1, r5, #992	; 0x3e0
   11150:	mov	r0, r4
   11154:	bl	112d4 <__assert_fail@plt+0x5e8>
   11158:	cmp	r6, #1
   1115c:	blt	11170 <__assert_fail@plt+0x484>
   11160:	movw	r0, #9048	; 0x2358
   11164:	add	r1, r5, r0
   11168:	mov	r0, r4
   1116c:	bl	112d4 <__assert_fail@plt+0x5e8>
   11170:	mov	r0, r4
   11174:	bl	12154 <__assert_fail@plt+0x1468>
   11178:	sub	sp, fp, #16
   1117c:	pop	{r4, r5, r6, r7, fp, pc}
   11180:	movw	r1, #12638	; 0x315e
   11184:	movt	r1, #1
   11188:	cmp	r6, #0
   1118c:	movne	r1, r6
   11190:	movw	r0, #12620	; 0x314c
   11194:	movt	r0, #1
   11198:	bl	12420 <error@@Base+0x40>
   1119c:	push	{fp, lr}
   111a0:	mov	fp, sp
   111a4:	mov	r2, r0
   111a8:	movw	r0, #28888	; 0x70d8
   111ac:	movt	r0, #2
   111b0:	mov	r1, #99	; 0x63
   111b4:	bl	10b84 <fgets@plt>
   111b8:	cmp	r0, #0
   111bc:	movwne	r0, #1
   111c0:	pop	{fp, pc}
   111c4:	push	{r4, sl, fp, lr}
   111c8:	add	fp, sp, #8
   111cc:	mov	r4, r1
   111d0:	bl	1119c <__assert_fail@plt+0x4b0>
   111d4:	cmp	r0, #0
   111d8:	moveq	r0, #0
   111dc:	popeq	{r4, sl, fp, pc}
   111e0:	movw	r0, #28888	; 0x70d8
   111e4:	movt	r0, #2
   111e8:	movw	r1, #12753	; 0x31d1
   111ec:	movt	r1, #1
   111f0:	mov	r2, r4
   111f4:	bl	10c68 <__isoc99_sscanf@plt>
   111f8:	sub	r0, r0, #1
   111fc:	clz	r0, r0
   11200:	lsr	r0, r0, #5
   11204:	pop	{r4, sl, fp, pc}
   11208:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1120c:	add	fp, sp, #28
   11210:	sub	sp, sp, #12
   11214:	mov	r4, r1
   11218:	mov	r6, r0
   1121c:	bl	1119c <__assert_fail@plt+0x4b0>
   11220:	mov	r5, #0
   11224:	cmp	r0, #0
   11228:	beq	112c8 <__assert_fail@plt+0x5dc>
   1122c:	mov	r0, r6
   11230:	bl	1119c <__assert_fail@plt+0x4b0>
   11234:	cmp	r0, #0
   11238:	beq	112c8 <__assert_fail@plt+0x5dc>
   1123c:	add	r1, sp, #8
   11240:	add	r2, sp, #4
   11244:	mov	r0, r6
   11248:	bl	1174c <__assert_fail@plt+0xa60>
   1124c:	cmp	r0, #0
   11250:	beq	112c8 <__assert_fail@plt+0x5dc>
   11254:	mov	r5, #0
   11258:	movw	r0, #28888	; 0x70d8
   1125c:	movt	r0, #2
   11260:	add	r7, r0, #29
   11264:	add	r9, sp, #8
   11268:	add	sl, sp, #4
   1126c:	mov	r0, r7
   11270:	bl	10ca4 <atoi@plt>
   11274:	mov	r8, r0
   11278:	cmp	r0, #0
   1127c:	bne	112a0 <__assert_fail@plt+0x5b4>
   11280:	mov	r0, r7
   11284:	movw	r1, #12741	; 0x31c5
   11288:	movt	r1, #1
   1128c:	bl	10b48 <strcmp@plt>
   11290:	cmp	r0, #0
   11294:	movne	r8, #11
   11298:	ldr	r0, [sp, #8]
   1129c:	moveq	r5, r0
   112a0:	add	r0, r4, r8, lsl #3
   112a4:	ldr	r2, [sp, #4]
   112a8:	ldr	r1, [sp, #8]
   112ac:	bl	10fb0 <__assert_fail@plt+0x2c4>
   112b0:	mov	r0, r6
   112b4:	mov	r1, r9
   112b8:	mov	r2, sl
   112bc:	bl	1174c <__assert_fail@plt+0xa60>
   112c0:	cmp	r0, #0
   112c4:	bne	1126c <__assert_fail@plt+0x580>
   112c8:	mov	r0, r5
   112cc:	sub	sp, fp, #28
   112d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112d8:	add	fp, sp, #28
   112dc:	sub	sp, sp, #12
   112e0:	mov	r4, r1
   112e4:	mov	r5, r0
   112e8:	bl	1119c <__assert_fail@plt+0x4b0>
   112ec:	cmp	r0, #0
   112f0:	beq	11370 <__assert_fail@plt+0x684>
   112f4:	mov	r0, r5
   112f8:	bl	1119c <__assert_fail@plt+0x4b0>
   112fc:	cmp	r0, #0
   11300:	beq	11370 <__assert_fail@plt+0x684>
   11304:	add	r1, sp, #8
   11308:	add	r2, sp, #4
   1130c:	mov	r0, r5
   11310:	bl	1174c <__assert_fail@plt+0xa60>
   11314:	cmp	r0, #0
   11318:	beq	11370 <__assert_fail@plt+0x684>
   1131c:	movw	r6, #28888	; 0x70d8
   11320:	movt	r6, #2
   11324:	mov	sl, #0
   11328:	add	r7, r6, #29
   1132c:	add	r8, sp, #8
   11330:	add	r9, sp, #4
   11334:	mov	r0, r6
   11338:	bl	10c50 <strlen@plt>
   1133c:	add	r0, r6, r0
   11340:	strb	sl, [r0, #-1]
   11344:	ldr	r2, [sp, #8]
   11348:	ldr	r3, [sp, #4]
   1134c:	mov	r0, r4
   11350:	mov	r1, r7
   11354:	bl	10fc4 <__assert_fail@plt+0x2d8>
   11358:	mov	r0, r5
   1135c:	mov	r1, r8
   11360:	mov	r2, r9
   11364:	bl	1174c <__assert_fail@plt+0xa60>
   11368:	cmp	r0, #0
   1136c:	bne	11334 <__assert_fail@plt+0x648>
   11370:	sub	sp, fp, #28
   11374:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11378:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1137c:	add	fp, sp, #24
   11380:	sub	sp, sp, #8
   11384:	mov	r2, r1
   11388:	mov	r5, r0
   1138c:	movw	r1, #12644	; 0x3164
   11390:	movt	r1, #1
   11394:	mov	r0, r2
   11398:	bl	120dc <__assert_fail@plt+0x13f0>
   1139c:	mov	r4, r0
   113a0:	movw	r1, #12646	; 0x3166
   113a4:	movt	r1, #1
   113a8:	movw	r2, #12572	; 0x311c
   113ac:	movt	r2, #1
   113b0:	movw	r3, #26363	; 0x66fb
   113b4:	movt	r3, #1
   113b8:	bl	10c5c <fprintf@plt>
   113bc:	ldr	r2, [r5]
   113c0:	movw	r1, #12651	; 0x316b
   113c4:	movt	r1, #1
   113c8:	mov	r0, r4
   113cc:	bl	10c5c <fprintf@plt>
   113d0:	ldr	r2, [r5, #4]
   113d4:	movw	r1, #12665	; 0x3179
   113d8:	movt	r1, #1
   113dc:	mov	r0, r4
   113e0:	bl	10c5c <fprintf@plt>
   113e4:	mov	r0, r4
   113e8:	mov	r1, r5
   113ec:	bl	114f8 <__assert_fail@plt+0x80c>
   113f0:	movw	r0, #12687	; 0x318f
   113f4:	movt	r0, #1
   113f8:	mov	r7, #1
   113fc:	mov	r1, #12
   11400:	mov	r2, #1
   11404:	mov	r3, r4
   11408:	bl	10bd8 <fwrite@plt>
   1140c:	mov	r8, #0
   11410:	str	r8, [sp]
   11414:	str	r7, [sp, #4]
   11418:	add	r1, r5, #8
   1141c:	movw	r3, #12700	; 0x319c
   11420:	movt	r3, #1
   11424:	mov	r0, r4
   11428:	mov	r2, #50	; 0x32
   1142c:	bl	11560 <__assert_fail@plt+0x874>
   11430:	str	r8, [sp]
   11434:	str	r7, [sp, #4]
   11438:	add	r6, r5, #416	; 0x1a0
   1143c:	movw	r3, #12719	; 0x31af
   11440:	movt	r3, #1
   11444:	mov	r0, r4
   11448:	mov	r1, r6
   1144c:	mov	r2, #50	; 0x32
   11450:	bl	11560 <__assert_fail@plt+0x874>
   11454:	str	r7, [sp]
   11458:	str	r7, [sp, #4]
   1145c:	add	r1, r5, #824	; 0x338
   11460:	movw	r3, #12710	; 0x31a6
   11464:	movt	r3, #1
   11468:	mov	r0, r4
   1146c:	mov	r2, #10
   11470:	bl	11560 <__assert_fail@plt+0x874>
   11474:	ldr	r0, [r5]
   11478:	cmp	r0, #1
   1147c:	blt	114e4 <__assert_fail@plt+0x7f8>
   11480:	str	r8, [sp]
   11484:	str	r8, [sp, #4]
   11488:	add	r1, r5, #920	; 0x398
   1148c:	movw	r3, #12733	; 0x31bd
   11490:	movt	r3, #1
   11494:	mov	r0, r4
   11498:	mov	r2, #8
   1149c:	bl	11560 <__assert_fail@plt+0x874>
   114a0:	ldr	r0, [r5, #8]
   114a4:	cmp	r0, #1
   114a8:	blt	114c0 <__assert_fail@plt+0x7d4>
   114ac:	add	r1, r5, #992	; 0x3e0
   114b0:	movw	r2, #12700	; 0x319c
   114b4:	movt	r2, #1
   114b8:	mov	r0, r4
   114bc:	bl	11690 <__assert_fail@plt+0x9a4>
   114c0:	ldr	r0, [r6]
   114c4:	cmp	r0, #1
   114c8:	blt	114e4 <__assert_fail@plt+0x7f8>
   114cc:	movw	r0, #9048	; 0x2358
   114d0:	add	r1, r5, r0
   114d4:	movw	r2, #12719	; 0x31af
   114d8:	movt	r2, #1
   114dc:	mov	r0, r4
   114e0:	bl	11690 <__assert_fail@plt+0x9a4>
   114e4:	mov	r0, r4
   114e8:	sub	sp, fp, #24
   114ec:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   114f0:	b	12154 <__assert_fail@plt+0x1468>
   114f4:	nop	{0}
   114f8:	mov	ip, r0
   114fc:	ldr	r0, [r1]
   11500:	cmp	r0, #0
   11504:	beq	11540 <__assert_fail@plt+0x854>
   11508:	ldr	r1, [r1, #4]
   1150c:	sub	r1, r0, r1
   11510:	vldr	d16, [pc, #64]	; 11558 <__assert_fail@plt+0x86c>
   11514:	vmov	s0, r1
   11518:	vmov	s2, r0
   1151c:	vcvt.f64.s32	d17, s0
   11520:	vcvt.f64.s32	d18, s2
   11524:	vmul.f64	d16, d17, d16
   11528:	vdiv.f64	d16, d16, d18
   1152c:	vmov	r2, r3, d16
   11530:	movw	r1, #12766	; 0x31de
   11534:	movt	r1, #1
   11538:	mov	r0, ip
   1153c:	b	10c5c <fprintf@plt>
   11540:	movw	r0, #12757	; 0x31d5
   11544:	movt	r0, #1
   11548:	mov	r1, #8
   1154c:	mov	r2, #1
   11550:	mov	r3, ip
   11554:	b	10bd8 <fwrite@plt>
   11558:	andeq	r0, r0, r0
   1155c:	subsmi	r0, r9, r0
   11560:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11564:	add	fp, sp, #28
   11568:	sub	sp, sp, #4
   1156c:	mov	r7, r2
   11570:	mov	r5, r1
   11574:	mov	r4, r0
   11578:	movw	r1, #12772	; 0x31e4
   1157c:	movt	r1, #1
   11580:	mov	r2, r3
   11584:	bl	10c5c <fprintf@plt>
   11588:	mov	r0, r4
   1158c:	mov	r1, #0
   11590:	bl	11798 <__assert_fail@plt+0xaac>
   11594:	ldrb	sl, [fp, #8]
   11598:	movw	r0, #12777	; 0x31e9
   1159c:	movt	r0, #1
   115a0:	movw	r2, #12784	; 0x31f0
   115a4:	movt	r2, #1
   115a8:	cmp	sl, #0
   115ac:	movne	r2, r0
   115b0:	movw	r1, #12773	; 0x31e5
   115b4:	movt	r1, #1
   115b8:	mov	r0, r4
   115bc:	bl	10c5c <fprintf@plt>
   115c0:	sxth	r6, r7
   115c4:	lsl	r0, r7, #16
   115c8:	ldr	r1, [fp, #12]
   115cc:	str	r1, [sp]
   115d0:	cmp	r0, #65536	; 0x10000
   115d4:	blt	11620 <__assert_fail@plt+0x934>
   115d8:	mov	r7, #1
   115dc:	movw	r8, #12791	; 0x31f7
   115e0:	movt	r8, #1
   115e4:	mov	r9, #1
   115e8:	mov	r1, r5
   115ec:	ldr	r0, [r1, r7, lsl #3]!
   115f0:	cmp	r0, #1
   115f4:	blt	11610 <__assert_fail@plt+0x924>
   115f8:	mov	r0, r4
   115fc:	bl	11798 <__assert_fail@plt+0xaac>
   11600:	mov	r0, r4
   11604:	mov	r1, r8
   11608:	mov	r2, r7
   1160c:	bl	10c5c <fprintf@plt>
   11610:	add	r9, r9, #1
   11614:	sxth	r7, r9
   11618:	cmp	r6, r7
   1161c:	bge	115e8 <__assert_fail@plt+0x8fc>
   11620:	cmp	sl, #0
   11624:	beq	11654 <__assert_fail@plt+0x968>
   11628:	add	r1, r5, r6, lsl #3
   1162c:	ldr	r0, [r1, #8]!
   11630:	cmp	r0, #1
   11634:	blt	11654 <__assert_fail@plt+0x968>
   11638:	mov	r0, r4
   1163c:	bl	11798 <__assert_fail@plt+0xaac>
   11640:	movw	r1, #12800	; 0x3200
   11644:	movt	r1, #1
   11648:	mov	r0, r4
   1164c:	mov	r2, r6
   11650:	bl	10c5c <fprintf@plt>
   11654:	ldr	r0, [sp]
   11658:	tst	r0, #255	; 0xff
   1165c:	subeq	sp, fp, #28
   11660:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11664:	mov	r0, r4
   11668:	mov	r1, r5
   1166c:	bl	11798 <__assert_fail@plt+0xaac>
   11670:	movw	r0, #12741	; 0x31c5
   11674:	movt	r0, #1
   11678:	mov	r1, #7
   1167c:	mov	r2, #1
   11680:	mov	r3, r4
   11684:	sub	sp, fp, #28
   11688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1168c:	b	10bd8 <fwrite@plt>
   11690:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11694:	add	fp, sp, #24
   11698:	mov	r6, r2
   1169c:	mov	r4, r1
   116a0:	mov	r5, r0
   116a4:	mov	r0, r1
   116a8:	bl	119a8 <__assert_fail@plt+0xcbc>
   116ac:	movw	r0, #8052	; 0x1f74
   116b0:	ldr	r0, [r4, r0]!
   116b4:	mov	r7, r4
   116b8:	ldr	r1, [r7, #-4]!
   116bc:	movw	r2, #6152	; 0x1808
   116c0:	movt	r2, #1
   116c4:	bl	12f28 <error@@Base+0xb48>
   116c8:	movw	r1, #12772	; 0x31e4
   116cc:	movt	r1, #1
   116d0:	mov	r0, r5
   116d4:	mov	r2, r6
   116d8:	bl	10c5c <fprintf@plt>
   116dc:	mov	r6, #0
   116e0:	mov	r0, r5
   116e4:	mov	r1, #0
   116e8:	bl	11798 <__assert_fail@plt+0xaac>
   116ec:	mov	r0, #10
   116f0:	mov	r1, r5
   116f4:	bl	10c8c <fputc@plt>
   116f8:	ldr	r0, [r4]
   116fc:	cmp	r0, #1
   11700:	poplt	{r4, r5, r6, r7, r8, sl, fp, pc}
   11704:	movw	r8, #12773	; 0x31e5
   11708:	movt	r8, #1
   1170c:	ldr	r0, [r7]
   11710:	ldr	r0, [r0, r6, lsl #2]
   11714:	add	r1, r0, #12
   11718:	mov	r0, r5
   1171c:	bl	11798 <__assert_fail@plt+0xaac>
   11720:	ldr	r0, [r7]
   11724:	ldr	r0, [r0, r6, lsl #2]
   11728:	ldr	r2, [r0, #8]
   1172c:	mov	r0, r5
   11730:	mov	r1, r8
   11734:	bl	10c5c <fprintf@plt>
   11738:	add	r6, r6, #1
   1173c:	ldr	r0, [r4]
   11740:	cmp	r6, r0
   11744:	blt	1170c <__assert_fail@plt+0xa20>
   11748:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1174c:	push	{r4, r5, fp, lr}
   11750:	add	fp, sp, #8
   11754:	mov	r4, r2
   11758:	mov	r5, r1
   1175c:	bl	1119c <__assert_fail@plt+0x4b0>
   11760:	cmp	r0, #0
   11764:	moveq	r0, #0
   11768:	popeq	{r4, r5, fp, pc}
   1176c:	movw	r0, #28888	; 0x70d8
   11770:	movt	r0, #2
   11774:	movw	r1, #12749	; 0x31cd
   11778:	movt	r1, #1
   1177c:	mov	r2, r5
   11780:	mov	r3, r4
   11784:	bl	10c68 <__isoc99_sscanf@plt>
   11788:	sub	r0, r0, #2
   1178c:	clz	r0, r0
   11790:	lsr	r0, r0, #5
   11794:	pop	{r4, r5, fp, pc}
   11798:	push	{r4, r5, fp, lr}
   1179c:	add	fp, sp, #8
   117a0:	mov	r4, r0
   117a4:	cmp	r1, #0
   117a8:	beq	117d4 <__assert_fail@plt+0xae8>
   117ac:	mov	r5, r1
   117b0:	ldm	r1, {r2, r3}
   117b4:	movw	r1, #12809	; 0x3209
   117b8:	movt	r1, #1
   117bc:	mov	r0, r4
   117c0:	bl	10c5c <fprintf@plt>
   117c4:	mov	r0, r4
   117c8:	mov	r1, r5
   117cc:	bl	114f8 <__assert_fail@plt+0x80c>
   117d0:	b	117ec <__assert_fail@plt+0xb00>
   117d4:	movw	r0, #12820	; 0x3214
   117d8:	movt	r0, #1
   117dc:	mov	r1, #26
   117e0:	mov	r2, #1
   117e4:	mov	r3, r4
   117e8:	bl	10bd8 <fwrite@plt>
   117ec:	movw	r0, #12847	; 0x322f
   117f0:	movt	r0, #1
   117f4:	mov	r1, #3
   117f8:	mov	r2, #1
   117fc:	mov	r3, r4
   11800:	pop	{r4, r5, fp, lr}
   11804:	b	10bd8 <fwrite@plt>
   11808:	ldr	r1, [r1, #8]
   1180c:	ldr	r0, [r0, #8]
   11810:	b	12060 <__assert_fail@plt+0x1374>
   11814:	push	{r4, r5, r6, sl, fp, lr}
   11818:	add	fp, sp, #16
   1181c:	mov	r4, r0
   11820:	movw	r6, #503	; 0x1f7
   11824:	mov	r5, r0
   11828:	mov	r0, r5
   1182c:	bl	12d8c <error@@Base+0x9ac>
   11830:	subs	r6, r6, #1
   11834:	add	r5, r5, #16
   11838:	bne	11828 <__assert_fail@plt+0xb3c>
   1183c:	movw	r0, #8052	; 0x1f74
   11840:	mov	r1, #0
   11844:	str	r1, [r4, r0]
   11848:	movw	r0, #8048	; 0x1f70
   1184c:	str	r1, [r4, r0]
   11850:	pop	{r4, r5, r6, sl, fp, pc}
   11854:	push	{r4, r5, r6, sl, fp, lr}
   11858:	add	fp, sp, #16
   1185c:	mov	r5, r1
   11860:	mov	r4, r0
   11864:	mov	r0, r1
   11868:	bl	118b0 <__assert_fail@plt+0xbc4>
   1186c:	ldr	r6, [r4, r0, lsl #4]
   11870:	mov	r4, #0
   11874:	cmp	r6, #0
   11878:	bne	11890 <__assert_fail@plt+0xba4>
   1187c:	mov	r0, r4
   11880:	pop	{r4, r5, r6, sl, fp, pc}
   11884:	ldr	r6, [r6, #4]
   11888:	cmp	r6, #0
   1188c:	beq	1187c <__assert_fail@plt+0xb90>
   11890:	ldr	r1, [r6, #8]
   11894:	mov	r0, r5
   11898:	bl	10b48 <strcmp@plt>
   1189c:	cmp	r0, #0
   118a0:	bne	11884 <__assert_fail@plt+0xb98>
   118a4:	mov	r4, r6
   118a8:	mov	r0, r4
   118ac:	pop	{r4, r5, r6, sl, fp, pc}
   118b0:	ldrb	r1, [r0]
   118b4:	cmp	r1, #0
   118b8:	moveq	r0, #0
   118bc:	sxtheq	r0, r0
   118c0:	bxeq	lr
   118c4:	add	r2, r0, #1
   118c8:	mov	r0, #0
   118cc:	uxtab	r0, r0, r1
   118d0:	ldrb	r1, [r2], #1
   118d4:	cmp	r1, #0
   118d8:	bne	118cc <__assert_fail@plt+0xbe0>
   118dc:	movw	r1, #20065	; 0x4e61
   118e0:	movt	r1, #33354	; 0x824a
   118e4:	umull	r1, r2, r0, r1
   118e8:	lsr	r1, r2, #8
   118ec:	movw	r2, #503	; 0x1f7
   118f0:	mls	r0, r1, r2, r0
   118f4:	sxth	r0, r0
   118f8:	bx	lr
   118fc:	push	{r4, r5, fp, lr}
   11900:	add	fp, sp, #8
   11904:	mov	r4, r1
   11908:	mov	r5, r0
   1190c:	ldr	r0, [r1, #8]
   11910:	bl	118b0 <__assert_fail@plt+0xbc4>
   11914:	add	r0, r5, r0, lsl #4
   11918:	mov	r1, r4
   1191c:	bl	12d98 <error@@Base+0x9b8>
   11920:	mov	r0, r5
   11924:	bl	1193c <__assert_fail@plt+0xc50>
   11928:	movw	r0, #8052	; 0x1f74
   1192c:	ldr	r0, [r5, r0]!
   11930:	add	r0, r0, #1
   11934:	str	r0, [r5]
   11938:	pop	{r4, r5, fp, pc}
   1193c:	push	{r4, sl, fp, lr}
   11940:	add	fp, sp, #8
   11944:	mov	r4, r0
   11948:	movw	r0, #8048	; 0x1f70
   1194c:	ldr	r0, [r4, r0]!
   11950:	cmp	r0, #0
   11954:	popeq	{r4, sl, fp, pc}
   11958:	bl	10b6c <free@plt>
   1195c:	mov	r0, #0
   11960:	str	r0, [r4]
   11964:	pop	{r4, sl, fp, pc}
   11968:	push	{r4, r5, fp, lr}
   1196c:	add	fp, sp, #8
   11970:	mov	r4, r1
   11974:	mov	r5, r0
   11978:	ldr	r0, [r1, #8]
   1197c:	bl	118b0 <__assert_fail@plt+0xbc4>
   11980:	add	r0, r5, r0, lsl #4
   11984:	mov	r1, r4
   11988:	bl	12e10 <error@@Base+0xa30>
   1198c:	mov	r0, r5
   11990:	bl	1193c <__assert_fail@plt+0xc50>
   11994:	movw	r0, #8052	; 0x1f74
   11998:	ldr	r0, [r5, r0]!
   1199c:	sub	r0, r0, #1
   119a0:	str	r0, [r5]
   119a4:	pop	{r4, r5, fp, pc}
   119a8:	push	{r4, r5, fp, lr}
   119ac:	add	fp, sp, #8
   119b0:	mov	r4, r0
   119b4:	movw	r0, #8048	; 0x1f70
   119b8:	mov	r5, r4
   119bc:	ldr	r0, [r5, r0]!
   119c0:	cmp	r0, #0
   119c4:	bne	11a20 <__assert_fail@plt+0xd34>
   119c8:	movw	r0, #8052	; 0x1f74
   119cc:	ldr	r0, [r4, r0]
   119d0:	cmp	r0, #0
   119d4:	popeq	{r4, r5, fp, pc}
   119d8:	mov	r1, #4
   119dc:	bl	12040 <__assert_fail@plt+0x1354>
   119e0:	str	r0, [r5]
   119e4:	mov	r0, #0
   119e8:	movw	ip, #503	; 0x1f7
   119ec:	mov	r2, #0
   119f0:	ldr	r3, [r4, r2, lsl #4]
   119f4:	cmp	r3, #0
   119f8:	beq	11a14 <__assert_fail@plt+0xd28>
   119fc:	ldr	r1, [r5]
   11a00:	str	r3, [r1, r0, lsl #2]
   11a04:	add	r0, r0, #1
   11a08:	ldr	r3, [r3, #4]
   11a0c:	cmp	r3, #0
   11a10:	bne	119fc <__assert_fail@plt+0xd10>
   11a14:	add	r2, r2, #1
   11a18:	cmp	r2, ip
   11a1c:	bne	119f0 <__assert_fail@plt+0xd04>
   11a20:	pop	{r4, r5, fp, pc}
   11a24:	push	{r4, r5, r6, r7, fp, lr}
   11a28:	add	fp, sp, #16
   11a2c:	mov	r5, r1
   11a30:	mov	r4, r0
   11a34:	mov	r6, #0
   11a38:	movw	r7, #8048	; 0x1f70
   11a3c:	add	r0, r4, r6
   11a40:	mov	r1, r5
   11a44:	bl	12ee8 <error@@Base+0xb08>
   11a48:	add	r6, r6, #16
   11a4c:	cmp	r6, r7
   11a50:	bne	11a3c <__assert_fail@plt+0xd50>
   11a54:	mov	r0, r4
   11a58:	bl	1193c <__assert_fail@plt+0xc50>
   11a5c:	movw	r0, #8052	; 0x1f74
   11a60:	mov	r1, #0
   11a64:	str	r1, [r4, r0]
   11a68:	pop	{r4, r5, r6, r7, fp, pc}
   11a6c:	push	{r4, r5, r6, sl, fp, lr}
   11a70:	add	fp, sp, #16
   11a74:	mov	r4, r0
   11a78:	ldr	r5, [r1]
   11a7c:	mov	r0, r5
   11a80:	bl	11acc <__assert_fail@plt+0xde0>
   11a84:	cmp	r0, #0
   11a88:	popeq	{r4, r5, r6, sl, fp, pc}
   11a8c:	mov	r6, r0
   11a90:	ldr	r0, [r5, #12]
   11a94:	bl	11d34 <__assert_fail@plt+0x1048>
   11a98:	cmp	r0, #0
   11a9c:	beq	11ab0 <__assert_fail@plt+0xdc4>
   11aa0:	mov	r0, r4
   11aa4:	mov	r1, r5
   11aa8:	mov	r2, r6
   11aac:	bl	11d60 <__assert_fail@plt+0x1074>
   11ab0:	ldr	r5, [r6, #4]
   11ab4:	mov	r0, r5
   11ab8:	bl	11acc <__assert_fail@plt+0xde0>
   11abc:	mov	r6, r0
   11ac0:	cmp	r0, #0
   11ac4:	bne	11a90 <__assert_fail@plt+0xda4>
   11ac8:	pop	{r4, r5, r6, sl, fp, pc}
   11acc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ad0:	add	fp, sp, #28
   11ad4:	sub	sp, sp, #20
   11ad8:	str	r0, [sp, #8]
   11adc:	cmp	r0, #0
   11ae0:	moveq	r0, #0
   11ae4:	subeq	sp, fp, #28
   11ae8:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11aec:	ldr	r0, [sp, #8]
   11af0:	cmp	r0, #0
   11af4:	beq	11d20 <__assert_fail@plt+0x1034>
   11af8:	mov	r5, #17
   11afc:	add	r4, sp, #4
   11b00:	mov	sl, #1
   11b04:	mov	r8, #13312	; 0x3400
   11b08:	movw	r9, #33664	; 0x8380
   11b0c:	movt	r9, #1
   11b10:	mov	r7, r5
   11b14:	mov	r0, r4
   11b18:	bl	11dec <__assert_fail@plt+0x1100>
   11b1c:	mov	r4, r0
   11b20:	bl	11e40 <__assert_fail@plt+0x1154>
   11b24:	mov	r5, r0
   11b28:	mov	r0, r4
   11b2c:	bl	11dec <__assert_fail@plt+0x1100>
   11b30:	bl	11e40 <__assert_fail@plt+0x1154>
   11b34:	mov	r6, r0
   11b38:	mov	r0, r4
   11b3c:	bl	11e54 <__assert_fail@plt+0x1168>
   11b40:	bl	11e40 <__assert_fail@plt+0x1154>
   11b44:	cmp	r5, #1
   11b48:	cmpeq	r6, #2
   11b4c:	beq	11ca8 <__assert_fail@plt+0xfbc>
   11b50:	sub	r1, r5, #1
   11b54:	cmp	r1, #3
   11b58:	subcs	r1, r6, #1
   11b5c:	cmpcs	r1, #3
   11b60:	bcc	11d24 <__assert_fail@plt+0x1038>
   11b64:	orr	r1, r6, #1
   11b68:	orr	r2, r5, #1
   11b6c:	cmp	r2, #9
   11b70:	cmpeq	r1, #9
   11b74:	beq	11ca8 <__assert_fail@plt+0xfbc>
   11b78:	cmp	r2, #9
   11b7c:	bne	11b9c <__assert_fail@plt+0xeb0>
   11b80:	cmp	r6, #13
   11b84:	bhi	11b9c <__assert_fail@plt+0xeb0>
   11b88:	tst	r8, sl, lsl r6
   11b8c:	beq	11b9c <__assert_fail@plt+0xeb0>
   11b90:	orr	r3, r0, #1
   11b94:	cmp	r3, #9
   11b98:	beq	11ca8 <__assert_fail@plt+0xfbc>
   11b9c:	orr	r3, r7, #1
   11ba0:	cmp	r3, #9
   11ba4:	bne	11bc0 <__assert_fail@plt+0xed4>
   11ba8:	cmp	r5, #13
   11bac:	bhi	11bc0 <__assert_fail@plt+0xed4>
   11bb0:	tst	r8, sl, lsl r5
   11bb4:	beq	11bc0 <__assert_fail@plt+0xed4>
   11bb8:	cmp	r1, #9
   11bbc:	beq	11ca8 <__assert_fail@plt+0xfbc>
   11bc0:	cmp	r5, #8
   11bc4:	cmpeq	r6, #10
   11bc8:	beq	11ca8 <__assert_fail@plt+0xfbc>
   11bcc:	cmp	r5, #8
   11bd0:	cmpeq	r6, #11
   11bd4:	beq	11c94 <__assert_fail@plt+0xfa8>
   11bd8:	cmp	r7, #8
   11bdc:	cmpeq	r5, #11
   11be0:	beq	11ca0 <__assert_fail@plt+0xfb4>
   11be4:	sub	r3, r5, #15
   11be8:	clz	r3, r3
   11bec:	lsr	lr, r3, #5
   11bf0:	sub	r2, r2, #9
   11bf4:	clz	r2, r2
   11bf8:	lsr	ip, r2, #5
   11bfc:	orr	r2, lr, ip
   11c00:	sub	r3, r6, #15
   11c04:	clz	r3, r3
   11c08:	lsr	r3, r3, #5
   11c0c:	tst	r2, r3
   11c10:	subeq	r1, r1, #9
   11c14:	clzeq	r1, r1
   11c18:	lsreq	r1, r1, #5
   11c1c:	andseq	r1, lr, r1
   11c20:	bne	11ca8 <__assert_fail@plt+0xfbc>
   11c24:	cmp	r7, #15
   11c28:	bne	11c58 <__assert_fail@plt+0xf6c>
   11c2c:	sub	r1, r5, #10
   11c30:	clz	r1, r1
   11c34:	lsr	r1, r1, #5
   11c38:	orr	r2, r5, #2
   11c3c:	sub	r2, r2, #14
   11c40:	clz	r2, r2
   11c44:	lsr	r2, r2, #5
   11c48:	orr	r1, r1, r2
   11c4c:	cmp	r1, #1
   11c50:	cmpeq	r6, #15
   11c54:	beq	11ca8 <__assert_fail@plt+0xfbc>
   11c58:	cmp	r5, #15
   11c5c:	bne	11cb8 <__assert_fail@plt+0xfcc>
   11c60:	sub	r1, r6, #10
   11c64:	clz	r1, r1
   11c68:	lsr	r1, r1, #5
   11c6c:	orr	r2, r6, #2
   11c70:	sub	r2, r2, #14
   11c74:	clz	r2, r2
   11c78:	lsr	r2, r2, #5
   11c7c:	orr	r1, r1, r2
   11c80:	cmp	r1, #1
   11c84:	bne	11cc4 <__assert_fail@plt+0xfd8>
   11c88:	cmp	r0, #15
   11c8c:	beq	11ca8 <__assert_fail@plt+0xfbc>
   11c90:	b	11cc4 <__assert_fail@plt+0xfd8>
   11c94:	cmp	r0, #8
   11c98:	beq	11ca8 <__assert_fail@plt+0xfbc>
   11c9c:	b	11bd8 <__assert_fail@plt+0xeec>
   11ca0:	cmp	r6, #8
   11ca4:	bne	11be4 <__assert_fail@plt+0xef8>
   11ca8:	ldr	r0, [r4, #4]
   11cac:	cmp	r0, #0
   11cb0:	bne	11b10 <__assert_fail@plt+0xe24>
   11cb4:	b	11d24 <__assert_fail@plt+0x1038>
   11cb8:	cmp	r5, #7
   11cbc:	cmpeq	r6, #7
   11cc0:	beq	11ca8 <__assert_fail@plt+0xfbc>
   11cc4:	cmp	r6, #16
   11cc8:	bne	11cf4 <__assert_fail@plt+0x1008>
   11ccc:	orr	r0, r5, #8
   11cd0:	sub	r0, r0, #15
   11cd4:	clz	r0, r0
   11cd8:	lsr	r0, r0, #5
   11cdc:	orr	r0, r0, ip
   11ce0:	sub	r1, r5, #16
   11ce4:	clz	r1, r1
   11ce8:	lsr	r1, r1, #5
   11cec:	orrs	r0, r1, r0
   11cf0:	bne	11ca8 <__assert_fail@plt+0xfbc>
   11cf4:	cmp	r5, #16
   11cf8:	bne	11d10 <__assert_fail@plt+0x1024>
   11cfc:	cmp	r6, #16
   11d00:	bhi	11d24 <__assert_fail@plt+0x1038>
   11d04:	tst	r9, sl, lsl r6
   11d08:	bne	11ca8 <__assert_fail@plt+0xfbc>
   11d0c:	b	11d24 <__assert_fail@plt+0x1038>
   11d10:	cmp	r5, #5
   11d14:	cmpeq	r6, #5
   11d18:	beq	11ca8 <__assert_fail@plt+0xfbc>
   11d1c:	b	11d24 <__assert_fail@plt+0x1038>
   11d20:	add	r4, sp, #4
   11d24:	mov	r0, r4
   11d28:	bl	11e68 <__assert_fail@plt+0x117c>
   11d2c:	sub	sp, fp, #28
   11d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d34:	push	{fp, lr}
   11d38:	mov	fp, sp
   11d3c:	bl	10b78 <utf8proc_get_property@plt>
   11d40:	ldrsh	r1, [r0]
   11d44:	sub	r2, r1, #1
   11d48:	mov	r0, #1
   11d4c:	cmp	r2, #12
   11d50:	popcc	{fp, pc}
   11d54:	cmp	r1, #29
   11d58:	movne	r0, #0
   11d5c:	pop	{fp, pc}
   11d60:	push	{r4, r5, r6, r7, fp, lr}
   11d64:	add	fp, sp, #16
   11d68:	mov	r5, r1
   11d6c:	mov	r4, r0
   11d70:	ldr	r6, [r2, #4]
   11d74:	mov	r0, r1
   11d78:	mov	r1, r6
   11d7c:	bl	11f28 <__assert_fail@plt+0x123c>
   11d80:	add	r0, r0, #1
   11d84:	bl	10bfc <malloc@plt>
   11d88:	mov	r7, r0
   11d8c:	mov	r1, r5
   11d90:	mov	r2, r6
   11d94:	bl	11fcc <__assert_fail@plt+0x12e0>
   11d98:	mov	r0, #1
   11d9c:	mov	r1, #12
   11da0:	bl	12040 <__assert_fail@plt+0x1354>
   11da4:	mov	r5, r0
   11da8:	mov	r0, r7
   11dac:	bl	10c80 <utf8proc_NFC@plt>
   11db0:	str	r0, [r5, #8]
   11db4:	mov	r0, r4
   11db8:	mov	r1, r5
   11dbc:	bl	12de8 <error@@Base+0xa08>
   11dc0:	mov	r0, r7
   11dc4:	pop	{r4, r5, r6, r7, fp, lr}
   11dc8:	b	10b6c <free@plt>
   11dcc:	push	{r4, sl, fp, lr}
   11dd0:	add	fp, sp, #8
   11dd4:	mov	r4, r0
   11dd8:	ldr	r0, [r0, #8]
   11ddc:	bl	10b6c <free@plt>
   11de0:	mov	r0, r4
   11de4:	pop	{r4, sl, fp, lr}
   11de8:	b	10b6c <free@plt>
   11dec:	push	{r4, r5, fp, lr}
   11df0:	add	fp, sp, #8
   11df4:	mov	r4, #0
   11df8:	cmp	r0, #0
   11dfc:	beq	11e0c <__assert_fail@plt+0x1120>
   11e00:	ldr	r5, [r0, #4]
   11e04:	cmp	r5, #0
   11e08:	bne	11e20 <__assert_fail@plt+0x1134>
   11e0c:	mov	r0, r4
   11e10:	pop	{r4, r5, fp, pc}
   11e14:	ldr	r5, [r5, #4]
   11e18:	cmp	r5, #0
   11e1c:	beq	11e0c <__assert_fail@plt+0x1120>
   11e20:	mov	r0, r5
   11e24:	bl	11e40 <__assert_fail@plt+0x1154>
   11e28:	orr	r0, r0, #2
   11e2c:	cmp	r0, #6
   11e30:	beq	11e14 <__assert_fail@plt+0x1128>
   11e34:	mov	r4, r5
   11e38:	mov	r0, r4
   11e3c:	pop	{r4, r5, fp, pc}
   11e40:	cmp	r0, #0
   11e44:	moveq	r0, #18
   11e48:	bxeq	lr
   11e4c:	ldr	r0, [r0, #12]
   11e50:	b	11eb0 <__assert_fail@plt+0x11c4>
   11e54:	push	{fp, lr}
   11e58:	mov	fp, sp
   11e5c:	bl	11dec <__assert_fail@plt+0x1100>
   11e60:	pop	{fp, lr}
   11e64:	b	11dec <__assert_fail@plt+0x1100>
   11e68:	push	{r4, r5, fp, lr}
   11e6c:	add	fp, sp, #8
   11e70:	cmp	r0, #0
   11e74:	moveq	r4, #0
   11e78:	moveq	r0, r4
   11e7c:	popeq	{r4, r5, fp, pc}
   11e80:	mov	r5, r0
   11e84:	mov	r4, r5
   11e88:	ldr	r5, [r5, #4]
   11e8c:	cmp	r5, #0
   11e90:	beq	11ea8 <__assert_fail@plt+0x11bc>
   11e94:	mov	r0, r5
   11e98:	bl	11e40 <__assert_fail@plt+0x1154>
   11e9c:	orr	r0, r0, #2
   11ea0:	cmp	r0, #6
   11ea4:	beq	11e84 <__assert_fail@plt+0x1198>
   11ea8:	mov	r0, r4
   11eac:	pop	{r4, r5, fp, pc}
   11eb0:	mov	r1, #0
   11eb4:	movw	r2, #1092	; 0x444
   11eb8:	b	11ebc <__assert_fail@plt+0x11d0>
   11ebc:	push	{r4, r5, fp, lr}
   11ec0:	add	fp, sp, #8
   11ec4:	mov	lr, r0
   11ec8:	mov	r0, #0
   11ecc:	cmp	r2, r1
   11ed0:	popcc	{r4, r5, fp, pc}
   11ed4:	movw	ip, #12852	; 0x3234
   11ed8:	movt	ip, #1
   11edc:	b	11ef8 <__assert_fail@plt+0x120c>
   11ee0:	add	r1, ip, r4, lsl #2
   11ee4:	ldr	r4, [r1, #4]
   11ee8:	cmp	r4, lr
   11eec:	bcs	11f20 <__assert_fail@plt+0x1234>
   11ef0:	add	r1, r3, #1
   11ef4:	b	11f14 <__assert_fail@plt+0x1228>
   11ef8:	sub	r3, r2, r1
   11efc:	add	r3, r1, r3, lsr #1
   11f00:	add	r4, r3, r3, lsl #1
   11f04:	ldr	r5, [ip, r4, lsl #2]
   11f08:	cmp	r5, lr
   11f0c:	bls	11ee0 <__assert_fail@plt+0x11f4>
   11f10:	sub	r2, r3, #1
   11f14:	cmp	r2, r1
   11f18:	bcs	11ef8 <__assert_fail@plt+0x120c>
   11f1c:	pop	{r4, r5, fp, pc}
   11f20:	ldr	r0, [r1, #8]
   11f24:	pop	{r4, r5, fp, pc}
   11f28:	push	{r4, r5, r6, r7, fp, lr}
   11f2c:	add	fp, sp, #16
   11f30:	sub	sp, sp, #8
   11f34:	cmp	r0, r1
   11f38:	beq	11f7c <__assert_fail@plt+0x1290>
   11f3c:	mov	r5, r1
   11f40:	mov	r6, r0
   11f44:	mov	r4, #0
   11f48:	add	r7, sp, #4
   11f4c:	cmp	r6, #0
   11f50:	beq	11f8c <__assert_fail@plt+0x12a0>
   11f54:	ldr	r0, [r6, #12]
   11f58:	mov	r1, r7
   11f5c:	bl	10b90 <utf8proc_encode_char@plt>
   11f60:	cmp	r0, #0
   11f64:	beq	11fac <__assert_fail@plt+0x12c0>
   11f68:	add	r4, r0, r4
   11f6c:	ldr	r6, [r6, #4]
   11f70:	cmp	r6, r5
   11f74:	bne	11f4c <__assert_fail@plt+0x1260>
   11f78:	b	11f80 <__assert_fail@plt+0x1294>
   11f7c:	mov	r4, #0
   11f80:	mov	r0, r4
   11f84:	sub	sp, fp, #16
   11f88:	pop	{r4, r5, r6, r7, fp, pc}
   11f8c:	movw	r0, #25975	; 0x6577
   11f90:	movt	r0, #1
   11f94:	movw	r1, #25968	; 0x6570
   11f98:	movt	r1, #1
   11f9c:	movw	r3, #25991	; 0x6587
   11fa0:	movt	r3, #1
   11fa4:	mov	r2, #249	; 0xf9
   11fa8:	bl	10cec <__assert_fail@plt>
   11fac:	movw	r0, #26017	; 0x65a1
   11fb0:	movt	r0, #1
   11fb4:	movw	r1, #25968	; 0x6570
   11fb8:	movt	r1, #1
   11fbc:	movw	r3, #25991	; 0x6587
   11fc0:	movt	r3, #1
   11fc4:	mov	r2, #253	; 0xfd
   11fc8:	bl	10cec <__assert_fail@plt>
   11fcc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11fd0:	add	fp, sp, #24
   11fd4:	mov	r4, r0
   11fd8:	mov	r8, #0
   11fdc:	cmp	r1, r2
   11fe0:	mov	r7, #0
   11fe4:	beq	12018 <__assert_fail@plt+0x132c>
   11fe8:	mov	r5, r2
   11fec:	mov	r6, r1
   11ff0:	mov	r7, #0
   11ff4:	cmp	r6, #0
   11ff8:	beq	12020 <__assert_fail@plt+0x1334>
   11ffc:	add	r1, r4, r7
   12000:	ldr	r0, [r6, #12]
   12004:	bl	10b90 <utf8proc_encode_char@plt>
   12008:	add	r7, r0, r7
   1200c:	ldr	r6, [r6, #4]
   12010:	cmp	r6, r5
   12014:	bne	11ff4 <__assert_fail@plt+0x1308>
   12018:	strb	r8, [r4, r7]
   1201c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12020:	movw	r0, #25975	; 0x6577
   12024:	movt	r0, #1
   12028:	movw	r1, #25968	; 0x6570
   1202c:	movt	r1, #1
   12030:	movw	r3, #26036	; 0x65b4
   12034:	movt	r3, #1
   12038:	movw	r2, #269	; 0x10d
   1203c:	bl	10cec <__assert_fail@plt>
   12040:	push	{fp, lr}
   12044:	mov	fp, sp
   12048:	bl	10b3c <calloc@plt>
   1204c:	cmp	r0, #0
   12050:	popne	{fp, pc}
   12054:	movw	r0, #26060	; 0x65cc
   12058:	movt	r0, #1
   1205c:	bl	123e0 <error@@Base>
   12060:	push	{r4, r5, r6, sl, fp, lr}
   12064:	add	fp, sp, #16
   12068:	mov	r2, r0
   1206c:	ldrb	ip, [r1]
   12070:	ldrb	r3, [r0]
   12074:	mov	r0, #0
   12078:	cmp	r3, #0
   1207c:	beq	120b4 <__assert_fail@plt+0x13c8>
   12080:	add	lr, r1, #1
   12084:	add	r6, r2, #1
   12088:	mov	r2, #0
   1208c:	uxtb	r4, ip
   12090:	uxtb	r5, r3
   12094:	cmp	r5, r4
   12098:	bne	120c4 <__assert_fail@plt+0x13d8>
   1209c:	ldrb	ip, [lr, r2]
   120a0:	ldrb	r3, [r6, r2]
   120a4:	add	r2, r2, #1
   120a8:	cmp	r3, #0
   120ac:	bne	1208c <__assert_fail@plt+0x13a0>
   120b0:	b	120b8 <__assert_fail@plt+0x13cc>
   120b4:	mov	r2, #0
   120b8:	cmp	ip, #0
   120bc:	popeq	{r4, r5, r6, sl, fp, pc}
   120c0:	mov	r3, #0
   120c4:	ldrb	r1, [r1, r2]
   120c8:	uxtb	r2, r3
   120cc:	mov	r0, #1
   120d0:	cmp	r2, r1
   120d4:	mvncc	r0, #0
   120d8:	pop	{r4, r5, r6, sl, fp, pc}
   120dc:	push	{r4, r5, fp, lr}
   120e0:	add	fp, sp, #8
   120e4:	mov	r5, r1
   120e8:	cmp	r0, #0
   120ec:	beq	12120 <__assert_fail@plt+0x1434>
   120f0:	mov	r4, r0
   120f4:	mov	r1, r5
   120f8:	bl	10b60 <fopen@plt>
   120fc:	cmp	r0, #0
   12100:	popne	{r4, r5, fp, pc}
   12104:	ldrb	r0, [r5]
   12108:	cmp	r0, #119	; 0x77
   1210c:	bne	12144 <__assert_fail@plt+0x1458>
   12110:	movw	r0, #26086	; 0x65e6
   12114:	movt	r0, #1
   12118:	mov	r1, r4
   1211c:	bl	12420 <error@@Base+0x40>
   12120:	ldrb	r0, [r5]
   12124:	movw	r1, #28872	; 0x70c8
   12128:	movt	r1, #2
   1212c:	movw	r2, #28876	; 0x70cc
   12130:	movt	r2, #2
   12134:	cmp	r0, #114	; 0x72
   12138:	moveq	r2, r1
   1213c:	ldr	r0, [r2]
   12140:	pop	{r4, r5, fp, pc}
   12144:	movw	r0, #26108	; 0x65fc
   12148:	movt	r0, #1
   1214c:	mov	r1, r4
   12150:	bl	12420 <error@@Base+0x40>
   12154:	movw	r1, #28872	; 0x70c8
   12158:	movt	r1, #2
   1215c:	ldr	r1, [r1]
   12160:	cmp	r1, r0
   12164:	movwne	r1, #28876	; 0x70cc
   12168:	movtne	r1, #2
   1216c:	ldrne	r1, [r1]
   12170:	cmpne	r1, r0
   12174:	bxeq	lr
   12178:	b	10c74 <fclose@plt>
   1217c:	push	{fp, lr}
   12180:	mov	fp, sp
   12184:	sub	sp, sp, #88	; 0x58
   12188:	mov	r1, sp
   1218c:	bl	130b8 <error@@Base+0xcd8>
   12190:	clz	r0, r0
   12194:	lsr	r0, r0, #5
   12198:	mov	sp, fp
   1219c:	pop	{fp, pc}
   121a0:	push	{r4, sl, fp, lr}
   121a4:	add	fp, sp, #8
   121a8:	movw	r0, #28988	; 0x713c
   121ac:	movt	r0, #2
   121b0:	ldrh	r1, [r0]
   121b4:	add	r1, r1, #1
   121b8:	strh	r1, [r0]
   121bc:	sxth	r0, r1
   121c0:	bl	121d4 <__assert_fail@plt+0x14e8>
   121c4:	mov	r4, r0
   121c8:	bl	10bb4 <unlink@plt>
   121cc:	mov	r0, r4
   121d0:	pop	{r4, sl, fp, pc}
   121d4:	push	{r4, r5, fp, lr}
   121d8:	add	fp, sp, #8
   121dc:	sub	sp, sp, #104	; 0x68
   121e0:	mov	r4, r0
   121e4:	movw	r0, #46148	; 0xb444
   121e8:	movt	r0, #2
   121ec:	ldr	r5, [r0]
   121f0:	bl	10c2c <getpid@plt>
   121f4:	mov	r3, r0
   121f8:	sxth	r0, r4
   121fc:	str	r0, [sp]
   12200:	add	r4, sp, #4
   12204:	movw	r1, #26149	; 0x6625
   12208:	movt	r1, #1
   1220c:	mov	r0, r4
   12210:	mov	r2, r5
   12214:	bl	10c98 <sprintf@plt>
   12218:	mov	r0, r4
   1221c:	bl	10b9c <strdup@plt>
   12220:	sub	sp, fp, #8
   12224:	pop	{r4, r5, fp, pc}
   12228:	push	{r4, sl, fp, lr}
   1222c:	add	fp, sp, #8
   12230:	mov	r4, r0
   12234:	bl	10c50 <strlen@plt>
   12238:	sub	r0, r0, #1
   1223c:	sxth	r0, r0
   12240:	cmp	r0, #0
   12244:	blt	12254 <__assert_fail@plt+0x1568>
   12248:	ldrb	r1, [r4, r0]
   1224c:	cmp	r1, #47	; 0x2f
   12250:	bne	12238 <__assert_fail@plt+0x154c>
   12254:	add	r0, r4, r0
   12258:	add	r0, r0, #1
   1225c:	pop	{r4, sl, fp, pc}
   12260:	push	{r4, r5, r6, r7, fp, lr}
   12264:	add	fp, sp, #16
   12268:	mov	r4, r3
   1226c:	mov	r5, r2
   12270:	mov	r6, r1
   12274:	mov	r7, r0
   12278:	ldr	r0, [r1]
   1227c:	bl	12228 <__assert_fail@plt+0x153c>
   12280:	movw	r1, #46148	; 0xb444
   12284:	movt	r1, #2
   12288:	str	r0, [r1]
   1228c:	bl	124a8 <error@@Base+0xc8>
   12290:	mov	r0, r7
   12294:	mov	r1, r6
   12298:	mov	r2, r5
   1229c:	mov	r3, r4
   122a0:	pop	{r4, r5, r6, r7, fp, lr}
   122a4:	b	122a8 <__assert_fail@plt+0x15bc>
   122a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122ac:	add	fp, sp, #28
   122b0:	sub	sp, sp, #12
   122b4:	stmib	sp, {r2, r3}
   122b8:	mov	r7, r1
   122bc:	mov	r5, r0
   122c0:	ldr	r0, [r0]
   122c4:	cmp	r0, #1
   122c8:	bne	122e0 <__assert_fail@plt+0x15f4>
   122cc:	movw	r0, #28856	; 0x70b8
   122d0:	movt	r0, #2
   122d4:	ldrb	r0, [r0]
   122d8:	cmp	r0, #0
   122dc:	bne	12398 <__assert_fail@plt+0x16ac>
   122e0:	ldr	r9, [r5]
   122e4:	mov	r6, #0
   122e8:	cmp	r9, #2
   122ec:	blt	12388 <__assert_fail@plt+0x169c>
   122f0:	mov	sl, #1
   122f4:	mov	r6, #0
   122f8:	mov	r8, #1
   122fc:	ldr	r4, [r7, sl, lsl #2]
   12300:	ldrb	r0, [r4]
   12304:	cmp	r0, #45	; 0x2d
   12308:	bne	12364 <__assert_fail@plt+0x1678>
   1230c:	ldrb	r0, [r4, #1]
   12310:	cmp	r0, #0
   12314:	beq	12364 <__assert_fail@plt+0x1678>
   12318:	mov	r0, r4
   1231c:	bl	10c50 <strlen@plt>
   12320:	mov	r2, r0
   12324:	movw	r0, #26178	; 0x6642
   12328:	movt	r0, #1
   1232c:	mov	r1, r4
   12330:	bl	10cc8 <strncmp@plt>
   12334:	cmp	r0, #0
   12338:	beq	12398 <__assert_fail@plt+0x16ac>
   1233c:	add	r0, sl, #1
   12340:	mov	r1, #0
   12344:	cmp	r0, r9
   12348:	ldrlt	r1, [r7, r0, lsl #2]
   1234c:	mov	r0, r4
   12350:	ldr	r2, [sp, #8]
   12354:	bl	12554 <error@@Base+0x174>
   12358:	cmp	r0, #0
   1235c:	addne	r8, r8, #1
   12360:	b	12374 <__assert_fail@plt+0x1688>
   12364:	ldr	r0, [r7, sl, lsl #2]
   12368:	sxth	r1, r6
   1236c:	str	r0, [r7, r1, lsl #2]
   12370:	add	r6, r6, #1
   12374:	ldr	r9, [r5]
   12378:	add	r8, r8, #1
   1237c:	sxth	sl, r8
   12380:	cmp	r9, sl
   12384:	bgt	122fc <__assert_fail@plt+0x1610>
   12388:	sxth	r0, r6
   1238c:	str	r0, [r5]
   12390:	sub	sp, fp, #28
   12394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12398:	ldr	r0, [sp, #4]
   1239c:	bl	12504 <error@@Base+0x124>
   123a0:	push	{fp, lr}
   123a4:	mov	fp, sp
   123a8:	mov	r0, #0
   123ac:	bl	123b0 <__assert_fail@plt+0x16c4>
   123b0:	push	{fp, lr}
   123b4:	mov	fp, sp
   123b8:	mov	r4, r0
   123bc:	movw	r0, #46152	; 0xb448
   123c0:	movt	r0, #2
   123c4:	ldr	r0, [r0]
   123c8:	cmp	r0, #0
   123cc:	beq	123d4 <__assert_fail@plt+0x16e8>
   123d0:	blx	r0
   123d4:	bl	12644 <error@@Base+0x264>
   123d8:	mov	r0, r4
   123dc:	bl	10c38 <exit@plt>

000123e0 <error@@Base>:
   123e0:	push	{fp, lr}
   123e4:	mov	fp, sp
   123e8:	mov	r3, r0
   123ec:	movw	r0, #46148	; 0xb444
   123f0:	movt	r0, #2
   123f4:	ldr	r2, [r0]
   123f8:	movw	r0, #28864	; 0x70c0
   123fc:	movt	r0, #2
   12400:	ldr	r0, [r0]
   12404:	movw	r1, #26128	; 0x6610
   12408:	movt	r1, #1
   1240c:	bl	10c5c <fprintf@plt>
   12410:	movw	r0, #28860	; 0x70bc
   12414:	movt	r0, #2
   12418:	ldr	r0, [r0]
   1241c:	bl	123b0 <__assert_fail@plt+0x16c4>
   12420:	push	{fp, lr}
   12424:	mov	fp, sp
   12428:	sub	sp, sp, #8
   1242c:	mov	r3, r0
   12430:	movw	r0, #46148	; 0xb444
   12434:	movt	r0, #2
   12438:	ldr	r2, [r0]
   1243c:	movw	r0, #28864	; 0x70c0
   12440:	movt	r0, #2
   12444:	ldr	r0, [r0]
   12448:	str	r1, [sp]
   1244c:	movw	r1, #26136	; 0x6618
   12450:	movt	r1, #1
   12454:	bl	10c5c <fprintf@plt>
   12458:	movw	r0, #28860	; 0x70bc
   1245c:	movt	r0, #2
   12460:	ldr	r0, [r0]
   12464:	bl	123b0 <__assert_fail@plt+0x16c4>
   12468:	push	{fp, lr}
   1246c:	mov	fp, sp
   12470:	sub	sp, sp, #8
   12474:	mov	r3, r0
   12478:	movw	r0, #46148	; 0xb444
   1247c:	movt	r0, #2
   12480:	ldr	r2, [r0]
   12484:	movw	r0, #28864	; 0x70c0
   12488:	movt	r0, #2
   1248c:	ldr	r0, [r0]
   12490:	str	r1, [sp]
   12494:	movw	r1, #26136	; 0x6618
   12498:	movt	r1, #1
   1249c:	bl	10c5c <fprintf@plt>
   124a0:	mov	sp, fp
   124a4:	pop	{fp, pc}
   124a8:	push	{r4, sl, fp, lr}
   124ac:	add	fp, sp, #8
   124b0:	movw	r4, #9428	; 0x24d4
   124b4:	movt	r4, #1
   124b8:	mov	r0, #2
   124bc:	mov	r1, r4
   124c0:	bl	10c14 <__sysv_signal@plt>
   124c4:	mov	r0, #15
   124c8:	mov	r1, r4
   124cc:	pop	{r4, sl, fp, lr}
   124d0:	b	10c14 <__sysv_signal@plt>
   124d4:	movw	r0, #28990	; 0x713e
   124d8:	movt	r0, #2
   124dc:	ldrb	r1, [r0]
   124e0:	cmp	r1, #1
   124e4:	bxeq	lr
   124e8:	push	{fp, lr}
   124ec:	mov	fp, sp
   124f0:	mov	r1, #1
   124f4:	strb	r1, [r0]
   124f8:	movw	r0, #26163	; 0x6633
   124fc:	movt	r0, #1
   12500:	bl	123e0 <error@@Base>
   12504:	push	{fp, lr}
   12508:	mov	fp, sp
   1250c:	mov	r3, r0
   12510:	movw	r0, #46144	; 0xb440
   12514:	movt	r0, #2
   12518:	ldr	r0, [r0]
   1251c:	cmp	r0, #0
   12520:	bne	1254c <error@@Base+0x16c>
   12524:	movw	r0, #46148	; 0xb444
   12528:	movt	r0, #2
   1252c:	ldr	r2, [r0]
   12530:	movw	r0, #28864	; 0x70c0
   12534:	movt	r0, #2
   12538:	ldr	r0, [r0]
   1253c:	movw	r1, #26184	; 0x6648
   12540:	movt	r1, #1
   12544:	bl	10c5c <fprintf@plt>
   12548:	bl	123a0 <__assert_fail@plt+0x16b4>
   1254c:	blx	r0
   12550:	bl	123a0 <__assert_fail@plt+0x16b4>
   12554:	push	{r4, sl, fp, lr}
   12558:	add	fp, sp, #8
   1255c:	mov	ip, r0
   12560:	cmp	r2, #0
   12564:	ldrbne	r0, [r2]
   12568:	cmpne	r0, #0
   1256c:	bne	12580 <error@@Base+0x1a0>
   12570:	movw	r0, #26199	; 0x6657
   12574:	movt	r0, #1
   12578:	mov	r1, ip
   1257c:	bl	12420 <error@@Base+0x40>
   12580:	ldrb	lr, [ip, #1]
   12584:	mov	r3, #0
   12588:	cmp	lr, r0
   1258c:	beq	125b4 <error@@Base+0x1d4>
   12590:	mov	r0, #1
   12594:	sxth	r3, r0
   12598:	add	r4, r3, r3, lsl #1
   1259c:	ldrb	r4, [r2, r4, lsl #2]
   125a0:	cmp	r4, #0
   125a4:	beq	12570 <error@@Base+0x190>
   125a8:	add	r0, r0, #1
   125ac:	cmp	lr, r4
   125b0:	bne	12594 <error@@Base+0x1b4>
   125b4:	add	r0, r3, r3, lsl #1
   125b8:	add	r3, r2, r0, lsl #2
   125bc:	ldr	r0, [r3, #4]
   125c0:	cmp	r0, #0
   125c4:	beq	12604 <error@@Base+0x224>
   125c8:	mov	r2, ip
   125cc:	ldrb	lr, [r2, #2]!
   125d0:	cmp	r1, #0
   125d4:	cmpeq	lr, #0
   125d8:	beq	12604 <error@@Base+0x224>
   125dc:	ldr	r3, [r0]
   125e0:	cmp	r3, #0
   125e4:	bne	12634 <error@@Base+0x254>
   125e8:	cmp	lr, #0
   125ec:	movne	r1, r2
   125f0:	str	r1, [r0]
   125f4:	ldrb	r0, [r2]
   125f8:	clz	r0, r0
   125fc:	lsr	r0, r0, #5
   12600:	pop	{r4, sl, fp, pc}
   12604:	ldr	r0, [r3, #8]
   12608:	cmp	r0, #0
   1260c:	beq	12570 <error@@Base+0x190>
   12610:	ldrb	r1, [ip, #2]
   12614:	cmp	r1, #0
   12618:	bne	12570 <error@@Base+0x190>
   1261c:	ldrb	r1, [r0]
   12620:	cmp	r1, #0
   12624:	moveq	r1, #1
   12628:	strbeq	r1, [r0]
   1262c:	moveq	r0, #0
   12630:	popeq	{r4, sl, fp, pc}
   12634:	movw	r0, #26214	; 0x6666
   12638:	movt	r0, #1
   1263c:	mov	r1, ip
   12640:	bl	12420 <error@@Base+0x40>
   12644:	push	{r4, r5, r6, sl, fp, lr}
   12648:	add	fp, sp, #16
   1264c:	movw	r5, #28988	; 0x713c
   12650:	movt	r5, #2
   12654:	ldrsh	r0, [r5]
   12658:	cmp	r0, #1
   1265c:	poplt	{r4, r5, r6, sl, fp, pc}
   12660:	mov	r6, #1
   12664:	sxth	r0, r6
   12668:	bl	121d4 <__assert_fail@plt+0x14e8>
   1266c:	mov	r4, r0
   12670:	bl	10bb4 <unlink@plt>
   12674:	mov	r0, r4
   12678:	bl	10b6c <free@plt>
   1267c:	add	r0, r6, #1
   12680:	sxth	r6, r0
   12684:	ldrsh	r0, [r5]
   12688:	cmp	r6, r0
   1268c:	ble	12664 <error@@Base+0x284>
   12690:	pop	{r4, r5, r6, sl, fp, pc}
   12694:	push	{r4, r5, r6, sl, fp, lr}
   12698:	add	fp, sp, #16
   1269c:	mov	r4, r2
   126a0:	mov	r5, r1
   126a4:	mov	r6, r0
   126a8:	mov	r0, #1
   126ac:	mov	r1, #16
   126b0:	bl	12040 <__assert_fail@plt+0x1354>
   126b4:	mov	r1, r0
   126b8:	strb	r5, [r0, #8]
   126bc:	str	r4, [r0, #12]
   126c0:	mov	r0, r6
   126c4:	pop	{r4, r5, r6, sl, fp, lr}
   126c8:	b	12de8 <error@@Base+0xa08>
   126cc:	push	{r4, r5, r6, r7, fp, lr}
   126d0:	add	fp, sp, #16
   126d4:	mov	r5, r2
   126d8:	mov	r2, r1
   126dc:	mov	r4, r0
   126e0:	cmp	r1, #0
   126e4:	bne	126f4 <error@@Base+0x314>
   126e8:	ldrb	r0, [r5]
   126ec:	cmp	r0, #0
   126f0:	bne	1278c <error@@Base+0x3ac>
   126f4:	ldr	r7, [r4, #4]
   126f8:	movw	r1, #26433	; 0x6741
   126fc:	movt	r1, #1
   12700:	mov	r0, r2
   12704:	bl	120dc <__assert_fail@plt+0x13f0>
   12708:	mov	r6, r0
   1270c:	ldrb	r0, [r5]
   12710:	cmp	r0, #0
   12714:	beq	12724 <error@@Base+0x344>
   12718:	mov	r0, r6
   1271c:	bl	127a0 <error@@Base+0x3c0>
   12720:	strb	r0, [r5, #11]
   12724:	ldrb	r2, [r5, #1]
   12728:	ldr	r3, [r5, #4]
   1272c:	cmp	r3, #0
   12730:	movweq	r3, #94	; 0x5e
   12734:	mov	r0, r6
   12738:	mov	r1, r4
   1273c:	bl	1284c <error@@Base+0x46c>
   12740:	mov	r0, r6
   12744:	bl	12154 <__assert_fail@plt+0x1468>
   12748:	ldrb	r0, [r5, #9]
   1274c:	cmp	r0, #0
   12750:	beq	1276c <error@@Base+0x38c>
   12754:	cmp	r7, #0
   12758:	mov	r0, r4
   1275c:	addne	r0, r7, #4
   12760:	ldr	r1, [r0]
   12764:	mov	r0, r4
   12768:	bl	12954 <error@@Base+0x574>
   1276c:	ldrb	r0, [r5, #10]
   12770:	cmp	r0, #0
   12774:	popeq	{r4, r5, r6, r7, fp, pc}
   12778:	cmp	r7, #0
   1277c:	addne	r4, r7, #4
   12780:	ldr	r0, [r4]
   12784:	pop	{r4, r5, r6, r7, fp, lr}
   12788:	b	12a3c <error@@Base+0x65c>
   1278c:	movw	r0, #26231	; 0x6677
   12790:	movt	r0, #1
   12794:	movw	r1, #26247	; 0x6687
   12798:	movt	r1, #1
   1279c:	bl	12420 <error@@Base+0x40>
   127a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   127a4:	add	fp, sp, #24
   127a8:	sub	sp, sp, #104	; 0x68
   127ac:	mov	r4, r0
   127b0:	add	r0, sp, #4
   127b4:	mov	r1, #99	; 0x63
   127b8:	mov	r2, r4
   127bc:	bl	10b84 <fgets@plt>
   127c0:	cmp	r0, #0
   127c4:	beq	127e4 <error@@Base+0x404>
   127c8:	add	r0, sp, #4
   127cc:	movw	r1, #26299	; 0x66bb
   127d0:	movt	r1, #1
   127d4:	mov	r2, #51	; 0x33
   127d8:	bl	10cc8 <strncmp@plt>
   127dc:	cmp	r0, #0
   127e0:	beq	127fc <error@@Base+0x41c>
   127e4:	mov	r0, r4
   127e8:	bl	10ba8 <rewind@plt>
   127ec:	mov	r7, #0
   127f0:	mov	r0, r7
   127f4:	sub	sp, fp, #24
   127f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   127fc:	mov	r6, #0
   12800:	add	r5, sp, #4
   12804:	movw	r8, #26355	; 0x66f3
   12808:	movt	r8, #1
   1280c:	mov	r7, #1
   12810:	mov	r0, r5
   12814:	mov	r1, #99	; 0x63
   12818:	mov	r2, r4
   1281c:	bl	10b84 <fgets@plt>
   12820:	cmp	r0, #0
   12824:	beq	127f0 <error@@Base+0x410>
   12828:	mov	r0, r5
   1282c:	mov	r1, r8
   12830:	bl	10b48 <strcmp@plt>
   12834:	cmp	r0, #0
   12838:	addeq	r6, r6, #1
   1283c:	sxth	r6, r6
   12840:	cmp	r6, #2
   12844:	blt	12810 <error@@Base+0x430>
   12848:	b	127f0 <error@@Base+0x410>
   1284c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12850:	add	fp, sp, #28
   12854:	sub	sp, sp, #20
   12858:	str	r3, [sp, #8]
   1285c:	mov	r5, r2
   12860:	str	r1, [sp, #4]
   12864:	mov	r9, r0
   12868:	bl	10ce0 <getc@plt>
   1286c:	cmn	r0, #1
   12870:	beq	1292c <error@@Base+0x54c>
   12874:	uxtb	r8, r5
   12878:	add	r4, sp, #16
   1287c:	add	r1, r4, #1
   12880:	str	r1, [sp]
   12884:	mov	r7, #0
   12888:	movw	r6, #28160	; 0x6e00
   1288c:	movt	r6, #2
   12890:	add	r1, r6, r0
   12894:	ldrsb	sl, [r1]
   12898:	cmp	sl, #0
   1289c:	ble	12934 <error@@Base+0x554>
   128a0:	strb	r0, [sp, #16]
   128a4:	cmp	sl, #1
   128a8:	beq	128d4 <error@@Base+0x4f4>
   128ac:	mov	r5, r8
   128b0:	sub	r8, sl, #1
   128b4:	ldr	r0, [sp]
   128b8:	mov	r1, #1
   128bc:	mov	r2, r8
   128c0:	mov	r3, r9
   128c4:	bl	10be4 <fread@plt>
   128c8:	cmp	r0, r8
   128cc:	mov	r8, r5
   128d0:	bne	12948 <error@@Base+0x568>
   128d4:	mov	r0, r4
   128d8:	mov	r1, #4
   128dc:	add	r2, sp, #12
   128e0:	bl	10bf0 <utf8proc_iterate@plt>
   128e4:	cmp	r0, sl
   128e8:	bne	12940 <error@@Base+0x560>
   128ec:	ldr	r2, [sp, #12]
   128f0:	cmp	r8, #0
   128f4:	beq	12908 <error@@Base+0x528>
   128f8:	mov	r5, #1
   128fc:	ldr	r0, [sp, #8]
   12900:	cmp	r2, r0
   12904:	beq	12918 <error@@Base+0x538>
   12908:	ldr	r0, [sp, #4]
   1290c:	mov	r1, r7
   12910:	bl	12694 <error@@Base+0x2b4>
   12914:	mov	r5, #0
   12918:	mov	r0, r9
   1291c:	bl	10ce0 <getc@plt>
   12920:	cmn	r0, #1
   12924:	mov	r7, r5
   12928:	bne	12890 <error@@Base+0x4b0>
   1292c:	sub	sp, fp, #28
   12930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12934:	movw	r0, #26411	; 0x672b
   12938:	movt	r0, #1
   1293c:	bl	123e0 <error@@Base>
   12940:	bl	10cb0 <utf8proc_errmsg@plt>
   12944:	bl	123e0 <error@@Base>
   12948:	movw	r0, #26435	; 0x6743
   1294c:	movt	r0, #1
   12950:	bl	123e0 <error@@Base>
   12954:	push	{r4, r5, r6, r7, fp, lr}
   12958:	add	fp, sp, #16
   1295c:	cmp	r1, #0
   12960:	popeq	{r4, r5, r6, r7, fp, pc}
   12964:	mov	r5, r1
   12968:	mov	r4, r0
   1296c:	mov	r6, #32
   12970:	mov	r7, r1
   12974:	ldr	r0, [r7, #12]
   12978:	bl	12d18 <error@@Base+0x938>
   1297c:	cmp	r0, #0
   12980:	strne	r6, [r7, #12]
   12984:	ldr	r7, [r7, #4]
   12988:	cmp	r7, #0
   1298c:	bne	12974 <error@@Base+0x594>
   12990:	mov	r6, #0
   12994:	b	129a8 <error@@Base+0x5c8>
   12998:	mov	r0, #1
   1299c:	cmp	r1, #32
   129a0:	beq	129d0 <error@@Base+0x5f0>
   129a4:	b	12a10 <error@@Base+0x630>
   129a8:	ldr	r7, [r5, #4]
   129ac:	ldr	r1, [r5, #12]
   129b0:	cmp	r1, #32
   129b4:	bne	129fc <error@@Base+0x61c>
   129b8:	tst	r6, #255	; 0xff
   129bc:	beq	129d0 <error@@Base+0x5f0>
   129c0:	cmp	r7, #0
   129c4:	ldrne	r1, [r7, #12]
   129c8:	cmpne	r1, #10
   129cc:	bne	12998 <error@@Base+0x5b8>
   129d0:	tst	r6, #255	; 0xff
   129d4:	cmpne	r7, #0
   129d8:	beq	12a18 <error@@Base+0x638>
   129dc:	ldr	r0, [r7, #12]
   129e0:	cmp	r0, #32
   129e4:	bne	12a18 <error@@Base+0x638>
   129e8:	ldrb	r0, [r5, #8]
   129ec:	ldrb	r1, [r7, #8]
   129f0:	orr	r0, r1, r0
   129f4:	strb	r0, [r7, #8]
   129f8:	b	12a18 <error@@Base+0x638>
   129fc:	subs	r0, r1, #10
   12a00:	movwne	r0, #1
   12a04:	tst	r6, #255	; 0xff
   12a08:	cmpeq	r1, #10
   12a0c:	beq	12a18 <error@@Base+0x638>
   12a10:	mov	r6, r0
   12a14:	b	12a2c <error@@Base+0x64c>
   12a18:	mov	r0, r4
   12a1c:	mov	r1, r5
   12a20:	bl	12e10 <error@@Base+0xa30>
   12a24:	mov	r0, r5
   12a28:	bl	10b6c <free@plt>
   12a2c:	cmp	r7, #0
   12a30:	mov	r5, r7
   12a34:	bne	129a8 <error@@Base+0x5c8>
   12a38:	pop	{r4, r5, r6, r7, fp, pc}
   12a3c:	push	{r4, sl, fp, lr}
   12a40:	add	fp, sp, #8
   12a44:	cmp	r0, #0
   12a48:	popeq	{r4, sl, fp, pc}
   12a4c:	mov	r4, r0
   12a50:	ldr	r0, [r4, #12]
   12a54:	bl	10bc0 <utf8proc_tolower@plt>
   12a58:	str	r0, [r4, #12]
   12a5c:	ldr	r4, [r4, #4]
   12a60:	cmp	r4, #0
   12a64:	bne	12a50 <error@@Base+0x670>
   12a68:	pop	{r4, sl, fp, pc}
   12a6c:	push	{fp, lr}
   12a70:	mov	fp, sp
   12a74:	bl	10b90 <utf8proc_encode_char@plt>
   12a78:	cmp	r0, #0
   12a7c:	sxtbgt	r0, r0
   12a80:	popgt	{fp, pc}
   12a84:	movw	r0, #26257	; 0x6691
   12a88:	movt	r0, #1
   12a8c:	bl	123e0 <error@@Base>
   12a90:	push	{r4, r5, r6, r7, fp, lr}
   12a94:	add	fp, sp, #16
   12a98:	mov	r7, r3
   12a9c:	mov	r4, r2
   12aa0:	mov	r5, r1
   12aa4:	tst	r0, #255	; 0xff
   12aa8:	beq	12ae8 <error@@Base+0x708>
   12aac:	mov	r0, #94	; 0x5e
   12ab0:	mov	r1, r4
   12ab4:	bl	12a6c <error@@Base+0x68c>
   12ab8:	mov	r6, r0
   12abc:	cmp	r5, #10
   12ac0:	bne	12af4 <error@@Base+0x714>
   12ac4:	movw	r0, #26147	; 0x6623
   12ac8:	movt	r0, #1
   12acc:	movw	r1, #26280	; 0x66a8
   12ad0:	movt	r1, #1
   12ad4:	tst	r7, #255	; 0xff
   12ad8:	moveq	r1, r0
   12adc:	add	r0, r4, r6
   12ae0:	pop	{r4, r5, r6, r7, fp, lr}
   12ae4:	b	10c98 <sprintf@plt>
   12ae8:	mov	r6, #0
   12aec:	cmp	r5, #10
   12af0:	beq	12ac4 <error@@Base+0x6e4>
   12af4:	mov	r0, r5
   12af8:	bl	12b6c <error@@Base+0x78c>
   12afc:	cmp	r0, #0
   12b00:	beq	12b40 <error@@Base+0x760>
   12b04:	mov	r0, r5
   12b08:	bl	12bac <error@@Base+0x7cc>
   12b0c:	cmp	r0, #0
   12b10:	beq	12b24 <error@@Base+0x744>
   12b14:	add	r1, r4, r6
   12b18:	movw	r0, #9676	; 0x25cc
   12b1c:	bl	12a6c <error@@Base+0x68c>
   12b20:	add	r6, r6, r0
   12b24:	add	r1, r4, r6
   12b28:	mov	r0, r5
   12b2c:	bl	12a6c <error@@Base+0x68c>
   12b30:	add	r0, r6, r0
   12b34:	mov	r1, #0
   12b38:	strb	r1, [r4, r0]
   12b3c:	pop	{r4, r5, r6, r7, fp, pc}
   12b40:	add	r0, r4, r6
   12b44:	cmp	r5, #255	; 0xff
   12b48:	bhi	12b58 <error@@Base+0x778>
   12b4c:	movw	r1, #26285	; 0x66ad
   12b50:	movt	r1, #1
   12b54:	b	12b60 <error@@Base+0x780>
   12b58:	movw	r1, #26292	; 0x66b4
   12b5c:	movt	r1, #1
   12b60:	mov	r2, r5
   12b64:	pop	{r4, r5, r6, r7, fp, lr}
   12b68:	b	10c98 <sprintf@plt>
   12b6c:	push	{r4, sl, fp, lr}
   12b70:	add	fp, sp, #8
   12b74:	mov	r4, r0
   12b78:	bl	10b78 <utf8proc_get_property@plt>
   12b7c:	mov	r1, r0
   12b80:	mov	r0, #1
   12b84:	cmp	r4, #32
   12b88:	popeq	{r4, sl, fp, pc}
   12b8c:	ldrsh	r1, [r1]
   12b90:	sub	r2, r1, #1
   12b94:	cmp	r2, #22
   12b98:	bcs	12ba0 <error@@Base+0x7c0>
   12b9c:	pop	{r4, sl, fp, pc}
   12ba0:	cmp	r1, #29
   12ba4:	movne	r0, #0
   12ba8:	pop	{r4, sl, fp, pc}
   12bac:	push	{fp, lr}
   12bb0:	mov	fp, sp
   12bb4:	bl	10c44 <utf8proc_category@plt>
   12bb8:	sub	r1, r0, #6
   12bbc:	mov	r0, #0
   12bc0:	cmp	r1, #3
   12bc4:	movwcc	r0, #1
   12bc8:	pop	{fp, pc}
   12bcc:	push	{r4, r5, r6, r7, fp, lr}
   12bd0:	add	fp, sp, #16
   12bd4:	sub	sp, sp, #16
   12bd8:	mov	r6, r2
   12bdc:	mov	r2, r1
   12be0:	mov	r5, r0
   12be4:	movw	r1, #12644	; 0x3164
   12be8:	movt	r1, #1
   12bec:	mov	r0, r2
   12bf0:	bl	120dc <__assert_fail@plt+0x13f0>
   12bf4:	mov	r4, r0
   12bf8:	cmp	r6, #0
   12bfc:	beq	12c50 <error@@Base+0x870>
   12c00:	movw	r0, #26299	; 0x66bb
   12c04:	movt	r0, #1
   12c08:	mov	r1, #55	; 0x37
   12c0c:	mov	r2, #1
   12c10:	mov	r3, r4
   12c14:	bl	10bd8 <fwrite@plt>
   12c18:	movw	r7, #26355	; 0x66f3
   12c1c:	movt	r7, #1
   12c20:	mov	r0, r7
   12c24:	mov	r1, #55	; 0x37
   12c28:	mov	r2, #1
   12c2c:	mov	r3, r4
   12c30:	bl	10bd8 <fwrite@plt>
   12c34:	mov	r0, r4
   12c38:	blx	r6
   12c3c:	mov	r0, r7
   12c40:	mov	r1, #55	; 0x37
   12c44:	mov	r2, #1
   12c48:	mov	r3, r4
   12c4c:	bl	10bd8 <fwrite@plt>
   12c50:	ldr	r6, [r5]
   12c54:	cmp	r6, #0
   12c58:	beq	12c8c <error@@Base+0x8ac>
   12c5c:	add	r5, sp, #7
   12c60:	ldr	r1, [r6, #12]
   12c64:	ldrb	r0, [r6, #8]
   12c68:	mov	r2, r5
   12c6c:	mov	r3, #0
   12c70:	bl	12a90 <error@@Base+0x6b0>
   12c74:	mov	r0, r5
   12c78:	mov	r1, r4
   12c7c:	bl	10cbc <fputs@plt>
   12c80:	ldr	r6, [r6, #4]
   12c84:	cmp	r6, #0
   12c88:	bne	12c60 <error@@Base+0x880>
   12c8c:	mov	r0, r4
   12c90:	bl	12154 <__assert_fail@plt+0x1468>
   12c94:	sub	sp, fp, #16
   12c98:	pop	{r4, r5, r6, r7, fp, pc}
   12c9c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12ca0:	add	fp, sp, #24
   12ca4:	sub	sp, sp, #8
   12ca8:	mov	r6, r0
   12cac:	mov	r0, #0
   12cb0:	str	r0, [sp, #4]
   12cb4:	ldrb	r0, [r1]
   12cb8:	mov	r8, #1
   12cbc:	cmp	r0, #0
   12cc0:	beq	12d0c <error@@Base+0x92c>
   12cc4:	mov	r5, r1
   12cc8:	add	r7, sp, #4
   12ccc:	mov	r0, r5
   12cd0:	mvn	r1, #0
   12cd4:	mov	r2, r7
   12cd8:	bl	10bf0 <utf8proc_iterate@plt>
   12cdc:	cmp	r0, #1
   12ce0:	blt	12d08 <error@@Base+0x928>
   12ce4:	mov	r4, r0
   12ce8:	ldr	r2, [sp, #4]
   12cec:	mov	r0, r6
   12cf0:	mov	r1, #0
   12cf4:	bl	12694 <error@@Base+0x2b4>
   12cf8:	ldrb	r0, [r5, r4]!
   12cfc:	cmp	r0, #0
   12d00:	bne	12ccc <error@@Base+0x8ec>
   12d04:	b	12d0c <error@@Base+0x92c>
   12d08:	mov	r8, #0
   12d0c:	mov	r0, r8
   12d10:	sub	sp, fp, #24
   12d14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d18:	push	{r4, sl, fp, lr}
   12d1c:	add	fp, sp, #8
   12d20:	mov	r4, r0
   12d24:	bl	10b78 <utf8proc_get_property@plt>
   12d28:	cmp	r4, #10
   12d2c:	ble	12d48 <error@@Base+0x968>
   12d30:	sub	r1, r4, #11
   12d34:	cmp	r1, #3
   12d38:	bcc	12d64 <error@@Base+0x984>
   12d3c:	cmp	r4, #160	; 0xa0
   12d40:	beq	12d64 <error@@Base+0x984>
   12d44:	b	12d70 <error@@Base+0x990>
   12d48:	cmp	r4, #9
   12d4c:	beq	12d64 <error@@Base+0x984>
   12d50:	mov	r1, #0
   12d54:	cmp	r4, #10
   12d58:	bne	12d70 <error@@Base+0x990>
   12d5c:	mov	r0, r1
   12d60:	pop	{r4, sl, fp, pc}
   12d64:	mov	r1, #1
   12d68:	mov	r0, r1
   12d6c:	pop	{r4, sl, fp, pc}
   12d70:	ldrsh	r0, [r0]
   12d74:	sub	r0, r0, #23
   12d78:	mov	r1, #0
   12d7c:	cmp	r0, #3
   12d80:	movwcc	r1, #1
   12d84:	mov	r0, r1
   12d88:	pop	{r4, sl, fp, pc}
   12d8c:	vmov.i32	q8, #0	; 0x00000000
   12d90:	vst1.32	{d16-d17}, [r0]
   12d94:	bx	lr
   12d98:	mov	r2, r1
   12d9c:	ldr	r3, [r0]
   12da0:	mov	r1, #0
   12da4:	b	12da8 <error@@Base+0x9c8>
   12da8:	push	{r4, sl, fp, lr}
   12dac:	add	fp, sp, #8
   12db0:	mov	r4, r0
   12db4:	stm	r2, {r1, r3}
   12db8:	cmp	r1, #0
   12dbc:	addne	r0, r1, #4
   12dc0:	str	r2, [r0]
   12dc4:	cmp	r3, #0
   12dc8:	addeq	r3, r4, #4
   12dcc:	str	r2, [r3]
   12dd0:	mov	r0, r4
   12dd4:	bl	12e64 <error@@Base+0xa84>
   12dd8:	ldr	r0, [r4, #12]
   12ddc:	add	r0, r0, #1
   12de0:	str	r0, [r4, #12]
   12de4:	pop	{r4, sl, fp, pc}
   12de8:	mov	r2, r1
   12dec:	ldr	r1, [r0, #4]
   12df0:	mov	r3, #0
   12df4:	b	12da8 <error@@Base+0x9c8>
   12df8:	mov	r3, r2
   12dfc:	mov	r2, r1
   12e00:	ldr	r1, [r3]
   12e04:	b	12da8 <error@@Base+0x9c8>
   12e08:	ldr	r3, [r1, #4]
   12e0c:	b	12da8 <error@@Base+0x9c8>
   12e10:	push	{r4, sl, fp, lr}
   12e14:	add	fp, sp, #8
   12e18:	mov	r4, r0
   12e1c:	ldm	r1, {r0, r2}
   12e20:	cmp	r0, #0
   12e24:	mov	r3, r4
   12e28:	addne	r3, r0, #4
   12e2c:	str	r2, [r3]
   12e30:	ldm	r1, {r0, r2}
   12e34:	cmp	r2, #0
   12e38:	addeq	r2, r4, #4
   12e3c:	str	r0, [r2]
   12e40:	mov	r0, #0
   12e44:	str	r0, [r1]
   12e48:	str	r0, [r1, #4]
   12e4c:	mov	r0, r4
   12e50:	bl	12e64 <error@@Base+0xa84>
   12e54:	ldr	r0, [r4, #12]
   12e58:	sub	r0, r0, #1
   12e5c:	str	r0, [r4, #12]
   12e60:	pop	{r4, sl, fp, pc}
   12e64:	push	{r4, sl, fp, lr}
   12e68:	add	fp, sp, #8
   12e6c:	mov	r4, r0
   12e70:	ldr	r0, [r0, #8]
   12e74:	cmp	r0, #0
   12e78:	popeq	{r4, sl, fp, pc}
   12e7c:	bl	10b6c <free@plt>
   12e80:	mov	r0, #0
   12e84:	str	r0, [r4, #8]
   12e88:	pop	{r4, sl, fp, pc}
   12e8c:	push	{r4, sl, fp, lr}
   12e90:	add	fp, sp, #8
   12e94:	mov	r4, r0
   12e98:	ldr	r0, [r0, #8]
   12e9c:	cmp	r0, #0
   12ea0:	bne	12ee4 <error@@Base+0xb04>
   12ea4:	ldr	r0, [r4, #12]
   12ea8:	cmp	r0, #0
   12eac:	beq	12ee4 <error@@Base+0xb04>
   12eb0:	mov	r1, #4
   12eb4:	bl	12040 <__assert_fail@plt+0x1354>
   12eb8:	str	r0, [r4, #8]
   12ebc:	ldr	r0, [r4]
   12ec0:	cmp	r0, #0
   12ec4:	popeq	{r4, sl, fp, pc}
   12ec8:	mov	r1, #0
   12ecc:	ldr	r2, [r4, #8]
   12ed0:	str	r0, [r2, r1]
   12ed4:	add	r1, r1, #4
   12ed8:	ldr	r0, [r0, #4]
   12edc:	cmp	r0, #0
   12ee0:	bne	12ecc <error@@Base+0xaec>
   12ee4:	pop	{r4, sl, fp, pc}
   12ee8:	push	{r4, r5, r6, sl, fp, lr}
   12eec:	add	fp, sp, #16
   12ef0:	ldr	r6, [r0]
   12ef4:	cmp	r6, #0
   12ef8:	popeq	{r4, r5, r6, sl, fp, pc}
   12efc:	mov	r4, r1
   12f00:	mov	r5, r0
   12f04:	mov	r0, r5
   12f08:	mov	r1, r6
   12f0c:	bl	12e10 <error@@Base+0xa30>
   12f10:	mov	r0, r6
   12f14:	blx	r4
   12f18:	ldr	r6, [r5]
   12f1c:	cmp	r6, #0
   12f20:	bne	12f04 <error@@Base+0xb24>
   12f24:	pop	{r4, r5, r6, sl, fp, pc}
   12f28:	cmp	r0, #2
   12f2c:	bxlt	lr
   12f30:	movw	r3, #28996	; 0x7144
   12f34:	movt	r3, #2
   12f38:	str	r2, [r3]
   12f3c:	movw	r2, #28992	; 0x7140
   12f40:	movt	r2, #2
   12f44:	str	r1, [r2]
   12f48:	sub	r1, r0, #1
   12f4c:	mov	r0, #0
   12f50:	b	12f54 <error@@Base+0xb74>
   12f54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f58:	add	fp, sp, #28
   12f5c:	sub	sp, sp, #4
   12f60:	mov	r8, r1
   12f64:	mov	r9, r0
   12f68:	movw	r7, #28992	; 0x7140
   12f6c:	movt	r7, #2
   12f70:	movw	sl, #28996	; 0x7144
   12f74:	movt	sl, #2
   12f78:	b	12fa4 <error@@Base+0xbc4>
   12f7c:	ldr	r0, [r7]
   12f80:	str	r6, [r0, r4, lsl #2]
   12f84:	sub	r1, r4, #1
   12f88:	cmp	r1, r9
   12f8c:	movgt	r0, r9
   12f90:	blgt	12f54 <error@@Base+0xb74>
   12f94:	add	r9, r5, #1
   12f98:	cmp	r9, r8
   12f9c:	subge	sp, fp, #28
   12fa0:	popge	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fa4:	ldr	r0, [r7]
   12fa8:	ldr	r6, [r0, r9, lsl #2]
   12fac:	cmp	r9, r8
   12fb0:	mov	r4, r8
   12fb4:	mov	r5, r9
   12fb8:	bge	12f7c <error@@Base+0xb9c>
   12fbc:	mov	r5, r9
   12fc0:	mov	r4, r8
   12fc4:	cmp	r5, r4
   12fc8:	blt	12fdc <error@@Base+0xbfc>
   12fcc:	b	12ff8 <error@@Base+0xc18>
   12fd0:	sub	r4, r4, #1
   12fd4:	cmp	r5, r4
   12fd8:	bge	12ff8 <error@@Base+0xc18>
   12fdc:	ldr	r0, [r7]
   12fe0:	ldr	r1, [r0, r4, lsl #2]
   12fe4:	ldr	r2, [sl]
   12fe8:	mov	r0, r6
   12fec:	blx	r2
   12ff0:	cmn	r0, #1
   12ff4:	ble	12fd0 <error@@Base+0xbf0>
   12ff8:	cmp	r5, r4
   12ffc:	beq	13010 <error@@Base+0xc30>
   13000:	ldr	r0, [r7]
   13004:	ldr	r1, [r0, r4, lsl #2]
   13008:	str	r1, [r0, r5, lsl #2]
   1300c:	add	r5, r5, #1
   13010:	cmp	r5, r4
   13014:	bge	13034 <error@@Base+0xc54>
   13018:	ldr	r0, [r7]
   1301c:	ldr	r1, [r0, r5, lsl #2]
   13020:	ldr	r2, [sl]
   13024:	mov	r0, r6
   13028:	blx	r2
   1302c:	cmp	r0, #1
   13030:	bge	1300c <error@@Base+0xc2c>
   13034:	cmp	r5, r4
   13038:	ldrne	r0, [r7]
   1303c:	ldrne	r1, [r0, r5, lsl #2]
   13040:	strne	r1, [r0, r4, lsl #2]
   13044:	subne	r4, r4, #1
   13048:	cmp	r5, r4
   1304c:	blt	12fd4 <error@@Base+0xbf4>
   13050:	b	12f7c <error@@Base+0xb9c>
   13054:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13058:	mov	r7, r0
   1305c:	ldr	r6, [pc, #72]	; 130ac <error@@Base+0xccc>
   13060:	ldr	r5, [pc, #72]	; 130b0 <error@@Base+0xcd0>
   13064:	add	r6, pc, r6
   13068:	add	r5, pc, r5
   1306c:	sub	r6, r6, r5
   13070:	mov	r8, r1
   13074:	mov	r9, r2
   13078:	bl	10b1c <calloc@plt-0x20>
   1307c:	asrs	r6, r6, #2
   13080:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13084:	mov	r4, #0
   13088:	add	r4, r4, #1
   1308c:	ldr	r3, [r5], #4
   13090:	mov	r2, r9
   13094:	mov	r1, r8
   13098:	mov	r0, r7
   1309c:	blx	r3
   130a0:	cmp	r6, r4
   130a4:	bne	13088 <error@@Base+0xca8>
   130a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   130ac:	muleq	r1, r0, sp
   130b0:	andeq	r3, r1, r8, lsl #27
   130b4:	bx	lr
   130b8:	mov	r2, r1
   130bc:	mov	r1, r0
   130c0:	mov	r0, #3
   130c4:	b	10bcc <__xstat@plt>

Disassembly of section .fini:

000130c8 <.fini>:
   130c8:	push	{r3, lr}
   130cc:	pop	{r3, pc}
