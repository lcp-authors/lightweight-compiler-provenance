
../repos/findutils/find/find:     file format elf32-littlearm


Disassembly of section .init:

00011f40 <.init>:
   11f40:	push	{r3, lr}
   11f44:	bl	12cec <__assert_fail@plt+0x600>
   11f48:	pop	{r3, pc}

Disassembly of section .plt:

00011f4c <pthread_mutex_unlock@plt-0x14>:
   11f4c:	push	{lr}		; (str lr, [sp, #-4]!)
   11f50:	ldr	lr, [pc, #4]	; 11f5c <pthread_mutex_unlock@plt-0x4>
   11f54:	add	lr, pc, lr
   11f58:	ldr	pc, [lr, #8]!
   11f5c:	andeq	lr, r3, r4, lsr #1

00011f60 <pthread_mutex_unlock@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #253952	; 0x3e000
   11f68:	ldr	pc, [ip, #164]!	; 0xa4

00011f6c <fdopen@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #253952	; 0x3e000
   11f74:	ldr	pc, [ip, #156]!	; 0x9c

00011f78 <fstatfs64@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #253952	; 0x3e000
   11f80:	ldr	pc, [ip, #148]!	; 0x94

00011f84 <calloc@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #253952	; 0x3e000
   11f8c:	ldr	pc, [ip, #140]!	; 0x8c

00011f90 <endgrent@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #253952	; 0x3e000
   11f98:	ldr	pc, [ip, #132]!	; 0x84

00011f9c <wctype@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #253952	; 0x3e000
   11fa4:	ldr	pc, [ip, #124]!	; 0x7c

00011fa8 <gnu_dev_major@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #253952	; 0x3e000
   11fb0:	ldr	pc, [ip, #116]!	; 0x74

00011fb4 <raise@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #253952	; 0x3e000
   11fbc:	ldr	pc, [ip, #108]!	; 0x6c

00011fc0 <wcrtomb@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #253952	; 0x3e000
   11fc8:	ldr	pc, [ip, #100]!	; 0x64

00011fcc <gmtime_r@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #253952	; 0x3e000
   11fd4:	ldr	pc, [ip, #92]!	; 0x5c

00011fd8 <getpwnam@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #253952	; 0x3e000
   11fe0:	ldr	pc, [ip, #84]!	; 0x54

00011fe4 <is_selinux_enabled@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #253952	; 0x3e000
   11fec:	ldr	pc, [ip, #76]!	; 0x4c

00011ff0 <iswctype@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #253952	; 0x3e000
   11ff8:	ldr	pc, [ip, #68]!	; 0x44

00011ffc <strcmp@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #253952	; 0x3e000
   12004:	ldr	pc, [ip, #60]!	; 0x3c

00012008 <strtol@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #253952	; 0x3e000
   12010:	ldr	pc, [ip, #52]!	; 0x34

00012014 <getpwuid@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #253952	; 0x3e000
   1201c:	ldr	pc, [ip, #44]!	; 0x2c

00012020 <gnu_dev_makedev@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #253952	; 0x3e000
   12028:	ldr	pc, [ip, #36]!	; 0x24

0001202c <printf@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #253952	; 0x3e000
   12034:	ldr	pc, [ip, #28]!

00012038 <gnu_dev_minor@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #253952	; 0x3e000
   12040:	ldr	pc, [ip, #20]!

00012044 <pthread_mutex_destroy@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #253952	; 0x3e000
   1204c:	ldr	pc, [ip, #12]!

00012050 <mktime@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #253952	; 0x3e000
   12058:	ldr	pc, [ip, #4]!

0001205c <fflush@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #249856	; 0x3d000
   12064:	ldr	pc, [ip, #4092]!	; 0xffc

00012068 <unlinkat@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #249856	; 0x3d000
   12070:	ldr	pc, [ip, #4084]!	; 0xff4

00012074 <wcwidth@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #249856	; 0x3d000
   1207c:	ldr	pc, [ip, #4076]!	; 0xfec

00012080 <lsetfilecon@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #249856	; 0x3d000
   12088:	ldr	pc, [ip, #4068]!	; 0xfe4

0001208c <memmove@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #249856	; 0x3d000
   12094:	ldr	pc, [ip, #4060]!	; 0xfdc

00012098 <free@plt>:
   12098:	add	ip, pc, #0, 12
   1209c:	add	ip, ip, #249856	; 0x3d000
   120a0:	ldr	pc, [ip, #4052]!	; 0xfd4

000120a4 <pthread_mutex_lock@plt>:
   120a4:	add	ip, pc, #0, 12
   120a8:	add	ip, ip, #249856	; 0x3d000
   120ac:	ldr	pc, [ip, #4044]!	; 0xfcc

000120b0 <faccessat@plt>:
   120b0:	add	ip, pc, #0, 12
   120b4:	add	ip, ip, #249856	; 0x3d000
   120b8:	ldr	pc, [ip, #4036]!	; 0xfc4

000120bc <ferror@plt>:
   120bc:	add	ip, pc, #0, 12
   120c0:	add	ip, ip, #249856	; 0x3d000
   120c4:	ldr	pc, [ip, #4028]!	; 0xfbc

000120c8 <thrd_exit@plt>:
   120c8:	add	ip, pc, #0, 12
   120cc:	add	ip, ip, #249856	; 0x3d000
   120d0:	ldr	pc, [ip, #4020]!	; 0xfb4

000120d4 <strndup@plt>:
   120d4:	add	ip, pc, #0, 12
   120d8:	add	ip, ip, #249856	; 0x3d000
   120dc:	ldr	pc, [ip, #4012]!	; 0xfac

000120e0 <clock_gettime@plt>:
   120e0:	add	ip, pc, #0, 12
   120e4:	add	ip, ip, #249856	; 0x3d000
   120e8:	ldr	pc, [ip, #4004]!	; 0xfa4

000120ec <_exit@plt>:
   120ec:	add	ip, pc, #0, 12
   120f0:	add	ip, ip, #249856	; 0x3d000
   120f4:	ldr	pc, [ip, #3996]!	; 0xf9c

000120f8 <memcpy@plt>:
   120f8:	add	ip, pc, #0, 12
   120fc:	add	ip, ip, #249856	; 0x3d000
   12100:	ldr	pc, [ip, #3988]!	; 0xf94

00012104 <execvp@plt>:
   12104:	add	ip, pc, #0, 12
   12108:	add	ip, ip, #249856	; 0x3d000
   1210c:	ldr	pc, [ip, #3980]!	; 0xf8c

00012110 <tolower@plt>:
   12110:	add	ip, pc, #0, 12
   12114:	add	ip, ip, #249856	; 0x3d000
   12118:	ldr	pc, [ip, #3972]!	; 0xf84

0001211c <pthread_mutex_init@plt>:
   1211c:	add	ip, pc, #0, 12
   12120:	add	ip, ip, #249856	; 0x3d000
   12124:	ldr	pc, [ip, #3964]!	; 0xf7c

00012128 <towlower@plt>:
   12128:	add	ip, pc, #0, 12
   1212c:	add	ip, ip, #249856	; 0x3d000
   12130:	ldr	pc, [ip, #3956]!	; 0xf74

00012134 <mbsinit@plt>:
   12134:	add	ip, pc, #0, 12
   12138:	add	ip, ip, #249856	; 0x3d000
   1213c:	ldr	pc, [ip, #3948]!	; 0xf6c

00012140 <signal@plt>:
   12140:	add	ip, pc, #0, 12
   12144:	add	ip, ip, #249856	; 0x3d000
   12148:	ldr	pc, [ip, #3940]!	; 0xf64

0001214c <time@plt>:
   1214c:	add	ip, pc, #0, 12
   12150:	add	ip, ip, #249856	; 0x3d000
   12154:	ldr	pc, [ip, #3932]!	; 0xf5c

00012158 <memcmp@plt>:
   12158:	add	ip, pc, #0, 12
   1215c:	add	ip, ip, #249856	; 0x3d000
   12160:	ldr	pc, [ip, #3924]!	; 0xf54

00012164 <uname@plt>:
   12164:	add	ip, pc, #0, 12
   12168:	add	ip, ip, #249856	; 0x3d000
   1216c:	ldr	pc, [ip, #3916]!	; 0xf4c

00012170 <ctime@plt>:
   12170:	add	ip, pc, #0, 12
   12174:	add	ip, ip, #249856	; 0x3d000
   12178:	ldr	pc, [ip, #3908]!	; 0xf44

0001217c <dcgettext@plt>:
   1217c:	add	ip, pc, #0, 12
   12180:	add	ip, ip, #249856	; 0x3d000
   12184:	ldr	pc, [ip, #3900]!	; 0xf3c

00012188 <strdup@plt>:
   12188:	add	ip, pc, #0, 12
   1218c:	add	ip, ip, #249856	; 0x3d000
   12190:	ldr	pc, [ip, #3892]!	; 0xf34

00012194 <sysconf@plt>:
   12194:	add	ip, pc, #0, 12
   12198:	add	ip, ip, #249856	; 0x3d000
   1219c:	ldr	pc, [ip, #3884]!	; 0xf2c

000121a0 <getrlimit64@plt>:
   121a0:	add	ip, pc, #0, 12
   121a4:	add	ip, ip, #249856	; 0x3d000
   121a8:	ldr	pc, [ip, #3876]!	; 0xf24

000121ac <realloc@plt>:
   121ac:	add	ip, pc, #0, 12
   121b0:	add	ip, ip, #249856	; 0x3d000
   121b4:	ldr	pc, [ip, #3868]!	; 0xf1c

000121b8 <fgetfilecon@plt>:
   121b8:	add	ip, pc, #0, 12
   121bc:	add	ip, ip, #249856	; 0x3d000
   121c0:	ldr	pc, [ip, #3860]!	; 0xf14

000121c4 <localtime_r@plt>:
   121c4:	add	ip, pc, #0, 12
   121c8:	add	ip, ip, #249856	; 0x3d000
   121cc:	ldr	pc, [ip, #3852]!	; 0xf0c

000121d0 <textdomain@plt>:
   121d0:	add	ip, pc, #0, 12
   121d4:	add	ip, ip, #249856	; 0x3d000
   121d8:	ldr	pc, [ip, #3844]!	; 0xf04

000121dc <iswcntrl@plt>:
   121dc:	add	ip, pc, #0, 12
   121e0:	add	ip, ip, #249856	; 0x3d000
   121e4:	ldr	pc, [ip, #3836]!	; 0xefc

000121e8 <chdir@plt>:
   121e8:	add	ip, pc, #0, 12
   121ec:	add	ip, ip, #249856	; 0x3d000
   121f0:	ldr	pc, [ip, #3828]!	; 0xef4

000121f4 <__fxstatat64@plt>:
   121f4:	add	ip, pc, #0, 12
   121f8:	add	ip, ip, #249856	; 0x3d000
   121fc:	ldr	pc, [ip, #3820]!	; 0xeec

00012200 <iswprint@plt>:
   12200:	add	ip, pc, #0, 12
   12204:	add	ip, ip, #249856	; 0x3d000
   12208:	ldr	pc, [ip, #3812]!	; 0xee4

0001220c <tzset@plt>:
   1220c:	add	ip, pc, #0, 12
   12210:	add	ip, ip, #249856	; 0x3d000
   12214:	ldr	pc, [ip, #3804]!	; 0xedc

00012218 <poll@plt>:
   12218:	add	ip, pc, #0, 12
   1221c:	add	ip, ip, #249856	; 0x3d000
   12220:	ldr	pc, [ip, #3796]!	; 0xed4

00012224 <__fxstat64@plt>:
   12224:	add	ip, pc, #0, 12
   12228:	add	ip, ip, #249856	; 0x3d000
   1222c:	ldr	pc, [ip, #3788]!	; 0xecc

00012230 <fwrite@plt>:
   12230:	add	ip, pc, #0, 12
   12234:	add	ip, ip, #249856	; 0x3d000
   12238:	ldr	pc, [ip, #3780]!	; 0xec4

0001223c <strcat@plt>:
   1223c:	add	ip, pc, #0, 12
   12240:	add	ip, ip, #249856	; 0x3d000
   12244:	ldr	pc, [ip, #3772]!	; 0xebc

00012248 <lseek64@plt>:
   12248:	add	ip, pc, #0, 12
   1224c:	add	ip, ip, #249856	; 0x3d000
   12250:	ldr	pc, [ip, #3764]!	; 0xeb4

00012254 <waitpid@plt>:
   12254:	add	ip, pc, #0, 12
   12258:	add	ip, ip, #249856	; 0x3d000
   1225c:	ldr	pc, [ip, #3756]!	; 0xeac

00012260 <__ctype_get_mb_cur_max@plt>:
   12260:	add	ip, pc, #0, 12
   12264:	add	ip, ip, #249856	; 0x3d000
   12268:	ldr	pc, [ip, #3748]!	; 0xea4

0001226c <hasmntopt@plt>:
   1226c:	add	ip, pc, #0, 12
   12270:	add	ip, ip, #249856	; 0x3d000
   12274:	ldr	pc, [ip, #3740]!	; 0xe9c

00012278 <strcpy@plt>:
   12278:	add	ip, pc, #0, 12
   1227c:	add	ip, ip, #249856	; 0x3d000
   12280:	ldr	pc, [ip, #3732]!	; 0xe94

00012284 <gettimeofday@plt>:
   12284:	add	ip, pc, #0, 12
   12288:	add	ip, ip, #249856	; 0x3d000
   1228c:	ldr	pc, [ip, #3724]!	; 0xe8c

00012290 <__fpending@plt>:
   12290:	add	ip, pc, #0, 12
   12294:	add	ip, ip, #249856	; 0x3d000
   12298:	ldr	pc, [ip, #3716]!	; 0xe84

0001229c <ferror_unlocked@plt>:
   1229c:	add	ip, pc, #0, 12
   122a0:	add	ip, ip, #249856	; 0x3d000
   122a4:	ldr	pc, [ip, #3708]!	; 0xe7c

000122a8 <mbrtowc@plt>:
   122a8:	add	ip, pc, #0, 12
   122ac:	add	ip, ip, #249856	; 0x3d000
   122b0:	ldr	pc, [ip, #3700]!	; 0xe74

000122b4 <strtok_r@plt>:
   122b4:	add	ip, pc, #0, 12
   122b8:	add	ip, ip, #249856	; 0x3d000
   122bc:	ldr	pc, [ip, #3692]!	; 0xe6c

000122c0 <error@plt>:
   122c0:	add	ip, pc, #0, 12
   122c4:	add	ip, ip, #249856	; 0x3d000
   122c8:	ldr	pc, [ip, #3684]!	; 0xe64

000122cc <getmntent@plt>:
   122cc:	add	ip, pc, #0, 12
   122d0:	add	ip, ip, #249856	; 0x3d000
   122d4:	ldr	pc, [ip, #3676]!	; 0xe5c

000122d8 <opendir@plt>:
   122d8:	add	ip, pc, #0, 12
   122dc:	add	ip, ip, #249856	; 0x3d000
   122e0:	ldr	pc, [ip, #3668]!	; 0xe54

000122e4 <fnmatch@plt>:
   122e4:	add	ip, pc, #0, 12
   122e8:	add	ip, ip, #249856	; 0x3d000
   122ec:	ldr	pc, [ip, #3660]!	; 0xe4c

000122f0 <open64@plt>:
   122f0:	add	ip, pc, #0, 12
   122f4:	add	ip, ip, #249856	; 0x3d000
   122f8:	ldr	pc, [ip, #3652]!	; 0xe44

000122fc <getenv@plt>:
   122fc:	add	ip, pc, #0, 12
   12300:	add	ip, ip, #249856	; 0x3d000
   12304:	ldr	pc, [ip, #3644]!	; 0xe3c

00012308 <lgetfilecon@plt>:
   12308:	add	ip, pc, #0, 12
   1230c:	add	ip, ip, #249856	; 0x3d000
   12310:	ldr	pc, [ip, #3636]!	; 0xe34

00012314 <malloc@plt>:
   12314:	add	ip, pc, #0, 12
   12318:	add	ip, ip, #249856	; 0x3d000
   1231c:	ldr	pc, [ip, #3628]!	; 0xe2c

00012320 <__libc_start_main@plt>:
   12320:	add	ip, pc, #0, 12
   12324:	add	ip, ip, #249856	; 0x3d000
   12328:	ldr	pc, [ip, #3620]!	; 0xe24

0001232c <readlinkat@plt>:
   1232c:	add	ip, pc, #0, 12
   12330:	add	ip, ip, #249856	; 0x3d000
   12334:	ldr	pc, [ip, #3612]!	; 0xe1c

00012338 <strftime@plt>:
   12338:	add	ip, pc, #0, 12
   1233c:	add	ip, ip, #249856	; 0x3d000
   12340:	ldr	pc, [ip, #3604]!	; 0xe14

00012344 <__freading@plt>:
   12344:	add	ip, pc, #0, 12
   12348:	add	ip, ip, #249856	; 0x3d000
   1234c:	ldr	pc, [ip, #3596]!	; 0xe0c

00012350 <localtime@plt>:
   12350:	add	ip, pc, #0, 12
   12354:	add	ip, ip, #249856	; 0x3d000
   12358:	ldr	pc, [ip, #3588]!	; 0xe04

0001235c <modf@plt>:
   1235c:	add	ip, pc, #0, 12
   12360:	add	ip, ip, #249856	; 0x3d000
   12364:	ldr	pc, [ip, #3580]!	; 0xdfc

00012368 <__gmon_start__@plt>:
   12368:	add	ip, pc, #0, 12
   1236c:	add	ip, ip, #249856	; 0x3d000
   12370:	ldr	pc, [ip, #3572]!	; 0xdf4

00012374 <__ctype_b_loc@plt>:
   12374:	add	ip, pc, #0, 12
   12378:	add	ip, ip, #249856	; 0x3d000
   1237c:	ldr	pc, [ip, #3564]!	; 0xdec

00012380 <getcwd@plt>:
   12380:	add	ip, pc, #0, 12
   12384:	add	ip, ip, #249856	; 0x3d000
   12388:	ldr	pc, [ip, #3556]!	; 0xde4

0001238c <exit@plt>:
   1238c:	add	ip, pc, #0, 12
   12390:	add	ip, ip, #249856	; 0x3d000
   12394:	ldr	pc, [ip, #3548]!	; 0xddc

00012398 <feof@plt>:
   12398:	add	ip, pc, #0, 12
   1239c:	add	ip, ip, #249856	; 0x3d000
   123a0:	ldr	pc, [ip, #3540]!	; 0xdd4

000123a4 <getfilecon@plt>:
   123a4:	add	ip, pc, #0, 12
   123a8:	add	ip, ip, #249856	; 0x3d000
   123ac:	ldr	pc, [ip, #3532]!	; 0xdcc

000123b0 <strtoul@plt>:
   123b0:	add	ip, pc, #0, 12
   123b4:	add	ip, ip, #249856	; 0x3d000
   123b8:	ldr	pc, [ip, #3524]!	; 0xdc4

000123bc <strlen@plt>:
   123bc:	add	ip, pc, #0, 12
   123c0:	add	ip, ip, #249856	; 0x3d000
   123c4:	ldr	pc, [ip, #3516]!	; 0xdbc

000123c8 <strchr@plt>:
   123c8:	add	ip, pc, #0, 12
   123cc:	add	ip, ip, #249856	; 0x3d000
   123d0:	ldr	pc, [ip, #3508]!	; 0xdb4

000123d4 <setenv@plt>:
   123d4:	add	ip, pc, #0, 12
   123d8:	add	ip, ip, #249856	; 0x3d000
   123dc:	ldr	pc, [ip, #3500]!	; 0xdac

000123e0 <openat64@plt>:
   123e0:	add	ip, pc, #0, 12
   123e4:	add	ip, ip, #249856	; 0x3d000
   123e8:	ldr	pc, [ip, #3492]!	; 0xda4

000123ec <memrchr@plt>:
   123ec:	add	ip, pc, #0, 12
   123f0:	add	ip, ip, #249856	; 0x3d000
   123f4:	ldr	pc, [ip, #3484]!	; 0xd9c

000123f8 <fprintf@plt>:
   123f8:	add	ip, pc, #0, 12
   123fc:	add	ip, ip, #249856	; 0x3d000
   12400:	ldr	pc, [ip, #3476]!	; 0xd94

00012404 <__errno_location@plt>:
   12404:	add	ip, pc, #0, 12
   12408:	add	ip, ip, #249856	; 0x3d000
   1240c:	ldr	pc, [ip, #3468]!	; 0xd8c

00012410 <iswalnum@plt>:
   12410:	add	ip, pc, #0, 12
   12414:	add	ip, ip, #249856	; 0x3d000
   12418:	ldr	pc, [ip, #3460]!	; 0xd84

0001241c <snprintf@plt>:
   1241c:	add	ip, pc, #0, 12
   12420:	add	ip, ip, #249856	; 0x3d000
   12424:	ldr	pc, [ip, #3452]!	; 0xd7c

00012428 <__cxa_atexit@plt>:
   12428:	add	ip, pc, #0, 12
   1242c:	add	ip, ip, #249856	; 0x3d000
   12430:	ldr	pc, [ip, #3444]!	; 0xd74

00012434 <memset@plt>:
   12434:	add	ip, pc, #0, 12
   12438:	add	ip, ip, #249856	; 0x3d000
   1243c:	ldr	pc, [ip, #3436]!	; 0xd6c

00012440 <bsearch@plt>:
   12440:	add	ip, pc, #0, 12
   12444:	add	ip, ip, #249856	; 0x3d000
   12448:	ldr	pc, [ip, #3428]!	; 0xd64

0001244c <putchar@plt>:
   1244c:	add	ip, pc, #0, 12
   12450:	add	ip, ip, #249856	; 0x3d000
   12454:	ldr	pc, [ip, #3420]!	; 0xd5c

00012458 <strncpy@plt>:
   12458:	add	ip, pc, #0, 12
   1245c:	add	ip, ip, #249856	; 0x3d000
   12460:	ldr	pc, [ip, #3412]!	; 0xd54

00012464 <pthread_mutexattr_gettype@plt>:
   12464:	add	ip, pc, #0, 12
   12468:	add	ip, ip, #249856	; 0x3d000
   1246c:	ldr	pc, [ip, #3404]!	; 0xd4c

00012470 <btowc@plt>:
   12470:	add	ip, pc, #0, 12
   12474:	add	ip, ip, #249856	; 0x3d000
   12478:	ldr	pc, [ip, #3396]!	; 0xd44

0001247c <strtod@plt>:
   1247c:	add	ip, pc, #0, 12
   12480:	add	ip, ip, #249856	; 0x3d000
   12484:	ldr	pc, [ip, #3388]!	; 0xd3c

00012488 <fileno@plt>:
   12488:	add	ip, pc, #0, 12
   1248c:	add	ip, ip, #249856	; 0x3d000
   12490:	ldr	pc, [ip, #3380]!	; 0xd34

00012494 <difftime@plt>:
   12494:	add	ip, pc, #0, 12
   12498:	add	ip, ip, #249856	; 0x3d000
   1249c:	ldr	pc, [ip, #3372]!	; 0xd2c

000124a0 <strtoumax@plt>:
   124a0:	add	ip, pc, #0, 12
   124a4:	add	ip, ip, #249856	; 0x3d000
   124a8:	ldr	pc, [ip, #3364]!	; 0xd24

000124ac <memchr@plt>:
   124ac:	add	ip, pc, #0, 12
   124b0:	add	ip, ip, #249856	; 0x3d000
   124b4:	ldr	pc, [ip, #3356]!	; 0xd1c

000124b8 <setfilecon@plt>:
   124b8:	add	ip, pc, #0, 12
   124bc:	add	ip, ip, #249856	; 0x3d000
   124c0:	ldr	pc, [ip, #3348]!	; 0xd14

000124c4 <access@plt>:
   124c4:	add	ip, pc, #0, 12
   124c8:	add	ip, ip, #249856	; 0x3d000
   124cc:	ldr	pc, [ip, #3340]!	; 0xd0c

000124d0 <fclose@plt>:
   124d0:	add	ip, pc, #0, 12
   124d4:	add	ip, ip, #249856	; 0x3d000
   124d8:	ldr	pc, [ip, #3332]!	; 0xd04

000124dc <strnlen@plt>:
   124dc:	add	ip, pc, #0, 12
   124e0:	add	ip, ip, #249856	; 0x3d000
   124e4:	ldr	pc, [ip, #3324]!	; 0xcfc

000124e8 <fseeko64@plt>:
   124e8:	add	ip, pc, #0, 12
   124ec:	add	ip, ip, #249856	; 0x3d000
   124f0:	ldr	pc, [ip, #3316]!	; 0xcf4

000124f4 <endmntent@plt>:
   124f4:	add	ip, pc, #0, 12
   124f8:	add	ip, ip, #249856	; 0x3d000
   124fc:	ldr	pc, [ip, #3308]!	; 0xcec

00012500 <fcntl64@plt>:
   12500:	add	ip, pc, #0, 12
   12504:	add	ip, ip, #249856	; 0x3d000
   12508:	ldr	pc, [ip, #3300]!	; 0xce4

0001250c <rpmatch@plt>:
   1250c:	add	ip, pc, #0, 12
   12510:	add	ip, ip, #249856	; 0x3d000
   12514:	ldr	pc, [ip, #3292]!	; 0xcdc

00012518 <setlocale@plt>:
   12518:	add	ip, pc, #0, 12
   1251c:	add	ip, ip, #249856	; 0x3d000
   12520:	ldr	pc, [ip, #3284]!	; 0xcd4

00012524 <fork@plt>:
   12524:	add	ip, pc, #0, 12
   12528:	add	ip, ip, #249856	; 0x3d000
   1252c:	ldr	pc, [ip, #3276]!	; 0xccc

00012530 <endpwent@plt>:
   12530:	add	ip, pc, #0, 12
   12534:	add	ip, ip, #249856	; 0x3d000
   12538:	ldr	pc, [ip, #3268]!	; 0xcc4

0001253c <toupper@plt>:
   1253c:	add	ip, pc, #0, 12
   12540:	add	ip, ip, #249856	; 0x3d000
   12544:	ldr	pc, [ip, #3260]!	; 0xcbc

00012548 <strrchr@plt>:
   12548:	add	ip, pc, #0, 12
   1254c:	add	ip, ip, #249856	; 0x3d000
   12550:	ldr	pc, [ip, #3252]!	; 0xcb4

00012554 <vfprintf@plt>:
   12554:	add	ip, pc, #0, 12
   12558:	add	ip, ip, #249856	; 0x3d000
   1255c:	ldr	pc, [ip, #3244]!	; 0xcac

00012560 <nl_langinfo@plt>:
   12560:	add	ip, pc, #0, 12
   12564:	add	ip, ip, #249856	; 0x3d000
   12568:	ldr	pc, [ip, #3236]!	; 0xca4

0001256c <fputc@plt>:
   1256c:	add	ip, pc, #0, 12
   12570:	add	ip, ip, #249856	; 0x3d000
   12574:	ldr	pc, [ip, #3228]!	; 0xc9c

00012578 <sscanf@plt>:
   12578:	add	ip, pc, #0, 12
   1257c:	add	ip, ip, #249856	; 0x3d000
   12580:	ldr	pc, [ip, #3220]!	; 0xc94

00012584 <localeconv@plt>:
   12584:	add	ip, pc, #0, 12
   12588:	add	ip, ip, #249856	; 0x3d000
   1258c:	ldr	pc, [ip, #3212]!	; 0xc8c

00012590 <sprintf@plt>:
   12590:	add	ip, pc, #0, 12
   12594:	add	ip, ip, #249856	; 0x3d000
   12598:	ldr	pc, [ip, #3204]!	; 0xc84

0001259c <readdir64@plt>:
   1259c:	add	ip, pc, #0, 12
   125a0:	add	ip, ip, #249856	; 0x3d000
   125a4:	ldr	pc, [ip, #3196]!	; 0xc7c

000125a8 <fdopendir@plt>:
   125a8:	add	ip, pc, #0, 12
   125ac:	add	ip, ip, #249856	; 0x3d000
   125b0:	ldr	pc, [ip, #3188]!	; 0xc74

000125b4 <timegm@plt>:
   125b4:	add	ip, pc, #0, 12
   125b8:	add	ip, ip, #249856	; 0x3d000
   125bc:	ldr	pc, [ip, #3180]!	; 0xc6c

000125c0 <putc@plt>:
   125c0:	add	ip, pc, #0, 12
   125c4:	add	ip, ip, #249856	; 0x3d000
   125c8:	ldr	pc, [ip, #3172]!	; 0xc64

000125cc <dirfd@plt>:
   125cc:	add	ip, pc, #0, 12
   125d0:	add	ip, ip, #249856	; 0x3d000
   125d4:	ldr	pc, [ip, #3164]!	; 0xc5c

000125d8 <fchdir@plt>:
   125d8:	add	ip, pc, #0, 12
   125dc:	add	ip, ip, #249856	; 0x3d000
   125e0:	ldr	pc, [ip, #3156]!	; 0xc54

000125e4 <fopen64@plt>:
   125e4:	add	ip, pc, #0, 12
   125e8:	add	ip, ip, #249856	; 0x3d000
   125ec:	ldr	pc, [ip, #3148]!	; 0xc4c

000125f0 <qsort@plt>:
   125f0:	add	ip, pc, #0, 12
   125f4:	add	ip, ip, #249856	; 0x3d000
   125f8:	ldr	pc, [ip, #3140]!	; 0xc44

000125fc <freecon@plt>:
   125fc:	add	ip, pc, #0, 12
   12600:	add	ip, ip, #249856	; 0x3d000
   12604:	ldr	pc, [ip, #3132]!	; 0xc3c

00012608 <strpbrk@plt>:
   12608:	add	ip, pc, #0, 12
   1260c:	add	ip, ip, #249856	; 0x3d000
   12610:	ldr	pc, [ip, #3124]!	; 0xc34

00012614 <setmntent@plt>:
   12614:	add	ip, pc, #0, 12
   12618:	add	ip, ip, #249856	; 0x3d000
   1261c:	ldr	pc, [ip, #3116]!	; 0xc2c

00012620 <bindtextdomain@plt>:
   12620:	add	ip, pc, #0, 12
   12624:	add	ip, ip, #249856	; 0x3d000
   12628:	ldr	pc, [ip, #3108]!	; 0xc24

0001262c <atof@plt>:
   1262c:	add	ip, pc, #0, 12
   12630:	add	ip, ip, #249856	; 0x3d000
   12634:	ldr	pc, [ip, #3100]!	; 0xc1c

00012638 <getline@plt>:
   12638:	add	ip, pc, #0, 12
   1263c:	add	ip, ip, #249856	; 0x3d000
   12640:	ldr	pc, [ip, #3092]!	; 0xc14

00012644 <getdelim@plt>:
   12644:	add	ip, pc, #0, 12
   12648:	add	ip, ip, #249856	; 0x3d000
   1264c:	ldr	pc, [ip, #3084]!	; 0xc0c

00012650 <__xstat64@plt>:
   12650:	add	ip, pc, #0, 12
   12654:	add	ip, ip, #249856	; 0x3d000
   12658:	ldr	pc, [ip, #3076]!	; 0xc04

0001265c <isatty@plt>:
   1265c:	add	ip, pc, #0, 12
   12660:	add	ip, ip, #249856	; 0x3d000
   12664:	ldr	pc, [ip, #3068]!	; 0xbfc

00012668 <unsetenv@plt>:
   12668:	add	ip, pc, #0, 12
   1266c:	add	ip, ip, #249856	; 0x3d000
   12670:	ldr	pc, [ip, #3060]!	; 0xbf4

00012674 <towupper@plt>:
   12674:	add	ip, pc, #0, 12
   12678:	add	ip, ip, #249856	; 0x3d000
   1267c:	ldr	pc, [ip, #3052]!	; 0xbec

00012680 <fputs@plt>:
   12680:	add	ip, pc, #0, 12
   12684:	add	ip, ip, #249856	; 0x3d000
   12688:	ldr	pc, [ip, #3044]!	; 0xbe4

0001268c <strncmp@plt>:
   1268c:	add	ip, pc, #0, 12
   12690:	add	ip, ip, #249856	; 0x3d000
   12694:	ldr	pc, [ip, #3036]!	; 0xbdc

00012698 <abort@plt>:
   12698:	add	ip, pc, #0, 12
   1269c:	add	ip, ip, #249856	; 0x3d000
   126a0:	ldr	pc, [ip, #3028]!	; 0xbd4

000126a4 <close@plt>:
   126a4:	add	ip, pc, #0, 12
   126a8:	add	ip, ip, #249856	; 0x3d000
   126ac:	ldr	pc, [ip, #3020]!	; 0xbcc

000126b0 <__lxstat64@plt>:
   126b0:	add	ip, pc, #0, 12
   126b4:	add	ip, ip, #249856	; 0x3d000
   126b8:	ldr	pc, [ip, #3012]!	; 0xbc4

000126bc <closedir@plt>:
   126bc:	add	ip, pc, #0, 12
   126c0:	add	ip, ip, #249856	; 0x3d000
   126c4:	ldr	pc, [ip, #3004]!	; 0xbbc

000126c8 <getgrgid@plt>:
   126c8:	add	ip, pc, #0, 12
   126cc:	add	ip, ip, #249856	; 0x3d000
   126d0:	ldr	pc, [ip, #2996]!	; 0xbb4

000126d4 <getgrnam@plt>:
   126d4:	add	ip, pc, #0, 12
   126d8:	add	ip, ip, #249856	; 0x3d000
   126dc:	ldr	pc, [ip, #2988]!	; 0xbac

000126e0 <strspn@plt>:
   126e0:	add	ip, pc, #0, 12
   126e4:	add	ip, ip, #249856	; 0x3d000
   126e8:	ldr	pc, [ip, #2980]!	; 0xba4

000126ec <__assert_fail@plt>:
   126ec:	add	ip, pc, #0, 12
   126f0:	add	ip, ip, #249856	; 0x3d000
   126f4:	ldr	pc, [ip, #2972]!	; 0xb9c

Disassembly of section .text:

000126f8 <.text>:
   126f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126fc:	mov	r4, r0
   12700:	ldr	r0, [r1]
   12704:	ldr	fp, [pc, #1300]	; 12c20 <__assert_fail@plt+0x534>
   12708:	cmp	r0, #0
   1270c:	sub	sp, sp, #228	; 0xe4
   12710:	ldreq	r0, [pc, #1292]	; 12c24 <__assert_fail@plt+0x538>
   12714:	mov	r7, r1
   12718:	bl	26b34 <__assert_fail@plt+0x14448>
   1271c:	bl	17814 <__assert_fail@plt+0x5128>
   12720:	mov	r3, #0
   12724:	strb	r3, [fp, #40]	; 0x28
   12728:	str	r3, [fp, #28]
   1272c:	strb	r3, [fp, #32]
   12730:	mvn	r3, #99	; 0x63
   12734:	str	r3, [fp, #16]
   12738:	bl	1e934 <__assert_fail@plt+0xc248>
   1273c:	cmp	r0, #0
   12740:	beq	12748 <__assert_fail@plt+0x5c>
   12744:	bl	1e808 <__assert_fail@plt+0xc11c>
   12748:	ldr	r0, [pc, #1240]	; 12c28 <__assert_fail@plt+0x53c>
   1274c:	bl	18660 <__assert_fail@plt+0x5f74>
   12750:	cmp	r0, #0
   12754:	str	r0, [fp, #36]	; 0x24
   12758:	bne	12784 <__assert_fail@plt+0x98>
   1275c:	bl	12404 <__errno_location@plt>
   12760:	ldr	r1, [pc, #1220]	; 12c2c <__assert_fail@plt+0x540>
   12764:	mov	r2, #5
   12768:	ldr	r4, [r0]
   1276c:	mov	r0, #0
   12770:	bl	1217c <dcgettext@plt>
   12774:	mov	r1, r4
   12778:	mov	r2, r0
   1277c:	mov	r0, #1
   12780:	bl	122c0 <error@plt>
   12784:	ldr	r5, [pc, #1188]	; 12c30 <__assert_fail@plt+0x544>
   12788:	mov	r0, r5
   1278c:	bl	17f4c <__assert_fail@plt+0x5860>
   12790:	ldr	r1, [pc, #1180]	; 12c34 <__assert_fail@plt+0x548>
   12794:	mov	r0, #6
   12798:	bl	12518 <setlocale@plt>
   1279c:	ldr	r1, [pc, #1172]	; 12c38 <__assert_fail@plt+0x54c>
   127a0:	ldr	r0, [pc, #1172]	; 12c3c <__assert_fail@plt+0x550>
   127a4:	bl	12620 <bindtextdomain@plt>
   127a8:	ldr	r0, [pc, #1164]	; 12c3c <__assert_fail@plt+0x550>
   127ac:	bl	121d0 <textdomain@plt>
   127b0:	ldr	r0, [pc, #1160]	; 12c40 <__assert_fail@plt+0x554>
   127b4:	bl	39b6c <__assert_fail@plt+0x27480>
   127b8:	subs	r6, r0, #0
   127bc:	beq	127d4 <__assert_fail@plt+0xe8>
   127c0:	bl	12404 <__errno_location@plt>
   127c4:	mov	r2, #5
   127c8:	ldr	r1, [pc, #1140]	; 12c44 <__assert_fail@plt+0x558>
   127cc:	ldr	r4, [r0]
   127d0:	b	1276c <__assert_fail@plt+0x80>
   127d4:	mov	r1, r7
   127d8:	mov	r0, r4
   127dc:	bl	17b80 <__assert_fail@plt+0x5494>
   127e0:	ldr	r3, [r5, #44]	; 0x2c
   127e4:	tst	r3, #2
   127e8:	ldrne	r2, [pc, #1112]	; 12c48 <__assert_fail@plt+0x55c>
   127ec:	strne	r2, [r5, #52]	; 0x34
   127f0:	tst	r3, #128	; 0x80
   127f4:	mov	r8, r0
   127f8:	beq	1281c <__assert_fail@plt+0x130>
   127fc:	ldr	r3, [pc, #1096]	; 12c4c <__assert_fail@plt+0x560>
   12800:	ldr	r0, [pc, #1096]	; 12c50 <__assert_fail@plt+0x564>
   12804:	ldr	r9, [r3]
   12808:	bl	12170 <ctime@plt>
   1280c:	ldr	r1, [pc, #1088]	; 12c54 <__assert_fail@plt+0x568>
   12810:	mov	r2, r0
   12814:	mov	r0, r9
   12818:	bl	123f8 <fprintf@plt>
   1281c:	mov	r0, r4
   12820:	mov	r2, r8
   12824:	mov	r1, r7
   12828:	bl	16d0c <__assert_fail@plt+0x4620>
   1282c:	sub	r4, r4, r8
   12830:	cmp	r4, #0
   12834:	add	r9, r7, r8, lsl #2
   12838:	str	r0, [sp, #12]
   1283c:	ble	12854 <__assert_fail@plt+0x168>
   12840:	mov	r1, #1
   12844:	ldr	r0, [r7, r8, lsl #2]
   12848:	bl	17afc <__assert_fail@plt+0x5410>
   1284c:	eor	r0, r0, #1
   12850:	uxtb	r6, r0
   12854:	ldr	r4, [r5, #76]	; 0x4c
   12858:	cmp	r4, #0
   1285c:	beq	12aa4 <__assert_fail@plt+0x3b8>
   12860:	cmp	r6, #0
   12864:	beq	128bc <__assert_fail@plt+0x1d0>
   12868:	mov	r2, #5
   1286c:	ldr	r1, [pc, #996]	; 12c58 <__assert_fail@plt+0x56c>
   12870:	mov	r0, #0
   12874:	bl	1217c <dcgettext@plt>
   12878:	ldr	r1, [r7, r8, lsl #2]
   1287c:	mov	r4, r0
   12880:	mov	r0, #0
   12884:	bl	180e8 <__assert_fail@plt+0x59fc>
   12888:	mov	r1, #0
   1288c:	mov	r2, r4
   12890:	mov	r3, r0
   12894:	mov	r0, r1
   12898:	bl	122c0 <error@plt>
   1289c:	mov	r2, #5
   128a0:	ldr	r1, [pc, #948]	; 12c5c <__assert_fail@plt+0x570>
   128a4:	mov	r0, #0
   128a8:	bl	1217c <dcgettext@plt>
   128ac:	ldr	r2, [pc, #940]	; 12c60 <__assert_fail@plt+0x574>
   128b0:	mov	r3, r0
   128b4:	mov	r1, #0
   128b8:	b	129f0 <__assert_fail@plt+0x304>
   128bc:	ldr	r1, [pc, #928]	; 12c64 <__assert_fail@plt+0x578>
   128c0:	mov	r0, r4
   128c4:	bl	11ffc <strcmp@plt>
   128c8:	cmp	r0, #0
   128cc:	bne	129a8 <__assert_fail@plt+0x2bc>
   128d0:	ldrb	r3, [r5, #80]	; 0x50
   128d4:	mov	r2, #5
   128d8:	cmp	r3, #0
   128dc:	beq	128f4 <__assert_fail@plt+0x208>
   128e0:	ldr	r1, [pc, #896]	; 12c68 <__assert_fail@plt+0x57c>
   128e4:	bl	1217c <dcgettext@plt>
   128e8:	ldr	r2, [pc, #892]	; 12c6c <__assert_fail@plt+0x580>
   128ec:	mov	r3, r0
   128f0:	b	128b4 <__assert_fail@plt+0x1c8>
   128f4:	ldr	r1, [pc, #884]	; 12c70 <__assert_fail@plt+0x584>
   128f8:	bl	1217c <dcgettext@plt>
   128fc:	mov	r1, r0
   12900:	mov	r0, r6
   12904:	bl	180e8 <__assert_fail@plt+0x59fc>
   12908:	ldr	r3, [pc, #868]	; 12c74 <__assert_fail@plt+0x588>
   1290c:	ldr	r7, [r3]
   12910:	mov	r4, r0
   12914:	mov	r0, r7
   12918:	bl	1f890 <__assert_fail@plt+0xd1a4>
   1291c:	mov	r8, r0
   12920:	cmp	r8, #0
   12924:	beq	12b2c <__assert_fail@plt+0x440>
   12928:	mov	sl, #1
   1292c:	mov	r9, #0
   12930:	add	r1, sp, #120	; 0x78
   12934:	mov	r0, r8
   12938:	bl	1f8c0 <__assert_fail@plt+0xd1d4>
   1293c:	subs	r6, r0, #0
   12940:	bne	12b44 <__assert_fail@plt+0x458>
   12944:	ldr	r3, [sp, #120]	; 0x78
   12948:	cmp	r3, #3
   1294c:	beq	12b2c <__assert_fail@plt+0x440>
   12950:	cmp	r3, #4
   12954:	beq	12af0 <__assert_fail@plt+0x404>
   12958:	cmp	r3, #2
   1295c:	bne	12b30 <__assert_fail@plt+0x444>
   12960:	mov	r0, r8
   12964:	bl	1f974 <__assert_fail@plt+0xd288>
   12968:	cmp	sl, #0
   1296c:	beq	12ad0 <__assert_fail@plt+0x3e4>
   12970:	ldr	r3, [r5, #76]	; 0x4c
   12974:	cmp	r3, #0
   12978:	beq	12ac4 <__assert_fail@plt+0x3d8>
   1297c:	mov	r0, r7
   12980:	bl	120bc <ferror@plt>
   12984:	cmp	r0, #0
   12988:	beq	12c0c <__assert_fail@plt+0x520>
   1298c:	mov	r2, #5
   12990:	ldr	r1, [pc, #736]	; 12c78 <__assert_fail@plt+0x58c>
   12994:	mov	r0, #0
   12998:	bl	1217c <dcgettext@plt>
   1299c:	mov	r3, r4
   129a0:	mov	r2, r0
   129a4:	b	128b4 <__assert_fail@plt+0x1c8>
   129a8:	mov	r1, r4
   129ac:	mov	r0, r6
   129b0:	bl	180e8 <__assert_fail@plt+0x59fc>
   129b4:	ldr	r1, [pc, #704]	; 12c7c <__assert_fail@plt+0x590>
   129b8:	mov	r4, r0
   129bc:	ldr	r0, [r5, #76]	; 0x4c
   129c0:	bl	125e4 <fopen64@plt>
   129c4:	subs	r7, r0, #0
   129c8:	bne	129f8 <__assert_fail@plt+0x30c>
   129cc:	bl	12404 <__errno_location@plt>
   129d0:	mov	r2, #5
   129d4:	ldr	r1, [pc, #676]	; 12c80 <__assert_fail@plt+0x594>
   129d8:	ldr	r5, [r0]
   129dc:	mov	r0, r6
   129e0:	bl	1217c <dcgettext@plt>
   129e4:	mov	r3, r4
   129e8:	mov	r1, r5
   129ec:	mov	r2, r0
   129f0:	mov	r0, #1
   129f4:	bl	122c0 <error@plt>
   129f8:	bl	12488 <fileno@plt>
   129fc:	subs	r6, r0, #0
   12a00:	bge	12a18 <__assert_fail@plt+0x32c>
   12a04:	ldr	r3, [pc, #632]	; 12c84 <__assert_fail@plt+0x598>
   12a08:	ldr	r2, [pc, #632]	; 12c88 <__assert_fail@plt+0x59c>
   12a0c:	ldr	r1, [pc, #632]	; 12c8c <__assert_fail@plt+0x5a0>
   12a10:	ldr	r0, [pc, #632]	; 12c90 <__assert_fail@plt+0x5a4>
   12a14:	bl	126ec <__assert_fail@plt>
   12a18:	ldrb	r3, [r5, #80]	; 0x50
   12a1c:	cmp	r3, #0
   12a20:	beq	12a94 <__assert_fail@plt+0x3a8>
   12a24:	add	r1, sp, #16
   12a28:	bl	39b94 <__assert_fail@plt+0x274a8>
   12a2c:	cmp	r0, #0
   12a30:	bne	12a94 <__assert_fail@plt+0x3a8>
   12a34:	add	r1, sp, #120	; 0x78
   12a38:	bl	39b94 <__assert_fail@plt+0x274a8>
   12a3c:	cmp	r0, #0
   12a40:	bne	12a94 <__assert_fail@plt+0x3a8>
   12a44:	ldrd	r2, [sp, #216]	; 0xd8
   12a48:	ldrd	r0, [sp, #112]	; 0x70
   12a4c:	cmp	r1, r3
   12a50:	cmpeq	r0, r2
   12a54:	bne	12a94 <__assert_fail@plt+0x3a8>
   12a58:	ldrd	r2, [sp, #120]	; 0x78
   12a5c:	ldrd	r0, [sp, #16]
   12a60:	cmp	r1, r3
   12a64:	cmpeq	r0, r2
   12a68:	bne	12a94 <__assert_fail@plt+0x3a8>
   12a6c:	mov	r2, #5
   12a70:	ldr	r1, [pc, #540]	; 12c94 <__assert_fail@plt+0x5a8>
   12a74:	mov	r0, #0
   12a78:	bl	1217c <dcgettext@plt>
   12a7c:	str	r4, [sp]
   12a80:	ldr	r2, [pc, #528]	; 12c98 <__assert_fail@plt+0x5ac>
   12a84:	mov	r1, #0
   12a88:	mov	r3, r0
   12a8c:	mov	r0, #1
   12a90:	bl	122c0 <error@plt>
   12a94:	mov	r1, #1
   12a98:	mov	r0, r6
   12a9c:	bl	1fb18 <__assert_fail@plt+0xd42c>
   12aa0:	b	12914 <__assert_fail@plt+0x228>
   12aa4:	cmp	r6, #0
   12aa8:	bne	12adc <__assert_fail@plt+0x3f0>
   12aac:	mov	r3, #46	; 0x2e
   12ab0:	add	r0, sp, #120	; 0x78
   12ab4:	strh	r3, [sp, #120]	; 0x78
   12ab8:	bl	12fd8 <__assert_fail@plt+0x8ec>
   12abc:	cmp	r0, #0
   12ac0:	beq	12ad0 <__assert_fail@plt+0x3e4>
   12ac4:	ldr	r0, [sp, #12]
   12ac8:	bl	14d90 <__assert_fail@plt+0x26a4>
   12acc:	bl	18464 <__assert_fail@plt+0x5d78>
   12ad0:	ldr	r0, [fp, #28]
   12ad4:	add	sp, sp, #228	; 0xe4
   12ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12adc:	mov	r0, r9
   12ae0:	bl	1f868 <__assert_fail@plt+0xd17c>
   12ae4:	mov	r7, r4
   12ae8:	mov	r8, r0
   12aec:	b	12920 <__assert_fail@plt+0x234>
   12af0:	bl	12404 <__errno_location@plt>
   12af4:	mov	r2, #5
   12af8:	ldr	r1, [pc, #412]	; 12c9c <__assert_fail@plt+0x5b0>
   12afc:	mov	sl, r6
   12b00:	ldr	r9, [r0]
   12b04:	mov	r0, r6
   12b08:	bl	1217c <dcgettext@plt>
   12b0c:	mov	r3, r4
   12b10:	mov	r1, r9
   12b14:	mov	r2, r0
   12b18:	mov	r0, r6
   12b1c:	bl	122c0 <error@plt>
   12b20:	mov	r3, #1
   12b24:	str	r3, [fp, #28]
   12b28:	b	12960 <__assert_fail@plt+0x274>
   12b2c:	bl	291d8 <__assert_fail@plt+0x16aec>
   12b30:	ldr	r3, [pc, #332]	; 12c84 <__assert_fail@plt+0x598>
   12b34:	ldr	r2, [pc, #356]	; 12ca0 <__assert_fail@plt+0x5b4>
   12b38:	ldr	r1, [pc, #332]	; 12c8c <__assert_fail@plt+0x5a0>
   12b3c:	ldr	r0, [pc, #352]	; 12ca4 <__assert_fail@plt+0x5b8>
   12b40:	b	12a14 <__assert_fail@plt+0x328>
   12b44:	ldrb	r3, [r6]
   12b48:	cmp	r3, #0
   12b4c:	str	r3, [sp, #8]
   12b50:	ldr	r3, [r5, #76]	; 0x4c
   12b54:	bne	12bcc <__assert_fail@plt+0x4e0>
   12b58:	cmp	r3, #0
   12b5c:	bne	12b90 <__assert_fail@plt+0x4a4>
   12b60:	mov	r1, r6
   12b64:	mov	r0, r9
   12b68:	bl	180e8 <__assert_fail@plt+0x59fc>
   12b6c:	ldr	r2, [pc, #236]	; 12c60 <__assert_fail@plt+0x574>
   12b70:	mov	r1, #2
   12b74:	mov	r3, r0
   12b78:	mov	r0, r9
   12b7c:	bl	122c0 <error@plt>
   12b80:	mov	r3, #1
   12b84:	str	r3, [fp, #28]
   12b88:	mov	sl, r9
   12b8c:	b	12930 <__assert_fail@plt+0x244>
   12b90:	mov	r0, r8
   12b94:	bl	1f954 <__assert_fail@plt+0xd268>
   12b98:	mov	r2, #5
   12b9c:	ldr	r1, [pc, #260]	; 12ca8 <__assert_fail@plt+0x5bc>
   12ba0:	mov	r6, r0
   12ba4:	mov	r0, r9
   12ba8:	bl	1217c <dcgettext@plt>
   12bac:	str	r6, [sp]
   12bb0:	mov	r3, r4
   12bb4:	ldr	r2, [pc, #240]	; 12cac <__assert_fail@plt+0x5c0>
   12bb8:	mov	r1, r9
   12bbc:	str	r0, [sp, #4]
   12bc0:	ldr	r0, [sp, #8]
   12bc4:	bl	122c0 <error@plt>
   12bc8:	b	12b80 <__assert_fail@plt+0x494>
   12bcc:	cmp	r3, #0
   12bd0:	beq	12bf8 <__assert_fail@plt+0x50c>
   12bd4:	mov	r0, r6
   12bd8:	bl	123bc <strlen@plt>
   12bdc:	str	r0, [fp, #20]
   12be0:	mov	r0, r6
   12be4:	bl	12fd8 <__assert_fail@plt+0x8ec>
   12be8:	cmp	r0, #0
   12bec:	bne	12930 <__assert_fail@plt+0x244>
   12bf0:	mov	sl, r0
   12bf4:	b	12960 <__assert_fail@plt+0x274>
   12bf8:	mov	r1, #1
   12bfc:	bl	17afc <__assert_fail@plt+0x5410>
   12c00:	cmp	r0, #0
   12c04:	beq	12bd4 <__assert_fail@plt+0x4e8>
   12c08:	b	12960 <__assert_fail@plt+0x274>
   12c0c:	mov	r0, r7
   12c10:	bl	124d0 <fclose@plt>
   12c14:	cmp	r0, #0
   12c18:	beq	12ac4 <__assert_fail@plt+0x3d8>
   12c1c:	b	1298c <__assert_fail@plt+0x2a0>
   12c20:	andeq	r0, r5, r8, asr lr
   12c24:	andeq	r9, r3, pc, lsr #30
   12c28:	andeq	sp, r3, r8, asr #12
   12c2c:	andeq	r9, r3, r4, lsr pc
   12c30:	andeq	r0, r5, r4, lsl #29
   12c34:	ldrdeq	fp, [r3], -pc	; <UNPREDICTABLE>
   12c38:	andeq	r9, r3, r0, ror #30
   12c3c:	muleq	r3, r5, sl
   12c40:	andeq	pc, r1, ip, lsr #23
   12c44:	andeq	r9, r3, r8, ror pc
   12c48:	andeq	r7, r1, ip, ror #19
   12c4c:	andeq	r0, r5, r0, ror #10
   12c50:	andeq	r0, r5, r0, lsr #29
   12c54:	muleq	r3, fp, pc	; <UNPREDICTABLE>
   12c58:	andeq	r9, r3, lr, lsr #31
   12c5c:			; <UNDEFINED> instruction: 0x00039fbf
   12c60:	andeq	pc, r3, pc, lsr #9
   12c64:	andeq	fp, r3, r4, lsl #17
   12c68:	strdeq	r9, [r3], -r2
   12c6c:	andeq	lr, r3, r1, ror #26
   12c70:	andeq	sl, r3, r6, asr #32
   12c74:	andeq	r0, r5, r8, ror #10
   12c78:	andeq	sl, r3, sp, lsr r1
   12c7c:			; <UNDEFINED> instruction: 0x0003dab7
   12c80:	andeq	sl, r3, r7, asr r0
   12c84:	andeq	r9, r3, r5, lsl #24
   12c88:	andeq	r0, r0, r2, ror #4
   12c8c:	andeq	r9, r3, sp, lsl ip
   12c90:	andeq	r9, r3, r1, asr #24
   12c94:	andeq	sl, r3, r2, ror r0
   12c98:	ldrdeq	sl, [r3], -r5
   12c9c:	ldrdeq	sl, [r3], -sp
   12ca0:	andeq	r0, r0, r3, lsr #5
   12ca4:	andeq	sl, r3, ip, ror #1
   12ca8:	andeq	sl, r3, r4, lsl r1
   12cac:	andeq	sl, r3, r2, lsr r1
   12cb0:	mov	fp, #0
   12cb4:	mov	lr, #0
   12cb8:	pop	{r1}		; (ldr r1, [sp], #4)
   12cbc:	mov	r2, sp
   12cc0:	push	{r2}		; (str r2, [sp, #-4]!)
   12cc4:	push	{r0}		; (str r0, [sp, #-4]!)
   12cc8:	ldr	ip, [pc, #16]	; 12ce0 <__assert_fail@plt+0x5f4>
   12ccc:	push	{ip}		; (str ip, [sp, #-4]!)
   12cd0:	ldr	r0, [pc, #12]	; 12ce4 <__assert_fail@plt+0x5f8>
   12cd4:	ldr	r3, [pc, #12]	; 12ce8 <__assert_fail@plt+0x5fc>
   12cd8:	bl	12320 <__libc_start_main@plt>
   12cdc:	bl	12698 <abort@plt>
   12ce0:	andeq	r9, r3, r8, ror #22
   12ce4:	strdeq	r2, [r1], -r8
   12ce8:	andeq	r9, r3, r8, lsl #22
   12cec:	ldr	r3, [pc, #20]	; 12d08 <__assert_fail@plt+0x61c>
   12cf0:	ldr	r2, [pc, #20]	; 12d0c <__assert_fail@plt+0x620>
   12cf4:	add	r3, pc, r3
   12cf8:	ldr	r2, [r3, r2]
   12cfc:	cmp	r2, #0
   12d00:	bxeq	lr
   12d04:	b	12368 <__gmon_start__@plt>
   12d08:	andeq	sp, r3, r4, lsl #6
   12d0c:	muleq	r0, r4, r2
   12d10:	ldr	r3, [pc, #28]	; 12d34 <__assert_fail@plt+0x648>
   12d14:	ldr	r0, [pc, #28]	; 12d38 <__assert_fail@plt+0x64c>
   12d18:	sub	r3, r3, r0
   12d1c:	cmp	r3, #6
   12d20:	bxls	lr
   12d24:	ldr	r3, [pc, #16]	; 12d3c <__assert_fail@plt+0x650>
   12d28:	cmp	r3, #0
   12d2c:	bxeq	lr
   12d30:	bx	r3
   12d34:	andeq	r0, r5, pc, asr #10
   12d38:	andeq	r0, r5, ip, asr #10
   12d3c:	andeq	r0, r0, r0
   12d40:	ldr	r1, [pc, #36]	; 12d6c <__assert_fail@plt+0x680>
   12d44:	ldr	r0, [pc, #36]	; 12d70 <__assert_fail@plt+0x684>
   12d48:	sub	r1, r1, r0
   12d4c:	asr	r1, r1, #2
   12d50:	add	r1, r1, r1, lsr #31
   12d54:	asrs	r1, r1, #1
   12d58:	bxeq	lr
   12d5c:	ldr	r3, [pc, #16]	; 12d74 <__assert_fail@plt+0x688>
   12d60:	cmp	r3, #0
   12d64:	bxeq	lr
   12d68:	bx	r3
   12d6c:	andeq	r0, r5, ip, asr #10
   12d70:	andeq	r0, r5, ip, asr #10
   12d74:	andeq	r0, r0, r0
   12d78:	push	{r4, lr}
   12d7c:	ldr	r4, [pc, #24]	; 12d9c <__assert_fail@plt+0x6b0>
   12d80:	ldrb	r3, [r4]
   12d84:	cmp	r3, #0
   12d88:	popne	{r4, pc}
   12d8c:	bl	12d10 <__assert_fail@plt+0x624>
   12d90:	mov	r3, #1
   12d94:	strb	r3, [r4]
   12d98:	pop	{r4, pc}
   12d9c:	andeq	r0, r5, r0, ror r5
   12da0:	ldr	r0, [pc, #40]	; 12dd0 <__assert_fail@plt+0x6e4>
   12da4:	ldr	r3, [r0]
   12da8:	cmp	r3, #0
   12dac:	bne	12db4 <__assert_fail@plt+0x6c8>
   12db0:	b	12d40 <__assert_fail@plt+0x654>
   12db4:	ldr	r3, [pc, #24]	; 12dd4 <__assert_fail@plt+0x6e8>
   12db8:	cmp	r3, #0
   12dbc:	beq	12db0 <__assert_fail@plt+0x6c4>
   12dc0:	push	{r4, lr}
   12dc4:	blx	r3
   12dc8:	pop	{r4, lr}
   12dcc:	b	12d40 <__assert_fail@plt+0x654>
   12dd0:	andeq	pc, r4, r4, lsl #30
   12dd4:	andeq	r0, r0, r0
   12dd8:	ldr	r3, [pc, #52]	; 12e14 <__assert_fail@plt+0x728>
   12ddc:	push	{lr}		; (str lr, [sp, #-4]!)
   12de0:	sub	sp, sp, #108	; 0x6c
   12de4:	ldr	r3, [r3, #52]	; 0x34
   12de8:	mov	r1, sp
   12dec:	blx	r3
   12df0:	cmp	r0, #0
   12df4:	beq	12e0c <__assert_fail@plt+0x720>
   12df8:	bl	12404 <__errno_location@plt>
   12dfc:	ldr	r0, [r0]
   12e00:	sub	r0, r0, #40	; 0x28
   12e04:	clz	r0, r0
   12e08:	lsr	r0, r0, #5
   12e0c:	add	sp, sp, #108	; 0x6c
   12e10:	pop	{pc}		; (ldr pc, [sp], #4)
   12e14:	andeq	r0, r5, r4, lsl #29
   12e18:	push	{r4, lr}
   12e1c:	ldr	r4, [pc, #88]	; 12e7c <__assert_fail@plt+0x790>
   12e20:	ldr	r2, [r4]
   12e24:	tst	r2, #512	; 0x200
   12e28:	popeq	{r4, pc}
   12e2c:	cmn	r0, #100	; 0x64
   12e30:	cmpne	r0, #0
   12e34:	bge	12e4c <__assert_fail@plt+0x760>
   12e38:	ldr	r3, [pc, #64]	; 12e80 <__assert_fail@plt+0x794>
   12e3c:	mov	r2, #107	; 0x6b
   12e40:	ldr	r1, [pc, #60]	; 12e84 <__assert_fail@plt+0x798>
   12e44:	ldr	r0, [pc, #60]	; 12e88 <__assert_fail@plt+0x79c>
   12e48:	bl	126ec <__assert_fail@plt>
   12e4c:	ldr	r2, [pc, #56]	; 12e8c <__assert_fail@plt+0x7a0>
   12e50:	str	r0, [r2, #16]
   12e54:	ldr	r2, [r4, #4]
   12e58:	cmp	r2, #0
   12e5c:	popge	{r4, pc}
   12e60:	cmn	r0, #100	; 0x64
   12e64:	bne	12e70 <__assert_fail@plt+0x784>
   12e68:	str	r0, [r4, #4]
   12e6c:	pop	{r4, pc}
   12e70:	bl	1fb7c <__assert_fail@plt+0xd490>
   12e74:	str	r0, [r4, #4]
   12e78:	pop	{r4, pc}
   12e7c:	andeq	r0, r5, r0, lsr #5
   12e80:	andeq	r9, r3, r8, ror #23
   12e84:	andeq	r9, r3, sp, lsl ip
   12e88:	andeq	r9, r3, r7, lsr #24
   12e8c:	andeq	r0, r5, r8, asr lr
   12e90:	push	{r4, lr}
   12e94:	ldr	r4, [pc, #36]	; 12ec0 <__assert_fail@plt+0x7d4>
   12e98:	ldr	r3, [r4]
   12e9c:	tst	r3, #512	; 0x200
   12ea0:	popeq	{r4, pc}
   12ea4:	ldr	r0, [r4, #4]
   12ea8:	cmp	r0, #0
   12eac:	poplt	{r4, pc}
   12eb0:	bl	126a4 <close@plt>
   12eb4:	mvn	r3, #0
   12eb8:	str	r3, [r4, #4]
   12ebc:	pop	{r4, pc}
   12ec0:	andeq	r0, r5, r0, lsr #5
   12ec4:	sub	r3, r0, #1
   12ec8:	cmp	r3, #13
   12ecc:	ldrls	pc, [pc, r3, lsl #2]
   12ed0:	b	12f74 <__assert_fail@plt+0x888>
   12ed4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12ed8:	andeq	r2, r1, ip, lsl #30
   12edc:	andeq	r2, r1, r4, lsl pc
   12ee0:	andeq	r2, r1, ip, lsl pc
   12ee4:	andeq	r2, r1, r4, lsr #30
   12ee8:	andeq	r2, r1, ip, lsr #30
   12eec:	andeq	r2, r1, r4, lsr pc
   12ef0:	andeq	r2, r1, ip, lsr pc
   12ef4:	andeq	r2, r1, r4, asr #30
   12ef8:	andeq	r2, r1, ip, asr #30
   12efc:	andeq	r2, r1, r4, asr pc
   12f00:	andeq	r2, r1, ip, asr pc
   12f04:	andeq	r2, r1, r4, ror #30
   12f08:	andeq	r2, r1, ip, ror #30
   12f0c:	ldr	r0, [pc, #132]	; 12f98 <__assert_fail@plt+0x8ac>
   12f10:	bx	lr
   12f14:	ldr	r0, [pc, #128]	; 12f9c <__assert_fail@plt+0x8b0>
   12f18:	bx	lr
   12f1c:	ldr	r0, [pc, #124]	; 12fa0 <__assert_fail@plt+0x8b4>
   12f20:	bx	lr
   12f24:	ldr	r0, [pc, #120]	; 12fa4 <__assert_fail@plt+0x8b8>
   12f28:	bx	lr
   12f2c:	ldr	r0, [pc, #116]	; 12fa8 <__assert_fail@plt+0x8bc>
   12f30:	bx	lr
   12f34:	ldr	r0, [pc, #112]	; 12fac <__assert_fail@plt+0x8c0>
   12f38:	bx	lr
   12f3c:	ldr	r0, [pc, #108]	; 12fb0 <__assert_fail@plt+0x8c4>
   12f40:	bx	lr
   12f44:	ldr	r0, [pc, #104]	; 12fb4 <__assert_fail@plt+0x8c8>
   12f48:	bx	lr
   12f4c:	ldr	r0, [pc, #100]	; 12fb8 <__assert_fail@plt+0x8cc>
   12f50:	bx	lr
   12f54:	ldr	r0, [pc, #96]	; 12fbc <__assert_fail@plt+0x8d0>
   12f58:	bx	lr
   12f5c:	ldr	r0, [pc, #92]	; 12fc0 <__assert_fail@plt+0x8d4>
   12f60:	bx	lr
   12f64:	ldr	r0, [pc, #88]	; 12fc4 <__assert_fail@plt+0x8d8>
   12f68:	bx	lr
   12f6c:	ldr	r0, [pc, #84]	; 12fc8 <__assert_fail@plt+0x8dc>
   12f70:	bx	lr
   12f74:	mov	r2, r0
   12f78:	push	{r4, lr}
   12f7c:	ldr	r1, [pc, #72]	; 12fcc <__assert_fail@plt+0x8e0>
   12f80:	ldr	r0, [pc, #72]	; 12fd0 <__assert_fail@plt+0x8e4>
   12f84:	bl	12590 <sprintf@plt>
   12f88:	ldr	r0, [pc, #64]	; 12fd0 <__assert_fail@plt+0x8e4>
   12f8c:	pop	{r4, pc}
   12f90:	ldr	r0, [pc, #60]	; 12fd4 <__assert_fail@plt+0x8e8>
   12f94:	bx	lr
   12f98:	andeq	r9, r3, pc, asr #24
   12f9c:	andeq	r9, r3, r6, asr ip
   12fa0:	andeq	r9, r3, r2, ror #24
   12fa4:	andeq	r9, r3, sl, ror #24
   12fa8:	andeq	r9, r3, r2, ror ip
   12fac:	andeq	r9, r3, r9, ror ip
   12fb0:	andeq	r9, r3, r1, lsl #25
   12fb4:	andeq	r9, r3, r7, lsl #25
   12fb8:	muleq	r3, r0, ip
   12fbc:	muleq	r3, r7, ip
   12fc0:	andeq	r9, r3, r0, lsr #25
   12fc4:	andeq	r9, r3, r7, lsr #25
   12fc8:			; <UNDEFINED> instruction: 0x00039cb2
   12fcc:			; <UNDEFINED> instruction: 0x00039cb8
   12fd0:	andeq	r0, r5, r1, ror r5
   12fd4:	andeq	r9, r3, r9, asr #24
   12fd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fdc:	sub	sp, sp, #164	; 0xa4
   12fe0:	mov	sl, r0
   12fe4:	bl	123bc <strlen@plt>
   12fe8:	ldr	r4, [pc, #1768]	; 136d8 <__assert_fail@plt+0xfec>
   12fec:	str	r0, [r4, #20]
   12ff0:	mvn	r0, #99	; 0x63
   12ff4:	bl	12e18 <__assert_fail@plt+0x72c>
   12ff8:	mov	r3, #0
   12ffc:	str	r3, [sp, #52]	; 0x34
   13000:	ldr	r3, [pc, #1748]	; 136dc <__assert_fail@plt+0xff0>
   13004:	str	sl, [sp, #48]	; 0x30
   13008:	mov	r2, r3
   1300c:	ldr	r1, [r3, #48]	; 0x30
   13010:	ldr	r3, [pc, #1736]	; 136e0 <__assert_fail@plt+0xff4>
   13014:	cmp	r1, #1
   13018:	beq	130c8 <__assert_fail@plt+0x9dc>
   1301c:	bcc	130e4 <__assert_fail@plt+0x9f8>
   13020:	cmp	r1, #2
   13024:	beq	130d8 <__assert_fail@plt+0x9ec>
   13028:	ldrb	r2, [r2, #13]
   1302c:	add	r0, sp, #48	; 0x30
   13030:	cmp	r2, #0
   13034:	ldrne	r2, [r3]
   13038:	orrne	r2, r2, #64	; 0x40
   1303c:	strne	r2, [r3]
   13040:	mov	r2, #0
   13044:	ldr	r1, [r3]
   13048:	bl	2b320 <__assert_fail@plt+0x18c34>
   1304c:	subs	r7, r0, #0
   13050:	beq	130f0 <__assert_fail@plt+0xa04>
   13054:	bl	12404 <__errno_location@plt>
   13058:	ldr	r5, [pc, #1656]	; 136d8 <__assert_fail@plt+0xfec>
   1305c:	ldr	r6, [pc, #1656]	; 136dc <__assert_fail@plt+0xff0>
   13060:	mov	r3, #-2147483648	; 0x80000000
   13064:	str	r3, [sp, #24]
   13068:	str	r0, [sp, #20]
   1306c:	ldr	r2, [sp, #20]
   13070:	mov	r3, #0
   13074:	mov	r0, r7
   13078:	str	r3, [r2]
   1307c:	bl	2b72c <__assert_fail@plt+0x19040>
   13080:	subs	r4, r0, #0
   13084:	bne	1313c <__assert_fail@plt+0xa50>
   13088:	ldr	r3, [sp, #20]
   1308c:	ldr	r5, [r3]
   13090:	cmp	r5, #0
   13094:	beq	13684 <__assert_fail@plt+0xf98>
   13098:	mov	r1, sl
   1309c:	bl	180e8 <__assert_fail@plt+0x59fc>
   130a0:	ldr	r2, [pc, #1596]	; 136e4 <__assert_fail@plt+0xff8>
   130a4:	mov	r1, r5
   130a8:	mov	r3, r0
   130ac:	mov	r0, r4
   130b0:	bl	122c0 <error@plt>
   130b4:	ldr	r3, [pc, #1564]	; 136d8 <__assert_fail@plt+0xfec>
   130b8:	mov	r2, #1
   130bc:	mov	r0, r4
   130c0:	str	r2, [r3, #28]
   130c4:	b	13134 <__assert_fail@plt+0xa48>
   130c8:	ldr	r1, [r3]
   130cc:	orr	r1, r1, #3
   130d0:	str	r1, [r3]
   130d4:	b	13028 <__assert_fail@plt+0x93c>
   130d8:	ldr	r1, [r3]
   130dc:	orr	r1, r1, #17
   130e0:	b	130d0 <__assert_fail@plt+0x9e4>
   130e4:	ldr	r1, [r3]
   130e8:	orr	r1, r1, #16
   130ec:	b	130d0 <__assert_fail@plt+0x9e4>
   130f0:	bl	12404 <__errno_location@plt>
   130f4:	mov	r2, #5
   130f8:	ldr	r1, [pc, #1512]	; 136e8 <__assert_fail@plt+0xffc>
   130fc:	ldr	r5, [r0]
   13100:	mov	r0, r7
   13104:	bl	1217c <dcgettext@plt>
   13108:	mov	r1, sl
   1310c:	mov	r6, r0
   13110:	mov	r0, r7
   13114:	bl	180e8 <__assert_fail@plt+0x59fc>
   13118:	mov	r2, r6
   1311c:	mov	r1, r5
   13120:	mov	r3, r0
   13124:	mov	r0, r7
   13128:	bl	122c0 <error@plt>
   1312c:	mov	r0, #1
   13130:	str	r0, [r4, #28]
   13134:	add	sp, sp, #164	; 0xa4
   13138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1313c:	ldrb	r3, [r5, #32]
   13140:	cmp	r3, #0
   13144:	beq	1315c <__assert_fail@plt+0xa70>
   13148:	ldr	r3, [r4, #48]	; 0x30
   1314c:	ldr	r2, [sp, #24]
   13150:	cmp	r2, r3
   13154:	beq	1315c <__assert_fail@plt+0xa70>
   13158:	bl	177e8 <__assert_fail@plt+0x50fc>
   1315c:	ldr	r3, [r4, #48]	; 0x30
   13160:	mov	r0, #0
   13164:	str	r3, [sp, #24]
   13168:	ldr	r3, [r4, #80]	; 0x50
   1316c:	strb	r0, [r5, #40]	; 0x28
   13170:	subs	r2, r3, r0
   13174:	str	r3, [r5, #8]
   13178:	ldr	r3, [r6, #44]	; 0x2c
   1317c:	movne	r2, #1
   13180:	tst	r3, #4
   13184:	strb	r0, [r5, #4]
   13188:	strb	r2, [r5, #5]
   1318c:	beq	1321c <__assert_fail@plt+0xb30>
   13190:	ldr	r3, [pc, #1364]	; 136ec <__assert_fail@plt+0x1000>
   13194:	ldr	r2, [r4, #28]
   13198:	ldr	r1, [r6, #72]	; 0x48
   1319c:	ldr	r3, [r3]
   131a0:	str	r3, [sp, #28]
   131a4:	bl	27f14 <__assert_fail@plt+0x15828>
   131a8:	mov	fp, r0
   131ac:	ldrh	r0, [r4, #56]	; 0x38
   131b0:	bl	12ec4 <__assert_fail@plt+0x7d8>
   131b4:	ldr	r3, [r4, #48]	; 0x30
   131b8:	ldr	r2, [r4, #28]
   131bc:	str	r3, [sp, #32]
   131c0:	ldr	r3, [pc, #1304]	; 136e0 <__assert_fail@plt+0xff4>
   131c4:	ldr	r1, [r6, #72]	; 0x48
   131c8:	ldr	r3, [r3, #8]
   131cc:	str	r3, [sp, #36]	; 0x24
   131d0:	mov	r8, r0
   131d4:	mov	r0, #1
   131d8:	bl	27f14 <__assert_fail@plt+0x15828>
   131dc:	ldr	r2, [r4, #24]
   131e0:	ldr	r1, [r6, #72]	; 0x48
   131e4:	mov	r9, r0
   131e8:	mov	r0, #2
   131ec:	bl	27f14 <__assert_fail@plt+0x15828>
   131f0:	ldr	r3, [sp, #36]	; 0x24
   131f4:	str	r9, [sp, #8]
   131f8:	str	r3, [sp, #4]
   131fc:	ldr	r3, [sp, #32]
   13200:	mov	r2, fp
   13204:	str	r3, [sp]
   13208:	ldr	r1, [pc, #1248]	; 136f0 <__assert_fail@plt+0x1004>
   1320c:	mov	r3, r8
   13210:	str	r0, [sp, #12]
   13214:	ldr	r0, [sp, #28]
   13218:	bl	123f8 <fprintf@plt>
   1321c:	ldrh	r3, [r4, #56]	; 0x38
   13220:	ldr	r8, [pc, #1208]	; 136e0 <__assert_fail@plt+0xff4>
   13224:	cmp	r3, #6
   13228:	bne	13260 <__assert_fail@plt+0xb74>
   1322c:	bl	12e90 <__assert_fail@plt+0x7a4>
   13230:	ldr	r0, [r7, #32]
   13234:	bl	12e18 <__assert_fail@plt+0x72c>
   13238:	ldrd	r2, [r4, #160]	; 0xa0
   1323c:	ldr	r1, [r4, #48]	; 0x30
   13240:	strd	r2, [sp, #152]	; 0x98
   13244:	ldrh	r3, [r4, #56]	; 0x38
   13248:	str	r1, [r8, #8]
   1324c:	cmp	r3, #7
   13250:	bne	13284 <__assert_fail@plt+0xb98>
   13254:	ldr	r1, [r4, #28]
   13258:	ldr	r0, [r4, #32]
   1325c:	b	133d4 <__assert_fail@plt+0xce8>
   13260:	ldr	r2, [r4, #48]	; 0x30
   13264:	ldr	r1, [r8, #8]
   13268:	clz	r3, r2
   1326c:	lsr	r3, r3, #5
   13270:	cmp	r2, r1
   13274:	orrgt	r3, r3, #1
   13278:	cmp	r3, #0
   1327c:	bne	1322c <__assert_fail@plt+0xb40>
   13280:	b	13230 <__assert_fail@plt+0xb44>
   13284:	cmp	r3, #4
   13288:	bne	132d4 <__assert_fail@plt+0xbe8>
   1328c:	ldr	r1, [r4, #28]
   13290:	ldr	r0, [r4, #32]
   13294:	bl	18168 <__assert_fail@plt+0x5a7c>
   13298:	ldrb	r3, [r6]
   1329c:	cmp	r3, #0
   132a0:	bne	1306c <__assert_fail@plt+0x980>
   132a4:	ldrh	r3, [r4, #56]	; 0x38
   132a8:	sub	r2, r3, #10
   132ac:	cmp	r2, #1
   132b0:	bhi	13480 <__assert_fail@plt+0xd94>
   132b4:	ldrb	r2, [r5, #4]
   132b8:	cmp	r2, #0
   132bc:	beq	1340c <__assert_fail@plt+0xd20>
   132c0:	ldr	r3, [pc, #1068]	; 136f4 <__assert_fail@plt+0x1008>
   132c4:	ldr	r1, [pc, #1068]	; 136f8 <__assert_fail@plt+0x100c>
   132c8:	ldr	r0, [pc, #1068]	; 136fc <__assert_fail@plt+0x1010>
   132cc:	mov	r2, #380	; 0x17c
   132d0:	bl	126ec <__assert_fail@plt>
   132d4:	cmp	r3, #2
   132d8:	bne	133b4 <__assert_fail@plt+0xcc8>
   132dc:	ldr	r3, [r4, #80]	; 0x50
   132e0:	mov	r2, #5
   132e4:	and	r3, r3, #61440	; 0xf000
   132e8:	cmp	r3, #40960	; 0xa000
   132ec:	bne	1332c <__assert_fail@plt+0xc40>
   132f0:	ldr	r1, [pc, #1032]	; 13700 <__assert_fail@plt+0x1014>
   132f4:	mov	r0, #0
   132f8:	bl	1217c <dcgettext@plt>
   132fc:	ldr	r1, [r4, #28]
   13300:	mov	r8, r0
   13304:	mov	r0, #0
   13308:	bl	180e8 <__assert_fail@plt+0x59fc>
   1330c:	mov	r1, #0
   13310:	mov	r2, r8
   13314:	mov	r3, r0
   13318:	mov	r0, r1
   1331c:	bl	122c0 <error@plt>
   13320:	mov	r3, #1
   13324:	str	r3, [r5, #28]
   13328:	b	1306c <__assert_fail@plt+0x980>
   1332c:	ldr	r1, [pc, #976]	; 13704 <__assert_fail@plt+0x1018>
   13330:	mov	r0, #0
   13334:	bl	1217c <dcgettext@plt>
   13338:	ldr	r1, [r4, #28]
   1333c:	mov	r8, r0
   13340:	mov	r0, #0
   13344:	bl	180e8 <__assert_fail@plt+0x59fc>
   13348:	ldr	r3, [r4]
   1334c:	ldr	r1, [r6, #72]	; 0x48
   13350:	ldr	r4, [r3, #40]	; 0x28
   13354:	cmp	r4, #0
   13358:	mov	r9, r0
   1335c:	bne	13388 <__assert_fail@plt+0xc9c>
   13360:	ldr	r2, [pc, #928]	; 13708 <__assert_fail@plt+0x101c>
   13364:	mov	r0, #1
   13368:	bl	27f14 <__assert_fail@plt+0x15828>
   1336c:	mov	r1, #0
   13370:	str	r0, [sp]
   13374:	mov	r3, r9
   13378:	mov	r2, r8
   1337c:	mov	r0, r1
   13380:	bl	122c0 <error@plt>
   13384:	b	13320 <__assert_fail@plt+0xc34>
   13388:	ldr	fp, [r3, #28]
   1338c:	mov	r2, #0
   13390:	mov	r0, #1
   13394:	ldrb	r3, [fp, r4]
   13398:	strb	r2, [fp, r4]
   1339c:	mov	r2, fp
   133a0:	str	r3, [sp, #28]
   133a4:	bl	27f14 <__assert_fail@plt+0x15828>
   133a8:	ldr	r3, [sp, #28]
   133ac:	strb	r3, [fp, r4]
   133b0:	b	1336c <__assert_fail@plt+0xc80>
   133b4:	cmp	r3, #13
   133b8:	bne	133dc <__assert_fail@plt+0xcf0>
   133bc:	ldr	r0, [r4, #24]
   133c0:	bl	12dd8 <__assert_fail@plt+0x6ec>
   133c4:	cmp	r0, #0
   133c8:	beq	132a4 <__assert_fail@plt+0xbb8>
   133cc:	ldr	r1, [r4, #28]
   133d0:	mov	r0, #40	; 0x28
   133d4:	bl	18168 <__assert_fail@plt+0x5a7c>
   133d8:	b	1306c <__assert_fail@plt+0x980>
   133dc:	cmp	r3, #10
   133e0:	bne	132a4 <__assert_fail@plt+0xbb8>
   133e4:	cmp	r1, #0
   133e8:	beq	13254 <__assert_fail@plt+0xb68>
   133ec:	ldr	r0, [r4, #24]
   133f0:	bl	12dd8 <__assert_fail@plt+0x6ec>
   133f4:	ldr	r1, [r4, #28]
   133f8:	cmp	r0, #0
   133fc:	bne	133d0 <__assert_fail@plt+0xce4>
   13400:	ldr	r0, [r4, #32]
   13404:	bl	18168 <__assert_fail@plt+0x5a7c>
   13408:	b	132a4 <__assert_fail@plt+0xbb8>
   1340c:	cmp	r3, #11
   13410:	beq	13430 <__assert_fail@plt+0xd44>
   13414:	ldr	r3, [r5, #8]
   13418:	cmp	r3, #0
   1341c:	ldrne	r3, [pc, #720]	; 136f4 <__assert_fail@plt+0x1008>
   13420:	ldrne	r2, [pc, #740]	; 1370c <__assert_fail@plt+0x1020>
   13424:	ldrne	r1, [pc, #716]	; 136f8 <__assert_fail@plt+0x100c>
   13428:	ldrne	r0, [pc, #736]	; 13710 <__assert_fail@plt+0x1024>
   1342c:	bne	132d0 <__assert_fail@plt+0xbe4>
   13430:	ldr	r3, [r5, #8]
   13434:	str	r3, [sp, #44]	; 0x2c
   13438:	ldr	r3, [r4, #48]	; 0x30
   1343c:	str	r3, [r5]
   13440:	ldr	r3, [sp, #44]	; 0x2c
   13444:	cmp	r3, #0
   13448:	bne	134ec <__assert_fail@plt+0xe00>
   1344c:	ldr	r3, [sp, #44]	; 0x2c
   13450:	and	r3, r3, #61440	; 0xf000
   13454:	cmp	r3, #16384	; 0x4000
   13458:	ldrh	r3, [r4, #56]	; 0x38
   1345c:	bne	13514 <__assert_fail@plt+0xe28>
   13460:	cmp	r3, #11
   13464:	movne	r9, #1
   13468:	bne	1352c <__assert_fail@plt+0xe40>
   1346c:	mov	r2, #1
   13470:	mov	r1, r4
   13474:	mov	r0, r7
   13478:	bl	2bcf4 <__assert_fail@plt+0x19608>
   1347c:	b	1306c <__assert_fail@plt+0x980>
   13480:	mov	r3, #1
   13484:	mov	r2, #104	; 0x68
   13488:	add	r1, r4, #64	; 0x40
   1348c:	add	r0, sp, #56	; 0x38
   13490:	strb	r3, [r5, #4]
   13494:	strb	r3, [r5, #5]
   13498:	bl	120f8 <memcpy@plt>
   1349c:	ldr	r8, [sp, #72]	; 0x48
   134a0:	cmp	r8, #0
   134a4:	str	r8, [sp, #44]	; 0x2c
   134a8:	str	r8, [r5, #8]
   134ac:	bne	13438 <__assert_fail@plt+0xd4c>
   134b0:	mov	r2, #5
   134b4:	ldr	r1, [pc, #600]	; 13714 <__assert_fail@plt+0x1028>
   134b8:	mov	r0, r8
   134bc:	bl	1217c <dcgettext@plt>
   134c0:	ldr	r2, [r4, #28]
   134c4:	ldr	r1, [r6, #72]	; 0x48
   134c8:	mov	r9, r0
   134cc:	mov	r0, r8
   134d0:	bl	27f14 <__assert_fail@plt+0x15828>
   134d4:	mov	r2, r9
   134d8:	mov	r1, r8
   134dc:	mov	r3, r0
   134e0:	mov	r0, r8
   134e4:	bl	122c0 <error@plt>
   134e8:	b	13438 <__assert_fail@plt+0xd4c>
   134ec:	mov	r3, #0
   134f0:	str	r3, [sp]
   134f4:	add	r2, r4, #168	; 0xa8
   134f8:	add	r3, sp, #56	; 0x38
   134fc:	ldr	r1, [r4, #28]
   13500:	add	r0, sp, #44	; 0x2c
   13504:	bl	1825c <__assert_fail@plt+0x5b70>
   13508:	cmp	r0, #0
   1350c:	bne	1344c <__assert_fail@plt+0xd60>
   13510:	b	1306c <__assert_fail@plt+0x980>
   13514:	sub	r9, r3, #1
   13518:	cmp	r3, #6
   1351c:	cmpne	r9, #1
   13520:	movls	r9, #1
   13524:	movhi	r9, #0
   13528:	bls	13460 <__assert_fail@plt+0xd74>
   1352c:	ldr	r3, [r6, #4]
   13530:	cmp	r3, #0
   13534:	blt	13588 <__assert_fail@plt+0xe9c>
   13538:	ldr	r2, [r4, #48]	; 0x30
   1353c:	cmp	r3, r2
   13540:	bgt	13588 <__assert_fail@plt+0xe9c>
   13544:	mov	r2, #4
   13548:	mov	r1, r4
   1354c:	mov	r0, r7
   13550:	bl	2bcf4 <__assert_fail@plt+0x19608>
   13554:	ldr	r8, [r4, #48]	; 0x30
   13558:	ldr	r3, [r6, #4]
   1355c:	cmp	r8, r3
   13560:	movle	r8, #0
   13564:	movgt	r8, #1
   13568:	ldrh	r3, [r4, #56]	; 0x38
   1356c:	cmp	r3, #1
   13570:	bne	13590 <__assert_fail@plt+0xea4>
   13574:	ldrb	r2, [r6]
   13578:	cmp	r2, #0
   1357c:	bne	135a4 <__assert_fail@plt+0xeb8>
   13580:	mov	r8, #1
   13584:	b	135b4 <__assert_fail@plt+0xec8>
   13588:	mov	r8, #0
   1358c:	b	13568 <__assert_fail@plt+0xe7c>
   13590:	cmp	r3, #6
   13594:	bne	135a4 <__assert_fail@plt+0xeb8>
   13598:	ldrb	r3, [r6]
   1359c:	cmp	r3, #0
   135a0:	bne	13580 <__assert_fail@plt+0xe94>
   135a4:	ldr	r2, [r4, #48]	; 0x30
   135a8:	ldr	r3, [r6, #8]
   135ac:	cmp	r2, r3
   135b0:	movlt	r8, #1
   135b4:	ldr	r3, [r6, #44]	; 0x2c
   135b8:	tst	r3, #4
   135bc:	beq	13610 <__assert_fail@plt+0xf24>
   135c0:	ldr	r3, [pc, #292]	; 136ec <__assert_fail@plt+0x1000>
   135c4:	ldr	r2, [r4, #28]
   135c8:	ldr	r1, [r6, #72]	; 0x48
   135cc:	mov	r0, #0
   135d0:	ldr	fp, [r3]
   135d4:	bl	27f14 <__assert_fail@plt+0x15828>
   135d8:	str	r0, [sp, #28]
   135dc:	ldrh	r0, [r4, #56]	; 0x38
   135e0:	bl	12ec4 <__assert_fail@plt+0x7d8>
   135e4:	ldrb	r3, [r5, #5]
   135e8:	ldr	r2, [sp, #28]
   135ec:	ldr	r1, [pc, #292]	; 13718 <__assert_fail@plt+0x102c>
   135f0:	str	r3, [sp, #12]
   135f4:	ldrb	r3, [r5, #4]
   135f8:	str	r8, [sp, #4]
   135fc:	str	r9, [sp]
   13600:	str	r3, [sp, #8]
   13604:	mov	r3, r0
   13608:	mov	r0, fp
   1360c:	bl	123f8 <fprintf@plt>
   13610:	cmp	r8, #0
   13614:	bne	13670 <__assert_fail@plt+0xf84>
   13618:	ldrh	r3, [r4, #56]	; 0x38
   1361c:	sub	r3, r3, #10
   13620:	cmp	r3, #1
   13624:	movls	r3, #0
   13628:	movhi	r3, #1
   1362c:	strb	r3, [r5, #4]
   13630:	ldr	r3, [r4, #24]
   13634:	str	r3, [r5, #12]
   13638:	ldr	r3, [r7, #32]
   1363c:	str	r3, [r5, #16]
   13640:	bl	15dc8 <__assert_fail@plt+0x36dc>
   13644:	add	r1, sp, #56	; 0x38
   13648:	mov	r2, r0
   1364c:	ldr	r0, [r4, #28]
   13650:	bl	18338 <__assert_fail@plt+0x5c4c>
   13654:	ldrb	r3, [r5, #24]
   13658:	cmp	r3, #0
   1365c:	beq	13670 <__assert_fail@plt+0xf84>
   13660:	mov	r2, #4
   13664:	mov	r1, r4
   13668:	mov	r0, r7
   1366c:	bl	2bcf4 <__assert_fail@plt+0x19608>
   13670:	ldrh	r3, [r4, #56]	; 0x38
   13674:	cmp	r3, #6
   13678:	moveq	r3, #0
   1367c:	strbeq	r3, [r5, #24]
   13680:	b	1306c <__assert_fail@plt+0x980>
   13684:	mov	r0, r7
   13688:	bl	2b614 <__assert_fail@plt+0x18f28>
   1368c:	cmp	r0, #0
   13690:	moveq	r0, #1
   13694:	beq	13134 <__assert_fail@plt+0xa48>
   13698:	ldr	r3, [sp, #20]
   1369c:	mov	r2, #5
   136a0:	ldr	r1, [pc, #116]	; 1371c <__assert_fail@plt+0x1030>
   136a4:	mov	r0, r5
   136a8:	ldr	r4, [r3]
   136ac:	bl	1217c <dcgettext@plt>
   136b0:	mov	r3, sl
   136b4:	mov	r1, r4
   136b8:	mov	r2, r0
   136bc:	mov	r0, r5
   136c0:	bl	122c0 <error@plt>
   136c4:	ldr	r3, [pc, #12]	; 136d8 <__assert_fail@plt+0xfec>
   136c8:	mov	r2, #1
   136cc:	mov	r0, r5
   136d0:	str	r2, [r3, #28]
   136d4:	b	13134 <__assert_fail@plt+0xa48>
   136d8:	andeq	r0, r5, r8, asr lr
   136dc:	andeq	r0, r5, r4, lsl #29
   136e0:	andeq	r0, r5, r0, lsr #5
   136e4:			; <UNDEFINED> instruction: 0x00039ebe
   136e8:			; <UNDEFINED> instruction: 0x00039cbd
   136ec:	andeq	r0, r5, r0, ror #10
   136f0:	andeq	r9, r3, lr, asr #25
   136f4:	strdeq	r9, [r3], -r3
   136f8:	andeq	r9, r3, sp, lsl ip
   136fc:	strdeq	r9, [r3], -r9	; <UNPREDICTABLE>
   13700:	andeq	r9, r3, r6, lsr sp
   13704:	andeq	r9, r3, pc, lsr #27
   13708:	ldrdeq	fp, [r3], -pc	; <UNPREDICTABLE>
   1370c:	andeq	r0, r0, sp, ror r1
   13710:	andeq	r9, r3, sl, lsl #28
   13714:	andeq	r9, r3, r7, lsr lr
   13718:	andeq	r9, r3, r2, ror #28
   1371c:	strdeq	r9, [r3], -r8
   13720:	ldr	r3, [pc, #12]	; 13734 <__assert_fail@plt+0x1048>
   13724:	ldr	r3, [r3]
   13728:	str	r3, [r0]
   1372c:	mov	r0, #1
   13730:	bx	lr
   13734:	andeq	r0, r5, r0, lsr #5
   13738:	push	{r4, lr}
   1373c:	bl	18464 <__assert_fail@plt+0x5d78>
   13740:	ldr	r3, [pc, #4]	; 1374c <__assert_fail@plt+0x1060>
   13744:	ldr	r0, [r3, #28]
   13748:	bl	1238c <exit@plt>
   1374c:	andeq	r0, r5, r8, asr lr
   13750:	ldr	r3, [pc, #84]	; 137ac <__assert_fail@plt+0x10c0>
   13754:	ldrb	r3, [r3]
   13758:	cmp	r3, #0
   1375c:	beq	137a4 <__assert_fail@plt+0x10b8>
   13760:	ldr	r2, [pc, #72]	; 137b0 <__assert_fail@plt+0x10c4>
   13764:	ldrb	r3, [r2, #4]
   13768:	cmp	r3, #0
   1376c:	bne	13788 <__assert_fail@plt+0x109c>
   13770:	push	{r4, lr}
   13774:	ldr	r3, [pc, #56]	; 137b4 <__assert_fail@plt+0x10c8>
   13778:	ldr	r2, [pc, #56]	; 137b8 <__assert_fail@plt+0x10cc>
   1377c:	ldr	r1, [pc, #56]	; 137bc <__assert_fail@plt+0x10d0>
   13780:	ldr	r0, [pc, #56]	; 137c0 <__assert_fail@plt+0x10d4>
   13784:	bl	126ec <__assert_fail@plt>
   13788:	cmp	r1, #0
   1378c:	beq	137a4 <__assert_fail@plt+0x10b8>
   13790:	ldr	r3, [r1, #16]
   13794:	and	r3, r3, #61440	; 0xf000
   13798:	cmp	r3, #16384	; 0x4000
   1379c:	moveq	r3, #1
   137a0:	strbeq	r3, [r2, #24]
   137a4:	mov	r0, #1
   137a8:	bx	lr
   137ac:	andeq	r0, r5, r4, lsl #29
   137b0:	andeq	r0, r5, r8, asr lr
   137b4:	andeq	sl, r3, lr, asr #2
   137b8:	andeq	r0, r0, r5, asr r3
   137bc:			; <UNDEFINED> instruction: 0x0003a1b5
   137c0:	strdeq	r9, [r3], -sl
   137c4:	push	{r4, r5, r6, lr}
   137c8:	mov	r4, r2
   137cc:	ldr	r2, [r2, #156]	; 0x9c
   137d0:	mov	r5, r0
   137d4:	cmp	r2, #0
   137d8:	mov	r6, r1
   137dc:	bne	137f4 <__assert_fail@plt+0x1108>
   137e0:	ldr	r2, [r4, #160]	; 0xa0
   137e4:	mov	r1, r6
   137e8:	mov	r0, r5
   137ec:	pop	{r4, r5, r6, lr}
   137f0:	b	18338 <__assert_fail@plt+0x5c4c>
   137f4:	bl	18338 <__assert_fail@plt+0x5c4c>
   137f8:	cmp	r0, #0
   137fc:	bne	137e0 <__assert_fail@plt+0x10f4>
   13800:	pop	{r4, r5, r6, pc}
   13804:	push	{r4, r5, r6, r7, r8, lr}
   13808:	mov	r6, r0
   1380c:	ldr	r4, [pc, #104]	; 1387c <__assert_fail@plt+0x1190>
   13810:	mov	r7, r1
   13814:	mov	r8, r2
   13818:	ldr	r1, [r4, #12]
   1381c:	ldr	r0, [r4, #16]
   13820:	bl	1f840 <__assert_fail@plt+0xd154>
   13824:	subs	r5, r0, #0
   13828:	beq	1385c <__assert_fail@plt+0x1170>
   1382c:	cmp	r8, #0
   13830:	movne	r2, #16
   13834:	moveq	r2, #0
   13838:	mov	r1, r5
   1383c:	ldr	r0, [r7]
   13840:	bl	122e4 <fnmatch@plt>
   13844:	clz	r4, r0
   13848:	lsr	r4, r4, #5
   1384c:	mov	r0, r5
   13850:	bl	2a01c <__assert_fail@plt+0x17930>
   13854:	mov	r0, r4
   13858:	pop	{r4, r5, r6, r7, r8, pc}
   1385c:	bl	12404 <__errno_location@plt>
   13860:	mov	r1, r6
   13864:	ldr	r0, [r0]
   13868:	bl	18168 <__assert_fail@plt+0x5a7c>
   1386c:	mov	r3, #1
   13870:	str	r3, [r4, #28]
   13874:	mov	r4, r5
   13878:	b	1384c <__assert_fail@plt+0x1160>
   1387c:	andeq	r0, r5, r8, asr lr
   13880:	ldr	r3, [pc, #124]	; 13904 <__assert_fail@plt+0x1218>
   13884:	push	{r4, r5, r6, r7, r8, lr}
   13888:	mov	r6, r0
   1388c:	ldr	r4, [pc, #116]	; 13908 <__assert_fail@plt+0x121c>
   13890:	ldr	r0, [r3]
   13894:	mov	r7, r1
   13898:	bl	29fcc <__assert_fail@plt+0x178e0>
   1389c:	mov	r2, #5
   138a0:	ldr	r1, [pc, #100]	; 1390c <__assert_fail@plt+0x1220>
   138a4:	mov	r0, #0
   138a8:	ldr	r5, [r4]
   138ac:	bl	1217c <dcgettext@plt>
   138b0:	mov	r3, r7
   138b4:	mov	r2, r6
   138b8:	mov	r1, r0
   138bc:	mov	r0, r5
   138c0:	bl	123f8 <fprintf@plt>
   138c4:	cmp	r0, #0
   138c8:	bge	138f4 <__assert_fail@plt+0x1208>
   138cc:	bl	12404 <__errno_location@plt>
   138d0:	mov	r2, #5
   138d4:	ldr	r1, [pc, #52]	; 13910 <__assert_fail@plt+0x1224>
   138d8:	ldr	r4, [r0]
   138dc:	mov	r0, #0
   138e0:	bl	1217c <dcgettext@plt>
   138e4:	mov	r1, r4
   138e8:	mov	r2, r0
   138ec:	mov	r0, #1
   138f0:	bl	122c0 <error@plt>
   138f4:	ldr	r0, [r4]
   138f8:	bl	29fcc <__assert_fail@plt+0x178e0>
   138fc:	pop	{r4, r5, r6, r7, r8, lr}
   13900:	b	29a9c <__assert_fail@plt+0x173b0>
   13904:	andeq	r0, r5, ip, ror #10
   13908:	andeq	r0, r5, r0, ror #10
   1390c:			; <UNDEFINED> instruction: 0x0003a1bc
   13910:	andeq	sl, r3, sp, asr #3
   13914:	push	{r4, r5, r6, lr}
   13918:	mov	r4, r2
   1391c:	ldr	r2, [r2, #156]	; 0x9c
   13920:	mov	r5, r0
   13924:	cmp	r2, #0
   13928:	mov	r6, r1
   1392c:	bne	13944 <__assert_fail@plt+0x1258>
   13930:	ldr	r2, [r4, #160]	; 0xa0
   13934:	mov	r1, r6
   13938:	mov	r0, r5
   1393c:	pop	{r4, r5, r6, lr}
   13940:	b	18338 <__assert_fail@plt+0x5c4c>
   13944:	bl	18338 <__assert_fail@plt+0x5c4c>
   13948:	cmp	r0, #0
   1394c:	beq	13930 <__assert_fail@plt+0x1244>
   13950:	pop	{r4, r5, r6, pc}
   13954:	push	{r4, r5, lr}
   13958:	sub	sp, sp, #20
   1395c:	add	ip, sp, #16
   13960:	stm	sp, {r2, r3}
   13964:	stmdb	ip, {r0, r1}
   13968:	ldr	r0, [sp, #8]
   1396c:	ldr	r4, [sp, #12]
   13970:	cmp	r2, r0
   13974:	mov	r1, r2
   13978:	mov	r5, r3
   1397c:	bne	1398c <__assert_fail@plt+0x12a0>
   13980:	cmp	r4, r3
   13984:	moveq	r0, #0
   13988:	beq	139b4 <__assert_fail@plt+0x12c8>
   1398c:	bl	12494 <difftime@plt>
   13990:	sub	r4, r4, r5
   13994:	vldr	d6, [pc, #36]	; 139c0 <__assert_fail@plt+0x12d4>
   13998:	vmov	s15, r4
   1399c:	vcvt.f64.s32	d7, s15
   139a0:	vmla.f64	d0, d7, d6
   139a4:	vcmpe.f64	d0, #0.0
   139a8:	vmrs	APSR_nzcv, fpscr
   139ac:	mvnmi	r0, #0
   139b0:	movpl	r0, #1
   139b4:	add	sp, sp, #20
   139b8:	pop	{r4, r5, pc}
   139bc:	nop			; (mov r0, r0)
   139c0:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   139c4:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   139c8:	push	{r4, r5, lr}
   139cc:	vpush	{d8}
   139d0:	vmov	s16, r3
   139d4:	mov	r4, r2
   139d8:	ldr	r3, [r2, #44]	; 0x2c
   139dc:	sub	sp, sp, #12
   139e0:	cmp	r3, #1
   139e4:	stm	sp, {r0, r1}
   139e8:	beq	13a34 <__assert_fail@plt+0x1348>
   139ec:	bcc	13a0c <__assert_fail@plt+0x1320>
   139f0:	cmp	r3, #2
   139f4:	beq	13a4c <__assert_fail@plt+0x1360>
   139f8:	ldr	r3, [pc, #168]	; 13aa8 <__assert_fail@plt+0x13bc>
   139fc:	mov	r2, #138	; 0x8a
   13a00:	ldr	r1, [pc, #164]	; 13aac <__assert_fail@plt+0x13c0>
   13a04:	ldr	r0, [pc, #164]	; 13ab0 <__assert_fail@plt+0x13c4>
   13a08:	bl	126ec <__assert_fail@plt>
   13a0c:	add	r4, r2, #48	; 0x30
   13a10:	ldm	sp, {r0, r1}
   13a14:	ldm	r4, {r2, r3}
   13a18:	bl	13954 <__assert_fail@plt+0x1268>
   13a1c:	cmp	r0, #0
   13a20:	movle	r0, #0
   13a24:	movgt	r0, #1
   13a28:	add	sp, sp, #12
   13a2c:	vpop	{d8}
   13a30:	pop	{r4, r5, pc}
   13a34:	add	r4, r2, #48	; 0x30
   13a38:	ldm	sp, {r0, r1}
   13a3c:	ldm	r4, {r2, r3}
   13a40:	bl	13954 <__assert_fail@plt+0x1268>
   13a44:	lsr	r0, r0, #31
   13a48:	b	13a28 <__assert_fail@plt+0x133c>
   13a4c:	ldr	r0, [sp]
   13a50:	ldr	r1, [r2, #48]	; 0x30
   13a54:	bl	12494 <difftime@plt>
   13a58:	ldr	r5, [sp, #4]
   13a5c:	ldr	r3, [r4, #52]	; 0x34
   13a60:	vldr	d6, [pc, #56]	; 13aa0 <__assert_fail@plt+0x13b4>
   13a64:	sub	r5, r5, r3
   13a68:	vmov	s15, r5
   13a6c:	vcvt.f64.s32	d7, s15
   13a70:	vmla.f64	d0, d7, d6
   13a74:	vcmpe.f64	d0, #0.0
   13a78:	vmrs	APSR_nzcv, fpscr
   13a7c:	movle	r0, #0
   13a80:	ble	13a28 <__assert_fail@plt+0x133c>
   13a84:	vcvt.f64.s32	d8, s16
   13a88:	vcmpe.f64	d8, d0
   13a8c:	vmrs	APSR_nzcv, fpscr
   13a90:	movge	r0, #1
   13a94:	movlt	r0, #0
   13a98:	b	13a28 <__assert_fail@plt+0x133c>
   13a9c:	nop			; (mov r0, r0)
   13aa0:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13aa4:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13aa8:	andeq	sl, r3, r9, asr r1
   13aac:			; <UNDEFINED> instruction: 0x0003a1b5
   13ab0:	andeq	sl, r3, sl, lsr r9
   13ab4:	push	{r0, r1, r2, lr}
   13ab8:	add	r1, r1, #72	; 0x48
   13abc:	mov	r3, #60	; 0x3c
   13ac0:	ldm	r1, {r0, r1}
   13ac4:	stm	sp, {r0, r1}
   13ac8:	bl	139c8 <__assert_fail@plt+0x12dc>
   13acc:	add	sp, sp, #12
   13ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ad4:	push	{r0, r1, r2, lr}
   13ad8:	ldr	r3, [r2, #44]	; 0x2c
   13adc:	cmp	r3, #0
   13ae0:	beq	13af8 <__assert_fail@plt+0x140c>
   13ae4:	ldr	r3, [pc, #56]	; 13b24 <__assert_fail@plt+0x1438>
   13ae8:	mov	r2, #166	; 0xa6
   13aec:	ldr	r1, [pc, #52]	; 13b28 <__assert_fail@plt+0x143c>
   13af0:	ldr	r0, [pc, #52]	; 13b2c <__assert_fail@plt+0x1440>
   13af4:	bl	126ec <__assert_fail@plt>
   13af8:	add	r1, r1, #72	; 0x48
   13afc:	add	r2, r2, #48	; 0x30
   13b00:	ldm	r1, {r0, r1}
   13b04:	ldm	r2, {r2, r3}
   13b08:	stm	sp, {r0, r1}
   13b0c:	bl	13954 <__assert_fail@plt+0x1268>
   13b10:	cmp	r0, #0
   13b14:	movle	r0, #0
   13b18:	movgt	r0, #1
   13b1c:	add	sp, sp, #12
   13b20:	pop	{pc}		; (ldr pc, [sp], #4)
   13b24:	andeq	sl, r3, r9, ror #2
   13b28:			; <UNDEFINED> instruction: 0x0003a1b5
   13b2c:	andeq	sl, r3, ip, ror #3
   13b30:	push	{r0, r1, r2, lr}
   13b34:	add	r1, r1, #72	; 0x48
   13b38:	ldr	r3, [pc, #16]	; 13b50 <__assert_fail@plt+0x1464>
   13b3c:	ldm	r1, {r0, r1}
   13b40:	stm	sp, {r0, r1}
   13b44:	bl	139c8 <__assert_fail@plt+0x12dc>
   13b48:	add	sp, sp, #12
   13b4c:	pop	{pc}		; (ldr pc, [sp], #4)
   13b50:	andeq	r5, r1, r0, lsl #3
   13b54:	mov	r0, #1
   13b58:	bx	lr
   13b5c:	push	{r0, r1, r2, lr}
   13b60:	add	r1, r1, #88	; 0x58
   13b64:	mov	r3, #60	; 0x3c
   13b68:	ldm	r1, {r0, r1}
   13b6c:	stm	sp, {r0, r1}
   13b70:	bl	139c8 <__assert_fail@plt+0x12dc>
   13b74:	add	sp, sp, #12
   13b78:	pop	{pc}		; (ldr pc, [sp], #4)
   13b7c:	push	{r0, r1, r2, lr}
   13b80:	ldr	r3, [r2, #44]	; 0x2c
   13b84:	cmp	r3, #0
   13b88:	beq	13ba0 <__assert_fail@plt+0x14b4>
   13b8c:	ldr	r3, [pc, #56]	; 13bcc <__assert_fail@plt+0x14e0>
   13b90:	mov	r2, #199	; 0xc7
   13b94:	ldr	r1, [pc, #52]	; 13bd0 <__assert_fail@plt+0x14e4>
   13b98:	ldr	r0, [pc, #52]	; 13bd4 <__assert_fail@plt+0x14e8>
   13b9c:	bl	126ec <__assert_fail@plt>
   13ba0:	add	r1, r1, #88	; 0x58
   13ba4:	add	r2, r2, #48	; 0x30
   13ba8:	ldm	r1, {r0, r1}
   13bac:	ldm	r2, {r2, r3}
   13bb0:	stm	sp, {r0, r1}
   13bb4:	bl	13954 <__assert_fail@plt+0x1268>
   13bb8:	cmp	r0, #0
   13bbc:	movle	r0, #0
   13bc0:	movgt	r0, #1
   13bc4:	add	sp, sp, #12
   13bc8:	pop	{pc}		; (ldr pc, [sp], #4)
   13bcc:	andeq	sl, r3, r5, ror r1
   13bd0:			; <UNDEFINED> instruction: 0x0003a1b5
   13bd4:	andeq	sl, r3, ip, ror #3
   13bd8:	push	{r4, r5, r6, lr}
   13bdc:	mov	r4, r2
   13be0:	ldr	r2, [r2, #156]	; 0x9c
   13be4:	mov	r5, r0
   13be8:	cmp	r2, #0
   13bec:	mov	r6, r1
   13bf0:	beq	13bf8 <__assert_fail@plt+0x150c>
   13bf4:	bl	18338 <__assert_fail@plt+0x5c4c>
   13bf8:	ldr	r2, [r4, #160]	; 0xa0
   13bfc:	mov	r1, r6
   13c00:	mov	r0, r5
   13c04:	pop	{r4, r5, r6, lr}
   13c08:	b	18338 <__assert_fail@plt+0x5c4c>
   13c0c:	push	{r0, r1, r2, lr}
   13c10:	add	r1, r1, #88	; 0x58
   13c14:	ldr	r3, [pc, #16]	; 13c2c <__assert_fail@plt+0x1540>
   13c18:	ldm	r1, {r0, r1}
   13c1c:	stm	sp, {r0, r1}
   13c20:	bl	139c8 <__assert_fail@plt+0x12dc>
   13c24:	add	sp, sp, #12
   13c28:	pop	{pc}		; (ldr pc, [sp], #4)
   13c2c:	andeq	r5, r1, r0, lsl #3
   13c30:	push	{r4, r5, r6, r7, r8, lr}
   13c34:	mov	r7, r0
   13c38:	ldr	r5, [pc, #252]	; 13d3c <__assert_fail@plt+0x1650>
   13c3c:	mov	r8, r1
   13c40:	ldr	r1, [pc, #248]	; 13d40 <__assert_fail@plt+0x1654>
   13c44:	ldr	r6, [r5, #12]
   13c48:	mov	r0, r6
   13c4c:	bl	11ffc <strcmp@plt>
   13c50:	cmp	r0, #0
   13c54:	bne	13c60 <__assert_fail@plt+0x1574>
   13c58:	mov	r0, #1
   13c5c:	pop	{r4, r5, r6, r7, r8, pc}
   13c60:	ldrb	r4, [r5, #4]
   13c64:	cmp	r4, #0
   13c68:	beq	13c80 <__assert_fail@plt+0x1594>
   13c6c:	ldr	r4, [r8, #16]
   13c70:	and	r4, r4, #61440	; 0xf000
   13c74:	cmp	r4, #16384	; 0x4000
   13c78:	moveq	r4, #512	; 0x200
   13c7c:	movne	r4, #0
   13c80:	mov	r2, r4
   13c84:	mov	r1, r6
   13c88:	ldr	r0, [r5, #16]
   13c8c:	bl	12068 <unlinkat@plt>
   13c90:	cmp	r0, #0
   13c94:	beq	13c58 <__assert_fail@plt+0x156c>
   13c98:	bl	12404 <__errno_location@plt>
   13c9c:	ldr	r3, [r0]
   13ca0:	mov	r6, r0
   13ca4:	cmp	r3, #2
   13ca8:	bne	13d10 <__assert_fail@plt+0x1624>
   13cac:	ldr	r3, [pc, #144]	; 13d44 <__assert_fail@plt+0x1658>
   13cb0:	ldrb	r0, [r3, #14]
   13cb4:	cmp	r0, #0
   13cb8:	bne	13d04 <__assert_fail@plt+0x1618>
   13cbc:	mov	r2, #5
   13cc0:	ldr	r1, [pc, #128]	; 13d48 <__assert_fail@plt+0x165c>
   13cc4:	mov	r0, #0
   13cc8:	ldr	r4, [r6]
   13ccc:	bl	1217c <dcgettext@plt>
   13cd0:	mov	r1, r7
   13cd4:	mov	r6, r0
   13cd8:	mov	r0, #0
   13cdc:	bl	180e8 <__assert_fail@plt+0x59fc>
   13ce0:	mov	r2, r6
   13ce4:	mov	r1, r4
   13ce8:	mov	r3, r0
   13cec:	mov	r0, #0
   13cf0:	bl	122c0 <error@plt>
   13cf4:	mov	r3, #1
   13cf8:	str	r3, [r5, #28]
   13cfc:	mov	r0, #0
   13d00:	pop	{r4, r5, r6, r7, r8, pc}
   13d04:	mov	r3, #0
   13d08:	str	r3, [r6]
   13d0c:	pop	{r4, r5, r6, r7, r8, pc}
   13d10:	cmp	r3, #21
   13d14:	bne	13cbc <__assert_fail@plt+0x15d0>
   13d18:	cmp	r4, #0
   13d1c:	bne	13cbc <__assert_fail@plt+0x15d0>
   13d20:	mov	r2, #512	; 0x200
   13d24:	ldr	r1, [r5, #12]
   13d28:	ldr	r0, [r5, #16]
   13d2c:	bl	12068 <unlinkat@plt>
   13d30:	cmp	r0, #0
   13d34:	bne	13cbc <__assert_fail@plt+0x15d0>
   13d38:	b	13c58 <__assert_fail@plt+0x156c>
   13d3c:	andeq	r0, r5, r8, asr lr
   13d40:	andeq	sl, r3, r1, asr #14
   13d44:	andeq	r0, r5, r4, lsl #29
   13d48:	andeq	sl, r3, r3, lsl r2
   13d4c:	ldr	r3, [r1, #16]
   13d50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13d54:	and	r3, r3, #61440	; 0xf000
   13d58:	cmp	r3, #16384	; 0x4000
   13d5c:	bne	13ed0 <__assert_fail@plt+0x17e4>
   13d60:	mov	r5, r0
   13d64:	bl	12404 <__errno_location@plt>
   13d68:	ldr	r7, [pc, #384]	; 13ef0 <__assert_fail@plt+0x1804>
   13d6c:	mov	r4, #0
   13d70:	ldr	r2, [pc, #380]	; 13ef4 <__assert_fail@plt+0x1808>
   13d74:	ldr	r1, [r7, #12]
   13d78:	mov	r9, r7
   13d7c:	str	r4, [r0]
   13d80:	mov	r6, r0
   13d84:	ldr	r0, [r7, #16]
   13d88:	bl	23648 <__assert_fail@plt+0x10f5c>
   13d8c:	subs	sl, r0, #0
   13d90:	bge	13dc8 <__assert_fail@plt+0x16dc>
   13d94:	mov	r1, r5
   13d98:	mov	r0, r4
   13d9c:	ldr	r6, [r6]
   13da0:	bl	180e8 <__assert_fail@plt+0x59fc>
   13da4:	ldr	r2, [pc, #332]	; 13ef8 <__assert_fail@plt+0x180c>
   13da8:	mov	r1, r6
   13dac:	mov	r3, r0
   13db0:	mov	r0, r4
   13db4:	bl	122c0 <error@plt>
   13db8:	mov	r3, #1
   13dbc:	str	r3, [r7, #28]
   13dc0:	mov	r0, r4
   13dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13dc8:	bl	125a8 <fdopendir@plt>
   13dcc:	subs	r8, r0, #0
   13dd0:	strne	r4, [r6]
   13dd4:	bne	13e38 <__assert_fail@plt+0x174c>
   13dd8:	mov	r1, r5
   13ddc:	ldr	r4, [r6]
   13de0:	bl	180e8 <__assert_fail@plt+0x59fc>
   13de4:	ldr	r2, [pc, #268]	; 13ef8 <__assert_fail@plt+0x180c>
   13de8:	mov	r1, r4
   13dec:	mov	r3, r0
   13df0:	mov	r0, r8
   13df4:	bl	122c0 <error@plt>
   13df8:	mov	r3, #1
   13dfc:	mov	r0, sl
   13e00:	str	r3, [r7, #28]
   13e04:	bl	126a4 <close@plt>
   13e08:	mov	r4, #0
   13e0c:	b	13dc0 <__assert_fail@plt+0x16d4>
   13e10:	ldrb	r3, [r0, #19]
   13e14:	cmp	r3, #46	; 0x2e
   13e18:	bne	13e88 <__assert_fail@plt+0x179c>
   13e1c:	ldrb	r3, [r0, #20]
   13e20:	cmp	r3, #0
   13e24:	beq	13e34 <__assert_fail@plt+0x1748>
   13e28:	ldrh	r3, [r0, #20]
   13e2c:	cmp	r3, #46	; 0x2e
   13e30:	bne	13e88 <__assert_fail@plt+0x179c>
   13e34:	mov	r0, r8
   13e38:	bl	1259c <readdir64@plt>
   13e3c:	cmp	r0, #0
   13e40:	bne	13e10 <__assert_fail@plt+0x1724>
   13e44:	mov	r4, #1
   13e48:	ldr	r7, [r6]
   13e4c:	cmp	r7, #0
   13e50:	beq	13e90 <__assert_fail@plt+0x17a4>
   13e54:	mov	r1, r5
   13e58:	mov	r0, #0
   13e5c:	bl	180e8 <__assert_fail@plt+0x59fc>
   13e60:	ldr	r2, [pc, #144]	; 13ef8 <__assert_fail@plt+0x180c>
   13e64:	mov	r1, r7
   13e68:	mov	r3, r0
   13e6c:	mov	r0, #0
   13e70:	bl	122c0 <error@plt>
   13e74:	mov	r3, #1
   13e78:	mov	r0, r8
   13e7c:	str	r3, [r9, #28]
   13e80:	bl	126bc <closedir@plt>
   13e84:	b	13e08 <__assert_fail@plt+0x171c>
   13e88:	mov	r4, #0
   13e8c:	b	13e48 <__assert_fail@plt+0x175c>
   13e90:	mov	r0, r8
   13e94:	bl	126bc <closedir@plt>
   13e98:	cmp	r0, #0
   13e9c:	beq	13dc0 <__assert_fail@plt+0x16d4>
   13ea0:	mov	r1, r5
   13ea4:	mov	r0, r7
   13ea8:	ldr	r4, [r6]
   13eac:	bl	180e8 <__assert_fail@plt+0x59fc>
   13eb0:	ldr	r2, [pc, #64]	; 13ef8 <__assert_fail@plt+0x180c>
   13eb4:	mov	r1, r4
   13eb8:	mov	r3, r0
   13ebc:	mov	r0, r7
   13ec0:	bl	122c0 <error@plt>
   13ec4:	mov	r3, #1
   13ec8:	str	r3, [r9, #28]
   13ecc:	b	13e08 <__assert_fail@plt+0x171c>
   13ed0:	cmp	r3, #32768	; 0x8000
   13ed4:	bne	13e08 <__assert_fail@plt+0x171c>
   13ed8:	ldr	r2, [r1, #48]	; 0x30
   13edc:	ldr	r3, [r1, #52]	; 0x34
   13ee0:	orrs	r3, r2, r3
   13ee4:	moveq	r4, #1
   13ee8:	movne	r4, #0
   13eec:	b	13dc0 <__assert_fail@plt+0x16d4>
   13ef0:	andeq	r0, r5, r8, asr lr
   13ef4:	andeq	r4, sl, r0, lsl #18
   13ef8:	andeq	pc, r3, pc, lsr #9
   13efc:	b	14ffc <__assert_fail@plt+0x2910>
   13f00:	ldr	r3, [pc, #4]	; 13f0c <__assert_fail@plt+0x1820>
   13f04:	ldr	r0, [r3, #12]
   13f08:	b	14ffc <__assert_fail@plt+0x2910>
   13f0c:	andeq	r0, r5, r8, asr lr
   13f10:	mov	r0, #0
   13f14:	bx	lr
   13f18:	push	{r0, r1, r2, r3, r4, lr}
   13f1c:	ldr	r3, [r2, #44]	; 0x2c
   13f20:	ldr	ip, [pc, #56]	; 13f60 <__assert_fail@plt+0x1874>
   13f24:	str	r3, [sp, #12]
   13f28:	ldrb	r3, [r2, #32]
   13f2c:	str	r3, [sp, #8]
   13f30:	ldr	r3, [pc, #44]	; 13f64 <__assert_fail@plt+0x1878>
   13f34:	ldr	r2, [r3, #40]	; 0x28
   13f38:	str	r2, [sp, #4]
   13f3c:	ldr	r3, [r3, #20]
   13f40:	ldr	r2, [ip, #12]
   13f44:	str	r3, [sp]
   13f48:	mov	r3, r1
   13f4c:	ldr	r1, [ip, #16]
   13f50:	bl	1ebec <__assert_fail@plt+0xc500>
   13f54:	mov	r0, #1
   13f58:	add	sp, sp, #20
   13f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   13f60:	andeq	r0, r5, r8, asr lr
   13f64:	andeq	r0, r5, r4, lsl #29
   13f68:	push	{r4, lr}
   13f6c:	ldr	r4, [r2, #44]	; 0x2c
   13f70:	mov	r1, r4
   13f74:	bl	12680 <fputs@plt>
   13f78:	mov	r1, r4
   13f7c:	mov	r0, #0
   13f80:	bl	125c0 <putc@plt>
   13f84:	mov	r0, #1
   13f88:	pop	{r4, pc}
   13f8c:	mov	r3, r1
   13f90:	push	{r4, lr}
   13f94:	mov	r4, r2
   13f98:	mov	r1, r0
   13f9c:	mov	r0, r3
   13fa0:	bl	1a030 <__assert_fail@plt+0x7944>
   13fa4:	ldr	r1, [r4, #40]	; 0x28
   13fa8:	bl	11ffc <strcmp@plt>
   13fac:	clz	r0, r0
   13fb0:	lsr	r0, r0, #5
   13fb4:	pop	{r4, pc}
   13fb8:	ldr	r3, [r2, #40]	; 0x28
   13fbc:	cmp	r3, #1
   13fc0:	beq	13ff8 <__assert_fail@plt+0x190c>
   13fc4:	bcc	13fd8 <__assert_fail@plt+0x18ec>
   13fc8:	cmp	r3, #2
   13fcc:	beq	14018 <__assert_fail@plt+0x192c>
   13fd0:	mov	r0, #0
   13fd4:	bx	lr
   13fd8:	ldrd	r2, [r2, #48]	; 0x30
   13fdc:	ldr	r0, [r1, #28]
   13fe0:	mov	r1, #0
   13fe4:	cmp	r1, r3
   13fe8:	cmpeq	r0, r2
   13fec:	movhi	r0, #1
   13ff0:	movls	r0, #0
   13ff4:	bx	lr
   13ff8:	ldrd	r2, [r2, #48]	; 0x30
   13ffc:	ldr	r0, [r1, #28]
   14000:	mov	r1, #0
   14004:	cmp	r1, r3
   14008:	cmpeq	r0, r2
   1400c:	movcc	r0, #1
   14010:	movcs	r0, #0
   14014:	bx	lr
   14018:	ldrd	r2, [r2, #48]	; 0x30
   1401c:	ldr	r0, [r1, #28]
   14020:	mov	r1, #0
   14024:	cmp	r3, r1
   14028:	cmpeq	r2, r0
   1402c:	moveq	r0, #1
   14030:	movne	r0, #0
   14034:	bx	lr
   14038:	ldr	r0, [r2, #40]	; 0x28
   1403c:	ldr	r3, [r1, #28]
   14040:	sub	r0, r0, r3
   14044:	clz	r0, r0
   14048:	lsr	r0, r0, #5
   1404c:	bx	lr
   14050:	ldr	r3, [r1, #16]
   14054:	mov	ip, r2
   14058:	and	r3, r3, #61440	; 0xf000
   1405c:	cmp	r3, #40960	; 0xa000
   14060:	bne	14070 <__assert_fail@plt+0x1984>
   14064:	mov	r2, #1
   14068:	add	r1, ip, #40	; 0x28
   1406c:	b	13804 <__assert_fail@plt+0x1118>
   14070:	mov	r0, #0
   14074:	bx	lr
   14078:	push	{r4, r5, r6, lr}
   1407c:	ldr	r5, [r2, #40]	; 0x28
   14080:	bl	1fd10 <__assert_fail@plt+0xd624>
   14084:	mov	r4, r0
   14088:	bl	1fe10 <__assert_fail@plt+0xd724>
   1408c:	mov	r2, #16
   14090:	mov	r1, r4
   14094:	mov	r0, r5
   14098:	bl	122e4 <fnmatch@plt>
   1409c:	mov	r5, r0
   140a0:	mov	r0, r4
   140a4:	bl	2a01c <__assert_fail@plt+0x17930>
   140a8:	clz	r0, r5
   140ac:	lsr	r0, r0, #5
   140b0:	pop	{r4, r5, r6, pc}
   140b4:	ldr	r3, [r2, #40]	; 0x28
   140b8:	cmp	r3, #1
   140bc:	beq	140f0 <__assert_fail@plt+0x1a04>
   140c0:	bcc	140d4 <__assert_fail@plt+0x19e8>
   140c4:	cmp	r3, #2
   140c8:	beq	1410c <__assert_fail@plt+0x1a20>
   140cc:	mov	r0, #0
   140d0:	bx	lr
   140d4:	ldrd	r0, [r1, #96]	; 0x60
   140d8:	ldrd	r2, [r2, #48]	; 0x30
   140dc:	cmp	r1, r3
   140e0:	cmpeq	r0, r2
   140e4:	movhi	r0, #1
   140e8:	movls	r0, #0
   140ec:	bx	lr
   140f0:	ldrd	r0, [r1, #96]	; 0x60
   140f4:	ldrd	r2, [r2, #48]	; 0x30
   140f8:	cmp	r1, r3
   140fc:	cmpeq	r0, r2
   14100:	movcc	r0, #1
   14104:	movcs	r0, #0
   14108:	bx	lr
   1410c:	ldrd	r0, [r1, #96]	; 0x60
   14110:	ldrd	r2, [r2, #48]	; 0x30
   14114:	cmp	r1, r3
   14118:	cmpeq	r0, r2
   1411c:	moveq	r0, #1
   14120:	movne	r0, #0
   14124:	bx	lr
   14128:	mov	r3, r2
   1412c:	mov	r1, r0
   14130:	push	{r4, lr}
   14134:	mov	r2, #16
   14138:	ldr	r0, [r3, #40]	; 0x28
   1413c:	bl	122e4 <fnmatch@plt>
   14140:	clz	r0, r0
   14144:	lsr	r0, r0, #5
   14148:	pop	{r4, pc}
   1414c:	ldr	r3, [r2, #40]	; 0x28
   14150:	cmp	r3, #1
   14154:	beq	1418c <__assert_fail@plt+0x1aa0>
   14158:	bcc	1416c <__assert_fail@plt+0x1a80>
   1415c:	cmp	r3, #2
   14160:	beq	141ac <__assert_fail@plt+0x1ac0>
   14164:	mov	r0, #0
   14168:	bx	lr
   1416c:	ldrd	r2, [r2, #48]	; 0x30
   14170:	ldr	r0, [r1, #20]
   14174:	mov	r1, #0
   14178:	cmp	r1, r3
   1417c:	cmpeq	r0, r2
   14180:	movhi	r0, #1
   14184:	movls	r0, #0
   14188:	bx	lr
   1418c:	ldrd	r2, [r2, #48]	; 0x30
   14190:	ldr	r0, [r1, #20]
   14194:	mov	r1, #0
   14198:	cmp	r1, r3
   1419c:	cmpeq	r0, r2
   141a0:	movcc	r0, #1
   141a4:	movcs	r0, #0
   141a8:	bx	lr
   141ac:	ldrd	r2, [r2, #48]	; 0x30
   141b0:	ldr	r0, [r1, #20]
   141b4:	mov	r1, #0
   141b8:	cmp	r3, r1
   141bc:	cmpeq	r2, r0
   141c0:	moveq	r0, #1
   141c4:	movne	r0, #0
   141c8:	bx	lr
   141cc:	ldr	r3, [r1, #16]
   141d0:	mov	ip, r2
   141d4:	and	r3, r3, #61440	; 0xf000
   141d8:	cmp	r3, #40960	; 0xa000
   141dc:	bne	141ec <__assert_fail@plt+0x1b00>
   141e0:	mov	r2, #0
   141e4:	add	r1, ip, #40	; 0x28
   141e8:	b	13804 <__assert_fail@plt+0x1118>
   141ec:	mov	r0, #0
   141f0:	bx	lr
   141f4:	b	13f18 <__assert_fail@plt+0x182c>
   141f8:	push	{r0, r1, r2, lr}
   141fc:	add	r1, r1, #80	; 0x50
   14200:	mov	r3, #60	; 0x3c
   14204:	ldm	r1, {r0, r1}
   14208:	stm	sp, {r0, r1}
   1420c:	bl	139c8 <__assert_fail@plt+0x12dc>
   14210:	add	sp, sp, #12
   14214:	pop	{pc}		; (ldr pc, [sp], #4)
   14218:	push	{r0, r1, r2, lr}
   1421c:	add	r1, r1, #80	; 0x50
   14220:	ldr	r3, [pc, #16]	; 14238 <__assert_fail@plt+0x1b4c>
   14224:	ldm	r1, {r0, r1}
   14228:	stm	sp, {r0, r1}
   1422c:	bl	139c8 <__assert_fail@plt+0x12dc>
   14230:	add	sp, sp, #12
   14234:	pop	{pc}		; (ldr pc, [sp], #4)
   14238:	andeq	r5, r1, r0, lsl #3
   1423c:	push	{r4, r5, r6, lr}
   14240:	ldr	r5, [r2, #40]	; 0x28
   14244:	bl	1fd10 <__assert_fail@plt+0xd624>
   14248:	mov	r4, r0
   1424c:	bl	1fe10 <__assert_fail@plt+0xd724>
   14250:	mov	r2, #0
   14254:	mov	r1, r4
   14258:	mov	r0, r5
   1425c:	bl	122e4 <fnmatch@plt>
   14260:	mov	r5, r0
   14264:	mov	r0, r4
   14268:	bl	2a01c <__assert_fail@plt+0x17930>
   1426c:	clz	r0, r5
   14270:	lsr	r0, r0, #5
   14274:	pop	{r4, r5, r6, pc}
   14278:	push	{r4, lr}
   1427c:	ldr	r2, [r2, #160]	; 0xa0
   14280:	bl	18338 <__assert_fail@plt+0x5c4c>
   14284:	eor	r0, r0, #1
   14288:	uxtb	r0, r0
   1428c:	pop	{r4, pc}
   14290:	push	{r0, r1, r2, lr}
   14294:	ldr	r3, [r2, #44]	; 0x2c
   14298:	cmp	r3, #0
   1429c:	beq	142b4 <__assert_fail@plt+0x1bc8>
   142a0:	ldr	r3, [pc, #56]	; 142e0 <__assert_fail@plt+0x1bf4>
   142a4:	ldr	r2, [pc, #56]	; 142e4 <__assert_fail@plt+0x1bf8>
   142a8:	ldr	r1, [pc, #56]	; 142e8 <__assert_fail@plt+0x1bfc>
   142ac:	ldr	r0, [pc, #56]	; 142ec <__assert_fail@plt+0x1c00>
   142b0:	bl	126ec <__assert_fail@plt>
   142b4:	add	r1, r1, #80	; 0x50
   142b8:	add	r2, r2, #48	; 0x30
   142bc:	ldm	r1, {r0, r1}
   142c0:	ldm	r2, {r2, r3}
   142c4:	stm	sp, {r0, r1}
   142c8:	bl	13954 <__assert_fail@plt+0x1268>
   142cc:	cmp	r0, #0
   142d0:	movle	r0, #0
   142d4:	movgt	r0, #1
   142d8:	add	sp, sp, #12
   142dc:	pop	{pc}		; (ldr pc, [sp], #4)
   142e0:	andeq	sl, r3, r1, lsl #3
   142e4:	andeq	r0, r0, sp, ror #4
   142e8:			; <UNDEFINED> instruction: 0x0003a1b5
   142ec:	andeq	sl, r3, ip, ror #3
   142f0:	push	{r0, r1, r2, r4, r5, lr}
   142f4:	mov	r3, r1
   142f8:	ldr	r1, [r2, #44]	; 0x2c
   142fc:	cmp	r1, #0
   14300:	beq	14318 <__assert_fail@plt+0x1c2c>
   14304:	ldr	r3, [pc, #244]	; 14400 <__assert_fail@plt+0x1d14>
   14308:	ldr	r2, [pc, #244]	; 14404 <__assert_fail@plt+0x1d18>
   1430c:	ldr	r1, [pc, #244]	; 14408 <__assert_fail@plt+0x1d1c>
   14310:	ldr	r0, [pc, #244]	; 1440c <__assert_fail@plt+0x1d20>
   14314:	bl	126ec <__assert_fail@plt>
   14318:	ldr	r1, [r2, #40]	; 0x28
   1431c:	cmp	r1, #4
   14320:	ldrls	pc, [pc, r1, lsl #2]
   14324:	b	143ec <__assert_fail@plt+0x1d00>
   14328:	andeq	r4, r1, r0, asr r3
   1432c:	andeq	r4, r1, ip, lsl #7
   14330:	ldrdeq	r4, [r1], -r0
   14334:	andeq	r4, r1, r0, ror #7
   14338:	andeq	r4, r1, ip, lsr r3
   1433c:	ldr	r3, [pc, #188]	; 14400 <__assert_fail@plt+0x1d14>
   14340:	mov	r2, #636	; 0x27c
   14344:	ldr	r1, [pc, #188]	; 14408 <__assert_fail@plt+0x1d1c>
   14348:	ldr	r0, [pc, #192]	; 14410 <__assert_fail@plt+0x1d24>
   1434c:	b	14314 <__assert_fail@plt+0x1c28>
   14350:	add	r1, r3, #72	; 0x48
   14354:	add	ip, sp, #8
   14358:	ldm	r1, {r0, r1}
   1435c:	stmdb	ip, {r0, r1}
   14360:	ldr	r1, [r3, #76]	; 0x4c
   14364:	str	r1, [sp, #4]
   14368:	add	r2, r2, #48	; 0x30
   1436c:	add	r1, sp, #8
   14370:	ldm	r2, {r2, r3}
   14374:	ldmdb	r1, {r0, r1}
   14378:	bl	13954 <__assert_fail@plt+0x1268>
   1437c:	cmp	r0, #0
   14380:	movle	r0, #0
   14384:	movgt	r0, #1
   14388:	b	143c8 <__assert_fail@plt+0x1cdc>
   1438c:	mov	r2, #5
   14390:	mov	r5, r0
   14394:	ldr	r1, [pc, #120]	; 14414 <__assert_fail@plt+0x1d28>
   14398:	mov	r0, #0
   1439c:	bl	1217c <dcgettext@plt>
   143a0:	mov	r1, r5
   143a4:	mov	r4, r0
   143a8:	mov	r0, #0
   143ac:	bl	180e8 <__assert_fail@plt+0x59fc>
   143b0:	mov	r1, #0
   143b4:	mov	r2, r4
   143b8:	mov	r3, r0
   143bc:	mov	r0, r1
   143c0:	bl	122c0 <error@plt>
   143c4:	mov	r0, #0
   143c8:	add	sp, sp, #12
   143cc:	pop	{r4, r5, pc}
   143d0:	ldr	r1, [r3, #92]	; 0x5c
   143d4:	ldr	r3, [r3, #88]	; 0x58
   143d8:	str	r3, [sp]
   143dc:	b	14364 <__assert_fail@plt+0x1c78>
   143e0:	ldr	r1, [r3, #84]	; 0x54
   143e4:	ldr	r3, [r3, #80]	; 0x50
   143e8:	b	143d8 <__assert_fail@plt+0x1cec>
   143ec:	ldr	r3, [pc, #12]	; 14400 <__assert_fail@plt+0x1d14>
   143f0:	ldr	r2, [pc, #32]	; 14418 <__assert_fail@plt+0x1d2c>
   143f4:	ldr	r1, [pc, #12]	; 14408 <__assert_fail@plt+0x1d1c>
   143f8:	ldr	r0, [pc, #28]	; 1441c <__assert_fail@plt+0x1d30>
   143fc:	b	14314 <__assert_fail@plt+0x1c28>
   14400:	andeq	sl, r3, ip, lsl #3
   14404:	andeq	r0, r0, r7, ror r2
   14408:			; <UNDEFINED> instruction: 0x0003a1b5
   1440c:	andeq	sl, r3, ip, ror #3
   14410:	andeq	sl, r3, r4, lsr #4
   14414:	andeq	sl, r3, sp, asr #4
   14418:	muleq	r0, fp, r2
   1441c:	andeq	sl, r3, sp, ror r2
   14420:	push	{r4, lr}
   14424:	ldr	r0, [r1, #28]
   14428:	bl	126c8 <getgrgid@plt>
   1442c:	clz	r0, r0
   14430:	lsr	r0, r0, #5
   14434:	pop	{r4, pc}
   14438:	push	{r4, lr}
   1443c:	ldr	r0, [r1, #24]
   14440:	bl	12014 <getpwuid@plt>
   14444:	clz	r0, r0
   14448:	lsr	r0, r0, #5
   1444c:	pop	{r4, pc}
   14450:	push	{r4, r5, r6, lr}
   14454:	mov	r4, r0
   14458:	ldr	r3, [r2, #132]	; 0x84
   1445c:	mov	r6, r1
   14460:	mov	r1, r0
   14464:	ldr	r0, [r3]
   14468:	mov	r5, r2
   1446c:	bl	13880 <__assert_fail@plt+0x1194>
   14470:	cmp	r0, #0
   14474:	popeq	{r4, r5, r6, pc}
   14478:	mov	r2, r5
   1447c:	mov	r1, r6
   14480:	mov	r0, r4
   14484:	pop	{r4, r5, r6, lr}
   14488:	b	14ffc <__assert_fail@plt+0x2910>
   1448c:	push	{r4, r5, r6, lr}
   14490:	mov	r5, r1
   14494:	ldr	r3, [r2, #132]	; 0x84
   14498:	mov	r1, r0
   1449c:	mov	r4, r2
   144a0:	ldr	r0, [r3]
   144a4:	bl	13880 <__assert_fail@plt+0x1194>
   144a8:	cmp	r0, #0
   144ac:	popeq	{r4, r5, r6, pc}
   144b0:	ldr	r3, [pc, #16]	; 144c8 <__assert_fail@plt+0x1ddc>
   144b4:	mov	r2, r4
   144b8:	mov	r1, r5
   144bc:	ldr	r0, [r3, #12]
   144c0:	pop	{r4, r5, r6, lr}
   144c4:	b	14ffc <__assert_fail@plt+0x2910>
   144c8:	andeq	r0, r5, r8, asr lr
   144cc:	mov	r0, #1
   144d0:	bx	lr
   144d4:	mov	r3, r2
   144d8:	mov	r1, r0
   144dc:	push	{r4, lr}
   144e0:	mov	r2, #0
   144e4:	ldr	r0, [r3, #40]	; 0x28
   144e8:	bl	122e4 <fnmatch@plt>
   144ec:	clz	r0, r0
   144f0:	lsr	r0, r0, #5
   144f4:	pop	{r4, pc}
   144f8:	ldr	r3, [r1, #16]
   144fc:	ldr	r0, [r2, #40]	; 0x28
   14500:	and	r1, r3, #61440	; 0xf000
   14504:	cmp	r1, #16384	; 0x4000
   14508:	moveq	r1, #44	; 0x2c
   1450c:	movne	r1, #40	; 0x28
   14510:	add	r1, r2, r1
   14514:	cmp	r0, #1
   14518:	ldr	r1, [r1, #4]
   1451c:	beq	14544 <__assert_fail@plt+0x1e58>
   14520:	bcc	14534 <__assert_fail@plt+0x1e48>
   14524:	cmp	r0, #2
   14528:	beq	1455c <__assert_fail@plt+0x1e70>
   1452c:	push	{r4, lr}
   14530:	bl	12698 <abort@plt>
   14534:	bics	r3, r1, r3
   14538:	moveq	r0, #1
   1453c:	movne	r0, #0
   14540:	bx	lr
   14544:	cmp	r1, #0
   14548:	beq	14540 <__assert_fail@plt+0x1e54>
   1454c:	tst	r3, r1
   14550:	movne	r0, #1
   14554:	moveq	r0, #0
   14558:	b	14540 <__assert_fail@plt+0x1e54>
   1455c:	lsl	r0, r3, #20
   14560:	lsr	r0, r0, #20
   14564:	sub	r0, r0, r1
   14568:	clz	r0, r0
   1456c:	lsr	r0, r0, #5
   14570:	b	14540 <__assert_fail@plt+0x1e54>
   14574:	ldr	r0, [pc, #32]	; 1459c <__assert_fail@plt+0x1eb0>
   14578:	push	{r4, lr}
   1457c:	mov	r3, #0
   14580:	ldr	r1, [r0, #12]
   14584:	mov	r2, #1
   14588:	ldr	r0, [r0, #16]
   1458c:	bl	120b0 <faccessat@plt>
   14590:	clz	r0, r0
   14594:	lsr	r0, r0, #5
   14598:	pop	{r4, pc}
   1459c:	andeq	r0, r5, r8, asr lr
   145a0:	ldr	r0, [pc, #32]	; 145c8 <__assert_fail@plt+0x1edc>
   145a4:	push	{r4, lr}
   145a8:	mov	r3, #0
   145ac:	ldr	r1, [r0, #12]
   145b0:	mov	r2, #4
   145b4:	ldr	r0, [r0, #16]
   145b8:	bl	120b0 <faccessat@plt>
   145bc:	clz	r0, r0
   145c0:	lsr	r0, r0, #5
   145c4:	pop	{r4, pc}
   145c8:	andeq	r0, r5, r8, asr lr
   145cc:	ldr	r0, [pc, #32]	; 145f4 <__assert_fail@plt+0x1f08>
   145d0:	push	{r4, lr}
   145d4:	mov	r3, #0
   145d8:	ldr	r1, [r0, #12]
   145dc:	mov	r2, #2
   145e0:	ldr	r0, [r0, #16]
   145e4:	bl	120b0 <faccessat@plt>
   145e8:	clz	r0, r0
   145ec:	lsr	r0, r0, #5
   145f0:	pop	{r4, pc}
   145f4:	andeq	r0, r5, r8, asr lr
   145f8:	mov	ip, r2
   145fc:	push	{r0, r1, r2, lr}
   14600:	ldr	r3, [pc, #28]	; 14624 <__assert_fail@plt+0x1f38>
   14604:	ldrb	r2, [r2, #52]	; 0x34
   14608:	ldr	r1, [ip, #56]	; 0x38
   1460c:	str	r0, [sp]
   14610:	ldr	r0, [ip, #44]	; 0x2c
   14614:	bl	1f238 <__assert_fail@plt+0xcb4c>
   14618:	mov	r0, #1
   1461c:	add	sp, sp, #12
   14620:	pop	{pc}		; (ldr pc, [sp], #4)
   14624:	andeq	lr, r3, r1, ror #26
   14628:	b	145f8 <__assert_fail@plt+0x1f0c>
   1462c:	b	13f68 <__assert_fail@plt+0x187c>
   14630:	push	{r0, r1, r4, r5, r6, lr}
   14634:	mov	r5, r2
   14638:	mov	r6, r0
   1463c:	bl	123bc <strlen@plt>
   14640:	mov	r3, #0
   14644:	str	r3, [sp]
   14648:	mov	r1, r6
   1464c:	mov	r4, r0
   14650:	mov	r2, r0
   14654:	ldr	r0, [r5, #40]	; 0x28
   14658:	bl	37964 <__assert_fail@plt+0x25278>
   1465c:	sub	r0, r4, r0
   14660:	clz	r0, r0
   14664:	lsr	r0, r0, #5
   14668:	add	sp, sp, #8
   1466c:	pop	{r4, r5, r6, pc}
   14670:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14674:	mov	sl, r2
   14678:	ldr	r6, [r2, #44]	; 0x2c
   1467c:	ldrd	r8, [r1, #48]	; 0x30
   14680:	mov	r2, r6
   14684:	asr	r7, r6, #31
   14688:	mov	r3, r7
   1468c:	mov	r0, r8
   14690:	mov	r1, r9
   14694:	bl	39878 <__assert_fail@plt+0x2718c>
   14698:	mov	r0, r8
   1469c:	mov	r1, r9
   146a0:	mov	r5, #0
   146a4:	orrs	r3, r2, r3
   146a8:	mov	r3, r7
   146ac:	mov	r2, r6
   146b0:	movne	r4, #1
   146b4:	moveq	r4, #0
   146b8:	bl	39878 <__assert_fail@plt+0x2718c>
   146bc:	ldr	r3, [sl, #40]	; 0x28
   146c0:	adds	r0, r0, r4
   146c4:	adc	r1, r1, r5
   146c8:	cmp	r3, #1
   146cc:	beq	146fc <__assert_fail@plt+0x2010>
   146d0:	bcc	146e4 <__assert_fail@plt+0x1ff8>
   146d4:	cmp	r3, #2
   146d8:	beq	14714 <__assert_fail@plt+0x2028>
   146dc:	mov	r0, #0
   146e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   146e4:	ldrd	r2, [sl, #48]	; 0x30
   146e8:	cmp	r1, r3
   146ec:	cmpeq	r0, r2
   146f0:	movhi	r0, #1
   146f4:	movls	r0, #0
   146f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   146fc:	ldrd	r2, [sl, #48]	; 0x30
   14700:	cmp	r1, r3
   14704:	cmpeq	r0, r2
   14708:	movcc	r0, #1
   1470c:	movcs	r0, #0
   14710:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14714:	ldrd	r2, [sl, #48]	; 0x30
   14718:	cmp	r3, r1
   1471c:	cmpeq	r2, r0
   14720:	moveq	r0, #1
   14724:	movne	r0, #0
   14728:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1472c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14730:	ldrd	r6, [r1, #96]	; 0x60
   14734:	orrs	r3, r6, r7
   14738:	beq	14754 <__assert_fail@plt+0x2068>
   1473c:	ldrd	r4, [r2, #40]	; 0x28
   14740:	cmp	r7, r5
   14744:	cmpeq	r6, r4
   14748:	beq	14754 <__assert_fail@plt+0x2068>
   1474c:	mov	r0, #0
   14750:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14754:	ldr	r3, [pc, #72]	; 147a4 <__assert_fail@plt+0x20b8>
   14758:	mov	r9, r2
   1475c:	mov	r8, r1
   14760:	mov	r2, r1
   14764:	ldr	r1, [r3, #12]
   14768:	bl	1817c <__assert_fail@plt+0x5a90>
   1476c:	cmp	r0, #0
   14770:	bne	1474c <__assert_fail@plt+0x2060>
   14774:	ldrd	r6, [r8, #96]	; 0x60
   14778:	ldrd	r4, [r9, #40]	; 0x28
   1477c:	cmp	r7, r5
   14780:	cmpeq	r6, r4
   14784:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   14788:	ldrd	r0, [r8]
   1478c:	ldrd	r2, [r9, #48]	; 0x30
   14790:	cmp	r1, r3
   14794:	cmpeq	r0, r2
   14798:	moveq	r0, #1
   1479c:	movne	r0, #0
   147a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   147a4:	andeq	r0, r5, r8, asr lr
   147a8:	mov	r0, #1
   147ac:	bx	lr
   147b0:	ldr	r3, [pc, #192]	; 14878 <__assert_fail@plt+0x218c>
   147b4:	ldrb	r0, [r3, #5]
   147b8:	cmp	r0, #0
   147bc:	bne	147d8 <__assert_fail@plt+0x20ec>
   147c0:	push	{r4, lr}
   147c4:	ldr	r3, [pc, #176]	; 1487c <__assert_fail@plt+0x2190>
   147c8:	ldr	r2, [pc, #176]	; 14880 <__assert_fail@plt+0x2194>
   147cc:	ldr	r1, [pc, #176]	; 14884 <__assert_fail@plt+0x2198>
   147d0:	ldr	r0, [pc, #176]	; 14888 <__assert_fail@plt+0x219c>
   147d4:	bl	126ec <__assert_fail@plt>
   147d8:	ldr	r0, [r3, #8]
   147dc:	cmp	r0, #0
   147e0:	beq	1486c <__assert_fail@plt+0x2180>
   147e4:	ldrb	r3, [r3, #4]
   147e8:	cmp	r3, #0
   147ec:	ldrne	r0, [r1, #16]
   147f0:	and	r0, r0, #61440	; 0xf000
   147f4:	cmp	r0, #24576	; 0x6000
   147f8:	beq	14850 <__assert_fail@plt+0x2164>
   147fc:	bhi	14820 <__assert_fail@plt+0x2134>
   14800:	cmp	r0, #8192	; 0x2000
   14804:	beq	14858 <__assert_fail@plt+0x216c>
   14808:	cmp	r0, #16384	; 0x4000
   1480c:	beq	14840 <__assert_fail@plt+0x2154>
   14810:	cmp	r0, #4096	; 0x1000
   14814:	bne	14868 <__assert_fail@plt+0x217c>
   14818:	mov	r3, #5
   1481c:	b	14844 <__assert_fail@plt+0x2158>
   14820:	cmp	r0, #40960	; 0xa000
   14824:	beq	14870 <__assert_fail@plt+0x2184>
   14828:	cmp	r0, #49152	; 0xc000
   1482c:	beq	14860 <__assert_fail@plt+0x2174>
   14830:	cmp	r0, #32768	; 0x8000
   14834:	bne	14868 <__assert_fail@plt+0x217c>
   14838:	mov	r3, #3
   1483c:	b	14844 <__assert_fail@plt+0x2158>
   14840:	mov	r3, #2
   14844:	add	r3, r2, r3
   14848:	ldrb	r0, [r3, #40]	; 0x28
   1484c:	b	1486c <__assert_fail@plt+0x2180>
   14850:	mov	r3, #0
   14854:	b	14844 <__assert_fail@plt+0x2158>
   14858:	mov	r3, #1
   1485c:	b	14844 <__assert_fail@plt+0x2158>
   14860:	mov	r3, #6
   14864:	b	14844 <__assert_fail@plt+0x2158>
   14868:	mov	r0, #0
   1486c:	bx	lr
   14870:	mov	r3, #4
   14874:	b	14844 <__assert_fail@plt+0x2158>
   14878:	andeq	r0, r5, r8, asr lr
   1487c:	muleq	r3, r9, r1
   14880:	ldrdeq	r0, [r0], -r1
   14884:			; <UNDEFINED> instruction: 0x0003a1b5
   14888:	andeq	sl, r3, r7, lsl #5
   1488c:	ldr	r3, [r2, #40]	; 0x28
   14890:	cmp	r3, #1
   14894:	beq	148cc <__assert_fail@plt+0x21e0>
   14898:	bcc	148ac <__assert_fail@plt+0x21c0>
   1489c:	cmp	r3, #2
   148a0:	beq	148ec <__assert_fail@plt+0x2200>
   148a4:	mov	r0, #0
   148a8:	bx	lr
   148ac:	ldrd	r2, [r2, #48]	; 0x30
   148b0:	ldr	r0, [r1, #24]
   148b4:	mov	r1, #0
   148b8:	cmp	r1, r3
   148bc:	cmpeq	r0, r2
   148c0:	movhi	r0, #1
   148c4:	movls	r0, #0
   148c8:	bx	lr
   148cc:	ldrd	r2, [r2, #48]	; 0x30
   148d0:	ldr	r0, [r1, #24]
   148d4:	mov	r1, #0
   148d8:	cmp	r1, r3
   148dc:	cmpeq	r0, r2
   148e0:	movcc	r0, #1
   148e4:	movcs	r0, #0
   148e8:	bx	lr
   148ec:	ldrd	r2, [r2, #48]	; 0x30
   148f0:	ldr	r0, [r1, #24]
   148f4:	mov	r1, #0
   148f8:	cmp	r3, r1
   148fc:	cmpeq	r2, r0
   14900:	moveq	r0, #1
   14904:	movne	r0, #0
   14908:	bx	lr
   1490c:	push	{r4, r5, r6, r7, r8, lr}
   14910:	mov	r6, r2
   14914:	add	r2, r1, #72	; 0x48
   14918:	sub	sp, sp, #24
   1491c:	mov	r3, r1
   14920:	ldm	r2, {r0, r1}
   14924:	add	ip, sp, #8
   14928:	ldr	r7, [r3, #76]	; 0x4c
   1492c:	stm	ip, {r0, r1}
   14930:	add	r1, r3, #88	; 0x58
   14934:	mov	r8, r0
   14938:	ldm	r1, {r0, r1}
   1493c:	add	r2, sp, #16
   14940:	ldr	r4, [r3, #92]	; 0x5c
   14944:	stm	r2, {r0, r1}
   14948:	str	r7, [sp, #12]
   1494c:	str	r4, [sp, #20]
   14950:	mov	r5, r0
   14954:	ldm	r2, {r2, r3}
   14958:	ldm	ip, {r0, r1}
   1495c:	bl	13954 <__assert_fail@plt+0x1268>
   14960:	cmp	r0, #0
   14964:	movlt	r0, #0
   14968:	blt	14998 <__assert_fail@plt+0x22ac>
   1496c:	subs	r3, r4, r7
   14970:	addmi	r3, r3, #998244352	; 0x3b800000
   14974:	sub	r2, r5, r8
   14978:	addmi	r3, r3, #1753088	; 0x1ac000
   1497c:	addmi	r3, r3, #2560	; 0xa00
   14980:	submi	r2, r2, #1
   14984:	stm	sp, {r2, r3}
   14988:	ldr	r3, [pc, #16]	; 149a0 <__assert_fail@plt+0x22b4>
   1498c:	mov	r2, r6
   14990:	ldm	sp, {r0, r1}
   14994:	bl	139c8 <__assert_fail@plt+0x12dc>
   14998:	add	sp, sp, #24
   1499c:	pop	{r4, r5, r6, r7, r8, pc}
   149a0:	andeq	r5, r1, r0, lsl #3
   149a4:	ldr	r0, [r2, #40]	; 0x28
   149a8:	ldr	r3, [r1, #24]
   149ac:	sub	r0, r0, r3
   149b0:	clz	r0, r0
   149b4:	lsr	r0, r0, #5
   149b8:	bx	lr
   149bc:	push	{r4, r5, r6, r7, r8, lr}
   149c0:	sub	sp, sp, #104	; 0x68
   149c4:	mov	r8, r1
   149c8:	mov	r7, r2
   149cc:	mov	r5, r0
   149d0:	bl	17aa0 <__assert_fail@plt+0x53b4>
   149d4:	ldr	r4, [pc, #156]	; 14a78 <__assert_fail@plt+0x238c>
   149d8:	ldr	r3, [pc, #156]	; 14a7c <__assert_fail@plt+0x2390>
   149dc:	ldr	r6, [pc, #156]	; 14a80 <__assert_fail@plt+0x2394>
   149e0:	cmp	r0, #0
   149e4:	mov	r0, sp
   149e8:	moveq	r6, r3
   149ec:	bl	17758 <__assert_fail@plt+0x506c>
   149f0:	mov	r1, sp
   149f4:	ldr	r0, [r4, #12]
   149f8:	blx	r6
   149fc:	cmp	r0, #0
   14a00:	beq	14a64 <__assert_fail@plt+0x2378>
   14a04:	bl	17aa0 <__assert_fail@plt+0x53b4>
   14a08:	cmp	r0, #0
   14a0c:	beq	14a28 <__assert_fail@plt+0x233c>
   14a10:	bl	12404 <__errno_location@plt>
   14a14:	ldr	r3, [r0]
   14a18:	cmp	r3, #2
   14a1c:	moveq	r2, r7
   14a20:	moveq	r1, r8
   14a24:	beq	14a6c <__assert_fail@plt+0x2380>
   14a28:	bl	12404 <__errno_location@plt>
   14a2c:	mov	r1, r5
   14a30:	ldr	r6, [r0]
   14a34:	mov	r0, #0
   14a38:	bl	180e8 <__assert_fail@plt+0x59fc>
   14a3c:	ldr	r2, [pc, #64]	; 14a84 <__assert_fail@plt+0x2398>
   14a40:	mov	r1, r6
   14a44:	mov	r3, r0
   14a48:	mov	r0, #0
   14a4c:	bl	122c0 <error@plt>
   14a50:	mov	r0, #0
   14a54:	mov	r3, #1
   14a58:	str	r3, [r4, #28]
   14a5c:	add	sp, sp, #104	; 0x68
   14a60:	pop	{r4, r5, r6, r7, r8, pc}
   14a64:	mov	r2, r7
   14a68:	mov	r1, sp
   14a6c:	mov	r0, r5
   14a70:	bl	147b0 <__assert_fail@plt+0x20c4>
   14a74:	b	14a5c <__assert_fail@plt+0x2370>
   14a78:	andeq	r0, r5, r8, asr lr
   14a7c:	andeq	r7, r1, ip, lsr #18
   14a80:	muleq	r1, r8, r9
   14a84:	andeq	pc, r3, pc, lsr #9
   14a88:	push	{r0, r1, r4, r5, r6, lr}
   14a8c:	mov	r4, r2
   14a90:	ldr	r3, [pc, #144]	; 14b28 <__assert_fail@plt+0x243c>
   14a94:	ldr	r2, [pc, #144]	; 14b2c <__assert_fail@plt+0x2440>
   14a98:	mov	r6, r0
   14a9c:	ldr	r1, [r3, #12]
   14aa0:	ldr	r5, [r2, #64]	; 0x40
   14aa4:	ldr	r0, [r3, #16]
   14aa8:	add	r2, sp, #4
   14aac:	blx	r5
   14ab0:	cmp	r0, #0
   14ab4:	bge	14b04 <__assert_fail@plt+0x2418>
   14ab8:	bl	12404 <__errno_location@plt>
   14abc:	mov	r2, #5
   14ac0:	ldr	r1, [pc, #104]	; 14b30 <__assert_fail@plt+0x2444>
   14ac4:	ldr	r4, [r0]
   14ac8:	mov	r0, #0
   14acc:	bl	1217c <dcgettext@plt>
   14ad0:	mov	r1, r6
   14ad4:	mov	r5, r0
   14ad8:	mov	r0, #0
   14adc:	bl	180e8 <__assert_fail@plt+0x59fc>
   14ae0:	mov	r1, r4
   14ae4:	mov	r2, r5
   14ae8:	mov	r4, #0
   14aec:	mov	r3, r0
   14af0:	mov	r0, #0
   14af4:	bl	122c0 <error@plt>
   14af8:	mov	r0, r4
   14afc:	add	sp, sp, #8
   14b00:	pop	{r4, r5, r6, pc}
   14b04:	mov	r2, #0
   14b08:	ldr	r1, [sp, #4]
   14b0c:	ldr	r0, [r4, #40]	; 0x28
   14b10:	bl	122e4 <fnmatch@plt>
   14b14:	clz	r4, r0
   14b18:	ldr	r0, [sp, #4]
   14b1c:	lsr	r4, r4, #5
   14b20:	bl	125fc <freecon@plt>
   14b24:	b	14af8 <__assert_fail@plt+0x240c>
   14b28:	andeq	r0, r5, r8, asr lr
   14b2c:	andeq	r0, r5, r4, lsl #29
   14b30:	muleq	r3, r7, r2
   14b34:	push	{r4, r5, lr}
   14b38:	mov	r5, r0
   14b3c:	sub	sp, sp, #260	; 0x104
   14b40:	mov	r4, r1
   14b44:	cmp	r4, #0
   14b48:	bne	14b60 <__assert_fail@plt+0x2474>
   14b4c:	mov	r1, r5
   14b50:	mov	r0, #10
   14b54:	bl	1256c <fputc@plt>
   14b58:	add	sp, sp, #260	; 0x104
   14b5c:	pop	{r4, r5, pc}
   14b60:	ldr	r1, [r4, #4]
   14b64:	cmp	r1, #0
   14b68:	moveq	r2, r1
   14b6c:	beq	14ba0 <__assert_fail@plt+0x24b4>
   14b70:	mov	r0, sp
   14b74:	bl	12278 <strcpy@plt>
   14b78:	mov	r0, sp
   14b7c:	bl	123bc <strlen@plt>
   14b80:	sub	r0, r0, #1
   14b84:	cmp	r0, #0
   14b88:	bge	14bb4 <__assert_fail@plt+0x24c8>
   14b8c:	add	r3, sp, #256	; 0x100
   14b90:	add	r0, r3, r0
   14b94:	mov	r2, sp
   14b98:	mov	r3, #0
   14b9c:	strb	r3, [r0, #-255]	; 0xffffff01
   14ba0:	ldr	r1, [pc, #32]	; 14bc8 <__assert_fail@plt+0x24dc>
   14ba4:	mov	r0, r5
   14ba8:	bl	123f8 <fprintf@plt>
   14bac:	ldr	r4, [r4, #152]	; 0x98
   14bb0:	b	14b44 <__assert_fail@plt+0x2458>
   14bb4:	ldrb	r3, [sp, r0]
   14bb8:	cmp	r3, #9
   14bbc:	cmpne	r3, #32
   14bc0:	beq	14b80 <__assert_fail@plt+0x2494>
   14bc4:	b	14b8c <__assert_fail@plt+0x24a0>
   14bc8:	andeq	sl, r3, sp, lsr #5
   14bcc:	push	{r0, r1, r2, r4, r5, lr}
   14bd0:	subs	r4, r1, #0
   14bd4:	beq	14cc4 <__assert_fail@plt+0x25d8>
   14bd8:	ldr	r1, [r4, #156]	; 0x9c
   14bdc:	mov	r5, r0
   14be0:	bl	14cf4 <__assert_fail@plt+0x2608>
   14be4:	ldrb	r3, [r4, #20]
   14be8:	ldrb	r2, [r4, #19]
   14bec:	ldrb	ip, [r4, #18]
   14bf0:	ldr	r1, [pc, #212]	; 14ccc <__assert_fail@plt+0x25e0>
   14bf4:	cmp	r3, #0
   14bf8:	ldr	r0, [pc, #208]	; 14cd0 <__assert_fail@plt+0x25e4>
   14bfc:	moveq	r0, r1
   14c00:	cmp	r2, #0
   14c04:	ldr	r3, [pc, #200]	; 14cd4 <__assert_fail@plt+0x25e8>
   14c08:	moveq	r3, r1
   14c0c:	cmp	ip, #0
   14c10:	ldr	r2, [pc, #192]	; 14cd8 <__assert_fail@plt+0x25ec>
   14c14:	str	r0, [sp]
   14c18:	moveq	r2, r1
   14c1c:	mov	r0, r5
   14c20:	ldr	r1, [pc, #180]	; 14cdc <__assert_fail@plt+0x25f0>
   14c24:	bl	123f8 <fprintf@plt>
   14c28:	mov	r1, r4
   14c2c:	mov	r0, r5
   14c30:	bl	15d9c <__assert_fail@plt+0x36b0>
   14c34:	vldr	s15, [r4, #28]
   14c38:	ldr	r1, [pc, #160]	; 14ce0 <__assert_fail@plt+0x25f4>
   14c3c:	mov	r0, r5
   14c40:	vcvt.f64.f32	d7, s15
   14c44:	vmov	r2, r3, d7
   14c48:	bl	123f8 <fprintf@plt>
   14c4c:	ldr	r3, [pc, #144]	; 14ce4 <__assert_fail@plt+0x25f8>
   14c50:	ldr	r3, [r3, #44]	; 0x2c
   14c54:	tst	r3, #64	; 0x40
   14c58:	beq	14ca0 <__assert_fail@plt+0x25b4>
   14c5c:	ldr	r3, [r4, #164]	; 0xa4
   14c60:	ldr	r2, [r4, #168]	; 0xa8
   14c64:	ldr	r1, [pc, #124]	; 14ce8 <__assert_fail@plt+0x25fc>
   14c68:	mov	r0, r5
   14c6c:	bl	123f8 <fprintf@plt>
   14c70:	ldr	r3, [r4, #164]	; 0xa4
   14c74:	cmp	r3, #0
   14c78:	beq	14cb4 <__assert_fail@plt+0x25c8>
   14c7c:	vldr	s15, [r4, #168]	; 0xa8
   14c80:	ldr	r1, [pc, #100]	; 14cec <__assert_fail@plt+0x2600>
   14c84:	mov	r0, r5
   14c88:	vcvt.f64.u32	d6, s15
   14c8c:	vmov	s15, r3
   14c90:	vcvt.f64.u32	d7, s15
   14c94:	vdiv.f64	d5, d6, d7
   14c98:	vmov	r2, r3, d5
   14c9c:	bl	123f8 <fprintf@plt>
   14ca0:	ldr	r1, [r4, #160]	; 0xa0
   14ca4:	mov	r0, r5
   14ca8:	add	sp, sp, #12
   14cac:	pop	{r4, r5, lr}
   14cb0:	b	14cf4 <__assert_fail@plt+0x2608>
   14cb4:	mov	r1, r5
   14cb8:	ldr	r0, [pc, #48]	; 14cf0 <__assert_fail@plt+0x2604>
   14cbc:	bl	12680 <fputs@plt>
   14cc0:	b	14ca0 <__assert_fail@plt+0x25b4>
   14cc4:	add	sp, sp, #12
   14cc8:	pop	{r4, r5, pc}
   14ccc:	ldrdeq	fp, [r3], -pc	; <UNPREDICTABLE>
   14cd0:	andeq	sl, r3, sp, asr #5
   14cd4:	andeq	sl, r3, r0, asr #5
   14cd8:			; <UNDEFINED> instruction: 0x0003a2b3
   14cdc:	ldrdeq	sl, [r3], -sl	; <UNPREDICTABLE>
   14ce0:	andeq	sl, r3, r1, ror #5
   14ce4:	andeq	r0, r5, r4, lsl #29
   14ce8:	strdeq	sl, [r3], -fp
   14cec:	andeq	sl, r3, r6, lsl r3
   14cf0:	andeq	sl, r3, lr, lsl r3
   14cf4:	push	{r4, r5, r6, lr}
   14cf8:	mov	r4, r1
   14cfc:	ldr	r2, [pc, #124]	; 14d80 <__assert_fail@plt+0x2694>
   14d00:	ldr	r1, [pc, #124]	; 14d84 <__assert_fail@plt+0x2698>
   14d04:	mov	r6, r0
   14d08:	cmp	r4, #0
   14d0c:	popeq	{r4, r5, r6, pc}
   14d10:	ldr	r3, [r4]
   14d14:	cmp	r3, r1
   14d18:	cmpne	r3, r2
   14d1c:	ldr	r3, [r4, #156]	; 0x9c
   14d20:	bne	14d30 <__assert_fail@plt+0x2644>
   14d24:	cmp	r3, #0
   14d28:	ldreq	r4, [r4, #160]	; 0xa0
   14d2c:	beq	14d08 <__assert_fail@plt+0x261c>
   14d30:	cmp	r3, #0
   14d34:	bne	14d6c <__assert_fail@plt+0x2680>
   14d38:	ldr	r2, [r4, #160]	; 0xa0
   14d3c:	cmp	r2, #0
   14d40:	bne	14d6c <__assert_fail@plt+0x2680>
   14d44:	mov	r5, r3
   14d48:	mov	r1, r4
   14d4c:	mov	r0, r6
   14d50:	bl	14bcc <__assert_fail@plt+0x24e0>
   14d54:	cmp	r5, #0
   14d58:	popeq	{r4, r5, r6, pc}
   14d5c:	mov	r1, r6
   14d60:	ldr	r0, [pc, #32]	; 14d88 <__assert_fail@plt+0x269c>
   14d64:	pop	{r4, r5, r6, lr}
   14d68:	b	12680 <fputs@plt>
   14d6c:	mov	r1, r6
   14d70:	ldr	r0, [pc, #20]	; 14d8c <__assert_fail@plt+0x26a0>
   14d74:	bl	12680 <fputs@plt>
   14d78:	mov	r5, #1
   14d7c:	b	14d48 <__assert_fail@plt+0x265c>
   14d80:	andeq	r3, r1, r4, asr #15
   14d84:	andeq	r3, r1, r4, lsl r9
   14d88:	andeq	sl, r3, r3, lsr #6
   14d8c:	andeq	sl, r3, r7, lsr #6
   14d90:	ldr	r3, [pc, #60]	; 14dd4 <__assert_fail@plt+0x26e8>
   14d94:	ldr	r3, [r3, #44]	; 0x2c
   14d98:	tst	r3, #64	; 0x40
   14d9c:	bxeq	lr
   14da0:	push	{r4, r5, r6, lr}
   14da4:	mov	r5, r0
   14da8:	ldr	r4, [pc, #40]	; 14dd8 <__assert_fail@plt+0x26ec>
   14dac:	ldr	r0, [pc, #40]	; 14ddc <__assert_fail@plt+0x26f0>
   14db0:	ldr	r1, [r4]
   14db4:	bl	12680 <fputs@plt>
   14db8:	mov	r1, r5
   14dbc:	ldr	r0, [r4]
   14dc0:	bl	14bcc <__assert_fail@plt+0x24e0>
   14dc4:	ldr	r1, [r4]
   14dc8:	mov	r0, #10
   14dcc:	pop	{r4, r5, r6, lr}
   14dd0:	b	1256c <fputc@plt>
   14dd4:	andeq	r0, r5, r4, lsl #29
   14dd8:	andeq	r0, r5, r0, ror #10
   14ddc:	andeq	sl, r3, fp, lsr #6
   14de0:	push	{r4, lr}
   14de4:	mov	ip, #1
   14de8:	ldr	lr, [pc, #336]	; 14f40 <__assert_fail@plt+0x2854>
   14dec:	ldr	r4, [pc, #336]	; 14f44 <__assert_fail@plt+0x2858>
   14df0:	cmp	r0, #0
   14df4:	bne	14dfc <__assert_fail@plt+0x2710>
   14df8:	pop	{r4, pc}
   14dfc:	ldr	r3, [r0]
   14e00:	cmp	r3, #0
   14e04:	bne	14e1c <__assert_fail@plt+0x2730>
   14e08:	ldr	r3, [pc, #312]	; 14f48 <__assert_fail@plt+0x285c>
   14e0c:	ldr	r2, [pc, #312]	; 14f4c <__assert_fail@plt+0x2860>
   14e10:	ldr	r1, [pc, #312]	; 14f50 <__assert_fail@plt+0x2864>
   14e14:	ldr	r0, [pc, #312]	; 14f54 <__assert_fail@plt+0x2868>
   14e18:	bl	126ec <__assert_fail@plt>
   14e1c:	ldr	r2, [r0, #172]	; 0xac
   14e20:	cmp	r2, #0
   14e24:	ldreq	r3, [pc, #284]	; 14f48 <__assert_fail@plt+0x285c>
   14e28:	ldreq	r2, [pc, #296]	; 14f58 <__assert_fail@plt+0x286c>
   14e2c:	ldreq	r1, [pc, #284]	; 14f50 <__assert_fail@plt+0x2864>
   14e30:	ldreq	r0, [pc, #292]	; 14f5c <__assert_fail@plt+0x2870>
   14e34:	beq	14e18 <__assert_fail@plt+0x272c>
   14e38:	ldr	r1, [r2, #12]
   14e3c:	cmp	r3, r1
   14e40:	cmpne	r1, #0
   14e44:	ldrne	r3, [pc, #252]	; 14f48 <__assert_fail@plt+0x285c>
   14e48:	ldrne	r2, [pc, #272]	; 14f60 <__assert_fail@plt+0x2874>
   14e4c:	ldrne	r1, [pc, #252]	; 14f50 <__assert_fail@plt+0x2864>
   14e50:	ldrne	r0, [pc, #268]	; 14f64 <__assert_fail@plt+0x2878>
   14e54:	bne	14e18 <__assert_fail@plt+0x272c>
   14e58:	ldr	r2, [r2]
   14e5c:	cmp	r2, #6
   14e60:	bhi	14e80 <__assert_fail@plt+0x2794>
   14e64:	lsl	r1, ip, r2
   14e68:	tst	r1, #58	; 0x3a
   14e6c:	bne	14f04 <__assert_fail@plt+0x2818>
   14e70:	tst	r1, #5
   14e74:	bne	14e88 <__assert_fail@plt+0x279c>
   14e78:	tst	r1, #64	; 0x40
   14e7c:	bne	14ebc <__assert_fail@plt+0x27d0>
   14e80:	ldr	r0, [r0, #152]	; 0x98
   14e84:	b	14df0 <__assert_fail@plt+0x2704>
   14e88:	cmp	r2, #0
   14e8c:	ldreq	r3, [pc, #180]	; 14f48 <__assert_fail@plt+0x285c>
   14e90:	ldreq	r2, [pc, #208]	; 14f68 <__assert_fail@plt+0x287c>
   14e94:	ldreq	r1, [pc, #180]	; 14f50 <__assert_fail@plt+0x2864>
   14e98:	ldreq	r0, [pc, #204]	; 14f6c <__assert_fail@plt+0x2880>
   14e9c:	beq	14e18 <__assert_fail@plt+0x272c>
   14ea0:	cmp	r2, #2
   14ea4:	bne	14e80 <__assert_fail@plt+0x2794>
   14ea8:	ldr	r3, [pc, #152]	; 14f48 <__assert_fail@plt+0x285c>
   14eac:	ldr	r2, [pc, #188]	; 14f70 <__assert_fail@plt+0x2884>
   14eb0:	ldr	r1, [pc, #152]	; 14f50 <__assert_fail@plt+0x2864>
   14eb4:	ldr	r0, [pc, #184]	; 14f74 <__assert_fail@plt+0x2888>
   14eb8:	b	14e18 <__assert_fail@plt+0x272c>
   14ebc:	ldrb	r2, [r0, #16]
   14ec0:	cmp	r2, #0
   14ec4:	ldreq	r3, [pc, #124]	; 14f48 <__assert_fail@plt+0x285c>
   14ec8:	ldreq	r2, [pc, #168]	; 14f78 <__assert_fail@plt+0x288c>
   14ecc:	ldreq	r1, [pc, #124]	; 14f50 <__assert_fail@plt+0x2864>
   14ed0:	ldreq	r0, [pc, #164]	; 14f7c <__assert_fail@plt+0x2890>
   14ed4:	beq	14e18 <__assert_fail@plt+0x272c>
   14ed8:	cmp	r3, lr
   14edc:	cmpne	r3, r4
   14ee0:	beq	14e80 <__assert_fail@plt+0x2794>
   14ee4:	ldrb	r3, [r0, #17]
   14ee8:	cmp	r3, #0
   14eec:	bne	14e80 <__assert_fail@plt+0x2794>
   14ef0:	ldr	r3, [pc, #80]	; 14f48 <__assert_fail@plt+0x285c>
   14ef4:	ldr	r2, [pc, #132]	; 14f80 <__assert_fail@plt+0x2894>
   14ef8:	ldr	r1, [pc, #80]	; 14f50 <__assert_fail@plt+0x2864>
   14efc:	ldr	r0, [pc, #128]	; 14f84 <__assert_fail@plt+0x2898>
   14f00:	b	14e18 <__assert_fail@plt+0x272c>
   14f04:	ldrb	r3, [r0, #17]
   14f08:	cmp	r3, #0
   14f0c:	ldrne	r3, [pc, #52]	; 14f48 <__assert_fail@plt+0x285c>
   14f10:	ldrne	r2, [pc, #112]	; 14f88 <__assert_fail@plt+0x289c>
   14f14:	ldrne	r1, [pc, #52]	; 14f50 <__assert_fail@plt+0x2864>
   14f18:	ldrne	r0, [pc, #108]	; 14f8c <__assert_fail@plt+0x28a0>
   14f1c:	bne	14e18 <__assert_fail@plt+0x272c>
   14f20:	ldrb	r3, [r0, #16]
   14f24:	cmp	r3, #0
   14f28:	beq	14e80 <__assert_fail@plt+0x2794>
   14f2c:	ldr	r3, [pc, #20]	; 14f48 <__assert_fail@plt+0x285c>
   14f30:	ldr	r2, [pc, #88]	; 14f90 <__assert_fail@plt+0x28a4>
   14f34:	ldr	r1, [pc, #20]	; 14f50 <__assert_fail@plt+0x2864>
   14f38:	ldr	r0, [pc, #84]	; 14f94 <__assert_fail@plt+0x28a8>
   14f3c:	b	14e18 <__assert_fail@plt+0x272c>
   14f40:	andeq	r3, r1, r8, lsr r7
   14f44:	andeq	r3, r1, r0, asr r7
   14f48:	andeq	sl, r3, r3, lsr #3
   14f4c:	andeq	r0, r0, lr, lsl r5
   14f50:			; <UNDEFINED> instruction: 0x0003a1b5
   14f54:	andeq	sl, r3, r6, asr r3
   14f58:	andeq	r0, r0, r1, lsr #10
   14f5c:	andeq	sl, r3, fp, ror #6
   14f60:	andeq	r0, r0, sl, lsr #10
   14f64:	andeq	sl, r3, r3, lsl #7
   14f68:	andeq	r0, r0, sl, lsr r5
   14f6c:	andeq	sl, r3, lr, lsr #7
   14f70:	andeq	r0, r0, fp, lsr r5
   14f74:	ldrdeq	sl, [r3], -r2
   14f78:	andeq	r0, r0, pc, lsr r5
   14f7c:	andeq	sl, r3, r7, lsl r4
   14f80:	andeq	r0, r0, r5, asr #10
   14f84:	andeq	sl, r3, r2, lsl #8
   14f88:	andeq	r0, r0, r3, asr r5
   14f8c:	andeq	sl, r3, r1, lsl #8
   14f90:	andeq	r0, r0, r4, asr r5
   14f94:	andeq	sl, r3, r6, lsl r4
   14f98:	push	{r4, r5, r6, r7, r8, lr}
   14f9c:	mov	r6, r0
   14fa0:	mov	r0, #8
   14fa4:	mov	r7, r1
   14fa8:	mov	r8, r2
   14fac:	bl	28d44 <__assert_fail@plt+0x16658>
   14fb0:	mov	r4, #0
   14fb4:	mov	r2, r4
   14fb8:	mov	r1, r8
   14fbc:	mov	r5, r0
   14fc0:	str	r0, [r6]
   14fc4:	str	r4, [r0, #4]
   14fc8:	mov	r0, r7
   14fcc:	bl	23648 <__assert_fail@plt+0x10f5c>
   14fd0:	ldr	r3, [r6]
   14fd4:	str	r0, [r5]
   14fd8:	ldr	r0, [r3]
   14fdc:	cmp	r0, r4
   14fe0:	blt	14ff4 <__assert_fail@plt+0x2908>
   14fe4:	mov	r1, #1
   14fe8:	bl	1fb18 <__assert_fail@plt+0xd42c>
   14fec:	mov	r0, #1
   14ff0:	pop	{r4, r5, r6, r7, r8, pc}
   14ff4:	mov	r0, r4
   14ff8:	pop	{r4, r5, r6, r7, r8, pc}
   14ffc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15000:	mov	r6, r0
   15004:	sub	sp, sp, #44	; 0x2c
   15008:	ldr	r0, [r2]
   1500c:	mov	r4, r2
   15010:	bl	180c4 <__assert_fail@plt+0x59d8>
   15014:	subs	r8, r0, #0
   15018:	beq	1516c <__assert_fail@plt+0x2a80>
   1501c:	ldr	r3, [r4, #116]	; 0x74
   15020:	ldr	r5, [pc, #584]	; 15270 <__assert_fail@plt+0x2b84>
   15024:	cmp	r3, #0
   15028:	bne	150cc <__assert_fail@plt+0x29e0>
   1502c:	ldr	r9, [r5, #12]
   15030:	mov	r1, #47	; 0x2f
   15034:	mov	r0, r9
   15038:	bl	123c8 <strchr@plt>
   1503c:	add	r7, r4, #144	; 0x90
   15040:	cmp	r0, #0
   15044:	beq	150b4 <__assert_fail@plt+0x29c8>
   15048:	mov	r0, r9
   1504c:	bl	1fdb8 <__assert_fail@plt+0xd6cc>
   15050:	ldr	r1, [r5, #16]
   15054:	mov	r9, r0
   15058:	mov	r2, r0
   1505c:	mov	r0, r7
   15060:	bl	14f98 <__assert_fail@plt+0x28ac>
   15064:	mov	r7, r0
   15068:	mov	r0, r9
   1506c:	bl	2a01c <__assert_fail@plt+0x17930>
   15070:	cmp	r7, #0
   15074:	bne	150cc <__assert_fail@plt+0x29e0>
   15078:	bl	12404 <__errno_location@plt>
   1507c:	mov	r2, #5
   15080:	ldr	r1, [pc, #492]	; 15274 <__assert_fail@plt+0x2b88>
   15084:	ldr	r4, [r0]
   15088:	mov	r0, r7
   1508c:	bl	1217c <dcgettext@plt>
   15090:	mov	r1, r6
   15094:	mov	r5, r0
   15098:	mov	r0, r7
   1509c:	bl	180e8 <__assert_fail@plt+0x59fc>
   150a0:	mov	r2, r5
   150a4:	mov	r1, r4
   150a8:	mov	r3, r0
   150ac:	mov	r0, #1
   150b0:	bl	122c0 <error@plt>
   150b4:	mov	r0, r7
   150b8:	ldr	r2, [pc, #440]	; 15278 <__assert_fail@plt+0x2b8c>
   150bc:	ldr	r1, [r5, #16]
   150c0:	bl	14f98 <__assert_fail@plt+0x28ac>
   150c4:	mov	r7, r0
   150c8:	b	15070 <__assert_fail@plt+0x2984>
   150cc:	ldr	r0, [r5, #12]
   150d0:	bl	1fd10 <__assert_fail@plt+0xd624>
   150d4:	ldrb	r3, [r0]
   150d8:	mov	r5, r0
   150dc:	mov	r6, r0
   150e0:	cmp	r3, #47	; 0x2f
   150e4:	movne	r9, #2
   150e8:	ldrne	fp, [pc, #396]	; 1527c <__assert_fail@plt+0x2b90>
   150ec:	moveq	r9, #0
   150f0:	moveq	fp, r9
   150f4:	ldrb	r7, [r4, #40]	; 0x28
   150f8:	cmp	r7, #0
   150fc:	bne	151a0 <__assert_fail@plt+0x2ab4>
   15100:	add	r3, r4, #88	; 0x58
   15104:	mov	sl, r7
   15108:	str	r3, [sp, #24]
   1510c:	add	r3, r4, #44	; 0x2c
   15110:	str	r3, [sp, #28]
   15114:	ldr	r3, [r4, #136]	; 0x88
   15118:	cmp	sl, r3
   1511c:	blt	15204 <__assert_fail@plt+0x2b18>
   15120:	add	r1, r4, #88	; 0x58
   15124:	add	r0, r4, #44	; 0x2c
   15128:	bl	1ddf8 <__assert_fail@plt+0xb70c>
   1512c:	ldr	r3, [r4, #148]	; 0x94
   15130:	tst	r3, #127	; 0x7f
   15134:	bne	15148 <__assert_fail@plt+0x2a5c>
   15138:	asr	r3, r3, #8
   1513c:	tst	r3, #255	; 0xff
   15140:	moveq	r7, #1
   15144:	movne	r7, #0
   15148:	cmp	r8, #0
   1514c:	beq	15264 <__assert_fail@plt+0x2b78>
   15150:	ldr	r0, [r4, #144]	; 0x90
   15154:	bl	281e0 <__assert_fail@plt+0x15af4>
   15158:	cmp	r5, #0
   1515c:	bne	15258 <__assert_fail@plt+0x2b6c>
   15160:	mov	r0, r7
   15164:	add	sp, sp, #44	; 0x2c
   15168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1516c:	ldr	r3, [pc, #268]	; 15280 <__assert_fail@plt+0x2b94>
   15170:	ldr	r2, [r4, #144]	; 0x90
   15174:	ldr	r3, [r3]
   15178:	cmp	r2, r3
   1517c:	moveq	r9, r8
   15180:	moveq	fp, r8
   15184:	moveq	r5, r8
   15188:	beq	150f4 <__assert_fail@plt+0x2a08>
   1518c:	ldr	r3, [pc, #240]	; 15284 <__assert_fail@plt+0x2b98>
   15190:	ldr	r1, [pc, #240]	; 15288 <__assert_fail@plt+0x2b9c>
   15194:	ldr	r0, [pc, #240]	; 1528c <__assert_fail@plt+0x2ba0>
   15198:	mov	r2, #148	; 0x94
   1519c:	bl	126ec <__assert_fail@plt>
   151a0:	mov	r0, r6
   151a4:	bl	123bc <strlen@plt>
   151a8:	mov	r3, #0
   151ac:	str	r3, [sp, #8]
   151b0:	str	r9, [sp, #4]
   151b4:	str	fp, [sp]
   151b8:	mov	r2, r6
   151bc:	add	r1, r4, #88	; 0x58
   151c0:	add	r3, r0, #1
   151c4:	add	r0, r4, #44	; 0x2c
   151c8:	bl	1d9f8 <__assert_fail@plt+0xb30c>
   151cc:	ldr	r3, [r4, #116]	; 0x74
   151d0:	cmp	r3, #0
   151d4:	ldrne	r3, [pc, #148]	; 15270 <__assert_fail@plt+0x2b84>
   151d8:	movne	r2, #1
   151dc:	strbne	r2, [r3, #32]
   151e0:	cmp	r5, #0
   151e4:	beq	15160 <__assert_fail@plt+0x2a74>
   151e8:	cmp	r8, #0
   151ec:	bne	15258 <__assert_fail@plt+0x2b6c>
   151f0:	ldr	r3, [pc, #140]	; 15284 <__assert_fail@plt+0x2b98>
   151f4:	mov	r2, #208	; 0xd0
   151f8:	ldr	r1, [pc, #136]	; 15288 <__assert_fail@plt+0x2b9c>
   151fc:	ldr	r0, [pc, #140]	; 15290 <__assert_fail@plt+0x2ba4>
   15200:	b	1519c <__assert_fail@plt+0x2ab0>
   15204:	ldr	r3, [r4, #132]	; 0x84
   15208:	ldr	r2, [r3, sl, lsl #2]
   1520c:	add	sl, sl, #1
   15210:	mov	r0, r2
   15214:	str	r2, [sp, #36]	; 0x24
   15218:	bl	123bc <strlen@plt>
   1521c:	str	r0, [sp, #32]
   15220:	mov	r0, r6
   15224:	bl	123bc <strlen@plt>
   15228:	mov	r3, #0
   1522c:	str	r3, [sp, #16]
   15230:	str	r6, [sp, #8]
   15234:	str	r9, [sp, #4]
   15238:	str	fp, [sp]
   1523c:	ldr	r3, [sp, #32]
   15240:	ldr	r2, [sp, #36]	; 0x24
   15244:	ldr	r1, [sp, #24]
   15248:	str	r0, [sp, #12]
   1524c:	ldr	r0, [sp, #28]
   15250:	bl	1dc44 <__assert_fail@plt+0xb558>
   15254:	b	15114 <__assert_fail@plt+0x2a28>
   15258:	mov	r0, r5
   1525c:	bl	2a01c <__assert_fail@plt+0x17930>
   15260:	b	15160 <__assert_fail@plt+0x2a74>
   15264:	cmp	r5, #0
   15268:	beq	15160 <__assert_fail@plt+0x2a74>
   1526c:	b	151f0 <__assert_fail@plt+0x2b04>
   15270:	andeq	r0, r5, r8, asr lr
   15274:	andeq	sl, r3, r0, asr #8
   15278:	andeq	sl, r3, r1, asr #14
   1527c:	andeq	sl, r3, sp, lsr r4
   15280:	andeq	r0, r5, r0, lsl #11
   15284:	andeq	sl, r3, r7, lsr #8
   15288:	andeq	sl, r3, r1, lsl #9
   1528c:	andeq	sl, r3, r8, lsl #9
   15290:	andeq	sl, r3, r9, lsr #9
   15294:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15298:	mov	r7, r3
   1529c:	ldr	r9, [pc, #968]	; 1566c <__assert_fail@plt+0x2f80>
   152a0:	sub	sp, sp, #28
   152a4:	mov	r4, r1
   152a8:	ldr	r3, [r9, #44]	; 0x2c
   152ac:	ldr	r8, [pc, #956]	; 15670 <__assert_fail@plt+0x2f84>
   152b0:	tst	r3, #32
   152b4:	beq	152fc <__assert_fail@plt+0x2c10>
   152b8:	ldr	r2, [r1, #48]	; 0x30
   152bc:	mov	r3, #0
   152c0:	subs	r2, r2, #1
   152c4:	sbc	r3, r3, #0
   152c8:	ldr	r1, [pc, #932]	; 15674 <__assert_fail@plt+0x2f88>
   152cc:	ldr	r0, [r8]
   152d0:	bl	123f8 <fprintf@plt>
   152d4:	mov	r5, #0
   152d8:	ldr	r6, [pc, #920]	; 15678 <__assert_fail@plt+0x2f8c>
   152dc:	mov	sl, r5
   152e0:	ldr	r3, [r4, #48]	; 0x30
   152e4:	sub	r3, r3, #1
   152e8:	cmp	r3, r5
   152ec:	bhi	15368 <__assert_fail@plt+0x2c7c>
   152f0:	ldr	r1, [r8]
   152f4:	mov	r0, #10
   152f8:	bl	1256c <fputc@plt>
   152fc:	ldr	r3, [pc, #888]	; 1567c <__assert_fail@plt+0x2f90>
   15300:	ldr	r0, [r3]
   15304:	bl	29fcc <__assert_fail@plt+0x178e0>
   15308:	ldr	r0, [r8]
   1530c:	bl	29fcc <__assert_fail@plt+0x178e0>
   15310:	ldr	r3, [pc, #872]	; 15680 <__assert_fail@plt+0x2f94>
   15314:	ldr	r2, [r3]
   15318:	cmp	r2, #0
   1531c:	beq	15330 <__assert_fail@plt+0x2c44>
   15320:	mov	r1, #0
   15324:	mov	r0, #17
   15328:	str	r1, [r3]
   1532c:	bl	12140 <signal@plt>
   15330:	bl	12524 <fork@plt>
   15334:	cmn	r0, #1
   15338:	mov	r5, r0
   1533c:	bne	15394 <__assert_fail@plt+0x2ca8>
   15340:	bl	12404 <__errno_location@plt>
   15344:	mov	r2, #5
   15348:	ldr	r1, [pc, #820]	; 15684 <__assert_fail@plt+0x2f98>
   1534c:	ldr	r4, [r0]
   15350:	mov	r0, #0
   15354:	bl	1217c <dcgettext@plt>
   15358:	mov	r1, r4
   1535c:	mov	r2, r0
   15360:	mov	r0, #1
   15364:	bl	122c0 <error@plt>
   15368:	ldr	r3, [r4, #52]	; 0x34
   1536c:	mov	r0, sl
   15370:	ldr	fp, [r8]
   15374:	ldr	r1, [r3, r5, lsl #2]
   15378:	bl	180e8 <__assert_fail@plt+0x59fc>
   1537c:	mov	r1, r6
   15380:	add	r5, r5, #1
   15384:	mov	r2, r0
   15388:	mov	r0, fp
   1538c:	bl	123f8 <fprintf@plt>
   15390:	b	152e0 <__assert_fail@plt+0x2bf4>
   15394:	cmp	r0, #0
   15398:	bne	15598 <__assert_fail@plt+0x2eac>
   1539c:	ldr	r6, [r4, #104]	; 0x68
   153a0:	cmp	r6, #0
   153a4:	bne	153bc <__assert_fail@plt+0x2cd0>
   153a8:	ldr	r3, [pc, #728]	; 15688 <__assert_fail@plt+0x2f9c>
   153ac:	ldr	r2, [pc, #728]	; 1568c <__assert_fail@plt+0x2fa0>
   153b0:	ldr	r1, [pc, #728]	; 15690 <__assert_fail@plt+0x2fa4>
   153b4:	ldr	r0, [pc, #728]	; 15694 <__assert_fail@plt+0x2fa8>
   153b8:	bl	126ec <__assert_fail@plt>
   153bc:	ldrb	r4, [r4, #100]	; 0x64
   153c0:	cmp	r4, #0
   153c4:	moveq	r4, #1
   153c8:	beq	15424 <__assert_fail@plt+0x2d38>
   153cc:	ldr	r2, [pc, #708]	; 15698 <__assert_fail@plt+0x2fac>
   153d0:	add	r3, sp, #12
   153d4:	ldr	r0, [r2]
   153d8:	ldr	r1, [r2, #4]
   153dc:	ldrh	r2, [r2, #8]
   153e0:	stmia	r3!, {r0, r1}
   153e4:	mov	r0, r5
   153e8:	strh	r2, [r3]
   153ec:	bl	126a4 <close@plt>
   153f0:	cmp	r0, #0
   153f4:	bge	1548c <__assert_fail@plt+0x2da0>
   153f8:	bl	12404 <__errno_location@plt>
   153fc:	mov	r2, #5
   15400:	ldr	r1, [pc, #660]	; 1569c <__assert_fail@plt+0x2fb0>
   15404:	ldr	r4, [r0]
   15408:	mov	r0, r5
   1540c:	bl	1217c <dcgettext@plt>
   15410:	mov	r1, r4
   15414:	mov	r4, r5
   15418:	mov	r2, r0
   1541c:	mov	r0, r5
   15420:	bl	122c0 <error@plt>
   15424:	mov	r0, r6
   15428:	bl	281c4 <__assert_fail@plt+0x15ad8>
   1542c:	cmp	r0, #0
   15430:	beq	154cc <__assert_fail@plt+0x2de0>
   15434:	bl	12404 <__errno_location@plt>
   15438:	mov	r2, #5
   1543c:	ldr	r1, [pc, #604]	; 156a0 <__assert_fail@plt+0x2fb4>
   15440:	ldr	r4, [r0]
   15444:	mov	r0, #0
   15448:	bl	1217c <dcgettext@plt>
   1544c:	ldr	r3, [r6]
   15450:	cmp	r3, #0
   15454:	mov	r2, r0
   15458:	bge	1546c <__assert_fail@plt+0x2d80>
   1545c:	ldr	r1, [r6, #4]
   15460:	cmp	r1, #0
   15464:	ldrne	r3, [pc, #568]	; 156a4 <__assert_fail@plt+0x2fb8>
   15468:	bne	15474 <__assert_fail@plt+0x2d88>
   1546c:	ldr	r3, [pc, #564]	; 156a8 <__assert_fail@plt+0x2fbc>
   15470:	mov	r1, r3
   15474:	str	r1, [sp]
   15478:	mov	r0, #0
   1547c:	mov	r1, r4
   15480:	bl	122c0 <error@plt>
   15484:	mov	r0, #1
   15488:	bl	120ec <_exit@plt>
   1548c:	mov	r1, #131072	; 0x20000
   15490:	add	r0, sp, #12
   15494:	bl	1fe48 <__assert_fail@plt+0xd75c>
   15498:	cmp	r0, #0
   1549c:	bge	15424 <__assert_fail@plt+0x2d38>
   154a0:	bl	12404 <__errno_location@plt>
   154a4:	add	r1, sp, #12
   154a8:	ldr	r8, [r0]
   154ac:	mov	r0, r5
   154b0:	bl	180e8 <__assert_fail@plt+0x59fc>
   154b4:	ldr	r2, [pc, #496]	; 156ac <__assert_fail@plt+0x2fc0>
   154b8:	mov	r1, r8
   154bc:	mov	r3, r0
   154c0:	mov	r0, r5
   154c4:	bl	122c0 <error@plt>
   154c8:	b	15424 <__assert_fail@plt+0x2d38>
   154cc:	cmp	r4, #0
   154d0:	beq	15484 <__assert_fail@plt+0x2d98>
   154d4:	bl	1e934 <__assert_fail@plt+0xc248>
   154d8:	cmp	r0, #0
   154dc:	beq	154e4 <__assert_fail@plt+0x2df8>
   154e0:	bl	1e950 <__assert_fail@plt+0xc264>
   154e4:	mov	r0, r7
   154e8:	bl	1e284 <__assert_fail@plt+0xbb98>
   154ec:	cmp	r0, #0
   154f0:	beq	1552c <__assert_fail@plt+0x2e40>
   154f4:	bl	12404 <__errno_location@plt>
   154f8:	mov	r3, #7
   154fc:	str	r3, [r0]
   15500:	bl	12404 <__errno_location@plt>
   15504:	ldr	r1, [r7]
   15508:	ldr	r4, [r0]
   1550c:	mov	r0, #0
   15510:	bl	180e8 <__assert_fail@plt+0x59fc>
   15514:	ldr	r2, [pc, #400]	; 156ac <__assert_fail@plt+0x2fc0>
   15518:	mov	r1, r4
   1551c:	mov	r3, r0
   15520:	mov	r0, #0
   15524:	bl	122c0 <error@plt>
   15528:	b	15484 <__assert_fail@plt+0x2d98>
   1552c:	mov	r1, r7
   15530:	ldr	r0, [r7]
   15534:	bl	12104 <execvp@plt>
   15538:	b	15500 <__assert_fail@plt+0x2e14>
   1553c:	bl	12404 <__errno_location@plt>
   15540:	ldr	r6, [r0]
   15544:	cmp	r6, #4
   15548:	beq	155a0 <__assert_fail@plt+0x2eb4>
   1554c:	mov	r2, #5
   15550:	ldr	r1, [pc, #344]	; 156b0 <__assert_fail@plt+0x2fc4>
   15554:	mov	r0, #0
   15558:	bl	1217c <dcgettext@plt>
   1555c:	ldr	r1, [r7]
   15560:	mov	r4, r0
   15564:	mov	r0, #0
   15568:	bl	180e8 <__assert_fail@plt+0x59fc>
   1556c:	mov	r2, r4
   15570:	mov	r1, r6
   15574:	mov	r3, r0
   15578:	mov	r0, #0
   1557c:	bl	122c0 <error@plt>
   15580:	ldr	r3, [pc, #300]	; 156b4 <__assert_fail@plt+0x2fc8>
   15584:	mov	r0, #0
   15588:	mov	r2, #1
   1558c:	str	r2, [r3, #28]
   15590:	add	sp, sp, #28
   15594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15598:	add	sl, r4, #108	; 0x6c
   1559c:	mov	fp, #0
   155a0:	mov	r2, fp
   155a4:	mov	r1, sl
   155a8:	mov	r0, r5
   155ac:	bl	12254 <waitpid@plt>
   155b0:	cmn	r0, #1
   155b4:	beq	1553c <__assert_fail@plt+0x2e50>
   155b8:	ldr	r6, [r4, #108]	; 0x6c
   155bc:	and	r3, r6, #127	; 0x7f
   155c0:	add	r3, r3, #1
   155c4:	sxtb	r3, r3
   155c8:	cmp	r3, #1
   155cc:	ble	15638 <__assert_fail@plt+0x2f4c>
   155d0:	mov	r2, #5
   155d4:	ldr	r1, [pc, #220]	; 156b8 <__assert_fail@plt+0x2fcc>
   155d8:	mov	r0, #0
   155dc:	bl	1217c <dcgettext@plt>
   155e0:	ldr	r2, [r7]
   155e4:	ldr	r1, [r9, #72]	; 0x48
   155e8:	mov	r5, r0
   155ec:	mov	r0, #0
   155f0:	bl	27f14 <__assert_fail@plt+0x15828>
   155f4:	ldr	r3, [r4, #108]	; 0x6c
   155f8:	mov	r1, #0
   155fc:	and	r3, r3, #127	; 0x7f
   15600:	str	r3, [sp]
   15604:	mov	r2, r5
   15608:	mov	r3, r0
   1560c:	mov	r0, r1
   15610:	bl	122c0 <error@plt>
   15614:	ldrb	r3, [r4]
   15618:	cmp	r3, #0
   1561c:	bne	15628 <__assert_fail@plt+0x2f3c>
   15620:	mov	r0, #1
   15624:	b	15590 <__assert_fail@plt+0x2ea4>
   15628:	ldr	r3, [pc, #132]	; 156b4 <__assert_fail@plt+0x2fc8>
   1562c:	mov	r0, #1
   15630:	str	r0, [r3, #28]
   15634:	b	15590 <__assert_fail@plt+0x2ea4>
   15638:	ldr	r3, [r9, #44]	; 0x2c
   1563c:	asr	r6, r6, #8
   15640:	tst	r3, #32
   15644:	uxtb	r6, r6
   15648:	beq	15660 <__assert_fail@plt+0x2f74>
   1564c:	mov	r3, r6
   15650:	mov	r2, r5
   15654:	ldr	r1, [pc, #96]	; 156bc <__assert_fail@plt+0x2fd0>
   15658:	ldr	r0, [r8]
   1565c:	bl	123f8 <fprintf@plt>
   15660:	cmp	r6, #0
   15664:	bne	15614 <__assert_fail@plt+0x2f28>
   15668:	b	15620 <__assert_fail@plt+0x2f34>
   1566c:	andeq	r0, r5, r4, lsl #29
   15670:	andeq	r0, r5, r0, ror #10
   15674:	andeq	sl, r3, pc, lsr #9
   15678:	andeq	pc, r3, lr, lsr #9
   1567c:	andeq	r0, r5, ip, ror #10
   15680:	andeq	r0, r5, ip, lsr #5
   15684:	ldrdeq	sl, [r3], -r9
   15688:	andeq	sl, r3, r6, lsr r4
   1568c:	andeq	r0, r0, r1, asr #2
   15690:	andeq	sl, r3, r1, lsl #9
   15694:	andeq	sl, r3, r5, ror #9
   15698:	andeq	sl, r3, r9, lsr #11
   1569c:	andeq	sl, r3, r0, lsl #10
   156a0:	andeq	sl, r3, ip, lsl r5
   156a4:	andeq	ip, r3, r1, asr r7
   156a8:	ldrdeq	fp, [r3], -pc	; <UNPREDICTABLE>
   156ac:	andeq	pc, r3, pc, lsr #9
   156b0:	andeq	sl, r3, fp, lsr r5
   156b4:	andeq	r0, r5, r8, asr lr
   156b8:	andeq	sl, r3, r0, asr r5
   156bc:	andeq	sl, r3, fp, ror #10
   156c0:	cmp	r0, #0
   156c4:	bxeq	lr
   156c8:	ldrb	r3, [r0, #16]
   156cc:	cmp	r3, #0
   156d0:	movne	r0, #1
   156d4:	bne	15704 <__assert_fail@plt+0x3018>
   156d8:	push	{r4, lr}
   156dc:	mov	r4, r0
   156e0:	ldr	r0, [r0, #156]	; 0x9c
   156e4:	bl	156c0 <__assert_fail@plt+0x2fd4>
   156e8:	cmp	r0, #0
   156ec:	movne	r0, #1
   156f0:	bne	156fc <__assert_fail@plt+0x3010>
   156f4:	ldr	r0, [r4, #160]	; 0xa0
   156f8:	bl	156c0 <__assert_fail@plt+0x2fd4>
   156fc:	and	r0, r0, #1
   15700:	pop	{r4, pc}
   15704:	and	r0, r0, #1
   15708:	bx	lr
   1570c:	cmp	r0, #0
   15710:	bxeq	lr
   15714:	push	{r4, r5, r6, lr}
   15718:	mov	r4, r0
   1571c:	ldr	r0, [r0, #156]	; 0x9c
   15720:	bl	1570c <__assert_fail@plt+0x3020>
   15724:	mov	r5, r0
   15728:	ldr	r0, [r4, #160]	; 0xa0
   1572c:	bl	1570c <__assert_fail@plt+0x3020>
   15730:	cmp	r5, r0
   15734:	movcc	r5, r0
   15738:	ldr	r0, [r4, #24]
   1573c:	cmp	r5, r0
   15740:	movcs	r0, r5
   15744:	pop	{r4, r5, r6, pc}
   15748:	push	{r4, r5, r6, r7, r8, lr}
   1574c:	ldr	r4, [r0]
   15750:	cmp	r4, #0
   15754:	bne	15778 <__assert_fail@plt+0x308c>
   15758:	ldr	r1, [pc, #580]	; 159a4 <__assert_fail@plt+0x32b8>
   1575c:	mov	r2, #5
   15760:	mov	r0, #0
   15764:	bl	1217c <dcgettext@plt>
   15768:	mov	r1, #0
   1576c:	mov	r2, r0
   15770:	mov	r0, #1
   15774:	bl	122c0 <error@plt>
   15778:	ldr	r3, [r4, #8]
   1577c:	mov	r5, r0
   15780:	mov	r7, r1
   15784:	cmp	r3, #5
   15788:	ldrls	pc, [pc, r3, lsl #2]
   1578c:	b	15930 <__assert_fail@plt+0x3244>
   15790:	andeq	r5, r1, r8, asr r7
   15794:	andeq	r5, r1, r8, lsr #16
   15798:	andeq	r5, r1, r4, lsr r8
   1579c:	andeq	r5, r1, r8, lsr #15
   157a0:	muleq	r1, r8, r8
   157a4:	andeq	r5, r1, r0, asr #15
   157a8:	ldr	r1, [pc, #504]	; 159a8 <__assert_fail@plt+0x32bc>
   157ac:	mov	r2, #5
   157b0:	mov	r0, #0
   157b4:	bl	1217c <dcgettext@plt>
   157b8:	ldr	r3, [r4, #4]
   157bc:	b	15810 <__assert_fail@plt+0x3124>
   157c0:	cmp	r2, #0
   157c4:	mov	r6, r2
   157c8:	ldreq	r1, [pc, #476]	; 159ac <__assert_fail@plt+0x32c0>
   157cc:	moveq	r2, #5
   157d0:	beq	157b0 <__assert_fail@plt+0x30c4>
   157d4:	ldr	r3, [r6, #8]
   157d8:	mov	r2, #5
   157dc:	sub	r3, r3, #2
   157e0:	cmp	r3, #1
   157e4:	ldrb	r4, [r4, #33]	; 0x21
   157e8:	bhi	157f8 <__assert_fail@plt+0x310c>
   157ec:	cmp	r4, #0
   157f0:	ldreq	r1, [pc, #440]	; 159b0 <__assert_fail@plt+0x32c4>
   157f4:	beq	15804 <__assert_fail@plt+0x3118>
   157f8:	cmp	r4, #0
   157fc:	beq	15820 <__assert_fail@plt+0x3134>
   15800:	ldr	r1, [pc, #428]	; 159b4 <__assert_fail@plt+0x32c8>
   15804:	mov	r0, #0
   15808:	bl	1217c <dcgettext@plt>
   1580c:	ldr	r3, [r6, #4]
   15810:	mov	r2, r0
   15814:	mov	r1, #0
   15818:	mov	r0, #1
   1581c:	bl	122c0 <error@plt>
   15820:	ldr	r1, [pc, #400]	; 159b8 <__assert_fail@plt+0x32cc>
   15824:	b	15760 <__assert_fail@plt+0x3074>
   15828:	ldr	r3, [r4, #152]	; 0x98
   1582c:	str	r3, [r5]
   15830:	b	1584c <__assert_fail@plt+0x3160>
   15834:	ldr	r3, [r4, #152]	; 0x98
   15838:	mov	r2, r4
   1583c:	str	r3, [r0]
   15840:	mov	r1, #4
   15844:	bl	15748 <__assert_fail@plt+0x305c>
   15848:	str	r0, [r4, #160]	; 0xa0
   1584c:	ldr	r3, [r5]
   15850:	cmp	r3, #0
   15854:	beq	15890 <__assert_fail@plt+0x31a4>
   15858:	ldr	r2, [r3, #12]
   1585c:	cmp	r2, r7
   15860:	ble	15890 <__assert_fail@plt+0x31a4>
   15864:	ldr	r3, [r3, #8]
   15868:	cmp	r3, #5
   1586c:	beq	15758 <__assert_fail@plt+0x306c>
   15870:	ldr	r2, [r5]
   15874:	cmp	r2, #0
   15878:	beq	15888 <__assert_fail@plt+0x319c>
   1587c:	ldr	r3, [r2, #12]
   15880:	cmp	r7, r3
   15884:	blt	1593c <__assert_fail@plt+0x3250>
   15888:	cmp	r4, #0
   1588c:	beq	15758 <__assert_fail@plt+0x306c>
   15890:	mov	r0, r4
   15894:	pop	{r4, r5, r6, r7, r8, pc}
   15898:	ldr	r3, [r4, #152]	; 0x98
   1589c:	cmp	r3, #0
   158a0:	beq	158b0 <__assert_fail@plt+0x31c4>
   158a4:	ldrb	r6, [r3, #33]	; 0x21
   158a8:	cmp	r6, #0
   158ac:	beq	158bc <__assert_fail@plt+0x31d0>
   158b0:	mov	r2, #5
   158b4:	ldr	r1, [pc, #256]	; 159bc <__assert_fail@plt+0x32d0>
   158b8:	b	157b0 <__assert_fail@plt+0x30c4>
   158bc:	ldr	r2, [r3, #8]
   158c0:	str	r3, [r0]
   158c4:	cmp	r2, #5
   158c8:	bne	158f8 <__assert_fail@plt+0x320c>
   158cc:	ldrb	r4, [r4, #33]	; 0x21
   158d0:	cmp	r4, #0
   158d4:	beq	158f0 <__assert_fail@plt+0x3204>
   158d8:	ldr	r1, [pc, #204]	; 159ac <__assert_fail@plt+0x32c0>
   158dc:	mov	r0, r6
   158e0:	bl	1217c <dcgettext@plt>
   158e4:	ldr	r3, [r5]
   158e8:	ldr	r3, [r3, #4]
   158ec:	b	15810 <__assert_fail@plt+0x3124>
   158f0:	ldr	r1, [pc, #200]	; 159c0 <__assert_fail@plt+0x32d4>
   158f4:	b	15760 <__assert_fail@plt+0x3074>
   158f8:	mov	r2, r4
   158fc:	mov	r1, r6
   15900:	bl	15748 <__assert_fail@plt+0x305c>
   15904:	ldr	r3, [r5]
   15908:	cmp	r3, #0
   1590c:	mov	r4, r0
   15910:	beq	15924 <__assert_fail@plt+0x3238>
   15914:	ldr	r2, [r3, #8]
   15918:	cmp	r2, #5
   1591c:	ldreq	r3, [r3, #152]	; 0x98
   15920:	beq	1582c <__assert_fail@plt+0x3140>
   15924:	mov	r2, #5
   15928:	ldr	r1, [pc, #148]	; 159c4 <__assert_fail@plt+0x32d8>
   1592c:	b	15760 <__assert_fail@plt+0x3074>
   15930:	mov	r2, #5
   15934:	ldr	r1, [pc, #140]	; 159c8 <__assert_fail@plt+0x32dc>
   15938:	b	15760 <__assert_fail@plt+0x3074>
   1593c:	ldr	r3, [r2, #8]
   15940:	cmp	r3, #5
   15944:	ldrls	pc, [pc, r3, lsl #2]
   15948:	b	15988 <__assert_fail@plt+0x329c>
   1594c:	andeq	r5, r1, r8, asr r7
   15950:	andeq	r5, r1, r8, asr r7
   15954:	andeq	r5, r1, r8, asr r7
   15958:	andeq	r5, r1, r4, ror #18
   1595c:	andeq	r5, r1, r8, asr r7
   15960:	andeq	r5, r1, r8, lsl #17
   15964:	str	r4, [r2, #156]	; 0x9c
   15968:	ldr	r4, [r5]
   1596c:	mov	r0, r5
   15970:	ldr	r3, [r4, #152]	; 0x98
   15974:	ldrsh	r1, [r4, #12]
   15978:	str	r3, [r5]
   1597c:	bl	15748 <__assert_fail@plt+0x305c>
   15980:	str	r0, [r4, #160]	; 0xa0
   15984:	b	15870 <__assert_fail@plt+0x3184>
   15988:	mov	r2, #5
   1598c:	ldr	r1, [pc, #56]	; 159cc <__assert_fail@plt+0x32e0>
   15990:	mov	r0, #0
   15994:	bl	1217c <dcgettext@plt>
   15998:	ldr	r3, [r5]
   1599c:	ldr	r3, [r3, #8]
   159a0:	b	15810 <__assert_fail@plt+0x3124>
   159a4:	muleq	r3, r6, r6
   159a8:	andeq	sl, r3, r9, lsr #13
   159ac:	strdeq	sl, [r3], -sl	; <UNPREDICTABLE>
   159b0:	andeq	sl, r3, r3, asr #14
   159b4:	andeq	sl, r3, pc, ror #14
   159b8:	muleq	r3, r1, r7
   159bc:			; <UNDEFINED> instruction: 0x0003a7bb
   159c0:	andeq	sl, r3, r9, lsr #16
   159c4:	andeq	sl, r3, r0, ror #16
   159c8:			; <UNDEFINED> instruction: 0x0003a8b1
   159cc:	ldrdeq	sl, [r3], -r2
   159d0:	ldr	r3, [r0]
   159d4:	push	{r0, r1, r2, lr}
   159d8:	mov	r2, #4
   159dc:	str	r3, [sp]
   159e0:	ldr	r3, [r1]
   159e4:	add	r1, sp, #8
   159e8:	mov	r0, sp
   159ec:	str	r3, [r1, #-4]!
   159f0:	bl	12158 <memcmp@plt>
   159f4:	add	sp, sp, #12
   159f8:	pop	{pc}		; (ldr pc, [sp], #4)
   159fc:	push	{r4, r5, r6, lr}
   15a00:	mov	r5, #0
   15a04:	cmp	r1, r5
   15a08:	mov	r4, r0
   15a0c:	beq	15a30 <__assert_fail@plt+0x3344>
   15a10:	ldr	r3, [r0, #8]
   15a14:	cmp	r3, #3
   15a18:	beq	15a30 <__assert_fail@plt+0x3344>
   15a1c:	ldr	r3, [pc, #76]	; 15a70 <__assert_fail@plt+0x3384>
   15a20:	ldr	r2, [pc, #76]	; 15a74 <__assert_fail@plt+0x3388>
   15a24:	ldr	r1, [pc, #76]	; 15a78 <__assert_fail@plt+0x338c>
   15a28:	ldr	r0, [pc, #76]	; 15a7c <__assert_fail@plt+0x3390>
   15a2c:	bl	126ec <__assert_fail@plt>
   15a30:	ldr	r0, [r4, #156]	; 0x9c
   15a34:	cmp	r0, #0
   15a38:	beq	15a60 <__assert_fail@plt+0x3374>
   15a3c:	ldr	r3, [r0, #8]
   15a40:	cmp	r3, #3
   15a44:	ldrne	r3, [pc, #36]	; 15a70 <__assert_fail@plt+0x3384>
   15a48:	ldrne	r2, [pc, #48]	; 15a80 <__assert_fail@plt+0x3394>
   15a4c:	ldrne	r1, [pc, #36]	; 15a78 <__assert_fail@plt+0x338c>
   15a50:	ldrne	r0, [pc, #44]	; 15a84 <__assert_fail@plt+0x3398>
   15a54:	bne	15a2c <__assert_fail@plt+0x3340>
   15a58:	mov	r1, r5
   15a5c:	bl	159fc <__assert_fail@plt+0x3310>
   15a60:	ldr	r4, [r4, #160]	; 0xa0
   15a64:	cmp	r4, #0
   15a68:	bne	15a30 <__assert_fail@plt+0x3344>
   15a6c:	pop	{r4, r5, r6, pc}
   15a70:			; <UNDEFINED> instruction: 0x0003a5b4
   15a74:	andeq	r0, r0, lr, asr #9
   15a78:	strdeq	sl, [r3], -r8
   15a7c:	strdeq	sl, [r3], -pc	; <UNPREDICTABLE>
   15a80:	ldrdeq	r0, [r0], -r3
   15a84:	andeq	sl, r3, r2, lsl r9
   15a88:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   15a8c:	subs	r4, r0, #0
   15a90:	beq	15b00 <__assert_fail@plt+0x3414>
   15a94:	ldr	r0, [r4, #160]	; 0xa0
   15a98:	bl	15a88 <__assert_fail@plt+0x339c>
   15a9c:	ldr	r0, [r4, #156]	; 0x9c
   15aa0:	bl	15a88 <__assert_fail@plt+0x339c>
   15aa4:	ldrb	r3, [r4, #18]
   15aa8:	cmp	r3, #0
   15aac:	movne	r6, #3
   15ab0:	bne	15ad4 <__assert_fail@plt+0x33e8>
   15ab4:	ldrb	r3, [r4, #20]
   15ab8:	cmp	r3, #0
   15abc:	movne	r6, #1
   15ac0:	bne	15ad4 <__assert_fail@plt+0x33e8>
   15ac4:	ldrb	r3, [r4, #19]
   15ac8:	cmp	r3, #0
   15acc:	movne	r6, #2
   15ad0:	moveq	r6, #0
   15ad4:	ldr	r3, [r4]
   15ad8:	ldr	r2, [pc, #304]	; 15c10 <__assert_fail@plt+0x3524>
   15adc:	ldr	r1, [pc, #304]	; 15c14 <__assert_fail@plt+0x3528>
   15ae0:	cmp	r3, r2
   15ae4:	cmpne	r3, r1
   15ae8:	bne	15b08 <__assert_fail@plt+0x341c>
   15aec:	ldrb	r3, [r4, #40]	; 0x28
   15af0:	cmp	r3, #0
   15af4:	movne	r3, #7
   15af8:	moveq	r3, #8
   15afc:	str	r3, [r4, #24]
   15b00:	add	sp, sp, #16
   15b04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15b08:	ldr	r2, [pc, #264]	; 15c18 <__assert_fail@plt+0x352c>
   15b0c:	cmp	r3, r2
   15b10:	ldreq	r3, [r4, #24]
   15b14:	beq	15bf4 <__assert_fail@plt+0x3508>
   15b18:	ldr	r7, [pc, #252]	; 15c1c <__assert_fail@plt+0x3530>
   15b1c:	ldr	r5, [r7]
   15b20:	cmp	r5, #0
   15b24:	bne	15ba0 <__assert_fail@plt+0x34b4>
   15b28:	ldr	r0, [pc, #240]	; 15c20 <__assert_fail@plt+0x3534>
   15b2c:	ldr	r3, [pc, #240]	; 15c24 <__assert_fail@plt+0x3538>
   15b30:	mov	r2, #8
   15b34:	mov	r1, #59	; 0x3b
   15b38:	ldr	r9, [pc, #224]	; 15c20 <__assert_fail@plt+0x3534>
   15b3c:	bl	125f0 <qsort@plt>
   15b40:	mov	r0, r5
   15b44:	add	r8, r0, #8
   15b48:	add	r5, r9, r0
   15b4c:	add	sl, r9, r8
   15b50:	mov	r1, r5
   15b54:	mov	r0, sl
   15b58:	bl	159d0 <__assert_fail@plt+0x32e4>
   15b5c:	cmp	r0, #0
   15b60:	blt	15c00 <__assert_fail@plt+0x3514>
   15b64:	mov	r1, sl
   15b68:	mov	r0, r5
   15b6c:	bl	159d0 <__assert_fail@plt+0x32e4>
   15b70:	cmp	r0, #0
   15b74:	ble	15b8c <__assert_fail@plt+0x34a0>
   15b78:	ldr	r3, [pc, #168]	; 15c28 <__assert_fail@plt+0x353c>
   15b7c:	ldr	r2, [pc, #168]	; 15c2c <__assert_fail@plt+0x3540>
   15b80:	ldr	r1, [pc, #168]	; 15c30 <__assert_fail@plt+0x3544>
   15b84:	ldr	r0, [pc, #168]	; 15c34 <__assert_fail@plt+0x3548>
   15b88:	bl	126ec <__assert_fail@plt>
   15b8c:	cmp	r8, #464	; 0x1d0
   15b90:	mov	r0, r8
   15b94:	bne	15b44 <__assert_fail@plt+0x3458>
   15b98:	mov	r3, #1
   15b9c:	str	r3, [r7]
   15ba0:	ldr	r3, [r4]
   15ba4:	add	r0, sp, #16
   15ba8:	mov	r2, #59	; 0x3b
   15bac:	str	r3, [r0, #-8]!
   15bb0:	ldr	r3, [pc, #108]	; 15c24 <__assert_fail@plt+0x3538>
   15bb4:	ldr	r1, [pc, #100]	; 15c20 <__assert_fail@plt+0x3534>
   15bb8:	str	r3, [sp]
   15bbc:	mov	r3, #8
   15bc0:	bl	12440 <bsearch@plt>
   15bc4:	subs	r5, r0, #0
   15bc8:	ldrne	r3, [r5, #4]
   15bcc:	bne	15bf4 <__assert_fail@plt+0x3508>
   15bd0:	mov	r2, #5
   15bd4:	ldr	r1, [pc, #92]	; 15c38 <__assert_fail@plt+0x354c>
   15bd8:	bl	1217c <dcgettext@plt>
   15bdc:	ldr	r3, [r4, #4]
   15be0:	mov	r1, r5
   15be4:	mov	r2, r0
   15be8:	mov	r0, r5
   15bec:	bl	122c0 <error@plt>
   15bf0:	mov	r3, #10
   15bf4:	cmp	r6, r3
   15bf8:	movcs	r3, r6
   15bfc:	b	15afc <__assert_fail@plt+0x3410>
   15c00:	ldr	r2, [pc, #52]	; 15c3c <__assert_fail@plt+0x3550>
   15c04:	mov	r1, #0
   15c08:	mov	r0, #1
   15c0c:	bl	122c0 <error@plt>
   15c10:	strdeq	r3, [r1], -ip
   15c14:	andeq	r3, r1, r0, lsl #30
   15c18:	andeq	r9, r1, ip, ror #13
   15c1c:	andeq	r0, r5, r4, lsl #11
   15c20:			; <UNDEFINED> instruction: 0x000502b0
   15c24:	ldrdeq	r5, [r1], -r0
   15c28:	andeq	sl, r3, r8, asr #11
   15c2c:	strdeq	r0, [r0], -r5
   15c30:	strdeq	sl, [r3], -r8
   15c34:	andeq	sl, r3, r0, lsr r9
   15c38:	andeq	sl, r3, ip, lsr r9
   15c3c:	andeq	sl, r3, ip, lsr #19
   15c40:	push	{r4, r5, r6, lr}
   15c44:	mov	r5, r0
   15c48:	mov	r0, #176	; 0xb0
   15c4c:	mov	r4, r1
   15c50:	mov	r6, r2
   15c54:	bl	29124 <__assert_fail@plt+0x16a38>
   15c58:	mov	r3, #3
   15c5c:	cmp	r4, #2
   15c60:	str	r3, [r0, #8]
   15c64:	mov	r3, #0
   15c68:	str	r4, [r0, #12]
   15c6c:	str	r3, [r0, #24]
   15c70:	beq	15ca8 <__assert_fail@plt+0x35bc>
   15c74:	cmp	r4, #3
   15c78:	beq	15ce8 <__assert_fail@plt+0x35fc>
   15c7c:	cmp	r4, #1
   15c80:	bne	15c9c <__assert_fail@plt+0x35b0>
   15c84:	ldr	r3, [pc, #116]	; 15d00 <__assert_fail@plt+0x3614>
   15c88:	str	r3, [r0]
   15c8c:	ldr	r3, [pc, #112]	; 15d04 <__assert_fail@plt+0x3618>
   15c90:	str	r3, [r0, #4]
   15c94:	mov	r3, #1065353216	; 0x3f800000
   15c98:	str	r3, [r0, #28]
   15c9c:	str	r5, [r0, #160]	; 0xa0
   15ca0:	str	r0, [r6]
   15ca4:	pop	{r4, r5, r6, pc}
   15ca8:	ldr	r3, [pc, #88]	; 15d08 <__assert_fail@plt+0x361c>
   15cac:	str	r3, [r0]
   15cb0:	ldr	r3, [pc, #84]	; 15d0c <__assert_fail@plt+0x3620>
   15cb4:	vldr	s15, [r5, #28]
   15cb8:	vldr	s14, [pc, #56]	; 15cf8 <__assert_fail@plt+0x360c>
   15cbc:	str	r3, [r0, #4]
   15cc0:	vcmpe.f32	s15, s14
   15cc4:	vmrs	APSR_nzcv, fpscr
   15cc8:	vmovgt.f32	s15, s14
   15ccc:	bgt	15ce0 <__assert_fail@plt+0x35f4>
   15cd0:	vldr	s14, [pc, #36]	; 15cfc <__assert_fail@plt+0x3610>
   15cd4:	vcmp.f32	s15, s14
   15cd8:	vmrs	APSR_nzcv, fpscr
   15cdc:	vmovmi.f32	s15, s14
   15ce0:	vstr	s15, [r0, #28]
   15ce4:	b	15c9c <__assert_fail@plt+0x35b0>
   15ce8:	ldr	r3, [pc, #32]	; 15d10 <__assert_fail@plt+0x3624>
   15cec:	str	r3, [r0]
   15cf0:	ldr	r3, [pc, #28]	; 15d14 <__assert_fail@plt+0x3628>
   15cf4:	b	15cb4 <__assert_fail@plt+0x35c8>
   15cf8:	svccc	0x00800000
   15cfc:	andeq	r0, r0, r0
   15d00:	ldrdeq	r3, [r1], -r8
   15d04:	ldrdeq	sl, [r3], -r0
   15d08:	andeq	r3, r1, r4, lsl r9
   15d0c:	ldrdeq	sl, [r3], -r2
   15d10:	andeq	r3, r1, r4, asr #15
   15d14:	ldrdeq	sl, [r3], -r5
   15d18:	push	{r4, r5, r6, r7, r8, lr}
   15d1c:	cmp	r1, #0
   15d20:	ldr	r4, [pc, #108]	; 15d94 <__assert_fail@plt+0x36a8>
   15d24:	movne	r6, #16
   15d28:	moveq	r6, #0
   15d2c:	ldr	r3, [r4, #4]
   15d30:	cmp	r3, #0
   15d34:	movne	r7, r0
   15d38:	movne	r5, #0
   15d3c:	bne	15d78 <__assert_fail@plt+0x368c>
   15d40:	mov	r2, r6
   15d44:	ldr	r1, [pc, #76]	; 15d98 <__assert_fail@plt+0x36ac>
   15d48:	bl	122e4 <fnmatch@plt>
   15d4c:	clz	r0, r0
   15d50:	lsr	r0, r0, #5
   15d54:	pop	{r4, r5, r6, r7, r8, pc}
   15d58:	ldr	r3, [r4, #8]
   15d5c:	mov	r2, r6
   15d60:	mov	r0, r7
   15d64:	ldr	r1, [r3, r5, lsl #2]
   15d68:	bl	122e4 <fnmatch@plt>
   15d6c:	cmp	r0, #0
   15d70:	beq	15d8c <__assert_fail@plt+0x36a0>
   15d74:	add	r5, r5, #1
   15d78:	ldr	r3, [r4, #4]
   15d7c:	cmp	r5, r3
   15d80:	bcc	15d58 <__assert_fail@plt+0x366c>
   15d84:	mov	r0, #0
   15d88:	pop	{r4, r5, r6, r7, r8, pc}
   15d8c:	mov	r0, #1
   15d90:	pop	{r4, r5, r6, r7, r8, pc}
   15d94:	andeq	r0, r5, r4, lsl #11
   15d98:	andeq	sl, r3, r1, asr #14
   15d9c:	ldr	r3, [r1, #36]	; 0x24
   15da0:	mov	r2, r1
   15da4:	cmp	r3, #0
   15da8:	beq	15db8 <__assert_fail@plt+0x36cc>
   15dac:	ldr	r2, [r1, #4]
   15db0:	ldr	r1, [pc, #12]	; 15dc4 <__assert_fail@plt+0x36d8>
   15db4:	b	123f8 <fprintf@plt>
   15db8:	mov	r1, r0
   15dbc:	ldr	r0, [r2, #4]
   15dc0:	b	12680 <fputs@plt>
   15dc4:	ldrdeq	sl, [r3], -r8
   15dc8:	ldr	r3, [pc, #4]	; 15dd4 <__assert_fail@plt+0x36e8>
   15dcc:	ldr	r0, [r3, #12]
   15dd0:	bx	lr
   15dd4:	andeq	r0, r5, r4, lsl #11
   15dd8:	push	{r4, lr}
   15ddc:	subs	r4, r0, #0
   15de0:	bne	15df8 <__assert_fail@plt+0x370c>
   15de4:	ldr	r3, [pc, #524]	; 15ff8 <__assert_fail@plt+0x390c>
   15de8:	ldr	r2, [pc, #524]	; 15ffc <__assert_fail@plt+0x3910>
   15dec:	ldr	r1, [pc, #524]	; 16000 <__assert_fail@plt+0x3914>
   15df0:	ldr	r0, [pc, #524]	; 16004 <__assert_fail@plt+0x3918>
   15df4:	bl	126ec <__assert_fail@plt>
   15df8:	ldr	r0, [r4, #160]	; 0xa0
   15dfc:	cmp	r0, #0
   15e00:	beq	15e08 <__assert_fail@plt+0x371c>
   15e04:	bl	15dd8 <__assert_fail@plt+0x36ec>
   15e08:	ldr	r0, [r4, #156]	; 0x9c
   15e0c:	cmp	r0, #0
   15e10:	beq	15e18 <__assert_fail@plt+0x372c>
   15e14:	bl	15dd8 <__assert_fail@plt+0x36ec>
   15e18:	ldr	r3, [r4, #8]
   15e1c:	cmp	r3, #5
   15e20:	ldreq	r3, [pc, #464]	; 15ff8 <__assert_fail@plt+0x390c>
   15e24:	ldreq	r2, [pc, #476]	; 16008 <__assert_fail@plt+0x391c>
   15e28:	ldreq	r1, [pc, #464]	; 16000 <__assert_fail@plt+0x3914>
   15e2c:	ldreq	r0, [pc, #472]	; 1600c <__assert_fail@plt+0x3920>
   15e30:	beq	15df4 <__assert_fail@plt+0x3708>
   15e34:	cmp	r3, #4
   15e38:	ldreq	r3, [pc, #440]	; 15ff8 <__assert_fail@plt+0x390c>
   15e3c:	ldreq	r2, [pc, #460]	; 16010 <__assert_fail@plt+0x3924>
   15e40:	ldreq	r1, [pc, #440]	; 16000 <__assert_fail@plt+0x3914>
   15e44:	ldreq	r0, [pc, #456]	; 16014 <__assert_fail@plt+0x3928>
   15e48:	beq	15df4 <__assert_fail@plt+0x3708>
   15e4c:	cmp	r3, #3
   15e50:	ldrls	pc, [pc, r3, lsl #2]
   15e54:	b	15fe4 <__assert_fail@plt+0x38f8>
   15e58:	andeq	r5, r1, r8, ror #28
   15e5c:			; <UNDEFINED> instruction: 0x00015eb0
   15e60:	ldrdeq	r5, [r1], -ip
   15e64:	andeq	r5, r1, r8, lsr #30
   15e68:	ldr	r3, [r4, #160]	; 0xa0
   15e6c:	cmp	r3, #0
   15e70:	beq	15e88 <__assert_fail@plt+0x379c>
   15e74:	ldr	r3, [pc, #380]	; 15ff8 <__assert_fail@plt+0x390c>
   15e78:	ldr	r2, [pc, #408]	; 16018 <__assert_fail@plt+0x392c>
   15e7c:	ldr	r1, [pc, #380]	; 16000 <__assert_fail@plt+0x3914>
   15e80:	ldr	r0, [pc, #404]	; 1601c <__assert_fail@plt+0x3930>
   15e84:	b	15df4 <__assert_fail@plt+0x3708>
   15e88:	ldr	r3, [r4, #156]	; 0x9c
   15e8c:	cmp	r3, #0
   15e90:	beq	15ea8 <__assert_fail@plt+0x37bc>
   15e94:	ldr	r3, [pc, #348]	; 15ff8 <__assert_fail@plt+0x390c>
   15e98:	ldr	r2, [pc, #384]	; 16020 <__assert_fail@plt+0x3934>
   15e9c:	ldr	r1, [pc, #348]	; 16000 <__assert_fail@plt+0x3914>
   15ea0:	ldr	r0, [pc, #380]	; 16024 <__assert_fail@plt+0x3938>
   15ea4:	b	15df4 <__assert_fail@plt+0x3708>
   15ea8:	vldr	s0, [r4, #28]
   15eac:	pop	{r4, pc}
   15eb0:	ldr	r3, [r4, #160]	; 0xa0
   15eb4:	cmp	r3, #0
   15eb8:	ldrne	r3, [pc, #312]	; 15ff8 <__assert_fail@plt+0x390c>
   15ebc:	ldrne	r2, [pc, #356]	; 16028 <__assert_fail@plt+0x393c>
   15ec0:	bne	15e7c <__assert_fail@plt+0x3790>
   15ec4:	ldr	r3, [r4, #156]	; 0x9c
   15ec8:	cmp	r3, #0
   15ecc:	beq	15ea8 <__assert_fail@plt+0x37bc>
   15ed0:	ldr	r3, [pc, #288]	; 15ff8 <__assert_fail@plt+0x390c>
   15ed4:	ldr	r2, [pc, #336]	; 1602c <__assert_fail@plt+0x3940>
   15ed8:	b	15e9c <__assert_fail@plt+0x37b0>
   15edc:	ldr	r2, [r4]
   15ee0:	ldr	r3, [pc, #328]	; 16030 <__assert_fail@plt+0x3944>
   15ee4:	cmp	r2, r3
   15ee8:	ldrne	r3, [pc, #264]	; 15ff8 <__assert_fail@plt+0x390c>
   15eec:	ldrne	r2, [pc, #320]	; 16034 <__assert_fail@plt+0x3948>
   15ef0:	ldrne	r1, [pc, #264]	; 16000 <__assert_fail@plt+0x3914>
   15ef4:	ldrne	r0, [pc, #316]	; 16038 <__assert_fail@plt+0x394c>
   15ef8:	bne	15df4 <__assert_fail@plt+0x3708>
   15efc:	ldr	r3, [r4, #156]	; 0x9c
   15f00:	cmp	r3, #0
   15f04:	ldrne	r3, [pc, #236]	; 15ff8 <__assert_fail@plt+0x390c>
   15f08:	ldrne	r2, [pc, #300]	; 1603c <__assert_fail@plt+0x3950>
   15f0c:	bne	15e9c <__assert_fail@plt+0x37b0>
   15f10:	ldr	r3, [r4, #160]	; 0xa0
   15f14:	vldr	s0, [pc, #212]	; 15ff0 <__assert_fail@plt+0x3904>
   15f18:	vldr	s15, [r3, #28]
   15f1c:	vsub.f32	s0, s0, s15
   15f20:	vstr	s0, [r4, #28]
   15f24:	pop	{r4, pc}
   15f28:	ldr	r3, [r4]
   15f2c:	ldr	r2, [pc, #268]	; 16040 <__assert_fail@plt+0x3954>
   15f30:	vldr	s15, [pc, #184]	; 15ff0 <__assert_fail@plt+0x3904>
   15f34:	cmp	r3, r2
   15f38:	bne	15f80 <__assert_fail@plt+0x3894>
   15f3c:	ldr	r3, [r4, #160]	; 0xa0
   15f40:	cmp	r3, #0
   15f44:	vldrne	s0, [r3, #28]
   15f48:	ldr	r3, [r4, #156]	; 0x9c
   15f4c:	vmoveq.f32	s0, s15
   15f50:	cmp	r3, #0
   15f54:	vldrne	s14, [r3, #28]
   15f58:	vldreq	s14, [pc, #144]	; 15ff0 <__assert_fail@plt+0x3904>
   15f5c:	vmul.f32	s0, s0, s14
   15f60:	vcmpe.f32	s0, s15
   15f64:	vmrs	APSR_nzcv, fpscr
   15f68:	bgt	15fdc <__assert_fail@plt+0x38f0>
   15f6c:	vldr	s15, [pc, #128]	; 15ff4 <__assert_fail@plt+0x3908>
   15f70:	vcmp.f32	s0, s15
   15f74:	vmrs	APSR_nzcv, fpscr
   15f78:	vmovmi.f32	s0, s15
   15f7c:	b	15f20 <__assert_fail@plt+0x3834>
   15f80:	ldr	r2, [pc, #188]	; 16044 <__assert_fail@plt+0x3958>
   15f84:	cmp	r3, r2
   15f88:	beq	15fd4 <__assert_fail@plt+0x38e8>
   15f8c:	ldr	r2, [pc, #180]	; 16048 <__assert_fail@plt+0x395c>
   15f90:	cmp	r3, r2
   15f94:	bne	15fc0 <__assert_fail@plt+0x38d4>
   15f98:	ldr	r3, [r4, #160]	; 0xa0
   15f9c:	cmp	r3, #0
   15fa0:	vldrne	s14, [r3, #28]
   15fa4:	ldr	r3, [r4, #156]	; 0x9c
   15fa8:	vmoveq.f32	s14, s15
   15fac:	cmp	r3, #0
   15fb0:	vldrne	s0, [r3, #28]
   15fb4:	vldreq	s0, [pc, #52]	; 15ff0 <__assert_fail@plt+0x3904>
   15fb8:	vadd.f32	s0, s0, s14
   15fbc:	b	15f60 <__assert_fail@plt+0x3874>
   15fc0:	ldr	r3, [pc, #48]	; 15ff8 <__assert_fail@plt+0x390c>
   15fc4:	ldr	r2, [pc, #128]	; 1604c <__assert_fail@plt+0x3960>
   15fc8:	ldr	r1, [pc, #48]	; 16000 <__assert_fail@plt+0x3914>
   15fcc:	ldr	r0, [pc, #124]	; 16050 <__assert_fail@plt+0x3964>
   15fd0:	b	15df4 <__assert_fail@plt+0x3708>
   15fd4:	vmov.f32	s0, s15
   15fd8:	b	15f20 <__assert_fail@plt+0x3834>
   15fdc:	vldr	s0, [pc, #12]	; 15ff0 <__assert_fail@plt+0x3904>
   15fe0:	b	15f20 <__assert_fail@plt+0x3834>
   15fe4:	ldr	r3, [pc, #12]	; 15ff8 <__assert_fail@plt+0x390c>
   15fe8:	mov	r2, #1216	; 0x4c0
   15fec:	b	15fc8 <__assert_fail@plt+0x38dc>
   15ff0:	svccc	0x00800000
   15ff4:	andeq	r0, r0, r0
   15ff8:	ldrdeq	sl, [r3], -r5
   15ffc:	andeq	r0, r0, r4, lsl #9
   16000:	strdeq	sl, [r3], -r8
   16004:	ldrdeq	sl, [r3], -lr
   16008:	andeq	r0, r0, fp, lsl #9
   1600c:	andeq	sl, r3, r8, ror #19
   16010:	andeq	r0, r0, ip, lsl #9
   16014:	andeq	sl, r3, r1, lsl #20
   16018:	muleq	r0, r1, r4
   1601c:	andeq	sl, r3, r9, lsl sl
   16020:	muleq	r0, r2, r4
   16024:	andeq	sl, r3, pc, lsr #20
   16028:	muleq	r0, r6, r4
   1602c:	muleq	r0, r7, r4
   16030:	andeq	r4, r1, r8, ror r2
   16034:	muleq	r0, ip, r4
   16038:	andeq	sl, r3, r4, asr #20
   1603c:	muleq	r0, sp, r4
   16040:	andeq	r3, r1, r4, asr #15
   16044:	ldrdeq	r3, [r1], -r8
   16048:	andeq	r3, r1, r4, lsl r9
   1604c:			; <UNDEFINED> instruction: 0x000004b4
   16050:	andeq	sl, r3, sl, lsr r9
   16054:	ldr	r3, [r0]
   16058:	push	{r4, lr}
   1605c:	cmp	r3, #0
   16060:	bne	16078 <__assert_fail@plt+0x398c>
   16064:	ldr	r3, [pc, #152]	; 16104 <__assert_fail@plt+0x3a18>
   16068:	ldr	r2, [pc, #152]	; 16108 <__assert_fail@plt+0x3a1c>
   1606c:	ldr	r1, [pc, #152]	; 1610c <__assert_fail@plt+0x3a20>
   16070:	ldr	r0, [pc, #152]	; 16110 <__assert_fail@plt+0x3a24>
   16074:	bl	126ec <__assert_fail@plt>
   16078:	cmp	r3, #2
   1607c:	ldreq	r3, [pc, #128]	; 16104 <__assert_fail@plt+0x3a18>
   16080:	ldreq	r2, [pc, #140]	; 16114 <__assert_fail@plt+0x3a28>
   16084:	ldreq	r1, [pc, #128]	; 1610c <__assert_fail@plt+0x3a20>
   16088:	ldreq	r0, [pc, #136]	; 16118 <__assert_fail@plt+0x3a2c>
   1608c:	beq	16074 <__assert_fail@plt+0x3988>
   16090:	mov	r4, r0
   16094:	mov	r0, #176	; 0xb0
   16098:	bl	29124 <__assert_fail@plt+0x16a38>
   1609c:	ldr	r3, [pc, #120]	; 1611c <__assert_fail@plt+0x3a30>
   160a0:	ldr	r2, [r3, #16]
   160a4:	cmp	r2, #0
   160a8:	ldrne	r2, [r3, #20]
   160ac:	strne	r0, [r2, #152]	; 0x98
   160b0:	mov	r2, #1
   160b4:	strb	r2, [r0, #18]
   160b8:	strb	r2, [r0, #19]
   160bc:	mov	r2, #10
   160c0:	str	r2, [r0, #24]
   160c4:	ldr	r2, [pc, #84]	; 16120 <__assert_fail@plt+0x3a34>
   160c8:	streq	r0, [r3, #16]
   160cc:	str	r2, [r0, #36]	; 0x24
   160d0:	ldr	r2, [pc, #76]	; 16124 <__assert_fail@plt+0x3a38>
   160d4:	str	r0, [r3, #20]
   160d8:	mov	r3, #0
   160dc:	ldrb	r2, [r2, #15]
   160e0:	str	r4, [r0, #172]	; 0xac
   160e4:	str	r3, [r0, #8]
   160e8:	strb	r2, [r0, #32]
   160ec:	mov	r2, #1065353216	; 0x3f800000
   160f0:	str	r3, [r0, #12]
   160f4:	str	r2, [r0, #28]
   160f8:	str	r3, [r0, #168]	; 0xa8
   160fc:	str	r3, [r0, #164]	; 0xa4
   16100:	pop	{r4, pc}
   16104:	andeq	sl, r3, sp, ror #11
   16108:	andeq	r0, r0, sp, asr #11
   1610c:	strdeq	sl, [r3], -r8
   16110:			; <UNDEFINED> instruction: 0x0003a3b8
   16114:	andeq	r0, r0, lr, asr #11
   16118:	ldrdeq	sl, [r3], -ip
   1611c:	andeq	r0, r5, r4, lsl #11
   16120:	andeq	sl, r3, sp, asr sl
   16124:	andeq	r0, r5, r4, lsl #29
   16128:	push	{r4, lr}
   1612c:	bl	16054 <__assert_fail@plt+0x3968>
   16130:	cmp	r0, #0
   16134:	movne	r3, #0
   16138:	strne	r3, [r0, #36]	; 0x24
   1613c:	pop	{r4, pc}
   16140:	push	{r4, r5, r6, lr}
   16144:	mov	r5, r0
   16148:	ldr	r4, [pc, #208]	; 16220 <__assert_fail@plt+0x3b34>
   1614c:	mov	r6, r1
   16150:	ldr	r3, [r4, #24]
   16154:	cmp	r3, #0
   16158:	bne	16168 <__assert_fail@plt+0x3a7c>
   1615c:	ldr	r0, [pc, #192]	; 16224 <__assert_fail@plt+0x3b38>
   16160:	bl	1d79c <__assert_fail@plt+0xb0b0>
   16164:	str	r0, [r4, #24]
   16168:	ldr	r0, [r4, #24]
   1616c:	cmp	r0, #0
   16170:	bne	16188 <__assert_fail@plt+0x3a9c>
   16174:	ldr	r3, [pc, #172]	; 16228 <__assert_fail@plt+0x3b3c>
   16178:	ldr	r2, [pc, #172]	; 1622c <__assert_fail@plt+0x3b40>
   1617c:	ldr	r1, [pc, #172]	; 16230 <__assert_fail@plt+0x3b44>
   16180:	ldr	r0, [pc, #172]	; 16234 <__assert_fail@plt+0x3b48>
   16184:	bl	126ec <__assert_fail@plt>
   16188:	ldr	r3, [r4, #20]
   1618c:	cmp	r3, #0
   16190:	beq	161ec <__assert_fail@plt+0x3b00>
   16194:	ldr	r3, [r3, #8]
   16198:	cmp	r3, #1
   1619c:	beq	161ac <__assert_fail@plt+0x3ac0>
   161a0:	bcc	16200 <__assert_fail@plt+0x3b14>
   161a4:	cmp	r3, #5
   161a8:	bne	161ec <__assert_fail@plt+0x3b00>
   161ac:	bl	16128 <__assert_fail@plt+0x3a3c>
   161b0:	ldr	r3, [pc, #128]	; 16238 <__assert_fail@plt+0x3b4c>
   161b4:	str	r3, [r0]
   161b8:	ldr	r3, [pc, #124]	; 1623c <__assert_fail@plt+0x3b50>
   161bc:	str	r3, [r0, #4]
   161c0:	mov	r3, #3
   161c4:	str	r3, [r0, #8]
   161c8:	str	r3, [r0, #12]
   161cc:	mov	r3, #0
   161d0:	strb	r3, [r0, #18]
   161d4:	strb	r3, [r0, #19]
   161d8:	strb	r3, [r0, #20]
   161dc:	str	r3, [r0, #36]	; 0x24
   161e0:	str	r3, [r0, #40]	; 0x28
   161e4:	strb	r3, [r0, #16]
   161e8:	strb	r3, [r0, #17]
   161ec:	mov	r0, r5
   161f0:	bl	16054 <__assert_fail@plt+0x3968>
   161f4:	str	r6, [r0, #36]	; 0x24
   161f8:	str	r5, [r0, #172]	; 0xac
   161fc:	pop	{r4, r5, r6, pc}
   16200:	mov	r2, #5
   16204:	ldr	r1, [pc, #52]	; 16240 <__assert_fail@plt+0x3b54>
   16208:	mov	r0, #0
   1620c:	bl	1217c <dcgettext@plt>
   16210:	mov	r1, #0
   16214:	mov	r2, r0
   16218:	mov	r0, #1
   1621c:	bl	122c0 <error@plt>
   16220:	andeq	r0, r5, r4, lsl #11
   16224:	andeq	sl, r3, ip, ror sl
   16228:	strdeq	sl, [r3], -sl	; <UNPREDICTABLE>
   1622c:	strdeq	r0, [r0], -r8
   16230:	strdeq	sl, [r3], -r8
   16234:	andeq	sl, r3, r0, lsl #21
   16238:	andeq	r3, r1, r4, asr #15
   1623c:	ldrdeq	sl, [r3], -r5
   16240:	muleq	r3, r2, sl
   16244:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   16248:	mov	r4, r0
   1624c:	ldr	r8, [pc, #644]	; 164d8 <__assert_fail@plt+0x3dec>
   16250:	ldr	r7, [pc, #644]	; 164dc <__assert_fail@plt+0x3df0>
   16254:	mov	r5, r1
   16258:	mov	r6, r2
   1625c:	add	r9, r8, #92	; 0x5c
   16260:	cmp	r5, #0
   16264:	beq	164d0 <__assert_fail@plt+0x3de4>
   16268:	mov	sl, #0
   1626c:	cmp	sl, r6
   16270:	mov	r1, r4
   16274:	blt	16414 <__assert_fail@plt+0x3d28>
   16278:	ldr	r0, [pc, #608]	; 164e0 <__assert_fail@plt+0x3df4>
   1627c:	bl	12680 <fputs@plt>
   16280:	mov	r0, r4
   16284:	mov	r1, r5
   16288:	bl	15d9c <__assert_fail@plt+0x36b0>
   1628c:	ldrsh	r0, [r5, #8]
   16290:	mov	r2, #0
   16294:	lsl	r3, r2, #3
   16298:	ldrsh	r1, [r3, r9]
   1629c:	cmn	r1, #1
   162a0:	cmpne	r0, r1
   162a4:	bne	16424 <__assert_fail@plt+0x3d38>
   162a8:	add	r3, r8, r3
   162ac:	ldrsh	ip, [r5, #12]
   162b0:	ldr	r2, [r3, #96]	; 0x60
   162b4:	ldr	lr, [pc, #552]	; 164e4 <__assert_fail@plt+0x3df8>
   162b8:	mov	r1, #0
   162bc:	lsl	r3, r1, #3
   162c0:	ldrsh	r0, [r3, lr]
   162c4:	cmn	r0, #1
   162c8:	cmpne	ip, r0
   162cc:	bne	1642c <__assert_fail@plt+0x3d40>
   162d0:	add	r3, r8, r3
   162d4:	ldr	r1, [pc, #524]	; 164e8 <__assert_fail@plt+0x3dfc>
   162d8:	ldr	r3, [r3, #152]	; 0x98
   162dc:	mov	r0, r4
   162e0:	bl	123f8 <fprintf@plt>
   162e4:	ldr	r2, [pc, #512]	; 164ec <__assert_fail@plt+0x3e00>
   162e8:	ldr	r1, [r5, #24]
   162ec:	mov	r3, #0
   162f0:	add	r0, r2, #472	; 0x1d8
   162f4:	ldr	lr, [r0, r3, lsl #3]
   162f8:	lsl	ip, r3, #3
   162fc:	cmp	r1, lr
   16300:	bne	16434 <__assert_fail@plt+0x3d48>
   16304:	add	r2, r2, ip
   16308:	ldr	r2, [r2, #476]	; 0x1dc
   1630c:	vldr	s14, [r5, #28]
   16310:	ldrb	r0, [r5, #16]
   16314:	ldr	r1, [pc, #468]	; 164f0 <__assert_fail@plt+0x3e04>
   16318:	ldr	r3, [pc, #468]	; 164f4 <__assert_fail@plt+0x3e08>
   1631c:	vcvt.f64.f32	d7, s14
   16320:	cmp	r0, #0
   16324:	moveq	r3, r1
   16328:	str	r3, [sp, #8]
   1632c:	ldr	r1, [pc, #452]	; 164f8 <__assert_fail@plt+0x3e0c>
   16330:	mov	r0, r4
   16334:	vstr	d7, [sp]
   16338:	bl	123f8 <fprintf@plt>
   1633c:	ldrh	r3, [r5, #18]
   16340:	cmp	r3, #0
   16344:	bne	16354 <__assert_fail@plt+0x3c68>
   16348:	ldrb	r3, [r5, #20]
   1634c:	cmp	r3, #0
   16350:	beq	163d0 <__assert_fail@plt+0x3ce4>
   16354:	mov	r1, r4
   16358:	ldr	r0, [pc, #412]	; 164fc <__assert_fail@plt+0x3e10>
   1635c:	bl	12680 <fputs@plt>
   16360:	ldrb	r3, [r5, #18]
   16364:	cmp	r3, #0
   16368:	beq	1637c <__assert_fail@plt+0x3c90>
   1636c:	mov	r1, r4
   16370:	ldr	r0, [pc, #392]	; 16500 <__assert_fail@plt+0x3e14>
   16374:	bl	12680 <fputs@plt>
   16378:	mov	r3, #1
   1637c:	ldrb	r2, [r5, #20]
   16380:	cmp	r2, #0
   16384:	beq	163a8 <__assert_fail@plt+0x3cbc>
   16388:	ldr	r1, [pc, #372]	; 16504 <__assert_fail@plt+0x3e18>
   1638c:	cmp	r3, #0
   16390:	ldr	r2, [pc, #348]	; 164f4 <__assert_fail@plt+0x3e08>
   16394:	mov	r0, r4
   16398:	movne	r2, r1
   1639c:	ldr	r1, [pc, #356]	; 16508 <__assert_fail@plt+0x3e1c>
   163a0:	bl	123f8 <fprintf@plt>
   163a4:	mov	r3, #1
   163a8:	ldrb	r2, [r5, #19]
   163ac:	cmp	r2, #0
   163b0:	beq	163d0 <__assert_fail@plt+0x3ce4>
   163b4:	ldr	r1, [pc, #328]	; 16504 <__assert_fail@plt+0x3e18>
   163b8:	cmp	r3, #0
   163bc:	ldr	r2, [pc, #304]	; 164f4 <__assert_fail@plt+0x3e08>
   163c0:	mov	r0, r4
   163c4:	movne	r2, r1
   163c8:	ldr	r1, [pc, #316]	; 1650c <__assert_fail@plt+0x3e20>
   163cc:	bl	123f8 <fprintf@plt>
   163d0:	mov	r1, r4
   163d4:	mov	r0, #10
   163d8:	bl	1256c <fputc@plt>
   163dc:	mov	sl, #0
   163e0:	cmp	sl, r6
   163e4:	blt	16448 <__assert_fail@plt+0x3d5c>
   163e8:	ldr	r3, [r5, #156]	; 0x9c
   163ec:	cmp	r3, #0
   163f0:	bne	1645c <__assert_fail@plt+0x3d70>
   163f4:	ldr	r3, [r5, #160]	; 0xa0
   163f8:	mov	r1, r4
   163fc:	cmp	r3, #0
   16400:	bne	164a8 <__assert_fail@plt+0x3dbc>
   16404:	ldr	r0, [pc, #260]	; 16510 <__assert_fail@plt+0x3e24>
   16408:	add	sp, sp, #16
   1640c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16410:	b	12680 <fputs@plt>
   16414:	mov	r0, r7
   16418:	bl	12680 <fputs@plt>
   1641c:	add	sl, sl, #1
   16420:	b	1626c <__assert_fail@plt+0x3b80>
   16424:	add	r2, r2, #1
   16428:	b	16294 <__assert_fail@plt+0x3ba8>
   1642c:	add	r1, r1, #1
   16430:	b	162bc <__assert_fail@plt+0x3bd0>
   16434:	add	r3, r3, #1
   16438:	cmp	r3, #11
   1643c:	bne	162f4 <__assert_fail@plt+0x3c08>
   16440:	ldr	r2, [pc, #204]	; 16514 <__assert_fail@plt+0x3e28>
   16444:	b	1630c <__assert_fail@plt+0x3c20>
   16448:	mov	r1, r4
   1644c:	mov	r0, r7
   16450:	bl	12680 <fputs@plt>
   16454:	add	sl, sl, #1
   16458:	b	163e0 <__assert_fail@plt+0x3cf4>
   1645c:	mov	r1, r4
   16460:	ldr	r0, [pc, #176]	; 16518 <__assert_fail@plt+0x3e2c>
   16464:	bl	12680 <fputs@plt>
   16468:	add	r2, r6, #1
   1646c:	ldr	r1, [r5, #156]	; 0x9c
   16470:	mov	r0, r4
   16474:	bl	16244 <__assert_fail@plt+0x3b58>
   16478:	mov	sl, #0
   1647c:	cmp	sl, r6
   16480:	blt	164b4 <__assert_fail@plt+0x3dc8>
   16484:	ldr	r3, [r5, #160]	; 0xa0
   16488:	mov	r1, r4
   1648c:	cmp	r3, #0
   16490:	beq	164c8 <__assert_fail@plt+0x3ddc>
   16494:	ldr	r0, [pc, #128]	; 1651c <__assert_fail@plt+0x3e30>
   16498:	bl	12680 <fputs@plt>
   1649c:	add	r6, r6, #1
   164a0:	ldr	r5, [r5, #160]	; 0xa0
   164a4:	b	16260 <__assert_fail@plt+0x3b74>
   164a8:	ldr	r0, [pc, #112]	; 16520 <__assert_fail@plt+0x3e34>
   164ac:	bl	12680 <fputs@plt>
   164b0:	b	16478 <__assert_fail@plt+0x3d8c>
   164b4:	mov	r1, r4
   164b8:	mov	r0, r7
   164bc:	bl	12680 <fputs@plt>
   164c0:	add	sl, sl, #1
   164c4:	b	1647c <__assert_fail@plt+0x3d90>
   164c8:	ldr	r0, [pc, #84]	; 16524 <__assert_fail@plt+0x3e38>
   164cc:	b	16408 <__assert_fail@plt+0x3d1c>
   164d0:	add	sp, sp, #16
   164d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   164d8:			; <UNDEFINED> instruction: 0x0003a5b4
   164dc:	andeq	sl, r3, r8, asr #21
   164e0:	andeq	sl, r3, sp, asr #21
   164e4:	andeq	sl, r3, r8, asr #12
   164e8:	ldrdeq	sl, [r3], -r4
   164ec:			; <UNDEFINED> instruction: 0x000502b0
   164f0:	andeq	sl, r3, r4, asr #21
   164f4:	ldrdeq	fp, [r3], -pc	; <UNPREDICTABLE>
   164f8:	andeq	sl, r3, r6, ror #21
   164fc:	andeq	sl, r3, r6, lsl fp
   16500:	andeq	ip, r3, ip, lsl pc
   16504:	ldrdeq	sl, [r3], -r0
   16508:	andeq	sl, r3, sp, lsl fp
   1650c:	andeq	sl, r3, r5, lsr #22
   16510:	andeq	sl, r3, ip, lsr #22
   16514:			; <UNDEFINED> instruction: 0x0003aabc
   16518:	andeq	sl, r3, sl, lsr fp
   1651c:	andeq	sl, r3, fp, asr #22
   16520:	andeq	sl, r3, r1, asr #22
   16524:	andeq	sl, r3, r3, asr fp
   16528:	ldr	r3, [r0]
   1652c:	cmp	r3, #0
   16530:	bxeq	lr
   16534:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16538:	mov	r8, r1
   1653c:	ldr	r7, [pc, #328]	; 1668c <__assert_fail@plt+0x3fa0>
   16540:	mov	r4, r0
   16544:	ldr	r3, [r7, #44]	; 0x2c
   16548:	tst	r3, #8
   1654c:	beq	16574 <__assert_fail@plt+0x3e88>
   16550:	ldr	r5, [pc, #312]	; 16690 <__assert_fail@plt+0x3fa4>
   16554:	ldr	r2, [pc, #312]	; 16694 <__assert_fail@plt+0x3fa8>
   16558:	ldr	r1, [pc, #312]	; 16698 <__assert_fail@plt+0x3fac>
   1655c:	ldr	r0, [r5]
   16560:	bl	123f8 <fprintf@plt>
   16564:	mov	r2, #2
   16568:	ldr	r1, [r4]
   1656c:	ldr	r0, [r5]
   16570:	bl	16244 <__assert_fail@plt+0x3b58>
   16574:	mov	r5, #0
   16578:	ldr	r0, [r4]
   1657c:	bl	15dd8 <__assert_fail@plt+0x36ec>
   16580:	mov	r6, r5
   16584:	mov	lr, r5
   16588:	ldr	r3, [r4]
   1658c:	cmp	r3, #0
   16590:	bne	165e8 <__assert_fail@plt+0x3efc>
   16594:	ldr	r3, [r7, #44]	; 0x2c
   16598:	tst	r3, #8
   1659c:	beq	165c4 <__assert_fail@plt+0x3ed8>
   165a0:	ldr	r7, [pc, #232]	; 16690 <__assert_fail@plt+0x3fa4>
   165a4:	ldr	r2, [pc, #240]	; 1669c <__assert_fail@plt+0x3fb0>
   165a8:	ldr	r1, [pc, #232]	; 16698 <__assert_fail@plt+0x3fac>
   165ac:	ldr	r0, [r7]
   165b0:	bl	123f8 <fprintf@plt>
   165b4:	mov	r2, #2
   165b8:	mov	r1, r6
   165bc:	ldr	r0, [r7]
   165c0:	bl	16244 <__assert_fail@plt+0x3b58>
   165c4:	mov	r0, r6
   165c8:	bl	15dd8 <__assert_fail@plt+0x36ec>
   165cc:	ldr	r3, [r8]
   165d0:	str	r3, [r5, #156]	; 0x9c
   165d4:	mov	r3, #0
   165d8:	str	r6, [r8]
   165dc:	str	r3, [r4, #4]
   165e0:	str	r3, [r4]
   165e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   165e8:	ldr	r2, [r3, #156]	; 0x9c
   165ec:	str	r2, [r4]
   165f0:	mov	r2, r6
   165f4:	str	lr, [r3, #156]	; 0x9c
   165f8:	cmp	r2, #0
   165fc:	bne	16610 <__assert_fail@plt+0x3f24>
   16600:	cmp	r5, #0
   16604:	str	r6, [r3, #156]	; 0x9c
   16608:	moveq	r5, r3
   1660c:	b	1667c <__assert_fail@plt+0x3f90>
   16610:	ldr	ip, [r2, #160]	; 0xa0
   16614:	ldr	r0, [r3, #160]	; 0xa0
   16618:	ldr	r9, [ip, #24]
   1661c:	ldr	r1, [r0, #24]
   16620:	cmp	r9, r1
   16624:	ldr	r1, [r2, #156]	; 0x9c
   16628:	bne	16684 <__assert_fail@plt+0x3f98>
   1662c:	vldr	s14, [ip, #28]
   16630:	vldr	s15, [r0, #28]
   16634:	ldr	r9, [r2, #12]
   16638:	vcmp.f32	s14, s15
   1663c:	vmrs	APSR_nzcv, fpscr
   16640:	beq	16668 <__assert_fail@plt+0x3f7c>
   16644:	cmp	r9, #2
   16648:	vcmpe.f32	s14, s15
   1664c:	beq	16660 <__assert_fail@plt+0x3f74>
   16650:	vmrs	APSR_nzcv, fpscr
   16654:	bpl	16668 <__assert_fail@plt+0x3f7c>
   16658:	mov	r2, r1
   1665c:	b	165f8 <__assert_fail@plt+0x3f0c>
   16660:	vmrs	APSR_nzcv, fpscr
   16664:	bpl	16658 <__assert_fail@plt+0x3f6c>
   16668:	cmp	r1, #0
   1666c:	str	r1, [r3, #156]	; 0x9c
   16670:	moveq	r5, r3
   16674:	str	r3, [r2, #156]	; 0x9c
   16678:	mov	r3, r6
   1667c:	mov	r6, r3
   16680:	b	16588 <__assert_fail@plt+0x3e9c>
   16684:	bcs	16668 <__assert_fail@plt+0x3f7c>
   16688:	b	16658 <__assert_fail@plt+0x3f6c>
   1668c:	andeq	r0, r5, r4, lsl #29
   16690:	andeq	r0, r5, r0, ror #10
   16694:	andeq	sl, r3, lr, asr fp
   16698:	andeq	sl, r3, r9, ror fp
   1669c:	andeq	sl, r3, lr, ror fp
   166a0:	push	{r4, r5, r6, r7, r8, lr}
   166a4:	mov	r6, r3
   166a8:	ldr	r5, [pc, #76]	; 166fc <__assert_fail@plt+0x4010>
   166ac:	ldr	r3, [pc, #76]	; 16700 <__assert_fail@plt+0x4014>
   166b0:	mov	r7, r2
   166b4:	mov	r4, r0
   166b8:	mov	r0, r1
   166bc:	mov	r1, r6
   166c0:	str	r3, [r5, #28]
   166c4:	bl	16528 <__assert_fail@plt+0x3e3c>
   166c8:	mov	r0, r7
   166cc:	ldr	r3, [r5, #28]
   166d0:	mov	r1, r6
   166d4:	blx	r3
   166d8:	add	r7, r4, #88	; 0x58
   166dc:	mov	r0, r4
   166e0:	ldr	r3, [r5, #28]
   166e4:	mov	r1, r6
   166e8:	add	r4, r4, #8
   166ec:	blx	r3
   166f0:	cmp	r4, r7
   166f4:	bne	166dc <__assert_fail@plt+0x3ff0>
   166f8:	pop	{r4, r5, r6, r7, r8, pc}
   166fc:	andeq	r0, r5, r4, lsl #11
   16700:	andeq	r6, r1, r8, lsr #10
   16704:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16708:	sub	sp, sp, #108	; 0x6c
   1670c:	mov	r3, #0
   16710:	subs	r6, r0, #0
   16714:	str	r3, [sp]
   16718:	str	r3, [sp, #4]
   1671c:	str	r3, [sp, #8]
   16720:	str	r3, [sp, #12]
   16724:	beq	16abc <__assert_fail@plt+0x43d0>
   16728:	ldr	r0, [r6]
   1672c:	cmp	r0, r3
   16730:	beq	16ac4 <__assert_fail@plt+0x43d8>
   16734:	add	r8, sp, #16
   16738:	mov	r2, r3
   1673c:	add	r1, r8, r3
   16740:	str	r2, [r1, #4]
   16744:	str	r2, [r3, r8]
   16748:	add	r3, r3, #8
   1674c:	cmp	r3, #88	; 0x58
   16750:	bne	1673c <__assert_fail@plt+0x4050>
   16754:	mov	r2, r6
   16758:	mov	r1, #3
   1675c:	ldr	r3, [r0, #156]	; 0x9c
   16760:	cmp	r3, #0
   16764:	bne	167fc <__assert_fail@plt+0x4110>
   16768:	ldr	r3, [r0, #8]
   1676c:	cmp	r3, #3
   16770:	beq	16778 <__assert_fail@plt+0x408c>
   16774:	bl	15c40 <__assert_fail@plt+0x3554>
   16778:	ldr	r7, [pc, #844]	; 16acc <__assert_fail@plt+0x43e0>
   1677c:	ldr	r3, [r7, #44]	; 0x2c
   16780:	tst	r3, #9
   16784:	beq	167a8 <__assert_fail@plt+0x40bc>
   16788:	ldr	r4, [pc, #832]	; 16ad0 <__assert_fail@plt+0x43e4>
   1678c:	ldr	r0, [pc, #832]	; 16ad4 <__assert_fail@plt+0x43e8>
   16790:	ldr	r1, [r4]
   16794:	bl	12680 <fputs@plt>
   16798:	mov	r2, #0
   1679c:	ldr	r1, [r6]
   167a0:	ldr	r0, [r4]
   167a4:	bl	16244 <__assert_fail@plt+0x3b58>
   167a8:	ldr	r5, [r6]
   167ac:	cmp	r5, #0
   167b0:	beq	167dc <__assert_fail@plt+0x40f0>
   167b4:	ldr	r3, [r5, #8]
   167b8:	cmp	r3, #3
   167bc:	ldr	r3, [pc, #788]	; 16ad8 <__assert_fail@plt+0x43ec>
   167c0:	ldreq	r9, [r5, #12]
   167c4:	movne	r9, #0
   167c8:	mov	r5, #0
   167cc:	add	fp, r3, #472	; 0x1d8
   167d0:	ldr	r4, [r6]
   167d4:	cmp	r4, #0
   167d8:	bne	1680c <__assert_fail@plt+0x4120>
   167dc:	mov	r3, r6
   167e0:	mov	r2, sp
   167e4:	add	r1, sp, #8
   167e8:	mov	r0, r8
   167ec:	bl	166a0 <__assert_fail@plt+0x3fb4>
   167f0:	mov	r0, r5
   167f4:	add	sp, sp, #108	; 0x6c
   167f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167fc:	add	r2, r0, #156	; 0x9c
   16800:	ldr	r1, [r0, #12]
   16804:	mov	r0, r3
   16808:	b	1675c <__assert_fail@plt+0x4070>
   1680c:	ldr	r3, [r4, #8]
   16810:	cmp	r3, #3
   16814:	bne	16838 <__assert_fail@plt+0x414c>
   16818:	ldr	r3, [r4, #12]
   1681c:	cmp	r3, r9
   16820:	beq	16838 <__assert_fail@plt+0x414c>
   16824:	mov	r0, r4
   16828:	mov	r2, r6
   1682c:	mov	r1, r9
   16830:	bl	15c40 <__assert_fail@plt+0x3554>
   16834:	mov	r4, r0
   16838:	ldr	sl, [r4, #160]	; 0xa0
   1683c:	ldr	r3, [sl, #8]
   16840:	cmp	r3, #3
   16844:	ldrls	pc, [pc, r3, lsl #2]
   16848:	b	16a9c <__assert_fail@plt+0x43b0>
   1684c:	andeq	r6, r1, ip, asr r8
   16850:	andeq	r6, r1, ip, asr r8
   16854:	andeq	r6, r1, r8, asr sl
   16858:	muleq	r1, r4, sl
   1685c:	cmp	r9, #1
   16860:	beq	16a64 <__assert_fail@plt+0x4378>
   16864:	ldrb	r3, [sl, #16]
   16868:	cmp	r3, #0
   1686c:	bne	16a64 <__assert_fail@plt+0x4378>
   16870:	ldr	r2, [pc, #612]	; 16adc <__assert_fail@plt+0x43f0>
   16874:	ldr	r3, [sl]
   16878:	ldr	r1, [pc, #608]	; 16ae0 <__assert_fail@plt+0x43f4>
   1687c:	cmp	r3, r1
   16880:	cmpne	r3, r2
   16884:	ldr	r1, [pc, #600]	; 16ae4 <__assert_fail@plt+0x43f8>
   16888:	moveq	r2, #1
   1688c:	movne	r2, #0
   16890:	cmp	r3, r1
   16894:	orreq	r2, r2, #1
   16898:	ldr	r1, [pc, #584]	; 16ae8 <__assert_fail@plt+0x43fc>
   1689c:	cmp	r3, r1
   168a0:	orreq	r2, r2, #1
   168a4:	cmp	r2, #0
   168a8:	bne	168fc <__assert_fail@plt+0x4210>
   168ac:	ldr	r1, [pc, #568]	; 16aec <__assert_fail@plt+0x4400>
   168b0:	ldr	r0, [pc, #568]	; 16af0 <__assert_fail@plt+0x4404>
   168b4:	ldrh	r2, [r7, #68]	; 0x44
   168b8:	cmp	r3, r0
   168bc:	cmpne	r3, r1
   168c0:	moveq	r1, #1
   168c4:	movne	r1, #0
   168c8:	ldr	r0, [pc, #548]	; 16af4 <__assert_fail@plt+0x4408>
   168cc:	cmp	r2, #0
   168d0:	orreq	r1, r1, #1
   168d4:	cmp	r3, r0
   168d8:	orreq	r1, r1, #1
   168dc:	ldr	r0, [pc, #532]	; 16af8 <__assert_fail@plt+0x440c>
   168e0:	cmp	r3, r0
   168e4:	orreq	r1, r1, #1
   168e8:	cmp	r1, #0
   168ec:	bne	16958 <__assert_fail@plt+0x426c>
   168f0:	ldr	r1, [sl, #24]
   168f4:	cmp	r1, #0
   168f8:	bne	16958 <__assert_fail@plt+0x426c>
   168fc:	ldr	r3, [r7, #44]	; 0x2c
   16900:	tst	r3, #8
   16904:	beq	16934 <__assert_fail@plt+0x4248>
   16908:	ldr	sl, [pc, #448]	; 16ad0 <__assert_fail@plt+0x43e4>
   1690c:	ldrh	r2, [r7, #68]	; 0x44
   16910:	ldr	r1, [pc, #484]	; 16afc <__assert_fail@plt+0x4410>
   16914:	ldr	r0, [sl]
   16918:	bl	123f8 <fprintf@plt>
   1691c:	ldr	r1, [r4, #160]	; 0xa0
   16920:	ldr	r0, [sl]
   16924:	bl	15d9c <__assert_fail@plt+0x36b0>
   16928:	ldr	r1, [sl]
   1692c:	ldr	r0, [pc, #460]	; 16b00 <__assert_fail@plt+0x4414>
   16930:	bl	12680 <fputs@plt>
   16934:	ldr	r3, [r4, #156]	; 0x9c
   16938:	str	r3, [r6]
   1693c:	ldr	r3, [sp, #8]
   16940:	str	r4, [sp, #8]
   16944:	str	r3, [r4, #156]	; 0x9c
   16948:	ldr	r3, [sp, #12]
   1694c:	cmp	r3, #0
   16950:	streq	r4, [sp, #12]
   16954:	b	167d0 <__assert_fail@plt+0x40e4>
   16958:	ldr	r1, [pc, #420]	; 16b04 <__assert_fail@plt+0x4418>
   1695c:	cmp	r3, r1
   16960:	bne	16988 <__assert_fail@plt+0x429c>
   16964:	ldr	r3, [r4, #156]	; 0x9c
   16968:	str	r3, [r6]
   1696c:	ldr	r3, [sp]
   16970:	str	r4, [sp]
   16974:	str	r3, [r4, #156]	; 0x9c
   16978:	ldr	r3, [sp, #4]
   1697c:	cmp	r3, #0
   16980:	streq	r4, [sp, #4]
   16984:	b	167d0 <__assert_fail@plt+0x40e4>
   16988:	cmp	r2, #1
   1698c:	bls	16a64 <__assert_fail@plt+0x4378>
   16990:	ldr	r3, [sl, #24]
   16994:	sub	r3, r3, #1
   16998:	cmp	r3, #1
   1699c:	bhi	169ac <__assert_fail@plt+0x42c0>
   169a0:	ldrb	r3, [sl, #18]
   169a4:	cmp	r3, #0
   169a8:	beq	169b4 <__assert_fail@plt+0x42c8>
   169ac:	cmp	r2, #2
   169b0:	beq	16a64 <__assert_fail@plt+0x4378>
   169b4:	ldr	r3, [r7, #44]	; 0x2c
   169b8:	tst	r3, #8
   169bc:	beq	16a10 <__assert_fail@plt+0x4324>
   169c0:	ldr	sl, [pc, #264]	; 16ad0 <__assert_fail@plt+0x43e4>
   169c4:	ldr	r1, [pc, #316]	; 16b08 <__assert_fail@plt+0x441c>
   169c8:	ldr	r0, [sl]
   169cc:	bl	123f8 <fprintf@plt>
   169d0:	ldr	r1, [r4, #160]	; 0xa0
   169d4:	ldr	r0, [sl]
   169d8:	bl	15d9c <__assert_fail@plt+0x36b0>
   169dc:	ldr	r3, [r4, #160]	; 0xa0
   169e0:	ldr	r0, [sl]
   169e4:	ldr	r1, [r3, #24]
   169e8:	mov	r3, #0
   169ec:	ldr	ip, [fp, r3, lsl #3]
   169f0:	lsl	r2, r3, #3
   169f4:	cmp	r1, ip
   169f8:	bne	16a44 <__assert_fail@plt+0x4358>
   169fc:	ldr	r3, [pc, #212]	; 16ad8 <__assert_fail@plt+0x43ec>
   16a00:	add	r3, r3, r2
   16a04:	ldr	r2, [r3, #476]	; 0x1dc
   16a08:	ldr	r1, [pc, #252]	; 16b0c <__assert_fail@plt+0x4420>
   16a0c:	bl	123f8 <fprintf@plt>
   16a10:	ldr	r3, [r4, #160]	; 0xa0
   16a14:	ldr	r2, [r4, #156]	; 0x9c
   16a18:	ldr	r3, [r3, #24]
   16a1c:	str	r2, [r6]
   16a20:	ldr	r2, [r8, r3, lsl #3]
   16a24:	str	r2, [r4, #156]	; 0x9c
   16a28:	add	r2, sp, #104	; 0x68
   16a2c:	str	r4, [r8, r3, lsl #3]
   16a30:	add	r3, r2, r3, lsl #3
   16a34:	ldr	r2, [r3, #-84]	; 0xffffffac
   16a38:	cmp	r2, #0
   16a3c:	streq	r4, [r3, #-84]	; 0xffffffac
   16a40:	b	167d0 <__assert_fail@plt+0x40e4>
   16a44:	add	r3, r3, #1
   16a48:	cmp	r3, #11
   16a4c:	bne	169ec <__assert_fail@plt+0x4300>
   16a50:	ldr	r2, [pc, #184]	; 16b10 <__assert_fail@plt+0x4424>
   16a54:	b	16a08 <__assert_fail@plt+0x431c>
   16a58:	add	r0, sl, #160	; 0xa0
   16a5c:	bl	16704 <__assert_fail@plt+0x4018>
   16a60:	strb	r0, [sl, #16]
   16a64:	ldr	r3, [r4, #160]	; 0xa0
   16a68:	ldrb	sl, [r3, #16]
   16a6c:	cmp	sl, #0
   16a70:	beq	16a8c <__assert_fail@plt+0x43a0>
   16a74:	mov	r3, r6
   16a78:	mov	r2, sp
   16a7c:	add	r1, sp, #8
   16a80:	mov	r0, r8
   16a84:	bl	166a0 <__assert_fail@plt+0x3fb4>
   16a88:	mov	r5, sl
   16a8c:	add	r6, r4, #156	; 0x9c
   16a90:	b	167d0 <__assert_fail@plt+0x40e4>
   16a94:	add	r0, r4, #160	; 0xa0
   16a98:	b	16a5c <__assert_fail@plt+0x4370>
   16a9c:	mov	r2, #5
   16aa0:	ldr	r1, [pc, #108]	; 16b14 <__assert_fail@plt+0x4428>
   16aa4:	mov	r0, #0
   16aa8:	bl	1217c <dcgettext@plt>
   16aac:	mov	r1, #0
   16ab0:	mov	r2, r0
   16ab4:	mov	r0, #1
   16ab8:	bl	122c0 <error@plt>
   16abc:	mov	r5, r6
   16ac0:	b	167f0 <__assert_fail@plt+0x4104>
   16ac4:	mov	r5, r0
   16ac8:	b	167f0 <__assert_fail@plt+0x4104>
   16acc:	andeq	r0, r5, r4, lsl #29
   16ad0:	andeq	r0, r5, r0, ror #10
   16ad4:	muleq	r3, r8, fp
   16ad8:			; <UNDEFINED> instruction: 0x000502b0
   16adc:	andeq	r4, r1, ip, lsr r2
   16ae0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   16ae4:	andeq	r4, r1, r8, ror r0
   16ae8:	andeq	r4, r1, r8, lsr #2
   16aec:	andeq	r3, r1, r4, asr #15
   16af0:	andeq	r4, r1, r8, ror r2
   16af4:	ldrdeq	r3, [r1], -r8
   16af8:	andeq	r3, r1, r4, lsl r9
   16afc:	andeq	sl, r3, pc, lsr #23
   16b00:	ldrdeq	sl, [r3], -r0
   16b04:	andeq	r4, r1, r0, lsr r6
   16b08:	andeq	sl, r3, r1, ror #23
   16b0c:	strdeq	sl, [r3], -pc	; <UNPREDICTABLE>
   16b10:			; <UNDEFINED> instruction: 0x0003aabc
   16b14:			; <UNDEFINED> instruction: 0x0003a8b1
   16b18:	push	{r4, r5, r6, r7, lr}
   16b1c:	vpush	{d8}
   16b20:	subs	r4, r0, #0
   16b24:	sub	sp, sp, #12
   16b28:	beq	16bd0 <__assert_fail@plt+0x44e4>
   16b2c:	ldr	r6, [pc, #408]	; 16ccc <__assert_fail@plt+0x45e0>
   16b30:	ldr	r5, [pc, #408]	; 16cd0 <__assert_fail@plt+0x45e4>
   16b34:	ldr	r7, [pc, #408]	; 16cd4 <__assert_fail@plt+0x45e8>
   16b38:	ldr	r3, [r4, #8]
   16b3c:	cmp	r3, #3
   16b40:	ldrne	r2, [pc, #400]	; 16cd8 <__assert_fail@plt+0x45ec>
   16b44:	bne	16b88 <__assert_fail@plt+0x449c>
   16b48:	ldr	r3, [r4, #156]	; 0x9c
   16b4c:	cmp	r3, #0
   16b50:	beq	16b60 <__assert_fail@plt+0x4474>
   16b54:	ldr	r2, [r4, #160]	; 0xa0
   16b58:	cmp	r2, #0
   16b5c:	bne	16be0 <__assert_fail@plt+0x44f4>
   16b60:	mov	r2, r7
   16b64:	b	16b88 <__assert_fail@plt+0x449c>
   16b68:	ldr	r2, [pc, #364]	; 16cdc <__assert_fail@plt+0x45f0>
   16b6c:	cmp	r3, r2
   16b70:	ldrne	r2, [pc, #360]	; 16ce0 <__assert_fail@plt+0x45f4>
   16b74:	bne	16b88 <__assert_fail@plt+0x449c>
   16b78:	vcmpe.f32	s17, s16
   16b7c:	vmrs	APSR_nzcv, fpscr
   16b80:	ldrpl	r2, [pc, #348]	; 16ce4 <__assert_fail@plt+0x45f8>
   16b84:	bmi	16c8c <__assert_fail@plt+0x45a0>
   16b88:	ldr	r3, [r6, #44]	; 0x2c
   16b8c:	tst	r3, #8
   16b90:	beq	16bb0 <__assert_fail@plt+0x44c4>
   16b94:	ldr	r1, [pc, #332]	; 16ce8 <__assert_fail@plt+0x45fc>
   16b98:	ldr	r0, [r5]
   16b9c:	bl	123f8 <fprintf@plt>
   16ba0:	mov	r2, #0
   16ba4:	mov	r1, r4
   16ba8:	ldr	r0, [r5]
   16bac:	bl	16244 <__assert_fail@plt+0x3b58>
   16bb0:	ldr	r0, [r4, #156]	; 0x9c
   16bb4:	bl	16b18 <__assert_fail@plt+0x442c>
   16bb8:	cmp	r0, #0
   16bbc:	bne	16b38 <__assert_fail@plt+0x444c>
   16bc0:	ldr	r0, [r4, #160]	; 0xa0
   16bc4:	bl	16b18 <__assert_fail@plt+0x442c>
   16bc8:	cmp	r0, #0
   16bcc:	bne	16b38 <__assert_fail@plt+0x444c>
   16bd0:	mov	r0, #0
   16bd4:	add	sp, sp, #12
   16bd8:	vpop	{d8}
   16bdc:	pop	{r4, r5, r6, r7, pc}
   16be0:	ldr	r1, [r3, #160]	; 0xa0
   16be4:	cmp	r1, #0
   16be8:	ldreq	r2, [pc, #252]	; 16cec <__assert_fail@plt+0x4600>
   16bec:	beq	16b88 <__assert_fail@plt+0x449c>
   16bf0:	mov	r0, r1
   16bf4:	bl	156c0 <__assert_fail@plt+0x2fd4>
   16bf8:	cmp	r0, #0
   16bfc:	ldrne	r2, [pc, #236]	; 16cf0 <__assert_fail@plt+0x4604>
   16c00:	bne	16b88 <__assert_fail@plt+0x449c>
   16c04:	mov	r0, r2
   16c08:	bl	156c0 <__assert_fail@plt+0x2fd4>
   16c0c:	cmp	r0, #0
   16c10:	ldrne	r2, [pc, #220]	; 16cf4 <__assert_fail@plt+0x4608>
   16c14:	bne	16b88 <__assert_fail@plt+0x449c>
   16c18:	mov	r0, r1
   16c1c:	bl	1570c <__assert_fail@plt+0x3020>
   16c20:	mov	r3, r0
   16c24:	mov	r0, r2
   16c28:	bl	1570c <__assert_fail@plt+0x3020>
   16c2c:	cmp	r3, r0
   16c30:	ldrlt	r2, [pc, #192]	; 16cf8 <__assert_fail@plt+0x460c>
   16c34:	blt	16b88 <__assert_fail@plt+0x449c>
   16c38:	bne	16c8c <__assert_fail@plt+0x45a0>
   16c3c:	ldr	r3, [r6, #44]	; 0x2c
   16c40:	vldr	s17, [r1, #28]
   16c44:	tst	r3, #8
   16c48:	vldr	s16, [r2, #28]
   16c4c:	beq	16c6c <__assert_fail@plt+0x4580>
   16c50:	vcvt.f64.f32	d7, s16
   16c54:	ldr	r1, [pc, #160]	; 16cfc <__assert_fail@plt+0x4610>
   16c58:	ldr	r0, [r5]
   16c5c:	vstr	d7, [sp]
   16c60:	vcvt.f64.f32	d7, s17
   16c64:	vmov	r2, r3, d7
   16c68:	bl	123f8 <fprintf@plt>
   16c6c:	ldr	r3, [r4]
   16c70:	ldr	r2, [pc, #136]	; 16d00 <__assert_fail@plt+0x4614>
   16c74:	cmp	r3, r2
   16c78:	bne	16b68 <__assert_fail@plt+0x447c>
   16c7c:	vcmpe.f32	s17, s16
   16c80:	vmrs	APSR_nzcv, fpscr
   16c84:	ldrle	r2, [pc, #120]	; 16d04 <__assert_fail@plt+0x4618>
   16c88:	ble	16b88 <__assert_fail@plt+0x449c>
   16c8c:	ldr	r3, [r6, #44]	; 0x2c
   16c90:	tst	r3, #8
   16c94:	beq	16cb4 <__assert_fail@plt+0x45c8>
   16c98:	ldr	r1, [r5]
   16c9c:	ldr	r0, [pc, #100]	; 16d08 <__assert_fail@plt+0x461c>
   16ca0:	bl	12680 <fputs@plt>
   16ca4:	mov	r2, #0
   16ca8:	mov	r1, r4
   16cac:	ldr	r0, [r5]
   16cb0:	bl	16244 <__assert_fail@plt+0x3b58>
   16cb4:	ldr	r3, [r4, #156]	; 0x9c
   16cb8:	ldr	r1, [r4, #160]	; 0xa0
   16cbc:	ldr	r2, [r3, #160]	; 0xa0
   16cc0:	str	r1, [r3, #160]	; 0xa0
   16cc4:	str	r2, [r4, #160]	; 0xa0
   16cc8:	b	16b38 <__assert_fail@plt+0x444c>
   16ccc:	andeq	r0, r5, r4, lsl #29
   16cd0:	andeq	r0, r5, r0, ror #10
   16cd4:	andeq	sl, r3, r6, asr #25
   16cd8:	strdeq	sl, [r3], -r9
   16cdc:	andeq	r3, r1, r4, asr #15
   16ce0:	andeq	sl, r3, lr, lsl #24
   16ce4:	andeq	sl, r3, sp, ror #24
   16ce8:	andeq	sl, r3, r4, asr #26
   16cec:	ldrdeq	sl, [r3], -ip
   16cf0:	andeq	sl, r3, pc, asr #24
   16cf4:	andeq	sl, r3, r0, lsr ip
   16cf8:	andeq	sl, r3, r0, lsr #24
   16cfc:	andeq	sl, r3, r0, lsl sp
   16d00:	andeq	r3, r1, r4, lsl r9
   16d04:	muleq	r3, sl, ip
   16d08:	andeq	sl, r3, fp, lsr #26
   16d0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d10:	mov	r3, #0
   16d14:	ldr	r4, [pc, #1268]	; 17210 <__assert_fail@plt+0x4b24>
   16d18:	sub	sp, sp, #28
   16d1c:	mov	r5, r1
   16d20:	mov	r6, #1
   16d24:	str	r3, [r4, #16]
   16d28:	add	r3, r1, r2, lsl #2
   16d2c:	str	r0, [sp, #12]
   16d30:	str	r3, [r4, #8]
   16d34:	str	r2, [sp, #20]
   16d38:	ldr	r3, [sp, #20]
   16d3c:	ldr	r2, [sp, #12]
   16d40:	cmp	r3, r2
   16d44:	blt	16d8c <__assert_fail@plt+0x46a0>
   16d48:	ldr	r6, [pc, #1220]	; 17214 <__assert_fail@plt+0x4b28>
   16d4c:	mov	r0, r6
   16d50:	bl	1d79c <__assert_fail@plt+0xb0b0>
   16d54:	mov	r7, r0
   16d58:	ldr	r0, [pc, #1208]	; 17218 <__assert_fail@plt+0x4b2c>
   16d5c:	bl	1d79c <__assert_fail@plt+0xb0b0>
   16d60:	mov	r9, r0
   16d64:	ldr	r0, [pc, #1200]	; 1721c <__assert_fail@plt+0x4b30>
   16d68:	bl	1d79c <__assert_fail@plt+0xb0b0>
   16d6c:	cmp	r7, #0
   16d70:	mov	r8, r0
   16d74:	bne	16dbc <__assert_fail@plt+0x46d0>
   16d78:	ldr	r3, [pc, #1184]	; 17220 <__assert_fail@plt+0x4b34>
   16d7c:	ldr	r2, [pc, #1184]	; 17224 <__assert_fail@plt+0x4b38>
   16d80:	ldr	r1, [pc, #1184]	; 17228 <__assert_fail@plt+0x4b3c>
   16d84:	ldr	r0, [pc, #1184]	; 1722c <__assert_fail@plt+0x4b40>
   16d88:	bl	126ec <__assert_fail@plt>
   16d8c:	mov	r1, r6
   16d90:	ldr	r0, [r5, r3, lsl #2]
   16d94:	bl	17afc <__assert_fail@plt+0x5410>
   16d98:	cmp	r0, #0
   16d9c:	bne	16d48 <__assert_fail@plt+0x465c>
   16da0:	ldr	r3, [r4, #4]
   16da4:	add	r3, r3, #1
   16da8:	str	r3, [r4, #4]
   16dac:	ldr	r3, [sp, #20]
   16db0:	add	r3, r3, #1
   16db4:	str	r3, [sp, #20]
   16db8:	b	16d38 <__assert_fail@plt+0x464c>
   16dbc:	cmp	r9, #0
   16dc0:	ldreq	r3, [pc, #1112]	; 17220 <__assert_fail@plt+0x4b34>
   16dc4:	ldreq	r2, [pc, #1124]	; 17230 <__assert_fail@plt+0x4b44>
   16dc8:	ldreq	r1, [pc, #1112]	; 17228 <__assert_fail@plt+0x4b3c>
   16dcc:	ldreq	r0, [pc, #1120]	; 17234 <__assert_fail@plt+0x4b48>
   16dd0:	beq	16d88 <__assert_fail@plt+0x469c>
   16dd4:	cmp	r0, #0
   16dd8:	ldreq	r3, [pc, #1088]	; 17220 <__assert_fail@plt+0x4b34>
   16ddc:	ldreq	r2, [pc, #1108]	; 17238 <__assert_fail@plt+0x4b4c>
   16de0:	ldreq	r1, [pc, #1088]	; 17228 <__assert_fail@plt+0x4b3c>
   16de4:	ldreq	r0, [pc, #1104]	; 1723c <__assert_fail@plt+0x4b50>
   16de8:	beq	16d88 <__assert_fail@plt+0x469c>
   16dec:	add	r2, sp, #12
   16df0:	mov	r1, r5
   16df4:	mov	r0, r7
   16df8:	bl	1b1c4 <__assert_fail@plt+0x8ad8>
   16dfc:	ldr	r2, [r4, #20]
   16e00:	ldr	r3, [r4, #16]
   16e04:	mov	r1, #1
   16e08:	str	r6, [r2, #4]
   16e0c:	mov	r0, r5
   16e10:	strb	r1, [r3, #33]	; 0x21
   16e14:	ldr	r1, [sp, #12]
   16e18:	bl	1d784 <__assert_fail@plt+0xb098>
   16e1c:	ldr	r0, [r4, #20]
   16e20:	bl	14de0 <__assert_fail@plt+0x26f4>
   16e24:	mov	sl, #0
   16e28:	ldr	r3, [sp, #20]
   16e2c:	ldr	r1, [sp, #12]
   16e30:	cmp	r3, r1
   16e34:	blt	16e94 <__assert_fail@plt+0x47a8>
   16e38:	ldr	r3, [r4, #16]
   16e3c:	mov	r0, r5
   16e40:	ldr	r2, [r4, #20]
   16e44:	bl	1d798 <__assert_fail@plt+0xb0ac>
   16e48:	ldr	r0, [r4, #16]
   16e4c:	ldr	r3, [r0, #152]	; 0x98
   16e50:	cmp	r3, #0
   16e54:	bne	17014 <__assert_fail@plt+0x4928>
   16e58:	str	r3, [r4, #20]
   16e5c:	str	r3, [r4, #16]
   16e60:	str	r0, [sp, #16]
   16e64:	bl	2a01c <__assert_fail@plt+0x17930>
   16e68:	add	r2, sp, #12
   16e6c:	mov	r1, r5
   16e70:	mov	r0, r8
   16e74:	bl	1b6f4 <__assert_fail@plt+0x9008>
   16e78:	ldr	r0, [r4, #20]
   16e7c:	ldr	r3, [pc, #956]	; 17240 <__assert_fail@plt+0x4b54>
   16e80:	str	r3, [r0, #4]
   16e84:	bl	14de0 <__assert_fail@plt+0x26f4>
   16e88:	ldr	r0, [r4, #16]
   16e8c:	bl	14de0 <__assert_fail@plt+0x26f4>
   16e90:	b	17040 <__assert_fail@plt+0x4954>
   16e94:	ldr	r2, [pc, #936]	; 17244 <__assert_fail@plt+0x4b58>
   16e98:	mov	r1, #0
   16e9c:	ldr	r0, [r5, r3, lsl #2]
   16ea0:	strb	sl, [r2, #40]	; 0x28
   16ea4:	bl	17afc <__assert_fail@plt+0x5410>
   16ea8:	subs	r6, r0, #0
   16eac:	bne	16f18 <__assert_fail@plt+0x482c>
   16eb0:	mov	r2, #5
   16eb4:	ldr	r1, [pc, #908]	; 17248 <__assert_fail@plt+0x4b5c>
   16eb8:	bl	1217c <dcgettext@plt>
   16ebc:	ldr	r3, [sp, #20]
   16ec0:	mov	r1, r6
   16ec4:	ldr	r3, [r5, r3, lsl #2]
   16ec8:	mov	r2, r0
   16ecc:	mov	r0, r6
   16ed0:	bl	122c0 <error@plt>
   16ed4:	ldr	r3, [sp, #20]
   16ed8:	mov	r1, r6
   16edc:	ldr	r0, [r5, r3, lsl #2]
   16ee0:	bl	124c4 <access@plt>
   16ee4:	subs	r5, r0, #0
   16ee8:	bne	16f10 <__assert_fail@plt+0x4824>
   16eec:	mov	r2, #5
   16ef0:	ldr	r1, [pc, #852]	; 1724c <__assert_fail@plt+0x4b60>
   16ef4:	bl	1217c <dcgettext@plt>
   16ef8:	ldr	r3, [r4, #20]
   16efc:	mov	r1, r5
   16f00:	ldr	r3, [r3, #4]
   16f04:	mov	r2, r0
   16f08:	mov	r0, r5
   16f0c:	bl	122c0 <error@plt>
   16f10:	mov	r0, #1
   16f14:	bl	1238c <exit@plt>
   16f18:	ldr	r3, [sp, #20]
   16f1c:	ldr	r6, [r5, r3, lsl #2]
   16f20:	mov	r0, r6
   16f24:	bl	1d79c <__assert_fail@plt+0xb0b0>
   16f28:	subs	r7, r0, #0
   16f2c:	bne	16f50 <__assert_fail@plt+0x4864>
   16f30:	ldr	r1, [pc, #792]	; 17250 <__assert_fail@plt+0x4b64>
   16f34:	mov	r2, #5
   16f38:	bl	1217c <dcgettext@plt>
   16f3c:	mov	r3, r6
   16f40:	mov	r2, r0
   16f44:	mov	r1, #0
   16f48:	mov	r0, #1
   16f4c:	bl	122c0 <error@plt>
   16f50:	ldr	r3, [r7]
   16f54:	ldr	fp, [r7, #8]
   16f58:	cmp	r3, #4
   16f5c:	add	r2, sp, #20
   16f60:	ldrne	r3, [sp, #20]
   16f64:	mov	r1, r5
   16f68:	addne	r3, r3, #1
   16f6c:	strne	r3, [sp, #20]
   16f70:	ldr	r3, [sp, #20]
   16f74:	mov	r0, r7
   16f78:	str	r3, [sp, #8]
   16f7c:	blx	fp
   16f80:	ldr	r2, [sp, #20]
   16f84:	ldr	r3, [sp, #8]
   16f88:	subs	fp, r0, #0
   16f8c:	bne	16fec <__assert_fail@plt+0x4900>
   16f90:	ldr	r4, [r5, r2, lsl #2]
   16f94:	cmp	r4, #0
   16f98:	beq	16fe0 <__assert_fail@plt+0x48f4>
   16f9c:	ldr	r1, [r7]
   16fa0:	cmp	r1, #4
   16fa4:	cmpeq	r3, r2
   16fa8:	moveq	r4, #1
   16fac:	movne	r4, #0
   16fb0:	mov	r2, #5
   16fb4:	ldreq	r1, [pc, #664]	; 17254 <__assert_fail@plt+0x4b68>
   16fb8:	beq	16f38 <__assert_fail@plt+0x484c>
   16fbc:	ldr	r1, [pc, #660]	; 17258 <__assert_fail@plt+0x4b6c>
   16fc0:	bl	1217c <dcgettext@plt>
   16fc4:	ldr	r3, [sp, #20]
   16fc8:	str	r6, [sp]
   16fcc:	mov	r1, r4
   16fd0:	ldr	r3, [r5, r3, lsl #2]
   16fd4:	mov	r2, r0
   16fd8:	mov	r0, #1
   16fdc:	bl	122c0 <error@plt>
   16fe0:	mov	r2, #5
   16fe4:	ldr	r1, [pc, #624]	; 1725c <__assert_fail@plt+0x4b70>
   16fe8:	b	16f38 <__assert_fail@plt+0x484c>
   16fec:	ldr	r0, [r4, #20]
   16ff0:	cmp	r3, r2
   16ff4:	str	r6, [r0, #4]
   16ff8:	ldrne	r3, [r5, r3, lsl #2]
   16ffc:	streq	sl, [r0, #36]	; 0x24
   17000:	strne	r3, [r0, #36]	; 0x24
   17004:	bl	14de0 <__assert_fail@plt+0x26f4>
   17008:	ldr	r0, [r4, #16]
   1700c:	bl	14de0 <__assert_fail@plt+0x26f4>
   17010:	b	16e28 <__assert_fail@plt+0x473c>
   17014:	mov	r0, r3
   17018:	bl	17ad4 <__assert_fail@plt+0x53e8>
   1701c:	cmp	r0, #0
   17020:	bne	170d8 <__assert_fail@plt+0x49ec>
   17024:	ldr	r3, [r4, #16]
   17028:	str	r3, [sp, #16]
   1702c:	ldr	r0, [r3, #152]	; 0x98
   17030:	str	r0, [r4, #16]
   17034:	bl	14de0 <__assert_fail@plt+0x26f4>
   17038:	ldr	r0, [sp, #16]
   1703c:	bl	2a01c <__assert_fail@plt+0x17930>
   17040:	ldr	r5, [pc, #536]	; 17260 <__assert_fail@plt+0x4b74>
   17044:	ldr	r3, [r5, #44]	; 0x2c
   17048:	tst	r3, #9
   1704c:	beq	1706c <__assert_fail@plt+0x4980>
   17050:	ldr	r6, [pc, #524]	; 17264 <__assert_fail@plt+0x4b78>
   17054:	ldr	r0, [pc, #524]	; 17268 <__assert_fail@plt+0x4b7c>
   17058:	ldr	r1, [r6]
   1705c:	bl	12680 <fputs@plt>
   17060:	ldr	r1, [r4, #16]
   17064:	ldr	r0, [r6]
   17068:	bl	14b34 <__assert_fail@plt+0x2448>
   1706c:	ldr	r0, [r4, #16]
   17070:	bl	1d644 <__assert_fail@plt+0xaf58>
   17074:	ldr	r0, [r4, #16]
   17078:	bl	14de0 <__assert_fail@plt+0x26f4>
   1707c:	ldr	r3, [r4, #16]
   17080:	add	r0, sp, #24
   17084:	mov	r2, #0
   17088:	str	r3, [r0, #-8]!
   1708c:	mov	r1, r2
   17090:	bl	15748 <__assert_fail@plt+0x305c>
   17094:	str	r0, [r4, #12]
   17098:	bl	15dd8 <__assert_fail@plt+0x36ec>
   1709c:	ldr	r6, [sp, #16]
   170a0:	cmp	r6, #0
   170a4:	beq	17154 <__assert_fail@plt+0x4a68>
   170a8:	ldr	r2, [r6]
   170ac:	ldr	r3, [pc, #440]	; 1726c <__assert_fail@plt+0x4b80>
   170b0:	cmp	r2, r3
   170b4:	bne	17124 <__assert_fail@plt+0x4a38>
   170b8:	ldr	r1, [pc, #432]	; 17270 <__assert_fail@plt+0x4b84>
   170bc:	mov	r2, #5
   170c0:	mov	r0, #0
   170c4:	bl	1217c <dcgettext@plt>
   170c8:	mov	r1, #0
   170cc:	mov	r2, r0
   170d0:	mov	r0, #1
   170d4:	bl	122c0 <error@plt>
   170d8:	add	r2, sp, #12
   170dc:	mov	r1, r5
   170e0:	mov	r0, r9
   170e4:	bl	1b154 <__assert_fail@plt+0x8a68>
   170e8:	ldr	r0, [r4, #20]
   170ec:	ldr	r3, [pc, #292]	; 17218 <__assert_fail@plt+0x4b2c>
   170f0:	mov	r6, #1
   170f4:	str	r3, [r0, #4]
   170f8:	strb	r6, [r0, #33]	; 0x21
   170fc:	bl	14de0 <__assert_fail@plt+0x26f4>
   17100:	add	r2, sp, #12
   17104:	mov	r1, r5
   17108:	mov	r0, r8
   1710c:	bl	1b6f4 <__assert_fail@plt+0x9008>
   17110:	ldr	r0, [r4, #20]
   17114:	ldr	r3, [pc, #292]	; 17240 <__assert_fail@plt+0x4b54>
   17118:	strb	r6, [r0, #33]	; 0x21
   1711c:	str	r3, [r0, #4]
   17120:	b	16e84 <__assert_fail@plt+0x4798>
   17124:	ldr	r4, [r6, #4]
   17128:	mov	r2, #5
   1712c:	cmp	r4, #0
   17130:	beq	1714c <__assert_fail@plt+0x4a60>
   17134:	ldr	r1, [pc, #312]	; 17274 <__assert_fail@plt+0x4b88>
   17138:	mov	r0, #0
   1713c:	bl	1217c <dcgettext@plt>
   17140:	ldr	r3, [sp, #16]
   17144:	ldr	r3, [r3, #4]
   17148:	b	16f40 <__assert_fail@plt+0x4854>
   1714c:	ldr	r1, [pc, #292]	; 17278 <__assert_fail@plt+0x4b8c>
   17150:	b	170c0 <__assert_fail@plt+0x49d4>
   17154:	ldr	r3, [r5, #44]	; 0x2c
   17158:	tst	r3, #9
   1715c:	beq	17180 <__assert_fail@plt+0x4a94>
   17160:	ldr	r7, [pc, #252]	; 17264 <__assert_fail@plt+0x4b78>
   17164:	ldr	r0, [pc, #272]	; 1727c <__assert_fail@plt+0x4b90>
   17168:	ldr	r1, [r7]
   1716c:	bl	12680 <fputs@plt>
   17170:	mov	r2, r6
   17174:	ldr	r1, [r4, #12]
   17178:	ldr	r0, [r7]
   1717c:	bl	16244 <__assert_fail@plt+0x3b58>
   17180:	ldr	r0, [r4, #12]
   17184:	bl	15a88 <__assert_fail@plt+0x339c>
   17188:	ldr	r0, [pc, #240]	; 17280 <__assert_fail@plt+0x4b94>
   1718c:	bl	16704 <__assert_fail@plt+0x4018>
   17190:	ldr	r6, [r4, #12]
   17194:	mov	r1, #1
   17198:	mov	r0, r6
   1719c:	bl	159fc <__assert_fail@plt+0x3310>
   171a0:	mov	r0, r6
   171a4:	bl	16b18 <__assert_fail@plt+0x442c>
   171a8:	mov	r1, #1
   171ac:	ldr	r0, [r4, #12]
   171b0:	bl	159fc <__assert_fail@plt+0x3310>
   171b4:	ldr	r3, [r5, #44]	; 0x2c
   171b8:	tst	r3, #9
   171bc:	beq	17204 <__assert_fail@plt+0x4b18>
   171c0:	ldr	r5, [pc, #156]	; 17264 <__assert_fail@plt+0x4b78>
   171c4:	ldr	r0, [pc, #184]	; 17284 <__assert_fail@plt+0x4b98>
   171c8:	ldr	r1, [r5]
   171cc:	bl	12680 <fputs@plt>
   171d0:	mov	r2, #0
   171d4:	ldr	r1, [r4, #12]
   171d8:	ldr	r0, [r5]
   171dc:	bl	16244 <__assert_fail@plt+0x3b58>
   171e0:	ldr	r1, [r5]
   171e4:	ldr	r0, [pc, #156]	; 17288 <__assert_fail@plt+0x4b9c>
   171e8:	bl	12680 <fputs@plt>
   171ec:	ldr	r1, [r4, #12]
   171f0:	ldr	r0, [r5]
   171f4:	bl	14bcc <__assert_fail@plt+0x24e0>
   171f8:	ldr	r1, [r5]
   171fc:	mov	r0, #10
   17200:	bl	1256c <fputc@plt>
   17204:	ldr	r0, [r4, #12]
   17208:	add	sp, sp, #28
   1720c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17210:	andeq	r0, r5, r4, lsl #11
   17214:	andeq	ip, r3, fp, lsl #15
   17218:	strdeq	fp, [r3], -r5
   1721c:	andeq	sl, r3, sl, asr lr
   17220:	andeq	sl, r3, r0, lsl #13
   17224:	strdeq	r0, [r0], -r6
   17228:	strdeq	sl, [r3], -r8
   1722c:	andeq	sl, r3, r5, ror #26
   17230:	strdeq	r0, [r0], -r7
   17234:	andeq	sl, r3, r8, ror sp
   17238:	strdeq	r0, [r0], -r8
   1723c:	andeq	sl, r3, ip, lsl #27
   17240:	andeq	sl, r3, r9, asr lr
   17244:	andeq	r0, r5, r8, asr lr
   17248:	andeq	sl, r3, r0, lsr #27
   1724c:	andeq	sl, r3, r4, asr #27
   17250:	strdeq	sl, [r3], -r4
   17254:	andeq	sl, r3, fp, lsl #28
   17258:	andeq	sl, r3, r2, lsr #28
   1725c:	andeq	sl, r3, r0, asr #28
   17260:	andeq	r0, r5, r4, lsl #29
   17264:	andeq	r0, r5, r0, ror #10
   17268:	andeq	sl, r3, r0, ror #28
   1726c:	andeq	r3, r1, r4, asr fp
   17270:	andeq	sl, r3, r5, lsr #15
   17274:	andeq	sl, r3, r1, ror lr
   17278:	muleq	r3, r1, lr
   1727c:	andeq	sl, r3, r3, lsr #23
   17280:	muleq	r5, r0, r5
   17284:	andeq	sl, r3, ip, lsr #29
   17288:	andeq	sl, r3, r2, asr #29
   1728c:	push	{r4, r5, r6, lr}
   17290:	mov	r4, r0
   17294:	mov	r5, r1
   17298:	ldr	r0, [r4, #156]	; 0x9c
   1729c:	cmp	r0, #0
   172a0:	beq	172ac <__assert_fail@plt+0x4bc0>
   172a4:	mov	r1, r5
   172a8:	bl	1728c <__assert_fail@plt+0x4ba0>
   172ac:	mov	r0, r4
   172b0:	blx	r5
   172b4:	ldr	r4, [r4, #160]	; 0xa0
   172b8:	cmp	r4, #0
   172bc:	bne	17298 <__assert_fail@plt+0x4bac>
   172c0:	pop	{r4, r5, r6, pc}
   172c4:	ldr	r3, [pc, #60]	; 17308 <__assert_fail@plt+0x4c1c>
   172c8:	ldr	r2, [r0]
   172cc:	ldr	r1, [pc, #56]	; 1730c <__assert_fail@plt+0x4c20>
   172d0:	cmp	r2, r1
   172d4:	cmpne	r2, r3
   172d8:	ldr	r1, [pc, #48]	; 17310 <__assert_fail@plt+0x4c24>
   172dc:	moveq	r3, #1
   172e0:	movne	r3, #0
   172e4:	cmp	r2, r1
   172e8:	orreq	r3, r3, #1
   172ec:	ldr	r1, [pc, #32]	; 17314 <__assert_fail@plt+0x4c28>
   172f0:	cmp	r2, r1
   172f4:	orreq	r3, r3, #1
   172f8:	cmp	r3, #0
   172fc:	movne	r3, #0
   17300:	strne	r3, [r0, #44]	; 0x2c
   17304:	bx	lr
   17308:	andeq	r9, r1, ip, ror #13
   1730c:	andeq	r4, r1, r8, lsr #12
   17310:	andeq	r3, r1, r8, lsl pc
   17314:	andeq	r3, r1, r8, ror #30
   17318:	push	{r4, r5, r6, r7, r8, lr}
   1731c:	mov	r4, r0
   17320:	ldr	r5, [pc, #156]	; 173c4 <__assert_fail@plt+0x4cd8>
   17324:	ldr	r6, [pc, #156]	; 173c8 <__assert_fail@plt+0x4cdc>
   17328:	ldr	r7, [pc, #156]	; 173cc <__assert_fail@plt+0x4ce0>
   1732c:	cmp	r4, #0
   17330:	popeq	{r4, r5, r6, r7, r8, pc}
   17334:	ldrb	r3, [r5, #32]
   17338:	cmp	r3, #0
   1733c:	bne	17354 <__assert_fail@plt+0x4c68>
   17340:	ldr	r3, [pc, #136]	; 173d0 <__assert_fail@plt+0x4ce4>
   17344:	mov	r2, #396	; 0x18c
   17348:	ldr	r1, [pc, #132]	; 173d4 <__assert_fail@plt+0x4ce8>
   1734c:	ldr	r0, [pc, #132]	; 173d8 <__assert_fail@plt+0x4cec>
   17350:	bl	126ec <__assert_fail@plt>
   17354:	ldr	r0, [r4, #156]	; 0x9c
   17358:	bl	17318 <__assert_fail@plt+0x4c2c>
   1735c:	ldr	r3, [r4]
   17360:	cmp	r3, r7
   17364:	cmpne	r3, r6
   17368:	bne	173bc <__assert_fail@plt+0x4cd0>
   1736c:	ldrb	r3, [r4, #40]	; 0x28
   17370:	cmp	r3, #0
   17374:	beq	173bc <__assert_fail@plt+0x4cd0>
   17378:	ldr	r3, [r4, #116]	; 0x74
   1737c:	cmp	r3, #0
   17380:	beq	173bc <__assert_fail@plt+0x4cd0>
   17384:	add	r2, r4, #40	; 0x28
   17388:	ldr	r1, [pc, #76]	; 173dc <__assert_fail@plt+0x4cf0>
   1738c:	ldr	r0, [r4, #144]	; 0x90
   17390:	bl	1e2ec <__assert_fail@plt+0xbc00>
   17394:	ldr	r3, [pc, #68]	; 173e0 <__assert_fail@plt+0x4cf4>
   17398:	ldr	r0, [r4, #144]	; 0x90
   1739c:	ldr	r3, [r3]
   173a0:	cmp	r0, r3
   173a4:	beq	173bc <__assert_fail@plt+0x4cd0>
   173a8:	bl	281e0 <__assert_fail@plt+0x15af4>
   173ac:	ldr	r0, [r4, #144]	; 0x90
   173b0:	bl	2a01c <__assert_fail@plt+0x17930>
   173b4:	mov	r3, #0
   173b8:	str	r3, [r4, #144]	; 0x90
   173bc:	ldr	r4, [r4, #160]	; 0xa0
   173c0:	b	1732c <__assert_fail@plt+0x4c40>
   173c4:	andeq	r0, r5, r8, asr lr
   173c8:	andeq	r4, r1, ip, lsl #9
   173cc:	andeq	r3, r1, r0, lsl #30
   173d0:	muleq	r3, ip, pc	; <UNPREDICTABLE>
   173d4:	andeq	fp, r3, sl, rrx
   173d8:	andeq	fp, r3, r1, ror r0
   173dc:	andeq	r7, r1, r4, ror #7
   173e0:	andeq	r0, r5, r0, lsl #11
   173e4:	add	r1, r0, #48	; 0x30
   173e8:	push	{r4, lr}
   173ec:	add	r0, r0, #4
   173f0:	bl	1ddf8 <__assert_fail@plt+0xb70c>
   173f4:	mov	r0, #0
   173f8:	pop	{r4, pc}
   173fc:	push	{r4, r5, r6, lr}
   17400:	mov	r4, r0
   17404:	ldr	r5, [pc, #68]	; 17450 <__assert_fail@plt+0x4d64>
   17408:	cmp	r4, #0
   1740c:	popeq	{r4, r5, r6, pc}
   17410:	ldr	r0, [r4, #156]	; 0x9c
   17414:	bl	173fc <__assert_fail@plt+0x4d10>
   17418:	ldr	r3, [r4]
   1741c:	cmp	r3, r5
   17420:	bne	17448 <__assert_fail@plt+0x4d5c>
   17424:	ldrb	r3, [r4, #40]	; 0x28
   17428:	cmp	r3, #0
   1742c:	beq	17448 <__assert_fail@plt+0x4d5c>
   17430:	ldr	r3, [r4, #116]	; 0x74
   17434:	cmp	r3, #0
   17438:	beq	17448 <__assert_fail@plt+0x4d5c>
   1743c:	add	r1, r4, #88	; 0x58
   17440:	add	r0, r4, #44	; 0x2c
   17444:	bl	1ddf8 <__assert_fail@plt+0xb70c>
   17448:	ldr	r4, [r4, #160]	; 0xa0
   1744c:	b	17408 <__assert_fail@plt+0x4d1c>
   17450:	strdeq	r3, [r1], -ip
   17454:	push	{r4, r5, r6, lr}
   17458:	mov	r4, r0
   1745c:	mov	r6, r1
   17460:	mov	r5, r2
   17464:	bl	12404 <__errno_location@plt>
   17468:	ldr	r3, [r0]
   1746c:	cmp	r3, #2
   17470:	beq	1747c <__assert_fail@plt+0x4d90>
   17474:	cmp	r3, #20
   17478:	bne	174bc <__assert_fail@plt+0x4dd0>
   1747c:	ldr	r3, [pc, #64]	; 174c4 <__assert_fail@plt+0x4dd8>
   17480:	ldr	r3, [r3, #44]	; 0x2c
   17484:	tst	r3, #2
   17488:	beq	174a0 <__assert_fail@plt+0x4db4>
   1748c:	ldr	r3, [pc, #52]	; 174c8 <__assert_fail@plt+0x4ddc>
   17490:	mov	r2, r4
   17494:	ldr	r1, [pc, #48]	; 174cc <__assert_fail@plt+0x4de0>
   17498:	ldr	r0, [r3]
   1749c:	bl	123f8 <fprintf@plt>
   174a0:	ldr	r0, [pc, #40]	; 174d0 <__assert_fail@plt+0x4de4>
   174a4:	mov	r2, r6
   174a8:	mov	r1, r4
   174ac:	mov	r3, #256	; 0x100
   174b0:	ldr	r0, [r0, #16]
   174b4:	pop	{r4, r5, r6, lr}
   174b8:	b	39bb4 <__assert_fail@plt+0x274c8>
   174bc:	mov	r0, r5
   174c0:	pop	{r4, r5, r6, pc}
   174c4:	andeq	r0, r5, r4, lsl #29
   174c8:	andeq	r0, r5, r0, ror #10
   174cc:	andeq	fp, r3, ip, lsl #1
   174d0:	andeq	r0, r5, r8, asr lr
   174d4:	push	{r4, r5, r6, lr}
   174d8:	mov	r5, r1
   174dc:	mov	r1, r2
   174e0:	mov	r4, r0
   174e4:	bl	16140 <__assert_fail@plt+0x3a54>
   174e8:	ldr	r2, [r4, #4]
   174ec:	mov	r1, #1
   174f0:	str	r2, [r0, #4]
   174f4:	mov	r2, #0
   174f8:	str	r5, [r0]
   174fc:	str	r2, [r0, #40]	; 0x28
   17500:	str	r1, [r0, #8]
   17504:	str	r2, [r0, #12]
   17508:	pop	{r4, r5, r6, pc}
   1750c:	mov	r2, r1
   17510:	ldr	r1, [r0, #12]
   17514:	cmp	r1, #0
   17518:	bne	17534 <__assert_fail@plt+0x4e48>
   1751c:	push	{r4, lr}
   17520:	mov	r2, #123	; 0x7b
   17524:	ldr	r3, [pc, #12]	; 17538 <__assert_fail@plt+0x4e4c>
   17528:	ldr	r1, [pc, #12]	; 1753c <__assert_fail@plt+0x4e50>
   1752c:	ldr	r0, [pc, #12]	; 17540 <__assert_fail@plt+0x4e54>
   17530:	bl	126ec <__assert_fail@plt>
   17534:	b	174d4 <__assert_fail@plt+0x4de8>
   17538:			; <UNDEFINED> instruction: 0x0003afb9
   1753c:	andeq	fp, r3, sl, rrx
   17540:	andeq	fp, r3, r7, asr #1
   17544:	mov	r1, #0
   17548:	b	1750c <__assert_fail@plt+0x4e20>
   1754c:	subs	r5, r0, #0
   17550:	push	{r7, lr}
   17554:	ldr	r6, [pc, #428]	; 17708 <__assert_fail@plt+0x501c>
   17558:	beq	1758c <__assert_fail@plt+0x4ea0>
   1755c:	ldr	r3, [pc, #424]	; 1770c <__assert_fail@plt+0x5020>
   17560:	mov	r2, #5
   17564:	ldr	r1, [pc, #420]	; 17710 <__assert_fail@plt+0x5024>
   17568:	mov	r0, #0
   1756c:	ldr	r4, [r3]
   17570:	bl	1217c <dcgettext@plt>
   17574:	ldr	r2, [r6]
   17578:	mov	r1, r0
   1757c:	mov	r0, r4
   17580:	bl	123f8 <fprintf@plt>
   17584:	mov	r0, r5
   17588:	bl	1238c <exit@plt>
   1758c:	ldr	r4, [pc, #384]	; 17714 <__assert_fail@plt+0x5028>
   17590:	mov	r2, #5
   17594:	ldr	r1, [pc, #380]	; 17718 <__assert_fail@plt+0x502c>
   17598:	ldr	r7, [r4]
   1759c:	bl	1217c <dcgettext@plt>
   175a0:	ldr	r2, [r6]
   175a4:	ldr	r8, [pc, #368]	; 1771c <__assert_fail@plt+0x5030>
   175a8:	ldr	r9, [pc, #368]	; 17720 <__assert_fail@plt+0x5034>
   175ac:	mov	r1, r0
   175b0:	mov	r0, r7
   175b4:	bl	123f8 <fprintf@plt>
   175b8:	mov	r2, #5
   175bc:	ldr	r1, [pc, #352]	; 17724 <__assert_fail@plt+0x5038>
   175c0:	mov	r0, r5
   175c4:	bl	1217c <dcgettext@plt>
   175c8:	ldr	r1, [r4]
   175cc:	bl	12680 <fputs@plt>
   175d0:	mov	r2, #5
   175d4:	ldr	r1, [pc, #332]	; 17728 <__assert_fail@plt+0x503c>
   175d8:	mov	r0, r5
   175dc:	bl	1217c <dcgettext@plt>
   175e0:	ldr	r1, [r4]
   175e4:	bl	12680 <fputs@plt>
   175e8:	mov	r2, #5
   175ec:	ldr	r1, [pc, #312]	; 1772c <__assert_fail@plt+0x5040>
   175f0:	mov	r0, r5
   175f4:	bl	1217c <dcgettext@plt>
   175f8:	ldr	r1, [r4]
   175fc:	bl	12680 <fputs@plt>
   17600:	mov	r2, #5
   17604:	ldr	r1, [pc, #292]	; 17730 <__assert_fail@plt+0x5044>
   17608:	mov	r0, r5
   1760c:	bl	1217c <dcgettext@plt>
   17610:	ldr	r1, [r4]
   17614:	bl	12680 <fputs@plt>
   17618:	mov	r2, #5
   1761c:	ldr	r1, [pc, #272]	; 17734 <__assert_fail@plt+0x5048>
   17620:	mov	r0, r5
   17624:	bl	1217c <dcgettext@plt>
   17628:	ldr	r1, [r4]
   1762c:	bl	12680 <fputs@plt>
   17630:	mov	r2, #5
   17634:	ldr	r1, [pc, #252]	; 17738 <__assert_fail@plt+0x504c>
   17638:	mov	r0, r5
   1763c:	bl	1217c <dcgettext@plt>
   17640:	ldr	r1, [r4]
   17644:	bl	12680 <fputs@plt>
   17648:	mov	r2, #5
   1764c:	ldr	r1, [pc, #232]	; 1773c <__assert_fail@plt+0x5050>
   17650:	mov	r0, r5
   17654:	bl	1217c <dcgettext@plt>
   17658:	ldr	r1, [r4]
   1765c:	bl	12680 <fputs@plt>
   17660:	mov	r2, #5
   17664:	ldr	r1, [pc, #212]	; 17740 <__assert_fail@plt+0x5054>
   17668:	mov	r0, r5
   1766c:	bl	1217c <dcgettext@plt>
   17670:	ldr	r1, [r4]
   17674:	bl	12680 <fputs@plt>
   17678:	mov	r2, #5
   1767c:	ldr	r1, [pc, #192]	; 17744 <__assert_fail@plt+0x5058>
   17680:	mov	r0, r5
   17684:	bl	1217c <dcgettext@plt>
   17688:	ldr	r1, [r4]
   1768c:	bl	12680 <fputs@plt>
   17690:	mov	r2, #5
   17694:	ldr	r1, [pc, #172]	; 17748 <__assert_fail@plt+0x505c>
   17698:	mov	r0, r5
   1769c:	bl	1217c <dcgettext@plt>
   176a0:	ldr	r1, [r4]
   176a4:	bl	12680 <fputs@plt>
   176a8:	ldr	r7, [pc, #156]	; 1774c <__assert_fail@plt+0x5060>
   176ac:	mov	r3, #12
   176b0:	cmp	r5, #0
   176b4:	mul	r3, r3, r5
   176b8:	movne	r2, r8
   176bc:	moveq	r2, r7
   176c0:	ldr	r3, [r3, r9]
   176c4:	ldr	r1, [pc, #132]	; 17750 <__assert_fail@plt+0x5064>
   176c8:	ldr	r0, [r4]
   176cc:	add	r5, r5, #1
   176d0:	bl	123f8 <fprintf@plt>
   176d4:	cmp	r5, #9
   176d8:	bne	176ac <__assert_fail@plt+0x4fc0>
   176dc:	mov	r2, #5
   176e0:	ldr	r1, [pc, #108]	; 17754 <__assert_fail@plt+0x5068>
   176e4:	mov	r0, #0
   176e8:	bl	1217c <dcgettext@plt>
   176ec:	ldr	r1, [r4]
   176f0:	bl	12680 <fputs@plt>
   176f4:	ldr	r1, [r6]
   176f8:	ldr	r0, [r4]
   176fc:	bl	1f7d8 <__assert_fail@plt+0xd0ec>
   17700:	mov	r0, #0
   17704:	b	17588 <__assert_fail@plt+0x4e9c>
   17708:	andeq	r0, r5, ip, lsl sp
   1770c:	andeq	r0, r5, r0, ror #10
   17710:	andeq	fp, r3, r3, ror #1
   17714:	andeq	r0, r5, ip, ror #10
   17718:	andeq	fp, r3, sl, lsl #2
   1771c:	andeq	fp, r3, r0, ror #1
   17720:	andeq	sl, r3, r8, asr #31
   17724:	andeq	fp, r3, r4, asr r1
   17728:	ldrdeq	fp, [r3], -lr
   1772c:	andeq	fp, r3, lr, lsr #5
   17730:	andeq	fp, r3, r3, lsl #6
   17734:	ldrdeq	fp, [r3], -r0
   17738:	andeq	fp, r3, sp, ror #11
   1773c:	andeq	fp, r3, sp, ror #13
   17740:	andeq	fp, r3, r5, lsl #14
   17744:	andeq	fp, r3, r0, asr #14
   17748:	andeq	fp, r3, r5, lsl #15
   1774c:	ldrdeq	fp, [r3], -pc	; <UNPREDICTABLE>
   17750:	ldrdeq	sl, [r3], -ip
   17754:	muleq	r3, lr, r7
   17758:	bx	lr
   1775c:	push	{lr}		; (str lr, [sp, #-4]!)
   17760:	vpush	{d8}
   17764:	sub	sp, sp, #396	; 0x18c
   17768:	mov	r0, sp
   1776c:	bl	12164 <uname@plt>
   17770:	cmp	r0, #0
   17774:	bne	177d0 <__assert_fail@plt+0x50e4>
   17778:	add	r0, sp, #130	; 0x82
   1777c:	bl	1262c <atof@plt>
   17780:	mov	r1, sp
   17784:	ldr	r0, [pc, #84]	; 177e0 <__assert_fail@plt+0x50f4>
   17788:	vcvt.f32.f64	s16, d0
   1778c:	bl	11ffc <strcmp@plt>
   17790:	cmp	r0, #0
   17794:	bne	177b8 <__assert_fail@plt+0x50cc>
   17798:	vldr	s15, [pc, #56]	; 177d8 <__assert_fail@plt+0x50ec>
   1779c:	vcmpe.f32	s16, s15
   177a0:	vmrs	APSR_nzcv, fpscr
   177a4:	movge	r0, #1
   177a8:	movlt	r0, #0
   177ac:	add	sp, sp, #396	; 0x18c
   177b0:	vpop	{d8}
   177b4:	pop	{pc}		; (ldr pc, [sp], #4)
   177b8:	mov	r1, sp
   177bc:	ldr	r0, [pc, #32]	; 177e4 <__assert_fail@plt+0x50f8>
   177c0:	bl	11ffc <strcmp@plt>
   177c4:	cmp	r0, #0
   177c8:	vldreq	s15, [pc, #12]	; 177dc <__assert_fail@plt+0x50f0>
   177cc:	beq	1779c <__assert_fail@plt+0x50b0>
   177d0:	mov	r0, #1
   177d4:	b	177ac <__assert_fail@plt+0x50c0>
   177d8:	andmi	ip, ip, sp, asr #25
   177dc:	submi	r6, r6, r6, ror #12
   177e0:	andeq	fp, r3, r0, ror #15
   177e4:	andeq	fp, r3, r6, ror #15
   177e8:	push	{r4, lr}
   177ec:	ldr	r4, [pc, #28]	; 17810 <__assert_fail@plt+0x5124>
   177f0:	ldrb	r3, [r4, #32]
   177f4:	cmp	r3, #0
   177f8:	popeq	{r4, pc}
   177fc:	bl	15dc8 <__assert_fail@plt+0x36dc>
   17800:	bl	17318 <__assert_fail@plt+0x4c2c>
   17804:	mov	r3, #0
   17808:	strb	r3, [r4, #32]
   1780c:	pop	{r4, pc}
   17810:	andeq	r0, r5, r8, asr lr
   17814:	push	{r0, r1, r2, r4, r5, lr}
   17818:	mov	r0, #8
   1781c:	bl	28d44 <__assert_fail@plt+0x16658>
   17820:	ldr	r4, [pc, #104]	; 17890 <__assert_fail@plt+0x51a4>
   17824:	str	r0, [r4]
   17828:	bl	28170 <__assert_fail@plt+0x15a84>
   1782c:	cmp	r0, #0
   17830:	beq	17888 <__assert_fail@plt+0x519c>
   17834:	bl	12404 <__errno_location@plt>
   17838:	mov	r2, #5
   1783c:	ldr	r1, [pc, #80]	; 17894 <__assert_fail@plt+0x51a8>
   17840:	ldr	r5, [r0]
   17844:	mov	r0, #0
   17848:	bl	1217c <dcgettext@plt>
   1784c:	ldr	r3, [r4]
   17850:	ldr	r1, [r3]
   17854:	cmp	r1, #0
   17858:	mov	r2, r0
   1785c:	bge	17870 <__assert_fail@plt+0x5184>
   17860:	ldr	r1, [r3, #4]
   17864:	cmp	r1, #0
   17868:	ldrne	r3, [pc, #40]	; 17898 <__assert_fail@plt+0x51ac>
   1786c:	bne	17878 <__assert_fail@plt+0x518c>
   17870:	ldr	r3, [pc, #36]	; 1789c <__assert_fail@plt+0x51b0>
   17874:	mov	r1, r3
   17878:	str	r1, [sp]
   1787c:	mov	r0, #1
   17880:	mov	r1, r5
   17884:	bl	122c0 <error@plt>
   17888:	add	sp, sp, #12
   1788c:	pop	{r4, r5, pc}
   17890:	andeq	r0, r5, r0, lsl #11
   17894:	andeq	fp, r3, lr, ror #15
   17898:	andeq	ip, r3, r1, asr r7
   1789c:	ldrdeq	fp, [r3], -pc	; <UNPREDICTABLE>
   178a0:	ldr	r3, [pc, #112]	; 17918 <__assert_fail@plt+0x522c>
   178a4:	push	{r4, r5, r6, lr}
   178a8:	mov	r4, r0
   178ac:	ldr	r0, [r3, #16]
   178b0:	cmn	r0, #100	; 0x64
   178b4:	cmpne	r0, #0
   178b8:	bge	178d0 <__assert_fail@plt+0x51e4>
   178bc:	ldr	r3, [pc, #88]	; 1791c <__assert_fail@plt+0x5230>
   178c0:	ldr	r2, [pc, #88]	; 17920 <__assert_fail@plt+0x5234>
   178c4:	ldr	r1, [pc, #88]	; 17924 <__assert_fail@plt+0x5238>
   178c8:	ldr	r0, [pc, #88]	; 17928 <__assert_fail@plt+0x523c>
   178cc:	bl	126ec <__assert_fail@plt>
   178d0:	ldr	r3, [r3]
   178d4:	mov	r5, r1
   178d8:	cmp	r3, #0
   178dc:	bne	17904 <__assert_fail@plt+0x5218>
   178e0:	mov	r2, r1
   178e4:	mov	r1, r4
   178e8:	bl	39bb4 <__assert_fail@plt+0x274c8>
   178ec:	subs	r2, r0, #0
   178f0:	popeq	{r4, r5, r6, pc}
   178f4:	mov	r1, r5
   178f8:	mov	r0, r4
   178fc:	pop	{r4, r5, r6, lr}
   17900:	b	17454 <__assert_fail@plt+0x4d68>
   17904:	mov	r2, r1
   17908:	mov	r3, #256	; 0x100
   1790c:	mov	r1, r4
   17910:	pop	{r4, r5, r6, lr}
   17914:	b	39bb4 <__assert_fail@plt+0x274c8>
   17918:	andeq	r0, r5, r8, asr lr
   1791c:	andeq	fp, r3, r4, lsr r0
   17920:	andeq	r0, r0, sp, asr r2
   17924:	andeq	fp, r3, sl, rrx
   17928:	andeq	fp, r3, fp, lsl r8
   1792c:	ldr	r3, [pc, #84]	; 17988 <__assert_fail@plt+0x529c>
   17930:	push	{r4, r5, r6, lr}
   17934:	mov	r4, r0
   17938:	ldr	r0, [r3, #16]
   1793c:	cmn	r0, #100	; 0x64
   17940:	cmpne	r0, #0
   17944:	bge	1795c <__assert_fail@plt+0x5270>
   17948:	ldr	r3, [pc, #60]	; 1798c <__assert_fail@plt+0x52a0>
   1794c:	mov	r2, #636	; 0x27c
   17950:	ldr	r1, [pc, #56]	; 17990 <__assert_fail@plt+0x52a4>
   17954:	ldr	r0, [pc, #56]	; 17994 <__assert_fail@plt+0x52a8>
   17958:	bl	126ec <__assert_fail@plt>
   1795c:	mov	r2, r1
   17960:	mov	r5, r1
   17964:	mov	r3, #0
   17968:	mov	r1, r4
   1796c:	bl	39bb4 <__assert_fail@plt+0x274c8>
   17970:	subs	r2, r0, #0
   17974:	popeq	{r4, r5, r6, pc}
   17978:	mov	r1, r5
   1797c:	mov	r0, r4
   17980:	pop	{r4, r5, r6, lr}
   17984:	b	17454 <__assert_fail@plt+0x4d68>
   17988:	andeq	r0, r5, r8, asr lr
   1798c:	andeq	fp, r3, r1, asr #32
   17990:	andeq	fp, r3, sl, rrx
   17994:	andeq	fp, r3, fp, lsl r8
   17998:	ldr	r3, [pc, #56]	; 179d8 <__assert_fail@plt+0x52ec>
   1799c:	mov	ip, r0
   179a0:	ldr	r0, [r3, #16]
   179a4:	cmn	r0, #100	; 0x64
   179a8:	cmpne	r0, #0
   179ac:	bge	179c8 <__assert_fail@plt+0x52dc>
   179b0:	push	{r4, lr}
   179b4:	ldr	r3, [pc, #32]	; 179dc <__assert_fail@plt+0x52f0>
   179b8:	ldr	r2, [pc, #32]	; 179e0 <__assert_fail@plt+0x52f4>
   179bc:	ldr	r1, [pc, #32]	; 179e4 <__assert_fail@plt+0x52f8>
   179c0:	ldr	r0, [pc, #32]	; 179e8 <__assert_fail@plt+0x52fc>
   179c4:	bl	126ec <__assert_fail@plt>
   179c8:	mov	r2, r1
   179cc:	mov	r3, #256	; 0x100
   179d0:	mov	r1, ip
   179d4:	b	39bb4 <__assert_fail@plt+0x274c8>
   179d8:	andeq	r0, r5, r8, asr lr
   179dc:	andeq	fp, r3, lr, asr #32
   179e0:	andeq	r0, r0, sp, lsl #5
   179e4:	andeq	fp, r3, sl, rrx
   179e8:	andeq	fp, r3, r1, lsr r8
   179ec:	push	{r4, r5, r6, lr}
   179f0:	mov	r5, r1
   179f4:	ldr	r1, [pc, #132]	; 17a80 <__assert_fail@plt+0x5394>
   179f8:	mov	r4, r0
   179fc:	ldrd	r2, [r1]
   17a00:	adds	r2, r2, #1
   17a04:	adc	r3, r3, #0
   17a08:	strd	r2, [r1]
   17a0c:	ldr	r3, [pc, #112]	; 17a84 <__assert_fail@plt+0x5398>
   17a10:	mov	r2, r0
   17a14:	ldr	r1, [pc, #108]	; 17a88 <__assert_fail@plt+0x539c>
   17a18:	ldr	r0, [r3]
   17a1c:	bl	123f8 <fprintf@plt>
   17a20:	ldr	r3, [pc, #100]	; 17a8c <__assert_fail@plt+0x53a0>
   17a24:	ldr	r3, [r3, #48]	; 0x30
   17a28:	cmp	r3, #1
   17a2c:	beq	17a50 <__assert_fail@plt+0x5364>
   17a30:	bcc	17a70 <__assert_fail@plt+0x5384>
   17a34:	cmp	r3, #2
   17a38:	beq	17a60 <__assert_fail@plt+0x5374>
   17a3c:	ldr	r3, [pc, #76]	; 17a90 <__assert_fail@plt+0x53a4>
   17a40:	ldr	r2, [pc, #76]	; 17a94 <__assert_fail@plt+0x53a8>
   17a44:	ldr	r1, [pc, #76]	; 17a98 <__assert_fail@plt+0x53ac>
   17a48:	ldr	r0, [pc, #76]	; 17a9c <__assert_fail@plt+0x53b0>
   17a4c:	bl	126ec <__assert_fail@plt>
   17a50:	mov	r1, r5
   17a54:	mov	r0, r4
   17a58:	pop	{r4, r5, r6, lr}
   17a5c:	b	1792c <__assert_fail@plt+0x5240>
   17a60:	mov	r1, r5
   17a64:	mov	r0, r4
   17a68:	pop	{r4, r5, r6, lr}
   17a6c:	b	178a0 <__assert_fail@plt+0x51b4>
   17a70:	mov	r1, r5
   17a74:	mov	r0, r4
   17a78:	pop	{r4, r5, r6, lr}
   17a7c:	b	17998 <__assert_fail@plt+0x52ac>
   17a80:	andeq	r0, r5, r8, lsr #11
   17a84:	andeq	r0, r5, r0, ror #10
   17a88:	andeq	fp, r3, r9, ror #16
   17a8c:	andeq	r0, r5, r4, lsl #29
   17a90:	andeq	fp, r3, fp, asr r0
   17a94:	andeq	r0, r0, r5, lsr #5
   17a98:	andeq	fp, r3, sl, rrx
   17a9c:	andeq	sl, r3, sl, lsr r9
   17aa0:	ldr	r3, [pc, #36]	; 17acc <__assert_fail@plt+0x53e0>
   17aa4:	ldr	r0, [r3, #48]	; 0x30
   17aa8:	cmp	r0, #1
   17aac:	bxeq	lr
   17ab0:	cmp	r0, #2
   17ab4:	movne	r0, #0
   17ab8:	ldreq	r3, [pc, #16]	; 17ad0 <__assert_fail@plt+0x53e4>
   17abc:	ldreq	r0, [r3]
   17ac0:	clzeq	r0, r0
   17ac4:	lsreq	r0, r0, #5
   17ac8:	bx	lr
   17acc:	andeq	r0, r5, r4, lsl #29
   17ad0:	andeq	r0, r5, r8, asr lr
   17ad4:	cmp	r0, #0
   17ad8:	bne	17ae4 <__assert_fail@plt+0x53f8>
   17adc:	mov	r0, #1
   17ae0:	bx	lr
   17ae4:	ldrb	r3, [r0, #17]
   17ae8:	cmp	r3, #0
   17aec:	ldreq	r0, [r0, #152]	; 0x98
   17af0:	beq	17ad4 <__assert_fail@plt+0x53e8>
   17af4:	mov	r0, #0
   17af8:	bx	lr
   17afc:	ldrb	r3, [r0]
   17b00:	sub	r3, r3, #33	; 0x21
   17b04:	cmp	r3, #12
   17b08:	ldrls	pc, [pc, r3, lsl #2]
   17b0c:	b	17b78 <__assert_fail@plt+0x548c>
   17b10:	andeq	r7, r1, r8, ror #22
   17b14:	andeq	r7, r1, r8, ror fp
   17b18:	andeq	r7, r1, r8, ror fp
   17b1c:	andeq	r7, r1, r8, ror fp
   17b20:	andeq	r7, r1, r8, ror fp
   17b24:	andeq	r7, r1, r8, ror fp
   17b28:	andeq	r7, r1, r8, ror fp
   17b2c:	andeq	r7, r1, r8, ror #22
   17b30:	andeq	r7, r1, r4, asr fp
   17b34:	andeq	r7, r1, r8, ror fp
   17b38:	andeq	r7, r1, r8, ror fp
   17b3c:	andeq	r7, r1, r4, asr fp
   17b40:	andeq	r7, r1, r4, asr #22
   17b44:	ldrb	r0, [r0, #1]
   17b48:	adds	r0, r0, #0
   17b4c:	movne	r0, #1
   17b50:	bx	lr
   17b54:	ldrb	r3, [r0, #1]
   17b58:	cmp	r3, #0
   17b5c:	bne	17b78 <__assert_fail@plt+0x548c>
   17b60:	eor	r0, r1, #1
   17b64:	bx	lr
   17b68:	ldrb	r0, [r0, #1]
   17b6c:	clz	r0, r0
   17b70:	lsr	r0, r0, #5
   17b74:	bx	lr
   17b78:	mov	r0, #0
   17b7c:	bx	lr
   17b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b84:	mov	r9, r0
   17b88:	ldr	fp, [pc, #880]	; 17f00 <__assert_fail@plt+0x5814>
   17b8c:	sub	sp, sp, #20
   17b90:	mov	sl, r1
   17b94:	mov	r4, #1
   17b98:	cmp	r4, r9
   17b9c:	bge	17c10 <__assert_fail@plt+0x5524>
   17ba0:	ldr	r5, [sl, r4, lsl #2]
   17ba4:	ldr	r0, [pc, #856]	; 17f04 <__assert_fail@plt+0x5818>
   17ba8:	mov	r1, r5
   17bac:	bl	11ffc <strcmp@plt>
   17bb0:	lsl	r6, r4, #2
   17bb4:	cmp	r0, #0
   17bb8:	moveq	r0, #2
   17bbc:	beq	17bd8 <__assert_fail@plt+0x54ec>
   17bc0:	mov	r1, r5
   17bc4:	ldr	r0, [pc, #828]	; 17f08 <__assert_fail@plt+0x581c>
   17bc8:	bl	11ffc <strcmp@plt>
   17bcc:	cmp	r0, #0
   17bd0:	bne	17be4 <__assert_fail@plt+0x54f8>
   17bd4:	mov	r0, #1
   17bd8:	bl	1d6cc <__assert_fail@plt+0xafe0>
   17bdc:	add	r4, r4, #1
   17be0:	b	17b98 <__assert_fail@plt+0x54ac>
   17be4:	mov	r1, r5
   17be8:	ldr	r0, [pc, #796]	; 17f0c <__assert_fail@plt+0x5820>
   17bec:	bl	11ffc <strcmp@plt>
   17bf0:	cmp	r0, #0
   17bf4:	beq	17bd8 <__assert_fail@plt+0x54ec>
   17bf8:	mov	r1, r5
   17bfc:	ldr	r0, [pc, #780]	; 17f10 <__assert_fail@plt+0x5824>
   17c00:	bl	11ffc <strcmp@plt>
   17c04:	cmp	r0, #0
   17c08:	bne	17c1c <__assert_fail@plt+0x5530>
   17c0c:	add	r4, r4, #1
   17c10:	mov	r0, r4
   17c14:	add	sp, sp, #20
   17c18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c1c:	mov	r1, r5
   17c20:	ldr	r0, [pc, #748]	; 17f14 <__assert_fail@plt+0x5828>
   17c24:	bl	11ffc <strcmp@plt>
   17c28:	subs	r7, r0, #0
   17c2c:	bne	17dcc <__assert_fail@plt+0x56e0>
   17c30:	add	r4, r4, #1
   17c34:	cmp	r9, r4
   17c38:	bgt	17c60 <__assert_fail@plt+0x5574>
   17c3c:	mov	r2, #5
   17c40:	ldr	r1, [pc, #720]	; 17f18 <__assert_fail@plt+0x582c>
   17c44:	bl	1217c <dcgettext@plt>
   17c48:	mov	r1, r7
   17c4c:	mov	r2, r0
   17c50:	mov	r0, r1
   17c54:	bl	122c0 <error@plt>
   17c58:	mov	r0, #1
   17c5c:	bl	1754c <__assert_fail@plt+0x4e60>
   17c60:	add	r6, sl, r6
   17c64:	mov	r3, #44	; 0x2c
   17c68:	ldr	r8, [r6, #4]
   17c6c:	add	r2, sp, #12
   17c70:	add	r1, sp, #8
   17c74:	mov	r0, r8
   17c78:	str	r7, [sp, #12]
   17c7c:	strh	r3, [sp, #8]
   17c80:	bl	122b4 <strtok_r@plt>
   17c84:	ldr	r7, [pc, #656]	; 17f1c <__assert_fail@plt+0x5830>
   17c88:	mov	r6, #1
   17c8c:	mov	r5, r0
   17c90:	cmp	r5, #0
   17c94:	bne	17cbc <__assert_fail@plt+0x55d0>
   17c98:	cmp	r6, #0
   17c9c:	beq	17d68 <__assert_fail@plt+0x567c>
   17ca0:	mov	r2, #5
   17ca4:	ldr	r1, [pc, #628]	; 17f20 <__assert_fail@plt+0x5834>
   17ca8:	mov	r0, r5
   17cac:	bl	1217c <dcgettext@plt>
   17cb0:	mov	r1, r5
   17cb4:	mov	r2, r0
   17cb8:	b	17c50 <__assert_fail@plt+0x5564>
   17cbc:	mov	r6, #0
   17cc0:	mov	r2, #12
   17cc4:	mul	r3, r2, r6
   17cc8:	str	r2, [sp, #4]
   17ccc:	ldr	r2, [pc, #592]	; 17f24 <__assert_fail@plt+0x5838>
   17cd0:	mov	r1, r5
   17cd4:	str	r3, [sp]
   17cd8:	ldr	r0, [r3, r2]
   17cdc:	bl	11ffc <strcmp@plt>
   17ce0:	ldr	r3, [sp]
   17ce4:	ldr	r2, [sp, #4]
   17ce8:	cmp	r0, #0
   17cec:	bne	17d20 <__assert_fail@plt+0x5634>
   17cf0:	add	r3, fp, r3
   17cf4:	ldr	r2, [r7, #44]	; 0x2c
   17cf8:	ldr	r3, [r3, #48]	; 0x30
   17cfc:	orr	r3, r2, r3
   17d00:	str	r3, [r7, #44]	; 0x2c
   17d04:	add	r2, sp, #12
   17d08:	add	r1, sp, #8
   17d0c:	mov	r0, #0
   17d10:	bl	122b4 <strtok_r@plt>
   17d14:	mov	r6, #0
   17d18:	mov	r5, r0
   17d1c:	b	17c90 <__assert_fail@plt+0x55a4>
   17d20:	add	r6, r6, #1
   17d24:	cmp	r6, #9
   17d28:	bne	17cc4 <__assert_fail@plt+0x55d8>
   17d2c:	mov	r2, #5
   17d30:	ldr	r1, [pc, #496]	; 17f28 <__assert_fail@plt+0x583c>
   17d34:	mov	r0, #0
   17d38:	bl	1217c <dcgettext@plt>
   17d3c:	mov	r2, r8
   17d40:	ldr	r1, [r7, #72]	; 0x48
   17d44:	mov	r5, r0
   17d48:	mov	r0, #0
   17d4c:	bl	27f14 <__assert_fail@plt+0x15828>
   17d50:	mov	r1, #0
   17d54:	mov	r2, r5
   17d58:	mov	r3, r0
   17d5c:	mov	r0, r1
   17d60:	bl	122c0 <error@plt>
   17d64:	b	17d04 <__assert_fail@plt+0x5618>
   17d68:	ldr	r3, [pc, #428]	; 17f1c <__assert_fail@plt+0x5830>
   17d6c:	ldr	r3, [r3, #44]	; 0x2c
   17d70:	tst	r3, #16
   17d74:	beq	17bdc <__assert_fail@plt+0x54f0>
   17d78:	ldr	r5, [pc, #428]	; 17f2c <__assert_fail@plt+0x5840>
   17d7c:	mov	r2, #5
   17d80:	ldr	r1, [pc, #424]	; 17f30 <__assert_fail@plt+0x5844>
   17d84:	mov	r0, r6
   17d88:	bl	1217c <dcgettext@plt>
   17d8c:	ldr	r1, [r5]
   17d90:	bl	12680 <fputs@plt>
   17d94:	mov	r4, r6
   17d98:	ldr	r7, [pc, #404]	; 17f34 <__assert_fail@plt+0x5848>
   17d9c:	ldr	r6, [pc, #384]	; 17f24 <__assert_fail@plt+0x5838>
   17da0:	add	r3, r6, r4
   17da4:	ldr	r2, [r4, r6]
   17da8:	ldr	r3, [r3, #8]
   17dac:	mov	r1, r7
   17db0:	ldr	r0, [r5]
   17db4:	add	r4, r4, #12
   17db8:	bl	123f8 <fprintf@plt>
   17dbc:	cmp	r4, #108	; 0x6c
   17dc0:	bne	17da0 <__assert_fail@plt+0x56b4>
   17dc4:	mov	r0, #0
   17dc8:	bl	1238c <exit@plt>
   17dcc:	mov	r2, #2
   17dd0:	mov	r1, r5
   17dd4:	ldr	r0, [pc, #348]	; 17f38 <__assert_fail@plt+0x584c>
   17dd8:	bl	1268c <strncmp@plt>
   17ddc:	subs	r7, r0, #0
   17de0:	bne	17c10 <__assert_fail@plt+0x5524>
   17de4:	add	r6, r5, #2
   17de8:	ldrb	r5, [r5, #2]
   17dec:	cmp	r5, #0
   17df0:	bne	17e10 <__assert_fail@plt+0x5724>
   17df4:	ldr	r1, [pc, #320]	; 17f3c <__assert_fail@plt+0x5850>
   17df8:	mov	r2, #5
   17dfc:	bl	1217c <dcgettext@plt>
   17e00:	mov	r1, #0
   17e04:	mov	r2, r0
   17e08:	mov	r0, #1
   17e0c:	bl	122c0 <error@plt>
   17e10:	bl	12374 <__ctype_b_loc@plt>
   17e14:	lsl	r5, r5, #1
   17e18:	ldr	r3, [r0]
   17e1c:	ldrh	r5, [r3, r5]
   17e20:	ands	r5, r5, #2048	; 0x800
   17e24:	moveq	r2, #5
   17e28:	ldreq	r1, [pc, #272]	; 17f40 <__assert_fail@plt+0x5854>
   17e2c:	moveq	r0, r5
   17e30:	beq	17dfc <__assert_fail@plt+0x5710>
   17e34:	bl	12404 <__errno_location@plt>
   17e38:	mov	r2, #10
   17e3c:	add	r1, sp, #12
   17e40:	ldr	r8, [r0]
   17e44:	mov	r5, r0
   17e48:	str	r7, [r0]
   17e4c:	mov	r0, r6
   17e50:	bl	123b0 <strtoul@plt>
   17e54:	ldr	r3, [sp, #12]
   17e58:	subs	r7, r0, #0
   17e5c:	bne	17e70 <__assert_fail@plt+0x5784>
   17e60:	cmp	r6, r3
   17e64:	moveq	r2, #5
   17e68:	ldreq	r1, [pc, #208]	; 17f40 <__assert_fail@plt+0x5854>
   17e6c:	beq	17dfc <__assert_fail@plt+0x5710>
   17e70:	ldrb	r0, [r3]
   17e74:	cmp	r0, #0
   17e78:	beq	17ea0 <__assert_fail@plt+0x57b4>
   17e7c:	mov	r2, #5
   17e80:	ldr	r1, [pc, #188]	; 17f44 <__assert_fail@plt+0x5858>
   17e84:	mov	r0, #0
   17e88:	bl	1217c <dcgettext@plt>
   17e8c:	mov	r3, r6
   17e90:	mov	r2, r0
   17e94:	mov	r1, #0
   17e98:	mov	r0, #1
   17e9c:	bl	122c0 <error@plt>
   17ea0:	cmn	r7, #1
   17ea4:	bne	17ee8 <__assert_fail@plt+0x57fc>
   17ea8:	ldr	r4, [r5]
   17eac:	cmp	r4, #0
   17eb0:	bne	17ecc <__assert_fail@plt+0x57e0>
   17eb4:	mov	r2, #5
   17eb8:	ldr	r1, [pc, #136]	; 17f48 <__assert_fail@plt+0x585c>
   17ebc:	mov	r0, #0
   17ec0:	bl	1217c <dcgettext@plt>
   17ec4:	mov	r3, r7
   17ec8:	b	17e90 <__assert_fail@plt+0x57a4>
   17ecc:	mov	r2, #5
   17ed0:	ldr	r1, [pc, #108]	; 17f44 <__assert_fail@plt+0x5858>
   17ed4:	bl	1217c <dcgettext@plt>
   17ed8:	mov	r3, r6
   17edc:	mov	r1, r4
   17ee0:	mov	r2, r0
   17ee4:	b	17e98 <__assert_fail@plt+0x57ac>
   17ee8:	cmp	r7, #65536	; 0x10000
   17eec:	bcs	17eb4 <__assert_fail@plt+0x57c8>
   17ef0:	ldr	r3, [pc, #36]	; 17f1c <__assert_fail@plt+0x5830>
   17ef4:	strh	r7, [r3, #68]	; 0x44
   17ef8:	str	r8, [r5]
   17efc:	b	17bdc <__assert_fail@plt+0x54f0>
   17f00:	muleq	r3, ip, pc	; <UNPREDICTABLE>
   17f04:	andeq	fp, r3, sl, ror r8
   17f08:	andeq	fp, r3, sp, ror r8
   17f0c:	andeq	fp, r3, r0, lsl #17
   17f10:	andeq	fp, r3, r3, lsl #17
   17f14:	andeq	fp, r3, r6, lsl #17
   17f18:	andeq	fp, r3, r9, lsl #17
   17f1c:	andeq	r0, r5, r4, lsl #29
   17f20:	andeq	fp, r3, pc, lsr #17
   17f24:	andeq	sl, r3, r8, asr #31
   17f28:	ldrdeq	fp, [r3], -r5
   17f2c:	andeq	r0, r5, ip, ror #10
   17f30:	andeq	fp, r3, r5, lsl #15
   17f34:	ldrdeq	fp, [r3], -r0
   17f38:	andeq	fp, r3, ip, asr #18
   17f3c:	ldrdeq	fp, [r3], -sl
   17f40:	andeq	fp, r3, sl, lsl r9
   17f44:	andeq	fp, r3, pc, asr #18
   17f48:	andeq	fp, r3, sp, ror #18
   17f4c:	push	{r0, r1, r2, r4, r5, lr}
   17f50:	mov	r4, r0
   17f54:	ldr	r0, [pc, #332]	; 180a8 <__assert_fail@plt+0x59bc>
   17f58:	bl	122fc <getenv@plt>
   17f5c:	mov	r5, #0
   17f60:	cmp	r0, #0
   17f64:	movne	r3, #1
   17f68:	strbne	r3, [r4, #17]
   17f6c:	strbeq	r0, [r4, #17]
   17f70:	bl	1775c <__assert_fail@plt+0x5070>
   17f74:	str	r5, [r4, #60]	; 0x3c
   17f78:	strb	r0, [r4, #56]	; 0x38
   17f7c:	mov	r0, r5
   17f80:	bl	1265c <isatty@plt>
   17f84:	cmp	r0, #0
   17f88:	movne	r3, #1
   17f8c:	strbne	r3, [r4, #16]
   17f90:	ldrb	r3, [r4, #17]
   17f94:	strbne	r5, [r4, #15]
   17f98:	strbeq	r0, [r4, #16]
   17f9c:	strbeq	r0, [r4, #15]
   17fa0:	cmp	r3, #0
   17fa4:	movne	r3, #0
   17fa8:	strbne	r3, [r4, #16]
   17fac:	mov	r3, #1
   17fb0:	mov	r5, #0
   17fb4:	strb	r3, [r4]
   17fb8:	mvn	r3, #0
   17fbc:	strb	r5, [r4, #1]
   17fc0:	str	r3, [r4, #8]
   17fc4:	str	r3, [r4, #4]
   17fc8:	mov	r1, r5
   17fcc:	mov	r0, sp
   17fd0:	bl	12284 <gettimeofday@plt>
   17fd4:	cmp	r0, r5
   17fd8:	bne	18064 <__assert_fail@plt+0x5978>
   17fdc:	ldr	r3, [sp, #4]
   17fe0:	mov	r5, #1000	; 0x3e8
   17fe4:	ldr	r0, [sp]
   17fe8:	mul	r5, r5, r3
   17fec:	ldrb	r2, [r4, #17]
   17ff0:	mov	r3, #0
   17ff4:	str	r0, [r4, #20]
   17ff8:	cmp	r2, r3
   17ffc:	sub	r0, r0, #86016	; 0x15000
   18000:	movne	r2, #512	; 0x200
   18004:	moveq	r2, #1024	; 0x400
   18008:	sub	r0, r0, #384	; 0x180
   1800c:	strb	r3, [r4, #36]	; 0x24
   18010:	strb	r3, [r4, #13]
   18014:	strb	r3, [r4, #14]
   18018:	str	r3, [r4, #44]	; 0x2c
   1801c:	mov	r3, #2
   18020:	str	r5, [r4, #24]
   18024:	str	r0, [r4, #28]
   18028:	str	r5, [r4, #32]
   1802c:	str	r2, [r4, #40]	; 0x28
   18030:	strh	r3, [r4, #68]	; 0x44
   18034:	ldr	r0, [pc, #112]	; 180ac <__assert_fail@plt+0x59c0>
   18038:	bl	122fc <getenv@plt>
   1803c:	subs	r5, r0, #0
   18040:	beq	18088 <__assert_fail@plt+0x599c>
   18044:	mov	r2, #5
   18048:	ldr	r1, [pc, #96]	; 180b0 <__assert_fail@plt+0x59c4>
   1804c:	mov	r0, #0
   18050:	bl	1217c <dcgettext@plt>
   18054:	mov	r1, #0
   18058:	mov	r2, r0
   1805c:	mov	r0, #1
   18060:	bl	122c0 <error@plt>
   18064:	mov	r0, r5
   18068:	bl	1214c <time@plt>
   1806c:	cmn	r0, #1
   18070:	bne	17fec <__assert_fail@plt+0x5900>
   18074:	ldr	r3, [pc, #56]	; 180b4 <__assert_fail@plt+0x59c8>
   18078:	ldr	r2, [pc, #56]	; 180b8 <__assert_fail@plt+0x59cc>
   1807c:	ldr	r1, [pc, #56]	; 180bc <__assert_fail@plt+0x59d0>
   18080:	ldr	r0, [pc, #56]	; 180c0 <__assert_fail@plt+0x59d4>
   18084:	bl	126ec <__assert_fail@plt>
   18088:	strb	r5, [r4, #12]
   1808c:	bl	1d6cc <__assert_fail@plt+0xafe0>
   18090:	mov	r3, #8
   18094:	str	r3, [r4, #72]	; 0x48
   18098:	str	r5, [r4, #76]	; 0x4c
   1809c:	strb	r5, [r4, #80]	; 0x50
   180a0:	add	sp, sp, #12
   180a4:	pop	{r4, r5, pc}
   180a8:	strdeq	fp, [r3], -r9
   180ac:	andeq	fp, r3, r9, lsl sl
   180b0:	andeq	fp, r3, r9, lsr #20
   180b4:	andeq	fp, r3, r6, rrx
   180b8:	ldrdeq	r0, [r0], -r2
   180bc:	andeq	fp, r3, sl, rrx
   180c0:	andeq	fp, r3, r9, lsl #20
   180c4:	ldr	r3, [pc, #20]	; 180e0 <__assert_fail@plt+0x59f4>
   180c8:	ldr	r2, [pc, #20]	; 180e4 <__assert_fail@plt+0x59f8>
   180cc:	cmp	r3, r0
   180d0:	cmpne	r2, r0
   180d4:	moveq	r0, #1
   180d8:	movne	r0, #0
   180dc:	bx	lr
   180e0:	andeq	r3, r1, r0, lsl #30
   180e4:	andeq	r4, r1, ip, lsl #9
   180e8:	ldr	r3, [pc, #8]	; 180f8 <__assert_fail@plt+0x5a0c>
   180ec:	mov	r2, r1
   180f0:	ldr	r1, [r3, #72]	; 0x48
   180f4:	b	27f14 <__assert_fail@plt+0x15828>
   180f8:	andeq	r0, r5, r4, lsl #29
   180fc:	push	{r4, r5, r6, r7, r8, lr}
   18100:	subs	r4, r2, #0
   18104:	mov	r7, r1
   18108:	ldr	r5, [pc, #80]	; 18160 <__assert_fail@plt+0x5a74>
   1810c:	beq	18128 <__assert_fail@plt+0x5a3c>
   18110:	ldrb	r2, [r5, #40]	; 0x28
   18114:	cmp	r2, #0
   18118:	beq	18128 <__assert_fail@plt+0x5a3c>
   1811c:	mov	r3, #1
   18120:	strb	r3, [r5, #40]	; 0x28
   18124:	pop	{r4, r5, r6, r7, r8, pc}
   18128:	mov	r1, r3
   1812c:	mov	r6, r0
   18130:	mov	r0, #0
   18134:	bl	180e8 <__assert_fail@plt+0x59fc>
   18138:	ldr	r2, [pc, #36]	; 18164 <__assert_fail@plt+0x5a78>
   1813c:	mov	r1, r7
   18140:	mov	r3, r0
   18144:	mov	r0, r6
   18148:	bl	122c0 <error@plt>
   1814c:	mov	r3, #1
   18150:	cmp	r4, #0
   18154:	str	r3, [r5, #28]
   18158:	bne	1811c <__assert_fail@plt+0x5a30>
   1815c:	pop	{r4, r5, r6, r7, r8, pc}
   18160:	andeq	r0, r5, r8, asr lr
   18164:	andeq	pc, r3, pc, lsr #9
   18168:	mov	r3, r1
   1816c:	mov	r2, #1
   18170:	mov	r1, r0
   18174:	mov	r0, #0
   18178:	b	180fc <__assert_fail@plt+0x5a10>
   1817c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18180:	mov	r8, r2
   18184:	ldr	r4, [pc, #196]	; 18250 <__assert_fail@plt+0x5b64>
   18188:	ldrb	r3, [r4, #4]
   1818c:	cmp	r3, #0
   18190:	bne	18200 <__assert_fail@plt+0x5b14>
   18194:	ldr	r5, [pc, #184]	; 18254 <__assert_fail@plt+0x5b68>
   18198:	mov	r7, r1
   1819c:	mov	r6, r0
   181a0:	ldr	r3, [r5, #52]	; 0x34
   181a4:	mov	r1, r2
   181a8:	mov	r0, r7
   181ac:	blx	r3
   181b0:	cmp	r0, #0
   181b4:	bne	1821c <__assert_fail@plt+0x5b30>
   181b8:	ldr	r6, [r8, #16]
   181bc:	cmp	r6, #0
   181c0:	bne	18200 <__assert_fail@plt+0x5b14>
   181c4:	mov	r2, #5
   181c8:	ldr	r1, [pc, #136]	; 18258 <__assert_fail@plt+0x5b6c>
   181cc:	bl	1217c <dcgettext@plt>
   181d0:	mov	r2, r7
   181d4:	ldr	r1, [r5, #72]	; 0x48
   181d8:	mov	r9, r0
   181dc:	mov	r0, r6
   181e0:	bl	27f14 <__assert_fail@plt+0x15828>
   181e4:	mov	r2, r9
   181e8:	mov	r1, r6
   181ec:	mov	r3, r0
   181f0:	mov	r0, r6
   181f4:	bl	122c0 <error@plt>
   181f8:	mov	r3, #1
   181fc:	str	r3, [r4, #28]
   18200:	mov	r3, #1
   18204:	strb	r3, [r4, #4]
   18208:	strb	r3, [r4, #5]
   1820c:	ldr	r3, [r8, #16]
   18210:	mov	r0, #0
   18214:	str	r3, [r4, #8]
   18218:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1821c:	ldrb	r3, [r5, #14]
   18220:	cmp	r3, #0
   18224:	beq	18238 <__assert_fail@plt+0x5b4c>
   18228:	bl	12404 <__errno_location@plt>
   1822c:	ldr	r3, [r0]
   18230:	cmp	r3, #2
   18234:	beq	18248 <__assert_fail@plt+0x5b5c>
   18238:	bl	12404 <__errno_location@plt>
   1823c:	mov	r1, r6
   18240:	ldr	r0, [r0]
   18244:	bl	18168 <__assert_fail@plt+0x5a7c>
   18248:	mvn	r0, #0
   1824c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18250:	andeq	r0, r5, r8, asr lr
   18254:	andeq	r0, r5, r4, lsl #29
   18258:	andeq	r9, r3, r7, lsr lr
   1825c:	push	{r4, r5, r6, r7, r8, lr}
   18260:	mov	r6, r1
   18264:	mov	r1, r2
   18268:	ldr	r2, [r0]
   1826c:	mov	r7, r0
   18270:	cmp	r2, #0
   18274:	mov	r5, r3
   18278:	ldrb	r4, [sp, #24]
   1827c:	beq	182ec <__assert_fail@plt+0x5c00>
   18280:	and	r3, r2, #61440	; 0xf000
   18284:	cmp	r3, #40960	; 0xa000
   18288:	bne	182d4 <__assert_fail@plt+0x5be8>
   1828c:	bl	17aa0 <__assert_fail@plt+0x53b4>
   18290:	subs	r4, r0, #0
   18294:	beq	182d4 <__assert_fail@plt+0x5be8>
   18298:	mov	r2, r5
   1829c:	mov	r0, r6
   182a0:	bl	1817c <__assert_fail@plt+0x5a90>
   182a4:	cmp	r0, #0
   182a8:	beq	182b8 <__assert_fail@plt+0x5bcc>
   182ac:	mov	r4, #0
   182b0:	mov	r0, r4
   182b4:	pop	{r4, r5, r6, r7, r8, pc}
   182b8:	ldr	r3, [pc, #116]	; 18334 <__assert_fail@plt+0x5c48>
   182bc:	ldr	r2, [r5, #16]
   182c0:	str	r2, [r3, #8]
   182c4:	str	r2, [r7]
   182c8:	mov	r2, #1
   182cc:	strb	r2, [r3, #5]
   182d0:	b	182b0 <__assert_fail@plt+0x5bc4>
   182d4:	ldr	r3, [pc, #88]	; 18334 <__assert_fail@plt+0x5c48>
   182d8:	mov	r4, #1
   182dc:	str	r2, [r5, #16]
   182e0:	strb	r4, [r3, #5]
   182e4:	str	r2, [r3, #8]
   182e8:	b	182b0 <__assert_fail@plt+0x5bc4>
   182ec:	cmp	r4, #0
   182f0:	ldrne	r3, [pc, #60]	; 18334 <__assert_fail@plt+0x5c48>
   182f4:	strbne	r2, [r3, #4]
   182f8:	strbne	r2, [r3, #5]
   182fc:	strne	r2, [r3, #8]
   18300:	bne	182b0 <__assert_fail@plt+0x5bc4>
   18304:	mov	r2, r3
   18308:	mov	r0, r6
   1830c:	bl	1817c <__assert_fail@plt+0x5a90>
   18310:	cmp	r0, #0
   18314:	bne	182ac <__assert_fail@plt+0x5bc0>
   18318:	ldr	r3, [pc, #20]	; 18334 <__assert_fail@plt+0x5c48>
   1831c:	ldr	r2, [r5, #16]
   18320:	mov	r4, #1
   18324:	str	r2, [r7]
   18328:	str	r2, [r3, #8]
   1832c:	strb	r4, [r3, #5]
   18330:	b	182b0 <__assert_fail@plt+0x5bc4>
   18334:	andeq	r0, r5, r8, asr lr
   18338:	ldr	r3, [r2, #164]	; 0xa4
   1833c:	push	{r4, r5, r6, lr}
   18340:	add	r3, r3, #1
   18344:	str	r3, [r2, #164]	; 0xa4
   18348:	ldrh	r3, [r2, #18]
   1834c:	mov	r6, r0
   18350:	mov	r5, r1
   18354:	cmp	r3, #0
   18358:	mov	r4, r2
   1835c:	bne	18390 <__assert_fail@plt+0x5ca4>
   18360:	ldrb	r3, [r2, #20]
   18364:	cmp	r3, #0
   18368:	bne	18390 <__assert_fail@plt+0x5ca4>
   1836c:	ldr	r3, [r4]
   18370:	mov	r2, r4
   18374:	mov	r1, r5
   18378:	mov	r0, r6
   1837c:	blx	r3
   18380:	cmp	r0, #0
   18384:	bne	18420 <__assert_fail@plt+0x5d34>
   18388:	mov	r0, #0
   1838c:	pop	{r4, r5, r6, pc}
   18390:	ldrb	r3, [r4, #18]
   18394:	cmp	r3, #0
   18398:	beq	183ac <__assert_fail@plt+0x5cc0>
   1839c:	ldr	r3, [pc, #140]	; 18430 <__assert_fail@plt+0x5d44>
   183a0:	ldrb	r3, [r3, #4]
   183a4:	cmp	r3, #0
   183a8:	beq	18400 <__assert_fail@plt+0x5d14>
   183ac:	ldrb	r3, [r4, #19]
   183b0:	cmp	r3, #0
   183b4:	beq	183c8 <__assert_fail@plt+0x5cdc>
   183b8:	ldr	r3, [pc, #112]	; 18430 <__assert_fail@plt+0x5d44>
   183bc:	ldrb	r3, [r3, #5]
   183c0:	cmp	r3, #0
   183c4:	beq	18400 <__assert_fail@plt+0x5d14>
   183c8:	ldrb	r3, [r4, #20]
   183cc:	cmp	r3, #0
   183d0:	beq	1836c <__assert_fail@plt+0x5c80>
   183d4:	ldrd	r2, [r5, #96]	; 0x60
   183d8:	orrs	r3, r2, r3
   183dc:	beq	18400 <__assert_fail@plt+0x5d14>
   183e0:	ldr	r3, [pc, #72]	; 18430 <__assert_fail@plt+0x5d44>
   183e4:	ldrb	r3, [r3, #5]
   183e8:	cmp	r3, #0
   183ec:	beq	18400 <__assert_fail@plt+0x5d14>
   183f0:	ldr	r3, [r5, #16]
   183f4:	and	r3, r3, #61440	; 0xf000
   183f8:	cmp	r3, #16384	; 0x4000
   183fc:	bne	1836c <__assert_fail@plt+0x5c80>
   18400:	ldr	r3, [pc, #40]	; 18430 <__assert_fail@plt+0x5d44>
   18404:	mov	r2, r5
   18408:	mov	r0, r6
   1840c:	ldr	r1, [r3, #12]
   18410:	bl	1817c <__assert_fail@plt+0x5a90>
   18414:	cmp	r0, #0
   18418:	beq	1836c <__assert_fail@plt+0x5c80>
   1841c:	b	18388 <__assert_fail@plt+0x5c9c>
   18420:	ldr	r3, [r4, #168]	; 0xa8
   18424:	add	r3, r3, #1
   18428:	str	r3, [r4, #168]	; 0xa8
   1842c:	pop	{r4, r5, r6, pc}
   18430:	andeq	r0, r5, r8, asr lr
   18434:	mov	r2, #1
   18438:	mov	r3, r1
   1843c:	push	{r4, lr}
   18440:	mov	r1, r0
   18444:	mov	r0, r2
   18448:	bl	180fc <__assert_fail@plt+0x5a10>
   1844c:	bl	12698 <abort@plt>
   18450:	mov	r2, #0
   18454:	mov	r3, r1
   18458:	mov	r1, r0
   1845c:	mov	r0, r2
   18460:	b	180fc <__assert_fail@plt+0x5a10>
   18464:	push	{r0, r1, r2, r4, r5, lr}
   18468:	bl	15dc8 <__assert_fail@plt+0x36dc>
   1846c:	subs	r4, r0, #0
   18470:	beq	18480 <__assert_fail@plt+0x5d94>
   18474:	ldr	r1, [pc, #240]	; 1856c <__assert_fail@plt+0x5e80>
   18478:	bl	1728c <__assert_fail@plt+0x4ba0>
   1847c:	bl	177e8 <__assert_fail@plt+0x50fc>
   18480:	ldr	r3, [pc, #232]	; 18570 <__assert_fail@plt+0x5e84>
   18484:	ldr	r0, [r3, #36]	; 0x24
   18488:	bl	186ec <__assert_fail@plt+0x6000>
   1848c:	cmp	r4, #0
   18490:	beq	184a0 <__assert_fail@plt+0x5db4>
   18494:	ldr	r1, [pc, #216]	; 18574 <__assert_fail@plt+0x5e88>
   18498:	mov	r0, r4
   1849c:	bl	1728c <__assert_fail@plt+0x4ba0>
   184a0:	ldr	r4, [pc, #208]	; 18578 <__assert_fail@plt+0x5e8c>
   184a4:	ldr	r0, [r4]
   184a8:	bl	281c4 <__assert_fail@plt+0x15ad8>
   184ac:	subs	r5, r0, #0
   184b0:	bne	18508 <__assert_fail@plt+0x5e1c>
   184b4:	ldr	r0, [r4]
   184b8:	bl	281e0 <__assert_fail@plt+0x15af4>
   184bc:	ldr	r0, [r4]
   184c0:	bl	2a01c <__assert_fail@plt+0x17930>
   184c4:	str	r5, [r4]
   184c8:	bl	1e934 <__assert_fail@plt+0xc248>
   184cc:	cmp	r0, #0
   184d0:	beq	184dc <__assert_fail@plt+0x5df0>
   184d4:	bl	1e950 <__assert_fail@plt+0xc264>
   184d8:	bl	1e910 <__assert_fail@plt+0xc224>
   184dc:	ldr	r3, [pc, #152]	; 1857c <__assert_fail@plt+0x5e90>
   184e0:	ldr	r0, [r3]
   184e4:	bl	29fcc <__assert_fail@plt+0x178e0>
   184e8:	cmn	r0, #1
   184ec:	bne	18564 <__assert_fail@plt+0x5e78>
   184f0:	bl	12404 <__errno_location@plt>
   184f4:	ldr	r1, [pc, #132]	; 18580 <__assert_fail@plt+0x5e94>
   184f8:	ldr	r0, [r0]
   184fc:	add	sp, sp, #12
   18500:	pop	{r4, r5, lr}
   18504:	b	18450 <__assert_fail@plt+0x5d64>
   18508:	bl	12404 <__errno_location@plt>
   1850c:	mov	r2, #5
   18510:	ldr	r1, [pc, #108]	; 18584 <__assert_fail@plt+0x5e98>
   18514:	ldr	r5, [r0]
   18518:	mov	r0, #0
   1851c:	bl	1217c <dcgettext@plt>
   18520:	ldr	r3, [r4]
   18524:	ldr	r1, [r3]
   18528:	cmp	r1, #0
   1852c:	mov	r2, r0
   18530:	bge	18544 <__assert_fail@plt+0x5e58>
   18534:	ldr	r1, [r3, #4]
   18538:	cmp	r1, #0
   1853c:	ldrne	r3, [pc, #68]	; 18588 <__assert_fail@plt+0x5e9c>
   18540:	bne	1854c <__assert_fail@plt+0x5e60>
   18544:	ldr	r3, [pc, #64]	; 1858c <__assert_fail@plt+0x5ea0>
   18548:	mov	r1, r3
   1854c:	str	r1, [sp]
   18550:	mov	r0, #0
   18554:	mov	r1, r5
   18558:	bl	122c0 <error@plt>
   1855c:	mov	r0, #1
   18560:	bl	120ec <_exit@plt>
   18564:	add	sp, sp, #12
   18568:	pop	{r4, r5, pc}
   1856c:	strdeq	r7, [r1], -ip
   18570:	andeq	r0, r5, r8, asr lr
   18574:	andeq	r7, r1, r4, asr #5
   18578:	andeq	r0, r5, r0, lsl #11
   1857c:	andeq	r0, r5, ip, ror #10
   18580:	andeq	fp, r3, fp, ror #21
   18584:			; <UNDEFINED> instruction: 0x0003babb
   18588:	andeq	ip, r3, r1, asr r7
   1858c:	ldrdeq	fp, [r3], -pc	; <UNPREDICTABLE>
   18590:	ldr	r3, [pc, #28]	; 185b4 <__assert_fail@plt+0x5ec8>
   18594:	mov	r2, #0
   18598:	push	{r4, lr}
   1859c:	strb	r2, [r3, #40]	; 0x28
   185a0:	mov	r3, r1
   185a4:	mov	r1, r0
   185a8:	mov	r0, #1
   185ac:	bl	180fc <__assert_fail@plt+0x5a10>
   185b0:	bl	12698 <abort@plt>
   185b4:	andeq	r0, r5, r8, asr lr
   185b8:	ldrd	r2, [r1, #8]
   185bc:	push	{r4, r5, lr}
   185c0:	ldrd	r4, [r0, #8]
   185c4:	cmp	r5, r3
   185c8:	cmpeq	r4, r2
   185cc:	bne	185ec <__assert_fail@plt+0x5f00>
   185d0:	ldrd	r4, [r0]
   185d4:	ldrd	r2, [r1]
   185d8:	cmp	r5, r3
   185dc:	cmpeq	r4, r2
   185e0:	moveq	r0, #1
   185e4:	movne	r0, #0
   185e8:	pop	{r4, r5, pc}
   185ec:	mov	r0, #0
   185f0:	pop	{r4, r5, pc}
   185f4:	push	{r4, r5, r6, r7, r8, lr}
   185f8:	mov	r2, r1
   185fc:	ldrd	r6, [r0]
   18600:	ldrd	r4, [r0, #8]
   18604:	mov	r3, #0
   18608:	eor	r0, r6, r4
   1860c:	eor	r1, r7, r5
   18610:	bl	3994c <__assert_fail@plt+0x27260>
   18614:	mov	r0, r2
   18618:	pop	{r4, r5, r6, r7, r8, pc}
   1861c:	push	{r4, lr}
   18620:	mov	r4, r0
   18624:	ldr	r0, [r0, #20]
   18628:	cmp	r0, #0
   1862c:	beq	1864c <__assert_fail@plt+0x5f60>
   18630:	bl	124d0 <fclose@plt>
   18634:	cmp	r0, #0
   18638:	beq	1864c <__assert_fail@plt+0x5f60>
   1863c:	bl	12404 <__errno_location@plt>
   18640:	ldr	r1, [r4, #16]
   18644:	ldr	r0, [r0]
   18648:	bl	18590 <__assert_fail@plt+0x5ea4>
   1864c:	ldr	r0, [r4, #16]
   18650:	bl	2a01c <__assert_fail@plt+0x17930>
   18654:	mov	r0, r4
   18658:	pop	{r4, lr}
   1865c:	b	2a01c <__assert_fail@plt+0x17930>
   18660:	push	{r0, r1, r2, r4, r5, lr}
   18664:	mov	r5, r0
   18668:	mov	r0, #8
   1866c:	bl	2bf10 <__assert_fail@plt+0x19824>
   18670:	subs	r4, r0, #0
   18674:	beq	186d8 <__assert_fail@plt+0x5fec>
   18678:	mov	r0, r5
   1867c:	bl	12188 <strdup@plt>
   18680:	cmp	r0, #0
   18684:	mov	r5, r0
   18688:	str	r0, [r4]
   1868c:	beq	186c4 <__assert_fail@plt+0x5fd8>
   18690:	ldr	r3, [pc, #72]	; 186e0 <__assert_fail@plt+0x5ff4>
   18694:	ldr	r2, [pc, #72]	; 186e4 <__assert_fail@plt+0x5ff8>
   18698:	str	r3, [sp]
   1869c:	mov	r1, #0
   186a0:	ldr	r3, [pc, #64]	; 186e8 <__assert_fail@plt+0x5ffc>
   186a4:	mov	r0, #11
   186a8:	bl	207e4 <__assert_fail@plt+0xe0f8>
   186ac:	cmp	r0, #0
   186b0:	mov	r5, r0
   186b4:	str	r0, [r4, #4]
   186b8:	bne	186d8 <__assert_fail@plt+0x5fec>
   186bc:	ldr	r0, [r4]
   186c0:	bl	2a01c <__assert_fail@plt+0x17930>
   186c4:	mov	r0, r4
   186c8:	bl	2a01c <__assert_fail@plt+0x17930>
   186cc:	mov	r0, r5
   186d0:	add	sp, sp, #12
   186d4:	pop	{r4, r5, pc}
   186d8:	mov	r0, r4
   186dc:	b	186d0 <__assert_fail@plt+0x5fe4>
   186e0:	andeq	r8, r1, ip, lsl r6
   186e4:	strdeq	r8, [r1], -r4
   186e8:			; <UNDEFINED> instruction: 0x000185b8
   186ec:	push	{r4, lr}
   186f0:	mov	r4, r0
   186f4:	ldr	r0, [r0]
   186f8:	bl	2a01c <__assert_fail@plt+0x17930>
   186fc:	ldr	r0, [r4, #4]
   18700:	pop	{r4, lr}
   18704:	b	20950 <__assert_fail@plt+0xe264>
   18708:	push	{r4, r5, r6, r7, lr}
   1870c:	mov	r6, r0
   18710:	sub	sp, sp, #108	; 0x6c
   18714:	mov	r0, #24
   18718:	mov	r7, r1
   1871c:	bl	2bf10 <__assert_fail@plt+0x19824>
   18720:	subs	r5, r0, #0
   18724:	beq	18830 <__assert_fail@plt+0x6144>
   18728:	mov	r0, r7
   1872c:	bl	12188 <strdup@plt>
   18730:	cmp	r0, #0
   18734:	mov	r4, r0
   18738:	str	r0, [r5, #16]
   1873c:	bne	18754 <__assert_fail@plt+0x6068>
   18740:	mov	r0, r5
   18744:	bl	2a01c <__assert_fail@plt+0x17930>
   18748:	mov	r0, r4
   1874c:	add	sp, sp, #108	; 0x6c
   18750:	pop	{r4, r5, r6, r7, pc}
   18754:	ldr	r1, [r6]
   18758:	mov	r0, r7
   1875c:	bl	1ffd8 <__assert_fail@plt+0xd8ec>
   18760:	cmp	r0, #0
   18764:	mov	r4, r0
   18768:	str	r0, [r5, #20]
   1876c:	bne	1877c <__assert_fail@plt+0x6090>
   18770:	mov	r0, r5
   18774:	bl	1861c <__assert_fail@plt+0x5f30>
   18778:	b	18748 <__assert_fail@plt+0x605c>
   1877c:	bl	12488 <fileno@plt>
   18780:	subs	r4, r0, #0
   18784:	bge	1879c <__assert_fail@plt+0x60b0>
   18788:	ldr	r3, [pc, #168]	; 18838 <__assert_fail@plt+0x614c>
   1878c:	mov	r2, #166	; 0xa6
   18790:	ldr	r1, [pc, #164]	; 1883c <__assert_fail@plt+0x6150>
   18794:	ldr	r0, [pc, #164]	; 18840 <__assert_fail@plt+0x6154>
   18798:	bl	126ec <__assert_fail@plt>
   1879c:	mov	r1, #1
   187a0:	bl	1fb18 <__assert_fail@plt+0xd42c>
   187a4:	mov	r1, sp
   187a8:	mov	r0, r4
   187ac:	bl	39b94 <__assert_fail@plt+0x274a8>
   187b0:	cmp	r0, #0
   187b4:	bge	187c8 <__assert_fail@plt+0x60dc>
   187b8:	mov	r0, r5
   187bc:	bl	1861c <__assert_fail@plt+0x5f30>
   187c0:	mov	r4, #0
   187c4:	b	18748 <__assert_fail@plt+0x605c>
   187c8:	ldrd	r2, [sp]
   187cc:	mov	r1, r5
   187d0:	ldr	r0, [r6, #4]
   187d4:	strd	r2, [r5]
   187d8:	ldrd	r2, [sp, #96]	; 0x60
   187dc:	strd	r2, [r5, #8]
   187e0:	bl	205c0 <__assert_fail@plt+0xded4>
   187e4:	subs	r4, r0, #0
   187e8:	beq	187fc <__assert_fail@plt+0x6110>
   187ec:	mov	r0, r5
   187f0:	bl	1861c <__assert_fail@plt+0x5f30>
   187f4:	ldr	r4, [r4, #20]
   187f8:	b	18748 <__assert_fail@plt+0x605c>
   187fc:	mov	r1, r5
   18800:	ldr	r0, [r6, #4]
   18804:	bl	20cb8 <__assert_fail@plt+0xe5cc>
   18808:	subs	r4, r0, #0
   1880c:	ldrne	r4, [r5, #20]
   18810:	bne	18748 <__assert_fail@plt+0x605c>
   18814:	bl	12404 <__errno_location@plt>
   18818:	ldr	r7, [r0]
   1881c:	mov	r6, r0
   18820:	mov	r0, r5
   18824:	bl	1861c <__assert_fail@plt+0x5f30>
   18828:	str	r7, [r6]
   1882c:	b	18748 <__assert_fail@plt+0x605c>
   18830:	mov	r4, r5
   18834:	b	18748 <__assert_fail@plt+0x605c>
   18838:	andeq	fp, r3, lr, lsr #25
   1883c:			; <UNDEFINED> instruction: 0x0003bcbe
   18840:	andeq	r9, r3, r1, asr #24
   18844:	andeq	r0, r0, r0
   18848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1884c:	sub	sp, sp, #140	; 0x8c
   18850:	add	r6, sp, #40	; 0x28
   18854:	cmp	r2, #43	; 0x2b
   18858:	stm	r6, {r0, r1}
   1885c:	mov	r4, r2
   18860:	bne	188ac <__assert_fail@plt+0x61c0>
   18864:	ldr	r1, [pc, #1056]	; 18c8c <__assert_fail@plt+0x65a0>
   18868:	add	r0, sp, #48	; 0x30
   1886c:	bl	12278 <strcpy@plt>
   18870:	ldr	r3, [sp, #44]	; 0x2c
   18874:	ldr	r2, [pc, #1044]	; 18c90 <__assert_fail@plt+0x65a4>
   18878:	mov	r1, #32
   1887c:	add	r0, sp, #60	; 0x3c
   18880:	bl	1241c <snprintf@plt>
   18884:	cmp	r0, #31
   18888:	movle	r3, #1
   1888c:	mov	r5, r0
   18890:	strle	r3, [sp, #24]
   18894:	ble	188ec <__assert_fail@plt+0x6200>
   18898:	ldr	r3, [pc, #1012]	; 18c94 <__assert_fail@plt+0x65a8>
   1889c:	ldr	r2, [pc, #1012]	; 18c98 <__assert_fail@plt+0x65ac>
   188a0:	ldr	r1, [pc, #1012]	; 18c9c <__assert_fail@plt+0x65b0>
   188a4:	ldr	r0, [pc, #1012]	; 18ca0 <__assert_fail@plt+0x65b4>
   188a8:	bl	126ec <__assert_fail@plt>
   188ac:	mov	r3, #37	; 0x25
   188b0:	strb	r3, [sp, #48]	; 0x30
   188b4:	mov	r3, #0
   188b8:	strb	r3, [sp, #50]	; 0x32
   188bc:	sub	r3, r2, #64	; 0x40
   188c0:	cmp	r3, #24
   188c4:	strb	r2, [sp, #49]	; 0x31
   188c8:	bhi	188dc <__assert_fail@plt+0x61f0>
   188cc:	ldr	r2, [pc, #976]	; 18ca4 <__assert_fail@plt+0x65b8>
   188d0:	mov	r1, #1
   188d4:	ands	r3, r2, r1, lsl r3
   188d8:	bne	18870 <__assert_fail@plt+0x6184>
   188dc:	mov	r3, #0
   188e0:	mov	r5, r3
   188e4:	strb	r3, [sp, #60]	; 0x3c
   188e8:	str	r3, [sp, #24]
   188ec:	cmp	r4, #64	; 0x40
   188f0:	ldr	r4, [pc, #944]	; 18ca8 <__assert_fail@plt+0x65bc>
   188f4:	beq	18a48 <__assert_fail@plt+0x635c>
   188f8:	mov	r0, r6
   188fc:	bl	12350 <localtime@plt>
   18900:	subs	r9, r0, #0
   18904:	beq	18a48 <__assert_fail@plt+0x635c>
   18908:	add	r0, sp, #48	; 0x30
   1890c:	bl	123bc <strlen@plt>
   18910:	add	r8, sp, #136	; 0x88
   18914:	add	r0, r0, #2
   18918:	bl	28d44 <__assert_fail@plt+0x16658>
   1891c:	mov	r3, #95	; 0x5f
   18920:	mov	r7, r0
   18924:	mov	r6, r0
   18928:	strb	r3, [r7], #1
   1892c:	add	r0, sp, #48	; 0x30
   18930:	bl	123bc <strlen@plt>
   18934:	add	r1, sp, #48	; 0x30
   18938:	add	r2, r0, #1
   1893c:	mov	r0, r7
   18940:	bl	120f8 <memcpy@plt>
   18944:	mov	lr, r9
   18948:	add	ip, sp, #92	; 0x5c
   1894c:	ldm	lr!, {r0, r1, r2, r3}
   18950:	stmia	ip!, {r0, r1, r2, r3}
   18954:	ldm	lr!, {r0, r1, r2, r3}
   18958:	stmia	ip!, {r0, r1, r2, r3}
   1895c:	ldr	r3, [r8, #-44]!	; 0xffffffd4
   18960:	ldm	lr, {r0, r1, r2}
   18964:	cmp	r3, #10
   18968:	subgt	r3, r3, #11
   1896c:	addle	r3, r3, #11
   18970:	str	r3, [sp, #92]	; 0x5c
   18974:	ldr	r3, [r4]
   18978:	stm	ip, {r0, r1, r2}
   1897c:	cmp	r3, #0
   18980:	bne	18994 <__assert_fail@plt+0x62a8>
   18984:	mov	r0, #1
   18988:	str	r0, [r4, #4]
   1898c:	bl	28d44 <__assert_fail@plt+0x16658>
   18990:	str	r0, [r4]
   18994:	ldr	sl, [pc, #784]	; 18cac <__assert_fail@plt+0x65c0>
   18998:	mov	fp, #1
   1899c:	ldr	r7, [r4]
   189a0:	mov	r3, r9
   189a4:	mov	r2, r6
   189a8:	ldr	r1, [r4, #4]
   189ac:	mov	r0, r7
   189b0:	bl	12338 <strftime@plt>
   189b4:	subs	r3, r0, #0
   189b8:	str	r3, [sp, #16]
   189bc:	beq	18b40 <__assert_fail@plt+0x6454>
   189c0:	ldr	r3, [r4, #4]
   189c4:	cmp	r0, r3
   189c8:	bcs	18b40 <__assert_fail@plt+0x6454>
   189cc:	add	r9, r5, #1
   189d0:	add	r9, r9, r0
   189d4:	mov	r1, r9
   189d8:	mov	r0, r7
   189dc:	bl	28d70 <__assert_fail@plt+0x16684>
   189e0:	mov	r7, #0
   189e4:	stm	r4, {r0, r9}
   189e8:	mov	r0, r9
   189ec:	bl	28d44 <__assert_fail@plt+0x16658>
   189f0:	mov	r3, r8
   189f4:	ldr	r1, [r4, #4]
   189f8:	mov	r2, r6
   189fc:	mov	r8, r7
   18a00:	mov	sl, r0
   18a04:	bl	12338 <strftime@plt>
   18a08:	ldr	fp, [r4]
   18a0c:	mov	r1, r7
   18a10:	str	r7, [sp, #20]
   18a14:	ldrb	r2, [fp, r8]
   18a18:	ldrb	r3, [sl, r8]
   18a1c:	cmp	r2, #0
   18a20:	beq	18c28 <__assert_fail@plt+0x653c>
   18a24:	cmp	r3, #0
   18a28:	bne	18aa4 <__assert_fail@plt+0x63b8>
   18a2c:	mov	r0, r6
   18a30:	bl	2a01c <__assert_fail@plt+0x17930>
   18a34:	mov	r0, sl
   18a38:	bl	2a01c <__assert_fail@plt+0x17930>
   18a3c:	ldr	r4, [r4]
   18a40:	adds	r4, r4, #1
   18a44:	bne	18c1c <__assert_fail@plt+0x6530>
   18a48:	ldr	r3, [sp, #40]	; 0x28
   18a4c:	cmp	r3, #0
   18a50:	mov	r0, r3
   18a54:	asr	r1, r3, #31
   18a58:	bge	18a64 <__assert_fail@plt+0x6378>
   18a5c:	rsbs	r0, r3, #0
   18a60:	rsc	r1, r1, #0
   18a64:	mov	r2, #1
   18a68:	mov	r3, #0
   18a6c:	ldr	r6, [pc, #572]	; 18cb0 <__assert_fail@plt+0x65c4>
   18a70:	strd	r2, [sp, #8]
   18a74:	strd	r2, [sp]
   18a78:	mov	r3, #0
   18a7c:	add	r2, r6, #1
   18a80:	bl	20e70 <__assert_fail@plt+0xe784>
   18a84:	cmp	r0, r6
   18a88:	mov	r4, r0
   18a8c:	bhi	18b58 <__assert_fail@plt+0x646c>
   18a90:	ldr	r3, [pc, #508]	; 18c94 <__assert_fail@plt+0x65a8>
   18a94:	ldr	r2, [pc, #536]	; 18cb4 <__assert_fail@plt+0x65c8>
   18a98:	ldr	r1, [pc, #508]	; 18c9c <__assert_fail@plt+0x65b0>
   18a9c:	ldr	r0, [pc, #532]	; 18cb8 <__assert_fail@plt+0x65cc>
   18aa0:	b	188a8 <__assert_fail@plt+0x61bc>
   18aa4:	cmp	r2, r3
   18aa8:	str	r3, [sp, #36]	; 0x24
   18aac:	str	r2, [sp, #32]
   18ab0:	beq	18b08 <__assert_fail@plt+0x641c>
   18ab4:	str	r1, [sp, #28]
   18ab8:	bl	12374 <__ctype_b_loc@plt>
   18abc:	ldr	r2, [sp, #32]
   18ac0:	lsl	r2, r2, #1
   18ac4:	ldr	r0, [r0]
   18ac8:	ldrh	r2, [r0, r2]
   18acc:	tst	r2, #2048	; 0x800
   18ad0:	beq	18a2c <__assert_fail@plt+0x6340>
   18ad4:	ldr	r3, [sp, #36]	; 0x24
   18ad8:	lsl	r3, r3, #1
   18adc:	ldrh	r3, [r0, r3]
   18ae0:	tst	r3, #2048	; 0x800
   18ae4:	beq	18a2c <__assert_fail@plt+0x6340>
   18ae8:	ldr	r1, [sp, #28]
   18aec:	cmp	r1, #0
   18af0:	beq	18b10 <__assert_fail@plt+0x6424>
   18af4:	ldr	r3, [sp, #20]
   18af8:	sub	r3, r8, r3
   18afc:	cmp	r3, r7
   18b00:	bne	18a2c <__assert_fail@plt+0x6340>
   18b04:	add	r7, r7, #1
   18b08:	add	r8, r8, #1
   18b0c:	b	18a14 <__assert_fail@plt+0x6328>
   18b10:	mov	r7, #1
   18b14:	str	r8, [sp, #20]
   18b18:	mov	r1, r7
   18b1c:	b	18b08 <__assert_fail@plt+0x641c>
   18b20:	mov	r1, r7
   18b24:	add	r0, fp, r0
   18b28:	bl	1208c <memmove@plt>
   18b2c:	mov	r2, r5
   18b30:	add	r1, sp, #60	; 0x3c
   18b34:	mov	r0, r7
   18b38:	bl	120f8 <memcpy@plt>
   18b3c:	b	18a2c <__assert_fail@plt+0x6340>
   18b40:	mov	r2, fp
   18b44:	mov	r1, sl
   18b48:	mov	r0, r7
   18b4c:	bl	28e3c <__assert_fail@plt+0x16750>
   18b50:	str	r0, [r4]
   18b54:	b	1899c <__assert_fail@plt+0x62b0>
   18b58:	ldr	r3, [pc, #348]	; 18cbc <__assert_fail@plt+0x65d0>
   18b5c:	cmp	r0, r3
   18b60:	ldrcs	r3, [pc, #300]	; 18c94 <__assert_fail@plt+0x65a8>
   18b64:	ldrcs	r2, [pc, #340]	; 18cc0 <__assert_fail@plt+0x65d4>
   18b68:	ldrcs	r1, [pc, #300]	; 18c9c <__assert_fail@plt+0x65b0>
   18b6c:	ldrcs	r0, [pc, #336]	; 18cc4 <__assert_fail@plt+0x65d8>
   18b70:	bcs	188a8 <__assert_fail@plt+0x61bc>
   18b74:	ldr	r3, [sp, #40]	; 0x28
   18b78:	cmp	r3, #0
   18b7c:	movlt	r3, #45	; 0x2d
   18b80:	strblt	r3, [r0, #-1]
   18b84:	ldr	r3, [sp, #24]
   18b88:	sublt	r4, r0, #1
   18b8c:	cmp	r3, #0
   18b90:	beq	18c1c <__assert_fail@plt+0x6530>
   18b94:	mov	r0, r4
   18b98:	bl	123bc <strlen@plt>
   18b9c:	sub	r6, r4, r6
   18ba0:	add	r0, r6, r0
   18ba4:	ldr	r6, [pc, #284]	; 18cc8 <__assert_fail@plt+0x65dc>
   18ba8:	cmp	r0, r6
   18bac:	ldrhi	r3, [pc, #224]	; 18c94 <__assert_fail@plt+0x65a8>
   18bb0:	ldrhi	r2, [pc, #276]	; 18ccc <__assert_fail@plt+0x65e0>
   18bb4:	ldrhi	r1, [pc, #224]	; 18c9c <__assert_fail@plt+0x65b0>
   18bb8:	ldrhi	r0, [pc, #272]	; 18cd0 <__assert_fail@plt+0x65e4>
   18bbc:	bhi	188a8 <__assert_fail@plt+0x61bc>
   18bc0:	add	r7, sp, #60	; 0x3c
   18bc4:	sub	r6, r6, r0
   18bc8:	mov	r0, r7
   18bcc:	bl	123bc <strlen@plt>
   18bd0:	cmp	r6, r0
   18bd4:	bhi	18bf0 <__assert_fail@plt+0x6504>
   18bd8:	mov	r1, #0
   18bdc:	stm	sp, {r6, r7}
   18be0:	mov	r3, r5
   18be4:	ldr	r2, [pc, #232]	; 18cd4 <__assert_fail@plt+0x65e8>
   18be8:	mov	r0, r1
   18bec:	bl	122c0 <error@plt>
   18bf0:	mov	r0, r7
   18bf4:	bl	123bc <strlen@plt>
   18bf8:	cmp	r6, r0
   18bfc:	ldrls	r3, [pc, #144]	; 18c94 <__assert_fail@plt+0x65a8>
   18c00:	movls	r2, #720	; 0x2d0
   18c04:	ldrls	r1, [pc, #144]	; 18c9c <__assert_fail@plt+0x65b0>
   18c08:	ldrls	r0, [pc, #200]	; 18cd8 <__assert_fail@plt+0x65ec>
   18c0c:	bls	188a8 <__assert_fail@plt+0x61bc>
   18c10:	mov	r1, r7
   18c14:	mov	r0, r4
   18c18:	bl	1223c <strcat@plt>
   18c1c:	mov	r0, r4
   18c20:	add	sp, sp, #140	; 0x8c
   18c24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c28:	cmp	r3, #0
   18c2c:	cmpeq	r7, #2
   18c30:	bne	18a2c <__assert_fail@plt+0x6340>
   18c34:	bl	12374 <__ctype_b_loc@plt>
   18c38:	ldr	r3, [sp, #20]
   18c3c:	add	r1, r3, #2
   18c40:	add	r7, fp, r1
   18c44:	ldrb	r3, [fp, r1]
   18c48:	lsl	r3, r3, #1
   18c4c:	ldr	r2, [r0]
   18c50:	ldrh	r3, [r2, r3]
   18c54:	tst	r3, #2048	; 0x800
   18c58:	bne	18a2c <__assert_fail@plt+0x6340>
   18c5c:	ldr	r3, [sp, #16]
   18c60:	add	r0, r5, r1
   18c64:	add	r2, r3, #1
   18c68:	sub	r2, r2, r1
   18c6c:	add	r3, r2, r0
   18c70:	cmp	r9, r3
   18c74:	beq	18b20 <__assert_fail@plt+0x6434>
   18c78:	ldr	r3, [pc, #92]	; 18cdc <__assert_fail@plt+0x65f0>
   18c7c:	ldr	r2, [pc, #92]	; 18ce0 <__assert_fail@plt+0x65f4>
   18c80:	ldr	r1, [pc, #20]	; 18c9c <__assert_fail@plt+0x65b0>
   18c84:	ldr	r0, [pc, #88]	; 18ce4 <__assert_fail@plt+0x65f8>
   18c88:	b	188a8 <__assert_fail@plt+0x61bc>
   18c8c:	andeq	fp, r3, r5, ror sp
   18c90:	andeq	fp, r3, r3, asr lr
   18c94:	andeq	fp, r3, ip, asr #25
   18c98:	muleq	r0, r9, r2
   18c9c:	andeq	fp, r3, r1, lsl #27
   18ca0:	andeq	fp, r3, r9, lsl #27
   18ca4:	tsteq	r8, r1
   18ca8:			; <UNDEFINED> instruction: 0x000505b0
   18cac:			; <UNDEFINED> instruction: 0x000505b4
   18cb0:			; <UNDEFINED> instruction: 0x000505b8
   18cb4:			; <UNDEFINED> instruction: 0x000002b9
   18cb8:	ldrdeq	fp, [r3], -r6
   18cbc:	andeq	r0, r5, pc, asr #17
   18cc0:			; <UNDEFINED> instruction: 0x000002ba
   18cc4:	ldrdeq	fp, [r3], -lr
   18cc8:	andeq	r0, r0, r6, lsl r3
   18ccc:	andeq	r0, r0, r7, asr #5
   18cd0:	strdeq	fp, [r3], -r7
   18cd4:	andeq	fp, r3, r9, lsl #28
   18cd8:	andeq	fp, r3, r7, lsr lr
   18cdc:	ldrdeq	fp, [r3], -r8
   18ce0:	andeq	r0, r0, r5, lsr #4
   18ce4:	andeq	fp, r3, r3, lsr #27
   18ce8:	push	{r4, r5, lr}
   18cec:	sub	sp, sp, #44	; 0x2c
   18cf0:	add	r4, sp, #32
   18cf4:	stm	r4, {r0, r1}
   18cf8:	mov	r0, r4
   18cfc:	bl	12350 <localtime@plt>
   18d00:	cmp	r0, #0
   18d04:	beq	18e54 <__assert_fail@plt+0x6768>
   18d08:	ldr	r3, [r0, #24]
   18d0c:	cmp	r3, #0
   18d10:	bge	18d28 <__assert_fail@plt+0x663c>
   18d14:	ldr	r3, [pc, #332]	; 18e68 <__assert_fail@plt+0x677c>
   18d18:	ldr	r2, [pc, #332]	; 18e6c <__assert_fail@plt+0x6780>
   18d1c:	ldr	r1, [pc, #332]	; 18e70 <__assert_fail@plt+0x6784>
   18d20:	ldr	r0, [pc, #332]	; 18e74 <__assert_fail@plt+0x6788>
   18d24:	bl	126ec <__assert_fail@plt>
   18d28:	cmp	r3, #6
   18d2c:	ldrgt	r3, [pc, #308]	; 18e68 <__assert_fail@plt+0x677c>
   18d30:	ldrgt	r2, [pc, #320]	; 18e78 <__assert_fail@plt+0x678c>
   18d34:	ldrgt	r1, [pc, #308]	; 18e70 <__assert_fail@plt+0x6784>
   18d38:	ldrgt	r0, [pc, #316]	; 18e7c <__assert_fail@plt+0x6790>
   18d3c:	bgt	18d24 <__assert_fail@plt+0x6638>
   18d40:	ldr	ip, [r0, #16]
   18d44:	cmp	ip, #0
   18d48:	ldrlt	r3, [pc, #280]	; 18e68 <__assert_fail@plt+0x677c>
   18d4c:	ldrlt	r2, [pc, #300]	; 18e80 <__assert_fail@plt+0x6794>
   18d50:	ldrlt	r1, [pc, #280]	; 18e70 <__assert_fail@plt+0x6784>
   18d54:	ldrlt	r0, [pc, #296]	; 18e84 <__assert_fail@plt+0x6798>
   18d58:	blt	18d24 <__assert_fail@plt+0x6638>
   18d5c:	cmp	ip, #11
   18d60:	ldrgt	r3, [pc, #256]	; 18e68 <__assert_fail@plt+0x677c>
   18d64:	movgt	r2, #752	; 0x2f0
   18d68:	ldrgt	r1, [pc, #256]	; 18e70 <__assert_fail@plt+0x6784>
   18d6c:	ldrgt	r0, [pc, #276]	; 18e88 <__assert_fail@plt+0x679c>
   18d70:	bgt	18d24 <__assert_fail@plt+0x6638>
   18d74:	ldr	lr, [r0, #8]
   18d78:	cmp	lr, #0
   18d7c:	ldrlt	r3, [pc, #228]	; 18e68 <__assert_fail@plt+0x677c>
   18d80:	ldrlt	r2, [pc, #260]	; 18e8c <__assert_fail@plt+0x67a0>
   18d84:	ldrlt	r1, [pc, #228]	; 18e70 <__assert_fail@plt+0x6784>
   18d88:	ldrlt	r0, [pc, #256]	; 18e90 <__assert_fail@plt+0x67a4>
   18d8c:	blt	18d24 <__assert_fail@plt+0x6638>
   18d90:	cmp	lr, #23
   18d94:	ldrgt	r3, [pc, #204]	; 18e68 <__assert_fail@plt+0x677c>
   18d98:	ldrgt	r2, [pc, #244]	; 18e94 <__assert_fail@plt+0x67a8>
   18d9c:	ldrgt	r1, [pc, #204]	; 18e70 <__assert_fail@plt+0x6784>
   18da0:	ldrgt	r0, [pc, #240]	; 18e98 <__assert_fail@plt+0x67ac>
   18da4:	bgt	18d24 <__assert_fail@plt+0x6638>
   18da8:	ldr	r4, [r0, #4]
   18dac:	cmp	r4, #59	; 0x3b
   18db0:	ldrgt	r3, [pc, #176]	; 18e68 <__assert_fail@plt+0x677c>
   18db4:	ldrgt	r2, [pc, #224]	; 18e9c <__assert_fail@plt+0x67b0>
   18db8:	ldrgt	r1, [pc, #176]	; 18e70 <__assert_fail@plt+0x6784>
   18dbc:	ldrgt	r0, [pc, #220]	; 18ea0 <__assert_fail@plt+0x67b4>
   18dc0:	bgt	18d24 <__assert_fail@plt+0x6638>
   18dc4:	ldr	r5, [r0]
   18dc8:	cmp	r5, #61	; 0x3d
   18dcc:	ldrgt	r3, [pc, #148]	; 18e68 <__assert_fail@plt+0x677c>
   18dd0:	movgt	r2, #756	; 0x2f4
   18dd4:	ldrgt	r1, [pc, #148]	; 18e70 <__assert_fail@plt+0x6784>
   18dd8:	ldrgt	r0, [pc, #196]	; 18ea4 <__assert_fail@plt+0x67b8>
   18ddc:	bgt	18d24 <__assert_fail@plt+0x6638>
   18de0:	ldr	r2, [r0, #20]
   18de4:	ldr	r1, [pc, #188]	; 18ea8 <__assert_fail@plt+0x67bc>
   18de8:	add	r2, r2, #1888	; 0x760
   18dec:	add	r2, r2, #12
   18df0:	str	r2, [sp, #24]
   18df4:	ldr	r2, [sp, #36]	; 0x24
   18df8:	add	r3, r1, r3, lsl #2
   18dfc:	str	r2, [sp, #20]
   18e00:	add	r1, r1, ip, lsl #2
   18e04:	str	r5, [sp, #16]
   18e08:	str	r4, [sp, #12]
   18e0c:	str	lr, [sp, #8]
   18e10:	ldr	r2, [r0, #12]
   18e14:	ldr	r3, [r3, #40]	; 0x28
   18e18:	str	r2, [sp, #4]
   18e1c:	ldr	r2, [r1, #68]	; 0x44
   18e20:	ldr	r0, [pc, #132]	; 18eac <__assert_fail@plt+0x67c0>
   18e24:	str	r2, [sp]
   18e28:	mov	r1, #1024	; 0x400
   18e2c:	ldr	r2, [pc, #124]	; 18eb0 <__assert_fail@plt+0x67c4>
   18e30:	bl	1241c <snprintf@plt>
   18e34:	cmp	r0, #1024	; 0x400
   18e38:	ldrlt	r0, [pc, #108]	; 18eac <__assert_fail@plt+0x67c0>
   18e3c:	blt	18e60 <__assert_fail@plt+0x6774>
   18e40:	ldr	r3, [pc, #32]	; 18e68 <__assert_fail@plt+0x677c>
   18e44:	ldr	r2, [pc, #104]	; 18eb4 <__assert_fail@plt+0x67c8>
   18e48:	ldr	r1, [pc, #32]	; 18e70 <__assert_fail@plt+0x6784>
   18e4c:	ldr	r0, [pc, #100]	; 18eb8 <__assert_fail@plt+0x67cc>
   18e50:	b	18d24 <__assert_fail@plt+0x6638>
   18e54:	mov	r2, #64	; 0x40
   18e58:	ldm	r4, {r0, r1}
   18e5c:	bl	18848 <__assert_fail@plt+0x615c>
   18e60:	add	sp, sp, #44	; 0x2c
   18e64:	pop	{r4, r5, pc}
   18e68:	andeq	fp, r3, r7, ror #25
   18e6c:	andeq	r0, r0, sp, ror #5
   18e70:	andeq	fp, r3, r1, lsl #27
   18e74:	andeq	fp, r3, fp, asr lr
   18e78:	andeq	r0, r0, lr, ror #5
   18e7c:	andeq	fp, r3, sp, ror #28
   18e80:	andeq	r0, r0, pc, ror #5
   18e84:	andeq	fp, r3, lr, ror lr
   18e88:	andeq	fp, r3, pc, lsl #29
   18e8c:	strdeq	r0, [r0], -r1
   18e90:	andeq	fp, r3, r0, lsr #29
   18e94:	strdeq	r0, [r0], -r2
   18e98:			; <UNDEFINED> instruction: 0x0003beb2
   18e9c:	strdeq	r0, [r0], -r3
   18ea0:	andeq	fp, r3, r4, asr #29
   18ea4:	ldrdeq	fp, [r3], -r5
   18ea8:	andeq	fp, r3, ip, asr #25
   18eac:	andeq	r0, r5, pc, asr #17
   18eb0:	andeq	fp, r3, r7, ror #29
   18eb4:	andeq	r0, r0, r2, lsl #6
   18eb8:	andeq	fp, r3, lr, lsl #30
   18ebc:	push	{r1, r2, r3}
   18ec0:	push	{r0, r1, r2, r4, lr}
   18ec4:	mov	r4, r0
   18ec8:	add	r2, sp, #24
   18ecc:	ldr	r1, [sp, #20]
   18ed0:	ldr	r0, [r0, #4]
   18ed4:	str	r2, [sp, #4]
   18ed8:	bl	12554 <vfprintf@plt>
   18edc:	cmp	r0, #0
   18ee0:	bge	18ef4 <__assert_fail@plt+0x6808>
   18ee4:	bl	12404 <__errno_location@plt>
   18ee8:	ldr	r1, [r4, #8]
   18eec:	ldr	r0, [r0]
   18ef0:	bl	18450 <__assert_fail@plt+0x5d64>
   18ef4:	add	sp, sp, #12
   18ef8:	pop	{r4, lr}
   18efc:	add	sp, sp, #12
   18f00:	bx	lr
   18f04:	cmp	r0, #32768	; 0x8000
   18f08:	beq	18f4c <__assert_fail@plt+0x6860>
   18f0c:	cmp	r0, #16384	; 0x4000
   18f10:	beq	18f54 <__assert_fail@plt+0x6868>
   18f14:	cmp	r0, #40960	; 0xa000
   18f18:	beq	18f5c <__assert_fail@plt+0x6870>
   18f1c:	cmp	r0, #49152	; 0xc000
   18f20:	beq	18f64 <__assert_fail@plt+0x6878>
   18f24:	cmp	r0, #24576	; 0x6000
   18f28:	beq	18f6c <__assert_fail@plt+0x6880>
   18f2c:	cmp	r0, #8192	; 0x2000
   18f30:	beq	18f74 <__assert_fail@plt+0x6888>
   18f34:	ldr	r2, [pc, #64]	; 18f7c <__assert_fail@plt+0x6890>
   18f38:	ldr	r3, [pc, #64]	; 18f80 <__assert_fail@plt+0x6894>
   18f3c:	cmp	r0, #4096	; 0x1000
   18f40:	moveq	r0, r3
   18f44:	movne	r0, r2
   18f48:	bx	lr
   18f4c:	ldr	r0, [pc, #48]	; 18f84 <__assert_fail@plt+0x6898>
   18f50:	bx	lr
   18f54:	ldr	r0, [pc, #44]	; 18f88 <__assert_fail@plt+0x689c>
   18f58:	bx	lr
   18f5c:	ldr	r0, [pc, #40]	; 18f8c <__assert_fail@plt+0x68a0>
   18f60:	bx	lr
   18f64:	ldr	r0, [pc, #36]	; 18f90 <__assert_fail@plt+0x68a4>
   18f68:	bx	lr
   18f6c:	ldr	r0, [pc, #32]	; 18f94 <__assert_fail@plt+0x68a8>
   18f70:	bx	lr
   18f74:	ldr	r0, [pc, #28]	; 18f98 <__assert_fail@plt+0x68ac>
   18f78:	bx	lr
   18f7c:	andeq	fp, r3, r2, lsr #30
   18f80:	andeq	sl, r3, r6, ror #19
   18f84:	muleq	r3, r4, lr
   18f88:	andeq	sl, r3, r9, ror #10
   18f8c:	andeq	sl, r3, sp, lsr #9
   18f90:			; <UNDEFINED> instruction: 0x0003f4b0
   18f94:			; <UNDEFINED> instruction: 0x0003dab4
   18f98:	andeq	sp, r3, r7, asr r0
   18f9c:	push	{r0, r1, r4, lr}
   18fa0:	mov	r4, r0
   18fa4:	ldrb	r0, [r0, #12]
   18fa8:	mov	r3, r1
   18fac:	str	r2, [sp]
   18fb0:	ldr	r1, [r4, #16]
   18fb4:	mov	r2, r0
   18fb8:	ldr	r0, [r4, #4]
   18fbc:	bl	1f238 <__assert_fail@plt+0xcb4c>
   18fc0:	cmp	r0, #0
   18fc4:	bge	18fe0 <__assert_fail@plt+0x68f4>
   18fc8:	bl	12404 <__errno_location@plt>
   18fcc:	ldr	r1, [r4, #8]
   18fd0:	ldr	r0, [r0]
   18fd4:	add	sp, sp, #8
   18fd8:	pop	{r4, lr}
   18fdc:	b	18450 <__assert_fail@plt+0x5d64>
   18fe0:	add	sp, sp, #8
   18fe4:	pop	{r4, pc}
   18fe8:	push	{r4, r5, r6, lr}
   18fec:	mov	r5, r1
   18ff0:	ldr	r3, [r2, #4]
   18ff4:	mov	r4, r2
   18ff8:	mov	r2, r1
   18ffc:	mov	r1, #1
   19000:	bl	12230 <fwrite@plt>
   19004:	cmp	r5, r0
   19008:	popls	{r4, r5, r6, pc}
   1900c:	bl	12404 <__errno_location@plt>
   19010:	ldr	r1, [r4, #8]
   19014:	pop	{r4, r5, r6, lr}
   19018:	ldr	r0, [r0]
   1901c:	b	18450 <__assert_fail@plt+0x5d64>
   19020:	push	{r4, r5, r6, r7, r8, r9, lr}
   19024:	vpush	{d8}
   19028:	mov	r6, r3
   1902c:	ldr	r3, [r1]
   19030:	mov	r5, r0
   19034:	cmp	r3, #1
   19038:	sub	sp, sp, #692	; 0x2b4
   1903c:	mov	r4, r1
   19040:	beq	1905c <__assert_fail@plt+0x6970>
   19044:	bcc	190cc <__assert_fail@plt+0x69e0>
   19048:	cmp	r3, #2
   1904c:	beq	19090 <__assert_fail@plt+0x69a4>
   19050:	add	sp, sp, #692	; 0x2b4
   19054:	vpop	{d8}
   19058:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1905c:	mov	r2, r0
   19060:	ldr	r1, [r1, #12]
   19064:	ldr	r0, [r4, #8]
   19068:	bl	18fe8 <__assert_fail@plt+0x68fc>
   1906c:	ldr	r0, [r5, #4]
   19070:	bl	29fcc <__assert_fail@plt+0x178e0>
   19074:	cmp	r0, #0
   19078:	beq	19050 <__assert_fail@plt+0x6964>
   1907c:	bl	12404 <__errno_location@plt>
   19080:	ldr	r1, [r5, #8]
   19084:	ldr	r0, [r0]
   19088:	bl	18450 <__assert_fail@plt+0x5d64>
   1908c:	b	19050 <__assert_fail@plt+0x6964>
   19090:	ldrb	r3, [r1, #4]
   19094:	cmp	r3, #99	; 0x63
   19098:	beq	19324 <__assert_fail@plt+0x6c38>
   1909c:	mov	r7, r2
   190a0:	bhi	191fc <__assert_fail@plt+0x6b10>
   190a4:	cmp	r3, #77	; 0x4d
   190a8:	beq	194d4 <__assert_fail@plt+0x6de8>
   190ac:	bhi	1911c <__assert_fail@plt+0x6a30>
   190b0:	cmp	r3, #68	; 0x44
   190b4:	beq	19344 <__assert_fail@plt+0x6c58>
   190b8:	bhi	190e0 <__assert_fail@plt+0x69f4>
   190bc:	cmp	r3, #0
   190c0:	beq	19678 <__assert_fail@plt+0x6f8c>
   190c4:	cmp	r3, #37	; 0x25
   190c8:	bne	19050 <__assert_fail@plt+0x6964>
   190cc:	mov	r2, r5
   190d0:	ldr	r1, [r4, #12]
   190d4:	ldr	r0, [r4, #8]
   190d8:	bl	18fe8 <__assert_fail@plt+0x68fc>
   190dc:	b	19050 <__assert_fail@plt+0x6964>
   190e0:	cmp	r3, #71	; 0x47
   190e4:	beq	19390 <__assert_fail@plt+0x6ca4>
   190e8:	cmp	r3, #72	; 0x48
   190ec:	beq	1942c <__assert_fail@plt+0x6d40>
   190f0:	cmp	r3, #70	; 0x46
   190f4:	bne	19050 <__assert_fail@plt+0x6964>
   190f8:	ldr	r4, [r1, #8]
   190fc:	mov	r0, r6
   19100:	mov	r1, r2
   19104:	bl	1a030 <__assert_fail@plt+0x7944>
   19108:	mov	r1, r4
   1910c:	mov	r2, r0
   19110:	mov	r0, r5
   19114:	bl	18f9c <__assert_fail@plt+0x68b0>
   19118:	b	19050 <__assert_fail@plt+0x6964>
   1911c:	cmp	r3, #89	; 0x59
   19120:	beq	195bc <__assert_fail@plt+0x6ed0>
   19124:	bhi	1916c <__assert_fail@plt+0x6a80>
   19128:	cmp	r3, #83	; 0x53
   1912c:	beq	19518 <__assert_fail@plt+0x6e2c>
   19130:	cmp	r3, #85	; 0x55
   19134:	beq	195b0 <__assert_fail@plt+0x6ec4>
   19138:	cmp	r3, #80	; 0x50
   1913c:	bne	19050 <__assert_fail@plt+0x6964>
   19140:	ldr	r3, [pc, #1400]	; 196c0 <__assert_fail@plt+0x6fd4>
   19144:	ldr	r2, [r3]
   19148:	cmp	r2, #0
   1914c:	ldrle	r2, [pc, #1392]	; 196c4 <__assert_fail@plt+0x6fd8>
   19150:	ble	192a0 <__assert_fail@plt+0x6bb4>
   19154:	ldr	r3, [r3, #20]
   19158:	add	r2, r7, r3
   1915c:	ldrb	r3, [r7, r3]
   19160:	cmp	r3, #47	; 0x2f
   19164:	addeq	r2, r2, #1
   19168:	b	192a0 <__assert_fail@plt+0x6bb4>
   1916c:	cmp	r3, #97	; 0x61
   19170:	beq	192d0 <__assert_fail@plt+0x6be4>
   19174:	bhi	192ec <__assert_fail@plt+0x6c00>
   19178:	cmp	r3, #90	; 0x5a
   1917c:	bne	19050 <__assert_fail@plt+0x6964>
   19180:	ldr	r6, [pc, #1336]	; 196c0 <__assert_fail@plt+0x6fd4>
   19184:	ldr	r3, [pc, #1340]	; 196c8 <__assert_fail@plt+0x6fdc>
   19188:	add	r2, sp, #32
   1918c:	ldr	r1, [r6, #12]
   19190:	ldr	r3, [r3, #64]	; 0x40
   19194:	ldr	r0, [r6, #16]
   19198:	blx	r3
   1919c:	cmp	r0, #0
   191a0:	bge	1965c <__assert_fail@plt+0x6f70>
   191a4:	ldr	r1, [r4, #8]
   191a8:	ldr	r2, [pc, #1300]	; 196c4 <__assert_fail@plt+0x6fd8>
   191ac:	mov	r0, r5
   191b0:	bl	18ebc <__assert_fail@plt+0x67d0>
   191b4:	bl	12404 <__errno_location@plt>
   191b8:	mov	r2, #5
   191bc:	ldr	r1, [pc, #1288]	; 196cc <__assert_fail@plt+0x6fe0>
   191c0:	ldr	r4, [r0]
   191c4:	mov	r0, #0
   191c8:	bl	1217c <dcgettext@plt>
   191cc:	mov	r1, r7
   191d0:	mov	r5, r0
   191d4:	mov	r0, #0
   191d8:	bl	180e8 <__assert_fail@plt+0x59fc>
   191dc:	mov	r2, r5
   191e0:	mov	r1, r4
   191e4:	mov	r3, r0
   191e8:	mov	r0, #0
   191ec:	bl	122c0 <error@plt>
   191f0:	mov	r3, #1
   191f4:	str	r3, [r6, #28]
   191f8:	b	19050 <__assert_fail@plt+0x6964>
   191fc:	cmp	r3, #108	; 0x6c
   19200:	beq	1947c <__assert_fail@plt+0x6d90>
   19204:	bhi	19280 <__assert_fail@plt+0x6b94>
   19208:	cmp	r3, #103	; 0x67
   1920c:	beq	19368 <__assert_fail@plt+0x6c7c>
   19210:	bhi	1924c <__assert_fail@plt+0x6b60>
   19214:	cmp	r3, #100	; 0x64
   19218:	beq	19334 <__assert_fail@plt+0x6c48>
   1921c:	cmp	r3, #102	; 0x66
   19220:	bne	19050 <__assert_fail@plt+0x6964>
   19224:	mov	r0, r2
   19228:	bl	1fd10 <__assert_fail@plt+0xd624>
   1922c:	mov	r6, r0
   19230:	mov	r2, r6
   19234:	ldr	r1, [r4, #8]
   19238:	mov	r0, r5
   1923c:	bl	18f9c <__assert_fail@plt+0x68b0>
   19240:	mov	r0, r6
   19244:	bl	2a01c <__assert_fail@plt+0x17930>
   19248:	b	19050 <__assert_fail@plt+0x6964>
   1924c:	cmp	r3, #105	; 0x69
   19250:	beq	1946c <__assert_fail@plt+0x6d80>
   19254:	bcc	193b8 <__assert_fail@plt+0x6ccc>
   19258:	cmp	r3, #107	; 0x6b
   1925c:	bne	19050 <__assert_fail@plt+0x6964>
   19260:	mov	r2, #1024	; 0x400
   19264:	mov	r3, #0
   19268:	ldr	r4, [r1, #8]
   1926c:	ldrd	r0, [r6, #64]	; 0x40
   19270:	strd	r2, [sp, #8]
   19274:	mov	r2, #512	; 0x200
   19278:	mov	r3, #0
   1927c:	b	19300 <__assert_fail@plt+0x6c14>
   19280:	cmp	r3, #115	; 0x73
   19284:	beq	1950c <__assert_fail@plt+0x6e20>
   19288:	bhi	192a8 <__assert_fail@plt+0x6bbc>
   1928c:	cmp	r3, #110	; 0x6e
   19290:	beq	19500 <__assert_fail@plt+0x6e14>
   19294:	bcc	194f0 <__assert_fail@plt+0x6e04>
   19298:	cmp	r3, #112	; 0x70
   1929c:	bne	19050 <__assert_fail@plt+0x6964>
   192a0:	ldr	r1, [r4, #8]
   192a4:	b	19110 <__assert_fail@plt+0x6a24>
   192a8:	cmp	r3, #117	; 0x75
   192ac:	beq	195a0 <__assert_fail@plt+0x6eb4>
   192b0:	bcc	19590 <__assert_fail@plt+0x6ea4>
   192b4:	cmp	r3, #121	; 0x79
   192b8:	ldreq	r0, [r6, #16]
   192bc:	bne	19050 <__assert_fail@plt+0x6964>
   192c0:	and	r0, r0, #61440	; 0xf000
   192c4:	bl	18f04 <__assert_fail@plt+0x6818>
   192c8:	mov	r2, r0
   192cc:	b	1933c <__assert_fail@plt+0x6c50>
   192d0:	ldr	r4, [r1, #8]
   192d4:	add	r3, sp, #16
   192d8:	add	r6, r6, #72	; 0x48
   192dc:	ldm	r6, {r0, r1}
   192e0:	stm	r3, {r0, r1}
   192e4:	bl	18ce8 <__assert_fail@plt+0x65fc>
   192e8:	b	19310 <__assert_fail@plt+0x6c24>
   192ec:	ldr	r4, [r1, #8]
   192f0:	ldrd	r0, [r6, #64]	; 0x40
   192f4:	mov	r2, #512	; 0x200
   192f8:	mov	r3, #0
   192fc:	strd	r2, [sp, #8]
   19300:	strd	r2, [sp]
   19304:	mov	r3, #0
   19308:	add	r2, sp, #32
   1930c:	bl	20e70 <__assert_fail@plt+0xe784>
   19310:	mov	r2, r0
   19314:	mov	r1, r4
   19318:	mov	r0, r5
   1931c:	bl	18ebc <__assert_fail@plt+0x67d0>
   19320:	b	19050 <__assert_fail@plt+0x6964>
   19324:	ldr	r4, [r1, #8]
   19328:	add	r3, sp, #24
   1932c:	add	r6, r6, #88	; 0x58
   19330:	b	192dc <__assert_fail@plt+0x6bf0>
   19334:	ldr	r3, [pc, #900]	; 196c0 <__assert_fail@plt+0x6fd4>
   19338:	ldr	r2, [r3]
   1933c:	ldr	r1, [r4, #8]
   19340:	b	19318 <__assert_fail@plt+0x6c2c>
   19344:	mov	r2, #1
   19348:	mov	r3, #0
   1934c:	ldr	r4, [r1, #8]
   19350:	strd	r2, [sp, #8]
   19354:	strd	r2, [sp]
   19358:	mov	r3, #0
   1935c:	add	r2, sp, #32
   19360:	ldrd	r0, [r6]
   19364:	b	1930c <__assert_fail@plt+0x6c20>
   19368:	ldr	r0, [r6, #28]
   1936c:	bl	126c8 <getgrgid@plt>
   19370:	cmp	r0, #0
   19374:	beq	19390 <__assert_fail@plt+0x6ca4>
   19378:	ldr	r2, [r4, #8]
   1937c:	ldr	r3, [r4, #12]
   19380:	mov	r1, #115	; 0x73
   19384:	strb	r1, [r2, r3]
   19388:	ldr	r2, [r0]
   1938c:	b	1933c <__assert_fail@plt+0x6c50>
   19390:	ldr	r4, [r4, #8]
   19394:	ldr	r0, [r6, #28]
   19398:	mov	r2, #1
   1939c:	mov	r3, #0
   193a0:	mov	r1, #0
   193a4:	strd	r2, [sp, #8]
   193a8:	strd	r2, [sp]
   193ac:	mov	r3, #0
   193b0:	add	r2, sp, #32
   193b4:	b	1930c <__assert_fail@plt+0x6c20>
   193b8:	mov	r0, r2
   193bc:	bl	291bc <__assert_fail@plt+0x16ad0>
   193c0:	mov	r6, r0
   193c4:	bl	123bc <strlen@plt>
   193c8:	sub	r0, r0, #1
   193cc:	add	r0, r6, r0
   193d0:	cmp	r0, r6
   193d4:	mov	r3, r0
   193d8:	bcc	193f4 <__assert_fail@plt+0x6d08>
   193dc:	ldrb	r2, [r3]
   193e0:	sub	r0, r0, #1
   193e4:	cmp	r2, #47	; 0x2f
   193e8:	beq	193d0 <__assert_fail@plt+0x6ce4>
   193ec:	cmp	r3, r6
   193f0:	bhi	19418 <__assert_fail@plt+0x6d2c>
   193f4:	mov	r1, #47	; 0x2f
   193f8:	mov	r0, r6
   193fc:	bl	12548 <strrchr@plt>
   19400:	cmp	r0, #0
   19404:	ldreq	r2, [pc, #708]	; 196d0 <__assert_fail@plt+0x6fe4>
   19408:	beq	19234 <__assert_fail@plt+0x6b48>
   1940c:	mov	r3, #0
   19410:	strb	r3, [r0]
   19414:	b	19230 <__assert_fail@plt+0x6b44>
   19418:	ldrb	r2, [r3, #1]
   1941c:	cmp	r2, #47	; 0x2f
   19420:	moveq	r2, #0
   19424:	strbeq	r2, [r3, #1]
   19428:	b	193f4 <__assert_fail@plt+0x6d08>
   1942c:	ldr	r8, [pc, #652]	; 196c0 <__assert_fail@plt+0x6fd4>
   19430:	ldr	r0, [r8, #20]
   19434:	add	r0, r0, #1
   19438:	bl	28d44 <__assert_fail@plt+0x16658>
   1943c:	ldr	r8, [r8, #20]
   19440:	mov	r1, r7
   19444:	mov	r2, r8
   19448:	mov	r6, r0
   1944c:	bl	120f8 <memcpy@plt>
   19450:	mov	r3, #0
   19454:	strb	r3, [r6, r8]
   19458:	mov	r2, r6
   1945c:	ldr	r1, [r4, #8]
   19460:	mov	r0, r5
   19464:	bl	18ebc <__assert_fail@plt+0x67d0>
   19468:	b	19240 <__assert_fail@plt+0x6b54>
   1946c:	ldr	r4, [r1, #8]
   19470:	ldrd	r0, [r6, #96]	; 0x60
   19474:	mov	r2, #1
   19478:	b	192f8 <__assert_fail@plt+0x6c0c>
   1947c:	ldr	r3, [r6, #16]
   19480:	and	r3, r3, #61440	; 0xf000
   19484:	cmp	r3, #40960	; 0xa000
   19488:	bne	194bc <__assert_fail@plt+0x6dd0>
   1948c:	ldr	r8, [pc, #556]	; 196c0 <__assert_fail@plt+0x6fd4>
   19490:	ldr	r1, [r8, #12]
   19494:	ldr	r0, [r8, #16]
   19498:	bl	1f840 <__assert_fail@plt+0xd154>
   1949c:	subs	r6, r0, #0
   194a0:	bne	19230 <__assert_fail@plt+0x6b44>
   194a4:	bl	12404 <__errno_location@plt>
   194a8:	mov	r1, r7
   194ac:	ldr	r0, [r0]
   194b0:	bl	18168 <__assert_fail@plt+0x5a7c>
   194b4:	mov	r3, #1
   194b8:	str	r3, [r8, #28]
   194bc:	ldr	r2, [pc, #512]	; 196c4 <__assert_fail@plt+0x6fd8>
   194c0:	ldr	r1, [r4, #8]
   194c4:	mov	r0, r5
   194c8:	bl	18f9c <__assert_fail@plt+0x68b0>
   194cc:	mov	r6, #0
   194d0:	b	19240 <__assert_fail@plt+0x6b54>
   194d4:	add	r1, sp, #32
   194d8:	mov	r0, r6
   194dc:	bl	1ffd0 <__assert_fail@plt+0xd8e4>
   194e0:	mov	r3, #0
   194e4:	strb	r3, [sp, #42]	; 0x2a
   194e8:	add	r2, sp, #32
   194ec:	b	1933c <__assert_fail@plt+0x6c50>
   194f0:	ldr	r2, [r6, #16]
   194f4:	lsl	r2, r2, #20
   194f8:	lsr	r2, r2, #20
   194fc:	b	1933c <__assert_fail@plt+0x6c50>
   19500:	ldr	r4, [r1, #8]
   19504:	ldr	r0, [r6, #20]
   19508:	b	19398 <__assert_fail@plt+0x6cac>
   1950c:	ldr	r4, [r1, #8]
   19510:	ldrd	r0, [r6, #48]	; 0x30
   19514:	b	19474 <__assert_fail@plt+0x6d88>
   19518:	ldrd	r8, [r6, #48]	; 0x30
   1951c:	ldr	r4, [r1, #8]
   19520:	orrs	r3, r8, r9
   19524:	bne	1955c <__assert_fail@plt+0x6e70>
   19528:	ldrd	r2, [r6, #64]	; 0x40
   1952c:	orrs	r1, r2, r3
   19530:	beq	19588 <__assert_fail@plt+0x6e9c>
   19534:	vldr	d6, [pc, #356]	; 196a0 <__assert_fail@plt+0x6fb4>
   19538:	vldr	d7, [pc, #360]	; 196a8 <__assert_fail@plt+0x6fbc>
   1953c:	cmp	r2, #0
   19540:	sbcs	r3, r3, #0
   19544:	vmovge.f64	d7, d6
   19548:	vmov	r2, r3, d7
   1954c:	mov	r1, r4
   19550:	mov	r0, r5
   19554:	bl	18ebc <__assert_fail@plt+0x67d0>
   19558:	b	19050 <__assert_fail@plt+0x6964>
   1955c:	ldrd	r0, [r6, #64]	; 0x40
   19560:	bl	39818 <__assert_fail@plt+0x2712c>
   19564:	vldr	d8, [pc, #324]	; 196b0 <__assert_fail@plt+0x6fc4>
   19568:	vmov	d7, r0, r1
   1956c:	mov	r0, r8
   19570:	mov	r1, r9
   19574:	vmul.f64	d8, d7, d8
   19578:	bl	39818 <__assert_fail@plt+0x2712c>
   1957c:	vmov	d6, r0, r1
   19580:	vdiv.f64	d7, d8, d6
   19584:	b	19548 <__assert_fail@plt+0x6e5c>
   19588:	vldr	d7, [pc, #296]	; 196b8 <__assert_fail@plt+0x6fcc>
   1958c:	b	19548 <__assert_fail@plt+0x6e5c>
   19590:	ldr	r4, [r1, #8]
   19594:	add	r3, sp, #32
   19598:	add	r6, r6, #80	; 0x50
   1959c:	b	192dc <__assert_fail@plt+0x6bf0>
   195a0:	ldr	r0, [r6, #24]
   195a4:	bl	12014 <getpwuid@plt>
   195a8:	cmp	r0, #0
   195ac:	bne	19378 <__assert_fail@plt+0x6c8c>
   195b0:	ldr	r4, [r4, #8]
   195b4:	ldr	r0, [r6, #24]
   195b8:	b	19398 <__assert_fail@plt+0x6cac>
   195bc:	ldr	r0, [r6, #16]
   195c0:	and	r0, r0, #61440	; 0xf000
   195c4:	cmp	r0, #40960	; 0xa000
   195c8:	bne	192c4 <__assert_fail@plt+0x6bd8>
   195cc:	ldr	r0, [pc, #236]	; 196c0 <__assert_fail@plt+0x6fd4>
   195d0:	mov	r3, #0
   195d4:	add	r2, sp, #32
   195d8:	ldr	r1, [r0, #12]
   195dc:	ldr	r0, [r0, #16]
   195e0:	bl	39bb4 <__assert_fail@plt+0x274c8>
   195e4:	cmp	r0, #0
   195e8:	beq	19654 <__assert_fail@plt+0x6f68>
   195ec:	bl	12404 <__errno_location@plt>
   195f0:	ldr	r3, [r0]
   195f4:	mov	r8, r0
   195f8:	cmp	r3, #20
   195fc:	cmpne	r3, #2
   19600:	moveq	r6, #1
   19604:	movne	r6, #0
   19608:	ldreq	r2, [pc, #196]	; 196d4 <__assert_fail@plt+0x6fe8>
   1960c:	beq	1933c <__assert_fail@plt+0x6c50>
   19610:	cmp	r3, #40	; 0x28
   19614:	ldreq	r2, [pc, #188]	; 196d8 <__assert_fail@plt+0x6fec>
   19618:	beq	1933c <__assert_fail@plt+0x6c50>
   1961c:	ldr	r2, [pc, #184]	; 196dc <__assert_fail@plt+0x6ff0>
   19620:	ldr	r1, [r4, #8]
   19624:	mov	r0, r5
   19628:	bl	18ebc <__assert_fail@plt+0x67d0>
   1962c:	mov	r1, r7
   19630:	mov	r0, r6
   19634:	ldr	r4, [r8]
   19638:	bl	180e8 <__assert_fail@plt+0x59fc>
   1963c:	ldr	r2, [pc, #156]	; 196e0 <__assert_fail@plt+0x6ff4>
   19640:	mov	r1, r4
   19644:	mov	r3, r0
   19648:	mov	r0, r6
   1964c:	bl	122c0 <error@plt>
   19650:	b	19050 <__assert_fail@plt+0x6964>
   19654:	ldr	r0, [sp, #48]	; 0x30
   19658:	b	192c0 <__assert_fail@plt+0x6bd4>
   1965c:	mov	r0, r5
   19660:	ldr	r2, [sp, #32]
   19664:	ldr	r1, [r4, #8]
   19668:	bl	18ebc <__assert_fail@plt+0x67d0>
   1966c:	ldr	r0, [sp, #32]
   19670:	bl	125fc <freecon@plt>
   19674:	b	19050 <__assert_fail@plt+0x6964>
   19678:	mov	r2, #5
   1967c:	ldr	r1, [pc, #96]	; 196e4 <__assert_fail@plt+0x6ff8>
   19680:	mov	r0, #0
   19684:	bl	1217c <dcgettext@plt>
   19688:	ldr	r3, [pc, #88]	; 196e8 <__assert_fail@plt+0x6ffc>
   1968c:	mov	r1, #0
   19690:	mov	r2, r0
   19694:	mov	r0, #1
   19698:	bl	122c0 <error@plt>
   1969c:	nop			; (mov r0, r0)
   196a0:	andeq	r0, r0, r0
   196a4:	svcvc	0x00f00000	; IMB
   196a8:	andeq	r0, r0, r0
   196ac:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   196b0:	andeq	r0, r0, r0
   196b4:	addmi	r0, r0, r0
   196b8:	andeq	r0, r0, r0
   196bc:	svccc	0x00f00000	; IMB
   196c0:	andeq	r0, r5, r8, asr lr
   196c4:	ldrdeq	fp, [r3], -pc	; <UNPREDICTABLE>
   196c8:	andeq	r0, r5, r4, lsl #29
   196cc:	muleq	r3, r7, r2
   196d0:	andeq	sl, r3, r1, asr #14
   196d4:	andeq	fp, r3, r0, lsr #30
   196d8:	andeq	fp, r3, lr, ror r8
   196dc:	andeq	sp, r3, r4, lsr #5
   196e0:	andeq	pc, r3, pc, lsr #9
   196e4:	andeq	fp, r3, r4, lsr #30
   196e8:	andeq	ip, r3, fp, lsr #32
   196ec:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196f0:	mov	r9, r0
   196f4:	ldr	r4, [r2, #40]	; 0x28
   196f8:	ldr	sl, [pc, #256]	; 19800 <__assert_fail@plt+0x7114>
   196fc:	mov	r5, r1
   19700:	add	r7, r2, #40	; 0x28
   19704:	mov	r6, sp
   19708:	mvn	r8, #0
   1970c:	cmp	r4, #0
   19710:	bne	19720 <__assert_fail@plt+0x7034>
   19714:	mov	r0, #1
   19718:	add	sp, sp, #12
   1971c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19720:	ldr	r3, [r4]
   19724:	cmp	r3, #2
   19728:	bne	197e4 <__assert_fail@plt+0x70f8>
   1972c:	ldrb	r2, [r4, #5]
   19730:	cmp	r2, #0
   19734:	beq	197e4 <__assert_fail@plt+0x70f8>
   19738:	ldrb	r3, [r4, #4]
   1973c:	cmp	r3, #66	; 0x42
   19740:	beq	197b4 <__assert_fail@plt+0x70c8>
   19744:	bhi	19764 <__assert_fail@plt+0x7078>
   19748:	cmp	r3, #65	; 0x41
   1974c:	beq	19780 <__assert_fail@plt+0x7094>
   19750:	ldr	r3, [pc, #172]	; 19804 <__assert_fail@plt+0x7118>
   19754:	ldr	r2, [pc, #172]	; 19808 <__assert_fail@plt+0x711c>
   19758:	ldr	r1, [pc, #172]	; 1980c <__assert_fail@plt+0x7120>
   1975c:	ldr	r0, [pc, #172]	; 19810 <__assert_fail@plt+0x7124>
   19760:	bl	126ec <__assert_fail@plt>
   19764:	cmp	r3, #67	; 0x43
   19768:	beq	197d4 <__assert_fail@plt+0x70e8>
   1976c:	cmp	r3, #84	; 0x54
   19770:	bne	19750 <__assert_fail@plt+0x7064>
   19774:	ldr	r3, [r5, #84]	; 0x54
   19778:	ldr	r1, [r5, #80]	; 0x50
   1977c:	b	197dc <__assert_fail@plt+0x70f0>
   19780:	add	r3, r5, #72	; 0x48
   19784:	ldm	r3, {r0, r1}
   19788:	ldr	r3, [r5, #76]	; 0x4c
   1978c:	stm	r6, {r0, r1}
   19790:	str	r3, [sp, #4]
   19794:	ldm	r6, {r0, r1}
   19798:	ldr	fp, [r4, #8]
   1979c:	bl	18848 <__assert_fail@plt+0x615c>
   197a0:	mov	r1, fp
   197a4:	mov	r2, r0
   197a8:	mov	r0, r7
   197ac:	bl	18ebc <__assert_fail@plt+0x67d0>
   197b0:	b	197f8 <__assert_fail@plt+0x710c>
   197b4:	cmp	r2, #64	; 0x40
   197b8:	str	r8, [sp]
   197bc:	str	r8, [sp, #4]
   197c0:	movne	r2, sl
   197c4:	ldrne	r1, [r4, #8]
   197c8:	bne	197a8 <__assert_fail@plt+0x70bc>
   197cc:	mov	r3, r8
   197d0:	b	19790 <__assert_fail@plt+0x70a4>
   197d4:	ldr	r3, [r5, #92]	; 0x5c
   197d8:	ldr	r1, [r5, #88]	; 0x58
   197dc:	str	r1, [sp]
   197e0:	b	19790 <__assert_fail@plt+0x70a4>
   197e4:	mov	r3, r5
   197e8:	mov	r2, r9
   197ec:	mov	r1, r4
   197f0:	mov	r0, r7
   197f4:	bl	19020 <__assert_fail@plt+0x6934>
   197f8:	ldr	r4, [r4, #16]
   197fc:	b	1970c <__assert_fail@plt+0x7020>
   19800:	ldrdeq	fp, [r3], -pc	; <UNPREDICTABLE>
   19804:	andeq	fp, r3, r0, asr #26
   19808:	andeq	r0, r0, r8, lsl r5
   1980c:	andeq	fp, r3, r1, lsl #27
   19810:	andeq	sl, r3, sl, lsr r9
   19814:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19818:	ldrb	r7, [sp, #48]	; 0x30
   1981c:	ldrb	fp, [sp, #52]	; 0x34
   19820:	ldr	r6, [sp, #56]	; 0x38
   19824:	cmp	r7, #123	; 0x7b
   19828:	bne	19840 <__assert_fail@plt+0x7154>
   1982c:	ldr	r3, [pc, #840]	; 19b7c <__assert_fail@plt+0x7490>
   19830:	ldr	r1, [pc, #840]	; 19b80 <__assert_fail@plt+0x7494>
   19834:	ldr	r0, [pc, #840]	; 19b84 <__assert_fail@plt+0x7498>
   19838:	mov	r2, #78	; 0x4e
   1983c:	bl	126ec <__assert_fail@plt>
   19840:	cmp	r7, #91	; 0x5b
   19844:	ldreq	r3, [pc, #816]	; 19b7c <__assert_fail@plt+0x7490>
   19848:	moveq	r2, #79	; 0x4f
   1984c:	ldreq	r1, [pc, #812]	; 19b80 <__assert_fail@plt+0x7494>
   19850:	ldreq	r0, [pc, #816]	; 19b88 <__assert_fail@plt+0x749c>
   19854:	beq	1983c <__assert_fail@plt+0x7150>
   19858:	cmp	r7, #40	; 0x28
   1985c:	ldreq	r3, [pc, #792]	; 19b7c <__assert_fail@plt+0x7490>
   19860:	moveq	r2, #80	; 0x50
   19864:	ldreq	r1, [pc, #788]	; 19b80 <__assert_fail@plt+0x7494>
   19868:	ldreq	r0, [pc, #796]	; 19b8c <__assert_fail@plt+0x74a0>
   1986c:	beq	1983c <__assert_fail@plt+0x7150>
   19870:	mov	r8, r0
   19874:	mov	r0, #20
   19878:	mov	r4, r2
   1987c:	mov	sl, r3
   19880:	str	r1, [sp, #4]
   19884:	bl	28d44 <__assert_fail@plt+0x16658>
   19888:	mov	r3, #0
   1988c:	str	r3, [r0, #16]
   19890:	mov	r9, r0
   19894:	str	r0, [r8]
   19898:	str	sl, [r0]
   1989c:	strb	r7, [r0, #4]
   198a0:	strb	fp, [r0, #5]
   198a4:	str	r4, [r0, #12]
   198a8:	add	r0, r4, #2
   198ac:	bl	28d44 <__assert_fail@plt+0x16658>
   198b0:	mov	r2, r4
   198b4:	ldr	r1, [sp, #4]
   198b8:	mov	r5, r0
   198bc:	str	r0, [r9, #8]
   198c0:	bl	12458 <strncpy@plt>
   198c4:	cmp	sl, #1
   198c8:	add	r2, r5, r4
   198cc:	bhi	19908 <__assert_fail@plt+0x721c>
   198d0:	cmp	r7, #0
   198d4:	ldrne	r3, [pc, #672]	; 19b7c <__assert_fail@plt+0x7490>
   198d8:	movne	r2, #97	; 0x61
   198dc:	ldrne	r1, [pc, #668]	; 19b80 <__assert_fail@plt+0x7494>
   198e0:	ldrne	r0, [pc, #680]	; 19b90 <__assert_fail@plt+0x74a4>
   198e4:	bne	1983c <__assert_fail@plt+0x7150>
   198e8:	cmp	fp, #0
   198ec:	strbeq	fp, [r5, r4]
   198f0:	beq	19ac4 <__assert_fail@plt+0x73d8>
   198f4:	ldr	r3, [pc, #640]	; 19b7c <__assert_fail@plt+0x7490>
   198f8:	mov	r2, #98	; 0x62
   198fc:	ldr	r1, [pc, #636]	; 19b80 <__assert_fail@plt+0x7494>
   19900:	ldr	r0, [pc, #652]	; 19b94 <__assert_fail@plt+0x74a8>
   19904:	b	1983c <__assert_fail@plt+0x7150>
   19908:	cmp	sl, #2
   1990c:	ldrne	r3, [pc, #616]	; 19b7c <__assert_fail@plt+0x7490>
   19910:	movne	r2, #105	; 0x69
   19914:	ldrne	r1, [pc, #612]	; 19b80 <__assert_fail@plt+0x7494>
   19918:	ldrne	r0, [pc, #632]	; 19b98 <__assert_fail@plt+0x74ac>
   1991c:	bne	1983c <__assert_fail@plt+0x7150>
   19920:	sub	r7, r7, #37	; 0x25
   19924:	cmp	r7, #84	; 0x54
   19928:	ldrls	pc, [pc, r7, lsl #2]
   1992c:	b	19a90 <__assert_fail@plt+0x73a4>
   19930:	andeq	r9, r1, r4, lsl #21
   19934:	muleq	r1, r0, sl
   19938:	muleq	r1, r0, sl
   1993c:	muleq	r1, r0, sl
   19940:	muleq	r1, r0, sl
   19944:	muleq	r1, r0, sl
   19948:	muleq	r1, r0, sl
   1994c:	muleq	r1, r0, sl
   19950:	muleq	r1, r0, sl
   19954:	muleq	r1, r0, sl
   19958:	muleq	r1, r0, sl
   1995c:	muleq	r1, r0, sl
   19960:	muleq	r1, r0, sl
   19964:	muleq	r1, r0, sl
   19968:	muleq	r1, r0, sl
   1996c:	muleq	r1, r0, sl
   19970:	muleq	r1, r0, sl
   19974:	muleq	r1, r0, sl
   19978:	muleq	r1, r0, sl
   1997c:	muleq	r1, r0, sl
   19980:	muleq	r1, r0, sl
   19984:	muleq	r1, r0, sl
   19988:	muleq	r1, r0, sl
   1998c:	muleq	r1, r0, sl
   19990:	muleq	r1, r0, sl
   19994:	muleq	r1, r0, sl
   19998:	muleq	r1, r0, sl
   1999c:	muleq	r1, r0, sl
   199a0:	andeq	r9, r1, ip, asr #22
   199a4:	andeq	r9, r1, ip, asr #22
   199a8:	andeq	r9, r1, ip, asr #22
   199ac:	andeq	r9, r1, ip, asr #22
   199b0:	muleq	r1, r0, sl
   199b4:	andeq	r9, r1, ip, asr #22
   199b8:	andeq	r9, r1, ip, asr #22
   199bc:	andeq	r9, r1, r4, asr #22
   199c0:	muleq	r1, r0, sl
   199c4:	muleq	r1, r0, sl
   199c8:	muleq	r1, r0, sl
   199cc:	muleq	r1, r0, sl
   199d0:	andeq	r9, r1, ip, asr #22
   199d4:	muleq	r1, r0, sl
   199d8:	muleq	r1, r0, sl
   199dc:	andeq	r9, r1, r4, asr #22
   199e0:	muleq	r1, r0, sl
   199e4:	muleq	r1, r0, sl
   199e8:	andeq	r9, r1, r8, lsl #22
   199ec:	andeq	r9, r1, ip, asr #22
   199f0:	andeq	r9, r1, ip, asr #22
   199f4:	muleq	r1, r0, sl
   199f8:	muleq	r1, r0, sl
   199fc:	muleq	r1, r0, sl
   19a00:	andeq	r9, r1, r4, lsr #22
   19a04:	andeq	r9, r1, r0, lsr fp
   19a08:	muleq	r1, r0, sl
   19a0c:	muleq	r1, r0, sl
   19a10:	muleq	r1, r0, sl
   19a14:	muleq	r1, r0, sl
   19a18:	muleq	r1, r0, sl
   19a1c:	muleq	r1, r0, sl
   19a20:	andeq	r9, r1, ip, asr #22
   19a24:	andeq	r9, r1, ip, asr #22
   19a28:	andeq	r9, r1, ip, asr #22
   19a2c:	andeq	r9, r1, ip, asr fp
   19a30:	muleq	r1, r0, sl
   19a34:	andeq	r9, r1, r4, asr #22
   19a38:	andeq	r9, r1, ip, asr #22
   19a3c:	andeq	r9, r1, r4, asr #22
   19a40:	strdeq	r9, [r1], -r0
   19a44:	muleq	r1, r0, sl
   19a48:	andeq	r9, r1, ip, asr #22
   19a4c:	muleq	r1, r8, sl
   19a50:	andeq	r9, r1, r4, ror #22
   19a54:	andeq	r9, r1, ip, asr #22
   19a58:	muleq	r1, r0, sl
   19a5c:	andeq	r9, r1, r4, asr #22
   19a60:	muleq	r1, r0, sl
   19a64:	muleq	r1, r0, sl
   19a68:	andeq	r9, r1, ip, asr #22
   19a6c:	andeq	r9, r1, ip, asr #22
   19a70:	andeq	r9, r1, ip, asr #22
   19a74:	muleq	r1, r0, sl
   19a78:	muleq	r1, r0, sl
   19a7c:	muleq	r1, r0, sl
   19a80:	ldrdeq	r9, [r1], -r4
   19a84:	mov	r3, #37	; 0x25
   19a88:	add	r2, r2, #1
   19a8c:	strb	r3, [r5, r4]
   19a90:	mov	r3, #0
   19a94:	b	19ab0 <__assert_fail@plt+0x73c4>
   19a98:	mov	r3, #1
   19a9c:	strb	r3, [r6, #18]
   19aa0:	mov	r3, #115	; 0x73
   19aa4:	strb	r3, [r5, r4]
   19aa8:	add	r2, r2, #1
   19aac:	mov	r3, #4
   19ab0:	mov	r1, #0
   19ab4:	strb	r1, [r2]
   19ab8:	ldr	r2, [r6, #24]
   19abc:	cmp	r3, r2
   19ac0:	strhi	r3, [r6, #24]
   19ac4:	ldr	r0, [r8]
   19ac8:	add	r0, r0, #16
   19acc:	add	sp, sp, #12
   19ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ad4:	mov	r3, #1
   19ad8:	strb	r3, [r6, #19]
   19adc:	mov	r3, #115	; 0x73
   19ae0:	strb	r3, [r5, r4]
   19ae4:	add	r2, r2, #1
   19ae8:	mov	r3, #2
   19aec:	b	19ab0 <__assert_fail@plt+0x73c4>
   19af0:	mov	r3, #1
   19af4:	mov	r1, #115	; 0x73
   19af8:	strb	r3, [r6, #20]
   19afc:	strb	r1, [r5, r4]
   19b00:	add	r2, r2, r3
   19b04:	b	19ab0 <__assert_fail@plt+0x73c4>
   19b08:	mov	r3, #1
   19b0c:	strb	r3, [r6, #18]
   19b10:	mov	r3, #103	; 0x67
   19b14:	add	r2, r2, #1
   19b18:	strb	r3, [r5, r4]
   19b1c:	mov	r3, #3
   19b20:	b	19ab0 <__assert_fail@plt+0x73c4>
   19b24:	mov	r3, #1
   19b28:	strb	r3, [r6, #18]
   19b2c:	b	19adc <__assert_fail@plt+0x73f0>
   19b30:	mov	r3, #115	; 0x73
   19b34:	strb	r3, [r5, r4]
   19b38:	add	r2, r2, #1
   19b3c:	mov	r3, #5
   19b40:	b	19ab0 <__assert_fail@plt+0x73c4>
   19b44:	mov	r3, #115	; 0x73
   19b48:	b	19a88 <__assert_fail@plt+0x739c>
   19b4c:	mov	r3, #1
   19b50:	strb	r3, [r6, #18]
   19b54:	mov	r3, #115	; 0x73
   19b58:	b	19b14 <__assert_fail@plt+0x7428>
   19b5c:	mov	r3, #100	; 0x64
   19b60:	b	19a88 <__assert_fail@plt+0x739c>
   19b64:	mov	r3, #111	; 0x6f
   19b68:	strb	r3, [r5, r4]
   19b6c:	mov	r3, #1
   19b70:	strb	r3, [r6, #18]
   19b74:	add	r2, r2, r3
   19b78:	b	19b1c <__assert_fail@plt+0x7430>
   19b7c:	andeq	fp, r3, sp, asr #26
   19b80:	andeq	fp, r3, r1, lsl #27
   19b84:	andeq	fp, r3, r6, asr #30
   19b88:	andeq	fp, r3, r9, asr pc
   19b8c:	andeq	fp, r3, ip, ror #30
   19b90:	andeq	fp, r3, pc, ror pc
   19b94:	muleq	r3, r0, pc	; <UNPREDICTABLE>
   19b98:	andeq	fp, r3, r5, lsr #31
   19b9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ba0:	mov	r5, r0
   19ba4:	sub	sp, sp, #28
   19ba8:	mov	r0, r1
   19bac:	ldr	r1, [pc, #932]	; 19f58 <__assert_fail@plt+0x786c>
   19bb0:	mov	r4, r2
   19bb4:	bl	174d4 <__assert_fail@plt+0x4de8>
   19bb8:	mov	ip, r5
   19bbc:	mov	r3, #1
   19bc0:	ldr	sl, [pc, #916]	; 19f5c <__assert_fail@plt+0x7870>
   19bc4:	ldr	fp, [pc, #916]	; 19f60 <__assert_fail@plt+0x7874>
   19bc8:	mov	r7, r4
   19bcc:	strb	r3, [r0, #17]
   19bd0:	strb	r3, [r0, #16]
   19bd4:	mov	r6, r0
   19bd8:	add	lr, r0, #40	; 0x28
   19bdc:	ldm	ip!, {r0, r1, r2, r3}
   19be0:	add	r8, r6, #40	; 0x28
   19be4:	stmia	lr!, {r0, r1, r2, r3}
   19be8:	ldr	r3, [ip]
   19bec:	str	r3, [lr]
   19bf0:	mov	r3, #0
   19bf4:	strb	r3, [r6, #19]
   19bf8:	strb	r3, [r6, #18]
   19bfc:	str	r3, [r6, #24]
   19c00:	str	r3, [r6, #40]	; 0x28
   19c04:	ldrb	r3, [r4]
   19c08:	cmp	r3, #0
   19c0c:	bne	19c34 <__assert_fail@plt+0x7548>
   19c10:	cmp	r7, r4
   19c14:	bcs	19c88 <__assert_fail@plt+0x759c>
   19c18:	stmib	sp, {r3, r6}
   19c1c:	str	r3, [sp]
   19c20:	sub	r2, r4, r7
   19c24:	mov	r1, r7
   19c28:	mov	r0, r8
   19c2c:	bl	19814 <__assert_fail@plt+0x7128>
   19c30:	b	19c88 <__assert_fail@plt+0x759c>
   19c34:	cmp	r3, #92	; 0x5c
   19c38:	bne	19d90 <__assert_fail@plt+0x76a4>
   19c3c:	ldrb	r5, [r4, #1]
   19c40:	cmp	r5, #99	; 0x63
   19c44:	bne	19c94 <__assert_fail@plt+0x75a8>
   19c48:	mov	r3, #0
   19c4c:	str	r3, [sp, #4]
   19c50:	str	r3, [sp]
   19c54:	str	r6, [sp, #8]
   19c58:	mov	r3, #1
   19c5c:	sub	r2, r4, r7
   19c60:	mov	r1, r7
   19c64:	mov	r0, r8
   19c68:	bl	19814 <__assert_fail@plt+0x7128>
   19c6c:	ldrb	r3, [r6, #18]
   19c70:	cmp	r3, #0
   19c74:	beq	19c88 <__assert_fail@plt+0x759c>
   19c78:	ldr	r3, [r6, #24]
   19c7c:	cmp	r3, #2
   19c80:	movls	r3, #3
   19c84:	strls	r3, [r6, #24]
   19c88:	mov	r0, #1
   19c8c:	add	sp, sp, #28
   19c90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c94:	cmp	r5, #0
   19c98:	bne	19cf4 <__assert_fail@plt+0x7608>
   19c9c:	mov	r2, #5
   19ca0:	ldr	r1, [pc, #700]	; 19f64 <__assert_fail@plt+0x7878>
   19ca4:	mov	r0, r5
   19ca8:	bl	1217c <dcgettext@plt>
   19cac:	mov	r1, r5
   19cb0:	mov	r2, r0
   19cb4:	mov	r0, r5
   19cb8:	bl	122c0 <error@plt>
   19cbc:	sub	r2, r4, r7
   19cc0:	mov	r3, #0
   19cc4:	mov	r1, r7
   19cc8:	mov	r0, r8
   19ccc:	str	r6, [sp, #8]
   19cd0:	str	r3, [sp, #4]
   19cd4:	str	r3, [sp]
   19cd8:	add	r2, r2, #1
   19cdc:	bl	19814 <__assert_fail@plt+0x7128>
   19ce0:	add	r7, r5, #1
   19ce4:	add	r7, r4, r7
   19ce8:	add	r4, r4, r5
   19cec:	mov	r8, r0
   19cf0:	b	19d88 <__assert_fail@plt+0x769c>
   19cf4:	sub	r3, r5, #48	; 0x30
   19cf8:	cmp	r3, #7
   19cfc:	bhi	19d3c <__assert_fail@plt+0x7650>
   19d00:	mov	r2, #0
   19d04:	mov	r3, r2
   19d08:	add	r5, r2, #1
   19d0c:	ldrb	r1, [r4, r5]
   19d10:	sub	r0, r1, #48	; 0x30
   19d14:	cmp	r0, #7
   19d18:	movhi	r5, r2
   19d1c:	bhi	19d34 <__assert_fail@plt+0x7648>
   19d20:	add	r3, r1, r3, lsl #3
   19d24:	cmp	r5, #3
   19d28:	sub	r3, r3, #48	; 0x30
   19d2c:	mov	r2, r5
   19d30:	bne	19d08 <__assert_fail@plt+0x761c>
   19d34:	strb	r3, [r4]
   19d38:	b	19cbc <__assert_fail@plt+0x75d0>
   19d3c:	sub	r5, r5, #92	; 0x5c
   19d40:	uxtb	r5, r5
   19d44:	cmp	r5, #26
   19d48:	bhi	19d64 <__assert_fail@plt+0x7678>
   19d4c:	add	r5, fp, r5
   19d50:	ldrb	r3, [r5, #142]	; 0x8e
   19d54:	cmp	r3, #0
   19d58:	strbne	r3, [r4]
   19d5c:	movne	r5, #1
   19d60:	bne	19cbc <__assert_fail@plt+0x75d0>
   19d64:	mov	r2, #5
   19d68:	ldr	r1, [pc, #504]	; 19f68 <__assert_fail@plt+0x787c>
   19d6c:	mov	r0, #0
   19d70:	bl	1217c <dcgettext@plt>
   19d74:	mov	r1, #0
   19d78:	ldrb	r3, [r4, #1]!
   19d7c:	mov	r2, r0
   19d80:	mov	r0, r1
   19d84:	bl	122c0 <error@plt>
   19d88:	add	r4, r4, #1
   19d8c:	b	19c04 <__assert_fail@plt+0x7518>
   19d90:	cmp	r3, #37	; 0x25
   19d94:	bne	19d88 <__assert_fail@plt+0x769c>
   19d98:	ldrb	r5, [r4, #1]
   19d9c:	cmp	r5, #0
   19da0:	bne	19dc8 <__assert_fail@plt+0x76dc>
   19da4:	mov	r2, #5
   19da8:	ldr	r1, [pc, #444]	; 19f6c <__assert_fail@plt+0x7880>
   19dac:	mov	r0, r5
   19db0:	bl	1217c <dcgettext@plt>
   19db4:	mov	r3, r4
   19db8:	mov	r2, r0
   19dbc:	mov	r1, #0
   19dc0:	mov	r0, #1
   19dc4:	bl	122c0 <error@plt>
   19dc8:	cmp	r5, #37	; 0x25
   19dcc:	moveq	r3, #1
   19dd0:	beq	19e3c <__assert_fail@plt+0x7750>
   19dd4:	add	r9, r4, #1
   19dd8:	sub	r5, r9, r4
   19ddc:	ldrb	r1, [r9], #1
   19de0:	cmp	r1, #0
   19de4:	beq	19df8 <__assert_fail@plt+0x770c>
   19de8:	mov	r0, sl
   19dec:	bl	123c8 <strchr@plt>
   19df0:	cmp	r0, #0
   19df4:	bne	19dd8 <__assert_fail@plt+0x76ec>
   19df8:	bl	12374 <__ctype_b_loc@plt>
   19dfc:	add	r2, r4, r5
   19e00:	ldr	r1, [r0]
   19e04:	sub	r3, r2, r4
   19e08:	ldrb	r0, [r2], #1
   19e0c:	lsl	ip, r0, #1
   19e10:	ldrh	ip, [r1, ip]
   19e14:	tst	ip, #2048	; 0x800
   19e18:	bne	19e04 <__assert_fail@plt+0x7718>
   19e1c:	cmp	r0, #46	; 0x2e
   19e20:	bne	19e3c <__assert_fail@plt+0x7750>
   19e24:	add	r3, r3, #1
   19e28:	ldrb	r2, [r4, r3]
   19e2c:	lsl	r2, r2, #1
   19e30:	ldrh	r2, [r1, r2]
   19e34:	tst	r2, #2048	; 0x800
   19e38:	bne	19e24 <__assert_fail@plt+0x7738>
   19e3c:	ldrb	r9, [r4, r3]
   19e40:	ldr	r0, [pc, #296]	; 19f70 <__assert_fail@plt+0x7884>
   19e44:	add	r5, r4, r3
   19e48:	mov	r1, r9
   19e4c:	bl	123c8 <strchr@plt>
   19e50:	cmp	r0, #0
   19e54:	movne	r3, #1
   19e58:	bne	19f10 <__assert_fail@plt+0x7824>
   19e5c:	mov	r1, r9
   19e60:	ldr	r0, [pc, #268]	; 19f74 <__assert_fail@plt+0x7888>
   19e64:	bl	123c8 <strchr@plt>
   19e68:	subs	r3, r0, #0
   19e6c:	movne	r3, #2
   19e70:	bne	19f10 <__assert_fail@plt+0x7824>
   19e74:	mov	r1, r9
   19e78:	ldr	r0, [pc, #248]	; 19f78 <__assert_fail@plt+0x788c>
   19e7c:	str	r3, [sp, #20]
   19e80:	bl	123c8 <strchr@plt>
   19e84:	mov	r2, #5
   19e88:	ldr	r3, [sp, #20]
   19e8c:	cmp	r0, #0
   19e90:	beq	19ea8 <__assert_fail@plt+0x77bc>
   19e94:	ldr	r1, [pc, #224]	; 19f7c <__assert_fail@plt+0x7890>
   19e98:	mov	r0, #0
   19e9c:	bl	1217c <dcgettext@plt>
   19ea0:	ldrb	r3, [r5]
   19ea4:	b	19db8 <__assert_fail@plt+0x76cc>
   19ea8:	cmp	r3, #2
   19eac:	bne	19ec0 <__assert_fail@plt+0x77d4>
   19eb0:	ldrb	r4, [r5, #1]
   19eb4:	cmp	r4, #0
   19eb8:	ldreq	r1, [pc, #192]	; 19f80 <__assert_fail@plt+0x7894>
   19ebc:	beq	19ec8 <__assert_fail@plt+0x77dc>
   19ec0:	ldr	r1, [pc, #188]	; 19f84 <__assert_fail@plt+0x7898>
   19ec4:	mov	r0, #0
   19ec8:	bl	1217c <dcgettext@plt>
   19ecc:	mov	r1, #0
   19ed0:	ldrb	r3, [r5]
   19ed4:	mov	r4, r5
   19ed8:	mov	r2, r0
   19edc:	mov	r0, r1
   19ee0:	bl	122c0 <error@plt>
   19ee4:	mov	r3, #0
   19ee8:	add	r2, r5, #1
   19eec:	mov	r0, r8
   19ef0:	str	r6, [sp, #8]
   19ef4:	str	r3, [sp, #4]
   19ef8:	str	r3, [sp]
   19efc:	sub	r2, r2, r7
   19f00:	mov	r1, r7
   19f04:	bl	19814 <__assert_fail@plt+0x7128>
   19f08:	mov	r8, r0
   19f0c:	b	19f50 <__assert_fail@plt+0x7864>
   19f10:	sub	r1, r3, #1
   19f14:	add	r4, r5, r1
   19f18:	ldrb	r1, [r5, r1]
   19f1c:	cmp	r1, #0
   19f20:	beq	19e74 <__assert_fail@plt+0x7788>
   19f24:	cmp	r3, #2
   19f28:	movne	r3, #0
   19f2c:	ldrbeq	r3, [r5, #1]
   19f30:	mov	r0, r8
   19f34:	str	r9, [sp]
   19f38:	sub	r2, r5, r7
   19f3c:	stmib	sp, {r3, r6}
   19f40:	mov	r1, r7
   19f44:	mov	r3, #2
   19f48:	bl	19814 <__assert_fail@plt+0x7128>
   19f4c:	mov	r8, r0
   19f50:	add	r7, r4, #1
   19f54:	b	19d88 <__assert_fail@plt+0x769c>
   19f58:	andeq	r9, r1, ip, ror #13
   19f5c:	andeq	ip, r3, fp
   19f60:	andeq	fp, r3, ip, asr #25
   19f64:			; <UNDEFINED> instruction: 0x0003bfb9
   19f68:	andeq	fp, r3, r8, ror #31
   19f6c:	andeq	fp, r3, r4, lsr #30
   19f70:	andeq	ip, r3, r0, lsl r0
   19f74:	andeq	ip, r3, sp, lsr #32
   19f78:	andeq	ip, r3, r2, lsr r0
   19f7c:	andeq	ip, r3, r6, lsr r0
   19f80:	andeq	ip, r3, r4, ror r0
   19f84:	strheq	ip, [r3], -sp
   19f88:	push	{r4, r5, r6, lr}
   19f8c:	mov	r5, r0
   19f90:	ldr	r4, [pc, #80]	; 19fe8 <__assert_fail@plt+0x78fc>
   19f94:	ldr	r0, [r4]
   19f98:	cmp	r0, #0
   19f9c:	beq	19fc4 <__assert_fail@plt+0x78d8>
   19fa0:	ldrb	r3, [r4, #4]
   19fa4:	eor	r3, r3, #1
   19fa8:	tst	r5, r3
   19fac:	beq	19fc4 <__assert_fail@plt+0x78d8>
   19fb0:	ldr	r6, [r0, #28]
   19fb4:	bl	2c060 <__assert_fail@plt+0x19974>
   19fb8:	subs	r0, r6, #0
   19fbc:	bne	19fb0 <__assert_fail@plt+0x78c4>
   19fc0:	str	r0, [r4]
   19fc4:	ldr	r3, [r4]
   19fc8:	cmp	r3, #0
   19fcc:	bne	19fe0 <__assert_fail@plt+0x78f4>
   19fd0:	mov	r0, r5
   19fd4:	bl	2c0a0 <__assert_fail@plt+0x199b4>
   19fd8:	strb	r5, [r4, #4]
   19fdc:	str	r0, [r4]
   19fe0:	ldr	r0, [r4]
   19fe4:	pop	{r4, r5, r6, pc}
   19fe8:	ldrdeq	r0, [r5], -r0	; <UNPREDICTABLE>
   19fec:	push	{r4, lr}
   19ff0:	sub	sp, sp, #104	; 0x68
   19ff4:	mov	r4, r0
   19ff8:	mov	r0, sp
   19ffc:	bl	17758 <__assert_fail@plt+0x506c>
   1a000:	ldr	r3, [pc, #36]	; 1a02c <__assert_fail@plt+0x7940>
   1a004:	mov	r1, sp
   1a008:	ldr	r0, [r4, #4]
   1a00c:	ldr	r3, [r3, #52]	; 0x34
   1a010:	blx	r3
   1a014:	cmp	r0, #0
   1a018:	mvnne	r0, #0
   1a01c:	ldrdeq	r2, [sp]
   1a020:	strdeq	r2, [r4, #16]
   1a024:	add	sp, sp, #104	; 0x68
   1a028:	pop	{r4, pc}
   1a02c:	andeq	r0, r5, r4, lsl #29
   1a030:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a034:	mov	r4, r0
   1a038:	ldr	r5, [pc, #264]	; 1a148 <__assert_fail@plt+0x7a5c>
   1a03c:	ldr	r0, [r5, #8]
   1a040:	cmp	r0, #0
   1a044:	beq	1a06c <__assert_fail@plt+0x7980>
   1a048:	ldrb	r3, [r5, #12]
   1a04c:	cmp	r3, #0
   1a050:	beq	1a068 <__assert_fail@plt+0x797c>
   1a054:	ldrd	r6, [r4]
   1a058:	ldrd	r2, [r5, #16]
   1a05c:	cmp	r7, r3
   1a060:	cmpeq	r6, r2
   1a064:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a068:	bl	2a01c <__assert_fail@plt+0x17930>
   1a06c:	ldrd	r2, [r4]
   1a070:	mov	r0, #1
   1a074:	strd	r2, [r5, #16]
   1a078:	bl	19f88 <__assert_fail@plt+0x789c>
   1a07c:	subs	r8, r0, #0
   1a080:	bne	1a0a0 <__assert_fail@plt+0x79b4>
   1a084:	mov	r2, #5
   1a088:	ldr	r1, [pc, #188]	; 1a14c <__assert_fail@plt+0x7a60>
   1a08c:	bl	1217c <dcgettext@plt>
   1a090:	mov	r1, r8
   1a094:	mov	r2, r0
   1a098:	mov	r0, #1
   1a09c:	bl	122c0 <error@plt>
   1a0a0:	ldr	r6, [pc, #168]	; 1a150 <__assert_fail@plt+0x7a64>
   1a0a4:	mov	r9, #0
   1a0a8:	mvn	sl, #0
   1a0ac:	mvn	fp, #0
   1a0b0:	mov	r1, r6
   1a0b4:	ldr	r0, [r8, #12]
   1a0b8:	bl	11ffc <strcmp@plt>
   1a0bc:	cmp	r0, #0
   1a0c0:	beq	1a0e8 <__assert_fail@plt+0x79fc>
   1a0c4:	ldrd	r2, [r8, #16]
   1a0c8:	cmp	r3, fp
   1a0cc:	cmpeq	r2, sl
   1a0d0:	beq	1a134 <__assert_fail@plt+0x7a48>
   1a0d4:	ldrd	r0, [r8, #16]
   1a0d8:	ldrd	r2, [r4]
   1a0dc:	cmp	r1, r3
   1a0e0:	cmpeq	r0, r2
   1a0e4:	moveq	r9, r8
   1a0e8:	ldr	r8, [r8, #28]
   1a0ec:	cmp	r8, #0
   1a0f0:	bne	1a0b0 <__assert_fail@plt+0x79c4>
   1a0f4:	cmp	r9, #0
   1a0f8:	moveq	r0, r9
   1a0fc:	beq	1a108 <__assert_fail@plt+0x7a1c>
   1a100:	ldr	r0, [r9, #12]
   1a104:	bl	291bc <__assert_fail@plt+0x16ad0>
   1a108:	cmp	r0, #0
   1a10c:	movne	r3, #1
   1a110:	moveq	r3, #0
   1a114:	strb	r3, [r5, #12]
   1a118:	bne	1a12c <__assert_fail@plt+0x7a40>
   1a11c:	mov	r2, #5
   1a120:	ldr	r1, [pc, #44]	; 1a154 <__assert_fail@plt+0x7a68>
   1a124:	bl	1217c <dcgettext@plt>
   1a128:	bl	291bc <__assert_fail@plt+0x16ad0>
   1a12c:	str	r0, [r5, #8]
   1a130:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a134:	mov	r0, r8
   1a138:	bl	19fec <__assert_fail@plt+0x7900>
   1a13c:	cmp	r0, #0
   1a140:	bne	1a0e8 <__assert_fail@plt+0x79fc>
   1a144:	b	1a0d4 <__assert_fail@plt+0x79e8>
   1a148:	ldrdeq	r0, [r5], -r0	; <UNPREDICTABLE>
   1a14c:	andeq	ip, r3, r7, lsr r1
   1a150:	andeq	ip, r3, ip, asr r1
   1a154:			; <UNDEFINED> instruction: 0x0003aabc
   1a158:	push	{r4, r5, r6, lr}
   1a15c:	mov	r1, r0
   1a160:	mov	r5, r0
   1a164:	ldr	r0, [pc, #72]	; 1a1b4 <__assert_fail@plt+0x7ac8>
   1a168:	bl	11ffc <strcmp@plt>
   1a16c:	cmp	r0, #0
   1a170:	bne	1a17c <__assert_fail@plt+0x7a90>
   1a174:	mov	r0, #1
   1a178:	pop	{r4, r5, r6, pc}
   1a17c:	mov	r0, #0
   1a180:	bl	19f88 <__assert_fail@plt+0x789c>
   1a184:	subs	r4, r0, #0
   1a188:	beq	1a174 <__assert_fail@plt+0x7a88>
   1a18c:	ldr	r1, [r4, #12]
   1a190:	mov	r0, r5
   1a194:	bl	11ffc <strcmp@plt>
   1a198:	cmp	r0, #0
   1a19c:	beq	1a174 <__assert_fail@plt+0x7a88>
   1a1a0:	ldr	r4, [r4, #28]
   1a1a4:	cmp	r4, #0
   1a1a8:	bne	1a18c <__assert_fail@plt+0x7aa0>
   1a1ac:	mov	r0, r4
   1a1b0:	pop	{r4, r5, r6, pc}
   1a1b4:	andeq	ip, r3, r3, ror #2
   1a1b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1bc:	sub	sp, sp, #20
   1a1c0:	mov	r4, #0
   1a1c4:	add	r8, sp, #16
   1a1c8:	str	r0, [sp]
   1a1cc:	mov	r0, r4
   1a1d0:	str	r4, [r8, #-4]!
   1a1d4:	bl	2c0a0 <__assert_fail@plt+0x199b4>
   1a1d8:	mov	r7, r4
   1a1dc:	mov	fp, r4
   1a1e0:	mov	sl, r0
   1a1e4:	mov	r5, r0
   1a1e8:	cmp	r5, #0
   1a1ec:	bne	1a210 <__assert_fail@plt+0x7b24>
   1a1f0:	cmp	sl, #0
   1a1f4:	bne	1a294 <__assert_fail@plt+0x7ba8>
   1a1f8:	cmp	r4, #0
   1a1fc:	mov	r0, r4
   1a200:	ldrne	r3, [sp]
   1a204:	strne	r7, [r3]
   1a208:	add	sp, sp, #20
   1a20c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a210:	add	r9, r7, #1
   1a214:	mov	r2, r8
   1a218:	lsl	r6, r9, #3
   1a21c:	mov	r1, r6
   1a220:	mov	r0, r4
   1a224:	bl	1e450 <__assert_fail@plt+0xbd64>
   1a228:	subs	ip, r0, #0
   1a22c:	beq	1a284 <__assert_fail@plt+0x7b98>
   1a230:	ldrd	r0, [r5, #16]
   1a234:	mvn	r3, #0
   1a238:	mvn	r2, #0
   1a23c:	cmp	r1, r3
   1a240:	cmpeq	r0, r2
   1a244:	beq	1a264 <__assert_fail@plt+0x7b78>
   1a248:	ldrd	r0, [r5, #16]
   1a24c:	add	r6, ip, r6
   1a250:	mov	r4, ip
   1a254:	mov	r7, r9
   1a258:	strd	r0, [r6, #-8]
   1a25c:	ldr	r5, [r5, #28]
   1a260:	b	1a1e8 <__assert_fail@plt+0x7afc>
   1a264:	mov	r0, r5
   1a268:	str	ip, [sp, #4]
   1a26c:	bl	19fec <__assert_fail@plt+0x7900>
   1a270:	ldr	ip, [sp, #4]
   1a274:	cmp	r0, #0
   1a278:	movne	r4, ip
   1a27c:	bne	1a25c <__assert_fail@plt+0x7b70>
   1a280:	b	1a248 <__assert_fail@plt+0x7b5c>
   1a284:	mov	r0, r4
   1a288:	bl	2a01c <__assert_fail@plt+0x17930>
   1a28c:	mov	r4, fp
   1a290:	b	1a25c <__assert_fail@plt+0x7b70>
   1a294:	ldr	r5, [sl, #28]
   1a298:	mov	r0, sl
   1a29c:	bl	2c060 <__assert_fail@plt+0x19974>
   1a2a0:	mov	sl, r5
   1a2a4:	b	1a1f0 <__assert_fail@plt+0x7b04>
   1a2a8:	ldr	r3, [r0]
   1a2ac:	ldrb	r2, [r3]
   1a2b0:	cmp	r2, #43	; 0x2b
   1a2b4:	beq	1a2cc <__assert_fail@plt+0x7be0>
   1a2b8:	cmp	r2, #45	; 0x2d
   1a2bc:	beq	1a2e4 <__assert_fail@plt+0x7bf8>
   1a2c0:	mov	r3, #2
   1a2c4:	str	r3, [r1]
   1a2c8:	b	1a2dc <__assert_fail@plt+0x7bf0>
   1a2cc:	add	r3, r3, #1
   1a2d0:	mov	r2, #0
   1a2d4:	str	r2, [r1]
   1a2d8:	str	r3, [r0]
   1a2dc:	mov	r0, #1
   1a2e0:	bx	lr
   1a2e4:	mov	r2, #1
   1a2e8:	str	r2, [r1]
   1a2ec:	add	r3, r3, r2
   1a2f0:	b	1a2d8 <__assert_fail@plt+0x7bec>
   1a2f4:	b	28398 <__assert_fail@plt+0x15cac>
   1a2f8:	push	{r0, r1, r2, lr}
   1a2fc:	ldr	r0, [pc, #184]	; 1a3bc <__assert_fail@plt+0x7cd0>
   1a300:	bl	1ea04 <__assert_fail@plt+0xc318>
   1a304:	mov	r2, #5
   1a308:	ldr	r1, [pc, #176]	; 1a3c0 <__assert_fail@plt+0x7cd4>
   1a30c:	mov	r0, #0
   1a310:	bl	1217c <dcgettext@plt>
   1a314:	bl	1202c <printf@plt>
   1a318:	ldr	r0, [pc, #164]	; 1a3c4 <__assert_fail@plt+0x7cd8>
   1a31c:	bl	1202c <printf@plt>
   1a320:	ldr	r3, [pc, #160]	; 1a3c8 <__assert_fail@plt+0x7cdc>
   1a324:	ldr	r2, [pc, #160]	; 1a3cc <__assert_fail@plt+0x7ce0>
   1a328:	mov	r4, r3
   1a32c:	ldrb	r1, [r3, #56]	; 0x38
   1a330:	ldr	r3, [pc, #152]	; 1a3d0 <__assert_fail@plt+0x7ce4>
   1a334:	ldr	r0, [pc, #152]	; 1a3d4 <__assert_fail@plt+0x7ce8>
   1a338:	cmp	r1, #0
   1a33c:	movne	r1, r2
   1a340:	moveq	r1, r3
   1a344:	bl	1202c <printf@plt>
   1a348:	ldr	r0, [pc, #136]	; 1a3d8 <__assert_fail@plt+0x7cec>
   1a34c:	bl	1202c <printf@plt>
   1a350:	bl	11fe4 <is_selinux_enabled@plt>
   1a354:	cmp	r0, #0
   1a358:	ble	1a364 <__assert_fail@plt+0x7c78>
   1a35c:	ldr	r0, [pc, #120]	; 1a3dc <__assert_fail@plt+0x7cf0>
   1a360:	bl	1202c <printf@plt>
   1a364:	add	r0, sp, #8
   1a368:	mov	r3, #0
   1a36c:	str	r3, [r0, #-4]!
   1a370:	bl	13720 <__assert_fail@plt+0x1034>
   1a374:	cmp	r0, #0
   1a378:	beq	1a3a0 <__assert_fail@plt+0x7cb4>
   1a37c:	ldr	r0, [pc, #92]	; 1a3e0 <__assert_fail@plt+0x7cf4>
   1a380:	bl	1202c <printf@plt>
   1a384:	ldr	r3, [sp, #4]
   1a388:	tst	r3, #512	; 0x200
   1a38c:	beq	1a398 <__assert_fail@plt+0x7cac>
   1a390:	ldr	r0, [pc, #76]	; 1a3e4 <__assert_fail@plt+0x7cf8>
   1a394:	bl	1202c <printf@plt>
   1a398:	ldr	r0, [pc, #72]	; 1a3e8 <__assert_fail@plt+0x7cfc>
   1a39c:	bl	1202c <printf@plt>
   1a3a0:	ldrh	r1, [r4, #68]	; 0x44
   1a3a4:	ldr	r0, [pc, #64]	; 1a3ec <__assert_fail@plt+0x7d00>
   1a3a8:	bl	1202c <printf@plt>
   1a3ac:	mov	r0, #10
   1a3b0:	bl	1244c <putchar@plt>
   1a3b4:	mov	r0, #0
   1a3b8:	bl	1238c <exit@plt>
   1a3bc:	andeq	r9, r3, pc, lsr #30
   1a3c0:	andeq	ip, r3, r1, asr #14
   1a3c4:	andeq	ip, r3, r4, asr r7
   1a3c8:	andeq	r0, r5, r4, lsl #29
   1a3cc:	andeq	ip, r3, r0, lsr r7
   1a3d0:	andeq	ip, r3, r8, lsr r7
   1a3d4:	andeq	ip, r3, ip, asr r7
   1a3d8:	andeq	ip, r3, ip, ror #14
   1a3dc:	andeq	ip, r3, pc, ror r7
   1a3e0:	andeq	ip, r3, r8, lsl #15
   1a3e4:	andeq	ip, r3, sp, lsl #15
   1a3e8:	andeq	sl, r3, r4, lsr #6
   1a3ec:	muleq	r3, r7, r7
   1a3f0:	push	{r4, lr}
   1a3f4:	mov	r0, #0
   1a3f8:	bl	1754c <__assert_fail@plt+0x4e60>
   1a3fc:	push	{r4, lr}
   1a400:	bl	17544 <__assert_fail@plt+0x4e58>
   1a404:	mov	r3, #0
   1a408:	strb	r3, [r0, #19]
   1a40c:	strb	r3, [r0, #18]
   1a410:	mov	r3, #1065353216	; 0x3f800000
   1a414:	str	r3, [r0, #28]
   1a418:	mov	r0, #1
   1a41c:	pop	{r4, pc}
   1a420:	push	{r4, lr}
   1a424:	bl	17544 <__assert_fail@plt+0x4e58>
   1a428:	mov	r2, #0
   1a42c:	mov	r3, r0
   1a430:	strb	r2, [r0, #19]
   1a434:	strb	r2, [r0, #18]
   1a438:	mov	r0, #1
   1a43c:	strb	r2, [r3, #17]
   1a440:	mov	r2, #1065353216	; 0x3f800000
   1a444:	strb	r0, [r3, #16]
   1a448:	str	r2, [r3, #28]
   1a44c:	pop	{r4, pc}
   1a450:	push	{r4, lr}
   1a454:	bl	17544 <__assert_fail@plt+0x4e58>
   1a458:	ldr	r2, [pc, #36]	; 1a484 <__assert_fail@plt+0x7d98>
   1a45c:	ldrb	r2, [r2]
   1a460:	cmp	r2, #0
   1a464:	mov	r3, r0
   1a468:	strbeq	r2, [r0, #19]
   1a46c:	strbeq	r2, [r0, #18]
   1a470:	mov	r0, #1
   1a474:	mov	r2, #0
   1a478:	strb	r0, [r3, #16]
   1a47c:	strb	r2, [r3, #17]
   1a480:	pop	{r4, pc}
   1a484:	andeq	r0, r5, r4, lsl #29
   1a488:	push	{r4, lr}
   1a48c:	bl	17544 <__assert_fail@plt+0x4e58>
   1a490:	ldr	r3, [pc, #8]	; 1a4a0 <__assert_fail@plt+0x7db4>
   1a494:	str	r3, [r0, #28]
   1a498:	mov	r0, #1
   1a49c:	pop	{r4, pc}
   1a4a0:	bcc	fe0dee64 <stdout@@GLIBC_2.4+0xfe08e8f8>
   1a4a4:	push	{r4, lr}
   1a4a8:	bl	17544 <__assert_fail@plt+0x4e58>
   1a4ac:	mov	r3, #0
   1a4b0:	strb	r3, [r0, #19]
   1a4b4:	strb	r3, [r0, #18]
   1a4b8:	strb	r3, [r0, #17]
   1a4bc:	strb	r3, [r0, #16]
   1a4c0:	ldr	r2, [r0]
   1a4c4:	ldr	r3, [pc, #20]	; 1a4e0 <__assert_fail@plt+0x7df4>
   1a4c8:	cmp	r2, r3
   1a4cc:	ldreq	r3, [pc, #16]	; 1a4e4 <__assert_fail@plt+0x7df8>
   1a4d0:	ldrne	r3, [pc, #16]	; 1a4e8 <__assert_fail@plt+0x7dfc>
   1a4d4:	str	r3, [r0, #28]
   1a4d8:	mov	r0, #1
   1a4dc:	pop	{r4, pc}
   1a4e0:	andeq	r4, r1, r4, ror r5
   1a4e4:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1a4e8:	svccc	0x00666666
   1a4ec:	push	{r4, lr}
   1a4f0:	bl	17544 <__assert_fail@plt+0x4e58>
   1a4f4:	ldr	r3, [pc, #8]	; 1a504 <__assert_fail@plt+0x7e18>
   1a4f8:	str	r3, [r0, #28]
   1a4fc:	mov	r0, #1
   1a500:	pop	{r4, pc}
   1a504:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1a508:	push	{r4, lr}
   1a50c:	bl	17544 <__assert_fail@plt+0x4e58>
   1a510:	ldr	r1, [pc, #40]	; 1a540 <__assert_fail@plt+0x7e54>
   1a514:	mov	r2, #0
   1a518:	strb	r2, [r1]
   1a51c:	mov	r3, r0
   1a520:	mov	r0, #1
   1a524:	strb	r2, [r3, #19]
   1a528:	strb	r2, [r3, #18]
   1a52c:	mov	r2, #1065353216	; 0x3f800000
   1a530:	strb	r0, [r3, #17]
   1a534:	strb	r0, [r3, #16]
   1a538:	str	r2, [r3, #28]
   1a53c:	pop	{r4, pc}
   1a540:	andeq	r0, r5, r4, lsl #29
   1a544:	push	{r4, lr}
   1a548:	mov	r1, #0
   1a54c:	bl	1750c <__assert_fail@plt+0x4e20>
   1a550:	ldr	r3, [pc, #8]	; 1a560 <__assert_fail@plt+0x7e74>
   1a554:	str	r3, [r0, #28]
   1a558:	mov	r0, #1
   1a55c:	pop	{r4, pc}
   1a560:	ldmcc	r1, {r0, r1, r2, r4, r8, r9, sl, ip, sp, pc}^
   1a564:	push	{r4, r5, r6, r7, lr}
   1a568:	vpush	{d8}
   1a56c:	mov	r4, r1
   1a570:	mov	r6, r2
   1a574:	sub	sp, sp, #36	; 0x24
   1a578:	add	r1, sp, #4
   1a57c:	str	r0, [sp, #12]
   1a580:	stm	r1, {r2, r3}
   1a584:	add	r0, sp, #12
   1a588:	add	r1, r4, #4
   1a58c:	ldr	r5, [sp, #8]
   1a590:	bl	1a2a8 <__assert_fail@plt+0x7bbc>
   1a594:	cmp	r0, #0
   1a598:	bne	1a5b0 <__assert_fail@plt+0x7ec4>
   1a59c:	mov	r7, #0
   1a5a0:	mov	r0, r7
   1a5a4:	add	sp, sp, #36	; 0x24
   1a5a8:	vpop	{d8}
   1a5ac:	pop	{r4, r5, r6, r7, pc}
   1a5b0:	ldr	r3, [r4, #4]
   1a5b4:	vmov.f64	d8, d0
   1a5b8:	cmp	r3, #0
   1a5bc:	beq	1a620 <__assert_fail@plt+0x7f34>
   1a5c0:	cmp	r3, #1
   1a5c4:	moveq	r3, #0
   1a5c8:	beq	1a624 <__assert_fail@plt+0x7f38>
   1a5cc:	ldr	r3, [pc, #236]	; 1a6c0 <__assert_fail@plt+0x7fd4>
   1a5d0:	add	r2, sp, #16
   1a5d4:	mov	r1, #0
   1a5d8:	ldr	r0, [sp, #12]
   1a5dc:	bl	29218 <__assert_fail@plt+0x16b2c>
   1a5e0:	subs	r7, r0, #0
   1a5e4:	beq	1a59c <__assert_fail@plt+0x7eb0>
   1a5e8:	vldr	d0, [sp, #16]
   1a5ec:	add	r0, sp, #24
   1a5f0:	vmul.f64	d0, d8, d0
   1a5f4:	bl	1235c <modf@plt>
   1a5f8:	vldr	d7, [pc, #184]	; 1a6b8 <__assert_fail@plt+0x7fcc>
   1a5fc:	vmul.f64	d0, d0, d7
   1a600:	vcmpe.f64	d0, d7
   1a604:	vmrs	APSR_nzcv, fpscr
   1a608:	bmi	1a62c <__assert_fail@plt+0x7f40>
   1a60c:	ldr	r3, [pc, #176]	; 1a6c4 <__assert_fail@plt+0x7fd8>
   1a610:	ldr	r2, [pc, #176]	; 1a6c8 <__assert_fail@plt+0x7fdc>
   1a614:	ldr	r1, [pc, #176]	; 1a6cc <__assert_fail@plt+0x7fe0>
   1a618:	ldr	r0, [pc, #176]	; 1a6d0 <__assert_fail@plt+0x7fe4>
   1a61c:	bl	126ec <__assert_fail@plt>
   1a620:	mov	r3, #1
   1a624:	str	r3, [r4, #4]
   1a628:	b	1a5cc <__assert_fail@plt+0x7ee0>
   1a62c:	vmov	s15, r6
   1a630:	vldr	d6, [sp, #24]
   1a634:	vcvt.f64.s32	d7, s15
   1a638:	vcmpe.f64	d6, #0.0
   1a63c:	vmrs	APSR_nzcv, fpscr
   1a640:	vsub.f64	d7, d7, d6
   1a644:	movmi	r2, #1
   1a648:	movpl	r2, #0
   1a64c:	vcvt.s32.f64	s15, d7
   1a650:	vmov	r3, s15
   1a654:	vstr	s15, [r4, #8]
   1a658:	cmp	r3, r6
   1a65c:	movle	r6, #0
   1a660:	movgt	r6, #1
   1a664:	cmp	r6, r2
   1a668:	beq	1a680 <__assert_fail@plt+0x7f94>
   1a66c:	ldr	r3, [sp, #12]
   1a670:	ldr	r2, [sp, #64]	; 0x40
   1a674:	mov	r1, #0
   1a678:	mov	r0, #1
   1a67c:	bl	122c0 <error@plt>
   1a680:	vmov	s15, r5
   1a684:	vcvt.f64.s32	d6, s15
   1a688:	vsub.f64	d7, d6, d0
   1a68c:	vcmpe.f64	d0, d6
   1a690:	vmrs	APSR_nzcv, fpscr
   1a694:	vcvt.s32.f64	s15, d7
   1a698:	ldrgt	r1, [pc, #52]	; 1a6d4 <__assert_fail@plt+0x7fe8>
   1a69c:	subgt	r3, r3, #1
   1a6a0:	strgt	r3, [r4, #8]
   1a6a4:	vmov	r2, s15
   1a6a8:	addgt	r1, r2, r1
   1a6ac:	strle	r2, [r4, #12]
   1a6b0:	strgt	r1, [r4, #12]
   1a6b4:	b	1a5a0 <__assert_fail@plt+0x7eb4>
   1a6b8:	andeq	r0, r0, r0
   1a6bc:	bicmi	ip, sp, r5, ror #26
   1a6c0:	andeq	r2, r1, ip, ror r4
   1a6c4:	andeq	ip, r3, r8, ror #2
   1a6c8:	andeq	r0, r0, sp, asr #24
   1a6cc:	andeq	ip, r3, r6, lsr #15
   1a6d0:	andeq	ip, r3, pc, lsr #15
   1a6d4:	blcc	fe6ccedc <stdout@@GLIBC_2.4+0xfe67c970>
   1a6d8:	push	{r4, lr}
   1a6dc:	sub	sp, sp, #24
   1a6e0:	cmp	r0, #0
   1a6e4:	str	r0, [sp, #12]
   1a6e8:	bne	1a6f8 <__assert_fail@plt+0x800c>
   1a6ec:	mov	r0, #0
   1a6f0:	add	sp, sp, #24
   1a6f4:	pop	{r4, pc}
   1a6f8:	cmp	r2, #0
   1a6fc:	mov	r4, r1
   1a700:	bne	1a72c <__assert_fail@plt+0x8040>
   1a704:	ldr	r3, [pc, #56]	; 1a744 <__assert_fail@plt+0x8058>
   1a708:	mov	r2, #10
   1a70c:	str	r3, [sp]
   1a710:	add	r1, sp, #20
   1a714:	mov	r3, r4
   1a718:	ldr	r0, [sp, #12]
   1a71c:	bl	296fc <__assert_fail@plt+0x17010>
   1a720:	clz	r0, r0
   1a724:	lsr	r0, r0, #5
   1a728:	b	1a6f0 <__assert_fail@plt+0x8004>
   1a72c:	mov	r1, r2
   1a730:	add	r0, sp, #12
   1a734:	bl	1a2a8 <__assert_fail@plt+0x7bbc>
   1a738:	cmp	r0, #0
   1a73c:	bne	1a704 <__assert_fail@plt+0x8018>
   1a740:	b	1a6ec <__assert_fail@plt+0x8000>
   1a744:	ldrdeq	fp, [r3], -pc	; <UNPREDICTABLE>
   1a748:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a74c:	subs	r6, r1, #0
   1a750:	sub	sp, sp, #28
   1a754:	beq	1a928 <__assert_fail@plt+0x823c>
   1a758:	ldr	r3, [r2]
   1a75c:	ldr	r5, [r6, r3, lsl #2]
   1a760:	cmp	r5, #0
   1a764:	beq	1a96c <__assert_fail@plt+0x8280>
   1a768:	mov	r9, r0
   1a76c:	mov	r0, r5
   1a770:	mov	r7, r2
   1a774:	bl	123bc <strlen@plt>
   1a778:	subs	r4, r0, #0
   1a77c:	bne	1a79c <__assert_fail@plt+0x80b0>
   1a780:	mov	r2, #5
   1a784:	ldr	r1, [pc, #496]	; 1a97c <__assert_fail@plt+0x8290>
   1a788:	bl	1217c <dcgettext@plt>
   1a78c:	mov	r1, r4
   1a790:	mov	r2, r0
   1a794:	mov	r0, #1
   1a798:	bl	122c0 <error@plt>
   1a79c:	sub	r4, r4, #1
   1a7a0:	mov	r3, #0
   1a7a4:	ldrb	r8, [r5, r4]
   1a7a8:	cmp	r8, #77	; 0x4d
   1a7ac:	beq	1a898 <__assert_fail@plt+0x81ac>
   1a7b0:	bhi	1a800 <__assert_fail@plt+0x8114>
   1a7b4:	cmp	r8, #48	; 0x30
   1a7b8:	bcc	1a7d4 <__assert_fail@plt+0x80e8>
   1a7bc:	cmp	r8, #57	; 0x39
   1a7c0:	bls	1a8a4 <__assert_fail@plt+0x81b8>
   1a7c4:	cmp	r8, #71	; 0x47
   1a7c8:	strbeq	r3, [r5, r4]
   1a7cc:	moveq	r4, #1073741824	; 0x40000000
   1a7d0:	beq	1a81c <__assert_fail@plt+0x8130>
   1a7d4:	mov	r2, #5
   1a7d8:	ldr	r1, [pc, #416]	; 1a980 <__assert_fail@plt+0x8294>
   1a7dc:	mov	r0, #0
   1a7e0:	bl	1217c <dcgettext@plt>
   1a7e4:	ldr	r3, [r7]
   1a7e8:	mov	r1, #0
   1a7ec:	ldr	r3, [r6, r3, lsl #2]
   1a7f0:	ldrb	r3, [r3, r4]
   1a7f4:	mov	r2, r0
   1a7f8:	mov	r0, #1
   1a7fc:	bl	122c0 <error@plt>
   1a800:	cmp	r8, #99	; 0x63
   1a804:	beq	1a880 <__assert_fail@plt+0x8194>
   1a808:	bhi	1a864 <__assert_fail@plt+0x8178>
   1a80c:	cmp	r8, #98	; 0x62
   1a810:	strbeq	r3, [r5, r4]
   1a814:	moveq	r4, #512	; 0x200
   1a818:	bne	1a7d4 <__assert_fail@plt+0x80e8>
   1a81c:	add	r2, sp, #12
   1a820:	add	r1, sp, #16
   1a824:	mov	r0, r5
   1a828:	bl	1a6d8 <__assert_fail@plt+0x7fec>
   1a82c:	subs	r6, r0, #0
   1a830:	bne	1a8b0 <__assert_fail@plt+0x81c4>
   1a834:	mov	r2, #5
   1a838:	ldr	r1, [pc, #324]	; 1a984 <__assert_fail@plt+0x8298>
   1a83c:	strb	r8, [sp, #8]
   1a840:	strb	r6, [sp, #9]
   1a844:	bl	1217c <dcgettext@plt>
   1a848:	add	r3, sp, #8
   1a84c:	str	r3, [sp]
   1a850:	mov	r1, r6
   1a854:	mov	r3, r5
   1a858:	mov	r2, r0
   1a85c:	mov	r0, #1
   1a860:	bl	122c0 <error@plt>
   1a864:	cmp	r8, #107	; 0x6b
   1a868:	beq	1a88c <__assert_fail@plt+0x81a0>
   1a86c:	cmp	r8, #119	; 0x77
   1a870:	strbeq	r3, [r5, r4]
   1a874:	moveq	r4, #2
   1a878:	beq	1a81c <__assert_fail@plt+0x8130>
   1a87c:	b	1a7d4 <__assert_fail@plt+0x80e8>
   1a880:	strb	r3, [r5, r4]
   1a884:	mov	r4, #1
   1a888:	b	1a81c <__assert_fail@plt+0x8130>
   1a88c:	strb	r3, [r5, r4]
   1a890:	mov	r4, #1024	; 0x400
   1a894:	b	1a81c <__assert_fail@plt+0x8130>
   1a898:	strb	r3, [r5, r4]
   1a89c:	mov	r4, #1048576	; 0x100000
   1a8a0:	b	1a81c <__assert_fail@plt+0x8130>
   1a8a4:	mov	r4, #512	; 0x200
   1a8a8:	mov	r8, r3
   1a8ac:	b	1a81c <__assert_fail@plt+0x8130>
   1a8b0:	mov	r1, r5
   1a8b4:	mov	r0, r9
   1a8b8:	bl	1750c <__assert_fail@plt+0x4e20>
   1a8bc:	ldr	r1, [sp, #12]
   1a8c0:	mov	ip, #1
   1a8c4:	ldr	r2, [sp, #16]
   1a8c8:	ldr	r3, [sp, #20]
   1a8cc:	strb	ip, [r0, #18]
   1a8d0:	mov	ip, #0
   1a8d4:	cmp	r1, ip
   1a8d8:	str	r1, [r0, #40]	; 0x28
   1a8dc:	str	r4, [r0, #44]	; 0x2c
   1a8e0:	str	r2, [r0, #48]	; 0x30
   1a8e4:	str	r3, [r0, #52]	; 0x34
   1a8e8:	strb	ip, [r0, #19]
   1a8ec:	bne	1a934 <__assert_fail@plt+0x8248>
   1a8f0:	mul	r3, r4, r3
   1a8f4:	vldr	s14, [pc, #120]	; 1a974 <__assert_fail@plt+0x8288>
   1a8f8:	asr	r9, r4, #31
   1a8fc:	umull	r4, r5, r4, r2
   1a900:	vldr	s15, [pc, #112]	; 1a978 <__assert_fail@plt+0x828c>
   1a904:	mla	r3, r2, r9, r3
   1a908:	add	r5, r3, r5
   1a90c:	cmp	r5, #0
   1a910:	cmpeq	r4, #20480	; 0x5000
   1a914:	vmovls.f32	s15, s14
   1a918:	vstr	s15, [r0, #28]
   1a91c:	ldr	r3, [r7]
   1a920:	add	r3, r3, #1
   1a924:	str	r3, [r7]
   1a928:	mov	r0, r6
   1a92c:	add	sp, sp, #28
   1a930:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a934:	cmp	r1, #1
   1a938:	ldrne	r3, [pc, #72]	; 1a988 <__assert_fail@plt+0x829c>
   1a93c:	strne	r3, [r0, #28]
   1a940:	bne	1a91c <__assert_fail@plt+0x8230>
   1a944:	mul	r3, r4, r3
   1a948:	vldr	s14, [pc, #40]	; 1a978 <__assert_fail@plt+0x828c>
   1a94c:	asr	r9, r4, #31
   1a950:	umull	r4, r5, r4, r2
   1a954:	vldr	s15, [pc, #24]	; 1a974 <__assert_fail@plt+0x8288>
   1a958:	mla	r3, r2, r9, r3
   1a95c:	add	r5, r3, r5
   1a960:	cmp	r5, #0
   1a964:	cmpeq	r4, #20480	; 0x5000
   1a968:	b	1a914 <__assert_fail@plt+0x8228>
   1a96c:	mov	r6, r5
   1a970:	b	1a928 <__assert_fail@plt+0x823c>
   1a974:	svccc	0x00666666
   1a978:	stclcc	12, cr12, [ip, #820]	; 0x334
   1a97c:	andeq	ip, r3, r9, asr #15
   1a980:	andeq	ip, r3, r8, ror #15
   1a984:	andeq	ip, r3, r0, lsl #16
   1a988:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1a98c:	push	{r4, r5, r6, lr}
   1a990:	mov	r5, r0
   1a994:	mov	r0, #0
   1a998:	str	r0, [r1]
   1a99c:	mov	r4, r1
   1a9a0:	bl	27c00 <__assert_fail@plt+0x15514>
   1a9a4:	ldr	r1, [pc, #172]	; 1aa58 <__assert_fail@plt+0x836c>
   1a9a8:	str	r0, [r4, #16]
   1a9ac:	mov	r0, r5
   1a9b0:	bl	11ffc <strcmp@plt>
   1a9b4:	cmp	r0, #0
   1a9b8:	bne	1aa00 <__assert_fail@plt+0x8314>
   1a9bc:	ldr	r3, [pc, #152]	; 1aa5c <__assert_fail@plt+0x8370>
   1a9c0:	ldr	r1, [pc, #152]	; 1aa60 <__assert_fail@plt+0x8374>
   1a9c4:	mov	r2, #5
   1a9c8:	ldr	r3, [r3]
   1a9cc:	str	r3, [r4, #4]
   1a9d0:	bl	1217c <dcgettext@plt>
   1a9d4:	str	r0, [r4, #8]
   1a9d8:	ldr	r0, [r4, #4]
   1a9dc:	bl	12488 <fileno@plt>
   1a9e0:	cmn	r0, #1
   1a9e4:	moveq	r0, #0
   1a9e8:	beq	1a9f8 <__assert_fail@plt+0x830c>
   1a9ec:	bl	1265c <isatty@plt>
   1a9f0:	adds	r0, r0, #0
   1a9f4:	movne	r0, #1
   1a9f8:	strb	r0, [r4, #12]
   1a9fc:	pop	{r4, r5, r6, pc}
   1aa00:	ldr	r1, [pc, #92]	; 1aa64 <__assert_fail@plt+0x8378>
   1aa04:	mov	r0, r5
   1aa08:	bl	11ffc <strcmp@plt>
   1aa0c:	cmp	r0, #0
   1aa10:	bne	1aa2c <__assert_fail@plt+0x8340>
   1aa14:	ldr	r3, [pc, #76]	; 1aa68 <__assert_fail@plt+0x837c>
   1aa18:	mov	r2, #5
   1aa1c:	ldr	r1, [pc, #72]	; 1aa6c <__assert_fail@plt+0x8380>
   1aa20:	ldr	r3, [r3]
   1aa24:	str	r3, [r4, #4]
   1aa28:	b	1a9d0 <__assert_fail@plt+0x82e4>
   1aa2c:	ldr	r3, [pc, #60]	; 1aa70 <__assert_fail@plt+0x8384>
   1aa30:	mov	r1, r5
   1aa34:	ldr	r0, [r3, #36]	; 0x24
   1aa38:	bl	18708 <__assert_fail@plt+0x601c>
   1aa3c:	cmp	r0, #0
   1aa40:	stmib	r4, {r0, r5}
   1aa44:	bne	1a9d8 <__assert_fail@plt+0x82ec>
   1aa48:	bl	12404 <__errno_location@plt>
   1aa4c:	mov	r1, r5
   1aa50:	ldr	r0, [r0]
   1aa54:	bl	18590 <__assert_fail@plt+0x5ea4>
   1aa58:	andeq	ip, r3, r1, lsr #16
   1aa5c:	andeq	r0, r5, r0, ror #10
   1aa60:	andeq	ip, r3, sp, lsr #16
   1aa64:	andeq	ip, r3, ip, lsr r8
   1aa68:	andeq	r0, r5, ip, ror #10
   1aa6c:	andeq	fp, r3, fp, ror #21
   1aa70:	andeq	r0, r5, r8, asr lr
   1aa74:	subs	ip, r2, #0
   1aa78:	beq	1afd4 <__assert_fail@plt+0x88e8>
   1aa7c:	ldr	r2, [r3]
   1aa80:	ldr	r2, [ip, r2, lsl #2]
   1aa84:	cmp	r2, #0
   1aa88:	beq	1afdc <__assert_fail@plt+0x88f0>
   1aa8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa90:	sub	sp, sp, #68	; 0x44
   1aa94:	ldr	r9, [r1, #12]
   1aa98:	str	r3, [sp, #16]
   1aa9c:	mov	r3, r1
   1aaa0:	ldr	r2, [pc, #1340]	; 1afe4 <__assert_fail@plt+0x88f8>
   1aaa4:	mov	r1, r9
   1aaa8:	mov	r6, r0
   1aaac:	mov	r0, r3
   1aab0:	str	ip, [sp, #20]
   1aab4:	bl	174d4 <__assert_fail@plt+0x4de8>
   1aab8:	mov	r1, #0
   1aabc:	mov	r2, #1
   1aac0:	ldr	r3, [pc, #1312]	; 1afe8 <__assert_fail@plt+0x88fc>
   1aac4:	strb	r2, [r0, #17]
   1aac8:	strb	r2, [r0, #16]
   1aacc:	strb	r1, [r0, #18]
   1aad0:	strb	r1, [r0, #19]
   1aad4:	str	r1, [r0, #144]	; 0x90
   1aad8:	mov	sl, r0
   1aadc:	ldr	r0, [pc, #1288]	; 1afec <__assert_fail@plt+0x8900>
   1aae0:	cmp	r9, r0
   1aae4:	cmpne	r9, r3
   1aae8:	strbeq	r2, [sl, #140]	; 0x8c
   1aaec:	ldreq	r1, [pc, #1276]	; 1aff0 <__assert_fail@plt+0x8904>
   1aaf0:	movne	r0, #1
   1aaf4:	moveq	r0, #0
   1aaf8:	strbeq	r2, [r1, #80]	; 0x50
   1aafc:	ldr	r2, [pc, #1264]	; 1aff4 <__assert_fail@plt+0x8908>
   1ab00:	strbne	r1, [sl, #140]	; 0x8c
   1ab04:	cmp	r9, r2
   1ab08:	cmpne	r9, r3
   1ab0c:	moveq	r3, #1
   1ab10:	movne	r3, #0
   1ab14:	str	r0, [sp, #24]
   1ab18:	str	r3, [sp, #28]
   1ab1c:	bne	1ac7c <__assert_fail@plt+0x8590>
   1ab20:	ldr	r3, [pc, #1224]	; 1aff0 <__assert_fail@plt+0x8904>
   1ab24:	mov	r5, #0
   1ab28:	str	r5, [sl, #144]	; 0x90
   1ab2c:	ldr	r0, [pc, #1220]	; 1aff8 <__assert_fail@plt+0x890c>
   1ab30:	strb	r5, [r3, #14]
   1ab34:	bl	122fc <getenv@plt>
   1ab38:	subs	r4, r0, #0
   1ab3c:	beq	1ac20 <__assert_fail@plt+0x8534>
   1ab40:	add	r7, sp, #44	; 0x2c
   1ab44:	str	r7, [sp]
   1ab48:	add	r3, sp, #40	; 0x28
   1ab4c:	mov	r2, #1
   1ab50:	ldr	r1, [pc, #1188]	; 1affc <__assert_fail@plt+0x8910>
   1ab54:	bl	1f758 <__assert_fail@plt+0xd06c>
   1ab58:	ldr	r8, [pc, #1180]	; 1affc <__assert_fail@plt+0x8910>
   1ab5c:	ldr	r1, [sp, #44]	; 0x2c
   1ab60:	cmp	r1, #0
   1ab64:	beq	1ab80 <__assert_fail@plt+0x8494>
   1ab68:	cmp	r1, #1
   1ab6c:	ldr	r3, [sp, #40]	; 0x28
   1ab70:	bne	1aba4 <__assert_fail@plt+0x84b8>
   1ab74:	ldrb	r2, [r4, r3]
   1ab78:	cmp	r2, #46	; 0x2e
   1ab7c:	bne	1aba4 <__assert_fail@plt+0x84b8>
   1ab80:	mov	r2, #5
   1ab84:	ldr	r1, [pc, #1140]	; 1b000 <__assert_fail@plt+0x8914>
   1ab88:	mov	r0, #0
   1ab8c:	bl	1217c <dcgettext@plt>
   1ab90:	mov	r3, r6
   1ab94:	mov	r1, #0
   1ab98:	mov	r2, r0
   1ab9c:	mov	r0, #1
   1aba0:	bl	122c0 <error@plt>
   1aba4:	add	r0, r4, r3
   1aba8:	ldrb	r3, [r4, r3]
   1abac:	cmp	r3, #47	; 0x2f
   1abb0:	beq	1ac00 <__assert_fail@plt+0x8514>
   1abb4:	bl	120d4 <strndup@plt>
   1abb8:	ldr	r1, [pc, #1092]	; 1b004 <__assert_fail@plt+0x8918>
   1abbc:	mov	r2, #5
   1abc0:	mov	r5, r0
   1abc4:	mov	r0, #0
   1abc8:	bl	1217c <dcgettext@plt>
   1abcc:	cmp	r5, #0
   1abd0:	movne	r1, r5
   1abd4:	ldreq	r1, [sp, #40]	; 0x28
   1abd8:	mov	r7, r0
   1abdc:	addeq	r1, r4, r1
   1abe0:	mov	r0, #0
   1abe4:	bl	180e8 <__assert_fail@plt+0x59fc>
   1abe8:	str	r6, [sp]
   1abec:	mov	r2, r7
   1abf0:	mov	r1, #0
   1abf4:	mov	r3, r0
   1abf8:	mov	r0, #1
   1abfc:	bl	122c0 <error@plt>
   1ac00:	str	r7, [sp]
   1ac04:	add	r3, sp, #40	; 0x28
   1ac08:	mov	r2, r5
   1ac0c:	mov	r1, r8
   1ac10:	mov	r0, r4
   1ac14:	bl	1f758 <__assert_fail@plt+0xd06c>
   1ac18:	cmp	r0, #0
   1ac1c:	bne	1ab5c <__assert_fail@plt+0x8470>
   1ac20:	ldr	r3, [sp, #16]
   1ac24:	mov	r7, #0
   1ac28:	strb	r7, [sl, #40]	; 0x28
   1ac2c:	ldr	r5, [r3]
   1ac30:	ldr	r3, [sp, #20]
   1ac34:	mov	r4, r5
   1ac38:	add	r6, r3, r5, lsl #2
   1ac3c:	mov	r2, r6
   1ac40:	mov	r3, r7
   1ac44:	mov	r1, r7
   1ac48:	ldr	fp, [r2]
   1ac4c:	mov	r8, r2
   1ac50:	cmp	fp, #0
   1ac54:	add	r2, r2, #4
   1ac58:	beq	1ace4 <__assert_fail@plt+0x85f8>
   1ac5c:	ldrb	r0, [fp]
   1ac60:	cmp	r0, #59	; 0x3b
   1ac64:	bne	1aca4 <__assert_fail@plt+0x85b8>
   1ac68:	ldrb	ip, [fp, #1]
   1ac6c:	cmp	ip, #0
   1ac70:	bne	1aca4 <__assert_fail@plt+0x85b8>
   1ac74:	cmp	r4, r5
   1ac78:	b	1ad7c <__assert_fail@plt+0x8690>
   1ac7c:	ldr	r3, [pc, #900]	; 1b008 <__assert_fail@plt+0x891c>
   1ac80:	ldr	r3, [r3]
   1ac84:	cmp	r3, #0
   1ac88:	strne	r3, [sl, #144]	; 0x90
   1ac8c:	bne	1ac20 <__assert_fail@plt+0x8534>
   1ac90:	ldr	r3, [pc, #884]	; 1b00c <__assert_fail@plt+0x8920>
   1ac94:	ldr	r2, [pc, #884]	; 1b010 <__assert_fail@plt+0x8924>
   1ac98:	ldr	r1, [pc, #884]	; 1b014 <__assert_fail@plt+0x8928>
   1ac9c:	ldr	r0, [pc, #884]	; 1b018 <__assert_fail@plt+0x892c>
   1aca0:	bl	126ec <__assert_fail@plt>
   1aca4:	ldr	ip, [sp, #24]
   1aca8:	cmp	r0, #43	; 0x2b
   1acac:	movne	ip, #0
   1acb0:	andeq	ip, ip, #1
   1acb4:	cmp	ip, #0
   1acb8:	beq	1ad00 <__assert_fail@plt+0x8614>
   1acbc:	ldrb	r0, [fp, #1]
   1acc0:	cmp	r0, #0
   1acc4:	movne	r1, #0
   1acc8:	andeq	r1, r1, #1
   1accc:	cmp	r1, #0
   1acd0:	beq	1ad00 <__assert_fail@plt+0x8614>
   1acd4:	mov	r2, #1
   1acd8:	cmp	r4, r5
   1acdc:	strb	r2, [sl, #40]	; 0x28
   1ace0:	bne	1ad74 <__assert_fail@plt+0x8688>
   1ace4:	ldr	r3, [sp, #16]
   1ace8:	mov	r0, sl
   1acec:	str	r4, [r3]
   1acf0:	bl	2a01c <__assert_fail@plt+0x17930>
   1acf4:	mov	r0, #0
   1acf8:	add	sp, sp, #68	; 0x44
   1acfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad00:	ldr	r1, [pc, #788]	; 1b01c <__assert_fail@plt+0x8930>
   1ad04:	mov	r0, fp
   1ad08:	str	r2, [sp, #36]	; 0x24
   1ad0c:	str	r3, [sp, #32]
   1ad10:	bl	223c8 <__assert_fail@plt+0xfcdc>
   1ad14:	ldr	r3, [sp, #32]
   1ad18:	ldr	r2, [sp, #36]	; 0x24
   1ad1c:	cmp	r0, #0
   1ad20:	beq	1ad5c <__assert_fail@plt+0x8670>
   1ad24:	cmp	r4, #0
   1ad28:	add	r3, r3, #1
   1ad2c:	bne	1ad68 <__assert_fail@plt+0x867c>
   1ad30:	ldr	r1, [sp, #28]
   1ad34:	cmp	r1, #0
   1ad38:	beq	1ad68 <__assert_fail@plt+0x867c>
   1ad3c:	mov	r2, #5
   1ad40:	ldr	r1, [pc, #728]	; 1b020 <__assert_fail@plt+0x8934>
   1ad44:	mov	r0, r4
   1ad48:	bl	1217c <dcgettext@plt>
   1ad4c:	mov	r1, r4
   1ad50:	mov	r2, r0
   1ad54:	mov	r0, #1
   1ad58:	bl	122c0 <error@plt>
   1ad5c:	mov	r1, #0
   1ad60:	add	r4, r4, #1
   1ad64:	b	1ac48 <__assert_fail@plt+0x855c>
   1ad68:	mov	r7, fp
   1ad6c:	mov	r1, #1
   1ad70:	b	1ad60 <__assert_fail@plt+0x8674>
   1ad74:	ldr	r2, [r8]
   1ad78:	cmp	r2, #0
   1ad7c:	beq	1ace4 <__assert_fail@plt+0x85f8>
   1ad80:	ldrb	r2, [sl, #40]	; 0x28
   1ad84:	cmp	r2, #0
   1ad88:	beq	1ae7c <__assert_fail@plt+0x8790>
   1ad8c:	ldr	r0, [pc, #608]	; 1aff4 <__assert_fail@plt+0x8908>
   1ad90:	ldr	r2, [pc, #652]	; 1b024 <__assert_fail@plt+0x8938>
   1ad94:	ldr	r1, [pc, #652]	; 1b028 <__assert_fail@plt+0x893c>
   1ad98:	cmp	r9, r0
   1ad9c:	moveq	r9, r1
   1ada0:	movne	r9, r2
   1ada4:	cmp	r3, #1
   1ada8:	ble	1add0 <__assert_fail@plt+0x86e4>
   1adac:	mov	r2, #5
   1adb0:	ldr	r1, [pc, #628]	; 1b02c <__assert_fail@plt+0x8940>
   1adb4:	mov	r0, #0
   1adb8:	bl	1217c <dcgettext@plt>
   1adbc:	mov	r3, r9
   1adc0:	mov	r1, #0
   1adc4:	mov	r2, r0
   1adc8:	mov	r0, #1
   1adcc:	bl	122c0 <error@plt>
   1add0:	mov	r0, r7
   1add4:	bl	123bc <strlen@plt>
   1add8:	cmp	r0, #2
   1addc:	beq	1ae7c <__assert_fail@plt+0x8790>
   1ade0:	mov	r3, r9
   1ade4:	ldr	r2, [pc, #580]	; 1b030 <__assert_fail@plt+0x8944>
   1ade8:	mov	r1, #19
   1adec:	add	r0, sp, #44	; 0x2c
   1adf0:	bl	1241c <snprintf@plt>
   1adf4:	cmp	r0, #19
   1adf8:	bls	1ae10 <__assert_fail@plt+0x8724>
   1adfc:	ldr	r3, [pc, #520]	; 1b00c <__assert_fail@plt+0x8920>
   1ae00:	ldr	r2, [pc, #556]	; 1b034 <__assert_fail@plt+0x8948>
   1ae04:	ldr	r1, [pc, #520]	; 1b014 <__assert_fail@plt+0x8928>
   1ae08:	ldr	r0, [pc, #552]	; 1b038 <__assert_fail@plt+0x894c>
   1ae0c:	bl	126ec <__assert_fail@plt>
   1ae10:	mov	r2, #5
   1ae14:	ldr	r1, [pc, #544]	; 1b03c <__assert_fail@plt+0x8950>
   1ae18:	mov	r0, #0
   1ae1c:	bl	1217c <dcgettext@plt>
   1ae20:	ldr	r4, [pc, #456]	; 1aff0 <__assert_fail@plt+0x8904>
   1ae24:	add	r2, sp, #44	; 0x2c
   1ae28:	ldr	r1, [r4, #72]	; 0x48
   1ae2c:	mov	r5, r0
   1ae30:	mov	r0, #0
   1ae34:	bl	27f14 <__assert_fail@plt+0x15828>
   1ae38:	ldr	r2, [pc, #476]	; 1b01c <__assert_fail@plt+0x8930>
   1ae3c:	ldr	r1, [r4, #72]	; 0x48
   1ae40:	mov	r6, r0
   1ae44:	mov	r0, #1
   1ae48:	bl	27f14 <__assert_fail@plt+0x15828>
   1ae4c:	mov	r2, r7
   1ae50:	ldr	r1, [r4, #72]	; 0x48
   1ae54:	mov	r8, r0
   1ae58:	mov	r0, #2
   1ae5c:	bl	27f14 <__assert_fail@plt+0x15828>
   1ae60:	str	r8, [sp]
   1ae64:	mov	r3, r6
   1ae68:	mov	r2, r5
   1ae6c:	mov	r1, #0
   1ae70:	str	r0, [sp, #4]
   1ae74:	mov	r0, #1
   1ae78:	bl	122c0 <error@plt>
   1ae7c:	add	r7, sl, #44	; 0x2c
   1ae80:	mov	r1, #2048	; 0x800
   1ae84:	mov	r0, r7
   1ae88:	bl	1e0f8 <__assert_fail@plt+0xba0c>
   1ae8c:	add	fp, sl, #40	; 0x28
   1ae90:	sub	r0, r0, #1
   1ae94:	cmp	r0, #1
   1ae98:	bhi	1aebc <__assert_fail@plt+0x87d0>
   1ae9c:	mov	r2, #5
   1aea0:	ldr	r1, [pc, #408]	; 1b040 <__assert_fail@plt+0x8954>
   1aea4:	mov	r0, #0
   1aea8:	bl	1217c <dcgettext@plt>
   1aeac:	mov	r1, #0
   1aeb0:	mov	r2, r0
   1aeb4:	mov	r0, #1
   1aeb8:	bl	122c0 <error@plt>
   1aebc:	mov	r0, r7
   1aec0:	bl	1e1b8 <__assert_fail@plt+0xbacc>
   1aec4:	ldr	r3, [pc, #376]	; 1b044 <__assert_fail@plt+0x8958>
   1aec8:	sub	r0, r4, r5
   1aecc:	str	r3, [sl, #76]	; 0x4c
   1aed0:	ldrb	r3, [sl, #40]	; 0x28
   1aed4:	add	r9, sl, #88	; 0x58
   1aed8:	cmp	r3, #0
   1aedc:	beq	1af74 <__assert_fail@plt+0x8888>
   1aee0:	mov	r6, #0
   1aee4:	sub	r0, r0, #1
   1aee8:	str	r0, [sl, #72]	; 0x48
   1aeec:	str	r6, [sl, #132]	; 0x84
   1aef0:	str	r6, [sl, #68]	; 0x44
   1aef4:	str	r6, [sl, #64]	; 0x40
   1aef8:	str	r6, [sl, #80]	; 0x50
   1aefc:	str	r6, [sl, #84]	; 0x54
   1af00:	mov	r2, fp
   1af04:	mov	r1, r9
   1af08:	mov	r0, r7
   1af0c:	bl	1e1dc <__assert_fail@plt+0xbaf0>
   1af10:	sub	sl, r4, #1
   1af14:	mov	fp, #1
   1af18:	cmp	r5, sl
   1af1c:	blt	1af3c <__assert_fail@plt+0x8850>
   1af20:	ldr	r3, [r8]
   1af24:	mov	r0, #1
   1af28:	cmp	r3, #0
   1af2c:	ldr	r3, [sp, #16]
   1af30:	addne	r4, r4, #1
   1af34:	str	r4, [r3]
   1af38:	b	1acf8 <__assert_fail@plt+0x860c>
   1af3c:	ldr	r3, [sp, #20]
   1af40:	ldr	r2, [r3, r5, lsl #2]
   1af44:	add	r5, r5, #1
   1af48:	mov	r0, r2
   1af4c:	str	r2, [sp, #24]
   1af50:	bl	123bc <strlen@plt>
   1af54:	stmib	sp, {r6, fp}
   1af58:	str	r6, [sp]
   1af5c:	ldr	r2, [sp, #24]
   1af60:	mov	r1, r9
   1af64:	add	r3, r0, #1
   1af68:	mov	r0, r7
   1af6c:	bl	1d9f8 <__assert_fail@plt+0xb30c>
   1af70:	b	1af18 <__assert_fail@plt+0x882c>
   1af74:	ldr	r2, [pc, #160]	; 1b01c <__assert_fail@plt+0x8930>
   1af78:	str	r3, [sl, #80]	; 0x50
   1af7c:	str	r2, [sl, #68]	; 0x44
   1af80:	mov	r2, #2
   1af84:	str	r3, [sl, #84]	; 0x54
   1af88:	str	r0, [sl, #136]	; 0x88
   1af8c:	str	r2, [sl, #64]	; 0x40
   1af90:	lsl	r0, r0, r2
   1af94:	str	r3, [sp, #20]
   1af98:	bl	28d44 <__assert_fail@plt+0x16658>
   1af9c:	mov	r2, fp
   1afa0:	mov	r1, r9
   1afa4:	str	r0, [sl, #132]	; 0x84
   1afa8:	mov	r0, r7
   1afac:	bl	1e1dc <__assert_fail@plt+0xbaf0>
   1afb0:	ldr	r2, [sl, #136]	; 0x88
   1afb4:	ldr	r3, [sp, #20]
   1afb8:	cmp	r3, r2
   1afbc:	bge	1af20 <__assert_fail@plt+0x8834>
   1afc0:	ldr	r1, [sl, #132]	; 0x84
   1afc4:	ldr	r0, [r6, r3, lsl #2]
   1afc8:	str	r0, [r1, r3, lsl #2]
   1afcc:	add	r3, r3, #1
   1afd0:	b	1afb8 <__assert_fail@plt+0x88cc>
   1afd4:	mov	r0, ip
   1afd8:	bx	lr
   1afdc:	mov	r0, r2
   1afe0:	bx	lr
   1afe4:	andeq	ip, r3, r8, asr #16
   1afe8:	andeq	r4, r1, ip, lsl #9
   1afec:	andeq	r4, r1, r0, asr r4
   1aff0:	andeq	r0, r5, r4, lsl #29
   1aff4:	andeq	r3, r1, r0, lsl #30
   1aff8:	strdeq	ip, [r3], -fp
   1affc:	ldrdeq	sl, [r3], -r7
   1b000:	andeq	ip, r3, r0, ror #16
   1b004:	andeq	ip, r3, fp, asr r9
   1b008:	andeq	r0, r5, r0, lsl #11
   1b00c:	andeq	ip, r3, pc, ror r1
   1b010:	andeq	r0, r0, r9, ror fp
   1b014:	andeq	ip, r3, r6, lsr #15
   1b018:	andeq	ip, r3, r0, lsl #20
   1b01c:	andeq	ip, r3, r3, lsl sl
   1b020:	andeq	ip, r3, r6, lsl sl
   1b024:	ldrdeq	fp, [r3], -pc	; <UNPREDICTABLE>
   1b028:	andeq	ip, r3, sp, asr #22
   1b02c:	andeq	ip, r3, r8, lsl #21
   1b030:	andeq	ip, r3, r0, asr #21
   1b034:	andeq	r0, r0, r6, asr #23
   1b038:	ldrdeq	ip, [r3], -r1
   1b03c:	andeq	ip, r3, r6, ror #21
   1b040:	andeq	ip, r3, pc, lsl fp
   1b044:	muleq	r1, r4, r2
   1b048:	mov	r3, r2
   1b04c:	mov	r2, r1
   1b050:	mov	r1, r0
   1b054:	ldr	r0, [pc]	; 1b05c <__assert_fail@plt+0x8970>
   1b058:	b	1aa74 <__assert_fail@plt+0x8388>
   1b05c:	andeq	sl, r3, pc, lsr r0
   1b060:	mov	r3, r2
   1b064:	mov	r2, r1
   1b068:	mov	r1, r0
   1b06c:	ldr	r0, [pc]	; 1b074 <__assert_fail@plt+0x8988>
   1b070:	b	1aa74 <__assert_fail@plt+0x8388>
   1b074:	andeq	sl, r3, r8, ror #3
   1b078:	mov	r3, r2
   1b07c:	mov	r2, r1
   1b080:	mov	r1, r0
   1b084:	ldr	r0, [pc]	; 1b08c <__assert_fail@plt+0x89a0>
   1b088:	b	1aa74 <__assert_fail@plt+0x8388>
   1b08c:	andeq	ip, r3, r8, asr #22
   1b090:	mov	r3, r2
   1b094:	mov	r2, r1
   1b098:	mov	r1, r0
   1b09c:	ldr	r0, [pc]	; 1b0a4 <__assert_fail@plt+0x89b8>
   1b0a0:	b	1aa74 <__assert_fail@plt+0x8388>
   1b0a4:	andeq	ip, r3, r1, asr fp
   1b0a8:	push	{r4, lr}
   1b0ac:	bl	16128 <__assert_fail@plt+0x3a3c>
   1b0b0:	ldr	r3, [pc, #36]	; 1b0dc <__assert_fail@plt+0x89f0>
   1b0b4:	str	r3, [r0]
   1b0b8:	mov	r3, #3
   1b0bc:	str	r3, [r0, #8]
   1b0c0:	mov	r3, #2
   1b0c4:	str	r3, [r0, #12]
   1b0c8:	mov	r3, #0
   1b0cc:	strb	r3, [r0, #19]
   1b0d0:	strb	r3, [r0, #18]
   1b0d4:	mov	r0, #1
   1b0d8:	pop	{r4, pc}
   1b0dc:	andeq	r3, r1, r4, lsl r9
   1b0e0:	push	{r4, lr}
   1b0e4:	bl	16128 <__assert_fail@plt+0x3a3c>
   1b0e8:	ldr	r3, [pc, #32]	; 1b110 <__assert_fail@plt+0x8a24>
   1b0ec:	str	r3, [r0]
   1b0f0:	mov	r3, #3
   1b0f4:	str	r3, [r0, #8]
   1b0f8:	str	r3, [r0, #12]
   1b0fc:	mov	r3, #0
   1b100:	strb	r3, [r0, #19]
   1b104:	strb	r3, [r0, #18]
   1b108:	mov	r0, #1
   1b10c:	pop	{r4, pc}
   1b110:	andeq	r3, r1, r4, asr #15
   1b114:	push	{r4, lr}
   1b118:	bl	16128 <__assert_fail@plt+0x3a3c>
   1b11c:	ldr	r2, [pc, #44]	; 1b150 <__assert_fail@plt+0x8a64>
   1b120:	mov	r3, r0
   1b124:	str	r2, [r0]
   1b128:	mov	r2, #3
   1b12c:	str	r2, [r0, #8]
   1b130:	mov	r2, #0
   1b134:	mov	r0, #1
   1b138:	strb	r2, [r3, #19]
   1b13c:	strb	r2, [r3, #18]
   1b140:	mov	r2, #1065353216	; 0x3f800000
   1b144:	str	r0, [r3, #12]
   1b148:	str	r2, [r3, #28]
   1b14c:	pop	{r4, pc}
   1b150:	ldrdeq	r3, [r1], -r8
   1b154:	push	{r4, lr}
   1b158:	bl	16128 <__assert_fail@plt+0x3a3c>
   1b15c:	ldr	r3, [pc, #32]	; 1b184 <__assert_fail@plt+0x8a98>
   1b160:	str	r3, [r0]
   1b164:	mov	r3, #5
   1b168:	str	r3, [r0, #8]
   1b16c:	mov	r3, #0
   1b170:	str	r3, [r0, #12]
   1b174:	strb	r3, [r0, #19]
   1b178:	strb	r3, [r0, #18]
   1b17c:	mov	r0, #1
   1b180:	pop	{r4, pc}
   1b184:	andeq	r3, r1, r4, asr fp
   1b188:	push	{r4, lr}
   1b18c:	mov	r1, #0
   1b190:	bl	16140 <__assert_fail@plt+0x3a54>
   1b194:	ldr	r3, [pc, #36]	; 1b1c0 <__assert_fail@plt+0x8ad4>
   1b198:	str	r3, [r0]
   1b19c:	mov	r3, #2
   1b1a0:	str	r3, [r0, #8]
   1b1a4:	mov	r3, #4
   1b1a8:	str	r3, [r0, #12]
   1b1ac:	mov	r3, #0
   1b1b0:	strb	r3, [r0, #19]
   1b1b4:	strb	r3, [r0, #18]
   1b1b8:	mov	r0, #1
   1b1bc:	pop	{r4, pc}
   1b1c0:	andeq	r4, r1, r8, ror r2
   1b1c4:	push	{r4, lr}
   1b1c8:	mov	r1, #0
   1b1cc:	bl	16140 <__assert_fail@plt+0x3a54>
   1b1d0:	ldr	r3, [pc, #32]	; 1b1f8 <__assert_fail@plt+0x8b0c>
   1b1d4:	str	r3, [r0]
   1b1d8:	mov	r3, #4
   1b1dc:	str	r3, [r0, #8]
   1b1e0:	mov	r3, #0
   1b1e4:	str	r3, [r0, #12]
   1b1e8:	strb	r3, [r0, #19]
   1b1ec:	strb	r3, [r0, #18]
   1b1f0:	mov	r0, #1
   1b1f4:	pop	{r4, pc}
   1b1f8:	andeq	r4, r1, ip, asr #9
   1b1fc:	ldr	r3, [r1]
   1b200:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b204:	cmp	r3, #2
   1b208:	mov	r5, r1
   1b20c:	beq	1b284 <__assert_fail@plt+0x8b98>
   1b210:	cmp	r3, #1
   1b214:	moveq	r5, #0
   1b218:	beq	1b284 <__assert_fail@plt+0x8b98>
   1b21c:	ldr	r4, [pc, #120]	; 1b29c <__assert_fail@plt+0x8bb0>
   1b220:	cmp	r3, #0
   1b224:	mov	r6, r0
   1b228:	ldr	r3, [r4]
   1b22c:	bne	1b290 <__assert_fail@plt+0x8ba4>
   1b230:	cmp	r3, #0
   1b234:	beq	1b284 <__assert_fail@plt+0x8b98>
   1b238:	ldr	r3, [pc, #96]	; 1b2a0 <__assert_fail@plt+0x8bb4>
   1b23c:	ldrb	r7, [r3, #17]
   1b240:	cmp	r7, #0
   1b244:	bne	1b284 <__assert_fail@plt+0x8b98>
   1b248:	ldrb	r3, [r3, #16]
   1b24c:	cmp	r3, #0
   1b250:	beq	1b284 <__assert_fail@plt+0x8b98>
   1b254:	mov	r2, #5
   1b258:	ldr	r1, [pc, #68]	; 1b2a4 <__assert_fail@plt+0x8bb8>
   1b25c:	mov	r0, r7
   1b260:	bl	1217c <dcgettext@plt>
   1b264:	ldr	r3, [r4]
   1b268:	str	r6, [sp, #4]
   1b26c:	str	r3, [sp]
   1b270:	mov	r1, r7
   1b274:	mov	r3, r6
   1b278:	mov	r2, r0
   1b27c:	mov	r0, r7
   1b280:	bl	122c0 <error@plt>
   1b284:	mov	r0, r5
   1b288:	add	sp, sp, #12
   1b28c:	pop	{r4, r5, r6, r7, pc}
   1b290:	cmp	r3, #0
   1b294:	streq	r0, [r4]
   1b298:	b	1b284 <__assert_fail@plt+0x8b98>
   1b29c:	andeq	r0, r5, r8, ror #25
   1b2a0:	andeq	r0, r5, r4, lsl #29
   1b2a4:	andeq	ip, r3, r7, asr fp
   1b2a8:	push	{r4, r5, r6, r7, r8, lr}
   1b2ac:	mov	r7, r2
   1b2b0:	mov	r6, r0
   1b2b4:	mov	r4, r1
   1b2b8:	mov	r5, r3
   1b2bc:	bl	12404 <__errno_location@plt>
   1b2c0:	ldr	r2, [r0]
   1b2c4:	cmp	r2, #2
   1b2c8:	beq	1b2d4 <__assert_fail@plt+0x8be8>
   1b2cc:	cmp	r2, #20
   1b2d0:	bne	1b30c <__assert_fail@plt+0x8c20>
   1b2d4:	ldr	r3, [pc, #56]	; 1b314 <__assert_fail@plt+0x8c28>
   1b2d8:	ldr	r3, [r3, #44]	; 0x2c
   1b2dc:	tst	r3, #2
   1b2e0:	beq	1b2f8 <__assert_fail@plt+0x8c0c>
   1b2e4:	ldr	r3, [pc, #44]	; 1b318 <__assert_fail@plt+0x8c2c>
   1b2e8:	mov	r2, r4
   1b2ec:	ldr	r1, [pc, #40]	; 1b31c <__assert_fail@plt+0x8c30>
   1b2f0:	ldr	r0, [r3]
   1b2f4:	bl	123f8 <fprintf@plt>
   1b2f8:	mov	r2, r7
   1b2fc:	mov	r1, r4
   1b300:	mov	r0, r6
   1b304:	pop	{r4, r5, r6, r7, r8, lr}
   1b308:	b	28398 <__assert_fail@plt+0x15cac>
   1b30c:	mov	r0, r5
   1b310:	pop	{r4, r5, r6, r7, r8, pc}
   1b314:	andeq	r0, r5, r4, lsl #29
   1b318:	andeq	r0, r5, r0, ror #10
   1b31c:	andeq	ip, r3, sp, asr #24
   1b320:	push	{r4, r5, r6, lr}
   1b324:	mov	r4, r0
   1b328:	mov	r5, r1
   1b32c:	mov	r6, r2
   1b330:	bl	28204 <__assert_fail@plt+0x15b18>
   1b334:	subs	r3, r0, #0
   1b338:	popeq	{r4, r5, r6, pc}
   1b33c:	mov	r2, r6
   1b340:	mov	r1, r5
   1b344:	mov	r0, r4
   1b348:	pop	{r4, r5, r6, lr}
   1b34c:	b	1b2a8 <__assert_fail@plt+0x8bbc>
   1b350:	ldr	r3, [pc, #60]	; 1b394 <__assert_fail@plt+0x8ca8>
   1b354:	ldr	r3, [r3]
   1b358:	cmp	r3, #0
   1b35c:	bne	1b390 <__assert_fail@plt+0x8ca4>
   1b360:	push	{r4, r5, r6, lr}
   1b364:	mov	r4, r0
   1b368:	mov	r5, r1
   1b36c:	mov	r6, r2
   1b370:	bl	28204 <__assert_fail@plt+0x15b18>
   1b374:	subs	r3, r0, #0
   1b378:	popeq	{r4, r5, r6, pc}
   1b37c:	mov	r2, r6
   1b380:	mov	r1, r5
   1b384:	mov	r0, r4
   1b388:	pop	{r4, r5, r6, lr}
   1b38c:	b	1b2a8 <__assert_fail@plt+0x8bbc>
   1b390:	b	28398 <__assert_fail@plt+0x15cac>
   1b394:	andeq	r0, r5, r8, asr lr
   1b398:	ldr	ip, [pc, #96]	; 1b400 <__assert_fail@plt+0x8d14>
   1b39c:	mov	r2, r1
   1b3a0:	ldr	r3, [ip, #4]
   1b3a4:	cmp	r3, #0
   1b3a8:	movne	r1, r0
   1b3ac:	ldrne	r0, [ip, #4]
   1b3b0:	bne	1b3f4 <__assert_fail@plt+0x8d08>
   1b3b4:	push	{r4, r5, lr}
   1b3b8:	ldr	lr, [pc, #68]	; 1b404 <__assert_fail@plt+0x8d18>
   1b3bc:	mov	r4, lr
   1b3c0:	ldr	r1, [lr, #4]
   1b3c4:	cmp	r1, #0
   1b3c8:	beq	1b3e8 <__assert_fail@plt+0x8cfc>
   1b3cc:	ldr	r5, [r4, r3, lsl #4]
   1b3d0:	lsl	r1, r3, #4
   1b3d4:	cmp	r5, #1
   1b3d8:	add	lr, lr, #16
   1b3dc:	bne	1b3f8 <__assert_fail@plt+0x8d0c>
   1b3e0:	add	r4, r4, r1
   1b3e4:	str	r4, [ip, #4]
   1b3e8:	pop	{r4, r5, lr}
   1b3ec:	mov	r1, r0
   1b3f0:	ldr	r0, [ip, #4]
   1b3f4:	b	1a3fc <__assert_fail@plt+0x7d10>
   1b3f8:	add	r3, r3, #1
   1b3fc:	b	1b3c0 <__assert_fail@plt+0x8cd4>
   1b400:	andeq	r0, r5, r8, ror #25
   1b404:	muleq	r3, r0, r1
   1b408:	ldr	r3, [pc, #16]	; 1b420 <__assert_fail@plt+0x8d34>
   1b40c:	mov	r0, r1
   1b410:	mov	r1, #1
   1b414:	strb	r1, [r3, #16]
   1b418:	mov	r1, r2
   1b41c:	b	1b398 <__assert_fail@plt+0x8cac>
   1b420:	andeq	r0, r5, r4, lsl #29
   1b424:	ldr	r3, [pc, #16]	; 1b43c <__assert_fail@plt+0x8d50>
   1b428:	mov	r0, r1
   1b42c:	mov	r1, #0
   1b430:	strb	r1, [r3, #16]
   1b434:	mov	r1, r2
   1b438:	b	1b398 <__assert_fail@plt+0x8cac>
   1b43c:	andeq	r0, r5, r4, lsl #29
   1b440:	ldr	r3, [pc, #16]	; 1b458 <__assert_fail@plt+0x8d6c>
   1b444:	mov	r0, r1
   1b448:	mov	r1, #0
   1b44c:	strb	r1, [r3, #14]
   1b450:	mov	r1, r2
   1b454:	b	1b398 <__assert_fail@plt+0x8cac>
   1b458:	andeq	r0, r5, r4, lsl #29
   1b45c:	ldr	r3, [pc, #16]	; 1b474 <__assert_fail@plt+0x8d88>
   1b460:	mov	r0, r1
   1b464:	mov	r1, #1
   1b468:	strb	r1, [r3, #12]
   1b46c:	mov	r1, r2
   1b470:	b	1b398 <__assert_fail@plt+0x8cac>
   1b474:	andeq	r0, r5, r4, lsl #29
   1b478:	ldr	r3, [pc, #16]	; 1b490 <__assert_fail@plt+0x8da4>
   1b47c:	mov	r0, r1
   1b480:	mov	r1, #1
   1b484:	strb	r1, [r3, #13]
   1b488:	mov	r1, r2
   1b48c:	b	1b398 <__assert_fail@plt+0x8cac>
   1b490:	andeq	r0, r5, r4, lsl #29
   1b494:	ldr	r3, [pc, #16]	; 1b4ac <__assert_fail@plt+0x8dc0>
   1b498:	mov	r0, r1
   1b49c:	mov	r1, #1
   1b4a0:	strb	r1, [r3, #14]
   1b4a4:	mov	r1, r2
   1b4a8:	b	1b398 <__assert_fail@plt+0x8cac>
   1b4ac:	andeq	r0, r5, r4, lsl #29
   1b4b0:	ldr	r3, [pc, #24]	; 1b4d0 <__assert_fail@plt+0x8de4>
   1b4b4:	mov	r0, r1
   1b4b8:	mov	r1, #0
   1b4bc:	strb	r1, [r3]
   1b4c0:	mov	r1, #1
   1b4c4:	strb	r1, [r3, #1]
   1b4c8:	mov	r1, r2
   1b4cc:	b	1b398 <__assert_fail@plt+0x8cac>
   1b4d0:	andeq	r0, r5, r4, lsl #29
   1b4d4:	push	{r4, lr}
   1b4d8:	ldr	r4, [pc, #120]	; 1b558 <__assert_fail@plt+0x8e6c>
   1b4dc:	ldrb	r2, [r4, #8]
   1b4e0:	cmp	r2, #0
   1b4e4:	bne	1b550 <__assert_fail@plt+0x8e64>
   1b4e8:	ldr	r1, [pc, #108]	; 1b55c <__assert_fail@plt+0x8e70>
   1b4ec:	mov	r0, r1
   1b4f0:	bl	122e4 <fnmatch@plt>
   1b4f4:	subs	r2, r0, #0
   1b4f8:	beq	1b51c <__assert_fail@plt+0x8e30>
   1b4fc:	mov	r2, #5
   1b500:	ldr	r1, [pc, #88]	; 1b560 <__assert_fail@plt+0x8e74>
   1b504:	mov	r0, #0
   1b508:	bl	1217c <dcgettext@plt>
   1b50c:	mov	r1, #0
   1b510:	mov	r2, r0
   1b514:	mov	r0, #1
   1b518:	bl	122c0 <error@plt>
   1b51c:	ldr	r1, [pc, #56]	; 1b55c <__assert_fail@plt+0x8e70>
   1b520:	ldr	r0, [pc, #60]	; 1b564 <__assert_fail@plt+0x8e78>
   1b524:	bl	122e4 <fnmatch@plt>
   1b528:	cmp	r0, #0
   1b52c:	beq	1b4fc <__assert_fail@plt+0x8e10>
   1b530:	mov	r2, #16
   1b534:	ldr	r1, [pc, #32]	; 1b55c <__assert_fail@plt+0x8e70>
   1b538:	ldr	r0, [pc, #36]	; 1b564 <__assert_fail@plt+0x8e78>
   1b53c:	bl	122e4 <fnmatch@plt>
   1b540:	cmp	r0, #0
   1b544:	bne	1b4fc <__assert_fail@plt+0x8e10>
   1b548:	mov	r3, #1
   1b54c:	strb	r3, [r4, #8]
   1b550:	ldrb	r0, [r4, #8]
   1b554:	pop	{r4, pc}
   1b558:	andeq	r0, r5, r8, ror #25
   1b55c:	muleq	r3, sl, ip
   1b560:	muleq	r3, lr, ip
   1b564:	ldrdeq	ip, [r3], -r5
   1b568:	push	{r4, r5, r6, lr}
   1b56c:	mov	r5, r1
   1b570:	ldr	r1, [pc, #76]	; 1b5c4 <__assert_fail@plt+0x8ed8>
   1b574:	mov	r4, r0
   1b578:	bl	12608 <strpbrk@plt>
   1b57c:	cmp	r0, #0
   1b580:	bne	1b5ac <__assert_fail@plt+0x8ec0>
   1b584:	cmp	r5, #0
   1b588:	beq	1b5b4 <__assert_fail@plt+0x8ec8>
   1b58c:	mov	r1, #46	; 0x2e
   1b590:	mov	r0, r4
   1b594:	bl	123c8 <strchr@plt>
   1b598:	vldr	s15, [pc, #28]	; 1b5bc <__assert_fail@plt+0x8ed0>
   1b59c:	vldr	s0, [pc, #28]	; 1b5c0 <__assert_fail@plt+0x8ed4>
   1b5a0:	cmp	r0, #0
   1b5a4:	vmovne.f32	s0, s15
   1b5a8:	pop	{r4, r5, r6, pc}
   1b5ac:	vldr	s0, [pc, #8]	; 1b5bc <__assert_fail@plt+0x8ed0>
   1b5b0:	pop	{r4, r5, r6, pc}
   1b5b4:	vldr	s0, [pc, #4]	; 1b5c0 <__assert_fail@plt+0x8ed4>
   1b5b8:	pop	{r4, r5, r6, pc}
   1b5bc:	svccc	0x004ccccd
   1b5c0:	stclcc	12, cr12, [ip, #820]	; 0x334
   1b5c4:	ldrdeq	ip, [r3], -r9
   1b5c8:	push	{r4, r5, r6, lr}
   1b5cc:	subs	r6, r1, #0
   1b5d0:	beq	1b654 <__assert_fail@plt+0x8f68>
   1b5d4:	ldr	r1, [r2]
   1b5d8:	ldr	r1, [r6, r1, lsl #2]
   1b5dc:	cmp	r1, #0
   1b5e0:	beq	1b65c <__assert_fail@plt+0x8f70>
   1b5e4:	mov	r4, r2
   1b5e8:	mov	r5, r0
   1b5ec:	bl	11fe4 <is_selinux_enabled@plt>
   1b5f0:	cmp	r0, #0
   1b5f4:	bgt	1b618 <__assert_fail@plt+0x8f2c>
   1b5f8:	mov	r2, #5
   1b5fc:	ldr	r1, [pc, #96]	; 1b664 <__assert_fail@plt+0x8f78>
   1b600:	mov	r0, #0
   1b604:	bl	1217c <dcgettext@plt>
   1b608:	mov	r1, #0
   1b60c:	mov	r2, r0
   1b610:	mov	r0, #1
   1b614:	bl	122c0 <error@plt>
   1b618:	mov	r1, #0
   1b61c:	mov	r0, r5
   1b620:	bl	1750c <__assert_fail@plt+0x4e20>
   1b624:	ldr	r3, [pc, #60]	; 1b668 <__assert_fail@plt+0x8f7c>
   1b628:	str	r3, [r0, #28]
   1b62c:	mov	r3, #0
   1b630:	strb	r3, [r0, #18]
   1b634:	ldr	r3, [r4]
   1b638:	ldr	r3, [r6, r3, lsl #2]
   1b63c:	str	r3, [r0, #40]	; 0x28
   1b640:	ldr	r3, [r4]
   1b644:	mov	r0, #1
   1b648:	add	r3, r3, #1
   1b64c:	str	r3, [r4]
   1b650:	pop	{r4, r5, r6, pc}
   1b654:	mov	r0, r6
   1b658:	pop	{r4, r5, r6, pc}
   1b65c:	mov	r0, r1
   1b660:	pop	{r4, r5, r6, pc}
   1b664:	ldrdeq	ip, [r3], -sp
   1b668:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1b66c:	push	{r4, r5, r6, lr}
   1b670:	ldr	r4, [pc, #116]	; 1b6ec <__assert_fail@plt+0x9000>
   1b674:	ldrb	r2, [r4, #36]	; 0x24
   1b678:	cmp	r2, #0
   1b67c:	bne	1b6d4 <__assert_fail@plt+0x8fe8>
   1b680:	ldr	r3, [r4, #28]
   1b684:	add	r0, r4, #28
   1b688:	add	r3, r3, #86016	; 0x15000
   1b68c:	add	r3, r3, #384	; 0x180
   1b690:	str	r3, [r4, #28]
   1b694:	str	r2, [r4, #32]
   1b698:	bl	12350 <localtime@plt>
   1b69c:	ldr	r5, [r4, #28]
   1b6a0:	cmp	r0, #0
   1b6a4:	beq	1b6dc <__assert_fail@plt+0x8ff0>
   1b6a8:	ldr	r1, [r0, #4]
   1b6ac:	mov	r2, #60	; 0x3c
   1b6b0:	ldr	r3, [r0]
   1b6b4:	mla	r3, r2, r1, r3
   1b6b8:	ldr	r1, [r0, #8]
   1b6bc:	mov	r2, #3600	; 0xe10
   1b6c0:	mla	r1, r2, r1, r3
   1b6c4:	sub	r5, r5, r1
   1b6c8:	mov	r3, #1
   1b6cc:	str	r5, [r4, #28]
   1b6d0:	strb	r3, [r4, #36]	; 0x24
   1b6d4:	mov	r0, #1
   1b6d8:	pop	{r4, r5, r6, pc}
   1b6dc:	mov	r0, r5
   1b6e0:	ldr	r1, [pc, #8]	; 1b6f0 <__assert_fail@plt+0x9004>
   1b6e4:	bl	394a0 <__assert_fail@plt+0x26db4>
   1b6e8:	b	1b6c4 <__assert_fail@plt+0x8fd8>
   1b6ec:	andeq	r0, r5, r4, lsl #29
   1b6f0:	andeq	r5, r1, r0, lsl #3
   1b6f4:	push	{r4, lr}
   1b6f8:	bl	17544 <__assert_fail@plt+0x4e58>
   1b6fc:	mov	r4, #1
   1b700:	mov	r3, #0
   1b704:	strb	r4, [r0, #17]
   1b708:	strb	r4, [r0, #16]
   1b70c:	strb	r3, [r0, #19]
   1b710:	strb	r3, [r0, #18]
   1b714:	add	r1, r0, #40	; 0x28
   1b718:	ldr	r0, [pc, #8]	; 1b728 <__assert_fail@plt+0x903c>
   1b71c:	bl	1a98c <__assert_fail@plt+0x82a0>
   1b720:	mov	r0, r4
   1b724:	pop	{r4, pc}
   1b728:	andeq	ip, r3, ip, lsr r8
   1b72c:	ldr	r3, [pc, #156]	; 1b7d0 <__assert_fail@plt+0x90e4>
   1b730:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1b734:	ldrb	r4, [r3, #17]
   1b738:	cmp	r4, #0
   1b73c:	bne	1b7c4 <__assert_fail@plt+0x90d8>
   1b740:	ldrb	r3, [r3, #16]
   1b744:	cmp	r3, #0
   1b748:	beq	1b7c4 <__assert_fail@plt+0x90d8>
   1b74c:	mov	r6, r0
   1b750:	mov	r5, r1
   1b754:	mov	r0, r2
   1b758:	mov	r1, #47	; 0x2f
   1b75c:	bl	123c8 <strchr@plt>
   1b760:	cmp	r0, #0
   1b764:	beq	1b7c4 <__assert_fail@plt+0x90d8>
   1b768:	mov	r2, #5
   1b76c:	ldr	r1, [pc, #96]	; 1b7d4 <__assert_fail@plt+0x90e8>
   1b770:	mov	r0, r4
   1b774:	bl	1217c <dcgettext@plt>
   1b778:	mov	r1, r6
   1b77c:	mov	r7, r0
   1b780:	mov	r0, r4
   1b784:	bl	180e8 <__assert_fail@plt+0x59fc>
   1b788:	ldr	r1, [pc, #72]	; 1b7d8 <__assert_fail@plt+0x90ec>
   1b78c:	mov	r6, r0
   1b790:	mov	r0, #1
   1b794:	bl	180e8 <__assert_fail@plt+0x59fc>
   1b798:	mov	r1, r5
   1b79c:	mov	r8, r0
   1b7a0:	mov	r0, #2
   1b7a4:	bl	180e8 <__assert_fail@plt+0x59fc>
   1b7a8:	str	r8, [sp]
   1b7ac:	mov	r3, r6
   1b7b0:	mov	r2, r7
   1b7b4:	mov	r1, r4
   1b7b8:	str	r0, [sp, #4]
   1b7bc:	mov	r0, r4
   1b7c0:	bl	122c0 <error@plt>
   1b7c4:	mov	r0, #1
   1b7c8:	add	sp, sp, #8
   1b7cc:	pop	{r4, r5, r6, r7, r8, pc}
   1b7d0:	andeq	r0, r5, r4, lsl #29
   1b7d4:	andeq	ip, r3, r1, lsl sp
   1b7d8:	andeq	sl, r3, lr, lsr r4
   1b7dc:	ldr	r3, [pc, #124]	; 1b860 <__assert_fail@plt+0x9174>
   1b7e0:	push	{r4, lr}
   1b7e4:	ldr	r3, [r3, #28]
   1b7e8:	ldr	r1, [pc, #116]	; 1b864 <__assert_fail@plt+0x9178>
   1b7ec:	sub	r0, r3, r0
   1b7f0:	bl	39280 <__assert_fail@plt+0x26b94>
   1b7f4:	vldr	s14, [pc, #76]	; 1b848 <__assert_fail@plt+0x915c>
   1b7f8:	vmov	s15, r0
   1b7fc:	vcvt.f32.s32	s15, s15
   1b800:	vcmpe.f32	s15, s14
   1b804:	vmrs	APSR_nzcv, fpscr
   1b808:	bmi	1b838 <__assert_fail@plt+0x914c>
   1b80c:	vldr	s14, [pc, #56]	; 1b84c <__assert_fail@plt+0x9160>
   1b810:	vcmpe.f32	s15, s14
   1b814:	vmrs	APSR_nzcv, fpscr
   1b818:	bmi	1b840 <__assert_fail@plt+0x9154>
   1b81c:	vldr	s14, [pc, #44]	; 1b850 <__assert_fail@plt+0x9164>
   1b820:	vldr	s0, [pc, #44]	; 1b854 <__assert_fail@plt+0x9168>
   1b824:	vcmpe.f32	s15, s14
   1b828:	vldr	s15, [pc, #40]	; 1b858 <__assert_fail@plt+0x916c>
   1b82c:	vmrs	APSR_nzcv, fpscr
   1b830:	vmovle.f32	s0, s15
   1b834:	pop	{r4, pc}
   1b838:	vldr	s0, [pc, #28]	; 1b85c <__assert_fail@plt+0x9170>
   1b83c:	pop	{r4, pc}
   1b840:	vldr	s0, [pc, #12]	; 1b854 <__assert_fail@plt+0x9168>
   1b844:	pop	{r4, pc}
   1b848:	stclcc	12, cr12, [ip, #820]	; 0x334
   1b84c:	svccc	0x00800000
   1b850:	sbcmi	r0, r8, #0
   1b854:			; <UNDEFINED> instruction: 0x3e99999a
   1b858:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1b85c:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1b860:	andeq	r0, r5, r4, lsl #29
   1b864:	andeq	r5, r1, r0, lsl #3
   1b868:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b86c:	subs	r6, r1, #0
   1b870:	sub	sp, sp, #124	; 0x7c
   1b874:	beq	1b91c <__assert_fail@plt+0x9230>
   1b878:	ldr	r8, [r2]
   1b87c:	ldr	r4, [r6, r8, lsl #2]
   1b880:	lsl	r9, r8, #2
   1b884:	cmp	r4, #0
   1b888:	beq	1b920 <__assert_fail@plt+0x9234>
   1b88c:	str	r0, [sp, #4]
   1b890:	mov	r0, r4
   1b894:	mov	r5, r2
   1b898:	bl	123bc <strlen@plt>
   1b89c:	cmp	r0, #8
   1b8a0:	bne	1b91c <__assert_fail@plt+0x9230>
   1b8a4:	ldr	r3, [pc, #812]	; 1bbd8 <__assert_fail@plt+0x94ec>
   1b8a8:	mov	r2, #6
   1b8ac:	mov	r1, r4
   1b8b0:	ldr	r0, [r3]
   1b8b4:	ldrh	r3, [r3, #4]
   1b8b8:	str	r0, [sp, #8]
   1b8bc:	ldr	r0, [pc, #792]	; 1bbdc <__assert_fail@plt+0x94f0>
   1b8c0:	strh	r3, [sp, #12]
   1b8c4:	bl	1268c <strncmp@plt>
   1b8c8:	subs	fp, r0, #0
   1b8cc:	beq	1b8e4 <__assert_fail@plt+0x91f8>
   1b8d0:	ldr	r3, [pc, #776]	; 1bbe0 <__assert_fail@plt+0x94f4>
   1b8d4:	ldr	r2, [pc, #776]	; 1bbe4 <__assert_fail@plt+0x94f8>
   1b8d8:	ldr	r1, [pc, #776]	; 1bbe8 <__assert_fail@plt+0x94fc>
   1b8dc:	ldr	r0, [pc, #776]	; 1bbec <__assert_fail@plt+0x9500>
   1b8e0:	bl	126ec <__assert_fail@plt>
   1b8e4:	ldrb	r7, [r4, #6]
   1b8e8:	ldrb	sl, [r4, #7]
   1b8ec:	cmp	sl, #66	; 0x42
   1b8f0:	cmpne	r7, #66	; 0x42
   1b8f4:	moveq	r4, #1
   1b8f8:	movne	r4, #0
   1b8fc:	bne	1b92c <__assert_fail@plt+0x9240>
   1b900:	mov	r2, #5
   1b904:	ldr	r1, [pc, #740]	; 1bbf0 <__assert_fail@plt+0x9504>
   1b908:	bl	1217c <dcgettext@plt>
   1b90c:	mov	r1, fp
   1b910:	mov	r2, r0
   1b914:	mov	r0, fp
   1b918:	bl	122c0 <error@plt>
   1b91c:	mov	r4, #0
   1b920:	mov	r0, r4
   1b924:	add	sp, sp, #124	; 0x7c
   1b928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b92c:	cmp	r7, #116	; 0x74
   1b930:	beq	1b920 <__assert_fail@plt+0x9234>
   1b934:	mov	r1, r7
   1b938:	add	r0, sp, #8
   1b93c:	bl	123c8 <strchr@plt>
   1b940:	cmp	r0, #0
   1b944:	beq	1b920 <__assert_fail@plt+0x9234>
   1b948:	mov	r1, sl
   1b94c:	add	r0, sp, #8
   1b950:	bl	123c8 <strchr@plt>
   1b954:	cmp	r0, #0
   1b958:	beq	1b920 <__assert_fail@plt+0x9234>
   1b95c:	add	r9, r6, r9
   1b960:	add	r8, r8, #1
   1b964:	ldr	r4, [r9, #4]
   1b968:	cmp	r4, #0
   1b96c:	bne	1b9b0 <__assert_fail@plt+0x92c4>
   1b970:	mov	r2, #5
   1b974:	ldr	r1, [pc, #632]	; 1bbf4 <__assert_fail@plt+0x9508>
   1b978:	mov	r0, r4
   1b97c:	bl	1217c <dcgettext@plt>
   1b980:	ldr	r3, [r5]
   1b984:	ldr	r2, [r6, r3, lsl #2]
   1b988:	ldr	r3, [pc, #616]	; 1bbf8 <__assert_fail@plt+0x950c>
   1b98c:	ldr	r1, [r3, #72]	; 0x48
   1b990:	mov	r7, r0
   1b994:	mov	r0, r4
   1b998:	bl	27f14 <__assert_fail@plt+0x15828>
   1b99c:	mov	r2, r7
   1b9a0:	mov	r1, r4
   1b9a4:	mov	r3, r0
   1b9a8:	mov	r0, #1
   1b9ac:	bl	122c0 <error@plt>
   1b9b0:	mov	r1, r4
   1b9b4:	str	r8, [r5]
   1b9b8:	ldr	r0, [sp, #4]
   1b9bc:	bl	1750c <__assert_fail@plt+0x4e20>
   1b9c0:	cmp	r7, #97	; 0x61
   1b9c4:	mov	r4, r0
   1b9c8:	beq	1ba80 <__assert_fail@plt+0x9394>
   1b9cc:	bhi	1ba0c <__assert_fail@plt+0x9320>
   1b9d0:	cmp	r7, #66	; 0x42
   1b9d4:	moveq	r2, #1
   1b9d8:	beq	1ba20 <__assert_fail@plt+0x9334>
   1b9dc:	mov	r1, r7
   1b9e0:	add	r0, sp, #8
   1b9e4:	bl	123c8 <strchr@plt>
   1b9e8:	ldr	r3, [pc, #524]	; 1bbfc <__assert_fail@plt+0x9510>
   1b9ec:	add	r3, r3, #8
   1b9f0:	cmp	r0, #0
   1b9f4:	ldrne	r2, [pc, #516]	; 1bc00 <__assert_fail@plt+0x9514>
   1b9f8:	bne	1bae8 <__assert_fail@plt+0x93fc>
   1b9fc:	ldr	r2, [pc, #512]	; 1bc04 <__assert_fail@plt+0x9518>
   1ba00:	ldr	r1, [pc, #480]	; 1bbe8 <__assert_fail@plt+0x94fc>
   1ba04:	ldr	r0, [pc, #508]	; 1bc08 <__assert_fail@plt+0x951c>
   1ba08:	b	1b8e0 <__assert_fail@plt+0x91f4>
   1ba0c:	cmp	r7, #99	; 0x63
   1ba10:	beq	1ba88 <__assert_fail@plt+0x939c>
   1ba14:	cmp	r7, #109	; 0x6d
   1ba18:	moveq	r2, #3
   1ba1c:	bne	1b9dc <__assert_fail@plt+0x92f0>
   1ba20:	cmp	sl, #116	; 0x74
   1ba24:	str	r2, [r4, #40]	; 0x28
   1ba28:	bne	1ba90 <__assert_fail@plt+0x93a4>
   1ba2c:	ldr	r3, [r5]
   1ba30:	ldr	r2, [pc, #468]	; 1bc0c <__assert_fail@plt+0x9520>
   1ba34:	add	r0, r4, #48	; 0x30
   1ba38:	ldr	r1, [r6, r3, lsl #2]
   1ba3c:	bl	26ae0 <__assert_fail@plt+0x143f4>
   1ba40:	subs	r7, r0, #0
   1ba44:	bne	1bb14 <__assert_fail@plt+0x9428>
   1ba48:	mov	r2, #5
   1ba4c:	ldr	r1, [pc, #444]	; 1bc10 <__assert_fail@plt+0x9524>
   1ba50:	bl	1217c <dcgettext@plt>
   1ba54:	ldr	r3, [r5]
   1ba58:	ldr	r2, [r6, r3, lsl #2]
   1ba5c:	ldr	r3, [pc, #404]	; 1bbf8 <__assert_fail@plt+0x950c>
   1ba60:	ldr	r1, [r3, #72]	; 0x48
   1ba64:	mov	r4, r0
   1ba68:	mov	r0, r7
   1ba6c:	bl	27f14 <__assert_fail@plt+0x15828>
   1ba70:	mov	r3, r0
   1ba74:	mov	r2, r4
   1ba78:	mov	r1, r7
   1ba7c:	b	1b9a8 <__assert_fail@plt+0x92bc>
   1ba80:	mov	r2, #0
   1ba84:	b	1ba20 <__assert_fail@plt+0x9334>
   1ba88:	mov	r2, #2
   1ba8c:	b	1ba20 <__assert_fail@plt+0x9334>
   1ba90:	add	r0, sp, #16
   1ba94:	bl	17758 <__assert_fail@plt+0x506c>
   1ba98:	ldr	r0, [r5]
   1ba9c:	ldr	r2, [pc, #340]	; 1bbf8 <__assert_fail@plt+0x950c>
   1baa0:	add	r1, sp, #16
   1baa4:	ldr	r0, [r6, r0, lsl #2]
   1baa8:	ldr	r2, [r2, #52]	; 0x34
   1baac:	blx	r2
   1bab0:	subs	r7, r0, #0
   1bab4:	beq	1bacc <__assert_fail@plt+0x93e0>
   1bab8:	bl	12404 <__errno_location@plt>
   1babc:	ldr	r3, [r5]
   1bac0:	ldr	r1, [r6, r3, lsl #2]
   1bac4:	ldr	r0, [r0]
   1bac8:	bl	18434 <__assert_fail@plt+0x5d48>
   1bacc:	cmp	sl, #97	; 0x61
   1bad0:	beq	1bb54 <__assert_fail@plt+0x9468>
   1bad4:	bhi	1baf4 <__assert_fail@plt+0x9408>
   1bad8:	cmp	sl, #66	; 0x42
   1badc:	beq	1bb60 <__assert_fail@plt+0x9474>
   1bae0:	ldr	r3, [pc, #300]	; 1bc14 <__assert_fail@plt+0x9528>
   1bae4:	ldr	r2, [pc, #300]	; 1bc18 <__assert_fail@plt+0x952c>
   1bae8:	ldr	r1, [pc, #248]	; 1bbe8 <__assert_fail@plt+0x94fc>
   1baec:	ldr	r0, [pc, #296]	; 1bc1c <__assert_fail@plt+0x9530>
   1baf0:	b	1b8e0 <__assert_fail@plt+0x91f4>
   1baf4:	cmp	sl, #99	; 0x63
   1baf8:	beq	1bb90 <__assert_fail@plt+0x94a4>
   1bafc:	cmp	sl, #109	; 0x6d
   1bb00:	ldreq	r3, [sp, #100]	; 0x64
   1bb04:	ldreq	r2, [sp, #96]	; 0x60
   1bb08:	bne	1bae0 <__assert_fail@plt+0x93f4>
   1bb0c:	str	r2, [r4, #48]	; 0x30
   1bb10:	str	r3, [r4, #52]	; 0x34
   1bb14:	mov	r3, #0
   1bb18:	str	r3, [r4, #44]	; 0x2c
   1bb1c:	ldr	r0, [r4, #48]	; 0x30
   1bb20:	bl	1b7dc <__assert_fail@plt+0x90f0>
   1bb24:	ldr	r3, [r5]
   1bb28:	add	r3, r3, #1
   1bb2c:	vstr	s0, [r4, #28]
   1bb30:	str	r3, [r5]
   1bb34:	ldr	r3, [r4]
   1bb38:	cmp	r3, #0
   1bb3c:	bne	1bb9c <__assert_fail@plt+0x94b0>
   1bb40:	ldr	r3, [pc, #152]	; 1bbe0 <__assert_fail@plt+0x94f4>
   1bb44:	ldr	r2, [pc, #212]	; 1bc20 <__assert_fail@plt+0x9534>
   1bb48:	ldr	r1, [pc, #152]	; 1bbe8 <__assert_fail@plt+0x94fc>
   1bb4c:	ldr	r0, [pc, #208]	; 1bc24 <__assert_fail@plt+0x9538>
   1bb50:	b	1b8e0 <__assert_fail@plt+0x91f4>
   1bb54:	ldr	r3, [sp, #92]	; 0x5c
   1bb58:	ldr	r2, [sp, #88]	; 0x58
   1bb5c:	b	1bb0c <__assert_fail@plt+0x9420>
   1bb60:	mvn	r3, #0
   1bb64:	str	r3, [r4, #48]	; 0x30
   1bb68:	str	r3, [r4, #52]	; 0x34
   1bb6c:	mov	r2, #5
   1bb70:	ldr	r1, [pc, #176]	; 1bc28 <__assert_fail@plt+0x953c>
   1bb74:	bl	1217c <dcgettext@plt>
   1bb78:	ldr	r3, [r5]
   1bb7c:	ldr	r1, [r6, r3, lsl #2]
   1bb80:	mov	r4, r0
   1bb84:	mov	r0, r7
   1bb88:	bl	180e8 <__assert_fail@plt+0x59fc>
   1bb8c:	b	1ba70 <__assert_fail@plt+0x9384>
   1bb90:	ldr	r3, [sp, #108]	; 0x6c
   1bb94:	ldr	r2, [sp, #104]	; 0x68
   1bb98:	b	1bb0c <__assert_fail@plt+0x9420>
   1bb9c:	ldr	r2, [pc, #136]	; 1bc2c <__assert_fail@plt+0x9540>
   1bba0:	cmp	r3, r2
   1bba4:	ldrne	r3, [pc, #52]	; 1bbe0 <__assert_fail@plt+0x94f4>
   1bba8:	movne	r2, #1648	; 0x670
   1bbac:	ldrne	r1, [pc, #52]	; 1bbe8 <__assert_fail@plt+0x94fc>
   1bbb0:	ldrne	r0, [pc, #120]	; 1bc30 <__assert_fail@plt+0x9544>
   1bbb4:	bne	1b8e0 <__assert_fail@plt+0x91f4>
   1bbb8:	ldrb	r4, [r4, #18]
   1bbbc:	cmp	r4, #0
   1bbc0:	bne	1b920 <__assert_fail@plt+0x9234>
   1bbc4:	ldr	r3, [pc, #20]	; 1bbe0 <__assert_fail@plt+0x94f4>
   1bbc8:	ldr	r2, [pc, #100]	; 1bc34 <__assert_fail@plt+0x9548>
   1bbcc:	ldr	r1, [pc, #20]	; 1bbe8 <__assert_fail@plt+0x94fc>
   1bbd0:	ldr	r0, [pc, #96]	; 1bc38 <__assert_fail@plt+0x954c>
   1bbd4:	b	1b8e0 <__assert_fail@plt+0x91f4>
   1bbd8:	andeq	ip, r3, r1, lsr #30
   1bbdc:	andeq	ip, r3, r3, asr #27
   1bbe0:	andeq	ip, r3, r0, lsl #14
   1bbe4:	andeq	r0, r0, r3, lsl r6
   1bbe8:	andeq	ip, r3, r6, lsr #15
   1bbec:	andeq	ip, r3, sl, asr #27
   1bbf0:	strdeq	ip, [r3], -r5
   1bbf4:	andeq	ip, r3, sl, lsr lr
   1bbf8:	andeq	r0, r5, r4, lsl #29
   1bbfc:	strdeq	ip, [r3], -r8
   1bc00:	andeq	r0, r0, ip, asr #12
   1bc04:	andeq	r0, r0, fp, asr #12
   1bc08:	andeq	ip, r3, r8, asr lr
   1bc0c:	muleq	r5, r8, lr
   1bc10:	andeq	ip, r3, pc, ror #28
   1bc14:	andeq	ip, r3, lr, lsl #14
   1bc18:	strdeq	r0, [r0], -r2
   1bc1c:	andeq	sl, r3, sl, lsr r9
   1bc20:	andeq	r0, r0, pc, ror #12
   1bc24:	andeq	ip, r3, sp, asr #29
   1bc28:	andeq	ip, r3, r9, lsr #29
   1bc2c:	strdeq	r4, [r1], -r0
   1bc30:	andeq	ip, r3, r9, ror #29
   1bc34:	andeq	r0, r0, r1, ror r6
   1bc38:	andeq	ip, r3, sp, lsl #30
   1bc3c:	push	{r4, lr}
   1bc40:	bl	17544 <__assert_fail@plt+0x4e58>
   1bc44:	mov	r4, r0
   1bc48:	add	r1, r0, #40	; 0x28
   1bc4c:	ldr	r0, [pc, #24]	; 1bc6c <__assert_fail@plt+0x9580>
   1bc50:	bl	1a98c <__assert_fail@plt+0x82a0>
   1bc54:	mov	r0, #1
   1bc58:	mov	r3, #1065353216	; 0x3f800000
   1bc5c:	strb	r0, [r4, #17]
   1bc60:	strb	r0, [r4, #16]
   1bc64:	str	r3, [r4, #28]
   1bc68:	pop	{r4, pc}
   1bc6c:	andeq	ip, r3, ip, lsr r8
   1bc70:	ldr	r3, [pc, #88]	; 1bcd0 <__assert_fail@plt+0x95e4>
   1bc74:	push	{r4, r5, r6, r7, r8, lr}
   1bc78:	mov	r5, r0
   1bc7c:	ldrb	r4, [r3, #17]
   1bc80:	mov	r6, r1
   1bc84:	mov	r7, r2
   1bc88:	cmp	r4, #0
   1bc8c:	bne	1bcbc <__assert_fail@plt+0x95d0>
   1bc90:	ldrb	r3, [r3, #16]
   1bc94:	cmp	r3, #0
   1bc98:	beq	1bcbc <__assert_fail@plt+0x95d0>
   1bc9c:	mov	r2, #5
   1bca0:	ldr	r1, [pc, #44]	; 1bcd4 <__assert_fail@plt+0x95e8>
   1bca4:	mov	r0, r4
   1bca8:	bl	1217c <dcgettext@plt>
   1bcac:	mov	r1, r4
   1bcb0:	mov	r2, r0
   1bcb4:	mov	r0, r4
   1bcb8:	bl	122c0 <error@plt>
   1bcbc:	mov	r2, r7
   1bcc0:	mov	r1, r6
   1bcc4:	mov	r0, r5
   1bcc8:	pop	{r4, r5, r6, r7, r8, lr}
   1bccc:	b	1b4b0 <__assert_fail@plt+0x8dc4>
   1bcd0:	andeq	r0, r5, r4, lsl #29
   1bcd4:	andeq	ip, r3, r7, lsr #30
   1bcd8:	push	{r4, lr}
   1bcdc:	mov	r1, #0
   1bce0:	bl	1750c <__assert_fail@plt+0x4e20>
   1bce4:	mov	r4, r0
   1bce8:	add	r1, r0, #40	; 0x28
   1bcec:	ldr	r0, [pc, #36]	; 1bd18 <__assert_fail@plt+0x962c>
   1bcf0:	bl	1a98c <__assert_fail@plt+0x82a0>
   1bcf4:	mov	r3, #0
   1bcf8:	mov	r0, #1
   1bcfc:	strb	r3, [r4, #19]
   1bd00:	strb	r3, [r4, #18]
   1bd04:	mov	r3, #1065353216	; 0x3f800000
   1bd08:	strb	r0, [r4, #17]
   1bd0c:	strb	r0, [r4, #16]
   1bd10:	str	r3, [r4, #28]
   1bd14:	pop	{r4, pc}
   1bd18:	andeq	ip, r3, ip, lsr r8
   1bd1c:	subs	r3, r0, #0
   1bd20:	beq	1bd40 <__assert_fail@plt+0x9654>
   1bd24:	ldr	r0, [r1]
   1bd28:	ldr	r3, [r3, r0, lsl #2]
   1bd2c:	cmp	r3, #0
   1bd30:	addne	r0, r0, #1
   1bd34:	strne	r0, [r1]
   1bd38:	movne	r0, #1
   1bd3c:	bne	1bd44 <__assert_fail@plt+0x9658>
   1bd40:	mov	r0, r3
   1bd44:	str	r3, [r2]
   1bd48:	bx	lr
   1bd4c:	push	{r0, r1, r2, lr}
   1bd50:	mov	r0, r1
   1bd54:	mov	r1, r2
   1bd58:	add	r2, sp, #4
   1bd5c:	bl	1bd1c <__assert_fail@plt+0x9630>
   1bd60:	cmp	r0, #0
   1bd64:	ldrne	r3, [pc, #12]	; 1bd78 <__assert_fail@plt+0x968c>
   1bd68:	ldrne	r2, [sp, #4]
   1bd6c:	strne	r2, [r3, #76]	; 0x4c
   1bd70:	add	sp, sp, #12
   1bd74:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd78:	andeq	r0, r5, r4, lsl #29
   1bd7c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1bd80:	mov	r5, r3
   1bd84:	ldr	r8, [pc, #568]	; 1bfc4 <__assert_fail@plt+0x98d8>
   1bd88:	sub	sp, sp, #20
   1bd8c:	ldr	r3, [pc, #564]	; 1bfc8 <__assert_fail@plt+0x98dc>
   1bd90:	cmp	r5, r8
   1bd94:	mov	r9, r2
   1bd98:	add	r2, sp, #12
   1bd9c:	ldr	r4, [pc, #552]	; 1bfcc <__assert_fail@plt+0x98e0>
   1bda0:	movne	r4, r3
   1bda4:	bl	1bd1c <__assert_fail@plt+0x9630>
   1bda8:	subs	r7, r0, #0
   1bdac:	beq	1be48 <__assert_fail@plt+0x975c>
   1bdb0:	ldr	r2, [sp, #12]
   1bdb4:	ldrb	r6, [r2]
   1bdb8:	cmp	r6, #0
   1bdbc:	bne	1bde4 <__assert_fail@plt+0x96f8>
   1bdc0:	ldr	r1, [pc, #520]	; 1bfd0 <__assert_fail@plt+0x98e4>
   1bdc4:	mov	r2, #5
   1bdc8:	mov	r0, r6
   1bdcc:	bl	1217c <dcgettext@plt>
   1bdd0:	mov	r3, r4
   1bdd4:	mov	r1, r6
   1bdd8:	mov	r2, r0
   1bddc:	mov	r0, #1
   1bde0:	bl	122c0 <error@plt>
   1bde4:	mov	r1, r5
   1bde8:	mov	r0, r9
   1bdec:	bl	174d4 <__assert_fail@plt+0x4de8>
   1bdf0:	vldr	s13, [pc, #432]	; 1bfa8 <__assert_fail@plt+0x98bc>
   1bdf4:	vldr	s12, [pc, #432]	; 1bfac <__assert_fail@plt+0x98c0>
   1bdf8:	vldr	s11, [pc, #432]	; 1bfb0 <__assert_fail@plt+0x98c4>
   1bdfc:	vldr	s10, [pc, #432]	; 1bfb4 <__assert_fail@plt+0x98c8>
   1be00:	vldr	s9, [pc, #432]	; 1bfb8 <__assert_fail@plt+0x98cc>
   1be04:	vldr	s8, [pc, #432]	; 1bfbc <__assert_fail@plt+0x98d0>
   1be08:	vldr	s7, [pc, #432]	; 1bfc0 <__assert_fail@plt+0x98d4>
   1be0c:	mov	r3, #0
   1be10:	mov	r1, #2
   1be14:	mov	ip, #4
   1be18:	cmp	r5, r8
   1be1c:	mov	r2, #0
   1be20:	str	r3, [r0, #28]
   1be24:	mov	r3, #1
   1be28:	strbeq	r3, [r0, #18]
   1be2c:	strbeq	r2, [r0, #19]
   1be30:	strbne	r2, [r0, #18]
   1be34:	strbne	r3, [r0, #19]
   1be38:	ldr	r2, [sp, #12]
   1be3c:	ldrb	r3, [r2]
   1be40:	cmp	r3, #0
   1be44:	bne	1be54 <__assert_fail@plt+0x9768>
   1be48:	mov	r0, r7
   1be4c:	add	sp, sp, #20
   1be50:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1be54:	cmp	r3, #100	; 0x64
   1be58:	beq	1bf44 <__assert_fail@plt+0x9858>
   1be5c:	bhi	1beac <__assert_fail@plt+0x97c0>
   1be60:	cmp	r3, #98	; 0x62
   1be64:	beq	1bf38 <__assert_fail@plt+0x984c>
   1be68:	bhi	1bee8 <__assert_fail@plt+0x97fc>
   1be6c:	cmp	r3, #68	; 0x44
   1be70:	moveq	r2, #5
   1be74:	ldreq	r1, [pc, #344]	; 1bfd4 <__assert_fail@plt+0x98e8>
   1be78:	beq	1be84 <__assert_fail@plt+0x9798>
   1be7c:	ldr	r1, [pc, #340]	; 1bfd8 <__assert_fail@plt+0x98ec>
   1be80:	mov	r2, #5
   1be84:	mov	r0, #0
   1be88:	bl	1217c <dcgettext@plt>
   1be8c:	ldr	r3, [sp, #12]
   1be90:	ldrb	r3, [r3]
   1be94:	str	r3, [sp]
   1be98:	mov	r3, r4
   1be9c:	mov	r2, r0
   1bea0:	mov	r1, #0
   1bea4:	mov	r0, #1
   1bea8:	bl	122c0 <error@plt>
   1beac:	cmp	r3, #108	; 0x6c
   1beb0:	beq	1bf20 <__assert_fail@plt+0x9834>
   1beb4:	bhi	1becc <__assert_fail@plt+0x97e0>
   1beb8:	cmp	r3, #102	; 0x66
   1bebc:	bne	1be7c <__assert_fail@plt+0x9790>
   1bec0:	vmov.f32	s15, s9
   1bec4:	mov	r3, #3
   1bec8:	b	1bef0 <__assert_fail@plt+0x9804>
   1becc:	cmp	r3, #112	; 0x70
   1bed0:	beq	1bf2c <__assert_fail@plt+0x9840>
   1bed4:	cmp	r3, #115	; 0x73
   1bed8:	bne	1be7c <__assert_fail@plt+0x9790>
   1bedc:	vmov.f32	s15, s10
   1bee0:	mov	r3, #6
   1bee4:	b	1bef0 <__assert_fail@plt+0x9804>
   1bee8:	vmov.f32	s15, s7
   1beec:	mov	r3, #1
   1bef0:	add	r3, r0, r3
   1bef4:	ldrb	r6, [r3, #40]	; 0x28
   1bef8:	cmp	r6, #0
   1befc:	beq	1bf50 <__assert_fail@plt+0x9864>
   1bf00:	mov	r2, #5
   1bf04:	ldr	r1, [pc, #208]	; 1bfdc <__assert_fail@plt+0x98f0>
   1bf08:	mov	r0, #0
   1bf0c:	bl	1217c <dcgettext@plt>
   1bf10:	ldr	r3, [sp, #12]
   1bf14:	ldrb	r3, [r3]
   1bf18:	str	r4, [sp]
   1bf1c:	b	1be9c <__assert_fail@plt+0x97b0>
   1bf20:	vmov.f32	s15, s12
   1bf24:	mov	r3, ip
   1bf28:	b	1bef0 <__assert_fail@plt+0x9804>
   1bf2c:	vmov.f32	s15, s11
   1bf30:	mov	r3, #5
   1bf34:	b	1bef0 <__assert_fail@plt+0x9804>
   1bf38:	vmov.f32	s15, s8
   1bf3c:	mov	r3, #0
   1bf40:	b	1bef0 <__assert_fail@plt+0x9804>
   1bf44:	vmov.f32	s15, s13
   1bf48:	mov	r3, r1
   1bf4c:	b	1bef0 <__assert_fail@plt+0x9804>
   1bf50:	vldr	s14, [r0, #28]
   1bf54:	mov	r5, #1
   1bf58:	vadd.f32	s15, s14, s15
   1bf5c:	vstr	s15, [r0, #28]
   1bf60:	strb	r5, [r3, #40]	; 0x28
   1bf64:	add	r3, r2, r5
   1bf68:	str	r3, [sp, #12]
   1bf6c:	ldrb	r3, [r2, #1]
   1bf70:	cmp	r3, #0
   1bf74:	beq	1be38 <__assert_fail@plt+0x974c>
   1bf78:	cmp	r3, #44	; 0x2c
   1bf7c:	movne	r2, #5
   1bf80:	ldrne	r1, [pc, #88]	; 1bfe0 <__assert_fail@plt+0x98f4>
   1bf84:	bne	1bdc8 <__assert_fail@plt+0x96dc>
   1bf88:	add	r3, r2, #2
   1bf8c:	str	r3, [sp, #12]
   1bf90:	ldrb	r6, [r2, #2]
   1bf94:	cmp	r6, #0
   1bf98:	bne	1be38 <__assert_fail@plt+0x974c>
   1bf9c:	mov	r2, #5
   1bfa0:	ldr	r1, [pc, #60]	; 1bfe4 <__assert_fail@plt+0x98f8>
   1bfa4:	b	1bdc8 <__assert_fail@plt+0x96dc>
   1bfa8:	ldccc	3, cr13, [ip, #364]!	; 0x16c
   1bfac:	cfldr64cc	mvdx12, [lr], #436	; 0x1b4
   1bfb0:	usatcc	r7, #29, lr, asr #16
   1bfb4:			; <UNDEFINED> instruction: 0x378560fd
   1bfb8:	svccc	0x00600000
   1bfbc:	bcc	1a4e274 <stdout@@GLIBC_2.4+0x19fdd08>
   1bfc0:	stmibcc	r8!, {r2, r4, r5, r6, r9, lr}^
   1bfc4:			; <UNDEFINED> instruction: 0x000149bc
   1bfc8:	andeq	ip, r3, r0, lsr #31
   1bfcc:	muleq	r3, r9, pc	; <UNPREDICTABLE>
   1bfd0:	andeq	ip, r3, r6, lsr #31
   1bfd4:	ldrdeq	ip, [r3], -r9
   1bfd8:	andeq	sp, r3, lr, lsr r0
   1bfdc:	andeq	sp, r3, r9, asr r0
   1bfe0:	andeq	sp, r3, lr, lsl #1
   1bfe4:	andeq	sp, r3, r0, asr #1
   1bfe8:	mov	ip, r1
   1bfec:	ldr	r3, [pc, #12]	; 1c000 <__assert_fail@plt+0x9914>
   1bff0:	mov	r1, r2
   1bff4:	mov	r2, r0
   1bff8:	mov	r0, ip
   1bffc:	b	1bd7c <__assert_fail@plt+0x9690>
   1c000:			; <UNDEFINED> instruction: 0x000149bc
   1c004:	mov	ip, r1
   1c008:	ldr	r3, [pc, #12]	; 1c01c <__assert_fail@plt+0x9930>
   1c00c:	mov	r1, r2
   1c010:	mov	r2, r0
   1c014:	mov	r0, ip
   1c018:	b	1bd7c <__assert_fail@plt+0x9690>
   1c01c:			; <UNDEFINED> instruction: 0x000147b0
   1c020:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1c024:	mov	r7, r2
   1c028:	mov	r5, r1
   1c02c:	mov	r8, r3
   1c030:	mov	r4, r0
   1c034:	ldr	r6, [sp, #40]	; 0x28
   1c038:	bl	1b4d4 <__assert_fail@plt+0x8de8>
   1c03c:	mov	r1, r7
   1c040:	add	r2, sp, #12
   1c044:	mov	r0, r5
   1c048:	bl	1bd1c <__assert_fail@plt+0x9630>
   1c04c:	subs	r7, r0, #0
   1c050:	beq	1c108 <__assert_fail@plt+0x9a1c>
   1c054:	ldr	r2, [sp, #12]
   1c058:	mov	r1, r6
   1c05c:	mov	r0, r4
   1c060:	bl	174d4 <__assert_fail@plt+0x4de8>
   1c064:	ldr	r5, [sp, #12]
   1c068:	mov	r1, #0
   1c06c:	mov	r4, r0
   1c070:	strb	r1, [r0, #19]
   1c074:	strb	r1, [r0, #18]
   1c078:	str	r5, [r0, #40]	; 0x28
   1c07c:	mov	r0, r5
   1c080:	bl	1b568 <__assert_fail@plt+0x8e7c>
   1c084:	ldr	r3, [pc, #136]	; 1c114 <__assert_fail@plt+0x9a28>
   1c088:	ldrb	r3, [r3, #17]
   1c08c:	cmp	r3, #0
   1c090:	vstr	s0, [r4, #28]
   1c094:	bne	1c108 <__assert_fail@plt+0x9a1c>
   1c098:	mov	r1, #47	; 0x2f
   1c09c:	mov	r0, r5
   1c0a0:	bl	12548 <strrchr@plt>
   1c0a4:	cmp	r0, #0
   1c0a8:	beq	1c108 <__assert_fail@plt+0x9a1c>
   1c0ac:	ldrb	r3, [r0, #1]
   1c0b0:	cmp	r3, #0
   1c0b4:	bne	1c108 <__assert_fail@plt+0x9a1c>
   1c0b8:	ldr	r1, [pc, #88]	; 1c118 <__assert_fail@plt+0x9a2c>
   1c0bc:	mov	r0, r5
   1c0c0:	sub	r1, r6, r1
   1c0c4:	clz	r1, r1
   1c0c8:	lsr	r1, r1, #5
   1c0cc:	bl	15d18 <__assert_fail@plt+0x362c>
   1c0d0:	subs	r5, r0, #0
   1c0d4:	bne	1c108 <__assert_fail@plt+0x9a1c>
   1c0d8:	mov	r2, #5
   1c0dc:	ldr	r1, [pc, #56]	; 1c11c <__assert_fail@plt+0x9a30>
   1c0e0:	bl	1217c <dcgettext@plt>
   1c0e4:	ldr	r3, [sp, #12]
   1c0e8:	mov	r1, r5
   1c0ec:	str	r3, [sp]
   1c0f0:	mov	r3, r8
   1c0f4:	mov	r2, r0
   1c0f8:	mov	r0, r5
   1c0fc:	bl	122c0 <error@plt>
   1c100:	ldr	r3, [pc, #24]	; 1c120 <__assert_fail@plt+0x9a34>
   1c104:	str	r3, [r4, #28]
   1c108:	mov	r0, r7
   1c10c:	add	sp, sp, #16
   1c110:	pop	{r4, r5, r6, r7, r8, pc}
   1c114:	andeq	r0, r5, r4, lsl #29
   1c118:	andeq	r4, r1, r8, lsr #2
   1c11c:	andeq	sp, r3, pc, lsl #2
   1c120:	eorcc	ip, fp, #30464	; 0x7700
   1c124:	ldr	r3, [pc, #20]	; 1c140 <__assert_fail@plt+0x9a54>
   1c128:	push	{r0, r1, r2, lr}
   1c12c:	str	r3, [sp]
   1c130:	ldr	r3, [pc, #12]	; 1c144 <__assert_fail@plt+0x9a58>
   1c134:	bl	1c020 <__assert_fail@plt+0x9934>
   1c138:	add	sp, sp, #12
   1c13c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c140:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1c144:	strdeq	sp, [r3], -r0
   1c148:	ldr	r3, [pc, #20]	; 1c164 <__assert_fail@plt+0x9a78>
   1c14c:	push	{r0, r1, r2, lr}
   1c150:	str	r3, [sp]
   1c154:	ldr	r3, [pc, #12]	; 1c168 <__assert_fail@plt+0x9a7c>
   1c158:	bl	1c020 <__assert_fail@plt+0x9934>
   1c15c:	add	sp, sp, #12
   1c160:	pop	{pc}		; (ldr pc, [sp], #4)
   1c164:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1c168:	andeq	sp, r3, r0, asr r1
   1c16c:	ldr	r3, [pc, #20]	; 1c188 <__assert_fail@plt+0x9a9c>
   1c170:	push	{r0, r1, r2, lr}
   1c174:	str	r3, [sp]
   1c178:	ldr	r3, [pc, #12]	; 1c18c <__assert_fail@plt+0x9aa0>
   1c17c:	bl	1c020 <__assert_fail@plt+0x9934>
   1c180:	add	sp, sp, #12
   1c184:	pop	{pc}		; (ldr pc, [sp], #4)
   1c188:	andeq	r4, r1, r8, lsr #2
   1c18c:	andeq	sp, r3, r1, lsl #8
   1c190:	ldr	r3, [pc, #20]	; 1c1ac <__assert_fail@plt+0x9ac0>
   1c194:	push	{r0, r1, r2, lr}
   1c198:	str	r3, [sp]
   1c19c:	ldr	r3, [pc, #12]	; 1c1b0 <__assert_fail@plt+0x9ac4>
   1c1a0:	bl	1c020 <__assert_fail@plt+0x9934>
   1c1a4:	add	sp, sp, #12
   1c1a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1ac:	andeq	r4, r1, r8, lsr #2
   1c1b0:	andeq	sp, r3, pc, asr #2
   1c1b4:	ldr	r3, [r1]
   1c1b8:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c1bc:	sub	r3, r3, #-1073741823	; 0xc0000001
   1c1c0:	sub	sp, sp, #20
   1c1c4:	mov	r8, r2
   1c1c8:	add	r2, sp, #12
   1c1cc:	mov	r6, r0
   1c1d0:	ldr	r9, [r0, r3, lsl #2]
   1c1d4:	bl	1bd1c <__assert_fail@plt+0x9630>
   1c1d8:	cmp	r0, #0
   1c1dc:	beq	1c230 <__assert_fail@plt+0x9b44>
   1c1e0:	ldr	r4, [sp, #12]
   1c1e4:	mov	r7, r1
   1c1e8:	mov	r0, r4
   1c1ec:	ldr	r1, [pc, #128]	; 1c274 <__assert_fail@plt+0x9b88>
   1c1f0:	bl	126e0 <strspn@plt>
   1c1f4:	ldr	r5, [pc, #124]	; 1c278 <__assert_fail@plt+0x9b8c>
   1c1f8:	cmp	r0, #0
   1c1fc:	ble	1c238 <__assert_fail@plt+0x9b4c>
   1c200:	ldrb	r3, [r4, r0]
   1c204:	cmp	r3, #0
   1c208:	bne	1c238 <__assert_fail@plt+0x9b4c>
   1c20c:	ldr	r1, [r5, #72]	; 0x48
   1c210:	mov	r0, r4
   1c214:	bl	1f654 <__assert_fail@plt+0xcf68>
   1c218:	cmp	r0, #0
   1c21c:	str	r0, [r8]
   1c220:	blt	1c238 <__assert_fail@plt+0x9b4c>
   1c224:	mov	r1, r7
   1c228:	mov	r0, r6
   1c22c:	bl	1b398 <__assert_fail@plt+0x8cac>
   1c230:	add	sp, sp, #20
   1c234:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c238:	mov	r2, #5
   1c23c:	ldr	r1, [pc, #56]	; 1c27c <__assert_fail@plt+0x9b90>
   1c240:	mov	r0, #0
   1c244:	bl	1217c <dcgettext@plt>
   1c248:	ldr	r2, [sp, #12]
   1c24c:	ldr	r1, [r5, #72]	; 0x48
   1c250:	mov	r4, r0
   1c254:	mov	r0, #0
   1c258:	bl	27f14 <__assert_fail@plt+0x15828>
   1c25c:	mov	r3, r9
   1c260:	mov	r2, r4
   1c264:	mov	r1, #0
   1c268:	str	r0, [sp]
   1c26c:	mov	r0, #1
   1c270:	bl	122c0 <error@plt>
   1c274:	andeq	sp, r3, r5, asr r1
   1c278:	andeq	r0, r5, r4, lsl #29
   1c27c:	andeq	sp, r3, r0, ror #2
   1c280:	mov	r0, r1
   1c284:	mov	r1, r2
   1c288:	ldr	r2, [pc]	; 1c290 <__assert_fail@plt+0x9ba4>
   1c28c:	b	1c1b4 <__assert_fail@plt+0x9ac8>
   1c290:	andeq	r0, r5, ip, lsl #29
   1c294:	mov	r0, r1
   1c298:	mov	r1, r2
   1c29c:	ldr	r2, [pc]	; 1c2a4 <__assert_fail@plt+0x9bb8>
   1c2a0:	b	1c1b4 <__assert_fail@plt+0x9ac8>
   1c2a4:	andeq	r0, r5, r8, lsl #29
   1c2a8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c2ac:	mov	r7, r0
   1c2b0:	mov	r0, r1
   1c2b4:	mov	r1, r2
   1c2b8:	add	r2, sp, #4
   1c2bc:	bl	1bd1c <__assert_fail@plt+0x9630>
   1c2c0:	subs	r6, r0, #0
   1c2c4:	beq	1c340 <__assert_fail@plt+0x9c54>
   1c2c8:	ldr	r0, [sp, #4]
   1c2cc:	bl	11fd8 <getpwnam@plt>
   1c2d0:	mov	r4, r0
   1c2d4:	bl	12530 <endpwent@plt>
   1c2d8:	cmp	r4, #0
   1c2dc:	ldrne	r4, [r4, #8]
   1c2e0:	bne	1c31c <__assert_fail@plt+0x9c30>
   1c2e4:	ldr	r4, [sp, #4]
   1c2e8:	ldr	r1, [pc, #196]	; 1c3b4 <__assert_fail@plt+0x9cc8>
   1c2ec:	mov	r0, r4
   1c2f0:	bl	126e0 <strspn@plt>
   1c2f4:	ldr	r5, [pc, #188]	; 1c3b8 <__assert_fail@plt+0x9ccc>
   1c2f8:	cmp	r0, #0
   1c2fc:	beq	1c34c <__assert_fail@plt+0x9c60>
   1c300:	ldrb	r3, [r4, r0]
   1c304:	cmp	r3, #0
   1c308:	bne	1c34c <__assert_fail@plt+0x9c60>
   1c30c:	mov	r0, r4
   1c310:	ldr	r1, [r5, #72]	; 0x48
   1c314:	bl	1f654 <__assert_fail@plt+0xcf68>
   1c318:	mov	r4, r0
   1c31c:	ldr	r1, [sp, #4]
   1c320:	mov	r0, r7
   1c324:	bl	1750c <__assert_fail@plt+0x4e20>
   1c328:	vldr	s14, [pc, #124]	; 1c3ac <__assert_fail@plt+0x9cc0>
   1c32c:	vldr	s15, [pc, #124]	; 1c3b0 <__assert_fail@plt+0x9cc4>
   1c330:	cmp	r4, #100	; 0x64
   1c334:	vmovcs.f32	s15, s14
   1c338:	vstr	s15, [r0, #28]
   1c33c:	str	r4, [r0, #40]	; 0x28
   1c340:	mov	r0, r6
   1c344:	add	sp, sp, #12
   1c348:	pop	{r4, r5, r6, r7, pc}
   1c34c:	ldrb	r4, [r4]
   1c350:	mov	r2, #5
   1c354:	cmp	r4, #0
   1c358:	beq	1c390 <__assert_fail@plt+0x9ca4>
   1c35c:	ldr	r1, [pc, #88]	; 1c3bc <__assert_fail@plt+0x9cd0>
   1c360:	mov	r0, #0
   1c364:	bl	1217c <dcgettext@plt>
   1c368:	ldr	r2, [sp, #4]
   1c36c:	ldr	r1, [r5, #72]	; 0x48
   1c370:	mov	r4, r0
   1c374:	mov	r0, #0
   1c378:	bl	27f14 <__assert_fail@plt+0x15828>
   1c37c:	mov	r2, r4
   1c380:	mov	r1, #0
   1c384:	mov	r3, r0
   1c388:	mov	r0, #1
   1c38c:	bl	122c0 <error@plt>
   1c390:	ldr	r1, [pc, #40]	; 1c3c0 <__assert_fail@plt+0x9cd4>
   1c394:	mov	r0, r4
   1c398:	bl	1217c <dcgettext@plt>
   1c39c:	mov	r1, r4
   1c3a0:	mov	r2, r0
   1c3a4:	mov	r0, #1
   1c3a8:	bl	122c0 <error@plt>
   1c3ac:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1c3b0:	svccc	0x007d70a4
   1c3b4:	andeq	sp, r3, r5, asr r1
   1c3b8:	andeq	r0, r5, r4, lsl #29
   1c3bc:	muleq	r3, pc, r1	; <UNPREDICTABLE>
   1c3c0:	andeq	sp, r3, r2, asr #3
   1c3c4:	push	{r0, r1, r4, r5, r6, lr}
   1c3c8:	mov	r5, r1
   1c3cc:	mov	r6, r2
   1c3d0:	mov	r4, r0
   1c3d4:	bl	1b4d4 <__assert_fail@plt+0x8de8>
   1c3d8:	mov	r0, r5
   1c3dc:	add	r2, sp, #4
   1c3e0:	mov	r1, r6
   1c3e4:	bl	1bd1c <__assert_fail@plt+0x9630>
   1c3e8:	subs	r5, r0, #0
   1c3ec:	beq	1c41c <__assert_fail@plt+0x9d30>
   1c3f0:	ldr	r1, [sp, #4]
   1c3f4:	mov	r0, r4
   1c3f8:	bl	1750c <__assert_fail@plt+0x4e20>
   1c3fc:	mov	r1, #0
   1c400:	mov	r4, r0
   1c404:	ldr	r0, [sp, #4]
   1c408:	str	r0, [r4, #40]	; 0x28
   1c40c:	bl	1b568 <__assert_fail@plt+0x8e7c>
   1c410:	vldr	s15, [pc, #16]	; 1c428 <__assert_fail@plt+0x9d3c>
   1c414:	vmul.f32	s0, s0, s15
   1c418:	vstr	s0, [r4, #28]
   1c41c:	mov	r0, r5
   1c420:	add	sp, sp, #8
   1c424:	pop	{r4, r5, r6, pc}
   1c428:	stclcc	12, cr12, [ip, #820]	; 0x334
   1c42c:	push	{r0, r1, r2, r4, r5, lr}
   1c430:	mov	r4, r0
   1c434:	mov	r0, r1
   1c438:	mov	r1, r2
   1c43c:	add	r2, sp, #4
   1c440:	bl	1bd1c <__assert_fail@plt+0x9630>
   1c444:	subs	r5, r0, #0
   1c448:	beq	1c478 <__assert_fail@plt+0x9d8c>
   1c44c:	ldr	r1, [sp, #4]
   1c450:	mov	r0, r4
   1c454:	bl	1750c <__assert_fail@plt+0x4e20>
   1c458:	mov	r1, #0
   1c45c:	mov	r4, r0
   1c460:	ldr	r0, [sp, #4]
   1c464:	str	r0, [r4, #40]	; 0x28
   1c468:	bl	1b568 <__assert_fail@plt+0x8e7c>
   1c46c:	vldr	s15, [pc, #16]	; 1c484 <__assert_fail@plt+0x9d98>
   1c470:	vmul.f32	s0, s0, s15
   1c474:	vstr	s0, [r4, #28]
   1c478:	mov	r0, r5
   1c47c:	add	sp, sp, #12
   1c480:	pop	{r4, r5, pc}
   1c484:	stclcc	12, cr12, [ip, #820]	; 0x334
   1c488:	push	{r4, r5, r6, lr}
   1c48c:	sub	sp, sp, #40	; 0x28
   1c490:	mov	r6, r0
   1c494:	mov	r0, r1
   1c498:	mov	r1, r2
   1c49c:	add	r2, sp, #12
   1c4a0:	bl	1bd1c <__assert_fail@plt+0x9630>
   1c4a4:	subs	r5, r0, #0
   1c4a8:	beq	1c550 <__assert_fail@plt+0x9e64>
   1c4ac:	mov	r3, #0
   1c4b0:	str	r3, [sp, #16]
   1c4b4:	str	r3, [sp, #20]
   1c4b8:	ldr	r3, [pc, #240]	; 1c5b0 <__assert_fail@plt+0x9ec4>
   1c4bc:	add	r4, sp, #24
   1c4c0:	str	r3, [sp]
   1c4c4:	add	r3, sp, #16
   1c4c8:	vldr	d0, [pc, #192]	; 1c590 <__assert_fail@plt+0x9ea4>
   1c4cc:	ldm	r3, {r2, r3}
   1c4d0:	mov	r1, r4
   1c4d4:	ldr	r0, [sp, #12]
   1c4d8:	bl	1a564 <__assert_fail@plt+0x7e78>
   1c4dc:	subs	r5, r0, #0
   1c4e0:	beq	1c56c <__assert_fail@plt+0x9e80>
   1c4e4:	ldr	r1, [sp, #12]
   1c4e8:	mov	r0, r6
   1c4ec:	bl	1750c <__assert_fail@plt+0x4e20>
   1c4f0:	add	ip, r0, #40	; 0x28
   1c4f4:	mov	r6, r0
   1c4f8:	ldm	r4, {r0, r1, r2, r3}
   1c4fc:	stm	ip, {r0, r1, r2, r3}
   1c500:	ldr	r1, [pc, #172]	; 1c5b4 <__assert_fail@plt+0x9ec8>
   1c504:	ldr	r0, [sp, #32]
   1c508:	bl	39280 <__assert_fail@plt+0x26b94>
   1c50c:	vldr	s14, [pc, #132]	; 1c598 <__assert_fail@plt+0x9eac>
   1c510:	vmov	s15, r0
   1c514:	vcvt.f32.s32	s15, s15
   1c518:	vcmpe.f32	s15, s14
   1c51c:	vmrs	APSR_nzcv, fpscr
   1c520:	bmi	1c55c <__assert_fail@plt+0x9e70>
   1c524:	vldr	s14, [pc, #112]	; 1c59c <__assert_fail@plt+0x9eb0>
   1c528:	vcmpe.f32	s15, s14
   1c52c:	vmrs	APSR_nzcv, fpscr
   1c530:	bmi	1c564 <__assert_fail@plt+0x9e78>
   1c534:	vldr	s14, [pc, #100]	; 1c5a0 <__assert_fail@plt+0x9eb4>
   1c538:	vcmpe.f32	s15, s14
   1c53c:	vldr	s14, [pc, #96]	; 1c5a4 <__assert_fail@plt+0x9eb8>
   1c540:	vldr	s15, [pc, #96]	; 1c5a8 <__assert_fail@plt+0x9ebc>
   1c544:	vmrs	APSR_nzcv, fpscr
   1c548:	vmovle.f32	s15, s14
   1c54c:	vstr	s15, [r6, #28]
   1c550:	mov	r0, r5
   1c554:	add	sp, sp, #40	; 0x28
   1c558:	pop	{r4, r5, r6, pc}
   1c55c:	vldr	s15, [pc, #72]	; 1c5ac <__assert_fail@plt+0x9ec0>
   1c560:	b	1c54c <__assert_fail@plt+0x9e60>
   1c564:	vldr	s15, [pc, #60]	; 1c5a8 <__assert_fail@plt+0x9ebc>
   1c568:	b	1c54c <__assert_fail@plt+0x9e60>
   1c56c:	mov	r2, #5
   1c570:	ldr	r1, [pc, #64]	; 1c5b8 <__assert_fail@plt+0x9ecc>
   1c574:	bl	1217c <dcgettext@plt>
   1c578:	ldr	r3, [sp, #12]
   1c57c:	mov	r1, r5
   1c580:	mov	r2, r0
   1c584:	mov	r0, #1
   1c588:	bl	122c0 <error@plt>
   1c58c:	nop			; (mov r0, r0)
   1c590:	andeq	r0, r0, r0
   1c594:	rscsmi	r1, r5, r0, lsl #16
   1c598:	stclcc	12, cr12, [ip, #820]	; 0x334
   1c59c:	svccc	0x00800000
   1c5a0:	sbcmi	r0, r8, #0
   1c5a4:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1c5a8:			; <UNDEFINED> instruction: 0x3e99999a
   1c5ac:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1c5b0:	andeq	sp, r3, ip, ror #3
   1c5b4:	andeq	r5, r1, r0, lsl #3
   1c5b8:	andeq	sp, r3, r0, lsr r2
   1c5bc:	push	{r4, r5, r6, r7, r8, lr}
   1c5c0:	mov	r5, r2
   1c5c4:	sub	sp, sp, #40	; 0x28
   1c5c8:	ldr	r6, [r2]
   1c5cc:	mov	r7, r0
   1c5d0:	add	r2, sp, #12
   1c5d4:	mov	r0, r1
   1c5d8:	mov	r1, r5
   1c5dc:	mov	r4, r3
   1c5e0:	bl	1bd1c <__assert_fail@plt+0x9630>
   1c5e4:	subs	r8, r0, #0
   1c5e8:	beq	1c664 <__assert_fail@plt+0x9f78>
   1c5ec:	ldr	r2, [pc, #132]	; 1c678 <__assert_fail@plt+0x9f8c>
   1c5f0:	add	ip, sp, #16
   1c5f4:	add	r1, r2, #28
   1c5f8:	str	r4, [sp, #24]
   1c5fc:	ldm	r1, {r0, r1}
   1c600:	add	r4, sp, #24
   1c604:	vldr	d0, [pc, #100]	; 1c670 <__assert_fail@plt+0x9f84>
   1c608:	add	r3, r0, #86016	; 0x15000
   1c60c:	add	r3, r3, #384	; 0x180
   1c610:	stm	ip, {r0, r1}
   1c614:	str	r3, [sp, #16]
   1c618:	ldr	r3, [pc, #92]	; 1c67c <__assert_fail@plt+0x9f90>
   1c61c:	mov	r1, r4
   1c620:	str	r3, [sp]
   1c624:	ldr	r0, [sp, #12]
   1c628:	ldm	ip, {r2, r3}
   1c62c:	bl	1a564 <__assert_fail@plt+0x7e78>
   1c630:	subs	r8, r0, #0
   1c634:	streq	r6, [r5]
   1c638:	beq	1c664 <__assert_fail@plt+0x9f78>
   1c63c:	ldr	r1, [sp, #12]
   1c640:	mov	r0, r7
   1c644:	bl	1750c <__assert_fail@plt+0x4e20>
   1c648:	add	ip, r0, #40	; 0x28
   1c64c:	mov	r5, r0
   1c650:	ldm	r4, {r0, r1, r2, r3}
   1c654:	stm	ip, {r0, r1, r2, r3}
   1c658:	ldr	r0, [sp, #32]
   1c65c:	bl	1b7dc <__assert_fail@plt+0x90f0>
   1c660:	vstr	s0, [r5, #28]
   1c664:	mov	r0, r8
   1c668:	add	sp, sp, #40	; 0x28
   1c66c:	pop	{r4, r5, r6, r7, r8, pc}
   1c670:	andeq	r0, r0, r0
   1c674:	submi	r0, lr, r0
   1c678:	andeq	r0, r5, r4, lsl #29
   1c67c:	andeq	sp, r3, sp, asr #4
   1c680:	mov	r3, #3
   1c684:	b	1c5bc <__assert_fail@plt+0x9ed0>
   1c688:	mov	r3, #2
   1c68c:	b	1c5bc <__assert_fail@plt+0x9ed0>
   1c690:	mov	r3, #0
   1c694:	b	1c5bc <__assert_fail@plt+0x9ed0>
   1c698:	push	{r4, r5, lr}
   1c69c:	sub	sp, sp, #20
   1c6a0:	mov	r5, r2
   1c6a4:	mov	r2, sp
   1c6a8:	bl	1bd1c <__assert_fail@plt+0x9630>
   1c6ac:	subs	r4, r0, #0
   1c6b0:	beq	1c75c <__assert_fail@plt+0xa070>
   1c6b4:	add	r2, sp, #4
   1c6b8:	add	r1, sp, #8
   1c6bc:	ldr	r0, [sp]
   1c6c0:	bl	1a6d8 <__assert_fail@plt+0x7fec>
   1c6c4:	subs	r4, r0, #0
   1c6c8:	beq	1c75c <__assert_fail@plt+0xa070>
   1c6cc:	ldr	r1, [sp]
   1c6d0:	mov	r0, r5
   1c6d4:	bl	1750c <__assert_fail@plt+0x4e20>
   1c6d8:	ldr	r3, [sp, #4]
   1c6dc:	str	r3, [r0, #40]	; 0x28
   1c6e0:	ldrd	r2, [sp, #8]
   1c6e4:	mov	r4, r0
   1c6e8:	strd	r2, [r0, #48]	; 0x30
   1c6ec:	ldr	r3, [pc, #140]	; 1c780 <__assert_fail@plt+0xa094>
   1c6f0:	ldr	r3, [r3, #44]	; 0x2c
   1c6f4:	tst	r3, #1
   1c6f8:	beq	1c75c <__assert_fail@plt+0xa070>
   1c6fc:	ldr	r5, [pc, #128]	; 1c784 <__assert_fail@plt+0xa098>
   1c700:	ldr	r2, [r0, #4]
   1c704:	ldr	r1, [pc, #124]	; 1c788 <__assert_fail@plt+0xa09c>
   1c708:	ldr	r0, [r5]
   1c70c:	bl	123f8 <fprintf@plt>
   1c710:	ldr	r3, [sp, #4]
   1c714:	ldr	r0, [r5]
   1c718:	cmp	r3, #0
   1c71c:	beq	1c768 <__assert_fail@plt+0xa07c>
   1c720:	cmp	r3, #1
   1c724:	beq	1c774 <__assert_fail@plt+0xa088>
   1c728:	cmp	r3, #2
   1c72c:	ldr	r1, [pc, #88]	; 1c78c <__assert_fail@plt+0xa0a0>
   1c730:	ldr	r3, [pc, #88]	; 1c790 <__assert_fail@plt+0xa0a4>
   1c734:	ldr	r2, [pc, #88]	; 1c794 <__assert_fail@plt+0xa0a8>
   1c738:	movne	r2, r3
   1c73c:	ldr	r3, [pc, #84]	; 1c798 <__assert_fail@plt+0xa0ac>
   1c740:	movne	r3, r1
   1c744:	ldr	r1, [pc, #80]	; 1c79c <__assert_fail@plt+0xa0b0>
   1c748:	bl	123f8 <fprintf@plt>
   1c74c:	ldrd	r2, [r4, #48]	; 0x30
   1c750:	ldr	r1, [pc, #72]	; 1c7a0 <__assert_fail@plt+0xa0b4>
   1c754:	ldr	r0, [r5]
   1c758:	bl	123f8 <fprintf@plt>
   1c75c:	mov	r0, r4
   1c760:	add	sp, sp, #20
   1c764:	pop	{r4, r5, pc}
   1c768:	ldr	r2, [pc, #52]	; 1c7a4 <__assert_fail@plt+0xa0b8>
   1c76c:	ldr	r3, [pc, #52]	; 1c7a8 <__assert_fail@plt+0xa0bc>
   1c770:	b	1c744 <__assert_fail@plt+0xa058>
   1c774:	ldr	r2, [pc, #48]	; 1c7ac <__assert_fail@plt+0xa0c0>
   1c778:	ldr	r3, [pc, #48]	; 1c7b0 <__assert_fail@plt+0xa0c4>
   1c77c:	b	1c744 <__assert_fail@plt+0xa058>
   1c780:	andeq	r0, r5, r4, lsl #29
   1c784:	andeq	r0, r5, r0, ror #10
   1c788:	andeq	sp, r3, r6, lsr #5
   1c78c:	andeq	sp, r3, r3, lsr #5
   1c790:	andeq	sp, r3, r4, lsr #5
   1c794:	muleq	r3, sp, r2
   1c798:	andeq	sp, r3, r0, lsr #5
   1c79c:			; <UNDEFINED> instruction: 0x0003d2b4
   1c7a0:	andeq	sp, r3, r9, asr #5
   1c7a4:	muleq	r3, r7, r2
   1c7a8:	muleq	r3, sl, r2
   1c7ac:	andeq	sp, r3, r7, lsl ip
   1c7b0:	muleq	r3, r4, r2
   1c7b4:	mov	r3, r1
   1c7b8:	push	{r4, lr}
   1c7bc:	mov	r4, r2
   1c7c0:	mov	r1, r4
   1c7c4:	mov	r2, r0
   1c7c8:	mov	r0, r3
   1c7cc:	bl	1c698 <__assert_fail@plt+0x9fac>
   1c7d0:	cmp	r0, #0
   1c7d4:	beq	1c7fc <__assert_fail@plt+0xa110>
   1c7d8:	ldrd	r2, [r0, #48]	; 0x30
   1c7dc:	vldr	s14, [pc, #40]	; 1c80c <__assert_fail@plt+0xa120>
   1c7e0:	vldr	s15, [pc, #40]	; 1c810 <__assert_fail@plt+0xa124>
   1c7e4:	cmp	r3, #0
   1c7e8:	cmpeq	r2, #100	; 0x64
   1c7ec:	vmovcs.f32	s15, s14
   1c7f0:	vstr	s15, [r0, #28]
   1c7f4:	mov	r0, #1
   1c7f8:	pop	{r4, pc}
   1c7fc:	ldr	r3, [r4]
   1c800:	sub	r3, r3, #1
   1c804:	str	r3, [r4]
   1c808:	pop	{r4, pc}
   1c80c:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1c810:	svccc	0x007d70a4
   1c814:	b	1c7b4 <__assert_fail@plt+0xa0c8>
   1c818:	mov	r3, r1
   1c81c:	push	{r4, lr}
   1c820:	mov	r4, r2
   1c824:	mov	r1, r4
   1c828:	mov	r2, r0
   1c82c:	mov	r0, r3
   1c830:	bl	1c698 <__assert_fail@plt+0x9fac>
   1c834:	cmp	r0, #0
   1c838:	beq	1c86c <__assert_fail@plt+0xa180>
   1c83c:	ldrd	r2, [r0, #48]	; 0x30
   1c840:	cmp	r3, #0
   1c844:	cmpeq	r2, #1
   1c848:	ldreq	r3, [pc, #44]	; 1c87c <__assert_fail@plt+0xa190>
   1c84c:	beq	1c860 <__assert_fail@plt+0xa174>
   1c850:	cmp	r3, #0
   1c854:	cmpeq	r2, #2
   1c858:	ldrne	r3, [pc, #32]	; 1c880 <__assert_fail@plt+0xa194>
   1c85c:	ldreq	r3, [pc, #32]	; 1c884 <__assert_fail@plt+0xa198>
   1c860:	str	r3, [r0, #28]
   1c864:	mov	r0, #1
   1c868:	pop	{r4, pc}
   1c86c:	ldr	r3, [r4]
   1c870:	sub	r3, r3, #1
   1c874:	str	r3, [r4]
   1c878:	pop	{r4, pc}
   1c87c:	svccc	0x007d70a4
   1c880:	bcc	fe0e1244 <stdout@@GLIBC_2.4+0xfe090cd8>
   1c884:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1c888:	mov	r3, r1
   1c88c:	push	{r4, lr}
   1c890:	mov	r4, r2
   1c894:	mov	r1, r4
   1c898:	mov	r2, r0
   1c89c:	mov	r0, r3
   1c8a0:	bl	1c698 <__assert_fail@plt+0x9fac>
   1c8a4:	cmp	r0, #0
   1c8a8:	movne	r2, #0
   1c8ac:	ldrne	r3, [pc, #36]	; 1c8d8 <__assert_fail@plt+0xa1ec>
   1c8b0:	ldreq	r3, [r4]
   1c8b4:	strne	r3, [r0, #28]
   1c8b8:	subeq	r3, r3, #1
   1c8bc:	movne	r3, #1
   1c8c0:	strbne	r3, [r0, #20]
   1c8c4:	strbne	r2, [r0, #18]
   1c8c8:	strbne	r2, [r0, #19]
   1c8cc:	streq	r3, [r4]
   1c8d0:	movne	r0, r3
   1c8d4:	pop	{r4, pc}
   1c8d8:	strcc	r3, [r6, #1981]	; 0x7bd
   1c8dc:	push	{r0, r1, r4, r5, r6, lr}
   1c8e0:	mov	r6, r2
   1c8e4:	add	r2, sp, #4
   1c8e8:	mov	r5, r3
   1c8ec:	bl	1bd1c <__assert_fail@plt+0x9630>
   1c8f0:	subs	r4, r0, #0
   1c8f4:	streq	r4, [r5]
   1c8f8:	beq	1c92c <__assert_fail@plt+0xa240>
   1c8fc:	ldr	r3, [pc, #52]	; 1c938 <__assert_fail@plt+0xa24c>
   1c900:	ldr	r0, [sp, #4]
   1c904:	mov	r1, r6
   1c908:	str	r0, [r5]
   1c90c:	ldr	r3, [r3, #52]	; 0x34
   1c910:	blx	r3
   1c914:	cmp	r0, #0
   1c918:	beq	1c92c <__assert_fail@plt+0xa240>
   1c91c:	bl	12404 <__errno_location@plt>
   1c920:	ldr	r1, [sp, #4]
   1c924:	ldr	r0, [r0]
   1c928:	bl	18434 <__assert_fail@plt+0x5d48>
   1c92c:	mov	r0, r4
   1c930:	add	sp, sp, #8
   1c934:	pop	{r4, r5, r6, pc}
   1c938:	andeq	r0, r5, r4, lsl #29
   1c93c:	push	{r4, r5, r6, lr}
   1c940:	sub	sp, sp, #112	; 0x70
   1c944:	mov	r5, r1
   1c948:	mov	r6, r2
   1c94c:	mov	r4, r0
   1c950:	add	r0, sp, #8
   1c954:	bl	17758 <__assert_fail@plt+0x506c>
   1c958:	mov	r0, r5
   1c95c:	add	r3, sp, #4
   1c960:	add	r2, sp, #8
   1c964:	mov	r1, r6
   1c968:	bl	1c8dc <__assert_fail@plt+0xa1f0>
   1c96c:	subs	r5, r0, #0
   1c970:	beq	1c9ac <__assert_fail@plt+0xa2c0>
   1c974:	ldr	r1, [sp, #4]
   1c978:	mov	r0, r4
   1c97c:	bl	1750c <__assert_fail@plt+0x4e20>
   1c980:	ldr	r3, [sp, #92]	; 0x5c
   1c984:	mov	r4, r0
   1c988:	ldr	r0, [sp, #88]	; 0x58
   1c98c:	str	r3, [r4, #52]	; 0x34
   1c990:	mov	r3, #3
   1c994:	str	r3, [r4, #40]	; 0x28
   1c998:	mov	r3, #0
   1c99c:	str	r0, [r4, #48]	; 0x30
   1c9a0:	str	r3, [r4, #44]	; 0x2c
   1c9a4:	bl	1b7dc <__assert_fail@plt+0x90f0>
   1c9a8:	vstr	s0, [r4, #28]
   1c9ac:	mov	r0, r5
   1c9b0:	add	sp, sp, #112	; 0x70
   1c9b4:	pop	{r4, r5, r6, pc}
   1c9b8:	push	{r4, r5, r6, lr}
   1c9bc:	sub	sp, sp, #112	; 0x70
   1c9c0:	mov	r5, r1
   1c9c4:	mov	r6, r2
   1c9c8:	mov	r4, r0
   1c9cc:	add	r0, sp, #8
   1c9d0:	bl	17758 <__assert_fail@plt+0x506c>
   1c9d4:	mov	r0, r5
   1c9d8:	add	r3, sp, #4
   1c9dc:	add	r2, sp, #8
   1c9e0:	mov	r1, r6
   1c9e4:	bl	1c8dc <__assert_fail@plt+0xa1f0>
   1c9e8:	subs	r5, r0, #0
   1c9ec:	beq	1ca28 <__assert_fail@plt+0xa33c>
   1c9f0:	ldr	r1, [sp, #4]
   1c9f4:	mov	r0, r4
   1c9f8:	bl	1750c <__assert_fail@plt+0x4e20>
   1c9fc:	mov	r3, #2
   1ca00:	str	r3, [r0, #40]	; 0x28
   1ca04:	mov	r4, r0
   1ca08:	ldr	r3, [sp, #92]	; 0x5c
   1ca0c:	ldr	r0, [sp, #88]	; 0x58
   1ca10:	str	r3, [r4, #52]	; 0x34
   1ca14:	mov	r3, #0
   1ca18:	str	r0, [r4, #48]	; 0x30
   1ca1c:	str	r3, [r4, #44]	; 0x2c
   1ca20:	bl	1b7dc <__assert_fail@plt+0x90f0>
   1ca24:	vstr	s0, [r4, #28]
   1ca28:	mov	r0, r5
   1ca2c:	add	sp, sp, #112	; 0x70
   1ca30:	pop	{r4, r5, r6, pc}
   1ca34:	push	{r4, r5, r6, lr}
   1ca38:	sub	sp, sp, #112	; 0x70
   1ca3c:	mov	r5, r1
   1ca40:	mov	r6, r2
   1ca44:	mov	r4, r0
   1ca48:	add	r0, sp, #8
   1ca4c:	bl	17758 <__assert_fail@plt+0x506c>
   1ca50:	mov	r0, r5
   1ca54:	add	r3, sp, #4
   1ca58:	add	r2, sp, #8
   1ca5c:	mov	r1, r6
   1ca60:	bl	1c8dc <__assert_fail@plt+0xa1f0>
   1ca64:	subs	r5, r0, #0
   1ca68:	beq	1caa0 <__assert_fail@plt+0xa3b4>
   1ca6c:	ldr	r1, [sp, #4]
   1ca70:	mov	r0, r4
   1ca74:	bl	1750c <__assert_fail@plt+0x4e20>
   1ca78:	mov	r3, #0
   1ca7c:	str	r3, [r0, #40]	; 0x28
   1ca80:	mov	r4, r0
   1ca84:	ldr	r2, [sp, #92]	; 0x5c
   1ca88:	ldr	r0, [sp, #88]	; 0x58
   1ca8c:	str	r2, [r4, #52]	; 0x34
   1ca90:	str	r0, [r4, #48]	; 0x30
   1ca94:	str	r3, [r4, #44]	; 0x2c
   1ca98:	bl	1b7dc <__assert_fail@plt+0x90f0>
   1ca9c:	vstr	s0, [r4, #28]
   1caa0:	mov	r0, r5
   1caa4:	add	sp, sp, #112	; 0x70
   1caa8:	pop	{r4, r5, r6, pc}
   1caac:	push	{r4, r5, r6, r7, lr}
   1cab0:	sub	sp, sp, #220	; 0xdc
   1cab4:	mov	r6, r2
   1cab8:	mov	r4, r1
   1cabc:	mov	r5, r0
   1cac0:	add	r0, sp, #8
   1cac4:	bl	17758 <__assert_fail@plt+0x506c>
   1cac8:	mov	r1, r6
   1cacc:	add	r3, sp, #4
   1cad0:	add	r2, sp, #8
   1cad4:	mov	r0, r4
   1cad8:	bl	1c8dc <__assert_fail@plt+0xa1f0>
   1cadc:	subs	r6, r0, #0
   1cae0:	beq	1cbf8 <__assert_fail@plt+0xa50c>
   1cae4:	ldr	r7, [pc, #324]	; 1cc30 <__assert_fail@plt+0xa544>
   1cae8:	add	r0, sp, #112	; 0x70
   1caec:	bl	17758 <__assert_fail@plt+0x506c>
   1caf0:	ldr	r3, [r7, #48]	; 0x30
   1caf4:	cmp	r3, #0
   1caf8:	bne	1cc20 <__assert_fail@plt+0xa534>
   1cafc:	ldrb	r1, [r7, #56]	; 0x38
   1cb00:	cmp	r1, #0
   1cb04:	bne	1cc28 <__assert_fail@plt+0xa53c>
   1cb08:	ldr	r3, [sp, #24]
   1cb0c:	and	r3, r3, #61440	; 0xf000
   1cb10:	cmp	r3, #40960	; 0xa000
   1cb14:	beq	1cc18 <__assert_fail@plt+0xa52c>
   1cb18:	ldr	r0, [sp, #4]
   1cb1c:	bl	1e864 <__assert_fail@plt+0xc178>
   1cb20:	subs	r4, r0, #0
   1cb24:	blt	1cbc0 <__assert_fail@plt+0xa4d4>
   1cb28:	add	r1, sp, #112	; 0x70
   1cb2c:	bl	39b94 <__assert_fail@plt+0x274a8>
   1cb30:	cmp	r0, #0
   1cb34:	beq	1cb48 <__assert_fail@plt+0xa45c>
   1cb38:	bl	12404 <__errno_location@plt>
   1cb3c:	ldr	r1, [sp, #4]
   1cb40:	ldr	r0, [r0]
   1cb44:	bl	18434 <__assert_fail@plt+0x5d48>
   1cb48:	ldr	r3, [r7, #52]	; 0x34
   1cb4c:	add	r1, sp, #8
   1cb50:	ldr	r0, [sp, #4]
   1cb54:	blx	r3
   1cb58:	cmp	r0, #0
   1cb5c:	bne	1cb38 <__assert_fail@plt+0xa44c>
   1cb60:	ldr	r3, [r7, #48]	; 0x30
   1cb64:	cmp	r3, #0
   1cb68:	bne	1cc04 <__assert_fail@plt+0xa518>
   1cb6c:	ldrb	r3, [r7, #56]	; 0x38
   1cb70:	cmp	r3, #0
   1cb74:	bne	1cc04 <__assert_fail@plt+0xa518>
   1cb78:	ldr	r3, [sp, #24]
   1cb7c:	and	r3, r3, #61440	; 0xf000
   1cb80:	cmp	r3, #40960	; 0xa000
   1cb84:	bne	1cb98 <__assert_fail@plt+0xa4ac>
   1cb88:	mov	r0, r4
   1cb8c:	bl	126a4 <close@plt>
   1cb90:	mvn	r4, #0
   1cb94:	b	1cbc0 <__assert_fail@plt+0xa4d4>
   1cb98:	ldrd	r2, [sp, #112]	; 0x70
   1cb9c:	ldrd	r0, [sp, #8]
   1cba0:	cmp	r1, r3
   1cba4:	cmpeq	r0, r2
   1cba8:	bne	1cb88 <__assert_fail@plt+0xa49c>
   1cbac:	ldrd	r2, [sp, #208]	; 0xd0
   1cbb0:	ldrd	r0, [sp, #104]	; 0x68
   1cbb4:	cmp	r1, r3
   1cbb8:	cmpeq	r0, r2
   1cbbc:	bne	1cb88 <__assert_fail@plt+0xa49c>
   1cbc0:	ldr	r1, [sp, #4]
   1cbc4:	mov	r0, r5
   1cbc8:	bl	1750c <__assert_fail@plt+0x4e20>
   1cbcc:	ldrd	r2, [sp, #104]	; 0x68
   1cbd0:	strd	r2, [r0, #40]	; 0x28
   1cbd4:	ldrd	r2, [sp, #8]
   1cbd8:	str	r4, [r0, #56]	; 0x38
   1cbdc:	strd	r2, [r0, #48]	; 0x30
   1cbe0:	mov	r3, #0
   1cbe4:	strb	r3, [r0, #19]
   1cbe8:	mov	r3, #1
   1cbec:	strb	r3, [r0, #18]
   1cbf0:	ldr	r3, [pc, #60]	; 1cc34 <__assert_fail@plt+0xa548>
   1cbf4:	str	r3, [r0, #28]
   1cbf8:	mov	r0, r6
   1cbfc:	add	sp, sp, #220	; 0xdc
   1cc00:	pop	{r4, r5, r6, r7, pc}
   1cc04:	mov	r2, #104	; 0x68
   1cc08:	add	r1, sp, #112	; 0x70
   1cc0c:	add	r0, sp, #8
   1cc10:	bl	120f8 <memcpy@plt>
   1cc14:	b	1cbc0 <__assert_fail@plt+0xa4d4>
   1cc18:	mvn	r4, #1
   1cc1c:	b	1cbc0 <__assert_fail@plt+0xa4d4>
   1cc20:	mov	r1, #0
   1cc24:	b	1cb18 <__assert_fail@plt+0xa42c>
   1cc28:	mov	r1, #32768	; 0x8000
   1cc2c:	b	1cb18 <__assert_fail@plt+0xa42c>
   1cc30:	andeq	r0, r5, r4, lsl #29
   1cc34:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1cc38:	push	{r0, r1, r2, r4, r5, lr}
   1cc3c:	mov	r4, r1
   1cc40:	mov	r5, r2
   1cc44:	mov	r1, r5
   1cc48:	add	r2, sp, #4
   1cc4c:	mov	r0, r4
   1cc50:	bl	1bd1c <__assert_fail@plt+0x9630>
   1cc54:	cmp	r0, #0
   1cc58:	beq	1cc78 <__assert_fail@plt+0xa58c>
   1cc5c:	ldr	r0, [sp, #4]
   1cc60:	bl	1f47c <__assert_fail@plt+0xcd90>
   1cc64:	ldr	r3, [pc, #20]	; 1cc80 <__assert_fail@plt+0xa594>
   1cc68:	mov	r1, r5
   1cc6c:	str	r0, [r3, #60]	; 0x3c
   1cc70:	mov	r0, r4
   1cc74:	bl	1b398 <__assert_fail@plt+0x8cac>
   1cc78:	add	sp, sp, #12
   1cc7c:	pop	{r4, r5, pc}
   1cc80:	andeq	r0, r5, r4, lsl #29
   1cc84:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1cc88:	mov	r4, r2
   1cc8c:	add	r2, sp, #12
   1cc90:	mov	r7, r3
   1cc94:	bl	1bd1c <__assert_fail@plt+0x9630>
   1cc98:	subs	r8, r0, #0
   1cc9c:	beq	1cd50 <__assert_fail@plt+0xa664>
   1cca0:	ldr	r2, [sp, #12]
   1cca4:	ldr	r1, [pc, #176]	; 1cd5c <__assert_fail@plt+0xa670>
   1cca8:	mov	r0, r4
   1ccac:	bl	174d4 <__assert_fail@plt+0x4de8>
   1ccb0:	mov	r5, #0
   1ccb4:	mov	r6, r0
   1ccb8:	strb	r5, [r0, #19]
   1ccbc:	strb	r5, [r0, #18]
   1ccc0:	mov	r0, #32
   1ccc4:	bl	28d44 <__assert_fail@plt+0x16658>
   1ccc8:	mov	r4, r0
   1cccc:	str	r0, [r6, #40]	; 0x28
   1ccd0:	mov	r0, #100	; 0x64
   1ccd4:	str	r0, [r4, #4]
   1ccd8:	bl	28d44 <__assert_fail@plt+0x16658>
   1ccdc:	str	r5, [r4, #16]
   1cce0:	str	r0, [r4]
   1cce4:	mov	r0, r7
   1cce8:	bl	371b8 <__assert_fail@plt+0x24acc>
   1ccec:	str	r7, [r4, #12]
   1ccf0:	ldr	r7, [sp, #12]
   1ccf4:	str	r5, [r4, #20]
   1ccf8:	mov	r0, r7
   1ccfc:	bl	123bc <strlen@plt>
   1cd00:	mov	r2, r4
   1cd04:	mov	r1, r0
   1cd08:	mov	r0, r7
   1cd0c:	bl	37148 <__assert_fail@plt+0x24a5c>
   1cd10:	subs	r4, r0, #0
   1cd14:	beq	1cd40 <__assert_fail@plt+0xa654>
   1cd18:	mov	r2, #5
   1cd1c:	ldr	r1, [pc, #60]	; 1cd60 <__assert_fail@plt+0xa674>
   1cd20:	mov	r0, r5
   1cd24:	bl	1217c <dcgettext@plt>
   1cd28:	str	r4, [sp]
   1cd2c:	ldr	r3, [sp, #12]
   1cd30:	mov	r1, r5
   1cd34:	mov	r2, r0
   1cd38:	mov	r0, #1
   1cd3c:	bl	122c0 <error@plt>
   1cd40:	mov	r1, #1
   1cd44:	ldr	r0, [sp, #12]
   1cd48:	bl	1b568 <__assert_fail@plt+0x8e7c>
   1cd4c:	vstr	s0, [r6, #28]
   1cd50:	mov	r0, r8
   1cd54:	add	sp, sp, #16
   1cd58:	pop	{r4, r5, r6, r7, r8, pc}
   1cd5c:	andeq	r4, r1, r0, lsr r6
   1cd60:	andeq	sp, r3, pc, asr #5
   1cd64:	ldr	r3, [pc, #20]	; 1cd80 <__assert_fail@plt+0xa694>
   1cd68:	mov	ip, r1
   1cd6c:	mov	r1, r2
   1cd70:	ldr	r3, [r3, #60]	; 0x3c
   1cd74:	mov	r2, r0
   1cd78:	mov	r0, ip
   1cd7c:	b	1cc84 <__assert_fail@plt+0xa598>
   1cd80:	andeq	r0, r5, r4, lsl #29
   1cd84:	ldr	r3, [pc, #24]	; 1cda4 <__assert_fail@plt+0xa6b8>
   1cd88:	mov	ip, r1
   1cd8c:	mov	r1, r2
   1cd90:	ldr	r3, [r3, #60]	; 0x3c
   1cd94:	mov	r2, r0
   1cd98:	orr	r3, r3, #4194304	; 0x400000
   1cd9c:	mov	r0, ip
   1cda0:	b	1cc84 <__assert_fail@plt+0xa598>
   1cda4:	andeq	r0, r5, r4, lsl #29
   1cda8:	push	{r0, r1, r4, r5, r6, lr}
   1cdac:	mov	r4, r0
   1cdb0:	mov	r0, r1
   1cdb4:	mov	r1, r2
   1cdb8:	add	r2, sp, #4
   1cdbc:	bl	1bd1c <__assert_fail@plt+0x9630>
   1cdc0:	subs	r6, r0, #0
   1cdc4:	beq	1ce10 <__assert_fail@plt+0xa724>
   1cdc8:	ldr	r5, [sp, #4]
   1cdcc:	mov	r0, r4
   1cdd0:	mov	r1, r5
   1cdd4:	bl	1750c <__assert_fail@plt+0x4e20>
   1cdd8:	cmp	r5, #0
   1cddc:	mov	r4, r0
   1cde0:	add	r1, r0, #40	; 0x28
   1cde4:	movne	r0, r5
   1cde8:	ldreq	r0, [pc, #44]	; 1ce1c <__assert_fail@plt+0xa730>
   1cdec:	bl	1a98c <__assert_fail@plt+0x82a0>
   1cdf0:	mov	r3, #1
   1cdf4:	strb	r3, [r4, #17]
   1cdf8:	strb	r3, [r4, #16]
   1cdfc:	mov	r3, #0
   1ce00:	strb	r3, [r4, #19]
   1ce04:	strb	r3, [r4, #18]
   1ce08:	mov	r3, #1065353216	; 0x3f800000
   1ce0c:	str	r3, [r4, #28]
   1ce10:	mov	r0, r6
   1ce14:	add	sp, sp, #8
   1ce18:	pop	{r4, r5, r6, pc}
   1ce1c:	andeq	ip, r3, ip, lsr r8
   1ce20:	push	{r4, r5, r6, r7, lr}
   1ce24:	mov	r5, r1
   1ce28:	sub	sp, sp, #28
   1ce2c:	mov	r4, r2
   1ce30:	ldr	r6, [r2]
   1ce34:	mov	r7, r0
   1ce38:	mov	r2, sp
   1ce3c:	mov	r1, r4
   1ce40:	mov	r0, r5
   1ce44:	bl	1bd1c <__assert_fail@plt+0x9630>
   1ce48:	eor	r0, r0, #1
   1ce4c:	cmp	r5, #0
   1ce50:	orreq	r0, r0, #1
   1ce54:	tst	r0, #255	; 0xff
   1ce58:	bne	1ce9c <__assert_fail@plt+0xa7b0>
   1ce5c:	ldr	r3, [r4]
   1ce60:	ldr	r5, [r5, r3, lsl #2]
   1ce64:	cmp	r5, #0
   1ce68:	beq	1ce9c <__assert_fail@plt+0xa7b0>
   1ce6c:	add	r3, r3, #1
   1ce70:	str	r3, [r4]
   1ce74:	add	r1, sp, #4
   1ce78:	ldr	r0, [sp]
   1ce7c:	bl	1a98c <__assert_fail@plt+0x82a0>
   1ce80:	mov	r2, r5
   1ce84:	mov	r1, r7
   1ce88:	add	r0, sp, #4
   1ce8c:	ldr	r6, [r4]
   1ce90:	bl	19b9c <__assert_fail@plt+0x74b0>
   1ce94:	cmp	r0, #0
   1ce98:	bne	1cea4 <__assert_fail@plt+0xa7b8>
   1ce9c:	mov	r0, #0
   1cea0:	str	r6, [r4]
   1cea4:	add	sp, sp, #28
   1cea8:	pop	{r4, r5, r6, r7, pc}
   1ceac:	push	{r0, r1, r2, r4, r5, lr}
   1ceb0:	mov	r4, r0
   1ceb4:	mov	r0, r1
   1ceb8:	mov	r1, r2
   1cebc:	add	r2, sp, #4
   1cec0:	bl	1bd1c <__assert_fail@plt+0x9630>
   1cec4:	subs	r5, r0, #0
   1cec8:	beq	1cf08 <__assert_fail@plt+0xa81c>
   1cecc:	ldr	r1, [sp, #4]
   1ced0:	mov	r0, r4
   1ced4:	bl	1750c <__assert_fail@plt+0x4e20>
   1ced8:	mov	r4, r0
   1cedc:	add	r1, r0, #40	; 0x28
   1cee0:	ldr	r0, [sp, #4]
   1cee4:	bl	1a98c <__assert_fail@plt+0x82a0>
   1cee8:	mov	r3, #1
   1ceec:	strb	r3, [r4, #17]
   1cef0:	strb	r3, [r4, #16]
   1cef4:	mov	r3, #0
   1cef8:	strb	r3, [r4, #19]
   1cefc:	strb	r3, [r4, #18]
   1cf00:	mov	r3, #1065353216	; 0x3f800000
   1cf04:	str	r3, [r4, #28]
   1cf08:	mov	r0, r5
   1cf0c:	add	sp, sp, #12
   1cf10:	pop	{r4, r5, pc}
   1cf14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf18:	sub	sp, sp, #28
   1cf1c:	mov	r9, r0
   1cf20:	mov	r0, r1
   1cf24:	mov	r1, r2
   1cf28:	add	r2, sp, #12
   1cf2c:	bl	1bd1c <__assert_fail@plt+0x9630>
   1cf30:	subs	r7, r0, #0
   1cf34:	beq	1d0ac <__assert_fail@plt+0xa9c0>
   1cf38:	ldr	r0, [sp, #12]
   1cf3c:	ldrb	r3, [r0]
   1cf40:	cmp	r3, #45	; 0x2d
   1cf44:	beq	1cfd0 <__assert_fail@plt+0xa8e4>
   1cf48:	cmp	r3, #47	; 0x2f
   1cf4c:	moveq	r6, #1
   1cf50:	ldreq	r8, [pc, #352]	; 1d0b8 <__assert_fail@plt+0xa9cc>
   1cf54:	ldrne	r8, [pc, #352]	; 1d0bc <__assert_fail@plt+0xa9d0>
   1cf58:	moveq	r3, r6
   1cf5c:	movne	r6, #2
   1cf60:	movne	r3, #0
   1cf64:	add	r0, r0, r3
   1cf68:	bl	23160 <__assert_fail@plt+0x10a74>
   1cf6c:	subs	sl, r0, #0
   1cf70:	beq	1cf94 <__assert_fail@plt+0xa8a8>
   1cf74:	ldr	r3, [sp, #12]
   1cf78:	ldrb	r2, [r3]
   1cf7c:	cmp	r2, #43	; 0x2b
   1cf80:	bne	1cfe0 <__assert_fail@plt+0xa8f4>
   1cf84:	ldrb	r3, [r3, #1]
   1cf88:	sub	r3, r3, #48	; 0x30
   1cf8c:	cmp	r3, #7
   1cf90:	bhi	1cfe0 <__assert_fail@plt+0xa8f4>
   1cf94:	mov	r2, #5
   1cf98:	ldr	r1, [pc, #288]	; 1d0c0 <__assert_fail@plt+0xa9d4>
   1cf9c:	mov	r0, #0
   1cfa0:	bl	1217c <dcgettext@plt>
   1cfa4:	ldr	r3, [pc, #280]	; 1d0c4 <__assert_fail@plt+0xa9d8>
   1cfa8:	ldr	r2, [sp, #12]
   1cfac:	ldr	r1, [r3, #72]	; 0x48
   1cfb0:	mov	r4, r0
   1cfb4:	mov	r0, #0
   1cfb8:	bl	27f14 <__assert_fail@plt+0x15828>
   1cfbc:	mov	r2, r4
   1cfc0:	mov	r1, #0
   1cfc4:	mov	r3, r0
   1cfc8:	mov	r0, #1
   1cfcc:	bl	122c0 <error@plt>
   1cfd0:	mov	r6, #0
   1cfd4:	mov	r3, #1
   1cfd8:	ldr	r8, [pc, #232]	; 1d0c8 <__assert_fail@plt+0xa9dc>
   1cfdc:	b	1cf64 <__assert_fail@plt+0xa878>
   1cfe0:	mov	r4, #0
   1cfe4:	mov	r3, sl
   1cfe8:	mov	r2, r4
   1cfec:	mov	r1, r4
   1cff0:	str	r4, [sp]
   1cff4:	mov	r0, r4
   1cff8:	bl	234c4 <__assert_fail@plt+0x10dd8>
   1cffc:	mov	r3, sl
   1d000:	mov	r2, r4
   1d004:	mov	r1, #1
   1d008:	str	r4, [sp]
   1d00c:	mov	fp, r0
   1d010:	str	r0, [sp, #16]
   1d014:	mov	r0, r4
   1d018:	bl	234c4 <__assert_fail@plt+0x10dd8>
   1d01c:	mov	r5, r0
   1d020:	str	r0, [sp, #20]
   1d024:	mov	r0, sl
   1d028:	bl	2a01c <__assert_fail@plt+0x17930>
   1d02c:	ldr	r3, [sp, #12]
   1d030:	cmp	r5, r4
   1d034:	cmpeq	fp, r4
   1d038:	moveq	r5, #1
   1d03c:	ldrb	r3, [r3]
   1d040:	movne	r5, #0
   1d044:	cmp	r3, #47	; 0x2f
   1d048:	movne	r5, #0
   1d04c:	andeq	r5, r5, #1
   1d050:	cmp	r5, r4
   1d054:	beq	1d084 <__assert_fail@plt+0xa998>
   1d058:	mov	r2, #5
   1d05c:	ldr	r1, [pc, #104]	; 1d0cc <__assert_fail@plt+0xa9e0>
   1d060:	mov	r0, r4
   1d064:	bl	1217c <dcgettext@plt>
   1d068:	ldr	r3, [sp, #12]
   1d06c:	mov	r1, r4
   1d070:	ldr	r8, [pc, #88]	; 1d0d0 <__assert_fail@plt+0xa9e4>
   1d074:	mov	r6, r4
   1d078:	mov	r2, r0
   1d07c:	mov	r0, r4
   1d080:	bl	122c0 <error@plt>
   1d084:	ldr	r1, [sp, #12]
   1d088:	mov	r0, r9
   1d08c:	bl	1750c <__assert_fail@plt+0x4e20>
   1d090:	add	r2, sp, #16
   1d094:	mov	r3, r0
   1d098:	str	r8, [r0, #28]
   1d09c:	str	r6, [r0, #40]	; 0x28
   1d0a0:	ldm	r2!, {r0, r1}
   1d0a4:	str	r0, [r3, #44]	; 0x2c
   1d0a8:	str	r1, [r3, #48]	; 0x30
   1d0ac:	mov	r0, r7
   1d0b0:	add	sp, sp, #28
   1d0b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0b8:			; <UNDEFINED> instruction: 0x3e99999a
   1d0bc:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d0c0:	strdeq	sp, [r3], -sp	; <UNPREDICTABLE>
   1d0c4:	andeq	r0, r5, r4, lsl #29
   1d0c8:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d0cc:	andeq	sp, r3, sp, lsl #6
   1d0d0:	svccc	0x007fa440
   1d0d4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d0d8:	mov	r4, r2
   1d0dc:	ldr	r6, [r2]
   1d0e0:	mov	r7, r0
   1d0e4:	add	r2, sp, #4
   1d0e8:	mov	r0, r1
   1d0ec:	mov	r1, r4
   1d0f0:	bl	1bd1c <__assert_fail@plt+0x9630>
   1d0f4:	subs	r5, r0, #0
   1d0f8:	beq	1d148 <__assert_fail@plt+0xaa5c>
   1d0fc:	bl	1b4d4 <__assert_fail@plt+0x8de8>
   1d100:	ldr	r2, [sp, #4]
   1d104:	ldr	r1, [pc, #72]	; 1d154 <__assert_fail@plt+0xaa68>
   1d108:	ldr	r0, [pc, #72]	; 1d158 <__assert_fail@plt+0xaa6c>
   1d10c:	bl	1b72c <__assert_fail@plt+0x9040>
   1d110:	subs	r5, r0, #0
   1d114:	streq	r6, [r4]
   1d118:	beq	1d148 <__assert_fail@plt+0xaa5c>
   1d11c:	ldr	r1, [sp, #4]
   1d120:	mov	r0, r7
   1d124:	bl	1750c <__assert_fail@plt+0x4e20>
   1d128:	mov	r1, #0
   1d12c:	mov	r4, r0
   1d130:	strb	r1, [r0, #19]
   1d134:	strb	r1, [r0, #18]
   1d138:	ldr	r0, [sp, #4]
   1d13c:	str	r0, [r4, #40]	; 0x28
   1d140:	bl	1b568 <__assert_fail@plt+0x8e7c>
   1d144:	vstr	s0, [r4, #28]
   1d148:	mov	r0, r5
   1d14c:	add	sp, sp, #12
   1d150:	pop	{r4, r5, r6, r7, pc}
   1d154:	andeq	sp, r3, pc, ror #7
   1d158:	strdeq	sp, [r3], -sl
   1d15c:	push	{r0, r1, r4, r5, r6, lr}
   1d160:	mov	r5, r1
   1d164:	mov	r6, r2
   1d168:	mov	r4, r0
   1d16c:	bl	1b4d4 <__assert_fail@plt+0x8de8>
   1d170:	add	r2, sp, #4
   1d174:	mov	r1, r6
   1d178:	mov	r0, r5
   1d17c:	bl	1bd1c <__assert_fail@plt+0x9630>
   1d180:	cmp	r0, #0
   1d184:	bne	1d198 <__assert_fail@plt+0xaaac>
   1d188:	mov	r5, #0
   1d18c:	mov	r0, r5
   1d190:	add	sp, sp, #8
   1d194:	pop	{r4, r5, r6, pc}
   1d198:	ldr	r2, [sp, #4]
   1d19c:	ldr	r1, [pc, #60]	; 1d1e0 <__assert_fail@plt+0xaaf4>
   1d1a0:	ldr	r0, [pc, #60]	; 1d1e4 <__assert_fail@plt+0xaaf8>
   1d1a4:	bl	1b72c <__assert_fail@plt+0x9040>
   1d1a8:	subs	r5, r0, #0
   1d1ac:	beq	1d188 <__assert_fail@plt+0xaa9c>
   1d1b0:	ldr	r1, [sp, #4]
   1d1b4:	mov	r0, r4
   1d1b8:	bl	1750c <__assert_fail@plt+0x4e20>
   1d1bc:	mov	r1, #0
   1d1c0:	mov	r4, r0
   1d1c4:	strb	r1, [r0, #19]
   1d1c8:	strb	r1, [r0, #18]
   1d1cc:	ldr	r0, [sp, #4]
   1d1d0:	str	r0, [r4, #40]	; 0x28
   1d1d4:	bl	1b568 <__assert_fail@plt+0x8e7c>
   1d1d8:	vstr	s0, [r4, #28]
   1d1dc:	b	1d18c <__assert_fail@plt+0xaaa0>
   1d1e0:	andeq	sp, r3, r0, lsl #8
   1d1e4:	andeq	sp, r3, ip, lsl #8
   1d1e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   1d1ec:	sub	sp, sp, #20
   1d1f0:	mov	r9, r0
   1d1f4:	mov	r0, r1
   1d1f8:	mov	r1, r2
   1d1fc:	add	r2, sp, #12
   1d200:	bl	1bd1c <__assert_fail@plt+0x9630>
   1d204:	subs	r8, r0, #0
   1d208:	beq	1d28c <__assert_fail@plt+0xaba0>
   1d20c:	ldr	r0, [sp, #12]
   1d210:	bl	126d4 <getgrnam@plt>
   1d214:	mov	r4, r0
   1d218:	bl	11f90 <endgrent@plt>
   1d21c:	cmp	r4, #0
   1d220:	ldrne	r4, [r4, #8]
   1d224:	bne	1d260 <__assert_fail@plt+0xab74>
   1d228:	ldr	r7, [sp, #12]
   1d22c:	ldr	r1, [pc, #280]	; 1d34c <__assert_fail@plt+0xac60>
   1d230:	mov	r0, r7
   1d234:	bl	126e0 <strspn@plt>
   1d238:	ldr	r6, [pc, #272]	; 1d350 <__assert_fail@plt+0xac64>
   1d23c:	subs	r5, r0, #0
   1d240:	beq	1d2ec <__assert_fail@plt+0xac00>
   1d244:	ldrb	r3, [r7, r5]
   1d248:	cmp	r3, #0
   1d24c:	bne	1d298 <__assert_fail@plt+0xabac>
   1d250:	ldr	r1, [r6, #72]	; 0x48
   1d254:	mov	r0, r7
   1d258:	bl	1f654 <__assert_fail@plt+0xcf68>
   1d25c:	mov	r4, r0
   1d260:	ldr	r1, [sp, #12]
   1d264:	mov	r0, r9
   1d268:	bl	1750c <__assert_fail@plt+0x4e20>
   1d26c:	vldr	s14, [pc, #208]	; 1d344 <__assert_fail@plt+0xac58>
   1d270:	vldr	s15, [pc, #208]	; 1d348 <__assert_fail@plt+0xac5c>
   1d274:	ldrd	r2, [r0, #48]	; 0x30
   1d278:	str	r4, [r0, #40]	; 0x28
   1d27c:	cmp	r3, #0
   1d280:	cmpeq	r2, #100	; 0x64
   1d284:	vmovcs.f32	s15, s14
   1d288:	vstr	s15, [r0, #28]
   1d28c:	mov	r0, r8
   1d290:	add	sp, sp, #20
   1d294:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d298:	mov	r2, #5
   1d29c:	ldr	r1, [pc, #176]	; 1d354 <__assert_fail@plt+0xac68>
   1d2a0:	mov	r0, r4
   1d2a4:	bl	1217c <dcgettext@plt>
   1d2a8:	ldr	r2, [sp, #12]
   1d2ac:	ldr	r1, [r6, #72]	; 0x48
   1d2b0:	mov	r7, r0
   1d2b4:	mov	r0, r4
   1d2b8:	bl	27f14 <__assert_fail@plt+0x15828>
   1d2bc:	ldr	r2, [sp, #12]
   1d2c0:	ldr	r1, [r6, #72]	; 0x48
   1d2c4:	add	r2, r2, r5
   1d2c8:	mov	r8, r0
   1d2cc:	mov	r0, #1
   1d2d0:	bl	27f14 <__assert_fail@plt+0x15828>
   1d2d4:	mov	r3, r8
   1d2d8:	mov	r2, r7
   1d2dc:	mov	r1, r4
   1d2e0:	str	r0, [sp]
   1d2e4:	mov	r0, #1
   1d2e8:	bl	122c0 <error@plt>
   1d2ec:	ldrb	r4, [r7]
   1d2f0:	mov	r2, #5
   1d2f4:	cmp	r4, #0
   1d2f8:	beq	1d32c <__assert_fail@plt+0xac40>
   1d2fc:	ldr	r1, [pc, #84]	; 1d358 <__assert_fail@plt+0xac6c>
   1d300:	bl	1217c <dcgettext@plt>
   1d304:	ldr	r2, [sp, #12]
   1d308:	ldr	r1, [r6, #72]	; 0x48
   1d30c:	mov	r4, r0
   1d310:	mov	r0, r5
   1d314:	bl	27f14 <__assert_fail@plt+0x15828>
   1d318:	mov	r2, r4
   1d31c:	mov	r1, r5
   1d320:	mov	r3, r0
   1d324:	mov	r0, #1
   1d328:	bl	122c0 <error@plt>
   1d32c:	ldr	r1, [pc, #40]	; 1d35c <__assert_fail@plt+0xac70>
   1d330:	bl	1217c <dcgettext@plt>
   1d334:	mov	r1, r4
   1d338:	mov	r2, r0
   1d33c:	mov	r0, #1
   1d340:	bl	122c0 <error@plt>
   1d344:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d348:	svccc	0x007d70a4
   1d34c:	andeq	sp, r3, r5, asr r1
   1d350:	andeq	r0, r5, r4, lsl #29
   1d354:	andeq	sp, r3, r3, lsl r4
   1d358:	muleq	r3, r0, r4
   1d35c:			; <UNDEFINED> instruction: 0x0003d4b8
   1d360:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d364:	mov	r7, r2
   1d368:	sub	sp, sp, #52	; 0x34
   1d36c:	mov	r4, r1
   1d370:	mov	r2, #5
   1d374:	ldr	r1, [pc, #444]	; 1d538 <__assert_fail@plt+0xae4c>
   1d378:	mov	r9, r0
   1d37c:	mov	r0, #0
   1d380:	bl	1217c <dcgettext@plt>
   1d384:	add	r2, sp, #16
   1d388:	mov	r1, r7
   1d38c:	ldr	sl, [r7]
   1d390:	mov	fp, r0
   1d394:	mov	r0, r4
   1d398:	bl	1bd1c <__assert_fail@plt+0x9630>
   1d39c:	subs	r8, r0, #0
   1d3a0:	beq	1d50c <__assert_fail@plt+0xae20>
   1d3a4:	ldr	r5, [pc, #400]	; 1d53c <__assert_fail@plt+0xae50>
   1d3a8:	add	r8, sp, #24
   1d3ac:	add	r3, r5, #28
   1d3b0:	ldr	r6, [sp, #16]
   1d3b4:	ldm	r3, {r0, r1}
   1d3b8:	stm	r8, {r0, r1}
   1d3bc:	mov	r4, r0
   1d3c0:	add	r1, sp, #12
   1d3c4:	add	r0, sp, #16
   1d3c8:	bl	1a2a8 <__assert_fail@plt+0x7bbc>
   1d3cc:	cmp	r0, #0
   1d3d0:	beq	1d3e8 <__assert_fail@plt+0xacfc>
   1d3d4:	ldr	r3, [sp, #12]
   1d3d8:	cmp	r3, #1
   1d3dc:	addeq	r4, r4, #86016	; 0x15000
   1d3e0:	addeq	r4, r4, #380	; 0x17c
   1d3e4:	addeq	r4, r4, #3
   1d3e8:	str	r4, [sp, #24]
   1d3ec:	add	r4, sp, #32
   1d3f0:	str	fp, [sp]
   1d3f4:	vldr	d0, [pc, #308]	; 1d530 <__assert_fail@plt+0xae44>
   1d3f8:	ldm	r8, {r2, r3}
   1d3fc:	mov	r1, r4
   1d400:	mov	r0, r6
   1d404:	str	r6, [sp, #16]
   1d408:	bl	1a564 <__assert_fail@plt+0x7e78>
   1d40c:	subs	r8, r0, #0
   1d410:	streq	sl, [r7]
   1d414:	beq	1d50c <__assert_fail@plt+0xae20>
   1d418:	mov	r1, r6
   1d41c:	mov	r0, r9
   1d420:	bl	1750c <__assert_fail@plt+0x4e20>
   1d424:	add	ip, r0, #40	; 0x28
   1d428:	mov	r6, r0
   1d42c:	ldm	r4, {r0, r1, r2, r3}
   1d430:	stm	ip, {r0, r1, r2, r3}
   1d434:	ldr	r0, [sp, #40]	; 0x28
   1d438:	bl	1b7dc <__assert_fail@plt+0x90f0>
   1d43c:	ldr	r3, [r5, #44]	; 0x2c
   1d440:	tst	r3, #1
   1d444:	vstr	s0, [r6, #28]
   1d448:	beq	1d50c <__assert_fail@plt+0xae20>
   1d44c:	ldr	r5, [pc, #236]	; 1d540 <__assert_fail@plt+0xae54>
   1d450:	ldr	r2, [r6, #4]
   1d454:	ldr	r1, [pc, #232]	; 1d544 <__assert_fail@plt+0xae58>
   1d458:	ldr	r0, [r5]
   1d45c:	bl	123f8 <fprintf@plt>
   1d460:	ldr	r3, [sp, #36]	; 0x24
   1d464:	ldr	r0, [r5]
   1d468:	cmp	r3, #0
   1d46c:	beq	1d518 <__assert_fail@plt+0xae2c>
   1d470:	cmp	r3, #1
   1d474:	beq	1d524 <__assert_fail@plt+0xae38>
   1d478:	cmp	r3, #2
   1d47c:	ldr	r1, [pc, #196]	; 1d548 <__assert_fail@plt+0xae5c>
   1d480:	ldr	r3, [pc, #196]	; 1d54c <__assert_fail@plt+0xae60>
   1d484:	ldr	r2, [pc, #196]	; 1d550 <__assert_fail@plt+0xae64>
   1d488:	movne	r2, r3
   1d48c:	ldr	r3, [pc, #192]	; 1d554 <__assert_fail@plt+0xae68>
   1d490:	movne	r3, r1
   1d494:	ldr	r1, [pc, #188]	; 1d558 <__assert_fail@plt+0xae6c>
   1d498:	bl	123f8 <fprintf@plt>
   1d49c:	add	r7, sp, #48	; 0x30
   1d4a0:	ldr	r4, [r6, #48]	; 0x30
   1d4a4:	ldr	r9, [r5]
   1d4a8:	str	r4, [r7, #-28]!	; 0xffffffe4
   1d4ac:	mov	r0, r7
   1d4b0:	bl	12170 <ctime@plt>
   1d4b4:	asr	r3, r4, #31
   1d4b8:	mov	r2, r4
   1d4bc:	ldr	r1, [pc, #152]	; 1d55c <__assert_fail@plt+0xae70>
   1d4c0:	str	r0, [sp]
   1d4c4:	mov	r0, r9
   1d4c8:	bl	123f8 <fprintf@plt>
   1d4cc:	ldr	r3, [sp, #36]	; 0x24
   1d4d0:	cmp	r3, #2
   1d4d4:	bne	1d50c <__assert_fail@plt+0xae20>
   1d4d8:	ldr	r4, [r6, #48]	; 0x30
   1d4dc:	mov	r0, r7
   1d4e0:	add	r4, r4, #86016	; 0x15000
   1d4e4:	add	r4, r4, #384	; 0x180
   1d4e8:	ldr	r5, [r5]
   1d4ec:	str	r4, [sp, #20]
   1d4f0:	bl	12170 <ctime@plt>
   1d4f4:	mov	r2, r4
   1d4f8:	asr	r3, r4, #31
   1d4fc:	ldr	r1, [pc, #92]	; 1d560 <__assert_fail@plt+0xae74>
   1d500:	str	r0, [sp]
   1d504:	mov	r0, r5
   1d508:	bl	123f8 <fprintf@plt>
   1d50c:	mov	r0, r8
   1d510:	add	sp, sp, #52	; 0x34
   1d514:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d518:	ldr	r2, [pc, #68]	; 1d564 <__assert_fail@plt+0xae78>
   1d51c:	ldr	r3, [pc, #68]	; 1d568 <__assert_fail@plt+0xae7c>
   1d520:	b	1d494 <__assert_fail@plt+0xada8>
   1d524:	ldr	r2, [pc, #64]	; 1d56c <__assert_fail@plt+0xae80>
   1d528:	ldr	r3, [pc, #64]	; 1d570 <__assert_fail@plt+0xae84>
   1d52c:	b	1d494 <__assert_fail@plt+0xada8>
   1d530:	andeq	r0, r0, r0
   1d534:	rscsmi	r1, r5, r0, lsl #16
   1d538:	andeq	sp, r3, ip, ror #3
   1d53c:	andeq	r0, r5, r4, lsl #29
   1d540:	andeq	r0, r5, r0, ror #10
   1d544:	andeq	sp, r3, r6, lsr #5
   1d548:	andeq	sp, r3, r3, lsr #5
   1d54c:	andeq	sp, r3, r4, lsr #5
   1d550:	muleq	r3, sp, r2
   1d554:	strdeq	sp, [r3], -r0
   1d558:			; <UNDEFINED> instruction: 0x0003d2b4
   1d55c:	andeq	sp, r3, r7, lsl #10
   1d560:	strdeq	sp, [r3], -r3
   1d564:	muleq	r3, r7, r2
   1d568:	muleq	r3, sl, r2
   1d56c:	andeq	sp, r3, r7, lsl ip
   1d570:	muleq	r3, r4, r2
   1d574:	push	{r0, r1, r4, r5, r6, lr}
   1d578:	mov	r4, r0
   1d57c:	mov	r0, r1
   1d580:	mov	r1, r2
   1d584:	add	r2, sp, #4
   1d588:	bl	1bd1c <__assert_fail@plt+0x9630>
   1d58c:	subs	r6, r0, #0
   1d590:	beq	1d5cc <__assert_fail@plt+0xaee0>
   1d594:	mov	r0, r4
   1d598:	ldr	r5, [sp, #4]
   1d59c:	bl	17544 <__assert_fail@plt+0x4e58>
   1d5a0:	cmp	r5, #0
   1d5a4:	mov	r4, r0
   1d5a8:	add	r1, r0, #40	; 0x28
   1d5ac:	movne	r0, r5
   1d5b0:	ldreq	r0, [pc, #32]	; 1d5d8 <__assert_fail@plt+0xaeec>
   1d5b4:	bl	1a98c <__assert_fail@plt+0x82a0>
   1d5b8:	mov	r3, #1
   1d5bc:	strb	r3, [r4, #17]
   1d5c0:	strb	r3, [r4, #16]
   1d5c4:	mov	r3, #1065353216	; 0x3f800000
   1d5c8:	str	r3, [r4, #28]
   1d5cc:	mov	r0, r6
   1d5d0:	add	sp, sp, #8
   1d5d4:	pop	{r4, r5, r6, pc}
   1d5d8:	andeq	ip, r3, ip, lsr r8
   1d5dc:	cmp	r1, #0
   1d5e0:	push	{r4, r5, r6, r7, lr}
   1d5e4:	moveq	r0, r1
   1d5e8:	sub	sp, sp, #28
   1d5ec:	ldr	r6, [r2]
   1d5f0:	beq	1d638 <__assert_fail@plt+0xaf4c>
   1d5f4:	ldr	r4, [r1, r6, lsl #2]
   1d5f8:	cmp	r4, #0
   1d5fc:	moveq	r0, r4
   1d600:	beq	1d638 <__assert_fail@plt+0xaf4c>
   1d604:	add	r3, r6, #1
   1d608:	str	r3, [r2]
   1d60c:	mov	r7, r0
   1d610:	add	r1, sp, #4
   1d614:	ldr	r0, [pc, #36]	; 1d640 <__assert_fail@plt+0xaf54>
   1d618:	mov	r5, r2
   1d61c:	bl	1a98c <__assert_fail@plt+0x82a0>
   1d620:	mov	r2, r4
   1d624:	mov	r1, r7
   1d628:	add	r0, sp, #4
   1d62c:	bl	19b9c <__assert_fail@plt+0x74b0>
   1d630:	cmp	r0, #0
   1d634:	streq	r6, [r5]
   1d638:	add	sp, sp, #28
   1d63c:	pop	{r4, r5, r6, r7, pc}
   1d640:	andeq	ip, r3, ip, lsr r8
   1d644:	push	{r4, lr}
   1d648:	mov	r4, r0
   1d64c:	ldr	r1, [pc, #104]	; 1d6bc <__assert_fail@plt+0xafd0>
   1d650:	ldr	r0, [pc, #104]	; 1d6c0 <__assert_fail@plt+0xafd4>
   1d654:	mov	r3, #0
   1d658:	cmp	r4, #0
   1d65c:	bne	1d69c <__assert_fail@plt+0xafb0>
   1d660:	and	r3, r3, #3
   1d664:	cmp	r3, #3
   1d668:	popne	{r4, pc}
   1d66c:	ldr	r3, [pc, #80]	; 1d6c4 <__assert_fail@plt+0xafd8>
   1d670:	ldrb	r3, [r3, #1]
   1d674:	cmp	r3, #0
   1d678:	popne	{r4, pc}
   1d67c:	mov	r2, #5
   1d680:	ldr	r1, [pc, #64]	; 1d6c8 <__assert_fail@plt+0xafdc>
   1d684:	mov	r0, r4
   1d688:	bl	1217c <dcgettext@plt>
   1d68c:	mov	r1, r4
   1d690:	mov	r2, r0
   1d694:	mov	r0, #1
   1d698:	bl	122c0 <error@plt>
   1d69c:	ldr	r2, [r4]
   1d6a0:	cmp	r2, r1
   1d6a4:	orreq	r3, r3, #1
   1d6a8:	beq	1d6b4 <__assert_fail@plt+0xafc8>
   1d6ac:	cmp	r2, r0
   1d6b0:	orreq	r3, r3, #2
   1d6b4:	ldr	r4, [r4, #152]	; 0x98
   1d6b8:	b	1d658 <__assert_fail@plt+0xaf6c>
   1d6bc:	andeq	r3, r1, r0, lsr ip
   1d6c0:	andeq	r3, r1, r0, asr r7
   1d6c4:	andeq	r0, r5, r4, lsl #29
   1d6c8:	andeq	sp, r3, pc, lsl #10
   1d6cc:	cmp	r0, #1
   1d6d0:	ldr	r3, [pc, #108]	; 1d744 <__assert_fail@plt+0xb058>
   1d6d4:	beq	1d6fc <__assert_fail@plt+0xb010>
   1d6d8:	bcc	1d714 <__assert_fail@plt+0xb028>
   1d6dc:	cmp	r0, #2
   1d6e0:	beq	1d728 <__assert_fail@plt+0xb03c>
   1d6e4:	ldr	r2, [r3, #44]	; 0x2c
   1d6e8:	str	r0, [r3, #48]	; 0x30
   1d6ec:	tst	r2, #2
   1d6f0:	ldrne	r2, [pc, #80]	; 1d748 <__assert_fail@plt+0xb05c>
   1d6f4:	strne	r2, [r3, #52]	; 0x34
   1d6f8:	bx	lr
   1d6fc:	ldr	r2, [pc, #72]	; 1d74c <__assert_fail@plt+0xb060>
   1d700:	strb	r0, [r3, #12]
   1d704:	str	r2, [r3, #52]	; 0x34
   1d708:	ldr	r2, [pc, #64]	; 1d750 <__assert_fail@plt+0xb064>
   1d70c:	str	r2, [r3, #64]	; 0x40
   1d710:	b	1d6e4 <__assert_fail@plt+0xaff8>
   1d714:	ldr	r2, [pc, #56]	; 1d754 <__assert_fail@plt+0xb068>
   1d718:	str	r2, [r3, #52]	; 0x34
   1d71c:	ldr	r2, [pc, #52]	; 1d758 <__assert_fail@plt+0xb06c>
   1d720:	str	r2, [r3, #64]	; 0x40
   1d724:	b	1d6e4 <__assert_fail@plt+0xaff8>
   1d728:	ldr	r2, [pc, #44]	; 1d75c <__assert_fail@plt+0xb070>
   1d72c:	str	r2, [r3, #52]	; 0x34
   1d730:	ldr	r2, [pc, #40]	; 1d760 <__assert_fail@plt+0xb074>
   1d734:	str	r2, [r3, #64]	; 0x40
   1d738:	mov	r2, #1
   1d73c:	strb	r2, [r3, #12]
   1d740:	b	1d6e4 <__assert_fail@plt+0xaff8>
   1d744:	andeq	r0, r5, r4, lsl #29
   1d748:	andeq	r7, r1, ip, ror #19
   1d74c:	andeq	r7, r1, ip, lsr #18
   1d750:	andeq	fp, r1, r0, lsr #6
   1d754:	muleq	r1, r8, r9
   1d758:	strdeq	sl, [r1], -r4
   1d75c:	andeq	r7, r1, r0, lsr #17
   1d760:	andeq	fp, r1, r0, asr r3
   1d764:	push	{r4, lr}
   1d768:	mov	r0, #1
   1d76c:	mov	r4, r1
   1d770:	mov	r1, r2
   1d774:	bl	1d6cc <__assert_fail@plt+0xafe0>
   1d778:	mov	r0, r4
   1d77c:	pop	{r4, lr}
   1d780:	b	1b398 <__assert_fail@plt+0x8cac>
   1d784:	ldr	r3, [pc, #8]	; 1d794 <__assert_fail@plt+0xb0a8>
   1d788:	mov	r2, #0
   1d78c:	str	r2, [r3]
   1d790:	bx	lr
   1d794:	andeq	r0, r5, r8, ror #25
   1d798:	bx	lr
   1d79c:	push	{r4, r5, r6, r7, r8, lr}
   1d7a0:	mov	r1, r0
   1d7a4:	mov	r4, r0
   1d7a8:	mov	r2, #6
   1d7ac:	ldr	r0, [pc, #116]	; 1d828 <__assert_fail@plt+0xb13c>
   1d7b0:	bl	1268c <strncmp@plt>
   1d7b4:	cmp	r0, #0
   1d7b8:	bne	1d7d0 <__assert_fail@plt+0xb0e4>
   1d7bc:	mov	r0, r4
   1d7c0:	bl	123bc <strlen@plt>
   1d7c4:	cmp	r0, #8
   1d7c8:	ldreq	r1, [pc, #92]	; 1d82c <__assert_fail@plt+0xb140>
   1d7cc:	beq	1d814 <__assert_fail@plt+0xb128>
   1d7d0:	ldrb	r3, [r4]
   1d7d4:	ldr	r5, [pc, #84]	; 1d830 <__assert_fail@plt+0xb144>
   1d7d8:	mov	r6, #0
   1d7dc:	cmp	r3, #45	; 0x2d
   1d7e0:	addeq	r7, r4, #1
   1d7e4:	movne	r7, r4
   1d7e8:	mov	r8, r5
   1d7ec:	ldr	r0, [r5, #4]
   1d7f0:	cmp	r0, #0
   1d7f4:	bne	1d7fc <__assert_fail@plt+0xb110>
   1d7f8:	pop	{r4, r5, r6, r7, r8, pc}
   1d7fc:	mov	r1, r7
   1d800:	bl	11ffc <strcmp@plt>
   1d804:	add	r5, r5, #16
   1d808:	cmp	r0, #0
   1d80c:	bne	1d820 <__assert_fail@plt+0xb134>
   1d810:	add	r1, r8, r6, lsl #4
   1d814:	mov	r0, r4
   1d818:	pop	{r4, r5, r6, r7, r8, lr}
   1d81c:	b	1b1fc <__assert_fail@plt+0x8b10>
   1d820:	add	r6, r6, #1
   1d824:	b	1d7ec <__assert_fail@plt+0xb100>
   1d828:	andeq	ip, r3, r3, asr #27
   1d82c:	andeq	ip, r3, r0, lsr #14
   1d830:	muleq	r3, r0, r1
   1d834:	push	{r4, lr}
   1d838:	ldr	r0, [pc, #40]	; 1d868 <__assert_fail@plt+0xb17c>
   1d83c:	bl	1d79c <__assert_fail@plt+0xb0b0>
   1d840:	bl	17544 <__assert_fail@plt+0x4e58>
   1d844:	mov	r3, #0
   1d848:	strb	r3, [r0, #19]
   1d84c:	strb	r3, [r0, #18]
   1d850:	strb	r3, [r0, #17]
   1d854:	strb	r3, [r0, #16]
   1d858:	mov	r3, #0
   1d85c:	str	r3, [r0, #28]
   1d860:	mov	r0, #1
   1d864:	pop	{r4, pc}
   1d868:			; <UNDEFINED> instruction: 0x0003d5bb
   1d86c:	b	1d834 <__assert_fail@plt+0xb148>
   1d870:	push	{r4, r5, r6, lr}
   1d874:	sub	sp, sp, #112	; 0x70
   1d878:	mov	r6, r0
   1d87c:	mov	r0, r1
   1d880:	mov	r1, r2
   1d884:	add	r2, sp, #4
   1d888:	bl	1bd1c <__assert_fail@plt+0x9630>
   1d88c:	subs	r4, r0, #0
   1d890:	beq	1d8d8 <__assert_fail@plt+0xb1ec>
   1d894:	ldr	r5, [pc, #188]	; 1d958 <__assert_fail@plt+0xb26c>
   1d898:	ldrh	r3, [r5, #68]	; 0x44
   1d89c:	cmp	r3, #1
   1d8a0:	bhi	1d8e4 <__assert_fail@plt+0xb1f8>
   1d8a4:	ldr	r1, [sp, #4]
   1d8a8:	mov	r0, r6
   1d8ac:	bl	1750c <__assert_fail@plt+0x4e20>
   1d8b0:	ldr	r6, [sp, #4]
   1d8b4:	add	r1, sp, #8
   1d8b8:	str	r6, [r0, #40]	; 0x28
   1d8bc:	mov	r5, r0
   1d8c0:	ldr	r0, [pc, #148]	; 1d95c <__assert_fail@plt+0xb270>
   1d8c4:	bl	39b84 <__assert_fail@plt+0x27498>
   1d8c8:	cmp	r0, #0
   1d8cc:	beq	1d920 <__assert_fail@plt+0xb234>
   1d8d0:	vldr	s15, [pc, #116]	; 1d94c <__assert_fail@plt+0xb260>
   1d8d4:	vstr	s15, [r5, #28]
   1d8d8:	mov	r0, r4
   1d8dc:	add	sp, sp, #112	; 0x70
   1d8e0:	pop	{r4, r5, r6, pc}
   1d8e4:	ldr	r0, [sp, #4]
   1d8e8:	bl	1a158 <__assert_fail@plt+0x7a6c>
   1d8ec:	cmp	r0, #0
   1d8f0:	bne	1d8a4 <__assert_fail@plt+0xb1b8>
   1d8f4:	ldr	r3, [r5, #44]	; 0x2c
   1d8f8:	tst	r3, #8
   1d8fc:	beq	1d914 <__assert_fail@plt+0xb228>
   1d900:	ldr	r3, [pc, #88]	; 1d960 <__assert_fail@plt+0xb274>
   1d904:	ldr	r2, [sp, #4]
   1d908:	ldr	r1, [pc, #84]	; 1d964 <__assert_fail@plt+0xb278>
   1d90c:	ldr	r0, [r3]
   1d910:	bl	123f8 <fprintf@plt>
   1d914:	bl	1d834 <__assert_fail@plt+0xb148>
   1d918:	mov	r4, r0
   1d91c:	b	1d8d8 <__assert_fail@plt+0xb1ec>
   1d920:	ldr	r1, [pc, #52]	; 1d95c <__assert_fail@plt+0xb270>
   1d924:	add	r0, sp, #8
   1d928:	bl	1a030 <__assert_fail@plt+0x7944>
   1d92c:	mov	r1, r0
   1d930:	mov	r0, r6
   1d934:	bl	11ffc <strcmp@plt>
   1d938:	vldr	s14, [pc, #16]	; 1d950 <__assert_fail@plt+0xb264>
   1d93c:	vldr	s15, [pc, #16]	; 1d954 <__assert_fail@plt+0xb268>
   1d940:	cmp	r0, #0
   1d944:	vmovne.f32	s15, s14
   1d948:	b	1d8d4 <__assert_fail@plt+0xb1e8>
   1d94c:	svccc	0x00800000
   1d950:			; <UNDEFINED> instruction: 0x3e99999a
   1d954:	svccc	0x00333333
   1d958:	andeq	r0, r5, r4, lsl #29
   1d95c:	andeq	sl, r3, lr, lsr r4
   1d960:	andeq	r0, r5, r0, ror #10
   1d964:	andeq	sp, r3, r1, asr #11
   1d968:	mov	r0, #0
   1d96c:	bx	lr
   1d970:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1d974:	mov	r6, r0
   1d978:	mov	r5, r1
   1d97c:	bl	122fc <getenv@plt>
   1d980:	subs	r3, r0, #0
   1d984:	beq	1d9ec <__assert_fail@plt+0xb300>
   1d988:	mov	r4, #0
   1d98c:	str	r4, [sp]
   1d990:	add	r3, sp, #12
   1d994:	mov	r2, #10
   1d998:	add	r1, sp, #8
   1d99c:	bl	2931c <__assert_fail@plt+0x16c30>
   1d9a0:	cmp	r0, r4
   1d9a4:	bne	1d9c0 <__assert_fail@plt+0xb2d4>
   1d9a8:	ldr	r0, [sp, #12]
   1d9ac:	cmp	r0, r5
   1d9b0:	movcs	r0, #0
   1d9b4:	movcc	r0, #1
   1d9b8:	add	sp, sp, #16
   1d9bc:	pop	{r4, r5, r6, pc}
   1d9c0:	bl	12404 <__errno_location@plt>
   1d9c4:	mov	r2, #5
   1d9c8:	ldr	r1, [pc, #36]	; 1d9f4 <__assert_fail@plt+0xb308>
   1d9cc:	ldr	r5, [r0]
   1d9d0:	mov	r0, r4
   1d9d4:	bl	1217c <dcgettext@plt>
   1d9d8:	mov	r3, r6
   1d9dc:	mov	r1, r5
   1d9e0:	mov	r2, r0
   1d9e4:	mov	r0, #1
   1d9e8:	bl	122c0 <error@plt>
   1d9ec:	mov	r0, r3
   1d9f0:	b	1d9b8 <__assert_fail@plt+0xb2cc>
   1d9f4:	andeq	sp, r3, lr, ror #14
   1d9f8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9fc:	subs	r7, r2, #0
   1da00:	ldr	sl, [sp, #40]	; 0x28
   1da04:	ldr	r9, [sp, #44]	; 0x2c
   1da08:	ldr	r6, [sp, #48]	; 0x30
   1da0c:	bne	1da24 <__assert_fail@plt+0xb338>
   1da10:	ldr	r3, [pc, #528]	; 1dc28 <__assert_fail@plt+0xb53c>
   1da14:	ldr	r2, [pc, #528]	; 1dc2c <__assert_fail@plt+0xb540>
   1da18:	ldr	r1, [pc, #528]	; 1dc30 <__assert_fail@plt+0xb544>
   1da1c:	ldr	r0, [pc, #528]	; 1dc34 <__assert_fail@plt+0xb548>
   1da20:	bl	126ec <__assert_fail@plt>
   1da24:	ldr	fp, [pc, #524]	; 1dc38 <__assert_fail@plt+0xb54c>
   1da28:	mov	r5, r0
   1da2c:	cmp	r7, fp
   1da30:	mov	r4, r1
   1da34:	mov	r8, r3
   1da38:	beq	1db14 <__assert_fail@plt+0xb428>
   1da3c:	ldr	r2, [r1, #16]
   1da40:	add	r3, r3, r9
   1da44:	add	r3, r3, r2
   1da48:	ldr	r2, [r0, #12]
   1da4c:	cmp	r3, r2
   1da50:	bls	1dad4 <__assert_fail@plt+0xb3e8>
   1da54:	cmp	r6, #0
   1da58:	bne	1da6c <__assert_fail@plt+0xb380>
   1da5c:	ldr	r2, [r1]
   1da60:	ldr	r3, [r0, #28]
   1da64:	cmp	r2, r3
   1da68:	bne	1da8c <__assert_fail@plt+0xb3a0>
   1da6c:	ldr	r1, [pc, #456]	; 1dc3c <__assert_fail@plt+0xb550>
   1da70:	mov	r2, #5
   1da74:	mov	r0, #0
   1da78:	bl	1217c <dcgettext@plt>
   1da7c:	mov	r1, #0
   1da80:	mov	r2, r0
   1da84:	mov	r0, #1
   1da88:	bl	122c0 <error@plt>
   1da8c:	ldr	r3, [r0, #24]
   1da90:	cmp	r3, #0
   1da94:	bne	1dabc <__assert_fail@plt+0xb3d0>
   1da98:	ldr	r3, [r0]
   1da9c:	cmp	r3, #0
   1daa0:	beq	1dac8 <__assert_fail@plt+0xb3dc>
   1daa4:	ldr	r3, [r0, #36]	; 0x24
   1daa8:	cmp	r3, #0
   1daac:	bne	1dabc <__assert_fail@plt+0xb3d0>
   1dab0:	ldr	r3, [r0, #40]	; 0x28
   1dab4:	cmp	r3, #0
   1dab8:	beq	1dac8 <__assert_fail@plt+0xb3dc>
   1dabc:	mov	r2, #5
   1dac0:	ldr	r1, [pc, #376]	; 1dc40 <__assert_fail@plt+0xb554>
   1dac4:	b	1da74 <__assert_fail@plt+0xb388>
   1dac8:	mov	r1, r4
   1dacc:	mov	r0, r5
   1dad0:	bl	1ddf8 <__assert_fail@plt+0xb70c>
   1dad4:	cmp	r6, #0
   1dad8:	ldr	r2, [r4]
   1dadc:	bne	1dafc <__assert_fail@plt+0xb410>
   1dae0:	ldr	r1, [r5, #40]	; 0x28
   1dae4:	cmp	r1, #0
   1dae8:	beq	1dafc <__assert_fail@plt+0xb410>
   1daec:	ldr	r3, [r5, #28]
   1daf0:	sub	r3, r2, r3
   1daf4:	cmp	r1, r3
   1daf8:	beq	1db08 <__assert_fail@plt+0xb41c>
   1dafc:	ldr	r3, [r5, #16]
   1db00:	cmp	r2, r3
   1db04:	bne	1db14 <__assert_fail@plt+0xb428>
   1db08:	mov	r1, r4
   1db0c:	mov	r0, r5
   1db10:	bl	1ddf8 <__assert_fail@plt+0xb70c>
   1db14:	cmp	r6, #0
   1db18:	moveq	r3, #1
   1db1c:	streq	r3, [r4, #28]
   1db20:	ldr	r1, [r4, #8]
   1db24:	ldr	r3, [r4]
   1db28:	cmp	r3, r1
   1db2c:	bcc	1db50 <__assert_fail@plt+0xb464>
   1db30:	ldr	r0, [r4, #4]
   1db34:	cmp	r0, #0
   1db38:	bne	1dc14 <__assert_fail@plt+0xb528>
   1db3c:	mov	r3, #64	; 0x40
   1db40:	str	r3, [r4, #8]
   1db44:	mov	r0, #256	; 0x100
   1db48:	bl	28d44 <__assert_fail@plt+0x16658>
   1db4c:	str	r0, [r4, #4]
   1db50:	ldr	r3, [r4]
   1db54:	ldr	r1, [r4, #4]
   1db58:	add	r2, r3, #1
   1db5c:	cmp	r7, fp
   1db60:	str	r2, [r4]
   1db64:	moveq	r2, #0
   1db68:	streq	r2, [r1, r3, lsl #2]
   1db6c:	beq	1dc04 <__assert_fail@plt+0xb518>
   1db70:	ldr	r0, [r4, #16]
   1db74:	ldr	r2, [r4, #12]
   1db78:	cmp	sl, #0
   1db7c:	add	r2, r2, r0
   1db80:	str	r2, [r1, r3, lsl #2]
   1db84:	beq	1dba4 <__assert_fail@plt+0xb4b8>
   1db88:	ldr	r3, [r4, #12]
   1db8c:	mov	r1, sl
   1db90:	add	r0, r3, r0
   1db94:	bl	12278 <strcpy@plt>
   1db98:	ldr	r3, [r4, #16]
   1db9c:	add	r9, r3, r9
   1dba0:	str	r9, [r4, #16]
   1dba4:	ldr	r3, [r4, #16]
   1dba8:	ldr	r0, [r4, #12]
   1dbac:	mov	r1, r7
   1dbb0:	add	r0, r0, r3
   1dbb4:	bl	12278 <strcpy@plt>
   1dbb8:	ldr	r3, [r4, #16]
   1dbbc:	cmp	r6, #0
   1dbc0:	add	r8, r3, r8
   1dbc4:	str	r8, [r4, #16]
   1dbc8:	ldr	r2, [r4]
   1dbcc:	bne	1dbec <__assert_fail@plt+0xb500>
   1dbd0:	ldr	r1, [r5, #40]	; 0x28
   1dbd4:	cmp	r1, #0
   1dbd8:	beq	1dbec <__assert_fail@plt+0xb500>
   1dbdc:	ldr	r3, [r5, #28]
   1dbe0:	sub	r3, r2, r3
   1dbe4:	cmp	r1, r3
   1dbe8:	beq	1dbf8 <__assert_fail@plt+0xb50c>
   1dbec:	ldr	r3, [r5, #16]
   1dbf0:	cmp	r2, r3
   1dbf4:	bne	1dc04 <__assert_fail@plt+0xb518>
   1dbf8:	mov	r1, r4
   1dbfc:	mov	r0, r5
   1dc00:	bl	1ddf8 <__assert_fail@plt+0xb70c>
   1dc04:	cmp	r6, #0
   1dc08:	ldrne	r3, [r4, #16]
   1dc0c:	strne	r3, [r4, #20]
   1dc10:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc14:	lsl	r3, r1, #1
   1dc18:	str	r3, [r4, #8]
   1dc1c:	lsl	r1, r1, #3
   1dc20:	bl	28d70 <__assert_fail@plt+0x16684>
   1dc24:	b	1db4c <__assert_fail@plt+0xb460>
   1dc28:	andeq	sp, r3, fp, lsr #14
   1dc2c:	andeq	r0, r0, r5, asr r1
   1dc30:	andeq	sp, r3, fp, lsr #15
   1dc34:			; <UNDEFINED> instruction: 0x0003d7b6
   1dc38:	andeq	sp, r3, r2, asr #15
   1dc3c:	andeq	sp, r3, lr, asr #15
   1dc40:	andeq	sp, r3, r9, lsl #16
   1dc44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc48:	sub	sp, sp, #36	; 0x24
   1dc4c:	mov	r5, r3
   1dc50:	ldr	r3, [sp, #72]	; 0x48
   1dc54:	ldr	r4, [pc, #404]	; 1ddf0 <__assert_fail@plt+0xb704>
   1dc58:	str	r3, [sp, #4]
   1dc5c:	ldr	r3, [sp, #76]	; 0x4c
   1dc60:	mov	r9, r0
   1dc64:	str	r3, [sp, #8]
   1dc68:	ldr	r3, [sp, #80]	; 0x50
   1dc6c:	ldr	r0, [r0, #12]
   1dc70:	str	r3, [sp, #24]
   1dc74:	ldr	r3, [sp, #84]	; 0x54
   1dc78:	str	r1, [sp, #20]
   1dc7c:	str	r3, [sp, #12]
   1dc80:	ldr	r3, [sp, #88]	; 0x58
   1dc84:	mov	r6, r2
   1dc88:	str	r3, [sp, #28]
   1dc8c:	ldr	r3, [r4]
   1dc90:	sub	r7, r0, #1
   1dc94:	cmp	r3, #0
   1dc98:	bne	1dca8 <__assert_fail@plt+0xb5bc>
   1dc9c:	add	r0, r0, #1
   1dca0:	bl	28d44 <__assert_fail@plt+0x16658>
   1dca4:	str	r0, [r4]
   1dca8:	ldr	sl, [r4]
   1dcac:	ldr	r3, [sp, #12]
   1dcb0:	ldr	r2, [sp, #8]
   1dcb4:	mov	r4, sl
   1dcb8:	add	r3, r3, r2
   1dcbc:	str	r3, [sp, #16]
   1dcc0:	ldr	r1, [r9, #24]
   1dcc4:	mov	r0, r6
   1dcc8:	bl	223c8 <__assert_fail@plt+0xfcdc>
   1dccc:	subs	fp, r0, #0
   1dcd0:	beq	1ddc4 <__assert_fail@plt+0xb6d8>
   1dcd4:	sub	r8, fp, r6
   1dcd8:	cmp	r7, r8
   1dcdc:	bhi	1dd94 <__assert_fail@plt+0xb6a8>
   1dce0:	ldrb	r2, [r6]
   1dce4:	cmp	r2, #0
   1dce8:	beq	1dd64 <__assert_fail@plt+0xb678>
   1dcec:	mov	r2, #5
   1dcf0:	ldr	r1, [pc, #252]	; 1ddf4 <__assert_fail@plt+0xb708>
   1dcf4:	mov	r0, #0
   1dcf8:	bl	1217c <dcgettext@plt>
   1dcfc:	mov	r1, #0
   1dd00:	mov	r2, r0
   1dd04:	mov	r0, #1
   1dd08:	bl	122c0 <error@plt>
   1dd0c:	ldr	r3, [sp, #16]
   1dd10:	sub	r7, r7, r3
   1dd14:	ldr	r3, [sp, #4]
   1dd18:	cmp	r3, #0
   1dd1c:	beq	1dd34 <__assert_fail@plt+0xb648>
   1dd20:	mov	r1, r3
   1dd24:	mov	r0, r4
   1dd28:	bl	12278 <strcpy@plt>
   1dd2c:	ldr	r3, [sp, #8]
   1dd30:	add	r4, r4, r3
   1dd34:	mov	r0, r4
   1dd38:	ldr	r1, [sp, #24]
   1dd3c:	bl	12278 <strcpy@plt>
   1dd40:	ldr	r3, [sp, #12]
   1dd44:	add	r4, r4, r3
   1dd48:	ldr	r3, [r9, #20]
   1dd4c:	add	r6, fp, r3
   1dd50:	sub	r5, r5, r3
   1dd54:	ldrb	r3, [r6]
   1dd58:	cmp	r3, #0
   1dd5c:	bne	1dcc0 <__assert_fail@plt+0xb5d4>
   1dd60:	b	1dce0 <__assert_fail@plt+0xb5f4>
   1dd64:	ldr	r3, [sp, #28]
   1dd68:	strb	r2, [r4], #1
   1dd6c:	ldr	r1, [sp, #20]
   1dd70:	str	r3, [sp, #80]	; 0x50
   1dd74:	str	r2, [sp, #76]	; 0x4c
   1dd78:	str	r2, [sp, #72]	; 0x48
   1dd7c:	sub	r3, r4, sl
   1dd80:	mov	r2, sl
   1dd84:	mov	r0, r9
   1dd88:	add	sp, sp, #36	; 0x24
   1dd8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd90:	b	1d9f8 <__assert_fail@plt+0xb30c>
   1dd94:	mov	r0, r4
   1dd98:	mov	r2, r8
   1dd9c:	mov	r1, r6
   1dda0:	bl	12458 <strncpy@plt>
   1dda4:	ldr	r3, [sp, #16]
   1dda8:	sub	r7, r7, r8
   1ddac:	cmp	r3, r7
   1ddb0:	add	r4, r4, r8
   1ddb4:	sub	r5, r5, r8
   1ddb8:	bcc	1dd0c <__assert_fail@plt+0xb620>
   1ddbc:	mov	r6, fp
   1ddc0:	b	1dce0 <__assert_fail@plt+0xb5f4>
   1ddc4:	cmp	r5, r7
   1ddc8:	bcs	1dce0 <__assert_fail@plt+0xb5f4>
   1ddcc:	mov	r2, r5
   1ddd0:	mov	r1, r6
   1ddd4:	mov	r0, r4
   1ddd8:	sub	r7, r7, r5
   1dddc:	add	r4, r4, r5
   1dde0:	add	r6, r6, r5
   1dde4:	bl	12458 <strncpy@plt>
   1dde8:	mov	r5, #0
   1ddec:	b	1dd54 <__assert_fail@plt+0xb668>
   1ddf0:	strdeq	r0, [r5], -r4
   1ddf4:	andeq	sp, r3, r0, lsr #16
   1ddf8:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1ddfc:	mov	r3, #0
   1de00:	mov	r5, r1
   1de04:	str	r3, [sp, #8]
   1de08:	str	r3, [sp, #4]
   1de0c:	str	r3, [sp]
   1de10:	ldr	r2, [pc, #612]	; 1e07c <__assert_fail@plt+0xb990>
   1de14:	mov	r9, r0
   1de18:	bl	1d9f8 <__assert_fail@plt+0xb30c>
   1de1c:	ldr	r3, [r5]
   1de20:	cmp	r3, #0
   1de24:	bne	1de3c <__assert_fail@plt+0xb750>
   1de28:	ldr	r3, [pc, #592]	; 1e080 <__assert_fail@plt+0xb994>
   1de2c:	ldr	r2, [pc, #592]	; 1e084 <__assert_fail@plt+0xb998>
   1de30:	ldr	r1, [pc, #592]	; 1e088 <__assert_fail@plt+0xb99c>
   1de34:	ldr	r0, [pc, #592]	; 1e08c <__assert_fail@plt+0xb9a0>
   1de38:	bl	126ec <__assert_fail@plt>
   1de3c:	ldr	r2, [r5, #4]
   1de40:	sub	r3, r3, #-1073741823	; 0xc0000001
   1de44:	ldr	r7, [r2, r3, lsl #2]
   1de48:	lsl	r0, r3, #2
   1de4c:	cmp	r7, #0
   1de50:	ldrne	r3, [pc, #552]	; 1e080 <__assert_fail@plt+0xb994>
   1de54:	ldrne	r2, [pc, #564]	; 1e090 <__assert_fail@plt+0xb9a4>
   1de58:	ldrne	r1, [pc, #552]	; 1e088 <__assert_fail@plt+0xb99c>
   1de5c:	ldrne	r0, [pc, #560]	; 1e094 <__assert_fail@plt+0xb9a8>
   1de60:	bne	1de38 <__assert_fail@plt+0xb74c>
   1de64:	add	r0, r0, #8
   1de68:	bl	28d44 <__assert_fail@plt+0x16658>
   1de6c:	ldr	r4, [r5]
   1de70:	mov	r8, r0
   1de74:	ldr	r0, [r9, #28]
   1de78:	mov	r3, r8
   1de7c:	lsl	r1, r0, #2
   1de80:	add	r2, r8, r1
   1de84:	cmp	r3, r2
   1de88:	bne	1ded4 <__assert_fail@plt+0xb7e8>
   1de8c:	add	r2, r7, r0
   1de90:	ldr	ip, [r5]
   1de94:	rsb	r2, r8, r2, lsl #2
   1de98:	sub	r2, r2, r1
   1de9c:	mov	r6, r0
   1dea0:	add	r1, r7, r6
   1dea4:	cmp	ip, r1
   1dea8:	cmphi	r4, r6
   1deac:	movhi	r1, #1
   1deb0:	movls	r1, #0
   1deb4:	bhi	1dee8 <__assert_fail@plt+0xb7fc>
   1deb8:	cmp	r0, r6
   1debc:	bls	1df00 <__assert_fail@plt+0xb814>
   1dec0:	ldr	r3, [pc, #464]	; 1e098 <__assert_fail@plt+0xb9ac>
   1dec4:	mov	r2, #242	; 0xf2
   1dec8:	ldr	r1, [pc, #440]	; 1e088 <__assert_fail@plt+0xb99c>
   1decc:	ldr	r0, [pc, #456]	; 1e09c <__assert_fail@plt+0xb9b0>
   1ded0:	b	1de38 <__assert_fail@plt+0xb74c>
   1ded4:	ldr	lr, [r5, #4]
   1ded8:	sub	ip, r3, r8
   1dedc:	ldr	ip, [lr, ip]
   1dee0:	str	ip, [r3], #4
   1dee4:	b	1de84 <__assert_fail@plt+0xb798>
   1dee8:	ldr	r1, [r5, #4]
   1deec:	add	r6, r6, #1
   1def0:	add	r1, r1, r2
   1def4:	ldr	r1, [r1, r3]
   1def8:	str	r1, [r3], #4
   1defc:	b	1dea0 <__assert_fail@plt+0xb7b4>
   1df00:	str	r1, [r8, r6, lsl #2]
   1df04:	ldr	sl, [r9, #32]
   1df08:	mov	r2, r6
   1df0c:	mov	r3, r8
   1df10:	ldr	r1, [r5, #24]
   1df14:	mov	r0, r9
   1df18:	blx	sl
   1df1c:	ldr	r2, [r9, #28]
   1df20:	subs	sl, r0, #0
   1df24:	beq	1dfdc <__assert_fail@plt+0xb8f0>
   1df28:	ldr	r3, [r5, #36]	; 0x24
   1df2c:	mov	r1, r2
   1df30:	cmp	r4, r3
   1df34:	strhi	r4, [r5, #36]	; 0x24
   1df38:	ldr	r0, [r5, #36]	; 0x24
   1df3c:	cmp	r0, #0
   1df40:	beq	1df50 <__assert_fail@plt+0xb864>
   1df44:	ldr	r3, [r5, #40]	; 0x28
   1df48:	cmp	r0, r3
   1df4c:	bcc	1df60 <__assert_fail@plt+0xb874>
   1df50:	cmn	r4, #1
   1df54:	beq	1e070 <__assert_fail@plt+0xb984>
   1df58:	add	r4, r4, #1
   1df5c:	b	1df70 <__assert_fail@plt+0xb884>
   1df60:	sub	r3, r3, r0
   1df64:	lsrs	r3, r3, #1
   1df68:	addne	r4, r4, r3
   1df6c:	beq	1df58 <__assert_fail@plt+0xb86c>
   1df70:	cmp	r1, #0
   1df74:	beq	1df88 <__assert_fail@plt+0xb89c>
   1df78:	add	r3, r1, #1
   1df7c:	cmp	r3, r4
   1df80:	bcc	1df90 <__assert_fail@plt+0xb8a4>
   1df84:	mov	r4, r3
   1df88:	cmp	r4, #0
   1df8c:	moveq	r4, #1
   1df90:	sub	r7, r7, r1
   1df94:	add	r7, r6, r7
   1df98:	ldr	r3, [r5]
   1df9c:	add	r1, r7, #1
   1dfa0:	sub	r2, r3, r2
   1dfa4:	cmp	r1, r2
   1dfa8:	bcc	1de74 <__assert_fail@plt+0xb788>
   1dfac:	mov	r0, r8
   1dfb0:	bl	2a01c <__assert_fail@plt+0x17930>
   1dfb4:	ldr	r3, [r9, #28]
   1dfb8:	str	r3, [r5]
   1dfbc:	ldr	r3, [r5, #20]
   1dfc0:	str	r3, [r5, #16]
   1dfc4:	mov	r3, #0
   1dfc8:	str	r3, [r5, #28]
   1dfcc:	mvn	r3, #0
   1dfd0:	str	r3, [r5, #32]
   1dfd4:	add	sp, sp, #16
   1dfd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dfdc:	add	ip, r2, #1
   1dfe0:	cmp	r4, ip
   1dfe4:	bhi	1e004 <__assert_fail@plt+0xb918>
   1dfe8:	mov	r2, #5
   1dfec:	ldr	r1, [pc, #172]	; 1e0a0 <__assert_fail@plt+0xb9b4>
   1dff0:	bl	1217c <dcgettext@plt>
   1dff4:	mov	r1, sl
   1dff8:	mov	r2, r0
   1dffc:	mov	r0, #1
   1e000:	bl	122c0 <error@plt>
   1e004:	ldr	r1, [r5, #40]	; 0x28
   1e008:	clz	r3, r1
   1e00c:	lsr	r3, r3, #5
   1e010:	cmp	r4, r1
   1e014:	orrcc	r3, r3, #1
   1e018:	ldr	r1, [r5, #36]	; 0x24
   1e01c:	cmp	r3, #0
   1e020:	strne	r4, [r5, #40]	; 0x28
   1e024:	cmp	r1, #0
   1e028:	beq	1e038 <__assert_fail@plt+0xb94c>
   1e02c:	ldr	r3, [r5, #40]	; 0x28
   1e030:	cmp	r1, r3
   1e034:	bcc	1e05c <__assert_fail@plt+0xb970>
   1e038:	lsr	r4, r4, #1
   1e03c:	cmp	r2, #0
   1e040:	beq	1e050 <__assert_fail@plt+0xb964>
   1e044:	cmp	ip, r4
   1e048:	bcc	1df98 <__assert_fail@plt+0xb8ac>
   1e04c:	mov	r4, ip
   1e050:	cmp	r4, #0
   1e054:	moveq	r4, #1
   1e058:	b	1df98 <__assert_fail@plt+0xb8ac>
   1e05c:	sub	r3, r3, r1
   1e060:	lsrs	r3, r3, #1
   1e064:	subne	r4, r4, r3
   1e068:	subeq	r4, r4, #1
   1e06c:	b	1e03c <__assert_fail@plt+0xb950>
   1e070:	cmp	r1, #0
   1e074:	bne	1df78 <__assert_fail@plt+0xb88c>
   1e078:	b	1df90 <__assert_fail@plt+0xb8a4>
   1e07c:	andeq	sp, r3, r2, asr #15
   1e080:	andeq	sp, r3, r7, lsr r7
   1e084:	andeq	r0, r0, r5, lsl #2
   1e088:	andeq	sp, r3, fp, lsr #15
   1e08c:	andeq	sp, r3, r1, lsr r8
   1e090:	andeq	r0, r0, r6, lsl #2
   1e094:	andeq	sp, r3, r5, asr #16
   1e098:	andeq	sp, r3, r2, asr #14
   1e09c:	andeq	sp, r3, r0, ror r8
   1e0a0:	andeq	sp, r3, sp, lsl #17
   1e0a4:	push	{r4, lr}
   1e0a8:	mov	r0, #0
   1e0ac:	bl	12194 <sysconf@plt>
   1e0b0:	cmp	r0, #0
   1e0b4:	mvnle	r0, #-2147483648	; 0x80000000
   1e0b8:	pop	{r4, pc}
   1e0bc:	ldr	r3, [pc, #48]	; 1e0f4 <__assert_fail@plt+0xba08>
   1e0c0:	push	{r4, r5, r6, lr}
   1e0c4:	mov	r5, #0
   1e0c8:	ldr	r4, [r3]
   1e0cc:	sub	r4, r4, #4
   1e0d0:	ldr	r0, [r4, #4]!
   1e0d4:	cmp	r0, #0
   1e0d8:	bne	1e0e4 <__assert_fail@plt+0xb9f8>
   1e0dc:	mov	r0, r5
   1e0e0:	pop	{r4, r5, r6, pc}
   1e0e4:	bl	123bc <strlen@plt>
   1e0e8:	add	r0, r0, #1
   1e0ec:	add	r5, r5, r0
   1e0f0:	b	1e0d0 <__assert_fail@plt+0xb9e4>
   1e0f4:	andeq	r0, r5, r4, asr r5
   1e0f8:	push	{r4, r5, r6, lr}
   1e0fc:	mov	r4, r0
   1e100:	mov	r6, r1
   1e104:	bl	1e0bc <__assert_fail@plt+0xb9d0>
   1e108:	mov	r3, #4096	; 0x1000
   1e10c:	str	r3, [r4, #8]
   1e110:	mov	r5, r0
   1e114:	bl	1e0a4 <__assert_fail@plt+0xb9b8>
   1e118:	mov	r3, #0
   1e11c:	str	r3, [r4]
   1e120:	cmp	r5, r0
   1e124:	str	r0, [r4, #4]
   1e128:	bhi	1e194 <__assert_fail@plt+0xbaa8>
   1e12c:	add	r2, r5, r6
   1e130:	cmp	r0, r2
   1e134:	bls	1e19c <__assert_fail@plt+0xbab0>
   1e138:	sub	r0, r0, r5
   1e13c:	sub	r1, r0, r6
   1e140:	str	r1, [r4, #4]
   1e144:	lsr	r2, r1, #2
   1e148:	sub	r2, r2, #2
   1e14c:	cmp	r2, r3
   1e150:	str	r2, [r4, #16]
   1e154:	bne	1e16c <__assert_fail@plt+0xba80>
   1e158:	ldr	r3, [pc, #68]	; 1e1a4 <__assert_fail@plt+0xbab8>
   1e15c:	ldr	r2, [pc, #68]	; 1e1a8 <__assert_fail@plt+0xbabc>
   1e160:	ldr	r1, [pc, #68]	; 1e1ac <__assert_fail@plt+0xbac0>
   1e164:	ldr	r0, [pc, #68]	; 1e1b0 <__assert_fail@plt+0xbac4>
   1e168:	bl	126ec <__assert_fail@plt>
   1e16c:	ldr	r2, [pc, #64]	; 1e1b4 <__assert_fail@plt+0xbac8>
   1e170:	str	r3, [r4, #20]
   1e174:	str	r3, [r4, #24]
   1e178:	str	r3, [r4, #28]
   1e17c:	str	r2, [r4, #32]
   1e180:	str	r3, [r4, #36]	; 0x24
   1e184:	str	r3, [r4, #40]	; 0x28
   1e188:	str	r1, [r4, #12]
   1e18c:	mov	r0, r3
   1e190:	pop	{r4, r5, r6, pc}
   1e194:	mov	r0, #1
   1e198:	pop	{r4, r5, r6, pc}
   1e19c:	mov	r0, #2
   1e1a0:	pop	{r4, r5, r6, pc}
   1e1a4:	andeq	sp, r3, ip, asr #14
   1e1a8:	andeq	r0, r0, r6, lsl #4
   1e1ac:	andeq	sp, r3, fp, lsr #15
   1e1b0:	andeq	sp, r3, r1, asr #17
   1e1b4:	andeq	sp, r1, r8, ror #18
   1e1b8:	ldr	r3, [r0, #4]
   1e1bc:	cmp	r3, #131072	; 0x20000
   1e1c0:	bcs	1e1cc <__assert_fail@plt+0xbae0>
   1e1c4:	str	r3, [r0, #12]
   1e1c8:	bx	lr
   1e1cc:	ldr	r3, [r0, #8]
   1e1d0:	cmp	r3, #131072	; 0x20000
   1e1d4:	movls	r3, #131072	; 0x20000
   1e1d8:	b	1e1c4 <__assert_fail@plt+0xbad8>
   1e1dc:	ldr	r0, [r0, #12]
   1e1e0:	ldr	r3, [pc, #104]	; 1e250 <__assert_fail@plt+0xbb64>
   1e1e4:	push	{r4, r5, r6, lr}
   1e1e8:	cmp	r0, r3
   1e1ec:	mov	r5, #0
   1e1f0:	str	r5, [r1]
   1e1f4:	str	r5, [r1, #16]
   1e1f8:	str	r5, [r1, #4]
   1e1fc:	str	r5, [r1, #8]
   1e200:	str	r5, [r1, #36]	; 0x24
   1e204:	str	r5, [r1, #40]	; 0x28
   1e208:	bls	1e220 <__assert_fail@plt+0xbb34>
   1e20c:	ldr	r3, [pc, #64]	; 1e254 <__assert_fail@plt+0xbb68>
   1e210:	mov	r2, #572	; 0x23c
   1e214:	ldr	r1, [pc, #60]	; 1e258 <__assert_fail@plt+0xbb6c>
   1e218:	ldr	r0, [pc, #60]	; 1e25c <__assert_fail@plt+0xbb70>
   1e21c:	bl	126ec <__assert_fail@plt>
   1e220:	add	r0, r0, #1
   1e224:	mov	r4, r1
   1e228:	mov	r6, r2
   1e22c:	bl	28d44 <__assert_fail@plt+0x16658>
   1e230:	mvn	r3, #0
   1e234:	str	r5, [r4, #20]
   1e238:	str	r5, [r4, #16]
   1e23c:	str	r5, [r4, #28]
   1e240:	str	r3, [r4, #32]
   1e244:	str	r6, [r4, #24]
   1e248:	str	r0, [r4, #12]
   1e24c:	pop	{r4, r5, r6, pc}
   1e250:	svcvc	0x00fff7ff
   1e254:	andeq	sp, r3, r0, ror #14
   1e258:	andeq	sp, r3, fp, lsr #15
   1e25c:	ldrdeq	sp, [r3], -r8
   1e260:	ldr	r3, [r0, #28]
   1e264:	str	r3, [r1]
   1e268:	ldr	r3, [r1, #20]
   1e26c:	str	r3, [r1, #16]
   1e270:	mov	r3, #0
   1e274:	str	r3, [r1, #28]
   1e278:	mvn	r3, #0
   1e27c:	str	r3, [r1, #32]
   1e280:	bx	lr
   1e284:	push	{r4, r5, r6, lr}
   1e288:	mov	r4, #0
   1e28c:	mov	r6, r0
   1e290:	mov	r5, r4
   1e294:	ldr	r0, [r6, r4, lsl #2]
   1e298:	cmp	r0, #0
   1e29c:	bne	1e2cc <__assert_fail@plt+0xbbe0>
   1e2a0:	mov	r1, r4
   1e2a4:	ldr	r0, [pc, #56]	; 1e2e4 <__assert_fail@plt+0xbbf8>
   1e2a8:	bl	1d970 <__assert_fail@plt+0xb284>
   1e2ac:	cmp	r0, #0
   1e2b0:	bne	1e2dc <__assert_fail@plt+0xbbf0>
   1e2b4:	mov	r1, r5
   1e2b8:	ldr	r0, [pc, #40]	; 1e2e8 <__assert_fail@plt+0xbbfc>
   1e2bc:	bl	1d970 <__assert_fail@plt+0xb284>
   1e2c0:	adds	r0, r0, #0
   1e2c4:	movne	r0, #1
   1e2c8:	pop	{r4, r5, r6, pc}
   1e2cc:	bl	123bc <strlen@plt>
   1e2d0:	add	r4, r4, #1
   1e2d4:	add	r5, r5, r0
   1e2d8:	b	1e294 <__assert_fail@plt+0xbba8>
   1e2dc:	mov	r0, #1
   1e2e0:	pop	{r4, r5, r6, pc}
   1e2e4:	strdeq	sp, [r3], -fp
   1e2e8:	andeq	sp, r3, r0, lsr #18
   1e2ec:	push	{r0, r1, r4, r5, r6, lr}
   1e2f0:	mov	r4, r0
   1e2f4:	mov	r0, sp
   1e2f8:	mov	r5, r1
   1e2fc:	mov	r6, r2
   1e300:	bl	28170 <__assert_fail@plt+0x15a84>
   1e304:	cmp	r0, #0
   1e308:	bne	1e36c <__assert_fail@plt+0xbc80>
   1e30c:	mov	r0, r4
   1e310:	bl	281c4 <__assert_fail@plt+0x15ad8>
   1e314:	subs	r4, r0, #0
   1e318:	bne	1e344 <__assert_fail@plt+0xbc58>
   1e31c:	mov	r0, r6
   1e320:	blx	r5
   1e324:	subs	r5, r0, #0
   1e328:	bge	1e334 <__assert_fail@plt+0xbc48>
   1e32c:	bl	12404 <__errno_location@plt>
   1e330:	ldr	r4, [r0]
   1e334:	mov	r0, sp
   1e338:	bl	281c4 <__assert_fail@plt+0x15ad8>
   1e33c:	cmp	r0, #0
   1e340:	beq	1e350 <__assert_fail@plt+0xbc64>
   1e344:	bl	12404 <__errno_location@plt>
   1e348:	ldr	r0, [r0]
   1e34c:	bl	2360c <__assert_fail@plt+0x10f20>
   1e350:	mov	r0, sp
   1e354:	bl	281e0 <__assert_fail@plt+0x15af4>
   1e358:	cmp	r4, #0
   1e35c:	bne	1e378 <__assert_fail@plt+0xbc8c>
   1e360:	mov	r0, r5
   1e364:	add	sp, sp, #8
   1e368:	pop	{r4, r5, r6, pc}
   1e36c:	bl	12404 <__errno_location@plt>
   1e370:	ldr	r0, [r0]
   1e374:	bl	235d0 <__assert_fail@plt+0x10ee4>
   1e378:	bl	12404 <__errno_location@plt>
   1e37c:	str	r4, [r0]
   1e380:	b	1e360 <__assert_fail@plt+0xbc74>
   1e384:	cmn	r0, #100	; 0x64
   1e388:	push	{r0, r1, r4, r5, r6, lr}
   1e38c:	mov	r4, r1
   1e390:	mov	r6, r2
   1e394:	bne	1e3b0 <__assert_fail@plt+0xbcc4>
   1e398:	mov	r0, r2
   1e39c:	blx	r1
   1e3a0:	mov	r4, r0
   1e3a4:	mov	r0, r4
   1e3a8:	add	sp, sp, #8
   1e3ac:	pop	{r4, r5, r6, pc}
   1e3b0:	mov	r5, r0
   1e3b4:	mov	r0, sp
   1e3b8:	bl	28170 <__assert_fail@plt+0x15a84>
   1e3bc:	cmp	r0, #0
   1e3c0:	beq	1e3d0 <__assert_fail@plt+0xbce4>
   1e3c4:	bl	12404 <__errno_location@plt>
   1e3c8:	ldr	r0, [r0]
   1e3cc:	bl	235d0 <__assert_fail@plt+0x10ee4>
   1e3d0:	mov	r0, r5
   1e3d4:	bl	125d8 <fchdir@plt>
   1e3d8:	subs	r5, r0, #0
   1e3dc:	beq	1e400 <__assert_fail@plt+0xbd14>
   1e3e0:	bl	12404 <__errno_location@plt>
   1e3e4:	mov	r4, r0
   1e3e8:	ldr	r5, [r0]
   1e3ec:	mov	r0, sp
   1e3f0:	bl	281e0 <__assert_fail@plt+0x15af4>
   1e3f4:	str	r5, [r4]
   1e3f8:	mvn	r4, #0
   1e3fc:	b	1e3a4 <__assert_fail@plt+0xbcb8>
   1e400:	mov	r0, r6
   1e404:	blx	r4
   1e408:	subs	r4, r0, #0
   1e40c:	bge	1e418 <__assert_fail@plt+0xbd2c>
   1e410:	bl	12404 <__errno_location@plt>
   1e414:	ldr	r5, [r0]
   1e418:	mov	r0, sp
   1e41c:	bl	281c4 <__assert_fail@plt+0x15ad8>
   1e420:	cmp	r0, #0
   1e424:	beq	1e434 <__assert_fail@plt+0xbd48>
   1e428:	bl	12404 <__errno_location@plt>
   1e42c:	ldr	r0, [r0]
   1e430:	bl	2360c <__assert_fail@plt+0x10f20>
   1e434:	mov	r0, sp
   1e438:	bl	281e0 <__assert_fail@plt+0x15af4>
   1e43c:	cmp	r5, #0
   1e440:	beq	1e3a4 <__assert_fail@plt+0xbcb8>
   1e444:	bl	12404 <__errno_location@plt>
   1e448:	str	r5, [r0]
   1e44c:	b	1e3a4 <__assert_fail@plt+0xbcb8>
   1e450:	push	{r4, r5, r6, r7, r8, lr}
   1e454:	mov	r6, r1
   1e458:	mov	r4, r0
   1e45c:	mov	r5, r2
   1e460:	bl	12404 <__errno_location@plt>
   1e464:	cmp	r6, #0
   1e468:	ldr	r8, [r0]
   1e46c:	bne	1e484 <__assert_fail@plt+0xbd98>
   1e470:	ldr	r3, [pc, #172]	; 1e524 <__assert_fail@plt+0xbe38>
   1e474:	ldr	r1, [pc, #172]	; 1e528 <__assert_fail@plt+0xbe3c>
   1e478:	ldr	r0, [pc, #172]	; 1e52c <__assert_fail@plt+0xbe40>
   1e47c:	mov	r2, #71	; 0x47
   1e480:	bl	126ec <__assert_fail@plt>
   1e484:	ldr	r3, [r5]
   1e488:	mov	r7, r0
   1e48c:	cmp	r3, #0
   1e490:	movne	r0, r3
   1e494:	moveq	r0, #16
   1e498:	cmp	r6, r0
   1e49c:	bhi	1e4c4 <__assert_fail@plt+0xbdd8>
   1e4a0:	cmp	r3, #0
   1e4a4:	bne	1e4f0 <__assert_fail@plt+0xbe04>
   1e4a8:	cmp	r4, #0
   1e4ac:	beq	1e4dc <__assert_fail@plt+0xbdf0>
   1e4b0:	ldr	r3, [pc, #108]	; 1e524 <__assert_fail@plt+0xbe38>
   1e4b4:	mov	r2, #79	; 0x4f
   1e4b8:	ldr	r1, [pc, #104]	; 1e528 <__assert_fail@plt+0xbe3c>
   1e4bc:	ldr	r0, [pc, #108]	; 1e530 <__assert_fail@plt+0xbe44>
   1e4c0:	b	1e480 <__assert_fail@plt+0xbd94>
   1e4c4:	lsl	r2, r0, #1
   1e4c8:	cmp	r0, r2
   1e4cc:	movls	r0, r2
   1e4d0:	bls	1e498 <__assert_fail@plt+0xbdac>
   1e4d4:	mov	r0, r6
   1e4d8:	b	1e4a0 <__assert_fail@plt+0xbdb4>
   1e4dc:	str	r0, [r5]
   1e4e0:	bl	2bf10 <__assert_fail@plt+0x19824>
   1e4e4:	mov	r4, r0
   1e4e8:	cmp	r4, #0
   1e4ec:	b	1e50c <__assert_fail@plt+0xbe20>
   1e4f0:	cmp	r3, r0
   1e4f4:	beq	1e4e8 <__assert_fail@plt+0xbdfc>
   1e4f8:	str	r0, [r5]
   1e4fc:	mov	r1, r0
   1e500:	mov	r0, r4
   1e504:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   1e508:	subs	r4, r0, #0
   1e50c:	bne	1e518 <__assert_fail@plt+0xbe2c>
   1e510:	mov	r0, #0
   1e514:	pop	{r4, r5, r6, r7, r8, pc}
   1e518:	str	r8, [r7]
   1e51c:	mov	r0, r4
   1e520:	pop	{r4, r5, r6, r7, r8, pc}
   1e524:	andeq	sp, r3, r6, asr #18
   1e528:	andeq	sp, r3, r0, asr r9
   1e52c:	andeq	sp, r3, ip, asr r9
   1e530:	andeq	sp, r3, r8, ror #18
   1e534:	push	{r4, lr}
   1e538:	mov	r4, r0
   1e53c:	bl	1e450 <__assert_fail@plt+0xbd64>
   1e540:	cmp	r0, #0
   1e544:	popne	{r4, pc}
   1e548:	mov	r0, r4
   1e54c:	bl	2a01c <__assert_fail@plt+0x17930>
   1e550:	bl	291d8 <__assert_fail@plt+0x16aec>
   1e554:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e558:	ldr	r0, [pc, #192]	; 1e620 <__assert_fail@plt+0xbf34>
   1e55c:	bl	1fc90 <__assert_fail@plt+0xd5a4>
   1e560:	subs	r7, r0, #0
   1e564:	beq	1e5d4 <__assert_fail@plt+0xbee8>
   1e568:	bl	12404 <__errno_location@plt>
   1e56c:	mov	r6, #0
   1e570:	mvn	r5, #0
   1e574:	mov	r8, r6
   1e578:	mov	sl, #1
   1e57c:	mov	r9, r0
   1e580:	str	r8, [r9]
   1e584:	mov	r0, r7
   1e588:	bl	1259c <readdir64@plt>
   1e58c:	subs	r4, r0, #0
   1e590:	bne	1e5e0 <__assert_fail@plt+0xbef4>
   1e594:	ldr	r8, [r9]
   1e598:	cmp	r8, #0
   1e59c:	beq	1e5c4 <__assert_fail@plt+0xbed8>
   1e5a0:	ldr	r2, [pc, #120]	; 1e620 <__assert_fail@plt+0xbf34>
   1e5a4:	mov	r1, #8
   1e5a8:	bl	27f14 <__assert_fail@plt+0x15828>
   1e5ac:	ldr	r2, [pc, #112]	; 1e624 <__assert_fail@plt+0xbf38>
   1e5b0:	mov	r1, r8
   1e5b4:	mov	r6, r4
   1e5b8:	mov	r3, r0
   1e5bc:	mov	r0, r4
   1e5c0:	bl	122c0 <error@plt>
   1e5c4:	mov	r0, r7
   1e5c8:	bl	126bc <closedir@plt>
   1e5cc:	cmp	r6, #0
   1e5d0:	bne	1e5d8 <__assert_fail@plt+0xbeec>
   1e5d4:	mvn	r5, #0
   1e5d8:	mov	r0, r5
   1e5dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e5e0:	ldrb	r3, [r4, #19]
   1e5e4:	cmp	r3, #46	; 0x2e
   1e5e8:	bne	1e604 <__assert_fail@plt+0xbf18>
   1e5ec:	ldrb	r3, [r4, #20]
   1e5f0:	cmp	r3, #0
   1e5f4:	beq	1e580 <__assert_fail@plt+0xbe94>
   1e5f8:	ldrh	r3, [r4, #20]
   1e5fc:	cmp	r3, #46	; 0x2e
   1e600:	beq	1e580 <__assert_fail@plt+0xbe94>
   1e604:	mov	r1, r8
   1e608:	add	r0, r4, #19
   1e60c:	bl	1f654 <__assert_fail@plt+0xcf68>
   1e610:	mov	r6, sl
   1e614:	cmp	r5, r0
   1e618:	movlt	r5, r0
   1e61c:	b	1e580 <__assert_fail@plt+0xbe94>
   1e620:	muleq	r3, r2, r9
   1e624:	andeq	pc, r3, pc, lsr #9
   1e628:	push	{r0, r1, r2, r3, r4, lr}
   1e62c:	mov	r0, #4
   1e630:	bl	12194 <sysconf@plt>
   1e634:	mov	r1, sp
   1e638:	cmn	r0, #1
   1e63c:	movne	r4, r0
   1e640:	mov	r0, #7
   1e644:	moveq	r4, #20
   1e648:	bl	121a0 <getrlimit64@plt>
   1e64c:	cmp	r0, #0
   1e650:	movne	r0, r4
   1e654:	bne	1e670 <__assert_fail@plt+0xbf84>
   1e658:	ldrd	r0, [sp]
   1e65c:	mvn	r3, #0
   1e660:	mvn	r2, #0
   1e664:	cmp	r1, r3
   1e668:	cmpeq	r0, r2
   1e66c:	moveq	r0, r4
   1e670:	add	sp, sp, #16
   1e674:	pop	{r4, pc}
   1e678:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e67c:	mov	r5, #0
   1e680:	sub	sp, sp, #524	; 0x20c
   1e684:	mov	r6, r0
   1e688:	mov	r8, r1
   1e68c:	mov	r9, r2
   1e690:	mov	sl, #5
   1e694:	mov	r7, r5
   1e698:	cmp	r6, r5
   1e69c:	movle	r0, #0
   1e6a0:	ble	1e740 <__assert_fail@plt+0xc054>
   1e6a4:	sub	r4, r6, r5
   1e6a8:	cmp	r4, #64	; 0x40
   1e6ac:	add	r3, sp, #8
   1e6b0:	movge	r4, #64	; 0x40
   1e6b4:	mov	r2, #0
   1e6b8:	mov	fp, r3
   1e6bc:	cmp	r2, r4
   1e6c0:	add	r3, r3, #8
   1e6c4:	blt	1e6f4 <__assert_fail@plt+0xc008>
   1e6c8:	mov	r2, r7
   1e6cc:	mov	r1, r4
   1e6d0:	mov	r0, fp
   1e6d4:	bl	12218 <poll@plt>
   1e6d8:	cmn	r0, #1
   1e6dc:	beq	1e740 <__assert_fail@plt+0xc054>
   1e6e0:	mov	r3, #0
   1e6e4:	cmp	r3, r4
   1e6e8:	blt	1e70c <__assert_fail@plt+0xc020>
   1e6ec:	add	r5, r5, r4
   1e6f0:	b	1e698 <__assert_fail@plt+0xbfac>
   1e6f4:	add	r1, r5, r2
   1e6f8:	strh	sl, [r3, #-4]
   1e6fc:	strh	r7, [r3, #-2]
   1e700:	str	r1, [r3, #-8]
   1e704:	add	r2, r2, #1
   1e708:	b	1e6bc <__assert_fail@plt+0xbfd0>
   1e70c:	add	r2, fp, r3, lsl #3
   1e710:	ldrsh	r2, [r2, #6]
   1e714:	cmp	r2, #32
   1e718:	bne	1e724 <__assert_fail@plt+0xc038>
   1e71c:	add	r3, r3, #1
   1e720:	b	1e6e4 <__assert_fail@plt+0xbff8>
   1e724:	ldr	r0, [fp, r3, lsl #3]
   1e728:	mov	r1, r9
   1e72c:	str	r3, [sp, #4]
   1e730:	blx	r8
   1e734:	ldr	r3, [sp, #4]
   1e738:	cmp	r0, #0
   1e73c:	beq	1e71c <__assert_fail@plt+0xc030>
   1e740:	add	sp, sp, #524	; 0x20c
   1e744:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e748:	push	{r4, r5, r6, lr}
   1e74c:	mov	r4, r1
   1e750:	mov	r1, #1
   1e754:	mov	r5, r0
   1e758:	bl	29e08 <__assert_fail@plt+0x1771c>
   1e75c:	tst	r0, #1
   1e760:	ldreq	r2, [r4, #4]
   1e764:	beq	1e788 <__assert_fail@plt+0xc09c>
   1e768:	mov	r0, #0
   1e76c:	pop	{r4, r5, r6, pc}
   1e770:	ldr	r1, [r4]
   1e774:	ldr	r1, [r1, r3, lsl #2]
   1e778:	cmp	r5, r1
   1e77c:	ble	1e798 <__assert_fail@plt+0xc0ac>
   1e780:	add	r3, r3, #1
   1e784:	str	r3, [r4, #8]
   1e788:	ldr	r3, [r4, #8]
   1e78c:	cmp	r3, r2
   1e790:	bcc	1e770 <__assert_fail@plt+0xc084>
   1e794:	b	1e79c <__assert_fail@plt+0xc0b0>
   1e798:	beq	1e768 <__assert_fail@plt+0xc07c>
   1e79c:	str	r5, [r4, #12]
   1e7a0:	mvn	r0, #0
   1e7a4:	pop	{r4, r5, r6, pc}
   1e7a8:	push	{r4, r5, r6, lr}
   1e7ac:	mov	r4, r1
   1e7b0:	mov	r1, #1
   1e7b4:	mov	r6, r0
   1e7b8:	bl	29e08 <__assert_fail@plt+0x1771c>
   1e7bc:	ands	r5, r0, #1
   1e7c0:	movne	r5, #0
   1e7c4:	bne	1e800 <__assert_fail@plt+0xc114>
   1e7c8:	ldr	r1, [r4, #4]
   1e7cc:	add	r2, r4, #8
   1e7d0:	add	r1, r1, #1
   1e7d4:	ldr	r0, [r4]
   1e7d8:	lsl	r1, r1, #2
   1e7dc:	bl	1e450 <__assert_fail@plt+0xbd64>
   1e7e0:	cmp	r0, #0
   1e7e4:	strne	r0, [r4]
   1e7e8:	ldrne	r3, [r4, #4]
   1e7ec:	mvneq	r5, #0
   1e7f0:	strne	r6, [r0, r3, lsl #2]
   1e7f4:	ldrne	r3, [r4, #4]
   1e7f8:	addne	r3, r3, #1
   1e7fc:	strne	r3, [r4, #4]
   1e800:	mov	r0, r5
   1e804:	pop	{r4, r5, r6, pc}
   1e808:	push	{r0, r1, r2, r3, r4, lr}
   1e80c:	bl	1e554 <__assert_fail@plt+0xbe68>
   1e810:	cmp	r0, #0
   1e814:	bge	1e81c <__assert_fail@plt+0xc130>
   1e818:	bl	1e628 <__assert_fail@plt+0xbf3c>
   1e81c:	cmn	r0, #-2147483647	; 0x80000001
   1e820:	mov	r3, #0
   1e824:	add	r2, sp, #4
   1e828:	addne	r0, r0, #1
   1e82c:	ldr	r1, [pc, #40]	; 1e85c <__assert_fail@plt+0xc170>
   1e830:	str	r3, [sp, #4]
   1e834:	str	r3, [sp, #12]
   1e838:	str	r3, [sp, #8]
   1e83c:	bl	1e678 <__assert_fail@plt+0xbf8c>
   1e840:	ldr	r3, [pc, #24]	; 1e860 <__assert_fail@plt+0xc174>
   1e844:	ldr	r2, [sp, #4]
   1e848:	str	r2, [r3]
   1e84c:	ldr	r2, [sp, #8]
   1e850:	str	r2, [r3, #4]
   1e854:	add	sp, sp, #20
   1e858:	pop	{pc}		; (ldr pc, [sp], #4)
   1e85c:	andeq	lr, r1, r8, lsr #15
   1e860:	strdeq	r0, [r5], -r8
   1e864:	push	{r1, r2, r3}
   1e868:	push	{r0, r1, r4, r5, r6, r7, r8, r9, lr}
   1e86c:	mov	r8, r0
   1e870:	ldr	r4, [pc, #144]	; 1e908 <__assert_fail@plt+0xc21c>
   1e874:	ldr	r6, [sp, #36]	; 0x24
   1e878:	ldrb	r7, [r4, #8]
   1e87c:	ands	r5, r6, #64	; 0x40
   1e880:	addne	r3, sp, #40	; 0x28
   1e884:	strne	r3, [sp, #4]
   1e888:	ldrne	r5, [sp, #40]	; 0x28
   1e88c:	cmp	r7, #0
   1e890:	bne	1e8c8 <__assert_fail@plt+0xc1dc>
   1e894:	mov	r1, #524288	; 0x80000
   1e898:	ldr	r0, [pc, #108]	; 1e90c <__assert_fail@plt+0xc220>
   1e89c:	bl	1fe48 <__assert_fail@plt+0xd75c>
   1e8a0:	subs	r9, r0, #0
   1e8a4:	blt	1e8bc <__assert_fail@plt+0xc1d0>
   1e8a8:	mov	r1, #1
   1e8ac:	bl	29e08 <__assert_fail@plt+0x1771c>
   1e8b0:	and	r7, r0, #1
   1e8b4:	mov	r0, r9
   1e8b8:	bl	126a4 <close@plt>
   1e8bc:	mov	r3, #1
   1e8c0:	strb	r7, [r4, #9]
   1e8c4:	strb	r3, [r4, #8]
   1e8c8:	mov	r2, r5
   1e8cc:	orr	r1, r6, #524288	; 0x80000
   1e8d0:	mov	r0, r8
   1e8d4:	bl	1fe48 <__assert_fail@plt+0xd75c>
   1e8d8:	subs	r5, r0, #0
   1e8dc:	blt	1e8f4 <__assert_fail@plt+0xc208>
   1e8e0:	ldrb	r3, [r4, #9]
   1e8e4:	cmp	r3, #0
   1e8e8:	bne	1e8f4 <__assert_fail@plt+0xc208>
   1e8ec:	mov	r1, #1
   1e8f0:	bl	1fb18 <__assert_fail@plt+0xd42c>
   1e8f4:	mov	r0, r5
   1e8f8:	add	sp, sp, #8
   1e8fc:	pop	{r4, r5, r6, r7, r8, r9, lr}
   1e900:	add	sp, sp, #12
   1e904:	bx	lr
   1e908:	strdeq	r0, [r5], -r8
   1e90c:	andeq	sl, r3, lr, lsr r4
   1e910:	push	{r4, lr}
   1e914:	ldr	r4, [pc, #20]	; 1e930 <__assert_fail@plt+0xc244>
   1e918:	ldr	r0, [r4]
   1e91c:	bl	2a01c <__assert_fail@plt+0x17930>
   1e920:	mov	r3, #0
   1e924:	str	r3, [r4]
   1e928:	str	r3, [r4, #4]
   1e92c:	pop	{r4, pc}
   1e930:	strdeq	r0, [r5], -r8
   1e934:	push	{r4, lr}
   1e938:	ldr	r0, [pc, #12]	; 1e94c <__assert_fail@plt+0xc260>
   1e93c:	bl	122fc <getenv@plt>
   1e940:	adds	r0, r0, #0
   1e944:	movne	r0, #1
   1e948:	pop	{r4, pc}
   1e94c:	andeq	sp, r3, r0, lsr #19
   1e950:	ldr	r3, [pc, #148]	; 1e9ec <__assert_fail@plt+0xc300>
   1e954:	push	{r4, r5, lr}
   1e958:	sub	sp, sp, #20
   1e95c:	ldr	r5, [r3]
   1e960:	ldr	r4, [r3, #4]
   1e964:	bl	1e554 <__assert_fail@plt+0xbe68>
   1e968:	cmp	r0, #0
   1e96c:	bge	1e974 <__assert_fail@plt+0xc288>
   1e970:	bl	1e628 <__assert_fail@plt+0xbf3c>
   1e974:	cmn	r0, #-2147483647	; 0x80000001
   1e978:	addne	r0, r0, #1
   1e97c:	str	r4, [sp, #4]
   1e980:	mvn	r3, #0
   1e984:	mov	r4, #0
   1e988:	mov	r2, sp
   1e98c:	ldr	r1, [pc, #92]	; 1e9f0 <__assert_fail@plt+0xc304>
   1e990:	str	r5, [sp]
   1e994:	str	r4, [sp, #8]
   1e998:	str	r3, [sp, #12]
   1e99c:	bl	1e678 <__assert_fail@plt+0xbf8c>
   1e9a0:	ldr	r5, [sp, #12]
   1e9a4:	cmp	r5, r4
   1e9a8:	blt	1e9e4 <__assert_fail@plt+0xc2f8>
   1e9ac:	mov	r2, #5
   1e9b0:	ldr	r1, [pc, #60]	; 1e9f4 <__assert_fail@plt+0xc308>
   1e9b4:	mov	r0, r4
   1e9b8:	bl	1217c <dcgettext@plt>
   1e9bc:	mov	r3, r5
   1e9c0:	mov	r1, r4
   1e9c4:	mov	r2, r0
   1e9c8:	mov	r0, r4
   1e9cc:	bl	122c0 <error@plt>
   1e9d0:	ldr	r3, [pc, #32]	; 1e9f8 <__assert_fail@plt+0xc30c>
   1e9d4:	mov	r2, #396	; 0x18c
   1e9d8:	ldr	r1, [pc, #28]	; 1e9fc <__assert_fail@plt+0xc310>
   1e9dc:	ldr	r0, [pc, #28]	; 1ea00 <__assert_fail@plt+0xc314>
   1e9e0:	bl	126ec <__assert_fail@plt>
   1e9e4:	add	sp, sp, #20
   1e9e8:	pop	{r4, r5, pc}
   1e9ec:	strdeq	r0, [r5], -r8
   1e9f0:	andeq	lr, r1, r8, asr #14
   1e9f4:			; <UNDEFINED> instruction: 0x0003d9bc
   1e9f8:	andeq	sp, r3, r9, ror r9
   1e9fc:	andeq	sp, r3, r4, asr sl
   1ea00:	andeq	sp, r3, sp, asr sl
   1ea04:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1ea08:	mov	r5, r0
   1ea0c:	ldr	r3, [pc, #120]	; 1ea8c <__assert_fail@plt+0xc3a0>
   1ea10:	ldr	r0, [r3]
   1ea14:	bl	29fcc <__assert_fail@plt+0x178e0>
   1ea18:	ldr	r3, [pc, #112]	; 1ea90 <__assert_fail@plt+0xc3a4>
   1ea1c:	mov	r2, #5
   1ea20:	ldr	r1, [pc, #108]	; 1ea94 <__assert_fail@plt+0xc3a8>
   1ea24:	ldr	r4, [r3]
   1ea28:	ldr	r3, [pc, #104]	; 1ea98 <__assert_fail@plt+0xc3ac>
   1ea2c:	mov	r0, #0
   1ea30:	ldr	r6, [r3]
   1ea34:	bl	1217c <dcgettext@plt>
   1ea38:	mov	r2, #5
   1ea3c:	ldr	r1, [pc, #88]	; 1ea9c <__assert_fail@plt+0xc3b0>
   1ea40:	mov	r7, r0
   1ea44:	mov	r0, #0
   1ea48:	bl	1217c <dcgettext@plt>
   1ea4c:	mov	r2, #5
   1ea50:	ldr	r1, [pc, #72]	; 1eaa0 <__assert_fail@plt+0xc3b4>
   1ea54:	mov	r8, r0
   1ea58:	mov	r0, #0
   1ea5c:	bl	1217c <dcgettext@plt>
   1ea60:	mov	r3, #0
   1ea64:	str	r3, [sp, #12]
   1ea68:	stm	sp, {r7, r8}
   1ea6c:	mov	r3, r6
   1ea70:	ldr	r2, [pc, #44]	; 1eaa4 <__assert_fail@plt+0xc3b8>
   1ea74:	mov	r1, r5
   1ea78:	str	r0, [sp, #8]
   1ea7c:	mov	r0, r4
   1ea80:	bl	28c94 <__assert_fail@plt+0x165a8>
   1ea84:	add	sp, sp, #16
   1ea88:	pop	{r4, r5, r6, r7, r8, pc}
   1ea8c:	andeq	r0, r5, r0, ror #10
   1ea90:	andeq	r0, r5, ip, ror #10
   1ea94:	andeq	sp, r3, r6, ror #20
   1ea98:	andeq	r0, r5, r0, ror #9
   1ea9c:	andeq	sp, r3, r5, ror sl
   1eaa0:	andeq	sp, r3, r4, lsl #21
   1eaa4:	muleq	r3, r1, sl
   1eaa8:	cmp	r2, #0
   1eaac:	push	{r4, r5, r6, r7, r8, lr}
   1eab0:	mov	r5, r0
   1eab4:	mov	r4, r1
   1eab8:	bne	1eadc <__assert_fail@plt+0xc3f0>
   1eabc:	ldr	r6, [pc, #256]	; 1ebc4 <__assert_fail@plt+0xc4d8>
   1eac0:	ldr	r7, [pc, #256]	; 1ebc8 <__assert_fail@plt+0xc4dc>
   1eac4:	ldr	r8, [pc, #256]	; 1ebcc <__assert_fail@plt+0xc4e0>
   1eac8:	ldrb	r2, [r5], #1
   1eacc:	cmp	r2, #0
   1ead0:	bne	1eaf8 <__assert_fail@plt+0xc40c>
   1ead4:	mov	r0, #1
   1ead8:	pop	{r4, r5, r6, r7, r8, pc}
   1eadc:	mov	r2, r0
   1eae0:	ldr	r1, [pc, #232]	; 1ebd0 <__assert_fail@plt+0xc4e4>
   1eae4:	mov	r0, r4
   1eae8:	bl	123f8 <fprintf@plt>
   1eaec:	mvn	r0, r0
   1eaf0:	lsr	r0, r0, #31
   1eaf4:	pop	{r4, r5, r6, r7, r8, pc}
   1eaf8:	cmp	r2, #12
   1eafc:	beq	1eb9c <__assert_fail@plt+0xc4b0>
   1eb00:	bhi	1eb24 <__assert_fail@plt+0xc438>
   1eb04:	cmp	r2, #9
   1eb08:	beq	1eb94 <__assert_fail@plt+0xc4a8>
   1eb0c:	cmp	r2, #10
   1eb10:	beq	1eb8c <__assert_fail@plt+0xc4a0>
   1eb14:	cmp	r2, #8
   1eb18:	bne	1eb3c <__assert_fail@plt+0xc450>
   1eb1c:	ldr	r1, [pc, #176]	; 1ebd4 <__assert_fail@plt+0xc4e8>
   1eb20:	b	1eb78 <__assert_fail@plt+0xc48c>
   1eb24:	cmp	r2, #32
   1eb28:	beq	1eba4 <__assert_fail@plt+0xc4b8>
   1eb2c:	bhi	1eb64 <__assert_fail@plt+0xc478>
   1eb30:	cmp	r2, #13
   1eb34:	ldreq	r1, [pc, #156]	; 1ebd8 <__assert_fail@plt+0xc4ec>
   1eb38:	beq	1eb78 <__assert_fail@plt+0xc48c>
   1eb3c:	sub	r3, r2, #33	; 0x21
   1eb40:	cmp	r3, #93	; 0x5d
   1eb44:	bhi	1ebb4 <__assert_fail@plt+0xc4c8>
   1eb48:	mov	r1, r4
   1eb4c:	mov	r0, r2
   1eb50:	bl	125c0 <putc@plt>
   1eb54:	cmn	r0, #1
   1eb58:	bne	1eac8 <__assert_fail@plt+0xc3dc>
   1eb5c:	mov	r0, #0
   1eb60:	pop	{r4, r5, r6, r7, r8, pc}
   1eb64:	cmp	r2, #34	; 0x22
   1eb68:	beq	1ebac <__assert_fail@plt+0xc4c0>
   1eb6c:	cmp	r2, #92	; 0x5c
   1eb70:	ldreq	r1, [pc, #100]	; 1ebdc <__assert_fail@plt+0xc4f0>
   1eb74:	bne	1eb3c <__assert_fail@plt+0xc450>
   1eb78:	mov	r0, r4
   1eb7c:	bl	123f8 <fprintf@plt>
   1eb80:	cmp	r0, #0
   1eb84:	bge	1eac8 <__assert_fail@plt+0xc3dc>
   1eb88:	b	1eb5c <__assert_fail@plt+0xc470>
   1eb8c:	ldr	r1, [pc, #76]	; 1ebe0 <__assert_fail@plt+0xc4f4>
   1eb90:	b	1eb78 <__assert_fail@plt+0xc48c>
   1eb94:	ldr	r1, [pc, #72]	; 1ebe4 <__assert_fail@plt+0xc4f8>
   1eb98:	b	1eb78 <__assert_fail@plt+0xc48c>
   1eb9c:	mov	r1, r6
   1eba0:	b	1eb78 <__assert_fail@plt+0xc48c>
   1eba4:	mov	r1, r8
   1eba8:	b	1eb78 <__assert_fail@plt+0xc48c>
   1ebac:	ldr	r1, [pc, #52]	; 1ebe8 <__assert_fail@plt+0xc4fc>
   1ebb0:	b	1eb78 <__assert_fail@plt+0xc48c>
   1ebb4:	mov	r1, r7
   1ebb8:	mov	r0, r4
   1ebbc:	bl	123f8 <fprintf@plt>
   1ebc0:	b	1eb80 <__assert_fail@plt+0xc494>
   1ebc4:			; <UNDEFINED> instruction: 0x0003dabc
   1ebc8:	andeq	sp, r3, r5, asr #21
   1ebcc:			; <UNDEFINED> instruction: 0x0003dabf
   1ebd0:	andeq	pc, r3, pc, lsr #9
   1ebd4:			; <UNDEFINED> instruction: 0x0003dab3
   1ebd8:			; <UNDEFINED> instruction: 0x0003dab6
   1ebdc:	andeq	sp, r3, sp, lsr #21
   1ebe0:			; <UNDEFINED> instruction: 0x0003dab0
   1ebe4:			; <UNDEFINED> instruction: 0x0003dab9
   1ebe8:	andeq	sp, r3, r2, asr #21
   1ebec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ebf0:	add	fp, sp, #32
   1ebf4:	ldr	r7, [pc, #1488]	; 1f1cc <__assert_fail@plt+0xcae0>
   1ebf8:	sub	sp, sp, #956	; 0x3bc
   1ebfc:	str	r0, [fp, #-960]	; 0xfffffc40
   1ec00:	str	r1, [fp, #-964]	; 0xfffffc3c
   1ec04:	ldr	r0, [r3, #16]
   1ec08:	sub	r1, fp, #956	; 0x3bc
   1ec0c:	mov	r6, r3
   1ec10:	str	r2, [fp, #-968]	; 0xfffffc38
   1ec14:	ldr	r5, [fp, #16]
   1ec18:	ldr	r8, [fp, #8]
   1ec1c:	bl	1fe7c <__assert_fail@plt+0xd790>
   1ec20:	mov	r2, #1
   1ec24:	mov	r3, #0
   1ec28:	ldr	r4, [r7]
   1ec2c:	strd	r2, [sp, #8]
   1ec30:	strd	r2, [sp]
   1ec34:	mov	r3, #0
   1ec38:	sub	r2, fp, #688	; 0x2b0
   1ec3c:	ldrd	r0, [r6, #96]	; 0x60
   1ec40:	bl	20e70 <__assert_fail@plt+0xe784>
   1ec44:	mov	r2, r4
   1ec48:	ldr	r1, [pc, #1408]	; 1f1d0 <__assert_fail@plt+0xcae4>
   1ec4c:	mov	r3, r0
   1ec50:	mov	r0, r5
   1ec54:	bl	123f8 <fprintf@plt>
   1ec58:	cmp	r0, #0
   1ec5c:	blt	1f164 <__assert_fail@plt+0xca78>
   1ec60:	ldr	r3, [r7]
   1ec64:	mov	r1, r5
   1ec68:	cmp	r0, r3
   1ec6c:	strgt	r0, [r7]
   1ec70:	mov	r0, #32
   1ec74:	bl	125c0 <putc@plt>
   1ec78:	mov	r2, r8
   1ec7c:	asr	r3, r8, #31
   1ec80:	ldr	r9, [r7, #4]
   1ec84:	strd	r2, [sp, #8]
   1ec88:	mov	r2, #512	; 0x200
   1ec8c:	mov	r3, #0
   1ec90:	strd	r2, [sp]
   1ec94:	mov	r3, #0
   1ec98:	sub	r2, fp, #688	; 0x2b0
   1ec9c:	cmn	r0, #1
   1eca0:	ldrd	r0, [r6, #64]	; 0x40
   1eca4:	moveq	r4, #150	; 0x96
   1eca8:	movne	r4, #0
   1ecac:	movne	sl, #1
   1ecb0:	moveq	sl, #0
   1ecb4:	bl	20e70 <__assert_fail@plt+0xe784>
   1ecb8:	mov	r2, r9
   1ecbc:	ldr	r1, [pc, #1292]	; 1f1d0 <__assert_fail@plt+0xcae4>
   1ecc0:	mov	r3, r0
   1ecc4:	mov	r0, r5
   1ecc8:	bl	123f8 <fprintf@plt>
   1eccc:	cmp	r0, #0
   1ecd0:	movlt	r4, #200	; 0xc8
   1ecd4:	blt	1f168 <__assert_fail@plt+0xca7c>
   1ecd8:	ldr	r3, [r7, #4]
   1ecdc:	cmp	r0, r3
   1ece0:	strgt	r0, [r7, #4]
   1ece4:	cmp	sl, #0
   1ece8:	beq	1f168 <__assert_fail@plt+0xca7c>
   1ecec:	mov	r1, r5
   1ecf0:	mov	r0, #32
   1ecf4:	bl	125c0 <putc@plt>
   1ecf8:	cmn	r0, #1
   1ecfc:	bne	1f03c <__assert_fail@plt+0xc950>
   1ed00:	mov	r4, #250	; 0xfa
   1ed04:	b	1f168 <__assert_fail@plt+0xca7c>
   1ed08:	ldr	r3, [r7, #8]
   1ed0c:	mov	r1, r5
   1ed10:	cmp	r0, r3
   1ed14:	strgt	r0, [r7, #8]
   1ed18:	mov	r0, #32
   1ed1c:	bl	125c0 <putc@plt>
   1ed20:	cmn	r0, #1
   1ed24:	ldr	r0, [r6, #24]
   1ed28:	moveq	r4, #250	; 0xfa
   1ed2c:	bl	217a0 <__assert_fail@plt+0xf0b4>
   1ed30:	subs	r9, r0, #0
   1ed34:	bne	1ed6c <__assert_fail@plt+0xc680>
   1ed38:	ldr	r2, [r6, #24]
   1ed3c:	ldr	r1, [pc, #1168]	; 1f1d4 <__assert_fail@plt+0xcae8>
   1ed40:	mov	r0, r5
   1ed44:	bl	123f8 <fprintf@plt>
   1ed48:	ldr	r3, [r7, #12]
   1ed4c:	ldr	r2, [pc, #1156]	; 1f1d8 <__assert_fail@plt+0xcaec>
   1ed50:	cmp	r0, r3
   1ed54:	strgt	r0, [r7, #12]
   1ed58:	cmp	r0, #0
   1ed5c:	movgt	r3, #1
   1ed60:	movle	r3, #0
   1ed64:	movle	r4, r2
   1ed68:	b	1eda4 <__assert_fail@plt+0xc6b8>
   1ed6c:	mov	r1, #0
   1ed70:	bl	2313c <__assert_fail@plt+0x10a50>
   1ed74:	ldr	r3, [r7, #12]
   1ed78:	ldr	r1, [pc, #1116]	; 1f1dc <__assert_fail@plt+0xcaf0>
   1ed7c:	cmp	r0, r3
   1ed80:	strgt	r0, [r7, #12]
   1ed84:	mov	r3, r9
   1ed88:	ldr	r2, [r7, #12]
   1ed8c:	mov	r0, r5
   1ed90:	bl	123f8 <fprintf@plt>
   1ed94:	mvn	r3, r0
   1ed98:	cmp	r0, #0
   1ed9c:	lsr	r3, r3, #31
   1eda0:	movlt	r4, #400	; 0x190
   1eda4:	cmp	r3, #0
   1eda8:	beq	1f168 <__assert_fail@plt+0xca7c>
   1edac:	ldr	r0, [r6, #28]
   1edb0:	bl	21904 <__assert_fail@plt+0xf218>
   1edb4:	subs	r9, r0, #0
   1edb8:	beq	1edf4 <__assert_fail@plt+0xc708>
   1edbc:	mov	r1, #0
   1edc0:	bl	2313c <__assert_fail@plt+0x10a50>
   1edc4:	ldr	r3, [r7, #16]
   1edc8:	ldr	r1, [pc, #1036]	; 1f1dc <__assert_fail@plt+0xcaf0>
   1edcc:	cmp	r0, r3
   1edd0:	strgt	r0, [r7, #16]
   1edd4:	mov	r3, r9
   1edd8:	ldr	r2, [r7, #16]
   1eddc:	mov	r0, r5
   1ede0:	bl	123f8 <fprintf@plt>
   1ede4:	cmp	r0, #0
   1ede8:	bge	1ee30 <__assert_fail@plt+0xc744>
   1edec:	mov	r4, #500	; 0x1f4
   1edf0:	b	1f168 <__assert_fail@plt+0xca7c>
   1edf4:	ldr	r3, [r6, #28]
   1edf8:	ldr	r2, [r7, #16]
   1edfc:	ldr	r1, [pc, #988]	; 1f1e0 <__assert_fail@plt+0xcaf4>
   1ee00:	mov	r0, r5
   1ee04:	bl	123f8 <fprintf@plt>
   1ee08:	ldr	r3, [r7, #16]
   1ee0c:	cmp	r0, r3
   1ee10:	strgt	r0, [r7, #16]
   1ee14:	cmp	r0, #0
   1ee18:	blt	1f194 <__assert_fail@plt+0xcaa8>
   1ee1c:	mov	r1, r5
   1ee20:	mov	r0, #32
   1ee24:	bl	125c0 <putc@plt>
   1ee28:	cmn	r0, #1
   1ee2c:	beq	1f19c <__assert_fail@plt+0xcab0>
   1ee30:	ldr	r3, [r6, #16]
   1ee34:	and	r3, r3, #45056	; 0xb000
   1ee38:	cmp	r3, #8192	; 0x2000
   1ee3c:	bne	1ee8c <__assert_fail@plt+0xc7a0>
   1ee40:	ldrd	r0, [r6, #32]
   1ee44:	bl	11fa8 <gnu_dev_major@plt>
   1ee48:	ldr	r2, [r7, #20]
   1ee4c:	ldr	r1, [pc, #912]	; 1f1e4 <__assert_fail@plt+0xcaf8>
   1ee50:	mov	r3, r0
   1ee54:	mov	r0, r5
   1ee58:	bl	123f8 <fprintf@plt>
   1ee5c:	cmp	r0, #0
   1ee60:	blt	1f1a4 <__assert_fail@plt+0xcab8>
   1ee64:	ldr	r3, [r7, #20]
   1ee68:	ldr	r1, [pc, #888]	; 1f1e8 <__assert_fail@plt+0xcafc>
   1ee6c:	cmp	r0, r3
   1ee70:	strgt	r0, [r7, #20]
   1ee74:	mov	r0, r5
   1ee78:	bl	123f8 <fprintf@plt>
   1ee7c:	cmp	r0, #0
   1ee80:	bge	1f078 <__assert_fail@plt+0xc98c>
   1ee84:	ldr	r4, [pc, #864]	; 1f1ec <__assert_fail@plt+0xcb00>
   1ee88:	b	1f168 <__assert_fail@plt+0xca7c>
   1ee8c:	cmp	r8, #0
   1ee90:	movge	r8, #1
   1ee94:	mov	r2, r8
   1ee98:	asr	r3, r8, #31
   1ee9c:	ldr	r9, [r7, #28]
   1eea0:	strd	r2, [sp, #8]
   1eea4:	mov	r2, #1
   1eea8:	mov	r3, #0
   1eeac:	strd	r2, [sp]
   1eeb0:	mov	r3, #0
   1eeb4:	sub	r2, fp, #688	; 0x2b0
   1eeb8:	ldrd	r0, [r6, #48]	; 0x30
   1eebc:	bl	20e70 <__assert_fail@plt+0xe784>
   1eec0:	mov	r2, r9
   1eec4:	ldr	r1, [pc, #772]	; 1f1d0 <__assert_fail@plt+0xcae4>
   1eec8:	mov	r3, r0
   1eecc:	mov	r0, r5
   1eed0:	bl	123f8 <fprintf@plt>
   1eed4:	cmp	r0, #0
   1eed8:	blt	1f1ac <__assert_fail@plt+0xcac0>
   1eedc:	ldr	r3, [r7, #28]
   1eee0:	cmp	r0, r3
   1eee4:	strgt	r0, [r7, #28]
   1eee8:	b	1f0ac <__assert_fail@plt+0xc9c0>
   1eeec:	ldr	r3, [fp, #4]
   1eef0:	sub	r3, r3, #15532032	; 0xed0000
   1eef4:	sub	r3, r3, #19968	; 0x4e00
   1eef8:	cmp	r3, r0
   1eefc:	ldrgt	r8, [pc, #748]	; 1f1f0 <__assert_fail@plt+0xcb04>
   1ef00:	bgt	1ef1c <__assert_fail@plt+0xc830>
   1ef04:	ldr	r3, [fp, #4]
   1ef08:	ldr	r8, [pc, #736]	; 1f1f0 <__assert_fail@plt+0xcb04>
   1ef0c:	add	r2, r3, #3600	; 0xe10
   1ef10:	ldr	r3, [pc, #732]	; 1f1f4 <__assert_fail@plt+0xcb08>
   1ef14:	cmp	r0, r2
   1ef18:	movle	r8, r3
   1ef1c:	mov	r7, #256	; 0x100
   1ef20:	sub	sl, fp, #944	; 0x3b0
   1ef24:	mov	r3, r9
   1ef28:	mov	r2, r8
   1ef2c:	mov	r1, r7
   1ef30:	mov	r0, sl
   1ef34:	bl	12338 <strftime@plt>
   1ef38:	cmp	r0, #0
   1ef3c:	beq	1ef60 <__assert_fail@plt+0xc874>
   1ef40:	mov	r2, sl
   1ef44:	ldr	r1, [pc, #684]	; 1f1f8 <__assert_fail@plt+0xcb0c>
   1ef48:	mov	r0, r5
   1ef4c:	bl	123f8 <fprintf@plt>
   1ef50:	cmp	r0, #0
   1ef54:	bge	1ef98 <__assert_fail@plt+0xc8ac>
   1ef58:	mov	r4, #900	; 0x384
   1ef5c:	b	1f168 <__assert_fail@plt+0xca7c>
   1ef60:	lsl	r7, r7, #1
   1ef64:	add	r3, r7, #14
   1ef68:	bic	r3, r3, #7
   1ef6c:	sub	sp, sp, r3
   1ef70:	add	sl, sp, #16
   1ef74:	b	1ef24 <__assert_fail@plt+0xc838>
   1ef78:	bl	20e70 <__assert_fail@plt+0xe784>
   1ef7c:	mov	r2, #12
   1ef80:	ldr	r1, [pc, #628]	; 1f1fc <__assert_fail@plt+0xcb10>
   1ef84:	mov	r3, r0
   1ef88:	mov	r0, r5
   1ef8c:	bl	123f8 <fprintf@plt>
   1ef90:	cmp	r0, #0
   1ef94:	blt	1f1b4 <__assert_fail@plt+0xcac8>
   1ef98:	ldr	r2, [fp, #12]
   1ef9c:	mov	r1, r5
   1efa0:	ldr	r0, [fp, #-960]	; 0xfffffc40
   1efa4:	bl	1eaa8 <__assert_fail@plt+0xc3bc>
   1efa8:	subs	r7, r0, #0
   1efac:	moveq	r4, #1200	; 0x4b0
   1efb0:	beq	1f168 <__assert_fail@plt+0xca7c>
   1efb4:	ldr	r3, [r6, #16]
   1efb8:	and	r3, r3, #61440	; 0xf000
   1efbc:	cmp	r3, #40960	; 0xa000
   1efc0:	bne	1f020 <__assert_fail@plt+0xc934>
   1efc4:	ldr	r1, [fp, #-968]	; 0xfffffc38
   1efc8:	ldr	r0, [fp, #-964]	; 0xfffffc3c
   1efcc:	bl	1f840 <__assert_fail@plt+0xd154>
   1efd0:	subs	r6, r0, #0
   1efd4:	beq	1eff8 <__assert_fail@plt+0xc90c>
   1efd8:	mov	r1, r5
   1efdc:	ldr	r0, [pc, #540]	; 1f200 <__assert_fail@plt+0xcb14>
   1efe0:	bl	12680 <fputs@plt>
   1efe4:	cmp	r0, #0
   1efe8:	bge	1f140 <__assert_fail@plt+0xca54>
   1efec:	ldr	r4, [pc, #528]	; 1f204 <__assert_fail@plt+0xcb18>
   1eff0:	mov	r7, #0
   1eff4:	b	1f010 <__assert_fail@plt+0xc924>
   1eff8:	bl	12404 <__errno_location@plt>
   1effc:	ldr	r3, [fp, #-960]	; 0xfffffc40
   1f000:	ldr	r2, [pc, #512]	; 1f208 <__assert_fail@plt+0xcb1c>
   1f004:	ldr	r1, [r0]
   1f008:	mov	r0, r6
   1f00c:	bl	122c0 <error@plt>
   1f010:	mov	r0, r6
   1f014:	bl	2a01c <__assert_fail@plt+0x17930>
   1f018:	cmp	r7, #0
   1f01c:	beq	1f168 <__assert_fail@plt+0xca7c>
   1f020:	mov	r1, r5
   1f024:	mov	r0, #10
   1f028:	bl	125c0 <putc@plt>
   1f02c:	cmn	r0, #1
   1f030:	bne	1f1c4 <__assert_fail@plt+0xcad8>
   1f034:	ldr	r4, [pc, #464]	; 1f20c <__assert_fail@plt+0xcb20>
   1f038:	b	1f168 <__assert_fail@plt+0xca7c>
   1f03c:	mov	r1, r5
   1f040:	sub	r0, fp, #956	; 0x3bc
   1f044:	bl	12680 <fputs@plt>
   1f048:	cmp	r0, #0
   1f04c:	blt	1f1bc <__assert_fail@plt+0xcad0>
   1f050:	ldr	r7, [pc, #372]	; 1f1cc <__assert_fail@plt+0xcae0>
   1f054:	ldr	r3, [r6, #20]
   1f058:	ldr	r1, [pc, #388]	; 1f1e4 <__assert_fail@plt+0xcaf8>
   1f05c:	ldr	r2, [r7, #8]
   1f060:	mov	r0, r5
   1f064:	bl	123f8 <fprintf@plt>
   1f068:	cmp	r0, #0
   1f06c:	bge	1ed08 <__assert_fail@plt+0xc61c>
   1f070:	mov	r4, #300	; 0x12c
   1f074:	b	1f168 <__assert_fail@plt+0xca7c>
   1f078:	ldrd	r0, [r6, #32]
   1f07c:	bl	12038 <gnu_dev_minor@plt>
   1f080:	ldr	r2, [r7, #24]
   1f084:	ldr	r1, [pc, #344]	; 1f1e4 <__assert_fail@plt+0xcaf8>
   1f088:	mov	r3, r0
   1f08c:	mov	r0, r5
   1f090:	bl	123f8 <fprintf@plt>
   1f094:	cmp	r0, #0
   1f098:	ldrlt	r4, [pc, #368]	; 1f210 <__assert_fail@plt+0xcb24>
   1f09c:	blt	1f168 <__assert_fail@plt+0xca7c>
   1f0a0:	ldr	r3, [r7, #24]
   1f0a4:	cmp	r0, r3
   1f0a8:	strgt	r0, [r7, #24]
   1f0ac:	mov	r1, r5
   1f0b0:	mov	r0, #32
   1f0b4:	bl	125c0 <putc@plt>
   1f0b8:	cmn	r0, #1
   1f0bc:	ldreq	r4, [pc, #336]	; 1f214 <__assert_fail@plt+0xcb28>
   1f0c0:	beq	1f168 <__assert_fail@plt+0xca7c>
   1f0c4:	add	r0, r6, #80	; 0x50
   1f0c8:	bl	12350 <localtime@plt>
   1f0cc:	subs	r9, r0, #0
   1f0d0:	ldr	r0, [r6, #80]	; 0x50
   1f0d4:	bne	1eeec <__assert_fail@plt+0xc800>
   1f0d8:	mov	r2, #1
   1f0dc:	mov	r3, #0
   1f0e0:	cmp	r0, #0
   1f0e4:	strd	r2, [sp, #8]
   1f0e8:	strd	r2, [sp]
   1f0ec:	asr	r3, r0, #31
   1f0f0:	mov	r1, r3
   1f0f4:	sub	r2, fp, #688	; 0x2b0
   1f0f8:	mov	r3, r9
   1f0fc:	bge	1ef78 <__assert_fail@plt+0xc88c>
   1f100:	rsbs	r0, r0, #0
   1f104:	rsc	r1, r1, #0
   1f108:	bl	20e70 <__assert_fail@plt+0xe784>
   1f10c:	mov	r7, r0
   1f110:	bl	123bc <strlen@plt>
   1f114:	str	r7, [sp]
   1f118:	ldr	r3, [pc, #248]	; 1f218 <__assert_fail@plt+0xcb2c>
   1f11c:	ldr	r1, [pc, #248]	; 1f21c <__assert_fail@plt+0xcb30>
   1f120:	rsb	r2, r0, #12
   1f124:	mov	r0, r5
   1f128:	bic	r2, r2, r2, asr #31
   1f12c:	bl	123f8 <fprintf@plt>
   1f130:	cmp	r0, #0
   1f134:	bge	1ef98 <__assert_fail@plt+0xc8ac>
   1f138:	mov	r4, #1000	; 0x3e8
   1f13c:	b	1f168 <__assert_fail@plt+0xca7c>
   1f140:	ldr	r2, [fp, #12]
   1f144:	mov	r1, r5
   1f148:	mov	r0, r6
   1f14c:	bl	1eaa8 <__assert_fail@plt+0xc3bc>
   1f150:	ldr	r3, [pc, #200]	; 1f220 <__assert_fail@plt+0xcb34>
   1f154:	cmp	r0, #0
   1f158:	mov	r7, r0
   1f15c:	moveq	r4, r3
   1f160:	b	1f010 <__assert_fail@plt+0xc924>
   1f164:	mov	r4, #100	; 0x64
   1f168:	bl	12404 <__errno_location@plt>
   1f16c:	mov	r2, #5
   1f170:	ldr	r1, [pc, #172]	; 1f224 <__assert_fail@plt+0xcb38>
   1f174:	ldr	r5, [r0]
   1f178:	mov	r0, #0
   1f17c:	bl	1217c <dcgettext@plt>
   1f180:	mov	r3, r4
   1f184:	mov	r1, r5
   1f188:	mov	r2, r0
   1f18c:	mov	r0, #1
   1f190:	bl	122c0 <error@plt>
   1f194:	ldr	r4, [pc, #140]	; 1f228 <__assert_fail@plt+0xcb3c>
   1f198:	b	1f168 <__assert_fail@plt+0xca7c>
   1f19c:	ldr	r4, [pc, #136]	; 1f22c <__assert_fail@plt+0xcb40>
   1f1a0:	b	1f168 <__assert_fail@plt+0xca7c>
   1f1a4:	mov	r4, #600	; 0x258
   1f1a8:	b	1f168 <__assert_fail@plt+0xca7c>
   1f1ac:	mov	r4, #800	; 0x320
   1f1b0:	b	1f168 <__assert_fail@plt+0xca7c>
   1f1b4:	ldr	r4, [pc, #116]	; 1f230 <__assert_fail@plt+0xcb44>
   1f1b8:	b	1f168 <__assert_fail@plt+0xca7c>
   1f1bc:	ldr	r4, [pc, #112]	; 1f234 <__assert_fail@plt+0xcb48>
   1f1c0:	b	1f168 <__assert_fail@plt+0xca7c>
   1f1c4:	sub	sp, fp, #32
   1f1c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1cc:	andeq	r0, r5, r4, ror #9
   1f1d0:	andeq	sp, r3, r1, ror #21
   1f1d4:	andeq	sp, r3, fp, ror #21
   1f1d8:	andeq	r0, r0, r2, asr #3
   1f1dc:	andeq	sp, r3, r5, ror #21
   1f1e0:	strdeq	sp, [r3], -r2
   1f1e4:	strdeq	sp, [r3], -r8
   1f1e8:	andeq	fp, r3, r0, ror #1
   1f1ec:	andeq	r0, r0, r1, ror r2
   1f1f0:	ldrdeq	sp, [r3], -r7
   1f1f4:	andeq	sp, r3, fp, asr #21
   1f1f8:	andeq	sp, r3, r0, lsl #22
   1f1fc:	andeq	sp, r3, r4, lsl #22
   1f200:	andeq	sp, r3, r9, lsl #22
   1f204:	andeq	r0, r0, r4, lsl r5
   1f208:	andeq	pc, r3, pc, lsr #9
   1f20c:	andeq	r0, r0, r8, ror r5
   1f210:	andeq	r0, r0, sl, lsl #5
   1f214:	andeq	r0, r0, r2, asr r3
   1f218:	andeq	fp, r3, r4, lsl #17
   1f21c:	strdeq	sp, [r3], -sp	; <UNPREDICTABLE>
   1f220:	andeq	r0, r0, r6, asr #10
   1f224:	andeq	sp, r3, lr, lsl #22
   1f228:	andeq	r0, r0, r6, lsr #4
   1f22c:	andeq	r0, r0, sp, lsl #4
   1f230:	andeq	r0, r0, ip, asr #8
   1f234:	andeq	r0, r0, r3, lsl r1
   1f238:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f23c:	cmp	r2, #0
   1f240:	sub	sp, sp, #8192	; 0x2000
   1f244:	sub	sp, sp, #8
   1f248:	mov	r7, r3
   1f24c:	beq	1f300 <__assert_fail@plt+0xcc14>
   1f250:	add	r2, sp, #8192	; 0x2000
   1f254:	add	r2, r2, #40	; 0x28
   1f258:	add	r5, sp, #8
   1f25c:	str	r1, [sp]
   1f260:	mov	sl, r0
   1f264:	mov	r9, r1
   1f268:	mvn	r3, #0
   1f26c:	ldr	r2, [r2]
   1f270:	mov	r1, #8192	; 0x2000
   1f274:	mov	r0, r5
   1f278:	bl	27cf8 <__assert_fail@plt+0x1560c>
   1f27c:	cmp	r0, #8192	; 0x2000
   1f280:	mov	r6, r0
   1f284:	movcc	r4, r5
   1f288:	bcc	1f2b8 <__assert_fail@plt+0xcbcc>
   1f28c:	add	r8, r0, #1
   1f290:	mov	r0, r8
   1f294:	bl	28d44 <__assert_fail@plt+0x16658>
   1f298:	add	r2, sp, #8192	; 0x2000
   1f29c:	add	r2, r2, #40	; 0x28
   1f2a0:	str	r9, [sp]
   1f2a4:	mvn	r3, #0
   1f2a8:	ldr	r2, [r2]
   1f2ac:	mov	r1, r8
   1f2b0:	mov	r4, r0
   1f2b4:	bl	27cf8 <__assert_fail@plt+0x1560c>
   1f2b8:	mov	r1, r6
   1f2bc:	mov	r0, r4
   1f2c0:	bl	1f31c <__assert_fail@plt+0xcc30>
   1f2c4:	mov	r3, #0
   1f2c8:	mov	r2, r4
   1f2cc:	mov	r1, r7
   1f2d0:	strb	r3, [r4, r0]
   1f2d4:	mov	r0, sl
   1f2d8:	bl	123f8 <fprintf@plt>
   1f2dc:	cmp	r4, r5
   1f2e0:	mov	r6, r0
   1f2e4:	beq	1f2f0 <__assert_fail@plt+0xcc04>
   1f2e8:	mov	r0, r4
   1f2ec:	bl	2a01c <__assert_fail@plt+0x17930>
   1f2f0:	mov	r0, r6
   1f2f4:	add	sp, sp, #8192	; 0x2000
   1f2f8:	add	sp, sp, #8
   1f2fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f300:	add	r3, sp, #8192	; 0x2000
   1f304:	add	r3, r3, #40	; 0x28
   1f308:	mov	r1, r7
   1f30c:	ldr	r2, [r3]
   1f310:	bl	123f8 <fprintf@plt>
   1f314:	mov	r6, r0
   1f318:	b	1f2f0 <__assert_fail@plt+0xcc04>
   1f31c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1f320:	sub	sp, sp, #20
   1f324:	mov	r6, r0
   1f328:	mov	r4, r1
   1f32c:	bl	12260 <__ctype_get_mb_cur_max@plt>
   1f330:	add	r8, r6, r4
   1f334:	cmp	r0, #1
   1f338:	movls	r5, #63	; 0x3f
   1f33c:	bls	1f378 <__assert_fail@plt+0xcc8c>
   1f340:	mov	r4, r6
   1f344:	mov	r5, r6
   1f348:	cmp	r5, r8
   1f34c:	bcc	1f38c <__assert_fail@plt+0xcca0>
   1f350:	sub	r4, r4, r6
   1f354:	b	1f380 <__assert_fail@plt+0xcc94>
   1f358:	bl	12374 <__ctype_b_loc@plt>
   1f35c:	ldrb	r3, [r6]
   1f360:	add	r6, r6, #1
   1f364:	lsl	r3, r3, #1
   1f368:	ldr	r2, [r0]
   1f36c:	ldrh	r3, [r2, r3]
   1f370:	tst	r3, #16384	; 0x4000
   1f374:	strbeq	r5, [r6, #-1]
   1f378:	cmp	r8, r6
   1f37c:	bhi	1f358 <__assert_fail@plt+0xcc6c>
   1f380:	mov	r0, r4
   1f384:	add	sp, sp, #20
   1f388:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f38c:	ldrb	r3, [r5]
   1f390:	cmp	r3, #63	; 0x3f
   1f394:	bhi	1f3bc <__assert_fail@plt+0xccd0>
   1f398:	cmp	r3, #37	; 0x25
   1f39c:	bcs	1f3ac <__assert_fail@plt+0xccc0>
   1f3a0:	sub	r2, r3, #32
   1f3a4:	cmp	r2, #3
   1f3a8:	bhi	1f3d8 <__assert_fail@plt+0xccec>
   1f3ac:	add	r5, r5, #1
   1f3b0:	strb	r3, [r4]
   1f3b4:	add	r4, r4, #1
   1f3b8:	b	1f348 <__assert_fail@plt+0xcc5c>
   1f3bc:	cmp	r3, #65	; 0x41
   1f3c0:	bcc	1f3d8 <__assert_fail@plt+0xccec>
   1f3c4:	cmp	r3, #95	; 0x5f
   1f3c8:	bls	1f3ac <__assert_fail@plt+0xccc0>
   1f3cc:	sub	r2, r3, #97	; 0x61
   1f3d0:	cmp	r2, #29
   1f3d4:	b	1f3a8 <__assert_fail@plt+0xccbc>
   1f3d8:	mov	r9, #63	; 0x3f
   1f3dc:	mov	r3, #0
   1f3e0:	str	r3, [sp, #8]
   1f3e4:	str	r3, [sp, #12]
   1f3e8:	add	r3, sp, #8
   1f3ec:	sub	r2, r8, r5
   1f3f0:	mov	r1, r5
   1f3f4:	add	r0, sp, #4
   1f3f8:	bl	2bf50 <__assert_fail@plt+0x19864>
   1f3fc:	cmn	r0, #1
   1f400:	mov	r7, r0
   1f404:	addeq	r5, r5, #1
   1f408:	moveq	r3, #63	; 0x3f
   1f40c:	beq	1f3b0 <__assert_fail@plt+0xccc4>
   1f410:	cmn	r0, #2
   1f414:	moveq	r3, #63	; 0x3f
   1f418:	strbeq	r3, [r4]
   1f41c:	moveq	r5, r8
   1f420:	addeq	r4, r4, #1
   1f424:	beq	1f348 <__assert_fail@plt+0xcc5c>
   1f428:	cmp	r0, #0
   1f42c:	ldr	r0, [sp, #4]
   1f430:	moveq	r7, #1
   1f434:	bl	12074 <wcwidth@plt>
   1f438:	add	r3, r5, r7
   1f43c:	cmp	r0, #0
   1f440:	strblt	r9, [r4]
   1f444:	movlt	r5, r3
   1f448:	addlt	r4, r4, #1
   1f44c:	blt	1f468 <__assert_fail@plt+0xcd7c>
   1f450:	sub	r2, r4, #1
   1f454:	ldrb	r1, [r5], #1
   1f458:	cmp	r3, r5
   1f45c:	strb	r1, [r2, #1]!
   1f460:	bne	1f454 <__assert_fail@plt+0xcd68>
   1f464:	add	r4, r4, r7
   1f468:	add	r0, sp, #8
   1f46c:	bl	12134 <mbsinit@plt>
   1f470:	cmp	r0, #0
   1f474:	beq	1f3e8 <__assert_fail@plt+0xccfc>
   1f478:	b	1f348 <__assert_fail@plt+0xcc5c>
   1f47c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f480:	mov	r5, #0
   1f484:	ldr	r4, [pc, #236]	; 1f578 <__assert_fail@plt+0xce8c>
   1f488:	mov	r6, r0
   1f48c:	mov	r7, r5
   1f490:	mov	fp, #12
   1f494:	mov	r8, r4
   1f498:	mul	sl, fp, r7
   1f49c:	mov	r1, r6
   1f4a0:	ldr	r9, [sl, r4]
   1f4a4:	mov	r0, r9
   1f4a8:	bl	11ffc <strcmp@plt>
   1f4ac:	cmp	r0, #0
   1f4b0:	beq	1f568 <__assert_fail@plt+0xce7c>
   1f4b4:	mov	r0, r9
   1f4b8:	bl	28164 <__assert_fail@plt+0x15a78>
   1f4bc:	bl	123bc <strlen@plt>
   1f4c0:	add	r7, r7, #1
   1f4c4:	cmp	r7, #13
   1f4c8:	add	r0, r0, #2
   1f4cc:	add	r5, r5, r0
   1f4d0:	bne	1f498 <__assert_fail@plt+0xcdac>
   1f4d4:	add	r0, r5, #1
   1f4d8:	bl	28d44 <__assert_fail@plt+0x16658>
   1f4dc:	ldr	r7, [pc, #152]	; 1f57c <__assert_fail@plt+0xce90>
   1f4e0:	ldr	sl, [pc, #152]	; 1f580 <__assert_fail@plt+0xce94>
   1f4e4:	mov	fp, #0
   1f4e8:	mov	r9, #12
   1f4ec:	mov	r5, r0
   1f4f0:	mov	r4, r0
   1f4f4:	mul	r3, r9, fp
   1f4f8:	add	fp, fp, #1
   1f4fc:	ldr	r0, [r8, r3]
   1f500:	bl	28164 <__assert_fail@plt+0x15a78>
   1f504:	mov	r1, r7
   1f508:	mov	r2, r0
   1f50c:	mov	r0, r4
   1f510:	bl	12590 <sprintf@plt>
   1f514:	cmp	fp, #13
   1f518:	add	r4, r4, r0
   1f51c:	bne	1f554 <__assert_fail@plt+0xce68>
   1f520:	mov	r2, #5
   1f524:	ldr	r1, [pc, #88]	; 1f584 <__assert_fail@plt+0xce98>
   1f528:	mov	r0, #0
   1f52c:	bl	1217c <dcgettext@plt>
   1f530:	mov	r4, r0
   1f534:	mov	r0, r6
   1f538:	bl	28164 <__assert_fail@plt+0x15a78>
   1f53c:	str	r5, [sp]
   1f540:	mov	r2, r4
   1f544:	mov	r1, #0
   1f548:	mov	r3, r0
   1f54c:	mov	r0, #1
   1f550:	bl	122c0 <error@plt>
   1f554:	mov	r0, r4
   1f558:	mov	r1, sl
   1f55c:	bl	12278 <strcpy@plt>
   1f560:	add	r4, r4, #2
   1f564:	b	1f4f4 <__assert_fail@plt+0xce08>
   1f568:	add	r4, r4, sl
   1f56c:	ldr	r0, [r4, #8]
   1f570:	add	sp, sp, #12
   1f574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f578:	andeq	sp, r3, r4, lsr fp
   1f57c:	andeq	pc, r3, pc, lsr #9
   1f580:	andeq	fp, r3, r0, ror #1
   1f584:	ldrdeq	sp, [r3], -r0
   1f588:	cmp	r0, #12
   1f58c:	movls	r3, #12
   1f590:	mulls	r0, r3, r0
   1f594:	ldrls	r3, [pc, #8]	; 1f5a4 <__assert_fail@plt+0xceb8>
   1f598:	ldrls	r0, [r3, r0]
   1f59c:	movhi	r0, #0
   1f5a0:	bx	lr
   1f5a4:	andeq	sp, r3, r4, lsr fp
   1f5a8:	cmp	r0, #12
   1f5ac:	movls	r2, #12
   1f5b0:	ldrls	r3, [pc, #12]	; 1f5c4 <__assert_fail@plt+0xced8>
   1f5b4:	mlals	r0, r2, r0, r3
   1f5b8:	ldrls	r0, [r0, #8]
   1f5bc:	mvnhi	r0, #0
   1f5c0:	bx	lr
   1f5c4:	andeq	sp, r3, r4, lsr fp
   1f5c8:	cmp	r0, #12
   1f5cc:	movls	r2, #12
   1f5d0:	ldrls	r3, [pc, #12]	; 1f5e4 <__assert_fail@plt+0xcef8>
   1f5d4:	mlals	r0, r2, r0, r3
   1f5d8:	ldrls	r0, [r0, #4]
   1f5dc:	movhi	r0, #0
   1f5e0:	bx	lr
   1f5e4:	andeq	sp, r3, r4, lsr fp
   1f5e8:	cmp	r0, #12
   1f5ec:	bhi	1f60c <__assert_fail@plt+0xcf20>
   1f5f0:	ldr	r2, [pc, #88]	; 1f650 <__assert_fail@plt+0xcf64>
   1f5f4:	mov	r3, #12
   1f5f8:	mla	r3, r3, r0, r2
   1f5fc:	ldr	ip, [r3, #8]
   1f600:	mov	r3, #0
   1f604:	cmp	r3, r0
   1f608:	bne	1f62c <__assert_fail@plt+0xcf40>
   1f60c:	mvn	r0, #0
   1f610:	bx	lr
   1f614:	add	r3, r3, #1
   1f618:	cmp	r3, r0
   1f61c:	add	r2, r2, #12
   1f620:	bne	1f630 <__assert_fail@plt+0xcf44>
   1f624:	mvn	r0, #0
   1f628:	pop	{pc}		; (ldr pc, [sp], #4)
   1f62c:	push	{lr}		; (str lr, [sp, #-4]!)
   1f630:	ldr	lr, [r2, #4]
   1f634:	tst	r1, lr
   1f638:	beq	1f614 <__assert_fail@plt+0xcf28>
   1f63c:	ldr	lr, [r2, #8]
   1f640:	cmp	ip, lr
   1f644:	bne	1f614 <__assert_fail@plt+0xcf28>
   1f648:	mov	r0, r3
   1f64c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f650:	andeq	sp, r3, r4, lsr fp
   1f654:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1f658:	mov	r4, r0
   1f65c:	mov	r7, r1
   1f660:	bl	12404 <__errno_location@plt>
   1f664:	mov	r8, #0
   1f668:	mov	r2, #10
   1f66c:	add	r1, sp, #12
   1f670:	str	r8, [r0]
   1f674:	mov	r5, r0
   1f678:	mov	r0, r4
   1f67c:	bl	12008 <strtol@plt>
   1f680:	sub	r3, r0, #-2147483647	; 0x80000001
   1f684:	cmn	r3, #3
   1f688:	bls	1f6a0 <__assert_fail@plt+0xcfb4>
   1f68c:	ldr	r1, [r5]
   1f690:	ldr	r2, [pc, #180]	; 1f74c <__assert_fail@plt+0xd060>
   1f694:	mov	r3, r4
   1f698:	mov	r0, #1
   1f69c:	bl	122c0 <error@plt>
   1f6a0:	ldr	r3, [sp, #12]
   1f6a4:	ldrb	r6, [r3]
   1f6a8:	cmp	r6, #0
   1f6ac:	beq	1f704 <__assert_fail@plt+0xd018>
   1f6b0:	mov	r2, #5
   1f6b4:	ldr	r1, [pc, #148]	; 1f750 <__assert_fail@plt+0xd064>
   1f6b8:	mov	r0, r8
   1f6bc:	ldr	r5, [r5]
   1f6c0:	bl	1217c <dcgettext@plt>
   1f6c4:	ldr	r2, [sp, #12]
   1f6c8:	mov	r1, r7
   1f6cc:	mov	r6, r0
   1f6d0:	mov	r0, r8
   1f6d4:	bl	27f14 <__assert_fail@plt+0x15828>
   1f6d8:	mov	r2, r4
   1f6dc:	mov	r1, r7
   1f6e0:	mov	r8, r0
   1f6e4:	mov	r0, #1
   1f6e8:	bl	27f14 <__assert_fail@plt+0x15828>
   1f6ec:	mov	r3, r8
   1f6f0:	mov	r2, r6
   1f6f4:	mov	r1, r5
   1f6f8:	str	r0, [sp]
   1f6fc:	mov	r0, #1
   1f700:	bl	122c0 <error@plt>
   1f704:	cmp	r4, r3
   1f708:	bne	1f744 <__assert_fail@plt+0xd058>
   1f70c:	mov	r2, #5
   1f710:	ldr	r1, [pc, #60]	; 1f754 <__assert_fail@plt+0xd068>
   1f714:	mov	r0, r6
   1f718:	ldr	r5, [r5]
   1f71c:	bl	1217c <dcgettext@plt>
   1f720:	mov	r2, r4
   1f724:	mov	r1, r7
   1f728:	mov	r8, r0
   1f72c:	mov	r0, r6
   1f730:	bl	27f14 <__assert_fail@plt+0x15828>
   1f734:	mov	r2, r8
   1f738:	mov	r1, r5
   1f73c:	mov	r3, r0
   1f740:	b	1f698 <__assert_fail@plt+0xcfac>
   1f744:	add	sp, sp, #16
   1f748:	pop	{r4, r5, r6, r7, r8, pc}
   1f74c:	andeq	pc, r3, pc, lsr #9
   1f750:	andeq	sp, r3, sp, ror #24
   1f754:	andeq	sp, r3, r8, lsl #25
   1f758:	push	{r4, r5, r6, lr}
   1f75c:	mov	r4, r0
   1f760:	ldr	r5, [sp, #16]
   1f764:	subs	r0, r2, #0
   1f768:	movne	r2, #0
   1f76c:	strne	r2, [r3]
   1f770:	strne	r2, [r5]
   1f774:	bne	1f79c <__assert_fail@plt+0xd0b0>
   1f778:	ldr	r2, [r5]
   1f77c:	ldr	ip, [r3]
   1f780:	add	ip, ip, r2
   1f784:	str	ip, [r3]
   1f788:	ldrb	r2, [r4, ip]
   1f78c:	cmp	r2, #0
   1f790:	popeq	{r4, r5, r6, pc}
   1f794:	add	ip, ip, #1
   1f798:	str	ip, [r3]
   1f79c:	ldr	r0, [r3]
   1f7a0:	ldrb	r3, [r1]
   1f7a4:	add	r4, r4, r0
   1f7a8:	cmp	r3, #0
   1f7ac:	beq	1f7c4 <__assert_fail@plt+0xd0d8>
   1f7b0:	mov	r0, r4
   1f7b4:	bl	12608 <strpbrk@plt>
   1f7b8:	cmp	r0, #0
   1f7bc:	subne	r0, r0, r4
   1f7c0:	bne	1f7cc <__assert_fail@plt+0xd0e0>
   1f7c4:	mov	r0, r4
   1f7c8:	bl	123bc <strlen@plt>
   1f7cc:	str	r0, [r5]
   1f7d0:	mov	r0, #1
   1f7d4:	pop	{r4, r5, r6, pc}
   1f7d8:	push	{r4, r5, lr}
   1f7dc:	mov	r2, #5
   1f7e0:	sub	sp, sp, #20
   1f7e4:	mov	r4, r0
   1f7e8:	mov	r5, r1
   1f7ec:	mov	r0, #0
   1f7f0:	ldr	r1, [pc, #52]	; 1f82c <__assert_fail@plt+0xd140>
   1f7f4:	bl	1217c <dcgettext@plt>
   1f7f8:	ldr	r3, [pc, #48]	; 1f830 <__assert_fail@plt+0xd144>
   1f7fc:	ldr	r2, [pc, #48]	; 1f834 <__assert_fail@plt+0xd148>
   1f800:	str	r3, [sp, #8]
   1f804:	ldr	r3, [pc, #44]	; 1f838 <__assert_fail@plt+0xd14c>
   1f808:	str	r3, [sp, #4]
   1f80c:	ldr	r3, [pc, #40]	; 1f83c <__assert_fail@plt+0xd150>
   1f810:	str	r3, [sp]
   1f814:	mov	r3, r5
   1f818:	mov	r1, r0
   1f81c:	mov	r0, r4
   1f820:	bl	123f8 <fprintf@plt>
   1f824:	add	sp, sp, #20
   1f828:	pop	{r4, r5, pc}
   1f82c:	andeq	sp, r3, r0, lsr #25
   1f830:	muleq	r3, r5, sp
   1f834:	andeq	sp, r3, lr, ror #26
   1f838:	andeq	sp, r3, fp, lsr #27
   1f83c:	muleq	r3, r1, sl
   1f840:	ldr	r3, [pc, #28]	; 1f864 <__assert_fail@plt+0xd178>
   1f844:	push	{r0, r1, r2, lr}
   1f848:	str	r3, [sp, #4]
   1f84c:	mov	r3, #0
   1f850:	str	r3, [sp]
   1f854:	mov	r2, r3
   1f858:	bl	1f99c <__assert_fail@plt+0xd2b0>
   1f85c:	add	sp, sp, #12
   1f860:	pop	{pc}		; (ldr pc, [sp], #4)
   1f864:	andeq	r2, r1, ip, lsr #6
   1f868:	push	{r4, lr}
   1f86c:	mov	r4, r0
   1f870:	mov	r0, #24
   1f874:	bl	2bf10 <__assert_fail@plt+0x19824>
   1f878:	cmp	r0, #0
   1f87c:	movne	r3, #0
   1f880:	strne	r3, [r0]
   1f884:	strne	r4, [r0, #16]
   1f888:	strne	r4, [r0, #20]
   1f88c:	pop	{r4, pc}
   1f890:	push	{r4, lr}
   1f894:	mov	r4, r0
   1f898:	mov	r0, #24
   1f89c:	bl	2bf10 <__assert_fail@plt+0x19824>
   1f8a0:	cmp	r0, #0
   1f8a4:	movne	r3, #0
   1f8a8:	strne	r4, [r0]
   1f8ac:	strne	r3, [r0, #8]
   1f8b0:	strne	r3, [r0, #12]
   1f8b4:	strne	r3, [r0, #4]
   1f8b8:	strne	r3, [r0, #16]
   1f8bc:	pop	{r4, pc}
   1f8c0:	ldr	r3, [r0]
   1f8c4:	push	{r4, r5, r6, lr}
   1f8c8:	cmp	r3, #0
   1f8cc:	mov	r4, r0
   1f8d0:	beq	1f92c <__assert_fail@plt+0xd240>
   1f8d4:	mov	r5, r1
   1f8d8:	mov	r2, #0
   1f8dc:	add	r1, r0, #12
   1f8e0:	add	r0, r0, #8
   1f8e4:	bl	12644 <getdelim@plt>
   1f8e8:	cmp	r0, #0
   1f8ec:	bge	1f910 <__assert_fail@plt+0xd224>
   1f8f0:	ldr	r0, [r4]
   1f8f4:	bl	12398 <feof@plt>
   1f8f8:	cmp	r0, #0
   1f8fc:	movne	r0, #2
   1f900:	moveq	r0, #4
   1f904:	str	r0, [r5]
   1f908:	mov	r0, #0
   1f90c:	pop	{r4, r5, r6, pc}
   1f910:	mov	r3, #1
   1f914:	str	r3, [r5]
   1f918:	ldr	r3, [r4, #4]
   1f91c:	ldr	r0, [r4, #8]
   1f920:	add	r3, r3, #1
   1f924:	str	r3, [r4, #4]
   1f928:	pop	{r4, r5, r6, pc}
   1f92c:	ldr	r3, [r0, #20]
   1f930:	ldr	r0, [r3]
   1f934:	cmp	r0, #0
   1f938:	moveq	r3, #2
   1f93c:	movne	r2, #1
   1f940:	addne	r3, r3, #4
   1f944:	strne	r2, [r1]
   1f948:	streq	r3, [r1]
   1f94c:	strne	r3, [r4, #20]
   1f950:	pop	{r4, r5, r6, pc}
   1f954:	ldr	r3, [r0]
   1f958:	cmp	r3, #0
   1f95c:	ldreq	r3, [r0, #20]
   1f960:	ldrne	r0, [r0, #4]
   1f964:	ldreq	r0, [r0, #16]
   1f968:	subeq	r0, r3, r0
   1f96c:	asreq	r0, r0, #2
   1f970:	bx	lr
   1f974:	ldr	r3, [r0]
   1f978:	push	{r4, lr}
   1f97c:	cmp	r3, #0
   1f980:	mov	r4, r0
   1f984:	beq	1f990 <__assert_fail@plt+0xd2a4>
   1f988:	ldr	r0, [r0, #8]
   1f98c:	bl	2a01c <__assert_fail@plt+0x17930>
   1f990:	mov	r0, r4
   1f994:	pop	{r4, lr}
   1f998:	b	2a01c <__assert_fail@plt+0x17930>
   1f99c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f9a0:	sub	sp, sp, #1024	; 0x400
   1f9a4:	mov	r9, r1
   1f9a8:	ldr	r6, [sp, #1056]	; 0x420
   1f9ac:	ldr	r1, [pc, #352]	; 1fb14 <__assert_fail@plt+0xd428>
   1f9b0:	cmp	r6, #0
   1f9b4:	moveq	r6, r1
   1f9b8:	subs	r8, r2, #0
   1f9bc:	moveq	r3, #1024	; 0x400
   1f9c0:	mvn	r5, #-2147483648	; 0x80000000
   1f9c4:	moveq	r8, sp
   1f9c8:	ldr	sl, [sp, #1060]	; 0x424
   1f9cc:	cmp	r3, r5
   1f9d0:	mov	r7, r0
   1f9d4:	movcc	r5, r3
   1f9d8:	mov	r4, r8
   1f9dc:	mov	r3, r5
   1f9e0:	mov	r2, r4
   1f9e4:	mov	r1, r9
   1f9e8:	mov	r0, r7
   1f9ec:	blx	sl
   1f9f0:	cmp	r0, #0
   1f9f4:	bge	1fa24 <__assert_fail@plt+0xd338>
   1f9f8:	cmp	r8, r4
   1f9fc:	beq	1fa1c <__assert_fail@plt+0xd330>
   1fa00:	bl	12404 <__errno_location@plt>
   1fa04:	ldr	r3, [r6, #8]
   1fa08:	ldr	r7, [r0]
   1fa0c:	mov	r5, r0
   1fa10:	mov	r0, r4
   1fa14:	blx	r3
   1fa18:	str	r7, [r5]
   1fa1c:	mov	r4, #0
   1fa20:	b	1fa68 <__assert_fail@plt+0xd37c>
   1fa24:	cmp	r0, r5
   1fa28:	bge	1faa4 <__assert_fail@plt+0xd3b8>
   1fa2c:	mov	r3, #0
   1fa30:	strb	r3, [r4, r0]
   1fa34:	mov	r3, sp
   1fa38:	cmp	r4, r3
   1fa3c:	add	r7, r0, #1
   1fa40:	bne	1fa74 <__assert_fail@plt+0xd388>
   1fa44:	ldr	r3, [r6]
   1fa48:	mov	r0, r7
   1fa4c:	blx	r3
   1fa50:	cmp	r0, #0
   1fa54:	beq	1fb0c <__assert_fail@plt+0xd420>
   1fa58:	mov	r1, r4
   1fa5c:	mov	r2, r7
   1fa60:	bl	120f8 <memcpy@plt>
   1fa64:	mov	r4, r0
   1fa68:	mov	r0, r4
   1fa6c:	add	sp, sp, #1024	; 0x400
   1fa70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fa74:	cmp	r8, r4
   1fa78:	cmpne	r7, r5
   1fa7c:	bge	1fa68 <__assert_fail@plt+0xd37c>
   1fa80:	ldr	r3, [r6, #4]
   1fa84:	cmp	r3, #0
   1fa88:	beq	1fa68 <__assert_fail@plt+0xd37c>
   1fa8c:	mov	r0, r4
   1fa90:	mov	r1, r7
   1fa94:	blx	r3
   1fa98:	cmp	r0, #0
   1fa9c:	movne	r4, r0
   1faa0:	b	1fa68 <__assert_fail@plt+0xd37c>
   1faa4:	cmp	r8, r4
   1faa8:	beq	1fab8 <__assert_fail@plt+0xd3cc>
   1faac:	ldr	r3, [r6, #8]
   1fab0:	mov	r0, r4
   1fab4:	blx	r3
   1fab8:	cmn	r5, #-1073741822	; 0xc0000002
   1fabc:	ble	1fad0 <__assert_fail@plt+0xd3e4>
   1fac0:	bl	12404 <__errno_location@plt>
   1fac4:	mov	r3, #36	; 0x24
   1fac8:	str	r3, [r0]
   1facc:	b	1fa1c <__assert_fail@plt+0xd330>
   1fad0:	lsl	r5, r5, #1
   1fad4:	add	r5, r5, #1
   1fad8:	ldr	r3, [r6]
   1fadc:	mov	r0, r5
   1fae0:	blx	r3
   1fae4:	subs	r4, r0, #0
   1fae8:	bne	1f9dc <__assert_fail@plt+0xd2f0>
   1faec:	ldr	r3, [r6, #12]
   1faf0:	cmp	r3, #0
   1faf4:	beq	1fb00 <__assert_fail@plt+0xd414>
   1faf8:	mov	r0, r5
   1fafc:	blx	r3
   1fb00:	bl	12404 <__errno_location@plt>
   1fb04:	mov	r3, #12
   1fb08:	b	1fac8 <__assert_fail@plt+0xd3dc>
   1fb0c:	mov	r5, r7
   1fb10:	b	1faec <__assert_fail@plt+0xd400>
   1fb14:	andeq	pc, r3, r8, asr #8
   1fb18:	push	{r4, r5, r6, lr}
   1fb1c:	mov	r2, #0
   1fb20:	mov	r5, r1
   1fb24:	mov	r1, #1
   1fb28:	mov	r4, r0
   1fb2c:	bl	29e08 <__assert_fail@plt+0x1771c>
   1fb30:	cmp	r0, #0
   1fb34:	blt	1fb6c <__assert_fail@plt+0xd480>
   1fb38:	cmp	r5, #0
   1fb3c:	orrne	r2, r0, #1
   1fb40:	biceq	r2, r0, #1
   1fb44:	cmp	r2, r0
   1fb48:	beq	1fb74 <__assert_fail@plt+0xd488>
   1fb4c:	mov	r1, #2
   1fb50:	mov	r0, r4
   1fb54:	bl	29e08 <__assert_fail@plt+0x1771c>
   1fb58:	cmn	r0, #1
   1fb5c:	movne	r0, #0
   1fb60:	moveq	r0, #1
   1fb64:	rsb	r0, r0, #0
   1fb68:	pop	{r4, r5, r6, pc}
   1fb6c:	mvn	r0, #0
   1fb70:	pop	{r4, r5, r6, pc}
   1fb74:	mov	r0, #0
   1fb78:	pop	{r4, r5, r6, pc}
   1fb7c:	mov	r2, #0
   1fb80:	ldr	r1, [pc]	; 1fb88 <__assert_fail@plt+0xd49c>
   1fb84:	b	29e08 <__assert_fail@plt+0x1771c>
   1fb88:	andeq	r0, r0, r6, lsl #8
   1fb8c:	ldr	r3, [pc, #4]	; 1fb98 <__assert_fail@plt+0xd4ac>
   1fb90:	str	r0, [r3]
   1fb94:	bx	lr
   1fb98:	andeq	r0, r5, r4, lsl #26
   1fb9c:	ldr	r3, [pc, #4]	; 1fba8 <__assert_fail@plt+0xd4bc>
   1fba0:	strb	r0, [r3, #4]
   1fba4:	bx	lr
   1fba8:	andeq	r0, r5, r4, lsl #26
   1fbac:	ldr	r3, [pc, #192]	; 1fc74 <__assert_fail@plt+0xd588>
   1fbb0:	push	{r0, r1, r4, r5, r6, lr}
   1fbb4:	ldr	r0, [r3]
   1fbb8:	bl	3893c <__assert_fail@plt+0x26250>
   1fbbc:	cmp	r0, #0
   1fbc0:	beq	1fc58 <__assert_fail@plt+0xd56c>
   1fbc4:	ldr	r3, [pc, #172]	; 1fc78 <__assert_fail@plt+0xd58c>
   1fbc8:	mov	r4, r3
   1fbcc:	ldrb	r2, [r3, #4]
   1fbd0:	cmp	r2, #0
   1fbd4:	beq	1fbe8 <__assert_fail@plt+0xd4fc>
   1fbd8:	bl	12404 <__errno_location@plt>
   1fbdc:	ldr	r3, [r0]
   1fbe0:	cmp	r3, #32
   1fbe4:	beq	1fc58 <__assert_fail@plt+0xd56c>
   1fbe8:	mov	r2, #5
   1fbec:	ldr	r1, [pc, #136]	; 1fc7c <__assert_fail@plt+0xd590>
   1fbf0:	mov	r0, #0
   1fbf4:	bl	1217c <dcgettext@plt>
   1fbf8:	ldr	r4, [r4]
   1fbfc:	cmp	r4, #0
   1fc00:	mov	r5, r0
   1fc04:	beq	1fc3c <__assert_fail@plt+0xd550>
   1fc08:	bl	12404 <__errno_location@plt>
   1fc0c:	ldr	r6, [r0]
   1fc10:	mov	r0, r4
   1fc14:	bl	28014 <__assert_fail@plt+0x15928>
   1fc18:	str	r5, [sp]
   1fc1c:	ldr	r2, [pc, #92]	; 1fc80 <__assert_fail@plt+0xd594>
   1fc20:	mov	r1, r6
   1fc24:	mov	r3, r0
   1fc28:	mov	r0, #0
   1fc2c:	bl	122c0 <error@plt>
   1fc30:	ldr	r3, [pc, #76]	; 1fc84 <__assert_fail@plt+0xd598>
   1fc34:	ldr	r0, [r3]
   1fc38:	bl	120ec <_exit@plt>
   1fc3c:	bl	12404 <__errno_location@plt>
   1fc40:	mov	r3, r5
   1fc44:	ldr	r2, [pc, #60]	; 1fc88 <__assert_fail@plt+0xd59c>
   1fc48:	ldr	r1, [r0]
   1fc4c:	mov	r0, r4
   1fc50:	bl	122c0 <error@plt>
   1fc54:	b	1fc30 <__assert_fail@plt+0xd544>
   1fc58:	ldr	r3, [pc, #44]	; 1fc8c <__assert_fail@plt+0xd5a0>
   1fc5c:	ldr	r0, [r3]
   1fc60:	bl	3893c <__assert_fail@plt+0x26250>
   1fc64:	cmp	r0, #0
   1fc68:	bne	1fc30 <__assert_fail@plt+0xd544>
   1fc6c:	add	sp, sp, #8
   1fc70:	pop	{r4, r5, r6, pc}
   1fc74:	andeq	r0, r5, ip, ror #10
   1fc78:	andeq	r0, r5, r4, lsl #26
   1fc7c:	ldrdeq	sp, [r3], -sl
   1fc80:	andeq	sp, r3, r6, ror #27
   1fc84:	andeq	r0, r5, r4, lsl #10
   1fc88:	andeq	pc, r3, pc, lsr #9
   1fc8c:	andeq	r0, r5, r0, ror #10
   1fc90:	push	{r4, r5, r6, r7, r8, lr}
   1fc94:	bl	122d8 <opendir@plt>
   1fc98:	subs	r4, r0, #0
   1fc9c:	beq	1fce0 <__assert_fail@plt+0xd5f4>
   1fca0:	bl	125cc <dirfd@plt>
   1fca4:	cmp	r0, #2
   1fca8:	bhi	1fce0 <__assert_fail@plt+0xd5f4>
   1fcac:	mov	r2, #3
   1fcb0:	ldr	r1, [pc, #84]	; 1fd0c <__assert_fail@plt+0xd620>
   1fcb4:	bl	29e08 <__assert_fail@plt+0x1771c>
   1fcb8:	subs	r7, r0, #0
   1fcbc:	bge	1fce8 <__assert_fail@plt+0xd5fc>
   1fcc0:	bl	12404 <__errno_location@plt>
   1fcc4:	mov	r5, #0
   1fcc8:	ldr	r6, [r0]
   1fccc:	mov	r0, r4
   1fcd0:	bl	126bc <closedir@plt>
   1fcd4:	bl	12404 <__errno_location@plt>
   1fcd8:	mov	r4, r5
   1fcdc:	str	r6, [r0]
   1fce0:	mov	r0, r4
   1fce4:	pop	{r4, r5, r6, r7, r8, pc}
   1fce8:	bl	125a8 <fdopendir@plt>
   1fcec:	mov	r5, r0
   1fcf0:	bl	12404 <__errno_location@plt>
   1fcf4:	cmp	r5, #0
   1fcf8:	ldr	r6, [r0]
   1fcfc:	bne	1fccc <__assert_fail@plt+0xd5e0>
   1fd00:	mov	r0, r7
   1fd04:	bl	126a4 <close@plt>
   1fd08:	b	1fccc <__assert_fail@plt+0xd5e0>
   1fd0c:	andeq	r0, r0, r6, lsl #8
   1fd10:	push	{r4, r5, r6, lr}
   1fd14:	mov	r6, r0
   1fd18:	bl	388ac <__assert_fail@plt+0x261c0>
   1fd1c:	ldrb	r3, [r0]
   1fd20:	cmp	r3, #0
   1fd24:	beq	1fd60 <__assert_fail@plt+0xd674>
   1fd28:	mov	r5, r0
   1fd2c:	bl	3890c <__assert_fail@plt+0x26220>
   1fd30:	ldrb	r4, [r5, r0]
   1fd34:	cmp	r4, #47	; 0x2f
   1fd38:	movne	r4, r0
   1fd3c:	addeq	r4, r0, #1
   1fd40:	add	r0, r4, #1
   1fd44:	bl	28d58 <__assert_fail@plt+0x1666c>
   1fd48:	mov	r2, r4
   1fd4c:	mov	r1, r5
   1fd50:	bl	120f8 <memcpy@plt>
   1fd54:	mov	r2, #0
   1fd58:	strb	r2, [r0, r4]
   1fd5c:	pop	{r4, r5, r6, pc}
   1fd60:	mov	r0, r6
   1fd64:	bl	3890c <__assert_fail@plt+0x26220>
   1fd68:	mov	r5, r6
   1fd6c:	mov	r4, r0
   1fd70:	b	1fd40 <__assert_fail@plt+0xd654>
   1fd74:	push	{r4, r5, r6, lr}
   1fd78:	mov	r5, r0
   1fd7c:	ldrb	r4, [r0]
   1fd80:	bl	388ac <__assert_fail@plt+0x261c0>
   1fd84:	sub	r4, r4, #47	; 0x2f
   1fd88:	clz	r4, r4
   1fd8c:	lsr	r4, r4, #5
   1fd90:	sub	r0, r0, r5
   1fd94:	cmp	r0, r4
   1fd98:	bhi	1fda0 <__assert_fail@plt+0xd6b4>
   1fd9c:	pop	{r4, r5, r6, pc}
   1fda0:	sub	r3, r0, #1
   1fda4:	ldrb	r2, [r5, r3]
   1fda8:	cmp	r2, #47	; 0x2f
   1fdac:	popne	{r4, r5, r6, pc}
   1fdb0:	mov	r0, r3
   1fdb4:	b	1fd94 <__assert_fail@plt+0xd6a8>
   1fdb8:	push	{r4, r5, r6, lr}
   1fdbc:	mov	r6, r0
   1fdc0:	bl	1fd74 <__assert_fail@plt+0xd688>
   1fdc4:	add	r3, r0, #1
   1fdc8:	mov	r4, r0
   1fdcc:	cmp	r0, #0
   1fdd0:	movne	r0, r3
   1fdd4:	addeq	r0, r3, #1
   1fdd8:	bl	2bf10 <__assert_fail@plt+0x19824>
   1fddc:	subs	r5, r0, #0
   1fde0:	beq	1fe08 <__assert_fail@plt+0xd71c>
   1fde4:	mov	r2, r4
   1fde8:	mov	r1, r6
   1fdec:	bl	120f8 <memcpy@plt>
   1fdf0:	cmp	r4, #0
   1fdf4:	moveq	r3, #46	; 0x2e
   1fdf8:	moveq	r4, #1
   1fdfc:	strbeq	r3, [r5]
   1fe00:	mov	r3, #0
   1fe04:	strb	r3, [r5, r4]
   1fe08:	mov	r0, r5
   1fe0c:	pop	{r4, r5, r6, pc}
   1fe10:	push	{r4, lr}
   1fe14:	mov	r4, r0
   1fe18:	bl	388ac <__assert_fail@plt+0x261c0>
   1fe1c:	ldrb	r3, [r0]
   1fe20:	cmp	r3, #0
   1fe24:	movne	r4, r0
   1fe28:	mov	r0, r4
   1fe2c:	bl	3890c <__assert_fail@plt+0x26220>
   1fe30:	mov	r2, #0
   1fe34:	ldrb	r3, [r4, r0]
   1fe38:	strb	r2, [r4, r0]
   1fe3c:	subs	r0, r3, r2
   1fe40:	movne	r0, #1
   1fe44:	pop	{r4, pc}
   1fe48:	push	{r1, r2, r3}
   1fe4c:	push	{r0, r1, lr}
   1fe50:	ldr	r1, [sp, #12]
   1fe54:	ands	r2, r1, #64	; 0x40
   1fe58:	addne	r3, sp, #16
   1fe5c:	ldrne	r2, [sp, #16]
   1fe60:	strne	r3, [sp, #4]
   1fe64:	bl	122f0 <open64@plt>
   1fe68:	bl	2888c <__assert_fail@plt+0x161a0>
   1fe6c:	add	sp, sp, #8
   1fe70:	pop	{lr}		; (ldr lr, [sp], #4)
   1fe74:	add	sp, sp, #12
   1fe78:	bx	lr
   1fe7c:	and	r3, r0, #61440	; 0xf000
   1fe80:	cmp	r3, #32768	; 0x8000
   1fe84:	moveq	r3, #45	; 0x2d
   1fe88:	beq	1fed4 <__assert_fail@plt+0xd7e8>
   1fe8c:	cmp	r3, #16384	; 0x4000
   1fe90:	moveq	r3, #100	; 0x64
   1fe94:	beq	1fed4 <__assert_fail@plt+0xd7e8>
   1fe98:	cmp	r3, #24576	; 0x6000
   1fe9c:	moveq	r3, #98	; 0x62
   1fea0:	beq	1fed4 <__assert_fail@plt+0xd7e8>
   1fea4:	cmp	r3, #8192	; 0x2000
   1fea8:	moveq	r3, #99	; 0x63
   1feac:	beq	1fed4 <__assert_fail@plt+0xd7e8>
   1feb0:	cmp	r3, #40960	; 0xa000
   1feb4:	moveq	r3, #108	; 0x6c
   1feb8:	beq	1fed4 <__assert_fail@plt+0xd7e8>
   1febc:	cmp	r3, #4096	; 0x1000
   1fec0:	moveq	r3, #112	; 0x70
   1fec4:	beq	1fed4 <__assert_fail@plt+0xd7e8>
   1fec8:	cmp	r3, #49152	; 0xc000
   1fecc:	moveq	r3, #115	; 0x73
   1fed0:	movne	r3, #63	; 0x3f
   1fed4:	tst	r0, #256	; 0x100
   1fed8:	strb	r3, [r1]
   1fedc:	movne	r3, #114	; 0x72
   1fee0:	moveq	r3, #45	; 0x2d
   1fee4:	tst	r0, #128	; 0x80
   1fee8:	strb	r3, [r1, #1]
   1feec:	movne	r3, #119	; 0x77
   1fef0:	moveq	r3, #45	; 0x2d
   1fef4:	tst	r0, #2048	; 0x800
   1fef8:	strb	r3, [r1, #2]
   1fefc:	and	r3, r0, #64	; 0x40
   1ff00:	beq	1ffa0 <__assert_fail@plt+0xd8b4>
   1ff04:	cmp	r3, #0
   1ff08:	movne	r3, #115	; 0x73
   1ff0c:	moveq	r3, #83	; 0x53
   1ff10:	tst	r0, #32
   1ff14:	strb	r3, [r1, #3]
   1ff18:	movne	r3, #114	; 0x72
   1ff1c:	moveq	r3, #45	; 0x2d
   1ff20:	tst	r0, #16
   1ff24:	strb	r3, [r1, #4]
   1ff28:	movne	r3, #119	; 0x77
   1ff2c:	moveq	r3, #45	; 0x2d
   1ff30:	tst	r0, #1024	; 0x400
   1ff34:	strb	r3, [r1, #5]
   1ff38:	and	r3, r0, #8
   1ff3c:	beq	1ffb0 <__assert_fail@plt+0xd8c4>
   1ff40:	cmp	r3, #0
   1ff44:	movne	r3, #115	; 0x73
   1ff48:	moveq	r3, #83	; 0x53
   1ff4c:	tst	r0, #4
   1ff50:	strb	r3, [r1, #6]
   1ff54:	movne	r3, #114	; 0x72
   1ff58:	moveq	r3, #45	; 0x2d
   1ff5c:	tst	r0, #2
   1ff60:	strb	r3, [r1, #7]
   1ff64:	movne	r3, #119	; 0x77
   1ff68:	moveq	r3, #45	; 0x2d
   1ff6c:	tst	r0, #512	; 0x200
   1ff70:	strb	r3, [r1, #8]
   1ff74:	and	r0, r0, #1
   1ff78:	beq	1ffc0 <__assert_fail@plt+0xd8d4>
   1ff7c:	cmp	r0, #0
   1ff80:	movne	r0, #116	; 0x74
   1ff84:	moveq	r0, #84	; 0x54
   1ff88:	mov	r3, #32
   1ff8c:	strb	r3, [r1, #10]
   1ff90:	mov	r3, #0
   1ff94:	strb	r0, [r1, #9]
   1ff98:	strb	r3, [r1, #11]
   1ff9c:	bx	lr
   1ffa0:	cmp	r3, #0
   1ffa4:	movne	r3, #120	; 0x78
   1ffa8:	moveq	r3, #45	; 0x2d
   1ffac:	b	1ff10 <__assert_fail@plt+0xd824>
   1ffb0:	cmp	r3, #0
   1ffb4:	movne	r3, #120	; 0x78
   1ffb8:	moveq	r3, #45	; 0x2d
   1ffbc:	b	1ff4c <__assert_fail@plt+0xd860>
   1ffc0:	cmp	r0, #0
   1ffc4:	movne	r0, #120	; 0x78
   1ffc8:	moveq	r0, #45	; 0x2d
   1ffcc:	b	1ff88 <__assert_fail@plt+0xd89c>
   1ffd0:	ldr	r0, [r0, #16]
   1ffd4:	b	1fe7c <__assert_fail@plt+0xd790>
   1ffd8:	push	{r4, r5, r6, lr}
   1ffdc:	mov	r6, r1
   1ffe0:	bl	125e4 <fopen64@plt>
   1ffe4:	subs	r4, r0, #0
   1ffe8:	beq	20020 <__assert_fail@plt+0xd934>
   1ffec:	bl	12488 <fileno@plt>
   1fff0:	cmp	r0, #2
   1fff4:	bhi	20020 <__assert_fail@plt+0xd934>
   1fff8:	bl	28880 <__assert_fail@plt+0x16194>
   1fffc:	subs	r5, r0, #0
   20000:	bge	20028 <__assert_fail@plt+0xd93c>
   20004:	bl	12404 <__errno_location@plt>
   20008:	ldr	r6, [r0]
   2000c:	mov	r5, r0
   20010:	mov	r0, r4
   20014:	bl	124d0 <fclose@plt>
   20018:	str	r6, [r5]
   2001c:	mov	r4, #0
   20020:	mov	r0, r4
   20024:	pop	{r4, r5, r6, pc}
   20028:	mov	r0, r4
   2002c:	bl	124d0 <fclose@plt>
   20030:	cmp	r0, #0
   20034:	beq	20054 <__assert_fail@plt+0xd968>
   20038:	bl	12404 <__errno_location@plt>
   2003c:	ldr	r6, [r0]
   20040:	mov	r4, r0
   20044:	mov	r0, r5
   20048:	bl	126a4 <close@plt>
   2004c:	str	r6, [r4]
   20050:	b	2001c <__assert_fail@plt+0xd930>
   20054:	mov	r1, r6
   20058:	mov	r0, r5
   2005c:	bl	11f6c <fdopen@plt>
   20060:	subs	r4, r0, #0
   20064:	bne	20020 <__assert_fail@plt+0xd934>
   20068:	b	20038 <__assert_fail@plt+0xd94c>
   2006c:	andeq	r0, r0, r0
   20070:	push	{r4, lr}
   20074:	ror	r0, r0, #3
   20078:	bl	39260 <__assert_fail@plt+0x26b74>
   2007c:	mov	r0, r1
   20080:	pop	{r4, pc}
   20084:	sub	r0, r1, r0
   20088:	clz	r0, r0
   2008c:	lsr	r0, r0, #5
   20090:	bx	lr
   20094:	push	{r4, lr}
   20098:	mov	r4, r0
   2009c:	mov	r0, r1
   200a0:	ldr	r3, [r4, #24]
   200a4:	ldr	r1, [r4, #8]
   200a8:	blx	r3
   200ac:	ldr	r3, [r4, #8]
   200b0:	cmp	r0, r3
   200b4:	bcc	200bc <__assert_fail@plt+0xd9d0>
   200b8:	bl	12698 <abort@plt>
   200bc:	ldr	r3, [r4]
   200c0:	add	r0, r3, r0, lsl #3
   200c4:	pop	{r4, pc}
   200c8:	push	{r4, r5, r6, r7, r8, lr}
   200cc:	mov	r6, r1
   200d0:	mov	r8, r2
   200d4:	mov	r5, r0
   200d8:	mov	r7, r3
   200dc:	bl	20094 <__assert_fail@plt+0xd9a8>
   200e0:	str	r0, [r8]
   200e4:	ldr	r1, [r0]
   200e8:	cmp	r1, #0
   200ec:	bne	200fc <__assert_fail@plt+0xda10>
   200f0:	mov	r2, #0
   200f4:	mov	r0, r2
   200f8:	pop	{r4, r5, r6, r7, r8, pc}
   200fc:	cmp	r6, r1
   20100:	mov	r4, r0
   20104:	bne	20144 <__assert_fail@plt+0xda58>
   20108:	cmp	r7, #0
   2010c:	ldr	r2, [r4]
   20110:	beq	200f4 <__assert_fail@plt+0xda08>
   20114:	ldr	r3, [r4, #4]
   20118:	cmp	r3, #0
   2011c:	streq	r3, [r4]
   20120:	beq	200f4 <__assert_fail@plt+0xda08>
   20124:	ldm	r3, {r0, r1}
   20128:	stm	r4, {r0, r1}
   2012c:	mov	r1, #0
   20130:	str	r1, [r3]
   20134:	ldr	r1, [r5, #36]	; 0x24
   20138:	str	r1, [r3, #4]
   2013c:	str	r3, [r5, #36]	; 0x24
   20140:	b	200f4 <__assert_fail@plt+0xda08>
   20144:	ldr	r3, [r5, #28]
   20148:	mov	r0, r6
   2014c:	blx	r3
   20150:	cmp	r0, #0
   20154:	bne	20108 <__assert_fail@plt+0xda1c>
   20158:	ldr	r3, [r4, #4]
   2015c:	cmp	r3, #0
   20160:	beq	200f0 <__assert_fail@plt+0xda04>
   20164:	ldr	r1, [r3]
   20168:	cmp	r6, r1
   2016c:	bne	2018c <__assert_fail@plt+0xdaa0>
   20170:	ldr	r3, [r4, #4]
   20174:	cmp	r7, #0
   20178:	ldr	r2, [r3]
   2017c:	beq	200f4 <__assert_fail@plt+0xda08>
   20180:	ldr	r1, [r3, #4]
   20184:	str	r1, [r4, #4]
   20188:	b	2012c <__assert_fail@plt+0xda40>
   2018c:	ldr	r3, [r5, #28]
   20190:	mov	r0, r6
   20194:	blx	r3
   20198:	cmp	r0, #0
   2019c:	bne	20170 <__assert_fail@plt+0xda84>
   201a0:	ldr	r4, [r4, #4]
   201a4:	b	20158 <__assert_fail@plt+0xda6c>
   201a8:	push	{r4, r5, r6, lr}
   201ac:	ldrb	r4, [r1, #16]
   201b0:	cmp	r4, #0
   201b4:	bne	201e0 <__assert_fail@plt+0xdaf4>
   201b8:	vmov	s15, r0
   201bc:	vldr	s14, [r1, #8]
   201c0:	vcvt.f32.u32	s13, s15
   201c4:	vdiv.f32	s15, s13, s14
   201c8:	vldr	s14, [pc, #156]	; 2026c <__assert_fail@plt+0xdb80>
   201cc:	vcmpe.f32	s15, s14
   201d0:	vmrs	APSR_nzcv, fpscr
   201d4:	bge	20238 <__assert_fail@plt+0xdb4c>
   201d8:	vcvt.u32.f32	s15, s15
   201dc:	vmov	r0, s15
   201e0:	cmp	r0, #10
   201e4:	movcc	r0, #10
   201e8:	orr	r4, r0, #1
   201ec:	cmn	r4, #1
   201f0:	beq	20218 <__assert_fail@plt+0xdb2c>
   201f4:	mov	r6, #9
   201f8:	mov	r5, #3
   201fc:	cmp	r4, r6
   20200:	bhi	20248 <__assert_fail@plt+0xdb5c>
   20204:	mov	r1, r5
   20208:	mov	r0, r4
   2020c:	bl	39260 <__assert_fail@plt+0x26b74>
   20210:	cmp	r1, #0
   20214:	beq	20240 <__assert_fail@plt+0xdb54>
   20218:	lsrs	r3, r4, #30
   2021c:	movne	r3, #1
   20220:	moveq	r3, #0
   20224:	tst	r4, #536870912	; 0x20000000
   20228:	bne	20234 <__assert_fail@plt+0xdb48>
   2022c:	cmp	r3, #0
   20230:	beq	20238 <__assert_fail@plt+0xdb4c>
   20234:	mov	r4, #0
   20238:	mov	r0, r4
   2023c:	pop	{r4, r5, r6, pc}
   20240:	add	r4, r4, #2
   20244:	b	201ec <__assert_fail@plt+0xdb00>
   20248:	mov	r1, r5
   2024c:	mov	r0, r4
   20250:	bl	39260 <__assert_fail@plt+0x26b74>
   20254:	cmp	r1, #0
   20258:	beq	20204 <__assert_fail@plt+0xdb18>
   2025c:	add	r3, r5, #1
   20260:	add	r5, r5, #2
   20264:	add	r6, r6, r3, lsl #2
   20268:	b	201fc <__assert_fail@plt+0xdb10>
   2026c:	svcmi	0x00800000
   20270:	ldr	r3, [r0]
   20274:	ldr	r2, [pc, #160]	; 2031c <__assert_fail@plt+0xdc30>
   20278:	cmp	r3, r2
   2027c:	beq	20304 <__assert_fail@plt+0xdc18>
   20280:	vldr	s14, [r3, #8]
   20284:	vldr	s13, [pc, #128]	; 2030c <__assert_fail@plt+0xdc20>
   20288:	vcmpe.f32	s14, s13
   2028c:	vmrs	APSR_nzcv, fpscr
   20290:	ble	202f8 <__assert_fail@plt+0xdc0c>
   20294:	vldr	s15, [pc, #116]	; 20310 <__assert_fail@plt+0xdc24>
   20298:	vcmpe.f32	s14, s15
   2029c:	vmrs	APSR_nzcv, fpscr
   202a0:	bpl	202f8 <__assert_fail@plt+0xdc0c>
   202a4:	vldr	s12, [r3, #12]
   202a8:	vldr	s15, [pc, #100]	; 20314 <__assert_fail@plt+0xdc28>
   202ac:	vcmpe.f32	s12, s15
   202b0:	vmrs	APSR_nzcv, fpscr
   202b4:	ble	202f8 <__assert_fail@plt+0xdc0c>
   202b8:	vldr	s15, [r3]
   202bc:	vcmpe.f32	s15, #0.0
   202c0:	vmrs	APSR_nzcv, fpscr
   202c4:	blt	202f8 <__assert_fail@plt+0xdc0c>
   202c8:	vadd.f32	s15, s15, s13
   202cc:	vldr	s13, [r3, #4]
   202d0:	vcmpe.f32	s15, s13
   202d4:	vmrs	APSR_nzcv, fpscr
   202d8:	bpl	202f8 <__assert_fail@plt+0xdc0c>
   202dc:	vldr	s12, [pc, #52]	; 20318 <__assert_fail@plt+0xdc2c>
   202e0:	vcmpe.f32	s13, s12
   202e4:	vmrs	APSR_nzcv, fpscr
   202e8:	bhi	202f8 <__assert_fail@plt+0xdc0c>
   202ec:	vcmpe.f32	s14, s15
   202f0:	vmrs	APSR_nzcv, fpscr
   202f4:	bgt	20304 <__assert_fail@plt+0xdc18>
   202f8:	str	r2, [r0]
   202fc:	mov	r0, #0
   20300:	bx	lr
   20304:	mov	r0, #1
   20308:	bx	lr
   2030c:	stclcc	12, cr12, [ip, #820]	; 0x334
   20310:	svccc	0x00666666
   20314:	svccc	0x008ccccd
   20318:	svccc	0x00800000
   2031c:	strdeq	sp, [r3], -r0
   20320:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20324:	mov	r5, r0
   20328:	ldr	r4, [r1]
   2032c:	mov	r7, r1
   20330:	mov	r8, r2
   20334:	add	r4, r4, #8
   20338:	mov	r9, #0
   2033c:	mov	sl, #8
   20340:	ldr	r2, [r7, #4]
   20344:	sub	r3, r4, #8
   20348:	cmp	r2, r3
   2034c:	bhi	2035c <__assert_fail@plt+0xdc70>
   20350:	mov	r8, #1
   20354:	mov	r0, r8
   20358:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2035c:	ldr	r3, [r4, #-8]
   20360:	cmp	r3, #0
   20364:	ldrne	r6, [r4, #-4]
   20368:	bne	203c0 <__assert_fail@plt+0xdcd4>
   2036c:	add	r4, r4, #8
   20370:	b	20340 <__assert_fail@plt+0xdc54>
   20374:	ldr	fp, [r6]
   20378:	mov	r0, r5
   2037c:	mov	r1, fp
   20380:	bl	20094 <__assert_fail@plt+0xd9a8>
   20384:	ldr	r1, [r6, #4]
   20388:	ldr	r2, [r0]
   2038c:	cmp	r2, #0
   20390:	streq	fp, [r0]
   20394:	ldreq	r3, [r5, #12]
   20398:	ldrne	r3, [r0, #4]
   2039c:	addeq	r3, r3, #1
   203a0:	streq	r3, [r5, #12]
   203a4:	streq	r2, [r6]
   203a8:	ldreq	r3, [r5, #36]	; 0x24
   203ac:	strne	r3, [r6, #4]
   203b0:	streq	r3, [r6, #4]
   203b4:	strne	r6, [r0, #4]
   203b8:	streq	r6, [r5, #36]	; 0x24
   203bc:	mov	r6, r1
   203c0:	cmp	r6, #0
   203c4:	bne	20374 <__assert_fail@plt+0xdc88>
   203c8:	cmp	r8, #0
   203cc:	ldr	fp, [r4, #-8]
   203d0:	str	r6, [r4, #-4]
   203d4:	bne	2036c <__assert_fail@plt+0xdc80>
   203d8:	mov	r1, fp
   203dc:	mov	r0, r5
   203e0:	bl	20094 <__assert_fail@plt+0xd9a8>
   203e4:	ldr	r3, [r0]
   203e8:	mov	r6, r0
   203ec:	cmp	r3, #0
   203f0:	beq	2043c <__assert_fail@plt+0xdd50>
   203f4:	ldr	r0, [r5, #36]	; 0x24
   203f8:	cmp	r0, #0
   203fc:	ldrne	r3, [r0, #4]
   20400:	strne	r3, [r5, #36]	; 0x24
   20404:	bne	20418 <__assert_fail@plt+0xdd2c>
   20408:	mov	r0, sl
   2040c:	bl	2bf10 <__assert_fail@plt+0x19824>
   20410:	cmp	r0, #0
   20414:	beq	20354 <__assert_fail@plt+0xdc68>
   20418:	ldr	r3, [r6, #4]
   2041c:	str	fp, [r0]
   20420:	str	r3, [r0, #4]
   20424:	str	r0, [r6, #4]
   20428:	ldr	r3, [r7, #12]
   2042c:	str	r9, [r4, #-8]
   20430:	sub	r3, r3, #1
   20434:	str	r3, [r7, #12]
   20438:	b	2036c <__assert_fail@plt+0xdc80>
   2043c:	ldr	r3, [r5, #12]
   20440:	str	fp, [r0]
   20444:	add	r3, r3, #1
   20448:	str	r3, [r5, #12]
   2044c:	b	20428 <__assert_fail@plt+0xdd3c>
   20450:	ldr	r0, [r0, #8]
   20454:	bx	lr
   20458:	ldr	r0, [r0, #12]
   2045c:	bx	lr
   20460:	ldr	r0, [r0, #16]
   20464:	bx	lr
   20468:	ldm	r0, {r3, ip}
   2046c:	mov	r0, #0
   20470:	cmp	r3, ip
   20474:	bcc	2047c <__assert_fail@plt+0xdd90>
   20478:	bx	lr
   2047c:	ldr	r2, [r3]
   20480:	cmp	r2, #0
   20484:	movne	r1, r3
   20488:	movne	r2, #1
   2048c:	bne	2049c <__assert_fail@plt+0xddb0>
   20490:	add	r3, r3, #8
   20494:	b	20470 <__assert_fail@plt+0xdd84>
   20498:	add	r2, r2, #1
   2049c:	ldr	r1, [r1, #4]
   204a0:	cmp	r1, #0
   204a4:	bne	20498 <__assert_fail@plt+0xddac>
   204a8:	cmp	r0, r2
   204ac:	movcc	r0, r2
   204b0:	b	20490 <__assert_fail@plt+0xdda4>
   204b4:	push	{lr}		; (str lr, [sp, #-4]!)
   204b8:	mov	r3, #0
   204bc:	ldm	r0, {r2, lr}
   204c0:	mov	r1, r3
   204c4:	cmp	r2, lr
   204c8:	bcc	204ec <__assert_fail@plt+0xde00>
   204cc:	ldr	r2, [r0, #12]
   204d0:	cmp	r1, r2
   204d4:	ldreq	r0, [r0, #16]
   204d8:	subeq	r0, r0, r3
   204dc:	clzeq	r0, r0
   204e0:	lsreq	r0, r0, #5
   204e4:	movne	r0, #0
   204e8:	pop	{pc}		; (ldr pc, [sp], #4)
   204ec:	ldr	ip, [r2]
   204f0:	cmp	ip, #0
   204f4:	addne	r1, r1, #1
   204f8:	addne	r3, r3, #1
   204fc:	movne	ip, r2
   20500:	bne	20510 <__assert_fail@plt+0xde24>
   20504:	add	r2, r2, #8
   20508:	b	204c4 <__assert_fail@plt+0xddd8>
   2050c:	add	r3, r3, #1
   20510:	ldr	ip, [ip, #4]
   20514:	cmp	ip, #0
   20518:	bne	2050c <__assert_fail@plt+0xde20>
   2051c:	b	20504 <__assert_fail@plt+0xde18>
   20520:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   20524:	mov	r4, r1
   20528:	ldr	r5, [r0, #8]
   2052c:	ldr	r7, [r0, #12]
   20530:	mov	r6, r0
   20534:	bl	20468 <__assert_fail@plt+0xdd7c>
   20538:	ldr	r2, [r6, #16]
   2053c:	ldr	r1, [pc, #108]	; 205b0 <__assert_fail@plt+0xdec4>
   20540:	mov	r8, r0
   20544:	mov	r0, r4
   20548:	bl	123f8 <fprintf@plt>
   2054c:	mov	r2, r5
   20550:	ldr	r1, [pc, #92]	; 205b4 <__assert_fail@plt+0xdec8>
   20554:	mov	r0, r4
   20558:	bl	123f8 <fprintf@plt>
   2055c:	vmov	s15, r7
   20560:	mov	r2, r7
   20564:	ldr	r1, [pc, #76]	; 205b8 <__assert_fail@plt+0xdecc>
   20568:	mov	r0, r4
   2056c:	vcvt.f64.u32	d6, s15
   20570:	vldr	d7, [pc, #48]	; 205a8 <__assert_fail@plt+0xdebc>
   20574:	vmul.f64	d6, d6, d7
   20578:	vmov	s15, r5
   2057c:	vcvt.f64.u32	d7, s15
   20580:	vdiv.f64	d5, d6, d7
   20584:	vstr	d5, [sp]
   20588:	bl	123f8 <fprintf@plt>
   2058c:	mov	r2, r8
   20590:	ldr	r1, [pc, #36]	; 205bc <__assert_fail@plt+0xded0>
   20594:	mov	r0, r4
   20598:	add	sp, sp, #8
   2059c:	pop	{r4, r5, r6, r7, r8, lr}
   205a0:	b	123f8 <fprintf@plt>
   205a4:	nop			; (mov r0, r0)
   205a8:	andeq	r0, r0, r0
   205ac:	subsmi	r0, r9, r0
   205b0:	andeq	sp, r3, r4, lsl #28
   205b4:	andeq	sp, r3, ip, lsl lr
   205b8:	andeq	sp, r3, r4, lsr lr
   205bc:	andeq	sp, r3, r5, asr lr
   205c0:	push	{r4, r5, r6, lr}
   205c4:	mov	r6, r0
   205c8:	mov	r5, r1
   205cc:	bl	20094 <__assert_fail@plt+0xd9a8>
   205d0:	ldr	r3, [r0]
   205d4:	cmp	r3, #0
   205d8:	movne	r4, r0
   205dc:	bne	20608 <__assert_fail@plt+0xdf1c>
   205e0:	mov	r0, #0
   205e4:	pop	{r4, r5, r6, pc}
   205e8:	ldr	r3, [r6, #28]
   205ec:	mov	r0, r5
   205f0:	blx	r3
   205f4:	cmp	r0, #0
   205f8:	bne	20614 <__assert_fail@plt+0xdf28>
   205fc:	ldr	r4, [r4, #4]
   20600:	cmp	r4, #0
   20604:	beq	205e0 <__assert_fail@plt+0xdef4>
   20608:	ldr	r1, [r4]
   2060c:	cmp	r5, r1
   20610:	bne	205e8 <__assert_fail@plt+0xdefc>
   20614:	ldr	r0, [r4]
   20618:	pop	{r4, r5, r6, pc}
   2061c:	ldr	r3, [r0, #16]
   20620:	cmp	r3, #0
   20624:	beq	20654 <__assert_fail@plt+0xdf68>
   20628:	ldr	r3, [r0]
   2062c:	ldr	r2, [r0, #4]
   20630:	cmp	r3, r2
   20634:	bcc	20640 <__assert_fail@plt+0xdf54>
   20638:	push	{r4, lr}
   2063c:	bl	12698 <abort@plt>
   20640:	ldr	r0, [r3]
   20644:	cmp	r0, #0
   20648:	bne	20658 <__assert_fail@plt+0xdf6c>
   2064c:	add	r3, r3, #8
   20650:	b	20630 <__assert_fail@plt+0xdf44>
   20654:	mov	r0, r3
   20658:	bx	lr
   2065c:	push	{r4, r5, r6, lr}
   20660:	mov	r4, r0
   20664:	mov	r5, r1
   20668:	bl	20094 <__assert_fail@plt+0xd9a8>
   2066c:	mov	r2, r0
   20670:	mov	r3, r0
   20674:	ldr	r1, [r3]
   20678:	ldr	r3, [r3, #4]
   2067c:	cmp	r5, r1
   20680:	bne	20694 <__assert_fail@plt+0xdfa8>
   20684:	cmp	r3, #0
   20688:	beq	20694 <__assert_fail@plt+0xdfa8>
   2068c:	ldr	r0, [r3]
   20690:	pop	{r4, r5, r6, pc}
   20694:	cmp	r3, #0
   20698:	bne	20674 <__assert_fail@plt+0xdf88>
   2069c:	ldr	r3, [r4, #4]
   206a0:	add	r2, r2, #8
   206a4:	cmp	r2, r3
   206a8:	bcc	206b4 <__assert_fail@plt+0xdfc8>
   206ac:	mov	r0, #0
   206b0:	pop	{r4, r5, r6, pc}
   206b4:	ldr	r0, [r2]
   206b8:	cmp	r0, #0
   206bc:	beq	206a0 <__assert_fail@plt+0xdfb4>
   206c0:	pop	{r4, r5, r6, pc}
   206c4:	ldr	ip, [r0]
   206c8:	mov	r3, #0
   206cc:	push	{r4, r5, lr}
   206d0:	ldr	lr, [r0, #4]
   206d4:	cmp	ip, lr
   206d8:	bcc	206e4 <__assert_fail@plt+0xdff8>
   206dc:	mov	r0, r3
   206e0:	pop	{r4, r5, pc}
   206e4:	ldr	lr, [ip]
   206e8:	cmp	lr, #0
   206ec:	beq	20718 <__assert_fail@plt+0xe02c>
   206f0:	add	r4, r1, r3, lsl #2
   206f4:	mov	lr, ip
   206f8:	cmp	r2, r3
   206fc:	bls	206dc <__assert_fail@plt+0xdff0>
   20700:	ldr	r5, [lr]
   20704:	add	r3, r3, #1
   20708:	str	r5, [r4], #4
   2070c:	ldr	lr, [lr, #4]
   20710:	cmp	lr, #0
   20714:	bne	206f8 <__assert_fail@plt+0xe00c>
   20718:	add	ip, ip, #8
   2071c:	b	206d0 <__assert_fail@plt+0xdfe4>
   20720:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20724:	mov	r7, r0
   20728:	ldr	r4, [r0]
   2072c:	mov	r8, r1
   20730:	mov	r9, r2
   20734:	mov	r6, #0
   20738:	ldr	r3, [r7, #4]
   2073c:	cmp	r4, r3
   20740:	bcc	2074c <__assert_fail@plt+0xe060>
   20744:	mov	r0, r6
   20748:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2074c:	ldr	r3, [r4]
   20750:	cmp	r3, #0
   20754:	beq	20780 <__assert_fail@plt+0xe094>
   20758:	mov	r5, r4
   2075c:	mov	r1, r9
   20760:	ldr	r0, [r5]
   20764:	blx	r8
   20768:	cmp	r0, #0
   2076c:	beq	20744 <__assert_fail@plt+0xe058>
   20770:	ldr	r5, [r5, #4]
   20774:	add	r6, r6, #1
   20778:	cmp	r5, #0
   2077c:	bne	2075c <__assert_fail@plt+0xe070>
   20780:	add	r4, r4, #8
   20784:	b	20738 <__assert_fail@plt+0xe04c>
   20788:	push	{r4, r5, r6, lr}
   2078c:	sub	r4, r0, #1
   20790:	mov	r5, r1
   20794:	mov	r0, #0
   20798:	mov	r6, #31
   2079c:	ldrb	r3, [r4, #1]!
   207a0:	cmp	r3, #0
   207a4:	bne	207ac <__assert_fail@plt+0xe0c0>
   207a8:	pop	{r4, r5, r6, pc}
   207ac:	mov	r1, r5
   207b0:	mla	r0, r6, r0, r3
   207b4:	bl	39260 <__assert_fail@plt+0x26b74>
   207b8:	mov	r0, r1
   207bc:	b	2079c <__assert_fail@plt+0xe0b0>
   207c0:	push	{lr}		; (str lr, [sp, #-4]!)
   207c4:	mov	ip, r0
   207c8:	ldr	lr, [pc, #16]	; 207e0 <__assert_fail@plt+0xe0f4>
   207cc:	ldm	lr!, {r0, r1, r2, r3}
   207d0:	stmia	ip!, {r0, r1, r2, r3}
   207d4:	ldr	r3, [lr]
   207d8:	str	r3, [ip]
   207dc:	pop	{pc}		; (ldr pc, [sp], #4)
   207e0:	strdeq	sp, [r3], -r0
   207e4:	cmp	r2, #0
   207e8:	push	{r4, r5, r6, r7, r8, lr}
   207ec:	mov	r8, r0
   207f0:	ldr	r7, [pc, #176]	; 208a8 <__assert_fail@plt+0xe1bc>
   207f4:	mov	r0, #40	; 0x28
   207f8:	movne	r7, r2
   207fc:	cmp	r3, #0
   20800:	mov	r5, r1
   20804:	ldr	r6, [pc, #160]	; 208ac <__assert_fail@plt+0xe1c0>
   20808:	movne	r6, r3
   2080c:	bl	2bf10 <__assert_fail@plt+0x19824>
   20810:	subs	r4, r0, #0
   20814:	beq	20890 <__assert_fail@plt+0xe1a4>
   20818:	ldr	r3, [pc, #144]	; 208b0 <__assert_fail@plt+0xe1c4>
   2081c:	cmp	r5, #0
   20820:	mov	r0, r4
   20824:	moveq	r5, r3
   20828:	str	r5, [r0, #20]!
   2082c:	bl	20270 <__assert_fail@plt+0xdb84>
   20830:	cmp	r0, #0
   20834:	beq	20898 <__assert_fail@plt+0xe1ac>
   20838:	mov	r1, r5
   2083c:	mov	r0, r8
   20840:	bl	201a8 <__assert_fail@plt+0xdabc>
   20844:	cmp	r0, #0
   20848:	str	r0, [r4, #8]
   2084c:	beq	20898 <__assert_fail@plt+0xe1ac>
   20850:	mov	r1, #8
   20854:	bl	29b08 <__assert_fail@plt+0x1741c>
   20858:	cmp	r0, #0
   2085c:	str	r0, [r4]
   20860:	beq	20898 <__assert_fail@plt+0xe1ac>
   20864:	ldr	r3, [r4, #8]
   20868:	ldr	r2, [sp, #24]
   2086c:	str	r7, [r4, #24]
   20870:	add	r0, r0, r3, lsl #3
   20874:	mov	r3, #0
   20878:	str	r0, [r4, #4]
   2087c:	str	r3, [r4, #12]
   20880:	str	r3, [r4, #16]
   20884:	str	r6, [r4, #28]
   20888:	str	r2, [r4, #32]
   2088c:	str	r3, [r4, #36]	; 0x24
   20890:	mov	r0, r4
   20894:	pop	{r4, r5, r6, r7, r8, pc}
   20898:	mov	r0, r4
   2089c:	bl	2a01c <__assert_fail@plt+0x17930>
   208a0:	mov	r4, #0
   208a4:	b	20890 <__assert_fail@plt+0xe1a4>
   208a8:	andeq	r0, r2, r0, ror r0
   208ac:	andeq	r0, r2, r4, lsl #1
   208b0:	strdeq	sp, [r3], -r0
   208b4:	push	{r4, r5, r6, r7, r8, lr}
   208b8:	mov	r5, r0
   208bc:	ldr	r4, [r0]
   208c0:	mov	r7, #0
   208c4:	add	r4, r4, #8
   208c8:	ldr	r2, [r5, #4]
   208cc:	sub	r3, r4, #8
   208d0:	cmp	r2, r3
   208d4:	bhi	208e8 <__assert_fail@plt+0xe1fc>
   208d8:	mov	r3, #0
   208dc:	str	r3, [r5, #12]
   208e0:	str	r3, [r5, #16]
   208e4:	pop	{r4, r5, r6, r7, r8, pc}
   208e8:	ldr	r3, [r4, #-8]
   208ec:	cmp	r3, #0
   208f0:	ldrne	r6, [r4, #-4]
   208f4:	bne	20928 <__assert_fail@plt+0xe23c>
   208f8:	add	r4, r4, #8
   208fc:	b	208c8 <__assert_fail@plt+0xe1dc>
   20900:	cmp	r3, #0
   20904:	beq	20910 <__assert_fail@plt+0xe224>
   20908:	ldr	r0, [r6]
   2090c:	blx	r3
   20910:	ldr	r3, [r6, #4]
   20914:	ldr	r2, [r5, #36]	; 0x24
   20918:	str	r7, [r6]
   2091c:	str	r2, [r6, #4]
   20920:	str	r6, [r5, #36]	; 0x24
   20924:	mov	r6, r3
   20928:	cmp	r6, #0
   2092c:	ldr	r3, [r5, #32]
   20930:	bne	20900 <__assert_fail@plt+0xe214>
   20934:	cmp	r3, #0
   20938:	beq	20944 <__assert_fail@plt+0xe258>
   2093c:	ldr	r0, [r4, #-8]
   20940:	blx	r3
   20944:	str	r7, [r4, #-8]
   20948:	str	r7, [r4, #-4]
   2094c:	b	208f8 <__assert_fail@plt+0xe20c>
   20950:	ldr	r3, [r0, #32]
   20954:	push	{r4, r5, r6, lr}
   20958:	cmp	r3, #0
   2095c:	mov	r4, r0
   20960:	bne	20994 <__assert_fail@plt+0xe2a8>
   20964:	ldr	r5, [r4]
   20968:	ldr	r3, [r4, #4]
   2096c:	cmp	r5, r3
   20970:	bcc	209e4 <__assert_fail@plt+0xe2f8>
   20974:	ldr	r0, [r4, #36]	; 0x24
   20978:	cmp	r0, #0
   2097c:	bne	20a04 <__assert_fail@plt+0xe318>
   20980:	ldr	r0, [r4]
   20984:	bl	2a01c <__assert_fail@plt+0x17930>
   20988:	mov	r0, r4
   2098c:	pop	{r4, r5, r6, lr}
   20990:	b	2a01c <__assert_fail@plt+0x17930>
   20994:	ldr	r3, [r0, #16]
   20998:	cmp	r3, #0
   2099c:	ldrne	r5, [r0]
   209a0:	beq	20964 <__assert_fail@plt+0xe278>
   209a4:	ldr	r3, [r4, #4]
   209a8:	cmp	r5, r3
   209ac:	bcs	20964 <__assert_fail@plt+0xe278>
   209b0:	ldr	r3, [r5]
   209b4:	cmp	r3, #0
   209b8:	movne	r6, r5
   209bc:	bne	209c8 <__assert_fail@plt+0xe2dc>
   209c0:	add	r5, r5, #8
   209c4:	b	209a4 <__assert_fail@plt+0xe2b8>
   209c8:	ldr	r0, [r6]
   209cc:	ldr	r3, [r4, #32]
   209d0:	blx	r3
   209d4:	ldr	r6, [r6, #4]
   209d8:	cmp	r6, #0
   209dc:	bne	209c8 <__assert_fail@plt+0xe2dc>
   209e0:	b	209c0 <__assert_fail@plt+0xe2d4>
   209e4:	ldr	r0, [r5, #4]
   209e8:	cmp	r0, #0
   209ec:	addeq	r5, r5, #8
   209f0:	beq	20968 <__assert_fail@plt+0xe27c>
   209f4:	ldr	r6, [r0, #4]
   209f8:	bl	2a01c <__assert_fail@plt+0x17930>
   209fc:	mov	r0, r6
   20a00:	b	209e8 <__assert_fail@plt+0xe2fc>
   20a04:	ldr	r5, [r0, #4]
   20a08:	bl	2a01c <__assert_fail@plt+0x17930>
   20a0c:	mov	r0, r5
   20a10:	b	20978 <__assert_fail@plt+0xe28c>
   20a14:	push	{r4, r5, lr}
   20a18:	mov	r4, r0
   20a1c:	sub	sp, sp, #44	; 0x2c
   20a20:	mov	r0, r1
   20a24:	ldr	r1, [r4, #20]
   20a28:	bl	201a8 <__assert_fail@plt+0xdabc>
   20a2c:	subs	r5, r0, #0
   20a30:	bne	20a44 <__assert_fail@plt+0xe358>
   20a34:	mov	r5, #0
   20a38:	mov	r0, r5
   20a3c:	add	sp, sp, #44	; 0x2c
   20a40:	pop	{r4, r5, pc}
   20a44:	ldr	r3, [r4, #8]
   20a48:	cmp	r5, r3
   20a4c:	beq	20b34 <__assert_fail@plt+0xe448>
   20a50:	mov	r1, #8
   20a54:	bl	29b08 <__assert_fail@plt+0x1741c>
   20a58:	cmp	r0, #0
   20a5c:	str	r0, [sp]
   20a60:	beq	20a34 <__assert_fail@plt+0xe348>
   20a64:	ldr	r3, [r4, #20]
   20a68:	add	r0, r0, r5, lsl #3
   20a6c:	str	r3, [sp, #20]
   20a70:	ldr	r3, [r4, #24]
   20a74:	mov	r2, #0
   20a78:	str	r3, [sp, #24]
   20a7c:	ldr	r3, [r4, #28]
   20a80:	str	r0, [sp, #4]
   20a84:	str	r3, [sp, #28]
   20a88:	ldr	r3, [r4, #32]
   20a8c:	mov	r1, r4
   20a90:	str	r3, [sp, #32]
   20a94:	ldr	r3, [r4, #36]	; 0x24
   20a98:	mov	r0, sp
   20a9c:	str	r5, [sp, #8]
   20aa0:	str	r2, [sp, #12]
   20aa4:	str	r2, [sp, #16]
   20aa8:	str	r3, [sp, #36]	; 0x24
   20aac:	bl	20320 <__assert_fail@plt+0xdc34>
   20ab0:	subs	r5, r0, #0
   20ab4:	beq	20aec <__assert_fail@plt+0xe400>
   20ab8:	ldr	r0, [r4]
   20abc:	bl	2a01c <__assert_fail@plt+0x17930>
   20ac0:	ldr	r3, [sp]
   20ac4:	str	r3, [r4]
   20ac8:	ldr	r3, [sp, #4]
   20acc:	str	r3, [r4, #4]
   20ad0:	ldr	r3, [sp, #8]
   20ad4:	str	r3, [r4, #8]
   20ad8:	ldr	r3, [sp, #12]
   20adc:	str	r3, [r4, #12]
   20ae0:	ldr	r3, [sp, #36]	; 0x24
   20ae4:	str	r3, [r4, #36]	; 0x24
   20ae8:	b	20a38 <__assert_fail@plt+0xe34c>
   20aec:	ldr	r3, [sp, #36]	; 0x24
   20af0:	mov	r2, #1
   20af4:	str	r3, [r4, #36]	; 0x24
   20af8:	mov	r1, sp
   20afc:	mov	r0, r4
   20b00:	bl	20320 <__assert_fail@plt+0xdc34>
   20b04:	cmp	r0, #0
   20b08:	bne	20b10 <__assert_fail@plt+0xe424>
   20b0c:	bl	12698 <abort@plt>
   20b10:	mov	r2, r5
   20b14:	mov	r1, sp
   20b18:	mov	r0, r4
   20b1c:	bl	20320 <__assert_fail@plt+0xdc34>
   20b20:	cmp	r0, #0
   20b24:	beq	20b0c <__assert_fail@plt+0xe420>
   20b28:	ldr	r0, [sp]
   20b2c:	bl	2a01c <__assert_fail@plt+0x17930>
   20b30:	b	20a38 <__assert_fail@plt+0xe34c>
   20b34:	mov	r5, #1
   20b38:	b	20a38 <__assert_fail@plt+0xe34c>
   20b3c:	push	{r0, r1, r4, r5, r6, lr}
   20b40:	subs	r6, r1, #0
   20b44:	bne	20b4c <__assert_fail@plt+0xe460>
   20b48:	bl	12698 <abort@plt>
   20b4c:	mov	r5, r2
   20b50:	mov	r3, #0
   20b54:	add	r2, sp, #4
   20b58:	mov	r4, r0
   20b5c:	bl	200c8 <__assert_fail@plt+0xd9dc>
   20b60:	cmp	r0, #0
   20b64:	beq	20b7c <__assert_fail@plt+0xe490>
   20b68:	cmp	r5, #0
   20b6c:	strne	r0, [r5]
   20b70:	movne	r0, #0
   20b74:	moveq	r0, r5
   20b78:	b	20bfc <__assert_fail@plt+0xe510>
   20b7c:	vldr	s15, [r4, #12]
   20b80:	ldr	r3, [r4, #20]
   20b84:	vcvt.f32.u32	s14, s15
   20b88:	vldr	s15, [r4, #8]
   20b8c:	vldr	s13, [r3, #8]
   20b90:	vcvt.f32.u32	s15, s15
   20b94:	vmul.f32	s15, s15, s13
   20b98:	vcmpe.f32	s14, s15
   20b9c:	vmrs	APSR_nzcv, fpscr
   20ba0:	ble	20c38 <__assert_fail@plt+0xe54c>
   20ba4:	add	r0, r4, #20
   20ba8:	bl	20270 <__assert_fail@plt+0xdb84>
   20bac:	vldr	s15, [r4, #8]
   20bb0:	ldr	r3, [r4, #20]
   20bb4:	vldr	s14, [r4, #12]
   20bb8:	vcvt.f32.u32	s15, s15
   20bbc:	vldr	s13, [r3, #8]
   20bc0:	vcvt.f32.u32	s14, s14
   20bc4:	vmul.f32	s12, s13, s15
   20bc8:	vcmpe.f32	s14, s12
   20bcc:	vmrs	APSR_nzcv, fpscr
   20bd0:	ble	20c38 <__assert_fail@plt+0xe54c>
   20bd4:	vldr	s14, [r3, #12]
   20bd8:	ldrb	r2, [r3, #16]
   20bdc:	vmul.f32	s15, s15, s14
   20be0:	cmp	r2, #0
   20be4:	vldr	s14, [pc, #200]	; 20cb4 <__assert_fail@plt+0xe5c8>
   20be8:	vmuleq.f32	s15, s15, s13
   20bec:	vcmpe.f32	s15, s14
   20bf0:	vmrs	APSR_nzcv, fpscr
   20bf4:	blt	20c04 <__assert_fail@plt+0xe518>
   20bf8:	mvn	r0, #0
   20bfc:	add	sp, sp, #8
   20c00:	pop	{r4, r5, r6, pc}
   20c04:	vcvt.u32.f32	s15, s15
   20c08:	mov	r0, r4
   20c0c:	vmov	r1, s15
   20c10:	bl	20a14 <__assert_fail@plt+0xe328>
   20c14:	cmp	r0, #0
   20c18:	beq	20bf8 <__assert_fail@plt+0xe50c>
   20c1c:	mov	r3, #0
   20c20:	add	r2, sp, #4
   20c24:	mov	r1, r6
   20c28:	mov	r0, r4
   20c2c:	bl	200c8 <__assert_fail@plt+0xd9dc>
   20c30:	cmp	r0, #0
   20c34:	bne	20b48 <__assert_fail@plt+0xe45c>
   20c38:	ldr	r3, [sp, #4]
   20c3c:	ldr	r2, [r3]
   20c40:	cmp	r2, #0
   20c44:	beq	20c94 <__assert_fail@plt+0xe5a8>
   20c48:	ldr	r0, [r4, #36]	; 0x24
   20c4c:	cmp	r0, #0
   20c50:	ldrne	r3, [r0, #4]
   20c54:	strne	r3, [r4, #36]	; 0x24
   20c58:	bne	20c6c <__assert_fail@plt+0xe580>
   20c5c:	mov	r0, #8
   20c60:	bl	2bf10 <__assert_fail@plt+0x19824>
   20c64:	cmp	r0, #0
   20c68:	beq	20bf8 <__assert_fail@plt+0xe50c>
   20c6c:	ldr	r3, [sp, #4]
   20c70:	str	r6, [r0]
   20c74:	ldr	r2, [r3, #4]
   20c78:	str	r2, [r0, #4]
   20c7c:	str	r0, [r3, #4]
   20c80:	ldr	r3, [r4, #16]
   20c84:	add	r3, r3, #1
   20c88:	str	r3, [r4, #16]
   20c8c:	mov	r0, #1
   20c90:	b	20bfc <__assert_fail@plt+0xe510>
   20c94:	str	r6, [r3]
   20c98:	ldr	r3, [r4, #16]
   20c9c:	add	r3, r3, #1
   20ca0:	str	r3, [r4, #16]
   20ca4:	ldr	r3, [r4, #12]
   20ca8:	add	r3, r3, #1
   20cac:	str	r3, [r4, #12]
   20cb0:	b	20c8c <__assert_fail@plt+0xe5a0>
   20cb4:	svcmi	0x00800000
   20cb8:	push	{r0, r1, r4, lr}
   20cbc:	add	r2, sp, #4
   20cc0:	mov	r4, r1
   20cc4:	bl	20b3c <__assert_fail@plt+0xe450>
   20cc8:	cmn	r0, #1
   20ccc:	moveq	r0, #0
   20cd0:	beq	20ce0 <__assert_fail@plt+0xe5f4>
   20cd4:	cmp	r0, #0
   20cd8:	movne	r0, r4
   20cdc:	ldreq	r0, [sp, #4]
   20ce0:	add	sp, sp, #8
   20ce4:	pop	{r4, pc}
   20ce8:	push	{r0, r1, r4, r5, r6, lr}
   20cec:	mov	r3, #1
   20cf0:	add	r2, sp, #4
   20cf4:	mov	r4, r0
   20cf8:	bl	200c8 <__assert_fail@plt+0xd9dc>
   20cfc:	subs	r5, r0, #0
   20d00:	beq	20db8 <__assert_fail@plt+0xe6cc>
   20d04:	ldr	r3, [r4, #16]
   20d08:	sub	r3, r3, #1
   20d0c:	str	r3, [r4, #16]
   20d10:	ldr	r3, [sp, #4]
   20d14:	ldr	r3, [r3]
   20d18:	cmp	r3, #0
   20d1c:	bne	20db8 <__assert_fail@plt+0xe6cc>
   20d20:	vldr	s14, [r4, #8]
   20d24:	ldr	r3, [r4, #12]
   20d28:	sub	r3, r3, #1
   20d2c:	vcvt.f32.u32	s14, s14
   20d30:	vmov	s15, r3
   20d34:	str	r3, [r4, #12]
   20d38:	ldr	r3, [r4, #20]
   20d3c:	vcvt.f32.u32	s15, s15
   20d40:	vldr	s13, [r3]
   20d44:	vmul.f32	s14, s14, s13
   20d48:	vcmpe.f32	s15, s14
   20d4c:	vmrs	APSR_nzcv, fpscr
   20d50:	bpl	20db8 <__assert_fail@plt+0xe6cc>
   20d54:	add	r0, r4, #20
   20d58:	bl	20270 <__assert_fail@plt+0xdb84>
   20d5c:	vldr	s15, [r4, #8]
   20d60:	vldr	s14, [r4, #12]
   20d64:	ldr	r3, [r4, #20]
   20d68:	vcvt.f32.u32	s15, s15
   20d6c:	vcvt.f32.u32	s13, s14
   20d70:	vldr	s14, [r3]
   20d74:	vmul.f32	s14, s15, s14
   20d78:	vcmpe.f32	s13, s14
   20d7c:	vmrs	APSR_nzcv, fpscr
   20d80:	bpl	20db8 <__assert_fail@plt+0xe6cc>
   20d84:	vldr	s14, [r3, #4]
   20d88:	ldrb	r2, [r3, #16]
   20d8c:	mov	r0, r4
   20d90:	vmul.f32	s15, s15, s14
   20d94:	cmp	r2, #0
   20d98:	vldreq	s14, [r3, #8]
   20d9c:	vmuleq.f32	s15, s15, s14
   20da0:	vcvt.u32.f32	s15, s15
   20da4:	vmov	r1, s15
   20da8:	bl	20a14 <__assert_fail@plt+0xe328>
   20dac:	cmp	r0, #0
   20db0:	ldreq	r0, [r4, #36]	; 0x24
   20db4:	beq	20dd0 <__assert_fail@plt+0xe6e4>
   20db8:	mov	r0, r5
   20dbc:	add	sp, sp, #8
   20dc0:	pop	{r4, r5, r6, pc}
   20dc4:	ldr	r6, [r0, #4]
   20dc8:	bl	2a01c <__assert_fail@plt+0x17930>
   20dcc:	mov	r0, r6
   20dd0:	cmp	r0, #0
   20dd4:	bne	20dc4 <__assert_fail@plt+0xe6d8>
   20dd8:	str	r0, [r4, #36]	; 0x24
   20ddc:	b	20db8 <__assert_fail@plt+0xe6cc>
   20de0:	b	20ce8 <__assert_fail@plt+0xe5fc>
   20de4:	andeq	r0, r0, r0
   20de8:	cmp	r0, #1
   20dec:	push	{r4, r6, r7, lr}
   20df0:	vpush	{d8}
   20df4:	vmov.f64	d8, d0
   20df8:	beq	20e5c <__assert_fail@plt+0xe770>
   20dfc:	vldr	d7, [pc, #100]	; 20e68 <__assert_fail@plt+0xe77c>
   20e00:	vcmpe.f64	d0, d7
   20e04:	vmrs	APSR_nzcv, fpscr
   20e08:	bpl	20e5c <__assert_fail@plt+0xe770>
   20e0c:	mov	r4, r0
   20e10:	vmov	r0, r1, d0
   20e14:	bl	39998 <__assert_fail@plt+0x272ac>
   20e18:	cmp	r4, #0
   20e1c:	mov	r6, r0
   20e20:	mov	r7, r1
   20e24:	movne	r0, #0
   20e28:	bne	20e44 <__assert_fail@plt+0xe758>
   20e2c:	bl	39804 <__assert_fail@plt+0x27118>
   20e30:	vmov	d7, r0, r1
   20e34:	vcmp.f64	d7, d8
   20e38:	vmrs	APSR_nzcv, fpscr
   20e3c:	movne	r0, #1
   20e40:	moveq	r0, #0
   20e44:	adds	r2, r6, r0
   20e48:	adc	r3, r7, r0, asr #31
   20e4c:	mov	r1, r3
   20e50:	mov	r0, r2
   20e54:	bl	39804 <__assert_fail@plt+0x27118>
   20e58:	vmov	d8, r0, r1
   20e5c:	vmov.f64	d0, d8
   20e60:	vpop	{d8}
   20e64:	pop	{r4, r6, r7, pc}
   20e68:	andeq	r0, r0, r0
   20e6c:	mvnsmi	r0, #0
   20e70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e74:	vpush	{d8-d9}
   20e78:	mov	r9, r3
   20e7c:	and	r3, r3, #3
   20e80:	mov	fp, r2
   20e84:	sub	sp, sp, #100	; 0x64
   20e88:	add	sl, fp, #644	; 0x284
   20e8c:	str	r3, [sp, #20]
   20e90:	ands	r3, r9, #32
   20e94:	str	r3, [sp, #24]
   20e98:	movne	r3, #1024	; 0x400
   20e9c:	moveq	r3, #1000	; 0x3e8
   20ea0:	strd	r0, [sp, #8]
   20ea4:	ldrd	r4, [sp, #152]	; 0x98
   20ea8:	str	r3, [sp, #16]
   20eac:	bl	12584 <localeconv@plt>
   20eb0:	add	sl, sl, #3
   20eb4:	ldr	r7, [r0]
   20eb8:	mov	r6, r0
   20ebc:	mov	r0, r7
   20ec0:	bl	123bc <strlen@plt>
   20ec4:	sub	r3, r0, #1
   20ec8:	cmp	r3, #15
   20ecc:	ldr	r3, [pc, #1852]	; 21610 <__assert_fail@plt+0xef24>
   20ed0:	movls	r3, r7
   20ed4:	str	r3, [sp, #40]	; 0x28
   20ed8:	ldr	r3, [r6, #8]
   20edc:	ldr	r6, [r6, #4]
   20ee0:	mov	r8, r0
   20ee4:	movls	r8, r0
   20ee8:	mov	r0, r6
   20eec:	movhi	r8, #1
   20ef0:	str	r3, [sp, #28]
   20ef4:	bl	123bc <strlen@plt>
   20ef8:	ldr	r3, [pc, #1812]	; 21614 <__assert_fail@plt+0xef28>
   20efc:	cmp	r0, #16
   20f00:	movhi	r6, r3
   20f04:	ldrd	r2, [sp, #160]	; 0xa0
   20f08:	str	r6, [sp, #44]	; 0x2c
   20f0c:	cmp	r3, r5
   20f10:	cmpeq	r2, r4
   20f14:	bhi	20f8c <__assert_fail@plt+0xe8a0>
   20f18:	mov	r0, r4
   20f1c:	mov	r1, r5
   20f20:	bl	3994c <__assert_fail@plt+0x27260>
   20f24:	orrs	r3, r2, r3
   20f28:	bne	21124 <__assert_fail@plt+0xea38>
   20f2c:	ldrd	r2, [sp, #160]	; 0xa0
   20f30:	mov	r0, r4
   20f34:	mov	r1, r5
   20f38:	bl	3994c <__assert_fail@plt+0x27260>
   20f3c:	mov	r3, r1
   20f40:	ldr	r1, [sp, #12]
   20f44:	mov	r2, r0
   20f48:	mul	r0, r2, r1
   20f4c:	ldr	r1, [sp, #8]
   20f50:	umull	r6, r7, r2, r1
   20f54:	mla	r0, r1, r3, r0
   20f58:	strd	r6, [sp]
   20f5c:	ldr	r1, [sp, #4]
   20f60:	add	r1, r0, r1
   20f64:	str	r1, [sp, #4]
   20f68:	ldrd	r0, [sp]
   20f6c:	bl	3994c <__assert_fail@plt+0x27260>
   20f70:	ldrd	r2, [sp, #8]
   20f74:	cmp	r3, r1
   20f78:	cmpeq	r2, r0
   20f7c:	bne	21124 <__assert_fail@plt+0xea38>
   20f80:	mov	r7, #0
   20f84:	mov	r6, r7
   20f88:	b	21050 <__assert_fail@plt+0xe964>
   20f8c:	orrs	r3, r4, r5
   20f90:	beq	21124 <__assert_fail@plt+0xea38>
   20f94:	mov	r2, r4
   20f98:	mov	r3, r5
   20f9c:	ldrd	r0, [sp, #160]	; 0xa0
   20fa0:	bl	3994c <__assert_fail@plt+0x27260>
   20fa4:	orrs	r3, r2, r3
   20fa8:	bne	21124 <__assert_fail@plt+0xea38>
   20fac:	mov	r2, r4
   20fb0:	mov	r3, r5
   20fb4:	ldrd	r0, [sp, #160]	; 0xa0
   20fb8:	bl	3994c <__assert_fail@plt+0x27260>
   20fbc:	mov	r4, r0
   20fc0:	mov	r5, r1
   20fc4:	mov	r2, r0
   20fc8:	mov	r3, r1
   20fcc:	ldrd	r0, [sp, #8]
   20fd0:	bl	3994c <__assert_fail@plt+0x27260>
   20fd4:	mov	r1, #10
   20fd8:	umull	r6, r7, r2, r1
   20fdc:	mla	r7, r1, r3, r7
   20fe0:	mov	r0, r6
   20fe4:	mov	r2, r4
   20fe8:	mov	r3, r5
   20fec:	mov	r1, r7
   20ff0:	bl	3994c <__assert_fail@plt+0x27260>
   20ff4:	lsls	r0, r2, #1
   20ff8:	adc	r1, r3, r3
   20ffc:	mov	r2, r4
   21000:	strd	r0, [sp, #32]
   21004:	mov	r3, r5
   21008:	ldrd	r0, [sp, #8]
   2100c:	bl	3994c <__assert_fail@plt+0x27260>
   21010:	mov	r2, r4
   21014:	mov	r3, r5
   21018:	strd	r0, [sp]
   2101c:	mov	r0, r6
   21020:	mov	r1, r7
   21024:	bl	3994c <__assert_fail@plt+0x27260>
   21028:	ldrd	r2, [sp, #32]
   2102c:	cmp	r5, r3
   21030:	cmpeq	r4, r2
   21034:	mov	r6, r0
   21038:	bls	21118 <__assert_fail@plt+0xea2c>
   2103c:	ldr	r3, [sp, #32]
   21040:	ldr	r2, [sp, #36]	; 0x24
   21044:	orrs	r3, r3, r2
   21048:	movne	r7, #1
   2104c:	moveq	r7, #0
   21050:	ands	r3, r9, #16
   21054:	str	r3, [sp, #32]
   21058:	moveq	r4, sl
   2105c:	mvneq	r5, #0
   21060:	beq	213c4 <__assert_fail@plt+0xecd8>
   21064:	ldr	r2, [sp, #16]
   21068:	mov	r3, #0
   2106c:	strd	r2, [sp, #8]
   21070:	ldrd	r0, [sp, #8]
   21074:	ldrd	r2, [sp]
   21078:	cmp	r3, r1
   2107c:	cmpeq	r2, r0
   21080:	movcc	r4, sl
   21084:	movcc	r5, #0
   21088:	bcc	213c4 <__assert_fail@plt+0xecd8>
   2108c:	mov	r5, #0
   21090:	ldrd	r0, [sp]
   21094:	ldrd	r2, [sp, #8]
   21098:	bl	3994c <__assert_fail@plt+0x27260>
   2109c:	mov	r3, #10
   210a0:	ldr	r1, [sp, #16]
   210a4:	asr	r4, r7, #1
   210a8:	mla	r6, r3, r2, r6
   210ac:	mov	r0, r6
   210b0:	bl	39260 <__assert_fail@plt+0x26b74>
   210b4:	ldrd	r2, [sp, #8]
   210b8:	add	r4, r4, r1, lsl #1
   210bc:	ldrd	r0, [sp]
   210c0:	bl	3994c <__assert_fail@plt+0x27260>
   210c4:	add	r7, r7, r4
   210c8:	strd	r0, [sp]
   210cc:	mov	r0, r6
   210d0:	ldr	r1, [sp, #16]
   210d4:	bl	39074 <__assert_fail@plt+0x26988>
   210d8:	ldr	r3, [sp, #16]
   210dc:	cmp	r3, r4
   210e0:	mov	r6, r0
   210e4:	bls	21310 <__assert_fail@plt+0xec24>
   210e8:	adds	r7, r7, #0
   210ec:	movne	r7, #1
   210f0:	ldrd	r2, [sp, #8]
   210f4:	ldrd	r0, [sp]
   210f8:	add	r5, r5, #1
   210fc:	cmp	r3, r1
   21100:	cmpeq	r2, r0
   21104:	bhi	21324 <__assert_fail@plt+0xec38>
   21108:	cmp	r5, #8
   2110c:	bne	21090 <__assert_fail@plt+0xe9a4>
   21110:	mov	r4, sl
   21114:	b	213c4 <__assert_fail@plt+0xecd8>
   21118:	movcs	r7, #2
   2111c:	movcc	r7, #3
   21120:	b	21050 <__assert_fail@plt+0xe964>
   21124:	mov	r0, r4
   21128:	mov	r1, r5
   2112c:	bl	39804 <__assert_fail@plt+0x27118>
   21130:	vmov	d9, r0, r1
   21134:	ldrd	r0, [sp, #160]	; 0xa0
   21138:	bl	39804 <__assert_fail@plt+0x27118>
   2113c:	vmov	d7, r0, r1
   21140:	ldrd	r0, [sp, #8]
   21144:	vdiv.f64	d8, d9, d7
   21148:	bl	39804 <__assert_fail@plt+0x27118>
   2114c:	ands	r4, r9, #16
   21150:	vmov	d7, r0, r1
   21154:	vmul.f64	d0, d8, d7
   21158:	bne	21244 <__assert_fail@plt+0xeb58>
   2115c:	and	r0, r9, #3
   21160:	bl	20de8 <__assert_fail@plt+0xe6fc>
   21164:	ldr	r1, [pc, #1196]	; 21618 <__assert_fail@plt+0xef2c>
   21168:	mov	r0, fp
   2116c:	mvn	r5, #0
   21170:	vmov	r2, r3, d0
   21174:	bl	12590 <sprintf@plt>
   21178:	mov	r0, fp
   2117c:	bl	123bc <strlen@plt>
   21180:	mov	r6, r0
   21184:	sub	r8, sl, r6
   21188:	mov	r2, r6
   2118c:	mov	r1, fp
   21190:	mov	r0, r8
   21194:	bl	1208c <memmove@plt>
   21198:	sub	r4, r6, r4
   2119c:	add	r4, r8, r4
   211a0:	tst	r9, #4
   211a4:	beq	21518 <__assert_fail@plt+0xee2c>
   211a8:	ldr	r0, [sp, #44]	; 0x2c
   211ac:	bl	123bc <strlen@plt>
   211b0:	sub	r6, r4, r8
   211b4:	add	r7, sp, #52	; 0x34
   211b8:	mov	r2, r6
   211bc:	mov	r1, r8
   211c0:	str	r0, [sp]
   211c4:	mov	r0, r7
   211c8:	bl	120f8 <memcpy@plt>
   211cc:	mvn	r3, #0
   211d0:	ldr	r2, [sp, #28]
   211d4:	ldrb	r2, [r2]
   211d8:	cmp	r2, #0
   211dc:	beq	211f8 <__assert_fail@plt+0xeb0c>
   211e0:	cmp	r2, #255	; 0xff
   211e4:	movne	r3, r2
   211e8:	ldr	r2, [sp, #28]
   211ec:	moveq	r3, r6
   211f0:	add	r2, r2, #1
   211f4:	str	r2, [sp, #28]
   211f8:	cmp	r3, r6
   211fc:	movcs	r3, r6
   21200:	sub	r6, r6, r3
   21204:	sub	r8, r4, r3
   21208:	mov	r2, r3
   2120c:	add	r1, r7, r6
   21210:	mov	r0, r8
   21214:	str	r3, [sp, #8]
   21218:	bl	120f8 <memcpy@plt>
   2121c:	cmp	r6, #0
   21220:	beq	21518 <__assert_fail@plt+0xee2c>
   21224:	ldr	r3, [sp]
   21228:	ldr	r1, [sp, #44]	; 0x2c
   2122c:	sub	r4, r8, r3
   21230:	mov	r2, r3
   21234:	mov	r0, r4
   21238:	bl	120f8 <memcpy@plt>
   2123c:	ldr	r3, [sp, #8]
   21240:	b	211d0 <__assert_fail@plt+0xeae4>
   21244:	vldr	s13, [sp, #16]
   21248:	vldr	d7, [pc, #944]	; 21600 <__assert_fail@plt+0xef14>
   2124c:	mov	r5, #0
   21250:	vcvt.f64.s32	d6, s13
   21254:	vmul.f64	d7, d7, d6
   21258:	add	r5, r5, #1
   2125c:	vmul.f64	d5, d6, d7
   21260:	vcmpe.f64	d0, d5
   21264:	vmrs	APSR_nzcv, fpscr
   21268:	blt	21274 <__assert_fail@plt+0xeb88>
   2126c:	cmp	r5, #8
   21270:	bne	21254 <__assert_fail@plt+0xeb68>
   21274:	vdiv.f64	d9, d0, d7
   21278:	ldr	r0, [sp, #20]
   2127c:	add	r4, r8, #1
   21280:	vmov.f64	d0, d9
   21284:	bl	20de8 <__assert_fail@plt+0xe6fc>
   21288:	ldr	r1, [pc, #908]	; 2161c <__assert_fail@plt+0xef30>
   2128c:	mov	r0, fp
   21290:	vmov	r2, r3, d0
   21294:	bl	12590 <sprintf@plt>
   21298:	mov	r0, fp
   2129c:	bl	123bc <strlen@plt>
   212a0:	ldr	r3, [sp, #24]
   212a4:	cmp	r3, #0
   212a8:	movne	r3, #1
   212ac:	moveq	r3, #2
   212b0:	add	r3, r3, r4
   212b4:	cmp	r0, r3
   212b8:	mov	r6, r0
   212bc:	bhi	212d8 <__assert_fail@plt+0xebec>
   212c0:	tst	r9, #8
   212c4:	beq	21184 <__assert_fail@plt+0xea98>
   212c8:	add	r3, fp, r0
   212cc:	ldrb	r3, [r3, #-1]
   212d0:	cmp	r3, #48	; 0x30
   212d4:	bne	21184 <__assert_fail@plt+0xea98>
   212d8:	vldr	d8, [pc, #808]	; 21608 <__assert_fail@plt+0xef1c>
   212dc:	ldr	r0, [sp, #20]
   212e0:	mov	r4, #0
   212e4:	vmul.f64	d0, d9, d8
   212e8:	bl	20de8 <__assert_fail@plt+0xe6fc>
   212ec:	ldr	r1, [pc, #804]	; 21618 <__assert_fail@plt+0xef2c>
   212f0:	mov	r0, fp
   212f4:	vdiv.f64	d7, d0, d8
   212f8:	vmov	r2, r3, d7
   212fc:	bl	12590 <sprintf@plt>
   21300:	mov	r0, fp
   21304:	bl	123bc <strlen@plt>
   21308:	mov	r6, r0
   2130c:	b	21184 <__assert_fail@plt+0xea98>
   21310:	ldr	r3, [sp, #16]
   21314:	cmp	r3, r7
   21318:	movcc	r7, #3
   2131c:	movcs	r7, #2
   21320:	b	210f0 <__assert_fail@plt+0xea04>
   21324:	ldrd	r2, [sp]
   21328:	cmp	r3, #0
   2132c:	cmpeq	r2, #9
   21330:	bhi	21110 <__assert_fail@plt+0xea24>
   21334:	ldr	r3, [sp, #20]
   21338:	cmp	r3, #1
   2133c:	bne	2148c <__assert_fail@plt+0xeda0>
   21340:	and	r3, r6, #1
   21344:	add	r3, r3, r7
   21348:	cmp	r3, #2
   2134c:	movle	r3, #0
   21350:	movgt	r3, #1
   21354:	cmp	r3, #0
   21358:	beq	215f4 <__assert_fail@plt+0xef08>
   2135c:	add	r6, r6, #1
   21360:	cmp	r6, #10
   21364:	bne	21398 <__assert_fail@plt+0xecac>
   21368:	ldrd	r2, [sp]
   2136c:	adds	r2, r2, #1
   21370:	adc	r3, r3, #0
   21374:	cmp	r3, #0
   21378:	cmpeq	r2, #10
   2137c:	strd	r2, [sp]
   21380:	moveq	r4, sl
   21384:	moveq	r7, #0
   21388:	beq	214a8 <__assert_fail@plt+0xedbc>
   2138c:	mov	r7, #0
   21390:	ands	r6, r9, #8
   21394:	bne	214a4 <__assert_fail@plt+0xedb8>
   21398:	add	r4, fp, #644	; 0x284
   2139c:	add	r4, r4, #2
   213a0:	add	r6, r6, #48	; 0x30
   213a4:	sub	r4, r4, r8
   213a8:	strb	r6, [fp, #646]	; 0x286
   213ac:	mov	r2, r8
   213b0:	ldr	r1, [sp, #40]	; 0x28
   213b4:	mov	r0, r4
   213b8:	bl	120f8 <memcpy@plt>
   213bc:	mov	r6, #0
   213c0:	mov	r7, r6
   213c4:	ldr	r3, [sp, #20]
   213c8:	cmp	r3, #1
   213cc:	bne	214b0 <__assert_fail@plt+0xedc4>
   213d0:	ldrd	r2, [sp]
   213d4:	mov	r3, #0
   213d8:	and	r2, r2, #1
   213dc:	adds	r2, r2, r7
   213e0:	adc	r3, r3, r7, asr #31
   213e4:	orr	r2, r2, r3
   213e8:	cmp	r2, #0
   213ec:	addne	r6, r6, #1
   213f0:	cmp	r6, #5
   213f4:	movle	r6, #0
   213f8:	movgt	r6, #1
   213fc:	cmp	r6, #0
   21400:	beq	214cc <__assert_fail@plt+0xede0>
   21404:	ldrd	r2, [sp]
   21408:	adds	r2, r2, #1
   2140c:	adc	r3, r3, #0
   21410:	strd	r2, [sp]
   21414:	ldr	r3, [sp, #32]
   21418:	cmp	r3, #0
   2141c:	beq	214cc <__assert_fail@plt+0xede0>
   21420:	ldrd	r0, [sp]
   21424:	mov	r3, #0
   21428:	ldr	r2, [sp, #16]
   2142c:	cmp	r3, r1
   21430:	cmpeq	r2, r0
   21434:	moveq	r3, #1
   21438:	movne	r3, #0
   2143c:	cmp	r5, #7
   21440:	movgt	r3, #0
   21444:	andle	r3, r3, #1
   21448:	cmp	r3, #0
   2144c:	beq	214cc <__assert_fail@plt+0xede0>
   21450:	tst	r9, #8
   21454:	add	r5, r5, #1
   21458:	bne	2147c <__assert_fail@plt+0xed90>
   2145c:	mov	r3, #48	; 0x30
   21460:	strb	r3, [r4, #-1]
   21464:	mvn	r3, r8
   21468:	add	r4, r4, r3
   2146c:	mov	r2, r8
   21470:	ldr	r1, [sp, #40]	; 0x28
   21474:	mov	r0, r4
   21478:	bl	120f8 <memcpy@plt>
   2147c:	mov	r3, #49	; 0x31
   21480:	sub	r8, r4, #1
   21484:	strb	r3, [r4, #-1]
   21488:	b	211a0 <__assert_fail@plt+0xeab4>
   2148c:	cmp	r7, #0
   21490:	ldr	r3, [sp, #20]
   21494:	clz	r3, r3
   21498:	lsr	r3, r3, #5
   2149c:	moveq	r3, #0
   214a0:	b	21354 <__assert_fail@plt+0xec68>
   214a4:	mov	r4, sl
   214a8:	mov	r6, #0
   214ac:	b	213c4 <__assert_fail@plt+0xecd8>
   214b0:	ldr	r3, [sp, #20]
   214b4:	cmp	r3, #0
   214b8:	movne	r6, #0
   214bc:	bne	213fc <__assert_fail@plt+0xed10>
   214c0:	add	r6, r6, r7
   214c4:	cmp	r6, #0
   214c8:	b	213f4 <__assert_fail@plt+0xed08>
   214cc:	mov	r8, r4
   214d0:	mov	r6, #10
   214d4:	mov	r7, #0
   214d8:	ldrd	r0, [sp]
   214dc:	mov	r2, r6
   214e0:	mov	r3, r7
   214e4:	bl	3994c <__assert_fail@plt+0x27260>
   214e8:	mov	r3, r7
   214ec:	ldrd	r0, [sp]
   214f0:	add	r2, r2, #48	; 0x30
   214f4:	strb	r2, [r8, #-1]!
   214f8:	mov	r2, r6
   214fc:	bl	3994c <__assert_fail@plt+0x27260>
   21500:	mov	r2, r0
   21504:	mov	r3, r1
   21508:	orrs	r3, r2, r3
   2150c:	strd	r0, [sp]
   21510:	bne	214d8 <__assert_fail@plt+0xedec>
   21514:	b	211a0 <__assert_fail@plt+0xeab4>
   21518:	tst	r9, #128	; 0x80
   2151c:	beq	215a8 <__assert_fail@plt+0xeebc>
   21520:	cmn	r5, #1
   21524:	moveq	r2, #1
   21528:	moveq	r3, #0
   2152c:	moveq	r5, #0
   21530:	beq	215e0 <__assert_fail@plt+0xeef4>
   21534:	and	r2, r9, #256	; 0x100
   21538:	orrs	r3, r5, r2
   2153c:	beq	215a8 <__assert_fail@plt+0xeebc>
   21540:	tst	r9, #64	; 0x40
   21544:	movne	r1, #32
   21548:	addne	r3, fp, #648	; 0x288
   2154c:	strbne	r1, [fp, #647]	; 0x287
   21550:	moveq	r3, sl
   21554:	cmp	r5, #0
   21558:	beq	21624 <__assert_fail@plt+0xef38>
   2155c:	ldr	r1, [sp, #24]
   21560:	add	sl, r3, #1
   21564:	cmp	r5, #1
   21568:	cmpeq	r1, #0
   2156c:	moveq	r1, #107	; 0x6b
   21570:	ldrne	r1, [pc, #168]	; 21620 <__assert_fail@plt+0xef34>
   21574:	ldrbne	r1, [r1, r5]
   21578:	cmp	r2, #0
   2157c:	strb	r1, [r3]
   21580:	beq	215a8 <__assert_fail@plt+0xeebc>
   21584:	ldr	r2, [sp, #24]
   21588:	cmp	r5, #0
   2158c:	cmpne	r2, #0
   21590:	addne	sl, r3, #2
   21594:	movne	r2, #105	; 0x69
   21598:	strbne	r2, [r3, #1]
   2159c:	mov	r3, #66	; 0x42
   215a0:	strb	r3, [sl]
   215a4:	add	sl, sl, #1
   215a8:	mov	r3, #0
   215ac:	mov	r0, r8
   215b0:	strb	r3, [sl]
   215b4:	add	sp, sp, #100	; 0x64
   215b8:	vpop	{d8-d9}
   215bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   215c0:	add	r5, r5, #1
   215c4:	cmp	r5, #8
   215c8:	beq	21534 <__assert_fail@plt+0xee48>
   215cc:	ldr	r1, [sp, #16]
   215d0:	ldr	r0, [sp, #16]
   215d4:	mul	r1, r1, r3
   215d8:	umull	r2, r3, r2, r0
   215dc:	add	r3, r1, r3
   215e0:	ldrd	r0, [sp, #160]	; 0xa0
   215e4:	cmp	r3, r1
   215e8:	cmpeq	r2, r0
   215ec:	bcc	215c0 <__assert_fail@plt+0xeed4>
   215f0:	b	21534 <__assert_fail@plt+0xee48>
   215f4:	cmp	r6, #0
   215f8:	beq	21390 <__assert_fail@plt+0xeca4>
   215fc:	b	21398 <__assert_fail@plt+0xecac>
   21600:	andeq	r0, r0, r0
   21604:	svccc	0x00f00000	; IMB
   21608:	andeq	r0, r0, r0
   2160c:	eormi	r0, r4, r0
   21610:	andeq	sl, r3, r1, asr #14
   21614:	ldrdeq	fp, [r3], -pc	; <UNPREDICTABLE>
   21618:	muleq	r3, r0, lr
   2161c:	muleq	r3, r6, lr
   21620:	andeq	sp, r3, r0, ror lr
   21624:	cmp	r2, #0
   21628:	mov	sl, r3
   2162c:	bne	2159c <__assert_fail@plt+0xeeb0>
   21630:	b	215a8 <__assert_fail@plt+0xeebc>
   21634:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   21638:	subs	r5, r0, #0
   2163c:	mov	r8, r1
   21640:	mov	r6, r2
   21644:	bne	216c4 <__assert_fail@plt+0xefd8>
   21648:	ldr	r0, [pc, #316]	; 2178c <__assert_fail@plt+0xf0a0>
   2164c:	bl	122fc <getenv@plt>
   21650:	subs	r5, r0, #0
   21654:	bne	216c4 <__assert_fail@plt+0xefd8>
   21658:	ldr	r0, [pc, #304]	; 21790 <__assert_fail@plt+0xf0a4>
   2165c:	bl	122fc <getenv@plt>
   21660:	subs	r5, r0, #0
   21664:	bne	216c4 <__assert_fail@plt+0xefd8>
   21668:	ldr	r0, [pc, #292]	; 21794 <__assert_fail@plt+0xf0a8>
   2166c:	bl	122fc <getenv@plt>
   21670:	mov	r4, #0
   21674:	mov	r3, #0
   21678:	cmp	r0, #0
   2167c:	moveq	r2, #1024	; 0x400
   21680:	movne	r2, #512	; 0x200
   21684:	strd	r2, [r6]
   21688:	mov	r0, #0
   2168c:	str	r4, [r8]
   21690:	ldrd	r2, [r6]
   21694:	orrs	r3, r2, r3
   21698:	bne	216bc <__assert_fail@plt+0xefd0>
   2169c:	ldr	r0, [pc, #240]	; 21794 <__assert_fail@plt+0xf0a8>
   216a0:	bl	122fc <getenv@plt>
   216a4:	mov	r3, #0
   216a8:	cmp	r0, #0
   216ac:	moveq	r2, #1024	; 0x400
   216b0:	movne	r2, #512	; 0x200
   216b4:	mov	r0, #4
   216b8:	strd	r2, [r6]
   216bc:	add	sp, sp, #16
   216c0:	pop	{r4, r5, r6, r7, r8, pc}
   216c4:	ldrb	r3, [r5]
   216c8:	ldr	r7, [pc, #200]	; 21798 <__assert_fail@plt+0xf0ac>
   216cc:	cmp	r3, #39	; 0x27
   216d0:	addeq	r5, r5, #1
   216d4:	mov	r3, #4
   216d8:	add	r2, r7, #12
   216dc:	add	r1, r7, #20
   216e0:	mov	r0, r5
   216e4:	moveq	r4, #4
   216e8:	movne	r4, #0
   216ec:	bl	38508 <__assert_fail@plt+0x25e1c>
   216f0:	cmp	r0, #0
   216f4:	blt	21714 <__assert_fail@plt+0xf028>
   216f8:	add	r7, r7, r0, lsl #2
   216fc:	mov	r2, #1
   21700:	ldr	r3, [r7, #12]
   21704:	orr	r4, r4, r3
   21708:	mov	r3, #0
   2170c:	strd	r2, [r6]
   21710:	b	21688 <__assert_fail@plt+0xef9c>
   21714:	ldr	r3, [pc, #128]	; 2179c <__assert_fail@plt+0xf0b0>
   21718:	mov	r2, #0
   2171c:	str	r3, [sp]
   21720:	add	r1, sp, #12
   21724:	mov	r3, r6
   21728:	mov	r0, r5
   2172c:	bl	296fc <__assert_fail@plt+0x17010>
   21730:	cmp	r0, #0
   21734:	movne	r3, #0
   21738:	ldreq	r2, [sp, #12]
   2173c:	strne	r3, [r8]
   21740:	bne	21690 <__assert_fail@plt+0xefa4>
   21744:	ldrb	r3, [r5]
   21748:	sub	r3, r3, #48	; 0x30
   2174c:	cmp	r3, #9
   21750:	bls	21688 <__assert_fail@plt+0xef9c>
   21754:	cmp	r2, r5
   21758:	bne	21784 <__assert_fail@plt+0xf098>
   2175c:	ldrb	r3, [r2, #-1]
   21760:	cmp	r3, #66	; 0x42
   21764:	orrne	r4, r4, #128	; 0x80
   21768:	bne	2177c <__assert_fail@plt+0xf090>
   2176c:	ldrb	r3, [r2, #-2]
   21770:	orr	r4, r4, #384	; 0x180
   21774:	cmp	r3, #105	; 0x69
   21778:	bne	21688 <__assert_fail@plt+0xef9c>
   2177c:	orr	r4, r4, #32
   21780:	b	21688 <__assert_fail@plt+0xef9c>
   21784:	add	r5, r5, #1
   21788:	b	21744 <__assert_fail@plt+0xf058>
   2178c:	andeq	fp, r3, lr, lsl sl
   21790:	muleq	r3, ip, lr
   21794:	strdeq	fp, [r3], -r9
   21798:	andeq	sp, r3, r0, ror lr
   2179c:	andeq	sp, r3, r6, lsr #29
   217a0:	push	{r4, r5, r6, r7, r8, lr}
   217a4:	ldr	r5, [pc, #112]	; 2181c <__assert_fail@plt+0xf130>
   217a8:	ldr	r4, [r5]
   217ac:	cmp	r4, #0
   217b0:	bne	21808 <__assert_fail@plt+0xf11c>
   217b4:	mov	r6, r0
   217b8:	bl	12014 <getpwuid@plt>
   217bc:	cmp	r0, #0
   217c0:	ldreq	r7, [pc, #88]	; 21820 <__assert_fail@plt+0xf134>
   217c4:	ldrne	r7, [r0]
   217c8:	mov	r0, r7
   217cc:	bl	123bc <strlen@plt>
   217d0:	add	r0, r0, #12
   217d4:	bic	r0, r0, #3
   217d8:	bl	28d44 <__assert_fail@plt+0x16658>
   217dc:	mov	r1, r7
   217e0:	mov	r4, r0
   217e4:	str	r6, [r0], #8
   217e8:	bl	12278 <strcpy@plt>
   217ec:	ldr	r3, [r5]
   217f0:	str	r4, [r5]
   217f4:	str	r3, [r4, #4]
   217f8:	ldrb	r0, [r4, #8]
   217fc:	cmp	r0, #0
   21800:	addne	r0, r4, #8
   21804:	pop	{r4, r5, r6, r7, r8, pc}
   21808:	ldr	r3, [r4]
   2180c:	cmp	r3, r0
   21810:	beq	217f8 <__assert_fail@plt+0xf10c>
   21814:	ldr	r4, [r4, #4]
   21818:	b	217ac <__assert_fail@plt+0xf0c0>
   2181c:	andeq	r0, r5, ip, lsl #26
   21820:	ldrdeq	fp, [r3], -pc	; <UNPREDICTABLE>
   21824:	push	{r4, r5, r6, r7, r8, lr}
   21828:	mov	r6, r0
   2182c:	ldr	r5, [pc, #204]	; 21900 <__assert_fail@plt+0xf214>
   21830:	ldr	r4, [r5]
   21834:	cmp	r4, #0
   21838:	bne	218a8 <__assert_fail@plt+0xf1bc>
   2183c:	ldr	r7, [r5, #4]
   21840:	cmp	r7, #0
   21844:	bne	218d4 <__assert_fail@plt+0xf1e8>
   21848:	mov	r0, r6
   2184c:	bl	11fd8 <getpwnam@plt>
   21850:	mov	r8, r0
   21854:	mov	r0, r6
   21858:	bl	123bc <strlen@plt>
   2185c:	add	r0, r0, #12
   21860:	bic	r0, r0, #3
   21864:	bl	28d44 <__assert_fail@plt+0x16658>
   21868:	mov	r1, r6
   2186c:	mov	r4, r0
   21870:	add	r0, r0, #8
   21874:	bl	12278 <strcpy@plt>
   21878:	cmp	r8, #0
   2187c:	ldrne	r3, [r8, #8]
   21880:	ldreq	r3, [r5, #4]
   21884:	streq	r4, [r5, #4]
   21888:	strne	r3, [r4]
   2188c:	streq	r3, [r4, #4]
   21890:	ldrne	r3, [r5]
   21894:	moveq	r4, r7
   21898:	strne	r3, [r4, #4]
   2189c:	strne	r4, [r5]
   218a0:	mov	r0, r4
   218a4:	pop	{r4, r5, r6, r7, r8, pc}
   218a8:	ldrb	r2, [r4, #8]
   218ac:	ldrb	r3, [r6]
   218b0:	cmp	r2, r3
   218b4:	bne	218cc <__assert_fail@plt+0xf1e0>
   218b8:	mov	r1, r6
   218bc:	add	r0, r4, #8
   218c0:	bl	11ffc <strcmp@plt>
   218c4:	cmp	r0, #0
   218c8:	beq	218a0 <__assert_fail@plt+0xf1b4>
   218cc:	ldr	r4, [r4, #4]
   218d0:	b	21834 <__assert_fail@plt+0xf148>
   218d4:	ldrb	r2, [r7, #8]
   218d8:	ldrb	r3, [r6]
   218dc:	cmp	r2, r3
   218e0:	bne	218f8 <__assert_fail@plt+0xf20c>
   218e4:	mov	r1, r6
   218e8:	add	r0, r7, #8
   218ec:	bl	11ffc <strcmp@plt>
   218f0:	subs	r4, r0, #0
   218f4:	beq	218a0 <__assert_fail@plt+0xf1b4>
   218f8:	ldr	r7, [r7, #4]
   218fc:	b	21840 <__assert_fail@plt+0xf154>
   21900:	andeq	r0, r5, ip, lsl #26
   21904:	push	{r4, r5, r6, r7, r8, lr}
   21908:	ldr	r5, [pc, #112]	; 21980 <__assert_fail@plt+0xf294>
   2190c:	ldr	r4, [r5, #8]
   21910:	cmp	r4, #0
   21914:	bne	2196c <__assert_fail@plt+0xf280>
   21918:	mov	r6, r0
   2191c:	bl	126c8 <getgrgid@plt>
   21920:	cmp	r0, #0
   21924:	ldreq	r7, [pc, #88]	; 21984 <__assert_fail@plt+0xf298>
   21928:	ldrne	r7, [r0]
   2192c:	mov	r0, r7
   21930:	bl	123bc <strlen@plt>
   21934:	add	r0, r0, #12
   21938:	bic	r0, r0, #3
   2193c:	bl	28d44 <__assert_fail@plt+0x16658>
   21940:	mov	r1, r7
   21944:	mov	r4, r0
   21948:	str	r6, [r0], #8
   2194c:	bl	12278 <strcpy@plt>
   21950:	ldr	r3, [r5, #8]
   21954:	str	r4, [r5, #8]
   21958:	str	r3, [r4, #4]
   2195c:	ldrb	r0, [r4, #8]
   21960:	cmp	r0, #0
   21964:	addne	r0, r4, #8
   21968:	pop	{r4, r5, r6, r7, r8, pc}
   2196c:	ldr	r3, [r4]
   21970:	cmp	r3, r0
   21974:	beq	2195c <__assert_fail@plt+0xf270>
   21978:	ldr	r4, [r4, #4]
   2197c:	b	21910 <__assert_fail@plt+0xf224>
   21980:	andeq	r0, r5, ip, lsl #26
   21984:	ldrdeq	fp, [r3], -pc	; <UNPREDICTABLE>
   21988:	push	{r4, r5, r6, r7, r8, lr}
   2198c:	mov	r6, r0
   21990:	ldr	r5, [pc, #204]	; 21a64 <__assert_fail@plt+0xf378>
   21994:	ldr	r4, [r5, #8]
   21998:	cmp	r4, #0
   2199c:	bne	21a0c <__assert_fail@plt+0xf320>
   219a0:	ldr	r7, [r5, #12]
   219a4:	cmp	r7, #0
   219a8:	bne	21a38 <__assert_fail@plt+0xf34c>
   219ac:	mov	r0, r6
   219b0:	bl	126d4 <getgrnam@plt>
   219b4:	mov	r8, r0
   219b8:	mov	r0, r6
   219bc:	bl	123bc <strlen@plt>
   219c0:	add	r0, r0, #12
   219c4:	bic	r0, r0, #3
   219c8:	bl	28d44 <__assert_fail@plt+0x16658>
   219cc:	mov	r1, r6
   219d0:	mov	r4, r0
   219d4:	add	r0, r0, #8
   219d8:	bl	12278 <strcpy@plt>
   219dc:	cmp	r8, #0
   219e0:	ldrne	r3, [r8, #8]
   219e4:	ldreq	r3, [r5, #12]
   219e8:	streq	r4, [r5, #12]
   219ec:	strne	r3, [r4]
   219f0:	streq	r3, [r4, #4]
   219f4:	ldrne	r3, [r5, #8]
   219f8:	moveq	r4, r7
   219fc:	strne	r3, [r4, #4]
   21a00:	strne	r4, [r5, #8]
   21a04:	mov	r0, r4
   21a08:	pop	{r4, r5, r6, r7, r8, pc}
   21a0c:	ldrb	r2, [r4, #8]
   21a10:	ldrb	r3, [r6]
   21a14:	cmp	r2, r3
   21a18:	bne	21a30 <__assert_fail@plt+0xf344>
   21a1c:	mov	r1, r6
   21a20:	add	r0, r4, #8
   21a24:	bl	11ffc <strcmp@plt>
   21a28:	cmp	r0, #0
   21a2c:	beq	21a04 <__assert_fail@plt+0xf318>
   21a30:	ldr	r4, [r4, #4]
   21a34:	b	21998 <__assert_fail@plt+0xf2ac>
   21a38:	ldrb	r2, [r7, #8]
   21a3c:	ldrb	r3, [r6]
   21a40:	cmp	r2, r3
   21a44:	bne	21a5c <__assert_fail@plt+0xf370>
   21a48:	mov	r1, r6
   21a4c:	add	r0, r7, #8
   21a50:	bl	11ffc <strcmp@plt>
   21a54:	subs	r4, r0, #0
   21a58:	beq	21a04 <__assert_fail@plt+0xf318>
   21a5c:	ldr	r7, [r7, #4]
   21a60:	b	219a4 <__assert_fail@plt+0xf2b8>
   21a64:	andeq	r0, r5, ip, lsl #26
   21a68:	push	{r4, r5, r6, r7, fp, lr}
   21a6c:	mov	r7, r3
   21a70:	lsrs	r3, r2, #30
   21a74:	mov	r4, r0
   21a78:	movne	r3, #1
   21a7c:	moveq	r3, #0
   21a80:	lsls	r0, r2, #2
   21a84:	add	fp, sp, #20
   21a88:	bmi	21a94 <__assert_fail@plt+0xf3a8>
   21a8c:	cmp	r3, #0
   21a90:	beq	21aa0 <__assert_fail@plt+0xf3b4>
   21a94:	mov	r0, #0
   21a98:	sub	sp, fp, #20
   21a9c:	pop	{r4, r5, r6, r7, fp, pc}
   21aa0:	cmp	r0, #4016	; 0xfb0
   21aa4:	mov	r5, r1
   21aa8:	mov	r6, r2
   21aac:	bhi	21b2c <__assert_fail@plt+0xf440>
   21ab0:	add	r0, r0, #29
   21ab4:	bic	r0, r0, #7
   21ab8:	sub	sp, sp, r0
   21abc:	add	r0, sp, #15
   21ac0:	bic	r0, r0, #15
   21ac4:	cmp	r0, #0
   21ac8:	beq	21a94 <__assert_fail@plt+0xf3a8>
   21acc:	mov	r3, #1
   21ad0:	str	r3, [r0, #4]
   21ad4:	mov	ip, #0
   21ad8:	mov	r3, r5
   21adc:	mov	lr, #2
   21ae0:	cmp	lr, r6
   21ae4:	bcc	21b34 <__assert_fail@plt+0xf448>
   21ae8:	mov	r3, r4
   21aec:	mov	ip, #0
   21af0:	str	ip, [r7]
   21af4:	ldrb	r2, [r3]
   21af8:	cmp	r2, #0
   21afc:	beq	21b20 <__assert_fail@plt+0xf434>
   21b00:	ldrb	r1, [r5, ip]
   21b04:	cmp	r1, r2
   21b08:	bne	21b70 <__assert_fail@plt+0xf484>
   21b0c:	add	ip, ip, #1
   21b10:	cmp	r6, ip
   21b14:	add	r3, r3, #1
   21b18:	bne	21af4 <__assert_fail@plt+0xf408>
   21b1c:	str	r4, [r7]
   21b20:	bl	38d00 <__assert_fail@plt+0x26614>
   21b24:	mov	r0, #1
   21b28:	b	21a98 <__assert_fail@plt+0xf3ac>
   21b2c:	bl	38cb0 <__assert_fail@plt+0x265c4>
   21b30:	b	21ac4 <__assert_fail@plt+0xf3d8>
   21b34:	ldrb	r1, [r3, #1]!
   21b38:	ldrb	r2, [r5, ip]
   21b3c:	cmp	r2, r1
   21b40:	bne	21b58 <__assert_fail@plt+0xf46c>
   21b44:	add	ip, ip, #1
   21b48:	sub	r2, lr, ip
   21b4c:	str	r2, [r0, lr, lsl #2]
   21b50:	add	lr, lr, #1
   21b54:	b	21ae0 <__assert_fail@plt+0xf3f4>
   21b58:	cmp	ip, #0
   21b5c:	streq	lr, [r0, lr, lsl #2]
   21b60:	beq	21b50 <__assert_fail@plt+0xf464>
   21b64:	ldr	r2, [r0, ip, lsl #2]
   21b68:	sub	ip, ip, r2
   21b6c:	b	21b38 <__assert_fail@plt+0xf44c>
   21b70:	cmp	ip, #0
   21b74:	addeq	r4, r4, #1
   21b78:	ldrne	r2, [r0, ip, lsl #2]
   21b7c:	addeq	r3, r3, #1
   21b80:	addne	r4, r4, r2
   21b84:	subne	ip, ip, r2
   21b88:	b	21af4 <__assert_fail@plt+0xf408>
   21b8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b90:	add	fp, sp, #32
   21b94:	sub	sp, sp, #196	; 0xc4
   21b98:	str	r0, [fp, #-220]	; 0xffffff24
   21b9c:	mov	r0, r1
   21ba0:	mov	r5, r1
   21ba4:	str	r2, [fp, #-224]	; 0xffffff20
   21ba8:	bl	38dc0 <__assert_fail@plt+0x266d4>
   21bac:	mov	r7, #0
   21bb0:	str	r0, [fp, #-208]	; 0xffffff30
   21bb4:	ldr	r3, [fp, #-208]	; 0xffffff30
   21bb8:	mov	r6, r0
   21bbc:	lsl	r0, r3, #2
   21bc0:	adds	r0, r0, r6
   21bc4:	lsr	r1, r3, #30
   21bc8:	adc	r1, r1, r7
   21bcc:	adds	r0, r0, r0
   21bd0:	adc	r1, r1, r1
   21bd4:	adds	r6, r6, r0
   21bd8:	adc	r7, r7, r1
   21bdc:	lsl	r0, r6, #2
   21be0:	lsl	r1, r7, #2
   21be4:	orr	r1, r1, r6, lsr #30
   21be8:	adds	r1, r1, #0
   21bec:	movne	r1, #1
   21bf0:	cmp	r0, #0
   21bf4:	blt	21c00 <__assert_fail@plt+0xf514>
   21bf8:	cmp	r1, #0
   21bfc:	beq	21c14 <__assert_fail@plt+0xf528>
   21c00:	mov	r3, #0
   21c04:	str	r3, [fp, #-216]	; 0xffffff28
   21c08:	ldr	r0, [fp, #-216]	; 0xffffff28
   21c0c:	sub	sp, fp, #32
   21c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c14:	ldr	r3, [fp, #-208]	; 0xffffff30
   21c18:	mov	r0, #44	; 0x2c
   21c1c:	mul	r0, r0, r3
   21c20:	cmp	r0, #4016	; 0xfb0
   21c24:	bhi	21d04 <__assert_fail@plt+0xf618>
   21c28:	add	r0, r0, #29
   21c2c:	bic	r0, r0, #7
   21c30:	sub	sp, sp, r0
   21c34:	add	r4, sp, #15
   21c38:	bic	r4, r4, #15
   21c3c:	cmp	r4, #0
   21c40:	beq	21c00 <__assert_fail@plt+0xf514>
   21c44:	ldr	r2, [fp, #-208]	; 0xffffff30
   21c48:	mov	r3, #40	; 0x28
   21c4c:	sub	r7, fp, #36	; 0x24
   21c50:	mla	r3, r3, r2, r4
   21c54:	ldr	sl, [pc, #1876]	; 223b0 <__assert_fail@plt+0xfcc4>
   21c58:	str	r3, [fp, #-212]	; 0xffffff2c
   21c5c:	mov	r3, #0
   21c60:	strb	r3, [r7, #-168]!	; 0xffffff58
   21c64:	str	r5, [fp, #-188]	; 0xffffff44
   21c68:	add	r6, r7, #4
   21c6c:	add	r5, r4, #16
   21c70:	add	r9, r7, #28
   21c74:	str	r3, [fp, #-200]	; 0xffffff38
   21c78:	str	r3, [r6, #4]
   21c7c:	strb	r3, [fp, #-192]	; 0xffffff40
   21c80:	ldrb	r3, [fp, #-204]	; 0xffffff34
   21c84:	ldr	r8, [fp, #-188]	; 0xffffff44
   21c88:	cmp	r3, #0
   21c8c:	bne	21d3c <__assert_fail@plt+0xf650>
   21c90:	ldrb	r3, [r8]
   21c94:	lsr	r2, r3, #5
   21c98:	and	r3, r3, #31
   21c9c:	ldr	r2, [sl, r2, lsl #2]
   21ca0:	lsr	r3, r2, r3
   21ca4:	tst	r3, #1
   21ca8:	beq	21d10 <__assert_fail@plt+0xf624>
   21cac:	mov	r3, #1
   21cb0:	str	r3, [fp, #-184]	; 0xffffff48
   21cb4:	ldrb	r2, [r8]
   21cb8:	str	r2, [fp, #-176]	; 0xffffff50
   21cbc:	strb	r3, [fp, #-180]	; 0xffffff4c
   21cc0:	ldrb	r3, [fp, #-180]	; 0xffffff4c
   21cc4:	mov	r2, #1
   21cc8:	strb	r2, [fp, #-192]	; 0xffffff40
   21ccc:	cmp	r3, #0
   21cd0:	str	r3, [fp, #-216]	; 0xffffff28
   21cd4:	beq	22330 <__assert_fail@plt+0xfc44>
   21cd8:	ldr	r3, [fp, #-176]	; 0xffffff50
   21cdc:	cmp	r3, #0
   21ce0:	bne	22330 <__assert_fail@plt+0xfc44>
   21ce4:	ldr	r1, [fp, #-212]	; 0xffffff2c
   21ce8:	mov	r7, r4
   21cec:	mov	r5, r3
   21cf0:	str	r2, [r1, #4]
   21cf4:	mov	r6, #2
   21cf8:	mov	r8, #40	; 0x28
   21cfc:	mov	r9, r3
   21d00:	b	21e58 <__assert_fail@plt+0xf76c>
   21d04:	bl	38cb0 <__assert_fail@plt+0x265c4>
   21d08:	mov	r4, r0
   21d0c:	b	21c3c <__assert_fail@plt+0xf550>
   21d10:	mov	r0, r6
   21d14:	bl	12134 <mbsinit@plt>
   21d18:	cmp	r0, #0
   21d1c:	bne	21d34 <__assert_fail@plt+0xf648>
   21d20:	ldr	r3, [pc, #1676]	; 223b4 <__assert_fail@plt+0xfcc8>
   21d24:	ldr	r1, [pc, #1676]	; 223b8 <__assert_fail@plt+0xfccc>
   21d28:	ldr	r0, [pc, #1676]	; 223bc <__assert_fail@plt+0xfcd0>
   21d2c:	mov	r2, #143	; 0x8f
   21d30:	bl	126ec <__assert_fail@plt>
   21d34:	mov	r3, #1
   21d38:	strb	r3, [fp, #-204]	; 0xffffff34
   21d3c:	bl	12260 <__ctype_get_mb_cur_max@plt>
   21d40:	mov	r1, r0
   21d44:	mov	r0, r8
   21d48:	bl	28854 <__assert_fail@plt+0x16168>
   21d4c:	mov	r3, r6
   21d50:	mov	r1, r8
   21d54:	mov	r2, r0
   21d58:	mov	r0, r9
   21d5c:	bl	2bf50 <__assert_fail@plt+0x19864>
   21d60:	cmn	r0, #1
   21d64:	str	r0, [fp, #-184]	; 0xffffff48
   21d68:	bne	21d7c <__assert_fail@plt+0xf690>
   21d6c:	mov	r3, #1
   21d70:	str	r3, [fp, #-184]	; 0xffffff48
   21d74:	mov	r3, #0
   21d78:	b	21cbc <__assert_fail@plt+0xf5d0>
   21d7c:	cmn	r0, #2
   21d80:	bne	21d94 <__assert_fail@plt+0xf6a8>
   21d84:	ldr	r0, [fp, #-188]	; 0xffffff44
   21d88:	bl	123bc <strlen@plt>
   21d8c:	str	r0, [fp, #-184]	; 0xffffff48
   21d90:	b	21d74 <__assert_fail@plt+0xf688>
   21d94:	cmp	r0, #0
   21d98:	bne	21de8 <__assert_fail@plt+0xf6fc>
   21d9c:	mov	r3, #1
   21da0:	str	r3, [fp, #-184]	; 0xffffff48
   21da4:	ldr	r3, [fp, #-188]	; 0xffffff44
   21da8:	ldrb	r3, [r3]
   21dac:	cmp	r3, #0
   21db0:	beq	21dc8 <__assert_fail@plt+0xf6dc>
   21db4:	ldr	r3, [pc, #1528]	; 223b4 <__assert_fail@plt+0xfcc8>
   21db8:	mov	r2, #171	; 0xab
   21dbc:	ldr	r1, [pc, #1524]	; 223b8 <__assert_fail@plt+0xfccc>
   21dc0:	ldr	r0, [pc, #1528]	; 223c0 <__assert_fail@plt+0xfcd4>
   21dc4:	b	21d30 <__assert_fail@plt+0xf644>
   21dc8:	ldr	r3, [fp, #-176]	; 0xffffff50
   21dcc:	cmp	r3, #0
   21dd0:	beq	21de8 <__assert_fail@plt+0xf6fc>
   21dd4:	ldr	r3, [pc, #1496]	; 223b4 <__assert_fail@plt+0xfcc8>
   21dd8:	mov	r2, #172	; 0xac
   21ddc:	ldr	r1, [pc, #1492]	; 223b8 <__assert_fail@plt+0xfccc>
   21de0:	ldr	r0, [pc, #1500]	; 223c4 <__assert_fail@plt+0xfcd8>
   21de4:	b	21d30 <__assert_fail@plt+0xf644>
   21de8:	mov	r3, #1
   21dec:	mov	r0, r6
   21df0:	strb	r3, [fp, #-180]	; 0xffffff4c
   21df4:	bl	12134 <mbsinit@plt>
   21df8:	cmp	r0, #0
   21dfc:	movne	r3, #0
   21e00:	strbne	r3, [fp, #-204]	; 0xffffff34
   21e04:	b	21cc0 <__assert_fail@plt+0xf5d4>
   21e08:	ldrb	sl, [r7, #48]	; 0x30
   21e0c:	cmp	sl, #0
   21e10:	beq	21f54 <__assert_fail@plt+0xf868>
   21e14:	mla	r3, r8, r5, r4
   21e18:	ldrb	r2, [r3, #8]
   21e1c:	cmp	r2, #0
   21e20:	beq	21f54 <__assert_fail@plt+0xf868>
   21e24:	ldr	r0, [r7, #52]	; 0x34
   21e28:	ldr	r3, [r3, #12]
   21e2c:	sub	r0, r0, r3
   21e30:	clz	r0, r0
   21e34:	lsr	r0, r0, #5
   21e38:	cmp	r0, #0
   21e3c:	beq	21f8c <__assert_fail@plt+0xf8a0>
   21e40:	ldr	r2, [fp, #-212]	; 0xffffff2c
   21e44:	add	r5, r5, #1
   21e48:	sub	r3, r6, r5
   21e4c:	str	r3, [r2, r6, lsl #2]
   21e50:	add	r6, r6, #1
   21e54:	add	r7, r7, #40	; 0x28
   21e58:	ldr	r3, [fp, #-208]	; 0xffffff30
   21e5c:	cmp	r6, r3
   21e60:	bcc	21e08 <__assert_fail@plt+0xf71c>
   21e64:	ldr	r3, [fp, #-224]	; 0xffffff20
   21e68:	mov	r6, #0
   21e6c:	sub	r7, fp, #36	; 0x24
   21e70:	str	r6, [r3]
   21e74:	ldr	r3, [fp, #-220]	; 0xffffff24
   21e78:	sub	r8, fp, #36	; 0x24
   21e7c:	str	r3, [fp, #-132]	; 0xffffff7c
   21e80:	mov	r5, #1
   21e84:	ldr	r3, [fp, #-220]	; 0xffffff24
   21e88:	strb	r6, [r7, #-112]!	; 0xffffff90
   21e8c:	str	r6, [fp, #-144]	; 0xffffff70
   21e90:	strb	r6, [r8, #-56]!	; 0xffffffc8
   21e94:	str	r6, [r7, #8]
   21e98:	str	r6, [fp, #-88]	; 0xffffffa8
   21e9c:	strb	r6, [fp, #-136]	; 0xffffff78
   21ea0:	str	r6, [r8, #8]
   21ea4:	str	r3, [fp, #-76]	; 0xffffffb4
   21ea8:	strb	r6, [fp, #-80]	; 0xffffffb0
   21eac:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   21eb0:	cmp	r3, #0
   21eb4:	bne	21efc <__assert_fail@plt+0xf810>
   21eb8:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   21ebc:	ldr	r9, [fp, #-76]	; 0xffffffb4
   21ec0:	cmp	r3, #0
   21ec4:	bne	22298 <__assert_fail@plt+0xfbac>
   21ec8:	ldrb	r3, [r9]
   21ecc:	ldr	r1, [pc, #1244]	; 223b0 <__assert_fail@plt+0xfcc4>
   21ed0:	lsr	r2, r3, #5
   21ed4:	and	r3, r3, #31
   21ed8:	ldr	r2, [r1, r2, lsl #2]
   21edc:	lsr	r3, r2, r3
   21ee0:	tst	r3, #1
   21ee4:	beq	22284 <__assert_fail@plt+0xfb98>
   21ee8:	str	r5, [fp, #-72]	; 0xffffffb8
   21eec:	ldrb	r3, [r9]
   21ef0:	strb	r5, [fp, #-68]	; 0xffffffbc
   21ef4:	str	r3, [fp, #-64]	; 0xffffffc0
   21ef8:	strb	r5, [fp, #-80]	; 0xffffffb0
   21efc:	ldrb	r0, [fp, #-68]	; 0xffffffbc
   21f00:	cmp	r0, #0
   21f04:	beq	21f14 <__assert_fail@plt+0xf828>
   21f08:	ldr	r3, [fp, #-64]	; 0xffffffc0
   21f0c:	cmp	r3, #0
   21f10:	beq	21ff8 <__assert_fail@plt+0xf90c>
   21f14:	mov	r3, #40	; 0x28
   21f18:	mla	r3, r3, r6, r4
   21f1c:	ldrb	r2, [r3, #8]
   21f20:	ands	r0, r0, r2
   21f24:	bne	21fa8 <__assert_fail@plt+0xf8bc>
   21f28:	ldr	r2, [r3, #4]
   21f2c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   21f30:	cmp	r2, r1
   21f34:	bne	21f4c <__assert_fail@plt+0xf860>
   21f38:	ldr	r1, [fp, #-76]	; 0xffffffb4
   21f3c:	ldr	r0, [r3]
   21f40:	bl	12158 <memcmp@plt>
   21f44:	clz	r0, r0
   21f48:	lsr	r0, r0, #5
   21f4c:	and	r0, r0, #1
   21f50:	b	21fbc <__assert_fail@plt+0xf8d0>
   21f54:	mul	r3, r8, r5
   21f58:	ldr	r2, [r7, #44]	; 0x2c
   21f5c:	add	r1, r4, r3
   21f60:	ldr	r1, [r1, #4]
   21f64:	cmp	r2, r1
   21f68:	movne	r0, r9
   21f6c:	bne	21f84 <__assert_fail@plt+0xf898>
   21f70:	ldr	r1, [r4, r3]
   21f74:	ldr	r0, [r7, #40]	; 0x28
   21f78:	bl	12158 <memcmp@plt>
   21f7c:	clz	r0, r0
   21f80:	lsr	r0, r0, #5
   21f84:	and	r0, r0, #1
   21f88:	b	21e38 <__assert_fail@plt+0xf74c>
   21f8c:	cmp	r5, #0
   21f90:	ldr	r3, [fp, #-212]	; 0xffffff2c
   21f94:	streq	r6, [r3, r6, lsl #2]
   21f98:	beq	21e50 <__assert_fail@plt+0xf764>
   21f9c:	ldr	r3, [r3, r5, lsl #2]
   21fa0:	sub	r5, r5, r3
   21fa4:	b	21e0c <__assert_fail@plt+0xf720>
   21fa8:	ldr	r0, [r3, #12]
   21fac:	ldr	r3, [fp, #-64]	; 0xffffffc0
   21fb0:	sub	r0, r0, r3
   21fb4:	clz	r0, r0
   21fb8:	lsr	r0, r0, #5
   21fbc:	cmp	r0, #0
   21fc0:	beq	22004 <__assert_fail@plt+0xf918>
   21fc4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   21fc8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   21fcc:	add	r6, r6, #1
   21fd0:	add	r3, r3, r2
   21fd4:	str	r3, [fp, #-76]	; 0xffffffb4
   21fd8:	mov	r3, #0
   21fdc:	strb	r3, [fp, #-80]	; 0xffffffb0
   21fe0:	ldr	r3, [fp, #-208]	; 0xffffff30
   21fe4:	cmp	r3, r6
   21fe8:	bne	21eac <__assert_fail@plt+0xf7c0>
   21fec:	ldr	r2, [fp, #-224]	; 0xffffff20
   21ff0:	ldr	r3, [fp, #-132]	; 0xffffff7c
   21ff4:	str	r3, [r2]
   21ff8:	mov	r0, r4
   21ffc:	bl	38d00 <__assert_fail@plt+0x26614>
   22000:	b	21c08 <__assert_fail@plt+0xf51c>
   22004:	cmp	r6, #0
   22008:	beq	22140 <__assert_fail@plt+0xfa54>
   2200c:	ldr	r3, [fp, #-212]	; 0xffffff2c
   22010:	ldr	sl, [r3, r6, lsl #2]
   22014:	add	r3, r7, #4
   22018:	sub	r6, r6, sl
   2201c:	str	r3, [fp, #-220]	; 0xffffff24
   22020:	cmp	sl, #0
   22024:	beq	21eac <__assert_fail@plt+0xf7c0>
   22028:	ldrb	r3, [fp, #-136]	; 0xffffff78
   2202c:	cmp	r3, #0
   22030:	bne	22078 <__assert_fail@plt+0xf98c>
   22034:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   22038:	ldr	r9, [fp, #-132]	; 0xffffff7c
   2203c:	cmp	r3, #0
   22040:	bne	220a8 <__assert_fail@plt+0xf9bc>
   22044:	ldrb	r3, [r9]
   22048:	ldr	r1, [pc, #864]	; 223b0 <__assert_fail@plt+0xfcc4>
   2204c:	lsr	r2, r3, #5
   22050:	and	r3, r3, #31
   22054:	ldr	r2, [r1, r2, lsl #2]
   22058:	lsr	r3, r2, r3
   2205c:	tst	r3, #1
   22060:	beq	22094 <__assert_fail@plt+0xf9a8>
   22064:	str	r5, [fp, #-128]	; 0xffffff80
   22068:	ldrb	r3, [r9]
   2206c:	strb	r5, [fp, #-124]	; 0xffffff84
   22070:	str	r3, [fp, #-120]	; 0xffffff88
   22074:	strb	r5, [fp, #-136]	; 0xffffff78
   22078:	ldrb	r3, [fp, #-124]	; 0xffffff84
   2207c:	cmp	r3, #0
   22080:	beq	22390 <__assert_fail@plt+0xfca4>
   22084:	ldr	r3, [fp, #-120]	; 0xffffff88
   22088:	cmp	r3, #0
   2208c:	bne	22390 <__assert_fail@plt+0xfca4>
   22090:	bl	12698 <abort@plt>
   22094:	ldr	r0, [fp, #-220]	; 0xffffff24
   22098:	bl	12134 <mbsinit@plt>
   2209c:	cmp	r0, #0
   220a0:	beq	21d20 <__assert_fail@plt+0xf634>
   220a4:	strb	r5, [fp, #-148]	; 0xffffff6c
   220a8:	bl	12260 <__ctype_get_mb_cur_max@plt>
   220ac:	mov	r1, r0
   220b0:	mov	r0, r9
   220b4:	bl	28854 <__assert_fail@plt+0x16168>
   220b8:	ldr	r3, [fp, #-220]	; 0xffffff24
   220bc:	mov	r1, r9
   220c0:	mov	r2, r0
   220c4:	add	r0, r7, #28
   220c8:	bl	2bf50 <__assert_fail@plt+0x19864>
   220cc:	cmn	r0, #1
   220d0:	str	r0, [fp, #-128]	; 0xffffff80
   220d4:	streq	r5, [fp, #-128]	; 0xffffff80
   220d8:	beq	220f0 <__assert_fail@plt+0xfa04>
   220dc:	cmn	r0, #2
   220e0:	bne	220fc <__assert_fail@plt+0xfa10>
   220e4:	ldr	r0, [fp, #-132]	; 0xffffff7c
   220e8:	bl	123bc <strlen@plt>
   220ec:	str	r0, [fp, #-128]	; 0xffffff80
   220f0:	mov	r3, #0
   220f4:	strb	r3, [fp, #-124]	; 0xffffff84
   220f8:	b	22074 <__assert_fail@plt+0xf988>
   220fc:	cmp	r0, #0
   22100:	bne	22124 <__assert_fail@plt+0xfa38>
   22104:	ldr	r3, [fp, #-132]	; 0xffffff7c
   22108:	str	r5, [fp, #-128]	; 0xffffff80
   2210c:	ldrb	r3, [r3]
   22110:	cmp	r3, #0
   22114:	bne	21db4 <__assert_fail@plt+0xf6c8>
   22118:	ldr	r3, [fp, #-120]	; 0xffffff88
   2211c:	cmp	r3, #0
   22120:	bne	21dd4 <__assert_fail@plt+0xf6e8>
   22124:	ldr	r0, [fp, #-220]	; 0xffffff24
   22128:	strb	r5, [fp, #-124]	; 0xffffff84
   2212c:	bl	12134 <mbsinit@plt>
   22130:	cmp	r0, #0
   22134:	movne	r3, #0
   22138:	strbne	r3, [fp, #-148]	; 0xffffff6c
   2213c:	b	22074 <__assert_fail@plt+0xf988>
   22140:	ldrb	r3, [fp, #-136]	; 0xffffff78
   22144:	cmp	r3, #0
   22148:	bne	22190 <__assert_fail@plt+0xfaa4>
   2214c:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   22150:	ldr	r9, [fp, #-132]	; 0xffffff7c
   22154:	cmp	r3, #0
   22158:	bne	221ec <__assert_fail@plt+0xfb00>
   2215c:	ldrb	r3, [r9]
   22160:	ldr	r1, [pc, #584]	; 223b0 <__assert_fail@plt+0xfcc4>
   22164:	lsr	r2, r3, #5
   22168:	and	r3, r3, #31
   2216c:	ldr	r2, [r1, r2, lsl #2]
   22170:	lsr	r3, r2, r3
   22174:	tst	r3, #1
   22178:	beq	221d8 <__assert_fail@plt+0xfaec>
   2217c:	str	r5, [fp, #-128]	; 0xffffff80
   22180:	ldrb	r3, [r9]
   22184:	strb	r5, [fp, #-124]	; 0xffffff84
   22188:	str	r3, [fp, #-120]	; 0xffffff88
   2218c:	strb	r5, [fp, #-136]	; 0xffffff78
   22190:	ldrb	r3, [fp, #-124]	; 0xffffff84
   22194:	cmp	r3, #0
   22198:	beq	221a8 <__assert_fail@plt+0xfabc>
   2219c:	ldr	r3, [fp, #-120]	; 0xffffff88
   221a0:	cmp	r3, #0
   221a4:	beq	22090 <__assert_fail@plt+0xf9a4>
   221a8:	ldr	r2, [fp, #-128]	; 0xffffff80
   221ac:	ldr	r3, [fp, #-132]	; 0xffffff7c
   221b0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   221b4:	add	r3, r3, r2
   221b8:	str	r3, [fp, #-132]	; 0xffffff7c
   221bc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   221c0:	mov	r2, #0
   221c4:	add	r3, r3, r1
   221c8:	strb	r2, [fp, #-136]	; 0xffffff78
   221cc:	str	r3, [fp, #-76]	; 0xffffffb4
   221d0:	strb	r2, [fp, #-80]	; 0xffffffb0
   221d4:	b	21eac <__assert_fail@plt+0xf7c0>
   221d8:	add	r0, r7, #4
   221dc:	bl	12134 <mbsinit@plt>
   221e0:	cmp	r0, #0
   221e4:	beq	21d20 <__assert_fail@plt+0xf634>
   221e8:	strb	r5, [fp, #-148]	; 0xffffff6c
   221ec:	bl	12260 <__ctype_get_mb_cur_max@plt>
   221f0:	mov	r1, r0
   221f4:	mov	r0, r9
   221f8:	bl	28854 <__assert_fail@plt+0x16168>
   221fc:	add	r3, r7, #4
   22200:	mov	r1, r9
   22204:	mov	r2, r0
   22208:	add	r0, r7, #28
   2220c:	bl	2bf50 <__assert_fail@plt+0x19864>
   22210:	cmn	r0, #1
   22214:	str	r0, [fp, #-128]	; 0xffffff80
   22218:	streq	r5, [fp, #-128]	; 0xffffff80
   2221c:	beq	22234 <__assert_fail@plt+0xfb48>
   22220:	cmn	r0, #2
   22224:	bne	22240 <__assert_fail@plt+0xfb54>
   22228:	ldr	r0, [fp, #-132]	; 0xffffff7c
   2222c:	bl	123bc <strlen@plt>
   22230:	str	r0, [fp, #-128]	; 0xffffff80
   22234:	mov	r3, #0
   22238:	strb	r3, [fp, #-124]	; 0xffffff84
   2223c:	b	2218c <__assert_fail@plt+0xfaa0>
   22240:	cmp	r0, #0
   22244:	bne	22268 <__assert_fail@plt+0xfb7c>
   22248:	ldr	r3, [fp, #-132]	; 0xffffff7c
   2224c:	str	r5, [fp, #-128]	; 0xffffff80
   22250:	ldrb	r3, [r3]
   22254:	cmp	r3, #0
   22258:	bne	21db4 <__assert_fail@plt+0xf6c8>
   2225c:	ldr	r3, [fp, #-120]	; 0xffffff88
   22260:	cmp	r3, #0
   22264:	bne	21dd4 <__assert_fail@plt+0xf6e8>
   22268:	add	r0, r7, #4
   2226c:	strb	r5, [fp, #-124]	; 0xffffff84
   22270:	bl	12134 <mbsinit@plt>
   22274:	cmp	r0, #0
   22278:	movne	r3, #0
   2227c:	strbne	r3, [fp, #-148]	; 0xffffff6c
   22280:	b	2218c <__assert_fail@plt+0xfaa0>
   22284:	add	r0, r8, #4
   22288:	bl	12134 <mbsinit@plt>
   2228c:	cmp	r0, #0
   22290:	beq	21d20 <__assert_fail@plt+0xf634>
   22294:	strb	r5, [fp, #-92]	; 0xffffffa4
   22298:	bl	12260 <__ctype_get_mb_cur_max@plt>
   2229c:	mov	r1, r0
   222a0:	mov	r0, r9
   222a4:	bl	28854 <__assert_fail@plt+0x16168>
   222a8:	add	r3, r8, #4
   222ac:	mov	r1, r9
   222b0:	mov	r2, r0
   222b4:	add	r0, r8, #28
   222b8:	bl	2bf50 <__assert_fail@plt+0x19864>
   222bc:	cmn	r0, #1
   222c0:	str	r0, [fp, #-72]	; 0xffffffb8
   222c4:	streq	r5, [fp, #-72]	; 0xffffffb8
   222c8:	beq	222e0 <__assert_fail@plt+0xfbf4>
   222cc:	cmn	r0, #2
   222d0:	bne	222ec <__assert_fail@plt+0xfc00>
   222d4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   222d8:	bl	123bc <strlen@plt>
   222dc:	str	r0, [fp, #-72]	; 0xffffffb8
   222e0:	mov	r3, #0
   222e4:	strb	r3, [fp, #-68]	; 0xffffffbc
   222e8:	b	21ef8 <__assert_fail@plt+0xf80c>
   222ec:	cmp	r0, #0
   222f0:	bne	22314 <__assert_fail@plt+0xfc28>
   222f4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   222f8:	str	r5, [fp, #-72]	; 0xffffffb8
   222fc:	ldrb	r3, [r3]
   22300:	cmp	r3, #0
   22304:	bne	21db4 <__assert_fail@plt+0xf6c8>
   22308:	ldr	r3, [fp, #-64]	; 0xffffffc0
   2230c:	cmp	r3, #0
   22310:	bne	21dd4 <__assert_fail@plt+0xf6e8>
   22314:	add	r0, r8, #4
   22318:	strb	r5, [fp, #-68]	; 0xffffffbc
   2231c:	bl	12134 <mbsinit@plt>
   22320:	cmp	r0, #0
   22324:	movne	r3, #0
   22328:	strbne	r3, [fp, #-92]	; 0xffffffa4
   2232c:	b	21ef8 <__assert_fail@plt+0xf80c>
   22330:	ldr	r8, [fp, #-188]	; 0xffffff44
   22334:	add	r3, r7, #32
   22338:	cmp	r8, r3
   2233c:	strne	r8, [r5, #-16]
   22340:	bne	22358 <__assert_fail@plt+0xfc6c>
   22344:	ldr	r2, [fp, #-184]	; 0xffffff48
   22348:	mov	r1, r8
   2234c:	mov	r0, r5
   22350:	bl	120f8 <memcpy@plt>
   22354:	str	r5, [r5, #-16]
   22358:	ldrb	r2, [fp, #-216]	; 0xffffff28
   2235c:	ldr	r3, [fp, #-184]	; 0xffffff48
   22360:	add	r5, r5, #40	; 0x28
   22364:	strb	r2, [r5, #-48]	; 0xffffffd0
   22368:	ldr	r2, [fp, #-216]	; 0xffffff28
   2236c:	str	r3, [r5, #-52]	; 0xffffffcc
   22370:	cmp	r2, #0
   22374:	add	r8, r8, r3
   22378:	ldrne	r2, [fp, #-176]	; 0xffffff50
   2237c:	mov	r3, #0
   22380:	strne	r2, [r5, #-44]	; 0xffffffd4
   22384:	str	r8, [fp, #-188]	; 0xffffff44
   22388:	strb	r3, [fp, #-192]	; 0xffffff40
   2238c:	b	21c80 <__assert_fail@plt+0xf594>
   22390:	ldr	r3, [fp, #-132]	; 0xffffff7c
   22394:	ldr	r2, [fp, #-128]	; 0xffffff80
   22398:	sub	sl, sl, #1
   2239c:	add	r3, r3, r2
   223a0:	str	r3, [fp, #-132]	; 0xffffff7c
   223a4:	mov	r3, #0
   223a8:	strb	r3, [fp, #-136]	; 0xffffff78
   223ac:	b	22020 <__assert_fail@plt+0xf934>
   223b0:	andeq	pc, r3, ip, lsl r5	; <UNPREDICTABLE>
   223b4:	andeq	sp, r3, sl, asr #29
   223b8:	ldrdeq	sp, [r3], -sp	; <UNPREDICTABLE>
   223bc:	andeq	sp, r3, r7, ror #29
   223c0:	strdeq	sp, [r3], -lr
   223c4:	andeq	sp, r3, r5, lsl pc
   223c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   223cc:	sub	sp, sp, #308	; 0x134
   223d0:	mov	r6, r1
   223d4:	mov	r4, r0
   223d8:	bl	12260 <__ctype_get_mb_cur_max@plt>
   223dc:	ldrb	r7, [r6]
   223e0:	cmp	r0, #1
   223e4:	bls	22cb4 <__assert_fail@plt+0x105c8>
   223e8:	add	r8, sp, #304	; 0x130
   223ec:	mov	r3, #0
   223f0:	ldr	r2, [pc, #2976]	; 22f98 <__assert_fail@plt+0x108ac>
   223f4:	strb	r3, [r8, #-280]!	; 0xfffffee8
   223f8:	str	r3, [sp, #28]
   223fc:	str	r3, [sp, #32]
   22400:	strb	r3, [sp, #36]	; 0x24
   22404:	lsr	r3, r7, #5
   22408:	and	r5, r7, #31
   2240c:	ldr	r3, [r2, r3, lsl #2]
   22410:	str	r6, [sp, #40]	; 0x28
   22414:	str	r2, [sp]
   22418:	lsr	r5, r3, r5
   2241c:	ands	r5, r5, #1
   22420:	beq	2245c <__assert_fail@plt+0xfd70>
   22424:	mov	r3, #1
   22428:	str	r3, [sp, #44]	; 0x2c
   2242c:	str	r7, [sp, #52]	; 0x34
   22430:	strb	r3, [sp, #48]	; 0x30
   22434:	mov	r3, #1
   22438:	strb	r3, [sp, #36]	; 0x24
   2243c:	ldrb	r3, [sp, #48]	; 0x30
   22440:	cmp	r3, #0
   22444:	beq	22d90 <__assert_fail@plt+0x106a4>
   22448:	ldr	r3, [sp, #52]	; 0x34
   2244c:	cmp	r3, #0
   22450:	bne	22d90 <__assert_fail@plt+0x106a4>
   22454:	mov	r0, r4
   22458:	b	22cac <__assert_fail@plt+0x105c0>
   2245c:	add	r0, sp, #28
   22460:	bl	12134 <mbsinit@plt>
   22464:	cmp	r0, #0
   22468:	bne	22480 <__assert_fail@plt+0xfd94>
   2246c:	ldr	r3, [pc, #2856]	; 22f9c <__assert_fail@plt+0x108b0>
   22470:	ldr	r1, [pc, #2856]	; 22fa0 <__assert_fail@plt+0x108b4>
   22474:	ldr	r0, [pc, #2856]	; 22fa4 <__assert_fail@plt+0x108b8>
   22478:	mov	r2, #143	; 0x8f
   2247c:	bl	126ec <__assert_fail@plt>
   22480:	mov	r7, #1
   22484:	strb	r7, [sp, #24]
   22488:	bl	12260 <__ctype_get_mb_cur_max@plt>
   2248c:	mov	r1, r0
   22490:	mov	r0, r6
   22494:	bl	28854 <__assert_fail@plt+0x16168>
   22498:	add	r3, sp, #28
   2249c:	mov	r1, r6
   224a0:	mov	r2, r0
   224a4:	add	r0, r8, #28
   224a8:	bl	2bf50 <__assert_fail@plt+0x19864>
   224ac:	cmn	r0, #1
   224b0:	str	r0, [sp, #44]	; 0x2c
   224b4:	streq	r7, [sp, #44]	; 0x2c
   224b8:	beq	224d0 <__assert_fail@plt+0xfde4>
   224bc:	cmn	r0, #2
   224c0:	bne	224d8 <__assert_fail@plt+0xfdec>
   224c4:	ldr	r0, [sp, #40]	; 0x28
   224c8:	bl	123bc <strlen@plt>
   224cc:	str	r0, [sp, #44]	; 0x2c
   224d0:	strb	r5, [sp, #48]	; 0x30
   224d4:	b	22434 <__assert_fail@plt+0xfd48>
   224d8:	cmp	r0, #0
   224dc:	bne	22528 <__assert_fail@plt+0xfe3c>
   224e0:	ldr	r3, [sp, #40]	; 0x28
   224e4:	str	r7, [sp, #44]	; 0x2c
   224e8:	ldrb	r3, [r3]
   224ec:	cmp	r3, #0
   224f0:	beq	22508 <__assert_fail@plt+0xfe1c>
   224f4:	ldr	r3, [pc, #2720]	; 22f9c <__assert_fail@plt+0x108b0>
   224f8:	mov	r2, #171	; 0xab
   224fc:	ldr	r1, [pc, #2716]	; 22fa0 <__assert_fail@plt+0x108b4>
   22500:	ldr	r0, [pc, #2720]	; 22fa8 <__assert_fail@plt+0x108bc>
   22504:	b	2247c <__assert_fail@plt+0xfd90>
   22508:	ldr	r3, [sp, #52]	; 0x34
   2250c:	cmp	r3, #0
   22510:	beq	22528 <__assert_fail@plt+0xfe3c>
   22514:	ldr	r3, [pc, #2688]	; 22f9c <__assert_fail@plt+0x108b0>
   22518:	mov	r2, #172	; 0xac
   2251c:	ldr	r1, [pc, #2684]	; 22fa0 <__assert_fail@plt+0x108b4>
   22520:	ldr	r0, [pc, #2692]	; 22fac <__assert_fail@plt+0x108c0>
   22524:	b	2247c <__assert_fail@plt+0xfd90>
   22528:	mov	r3, #1
   2252c:	add	r0, sp, #28
   22530:	strb	r3, [sp, #48]	; 0x30
   22534:	bl	12134 <mbsinit@plt>
   22538:	cmp	r0, #0
   2253c:	movne	r3, #0
   22540:	strbne	r3, [sp, #24]
   22544:	b	22434 <__assert_fail@plt+0xfd48>
   22548:	add	r0, r9, #4
   2254c:	bl	12134 <mbsinit@plt>
   22550:	cmp	r0, #0
   22554:	beq	2246c <__assert_fail@plt+0xfd80>
   22558:	mov	r3, #1
   2255c:	strb	r3, [sp, #136]	; 0x88
   22560:	bl	12260 <__ctype_get_mb_cur_max@plt>
   22564:	mov	r1, r0
   22568:	mov	r0, sl
   2256c:	bl	28854 <__assert_fail@plt+0x16168>
   22570:	add	r3, r9, #4
   22574:	mov	r1, sl
   22578:	mov	r2, r0
   2257c:	add	r0, r9, #28
   22580:	bl	2bf50 <__assert_fail@plt+0x19864>
   22584:	cmn	r0, #1
   22588:	str	r0, [sp, #156]	; 0x9c
   2258c:	bne	225a0 <__assert_fail@plt+0xfeb4>
   22590:	mov	r3, #1
   22594:	str	r3, [sp, #156]	; 0x9c
   22598:	mov	r3, #0
   2259c:	b	22c88 <__assert_fail@plt+0x1059c>
   225a0:	cmn	r0, #2
   225a4:	bne	225b8 <__assert_fail@plt+0xfecc>
   225a8:	ldr	r0, [sp, #152]	; 0x98
   225ac:	bl	123bc <strlen@plt>
   225b0:	str	r0, [sp, #156]	; 0x9c
   225b4:	b	22598 <__assert_fail@plt+0xfeac>
   225b8:	cmp	r0, #0
   225bc:	bne	225e4 <__assert_fail@plt+0xfef8>
   225c0:	mov	r3, #1
   225c4:	str	r3, [sp, #156]	; 0x9c
   225c8:	ldr	r3, [sp, #152]	; 0x98
   225cc:	ldrb	r3, [r3]
   225d0:	cmp	r3, #0
   225d4:	bne	224f4 <__assert_fail@plt+0xfe08>
   225d8:	ldr	r3, [sp, #164]	; 0xa4
   225dc:	cmp	r3, #0
   225e0:	bne	22514 <__assert_fail@plt+0xfe28>
   225e4:	mov	r3, #1
   225e8:	add	r0, r9, #4
   225ec:	strb	r3, [sp, #160]	; 0xa0
   225f0:	bl	12134 <mbsinit@plt>
   225f4:	cmp	r0, #0
   225f8:	movne	r3, #0
   225fc:	strbne	r3, [sp, #136]	; 0x88
   22600:	b	22c8c <__assert_fail@plt+0x105a0>
   22604:	ldrb	r3, [sp, #92]	; 0x5c
   22608:	cmp	r3, #0
   2260c:	bne	2265c <__assert_fail@plt+0xff70>
   22610:	ldrb	r3, [sp, #80]	; 0x50
   22614:	ldr	sl, [sp, #96]	; 0x60
   22618:	cmp	r3, #0
   2261c:	bne	226ac <__assert_fail@plt+0xffc0>
   22620:	ldrb	r3, [sl]
   22624:	ldr	r1, [sp]
   22628:	lsr	r2, r3, #5
   2262c:	and	r3, r3, #31
   22630:	ldr	r2, [r1, r2, lsl #2]
   22634:	lsr	r3, r2, r3
   22638:	tst	r3, #1
   2263c:	beq	22694 <__assert_fail@plt+0xffa8>
   22640:	mov	r3, #1
   22644:	str	r3, [sp, #100]	; 0x64
   22648:	ldrb	r2, [sl]
   2264c:	str	r2, [sp, #108]	; 0x6c
   22650:	strb	r3, [sp, #104]	; 0x68
   22654:	mov	r3, #1
   22658:	strb	r3, [sp, #92]	; 0x5c
   2265c:	ldrb	r3, [sp, #104]	; 0x68
   22660:	cmp	r3, #0
   22664:	beq	22674 <__assert_fail@plt+0xff88>
   22668:	ldr	r3, [sp, #108]	; 0x6c
   2266c:	cmp	r3, #0
   22670:	beq	22e18 <__assert_fail@plt+0x1072c>
   22674:	ldr	r3, [sp, #96]	; 0x60
   22678:	ldr	r2, [sp, #100]	; 0x64
   2267c:	sub	r5, r5, #1
   22680:	add	r3, r3, r2
   22684:	str	r3, [sp, #96]	; 0x60
   22688:	mov	r3, #0
   2268c:	strb	r3, [sp, #92]	; 0x5c
   22690:	b	22e10 <__assert_fail@plt+0x10724>
   22694:	add	r0, r7, #4
   22698:	bl	12134 <mbsinit@plt>
   2269c:	cmp	r0, #0
   226a0:	beq	2246c <__assert_fail@plt+0xfd80>
   226a4:	mov	r3, #1
   226a8:	strb	r3, [sp, #80]	; 0x50
   226ac:	bl	12260 <__ctype_get_mb_cur_max@plt>
   226b0:	mov	r1, r0
   226b4:	mov	r0, sl
   226b8:	bl	28854 <__assert_fail@plt+0x16168>
   226bc:	add	r3, r7, #4
   226c0:	mov	r1, sl
   226c4:	mov	r2, r0
   226c8:	add	r0, r7, #28
   226cc:	bl	2bf50 <__assert_fail@plt+0x19864>
   226d0:	cmn	r0, #1
   226d4:	str	r0, [sp, #100]	; 0x64
   226d8:	bne	226ec <__assert_fail@plt+0x10000>
   226dc:	mov	r3, #1
   226e0:	str	r3, [sp, #100]	; 0x64
   226e4:	mov	r3, #0
   226e8:	b	22650 <__assert_fail@plt+0xff64>
   226ec:	cmn	r0, #2
   226f0:	bne	22704 <__assert_fail@plt+0x10018>
   226f4:	ldr	r0, [sp, #96]	; 0x60
   226f8:	bl	123bc <strlen@plt>
   226fc:	str	r0, [sp, #100]	; 0x64
   22700:	b	226e4 <__assert_fail@plt+0xfff8>
   22704:	cmp	r0, #0
   22708:	bne	22730 <__assert_fail@plt+0x10044>
   2270c:	mov	r3, #1
   22710:	str	r3, [sp, #100]	; 0x64
   22714:	ldr	r3, [sp, #96]	; 0x60
   22718:	ldrb	r3, [r3]
   2271c:	cmp	r3, #0
   22720:	bne	224f4 <__assert_fail@plt+0xfe08>
   22724:	ldr	r3, [sp, #108]	; 0x6c
   22728:	cmp	r3, #0
   2272c:	bne	22514 <__assert_fail@plt+0xfe28>
   22730:	mov	r3, #1
   22734:	ldr	r0, [sp, #16]
   22738:	strb	r3, [sp, #104]	; 0x68
   2273c:	bl	12134 <mbsinit@plt>
   22740:	cmp	r0, #0
   22744:	movne	r3, #0
   22748:	strbne	r3, [sp, #80]	; 0x50
   2274c:	b	22654 <__assert_fail@plt+0xff68>
   22750:	add	r0, r7, #4
   22754:	bl	12134 <mbsinit@plt>
   22758:	cmp	r0, #0
   2275c:	beq	2246c <__assert_fail@plt+0xfd80>
   22760:	mov	r3, #1
   22764:	strb	r3, [sp, #80]	; 0x50
   22768:	bl	12260 <__ctype_get_mb_cur_max@plt>
   2276c:	mov	r1, r0
   22770:	mov	r0, r5
   22774:	bl	28854 <__assert_fail@plt+0x16168>
   22778:	add	r3, r7, #4
   2277c:	mov	r1, r5
   22780:	mov	r2, r0
   22784:	add	r0, r7, #28
   22788:	bl	2bf50 <__assert_fail@plt+0x19864>
   2278c:	cmn	r0, #1
   22790:	str	r0, [sp, #100]	; 0x64
   22794:	bne	227a8 <__assert_fail@plt+0x100bc>
   22798:	mov	r3, #1
   2279c:	str	r3, [sp, #100]	; 0x64
   227a0:	mov	r3, #0
   227a4:	b	22e64 <__assert_fail@plt+0x10778>
   227a8:	cmn	r0, #2
   227ac:	bne	227c0 <__assert_fail@plt+0x100d4>
   227b0:	ldr	r0, [sp, #96]	; 0x60
   227b4:	bl	123bc <strlen@plt>
   227b8:	str	r0, [sp, #100]	; 0x64
   227bc:	b	227a0 <__assert_fail@plt+0x100b4>
   227c0:	cmp	r0, #0
   227c4:	bne	227ec <__assert_fail@plt+0x10100>
   227c8:	mov	r3, #1
   227cc:	str	r3, [sp, #100]	; 0x64
   227d0:	ldr	r3, [sp, #96]	; 0x60
   227d4:	ldrb	r3, [r3]
   227d8:	cmp	r3, #0
   227dc:	bne	224f4 <__assert_fail@plt+0xfe08>
   227e0:	ldr	r3, [sp, #108]	; 0x6c
   227e4:	cmp	r3, #0
   227e8:	bne	22514 <__assert_fail@plt+0xfe28>
   227ec:	mov	r3, #1
   227f0:	ldr	r0, [sp, #16]
   227f4:	strb	r3, [sp, #104]	; 0x68
   227f8:	bl	12134 <mbsinit@plt>
   227fc:	cmp	r0, #0
   22800:	movne	r3, #0
   22804:	strbne	r3, [sp, #80]	; 0x50
   22808:	b	22e68 <__assert_fail@plt+0x1077c>
   2280c:	mov	r5, r8
   22810:	ldr	r3, [sp, #8]
   22814:	add	r8, r8, #1
   22818:	add	r3, r3, #1
   2281c:	str	r3, [sp, #8]
   22820:	ldrb	r3, [sp, #160]	; 0xa0
   22824:	cmp	r3, #0
   22828:	beq	22968 <__assert_fail@plt+0x1027c>
   2282c:	ldrb	r3, [sp, #48]	; 0x30
   22830:	cmp	r3, #0
   22834:	beq	22968 <__assert_fail@plt+0x1027c>
   22838:	ldr	r3, [sp, #52]	; 0x34
   2283c:	ldr	r0, [sp, #164]	; 0xa4
   22840:	sub	r0, r0, r3
   22844:	clz	r0, r0
   22848:	lsr	r0, r0, #5
   2284c:	cmp	r0, #0
   22850:	beq	22c2c <__assert_fail@plt+0x10540>
   22854:	mov	lr, r9
   22858:	add	ip, sp, #192	; 0xc0
   2285c:	ldm	lr!, {r0, r1, r2, r3}
   22860:	add	sl, sp, #304	; 0x130
   22864:	stmia	ip!, {r0, r1, r2, r3}
   22868:	ldm	lr!, {r0, r1, r2, r3}
   2286c:	stmia	ip!, {r0, r1, r2, r3}
   22870:	ldm	lr!, {r0, r1, r2, r3}
   22874:	stmia	ip!, {r0, r1, r2, r3}
   22878:	ldm	lr, {r0, r1}
   2287c:	ldr	r2, [sp, #212]	; 0xd4
   22880:	ldr	r3, [sp, #208]	; 0xd0
   22884:	stm	ip, {r0, r1}
   22888:	add	r3, r3, r2
   2288c:	mov	r2, #0
   22890:	str	r3, [sp, #208]	; 0xd0
   22894:	strb	r2, [sp, #204]	; 0xcc
   22898:	str	r6, [sp, #264]	; 0x108
   2289c:	ldrb	r1, [r6]
   228a0:	strb	r2, [sl, #-56]!	; 0xffffffc8
   228a4:	add	r3, sl, #4
   228a8:	ldr	ip, [sp]
   228ac:	str	r2, [sp, #252]	; 0xfc
   228b0:	str	r2, [r3, #4]
   228b4:	strb	r2, [sp, #260]	; 0x104
   228b8:	lsr	r2, r1, #5
   228bc:	and	r0, r1, #31
   228c0:	ldr	r2, [ip, r2, lsl #2]
   228c4:	lsr	r2, r2, r0
   228c8:	ands	r2, r2, #1
   228cc:	movne	r3, #1
   228d0:	str	r2, [sp, #12]
   228d4:	strne	r3, [sp, #268]	; 0x10c
   228d8:	strne	r1, [sp, #276]	; 0x114
   228dc:	bne	22934 <__assert_fail@plt+0x10248>
   228e0:	mov	r0, r3
   228e4:	str	r3, [sp, #20]
   228e8:	bl	12134 <mbsinit@plt>
   228ec:	cmp	r0, #0
   228f0:	beq	2246c <__assert_fail@plt+0xfd80>
   228f4:	mov	fp, #1
   228f8:	strb	fp, [sp, #248]	; 0xf8
   228fc:	bl	12260 <__ctype_get_mb_cur_max@plt>
   22900:	mov	r1, r0
   22904:	mov	r0, r6
   22908:	bl	28854 <__assert_fail@plt+0x16168>
   2290c:	ldr	r3, [sp, #20]
   22910:	mov	r1, r6
   22914:	mov	r2, r0
   22918:	add	r0, sl, #28
   2291c:	bl	2bf50 <__assert_fail@plt+0x19864>
   22920:	cmn	r0, #1
   22924:	str	r0, [sp, #268]	; 0x10c
   22928:	bne	22994 <__assert_fail@plt+0x102a8>
   2292c:	str	fp, [sp, #268]	; 0x10c
   22930:	ldrb	r3, [sp, #12]
   22934:	strb	r3, [sp, #272]	; 0x110
   22938:	mov	r3, #1
   2293c:	strb	r3, [sp, #260]	; 0x104
   22940:	ldrb	r3, [sp, #272]	; 0x110
   22944:	cmp	r3, #0
   22948:	beq	22eac <__assert_fail@plt+0x107c0>
   2294c:	ldr	r3, [sp, #276]	; 0x114
   22950:	cmp	r3, #0
   22954:	bne	22eac <__assert_fail@plt+0x107c0>
   22958:	bl	12698 <abort@plt>
   2295c:	mov	r5, r8
   22960:	str	r3, [sp, #4]
   22964:	b	22810 <__assert_fail@plt+0x10124>
   22968:	ldr	r2, [sp, #156]	; 0x9c
   2296c:	ldr	r3, [sp, #44]	; 0x2c
   22970:	cmp	r2, r3
   22974:	movne	r0, #0
   22978:	bne	2284c <__assert_fail@plt+0x10160>
   2297c:	ldr	r1, [sp, #40]	; 0x28
   22980:	ldr	r0, [sp, #152]	; 0x98
   22984:	bl	12158 <memcmp@plt>
   22988:	clz	r0, r0
   2298c:	lsr	r0, r0, #5
   22990:	b	2284c <__assert_fail@plt+0x10160>
   22994:	cmn	r0, #2
   22998:	bne	229ac <__assert_fail@plt+0x102c0>
   2299c:	ldr	r0, [sp, #264]	; 0x108
   229a0:	bl	123bc <strlen@plt>
   229a4:	str	r0, [sp, #268]	; 0x10c
   229a8:	b	22930 <__assert_fail@plt+0x10244>
   229ac:	cmp	r0, #0
   229b0:	bne	229d4 <__assert_fail@plt+0x102e8>
   229b4:	ldr	r3, [sp, #264]	; 0x108
   229b8:	str	fp, [sp, #268]	; 0x10c
   229bc:	ldrb	r3, [r3]
   229c0:	cmp	r3, #0
   229c4:	bne	224f4 <__assert_fail@plt+0xfe08>
   229c8:	ldr	r3, [sp, #276]	; 0x114
   229cc:	cmp	r3, #0
   229d0:	bne	22514 <__assert_fail@plt+0xfe28>
   229d4:	mov	r3, #1
   229d8:	add	r0, sp, #252	; 0xfc
   229dc:	strb	r3, [sp, #272]	; 0x110
   229e0:	bl	12134 <mbsinit@plt>
   229e4:	cmp	r0, #0
   229e8:	movne	r3, #0
   229ec:	strbne	r3, [sp, #248]	; 0xf8
   229f0:	b	22938 <__assert_fail@plt+0x1024c>
   229f4:	add	r0, sp, #252	; 0xfc
   229f8:	bl	12134 <mbsinit@plt>
   229fc:	cmp	r0, #0
   22a00:	beq	2246c <__assert_fail@plt+0xfd80>
   22a04:	mov	r3, #1
   22a08:	strb	r3, [sp, #248]	; 0xf8
   22a0c:	ldr	fp, [sp, #264]	; 0x108
   22a10:	bl	12260 <__ctype_get_mb_cur_max@plt>
   22a14:	mov	r1, r0
   22a18:	mov	r0, fp
   22a1c:	bl	28854 <__assert_fail@plt+0x16168>
   22a20:	add	r3, sl, #4
   22a24:	mov	r1, fp
   22a28:	mov	r2, r0
   22a2c:	add	r0, sl, #28
   22a30:	bl	2bf50 <__assert_fail@plt+0x19864>
   22a34:	cmn	r0, #1
   22a38:	str	r0, [sp, #268]	; 0x10c
   22a3c:	bne	22a50 <__assert_fail@plt+0x10364>
   22a40:	mov	r3, #1
   22a44:	str	r3, [sp, #268]	; 0x10c
   22a48:	mov	r3, #0
   22a4c:	b	22c00 <__assert_fail@plt+0x10514>
   22a50:	cmn	r0, #2
   22a54:	bne	22a68 <__assert_fail@plt+0x1037c>
   22a58:	ldr	r0, [sp, #264]	; 0x108
   22a5c:	bl	123bc <strlen@plt>
   22a60:	str	r0, [sp, #268]	; 0x10c
   22a64:	b	22a48 <__assert_fail@plt+0x1035c>
   22a68:	cmp	r0, #0
   22a6c:	bne	22a94 <__assert_fail@plt+0x103a8>
   22a70:	mov	r3, #1
   22a74:	str	r3, [sp, #268]	; 0x10c
   22a78:	ldr	r3, [sp, #264]	; 0x108
   22a7c:	ldrb	r3, [r3]
   22a80:	cmp	r3, #0
   22a84:	bne	224f4 <__assert_fail@plt+0xfe08>
   22a88:	ldr	r3, [sp, #276]	; 0x114
   22a8c:	cmp	r3, #0
   22a90:	bne	22514 <__assert_fail@plt+0xfe28>
   22a94:	mov	r3, #1
   22a98:	add	r0, sp, #252	; 0xfc
   22a9c:	strb	r3, [sp, #272]	; 0x110
   22aa0:	bl	12134 <mbsinit@plt>
   22aa4:	cmp	r0, #0
   22aa8:	movne	r3, #0
   22aac:	strbne	r3, [sp, #248]	; 0xf8
   22ab0:	b	22c04 <__assert_fail@plt+0x10518>
   22ab4:	add	r0, sp, #196	; 0xc4
   22ab8:	bl	12134 <mbsinit@plt>
   22abc:	cmp	r0, #0
   22ac0:	beq	2246c <__assert_fail@plt+0xfd80>
   22ac4:	mov	r3, #1
   22ac8:	strb	r3, [sp, #192]	; 0xc0
   22acc:	ldr	fp, [sp, #208]	; 0xd0
   22ad0:	bl	12260 <__ctype_get_mb_cur_max@plt>
   22ad4:	mov	r1, r0
   22ad8:	mov	r0, fp
   22adc:	bl	28854 <__assert_fail@plt+0x16168>
   22ae0:	add	r3, sp, #196	; 0xc4
   22ae4:	mov	r1, fp
   22ae8:	mov	r2, r0
   22aec:	add	r0, sp, #220	; 0xdc
   22af0:	bl	2bf50 <__assert_fail@plt+0x19864>
   22af4:	cmn	r0, #1
   22af8:	str	r0, [sp, #212]	; 0xd4
   22afc:	bne	22b10 <__assert_fail@plt+0x10424>
   22b00:	mov	r3, #1
   22b04:	str	r3, [sp, #212]	; 0xd4
   22b08:	mov	r3, #0
   22b0c:	b	22f14 <__assert_fail@plt+0x10828>
   22b10:	cmn	r0, #2
   22b14:	bne	22b28 <__assert_fail@plt+0x1043c>
   22b18:	ldr	r0, [sp, #208]	; 0xd0
   22b1c:	bl	123bc <strlen@plt>
   22b20:	str	r0, [sp, #212]	; 0xd4
   22b24:	b	22b08 <__assert_fail@plt+0x1041c>
   22b28:	cmp	r0, #0
   22b2c:	bne	22b54 <__assert_fail@plt+0x10468>
   22b30:	mov	r3, #1
   22b34:	str	r3, [sp, #212]	; 0xd4
   22b38:	ldr	r3, [sp, #208]	; 0xd0
   22b3c:	ldrb	r3, [r3]
   22b40:	cmp	r3, #0
   22b44:	bne	224f4 <__assert_fail@plt+0xfe08>
   22b48:	ldr	r3, [sp, #220]	; 0xdc
   22b4c:	cmp	r3, #0
   22b50:	bne	22514 <__assert_fail@plt+0xfe28>
   22b54:	mov	r3, #1
   22b58:	add	r0, sp, #196	; 0xc4
   22b5c:	strb	r3, [sp, #216]	; 0xd8
   22b60:	bl	12134 <mbsinit@plt>
   22b64:	cmp	r0, #0
   22b68:	movne	r3, #0
   22b6c:	strbne	r3, [sp, #192]	; 0xc0
   22b70:	b	22f18 <__assert_fail@plt+0x1082c>
   22b74:	ldrb	r3, [sp, #272]	; 0x110
   22b78:	cmp	r3, #0
   22b7c:	beq	22f44 <__assert_fail@plt+0x10858>
   22b80:	ldr	r0, [sp, #276]	; 0x114
   22b84:	ldr	r3, [sp, #220]	; 0xdc
   22b88:	subs	r0, r3, r0
   22b8c:	movne	r0, #1
   22b90:	cmp	r0, #0
   22b94:	bne	22c2c <__assert_fail@plt+0x10540>
   22b98:	ldr	r2, [sp, #212]	; 0xd4
   22b9c:	ldr	r3, [sp, #208]	; 0xd0
   22ba0:	strb	r0, [sp, #204]	; 0xcc
   22ba4:	add	r3, r3, r2
   22ba8:	str	r3, [sp, #208]	; 0xd0
   22bac:	ldr	r2, [sp, #268]	; 0x10c
   22bb0:	ldr	r3, [sp, #264]	; 0x108
   22bb4:	strb	r0, [sp, #260]	; 0x104
   22bb8:	add	r3, r3, r2
   22bbc:	str	r3, [sp, #264]	; 0x108
   22bc0:	ldrb	r3, [sp, #248]	; 0xf8
   22bc4:	cmp	r3, #0
   22bc8:	bne	22a0c <__assert_fail@plt+0x10320>
   22bcc:	ldr	r1, [sp, #264]	; 0x108
   22bd0:	ldr	r0, [sp]
   22bd4:	ldrb	r3, [r1]
   22bd8:	lsr	r2, r3, #5
   22bdc:	and	r3, r3, #31
   22be0:	ldr	r2, [r0, r2, lsl #2]
   22be4:	lsr	r3, r2, r3
   22be8:	tst	r3, #1
   22bec:	beq	229f4 <__assert_fail@plt+0x10308>
   22bf0:	mov	r3, #1
   22bf4:	str	r3, [sp, #268]	; 0x10c
   22bf8:	ldrb	r2, [r1]
   22bfc:	str	r2, [sp, #276]	; 0x114
   22c00:	strb	r3, [sp, #272]	; 0x110
   22c04:	mov	r3, #1
   22c08:	strb	r3, [sp, #260]	; 0x104
   22c0c:	ldrb	r3, [sp, #272]	; 0x110
   22c10:	cmp	r3, #0
   22c14:	beq	22ec8 <__assert_fail@plt+0x107dc>
   22c18:	ldr	r3, [sp, #276]	; 0x114
   22c1c:	cmp	r3, #0
   22c20:	bne	22ec8 <__assert_fail@plt+0x107dc>
   22c24:	ldr	r0, [sp, #152]	; 0x98
   22c28:	b	22cac <__assert_fail@plt+0x105c0>
   22c2c:	ldr	r3, [sp, #152]	; 0x98
   22c30:	ldr	r2, [sp, #156]	; 0x9c
   22c34:	ldr	fp, [sp, #4]
   22c38:	add	r3, r3, r2
   22c3c:	str	r3, [sp, #152]	; 0x98
   22c40:	mov	r3, #0
   22c44:	strb	r3, [sp, #148]	; 0x94
   22c48:	ldrb	r3, [sp, #136]	; 0x88
   22c4c:	ldr	sl, [sp, #152]	; 0x98
   22c50:	cmp	r3, #0
   22c54:	bne	22560 <__assert_fail@plt+0xfe74>
   22c58:	ldrb	r3, [sl]
   22c5c:	ldr	r1, [sp]
   22c60:	lsr	r2, r3, #5
   22c64:	and	r3, r3, #31
   22c68:	ldr	r2, [r1, r2, lsl #2]
   22c6c:	lsr	r3, r2, r3
   22c70:	tst	r3, #1
   22c74:	beq	22548 <__assert_fail@plt+0xfe5c>
   22c78:	mov	r3, #1
   22c7c:	str	r3, [sp, #156]	; 0x9c
   22c80:	ldrb	r2, [sl]
   22c84:	str	r2, [sp, #164]	; 0xa4
   22c88:	strb	r3, [sp, #160]	; 0xa0
   22c8c:	mov	r3, #1
   22c90:	strb	r3, [sp, #148]	; 0x94
   22c94:	ldrb	r3, [sp, #160]	; 0xa0
   22c98:	cmp	r3, #0
   22c9c:	beq	22ddc <__assert_fail@plt+0x106f0>
   22ca0:	ldr	r0, [sp, #164]	; 0xa4
   22ca4:	cmp	r0, #0
   22ca8:	bne	22ddc <__assert_fail@plt+0x106f0>
   22cac:	add	sp, sp, #308	; 0x134
   22cb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22cb4:	cmp	r7, #0
   22cb8:	beq	22454 <__assert_fail@plt+0xfd68>
   22cbc:	mov	sl, #0
   22cc0:	add	fp, r6, #1
   22cc4:	mov	r3, r6
   22cc8:	mov	r5, sl
   22ccc:	mov	r9, sl
   22cd0:	mov	r2, #1
   22cd4:	ldrb	r1, [r4]
   22cd8:	cmp	r1, #0
   22cdc:	bne	22ce8 <__assert_fail@plt+0x105fc>
   22ce0:	mov	r0, #0
   22ce4:	b	22cac <__assert_fail@plt+0x105c0>
   22ce8:	cmp	r9, #9
   22cec:	movls	r8, #0
   22cf0:	andhi	r8, r2, #1
   22cf4:	cmp	r8, #0
   22cf8:	beq	22d88 <__assert_fail@plt+0x1069c>
   22cfc:	add	r2, r9, r9, lsl #2
   22d00:	cmp	r5, r2
   22d04:	bcc	22d34 <__assert_fail@plt+0x10648>
   22d08:	cmp	r3, #0
   22d0c:	beq	22f6c <__assert_fail@plt+0x10880>
   22d10:	sub	r1, r5, sl
   22d14:	mov	r0, r3
   22d18:	str	r3, [sp]
   22d1c:	bl	124dc <strnlen@plt>
   22d20:	ldr	r3, [sp]
   22d24:	mov	sl, r5
   22d28:	ldrb	r2, [r3, r0]!
   22d2c:	cmp	r2, #0
   22d30:	beq	22f6c <__assert_fail@plt+0x10880>
   22d34:	ldrb	r2, [r4]
   22d38:	add	r9, r9, #1
   22d3c:	add	r1, r5, #1
   22d40:	cmp	r2, r7
   22d44:	bne	22d78 <__assert_fail@plt+0x1068c>
   22d48:	mov	r2, fp
   22d4c:	mov	lr, r4
   22d50:	sub	r5, r5, r6
   22d54:	ldrb	ip, [r2], #1
   22d58:	cmp	ip, #0
   22d5c:	beq	22454 <__assert_fail@plt+0xfd68>
   22d60:	ldrb	r0, [lr, #1]!
   22d64:	cmp	r0, #0
   22d68:	beq	22ce0 <__assert_fail@plt+0x105f4>
   22d6c:	cmp	ip, r0
   22d70:	add	r1, r5, r2
   22d74:	beq	22d54 <__assert_fail@plt+0x10668>
   22d78:	add	r4, r4, #1
   22d7c:	mov	r5, r1
   22d80:	mov	r2, r8
   22d84:	b	22cd4 <__assert_fail@plt+0x105e8>
   22d88:	mov	r8, r2
   22d8c:	b	22d34 <__assert_fail@plt+0x10648>
   22d90:	add	r7, sp, #304	; 0x130
   22d94:	mov	r5, #0
   22d98:	add	r9, sp, #304	; 0x130
   22d9c:	strb	r5, [r7, #-224]!	; 0xffffff20
   22da0:	add	r3, r7, #4
   22da4:	str	r5, [sp, #84]	; 0x54
   22da8:	strb	r5, [r9, #-168]!	; 0xffffff58
   22dac:	str	r5, [r7, #8]
   22db0:	str	r5, [sp, #140]	; 0x8c
   22db4:	str	r6, [sp, #96]	; 0x60
   22db8:	str	r5, [r9, #8]
   22dbc:	strb	r5, [sp, #92]	; 0x5c
   22dc0:	str	r4, [sp, #152]	; 0x98
   22dc4:	strb	r5, [sp, #148]	; 0x94
   22dc8:	mov	r8, r5
   22dcc:	str	r5, [sp, #8]
   22dd0:	mov	fp, #1
   22dd4:	str	r3, [sp, #16]
   22dd8:	b	22c48 <__assert_fail@plt+0x1055c>
   22ddc:	ldr	r3, [sp, #8]
   22de0:	cmp	r3, #9
   22de4:	movls	r3, #0
   22de8:	andhi	r3, fp, #1
   22dec:	cmp	r3, #0
   22df0:	str	r3, [sp, #4]
   22df4:	streq	fp, [sp, #4]
   22df8:	beq	22810 <__assert_fail@plt+0x10124>
   22dfc:	ldr	r3, [sp, #8]
   22e00:	add	r3, r3, r3, lsl #2
   22e04:	cmp	r8, r3
   22e08:	bcc	22810 <__assert_fail@plt+0x10124>
   22e0c:	sub	r5, r8, r5
   22e10:	cmp	r5, #0
   22e14:	bne	22604 <__assert_fail@plt+0xff18>
   22e18:	ldrb	r3, [sp, #92]	; 0x5c
   22e1c:	cmp	r3, #0
   22e20:	bne	22e70 <__assert_fail@plt+0x10784>
   22e24:	ldrb	r3, [sp, #80]	; 0x50
   22e28:	ldr	r5, [sp, #96]	; 0x60
   22e2c:	cmp	r3, #0
   22e30:	bne	22768 <__assert_fail@plt+0x1007c>
   22e34:	ldrb	r3, [r5]
   22e38:	ldr	r1, [sp]
   22e3c:	lsr	r2, r3, #5
   22e40:	and	r3, r3, #31
   22e44:	ldr	r2, [r1, r2, lsl #2]
   22e48:	lsr	r3, r2, r3
   22e4c:	tst	r3, #1
   22e50:	beq	22750 <__assert_fail@plt+0x10064>
   22e54:	mov	r3, #1
   22e58:	str	r3, [sp, #100]	; 0x64
   22e5c:	ldrb	r2, [r5]
   22e60:	str	r2, [sp, #108]	; 0x6c
   22e64:	strb	r3, [sp, #104]	; 0x68
   22e68:	mov	r3, #1
   22e6c:	strb	r3, [sp, #92]	; 0x5c
   22e70:	ldrb	r3, [sp, #104]	; 0x68
   22e74:	cmp	r3, #0
   22e78:	beq	2280c <__assert_fail@plt+0x10120>
   22e7c:	ldr	r2, [sp, #108]	; 0x6c
   22e80:	cmp	r2, #0
   22e84:	bne	2295c <__assert_fail@plt+0x10270>
   22e88:	add	r2, sp, #248	; 0xf8
   22e8c:	mov	r1, r6
   22e90:	mov	r0, r4
   22e94:	bl	21b8c <__assert_fail@plt+0xf4a0>
   22e98:	subs	r3, r0, #0
   22e9c:	str	r3, [sp, #4]
   22ea0:	beq	2280c <__assert_fail@plt+0x10120>
   22ea4:	ldr	r0, [sp, #248]	; 0xf8
   22ea8:	b	22cac <__assert_fail@plt+0x105c0>
   22eac:	ldr	r3, [sp, #264]	; 0x108
   22eb0:	ldr	r2, [sp, #268]	; 0x10c
   22eb4:	add	r3, r3, r2
   22eb8:	str	r3, [sp, #264]	; 0x108
   22ebc:	mov	r3, #0
   22ec0:	strb	r3, [sp, #260]	; 0x104
   22ec4:	b	22bc0 <__assert_fail@plt+0x104d4>
   22ec8:	ldrb	r3, [sp, #204]	; 0xcc
   22ecc:	cmp	r3, #0
   22ed0:	bne	22f20 <__assert_fail@plt+0x10834>
   22ed4:	ldrb	r3, [sp, #192]	; 0xc0
   22ed8:	cmp	r3, #0
   22edc:	bne	22acc <__assert_fail@plt+0x103e0>
   22ee0:	ldr	r1, [sp, #208]	; 0xd0
   22ee4:	ldr	r0, [sp]
   22ee8:	ldrb	r3, [r1]
   22eec:	lsr	r2, r3, #5
   22ef0:	and	r3, r3, #31
   22ef4:	ldr	r2, [r0, r2, lsl #2]
   22ef8:	lsr	r3, r2, r3
   22efc:	tst	r3, #1
   22f00:	beq	22ab4 <__assert_fail@plt+0x103c8>
   22f04:	mov	r3, #1
   22f08:	str	r3, [sp, #212]	; 0xd4
   22f0c:	ldrb	r2, [r1]
   22f10:	str	r2, [sp, #220]	; 0xdc
   22f14:	strb	r3, [sp, #216]	; 0xd8
   22f18:	mov	r3, #1
   22f1c:	strb	r3, [sp, #204]	; 0xcc
   22f20:	ldrb	r3, [sp, #216]	; 0xd8
   22f24:	cmp	r3, #0
   22f28:	beq	22f38 <__assert_fail@plt+0x1084c>
   22f2c:	ldr	r0, [sp, #220]	; 0xdc
   22f30:	cmp	r0, #0
   22f34:	beq	22cac <__assert_fail@plt+0x105c0>
   22f38:	cmp	r3, #0
   22f3c:	add	r8, r8, #1
   22f40:	bne	22b74 <__assert_fail@plt+0x10488>
   22f44:	ldr	r2, [sp, #212]	; 0xd4
   22f48:	ldr	r3, [sp, #268]	; 0x10c
   22f4c:	cmp	r2, r3
   22f50:	bne	22c2c <__assert_fail@plt+0x10540>
   22f54:	ldr	r1, [sp, #264]	; 0x108
   22f58:	ldr	r0, [sp, #208]	; 0xd0
   22f5c:	bl	12158 <memcmp@plt>
   22f60:	adds	r0, r0, #0
   22f64:	movne	r0, #1
   22f68:	b	22b90 <__assert_fail@plt+0x104a4>
   22f6c:	mov	r0, r6
   22f70:	bl	123bc <strlen@plt>
   22f74:	add	r3, sp, #248	; 0xf8
   22f78:	mov	r1, r6
   22f7c:	mov	r2, r0
   22f80:	mov	r0, r4
   22f84:	bl	21a68 <__assert_fail@plt+0xf37c>
   22f88:	subs	r8, r0, #0
   22f8c:	bne	22ea4 <__assert_fail@plt+0x107b8>
   22f90:	mov	r3, r8
   22f94:	b	22d34 <__assert_fail@plt+0x10648>
   22f98:	andeq	pc, r3, ip, lsl r5	; <UNPREDICTABLE>
   22f9c:	andeq	sp, r3, sl, asr #29
   22fa0:	ldrdeq	sp, [r3], -sp	; <UNPREDICTABLE>
   22fa4:	andeq	sp, r3, r7, ror #29
   22fa8:	strdeq	sp, [r3], -lr
   22fac:	andeq	sp, r3, r5, lsl pc
   22fb0:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   22fb4:	mov	r6, r2
   22fb8:	mov	r5, r0
   22fbc:	add	r7, r0, r1
   22fc0:	bl	12260 <__ctype_get_mb_cur_max@plt>
   22fc4:	mov	r4, #0
   22fc8:	cmp	r0, #1
   22fcc:	andls	r6, r6, #2
   22fd0:	bls	23108 <__assert_fail@plt+0x10a1c>
   22fd4:	cmp	r5, r7
   22fd8:	bcs	230ec <__assert_fail@plt+0x10a00>
   22fdc:	ldrb	r3, [r5]
   22fe0:	cmp	r3, #63	; 0x3f
   22fe4:	bhi	23008 <__assert_fail@plt+0x1091c>
   22fe8:	cmp	r3, #37	; 0x25
   22fec:	bcs	22ffc <__assert_fail@plt+0x10910>
   22ff0:	sub	r3, r3, #32
   22ff4:	cmp	r3, #3
   22ff8:	bhi	23024 <__assert_fail@plt+0x10938>
   22ffc:	add	r5, r5, #1
   23000:	add	r4, r4, #1
   23004:	b	22fd4 <__assert_fail@plt+0x108e8>
   23008:	cmp	r3, #65	; 0x41
   2300c:	bcc	23024 <__assert_fail@plt+0x10938>
   23010:	cmp	r3, #95	; 0x5f
   23014:	bls	22ffc <__assert_fail@plt+0x10910>
   23018:	sub	r3, r3, #97	; 0x61
   2301c:	cmp	r3, #29
   23020:	b	22ff8 <__assert_fail@plt+0x1090c>
   23024:	and	r9, r6, #2
   23028:	mvn	sl, #-2147483648	; 0x80000000
   2302c:	mov	r3, #0
   23030:	str	r3, [sp, #8]
   23034:	str	r3, [sp, #12]
   23038:	add	r3, sp, #8
   2303c:	sub	r2, r7, r5
   23040:	mov	r1, r5
   23044:	add	r0, sp, #4
   23048:	bl	2bf50 <__assert_fail@plt+0x19864>
   2304c:	cmn	r0, #1
   23050:	mov	r8, r0
   23054:	bne	23068 <__assert_fail@plt+0x1097c>
   23058:	tst	r6, #1
   2305c:	beq	22ffc <__assert_fail@plt+0x10910>
   23060:	mvn	r4, #0
   23064:	b	230ec <__assert_fail@plt+0x10a00>
   23068:	cmn	r0, #2
   2306c:	bne	23084 <__assert_fail@plt+0x10998>
   23070:	tst	r6, #1
   23074:	bne	23060 <__assert_fail@plt+0x10974>
   23078:	add	r4, r4, #1
   2307c:	mov	r5, r7
   23080:	b	22fd4 <__assert_fail@plt+0x108e8>
   23084:	cmp	r0, #0
   23088:	ldr	r0, [sp, #4]
   2308c:	moveq	r8, #1
   23090:	bl	12074 <wcwidth@plt>
   23094:	cmp	r0, #0
   23098:	blt	230c4 <__assert_fail@plt+0x109d8>
   2309c:	sub	r3, sl, r4
   230a0:	cmp	r0, r3
   230a4:	bgt	230e8 <__assert_fail@plt+0x109fc>
   230a8:	add	r4, r4, r0
   230ac:	add	r0, sp, #8
   230b0:	bl	12134 <mbsinit@plt>
   230b4:	add	r5, r5, r8
   230b8:	cmp	r0, #0
   230bc:	beq	23038 <__assert_fail@plt+0x1094c>
   230c0:	b	22fd4 <__assert_fail@plt+0x108e8>
   230c4:	cmp	r9, #0
   230c8:	bne	23060 <__assert_fail@plt+0x10974>
   230cc:	ldr	r0, [sp, #4]
   230d0:	bl	121dc <iswcntrl@plt>
   230d4:	cmp	r0, #0
   230d8:	bne	230ac <__assert_fail@plt+0x109c0>
   230dc:	cmn	r4, #-2147483647	; 0x80000001
   230e0:	addne	r4, r4, #1
   230e4:	bne	230ac <__assert_fail@plt+0x109c0>
   230e8:	mvn	r4, #-2147483648	; 0x80000000
   230ec:	mov	r0, r4
   230f0:	add	sp, sp, #16
   230f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   230f8:	cmp	r6, #0
   230fc:	bne	23060 <__assert_fail@plt+0x10974>
   23100:	tst	r3, #2
   23104:	beq	2312c <__assert_fail@plt+0x10a40>
   23108:	cmp	r5, r7
   2310c:	bcs	230ec <__assert_fail@plt+0x10a00>
   23110:	bl	12374 <__ctype_b_loc@plt>
   23114:	ldrb	r3, [r5], #1
   23118:	lsl	r3, r3, #1
   2311c:	ldr	r2, [r0]
   23120:	ldrh	r3, [r2, r3]
   23124:	tst	r3, #16384	; 0x4000
   23128:	beq	230f8 <__assert_fail@plt+0x10a0c>
   2312c:	cmn	r4, #-2147483647	; 0x80000001
   23130:	beq	230ec <__assert_fail@plt+0x10a00>
   23134:	add	r4, r4, #1
   23138:	b	23108 <__assert_fail@plt+0x10a1c>
   2313c:	push	{r4, r5, r6, lr}
   23140:	mov	r5, r1
   23144:	mov	r4, r0
   23148:	bl	123bc <strlen@plt>
   2314c:	mov	r2, r5
   23150:	mov	r1, r0
   23154:	mov	r0, r4
   23158:	pop	{r4, r5, r6, lr}
   2315c:	b	22fb0 <__assert_fail@plt+0x108c4>
   23160:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23164:	mov	r4, r0
   23168:	ldrb	r3, [r0]
   2316c:	sub	r3, r3, #48	; 0x30
   23170:	cmp	r3, #7
   23174:	subhi	r3, r0, #1
   23178:	movhi	r0, #1
   2317c:	bhi	2321c <__assert_fail@plt+0x10b30>
   23180:	ldr	r0, [pc, #740]	; 2346c <__assert_fail@plt+0x10d80>
   23184:	mov	r2, r4
   23188:	mov	r5, #0
   2318c:	ldrb	r3, [r2], #1
   23190:	lsl	r5, r5, #3
   23194:	sub	r5, r5, #48	; 0x30
   23198:	add	r5, r3, r5
   2319c:	cmp	r5, r0
   231a0:	bhi	23464 <__assert_fail@plt+0x10d78>
   231a4:	ldrb	r3, [r2]
   231a8:	sub	r1, r3, #48	; 0x30
   231ac:	cmp	r1, #7
   231b0:	bls	2318c <__assert_fail@plt+0x10aa0>
   231b4:	cmp	r3, #0
   231b8:	bne	23464 <__assert_fail@plt+0x10d78>
   231bc:	sub	r2, r2, r4
   231c0:	cmp	r2, #4
   231c4:	andle	r4, r5, #3072	; 0xc00
   231c8:	mov	r0, #32
   231cc:	mvnle	r4, r4, lsr #10
   231d0:	ldrgt	r4, [pc, #660]	; 2346c <__assert_fail@plt+0x10d80>
   231d4:	mvnle	r4, r4, lsl #10
   231d8:	bl	28d44 <__assert_fail@plt+0x16658>
   231dc:	mov	r3, #61	; 0x3d
   231e0:	strb	r3, [r0]
   231e4:	mov	r3, #1
   231e8:	strb	r3, [r0, #1]
   231ec:	ldr	r3, [pc, #632]	; 2346c <__assert_fail@plt+0x10d80>
   231f0:	str	r4, [r0, #12]
   231f4:	stmib	r0, {r3, r5}
   231f8:	mov	r3, #0
   231fc:	strb	r3, [r0, #17]
   23200:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23204:	and	ip, r5, #239	; 0xef
   23208:	cmp	r5, #43	; 0x2b
   2320c:	cmpne	ip, #45	; 0x2d
   23210:	moveq	ip, #1
   23214:	movne	ip, #0
   23218:	add	r0, r0, ip
   2321c:	ldrb	r5, [r3, #1]!
   23220:	cmp	r5, #0
   23224:	bne	23204 <__assert_fail@plt+0x10b18>
   23228:	mov	r1, #16
   2322c:	ldr	sl, [pc, #568]	; 2346c <__assert_fail@plt+0x10d80>
   23230:	bl	28e1c <__assert_fail@plt+0x16730>
   23234:	mov	ip, r5
   23238:	mov	r1, #0
   2323c:	mov	r2, r4
   23240:	add	r4, r4, #1
   23244:	ldrb	r3, [r2]
   23248:	cmp	r3, #97	; 0x61
   2324c:	beq	23318 <__assert_fail@plt+0x10c2c>
   23250:	bhi	232e0 <__assert_fail@plt+0x10bf4>
   23254:	cmp	r3, #45	; 0x2d
   23258:	beq	2326c <__assert_fail@plt+0x10b80>
   2325c:	cmp	r3, #61	; 0x3d
   23260:	beq	2326c <__assert_fail@plt+0x10b80>
   23264:	cmp	r3, #43	; 0x2b
   23268:	bne	23460 <__assert_fail@plt+0x10d74>
   2326c:	add	lr, r0, ip, lsl #4
   23270:	mov	r8, #3
   23274:	mov	r7, #0
   23278:	mov	r9, #1
   2327c:	ldrb	r3, [r2, #1]
   23280:	add	r5, r2, #1
   23284:	ldrb	fp, [r2]
   23288:	cmp	r3, #103	; 0x67
   2328c:	beq	233dc <__assert_fail@plt+0x10cf0>
   23290:	bhi	23320 <__assert_fail@plt+0x10c34>
   23294:	sub	r3, r3, #48	; 0x30
   23298:	cmp	r3, #7
   2329c:	movls	r3, #0
   232a0:	movls	r2, r5
   232a4:	bls	23344 <__assert_fail@plt+0x10c58>
   232a8:	mov	r4, r9
   232ac:	mov	r3, #0
   232b0:	mov	r2, r5
   232b4:	add	r5, r5, #1
   232b8:	ldrb	r6, [r2]
   232bc:	cmp	r6, #115	; 0x73
   232c0:	beq	2343c <__assert_fail@plt+0x10d50>
   232c4:	bhi	23404 <__assert_fail@plt+0x10d18>
   232c8:	cmp	r6, #88	; 0x58
   232cc:	beq	23444 <__assert_fail@plt+0x10d58>
   232d0:	cmp	r6, #114	; 0x72
   232d4:	beq	23424 <__assert_fail@plt+0x10d38>
   232d8:	mov	r5, r7
   232dc:	b	2338c <__assert_fail@plt+0x10ca0>
   232e0:	cmp	r3, #111	; 0x6f
   232e4:	beq	2330c <__assert_fail@plt+0x10c20>
   232e8:	cmp	r3, #117	; 0x75
   232ec:	beq	23304 <__assert_fail@plt+0x10c18>
   232f0:	cmp	r3, #103	; 0x67
   232f4:	bne	23460 <__assert_fail@plt+0x10d74>
   232f8:	orr	r1, r1, #1072	; 0x430
   232fc:	orr	r1, r1, #8
   23300:	b	2323c <__assert_fail@plt+0x10b50>
   23304:	orr	r1, r1, #2496	; 0x9c0
   23308:	b	2323c <__assert_fail@plt+0x10b50>
   2330c:	orr	r1, r1, #516	; 0x204
   23310:	orr	r1, r1, #3
   23314:	b	2323c <__assert_fail@plt+0x10b50>
   23318:	ldr	r1, [pc, #332]	; 2346c <__assert_fail@plt+0x10d80>
   2331c:	b	2323c <__assert_fail@plt+0x10b50>
   23320:	cmp	r3, #111	; 0x6f
   23324:	beq	233f0 <__assert_fail@plt+0x10d04>
   23328:	cmp	r3, #117	; 0x75
   2332c:	bne	232a8 <__assert_fail@plt+0x10bbc>
   23330:	add	r2, r2, #2
   23334:	mov	r4, r8
   23338:	mov	r5, r7
   2333c:	mov	r3, #448	; 0x1c0
   23340:	b	2338c <__assert_fail@plt+0x10ca0>
   23344:	ldrb	r4, [r2], #1
   23348:	lsl	r3, r3, #3
   2334c:	sub	r3, r3, #48	; 0x30
   23350:	add	r3, r4, r3
   23354:	cmp	r3, sl
   23358:	bhi	23460 <__assert_fail@plt+0x10d74>
   2335c:	ldrb	r4, [r2]
   23360:	sub	r5, r4, #48	; 0x30
   23364:	cmp	r5, #7
   23368:	bls	23344 <__assert_fail@plt+0x10c58>
   2336c:	cmp	r1, #0
   23370:	bne	23460 <__assert_fail@plt+0x10d74>
   23374:	cmp	r4, #0
   23378:	cmpne	r4, #44	; 0x2c
   2337c:	bne	23460 <__assert_fail@plt+0x10d74>
   23380:	ldr	r1, [pc, #228]	; 2346c <__assert_fail@plt+0x10d80>
   23384:	mov	r4, r9
   23388:	mov	r5, r1
   2338c:	cmp	r5, #0
   23390:	stmib	lr, {r1, r3}
   23394:	add	ip, ip, #1
   23398:	strb	fp, [lr]
   2339c:	strb	r4, [lr, #1]
   233a0:	movne	r3, r5
   233a4:	bne	233b0 <__assert_fail@plt+0x10cc4>
   233a8:	cmp	r1, #0
   233ac:	andne	r3, r3, r1
   233b0:	str	r3, [lr, #12]
   233b4:	ldrb	r3, [r2]
   233b8:	add	lr, lr, #16
   233bc:	and	r4, r3, #239	; 0xef
   233c0:	cmp	r3, #43	; 0x2b
   233c4:	cmpne	r4, #45	; 0x2d
   233c8:	beq	2327c <__assert_fail@plt+0x10b90>
   233cc:	cmp	r3, #44	; 0x2c
   233d0:	bne	2344c <__assert_fail@plt+0x10d60>
   233d4:	add	r4, r2, #1
   233d8:	b	23238 <__assert_fail@plt+0x10b4c>
   233dc:	add	r2, r2, #2
   233e0:	mov	r4, r8
   233e4:	mov	r5, r7
   233e8:	mov	r3, #56	; 0x38
   233ec:	b	2338c <__assert_fail@plt+0x10ca0>
   233f0:	add	r2, r2, #2
   233f4:	mov	r4, r8
   233f8:	mov	r5, r7
   233fc:	mov	r3, #7
   23400:	b	2338c <__assert_fail@plt+0x10ca0>
   23404:	cmp	r6, #119	; 0x77
   23408:	beq	2342c <__assert_fail@plt+0x10d40>
   2340c:	cmp	r6, #120	; 0x78
   23410:	beq	23434 <__assert_fail@plt+0x10d48>
   23414:	cmp	r6, #116	; 0x74
   23418:	bne	232d8 <__assert_fail@plt+0x10bec>
   2341c:	orr	r3, r3, #512	; 0x200
   23420:	b	232b0 <__assert_fail@plt+0x10bc4>
   23424:	orr	r3, r3, #292	; 0x124
   23428:	b	232b0 <__assert_fail@plt+0x10bc4>
   2342c:	orr	r3, r3, #146	; 0x92
   23430:	b	232b0 <__assert_fail@plt+0x10bc4>
   23434:	orr	r3, r3, #73	; 0x49
   23438:	b	232b0 <__assert_fail@plt+0x10bc4>
   2343c:	orr	r3, r3, #3072	; 0xc00
   23440:	b	232b0 <__assert_fail@plt+0x10bc4>
   23444:	mov	r4, #2
   23448:	b	232b0 <__assert_fail@plt+0x10bc4>
   2344c:	cmp	r3, #0
   23450:	bne	23460 <__assert_fail@plt+0x10d74>
   23454:	add	ip, r0, ip, lsl #4
   23458:	strb	r3, [ip, #1]
   2345c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23460:	bl	2a01c <__assert_fail@plt+0x17930>
   23464:	mov	r0, #0
   23468:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2346c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   23470:	push	{r4, r5, lr}
   23474:	sub	sp, sp, #108	; 0x6c
   23478:	mov	r1, sp
   2347c:	bl	39b84 <__assert_fail@plt+0x27498>
   23480:	subs	r4, r0, #0
   23484:	movne	r0, #0
   23488:	bne	234b8 <__assert_fail@plt+0x10dcc>
   2348c:	mov	r0, #32
   23490:	ldr	r5, [sp, #16]
   23494:	bl	28d44 <__assert_fail@plt+0x16658>
   23498:	mov	r3, #61	; 0x3d
   2349c:	strb	r3, [r0]
   234a0:	mov	r3, #1
   234a4:	strb	r3, [r0, #1]
   234a8:	ldr	r3, [pc, #16]	; 234c0 <__assert_fail@plt+0x10dd4>
   234ac:	strb	r4, [r0, #17]
   234b0:	str	r3, [r0, #12]
   234b4:	stmib	r0, {r3, r5}
   234b8:	add	sp, sp, #108	; 0x6c
   234bc:	pop	{r4, r5, pc}
   234c0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   234c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   234c8:	cmp	r1, #0
   234cc:	ldr	r7, [pc, #248]	; 235cc <__assert_fail@plt+0x10ee0>
   234d0:	ldr	r5, [sp, #32]
   234d4:	and	r0, r0, r7
   234d8:	movne	r6, #3072	; 0xc00
   234dc:	moveq	r6, #0
   234e0:	add	r3, r3, #16
   234e4:	mov	r4, #0
   234e8:	mvn	r2, r2
   234ec:	ldrb	r9, [r3, #-15]
   234f0:	cmp	r9, #0
   234f4:	bne	23504 <__assert_fail@plt+0x10e18>
   234f8:	cmp	r5, #0
   234fc:	strne	r4, [r5]
   23500:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23504:	ldr	r8, [r3, #-4]
   23508:	cmp	r9, #2
   2350c:	ldr	ip, [r3, #-12]
   23510:	bic	r8, r6, r8
   23514:	ldr	lr, [r3, #-8]
   23518:	beq	23598 <__assert_fail@plt+0x10eac>
   2351c:	cmp	r9, #3
   23520:	bne	23558 <__assert_fail@plt+0x10e6c>
   23524:	and	lr, lr, r0
   23528:	tst	lr, #292	; 0x124
   2352c:	movne	r9, #292	; 0x124
   23530:	moveq	r9, #0
   23534:	tst	lr, #146	; 0x92
   23538:	movne	sl, #146	; 0x92
   2353c:	moveq	sl, #0
   23540:	tst	lr, #73	; 0x49
   23544:	orr	sl, r9, sl
   23548:	movne	r9, #73	; 0x49
   2354c:	moveq	r9, #0
   23550:	orr	r9, r9, sl
   23554:	orr	lr, r9, lr
   23558:	cmp	ip, #0
   2355c:	movne	r9, ip
   23560:	moveq	r9, r2
   23564:	bic	lr, lr, r8
   23568:	and	lr, lr, r9
   2356c:	ldrb	r9, [r3, #-16]
   23570:	cmp	r9, #45	; 0x2d
   23574:	orreq	r4, r4, lr
   23578:	biceq	r0, r0, lr
   2357c:	beq	235c4 <__assert_fail@plt+0x10ed8>
   23580:	cmp	r9, #61	; 0x3d
   23584:	beq	235a8 <__assert_fail@plt+0x10ebc>
   23588:	cmp	r9, #43	; 0x2b
   2358c:	orreq	r4, r4, lr
   23590:	orreq	r0, r0, lr
   23594:	b	235c4 <__assert_fail@plt+0x10ed8>
   23598:	and	r9, r0, #73	; 0x49
   2359c:	orrs	r9, r9, r1
   235a0:	orrne	lr, lr, #73	; 0x49
   235a4:	b	23558 <__assert_fail@plt+0x10e6c>
   235a8:	cmp	ip, #0
   235ac:	mvnne	ip, ip
   235b0:	orr	ip, ip, r8
   235b4:	bic	r8, r7, ip
   235b8:	and	ip, ip, r0
   235bc:	orr	r4, r4, r8
   235c0:	orr	r0, lr, ip
   235c4:	add	r3, r3, #16
   235c8:	b	234ec <__assert_fail@plt+0x10e00>
   235cc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   235d0:	ldr	r3, [pc, #44]	; 23604 <__assert_fail@plt+0x10f18>
   235d4:	push	{r4, lr}
   235d8:	mov	r5, r0
   235dc:	mov	r2, #5
   235e0:	ldr	r1, [pc, #32]	; 23608 <__assert_fail@plt+0x10f1c>
   235e4:	mov	r0, #0
   235e8:	ldr	r4, [r3]
   235ec:	bl	1217c <dcgettext@plt>
   235f0:	mov	r1, r5
   235f4:	mov	r2, r0
   235f8:	mov	r0, r4
   235fc:	bl	122c0 <error@plt>
   23600:	bl	12698 <abort@plt>
   23604:	andeq	r0, r5, r4, lsl #10
   23608:	andeq	sp, r3, r7, lsr #30
   2360c:	ldr	r3, [pc, #44]	; 23640 <__assert_fail@plt+0x10f54>
   23610:	push	{r4, lr}
   23614:	mov	r5, r0
   23618:	mov	r2, #5
   2361c:	ldr	r1, [pc, #32]	; 23644 <__assert_fail@plt+0x10f58>
   23620:	mov	r0, #0
   23624:	ldr	r4, [r3]
   23628:	bl	1217c <dcgettext@plt>
   2362c:	mov	r1, r5
   23630:	mov	r2, r0
   23634:	mov	r0, r4
   23638:	bl	122c0 <error@plt>
   2363c:	bl	12698 <abort@plt>
   23640:	andeq	r0, r5, r4, lsl #10
   23644:	andeq	sp, r3, r2, asr pc
   23648:	push	{r2, r3}
   2364c:	push	{r0, r1, r2, lr}
   23650:	ldr	r2, [sp, #16]
   23654:	ands	r3, r2, #64	; 0x40
   23658:	addne	r3, sp, #20
   2365c:	strne	r3, [sp, #4]
   23660:	ldrne	r3, [sp, #20]
   23664:	bl	123e0 <openat64@plt>
   23668:	bl	2888c <__assert_fail@plt+0x161a0>
   2366c:	add	sp, sp, #12
   23670:	pop	{lr}		; (ldr lr, [sp], #4)
   23674:	add	sp, sp, #8
   23678:	bx	lr
   2367c:	andeq	r0, r0, r0
   23680:	sub	sp, sp, #8
   23684:	push	{r4, r5, r6, r7, r8, lr}
   23688:	add	ip, sp, #24
   2368c:	mov	r4, r0
   23690:	stm	ip, {r2, r3}
   23694:	ldr	r3, [r0, #156]	; 0x9c
   23698:	ldrd	r6, [sp, #32]
   2369c:	cmp	r3, #0
   236a0:	ldr	r5, [sp, #40]	; 0x28
   236a4:	beq	236f8 <__assert_fail@plt+0x1100c>
   236a8:	ldr	r2, [r0, #48]	; 0x30
   236ac:	cmp	r2, #0
   236b0:	bne	236f8 <__assert_fail@plt+0x1100c>
   236b4:	ldrb	r2, [r0, #153]	; 0x99
   236b8:	cmp	r2, #0
   236bc:	bne	236f8 <__assert_fail@plt+0x1100c>
   236c0:	ldr	r3, [r0, #172]	; 0xac
   236c4:	cmp	r5, #2
   236c8:	cmple	r3, #0
   236cc:	beq	23768 <__assert_fail@plt+0x1107c>
   236d0:	mov	r3, #1
   236d4:	strb	r3, [r0, #180]	; 0xb4
   236d8:	add	r4, r0, #32
   236dc:	ldm	ip!, {r0, r1, r2, r3}
   236e0:	stmia	r4!, {r0, r1, r2, r3}
   236e4:	ldm	ip, {r0, r1}
   236e8:	stm	r4, {r0, r1}
   236ec:	pop	{r4, r5, r6, r7, r8, lr}
   236f0:	add	sp, sp, #8
   236f4:	bx	lr
   236f8:	cmp	r5, #4
   236fc:	ble	23768 <__assert_fail@plt+0x1107c>
   23700:	add	r3, r3, #1
   23704:	str	r3, [r4, #156]	; 0x9c
   23708:	mov	r2, #100	; 0x64
   2370c:	mov	r3, #0
   23710:	mov	r0, r6
   23714:	mov	r1, r7
   23718:	bl	39878 <__assert_fail@plt+0x2718c>
   2371c:	mov	r0, r6
   23720:	mov	r1, r7
   23724:	sub	r5, r5, #4
   23728:	strd	r2, [r4, #64]	; 0x40
   2372c:	mov	r2, #100	; 0x64
   23730:	mov	r3, #0
   23734:	bl	39878 <__assert_fail@plt+0x2718c>
   23738:	mov	r2, #100	; 0x64
   2373c:	mov	r3, #0
   23740:	bl	39878 <__assert_fail@plt+0x2718c>
   23744:	mov	r0, r6
   23748:	mov	r1, r7
   2374c:	strd	r2, [r4, #56]	; 0x38
   23750:	ldr	r2, [pc, #124]	; 237d4 <__assert_fail@plt+0x110e8>
   23754:	mov	r3, #0
   23758:	bl	39878 <__assert_fail@plt+0x2718c>
   2375c:	str	r5, [r4, #48]	; 0x30
   23760:	strd	r0, [r4, #40]	; 0x28
   23764:	b	236ec <__assert_fail@plt+0x11000>
   23768:	ldr	r3, [r4, #172]	; 0xac
   2376c:	cmp	r5, #2
   23770:	add	r3, r3, #1
   23774:	str	r3, [r4, #172]	; 0xac
   23778:	bgt	237a4 <__assert_fail@plt+0x110b8>
   2377c:	mov	r2, #0
   23780:	mov	r3, #0
   23784:	strd	r6, [r4, #72]	; 0x48
   23788:	strd	r2, [r4, #80]	; 0x50
   2378c:	mov	r3, #0
   23790:	str	r3, [r4, #88]	; 0x58
   23794:	str	r3, [r4, #92]	; 0x5c
   23798:	mov	r3, #2
   2379c:	str	r3, [r4, #28]
   237a0:	b	236ec <__assert_fail@plt+0x11000>
   237a4:	mov	r2, #100	; 0x64
   237a8:	mov	r3, #0
   237ac:	mov	r0, r6
   237b0:	mov	r1, r7
   237b4:	bl	39878 <__assert_fail@plt+0x2718c>
   237b8:	mov	r2, #100	; 0x64
   237bc:	mov	r3, #0
   237c0:	strd	r0, [r4, #72]	; 0x48
   237c4:	mov	r0, r6
   237c8:	mov	r1, r7
   237cc:	bl	39878 <__assert_fail@plt+0x2718c>
   237d0:	b	23788 <__assert_fail@plt+0x1109c>
   237d4:	andeq	r2, r0, r0, lsl r7
   237d8:	ldr	r3, [r1, #24]
   237dc:	cmp	r3, #0
   237e0:	blt	2384c <__assert_fail@plt+0x11160>
   237e4:	ldr	r3, [r0]
   237e8:	ldr	r2, [r1]
   237ec:	ldr	ip, [r1, #4]
   237f0:	eor	r3, r3, r2
   237f4:	ldr	r2, [r0, #4]
   237f8:	eor	r2, r2, ip
   237fc:	orr	r3, r3, r2
   23800:	ldr	ip, [r1, #8]
   23804:	ldr	r2, [r0, #8]
   23808:	eor	r2, r2, ip
   2380c:	orr	r3, r3, r2
   23810:	ldr	ip, [r1, #12]
   23814:	ldr	r2, [r0, #12]
   23818:	eor	r2, r2, ip
   2381c:	orr	r3, r3, r2
   23820:	ldr	ip, [r1, #16]
   23824:	ldr	r2, [r0, #16]
   23828:	ldr	r1, [r1, #20]
   2382c:	eor	r2, r2, ip
   23830:	orr	r3, r3, r2
   23834:	ldr	r2, [r0, #20]
   23838:	eor	r2, r2, r1
   2383c:	orrs	r3, r3, r2
   23840:	moveq	r0, #1
   23844:	movne	r0, #0
   23848:	bx	lr
   2384c:	mov	r0, #0
   23850:	bx	lr
   23854:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23858:	ldr	ip, [sp, #80]	; 0x50
   2385c:	ldrd	sl, [sp, #60]	; 0x3c
   23860:	cmp	ip, #0
   23864:	ldrd	r8, [sp, #68]	; 0x44
   23868:	ldr	r1, [sp, #76]	; 0x4c
   2386c:	ldr	lr, [r0, #144]	; 0x90
   23870:	bge	23c38 <__assert_fail@plt+0x1154c>
   23874:	mvn	ip, lr
   23878:	sub	r4, lr, r1
   2387c:	lsr	ip, ip, #31
   23880:	cmp	ip, r1, lsr #31
   23884:	bne	238b0 <__assert_fail@plt+0x111c4>
   23888:	cmp	lr, #0
   2388c:	bge	23b04 <__assert_fail@plt+0x11418>
   23890:	add	ip, lr, #-2147483648	; 0x80000000
   23894:	cmp	ip, r1
   23898:	movge	ip, #0
   2389c:	movlt	ip, #1
   238a0:	cmp	ip, #0
   238a4:	strne	r4, [r0, #144]	; 0x90
   238a8:	movne	r1, #1
   238ac:	bne	238b8 <__assert_fail@plt+0x111cc>
   238b0:	mov	r1, #0
   238b4:	str	r4, [r0, #144]	; 0x90
   238b8:	ldrd	r4, [r0, #136]	; 0x88
   238bc:	mvn	ip, r5
   238c0:	lsr	ip, ip, #31
   238c4:	cmp	ip, r9, lsr #31
   238c8:	bne	23b2c <__assert_fail@plt+0x11440>
   238cc:	cmp	r4, #0
   238d0:	sbcs	ip, r5, #0
   238d4:	bge	23b18 <__assert_fail@plt+0x1142c>
   238d8:	adds	r6, r4, #0
   238dc:	adc	r7, r5, #-2147483648	; 0x80000000
   238e0:	cmp	r6, r8
   238e4:	sbcs	ip, r7, r9
   238e8:	movlt	ip, #1
   238ec:	movge	ip, #0
   238f0:	cmp	ip, #0
   238f4:	beq	23b2c <__assert_fail@plt+0x11440>
   238f8:	subs	r4, r4, r8
   238fc:	sbc	r5, r5, r9
   23900:	mov	ip, #1
   23904:	strd	r4, [r0, #136]	; 0x88
   23908:	ldrd	r4, [r0, #128]	; 0x80
   2390c:	orr	r1, r1, ip
   23910:	mvn	ip, r5
   23914:	lsr	ip, ip, #31
   23918:	cmp	ip, fp, lsr #31
   2391c:	bne	23b54 <__assert_fail@plt+0x11468>
   23920:	cmp	r4, #0
   23924:	sbcs	ip, r5, #0
   23928:	bge	23b40 <__assert_fail@plt+0x11454>
   2392c:	adds	r6, r4, #0
   23930:	adc	r7, r5, #-2147483648	; 0x80000000
   23934:	cmp	r6, sl
   23938:	sbcs	ip, r7, fp
   2393c:	movlt	ip, #1
   23940:	movge	ip, #0
   23944:	cmp	ip, #0
   23948:	beq	23b54 <__assert_fail@plt+0x11468>
   2394c:	subs	r4, r4, sl
   23950:	sbc	r5, r5, fp
   23954:	mov	ip, #1
   23958:	strd	r4, [r0, #128]	; 0x80
   2395c:	ldrd	r4, [r0, #120]	; 0x78
   23960:	orr	r1, r1, ip
   23964:	ldr	lr, [sp, #56]	; 0x38
   23968:	mvn	ip, r5
   2396c:	lsr	ip, ip, #31
   23970:	cmp	ip, lr, lsr #31
   23974:	bne	23b80 <__assert_fail@plt+0x11494>
   23978:	cmp	r4, #0
   2397c:	sbcs	ip, r5, #0
   23980:	bge	23b68 <__assert_fail@plt+0x1147c>
   23984:	ldrd	r8, [sp, #52]	; 0x34
   23988:	adds	r6, r4, #0
   2398c:	adc	r7, r5, #-2147483648	; 0x80000000
   23990:	cmp	r6, r8
   23994:	sbcs	ip, r7, r9
   23998:	movlt	ip, #1
   2399c:	movge	ip, #0
   239a0:	cmp	ip, #0
   239a4:	beq	23b80 <__assert_fail@plt+0x11494>
   239a8:	ldrd	r6, [sp, #52]	; 0x34
   239ac:	mov	ip, #1
   239b0:	subs	r6, r4, r6
   239b4:	sbc	r7, r5, r7
   239b8:	mov	r4, r6
   239bc:	mov	r5, r7
   239c0:	strd	r4, [r0, #120]	; 0x78
   239c4:	ldrd	r4, [r0, #112]	; 0x70
   239c8:	orr	r1, r1, ip
   239cc:	ldr	lr, [sp, #48]	; 0x30
   239d0:	mvn	ip, r5
   239d4:	lsr	ip, ip, #31
   239d8:	cmp	ip, lr, lsr #31
   239dc:	bne	23bb8 <__assert_fail@plt+0x114cc>
   239e0:	cmp	r4, #0
   239e4:	sbcs	ip, r5, #0
   239e8:	bge	23ba0 <__assert_fail@plt+0x114b4>
   239ec:	ldrd	r8, [sp, #44]	; 0x2c
   239f0:	adds	r6, r4, #0
   239f4:	adc	r7, r5, #-2147483648	; 0x80000000
   239f8:	cmp	r6, r8
   239fc:	sbcs	ip, r7, r9
   23a00:	movlt	ip, #1
   23a04:	movge	ip, #0
   23a08:	cmp	ip, #0
   23a0c:	beq	23bb8 <__assert_fail@plt+0x114cc>
   23a10:	ldrd	r6, [sp, #44]	; 0x2c
   23a14:	mov	ip, #1
   23a18:	subs	r6, r4, r6
   23a1c:	sbc	r7, r5, r7
   23a20:	mov	r4, r6
   23a24:	mov	r5, r7
   23a28:	strd	r4, [r0, #112]	; 0x70
   23a2c:	ldrd	r4, [r0, #104]	; 0x68
   23a30:	orr	r1, r1, ip
   23a34:	ldr	lr, [sp, #40]	; 0x28
   23a38:	mvn	ip, r5
   23a3c:	lsr	ip, ip, #31
   23a40:	cmp	ip, lr, lsr #31
   23a44:	bne	23bf0 <__assert_fail@plt+0x11504>
   23a48:	cmp	r4, #0
   23a4c:	sbcs	ip, r5, #0
   23a50:	bge	23bd8 <__assert_fail@plt+0x114ec>
   23a54:	ldrd	r8, [sp, #36]	; 0x24
   23a58:	adds	r6, r4, #0
   23a5c:	adc	r7, r5, #-2147483648	; 0x80000000
   23a60:	cmp	r6, r8
   23a64:	sbcs	ip, r7, r9
   23a68:	movlt	ip, #1
   23a6c:	movge	ip, #0
   23a70:	cmp	ip, #0
   23a74:	beq	23bf0 <__assert_fail@plt+0x11504>
   23a78:	ldrd	r6, [sp, #36]	; 0x24
   23a7c:	mov	ip, #1
   23a80:	subs	r6, r4, r6
   23a84:	sbc	r7, r5, r7
   23a88:	mov	r4, r6
   23a8c:	mov	r5, r7
   23a90:	strd	r4, [r0, #104]	; 0x68
   23a94:	ldrd	r4, [r0, #96]	; 0x60
   23a98:	orr	r1, r1, ip
   23a9c:	mvn	ip, r5
   23aa0:	lsr	ip, ip, #31
   23aa4:	cmp	ip, r3, lsr #31
   23aa8:	bne	23c24 <__assert_fail@plt+0x11538>
   23aac:	cmp	r4, #0
   23ab0:	sbcs	ip, r5, #0
   23ab4:	bge	23c10 <__assert_fail@plt+0x11524>
   23ab8:	adds	r6, r4, #0
   23abc:	adc	r7, r5, #-2147483648	; 0x80000000
   23ac0:	cmp	r6, r2
   23ac4:	sbcs	ip, r7, r3
   23ac8:	movlt	ip, #1
   23acc:	movge	ip, #0
   23ad0:	cmp	ip, #0
   23ad4:	beq	23c24 <__assert_fail@plt+0x11538>
   23ad8:	subs	r2, r4, r2
   23adc:	sbc	r3, r5, r3
   23ae0:	strd	r2, [r0, #96]	; 0x60
   23ae4:	mov	r3, #1
   23ae8:	orr	r1, r1, r3
   23aec:	cmp	r1, #0
   23af0:	moveq	r3, #1
   23af4:	strbeq	r3, [r0, #153]	; 0x99
   23af8:	moveq	r0, r3
   23afc:	movne	r0, #0
   23b00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b04:	sub	r1, r1, #-2147483647	; 0x80000001
   23b08:	cmp	lr, r1
   23b0c:	movle	ip, #0
   23b10:	movgt	ip, #1
   23b14:	b	238a0 <__assert_fail@plt+0x111b4>
   23b18:	subs	r6, r8, #1
   23b1c:	sbc	r7, r9, #-2147483648	; 0x80000000
   23b20:	cmp	r6, r4
   23b24:	sbcs	ip, r7, r5
   23b28:	b	238e8 <__assert_fail@plt+0x111fc>
   23b2c:	subs	r4, r4, r8
   23b30:	sbc	r5, r5, r9
   23b34:	mov	ip, #0
   23b38:	strd	r4, [r0, #136]	; 0x88
   23b3c:	b	23908 <__assert_fail@plt+0x1121c>
   23b40:	subs	r6, sl, #1
   23b44:	sbc	r7, fp, #-2147483648	; 0x80000000
   23b48:	cmp	r6, r4
   23b4c:	sbcs	ip, r7, r5
   23b50:	b	2393c <__assert_fail@plt+0x11250>
   23b54:	subs	r4, r4, sl
   23b58:	sbc	r5, r5, fp
   23b5c:	mov	ip, #0
   23b60:	strd	r4, [r0, #128]	; 0x80
   23b64:	b	2395c <__assert_fail@plt+0x11270>
   23b68:	ldrd	r6, [sp, #52]	; 0x34
   23b6c:	subs	r6, r6, #1
   23b70:	sbc	r7, r7, #-2147483648	; 0x80000000
   23b74:	cmp	r6, r4
   23b78:	sbcs	ip, r7, r5
   23b7c:	b	23998 <__assert_fail@plt+0x112ac>
   23b80:	ldrd	r6, [sp, #52]	; 0x34
   23b84:	mov	ip, #0
   23b88:	subs	r6, r4, r6
   23b8c:	sbc	r7, r5, r7
   23b90:	mov	r4, r6
   23b94:	mov	r5, r7
   23b98:	strd	r4, [r0, #120]	; 0x78
   23b9c:	b	239c4 <__assert_fail@plt+0x112d8>
   23ba0:	ldrd	r6, [sp, #44]	; 0x2c
   23ba4:	subs	r6, r6, #1
   23ba8:	sbc	r7, r7, #-2147483648	; 0x80000000
   23bac:	cmp	r6, r4
   23bb0:	sbcs	ip, r7, r5
   23bb4:	b	23a00 <__assert_fail@plt+0x11314>
   23bb8:	ldrd	r6, [sp, #44]	; 0x2c
   23bbc:	mov	ip, #0
   23bc0:	subs	r6, r4, r6
   23bc4:	sbc	r7, r5, r7
   23bc8:	mov	r4, r6
   23bcc:	mov	r5, r7
   23bd0:	strd	r4, [r0, #112]	; 0x70
   23bd4:	b	23a2c <__assert_fail@plt+0x11340>
   23bd8:	ldrd	r6, [sp, #36]	; 0x24
   23bdc:	subs	r6, r6, #1
   23be0:	sbc	r7, r7, #-2147483648	; 0x80000000
   23be4:	cmp	r6, r4
   23be8:	sbcs	ip, r7, r5
   23bec:	b	23a68 <__assert_fail@plt+0x1137c>
   23bf0:	ldrd	r6, [sp, #36]	; 0x24
   23bf4:	mov	ip, #0
   23bf8:	subs	r6, r4, r6
   23bfc:	sbc	r7, r5, r7
   23c00:	mov	r4, r6
   23c04:	mov	r5, r7
   23c08:	strd	r4, [r0, #104]	; 0x68
   23c0c:	b	23a94 <__assert_fail@plt+0x113a8>
   23c10:	subs	r6, r2, #1
   23c14:	sbc	r7, r3, #-2147483648	; 0x80000000
   23c18:	cmp	r6, r4
   23c1c:	sbcs	ip, r7, r5
   23c20:	b	23ac8 <__assert_fail@plt+0x113dc>
   23c24:	subs	r2, r4, r2
   23c28:	sbc	r3, r5, r3
   23c2c:	strd	r2, [r0, #96]	; 0x60
   23c30:	mov	r3, #0
   23c34:	b	23ae8 <__assert_fail@plt+0x113fc>
   23c38:	cmp	r1, #0
   23c3c:	bge	23e6c <__assert_fail@plt+0x11780>
   23c40:	rsb	ip, r1, #-2147483648	; 0x80000000
   23c44:	cmp	lr, ip
   23c48:	movge	ip, #0
   23c4c:	movlt	ip, #1
   23c50:	cmp	ip, #0
   23c54:	beq	23e8c <__assert_fail@plt+0x117a0>
   23c58:	ldr	ip, [r0, #144]	; 0x90
   23c5c:	add	r1, ip, r1
   23c60:	str	r1, [r0, #144]	; 0x90
   23c64:	mov	r1, #1
   23c68:	cmp	r8, #0
   23c6c:	sbcs	ip, r9, #0
   23c70:	ldrd	r4, [r0, #136]	; 0x88
   23c74:	bge	23ea0 <__assert_fail@plt+0x117b4>
   23c78:	mov	r6, #0
   23c7c:	subs	r6, r6, r8
   23c80:	mov	r7, #-2147483648	; 0x80000000
   23c84:	sbc	r7, r7, r9
   23c88:	cmp	r4, r6
   23c8c:	sbcs	ip, r5, r7
   23c90:	movlt	ip, #1
   23c94:	movge	ip, #0
   23c98:	cmp	ip, #0
   23c9c:	beq	23ec8 <__assert_fail@plt+0x117dc>
   23ca0:	ldrd	r4, [r0, #136]	; 0x88
   23ca4:	mov	ip, #1
   23ca8:	adds	r4, r4, r8
   23cac:	adc	r5, r5, r9
   23cb0:	strd	r4, [r0, #136]	; 0x88
   23cb4:	cmp	sl, #0
   23cb8:	orr	r1, r1, ip
   23cbc:	sbcs	ip, fp, #0
   23cc0:	ldrd	r4, [r0, #128]	; 0x80
   23cc4:	bge	23ee0 <__assert_fail@plt+0x117f4>
   23cc8:	mov	r6, #0
   23ccc:	subs	r6, r6, sl
   23cd0:	mov	r7, #-2147483648	; 0x80000000
   23cd4:	sbc	r7, r7, fp
   23cd8:	cmp	r4, r6
   23cdc:	sbcs	ip, r5, r7
   23ce0:	movlt	ip, #1
   23ce4:	movge	ip, #0
   23ce8:	cmp	ip, #0
   23cec:	beq	23f08 <__assert_fail@plt+0x1181c>
   23cf0:	ldrd	r4, [r0, #128]	; 0x80
   23cf4:	mov	ip, #1
   23cf8:	adds	r4, r4, sl
   23cfc:	adc	r5, r5, fp
   23d00:	strd	r4, [r0, #128]	; 0x80
   23d04:	ldrd	r4, [sp, #52]	; 0x34
   23d08:	orr	r1, r1, ip
   23d0c:	cmp	r4, #0
   23d10:	sbcs	ip, r5, #0
   23d14:	ldrd	r4, [r0, #120]	; 0x78
   23d18:	bge	23f20 <__assert_fail@plt+0x11834>
   23d1c:	ldrd	r8, [sp, #52]	; 0x34
   23d20:	mov	r6, #0
   23d24:	mov	r7, #-2147483648	; 0x80000000
   23d28:	subs	r8, r6, r8
   23d2c:	sbc	r9, r7, r9
   23d30:	cmp	r4, r8
   23d34:	sbcs	ip, r5, r9
   23d38:	movlt	ip, #1
   23d3c:	movge	ip, #0
   23d40:	cmp	ip, #0
   23d44:	beq	23f4c <__assert_fail@plt+0x11860>
   23d48:	ldrd	r6, [sp, #52]	; 0x34
   23d4c:	mov	ip, #1
   23d50:	adds	r6, r6, r4
   23d54:	adc	r7, r7, r5
   23d58:	mov	r4, r6
   23d5c:	mov	r5, r7
   23d60:	strd	r4, [r0, #120]	; 0x78
   23d64:	ldrd	r4, [sp, #44]	; 0x2c
   23d68:	orr	r1, r1, ip
   23d6c:	cmp	r4, #0
   23d70:	sbcs	ip, r5, #0
   23d74:	ldrd	r4, [r0, #112]	; 0x70
   23d78:	bge	23f6c <__assert_fail@plt+0x11880>
   23d7c:	ldrd	r8, [sp, #44]	; 0x2c
   23d80:	mov	r6, #0
   23d84:	mov	r7, #-2147483648	; 0x80000000
   23d88:	subs	r8, r6, r8
   23d8c:	sbc	r9, r7, r9
   23d90:	cmp	r4, r8
   23d94:	sbcs	ip, r5, r9
   23d98:	movlt	ip, #1
   23d9c:	movge	ip, #0
   23da0:	cmp	ip, #0
   23da4:	beq	23f98 <__assert_fail@plt+0x118ac>
   23da8:	ldrd	r6, [sp, #44]	; 0x2c
   23dac:	mov	ip, #1
   23db0:	adds	r6, r6, r4
   23db4:	adc	r7, r7, r5
   23db8:	mov	r4, r6
   23dbc:	mov	r5, r7
   23dc0:	strd	r4, [r0, #112]	; 0x70
   23dc4:	ldrd	r4, [sp, #36]	; 0x24
   23dc8:	orr	r1, r1, ip
   23dcc:	cmp	r4, #0
   23dd0:	sbcs	ip, r5, #0
   23dd4:	ldrd	r4, [r0, #104]	; 0x68
   23dd8:	bge	23fb8 <__assert_fail@plt+0x118cc>
   23ddc:	ldrd	r8, [sp, #36]	; 0x24
   23de0:	mov	r6, #0
   23de4:	mov	r7, #-2147483648	; 0x80000000
   23de8:	subs	r8, r6, r8
   23dec:	sbc	r9, r7, r9
   23df0:	cmp	r4, r8
   23df4:	sbcs	ip, r5, r9
   23df8:	movlt	ip, #1
   23dfc:	movge	ip, #0
   23e00:	cmp	ip, #0
   23e04:	beq	23fe4 <__assert_fail@plt+0x118f8>
   23e08:	ldrd	r6, [sp, #36]	; 0x24
   23e0c:	mov	ip, #1
   23e10:	adds	r6, r6, r4
   23e14:	adc	r7, r7, r5
   23e18:	mov	r4, r6
   23e1c:	mov	r5, r7
   23e20:	strd	r4, [r0, #104]	; 0x68
   23e24:	cmp	r2, #0
   23e28:	orr	r1, r1, ip
   23e2c:	sbcs	ip, r3, #0
   23e30:	ldrd	r4, [r0, #96]	; 0x60
   23e34:	bge	24004 <__assert_fail@plt+0x11918>
   23e38:	mov	r6, #0
   23e3c:	subs	r6, r6, r2
   23e40:	mov	r7, #-2147483648	; 0x80000000
   23e44:	sbc	r7, r7, r3
   23e48:	cmp	r4, r6
   23e4c:	sbcs	ip, r5, r7
   23e50:	movlt	ip, #1
   23e54:	movge	ip, #0
   23e58:	cmp	ip, #0
   23e5c:	beq	2402c <__assert_fail@plt+0x11940>
   23e60:	adds	r2, r2, r4
   23e64:	adc	r3, r3, r5
   23e68:	b	23ae0 <__assert_fail@plt+0x113f4>
   23e6c:	cmp	lr, #0
   23e70:	blt	23e8c <__assert_fail@plt+0x117a0>
   23e74:	mvn	ip, #-2147483648	; 0x80000000
   23e78:	sub	ip, ip, r1
   23e7c:	cmp	lr, ip
   23e80:	movle	ip, #0
   23e84:	movgt	ip, #1
   23e88:	b	23c50 <__assert_fail@plt+0x11564>
   23e8c:	ldr	ip, [r0, #144]	; 0x90
   23e90:	add	r1, ip, r1
   23e94:	str	r1, [r0, #144]	; 0x90
   23e98:	mov	r1, #0
   23e9c:	b	23c68 <__assert_fail@plt+0x1157c>
   23ea0:	cmp	r4, #0
   23ea4:	sbcs	ip, r5, #0
   23ea8:	blt	23ec8 <__assert_fail@plt+0x117dc>
   23eac:	mvn	r6, #0
   23eb0:	subs	r6, r6, r8
   23eb4:	mvn	r7, #-2147483648	; 0x80000000
   23eb8:	sbc	r7, r7, r9
   23ebc:	cmp	r6, r4
   23ec0:	sbcs	ip, r7, r5
   23ec4:	b	23c90 <__assert_fail@plt+0x115a4>
   23ec8:	ldrd	r4, [r0, #136]	; 0x88
   23ecc:	mov	ip, #0
   23ed0:	adds	r4, r4, r8
   23ed4:	adc	r5, r5, r9
   23ed8:	strd	r4, [r0, #136]	; 0x88
   23edc:	b	23cb4 <__assert_fail@plt+0x115c8>
   23ee0:	cmp	r4, #0
   23ee4:	sbcs	ip, r5, #0
   23ee8:	blt	23f08 <__assert_fail@plt+0x1181c>
   23eec:	mvn	r6, #0
   23ef0:	subs	r6, r6, sl
   23ef4:	mvn	r7, #-2147483648	; 0x80000000
   23ef8:	sbc	r7, r7, fp
   23efc:	cmp	r6, r4
   23f00:	sbcs	ip, r7, r5
   23f04:	b	23ce0 <__assert_fail@plt+0x115f4>
   23f08:	ldrd	r4, [r0, #128]	; 0x80
   23f0c:	mov	ip, #0
   23f10:	adds	r4, r4, sl
   23f14:	adc	r5, r5, fp
   23f18:	strd	r4, [r0, #128]	; 0x80
   23f1c:	b	23d04 <__assert_fail@plt+0x11618>
   23f20:	cmp	r4, #0
   23f24:	sbcs	ip, r5, #0
   23f28:	blt	23f4c <__assert_fail@plt+0x11860>
   23f2c:	ldrd	r8, [sp, #52]	; 0x34
   23f30:	mvn	r6, #0
   23f34:	mvn	r7, #-2147483648	; 0x80000000
   23f38:	subs	r8, r6, r8
   23f3c:	sbc	r9, r7, r9
   23f40:	cmp	r8, r4
   23f44:	sbcs	ip, r9, r5
   23f48:	b	23d38 <__assert_fail@plt+0x1164c>
   23f4c:	ldrd	r6, [sp, #52]	; 0x34
   23f50:	mov	ip, #0
   23f54:	adds	r6, r6, r4
   23f58:	adc	r7, r7, r5
   23f5c:	mov	r4, r6
   23f60:	mov	r5, r7
   23f64:	strd	r4, [r0, #120]	; 0x78
   23f68:	b	23d64 <__assert_fail@plt+0x11678>
   23f6c:	cmp	r4, #0
   23f70:	sbcs	ip, r5, #0
   23f74:	blt	23f98 <__assert_fail@plt+0x118ac>
   23f78:	ldrd	r8, [sp, #44]	; 0x2c
   23f7c:	mvn	r6, #0
   23f80:	mvn	r7, #-2147483648	; 0x80000000
   23f84:	subs	r8, r6, r8
   23f88:	sbc	r9, r7, r9
   23f8c:	cmp	r8, r4
   23f90:	sbcs	ip, r9, r5
   23f94:	b	23d98 <__assert_fail@plt+0x116ac>
   23f98:	ldrd	r6, [sp, #44]	; 0x2c
   23f9c:	mov	ip, #0
   23fa0:	adds	r6, r6, r4
   23fa4:	adc	r7, r7, r5
   23fa8:	mov	r4, r6
   23fac:	mov	r5, r7
   23fb0:	strd	r4, [r0, #112]	; 0x70
   23fb4:	b	23dc4 <__assert_fail@plt+0x116d8>
   23fb8:	cmp	r4, #0
   23fbc:	sbcs	ip, r5, #0
   23fc0:	blt	23fe4 <__assert_fail@plt+0x118f8>
   23fc4:	ldrd	r8, [sp, #36]	; 0x24
   23fc8:	mvn	r6, #0
   23fcc:	mvn	r7, #-2147483648	; 0x80000000
   23fd0:	subs	r8, r6, r8
   23fd4:	sbc	r9, r7, r9
   23fd8:	cmp	r8, r4
   23fdc:	sbcs	ip, r9, r5
   23fe0:	b	23df8 <__assert_fail@plt+0x1170c>
   23fe4:	ldrd	r6, [sp, #36]	; 0x24
   23fe8:	mov	ip, #0
   23fec:	adds	r6, r6, r4
   23ff0:	adc	r7, r7, r5
   23ff4:	mov	r4, r6
   23ff8:	mov	r5, r7
   23ffc:	strd	r4, [r0, #104]	; 0x68
   24000:	b	23e24 <__assert_fail@plt+0x11738>
   24004:	cmp	r4, #0
   24008:	sbcs	ip, r5, #0
   2400c:	blt	2402c <__assert_fail@plt+0x11940>
   24010:	mvn	r6, #0
   24014:	subs	r6, r6, r2
   24018:	mvn	r7, #-2147483648	; 0x80000000
   2401c:	sbc	r7, r7, r3
   24020:	cmp	r6, r4
   24024:	sbcs	ip, r7, r5
   24028:	b	23e50 <__assert_fail@plt+0x11764>
   2402c:	adds	r2, r2, r4
   24030:	adc	r3, r3, r5
   24034:	b	23c2c <__assert_fail@plt+0x11540>
   24038:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2403c:	mov	r5, r3
   24040:	ldr	r3, [sp, #32]
   24044:	mov	r8, r0
   24048:	cmp	r3, #2
   2404c:	mov	r9, r1
   24050:	mov	r4, r2
   24054:	ldrd	r6, [sp, #40]	; 0x28
   24058:	bgt	240dc <__assert_fail@plt+0x119f0>
   2405c:	cmp	r6, #0
   24060:	sbcs	r3, r7, #0
   24064:	bge	240e8 <__assert_fail@plt+0x119fc>
   24068:	mov	r3, #100	; 0x64
   2406c:	mul	r2, r3, r5
   24070:	umull	r4, r5, r4, r3
   24074:	add	r5, r2, r5
   24078:	mov	r2, #100	; 0x64
   2407c:	mov	r3, #0
   24080:	mov	r0, r4
   24084:	mov	r1, r5
   24088:	bl	39878 <__assert_fail@plt+0x2718c>
   2408c:	mov	r3, #60	; 0x3c
   24090:	mov	r2, #100	; 0x64
   24094:	umull	r6, r7, r0, r3
   24098:	mov	r0, r4
   2409c:	mla	r7, r3, r1, r7
   240a0:	mov	r3, #0
   240a4:	mov	r1, r5
   240a8:	bl	39878 <__assert_fail@plt+0x2718c>
   240ac:	adds	r2, r2, r6
   240b0:	adc	r3, r3, r7
   240b4:	adds	r0, r2, #1440	; 0x5a0
   240b8:	adc	r1, r3, #0
   240bc:	cmp	r1, #0
   240c0:	cmpeq	r0, #2880	; 0xb40
   240c4:	bhi	24180 <__assert_fail@plt+0x11a94>
   240c8:	mov	r6, #60	; 0x3c
   240cc:	mov	r0, #1
   240d0:	mul	r2, r6, r2
   240d4:	str	r2, [r8]
   240d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   240dc:	cmp	r6, #0
   240e0:	sbcs	r3, r7, #0
   240e4:	blt	24078 <__assert_fail@plt+0x1198c>
   240e8:	cmp	r4, #0
   240ec:	sbcs	r3, r5, #0
   240f0:	bge	24188 <__assert_fail@plt+0x11a9c>
   240f4:	mvn	r3, #0
   240f8:	cmp	r5, r3
   240fc:	mvn	r2, #0
   24100:	cmpeq	r4, r2
   24104:	moveq	r1, #0
   24108:	beq	24130 <__assert_fail@plt+0x11a44>
   2410c:	mov	r3, r5
   24110:	mov	r2, r4
   24114:	mov	r0, #0
   24118:	mov	r1, #-2147483648	; 0x80000000
   2411c:	bl	39878 <__assert_fail@plt+0x2718c>
   24120:	cmp	r0, #60	; 0x3c
   24124:	sbcs	r3, r1, #0
   24128:	movlt	r1, #1
   2412c:	movge	r1, #0
   24130:	mov	r0, #60	; 0x3c
   24134:	cmp	r1, #0
   24138:	umull	r2, r3, r4, r0
   2413c:	movne	r1, #1
   24140:	cmp	r9, #0
   24144:	mla	r3, r0, r5, r3
   24148:	beq	241ac <__assert_fail@plt+0x11ac0>
   2414c:	cmp	r2, #0
   24150:	sbcs	r0, r3, #0
   24154:	bge	2419c <__assert_fail@plt+0x11ab0>
   24158:	adds	r4, r2, #0
   2415c:	adc	r5, r3, #-2147483648	; 0x80000000
   24160:	cmp	r4, r6
   24164:	sbcs	r0, r5, r7
   24168:	bge	2419c <__assert_fail@plt+0x11ab0>
   2416c:	subs	r2, r2, r6
   24170:	sbc	r3, r3, r7
   24174:	mov	r0, #1
   24178:	orrs	r1, r1, r0
   2417c:	beq	240b4 <__assert_fail@plt+0x119c8>
   24180:	mov	r0, #0
   24184:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24188:	add	r3, pc, #96	; 0x60
   2418c:	ldrd	r2, [r3]
   24190:	cmp	r2, r4
   24194:	sbcs	r3, r3, r5
   24198:	b	24128 <__assert_fail@plt+0x11a3c>
   2419c:	subs	r2, r2, r6
   241a0:	sbc	r3, r3, r7
   241a4:	mov	r0, #0
   241a8:	b	24178 <__assert_fail@plt+0x11a8c>
   241ac:	cmp	r2, #0
   241b0:	sbcs	r0, r3, #0
   241b4:	blt	241e0 <__assert_fail@plt+0x11af4>
   241b8:	mvn	r4, #0
   241bc:	subs	r4, r4, r6
   241c0:	mvn	r5, #-2147483648	; 0x80000000
   241c4:	sbc	r5, r5, r7
   241c8:	cmp	r4, r2
   241cc:	sbcs	r0, r5, r3
   241d0:	bge	241e0 <__assert_fail@plt+0x11af4>
   241d4:	adds	r2, r2, r6
   241d8:	adc	r3, r3, r7
   241dc:	b	24174 <__assert_fail@plt+0x11a88>
   241e0:	adds	r2, r2, r6
   241e4:	adc	r3, r3, r7
   241e8:	b	241a4 <__assert_fail@plt+0x11ab8>
   241ec:	nop			; (mov r0, r0)
   241f0:	eorcs	r2, r2, #536870914	; 0x20000002
   241f4:	eoreq	r2, r2, #536870914	; 0x20000002
   241f8:	push	{r4, r5, r6, lr}
   241fc:	mov	r6, r0
   24200:	ldr	r4, [pc, #128]	; 24288 <__assert_fail@plt+0x11b9c>
   24204:	mov	r5, r1
   24208:	ldr	r1, [r4]
   2420c:	cmp	r1, #0
   24210:	bne	24240 <__assert_fail@plt+0x11b54>
   24214:	add	r4, r6, #188	; 0xbc
   24218:	ldr	r1, [r4]
   2421c:	cmp	r1, #0
   24220:	bne	24258 <__assert_fail@plt+0x11b6c>
   24224:	ldr	r4, [pc, #96]	; 2428c <__assert_fail@plt+0x11ba0>
   24228:	ldr	r1, [r4]
   2422c:	cmp	r1, #0
   24230:	bne	24270 <__assert_fail@plt+0x11b84>
   24234:	mov	r4, r1
   24238:	mov	r0, r4
   2423c:	pop	{r4, r5, r6, pc}
   24240:	mov	r0, r5
   24244:	bl	11ffc <strcmp@plt>
   24248:	cmp	r0, #0
   2424c:	beq	24238 <__assert_fail@plt+0x11b4c>
   24250:	add	r4, r4, #12
   24254:	b	24208 <__assert_fail@plt+0x11b1c>
   24258:	mov	r0, r5
   2425c:	bl	11ffc <strcmp@plt>
   24260:	cmp	r0, #0
   24264:	beq	24238 <__assert_fail@plt+0x11b4c>
   24268:	add	r4, r4, #12
   2426c:	b	24218 <__assert_fail@plt+0x11b2c>
   24270:	mov	r0, r5
   24274:	bl	11ffc <strcmp@plt>
   24278:	cmp	r0, #0
   2427c:	beq	24238 <__assert_fail@plt+0x11b4c>
   24280:	add	r4, r4, #12
   24284:	b	24228 <__assert_fail@plt+0x11b3c>
   24288:	andeq	sp, r3, r0, lsl #31
   2428c:			; <UNDEFINED> instruction: 0x0003dfb0
   24290:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24294:	sub	sp, sp, #1408	; 0x580
   24298:	sub	sp, sp, #12
   2429c:	add	r3, sp, #144	; 0x90
   242a0:	str	r3, [sp, #88]	; 0x58
   242a4:	mov	r3, #0
   242a8:	str	r3, [sp, #92]	; 0x5c
   242ac:	mov	sl, r3
   242b0:	mov	r5, r0
   242b4:	mvn	r3, #1
   242b8:	add	r4, sp, #296	; 0x128
   242bc:	str	r3, [sp, #72]	; 0x48
   242c0:	add	r3, sp, #240	; 0xf0
   242c4:	str	r3, [sp, #56]	; 0x38
   242c8:	ldr	r3, [sp, #88]	; 0x58
   242cc:	ldr	r2, [sp, #88]	; 0x58
   242d0:	strh	sl, [r3]
   242d4:	add	r3, sp, #182	; 0xb6
   242d8:	cmp	r3, r2
   242dc:	bls	257c8 <__assert_fail@plt+0x130dc>
   242e0:	cmp	sl, #12
   242e4:	beq	257d0 <__assert_fail@plt+0x130e4>
   242e8:	ldr	r3, [pc, #3604]	; 25104 <__assert_fail@plt+0x12a18>
   242ec:	add	r3, sl, r3
   242f0:	ldrsb	r3, [r3, #12]
   242f4:	cmn	r3, #93	; 0x5d
   242f8:	str	r3, [sp, #48]	; 0x30
   242fc:	beq	247e8 <__assert_fail@plt+0x120fc>
   24300:	ldr	r3, [sp, #72]	; 0x48
   24304:	cmn	r3, #2
   24308:	bne	25900 <__assert_fail@plt+0x13214>
   2430c:	ldr	r1, [pc, #3572]	; 25108 <__assert_fail@plt+0x12a1c>
   24310:	mov	r2, #1
   24314:	ldr	r8, [r5]
   24318:	ldrb	r6, [r8]
   2431c:	sub	r3, r6, #9
   24320:	cmp	r3, #23
   24324:	bhi	24330 <__assert_fail@plt+0x11c44>
   24328:	ands	r3, r1, r2, lsl r3
   2432c:	bne	257d8 <__assert_fail@plt+0x130ec>
   24330:	sub	r3, r6, #48	; 0x30
   24334:	cmp	r3, #9
   24338:	sub	r3, r6, #43	; 0x2b
   2433c:	bhi	257e4 <__assert_fail@plt+0x130f8>
   24340:	tst	r3, #253	; 0xfd
   24344:	bne	24384 <__assert_fail@plt+0x11c98>
   24348:	cmp	r6, #45	; 0x2d
   2434c:	mvneq	r7, #0
   24350:	movne	r7, #1
   24354:	add	r8, r8, #1
   24358:	str	r8, [r5]
   2435c:	ldrb	r6, [r8]
   24360:	sub	r3, r6, #9
   24364:	cmp	r3, #23
   24368:	bhi	24374 <__assert_fail@plt+0x11c88>
   2436c:	ands	r3, r1, r2, lsl r3
   24370:	bne	24354 <__assert_fail@plt+0x11c68>
   24374:	sub	r3, r6, #48	; 0x30
   24378:	cmp	r3, #9
   2437c:	bhi	24314 <__assert_fail@plt+0x11c28>
   24380:	b	24388 <__assert_fail@plt+0x11c9c>
   24384:	mov	r7, #0
   24388:	mov	r9, #0
   2438c:	mov	fp, #-2147483648	; 0x80000000
   24390:	mov	r3, #10
   24394:	mvn	r2, #-2147483648	; 0x80000000
   24398:	cmp	r9, #0
   2439c:	bge	24480 <__assert_fail@plt+0x11d94>
   243a0:	cmn	r9, #1
   243a4:	moveq	r0, #0
   243a8:	beq	243d4 <__assert_fail@plt+0x11ce8>
   243ac:	mov	r1, r9
   243b0:	mov	r0, fp
   243b4:	str	r2, [sp, #64]	; 0x40
   243b8:	str	r3, [sp, #60]	; 0x3c
   243bc:	bl	39280 <__assert_fail@plt+0x26b94>
   243c0:	ldr	r3, [sp, #60]	; 0x3c
   243c4:	ldr	r2, [sp, #64]	; 0x40
   243c8:	cmp	r0, #9
   243cc:	movgt	r0, #0
   243d0:	movle	r0, #1
   243d4:	cmp	r0, #0
   243d8:	bne	247e0 <__assert_fail@plt+0x120f4>
   243dc:	cmn	r7, #1
   243e0:	mul	r9, r3, r9
   243e4:	bne	24494 <__assert_fail@plt+0x11da8>
   243e8:	rsbs	r1, r6, #48	; 0x30
   243ec:	bpl	2595c <__assert_fail@plt+0x13270>
   243f0:	rsb	r1, r1, #-2147483648	; 0x80000000
   243f4:	cmp	r9, r1
   243f8:	movge	r1, #0
   243fc:	movlt	r1, #1
   24400:	cmp	r1, #0
   24404:	bne	247e0 <__assert_fail@plt+0x120f4>
   24408:	cmn	r7, #1
   2440c:	rsbeq	r6, r6, #48	; 0x30
   24410:	subne	r6, r6, #48	; 0x30
   24414:	add	r9, r9, r6
   24418:	ldrb	r6, [r8, #1]!
   2441c:	sub	r1, r6, #48	; 0x30
   24420:	cmp	r1, #9
   24424:	bls	24398 <__assert_fail@plt+0x11cac>
   24428:	and	r6, r6, #253	; 0xfd
   2442c:	cmp	r6, #44	; 0x2c
   24430:	beq	244b8 <__assert_fail@plt+0x11dcc>
   24434:	lsr	r3, r7, #31
   24438:	mov	r2, r9
   2443c:	strb	r3, [sp, #184]	; 0xb8
   24440:	asr	r3, r9, #31
   24444:	cmp	r7, #0
   24448:	strd	r2, [sp, #104]	; 0x68
   2444c:	ldr	r3, [r5]
   24450:	ldr	r2, [pc, #3252]	; 2510c <__assert_fail@plt+0x12a20>
   24454:	sub	r3, r8, r3
   24458:	str	r3, [sp, #100]	; 0x64
   2445c:	ldr	r3, [pc, #3244]	; 25110 <__assert_fail@plt+0x12a24>
   24460:	str	r8, [r5]
   24464:	movne	r2, r3
   24468:	str	r2, [sp, #72]	; 0x48
   2446c:	ldr	r3, [pc, #3232]	; 25114 <__assert_fail@plt+0x12a28>
   24470:	ldr	r2, [sp, #72]	; 0x48
   24474:	add	r3, r3, r2
   24478:	ldrb	r3, [r3, #1806]	; 0x70e
   2447c:	b	246a4 <__assert_fail@plt+0x11fb8>
   24480:	ldr	r1, [pc, #3216]	; 25118 <__assert_fail@plt+0x12a2c>
   24484:	cmp	r9, r1
   24488:	movle	r0, #0
   2448c:	movgt	r0, #1
   24490:	b	243d4 <__assert_fail@plt+0x11ce8>
   24494:	cmp	r6, #47	; 0x2f
   24498:	rsble	r1, r6, #-2147483600	; 0x80000030
   2449c:	ble	243f4 <__assert_fail@plt+0x11d08>
   244a0:	cmp	r9, #0
   244a4:	sub	r1, r6, #48	; 0x30
   244a8:	subge	r1, r2, r1
   244ac:	blt	25968 <__assert_fail@plt+0x1327c>
   244b0:	cmp	r9, r1
   244b4:	b	25970 <__assert_fail@plt+0x13284>
   244b8:	ldrb	r3, [r8, #1]
   244bc:	sub	r3, r3, #48	; 0x30
   244c0:	cmp	r3, #9
   244c4:	bhi	24434 <__assert_fail@plt+0x11d48>
   244c8:	add	r8, r8, #2
   244cc:	mov	r1, #8
   244d0:	mov	r0, #10
   244d4:	ldrb	r2, [r8]
   244d8:	mul	r3, r0, r3
   244dc:	sub	r2, r2, #48	; 0x30
   244e0:	cmp	r2, #9
   244e4:	addls	r8, r8, #1
   244e8:	addls	r3, r3, r2
   244ec:	subs	r1, r1, #1
   244f0:	bne	244d4 <__assert_fail@plt+0x11de8>
   244f4:	cmn	r7, #1
   244f8:	moveq	r2, r8
   244fc:	beq	24560 <__assert_fail@plt+0x11e74>
   24500:	mov	r2, r8
   24504:	add	r8, r8, #1
   24508:	ldrb	r1, [r2]
   2450c:	sub	r1, r1, #48	; 0x30
   24510:	cmp	r1, #9
   24514:	bls	24500 <__assert_fail@plt+0x11e14>
   24518:	adds	r1, r3, #0
   2451c:	movne	r1, #1
   24520:	ands	r1, r1, r7, lsr #31
   24524:	beq	24540 <__assert_fail@plt+0x11e54>
   24528:	cmp	r9, #-2147483648	; 0x80000000
   2452c:	beq	247e0 <__assert_fail@plt+0x120f4>
   24530:	rsb	r3, r3, #998244352	; 0x3b800000
   24534:	add	r3, r3, #1753088	; 0x1ac000
   24538:	sub	r9, r9, #1
   2453c:	add	r3, r3, #2560	; 0xa00
   24540:	cmp	r7, #0
   24544:	str	r3, [sp, #188]	; 0xbc
   24548:	ldr	r3, [pc, #3020]	; 2511c <__assert_fail@plt+0x12a30>
   2454c:	movne	r3, #276	; 0x114
   24550:	str	r9, [sp, #184]	; 0xb8
   24554:	str	r2, [r5]
   24558:	str	r3, [sp, #72]	; 0x48
   2455c:	b	2446c <__assert_fail@plt+0x11d80>
   24560:	ldrb	r1, [r2]
   24564:	mov	r8, r2
   24568:	add	r2, r2, #1
   2456c:	sub	r0, r1, #48	; 0x30
   24570:	cmp	r0, #9
   24574:	bhi	24500 <__assert_fail@plt+0x11e14>
   24578:	cmp	r1, #48	; 0x30
   2457c:	beq	24560 <__assert_fail@plt+0x11e74>
   24580:	add	r3, r3, #1
   24584:	b	24500 <__assert_fail@plt+0x11e14>
   24588:	sub	r1, r3, #97	; 0x61
   2458c:	cmp	r1, #25
   24590:	subls	r3, r3, #32
   24594:	strb	r3, [r2], #1
   24598:	b	25860 <__assert_fail@plt+0x13174>
   2459c:	mov	r1, fp
   245a0:	mov	r0, r7
   245a4:	bl	11ffc <strcmp@plt>
   245a8:	cmp	r0, #0
   245ac:	beq	258ec <__assert_fail@plt+0x13200>
   245b0:	add	r6, r6, #12
   245b4:	b	25870 <__assert_fail@plt+0x13184>
   245b8:	cmp	fp, #0
   245bc:	beq	245e4 <__assert_fail@plt+0x11ef8>
   245c0:	mov	r2, r9
   245c4:	mov	r0, r7
   245c8:	bl	1268c <strncmp@plt>
   245cc:	clz	r0, r0
   245d0:	lsr	r0, r0, #5
   245d4:	cmp	r0, #0
   245d8:	bne	258ec <__assert_fail@plt+0x13200>
   245dc:	add	r6, r6, #12
   245e0:	b	258b0 <__assert_fail@plt+0x131c4>
   245e4:	mov	r0, r7
   245e8:	bl	11ffc <strcmp@plt>
   245ec:	b	245cc <__assert_fail@plt+0x11ee0>
   245f0:	mov	r0, r7
   245f4:	bl	11ffc <strcmp@plt>
   245f8:	cmp	r0, #0
   245fc:	beq	258ec <__assert_fail@plt+0x13200>
   24600:	add	r6, r6, #12
   24604:	ldr	r1, [r6]
   24608:	cmp	r1, #0
   2460c:	bne	245f0 <__assert_fail@plt+0x11f04>
   24610:	sub	r9, r8, #1
   24614:	ldrb	r3, [r7, r9]
   24618:	cmp	r3, #83	; 0x53
   2461c:	strbeq	r1, [r7, r9]
   24620:	ldreq	r6, [pc, #2872]	; 25160 <__assert_fail@plt+0x12a74>
   24624:	beq	24758 <__assert_fail@plt+0x1206c>
   24628:	ldr	r6, [pc, #2800]	; 25120 <__assert_fail@plt+0x12a34>
   2462c:	ldr	r1, [r6]
   24630:	cmp	r1, #0
   24634:	bne	24770 <__assert_fail@plt+0x12084>
   24638:	cmp	r8, #1
   2463c:	ldrbeq	r2, [sp, #124]	; 0x7c
   24640:	ldreq	r6, [pc, #2780]	; 25124 <__assert_fail@plt+0x12a38>
   24644:	beq	24798 <__assert_fail@plt+0x120ac>
   24648:	mov	r3, r7
   2464c:	mov	r1, #0
   24650:	mov	r2, r7
   24654:	mov	lr, #1
   24658:	ldrb	r0, [r3]
   2465c:	mov	ip, r3
   24660:	cmp	r0, #0
   24664:	strb	r0, [r2]
   24668:	bne	247a8 <__assert_fail@plt+0x120bc>
   2466c:	cmp	r1, #0
   24670:	beq	24688 <__assert_fail@plt+0x11f9c>
   24674:	mov	r1, r7
   24678:	mov	r0, r5
   2467c:	bl	241f8 <__assert_fail@plt+0x11b0c>
   24680:	subs	r6, r0, #0
   24684:	bne	258ec <__assert_fail@plt+0x13200>
   24688:	mov	r3, #63	; 0x3f
   2468c:	str	r3, [sp, #72]	; 0x48
   24690:	ldr	r3, [pc, #2692]	; 2511c <__assert_fail@plt+0x12a30>
   24694:	ldr	r2, [sp, #72]	; 0x48
   24698:	cmp	r2, r3
   2469c:	movgt	r3, #2
   246a0:	ble	2446c <__assert_fail@plt+0x11d80>
   246a4:	ldr	r2, [sp, #48]	; 0x30
   246a8:	add	r1, r3, r2
   246ac:	cmp	r1, #112	; 0x70
   246b0:	bhi	247e8 <__assert_fail@plt+0x120fc>
   246b4:	ldr	r2, [pc, #2648]	; 25114 <__assert_fail@plt+0x12a28>
   246b8:	add	r2, r2, r1
   246bc:	add	r1, r2, #2080	; 0x820
   246c0:	ldrsb	r1, [r1, #4]
   246c4:	cmp	r3, r1
   246c8:	bne	247e8 <__assert_fail@plt+0x120fc>
   246cc:	ldrb	r3, [r2, #2197]	; 0x895
   246d0:	cmp	r3, #0
   246d4:	str	r3, [sp, #76]	; 0x4c
   246d8:	beq	24800 <__assert_fail@plt+0x12114>
   246dc:	ldr	r3, [sp, #92]	; 0x5c
   246e0:	add	ip, sp, #184	; 0xb8
   246e4:	cmp	r3, #0
   246e8:	subne	r3, r3, #1
   246ec:	strne	r3, [sp, #92]	; 0x5c
   246f0:	ldrd	r2, [sp, #104]	; 0x68
   246f4:	add	r4, r4, #56	; 0x38
   246f8:	mov	lr, r4
   246fc:	strd	r2, [sp, #192]	; 0xc0
   24700:	ldr	r3, [sp, #100]	; 0x64
   24704:	str	r3, [sp, #200]	; 0xc8
   24708:	ldm	ip!, {r0, r1, r2, r3}
   2470c:	stmia	lr!, {r0, r1, r2, r3}
   24710:	ldm	ip!, {r0, r1, r2, r3}
   24714:	stmia	lr!, {r0, r1, r2, r3}
   24718:	ldm	ip!, {r0, r1, r2, r3}
   2471c:	stmia	lr!, {r0, r1, r2, r3}
   24720:	mvn	r3, #1
   24724:	ldm	ip, {r0, r1}
   24728:	stm	lr, {r0, r1}
   2472c:	str	r3, [sp, #72]	; 0x48
   24730:	ldr	r3, [sp, #88]	; 0x58
   24734:	ldr	sl, [sp, #76]	; 0x4c
   24738:	add	r3, r3, #2
   2473c:	str	r3, [sp, #88]	; 0x58
   24740:	b	242c8 <__assert_fail@plt+0x11bdc>
   24744:	mov	r0, r7
   24748:	bl	11ffc <strcmp@plt>
   2474c:	cmp	r0, #0
   24750:	beq	258ec <__assert_fail@plt+0x13200>
   24754:	add	r6, r6, #12
   24758:	ldr	r1, [r6]
   2475c:	cmp	r1, #0
   24760:	bne	24744 <__assert_fail@plt+0x12058>
   24764:	mov	r3, #83	; 0x53
   24768:	strb	r3, [r7, r9]
   2476c:	b	24628 <__assert_fail@plt+0x11f3c>
   24770:	mov	r0, r7
   24774:	bl	11ffc <strcmp@plt>
   24778:	cmp	r0, #0
   2477c:	beq	258ec <__assert_fail@plt+0x13200>
   24780:	add	r6, r6, #12
   24784:	b	2462c <__assert_fail@plt+0x11f40>
   24788:	ldrb	r3, [r3]
   2478c:	cmp	r3, r2
   24790:	beq	258ec <__assert_fail@plt+0x13200>
   24794:	add	r6, r6, #12
   24798:	ldr	r3, [r6]
   2479c:	cmp	r3, #0
   247a0:	bne	24788 <__assert_fail@plt+0x1209c>
   247a4:	b	24648 <__assert_fail@plt+0x11f5c>
   247a8:	ldrb	r0, [ip]
   247ac:	add	r3, r3, #1
   247b0:	cmp	r0, #46	; 0x2e
   247b4:	addne	r2, r2, #1
   247b8:	moveq	r1, lr
   247bc:	b	24658 <__assert_fail@plt+0x11f6c>
   247c0:	add	r3, r8, #1
   247c4:	str	r3, [r5]
   247c8:	ldrb	r3, [r8]
   247cc:	cmp	r3, #0
   247d0:	str	r3, [sp, #72]	; 0x48
   247d4:	bne	2446c <__assert_fail@plt+0x11d80>
   247d8:	ldr	r3, [sp, #72]	; 0x48
   247dc:	b	246a4 <__assert_fail@plt+0x11fb8>
   247e0:	mov	r3, #63	; 0x3f
   247e4:	b	24558 <__assert_fail@plt+0x11e6c>
   247e8:	ldr	r2, [pc, #2340]	; 25114 <__assert_fail@plt+0x12a28>
   247ec:	add	r3, r2, sl
   247f0:	ldrb	r3, [r3, #2310]	; 0x906
   247f4:	cmp	r3, #0
   247f8:	str	r3, [sp, #76]	; 0x4c
   247fc:	beq	256fc <__assert_fail@plt+0x13010>
   24800:	ldr	r2, [sp, #76]	; 0x4c
   24804:	ldr	r3, [pc, #2312]	; 25114 <__assert_fail@plt+0x12a28>
   24808:	add	ip, sp, #240	; 0xf0
   2480c:	add	r3, r3, r2
   24810:	ldrb	r3, [r3, #2424]	; 0x978
   24814:	str	r3, [sp, #96]	; 0x60
   24818:	rsb	lr, r3, #1
   2481c:	mov	r3, #56	; 0x38
   24820:	mla	lr, r3, lr, r4
   24824:	mov	r6, lr
   24828:	ldm	r6!, {r0, r1, r2, r3}
   2482c:	stmia	ip!, {r0, r1, r2, r3}
   24830:	ldm	r6!, {r0, r1, r2, r3}
   24834:	stmia	ip!, {r0, r1, r2, r3}
   24838:	ldm	r6!, {r0, r1, r2, r3}
   2483c:	stmia	ip!, {r0, r1, r2, r3}
   24840:	ldm	r6, {r0, r1}
   24844:	ldr	r3, [lr, #8]
   24848:	stm	ip, {r0, r1}
   2484c:	str	r3, [sp, #60]	; 0x3c
   24850:	ldr	r3, [lr, #12]
   24854:	ldr	r6, [lr, #28]
   24858:	str	r3, [sp, #64]	; 0x40
   2485c:	ldrd	r2, [lr, #16]
   24860:	ldr	r9, [lr, #32]
   24864:	ldr	r8, [lr, #36]	; 0x24
   24868:	strd	r2, [sp, #48]	; 0x30
   2486c:	ldr	r3, [lr, #24]
   24870:	ldrd	sl, [lr, #40]	; 0x28
   24874:	str	r3, [sp, #68]	; 0x44
   24878:	ldr	r3, [sp, #76]	; 0x4c
   2487c:	ldr	r7, [lr, #48]	; 0x30
   24880:	sub	r3, r3, #4
   24884:	cmp	r3, #87	; 0x57
   24888:	ldrls	pc, [pc, r3, lsl #2]
   2488c:	b	24a14 <__assert_fail@plt+0x12328>
   24890:	strdeq	r4, [r2], -r0
   24894:	andeq	r4, r2, r4, lsl sl
   24898:	andeq	r4, r2, r4, lsl sl
   2489c:	andeq	r4, r2, r0, lsl #22
   248a0:	andeq	r4, r2, r4, lsr #22
   248a4:	andeq	r4, r2, ip, lsr fp
   248a8:	andeq	r4, r2, r4, asr fp
   248ac:	andeq	r4, r2, ip, ror #22
   248b0:	andeq	r4, r2, r4, lsl #23
   248b4:	andeq	r4, r2, r8, asr sp
   248b8:	muleq	r2, ip, fp
   248bc:	andeq	r4, r2, r8, lsr #23
   248c0:	andeq	r4, r2, r4, lsl sl
   248c4:	andeq	r4, r2, r4, lsl sl
   248c8:			; <UNDEFINED> instruction: 0x00024bb4
   248cc:	andeq	r4, r2, r0, ror #23
   248d0:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   248d4:	andeq	r4, r2, r4, lsl sl
   248d8:	andeq	r4, r2, ip, lsl ip
   248dc:	andeq	r4, r2, r4, asr #24
   248e0:	andeq	r4, r2, r8, asr ip
   248e4:	andeq	r4, r2, r4, lsl sl
   248e8:	andeq	r4, r2, r4, lsl sl
   248ec:	andeq	r4, r2, r0, lsl #25
   248f0:	andeq	r4, r2, ip, asr #25
   248f4:	ldrdeq	r4, [r2], -r8
   248f8:	strdeq	r4, [r2], -r0
   248fc:	strdeq	r4, [r2], -ip
   24900:	andeq	r4, r2, r4, lsl #26
   24904:	andeq	r4, r2, r4, ror #26
   24908:	andeq	r4, r2, ip, ror #26
   2490c:	andeq	r4, r2, r0, ror lr
   24910:	andeq	r4, r2, ip, ror lr
   24914:	andeq	r4, r2, r4, lsl #29
   24918:	muleq	r2, ip, lr
   2491c:			; <UNDEFINED> instruction: 0x00024eb0
   24920:	andeq	r4, r2, ip, asr #29
   24924:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24928:	andeq	r4, r2, r8, ror #29
   2492c:	andeq	r4, r2, r8, asr #30
   24930:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   24934:	andeq	r4, r2, r8, ror #31
   24938:	strdeq	r4, [r2], -r0
   2493c:	andeq	r5, r2, r0
   24940:	andeq	r5, r2, r4, lsl r0
   24944:	andeq	r4, r2, r4, lsl sl
   24948:	andeq	r5, r2, r8, lsr #32
   2494c:	andeq	r5, r2, r4, lsl #1
   24950:	andeq	r5, r2, r4, lsr #13
   24954:	andeq	r5, r2, r4, lsr #13
   24958:	andeq	r5, r2, ip, asr #1
   2495c:	andeq	r5, r2, r8, ror #2
   24960:	andeq	r5, r2, r0, lsl #3
   24964:	muleq	r2, ip, r1
   24968:	muleq	r2, ip, r4
   2496c:	andeq	r5, r2, r0, ror #3
   24970:	andeq	r5, r2, r0, lsr #4
   24974:			; <UNDEFINED> instruction: 0x000254bc
   24978:	andeq	r5, r2, r8, lsl r6
   2497c:	andeq	r5, r2, r8, asr r3
   24980:	andeq	r5, r2, r4, asr #11
   24984:	andeq	r5, r2, ip, lsl #7
   24988:	andeq	r5, r2, ip, asr #7
   2498c:	andeq	r5, r2, r4, ror #11
   24990:	strdeq	r5, [r2], -r4
   24994:	andeq	r5, r2, ip, lsl r4
   24998:	andeq	r5, r2, r0, lsl #12
   2499c:	andeq	r5, r2, r8, lsr r4
   249a0:	andeq	r5, r2, r8, lsr r4
   249a4:	andeq	r5, r2, r8, ror r4
   249a8:	andeq	r4, r2, r4, lsl sl
   249ac:	andeq	r5, r2, r8, ror #2
   249b0:	muleq	r2, ip, r4
   249b4:			; <UNDEFINED> instruction: 0x000254bc
   249b8:	andeq	r5, r2, r4, asr #11
   249bc:	andeq	r5, r2, r4, ror #11
   249c0:	andeq	r5, r2, r0, lsl #12
   249c4:	andeq	r5, r2, r8, lsl r6
   249c8:	andeq	r4, r2, r4, lsl sl
   249cc:	andeq	r4, r2, r4, lsl sl
   249d0:	andeq	r4, r2, r4, lsl sl
   249d4:	andeq	r5, r2, r4, lsr r6
   249d8:	andeq	r4, r2, r4, lsl sl
   249dc:	andeq	r5, r2, r4, lsr r6
   249e0:	andeq	r5, r2, ip, ror #12
   249e4:	andeq	r5, r2, r8, lsl #13
   249e8:	andeq	r5, r2, r4, ror #13
   249ec:	strdeq	r5, [r2], -r4
   249f0:	ldm	r4, {r0, r1}
   249f4:	add	r3, r5, #88	; 0x58
   249f8:	mov	r2, #5
   249fc:	stm	r3, {r0, r1}
   24a00:	ldr	r1, [pc, #1824]	; 25128 <__assert_fail@plt+0x12a3c>
   24a04:	mov	r3, #1
   24a08:	strb	r3, [r5, #152]	; 0x98
   24a0c:	mov	r0, #0
   24a10:	bl	1217c <dcgettext@plt>
   24a14:	ldrh	r2, [sp, #96]	; 0x60
   24a18:	mov	r3, #56	; 0x38
   24a1c:	add	r1, sp, #256	; 0x100
   24a20:	ldr	lr, [sp, #56]	; 0x38
   24a24:	smulbb	r3, r2, r3
   24a28:	ldr	r2, [sp, #96]	; 0x60
   24a2c:	sub	r4, r4, r3
   24a30:	ldr	r3, [sp, #88]	; 0x58
   24a34:	str	r8, [sp, #276]	; 0x114
   24a38:	sub	r3, r3, r2, lsl #1
   24a3c:	str	r3, [sp, #88]	; 0x58
   24a40:	ldr	r3, [sp, #60]	; 0x3c
   24a44:	str	r6, [sp, #268]	; 0x10c
   24a48:	str	r3, [sp, #248]	; 0xf8
   24a4c:	ldr	r3, [sp, #64]	; 0x40
   24a50:	str	r9, [sp, #272]	; 0x110
   24a54:	str	r3, [sp, #252]	; 0xfc
   24a58:	ldrd	r2, [sp, #48]	; 0x30
   24a5c:	str	r7, [sp, #288]	; 0x120
   24a60:	add	r4, r4, #56	; 0x38
   24a64:	strd	r2, [r1]
   24a68:	ldr	r3, [sp, #68]	; 0x44
   24a6c:	mov	ip, r4
   24a70:	str	r3, [sp, #264]	; 0x108
   24a74:	add	r3, sp, #280	; 0x118
   24a78:	strd	sl, [r3]
   24a7c:	ldm	lr!, {r0, r1, r2, r3}
   24a80:	stmia	ip!, {r0, r1, r2, r3}
   24a84:	ldm	lr!, {r0, r1, r2, r3}
   24a88:	stmia	ip!, {r0, r1, r2, r3}
   24a8c:	ldm	lr!, {r0, r1, r2, r3}
   24a90:	stmia	ip!, {r0, r1, r2, r3}
   24a94:	ldr	r3, [pc, #1656]	; 25114 <__assert_fail@plt+0x12a28>
   24a98:	ldr	r2, [sp, #76]	; 0x4c
   24a9c:	ldm	lr, {r0, r1}
   24aa0:	add	r2, r3, r2
   24aa4:	stm	ip, {r0, r1}
   24aa8:	ldrb	r1, [r2, #2516]	; 0x9d4
   24aac:	ldr	r2, [sp, #88]	; 0x58
   24ab0:	sub	r1, r1, #28
   24ab4:	ldrsh	ip, [r2]
   24ab8:	add	r2, r3, r1
   24abc:	add	r2, r2, #2608	; 0xa30
   24ac0:	ldrsb	r0, [r2]
   24ac4:	mov	r2, r3
   24ac8:	add	r0, r0, ip
   24acc:	cmp	r0, #112	; 0x70
   24ad0:	bhi	24aec <__assert_fail@plt+0x12400>
   24ad4:	add	r3, r3, r0
   24ad8:	add	r0, r3, #2080	; 0x820
   24adc:	ldrsb	r0, [r0, #4]
   24ae0:	cmp	r0, ip
   24ae4:	ldrbeq	r3, [r3, #2197]	; 0x895
   24ae8:	beq	24af8 <__assert_fail@plt+0x1240c>
   24aec:	add	r3, r2, r1
   24af0:	add	r3, r3, #2624	; 0xa40
   24af4:	ldrsb	r3, [r3, #10]
   24af8:	str	r3, [sp, #76]	; 0x4c
   24afc:	b	24730 <__assert_fail@plt+0x12044>
   24b00:	ldr	r3, [r5, #172]	; 0xac
   24b04:	mov	r2, #5
   24b08:	add	r3, r3, #1
   24b0c:	str	r3, [r5, #172]	; 0xac
   24b10:	ldr	r3, [r5, #156]	; 0x9c
   24b14:	ldr	r1, [pc, #1552]	; 2512c <__assert_fail@plt+0x12a40>
   24b18:	add	r3, r3, #1
   24b1c:	str	r3, [r5, #156]	; 0x9c
   24b20:	b	24a0c <__assert_fail@plt+0x12320>
   24b24:	ldr	r3, [r5, #172]	; 0xac
   24b28:	mov	r2, #5
   24b2c:	add	r3, r3, #1
   24b30:	str	r3, [r5, #172]	; 0xac
   24b34:	ldr	r1, [pc, #1524]	; 25130 <__assert_fail@plt+0x12a44>
   24b38:	b	24a0c <__assert_fail@plt+0x12320>
   24b3c:	ldr	r3, [r5, #164]	; 0xa4
   24b40:	mov	r2, #5
   24b44:	add	r3, r3, #1
   24b48:	str	r3, [r5, #164]	; 0xa4
   24b4c:	ldr	r1, [pc, #1504]	; 25134 <__assert_fail@plt+0x12a48>
   24b50:	b	24a0c <__assert_fail@plt+0x12320>
   24b54:	ldr	r3, [r5, #176]	; 0xb0
   24b58:	mov	r2, #5
   24b5c:	add	r3, r3, #1
   24b60:	str	r3, [r5, #176]	; 0xb0
   24b64:	ldr	r1, [pc, #1484]	; 25138 <__assert_fail@plt+0x12a4c>
   24b68:	b	24a0c <__assert_fail@plt+0x12320>
   24b6c:	ldr	r3, [r5, #156]	; 0x9c
   24b70:	mov	r2, #5
   24b74:	add	r3, r3, #1
   24b78:	str	r3, [r5, #156]	; 0x9c
   24b7c:	ldr	r1, [pc, #1464]	; 2513c <__assert_fail@plt+0x12a50>
   24b80:	b	24a0c <__assert_fail@plt+0x12320>
   24b84:	ldr	r3, [r5, #160]	; 0xa0
   24b88:	mov	r2, #5
   24b8c:	add	r3, r3, #1
   24b90:	str	r3, [r5, #160]	; 0xa0
   24b94:	ldr	r1, [pc, #1444]	; 25140 <__assert_fail@plt+0x12a54>
   24b98:	b	24a0c <__assert_fail@plt+0x12320>
   24b9c:	mov	r2, #5
   24ba0:	ldr	r1, [pc, #1436]	; 25144 <__assert_fail@plt+0x12a58>
   24ba4:	b	24a0c <__assert_fail@plt+0x12320>
   24ba8:	mov	r2, #5
   24bac:	ldr	r1, [pc, #1428]	; 25148 <__assert_fail@plt+0x12a5c>
   24bb0:	b	24a0c <__assert_fail@plt+0x12320>
   24bb4:	ldrd	r2, [r4, #-48]	; 0xffffffd0
   24bb8:	strd	r2, [r5, #72]	; 0x48
   24bbc:	mov	r2, #0
   24bc0:	mov	r3, #0
   24bc4:	strd	r2, [r5, #80]	; 0x50
   24bc8:	mov	r3, #0
   24bcc:	str	r3, [r5, #88]	; 0x58
   24bd0:	str	r3, [r5, #92]	; 0x5c
   24bd4:	ldr	r3, [r4]
   24bd8:	str	r3, [r5, #28]
   24bdc:	b	24a14 <__assert_fail@plt+0x12328>
   24be0:	ldrd	r0, [r4, #-48]	; 0xffffffd0
   24be4:	ldrd	r2, [r4, #-160]	; 0xffffff60
   24be8:	strd	r0, [r5, #80]	; 0x50
   24bec:	strd	r2, [r5, #72]	; 0x48
   24bf0:	b	24bc8 <__assert_fail@plt+0x124dc>
   24bf4:	sub	r3, r4, #272	; 0x110
   24bf8:	ldrd	r0, [r4, #-160]	; 0xffffff60
   24bfc:	ldrd	r2, [r3]
   24c00:	ldr	lr, [r4, #-56]	; 0xffffffc8
   24c04:	ldr	ip, [r4, #-52]	; 0xffffffcc
   24c08:	strd	r2, [r5, #72]	; 0x48
   24c0c:	strd	r0, [r5, #80]	; 0x50
   24c10:	str	lr, [r5, #88]	; 0x58
   24c14:	str	ip, [r5, #92]	; 0x5c
   24c18:	b	24bd4 <__assert_fail@plt+0x124e8>
   24c1c:	ldrd	r2, [r4, #-48]	; 0xffffffd0
   24c20:	strd	r2, [r5, #72]	; 0x48
   24c24:	mov	r2, #0
   24c28:	mov	r3, #0
   24c2c:	strd	r2, [r5, #80]	; 0x50
   24c30:	mov	r3, #0
   24c34:	str	r3, [r5, #88]	; 0x58
   24c38:	str	r3, [r5, #92]	; 0x5c
   24c3c:	mov	r3, #2
   24c40:	b	24bd8 <__assert_fail@plt+0x124ec>
   24c44:	ldrd	r0, [r4, #-48]	; 0xffffffd0
   24c48:	ldrd	r2, [r4, #-160]	; 0xffffff60
   24c4c:	strd	r0, [r5, #80]	; 0x50
   24c50:	strd	r2, [r5, #72]	; 0x48
   24c54:	b	24c30 <__assert_fail@plt+0x12544>
   24c58:	sub	r3, r4, #272	; 0x110
   24c5c:	ldrd	r0, [r4, #-160]	; 0xffffff60
   24c60:	ldrd	r2, [r3]
   24c64:	ldr	lr, [r4, #-56]	; 0xffffffc8
   24c68:	ldr	ip, [r4, #-52]	; 0xffffffcc
   24c6c:	strd	r2, [r5, #72]	; 0x48
   24c70:	strd	r0, [r5, #80]	; 0x50
   24c74:	str	lr, [r5, #88]	; 0x58
   24c78:	str	ip, [r5, #92]	; 0x5c
   24c7c:	b	24c3c <__assert_fail@plt+0x12550>
   24c80:	ldr	r3, [r5, #176]	; 0xb0
   24c84:	ldrb	r1, [r4, #-56]	; 0xffffffc8
   24c88:	add	r3, r3, #1
   24c8c:	str	r3, [r5, #176]	; 0xb0
   24c90:	ldrd	r2, [r4, #-48]	; 0xffffffd0
   24c94:	strd	r2, [sp, #80]	; 0x50
   24c98:	ldrd	r2, [r4]
   24c9c:	strd	r2, [sp, #8]
   24ca0:	ldr	r0, [r4, #-40]	; 0xffffffd8
   24ca4:	ldrd	r2, [sp, #80]	; 0x50
   24ca8:	str	r0, [sp]
   24cac:	add	r0, r5, #24
   24cb0:	bl	24038 <__assert_fail@plt+0x1194c>
   24cb4:	cmp	r0, #0
   24cb8:	bne	24a14 <__assert_fail@plt+0x12328>
   24cbc:	mov	r0, #1
   24cc0:	add	sp, sp, #1408	; 0x580
   24cc4:	add	sp, sp, #12
   24cc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24ccc:	ldr	r3, [r4]
   24cd0:	str	r3, [r5, #20]
   24cd4:	b	24a14 <__assert_fail@plt+0x12328>
   24cd8:	mov	r3, #1
   24cdc:	str	r3, [r5, #20]
   24ce0:	ldr	r3, [r5, #168]	; 0xa8
   24ce4:	add	r3, r3, #1
   24ce8:	str	r3, [r5, #168]	; 0xa8
   24cec:	b	24a14 <__assert_fail@plt+0x12328>
   24cf0:	ldr	r3, [r4]
   24cf4:	str	r3, [r5, #24]
   24cf8:	b	24a14 <__assert_fail@plt+0x12328>
   24cfc:	ldr	r3, [pc, #1096]	; 2514c <__assert_fail@plt+0x12a60>
   24d00:	b	24cf4 <__assert_fail@plt+0x12608>
   24d04:	ldr	r3, [r4, #-56]	; 0xffffffc8
   24d08:	str	r3, [r5, #24]
   24d0c:	mov	r3, #1
   24d10:	str	r3, [sp, #44]	; 0x2c
   24d14:	ldr	r3, [r4, #48]	; 0x30
   24d18:	mov	r0, r5
   24d1c:	str	r3, [sp, #40]	; 0x28
   24d20:	ldrd	r2, [r4, #40]	; 0x28
   24d24:	strd	r2, [sp, #32]
   24d28:	ldrd	r2, [r4, #32]
   24d2c:	strd	r2, [sp, #24]
   24d30:	ldrd	r2, [r4, #24]
   24d34:	strd	r2, [sp, #16]
   24d38:	ldrd	r2, [r4, #16]
   24d3c:	strd	r2, [sp, #8]
   24d40:	ldrd	r2, [r4, #8]
   24d44:	strd	r2, [sp]
   24d48:	ldrd	r2, [r4]
   24d4c:	bl	23854 <__assert_fail@plt+0x11168>
   24d50:	cmp	r0, #0
   24d54:	beq	24cbc <__assert_fail@plt+0x125d0>
   24d58:	mov	r2, #5
   24d5c:	ldr	r1, [pc, #1004]	; 25150 <__assert_fail@plt+0x12a64>
   24d60:	b	24a0c <__assert_fail@plt+0x12320>
   24d64:	ldr	r3, [pc, #992]	; 2514c <__assert_fail@plt+0x12a60>
   24d68:	b	24d08 <__assert_fail@plt+0x1261c>
   24d6c:	ldrd	r2, [r4, #-48]	; 0xffffffd0
   24d70:	ldrb	r1, [r4, #-56]	; 0xffffffc8
   24d74:	strd	r2, [sp, #80]	; 0x50
   24d78:	ldrd	r2, [r4]
   24d7c:	strd	r2, [sp, #8]
   24d80:	ldr	r0, [r4, #-40]	; 0xffffffd8
   24d84:	ldrd	r2, [sp, #80]	; 0x50
   24d88:	str	r0, [sp]
   24d8c:	add	r0, r5, #24
   24d90:	bl	24038 <__assert_fail@plt+0x1194c>
   24d94:	cmp	r0, #0
   24d98:	beq	24cbc <__assert_fail@plt+0x125d0>
   24d9c:	ldrd	r2, [r4, #-112]	; 0xffffff90
   24da0:	ldr	ip, [r5, #24]
   24da4:	cmp	r2, #0
   24da8:	strd	r2, [sp, #80]	; 0x50
   24dac:	sbcs	r3, r3, #0
   24db0:	bge	24e04 <__assert_fail@plt+0x12718>
   24db4:	mov	r2, ip
   24db8:	asr	r3, ip, #31
   24dbc:	ldrd	r0, [sp, #80]	; 0x50
   24dc0:	strd	r2, [sp, #112]	; 0x70
   24dc4:	mov	r2, #-2147483648	; 0x80000000
   24dc8:	subs	r0, r2, r0
   24dcc:	mvn	r3, #0
   24dd0:	sbc	r1, r3, r1
   24dd4:	ldrd	r2, [sp, #112]	; 0x70
   24dd8:	cmp	r2, r0
   24ddc:	sbcs	r3, r3, r1
   24de0:	movlt	r3, #1
   24de4:	movge	r3, #0
   24de8:	cmp	r3, #0
   24dec:	beq	24e60 <__assert_fail@plt+0x12774>
   24df0:	ldr	r3, [r5, #24]
   24df4:	ldr	r2, [sp, #80]	; 0x50
   24df8:	add	r6, r3, r2
   24dfc:	str	r6, [r5, #24]
   24e00:	b	24cbc <__assert_fail@plt+0x125d0>
   24e04:	cmp	ip, #0
   24e08:	bge	24e2c <__assert_fail@plt+0x12740>
   24e0c:	ldrd	r2, [sp, #80]	; 0x50
   24e10:	mvn	r0, #-2147483648	; 0x80000000
   24e14:	mov	r1, #0
   24e18:	adds	r2, r2, ip
   24e1c:	adc	r3, r3, ip, asr #31
   24e20:	cmp	r0, r2
   24e24:	sbcs	r3, r1, r3
   24e28:	b	24de0 <__assert_fail@plt+0x126f4>
   24e2c:	ldrd	r0, [sp, #80]	; 0x50
   24e30:	mvn	r2, #-2147483648	; 0x80000000
   24e34:	mov	r3, #0
   24e38:	cmp	r2, r0
   24e3c:	sbcs	r3, r3, r1
   24e40:	blt	24df0 <__assert_fail@plt+0x12704>
   24e44:	mvn	r2, #-2147483648	; 0x80000000
   24e48:	mov	r3, #0
   24e4c:	subs	r0, r2, r0
   24e50:	sbc	r1, r3, r1
   24e54:	mov	r2, ip
   24e58:	asr	r3, ip, #31
   24e5c:	b	24e20 <__assert_fail@plt+0x12734>
   24e60:	ldr	r3, [r5, #24]
   24e64:	ldr	r2, [sp, #80]	; 0x50
   24e68:	add	r3, r3, r2
   24e6c:	b	24cf4 <__assert_fail@plt+0x12608>
   24e70:	ldr	r3, [r4]
   24e74:	add	r3, r3, #3600	; 0xe10
   24e78:	b	24cf4 <__assert_fail@plt+0x12608>
   24e7c:	ldr	r3, [r4, #-56]	; 0xffffffc8
   24e80:	b	24e74 <__assert_fail@plt+0x12788>
   24e84:	mov	r3, #0
   24e88:	mov	r2, #0
   24e8c:	strd	r2, [r5, #8]
   24e90:	ldr	r3, [r4]
   24e94:	str	r3, [r5, #16]
   24e98:	b	24a14 <__assert_fail@plt+0x12328>
   24e9c:	mov	r3, #0
   24ea0:	mov	r2, #0
   24ea4:	strd	r2, [r5, #8]
   24ea8:	ldr	r3, [r4, #-56]	; 0xffffffc8
   24eac:	b	24e94 <__assert_fail@plt+0x127a8>
   24eb0:	ldrd	r2, [r4, #-56]	; 0xffffffc8
   24eb4:	strd	r2, [r5, #8]
   24eb8:	ldr	r3, [r4]
   24ebc:	str	r3, [r5, #16]
   24ec0:	mov	r3, #1
   24ec4:	strb	r3, [r5, #187]	; 0xbb
   24ec8:	b	24a14 <__assert_fail@plt+0x12328>
   24ecc:	ldrd	r2, [r4, #-48]	; 0xffffffd0
   24ed0:	b	24eb4 <__assert_fail@plt+0x127c8>
   24ed4:	ldrd	r2, [r4, #-104]	; 0xffffff98
   24ed8:	strd	r2, [r5, #56]	; 0x38
   24edc:	ldrd	r2, [r4, #8]
   24ee0:	strd	r2, [r5, #64]	; 0x40
   24ee4:	b	24a14 <__assert_fail@plt+0x12328>
   24ee8:	ldr	r3, [r4, #-208]	; 0xffffff30
   24eec:	cmp	r3, #3
   24ef0:	ldrd	r2, [r4, #-104]	; 0xffffff98
   24ef4:	strd	r2, [sp, #80]	; 0x50
   24ef8:	ble	24f1c <__assert_fail@plt+0x12830>
   24efc:	sub	lr, r4, #224	; 0xe0
   24f00:	add	ip, r5, #32
   24f04:	ldm	lr!, {r0, r1, r2, r3}
   24f08:	stmia	ip!, {r0, r1, r2, r3}
   24f0c:	ldm	lr, {r0, r1}
   24f10:	ldrd	r2, [sp, #80]	; 0x50
   24f14:	stm	ip, {r0, r1}
   24f18:	b	24ed8 <__assert_fail@plt+0x127ec>
   24f1c:	ldrd	r2, [r4, #-216]	; 0xffffff28
   24f20:	strd	r2, [r5, #56]	; 0x38
   24f24:	ldrd	r2, [sp, #80]	; 0x50
   24f28:	strd	r2, [r5, #64]	; 0x40
   24f2c:	mov	lr, r4
   24f30:	add	ip, r5, #32
   24f34:	ldm	lr!, {r0, r1, r2, r3}
   24f38:	stmia	ip!, {r0, r1, r2, r3}
   24f3c:	ldm	lr, {r0, r1}
   24f40:	stm	ip, {r0, r1}
   24f44:	b	24a14 <__assert_fail@plt+0x12328>
   24f48:	ldrd	r2, [r4, #-104]	; 0xffffff98
   24f4c:	ldrd	r0, [r4, #8]
   24f50:	strd	r2, [r5, #64]	; 0x40
   24f54:	ldrd	r2, [r4, #-56]	; 0xffffffc8
   24f58:	cmp	r1, #-2147483648	; 0x80000000
   24f5c:	cmpeq	r0, #0
   24f60:	strd	r2, [r5, #56]	; 0x38
   24f64:	bne	24f78 <__assert_fail@plt+0x1288c>
   24f68:	mov	r2, #0
   24f6c:	mov	r3, #-2147483648	; 0x80000000
   24f70:	strd	r2, [r5, #40]	; 0x28
   24f74:	b	24cbc <__assert_fail@plt+0x125d0>
   24f78:	rsbs	r2, r0, #0
   24f7c:	rsc	r3, r1, #0
   24f80:	strd	r2, [r5, #40]	; 0x28
   24f84:	ldr	r3, [r4, #16]
   24f88:	str	r3, [r5, #48]	; 0x30
   24f8c:	b	24a14 <__assert_fail@plt+0x12328>
   24f90:	ldrd	r2, [r4, #-112]	; 0xffffff90
   24f94:	mov	r1, #-2147483648	; 0x80000000
   24f98:	mov	r0, #0
   24f9c:	strd	r2, [r5, #56]	; 0x38
   24fa0:	ldrd	r2, [r4, #-48]	; 0xffffffd0
   24fa4:	cmp	r3, r1
   24fa8:	cmpeq	r2, r0
   24fac:	bne	24fc0 <__assert_fail@plt+0x128d4>
   24fb0:	mov	r2, #0
   24fb4:	mov	r3, #-2147483648	; 0x80000000
   24fb8:	strd	r2, [r5, #64]	; 0x40
   24fbc:	b	24cbc <__assert_fail@plt+0x125d0>
   24fc0:	rsbs	r2, r2, #0
   24fc4:	rsc	r3, r3, #0
   24fc8:	strd	r2, [r5, #64]	; 0x40
   24fcc:	ldrd	r2, [r4, #8]
   24fd0:	cmp	r3, r1
   24fd4:	cmpeq	r2, r0
   24fd8:	beq	24f68 <__assert_fail@plt+0x1287c>
   24fdc:	rsbs	r2, r2, #0
   24fe0:	rsc	r3, r3, #0
   24fe4:	b	24f80 <__assert_fail@plt+0x12894>
   24fe8:	ldrd	r2, [r4, #-56]	; 0xffffffc8
   24fec:	b	24ed8 <__assert_fail@plt+0x127ec>
   24ff0:	ldrd	r2, [r4, #-168]	; 0xffffff58
   24ff4:	strd	r2, [r5, #56]	; 0x38
   24ff8:	ldrd	r2, [r4, #-104]	; 0xffffff98
   24ffc:	b	24f28 <__assert_fail@plt+0x1283c>
   25000:	ldrd	r2, [r4, #-48]	; 0xffffffd0
   25004:	strd	r2, [r5, #64]	; 0x40
   25008:	ldrd	r2, [r4]
   2500c:	strd	r2, [r5, #56]	; 0x38
   25010:	b	24a14 <__assert_fail@plt+0x12328>
   25014:	ldrd	r2, [r4, #-104]	; 0xffffff98
   25018:	strd	r2, [r5, #64]	; 0x40
   2501c:	ldrd	r2, [r4, #-56]	; 0xffffffc8
   25020:	strd	r2, [r5, #56]	; 0x38
   25024:	b	24f2c <__assert_fail@plt+0x12840>
   25028:	sub	lr, r4, #112	; 0x70
   2502c:	add	ip, r5, #32
   25030:	ldm	lr!, {r0, r1, r2, r3}
   25034:	stmia	ip!, {r0, r1, r2, r3}
   25038:	ldm	lr, {r0, r1}
   2503c:	ldrd	r2, [r4, #-48]	; 0xffffffd0
   25040:	stm	ip, {r0, r1}
   25044:	mov	r1, #-2147483648	; 0x80000000
   25048:	mov	r0, #0
   2504c:	cmp	r3, r1
   25050:	cmpeq	r2, r0
   25054:	strdeq	r2, [r5, #56]	; 0x38
   25058:	beq	24cbc <__assert_fail@plt+0x125d0>
   2505c:	rsbs	r2, r2, #0
   25060:	rsc	r3, r3, #0
   25064:	strd	r2, [r5, #56]	; 0x38
   25068:	ldrd	r2, [r4, #8]
   2506c:	cmp	r3, r1
   25070:	cmpeq	r2, r0
   25074:	beq	24fb0 <__assert_fail@plt+0x128c4>
   25078:	rsbs	r2, r2, #0
   2507c:	rsc	r3, r3, #0
   25080:	b	24ee0 <__assert_fail@plt+0x127f4>
   25084:	ldr	r1, [r4]
   25088:	ldrd	r2, [r4, #-56]	; 0xffffffc8
   2508c:	str	r1, [sp, #44]	; 0x2c
   25090:	ldr	r1, [r4, #-8]
   25094:	str	r1, [sp, #40]	; 0x28
   25098:	ldrd	r0, [r4, #-16]
   2509c:	strd	r0, [sp, #32]
   250a0:	ldrd	r0, [r4, #-24]	; 0xffffffe8
   250a4:	strd	r0, [sp, #24]
   250a8:	ldrd	r0, [r4, #-32]	; 0xffffffe0
   250ac:	strd	r0, [sp, #16]
   250b0:	ldrd	r0, [r4, #-40]	; 0xffffffd8
   250b4:	strd	r0, [sp, #8]
   250b8:	ldrd	r0, [r4, #-48]	; 0xffffffd0
   250bc:	strd	r0, [sp]
   250c0:	mov	r0, r5
   250c4:	bl	23854 <__assert_fail@plt+0x11168>
   250c8:	b	24cb4 <__assert_fail@plt+0x125c8>
   250cc:	mov	r2, #56	; 0x38
   250d0:	mov	r1, #0
   250d4:	ldr	r0, [sp, #56]	; 0x38
   250d8:	bl	12434 <memset@plt>
   250dc:	ldrd	r2, [r4, #-56]	; 0xffffffc8
   250e0:	mov	sl, #0
   250e4:	mov	fp, #0
   250e8:	mov	r7, #0
   250ec:	mov	r9, sl
   250f0:	mov	r8, fp
   250f4:	strd	r2, [sp, #240]	; 0xf0
   250f8:	str	sl, [sp, #68]	; 0x44
   250fc:	mov	r6, fp
   25100:	b	253bc <__assert_fail@plt+0x12cd0>
   25104:	andeq	lr, r3, r0, lsl r6
   25108:	addeq	r0, r0, pc, lsl r0
   2510c:	andeq	r0, r0, r3, lsl r1
   25110:	andeq	r0, r0, r2, lsl r1
   25114:	andeq	sp, r3, r0, lsl #31
   25118:	stcleq	12, cr12, [ip], {204}	; 0xcc
   2511c:	andeq	r0, r0, r5, lsl r1
   25120:	ldrdeq	lr, [r3], -ip
   25124:	ldrdeq	lr, [r3], -r8
   25128:	andeq	sp, r3, r2, lsl #5
   2512c:	andeq	lr, r3, r8, ror #19
   25130:	andeq	ip, r3, r4, lsr #29
   25134:	strdeq	lr, [r3], -r1
   25138:	strdeq	lr, [r3], -r7
   2513c:	strdeq	lr, [r3], -ip
   25140:	andeq	lr, r3, r1, lsl #20
   25144:	andeq	sp, r3, r4, lsr #15
   25148:	andeq	lr, r3, lr, lsl #20
   2514c:			; <UNDEFINED> instruction: 0xffff9d90
   25150:	andeq	lr, r3, r5, lsl #20
   25154:	strdeq	lr, [r3], -r0
   25158:	andeq	lr, r3, ip, lsr #4
   2515c:	andeq	lr, r3, r4, ror #19
   25160:	andeq	lr, r3, r8, asr r3
   25164:	andeq	lr, r3, r0, lsl r6
   25168:	mov	r2, #56	; 0x38
   2516c:	mov	r1, #0
   25170:	ldr	r0, [sp, #56]	; 0x38
   25174:	bl	12434 <memset@plt>
   25178:	ldrd	r2, [r4, #-48]	; 0xffffffd0
   2517c:	b	250e0 <__assert_fail@plt+0x129f4>
   25180:	mov	r2, #56	; 0x38
   25184:	mov	r1, #0
   25188:	ldr	r0, [sp, #56]	; 0x38
   2518c:	bl	12434 <memset@plt>
   25190:	mov	r2, #1
   25194:	mov	r3, #0
   25198:	b	250e0 <__assert_fail@plt+0x129f4>
   2519c:	mov	r2, #56	; 0x38
   251a0:	mov	r1, #0
   251a4:	ldr	r0, [sp, #56]	; 0x38
   251a8:	bl	12434 <memset@plt>
   251ac:	ldr	r3, [r4, #-56]	; 0xffffffc8
   251b0:	str	r3, [sp, #60]	; 0x3c
   251b4:	ldr	r3, [r4, #-52]	; 0xffffffcc
   251b8:	mov	sl, #0
   251bc:	mov	fp, #0
   251c0:	str	r3, [sp, #64]	; 0x40
   251c4:	mov	r7, #0
   251c8:	mov	r9, sl
   251cc:	mov	r8, fp
   251d0:	str	sl, [sp, #68]	; 0x44
   251d4:	mov	r6, fp
   251d8:	strd	sl, [sp, #48]	; 0x30
   251dc:	b	24a14 <__assert_fail@plt+0x12328>
   251e0:	mov	sl, #0
   251e4:	mov	fp, #0
   251e8:	mov	r2, #56	; 0x38
   251ec:	mov	r1, #0
   251f0:	ldr	r0, [sp, #56]	; 0x38
   251f4:	bl	12434 <memset@plt>
   251f8:	mov	r7, #0
   251fc:	mov	r3, #1
   25200:	mov	r9, sl
   25204:	mov	r8, fp
   25208:	str	sl, [sp, #68]	; 0x44
   2520c:	mov	r6, fp
   25210:	strd	sl, [sp, #48]	; 0x30
   25214:	str	r3, [sp, #60]	; 0x3c
   25218:	str	r7, [sp, #64]	; 0x40
   2521c:	b	24a14 <__assert_fail@plt+0x12328>
   25220:	mov	r2, #56	; 0x38
   25224:	mov	r1, #0
   25228:	ldr	r0, [sp, #56]	; 0x38
   2522c:	bl	12434 <memset@plt>
   25230:	ldrd	r6, [r4]
   25234:	cmp	r6, #0
   25238:	sbcs	r3, r7, #0
   2523c:	bge	252f8 <__assert_fail@plt+0x12c0c>
   25240:	ldrd	r8, [r4, #-56]	; 0xffffffc8
   25244:	cmp	r8, #0
   25248:	sbcs	r3, r9, #0
   2524c:	bge	252c0 <__assert_fail@plt+0x12bd4>
   25250:	mov	r3, r7
   25254:	mov	r2, r6
   25258:	mvn	r0, #0
   2525c:	mvn	r1, #-2147483648	; 0x80000000
   25260:	bl	39878 <__assert_fail@plt+0x2718c>
   25264:	cmp	r8, r0
   25268:	sbcs	r3, r9, r1
   2526c:	movlt	r3, #1
   25270:	movge	r3, #0
   25274:	cmp	r3, #0
   25278:	bne	24cbc <__assert_fail@plt+0x125d0>
   2527c:	ldr	r3, [r4, #-52]	; 0xffffffcc
   25280:	ldr	r8, [r4, #-56]	; 0xffffffc8
   25284:	mul	r3, r6, r3
   25288:	mla	r3, r8, r7, r3
   2528c:	umull	r0, r1, r6, r8
   25290:	strd	r0, [sp, #48]	; 0x30
   25294:	ldr	r2, [sp, #52]	; 0x34
   25298:	add	r3, r3, r2
   2529c:	str	r3, [sp, #52]	; 0x34
   252a0:	mov	sl, #0
   252a4:	mov	fp, #0
   252a8:	mov	r7, #0
   252ac:	mov	r9, sl
   252b0:	mov	r8, fp
   252b4:	str	sl, [sp, #68]	; 0x44
   252b8:	mov	r6, fp
   252bc:	b	253c0 <__assert_fail@plt+0x12cd4>
   252c0:	mvn	r3, #0
   252c4:	cmp	r7, r3
   252c8:	mvn	r2, #0
   252cc:	cmpeq	r6, r2
   252d0:	moveq	r3, #0
   252d4:	beq	25274 <__assert_fail@plt+0x12b88>
   252d8:	mov	r2, r6
   252dc:	mov	r3, r7
   252e0:	mov	r0, #0
   252e4:	mov	r1, #-2147483648	; 0x80000000
   252e8:	bl	39878 <__assert_fail@plt+0x2718c>
   252ec:	cmp	r0, r8
   252f0:	sbcs	r3, r1, r9
   252f4:	b	2526c <__assert_fail@plt+0x12b80>
   252f8:	orrs	r3, r6, r7
   252fc:	beq	2527c <__assert_fail@plt+0x12b90>
   25300:	ldrd	r8, [r4, #-56]	; 0xffffffc8
   25304:	cmp	r8, #0
   25308:	sbcs	r3, r9, #0
   2530c:	bge	25344 <__assert_fail@plt+0x12c58>
   25310:	mvn	r3, #0
   25314:	mvn	r2, #0
   25318:	cmp	r9, r3
   2531c:	cmpeq	r8, r2
   25320:	beq	2527c <__assert_fail@plt+0x12b90>
   25324:	mov	r3, r9
   25328:	mov	r2, r8
   2532c:	mov	r0, #0
   25330:	mov	r1, #-2147483648	; 0x80000000
   25334:	bl	39878 <__assert_fail@plt+0x2718c>
   25338:	cmp	r0, r6
   2533c:	sbcs	r3, r1, r7
   25340:	b	2526c <__assert_fail@plt+0x12b80>
   25344:	mov	r2, r6
   25348:	mov	r3, r7
   2534c:	mvn	r0, #0
   25350:	mvn	r1, #-2147483648	; 0x80000000
   25354:	b	252e8 <__assert_fail@plt+0x12bfc>
   25358:	mov	r2, #56	; 0x38
   2535c:	mov	r1, #0
   25360:	ldr	r0, [sp, #56]	; 0x38
   25364:	bl	12434 <memset@plt>
   25368:	ldr	r6, [r4, #-52]	; 0xffffffcc
   2536c:	ldr	r3, [r4, #-56]	; 0xffffffc8
   25370:	str	r3, [sp, #68]	; 0x44
   25374:	mov	sl, #0
   25378:	mov	fp, #0
   2537c:	mov	r7, #0
   25380:	mov	r9, sl
   25384:	mov	r8, fp
   25388:	b	253bc <__assert_fail@plt+0x12cd0>
   2538c:	mov	r7, #0
   25390:	mov	sl, #0
   25394:	mov	fp, #0
   25398:	mov	r2, #56	; 0x38
   2539c:	mov	r1, #0
   253a0:	ldr	r0, [sp, #56]	; 0x38
   253a4:	mov	r9, sl
   253a8:	mov	r8, fp
   253ac:	mov	r6, r7
   253b0:	bl	12434 <memset@plt>
   253b4:	mov	r3, #1
   253b8:	str	r3, [sp, #68]	; 0x44
   253bc:	strd	sl, [sp, #48]	; 0x30
   253c0:	str	sl, [sp, #60]	; 0x3c
   253c4:	str	fp, [sp, #64]	; 0x40
   253c8:	b	24a14 <__assert_fail@plt+0x12328>
   253cc:	mov	r2, #56	; 0x38
   253d0:	mov	r1, #0
   253d4:	ldr	r0, [sp, #56]	; 0x38
   253d8:	bl	12434 <memset@plt>
   253dc:	ldr	r9, [r4, #-56]	; 0xffffffc8
   253e0:	ldr	r8, [r4, #-52]	; 0xffffffcc
   253e4:	mov	r7, #0
   253e8:	mov	sl, #0
   253ec:	mov	fp, #0
   253f0:	b	250f8 <__assert_fail@plt+0x12a0c>
   253f4:	mov	r2, #56	; 0x38
   253f8:	mov	r1, #0
   253fc:	ldr	r0, [sp, #56]	; 0x38
   25400:	mov	r7, #0
   25404:	bl	12434 <memset@plt>
   25408:	mov	sl, #0
   2540c:	mov	fp, #0
   25410:	mov	r9, #1
   25414:	mov	r8, r7
   25418:	b	250f8 <__assert_fail@plt+0x12a0c>
   2541c:	mov	r2, #56	; 0x38
   25420:	mov	r1, #0
   25424:	ldr	r0, [sp, #56]	; 0x38
   25428:	bl	12434 <memset@plt>
   2542c:	ldrd	sl, [r4, #-56]	; 0xffffffc8
   25430:	mov	r7, #0
   25434:	b	25494 <__assert_fail@plt+0x12da8>
   25438:	mov	r2, #56	; 0x38
   2543c:	mov	r1, #0
   25440:	ldr	r0, [sp, #56]	; 0x38
   25444:	bl	12434 <memset@plt>
   25448:	ldr	sl, [r4, #-56]	; 0xffffffc8
   2544c:	ldr	r7, [r4, #-52]	; 0xffffffcc
   25450:	mov	r9, #0
   25454:	asr	fp, sl, #31
   25458:	mov	r8, r9
   2545c:	str	r9, [sp, #68]	; 0x44
   25460:	mov	r6, r9
   25464:	str	r9, [sp, #48]	; 0x30
   25468:	str	r9, [sp, #52]	; 0x34
   2546c:	str	r9, [sp, #60]	; 0x3c
   25470:	str	r9, [sp, #64]	; 0x40
   25474:	b	24a14 <__assert_fail@plt+0x12328>
   25478:	mov	r2, #56	; 0x38
   2547c:	mov	r1, #0
   25480:	ldr	r0, [sp, #56]	; 0x38
   25484:	bl	12434 <memset@plt>
   25488:	mov	r7, #0
   2548c:	mov	sl, #1
   25490:	mov	fp, #0
   25494:	mov	r9, r7
   25498:	b	25458 <__assert_fail@plt+0x12d6c>
   2549c:	mov	r2, #56	; 0x38
   254a0:	mov	r1, #0
   254a4:	ldr	r0, [sp, #56]	; 0x38
   254a8:	bl	12434 <memset@plt>
   254ac:	ldr	r3, [r4, #-48]	; 0xffffffd0
   254b0:	str	r3, [sp, #60]	; 0x3c
   254b4:	ldr	r3, [r4, #-44]	; 0xffffffd4
   254b8:	b	251b8 <__assert_fail@plt+0x12acc>
   254bc:	mov	r2, #56	; 0x38
   254c0:	mov	r1, #0
   254c4:	ldr	r0, [sp, #56]	; 0x38
   254c8:	bl	12434 <memset@plt>
   254cc:	ldrd	r8, [r4]
   254d0:	cmp	r8, #0
   254d4:	sbcs	r3, r9, #0
   254d8:	bge	25564 <__assert_fail@plt+0x12e78>
   254dc:	ldrd	r6, [r4, #-48]	; 0xffffffd0
   254e0:	cmp	r6, #0
   254e4:	sbcs	r3, r7, #0
   254e8:	bge	2552c <__assert_fail@plt+0x12e40>
   254ec:	mov	r3, r9
   254f0:	mov	r2, r8
   254f4:	mvn	r0, #0
   254f8:	mvn	r1, #-2147483648	; 0x80000000
   254fc:	bl	39878 <__assert_fail@plt+0x2718c>
   25500:	cmp	r6, r0
   25504:	sbcs	r3, r7, r1
   25508:	movlt	r3, #1
   2550c:	movge	r3, #0
   25510:	cmp	r3, #0
   25514:	bne	24cbc <__assert_fail@plt+0x125d0>
   25518:	ldr	r3, [r4, #-44]	; 0xffffffd4
   2551c:	ldr	r6, [r4, #-48]	; 0xffffffd0
   25520:	mul	r3, r8, r3
   25524:	mla	r3, r6, r9, r3
   25528:	b	2528c <__assert_fail@plt+0x12ba0>
   2552c:	mvn	r3, #0
   25530:	cmp	r9, r3
   25534:	mvn	r2, #0
   25538:	cmpeq	r8, r2
   2553c:	moveq	r3, #0
   25540:	beq	25510 <__assert_fail@plt+0x12e24>
   25544:	mov	r2, r8
   25548:	mov	r3, r9
   2554c:	mov	r0, #0
   25550:	mov	r1, #-2147483648	; 0x80000000
   25554:	bl	39878 <__assert_fail@plt+0x2718c>
   25558:	cmp	r0, r6
   2555c:	sbcs	r3, r1, r7
   25560:	b	25508 <__assert_fail@plt+0x12e1c>
   25564:	orrs	r3, r8, r9
   25568:	beq	25518 <__assert_fail@plt+0x12e2c>
   2556c:	ldrd	r6, [r4, #-48]	; 0xffffffd0
   25570:	cmp	r6, #0
   25574:	sbcs	r3, r7, #0
   25578:	bge	255b0 <__assert_fail@plt+0x12ec4>
   2557c:	mvn	r3, #0
   25580:	mvn	r2, #0
   25584:	cmp	r7, r3
   25588:	cmpeq	r6, r2
   2558c:	beq	25518 <__assert_fail@plt+0x12e2c>
   25590:	mov	r3, r7
   25594:	mov	r2, r6
   25598:	mov	r0, #0
   2559c:	mov	r1, #-2147483648	; 0x80000000
   255a0:	bl	39878 <__assert_fail@plt+0x2718c>
   255a4:	cmp	r0, r8
   255a8:	sbcs	r3, r1, r9
   255ac:	b	25508 <__assert_fail@plt+0x12e1c>
   255b0:	mov	r2, r8
   255b4:	mov	r3, r9
   255b8:	mvn	r0, #0
   255bc:	mvn	r1, #-2147483648	; 0x80000000
   255c0:	b	25554 <__assert_fail@plt+0x12e68>
   255c4:	mov	r2, #56	; 0x38
   255c8:	mov	r1, #0
   255cc:	ldr	r0, [sp, #56]	; 0x38
   255d0:	bl	12434 <memset@plt>
   255d4:	ldr	r3, [r4, #-48]	; 0xffffffd0
   255d8:	ldr	r6, [r4, #-44]	; 0xffffffd4
   255dc:	str	r3, [sp, #68]	; 0x44
   255e0:	b	25374 <__assert_fail@plt+0x12c88>
   255e4:	mov	r2, #56	; 0x38
   255e8:	mov	r1, #0
   255ec:	ldr	r0, [sp, #56]	; 0x38
   255f0:	bl	12434 <memset@plt>
   255f4:	ldr	r9, [r4, #-48]	; 0xffffffd0
   255f8:	ldr	r8, [r4, #-44]	; 0xffffffd4
   255fc:	b	253e4 <__assert_fail@plt+0x12cf8>
   25600:	mov	r2, #56	; 0x38
   25604:	mov	r1, #0
   25608:	ldr	r0, [sp, #56]	; 0x38
   2560c:	bl	12434 <memset@plt>
   25610:	ldrd	sl, [r4, #-48]	; 0xffffffd0
   25614:	b	25430 <__assert_fail@plt+0x12d44>
   25618:	mov	r2, #56	; 0x38
   2561c:	mov	r1, #0
   25620:	ldr	r0, [sp, #56]	; 0x38
   25624:	bl	12434 <memset@plt>
   25628:	ldrd	r2, [r4]
   2562c:	strd	r2, [sp, #48]	; 0x30
   25630:	b	252a0 <__assert_fail@plt+0x12bb4>
   25634:	ldrd	r2, [r4, #8]
   25638:	mov	r1, #0
   2563c:	mvn	r0, #0
   25640:	strd	r2, [sp, #80]	; 0x50
   25644:	adds	r2, r2, #-2147483648	; 0x80000000
   25648:	adc	r3, r3, #0
   2564c:	cmp	r3, r1
   25650:	cmpeq	r2, r0
   25654:	bhi	24cbc <__assert_fail@plt+0x125d0>
   25658:	ldr	r3, [sp, #80]	; 0x50
   2565c:	str	r3, [sp, #240]	; 0xf0
   25660:	mov	r3, #0
   25664:	str	r3, [sp, #244]	; 0xf4
   25668:	b	24a14 <__assert_fail@plt+0x12328>
   2566c:	add	r3, r4, #8
   25670:	ldm	r3, {r0, r1, r2, r3}
   25674:	stm	sp, {r0, r1, r2, r3}
   25678:	mov	r0, r5
   2567c:	ldm	r4, {r2, r3}
   25680:	bl	23680 <__assert_fail@plt+0x10f94>
   25684:	b	24a14 <__assert_fail@plt+0x12328>
   25688:	sub	r3, r4, #48	; 0x30
   2568c:	ldm	r3, {r0, r1, r2, r3}
   25690:	stm	sp, {r0, r1, r2, r3}
   25694:	sub	r3, r4, #56	; 0x38
   25698:	mov	r0, r5
   2569c:	ldm	r3, {r2, r3}
   256a0:	bl	23680 <__assert_fail@plt+0x10f94>
   256a4:	mov	r3, #1
   256a8:	str	r3, [sp, #44]	; 0x2c
   256ac:	ldr	r3, [r4, #48]	; 0x30
   256b0:	str	r3, [sp, #40]	; 0x28
   256b4:	ldrd	r2, [r4, #40]	; 0x28
   256b8:	strd	r2, [sp, #32]
   256bc:	ldrd	r2, [r4, #32]
   256c0:	strd	r2, [sp, #24]
   256c4:	ldrd	r2, [r4, #24]
   256c8:	strd	r2, [sp, #16]
   256cc:	ldrd	r2, [r4, #16]
   256d0:	strd	r2, [sp, #8]
   256d4:	ldrd	r2, [r4, #8]
   256d8:	strd	r2, [sp]
   256dc:	ldrd	r2, [r4]
   256e0:	b	250c0 <__assert_fail@plt+0x129d4>
   256e4:	mvn	r2, #0
   256e8:	mvn	r3, #0
   256ec:	strd	r2, [sp, #240]	; 0xf0
   256f0:	b	24a14 <__assert_fail@plt+0x12328>
   256f4:	ldrd	r2, [r4, #8]
   256f8:	b	256ec <__assert_fail@plt+0x13000>
   256fc:	ldr	r3, [sp, #92]	; 0x5c
   25700:	cmp	r3, #3
   25704:	bne	25720 <__assert_fail@plt+0x13034>
   25708:	ldr	r3, [sp, #72]	; 0x48
   2570c:	cmp	r3, #0
   25710:	mvngt	r3, #1
   25714:	strgt	r3, [sp, #72]	; 0x48
   25718:	bgt	25720 <__assert_fail@plt+0x13034>
   2571c:	beq	24cbc <__assert_fail@plt+0x125d0>
   25720:	add	sl, r2, sl
   25724:	add	sl, sl, #1680	; 0x690
   25728:	ldrsb	r3, [sl, #12]
   2572c:	cmn	r3, #93	; 0x5d
   25730:	beq	25760 <__assert_fail@plt+0x13074>
   25734:	add	r3, r3, #1
   25738:	cmp	r3, #112	; 0x70
   2573c:	bhi	25760 <__assert_fail@plt+0x13074>
   25740:	add	r3, r2, r3
   25744:	ldrb	r1, [r3, #2084]	; 0x824
   25748:	cmp	r1, #1
   2574c:	bne	25760 <__assert_fail@plt+0x13074>
   25750:	ldrb	r3, [r3, #2197]	; 0x895
   25754:	cmp	r3, #0
   25758:	str	r3, [sp, #76]	; 0x4c
   2575c:	bne	25780 <__assert_fail@plt+0x13094>
   25760:	ldr	r3, [sp, #88]	; 0x58
   25764:	add	r1, sp, #144	; 0x90
   25768:	cmp	r3, r1
   2576c:	beq	24cbc <__assert_fail@plt+0x125d0>
   25770:	ldrsh	sl, [r3, #-2]!
   25774:	sub	r4, r4, #56	; 0x38
   25778:	str	r3, [sp, #88]	; 0x58
   2577c:	b	25720 <__assert_fail@plt+0x13034>
   25780:	ldrd	r2, [sp, #104]	; 0x68
   25784:	add	ip, sp, #184	; 0xb8
   25788:	add	r4, r4, #56	; 0x38
   2578c:	strd	r2, [sp, #192]	; 0xc0
   25790:	ldr	r3, [sp, #100]	; 0x64
   25794:	mov	lr, r4
   25798:	str	r3, [sp, #200]	; 0xc8
   2579c:	ldm	ip!, {r0, r1, r2, r3}
   257a0:	stmia	lr!, {r0, r1, r2, r3}
   257a4:	ldm	ip!, {r0, r1, r2, r3}
   257a8:	stmia	lr!, {r0, r1, r2, r3}
   257ac:	ldm	ip!, {r0, r1, r2, r3}
   257b0:	stmia	lr!, {r0, r1, r2, r3}
   257b4:	mov	r3, #3
   257b8:	ldm	ip, {r0, r1}
   257bc:	stm	lr, {r0, r1}
   257c0:	str	r3, [sp, #92]	; 0x5c
   257c4:	b	24730 <__assert_fail@plt+0x12044>
   257c8:	mov	r0, #2
   257cc:	b	24cc0 <__assert_fail@plt+0x125d4>
   257d0:	mov	r0, #0
   257d4:	b	24cc0 <__assert_fail@plt+0x125d4>
   257d8:	add	r8, r8, #1
   257dc:	str	r8, [r5]
   257e0:	b	24314 <__assert_fail@plt+0x11c28>
   257e4:	tst	r3, #253	; 0xfd
   257e8:	beq	24340 <__assert_fail@plt+0x11c54>
   257ec:	cmp	r6, #65	; 0x41
   257f0:	bcc	25918 <__assert_fail@plt+0x1322c>
   257f4:	cmp	r6, #90	; 0x5a
   257f8:	bls	25808 <__assert_fail@plt+0x1311c>
   257fc:	sub	r3, r6, #97	; 0x61
   25800:	cmp	r3, #25
   25804:	bhi	25918 <__assert_fail@plt+0x1322c>
   25808:	add	r3, sp, #124	; 0x7c
   2580c:	mov	r7, r3
   25810:	add	r2, sp, #143	; 0x8f
   25814:	ldr	r1, [r5]
   25818:	cmp	r3, r2
   2581c:	add	r0, r1, #1
   25820:	strbcc	r6, [r3]
   25824:	str	r0, [r5]
   25828:	ldrb	r6, [r1, #1]
   2582c:	addcc	r3, r3, #1
   25830:	cmp	r6, #65	; 0x41
   25834:	bcc	2584c <__assert_fail@plt+0x13160>
   25838:	cmp	r6, #90	; 0x5a
   2583c:	bls	25814 <__assert_fail@plt+0x13128>
   25840:	sub	r1, r6, #97	; 0x61
   25844:	cmp	r1, #25
   25848:	bls	25814 <__assert_fail@plt+0x13128>
   2584c:	cmp	r6, #46	; 0x2e
   25850:	beq	25814 <__assert_fail@plt+0x13128>
   25854:	mov	r2, #0
   25858:	strb	r2, [r3]
   2585c:	mov	r2, r7
   25860:	ldrb	r3, [r2]
   25864:	cmp	r3, #0
   25868:	bne	24588 <__assert_fail@plt+0x11e9c>
   2586c:	ldr	r6, [pc, #-1824]	; 25154 <__assert_fail@plt+0x12a68>
   25870:	ldr	fp, [r6]
   25874:	cmp	fp, #0
   25878:	bne	2459c <__assert_fail@plt+0x11eb0>
   2587c:	mov	r0, r7
   25880:	bl	123bc <strlen@plt>
   25884:	cmp	r0, #3
   25888:	mov	r8, r0
   2588c:	moveq	fp, #1
   25890:	beq	258a8 <__assert_fail@plt+0x131bc>
   25894:	cmp	r0, #4
   25898:	ldrbeq	fp, [sp, #127]	; 0x7f
   2589c:	subeq	fp, fp, #46	; 0x2e
   258a0:	clzeq	fp, fp
   258a4:	lsreq	fp, fp, #5
   258a8:	ldr	r6, [pc, #-1880]	; 25158 <__assert_fail@plt+0x12a6c>
   258ac:	mov	r9, #3
   258b0:	ldr	r1, [r6]
   258b4:	cmp	r1, #0
   258b8:	bne	245b8 <__assert_fail@plt+0x11ecc>
   258bc:	mov	r1, r7
   258c0:	mov	r0, r5
   258c4:	bl	241f8 <__assert_fail@plt+0x11b0c>
   258c8:	subs	r6, r0, #0
   258cc:	bne	258ec <__assert_fail@plt+0x13200>
   258d0:	ldr	r1, [pc, #-1916]	; 2515c <__assert_fail@plt+0x12a70>
   258d4:	mov	r0, r7
   258d8:	bl	11ffc <strcmp@plt>
   258dc:	cmp	r0, #0
   258e0:	ldrne	r6, [pc, #-1928]	; 25160 <__assert_fail@plt+0x12a74>
   258e4:	bne	24604 <__assert_fail@plt+0x11f18>
   258e8:	ldr	r6, [pc, #-1932]	; 25164 <__assert_fail@plt+0x12a78>
   258ec:	ldr	r2, [r6, #8]
   258f0:	asr	r3, r2, #31
   258f4:	strd	r2, [sp, #184]	; 0xb8
   258f8:	ldr	r3, [r6, #4]
   258fc:	str	r3, [sp, #72]	; 0x48
   25900:	ldr	r3, [sp, #72]	; 0x48
   25904:	cmp	r3, #0
   25908:	bgt	24690 <__assert_fail@plt+0x11fa4>
   2590c:	mov	r3, #0
   25910:	str	r3, [sp, #72]	; 0x48
   25914:	b	246a4 <__assert_fail@plt+0x11fb8>
   25918:	cmp	r6, #40	; 0x28
   2591c:	bne	247c0 <__assert_fail@plt+0x120d4>
   25920:	mov	r0, #0
   25924:	ldr	r3, [r5]
   25928:	add	ip, r3, #1
   2592c:	str	ip, [r5]
   25930:	ldrb	r3, [r3]
   25934:	cmp	r3, #0
   25938:	beq	25910 <__assert_fail@plt+0x13224>
   2593c:	cmp	r3, #40	; 0x28
   25940:	addeq	r0, r0, #1
   25944:	beq	25950 <__assert_fail@plt+0x13264>
   25948:	cmp	r3, #41	; 0x29
   2594c:	subeq	r0, r0, #1
   25950:	cmp	r0, #0
   25954:	bne	25924 <__assert_fail@plt+0x13238>
   25958:	b	24314 <__assert_fail@plt+0x11c28>
   2595c:	cmp	r9, #0
   25960:	subge	r1, r6, #-2147483599	; 0x80000031
   25964:	bge	244b0 <__assert_fail@plt+0x11dc4>
   25968:	rsb	r0, r9, #-2147483648	; 0x80000000
   2596c:	cmp	r0, r1
   25970:	movle	r1, #0
   25974:	movgt	r1, #1
   25978:	b	24400 <__assert_fail@plt+0x11d14>
   2597c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25980:	sub	sp, sp, #612	; 0x264
   25984:	subs	r7, r2, #0
   25988:	str	r0, [sp, #36]	; 0x24
   2598c:	mov	r4, r1
   25990:	str	r3, [sp, #16]
   25994:	bne	259a4 <__assert_fail@plt+0x132b8>
   25998:	add	r0, sp, #52	; 0x34
   2599c:	bl	38b30 <__assert_fail@plt+0x26444>
   259a0:	add	r7, sp, #52	; 0x34
   259a4:	ldm	r7, {r5, r6}
   259a8:	ldr	r2, [pc, #1952]	; 26150 <__assert_fail@plt+0x13a64>
   259ac:	mov	r1, r4
   259b0:	mov	r0, #1
   259b4:	mov	r8, r1
   259b8:	add	r1, r1, #1
   259bc:	ldrb	r3, [r8]
   259c0:	sub	r3, r3, #9
   259c4:	cmp	r3, #23
   259c8:	bhi	259d4 <__assert_fail@plt+0x132e8>
   259cc:	ands	r3, r2, r0, lsl r3
   259d0:	bne	259b4 <__assert_fail@plt+0x132c8>
   259d4:	mov	r2, #56	; 0x38
   259d8:	mov	r1, #0
   259dc:	add	r0, sp, #224	; 0xe0
   259e0:	bl	12434 <memset@plt>
   259e4:	mov	r2, #4
   259e8:	ldr	r1, [pc, #1892]	; 26154 <__assert_fail@plt+0x13a68>
   259ec:	mov	r0, r8
   259f0:	bl	1268c <strncmp@plt>
   259f4:	cmp	r0, #0
   259f8:	addeq	r4, r8, #4
   259fc:	moveq	r3, r4
   25a00:	moveq	r0, #1
   25a04:	beq	25d1c <__assert_fail@plt+0x13630>
   25a08:	b	25a28 <__assert_fail@plt+0x1333c>
   25a0c:	cmp	r2, #92	; 0x5c
   25a10:	bne	25a3c <__assert_fail@plt+0x13350>
   25a14:	add	r2, r3, #1
   25a18:	ldrb	r3, [r3, #1]
   25a1c:	cmp	r3, #92	; 0x5c
   25a20:	cmpne	r3, #34	; 0x22
   25a24:	beq	25d14 <__assert_fail@plt+0x13628>
   25a28:	ldr	r3, [sp, #16]
   25a2c:	str	r3, [sp, #4]
   25a30:	mov	r3, #0
   25a34:	str	r3, [sp, #8]
   25a38:	b	25ac8 <__assert_fail@plt+0x133dc>
   25a3c:	cmp	r2, #34	; 0x22
   25a40:	bne	25d10 <__assert_fail@plt+0x13624>
   25a44:	cmp	r0, #100	; 0x64
   25a48:	movle	r3, #0
   25a4c:	addle	r0, sp, #284	; 0x11c
   25a50:	strle	r3, [sp, #8]
   25a54:	ble	25a70 <__assert_fail@plt+0x13384>
   25a58:	bl	2bf10 <__assert_fail@plt+0x19824>
   25a5c:	subs	r3, r0, #0
   25a60:	str	r3, [sp, #8]
   25a64:	movne	r0, r3
   25a68:	ldreq	r9, [sp, #8]
   25a6c:	beq	25cdc <__assert_fail@plt+0x135f0>
   25a70:	mov	r2, r0
   25a74:	ldrb	r3, [r4]
   25a78:	cmp	r3, #34	; 0x22
   25a7c:	bne	25cf0 <__assert_fail@plt+0x13604>
   25a80:	mov	r3, #0
   25a84:	strb	r3, [r2]
   25a88:	bl	38104 <__assert_fail@plt+0x25a18>
   25a8c:	subs	r3, r0, #0
   25a90:	str	r3, [sp, #4]
   25a94:	ldreq	r9, [sp, #4]
   25a98:	beq	25cdc <__assert_fail@plt+0x135f0>
   25a9c:	ldr	r2, [pc, #1708]	; 26150 <__assert_fail@plt+0x13a64>
   25aa0:	add	r4, r4, #1
   25aa4:	mov	r1, #1
   25aa8:	mov	r8, r4
   25aac:	add	r4, r4, #1
   25ab0:	ldrb	r3, [r8]
   25ab4:	sub	r3, r3, #9
   25ab8:	cmp	r3, #23
   25abc:	bhi	25ac8 <__assert_fail@plt+0x133dc>
   25ac0:	ands	r3, r2, r1, lsl r3
   25ac4:	bne	25aa8 <__assert_fail@plt+0x133bc>
   25ac8:	add	r2, sp, #136	; 0x88
   25acc:	mov	r1, r7
   25ad0:	ldr	r0, [sp, #4]
   25ad4:	bl	3839c <__assert_fail@plt+0x25cb0>
   25ad8:	cmp	r0, #0
   25adc:	beq	26ad0 <__assert_fail@plt+0x143e4>
   25ae0:	ldrb	r2, [r8]
   25ae4:	ldr	r1, [sp, #156]	; 0x9c
   25ae8:	ldr	r3, [pc, #1640]	; 26158 <__assert_fail@plt+0x13a6c>
   25aec:	cmp	r2, #0
   25af0:	ldr	r2, [pc, #1636]	; 2615c <__assert_fail@plt+0x13a70>
   25af4:	moveq	r8, r3
   25af8:	adds	r2, r2, r1
   25afc:	mov	r3, #0
   25b00:	adc	r3, r3, r1, asr #31
   25b04:	add	r1, sp, #424	; 0x1a8
   25b08:	add	lr, sp, #224	; 0xe0
   25b0c:	strd	r2, [r1]
   25b10:	ldr	r2, [sp, #152]	; 0x98
   25b14:	add	r1, sp, #440	; 0x1b8
   25b18:	add	r2, r2, #1
   25b1c:	add	ip, sp, #480	; 0x1e0
   25b20:	asr	r3, r2, #31
   25b24:	str	r6, [sp, #476]	; 0x1dc
   25b28:	strd	r2, [r1]
   25b2c:	ldr	r2, [sp, #148]	; 0x94
   25b30:	add	r1, sp, #448	; 0x1c0
   25b34:	ldr	r6, [sp, #168]	; 0xa8
   25b38:	asr	r3, r2, #31
   25b3c:	mov	r4, #0
   25b40:	strd	r2, [r1]
   25b44:	ldr	r2, [sp, #144]	; 0x90
   25b48:	add	r1, sp, #456	; 0x1c8
   25b4c:	str	r4, [sp, #432]	; 0x1b0
   25b50:	asr	r3, r2, #31
   25b54:	str	r6, [sp, #124]	; 0x7c
   25b58:	strd	r2, [r1]
   25b5c:	ldr	r2, [sp, #140]	; 0x8c
   25b60:	add	r1, sp, #464	; 0x1d0
   25b64:	str	r8, [sp, #384]	; 0x180
   25b68:	asr	r3, r2, #31
   25b6c:	sub	r7, r5, #-2147483647	; 0x80000001
   25b70:	strd	r2, [r1]
   25b74:	ldr	r3, [sp, #136]	; 0x88
   25b78:	str	r3, [sp, #472]	; 0x1d8
   25b7c:	mov	r3, #2
   25b80:	str	r3, [sp, #412]	; 0x19c
   25b84:	ldm	lr!, {r0, r1, r2, r3}
   25b88:	stmia	ip!, {r0, r1, r2, r3}
   25b8c:	ldm	lr!, {r0, r1, r2, r3}
   25b90:	stmia	ip!, {r0, r1, r2, r3}
   25b94:	ldm	lr!, {r0, r1, r2, r3}
   25b98:	strb	r4, [sp, #536]	; 0x218
   25b9c:	strb	r4, [sp, #537]	; 0x219
   25ba0:	stmia	ip!, {r0, r1, r2, r3}
   25ba4:	ldr	r3, [sp, #176]	; 0xb0
   25ba8:	ldm	lr, {r0, r1}
   25bac:	str	r3, [sp, #572]	; 0x23c
   25bb0:	ldr	r3, [pc, #1448]	; 26160 <__assert_fail@plt+0x13a74>
   25bb4:	str	r4, [sp, #540]	; 0x21c
   25bb8:	str	r4, [sp, #544]	; 0x220
   25bbc:	str	r4, [sp, #556]	; 0x22c
   25bc0:	str	r4, [sp, #548]	; 0x224
   25bc4:	str	r4, [sp, #552]	; 0x228
   25bc8:	str	r4, [sp, #560]	; 0x230
   25bcc:	strb	r4, [sp, #564]	; 0x234
   25bd0:	strb	r4, [sp, #565]	; 0x235
   25bd4:	strb	r4, [sp, #566]	; 0x236
   25bd8:	strb	r4, [sp, #568]	; 0x238
   25bdc:	strb	r4, [sp, #567]	; 0x237
   25be0:	strb	r4, [sp, #569]	; 0x239
   25be4:	strb	r4, [sp, #570]	; 0x23a
   25be8:	strb	r4, [sp, #571]	; 0x23b
   25bec:	stm	ip, {r0, r1}
   25bf0:	str	r3, [sp, #576]	; 0x240
   25bf4:	str	r6, [sp, #580]	; 0x244
   25bf8:	str	r4, [sp, #584]	; 0x248
   25bfc:	ldr	r6, [pc, #1376]	; 26164 <__assert_fail@plt+0x13a78>
   25c00:	ldr	r4, [pc, #1376]	; 26168 <__assert_fail@plt+0x13a7c>
   25c04:	cmp	r5, #0
   25c08:	blt	25c14 <__assert_fail@plt+0x13528>
   25c0c:	cmp	r5, r4
   25c10:	bgt	25c68 <__assert_fail@plt+0x1357c>
   25c14:	add	r1, sp, #608	; 0x260
   25c18:	sub	r3, r7, r4
   25c1c:	str	r3, [r1, #-548]!	; 0xfffffddc
   25c20:	add	r2, sp, #180	; 0xb4
   25c24:	ldr	r0, [sp, #4]
   25c28:	bl	3839c <__assert_fail@plt+0x25cb0>
   25c2c:	cmp	r0, #0
   25c30:	beq	25d38 <__assert_fail@plt+0x1364c>
   25c34:	ldr	r2, [sp, #220]	; 0xdc
   25c38:	cmp	r2, #0
   25c3c:	beq	25d38 <__assert_fail@plt+0x1364c>
   25c40:	ldr	r3, [sp, #212]	; 0xd4
   25c44:	ldr	r1, [sp, #580]	; 0x244
   25c48:	cmp	r3, r1
   25c4c:	beq	25d38 <__assert_fail@plt+0x1364c>
   25c50:	str	r2, [sp, #584]	; 0x248
   25c54:	ldr	r2, [pc, #1284]	; 26160 <__assert_fail@plt+0x13a74>
   25c58:	str	r3, [sp, #592]	; 0x250
   25c5c:	mov	r3, #0
   25c60:	str	r2, [sp, #588]	; 0x24c
   25c64:	str	r3, [sp, #596]	; 0x254
   25c68:	ldr	r0, [sp, #572]	; 0x23c
   25c6c:	cmp	r0, #0
   25c70:	beq	25c94 <__assert_fail@plt+0x135a8>
   25c74:	ldr	r1, [sp, #584]	; 0x248
   25c78:	cmp	r1, #0
   25c7c:	beq	25c94 <__assert_fail@plt+0x135a8>
   25c80:	bl	11ffc <strcmp@plt>
   25c84:	cmp	r0, #0
   25c88:	mvneq	r3, #0
   25c8c:	streq	r3, [sp, #580]	; 0x244
   25c90:	streq	r0, [sp, #584]	; 0x248
   25c94:	add	r0, sp, #384	; 0x180
   25c98:	bl	24290 <__assert_fail@plt+0x11ba4>
   25c9c:	subs	r3, r0, #0
   25ca0:	str	r3, [sp, #12]
   25ca4:	bne	26ad0 <__assert_fail@plt+0x143e4>
   25ca8:	ldrb	r9, [sp, #536]	; 0x218
   25cac:	cmp	r9, #0
   25cb0:	beq	25d4c <__assert_fail@plt+0x13660>
   25cb4:	add	r3, sp, #472	; 0x1d8
   25cb8:	ldm	r3, {r0, r1}
   25cbc:	ldr	r3, [sp, #36]	; 0x24
   25cc0:	stm	r3, {r0, r1}
   25cc4:	ldr	r3, [sp, #4]
   25cc8:	ldr	r2, [sp, #16]
   25ccc:	cmp	r3, r2
   25cd0:	beq	25cdc <__assert_fail@plt+0x135f0>
   25cd4:	mov	r0, r3
   25cd8:	bl	38290 <__assert_fail@plt+0x25ba4>
   25cdc:	ldr	r0, [sp, #8]
   25ce0:	bl	2a01c <__assert_fail@plt+0x17930>
   25ce4:	mov	r0, r9
   25ce8:	add	sp, sp, #612	; 0x264
   25cec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25cf0:	sub	r3, r3, #92	; 0x5c
   25cf4:	clz	r3, r3
   25cf8:	lsr	r3, r3, #5
   25cfc:	add	r1, r4, r3
   25d00:	ldrb	r3, [r4, r3]
   25d04:	add	r4, r1, #1
   25d08:	strb	r3, [r2], #1
   25d0c:	b	25a74 <__assert_fail@plt+0x13388>
   25d10:	mov	r2, r3
   25d14:	add	r3, r2, #1
   25d18:	add	r0, r0, #1
   25d1c:	ldrb	r2, [r3]
   25d20:	cmp	r2, #0
   25d24:	bne	25a0c <__assert_fail@plt+0x13320>
   25d28:	ldr	r3, [sp, #16]
   25d2c:	str	r2, [sp, #8]
   25d30:	str	r3, [sp, #4]
   25d34:	b	25ac8 <__assert_fail@plt+0x133dc>
   25d38:	sub	r4, r4, #7733248	; 0x760000
   25d3c:	sub	r4, r4, #42752	; 0xa700
   25d40:	cmp	r4, r6
   25d44:	bne	25c04 <__assert_fail@plt+0x13518>
   25d48:	b	25c68 <__assert_fail@plt+0x1357c>
   25d4c:	ldr	r0, [sp, #556]	; 0x22c
   25d50:	ldr	r1, [sp, #540]	; 0x21c
   25d54:	ldr	ip, [sp, #544]	; 0x220
   25d58:	orr	r8, r0, r1
   25d5c:	ldr	lr, [sp, #548]	; 0x224
   25d60:	ldr	r3, [sp, #552]	; 0x228
   25d64:	ldr	r2, [sp, #560]	; 0x230
   25d68:	orr	r8, r8, ip
   25d6c:	orr	r3, r8, r3
   25d70:	add	r2, lr, r2
   25d74:	orr	r3, r3, r2
   25d78:	cmp	r3, #1
   25d7c:	bgt	26ad0 <__assert_fail@plt+0x143e4>
   25d80:	add	r3, sp, #424	; 0x1a8
   25d84:	ldrd	r2, [r3]
   25d88:	cmp	r2, #0
   25d8c:	sbcs	r4, r3, #0
   25d90:	blt	2617c <__assert_fail@plt+0x13a90>
   25d94:	ldr	r4, [sp, #432]	; 0x1b0
   25d98:	cmp	r4, #2
   25d9c:	bne	25dbc <__assert_fail@plt+0x136d0>
   25da0:	cmp	r2, #69	; 0x45
   25da4:	sbcs	r4, r3, #0
   25da8:	movlt	r4, #2000	; 0x7d0
   25dac:	ldrge	r4, [pc, #936]	; 2615c <__assert_fail@plt+0x13a70>
   25db0:	mov	r5, #0
   25db4:	adds	r2, r2, r4
   25db8:	adc	r3, r3, r5
   25dbc:	ldr	r4, [pc, #936]	; 2616c <__assert_fail@plt+0x13a80>
   25dc0:	mov	r5, #0
   25dc4:	cmp	r4, r2
   25dc8:	sbcs	r4, r5, r3
   25dcc:	sub	r2, r2, #1888	; 0x760
   25dd0:	sublt	r2, r2, #12
   25dd4:	strlt	r2, [sp, #112]	; 0x70
   25dd8:	blt	26ad0 <__assert_fail@plt+0x143e4>
   25ddc:	sub	r2, r2, #12
   25de0:	str	r2, [sp, #112]	; 0x70
   25de4:	b	261c4 <__assert_fail@plt+0x13ad8>
   25de8:	cmp	sl, #-2147483648	; 0x80000000
   25dec:	sbcs	r3, fp, #0
   25df0:	b	26220 <__assert_fail@plt+0x13b34>
   25df4:	subs	r0, r2, #1
   25df8:	sbc	r1, r3, #0
   25dfc:	cmp	r1, #0
   25e00:	cmpeq	r0, #10
   25e04:	bls	26288 <__assert_fail@plt+0x13b9c>
   25e08:	cmp	r3, #0
   25e0c:	cmpeq	r2, #12
   25e10:	mvnne	r2, #0
   25e14:	moveq	r2, #0
   25e18:	b	26288 <__assert_fail@plt+0x13b9c>
   25e1c:	subs	r0, r2, #1
   25e20:	sbc	r1, r3, #0
   25e24:	cmp	r1, #0
   25e28:	cmpeq	r0, #10
   25e2c:	addls	r2, r2, #12
   25e30:	bls	26288 <__assert_fail@plt+0x13b9c>
   25e34:	cmp	r3, #0
   25e38:	cmpeq	r2, #12
   25e3c:	mvnne	r2, #0
   25e40:	moveq	r2, #12
   25e44:	b	26288 <__assert_fail@plt+0x13b9c>
   25e48:	ldr	r3, [sp]
   25e4c:	str	r3, [sp, #92]	; 0x5c
   25e50:	str	r3, [sp, #96]	; 0x60
   25e54:	str	r3, [sp, #100]	; 0x64
   25e58:	str	r3, [sp, #476]	; 0x1dc
   25e5c:	b	262a4 <__assert_fail@plt+0x13bb8>
   25e60:	cmp	r4, #1
   25e64:	sbcs	r3, r5, #0
   25e68:	ldrlt	r3, [sp]
   25e6c:	blt	25e80 <__assert_fail@plt+0x13794>
   25e70:	ldr	r2, [sp, #400]	; 0x190
   25e74:	ldr	r3, [sp, #116]	; 0x74
   25e78:	subs	r3, r3, r2
   25e7c:	movne	r3, #1
   25e80:	subs	r0, r4, r3
   25e84:	sbc	r1, r5, r3, asr #31
   25e88:	add	r3, pc, #680	; 0x2a8
   25e8c:	ldrd	r2, [r3]
   25e90:	cmp	r2, r0
   25e94:	sbcs	r3, r3, r1
   25e98:	movlt	r9, #1
   25e9c:	movge	r9, #0
   25ea0:	b	26594 <__assert_fail@plt+0x13ea8>
   25ea4:	bl	394a0 <__assert_fail@plt+0x26db4>
   25ea8:	subs	r2, r1, #0
   25eac:	blt	26638 <__assert_fail@plt+0x13f4c>
   25eb0:	mvn	r0, #0
   25eb4:	mvn	r1, #-2147483648	; 0x80000000
   25eb8:	subs	r0, r0, r4
   25ebc:	sbc	r1, r1, r5
   25ec0:	asr	r3, r2, #31
   25ec4:	b	26620 <__assert_fail@plt+0x13f34>
   25ec8:	cmp	r2, #0
   25ecc:	sbcs	r1, r3, #0
   25ed0:	bge	25efc <__assert_fail@plt+0x13810>
   25ed4:	mov	r0, #-2147483648	; 0x80000000
   25ed8:	subs	r0, r0, r2
   25edc:	mvn	r1, #0
   25ee0:	sbc	r1, r1, r3
   25ee4:	asr	r5, ip, #31
   25ee8:	cmp	ip, r0
   25eec:	sbcs	r1, r5, r1
   25ef0:	movlt	r1, #1
   25ef4:	movge	r1, #0
   25ef8:	b	266a8 <__assert_fail@plt+0x13fbc>
   25efc:	mvn	r0, #-2147483648	; 0x80000000
   25f00:	sub	r0, r0, ip
   25f04:	cmp	r0, r2
   25f08:	asr	r1, r0, #31
   25f0c:	sbcs	r1, r1, r3
   25f10:	b	25ef0 <__assert_fail@plt+0x13804>
   25f14:	cmp	r2, #0
   25f18:	mvn	r0, #-2147483648	; 0x80000000
   25f1c:	mov	r1, #0
   25f20:	bge	25f38 <__assert_fail@plt+0x1384c>
   25f24:	adds	r4, r6, r2
   25f28:	adc	r5, r7, r2, asr #31
   25f2c:	cmp	r0, r4
   25f30:	sbcs	r3, r1, r5
   25f34:	b	26734 <__assert_fail@plt+0x14048>
   25f38:	cmp	r0, r6
   25f3c:	sbcs	r3, r1, r7
   25f40:	blt	26ad0 <__assert_fail@plt+0x143e4>
   25f44:	subs	r0, r0, r6
   25f48:	sbc	r1, r1, r7
   25f4c:	asr	r3, r2, #31
   25f50:	cmp	r0, r2
   25f54:	sbcs	r3, r1, r3
   25f58:	b	26734 <__assert_fail@plt+0x14048>
   25f5c:	cmp	r2, #0
   25f60:	mvn	r0, #-2147483648	; 0x80000000
   25f64:	mov	r1, #0
   25f68:	bge	25f80 <__assert_fail@plt+0x13894>
   25f6c:	adds	r4, r8, r2
   25f70:	adc	r5, r9, r2, asr #31
   25f74:	cmp	r0, r4
   25f78:	sbcs	r3, r1, r5
   25f7c:	b	26778 <__assert_fail@plt+0x1408c>
   25f80:	cmp	r0, r8
   25f84:	sbcs	r3, r1, r9
   25f88:	blt	26ad0 <__assert_fail@plt+0x143e4>
   25f8c:	subs	r0, r0, r8
   25f90:	sbc	r1, r1, r9
   25f94:	asr	r3, r2, #31
   25f98:	cmp	r0, r2
   25f9c:	sbcs	r3, r1, r3
   25fa0:	b	26778 <__assert_fail@plt+0x1408c>
   25fa4:	cmp	r2, #0
   25fa8:	mvn	r0, #-2147483648	; 0x80000000
   25fac:	mov	r1, #0
   25fb0:	bge	25fc8 <__assert_fail@plt+0x138dc>
   25fb4:	adds	r4, sl, r2
   25fb8:	adc	r5, fp, r2, asr #31
   25fbc:	cmp	r0, r4
   25fc0:	sbcs	r3, r1, r5
   25fc4:	b	267bc <__assert_fail@plt+0x140d0>
   25fc8:	cmp	r0, sl
   25fcc:	sbcs	r3, r1, fp
   25fd0:	blt	26ad0 <__assert_fail@plt+0x143e4>
   25fd4:	subs	r0, r0, sl
   25fd8:	sbc	r1, r1, fp
   25fdc:	asr	r3, r2, #31
   25fe0:	cmp	r0, r2
   25fe4:	sbcs	r3, r1, r3
   25fe8:	b	267bc <__assert_fail@plt+0x140d0>
   25fec:	subs	r0, r4, r2
   25ff0:	sbc	r1, r1, r3
   25ff4:	cmp	r0, #-2147483648	; 0x80000000
   25ff8:	b	26864 <__assert_fail@plt+0x14178>
   25ffc:	cmp	r4, #0
   26000:	bge	26020 <__assert_fail@plt+0x13934>
   26004:	add	r0, r4, #-2147483648	; 0x80000000
   26008:	cmp	r0, r2
   2600c:	asr	r1, r0, #31
   26010:	sbcs	r1, r1, r3
   26014:	movlt	r1, #1
   26018:	movge	r1, #0
   2601c:	b	26870 <__assert_fail@plt+0x14184>
   26020:	subs	r6, r2, #-2147483647	; 0x80000001
   26024:	adc	r7, r3, #0
   26028:	asr	r1, r4, #31
   2602c:	cmp	r6, r4
   26030:	sbcs	r1, r7, r1
   26034:	b	26014 <__assert_fail@plt+0x13928>
   26038:	add	r3, pc, #256	; 0x100
   2603c:	ldrd	r2, [r3]
   26040:	cmp	r2, r8
   26044:	sbcs	r3, r3, r9
   26048:	movlt	ip, #1
   2604c:	movge	ip, #0
   26050:	b	26934 <__assert_fail@plt+0x14248>
   26054:	cmp	r4, #0
   26058:	blt	26984 <__assert_fail@plt+0x14298>
   2605c:	mvn	r4, #0
   26060:	subs	r4, r4, r2
   26064:	mvn	r5, #-2147483648	; 0x80000000
   26068:	sbc	r5, r5, r3
   2606c:	cmp	r4, r0
   26070:	sbcs	lr, r5, r1
   26074:	b	26974 <__assert_fail@plt+0x14288>
   26078:	add	r3, pc, #200	; 0xc8
   2607c:	ldrd	r2, [r3]
   26080:	cmp	r2, r8
   26084:	sbcs	r3, r3, r9
   26088:	b	269d0 <__assert_fail@plt+0x142e4>
   2608c:	cmp	r4, #0
   26090:	sbcs	r1, r5, #0
   26094:	blt	26a20 <__assert_fail@plt+0x14334>
   26098:	mvn	r0, #0
   2609c:	subs	r0, r0, r2
   260a0:	mvn	r1, #-2147483648	; 0x80000000
   260a4:	sbc	r1, r1, r3
   260a8:	cmp	r0, r4
   260ac:	sbcs	r1, r1, r5
   260b0:	b	26a10 <__assert_fail@plt+0x14324>
   260b4:	cmp	r2, #0
   260b8:	sbcs	r1, r3, #0
   260bc:	blt	26a64 <__assert_fail@plt+0x14378>
   260c0:	mvn	r0, #0
   260c4:	subs	r0, r0, r4
   260c8:	mvn	r1, #-2147483648	; 0x80000000
   260cc:	sbc	r1, r1, r5
   260d0:	cmp	r0, r2
   260d4:	sbcs	r1, r1, r3
   260d8:	b	26a54 <__assert_fail@plt+0x14368>
   260dc:	mov	r3, #1
   260e0:	b	26aac <__assert_fail@plt+0x143c0>
   260e4:	cmp	r4, #0
   260e8:	sbcs	r3, r5, #0
   260ec:	bge	26118 <__assert_fail@plt+0x13a2c>
   260f0:	mov	r2, #-2147483648	; 0x80000000
   260f4:	subs	r2, r2, r4
   260f8:	mvn	r3, #0
   260fc:	sbc	r3, r3, r5
   26100:	asr	r1, r6, #31
   26104:	cmp	r6, r2
   26108:	sbcs	r3, r1, r3
   2610c:	movlt	r3, #1
   26110:	movge	r3, #0
   26114:	b	26ab8 <__assert_fail@plt+0x143cc>
   26118:	rsb	r2, r6, #2130706432	; 0x7f000000
   2611c:	add	r2, r2, #16711680	; 0xff0000
   26120:	add	r2, r2, #65280	; 0xff00
   26124:	add	r2, r2, #255	; 0xff
   26128:	cmp	r2, r4
   2612c:	asr	r3, r2, #31
   26130:	sbcs	r3, r3, r5
   26134:	b	2610c <__assert_fail@plt+0x13a20>
   26138:	stmdbmi	r4!, {r0, r3, r6, r9, ip, pc}
   2613c:	subne	r2, r9, #-1845493760	; 0x92000000
   26140:	mcrrcc	14, 6, r5, sp, cr15
   26144:	andeq	r1, r9, fp, lsr #20
   26148:	eorcs	r2, r2, #536870914	; 0x20000002
   2614c:	eoreq	r2, r2, #536870914	; 0x20000002
   26150:	addeq	r0, r0, pc, lsl r0
   26154:	andeq	lr, r3, ip, lsl sl
   26158:	andeq	sl, r3, sl, lsr r9
   2615c:	andeq	r0, r0, ip, ror #14
   26160:	andeq	r0, r0, sp, lsl #2
   26164:	mcrvc	3, 1, r6, cr5, cr15, {7}
   26168:	svcvc	0x008958ff
   2616c:	andhi	r0, r0, fp, ror #14
   26170:			; <UNDEFINED> instruction: 0xfffff895
   26174:			; <UNDEFINED> instruction: 0xfffff894
   26178:	andeq	lr, r3, r5, lsl sl
   2617c:	ldr	r4, [pc, #-20]	; 26170 <__assert_fail@plt+0x13a84>
   26180:	rsb	r6, r2, #-16777216	; 0xff000000
   26184:	mvn	r5, #0
   26188:	cmp	r2, r4
   2618c:	add	r6, r6, #16711680	; 0xff0000
   26190:	add	r6, r6, #63488	; 0xf800
   26194:	sbcs	r4, r3, r5
   26198:	add	r6, r6, #148	; 0x94
   2619c:	bge	261c0 <__assert_fail@plt+0x13ad4>
   261a0:	ldr	r4, [pc, #-52]	; 26174 <__assert_fail@plt+0x13a88>
   261a4:	mvn	r5, #0
   261a8:	subs	r2, r4, r2
   261ac:	sbc	r3, r5, r3
   261b0:	cmp	r2, #-2147483648	; 0x80000000
   261b4:	sbcs	r3, r3, #0
   261b8:	strge	r6, [sp, #112]	; 0x70
   261bc:	bge	26ad0 <__assert_fail@plt+0x143e4>
   261c0:	str	r6, [sp, #112]	; 0x70
   261c4:	add	r3, sp, #440	; 0x1b8
   261c8:	mov	r5, #0
   261cc:	ldrd	r2, [r3]
   261d0:	mvn	r4, #0
   261d4:	subs	r6, r2, #-2147483647	; 0x80000001
   261d8:	adc	r7, r3, #0
   261dc:	cmp	r7, r5
   261e0:	cmpeq	r6, r4
   261e4:	sub	r5, r2, #1
   261e8:	strhi	r5, [sp, #108]	; 0x6c
   261ec:	bhi	25cc4 <__assert_fail@plt+0x135d8>
   261f0:	add	r3, sp, #448	; 0x1c0
   261f4:	str	r5, [sp, #108]	; 0x6c
   261f8:	ldrd	sl, [r3]
   261fc:	cmp	sl, #0
   26200:	sbcs	r3, fp, #0
   26204:	bge	25de8 <__assert_fail@plt+0x136fc>
   26208:	mov	r2, #-2147483648	; 0x80000000
   2620c:	subs	r2, r2, sl
   26210:	mvn	r3, #0
   26214:	sbc	r3, r3, fp
   26218:	cmp	r2, #1
   2621c:	sbcs	r3, r3, #0
   26220:	movge	r3, #1
   26224:	movlt	r3, #0
   26228:	str	r3, [sp]
   2622c:	ldr	r3, [sp]
   26230:	str	sl, [sp, #104]	; 0x68
   26234:	cmp	r3, #0
   26238:	bne	25cc4 <__assert_fail@plt+0x135d8>
   2623c:	cmp	r0, #0
   26240:	bne	26260 <__assert_fail@plt+0x13b74>
   26244:	ldrb	r3, [sp, #537]	; 0x219
   26248:	cmp	r1, #0
   2624c:	cmpeq	ip, #0
   26250:	moveq	r1, #1
   26254:	movne	r1, #0
   26258:	tst	r1, r3
   2625c:	beq	25e48 <__assert_fail@plt+0x1375c>
   26260:	ldr	r1, [sp, #412]	; 0x19c
   26264:	add	r3, sp, #456	; 0x1c8
   26268:	cmp	r1, #0
   2626c:	ldrd	r2, [r3]
   26270:	beq	25df4 <__assert_fail@plt+0x13708>
   26274:	cmp	r1, #1
   26278:	beq	25e1c <__assert_fail@plt+0x13730>
   2627c:	cmp	r3, #0
   26280:	cmpeq	r2, #23
   26284:	mvnhi	r2, #0
   26288:	cmn	r2, #1
   2628c:	str	r2, [sp, #100]	; 0x64
   26290:	beq	26ad0 <__assert_fail@plt+0x143e4>
   26294:	ldr	r3, [sp, #464]	; 0x1d0
   26298:	str	r3, [sp, #96]	; 0x60
   2629c:	ldr	r3, [sp, #472]	; 0x1d8
   262a0:	str	r3, [sp, #92]	; 0x5c
   262a4:	cmp	r8, #0
   262a8:	mvnne	r3, #0
   262ac:	strne	r3, [sp, #124]	; 0x7c
   262b0:	cmp	lr, #0
   262b4:	add	r1, sp, #92	; 0x5c
   262b8:	ldrne	r3, [sp, #404]	; 0x194
   262bc:	ldr	r0, [sp, #4]
   262c0:	strne	r3, [sp, #124]	; 0x7c
   262c4:	ldr	r3, [sp, #92]	; 0x5c
   262c8:	str	sl, [sp, #192]	; 0xc0
   262cc:	str	r3, [sp, #20]
   262d0:	str	r3, [sp, #180]	; 0xb4
   262d4:	ldr	r3, [sp, #96]	; 0x60
   262d8:	str	r5, [sp, #196]	; 0xc4
   262dc:	str	r3, [sp, #24]
   262e0:	str	r3, [sp, #184]	; 0xb8
   262e4:	ldr	r3, [sp, #100]	; 0x64
   262e8:	str	r3, [sp, #28]
   262ec:	str	r3, [sp, #188]	; 0xbc
   262f0:	ldr	r3, [sp, #112]	; 0x70
   262f4:	str	r3, [sp, #40]	; 0x28
   262f8:	str	r3, [sp, #200]	; 0xc8
   262fc:	ldr	r3, [sp, #124]	; 0x7c
   26300:	str	r3, [sp, #32]
   26304:	str	r3, [sp, #212]	; 0xd4
   26308:	mvn	r3, #0
   2630c:	str	r3, [sp, #116]	; 0x74
   26310:	bl	38410 <__assert_fail@plt+0x25d24>
   26314:	add	r1, sp, #92	; 0x5c
   26318:	mov	r4, r0
   2631c:	add	r0, sp, #180	; 0xb4
   26320:	bl	237d8 <__assert_fail@plt+0x110ec>
   26324:	subs	r9, r0, #0
   26328:	bne	264b0 <__assert_fail@plt+0x13dc4>
   2632c:	ldr	r3, [sp, #560]	; 0x230
   26330:	cmp	r3, #0
   26334:	beq	26ad0 <__assert_fail@plt+0x143e4>
   26338:	ldr	r6, [sp, #408]	; 0x198
   2633c:	mov	r3, #88	; 0x58
   26340:	cmp	r6, #0
   26344:	mov	r1, #3600	; 0xe10
   26348:	mov	r0, r6
   2634c:	movge	r4, #43	; 0x2b
   26350:	movlt	r4, #45	; 0x2d
   26354:	strb	r3, [sp, #62]	; 0x3e
   26358:	strb	r3, [sp, #61]	; 0x3d
   2635c:	strb	r3, [sp, #60]	; 0x3c
   26360:	bl	39280 <__assert_fail@plt+0x26b94>
   26364:	add	r8, sp, #63	; 0x3f
   26368:	mov	r2, r4
   2636c:	ldr	r1, [pc, #-508]	; 26178 <__assert_fail@plt+0x13a8c>
   26370:	eor	r3, r0, r0, asr #31
   26374:	sub	r3, r3, r0, asr #31
   26378:	mov	r0, r8
   2637c:	bl	12590 <sprintf@plt>
   26380:	mov	r1, #3600	; 0xe10
   26384:	str	r0, [sp, #44]	; 0x2c
   26388:	add	r4, r8, r0
   2638c:	mov	r0, r6
   26390:	bl	394a0 <__assert_fail@plt+0x26db4>
   26394:	eor	r7, r1, r1, asr #31
   26398:	cmp	r1, #0
   2639c:	sub	r7, r7, r1, asr #31
   263a0:	beq	2643c <__assert_fail@plt+0x13d50>
   263a4:	mov	r1, #60	; 0x3c
   263a8:	mov	r0, r7
   263ac:	bl	394a0 <__assert_fail@plt+0x26db4>
   263b0:	ldr	r2, [sp, #44]	; 0x2c
   263b4:	mov	r3, #58	; 0x3a
   263b8:	mov	r0, r7
   263bc:	strb	r3, [r8, r2]
   263c0:	str	r3, [sp, #44]	; 0x2c
   263c4:	add	r8, r4, #3
   263c8:	mov	r6, r1
   263cc:	mov	r1, #600	; 0x258
   263d0:	bl	39280 <__assert_fail@plt+0x26b94>
   263d4:	mov	r1, #60	; 0x3c
   263d8:	add	r0, r0, #48	; 0x30
   263dc:	strb	r0, [r4, #1]
   263e0:	mov	r0, r7
   263e4:	bl	39280 <__assert_fail@plt+0x26b94>
   263e8:	mov	r1, #10
   263ec:	bl	394a0 <__assert_fail@plt+0x26db4>
   263f0:	cmp	r6, #0
   263f4:	add	r1, r1, #48	; 0x30
   263f8:	strb	r1, [r4, #2]
   263fc:	beq	26434 <__assert_fail@plt+0x13d48>
   26400:	ldr	r3, [sp, #44]	; 0x2c
   26404:	mov	r1, #10
   26408:	strb	r3, [r4, #3]
   2640c:	mov	r0, r6
   26410:	bl	39280 <__assert_fail@plt+0x26b94>
   26414:	mov	r1, #10
   26418:	add	r8, r4, #6
   2641c:	add	r0, r0, #48	; 0x30
   26420:	strb	r0, [r4, #4]
   26424:	mov	r0, r6
   26428:	bl	394a0 <__assert_fail@plt+0x26db4>
   2642c:	add	r1, r1, #48	; 0x30
   26430:	strb	r1, [r4, #5]
   26434:	mov	r3, #0
   26438:	strb	r3, [r8]
   2643c:	add	r0, sp, #60	; 0x3c
   26440:	bl	38104 <__assert_fail@plt+0x25a18>
   26444:	subs	r6, r0, #0
   26448:	beq	25cc4 <__assert_fail@plt+0x135d8>
   2644c:	ldr	r3, [sp, #20]
   26450:	add	r1, sp, #92	; 0x5c
   26454:	str	r3, [sp, #92]	; 0x5c
   26458:	ldr	r3, [sp, #24]
   2645c:	str	r5, [sp, #108]	; 0x6c
   26460:	str	r3, [sp, #96]	; 0x60
   26464:	ldr	r3, [sp, #28]
   26468:	str	sl, [sp, #104]	; 0x68
   2646c:	str	r3, [sp, #100]	; 0x64
   26470:	ldr	r3, [sp, #40]	; 0x28
   26474:	str	r3, [sp, #112]	; 0x70
   26478:	ldr	r3, [sp, #32]
   2647c:	str	r3, [sp, #124]	; 0x7c
   26480:	mvn	r3, #0
   26484:	str	r3, [sp, #116]	; 0x74
   26488:	bl	38410 <__assert_fail@plt+0x25d24>
   2648c:	add	r1, sp, #92	; 0x5c
   26490:	mov	r4, r0
   26494:	add	r0, sp, #180	; 0xb4
   26498:	bl	237d8 <__assert_fail@plt+0x110ec>
   2649c:	mov	r5, r0
   264a0:	mov	r0, r6
   264a4:	bl	38290 <__assert_fail@plt+0x25ba4>
   264a8:	cmp	r5, #0
   264ac:	beq	26ad0 <__assert_fail@plt+0x143e4>
   264b0:	ldr	r3, [sp, #544]	; 0x220
   264b4:	cmp	r3, #0
   264b8:	beq	266d8 <__assert_fail@plt+0x13fec>
   264bc:	ldr	r3, [sp, #540]	; 0x21c
   264c0:	cmp	r3, #0
   264c4:	bne	266d8 <__assert_fail@plt+0x13fec>
   264c8:	add	r3, sp, #392	; 0x188
   264cc:	ldrd	r4, [r3]
   264d0:	cmp	r4, #1
   264d4:	sbcs	r3, r5, #0
   264d8:	ldrlt	r3, [sp]
   264dc:	blt	264f0 <__assert_fail@plt+0x13e04>
   264e0:	ldr	r2, [sp, #400]	; 0x190
   264e4:	ldr	r3, [sp, #116]	; 0x74
   264e8:	subs	r3, r3, r2
   264ec:	movne	r3, #1
   264f0:	subs	r0, r4, r3
   264f4:	sbc	r1, r5, r3, asr #31
   264f8:	cmp	r0, #0
   264fc:	sbcs	r3, r1, #0
   26500:	bge	25e60 <__assert_fail@plt+0x13774>
   26504:	cmp	r4, #1
   26508:	sbcs	r3, r5, #0
   2650c:	ldrlt	r3, [sp]
   26510:	blt	26524 <__assert_fail@plt+0x13e38>
   26514:	ldr	r2, [sp, #400]	; 0x190
   26518:	ldr	r3, [sp, #116]	; 0x74
   2651c:	subs	r3, r3, r2
   26520:	movne	r3, #1
   26524:	subs	r0, r4, r3
   26528:	sbc	r1, r5, r3, asr #31
   2652c:	mvn	r3, #0
   26530:	cmp	r1, r3
   26534:	mvn	r2, #0
   26538:	cmpeq	r0, r2
   2653c:	ldreq	r9, [sp, #12]
   26540:	beq	26590 <__assert_fail@plt+0x13ea4>
   26544:	cmp	r4, #1
   26548:	sbcs	r3, r5, #0
   2654c:	ldrlt	r2, [sp]
   26550:	blt	26564 <__assert_fail@plt+0x13e78>
   26554:	ldr	r3, [sp, #400]	; 0x190
   26558:	ldr	r2, [sp, #116]	; 0x74
   2655c:	subs	r2, r2, r3
   26560:	movne	r2, #1
   26564:	subs	r0, r4, r2
   26568:	sbc	r1, r5, r2, asr #31
   2656c:	mov	r3, r1
   26570:	mov	r2, r0
   26574:	mov	r1, #-2147483648	; 0x80000000
   26578:	mov	r0, #0
   2657c:	bl	39878 <__assert_fail@plt+0x2718c>
   26580:	cmp	r0, #7
   26584:	sbcs	r3, r1, #0
   26588:	movlt	r9, #1
   2658c:	movge	r9, #0
   26590:	and	r9, r9, #1
   26594:	cmp	r9, #0
   26598:	bne	26ad0 <__assert_fail@plt+0x143e4>
   2659c:	cmp	r4, #1
   265a0:	sbcs	r3, r5, #0
   265a4:	movlt	r3, r9
   265a8:	blt	265bc <__assert_fail@plt+0x13ed0>
   265ac:	ldr	r2, [sp, #400]	; 0x190
   265b0:	ldr	r3, [sp, #116]	; 0x74
   265b4:	subs	r3, r3, r2
   265b8:	movne	r3, #1
   265bc:	subs	r4, r4, r3
   265c0:	sbc	r5, r5, r3, asr #31
   265c4:	adds	r0, r4, r4
   265c8:	adc	r1, r5, r5
   265cc:	adds	r0, r0, r4
   265d0:	adc	r1, r1, r5
   265d4:	adds	r0, r0, r0
   265d8:	adc	r1, r1, r1
   265dc:	adds	r4, r4, r0
   265e0:	adc	r5, r5, r1
   265e4:	cmp	r4, #0
   265e8:	sbcs	r3, r5, #0
   265ec:	ldr	r0, [sp, #400]	; 0x190
   265f0:	ldr	r3, [sp, #116]	; 0x74
   265f4:	mov	r1, #7
   265f8:	sub	r0, r0, r3
   265fc:	add	r0, r0, r1
   26600:	bge	25ea4 <__assert_fail@plt+0x137b8>
   26604:	bl	394a0 <__assert_fail@plt+0x26db4>
   26608:	mov	r2, #0
   2660c:	mov	r3, #-2147483648	; 0x80000000
   26610:	subs	r2, r2, r4
   26614:	sbc	r3, r3, r5
   26618:	mov	r0, r1
   2661c:	asr	r1, r1, #31
   26620:	cmp	r0, r2
   26624:	sbcs	r3, r1, r3
   26628:	movlt	r3, #1
   2662c:	movge	r3, #0
   26630:	cmp	r3, #0
   26634:	bne	26ad0 <__assert_fail@plt+0x143e4>
   26638:	ldr	r3, [sp, #116]	; 0x74
   2663c:	ldr	r0, [sp, #400]	; 0x190
   26640:	mov	r1, #7
   26644:	sub	r0, r0, r3
   26648:	add	r0, r0, r1
   2664c:	bl	394a0 <__assert_fail@plt+0x26db4>
   26650:	ldr	ip, [sp, #104]	; 0x68
   26654:	adds	r2, r4, r1
   26658:	adc	r3, r5, r1, asr #31
   2665c:	cmp	ip, #0
   26660:	bge	25ec8 <__assert_fail@plt+0x137dc>
   26664:	rsb	r0, ip, #-2147483648	; 0x80000000
   26668:	cmp	r2, r0
   2666c:	asr	r1, r0, #31
   26670:	sbcs	r1, r3, r1
   26674:	movlt	r1, #1
   26678:	blt	266a4 <__assert_fail@plt+0x13fb8>
   2667c:	cmp	r2, #0
   26680:	sbcs	r1, r3, #0
   26684:	ldrlt	r1, [sp, #12]
   26688:	blt	266a4 <__assert_fail@plt+0x13fb8>
   2668c:	adds	r0, r2, ip
   26690:	adc	r1, r3, ip, asr #31
   26694:	cmp	r0, #-2147483648	; 0x80000000
   26698:	sbcs	r1, r1, #0
   2669c:	movge	r1, #1
   266a0:	movlt	r1, #0
   266a4:	and	r1, r1, #1
   266a8:	add	r2, ip, r2
   266ac:	cmp	r1, #0
   266b0:	str	r2, [sp, #104]	; 0x68
   266b4:	bne	25cc4 <__assert_fail@plt+0x135d8>
   266b8:	mvn	r3, #0
   266bc:	add	r1, sp, #92	; 0x5c
   266c0:	ldr	r0, [sp, #4]
   266c4:	str	r3, [sp, #124]	; 0x7c
   266c8:	bl	38410 <__assert_fail@plt+0x25d24>
   266cc:	cmn	r0, #1
   266d0:	mov	r4, r0
   266d4:	beq	26ad0 <__assert_fail@plt+0x143e4>
   266d8:	add	r3, sp, #480	; 0x1e0
   266dc:	ldrd	r6, [r3]
   266e0:	add	r3, sp, #488	; 0x1e8
   266e4:	ldrd	r8, [r3]
   266e8:	add	r3, sp, #496	; 0x1f0
   266ec:	ldrd	sl, [r3]
   266f0:	orr	r2, r6, r8
   266f4:	orr	r3, r7, r9
   266f8:	orr	r2, r2, sl
   266fc:	orr	r3, r3, fp
   26700:	orrs	r3, r2, r3
   26704:	beq	26818 <__assert_fail@plt+0x1412c>
   26708:	cmp	r6, #0
   2670c:	sbcs	r3, r7, #0
   26710:	ldr	r2, [sp, #112]	; 0x70
   26714:	bge	25f14 <__assert_fail@plt+0x13828>
   26718:	mov	r0, #-2147483648	; 0x80000000
   2671c:	subs	r0, r0, r6
   26720:	mvn	r1, #0
   26724:	sbc	r1, r1, r7
   26728:	asr	r3, r2, #31
   2672c:	cmp	r2, r0
   26730:	sbcs	r3, r3, r1
   26734:	movlt	r3, #1
   26738:	movge	r3, #0
   2673c:	cmp	r3, #0
   26740:	bne	26ad0 <__assert_fail@plt+0x143e4>
   26744:	ldr	lr, [sp, #112]	; 0x70
   26748:	cmp	r8, #0
   2674c:	sbcs	r3, r9, #0
   26750:	add	lr, lr, r6
   26754:	ldr	r2, [sp, #108]	; 0x6c
   26758:	bge	25f5c <__assert_fail@plt+0x13870>
   2675c:	mov	r0, #-2147483648	; 0x80000000
   26760:	subs	r0, r0, r8
   26764:	mvn	r1, #0
   26768:	sbc	r1, r1, r9
   2676c:	asr	r3, r2, #31
   26770:	cmp	r2, r0
   26774:	sbcs	r3, r3, r1
   26778:	movlt	r3, #1
   2677c:	movge	r3, #0
   26780:	cmp	r3, #0
   26784:	bne	26ad0 <__assert_fail@plt+0x143e4>
   26788:	ldr	ip, [sp, #108]	; 0x6c
   2678c:	cmp	sl, #0
   26790:	sbcs	r3, fp, #0
   26794:	add	ip, ip, r8
   26798:	ldr	r2, [sp, #104]	; 0x68
   2679c:	bge	25fa4 <__assert_fail@plt+0x138b8>
   267a0:	mov	r0, #-2147483648	; 0x80000000
   267a4:	subs	r0, r0, sl
   267a8:	mvn	r1, #0
   267ac:	sbc	r1, r1, fp
   267b0:	asr	r3, r2, #31
   267b4:	cmp	r2, r0
   267b8:	sbcs	r3, r3, r1
   267bc:	movlt	r3, #1
   267c0:	movge	r3, #0
   267c4:	cmp	r3, #0
   267c8:	bne	26ad0 <__assert_fail@plt+0x143e4>
   267cc:	ldr	r3, [sp, #104]	; 0x68
   267d0:	add	r1, sp, #92	; 0x5c
   267d4:	add	sl, r3, sl
   267d8:	ldr	r3, [sp, #28]
   267dc:	ldr	r0, [sp, #4]
   267e0:	str	r3, [sp, #100]	; 0x64
   267e4:	ldr	r3, [sp, #24]
   267e8:	str	lr, [sp, #112]	; 0x70
   267ec:	str	r3, [sp, #96]	; 0x60
   267f0:	ldr	r3, [sp, #20]
   267f4:	str	ip, [sp, #108]	; 0x6c
   267f8:	str	r3, [sp, #92]	; 0x5c
   267fc:	ldr	r3, [sp, #32]
   26800:	str	sl, [sp, #104]	; 0x68
   26804:	str	r3, [sp, #124]	; 0x7c
   26808:	bl	38410 <__assert_fail@plt+0x25d24>
   2680c:	cmn	r0, #1
   26810:	mov	r4, r0
   26814:	beq	26ad0 <__assert_fail@plt+0x143e4>
   26818:	ldr	r3, [sp, #560]	; 0x230
   2681c:	cmp	r3, #0
   26820:	beq	2687c <__assert_fail@plt+0x14190>
   26824:	ldr	r2, [sp, #128]	; 0x80
   26828:	ldr	r1, [sp, #408]	; 0x198
   2682c:	asr	r3, r2, #31
   26830:	subs	r2, r1, r2
   26834:	rsc	r3, r3, r1, asr #31
   26838:	mvn	r1, r4
   2683c:	lsr	r1, r1, #31
   26840:	cmp	r1, r3, lsr #31
   26844:	beq	25ffc <__assert_fail@plt+0x13910>
   26848:	asr	r1, r4, #31
   2684c:	cmp	r4, r2
   26850:	sbcs	ip, r1, r3
   26854:	bge	25fec <__assert_fail@plt+0x13900>
   26858:	subs	r0, r2, r4
   2685c:	sbc	r1, r3, r1
   26860:	cmp	r0, #-2147483647	; 0x80000001
   26864:	sbcs	r1, r1, #0
   26868:	movge	r1, #1
   2686c:	movlt	r1, #0
   26870:	cmp	r1, #0
   26874:	bne	26ad0 <__assert_fail@plt+0x143e4>
   26878:	sub	r4, r4, r2
   2687c:	ldr	r6, [sp, #528]	; 0x210
   26880:	ldr	r3, [sp, #476]	; 0x1dc
   26884:	add	r9, pc, #588	; 0x24c
   26888:	ldrd	r8, [r9]
   2688c:	asr	r7, r6, #31
   26890:	adds	r6, r6, r3
   26894:	adc	r7, r7, r3, asr #31
   26898:	mov	r0, r6
   2689c:	add	r3, pc, #564	; 0x234
   268a0:	ldrd	r2, [r3]
   268a4:	mov	r1, r7
   268a8:	bl	39878 <__assert_fail@plt+0x2718c>
   268ac:	adds	r0, r2, r8
   268b0:	adc	r1, r3, r9
   268b4:	mov	r2, r8
   268b8:	mov	r3, r9
   268bc:	bl	39878 <__assert_fail@plt+0x2718c>
   268c0:	mov	sl, r2
   268c4:	subs	r0, r6, sl
   268c8:	mov	fp, r3
   268cc:	mov	r2, r8
   268d0:	mov	r3, r9
   268d4:	sbc	r1, r7, fp
   268d8:	bl	39878 <__assert_fail@plt+0x2718c>
   268dc:	add	r3, sp, #504	; 0x1f8
   268e0:	ldrd	r8, [r3]
   268e4:	cmp	r8, #0
   268e8:	sbcs	r3, r9, #0
   268ec:	mov	r6, r0
   268f0:	bge	26038 <__assert_fail@plt+0x1394c>
   268f4:	mvn	r3, #0
   268f8:	mvn	r2, #0
   268fc:	cmp	r9, r3
   26900:	cmpeq	r8, r2
   26904:	beq	26930 <__assert_fail@plt+0x14244>
   26908:	mov	r3, r9
   2690c:	mov	r2, r8
   26910:	mov	r0, #0
   26914:	mov	r1, #-2147483648	; 0x80000000
   26918:	bl	39878 <__assert_fail@plt+0x2718c>
   2691c:	cmp	r0, #3600	; 0xe10
   26920:	sbcs	r3, r1, #0
   26924:	movlt	r3, #1
   26928:	movge	r3, #0
   2692c:	str	r3, [sp]
   26930:	ldr	ip, [sp]
   26934:	cmp	ip, #0
   26938:	bne	26ad0 <__assert_fail@plt+0x143e4>
   2693c:	mov	r1, #3600	; 0xe10
   26940:	mov	r0, r4
   26944:	umull	r2, r3, r8, r1
   26948:	mla	r3, r1, r9, r3
   2694c:	cmp	r2, #0
   26950:	sbcs	r1, r3, #0
   26954:	asr	r1, r4, #31
   26958:	bge	26054 <__assert_fail@plt+0x13968>
   2695c:	mov	r4, #0
   26960:	subs	r4, r4, r2
   26964:	mov	r5, #-2147483648	; 0x80000000
   26968:	sbc	r5, r5, r3
   2696c:	cmp	r0, r4
   26970:	sbcs	lr, r1, r5
   26974:	movlt	lr, #1
   26978:	movge	lr, #0
   2697c:	cmp	lr, #0
   26980:	bne	26ad0 <__assert_fail@plt+0x143e4>
   26984:	adds	r4, r0, r2
   26988:	adc	r5, r1, r3
   2698c:	add	r3, sp, #512	; 0x200
   26990:	ldrd	r8, [r3]
   26994:	cmp	r8, #0
   26998:	sbcs	r3, r9, #0
   2699c:	bge	26078 <__assert_fail@plt+0x1398c>
   269a0:	mvn	r3, #0
   269a4:	mvn	r2, #0
   269a8:	cmp	r9, r3
   269ac:	cmpeq	r8, r2
   269b0:	beq	269d8 <__assert_fail@plt+0x142ec>
   269b4:	mov	r3, r9
   269b8:	mov	r2, r8
   269bc:	mov	r0, #0
   269c0:	mov	r1, #-2147483648	; 0x80000000
   269c4:	bl	39878 <__assert_fail@plt+0x2718c>
   269c8:	cmp	r0, #60	; 0x3c
   269cc:	sbcs	r3, r1, #0
   269d0:	movlt	ip, #1
   269d4:	movge	ip, #0
   269d8:	cmp	ip, #0
   269dc:	bne	26ad0 <__assert_fail@plt+0x143e4>
   269e0:	mov	r1, #60	; 0x3c
   269e4:	umull	r2, r3, r8, r1
   269e8:	mla	r3, r1, r9, r3
   269ec:	cmp	r2, #0
   269f0:	sbcs	r1, r3, #0
   269f4:	bge	2608c <__assert_fail@plt+0x139a0>
   269f8:	mov	r0, #0
   269fc:	subs	r0, r0, r2
   26a00:	mov	r1, #-2147483648	; 0x80000000
   26a04:	sbc	r1, r1, r3
   26a08:	cmp	r4, r0
   26a0c:	sbcs	r1, r5, r1
   26a10:	movlt	r1, #1
   26a14:	movge	r1, #0
   26a18:	cmp	r1, #0
   26a1c:	bne	26ad0 <__assert_fail@plt+0x143e4>
   26a20:	add	r1, sp, #520	; 0x208
   26a24:	adds	r2, r2, r4
   26a28:	adc	r3, r3, r5
   26a2c:	ldrd	r4, [r1]
   26a30:	cmp	r4, #0
   26a34:	sbcs	r1, r5, #0
   26a38:	bge	260b4 <__assert_fail@plt+0x139c8>
   26a3c:	mov	r0, #0
   26a40:	subs	r0, r0, r4
   26a44:	mov	r1, #-2147483648	; 0x80000000
   26a48:	sbc	r1, r1, r5
   26a4c:	cmp	r2, r0
   26a50:	sbcs	r1, r3, r1
   26a54:	movlt	r1, #1
   26a58:	movge	r1, #0
   26a5c:	cmp	r1, #0
   26a60:	bne	26ad0 <__assert_fail@plt+0x143e4>
   26a64:	adds	r4, r4, r2
   26a68:	adc	r5, r5, r3
   26a6c:	cmp	r6, #0
   26a70:	bge	260e4 <__assert_fail@plt+0x139f8>
   26a74:	rsb	r2, r6, #-2147483648	; 0x80000000
   26a78:	cmp	r4, r2
   26a7c:	asr	r3, r2, #31
   26a80:	sbcs	r3, r5, r3
   26a84:	blt	260dc <__assert_fail@plt+0x139f0>
   26a88:	cmp	r4, #0
   26a8c:	sbcs	r3, r5, #0
   26a90:	blt	26ab0 <__assert_fail@plt+0x143c4>
   26a94:	adds	r2, r4, r6
   26a98:	adc	r3, r5, r6, asr #31
   26a9c:	cmp	r2, #-2147483648	; 0x80000000
   26aa0:	sbcs	r3, r3, #0
   26aa4:	movge	r3, #1
   26aa8:	movlt	r3, #0
   26aac:	str	r3, [sp, #12]
   26ab0:	ldr	r3, [sp, #12]
   26ab4:	and	r3, r3, #1
   26ab8:	cmp	r3, #0
   26abc:	ldreq	r3, [sp, #36]	; 0x24
   26ac0:	addeq	r4, r4, r6
   26ac4:	moveq	r9, #1
   26ac8:	stmeq	r3, {r4, sl}
   26acc:	beq	25cc4 <__assert_fail@plt+0x135d8>
   26ad0:	mov	r9, #0
   26ad4:	b	25cc4 <__assert_fail@plt+0x135d8>
   26ad8:	blcc	fe6d92e0 <stdout@@GLIBC_2.4+0xfe688d74>
   26adc:	andeq	r0, r0, r0
   26ae0:	push	{r4, r5, r6, r7, r8, lr}
   26ae4:	mov	r5, r0
   26ae8:	ldr	r0, [pc, #64]	; 26b30 <__assert_fail@plt+0x14444>
   26aec:	mov	r6, r1
   26af0:	mov	r7, r2
   26af4:	bl	122fc <getenv@plt>
   26af8:	bl	38104 <__assert_fail@plt+0x25a18>
   26afc:	subs	r4, r0, #0
   26b00:	moveq	r5, r4
   26b04:	beq	26b28 <__assert_fail@plt+0x1443c>
   26b08:	mov	r0, r5
   26b0c:	mov	r3, r4
   26b10:	mov	r2, r7
   26b14:	mov	r1, r6
   26b18:	bl	2597c <__assert_fail@plt+0x13290>
   26b1c:	mov	r5, r0
   26b20:	mov	r0, r4
   26b24:	bl	38290 <__assert_fail@plt+0x25ba4>
   26b28:	mov	r0, r5
   26b2c:	pop	{r4, r5, r6, r7, r8, pc}
   26b30:	andeq	lr, r3, r1, lsr #20
   26b34:	push	{r4, r5, r6, lr}
   26b38:	subs	r5, r0, #0
   26b3c:	bne	26b54 <__assert_fail@plt+0x14468>
   26b40:	ldr	r3, [pc, #124]	; 26bc4 <__assert_fail@plt+0x144d8>
   26b44:	ldr	r0, [pc, #124]	; 26bc8 <__assert_fail@plt+0x144dc>
   26b48:	ldr	r1, [r3]
   26b4c:	bl	12680 <fputs@plt>
   26b50:	bl	12698 <abort@plt>
   26b54:	mov	r1, #47	; 0x2f
   26b58:	bl	12548 <strrchr@plt>
   26b5c:	cmp	r0, #0
   26b60:	addne	r4, r0, #1
   26b64:	moveq	r4, r5
   26b68:	sub	r3, r4, r5
   26b6c:	cmp	r3, #6
   26b70:	ble	26bb0 <__assert_fail@plt+0x144c4>
   26b74:	mov	r2, #7
   26b78:	ldr	r1, [pc, #76]	; 26bcc <__assert_fail@plt+0x144e0>
   26b7c:	sub	r0, r4, #7
   26b80:	bl	1268c <strncmp@plt>
   26b84:	cmp	r0, #0
   26b88:	bne	26bb0 <__assert_fail@plt+0x144c4>
   26b8c:	mov	r2, #3
   26b90:	ldr	r1, [pc, #56]	; 26bd0 <__assert_fail@plt+0x144e4>
   26b94:	mov	r0, r4
   26b98:	bl	1268c <strncmp@plt>
   26b9c:	cmp	r0, #0
   26ba0:	movne	r5, r4
   26ba4:	ldreq	r3, [pc, #40]	; 26bd4 <__assert_fail@plt+0x144e8>
   26ba8:	addeq	r5, r4, #3
   26bac:	streq	r5, [r3]
   26bb0:	ldr	r3, [pc, #32]	; 26bd8 <__assert_fail@plt+0x144ec>
   26bb4:	str	r5, [r3]
   26bb8:	ldr	r3, [pc, #28]	; 26bdc <__assert_fail@plt+0x144f0>
   26bbc:	str	r5, [r3]
   26bc0:	pop	{r4, r5, r6, pc}
   26bc4:	andeq	r0, r5, r0, ror #10
   26bc8:	andeq	lr, r3, r4, ror #24
   26bcc:	muleq	r3, ip, ip
   26bd0:	andeq	lr, r3, r4, lsr #25
   26bd4:	andeq	r0, r5, r0, asr r5
   26bd8:	andeq	r0, r5, ip, lsl sp
   26bdc:	andeq	r0, r5, r8, asr r5
   26be0:	push	{r4, r5, r6, lr}
   26be4:	mov	r2, #48	; 0x30
   26be8:	mov	r5, r1
   26bec:	mov	r1, #0
   26bf0:	mov	r4, r0
   26bf4:	bl	12434 <memset@plt>
   26bf8:	cmp	r5, #10
   26bfc:	bne	26c04 <__assert_fail@plt+0x14518>
   26c00:	bl	12698 <abort@plt>
   26c04:	str	r5, [r4]
   26c08:	mov	r0, r4
   26c0c:	pop	{r4, r5, r6, pc}
   26c10:	push	{r4, r5, r6, lr}
   26c14:	mov	r4, r0
   26c18:	mov	r5, r1
   26c1c:	bl	38c7c <__assert_fail@plt+0x26590>
   26c20:	ldrb	r3, [r0]
   26c24:	bic	r3, r3, #32
   26c28:	cmp	r3, #85	; 0x55
   26c2c:	bne	26c9c <__assert_fail@plt+0x145b0>
   26c30:	ldrb	r3, [r0, #1]
   26c34:	bic	r3, r3, #32
   26c38:	cmp	r3, #84	; 0x54
   26c3c:	bne	26c74 <__assert_fail@plt+0x14588>
   26c40:	ldrb	r3, [r0, #2]
   26c44:	bic	r3, r3, #32
   26c48:	cmp	r3, #70	; 0x46
   26c4c:	bne	26c74 <__assert_fail@plt+0x14588>
   26c50:	ldrb	r3, [r0, #3]
   26c54:	cmp	r3, #45	; 0x2d
   26c58:	bne	26c74 <__assert_fail@plt+0x14588>
   26c5c:	ldrb	r3, [r0, #4]
   26c60:	cmp	r3, #56	; 0x38
   26c64:	bne	26c74 <__assert_fail@plt+0x14588>
   26c68:	ldrb	r3, [r0, #5]
   26c6c:	cmp	r3, #0
   26c70:	beq	26c88 <__assert_fail@plt+0x1459c>
   26c74:	ldr	r1, [pc, #144]	; 26d0c <__assert_fail@plt+0x14620>
   26c78:	ldr	r0, [pc, #144]	; 26d10 <__assert_fail@plt+0x14624>
   26c7c:	cmp	r5, #9
   26c80:	movne	r0, r1
   26c84:	pop	{r4, r5, r6, pc}
   26c88:	ldrb	r3, [r4]
   26c8c:	ldr	r1, [pc, #128]	; 26d14 <__assert_fail@plt+0x14628>
   26c90:	ldr	r0, [pc, #128]	; 26d18 <__assert_fail@plt+0x1462c>
   26c94:	cmp	r3, #96	; 0x60
   26c98:	b	26c80 <__assert_fail@plt+0x14594>
   26c9c:	cmp	r3, #71	; 0x47
   26ca0:	bne	26c74 <__assert_fail@plt+0x14588>
   26ca4:	ldrb	r3, [r0, #1]
   26ca8:	bic	r3, r3, #32
   26cac:	cmp	r3, #66	; 0x42
   26cb0:	bne	26c74 <__assert_fail@plt+0x14588>
   26cb4:	ldrb	r3, [r0, #2]
   26cb8:	cmp	r3, #49	; 0x31
   26cbc:	bne	26c74 <__assert_fail@plt+0x14588>
   26cc0:	ldrb	r3, [r0, #3]
   26cc4:	cmp	r3, #56	; 0x38
   26cc8:	bne	26c74 <__assert_fail@plt+0x14588>
   26ccc:	ldrb	r3, [r0, #4]
   26cd0:	cmp	r3, #48	; 0x30
   26cd4:	bne	26c74 <__assert_fail@plt+0x14588>
   26cd8:	ldrb	r3, [r0, #5]
   26cdc:	cmp	r3, #51	; 0x33
   26ce0:	bne	26c74 <__assert_fail@plt+0x14588>
   26ce4:	ldrb	r3, [r0, #6]
   26ce8:	cmp	r3, #48	; 0x30
   26cec:	bne	26c74 <__assert_fail@plt+0x14588>
   26cf0:	ldrb	r3, [r0, #7]
   26cf4:	cmp	r3, #0
   26cf8:	bne	26c74 <__assert_fail@plt+0x14588>
   26cfc:	ldrb	r3, [r4]
   26d00:	ldr	r1, [pc, #20]	; 26d1c <__assert_fail@plt+0x14630>
   26d04:	ldr	r0, [pc, #20]	; 26d20 <__assert_fail@plt+0x14634>
   26d08:	b	26c94 <__assert_fail@plt+0x145a8>
   26d0c:	andeq	fp, r3, sp, ror pc
   26d10:	andeq	lr, r3, pc, lsl sl
   26d14:	andeq	lr, r3, r0, lsl #26
   26d18:	strdeq	lr, [r3], -ip
   26d1c:	andeq	lr, r3, r8, lsl #26
   26d20:	andeq	lr, r3, r4, lsl #26
   26d24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d28:	sub	sp, sp, #108	; 0x6c
   26d2c:	mov	r8, r0
   26d30:	str	r3, [sp, #36]	; 0x24
   26d34:	mov	r5, r1
   26d38:	str	r2, [sp, #44]	; 0x2c
   26d3c:	ldr	sl, [sp, #144]	; 0x90
   26d40:	bl	12260 <__ctype_get_mb_cur_max@plt>
   26d44:	ldr	r3, [sp, #148]	; 0x94
   26d48:	mov	r7, #0
   26d4c:	str	r7, [sp, #48]	; 0x30
   26d50:	lsr	r6, r3, #1
   26d54:	and	r6, r6, #1
   26d58:	mov	r3, #1
   26d5c:	str	r3, [sp, #72]	; 0x48
   26d60:	str	r7, [sp, #24]
   26d64:	str	r7, [sp, #32]
   26d68:	str	r7, [sp, #40]	; 0x28
   26d6c:	str	r7, [sp, #60]	; 0x3c
   26d70:	str	r0, [sp, #76]	; 0x4c
   26d74:	cmp	sl, #10
   26d78:	ldrls	pc, [pc, sl, lsl #2]
   26d7c:	b	26fb8 <__assert_fail@plt+0x148cc>
   26d80:	andeq	r6, r2, ip, lsr #27
   26d84:	andeq	r7, r2, r0, asr #20
   26d88:	andeq	r6, r2, r4, lsl #31
   26d8c:	ldrdeq	r6, [r2], -r0
   26d90:	andeq	r6, r2, r0, ror #30
   26d94:			; <UNDEFINED> instruction: 0x00026db8
   26d98:	andeq	r7, r2, r0, lsr #20
   26d9c:			; <UNDEFINED> instruction: 0x00026fbc
   26da0:			; <UNDEFINED> instruction: 0x00026eb0
   26da4:			; <UNDEFINED> instruction: 0x00026eb0
   26da8:			; <UNDEFINED> instruction: 0x00026eb0
   26dac:	mov	r6, #0
   26db0:	mov	r4, #0
   26db4:	b	26de4 <__assert_fail@plt+0x146f8>
   26db8:	cmp	r6, #0
   26dbc:	bne	26fe0 <__assert_fail@plt+0x148f4>
   26dc0:	cmp	r5, #0
   26dc4:	movne	r3, #34	; 0x22
   26dc8:	strbne	r3, [r8]
   26dcc:	mov	r3, #1
   26dd0:	str	r3, [sp, #24]
   26dd4:	str	r3, [sp, #32]
   26dd8:	mov	r4, #1
   26ddc:	ldr	r3, [pc, #3172]	; 27a48 <__assert_fail@plt+0x1535c>
   26de0:	str	r3, [sp, #40]	; 0x28
   26de4:	mov	r9, r5
   26de8:	mov	r3, #0
   26dec:	str	r7, [sp, #68]	; 0x44
   26df0:	str	r3, [sp, #28]
   26df4:	ldr	r3, [sp, #36]	; 0x24
   26df8:	cmn	r3, #1
   26dfc:	bne	2798c <__assert_fail@plt+0x152a0>
   26e00:	ldr	r3, [sp, #44]	; 0x2c
   26e04:	ldr	r2, [sp, #28]
   26e08:	ldrb	r3, [r3, r2]
   26e0c:	adds	r3, r3, #0
   26e10:	movne	r3, #1
   26e14:	str	r3, [sp, #52]	; 0x34
   26e18:	ldr	r3, [sp, #52]	; 0x34
   26e1c:	cmp	r3, #0
   26e20:	bne	27008 <__assert_fail@plt+0x1491c>
   26e24:	sub	r2, sl, #2
   26e28:	clz	r2, r2
   26e2c:	lsr	r2, r2, #5
   26e30:	and	r3, r6, r2
   26e34:	cmp	r4, #0
   26e38:	movne	r3, #0
   26e3c:	andeq	r3, r3, #1
   26e40:	cmp	r3, #0
   26e44:	bne	271d0 <__assert_fail@plt+0x14ae4>
   26e48:	eor	r3, r6, #1
   26e4c:	ands	r2, r2, r3
   26e50:	beq	279c4 <__assert_fail@plt+0x152d8>
   26e54:	ldr	r3, [sp, #68]	; 0x44
   26e58:	cmp	r3, #0
   26e5c:	beq	279fc <__assert_fail@plt+0x15310>
   26e60:	ldr	r3, [sp, #72]	; 0x48
   26e64:	cmp	r3, #0
   26e68:	beq	279a0 <__assert_fail@plt+0x152b4>
   26e6c:	ldr	r3, [sp, #160]	; 0xa0
   26e70:	ldr	r2, [sp, #44]	; 0x2c
   26e74:	str	r3, [sp, #16]
   26e78:	ldr	r3, [sp, #156]	; 0x9c
   26e7c:	ldr	r1, [sp, #60]	; 0x3c
   26e80:	str	r3, [sp, #12]
   26e84:	ldr	r3, [sp, #152]	; 0x98
   26e88:	str	r3, [sp, #8]
   26e8c:	ldr	r3, [sp, #148]	; 0x94
   26e90:	str	r3, [sp, #4]
   26e94:	mov	r3, #5
   26e98:	str	r3, [sp]
   26e9c:	ldr	r3, [sp, #36]	; 0x24
   26ea0:	mov	r0, r8
   26ea4:	bl	26d24 <__assert_fail@plt+0x14638>
   26ea8:	mov	r4, r0
   26eac:	b	279f0 <__assert_fail@plt+0x15304>
   26eb0:	cmp	sl, #10
   26eb4:	beq	26f10 <__assert_fail@plt+0x14824>
   26eb8:	ldr	r4, [pc, #2956]	; 27a4c <__assert_fail@plt+0x15360>
   26ebc:	mov	r2, #5
   26ec0:	mov	r1, r4
   26ec4:	mov	r0, #0
   26ec8:	bl	1217c <dcgettext@plt>
   26ecc:	cmp	r0, r4
   26ed0:	str	r0, [sp, #156]	; 0x9c
   26ed4:	bne	26ee4 <__assert_fail@plt+0x147f8>
   26ed8:	mov	r1, sl
   26edc:	bl	26c10 <__assert_fail@plt+0x14524>
   26ee0:	str	r0, [sp, #156]	; 0x9c
   26ee4:	ldr	r4, [pc, #2916]	; 27a50 <__assert_fail@plt+0x15364>
   26ee8:	mov	r2, #5
   26eec:	mov	r1, r4
   26ef0:	mov	r0, #0
   26ef4:	bl	1217c <dcgettext@plt>
   26ef8:	cmp	r0, r4
   26efc:	str	r0, [sp, #160]	; 0xa0
   26f00:	bne	26f10 <__assert_fail@plt+0x14824>
   26f04:	mov	r1, sl
   26f08:	bl	26c10 <__assert_fail@plt+0x14524>
   26f0c:	str	r0, [sp, #160]	; 0xa0
   26f10:	cmp	r6, #0
   26f14:	moveq	r4, r6
   26f18:	beq	26f30 <__assert_fail@plt+0x14844>
   26f1c:	mov	r4, #0
   26f20:	b	26f40 <__assert_fail@plt+0x14854>
   26f24:	cmp	r5, r4
   26f28:	strbhi	r3, [r8, r4]
   26f2c:	add	r4, r4, #1
   26f30:	ldr	r3, [sp, #156]	; 0x9c
   26f34:	ldrb	r3, [r3, r4]
   26f38:	cmp	r3, #0
   26f3c:	bne	26f24 <__assert_fail@plt+0x14838>
   26f40:	ldr	r0, [sp, #160]	; 0xa0
   26f44:	bl	123bc <strlen@plt>
   26f48:	ldr	r3, [sp, #160]	; 0xa0
   26f4c:	str	r3, [sp, #40]	; 0x28
   26f50:	mov	r3, #1
   26f54:	str	r3, [sp, #24]
   26f58:	str	r0, [sp, #32]
   26f5c:	b	26de4 <__assert_fail@plt+0x146f8>
   26f60:	mov	r3, #1
   26f64:	cmp	r6, #0
   26f68:	streq	r3, [sp, #24]
   26f6c:	beq	26f8c <__assert_fail@plt+0x148a0>
   26f70:	str	r3, [sp, #32]
   26f74:	ldr	r3, [pc, #2772]	; 27a50 <__assert_fail@plt+0x15364>
   26f78:	mov	r4, #0
   26f7c:	str	r3, [sp, #40]	; 0x28
   26f80:	b	26fb0 <__assert_fail@plt+0x148c4>
   26f84:	cmp	r6, #0
   26f88:	bne	26ff8 <__assert_fail@plt+0x1490c>
   26f8c:	cmp	r5, #0
   26f90:	movne	r3, #39	; 0x27
   26f94:	strbne	r3, [r8]
   26f98:	mov	r3, #1
   26f9c:	str	r3, [sp, #32]
   26fa0:	mov	r6, #0
   26fa4:	ldr	r3, [pc, #2724]	; 27a50 <__assert_fail@plt+0x15364>
   26fa8:	mov	r4, #1
   26fac:	str	r3, [sp, #40]	; 0x28
   26fb0:	mov	sl, #2
   26fb4:	b	26de4 <__assert_fail@plt+0x146f8>
   26fb8:	bl	12698 <abort@plt>
   26fbc:	mov	r6, #0
   26fc0:	mov	r3, #1
   26fc4:	str	r3, [sp, #24]
   26fc8:	mov	r4, r6
   26fcc:	b	26de4 <__assert_fail@plt+0x146f8>
   26fd0:	mov	r6, #1
   26fd4:	str	r6, [sp, #24]
   26fd8:	str	r6, [sp, #32]
   26fdc:	b	26f74 <__assert_fail@plt+0x14888>
   26fe0:	mov	r3, #1
   26fe4:	str	r3, [sp, #32]
   26fe8:	ldr	r3, [pc, #2648]	; 27a48 <__assert_fail@plt+0x1535c>
   26fec:	str	r6, [sp, #24]
   26ff0:	str	r3, [sp, #40]	; 0x28
   26ff4:	b	26db0 <__assert_fail@plt+0x146c4>
   26ff8:	mov	r3, #1
   26ffc:	str	r3, [sp, #32]
   27000:	ldr	r3, [pc, #2632]	; 27a50 <__assert_fail@plt+0x15364>
   27004:	b	26ff0 <__assert_fail@plt+0x14904>
   27008:	ldr	r3, [sp, #32]
   2700c:	ldr	fp, [sp, #24]
   27010:	cmp	sl, #2
   27014:	moveq	fp, #0
   27018:	andne	fp, fp, #1
   2701c:	adds	r5, r3, #0
   27020:	movne	r5, #1
   27024:	ands	r3, r5, fp
   27028:	str	r3, [sp, #64]	; 0x40
   2702c:	beq	270fc <__assert_fail@plt+0x14a10>
   27030:	ldr	r2, [sp, #32]
   27034:	ldr	r3, [sp, #28]
   27038:	add	r7, r3, r2
   2703c:	mov	r3, r2
   27040:	ldr	r2, [sp, #36]	; 0x24
   27044:	cmp	r3, #1
   27048:	movls	r3, #0
   2704c:	movhi	r3, #1
   27050:	cmn	r2, #1
   27054:	movne	r3, #0
   27058:	cmp	r3, #0
   2705c:	beq	2706c <__assert_fail@plt+0x14980>
   27060:	ldr	r0, [sp, #44]	; 0x2c
   27064:	bl	123bc <strlen@plt>
   27068:	str	r0, [sp, #36]	; 0x24
   2706c:	ldr	r3, [sp, #36]	; 0x24
   27070:	cmp	r3, r7
   27074:	bcc	270f4 <__assert_fail@plt+0x14a08>
   27078:	ldr	r3, [sp, #44]	; 0x2c
   2707c:	ldr	r0, [sp, #28]
   27080:	ldr	r2, [sp, #32]
   27084:	ldr	r1, [sp, #40]	; 0x28
   27088:	add	r0, r3, r0
   2708c:	bl	12158 <memcmp@plt>
   27090:	cmp	r0, #0
   27094:	bne	270f4 <__assert_fail@plt+0x14a08>
   27098:	cmp	r6, #0
   2709c:	beq	270fc <__assert_fail@plt+0x14a10>
   270a0:	str	r6, [sp, #24]
   270a4:	ldr	r3, [sp, #24]
   270a8:	ldr	r2, [sp, #44]	; 0x2c
   270ac:	cmp	sl, #2
   270b0:	movne	r3, #0
   270b4:	andeq	r3, r3, #1
   270b8:	cmp	r3, #0
   270bc:	ldr	r3, [sp, #160]	; 0xa0
   270c0:	movne	sl, #4
   270c4:	str	r3, [sp, #16]
   270c8:	ldr	r3, [sp, #156]	; 0x9c
   270cc:	str	sl, [sp]
   270d0:	str	r3, [sp, #12]
   270d4:	mov	r3, #0
   270d8:	str	r3, [sp, #8]
   270dc:	ldr	r3, [sp, #148]	; 0x94
   270e0:	mov	r1, r9
   270e4:	bic	r3, r3, #2
   270e8:	str	r3, [sp, #4]
   270ec:	ldr	r3, [sp, #36]	; 0x24
   270f0:	b	26ea0 <__assert_fail@plt+0x147b4>
   270f4:	mov	r3, #0
   270f8:	str	r3, [sp, #64]	; 0x40
   270fc:	ldr	r2, [sp, #28]
   27100:	ldr	r3, [sp, #44]	; 0x2c
   27104:	add	r3, r3, r2
   27108:	str	r3, [sp, #80]	; 0x50
   2710c:	ldr	r3, [sp, #44]	; 0x2c
   27110:	ldrb	r7, [r3, r2]
   27114:	cmp	r7, #58	; 0x3a
   27118:	bhi	27280 <__assert_fail@plt+0x14b94>
   2711c:	cmp	r7, #43	; 0x2b
   27120:	bcs	272d4 <__assert_fail@plt+0x14be8>
   27124:	cmp	r7, #32
   27128:	beq	2732c <__assert_fail@plt+0x14c40>
   2712c:	bhi	271d8 <__assert_fail@plt+0x14aec>
   27130:	cmp	r7, #9
   27134:	beq	275e0 <__assert_fail@plt+0x14ef4>
   27138:	bhi	2719c <__assert_fail@plt+0x14ab0>
   2713c:	cmp	r7, #7
   27140:	beq	2768c <__assert_fail@plt+0x14fa0>
   27144:	bhi	27348 <__assert_fail@plt+0x14c5c>
   27148:	cmp	r7, #0
   2714c:	beq	27364 <__assert_fail@plt+0x14c78>
   27150:	ldr	r3, [sp, #76]	; 0x4c
   27154:	cmp	r3, #1
   27158:	bne	276d0 <__assert_fail@plt+0x14fe4>
   2715c:	bl	12374 <__ctype_b_loc@plt>
   27160:	sxth	r3, r7
   27164:	lsl	r3, r3, #1
   27168:	ldr	r2, [r0]
   2716c:	ldrh	r5, [r2, r3]
   27170:	ldr	r3, [sp, #76]	; 0x4c
   27174:	str	r3, [sp, #56]	; 0x38
   27178:	lsr	r5, r5, #14
   2717c:	and	r5, r5, #1
   27180:	ldr	r3, [sp, #24]
   27184:	eor	fp, r5, #1
   27188:	and	fp, fp, r3
   2718c:	ands	fp, fp, #255	; 0xff
   27190:	beq	27518 <__assert_fail@plt+0x14e2c>
   27194:	mov	r5, #0
   27198:	b	2777c <__assert_fail@plt+0x15090>
   2719c:	cmp	r7, #11
   271a0:	beq	275e8 <__assert_fail@plt+0x14efc>
   271a4:	bcc	27684 <__assert_fail@plt+0x14f98>
   271a8:	cmp	r7, #12
   271ac:	beq	27694 <__assert_fail@plt+0x14fa8>
   271b0:	cmp	r7, #13
   271b4:	moveq	r3, #114	; 0x72
   271b8:	bne	27150 <__assert_fail@plt+0x14a64>
   271bc:	cmp	sl, #2
   271c0:	movne	r2, #0
   271c4:	andeq	r2, r6, #1
   271c8:	cmp	r2, #0
   271cc:	beq	2734c <__assert_fail@plt+0x14c60>
   271d0:	mov	sl, #2
   271d4:	b	270a4 <__assert_fail@plt+0x149b8>
   271d8:	cmp	r7, #37	; 0x25
   271dc:	beq	272d4 <__assert_fail@plt+0x14be8>
   271e0:	bhi	271f4 <__assert_fail@plt+0x14b08>
   271e4:	cmp	r7, #35	; 0x23
   271e8:	beq	27320 <__assert_fail@plt+0x14c34>
   271ec:	mov	r5, #0
   271f0:	b	27330 <__assert_fail@plt+0x14c44>
   271f4:	cmp	r7, #39	; 0x27
   271f8:	bne	271ec <__assert_fail@plt+0x14b00>
   271fc:	cmp	sl, #2
   27200:	ldrne	r5, [sp, #52]	; 0x34
   27204:	movne	r3, r5
   27208:	strne	r3, [sp, #68]	; 0x44
   2720c:	bne	272d8 <__assert_fail@plt+0x14bec>
   27210:	cmp	r6, #0
   27214:	bne	270a4 <__assert_fail@plt+0x149b8>
   27218:	ldr	r2, [sp, #60]	; 0x3c
   2721c:	adds	r3, r9, #0
   27220:	movne	r3, #1
   27224:	cmp	r2, #0
   27228:	movne	r3, #0
   2722c:	cmp	r3, #0
   27230:	strne	r9, [sp, #60]	; 0x3c
   27234:	movne	r9, #0
   27238:	bne	27248 <__assert_fail@plt+0x14b5c>
   2723c:	cmp	r9, r4
   27240:	movhi	r3, #39	; 0x27
   27244:	strbhi	r3, [r8, r4]
   27248:	add	r3, r4, #1
   2724c:	cmp	r3, r9
   27250:	movcc	r2, #92	; 0x5c
   27254:	strbcc	r2, [r8, r3]
   27258:	add	r3, r4, #2
   2725c:	cmp	r3, r9
   27260:	ldr	r5, [sp, #52]	; 0x34
   27264:	movcc	r2, #39	; 0x27
   27268:	strbcc	r2, [r8, r3]
   2726c:	add	r4, r4, #3
   27270:	mov	fp, r6
   27274:	str	r5, [sp, #68]	; 0x44
   27278:	str	r6, [sp, #48]	; 0x30
   2727c:	b	27518 <__assert_fail@plt+0x14e2c>
   27280:	cmp	r7, #94	; 0x5e
   27284:	beq	271ec <__assert_fail@plt+0x14b00>
   27288:	bhi	272e0 <__assert_fail@plt+0x14bf4>
   2728c:	cmp	r7, #90	; 0x5a
   27290:	bhi	272c8 <__assert_fail@plt+0x14bdc>
   27294:	cmp	r7, #65	; 0x41
   27298:	bcs	272d4 <__assert_fail@plt+0x14be8>
   2729c:	cmp	r7, #62	; 0x3e
   272a0:	bls	271ec <__assert_fail@plt+0x14b00>
   272a4:	cmp	r7, #63	; 0x3f
   272a8:	bne	27150 <__assert_fail@plt+0x14a64>
   272ac:	cmp	sl, #2
   272b0:	beq	27454 <__assert_fail@plt+0x14d68>
   272b4:	cmp	sl, #5
   272b8:	beq	27464 <__assert_fail@plt+0x14d78>
   272bc:	mov	fp, #0
   272c0:	mov	r5, fp
   272c4:	b	27518 <__assert_fail@plt+0x14e2c>
   272c8:	cmp	r7, #92	; 0x5c
   272cc:	beq	275f0 <__assert_fail@plt+0x14f04>
   272d0:	bls	271ec <__assert_fail@plt+0x14b00>
   272d4:	ldr	r5, [sp, #52]	; 0x34
   272d8:	mov	fp, #0
   272dc:	b	27518 <__assert_fail@plt+0x14e2c>
   272e0:	cmp	r7, #122	; 0x7a
   272e4:	bhi	27304 <__assert_fail@plt+0x14c18>
   272e8:	cmp	r7, #97	; 0x61
   272ec:	bcs	272d4 <__assert_fail@plt+0x14be8>
   272f0:	cmp	r7, #95	; 0x5f
   272f4:	beq	272d4 <__assert_fail@plt+0x14be8>
   272f8:	cmp	r7, #96	; 0x60
   272fc:	bne	27150 <__assert_fail@plt+0x14a64>
   27300:	b	271ec <__assert_fail@plt+0x14b00>
   27304:	cmp	r7, #124	; 0x7c
   27308:	beq	271ec <__assert_fail@plt+0x14b00>
   2730c:	bcc	2769c <__assert_fail@plt+0x14fb0>
   27310:	cmp	r7, #125	; 0x7d
   27314:	beq	2769c <__assert_fail@plt+0x14fb0>
   27318:	cmp	r7, #126	; 0x7e
   2731c:	bne	27150 <__assert_fail@plt+0x14a64>
   27320:	ldr	r3, [sp, #28]
   27324:	cmp	r3, #0
   27328:	bne	2745c <__assert_fail@plt+0x14d70>
   2732c:	ldr	r5, [sp, #52]	; 0x34
   27330:	cmp	sl, #2
   27334:	movne	fp, #0
   27338:	andeq	fp, r6, #1
   2733c:	cmp	fp, #0
   27340:	beq	27518 <__assert_fail@plt+0x14e2c>
   27344:	b	271d0 <__assert_fail@plt+0x14ae4>
   27348:	mov	r3, #98	; 0x62
   2734c:	ldr	r2, [sp, #24]
   27350:	cmp	r2, #0
   27354:	beq	2745c <__assert_fail@plt+0x14d70>
   27358:	mov	r7, r3
   2735c:	mov	r5, #0
   27360:	b	27570 <__assert_fail@plt+0x14e84>
   27364:	ldr	r3, [sp, #24]
   27368:	cmp	r3, #0
   2736c:	beq	27438 <__assert_fail@plt+0x14d4c>
   27370:	cmp	r6, #0
   27374:	bne	270a0 <__assert_fail@plt+0x149b4>
   27378:	ldr	r3, [sp, #48]	; 0x30
   2737c:	eor	r2, r3, #1
   27380:	cmp	sl, #2
   27384:	movne	r2, #0
   27388:	andeq	r2, r2, #1
   2738c:	cmp	r2, #0
   27390:	moveq	r3, r4
   27394:	beq	273cc <__assert_fail@plt+0x14ce0>
   27398:	cmp	r9, r4
   2739c:	movhi	r3, #39	; 0x27
   273a0:	strbhi	r3, [r8, r4]
   273a4:	add	r3, r4, #1
   273a8:	cmp	r9, r3
   273ac:	movhi	r1, #36	; 0x24
   273b0:	strbhi	r1, [r8, r3]
   273b4:	add	r3, r4, #2
   273b8:	cmp	r9, r3
   273bc:	movhi	r1, #39	; 0x27
   273c0:	strbhi	r1, [r8, r3]
   273c4:	add	r3, r4, #3
   273c8:	str	r2, [sp, #48]	; 0x30
   273cc:	cmp	r9, r3
   273d0:	movhi	r2, #92	; 0x5c
   273d4:	strbhi	r2, [r8, r3]
   273d8:	cmp	fp, #0
   273dc:	add	r4, r3, #1
   273e0:	beq	27970 <__assert_fail@plt+0x15284>
   273e4:	ldr	r2, [sp, #28]
   273e8:	ldr	r1, [sp, #36]	; 0x24
   273ec:	add	r2, r2, #1
   273f0:	cmp	r1, r2
   273f4:	bls	27430 <__assert_fail@plt+0x14d44>
   273f8:	ldr	r1, [sp, #44]	; 0x2c
   273fc:	mov	r7, #48	; 0x30
   27400:	ldrb	r2, [r1, r2]
   27404:	sub	r2, r2, #48	; 0x30
   27408:	cmp	r2, #9
   2740c:	movhi	r5, r6
   27410:	bhi	27518 <__assert_fail@plt+0x14e2c>
   27414:	cmp	r9, r4
   27418:	add	r2, r3, #2
   2741c:	strbhi	r7, [r8, r4]
   27420:	cmp	r9, r2
   27424:	add	r4, r3, #3
   27428:	movhi	r1, #48	; 0x30
   2742c:	strbhi	r1, [r8, r2]
   27430:	mov	r5, r6
   27434:	b	27978 <__assert_fail@plt+0x1528c>
   27438:	ldr	r3, [sp, #148]	; 0x94
   2743c:	tst	r3, #1
   27440:	ldreq	r5, [sp, #24]
   27444:	beq	27984 <__assert_fail@plt+0x15298>
   27448:	ldr	r3, [sp, #28]
   2744c:	add	r3, r3, #1
   27450:	b	26df0 <__assert_fail@plt+0x14704>
   27454:	cmp	r6, #0
   27458:	bne	270a4 <__assert_fail@plt+0x149b8>
   2745c:	mov	r5, #0
   27460:	b	272d8 <__assert_fail@plt+0x14bec>
   27464:	ldr	r3, [sp, #148]	; 0x94
   27468:	tst	r3, #4
   2746c:	beq	2745c <__assert_fail@plt+0x14d70>
   27470:	ldr	r3, [sp, #28]
   27474:	add	r2, r3, #2
   27478:	ldr	r3, [sp, #36]	; 0x24
   2747c:	cmp	r3, r2
   27480:	bls	2745c <__assert_fail@plt+0x14d70>
   27484:	ldr	r3, [sp, #44]	; 0x2c
   27488:	ldr	r1, [sp, #28]
   2748c:	add	r3, r3, r1
   27490:	ldrb	r0, [r3, #1]
   27494:	cmp	r0, #63	; 0x3f
   27498:	bne	2745c <__assert_fail@plt+0x14d70>
   2749c:	ldr	r3, [sp, #44]	; 0x2c
   274a0:	ldrb	r1, [r3, r2]
   274a4:	sub	r3, r1, #33	; 0x21
   274a8:	uxtb	r3, r3
   274ac:	cmp	r3, #29
   274b0:	bhi	27980 <__assert_fail@plt+0x15294>
   274b4:	mov	ip, #1
   274b8:	ldr	r5, [pc, #1428]	; 27a54 <__assert_fail@plt+0x15368>
   274bc:	ands	r5, r5, ip, lsl r3
   274c0:	beq	272d8 <__assert_fail@plt+0x14bec>
   274c4:	cmp	r6, #0
   274c8:	bne	270a4 <__assert_fail@plt+0x149b8>
   274cc:	add	r3, r4, #1
   274d0:	cmp	r9, r4
   274d4:	strbhi	r0, [r8, r4]
   274d8:	cmp	r9, r3
   274dc:	movhi	r0, #34	; 0x22
   274e0:	strbhi	r0, [r8, r3]
   274e4:	add	r3, r4, #2
   274e8:	cmp	r9, r3
   274ec:	movhi	r0, #34	; 0x22
   274f0:	strbhi	r0, [r8, r3]
   274f4:	add	r3, r4, #3
   274f8:	cmp	r9, r3
   274fc:	add	r4, r4, #4
   27500:	mov	r5, r6
   27504:	mov	fp, r6
   27508:	mov	r7, r1
   2750c:	movhi	r0, #63	; 0x3f
   27510:	strbhi	r0, [r8, r3]
   27514:	str	r2, [sp, #28]
   27518:	ldr	r3, [sp, #24]
   2751c:	eor	r3, r3, #1
   27520:	cmp	sl, #2
   27524:	orreq	r3, r3, #1
   27528:	eor	r3, r3, #1
   2752c:	orr	r3, r6, r3
   27530:	tst	r3, #255	; 0xff
   27534:	beq	27564 <__assert_fail@plt+0x14e78>
   27538:	ldr	r3, [sp, #152]	; 0x98
   2753c:	cmp	r3, #0
   27540:	beq	27564 <__assert_fail@plt+0x14e78>
   27544:	lsr	r2, r7, #5
   27548:	ldr	r1, [sp, #152]	; 0x98
   2754c:	uxtb	r2, r2
   27550:	and	r3, r7, #31
   27554:	ldr	r2, [r1, r2, lsl #2]
   27558:	lsr	r3, r2, r3
   2755c:	tst	r3, #1
   27560:	bne	27570 <__assert_fail@plt+0x14e84>
   27564:	ldr	r3, [sp, #64]	; 0x40
   27568:	cmp	r3, #0
   2756c:	beq	27608 <__assert_fail@plt+0x14f1c>
   27570:	cmp	r6, #0
   27574:	bne	270a4 <__assert_fail@plt+0x149b8>
   27578:	ldr	r3, [sp, #48]	; 0x30
   2757c:	eor	r3, r3, #1
   27580:	cmp	sl, #2
   27584:	movne	r3, #0
   27588:	andeq	r3, r3, #1
   2758c:	cmp	r3, #0
   27590:	beq	275c8 <__assert_fail@plt+0x14edc>
   27594:	cmp	r9, r4
   27598:	movhi	r2, #39	; 0x27
   2759c:	strbhi	r2, [r8, r4]
   275a0:	add	r2, r4, #1
   275a4:	cmp	r9, r2
   275a8:	movhi	r1, #36	; 0x24
   275ac:	strbhi	r1, [r8, r2]
   275b0:	add	r2, r4, #2
   275b4:	cmp	r9, r2
   275b8:	add	r4, r4, #3
   275bc:	movhi	r1, #39	; 0x27
   275c0:	strbhi	r1, [r8, r2]
   275c4:	str	r3, [sp, #48]	; 0x30
   275c8:	cmp	r9, r4
   275cc:	movhi	r3, #92	; 0x5c
   275d0:	strbhi	r3, [r8, r4]
   275d4:	ldr	fp, [sp, #52]	; 0x34
   275d8:	add	r4, r4, #1
   275dc:	b	27608 <__assert_fail@plt+0x14f1c>
   275e0:	mov	r3, #116	; 0x74
   275e4:	b	271bc <__assert_fail@plt+0x14ad0>
   275e8:	mov	r3, #118	; 0x76
   275ec:	b	2734c <__assert_fail@plt+0x14c60>
   275f0:	cmp	sl, #2
   275f4:	bne	27664 <__assert_fail@plt+0x14f78>
   275f8:	cmp	r6, #0
   275fc:	bne	270a4 <__assert_fail@plt+0x149b8>
   27600:	mov	r5, r6
   27604:	mov	fp, r6
   27608:	ldr	r3, [sp, #48]	; 0x30
   2760c:	eor	fp, fp, #1
   27610:	and	fp, fp, r3
   27614:	tst	fp, #255	; 0xff
   27618:	beq	27644 <__assert_fail@plt+0x14f58>
   2761c:	cmp	r9, r4
   27620:	movhi	r3, #39	; 0x27
   27624:	strbhi	r3, [r8, r4]
   27628:	add	r3, r4, #1
   2762c:	cmp	r9, r3
   27630:	movhi	r2, #39	; 0x27
   27634:	add	r4, r4, #2
   27638:	strbhi	r2, [r8, r3]
   2763c:	mov	r3, #0
   27640:	str	r3, [sp, #48]	; 0x30
   27644:	cmp	r9, r4
   27648:	strbhi	r7, [r8, r4]
   2764c:	ldr	r3, [sp, #72]	; 0x48
   27650:	cmp	r5, #0
   27654:	moveq	r3, #0
   27658:	add	r4, r4, #1
   2765c:	str	r3, [sp, #72]	; 0x48
   27660:	b	27448 <__assert_fail@plt+0x14d5c>
   27664:	ldr	r3, [sp, #24]
   27668:	and	r3, r3, r6
   2766c:	tst	r5, r3
   27670:	moveq	r3, r7
   27674:	beq	271bc <__assert_fail@plt+0x14ad0>
   27678:	mov	fp, #0
   2767c:	mov	r5, fp
   27680:	b	27608 <__assert_fail@plt+0x14f1c>
   27684:	mov	r3, #110	; 0x6e
   27688:	b	271bc <__assert_fail@plt+0x14ad0>
   2768c:	mov	r3, #97	; 0x61
   27690:	b	2734c <__assert_fail@plt+0x14c60>
   27694:	mov	r3, #102	; 0x66
   27698:	b	2734c <__assert_fail@plt+0x14c60>
   2769c:	ldr	r3, [sp, #36]	; 0x24
   276a0:	cmn	r3, #1
   276a4:	bne	276c4 <__assert_fail@plt+0x14fd8>
   276a8:	ldr	r3, [sp, #44]	; 0x2c
   276ac:	ldrb	r3, [r3, #1]
   276b0:	adds	r3, r3, #0
   276b4:	movne	r3, #1
   276b8:	cmp	r3, #0
   276bc:	bne	2745c <__assert_fail@plt+0x14d70>
   276c0:	b	27320 <__assert_fail@plt+0x14c34>
   276c4:	ldr	r3, [sp, #36]	; 0x24
   276c8:	subs	r3, r3, #1
   276cc:	b	276b4 <__assert_fail@plt+0x14fc8>
   276d0:	mov	r3, #0
   276d4:	str	r3, [sp, #96]	; 0x60
   276d8:	str	r3, [sp, #100]	; 0x64
   276dc:	ldr	r3, [sp, #36]	; 0x24
   276e0:	cmn	r3, #1
   276e4:	bne	276f4 <__assert_fail@plt+0x15008>
   276e8:	ldr	r0, [sp, #44]	; 0x2c
   276ec:	bl	123bc <strlen@plt>
   276f0:	str	r0, [sp, #36]	; 0x24
   276f4:	ldr	r5, [sp, #52]	; 0x34
   276f8:	mov	r3, #0
   276fc:	str	r3, [sp, #56]	; 0x38
   27700:	ldr	r3, [sp, #28]
   27704:	ldr	r2, [sp, #56]	; 0x38
   27708:	ldr	r1, [sp, #36]	; 0x24
   2770c:	add	r2, r3, r2
   27710:	ldr	r3, [sp, #44]	; 0x2c
   27714:	add	r0, sp, #92	; 0x5c
   27718:	add	fp, r3, r2
   2771c:	sub	r2, r1, r2
   27720:	add	r3, sp, #96	; 0x60
   27724:	mov	r1, fp
   27728:	bl	2bf50 <__assert_fail@plt+0x19864>
   2772c:	subs	r2, r0, #0
   27730:	beq	27770 <__assert_fail@plt+0x15084>
   27734:	cmn	r2, #1
   27738:	beq	27948 <__assert_fail@plt+0x1525c>
   2773c:	cmn	r2, #2
   27740:	bne	278b8 <__assert_fail@plt+0x151cc>
   27744:	ldr	r2, [sp, #56]	; 0x38
   27748:	ldr	r3, [sp, #28]
   2774c:	add	r3, r3, r2
   27750:	ldr	r2, [sp, #36]	; 0x24
   27754:	cmp	r2, r3
   27758:	bls	27948 <__assert_fail@plt+0x1525c>
   2775c:	ldr	r3, [sp, #80]	; 0x50
   27760:	ldr	r2, [sp, #56]	; 0x38
   27764:	ldrb	r5, [r3, r2]
   27768:	cmp	r5, #0
   2776c:	bne	278a8 <__assert_fail@plt+0x151bc>
   27770:	ldr	r3, [sp, #56]	; 0x38
   27774:	cmp	r3, #1
   27778:	bls	27180 <__assert_fail@plt+0x14a94>
   2777c:	ldr	r2, [sp, #56]	; 0x38
   27780:	ldr	r3, [sp, #28]
   27784:	mov	fp, #0
   27788:	add	r3, r3, r2
   2778c:	ldr	r2, [sp, #24]
   27790:	str	r3, [sp, #52]	; 0x34
   27794:	eor	r3, r5, #1
   27798:	and	r3, r3, r2
   2779c:	mov	ip, #92	; 0x5c
   277a0:	uxtb	r3, r3
   277a4:	mov	r2, #39	; 0x27
   277a8:	cmp	r3, #0
   277ac:	beq	27950 <__assert_fail@plt+0x15264>
   277b0:	cmp	r6, #0
   277b4:	bne	270a0 <__assert_fail@plt+0x149b4>
   277b8:	ldr	r1, [sp, #48]	; 0x30
   277bc:	eor	r1, r1, #1
   277c0:	cmp	sl, #2
   277c4:	movne	r1, #0
   277c8:	andeq	r1, r1, #1
   277cc:	cmp	r1, #0
   277d0:	beq	27800 <__assert_fail@plt+0x15114>
   277d4:	add	r0, r4, #1
   277d8:	cmp	r9, r4
   277dc:	strbhi	r2, [r8, r4]
   277e0:	cmp	r9, r0
   277e4:	movhi	lr, #36	; 0x24
   277e8:	strbhi	lr, [r8, r0]
   277ec:	add	r0, r4, #2
   277f0:	add	r4, r4, #3
   277f4:	cmp	r9, r0
   277f8:	strbhi	r2, [r8, r0]
   277fc:	str	r1, [sp, #48]	; 0x30
   27800:	add	r0, r4, #1
   27804:	cmp	r9, r4
   27808:	strbhi	ip, [r8, r4]
   2780c:	cmp	r9, r0
   27810:	lsrhi	r1, r7, #6
   27814:	addhi	r1, r1, #48	; 0x30
   27818:	strbhi	r1, [r8, r0]
   2781c:	add	r0, r4, #2
   27820:	cmp	r9, r0
   27824:	lsrhi	r1, r7, #3
   27828:	and	r7, r7, #7
   2782c:	andhi	r1, r1, #7
   27830:	add	r4, r4, #3
   27834:	add	r7, r7, #48	; 0x30
   27838:	mov	fp, r3
   2783c:	addhi	r1, r1, #48	; 0x30
   27840:	strbhi	r1, [r8, r0]
   27844:	ldr	r1, [sp, #28]
   27848:	ldr	r0, [sp, #52]	; 0x34
   2784c:	add	r1, r1, #1
   27850:	cmp	r0, r1
   27854:	bls	27608 <__assert_fail@plt+0x14f1c>
   27858:	ldr	lr, [sp, #48]	; 0x30
   2785c:	eor	r0, fp, #1
   27860:	and	r0, r0, lr
   27864:	tst	r0, #255	; 0xff
   27868:	beq	2788c <__assert_fail@plt+0x151a0>
   2786c:	add	r0, r4, #1
   27870:	cmp	r9, r4
   27874:	strbhi	r2, [r8, r4]
   27878:	cmp	r9, r0
   2787c:	add	r4, r4, #2
   27880:	strbhi	r2, [r8, r0]
   27884:	mov	r0, #0
   27888:	str	r0, [sp, #48]	; 0x30
   2788c:	ldr	r0, [sp, #44]	; 0x2c
   27890:	cmp	r9, r4
   27894:	strbhi	r7, [r8, r4]
   27898:	str	r1, [sp, #28]
   2789c:	add	r4, r4, #1
   278a0:	ldrb	r7, [r0, r1]
   278a4:	b	277a8 <__assert_fail@plt+0x150bc>
   278a8:	ldr	r3, [sp, #56]	; 0x38
   278ac:	add	r3, r3, #1
   278b0:	str	r3, [sp, #56]	; 0x38
   278b4:	b	27744 <__assert_fail@plt+0x15058>
   278b8:	cmp	sl, #2
   278bc:	movne	r3, #0
   278c0:	andeq	r3, r6, #1
   278c4:	cmp	r3, #0
   278c8:	movne	r1, #1
   278cc:	bne	27928 <__assert_fail@plt+0x1523c>
   278d0:	ldr	r0, [sp, #92]	; 0x5c
   278d4:	str	r2, [sp, #84]	; 0x54
   278d8:	bl	12200 <iswprint@plt>
   278dc:	ldr	r3, [sp, #56]	; 0x38
   278e0:	ldr	r2, [sp, #84]	; 0x54
   278e4:	add	r3, r3, r2
   278e8:	str	r3, [sp, #56]	; 0x38
   278ec:	cmp	r0, #0
   278f0:	add	r0, sp, #96	; 0x60
   278f4:	moveq	r5, #0
   278f8:	bl	12134 <mbsinit@plt>
   278fc:	cmp	r0, #0
   27900:	beq	27700 <__assert_fail@plt+0x15014>
   27904:	b	27770 <__assert_fail@plt+0x15084>
   27908:	ldrb	r3, [fp, r1]
   2790c:	cmp	r3, #94	; 0x5e
   27910:	beq	271d0 <__assert_fail@plt+0x14ae4>
   27914:	bhi	27934 <__assert_fail@plt+0x15248>
   27918:	sub	r3, r3, #91	; 0x5b
   2791c:	cmp	r3, #1
   27920:	bls	271d0 <__assert_fail@plt+0x14ae4>
   27924:	add	r1, r1, #1
   27928:	cmp	r1, r2
   2792c:	bne	27908 <__assert_fail@plt+0x1521c>
   27930:	b	278d0 <__assert_fail@plt+0x151e4>
   27934:	cmp	r3, #96	; 0x60
   27938:	beq	271d0 <__assert_fail@plt+0x14ae4>
   2793c:	cmp	r3, #124	; 0x7c
   27940:	bne	27924 <__assert_fail@plt+0x15238>
   27944:	b	271d0 <__assert_fail@plt+0x14ae4>
   27948:	mov	r5, #0
   2794c:	b	27770 <__assert_fail@plt+0x15084>
   27950:	ldr	r1, [sp, #64]	; 0x40
   27954:	cmp	r1, #0
   27958:	beq	27844 <__assert_fail@plt+0x15158>
   2795c:	cmp	r9, r4
   27960:	strbhi	ip, [r8, r4]
   27964:	str	r3, [sp, #64]	; 0x40
   27968:	add	r4, r4, #1
   2796c:	b	27844 <__assert_fail@plt+0x15158>
   27970:	mov	r5, fp
   27974:	ldr	fp, [sp, #24]
   27978:	mov	r7, #48	; 0x30
   2797c:	b	27518 <__assert_fail@plt+0x14e2c>
   27980:	mov	r5, #0
   27984:	mov	fp, r5
   27988:	b	27518 <__assert_fail@plt+0x14e2c>
   2798c:	ldr	r3, [sp, #36]	; 0x24
   27990:	ldr	r2, [sp, #28]
   27994:	subs	r3, r3, r2
   27998:	movne	r3, #1
   2799c:	b	26e14 <__assert_fail@plt+0x14728>
   279a0:	ldr	r3, [sp, #60]	; 0x3c
   279a4:	clz	r7, r9
   279a8:	cmp	r3, #0
   279ac:	lsr	r7, r7, #5
   279b0:	moveq	r7, #0
   279b4:	cmp	r7, #0
   279b8:	mov	r5, r3
   279bc:	bne	26d74 <__assert_fail@plt+0x14688>
   279c0:	ldr	r3, [sp, #68]	; 0x44
   279c4:	ldr	r2, [sp, #40]	; 0x28
   279c8:	cmp	r2, #0
   279cc:	moveq	r3, #0
   279d0:	andne	r3, r3, #1
   279d4:	cmp	r3, #0
   279d8:	movne	r3, r2
   279dc:	subne	r2, r3, #1
   279e0:	bne	27a10 <__assert_fail@plt+0x15324>
   279e4:	cmp	r9, r4
   279e8:	movhi	r3, #0
   279ec:	strbhi	r3, [r8, r4]
   279f0:	mov	r0, r4
   279f4:	add	sp, sp, #108	; 0x6c
   279f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   279fc:	mov	r3, r2
   27a00:	b	279c4 <__assert_fail@plt+0x152d8>
   27a04:	cmp	r9, r4
   27a08:	strbhi	r3, [r8, r4]
   27a0c:	add	r4, r4, #1
   27a10:	ldrb	r3, [r2, #1]!
   27a14:	cmp	r3, #0
   27a18:	bne	27a04 <__assert_fail@plt+0x15318>
   27a1c:	b	279e4 <__assert_fail@plt+0x152f8>
   27a20:	ldr	r3, [pc, #32]	; 27a48 <__assert_fail@plt+0x1535c>
   27a24:	mov	r6, #1
   27a28:	str	r6, [sp, #24]
   27a2c:	str	r6, [sp, #32]
   27a30:	str	r3, [sp, #40]	; 0x28
   27a34:	mov	r4, #0
   27a38:	mov	sl, #5
   27a3c:	b	26de4 <__assert_fail@plt+0x146f8>
   27a40:	mov	r6, #1
   27a44:	b	26fd8 <__assert_fail@plt+0x148ec>
   27a48:	andeq	lr, r3, pc, lsl sl
   27a4c:	andeq	lr, r3, fp, lsl #26
   27a50:	andeq	fp, r3, sp, ror pc
   27a54:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   27a58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27a5c:	sub	sp, sp, #52	; 0x34
   27a60:	mov	r6, r0
   27a64:	mov	r5, r3
   27a68:	mov	r8, r1
   27a6c:	mov	r9, r2
   27a70:	bl	12404 <__errno_location@plt>
   27a74:	ldr	r7, [pc, #380]	; 27bf8 <__assert_fail@plt+0x1550c>
   27a78:	cmn	r6, #-2147483647	; 0x80000001
   27a7c:	ldr	r4, [r7]
   27a80:	ldr	r3, [r0]
   27a84:	str	r0, [sp, #24]
   27a88:	str	r3, [sp, #32]
   27a8c:	movne	r3, #0
   27a90:	moveq	r3, #1
   27a94:	orrs	r3, r3, r6, lsr #31
   27a98:	beq	27aa0 <__assert_fail@plt+0x153b4>
   27a9c:	bl	12698 <abort@plt>
   27aa0:	ldr	r2, [r7, #4]
   27aa4:	cmp	r6, r2
   27aa8:	blt	27b18 <__assert_fail@plt+0x1542c>
   27aac:	add	r1, sp, #48	; 0x30
   27ab0:	add	sl, r7, #8
   27ab4:	str	r2, [r1, #-4]!
   27ab8:	cmp	r4, sl
   27abc:	mov	r3, #8
   27ac0:	sub	r2, r6, r2
   27ac4:	movne	r0, r4
   27ac8:	str	r3, [sp]
   27acc:	add	r2, r2, #1
   27ad0:	mvn	r3, #-2147483648	; 0x80000000
   27ad4:	moveq	r0, #0
   27ad8:	bl	28eb4 <__assert_fail@plt+0x167c8>
   27adc:	cmp	r4, sl
   27ae0:	ldr	r2, [sp, #44]	; 0x2c
   27ae4:	mov	fp, r0
   27ae8:	str	r0, [r7]
   27aec:	ldmeq	r4, {r0, r1}
   27af0:	mov	r4, fp
   27af4:	stmeq	fp, {r0, r1}
   27af8:	ldr	r0, [r7, #4]
   27afc:	mov	r1, #0
   27b00:	sub	r2, r2, r0
   27b04:	add	r0, fp, r0, lsl #3
   27b08:	lsl	r2, r2, #3
   27b0c:	bl	12434 <memset@plt>
   27b10:	ldr	r3, [sp, #44]	; 0x2c
   27b14:	str	r3, [r7, #4]
   27b18:	ldr	r3, [r5, #4]
   27b1c:	add	sl, r4, r6, lsl #3
   27b20:	orr	r3, r3, #1
   27b24:	str	r3, [sp, #28]
   27b28:	add	r3, r5, #8
   27b2c:	str	r3, [sp, #36]	; 0x24
   27b30:	ldr	r3, [r5, #44]	; 0x2c
   27b34:	ldr	fp, [r4, r6, lsl #3]
   27b38:	ldr	r7, [sl, #4]
   27b3c:	str	r3, [sp, #16]
   27b40:	ldr	r3, [r5, #40]	; 0x28
   27b44:	mov	r2, r8
   27b48:	str	r3, [sp, #12]
   27b4c:	add	r3, r5, #8
   27b50:	str	r3, [sp, #8]
   27b54:	ldr	r3, [sp, #28]
   27b58:	mov	r1, fp
   27b5c:	str	r3, [sp, #4]
   27b60:	ldr	r3, [r5]
   27b64:	mov	r0, r7
   27b68:	str	r3, [sp]
   27b6c:	mov	r3, r9
   27b70:	bl	26d24 <__assert_fail@plt+0x14638>
   27b74:	cmp	fp, r0
   27b78:	bhi	27be0 <__assert_fail@plt+0x154f4>
   27b7c:	ldr	r3, [pc, #120]	; 27bfc <__assert_fail@plt+0x15510>
   27b80:	add	fp, r0, #1
   27b84:	cmp	r7, r3
   27b88:	str	fp, [r4, r6, lsl #3]
   27b8c:	beq	27b98 <__assert_fail@plt+0x154ac>
   27b90:	mov	r0, r7
   27b94:	bl	2a01c <__assert_fail@plt+0x17930>
   27b98:	mov	r0, fp
   27b9c:	bl	28d6c <__assert_fail@plt+0x16680>
   27ba0:	ldr	r3, [r5, #44]	; 0x2c
   27ba4:	mov	r2, r8
   27ba8:	mov	r1, fp
   27bac:	str	r0, [sl, #4]
   27bb0:	str	r3, [sp, #16]
   27bb4:	ldr	r3, [r5, #40]	; 0x28
   27bb8:	mov	r7, r0
   27bbc:	str	r3, [sp, #12]
   27bc0:	add	r3, r5, #8
   27bc4:	str	r3, [sp, #8]
   27bc8:	ldr	r3, [sp, #28]
   27bcc:	str	r3, [sp, #4]
   27bd0:	ldr	r3, [r5]
   27bd4:	str	r3, [sp]
   27bd8:	mov	r3, r9
   27bdc:	bl	26d24 <__assert_fail@plt+0x14638>
   27be0:	ldr	r3, [sp, #24]
   27be4:	ldr	r2, [sp, #32]
   27be8:	mov	r0, r7
   27bec:	str	r2, [r3]
   27bf0:	add	sp, sp, #52	; 0x34
   27bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27bf8:	andeq	r0, r5, r8, lsl #10
   27bfc:	andeq	r0, r5, r0, lsr #26
   27c00:	push	{r4, r5, r6, lr}
   27c04:	mov	r5, r0
   27c08:	bl	12404 <__errno_location@plt>
   27c0c:	cmp	r5, #0
   27c10:	mov	r1, #48	; 0x30
   27c14:	ldr	r6, [r0]
   27c18:	mov	r4, r0
   27c1c:	ldr	r0, [pc, #12]	; 27c30 <__assert_fail@plt+0x15544>
   27c20:	movne	r0, r5
   27c24:	bl	29148 <__assert_fail@plt+0x16a5c>
   27c28:	str	r6, [r4]
   27c2c:	pop	{r4, r5, r6, pc}
   27c30:	andeq	r0, r5, r0, lsr #28
   27c34:	ldr	r3, [pc, #12]	; 27c48 <__assert_fail@plt+0x1555c>
   27c38:	cmp	r0, #0
   27c3c:	moveq	r0, r3
   27c40:	ldr	r0, [r0]
   27c44:	bx	lr
   27c48:	andeq	r0, r5, r0, lsr #28
   27c4c:	ldr	r3, [pc, #12]	; 27c60 <__assert_fail@plt+0x15574>
   27c50:	cmp	r0, #0
   27c54:	moveq	r0, r3
   27c58:	str	r1, [r0]
   27c5c:	bx	lr
   27c60:	andeq	r0, r5, r0, lsr #28
   27c64:	ldr	r3, [pc, #52]	; 27ca0 <__assert_fail@plt+0x155b4>
   27c68:	cmp	r0, #0
   27c6c:	moveq	r0, r3
   27c70:	add	r3, r0, #8
   27c74:	push	{lr}		; (str lr, [sp, #-4]!)
   27c78:	lsr	lr, r1, #5
   27c7c:	and	r1, r1, #31
   27c80:	ldr	ip, [r3, lr, lsl #2]
   27c84:	lsr	r0, ip, r1
   27c88:	eor	r2, r2, r0
   27c8c:	and	r2, r2, #1
   27c90:	and	r0, r0, #1
   27c94:	eor	r1, ip, r2, lsl r1
   27c98:	str	r1, [r3, lr, lsl #2]
   27c9c:	pop	{pc}		; (ldr pc, [sp], #4)
   27ca0:	andeq	r0, r5, r0, lsr #28
   27ca4:	ldr	r3, [pc, #16]	; 27cbc <__assert_fail@plt+0x155d0>
   27ca8:	cmp	r0, #0
   27cac:	movne	r3, r0
   27cb0:	ldr	r0, [r3, #4]
   27cb4:	str	r1, [r3, #4]
   27cb8:	bx	lr
   27cbc:	andeq	r0, r5, r0, lsr #28
   27cc0:	ldr	r3, [pc, #44]	; 27cf4 <__assert_fail@plt+0x15608>
   27cc4:	cmp	r0, #0
   27cc8:	moveq	r0, r3
   27ccc:	mov	r3, #10
   27cd0:	cmp	r2, #0
   27cd4:	cmpne	r1, #0
   27cd8:	str	r3, [r0]
   27cdc:	bne	27ce8 <__assert_fail@plt+0x155fc>
   27ce0:	push	{r4, lr}
   27ce4:	bl	12698 <abort@plt>
   27ce8:	str	r1, [r0, #40]	; 0x28
   27cec:	str	r2, [r0, #44]	; 0x2c
   27cf0:	bx	lr
   27cf4:	andeq	r0, r5, r0, lsr #28
   27cf8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27cfc:	sub	sp, sp, #24
   27d00:	mov	sl, r3
   27d04:	ldr	r4, [sp, #56]	; 0x38
   27d08:	ldr	r3, [pc, #100]	; 27d74 <__assert_fail@plt+0x15688>
   27d0c:	cmp	r4, #0
   27d10:	moveq	r4, r3
   27d14:	mov	r7, r0
   27d18:	mov	r8, r1
   27d1c:	mov	r9, r2
   27d20:	bl	12404 <__errno_location@plt>
   27d24:	ldr	r3, [r4, #44]	; 0x2c
   27d28:	mov	r2, r9
   27d2c:	mov	r1, r8
   27d30:	ldr	r6, [r0]
   27d34:	str	r3, [sp, #16]
   27d38:	ldr	r3, [r4, #40]	; 0x28
   27d3c:	mov	r5, r0
   27d40:	str	r3, [sp, #12]
   27d44:	add	r3, r4, #8
   27d48:	str	r3, [sp, #8]
   27d4c:	ldr	r3, [r4, #4]
   27d50:	mov	r0, r7
   27d54:	str	r3, [sp, #4]
   27d58:	ldr	r3, [r4]
   27d5c:	str	r3, [sp]
   27d60:	mov	r3, sl
   27d64:	bl	26d24 <__assert_fail@plt+0x14638>
   27d68:	str	r6, [r5]
   27d6c:	add	sp, sp, #24
   27d70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27d74:	andeq	r0, r5, r0, lsr #28
   27d78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27d7c:	cmp	r3, #0
   27d80:	sub	sp, sp, #44	; 0x2c
   27d84:	ldr	r4, [pc, #188]	; 27e48 <__assert_fail@plt+0x1575c>
   27d88:	mov	r6, r2
   27d8c:	movne	r4, r3
   27d90:	mov	sl, r1
   27d94:	mov	r9, r0
   27d98:	bl	12404 <__errno_location@plt>
   27d9c:	ldr	r5, [r4, #4]
   27da0:	add	fp, r4, #8
   27da4:	cmp	r6, #0
   27da8:	orreq	r5, r5, #1
   27dac:	mov	r1, #0
   27db0:	mov	r2, r9
   27db4:	ldr	r3, [r0]
   27db8:	mov	r8, r0
   27dbc:	str	r3, [sp, #28]
   27dc0:	ldr	r3, [r4, #44]	; 0x2c
   27dc4:	mov	r0, r1
   27dc8:	str	r3, [sp, #16]
   27dcc:	ldr	r3, [r4, #40]	; 0x28
   27dd0:	stmib	sp, {r5, fp}
   27dd4:	str	r3, [sp, #12]
   27dd8:	ldr	r3, [r4]
   27ddc:	str	r3, [sp]
   27de0:	mov	r3, sl
   27de4:	bl	26d24 <__assert_fail@plt+0x14638>
   27de8:	add	r1, r0, #1
   27dec:	mov	r7, r0
   27df0:	mov	r0, r1
   27df4:	str	r1, [sp, #36]	; 0x24
   27df8:	bl	28d6c <__assert_fail@plt+0x16680>
   27dfc:	ldr	r3, [r4, #44]	; 0x2c
   27e00:	mov	r2, r9
   27e04:	str	r3, [sp, #16]
   27e08:	ldr	r3, [r4, #40]	; 0x28
   27e0c:	stmib	sp, {r5, fp}
   27e10:	str	r3, [sp, #12]
   27e14:	ldr	r3, [r4]
   27e18:	ldr	r1, [sp, #36]	; 0x24
   27e1c:	str	r3, [sp]
   27e20:	mov	r3, sl
   27e24:	str	r0, [sp, #32]
   27e28:	bl	26d24 <__assert_fail@plt+0x14638>
   27e2c:	ldr	r3, [sp, #28]
   27e30:	cmp	r6, #0
   27e34:	str	r3, [r8]
   27e38:	ldr	r0, [sp, #32]
   27e3c:	strne	r7, [r6]
   27e40:	add	sp, sp, #44	; 0x2c
   27e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27e48:	andeq	r0, r5, r0, lsr #28
   27e4c:	mov	r3, r2
   27e50:	mov	r2, #0
   27e54:	b	27d78 <__assert_fail@plt+0x1568c>
   27e58:	push	{r4, r5, r6, r7, r8, lr}
   27e5c:	mov	r6, #1
   27e60:	ldr	r4, [pc, #104]	; 27ed0 <__assert_fail@plt+0x157e4>
   27e64:	ldr	r5, [r4]
   27e68:	add	r7, r5, #12
   27e6c:	ldr	r3, [r4, #4]
   27e70:	add	r7, r7, #8
   27e74:	cmp	r6, r3
   27e78:	blt	27ec0 <__assert_fail@plt+0x157d4>
   27e7c:	ldr	r0, [r5, #4]
   27e80:	ldr	r6, [pc, #76]	; 27ed4 <__assert_fail@plt+0x157e8>
   27e84:	cmp	r0, r6
   27e88:	beq	27e9c <__assert_fail@plt+0x157b0>
   27e8c:	bl	2a01c <__assert_fail@plt+0x17930>
   27e90:	mov	r3, #256	; 0x100
   27e94:	str	r3, [r4, #8]
   27e98:	str	r6, [r4, #12]
   27e9c:	ldr	r6, [pc, #52]	; 27ed8 <__assert_fail@plt+0x157ec>
   27ea0:	cmp	r5, r6
   27ea4:	beq	27eb4 <__assert_fail@plt+0x157c8>
   27ea8:	mov	r0, r5
   27eac:	bl	2a01c <__assert_fail@plt+0x17930>
   27eb0:	str	r6, [r4]
   27eb4:	mov	r3, #1
   27eb8:	str	r3, [r4, #4]
   27ebc:	pop	{r4, r5, r6, r7, r8, pc}
   27ec0:	ldr	r0, [r7, #-8]
   27ec4:	bl	2a01c <__assert_fail@plt+0x17930>
   27ec8:	add	r6, r6, #1
   27ecc:	b	27e6c <__assert_fail@plt+0x15780>
   27ed0:	andeq	r0, r5, r8, lsl #10
   27ed4:	andeq	r0, r5, r0, lsr #26
   27ed8:	andeq	r0, r5, r0, lsl r5
   27edc:	ldr	r3, [pc, #4]	; 27ee8 <__assert_fail@plt+0x157fc>
   27ee0:	mvn	r2, #0
   27ee4:	b	27a58 <__assert_fail@plt+0x1536c>
   27ee8:	andeq	r0, r5, r0, lsr #28
   27eec:	ldr	r3, [pc]	; 27ef4 <__assert_fail@plt+0x15808>
   27ef0:	b	27a58 <__assert_fail@plt+0x1536c>
   27ef4:	andeq	r0, r5, r0, lsr #28
   27ef8:	mov	r1, r0
   27efc:	mov	r0, #0
   27f00:	b	27edc <__assert_fail@plt+0x157f0>
   27f04:	mov	r2, r1
   27f08:	mov	r1, r0
   27f0c:	mov	r0, #0
   27f10:	b	27eec <__assert_fail@plt+0x15800>
   27f14:	push	{r4, r5, lr}
   27f18:	sub	sp, sp, #52	; 0x34
   27f1c:	mov	r5, r2
   27f20:	mov	r4, r0
   27f24:	mov	r0, sp
   27f28:	bl	26be0 <__assert_fail@plt+0x144f4>
   27f2c:	mov	r3, sp
   27f30:	mvn	r2, #0
   27f34:	mov	r1, r5
   27f38:	mov	r0, r4
   27f3c:	bl	27a58 <__assert_fail@plt+0x1536c>
   27f40:	add	sp, sp, #52	; 0x34
   27f44:	pop	{r4, r5, pc}
   27f48:	push	{r4, r5, r6, lr}
   27f4c:	sub	sp, sp, #48	; 0x30
   27f50:	mov	r5, r2
   27f54:	mov	r6, r3
   27f58:	mov	r4, r0
   27f5c:	mov	r0, sp
   27f60:	bl	26be0 <__assert_fail@plt+0x144f4>
   27f64:	mov	r3, sp
   27f68:	mov	r2, r6
   27f6c:	mov	r1, r5
   27f70:	mov	r0, r4
   27f74:	bl	27a58 <__assert_fail@plt+0x1536c>
   27f78:	add	sp, sp, #48	; 0x30
   27f7c:	pop	{r4, r5, r6, pc}
   27f80:	mov	r2, r1
   27f84:	mov	r1, r0
   27f88:	mov	r0, #0
   27f8c:	b	27f14 <__assert_fail@plt+0x15828>
   27f90:	mov	r3, r2
   27f94:	mov	r2, r1
   27f98:	mov	r1, r0
   27f9c:	mov	r0, #0
   27fa0:	b	27f48 <__assert_fail@plt+0x1585c>
   27fa4:	push	{r4, r5, r6, lr}
   27fa8:	mov	r4, r0
   27fac:	ldr	lr, [pc, #80]	; 28004 <__assert_fail@plt+0x15918>
   27fb0:	mov	r5, r1
   27fb4:	mov	r6, r2
   27fb8:	ldm	lr!, {r0, r1, r2, r3}
   27fbc:	sub	sp, sp, #48	; 0x30
   27fc0:	mov	ip, sp
   27fc4:	stmia	ip!, {r0, r1, r2, r3}
   27fc8:	ldm	lr!, {r0, r1, r2, r3}
   27fcc:	stmia	ip!, {r0, r1, r2, r3}
   27fd0:	ldm	lr, {r0, r1, r2, r3}
   27fd4:	stm	ip, {r0, r1, r2, r3}
   27fd8:	mov	r1, r6
   27fdc:	mov	r2, #1
   27fe0:	mov	r0, sp
   27fe4:	bl	27c64 <__assert_fail@plt+0x15578>
   27fe8:	mov	r3, sp
   27fec:	mov	r2, r5
   27ff0:	mov	r1, r4
   27ff4:	mov	r0, #0
   27ff8:	bl	27a58 <__assert_fail@plt+0x1536c>
   27ffc:	add	sp, sp, #48	; 0x30
   28000:	pop	{r4, r5, r6, pc}
   28004:	andeq	r0, r5, r0, lsr #28
   28008:	mov	r2, r1
   2800c:	mvn	r1, #0
   28010:	b	27fa4 <__assert_fail@plt+0x158b8>
   28014:	mov	r1, #58	; 0x3a
   28018:	b	28008 <__assert_fail@plt+0x1591c>
   2801c:	mov	r2, #58	; 0x3a
   28020:	b	27fa4 <__assert_fail@plt+0x158b8>
   28024:	push	{r4, r5, lr}
   28028:	sub	sp, sp, #100	; 0x64
   2802c:	mov	r4, r0
   28030:	mov	r0, sp
   28034:	mov	r5, r2
   28038:	bl	26be0 <__assert_fail@plt+0x144f4>
   2803c:	mov	ip, sp
   28040:	add	lr, sp, #48	; 0x30
   28044:	ldm	ip!, {r0, r1, r2, r3}
   28048:	stmia	lr!, {r0, r1, r2, r3}
   2804c:	ldm	ip!, {r0, r1, r2, r3}
   28050:	stmia	lr!, {r0, r1, r2, r3}
   28054:	ldm	ip, {r0, r1, r2, r3}
   28058:	stm	lr, {r0, r1, r2, r3}
   2805c:	mov	r2, #1
   28060:	mov	r1, #58	; 0x3a
   28064:	add	r0, sp, #48	; 0x30
   28068:	bl	27c64 <__assert_fail@plt+0x15578>
   2806c:	add	r3, sp, #48	; 0x30
   28070:	mvn	r2, #0
   28074:	mov	r1, r5
   28078:	mov	r0, r4
   2807c:	bl	27a58 <__assert_fail@plt+0x1536c>
   28080:	add	sp, sp, #100	; 0x64
   28084:	pop	{r4, r5, pc}
   28088:	push	{r4, r5, r6, r7, lr}
   2808c:	mov	r4, r0
   28090:	ldr	lr, [pc, #84]	; 280ec <__assert_fail@plt+0x15a00>
   28094:	mov	r6, r1
   28098:	mov	r7, r2
   2809c:	mov	r5, r3
   280a0:	ldm	lr!, {r0, r1, r2, r3}
   280a4:	sub	sp, sp, #52	; 0x34
   280a8:	mov	ip, sp
   280ac:	stmia	ip!, {r0, r1, r2, r3}
   280b0:	ldm	lr!, {r0, r1, r2, r3}
   280b4:	stmia	ip!, {r0, r1, r2, r3}
   280b8:	ldm	lr, {r0, r1, r2, r3}
   280bc:	stm	ip, {r0, r1, r2, r3}
   280c0:	mov	r2, r7
   280c4:	mov	r1, r6
   280c8:	mov	r0, sp
   280cc:	bl	27cc0 <__assert_fail@plt+0x155d4>
   280d0:	mov	r3, sp
   280d4:	ldr	r2, [sp, #72]	; 0x48
   280d8:	mov	r1, r5
   280dc:	mov	r0, r4
   280e0:	bl	27a58 <__assert_fail@plt+0x1536c>
   280e4:	add	sp, sp, #52	; 0x34
   280e8:	pop	{r4, r5, r6, r7, pc}
   280ec:	andeq	r0, r5, r0, lsr #28
   280f0:	mvn	ip, #0
   280f4:	push	{r0, r1, r2, lr}
   280f8:	str	ip, [sp]
   280fc:	bl	28088 <__assert_fail@plt+0x1599c>
   28100:	add	sp, sp, #12
   28104:	pop	{pc}		; (ldr pc, [sp], #4)
   28108:	mov	r3, r2
   2810c:	mov	r2, r1
   28110:	mov	r1, r0
   28114:	mov	r0, #0
   28118:	b	280f0 <__assert_fail@plt+0x15a04>
   2811c:	push	{r0, r1, r2, lr}
   28120:	str	r3, [sp]
   28124:	mov	r3, r2
   28128:	mov	r2, r1
   2812c:	mov	r1, r0
   28130:	mov	r0, #0
   28134:	bl	28088 <__assert_fail@plt+0x1599c>
   28138:	add	sp, sp, #12
   2813c:	pop	{pc}		; (ldr pc, [sp], #4)
   28140:	ldr	r3, [pc]	; 28148 <__assert_fail@plt+0x15a5c>
   28144:	b	27a58 <__assert_fail@plt+0x1536c>
   28148:	andeq	r0, r5, r8, lsl r5
   2814c:	mov	r2, r1
   28150:	mov	r1, r0
   28154:	mov	r0, #0
   28158:	b	28140 <__assert_fail@plt+0x15a54>
   2815c:	mvn	r2, #0
   28160:	b	28140 <__assert_fail@plt+0x15a54>
   28164:	mov	r1, r0
   28168:	mov	r0, #0
   2816c:	b	2815c <__assert_fail@plt+0x15a70>
   28170:	push	{r4, r5, r6, lr}
   28174:	mov	r4, #0
   28178:	mov	r5, r0
   2817c:	str	r4, [r0, #4]
   28180:	mov	r1, #524288	; 0x80000
   28184:	ldr	r0, [pc, #52]	; 281c0 <__assert_fail@plt+0x15ad4>
   28188:	bl	1fe48 <__assert_fail@plt+0xd75c>
   2818c:	cmp	r0, r4
   28190:	str	r0, [r5]
   28194:	bge	281b8 <__assert_fail@plt+0x15acc>
   28198:	mov	r1, r4
   2819c:	mov	r0, r4
   281a0:	bl	12380 <getcwd@plt>
   281a4:	cmp	r0, r4
   281a8:	str	r0, [r5, #4]
   281ac:	movne	r0, #0
   281b0:	mvneq	r0, #0
   281b4:	pop	{r4, r5, r6, pc}
   281b8:	mov	r0, r4
   281bc:	pop	{r4, r5, r6, pc}
   281c0:	andeq	sl, r3, r1, asr #14
   281c4:	mov	r3, r0
   281c8:	ldr	r0, [r0]
   281cc:	cmp	r0, #0
   281d0:	blt	281d8 <__assert_fail@plt+0x15aec>
   281d4:	b	125d8 <fchdir@plt>
   281d8:	ldr	r0, [r3, #4]
   281dc:	b	29bc4 <__assert_fail@plt+0x174d8>
   281e0:	push	{r4, lr}
   281e4:	mov	r4, r0
   281e8:	ldr	r0, [r0]
   281ec:	cmp	r0, #0
   281f0:	blt	281f8 <__assert_fail@plt+0x15b0c>
   281f4:	bl	126a4 <close@plt>
   281f8:	ldr	r0, [r4, #4]
   281fc:	pop	{r4, lr}
   28200:	b	2a01c <__assert_fail@plt+0x17930>
   28204:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28208:	cmn	r0, #100	; 0x64
   2820c:	sub	sp, sp, #4032	; 0xfc0
   28210:	sub	sp, sp, #4
   28214:	mov	r8, r1
   28218:	mov	r9, r2
   2821c:	beq	2822c <__assert_fail@plt+0x15b40>
   28220:	ldrb	r3, [r1]
   28224:	cmp	r3, #47	; 0x2f
   28228:	bne	2824c <__assert_fail@plt+0x15b60>
   2822c:	mov	r1, r9
   28230:	mov	r0, r8
   28234:	bl	2bec8 <__assert_fail@plt+0x197dc>
   28238:	mov	r4, r0
   2823c:	mov	r0, r4
   28240:	add	sp, sp, #4032	; 0xfc0
   28244:	add	sp, sp, #4
   28248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2824c:	mov	r2, r1
   28250:	mov	r6, r0
   28254:	mov	r1, r0
   28258:	mov	r0, sp
   2825c:	bl	387b8 <__assert_fail@plt+0x260cc>
   28260:	mov	r5, sp
   28264:	subs	fp, r0, #0
   28268:	beq	282c4 <__assert_fail@plt+0x15bd8>
   2826c:	mov	r1, r9
   28270:	bl	2bec8 <__assert_fail@plt+0x197dc>
   28274:	mov	r4, r0
   28278:	bl	12404 <__errno_location@plt>
   2827c:	cmp	fp, r5
   28280:	mov	sl, r0
   28284:	ldr	r7, [r0]
   28288:	beq	28294 <__assert_fail@plt+0x15ba8>
   2828c:	mov	r0, fp
   28290:	bl	2a01c <__assert_fail@plt+0x17930>
   28294:	cmn	r4, #1
   28298:	bne	2823c <__assert_fail@plt+0x15b50>
   2829c:	cmp	r7, #20
   282a0:	bhi	282b4 <__assert_fail@plt+0x15bc8>
   282a4:	ldr	r3, [pc, #232]	; 28394 <__assert_fail@plt+0x15ca8>
   282a8:	mvn	r3, r3, lsr r7
   282ac:	tst	r3, #1
   282b0:	beq	282c4 <__assert_fail@plt+0x15bd8>
   282b4:	cmp	r7, #38	; 0x26
   282b8:	cmpne	r7, #95	; 0x5f
   282bc:	strne	r7, [sl]
   282c0:	bne	2823c <__assert_fail@plt+0x15b50>
   282c4:	mov	r0, r5
   282c8:	bl	28170 <__assert_fail@plt+0x15a84>
   282cc:	cmp	r0, #0
   282d0:	beq	282e0 <__assert_fail@plt+0x15bf4>
   282d4:	bl	12404 <__errno_location@plt>
   282d8:	ldr	r0, [r0]
   282dc:	bl	235d0 <__assert_fail@plt+0x10ee4>
   282e0:	cmp	r6, #0
   282e4:	blt	28310 <__assert_fail@plt+0x15c24>
   282e8:	ldr	r3, [sp]
   282ec:	cmp	r6, r3
   282f0:	bne	28310 <__assert_fail@plt+0x15c24>
   282f4:	mov	r0, r5
   282f8:	bl	281e0 <__assert_fail@plt+0x15af4>
   282fc:	bl	12404 <__errno_location@plt>
   28300:	mov	r3, #9
   28304:	str	r3, [r0]
   28308:	mvn	r4, #0
   2830c:	b	2823c <__assert_fail@plt+0x15b50>
   28310:	mov	r0, r6
   28314:	bl	125d8 <fchdir@plt>
   28318:	subs	r6, r0, #0
   2831c:	beq	2833c <__assert_fail@plt+0x15c50>
   28320:	bl	12404 <__errno_location@plt>
   28324:	ldr	r6, [r0]
   28328:	mov	r4, r0
   2832c:	mov	r0, r5
   28330:	bl	281e0 <__assert_fail@plt+0x15af4>
   28334:	str	r6, [r4]
   28338:	b	28308 <__assert_fail@plt+0x15c1c>
   2833c:	mov	r1, r9
   28340:	mov	r0, r8
   28344:	bl	2bec8 <__assert_fail@plt+0x197dc>
   28348:	cmn	r0, #1
   2834c:	mov	r4, r0
   28350:	bne	2835c <__assert_fail@plt+0x15c70>
   28354:	bl	12404 <__errno_location@plt>
   28358:	ldr	r6, [r0]
   2835c:	mov	r0, r5
   28360:	bl	281c4 <__assert_fail@plt+0x15ad8>
   28364:	cmp	r0, #0
   28368:	beq	28378 <__assert_fail@plt+0x15c8c>
   2836c:	bl	12404 <__errno_location@plt>
   28370:	ldr	r0, [r0]
   28374:	bl	2360c <__assert_fail@plt+0x10f20>
   28378:	mov	r0, r5
   2837c:	bl	281e0 <__assert_fail@plt+0x15af4>
   28380:	cmp	r6, #0
   28384:	beq	2823c <__assert_fail@plt+0x15b50>
   28388:	bl	12404 <__errno_location@plt>
   2838c:	str	r6, [r0]
   28390:	b	2823c <__assert_fail@plt+0x15b50>
   28394:	andseq	r2, r0, r6
   28398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2839c:	cmn	r0, #100	; 0x64
   283a0:	sub	sp, sp, #4032	; 0xfc0
   283a4:	sub	sp, sp, #4
   283a8:	mov	r8, r1
   283ac:	mov	r9, r2
   283b0:	beq	283c0 <__assert_fail@plt+0x15cd4>
   283b4:	ldrb	r3, [r1]
   283b8:	cmp	r3, #47	; 0x2f
   283bc:	bne	283e0 <__assert_fail@plt+0x15cf4>
   283c0:	mov	r1, r9
   283c4:	mov	r0, r8
   283c8:	bl	2bee0 <__assert_fail@plt+0x197f4>
   283cc:	mov	r4, r0
   283d0:	mov	r0, r4
   283d4:	add	sp, sp, #4032	; 0xfc0
   283d8:	add	sp, sp, #4
   283dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   283e0:	mov	r2, r1
   283e4:	mov	r6, r0
   283e8:	mov	r1, r0
   283ec:	mov	r0, sp
   283f0:	bl	387b8 <__assert_fail@plt+0x260cc>
   283f4:	mov	r5, sp
   283f8:	subs	fp, r0, #0
   283fc:	beq	28458 <__assert_fail@plt+0x15d6c>
   28400:	mov	r1, r9
   28404:	bl	2bee0 <__assert_fail@plt+0x197f4>
   28408:	mov	r4, r0
   2840c:	bl	12404 <__errno_location@plt>
   28410:	cmp	fp, r5
   28414:	mov	sl, r0
   28418:	ldr	r7, [r0]
   2841c:	beq	28428 <__assert_fail@plt+0x15d3c>
   28420:	mov	r0, fp
   28424:	bl	2a01c <__assert_fail@plt+0x17930>
   28428:	cmn	r4, #1
   2842c:	bne	283d0 <__assert_fail@plt+0x15ce4>
   28430:	cmp	r7, #20
   28434:	bhi	28448 <__assert_fail@plt+0x15d5c>
   28438:	ldr	r3, [pc, #232]	; 28528 <__assert_fail@plt+0x15e3c>
   2843c:	mvn	r3, r3, lsr r7
   28440:	tst	r3, #1
   28444:	beq	28458 <__assert_fail@plt+0x15d6c>
   28448:	cmp	r7, #38	; 0x26
   2844c:	cmpne	r7, #95	; 0x5f
   28450:	strne	r7, [sl]
   28454:	bne	283d0 <__assert_fail@plt+0x15ce4>
   28458:	mov	r0, r5
   2845c:	bl	28170 <__assert_fail@plt+0x15a84>
   28460:	cmp	r0, #0
   28464:	beq	28474 <__assert_fail@plt+0x15d88>
   28468:	bl	12404 <__errno_location@plt>
   2846c:	ldr	r0, [r0]
   28470:	bl	235d0 <__assert_fail@plt+0x10ee4>
   28474:	cmp	r6, #0
   28478:	blt	284a4 <__assert_fail@plt+0x15db8>
   2847c:	ldr	r3, [sp]
   28480:	cmp	r6, r3
   28484:	bne	284a4 <__assert_fail@plt+0x15db8>
   28488:	mov	r0, r5
   2848c:	bl	281e0 <__assert_fail@plt+0x15af4>
   28490:	bl	12404 <__errno_location@plt>
   28494:	mov	r3, #9
   28498:	str	r3, [r0]
   2849c:	mvn	r4, #0
   284a0:	b	283d0 <__assert_fail@plt+0x15ce4>
   284a4:	mov	r0, r6
   284a8:	bl	125d8 <fchdir@plt>
   284ac:	subs	r6, r0, #0
   284b0:	beq	284d0 <__assert_fail@plt+0x15de4>
   284b4:	bl	12404 <__errno_location@plt>
   284b8:	ldr	r6, [r0]
   284bc:	mov	r4, r0
   284c0:	mov	r0, r5
   284c4:	bl	281e0 <__assert_fail@plt+0x15af4>
   284c8:	str	r6, [r4]
   284cc:	b	2849c <__assert_fail@plt+0x15db0>
   284d0:	mov	r1, r9
   284d4:	mov	r0, r8
   284d8:	bl	2bee0 <__assert_fail@plt+0x197f4>
   284dc:	cmn	r0, #1
   284e0:	mov	r4, r0
   284e4:	bne	284f0 <__assert_fail@plt+0x15e04>
   284e8:	bl	12404 <__errno_location@plt>
   284ec:	ldr	r6, [r0]
   284f0:	mov	r0, r5
   284f4:	bl	281c4 <__assert_fail@plt+0x15ad8>
   284f8:	cmp	r0, #0
   284fc:	beq	2850c <__assert_fail@plt+0x15e20>
   28500:	bl	12404 <__errno_location@plt>
   28504:	ldr	r0, [r0]
   28508:	bl	2360c <__assert_fail@plt+0x10f20>
   2850c:	mov	r0, r5
   28510:	bl	281e0 <__assert_fail@plt+0x15af4>
   28514:	cmp	r6, #0
   28518:	beq	283d0 <__assert_fail@plt+0x15ce4>
   2851c:	bl	12404 <__errno_location@plt>
   28520:	str	r6, [r0]
   28524:	b	283d0 <__assert_fail@plt+0x15ce4>
   28528:	andseq	r2, r0, r6
   2852c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28530:	cmn	r0, #100	; 0x64
   28534:	sub	sp, sp, #4032	; 0xfc0
   28538:	sub	sp, sp, #4
   2853c:	mov	r8, r1
   28540:	mov	r9, r2
   28544:	beq	28554 <__assert_fail@plt+0x15e68>
   28548:	ldrb	r3, [r1]
   2854c:	cmp	r3, #47	; 0x2f
   28550:	bne	28574 <__assert_fail@plt+0x15e88>
   28554:	mov	r1, r9
   28558:	mov	r0, r8
   2855c:	bl	124b8 <setfilecon@plt>
   28560:	mov	r4, r0
   28564:	mov	r0, r4
   28568:	add	sp, sp, #4032	; 0xfc0
   2856c:	add	sp, sp, #4
   28570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28574:	mov	r2, r1
   28578:	mov	r6, r0
   2857c:	mov	r1, r0
   28580:	mov	r0, sp
   28584:	bl	387b8 <__assert_fail@plt+0x260cc>
   28588:	mov	r5, sp
   2858c:	subs	fp, r0, #0
   28590:	beq	285ec <__assert_fail@plt+0x15f00>
   28594:	mov	r1, r9
   28598:	bl	124b8 <setfilecon@plt>
   2859c:	mov	r4, r0
   285a0:	bl	12404 <__errno_location@plt>
   285a4:	cmp	fp, r5
   285a8:	mov	sl, r0
   285ac:	ldr	r7, [r0]
   285b0:	beq	285bc <__assert_fail@plt+0x15ed0>
   285b4:	mov	r0, fp
   285b8:	bl	2a01c <__assert_fail@plt+0x17930>
   285bc:	cmn	r4, #1
   285c0:	bne	28564 <__assert_fail@plt+0x15e78>
   285c4:	cmp	r7, #20
   285c8:	bhi	285dc <__assert_fail@plt+0x15ef0>
   285cc:	ldr	r3, [pc, #232]	; 286bc <__assert_fail@plt+0x15fd0>
   285d0:	mvn	r3, r3, lsr r7
   285d4:	tst	r3, #1
   285d8:	beq	285ec <__assert_fail@plt+0x15f00>
   285dc:	cmp	r7, #38	; 0x26
   285e0:	cmpne	r7, #95	; 0x5f
   285e4:	strne	r7, [sl]
   285e8:	bne	28564 <__assert_fail@plt+0x15e78>
   285ec:	mov	r0, r5
   285f0:	bl	28170 <__assert_fail@plt+0x15a84>
   285f4:	cmp	r0, #0
   285f8:	beq	28608 <__assert_fail@plt+0x15f1c>
   285fc:	bl	12404 <__errno_location@plt>
   28600:	ldr	r0, [r0]
   28604:	bl	235d0 <__assert_fail@plt+0x10ee4>
   28608:	cmp	r6, #0
   2860c:	blt	28638 <__assert_fail@plt+0x15f4c>
   28610:	ldr	r3, [sp]
   28614:	cmp	r6, r3
   28618:	bne	28638 <__assert_fail@plt+0x15f4c>
   2861c:	mov	r0, r5
   28620:	bl	281e0 <__assert_fail@plt+0x15af4>
   28624:	bl	12404 <__errno_location@plt>
   28628:	mov	r3, #9
   2862c:	str	r3, [r0]
   28630:	mvn	r4, #0
   28634:	b	28564 <__assert_fail@plt+0x15e78>
   28638:	mov	r0, r6
   2863c:	bl	125d8 <fchdir@plt>
   28640:	subs	r6, r0, #0
   28644:	beq	28664 <__assert_fail@plt+0x15f78>
   28648:	bl	12404 <__errno_location@plt>
   2864c:	ldr	r6, [r0]
   28650:	mov	r4, r0
   28654:	mov	r0, r5
   28658:	bl	281e0 <__assert_fail@plt+0x15af4>
   2865c:	str	r6, [r4]
   28660:	b	28630 <__assert_fail@plt+0x15f44>
   28664:	mov	r1, r9
   28668:	mov	r0, r8
   2866c:	bl	124b8 <setfilecon@plt>
   28670:	cmn	r0, #1
   28674:	mov	r4, r0
   28678:	bne	28684 <__assert_fail@plt+0x15f98>
   2867c:	bl	12404 <__errno_location@plt>
   28680:	ldr	r6, [r0]
   28684:	mov	r0, r5
   28688:	bl	281c4 <__assert_fail@plt+0x15ad8>
   2868c:	cmp	r0, #0
   28690:	beq	286a0 <__assert_fail@plt+0x15fb4>
   28694:	bl	12404 <__errno_location@plt>
   28698:	ldr	r0, [r0]
   2869c:	bl	2360c <__assert_fail@plt+0x10f20>
   286a0:	mov	r0, r5
   286a4:	bl	281e0 <__assert_fail@plt+0x15af4>
   286a8:	cmp	r6, #0
   286ac:	beq	28564 <__assert_fail@plt+0x15e78>
   286b0:	bl	12404 <__errno_location@plt>
   286b4:	str	r6, [r0]
   286b8:	b	28564 <__assert_fail@plt+0x15e78>
   286bc:	andseq	r2, r0, r6
   286c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   286c4:	cmn	r0, #100	; 0x64
   286c8:	sub	sp, sp, #4032	; 0xfc0
   286cc:	sub	sp, sp, #4
   286d0:	mov	r8, r1
   286d4:	mov	r9, r2
   286d8:	beq	286e8 <__assert_fail@plt+0x15ffc>
   286dc:	ldrb	r3, [r1]
   286e0:	cmp	r3, #47	; 0x2f
   286e4:	bne	28708 <__assert_fail@plt+0x1601c>
   286e8:	mov	r1, r9
   286ec:	mov	r0, r8
   286f0:	bl	12080 <lsetfilecon@plt>
   286f4:	mov	r4, r0
   286f8:	mov	r0, r4
   286fc:	add	sp, sp, #4032	; 0xfc0
   28700:	add	sp, sp, #4
   28704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28708:	mov	r2, r1
   2870c:	mov	r6, r0
   28710:	mov	r1, r0
   28714:	mov	r0, sp
   28718:	bl	387b8 <__assert_fail@plt+0x260cc>
   2871c:	mov	r5, sp
   28720:	subs	fp, r0, #0
   28724:	beq	28780 <__assert_fail@plt+0x16094>
   28728:	mov	r1, r9
   2872c:	bl	12080 <lsetfilecon@plt>
   28730:	mov	r4, r0
   28734:	bl	12404 <__errno_location@plt>
   28738:	cmp	fp, r5
   2873c:	mov	sl, r0
   28740:	ldr	r7, [r0]
   28744:	beq	28750 <__assert_fail@plt+0x16064>
   28748:	mov	r0, fp
   2874c:	bl	2a01c <__assert_fail@plt+0x17930>
   28750:	cmn	r4, #1
   28754:	bne	286f8 <__assert_fail@plt+0x1600c>
   28758:	cmp	r7, #20
   2875c:	bhi	28770 <__assert_fail@plt+0x16084>
   28760:	ldr	r3, [pc, #232]	; 28850 <__assert_fail@plt+0x16164>
   28764:	mvn	r3, r3, lsr r7
   28768:	tst	r3, #1
   2876c:	beq	28780 <__assert_fail@plt+0x16094>
   28770:	cmp	r7, #38	; 0x26
   28774:	cmpne	r7, #95	; 0x5f
   28778:	strne	r7, [sl]
   2877c:	bne	286f8 <__assert_fail@plt+0x1600c>
   28780:	mov	r0, r5
   28784:	bl	28170 <__assert_fail@plt+0x15a84>
   28788:	cmp	r0, #0
   2878c:	beq	2879c <__assert_fail@plt+0x160b0>
   28790:	bl	12404 <__errno_location@plt>
   28794:	ldr	r0, [r0]
   28798:	bl	235d0 <__assert_fail@plt+0x10ee4>
   2879c:	cmp	r6, #0
   287a0:	blt	287cc <__assert_fail@plt+0x160e0>
   287a4:	ldr	r3, [sp]
   287a8:	cmp	r6, r3
   287ac:	bne	287cc <__assert_fail@plt+0x160e0>
   287b0:	mov	r0, r5
   287b4:	bl	281e0 <__assert_fail@plt+0x15af4>
   287b8:	bl	12404 <__errno_location@plt>
   287bc:	mov	r3, #9
   287c0:	str	r3, [r0]
   287c4:	mvn	r4, #0
   287c8:	b	286f8 <__assert_fail@plt+0x1600c>
   287cc:	mov	r0, r6
   287d0:	bl	125d8 <fchdir@plt>
   287d4:	subs	r6, r0, #0
   287d8:	beq	287f8 <__assert_fail@plt+0x1610c>
   287dc:	bl	12404 <__errno_location@plt>
   287e0:	ldr	r6, [r0]
   287e4:	mov	r4, r0
   287e8:	mov	r0, r5
   287ec:	bl	281e0 <__assert_fail@plt+0x15af4>
   287f0:	str	r6, [r4]
   287f4:	b	287c4 <__assert_fail@plt+0x160d8>
   287f8:	mov	r1, r9
   287fc:	mov	r0, r8
   28800:	bl	12080 <lsetfilecon@plt>
   28804:	cmn	r0, #1
   28808:	mov	r4, r0
   2880c:	bne	28818 <__assert_fail@plt+0x1612c>
   28810:	bl	12404 <__errno_location@plt>
   28814:	ldr	r6, [r0]
   28818:	mov	r0, r5
   2881c:	bl	281c4 <__assert_fail@plt+0x15ad8>
   28820:	cmp	r0, #0
   28824:	beq	28834 <__assert_fail@plt+0x16148>
   28828:	bl	12404 <__errno_location@plt>
   2882c:	ldr	r0, [r0]
   28830:	bl	2360c <__assert_fail@plt+0x10f20>
   28834:	mov	r0, r5
   28838:	bl	281e0 <__assert_fail@plt+0x15af4>
   2883c:	cmp	r6, #0
   28840:	beq	286f8 <__assert_fail@plt+0x1600c>
   28844:	bl	12404 <__errno_location@plt>
   28848:	str	r6, [r0]
   2884c:	b	286f8 <__assert_fail@plt+0x1600c>
   28850:	andseq	r2, r0, r6
   28854:	push	{r4, r5, r6, lr}
   28858:	mov	r2, r1
   2885c:	mov	r4, r1
   28860:	mov	r1, #0
   28864:	mov	r5, r0
   28868:	bl	124ac <memchr@plt>
   2886c:	cmp	r0, #0
   28870:	subne	r4, r0, r5
   28874:	addne	r4, r4, #1
   28878:	mov	r0, r4
   2887c:	pop	{r4, r5, r6, pc}
   28880:	mov	r2, #3
   28884:	mov	r1, #0
   28888:	b	29e08 <__assert_fail@plt+0x1771c>
   2888c:	cmp	r0, #2
   28890:	push	{r4, r5, r6, r7, r8, lr}
   28894:	mov	r4, r0
   28898:	bhi	288c0 <__assert_fail@plt+0x161d4>
   2889c:	bl	28880 <__assert_fail@plt+0x16194>
   288a0:	mov	r6, r0
   288a4:	bl	12404 <__errno_location@plt>
   288a8:	ldr	r7, [r0]
   288ac:	mov	r5, r0
   288b0:	mov	r0, r4
   288b4:	mov	r4, r6
   288b8:	bl	126a4 <close@plt>
   288bc:	str	r7, [r5]
   288c0:	mov	r0, r4
   288c4:	pop	{r4, r5, r6, r7, r8, pc}
   288c8:	push	{r4, r5, r6, lr}
   288cc:	sub	sp, sp, #32
   288d0:	cmp	r1, #0
   288d4:	mov	r5, r0
   288d8:	ldr	r4, [sp, #48]	; 0x30
   288dc:	ldr	r6, [sp, #52]	; 0x34
   288e0:	beq	28988 <__assert_fail@plt+0x1629c>
   288e4:	str	r3, [sp]
   288e8:	mov	r3, r2
   288ec:	mov	r2, r1
   288f0:	ldr	r1, [pc, #736]	; 28bd8 <__assert_fail@plt+0x164ec>
   288f4:	bl	123f8 <fprintf@plt>
   288f8:	mov	r2, #5
   288fc:	ldr	r1, [pc, #728]	; 28bdc <__assert_fail@plt+0x164f0>
   28900:	mov	r0, #0
   28904:	bl	1217c <dcgettext@plt>
   28908:	ldr	r3, [pc, #720]	; 28be0 <__assert_fail@plt+0x164f4>
   2890c:	ldr	r1, [pc, #720]	; 28be4 <__assert_fail@plt+0x164f8>
   28910:	mov	r2, r0
   28914:	mov	r0, r5
   28918:	bl	123f8 <fprintf@plt>
   2891c:	mov	r1, r5
   28920:	mov	r0, #10
   28924:	bl	1256c <fputc@plt>
   28928:	mov	r2, #5
   2892c:	ldr	r1, [pc, #692]	; 28be8 <__assert_fail@plt+0x164fc>
   28930:	mov	r0, #0
   28934:	bl	1217c <dcgettext@plt>
   28938:	ldr	r2, [pc, #684]	; 28bec <__assert_fail@plt+0x16500>
   2893c:	mov	r1, r0
   28940:	mov	r0, r5
   28944:	bl	123f8 <fprintf@plt>
   28948:	mov	r1, r5
   2894c:	mov	r0, #10
   28950:	bl	1256c <fputc@plt>
   28954:	cmp	r6, #9
   28958:	ldrls	pc, [pc, r6, lsl #2]
   2895c:	b	28bcc <__assert_fail@plt+0x164e0>
   28960:	andeq	r8, r2, r4, lsl #21
   28964:	muleq	r2, r4, r9
   28968:			; <UNDEFINED> instruction: 0x000289bc
   2896c:	andeq	r8, r2, r4, ror #19
   28970:	andeq	r8, r2, r4, lsl sl
   28974:	andeq	r8, r2, ip, asr #20
   28978:	andeq	r8, r2, ip, lsl #21
   2897c:	ldrdeq	r8, [r2], -r0
   28980:	andeq	r8, r2, ip, lsl fp
   28984:	andeq	r8, r2, r0, ror fp
   28988:	ldr	r1, [pc, #608]	; 28bf0 <__assert_fail@plt+0x16504>
   2898c:	bl	123f8 <fprintf@plt>
   28990:	b	288f8 <__assert_fail@plt+0x1620c>
   28994:	mov	r2, #5
   28998:	ldr	r1, [pc, #596]	; 28bf4 <__assert_fail@plt+0x16508>
   2899c:	mov	r0, #0
   289a0:	bl	1217c <dcgettext@plt>
   289a4:	ldr	r2, [r4]
   289a8:	mov	r1, r0
   289ac:	mov	r0, r5
   289b0:	add	sp, sp, #32
   289b4:	pop	{r4, r5, r6, lr}
   289b8:	b	123f8 <fprintf@plt>
   289bc:	mov	r2, #5
   289c0:	ldr	r1, [pc, #560]	; 28bf8 <__assert_fail@plt+0x1650c>
   289c4:	mov	r0, #0
   289c8:	bl	1217c <dcgettext@plt>
   289cc:	ldm	r4, {r2, r3}
   289d0:	mov	r1, r0
   289d4:	mov	r0, r5
   289d8:	add	sp, sp, #32
   289dc:	pop	{r4, r5, r6, lr}
   289e0:	b	123f8 <fprintf@plt>
   289e4:	mov	r2, #5
   289e8:	ldr	r1, [pc, #524]	; 28bfc <__assert_fail@plt+0x16510>
   289ec:	mov	r0, #0
   289f0:	bl	1217c <dcgettext@plt>
   289f4:	ldr	r3, [r4, #8]
   289f8:	str	r3, [sp, #48]	; 0x30
   289fc:	ldm	r4, {r2, r3}
   28a00:	mov	r1, r0
   28a04:	mov	r0, r5
   28a08:	add	sp, sp, #32
   28a0c:	pop	{r4, r5, r6, lr}
   28a10:	b	123f8 <fprintf@plt>
   28a14:	mov	r2, #5
   28a18:	ldr	r1, [pc, #480]	; 28c00 <__assert_fail@plt+0x16514>
   28a1c:	mov	r0, #0
   28a20:	bl	1217c <dcgettext@plt>
   28a24:	ldr	r3, [r4, #12]
   28a28:	str	r3, [sp, #52]	; 0x34
   28a2c:	ldr	r3, [r4, #8]
   28a30:	str	r3, [sp, #48]	; 0x30
   28a34:	ldm	r4, {r2, r3}
   28a38:	mov	r1, r0
   28a3c:	mov	r0, r5
   28a40:	add	sp, sp, #32
   28a44:	pop	{r4, r5, r6, lr}
   28a48:	b	123f8 <fprintf@plt>
   28a4c:	mov	r2, #5
   28a50:	ldr	r1, [pc, #428]	; 28c04 <__assert_fail@plt+0x16518>
   28a54:	mov	r0, #0
   28a58:	bl	1217c <dcgettext@plt>
   28a5c:	ldr	r3, [r4, #16]
   28a60:	str	r3, [sp, #8]
   28a64:	ldr	r3, [r4, #12]
   28a68:	str	r3, [sp, #4]
   28a6c:	ldr	r3, [r4, #8]
   28a70:	str	r3, [sp]
   28a74:	ldm	r4, {r2, r3}
   28a78:	mov	r1, r0
   28a7c:	mov	r0, r5
   28a80:	bl	123f8 <fprintf@plt>
   28a84:	add	sp, sp, #32
   28a88:	pop	{r4, r5, r6, pc}
   28a8c:	mov	r2, #5
   28a90:	ldr	r1, [pc, #368]	; 28c08 <__assert_fail@plt+0x1651c>
   28a94:	mov	r0, #0
   28a98:	bl	1217c <dcgettext@plt>
   28a9c:	ldr	r3, [r4, #20]
   28aa0:	str	r3, [sp, #12]
   28aa4:	ldr	r3, [r4, #16]
   28aa8:	str	r3, [sp, #8]
   28aac:	ldr	r3, [r4, #12]
   28ab0:	str	r3, [sp, #4]
   28ab4:	ldr	r3, [r4, #8]
   28ab8:	str	r3, [sp]
   28abc:	ldm	r4, {r2, r3}
   28ac0:	mov	r1, r0
   28ac4:	mov	r0, r5
   28ac8:	bl	123f8 <fprintf@plt>
   28acc:	b	28a84 <__assert_fail@plt+0x16398>
   28ad0:	mov	r2, #5
   28ad4:	ldr	r1, [pc, #304]	; 28c0c <__assert_fail@plt+0x16520>
   28ad8:	mov	r0, #0
   28adc:	bl	1217c <dcgettext@plt>
   28ae0:	ldr	r3, [r4, #24]
   28ae4:	str	r3, [sp, #16]
   28ae8:	ldr	r3, [r4, #20]
   28aec:	str	r3, [sp, #12]
   28af0:	ldr	r3, [r4, #16]
   28af4:	str	r3, [sp, #8]
   28af8:	ldr	r3, [r4, #12]
   28afc:	str	r3, [sp, #4]
   28b00:	ldr	r3, [r4, #8]
   28b04:	str	r3, [sp]
   28b08:	ldm	r4, {r2, r3}
   28b0c:	mov	r1, r0
   28b10:	mov	r0, r5
   28b14:	bl	123f8 <fprintf@plt>
   28b18:	b	28a84 <__assert_fail@plt+0x16398>
   28b1c:	mov	r2, #5
   28b20:	ldr	r1, [pc, #232]	; 28c10 <__assert_fail@plt+0x16524>
   28b24:	mov	r0, #0
   28b28:	bl	1217c <dcgettext@plt>
   28b2c:	ldr	r3, [r4, #28]
   28b30:	str	r3, [sp, #20]
   28b34:	ldr	r3, [r4, #24]
   28b38:	str	r3, [sp, #16]
   28b3c:	ldr	r3, [r4, #20]
   28b40:	str	r3, [sp, #12]
   28b44:	ldr	r3, [r4, #16]
   28b48:	str	r3, [sp, #8]
   28b4c:	ldr	r3, [r4, #12]
   28b50:	str	r3, [sp, #4]
   28b54:	ldr	r3, [r4, #8]
   28b58:	str	r3, [sp]
   28b5c:	ldm	r4, {r2, r3}
   28b60:	mov	r1, r0
   28b64:	mov	r0, r5
   28b68:	bl	123f8 <fprintf@plt>
   28b6c:	b	28a84 <__assert_fail@plt+0x16398>
   28b70:	ldr	r1, [pc, #156]	; 28c14 <__assert_fail@plt+0x16528>
   28b74:	mov	r2, #5
   28b78:	mov	r0, #0
   28b7c:	bl	1217c <dcgettext@plt>
   28b80:	ldr	r3, [r4, #32]
   28b84:	str	r3, [sp, #24]
   28b88:	ldr	r3, [r4, #28]
   28b8c:	str	r3, [sp, #20]
   28b90:	ldr	r3, [r4, #24]
   28b94:	str	r3, [sp, #16]
   28b98:	ldr	r3, [r4, #20]
   28b9c:	str	r3, [sp, #12]
   28ba0:	ldr	r3, [r4, #16]
   28ba4:	str	r3, [sp, #8]
   28ba8:	ldr	r3, [r4, #12]
   28bac:	str	r3, [sp, #4]
   28bb0:	ldr	r3, [r4, #8]
   28bb4:	str	r3, [sp]
   28bb8:	ldm	r4, {r2, r3}
   28bbc:	mov	r1, r0
   28bc0:	mov	r0, r5
   28bc4:	bl	123f8 <fprintf@plt>
   28bc8:	b	28a84 <__assert_fail@plt+0x16398>
   28bcc:	mov	r2, #5
   28bd0:	ldr	r1, [pc, #64]	; 28c18 <__assert_fail@plt+0x1652c>
   28bd4:	b	28b78 <__assert_fail@plt+0x1648c>
   28bd8:	andeq	lr, r3, r9, asr sp
   28bdc:	andeq	lr, r3, ip, ror #26
   28be0:	andeq	r0, r0, r6, ror #15
   28be4:	andeq	pc, r3, r4, lsr #32
   28be8:	andeq	lr, r3, r0, ror sp
   28bec:	andeq	lr, r3, fp, lsl lr
   28bf0:	andeq	lr, r3, r5, ror #26
   28bf4:	andeq	lr, r3, sp, lsr lr
   28bf8:	andeq	lr, r3, sp, asr #28
   28bfc:	andeq	lr, r3, r4, ror #28
   28c00:	andeq	lr, r3, r0, lsl #29
   28c04:	andeq	lr, r3, r0, lsr #29
   28c08:	andeq	lr, r3, r4, asr #29
   28c0c:	andeq	lr, r3, ip, ror #29
   28c10:	andeq	lr, r3, r8, lsl pc
   28c14:	andeq	lr, r3, r8, asr #30
   28c18:	andeq	lr, r3, ip, ror pc
   28c1c:	push	{r0, r1, r4, lr}
   28c20:	mov	ip, #0
   28c24:	ldr	lr, [sp, #16]
   28c28:	ldr	r4, [lr, ip, lsl #2]
   28c2c:	cmp	r4, #0
   28c30:	bne	28c48 <__assert_fail@plt+0x1655c>
   28c34:	str	ip, [sp, #4]
   28c38:	str	lr, [sp]
   28c3c:	bl	288c8 <__assert_fail@plt+0x161dc>
   28c40:	add	sp, sp, #8
   28c44:	pop	{r4, pc}
   28c48:	add	ip, ip, #1
   28c4c:	b	28c28 <__assert_fail@plt+0x1653c>
   28c50:	push	{r4, r5, lr}
   28c54:	sub	sp, sp, #52	; 0x34
   28c58:	mov	ip, #0
   28c5c:	ldr	r5, [sp, #64]	; 0x40
   28c60:	add	lr, sp, #8
   28c64:	ldr	r4, [r5, ip, lsl #2]
   28c68:	cmp	r4, #0
   28c6c:	str	r4, [lr, ip, lsl #2]
   28c70:	beq	28c80 <__assert_fail@plt+0x16594>
   28c74:	add	ip, ip, #1
   28c78:	cmp	ip, #10
   28c7c:	bne	28c64 <__assert_fail@plt+0x16578>
   28c80:	str	ip, [sp, #4]
   28c84:	str	lr, [sp]
   28c88:	bl	288c8 <__assert_fail@plt+0x161dc>
   28c8c:	add	sp, sp, #52	; 0x34
   28c90:	pop	{r4, r5, pc}
   28c94:	push	{r3}		; (str r3, [sp, #-4]!)
   28c98:	push	{r0, r1, r2, r3, lr}
   28c9c:	add	r3, sp, #24
   28ca0:	str	r3, [sp, #12]
   28ca4:	str	r3, [sp]
   28ca8:	ldr	r3, [sp, #20]
   28cac:	bl	28c50 <__assert_fail@plt+0x16564>
   28cb0:	add	sp, sp, #16
   28cb4:	pop	{lr}		; (ldr lr, [sp], #4)
   28cb8:	add	sp, sp, #4
   28cbc:	bx	lr
   28cc0:	ldr	r3, [pc, #92]	; 28d24 <__assert_fail@plt+0x16638>
   28cc4:	push	{r4, lr}
   28cc8:	mov	r0, #10
   28ccc:	ldr	r1, [r3]
   28cd0:	bl	1256c <fputc@plt>
   28cd4:	mov	r2, #5
   28cd8:	ldr	r1, [pc, #72]	; 28d28 <__assert_fail@plt+0x1663c>
   28cdc:	mov	r0, #0
   28ce0:	bl	1217c <dcgettext@plt>
   28ce4:	ldr	r1, [pc, #64]	; 28d2c <__assert_fail@plt+0x16640>
   28ce8:	bl	1202c <printf@plt>
   28cec:	mov	r2, #5
   28cf0:	ldr	r1, [pc, #56]	; 28d30 <__assert_fail@plt+0x16644>
   28cf4:	mov	r0, #0
   28cf8:	bl	1217c <dcgettext@plt>
   28cfc:	ldr	r2, [pc, #48]	; 28d34 <__assert_fail@plt+0x16648>
   28d00:	ldr	r1, [pc, #48]	; 28d38 <__assert_fail@plt+0x1664c>
   28d04:	bl	1202c <printf@plt>
   28d08:	ldr	r1, [pc, #44]	; 28d3c <__assert_fail@plt+0x16650>
   28d0c:	mov	r2, #5
   28d10:	mov	r0, #0
   28d14:	bl	1217c <dcgettext@plt>
   28d18:	ldr	r1, [pc, #32]	; 28d40 <__assert_fail@plt+0x16654>
   28d1c:	pop	{r4, lr}
   28d20:	b	1202c <printf@plt>
   28d24:	andeq	r0, r5, ip, ror #10
   28d28:			; <UNDEFINED> instruction: 0x0003efb8
   28d2c:	muleq	r3, r5, sp
   28d30:	andeq	lr, r3, ip, asr #31
   28d34:	andeq	sp, r3, lr, ror #26
   28d38:	muleq	r3, r1, sl
   28d3c:	andeq	lr, r3, r0, ror #31
   28d40:	andeq	pc, r3, r7
   28d44:	push	{r4, lr}
   28d48:	bl	2bf10 <__assert_fail@plt+0x19824>
   28d4c:	cmp	r0, #0
   28d50:	popne	{r4, pc}
   28d54:	bl	291d8 <__assert_fail@plt+0x16aec>
   28d58:	push	{r4, lr}
   28d5c:	bl	2bf10 <__assert_fail@plt+0x19824>
   28d60:	cmp	r0, #0
   28d64:	popne	{r4, pc}
   28d68:	bl	291d8 <__assert_fail@plt+0x16aec>
   28d6c:	b	28d44 <__assert_fail@plt+0x16658>
   28d70:	push	{r4, r5, r6, lr}
   28d74:	mov	r5, r0
   28d78:	mov	r4, r1
   28d7c:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   28d80:	cmp	r0, #0
   28d84:	popne	{r4, r5, r6, pc}
   28d88:	adds	r4, r4, #0
   28d8c:	movne	r4, #1
   28d90:	cmp	r5, #0
   28d94:	orreq	r4, r4, #1
   28d98:	cmp	r4, #0
   28d9c:	popeq	{r4, r5, r6, pc}
   28da0:	bl	291d8 <__assert_fail@plt+0x16aec>
   28da4:	push	{r4, lr}
   28da8:	cmp	r1, #0
   28dac:	orreq	r1, r1, #1
   28db0:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   28db4:	cmp	r0, #0
   28db8:	popne	{r4, pc}
   28dbc:	bl	291d8 <__assert_fail@plt+0x16aec>
   28dc0:	push	{r4, r5, r6, lr}
   28dc4:	mov	r6, r0
   28dc8:	mov	r5, r1
   28dcc:	mov	r4, r2
   28dd0:	bl	2c90c <__assert_fail@plt+0x1a220>
   28dd4:	cmp	r0, #0
   28dd8:	popne	{r4, r5, r6, pc}
   28ddc:	cmp	r6, #0
   28de0:	beq	28df0 <__assert_fail@plt+0x16704>
   28de4:	cmp	r5, #0
   28de8:	cmpne	r4, #0
   28dec:	popeq	{r4, r5, r6, pc}
   28df0:	bl	291d8 <__assert_fail@plt+0x16aec>
   28df4:	b	28dc0 <__assert_fail@plt+0x166d4>
   28df8:	cmp	r2, #0
   28dfc:	cmpne	r1, #0
   28e00:	moveq	r2, #1
   28e04:	moveq	r1, r2
   28e08:	push	{r4, lr}
   28e0c:	bl	2c90c <__assert_fail@plt+0x1a220>
   28e10:	cmp	r0, #0
   28e14:	popne	{r4, pc}
   28e18:	bl	291d8 <__assert_fail@plt+0x16aec>
   28e1c:	mov	r2, r1
   28e20:	mov	r1, r0
   28e24:	mov	r0, #0
   28e28:	b	28dc0 <__assert_fail@plt+0x166d4>
   28e2c:	mov	r2, r1
   28e30:	mov	r1, r0
   28e34:	mov	r0, #0
   28e38:	b	28df8 <__assert_fail@plt+0x1670c>
   28e3c:	push	{r4, r5, r6, r7, r8, lr}
   28e40:	subs	r7, r0, #0
   28e44:	mov	r5, r1
   28e48:	mov	r6, r2
   28e4c:	ldr	r4, [r1]
   28e50:	bne	28e8c <__assert_fail@plt+0x167a0>
   28e54:	cmp	r4, #0
   28e58:	bne	28e74 <__assert_fail@plt+0x16788>
   28e5c:	mov	r1, r2
   28e60:	mov	r0, #64	; 0x40
   28e64:	bl	39074 <__assert_fail@plt+0x26988>
   28e68:	cmp	r0, #0
   28e6c:	movne	r4, r0
   28e70:	addeq	r4, r0, #1
   28e74:	mov	r2, r6
   28e78:	mov	r1, r4
   28e7c:	mov	r0, r7
   28e80:	bl	28dc0 <__assert_fail@plt+0x166d4>
   28e84:	str	r4, [r5]
   28e88:	pop	{r4, r5, r6, r7, r8, pc}
   28e8c:	lsr	r2, r4, #1
   28e90:	add	r3, r2, #1
   28e94:	mvn	r3, r3
   28e98:	cmp	r4, r3
   28e9c:	addls	r4, r4, #1
   28ea0:	addls	r4, r4, r2
   28ea4:	bls	28e74 <__assert_fail@plt+0x16788>
   28ea8:	bl	291d8 <__assert_fail@plt+0x16aec>
   28eac:	mov	r2, #1
   28eb0:	b	28e3c <__assert_fail@plt+0x16750>
   28eb4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28eb8:	mov	sl, r0
   28ebc:	ldr	r8, [r1]
   28ec0:	mov	fp, r1
   28ec4:	mov	r5, r2
   28ec8:	asrs	r4, r8, #1
   28ecc:	mov	r9, r3
   28ed0:	ldr	r7, [sp, #48]	; 0x30
   28ed4:	bpl	28f70 <__assert_fail@plt+0x16884>
   28ed8:	rsb	r2, r4, #-2147483648	; 0x80000000
   28edc:	cmp	r8, r2
   28ee0:	movge	r2, #0
   28ee4:	movlt	r2, #1
   28ee8:	mvn	r3, r9
   28eec:	cmp	r2, #0
   28ef0:	lsr	r3, r3, #31
   28ef4:	addeq	r4, r4, r8
   28ef8:	mvnne	r4, #-2147483648	; 0x80000000
   28efc:	mov	r0, r3
   28f00:	cmp	r9, r4
   28f04:	movge	r0, #0
   28f08:	andlt	r0, r0, #1
   28f0c:	cmp	r0, #0
   28f10:	str	r3, [sp, #4]
   28f14:	bne	290e4 <__assert_fail@plt+0x169f8>
   28f18:	cmp	r7, #0
   28f1c:	bge	29030 <__assert_fail@plt+0x16944>
   28f20:	cmp	r4, #0
   28f24:	bge	28f88 <__assert_fail@plt+0x1689c>
   28f28:	mov	r1, r7
   28f2c:	mvn	r0, #-2147483648	; 0x80000000
   28f30:	bl	39280 <__assert_fail@plt+0x26b94>
   28f34:	cmp	r0, r4
   28f38:	movle	r0, #0
   28f3c:	movgt	r0, #1
   28f40:	cmp	r0, #0
   28f44:	mvnne	r6, #-2147483648	; 0x80000000
   28f48:	beq	28f98 <__assert_fail@plt+0x168ac>
   28f4c:	mov	r1, r7
   28f50:	mov	r0, r6
   28f54:	bl	39280 <__assert_fail@plt+0x26b94>
   28f58:	mov	r1, r7
   28f5c:	mov	r4, r0
   28f60:	mov	r0, r6
   28f64:	bl	394a0 <__assert_fail@plt+0x26db4>
   28f68:	sub	r1, r6, r1
   28f6c:	b	28fa8 <__assert_fail@plt+0x168bc>
   28f70:	mvn	r2, #-2147483648	; 0x80000000
   28f74:	sub	r2, r2, r4
   28f78:	cmp	r8, r2
   28f7c:	movle	r2, #0
   28f80:	movgt	r2, #1
   28f84:	b	28ee8 <__assert_fail@plt+0x167fc>
   28f88:	cmn	r7, #1
   28f8c:	movne	r1, r7
   28f90:	movne	r0, #-2147483648	; 0x80000000
   28f94:	bne	290fc <__assert_fail@plt+0x16a10>
   28f98:	mul	r1, r7, r4
   28f9c:	cmp	r1, #63	; 0x3f
   28fa0:	movle	r6, #64	; 0x40
   28fa4:	ble	28f4c <__assert_fail@plt+0x16860>
   28fa8:	cmp	sl, #0
   28fac:	sub	r2, r4, r8
   28fb0:	streq	sl, [fp]
   28fb4:	cmp	r2, r5
   28fb8:	bge	2908c <__assert_fail@plt+0x169a0>
   28fbc:	cmp	r5, #0
   28fc0:	bge	29058 <__assert_fail@plt+0x1696c>
   28fc4:	rsb	r2, r5, #-2147483648	; 0x80000000
   28fc8:	cmp	r8, r2
   28fcc:	movge	r2, #0
   28fd0:	movlt	r2, #1
   28fd4:	cmp	r2, #0
   28fd8:	bne	2902c <__assert_fail@plt+0x16940>
   28fdc:	ldr	r0, [sp, #4]
   28fe0:	add	r5, r8, r5
   28fe4:	cmp	r9, r5
   28fe8:	movge	r0, #0
   28fec:	andlt	r0, r0, #1
   28ff0:	cmp	r0, #0
   28ff4:	mov	r4, r5
   28ff8:	bne	2902c <__assert_fail@plt+0x16940>
   28ffc:	cmp	r7, #0
   29000:	bge	290a0 <__assert_fail@plt+0x169b4>
   29004:	cmp	r5, #0
   29008:	bge	29078 <__assert_fail@plt+0x1698c>
   2900c:	mov	r1, r7
   29010:	mvn	r0, #-2147483648	; 0x80000000
   29014:	bl	39280 <__assert_fail@plt+0x26b94>
   29018:	cmp	r5, r0
   2901c:	movge	r0, #0
   29020:	movlt	r0, #1
   29024:	cmp	r0, #0
   29028:	beq	29088 <__assert_fail@plt+0x1699c>
   2902c:	bl	291d8 <__assert_fail@plt+0x16aec>
   29030:	beq	28f98 <__assert_fail@plt+0x168ac>
   29034:	cmp	r4, #0
   29038:	bge	290f4 <__assert_fail@plt+0x16a08>
   2903c:	cmn	r4, #1
   29040:	beq	28f98 <__assert_fail@plt+0x168ac>
   29044:	mov	r1, r4
   29048:	mov	r0, #-2147483648	; 0x80000000
   2904c:	bl	39280 <__assert_fail@plt+0x26b94>
   29050:	cmp	r7, r0
   29054:	b	28f38 <__assert_fail@plt+0x1684c>
   29058:	cmp	r8, #0
   2905c:	blt	28fdc <__assert_fail@plt+0x168f0>
   29060:	mvn	r2, #-2147483648	; 0x80000000
   29064:	sub	r2, r2, r5
   29068:	cmp	r8, r2
   2906c:	movle	r2, #0
   29070:	movgt	r2, #1
   29074:	b	28fd4 <__assert_fail@plt+0x168e8>
   29078:	cmn	r7, #1
   2907c:	movne	r1, r7
   29080:	movne	r0, #-2147483648	; 0x80000000
   29084:	bne	290d8 <__assert_fail@plt+0x169ec>
   29088:	mul	r1, r5, r7
   2908c:	mov	r0, sl
   29090:	bl	28d70 <__assert_fail@plt+0x16684>
   29094:	str	r4, [fp]
   29098:	add	sp, sp, #12
   2909c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   290a0:	beq	29088 <__assert_fail@plt+0x1699c>
   290a4:	cmp	r5, #0
   290a8:	movge	r1, r7
   290ac:	mvnge	r0, #-2147483648	; 0x80000000
   290b0:	bge	290d8 <__assert_fail@plt+0x169ec>
   290b4:	cmn	r5, #1
   290b8:	beq	29088 <__assert_fail@plt+0x1699c>
   290bc:	mov	r1, r5
   290c0:	mov	r0, #-2147483648	; 0x80000000
   290c4:	bl	39280 <__assert_fail@plt+0x26b94>
   290c8:	cmp	r7, r0
   290cc:	movle	r0, #0
   290d0:	movgt	r0, #1
   290d4:	b	29024 <__assert_fail@plt+0x16938>
   290d8:	bl	39280 <__assert_fail@plt+0x26b94>
   290dc:	cmp	r5, r0
   290e0:	b	290cc <__assert_fail@plt+0x169e0>
   290e4:	cmp	r7, #0
   290e8:	mov	r4, r9
   290ec:	blt	28f88 <__assert_fail@plt+0x1689c>
   290f0:	beq	28f98 <__assert_fail@plt+0x168ac>
   290f4:	mov	r1, r7
   290f8:	mvn	r0, #-2147483648	; 0x80000000
   290fc:	bl	39280 <__assert_fail@plt+0x26b94>
   29100:	cmp	r0, r4
   29104:	movge	r0, #0
   29108:	movlt	r0, #1
   2910c:	b	28f40 <__assert_fail@plt+0x16854>
   29110:	push	{r4, lr}
   29114:	bl	29b08 <__assert_fail@plt+0x1741c>
   29118:	cmp	r0, #0
   2911c:	popne	{r4, pc}
   29120:	bl	291d8 <__assert_fail@plt+0x16aec>
   29124:	mov	r1, #1
   29128:	b	29110 <__assert_fail@plt+0x16a24>
   2912c:	push	{r4, lr}
   29130:	bl	29b08 <__assert_fail@plt+0x1741c>
   29134:	cmp	r0, #0
   29138:	popne	{r4, pc}
   2913c:	bl	291d8 <__assert_fail@plt+0x16aec>
   29140:	mov	r1, #1
   29144:	b	2912c <__assert_fail@plt+0x16a40>
   29148:	push	{r4, r5, r6, lr}
   2914c:	mov	r4, r1
   29150:	mov	r5, r0
   29154:	mov	r0, r1
   29158:	bl	28d44 <__assert_fail@plt+0x16658>
   2915c:	mov	r2, r4
   29160:	mov	r1, r5
   29164:	pop	{r4, r5, r6, lr}
   29168:	b	120f8 <memcpy@plt>
   2916c:	push	{r4, r5, r6, lr}
   29170:	mov	r4, r1
   29174:	mov	r5, r0
   29178:	mov	r0, r1
   2917c:	bl	28d58 <__assert_fail@plt+0x1666c>
   29180:	mov	r2, r4
   29184:	mov	r1, r5
   29188:	pop	{r4, r5, r6, lr}
   2918c:	b	120f8 <memcpy@plt>
   29190:	push	{r4, r5, r6, lr}
   29194:	mov	r5, r0
   29198:	add	r0, r1, #1
   2919c:	mov	r4, r1
   291a0:	bl	28d58 <__assert_fail@plt+0x1666c>
   291a4:	mov	r2, #0
   291a8:	mov	r1, r5
   291ac:	strb	r2, [r0, r4]
   291b0:	mov	r2, r4
   291b4:	pop	{r4, r5, r6, lr}
   291b8:	b	120f8 <memcpy@plt>
   291bc:	push	{r4, lr}
   291c0:	mov	r4, r0
   291c4:	bl	123bc <strlen@plt>
   291c8:	add	r1, r0, #1
   291cc:	mov	r0, r4
   291d0:	pop	{r4, lr}
   291d4:	b	29148 <__assert_fail@plt+0x16a5c>
   291d8:	ldr	r3, [pc, #44]	; 2920c <__assert_fail@plt+0x16b20>
   291dc:	push	{r4, lr}
   291e0:	mov	r2, #5
   291e4:	ldr	r1, [pc, #36]	; 29210 <__assert_fail@plt+0x16b24>
   291e8:	mov	r0, #0
   291ec:	ldr	r4, [r3]
   291f0:	bl	1217c <dcgettext@plt>
   291f4:	ldr	r2, [pc, #24]	; 29214 <__assert_fail@plt+0x16b28>
   291f8:	mov	r1, #0
   291fc:	mov	r3, r0
   29200:	mov	r0, r4
   29204:	bl	122c0 <error@plt>
   29208:	bl	12698 <abort@plt>
   2920c:	andeq	r0, r5, r4, lsl #10
   29210:	andeq	pc, r3, r3, asr r0	; <UNPREDICTABLE>
   29214:	andeq	pc, r3, pc, lsr #9
   29218:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2921c:	mov	r7, r0
   29220:	mov	r9, r3
   29224:	mov	r5, r1
   29228:	mov	r8, r2
   2922c:	bl	12404 <__errno_location@plt>
   29230:	mov	r4, #0
   29234:	add	r1, sp, #4
   29238:	str	r4, [r0]
   2923c:	mov	r6, r0
   29240:	mov	r0, r7
   29244:	blx	r9
   29248:	ldr	r3, [sp, #4]
   2924c:	cmp	r7, r3
   29250:	beq	29280 <__assert_fail@plt+0x16b94>
   29254:	cmp	r5, r4
   29258:	bne	29288 <__assert_fail@plt+0x16b9c>
   2925c:	ldrb	r2, [r3]
   29260:	cmp	r2, r4
   29264:	movne	r0, r5
   29268:	bne	292b0 <__assert_fail@plt+0x16bc4>
   2926c:	vcmp.f64	d0, #0.0
   29270:	vmrs	APSR_nzcv, fpscr
   29274:	bne	29298 <__assert_fail@plt+0x16bac>
   29278:	mov	r0, #1
   2927c:	b	292b0 <__assert_fail@plt+0x16bc4>
   29280:	mov	r0, r4
   29284:	b	292a4 <__assert_fail@plt+0x16bb8>
   29288:	vcmp.f64	d0, #0.0
   2928c:	vmrs	APSR_nzcv, fpscr
   29290:	moveq	r0, #1
   29294:	beq	292ac <__assert_fail@plt+0x16bc0>
   29298:	ldr	r0, [r6]
   2929c:	subs	r0, r0, #34	; 0x22
   292a0:	movne	r0, #1
   292a4:	cmp	r5, #0
   292a8:	beq	292b0 <__assert_fail@plt+0x16bc4>
   292ac:	str	r3, [r5]
   292b0:	vstr	d0, [r8]
   292b4:	add	sp, sp, #12
   292b8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   292bc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   292c0:	mov	r4, #0
   292c4:	mov	r7, r0
   292c8:	mov	r8, r1
   292cc:	mov	r6, r2
   292d0:	mvn	r9, #0
   292d4:	mov	sl, r4
   292d8:	mov	fp, #1
   292dc:	subs	r6, r6, #1
   292e0:	bcs	292ec <__assert_fail@plt+0x16c00>
   292e4:	mov	r0, r4
   292e8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   292ec:	mov	r1, r8
   292f0:	mov	r0, r9
   292f4:	bl	39074 <__assert_fail@plt+0x26988>
   292f8:	ldr	r5, [r7]
   292fc:	cmp	r0, r5
   29300:	movcc	r3, fp
   29304:	mulcs	r5, r5, r8
   29308:	movcs	r3, sl
   2930c:	strcc	r9, [r7]
   29310:	strcs	r5, [r7]
   29314:	orr	r4, r4, r3
   29318:	b	292dc <__assert_fail@plt+0x16bf0>
   2931c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29320:	cmp	r2, #36	; 0x24
   29324:	ldr	r9, [sp, #48]	; 0x30
   29328:	bls	29340 <__assert_fail@plt+0x16c54>
   2932c:	ldr	r3, [pc, #808]	; 2965c <__assert_fail@plt+0x16f70>
   29330:	mov	r2, #84	; 0x54
   29334:	ldr	r1, [pc, #804]	; 29660 <__assert_fail@plt+0x16f74>
   29338:	ldr	r0, [pc, #804]	; 29664 <__assert_fail@plt+0x16f78>
   2933c:	bl	126ec <__assert_fail@plt>
   29340:	cmp	r1, #0
   29344:	mov	r7, r1
   29348:	mov	r4, r0
   2934c:	mov	fp, r2
   29350:	mov	r8, r3
   29354:	moveq	r7, sp
   29358:	bl	12404 <__errno_location@plt>
   2935c:	mov	r3, #0
   29360:	str	r3, [r0]
   29364:	mov	sl, r0
   29368:	bl	12374 <__ctype_b_loc@plt>
   2936c:	ldrb	r6, [r4]
   29370:	mov	r3, r4
   29374:	ldr	r1, [r0]
   29378:	lsl	r2, r6, #1
   2937c:	ldrh	r5, [r1, r2]
   29380:	ands	r5, r5, #8192	; 0x2000
   29384:	bne	293a0 <__assert_fail@plt+0x16cb4>
   29388:	cmp	r6, #45	; 0x2d
   2938c:	bne	293a8 <__assert_fail@plt+0x16cbc>
   29390:	mov	r5, #4
   29394:	mov	r0, r5
   29398:	add	sp, sp, #12
   2939c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   293a0:	ldrb	r6, [r3, #1]!
   293a4:	b	29378 <__assert_fail@plt+0x16c8c>
   293a8:	mov	r2, fp
   293ac:	mov	r1, r7
   293b0:	mov	r0, r4
   293b4:	bl	123b0 <strtoul@plt>
   293b8:	ldr	r6, [r7]
   293bc:	cmp	r4, r6
   293c0:	str	r0, [sp, #4]
   293c4:	bne	29424 <__assert_fail@plt+0x16d38>
   293c8:	cmp	r9, #0
   293cc:	beq	29390 <__assert_fail@plt+0x16ca4>
   293d0:	ldrb	r1, [r6]
   293d4:	cmp	r1, #0
   293d8:	beq	29390 <__assert_fail@plt+0x16ca4>
   293dc:	mov	r0, r9
   293e0:	bl	123c8 <strchr@plt>
   293e4:	cmp	r0, #0
   293e8:	movne	r3, #1
   293ec:	strne	r3, [sp, #4]
   293f0:	beq	29390 <__assert_fail@plt+0x16ca4>
   293f4:	ldrb	r4, [r6]
   293f8:	cmp	r4, #0
   293fc:	beq	2961c <__assert_fail@plt+0x16f30>
   29400:	mov	r1, r4
   29404:	mov	r0, r9
   29408:	bl	123c8 <strchr@plt>
   2940c:	cmp	r0, #0
   29410:	bne	2944c <__assert_fail@plt+0x16d60>
   29414:	ldr	r3, [sp, #4]
   29418:	orr	r5, r5, #2
   2941c:	str	r3, [r8]
   29420:	b	29394 <__assert_fail@plt+0x16ca8>
   29424:	ldr	r5, [sl]
   29428:	cmp	r5, #0
   2942c:	beq	2943c <__assert_fail@plt+0x16d50>
   29430:	cmp	r5, #34	; 0x22
   29434:	bne	29390 <__assert_fail@plt+0x16ca4>
   29438:	mov	r5, #1
   2943c:	cmp	r9, #0
   29440:	streq	r0, [r8]
   29444:	bne	293f4 <__assert_fail@plt+0x16d08>
   29448:	b	29394 <__assert_fail@plt+0x16ca8>
   2944c:	cmp	r4, #84	; 0x54
   29450:	beq	294a4 <__assert_fail@plt+0x16db8>
   29454:	bhi	2948c <__assert_fail@plt+0x16da0>
   29458:	cmp	r4, #75	; 0x4b
   2945c:	beq	294a4 <__assert_fail@plt+0x16db8>
   29460:	bhi	2947c <__assert_fail@plt+0x16d90>
   29464:	cmp	r4, #69	; 0x45
   29468:	beq	294a4 <__assert_fail@plt+0x16db8>
   2946c:	cmp	r4, #71	; 0x47
   29470:	beq	294a4 <__assert_fail@plt+0x16db8>
   29474:	mov	r6, #1
   29478:	b	29550 <__assert_fail@plt+0x16e64>
   2947c:	cmp	r4, #77	; 0x4d
   29480:	beq	294a4 <__assert_fail@plt+0x16db8>
   29484:	cmp	r4, #80	; 0x50
   29488:	b	29470 <__assert_fail@plt+0x16d84>
   2948c:	cmp	r4, #103	; 0x67
   29490:	beq	294a4 <__assert_fail@plt+0x16db8>
   29494:	bhi	29528 <__assert_fail@plt+0x16e3c>
   29498:	sub	r3, r4, #89	; 0x59
   2949c:	cmp	r3, #1
   294a0:	bhi	29474 <__assert_fail@plt+0x16d88>
   294a4:	mov	r1, #48	; 0x30
   294a8:	mov	r0, r9
   294ac:	bl	123c8 <strchr@plt>
   294b0:	cmp	r0, #0
   294b4:	beq	29474 <__assert_fail@plt+0x16d88>
   294b8:	ldrb	r3, [r6, #1]
   294bc:	cmp	r3, #68	; 0x44
   294c0:	beq	294d4 <__assert_fail@plt+0x16de8>
   294c4:	cmp	r3, #105	; 0x69
   294c8:	beq	29540 <__assert_fail@plt+0x16e54>
   294cc:	cmp	r3, #66	; 0x42
   294d0:	bne	29474 <__assert_fail@plt+0x16d88>
   294d4:	mov	r6, #2
   294d8:	mov	r1, #1000	; 0x3e8
   294dc:	cmp	r4, #89	; 0x59
   294e0:	beq	29654 <__assert_fail@plt+0x16f68>
   294e4:	bhi	29578 <__assert_fail@plt+0x16e8c>
   294e8:	cmp	r4, #75	; 0x4b
   294ec:	beq	295b8 <__assert_fail@plt+0x16ecc>
   294f0:	bhi	29558 <__assert_fail@plt+0x16e6c>
   294f4:	cmp	r4, #69	; 0x45
   294f8:	beq	29628 <__assert_fail@plt+0x16f3c>
   294fc:	cmp	r4, #71	; 0x47
   29500:	beq	29634 <__assert_fail@plt+0x16f48>
   29504:	cmp	r4, #66	; 0x42
   29508:	bne	29414 <__assert_fail@plt+0x16d28>
   2950c:	ldr	r3, [sp, #4]
   29510:	cmp	r3, #4194304	; 0x400000
   29514:	bcs	295f4 <__assert_fail@plt+0x16f08>
   29518:	lsl	r3, r3, #10
   2951c:	str	r3, [sp, #4]
   29520:	mov	r0, #0
   29524:	b	29600 <__assert_fail@plt+0x16f14>
   29528:	cmp	r4, #109	; 0x6d
   2952c:	beq	294a4 <__assert_fail@plt+0x16db8>
   29530:	cmp	r4, #116	; 0x74
   29534:	beq	294a4 <__assert_fail@plt+0x16db8>
   29538:	cmp	r4, #107	; 0x6b
   2953c:	b	29470 <__assert_fail@plt+0x16d84>
   29540:	ldrb	r6, [r6, #2]
   29544:	cmp	r6, #66	; 0x42
   29548:	movne	r6, #1
   2954c:	moveq	r6, #3
   29550:	mov	r1, #1024	; 0x400
   29554:	b	294dc <__assert_fail@plt+0x16df0>
   29558:	cmp	r4, #80	; 0x50
   2955c:	beq	2963c <__assert_fail@plt+0x16f50>
   29560:	cmp	r4, #84	; 0x54
   29564:	beq	29644 <__assert_fail@plt+0x16f58>
   29568:	cmp	r4, #77	; 0x4d
   2956c:	bne	29414 <__assert_fail@plt+0x16d28>
   29570:	mov	r2, #2
   29574:	b	2962c <__assert_fail@plt+0x16f40>
   29578:	cmp	r4, #103	; 0x67
   2957c:	beq	29634 <__assert_fail@plt+0x16f48>
   29580:	bhi	295a4 <__assert_fail@plt+0x16eb8>
   29584:	cmp	r4, #98	; 0x62
   29588:	beq	295e4 <__assert_fail@plt+0x16ef8>
   2958c:	cmp	r4, #99	; 0x63
   29590:	beq	29520 <__assert_fail@plt+0x16e34>
   29594:	cmp	r4, #90	; 0x5a
   29598:	bne	29414 <__assert_fail@plt+0x16d28>
   2959c:	mov	r2, #7
   295a0:	b	2962c <__assert_fail@plt+0x16f40>
   295a4:	cmp	r4, #109	; 0x6d
   295a8:	beq	29570 <__assert_fail@plt+0x16e84>
   295ac:	bhi	295c0 <__assert_fail@plt+0x16ed4>
   295b0:	cmp	r4, #107	; 0x6b
   295b4:	bne	29414 <__assert_fail@plt+0x16d28>
   295b8:	mov	r2, #1
   295bc:	b	2962c <__assert_fail@plt+0x16f40>
   295c0:	cmp	r4, #116	; 0x74
   295c4:	beq	29644 <__assert_fail@plt+0x16f58>
   295c8:	cmp	r4, #119	; 0x77
   295cc:	bne	29414 <__assert_fail@plt+0x16d28>
   295d0:	ldr	r3, [sp, #4]
   295d4:	cmp	r3, #0
   295d8:	lslge	r3, r3, #1
   295dc:	bge	2951c <__assert_fail@plt+0x16e30>
   295e0:	b	295f4 <__assert_fail@plt+0x16f08>
   295e4:	ldr	r3, [sp, #4]
   295e8:	cmp	r3, #8388608	; 0x800000
   295ec:	lslcc	r3, r3, #9
   295f0:	bcc	2951c <__assert_fail@plt+0x16e30>
   295f4:	mov	r0, #1
   295f8:	mvn	r3, #0
   295fc:	str	r3, [sp, #4]
   29600:	ldr	r3, [r7]
   29604:	orr	r5, r5, r0
   29608:	add	r2, r3, r6
   2960c:	str	r2, [r7]
   29610:	ldrb	r3, [r3, r6]
   29614:	cmp	r3, #0
   29618:	orrne	r5, r5, #2
   2961c:	ldr	r3, [sp, #4]
   29620:	str	r3, [r8]
   29624:	b	29394 <__assert_fail@plt+0x16ca8>
   29628:	mov	r2, #6
   2962c:	add	r0, sp, #4
   29630:	b	2964c <__assert_fail@plt+0x16f60>
   29634:	mov	r2, #3
   29638:	b	2962c <__assert_fail@plt+0x16f40>
   2963c:	mov	r2, #5
   29640:	b	2962c <__assert_fail@plt+0x16f40>
   29644:	mov	r2, #4
   29648:	add	r0, sp, r2
   2964c:	bl	292bc <__assert_fail@plt+0x16bd0>
   29650:	b	29600 <__assert_fail@plt+0x16f14>
   29654:	mov	r2, #8
   29658:	b	2962c <__assert_fail@plt+0x16f40>
   2965c:	andeq	pc, r3, r4, rrx
   29660:	andeq	pc, r3, sp, rrx
   29664:	andeq	pc, r3, r7, ror r0	; <UNPREDICTABLE>
   29668:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2966c:	mov	r6, #0
   29670:	mov	r7, r2
   29674:	asr	r3, r1, #31
   29678:	mov	r2, r1
   2967c:	mov	r8, r0
   29680:	mov	r9, r1
   29684:	mov	sl, r6
   29688:	mov	fp, #1
   2968c:	strd	r2, [sp]
   29690:	subs	r7, r7, #1
   29694:	bcs	296a4 <__assert_fail@plt+0x16fb8>
   29698:	mov	r0, r6
   2969c:	add	sp, sp, #12
   296a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   296a4:	ldrd	r2, [sp]
   296a8:	mvn	r0, #0
   296ac:	mvn	r1, #0
   296b0:	bl	3994c <__assert_fail@plt+0x27260>
   296b4:	ldrd	r4, [r8]
   296b8:	cmp	r1, r5
   296bc:	cmpeq	r0, r4
   296c0:	bcs	296dc <__assert_fail@plt+0x16ff0>
   296c4:	mvn	r3, #0
   296c8:	mvn	r2, #0
   296cc:	strd	r2, [r8]
   296d0:	mov	r3, fp
   296d4:	orr	r6, r6, r3
   296d8:	b	29690 <__assert_fail@plt+0x16fa4>
   296dc:	mul	r3, r9, r5
   296e0:	ldr	r2, [sp, #4]
   296e4:	mla	r3, r4, r2, r3
   296e8:	umull	r4, r5, r9, r4
   296ec:	add	r5, r3, r5
   296f0:	mov	r3, sl
   296f4:	strd	r4, [r8]
   296f8:	b	296d4 <__assert_fail@plt+0x16fe8>
   296fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29700:	sub	sp, sp, #20
   29704:	cmp	r2, #36	; 0x24
   29708:	ldr	r9, [sp, #56]	; 0x38
   2970c:	bls	29724 <__assert_fail@plt+0x17038>
   29710:	ldr	r3, [pc, #880]	; 29a88 <__assert_fail@plt+0x1739c>
   29714:	mov	r2, #84	; 0x54
   29718:	ldr	r1, [pc, #876]	; 29a8c <__assert_fail@plt+0x173a0>
   2971c:	ldr	r0, [pc, #876]	; 29a90 <__assert_fail@plt+0x173a4>
   29720:	bl	126ec <__assert_fail@plt>
   29724:	cmp	r1, #0
   29728:	mov	r7, r1
   2972c:	mov	r4, r0
   29730:	mov	fp, r2
   29734:	mov	r8, r3
   29738:	addeq	r7, sp, #4
   2973c:	bl	12404 <__errno_location@plt>
   29740:	mov	r3, #0
   29744:	str	r3, [r0]
   29748:	mov	sl, r0
   2974c:	bl	12374 <__ctype_b_loc@plt>
   29750:	ldrb	r6, [r4]
   29754:	mov	r3, r4
   29758:	ldr	r1, [r0]
   2975c:	lsl	r2, r6, #1
   29760:	ldrh	r5, [r1, r2]
   29764:	ands	r5, r5, #8192	; 0x2000
   29768:	bne	29784 <__assert_fail@plt+0x17098>
   2976c:	cmp	r6, #45	; 0x2d
   29770:	bne	2978c <__assert_fail@plt+0x170a0>
   29774:	mov	r5, #4
   29778:	mov	r0, r5
   2977c:	add	sp, sp, #20
   29780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29784:	ldrb	r6, [r3, #1]!
   29788:	b	2975c <__assert_fail@plt+0x17070>
   2978c:	mov	r2, fp
   29790:	mov	r1, r7
   29794:	mov	r0, r4
   29798:	bl	124a0 <strtoumax@plt>
   2979c:	ldr	r6, [r7]
   297a0:	cmp	r4, r6
   297a4:	strd	r0, [sp, #8]
   297a8:	bne	2980c <__assert_fail@plt+0x17120>
   297ac:	cmp	r9, #0
   297b0:	beq	29774 <__assert_fail@plt+0x17088>
   297b4:	ldrb	r1, [r6]
   297b8:	cmp	r1, #0
   297bc:	beq	29774 <__assert_fail@plt+0x17088>
   297c0:	mov	r0, r9
   297c4:	bl	123c8 <strchr@plt>
   297c8:	cmp	r0, #0
   297cc:	beq	29774 <__assert_fail@plt+0x17088>
   297d0:	mov	r2, #1
   297d4:	mov	r3, #0
   297d8:	strd	r2, [sp, #8]
   297dc:	ldrb	r4, [r6]
   297e0:	cmp	r4, #0
   297e4:	beq	29a2c <__assert_fail@plt+0x17340>
   297e8:	mov	r1, r4
   297ec:	mov	r0, r9
   297f0:	bl	123c8 <strchr@plt>
   297f4:	cmp	r0, #0
   297f8:	bne	29834 <__assert_fail@plt+0x17148>
   297fc:	ldrd	r2, [sp, #8]
   29800:	orr	r5, r5, #2
   29804:	strd	r2, [r8]
   29808:	b	29778 <__assert_fail@plt+0x1708c>
   2980c:	ldr	r5, [sl]
   29810:	cmp	r5, #0
   29814:	beq	29824 <__assert_fail@plt+0x17138>
   29818:	cmp	r5, #34	; 0x22
   2981c:	bne	29774 <__assert_fail@plt+0x17088>
   29820:	mov	r5, #1
   29824:	cmp	r9, #0
   29828:	bne	297dc <__assert_fail@plt+0x170f0>
   2982c:	strd	r0, [r8]
   29830:	b	29778 <__assert_fail@plt+0x1708c>
   29834:	cmp	r4, #84	; 0x54
   29838:	beq	2988c <__assert_fail@plt+0x171a0>
   2983c:	bhi	29874 <__assert_fail@plt+0x17188>
   29840:	cmp	r4, #75	; 0x4b
   29844:	beq	2988c <__assert_fail@plt+0x171a0>
   29848:	bhi	29864 <__assert_fail@plt+0x17178>
   2984c:	cmp	r4, #69	; 0x45
   29850:	beq	2988c <__assert_fail@plt+0x171a0>
   29854:	cmp	r4, #71	; 0x47
   29858:	beq	2988c <__assert_fail@plt+0x171a0>
   2985c:	mov	r6, #1
   29860:	b	29948 <__assert_fail@plt+0x1725c>
   29864:	cmp	r4, #77	; 0x4d
   29868:	beq	2988c <__assert_fail@plt+0x171a0>
   2986c:	cmp	r4, #80	; 0x50
   29870:	b	29858 <__assert_fail@plt+0x1716c>
   29874:	cmp	r4, #103	; 0x67
   29878:	beq	2988c <__assert_fail@plt+0x171a0>
   2987c:	bhi	29920 <__assert_fail@plt+0x17234>
   29880:	sub	r3, r4, #89	; 0x59
   29884:	cmp	r3, #1
   29888:	bhi	2985c <__assert_fail@plt+0x17170>
   2988c:	mov	r1, #48	; 0x30
   29890:	mov	r0, r9
   29894:	bl	123c8 <strchr@plt>
   29898:	cmp	r0, #0
   2989c:	beq	2985c <__assert_fail@plt+0x17170>
   298a0:	ldrb	r3, [r6, #1]
   298a4:	cmp	r3, #68	; 0x44
   298a8:	beq	298bc <__assert_fail@plt+0x171d0>
   298ac:	cmp	r3, #105	; 0x69
   298b0:	beq	29938 <__assert_fail@plt+0x1724c>
   298b4:	cmp	r3, #66	; 0x42
   298b8:	bne	2985c <__assert_fail@plt+0x17170>
   298bc:	mov	r6, #2
   298c0:	mov	r1, #1000	; 0x3e8
   298c4:	cmp	r4, #89	; 0x59
   298c8:	beq	29a78 <__assert_fail@plt+0x1738c>
   298cc:	bhi	29970 <__assert_fail@plt+0x17284>
   298d0:	cmp	r4, #75	; 0x4b
   298d4:	beq	299b0 <__assert_fail@plt+0x172c4>
   298d8:	bhi	29950 <__assert_fail@plt+0x17264>
   298dc:	cmp	r4, #69	; 0x45
   298e0:	beq	29a54 <__assert_fail@plt+0x17368>
   298e4:	cmp	r4, #71	; 0x47
   298e8:	beq	29a60 <__assert_fail@plt+0x17374>
   298ec:	cmp	r4, #66	; 0x42
   298f0:	bne	297fc <__assert_fail@plt+0x17110>
   298f4:	ldrd	r2, [sp, #8]
   298f8:	ldr	r1, [pc, #404]	; 29a94 <__assert_fail@plt+0x173a8>
   298fc:	mvn	r0, #0
   29900:	cmp	r3, r1
   29904:	cmpeq	r2, r0
   29908:	bhi	29a00 <__assert_fail@plt+0x17314>
   2990c:	lsl	r3, r3, #10
   29910:	orr	r3, r3, r2, lsr #22
   29914:	str	r3, [sp, #12]
   29918:	lsl	r2, r2, #10
   2991c:	b	29a48 <__assert_fail@plt+0x1735c>
   29920:	cmp	r4, #109	; 0x6d
   29924:	beq	2988c <__assert_fail@plt+0x171a0>
   29928:	cmp	r4, #116	; 0x74
   2992c:	beq	2988c <__assert_fail@plt+0x171a0>
   29930:	cmp	r4, #107	; 0x6b
   29934:	b	29858 <__assert_fail@plt+0x1716c>
   29938:	ldrb	r6, [r6, #2]
   2993c:	cmp	r6, #66	; 0x42
   29940:	movne	r6, #1
   29944:	moveq	r6, #3
   29948:	mov	r1, #1024	; 0x400
   2994c:	b	298c4 <__assert_fail@plt+0x171d8>
   29950:	cmp	r4, #80	; 0x50
   29954:	beq	29a68 <__assert_fail@plt+0x1737c>
   29958:	cmp	r4, #84	; 0x54
   2995c:	beq	29a70 <__assert_fail@plt+0x17384>
   29960:	cmp	r4, #77	; 0x4d
   29964:	bne	297fc <__assert_fail@plt+0x17110>
   29968:	mov	r2, #2
   2996c:	b	29a58 <__assert_fail@plt+0x1736c>
   29970:	cmp	r4, #103	; 0x67
   29974:	beq	29a60 <__assert_fail@plt+0x17374>
   29978:	bhi	2999c <__assert_fail@plt+0x172b0>
   2997c:	cmp	r4, #98	; 0x62
   29980:	beq	299e8 <__assert_fail@plt+0x172fc>
   29984:	cmp	r4, #99	; 0x63
   29988:	beq	29a4c <__assert_fail@plt+0x17360>
   2998c:	cmp	r4, #90	; 0x5a
   29990:	bne	297fc <__assert_fail@plt+0x17110>
   29994:	mov	r2, #7
   29998:	b	29a58 <__assert_fail@plt+0x1736c>
   2999c:	cmp	r4, #109	; 0x6d
   299a0:	beq	29968 <__assert_fail@plt+0x1727c>
   299a4:	bhi	299b8 <__assert_fail@plt+0x172cc>
   299a8:	cmp	r4, #107	; 0x6b
   299ac:	bne	297fc <__assert_fail@plt+0x17110>
   299b0:	mov	r2, #1
   299b4:	b	29a58 <__assert_fail@plt+0x1736c>
   299b8:	cmp	r4, #116	; 0x74
   299bc:	beq	29a70 <__assert_fail@plt+0x17384>
   299c0:	cmp	r4, #119	; 0x77
   299c4:	bne	297fc <__assert_fail@plt+0x17110>
   299c8:	ldrd	r2, [sp, #8]
   299cc:	cmp	r2, #0
   299d0:	sbcs	r1, r3, #0
   299d4:	blt	29a00 <__assert_fail@plt+0x17314>
   299d8:	adds	r2, r2, r2
   299dc:	adc	r3, r3, r3
   299e0:	strd	r2, [sp, #8]
   299e4:	b	29a4c <__assert_fail@plt+0x17360>
   299e8:	ldrd	r2, [sp, #8]
   299ec:	ldr	r1, [pc, #164]	; 29a98 <__assert_fail@plt+0x173ac>
   299f0:	mvn	r0, #0
   299f4:	cmp	r3, r1
   299f8:	cmpeq	r2, r0
   299fc:	bls	29a38 <__assert_fail@plt+0x1734c>
   29a00:	mvn	r2, #0
   29a04:	mvn	r3, #0
   29a08:	mov	r0, #1
   29a0c:	strd	r2, [sp, #8]
   29a10:	ldr	r3, [r7]
   29a14:	orr	r5, r5, r0
   29a18:	add	r2, r3, r6
   29a1c:	str	r2, [r7]
   29a20:	ldrb	r3, [r3, r6]
   29a24:	cmp	r3, #0
   29a28:	orrne	r5, r5, #2
   29a2c:	ldrd	r2, [sp, #8]
   29a30:	strd	r2, [r8]
   29a34:	b	29778 <__assert_fail@plt+0x1708c>
   29a38:	lsl	r3, r3, #9
   29a3c:	orr	r3, r3, r2, lsr #23
   29a40:	lsl	r2, r2, #9
   29a44:	str	r3, [sp, #12]
   29a48:	str	r2, [sp, #8]
   29a4c:	mov	r0, #0
   29a50:	b	29a10 <__assert_fail@plt+0x17324>
   29a54:	mov	r2, #6
   29a58:	add	r0, sp, #8
   29a5c:	b	29a80 <__assert_fail@plt+0x17394>
   29a60:	mov	r2, #3
   29a64:	b	29a58 <__assert_fail@plt+0x1736c>
   29a68:	mov	r2, #5
   29a6c:	b	29a58 <__assert_fail@plt+0x1736c>
   29a70:	mov	r2, #4
   29a74:	b	29a58 <__assert_fail@plt+0x1736c>
   29a78:	mov	r2, #8
   29a7c:	add	r0, sp, r2
   29a80:	bl	29668 <__assert_fail@plt+0x16f7c>
   29a84:	b	29a10 <__assert_fail@plt+0x17324>
   29a88:	muleq	r3, sp, r0
   29a8c:	andeq	pc, r3, sp, rrx
   29a90:	andeq	pc, r3, r7, ror r0	; <UNPREDICTABLE>
   29a94:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   29a98:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   29a9c:	ldr	r3, [pc, #96]	; 29b04 <__assert_fail@plt+0x17418>
   29aa0:	push	{r0, r1, r4, lr}
   29aa4:	add	r1, sp, #8
   29aa8:	mov	r4, #0
   29aac:	str	r4, [r1, #-4]!
   29ab0:	ldr	r2, [r3]
   29ab4:	mov	r0, sp
   29ab8:	str	r4, [sp]
   29abc:	bl	12638 <getline@plt>
   29ac0:	cmp	r0, #0
   29ac4:	ble	29af0 <__assert_fail@plt+0x17404>
   29ac8:	ldr	r3, [sp]
   29acc:	sub	r0, r0, #1
   29ad0:	ldrb	r2, [r3, r0]
   29ad4:	cmp	r2, #10
   29ad8:	strbeq	r4, [r3, r0]
   29adc:	ldr	r0, [sp]
   29ae0:	bl	1250c <rpmatch@plt>
   29ae4:	cmp	r0, #0
   29ae8:	movle	r4, #0
   29aec:	movgt	r4, #1
   29af0:	ldr	r0, [sp]
   29af4:	bl	2a01c <__assert_fail@plt+0x17930>
   29af8:	mov	r0, r4
   29afc:	add	sp, sp, #8
   29b00:	pop	{r4, pc}
   29b04:	andeq	r0, r5, r8, ror #10
   29b08:	cmp	r1, #0
   29b0c:	cmpne	r0, #0
   29b10:	moveq	r1, #1
   29b14:	moveq	r0, r1
   29b18:	umull	r2, r3, r0, r1
   29b1c:	adds	r3, r3, #0
   29b20:	movne	r3, #1
   29b24:	cmp	r2, #0
   29b28:	blt	29b38 <__assert_fail@plt+0x1744c>
   29b2c:	cmp	r3, #0
   29b30:	bne	29b38 <__assert_fail@plt+0x1744c>
   29b34:	b	11f84 <calloc@plt>
   29b38:	push	{r4, lr}
   29b3c:	bl	12404 <__errno_location@plt>
   29b40:	mov	r3, #12
   29b44:	str	r3, [r0]
   29b48:	mov	r0, #0
   29b4c:	pop	{r4, pc}
   29b50:	ldr	r0, [r0]
   29b54:	cmp	r0, #0
   29b58:	bxlt	lr
   29b5c:	push	{r4, lr}
   29b60:	bl	126a4 <close@plt>
   29b64:	cmp	r0, #0
   29b68:	popeq	{r4, pc}
   29b6c:	ldr	r3, [pc, #12]	; 29b80 <__assert_fail@plt+0x17494>
   29b70:	mov	r2, #64	; 0x40
   29b74:	ldr	r1, [pc, #8]	; 29b84 <__assert_fail@plt+0x17498>
   29b78:	ldr	r0, [pc, #8]	; 29b88 <__assert_fail@plt+0x1749c>
   29b7c:	bl	126ec <__assert_fail@plt>
   29b80:	andeq	pc, r3, r8, lsr #1
   29b84:	strheq	pc, [r3], -ip	; <UNPREDICTABLE>
   29b88:	andeq	pc, r3, r9, asr #1
   29b8c:	push	{r4, r5, r6, lr}
   29b90:	mov	r2, #18688	; 0x4900
   29b94:	mov	r4, r0
   29b98:	ldr	r0, [r0]
   29b9c:	bl	123e0 <openat64@plt>
   29ba0:	subs	r5, r0, #0
   29ba4:	blt	29bbc <__assert_fail@plt+0x174d0>
   29ba8:	mov	r0, r4
   29bac:	bl	29b50 <__assert_fail@plt+0x17464>
   29bb0:	str	r5, [r4]
   29bb4:	mov	r0, #0
   29bb8:	pop	{r4, r5, r6, pc}
   29bbc:	mvn	r0, #0
   29bc0:	pop	{r4, r5, r6, pc}
   29bc4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   29bc8:	mov	r7, r0
   29bcc:	bl	121e8 <chdir@plt>
   29bd0:	subs	r4, r0, #0
   29bd4:	beq	29dc0 <__assert_fail@plt+0x176d4>
   29bd8:	bl	12404 <__errno_location@plt>
   29bdc:	ldr	r8, [r0]
   29be0:	mov	r6, r0
   29be4:	cmp	r8, #36	; 0x24
   29be8:	bne	29dc0 <__assert_fail@plt+0x176d4>
   29bec:	mov	r0, r7
   29bf0:	bl	123bc <strlen@plt>
   29bf4:	mvn	r3, #99	; 0x63
   29bf8:	str	r3, [sp, #4]
   29bfc:	subs	r5, r0, #0
   29c00:	bne	29c18 <__assert_fail@plt+0x1752c>
   29c04:	ldr	r3, [pc, #472]	; 29de4 <__assert_fail@plt+0x176f8>
   29c08:	ldr	r1, [pc, #472]	; 29de8 <__assert_fail@plt+0x176fc>
   29c0c:	ldr	r0, [pc, #472]	; 29dec <__assert_fail@plt+0x17700>
   29c10:	mov	r2, #126	; 0x7e
   29c14:	bl	126ec <__assert_fail@plt>
   29c18:	cmp	r5, #4096	; 0x1000
   29c1c:	ldrcc	r3, [pc, #448]	; 29de4 <__assert_fail@plt+0x176f8>
   29c20:	movcc	r2, #127	; 0x7f
   29c24:	ldrcc	r1, [pc, #444]	; 29de8 <__assert_fail@plt+0x176fc>
   29c28:	ldrcc	r0, [pc, #448]	; 29df0 <__assert_fail@plt+0x17704>
   29c2c:	bcc	29c14 <__assert_fail@plt+0x17528>
   29c30:	ldr	r1, [pc, #444]	; 29df4 <__assert_fail@plt+0x17708>
   29c34:	mov	r0, r7
   29c38:	bl	126e0 <strspn@plt>
   29c3c:	cmp	r0, #2
   29c40:	mov	r4, r0
   29c44:	bne	29cbc <__assert_fail@plt+0x175d0>
   29c48:	sub	r2, r5, #3
   29c4c:	mov	r1, #47	; 0x2f
   29c50:	add	r0, r7, #3
   29c54:	bl	124ac <memchr@plt>
   29c58:	subs	r4, r0, #0
   29c5c:	streq	r8, [r6]
   29c60:	beq	29d3c <__assert_fail@plt+0x17650>
   29c64:	mov	r3, #0
   29c68:	strb	r3, [r4]
   29c6c:	mov	r1, r7
   29c70:	add	r0, sp, #4
   29c74:	bl	29b8c <__assert_fail@plt+0x174a0>
   29c78:	mov	r3, #47	; 0x2f
   29c7c:	strb	r3, [r4]
   29c80:	cmp	r0, #0
   29c84:	bne	29ce0 <__assert_fail@plt+0x175f4>
   29c88:	add	r4, r4, #1
   29c8c:	mov	r0, r4
   29c90:	ldr	r1, [pc, #348]	; 29df4 <__assert_fail@plt+0x17708>
   29c94:	bl	126e0 <strspn@plt>
   29c98:	add	r4, r4, r0
   29c9c:	ldrb	r3, [r4]
   29ca0:	cmp	r3, #47	; 0x2f
   29ca4:	bne	29cf4 <__assert_fail@plt+0x17608>
   29ca8:	ldr	r3, [pc, #308]	; 29de4 <__assert_fail@plt+0x176f8>
   29cac:	mov	r2, #162	; 0xa2
   29cb0:	ldr	r1, [pc, #304]	; 29de8 <__assert_fail@plt+0x176fc>
   29cb4:	ldr	r0, [pc, #316]	; 29df8 <__assert_fail@plt+0x1770c>
   29cb8:	b	29c14 <__assert_fail@plt+0x17528>
   29cbc:	cmp	r0, #0
   29cc0:	moveq	r4, r7
   29cc4:	beq	29c9c <__assert_fail@plt+0x175b0>
   29cc8:	ldr	r1, [pc, #292]	; 29df4 <__assert_fail@plt+0x17708>
   29ccc:	add	r0, sp, #4
   29cd0:	bl	29b8c <__assert_fail@plt+0x174a0>
   29cd4:	cmp	r0, #0
   29cd8:	addeq	r4, r7, r4
   29cdc:	beq	29c9c <__assert_fail@plt+0x175b0>
   29ce0:	ldr	r4, [r6]
   29ce4:	add	r0, sp, #4
   29ce8:	bl	29b50 <__assert_fail@plt+0x17464>
   29cec:	str	r4, [r6]
   29cf0:	b	29d3c <__assert_fail@plt+0x17650>
   29cf4:	add	r7, r7, r5
   29cf8:	cmp	r4, r7
   29cfc:	movls	r9, #0
   29d00:	ldrls	r8, [pc, #244]	; 29dfc <__assert_fail@plt+0x17710>
   29d04:	bls	29d94 <__assert_fail@plt+0x176a8>
   29d08:	ldr	r3, [pc, #212]	; 29de4 <__assert_fail@plt+0x176f8>
   29d0c:	mov	r2, #163	; 0xa3
   29d10:	ldr	r1, [pc, #208]	; 29de8 <__assert_fail@plt+0x176fc>
   29d14:	ldr	r0, [pc, #228]	; 29e00 <__assert_fail@plt+0x17714>
   29d18:	b	29c14 <__assert_fail@plt+0x17528>
   29d1c:	mov	r2, #4096	; 0x1000
   29d20:	mov	r1, #47	; 0x2f
   29d24:	mov	r0, r4
   29d28:	bl	123ec <memrchr@plt>
   29d2c:	subs	r5, r0, #0
   29d30:	bne	29d44 <__assert_fail@plt+0x17658>
   29d34:	mov	r3, #36	; 0x24
   29d38:	str	r3, [r6]
   29d3c:	mvn	r4, #0
   29d40:	b	29dc0 <__assert_fail@plt+0x176d4>
   29d44:	sub	r3, r5, r4
   29d48:	cmp	r3, r8
   29d4c:	strb	r9, [r5]
   29d50:	ldrgt	r3, [pc, #140]	; 29de4 <__assert_fail@plt+0x176f8>
   29d54:	movgt	r2, #179	; 0xb3
   29d58:	ldrgt	r1, [pc, #136]	; 29de8 <__assert_fail@plt+0x176fc>
   29d5c:	ldrgt	r0, [pc, #160]	; 29e04 <__assert_fail@plt+0x17718>
   29d60:	bgt	29c14 <__assert_fail@plt+0x17528>
   29d64:	mov	r1, r4
   29d68:	add	r0, sp, #4
   29d6c:	bl	29b8c <__assert_fail@plt+0x174a0>
   29d70:	mov	r3, #47	; 0x2f
   29d74:	strb	r3, [r5]
   29d78:	cmp	r0, #0
   29d7c:	bne	29ce0 <__assert_fail@plt+0x175f4>
   29d80:	add	r4, r5, #1
   29d84:	mov	r0, r4
   29d88:	ldr	r1, [pc, #100]	; 29df4 <__assert_fail@plt+0x17708>
   29d8c:	bl	126e0 <strspn@plt>
   29d90:	add	r4, r4, r0
   29d94:	sub	r3, r7, r4
   29d98:	cmp	r3, r8
   29d9c:	bgt	29d1c <__assert_fail@plt+0x17630>
   29da0:	cmp	r4, r7
   29da4:	bcc	29dcc <__assert_fail@plt+0x176e0>
   29da8:	ldr	r0, [sp, #4]
   29dac:	bl	125d8 <fchdir@plt>
   29db0:	subs	r4, r0, #0
   29db4:	bne	29ce0 <__assert_fail@plt+0x175f4>
   29db8:	add	r0, sp, #4
   29dbc:	bl	29b50 <__assert_fail@plt+0x17464>
   29dc0:	mov	r0, r4
   29dc4:	add	sp, sp, #12
   29dc8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   29dcc:	mov	r1, r4
   29dd0:	add	r0, sp, #4
   29dd4:	bl	29b8c <__assert_fail@plt+0x174a0>
   29dd8:	cmp	r0, #0
   29ddc:	bne	29ce0 <__assert_fail@plt+0x175f4>
   29de0:	b	29da8 <__assert_fail@plt+0x176bc>
   29de4:	strheq	pc, [r3], -r1	; <UNPREDICTABLE>
   29de8:	strheq	pc, [r3], -ip	; <UNPREDICTABLE>
   29dec:	ldrdeq	pc, [r3], -r6
   29df0:	ldrdeq	pc, [r3], -lr
   29df4:	andeq	sl, r3, lr, lsr r4
   29df8:	andeq	pc, r3, sl, ror #1
   29dfc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   29e00:	strdeq	pc, [r3], -r6
   29e04:	andeq	pc, r3, r5, lsl #2
   29e08:	push	{r1, r2, r3}
   29e0c:	push	{r0, r1, r4, r5, r6, r7, lr}
   29e10:	add	r2, sp, #32
   29e14:	ldr	r1, [sp, #28]
   29e18:	str	r2, [sp, #4]
   29e1c:	cmp	r1, #0
   29e20:	beq	29e64 <__assert_fail@plt+0x17778>
   29e24:	ldr	r3, [pc, #396]	; 29fb8 <__assert_fail@plt+0x178cc>
   29e28:	mov	r6, r0
   29e2c:	cmp	r1, r3
   29e30:	beq	29e70 <__assert_fail@plt+0x17784>
   29e34:	cmp	r1, #11
   29e38:	beq	29e54 <__assert_fail@plt+0x17768>
   29e3c:	bgt	29f80 <__assert_fail@plt+0x17894>
   29e40:	cmp	r1, #3
   29e44:	beq	29e54 <__assert_fail@plt+0x17768>
   29e48:	bgt	29f5c <__assert_fail@plt+0x17870>
   29e4c:	cmp	r1, #1
   29e50:	bne	29f68 <__assert_fail@plt+0x1787c>
   29e54:	mov	r0, r6
   29e58:	bl	12500 <fcntl64@plt>
   29e5c:	mov	r4, r0
   29e60:	b	29f1c <__assert_fail@plt+0x17830>
   29e64:	ldr	r2, [sp, #32]
   29e68:	bl	12500 <fcntl64@plt>
   29e6c:	b	29e5c <__assert_fail@plt+0x17770>
   29e70:	ldr	r5, [pc, #324]	; 29fbc <__assert_fail@plt+0x178d0>
   29e74:	add	r3, sp, #36	; 0x24
   29e78:	str	r3, [sp, #4]
   29e7c:	ldr	r3, [r5]
   29e80:	ldr	r7, [r2]
   29e84:	cmp	r3, #0
   29e88:	mov	r2, r7
   29e8c:	blt	29f30 <__assert_fail@plt+0x17844>
   29e90:	bl	12500 <fcntl64@plt>
   29e94:	subs	r4, r0, #0
   29e98:	bge	29eac <__assert_fail@plt+0x177c0>
   29e9c:	bl	12404 <__errno_location@plt>
   29ea0:	ldr	r3, [r0]
   29ea4:	cmp	r3, #22
   29ea8:	beq	29efc <__assert_fail@plt+0x17810>
   29eac:	mov	r3, #1
   29eb0:	str	r3, [r5]
   29eb4:	cmp	r4, #0
   29eb8:	blt	29f1c <__assert_fail@plt+0x17830>
   29ebc:	ldr	r5, [r5]
   29ec0:	cmn	r5, #1
   29ec4:	bne	29f1c <__assert_fail@plt+0x17830>
   29ec8:	mov	r1, #1
   29ecc:	mov	r0, r4
   29ed0:	bl	12500 <fcntl64@plt>
   29ed4:	subs	r2, r0, #0
   29ed8:	bge	29f40 <__assert_fail@plt+0x17854>
   29edc:	bl	12404 <__errno_location@plt>
   29ee0:	ldr	r7, [r0]
   29ee4:	mov	r6, r0
   29ee8:	mov	r0, r4
   29eec:	bl	126a4 <close@plt>
   29ef0:	mov	r4, r5
   29ef4:	str	r7, [r6]
   29ef8:	b	29f1c <__assert_fail@plt+0x17830>
   29efc:	mov	r2, r7
   29f00:	mov	r1, #0
   29f04:	mov	r0, r6
   29f08:	bl	12500 <fcntl64@plt>
   29f0c:	subs	r4, r0, #0
   29f10:	mvnge	r3, #0
   29f14:	strge	r3, [r5]
   29f18:	bge	29ebc <__assert_fail@plt+0x177d0>
   29f1c:	mov	r0, r4
   29f20:	add	sp, sp, #8
   29f24:	pop	{r4, r5, r6, r7, lr}
   29f28:	add	sp, sp, #12
   29f2c:	bx	lr
   29f30:	mov	r1, #0
   29f34:	bl	12500 <fcntl64@plt>
   29f38:	mov	r4, r0
   29f3c:	b	29eb4 <__assert_fail@plt+0x177c8>
   29f40:	orr	r2, r2, #1
   29f44:	mov	r1, #2
   29f48:	mov	r0, r4
   29f4c:	bl	12500 <fcntl64@plt>
   29f50:	cmn	r0, #1
   29f54:	bne	29f1c <__assert_fail@plt+0x17830>
   29f58:	b	29edc <__assert_fail@plt+0x177f0>
   29f5c:	cmp	r1, #8
   29f60:	beq	29f68 <__assert_fail@plt+0x1787c>
   29f64:	bgt	29f78 <__assert_fail@plt+0x1788c>
   29f68:	ldr	r3, [sp, #4]
   29f6c:	mov	r0, r6
   29f70:	ldr	r2, [r3]
   29f74:	b	29e68 <__assert_fail@plt+0x1777c>
   29f78:	cmp	r1, #9
   29f7c:	b	29e50 <__assert_fail@plt+0x17764>
   29f80:	ldr	r2, [pc, #56]	; 29fc0 <__assert_fail@plt+0x178d4>
   29f84:	cmp	r1, r2
   29f88:	bgt	29fa0 <__assert_fail@plt+0x178b4>
   29f8c:	cmp	r1, r3
   29f90:	ldrlt	r3, [pc, #44]	; 29fc4 <__assert_fail@plt+0x178d8>
   29f94:	bge	29f68 <__assert_fail@plt+0x1787c>
   29f98:	cmp	r1, r3
   29f9c:	b	29e50 <__assert_fail@plt+0x17764>
   29fa0:	ldr	r3, [pc, #32]	; 29fc8 <__assert_fail@plt+0x178dc>
   29fa4:	cmp	r1, r3
   29fa8:	beq	29f68 <__assert_fail@plt+0x1787c>
   29fac:	blt	29e54 <__assert_fail@plt+0x17768>
   29fb0:	add	r3, r3, #1
   29fb4:	b	29f98 <__assert_fail@plt+0x178ac>
   29fb8:	andeq	r0, r0, r6, lsl #8
   29fbc:	andeq	r0, r5, r0, asr lr
   29fc0:	andeq	r0, r0, r7, lsl #8
   29fc4:	andeq	r0, r0, r1, lsl #8
   29fc8:	andeq	r0, r0, r9, lsl #8
   29fcc:	push	{r0, r1, r4, lr}
   29fd0:	subs	r4, r0, #0
   29fd4:	bne	29fe8 <__assert_fail@plt+0x178fc>
   29fd8:	mov	r0, r4
   29fdc:	add	sp, sp, #8
   29fe0:	pop	{r4, lr}
   29fe4:	b	1205c <fflush@plt>
   29fe8:	bl	12344 <__freading@plt>
   29fec:	cmp	r0, #0
   29ff0:	beq	29fd8 <__assert_fail@plt+0x178ec>
   29ff4:	ldr	r3, [r4]
   29ff8:	tst	r3, #256	; 0x100
   29ffc:	beq	29fd8 <__assert_fail@plt+0x178ec>
   2a000:	mov	r3, #1
   2a004:	str	r3, [sp]
   2a008:	mov	r2, #0
   2a00c:	mov	r3, #0
   2a010:	mov	r0, r4
   2a014:	bl	2a070 <__assert_fail@plt+0x17984>
   2a018:	b	29fd8 <__assert_fail@plt+0x178ec>
   2a01c:	push	{r0, r1, r2, r4, r5, lr}
   2a020:	mov	r5, r0
   2a024:	bl	12404 <__errno_location@plt>
   2a028:	ldr	r3, [r0]
   2a02c:	mov	r4, r0
   2a030:	str	r3, [sp]
   2a034:	str	r3, [sp, #4]
   2a038:	mov	r3, #0
   2a03c:	str	r3, [r0]
   2a040:	mov	r0, r5
   2a044:	bl	12098 <free@plt>
   2a048:	ldr	r3, [r4]
   2a04c:	add	r2, sp, #8
   2a050:	cmp	r3, #0
   2a054:	moveq	r3, #4
   2a058:	movne	r3, #0
   2a05c:	add	r3, r2, r3
   2a060:	ldr	r3, [r3, #-8]
   2a064:	str	r3, [r4]
   2a068:	add	sp, sp, #12
   2a06c:	pop	{r4, r5, pc}
   2a070:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   2a074:	mov	r4, r0
   2a078:	ldmib	r0, {ip, lr}
   2a07c:	ldr	r8, [sp, #32]
   2a080:	cmp	lr, ip
   2a084:	bne	2a0f0 <__assert_fail@plt+0x17a04>
   2a088:	ldr	lr, [r0, #20]
   2a08c:	ldr	ip, [r0, #16]
   2a090:	cmp	lr, ip
   2a094:	bne	2a0f0 <__assert_fail@plt+0x17a04>
   2a098:	ldr	r5, [r0, #36]	; 0x24
   2a09c:	cmp	r5, #0
   2a0a0:	bne	2a0f0 <__assert_fail@plt+0x17a04>
   2a0a4:	mov	r6, r2
   2a0a8:	mov	r7, r3
   2a0ac:	bl	12488 <fileno@plt>
   2a0b0:	mov	r2, r6
   2a0b4:	mov	r3, r7
   2a0b8:	str	r8, [sp]
   2a0bc:	bl	12248 <lseek64@plt>
   2a0c0:	mvn	r3, #0
   2a0c4:	mvn	r2, #0
   2a0c8:	cmp	r1, r3
   2a0cc:	cmpeq	r0, r2
   2a0d0:	mvneq	r0, #0
   2a0d4:	ldrne	r3, [r4]
   2a0d8:	strdne	r0, [r4, #80]	; 0x50
   2a0dc:	movne	r0, r5
   2a0e0:	bicne	r3, r3, #16
   2a0e4:	strne	r3, [r4]
   2a0e8:	add	sp, sp, #8
   2a0ec:	pop	{r4, r5, r6, r7, r8, pc}
   2a0f0:	str	r8, [sp, #32]
   2a0f4:	mov	r0, r4
   2a0f8:	add	sp, sp, #8
   2a0fc:	pop	{r4, r5, r6, r7, r8, lr}
   2a100:	b	124e8 <fseeko64@plt>
   2a104:	ldrd	r2, [r1, #8]
   2a108:	push	{r4, r5, lr}
   2a10c:	ldrd	r4, [r0, #8]
   2a110:	cmp	r5, r3
   2a114:	cmpeq	r4, r2
   2a118:	bne	2a138 <__assert_fail@plt+0x17a4c>
   2a11c:	ldrd	r4, [r0]
   2a120:	ldrd	r2, [r1]
   2a124:	cmp	r5, r3
   2a128:	cmpeq	r4, r2
   2a12c:	moveq	r0, #1
   2a130:	movne	r0, #0
   2a134:	pop	{r4, r5, pc}
   2a138:	mov	r0, #0
   2a13c:	pop	{r4, r5, pc}
   2a140:	push	{r4, lr}
   2a144:	mov	r2, r1
   2a148:	mov	r3, #0
   2a14c:	ldrd	r0, [r0, #8]
   2a150:	bl	3994c <__assert_fail@plt+0x27260>
   2a154:	mov	r0, r2
   2a158:	pop	{r4, pc}
   2a15c:	push	{r4, lr}
   2a160:	mov	r2, r1
   2a164:	mov	r3, #0
   2a168:	ldrd	r0, [r0]
   2a16c:	bl	3994c <__assert_fail@plt+0x27260>
   2a170:	mov	r0, r2
   2a174:	pop	{r4, pc}
   2a178:	ldrd	r2, [r1]
   2a17c:	push	{r4, r5, lr}
   2a180:	ldrd	r4, [r0]
   2a184:	cmp	r5, r3
   2a188:	cmpeq	r4, r2
   2a18c:	moveq	r0, #1
   2a190:	movne	r0, #0
   2a194:	pop	{r4, r5, pc}
   2a198:	ldr	r3, [r0]
   2a19c:	push	{r4, r5, lr}
   2a1a0:	ldrd	r4, [r3, #160]	; 0xa0
   2a1a4:	ldr	r3, [r1]
   2a1a8:	ldrd	r2, [r3, #160]	; 0xa0
   2a1ac:	cmp	r5, r3
   2a1b0:	cmpeq	r4, r2
   2a1b4:	movhi	r0, #1
   2a1b8:	movls	r0, #0
   2a1bc:	movcc	r3, #1
   2a1c0:	movcs	r3, #0
   2a1c4:	sub	r0, r0, r3
   2a1c8:	pop	{r4, r5, pc}
   2a1cc:	ldr	r3, [r1, #48]	; 0x30
   2a1d0:	push	{r4, r5, r6, lr}
   2a1d4:	cmp	r3, #0
   2a1d8:	mov	r4, r1
   2a1dc:	add	r5, r1, #64	; 0x40
   2a1e0:	ldr	r3, [r0, #48]	; 0x30
   2a1e4:	bne	2a1f0 <__assert_fail@plt+0x17b04>
   2a1e8:	tst	r3, #1
   2a1ec:	movne	r2, #1
   2a1f0:	lsl	r3, r3, #30
   2a1f4:	orrs	r3, r2, r3, lsr #31
   2a1f8:	beq	2a264 <__assert_fail@plt+0x17b78>
   2a1fc:	mov	r1, r5
   2a200:	ldr	r0, [r4, #24]
   2a204:	bl	39b84 <__assert_fail@plt+0x27498>
   2a208:	cmp	r0, #0
   2a20c:	beq	2a28c <__assert_fail@plt+0x17ba0>
   2a210:	bl	12404 <__errno_location@plt>
   2a214:	ldr	r3, [r0]
   2a218:	mov	r6, r0
   2a21c:	cmp	r3, #2
   2a220:	bne	2a244 <__assert_fail@plt+0x17b58>
   2a224:	mov	r1, r5
   2a228:	ldr	r0, [r4, #24]
   2a22c:	bl	39ba4 <__assert_fail@plt+0x274b8>
   2a230:	cmp	r0, #0
   2a234:	bne	2a244 <__assert_fail@plt+0x17b58>
   2a238:	str	r0, [r6]
   2a23c:	mov	r0, #13
   2a240:	pop	{r4, r5, r6, pc}
   2a244:	ldr	r3, [r6]
   2a248:	str	r3, [r4, #32]
   2a24c:	mov	r2, #104	; 0x68
   2a250:	mov	r1, #0
   2a254:	mov	r0, r5
   2a258:	bl	12434 <memset@plt>
   2a25c:	mov	r0, #10
   2a260:	pop	{r4, r5, r6, pc}
   2a264:	mov	r3, #256	; 0x100
   2a268:	mov	r2, r5
   2a26c:	ldr	r1, [r4, #24]
   2a270:	ldr	r0, [r0, #32]
   2a274:	bl	39bb4 <__assert_fail@plt+0x274c8>
   2a278:	cmp	r0, #0
   2a27c:	beq	2a28c <__assert_fail@plt+0x17ba0>
   2a280:	bl	12404 <__errno_location@plt>
   2a284:	ldr	r3, [r0]
   2a288:	b	2a248 <__assert_fail@plt+0x17b5c>
   2a28c:	ldr	r0, [r4, #80]	; 0x50
   2a290:	and	r0, r0, #61440	; 0xf000
   2a294:	cmp	r0, #16384	; 0x4000
   2a298:	bne	2a2dc <__assert_fail@plt+0x17bf0>
   2a29c:	ldrb	r3, [r4, #168]	; 0xa8
   2a2a0:	cmp	r3, #46	; 0x2e
   2a2a4:	bne	2a2f4 <__assert_fail@plt+0x17c08>
   2a2a8:	ldrb	r3, [r4, #169]	; 0xa9
   2a2ac:	cmp	r3, #0
   2a2b0:	beq	2a2c8 <__assert_fail@plt+0x17bdc>
   2a2b4:	ldr	r3, [r4, #168]	; 0xa8
   2a2b8:	bic	r3, r3, #-16777216	; 0xff000000
   2a2bc:	bic	r3, r3, #255	; 0xff
   2a2c0:	cmp	r3, #11776	; 0x2e00
   2a2c4:	bne	2a2f4 <__assert_fail@plt+0x17c08>
   2a2c8:	ldr	r0, [r4, #48]	; 0x30
   2a2cc:	cmp	r0, #0
   2a2d0:	moveq	r0, #1
   2a2d4:	movne	r0, #5
   2a2d8:	pop	{r4, r5, r6, pc}
   2a2dc:	cmp	r0, #40960	; 0xa000
   2a2e0:	beq	2a2fc <__assert_fail@plt+0x17c10>
   2a2e4:	cmp	r0, #32768	; 0x8000
   2a2e8:	moveq	r0, #8
   2a2ec:	movne	r0, #3
   2a2f0:	pop	{r4, r5, r6, pc}
   2a2f4:	mov	r0, #1
   2a2f8:	pop	{r4, r5, r6, pc}
   2a2fc:	mov	r0, #12
   2a300:	pop	{r4, r5, r6, pc}
   2a304:	ldr	r3, [r0, #40]	; 0x28
   2a308:	push	{r4, r5, r6, r7, r8, lr}
   2a30c:	cmp	r3, r2
   2a310:	mov	r4, r0
   2a314:	mov	r6, r1
   2a318:	mov	r5, r2
   2a31c:	ldr	r7, [r0, #44]	; 0x2c
   2a320:	bcs	2a368 <__assert_fail@plt+0x17c7c>
   2a324:	add	r1, r2, #40	; 0x28
   2a328:	cmn	r1, #-1073741823	; 0xc0000001
   2a32c:	str	r1, [r0, #40]	; 0x28
   2a330:	bls	2a350 <__assert_fail@plt+0x17c64>
   2a334:	ldr	r0, [r4, #8]
   2a338:	bl	2a01c <__assert_fail@plt+0x17930>
   2a33c:	mov	r3, #0
   2a340:	str	r3, [r4, #8]
   2a344:	str	r3, [r4, #40]	; 0x28
   2a348:	mov	r0, r6
   2a34c:	pop	{r4, r5, r6, r7, r8, pc}
   2a350:	lsl	r1, r1, #2
   2a354:	ldr	r0, [r0, #8]
   2a358:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   2a35c:	cmp	r0, #0
   2a360:	beq	2a334 <__assert_fail@plt+0x17c48>
   2a364:	str	r0, [r4, #8]
   2a368:	ldr	r0, [r4, #8]
   2a36c:	mov	r2, r0
   2a370:	cmp	r6, #0
   2a374:	bne	2a3b0 <__assert_fail@plt+0x17cc4>
   2a378:	mov	r3, r7
   2a37c:	mov	r2, #4
   2a380:	mov	r1, r5
   2a384:	bl	125f0 <qsort@plt>
   2a388:	ldr	r2, [r4, #8]
   2a38c:	mov	r3, r5
   2a390:	mov	r1, r2
   2a394:	ldr	r6, [r2]
   2a398:	subs	r3, r3, #1
   2a39c:	bne	2a3bc <__assert_fail@plt+0x17cd0>
   2a3a0:	sub	r5, r5, #-1073741823	; 0xc0000001
   2a3a4:	ldr	r2, [r2, r5, lsl #2]
   2a3a8:	str	r3, [r2, #8]
   2a3ac:	b	2a348 <__assert_fail@plt+0x17c5c>
   2a3b0:	str	r6, [r2], #4
   2a3b4:	ldr	r6, [r6, #8]
   2a3b8:	b	2a370 <__assert_fail@plt+0x17c84>
   2a3bc:	ldr	r0, [r1]
   2a3c0:	ldr	ip, [r1, #4]!
   2a3c4:	str	ip, [r0, #8]
   2a3c8:	b	2a398 <__assert_fail@plt+0x17cac>
   2a3cc:	push	{r4, r5, r6, r7, r8, lr}
   2a3d0:	mov	r6, r0
   2a3d4:	add	r0, r2, #176	; 0xb0
   2a3d8:	bic	r0, r0, #7
   2a3dc:	mov	r7, r1
   2a3e0:	mov	r5, r2
   2a3e4:	bl	2bf10 <__assert_fail@plt+0x19824>
   2a3e8:	subs	r4, r0, #0
   2a3ec:	beq	2a438 <__assert_fail@plt+0x17d4c>
   2a3f0:	mov	r2, r5
   2a3f4:	mov	r1, r7
   2a3f8:	add	r0, r4, #168	; 0xa8
   2a3fc:	bl	120f8 <memcpy@plt>
   2a400:	add	r2, r4, r5
   2a404:	mov	r3, #0
   2a408:	strb	r3, [r2, #168]	; 0xa8
   2a40c:	ldr	r2, [r6, #24]
   2a410:	str	r5, [r4, #52]	; 0x34
   2a414:	str	r2, [r4, #28]
   2a418:	mov	r2, #3
   2a41c:	str	r6, [r4, #44]	; 0x2c
   2a420:	str	r3, [r4, #32]
   2a424:	str	r3, [r4, #12]
   2a428:	strh	r3, [r4, #58]	; 0x3a
   2a42c:	strh	r2, [r4, #60]	; 0x3c
   2a430:	str	r3, [r4, #16]
   2a434:	str	r3, [r4, #20]
   2a438:	mov	r0, r4
   2a43c:	pop	{r4, r5, r6, r7, r8, pc}
   2a440:	ldr	ip, [r0, #48]	; 0x30
   2a444:	push	{lr}		; (str lr, [sp, #-4]!)
   2a448:	tst	ip, #16
   2a44c:	ldr	lr, [pc, #40]	; 2a47c <__assert_fail@plt+0x17d90>
   2a450:	ldr	r2, [pc, #40]	; 2a480 <__assert_fail@plt+0x17d94>
   2a454:	moveq	r2, lr
   2a458:	tst	ip, #512	; 0x200
   2a45c:	beq	2a46c <__assert_fail@plt+0x17d80>
   2a460:	ldr	r0, [r0, #32]
   2a464:	pop	{lr}		; (ldr lr, [sp], #4)
   2a468:	b	23648 <__assert_fail@plt+0x10f5c>
   2a46c:	mov	r0, r1
   2a470:	pop	{lr}		; (ldr lr, [sp], #4)
   2a474:	mov	r1, r2
   2a478:	b	1fe48 <__assert_fail@plt+0xd75c>
   2a47c:	andeq	r4, r8, r0, lsl #18
   2a480:	andeq	ip, r8, r0, lsl #18
   2a484:	push	{r4, r5, r6, lr}
   2a488:	mov	r4, r0
   2a48c:	cmp	r4, #0
   2a490:	bne	2a498 <__assert_fail@plt+0x17dac>
   2a494:	pop	{r4, r5, r6, pc}
   2a498:	ldr	r0, [r4, #12]
   2a49c:	ldr	r5, [r4, #8]
   2a4a0:	cmp	r0, #0
   2a4a4:	beq	2a4ac <__assert_fail@plt+0x17dc0>
   2a4a8:	bl	126bc <closedir@plt>
   2a4ac:	mov	r0, r4
   2a4b0:	bl	2a01c <__assert_fail@plt+0x17930>
   2a4b4:	mov	r4, r5
   2a4b8:	b	2a48c <__assert_fail@plt+0x17da0>
   2a4bc:	ldr	r2, [r0, #48]	; 0x30
   2a4c0:	ldr	r3, [pc, #28]	; 2a4e4 <__assert_fail@plt+0x17df8>
   2a4c4:	ldr	r0, [r0, #56]	; 0x38
   2a4c8:	and	r3, r3, r2
   2a4cc:	cmp	r3, #0
   2a4d0:	beq	2a4e0 <__assert_fail@plt+0x17df4>
   2a4d4:	cmp	r0, #0
   2a4d8:	bxeq	lr
   2a4dc:	b	20950 <__assert_fail@plt+0xe264>
   2a4e0:	b	2a01c <__assert_fail@plt+0x17930>
   2a4e4:	andeq	r0, r0, r2, lsl #2
   2a4e8:	push	{r4, lr}
   2a4ec:	mov	r4, r0
   2a4f0:	mov	r0, r4
   2a4f4:	bl	38be8 <__assert_fail@plt+0x264fc>
   2a4f8:	cmp	r0, #0
   2a4fc:	beq	2a504 <__assert_fail@plt+0x17e18>
   2a500:	pop	{r4, pc}
   2a504:	mov	r0, r4
   2a508:	bl	38c34 <__assert_fail@plt+0x26548>
   2a50c:	cmp	r0, #0
   2a510:	blt	2a4f0 <__assert_fail@plt+0x17e04>
   2a514:	bl	126a4 <close@plt>
   2a518:	b	2a4f0 <__assert_fail@plt+0x17e04>
   2a51c:	push	{r4, r5, r6, r7, lr}
   2a520:	sub	sp, sp, #100	; 0x64
   2a524:	ldr	r5, [r0, #44]	; 0x2c
   2a528:	ldr	r3, [r5, #48]	; 0x30
   2a52c:	tst	r3, #512	; 0x200
   2a530:	bne	2a540 <__assert_fail@plt+0x17e54>
   2a534:	mov	r0, #0
   2a538:	add	sp, sp, #100	; 0x64
   2a53c:	pop	{r4, r5, r6, r7, pc}
   2a540:	ldr	r4, [r5, #52]	; 0x34
   2a544:	mov	r7, r1
   2a548:	cmp	r4, #0
   2a54c:	mov	r6, r0
   2a550:	bne	2a580 <__assert_fail@plt+0x17e94>
   2a554:	ldr	r3, [pc, #184]	; 2a614 <__assert_fail@plt+0x17f28>
   2a558:	mov	r1, r4
   2a55c:	str	r3, [sp]
   2a560:	ldr	r2, [pc, #176]	; 2a618 <__assert_fail@plt+0x17f2c>
   2a564:	ldr	r3, [pc, #176]	; 2a61c <__assert_fail@plt+0x17f30>
   2a568:	mov	r0, #13
   2a56c:	bl	207e4 <__assert_fail@plt+0xe0f8>
   2a570:	cmp	r0, #0
   2a574:	mov	r4, r0
   2a578:	str	r0, [r5, #52]	; 0x34
   2a57c:	beq	2a5a0 <__assert_fail@plt+0x17eb4>
   2a580:	ldrd	r2, [r6, #64]	; 0x40
   2a584:	add	r1, sp, #96	; 0x60
   2a588:	mov	r0, r4
   2a58c:	strd	r2, [r1, #-88]!	; 0xffffffa8
   2a590:	bl	205c0 <__assert_fail@plt+0xded4>
   2a594:	cmp	r0, #0
   2a598:	ldrne	r0, [r0, #8]
   2a59c:	bne	2a538 <__assert_fail@plt+0x17e4c>
   2a5a0:	cmp	r7, #0
   2a5a4:	blt	2a534 <__assert_fail@plt+0x17e48>
   2a5a8:	add	r1, sp, #8
   2a5ac:	mov	r0, r7
   2a5b0:	bl	11f78 <fstatfs64@plt>
   2a5b4:	cmp	r0, #0
   2a5b8:	bne	2a534 <__assert_fail@plt+0x17e48>
   2a5bc:	cmp	r4, #0
   2a5c0:	beq	2a60c <__assert_fail@plt+0x17f20>
   2a5c4:	mov	r0, #16
   2a5c8:	bl	2bf10 <__assert_fail@plt+0x19824>
   2a5cc:	subs	r5, r0, #0
   2a5d0:	beq	2a60c <__assert_fail@plt+0x17f20>
   2a5d4:	ldrd	r2, [r6, #64]	; 0x40
   2a5d8:	mov	r1, r5
   2a5dc:	mov	r0, r4
   2a5e0:	strd	r2, [r5]
   2a5e4:	ldr	r3, [sp, #8]
   2a5e8:	str	r3, [r5, #8]
   2a5ec:	bl	20cb8 <__assert_fail@plt+0xe5cc>
   2a5f0:	cmp	r0, #0
   2a5f4:	beq	2a604 <__assert_fail@plt+0x17f18>
   2a5f8:	cmp	r5, r0
   2a5fc:	beq	2a60c <__assert_fail@plt+0x17f20>
   2a600:	bl	12698 <abort@plt>
   2a604:	mov	r0, r5
   2a608:	bl	2a01c <__assert_fail@plt+0x17930>
   2a60c:	ldr	r0, [sp, #8]
   2a610:	b	2a538 <__assert_fail@plt+0x17e4c>
   2a614:	andeq	sl, r2, ip, lsl r0
   2a618:	andeq	sl, r2, ip, asr r1
   2a61c:	andeq	sl, r2, r8, ror r1
   2a620:	push	{r4, r5, r6, lr}
   2a624:	mov	r5, r1
   2a628:	ldr	r1, [r0, #32]
   2a62c:	cmn	r1, #100	; 0x64
   2a630:	sub	r3, r1, r5
   2a634:	clz	r3, r3
   2a638:	lsr	r3, r3, #5
   2a63c:	moveq	r3, #0
   2a640:	cmp	r3, #0
   2a644:	beq	2a64c <__assert_fail@plt+0x17f60>
   2a648:	bl	12698 <abort@plt>
   2a64c:	cmp	r2, #0
   2a650:	mov	r4, r0
   2a654:	beq	2a674 <__assert_fail@plt+0x17f88>
   2a658:	add	r0, r0, #60	; 0x3c
   2a65c:	bl	38bf0 <__assert_fail@plt+0x26504>
   2a660:	cmp	r0, #0
   2a664:	blt	2a66c <__assert_fail@plt+0x17f80>
   2a668:	bl	126a4 <close@plt>
   2a66c:	str	r5, [r4, #32]
   2a670:	pop	{r4, r5, r6, pc}
   2a674:	ldr	r3, [r0, #48]	; 0x30
   2a678:	lsr	r3, r3, #2
   2a67c:	eor	r3, r3, #1
   2a680:	cmp	r1, #0
   2a684:	movlt	r3, #0
   2a688:	andge	r3, r3, #1
   2a68c:	cmp	r3, #0
   2a690:	beq	2a66c <__assert_fail@plt+0x17f80>
   2a694:	mov	r0, r1
   2a698:	b	2a668 <__assert_fail@plt+0x17f7c>
   2a69c:	ldr	r3, [r0, #48]	; 0x30
   2a6a0:	push	{r4, r5, r6, lr}
   2a6a4:	ands	r4, r3, #4
   2a6a8:	mov	r5, r0
   2a6ac:	movne	r4, #0
   2a6b0:	bne	2a6c8 <__assert_fail@plt+0x17fdc>
   2a6b4:	tst	r3, #512	; 0x200
   2a6b8:	beq	2a6d8 <__assert_fail@plt+0x17fec>
   2a6bc:	mov	r2, #1
   2a6c0:	mvn	r1, #99	; 0x63
   2a6c4:	bl	2a620 <__assert_fail@plt+0x17f34>
   2a6c8:	add	r0, r5, #60	; 0x3c
   2a6cc:	bl	2a4e8 <__assert_fail@plt+0x17dfc>
   2a6d0:	mov	r0, r4
   2a6d4:	pop	{r4, r5, r6, pc}
   2a6d8:	ldr	r0, [r0, #28]
   2a6dc:	bl	125d8 <fchdir@plt>
   2a6e0:	adds	r4, r0, #0
   2a6e4:	movne	r4, #1
   2a6e8:	b	2a6c8 <__assert_fail@plt+0x17fdc>
   2a6ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a6f0:	subs	sl, r3, #0
   2a6f4:	sub	sp, sp, #104	; 0x68
   2a6f8:	mov	r7, r0
   2a6fc:	mov	r8, r1
   2a700:	mov	r6, r2
   2a704:	moveq	r9, sl
   2a708:	beq	2a720 <__assert_fail@plt+0x18034>
   2a70c:	ldr	r1, [pc, #368]	; 2a884 <__assert_fail@plt+0x18198>
   2a710:	mov	r0, sl
   2a714:	bl	11ffc <strcmp@plt>
   2a718:	clz	r9, r0
   2a71c:	lsr	r9, r9, #5
   2a720:	ldr	r3, [r7, #48]	; 0x30
   2a724:	ands	r4, r3, #4
   2a728:	beq	2a754 <__assert_fail@plt+0x18068>
   2a72c:	mvn	r4, r6
   2a730:	lsr	r4, r4, #31
   2a734:	ands	r4, r4, r3, lsr #9
   2a738:	beq	2a748 <__assert_fail@plt+0x1805c>
   2a73c:	mov	r0, r6
   2a740:	bl	126a4 <close@plt>
   2a744:	mov	r4, #0
   2a748:	mov	r0, r4
   2a74c:	add	sp, sp, #104	; 0x68
   2a750:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a754:	ands	r2, r9, r6, lsr #31
   2a758:	beq	2a844 <__assert_fail@plt+0x18158>
   2a75c:	tst	r3, #512	; 0x200
   2a760:	bne	2a780 <__assert_fail@plt+0x18094>
   2a764:	mov	r1, sl
   2a768:	mov	r0, r7
   2a76c:	bl	2a440 <__assert_fail@plt+0x17d54>
   2a770:	subs	r5, r0, #0
   2a774:	bge	2a7ac <__assert_fail@plt+0x180c0>
   2a778:	mvn	r4, #0
   2a77c:	b	2a748 <__assert_fail@plt+0x1805c>
   2a780:	add	r5, r7, #60	; 0x3c
   2a784:	mov	r0, r5
   2a788:	bl	38be8 <__assert_fail@plt+0x264fc>
   2a78c:	cmp	r0, #0
   2a790:	bne	2a764 <__assert_fail@plt+0x18078>
   2a794:	mov	r0, r5
   2a798:	bl	38c34 <__assert_fail@plt+0x26548>
   2a79c:	subs	r5, r0, #0
   2a7a0:	movge	r6, r5
   2a7a4:	movge	sl, r4
   2a7a8:	blt	2a764 <__assert_fail@plt+0x18078>
   2a7ac:	ldr	r3, [r7, #48]	; 0x30
   2a7b0:	tst	r3, #2
   2a7b4:	bne	2a7d4 <__assert_fail@plt+0x180e8>
   2a7b8:	cmp	sl, #0
   2a7bc:	beq	2a854 <__assert_fail@plt+0x18168>
   2a7c0:	ldr	r1, [pc, #188]	; 2a884 <__assert_fail@plt+0x18198>
   2a7c4:	mov	r0, sl
   2a7c8:	bl	11ffc <strcmp@plt>
   2a7cc:	cmp	r0, #0
   2a7d0:	bne	2a854 <__assert_fail@plt+0x18168>
   2a7d4:	mov	r1, sp
   2a7d8:	mov	r0, r5
   2a7dc:	bl	39b94 <__assert_fail@plt+0x274a8>
   2a7e0:	cmp	r0, #0
   2a7e4:	bne	2a81c <__assert_fail@plt+0x18130>
   2a7e8:	ldrd	r0, [r8, #64]	; 0x40
   2a7ec:	ldrd	r2, [sp]
   2a7f0:	cmp	r1, r3
   2a7f4:	cmpeq	r0, r2
   2a7f8:	bne	2a810 <__assert_fail@plt+0x18124>
   2a7fc:	ldrd	r0, [r8, #160]	; 0xa0
   2a800:	ldrd	r2, [sp, #96]	; 0x60
   2a804:	cmp	r1, r3
   2a808:	cmpeq	r0, r2
   2a80c:	beq	2a854 <__assert_fail@plt+0x18168>
   2a810:	bl	12404 <__errno_location@plt>
   2a814:	mov	r3, #2
   2a818:	str	r3, [r0]
   2a81c:	mvn	r4, #0
   2a820:	cmp	r6, #0
   2a824:	bge	2a748 <__assert_fail@plt+0x1805c>
   2a828:	bl	12404 <__errno_location@plt>
   2a82c:	ldr	r7, [r0]
   2a830:	mov	r6, r0
   2a834:	mov	r0, r5
   2a838:	bl	126a4 <close@plt>
   2a83c:	str	r7, [r6]
   2a840:	b	2a748 <__assert_fail@plt+0x1805c>
   2a844:	cmp	r6, #0
   2a848:	movge	r5, r6
   2a84c:	bge	2a7ac <__assert_fail@plt+0x180c0>
   2a850:	b	2a764 <__assert_fail@plt+0x18078>
   2a854:	ldr	r3, [r7, #48]	; 0x30
   2a858:	tst	r3, #512	; 0x200
   2a85c:	beq	2a874 <__assert_fail@plt+0x18188>
   2a860:	eor	r2, r9, #1
   2a864:	mov	r1, r5
   2a868:	mov	r0, r7
   2a86c:	bl	2a620 <__assert_fail@plt+0x17f34>
   2a870:	b	2a748 <__assert_fail@plt+0x1805c>
   2a874:	mov	r0, r5
   2a878:	bl	125d8 <fchdir@plt>
   2a87c:	mov	r4, r0
   2a880:	b	2a820 <__assert_fail@plt+0x18134>
   2a884:	andeq	pc, r3, r0, lsr r1	; <UNPREDICTABLE>
   2a888:	ldr	r2, [r0, #48]	; 0x30
   2a88c:	ldr	r3, [pc, #164]	; 2a938 <__assert_fail@plt+0x1824c>
   2a890:	push	{r4, r5, r6, r7, lr}
   2a894:	and	r3, r3, r2
   2a898:	cmp	r3, #0
   2a89c:	sub	sp, sp, #28
   2a8a0:	beq	2a8d8 <__assert_fail@plt+0x181ec>
   2a8a4:	ldrd	r4, [r1, #64]	; 0x40
   2a8a8:	ldrd	r2, [r1, #160]	; 0xa0
   2a8ac:	ldr	r0, [r0, #56]	; 0x38
   2a8b0:	mov	r1, sp
   2a8b4:	strd	r4, [sp]
   2a8b8:	strd	r2, [sp, #8]
   2a8bc:	bl	20ce8 <__assert_fail@plt+0xe5fc>
   2a8c0:	cmp	r0, #0
   2a8c4:	bne	2a8cc <__assert_fail@plt+0x181e0>
   2a8c8:	bl	12698 <abort@plt>
   2a8cc:	bl	2a01c <__assert_fail@plt+0x17930>
   2a8d0:	add	sp, sp, #28
   2a8d4:	pop	{r4, r5, r6, r7, pc}
   2a8d8:	ldr	ip, [r1, #4]
   2a8dc:	cmp	ip, #0
   2a8e0:	beq	2a8d0 <__assert_fail@plt+0x181e4>
   2a8e4:	ldr	r3, [ip, #48]	; 0x30
   2a8e8:	cmp	r3, #0
   2a8ec:	blt	2a8d0 <__assert_fail@plt+0x181e4>
   2a8f0:	ldr	r3, [r0, #56]	; 0x38
   2a8f4:	ldrd	r4, [r3, #16]
   2a8f8:	orrs	r2, r4, r5
   2a8fc:	beq	2a8c8 <__assert_fail@plt+0x181dc>
   2a900:	ldrd	r4, [r3]
   2a904:	ldrd	r6, [r1, #160]	; 0xa0
   2a908:	cmp	r5, r7
   2a90c:	cmpeq	r4, r6
   2a910:	bne	2a8d0 <__assert_fail@plt+0x181e4>
   2a914:	ldrd	r6, [r3, #8]
   2a918:	ldrd	r4, [r1, #64]	; 0x40
   2a91c:	cmp	r7, r5
   2a920:	cmpeq	r6, r4
   2a924:	ldrdeq	r0, [ip, #64]	; 0x40
   2a928:	strdeq	r0, [r3, #8]
   2a92c:	ldrdeq	r0, [ip, #160]	; 0xa0
   2a930:	strdeq	r0, [r3]
   2a934:	b	2a8d0 <__assert_fail@plt+0x181e4>
   2a938:	andeq	r0, r0, r2, lsl #2
   2a93c:	ldr	r3, [r0, #36]	; 0x24
   2a940:	add	r1, r1, #256	; 0x100
   2a944:	adds	r1, r1, r3
   2a948:	push	{r4, r5, r6, lr}
   2a94c:	mov	r5, r0
   2a950:	bcc	2a978 <__assert_fail@plt+0x1828c>
   2a954:	ldr	r0, [r0, #24]
   2a958:	mov	r4, #0
   2a95c:	bl	2a01c <__assert_fail@plt+0x17930>
   2a960:	str	r4, [r5, #24]
   2a964:	bl	12404 <__errno_location@plt>
   2a968:	mov	r3, #36	; 0x24
   2a96c:	str	r3, [r0]
   2a970:	mov	r0, r4
   2a974:	pop	{r4, r5, r6, pc}
   2a978:	str	r1, [r0, #36]	; 0x24
   2a97c:	ldr	r0, [r0, #24]
   2a980:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   2a984:	subs	r4, r0, #0
   2a988:	bne	2a99c <__assert_fail@plt+0x182b0>
   2a98c:	ldr	r0, [r5, #24]
   2a990:	bl	2a01c <__assert_fail@plt+0x17930>
   2a994:	str	r4, [r5, #24]
   2a998:	b	2a970 <__assert_fail@plt+0x18284>
   2a99c:	str	r4, [r5, #24]
   2a9a0:	mov	r0, #1
   2a9a4:	pop	{r4, r5, r6, pc}
   2a9a8:	ldr	r2, [r0, #48]	; 0x30
   2a9ac:	ldr	r3, [pc, #96]	; 2aa14 <__assert_fail@plt+0x18328>
   2a9b0:	push	{r0, r1, r4, lr}
   2a9b4:	and	r3, r3, r2
   2a9b8:	cmp	r3, #0
   2a9bc:	mov	r4, r0
   2a9c0:	beq	2a9f4 <__assert_fail@plt+0x18308>
   2a9c4:	ldr	r3, [pc, #76]	; 2aa18 <__assert_fail@plt+0x1832c>
   2a9c8:	ldr	r2, [pc, #76]	; 2aa1c <__assert_fail@plt+0x18330>
   2a9cc:	str	r3, [sp]
   2a9d0:	mov	r1, #0
   2a9d4:	ldr	r3, [pc, #68]	; 2aa20 <__assert_fail@plt+0x18334>
   2a9d8:	mov	r0, #31
   2a9dc:	bl	207e4 <__assert_fail@plt+0xe0f8>
   2a9e0:	str	r0, [r4, #56]	; 0x38
   2a9e4:	adds	r0, r0, #0
   2a9e8:	movne	r0, #1
   2a9ec:	add	sp, sp, #8
   2a9f0:	pop	{r4, pc}
   2a9f4:	mov	r0, #32
   2a9f8:	bl	2bf10 <__assert_fail@plt+0x19824>
   2a9fc:	cmp	r0, #0
   2aa00:	str	r0, [r4, #56]	; 0x38
   2aa04:	beq	2a9ec <__assert_fail@plt+0x18300>
   2aa08:	bl	389ac <__assert_fail@plt+0x262c0>
   2aa0c:	mov	r0, #1
   2aa10:	b	2a9ec <__assert_fail@plt+0x18300>
   2aa14:	andeq	r0, r0, r2, lsl #2
   2aa18:	andeq	sl, r2, ip, lsl r0
   2aa1c:	andeq	sl, r2, r0, asr #2
   2aa20:	andeq	sl, r2, r4, lsl #2
   2aa24:	ldr	r2, [r0, #48]	; 0x30
   2aa28:	ldr	r3, [pc, #168]	; 2aad8 <__assert_fail@plt+0x183ec>
   2aa2c:	push	{r4, r5, r6, lr}
   2aa30:	and	r3, r3, r2
   2aa34:	cmp	r3, #0
   2aa38:	mov	r6, r0
   2aa3c:	mov	r4, r1
   2aa40:	beq	2aab4 <__assert_fail@plt+0x183c8>
   2aa44:	mov	r0, #24
   2aa48:	bl	2bf10 <__assert_fail@plt+0x19824>
   2aa4c:	subs	r5, r0, #0
   2aa50:	bne	2aa5c <__assert_fail@plt+0x18370>
   2aa54:	mov	r0, #0
   2aa58:	pop	{r4, r5, r6, pc}
   2aa5c:	ldrd	r2, [r4, #64]	; 0x40
   2aa60:	ldr	r0, [r6, #56]	; 0x38
   2aa64:	str	r4, [r5, #16]
   2aa68:	strd	r2, [r5]
   2aa6c:	ldrd	r2, [r4, #160]	; 0xa0
   2aa70:	mov	r1, r5
   2aa74:	strd	r2, [r5, #8]
   2aa78:	bl	20cb8 <__assert_fail@plt+0xe5cc>
   2aa7c:	cmp	r5, r0
   2aa80:	mov	r6, r0
   2aa84:	bne	2aa90 <__assert_fail@plt+0x183a4>
   2aa88:	mov	r0, #1
   2aa8c:	pop	{r4, r5, r6, pc}
   2aa90:	mov	r0, r5
   2aa94:	bl	2a01c <__assert_fail@plt+0x17930>
   2aa98:	cmp	r6, #0
   2aa9c:	beq	2aa54 <__assert_fail@plt+0x18368>
   2aaa0:	ldr	r3, [r6, #16]
   2aaa4:	str	r3, [r4]
   2aaa8:	mov	r3, #2
   2aaac:	strh	r3, [r4, #56]	; 0x38
   2aab0:	b	2aa88 <__assert_fail@plt+0x1839c>
   2aab4:	add	r1, r1, #64	; 0x40
   2aab8:	ldr	r0, [r0, #56]	; 0x38
   2aabc:	bl	389c8 <__assert_fail@plt+0x262dc>
   2aac0:	cmp	r0, #0
   2aac4:	beq	2aa88 <__assert_fail@plt+0x1839c>
   2aac8:	mov	r3, #2
   2aacc:	str	r4, [r4]
   2aad0:	strh	r3, [r4, #56]	; 0x38
   2aad4:	pop	{r4, r5, r6, pc}
   2aad8:	andeq	r0, r0, r2, lsl #2
   2aadc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aae0:	sub	sp, sp, #60	; 0x3c
   2aae4:	ldr	r5, [r0]
   2aae8:	mov	r4, r0
   2aaec:	str	r1, [sp, #8]
   2aaf0:	ldr	r3, [r5, #12]
   2aaf4:	cmp	r3, #0
   2aaf8:	str	r3, [sp, #4]
   2aafc:	beq	2ab50 <__assert_fail@plt+0x18464>
   2ab00:	mov	r0, r3
   2ab04:	bl	125cc <dirfd@plt>
   2ab08:	cmp	r0, #0
   2ab0c:	str	r0, [sp, #52]	; 0x34
   2ab10:	bge	2abc4 <__assert_fail@plt+0x184d8>
   2ab14:	ldr	r0, [r5, #12]
   2ab18:	mov	r6, #0
   2ab1c:	bl	126bc <closedir@plt>
   2ab20:	str	r6, [r5, #12]
   2ab24:	ldr	r3, [sp, #8]
   2ab28:	cmp	r3, #3
   2ab2c:	bne	2acf0 <__assert_fail@plt+0x18604>
   2ab30:	mov	r3, #4
   2ab34:	strh	r3, [r5, #56]	; 0x38
   2ab38:	bl	12404 <__errno_location@plt>
   2ab3c:	ldr	r3, [r0]
   2ab40:	str	r3, [r5, #32]
   2ab44:	mov	r0, r6
   2ab48:	add	sp, sp, #60	; 0x3c
   2ab4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ab50:	ldr	r3, [r0, #48]	; 0x30
   2ab54:	ldr	r1, [r5, #24]
   2ab58:	and	r2, r3, #516	; 0x204
   2ab5c:	cmp	r2, #512	; 0x200
   2ab60:	mvnne	r0, #99	; 0x63
   2ab64:	ldreq	r0, [r0, #32]
   2ab68:	ands	r2, r3, #16
   2ab6c:	beq	2ab8c <__assert_fail@plt+0x184a0>
   2ab70:	tst	r3, #1
   2ab74:	moveq	r2, #32768	; 0x8000
   2ab78:	beq	2ab8c <__assert_fail@plt+0x184a0>
   2ab7c:	ldr	r2, [r5, #48]	; 0x30
   2ab80:	cmp	r2, #0
   2ab84:	movne	r2, #32768	; 0x8000
   2ab88:	moveq	r2, #0
   2ab8c:	add	r3, sp, #52	; 0x34
   2ab90:	bl	38fa0 <__assert_fail@plt+0x268b4>
   2ab94:	cmp	r0, #0
   2ab98:	mov	r6, r0
   2ab9c:	str	r0, [r5, #12]
   2aba0:	beq	2ab24 <__assert_fail@plt+0x18438>
   2aba4:	ldrh	r3, [r5, #56]	; 0x38
   2aba8:	cmp	r3, #11
   2abac:	bne	2acf8 <__assert_fail@plt+0x1860c>
   2abb0:	mov	r2, #0
   2abb4:	mov	r1, r5
   2abb8:	mov	r0, r4
   2abbc:	bl	2a1cc <__assert_fail@plt+0x17ae0>
   2abc0:	strh	r0, [r5, #56]	; 0x38
   2abc4:	ldr	r3, [r4, #44]	; 0x2c
   2abc8:	cmp	r3, #0
   2abcc:	ldr	r3, [pc, #1824]	; 2b2f4 <__assert_fail@plt+0x18c08>
   2abd0:	mvnne	r3, #0
   2abd4:	str	r3, [sp, #36]	; 0x24
   2abd8:	ldr	r3, [sp, #4]
   2abdc:	cmp	r3, #0
   2abe0:	beq	2ad44 <__assert_fail@plt+0x18658>
   2abe4:	mov	r3, #1
   2abe8:	str	r3, [sp, #20]
   2abec:	ldr	fp, [r5, #40]	; 0x28
   2abf0:	ldr	r2, [r5, #28]
   2abf4:	sub	r3, fp, #1
   2abf8:	mov	r9, #0
   2abfc:	ldrb	r2, [r2, r3]
   2ac00:	mov	r8, r9
   2ac04:	mov	r6, r9
   2ac08:	cmp	r2, #47	; 0x2f
   2ac0c:	moveq	fp, r3
   2ac10:	ldr	r3, [r4, #48]	; 0x30
   2ac14:	str	r9, [sp, #24]
   2ac18:	ands	r3, r3, #4
   2ac1c:	streq	r3, [sp]
   2ac20:	ldrne	r3, [r4, #24]
   2ac24:	str	r9, [sp, #32]
   2ac28:	addne	r2, r3, fp
   2ac2c:	addne	r2, r2, #1
   2ac30:	strne	r2, [sp]
   2ac34:	movne	r2, #47	; 0x2f
   2ac38:	strbne	r2, [r3, fp]
   2ac3c:	add	r3, fp, #1
   2ac40:	str	r3, [sp, #16]
   2ac44:	ldr	r3, [r4, #36]	; 0x24
   2ac48:	add	r2, fp, #1
   2ac4c:	sub	r3, r3, r2
   2ac50:	str	r3, [sp, #28]
   2ac54:	ldr	r3, [r5, #48]	; 0x30
   2ac58:	add	r3, r3, #1
   2ac5c:	str	r3, [sp, #40]	; 0x28
   2ac60:	ldr	r7, [r5, #12]
   2ac64:	cmp	r7, #0
   2ac68:	bne	2ae88 <__assert_fail@plt+0x1879c>
   2ac6c:	ldr	r3, [sp, #24]
   2ac70:	cmp	r3, #0
   2ac74:	bne	2b1b4 <__assert_fail@plt+0x18ac8>
   2ac78:	ldr	r3, [r4, #48]	; 0x30
   2ac7c:	tst	r3, #4
   2ac80:	bne	2b230 <__assert_fail@plt+0x18b44>
   2ac84:	ldr	r3, [sp, #20]
   2ac88:	ldr	r2, [sp, #4]
   2ac8c:	cmp	r2, #0
   2ac90:	movne	r3, #0
   2ac94:	andeq	r3, r3, #1
   2ac98:	cmp	r3, #0
   2ac9c:	beq	2b274 <__assert_fail@plt+0x18b88>
   2aca0:	ldr	r3, [sp, #8]
   2aca4:	cmp	r8, #0
   2aca8:	cmpne	r3, #1
   2acac:	bne	2b2a0 <__assert_fail@plt+0x18bb4>
   2acb0:	ldr	r3, [r5, #48]	; 0x30
   2acb4:	cmp	r3, #0
   2acb8:	bne	2b25c <__assert_fail@plt+0x18b70>
   2acbc:	mov	r0, r4
   2acc0:	bl	2a69c <__assert_fail@plt+0x17fb0>
   2acc4:	adds	r0, r0, #0
   2acc8:	movne	r0, #1
   2accc:	cmp	r0, #0
   2acd0:	beq	2b274 <__assert_fail@plt+0x18b88>
   2acd4:	mov	r3, #7
   2acd8:	strh	r3, [r5, #56]	; 0x38
   2acdc:	ldr	r3, [r4, #48]	; 0x30
   2ace0:	orr	r3, r3, #8192	; 0x2000
   2ace4:	str	r3, [r4, #48]	; 0x30
   2ace8:	mov	r0, r6
   2acec:	bl	2a484 <__assert_fail@plt+0x17d98>
   2acf0:	mov	r6, #0
   2acf4:	b	2ab44 <__assert_fail@plt+0x18458>
   2acf8:	ldr	r3, [r4, #48]	; 0x30
   2acfc:	tst	r3, #256	; 0x100
   2ad00:	beq	2abc4 <__assert_fail@plt+0x184d8>
   2ad04:	mov	r1, r5
   2ad08:	mov	r0, r4
   2ad0c:	bl	2a888 <__assert_fail@plt+0x1819c>
   2ad10:	mov	r2, #0
   2ad14:	mov	r1, r5
   2ad18:	mov	r0, r4
   2ad1c:	bl	2a1cc <__assert_fail@plt+0x17ae0>
   2ad20:	mov	r1, r5
   2ad24:	mov	r0, r4
   2ad28:	bl	2aa24 <__assert_fail@plt+0x18338>
   2ad2c:	subs	r6, r0, #0
   2ad30:	bne	2abc4 <__assert_fail@plt+0x184d8>
   2ad34:	bl	12404 <__errno_location@plt>
   2ad38:	mov	r3, #12
   2ad3c:	str	r3, [r0]
   2ad40:	b	2ab44 <__assert_fail@plt+0x18458>
   2ad44:	ldr	r3, [sp, #8]
   2ad48:	cmp	r3, #2
   2ad4c:	beq	2ad9c <__assert_fail@plt+0x186b0>
   2ad50:	ldr	r3, [r4, #48]	; 0x30
   2ad54:	and	r3, r3, #56	; 0x38
   2ad58:	cmp	r3, #24
   2ad5c:	bne	2ae54 <__assert_fail@plt+0x18768>
   2ad60:	ldr	r3, [r5, #84]	; 0x54
   2ad64:	cmp	r3, #2
   2ad68:	bne	2ae54 <__assert_fail@plt+0x18768>
   2ad6c:	ldr	r1, [sp, #52]	; 0x34
   2ad70:	mov	r0, r5
   2ad74:	bl	2a51c <__assert_fail@plt+0x17e30>
   2ad78:	ldr	r3, [pc, #1400]	; 2b2f8 <__assert_fail@plt+0x18c0c>
   2ad7c:	cmp	r0, r3
   2ad80:	beq	2ae54 <__assert_fail@plt+0x18768>
   2ad84:	bgt	2ae3c <__assert_fail@plt+0x18750>
   2ad88:	ldr	r3, [pc, #1388]	; 2b2fc <__assert_fail@plt+0x18c10>
   2ad8c:	cmp	r0, r3
   2ad90:	beq	2ae54 <__assert_fail@plt+0x18768>
   2ad94:	cmp	r0, #0
   2ad98:	beq	2ae54 <__assert_fail@plt+0x18768>
   2ad9c:	mov	r3, #0
   2ada0:	mov	r6, r3
   2ada4:	ldr	r3, [sp, #8]
   2ada8:	sub	r7, r3, #3
   2adac:	clz	r7, r7
   2adb0:	lsr	r7, r7, #5
   2adb4:	orrs	r3, r6, r7
   2adb8:	str	r3, [sp, #20]
   2adbc:	beq	2abec <__assert_fail@plt+0x18500>
   2adc0:	ldr	r3, [r4, #48]	; 0x30
   2adc4:	tst	r3, #512	; 0x200
   2adc8:	beq	2ade0 <__assert_fail@plt+0x186f4>
   2adcc:	mov	r2, #3
   2add0:	ldr	r1, [pc, #1320]	; 2b300 <__assert_fail@plt+0x18c14>
   2add4:	ldr	r0, [sp, #52]	; 0x34
   2add8:	bl	29e08 <__assert_fail@plt+0x1771c>
   2addc:	str	r0, [sp, #52]	; 0x34
   2ade0:	ldr	r2, [sp, #52]	; 0x34
   2ade4:	cmp	r2, #0
   2ade8:	bge	2ae5c <__assert_fail@plt+0x18770>
   2adec:	tst	r6, r7
   2adf0:	bne	2ae78 <__assert_fail@plt+0x1878c>
   2adf4:	ldrh	r3, [r5, #58]	; 0x3a
   2adf8:	ldr	r0, [r5, #12]
   2adfc:	orr	r3, r3, #1
   2ae00:	strh	r3, [r5, #58]	; 0x3a
   2ae04:	bl	126bc <closedir@plt>
   2ae08:	ldr	r2, [r4, #48]	; 0x30
   2ae0c:	mov	r3, #0
   2ae10:	tst	r2, #512	; 0x200
   2ae14:	str	r3, [r5, #12]
   2ae18:	mov	r6, r3
   2ae1c:	beq	2ae30 <__assert_fail@plt+0x18744>
   2ae20:	ldr	r0, [sp, #52]	; 0x34
   2ae24:	cmp	r0, r3
   2ae28:	blt	2ae30 <__assert_fail@plt+0x18744>
   2ae2c:	bl	126a4 <close@plt>
   2ae30:	str	r6, [r5, #12]
   2ae34:	mov	r3, #0
   2ae38:	b	2abe8 <__assert_fail@plt+0x184fc>
   2ae3c:	ldr	r3, [pc, #1216]	; 2b304 <__assert_fail@plt+0x18c18>
   2ae40:	cmp	r0, r3
   2ae44:	beq	2ae54 <__assert_fail@plt+0x18768>
   2ae48:	ldr	r3, [pc, #1208]	; 2b308 <__assert_fail@plt+0x18c1c>
   2ae4c:	cmp	r0, r3
   2ae50:	b	2ad98 <__assert_fail@plt+0x186ac>
   2ae54:	mov	r3, #1
   2ae58:	b	2ada0 <__assert_fail@plt+0x186b4>
   2ae5c:	mov	r3, #0
   2ae60:	mov	r1, r5
   2ae64:	mov	r0, r4
   2ae68:	bl	2a6ec <__assert_fail@plt+0x18000>
   2ae6c:	cmp	r0, #0
   2ae70:	bne	2adec <__assert_fail@plt+0x18700>
   2ae74:	b	2abe4 <__assert_fail@plt+0x184f8>
   2ae78:	bl	12404 <__errno_location@plt>
   2ae7c:	ldr	r3, [r0]
   2ae80:	str	r3, [r5, #32]
   2ae84:	b	2adf4 <__assert_fail@plt+0x18708>
   2ae88:	bl	12404 <__errno_location@plt>
   2ae8c:	mov	r3, #0
   2ae90:	str	r0, [sp, #12]
   2ae94:	str	r3, [r0]
   2ae98:	mov	r0, r7
   2ae9c:	bl	1259c <readdir64@plt>
   2aea0:	subs	sl, r0, #0
   2aea4:	bne	2aef0 <__assert_fail@plt+0x18804>
   2aea8:	ldr	r3, [sp, #12]
   2aeac:	ldr	r3, [r3]
   2aeb0:	cmp	r3, #0
   2aeb4:	beq	2aed4 <__assert_fail@plt+0x187e8>
   2aeb8:	str	r3, [r5, #32]
   2aebc:	ldr	r3, [sp, #4]
   2aec0:	cmp	r8, #0
   2aec4:	cmpeq	r3, #0
   2aec8:	moveq	r3, #4
   2aecc:	movne	r3, #7
   2aed0:	strh	r3, [r5, #56]	; 0x38
   2aed4:	ldr	r0, [r5, #12]
   2aed8:	cmp	r0, #0
   2aedc:	beq	2ac6c <__assert_fail@plt+0x18580>
   2aee0:	bl	126bc <closedir@plt>
   2aee4:	mov	r3, #0
   2aee8:	str	r3, [r5, #12]
   2aeec:	b	2ac6c <__assert_fail@plt+0x18580>
   2aef0:	ldr	r3, [r4, #48]	; 0x30
   2aef4:	tst	r3, #32
   2aef8:	bne	2af20 <__assert_fail@plt+0x18834>
   2aefc:	ldrb	r3, [sl, #19]
   2af00:	cmp	r3, #46	; 0x2e
   2af04:	bne	2af20 <__assert_fail@plt+0x18834>
   2af08:	ldrb	r3, [sl, #20]
   2af0c:	cmp	r3, #0
   2af10:	beq	2ac60 <__assert_fail@plt+0x18574>
   2af14:	ldrh	r3, [sl, #20]
   2af18:	cmp	r3, #46	; 0x2e
   2af1c:	beq	2ac60 <__assert_fail@plt+0x18574>
   2af20:	add	r7, sl, #19
   2af24:	mov	r0, r7
   2af28:	bl	123bc <strlen@plt>
   2af2c:	mov	r1, r7
   2af30:	mov	r2, r0
   2af34:	str	r0, [sp, #44]	; 0x2c
   2af38:	mov	r0, r4
   2af3c:	bl	2a3cc <__assert_fail@plt+0x17ce0>
   2af40:	subs	r7, r0, #0
   2af44:	beq	2af84 <__assert_fail@plt+0x18898>
   2af48:	ldr	r2, [sp, #28]
   2af4c:	ldr	r3, [sp, #44]	; 0x2c
   2af50:	cmp	r2, r3
   2af54:	bhi	2b004 <__assert_fail@plt+0x18918>
   2af58:	ldr	r2, [r4, #24]
   2af5c:	add	r1, fp, #2
   2af60:	add	r1, r1, r3
   2af64:	mov	r0, r4
   2af68:	str	r2, [sp, #44]	; 0x2c
   2af6c:	str	r3, [sp, #28]
   2af70:	bl	2a93c <__assert_fail@plt+0x18250>
   2af74:	ldr	r3, [sp, #28]
   2af78:	ldr	r2, [sp, #44]	; 0x2c
   2af7c:	cmp	r0, #0
   2af80:	bne	2afcc <__assert_fail@plt+0x188e0>
   2af84:	ldr	r3, [sp, #12]
   2af88:	mov	r0, r7
   2af8c:	ldr	r8, [r3]
   2af90:	bl	2a01c <__assert_fail@plt+0x17930>
   2af94:	mov	r0, r6
   2af98:	bl	2a484 <__assert_fail@plt+0x17d98>
   2af9c:	ldr	r0, [r5, #12]
   2afa0:	bl	126bc <closedir@plt>
   2afa4:	mov	r3, #7
   2afa8:	strh	r3, [r5, #56]	; 0x38
   2afac:	ldr	r3, [r4, #48]	; 0x30
   2afb0:	mov	r6, #0
   2afb4:	orr	r3, r3, #8192	; 0x2000
   2afb8:	str	r6, [r5, #12]
   2afbc:	str	r3, [r4, #48]	; 0x30
   2afc0:	ldr	r3, [sp, #12]
   2afc4:	str	r8, [r3]
   2afc8:	b	2ab44 <__assert_fail@plt+0x18458>
   2afcc:	ldr	r1, [r4, #24]
   2afd0:	cmp	r2, r1
   2afd4:	ldreq	r0, [sp, #24]
   2afd8:	beq	2aff0 <__assert_fail@plt+0x18904>
   2afdc:	ldr	r2, [r4, #48]	; 0x30
   2afe0:	tst	r2, #4
   2afe4:	ldrne	r2, [sp, #16]
   2afe8:	addne	r2, r1, r2
   2afec:	strne	r2, [sp]
   2aff0:	ldr	r2, [r4, #36]	; 0x24
   2aff4:	ldr	r1, [sp, #16]
   2aff8:	str	r0, [sp, #24]
   2affc:	sub	r2, r2, r1
   2b000:	str	r2, [sp, #28]
   2b004:	ldr	r2, [sp, #16]
   2b008:	adds	r3, r2, r3
   2b00c:	bcc	2b054 <__assert_fail@plt+0x18968>
   2b010:	mov	r0, r7
   2b014:	bl	2a01c <__assert_fail@plt+0x17930>
   2b018:	mov	r0, r6
   2b01c:	bl	2a484 <__assert_fail@plt+0x17d98>
   2b020:	ldr	r0, [r5, #12]
   2b024:	bl	126bc <closedir@plt>
   2b028:	mov	r3, #7
   2b02c:	strh	r3, [r5, #56]	; 0x38
   2b030:	ldr	r3, [r4, #48]	; 0x30
   2b034:	ldr	r2, [sp, #12]
   2b038:	orr	r3, r3, #8192	; 0x2000
   2b03c:	mov	r6, #0
   2b040:	str	r6, [r5, #12]
   2b044:	str	r3, [r4, #48]	; 0x30
   2b048:	mov	r3, #36	; 0x24
   2b04c:	str	r3, [r2]
   2b050:	b	2ab44 <__assert_fail@plt+0x18458>
   2b054:	ldr	r2, [sp, #40]	; 0x28
   2b058:	str	r2, [r7, #48]	; 0x30
   2b05c:	ldr	r2, [r4]
   2b060:	str	r3, [r7, #40]	; 0x28
   2b064:	str	r2, [r7, #4]
   2b068:	ldrd	r2, [sl]
   2b06c:	strd	r2, [r7, #160]	; 0xa0
   2b070:	ldr	r3, [r4, #48]	; 0x30
   2b074:	tst	r3, #4
   2b078:	addeq	r3, r7, #168	; 0xa8
   2b07c:	streq	r3, [r7, #24]
   2b080:	beq	2b0a0 <__assert_fail@plt+0x189b4>
   2b084:	ldr	r3, [r7, #28]
   2b088:	ldr	r2, [r7, #52]	; 0x34
   2b08c:	str	r3, [r7, #24]
   2b090:	add	r2, r2, #1
   2b094:	add	r1, r7, #168	; 0xa8
   2b098:	ldr	r0, [sp]
   2b09c:	bl	1208c <memmove@plt>
   2b0a0:	ldr	r3, [r4, #44]	; 0x2c
   2b0a4:	cmp	r3, #0
   2b0a8:	beq	2b0b8 <__assert_fail@plt+0x189cc>
   2b0ac:	ldr	r2, [r4, #48]	; 0x30
   2b0b0:	ands	r2, r2, #1024	; 0x400
   2b0b4:	beq	2b1a0 <__assert_fail@plt+0x18ab4>
   2b0b8:	ldr	r3, [r4, #48]	; 0x30
   2b0bc:	ands	r1, r3, #8
   2b0c0:	beq	2b0e4 <__assert_fail@plt+0x189f8>
   2b0c4:	ldrb	r2, [sl, #18]
   2b0c8:	ands	r1, r2, #251	; 0xfb
   2b0cc:	beq	2b0e4 <__assert_fail@plt+0x189f8>
   2b0d0:	lsr	r3, r3, #4
   2b0d4:	and	r3, r3, #1
   2b0d8:	cmp	r2, #10
   2b0dc:	moveq	r1, r3
   2b0e0:	orrne	r1, r3, #1
   2b0e4:	mov	r3, #11
   2b0e8:	strh	r3, [r7, #56]	; 0x38
   2b0ec:	ldrb	r2, [sl, #18]
   2b0f0:	sub	r2, r2, #1
   2b0f4:	cmp	r2, r3
   2b0f8:	lslls	r2, r2, #1
   2b0fc:	ldrls	r3, [pc, #520]	; 2b30c <__assert_fail@plt+0x18c20>
   2b100:	movhi	r3, #0
   2b104:	ldrhls	r3, [r3, r2]
   2b108:	cmp	r1, #0
   2b10c:	movne	r2, #1
   2b110:	str	r3, [r7, #80]	; 0x50
   2b114:	moveq	r2, #2
   2b118:	mov	r3, #0
   2b11c:	strd	r2, [r7, #112]	; 0x70
   2b120:	mov	r3, #0
   2b124:	cmp	r6, r3
   2b128:	str	r3, [r7, #8]
   2b12c:	ldrne	r3, [sp, #32]
   2b130:	moveq	r6, r7
   2b134:	strne	r7, [r3, #8]
   2b138:	ldr	r3, [pc, #464]	; 2b310 <__assert_fail@plt+0x18c24>
   2b13c:	cmp	r8, r3
   2b140:	bne	2b188 <__assert_fail@plt+0x18a9c>
   2b144:	ldr	r3, [r4, #44]	; 0x2c
   2b148:	cmp	r3, #0
   2b14c:	bne	2b188 <__assert_fail@plt+0x18a9c>
   2b150:	ldr	r1, [sp, #52]	; 0x34
   2b154:	mov	r0, r5
   2b158:	bl	2a51c <__assert_fail@plt+0x17e30>
   2b15c:	ldr	r3, [pc, #404]	; 2b2f8 <__assert_fail@plt+0x18c0c>
   2b160:	cmp	r0, r3
   2b164:	beq	2b184 <__assert_fail@plt+0x18a98>
   2b168:	ldr	r3, [pc, #420]	; 2b314 <__assert_fail@plt+0x18c28>
   2b16c:	cmp	r0, r3
   2b170:	beq	2b184 <__assert_fail@plt+0x18a98>
   2b174:	ldr	r3, [pc, #384]	; 2b2fc <__assert_fail@plt+0x18c10>
   2b178:	cmp	r0, r3
   2b17c:	movne	r9, #1
   2b180:	bne	2b188 <__assert_fail@plt+0x18a9c>
   2b184:	mov	r9, #0
   2b188:	ldr	r3, [sp, #36]	; 0x24
   2b18c:	add	r8, r8, #1
   2b190:	cmp	r3, r8
   2b194:	bls	2ac6c <__assert_fail@plt+0x18580>
   2b198:	str	r7, [sp, #32]
   2b19c:	b	2ac60 <__assert_fail@plt+0x18574>
   2b1a0:	mov	r1, r7
   2b1a4:	mov	r0, r4
   2b1a8:	bl	2a1cc <__assert_fail@plt+0x17ae0>
   2b1ac:	strh	r0, [r7, #56]	; 0x38
   2b1b0:	b	2b120 <__assert_fail@plt+0x18a34>
   2b1b4:	ldr	r1, [r4, #24]
   2b1b8:	ldr	r3, [r4, #4]
   2b1bc:	cmp	r3, #0
   2b1c0:	bne	2b208 <__assert_fail@plt+0x18b1c>
   2b1c4:	mov	r3, r6
   2b1c8:	ldr	r2, [r3, #48]	; 0x30
   2b1cc:	cmp	r2, #0
   2b1d0:	blt	2ac78 <__assert_fail@plt+0x1858c>
   2b1d4:	ldr	r2, [r3, #24]
   2b1d8:	add	r0, r3, #168	; 0xa8
   2b1dc:	cmp	r2, r0
   2b1e0:	ldrne	r0, [r3, #28]
   2b1e4:	str	r1, [r3, #28]
   2b1e8:	subne	r2, r2, r0
   2b1ec:	addne	r2, r1, r2
   2b1f0:	strne	r2, [r3, #24]
   2b1f4:	ldr	r2, [r3, #8]
   2b1f8:	cmp	r2, #0
   2b1fc:	ldreq	r2, [r3, #4]
   2b200:	mov	r3, r2
   2b204:	b	2b1c8 <__assert_fail@plt+0x18adc>
   2b208:	ldr	r2, [r3, #24]
   2b20c:	add	r0, r3, #168	; 0xa8
   2b210:	cmp	r2, r0
   2b214:	ldrne	r0, [r3, #28]
   2b218:	str	r1, [r3, #28]
   2b21c:	subne	r2, r2, r0
   2b220:	addne	r2, r1, r2
   2b224:	strne	r2, [r3, #24]
   2b228:	ldr	r3, [r3, #8]
   2b22c:	b	2b1bc <__assert_fail@plt+0x18ad0>
   2b230:	ldr	r3, [r4, #36]	; 0x24
   2b234:	ldr	r2, [sp, #16]
   2b238:	cmp	r8, #0
   2b23c:	cmpne	r3, r2
   2b240:	ldreq	r3, [sp]
   2b244:	subeq	r3, r3, #1
   2b248:	streq	r3, [sp]
   2b24c:	ldr	r2, [sp]
   2b250:	mov	r3, #0
   2b254:	strb	r3, [r2]
   2b258:	b	2ac84 <__assert_fail@plt+0x18598>
   2b25c:	ldr	r3, [pc, #180]	; 2b318 <__assert_fail@plt+0x18c2c>
   2b260:	mvn	r2, #0
   2b264:	ldr	r1, [r5, #4]
   2b268:	mov	r0, r4
   2b26c:	bl	2a6ec <__assert_fail@plt+0x18000>
   2b270:	b	2acc4 <__assert_fail@plt+0x185d8>
   2b274:	cmp	r8, #0
   2b278:	bne	2b2a0 <__assert_fail@plt+0x18bb4>
   2b27c:	ldr	r3, [sp, #8]
   2b280:	cmp	r3, #3
   2b284:	bne	2ace8 <__assert_fail@plt+0x185fc>
   2b288:	ldrh	r3, [r5, #56]	; 0x38
   2b28c:	cmp	r3, #4
   2b290:	cmpne	r3, #7
   2b294:	movne	r3, #6
   2b298:	strhne	r3, [r5, #56]	; 0x38
   2b29c:	b	2ace8 <__assert_fail@plt+0x185fc>
   2b2a0:	cmp	r9, #0
   2b2a4:	beq	2b2cc <__assert_fail@plt+0x18be0>
   2b2a8:	ldr	r3, [pc, #108]	; 2b31c <__assert_fail@plt+0x18c30>
   2b2ac:	mov	r1, r6
   2b2b0:	str	r3, [r4, #44]	; 0x2c
   2b2b4:	mov	r2, r8
   2b2b8:	mov	r0, r4
   2b2bc:	bl	2a304 <__assert_fail@plt+0x17c18>
   2b2c0:	mov	r3, #0
   2b2c4:	str	r3, [r4, #44]	; 0x2c
   2b2c8:	mov	r6, r0
   2b2cc:	ldr	r3, [r4, #44]	; 0x2c
   2b2d0:	cmp	r3, #0
   2b2d4:	cmpne	r8, #1
   2b2d8:	bls	2ab44 <__assert_fail@plt+0x18458>
   2b2dc:	mov	r1, r6
   2b2e0:	mov	r2, r8
   2b2e4:	mov	r0, r4
   2b2e8:	bl	2a304 <__assert_fail@plt+0x17c18>
   2b2ec:	mov	r6, r0
   2b2f0:	b	2ab44 <__assert_fail@plt+0x18458>
   2b2f4:	andeq	r8, r1, r0, lsr #13
   2b2f8:	andeq	r6, r0, r9, ror #18
   2b2fc:			; <UNDEFINED> instruction: 0xff534d42
   2b300:	andeq	r0, r0, r6, lsl #8
   2b304:	andeq	r9, r0, r0, lsr #31
   2b308:	movtpl	r4, #24911	; 0x614f
   2b30c:	andeq	pc, r3, r8, lsl r1	; <UNPREDICTABLE>
   2b310:	andeq	r2, r0, r0, lsl r7
   2b314:			; <UNDEFINED> instruction: 0x01021994
   2b318:	andeq	pc, r3, r0, lsr r1	; <UNPREDICTABLE>
   2b31c:	muleq	r2, r8, r1
   2b320:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b324:	bic	r4, r1, #4080	; 0xff0
   2b328:	bic	r4, r4, #15
   2b32c:	cmp	r4, #0
   2b330:	beq	2b348 <__assert_fail@plt+0x18c5c>
   2b334:	bl	12404 <__errno_location@plt>
   2b338:	mov	r3, #22
   2b33c:	str	r3, [r0]
   2b340:	mov	r4, #0
   2b344:	b	2b364 <__assert_fail@plt+0x18c78>
   2b348:	and	r3, r1, #516	; 0x204
   2b34c:	cmp	r3, #516	; 0x204
   2b350:	mov	r5, r1
   2b354:	bne	2b370 <__assert_fail@plt+0x18c84>
   2b358:	bl	12404 <__errno_location@plt>
   2b35c:	mov	r3, #22
   2b360:	str	r3, [r0]
   2b364:	mov	r0, r4
   2b368:	add	sp, sp, #12
   2b36c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b370:	ands	r4, r1, #18
   2b374:	beq	2b358 <__assert_fail@plt+0x18c6c>
   2b378:	mov	fp, r0
   2b37c:	mov	r1, #96	; 0x60
   2b380:	mov	r0, #1
   2b384:	mov	sl, r2
   2b388:	bl	29b08 <__assert_fail@plt+0x1741c>
   2b38c:	subs	r4, r0, #0
   2b390:	beq	2b364 <__assert_fail@plt+0x18c78>
   2b394:	tst	r5, #2
   2b398:	bicne	r3, r5, #512	; 0x200
   2b39c:	orrne	r3, r3, #4
   2b3a0:	sub	r7, fp, #4
   2b3a4:	mov	r6, #0
   2b3a8:	strne	r3, [r4, #48]	; 0x30
   2b3ac:	mvn	r3, #99	; 0x63
   2b3b0:	str	sl, [r4, #44]	; 0x2c
   2b3b4:	streq	r5, [r4, #48]	; 0x30
   2b3b8:	str	r3, [r4, #32]
   2b3bc:	ldr	r9, [r7, #4]!
   2b3c0:	cmp	r9, #0
   2b3c4:	bne	2b4ec <__assert_fail@plt+0x18e00>
   2b3c8:	add	r1, r6, #1
   2b3cc:	cmp	r1, #4096	; 0x1000
   2b3d0:	movcc	r1, #4096	; 0x1000
   2b3d4:	mov	r0, r4
   2b3d8:	bl	2a93c <__assert_fail@plt+0x18250>
   2b3dc:	subs	r3, r0, #0
   2b3e0:	str	r3, [sp]
   2b3e4:	beq	2b600 <__assert_fail@plt+0x18f14>
   2b3e8:	ldr	r7, [fp]
   2b3ec:	cmp	r7, #0
   2b3f0:	beq	2b414 <__assert_fail@plt+0x18d28>
   2b3f4:	mov	r2, r9
   2b3f8:	ldr	r1, [pc, #524]	; 2b60c <__assert_fail@plt+0x18f20>
   2b3fc:	mov	r0, r4
   2b400:	bl	2a3cc <__assert_fail@plt+0x17ce0>
   2b404:	subs	r7, r0, #0
   2b408:	beq	2b5f8 <__assert_fail@plt+0x18f0c>
   2b40c:	mvn	r3, #0
   2b410:	str	r3, [r7, #48]	; 0x30
   2b414:	cmp	sl, #0
   2b418:	lsr	r5, r5, #11
   2b41c:	ldrne	r8, [r4, #48]	; 0x30
   2b420:	eor	r5, r5, #1
   2b424:	lsrne	r8, r8, #10
   2b428:	andne	r3, r8, #1
   2b42c:	mov	r8, #0
   2b430:	mov	r9, r8
   2b434:	mov	r6, r8
   2b438:	strne	r3, [sp]
   2b43c:	and	r3, r5, #1
   2b440:	str	r3, [sp, #4]
   2b444:	ldr	r5, [fp, r9, lsl #2]
   2b448:	cmp	r5, #0
   2b44c:	bne	2b500 <__assert_fail@plt+0x18e14>
   2b450:	cmp	sl, #0
   2b454:	cmpne	r9, #1
   2b458:	bls	2b470 <__assert_fail@plt+0x18d84>
   2b45c:	mov	r1, r6
   2b460:	mov	r2, r9
   2b464:	mov	r0, r4
   2b468:	bl	2a304 <__assert_fail@plt+0x17c18>
   2b46c:	mov	r6, r0
   2b470:	mov	r2, #0
   2b474:	ldr	r1, [pc, #400]	; 2b60c <__assert_fail@plt+0x18f20>
   2b478:	mov	r0, r4
   2b47c:	bl	2a3cc <__assert_fail@plt+0x17ce0>
   2b480:	cmp	r0, #0
   2b484:	str	r0, [r4]
   2b488:	beq	2b5e8 <__assert_fail@plt+0x18efc>
   2b48c:	mov	r3, #9
   2b490:	strh	r3, [r0, #56]	; 0x38
   2b494:	mov	r3, #1
   2b498:	str	r6, [r0, #8]
   2b49c:	str	r3, [r0, #48]	; 0x30
   2b4a0:	mov	r0, r4
   2b4a4:	bl	2a9a8 <__assert_fail@plt+0x182bc>
   2b4a8:	cmp	r0, #0
   2b4ac:	beq	2b5e8 <__assert_fail@plt+0x18efc>
   2b4b0:	ldr	r3, [r4, #48]	; 0x30
   2b4b4:	tst	r3, #516	; 0x204
   2b4b8:	bne	2b4dc <__assert_fail@plt+0x18df0>
   2b4bc:	ldr	r1, [pc, #332]	; 2b610 <__assert_fail@plt+0x18f24>
   2b4c0:	mov	r0, r4
   2b4c4:	bl	2a440 <__assert_fail@plt+0x17d54>
   2b4c8:	cmp	r0, #0
   2b4cc:	str	r0, [r4, #28]
   2b4d0:	ldrlt	r3, [r4, #48]	; 0x30
   2b4d4:	orrlt	r3, r3, #4
   2b4d8:	strlt	r3, [r4, #48]	; 0x30
   2b4dc:	mvn	r1, #0
   2b4e0:	add	r0, r4, #60	; 0x3c
   2b4e4:	bl	38bbc <__assert_fail@plt+0x264d0>
   2b4e8:	b	2b364 <__assert_fail@plt+0x18c78>
   2b4ec:	mov	r0, r9
   2b4f0:	bl	123bc <strlen@plt>
   2b4f4:	cmp	r6, r0
   2b4f8:	movcc	r6, r0
   2b4fc:	b	2b3bc <__assert_fail@plt+0x18cd0>
   2b500:	mov	r0, r5
   2b504:	bl	123bc <strlen@plt>
   2b508:	ldr	r1, [sp, #4]
   2b50c:	cmp	r0, #2
   2b510:	movls	r1, #0
   2b514:	andhi	r1, r1, #1
   2b518:	cmp	r1, #0
   2b51c:	mov	r2, r0
   2b520:	beq	2b550 <__assert_fail@plt+0x18e64>
   2b524:	sub	r0, r0, #1
   2b528:	add	r1, r5, r0
   2b52c:	ldrb	r0, [r5, r0]
   2b530:	cmp	r0, #47	; 0x2f
   2b534:	bne	2b550 <__assert_fail@plt+0x18e64>
   2b538:	ldrb	r0, [r1, #-1]!
   2b53c:	cmp	r0, #47	; 0x2f
   2b540:	bne	2b550 <__assert_fail@plt+0x18e64>
   2b544:	sub	r2, r2, #1
   2b548:	cmp	r2, #1
   2b54c:	bne	2b538 <__assert_fail@plt+0x18e4c>
   2b550:	mov	r1, r5
   2b554:	mov	r0, r4
   2b558:	bl	2a3cc <__assert_fail@plt+0x17ce0>
   2b55c:	subs	r5, r0, #0
   2b560:	beq	2b5e8 <__assert_fail@plt+0x18efc>
   2b564:	mov	r2, #0
   2b568:	str	r2, [r5, #48]	; 0x30
   2b56c:	add	r2, r5, #168	; 0xa8
   2b570:	str	r2, [r5, #24]
   2b574:	ldr	r2, [sp]
   2b578:	str	r7, [r5, #4]
   2b57c:	cmp	r6, #0
   2b580:	moveq	r2, #0
   2b584:	andne	r2, r2, #1
   2b588:	cmp	r2, #0
   2b58c:	beq	2b5d4 <__assert_fail@plt+0x18ee8>
   2b590:	mov	r0, #2
   2b594:	mov	r1, #0
   2b598:	mov	r2, #11
   2b59c:	strh	r2, [r5, #56]	; 0x38
   2b5a0:	strd	r0, [r5, #112]	; 0x70
   2b5a4:	cmp	sl, #0
   2b5a8:	strne	r6, [r5, #8]
   2b5ac:	bne	2b5c8 <__assert_fail@plt+0x18edc>
   2b5b0:	cmp	r6, #0
   2b5b4:	str	sl, [r5, #8]
   2b5b8:	moveq	r8, r5
   2b5bc:	strne	r5, [r8, #8]
   2b5c0:	movne	r8, r5
   2b5c4:	movne	r5, r6
   2b5c8:	add	r9, r9, #1
   2b5cc:	mov	r6, r5
   2b5d0:	b	2b444 <__assert_fail@plt+0x18d58>
   2b5d4:	mov	r1, r5
   2b5d8:	mov	r0, r4
   2b5dc:	bl	2a1cc <__assert_fail@plt+0x17ae0>
   2b5e0:	strh	r0, [r5, #56]	; 0x38
   2b5e4:	b	2b5a4 <__assert_fail@plt+0x18eb8>
   2b5e8:	mov	r0, r6
   2b5ec:	bl	2a484 <__assert_fail@plt+0x17d98>
   2b5f0:	mov	r0, r7
   2b5f4:	bl	2a01c <__assert_fail@plt+0x17930>
   2b5f8:	ldr	r0, [r4, #24]
   2b5fc:	bl	2a01c <__assert_fail@plt+0x17930>
   2b600:	mov	r0, r4
   2b604:	bl	2a01c <__assert_fail@plt+0x17930>
   2b608:	b	2b340 <__assert_fail@plt+0x18c54>
   2b60c:	ldrdeq	fp, [r3], -pc	; <UNPREDICTABLE>
   2b610:	andeq	sl, r3, r1, asr #14
   2b614:	push	{r4, r5, r6, lr}
   2b618:	mov	r4, r0
   2b61c:	ldr	r0, [r0]
   2b620:	cmp	r0, #0
   2b624:	bne	2b6bc <__assert_fail@plt+0x18fd0>
   2b628:	ldr	r0, [r4, #4]
   2b62c:	cmp	r0, #0
   2b630:	beq	2b638 <__assert_fail@plt+0x18f4c>
   2b634:	bl	2a484 <__assert_fail@plt+0x17d98>
   2b638:	ldr	r0, [r4, #8]
   2b63c:	bl	2a01c <__assert_fail@plt+0x17930>
   2b640:	ldr	r0, [r4, #24]
   2b644:	bl	2a01c <__assert_fail@plt+0x17930>
   2b648:	ldr	r3, [r4, #48]	; 0x30
   2b64c:	tst	r3, #512	; 0x200
   2b650:	beq	2b6e8 <__assert_fail@plt+0x18ffc>
   2b654:	ldr	r0, [r4, #32]
   2b658:	cmp	r0, #0
   2b65c:	bge	2b6d0 <__assert_fail@plt+0x18fe4>
   2b660:	mov	r5, #0
   2b664:	add	r0, r4, #60	; 0x3c
   2b668:	bl	2a4e8 <__assert_fail@plt+0x17dfc>
   2b66c:	ldr	r0, [r4, #52]	; 0x34
   2b670:	cmp	r0, #0
   2b674:	beq	2b67c <__assert_fail@plt+0x18f90>
   2b678:	bl	20950 <__assert_fail@plt+0xe264>
   2b67c:	mov	r0, r4
   2b680:	bl	2a4bc <__assert_fail@plt+0x17dd0>
   2b684:	mov	r0, r4
   2b688:	bl	2a01c <__assert_fail@plt+0x17930>
   2b68c:	cmp	r5, #0
   2b690:	beq	2b6a0 <__assert_fail@plt+0x18fb4>
   2b694:	bl	12404 <__errno_location@plt>
   2b698:	str	r5, [r0]
   2b69c:	mvn	r5, #0
   2b6a0:	mov	r0, r5
   2b6a4:	pop	{r4, r5, r6, pc}
   2b6a8:	ldr	r5, [r0, #8]
   2b6ac:	cmp	r5, #0
   2b6b0:	ldreq	r5, [r0, #4]
   2b6b4:	bl	2a01c <__assert_fail@plt+0x17930>
   2b6b8:	mov	r0, r5
   2b6bc:	ldr	r3, [r0, #48]	; 0x30
   2b6c0:	cmp	r3, #0
   2b6c4:	bge	2b6a8 <__assert_fail@plt+0x18fbc>
   2b6c8:	bl	2a01c <__assert_fail@plt+0x17930>
   2b6cc:	b	2b628 <__assert_fail@plt+0x18f3c>
   2b6d0:	bl	126a4 <close@plt>
   2b6d4:	cmp	r0, #0
   2b6d8:	beq	2b660 <__assert_fail@plt+0x18f74>
   2b6dc:	bl	12404 <__errno_location@plt>
   2b6e0:	ldr	r5, [r0]
   2b6e4:	b	2b664 <__assert_fail@plt+0x18f78>
   2b6e8:	tst	r3, #4
   2b6ec:	bne	2b660 <__assert_fail@plt+0x18f74>
   2b6f0:	ldr	r0, [r4, #28]
   2b6f4:	bl	125d8 <fchdir@plt>
   2b6f8:	subs	r5, r0, #0
   2b6fc:	beq	2b708 <__assert_fail@plt+0x1901c>
   2b700:	bl	12404 <__errno_location@plt>
   2b704:	ldr	r5, [r0]
   2b708:	ldr	r0, [r4, #28]
   2b70c:	bl	126a4 <close@plt>
   2b710:	clz	r3, r5
   2b714:	lsr	r3, r3, #5
   2b718:	cmp	r0, #0
   2b71c:	moveq	r3, #0
   2b720:	cmp	r3, #0
   2b724:	beq	2b664 <__assert_fail@plt+0x18f78>
   2b728:	b	2b6dc <__assert_fail@plt+0x18ff0>
   2b72c:	push	{r4, r5, r6, r7, r8, lr}
   2b730:	ldr	r4, [r0]
   2b734:	cmp	r4, #0
   2b738:	beq	2ba38 <__assert_fail@plt+0x1934c>
   2b73c:	ldr	r1, [r0, #48]	; 0x30
   2b740:	mov	r5, r0
   2b744:	ands	r2, r1, #8192	; 0x2000
   2b748:	bne	2ba38 <__assert_fail@plt+0x1934c>
   2b74c:	ldrh	r3, [r4, #60]	; 0x3c
   2b750:	mov	ip, #3
   2b754:	strh	ip, [r4, #60]	; 0x3c
   2b758:	cmp	r3, #1
   2b75c:	bne	2b774 <__assert_fail@plt+0x19088>
   2b760:	mov	r1, r4
   2b764:	bl	2a1cc <__assert_fail@plt+0x17ae0>
   2b768:	strh	r0, [r4, #56]	; 0x38
   2b76c:	mov	r0, r4
   2b770:	pop	{r4, r5, r6, r7, r8, pc}
   2b774:	cmp	r3, #2
   2b778:	ldrh	r2, [r4, #56]	; 0x38
   2b77c:	bne	2b85c <__assert_fail@plt+0x19170>
   2b780:	sub	ip, r2, #12
   2b784:	cmp	ip, #1
   2b788:	bhi	2b85c <__assert_fail@plt+0x19170>
   2b78c:	mov	r2, #1
   2b790:	mov	r1, r4
   2b794:	bl	2a1cc <__assert_fail@plt+0x17ae0>
   2b798:	cmp	r0, #1
   2b79c:	strh	r0, [r4, #56]	; 0x38
   2b7a0:	bne	2b7e8 <__assert_fail@plt+0x190fc>
   2b7a4:	ldr	r3, [r5, #48]	; 0x30
   2b7a8:	tst	r3, #4
   2b7ac:	bne	2b7e8 <__assert_fail@plt+0x190fc>
   2b7b0:	ldr	r1, [pc, #1332]	; 2bcec <__assert_fail@plt+0x19600>
   2b7b4:	mov	r0, r5
   2b7b8:	bl	2a440 <__assert_fail@plt+0x17d54>
   2b7bc:	cmp	r0, #0
   2b7c0:	str	r0, [r4, #36]	; 0x24
   2b7c4:	ldrhge	r3, [r4, #58]	; 0x3a
   2b7c8:	orrge	r3, r3, #2
   2b7cc:	strhge	r3, [r4, #58]	; 0x3a
   2b7d0:	bge	2b7e8 <__assert_fail@plt+0x190fc>
   2b7d4:	bl	12404 <__errno_location@plt>
   2b7d8:	ldr	r3, [r0]
   2b7dc:	str	r3, [r4, #32]
   2b7e0:	mov	r3, #7
   2b7e4:	strh	r3, [r4, #56]	; 0x38
   2b7e8:	ldrh	r3, [r4, #56]	; 0x38
   2b7ec:	str	r4, [r5]
   2b7f0:	cmp	r3, #11
   2b7f4:	bne	2b81c <__assert_fail@plt+0x19130>
   2b7f8:	ldrd	r2, [r4, #112]	; 0x70
   2b7fc:	cmp	r3, #0
   2b800:	cmpeq	r2, #2
   2b804:	bne	2bb8c <__assert_fail@plt+0x194a0>
   2b808:	mov	r2, #0
   2b80c:	mov	r1, r4
   2b810:	mov	r0, r5
   2b814:	bl	2a1cc <__assert_fail@plt+0x17ae0>
   2b818:	strh	r0, [r4, #56]	; 0x38
   2b81c:	ldrh	r3, [r4, #56]	; 0x38
   2b820:	cmp	r3, #1
   2b824:	bne	2b76c <__assert_fail@plt+0x19080>
   2b828:	ldr	r3, [r4, #48]	; 0x30
   2b82c:	cmp	r3, #0
   2b830:	ldrdeq	r2, [r4, #64]	; 0x40
   2b834:	strdeq	r2, [r5, #16]
   2b838:	mov	r0, r5
   2b83c:	mov	r1, r4
   2b840:	bl	2aa24 <__assert_fail@plt+0x18338>
   2b844:	subs	r5, r0, #0
   2b848:	bne	2b76c <__assert_fail@plt+0x19080>
   2b84c:	bl	12404 <__errno_location@plt>
   2b850:	mov	r3, #12
   2b854:	str	r3, [r0]
   2b858:	b	2ba38 <__assert_fail@plt+0x1934c>
   2b85c:	cmp	r2, #1
   2b860:	movne	r6, r4
   2b864:	bne	2b9ec <__assert_fail@plt+0x19300>
   2b868:	cmp	r3, #4
   2b86c:	beq	2b88c <__assert_fail@plt+0x191a0>
   2b870:	tst	r1, #64	; 0x40
   2b874:	beq	2b8d0 <__assert_fail@plt+0x191e4>
   2b878:	ldrd	r6, [r4, #64]	; 0x40
   2b87c:	ldrd	r2, [r5, #16]
   2b880:	cmp	r7, r3
   2b884:	cmpeq	r6, r2
   2b888:	beq	2b8d0 <__assert_fail@plt+0x191e4>
   2b88c:	ldrh	r3, [r4, #58]	; 0x3a
   2b890:	tst	r3, #2
   2b894:	beq	2b8a0 <__assert_fail@plt+0x191b4>
   2b898:	ldr	r0, [r4, #36]	; 0x24
   2b89c:	bl	126a4 <close@plt>
   2b8a0:	ldr	r0, [r5, #4]
   2b8a4:	cmp	r0, #0
   2b8a8:	beq	2b8b8 <__assert_fail@plt+0x191cc>
   2b8ac:	bl	2a484 <__assert_fail@plt+0x17d98>
   2b8b0:	mov	r3, #0
   2b8b4:	str	r3, [r5, #4]
   2b8b8:	mov	r3, #6
   2b8bc:	strh	r3, [r4, #56]	; 0x38
   2b8c0:	mov	r1, r4
   2b8c4:	mov	r0, r5
   2b8c8:	bl	2a888 <__assert_fail@plt+0x1819c>
   2b8cc:	b	2b76c <__assert_fail@plt+0x19080>
   2b8d0:	ldr	r0, [r5, #4]
   2b8d4:	cmp	r0, #0
   2b8d8:	beq	2b8f8 <__assert_fail@plt+0x1920c>
   2b8dc:	tst	r1, #4096	; 0x1000
   2b8e0:	beq	2b8f8 <__assert_fail@plt+0x1920c>
   2b8e4:	bic	r1, r1, #4096	; 0x1000
   2b8e8:	str	r1, [r5, #48]	; 0x30
   2b8ec:	bl	2a484 <__assert_fail@plt+0x17d98>
   2b8f0:	mov	r3, #0
   2b8f4:	str	r3, [r5, #4]
   2b8f8:	ldr	r3, [r5, #4]
   2b8fc:	cmp	r3, #0
   2b900:	beq	2b9a8 <__assert_fail@plt+0x192bc>
   2b904:	ldr	r3, [r4, #24]
   2b908:	mvn	r2, #0
   2b90c:	mov	r1, r4
   2b910:	mov	r0, r5
   2b914:	bl	2a6ec <__assert_fail@plt+0x18000>
   2b918:	cmp	r0, #0
   2b91c:	beq	2b944 <__assert_fail@plt+0x19258>
   2b920:	bl	12404 <__errno_location@plt>
   2b924:	ldr	r3, [r0]
   2b928:	str	r3, [r4, #32]
   2b92c:	ldrh	r3, [r4, #58]	; 0x3a
   2b930:	orr	r3, r3, #1
   2b934:	strh	r3, [r4, #58]	; 0x3a
   2b938:	ldr	r3, [r5, #4]
   2b93c:	cmp	r3, #0
   2b940:	bne	2b994 <__assert_fail@plt+0x192a8>
   2b944:	mov	r3, #0
   2b948:	ldr	r4, [r5, #4]
   2b94c:	str	r3, [r5, #4]
   2b950:	ldr	r0, [r4, #4]
   2b954:	ldr	r2, [r5, #24]
   2b958:	ldr	r1, [r0, #40]	; 0x28
   2b95c:	ldr	r0, [r0, #28]
   2b960:	sub	r3, r1, #1
   2b964:	ldrb	r0, [r0, r3]
   2b968:	cmp	r0, #47	; 0x2f
   2b96c:	movne	r3, r1
   2b970:	mov	r1, #47	; 0x2f
   2b974:	add	r0, r2, r3
   2b978:	strb	r1, [r2, r3]
   2b97c:	ldr	r2, [r4, #52]	; 0x34
   2b980:	add	r1, r4, #168	; 0xa8
   2b984:	add	r2, r2, #1
   2b988:	add	r0, r0, #1
   2b98c:	bl	1208c <memmove@plt>
   2b990:	b	2b7e8 <__assert_fail@plt+0x190fc>
   2b994:	ldr	r2, [r3, #4]
   2b998:	ldr	r2, [r2, #24]
   2b99c:	str	r2, [r3, #24]
   2b9a0:	ldr	r3, [r3, #8]
   2b9a4:	b	2b93c <__assert_fail@plt+0x19250>
   2b9a8:	mov	r1, #3
   2b9ac:	mov	r0, r5
   2b9b0:	bl	2aadc <__assert_fail@plt+0x183f0>
   2b9b4:	cmp	r0, #0
   2b9b8:	str	r0, [r5, #4]
   2b9bc:	bne	2b944 <__assert_fail@plt+0x19258>
   2b9c0:	ldr	r3, [r5, #48]	; 0x30
   2b9c4:	tst	r3, #8192	; 0x2000
   2b9c8:	bne	2ba38 <__assert_fail@plt+0x1934c>
   2b9cc:	ldr	r3, [r4, #32]
   2b9d0:	cmp	r3, #0
   2b9d4:	beq	2b8c0 <__assert_fail@plt+0x191d4>
   2b9d8:	ldrh	r3, [r4, #56]	; 0x38
   2b9dc:	cmp	r3, #4
   2b9e0:	beq	2b8c0 <__assert_fail@plt+0x191d4>
   2b9e4:	mov	r3, #7
   2b9e8:	b	2b8bc <__assert_fail@plt+0x191d0>
   2b9ec:	ldr	r4, [r4, #8]
   2b9f0:	cmp	r4, #0
   2b9f4:	bne	2ba4c <__assert_fail@plt+0x19360>
   2b9f8:	ldr	r3, [r6, #4]
   2b9fc:	ldr	r2, [r3, #12]
   2ba00:	cmp	r2, #0
   2ba04:	beq	2bb9c <__assert_fail@plt+0x194b0>
   2ba08:	str	r3, [r5]
   2ba0c:	ldr	r2, [r5, #24]
   2ba10:	ldr	r3, [r3, #40]	; 0x28
   2ba14:	mov	r1, #3
   2ba18:	mov	r0, r5
   2ba1c:	strb	r4, [r2, r3]
   2ba20:	bl	2aadc <__assert_fail@plt+0x183f0>
   2ba24:	subs	r4, r0, #0
   2ba28:	bne	2ba40 <__assert_fail@plt+0x19354>
   2ba2c:	ldr	r3, [r5, #48]	; 0x30
   2ba30:	tst	r3, #8192	; 0x2000
   2ba34:	beq	2bb9c <__assert_fail@plt+0x194b0>
   2ba38:	mov	r4, #0
   2ba3c:	b	2b76c <__assert_fail@plt+0x19080>
   2ba40:	mov	r0, r6
   2ba44:	bl	2a01c <__assert_fail@plt+0x17930>
   2ba48:	b	2b950 <__assert_fail@plt+0x19264>
   2ba4c:	mov	r0, r6
   2ba50:	str	r4, [r5]
   2ba54:	bl	2a01c <__assert_fail@plt+0x17930>
   2ba58:	ldr	r6, [r4, #48]	; 0x30
   2ba5c:	cmp	r6, #0
   2ba60:	bne	2bb08 <__assert_fail@plt+0x1941c>
   2ba64:	mov	r0, r5
   2ba68:	bl	2a69c <__assert_fail@plt+0x17fb0>
   2ba6c:	cmp	r0, #0
   2ba70:	ldrne	r3, [r5, #48]	; 0x30
   2ba74:	orrne	r3, r3, #8192	; 0x2000
   2ba78:	strne	r3, [r5, #48]	; 0x30
   2ba7c:	bne	2ba38 <__assert_fail@plt+0x1934c>
   2ba80:	mov	r0, r5
   2ba84:	bl	2a4bc <__assert_fail@plt+0x17dd0>
   2ba88:	ldr	r2, [r4, #52]	; 0x34
   2ba8c:	add	r7, r4, #168	; 0xa8
   2ba90:	str	r2, [r4, #40]	; 0x28
   2ba94:	mov	r1, r7
   2ba98:	add	r2, r2, #1
   2ba9c:	ldr	r0, [r5, #24]
   2baa0:	bl	1208c <memmove@plt>
   2baa4:	mov	r1, #47	; 0x2f
   2baa8:	mov	r0, r7
   2baac:	bl	12548 <strrchr@plt>
   2bab0:	cmp	r0, #0
   2bab4:	beq	2baf0 <__assert_fail@plt+0x19404>
   2bab8:	cmp	r7, r0
   2babc:	bne	2bacc <__assert_fail@plt+0x193e0>
   2bac0:	ldrb	r3, [r4, #169]	; 0xa9
   2bac4:	cmp	r3, #0
   2bac8:	beq	2baf0 <__assert_fail@plt+0x19404>
   2bacc:	add	r6, r0, #1
   2bad0:	mov	r0, r6
   2bad4:	bl	123bc <strlen@plt>
   2bad8:	mov	r1, r6
   2badc:	mov	r8, r0
   2bae0:	add	r2, r0, #1
   2bae4:	mov	r0, r7
   2bae8:	bl	1208c <memmove@plt>
   2baec:	str	r8, [r4, #52]	; 0x34
   2baf0:	ldr	r3, [r5, #24]
   2baf4:	mov	r0, r5
   2baf8:	str	r3, [r4, #28]
   2bafc:	str	r3, [r4, #24]
   2bb00:	bl	2a9a8 <__assert_fail@plt+0x182bc>
   2bb04:	b	2b7e8 <__assert_fail@plt+0x190fc>
   2bb08:	ldrh	r3, [r4, #60]	; 0x3c
   2bb0c:	mov	r6, r4
   2bb10:	cmp	r3, #4
   2bb14:	beq	2b9ec <__assert_fail@plt+0x19300>
   2bb18:	cmp	r3, #2
   2bb1c:	bne	2b950 <__assert_fail@plt+0x19264>
   2bb20:	mov	r2, #1
   2bb24:	mov	r1, r4
   2bb28:	mov	r0, r5
   2bb2c:	bl	2a1cc <__assert_fail@plt+0x17ae0>
   2bb30:	cmp	r0, #1
   2bb34:	strh	r0, [r4, #56]	; 0x38
   2bb38:	bne	2bb80 <__assert_fail@plt+0x19494>
   2bb3c:	ldr	r3, [r5, #48]	; 0x30
   2bb40:	tst	r3, #4
   2bb44:	bne	2bb80 <__assert_fail@plt+0x19494>
   2bb48:	ldr	r1, [pc, #412]	; 2bcec <__assert_fail@plt+0x19600>
   2bb4c:	mov	r0, r5
   2bb50:	bl	2a440 <__assert_fail@plt+0x17d54>
   2bb54:	cmp	r0, #0
   2bb58:	str	r0, [r4, #36]	; 0x24
   2bb5c:	ldrhge	r3, [r4, #58]	; 0x3a
   2bb60:	orrge	r3, r3, #2
   2bb64:	strhge	r3, [r4, #58]	; 0x3a
   2bb68:	bge	2bb80 <__assert_fail@plt+0x19494>
   2bb6c:	bl	12404 <__errno_location@plt>
   2bb70:	ldr	r3, [r0]
   2bb74:	str	r3, [r4, #32]
   2bb78:	mov	r3, #7
   2bb7c:	strh	r3, [r4, #56]	; 0x38
   2bb80:	mov	r3, #3
   2bb84:	strh	r3, [r4, #60]	; 0x3c
   2bb88:	b	2b950 <__assert_fail@plt+0x19264>
   2bb8c:	cmp	r3, #0
   2bb90:	cmpeq	r2, #1
   2bb94:	beq	2b81c <__assert_fail@plt+0x19130>
   2bb98:	bl	12698 <abort@plt>
   2bb9c:	ldr	r4, [r6, #4]
   2bba0:	mov	r0, r6
   2bba4:	str	r4, [r5]
   2bba8:	bl	2a01c <__assert_fail@plt+0x17930>
   2bbac:	ldr	r3, [r4, #48]	; 0x30
   2bbb0:	cmn	r3, #1
   2bbb4:	bne	2bbd4 <__assert_fail@plt+0x194e8>
   2bbb8:	mov	r0, r4
   2bbbc:	bl	2a01c <__assert_fail@plt+0x17930>
   2bbc0:	bl	12404 <__errno_location@plt>
   2bbc4:	mov	r4, #0
   2bbc8:	str	r4, [r0]
   2bbcc:	str	r4, [r5]
   2bbd0:	b	2b76c <__assert_fail@plt+0x19080>
   2bbd4:	ldrh	r3, [r4, #56]	; 0x38
   2bbd8:	cmp	r3, #11
   2bbdc:	beq	2bb98 <__assert_fail@plt+0x194ac>
   2bbe0:	ldr	r3, [r4, #40]	; 0x28
   2bbe4:	ldr	r2, [r5, #24]
   2bbe8:	mov	r1, #0
   2bbec:	strb	r1, [r2, r3]
   2bbf0:	ldr	r3, [r4, #48]	; 0x30
   2bbf4:	cmp	r3, r1
   2bbf8:	bne	2bc28 <__assert_fail@plt+0x1953c>
   2bbfc:	mov	r0, r5
   2bc00:	bl	2a69c <__assert_fail@plt+0x17fb0>
   2bc04:	cmp	r0, #0
   2bc08:	beq	2bc60 <__assert_fail@plt+0x19574>
   2bc0c:	bl	12404 <__errno_location@plt>
   2bc10:	ldr	r3, [r0]
   2bc14:	str	r3, [r4, #32]
   2bc18:	ldr	r3, [r5, #48]	; 0x30
   2bc1c:	orr	r3, r3, #8192	; 0x2000
   2bc20:	str	r3, [r5, #48]	; 0x30
   2bc24:	b	2bc60 <__assert_fail@plt+0x19574>
   2bc28:	ldrh	r3, [r4, #58]	; 0x3a
   2bc2c:	tst	r3, #2
   2bc30:	beq	2bccc <__assert_fail@plt+0x195e0>
   2bc34:	ldr	r3, [r5, #48]	; 0x30
   2bc38:	tst	r3, #4
   2bc3c:	bne	2bc58 <__assert_fail@plt+0x1956c>
   2bc40:	tst	r3, #512	; 0x200
   2bc44:	beq	2bca0 <__assert_fail@plt+0x195b4>
   2bc48:	mov	r2, #1
   2bc4c:	ldr	r1, [r4, #36]	; 0x24
   2bc50:	mov	r0, r5
   2bc54:	bl	2a620 <__assert_fail@plt+0x17f34>
   2bc58:	ldr	r0, [r4, #36]	; 0x24
   2bc5c:	bl	126a4 <close@plt>
   2bc60:	ldrh	r3, [r4, #56]	; 0x38
   2bc64:	cmp	r3, #2
   2bc68:	beq	2bc90 <__assert_fail@plt+0x195a4>
   2bc6c:	ldr	r3, [r4, #32]
   2bc70:	cmp	r3, #0
   2bc74:	movne	r3, #7
   2bc78:	moveq	r3, #6
   2bc7c:	strh	r3, [r4, #56]	; 0x38
   2bc80:	bne	2bc90 <__assert_fail@plt+0x195a4>
   2bc84:	mov	r1, r4
   2bc88:	mov	r0, r5
   2bc8c:	bl	2a888 <__assert_fail@plt+0x1819c>
   2bc90:	ldr	r3, [r5, #48]	; 0x30
   2bc94:	tst	r3, #8192	; 0x2000
   2bc98:	beq	2b76c <__assert_fail@plt+0x19080>
   2bc9c:	b	2ba38 <__assert_fail@plt+0x1934c>
   2bca0:	ldr	r0, [r4, #36]	; 0x24
   2bca4:	bl	125d8 <fchdir@plt>
   2bca8:	cmp	r0, #0
   2bcac:	beq	2bc58 <__assert_fail@plt+0x1956c>
   2bcb0:	bl	12404 <__errno_location@plt>
   2bcb4:	ldr	r3, [r0]
   2bcb8:	str	r3, [r4, #32]
   2bcbc:	ldr	r3, [r5, #48]	; 0x30
   2bcc0:	orr	r3, r3, #8192	; 0x2000
   2bcc4:	str	r3, [r5, #48]	; 0x30
   2bcc8:	b	2bc58 <__assert_fail@plt+0x1956c>
   2bccc:	tst	r3, #1
   2bcd0:	bne	2bc60 <__assert_fail@plt+0x19574>
   2bcd4:	ldr	r3, [pc, #20]	; 2bcf0 <__assert_fail@plt+0x19604>
   2bcd8:	mvn	r2, #0
   2bcdc:	ldr	r1, [r4, #4]
   2bce0:	mov	r0, r5
   2bce4:	bl	2a6ec <__assert_fail@plt+0x18000>
   2bce8:	b	2bc04 <__assert_fail@plt+0x19518>
   2bcec:	andeq	sl, r3, r1, asr #14
   2bcf0:	andeq	pc, r3, r0, lsr r1	; <UNPREDICTABLE>
   2bcf4:	cmp	r2, #4
   2bcf8:	bls	2bd14 <__assert_fail@plt+0x19628>
   2bcfc:	push	{r4, lr}
   2bd00:	bl	12404 <__errno_location@plt>
   2bd04:	mov	r3, #22
   2bd08:	str	r3, [r0]
   2bd0c:	mov	r0, #1
   2bd10:	pop	{r4, pc}
   2bd14:	strh	r2, [r1, #60]	; 0x3c
   2bd18:	mov	r0, #0
   2bd1c:	bx	lr
   2bd20:	push	{r4, r5, r6, r7, r8, lr}
   2bd24:	bics	r8, r1, #4096	; 0x1000
   2bd28:	beq	2bd40 <__assert_fail@plt+0x19654>
   2bd2c:	bl	12404 <__errno_location@plt>
   2bd30:	mov	r3, #22
   2bd34:	str	r3, [r0]
   2bd38:	mov	r0, #0
   2bd3c:	pop	{r4, r5, r6, r7, r8, pc}
   2bd40:	mov	r5, r0
   2bd44:	ldr	r4, [r0]
   2bd48:	mov	r7, r1
   2bd4c:	bl	12404 <__errno_location@plt>
   2bd50:	mov	r6, r0
   2bd54:	str	r8, [r0]
   2bd58:	ldr	r0, [r5, #48]	; 0x30
   2bd5c:	ands	r0, r0, #8192	; 0x2000
   2bd60:	bne	2bd38 <__assert_fail@plt+0x1964c>
   2bd64:	ldrh	r3, [r4, #56]	; 0x38
   2bd68:	cmp	r3, #9
   2bd6c:	bne	2bd78 <__assert_fail@plt+0x1968c>
   2bd70:	ldr	r0, [r4, #8]
   2bd74:	pop	{r4, r5, r6, r7, r8, pc}
   2bd78:	cmp	r3, #1
   2bd7c:	popne	{r4, r5, r6, r7, r8, pc}
   2bd80:	ldr	r0, [r5, #4]
   2bd84:	cmp	r0, #0
   2bd88:	beq	2bd90 <__assert_fail@plt+0x196a4>
   2bd8c:	bl	2a484 <__assert_fail@plt+0x17d98>
   2bd90:	cmp	r7, #4096	; 0x1000
   2bd94:	moveq	r8, #2
   2bd98:	ldreq	r3, [r5, #48]	; 0x30
   2bd9c:	movne	r8, #1
   2bda0:	orreq	r3, r3, #4096	; 0x1000
   2bda4:	streq	r3, [r5, #48]	; 0x30
   2bda8:	ldr	r3, [r4, #48]	; 0x30
   2bdac:	cmp	r3, #0
   2bdb0:	bne	2bdd0 <__assert_fail@plt+0x196e4>
   2bdb4:	ldr	r3, [r4, #24]
   2bdb8:	ldrb	r3, [r3]
   2bdbc:	cmp	r3, #47	; 0x2f
   2bdc0:	beq	2bdd0 <__assert_fail@plt+0x196e4>
   2bdc4:	ldr	r0, [r5, #48]	; 0x30
   2bdc8:	ands	r4, r0, #4
   2bdcc:	beq	2bde4 <__assert_fail@plt+0x196f8>
   2bdd0:	mov	r1, r8
   2bdd4:	mov	r0, r5
   2bdd8:	bl	2aadc <__assert_fail@plt+0x183f0>
   2bddc:	str	r0, [r5, #4]
   2bde0:	pop	{r4, r5, r6, r7, r8, pc}
   2bde4:	ldr	r1, [pc, #116]	; 2be60 <__assert_fail@plt+0x19774>
   2bde8:	mov	r0, r5
   2bdec:	bl	2a440 <__assert_fail@plt+0x17d54>
   2bdf0:	subs	r7, r0, #0
   2bdf4:	strlt	r4, [r5, #4]
   2bdf8:	blt	2bd38 <__assert_fail@plt+0x1964c>
   2bdfc:	mov	r1, r8
   2be00:	mov	r0, r5
   2be04:	bl	2aadc <__assert_fail@plt+0x183f0>
   2be08:	str	r0, [r5, #4]
   2be0c:	ldr	r0, [r5, #48]	; 0x30
   2be10:	ands	r4, r0, #512	; 0x200
   2be14:	beq	2be30 <__assert_fail@plt+0x19744>
   2be18:	mov	r2, #1
   2be1c:	mov	r1, r7
   2be20:	mov	r0, r5
   2be24:	bl	2a620 <__assert_fail@plt+0x17f34>
   2be28:	ldr	r0, [r5, #4]
   2be2c:	pop	{r4, r5, r6, r7, r8, pc}
   2be30:	mov	r0, r7
   2be34:	bl	125d8 <fchdir@plt>
   2be38:	cmp	r0, #0
   2be3c:	beq	2be54 <__assert_fail@plt+0x19768>
   2be40:	ldr	r5, [r6]
   2be44:	mov	r0, r7
   2be48:	bl	126a4 <close@plt>
   2be4c:	str	r5, [r6]
   2be50:	b	2bd38 <__assert_fail@plt+0x1964c>
   2be54:	mov	r0, r7
   2be58:	bl	126a4 <close@plt>
   2be5c:	b	2be28 <__assert_fail@plt+0x1973c>
   2be60:	andeq	sl, r3, r1, asr #14
   2be64:	push	{r4, r5, r6, r7, r8, lr}
   2be68:	subs	r4, r0, #0
   2be6c:	bne	2be88 <__assert_fail@plt+0x1979c>
   2be70:	bl	12404 <__errno_location@plt>
   2be74:	mov	r3, #95	; 0x5f
   2be78:	mvn	r4, #0
   2be7c:	str	r3, [r0]
   2be80:	mov	r0, r4
   2be84:	pop	{r4, r5, r6, r7, r8, pc}
   2be88:	cmp	r4, #10
   2be8c:	bne	2be80 <__assert_fail@plt+0x19794>
   2be90:	ldr	r6, [r1]
   2be94:	mov	r5, r1
   2be98:	mov	r0, r6
   2be9c:	ldr	r1, [pc, #32]	; 2bec4 <__assert_fail@plt+0x197d8>
   2bea0:	bl	11ffc <strcmp@plt>
   2bea4:	subs	r7, r0, #0
   2bea8:	bne	2be80 <__assert_fail@plt+0x19794>
   2beac:	mov	r0, r6
   2beb0:	bl	125fc <freecon@plt>
   2beb4:	str	r7, [r5]
   2beb8:	bl	12404 <__errno_location@plt>
   2bebc:	mov	r3, #61	; 0x3d
   2bec0:	b	2be78 <__assert_fail@plt+0x1978c>
   2bec4:	andeq	pc, r3, r3, lsr r1	; <UNPREDICTABLE>
   2bec8:	push	{r4, lr}
   2becc:	mov	r4, r1
   2bed0:	bl	123a4 <getfilecon@plt>
   2bed4:	mov	r1, r4
   2bed8:	pop	{r4, lr}
   2bedc:	b	2be64 <__assert_fail@plt+0x19778>
   2bee0:	push	{r4, lr}
   2bee4:	mov	r4, r1
   2bee8:	bl	12308 <lgetfilecon@plt>
   2beec:	mov	r1, r4
   2bef0:	pop	{r4, lr}
   2bef4:	b	2be64 <__assert_fail@plt+0x19778>
   2bef8:	push	{r4, lr}
   2befc:	mov	r4, r1
   2bf00:	bl	121b8 <fgetfilecon@plt>
   2bf04:	mov	r1, r4
   2bf08:	pop	{r4, lr}
   2bf0c:	b	2be64 <__assert_fail@plt+0x19778>
   2bf10:	cmp	r0, #0
   2bf14:	mov	r3, #0
   2bf18:	moveq	r0, #1
   2bf1c:	adds	r3, r3, #0
   2bf20:	movne	r3, #1
   2bf24:	cmp	r0, #0
   2bf28:	blt	2bf38 <__assert_fail@plt+0x1984c>
   2bf2c:	cmp	r3, #0
   2bf30:	bne	2bf38 <__assert_fail@plt+0x1984c>
   2bf34:	b	12314 <malloc@plt>
   2bf38:	push	{r4, lr}
   2bf3c:	bl	12404 <__errno_location@plt>
   2bf40:	mov	r3, #12
   2bf44:	str	r3, [r0]
   2bf48:	mov	r0, #0
   2bf4c:	pop	{r4, pc}
   2bf50:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bf54:	subs	r5, r0, #0
   2bf58:	addeq	r5, sp, #4
   2bf5c:	mov	r0, r5
   2bf60:	mov	r7, r2
   2bf64:	mov	r6, r1
   2bf68:	bl	122a8 <mbrtowc@plt>
   2bf6c:	cmp	r7, #0
   2bf70:	cmnne	r0, #3
   2bf74:	mov	r4, r0
   2bf78:	bls	2bf94 <__assert_fail@plt+0x198a8>
   2bf7c:	mov	r0, #0
   2bf80:	bl	38b60 <__assert_fail@plt+0x26474>
   2bf84:	cmp	r0, #0
   2bf88:	moveq	r4, #1
   2bf8c:	ldrbeq	r3, [r6]
   2bf90:	streq	r3, [r5]
   2bf94:	mov	r0, r4
   2bf98:	add	sp, sp, #12
   2bf9c:	pop	{r4, r5, r6, r7, pc}
   2bfa0:	push	{r4, lr}
   2bfa4:	mov	r1, #32
   2bfa8:	bl	123c8 <strchr@plt>
   2bfac:	cmp	r0, #0
   2bfb0:	movne	r3, #0
   2bfb4:	strbne	r3, [r0]
   2bfb8:	pop	{r4, pc}
   2bfbc:	push	{r4, r5, r6, lr}
   2bfc0:	mov	r4, r0
   2bfc4:	bl	123bc <strlen@plt>
   2bfc8:	mov	ip, r4
   2bfcc:	mov	r3, #0
   2bfd0:	add	r0, r0, #1
   2bfd4:	cmp	r3, r0
   2bfd8:	bcc	2bfe0 <__assert_fail@plt+0x198f4>
   2bfdc:	pop	{r4, r5, r6, pc}
   2bfe0:	ldrb	r5, [r4, r3]
   2bfe4:	cmp	r5, #92	; 0x5c
   2bfe8:	bne	2c058 <__assert_fail@plt+0x1996c>
   2bfec:	add	r2, r3, #4
   2bff0:	cmp	r0, r2
   2bff4:	bls	2c058 <__assert_fail@plt+0x1996c>
   2bff8:	add	r6, r4, r3
   2bffc:	ldrb	r1, [r6, #1]
   2c000:	sub	lr, r1, #48	; 0x30
   2c004:	uxtb	r2, lr
   2c008:	cmp	r2, #3
   2c00c:	bhi	2c058 <__assert_fail@plt+0x1996c>
   2c010:	ldrb	r1, [r6, #2]
   2c014:	sub	r1, r1, #48	; 0x30
   2c018:	uxtb	r2, r1
   2c01c:	cmp	r2, #7
   2c020:	bhi	2c058 <__assert_fail@plt+0x1996c>
   2c024:	add	r6, r3, #3
   2c028:	ldrb	r2, [r4, r6]
   2c02c:	sub	r2, r2, #48	; 0x30
   2c030:	uxtb	r2, r2
   2c034:	cmp	r2, #7
   2c038:	bhi	2c058 <__assert_fail@plt+0x1996c>
   2c03c:	add	r1, r1, lr, lsl #3
   2c040:	mov	r3, r6
   2c044:	add	r2, r2, r1, lsl #3
   2c048:	strb	r2, [ip]
   2c04c:	add	r3, r3, #1
   2c050:	add	ip, ip, #1
   2c054:	b	2bfd4 <__assert_fail@plt+0x198e8>
   2c058:	strb	r5, [ip]
   2c05c:	b	2c04c <__assert_fail@plt+0x19960>
   2c060:	push	{r4, lr}
   2c064:	mov	r4, r0
   2c068:	ldr	r0, [r0]
   2c06c:	bl	2a01c <__assert_fail@plt+0x17930>
   2c070:	ldr	r0, [r4, #4]
   2c074:	bl	2a01c <__assert_fail@plt+0x17930>
   2c078:	ldr	r0, [r4, #8]
   2c07c:	bl	2a01c <__assert_fail@plt+0x17930>
   2c080:	ldrb	r3, [r4, #24]
   2c084:	tst	r3, #4
   2c088:	beq	2c094 <__assert_fail@plt+0x199a8>
   2c08c:	ldr	r0, [r4, #12]
   2c090:	bl	2a01c <__assert_fail@plt+0x17930>
   2c094:	mov	r0, r4
   2c098:	pop	{r4, lr}
   2c09c:	b	2a01c <__assert_fail@plt+0x17930>
   2c0a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c0a4:	sub	sp, sp, #36	; 0x24
   2c0a8:	ldr	r1, [pc, #1912]	; 2c828 <__assert_fail@plt+0x1a13c>
   2c0ac:	ldr	r0, [pc, #1912]	; 2c82c <__assert_fail@plt+0x1a140>
   2c0b0:	bl	125e4 <fopen64@plt>
   2c0b4:	subs	fp, r0, #0
   2c0b8:	beq	2c4f8 <__assert_fail@plt+0x19e0c>
   2c0bc:	add	sl, sp, #8
   2c0c0:	mov	r3, #0
   2c0c4:	str	r3, [sp, #12]
   2c0c8:	str	r3, [sp, #16]
   2c0cc:	mov	r2, fp
   2c0d0:	add	r1, sp, #16
   2c0d4:	add	r0, sp, #12
   2c0d8:	bl	12638 <getline@plt>
   2c0dc:	cmn	r0, #1
   2c0e0:	bne	2c13c <__assert_fail@plt+0x19a50>
   2c0e4:	ldr	r0, [sp, #12]
   2c0e8:	bl	2a01c <__assert_fail@plt+0x17930>
   2c0ec:	mov	r0, fp
   2c0f0:	bl	1229c <ferror_unlocked@plt>
   2c0f4:	cmp	r0, #0
   2c0f8:	beq	2c4d4 <__assert_fail@plt+0x19de8>
   2c0fc:	bl	12404 <__errno_location@plt>
   2c100:	ldr	r5, [r0]
   2c104:	mov	r4, r0
   2c108:	mov	r0, fp
   2c10c:	bl	124d0 <fclose@plt>
   2c110:	str	r5, [r4]
   2c114:	bl	12404 <__errno_location@plt>
   2c118:	mov	r3, #0
   2c11c:	str	r3, [sl]
   2c120:	ldr	r5, [r0]
   2c124:	mov	r4, r0
   2c128:	ldr	r0, [sp, #8]
   2c12c:	cmp	r0, #0
   2c130:	bne	2c818 <__assert_fail@plt+0x1a12c>
   2c134:	str	r5, [r4]
   2c138:	b	2c4f0 <__assert_fail@plt+0x19e04>
   2c13c:	add	r3, sp, #28
   2c140:	str	r3, [sp]
   2c144:	add	r2, sp, #20
   2c148:	add	r3, sp, #24
   2c14c:	ldr	r1, [pc, #1756]	; 2c830 <__assert_fail@plt+0x1a144>
   2c150:	ldr	r0, [sp, #12]
   2c154:	bl	12578 <sscanf@plt>
   2c158:	sub	r0, r0, #2
   2c15c:	cmp	r0, #1
   2c160:	bhi	2c0cc <__assert_fail@plt+0x199e0>
   2c164:	ldr	r3, [sp, #28]
   2c168:	ldr	r6, [sp, #12]
   2c16c:	add	r6, r6, r3
   2c170:	mov	r0, r6
   2c174:	bl	2bfa0 <__assert_fail@plt+0x198b4>
   2c178:	cmp	r0, #0
   2c17c:	beq	2c0cc <__assert_fail@plt+0x199e0>
   2c180:	add	r7, r0, #1
   2c184:	mov	r0, r7
   2c188:	bl	2bfa0 <__assert_fail@plt+0x198b4>
   2c18c:	cmp	r0, #0
   2c190:	beq	2c0cc <__assert_fail@plt+0x199e0>
   2c194:	ldr	r1, [pc, #1688]	; 2c834 <__assert_fail@plt+0x1a148>
   2c198:	add	r0, r0, #1
   2c19c:	bl	37e0c <__assert_fail@plt+0x25720>
   2c1a0:	cmp	r0, #0
   2c1a4:	beq	2c0cc <__assert_fail@plt+0x199e0>
   2c1a8:	add	r4, r0, #3
   2c1ac:	mov	r0, r4
   2c1b0:	bl	2bfa0 <__assert_fail@plt+0x198b4>
   2c1b4:	cmp	r0, #0
   2c1b8:	beq	2c0cc <__assert_fail@plt+0x199e0>
   2c1bc:	add	r8, r0, #1
   2c1c0:	mov	r0, r8
   2c1c4:	bl	2bfa0 <__assert_fail@plt+0x198b4>
   2c1c8:	cmp	r0, #0
   2c1cc:	beq	2c0cc <__assert_fail@plt+0x199e0>
   2c1d0:	mov	r0, r8
   2c1d4:	bl	2bfbc <__assert_fail@plt+0x198d0>
   2c1d8:	mov	r0, r7
   2c1dc:	bl	2bfbc <__assert_fail@plt+0x198d0>
   2c1e0:	mov	r0, r6
   2c1e4:	bl	2bfbc <__assert_fail@plt+0x198d0>
   2c1e8:	mov	r0, r4
   2c1ec:	bl	2bfbc <__assert_fail@plt+0x198d0>
   2c1f0:	mov	r0, #32
   2c1f4:	bl	28d44 <__assert_fail@plt+0x16658>
   2c1f8:	mov	r5, r0
   2c1fc:	mov	r0, r8
   2c200:	bl	291bc <__assert_fail@plt+0x16ad0>
   2c204:	str	r0, [r5]
   2c208:	mov	r0, r7
   2c20c:	bl	291bc <__assert_fail@plt+0x16ad0>
   2c210:	str	r0, [r5, #4]
   2c214:	mov	r0, r6
   2c218:	bl	291bc <__assert_fail@plt+0x16ad0>
   2c21c:	str	r0, [r5, #8]
   2c220:	mov	r0, r4
   2c224:	bl	291bc <__assert_fail@plt+0x16ad0>
   2c228:	ldrb	r3, [r5, #24]
   2c22c:	ldr	r1, [sp, #24]
   2c230:	orr	r3, r3, #4
   2c234:	strb	r3, [r5, #24]
   2c238:	mov	r4, r0
   2c23c:	str	r0, [r5, #12]
   2c240:	ldr	r0, [sp, #20]
   2c244:	bl	12020 <gnu_dev_makedev@plt>
   2c248:	strd	r0, [r5, #16]
   2c24c:	ldr	r1, [pc, #1508]	; 2c838 <__assert_fail@plt+0x1a14c>
   2c250:	mov	r0, r4
   2c254:	bl	11ffc <strcmp@plt>
   2c258:	cmp	r0, #0
   2c25c:	beq	2c4c4 <__assert_fail@plt+0x19dd8>
   2c260:	ldr	r1, [pc, #1492]	; 2c83c <__assert_fail@plt+0x1a150>
   2c264:	mov	r0, r4
   2c268:	bl	11ffc <strcmp@plt>
   2c26c:	cmp	r0, #0
   2c270:	beq	2c4c4 <__assert_fail@plt+0x19dd8>
   2c274:	ldr	r1, [pc, #1476]	; 2c840 <__assert_fail@plt+0x1a154>
   2c278:	mov	r0, r4
   2c27c:	bl	11ffc <strcmp@plt>
   2c280:	cmp	r0, #0
   2c284:	beq	2c4c4 <__assert_fail@plt+0x19dd8>
   2c288:	ldr	r1, [pc, #1460]	; 2c844 <__assert_fail@plt+0x1a158>
   2c28c:	mov	r0, r4
   2c290:	bl	11ffc <strcmp@plt>
   2c294:	cmp	r0, #0
   2c298:	beq	2c4c4 <__assert_fail@plt+0x19dd8>
   2c29c:	ldr	r1, [pc, #1444]	; 2c848 <__assert_fail@plt+0x1a15c>
   2c2a0:	mov	r0, r4
   2c2a4:	bl	11ffc <strcmp@plt>
   2c2a8:	cmp	r0, #0
   2c2ac:	beq	2c4c4 <__assert_fail@plt+0x19dd8>
   2c2b0:	ldr	r1, [pc, #1428]	; 2c84c <__assert_fail@plt+0x1a160>
   2c2b4:	mov	r0, r4
   2c2b8:	bl	11ffc <strcmp@plt>
   2c2bc:	cmp	r0, #0
   2c2c0:	beq	2c4c4 <__assert_fail@plt+0x19dd8>
   2c2c4:	ldr	r1, [pc, #1412]	; 2c850 <__assert_fail@plt+0x1a164>
   2c2c8:	mov	r0, r4
   2c2cc:	bl	11ffc <strcmp@plt>
   2c2d0:	cmp	r0, #0
   2c2d4:	beq	2c4c4 <__assert_fail@plt+0x19dd8>
   2c2d8:	ldr	r1, [pc, #1396]	; 2c854 <__assert_fail@plt+0x1a168>
   2c2dc:	mov	r0, r4
   2c2e0:	bl	11ffc <strcmp@plt>
   2c2e4:	cmp	r0, #0
   2c2e8:	beq	2c4c4 <__assert_fail@plt+0x19dd8>
   2c2ec:	ldr	r1, [pc, #1380]	; 2c858 <__assert_fail@plt+0x1a16c>
   2c2f0:	mov	r0, r4
   2c2f4:	bl	11ffc <strcmp@plt>
   2c2f8:	cmp	r0, #0
   2c2fc:	beq	2c4c4 <__assert_fail@plt+0x19dd8>
   2c300:	ldr	r1, [pc, #1364]	; 2c85c <__assert_fail@plt+0x1a170>
   2c304:	mov	r0, r4
   2c308:	bl	11ffc <strcmp@plt>
   2c30c:	cmp	r0, #0
   2c310:	beq	2c4c4 <__assert_fail@plt+0x19dd8>
   2c314:	ldr	r1, [pc, #1348]	; 2c860 <__assert_fail@plt+0x1a174>
   2c318:	mov	r0, r4
   2c31c:	bl	11ffc <strcmp@plt>
   2c320:	cmp	r0, #0
   2c324:	beq	2c4c4 <__assert_fail@plt+0x19dd8>
   2c328:	ldr	r1, [pc, #1332]	; 2c864 <__assert_fail@plt+0x1a178>
   2c32c:	mov	r0, r4
   2c330:	bl	11ffc <strcmp@plt>
   2c334:	cmp	r0, #0
   2c338:	beq	2c4c4 <__assert_fail@plt+0x19dd8>
   2c33c:	ldr	r1, [pc, #1316]	; 2c868 <__assert_fail@plt+0x1a17c>
   2c340:	mov	r0, r4
   2c344:	bl	11ffc <strcmp@plt>
   2c348:	cmp	r0, #0
   2c34c:	beq	2c4c4 <__assert_fail@plt+0x19dd8>
   2c350:	ldr	r1, [pc, #1300]	; 2c86c <__assert_fail@plt+0x1a180>
   2c354:	mov	r0, r4
   2c358:	bl	11ffc <strcmp@plt>
   2c35c:	clz	r0, r0
   2c360:	lsr	r0, r0, #5
   2c364:	ldrb	r3, [r5, #24]
   2c368:	ldr	r6, [r5]
   2c36c:	mov	r1, #58	; 0x3a
   2c370:	bic	r3, r3, #1
   2c374:	orr	r0, r0, r3
   2c378:	strb	r0, [r5, #24]
   2c37c:	mov	r0, r6
   2c380:	bl	123c8 <strchr@plt>
   2c384:	cmp	r0, #0
   2c388:	bne	2c4cc <__assert_fail@plt+0x19de0>
   2c38c:	ldrb	r3, [r6]
   2c390:	cmp	r3, #47	; 0x2f
   2c394:	bne	2c3e0 <__assert_fail@plt+0x19cf4>
   2c398:	ldrb	r3, [r6, #1]
   2c39c:	cmp	r3, #47	; 0x2f
   2c3a0:	bne	2c3e0 <__assert_fail@plt+0x19cf4>
   2c3a4:	ldr	r1, [pc, #1220]	; 2c870 <__assert_fail@plt+0x1a184>
   2c3a8:	mov	r0, r4
   2c3ac:	bl	11ffc <strcmp@plt>
   2c3b0:	cmp	r0, #0
   2c3b4:	beq	2c4cc <__assert_fail@plt+0x19de0>
   2c3b8:	ldr	r1, [pc, #1204]	; 2c874 <__assert_fail@plt+0x1a188>
   2c3bc:	mov	r0, r4
   2c3c0:	bl	11ffc <strcmp@plt>
   2c3c4:	cmp	r0, #0
   2c3c8:	beq	2c4cc <__assert_fail@plt+0x19de0>
   2c3cc:	ldr	r1, [pc, #1188]	; 2c878 <__assert_fail@plt+0x1a18c>
   2c3d0:	mov	r0, r4
   2c3d4:	bl	11ffc <strcmp@plt>
   2c3d8:	cmp	r0, #0
   2c3dc:	beq	2c4cc <__assert_fail@plt+0x19de0>
   2c3e0:	ldr	r1, [pc, #1172]	; 2c87c <__assert_fail@plt+0x1a190>
   2c3e4:	mov	r0, r4
   2c3e8:	bl	11ffc <strcmp@plt>
   2c3ec:	cmp	r0, #0
   2c3f0:	beq	2c4cc <__assert_fail@plt+0x19de0>
   2c3f4:	ldr	r1, [pc, #1156]	; 2c880 <__assert_fail@plt+0x1a194>
   2c3f8:	mov	r0, r4
   2c3fc:	bl	11ffc <strcmp@plt>
   2c400:	cmp	r0, #0
   2c404:	beq	2c4cc <__assert_fail@plt+0x19de0>
   2c408:	ldr	r1, [pc, #1140]	; 2c884 <__assert_fail@plt+0x1a198>
   2c40c:	mov	r0, r4
   2c410:	bl	11ffc <strcmp@plt>
   2c414:	cmp	r0, #0
   2c418:	beq	2c4cc <__assert_fail@plt+0x19de0>
   2c41c:	ldr	r1, [pc, #1124]	; 2c888 <__assert_fail@plt+0x1a19c>
   2c420:	mov	r0, r4
   2c424:	bl	11ffc <strcmp@plt>
   2c428:	cmp	r0, #0
   2c42c:	beq	2c4cc <__assert_fail@plt+0x19de0>
   2c430:	ldr	r1, [pc, #1108]	; 2c88c <__assert_fail@plt+0x1a1a0>
   2c434:	mov	r0, r4
   2c438:	bl	11ffc <strcmp@plt>
   2c43c:	cmp	r0, #0
   2c440:	beq	2c4cc <__assert_fail@plt+0x19de0>
   2c444:	ldr	r1, [pc, #1092]	; 2c890 <__assert_fail@plt+0x1a1a4>
   2c448:	mov	r0, r4
   2c44c:	bl	11ffc <strcmp@plt>
   2c450:	cmp	r0, #0
   2c454:	beq	2c4cc <__assert_fail@plt+0x19de0>
   2c458:	ldr	r1, [pc, #1076]	; 2c894 <__assert_fail@plt+0x1a1a8>
   2c45c:	mov	r0, r4
   2c460:	bl	11ffc <strcmp@plt>
   2c464:	cmp	r0, #0
   2c468:	beq	2c4cc <__assert_fail@plt+0x19de0>
   2c46c:	ldr	r1, [pc, #1060]	; 2c898 <__assert_fail@plt+0x1a1ac>
   2c470:	mov	r0, r4
   2c474:	bl	11ffc <strcmp@plt>
   2c478:	cmp	r0, #0
   2c47c:	beq	2c4cc <__assert_fail@plt+0x19de0>
   2c480:	ldr	r1, [pc, #1044]	; 2c89c <__assert_fail@plt+0x1a1b0>
   2c484:	mov	r0, r4
   2c488:	bl	11ffc <strcmp@plt>
   2c48c:	cmp	r0, #0
   2c490:	beq	2c4cc <__assert_fail@plt+0x19de0>
   2c494:	mov	r1, r6
   2c498:	ldr	r0, [pc, #1024]	; 2c8a0 <__assert_fail@plt+0x1a1b4>
   2c49c:	bl	11ffc <strcmp@plt>
   2c4a0:	clz	r0, r0
   2c4a4:	lsr	r0, r0, #5
   2c4a8:	ldrb	r3, [r5, #24]
   2c4ac:	bic	r3, r3, #2
   2c4b0:	orr	r0, r3, r0, lsl #1
   2c4b4:	strb	r0, [r5, #24]
   2c4b8:	str	r5, [sl]
   2c4bc:	add	sl, r5, #28
   2c4c0:	b	2c0cc <__assert_fail@plt+0x199e0>
   2c4c4:	mov	r0, #1
   2c4c8:	b	2c364 <__assert_fail@plt+0x19c78>
   2c4cc:	mov	r0, #1
   2c4d0:	b	2c4a8 <__assert_fail@plt+0x19dbc>
   2c4d4:	mov	r0, fp
   2c4d8:	bl	124d0 <fclose@plt>
   2c4dc:	cmn	r0, #1
   2c4e0:	movne	r3, #0
   2c4e4:	strne	r3, [sl]
   2c4e8:	ldrne	r0, [sp, #8]
   2c4ec:	beq	2c114 <__assert_fail@plt+0x19a28>
   2c4f0:	add	sp, sp, #36	; 0x24
   2c4f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c4f8:	ldr	r1, [pc, #932]	; 2c8a4 <__assert_fail@plt+0x1a1b8>
   2c4fc:	ldr	r0, [pc, #932]	; 2c8a8 <__assert_fail@plt+0x1a1bc>
   2c500:	bl	12614 <setmntent@plt>
   2c504:	subs	r7, r0, #0
   2c508:	addne	sl, sp, #8
   2c50c:	mvnne	r8, #0
   2c510:	mvnne	r9, #0
   2c514:	bne	2c7e8 <__assert_fail@plt+0x1a0fc>
   2c518:	mov	r0, r7
   2c51c:	b	2c4f0 <__assert_fail@plt+0x19e04>
   2c520:	ldr	r1, [pc, #900]	; 2c8ac <__assert_fail@plt+0x1a1c0>
   2c524:	bl	1226c <hasmntopt@plt>
   2c528:	mov	r5, r0
   2c52c:	mov	r0, #32
   2c530:	bl	28d44 <__assert_fail@plt+0x16658>
   2c534:	mov	r6, r0
   2c538:	ldr	r0, [r4]
   2c53c:	bl	291bc <__assert_fail@plt+0x16ad0>
   2c540:	str	r0, [r6]
   2c544:	ldr	r0, [r4, #4]
   2c548:	bl	291bc <__assert_fail@plt+0x16ad0>
   2c54c:	stmib	r6, {r0, fp}
   2c550:	ldr	r0, [r4, #8]
   2c554:	bl	291bc <__assert_fail@plt+0x16ad0>
   2c558:	ldrb	r3, [r6, #24]
   2c55c:	ldr	r1, [pc, #724]	; 2c838 <__assert_fail@plt+0x1a14c>
   2c560:	orr	r3, r3, #4
   2c564:	strb	r3, [r6, #24]
   2c568:	str	r0, [r6, #12]
   2c56c:	mov	r4, r0
   2c570:	bl	11ffc <strcmp@plt>
   2c574:	cmp	r0, #0
   2c578:	beq	2c808 <__assert_fail@plt+0x1a11c>
   2c57c:	ldr	r1, [pc, #696]	; 2c83c <__assert_fail@plt+0x1a150>
   2c580:	mov	r0, r4
   2c584:	bl	11ffc <strcmp@plt>
   2c588:	cmp	r0, #0
   2c58c:	beq	2c808 <__assert_fail@plt+0x1a11c>
   2c590:	ldr	r1, [pc, #680]	; 2c840 <__assert_fail@plt+0x1a154>
   2c594:	mov	r0, r4
   2c598:	bl	11ffc <strcmp@plt>
   2c59c:	cmp	r0, #0
   2c5a0:	beq	2c808 <__assert_fail@plt+0x1a11c>
   2c5a4:	ldr	r1, [pc, #664]	; 2c844 <__assert_fail@plt+0x1a158>
   2c5a8:	mov	r0, r4
   2c5ac:	bl	11ffc <strcmp@plt>
   2c5b0:	cmp	r0, #0
   2c5b4:	beq	2c808 <__assert_fail@plt+0x1a11c>
   2c5b8:	ldr	r1, [pc, #648]	; 2c848 <__assert_fail@plt+0x1a15c>
   2c5bc:	mov	r0, r4
   2c5c0:	bl	11ffc <strcmp@plt>
   2c5c4:	cmp	r0, #0
   2c5c8:	beq	2c808 <__assert_fail@plt+0x1a11c>
   2c5cc:	ldr	r1, [pc, #632]	; 2c84c <__assert_fail@plt+0x1a160>
   2c5d0:	mov	r0, r4
   2c5d4:	bl	11ffc <strcmp@plt>
   2c5d8:	cmp	r0, #0
   2c5dc:	beq	2c808 <__assert_fail@plt+0x1a11c>
   2c5e0:	ldr	r1, [pc, #616]	; 2c850 <__assert_fail@plt+0x1a164>
   2c5e4:	mov	r0, r4
   2c5e8:	bl	11ffc <strcmp@plt>
   2c5ec:	cmp	r0, #0
   2c5f0:	beq	2c808 <__assert_fail@plt+0x1a11c>
   2c5f4:	ldr	r1, [pc, #600]	; 2c854 <__assert_fail@plt+0x1a168>
   2c5f8:	mov	r0, r4
   2c5fc:	bl	11ffc <strcmp@plt>
   2c600:	cmp	r0, #0
   2c604:	beq	2c808 <__assert_fail@plt+0x1a11c>
   2c608:	ldr	r1, [pc, #584]	; 2c858 <__assert_fail@plt+0x1a16c>
   2c60c:	mov	r0, r4
   2c610:	bl	11ffc <strcmp@plt>
   2c614:	cmp	r0, #0
   2c618:	beq	2c808 <__assert_fail@plt+0x1a11c>
   2c61c:	ldr	r1, [pc, #568]	; 2c85c <__assert_fail@plt+0x1a170>
   2c620:	mov	r0, r4
   2c624:	bl	11ffc <strcmp@plt>
   2c628:	cmp	r0, #0
   2c62c:	beq	2c808 <__assert_fail@plt+0x1a11c>
   2c630:	ldr	r1, [pc, #552]	; 2c860 <__assert_fail@plt+0x1a174>
   2c634:	mov	r0, r4
   2c638:	bl	11ffc <strcmp@plt>
   2c63c:	cmp	r0, #0
   2c640:	beq	2c808 <__assert_fail@plt+0x1a11c>
   2c644:	ldr	r1, [pc, #536]	; 2c864 <__assert_fail@plt+0x1a178>
   2c648:	mov	r0, r4
   2c64c:	bl	11ffc <strcmp@plt>
   2c650:	cmp	r0, #0
   2c654:	beq	2c808 <__assert_fail@plt+0x1a11c>
   2c658:	ldr	r1, [pc, #520]	; 2c868 <__assert_fail@plt+0x1a17c>
   2c65c:	mov	r0, r4
   2c660:	bl	11ffc <strcmp@plt>
   2c664:	cmp	r0, #0
   2c668:	beq	2c808 <__assert_fail@plt+0x1a11c>
   2c66c:	ldr	r1, [pc, #504]	; 2c86c <__assert_fail@plt+0x1a180>
   2c670:	mov	r0, r4
   2c674:	bl	11ffc <strcmp@plt>
   2c678:	cmp	r5, #0
   2c67c:	cmpeq	r0, #0
   2c680:	moveq	r0, #1
   2c684:	movne	r0, #0
   2c688:	ldrb	r5, [r6, #24]
   2c68c:	mov	r1, #58	; 0x3a
   2c690:	bic	r5, r5, #1
   2c694:	orr	r0, r0, r5
   2c698:	ldr	r5, [r6]
   2c69c:	strb	r0, [r6, #24]
   2c6a0:	mov	r0, r5
   2c6a4:	bl	123c8 <strchr@plt>
   2c6a8:	cmp	r0, #0
   2c6ac:	bne	2c810 <__assert_fail@plt+0x1a124>
   2c6b0:	ldrb	r3, [r5]
   2c6b4:	cmp	r3, #47	; 0x2f
   2c6b8:	bne	2c704 <__assert_fail@plt+0x1a018>
   2c6bc:	ldrb	r3, [r5, #1]
   2c6c0:	cmp	r3, #47	; 0x2f
   2c6c4:	bne	2c704 <__assert_fail@plt+0x1a018>
   2c6c8:	ldr	r1, [pc, #416]	; 2c870 <__assert_fail@plt+0x1a184>
   2c6cc:	mov	r0, r4
   2c6d0:	bl	11ffc <strcmp@plt>
   2c6d4:	cmp	r0, #0
   2c6d8:	beq	2c810 <__assert_fail@plt+0x1a124>
   2c6dc:	ldr	r1, [pc, #400]	; 2c874 <__assert_fail@plt+0x1a188>
   2c6e0:	mov	r0, r4
   2c6e4:	bl	11ffc <strcmp@plt>
   2c6e8:	cmp	r0, #0
   2c6ec:	beq	2c810 <__assert_fail@plt+0x1a124>
   2c6f0:	ldr	r1, [pc, #384]	; 2c878 <__assert_fail@plt+0x1a18c>
   2c6f4:	mov	r0, r4
   2c6f8:	bl	11ffc <strcmp@plt>
   2c6fc:	cmp	r0, #0
   2c700:	beq	2c810 <__assert_fail@plt+0x1a124>
   2c704:	ldr	r1, [pc, #368]	; 2c87c <__assert_fail@plt+0x1a190>
   2c708:	mov	r0, r4
   2c70c:	bl	11ffc <strcmp@plt>
   2c710:	cmp	r0, #0
   2c714:	beq	2c810 <__assert_fail@plt+0x1a124>
   2c718:	ldr	r1, [pc, #352]	; 2c880 <__assert_fail@plt+0x1a194>
   2c71c:	mov	r0, r4
   2c720:	bl	11ffc <strcmp@plt>
   2c724:	cmp	r0, #0
   2c728:	beq	2c810 <__assert_fail@plt+0x1a124>
   2c72c:	ldr	r1, [pc, #336]	; 2c884 <__assert_fail@plt+0x1a198>
   2c730:	mov	r0, r4
   2c734:	bl	11ffc <strcmp@plt>
   2c738:	cmp	r0, #0
   2c73c:	beq	2c810 <__assert_fail@plt+0x1a124>
   2c740:	ldr	r1, [pc, #320]	; 2c888 <__assert_fail@plt+0x1a19c>
   2c744:	mov	r0, r4
   2c748:	bl	11ffc <strcmp@plt>
   2c74c:	cmp	r0, #0
   2c750:	beq	2c810 <__assert_fail@plt+0x1a124>
   2c754:	ldr	r1, [pc, #304]	; 2c88c <__assert_fail@plt+0x1a1a0>
   2c758:	mov	r0, r4
   2c75c:	bl	11ffc <strcmp@plt>
   2c760:	cmp	r0, #0
   2c764:	beq	2c810 <__assert_fail@plt+0x1a124>
   2c768:	ldr	r1, [pc, #288]	; 2c890 <__assert_fail@plt+0x1a1a4>
   2c76c:	mov	r0, r4
   2c770:	bl	11ffc <strcmp@plt>
   2c774:	cmp	r0, #0
   2c778:	beq	2c810 <__assert_fail@plt+0x1a124>
   2c77c:	ldr	r1, [pc, #272]	; 2c894 <__assert_fail@plt+0x1a1a8>
   2c780:	mov	r0, r4
   2c784:	bl	11ffc <strcmp@plt>
   2c788:	cmp	r0, #0
   2c78c:	beq	2c810 <__assert_fail@plt+0x1a124>
   2c790:	ldr	r1, [pc, #256]	; 2c898 <__assert_fail@plt+0x1a1ac>
   2c794:	mov	r0, r4
   2c798:	bl	11ffc <strcmp@plt>
   2c79c:	cmp	r0, #0
   2c7a0:	beq	2c810 <__assert_fail@plt+0x1a124>
   2c7a4:	ldr	r1, [pc, #240]	; 2c89c <__assert_fail@plt+0x1a1b0>
   2c7a8:	mov	r0, r4
   2c7ac:	bl	11ffc <strcmp@plt>
   2c7b0:	cmp	r0, #0
   2c7b4:	beq	2c810 <__assert_fail@plt+0x1a124>
   2c7b8:	mov	r1, r5
   2c7bc:	ldr	r0, [pc, #220]	; 2c8a0 <__assert_fail@plt+0x1a1b4>
   2c7c0:	bl	11ffc <strcmp@plt>
   2c7c4:	clz	r0, r0
   2c7c8:	lsr	r0, r0, #5
   2c7cc:	ldrb	r3, [r6, #24]
   2c7d0:	strd	r8, [r6, #16]
   2c7d4:	bic	r3, r3, #2
   2c7d8:	orr	r0, r3, r0, lsl #1
   2c7dc:	strb	r0, [r6, #24]
   2c7e0:	str	r6, [sl]
   2c7e4:	add	sl, r6, #28
   2c7e8:	mov	r0, r7
   2c7ec:	bl	122cc <getmntent@plt>
   2c7f0:	subs	r4, r0, #0
   2c7f4:	bne	2c520 <__assert_fail@plt+0x19e34>
   2c7f8:	mov	r0, r7
   2c7fc:	bl	124f4 <endmntent@plt>
   2c800:	cmp	r0, #0
   2c804:	b	2c4e0 <__assert_fail@plt+0x19df4>
   2c808:	mov	r0, #1
   2c80c:	b	2c688 <__assert_fail@plt+0x19f9c>
   2c810:	mov	r0, #1
   2c814:	b	2c7cc <__assert_fail@plt+0x1a0e0>
   2c818:	ldr	r6, [r0, #28]
   2c81c:	bl	2c060 <__assert_fail@plt+0x19974>
   2c820:	str	r6, [sp, #8]
   2c824:	b	2c128 <__assert_fail@plt+0x19a3c>
   2c828:	andeq	sp, r3, fp, asr #15
   2c82c:	andeq	pc, r3, sp, lsr r1	; <UNPREDICTABLE>
   2c830:	andeq	pc, r3, r2, asr r1	; <UNPREDICTABLE>
   2c834:	andeq	pc, r3, r3, ror #2
   2c838:	andeq	pc, r3, r7, ror #2
   2c83c:	andeq	pc, r3, lr, ror #2
   2c840:	andeq	pc, r3, r3, ror r1	; <UNPREDICTABLE>
   2c844:	andeq	pc, r3, r9, ror r1	; <UNPREDICTABLE>
   2c848:	andeq	pc, r3, r1, lsl #3
   2c84c:	andeq	pc, r3, r8, lsl #3
   2c850:	muleq	r3, r0, r1
   2c854:	muleq	r3, ip, r1
   2c858:	andeq	pc, r3, r3, lsr #3
   2c85c:	andeq	pc, r3, lr, lsr #3
   2c860:			; <UNDEFINED> instruction: 0x0003f1b4
   2c864:			; <UNDEFINED> instruction: 0x0003f1ba
   2c868:	andeq	ip, r3, ip, asr r1
   2c86c:	andeq	pc, r3, r1, asr #3
   2c870:	andeq	pc, r3, r6, asr #3
   2c874:	andeq	pc, r3, ip, asr #3
   2c878:	ldrdeq	pc, [r3], -r1
   2c87c:	ldrdeq	pc, [r3], -r6
   2c880:	andeq	ip, r3, r3, ror #2
   2c884:	ldrdeq	pc, [r3], -fp
   2c888:	andeq	pc, r3, r0, ror #3
   2c88c:	andeq	pc, r3, fp, ror #3
   2c890:	strdeq	pc, [r3], -r1
   2c894:	strdeq	pc, [r3], -r6
   2c898:	strdeq	pc, [r3], -ip
   2c89c:	andeq	pc, r3, r2, lsl #4
   2c8a0:	andeq	pc, r3, r7, lsl #4
   2c8a4:			; <UNDEFINED> instruction: 0x0003dab7
   2c8a8:	andeq	pc, r3, lr, lsl #4
   2c8ac:	andeq	pc, r3, r8, lsl r2	; <UNPREDICTABLE>
   2c8b0:	cmp	r0, #0
   2c8b4:	push	{r4, lr}
   2c8b8:	mov	r4, r1
   2c8bc:	bne	2c8cc <__assert_fail@plt+0x1a1e0>
   2c8c0:	mov	r0, r1
   2c8c4:	pop	{r4, lr}
   2c8c8:	b	2bf10 <__assert_fail@plt+0x19824>
   2c8cc:	cmp	r1, #0
   2c8d0:	bne	2c8e0 <__assert_fail@plt+0x1a1f4>
   2c8d4:	bl	2a01c <__assert_fail@plt+0x17930>
   2c8d8:	mov	r0, #0
   2c8dc:	pop	{r4, pc}
   2c8e0:	cmp	r1, #0
   2c8e4:	blt	2c8f4 <__assert_fail@plt+0x1a208>
   2c8e8:	mov	r3, #0
   2c8ec:	cmp	r3, r3
   2c8f0:	beq	2c904 <__assert_fail@plt+0x1a218>
   2c8f4:	bl	12404 <__errno_location@plt>
   2c8f8:	mov	r3, #12
   2c8fc:	str	r3, [r0]
   2c900:	b	2c8d8 <__assert_fail@plt+0x1a1ec>
   2c904:	pop	{r4, lr}
   2c908:	b	121ac <realloc@plt>
   2c90c:	push	{r4, r5, r6, lr}
   2c910:	subs	r4, r2, #0
   2c914:	mov	r6, r0
   2c918:	mov	r5, r1
   2c91c:	beq	2c934 <__assert_fail@plt+0x1a248>
   2c920:	mov	r1, r4
   2c924:	mvn	r0, #0
   2c928:	bl	39074 <__assert_fail@plt+0x26988>
   2c92c:	cmp	r0, r5
   2c930:	bcc	2c944 <__assert_fail@plt+0x1a258>
   2c934:	mul	r1, r5, r4
   2c938:	mov	r0, r6
   2c93c:	pop	{r4, r5, r6, lr}
   2c940:	b	2c8b0 <__assert_fail@plt+0x1a1c4>
   2c944:	bl	12404 <__errno_location@plt>
   2c948:	mov	r3, #12
   2c94c:	str	r3, [r0]
   2c950:	mov	r0, #0
   2c954:	pop	{r4, r5, r6, pc}
   2c958:	cmp	r1, #0
   2c95c:	add	r3, r1, #31
   2c960:	movge	r3, r1
   2c964:	rsbs	r2, r1, #0
   2c968:	asr	r3, r3, #5
   2c96c:	and	r2, r2, #31
   2c970:	and	r1, r1, #31
   2c974:	mov	ip, #1
   2c978:	rsbpl	r1, r2, #0
   2c97c:	ldr	r2, [r0, r3, lsl #2]
   2c980:	orr	r1, r2, ip, lsl r1
   2c984:	str	r1, [r0, r3, lsl #2]
   2c988:	bx	lr
   2c98c:	cmp	r1, #0
   2c990:	add	r3, r1, #31
   2c994:	movge	r3, r1
   2c998:	rsbs	r2, r1, #0
   2c99c:	asr	r3, r3, #5
   2c9a0:	and	r2, r2, #31
   2c9a4:	ldr	r0, [r0, r3, lsl #2]
   2c9a8:	and	r1, r1, #31
   2c9ac:	rsbpl	r1, r2, #0
   2c9b0:	lsr	r0, r0, r1
   2c9b4:	and	r0, r0, #1
   2c9b8:	bx	lr
   2c9bc:	sub	r3, r0, #4
   2c9c0:	add	r0, r0, #28
   2c9c4:	ldr	r2, [r3, #4]
   2c9c8:	mvn	r2, r2
   2c9cc:	str	r2, [r3, #4]!
   2c9d0:	cmp	r3, r0
   2c9d4:	bne	2c9c4 <__assert_fail@plt+0x1a2d8>
   2c9d8:	bx	lr
   2c9dc:	sub	r3, r0, #4
   2c9e0:	sub	r1, r1, #4
   2c9e4:	add	r0, r0, #28
   2c9e8:	ldr	r2, [r3, #4]
   2c9ec:	ldr	ip, [r1, #4]!
   2c9f0:	orr	r2, r2, ip
   2c9f4:	str	r2, [r3, #4]!
   2c9f8:	cmp	r3, r0
   2c9fc:	bne	2c9e8 <__assert_fail@plt+0x1a2fc>
   2ca00:	bx	lr
   2ca04:	sub	r3, r0, #4
   2ca08:	sub	r1, r1, #4
   2ca0c:	add	r0, r0, #28
   2ca10:	ldr	r2, [r3, #4]
   2ca14:	ldr	ip, [r1, #4]!
   2ca18:	and	r2, r2, ip
   2ca1c:	str	r2, [r3, #4]!
   2ca20:	cmp	r3, r0
   2ca24:	bne	2ca10 <__assert_fail@plt+0x1a324>
   2ca28:	bx	lr
   2ca2c:	ldr	r3, [r0, #80]	; 0x50
   2ca30:	cmp	r3, #1
   2ca34:	movne	r2, r0
   2ca38:	movne	r0, #1
   2ca3c:	ldrne	ip, [r2, #28]
   2ca40:	bne	2ca4c <__assert_fail@plt+0x1a360>
   2ca44:	mov	r0, r3
   2ca48:	bx	lr
   2ca4c:	add	r3, r0, r1
   2ca50:	cmp	ip, r3
   2ca54:	bgt	2ca5c <__assert_fail@plt+0x1a370>
   2ca58:	bx	lr
   2ca5c:	push	{lr}		; (str lr, [sp, #-4]!)
   2ca60:	ldr	lr, [r2, #8]
   2ca64:	ldr	r3, [lr, r3, lsl #2]
   2ca68:	cmn	r3, #1
   2ca6c:	popne	{pc}		; (ldrne pc, [sp], #4)
   2ca70:	add	r0, r0, #1
   2ca74:	add	r3, r0, r1
   2ca78:	cmp	ip, r3
   2ca7c:	bgt	2ca60 <__assert_fail@plt+0x1a374>
   2ca80:	pop	{pc}		; (ldr pc, [sp], #4)
   2ca84:	ldr	r3, [r0, #80]	; 0x50
   2ca88:	cmp	r3, #1
   2ca8c:	ldreq	r3, [r0, #4]
   2ca90:	ldrne	r3, [r0, #8]
   2ca94:	ldrbeq	r0, [r3, r1]
   2ca98:	ldrne	r0, [r3, r1, lsl #2]
   2ca9c:	bx	lr
   2caa0:	ldr	r3, [r0, #36]	; 0x24
   2caa4:	ldr	r2, [r0, #48]	; 0x30
   2caa8:	cmp	r3, r2
   2caac:	movlt	r2, r3
   2cab0:	ldr	r3, [r0, #28]
   2cab4:	cmp	r3, r2
   2cab8:	blt	2cac8 <__assert_fail@plt+0x1a3dc>
   2cabc:	str	r3, [r0, #28]
   2cac0:	str	r3, [r0, #32]
   2cac4:	bx	lr
   2cac8:	ldr	r1, [r0]
   2cacc:	ldr	ip, [r0, #24]
   2cad0:	add	r1, r1, r3
   2cad4:	ldrb	r1, [r1, ip]
   2cad8:	ldr	ip, [r0, #64]	; 0x40
   2cadc:	ldrb	ip, [ip, r1]
   2cae0:	ldr	r1, [r0, #4]
   2cae4:	strb	ip, [r1, r3]
   2cae8:	add	r3, r3, #1
   2caec:	b	2cab4 <__assert_fail@plt+0x1a3c8>
   2caf0:	ldr	r2, [r0, #4]
   2caf4:	cmp	r2, #0
   2caf8:	ble	2cb44 <__assert_fail@plt+0x1a458>
   2cafc:	sub	r2, r2, #1
   2cb00:	mov	r3, #0
   2cb04:	push	{lr}		; (str lr, [sp, #-4]!)
   2cb08:	cmp	r2, r3
   2cb0c:	ldr	lr, [r0, #8]
   2cb10:	bhi	2cb28 <__assert_fail@plt+0x1a43c>
   2cb14:	ldr	r2, [lr, r3, lsl #2]
   2cb18:	cmp	r1, r2
   2cb1c:	bne	2cb4c <__assert_fail@plt+0x1a460>
   2cb20:	add	r0, r3, #1
   2cb24:	pop	{pc}		; (ldr pc, [sp], #4)
   2cb28:	add	ip, r2, r3
   2cb2c:	lsr	ip, ip, #1
   2cb30:	ldr	lr, [lr, ip, lsl #2]
   2cb34:	cmp	lr, r1
   2cb38:	addlt	r3, ip, #1
   2cb3c:	movge	r2, ip
   2cb40:	b	2cb08 <__assert_fail@plt+0x1a41c>
   2cb44:	mov	r0, #0
   2cb48:	bx	lr
   2cb4c:	mov	r0, #0
   2cb50:	pop	{pc}		; (ldr pc, [sp], #4)
   2cb54:	ldr	r3, [r1, #40]	; 0x28
   2cb58:	ldr	ip, [r1, #56]	; 0x38
   2cb5c:	cmp	ip, r3
   2cb60:	movle	r3, #2
   2cb64:	strble	r3, [r0, #4]
   2cb68:	movle	r3, #0
   2cb6c:	ble	2cc90 <__assert_fail@plt+0x1a5a4>
   2cb70:	push	{r4, lr}
   2cb74:	ldr	lr, [r1, #4]
   2cb78:	ldrb	ip, [lr, r3]
   2cb7c:	strb	ip, [r0]
   2cb80:	ldr	r4, [r1, #80]	; 0x50
   2cb84:	cmp	r4, #1
   2cb88:	ble	2cbb4 <__assert_fail@plt+0x1a4c8>
   2cb8c:	ldr	r4, [r1, #28]
   2cb90:	cmp	r3, r4
   2cb94:	beq	2cbb4 <__assert_fail@plt+0x1a4c8>
   2cb98:	ldr	r4, [r1, #8]
   2cb9c:	ldr	r4, [r4, r3, lsl #2]
   2cba0:	cmn	r4, #1
   2cba4:	bne	2cbb4 <__assert_fail@plt+0x1a4c8>
   2cba8:	mov	r3, #1
   2cbac:	strb	r3, [r0, #4]
   2cbb0:	b	2cc40 <__assert_fail@plt+0x1a554>
   2cbb4:	cmp	ip, #92	; 0x5c
   2cbb8:	bne	2cbe0 <__assert_fail@plt+0x1a4f4>
   2cbbc:	tst	r2, #1
   2cbc0:	beq	2cba8 <__assert_fail@plt+0x1a4bc>
   2cbc4:	ldr	r2, [r1, #48]	; 0x30
   2cbc8:	add	r3, r3, #1
   2cbcc:	cmp	r3, r2
   2cbd0:	strlt	r3, [r1, #40]	; 0x28
   2cbd4:	ldrblt	r3, [lr, r3]
   2cbd8:	strblt	r3, [r0]
   2cbdc:	b	2cba8 <__assert_fail@plt+0x1a4bc>
   2cbe0:	cmp	ip, #91	; 0x5b
   2cbe4:	bne	2cc58 <__assert_fail@plt+0x1a56c>
   2cbe8:	ldr	r4, [r1, #48]	; 0x30
   2cbec:	add	ip, r3, #1
   2cbf0:	cmp	ip, r4
   2cbf4:	addlt	r3, lr, r3
   2cbf8:	movge	r3, #0
   2cbfc:	ldrblt	r3, [r3, #1]
   2cc00:	cmp	r3, #58	; 0x3a
   2cc04:	strb	r3, [r0]
   2cc08:	beq	2cc48 <__assert_fail@plt+0x1a55c>
   2cc0c:	cmp	r3, #61	; 0x3d
   2cc10:	beq	2cc34 <__assert_fail@plt+0x1a548>
   2cc14:	cmp	r3, #46	; 0x2e
   2cc18:	moveq	r3, #26
   2cc1c:	beq	2cc38 <__assert_fail@plt+0x1a54c>
   2cc20:	mov	r3, #1
   2cc24:	mov	r2, #91	; 0x5b
   2cc28:	strb	r3, [r0, #4]
   2cc2c:	strb	r2, [r0]
   2cc30:	b	2cc40 <__assert_fail@plt+0x1a554>
   2cc34:	mov	r3, #28
   2cc38:	strb	r3, [r0, #4]
   2cc3c:	mov	r3, #2
   2cc40:	mov	r0, r3
   2cc44:	pop	{r4, pc}
   2cc48:	tst	r2, #4
   2cc4c:	beq	2cc20 <__assert_fail@plt+0x1a534>
   2cc50:	mov	r3, #30
   2cc54:	b	2cc38 <__assert_fail@plt+0x1a54c>
   2cc58:	cmp	ip, #93	; 0x5d
   2cc5c:	beq	2cc80 <__assert_fail@plt+0x1a594>
   2cc60:	cmp	ip, #94	; 0x5e
   2cc64:	beq	2cc88 <__assert_fail@plt+0x1a59c>
   2cc68:	cmp	ip, #45	; 0x2d
   2cc6c:	moveq	r3, #22
   2cc70:	bne	2cba8 <__assert_fail@plt+0x1a4bc>
   2cc74:	strb	r3, [r0, #4]
   2cc78:	mov	r3, #1
   2cc7c:	b	2cc40 <__assert_fail@plt+0x1a554>
   2cc80:	mov	r3, #21
   2cc84:	b	2cc74 <__assert_fail@plt+0x1a588>
   2cc88:	mov	r3, #25
   2cc8c:	b	2cc74 <__assert_fail@plt+0x1a588>
   2cc90:	mov	r0, r3
   2cc94:	bx	lr
   2cc98:	ldrb	r3, [r1, #24]
   2cc9c:	cmp	r3, #17
   2cca0:	bne	2ccb8 <__assert_fail@plt+0x1a5cc>
   2cca4:	ldr	r3, [r1, #20]
   2cca8:	cmp	r0, r3
   2ccac:	ldrbeq	r3, [r1, #26]
   2ccb0:	orreq	r3, r3, #8
   2ccb4:	strbeq	r3, [r1, #26]
   2ccb8:	mov	r0, #0
   2ccbc:	bx	lr
   2ccc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ccc4:	sub	sp, sp, #44	; 0x2c
   2ccc8:	ldr	sl, [r0, #84]	; 0x54
   2cccc:	str	r3, [sp, #16]
   2ccd0:	mov	r6, r2
   2ccd4:	ldr	r2, [sp, #16]
   2ccd8:	ldr	r3, [sl, #24]
   2ccdc:	mov	r9, #12
   2cce0:	mov	fp, r0
   2cce4:	mla	r9, r9, r2, r3
   2cce8:	ldr	r2, [sp, #80]	; 0x50
   2ccec:	mov	r3, #24
   2ccf0:	mov	r4, r1
   2ccf4:	mul	r3, r3, r2
   2ccf8:	mov	r8, #0
   2ccfc:	str	r3, [sp, #24]
   2cd00:	mov	r3, #1
   2cd04:	lsl	r3, r3, r6
   2cd08:	str	r3, [sp, #12]
   2cd0c:	mvn	r3, r3
   2cd10:	str	r3, [sp, #32]
   2cd14:	and	r3, r1, #1
   2cd18:	str	r3, [sp, #36]	; 0x24
   2cd1c:	and	r3, r1, #2
   2cd20:	str	r3, [sp, #20]
   2cd24:	ldr	r3, [r9, #4]
   2cd28:	cmp	r8, r3
   2cd2c:	lsrge	r4, r4, #1
   2cd30:	andge	r0, r4, #1
   2cd34:	bge	2cdd8 <__assert_fail@plt+0x1a6ec>
   2cd38:	ldr	r3, [r9, #8]
   2cd3c:	ldr	r7, [r3, r8, lsl #2]
   2cd40:	ldr	r3, [sl]
   2cd44:	add	r2, r3, r7, lsl #3
   2cd48:	ldrb	r2, [r2, #4]
   2cd4c:	cmp	r2, #8
   2cd50:	beq	2ce50 <__assert_fail@plt+0x1a764>
   2cd54:	cmp	r2, #9
   2cd58:	beq	2ce6c <__assert_fail@plt+0x1a780>
   2cd5c:	cmp	r2, #4
   2cd60:	bne	2ce48 <__assert_fail@plt+0x1a75c>
   2cd64:	ldr	r3, [sp, #80]	; 0x50
   2cd68:	cmn	r3, #1
   2cd6c:	beq	2ce48 <__assert_fail@plt+0x1a75c>
   2cd70:	mov	r3, #12
   2cd74:	mul	r3, r3, r7
   2cd78:	str	r3, [sp, #28]
   2cd7c:	ldr	r3, [sp, #24]
   2cd80:	add	r5, r3, #24
   2cd84:	ldr	r3, [fp, #116]	; 0x74
   2cd88:	add	r5, r3, r5
   2cd8c:	ldr	r3, [r5, #-24]	; 0xffffffe8
   2cd90:	cmp	r7, r3
   2cd94:	bne	2ce38 <__assert_fail@plt+0x1a74c>
   2cd98:	cmp	r6, #31
   2cd9c:	bgt	2cdb0 <__assert_fail@plt+0x1a6c4>
   2cda0:	ldr	r3, [r5, #-8]
   2cda4:	ldr	r2, [sp, #12]
   2cda8:	tst	r2, r3
   2cdac:	beq	2ce38 <__assert_fail@plt+0x1a74c>
   2cdb0:	ldr	r2, [sp, #28]
   2cdb4:	ldr	r3, [sl, #20]
   2cdb8:	add	r3, r3, r2
   2cdbc:	ldr	r2, [sp, #16]
   2cdc0:	ldr	r3, [r3, #8]
   2cdc4:	ldr	r3, [r3]
   2cdc8:	cmp	r2, r3
   2cdcc:	bne	2cde0 <__assert_fail@plt+0x1a6f4>
   2cdd0:	ands	r0, r4, #1
   2cdd4:	mvnne	r0, #0
   2cdd8:	add	sp, sp, #44	; 0x2c
   2cddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cde0:	ldr	r2, [sp, #80]	; 0x50
   2cde4:	mov	r1, r4
   2cde8:	str	r2, [sp]
   2cdec:	mov	r0, fp
   2cdf0:	mov	r2, r6
   2cdf4:	bl	2ccc0 <__assert_fail@plt+0x1a5d4>
   2cdf8:	cmn	r0, #1
   2cdfc:	bne	2ce08 <__assert_fail@plt+0x1a71c>
   2ce00:	mvn	r0, #0
   2ce04:	b	2cdd8 <__assert_fail@plt+0x1a6ec>
   2ce08:	cmp	r0, #0
   2ce0c:	bne	2ce24 <__assert_fail@plt+0x1a738>
   2ce10:	ldr	r3, [sp, #20]
   2ce14:	cmp	r3, #0
   2ce18:	beq	2ce24 <__assert_fail@plt+0x1a738>
   2ce1c:	mov	r0, #0
   2ce20:	b	2cdd8 <__assert_fail@plt+0x1a6ec>
   2ce24:	cmp	r6, #31
   2ce28:	ldrle	r3, [r5, #-8]
   2ce2c:	ldrle	r2, [sp, #32]
   2ce30:	andle	r3, r3, r2
   2ce34:	strle	r3, [r5, #-8]
   2ce38:	add	r5, r5, #24
   2ce3c:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   2ce40:	cmp	r3, #0
   2ce44:	bne	2cd8c <__assert_fail@plt+0x1a6a0>
   2ce48:	add	r8, r8, #1
   2ce4c:	b	2cd24 <__assert_fail@plt+0x1a638>
   2ce50:	ldr	r2, [sp, #36]	; 0x24
   2ce54:	cmp	r2, #0
   2ce58:	beq	2ce48 <__assert_fail@plt+0x1a75c>
   2ce5c:	ldr	r3, [r3, r7, lsl #3]
   2ce60:	cmp	r3, r6
   2ce64:	bne	2ce48 <__assert_fail@plt+0x1a75c>
   2ce68:	b	2ce00 <__assert_fail@plt+0x1a714>
   2ce6c:	ldr	r2, [sp, #20]
   2ce70:	cmp	r2, #0
   2ce74:	beq	2ce48 <__assert_fail@plt+0x1a75c>
   2ce78:	ldr	r3, [r3, r7, lsl #3]
   2ce7c:	cmp	r6, r3
   2ce80:	bne	2ce48 <__assert_fail@plt+0x1a75c>
   2ce84:	b	2ce1c <__assert_fail@plt+0x1a730>
   2ce88:	push	{r4, r5, lr}
   2ce8c:	mov	lr, #24
   2ce90:	ldr	r5, [r0, #116]	; 0x74
   2ce94:	ldr	ip, [sp, #12]
   2ce98:	mla	r1, lr, r1, r5
   2ce9c:	ldr	r4, [sp, #16]
   2cea0:	ldr	lr, [r1, #8]
   2cea4:	cmp	lr, ip
   2cea8:	bgt	2cee0 <__assert_fail@plt+0x1a7f4>
   2ceac:	ldr	r1, [r1, #12]
   2ceb0:	cmp	ip, r1
   2ceb4:	bgt	2ceec <__assert_fail@plt+0x1a800>
   2ceb8:	cmp	ip, r1
   2cebc:	moveq	r1, #2
   2cec0:	movne	r1, #0
   2cec4:	cmp	lr, ip
   2cec8:	orreq	r1, r1, #1
   2cecc:	cmp	r1, #0
   2ced0:	beq	2cee4 <__assert_fail@plt+0x1a7f8>
   2ced4:	str	r4, [sp, #12]
   2ced8:	pop	{r4, r5, lr}
   2cedc:	b	2ccc0 <__assert_fail@plt+0x1a5d4>
   2cee0:	mvn	r1, #0
   2cee4:	mov	r0, r1
   2cee8:	pop	{r4, r5, pc}
   2ceec:	mov	r1, #1
   2cef0:	b	2cee4 <__assert_fail@plt+0x1a7f8>
   2cef4:	push	{r4, r5, lr}
   2cef8:	mov	r3, #0
   2cefc:	ldr	r4, [r0, #108]	; 0x6c
   2cf00:	mov	r5, #24
   2cf04:	mov	ip, r4
   2cf08:	cmp	ip, r3
   2cf0c:	bgt	2cf3c <__assert_fail@plt+0x1a850>
   2cf10:	cmp	r4, r3
   2cf14:	mvnle	r3, #0
   2cf18:	ble	2cf34 <__assert_fail@plt+0x1a848>
   2cf1c:	ldr	r0, [r0, #116]	; 0x74
   2cf20:	mov	r2, #24
   2cf24:	mla	r2, r2, r3, r0
   2cf28:	ldr	r2, [r2, #4]
   2cf2c:	cmp	r1, r2
   2cf30:	mvnne	r3, #0
   2cf34:	mov	r0, r3
   2cf38:	pop	{r4, r5, pc}
   2cf3c:	add	r2, ip, r3
   2cf40:	ldr	lr, [r0, #116]	; 0x74
   2cf44:	add	r2, r2, r2, lsr #31
   2cf48:	asr	r2, r2, #1
   2cf4c:	mla	lr, r5, r2, lr
   2cf50:	ldr	lr, [lr, #4]
   2cf54:	cmp	lr, r1
   2cf58:	addlt	r3, r2, #1
   2cf5c:	movge	ip, r2
   2cf60:	b	2cf08 <__assert_fail@plt+0x1a81c>
   2cf64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cf68:	mov	r6, r1
   2cf6c:	sub	sp, sp, #20
   2cf70:	mov	r1, r3
   2cf74:	mov	r5, r0
   2cf78:	mov	sl, r2
   2cf7c:	mov	r7, r3
   2cf80:	ldr	r9, [r0, #84]	; 0x54
   2cf84:	bl	2cef4 <__assert_fail@plt+0x1a808>
   2cf88:	ldr	r1, [sp, #60]	; 0x3c
   2cf8c:	mov	r4, #0
   2cf90:	str	r0, [sp, #8]
   2cf94:	mov	r0, r5
   2cf98:	bl	2cef4 <__assert_fail@plt+0x1a808>
   2cf9c:	str	r0, [sp, #12]
   2cfa0:	ldr	r3, [r6, #4]
   2cfa4:	cmp	r4, r3
   2cfa8:	blt	2cfb8 <__assert_fail@plt+0x1a8cc>
   2cfac:	mov	r0, #0
   2cfb0:	add	sp, sp, #20
   2cfb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cfb8:	ldr	r3, [r6, #8]
   2cfbc:	ldr	r2, [r5, #116]	; 0x74
   2cfc0:	mov	r0, r5
   2cfc4:	ldr	r1, [r3, r4, lsl #2]
   2cfc8:	mov	r3, #24
   2cfcc:	mul	r3, r3, r1
   2cfd0:	ldr	r2, [r2, r3]
   2cfd4:	ldr	r3, [r9]
   2cfd8:	ldr	r8, [r3, r2, lsl #3]
   2cfdc:	ldr	r3, [sp, #8]
   2cfe0:	mov	r2, r8
   2cfe4:	str	r3, [sp, #4]
   2cfe8:	str	r7, [sp]
   2cfec:	mov	r3, sl
   2cff0:	bl	2ce88 <__assert_fail@plt+0x1a79c>
   2cff4:	ldr	r3, [sp, #12]
   2cff8:	ldr	r1, [r6, #8]
   2cffc:	str	r3, [sp, #4]
   2d000:	ldr	r3, [sp, #60]	; 0x3c
   2d004:	mov	r2, r8
   2d008:	str	r3, [sp]
   2d00c:	ldr	r3, [sp, #56]	; 0x38
   2d010:	ldr	r1, [r1, r4, lsl #2]
   2d014:	mov	fp, r0
   2d018:	mov	r0, r5
   2d01c:	bl	2ce88 <__assert_fail@plt+0x1a79c>
   2d020:	cmp	fp, r0
   2d024:	addeq	r4, r4, #1
   2d028:	beq	2cfa0 <__assert_fail@plt+0x1a8b4>
   2d02c:	mov	r0, #1
   2d030:	b	2cfb0 <__assert_fail@plt+0x1a8c4>
   2d034:	push	{r4, r5, r6, lr}
   2d038:	mov	r4, r0
   2d03c:	mov	r5, r1
   2d040:	mov	r6, r2
   2d044:	ldr	r3, [r4, #4]
   2d048:	cmp	r3, #0
   2d04c:	bne	2d09c <__assert_fail@plt+0x1a9b0>
   2d050:	ldr	r3, [r4, #8]
   2d054:	cmp	r3, #0
   2d058:	bne	2d09c <__assert_fail@plt+0x1a9b0>
   2d05c:	mov	r1, r4
   2d060:	mov	r0, r6
   2d064:	blx	r5
   2d068:	cmp	r0, #0
   2d06c:	popne	{r4, r5, r6, pc}
   2d070:	ldr	r1, [r4]
   2d074:	cmp	r1, #0
   2d078:	popeq	{r4, r5, r6, pc}
   2d07c:	ldr	r3, [r1, #8]
   2d080:	cmp	r4, r3
   2d084:	cmpne	r3, #0
   2d088:	moveq	r2, #1
   2d08c:	movne	r2, #0
   2d090:	cmp	r2, #0
   2d094:	mov	r4, r1
   2d098:	bne	2d05c <__assert_fail@plt+0x1a970>
   2d09c:	mov	r4, r3
   2d0a0:	b	2d044 <__assert_fail@plt+0x1a958>
   2d0a4:	push	{r4, r5, r6, r7, r8, lr}
   2d0a8:	mov	r4, r0
   2d0ac:	mov	r5, r1
   2d0b0:	mov	r6, r2
   2d0b4:	mov	r7, #0
   2d0b8:	mov	r1, r4
   2d0bc:	mov	r0, r6
   2d0c0:	blx	r5
   2d0c4:	cmp	r0, #0
   2d0c8:	popne	{r4, r5, r6, r7, r8, pc}
   2d0cc:	ldr	r3, [r4, #4]
   2d0d0:	cmp	r3, #0
   2d0d4:	moveq	r1, r7
   2d0d8:	beq	2d0f8 <__assert_fail@plt+0x1aa0c>
   2d0dc:	mov	r4, r3
   2d0e0:	b	2d0b8 <__assert_fail@plt+0x1a9cc>
   2d0e4:	ldr	r3, [r4]
   2d0e8:	mov	r1, r4
   2d0ec:	cmp	r3, #0
   2d0f0:	popeq	{r4, r5, r6, r7, r8, pc}
   2d0f4:	mov	r4, r3
   2d0f8:	ldr	r3, [r4, #8]
   2d0fc:	cmp	r3, #0
   2d100:	cmpne	r1, r3
   2d104:	beq	2d0e4 <__assert_fail@plt+0x1a9f8>
   2d108:	b	2d0dc <__assert_fail@plt+0x1a9f0>
   2d10c:	ldr	r3, [r0, #80]	; 0x50
   2d110:	push	{r4, r5, r6, lr}
   2d114:	cmp	r3, #1
   2d118:	mov	r4, r0
   2d11c:	mov	r5, r1
   2d120:	ble	2d170 <__assert_fail@plt+0x1aa84>
   2d124:	cmn	r1, #-1073741823	; 0xc0000001
   2d128:	bls	2d134 <__assert_fail@plt+0x1aa48>
   2d12c:	mov	r0, #12
   2d130:	pop	{r4, r5, r6, pc}
   2d134:	lsl	r6, r1, #2
   2d138:	mov	r1, r6
   2d13c:	ldr	r0, [r0, #8]
   2d140:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   2d144:	cmp	r0, #0
   2d148:	beq	2d12c <__assert_fail@plt+0x1aa40>
   2d14c:	str	r0, [r4, #8]
   2d150:	ldr	r0, [r4, #12]
   2d154:	cmp	r0, #0
   2d158:	beq	2d170 <__assert_fail@plt+0x1aa84>
   2d15c:	mov	r1, r6
   2d160:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   2d164:	cmp	r0, #0
   2d168:	beq	2d12c <__assert_fail@plt+0x1aa40>
   2d16c:	str	r0, [r4, #12]
   2d170:	ldrb	r3, [r4, #75]	; 0x4b
   2d174:	cmp	r3, #0
   2d178:	beq	2d194 <__assert_fail@plt+0x1aaa8>
   2d17c:	mov	r1, r5
   2d180:	ldr	r0, [r4, #4]
   2d184:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   2d188:	cmp	r0, #0
   2d18c:	beq	2d12c <__assert_fail@plt+0x1aa40>
   2d190:	str	r0, [r4, #4]
   2d194:	str	r5, [r4, #36]	; 0x24
   2d198:	mov	r0, #0
   2d19c:	pop	{r4, r5, r6, pc}
   2d1a0:	push	{r4, r5, r6, lr}
   2d1a4:	mov	r5, r1
   2d1a8:	ldm	r0, {r1, r3}
   2d1ac:	mov	r4, r0
   2d1b0:	cmp	r1, r3
   2d1b4:	bne	2d1dc <__assert_fail@plt+0x1aaf0>
   2d1b8:	add	r1, r1, #1
   2d1bc:	lsl	r3, r1, #1
   2d1c0:	str	r3, [r0]
   2d1c4:	lsl	r1, r1, #3
   2d1c8:	ldr	r0, [r0, #8]
   2d1cc:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   2d1d0:	cmp	r0, #0
   2d1d4:	popeq	{r4, r5, r6, pc}
   2d1d8:	str	r0, [r4, #8]
   2d1dc:	ldr	r3, [r4, #4]
   2d1e0:	ldr	r2, [r4, #8]
   2d1e4:	add	r1, r3, #1
   2d1e8:	str	r1, [r4, #4]
   2d1ec:	mov	r0, #1
   2d1f0:	str	r5, [r2, r3, lsl #2]
   2d1f4:	pop	{r4, r5, r6, pc}
   2d1f8:	mov	r2, #32
   2d1fc:	mov	r1, #0
   2d200:	b	12434 <memset@plt>
   2d204:	push	{r4, r5, r6, r7, r8, lr}
   2d208:	mov	r7, r3
   2d20c:	ldr	r3, [r0, #64]	; 0x40
   2d210:	mov	r4, r0
   2d214:	cmp	r3, #31
   2d218:	mov	r5, r1
   2d21c:	mov	r6, r2
   2d220:	bne	2d248 <__assert_fail@plt+0x1ab5c>
   2d224:	mov	r0, #996	; 0x3e4
   2d228:	bl	2bf10 <__assert_fail@plt+0x19824>
   2d22c:	subs	lr, r0, #0
   2d230:	beq	2d2a8 <__assert_fail@plt+0x1abbc>
   2d234:	ldr	r3, [r4, #56]	; 0x38
   2d238:	str	lr, [r4, #56]	; 0x38
   2d23c:	str	r3, [lr]
   2d240:	mov	r3, #0
   2d244:	str	r3, [r4, #64]	; 0x40
   2d248:	ldr	r1, [r4, #64]	; 0x40
   2d24c:	ldr	ip, [r4, #56]	; 0x38
   2d250:	add	r3, r1, #1
   2d254:	lsl	r1, r1, #5
   2d258:	add	lr, r1, #4
   2d25c:	str	r3, [r4, #64]	; 0x40
   2d260:	add	lr, ip, lr
   2d264:	mov	r3, #0
   2d268:	add	ip, ip, r1
   2d26c:	add	r2, ip, #24
   2d270:	stmib	ip, {r3, r5, r6}
   2d274:	cmp	r5, #0
   2d278:	ldm	r7, {r0, r1}
   2d27c:	stm	r2, {r0, r1}
   2d280:	ldrb	r2, [ip, #30]
   2d284:	str	r3, [ip, #16]
   2d288:	str	r3, [ip, #20]
   2d28c:	and	r2, r2, #243	; 0xf3
   2d290:	mvn	r3, #0
   2d294:	strb	r2, [ip, #30]
   2d298:	str	r3, [ip, #32]
   2d29c:	strne	lr, [r5]
   2d2a0:	cmp	r6, #0
   2d2a4:	strne	lr, [r6]
   2d2a8:	mov	r0, lr
   2d2ac:	pop	{r4, r5, r6, r7, r8, pc}
   2d2b0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   2d2b4:	mov	r4, r0
   2d2b8:	ldr	r5, [r0]
   2d2bc:	mov	r8, r1
   2d2c0:	add	r6, sp, #4
   2d2c4:	mov	r7, #0
   2d2c8:	add	r3, r4, #20
   2d2cc:	mov	r2, r7
   2d2d0:	mov	r1, #0
   2d2d4:	mov	r0, r8
   2d2d8:	bl	2d204 <__assert_fail@plt+0x1ab18>
   2d2dc:	cmp	r0, #0
   2d2e0:	str	r0, [r6]
   2d2e4:	beq	2d344 <__assert_fail@plt+0x1ac58>
   2d2e8:	str	r5, [r0]
   2d2ec:	ldr	r5, [r6]
   2d2f0:	ldrb	r3, [r5, #26]
   2d2f4:	orr	r3, r3, #4
   2d2f8:	strb	r3, [r5, #26]
   2d2fc:	ldr	r3, [r4, #4]
   2d300:	cmp	r3, #0
   2d304:	addne	r6, r5, #4
   2d308:	bne	2d324 <__assert_fail@plt+0x1ac38>
   2d30c:	mov	r2, r7
   2d310:	ldr	r3, [r4, #8]
   2d314:	cmp	r3, #0
   2d318:	cmpne	r2, r3
   2d31c:	beq	2d32c <__assert_fail@plt+0x1ac40>
   2d320:	add	r6, r5, #8
   2d324:	mov	r4, r3
   2d328:	b	2d2c8 <__assert_fail@plt+0x1abdc>
   2d32c:	ldr	r3, [r4]
   2d330:	ldr	r5, [r5]
   2d334:	cmp	r3, #0
   2d338:	mov	r2, r4
   2d33c:	bne	2d34c <__assert_fail@plt+0x1ac60>
   2d340:	ldr	r0, [sp, #4]
   2d344:	add	sp, sp, #8
   2d348:	pop	{r4, r5, r6, r7, r8, pc}
   2d34c:	mov	r4, r3
   2d350:	b	2d310 <__assert_fail@plt+0x1ac24>
   2d354:	mov	ip, #0
   2d358:	push	{r0, r1, r2, lr}
   2d35c:	str	ip, [sp, #4]
   2d360:	strb	r3, [sp, #4]
   2d364:	mov	r3, sp
   2d368:	str	ip, [sp]
   2d36c:	bl	2d204 <__assert_fail@plt+0x1ab18>
   2d370:	add	sp, sp, #12
   2d374:	pop	{pc}		; (ldr pc, [sp], #4)
   2d378:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d37c:	ldr	r9, [r1]
   2d380:	ldr	r4, [r2, #4]
   2d384:	ldrb	r1, [r1, #28]
   2d388:	adds	r3, r4, #0
   2d38c:	movne	r3, #1
   2d390:	ands	r3, r3, r1, lsr #4
   2d394:	beq	2d3b4 <__assert_fail@plt+0x1acc8>
   2d398:	ldr	r1, [r2, #20]
   2d39c:	cmp	r1, #31
   2d3a0:	bgt	2d44c <__assert_fail@plt+0x1ad60>
   2d3a4:	ldr	r3, [r9, #80]	; 0x50
   2d3a8:	lsr	r3, r3, r1
   2d3ac:	tst	r3, #1
   2d3b0:	beq	2d44c <__assert_fail@plt+0x1ad60>
   2d3b4:	mov	sl, r2
   2d3b8:	mov	r2, #0
   2d3bc:	mov	r1, r2
   2d3c0:	mov	r3, #8
   2d3c4:	mov	r7, r0
   2d3c8:	mov	r0, r9
   2d3cc:	bl	2d354 <__assert_fail@plt+0x1ac68>
   2d3d0:	mov	r2, #0
   2d3d4:	mov	r3, #9
   2d3d8:	mov	r1, r2
   2d3dc:	mov	r6, r0
   2d3e0:	mov	r0, r9
   2d3e4:	bl	2d354 <__assert_fail@plt+0x1ac68>
   2d3e8:	cmp	r4, #0
   2d3ec:	mov	r5, r0
   2d3f0:	moveq	r8, r0
   2d3f4:	beq	2d410 <__assert_fail@plt+0x1ad24>
   2d3f8:	mov	r2, r0
   2d3fc:	mov	r3, #16
   2d400:	mov	r1, r4
   2d404:	mov	r0, r9
   2d408:	bl	2d354 <__assert_fail@plt+0x1ac68>
   2d40c:	mov	r8, r0
   2d410:	mov	r3, #16
   2d414:	mov	r2, r8
   2d418:	mov	r1, r6
   2d41c:	mov	r0, r9
   2d420:	bl	2d354 <__assert_fail@plt+0x1ac68>
   2d424:	cmp	r8, #0
   2d428:	cmpne	r0, #0
   2d42c:	mov	r4, r0
   2d430:	beq	2d440 <__assert_fail@plt+0x1ad54>
   2d434:	cmp	r5, #0
   2d438:	cmpne	r6, #0
   2d43c:	bne	2d454 <__assert_fail@plt+0x1ad68>
   2d440:	mov	r4, #0
   2d444:	mov	r3, #12
   2d448:	str	r3, [r7]
   2d44c:	mov	r0, r4
   2d450:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d454:	ldr	r3, [sl, #20]
   2d458:	str	r3, [r5, #20]
   2d45c:	str	r3, [r6, #20]
   2d460:	ldrb	r3, [sl, #26]
   2d464:	ldrb	r2, [r5, #26]
   2d468:	and	r3, r3, #8
   2d46c:	bic	r2, r2, #8
   2d470:	orr	r2, r3, r2
   2d474:	strb	r2, [r5, #26]
   2d478:	ldrb	r2, [r6, #26]
   2d47c:	bic	r2, r2, #8
   2d480:	orr	r3, r3, r2
   2d484:	strb	r3, [r6, #26]
   2d488:	b	2d44c <__assert_fail@plt+0x1ad60>
   2d48c:	push	{r0, r1, r2, r4, r5, lr}
   2d490:	mov	r3, #0
   2d494:	ldr	r2, [r1, #4]
   2d498:	mov	r5, r0
   2d49c:	cmp	r2, r3
   2d4a0:	mov	r4, r1
   2d4a4:	str	r3, [sp, #4]
   2d4a8:	beq	2d4d0 <__assert_fail@plt+0x1ade4>
   2d4ac:	ldrb	r3, [r2, #24]
   2d4b0:	cmp	r3, #17
   2d4b4:	bne	2d4d0 <__assert_fail@plt+0x1ade4>
   2d4b8:	mov	r1, r0
   2d4bc:	add	r0, sp, #4
   2d4c0:	bl	2d378 <__assert_fail@plt+0x1ac8c>
   2d4c4:	cmp	r0, #0
   2d4c8:	str	r0, [r4, #4]
   2d4cc:	strne	r4, [r0]
   2d4d0:	ldr	r2, [r4, #8]
   2d4d4:	cmp	r2, #0
   2d4d8:	beq	2d500 <__assert_fail@plt+0x1ae14>
   2d4dc:	ldrb	r3, [r2, #24]
   2d4e0:	cmp	r3, #17
   2d4e4:	bne	2d500 <__assert_fail@plt+0x1ae14>
   2d4e8:	mov	r1, r5
   2d4ec:	add	r0, sp, #4
   2d4f0:	bl	2d378 <__assert_fail@plt+0x1ac8c>
   2d4f4:	cmp	r0, #0
   2d4f8:	str	r0, [r4, #8]
   2d4fc:	strne	r4, [r0]
   2d500:	ldr	r0, [sp, #4]
   2d504:	add	sp, sp, #12
   2d508:	pop	{r4, r5, pc}
   2d50c:	mov	r3, #1
   2d510:	push	{r4, r5, r6, lr}
   2d514:	mov	r4, r0
   2d518:	str	r3, [r0]
   2d51c:	str	r3, [r0, #4]
   2d520:	mov	r0, #4
   2d524:	mov	r5, r1
   2d528:	bl	2bf10 <__assert_fail@plt+0x19824>
   2d52c:	cmp	r0, #0
   2d530:	str	r0, [r4, #8]
   2d534:	streq	r0, [r4, #4]
   2d538:	streq	r0, [r4]
   2d53c:	strne	r5, [r0]
   2d540:	moveq	r0, #12
   2d544:	movne	r0, #0
   2d548:	pop	{r4, r5, r6, pc}
   2d54c:	mov	r3, #0
   2d550:	push	{r4, lr}
   2d554:	mov	r4, r0
   2d558:	str	r1, [r0]
   2d55c:	str	r3, [r0, #4]
   2d560:	lsl	r0, r1, #2
   2d564:	bl	2bf10 <__assert_fail@plt+0x19824>
   2d568:	cmp	r0, #0
   2d56c:	str	r0, [r4, #8]
   2d570:	moveq	r0, #12
   2d574:	movne	r0, #0
   2d578:	pop	{r4, pc}
   2d57c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d580:	mov	r7, r1
   2d584:	mov	r9, r0
   2d588:	str	r2, [r7], #16
   2d58c:	mov	r5, r1
   2d590:	mov	r0, r7
   2d594:	ldr	r1, [r1, #8]
   2d598:	mov	r4, r2
   2d59c:	bl	2d54c <__assert_fail@plt+0x1ae60>
   2d5a0:	subs	r8, r0, #0
   2d5a4:	moveq	r6, r8
   2d5a8:	beq	2d5d8 <__assert_fail@plt+0x1aeec>
   2d5ac:	mov	r8, #12
   2d5b0:	mov	r0, r8
   2d5b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d5b8:	ldr	r3, [r5, #12]
   2d5bc:	ldr	r1, [r3, r6, lsl #2]
   2d5c0:	ldr	r3, [r9]
   2d5c4:	add	r3, r3, r1, lsl #3
   2d5c8:	ldrb	r3, [r3, #4]
   2d5cc:	tst	r3, #8
   2d5d0:	beq	2d648 <__assert_fail@plt+0x1af5c>
   2d5d4:	add	r6, r6, #1
   2d5d8:	ldr	r3, [r5, #8]
   2d5dc:	cmp	r6, r3
   2d5e0:	blt	2d5b8 <__assert_fail@plt+0x1aecc>
   2d5e4:	ldr	r3, [r9, #68]	; 0x44
   2d5e8:	ldr	r7, [r9, #32]
   2d5ec:	and	r4, r4, r3
   2d5f0:	mov	r3, #12
   2d5f4:	mul	r4, r3, r4
   2d5f8:	add	r6, r7, r4
   2d5fc:	ldr	r1, [r7, r4]
   2d600:	ldr	r3, [r6, #4]
   2d604:	cmp	r3, r1
   2d608:	bgt	2d630 <__assert_fail@plt+0x1af44>
   2d60c:	add	r1, r1, #1
   2d610:	ldr	r0, [r6, #8]
   2d614:	lsl	r9, r1, #1
   2d618:	lsl	r1, r1, #3
   2d61c:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   2d620:	cmp	r0, #0
   2d624:	beq	2d5ac <__assert_fail@plt+0x1aec0>
   2d628:	str	r0, [r6, #8]
   2d62c:	str	r9, [r6, #4]
   2d630:	ldr	r3, [r7, r4]
   2d634:	ldr	r2, [r6, #8]
   2d638:	add	r1, r3, #1
   2d63c:	str	r1, [r7, r4]
   2d640:	str	r5, [r2, r3, lsl #2]
   2d644:	b	2d5b0 <__assert_fail@plt+0x1aec4>
   2d648:	mov	r0, r7
   2d64c:	bl	2d1a0 <__assert_fail@plt+0x1aab4>
   2d650:	cmp	r0, #0
   2d654:	bne	2d5d4 <__assert_fail@plt+0x1aee8>
   2d658:	b	2d5ac <__assert_fail@plt+0x1aec0>
   2d65c:	push	{r4, r5, r6, r7, r8, r9, lr}
   2d660:	sub	sp, sp, #84	; 0x54
   2d664:	ldr	r8, [r0, #36]	; 0x24
   2d668:	ldr	r3, [r0, #48]	; 0x30
   2d66c:	ldr	r5, [r0, #28]
   2d670:	cmp	r8, r3
   2d674:	mov	r4, r0
   2d678:	movge	r8, r3
   2d67c:	add	r7, sp, #8
   2d680:	add	r9, sp, #16
   2d684:	cmp	r5, r8
   2d688:	bge	2d7a0 <__assert_fail@plt+0x1b0b4>
   2d68c:	add	r6, r4, #16
   2d690:	ldr	r3, [r4, #64]	; 0x40
   2d694:	ldm	r6, {r0, r1}
   2d698:	cmp	r3, #0
   2d69c:	sub	r2, r8, r5
   2d6a0:	stm	r7, {r0, r1}
   2d6a4:	movne	r3, #0
   2d6a8:	bne	2d6f0 <__assert_fail@plt+0x1b004>
   2d6ac:	ldr	r1, [r4, #24]
   2d6b0:	add	r3, r5, r1
   2d6b4:	ldr	r1, [r4]
   2d6b8:	add	r1, r1, r3
   2d6bc:	b	2d708 <__assert_fail@plt+0x1b01c>
   2d6c0:	ldr	r1, [r4]
   2d6c4:	ldr	r0, [r4, #24]
   2d6c8:	add	r1, r1, r5
   2d6cc:	add	r1, r1, r3
   2d6d0:	ldrb	r1, [r1, r0]
   2d6d4:	ldr	r0, [r4, #64]	; 0x40
   2d6d8:	ldrb	r0, [r0, r1]
   2d6dc:	ldr	r1, [r4, #4]
   2d6e0:	add	r1, r1, r5
   2d6e4:	strb	r0, [r1, r3]
   2d6e8:	strb	r0, [r9, r3]
   2d6ec:	add	r3, r3, #1
   2d6f0:	ldr	r1, [r4, #80]	; 0x50
   2d6f4:	cmp	r2, r1
   2d6f8:	movlt	r1, r2
   2d6fc:	cmp	r3, r1
   2d700:	blt	2d6c0 <__assert_fail@plt+0x1afd4>
   2d704:	mov	r1, r9
   2d708:	mov	r3, r6
   2d70c:	add	r0, sp, #4
   2d710:	bl	2bf50 <__assert_fail@plt+0x19864>
   2d714:	sub	r3, r0, #1
   2d718:	cmn	r3, #3
   2d71c:	bhi	2d738 <__assert_fail@plt+0x1b04c>
   2d720:	cmn	r0, #2
   2d724:	bne	2d768 <__assert_fail@plt+0x1b07c>
   2d728:	ldr	r2, [r4, #36]	; 0x24
   2d72c:	ldr	r3, [r4, #48]	; 0x30
   2d730:	cmp	r2, r3
   2d734:	blt	2d798 <__assert_fail@plt+0x1b0ac>
   2d738:	ldr	r3, [r4]
   2d73c:	ldr	r2, [r4, #24]
   2d740:	add	r3, r3, r5
   2d744:	ldm	r7, {r0, r1}
   2d748:	ldrb	r3, [r3, r2]
   2d74c:	ldr	r2, [r4, #64]	; 0x40
   2d750:	cmp	r2, #0
   2d754:	str	r3, [sp, #4]
   2d758:	ldrbne	r3, [r2, r3]
   2d75c:	stm	r6, {r0, r1}
   2d760:	mov	r0, #1
   2d764:	strne	r3, [sp, #4]
   2d768:	ldr	r2, [r4, #8]
   2d76c:	ldr	r3, [sp, #4]
   2d770:	add	r0, r5, r0
   2d774:	str	r3, [r2, r5, lsl #2]
   2d778:	mvn	r1, #0
   2d77c:	add	r3, r5, #1
   2d780:	cmp	r3, r0
   2d784:	mov	r5, r3
   2d788:	bge	2d684 <__assert_fail@plt+0x1af98>
   2d78c:	str	r1, [r2, r3, lsl #2]
   2d790:	add	r3, r3, #1
   2d794:	b	2d780 <__assert_fail@plt+0x1b094>
   2d798:	ldm	r7, {r0, r1}
   2d79c:	stm	r6, {r0, r1}
   2d7a0:	str	r5, [r4, #28]
   2d7a4:	str	r5, [r4, #32]
   2d7a8:	add	sp, sp, #84	; 0x54
   2d7ac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2d7b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d7b4:	mov	r4, r0
   2d7b8:	ldr	r3, [r0, #48]	; 0x30
   2d7bc:	ldr	r7, [r0, #36]	; 0x24
   2d7c0:	sub	sp, sp, #100	; 0x64
   2d7c4:	cmp	r7, r3
   2d7c8:	movge	r7, r3
   2d7cc:	ldrb	r3, [r0, #74]	; 0x4a
   2d7d0:	ldr	r6, [r0, #28]
   2d7d4:	cmp	r3, #0
   2d7d8:	bne	2d7fc <__assert_fail@plt+0x1b110>
   2d7dc:	ldr	r3, [r0, #64]	; 0x40
   2d7e0:	cmp	r3, #0
   2d7e4:	bne	2d7fc <__assert_fail@plt+0x1b110>
   2d7e8:	ldrb	r3, [r0, #76]	; 0x4c
   2d7ec:	cmp	r3, #0
   2d7f0:	moveq	r5, r6
   2d7f4:	addeq	r8, sp, #24
   2d7f8:	beq	2d85c <__assert_fail@plt+0x1b170>
   2d7fc:	ldr	r5, [r4, #32]
   2d800:	cmp	r6, r7
   2d804:	blt	2d910 <__assert_fail@plt+0x1b224>
   2d808:	b	2d9e0 <__assert_fail@plt+0x1b2f4>
   2d80c:	ldr	fp, [r4]
   2d810:	ldr	sl, [r4, #24]
   2d814:	add	r3, fp, r5
   2d818:	add	r6, r4, #16
   2d81c:	ldrb	r9, [r3, sl]
   2d820:	tst	r9, #128	; 0x80
   2d824:	bne	2d868 <__assert_fail@plt+0x1b17c>
   2d828:	mov	r0, r6
   2d82c:	bl	12134 <mbsinit@plt>
   2d830:	cmp	r0, #0
   2d834:	beq	2d868 <__assert_fail@plt+0x1b17c>
   2d838:	mov	r0, r9
   2d83c:	bl	12674 <towupper@plt>
   2d840:	bics	r3, r0, #127	; 0x7f
   2d844:	bne	2d868 <__assert_fail@plt+0x1b17c>
   2d848:	ldr	r3, [r4, #4]
   2d84c:	strb	r0, [r3, r5]
   2d850:	ldr	r3, [r4, #8]
   2d854:	str	r0, [r3, r5, lsl #2]
   2d858:	add	r5, r5, #1
   2d85c:	cmp	r5, r7
   2d860:	blt	2d80c <__assert_fail@plt+0x1b120>
   2d864:	b	2da4c <__assert_fail@plt+0x1b360>
   2d868:	ldm	r6, {r0, r1}
   2d86c:	mov	r3, r6
   2d870:	sub	r2, r7, r5
   2d874:	stm	r8, {r0, r1}
   2d878:	add	r1, sl, r5
   2d87c:	add	r1, fp, r1
   2d880:	add	r0, sp, #20
   2d884:	str	r5, [sp, #4]
   2d888:	bl	2bf50 <__assert_fail@plt+0x19864>
   2d88c:	sub	r3, r0, #1
   2d890:	cmn	r3, #4
   2d894:	mov	sl, r0
   2d898:	bhi	2da04 <__assert_fail@plt+0x1b318>
   2d89c:	ldr	r9, [sp, #20]
   2d8a0:	mov	r0, r9
   2d8a4:	bl	12674 <towupper@plt>
   2d8a8:	cmp	r9, r0
   2d8ac:	mov	r6, r0
   2d8b0:	beq	2d9e8 <__assert_fail@plt+0x1b2fc>
   2d8b4:	mov	r1, r0
   2d8b8:	mov	r2, r8
   2d8bc:	add	r0, sp, #32
   2d8c0:	bl	11fc0 <wcrtomb@plt>
   2d8c4:	cmp	sl, r0
   2d8c8:	bne	2d90c <__assert_fail@plt+0x1b220>
   2d8cc:	ldr	r0, [r4, #4]
   2d8d0:	mov	r2, sl
   2d8d4:	add	r1, sp, #32
   2d8d8:	add	r0, r0, r5
   2d8dc:	bl	120f8 <memcpy@plt>
   2d8e0:	ldr	r2, [r4, #8]
   2d8e4:	add	sl, r5, sl
   2d8e8:	add	r3, r5, #1
   2d8ec:	mvn	r1, #0
   2d8f0:	str	r6, [r2, r5, lsl #2]
   2d8f4:	cmp	r3, sl
   2d8f8:	mov	r5, r3
   2d8fc:	bge	2d85c <__assert_fail@plt+0x1b170>
   2d900:	str	r1, [r2, r3, lsl #2]
   2d904:	add	r3, r3, #1
   2d908:	b	2d8f4 <__assert_fail@plt+0x1b208>
   2d90c:	mov	r6, r5
   2d910:	add	r3, r4, #16
   2d914:	ldr	ip, [r4, #64]	; 0x40
   2d918:	ldm	r3, {r0, r1}
   2d91c:	add	sl, sp, #24
   2d920:	cmp	ip, #0
   2d924:	sub	r2, r7, r6
   2d928:	str	r3, [sp, #4]
   2d92c:	stm	sl, {r0, r1}
   2d930:	beq	2da84 <__assert_fail@plt+0x1b398>
   2d934:	ldr	r0, [r4, #80]	; 0x50
   2d938:	mov	r3, #0
   2d93c:	cmp	r2, r0
   2d940:	movlt	r0, r2
   2d944:	add	r9, sp, #32
   2d948:	cmp	r3, r0
   2d94c:	blt	2da60 <__assert_fail@plt+0x1b374>
   2d950:	ldr	r3, [sp, #4]
   2d954:	mov	r1, r9
   2d958:	add	r0, sp, #20
   2d95c:	bl	2bf50 <__assert_fail@plt+0x19864>
   2d960:	sub	r3, r0, #1
   2d964:	cmn	r3, #4
   2d968:	mov	r8, r0
   2d96c:	str	r3, [sp, #8]
   2d970:	bhi	2dc08 <__assert_fail@plt+0x1b51c>
   2d974:	ldr	r3, [sp, #20]
   2d978:	mov	r0, r3
   2d97c:	str	r3, [sp, #12]
   2d980:	bl	12674 <towupper@plt>
   2d984:	ldr	r3, [sp, #12]
   2d988:	cmp	r3, r0
   2d98c:	mov	fp, r0
   2d990:	beq	2db94 <__assert_fail@plt+0x1b4a8>
   2d994:	mov	r1, r0
   2d998:	mov	r2, sl
   2d99c:	add	r0, sp, #32
   2d9a0:	bl	11fc0 <wcrtomb@plt>
   2d9a4:	cmp	r8, r0
   2d9a8:	mov	r3, r0
   2d9ac:	moveq	r2, r8
   2d9b0:	ldreq	r0, [r4, #4]
   2d9b4:	addeq	r1, sp, #32
   2d9b8:	beq	2dba0 <__assert_fail@plt+0x1b4b4>
   2d9bc:	cmn	r3, #1
   2d9c0:	beq	2db94 <__assert_fail@plt+0x1b4a8>
   2d9c4:	ldr	r0, [r4, #36]	; 0x24
   2d9c8:	add	r9, r3, r6
   2d9cc:	cmp	r9, r0
   2d9d0:	bls	2da98 <__assert_fail@plt+0x1b3ac>
   2d9d4:	ldm	sl, {r0, r1}
   2d9d8:	ldr	r3, [sp, #4]
   2d9dc:	stm	r3, {r0, r1}
   2d9e0:	str	r6, [r4, #28]
   2d9e4:	b	2da50 <__assert_fail@plt+0x1b364>
   2d9e8:	ldr	r3, [r4, #24]
   2d9ec:	ldr	r1, [r4]
   2d9f0:	add	r3, r5, r3
   2d9f4:	ldr	r0, [r4, #4]
   2d9f8:	mov	r2, sl
   2d9fc:	add	r1, r1, r3
   2da00:	b	2d8d8 <__assert_fail@plt+0x1b1ec>
   2da04:	cmn	r3, #3
   2da08:	bne	2da1c <__assert_fail@plt+0x1b330>
   2da0c:	ldr	r2, [r4, #36]	; 0x24
   2da10:	ldr	r3, [r4, #48]	; 0x30
   2da14:	cmp	r2, r3
   2da18:	blt	2da44 <__assert_fail@plt+0x1b358>
   2da1c:	ldr	r3, [r4, #4]
   2da20:	ldr	r2, [sp, #4]
   2da24:	cmn	sl, #1
   2da28:	strb	r9, [r3, r5]
   2da2c:	ldr	r3, [r4, #8]
   2da30:	add	r5, r5, #1
   2da34:	str	r9, [r3, r2, lsl #2]
   2da38:	ldmeq	r8, {r0, r1}
   2da3c:	stmeq	r6, {r0, r1}
   2da40:	b	2d85c <__assert_fail@plt+0x1b170>
   2da44:	ldm	r8, {r0, r1}
   2da48:	stm	r6, {r0, r1}
   2da4c:	str	r5, [r4, #28]
   2da50:	mov	r0, #0
   2da54:	str	r5, [r4, #32]
   2da58:	add	sp, sp, #100	; 0x64
   2da5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2da60:	ldr	r1, [r4]
   2da64:	ldr	lr, [r4, #24]
   2da68:	add	r1, r1, r5
   2da6c:	add	r1, r1, r3
   2da70:	ldrb	r1, [r1, lr]
   2da74:	ldrb	r1, [ip, r1]
   2da78:	strb	r1, [r9, r3]
   2da7c:	add	r3, r3, #1
   2da80:	b	2d948 <__assert_fail@plt+0x1b25c>
   2da84:	ldr	r9, [r4, #24]
   2da88:	add	r3, r5, r9
   2da8c:	ldr	r9, [r4]
   2da90:	add	r9, r9, r3
   2da94:	b	2d950 <__assert_fail@plt+0x1b264>
   2da98:	ldr	r2, [r4, #12]
   2da9c:	cmp	r2, #0
   2daa0:	bne	2dac4 <__assert_fail@plt+0x1b3d8>
   2daa4:	lsl	r0, r0, #2
   2daa8:	str	r3, [sp, #4]
   2daac:	bl	2bf10 <__assert_fail@plt+0x19824>
   2dab0:	ldr	r3, [sp, #4]
   2dab4:	cmp	r0, #0
   2dab8:	str	r0, [r4, #12]
   2dabc:	moveq	r0, #12
   2dac0:	beq	2da58 <__assert_fail@plt+0x1b36c>
   2dac4:	ldrb	r2, [r4, #76]	; 0x4c
   2dac8:	cmp	r2, #0
   2dacc:	beq	2db60 <__assert_fail@plt+0x1b474>
   2dad0:	ldr	r0, [r4, #4]
   2dad4:	mov	r2, r3
   2dad8:	add	r1, sp, #32
   2dadc:	add	r0, r0, r6
   2dae0:	str	r3, [sp, #4]
   2dae4:	bl	120f8 <memcpy@plt>
   2dae8:	ldr	r1, [r4, #8]
   2daec:	ldr	r0, [r4, #12]
   2daf0:	lsl	r2, r6, #2
   2daf4:	ldr	r3, [sp, #4]
   2daf8:	add	ip, r1, r2
   2dafc:	str	fp, [r1, r6, lsl #2]
   2db00:	mvn	lr, #0
   2db04:	add	r1, r0, r2
   2db08:	mov	r2, #1
   2db0c:	str	r5, [r0, r6, lsl #2]
   2db10:	cmp	r2, r3
   2db14:	bcc	2db74 <__assert_fail@plt+0x1b488>
   2db18:	ldr	r2, [r4, #52]	; 0x34
   2db1c:	ldr	r7, [r4, #48]	; 0x30
   2db20:	cmp	r5, r2
   2db24:	sub	r3, r3, r8
   2db28:	ldrlt	r2, [r4, #56]	; 0x38
   2db2c:	add	r7, r3, r7
   2db30:	addlt	r3, r2, r3
   2db34:	strlt	r3, [r4, #56]	; 0x38
   2db38:	ldr	r3, [r4, #36]	; 0x24
   2db3c:	str	r7, [r4, #48]	; 0x30
   2db40:	cmp	r7, r3
   2db44:	movge	r7, r3
   2db48:	mov	r6, r9
   2db4c:	add	r5, r5, r8
   2db50:	b	2d800 <__assert_fail@plt+0x1b114>
   2db54:	ldr	r1, [r4, #12]
   2db58:	str	r2, [r1, r2, lsl #2]
   2db5c:	add	r2, r2, #1
   2db60:	cmp	r2, r6
   2db64:	bne	2db54 <__assert_fail@plt+0x1b468>
   2db68:	mov	r2, #1
   2db6c:	strb	r2, [r4, #76]	; 0x4c
   2db70:	b	2dad0 <__assert_fail@plt+0x1b3e4>
   2db74:	ldr	r0, [sp, #8]
   2db78:	cmp	r2, r8
   2db7c:	movcc	r0, r2
   2db80:	add	r0, r5, r0
   2db84:	str	r0, [r1, r2, lsl #2]
   2db88:	str	lr, [ip, r2, lsl #2]
   2db8c:	add	r2, r2, #1
   2db90:	b	2db10 <__assert_fail@plt+0x1b424>
   2db94:	ldr	r0, [r4, #4]
   2db98:	mov	r2, r8
   2db9c:	mov	r1, r9
   2dba0:	add	r0, r0, r6
   2dba4:	bl	120f8 <memcpy@plt>
   2dba8:	ldrb	r3, [r4, #76]	; 0x4c
   2dbac:	cmp	r3, #0
   2dbb0:	bne	2dbe4 <__assert_fail@plt+0x1b4f8>
   2dbb4:	ldr	r2, [r4, #8]
   2dbb8:	add	r5, r5, r8
   2dbbc:	add	r3, r6, #1
   2dbc0:	add	r8, r6, r8
   2dbc4:	mvn	r1, #0
   2dbc8:	str	fp, [r2, r6, lsl #2]
   2dbcc:	cmp	r3, r8
   2dbd0:	mov	r6, r3
   2dbd4:	bge	2d800 <__assert_fail@plt+0x1b114>
   2dbd8:	str	r1, [r2, r3, lsl #2]
   2dbdc:	add	r3, r3, #1
   2dbe0:	b	2dbcc <__assert_fail@plt+0x1b4e0>
   2dbe4:	ldr	r2, [r4, #12]
   2dbe8:	mov	r3, #0
   2dbec:	add	r2, r2, r6, lsl #2
   2dbf0:	add	r1, r5, r3
   2dbf4:	str	r1, [r2, r3, lsl #2]
   2dbf8:	add	r3, r3, #1
   2dbfc:	cmp	r8, r3
   2dc00:	bne	2dbf0 <__assert_fail@plt+0x1b504>
   2dc04:	b	2dbb4 <__assert_fail@plt+0x1b4c8>
   2dc08:	sub	r3, r0, #1
   2dc0c:	cmn	r3, #3
   2dc10:	bne	2dc24 <__assert_fail@plt+0x1b538>
   2dc14:	ldr	r2, [r4, #36]	; 0x24
   2dc18:	ldr	r3, [r4, #48]	; 0x30
   2dc1c:	cmp	r2, r3
   2dc20:	blt	2d9d4 <__assert_fail@plt+0x1b2e8>
   2dc24:	ldr	r3, [r4]
   2dc28:	ldr	r2, [r4, #24]
   2dc2c:	add	r3, r3, r5
   2dc30:	mov	r1, r6
   2dc34:	ldrb	r3, [r3, r2]
   2dc38:	ldr	r2, [r4, #64]	; 0x40
   2dc3c:	cmp	r2, #0
   2dc40:	ldrbne	r3, [r2, r3]
   2dc44:	ldr	r2, [r4, #4]
   2dc48:	strb	r3, [r2, r6]
   2dc4c:	ldrb	r2, [r4, #76]	; 0x4c
   2dc50:	cmp	r2, #0
   2dc54:	ldrne	r2, [r4, #12]
   2dc58:	strne	r5, [r2, r6, lsl #2]
   2dc5c:	ldr	r2, [r4, #8]
   2dc60:	cmn	r8, #1
   2dc64:	add	r5, r5, #1
   2dc68:	str	r3, [r2, r1, lsl #2]
   2dc6c:	ldreq	r3, [sp, #4]
   2dc70:	ldmeq	sl, {r0, r1}
   2dc74:	add	r6, r6, #1
   2dc78:	stmeq	r3, {r0, r1}
   2dc7c:	b	2d800 <__assert_fail@plt+0x1b114>
   2dc80:	push	{r4, r5, r6, lr}
   2dc84:	mov	r4, r0
   2dc88:	ldr	r3, [r0, #36]	; 0x24
   2dc8c:	ldr	r6, [r0, #48]	; 0x30
   2dc90:	ldr	r5, [r0, #28]
   2dc94:	cmp	r3, r6
   2dc98:	movlt	r6, r3
   2dc9c:	cmp	r5, r6
   2dca0:	blt	2dcb0 <__assert_fail@plt+0x1b5c4>
   2dca4:	str	r5, [r4, #28]
   2dca8:	str	r5, [r4, #32]
   2dcac:	pop	{r4, r5, r6, pc}
   2dcb0:	ldr	r3, [r4]
   2dcb4:	ldr	r2, [r4, #24]
   2dcb8:	add	r3, r3, r5
   2dcbc:	ldrb	r0, [r3, r2]
   2dcc0:	ldr	r3, [r4, #64]	; 0x40
   2dcc4:	cmp	r3, #0
   2dcc8:	ldrbne	r0, [r3, r0]
   2dccc:	bl	1253c <toupper@plt>
   2dcd0:	ldr	r3, [r4, #4]
   2dcd4:	strb	r0, [r3, r5]
   2dcd8:	add	r5, r5, #1
   2dcdc:	b	2dc9c <__assert_fail@plt+0x1b5b0>
   2dce0:	ldr	r3, [r0, #36]	; 0x24
   2dce4:	push	{r4, r5, r6, lr}
   2dce8:	cmn	r3, #-536870910	; 0xe0000002
   2dcec:	bls	2dcfc <__assert_fail@plt+0x1b610>
   2dcf0:	mov	r5, #12
   2dcf4:	mov	r0, r5
   2dcf8:	pop	{r4, r5, r6, pc}
   2dcfc:	ldr	r2, [r0, #48]	; 0x30
   2dd00:	lsl	r3, r3, #1
   2dd04:	cmp	r3, r2
   2dd08:	movge	r3, r2
   2dd0c:	cmp	r3, r1
   2dd10:	movge	r1, r3
   2dd14:	mov	r4, r0
   2dd18:	bl	2d10c <__assert_fail@plt+0x1aa20>
   2dd1c:	subs	r5, r0, #0
   2dd20:	bne	2dcf4 <__assert_fail@plt+0x1b608>
   2dd24:	ldr	r0, [r4, #100]	; 0x64
   2dd28:	cmp	r0, #0
   2dd2c:	beq	2dd4c <__assert_fail@plt+0x1b660>
   2dd30:	ldr	r1, [r4, #36]	; 0x24
   2dd34:	add	r1, r1, #1
   2dd38:	lsl	r1, r1, #2
   2dd3c:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   2dd40:	cmp	r0, #0
   2dd44:	beq	2dcf0 <__assert_fail@plt+0x1b604>
   2dd48:	str	r0, [r4, #100]	; 0x64
   2dd4c:	ldrb	r3, [r4, #72]	; 0x48
   2dd50:	cmp	r3, #0
   2dd54:	ldr	r3, [r4, #80]	; 0x50
   2dd58:	beq	2dd78 <__assert_fail@plt+0x1b68c>
   2dd5c:	cmp	r3, #1
   2dd60:	mov	r0, r4
   2dd64:	ble	2dd70 <__assert_fail@plt+0x1b684>
   2dd68:	pop	{r4, r5, r6, lr}
   2dd6c:	b	2d7b0 <__assert_fail@plt+0x1b0c4>
   2dd70:	bl	2dc80 <__assert_fail@plt+0x1b594>
   2dd74:	b	2dcf4 <__assert_fail@plt+0x1b608>
   2dd78:	cmp	r3, #1
   2dd7c:	ble	2dd8c <__assert_fail@plt+0x1b6a0>
   2dd80:	mov	r0, r4
   2dd84:	bl	2d65c <__assert_fail@plt+0x1af70>
   2dd88:	b	2dcf4 <__assert_fail@plt+0x1b608>
   2dd8c:	ldr	r3, [r4, #64]	; 0x40
   2dd90:	cmp	r3, #0
   2dd94:	beq	2dcf4 <__assert_fail@plt+0x1b608>
   2dd98:	mov	r0, r4
   2dd9c:	bl	2caa0 <__assert_fail@plt+0x1a3b4>
   2dda0:	b	2dcf4 <__assert_fail@plt+0x1b608>
   2dda4:	push	{r4, lr}
   2dda8:	mov	r4, r0
   2ddac:	ldr	r0, [r0]
   2ddb0:	bl	2a01c <__assert_fail@plt+0x17930>
   2ddb4:	ldr	r0, [r4, #4]
   2ddb8:	bl	2a01c <__assert_fail@plt+0x17930>
   2ddbc:	ldr	r0, [r4, #8]
   2ddc0:	bl	2a01c <__assert_fail@plt+0x17930>
   2ddc4:	ldr	r0, [r4, #12]
   2ddc8:	bl	2a01c <__assert_fail@plt+0x17930>
   2ddcc:	mov	r0, r4
   2ddd0:	pop	{r4, lr}
   2ddd4:	b	2a01c <__assert_fail@plt+0x17930>
   2ddd8:	ldr	r2, [r0, #4]
   2dddc:	ldr	r3, [pc, #32]	; 2de04 <__assert_fail@plt+0x1b718>
   2dde0:	and	r3, r3, r2
   2dde4:	cmp	r3, #6
   2dde8:	bne	2ddf4 <__assert_fail@plt+0x1b708>
   2ddec:	ldr	r0, [r0]
   2ddf0:	b	2dda4 <__assert_fail@plt+0x1b6b8>
   2ddf4:	cmp	r3, #3
   2ddf8:	bxne	lr
   2ddfc:	ldr	r0, [r0]
   2de00:	b	2a01c <__assert_fail@plt+0x17930>
   2de04:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   2de08:	add	r0, r1, #20
   2de0c:	push	{r4, lr}
   2de10:	bl	2ddd8 <__assert_fail@plt+0x1b6ec>
   2de14:	mov	r0, #0
   2de18:	pop	{r4, pc}
   2de1c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2de20:	mov	r4, r0
   2de24:	ldr	r6, [r0, #4]
   2de28:	ldr	r3, [r0, #8]
   2de2c:	stm	sp, {r1, r2}
   2de30:	cmp	r3, r6
   2de34:	mov	r7, sp
   2de38:	ldrb	r5, [sp, #4]
   2de3c:	bcc	2df10 <__assert_fail@plt+0x1b824>
   2de40:	ldr	r3, [pc, #376]	; 2dfc0 <__assert_fail@plt+0x1b8d4>
   2de44:	lsl	r8, r6, #1
   2de48:	cmp	r8, r3
   2de4c:	bls	2de5c <__assert_fail@plt+0x1b770>
   2de50:	mvn	r0, #0
   2de54:	add	sp, sp, #12
   2de58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2de5c:	lsl	r1, r6, #4
   2de60:	ldr	r0, [r0]
   2de64:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   2de68:	cmp	r0, #0
   2de6c:	beq	2de50 <__assert_fail@plt+0x1b764>
   2de70:	lsl	r6, r6, #3
   2de74:	mov	r1, r6
   2de78:	str	r0, [r4]
   2de7c:	ldr	r0, [r4, #12]
   2de80:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   2de84:	mov	r1, r6
   2de88:	mov	r6, #12
   2de8c:	mul	r6, r6, r8
   2de90:	mov	sl, r0
   2de94:	ldr	r0, [r4, #16]
   2de98:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   2de9c:	mov	r1, r6
   2dea0:	mov	fp, r0
   2dea4:	ldr	r0, [r4, #20]
   2dea8:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   2deac:	mov	r1, r6
   2deb0:	mov	r9, r0
   2deb4:	ldr	r0, [r4, #24]
   2deb8:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   2debc:	cmp	fp, #0
   2dec0:	cmpne	sl, #0
   2dec4:	mov	r6, r0
   2dec8:	beq	2ded8 <__assert_fail@plt+0x1b7ec>
   2decc:	cmp	r0, #0
   2ded0:	cmpne	r9, #0
   2ded4:	bne	2defc <__assert_fail@plt+0x1b810>
   2ded8:	mov	r0, sl
   2dedc:	bl	2a01c <__assert_fail@plt+0x17930>
   2dee0:	mov	r0, fp
   2dee4:	bl	2a01c <__assert_fail@plt+0x17930>
   2dee8:	mov	r0, r9
   2deec:	bl	2a01c <__assert_fail@plt+0x17930>
   2def0:	mov	r0, r6
   2def4:	bl	2a01c <__assert_fail@plt+0x17930>
   2def8:	b	2de50 <__assert_fail@plt+0x1b764>
   2defc:	str	sl, [r4, #12]
   2df00:	str	fp, [r4, #16]
   2df04:	str	r9, [r4, #20]
   2df08:	str	r0, [r4, #24]
   2df0c:	str	r8, [r4, #4]
   2df10:	ldr	ip, [r4, #8]
   2df14:	ldr	r3, [r4]
   2df18:	ldm	r7, {r0, r1}
   2df1c:	add	r3, r3, ip, lsl #3
   2df20:	cmp	r5, #5
   2df24:	stm	r3, {r0, r1}
   2df28:	subne	r5, r5, #6
   2df2c:	bic	r1, r1, #261120	; 0x3fc00
   2df30:	bic	r1, r1, #768	; 0x300
   2df34:	clzne	r5, r5
   2df38:	str	r1, [r3, #4]
   2df3c:	lsrne	r5, r5, #5
   2df40:	bne	2df54 <__assert_fail@plt+0x1b868>
   2df44:	ldr	r5, [r4, #92]	; 0x5c
   2df48:	cmp	r5, #1
   2df4c:	movle	r5, #0
   2df50:	movgt	r5, #1
   2df54:	ldrb	r2, [r3, #6]
   2df58:	bic	r2, r2, #16
   2df5c:	orr	r5, r2, r5, lsl #4
   2df60:	strb	r5, [r3, #6]
   2df64:	ldr	r3, [r4, #12]
   2df68:	mvn	r2, #0
   2df6c:	str	r2, [r3, ip, lsl #2]
   2df70:	ldr	r1, [r4, #8]
   2df74:	mov	r2, #12
   2df78:	ldr	ip, [r4, #20]
   2df7c:	mul	r1, r2, r1
   2df80:	mov	r3, #0
   2df84:	add	r0, ip, r1
   2df88:	str	r3, [ip, r1]
   2df8c:	str	r3, [r0, #4]
   2df90:	str	r3, [r0, #8]
   2df94:	ldr	r1, [r4, #8]
   2df98:	ldr	r0, [r4, #24]
   2df9c:	mul	r2, r2, r1
   2dfa0:	add	r1, r0, r2
   2dfa4:	str	r3, [r0, r2]
   2dfa8:	str	r3, [r1, #4]
   2dfac:	str	r3, [r1, #8]
   2dfb0:	ldr	r0, [r4, #8]
   2dfb4:	add	r3, r0, #1
   2dfb8:	str	r3, [r4, #8]
   2dfbc:	b	2de54 <__assert_fail@plt+0x1b768>
   2dfc0:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   2dfc4:	ldr	r3, [r0]
   2dfc8:	push	{r4, r5, r6, r7, r8, lr}
   2dfcc:	lsl	r7, r1, #3
   2dfd0:	add	r3, r3, r7
   2dfd4:	mov	r6, r1
   2dfd8:	mov	r4, r2
   2dfdc:	ldm	r3, {r1, r2}
   2dfe0:	mov	r5, r0
   2dfe4:	bl	2de1c <__assert_fail@plt+0x1b730>
   2dfe8:	cmn	r0, #1
   2dfec:	popeq	{r4, r5, r6, r7, r8, pc}
   2dff0:	ldr	lr, [r5]
   2dff4:	ldr	ip, [pc, #80]	; 2e04c <__assert_fail@plt+0x1b960>
   2dff8:	add	r1, lr, r0, lsl #3
   2dffc:	and	r2, r4, ip
   2e000:	ldr	r3, [r1, #4]
   2e004:	ldr	r4, [pc, #68]	; 2e050 <__assert_fail@plt+0x1b964>
   2e008:	add	r7, lr, r7
   2e00c:	bic	r3, r3, r4
   2e010:	orr	r3, r3, r2, lsl #8
   2e014:	str	r3, [r1, #4]
   2e018:	ldr	lr, [r7, #4]
   2e01c:	bic	r3, r3, r4
   2e020:	and	ip, ip, lr, lsr #8
   2e024:	orr	r2, r2, ip
   2e028:	orr	r3, r3, r2, lsl #8
   2e02c:	str	r3, [r1, #4]
   2e030:	lsr	r2, r3, #16
   2e034:	uxtb	r3, r2
   2e038:	orr	r3, r3, #4
   2e03c:	strb	r3, [r1, #6]
   2e040:	ldr	r3, [r5, #16]
   2e044:	str	r6, [r3, r0, lsl #2]
   2e048:	pop	{r4, r5, r6, r7, r8, pc}
   2e04c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2e050:	andeq	pc, r3, r0, lsl #30
   2e054:	push	{r4, lr}
   2e058:	mov	r4, r0
   2e05c:	ldr	r0, [r0, #24]
   2e060:	bl	2a01c <__assert_fail@plt+0x17930>
   2e064:	ldr	r0, [r4, #36]	; 0x24
   2e068:	bl	2a01c <__assert_fail@plt+0x17930>
   2e06c:	ldr	r3, [r4, #40]	; 0x28
   2e070:	add	r2, r4, #4
   2e074:	cmp	r3, r2
   2e078:	beq	2e08c <__assert_fail@plt+0x1b9a0>
   2e07c:	ldr	r0, [r3, #8]
   2e080:	bl	2a01c <__assert_fail@plt+0x17930>
   2e084:	ldr	r0, [r4, #40]	; 0x28
   2e088:	bl	2a01c <__assert_fail@plt+0x17930>
   2e08c:	ldr	r0, [r4, #12]
   2e090:	bl	2a01c <__assert_fail@plt+0x17930>
   2e094:	ldr	r0, [r4, #48]	; 0x30
   2e098:	bl	2a01c <__assert_fail@plt+0x17930>
   2e09c:	ldr	r0, [r4, #44]	; 0x2c
   2e0a0:	bl	2a01c <__assert_fail@plt+0x17930>
   2e0a4:	mov	r0, r4
   2e0a8:	pop	{r4, lr}
   2e0ac:	b	2a01c <__assert_fail@plt+0x17930>
   2e0b0:	push	{r4, lr}
   2e0b4:	mov	r4, r0
   2e0b8:	ldr	r0, [r0, #8]
   2e0bc:	bl	2a01c <__assert_fail@plt+0x17930>
   2e0c0:	ldr	r0, [r4, #12]
   2e0c4:	bl	2a01c <__assert_fail@plt+0x17930>
   2e0c8:	ldrb	r3, [r4, #75]	; 0x4b
   2e0cc:	cmp	r3, #0
   2e0d0:	popeq	{r4, pc}
   2e0d4:	ldr	r0, [r4, #4]
   2e0d8:	pop	{r4, lr}
   2e0dc:	b	2a01c <__assert_fail@plt+0x17930>
   2e0e0:	ldr	r3, [r0]
   2e0e4:	push	{r4, r5, r6, r7, r8, lr}
   2e0e8:	cmp	r3, #0
   2e0ec:	mov	r4, r0
   2e0f0:	movne	r5, #0
   2e0f4:	bne	2e184 <__assert_fail@plt+0x1ba98>
   2e0f8:	ldr	r0, [r4, #12]
   2e0fc:	bl	2a01c <__assert_fail@plt+0x17930>
   2e100:	mov	r5, #0
   2e104:	mov	r6, r5
   2e108:	ldr	r3, [r4, #8]
   2e10c:	cmp	r3, r6
   2e110:	bhi	2e194 <__assert_fail@plt+0x1baa8>
   2e114:	ldr	r0, [r4, #20]
   2e118:	bl	2a01c <__assert_fail@plt+0x17930>
   2e11c:	ldr	r0, [r4, #24]
   2e120:	bl	2a01c <__assert_fail@plt+0x17930>
   2e124:	ldr	r0, [r4, #28]
   2e128:	bl	2a01c <__assert_fail@plt+0x17930>
   2e12c:	ldr	r0, [r4]
   2e130:	bl	2a01c <__assert_fail@plt+0x17930>
   2e134:	ldr	r3, [r4, #32]
   2e138:	cmp	r3, #0
   2e13c:	movne	r6, #0
   2e140:	movne	r8, #12
   2e144:	bne	2e20c <__assert_fail@plt+0x1bb20>
   2e148:	ldr	r0, [r4, #32]
   2e14c:	bl	2a01c <__assert_fail@plt+0x17930>
   2e150:	ldr	r0, [r4, #60]	; 0x3c
   2e154:	ldr	r3, [pc, #220]	; 2e238 <__assert_fail@plt+0x1bb4c>
   2e158:	cmp	r0, r3
   2e15c:	bne	2e230 <__assert_fail@plt+0x1bb44>
   2e160:	ldr	r0, [r4, #132]	; 0x84
   2e164:	bl	2a01c <__assert_fail@plt+0x17930>
   2e168:	mov	r0, r4
   2e16c:	pop	{r4, r5, r6, r7, r8, lr}
   2e170:	b	2a01c <__assert_fail@plt+0x17930>
   2e174:	ldr	r0, [r4]
   2e178:	add	r0, r0, r5, lsl #3
   2e17c:	bl	2ddd8 <__assert_fail@plt+0x1b6ec>
   2e180:	add	r5, r5, #1
   2e184:	ldr	r3, [r4, #8]
   2e188:	cmp	r3, r5
   2e18c:	bhi	2e174 <__assert_fail@plt+0x1ba88>
   2e190:	b	2e0f8 <__assert_fail@plt+0x1ba0c>
   2e194:	ldr	r3, [r4, #24]
   2e198:	cmp	r3, #0
   2e19c:	beq	2e1ac <__assert_fail@plt+0x1bac0>
   2e1a0:	add	r3, r3, r5
   2e1a4:	ldr	r0, [r3, #8]
   2e1a8:	bl	2a01c <__assert_fail@plt+0x17930>
   2e1ac:	ldr	r3, [r4, #28]
   2e1b0:	cmp	r3, #0
   2e1b4:	beq	2e1c4 <__assert_fail@plt+0x1bad8>
   2e1b8:	add	r3, r3, r5
   2e1bc:	ldr	r0, [r3, #8]
   2e1c0:	bl	2a01c <__assert_fail@plt+0x17930>
   2e1c4:	ldr	r3, [r4, #20]
   2e1c8:	cmp	r3, #0
   2e1cc:	beq	2e1dc <__assert_fail@plt+0x1baf0>
   2e1d0:	add	r3, r3, r5
   2e1d4:	ldr	r0, [r3, #8]
   2e1d8:	bl	2a01c <__assert_fail@plt+0x17930>
   2e1dc:	add	r6, r6, #1
   2e1e0:	add	r5, r5, #12
   2e1e4:	b	2e108 <__assert_fail@plt+0x1ba1c>
   2e1e8:	ldr	r5, [r4, #32]
   2e1ec:	mov	r7, #0
   2e1f0:	mla	r5, r8, r6, r5
   2e1f4:	ldr	r3, [r5]
   2e1f8:	cmp	r7, r3
   2e1fc:	blt	2e21c <__assert_fail@plt+0x1bb30>
   2e200:	ldr	r0, [r5, #8]
   2e204:	bl	2a01c <__assert_fail@plt+0x17930>
   2e208:	add	r6, r6, #1
   2e20c:	ldr	r3, [r4, #68]	; 0x44
   2e210:	cmp	r3, r6
   2e214:	bcs	2e1e8 <__assert_fail@plt+0x1bafc>
   2e218:	b	2e148 <__assert_fail@plt+0x1ba5c>
   2e21c:	ldr	r3, [r5, #8]
   2e220:	ldr	r0, [r3, r7, lsl #2]
   2e224:	bl	2e054 <__assert_fail@plt+0x1b968>
   2e228:	add	r7, r7, #1
   2e22c:	b	2e1f4 <__assert_fail@plt+0x1bb08>
   2e230:	bl	2a01c <__assert_fail@plt+0x17930>
   2e234:	b	2e160 <__assert_fail@plt+0x1ba74>
   2e238:	andeq	pc, r3, r0, lsr #4
   2e23c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e240:	mov	r5, #0
   2e244:	mov	r6, r0
   2e248:	mov	r8, r5
   2e24c:	ldr	r3, [r6, #124]	; 0x7c
   2e250:	cmp	r5, r3
   2e254:	blt	2e264 <__assert_fail@plt+0x1bb78>
   2e258:	str	r8, [r6, #124]	; 0x7c
   2e25c:	str	r8, [r6, #108]	; 0x6c
   2e260:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e264:	ldr	r3, [r6, #132]	; 0x84
   2e268:	mov	r7, #0
   2e26c:	ldr	r4, [r3, r5, lsl #2]
   2e270:	ldr	r3, [r4, #16]
   2e274:	cmp	r7, r3
   2e278:	blt	2e2b0 <__assert_fail@plt+0x1bbc4>
   2e27c:	ldr	r0, [r4, #20]
   2e280:	bl	2a01c <__assert_fail@plt+0x17930>
   2e284:	ldr	r3, [r4, #8]
   2e288:	cmp	r3, #0
   2e28c:	beq	2e2a0 <__assert_fail@plt+0x1bbb4>
   2e290:	ldr	r0, [r3, #8]
   2e294:	bl	2a01c <__assert_fail@plt+0x17930>
   2e298:	ldr	r0, [r4, #8]
   2e29c:	bl	2a01c <__assert_fail@plt+0x17930>
   2e2a0:	mov	r0, r4
   2e2a4:	bl	2a01c <__assert_fail@plt+0x17930>
   2e2a8:	add	r5, r5, #1
   2e2ac:	b	2e24c <__assert_fail@plt+0x1bb60>
   2e2b0:	ldr	r3, [r4, #20]
   2e2b4:	ldr	r9, [r3, r7, lsl #2]
   2e2b8:	add	r7, r7, #1
   2e2bc:	ldr	r0, [r9, #16]
   2e2c0:	bl	2a01c <__assert_fail@plt+0x17930>
   2e2c4:	mov	r0, r9
   2e2c8:	bl	2a01c <__assert_fail@plt+0x17930>
   2e2cc:	b	2e270 <__assert_fail@plt+0x1bb84>
   2e2d0:	push	{r4, r5, r6, r7, r8, lr}
   2e2d4:	subs	r4, r0, #0
   2e2d8:	movne	r5, #0
   2e2dc:	movne	r7, #24
   2e2e0:	bne	2e314 <__assert_fail@plt+0x1bc28>
   2e2e4:	mov	r0, #0
   2e2e8:	pop	{r4, r5, r6, r7, r8, pc}
   2e2ec:	mul	r6, r7, r5
   2e2f0:	ldr	r2, [r4, #8]
   2e2f4:	add	r5, r5, #1
   2e2f8:	add	r2, r2, r6
   2e2fc:	ldr	r0, [r2, #20]
   2e300:	bl	2a01c <__assert_fail@plt+0x17930>
   2e304:	ldr	r3, [r4, #8]
   2e308:	add	r3, r3, r6
   2e30c:	ldr	r0, [r3, #8]
   2e310:	bl	2a01c <__assert_fail@plt+0x17930>
   2e314:	ldr	r3, [r4]
   2e318:	cmp	r5, r3
   2e31c:	blt	2e2ec <__assert_fail@plt+0x1bc00>
   2e320:	ldr	r0, [r4, #8]
   2e324:	bl	2a01c <__assert_fail@plt+0x17930>
   2e328:	b	2e2e4 <__assert_fail@plt+0x1bbf8>
   2e32c:	mov	r3, r1
   2e330:	ldr	r2, [r1, #28]
   2e334:	ldrb	r1, [r1, #24]
   2e338:	sub	r1, r1, #2
   2e33c:	cmp	r1, #14
   2e340:	ldrls	pc, [pc, r1, lsl #2]
   2e344:	b	2e450 <__assert_fail@plt+0x1bd64>
   2e348:	andeq	lr, r2, r0, ror #8
   2e34c:	andeq	lr, r2, r0, asr r4
   2e350:	andeq	lr, r2, ip, lsr #8
   2e354:	andeq	lr, r2, r0, asr r4
   2e358:	andeq	lr, r2, r0, asr r4
   2e35c:	andeq	lr, r2, r0, asr r4
   2e360:	andeq	lr, r2, r4, lsl r4
   2e364:	andeq	lr, r2, r4, lsl r4
   2e368:	andeq	lr, r2, r4, lsl #7
   2e36c:	andeq	lr, r2, r4, lsl #7
   2e370:	andeq	lr, r2, r4, lsl r4
   2e374:	andeq	lr, r2, r0, asr r4
   2e378:	andeq	lr, r2, r0, asr r4
   2e37c:	andeq	lr, r2, r0, asr r4
   2e380:	andeq	lr, r2, r0, ror #8
   2e384:	ldrb	r1, [r0, #88]	; 0x58
   2e388:	push	{r4, r5, r6, r7, r8, lr}
   2e38c:	mov	r4, #12
   2e390:	orr	r1, r1, #1
   2e394:	strb	r1, [r0, #88]	; 0x58
   2e398:	ldr	r1, [r3, #4]
   2e39c:	mul	r2, r4, r2
   2e3a0:	cmp	r1, #0
   2e3a4:	mov	r7, #2
   2e3a8:	ldreq	r1, [r3, #16]
   2e3ac:	ldrne	r1, [r1, #12]
   2e3b0:	ldr	r8, [r1, #28]
   2e3b4:	ldr	r1, [r3, #8]
   2e3b8:	cmp	r1, #0
   2e3bc:	ldrne	r3, [r1, #12]
   2e3c0:	ldreq	r3, [r3, #16]
   2e3c4:	ldr	r5, [r3, #28]
   2e3c8:	ldr	r3, [r0, #20]
   2e3cc:	mov	r0, #8
   2e3d0:	add	r6, r3, r2
   2e3d4:	str	r7, [r3, r2]
   2e3d8:	bl	2bf10 <__assert_fail@plt+0x19824>
   2e3dc:	cmp	r0, #0
   2e3e0:	str	r0, [r6, #8]
   2e3e4:	beq	2e468 <__assert_fail@plt+0x1bd7c>
   2e3e8:	cmp	r8, r5
   2e3ec:	moveq	r3, #1
   2e3f0:	streq	r3, [r6, #4]
   2e3f4:	streq	r8, [r0]
   2e3f8:	beq	2e40c <__assert_fail@plt+0x1bd20>
   2e3fc:	str	r7, [r6, #4]
   2e400:	strlt	r8, [r0]
   2e404:	strlt	r5, [r0, #4]
   2e408:	stmge	r0, {r5, r8}
   2e40c:	mov	r0, #0
   2e410:	pop	{r4, r5, r6, r7, r8, pc}
   2e414:	ldr	r1, [r3, #16]
   2e418:	ldr	r3, [r0, #20]
   2e41c:	ldr	r1, [r1, #28]
   2e420:	mov	r0, #12
   2e424:	mla	r0, r0, r2, r3
   2e428:	b	2d50c <__assert_fail@plt+0x1ae20>
   2e42c:	ldr	r1, [r3, #16]
   2e430:	ldr	ip, [r0, #12]
   2e434:	ldr	r1, [r1, #28]
   2e438:	str	r1, [ip, r2, lsl #2]
   2e43c:	ldrb	r3, [r3, #24]
   2e440:	cmp	r3, #4
   2e444:	bne	2e460 <__assert_fail@plt+0x1bd74>
   2e448:	ldr	r3, [r0, #20]
   2e44c:	b	2e420 <__assert_fail@plt+0x1bd34>
   2e450:	ldr	r3, [r3, #16]
   2e454:	ldr	r1, [r3, #28]
   2e458:	ldr	r3, [r0, #12]
   2e45c:	str	r1, [r3, r2, lsl #2]
   2e460:	mov	r0, #0
   2e464:	bx	lr
   2e468:	mov	r0, r4
   2e46c:	pop	{r4, r5, r6, r7, r8, pc}
   2e470:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e474:	mov	r4, r0
   2e478:	ldr	sl, [r0, #84]	; 0x54
   2e47c:	mov	r9, r1
   2e480:	mov	r6, r2
   2e484:	mov	r5, #0
   2e488:	mov	r7, #24
   2e48c:	mov	r8, #1
   2e490:	ldr	r3, [r9, #4]
   2e494:	cmp	r5, r3
   2e498:	blt	2e4a8 <__assert_fail@plt+0x1bdbc>
   2e49c:	mov	r0, #0
   2e4a0:	add	sp, sp, #12
   2e4a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e4a8:	ldr	r3, [r9, #8]
   2e4ac:	ldr	fp, [r3, r5, lsl #2]
   2e4b0:	ldr	r3, [sl]
   2e4b4:	add	r2, r3, fp, lsl #3
   2e4b8:	ldrb	r2, [r2, #4]
   2e4bc:	cmp	r2, #8
   2e4c0:	bne	2e564 <__assert_fail@plt+0x1be78>
   2e4c4:	ldr	r2, [r3, fp, lsl #3]
   2e4c8:	cmp	r2, #31
   2e4cc:	bgt	2e564 <__assert_fail@plt+0x1be78>
   2e4d0:	ldr	r3, [sl, #80]	; 0x50
   2e4d4:	lsr	r3, r3, r2
   2e4d8:	tst	r3, #1
   2e4dc:	beq	2e564 <__assert_fail@plt+0x1be78>
   2e4e0:	ldr	r1, [r4, #128]	; 0x80
   2e4e4:	ldr	r3, [r4, #124]	; 0x7c
   2e4e8:	ldr	r0, [r4, #132]	; 0x84
   2e4ec:	cmp	r1, r3
   2e4f0:	bne	2e518 <__assert_fail@plt+0x1be2c>
   2e4f4:	lsl	r3, r1, #1
   2e4f8:	lsl	r1, r1, #3
   2e4fc:	str	r3, [sp]
   2e500:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   2e504:	cmp	r0, #0
   2e508:	beq	2e56c <__assert_fail@plt+0x1be80>
   2e50c:	ldr	r3, [sp]
   2e510:	str	r0, [r4, #132]	; 0x84
   2e514:	str	r3, [r4, #128]	; 0x80
   2e518:	ldr	r2, [r4, #124]	; 0x7c
   2e51c:	ldr	r3, [r4, #132]	; 0x84
   2e520:	mov	r1, r7
   2e524:	mov	r0, r8
   2e528:	str	r2, [sp, #4]
   2e52c:	str	r3, [sp]
   2e530:	bl	29b08 <__assert_fail@plt+0x1741c>
   2e534:	ldr	r3, [sp]
   2e538:	ldr	r2, [sp, #4]
   2e53c:	str	r0, [r3, r2, lsl #2]
   2e540:	ldr	r3, [r4, #124]	; 0x7c
   2e544:	ldr	r2, [r4, #132]	; 0x84
   2e548:	ldr	r2, [r2, r3, lsl #2]
   2e54c:	cmp	r2, #0
   2e550:	beq	2e56c <__assert_fail@plt+0x1be80>
   2e554:	add	r3, r3, #1
   2e558:	str	fp, [r2, #4]
   2e55c:	str	r3, [r4, #124]	; 0x7c
   2e560:	str	r6, [r2]
   2e564:	add	r5, r5, #1
   2e568:	b	2e490 <__assert_fail@plt+0x1bda4>
   2e56c:	mov	r0, #12
   2e570:	b	2e4a0 <__assert_fail@plt+0x1bdb4>
   2e574:	ldr	r3, [r0, #36]	; 0x24
   2e578:	push	{r4, r5, r6, lr}
   2e57c:	cmp	r3, r1
   2e580:	mov	r4, r0
   2e584:	mov	r5, r1
   2e588:	ldr	r6, [r0, #104]	; 0x68
   2e58c:	bgt	2e59c <__assert_fail@plt+0x1beb0>
   2e590:	ldr	r2, [r0, #48]	; 0x30
   2e594:	cmp	r3, r2
   2e598:	blt	2e5c4 <__assert_fail@plt+0x1bed8>
   2e59c:	ldr	r3, [r4, #28]
   2e5a0:	cmp	r5, r3
   2e5a4:	bge	2e5b8 <__assert_fail@plt+0x1becc>
   2e5a8:	cmp	r6, r5
   2e5ac:	blt	2e5dc <__assert_fail@plt+0x1bef0>
   2e5b0:	mov	r0, #0
   2e5b4:	pop	{r4, r5, r6, pc}
   2e5b8:	ldr	r2, [r4, #48]	; 0x30
   2e5bc:	cmp	r3, r2
   2e5c0:	bge	2e5a8 <__assert_fail@plt+0x1bebc>
   2e5c4:	add	r1, r5, #1
   2e5c8:	mov	r0, r4
   2e5cc:	bl	2dce0 <__assert_fail@plt+0x1b5f4>
   2e5d0:	cmp	r0, #0
   2e5d4:	beq	2e5a8 <__assert_fail@plt+0x1bebc>
   2e5d8:	pop	{r4, r5, r6, pc}
   2e5dc:	sub	r2, r5, r6
   2e5e0:	ldr	r0, [r4, #100]	; 0x64
   2e5e4:	add	r6, r6, #1
   2e5e8:	lsl	r2, r2, #2
   2e5ec:	mov	r1, #0
   2e5f0:	add	r0, r0, r6, lsl #2
   2e5f4:	bl	12434 <memset@plt>
   2e5f8:	str	r5, [r4, #104]	; 0x68
   2e5fc:	b	2e5b0 <__assert_fail@plt+0x1bec4>
   2e600:	push	{r4, r5, r6, r7, r8, lr}
   2e604:	subs	r4, r0, #0
   2e608:	ldr	r7, [sp, #28]
   2e60c:	beq	2e6a0 <__assert_fail@plt+0x1bfb4>
   2e610:	ldr	r5, [r4]
   2e614:	cmp	r5, #0
   2e618:	beq	2e6a0 <__assert_fail@plt+0x1bfb4>
   2e61c:	sub	ip, r5, #1
   2e620:	mov	r5, #24
   2e624:	mov	r0, r3
   2e628:	mul	r5, r5, ip
   2e62c:	ldr	r3, [r4, #8]
   2e630:	str	ip, [r4]
   2e634:	add	ip, r3, r5
   2e638:	ldr	r3, [r3, r5]
   2e63c:	lsl	r6, r2, #3
   2e640:	str	r3, [r1]
   2e644:	mov	r2, r6
   2e648:	ldr	r1, [ip, #8]
   2e64c:	bl	120f8 <memcpy@plt>
   2e650:	ldr	r3, [r4, #8]
   2e654:	mov	r2, r6
   2e658:	add	r3, r3, r5
   2e65c:	ldr	r0, [sp, #24]
   2e660:	ldr	r1, [r3, #8]
   2e664:	add	r1, r1, r6
   2e668:	bl	120f8 <memcpy@plt>
   2e66c:	ldr	r0, [r7, #8]
   2e670:	bl	2a01c <__assert_fail@plt+0x17930>
   2e674:	ldr	r3, [r4, #8]
   2e678:	add	r3, r3, r5
   2e67c:	ldr	r0, [r3, #8]
   2e680:	bl	2a01c <__assert_fail@plt+0x17930>
   2e684:	ldr	r3, [r4, #8]
   2e688:	add	r5, r3, r5
   2e68c:	add	r3, r5, #12
   2e690:	ldm	r3, {r0, r1, r2}
   2e694:	stm	r7, {r0, r1, r2}
   2e698:	ldr	r0, [r5, #4]
   2e69c:	pop	{r4, r5, r6, r7, r8, pc}
   2e6a0:	mvn	r0, #0
   2e6a4:	pop	{r4, r5, r6, r7, r8, pc}
   2e6a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e6ac:	mov	r9, r3
   2e6b0:	ldr	r3, [sp, #36]	; 0x24
   2e6b4:	mov	r5, r0
   2e6b8:	tst	r3, #4194304	; 0x400000
   2e6bc:	mov	r4, r1
   2e6c0:	mov	r8, r2
   2e6c4:	ldr	r6, [sp, #32]
   2e6c8:	beq	2e6fc <__assert_fail@plt+0x1c010>
   2e6cc:	mov	r0, r6
   2e6d0:	ldr	r1, [pc, #1816]	; 2edf0 <__assert_fail@plt+0x1c704>
   2e6d4:	bl	11ffc <strcmp@plt>
   2e6d8:	cmp	r0, #0
   2e6dc:	ldreq	r6, [pc, #1808]	; 2edf4 <__assert_fail@plt+0x1c708>
   2e6e0:	beq	2e6fc <__assert_fail@plt+0x1c010>
   2e6e4:	mov	r0, r6
   2e6e8:	ldr	r1, [pc, #1800]	; 2edf8 <__assert_fail@plt+0x1c70c>
   2e6ec:	bl	11ffc <strcmp@plt>
   2e6f0:	ldr	r3, [pc, #1788]	; 2edf4 <__assert_fail@plt+0x1c708>
   2e6f4:	cmp	r0, #0
   2e6f8:	moveq	r6, r3
   2e6fc:	ldr	r7, [r9]
   2e700:	ldr	r3, [r8, #36]	; 0x24
   2e704:	cmp	r7, r3
   2e708:	bne	2e730 <__assert_fail@plt+0x1c044>
   2e70c:	lsl	r7, r7, #1
   2e710:	add	r7, r7, #1
   2e714:	ldr	r0, [r8, #12]
   2e718:	lsl	r1, r7, #2
   2e71c:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   2e720:	cmp	r0, #0
   2e724:	beq	2ede0 <__assert_fail@plt+0x1c6f4>
   2e728:	str	r0, [r8, #12]
   2e72c:	str	r7, [r9]
   2e730:	ldr	r7, [r8, #36]	; 0x24
   2e734:	mov	r0, r6
   2e738:	add	r3, r7, #1
   2e73c:	str	r3, [r8, #36]	; 0x24
   2e740:	ldr	r9, [r8, #12]
   2e744:	bl	11f9c <wctype@plt>
   2e748:	ldr	r1, [pc, #1708]	; 2edfc <__assert_fail@plt+0x1c710>
   2e74c:	str	r0, [r9, r7, lsl #2]
   2e750:	mov	r0, r6
   2e754:	bl	11ffc <strcmp@plt>
   2e758:	subs	r7, r0, #0
   2e75c:	bne	2e7dc <__assert_fail@plt+0x1c0f0>
   2e760:	cmp	r5, #0
   2e764:	beq	2e7a4 <__assert_fail@plt+0x1c0b8>
   2e768:	bl	12374 <__ctype_b_loc@plt>
   2e76c:	mov	r6, r0
   2e770:	ldr	r2, [r6]
   2e774:	lsl	r3, r7, #1
   2e778:	ldrh	r3, [r2, r3]
   2e77c:	tst	r3, #8
   2e780:	beq	2e790 <__assert_fail@plt+0x1c0a4>
   2e784:	ldrb	r1, [r5, r7]
   2e788:	mov	r0, r4
   2e78c:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2e790:	add	r7, r7, #1
   2e794:	cmp	r7, #256	; 0x100
   2e798:	bne	2e770 <__assert_fail@plt+0x1c084>
   2e79c:	mov	r0, #0
   2e7a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e7a4:	bl	12374 <__ctype_b_loc@plt>
   2e7a8:	mov	r5, r0
   2e7ac:	ldr	r2, [r5]
   2e7b0:	lsl	r3, r7, #1
   2e7b4:	ldrh	r3, [r2, r3]
   2e7b8:	tst	r3, #8
   2e7bc:	beq	2e7cc <__assert_fail@plt+0x1c0e0>
   2e7c0:	mov	r1, r7
   2e7c4:	mov	r0, r4
   2e7c8:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2e7cc:	add	r7, r7, #1
   2e7d0:	cmp	r7, #256	; 0x100
   2e7d4:	bne	2e7ac <__assert_fail@plt+0x1c0c0>
   2e7d8:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2e7dc:	ldr	r1, [pc, #1564]	; 2ee00 <__assert_fail@plt+0x1c714>
   2e7e0:	mov	r0, r6
   2e7e4:	bl	11ffc <strcmp@plt>
   2e7e8:	subs	r7, r0, #0
   2e7ec:	bne	2e868 <__assert_fail@plt+0x1c17c>
   2e7f0:	cmp	r5, #0
   2e7f4:	beq	2e830 <__assert_fail@plt+0x1c144>
   2e7f8:	bl	12374 <__ctype_b_loc@plt>
   2e7fc:	mov	r6, r0
   2e800:	ldr	r2, [r6]
   2e804:	lsl	r3, r7, #1
   2e808:	ldrh	r3, [r2, r3]
   2e80c:	tst	r3, #2
   2e810:	beq	2e820 <__assert_fail@plt+0x1c134>
   2e814:	ldrb	r1, [r5, r7]
   2e818:	mov	r0, r4
   2e81c:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2e820:	add	r7, r7, #1
   2e824:	cmp	r7, #256	; 0x100
   2e828:	bne	2e800 <__assert_fail@plt+0x1c114>
   2e82c:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2e830:	bl	12374 <__ctype_b_loc@plt>
   2e834:	mov	r5, r0
   2e838:	ldr	r2, [r5]
   2e83c:	lsl	r3, r7, #1
   2e840:	ldrh	r3, [r2, r3]
   2e844:	tst	r3, #2
   2e848:	beq	2e858 <__assert_fail@plt+0x1c16c>
   2e84c:	mov	r1, r7
   2e850:	mov	r0, r4
   2e854:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2e858:	add	r7, r7, #1
   2e85c:	cmp	r7, #256	; 0x100
   2e860:	bne	2e838 <__assert_fail@plt+0x1c14c>
   2e864:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2e868:	ldr	r1, [pc, #1416]	; 2edf8 <__assert_fail@plt+0x1c70c>
   2e86c:	mov	r0, r6
   2e870:	bl	11ffc <strcmp@plt>
   2e874:	subs	r7, r0, #0
   2e878:	bne	2e8f4 <__assert_fail@plt+0x1c208>
   2e87c:	cmp	r5, #0
   2e880:	beq	2e8bc <__assert_fail@plt+0x1c1d0>
   2e884:	bl	12374 <__ctype_b_loc@plt>
   2e888:	mov	r6, r0
   2e88c:	ldr	r2, [r6]
   2e890:	lsl	r3, r7, #1
   2e894:	ldrh	r3, [r2, r3]
   2e898:	tst	r3, #512	; 0x200
   2e89c:	beq	2e8ac <__assert_fail@plt+0x1c1c0>
   2e8a0:	ldrb	r1, [r5, r7]
   2e8a4:	mov	r0, r4
   2e8a8:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2e8ac:	add	r7, r7, #1
   2e8b0:	cmp	r7, #256	; 0x100
   2e8b4:	bne	2e88c <__assert_fail@plt+0x1c1a0>
   2e8b8:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2e8bc:	bl	12374 <__ctype_b_loc@plt>
   2e8c0:	mov	r5, r0
   2e8c4:	ldr	r2, [r5]
   2e8c8:	lsl	r3, r7, #1
   2e8cc:	ldrh	r3, [r2, r3]
   2e8d0:	tst	r3, #512	; 0x200
   2e8d4:	beq	2e8e4 <__assert_fail@plt+0x1c1f8>
   2e8d8:	mov	r1, r7
   2e8dc:	mov	r0, r4
   2e8e0:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2e8e4:	add	r7, r7, #1
   2e8e8:	cmp	r7, #256	; 0x100
   2e8ec:	bne	2e8c4 <__assert_fail@plt+0x1c1d8>
   2e8f0:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2e8f4:	ldr	r1, [pc, #1288]	; 2ee04 <__assert_fail@plt+0x1c718>
   2e8f8:	mov	r0, r6
   2e8fc:	bl	11ffc <strcmp@plt>
   2e900:	subs	r7, r0, #0
   2e904:	bne	2e980 <__assert_fail@plt+0x1c294>
   2e908:	cmp	r5, #0
   2e90c:	beq	2e948 <__assert_fail@plt+0x1c25c>
   2e910:	bl	12374 <__ctype_b_loc@plt>
   2e914:	mov	r6, r0
   2e918:	ldr	r2, [r6]
   2e91c:	lsl	r3, r7, #1
   2e920:	ldrh	r3, [r2, r3]
   2e924:	tst	r3, #8192	; 0x2000
   2e928:	beq	2e938 <__assert_fail@plt+0x1c24c>
   2e92c:	ldrb	r1, [r5, r7]
   2e930:	mov	r0, r4
   2e934:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2e938:	add	r7, r7, #1
   2e93c:	cmp	r7, #256	; 0x100
   2e940:	bne	2e918 <__assert_fail@plt+0x1c22c>
   2e944:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2e948:	bl	12374 <__ctype_b_loc@plt>
   2e94c:	mov	r5, r0
   2e950:	ldr	r2, [r5]
   2e954:	lsl	r3, r7, #1
   2e958:	ldrh	r3, [r2, r3]
   2e95c:	tst	r3, #8192	; 0x2000
   2e960:	beq	2e970 <__assert_fail@plt+0x1c284>
   2e964:	mov	r1, r7
   2e968:	mov	r0, r4
   2e96c:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2e970:	add	r7, r7, #1
   2e974:	cmp	r7, #256	; 0x100
   2e978:	bne	2e950 <__assert_fail@plt+0x1c264>
   2e97c:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2e980:	ldr	r1, [pc, #1132]	; 2edf4 <__assert_fail@plt+0x1c708>
   2e984:	mov	r0, r6
   2e988:	bl	11ffc <strcmp@plt>
   2e98c:	subs	r7, r0, #0
   2e990:	bne	2ea0c <__assert_fail@plt+0x1c320>
   2e994:	cmp	r5, #0
   2e998:	beq	2e9d4 <__assert_fail@plt+0x1c2e8>
   2e99c:	bl	12374 <__ctype_b_loc@plt>
   2e9a0:	mov	r6, r0
   2e9a4:	ldr	r2, [r6]
   2e9a8:	lsl	r3, r7, #1
   2e9ac:	ldrh	r3, [r2, r3]
   2e9b0:	tst	r3, #1024	; 0x400
   2e9b4:	beq	2e9c4 <__assert_fail@plt+0x1c2d8>
   2e9b8:	ldrb	r1, [r5, r7]
   2e9bc:	mov	r0, r4
   2e9c0:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2e9c4:	add	r7, r7, #1
   2e9c8:	cmp	r7, #256	; 0x100
   2e9cc:	bne	2e9a4 <__assert_fail@plt+0x1c2b8>
   2e9d0:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2e9d4:	bl	12374 <__ctype_b_loc@plt>
   2e9d8:	mov	r5, r0
   2e9dc:	ldr	r2, [r5]
   2e9e0:	lsl	r3, r7, #1
   2e9e4:	ldrh	r3, [r2, r3]
   2e9e8:	tst	r3, #1024	; 0x400
   2e9ec:	beq	2e9fc <__assert_fail@plt+0x1c310>
   2e9f0:	mov	r1, r7
   2e9f4:	mov	r0, r4
   2e9f8:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2e9fc:	add	r7, r7, #1
   2ea00:	cmp	r7, #256	; 0x100
   2ea04:	bne	2e9dc <__assert_fail@plt+0x1c2f0>
   2ea08:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2ea0c:	ldr	r1, [pc, #1012]	; 2ee08 <__assert_fail@plt+0x1c71c>
   2ea10:	mov	r0, r6
   2ea14:	bl	11ffc <strcmp@plt>
   2ea18:	subs	r7, r0, #0
   2ea1c:	bne	2ea98 <__assert_fail@plt+0x1c3ac>
   2ea20:	cmp	r5, #0
   2ea24:	beq	2ea60 <__assert_fail@plt+0x1c374>
   2ea28:	bl	12374 <__ctype_b_loc@plt>
   2ea2c:	mov	r6, r0
   2ea30:	ldr	r2, [r6]
   2ea34:	lsl	r3, r7, #1
   2ea38:	ldrh	r3, [r2, r3]
   2ea3c:	tst	r3, #2048	; 0x800
   2ea40:	beq	2ea50 <__assert_fail@plt+0x1c364>
   2ea44:	ldrb	r1, [r5, r7]
   2ea48:	mov	r0, r4
   2ea4c:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2ea50:	add	r7, r7, #1
   2ea54:	cmp	r7, #256	; 0x100
   2ea58:	bne	2ea30 <__assert_fail@plt+0x1c344>
   2ea5c:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2ea60:	bl	12374 <__ctype_b_loc@plt>
   2ea64:	mov	r5, r0
   2ea68:	ldr	r2, [r5]
   2ea6c:	lsl	r3, r7, #1
   2ea70:	ldrh	r3, [r2, r3]
   2ea74:	tst	r3, #2048	; 0x800
   2ea78:	beq	2ea88 <__assert_fail@plt+0x1c39c>
   2ea7c:	mov	r1, r7
   2ea80:	mov	r0, r4
   2ea84:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2ea88:	add	r7, r7, #1
   2ea8c:	cmp	r7, #256	; 0x100
   2ea90:	bne	2ea68 <__assert_fail@plt+0x1c37c>
   2ea94:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2ea98:	ldr	r1, [pc, #876]	; 2ee0c <__assert_fail@plt+0x1c720>
   2ea9c:	mov	r0, r6
   2eaa0:	bl	11ffc <strcmp@plt>
   2eaa4:	subs	r7, r0, #0
   2eaa8:	bne	2eb24 <__assert_fail@plt+0x1c438>
   2eaac:	cmp	r5, #0
   2eab0:	beq	2eaec <__assert_fail@plt+0x1c400>
   2eab4:	bl	12374 <__ctype_b_loc@plt>
   2eab8:	mov	r6, r0
   2eabc:	ldr	r2, [r6]
   2eac0:	lsl	r3, r7, #1
   2eac4:	ldrh	r3, [r2, r3]
   2eac8:	tst	r3, #16384	; 0x4000
   2eacc:	beq	2eadc <__assert_fail@plt+0x1c3f0>
   2ead0:	ldrb	r1, [r5, r7]
   2ead4:	mov	r0, r4
   2ead8:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2eadc:	add	r7, r7, #1
   2eae0:	cmp	r7, #256	; 0x100
   2eae4:	bne	2eabc <__assert_fail@plt+0x1c3d0>
   2eae8:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2eaec:	bl	12374 <__ctype_b_loc@plt>
   2eaf0:	mov	r5, r0
   2eaf4:	ldr	r2, [r5]
   2eaf8:	lsl	r3, r7, #1
   2eafc:	ldrh	r3, [r2, r3]
   2eb00:	tst	r3, #16384	; 0x4000
   2eb04:	beq	2eb14 <__assert_fail@plt+0x1c428>
   2eb08:	mov	r1, r7
   2eb0c:	mov	r0, r4
   2eb10:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2eb14:	add	r7, r7, #1
   2eb18:	cmp	r7, #256	; 0x100
   2eb1c:	bne	2eaf4 <__assert_fail@plt+0x1c408>
   2eb20:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2eb24:	ldr	r1, [pc, #708]	; 2edf0 <__assert_fail@plt+0x1c704>
   2eb28:	mov	r0, r6
   2eb2c:	bl	11ffc <strcmp@plt>
   2eb30:	subs	r7, r0, #0
   2eb34:	bne	2ebb0 <__assert_fail@plt+0x1c4c4>
   2eb38:	cmp	r5, #0
   2eb3c:	beq	2eb78 <__assert_fail@plt+0x1c48c>
   2eb40:	bl	12374 <__ctype_b_loc@plt>
   2eb44:	mov	r6, r0
   2eb48:	ldr	r2, [r6]
   2eb4c:	lsl	r3, r7, #1
   2eb50:	ldrh	r3, [r2, r3]
   2eb54:	tst	r3, #256	; 0x100
   2eb58:	beq	2eb68 <__assert_fail@plt+0x1c47c>
   2eb5c:	ldrb	r1, [r5, r7]
   2eb60:	mov	r0, r4
   2eb64:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2eb68:	add	r7, r7, #1
   2eb6c:	cmp	r7, #256	; 0x100
   2eb70:	bne	2eb48 <__assert_fail@plt+0x1c45c>
   2eb74:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2eb78:	bl	12374 <__ctype_b_loc@plt>
   2eb7c:	mov	r5, r0
   2eb80:	ldr	r2, [r5]
   2eb84:	lsl	r3, r7, #1
   2eb88:	ldrh	r3, [r2, r3]
   2eb8c:	tst	r3, #256	; 0x100
   2eb90:	beq	2eba0 <__assert_fail@plt+0x1c4b4>
   2eb94:	mov	r1, r7
   2eb98:	mov	r0, r4
   2eb9c:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2eba0:	add	r7, r7, #1
   2eba4:	cmp	r7, #256	; 0x100
   2eba8:	bne	2eb80 <__assert_fail@plt+0x1c494>
   2ebac:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2ebb0:	ldr	r1, [pc, #600]	; 2ee10 <__assert_fail@plt+0x1c724>
   2ebb4:	mov	r0, r6
   2ebb8:	bl	11ffc <strcmp@plt>
   2ebbc:	subs	r7, r0, #0
   2ebc0:	bne	2ec3c <__assert_fail@plt+0x1c550>
   2ebc4:	cmp	r5, #0
   2ebc8:	beq	2ec04 <__assert_fail@plt+0x1c518>
   2ebcc:	bl	12374 <__ctype_b_loc@plt>
   2ebd0:	mov	r6, r0
   2ebd4:	ldr	r2, [r6]
   2ebd8:	lsl	r3, r7, #1
   2ebdc:	ldrh	r3, [r2, r3]
   2ebe0:	tst	r3, #1
   2ebe4:	beq	2ebf4 <__assert_fail@plt+0x1c508>
   2ebe8:	ldrb	r1, [r5, r7]
   2ebec:	mov	r0, r4
   2ebf0:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2ebf4:	add	r7, r7, #1
   2ebf8:	cmp	r7, #256	; 0x100
   2ebfc:	bne	2ebd4 <__assert_fail@plt+0x1c4e8>
   2ec00:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2ec04:	bl	12374 <__ctype_b_loc@plt>
   2ec08:	mov	r5, r0
   2ec0c:	ldr	r2, [r5]
   2ec10:	lsl	r3, r7, #1
   2ec14:	ldrh	r3, [r2, r3]
   2ec18:	tst	r3, #1
   2ec1c:	beq	2ec2c <__assert_fail@plt+0x1c540>
   2ec20:	mov	r1, r7
   2ec24:	mov	r0, r4
   2ec28:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2ec2c:	add	r7, r7, #1
   2ec30:	cmp	r7, #256	; 0x100
   2ec34:	bne	2ec0c <__assert_fail@plt+0x1c520>
   2ec38:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2ec3c:	ldr	r1, [pc, #464]	; 2ee14 <__assert_fail@plt+0x1c728>
   2ec40:	mov	r0, r6
   2ec44:	bl	11ffc <strcmp@plt>
   2ec48:	subs	r7, r0, #0
   2ec4c:	bne	2ecc8 <__assert_fail@plt+0x1c5dc>
   2ec50:	cmp	r5, #0
   2ec54:	beq	2ec90 <__assert_fail@plt+0x1c5a4>
   2ec58:	bl	12374 <__ctype_b_loc@plt>
   2ec5c:	mov	r6, r0
   2ec60:	ldr	r2, [r6]
   2ec64:	lsl	r3, r7, #1
   2ec68:	ldrsh	r3, [r2, r3]
   2ec6c:	cmp	r3, #0
   2ec70:	bge	2ec80 <__assert_fail@plt+0x1c594>
   2ec74:	ldrb	r1, [r5, r7]
   2ec78:	mov	r0, r4
   2ec7c:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2ec80:	add	r7, r7, #1
   2ec84:	cmp	r7, #256	; 0x100
   2ec88:	bne	2ec60 <__assert_fail@plt+0x1c574>
   2ec8c:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2ec90:	bl	12374 <__ctype_b_loc@plt>
   2ec94:	mov	r5, r0
   2ec98:	ldr	r2, [r5]
   2ec9c:	lsl	r3, r7, #1
   2eca0:	ldrsh	r3, [r2, r3]
   2eca4:	cmp	r3, #0
   2eca8:	bge	2ecb8 <__assert_fail@plt+0x1c5cc>
   2ecac:	mov	r1, r7
   2ecb0:	mov	r0, r4
   2ecb4:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2ecb8:	add	r7, r7, #1
   2ecbc:	cmp	r7, #256	; 0x100
   2ecc0:	bne	2ec98 <__assert_fail@plt+0x1c5ac>
   2ecc4:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2ecc8:	ldr	r1, [pc, #328]	; 2ee18 <__assert_fail@plt+0x1c72c>
   2eccc:	mov	r0, r6
   2ecd0:	bl	11ffc <strcmp@plt>
   2ecd4:	subs	r7, r0, #0
   2ecd8:	bne	2ed54 <__assert_fail@plt+0x1c668>
   2ecdc:	cmp	r5, #0
   2ece0:	beq	2ed1c <__assert_fail@plt+0x1c630>
   2ece4:	bl	12374 <__ctype_b_loc@plt>
   2ece8:	mov	r6, r0
   2ecec:	ldr	r2, [r6]
   2ecf0:	lsl	r3, r7, #1
   2ecf4:	ldrh	r3, [r2, r3]
   2ecf8:	tst	r3, #4
   2ecfc:	beq	2ed0c <__assert_fail@plt+0x1c620>
   2ed00:	ldrb	r1, [r5, r7]
   2ed04:	mov	r0, r4
   2ed08:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2ed0c:	add	r7, r7, #1
   2ed10:	cmp	r7, #256	; 0x100
   2ed14:	bne	2ecec <__assert_fail@plt+0x1c600>
   2ed18:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2ed1c:	bl	12374 <__ctype_b_loc@plt>
   2ed20:	mov	r5, r0
   2ed24:	ldr	r2, [r5]
   2ed28:	lsl	r3, r7, #1
   2ed2c:	ldrh	r3, [r2, r3]
   2ed30:	tst	r3, #4
   2ed34:	beq	2ed44 <__assert_fail@plt+0x1c658>
   2ed38:	mov	r1, r7
   2ed3c:	mov	r0, r4
   2ed40:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2ed44:	add	r7, r7, #1
   2ed48:	cmp	r7, #256	; 0x100
   2ed4c:	bne	2ed24 <__assert_fail@plt+0x1c638>
   2ed50:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2ed54:	mov	r0, r6
   2ed58:	ldr	r1, [pc, #188]	; 2ee1c <__assert_fail@plt+0x1c730>
   2ed5c:	bl	11ffc <strcmp@plt>
   2ed60:	subs	r6, r0, #0
   2ed64:	bne	2ede8 <__assert_fail@plt+0x1c6fc>
   2ed68:	cmp	r5, #0
   2ed6c:	beq	2eda8 <__assert_fail@plt+0x1c6bc>
   2ed70:	bl	12374 <__ctype_b_loc@plt>
   2ed74:	mov	r7, r0
   2ed78:	ldr	r2, [r7]
   2ed7c:	lsl	r3, r6, #1
   2ed80:	ldrh	r3, [r2, r3]
   2ed84:	tst	r3, #4096	; 0x1000
   2ed88:	beq	2ed98 <__assert_fail@plt+0x1c6ac>
   2ed8c:	ldrb	r1, [r5, r6]
   2ed90:	mov	r0, r4
   2ed94:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2ed98:	add	r6, r6, #1
   2ed9c:	cmp	r6, #256	; 0x100
   2eda0:	bne	2ed78 <__assert_fail@plt+0x1c68c>
   2eda4:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2eda8:	bl	12374 <__ctype_b_loc@plt>
   2edac:	mov	r5, r0
   2edb0:	ldr	r2, [r5]
   2edb4:	lsl	r3, r6, #1
   2edb8:	ldrh	r3, [r2, r3]
   2edbc:	tst	r3, #4096	; 0x1000
   2edc0:	beq	2edd0 <__assert_fail@plt+0x1c6e4>
   2edc4:	mov	r1, r6
   2edc8:	mov	r0, r4
   2edcc:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2edd0:	add	r6, r6, #1
   2edd4:	cmp	r6, #256	; 0x100
   2edd8:	bne	2edb0 <__assert_fail@plt+0x1c6c4>
   2eddc:	b	2e79c <__assert_fail@plt+0x1c0b0>
   2ede0:	mov	r0, #12
   2ede4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ede8:	mov	r0, #4
   2edec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2edf0:	andeq	pc, r3, sl, lsl #8
   2edf4:	andeq	pc, r3, r4, lsl #8
   2edf8:	andeq	pc, r3, r0, lsl r4	; <UNPREDICTABLE>
   2edfc:	andeq	pc, r3, r6, lsl r4	; <UNPREDICTABLE>
   2ee00:	andeq	pc, r3, ip, lsl r4	; <UNPREDICTABLE>
   2ee04:	andeq	pc, r3, r2, lsr #8
   2ee08:	andeq	pc, r3, fp, lsr r4	; <UNPREDICTABLE>
   2ee0c:	andeq	sl, r3, sl, asr lr
   2ee10:	andeq	pc, r3, r8, lsr #8
   2ee14:	andeq	pc, r3, lr, lsr #8
   2ee18:	andeq	pc, r3, r4, lsr r4	; <UNPREDICTABLE>
   2ee1c:	andeq	pc, r3, sl, lsr r4	; <UNPREDICTABLE>
   2ee20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ee24:	sub	sp, sp, #36	; 0x24
   2ee28:	mov	r7, r0
   2ee2c:	mov	fp, r1
   2ee30:	mov	r4, #0
   2ee34:	mov	r1, #1
   2ee38:	mov	r0, #32
   2ee3c:	str	r2, [sp, #12]
   2ee40:	mov	r9, r3
   2ee44:	ldrb	sl, [sp, #72]	; 0x48
   2ee48:	ldr	r8, [sp, #76]	; 0x4c
   2ee4c:	str	r4, [sp, #20]
   2ee50:	bl	29b08 <__assert_fail@plt+0x1741c>
   2ee54:	subs	r5, r0, #0
   2ee58:	bne	2ee6c <__assert_fail@plt+0x1c780>
   2ee5c:	mov	r3, #12
   2ee60:	str	r3, [r8]
   2ee64:	mov	r4, #0
   2ee68:	b	2eee0 <__assert_fail@plt+0x1c7f4>
   2ee6c:	mov	r1, #1
   2ee70:	mov	r0, #40	; 0x28
   2ee74:	bl	29b08 <__assert_fail@plt+0x1741c>
   2ee78:	subs	r6, r0, #0
   2ee7c:	bne	2ee8c <__assert_fail@plt+0x1c7a0>
   2ee80:	mov	r0, r5
   2ee84:	bl	2a01c <__assert_fail@plt+0x17930>
   2ee88:	b	2ee5c <__assert_fail@plt+0x1c770>
   2ee8c:	ldrb	r2, [r6, #16]
   2ee90:	and	r3, sl, #1
   2ee94:	mov	r0, fp
   2ee98:	bic	r2, r2, #1
   2ee9c:	orr	r3, r3, r2
   2eea0:	strb	r3, [r6, #16]
   2eea4:	ldr	r3, [sp, #12]
   2eea8:	str	r4, [sp, #4]
   2eeac:	str	r3, [sp]
   2eeb0:	mov	r2, r6
   2eeb4:	add	r3, sp, #20
   2eeb8:	mov	r1, r5
   2eebc:	bl	2e6a8 <__assert_fail@plt+0x1bfbc>
   2eec0:	subs	fp, r0, #0
   2eec4:	subeq	r9, r9, #1
   2eec8:	beq	2eef4 <__assert_fail@plt+0x1c808>
   2eecc:	mov	r0, r5
   2eed0:	bl	2a01c <__assert_fail@plt+0x17930>
   2eed4:	mov	r0, r6
   2eed8:	bl	2dda4 <__assert_fail@plt+0x1b6b8>
   2eedc:	str	fp, [r8]
   2eee0:	mov	r0, r4
   2eee4:	add	sp, sp, #36	; 0x24
   2eee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eeec:	mov	r0, r5
   2eef0:	bl	2c958 <__assert_fail@plt+0x1a26c>
   2eef4:	ldrb	r1, [r9, #1]!
   2eef8:	cmp	r1, #0
   2eefc:	bne	2eeec <__assert_fail@plt+0x1c800>
   2ef00:	cmp	sl, #0
   2ef04:	beq	2ef10 <__assert_fail@plt+0x1c824>
   2ef08:	mov	r0, r5
   2ef0c:	bl	2c9bc <__assert_fail@plt+0x1a2d0>
   2ef10:	ldr	r3, [r7, #92]	; 0x5c
   2ef14:	cmp	r3, #1
   2ef18:	ble	2ef28 <__assert_fail@plt+0x1c83c>
   2ef1c:	ldr	r1, [r7, #60]	; 0x3c
   2ef20:	mov	r0, r5
   2ef24:	bl	2ca04 <__assert_fail@plt+0x1a318>
   2ef28:	mov	r9, #0
   2ef2c:	mov	r3, #3
   2ef30:	str	r9, [sp, #28]
   2ef34:	mov	r2, r9
   2ef38:	strb	r3, [sp, #28]
   2ef3c:	mov	r1, r9
   2ef40:	add	r3, sp, #24
   2ef44:	mov	r0, r7
   2ef48:	str	r5, [sp, #24]
   2ef4c:	bl	2d204 <__assert_fail@plt+0x1ab18>
   2ef50:	subs	r4, r0, #0
   2ef54:	beq	2efbc <__assert_fail@plt+0x1c8d0>
   2ef58:	ldr	r3, [r7, #92]	; 0x5c
   2ef5c:	cmp	r3, #1
   2ef60:	ble	2efb0 <__assert_fail@plt+0x1c8c4>
   2ef64:	mov	r3, #6
   2ef68:	strb	r3, [sp, #28]
   2ef6c:	ldrb	r3, [r7, #88]	; 0x58
   2ef70:	mov	r2, r9
   2ef74:	mov	r1, r9
   2ef78:	orr	r3, r3, #2
   2ef7c:	strb	r3, [r7, #88]	; 0x58
   2ef80:	mov	r0, r7
   2ef84:	add	r3, sp, #24
   2ef88:	str	r6, [sp, #24]
   2ef8c:	bl	2d204 <__assert_fail@plt+0x1ab18>
   2ef90:	subs	r2, r0, #0
   2ef94:	beq	2efbc <__assert_fail@plt+0x1c8d0>
   2ef98:	mov	r1, r4
   2ef9c:	mov	r3, #10
   2efa0:	mov	r0, r7
   2efa4:	bl	2d354 <__assert_fail@plt+0x1ac68>
   2efa8:	mov	r4, r0
   2efac:	b	2eee0 <__assert_fail@plt+0x1c7f4>
   2efb0:	mov	r0, r6
   2efb4:	bl	2dda4 <__assert_fail@plt+0x1b6b8>
   2efb8:	b	2eee0 <__assert_fail@plt+0x1c7f4>
   2efbc:	mov	r0, r5
   2efc0:	bl	2a01c <__assert_fail@plt+0x17930>
   2efc4:	mov	r0, r6
   2efc8:	bl	2dda4 <__assert_fail@plt+0x1b6b8>
   2efcc:	b	2ee5c <__assert_fail@plt+0x1c770>
   2efd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2efd4:	sub	sp, sp, #300	; 0x12c
   2efd8:	ldr	r6, [r0]
   2efdc:	mov	r8, r0
   2efe0:	mov	r9, r1
   2efe4:	ldr	r3, [r6, #92]	; 0x5c
   2efe8:	mov	r4, r2
   2efec:	cmp	r3, #1
   2eff0:	movne	r3, #0
   2eff4:	ldreq	r3, [r0, #12]
   2eff8:	add	r7, sp, #40	; 0x28
   2effc:	lsreq	r3, r3, #22
   2f000:	andeq	r3, r3, #1
   2f004:	str	r3, [sp, #4]
   2f008:	mov	r3, #0
   2f00c:	str	r3, [sp]
   2f010:	ldr	r3, [r9, #8]
   2f014:	ldr	r2, [sp]
   2f018:	cmp	r2, r3
   2f01c:	bge	2f330 <__assert_fail@plt+0x1cc44>
   2f020:	ldr	r3, [r9, #12]
   2f024:	ldr	r2, [sp]
   2f028:	ldr	sl, [r3, r2, lsl #2]
   2f02c:	lsl	r3, sl, #3
   2f030:	str	r3, [sp, #8]
   2f034:	ldr	r3, [r6]
   2f038:	lsl	r2, sl, #3
   2f03c:	add	r2, r3, r2
   2f040:	ldrb	r5, [r2, #4]
   2f044:	cmp	r5, #1
   2f048:	bne	2f130 <__assert_fail@plt+0x1ca44>
   2f04c:	ldrb	r0, [r3, sl, lsl #3]
   2f050:	ldr	r3, [sp, #4]
   2f054:	cmp	r3, #0
   2f058:	strb	r5, [r4, r0]
   2f05c:	beq	2f068 <__assert_fail@plt+0x1c97c>
   2f060:	bl	12110 <tolower@plt>
   2f064:	strb	r5, [r4, r0]
   2f068:	ldr	r3, [r8, #12]
   2f06c:	tst	r3, #4194304	; 0x400000
   2f070:	beq	2f110 <__assert_fail@plt+0x1ca24>
   2f074:	ldr	r3, [r6, #92]	; 0x5c
   2f078:	cmp	r3, #1
   2f07c:	ble	2f110 <__assert_fail@plt+0x1ca24>
   2f080:	ldr	r2, [r6]
   2f084:	ldr	r0, [pc, #684]	; 2f338 <__assert_fail@plt+0x1cc4c>
   2f088:	mov	r5, #1
   2f08c:	ldrb	r3, [r2, sl, lsl #3]
   2f090:	strb	r3, [sp, #40]	; 0x28
   2f094:	ldr	ip, [r6, #8]
   2f098:	add	r1, sl, r5
   2f09c:	cmp	ip, r1
   2f0a0:	bls	2f0c0 <__assert_fail@plt+0x1c9d4>
   2f0a4:	add	r3, r2, r1, lsl #3
   2f0a8:	ldr	r3, [r3, #4]
   2f0ac:	bic	r3, r3, #-16777216	; 0xff000000
   2f0b0:	bic	r3, r3, #14614528	; 0xdf0000
   2f0b4:	bic	r3, r3, #65280	; 0xff00
   2f0b8:	cmp	r3, r0
   2f0bc:	beq	2f120 <__assert_fail@plt+0x1ca34>
   2f0c0:	mov	r3, #0
   2f0c4:	str	r3, [sp, #32]
   2f0c8:	str	r3, [sp, #36]	; 0x24
   2f0cc:	mov	r2, r5
   2f0d0:	add	r3, sp, #32
   2f0d4:	mov	r1, r7
   2f0d8:	add	r0, sp, #28
   2f0dc:	bl	2bf50 <__assert_fail@plt+0x19864>
   2f0e0:	cmp	r0, r5
   2f0e4:	bne	2f110 <__assert_fail@plt+0x1ca24>
   2f0e8:	ldr	r0, [sp, #28]
   2f0ec:	bl	12128 <towlower@plt>
   2f0f0:	add	r2, sp, #32
   2f0f4:	mov	r1, r0
   2f0f8:	mov	r0, r7
   2f0fc:	bl	11fc0 <wcrtomb@plt>
   2f100:	cmn	r0, #1
   2f104:	movne	r2, #1
   2f108:	ldrbne	r3, [sp, #40]	; 0x28
   2f10c:	strbne	r2, [r4, r3]
   2f110:	ldr	r3, [sp]
   2f114:	add	r3, r3, #1
   2f118:	str	r3, [sp]
   2f11c:	b	2f010 <__assert_fail@plt+0x1c924>
   2f120:	ldrb	r3, [r2, r1, lsl #3]
   2f124:	strb	r3, [r7, r5]
   2f128:	add	r5, r5, #1
   2f12c:	b	2f098 <__assert_fail@plt+0x1c9ac>
   2f130:	cmp	r5, #3
   2f134:	bne	2f1b8 <__assert_fail@plt+0x1cacc>
   2f138:	mov	sl, #0
   2f13c:	mov	r1, #1
   2f140:	ldr	r2, [sp, #8]
   2f144:	ldr	r3, [r6]
   2f148:	lsl	fp, sl, #3
   2f14c:	mov	r5, #0
   2f150:	ldr	r3, [r3, r2]
   2f154:	add	r2, r4, fp
   2f158:	ldr	r3, [r3, sl]
   2f15c:	lsr	ip, r3, r5
   2f160:	tst	ip, #1
   2f164:	add	r0, r5, fp
   2f168:	beq	2f19c <__assert_fail@plt+0x1cab0>
   2f16c:	ldr	ip, [sp, #4]
   2f170:	strb	r1, [r2, r5]
   2f174:	cmp	ip, #0
   2f178:	beq	2f19c <__assert_fail@plt+0x1cab0>
   2f17c:	str	r1, [sp, #20]
   2f180:	str	r2, [sp, #16]
   2f184:	str	r3, [sp, #12]
   2f188:	bl	12110 <tolower@plt>
   2f18c:	ldr	r2, [sp, #16]
   2f190:	ldr	r3, [sp, #12]
   2f194:	ldr	r1, [sp, #20]
   2f198:	strb	r1, [r4, r0]
   2f19c:	add	r5, r5, #1
   2f1a0:	cmp	r5, #32
   2f1a4:	bne	2f15c <__assert_fail@plt+0x1ca70>
   2f1a8:	add	sl, sl, #4
   2f1ac:	cmp	sl, #32
   2f1b0:	bne	2f140 <__assert_fail@plt+0x1ca54>
   2f1b4:	b	2f110 <__assert_fail@plt+0x1ca24>
   2f1b8:	cmp	r5, #6
   2f1bc:	bne	2f2fc <__assert_fail@plt+0x1cc10>
   2f1c0:	ldr	r2, [r6, #92]	; 0x5c
   2f1c4:	ldr	fp, [r3, sl, lsl #3]
   2f1c8:	cmp	r2, #1
   2f1cc:	ble	2f2a8 <__assert_fail@plt+0x1cbbc>
   2f1d0:	ldr	r2, [fp, #36]	; 0x24
   2f1d4:	cmp	r2, #0
   2f1d8:	bne	2f2b0 <__assert_fail@plt+0x1cbc4>
   2f1dc:	ldrb	r2, [fp, #16]
   2f1e0:	tst	r2, #1
   2f1e4:	bne	2f2b0 <__assert_fail@plt+0x1cbc4>
   2f1e8:	ldr	r5, [fp, #32]
   2f1ec:	cmp	r5, #0
   2f1f0:	bne	2f2b0 <__assert_fail@plt+0x1cbc4>
   2f1f4:	mov	sl, #0
   2f1f8:	ldr	r2, [fp, #20]
   2f1fc:	cmp	r5, r2
   2f200:	bge	2f110 <__assert_fail@plt+0x1ca24>
   2f204:	str	sl, [sp, #32]
   2f208:	str	sl, [sp, #36]	; 0x24
   2f20c:	ldr	r1, [fp]
   2f210:	lsl	r3, r5, #2
   2f214:	add	r2, sp, #32
   2f218:	ldr	r1, [r1, r5, lsl #2]
   2f21c:	mov	r0, r7
   2f220:	str	r3, [sp, #8]
   2f224:	bl	11fc0 <wcrtomb@plt>
   2f228:	cmn	r0, #1
   2f22c:	beq	2f258 <__assert_fail@plt+0x1cb6c>
   2f230:	ldrb	r0, [sp, #40]	; 0x28
   2f234:	ldr	r3, [sp, #4]
   2f238:	mov	r2, #1
   2f23c:	cmp	r3, #0
   2f240:	strb	r2, [r4, r0]
   2f244:	str	r2, [sp, #8]
   2f248:	beq	2f258 <__assert_fail@plt+0x1cb6c>
   2f24c:	bl	12110 <tolower@plt>
   2f250:	ldr	r2, [sp, #8]
   2f254:	strb	r2, [r4, r0]
   2f258:	ldr	r2, [r8, #12]
   2f25c:	tst	r2, #4194304	; 0x400000
   2f260:	beq	2f2a0 <__assert_fail@plt+0x1cbb4>
   2f264:	ldr	r2, [r6, #92]	; 0x5c
   2f268:	cmp	r2, #1
   2f26c:	ble	2f2a0 <__assert_fail@plt+0x1cbb4>
   2f270:	ldr	r2, [fp]
   2f274:	lsl	r3, r5, #2
   2f278:	ldr	r0, [r2, r3]
   2f27c:	bl	12128 <towlower@plt>
   2f280:	add	r2, sp, #32
   2f284:	mov	r1, r0
   2f288:	mov	r0, r7
   2f28c:	bl	11fc0 <wcrtomb@plt>
   2f290:	cmn	r0, #1
   2f294:	movne	r1, #1
   2f298:	ldrbne	r2, [sp, #40]	; 0x28
   2f29c:	strbne	r1, [r4, r2]
   2f2a0:	add	r5, r5, #1
   2f2a4:	b	2f1f8 <__assert_fail@plt+0x1cb0c>
   2f2a8:	mov	r5, #0
   2f2ac:	b	2f1f4 <__assert_fail@plt+0x1cb08>
   2f2b0:	mov	r5, #0
   2f2b4:	strb	r5, [sp, #32]
   2f2b8:	mov	r2, #1
   2f2bc:	mov	r3, r7
   2f2c0:	add	r1, sp, #32
   2f2c4:	mov	r0, r5
   2f2c8:	str	r5, [r7]
   2f2cc:	str	r5, [r7, #4]
   2f2d0:	bl	2bf50 <__assert_fail@plt+0x19864>
   2f2d4:	ldrb	r3, [sp, #32]
   2f2d8:	cmn	r0, #2
   2f2dc:	moveq	r2, #1
   2f2e0:	strbeq	r2, [r4, r3]
   2f2e4:	add	r3, r3, #1
   2f2e8:	uxtb	r3, r3
   2f2ec:	cmp	r3, #0
   2f2f0:	strb	r3, [sp, #32]
   2f2f4:	bne	2f2b8 <__assert_fail@plt+0x1cbcc>
   2f2f8:	b	2f110 <__assert_fail@plt+0x1ca24>
   2f2fc:	and	r3, r5, #253	; 0xfd
   2f300:	cmp	r3, #5
   2f304:	beq	2f310 <__assert_fail@plt+0x1cc24>
   2f308:	cmp	r5, #2
   2f30c:	bne	2f110 <__assert_fail@plt+0x1ca24>
   2f310:	mov	r2, #256	; 0x100
   2f314:	mov	r1, #1
   2f318:	mov	r0, r4
   2f31c:	bl	12434 <memset@plt>
   2f320:	cmp	r5, #2
   2f324:	ldrbeq	r3, [r8, #28]
   2f328:	orreq	r3, r3, #1
   2f32c:	strbeq	r3, [r8, #28]
   2f330:	add	sp, sp, #300	; 0x12c
   2f334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f338:	eoreq	r0, r0, r1
   2f33c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f340:	ldr	sl, [r0]
   2f344:	add	ip, sl, r1, lsl #3
   2f348:	ldrb	r9, [ip, #4]
   2f34c:	cmp	r9, #7
   2f350:	bne	2f440 <__assert_fail@plt+0x1cd54>
   2f354:	ldr	r0, [r2, #4]
   2f358:	add	r1, r0, r3
   2f35c:	ldrb	ip, [r0, r3]
   2f360:	cmp	ip, #193	; 0xc1
   2f364:	bhi	2f374 <__assert_fail@plt+0x1cc88>
   2f368:	mov	r4, #0
   2f36c:	mov	r0, r4
   2f370:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f374:	ldr	r0, [r2, #48]	; 0x30
   2f378:	add	r2, r3, #1
   2f37c:	cmp	r2, r0
   2f380:	bge	2f368 <__assert_fail@plt+0x1cc7c>
   2f384:	cmp	ip, #223	; 0xdf
   2f388:	ldrb	r2, [r1, #1]
   2f38c:	bhi	2f3a4 <__assert_fail@plt+0x1ccb8>
   2f390:	eor	r2, r2, #128	; 0x80
   2f394:	cmp	r2, #63	; 0x3f
   2f398:	movls	r4, #2
   2f39c:	bls	2f36c <__assert_fail@plt+0x1cc80>
   2f3a0:	b	2f368 <__assert_fail@plt+0x1cc7c>
   2f3a4:	cmp	ip, #239	; 0xef
   2f3a8:	bhi	2f3ec <__assert_fail@plt+0x1cd00>
   2f3ac:	cmp	r2, #159	; 0x9f
   2f3b0:	cmpls	ip, #224	; 0xe0
   2f3b4:	movne	r4, #3
   2f3b8:	beq	2f368 <__assert_fail@plt+0x1cc7c>
   2f3bc:	add	r3, r4, r3
   2f3c0:	cmp	r0, r3
   2f3c4:	blt	2f368 <__assert_fail@plt+0x1cc7c>
   2f3c8:	mov	r3, #1
   2f3cc:	ldrb	r2, [r1, r3]
   2f3d0:	eor	r2, r2, #128	; 0x80
   2f3d4:	cmp	r2, #63	; 0x3f
   2f3d8:	bhi	2f368 <__assert_fail@plt+0x1cc7c>
   2f3dc:	add	r3, r3, #1
   2f3e0:	cmp	r4, r3
   2f3e4:	bne	2f3cc <__assert_fail@plt+0x1cce0>
   2f3e8:	b	2f36c <__assert_fail@plt+0x1cc80>
   2f3ec:	cmp	ip, #247	; 0xf7
   2f3f0:	bhi	2f408 <__assert_fail@plt+0x1cd1c>
   2f3f4:	cmp	r2, #143	; 0x8f
   2f3f8:	cmpls	ip, #240	; 0xf0
   2f3fc:	movne	r4, #4
   2f400:	bne	2f3bc <__assert_fail@plt+0x1ccd0>
   2f404:	b	2f368 <__assert_fail@plt+0x1cc7c>
   2f408:	cmp	ip, #251	; 0xfb
   2f40c:	bhi	2f424 <__assert_fail@plt+0x1cd38>
   2f410:	cmp	r2, #135	; 0x87
   2f414:	cmpls	ip, #248	; 0xf8
   2f418:	movne	r4, #5
   2f41c:	bne	2f3bc <__assert_fail@plt+0x1ccd0>
   2f420:	b	2f368 <__assert_fail@plt+0x1cc7c>
   2f424:	cmp	ip, #253	; 0xfd
   2f428:	bhi	2f368 <__assert_fail@plt+0x1cc7c>
   2f42c:	cmp	r2, #131	; 0x83
   2f430:	cmpls	ip, #252	; 0xfc
   2f434:	beq	2f368 <__assert_fail@plt+0x1cc7c>
   2f438:	mov	r4, #6
   2f43c:	b	2f3bc <__assert_fail@plt+0x1ccd0>
   2f440:	mov	r5, r1
   2f444:	mov	r8, r0
   2f448:	mov	r1, r3
   2f44c:	mov	r0, r2
   2f450:	mov	r7, r3
   2f454:	mov	r6, r2
   2f458:	bl	2ca2c <__assert_fail@plt+0x1a340>
   2f45c:	cmp	r9, #5
   2f460:	mov	r4, r0
   2f464:	bne	2f4a8 <__assert_fail@plt+0x1cdbc>
   2f468:	cmp	r0, #1
   2f46c:	ble	2f368 <__assert_fail@plt+0x1cc7c>
   2f470:	ldr	r3, [r8, #128]	; 0x80
   2f474:	tst	r3, #64	; 0x40
   2f478:	bne	2f48c <__assert_fail@plt+0x1cda0>
   2f47c:	ldr	r2, [r6, #4]
   2f480:	ldrb	r2, [r2, r7]
   2f484:	cmp	r2, #10
   2f488:	beq	2f368 <__assert_fail@plt+0x1cc7c>
   2f48c:	tst	r3, #128	; 0x80
   2f490:	beq	2f36c <__assert_fail@plt+0x1cc80>
   2f494:	ldr	r3, [r6, #4]
   2f498:	ldrb	r3, [r3, r7]
   2f49c:	cmp	r3, #0
   2f4a0:	beq	2f368 <__assert_fail@plt+0x1cc7c>
   2f4a4:	b	2f36c <__assert_fail@plt+0x1cc80>
   2f4a8:	cmp	r0, #1
   2f4ac:	movle	r3, #0
   2f4b0:	movgt	r3, #1
   2f4b4:	cmp	r9, #6
   2f4b8:	movne	r3, #0
   2f4bc:	cmp	r3, #0
   2f4c0:	beq	2f368 <__assert_fail@plt+0x1cc7c>
   2f4c4:	ldr	r5, [sl, r5, lsl #3]
   2f4c8:	ldr	r3, [r5, #32]
   2f4cc:	ldr	r2, [r5, #20]
   2f4d0:	cmp	r3, #0
   2f4d4:	bne	2f4ec <__assert_fail@plt+0x1ce00>
   2f4d8:	ldr	r3, [r5, #36]	; 0x24
   2f4dc:	cmp	r3, #0
   2f4e0:	bne	2f4ec <__assert_fail@plt+0x1ce00>
   2f4e4:	cmp	r2, #0
   2f4e8:	beq	2f580 <__assert_fail@plt+0x1ce94>
   2f4ec:	mov	r0, r6
   2f4f0:	mov	r1, r7
   2f4f4:	bl	2ca84 <__assert_fail@plt+0x1a398>
   2f4f8:	mov	r3, #0
   2f4fc:	mov	r6, r0
   2f500:	cmp	r3, r2
   2f504:	blt	2f548 <__assert_fail@plt+0x1ce5c>
   2f508:	mov	r7, #0
   2f50c:	ldr	r3, [r5, #36]	; 0x24
   2f510:	cmp	r7, r3
   2f514:	blt	2f560 <__assert_fail@plt+0x1ce74>
   2f518:	ldr	r2, [r5, #32]
   2f51c:	mov	r3, #0
   2f520:	cmp	r3, r2
   2f524:	blt	2f588 <__assert_fail@plt+0x1ce9c>
   2f528:	mov	r3, #0
   2f52c:	ldrb	r2, [r5, #16]
   2f530:	tst	r2, #1
   2f534:	moveq	r4, r3
   2f538:	beq	2f36c <__assert_fail@plt+0x1cc80>
   2f53c:	cmp	r3, #0
   2f540:	bne	2f368 <__assert_fail@plt+0x1cc7c>
   2f544:	b	2f36c <__assert_fail@plt+0x1cc80>
   2f548:	ldr	r1, [r5]
   2f54c:	ldr	r1, [r1, r3, lsl #2]
   2f550:	cmp	r6, r1
   2f554:	beq	2f5b0 <__assert_fail@plt+0x1cec4>
   2f558:	add	r3, r3, #1
   2f55c:	b	2f500 <__assert_fail@plt+0x1ce14>
   2f560:	ldr	r3, [r5, #12]
   2f564:	mov	r0, r6
   2f568:	ldr	r1, [r3, r7, lsl #2]
   2f56c:	bl	11ff0 <iswctype@plt>
   2f570:	cmp	r0, #0
   2f574:	bne	2f5b0 <__assert_fail@plt+0x1cec4>
   2f578:	add	r7, r7, #1
   2f57c:	b	2f50c <__assert_fail@plt+0x1ce20>
   2f580:	mov	r6, r2
   2f584:	b	2f518 <__assert_fail@plt+0x1ce2c>
   2f588:	ldr	r1, [r5, #4]
   2f58c:	ldr	r1, [r1, r3, lsl #2]
   2f590:	cmp	r6, r1
   2f594:	bcc	2f5a8 <__assert_fail@plt+0x1cebc>
   2f598:	ldr	r1, [r5, #8]
   2f59c:	ldr	r1, [r1, r3, lsl #2]
   2f5a0:	cmp	r6, r1
   2f5a4:	bls	2f5b0 <__assert_fail@plt+0x1cec4>
   2f5a8:	add	r3, r3, #1
   2f5ac:	b	2f520 <__assert_fail@plt+0x1ce34>
   2f5b0:	mov	r3, r4
   2f5b4:	b	2f52c <__assert_fail@plt+0x1ce40>
   2f5b8:	ldr	r3, [r0, #4]
   2f5bc:	ldr	r2, [r1, #4]
   2f5c0:	cmp	r3, r2
   2f5c4:	bne	2f5f0 <__assert_fail@plt+0x1cf04>
   2f5c8:	subs	r3, r3, #1
   2f5cc:	bpl	2f5d8 <__assert_fail@plt+0x1ceec>
   2f5d0:	mov	r0, #1
   2f5d4:	bx	lr
   2f5d8:	ldr	ip, [r0, #8]
   2f5dc:	ldr	r2, [r1, #8]
   2f5e0:	ldr	ip, [ip, r3, lsl #2]
   2f5e4:	ldr	r2, [r2, r3, lsl #2]
   2f5e8:	cmp	ip, r2
   2f5ec:	b	2f5c4 <__assert_fail@plt+0x1ced8>
   2f5f0:	mov	r0, #0
   2f5f4:	bx	lr
   2f5f8:	cmp	r1, #0
   2f5fc:	bxlt	lr
   2f600:	ldr	r3, [r0, #4]
   2f604:	cmp	r1, r3
   2f608:	bxge	lr
   2f60c:	sub	r3, r3, #1
   2f610:	str	r3, [r0, #4]
   2f614:	ldr	ip, [r0, #4]
   2f618:	lsl	r3, r1, #2
   2f61c:	cmp	r1, ip
   2f620:	add	r2, r3, #4
   2f624:	blt	2f62c <__assert_fail@plt+0x1cf40>
   2f628:	bx	lr
   2f62c:	push	{lr}		; (str lr, [sp, #-4]!)
   2f630:	add	r1, r1, #1
   2f634:	ldr	ip, [r0, #8]
   2f638:	ldr	lr, [ip, r2]
   2f63c:	str	lr, [ip, r3]
   2f640:	ldr	ip, [r0, #4]
   2f644:	mov	r3, r2
   2f648:	cmp	r1, ip
   2f64c:	add	r2, r2, #4
   2f650:	blt	2f630 <__assert_fail@plt+0x1cf44>
   2f654:	pop	{pc}		; (ldr pc, [sp], #4)
   2f658:	ldrb	r3, [r1, #24]
   2f65c:	cmp	r3, #4
   2f660:	bne	2f694 <__assert_fail@plt+0x1cfa8>
   2f664:	ldr	r3, [r0, #132]	; 0x84
   2f668:	cmp	r3, #0
   2f66c:	beq	2f68c <__assert_fail@plt+0x1cfa0>
   2f670:	ldr	r2, [r1, #20]
   2f674:	ldr	r2, [r3, r2, lsl #2]
   2f678:	str	r2, [r1, #20]
   2f67c:	mov	r1, #1
   2f680:	ldr	r3, [r0, #80]	; 0x50
   2f684:	orr	r3, r3, r1, lsl r2
   2f688:	str	r3, [r0, #80]	; 0x50
   2f68c:	mov	r0, #0
   2f690:	bx	lr
   2f694:	cmp	r3, #17
   2f698:	bne	2f68c <__assert_fail@plt+0x1cfa0>
   2f69c:	ldr	r3, [r1, #4]
   2f6a0:	cmp	r3, #0
   2f6a4:	beq	2f68c <__assert_fail@plt+0x1cfa0>
   2f6a8:	ldrb	r2, [r3, #24]
   2f6ac:	cmp	r2, #17
   2f6b0:	bne	2f68c <__assert_fail@plt+0x1cfa0>
   2f6b4:	ldr	r2, [r3, #20]
   2f6b8:	ldr	r3, [r3, #4]
   2f6bc:	cmp	r3, #0
   2f6c0:	str	r3, [r1, #4]
   2f6c4:	strne	r1, [r3]
   2f6c8:	ldr	r3, [r0, #132]	; 0x84
   2f6cc:	ldr	r1, [r1, #20]
   2f6d0:	cmp	r2, #31
   2f6d4:	ldr	r1, [r3, r1, lsl #2]
   2f6d8:	str	r1, [r3, r2, lsl #2]
   2f6dc:	bgt	2f68c <__assert_fail@plt+0x1cfa0>
   2f6e0:	ldr	r3, [r0, #80]	; 0x50
   2f6e4:	mov	r1, #1
   2f6e8:	bic	r3, r3, r1, lsl r2
   2f6ec:	b	2f688 <__assert_fail@plt+0x1cf9c>
   2f6f0:	ldrb	r3, [r1, #24]
   2f6f4:	ldr	r2, [r1, #4]
   2f6f8:	cmp	r3, #11
   2f6fc:	streq	r1, [r2, #16]
   2f700:	beq	2f724 <__assert_fail@plt+0x1d038>
   2f704:	cmp	r3, #16
   2f708:	ldr	r3, [r1, #8]
   2f70c:	beq	2f72c <__assert_fail@plt+0x1d040>
   2f710:	cmp	r2, #0
   2f714:	ldrne	r0, [r1, #16]
   2f718:	strne	r0, [r2, #16]
   2f71c:	cmp	r3, #0
   2f720:	bne	2f734 <__assert_fail@plt+0x1d048>
   2f724:	mov	r0, #0
   2f728:	bx	lr
   2f72c:	ldr	r0, [r3, #12]
   2f730:	str	r0, [r2, #16]
   2f734:	ldr	r2, [r1, #16]
   2f738:	str	r2, [r3, #16]
   2f73c:	b	2f724 <__assert_fail@plt+0x1d038>
   2f740:	ldr	r3, [r1, #4]
   2f744:	str	r3, [r0, #4]
   2f748:	ldr	r2, [r1, #4]
   2f74c:	cmp	r2, #0
   2f750:	ble	2f7a0 <__assert_fail@plt+0x1d0b4>
   2f754:	push	{r4, r5, r6, lr}
   2f758:	mov	r4, r0
   2f75c:	str	r3, [r0]
   2f760:	lsl	r0, r3, #2
   2f764:	mov	r5, r1
   2f768:	bl	2bf10 <__assert_fail@plt+0x19824>
   2f76c:	cmp	r0, #0
   2f770:	str	r0, [r4, #8]
   2f774:	bne	2f788 <__assert_fail@plt+0x1d09c>
   2f778:	str	r0, [r4, #4]
   2f77c:	str	r0, [r4]
   2f780:	mov	r0, #12
   2f784:	pop	{r4, r5, r6, pc}
   2f788:	ldr	r2, [r5, #4]
   2f78c:	ldr	r1, [r5, #8]
   2f790:	lsl	r2, r2, #2
   2f794:	bl	120f8 <memcpy@plt>
   2f798:	mov	r0, #0
   2f79c:	pop	{r4, r5, r6, pc}
   2f7a0:	mov	r3, #0
   2f7a4:	str	r3, [r0]
   2f7a8:	str	r3, [r0, #4]
   2f7ac:	str	r3, [r0, #8]
   2f7b0:	mov	r0, r3
   2f7b4:	bx	lr
   2f7b8:	cmp	r1, #0
   2f7bc:	beq	2f854 <__assert_fail@plt+0x1d168>
   2f7c0:	ldr	r3, [r1, #4]
   2f7c4:	cmp	r2, #0
   2f7c8:	cmpne	r3, #0
   2f7cc:	ble	2f848 <__assert_fail@plt+0x1d15c>
   2f7d0:	ldr	ip, [r2, #4]
   2f7d4:	cmp	ip, #0
   2f7d8:	ble	2f850 <__assert_fail@plt+0x1d164>
   2f7dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f7e0:	mov	r6, r0
   2f7e4:	add	r0, r3, ip
   2f7e8:	str	r0, [r6]
   2f7ec:	lsl	r0, r0, #2
   2f7f0:	mov	r5, r1
   2f7f4:	mov	r7, r2
   2f7f8:	bl	2bf10 <__assert_fail@plt+0x19824>
   2f7fc:	cmp	r0, #0
   2f800:	str	r0, [r6, #8]
   2f804:	beq	2f8b8 <__assert_fail@plt+0x1d1cc>
   2f808:	mov	r3, #0
   2f80c:	ldr	r2, [r5, #4]
   2f810:	mov	r8, r0
   2f814:	mov	r9, #1
   2f818:	mov	lr, r3
   2f81c:	cmp	lr, r2
   2f820:	sub	r4, r9, #1
   2f824:	ldr	ip, [r7, #4]
   2f828:	bge	2f8c0 <__assert_fail@plt+0x1d1d4>
   2f82c:	cmp	r3, ip
   2f830:	ldr	r1, [r5, #8]
   2f834:	blt	2f884 <__assert_fail@plt+0x1d198>
   2f838:	sub	r5, r2, lr
   2f83c:	add	r1, r1, lr, lsl #2
   2f840:	lsl	r2, r5, #2
   2f844:	b	2f8d8 <__assert_fail@plt+0x1d1ec>
   2f848:	cmp	r3, #0
   2f84c:	ble	2f854 <__assert_fail@plt+0x1d168>
   2f850:	b	2f740 <__assert_fail@plt+0x1d054>
   2f854:	cmp	r2, #0
   2f858:	beq	2f86c <__assert_fail@plt+0x1d180>
   2f85c:	ldr	r3, [r2, #4]
   2f860:	cmp	r3, #0
   2f864:	movgt	r1, r2
   2f868:	bgt	2f850 <__assert_fail@plt+0x1d164>
   2f86c:	mov	r3, #0
   2f870:	str	r3, [r0]
   2f874:	str	r3, [r0, #4]
   2f878:	str	r3, [r0, #8]
   2f87c:	mov	r0, r3
   2f880:	bx	lr
   2f884:	ldr	ip, [r7, #8]
   2f888:	ldr	r1, [r1, lr, lsl #2]
   2f88c:	ldr	ip, [ip, r3, lsl #2]
   2f890:	cmp	r1, ip
   2f894:	addgt	r3, r3, #1
   2f898:	strgt	ip, [r8]
   2f89c:	bgt	2f8ac <__assert_fail@plt+0x1d1c0>
   2f8a0:	addeq	r3, r3, #1
   2f8a4:	add	lr, lr, #1
   2f8a8:	str	r1, [r8]
   2f8ac:	add	r9, r9, #1
   2f8b0:	add	r8, r8, #4
   2f8b4:	b	2f81c <__assert_fail@plt+0x1d130>
   2f8b8:	mov	r0, #12
   2f8bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f8c0:	cmp	r3, ip
   2f8c4:	bge	2f8e4 <__assert_fail@plt+0x1d1f8>
   2f8c8:	sub	r5, ip, r3
   2f8cc:	ldr	r1, [r7, #8]
   2f8d0:	lsl	r2, r5, #2
   2f8d4:	add	r1, r1, r3, lsl #2
   2f8d8:	add	r0, r0, r4, lsl #2
   2f8dc:	bl	120f8 <memcpy@plt>
   2f8e0:	add	r4, r4, r5
   2f8e4:	str	r4, [r6, #4]
   2f8e8:	mov	r0, #0
   2f8ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f8f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f8f4:	sub	sp, sp, #20
   2f8f8:	ldr	r4, [r2, #4]
   2f8fc:	cmp	r4, #0
   2f900:	streq	r4, [r0]
   2f904:	addne	r9, r4, r3
   2f908:	movne	ip, #0
   2f90c:	bne	2f92c <__assert_fail@plt+0x1d240>
   2f910:	mov	r0, r4
   2f914:	add	sp, sp, #20
   2f918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f91c:	ldr	lr, [r2, #8]
   2f920:	ldr	lr, [lr, ip, lsl #2]
   2f924:	add	ip, ip, #1
   2f928:	add	r9, r9, lr
   2f92c:	cmp	r4, ip
   2f930:	bgt	2f91c <__assert_fail@plt+0x1d230>
   2f934:	mov	r7, r3
   2f938:	ldr	r3, [r1, #68]	; 0x44
   2f93c:	mov	r5, r2
   2f940:	and	r2, r9, r3
   2f944:	mov	r3, #12
   2f948:	mov	r8, r1
   2f94c:	mul	r3, r3, r2
   2f950:	ldr	r2, [r1, #32]
   2f954:	mov	r6, #0
   2f958:	add	sl, r2, r3
   2f95c:	ldr	fp, [r2, r3]
   2f960:	str	r0, [sp, #8]
   2f964:	cmp	r6, fp
   2f968:	blt	2f9b4 <__assert_fail@plt+0x1d2c8>
   2f96c:	mov	r1, #1
   2f970:	mov	r0, #56	; 0x38
   2f974:	bl	29b08 <__assert_fail@plt+0x1741c>
   2f978:	subs	r4, r0, #0
   2f97c:	beq	2f9a0 <__assert_fail@plt+0x1d2b4>
   2f980:	add	sl, r4, #4
   2f984:	mov	r1, r5
   2f988:	mov	r0, sl
   2f98c:	bl	2f740 <__assert_fail@plt+0x1d054>
   2f990:	subs	r6, r0, #0
   2f994:	beq	2f9fc <__assert_fail@plt+0x1d310>
   2f998:	mov	r0, r4
   2f99c:	bl	2a01c <__assert_fail@plt+0x17930>
   2f9a0:	ldr	r2, [sp, #8]
   2f9a4:	mov	r3, #12
   2f9a8:	mov	r4, #0
   2f9ac:	str	r3, [r2]
   2f9b0:	b	2f910 <__assert_fail@plt+0x1d224>
   2f9b4:	ldr	r3, [sl, #8]
   2f9b8:	ldr	r4, [r3, r6, lsl #2]
   2f9bc:	ldr	r3, [r4]
   2f9c0:	cmp	r3, r9
   2f9c4:	bne	2f9f4 <__assert_fail@plt+0x1d308>
   2f9c8:	ldrb	r3, [r4, #52]	; 0x34
   2f9cc:	and	r3, r3, #15
   2f9d0:	cmp	r7, r3
   2f9d4:	bne	2f9f4 <__assert_fail@plt+0x1d308>
   2f9d8:	ldr	r0, [r4, #40]	; 0x28
   2f9dc:	cmp	r0, #0
   2f9e0:	beq	2f9f4 <__assert_fail@plt+0x1d308>
   2f9e4:	mov	r1, r5
   2f9e8:	bl	2f5b8 <__assert_fail@plt+0x1cecc>
   2f9ec:	cmp	r0, #0
   2f9f0:	bne	2f910 <__assert_fail@plt+0x1d224>
   2f9f4:	add	r6, r6, #1
   2f9f8:	b	2f964 <__assert_fail@plt+0x1d278>
   2f9fc:	ldrb	r2, [r4, #52]	; 0x34
   2fa00:	and	r3, r7, #15
   2fa04:	mov	fp, r6
   2fa08:	bic	r2, r2, #15
   2fa0c:	orr	r3, r3, r2
   2fa10:	strb	r3, [r4, #52]	; 0x34
   2fa14:	and	r3, r7, #4
   2fa18:	str	r3, [sp]
   2fa1c:	and	r3, r7, #2
   2fa20:	str	sl, [r4, #40]	; 0x28
   2fa24:	str	r3, [sp, #4]
   2fa28:	ldr	r3, [r5, #4]
   2fa2c:	cmp	fp, r3
   2fa30:	blt	2fa50 <__assert_fail@plt+0x1d364>
   2fa34:	mov	r2, r9
   2fa38:	mov	r1, r4
   2fa3c:	mov	r0, r8
   2fa40:	bl	2d57c <__assert_fail@plt+0x1ae90>
   2fa44:	cmp	r0, #0
   2fa48:	beq	2f910 <__assert_fail@plt+0x1d224>
   2fa4c:	b	2fafc <__assert_fail@plt+0x1d410>
   2fa50:	ldr	r3, [r5, #8]
   2fa54:	ldr	r1, [r8]
   2fa58:	ldr	r2, [pc, #304]	; 2fb90 <__assert_fail@plt+0x1d4a4>
   2fa5c:	ldr	r3, [r3, fp, lsl #2]
   2fa60:	add	r1, r1, r3, lsl #3
   2fa64:	ldr	r3, [r1, #4]
   2fa68:	ldrb	ip, [r1, #4]
   2fa6c:	ands	r3, r2, r3, lsr #8
   2fa70:	moveq	r0, #1
   2fa74:	movne	r0, #0
   2fa78:	cmp	ip, #1
   2fa7c:	movne	r0, #0
   2fa80:	andeq	r0, r0, #1
   2fa84:	cmp	r0, #0
   2fa88:	bne	2fb88 <__assert_fail@plt+0x1d49c>
   2fa8c:	ldrb	r1, [r1, #6]
   2fa90:	ldrb	r0, [r4, #52]	; 0x34
   2fa94:	cmp	ip, #2
   2fa98:	lsr	r1, r1, #4
   2fa9c:	orr	r1, r1, r0, lsr #5
   2faa0:	and	r1, r1, #1
   2faa4:	bic	r0, r0, #32
   2faa8:	orr	r1, r0, r1, lsl #5
   2faac:	strb	r1, [r4, #52]	; 0x34
   2fab0:	uxtbeq	r1, r1
   2fab4:	orreq	r1, r1, #16
   2fab8:	beq	2facc <__assert_fail@plt+0x1d3e0>
   2fabc:	cmp	ip, #4
   2fac0:	bne	2fad0 <__assert_fail@plt+0x1d3e4>
   2fac4:	ldrb	r1, [r4, #52]	; 0x34
   2fac8:	orr	r1, r1, #64	; 0x40
   2facc:	strb	r1, [r4, #52]	; 0x34
   2fad0:	cmp	r3, #0
   2fad4:	beq	2fb88 <__assert_fail@plt+0x1d49c>
   2fad8:	ldr	r1, [r4, #40]	; 0x28
   2fadc:	cmp	sl, r1
   2fae0:	bne	2fb30 <__assert_fail@plt+0x1d444>
   2fae4:	mov	r0, #12
   2fae8:	str	r3, [sp, #12]
   2faec:	bl	2bf10 <__assert_fail@plt+0x19824>
   2faf0:	ldr	r3, [sp, #12]
   2faf4:	subs	r1, r0, #0
   2faf8:	bne	2fb08 <__assert_fail@plt+0x1d41c>
   2fafc:	mov	r0, r4
   2fb00:	bl	2e054 <__assert_fail@plt+0x1b968>
   2fb04:	b	2f9a0 <__assert_fail@plt+0x1d2b4>
   2fb08:	str	r1, [r4, #40]	; 0x28
   2fb0c:	mov	r1, r5
   2fb10:	str	r3, [sp, #12]
   2fb14:	bl	2f740 <__assert_fail@plt+0x1d054>
   2fb18:	ldr	r3, [sp, #12]
   2fb1c:	subs	r6, r0, #0
   2fb20:	bne	2fafc <__assert_fail@plt+0x1d410>
   2fb24:	ldrb	r1, [r4, #52]	; 0x34
   2fb28:	orr	r1, r1, #128	; 0x80
   2fb2c:	strb	r1, [r4, #52]	; 0x34
   2fb30:	tst	r3, #1
   2fb34:	beq	2fb40 <__assert_fail@plt+0x1d454>
   2fb38:	tst	r7, #1
   2fb3c:	beq	2fb78 <__assert_fail@plt+0x1d48c>
   2fb40:	tst	r3, #2
   2fb44:	beq	2fb50 <__assert_fail@plt+0x1d464>
   2fb48:	tst	r7, #1
   2fb4c:	bne	2fb78 <__assert_fail@plt+0x1d48c>
   2fb50:	tst	r3, #16
   2fb54:	beq	2fb64 <__assert_fail@plt+0x1d478>
   2fb58:	ldr	r2, [sp, #4]
   2fb5c:	cmp	r2, #0
   2fb60:	beq	2fb78 <__assert_fail@plt+0x1d48c>
   2fb64:	tst	r3, #64	; 0x40
   2fb68:	beq	2fb88 <__assert_fail@plt+0x1d49c>
   2fb6c:	ldr	r3, [sp]
   2fb70:	cmp	r3, #0
   2fb74:	bne	2fb88 <__assert_fail@plt+0x1d49c>
   2fb78:	sub	r1, fp, r6
   2fb7c:	mov	r0, sl
   2fb80:	bl	2f5f8 <__assert_fail@plt+0x1cf0c>
   2fb84:	add	r6, r6, #1
   2fb88:	add	fp, fp, #1
   2fb8c:	b	2fa28 <__assert_fail@plt+0x1d33c>
   2fb90:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2fb94:	ldr	r3, [r1, #4]
   2fb98:	cmp	r3, #0
   2fb9c:	beq	2fcfc <__assert_fail@plt+0x1d610>
   2fba0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2fba4:	ldr	r5, [r2, #4]
   2fba8:	cmp	r5, #0
   2fbac:	beq	2fce0 <__assert_fail@plt+0x1d5f4>
   2fbb0:	mov	r6, r2
   2fbb4:	ldr	r2, [r0, #4]
   2fbb8:	add	r3, r3, r5
   2fbbc:	ldr	r5, [r0]
   2fbc0:	add	r2, r3, r2
   2fbc4:	cmp	r2, r5
   2fbc8:	mov	r7, r1
   2fbcc:	mov	r4, r0
   2fbd0:	ble	2fbf4 <__assert_fail@plt+0x1d508>
   2fbd4:	add	r5, r3, r5
   2fbd8:	ldr	r0, [r0, #8]
   2fbdc:	lsl	r1, r5, #2
   2fbe0:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   2fbe4:	cmp	r0, #0
   2fbe8:	beq	2fd04 <__assert_fail@plt+0x1d618>
   2fbec:	str	r0, [r4, #8]
   2fbf0:	str	r5, [r4]
   2fbf4:	ldr	r2, [r4, #4]
   2fbf8:	ldr	r3, [r7, #4]
   2fbfc:	ldr	r0, [r6, #4]
   2fc00:	add	ip, r2, r3
   2fc04:	ldr	r8, [r7, #8]
   2fc08:	ldr	r9, [r6, #8]
   2fc0c:	add	ip, ip, r0
   2fc10:	sub	r3, r3, #1
   2fc14:	sub	r0, r0, #1
   2fc18:	sub	r2, r2, #1
   2fc1c:	ldr	lr, [r9, r0, lsl #2]
   2fc20:	ldr	r1, [r8, r3, lsl #2]
   2fc24:	cmp	r1, lr
   2fc28:	lsleq	lr, r2, #2
   2fc2c:	beq	2fc40 <__assert_fail@plt+0x1d554>
   2fc30:	blt	2fc70 <__assert_fail@plt+0x1d584>
   2fc34:	subs	r3, r3, #1
   2fc38:	b	2fc74 <__assert_fail@plt+0x1d588>
   2fc3c:	sub	r2, r2, #1
   2fc40:	cmp	r2, #0
   2fc44:	ldr	r5, [r4, #8]
   2fc48:	blt	2fc60 <__assert_fail@plt+0x1d574>
   2fc4c:	ldr	sl, [r5, lr]
   2fc50:	sub	lr, lr, #4
   2fc54:	cmp	r1, sl
   2fc58:	blt	2fc3c <__assert_fail@plt+0x1d550>
   2fc5c:	beq	2fc68 <__assert_fail@plt+0x1d57c>
   2fc60:	sub	ip, ip, #1
   2fc64:	str	r1, [r5, ip, lsl #2]
   2fc68:	subs	r3, r3, #1
   2fc6c:	bmi	2fc78 <__assert_fail@plt+0x1d58c>
   2fc70:	subs	r0, r0, #1
   2fc74:	bpl	2fc1c <__assert_fail@plt+0x1d530>
   2fc78:	ldr	r1, [r4, #4]
   2fc7c:	ldr	r2, [r7, #4]
   2fc80:	ldr	r0, [r6, #4]
   2fc84:	add	r2, r1, r2
   2fc88:	add	r2, r2, r0
   2fc8c:	sub	r3, r1, #1
   2fc90:	sub	lr, r2, #1
   2fc94:	sub	r2, r2, ip
   2fc98:	add	r1, r1, r2
   2fc9c:	cmp	r3, #0
   2fca0:	cmpge	r2, #0
   2fca4:	str	r1, [r4, #4]
   2fca8:	ldr	r0, [r4, #8]
   2fcac:	ble	2fcd4 <__assert_fail@plt+0x1d5e8>
   2fcb0:	ldr	r5, [r0, lr, lsl #2]
   2fcb4:	ldr	r4, [r0, r3, lsl #2]
   2fcb8:	cmp	r5, r4
   2fcbc:	ble	2fce8 <__assert_fail@plt+0x1d5fc>
   2fcc0:	add	r1, r3, r2
   2fcc4:	subs	r2, r2, #1
   2fcc8:	sub	lr, lr, #1
   2fccc:	str	r5, [r0, r1, lsl #2]
   2fcd0:	bne	2fcb0 <__assert_fail@plt+0x1d5c4>
   2fcd4:	lsl	r2, r2, #2
   2fcd8:	add	r1, r0, ip, lsl #2
   2fcdc:	bl	120f8 <memcpy@plt>
   2fce0:	mov	r0, #0
   2fce4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2fce8:	add	r1, r3, r2
   2fcec:	subs	r3, r3, #1
   2fcf0:	str	r4, [r0, r1, lsl #2]
   2fcf4:	bcs	2fcb0 <__assert_fail@plt+0x1d5c4>
   2fcf8:	b	2fcd4 <__assert_fail@plt+0x1d5e8>
   2fcfc:	mov	r0, r3
   2fd00:	bx	lr
   2fd04:	mov	r0, #12
   2fd08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2fd0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fd10:	sub	sp, sp, #36	; 0x24
   2fd14:	ldr	r5, [r0, #28]
   2fd18:	str	r3, [sp, #4]
   2fd1c:	mov	r3, #12
   2fd20:	mov	r8, r0
   2fd24:	mla	r5, r3, r1, r5
   2fd28:	mov	sl, r1
   2fd2c:	mov	r7, r2
   2fd30:	mvn	fp, #0
   2fd34:	mov	r4, #0
   2fd38:	str	r4, [sp, #20]
   2fd3c:	str	r4, [sp, #24]
   2fd40:	str	r4, [sp, #28]
   2fd44:	str	r3, [sp, #8]
   2fd48:	ldr	r3, [r5, #4]
   2fd4c:	cmp	r4, r3
   2fd50:	blt	2fd74 <__assert_fail@plt+0x1d688>
   2fd54:	mov	r4, #0
   2fd58:	ldr	r3, [r5, #4]
   2fd5c:	cmp	r4, r3
   2fd60:	blt	2fe58 <__assert_fail@plt+0x1d76c>
   2fd64:	ldr	r0, [sp, #28]
   2fd68:	bl	2a01c <__assert_fail@plt+0x17930>
   2fd6c:	mov	r6, #0
   2fd70:	b	2fe44 <__assert_fail@plt+0x1d758>
   2fd74:	ldr	r3, [r5, #8]
   2fd78:	ldr	r6, [r3, r4, lsl #2]
   2fd7c:	cmp	sl, r6
   2fd80:	beq	2fe50 <__assert_fail@plt+0x1d764>
   2fd84:	ldr	r3, [r8]
   2fd88:	add	r3, r3, r6, lsl #3
   2fd8c:	ldrb	r3, [r3, #4]
   2fd90:	tst	r3, #8
   2fd94:	beq	2fe50 <__assert_fail@plt+0x1d764>
   2fd98:	ldr	r3, [sp, #8]
   2fd9c:	mov	r0, r5
   2fda0:	mul	r6, r3, r6
   2fda4:	ldr	r3, [r8, #20]
   2fda8:	add	r3, r3, r6
   2fdac:	ldr	r1, [r3, #8]
   2fdb0:	ldr	r3, [r3, #4]
   2fdb4:	ldr	r2, [r1]
   2fdb8:	cmp	r3, #1
   2fdbc:	movle	r9, fp
   2fdc0:	ldrgt	r9, [r1, #4]
   2fdc4:	mov	r1, r2
   2fdc8:	str	r2, [sp, #12]
   2fdcc:	bl	2caf0 <__assert_fail@plt+0x1a404>
   2fdd0:	cmp	r0, #0
   2fdd4:	bne	2fdf0 <__assert_fail@plt+0x1d704>
   2fdd8:	ldr	r2, [sp, #12]
   2fddc:	mov	r0, r7
   2fde0:	mov	r1, r2
   2fde4:	bl	2caf0 <__assert_fail@plt+0x1a404>
   2fde8:	cmp	r0, #0
   2fdec:	bne	2fe20 <__assert_fail@plt+0x1d734>
   2fdf0:	cmp	r9, #0
   2fdf4:	ble	2fe50 <__assert_fail@plt+0x1d764>
   2fdf8:	mov	r1, r9
   2fdfc:	mov	r0, r5
   2fe00:	bl	2caf0 <__assert_fail@plt+0x1a404>
   2fe04:	cmp	r0, #0
   2fe08:	bne	2fe50 <__assert_fail@plt+0x1d764>
   2fe0c:	mov	r1, r9
   2fe10:	mov	r0, r7
   2fe14:	bl	2caf0 <__assert_fail@plt+0x1a404>
   2fe18:	cmp	r0, #0
   2fe1c:	beq	2fe50 <__assert_fail@plt+0x1d764>
   2fe20:	ldr	r2, [r8, #28]
   2fe24:	ldr	r1, [sp, #4]
   2fe28:	add	r2, r2, r6
   2fe2c:	add	r0, sp, #20
   2fe30:	bl	2fb94 <__assert_fail@plt+0x1d4a8>
   2fe34:	subs	r6, r0, #0
   2fe38:	beq	2fe50 <__assert_fail@plt+0x1d764>
   2fe3c:	ldr	r0, [sp, #28]
   2fe40:	bl	2a01c <__assert_fail@plt+0x17930>
   2fe44:	mov	r0, r6
   2fe48:	add	sp, sp, #36	; 0x24
   2fe4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fe50:	add	r4, r4, #1
   2fe54:	b	2fd48 <__assert_fail@plt+0x1d65c>
   2fe58:	ldr	r3, [r5, #8]
   2fe5c:	add	r0, sp, #20
   2fe60:	ldr	r6, [r3, r4, lsl #2]
   2fe64:	mov	r1, r6
   2fe68:	bl	2caf0 <__assert_fail@plt+0x1a404>
   2fe6c:	cmp	r0, #0
   2fe70:	bne	2fe8c <__assert_fail@plt+0x1d7a0>
   2fe74:	mov	r1, r6
   2fe78:	mov	r0, r7
   2fe7c:	bl	2caf0 <__assert_fail@plt+0x1a404>
   2fe80:	sub	r1, r0, #1
   2fe84:	mov	r0, r7
   2fe88:	bl	2f5f8 <__assert_fail@plt+0x1cf0c>
   2fe8c:	add	r4, r4, #1
   2fe90:	b	2fd58 <__assert_fail@plt+0x1d66c>
   2fe94:	ldrb	r3, [r1, #24]
   2fe98:	cmp	r3, #16
   2fe9c:	bne	2febc <__assert_fail@plt+0x1d7d0>
   2fea0:	ldr	r3, [r1, #4]
   2fea4:	mov	r0, #0
   2fea8:	ldr	r2, [r3, #12]
   2feac:	ldr	r3, [r3, #28]
   2feb0:	str	r2, [r1, #12]
   2feb4:	str	r3, [r1, #28]
   2feb8:	bx	lr
   2febc:	push	{r4, r5, r6, lr}
   2fec0:	add	r3, r1, #20
   2fec4:	mov	r4, r1
   2fec8:	mov	r5, r0
   2fecc:	str	r1, [r4, #12]
   2fed0:	ldm	r3, {r1, r2}
   2fed4:	bl	2de1c <__assert_fail@plt+0x1b730>
   2fed8:	cmn	r0, #1
   2fedc:	str	r0, [r4, #28]
   2fee0:	beq	2ff20 <__assert_fail@plt+0x1d834>
   2fee4:	ldrb	r3, [r4, #24]
   2fee8:	cmp	r3, #12
   2feec:	bne	2ff18 <__assert_fail@plt+0x1d82c>
   2fef0:	ldr	r3, [r5]
   2fef4:	ldr	r2, [r4, #20]
   2fef8:	add	r0, r3, r0, lsl #3
   2fefc:	lsl	r2, r2, #22
   2ff00:	ldr	r3, [r0, #4]
   2ff04:	lsr	r2, r2, #22
   2ff08:	bic	r3, r3, #261120	; 0x3fc00
   2ff0c:	bic	r3, r3, #768	; 0x300
   2ff10:	orr	r3, r3, r2, lsl #8
   2ff14:	str	r3, [r0, #4]
   2ff18:	mov	r0, #0
   2ff1c:	pop	{r4, r5, r6, pc}
   2ff20:	mov	r0, #12
   2ff24:	pop	{r4, r5, r6, pc}
   2ff28:	ldr	r3, [r0]
   2ff2c:	push	{r4, r5, r6, lr}
   2ff30:	cmp	r3, #0
   2ff34:	bne	2ff48 <__assert_fail@plt+0x1d85c>
   2ff38:	bl	2d50c <__assert_fail@plt+0x1ae20>
   2ff3c:	clz	r0, r0
   2ff40:	lsr	r0, r0, #5
   2ff44:	pop	{r4, r5, r6, pc}
   2ff48:	ldr	r2, [r0, #4]
   2ff4c:	mov	r4, r0
   2ff50:	cmp	r2, #0
   2ff54:	mov	r5, r1
   2ff58:	ldreq	r3, [r0, #8]
   2ff5c:	streq	r1, [r3]
   2ff60:	beq	2ffe4 <__assert_fail@plt+0x1d8f8>
   2ff64:	cmp	r3, r2
   2ff68:	bne	2ff8c <__assert_fail@plt+0x1d8a0>
   2ff6c:	lsl	r2, r3, #1
   2ff70:	str	r2, [r0]
   2ff74:	lsl	r1, r3, #3
   2ff78:	ldr	r0, [r0, #8]
   2ff7c:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   2ff80:	cmp	r0, #0
   2ff84:	popeq	{r4, r5, r6, pc}
   2ff88:	str	r0, [r4, #8]
   2ff8c:	ldr	r2, [r4, #8]
   2ff90:	ldr	r3, [r2]
   2ff94:	cmp	r5, r3
   2ff98:	ldr	r3, [r4, #4]
   2ff9c:	movlt	r1, r3
   2ffa0:	addlt	r0, r2, r3, lsl #2
   2ffa4:	blt	2ffd0 <__assert_fail@plt+0x1d8e4>
   2ffa8:	add	r1, r2, r3, lsl #2
   2ffac:	ldr	r0, [r1, #-4]
   2ffb0:	cmp	r5, r0
   2ffb4:	bge	2ffe0 <__assert_fail@plt+0x1d8f4>
   2ffb8:	str	r0, [r1], #-4
   2ffbc:	sub	r3, r3, #1
   2ffc0:	b	2ffac <__assert_fail@plt+0x1d8c0>
   2ffc4:	ldr	ip, [r0, #-4]
   2ffc8:	sub	r1, r1, #1
   2ffcc:	str	ip, [r0], #-4
   2ffd0:	cmp	r1, #0
   2ffd4:	bgt	2ffc4 <__assert_fail@plt+0x1d8d8>
   2ffd8:	cmp	r3, #0
   2ffdc:	subge	r3, r3, r3
   2ffe0:	str	r5, [r2, r3, lsl #2]
   2ffe4:	ldr	r3, [r4, #4]
   2ffe8:	mov	r0, #1
   2ffec:	add	r3, r3, #1
   2fff0:	str	r3, [r4, #4]
   2fff4:	pop	{r4, r5, r6, pc}
   2fff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fffc:	sub	sp, sp, #20
   30000:	mov	r4, r0
   30004:	ldr	r6, [sp, #56]	; 0x38
   30008:	mov	r7, r1
   3000c:	mov	r5, r2
   30010:	mov	fp, r3
   30014:	mov	sl, #12
   30018:	ldr	ip, [r4]
   3001c:	ldr	r2, [r4, #20]
   30020:	add	r1, ip, r7, lsl #3
   30024:	ldrb	r3, [r1, #4]
   30028:	cmp	r3, #4
   3002c:	bne	300a4 <__assert_fail@plt+0x1d9b8>
   30030:	ldr	r3, [r4, #12]
   30034:	mul	r9, sl, r5
   30038:	ldr	r8, [r3, r7, lsl #2]
   3003c:	add	r2, r2, r9
   30040:	mov	r1, #0
   30044:	str	r1, [r2, #4]
   30048:	mov	r0, r4
   3004c:	mov	r2, r6
   30050:	mov	r1, r8
   30054:	str	r5, [sp, #12]
   30058:	bl	2dfc4 <__assert_fail@plt+0x1b8d8>
   3005c:	ldr	r3, [sp, #12]
   30060:	cmn	r0, #1
   30064:	mov	r5, r0
   30068:	bne	30078 <__assert_fail@plt+0x1d98c>
   3006c:	mov	r0, #12
   30070:	add	sp, sp, #20
   30074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30078:	ldr	r2, [r4, #12]
   3007c:	ldr	r1, [r2, r7, lsl #2]
   30080:	str	r1, [r2, r3, lsl #2]
   30084:	ldr	r0, [r4, #20]
   30088:	mov	r1, r5
   3008c:	add	r0, r0, r9
   30090:	bl	2ff28 <__assert_fail@plt+0x1d83c>
   30094:	cmp	r0, #0
   30098:	beq	3006c <__assert_fail@plt+0x1d980>
   3009c:	mov	r7, r8
   300a0:	b	30018 <__assert_fail@plt+0x1d92c>
   300a4:	mul	r8, sl, r7
   300a8:	add	r3, r2, r8
   300ac:	ldr	r0, [r3, #4]
   300b0:	cmp	r0, #0
   300b4:	ldreq	r3, [r4, #12]
   300b8:	ldreq	r2, [r3, r7, lsl #2]
   300bc:	streq	r2, [r3, r5, lsl #2]
   300c0:	beq	30070 <__assert_fail@plt+0x1d984>
   300c4:	cmp	r0, #1
   300c8:	ldr	r3, [r3, #8]
   300cc:	mul	r9, sl, r5
   300d0:	bne	30150 <__assert_fail@plt+0x1da64>
   300d4:	cmp	r7, r5
   300d8:	ldr	r8, [r3]
   300dc:	add	r0, r2, r9
   300e0:	mov	r3, #0
   300e4:	sub	r2, r7, fp
   300e8:	clz	r2, r2
   300ec:	lsr	r2, r2, #5
   300f0:	moveq	r2, #0
   300f4:	cmp	r2, r3
   300f8:	str	r3, [r0, #4]
   300fc:	beq	30120 <__assert_fail@plt+0x1da34>
   30100:	mov	r1, r8
   30104:	str	r3, [sp, #12]
   30108:	bl	2ff28 <__assert_fail@plt+0x1d83c>
   3010c:	ldr	r3, [sp, #12]
   30110:	cmp	r0, #0
   30114:	movne	r0, r3
   30118:	bne	30070 <__assert_fail@plt+0x1d984>
   3011c:	b	3006c <__assert_fail@plt+0x1d980>
   30120:	ldr	r3, [r1, #4]
   30124:	ldr	r2, [pc, #272]	; 3023c <__assert_fail@plt+0x1db50>
   30128:	and	r3, r2, r3, lsr #8
   3012c:	orr	r6, r6, r3
   30130:	mov	r2, r6
   30134:	mov	r1, r8
   30138:	mov	r0, r4
   3013c:	bl	2dfc4 <__assert_fail@plt+0x1b8d8>
   30140:	cmn	r0, #1
   30144:	mov	r5, r0
   30148:	bne	30084 <__assert_fail@plt+0x1d998>
   3014c:	b	3006c <__assert_fail@plt+0x1d980>
   30150:	add	r0, r2, r9
   30154:	ldr	r5, [r3]
   30158:	mov	r3, #0
   3015c:	str	r3, [r0, #4]
   30160:	ldr	r3, [r4, #8]
   30164:	sub	r2, r3, #-536870911	; 0xe0000001
   30168:	sub	r1, r3, #1
   3016c:	sub	r3, r3, #-1073741823	; 0xc0000001
   30170:	add	ip, ip, r2, lsl #3
   30174:	lsl	r3, r3, #2
   30178:	ldrb	lr, [ip, #6]
   3017c:	cmp	r1, #0
   30180:	movle	r2, #0
   30184:	movgt	r2, #1
   30188:	ands	r2, r2, lr, lsr #2
   3018c:	bne	301f8 <__assert_fail@plt+0x1db0c>
   30190:	mov	r2, r6
   30194:	mov	r1, r5
   30198:	mov	r0, r4
   3019c:	bl	2dfc4 <__assert_fail@plt+0x1b8d8>
   301a0:	cmn	r0, #1
   301a4:	mov	r7, r0
   301a8:	beq	3006c <__assert_fail@plt+0x1d980>
   301ac:	ldr	r0, [r4, #20]
   301b0:	mov	r1, r7
   301b4:	add	r0, r0, r9
   301b8:	bl	2ff28 <__assert_fail@plt+0x1d83c>
   301bc:	cmp	r0, #0
   301c0:	beq	3006c <__assert_fail@plt+0x1d980>
   301c4:	str	r6, [sp]
   301c8:	mov	r3, fp
   301cc:	mov	r2, r7
   301d0:	mov	r1, r5
   301d4:	mov	r0, r4
   301d8:	bl	2fff8 <__assert_fail@plt+0x1d90c>
   301dc:	cmp	r0, #0
   301e0:	bne	30070 <__assert_fail@plt+0x1d984>
   301e4:	ldr	r3, [r4, #20]
   301e8:	add	r8, r3, r8
   301ec:	ldr	r3, [r8, #8]
   301f0:	ldr	r8, [r3, #4]
   301f4:	b	30130 <__assert_fail@plt+0x1da44>
   301f8:	ldr	r2, [r4, #16]
   301fc:	ldr	r2, [r2, r3]
   30200:	cmp	r5, r2
   30204:	bne	3021c <__assert_fail@plt+0x1db30>
   30208:	ldr	r2, [ip, #4]
   3020c:	ldr	lr, [pc, #40]	; 3023c <__assert_fail@plt+0x1db50>
   30210:	and	r2, lr, r2, lsr #8
   30214:	cmp	r6, r2
   30218:	beq	3022c <__assert_fail@plt+0x1db40>
   3021c:	sub	r1, r1, #1
   30220:	sub	ip, ip, #8
   30224:	sub	r3, r3, #4
   30228:	b	30178 <__assert_fail@plt+0x1da8c>
   3022c:	bl	2ff28 <__assert_fail@plt+0x1d83c>
   30230:	cmp	r0, #0
   30234:	bne	301e4 <__assert_fail@plt+0x1daf8>
   30238:	b	3006c <__assert_fail@plt+0x1d980>
   3023c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   30240:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   30244:	mov	r6, r0
   30248:	ldr	r7, [sp, #40]	; 0x28
   3024c:	mov	r5, r1
   30250:	mov	r4, r2
   30254:	mov	r8, r3
   30258:	mov	r9, #12
   3025c:	mov	r1, r4
   30260:	mov	r0, r5
   30264:	bl	2caf0 <__assert_fail@plt+0x1a404>
   30268:	cmp	r0, #0
   3026c:	beq	30278 <__assert_fail@plt+0x1db8c>
   30270:	mov	r0, #0
   30274:	b	302b8 <__assert_fail@plt+0x1dbcc>
   30278:	ldr	r3, [r6]
   3027c:	add	r2, r3, r4, lsl #3
   30280:	ldrb	r2, [r2, #4]
   30284:	cmp	r2, r7
   30288:	bne	302c0 <__assert_fail@plt+0x1dbd4>
   3028c:	ldr	r3, [r3, r4, lsl #3]
   30290:	cmp	r8, r3
   30294:	bne	302c0 <__assert_fail@plt+0x1dbd4>
   30298:	cmp	r7, #9
   3029c:	bne	30270 <__assert_fail@plt+0x1db84>
   302a0:	mov	r1, r4
   302a4:	mov	r0, r5
   302a8:	bl	2ff28 <__assert_fail@plt+0x1d83c>
   302ac:	cmp	r0, #0
   302b0:	bne	30270 <__assert_fail@plt+0x1db84>
   302b4:	mov	r0, #12
   302b8:	add	sp, sp, #12
   302bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   302c0:	mov	r1, r4
   302c4:	mov	r0, r5
   302c8:	bl	2ff28 <__assert_fail@plt+0x1d83c>
   302cc:	cmp	r0, #0
   302d0:	beq	302b4 <__assert_fail@plt+0x1dbc8>
   302d4:	mul	r4, r9, r4
   302d8:	ldr	r3, [r6, #20]
   302dc:	add	r3, r3, r4
   302e0:	ldr	r2, [r3, #4]
   302e4:	cmp	r2, #0
   302e8:	beq	30270 <__assert_fail@plt+0x1db84>
   302ec:	cmp	r2, #2
   302f0:	beq	30308 <__assert_fail@plt+0x1dc1c>
   302f4:	ldr	r2, [r6, #20]
   302f8:	add	r4, r2, r4
   302fc:	ldr	r3, [r4, #8]
   30300:	ldr	r4, [r3]
   30304:	b	3025c <__assert_fail@plt+0x1db70>
   30308:	ldr	r2, [r3, #8]
   3030c:	mov	r1, r5
   30310:	str	r7, [sp]
   30314:	mov	r3, r8
   30318:	ldr	r2, [r2, #4]
   3031c:	mov	r0, r6
   30320:	bl	30240 <__assert_fail@plt+0x1db54>
   30324:	cmp	r0, #0
   30328:	beq	302f4 <__assert_fail@plt+0x1dc08>
   3032c:	b	302b8 <__assert_fail@plt+0x1dbcc>
   30330:	push	{r4, r5, r6, r7, r8, lr}
   30334:	subs	r7, r1, #0
   30338:	bne	30344 <__assert_fail@plt+0x1dc58>
   3033c:	mov	r0, #0
   30340:	pop	{r4, r5, r6, r7, r8, pc}
   30344:	ldr	r3, [r7, #4]
   30348:	cmp	r3, #0
   3034c:	beq	3033c <__assert_fail@plt+0x1dc50>
   30350:	ldm	r0, {r1, r2}
   30354:	mov	r5, r0
   30358:	add	r2, r2, r3, lsl #1
   3035c:	cmp	r1, r2
   30360:	bge	30388 <__assert_fail@plt+0x1dc9c>
   30364:	add	r1, r3, r1
   30368:	ldr	r0, [r0, #8]
   3036c:	lsl	r4, r1, #1
   30370:	lsl	r1, r1, #3
   30374:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   30378:	cmp	r0, #0
   3037c:	beq	3048c <__assert_fail@plt+0x1dda0>
   30380:	str	r0, [r5, #8]
   30384:	str	r4, [r5]
   30388:	ldr	r4, [r5, #4]
   3038c:	ldr	r2, [r7, #4]
   30390:	cmp	r4, #0
   30394:	bne	303b4 <__assert_fail@plt+0x1dcc8>
   30398:	str	r2, [r5, #4]
   3039c:	ldr	r2, [r7, #4]
   303a0:	ldr	r0, [r5, #8]
   303a4:	ldr	r1, [r7, #8]
   303a8:	lsl	r2, r2, #2
   303ac:	bl	120f8 <memcpy@plt>
   303b0:	b	3033c <__assert_fail@plt+0x1dc50>
   303b4:	add	r6, r4, r2, lsl #1
   303b8:	sub	r3, r4, #1
   303bc:	sub	r2, r2, #1
   303c0:	cmp	r2, #0
   303c4:	cmpge	r3, #0
   303c8:	bge	30440 <__assert_fail@plt+0x1dd54>
   303cc:	cmp	r2, #0
   303d0:	blt	303f0 <__assert_fail@plt+0x1dd04>
   303d4:	add	r2, r2, #1
   303d8:	sub	r6, r6, r2
   303dc:	ldr	r0, [r5, #8]
   303e0:	lsl	r2, r2, #2
   303e4:	ldr	r1, [r7, #8]
   303e8:	add	r0, r0, r6, lsl #2
   303ec:	bl	120f8 <memcpy@plt>
   303f0:	ldr	r2, [r7, #4]
   303f4:	ldr	r1, [r5, #4]
   303f8:	add	r2, r1, r2, lsl #1
   303fc:	sub	ip, r2, #1
   30400:	subs	r2, r2, r6
   30404:	beq	3033c <__assert_fail@plt+0x1dc50>
   30408:	ldr	r0, [r5, #8]
   3040c:	sub	r3, r1, #1
   30410:	add	r1, r1, r2
   30414:	str	r1, [r5, #4]
   30418:	ldr	r4, [r0, ip, lsl #2]
   3041c:	ldr	lr, [r0, r3, lsl #2]
   30420:	add	r1, r3, r2
   30424:	cmp	r4, lr
   30428:	ble	30474 <__assert_fail@plt+0x1dd88>
   3042c:	subs	r2, r2, #1
   30430:	sub	ip, ip, #1
   30434:	str	r4, [r0, r1, lsl #2]
   30438:	bne	30418 <__assert_fail@plt+0x1dd2c>
   3043c:	b	3033c <__assert_fail@plt+0x1dc50>
   30440:	ldr	r1, [r5, #8]
   30444:	ldr	r0, [r7, #8]
   30448:	ldr	ip, [r1, r3, lsl #2]
   3044c:	ldr	r0, [r0, r2, lsl #2]
   30450:	cmp	ip, r0
   30454:	subeq	r2, r2, #1
   30458:	beq	3046c <__assert_fail@plt+0x1dd80>
   3045c:	sublt	r6, r6, #1
   30460:	sublt	r2, r2, #1
   30464:	strlt	r0, [r1, r6, lsl #2]
   30468:	blt	303c0 <__assert_fail@plt+0x1dcd4>
   3046c:	sub	r3, r3, #1
   30470:	b	303c0 <__assert_fail@plt+0x1dcd4>
   30474:	subs	r3, r3, #1
   30478:	str	lr, [r0, r1, lsl #2]
   3047c:	bpl	30418 <__assert_fail@plt+0x1dd2c>
   30480:	lsl	r2, r2, #2
   30484:	add	r1, r0, r6, lsl #2
   30488:	b	303ac <__assert_fail@plt+0x1dcc0>
   3048c:	mov	r0, #12
   30490:	pop	{r4, r5, r6, r7, r8, pc}
   30494:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30498:	mov	r7, #12
   3049c:	sub	sp, sp, #44	; 0x2c
   304a0:	mul	r7, r7, r2
   304a4:	str	r3, [sp, #12]
   304a8:	ldr	r3, [r1, #20]
   304ac:	mov	r4, r1
   304b0:	add	r3, r3, r7
   304b4:	add	r6, sp, #16
   304b8:	ldr	r1, [r3, #4]
   304bc:	str	r0, [sp, #8]
   304c0:	add	r1, r1, #1
   304c4:	mov	r0, r6
   304c8:	mov	r5, r2
   304cc:	bl	2d54c <__assert_fail@plt+0x1ae60>
   304d0:	subs	sl, r0, #0
   304d4:	bne	3056c <__assert_fail@plt+0x1de80>
   304d8:	ldr	r3, [sp, #20]
   304dc:	lsl	r8, r5, #3
   304e0:	add	r2, r3, #1
   304e4:	str	r2, [sp, #20]
   304e8:	ldr	r2, [sp, #24]
   304ec:	str	r5, [r2, r3, lsl #2]
   304f0:	ldr	r3, [r4, #24]
   304f4:	mvn	r2, #0
   304f8:	add	r3, r3, r7
   304fc:	str	r2, [r3, #4]
   30500:	ldr	r3, [r4]
   30504:	add	r2, r3, r8
   30508:	ldr	r1, [r2, #4]
   3050c:	ldr	r2, [pc, #352]	; 30674 <__assert_fail@plt+0x1df88>
   30510:	and	r2, r2, r1
   30514:	cmp	r2, #0
   30518:	bne	30578 <__assert_fail@plt+0x1de8c>
   3051c:	ldr	r3, [r4]
   30520:	add	r8, r3, r8
   30524:	ldrb	r5, [r8, #4]
   30528:	ands	r5, r5, #8
   3052c:	movne	r5, #0
   30530:	movne	r9, r5
   30534:	addne	r8, sp, #28
   30538:	bne	30600 <__assert_fail@plt+0x1df14>
   3053c:	ldr	r3, [sp, #12]
   30540:	eor	r3, r3, #1
   30544:	tst	r5, r3
   30548:	ldr	r3, [r4, #24]
   3054c:	ldmeq	r6, {r0, r1, r2}
   30550:	add	r7, r3, r7
   30554:	movne	r3, #0
   30558:	strne	r3, [r7, #4]
   3055c:	stmeq	r7, {r0, r1, r2}
   30560:	ldm	r6, {r0, r1, r2}
   30564:	ldr	r3, [sp, #8]
   30568:	stm	r3, {r0, r1, r2}
   3056c:	mov	r0, sl
   30570:	add	sp, sp, #44	; 0x2c
   30574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30578:	ldr	r2, [r4, #20]
   3057c:	add	r2, r2, r7
   30580:	ldr	r0, [r2, #4]
   30584:	cmp	r0, #0
   30588:	beq	3051c <__assert_fail@plt+0x1de30>
   3058c:	ldr	r2, [r2, #8]
   30590:	ldr	r2, [r2]
   30594:	add	r3, r3, r2, lsl #3
   30598:	ldrb	r3, [r3, #6]
   3059c:	tst	r3, #4
   305a0:	bne	3051c <__assert_fail@plt+0x1de30>
   305a4:	ldr	r3, [pc, #204]	; 30678 <__assert_fail@plt+0x1df8c>
   305a8:	mov	r2, r5
   305ac:	and	r3, r3, r1, lsr #8
   305b0:	str	r3, [sp]
   305b4:	mov	r1, r5
   305b8:	mov	r3, r5
   305bc:	mov	r0, r4
   305c0:	bl	2fff8 <__assert_fail@plt+0x1d90c>
   305c4:	cmp	r0, #0
   305c8:	beq	3051c <__assert_fail@plt+0x1de30>
   305cc:	mov	sl, r0
   305d0:	b	3056c <__assert_fail@plt+0x1de80>
   305d4:	ldr	r3, [r3, #8]
   305d8:	ldr	r1, [r4, #24]
   305dc:	ldr	r2, [r3, r9, lsl #2]
   305e0:	mov	r3, #12
   305e4:	mul	fp, r3, r2
   305e8:	add	r1, r1, fp
   305ec:	ldr	r3, [r1, #4]
   305f0:	cmn	r3, #1
   305f4:	bne	30618 <__assert_fail@plt+0x1df2c>
   305f8:	mov	r5, #1
   305fc:	add	r9, r9, #1
   30600:	ldr	r3, [r4, #20]
   30604:	add	r3, r3, r7
   30608:	ldr	r2, [r3, #4]
   3060c:	cmp	r9, r2
   30610:	blt	305d4 <__assert_fail@plt+0x1dee8>
   30614:	b	3053c <__assert_fail@plt+0x1de50>
   30618:	cmp	r3, #0
   3061c:	bne	30668 <__assert_fail@plt+0x1df7c>
   30620:	mov	r1, r4
   30624:	mov	r0, r8
   30628:	bl	30494 <__assert_fail@plt+0x1dda8>
   3062c:	cmp	r0, #0
   30630:	bne	305cc <__assert_fail@plt+0x1dee0>
   30634:	mov	r1, r8
   30638:	mov	r0, r6
   3063c:	bl	30330 <__assert_fail@plt+0x1dc44>
   30640:	cmp	r0, #0
   30644:	bne	305cc <__assert_fail@plt+0x1dee0>
   30648:	ldr	r3, [r4, #24]
   3064c:	add	fp, r3, fp
   30650:	ldr	r3, [fp, #4]
   30654:	cmp	r3, #0
   30658:	bne	305fc <__assert_fail@plt+0x1df10>
   3065c:	ldr	r0, [sp, #36]	; 0x24
   30660:	bl	2a01c <__assert_fail@plt+0x17930>
   30664:	b	305f8 <__assert_fail@plt+0x1df0c>
   30668:	ldm	r1, {r0, r1, r2}
   3066c:	stm	r8, {r0, r1, r2}
   30670:	b	30634 <__assert_fail@plt+0x1df48>
   30674:	andeq	pc, r3, r0, lsl #30
   30678:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   3067c:	cmp	r1, #0
   30680:	push	{r4, r5, r6, lr}
   30684:	mov	r4, r0
   30688:	bge	30694 <__assert_fail@plt+0x1dfa8>
   3068c:	ldr	r0, [r4, #60]	; 0x3c
   30690:	pop	{r4, r5, r6, pc}
   30694:	ldr	r3, [r0, #48]	; 0x30
   30698:	cmp	r1, r3
   3069c:	bne	306b0 <__assert_fail@plt+0x1dfc4>
   306a0:	tst	r2, #2
   306a4:	movne	r0, #8
   306a8:	moveq	r0, #10
   306ac:	pop	{r4, r5, r6, pc}
   306b0:	ldr	r3, [r0, #80]	; 0x50
   306b4:	cmp	r3, #1
   306b8:	ldrgt	r3, [r0, #8]
   306bc:	bgt	306f0 <__assert_fail@plt+0x1e004>
   306c0:	ldr	r3, [r0, #4]
   306c4:	ldr	r0, [r0, #68]	; 0x44
   306c8:	ldrb	r5, [r3, r1]
   306cc:	mov	r1, r5
   306d0:	bl	2c98c <__assert_fail@plt+0x1a2a0>
   306d4:	cmp	r0, #0
   306d8:	bne	30754 <__assert_fail@plt+0x1e068>
   306dc:	cmp	r5, #10
   306e0:	popne	{r4, r5, r6, pc}
   306e4:	b	30738 <__assert_fail@plt+0x1e04c>
   306e8:	subs	r1, r1, #1
   306ec:	bcc	3068c <__assert_fail@plt+0x1dfa0>
   306f0:	ldr	r5, [r3, r1, lsl #2]
   306f4:	cmn	r5, #1
   306f8:	beq	306e8 <__assert_fail@plt+0x1dffc>
   306fc:	ldrb	r3, [r4, #78]	; 0x4e
   30700:	cmp	r3, #0
   30704:	beq	30730 <__assert_fail@plt+0x1e044>
   30708:	mov	r0, r5
   3070c:	bl	12410 <iswalnum@plt>
   30710:	sub	r3, r5, #95	; 0x5f
   30714:	clz	r3, r3
   30718:	lsr	r3, r3, #5
   3071c:	cmp	r0, #0
   30720:	moveq	r0, r3
   30724:	orrne	r0, r3, #1
   30728:	cmp	r0, #0
   3072c:	bne	30754 <__assert_fail@plt+0x1e068>
   30730:	cmp	r5, #10
   30734:	bne	3074c <__assert_fail@plt+0x1e060>
   30738:	ldrb	r0, [r4, #77]	; 0x4d
   3073c:	cmp	r0, #0
   30740:	movne	r0, #2
   30744:	moveq	r0, #0
   30748:	pop	{r4, r5, r6, pc}
   3074c:	mov	r0, #0
   30750:	pop	{r4, r5, r6, pc}
   30754:	mov	r0, #1
   30758:	pop	{r4, r5, r6, pc}
   3075c:	ldr	r3, [r0, #4]
   30760:	push	{r4, r5, r6, lr}
   30764:	mov	r5, r1
   30768:	ldrb	r1, [r3, r2]
   3076c:	ldrb	r3, [r5, #4]
   30770:	mov	r4, r0
   30774:	mov	r6, r2
   30778:	sub	r3, r3, #1
   3077c:	cmp	r3, #6
   30780:	ldrls	pc, [pc, r3, lsl #2]
   30784:	b	30870 <__assert_fail@plt+0x1e184>
   30788:	andeq	r0, r3, r4, lsr #15
   3078c:	andeq	r0, r3, r0, ror r8
   30790:	andeq	r0, r3, r0, lsr #16
   30794:	andeq	r0, r3, r0, ror r8
   30798:	andeq	r0, r3, ip, lsr r8
   3079c:	andeq	r0, r3, r0, ror r8
   307a0:	andeq	r0, r3, r4, lsr r8
   307a4:	ldrb	r3, [r5]
   307a8:	cmp	r3, r1
   307ac:	bne	30870 <__assert_fail@plt+0x1e184>
   307b0:	ldr	r5, [r5, #4]
   307b4:	ldr	r2, [pc, #196]	; 30880 <__assert_fail@plt+0x1e194>
   307b8:	and	r2, r2, r5
   307bc:	cmp	r2, #0
   307c0:	beq	30878 <__assert_fail@plt+0x1e18c>
   307c4:	ldr	r2, [r4, #88]	; 0x58
   307c8:	mov	r1, r6
   307cc:	mov	r0, r4
   307d0:	bl	3067c <__assert_fail@plt+0x1df90>
   307d4:	ldr	r3, [pc, #168]	; 30884 <__assert_fail@plt+0x1e198>
   307d8:	and	r3, r3, r5, lsr #8
   307dc:	tst	r3, #4
   307e0:	beq	307ec <__assert_fail@plt+0x1e100>
   307e4:	ands	r1, r0, #1
   307e8:	beq	30870 <__assert_fail@plt+0x1e184>
   307ec:	tst	r3, #8
   307f0:	beq	307fc <__assert_fail@plt+0x1e110>
   307f4:	tst	r0, #1
   307f8:	bne	30870 <__assert_fail@plt+0x1e184>
   307fc:	tst	r3, #32
   30800:	beq	3080c <__assert_fail@plt+0x1e120>
   30804:	ands	r1, r0, #2
   30808:	beq	30870 <__assert_fail@plt+0x1e184>
   3080c:	tst	r3, #128	; 0x80
   30810:	beq	30878 <__assert_fail@plt+0x1e18c>
   30814:	lsr	r0, r0, #3
   30818:	and	r0, r0, #1
   3081c:	pop	{r4, r5, r6, pc}
   30820:	ldr	r0, [r5]
   30824:	bl	2c98c <__assert_fail@plt+0x1a2a0>
   30828:	cmp	r0, #0
   3082c:	bne	307b0 <__assert_fail@plt+0x1e0c4>
   30830:	pop	{r4, r5, r6, pc}
   30834:	tst	r1, #128	; 0x80
   30838:	bne	30870 <__assert_fail@plt+0x1e184>
   3083c:	cmp	r1, #10
   30840:	bne	30858 <__assert_fail@plt+0x1e16c>
   30844:	ldr	r3, [r4, #84]	; 0x54
   30848:	ldr	r0, [r3, #128]	; 0x80
   3084c:	ands	r0, r0, #64	; 0x40
   30850:	bne	307b0 <__assert_fail@plt+0x1e0c4>
   30854:	pop	{r4, r5, r6, pc}
   30858:	cmp	r1, #0
   3085c:	bne	307b0 <__assert_fail@plt+0x1e0c4>
   30860:	ldr	r3, [r4, #84]	; 0x54
   30864:	ldr	r3, [r3, #128]	; 0x80
   30868:	tst	r3, #128	; 0x80
   3086c:	beq	307b0 <__assert_fail@plt+0x1e0c4>
   30870:	mov	r0, #0
   30874:	pop	{r4, r5, r6, pc}
   30878:	mov	r0, #1
   3087c:	pop	{r4, r5, r6, pc}
   30880:	andeq	pc, r3, r0, lsl #30
   30884:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   30888:	push	{r4, r5, r6, r7, r8, lr}
   3088c:	mov	r5, r1
   30890:	mov	r1, r2
   30894:	ldr	r2, [r0, #88]	; 0x58
   30898:	mov	r4, r0
   3089c:	bl	3067c <__assert_fail@plt+0x1df90>
   308a0:	ldr	r6, [pc, #152]	; 30940 <__assert_fail@plt+0x1e254>
   308a4:	ldr	lr, [r5, #8]
   308a8:	mov	ip, #0
   308ac:	and	r7, r0, #8
   308b0:	and	r8, r0, #2
   308b4:	and	r1, r0, #1
   308b8:	cmp	ip, lr
   308bc:	blt	308c8 <__assert_fail@plt+0x1e1dc>
   308c0:	mov	r0, #0
   308c4:	pop	{r4, r5, r6, r7, r8, pc}
   308c8:	ldr	r3, [r5, #12]
   308cc:	ldr	r0, [r3, ip, lsl #2]
   308d0:	ldr	r3, [r4, #84]	; 0x54
   308d4:	ldr	r2, [r3]
   308d8:	add	r2, r2, r0, lsl #3
   308dc:	ldr	r3, [r2, #4]
   308e0:	ldrb	r2, [r2, #4]
   308e4:	and	r3, r6, r3, lsr #8
   308e8:	cmp	r2, #2
   308ec:	bne	30938 <__assert_fail@plt+0x1e24c>
   308f0:	cmp	r3, #0
   308f4:	popeq	{r4, r5, r6, r7, r8, pc}
   308f8:	tst	r3, #4
   308fc:	beq	30908 <__assert_fail@plt+0x1e21c>
   30900:	cmp	r1, #0
   30904:	beq	30938 <__assert_fail@plt+0x1e24c>
   30908:	tst	r3, #8
   3090c:	beq	30918 <__assert_fail@plt+0x1e22c>
   30910:	cmp	r1, #0
   30914:	bne	30938 <__assert_fail@plt+0x1e24c>
   30918:	tst	r3, #32
   3091c:	beq	30928 <__assert_fail@plt+0x1e23c>
   30920:	cmp	r8, #0
   30924:	beq	30938 <__assert_fail@plt+0x1e24c>
   30928:	tst	r3, #128	; 0x80
   3092c:	popeq	{r4, r5, r6, r7, r8, pc}
   30930:	cmp	r7, #0
   30934:	popne	{r4, r5, r6, r7, r8, pc}
   30938:	add	ip, ip, #1
   3093c:	b	308b8 <__assert_fail@plt+0x1e1cc>
   30940:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   30944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30948:	mov	r4, r0
   3094c:	ldr	r5, [r0, #24]
   30950:	sub	sp, sp, #28
   30954:	cmp	r5, r1
   30958:	mov	r6, r1
   3095c:	mov	sl, r2
   30960:	suble	r5, r1, r5
   30964:	ble	309c4 <__assert_fail@plt+0x1e2d8>
   30968:	ldr	r3, [r0, #80]	; 0x50
   3096c:	mov	r5, r1
   30970:	cmp	r3, #1
   30974:	ldr	r3, [r0, #44]	; 0x2c
   30978:	movgt	r2, #0
   3097c:	str	r3, [r0, #48]	; 0x30
   30980:	ldr	r3, [r0, #52]	; 0x34
   30984:	strgt	r2, [r0, #16]
   30988:	strgt	r2, [r0, #20]
   3098c:	str	r3, [r0, #56]	; 0x38
   30990:	tst	sl, #1
   30994:	mov	r3, #0
   30998:	str	r3, [r0, #28]
   3099c:	str	r3, [r0, #24]
   309a0:	str	r3, [r0, #32]
   309a4:	strb	r3, [r0, #76]	; 0x4c
   309a8:	moveq	r3, #6
   309ac:	movne	r3, #4
   309b0:	str	r3, [r0, #60]	; 0x3c
   309b4:	ldrb	r3, [r0, #75]	; 0x4b
   309b8:	cmp	r3, #0
   309bc:	ldreq	r3, [r0]
   309c0:	streq	r3, [r0, #4]
   309c4:	cmp	r5, #0
   309c8:	beq	30ac4 <__assert_fail@plt+0x1e3d8>
   309cc:	ldr	r3, [r4, #32]
   309d0:	ldr	r8, [r4, #28]
   309d4:	cmp	r5, r3
   309d8:	ldrb	r3, [r4, #76]	; 0x4c
   309dc:	bge	30c6c <__assert_fail@plt+0x1e580>
   309e0:	cmp	r3, #0
   309e4:	beq	30bfc <__assert_fail@plt+0x1e510>
   309e8:	ldr	r9, [r4, #12]
   309ec:	mov	r3, r8
   309f0:	mov	r2, #0
   309f4:	add	r7, r2, r3
   309f8:	add	r7, r7, r7, lsr #31
   309fc:	asr	r7, r7, #1
   30a00:	ldr	r1, [r9, r7, lsl #2]
   30a04:	cmp	r5, r1
   30a08:	blt	30b10 <__assert_fail@plt+0x1e424>
   30a0c:	ble	30a24 <__assert_fail@plt+0x1e338>
   30a10:	add	r2, r7, #1
   30a14:	cmp	r2, r3
   30a18:	blt	309f4 <__assert_fail@plt+0x1e308>
   30a1c:	cmp	r5, r1
   30a20:	addgt	r7, r7, #1
   30a24:	mov	r2, sl
   30a28:	sub	r1, r7, #1
   30a2c:	mov	r0, r4
   30a30:	bl	3067c <__assert_fail@plt+0x1df90>
   30a34:	cmp	r5, r8
   30a38:	movge	r3, #0
   30a3c:	movlt	r3, #1
   30a40:	cmp	r5, r7
   30a44:	movne	r3, #0
   30a48:	cmp	r3, #0
   30a4c:	str	r0, [r4, #60]	; 0x3c
   30a50:	beq	30b34 <__assert_fail@plt+0x1e448>
   30a54:	ldr	r3, [r9, r7, lsl #2]
   30a58:	cmp	r5, r3
   30a5c:	bne	30b34 <__assert_fail@plt+0x1e448>
   30a60:	ldr	r0, [r4, #8]
   30a64:	sub	r2, r8, r5
   30a68:	add	r1, r0, r5, lsl #2
   30a6c:	lsl	r2, r2, #2
   30a70:	bl	1208c <memmove@plt>
   30a74:	ldr	r0, [r4, #4]
   30a78:	ldr	r2, [r4, #28]
   30a7c:	add	r1, r0, r5
   30a80:	sub	r2, r2, r5
   30a84:	bl	1208c <memmove@plt>
   30a88:	ldr	r3, [r4, #28]
   30a8c:	sub	r3, r3, r5
   30a90:	str	r3, [r4, #28]
   30a94:	ldr	r3, [r4, #32]
   30a98:	sub	r3, r3, r5
   30a9c:	str	r3, [r4, #32]
   30aa0:	mov	r3, #0
   30aa4:	ldr	r2, [r4, #28]
   30aa8:	cmp	r3, r2
   30aac:	blt	30b18 <__assert_fail@plt+0x1e42c>
   30ab0:	ldrb	r3, [r4, #75]	; 0x4b
   30ab4:	cmp	r3, #0
   30ab8:	ldreq	r3, [r4, #4]
   30abc:	addeq	r3, r3, r5
   30ac0:	streq	r3, [r4, #4]
   30ac4:	ldr	r2, [r4, #56]	; 0x38
   30ac8:	ldr	r3, [r4, #48]	; 0x30
   30acc:	str	r6, [r4, #24]
   30ad0:	sub	r3, r3, r5
   30ad4:	sub	r5, r2, r5
   30ad8:	ldr	r2, [r4, #80]	; 0x50
   30adc:	str	r3, [r4, #48]	; 0x30
   30ae0:	cmp	r2, #1
   30ae4:	str	r5, [r4, #56]	; 0x38
   30ae8:	ble	30f44 <__assert_fail@plt+0x1e858>
   30aec:	ldrb	r3, [r4, #72]	; 0x48
   30af0:	mov	r0, r4
   30af4:	cmp	r3, #0
   30af8:	beq	30f34 <__assert_fail@plt+0x1e848>
   30afc:	bl	2d7b0 <__assert_fail@plt+0x1b0c4>
   30b00:	cmp	r0, #0
   30b04:	beq	30f38 <__assert_fail@plt+0x1e84c>
   30b08:	add	sp, sp, #28
   30b0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30b10:	mov	r3, r7
   30b14:	b	30a14 <__assert_fail@plt+0x1e328>
   30b18:	ldr	r1, [r4, #12]
   30b1c:	add	r2, r5, r3
   30b20:	ldr	r2, [r1, r2, lsl #2]
   30b24:	sub	r2, r2, r5
   30b28:	str	r2, [r1, r3, lsl #2]
   30b2c:	add	r3, r3, #1
   30b30:	b	30aa4 <__assert_fail@plt+0x1e3b8>
   30b34:	ldr	r3, [r4, #44]	; 0x2c
   30b38:	sub	r3, r3, r6
   30b3c:	add	r3, r3, r5
   30b40:	str	r3, [r4, #48]	; 0x30
   30b44:	ldr	r3, [r4, #52]	; 0x34
   30b48:	sub	r3, r3, r6
   30b4c:	add	r3, r3, r5
   30b50:	str	r3, [r4, #56]	; 0x38
   30b54:	mov	r3, #0
   30b58:	strb	r3, [r4, #76]	; 0x4c
   30b5c:	add	r3, r9, r7, lsl #2
   30b60:	cmp	r7, #0
   30b64:	ble	30b74 <__assert_fail@plt+0x1e488>
   30b68:	ldr	r2, [r3, #-4]!
   30b6c:	cmp	r5, r2
   30b70:	beq	30bb0 <__assert_fail@plt+0x1e4c4>
   30b74:	lsl	r3, r7, #2
   30b78:	cmp	r7, r8
   30b7c:	blt	30bb8 <__assert_fail@plt+0x1e4cc>
   30b80:	moveq	r3, #0
   30b84:	streq	r3, [r4, #28]
   30b88:	beq	30ba8 <__assert_fail@plt+0x1e4bc>
   30b8c:	ldr	r3, [r9, r7, lsl #2]
   30b90:	sub	r3, r3, r5
   30b94:	cmp	r3, #0
   30b98:	str	r3, [r4, #28]
   30b9c:	mvnne	r1, #0
   30ba0:	movne	r3, #0
   30ba4:	bne	30be0 <__assert_fail@plt+0x1e4f4>
   30ba8:	ldr	r3, [r4, #28]
   30bac:	b	30c64 <__assert_fail@plt+0x1e578>
   30bb0:	sub	r7, r7, #1
   30bb4:	b	30b60 <__assert_fail@plt+0x1e474>
   30bb8:	ldr	r2, [r4, #8]
   30bbc:	ldr	r2, [r2, r3]
   30bc0:	add	r3, r3, #4
   30bc4:	cmn	r2, #1
   30bc8:	bne	30b8c <__assert_fail@plt+0x1e4a0>
   30bcc:	add	r7, r7, #1
   30bd0:	b	30b78 <__assert_fail@plt+0x1e48c>
   30bd4:	ldr	r2, [r4, #8]
   30bd8:	str	r1, [r2, r3, lsl #2]
   30bdc:	add	r3, r3, #1
   30be0:	ldr	r2, [r4, #28]
   30be4:	cmp	r3, r2
   30be8:	blt	30bd4 <__assert_fail@plt+0x1e4e8>
   30bec:	mov	r1, #255	; 0xff
   30bf0:	ldr	r0, [r4, #4]
   30bf4:	bl	12434 <memset@plt>
   30bf8:	b	30ba8 <__assert_fail@plt+0x1e4bc>
   30bfc:	mov	r2, sl
   30c00:	sub	r1, r5, #1
   30c04:	mov	r0, r4
   30c08:	bl	3067c <__assert_fail@plt+0x1df90>
   30c0c:	ldr	r3, [r4, #80]	; 0x50
   30c10:	cmp	r3, #1
   30c14:	str	r0, [r4, #60]	; 0x3c
   30c18:	ble	30c30 <__assert_fail@plt+0x1e544>
   30c1c:	ldr	r0, [r4, #8]
   30c20:	sub	r2, r8, r5
   30c24:	add	r1, r0, r5, lsl #2
   30c28:	lsl	r2, r2, #2
   30c2c:	bl	1208c <memmove@plt>
   30c30:	ldrb	r3, [r4, #75]	; 0x4b
   30c34:	cmp	r3, #0
   30c38:	beq	30c50 <__assert_fail@plt+0x1e564>
   30c3c:	ldr	r0, [r4, #4]
   30c40:	ldr	r2, [r4, #28]
   30c44:	add	r1, r0, r5
   30c48:	sub	r2, r2, r5
   30c4c:	bl	1208c <memmove@plt>
   30c50:	ldr	r3, [r4, #28]
   30c54:	sub	r3, r3, r5
   30c58:	str	r3, [r4, #28]
   30c5c:	ldr	r3, [r4, #32]
   30c60:	sub	r3, r3, r5
   30c64:	str	r3, [r4, #32]
   30c68:	b	30ab0 <__assert_fail@plt+0x1e3c4>
   30c6c:	cmp	r3, #0
   30c70:	beq	30c9c <__assert_fail@plt+0x1e5b0>
   30c74:	ldr	r3, [r4, #44]	; 0x2c
   30c78:	sub	r3, r3, r6
   30c7c:	add	r3, r3, r5
   30c80:	str	r3, [r4, #48]	; 0x30
   30c84:	ldr	r3, [r4, #52]	; 0x34
   30c88:	sub	r3, r3, r6
   30c8c:	add	r3, r3, r5
   30c90:	str	r3, [r4, #56]	; 0x38
   30c94:	mov	r3, #0
   30c98:	strb	r3, [r4, #76]	; 0x4c
   30c9c:	ldr	r3, [r4, #80]	; 0x50
   30ca0:	mov	r2, #0
   30ca4:	cmp	r3, #1
   30ca8:	str	r2, [r4, #28]
   30cac:	ldr	r7, [r4, #24]
   30cb0:	ble	30edc <__assert_fail@plt+0x1e7f0>
   30cb4:	ldrb	r2, [r4, #73]	; 0x49
   30cb8:	cmp	r2, #0
   30cbc:	beq	30d88 <__assert_fail@plt+0x1e69c>
   30cc0:	ldr	r2, [r4]
   30cc4:	sub	r3, r5, r3
   30cc8:	add	r7, r2, r7
   30ccc:	add	r3, r7, r3
   30cd0:	cmp	r2, r3
   30cd4:	sub	r9, r5, #1
   30cd8:	movcs	r3, r2
   30cdc:	add	r9, r7, r9
   30ce0:	cmp	r9, r3
   30ce4:	mov	r1, r9
   30ce8:	bcc	30d88 <__assert_fail@plt+0x1e69c>
   30cec:	ldrb	r2, [r9]
   30cf0:	sub	r0, r9, #1
   30cf4:	and	r2, r2, #192	; 0xc0
   30cf8:	cmp	r2, #128	; 0x80
   30cfc:	beq	30e04 <__assert_fail@plt+0x1e718>
   30d00:	ldr	r2, [r4, #48]	; 0x30
   30d04:	ldr	r0, [r4, #64]	; 0x40
   30d08:	add	r2, r7, r2
   30d0c:	cmp	r0, #0
   30d10:	sub	r2, r2, r9
   30d14:	beq	30d30 <__assert_fail@plt+0x1e644>
   30d18:	cmp	r2, #6
   30d1c:	movlt	r3, r2
   30d20:	movge	r3, #6
   30d24:	add	r1, sp, #8
   30d28:	subs	r3, r3, #1
   30d2c:	bpl	30df4 <__assert_fail@plt+0x1e708>
   30d30:	add	r3, sp, #16
   30d34:	mov	fp, #0
   30d38:	add	r0, sp, #4
   30d3c:	str	fp, [sp, #16]
   30d40:	str	fp, [sp, #20]
   30d44:	bl	2bf50 <__assert_fail@plt+0x19864>
   30d48:	add	r7, r7, r5
   30d4c:	sub	r9, r7, r9
   30d50:	cmp	r0, r9
   30d54:	movcc	r3, #0
   30d58:	movcs	r3, #1
   30d5c:	cmn	r0, #3
   30d60:	movhi	r3, #0
   30d64:	cmp	r3, fp
   30d68:	beq	30d88 <__assert_fail@plt+0x1e69c>
   30d6c:	str	fp, [r4, #16]
   30d70:	str	fp, [r4, #20]
   30d74:	ldr	fp, [sp, #4]
   30d78:	sub	r0, r0, r9
   30d7c:	cmn	fp, #1
   30d80:	str	r0, [r4, #28]
   30d84:	bne	30e78 <__assert_fail@plt+0x1e78c>
   30d88:	ldr	r7, [r4, #24]
   30d8c:	ldr	r3, [r4, #32]
   30d90:	mvn	fp, #0
   30d94:	add	r7, r7, r3
   30d98:	cmp	r6, r7
   30d9c:	bgt	30e0c <__assert_fail@plt+0x1e720>
   30da0:	sub	r7, r7, r6
   30da4:	cmn	fp, #1
   30da8:	str	r7, [r4, #28]
   30dac:	bne	30e78 <__assert_fail@plt+0x1e78c>
   30db0:	mov	r2, sl
   30db4:	sub	r1, r8, #1
   30db8:	mov	r0, r4
   30dbc:	bl	3067c <__assert_fail@plt+0x1df90>
   30dc0:	str	r0, [r4, #60]	; 0x3c
   30dc4:	ldr	r3, [r4, #28]
   30dc8:	cmp	r3, #0
   30dcc:	movne	r3, #0
   30dd0:	mvnne	r1, #0
   30dd4:	beq	30ba8 <__assert_fail@plt+0x1e4bc>
   30dd8:	ldr	r2, [r4, #28]
   30ddc:	cmp	r3, r2
   30de0:	blt	30ecc <__assert_fail@plt+0x1e7e0>
   30de4:	ldrb	r3, [r4, #75]	; 0x4b
   30de8:	cmp	r3, #0
   30dec:	beq	30ba8 <__assert_fail@plt+0x1e4bc>
   30df0:	b	30bec <__assert_fail@plt+0x1e500>
   30df4:	ldrb	ip, [r9, r3]
   30df8:	ldrb	ip, [r0, ip]
   30dfc:	strb	ip, [r1, r3]
   30e00:	b	30d28 <__assert_fail@plt+0x1e63c>
   30e04:	mov	r9, r0
   30e08:	b	30ce0 <__assert_fail@plt+0x1e5f4>
   30e0c:	add	r9, r4, #16
   30e10:	add	r3, sp, #16
   30e14:	ldm	r9, {r0, r1}
   30e18:	ldr	fp, [r4, #44]	; 0x2c
   30e1c:	stm	r3, {r0, r1}
   30e20:	ldr	r1, [r4]
   30e24:	sub	fp, fp, r7
   30e28:	mov	r3, r9
   30e2c:	mov	r2, fp
   30e30:	add	r1, r1, r7
   30e34:	add	r0, sp, #8
   30e38:	bl	2bf50 <__assert_fail@plt+0x19864>
   30e3c:	sub	r3, r0, #1
   30e40:	cmn	r3, #4
   30e44:	ldrls	fp, [sp, #8]
   30e48:	bls	30e70 <__assert_fail@plt+0x1e784>
   30e4c:	cmp	fp, #0
   30e50:	cmpne	r0, #0
   30e54:	moveq	fp, #0
   30e58:	ldrne	r3, [r4]
   30e5c:	ldrbne	fp, [r3, r7]
   30e60:	add	r3, sp, #16
   30e64:	ldm	r3, {r0, r1}
   30e68:	stm	r9, {r0, r1}
   30e6c:	mov	r0, #1
   30e70:	add	r7, r7, r0
   30e74:	b	30d98 <__assert_fail@plt+0x1e6ac>
   30e78:	ldrb	r3, [r4, #78]	; 0x4e
   30e7c:	cmp	r3, #0
   30e80:	beq	30ea8 <__assert_fail@plt+0x1e7bc>
   30e84:	mov	r0, fp
   30e88:	bl	12410 <iswalnum@plt>
   30e8c:	cmp	fp, #95	; 0x5f
   30e90:	clz	r0, r0
   30e94:	lsr	r0, r0, #5
   30e98:	moveq	r0, #0
   30e9c:	cmp	r0, #0
   30ea0:	moveq	r3, #1
   30ea4:	beq	30ec4 <__assert_fail@plt+0x1e7d8>
   30ea8:	cmp	fp, #10
   30eac:	movne	r3, #0
   30eb0:	bne	30ec4 <__assert_fail@plt+0x1e7d8>
   30eb4:	ldrb	r3, [r4, #77]	; 0x4d
   30eb8:	cmp	r3, #0
   30ebc:	movne	r3, #2
   30ec0:	moveq	r3, #0
   30ec4:	str	r3, [r4, #60]	; 0x3c
   30ec8:	b	30dc4 <__assert_fail@plt+0x1e6d8>
   30ecc:	ldr	r2, [r4, #8]
   30ed0:	str	r1, [r2, r3, lsl #2]
   30ed4:	add	r3, r3, #1
   30ed8:	b	30dd8 <__assert_fail@plt+0x1e6ec>
   30edc:	ldr	r3, [r4]
   30ee0:	ldr	r0, [r4, #68]	; 0x44
   30ee4:	add	r3, r3, r5
   30ee8:	add	r7, r3, r7
   30eec:	ldr	r3, [r4, #64]	; 0x40
   30ef0:	ldrb	r7, [r7, #-1]
   30ef4:	cmp	r3, #0
   30ef8:	str	r2, [r4, #32]
   30efc:	ldrbne	r7, [r3, r7]
   30f00:	mov	r1, r7
   30f04:	bl	2c98c <__assert_fail@plt+0x1a2a0>
   30f08:	cmp	r0, #0
   30f0c:	movne	r0, #1
   30f10:	bne	30f2c <__assert_fail@plt+0x1e840>
   30f14:	cmp	r7, #10
   30f18:	bne	30f2c <__assert_fail@plt+0x1e840>
   30f1c:	ldrb	r0, [r4, #77]	; 0x4d
   30f20:	cmp	r0, #0
   30f24:	movne	r0, #2
   30f28:	moveq	r0, #0
   30f2c:	str	r0, [r4, #60]	; 0x3c
   30f30:	b	30ab0 <__assert_fail@plt+0x1e3c4>
   30f34:	bl	2d65c <__assert_fail@plt+0x1af70>
   30f38:	mov	r0, #0
   30f3c:	str	r0, [r4, #40]	; 0x28
   30f40:	b	30b08 <__assert_fail@plt+0x1e41c>
   30f44:	ldrb	r2, [r4, #75]	; 0x4b
   30f48:	cmp	r2, #0
   30f4c:	streq	r3, [r4, #28]
   30f50:	beq	30f38 <__assert_fail@plt+0x1e84c>
   30f54:	ldrb	r3, [r4, #72]	; 0x48
   30f58:	cmp	r3, #0
   30f5c:	beq	30f6c <__assert_fail@plt+0x1e880>
   30f60:	mov	r0, r4
   30f64:	bl	2dc80 <__assert_fail@plt+0x1b594>
   30f68:	b	30f38 <__assert_fail@plt+0x1e84c>
   30f6c:	ldr	r3, [r4, #64]	; 0x40
   30f70:	cmp	r3, #0
   30f74:	beq	30f38 <__assert_fail@plt+0x1e84c>
   30f78:	mov	r0, r4
   30f7c:	bl	2caa0 <__assert_fail@plt+0x1a3b4>
   30f80:	b	30f38 <__assert_fail@plt+0x1e84c>
   30f84:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   30f88:	mov	r4, r1
   30f8c:	ldr	r5, [r1, #40]	; 0x28
   30f90:	mov	r6, r0
   30f94:	mov	r1, r5
   30f98:	mov	r0, r4
   30f9c:	mov	r7, r2
   30fa0:	mov	r8, r3
   30fa4:	bl	2ca2c <__assert_fail@plt+0x1a340>
   30fa8:	cmp	r0, #1
   30fac:	ble	30fe0 <__assert_fail@plt+0x1e8f4>
   30fb0:	mov	r3, #1
   30fb4:	mov	r2, r0
   30fb8:	mov	r1, r5
   30fbc:	str	r3, [r6]
   30fc0:	mov	r0, r4
   30fc4:	bl	2ca84 <__assert_fail@plt+0x1a398>
   30fc8:	str	r0, [r6, #4]
   30fcc:	mov	r0, #0
   30fd0:	add	r5, r5, r2
   30fd4:	str	r5, [r4, #40]	; 0x28
   30fd8:	add	sp, sp, #8
   30fdc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   30fe0:	ldrb	r2, [r7, #4]
   30fe4:	add	r5, r5, r8
   30fe8:	str	r5, [r4, #40]	; 0x28
   30fec:	and	r3, r2, #251	; 0xfb
   30ff0:	cmp	r2, #28
   30ff4:	cmpne	r3, #26
   30ff8:	bne	31148 <__assert_fail@plt+0x1ea5c>
   30ffc:	ldr	r3, [r4, #56]	; 0x38
   31000:	cmp	r5, r3
   31004:	blt	31010 <__assert_fail@plt+0x1e924>
   31008:	mov	r0, #7
   3100c:	b	30fd8 <__assert_fail@plt+0x1e8ec>
   31010:	ldrb	sl, [r7]
   31014:	mov	r9, #0
   31018:	ldrb	r3, [r7, #4]
   3101c:	ldr	r5, [r4, #40]	; 0x28
   31020:	cmp	r3, #30
   31024:	bne	31034 <__assert_fail@plt+0x1e948>
   31028:	ldrb	r3, [r4, #75]	; 0x4b
   3102c:	cmp	r3, #0
   31030:	bne	31044 <__assert_fail@plt+0x1e958>
   31034:	add	r2, r5, #1
   31038:	ldr	r3, [r4, #4]
   3103c:	str	r2, [r4, #40]	; 0x28
   31040:	b	310f4 <__assert_fail@plt+0x1ea08>
   31044:	ldrb	r3, [r4, #76]	; 0x4c
   31048:	cmp	r3, #0
   3104c:	beq	310e0 <__assert_fail@plt+0x1e9f4>
   31050:	ldr	r3, [r4, #28]
   31054:	cmp	r5, r3
   31058:	beq	3106c <__assert_fail@plt+0x1e980>
   3105c:	ldr	r3, [r4, #8]
   31060:	ldr	r3, [r3, r5, lsl #2]
   31064:	cmn	r3, #1
   31068:	beq	31034 <__assert_fail@plt+0x1e948>
   3106c:	ldr	r2, [r4, #12]
   31070:	ldr	r3, [r4]
   31074:	ldr	r1, [r2, r5, lsl #2]
   31078:	ldr	r2, [r4, #24]
   3107c:	add	r3, r3, r1
   31080:	ldrb	r8, [r3, r2]
   31084:	tst	r8, #128	; 0x80
   31088:	bne	31034 <__assert_fail@plt+0x1e948>
   3108c:	mov	r1, r5
   31090:	mov	r0, r4
   31094:	bl	2ca2c <__assert_fail@plt+0x1a340>
   31098:	add	r0, r5, r0
   3109c:	str	r0, [r4, #40]	; 0x28
   310a0:	ldr	r3, [r4, #40]	; 0x28
   310a4:	ldr	r2, [r4, #56]	; 0x38
   310a8:	cmp	r2, r3
   310ac:	ble	31008 <__assert_fail@plt+0x1e91c>
   310b0:	cmp	sl, r8
   310b4:	bne	310c8 <__assert_fail@plt+0x1e9dc>
   310b8:	ldr	r2, [r4, #4]
   310bc:	ldrb	r2, [r2, r3]
   310c0:	cmp	r2, #93	; 0x5d
   310c4:	beq	310fc <__assert_fail@plt+0x1ea10>
   310c8:	ldr	r3, [r6, #4]
   310cc:	strb	r8, [r3, r9]
   310d0:	add	r9, r9, #1
   310d4:	cmp	r9, #32
   310d8:	bne	31018 <__assert_fail@plt+0x1e92c>
   310dc:	b	31008 <__assert_fail@plt+0x1e91c>
   310e0:	ldr	r3, [r4]
   310e4:	ldr	r2, [r4, #24]
   310e8:	add	r1, r5, #1
   310ec:	add	r3, r3, r2
   310f0:	str	r1, [r4, #40]	; 0x28
   310f4:	ldrb	r8, [r3, r5]
   310f8:	b	310a0 <__assert_fail@plt+0x1e9b4>
   310fc:	add	r3, r3, #1
   31100:	str	r3, [r4, #40]	; 0x28
   31104:	ldr	r3, [r6, #4]
   31108:	mov	r0, #0
   3110c:	strb	r0, [r3, r9]
   31110:	ldrb	r3, [r7, #4]
   31114:	cmp	r3, #28
   31118:	beq	31138 <__assert_fail@plt+0x1ea4c>
   3111c:	cmp	r3, #30
   31120:	beq	31140 <__assert_fail@plt+0x1ea54>
   31124:	cmp	r3, #26
   31128:	moveq	r3, #3
   3112c:	bne	30fd8 <__assert_fail@plt+0x1e8ec>
   31130:	str	r3, [r6]
   31134:	b	30fd8 <__assert_fail@plt+0x1e8ec>
   31138:	mov	r3, #2
   3113c:	b	31130 <__assert_fail@plt+0x1ea44>
   31140:	mov	r3, #4
   31144:	b	31130 <__assert_fail@plt+0x1ea44>
   31148:	ldrb	r3, [sp, #44]	; 0x2c
   3114c:	cmp	r2, #22
   31150:	orrne	r3, r3, #1
   31154:	cmp	r3, #0
   31158:	bne	3117c <__assert_fail@plt+0x1ea90>
   3115c:	ldr	r2, [sp, #40]	; 0x28
   31160:	mov	r1, r4
   31164:	mov	r0, sp
   31168:	bl	2cb54 <__assert_fail@plt+0x1a468>
   3116c:	ldrb	r3, [sp, #4]
   31170:	cmp	r3, #21
   31174:	movne	r0, #11
   31178:	bne	30fd8 <__assert_fail@plt+0x1e8ec>
   3117c:	mov	r0, #0
   31180:	str	r0, [r6]
   31184:	ldrb	r3, [r7]
   31188:	strb	r3, [r6, #4]
   3118c:	b	30fd8 <__assert_fail@plt+0x1e8ec>
   31190:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   31194:	ldr	r3, [r1, #56]	; 0x38
   31198:	ldr	r6, [r1, #40]	; 0x28
   3119c:	cmp	r3, r6
   311a0:	movle	r3, #2
   311a4:	strble	r3, [r0, #4]
   311a8:	movle	r0, #0
   311ac:	ble	31210 <__assert_fail@plt+0x1eb24>
   311b0:	ldr	r9, [r1, #4]
   311b4:	ldrb	r3, [r0, #6]
   311b8:	mov	r5, r2
   311bc:	ldrb	r8, [r9, r6]
   311c0:	and	r3, r3, #159	; 0x9f
   311c4:	strb	r3, [r0, #6]
   311c8:	strb	r8, [r0]
   311cc:	ldr	r2, [r1, #80]	; 0x50
   311d0:	mov	r7, r1
   311d4:	cmp	r2, #1
   311d8:	mov	r4, r0
   311dc:	ble	31770 <__assert_fail@plt+0x1f084>
   311e0:	ldr	r3, [r1, #28]
   311e4:	cmp	r6, r3
   311e8:	beq	31740 <__assert_fail@plt+0x1f054>
   311ec:	ldr	r3, [r1, #8]
   311f0:	ldr	r3, [r3, r6, lsl #2]
   311f4:	cmn	r3, #1
   311f8:	bne	31740 <__assert_fail@plt+0x1f054>
   311fc:	ldrb	r3, [r4, #6]
   31200:	mov	r0, #1
   31204:	strb	r0, [r4, #4]
   31208:	orr	r3, r3, #32
   3120c:	strb	r3, [r4, #6]
   31210:	add	sp, sp, #8
   31214:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   31218:	cmp	r2, #1
   3121c:	ble	31254 <__assert_fail@plt+0x1eb68>
   31220:	ldr	r3, [r7, #8]
   31224:	lsl	r0, r1, #2
   31228:	ldr	ip, [r3, r1, lsl #2]
   3122c:	cmn	ip, #1
   31230:	beq	31768 <__assert_fail@plt+0x1f07c>
   31234:	ldr	ip, [r7, #28]
   31238:	add	r6, r6, #2
   3123c:	cmp	ip, r6
   31240:	beq	31254 <__assert_fail@plt+0x1eb68>
   31244:	add	r3, r3, r0
   31248:	ldr	r3, [r3, #4]
   3124c:	cmn	r3, #1
   31250:	beq	31768 <__assert_fail@plt+0x1f07c>
   31254:	ldrb	r0, [r7, #76]	; 0x4c
   31258:	ldr	lr, [r7, #24]
   3125c:	cmp	r0, #0
   31260:	moveq	ip, r1
   31264:	ldrne	r3, [r7, #12]
   31268:	ldrne	ip, [r3, r1, lsl #2]
   3126c:	ldr	r3, [r7]
   31270:	cmp	r0, #0
   31274:	add	r3, r3, ip
   31278:	ldrb	r6, [r3, lr]
   3127c:	beq	31288 <__assert_fail@plt+0x1eb9c>
   31280:	tst	r6, #128	; 0x80
   31284:	bne	31768 <__assert_fail@plt+0x1f07c>
   31288:	mov	r3, #1
   3128c:	cmp	r2, r3
   31290:	strb	r6, [r4]
   31294:	strb	r3, [r4, #4]
   31298:	ldrb	r8, [r4, #6]
   3129c:	ble	31304 <__assert_fail@plt+0x1ec18>
   312a0:	mov	r0, r7
   312a4:	bl	2ca84 <__assert_fail@plt+0x1a398>
   312a8:	bic	r8, r8, #64	; 0x40
   312ac:	mov	r7, r0
   312b0:	bl	12410 <iswalnum@plt>
   312b4:	adds	r0, r0, #0
   312b8:	movne	r0, #1
   312bc:	cmp	r7, #95	; 0x5f
   312c0:	orreq	r0, r0, #1
   312c4:	orr	r8, r8, r0, lsl #6
   312c8:	strb	r8, [r4, #6]
   312cc:	cmp	r6, #66	; 0x42
   312d0:	beq	31478 <__assert_fail@plt+0x1ed8c>
   312d4:	bhi	31394 <__assert_fail@plt+0x1eca8>
   312d8:	cmp	r6, #57	; 0x39
   312dc:	bhi	31360 <__assert_fail@plt+0x1ec74>
   312e0:	cmp	r6, #49	; 0x31
   312e4:	bcs	31448 <__assert_fail@plt+0x1ed5c>
   312e8:	cmp	r6, #40	; 0x28
   312ec:	beq	314e0 <__assert_fail@plt+0x1edf4>
   312f0:	bhi	31334 <__assert_fail@plt+0x1ec48>
   312f4:	cmp	r6, #39	; 0x27
   312f8:	beq	314c8 <__assert_fail@plt+0x1eddc>
   312fc:	mov	r0, #2
   31300:	b	31210 <__assert_fail@plt+0x1eb24>
   31304:	bl	12374 <__ctype_b_loc@plt>
   31308:	lsl	r3, r6, #1
   3130c:	bic	r8, r8, #64	; 0x40
   31310:	ldr	r2, [r0]
   31314:	ldrh	r3, [r2, r3]
   31318:	lsr	r3, r3, #3
   3131c:	and	r3, r3, #1
   31320:	cmp	r6, #95	; 0x5f
   31324:	orreq	r3, r3, #1
   31328:	orr	r3, r8, r3, lsl #6
   3132c:	strb	r3, [r4, #6]
   31330:	b	312cc <__assert_fail@plt+0x1ebe0>
   31334:	cmp	r6, #41	; 0x29
   31338:	beq	314f0 <__assert_fail@plt+0x1ee04>
   3133c:	cmp	r6, #43	; 0x2b
   31340:	bne	312fc <__assert_fail@plt+0x1ec10>
   31344:	ldr	r0, [pc, #1128]	; 317b4 <__assert_fail@plt+0x1f0c8>
   31348:	and	r0, r0, r5
   3134c:	cmp	r0, #2
   31350:	moveq	r3, #18
   31354:	bne	312fc <__assert_fail@plt+0x1ec10>
   31358:	strb	r3, [r4, #4]
   3135c:	b	31210 <__assert_fail@plt+0x1eb24>
   31360:	cmp	r6, #62	; 0x3e
   31364:	beq	31460 <__assert_fail@plt+0x1ed74>
   31368:	cmp	r6, #63	; 0x3f
   3136c:	beq	31500 <__assert_fail@plt+0x1ee14>
   31370:	cmp	r6, #60	; 0x3c
   31374:	bne	312fc <__assert_fail@plt+0x1ec10>
   31378:	tst	r5, #524288	; 0x80000
   3137c:	moveq	r3, #12
   31380:	strbeq	r3, [r4, #4]
   31384:	moveq	r3, #6
   31388:	bne	312fc <__assert_fail@plt+0x1ec10>
   3138c:	str	r3, [r4]
   31390:	b	312fc <__assert_fail@plt+0x1ec10>
   31394:	cmp	r6, #115	; 0x73
   31398:	beq	314a0 <__assert_fail@plt+0x1edb4>
   3139c:	bhi	313ec <__assert_fail@plt+0x1ed00>
   313a0:	cmp	r6, #87	; 0x57
   313a4:	beq	31490 <__assert_fail@plt+0x1eda4>
   313a8:	bhi	313c4 <__assert_fail@plt+0x1ecd8>
   313ac:	cmp	r6, #83	; 0x53
   313b0:	bne	312fc <__assert_fail@plt+0x1ec10>
   313b4:	tst	r5, #524288	; 0x80000
   313b8:	moveq	r3, #35	; 0x23
   313bc:	beq	31440 <__assert_fail@plt+0x1ed54>
   313c0:	b	312fc <__assert_fail@plt+0x1ec10>
   313c4:	cmp	r6, #96	; 0x60
   313c8:	beq	314b0 <__assert_fail@plt+0x1edc4>
   313cc:	cmp	r6, #98	; 0x62
   313d0:	bne	312fc <__assert_fail@plt+0x1ec10>
   313d4:	tst	r5, #524288	; 0x80000
   313d8:	moveq	r3, #12
   313dc:	strbeq	r3, [r4, #4]
   313e0:	moveq	r3, #256	; 0x100
   313e4:	beq	3138c <__assert_fail@plt+0x1eca0>
   313e8:	b	312fc <__assert_fail@plt+0x1ec10>
   313ec:	cmp	r6, #123	; 0x7b
   313f0:	beq	31518 <__assert_fail@plt+0x1ee2c>
   313f4:	bhi	31410 <__assert_fail@plt+0x1ed24>
   313f8:	cmp	r6, #119	; 0x77
   313fc:	bne	312fc <__assert_fail@plt+0x1ec10>
   31400:	tst	r5, #524288	; 0x80000
   31404:	moveq	r3, #32
   31408:	beq	31440 <__assert_fail@plt+0x1ed54>
   3140c:	b	312fc <__assert_fail@plt+0x1ec10>
   31410:	cmp	r6, #124	; 0x7c
   31414:	beq	31434 <__assert_fail@plt+0x1ed48>
   31418:	cmp	r6, #125	; 0x7d
   3141c:	bne	312fc <__assert_fail@plt+0x1ec10>
   31420:	and	r5, r5, #4608	; 0x1200
   31424:	cmp	r5, #512	; 0x200
   31428:	bne	312fc <__assert_fail@plt+0x1ec10>
   3142c:	mov	r3, #24
   31430:	b	31440 <__assert_fail@plt+0x1ed54>
   31434:	tst	r5, #33792	; 0x8400
   31438:	moveq	r3, #10
   3143c:	bne	312fc <__assert_fail@plt+0x1ec10>
   31440:	strb	r3, [r4, #4]
   31444:	b	312fc <__assert_fail@plt+0x1ec10>
   31448:	tst	r5, #16384	; 0x4000
   3144c:	moveq	r3, #4
   31450:	subeq	r6, r6, #49	; 0x31
   31454:	strbeq	r3, [r4, #4]
   31458:	streq	r6, [r4]
   3145c:	b	312fc <__assert_fail@plt+0x1ec10>
   31460:	tst	r5, #524288	; 0x80000
   31464:	moveq	r3, #12
   31468:	strbeq	r3, [r4, #4]
   3146c:	moveq	r3, #9
   31470:	beq	3138c <__assert_fail@plt+0x1eca0>
   31474:	b	312fc <__assert_fail@plt+0x1ec10>
   31478:	tst	r5, #524288	; 0x80000
   3147c:	moveq	r3, #12
   31480:	strbeq	r3, [r4, #4]
   31484:	moveq	r3, #512	; 0x200
   31488:	beq	3138c <__assert_fail@plt+0x1eca0>
   3148c:	b	312fc <__assert_fail@plt+0x1ec10>
   31490:	tst	r5, #524288	; 0x80000
   31494:	moveq	r3, #33	; 0x21
   31498:	beq	31440 <__assert_fail@plt+0x1ed54>
   3149c:	b	312fc <__assert_fail@plt+0x1ec10>
   314a0:	tst	r5, #524288	; 0x80000
   314a4:	moveq	r3, #34	; 0x22
   314a8:	beq	31440 <__assert_fail@plt+0x1ed54>
   314ac:	b	312fc <__assert_fail@plt+0x1ec10>
   314b0:	tst	r5, #524288	; 0x80000
   314b4:	moveq	r3, #12
   314b8:	strbeq	r3, [r4, #4]
   314bc:	moveq	r3, #64	; 0x40
   314c0:	beq	3138c <__assert_fail@plt+0x1eca0>
   314c4:	b	312fc <__assert_fail@plt+0x1ec10>
   314c8:	tst	r5, #524288	; 0x80000
   314cc:	bne	312fc <__assert_fail@plt+0x1ec10>
   314d0:	mov	r3, #12
   314d4:	strb	r3, [r4, #4]
   314d8:	mov	r3, #128	; 0x80
   314dc:	b	3138c <__assert_fail@plt+0x1eca0>
   314e0:	tst	r5, #8192	; 0x2000
   314e4:	moveq	r3, #8
   314e8:	beq	31440 <__assert_fail@plt+0x1ed54>
   314ec:	b	312fc <__assert_fail@plt+0x1ec10>
   314f0:	tst	r5, #8192	; 0x2000
   314f4:	moveq	r3, #9
   314f8:	beq	31440 <__assert_fail@plt+0x1ed54>
   314fc:	b	312fc <__assert_fail@plt+0x1ec10>
   31500:	ldr	r0, [pc, #684]	; 317b4 <__assert_fail@plt+0x1f0c8>
   31504:	and	r0, r0, r5
   31508:	cmp	r0, #2
   3150c:	bne	312fc <__assert_fail@plt+0x1ec10>
   31510:	mov	r3, #19
   31514:	b	31358 <__assert_fail@plt+0x1ec6c>
   31518:	and	r5, r5, #4608	; 0x1200
   3151c:	cmp	r5, #512	; 0x200
   31520:	moveq	r3, #23
   31524:	bne	312fc <__assert_fail@plt+0x1ec10>
   31528:	b	31440 <__assert_fail@plt+0x1ed54>
   3152c:	cmp	r8, #42	; 0x2a
   31530:	beq	315cc <__assert_fail@plt+0x1eee0>
   31534:	bcc	31610 <__assert_fail@plt+0x1ef24>
   31538:	cmp	r8, #43	; 0x2b
   3153c:	bne	31738 <__assert_fail@plt+0x1f04c>
   31540:	ldr	r3, [pc, #620]	; 317b4 <__assert_fail@plt+0x1f0c8>
   31544:	and	r3, r3, r5
   31548:	cmp	r3, #0
   3154c:	moveq	r3, #18
   31550:	beq	31578 <__assert_fail@plt+0x1ee8c>
   31554:	b	31738 <__assert_fail@plt+0x1f04c>
   31558:	cmp	r8, #94	; 0x5e
   3155c:	beq	31628 <__assert_fail@plt+0x1ef3c>
   31560:	bhi	31580 <__assert_fail@plt+0x1ee94>
   31564:	cmp	r8, #63	; 0x3f
   31568:	beq	315d4 <__assert_fail@plt+0x1eee8>
   3156c:	cmp	r8, #91	; 0x5b
   31570:	moveq	r3, #20
   31574:	bne	31738 <__assert_fail@plt+0x1f04c>
   31578:	strb	r3, [r4, #4]
   3157c:	b	31738 <__assert_fail@plt+0x1f04c>
   31580:	cmp	r8, #124	; 0x7c
   31584:	beq	315bc <__assert_fail@plt+0x1eed0>
   31588:	cmp	r8, #125	; 0x7d
   3158c:	beq	315ec <__assert_fail@plt+0x1ef00>
   31590:	cmp	r8, #123	; 0x7b
   31594:	bne	31738 <__assert_fail@plt+0x1f04c>
   31598:	and	r5, r5, #4608	; 0x1200
   3159c:	cmp	r5, #4608	; 0x1200
   315a0:	moveq	r3, #23
   315a4:	bne	31738 <__assert_fail@plt+0x1f04c>
   315a8:	b	31578 <__assert_fail@plt+0x1ee8c>
   315ac:	tst	r5, #2048	; 0x800
   315b0:	beq	31738 <__assert_fail@plt+0x1f04c>
   315b4:	mov	r3, #10
   315b8:	b	31578 <__assert_fail@plt+0x1ee8c>
   315bc:	and	r5, r5, #33792	; 0x8400
   315c0:	cmp	r5, #32768	; 0x8000
   315c4:	bne	31738 <__assert_fail@plt+0x1f04c>
   315c8:	b	315b4 <__assert_fail@plt+0x1eec8>
   315cc:	mov	r3, #11
   315d0:	b	31578 <__assert_fail@plt+0x1ee8c>
   315d4:	ldr	r3, [pc, #472]	; 317b4 <__assert_fail@plt+0x1f0c8>
   315d8:	and	r3, r3, r5
   315dc:	cmp	r3, #0
   315e0:	moveq	r3, #19
   315e4:	beq	31578 <__assert_fail@plt+0x1ee8c>
   315e8:	b	31738 <__assert_fail@plt+0x1f04c>
   315ec:	and	r5, r5, #4608	; 0x1200
   315f0:	cmp	r5, #4608	; 0x1200
   315f4:	moveq	r3, #24
   315f8:	bne	31738 <__assert_fail@plt+0x1f04c>
   315fc:	b	31578 <__assert_fail@plt+0x1ee8c>
   31600:	tst	r5, #8192	; 0x2000
   31604:	movne	r3, #8
   31608:	bne	31578 <__assert_fail@plt+0x1ee8c>
   3160c:	b	31738 <__assert_fail@plt+0x1f04c>
   31610:	tst	r5, #8192	; 0x2000
   31614:	movne	r3, #9
   31618:	bne	31578 <__assert_fail@plt+0x1ee8c>
   3161c:	b	31738 <__assert_fail@plt+0x1f04c>
   31620:	mov	r3, #5
   31624:	b	31578 <__assert_fail@plt+0x1ee8c>
   31628:	ldr	r3, [pc, #392]	; 317b8 <__assert_fail@plt+0x1f0cc>
   3162c:	cmp	r6, #0
   31630:	and	r3, r3, r5
   31634:	clz	r3, r3
   31638:	lsr	r3, r3, #5
   3163c:	moveq	r3, #0
   31640:	cmp	r3, #0
   31644:	beq	31668 <__assert_fail@plt+0x1ef7c>
   31648:	add	r6, r9, r6
   3164c:	lsr	r5, r5, #11
   31650:	ldrb	r2, [r6, #-1]
   31654:	eor	r5, r5, #1
   31658:	cmp	r2, #10
   3165c:	orrne	r5, r5, #1
   31660:	tst	r5, #1
   31664:	bne	31738 <__assert_fail@plt+0x1f04c>
   31668:	mov	r3, #12
   3166c:	strb	r3, [r4, #4]
   31670:	mov	r3, #16
   31674:	str	r3, [r4]
   31678:	b	31738 <__assert_fail@plt+0x1f04c>
   3167c:	tst	r5, #8
   31680:	bne	316c4 <__assert_fail@plt+0x1efd8>
   31684:	ldr	r3, [r7, #48]	; 0x30
   31688:	add	r6, r6, #1
   3168c:	cmp	r6, r3
   31690:	beq	316c4 <__assert_fail@plt+0x1efd8>
   31694:	str	r6, [r7, #40]	; 0x28
   31698:	mov	r2, r5
   3169c:	mov	r1, r7
   316a0:	mov	r0, sp
   316a4:	bl	31190 <__assert_fail@plt+0x1eaa4>
   316a8:	ldr	r3, [r7, #40]	; 0x28
   316ac:	sub	r3, r3, #1
   316b0:	str	r3, [r7, #40]	; 0x28
   316b4:	ldrb	r3, [sp, #4]
   316b8:	sub	r3, r3, #9
   316bc:	cmp	r3, #1
   316c0:	bhi	31738 <__assert_fail@plt+0x1f04c>
   316c4:	mov	r3, #12
   316c8:	strb	r3, [r4, #4]
   316cc:	mov	r3, #32
   316d0:	b	31674 <__assert_fail@plt+0x1ef88>
   316d4:	mov	r3, #1
   316d8:	strb	r3, [r4, #4]
   316dc:	mov	r1, r6
   316e0:	mov	r0, r7
   316e4:	bl	2ca84 <__assert_fail@plt+0x1a398>
   316e8:	mov	sl, r0
   316ec:	bl	12410 <iswalnum@plt>
   316f0:	adds	r3, r0, #0
   316f4:	ldrb	r0, [r4, #6]
   316f8:	movne	r3, #1
   316fc:	cmp	sl, #95	; 0x5f
   31700:	orreq	r3, r3, #1
   31704:	bic	r0, r0, #64	; 0x40
   31708:	orr	r0, r0, r3, lsl #6
   3170c:	strb	r0, [r4, #6]
   31710:	cmp	r8, #46	; 0x2e
   31714:	beq	31620 <__assert_fail@plt+0x1ef34>
   31718:	bhi	31558 <__assert_fail@plt+0x1ee6c>
   3171c:	cmp	r8, #40	; 0x28
   31720:	beq	31600 <__assert_fail@plt+0x1ef14>
   31724:	bhi	3152c <__assert_fail@plt+0x1ee40>
   31728:	cmp	r8, #10
   3172c:	beq	315ac <__assert_fail@plt+0x1eec0>
   31730:	cmp	r8, #36	; 0x24
   31734:	beq	3167c <__assert_fail@plt+0x1ef90>
   31738:	mov	r0, #1
   3173c:	b	31210 <__assert_fail@plt+0x1eb24>
   31740:	cmp	r8, #92	; 0x5c
   31744:	bne	316d4 <__assert_fail@plt+0x1efe8>
   31748:	ldr	r3, [r7, #48]	; 0x30
   3174c:	add	r1, r6, #1
   31750:	cmp	r1, r3
   31754:	movge	r3, #36	; 0x24
   31758:	bge	31578 <__assert_fail@plt+0x1ee8c>
   3175c:	ldrb	r3, [r7, #75]	; 0x4b
   31760:	cmp	r3, #0
   31764:	bne	31218 <__assert_fail@plt+0x1eb2c>
   31768:	ldrb	r6, [r9, r1]
   3176c:	b	31288 <__assert_fail@plt+0x1eb9c>
   31770:	cmp	r8, #92	; 0x5c
   31774:	beq	31748 <__assert_fail@plt+0x1f05c>
   31778:	mov	r3, #1
   3177c:	strb	r3, [r4, #4]
   31780:	bl	12374 <__ctype_b_loc@plt>
   31784:	lsl	r3, r8, #1
   31788:	ldr	r2, [r0]
   3178c:	ldrh	r3, [r2, r3]
   31790:	ldrb	r2, [r4, #6]
   31794:	lsr	r3, r3, #3
   31798:	and	r3, r3, #1
   3179c:	cmp	r8, #95	; 0x5f
   317a0:	orreq	r3, r3, #1
   317a4:	bic	r2, r2, #64	; 0x40
   317a8:	orr	r3, r2, r3, lsl #6
   317ac:	strb	r3, [r4, #6]
   317b0:	b	31710 <__assert_fail@plt+0x1f024>
   317b4:	andeq	r0, r0, r2, lsl #8
   317b8:	addeq	r0, r0, r8
   317bc:	push	{r4, lr}
   317c0:	mov	r4, r1
   317c4:	bl	31190 <__assert_fail@plt+0x1eaa4>
   317c8:	ldr	r3, [r4, #40]	; 0x28
   317cc:	add	r0, r3, r0
   317d0:	str	r0, [r4, #40]	; 0x28
   317d4:	pop	{r4, pc}
   317d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   317dc:	mov	r6, r0
   317e0:	ldr	r9, [pc, #156]	; 31884 <__assert_fail@plt+0x1f198>
   317e4:	mov	r5, r1
   317e8:	mov	r7, r2
   317ec:	mvn	r4, #0
   317f0:	mov	r8, #10
   317f4:	mov	sl, #32768	; 0x8000
   317f8:	mov	r2, r7
   317fc:	mov	r1, r6
   31800:	mov	r0, r5
   31804:	bl	317bc <__assert_fail@plt+0x1f0d0>
   31808:	ldrb	r2, [r5, #4]
   3180c:	ldrb	r3, [r5]
   31810:	cmp	r2, #2
   31814:	beq	31878 <__assert_fail@plt+0x1f18c>
   31818:	cmp	r3, #44	; 0x2c
   3181c:	cmpne	r2, #24
   31820:	beq	3187c <__assert_fail@plt+0x1f190>
   31824:	cmp	r2, #1
   31828:	bne	31870 <__assert_fail@plt+0x1f184>
   3182c:	sub	r1, r3, #48	; 0x30
   31830:	uxtb	r2, r1
   31834:	cmp	r2, #9
   31838:	movhi	r2, #0
   3183c:	movls	r2, #1
   31840:	cmn	r4, #2
   31844:	moveq	r2, #0
   31848:	cmp	r2, #0
   3184c:	beq	31870 <__assert_fail@plt+0x1f184>
   31850:	cmn	r4, #1
   31854:	moveq	r4, r1
   31858:	beq	317f8 <__assert_fail@plt+0x1f10c>
   3185c:	mla	r4, r8, r4, r3
   31860:	cmp	r4, r9
   31864:	suble	r4, r4, #48	; 0x30
   31868:	movgt	r4, sl
   3186c:	b	317f8 <__assert_fail@plt+0x1f10c>
   31870:	mvn	r4, #1
   31874:	b	317f8 <__assert_fail@plt+0x1f10c>
   31878:	mvn	r4, #1
   3187c:	mov	r0, r4
   31880:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   31884:	andeq	r8, r0, r0, lsr r0
   31888:	push	{r4, r5, r6, lr}
   3188c:	mov	r4, r0
   31890:	ldr	r0, [r0, #8]
   31894:	add	r5, r4, #12
   31898:	cmp	r0, r5
   3189c:	beq	318a4 <__assert_fail@plt+0x1f1b8>
   318a0:	bl	2a01c <__assert_fail@plt+0x17930>
   318a4:	mov	r2, #0
   318a8:	mov	r3, #16
   318ac:	str	r5, [r4, #8]
   318b0:	stm	r4, {r2, r3}
   318b4:	pop	{r4, r5, r6, pc}
   318b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   318bc:	sub	sp, sp, #14400	; 0x3840
   318c0:	mov	sl, #0
   318c4:	sub	sp, sp, #4
   318c8:	mov	r9, r0
   318cc:	str	sl, [r1, #44]	; 0x2c
   318d0:	str	sl, [r1, #48]	; 0x30
   318d4:	add	r0, sp, #64	; 0x40
   318d8:	mov	r8, r1
   318dc:	bl	2d1f8 <__assert_fail@plt+0x1ab0c>
   318e0:	mov	fp, sl
   318e4:	ldr	r3, [r8, #8]
   318e8:	cmp	fp, r3
   318ec:	blt	31920 <__assert_fail@plt+0x1f234>
   318f0:	cmp	sl, #0
   318f4:	bgt	31d50 <__assert_fail@plt+0x1f664>
   318f8:	bne	31d30 <__assert_fail@plt+0x1f644>
   318fc:	mov	r1, #256	; 0x100
   31900:	mov	r0, #4
   31904:	bl	29b08 <__assert_fail@plt+0x1741c>
   31908:	str	r0, [r8, #44]	; 0x2c
   3190c:	adds	r0, r0, #0
   31910:	movne	r0, #1
   31914:	add	sp, sp, #14400	; 0x3840
   31918:	add	sp, sp, #4
   3191c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31920:	lsl	r3, fp, #2
   31924:	str	r3, [sp, #12]
   31928:	ldr	r3, [r8, #12]
   3192c:	ldr	r1, [pc, #1908]	; 320a8 <__assert_fail@plt+0x1f9bc>
   31930:	ldr	r2, [r3, fp, lsl #2]
   31934:	ldr	r3, [r9]
   31938:	add	r7, r3, r2, lsl #3
   3193c:	ldrb	r4, [r7, #4]
   31940:	ldr	r5, [r7, #4]
   31944:	cmp	r4, #1
   31948:	and	r5, r1, r5, lsr #8
   3194c:	bne	319d0 <__assert_fail@plt+0x1f2e4>
   31950:	ldrb	r1, [r3, r2, lsl #3]
   31954:	add	r0, sp, #64	; 0x40
   31958:	bl	2c958 <__assert_fail@plt+0x1a26c>
   3195c:	cmp	r5, #0
   31960:	bne	31a54 <__assert_fail@plt+0x1f368>
   31964:	add	r6, sp, #6208	; 0x1840
   31968:	mov	r5, #0
   3196c:	add	r3, sp, #3136	; 0xc40
   31970:	str	r3, [sp, #4]
   31974:	cmp	r5, sl
   31978:	blt	31be0 <__assert_fail@plt+0x1f4f4>
   3197c:	cmp	r5, sl
   31980:	bne	31b28 <__assert_fail@plt+0x1f43c>
   31984:	add	lr, sp, #64	; 0x40
   31988:	add	r3, sp, #14400	; 0x3840
   3198c:	add	ip, r3, sl, lsl #5
   31990:	ldm	lr!, {r0, r1, r2, r3}
   31994:	sub	ip, ip, #8192	; 0x2000
   31998:	stmia	ip!, {r0, r1, r2, r3}
   3199c:	ldm	lr, {r0, r1, r2, r3}
   319a0:	stm	ip, {r0, r1, r2, r3}
   319a4:	mov	r0, #12
   319a8:	ldr	r3, [r8, #12]
   319ac:	ldr	r2, [sp, #12]
   319b0:	ldr	r1, [r3, r2]
   319b4:	add	r3, sp, #3136	; 0xc40
   319b8:	mla	r0, r0, sl, r3
   319bc:	bl	2d50c <__assert_fail@plt+0x1ae20>
   319c0:	cmp	r0, #0
   319c4:	bne	31d20 <__assert_fail@plt+0x1f634>
   319c8:	add	sl, sl, #1
   319cc:	b	31a88 <__assert_fail@plt+0x1f39c>
   319d0:	cmp	r4, #3
   319d4:	bne	319e8 <__assert_fail@plt+0x1f2fc>
   319d8:	ldr	r1, [r3, r2, lsl #3]
   319dc:	add	r0, sp, #64	; 0x40
   319e0:	bl	2c9dc <__assert_fail@plt+0x1a2f0>
   319e4:	b	3195c <__assert_fail@plt+0x1f270>
   319e8:	cmp	r4, #5
   319ec:	bne	31a44 <__assert_fail@plt+0x1f358>
   319f0:	ldr	r3, [r9, #92]	; 0x5c
   319f4:	cmp	r3, #1
   319f8:	ble	31a30 <__assert_fail@plt+0x1f344>
   319fc:	ldr	r1, [r9, #60]	; 0x3c
   31a00:	add	r0, sp, #64	; 0x40
   31a04:	bl	2c9dc <__assert_fail@plt+0x1a2f0>
   31a08:	ldr	r2, [r9, #128]	; 0x80
   31a0c:	tst	r2, #64	; 0x40
   31a10:	ldreq	r3, [sp, #64]	; 0x40
   31a14:	biceq	r3, r3, #1024	; 0x400
   31a18:	streq	r3, [sp, #64]	; 0x40
   31a1c:	tst	r2, #128	; 0x80
   31a20:	ldrne	r3, [sp, #64]	; 0x40
   31a24:	bicne	r3, r3, #1
   31a28:	strne	r3, [sp, #64]	; 0x40
   31a2c:	b	3195c <__assert_fail@plt+0x1f270>
   31a30:	mov	r2, #32
   31a34:	mvn	r1, #0
   31a38:	add	r0, sp, #64	; 0x40
   31a3c:	bl	12434 <memset@plt>
   31a40:	b	31a08 <__assert_fail@plt+0x1f31c>
   31a44:	cmp	r4, #7
   31a48:	bne	31b28 <__assert_fail@plt+0x1f43c>
   31a4c:	mov	r2, #16
   31a50:	b	31a34 <__assert_fail@plt+0x1f348>
   31a54:	tst	r5, #32
   31a58:	beq	31a80 <__assert_fail@plt+0x1f394>
   31a5c:	ldr	r6, [sp, #64]	; 0x40
   31a60:	add	r0, sp, #64	; 0x40
   31a64:	and	r6, r6, #1024	; 0x400
   31a68:	bl	2d1f8 <__assert_fail@plt+0x1ab0c>
   31a6c:	cmp	r6, #0
   31a70:	beq	31b28 <__assert_fail@plt+0x1f43c>
   31a74:	ldr	r3, [sp, #64]	; 0x40
   31a78:	orr	r3, r3, #1024	; 0x400
   31a7c:	str	r3, [sp, #64]	; 0x40
   31a80:	tst	r5, #128	; 0x80
   31a84:	beq	31a90 <__assert_fail@plt+0x1f3a4>
   31a88:	add	r0, sp, #64	; 0x40
   31a8c:	b	31ab8 <__assert_fail@plt+0x1f3cc>
   31a90:	tst	r5, #4
   31a94:	bne	31ac0 <__assert_fail@plt+0x1f3d4>
   31a98:	tst	r5, #8
   31a9c:	beq	31964 <__assert_fail@plt+0x1f278>
   31aa0:	cmp	r4, #1
   31aa4:	add	r0, sp, #64	; 0x40
   31aa8:	bne	31b60 <__assert_fail@plt+0x1f474>
   31aac:	ldrb	r3, [r7, #6]
   31ab0:	tst	r3, #64	; 0x40
   31ab4:	beq	31b60 <__assert_fail@plt+0x1f474>
   31ab8:	bl	2d1f8 <__assert_fail@plt+0x1ab0c>
   31abc:	b	31b28 <__assert_fail@plt+0x1f43c>
   31ac0:	cmp	r4, #1
   31ac4:	bne	31ad4 <__assert_fail@plt+0x1f3e8>
   31ac8:	ldrb	r3, [r7, #6]
   31acc:	tst	r3, #64	; 0x40
   31ad0:	beq	31a88 <__assert_fail@plt+0x1f39c>
   31ad4:	ldr	r3, [r9, #92]	; 0x5c
   31ad8:	add	r2, r9, #96	; 0x60
   31adc:	cmp	r3, #1
   31ae0:	ble	31b30 <__assert_fail@plt+0x1f444>
   31ae4:	mov	r3, #0
   31ae8:	ldr	lr, [r9, #60]	; 0x3c
   31aec:	mov	r0, r3
   31af0:	add	ip, sp, #64	; 0x40
   31af4:	ldr	r1, [lr, r0, lsl #2]
   31af8:	ldr	r6, [r2], #4
   31afc:	mvn	r1, r1
   31b00:	orr	r1, r1, r6
   31b04:	ldr	r6, [ip, r0, lsl #2]
   31b08:	and	r1, r1, r6
   31b0c:	str	r1, [ip, r0, lsl #2]
   31b10:	add	r0, r0, #1
   31b14:	cmp	r0, #8
   31b18:	orr	r3, r3, r1
   31b1c:	bne	31af4 <__assert_fail@plt+0x1f408>
   31b20:	cmp	r3, #0
   31b24:	bne	31a98 <__assert_fail@plt+0x1f3ac>
   31b28:	add	fp, fp, #1
   31b2c:	b	318e4 <__assert_fail@plt+0x1f1f8>
   31b30:	mov	r3, #0
   31b34:	mov	r1, r3
   31b38:	add	ip, sp, #64	; 0x40
   31b3c:	ldr	lr, [ip, r1, lsl #2]
   31b40:	ldr	r0, [r2], #4
   31b44:	and	r0, r0, lr
   31b48:	str	r0, [ip, r1, lsl #2]
   31b4c:	add	r1, r1, #1
   31b50:	cmp	r1, #8
   31b54:	orr	r3, r3, r0
   31b58:	bne	31b3c <__assert_fail@plt+0x1f450>
   31b5c:	b	31b20 <__assert_fail@plt+0x1f434>
   31b60:	ldr	r3, [r9, #92]	; 0x5c
   31b64:	add	r2, r9, #96	; 0x60
   31b68:	cmp	r3, #1
   31b6c:	ble	31bb4 <__assert_fail@plt+0x1f4c8>
   31b70:	mov	r3, #0
   31b74:	ldr	r5, [r9, #60]	; 0x3c
   31b78:	mov	r1, r3
   31b7c:	add	lr, sp, #64	; 0x40
   31b80:	ldr	ip, [r5, r1, lsl #2]
   31b84:	ldr	r0, [r2], #4
   31b88:	and	ip, ip, r0
   31b8c:	ldr	r0, [lr, r1, lsl #2]
   31b90:	bic	r0, r0, ip
   31b94:	str	r0, [lr, r1, lsl #2]
   31b98:	add	r1, r1, #1
   31b9c:	cmp	r1, #8
   31ba0:	orr	r3, r3, r0
   31ba4:	bne	31b80 <__assert_fail@plt+0x1f494>
   31ba8:	cmp	r3, #0
   31bac:	beq	31b28 <__assert_fail@plt+0x1f43c>
   31bb0:	b	31964 <__assert_fail@plt+0x1f278>
   31bb4:	mov	r3, #0
   31bb8:	mov	r1, r3
   31bbc:	ldr	ip, [r0, r1, lsl #2]
   31bc0:	ldr	lr, [r2], #4
   31bc4:	bic	ip, ip, lr
   31bc8:	str	ip, [r0, r1, lsl #2]
   31bcc:	add	r1, r1, #1
   31bd0:	cmp	r1, #8
   31bd4:	orr	r3, r3, ip
   31bd8:	bne	31bbc <__assert_fail@plt+0x1f4d0>
   31bdc:	b	31ba8 <__assert_fail@plt+0x1f4bc>
   31be0:	cmp	r4, #1
   31be4:	bne	31bfc <__assert_fail@plt+0x1f510>
   31be8:	ldrb	r1, [r7]
   31bec:	mov	r0, r6
   31bf0:	bl	2c98c <__assert_fail@plt+0x1a2a0>
   31bf4:	cmp	r0, #0
   31bf8:	beq	31d08 <__assert_fail@plt+0x1f61c>
   31bfc:	mov	r2, #0
   31c00:	mov	r3, r2
   31c04:	add	r1, sp, #64	; 0x40
   31c08:	ldr	r0, [r6, r3, lsl #2]
   31c0c:	ldr	r1, [r1, r3, lsl #2]
   31c10:	and	r1, r1, r0
   31c14:	add	r0, sp, #1088	; 0x440
   31c18:	orr	r2, r2, r1
   31c1c:	str	r1, [r0, r3, lsl #2]
   31c20:	add	r3, r3, #1
   31c24:	cmp	r3, #8
   31c28:	bne	31c04 <__assert_fail@plt+0x1f518>
   31c2c:	cmp	r2, #0
   31c30:	beq	31d08 <__assert_fail@plt+0x1f61c>
   31c34:	mov	r3, #0
   31c38:	mov	r1, r3
   31c3c:	str	r3, [sp, #8]
   31c40:	add	r2, sp, #64	; 0x40
   31c44:	ldr	r0, [r6, r3, lsl #2]
   31c48:	ldr	r2, [r2, r3, lsl #2]
   31c4c:	add	lr, sp, #2112	; 0x840
   31c50:	bic	ip, r0, r2
   31c54:	bic	r2, r2, r0
   31c58:	add	r0, sp, #64	; 0x40
   31c5c:	str	ip, [lr, r3, lsl #2]
   31c60:	str	r2, [r0, r3, lsl #2]
   31c64:	ldr	r0, [sp, #8]
   31c68:	add	r3, r3, #1
   31c6c:	orr	r2, r0, r2
   31c70:	cmp	r3, #8
   31c74:	orr	r1, r1, ip
   31c78:	str	r2, [sp, #8]
   31c7c:	bne	31c40 <__assert_fail@plt+0x1f554>
   31c80:	cmp	r1, #0
   31c84:	beq	31ce0 <__assert_fail@plt+0x1f5f4>
   31c88:	add	r3, sp, #14400	; 0x3840
   31c8c:	add	ip, r3, sl, lsl #5
   31c90:	ldm	lr!, {r0, r1, r2, r3}
   31c94:	sub	ip, ip, #8192	; 0x2000
   31c98:	stmia	ip!, {r0, r1, r2, r3}
   31c9c:	ldm	lr, {r0, r1, r2, r3}
   31ca0:	add	lr, sp, #1088	; 0x440
   31ca4:	stm	ip, {r0, r1, r2, r3}
   31ca8:	add	r3, sp, #6208	; 0x1840
   31cac:	add	ip, r3, r5, lsl #5
   31cb0:	ldm	lr!, {r0, r1, r2, r3}
   31cb4:	stmia	ip!, {r0, r1, r2, r3}
   31cb8:	ldm	lr, {r0, r1, r2, r3}
   31cbc:	stm	ip, {r0, r1, r2, r3}
   31cc0:	mov	r0, #12
   31cc4:	add	r3, sp, #3136	; 0xc40
   31cc8:	ldr	r1, [sp, #4]
   31ccc:	mla	r0, r0, sl, r3
   31cd0:	bl	2f740 <__assert_fail@plt+0x1d054>
   31cd4:	cmp	r0, #0
   31cd8:	bne	31d20 <__assert_fail@plt+0x1f634>
   31cdc:	add	sl, sl, #1
   31ce0:	ldr	r3, [r8, #12]
   31ce4:	ldr	r2, [sp, #12]
   31ce8:	ldr	r0, [sp, #4]
   31cec:	ldr	r1, [r3, r2]
   31cf0:	bl	2ff28 <__assert_fail@plt+0x1d83c>
   31cf4:	cmp	r0, #0
   31cf8:	beq	31d20 <__assert_fail@plt+0x1f634>
   31cfc:	ldr	r3, [sp, #8]
   31d00:	cmp	r3, #0
   31d04:	beq	3197c <__assert_fail@plt+0x1f290>
   31d08:	ldr	r3, [sp, #4]
   31d0c:	add	r5, r5, #1
   31d10:	add	r3, r3, #12
   31d14:	add	r6, r6, #32
   31d18:	str	r3, [sp, #4]
   31d1c:	b	31974 <__assert_fail@plt+0x1f288>
   31d20:	mov	r4, #0
   31d24:	mov	r5, #12
   31d28:	cmp	r4, sl
   31d2c:	blt	31d38 <__assert_fail@plt+0x1f64c>
   31d30:	mov	r0, #0
   31d34:	b	31914 <__assert_fail@plt+0x1f228>
   31d38:	add	r3, sp, #3136	; 0xc40
   31d3c:	mla	r3, r5, r4, r3
   31d40:	add	r4, r4, #1
   31d44:	ldr	r0, [r3, #8]
   31d48:	bl	2a01c <__assert_fail@plt+0x17930>
   31d4c:	b	31d28 <__assert_fail@plt+0x1f63c>
   31d50:	add	r1, sl, #1
   31d54:	add	r0, sp, #20
   31d58:	bl	2d54c <__assert_fail@plt+0x1ae60>
   31d5c:	add	r4, sp, #2112	; 0x840
   31d60:	cmp	r0, #0
   31d64:	mov	r5, r0
   31d68:	str	r0, [r4, #-2096]	; 0xfffff7d0
   31d6c:	beq	31da0 <__assert_fail@plt+0x1f6b4>
   31d70:	ldr	r0, [r4, #-2084]	; 0xfffff7dc
   31d74:	bl	2a01c <__assert_fail@plt+0x17930>
   31d78:	mov	r4, #0
   31d7c:	mov	r5, #12
   31d80:	add	r3, sp, #3136	; 0xc40
   31d84:	mla	r3, r5, r4, r3
   31d88:	add	r4, r4, #1
   31d8c:	ldr	r0, [r3, #8]
   31d90:	bl	2a01c <__assert_fail@plt+0x17930>
   31d94:	cmp	r4, sl
   31d98:	bne	31d80 <__assert_fail@plt+0x1f694>
   31d9c:	b	31d30 <__assert_fail@plt+0x1f644>
   31da0:	add	r0, sp, #32
   31da4:	mov	r6, r5
   31da8:	bl	2d1f8 <__assert_fail@plt+0x1ab0c>
   31dac:	add	r3, sp, #16
   31db0:	str	r3, [sp, #4]
   31db4:	mov	r3, #12
   31db8:	add	r2, sp, #3136	; 0xc40
   31dbc:	mla	fp, r3, r6, r2
   31dc0:	mov	r7, #0
   31dc4:	str	r7, [r4, #-2088]	; 0xfffff7d8
   31dc8:	ldr	r3, [fp, #4]
   31dcc:	cmp	r7, r3
   31dd0:	blt	31e5c <__assert_fail@plt+0x1f770>
   31dd4:	mov	r3, #0
   31dd8:	add	r2, sp, #20
   31ddc:	mov	r1, r9
   31de0:	ldr	r0, [sp, #4]
   31de4:	bl	2f8f0 <__assert_fail@plt+0x1d204>
   31de8:	add	r3, sp, #64	; 0x40
   31dec:	cmp	r0, #0
   31df0:	mov	r7, r0
   31df4:	str	r0, [r3, r6, lsl #2]
   31df8:	bne	31e08 <__assert_fail@plt+0x1f71c>
   31dfc:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   31e00:	cmp	r3, #0
   31e04:	bne	31d70 <__assert_fail@plt+0x1f684>
   31e08:	ldrsb	r3, [r7, #52]	; 0x34
   31e0c:	add	fp, sp, #1088	; 0x440
   31e10:	cmp	r3, #0
   31e14:	strge	r7, [fp, r6, lsl #2]
   31e18:	strge	r7, [r4, r6, lsl #2]
   31e1c:	bge	31ed4 <__assert_fail@plt+0x1f7e8>
   31e20:	mov	r3, #1
   31e24:	add	r2, sp, #20
   31e28:	mov	r1, r9
   31e2c:	ldr	r0, [sp, #4]
   31e30:	bl	2f8f0 <__assert_fail@plt+0x1d204>
   31e34:	cmp	r0, #0
   31e38:	str	r0, [fp, r6, lsl #2]
   31e3c:	bne	31ea0 <__assert_fail@plt+0x1f7b4>
   31e40:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   31e44:	cmp	r3, #0
   31e48:	bne	31d70 <__assert_fail@plt+0x1f684>
   31e4c:	ldr	r3, [r9, #92]	; 0x5c
   31e50:	cmp	r3, #1
   31e54:	movgt	r5, #1
   31e58:	b	31ea8 <__assert_fail@plt+0x1f7bc>
   31e5c:	ldr	r3, [fp, #8]
   31e60:	ldr	r2, [r3, r7, lsl #2]
   31e64:	ldr	r3, [r9, #12]
   31e68:	ldr	r3, [r3, r2, lsl #2]
   31e6c:	cmn	r3, #1
   31e70:	bne	31e7c <__assert_fail@plt+0x1f790>
   31e74:	add	r7, r7, #1
   31e78:	b	31dc8 <__assert_fail@plt+0x1f6dc>
   31e7c:	ldr	r1, [r9, #24]
   31e80:	mov	r2, #12
   31e84:	add	r0, sp, #20
   31e88:	mla	r1, r2, r3, r1
   31e8c:	bl	30330 <__assert_fail@plt+0x1dc44>
   31e90:	cmp	r0, #0
   31e94:	str	r0, [r4, #-2096]	; 0xfffff7d0
   31e98:	beq	31e74 <__assert_fail@plt+0x1f788>
   31e9c:	b	31d70 <__assert_fail@plt+0x1f684>
   31ea0:	cmp	r7, r0
   31ea4:	bne	31e4c <__assert_fail@plt+0x1f760>
   31ea8:	mov	r3, #2
   31eac:	add	r2, sp, #20
   31eb0:	mov	r1, r9
   31eb4:	ldr	r0, [sp, #4]
   31eb8:	bl	2f8f0 <__assert_fail@plt+0x1d204>
   31ebc:	cmp	r0, #0
   31ec0:	str	r0, [r4, r6, lsl #2]
   31ec4:	bne	31ed4 <__assert_fail@plt+0x1f7e8>
   31ec8:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   31ecc:	cmp	r3, #0
   31ed0:	bne	31d70 <__assert_fail@plt+0x1f684>
   31ed4:	add	r3, sp, #6208	; 0x1840
   31ed8:	add	r1, r3, r6, lsl #5
   31edc:	add	r0, sp, #32
   31ee0:	add	r6, r6, #1
   31ee4:	bl	2c9dc <__assert_fail@plt+0x1a2f0>
   31ee8:	cmp	r6, sl
   31eec:	bne	31db4 <__assert_fail@plt+0x1f6c8>
   31ef0:	cmp	r5, #0
   31ef4:	bne	32008 <__assert_fail@plt+0x1f91c>
   31ef8:	mov	r1, #256	; 0x100
   31efc:	mov	r0, #4
   31f00:	bl	29b08 <__assert_fail@plt+0x1741c>
   31f04:	cmp	r0, #0
   31f08:	str	r0, [r8, #44]	; 0x2c
   31f0c:	beq	31d70 <__assert_fail@plt+0x1f684>
   31f10:	add	r6, r9, #96	; 0x60
   31f14:	mov	r2, r5
   31f18:	add	r3, sp, #32
   31f1c:	add	lr, r0, r2, lsl #5
   31f20:	ldr	r1, [r3, r2]
   31f24:	add	r3, sp, #6208	; 0x1840
   31f28:	mov	ip, #1
   31f2c:	add	r7, r3, r2
   31f30:	cmp	r1, #0
   31f34:	bne	31fbc <__assert_fail@plt+0x1f8d0>
   31f38:	add	r2, r2, #4
   31f3c:	cmp	r2, #32
   31f40:	add	r6, r6, #4
   31f44:	bne	31f18 <__assert_fail@plt+0x1f82c>
   31f48:	ldr	r3, [r4, #-2080]	; 0xfffff7e0
   31f4c:	mov	r6, r0
   31f50:	tst	r3, #1024	; 0x400
   31f54:	beq	31f88 <__assert_fail@plt+0x1f89c>
   31f58:	mov	r7, #0
   31f5c:	mov	r8, #10
   31f60:	add	r3, sp, #6208	; 0x1840
   31f64:	mov	r1, r8
   31f68:	add	r0, r3, r7, lsl #5
   31f6c:	bl	2c98c <__assert_fail@plt+0x1a2a0>
   31f70:	cmp	r0, #0
   31f74:	beq	32098 <__assert_fail@plt+0x1f9ac>
   31f78:	ldr	r3, [r4, r7, lsl #2]
   31f7c:	cmp	r5, #0
   31f80:	str	r3, [r6, #40]	; 0x28
   31f84:	strne	r3, [r6, #1064]	; 0x428
   31f88:	ldr	r0, [r4, #-2084]	; 0xfffff7dc
   31f8c:	bl	2a01c <__assert_fail@plt+0x17930>
   31f90:	mov	r4, #0
   31f94:	mov	r5, #12
   31f98:	add	r3, sp, #3136	; 0xc40
   31f9c:	mla	r3, r5, r4, r3
   31fa0:	add	r4, r4, #1
   31fa4:	ldr	r0, [r3, #8]
   31fa8:	bl	2a01c <__assert_fail@plt+0x17930>
   31fac:	cmp	r4, sl
   31fb0:	bne	31f98 <__assert_fail@plt+0x1f8ac>
   31fb4:	mov	r0, #1
   31fb8:	b	31914 <__assert_fail@plt+0x1f228>
   31fbc:	tst	r1, #1
   31fc0:	movne	r3, #0
   31fc4:	bne	31fdc <__assert_fail@plt+0x1f8f0>
   31fc8:	lsl	ip, ip, #1
   31fcc:	lsr	r1, r1, #1
   31fd0:	add	lr, lr, #4
   31fd4:	b	31f30 <__assert_fail@plt+0x1f844>
   31fd8:	add	r3, r3, #1
   31fdc:	ldr	r9, [r7, r3, lsl #5]
   31fe0:	tst	ip, r9
   31fe4:	beq	31fd8 <__assert_fail@plt+0x1f8ec>
   31fe8:	ldr	r9, [r6]
   31fec:	lsl	r3, r3, #2
   31ff0:	add	r3, r4, r3
   31ff4:	tst	ip, r9
   31ff8:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   31ffc:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   32000:	str	r3, [lr]
   32004:	b	31fc8 <__assert_fail@plt+0x1f8dc>
   32008:	mov	r1, #512	; 0x200
   3200c:	mov	r0, #4
   32010:	bl	29b08 <__assert_fail@plt+0x1741c>
   32014:	cmp	r0, #0
   32018:	str	r0, [r8, #48]	; 0x30
   3201c:	beq	31d70 <__assert_fail@plt+0x1f684>
   32020:	mov	r2, #0
   32024:	add	r3, sp, #32
   32028:	add	ip, r0, r2, lsl #5
   3202c:	ldr	r1, [r3, r2]
   32030:	add	r3, sp, #6208	; 0x1840
   32034:	mov	lr, #1
   32038:	add	r6, r3, r2
   3203c:	cmp	r1, #0
   32040:	bne	32054 <__assert_fail@plt+0x1f968>
   32044:	add	r2, r2, #4
   32048:	cmp	r2, #32
   3204c:	bne	32024 <__assert_fail@plt+0x1f938>
   32050:	b	31f48 <__assert_fail@plt+0x1f85c>
   32054:	tst	r1, #1
   32058:	movne	r3, #0
   3205c:	bne	32074 <__assert_fail@plt+0x1f988>
   32060:	lsl	lr, lr, #1
   32064:	lsr	r1, r1, #1
   32068:	add	ip, ip, #4
   3206c:	b	3203c <__assert_fail@plt+0x1f950>
   32070:	add	r3, r3, #1
   32074:	ldr	r7, [r6, r3, lsl #5]
   32078:	tst	lr, r7
   3207c:	beq	32070 <__assert_fail@plt+0x1f984>
   32080:	add	r3, r4, r3, lsl #2
   32084:	ldr	r7, [r3, #-2048]	; 0xfffff800
   32088:	str	r7, [ip]
   3208c:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   32090:	str	r3, [ip, #1024]	; 0x400
   32094:	b	32060 <__assert_fail@plt+0x1f974>
   32098:	add	r7, r7, #1
   3209c:	cmp	r7, sl
   320a0:	bne	31f60 <__assert_fail@plt+0x1f874>
   320a4:	b	31f88 <__assert_fail@plt+0x1f89c>
   320a8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   320ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   320b0:	sub	sp, sp, #28
   320b4:	add	r5, sp, #12
   320b8:	mov	r8, r0
   320bc:	mov	r4, r1
   320c0:	mov	r0, r5
   320c4:	ldr	r1, [r1, #4]
   320c8:	mov	r9, r2
   320cc:	mov	sl, r3
   320d0:	bl	2d54c <__assert_fail@plt+0x1ae60>
   320d4:	subs	r6, r0, #0
   320d8:	moveq	r7, r6
   320dc:	beq	32184 <__assert_fail@plt+0x1fa98>
   320e0:	mov	r0, r6
   320e4:	add	sp, sp, #28
   320e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   320ec:	ldr	r3, [r4, #8]
   320f0:	ldr	r1, [r8, #24]
   320f4:	ldr	r2, [r3, r7, lsl #2]
   320f8:	mov	r3, #12
   320fc:	mla	r1, r3, r2, r1
   32100:	mov	r3, #0
   32104:	ldr	lr, [r1, #4]
   32108:	cmp	r3, lr
   3210c:	blt	32130 <__assert_fail@plt+0x1fa44>
   32110:	mov	r0, r5
   32114:	bl	30330 <__assert_fail@plt+0x1dc44>
   32118:	subs	fp, r0, #0
   3211c:	beq	32180 <__assert_fail@plt+0x1fa94>
   32120:	ldr	r0, [sp, #20]
   32124:	bl	2a01c <__assert_fail@plt+0x17930>
   32128:	mov	r6, fp
   3212c:	b	320e0 <__assert_fail@plt+0x1f9f4>
   32130:	ldr	r0, [r1, #8]
   32134:	ldr	ip, [r8]
   32138:	ldr	r0, [r0, r3, lsl #2]
   3213c:	add	fp, ip, r0, lsl #3
   32140:	ldrb	fp, [fp, #4]
   32144:	cmp	sl, fp
   32148:	bne	32158 <__assert_fail@plt+0x1fa6c>
   3214c:	ldr	ip, [ip, r0, lsl #3]
   32150:	cmp	r9, ip
   32154:	beq	32160 <__assert_fail@plt+0x1fa74>
   32158:	add	r3, r3, #1
   3215c:	b	32108 <__assert_fail@plt+0x1fa1c>
   32160:	cmn	r0, #1
   32164:	beq	32110 <__assert_fail@plt+0x1fa24>
   32168:	str	sl, [sp]
   3216c:	mov	r3, r9
   32170:	mov	r1, r5
   32174:	mov	r0, r8
   32178:	bl	30240 <__assert_fail@plt+0x1db54>
   3217c:	b	32118 <__assert_fail@plt+0x1fa2c>
   32180:	add	r7, r7, #1
   32184:	ldr	r3, [r4, #4]
   32188:	cmp	r7, r3
   3218c:	blt	320ec <__assert_fail@plt+0x1fa00>
   32190:	ldr	r0, [r4, #8]
   32194:	bl	2a01c <__assert_fail@plt+0x17930>
   32198:	ldm	r5, {r0, r1, r2}
   3219c:	stm	r4, {r0, r1, r2}
   321a0:	b	320e0 <__assert_fail@plt+0x1f9f4>
   321a4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   321a8:	ldr	r4, [r2, #4]
   321ac:	cmp	r4, #0
   321b0:	streq	r4, [r0]
   321b4:	movne	r8, r4
   321b8:	movne	r3, #0
   321bc:	bne	321d8 <__assert_fail@plt+0x1faec>
   321c0:	mov	r0, r4
   321c4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   321c8:	ldr	ip, [r2, #8]
   321cc:	ldr	ip, [ip, r3, lsl #2]
   321d0:	add	r3, r3, #1
   321d4:	add	r8, r8, ip
   321d8:	cmp	r4, r3
   321dc:	bgt	321c8 <__assert_fail@plt+0x1fadc>
   321e0:	ldr	r3, [r1, #68]	; 0x44
   321e4:	mov	r5, r2
   321e8:	and	r2, r8, r3
   321ec:	mov	r3, #12
   321f0:	mov	r6, r1
   321f4:	mul	r3, r3, r2
   321f8:	ldr	r2, [r1, #32]
   321fc:	mov	r7, r0
   32200:	add	fp, r2, r3
   32204:	ldr	sl, [r2, r3]
   32208:	mov	r9, #0
   3220c:	cmp	r9, sl
   32210:	blt	32258 <__assert_fail@plt+0x1fb6c>
   32214:	mov	r1, #1
   32218:	mov	r0, #56	; 0x38
   3221c:	bl	29b08 <__assert_fail@plt+0x1741c>
   32220:	subs	r4, r0, #0
   32224:	beq	32248 <__assert_fail@plt+0x1fb5c>
   32228:	add	r9, r4, #4
   3222c:	mov	r1, r5
   32230:	mov	r0, r9
   32234:	bl	2f740 <__assert_fail@plt+0x1d054>
   32238:	cmp	r0, #0
   3223c:	beq	32288 <__assert_fail@plt+0x1fb9c>
   32240:	mov	r0, r4
   32244:	bl	2a01c <__assert_fail@plt+0x17930>
   32248:	mov	r3, #12
   3224c:	str	r3, [r7]
   32250:	mov	r4, #0
   32254:	b	321c0 <__assert_fail@plt+0x1fad4>
   32258:	ldr	r3, [fp, #8]
   3225c:	ldr	r4, [r3, r9, lsl #2]
   32260:	ldr	r3, [r4]
   32264:	cmp	r3, r8
   32268:	bne	32280 <__assert_fail@plt+0x1fb94>
   3226c:	mov	r1, r5
   32270:	add	r0, r4, #4
   32274:	bl	2f5b8 <__assert_fail@plt+0x1cecc>
   32278:	cmp	r0, #0
   3227c:	bne	321c0 <__assert_fail@plt+0x1fad4>
   32280:	add	r9, r9, #1
   32284:	b	3220c <__assert_fail@plt+0x1fb20>
   32288:	str	r9, [r4, #40]	; 0x28
   3228c:	ldr	lr, [pc, #188]	; 32350 <__assert_fail@plt+0x1fc64>
   32290:	ldr	r9, [r5, #4]
   32294:	cmp	r0, r9
   32298:	blt	322c0 <__assert_fail@plt+0x1fbd4>
   3229c:	mov	r2, r8
   322a0:	mov	r1, r4
   322a4:	mov	r0, r6
   322a8:	bl	2d57c <__assert_fail@plt+0x1ae90>
   322ac:	cmp	r0, #0
   322b0:	beq	321c0 <__assert_fail@plt+0x1fad4>
   322b4:	mov	r0, r4
   322b8:	bl	2e054 <__assert_fail@plt+0x1b968>
   322bc:	b	32248 <__assert_fail@plt+0x1fb5c>
   322c0:	ldr	r3, [r5, #8]
   322c4:	ldr	r1, [r6]
   322c8:	ldr	r3, [r3, r0, lsl #2]
   322cc:	add	r1, r1, r3, lsl #3
   322d0:	ldrb	ip, [r1, #4]
   322d4:	cmp	ip, #1
   322d8:	bne	322e8 <__assert_fail@plt+0x1fbfc>
   322dc:	ldr	r3, [r1, #4]
   322e0:	tst	r3, lr
   322e4:	beq	32348 <__assert_fail@plt+0x1fc5c>
   322e8:	ldrb	r3, [r1, #6]
   322ec:	ldrb	r2, [r4, #52]	; 0x34
   322f0:	cmp	ip, #2
   322f4:	lsr	r3, r3, #4
   322f8:	orr	r3, r3, r2, lsr #5
   322fc:	and	r3, r3, #1
   32300:	bic	r2, r2, #32
   32304:	orr	r3, r2, r3, lsl #5
   32308:	strb	r3, [r4, #52]	; 0x34
   3230c:	uxtbeq	r3, r3
   32310:	orreq	r3, r3, #16
   32314:	beq	32344 <__assert_fail@plt+0x1fc58>
   32318:	cmp	ip, #4
   3231c:	ldrbeq	r3, [r4, #52]	; 0x34
   32320:	orreq	r3, r3, #64	; 0x40
   32324:	beq	32344 <__assert_fail@plt+0x1fc58>
   32328:	cmp	ip, #12
   3232c:	beq	3233c <__assert_fail@plt+0x1fc50>
   32330:	ldr	r3, [r1, #4]
   32334:	tst	r3, lr
   32338:	beq	32348 <__assert_fail@plt+0x1fc5c>
   3233c:	ldrb	r3, [r4, #52]	; 0x34
   32340:	orr	r3, r3, #128	; 0x80
   32344:	strb	r3, [r4, #52]	; 0x34
   32348:	add	r0, r0, #1
   3234c:	b	32294 <__assert_fail@plt+0x1fba8>
   32350:	andeq	pc, r3, r0, lsl #30
   32354:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   32358:	mov	r8, r0
   3235c:	mov	r6, r2
   32360:	mov	r7, r3
   32364:	sub	r5, r1, #4
   32368:	mov	r4, #0
   3236c:	cmp	r4, r7
   32370:	blt	32380 <__assert_fail@plt+0x1fc94>
   32374:	mov	r0, #0
   32378:	add	sp, sp, #16
   3237c:	pop	{r4, r5, r6, r7, r8, pc}
   32380:	ldr	r1, [r5, #4]!
   32384:	cmp	r1, #0
   32388:	ldreq	r3, [r6, r4, lsl #2]
   3238c:	streq	r3, [r5]
   32390:	beq	323e4 <__assert_fail@plt+0x1fcf8>
   32394:	ldr	r2, [r6, r4, lsl #2]
   32398:	cmp	r2, #0
   3239c:	beq	323e4 <__assert_fail@plt+0x1fcf8>
   323a0:	add	r2, r2, #4
   323a4:	add	r1, r1, #4
   323a8:	add	r0, sp, #4
   323ac:	bl	2f7b8 <__assert_fail@plt+0x1d0cc>
   323b0:	cmp	r0, #0
   323b4:	str	r0, [sp]
   323b8:	bne	32378 <__assert_fail@plt+0x1fc8c>
   323bc:	add	r2, sp, #4
   323c0:	mov	r1, r8
   323c4:	mov	r0, sp
   323c8:	bl	321a4 <__assert_fail@plt+0x1fab8>
   323cc:	str	r0, [r5]
   323d0:	ldr	r0, [sp, #12]
   323d4:	bl	2a01c <__assert_fail@plt+0x17930>
   323d8:	ldr	r0, [sp]
   323dc:	cmp	r0, #0
   323e0:	bne	32378 <__assert_fail@plt+0x1fc8c>
   323e4:	add	r4, r4, #1
   323e8:	b	3236c <__assert_fail@plt+0x1fc80>
   323ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   323f0:	sub	sp, sp, #36	; 0x24
   323f4:	mov	r8, r1
   323f8:	mov	r1, r2
   323fc:	mov	r6, r0
   32400:	mov	r9, r2
   32404:	str	r3, [sp, #8]
   32408:	bl	2cef4 <__assert_fail@plt+0x1a808>
   3240c:	cmn	r0, #1
   32410:	bne	32420 <__assert_fail@plt+0x1fd34>
   32414:	mov	r0, #0
   32418:	add	sp, sp, #36	; 0x24
   3241c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32420:	mov	r3, #24
   32424:	ldr	r7, [r6, #84]	; 0x54
   32428:	mul	r3, r3, r0
   3242c:	str	r3, [sp, #4]
   32430:	ldr	r3, [sp, #4]
   32434:	mov	fp, #12
   32438:	add	r4, r3, #24
   3243c:	ldr	r3, [r6, #116]	; 0x74
   32440:	add	r4, r3, r4
   32444:	ldr	sl, [r4, #-24]	; 0xffffffe8
   32448:	mov	r0, r8
   3244c:	mov	r1, sl
   32450:	bl	2caf0 <__assert_fail@plt+0x1a404>
   32454:	cmp	r0, #0
   32458:	beq	325a8 <__assert_fail@plt+0x1febc>
   3245c:	ldr	r5, [r4, #-12]
   32460:	ldr	r2, [r4, #-16]
   32464:	add	r5, r9, r5
   32468:	sub	r5, r5, r2
   3246c:	cmp	r9, r5
   32470:	bne	32500 <__assert_fail@plt+0x1fe14>
   32474:	ldr	r2, [r7, #20]
   32478:	mov	r0, r8
   3247c:	mla	r3, fp, sl, r2
   32480:	ldr	r3, [r3, #8]
   32484:	ldr	r5, [r3]
   32488:	mov	r1, r5
   3248c:	bl	2caf0 <__assert_fail@plt+0x1a404>
   32490:	cmp	r0, #0
   32494:	bne	325a8 <__assert_fail@plt+0x1febc>
   32498:	mov	r1, r5
   3249c:	add	r0, sp, #20
   324a0:	bl	2d50c <__assert_fail@plt+0x1ae20>
   324a4:	ldr	r3, [sp, #72]	; 0x48
   324a8:	ldr	r2, [sp, #8]
   324ac:	add	r1, sp, #20
   324b0:	str	r0, [sp, #16]
   324b4:	mov	r0, r7
   324b8:	bl	320ac <__assert_fail@plt+0x1f9c0>
   324bc:	add	r1, sp, #20
   324c0:	mov	r4, r0
   324c4:	mov	r0, r8
   324c8:	bl	30330 <__assert_fail@plt+0x1dc44>
   324cc:	mov	r5, r0
   324d0:	ldr	r0, [sp, #28]
   324d4:	bl	2a01c <__assert_fail@plt+0x17930>
   324d8:	ldr	r0, [sp, #16]
   324dc:	orr	r3, r4, r5
   324e0:	orrs	r3, r3, r0
   324e4:	beq	32430 <__assert_fail@plt+0x1fd44>
   324e8:	cmp	r0, #0
   324ec:	bne	32418 <__assert_fail@plt+0x1fd2c>
   324f0:	cmp	r4, #0
   324f4:	movne	r0, r4
   324f8:	moveq	r0, r5
   324fc:	b	32418 <__assert_fail@plt+0x1fd2c>
   32500:	ldr	r3, [r6, #100]	; 0x64
   32504:	ldr	r2, [r7, #12]
   32508:	ldr	r3, [r3, r5, lsl #2]
   3250c:	ldr	sl, [r2, sl, lsl #2]
   32510:	cmp	r3, #0
   32514:	beq	325d4 <__assert_fail@plt+0x1fee8>
   32518:	add	r3, r3, #4
   3251c:	mov	r0, r3
   32520:	mov	r1, sl
   32524:	str	r3, [sp, #12]
   32528:	bl	2caf0 <__assert_fail@plt+0x1a404>
   3252c:	ldr	r3, [sp, #12]
   32530:	cmp	r0, #0
   32534:	bne	325a8 <__assert_fail@plt+0x1febc>
   32538:	mov	r1, r3
   3253c:	add	r0, sp, #20
   32540:	bl	2f740 <__assert_fail@plt+0x1d054>
   32544:	mov	r1, sl
   32548:	str	r0, [sp, #16]
   3254c:	add	r0, sp, #20
   32550:	bl	2ff28 <__assert_fail@plt+0x1d83c>
   32554:	ldr	r3, [sp, #16]
   32558:	eor	r0, r0, #1
   3255c:	cmp	r3, #0
   32560:	orrne	r0, r0, #1
   32564:	tst	r0, #255	; 0xff
   32568:	bne	325bc <__assert_fail@plt+0x1fed0>
   3256c:	add	r2, sp, #20
   32570:	mov	r1, r7
   32574:	add	r0, sp, #16
   32578:	ldr	sl, [r6, #100]	; 0x64
   3257c:	bl	321a4 <__assert_fail@plt+0x1fab8>
   32580:	str	r0, [sl, r5, lsl #2]
   32584:	ldr	r0, [sp, #28]
   32588:	bl	2a01c <__assert_fail@plt+0x17930>
   3258c:	ldr	r3, [r6, #100]	; 0x64
   32590:	ldr	r3, [r3, r5, lsl #2]
   32594:	cmp	r3, #0
   32598:	bne	325a8 <__assert_fail@plt+0x1febc>
   3259c:	ldr	r0, [sp, #16]
   325a0:	cmp	r0, #0
   325a4:	bne	32418 <__assert_fail@plt+0x1fd2c>
   325a8:	add	r4, r4, #24
   325ac:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   325b0:	cmp	r3, #0
   325b4:	bne	32444 <__assert_fail@plt+0x1fd58>
   325b8:	b	32414 <__assert_fail@plt+0x1fd28>
   325bc:	ldr	r0, [sp, #28]
   325c0:	bl	2a01c <__assert_fail@plt+0x17930>
   325c4:	ldr	r0, [sp, #16]
   325c8:	cmp	r0, #0
   325cc:	moveq	r0, #12
   325d0:	b	32418 <__assert_fail@plt+0x1fd2c>
   325d4:	mov	r1, sl
   325d8:	add	r0, sp, #20
   325dc:	bl	2d50c <__assert_fail@plt+0x1ae20>
   325e0:	cmp	r0, #0
   325e4:	str	r0, [sp, #16]
   325e8:	beq	3256c <__assert_fail@plt+0x1fe80>
   325ec:	b	32418 <__assert_fail@plt+0x1fd2c>
   325f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   325f4:	mov	r9, r3
   325f8:	ldr	sl, [r0, #84]	; 0x54
   325fc:	sub	sp, sp, #76	; 0x4c
   32600:	mov	fp, #0
   32604:	ldr	r3, [sl]
   32608:	str	fp, [sp, #40]	; 0x28
   3260c:	ldr	r5, [r0, #120]	; 0x78
   32610:	ldr	r3, [r3, r2, lsl #3]
   32614:	ldr	r8, [r1, #4]
   32618:	str	r3, [sp, #16]
   3261c:	ldr	r3, [sp, #116]	; 0x74
   32620:	mov	r4, r0
   32624:	add	r5, r3, r5
   32628:	cmp	r5, r8
   3262c:	mov	r7, r1
   32630:	mov	r6, r2
   32634:	blt	32698 <__assert_fail@plt+0x1ffac>
   32638:	mvn	r3, #-2147483648	; 0x80000000
   3263c:	add	r5, r5, #1
   32640:	sub	r3, r3, r8
   32644:	cmp	r5, r3
   32648:	ble	32658 <__assert_fail@plt+0x1ff6c>
   3264c:	mov	r0, #12
   32650:	add	sp, sp, #76	; 0x4c
   32654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32658:	add	r3, r8, r5
   3265c:	cmn	r3, #-1073741823	; 0xc0000001
   32660:	bhi	3264c <__assert_fail@plt+0x1ff60>
   32664:	lsl	r1, r3, #2
   32668:	ldr	r0, [r7, #8]
   3266c:	str	r3, [sp, #12]
   32670:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   32674:	cmp	r0, #0
   32678:	beq	3264c <__assert_fail@plt+0x1ff60>
   3267c:	ldr	r3, [sp, #12]
   32680:	str	r0, [r7, #8]
   32684:	str	r3, [r7, #4]
   32688:	lsl	r2, r5, #2
   3268c:	mov	r1, fp
   32690:	add	r0, r0, r8, lsl #2
   32694:	bl	12434 <memset@plt>
   32698:	ldr	r5, [r7]
   3269c:	ldr	r3, [r4, #100]	; 0x64
   326a0:	cmp	r5, #0
   326a4:	ldr	fp, [r7, #8]
   326a8:	moveq	r5, r9
   326ac:	str	r3, [sp, #28]
   326b0:	ldr	r3, [r4, #40]	; 0x28
   326b4:	str	fp, [r4, #100]	; 0x64
   326b8:	str	r5, [r4, #40]	; 0x28
   326bc:	ldr	r2, [r4, #88]	; 0x58
   326c0:	sub	r1, r5, #1
   326c4:	mov	r0, r4
   326c8:	str	r3, [sp, #32]
   326cc:	bl	3067c <__assert_fail@plt+0x1df90>
   326d0:	cmp	r5, r9
   326d4:	mov	r8, r0
   326d8:	bne	32754 <__assert_fail@plt+0x20068>
   326dc:	mov	r1, r6
   326e0:	add	r0, sp, #48	; 0x30
   326e4:	bl	2d50c <__assert_fail@plt+0x1ae20>
   326e8:	cmp	r0, #0
   326ec:	str	r0, [sp, #40]	; 0x28
   326f0:	bne	32650 <__assert_fail@plt+0x1ff64>
   326f4:	ldr	r3, [sp, #120]	; 0x78
   326f8:	ldr	r2, [sp, #16]
   326fc:	add	r1, sp, #48	; 0x30
   32700:	mov	r0, sl
   32704:	bl	320ac <__assert_fail@plt+0x1f9c0>
   32708:	cmp	r0, #0
   3270c:	str	r0, [sp, #40]	; 0x28
   32710:	bne	32844 <__assert_fail@plt+0x20158>
   32714:	ldr	r3, [sp, #52]	; 0x34
   32718:	cmp	r3, #0
   3271c:	bne	3281c <__assert_fail@plt+0x20130>
   32720:	mov	r3, r8
   32724:	add	r2, sp, #48	; 0x30
   32728:	mov	r1, sl
   3272c:	add	r0, sp, #40	; 0x28
   32730:	bl	2f8f0 <__assert_fail@plt+0x1d204>
   32734:	subs	r6, r0, #0
   32738:	bne	32748 <__assert_fail@plt+0x2005c>
   3273c:	ldr	r3, [sp, #40]	; 0x28
   32740:	cmp	r3, #0
   32744:	bne	32844 <__assert_fail@plt+0x20158>
   32748:	ldr	r3, [r4, #100]	; 0x64
   3274c:	str	r6, [r3, r5, lsl #2]
   32750:	b	32790 <__assert_fail@plt+0x200a4>
   32754:	ldr	r6, [fp, r5, lsl #2]
   32758:	cmp	r6, #0
   3275c:	beq	32800 <__assert_fail@plt+0x20114>
   32760:	ldrb	r3, [r6, #52]	; 0x34
   32764:	tst	r3, #64	; 0x40
   32768:	beq	32800 <__assert_fail@plt+0x20114>
   3276c:	add	r1, r6, #4
   32770:	add	r0, sp, #48	; 0x30
   32774:	bl	2f740 <__assert_fail@plt+0x1d054>
   32778:	cmp	r0, #0
   3277c:	str	r0, [sp, #40]	; 0x28
   32780:	bne	32650 <__assert_fail@plt+0x1ff64>
   32784:	ldrb	r3, [r6, #52]	; 0x34
   32788:	tst	r3, #64	; 0x40
   3278c:	bne	32714 <__assert_fail@plt+0x20028>
   32790:	add	r3, r5, #1
   32794:	lsl	r3, r3, #2
   32798:	str	r3, [sp, #24]
   3279c:	mov	r3, #0
   327a0:	str	r3, [sp, #12]
   327a4:	ldr	r3, [sp, #116]	; 0x74
   327a8:	cmp	r5, r3
   327ac:	blt	32a68 <__assert_fail@plt+0x2037c>
   327b0:	ldr	r0, [sp, #56]	; 0x38
   327b4:	bl	2a01c <__assert_fail@plt+0x17930>
   327b8:	ldr	r3, [r4, #100]	; 0x64
   327bc:	ldr	r2, [sp, #116]	; 0x74
   327c0:	ldr	r0, [r3, r2, lsl #2]
   327c4:	ldr	r3, [sp, #28]
   327c8:	cmp	r0, #0
   327cc:	str	r5, [r7]
   327d0:	addne	r0, r0, #4
   327d4:	str	r3, [r4, #100]	; 0x64
   327d8:	ldr	r3, [sp, #32]
   327dc:	cmp	r0, #0
   327e0:	str	r3, [r4, #40]	; 0x28
   327e4:	moveq	r0, #1
   327e8:	beq	32650 <__assert_fail@plt+0x1ff64>
   327ec:	ldr	r1, [sp, #112]	; 0x70
   327f0:	bl	2caf0 <__assert_fail@plt+0x1a404>
   327f4:	clz	r0, r0
   327f8:	lsr	r0, r0, #5
   327fc:	b	32650 <__assert_fail@plt+0x1ff64>
   32800:	mov	r3, #0
   32804:	cmp	r6, r3
   32808:	str	r3, [sp, #48]	; 0x30
   3280c:	str	r3, [sp, #52]	; 0x34
   32810:	str	r3, [sp, #56]	; 0x38
   32814:	bne	32784 <__assert_fail@plt+0x20098>
   32818:	b	32790 <__assert_fail@plt+0x200a4>
   3281c:	ldr	r3, [sp, #120]	; 0x78
   32820:	mov	r2, r5
   32824:	str	r3, [sp]
   32828:	add	r1, sp, #48	; 0x30
   3282c:	ldr	r3, [sp, #16]
   32830:	mov	r0, r4
   32834:	bl	323ec <__assert_fail@plt+0x1fd00>
   32838:	cmp	r0, #0
   3283c:	str	r0, [sp, #40]	; 0x28
   32840:	beq	32720 <__assert_fail@plt+0x20034>
   32844:	ldr	r0, [sp, #56]	; 0x38
   32848:	bl	2a01c <__assert_fail@plt+0x17930>
   3284c:	ldr	r0, [sp, #40]	; 0x28
   32850:	b	32650 <__assert_fail@plt+0x1ff64>
   32854:	ldr	r3, [r6, #24]
   32858:	ldr	r2, [sp, #20]
   3285c:	ldr	fp, [r3, r2, lsl #2]
   32860:	ldr	r3, [r9]
   32864:	lsl	r8, fp, #3
   32868:	add	r3, r3, r8
   3286c:	ldrb	r3, [r3, #6]
   32870:	tst	r3, #16
   32874:	bne	328a0 <__assert_fail@plt+0x201b4>
   32878:	ldr	r1, [r9]
   3287c:	mov	r2, r5
   32880:	add	r1, r1, r8
   32884:	mov	r0, r4
   32888:	bl	3075c <__assert_fail@plt+0x1e070>
   3288c:	cmp	r0, #0
   32890:	bne	32a30 <__assert_fail@plt+0x20344>
   32894:	ldr	r3, [sp, #20]
   32898:	add	r3, r3, #1
   3289c:	b	32acc <__assert_fail@plt+0x203e0>
   328a0:	mov	r3, r5
   328a4:	mov	r2, r4
   328a8:	mov	r1, fp
   328ac:	mov	r0, r9
   328b0:	bl	2f33c <__assert_fail@plt+0x1cc50>
   328b4:	cmp	r0, #1
   328b8:	ble	32a5c <__assert_fail@plt+0x20370>
   328bc:	ldr	r2, [r4, #100]	; 0x64
   328c0:	add	r8, r5, r0
   328c4:	ldr	r3, [r9, #12]
   328c8:	ldr	r1, [r2, r8, lsl #2]
   328cc:	mov	r2, #0
   328d0:	cmp	r1, r2
   328d4:	ldr	r3, [r3, fp, lsl #2]
   328d8:	str	r2, [sp, #64]	; 0x40
   328dc:	beq	329dc <__assert_fail@plt+0x202f0>
   328e0:	add	r1, r1, #4
   328e4:	add	r0, sp, #60	; 0x3c
   328e8:	str	r3, [sp, #36]	; 0x24
   328ec:	bl	30330 <__assert_fail@plt+0x1dc44>
   328f0:	ldr	r3, [sp, #36]	; 0x24
   328f4:	cmp	r0, #0
   328f8:	str	r0, [sp, #44]	; 0x2c
   328fc:	beq	329dc <__assert_fail@plt+0x202f0>
   32900:	ldr	r0, [sp, #68]	; 0x44
   32904:	bl	2a01c <__assert_fail@plt+0x17930>
   32908:	ldr	r3, [sp, #44]	; 0x2c
   3290c:	cmp	r3, #0
   32910:	str	r3, [sp, #40]	; 0x28
   32914:	bne	32844 <__assert_fail@plt+0x20158>
   32918:	ldr	r3, [sp, #52]	; 0x34
   3291c:	add	r6, r5, #1
   32920:	cmp	r3, #0
   32924:	beq	32970 <__assert_fail@plt+0x20284>
   32928:	ldr	r3, [sp, #120]	; 0x78
   3292c:	ldr	r2, [sp, #16]
   32930:	add	r1, sp, #48	; 0x30
   32934:	mov	r0, sl
   32938:	bl	320ac <__assert_fail@plt+0x1f9c0>
   3293c:	cmp	r0, #0
   32940:	str	r0, [sp, #40]	; 0x28
   32944:	bne	32844 <__assert_fail@plt+0x20158>
   32948:	ldr	r3, [sp, #120]	; 0x78
   3294c:	mov	r2, r6
   32950:	str	r3, [sp]
   32954:	add	r1, sp, #48	; 0x30
   32958:	ldr	r3, [sp, #16]
   3295c:	mov	r0, r4
   32960:	bl	323ec <__assert_fail@plt+0x1fd00>
   32964:	cmp	r0, #0
   32968:	str	r0, [sp, #40]	; 0x28
   3296c:	bne	32844 <__assert_fail@plt+0x20158>
   32970:	ldr	r2, [r4, #88]	; 0x58
   32974:	mov	r1, r5
   32978:	mov	r0, r4
   3297c:	bl	3067c <__assert_fail@plt+0x1df90>
   32980:	add	r2, sp, #48	; 0x30
   32984:	mov	r1, sl
   32988:	mov	r3, r0
   3298c:	add	r0, sp, #40	; 0x28
   32990:	bl	2f8f0 <__assert_fail@plt+0x1d204>
   32994:	subs	r6, r0, #0
   32998:	bne	329a8 <__assert_fail@plt+0x202bc>
   3299c:	ldr	r3, [sp, #40]	; 0x28
   329a0:	cmp	r3, #0
   329a4:	bne	32844 <__assert_fail@plt+0x20158>
   329a8:	ldr	r3, [r4, #100]	; 0x64
   329ac:	ldr	r2, [sp, #24]
   329b0:	cmp	r6, #0
   329b4:	add	r5, r5, #1
   329b8:	str	r6, [r3, r2]
   329bc:	ldreq	r3, [sp, #12]
   329c0:	movne	r3, #0
   329c4:	addeq	r3, r3, #1
   329c8:	str	r3, [sp, #12]
   329cc:	ldr	r3, [sp, #24]
   329d0:	add	r3, r3, #4
   329d4:	str	r3, [sp, #24]
   329d8:	b	327a4 <__assert_fail@plt+0x200b8>
   329dc:	mov	r1, r3
   329e0:	add	r0, sp, #60	; 0x3c
   329e4:	bl	2ff28 <__assert_fail@plt+0x1d83c>
   329e8:	cmp	r0, #0
   329ec:	bne	32a00 <__assert_fail@plt+0x20314>
   329f0:	ldr	r0, [sp, #68]	; 0x44
   329f4:	bl	2a01c <__assert_fail@plt+0x17930>
   329f8:	mov	r3, #12
   329fc:	b	3290c <__assert_fail@plt+0x20220>
   32a00:	ldr	r3, [r4, #100]	; 0x64
   32a04:	add	r2, sp, #60	; 0x3c
   32a08:	mov	r1, r9
   32a0c:	add	r0, sp, #44	; 0x2c
   32a10:	str	r3, [sp, #36]	; 0x24
   32a14:	bl	321a4 <__assert_fail@plt+0x1fab8>
   32a18:	ldr	r3, [sp, #36]	; 0x24
   32a1c:	str	r0, [r3, r8, lsl #2]
   32a20:	ldr	r3, [r4, #100]	; 0x64
   32a24:	ldr	r3, [r3, r8, lsl #2]
   32a28:	cmp	r3, #0
   32a2c:	beq	32a4c <__assert_fail@plt+0x20360>
   32a30:	ldr	r3, [r9, #12]
   32a34:	add	r0, sp, #48	; 0x30
   32a38:	ldr	r1, [r3, fp, lsl #2]
   32a3c:	bl	2ff28 <__assert_fail@plt+0x1d83c>
   32a40:	cmp	r0, #0
   32a44:	bne	32894 <__assert_fail@plt+0x201a8>
   32a48:	b	329f0 <__assert_fail@plt+0x20304>
   32a4c:	ldr	r3, [sp, #44]	; 0x2c
   32a50:	cmp	r3, #0
   32a54:	beq	32a30 <__assert_fail@plt+0x20344>
   32a58:	b	32900 <__assert_fail@plt+0x20214>
   32a5c:	cmp	r0, #0
   32a60:	bne	32a30 <__assert_fail@plt+0x20344>
   32a64:	b	32878 <__assert_fail@plt+0x2018c>
   32a68:	ldr	r3, [r4, #120]	; 0x78
   32a6c:	ldr	r2, [sp, #12]
   32a70:	cmp	r2, r3
   32a74:	bgt	327b0 <__assert_fail@plt+0x200c4>
   32a78:	mov	r3, #0
   32a7c:	str	r3, [sp, #52]	; 0x34
   32a80:	ldr	r2, [sp, #24]
   32a84:	ldr	r3, [r4, #100]	; 0x64
   32a88:	ldr	r1, [r3, r2]
   32a8c:	cmp	r1, #0
   32a90:	beq	32af0 <__assert_fail@plt+0x20404>
   32a94:	add	r1, r1, #4
   32a98:	add	r0, sp, #48	; 0x30
   32a9c:	bl	30330 <__assert_fail@plt+0x1dc44>
   32aa0:	cmp	r0, #0
   32aa4:	str	r0, [sp, #40]	; 0x28
   32aa8:	bne	32844 <__assert_fail@plt+0x20158>
   32aac:	cmp	r6, #0
   32ab0:	beq	32918 <__assert_fail@plt+0x2022c>
   32ab4:	ldr	r9, [r4, #84]	; 0x54
   32ab8:	mov	r3, #0
   32abc:	str	r3, [sp, #44]	; 0x2c
   32ac0:	str	r3, [sp, #60]	; 0x3c
   32ac4:	str	r3, [sp, #64]	; 0x40
   32ac8:	str	r3, [sp, #68]	; 0x44
   32acc:	str	r3, [sp, #20]
   32ad0:	ldr	r2, [sp, #20]
   32ad4:	ldr	r3, [r6, #20]
   32ad8:	cmp	r2, r3
   32adc:	blt	32854 <__assert_fail@plt+0x20168>
   32ae0:	ldr	r0, [sp, #68]	; 0x44
   32ae4:	bl	2a01c <__assert_fail@plt+0x17930>
   32ae8:	mov	r3, #0
   32aec:	b	3290c <__assert_fail@plt+0x20220>
   32af0:	cmp	r6, #0
   32af4:	bne	32ab4 <__assert_fail@plt+0x203c8>
   32af8:	b	32970 <__assert_fail@plt+0x20284>
   32afc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32b00:	sub	sp, sp, #20
   32b04:	mov	r8, r2
   32b08:	ldr	r5, [sp, #56]	; 0x38
   32b0c:	mov	sl, r3
   32b10:	mov	r3, #8
   32b14:	str	r3, [sp, #8]
   32b18:	str	r5, [sp, #4]
   32b1c:	str	sl, [sp]
   32b20:	mov	r7, r1
   32b24:	ldm	r2, {r2, r3}
   32b28:	add	r1, r8, #8
   32b2c:	mov	r4, r0
   32b30:	bl	325f0 <__assert_fail@plt+0x1ff04>
   32b34:	subs	fp, r0, #0
   32b38:	bne	32b78 <__assert_fail@plt+0x2048c>
   32b3c:	ldr	r3, [r4, #112]	; 0x70
   32b40:	ldr	r2, [r4, #108]	; 0x6c
   32b44:	ldr	r9, [r7]
   32b48:	cmp	r2, r3
   32b4c:	ldr	r6, [r8, #4]
   32b50:	blt	32bb0 <__assert_fail@plt+0x204c4>
   32b54:	mov	r1, #48	; 0x30
   32b58:	ldr	r0, [r4, #116]	; 0x74
   32b5c:	mul	r1, r1, r3
   32b60:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   32b64:	subs	r3, r0, #0
   32b68:	bne	32b84 <__assert_fail@plt+0x20498>
   32b6c:	ldr	r0, [r4, #116]	; 0x74
   32b70:	bl	2a01c <__assert_fail@plt+0x17930>
   32b74:	mov	fp, #12
   32b78:	mov	r0, fp
   32b7c:	add	sp, sp, #20
   32b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32b84:	ldr	r2, [r4, #112]	; 0x70
   32b88:	ldr	ip, [r4, #108]	; 0x6c
   32b8c:	mov	r0, #24
   32b90:	str	r3, [r4, #116]	; 0x74
   32b94:	mul	r2, r0, r2
   32b98:	mov	r1, fp
   32b9c:	mla	r0, r0, ip, r3
   32ba0:	bl	12434 <memset@plt>
   32ba4:	ldr	r3, [r4, #112]	; 0x70
   32ba8:	lsl	r3, r3, #1
   32bac:	str	r3, [r4, #112]	; 0x70
   32bb0:	ldr	r3, [r4, #108]	; 0x6c
   32bb4:	cmp	r3, #0
   32bb8:	ble	32be0 <__assert_fail@plt+0x204f4>
   32bbc:	mov	r2, #24
   32bc0:	ldr	r1, [r4, #116]	; 0x74
   32bc4:	mul	r2, r2, r3
   32bc8:	sub	r2, r2, #24
   32bcc:	add	r2, r1, r2
   32bd0:	ldr	r1, [r2, #4]
   32bd4:	cmp	r5, r1
   32bd8:	moveq	r1, #1
   32bdc:	strbeq	r1, [r2, #20]
   32be0:	mov	r1, #24
   32be4:	ldr	r0, [r4, #116]	; 0x74
   32be8:	mul	r1, r1, r3
   32bec:	cmp	r9, r6
   32bf0:	add	r2, r0, r1
   32bf4:	str	sl, [r0, r1]
   32bf8:	add	r3, r3, #1
   32bfc:	movne	r1, #0
   32c00:	mvneq	r1, #0
   32c04:	stmib	r2, {r5, r9}
   32c08:	str	r6, [r2, #12]
   32c0c:	str	r1, [r2, #16]
   32c10:	str	r3, [r4, #108]	; 0x6c
   32c14:	mov	r3, #0
   32c18:	strb	r3, [r2, #20]
   32c1c:	ldr	r3, [r4, #120]	; 0x78
   32c20:	sub	r6, r6, r9
   32c24:	ldr	r1, [r8, #4]
   32c28:	cmp	r3, r6
   32c2c:	add	r5, r5, r1
   32c30:	strlt	r6, [r4, #120]	; 0x78
   32c34:	ldr	r1, [r7]
   32c38:	mov	r0, r4
   32c3c:	sub	r1, r5, r1
   32c40:	add	sp, sp, #20
   32c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32c48:	b	2e574 <__assert_fail@plt+0x1be88>
   32c4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32c50:	sub	sp, sp, #84	; 0x54
   32c54:	ldr	sl, [r0, #40]	; 0x28
   32c58:	ldr	fp, [r0, #84]	; 0x54
   32c5c:	mov	r4, r0
   32c60:	lsl	r3, sl, #2
   32c64:	str	r3, [sp, #44]	; 0x2c
   32c68:	mov	r3, #0
   32c6c:	str	r1, [sp, #56]	; 0x38
   32c70:	str	r3, [sp, #24]
   32c74:	ldr	r3, [sp, #56]	; 0x38
   32c78:	ldr	r2, [sp, #24]
   32c7c:	ldr	r3, [r3, #4]
   32c80:	cmp	r2, r3
   32c84:	movge	r3, #0
   32c88:	strge	r3, [sp, #64]	; 0x40
   32c8c:	bge	33248 <__assert_fail@plt+0x20b5c>
   32c90:	ldr	r3, [sp, #56]	; 0x38
   32c94:	ldr	r2, [sp, #24]
   32c98:	ldr	r3, [r3, #8]
   32c9c:	ldr	r3, [r3, r2, lsl #2]
   32ca0:	str	r3, [sp, #20]
   32ca4:	ldr	r2, [sp, #20]
   32ca8:	ldr	r3, [fp]
   32cac:	add	r3, r3, r2, lsl #3
   32cb0:	ldrb	r2, [r3, #4]
   32cb4:	cmp	r2, #4
   32cb8:	beq	32cc8 <__assert_fail@plt+0x205dc>
   32cbc:	ldr	r3, [sp, #24]
   32cc0:	add	r3, r3, #1
   32cc4:	b	32c70 <__assert_fail@plt+0x20584>
   32cc8:	ldr	r5, [r3, #4]
   32ccc:	ldr	r3, [pc, #1444]	; 33278 <__assert_fail@plt+0x20b8c>
   32cd0:	tst	r5, r3
   32cd4:	beq	32d30 <__assert_fail@plt+0x20644>
   32cd8:	ldr	r2, [r4, #88]	; 0x58
   32cdc:	mov	r1, sl
   32ce0:	mov	r0, r4
   32ce4:	bl	3067c <__assert_fail@plt+0x1df90>
   32ce8:	ldr	r3, [pc, #1420]	; 3327c <__assert_fail@plt+0x20b90>
   32cec:	and	r3, r3, r5, lsr #8
   32cf0:	tst	r3, #4
   32cf4:	beq	32d00 <__assert_fail@plt+0x20614>
   32cf8:	tst	r0, #1
   32cfc:	beq	32cbc <__assert_fail@plt+0x205d0>
   32d00:	tst	r3, #8
   32d04:	beq	32d10 <__assert_fail@plt+0x20624>
   32d08:	tst	r0, #1
   32d0c:	bne	32cbc <__assert_fail@plt+0x205d0>
   32d10:	tst	r3, #32
   32d14:	beq	32d20 <__assert_fail@plt+0x20634>
   32d18:	tst	r0, #2
   32d1c:	beq	32cbc <__assert_fail@plt+0x205d0>
   32d20:	tst	r3, #128	; 0x80
   32d24:	beq	32d30 <__assert_fail@plt+0x20644>
   32d28:	tst	r0, #8
   32d2c:	beq	32cbc <__assert_fail@plt+0x205d0>
   32d30:	ldr	r3, [r4, #108]	; 0x6c
   32d34:	mov	r1, sl
   32d38:	mov	r0, r4
   32d3c:	str	r3, [sp, #28]
   32d40:	bl	2cef4 <__assert_fail@plt+0x1a808>
   32d44:	cmn	r0, #1
   32d48:	beq	32df8 <__assert_fail@plt+0x2070c>
   32d4c:	mov	r3, #24
   32d50:	mul	r0, r3, r0
   32d54:	add	r3, r0, r3
   32d58:	ldr	r0, [r4, #116]	; 0x74
   32d5c:	add	r0, r0, r3
   32d60:	ldr	r3, [r0, #-24]	; 0xffffffe8
   32d64:	ldr	r2, [sp, #20]
   32d68:	cmp	r2, r3
   32d6c:	bne	32de8 <__assert_fail@plt+0x206fc>
   32d70:	mov	r0, #0
   32d74:	cmp	r0, #0
   32d78:	str	r0, [sp, #64]	; 0x40
   32d7c:	bne	33248 <__assert_fail@plt+0x20b5c>
   32d80:	ldr	r3, [sp, #20]
   32d84:	ldr	r2, [sp, #20]
   32d88:	mov	r7, #24
   32d8c:	lsl	r3, r3, #2
   32d90:	str	r3, [sp, #32]
   32d94:	mov	r3, #12
   32d98:	str	r0, [sp, #48]	; 0x30
   32d9c:	mul	r3, r3, r2
   32da0:	str	r3, [sp, #40]	; 0x28
   32da4:	ldr	r3, [sp, #28]
   32da8:	mul	r7, r7, r3
   32dac:	ldr	r3, [r4, #108]	; 0x6c
   32db0:	ldr	r2, [sp, #28]
   32db4:	cmp	r2, r3
   32db8:	bge	32cbc <__assert_fail@plt+0x205d0>
   32dbc:	ldr	r2, [r4, #116]	; 0x74
   32dc0:	ldr	r1, [sp, #20]
   32dc4:	add	r3, r2, r7
   32dc8:	ldr	r2, [r2, r7]
   32dcc:	cmp	r1, r2
   32dd0:	beq	33108 <__assert_fail@plt+0x20a1c>
   32dd4:	ldr	r3, [sp, #28]
   32dd8:	add	r7, r7, #24
   32ddc:	add	r3, r3, #1
   32de0:	str	r3, [sp, #28]
   32de4:	b	32dac <__assert_fail@plt+0x206c0>
   32de8:	add	r0, r0, #24
   32dec:	ldrb	r3, [r0, #-28]	; 0xffffffe4
   32df0:	cmp	r3, #0
   32df4:	bne	32d60 <__assert_fail@plt+0x20674>
   32df8:	ldr	r3, [r4, #84]	; 0x54
   32dfc:	ldr	r2, [sp, #20]
   32e00:	str	r3, [sp, #40]	; 0x28
   32e04:	ldr	r3, [r3]
   32e08:	ldr	r8, [r4, #4]
   32e0c:	ldr	r3, [r3, r2, lsl #3]
   32e10:	str	r3, [sp, #48]	; 0x30
   32e14:	mov	r3, #0
   32e18:	str	r3, [sp, #32]
   32e1c:	ldr	r2, [sp, #32]
   32e20:	ldr	r3, [r4, #124]	; 0x7c
   32e24:	cmp	r2, r3
   32e28:	bge	32d70 <__assert_fail@plt+0x20684>
   32e2c:	ldr	r3, [r4, #132]	; 0x84
   32e30:	ldr	r2, [sp, #32]
   32e34:	ldr	r5, [r3, r2, lsl #2]
   32e38:	ldr	r3, [sp, #40]	; 0x28
   32e3c:	ldr	r2, [r5, #4]
   32e40:	ldr	r3, [r3]
   32e44:	ldr	r3, [r3, r2, lsl #3]
   32e48:	ldr	r2, [sp, #48]	; 0x30
   32e4c:	cmp	r2, r3
   32e50:	moveq	r7, sl
   32e54:	ldreq	r6, [r5]
   32e58:	moveq	r9, #0
   32e5c:	beq	32ebc <__assert_fail@plt+0x207d0>
   32e60:	ldr	r3, [sp, #32]
   32e64:	add	r3, r3, #1
   32e68:	b	32e18 <__assert_fail@plt+0x2072c>
   32e6c:	ldr	r3, [r5, #20]
   32e70:	ldr	r3, [r3, r9, lsl #2]
   32e74:	str	r3, [sp, #52]	; 0x34
   32e78:	ldr	r3, [r3, #4]
   32e7c:	str	r3, [sp, #36]	; 0x24
   32e80:	sub	r3, r3, r6
   32e84:	cmp	r3, #0
   32e88:	bgt	32ecc <__assert_fail@plt+0x207e0>
   32e8c:	add	r7, r7, r3
   32e90:	str	sl, [sp]
   32e94:	ldr	r3, [sp, #20]
   32e98:	ldr	r2, [sp, #52]	; 0x34
   32e9c:	mov	r1, r5
   32ea0:	mov	r0, r4
   32ea4:	bl	32afc <__assert_fail@plt+0x20410>
   32ea8:	ldr	r8, [r4, #4]
   32eac:	cmp	r0, #1
   32eb0:	bhi	32d74 <__assert_fail@plt+0x20688>
   32eb4:	ldr	r6, [sp, #36]	; 0x24
   32eb8:	add	r9, r9, #1
   32ebc:	ldr	r3, [r5, #16]
   32ec0:	cmp	r9, r3
   32ec4:	blt	32e6c <__assert_fail@plt+0x20780>
   32ec8:	b	32f24 <__assert_fail@plt+0x20838>
   32ecc:	ldr	r2, [r4, #28]
   32ed0:	add	r1, r3, r7
   32ed4:	cmp	r1, r2
   32ed8:	ble	32f04 <__assert_fail@plt+0x20818>
   32edc:	ldr	r2, [r4, #48]	; 0x30
   32ee0:	str	r3, [sp, #60]	; 0x3c
   32ee4:	cmp	r1, r2
   32ee8:	bgt	32f24 <__assert_fail@plt+0x20838>
   32eec:	mov	r0, r4
   32ef0:	bl	2e574 <__assert_fail@plt+0x1be88>
   32ef4:	cmp	r0, #0
   32ef8:	bne	32d74 <__assert_fail@plt+0x20688>
   32efc:	ldr	r8, [r4, #4]
   32f00:	ldr	r3, [sp, #60]	; 0x3c
   32f04:	mov	r2, r3
   32f08:	add	r1, r8, r6
   32f0c:	add	r0, r8, r7
   32f10:	str	r3, [sp, #60]	; 0x3c
   32f14:	bl	12158 <memcmp@plt>
   32f18:	ldr	r3, [sp, #60]	; 0x3c
   32f1c:	cmp	r0, #0
   32f20:	beq	32e8c <__assert_fail@plt+0x207a0>
   32f24:	ldr	r3, [r5, #16]
   32f28:	cmp	r9, r3
   32f2c:	blt	32e60 <__assert_fail@plt+0x20774>
   32f30:	cmp	r9, #0
   32f34:	addgt	r6, r6, #1
   32f38:	lsl	r3, r6, #2
   32f3c:	cmp	sl, r6
   32f40:	str	r3, [sp, #36]	; 0x24
   32f44:	blt	32e60 <__assert_fail@plt+0x20774>
   32f48:	ldr	r3, [r5]
   32f4c:	sub	r3, r6, r3
   32f50:	cmp	r3, #0
   32f54:	ble	32fa4 <__assert_fail@plt+0x208b8>
   32f58:	ldr	r3, [r4, #28]
   32f5c:	cmp	r3, r7
   32f60:	bgt	32f88 <__assert_fail@plt+0x2089c>
   32f64:	ldr	r3, [r4, #48]	; 0x30
   32f68:	cmp	r7, r3
   32f6c:	bge	32e60 <__assert_fail@plt+0x20774>
   32f70:	add	r1, r7, #1
   32f74:	mov	r0, r4
   32f78:	bl	2dce0 <__assert_fail@plt+0x1b5f4>
   32f7c:	cmp	r0, #0
   32f80:	bne	32d74 <__assert_fail@plt+0x20688>
   32f84:	ldr	r8, [r4, #4]
   32f88:	add	r3, r8, r6
   32f8c:	ldrb	r1, [r8, r7]
   32f90:	ldrb	r3, [r3, #-1]
   32f94:	add	r2, r7, #1
   32f98:	cmp	r1, r3
   32f9c:	bne	32e60 <__assert_fail@plt+0x20774>
   32fa0:	mov	r7, r2
   32fa4:	ldr	r3, [r4, #100]	; 0x64
   32fa8:	ldr	r2, [sp, #36]	; 0x24
   32fac:	ldr	r2, [r3, r2]
   32fb0:	cmp	r2, #0
   32fb4:	movne	r3, #0
   32fb8:	ldrne	r0, [r2, #8]
   32fbc:	bne	33004 <__assert_fail@plt+0x20918>
   32fc0:	ldr	r3, [sp, #36]	; 0x24
   32fc4:	add	r6, r6, #1
   32fc8:	add	r3, r3, #4
   32fcc:	b	32f3c <__assert_fail@plt+0x20850>
   32fd0:	ldr	r1, [r2, #12]
   32fd4:	ldr	r9, [r1, r3, lsl #2]
   32fd8:	ldr	r1, [sp, #40]	; 0x28
   32fdc:	ldr	r1, [r1]
   32fe0:	add	ip, r1, r9, lsl #3
   32fe4:	ldrb	ip, [ip, #4]
   32fe8:	cmp	ip, #9
   32fec:	bne	33000 <__assert_fail@plt+0x20914>
   32ff0:	ldr	r1, [r1, r9, lsl #3]
   32ff4:	ldr	ip, [sp, #48]	; 0x30
   32ff8:	cmp	ip, r1
   32ffc:	beq	33010 <__assert_fail@plt+0x20924>
   33000:	add	r3, r3, #1
   33004:	cmp	r3, r0
   33008:	blt	32fd0 <__assert_fail@plt+0x208e4>
   3300c:	b	32fc0 <__assert_fail@plt+0x208d4>
   33010:	cmn	r9, #1
   33014:	beq	32fc0 <__assert_fail@plt+0x208d4>
   33018:	ldr	r3, [r5, #8]
   3301c:	cmp	r3, #0
   33020:	beq	330e0 <__assert_fail@plt+0x209f4>
   33024:	mov	r3, #9
   33028:	str	r3, [sp, #8]
   3302c:	str	r6, [sp, #4]
   33030:	str	r9, [sp]
   33034:	mov	r0, r4
   33038:	ldr	r3, [r5]
   3303c:	ldr	r2, [r5, #4]
   33040:	ldr	r1, [r5, #8]
   33044:	bl	325f0 <__assert_fail@plt+0x1ff04>
   33048:	cmp	r0, #1
   3304c:	beq	32fc0 <__assert_fail@plt+0x208d4>
   33050:	cmp	r0, #0
   33054:	bne	32d74 <__assert_fail@plt+0x20688>
   33058:	ldr	r8, [r5, #16]
   3305c:	ldr	r3, [r5, #12]
   33060:	cmp	r8, r3
   33064:	bne	3308c <__assert_fail@plt+0x209a0>
   33068:	lsl	r8, r8, #1
   3306c:	add	r8, r8, #1
   33070:	ldr	r0, [r5, #20]
   33074:	lsl	r1, r8, #2
   33078:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   3307c:	cmp	r0, #0
   33080:	beq	33100 <__assert_fail@plt+0x20a14>
   33084:	str	r0, [r5, #20]
   33088:	str	r8, [r5, #12]
   3308c:	mov	r1, #20
   33090:	mov	r0, #1
   33094:	bl	29b08 <__assert_fail@plt+0x1741c>
   33098:	subs	r2, r0, #0
   3309c:	beq	33100 <__assert_fail@plt+0x20a14>
   330a0:	ldr	r3, [r5, #16]
   330a4:	ldr	r1, [r5, #20]
   330a8:	mov	r0, r4
   330ac:	str	r2, [r1, r3, lsl #2]
   330b0:	add	r3, r3, #1
   330b4:	str	r9, [r2]
   330b8:	str	r6, [r2, #4]
   330bc:	mov	r1, r5
   330c0:	str	r3, [r5, #16]
   330c4:	str	sl, [sp]
   330c8:	ldr	r3, [sp, #20]
   330cc:	bl	32afc <__assert_fail@plt+0x20410>
   330d0:	ldr	r8, [r4, #4]
   330d4:	cmp	r0, #1
   330d8:	bls	32fc0 <__assert_fail@plt+0x208d4>
   330dc:	b	32d74 <__assert_fail@plt+0x20688>
   330e0:	ldr	r1, [r5]
   330e4:	mov	r0, #12
   330e8:	sub	r1, r6, r1
   330ec:	add	r1, r1, #1
   330f0:	bl	29b08 <__assert_fail@plt+0x1741c>
   330f4:	cmp	r0, #0
   330f8:	str	r0, [r5, #8]
   330fc:	bne	33024 <__assert_fail@plt+0x20938>
   33100:	mov	r0, #12
   33104:	b	32d74 <__assert_fail@plt+0x20688>
   33108:	ldr	r2, [r3, #4]
   3310c:	cmp	sl, r2
   33110:	bne	32dd4 <__assert_fail@plt+0x206e8>
   33114:	ldr	r5, [r3, #12]
   33118:	ldr	r3, [r3, #8]
   3311c:	mov	r0, r4
   33120:	subs	r2, r5, r3
   33124:	str	r2, [sp, #36]	; 0x24
   33128:	ldreq	r1, [sp, #40]	; 0x28
   3312c:	ldreq	r2, [fp, #20]
   33130:	ldrne	r2, [fp, #12]
   33134:	addeq	r2, r2, r1
   33138:	ldrne	r1, [sp, #32]
   3313c:	ldreq	r2, [r2, #8]
   33140:	add	r5, sl, r5
   33144:	ldrne	r6, [r2, r1]
   33148:	ldreq	r6, [r2]
   3314c:	mov	r1, #12
   33150:	ldr	r2, [fp, #24]
   33154:	sub	r5, r5, r3
   33158:	mla	r6, r1, r6, r2
   3315c:	ldr	r2, [r4, #88]	; 0x58
   33160:	sub	r1, r5, #1
   33164:	bl	3067c <__assert_fail@plt+0x1df90>
   33168:	ldr	r8, [r4, #100]	; 0x64
   3316c:	ldr	r2, [sp, #44]	; 0x2c
   33170:	ldr	r1, [r8, r5, lsl #2]
   33174:	ldr	r2, [r8, r2]
   33178:	cmp	r2, #0
   3317c:	ldrne	r9, [r2, #8]
   33180:	ldreq	r9, [sp, #48]	; 0x30
   33184:	cmp	r1, #0
   33188:	mov	r3, r0
   3318c:	bne	3321c <__assert_fail@plt+0x20b30>
   33190:	mov	r2, r6
   33194:	mov	r1, fp
   33198:	add	r0, sp, #64	; 0x40
   3319c:	bl	2f8f0 <__assert_fail@plt+0x1d204>
   331a0:	str	r0, [r8, r5, lsl #2]
   331a4:	ldr	r3, [r4, #100]	; 0x64
   331a8:	ldr	r3, [r3, r5, lsl #2]
   331ac:	cmp	r3, #0
   331b0:	bne	331c0 <__assert_fail@plt+0x20ad4>
   331b4:	ldr	r3, [sp, #64]	; 0x40
   331b8:	cmp	r3, #0
   331bc:	bne	33248 <__assert_fail@plt+0x20b5c>
   331c0:	ldr	r3, [sp, #36]	; 0x24
   331c4:	cmp	r3, #0
   331c8:	bne	32dd4 <__assert_fail@plt+0x206e8>
   331cc:	ldr	r3, [r4, #100]	; 0x64
   331d0:	ldr	r2, [sp, #44]	; 0x2c
   331d4:	ldr	r3, [r3, r2]
   331d8:	ldr	r3, [r3, #8]
   331dc:	cmp	r9, r3
   331e0:	bge	32dd4 <__assert_fail@plt+0x206e8>
   331e4:	mov	r2, sl
   331e8:	mov	r1, r6
   331ec:	mov	r0, r4
   331f0:	bl	2e470 <__assert_fail@plt+0x1bd84>
   331f4:	cmp	r0, #0
   331f8:	str	r0, [sp, #64]	; 0x40
   331fc:	bne	33248 <__assert_fail@plt+0x20b5c>
   33200:	mov	r1, r6
   33204:	mov	r0, r4
   33208:	bl	32c4c <__assert_fail@plt+0x20560>
   3320c:	cmp	r0, #0
   33210:	str	r0, [sp, #64]	; 0x40
   33214:	beq	32dd4 <__assert_fail@plt+0x206e8>
   33218:	b	33248 <__assert_fail@plt+0x20b5c>
   3321c:	str	r0, [sp, #52]	; 0x34
   33220:	mov	r2, r6
   33224:	ldr	r1, [r1, #40]	; 0x28
   33228:	add	r0, sp, #68	; 0x44
   3322c:	bl	2f7b8 <__assert_fail@plt+0x1d0cc>
   33230:	ldr	r3, [sp, #52]	; 0x34
   33234:	cmp	r0, #0
   33238:	str	r0, [sp, #64]	; 0x40
   3323c:	beq	33254 <__assert_fail@plt+0x20b68>
   33240:	ldr	r0, [sp, #76]	; 0x4c
   33244:	bl	2a01c <__assert_fail@plt+0x17930>
   33248:	ldr	r0, [sp, #64]	; 0x40
   3324c:	add	sp, sp, #84	; 0x54
   33250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33254:	add	r2, sp, #68	; 0x44
   33258:	mov	r1, fp
   3325c:	add	r0, sp, #64	; 0x40
   33260:	ldr	r8, [r4, #100]	; 0x64
   33264:	bl	2f8f0 <__assert_fail@plt+0x1d204>
   33268:	str	r0, [r8, r5, lsl #2]
   3326c:	ldr	r0, [sp, #76]	; 0x4c
   33270:	bl	2a01c <__assert_fail@plt+0x17930>
   33274:	b	331a4 <__assert_fail@plt+0x20ab8>
   33278:	andeq	pc, r3, r0, lsl #30
   3327c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   33280:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33284:	mov	r8, r0
   33288:	ldr	r3, [r1, #104]	; 0x68
   3328c:	ldr	r6, [r1, #40]	; 0x28
   33290:	ldr	sl, [r1, #84]	; 0x54
   33294:	cmp	r6, r3
   33298:	ldr	r3, [r1, #100]	; 0x64
   3329c:	sub	sp, sp, #20
   332a0:	mov	r5, r1
   332a4:	strgt	r2, [r3, r6, lsl #2]
   332a8:	mov	r4, r2
   332ac:	strgt	r6, [r1, #104]	; 0x68
   332b0:	bgt	33350 <__assert_fail@plt+0x20c64>
   332b4:	ldr	r2, [r3, r6, lsl #2]
   332b8:	cmp	r2, #0
   332bc:	streq	r4, [r3, r6, lsl #2]
   332c0:	beq	33350 <__assert_fail@plt+0x20c64>
   332c4:	cmp	r4, #0
   332c8:	ldr	r2, [r2, #40]	; 0x28
   332cc:	add	r7, sp, #4
   332d0:	beq	33300 <__assert_fail@plt+0x20c14>
   332d4:	ldr	r9, [r4, #40]	; 0x28
   332d8:	mov	r0, r7
   332dc:	mov	r1, r9
   332e0:	bl	2f7b8 <__assert_fail@plt+0x1d0cc>
   332e4:	cmp	r0, #0
   332e8:	str	r0, [r8]
   332ec:	beq	3330c <__assert_fail@plt+0x20c20>
   332f0:	mov	r4, #0
   332f4:	mov	r0, r4
   332f8:	add	sp, sp, #20
   332fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33300:	ldm	r2, {r0, r1, r2}
   33304:	mov	r9, r4
   33308:	stm	r7, {r0, r1, r2}
   3330c:	mov	r0, r5
   33310:	ldr	r1, [r5, #40]	; 0x28
   33314:	ldr	r2, [r5, #88]	; 0x58
   33318:	sub	r1, r1, #1
   3331c:	bl	3067c <__assert_fail@plt+0x1df90>
   33320:	mov	r2, r7
   33324:	mov	r1, sl
   33328:	ldr	fp, [r5, #100]	; 0x64
   3332c:	mov	r3, r0
   33330:	mov	r0, r8
   33334:	bl	2f8f0 <__assert_fail@plt+0x1d204>
   33338:	cmp	r9, #0
   3333c:	mov	r4, r0
   33340:	str	r0, [fp, r6, lsl #2]
   33344:	beq	33350 <__assert_fail@plt+0x20c64>
   33348:	ldr	r0, [sp, #12]
   3334c:	bl	2a01c <__assert_fail@plt+0x17930>
   33350:	ldr	r3, [sl, #76]	; 0x4c
   33354:	cmp	r3, #0
   33358:	beq	332f4 <__assert_fail@plt+0x20c08>
   3335c:	cmp	r4, #0
   33360:	beq	332f0 <__assert_fail@plt+0x20c04>
   33364:	add	r7, r4, #4
   33368:	mov	r2, r6
   3336c:	mov	r1, r7
   33370:	mov	r0, r5
   33374:	bl	2e470 <__assert_fail@plt+0x1bd84>
   33378:	cmp	r0, #0
   3337c:	str	r0, [r8]
   33380:	bne	332f0 <__assert_fail@plt+0x20c04>
   33384:	ldrb	r3, [r4, #52]	; 0x34
   33388:	tst	r3, #64	; 0x40
   3338c:	beq	332f4 <__assert_fail@plt+0x20c08>
   33390:	mov	r1, r7
   33394:	mov	r0, r5
   33398:	bl	32c4c <__assert_fail@plt+0x20560>
   3339c:	cmp	r0, #0
   333a0:	str	r0, [r8]
   333a4:	bne	332f0 <__assert_fail@plt+0x20c04>
   333a8:	ldr	r3, [r5, #100]	; 0x64
   333ac:	ldr	r4, [r3, r6, lsl #2]
   333b0:	b	332f4 <__assert_fail@plt+0x20c08>
   333b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   333b8:	sub	sp, sp, #92	; 0x5c
   333bc:	mov	r4, r3
   333c0:	mov	r3, #0
   333c4:	str	r3, [sp, #56]	; 0x38
   333c8:	lsl	r3, r2, #2
   333cc:	str	r3, [sp, #32]
   333d0:	ldr	r3, [r0, #100]	; 0x64
   333d4:	mov	fp, r2
   333d8:	ldr	r7, [r0, #84]	; 0x54
   333dc:	ldr	r3, [r3, r2, lsl #2]
   333e0:	mov	r6, r0
   333e4:	cmp	r3, #0
   333e8:	addne	r3, r3, #4
   333ec:	str	r3, [sp, #8]
   333f0:	ldr	r3, [r4, #4]
   333f4:	mov	r5, r1
   333f8:	cmp	r3, #0
   333fc:	ldreq	r2, [r1]
   33400:	streq	r3, [r2, fp, lsl #2]
   33404:	beq	33708 <__assert_fail@plt+0x2101c>
   33408:	ldr	r3, [sp, #8]
   3340c:	cmp	r3, #0
   33410:	bne	33444 <__assert_fail@plt+0x20d58>
   33414:	mov	r2, r4
   33418:	mov	r1, r7
   3341c:	add	r0, sp, #56	; 0x38
   33420:	ldr	r8, [r5]
   33424:	bl	321a4 <__assert_fail@plt+0x1fab8>
   33428:	ldr	r3, [sp, #56]	; 0x38
   3342c:	cmp	r3, #0
   33430:	str	r0, [r8, fp, lsl #2]
   33434:	beq	33708 <__assert_fail@plt+0x2101c>
   33438:	mov	r0, r3
   3343c:	add	sp, sp, #92	; 0x5c
   33440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33444:	add	r0, sp, #88	; 0x58
   33448:	mov	r3, #0
   3344c:	str	r3, [r0, #-28]!	; 0xffffffe4
   33450:	mov	r2, r4
   33454:	mov	r1, r7
   33458:	bl	321a4 <__assert_fail@plt+0x1fab8>
   3345c:	ldr	r8, [sp, #60]	; 0x3c
   33460:	cmp	r8, #0
   33464:	bne	3348c <__assert_fail@plt+0x20da0>
   33468:	mov	r9, r0
   3346c:	ldr	r3, [r9, #28]!
   33470:	cmp	r3, #0
   33474:	beq	334cc <__assert_fail@plt+0x20de0>
   33478:	mov	r2, r9
   3347c:	ldr	r1, [sp, #8]
   33480:	mov	r0, r4
   33484:	bl	2fb94 <__assert_fail@plt+0x1d4a8>
   33488:	mov	r8, r0
   3348c:	cmp	r8, #0
   33490:	str	r8, [sp, #56]	; 0x38
   33494:	movne	r3, r8
   33498:	bne	33438 <__assert_fail@plt+0x20d4c>
   3349c:	ldr	r3, [r5, #20]
   334a0:	cmp	r3, #0
   334a4:	strne	r8, [sp, #12]
   334a8:	ldrne	r3, [r6, #116]	; 0x74
   334ac:	strne	r3, [sp, #16]
   334b0:	beq	33414 <__assert_fail@plt+0x20d28>
   334b4:	ldr	r3, [r5, #20]
   334b8:	ldr	r2, [sp, #12]
   334bc:	cmp	r2, r3
   334c0:	blt	3352c <__assert_fail@plt+0x20e40>
   334c4:	mov	r3, r8
   334c8:	b	3369c <__assert_fail@plt+0x20fb0>
   334cc:	ldr	r1, [r4, #4]
   334d0:	mov	r0, r9
   334d4:	bl	2d54c <__assert_fail@plt+0x1ae60>
   334d8:	cmp	r0, #0
   334dc:	str	r0, [sp, #60]	; 0x3c
   334e0:	moveq	r8, r0
   334e4:	moveq	sl, #12
   334e8:	beq	3351c <__assert_fail@plt+0x20e30>
   334ec:	mov	r8, #12
   334f0:	b	3348c <__assert_fail@plt+0x20da0>
   334f4:	ldr	r3, [r4, #8]
   334f8:	mov	r0, r9
   334fc:	ldr	r1, [r3, r8, lsl #2]
   33500:	ldr	r3, [r7, #28]
   33504:	mla	r1, sl, r1, r3
   33508:	bl	30330 <__assert_fail@plt+0x1dc44>
   3350c:	cmp	r0, #0
   33510:	str	r0, [sp, #60]	; 0x3c
   33514:	bne	334ec <__assert_fail@plt+0x20e00>
   33518:	add	r8, r8, #1
   3351c:	ldr	r3, [r4, #4]
   33520:	cmp	r8, r3
   33524:	blt	334f4 <__assert_fail@plt+0x20e08>
   33528:	b	33478 <__assert_fail@plt+0x20d8c>
   3352c:	ldr	r2, [sp, #12]
   33530:	ldr	r3, [r5, #24]
   33534:	ldr	r3, [r3, r2, lsl #2]
   33538:	mov	r2, #24
   3353c:	mul	r3, r2, r3
   33540:	ldr	r2, [sp, #16]
   33544:	add	r2, r2, r3
   33548:	ldr	r1, [r2, #8]
   3354c:	cmp	fp, r1
   33550:	bgt	33564 <__assert_fail@plt+0x20e78>
   33554:	ldr	r3, [sp, #12]
   33558:	add	r3, r3, #1
   3355c:	str	r3, [sp, #12]
   33560:	b	334b4 <__assert_fail@plt+0x20dc8>
   33564:	ldr	r1, [r2, #4]
   33568:	cmp	fp, r1
   3356c:	bgt	33554 <__assert_fail@plt+0x20e68>
   33570:	ldr	r1, [sp, #16]
   33574:	ldr	r0, [r7]
   33578:	ldr	r3, [r1, r3]
   3357c:	ldr	r9, [r0, r3, lsl #3]
   33580:	ldr	r3, [r2, #12]
   33584:	cmp	fp, r3
   33588:	movne	sl, #0
   3358c:	bne	336d0 <__assert_fail@plt+0x20fe4>
   33590:	mvn	sl, #0
   33594:	ldr	lr, [r4, #4]
   33598:	mov	r1, sl
   3359c:	mov	r2, #0
   335a0:	cmp	r2, lr
   335a4:	blt	33640 <__assert_fail@plt+0x20f54>
   335a8:	cmp	r1, #0
   335ac:	bge	33684 <__assert_fail@plt+0x20f98>
   335b0:	cmp	sl, #0
   335b4:	movge	r9, #0
   335b8:	blt	33554 <__assert_fail@plt+0x20e68>
   335bc:	ldr	r3, [r4, #4]
   335c0:	cmp	r9, r3
   335c4:	bge	33554 <__assert_fail@plt+0x20e68>
   335c8:	ldr	r3, [r4, #8]
   335cc:	ldr	r0, [r7, #28]
   335d0:	mov	r1, sl
   335d4:	ldr	r3, [r3, r9, lsl #2]
   335d8:	str	r3, [sp, #20]
   335dc:	ldr	r2, [sp, #20]
   335e0:	mov	r3, #12
   335e4:	mul	r3, r3, r2
   335e8:	add	r0, r0, r3
   335ec:	str	r3, [sp, #24]
   335f0:	bl	2caf0 <__assert_fail@plt+0x1a404>
   335f4:	cmp	r0, #0
   335f8:	bne	33638 <__assert_fail@plt+0x20f4c>
   335fc:	ldr	r3, [sp, #24]
   33600:	ldr	r0, [r7, #24]
   33604:	mov	r1, sl
   33608:	add	r0, r0, r3
   3360c:	bl	2caf0 <__assert_fail@plt+0x1a404>
   33610:	cmp	r0, #0
   33614:	bne	33638 <__assert_fail@plt+0x20f4c>
   33618:	ldr	r3, [sp, #8]
   3361c:	mov	r2, r4
   33620:	ldr	r1, [sp, #20]
   33624:	mov	r0, r7
   33628:	bl	2fd0c <__assert_fail@plt+0x1d620>
   3362c:	subs	r3, r0, #0
   33630:	bne	3369c <__assert_fail@plt+0x20fb0>
   33634:	sub	r9, r9, #1
   33638:	add	r9, r9, #1
   3363c:	b	335bc <__assert_fail@plt+0x20ed0>
   33640:	ldr	r3, [r4, #8]
   33644:	ldr	r3, [r3, r2, lsl #2]
   33648:	add	ip, r0, r3, lsl #3
   3364c:	ldrb	ip, [ip, #4]
   33650:	cmp	ip, #8
   33654:	bne	3366c <__assert_fail@plt+0x20f80>
   33658:	ldr	ip, [r0, r3, lsl #3]
   3365c:	cmp	r9, ip
   33660:	moveq	r1, r3
   33664:	add	r2, r2, #1
   33668:	b	335a0 <__assert_fail@plt+0x20eb4>
   3366c:	cmp	ip, #9
   33670:	bne	33664 <__assert_fail@plt+0x20f78>
   33674:	ldr	ip, [r0, r3, lsl #3]
   33678:	cmp	r9, ip
   3367c:	moveq	sl, r3
   33680:	b	33664 <__assert_fail@plt+0x20f78>
   33684:	ldr	r3, [sp, #8]
   33688:	mov	r2, r4
   3368c:	mov	r0, r7
   33690:	bl	2fd0c <__assert_fail@plt+0x1d620>
   33694:	subs	r3, r0, #0
   33698:	beq	335b0 <__assert_fail@plt+0x20ec4>
   3369c:	cmp	r3, #0
   336a0:	str	r3, [sp, #56]	; 0x38
   336a4:	beq	33414 <__assert_fail@plt+0x20d28>
   336a8:	b	33438 <__assert_fail@plt+0x20d4c>
   336ac:	ldr	r3, [r4, #8]
   336b0:	ldr	r2, [r7]
   336b4:	ldr	r1, [r3, sl, lsl #2]
   336b8:	add	r3, r2, r1, lsl #3
   336bc:	ldrb	r3, [r3, #4]
   336c0:	sub	r3, r3, #8
   336c4:	cmp	r3, #1
   336c8:	bls	336e0 <__assert_fail@plt+0x20ff4>
   336cc:	add	sl, sl, #1
   336d0:	ldr	r3, [r4, #4]
   336d4:	cmp	sl, r3
   336d8:	blt	336ac <__assert_fail@plt+0x20fc0>
   336dc:	b	33554 <__assert_fail@plt+0x20e68>
   336e0:	ldr	r3, [r2, r1, lsl #3]
   336e4:	cmp	r9, r3
   336e8:	bne	336cc <__assert_fail@plt+0x20fe0>
   336ec:	ldr	r3, [sp, #8]
   336f0:	mov	r2, r4
   336f4:	mov	r0, r7
   336f8:	bl	2fd0c <__assert_fail@plt+0x1d620>
   336fc:	subs	r3, r0, #0
   33700:	beq	336cc <__assert_fail@plt+0x20fe0>
   33704:	b	3369c <__assert_fail@plt+0x20fb0>
   33708:	ldr	r3, [sp, #8]
   3370c:	cmp	r3, #0
   33710:	beq	338e0 <__assert_fail@plt+0x211f4>
   33714:	ldr	r3, [r6, #100]	; 0x64
   33718:	ldr	r3, [r3, fp, lsl #2]
   3371c:	ldrb	r3, [r3, #52]	; 0x34
   33720:	ands	r3, r3, #64	; 0x40
   33724:	beq	33438 <__assert_fail@plt+0x20d4c>
   33728:	mov	r1, fp
   3372c:	mov	r0, r6
   33730:	bl	2cef4 <__assert_fail@plt+0x1a808>
   33734:	mov	sl, #0
   33738:	cmn	r0, #1
   3373c:	mov	r3, r0
   33740:	str	r0, [sp, #16]
   33744:	moveq	r3, sl
   33748:	beq	33438 <__assert_fail@plt+0x20d4c>
   3374c:	mov	r3, #24
   33750:	add	r9, sp, #88	; 0x58
   33754:	mul	r3, r3, r0
   33758:	ldr	r8, [r6, #84]	; 0x54
   3375c:	str	sl, [r9, #-28]!	; 0xffffffe4
   33760:	str	r3, [sp, #36]	; 0x24
   33764:	add	r3, r9, #16
   33768:	str	r3, [sp, #28]
   3376c:	ldr	r3, [sp, #8]
   33770:	ldr	r3, [r3, #4]
   33774:	cmp	sl, r3
   33778:	movge	r3, #0
   3377c:	bge	338c8 <__assert_fail@plt+0x211dc>
   33780:	ldr	r3, [sp, #8]
   33784:	ldr	r2, [r5, #8]
   33788:	ldr	r3, [r3, #8]
   3378c:	ldr	r7, [r3, sl, lsl #2]
   33790:	ldr	r3, [r8]
   33794:	cmp	r7, r2
   33798:	add	r3, r3, r7, lsl #3
   3379c:	ldrb	r3, [r3, #4]
   337a0:	bne	337b8 <__assert_fail@plt+0x210cc>
   337a4:	ldr	r2, [r5, #12]
   337a8:	cmp	fp, r2
   337ac:	bne	337b8 <__assert_fail@plt+0x210cc>
   337b0:	add	sl, sl, #1
   337b4:	b	3376c <__assert_fail@plt+0x21080>
   337b8:	cmp	r3, #4
   337bc:	bne	337b0 <__assert_fail@plt+0x210c4>
   337c0:	ldr	r3, [sp, #36]	; 0x24
   337c4:	ldr	r4, [r6, #116]	; 0x74
   337c8:	add	r4, r4, r3
   337cc:	mov	r3, #12
   337d0:	mul	r3, r3, r7
   337d4:	str	r3, [sp, #44]	; 0x2c
   337d8:	lsl	r3, r7, #2
   337dc:	str	r3, [sp, #40]	; 0x28
   337e0:	ldr	r3, [sp, #36]	; 0x24
   337e4:	str	r3, [sp, #20]
   337e8:	ldr	r3, [sp, #16]
   337ec:	str	r3, [sp, #12]
   337f0:	add	r3, r5, #16
   337f4:	str	r3, [sp, #24]
   337f8:	ldr	r3, [r4]
   337fc:	cmp	r7, r3
   33800:	bne	33978 <__assert_fail@plt+0x2128c>
   33804:	ldr	r2, [r4, #8]
   33808:	ldr	r3, [r4, #12]
   3380c:	sub	r3, r3, r2
   33810:	cmp	r3, #0
   33814:	add	r2, fp, r3
   33818:	ldreq	r1, [sp, #44]	; 0x2c
   3381c:	ldreq	r3, [r8, #20]
   33820:	ldrne	r1, [sp, #40]	; 0x28
   33824:	addeq	r3, r3, r1
   33828:	ldrne	r3, [r8, #12]
   3382c:	ldreq	r3, [r3, #8]
   33830:	ldrne	r3, [r3, r1]
   33834:	ldr	r1, [r5, #12]
   33838:	ldreq	r3, [r3]
   3383c:	cmp	r2, r1
   33840:	bgt	33978 <__assert_fail@plt+0x2128c>
   33844:	ldr	r1, [r5]
   33848:	str	r2, [sp, #52]	; 0x34
   3384c:	ldr	r0, [r1, r2, lsl #2]
   33850:	cmp	r0, #0
   33854:	beq	33978 <__assert_fail@plt+0x2128c>
   33858:	mov	r1, r3
   3385c:	add	r0, r0, #4
   33860:	str	r3, [sp, #48]	; 0x30
   33864:	bl	2caf0 <__assert_fail@plt+0x1a404>
   33868:	ldr	r3, [sp, #48]	; 0x30
   3386c:	ldr	r2, [sp, #52]	; 0x34
   33870:	cmp	r0, #0
   33874:	beq	33978 <__assert_fail@plt+0x2128c>
   33878:	str	r2, [sp, #4]
   3387c:	str	r3, [sp]
   33880:	mov	r2, r7
   33884:	mov	r3, fp
   33888:	ldr	r1, [sp, #24]
   3388c:	mov	r0, r6
   33890:	bl	2cf64 <__assert_fail@plt+0x1a878>
   33894:	cmp	r0, #0
   33898:	bne	33978 <__assert_fail@plt+0x2128c>
   3389c:	ldr	r3, [sp, #60]	; 0x3c
   338a0:	cmp	r3, #0
   338a4:	beq	338e8 <__assert_fail@plt+0x211fc>
   338a8:	ldr	r1, [sp, #12]
   338ac:	ldr	r0, [sp, #28]
   338b0:	str	r7, [sp, #68]	; 0x44
   338b4:	str	fp, [sp, #72]	; 0x48
   338b8:	bl	2ff28 <__assert_fail@plt+0x1d83c>
   338bc:	cmp	r0, #0
   338c0:	bne	3391c <__assert_fail@plt+0x21230>
   338c4:	mov	r3, #12
   338c8:	ldr	r2, [sp, #60]	; 0x3c
   338cc:	cmp	r2, #0
   338d0:	beq	33438 <__assert_fail@plt+0x20d4c>
   338d4:	ldr	r0, [sp, #84]	; 0x54
   338d8:	str	r3, [sp, #8]
   338dc:	bl	2a01c <__assert_fail@plt+0x17930>
   338e0:	ldr	r3, [sp, #8]
   338e4:	b	33438 <__assert_fail@plt+0x20d4c>
   338e8:	mov	lr, r5
   338ec:	add	ip, sp, #60	; 0x3c
   338f0:	ldm	lr!, {r0, r1, r2, r3}
   338f4:	stmia	ip!, {r0, r1, r2, r3}
   338f8:	ldr	r3, [sp, #24]
   338fc:	ldm	r3, {r0, r1, r2}
   33900:	stm	ip, {r0, r1, r2}
   33904:	mov	r1, r3
   33908:	mov	r0, ip
   3390c:	bl	2f740 <__assert_fail@plt+0x1d054>
   33910:	subs	r3, r0, #0
   33914:	beq	338a8 <__assert_fail@plt+0x211bc>
   33918:	b	338c8 <__assert_fail@plt+0x211dc>
   3391c:	ldr	r3, [sp, #60]	; 0x3c
   33920:	ldr	r2, [sp, #32]
   33924:	mov	r1, r9
   33928:	mov	r0, r6
   3392c:	ldr	r4, [r3, r2]
   33930:	bl	339c4 <__assert_fail@plt+0x212d8>
   33934:	subs	r3, r0, #0
   33938:	bne	338c8 <__assert_fail@plt+0x211dc>
   3393c:	ldr	r1, [r5, #4]
   33940:	cmp	r1, #0
   33944:	bne	339a8 <__assert_fail@plt+0x212bc>
   33948:	ldr	r3, [sp, #60]	; 0x3c
   3394c:	ldr	r2, [sp, #32]
   33950:	ldr	r1, [sp, #12]
   33954:	ldr	r0, [sp, #28]
   33958:	str	r4, [r3, r2]
   3395c:	bl	2caf0 <__assert_fail@plt+0x1a404>
   33960:	sub	r1, r0, #1
   33964:	ldr	r0, [sp, #28]
   33968:	bl	2f5f8 <__assert_fail@plt+0x1cf0c>
   3396c:	ldr	r4, [r6, #116]	; 0x74
   33970:	ldr	r3, [sp, #20]
   33974:	add	r4, r4, r3
   33978:	ldr	r3, [sp, #12]
   3397c:	add	r2, r4, #24
   33980:	add	r3, r3, #1
   33984:	str	r3, [sp, #12]
   33988:	ldr	r3, [sp, #20]
   3398c:	add	r3, r3, #24
   33990:	str	r3, [sp, #20]
   33994:	ldrb	r3, [r4, #20]
   33998:	cmp	r3, #0
   3399c:	beq	337b0 <__assert_fail@plt+0x210c4>
   339a0:	mov	r4, r2
   339a4:	b	337f8 <__assert_fail@plt+0x2110c>
   339a8:	add	r3, fp, #1
   339ac:	ldr	r2, [sp, #60]	; 0x3c
   339b0:	mov	r0, r8
   339b4:	bl	32354 <__assert_fail@plt+0x1fc68>
   339b8:	subs	r3, r0, #0
   339bc:	beq	33948 <__assert_fail@plt+0x2125c>
   339c0:	b	338c8 <__assert_fail@plt+0x211dc>
   339c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   339c8:	sub	sp, sp, #52	; 0x34
   339cc:	add	r7, sp, #36	; 0x24
   339d0:	ldr	r4, [r1, #12]
   339d4:	mov	r6, r0
   339d8:	mov	r5, r1
   339dc:	mov	r0, r7
   339e0:	ldr	r1, [r1, #8]
   339e4:	bl	2d50c <__assert_fail@plt+0x1ae20>
   339e8:	subs	fp, r0, #0
   339ec:	bne	33a20 <__assert_fail@plt+0x21334>
   339f0:	mov	r3, r7
   339f4:	mov	r2, r4
   339f8:	mov	r1, r5
   339fc:	mov	r0, r6
   33a00:	bl	333b4 <__assert_fail@plt+0x20cc8>
   33a04:	subs	fp, r0, #0
   33a08:	lsleq	r8, r4, #2
   33a0c:	streq	fp, [sp, #8]
   33a10:	streq	r7, [sp, #20]
   33a14:	beq	33be4 <__assert_fail@plt+0x214f8>
   33a18:	ldr	r0, [sp, #44]	; 0x2c
   33a1c:	bl	2a01c <__assert_fail@plt+0x17930>
   33a20:	mov	r0, fp
   33a24:	add	sp, sp, #52	; 0x34
   33a28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33a2c:	mov	r3, #0
   33a30:	str	r3, [sp, #40]	; 0x28
   33a34:	ldr	r3, [r6, #100]	; 0x64
   33a38:	sub	r4, r4, #1
   33a3c:	add	r3, r3, r8
   33a40:	ldr	sl, [r3, #-4]
   33a44:	cmp	sl, #0
   33a48:	bne	33a74 <__assert_fail@plt+0x21388>
   33a4c:	ldr	r3, [sp, #20]
   33a50:	mov	r2, r4
   33a54:	mov	r1, r5
   33a58:	mov	r0, r6
   33a5c:	bl	333b4 <__assert_fail@plt+0x20cc8>
   33a60:	sub	r8, r8, #4
   33a64:	cmp	r0, #0
   33a68:	beq	33be4 <__assert_fail@plt+0x214f8>
   33a6c:	mov	fp, r0
   33a70:	b	33a18 <__assert_fail@plt+0x2132c>
   33a74:	ldr	r9, [r6, #84]	; 0x54
   33a78:	mov	r3, #0
   33a7c:	str	r3, [sp, #12]
   33a80:	add	r3, r5, #16
   33a84:	str	r3, [sp, #28]
   33a88:	ldr	r3, [sl, #20]
   33a8c:	ldr	r2, [sp, #12]
   33a90:	cmp	r2, r3
   33a94:	bge	33a4c <__assert_fail@plt+0x21360>
   33a98:	ldr	r3, [sl, #24]
   33a9c:	ldr	r2, [sp, #12]
   33aa0:	ldr	r7, [r3, r2, lsl #2]
   33aa4:	lsl	r3, r7, #3
   33aa8:	str	r3, [sp, #16]
   33aac:	ldr	r3, [r9]
   33ab0:	lsl	r2, r7, #3
   33ab4:	add	r3, r3, r2
   33ab8:	ldrb	r3, [r3, #6]
   33abc:	tst	r3, #16
   33ac0:	bne	33af4 <__assert_fail@plt+0x21408>
   33ac4:	ldr	r1, [r9]
   33ac8:	lsl	r3, r7, #3
   33acc:	mov	r2, r4
   33ad0:	add	r1, r1, r3
   33ad4:	mov	r0, r6
   33ad8:	bl	3075c <__assert_fail@plt+0x1e070>
   33adc:	cmp	r0, #0
   33ae0:	bne	33bb4 <__assert_fail@plt+0x214c8>
   33ae4:	ldr	r3, [sp, #12]
   33ae8:	add	r3, r3, #1
   33aec:	str	r3, [sp, #12]
   33af0:	b	33a88 <__assert_fail@plt+0x2139c>
   33af4:	ldr	r3, [r5, #12]
   33af8:	mov	r2, r6
   33afc:	str	r3, [sp, #24]
   33b00:	ldr	r3, [r6, #84]	; 0x54
   33b04:	mov	r1, r7
   33b08:	str	r3, [sp, #16]
   33b0c:	ldr	r0, [sp, #16]
   33b10:	mov	r3, r4
   33b14:	bl	2f33c <__assert_fail@plt+0x1cc50>
   33b18:	subs	r3, r0, #0
   33b1c:	ble	33b60 <__assert_fail@plt+0x21474>
   33b20:	ldr	r1, [sp, #24]
   33b24:	add	r2, r4, r3
   33b28:	cmp	r1, r2
   33b2c:	blt	33b64 <__assert_fail@plt+0x21478>
   33b30:	ldr	r1, [r5]
   33b34:	str	r3, [sp, #24]
   33b38:	ldr	r0, [r1, r2, lsl #2]
   33b3c:	cmp	r0, #0
   33b40:	beq	33ac4 <__assert_fail@plt+0x213d8>
   33b44:	ldr	r3, [sp, #16]
   33b48:	add	r0, r0, #4
   33b4c:	ldr	r2, [r3, #12]
   33b50:	ldr	r1, [r2, r7, lsl #2]
   33b54:	bl	2caf0 <__assert_fail@plt+0x1a404>
   33b58:	ldr	r3, [sp, #24]
   33b5c:	cmp	r0, #0
   33b60:	beq	33ac4 <__assert_fail@plt+0x213d8>
   33b64:	ldr	r2, [r5, #20]
   33b68:	cmp	r2, #0
   33b6c:	beq	33b98 <__assert_fail@plt+0x214ac>
   33b70:	ldr	r2, [r9, #12]
   33b74:	add	r3, r4, r3
   33b78:	str	r4, [sp, #4]
   33b7c:	str	r7, [sp]
   33b80:	ldr	r1, [sp, #28]
   33b84:	ldr	r2, [r2, r7, lsl #2]
   33b88:	mov	r0, r6
   33b8c:	bl	2cf64 <__assert_fail@plt+0x1a878>
   33b90:	cmp	r0, #0
   33b94:	bne	33ae4 <__assert_fail@plt+0x213f8>
   33b98:	mov	r1, r7
   33b9c:	ldr	r0, [sp, #20]
   33ba0:	bl	2ff28 <__assert_fail@plt+0x1d83c>
   33ba4:	cmp	r0, #0
   33ba8:	bne	33ae4 <__assert_fail@plt+0x213f8>
   33bac:	mov	fp, #12
   33bb0:	b	33a18 <__assert_fail@plt+0x2132c>
   33bb4:	ldr	r3, [r5]
   33bb8:	ldr	r0, [r3, r8]
   33bbc:	cmp	r0, #0
   33bc0:	beq	33ae4 <__assert_fail@plt+0x213f8>
   33bc4:	ldr	r3, [r9, #12]
   33bc8:	add	r0, r0, #4
   33bcc:	ldr	r1, [r3, r7, lsl #2]
   33bd0:	bl	2caf0 <__assert_fail@plt+0x1a404>
   33bd4:	cmp	r0, #0
   33bd8:	beq	33ae4 <__assert_fail@plt+0x213f8>
   33bdc:	mov	r3, #1
   33be0:	b	33b64 <__assert_fail@plt+0x21478>
   33be4:	cmp	r4, #0
   33be8:	ble	33a18 <__assert_fail@plt+0x2132c>
   33bec:	ldr	r0, [r5]
   33bf0:	ldr	r3, [r0, r8]
   33bf4:	cmp	r3, #0
   33bf8:	movne	r3, #0
   33bfc:	ldreq	r3, [sp, #8]
   33c00:	addeq	r3, r3, #1
   33c04:	str	r3, [sp, #8]
   33c08:	ldr	r2, [sp, #8]
   33c0c:	ldr	r3, [r6, #120]	; 0x78
   33c10:	cmp	r2, r3
   33c14:	ble	33a2c <__assert_fail@plt+0x21340>
   33c18:	mov	r2, r8
   33c1c:	mov	r1, #0
   33c20:	bl	12434 <memset@plt>
   33c24:	b	33a18 <__assert_fail@plt+0x2132c>
   33c28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33c2c:	sub	sp, sp, #420	; 0x1a4
   33c30:	mov	sl, r0
   33c34:	ldr	fp, [r0]
   33c38:	str	r1, [sp, #32]
   33c3c:	str	r2, [sp, #36]	; 0x24
   33c40:	mov	r1, #0
   33c44:	mov	r2, #136	; 0x88
   33c48:	add	r0, sp, #140	; 0x8c
   33c4c:	mov	r5, r3
   33c50:	ldr	r8, [sp, #456]	; 0x1c8
   33c54:	ldr	r7, [sp, #460]	; 0x1cc
   33c58:	ldr	r6, [sp, #464]	; 0x1d0
   33c5c:	ldr	r4, [sp, #468]	; 0x1d4
   33c60:	bl	12434 <memset@plt>
   33c64:	ldr	r2, [sl, #16]
   33c68:	str	fp, [sp, #224]	; 0xe0
   33c6c:	cmp	r2, #0
   33c70:	streq	r2, [sp, #20]
   33c74:	beq	33c9c <__assert_fail@plt+0x215b0>
   33c78:	ldrb	r1, [sl, #28]
   33c7c:	subs	r3, r5, r8
   33c80:	movne	r3, #1
   33c84:	ands	r3, r3, r1, lsr #3
   33c88:	beq	33c98 <__assert_fail@plt+0x215ac>
   33c8c:	tst	r1, #1
   33c90:	moveq	r3, r2
   33c94:	movne	r3, #0
   33c98:	str	r3, [sp, #20]
   33c9c:	ldr	r3, [sl, #24]
   33ca0:	cmp	r3, r6
   33ca4:	subcc	r2, r6, #1
   33ca8:	subcc	r3, r2, r3
   33cac:	movcs	r3, #0
   33cb0:	str	r3, [sp, #68]	; 0x44
   33cb4:	ldr	r3, [sl, #8]
   33cb8:	cmp	r3, #0
   33cbc:	beq	33ccc <__assert_fail@plt+0x215e0>
   33cc0:	ldr	r2, [fp, #36]	; 0x24
   33cc4:	cmp	r2, #0
   33cc8:	bne	34e00 <__assert_fail@plt+0x22714>
   33ccc:	mov	r3, #1
   33cd0:	str	r3, [sp, #12]
   33cd4:	b	3488c <__assert_fail@plt+0x221a0>
   33cd8:	ldr	r3, [pc, #4028]	; 34c9c <__assert_fail@plt+0x225b0>
   33cdc:	cmp	r7, r3
   33ce0:	bgt	33d10 <__assert_fail@plt+0x21624>
   33ce4:	mov	r0, #24
   33ce8:	mul	r0, r0, r7
   33cec:	bl	2bf10 <__assert_fail@plt+0x19824>
   33cf0:	str	r0, [sp, #256]	; 0x100
   33cf4:	lsl	r0, r9, #3
   33cf8:	bl	2bf10 <__assert_fail@plt+0x19824>
   33cfc:	ldr	r3, [sp, #256]	; 0x100
   33d00:	cmp	r0, #0
   33d04:	cmpne	r3, #0
   33d08:	str	r0, [sp, #272]	; 0x110
   33d0c:	bne	34fc0 <__assert_fail@plt+0x228d4>
   33d10:	mov	r3, #12
   33d14:	b	33dd8 <__assert_fail@plt+0x216ec>
   33d18:	ldr	r0, [sp, #176]	; 0xb0
   33d1c:	cmn	r0, #-1073741822	; 0xc0000002
   33d20:	bhi	33d10 <__assert_fail@plt+0x21624>
   33d24:	add	r0, r0, #1
   33d28:	lsl	r0, r0, #2
   33d2c:	bl	2bf10 <__assert_fail@plt+0x19824>
   33d30:	cmp	r0, #0
   33d34:	str	r0, [sp, #240]	; 0xf0
   33d38:	bne	34fe8 <__assert_fail@plt+0x228fc>
   33d3c:	b	33d10 <__assert_fail@plt+0x21624>
   33d40:	ldr	r3, [sp, #92]	; 0x5c
   33d44:	cmp	r3, #1
   33d48:	moveq	r3, #4
   33d4c:	beq	33d70 <__assert_fail@plt+0x21684>
   33d50:	ldr	r3, [sl, #12]
   33d54:	ldr	r2, [sp, #24]
   33d58:	lsr	r3, r3, #22
   33d5c:	eor	r3, r3, #1
   33d60:	cmp	r2, #0
   33d64:	movne	r3, #0
   33d68:	andeq	r3, r3, #1
   33d6c:	lsl	r3, r3, #2
   33d70:	cmp	r5, r8
   33d74:	movle	r2, #2
   33d78:	movgt	r2, #0
   33d7c:	orr	r6, r6, r3
   33d80:	orr	r3, r6, r2
   33d84:	cmp	r5, r8
   33d88:	str	r3, [sp, #84]	; 0x54
   33d8c:	add	r3, sp, #416	; 0x1a0
   33d90:	suble	r3, r3, #308	; 0x134
   33d94:	movgt	r3, #0
   33d98:	str	r3, [sp, #88]	; 0x58
   33d9c:	adds	r3, r3, #0
   33da0:	movne	r3, #1
   33da4:	str	r3, [sp, #96]	; 0x60
   33da8:	ldr	r3, [sp, #108]	; 0x6c
   33dac:	ldr	r2, [sp, #40]	; 0x28
   33db0:	cmp	r2, r3
   33db4:	ldr	r2, [sp, #60]	; 0x3c
   33db8:	movge	r5, #0
   33dbc:	movlt	r5, #1
   33dc0:	cmp	r2, r3
   33dc4:	orrgt	r5, r5, #1
   33dc8:	cmp	r5, #0
   33dcc:	str	r5, [sp, #28]
   33dd0:	beq	33de0 <__assert_fail@plt+0x216f4>
   33dd4:	mov	r3, #1
   33dd8:	str	r3, [sp, #12]
   33ddc:	b	34858 <__assert_fail@plt+0x2216c>
   33de0:	ldr	r2, [sp, #84]	; 0x54
   33de4:	sub	r2, r2, #4
   33de8:	cmp	r2, #4
   33dec:	ldrls	pc, [pc, r2, lsl #2]
   33df0:	b	341a8 <__assert_fail@plt+0x21abc>
   33df4:			; <UNDEFINED> instruction: 0x00033ebc
   33df8:			; <UNDEFINED> instruction: 0x00033ebc
   33dfc:	andeq	r3, r3, ip, ror lr
   33e00:	andeq	r3, r3, r8, lsl #28
   33e04:	andeq	r3, r3, r4, lsl pc
   33e08:	ldr	r2, [sp, #32]
   33e0c:	ldr	r1, [sp, #28]
   33e10:	add	r3, r2, r3
   33e14:	mov	ip, #1
   33e18:	ldr	r2, [sp, #32]
   33e1c:	ldr	r0, [sp, #40]	; 0x28
   33e20:	sub	r2, r3, r2
   33e24:	cmp	r0, r2
   33e28:	bgt	33eec <__assert_fail@plt+0x21800>
   33e2c:	cmp	r1, #0
   33e30:	strne	r2, [sp, #108]	; 0x6c
   33e34:	ldr	r3, [sp, #108]	; 0x6c
   33e38:	ldr	r2, [sp, #40]	; 0x28
   33e3c:	cmp	r2, r3
   33e40:	bne	33f14 <__assert_fail@plt+0x21828>
   33e44:	ldr	r3, [sp, #36]	; 0x24
   33e48:	ldr	r2, [sp, #40]	; 0x28
   33e4c:	cmp	r3, r2
   33e50:	movle	r3, #0
   33e54:	ldrgt	r3, [sp, #32]
   33e58:	ldrbgt	r3, [r3, r2]
   33e5c:	ldr	r2, [sp, #24]
   33e60:	cmp	r2, #0
   33e64:	ldrbne	r3, [r2, r3]
   33e68:	ldr	r2, [sp, #20]
   33e6c:	ldrb	r3, [r2, r3]
   33e70:	cmp	r3, #0
   33e74:	bne	33f14 <__assert_fail@plt+0x21828>
   33e78:	b	33dd4 <__assert_fail@plt+0x216e8>
   33e7c:	ldr	r2, [sp, #32]
   33e80:	ldr	r1, [sp, #28]
   33e84:	add	r3, r2, r3
   33e88:	mov	ip, #1
   33e8c:	ldr	r2, [sp, #32]
   33e90:	ldr	r0, [sp, #40]	; 0x28
   33e94:	sub	r2, r3, r2
   33e98:	cmp	r0, r2
   33e9c:	ble	33e2c <__assert_fail@plt+0x21740>
   33ea0:	ldrb	r0, [r3], #1
   33ea4:	ldr	lr, [sp, #20]
   33ea8:	ldrb	r0, [lr, r0]
   33eac:	cmp	r0, #0
   33eb0:	bne	33f08 <__assert_fail@plt+0x2181c>
   33eb4:	mov	r1, ip
   33eb8:	b	33e8c <__assert_fail@plt+0x217a0>
   33ebc:	ldr	r1, [sp, #28]
   33ec0:	mov	ip, #0
   33ec4:	mov	lr, #1
   33ec8:	ldr	r2, [sp, #60]	; 0x3c
   33ecc:	mov	r0, r3
   33ed0:	cmp	r3, r2
   33ed4:	bge	34160 <__assert_fail@plt+0x21a74>
   33ed8:	cmp	r1, #0
   33edc:	strne	r3, [sp, #108]	; 0x6c
   33ee0:	b	33dd4 <__assert_fail@plt+0x216e8>
   33ee4:	mov	r1, ip
   33ee8:	b	33e18 <__assert_fail@plt+0x2172c>
   33eec:	ldrb	r0, [r3], #1
   33ef0:	ldr	lr, [sp, #24]
   33ef4:	ldrb	r0, [lr, r0]
   33ef8:	ldr	lr, [sp, #20]
   33efc:	ldrb	r0, [lr, r0]
   33f00:	cmp	r0, #0
   33f04:	beq	33ee4 <__assert_fail@plt+0x217f8>
   33f08:	cmp	r1, #0
   33f0c:	strne	r2, [sp, #108]	; 0x6c
   33f10:	beq	33e34 <__assert_fail@plt+0x21748>
   33f14:	ldr	r2, [sp, #472]	; 0x1d8
   33f18:	ldr	r1, [sp, #108]	; 0x6c
   33f1c:	add	r0, sp, #140	; 0x8c
   33f20:	bl	30944 <__assert_fail@plt+0x1e258>
   33f24:	subs	r3, r0, #0
   33f28:	str	r3, [sp, #12]
   33f2c:	bne	34858 <__assert_fail@plt+0x2216c>
   33f30:	ldr	r3, [sp, #92]	; 0x5c
   33f34:	cmp	r3, #1
   33f38:	beq	33f58 <__assert_fail@plt+0x2186c>
   33f3c:	ldr	r3, [sp, #168]	; 0xa8
   33f40:	cmp	r3, #0
   33f44:	beq	33f58 <__assert_fail@plt+0x2186c>
   33f48:	ldr	r3, [sp, #148]	; 0x94
   33f4c:	ldr	r3, [r3]
   33f50:	cmn	r3, #1
   33f54:	beq	342b8 <__assert_fail@plt+0x21bcc>
   33f58:	ldr	r7, [sp, #224]	; 0xe0
   33f5c:	mov	r3, #0
   33f60:	str	r3, [sp, #260]	; 0x104
   33f64:	ldr	r6, [r7, #36]	; 0x24
   33f68:	str	r3, [sp, #248]	; 0xf8
   33f6c:	str	r3, [sp, #244]	; 0xf4
   33f70:	str	r3, [sp, #116]	; 0x74
   33f74:	ldrsb	r3, [r6, #52]	; 0x34
   33f78:	ldr	r5, [sp, #180]	; 0xb4
   33f7c:	cmp	r3, #0
   33f80:	bge	33fe8 <__assert_fail@plt+0x218fc>
   33f84:	ldr	r2, [sp, #228]	; 0xe4
   33f88:	sub	r1, r5, #1
   33f8c:	add	r0, sp, #140	; 0x8c
   33f90:	bl	3067c <__assert_fail@plt+0x1df90>
   33f94:	tst	r0, #1
   33f98:	mov	r3, r0
   33f9c:	ldrne	r6, [r7, #40]	; 0x28
   33fa0:	bne	33fe8 <__assert_fail@plt+0x218fc>
   33fa4:	cmp	r0, #0
   33fa8:	beq	33fe8 <__assert_fail@plt+0x218fc>
   33fac:	and	r2, r0, #6
   33fb0:	cmp	r2, #6
   33fb4:	ldreq	r6, [r7, #48]	; 0x30
   33fb8:	beq	33fe8 <__assert_fail@plt+0x218fc>
   33fbc:	tst	r0, #2
   33fc0:	ldrne	r6, [r7, #44]	; 0x2c
   33fc4:	bne	33fe8 <__assert_fail@plt+0x218fc>
   33fc8:	tst	r0, #4
   33fcc:	beq	33fe8 <__assert_fail@plt+0x218fc>
   33fd0:	ldr	r2, [r6, #40]	; 0x28
   33fd4:	mov	r1, r7
   33fd8:	add	r0, sp, #116	; 0x74
   33fdc:	bl	2f8f0 <__assert_fail@plt+0x1d204>
   33fe0:	subs	r6, r0, #0
   33fe4:	beq	33d10 <__assert_fail@plt+0x21624>
   33fe8:	ldr	r3, [sp, #240]	; 0xf0
   33fec:	cmp	r3, #0
   33ff0:	beq	34264 <__assert_fail@plt+0x21b78>
   33ff4:	str	r6, [r3, r5, lsl #2]
   33ff8:	ldr	r3, [r7, #76]	; 0x4c
   33ffc:	cmp	r3, #0
   34000:	beq	34264 <__assert_fail@plt+0x21b78>
   34004:	add	r7, r6, #4
   34008:	mov	r2, #0
   3400c:	mov	r1, r7
   34010:	add	r0, sp, #140	; 0x8c
   34014:	bl	2e470 <__assert_fail@plt+0x1bd84>
   34018:	cmp	r0, #0
   3401c:	str	r0, [sp, #116]	; 0x74
   34020:	bne	3425c <__assert_fail@plt+0x21b70>
   34024:	ldrb	r3, [r6, #52]	; 0x34
   34028:	tst	r3, #64	; 0x40
   3402c:	bne	34244 <__assert_fail@plt+0x21b58>
   34030:	ldr	r3, [sp, #28]
   34034:	ldrb	r0, [r6, #52]	; 0x34
   34038:	str	r3, [sp, #44]	; 0x2c
   3403c:	lsr	r0, r0, #4
   34040:	ands	r0, r0, #1
   34044:	bne	3426c <__assert_fail@plt+0x21b80>
   34048:	mvn	r3, #0
   3404c:	str	r0, [sp, #52]	; 0x34
   34050:	str	r5, [sp, #72]	; 0x48
   34054:	mov	r5, r3
   34058:	ldr	r3, [sp, #88]	; 0x58
   3405c:	str	r3, [sp, #48]	; 0x30
   34060:	ldr	r1, [sp, #180]	; 0xb4
   34064:	ldr	r3, [sp, #196]	; 0xc4
   34068:	cmp	r1, r3
   3406c:	bge	34138 <__assert_fail@plt+0x21a4c>
   34070:	add	r3, r1, #1
   34074:	str	r3, [sp, #64]	; 0x40
   34078:	ldr	r3, [sp, #176]	; 0xb0
   3407c:	add	r2, r1, #1
   34080:	cmp	r2, r3
   34084:	blt	34094 <__assert_fail@plt+0x219a8>
   34088:	ldr	r2, [sp, #188]	; 0xbc
   3408c:	cmp	r3, r2
   34090:	blt	340b0 <__assert_fail@plt+0x219c4>
   34094:	ldr	r3, [sp, #168]	; 0xa8
   34098:	add	r2, r1, #1
   3409c:	cmp	r2, r3
   340a0:	blt	340c8 <__assert_fail@plt+0x219dc>
   340a4:	ldr	r2, [sp, #188]	; 0xbc
   340a8:	cmp	r3, r2
   340ac:	bge	340c8 <__assert_fail@plt+0x219dc>
   340b0:	add	r1, r1, #2
   340b4:	add	r0, sp, #140	; 0x8c
   340b8:	bl	2dce0 <__assert_fail@plt+0x1b5f4>
   340bc:	cmp	r0, #0
   340c0:	str	r0, [sp, #116]	; 0x74
   340c4:	bne	33d10 <__assert_fail@plt+0x21624>
   340c8:	ldrb	r3, [r6, #52]	; 0x34
   340cc:	tst	r3, #32
   340d0:	bne	342cc <__assert_fail@plt+0x21be0>
   340d4:	ldr	r3, [sp, #180]	; 0xb4
   340d8:	add	r2, r3, #1
   340dc:	str	r2, [sp, #180]	; 0xb4
   340e0:	ldr	r2, [sp, #144]	; 0x90
   340e4:	ldrb	r8, [r2, r3]
   340e8:	ldr	r3, [r6, #44]	; 0x2c
   340ec:	cmp	r3, #0
   340f0:	beq	34490 <__assert_fail@plt+0x21da4>
   340f4:	ldr	r7, [r3, r8, lsl #2]
   340f8:	ldr	r3, [sp, #240]	; 0xf0
   340fc:	cmp	r3, #0
   34100:	beq	34118 <__assert_fail@plt+0x21a2c>
   34104:	mov	r2, r7
   34108:	add	r1, sp, #140	; 0x8c
   3410c:	add	r0, sp, #116	; 0x74
   34110:	bl	33280 <__assert_fail@plt+0x20b94>
   34114:	mov	r7, r0
   34118:	cmp	r7, #0
   3411c:	bne	34560 <__assert_fail@plt+0x21e74>
   34120:	ldr	r3, [sp, #116]	; 0x74
   34124:	cmp	r3, #0
   34128:	bne	33d10 <__assert_fail@plt+0x21624>
   3412c:	ldr	r3, [sp, #240]	; 0xf0
   34130:	cmp	r3, #0
   34134:	bne	344e0 <__assert_fail@plt+0x21df4>
   34138:	ldr	r3, [sp, #48]	; 0x30
   3413c:	cmp	r3, #0
   34140:	beq	342a8 <__assert_fail@plt+0x21bbc>
   34144:	ldr	r3, [sp, #48]	; 0x30
   34148:	ldr	r2, [sp, #72]	; 0x48
   3414c:	ldr	r3, [r3]
   34150:	add	r3, r3, r2
   34154:	ldr	r2, [sp, #48]	; 0x30
   34158:	str	r3, [r2]
   3415c:	b	342a8 <__assert_fail@plt+0x21bbc>
   34160:	ldr	r2, [sp, #36]	; 0x24
   34164:	ldr	r5, [sp, #24]
   34168:	cmp	r2, r3
   3416c:	movle	r2, ip
   34170:	ldrgt	r2, [sp, #32]
   34174:	ldrbgt	r2, [r2, r3]
   34178:	cmp	r5, #0
   3417c:	sub	r3, r3, #1
   34180:	ldrbne	r2, [r5, r2]
   34184:	ldr	r5, [sp, #20]
   34188:	ldrb	r2, [r5, r2]
   3418c:	cmp	r2, #0
   34190:	beq	341a0 <__assert_fail@plt+0x21ab4>
   34194:	cmp	r1, #0
   34198:	strne	r0, [sp, #108]	; 0x6c
   3419c:	b	33f14 <__assert_fail@plt+0x21828>
   341a0:	mov	r1, lr
   341a4:	b	33ec8 <__assert_fail@plt+0x217dc>
   341a8:	mov	r6, #0
   341ac:	ldr	r5, [sp, #108]	; 0x6c
   341b0:	ldr	r3, [sp, #164]	; 0xa4
   341b4:	ldr	r2, [sp, #172]	; 0xac
   341b8:	sub	r3, r5, r3
   341bc:	cmp	r3, r2
   341c0:	bcc	341e8 <__assert_fail@plt+0x21afc>
   341c4:	ldr	r2, [sp, #472]	; 0x1d8
   341c8:	mov	r1, r5
   341cc:	add	r0, sp, #140	; 0x8c
   341d0:	bl	30944 <__assert_fail@plt+0x1e258>
   341d4:	subs	r3, r0, #0
   341d8:	str	r3, [sp, #12]
   341dc:	bne	34858 <__assert_fail@plt+0x2216c>
   341e0:	ldr	r3, [sp, #164]	; 0xa4
   341e4:	sub	r3, r5, r3
   341e8:	ldr	r2, [sp, #168]	; 0xa8
   341ec:	cmp	r3, r2
   341f0:	movcs	r3, r6
   341f4:	ldrcc	r2, [sp, #144]	; 0x90
   341f8:	ldrbcc	r3, [r2, r3]
   341fc:	ldr	r2, [sp, #20]
   34200:	ldrb	r3, [r2, r3]
   34204:	cmp	r3, #0
   34208:	bne	33f14 <__assert_fail@plt+0x21828>
   3420c:	ldr	r3, [sp, #80]	; 0x50
   34210:	ldr	r2, [sp, #60]	; 0x3c
   34214:	add	r5, r3, r5
   34218:	ldr	r3, [sp, #40]	; 0x28
   3421c:	str	r5, [sp, #108]	; 0x6c
   34220:	cmp	r3, r5
   34224:	movge	r3, #0
   34228:	movlt	r3, #1
   3422c:	cmp	r2, r5
   34230:	movle	r5, r3
   34234:	orrgt	r5, r3, #1
   34238:	cmp	r5, #0
   3423c:	beq	341ac <__assert_fail@plt+0x21ac0>
   34240:	b	33dd4 <__assert_fail@plt+0x216e8>
   34244:	mov	r1, r7
   34248:	add	r0, sp, #140	; 0x8c
   3424c:	bl	32c4c <__assert_fail@plt+0x20560>
   34250:	cmp	r0, #0
   34254:	str	r0, [sp, #116]	; 0x74
   34258:	beq	34030 <__assert_fail@plt+0x21944>
   3425c:	mov	r5, r0
   34260:	b	342a8 <__assert_fail@plt+0x21bbc>
   34264:	ldr	r3, [sp, #96]	; 0x60
   34268:	b	34034 <__assert_fail@plt+0x21948>
   3426c:	ldrsb	r3, [r6, #52]	; 0x34
   34270:	cmp	r3, #0
   34274:	bge	34290 <__assert_fail@plt+0x21ba4>
   34278:	mov	r2, r5
   3427c:	mov	r1, r6
   34280:	add	r0, sp, #140	; 0x8c
   34284:	bl	30888 <__assert_fail@plt+0x1e19c>
   34288:	cmp	r0, #0
   3428c:	beq	34048 <__assert_fail@plt+0x2195c>
   34290:	ldr	r3, [sp, #56]	; 0x38
   34294:	cmp	r3, #0
   34298:	movne	r2, #1
   3429c:	movne	r3, r5
   342a0:	strne	r2, [sp, #52]	; 0x34
   342a4:	bne	34050 <__assert_fail@plt+0x21964>
   342a8:	cmn	r5, #1
   342ac:	bne	345f4 <__assert_fail@plt+0x21f08>
   342b0:	add	r0, sp, #140	; 0x8c
   342b4:	bl	2e23c <__assert_fail@plt+0x1bb50>
   342b8:	ldr	r3, [sp, #108]	; 0x6c
   342bc:	ldr	r2, [sp, #80]	; 0x50
   342c0:	add	r3, r3, r2
   342c4:	str	r3, [sp, #108]	; 0x6c
   342c8:	b	33da8 <__assert_fail@plt+0x216bc>
   342cc:	ldr	r8, [sp, #224]	; 0xe0
   342d0:	mov	r9, #0
   342d4:	ldr	r3, [r6, #8]
   342d8:	cmp	r9, r3
   342dc:	ldrge	r0, [sp, #12]
   342e0:	bge	3447c <__assert_fail@plt+0x21d90>
   342e4:	ldr	r3, [r6, #12]
   342e8:	ldr	r3, [r3, r9, lsl #2]
   342ec:	str	r3, [sp, #76]	; 0x4c
   342f0:	ldr	r2, [sp, #76]	; 0x4c
   342f4:	ldr	r3, [r8]
   342f8:	add	r3, r3, r2, lsl #3
   342fc:	ldrb	r2, [r3, #6]
   34300:	tst	r2, #16
   34304:	beq	34458 <__assert_fail@plt+0x21d6c>
   34308:	ldr	r7, [r3, #4]
   3430c:	ldr	r3, [pc, #2444]	; 34ca0 <__assert_fail@plt+0x225b4>
   34310:	tst	r7, r3
   34314:	beq	34370 <__assert_fail@plt+0x21c84>
   34318:	ldr	r2, [sp, #228]	; 0xe4
   3431c:	ldr	r1, [sp, #180]	; 0xb4
   34320:	add	r0, sp, #140	; 0x8c
   34324:	bl	3067c <__assert_fail@plt+0x1df90>
   34328:	ldr	r3, [pc, #2420]	; 34ca4 <__assert_fail@plt+0x225b8>
   3432c:	and	r3, r3, r7, lsr #8
   34330:	tst	r3, #4
   34334:	beq	34340 <__assert_fail@plt+0x21c54>
   34338:	tst	r0, #1
   3433c:	beq	34458 <__assert_fail@plt+0x21d6c>
   34340:	tst	r3, #8
   34344:	beq	34350 <__assert_fail@plt+0x21c64>
   34348:	tst	r0, #1
   3434c:	bne	34458 <__assert_fail@plt+0x21d6c>
   34350:	tst	r3, #32
   34354:	beq	34360 <__assert_fail@plt+0x21c74>
   34358:	tst	r0, #2
   3435c:	beq	34458 <__assert_fail@plt+0x21d6c>
   34360:	tst	r3, #128	; 0x80
   34364:	beq	34370 <__assert_fail@plt+0x21c84>
   34368:	tst	r0, #8
   3436c:	beq	34458 <__assert_fail@plt+0x21d6c>
   34370:	ldr	r3, [sp, #180]	; 0xb4
   34374:	add	r2, sp, #140	; 0x8c
   34378:	ldr	r1, [sp, #76]	; 0x4c
   3437c:	mov	r0, r8
   34380:	bl	2f33c <__assert_fail@plt+0x1cc50>
   34384:	cmp	r0, #0
   34388:	beq	34458 <__assert_fail@plt+0x21d6c>
   3438c:	ldr	r7, [sp, #180]	; 0xb4
   34390:	ldr	r3, [sp, #260]	; 0x104
   34394:	add	r7, r0, r7
   34398:	cmp	r3, r0
   3439c:	strge	r3, [sp, #260]	; 0x104
   343a0:	strlt	r0, [sp, #260]	; 0x104
   343a4:	mov	r1, r7
   343a8:	add	r0, sp, #140	; 0x8c
   343ac:	bl	2e574 <__assert_fail@plt+0x1be88>
   343b0:	cmp	r0, #0
   343b4:	str	r0, [sp, #128]	; 0x80
   343b8:	bne	3447c <__assert_fail@plt+0x21d90>
   343bc:	ldr	r3, [r8, #12]
   343c0:	ldr	r2, [sp, #76]	; 0x4c
   343c4:	mov	r1, #12
   343c8:	ldr	r2, [r3, r2, lsl #2]
   343cc:	ldr	r3, [r8, #24]
   343d0:	mla	r2, r1, r2, r3
   343d4:	ldr	r3, [sp, #240]	; 0xf0
   343d8:	ldr	r3, [r3, r7, lsl #2]
   343dc:	cmp	r3, #0
   343e0:	str	r3, [sp, #76]	; 0x4c
   343e4:	bne	34460 <__assert_fail@plt+0x21d74>
   343e8:	ldm	r2, {r0, r1, r2}
   343ec:	add	r3, sp, #276	; 0x114
   343f0:	stm	r3, {r0, r1, r2}
   343f4:	sub	r1, r7, #1
   343f8:	ldr	r2, [sp, #228]	; 0xe4
   343fc:	add	r0, sp, #140	; 0x8c
   34400:	bl	3067c <__assert_fail@plt+0x1df90>
   34404:	ldr	r3, [sp, #240]	; 0xf0
   34408:	add	r2, sp, #276	; 0x114
   3440c:	str	r3, [sp, #100]	; 0x64
   34410:	mov	r1, r8
   34414:	mov	r3, r0
   34418:	add	r0, sp, #128	; 0x80
   3441c:	bl	2f8f0 <__assert_fail@plt+0x1d204>
   34420:	ldr	r3, [sp, #100]	; 0x64
   34424:	str	r0, [r3, r7, lsl #2]
   34428:	ldr	r3, [sp, #76]	; 0x4c
   3442c:	cmp	r3, #0
   34430:	beq	3443c <__assert_fail@plt+0x21d50>
   34434:	ldr	r0, [sp, #284]	; 0x11c
   34438:	bl	2a01c <__assert_fail@plt+0x17930>
   3443c:	ldr	r3, [sp, #240]	; 0xf0
   34440:	ldr	r3, [r3, r7, lsl #2]
   34444:	cmp	r3, #0
   34448:	bne	34458 <__assert_fail@plt+0x21d6c>
   3444c:	ldr	r0, [sp, #128]	; 0x80
   34450:	cmp	r0, #0
   34454:	bne	3447c <__assert_fail@plt+0x21d90>
   34458:	add	r9, r9, #1
   3445c:	b	342d4 <__assert_fail@plt+0x21be8>
   34460:	ldr	r3, [sp, #76]	; 0x4c
   34464:	add	r0, sp, #276	; 0x114
   34468:	ldr	r1, [r3, #40]	; 0x28
   3446c:	bl	2f7b8 <__assert_fail@plt+0x1d0cc>
   34470:	cmp	r0, #0
   34474:	str	r0, [sp, #128]	; 0x80
   34478:	beq	343f4 <__assert_fail@plt+0x21d08>
   3447c:	cmp	r0, #0
   34480:	str	r0, [sp, #116]	; 0x74
   34484:	beq	340d4 <__assert_fail@plt+0x219e8>
   34488:	mov	r7, #0
   3448c:	b	340f8 <__assert_fail@plt+0x21a0c>
   34490:	ldr	r7, [r6, #48]	; 0x30
   34494:	cmp	r7, #0
   34498:	beq	344c0 <__assert_fail@plt+0x21dd4>
   3449c:	ldr	r1, [sp, #180]	; 0xb4
   344a0:	ldr	r2, [sp, #228]	; 0xe4
   344a4:	sub	r1, r1, #1
   344a8:	add	r0, sp, #140	; 0x8c
   344ac:	bl	3067c <__assert_fail@plt+0x1df90>
   344b0:	tst	r0, #1
   344b4:	addne	r8, r8, #256	; 0x100
   344b8:	ldr	r7, [r7, r8, lsl #2]
   344bc:	b	340f8 <__assert_fail@plt+0x21a0c>
   344c0:	mov	r1, r6
   344c4:	ldr	r0, [sp, #224]	; 0xe0
   344c8:	bl	318b8 <__assert_fail@plt+0x1f1cc>
   344cc:	subs	r7, r0, #0
   344d0:	bne	340e8 <__assert_fail@plt+0x219fc>
   344d4:	mov	r3, #12
   344d8:	str	r3, [sp, #116]	; 0x74
   344dc:	b	340f8 <__assert_fail@plt+0x21a0c>
   344e0:	ldr	r3, [sp, #56]	; 0x38
   344e4:	eor	r8, r3, #1
   344e8:	ldr	r3, [sp, #52]	; 0x34
   344ec:	ands	r8, r8, r3
   344f0:	bne	34138 <__assert_fail@plt+0x21a4c>
   344f4:	mov	r9, #1
   344f8:	ldr	ip, [sp, #244]	; 0xf4
   344fc:	ldr	r3, [sp, #180]	; 0xb4
   34500:	ldr	r0, [sp, #240]	; 0xf0
   34504:	mov	r2, r8
   34508:	add	r1, r3, #1
   3450c:	cmp	ip, r1
   34510:	bge	34520 <__assert_fail@plt+0x21e34>
   34514:	cmp	r2, #0
   34518:	strne	r3, [sp, #180]	; 0xb4
   3451c:	b	34138 <__assert_fail@plt+0x21a4c>
   34520:	mov	r3, r1
   34524:	ldr	r1, [r0, r1, lsl #2]
   34528:	mov	r2, r9
   3452c:	cmp	r1, #0
   34530:	beq	34508 <__assert_fail@plt+0x21e1c>
   34534:	mov	r2, #0
   34538:	add	r1, sp, #140	; 0x8c
   3453c:	add	r0, sp, #116	; 0x74
   34540:	str	r3, [sp, #180]	; 0xb4
   34544:	bl	33280 <__assert_fail@plt+0x20b94>
   34548:	ldr	r3, [sp, #116]	; 0x74
   3454c:	cmp	r3, #0
   34550:	mov	r7, r0
   34554:	bne	345e8 <__assert_fail@plt+0x21efc>
   34558:	cmp	r0, #0
   3455c:	beq	344f8 <__assert_fail@plt+0x21e0c>
   34560:	ldr	r3, [sp, #44]	; 0x2c
   34564:	ldr	r2, [sp, #72]	; 0x48
   34568:	cmp	r6, r7
   3456c:	movne	r3, #0
   34570:	andeq	r3, r3, #1
   34574:	str	r3, [sp, #44]	; 0x2c
   34578:	ldr	r1, [sp, #44]	; 0x2c
   3457c:	ldr	r3, [sp, #64]	; 0x40
   34580:	cmp	r1, #0
   34584:	moveq	r3, r2
   34588:	str	r3, [sp, #64]	; 0x40
   3458c:	ldrb	r3, [r7, #52]	; 0x34
   34590:	tst	r3, #16
   34594:	beq	345d8 <__assert_fail@plt+0x21eec>
   34598:	tst	r3, #128	; 0x80
   3459c:	beq	345b8 <__assert_fail@plt+0x21ecc>
   345a0:	ldr	r2, [sp, #180]	; 0xb4
   345a4:	mov	r1, r7
   345a8:	add	r0, sp, #140	; 0x8c
   345ac:	bl	30888 <__assert_fail@plt+0x1e19c>
   345b0:	cmp	r0, #0
   345b4:	beq	345d8 <__assert_fail@plt+0x21eec>
   345b8:	ldr	r3, [sp, #56]	; 0x38
   345bc:	ldr	r5, [sp, #180]	; 0xb4
   345c0:	cmp	r3, #0
   345c4:	beq	342a8 <__assert_fail@plt+0x21bbc>
   345c8:	mov	r3, #1
   345cc:	str	r3, [sp, #52]	; 0x34
   345d0:	mov	r3, #0
   345d4:	str	r3, [sp, #48]	; 0x30
   345d8:	ldr	r3, [sp, #64]	; 0x40
   345dc:	mov	r6, r7
   345e0:	str	r3, [sp, #72]	; 0x48
   345e4:	b	34060 <__assert_fail@plt+0x21974>
   345e8:	cmp	r0, #0
   345ec:	bne	34560 <__assert_fail@plt+0x21e74>
   345f0:	b	34138 <__assert_fail@plt+0x21a4c>
   345f4:	cmn	r5, #2
   345f8:	beq	33d10 <__assert_fail@plt+0x21624>
   345fc:	ldrb	r6, [sl, #28]
   34600:	ldr	r3, [sp, #16]
   34604:	str	r5, [sp, #232]	; 0xe8
   34608:	lsr	r6, r6, #4
   3460c:	eor	r6, r6, #1
   34610:	cmp	r3, #1
   34614:	movls	r6, #0
   34618:	andhi	r6, r6, #1
   3461c:	cmp	r6, #0
   34620:	bne	34630 <__assert_fail@plt+0x21f44>
   34624:	ldr	r3, [fp, #76]	; 0x4c
   34628:	cmp	r3, #0
   3462c:	beq	3465c <__assert_fail@plt+0x21f70>
   34630:	ldr	r3, [sp, #240]	; 0xf0
   34634:	mov	r2, r5
   34638:	add	r0, sp, #140	; 0x8c
   3463c:	ldr	r1, [r3, r5, lsl #2]
   34640:	bl	30888 <__assert_fail@plt+0x1e19c>
   34644:	cmp	r6, #0
   34648:	str	r0, [sp, #236]	; 0xec
   3464c:	beq	3465c <__assert_fail@plt+0x21f70>
   34650:	ldrb	r3, [fp, #88]	; 0x58
   34654:	tst	r3, #1
   34658:	bne	34668 <__assert_fail@plt+0x21f7c>
   3465c:	ldr	r3, [fp, #76]	; 0x4c
   34660:	cmp	r3, #0
   34664:	beq	34840 <__assert_fail@plt+0x22154>
   34668:	ldr	r3, [sp, #224]	; 0xe0
   3466c:	cmn	r5, #-1073741822	; 0xc0000002
   34670:	str	r3, [sp, #48]	; 0x30
   34674:	ldr	r3, [sp, #236]	; 0xec
   34678:	str	r3, [sp, #44]	; 0x2c
   3467c:	bhi	33d10 <__assert_fail@plt+0x21624>
   34680:	add	r9, r5, #1
   34684:	lsl	r9, r9, #2
   34688:	mov	r0, r9
   3468c:	bl	2bf10 <__assert_fail@plt+0x19824>
   34690:	subs	r7, r0, #0
   34694:	beq	34804 <__assert_fail@plt+0x22118>
   34698:	ldr	r3, [sp, #48]	; 0x30
   3469c:	ldr	r6, [r3, #76]	; 0x4c
   346a0:	cmp	r6, #0
   346a4:	beq	34794 <__assert_fail@plt+0x220a8>
   346a8:	mov	r0, r9
   346ac:	bl	2bf10 <__assert_fail@plt+0x19824>
   346b0:	subs	r6, r0, #0
   346b4:	beq	34808 <__assert_fail@plt+0x2211c>
   346b8:	mov	r9, #0
   346bc:	add	r3, r5, #1
   346c0:	mov	r1, r9
   346c4:	lsl	r2, r3, #2
   346c8:	mov	r0, r6
   346cc:	str	r3, [sp, #52]	; 0x34
   346d0:	bl	12434 <memset@plt>
   346d4:	ldr	r3, [sp, #44]	; 0x2c
   346d8:	add	r1, sp, #276	; 0x114
   346dc:	add	r0, sp, #140	; 0x8c
   346e0:	str	r3, [sp, #284]	; 0x11c
   346e4:	str	r7, [sp, #276]	; 0x114
   346e8:	str	r6, [sp, #280]	; 0x118
   346ec:	str	r5, [sp, #288]	; 0x120
   346f0:	str	r9, [sp, #292]	; 0x124
   346f4:	str	r9, [sp, #296]	; 0x128
   346f8:	str	r9, [sp, #300]	; 0x12c
   346fc:	bl	339c4 <__assert_fail@plt+0x212d8>
   34700:	mov	r8, r0
   34704:	ldr	r0, [sp, #300]	; 0x12c
   34708:	bl	2a01c <__assert_fail@plt+0x17930>
   3470c:	cmp	r8, #0
   34710:	bne	3480c <__assert_fail@plt+0x22120>
   34714:	ldr	r3, [r7]
   34718:	cmp	r3, #0
   3471c:	bne	34764 <__assert_fail@plt+0x22078>
   34720:	ldr	r3, [r6]
   34724:	cmp	r3, #0
   34728:	bne	34764 <__assert_fail@plt+0x22078>
   3472c:	ldr	r2, [sp, #240]	; 0xf0
   34730:	subs	r5, r5, #1
   34734:	bcc	34838 <__assert_fail@plt+0x2214c>
   34738:	ldr	r1, [r2, r5, lsl #2]
   3473c:	cmp	r1, #0
   34740:	beq	34730 <__assert_fail@plt+0x22044>
   34744:	ldrb	r3, [r1, #52]	; 0x34
   34748:	tst	r3, #16
   3474c:	beq	34730 <__assert_fail@plt+0x22044>
   34750:	mov	r2, r5
   34754:	add	r0, sp, #140	; 0x8c
   34758:	bl	30888 <__assert_fail@plt+0x1e19c>
   3475c:	str	r0, [sp, #44]	; 0x2c
   34760:	b	346bc <__assert_fail@plt+0x21fd0>
   34764:	add	r3, r5, #1
   34768:	mov	r2, r6
   3476c:	mov	r1, r7
   34770:	ldr	r0, [sp, #48]	; 0x30
   34774:	bl	32354 <__assert_fail@plt+0x1fc68>
   34778:	mov	r8, r0
   3477c:	mov	r0, r6
   34780:	bl	2a01c <__assert_fail@plt+0x17930>
   34784:	cmp	r8, #0
   34788:	beq	347e0 <__assert_fail@plt+0x220f4>
   3478c:	mov	r6, #0
   34790:	b	3480c <__assert_fail@plt+0x22120>
   34794:	ldr	r3, [sp, #44]	; 0x2c
   34798:	add	r1, sp, #276	; 0x114
   3479c:	add	r0, sp, #140	; 0x8c
   347a0:	str	r3, [sp, #284]	; 0x11c
   347a4:	str	r7, [sp, #276]	; 0x114
   347a8:	str	r6, [sp, #280]	; 0x118
   347ac:	str	r5, [sp, #288]	; 0x120
   347b0:	str	r6, [sp, #292]	; 0x124
   347b4:	str	r6, [sp, #296]	; 0x128
   347b8:	str	r6, [sp, #300]	; 0x12c
   347bc:	bl	339c4 <__assert_fail@plt+0x212d8>
   347c0:	mov	r8, r0
   347c4:	ldr	r0, [sp, #300]	; 0x12c
   347c8:	bl	2a01c <__assert_fail@plt+0x17930>
   347cc:	cmp	r8, #0
   347d0:	bne	3480c <__assert_fail@plt+0x22120>
   347d4:	ldr	r2, [r7]
   347d8:	cmp	r2, #0
   347dc:	beq	34834 <__assert_fail@plt+0x22148>
   347e0:	ldr	r0, [sp, #240]	; 0xf0
   347e4:	bl	2a01c <__assert_fail@plt+0x17930>
   347e8:	ldr	r3, [sp, #44]	; 0x2c
   347ec:	str	r7, [sp, #240]	; 0xf0
   347f0:	str	r3, [sp, #236]	; 0xec
   347f4:	str	r5, [sp, #232]	; 0xe8
   347f8:	ldr	r8, [sp, #12]
   347fc:	mov	r7, #0
   34800:	b	3478c <__assert_fail@plt+0x220a0>
   34804:	mov	r6, r7
   34808:	mov	r8, #12
   3480c:	mov	r0, r7
   34810:	bl	2a01c <__assert_fail@plt+0x17930>
   34814:	mov	r0, r6
   34818:	bl	2a01c <__assert_fail@plt+0x17930>
   3481c:	cmp	r8, #0
   34820:	beq	34840 <__assert_fail@plt+0x22154>
   34824:	cmp	r8, #1
   34828:	beq	342b0 <__assert_fail@plt+0x21bc4>
   3482c:	str	r8, [sp, #12]
   34830:	b	34858 <__assert_fail@plt+0x2216c>
   34834:	mov	r6, r8
   34838:	mov	r8, #1
   3483c:	b	3480c <__assert_fail@plt+0x22120>
   34840:	ldr	r3, [sp, #16]
   34844:	cmp	r3, #0
   34848:	addne	r3, r4, #8
   3484c:	movne	r7, #1
   34850:	mvnne	r2, #0
   34854:	bne	348a4 <__assert_fail@plt+0x221b8>
   34858:	ldr	r0, [sp, #240]	; 0xf0
   3485c:	bl	2a01c <__assert_fail@plt+0x17930>
   34860:	ldr	r3, [fp, #76]	; 0x4c
   34864:	cmp	r3, #0
   34868:	beq	34884 <__assert_fail@plt+0x22198>
   3486c:	add	r0, sp, #140	; 0x8c
   34870:	bl	2e23c <__assert_fail@plt+0x1bb50>
   34874:	ldr	r0, [sp, #272]	; 0x110
   34878:	bl	2a01c <__assert_fail@plt+0x17930>
   3487c:	ldr	r0, [sp, #256]	; 0x100
   34880:	bl	2a01c <__assert_fail@plt+0x17930>
   34884:	add	r0, sp, #140	; 0x8c
   34888:	bl	2e0b0 <__assert_fail@plt+0x1b9c4>
   3488c:	ldr	r0, [sp, #12]
   34890:	add	sp, sp, #420	; 0x1a4
   34894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34898:	add	r7, r7, #1
   3489c:	str	r2, [r3, #-4]
   348a0:	str	r2, [r3, #-8]
   348a4:	ldr	r1, [sp, #16]
   348a8:	add	r3, r3, #8
   348ac:	cmp	r7, r1
   348b0:	bne	34898 <__assert_fail@plt+0x221ac>
   348b4:	mov	r3, #0
   348b8:	str	r3, [r4]
   348bc:	ldr	r3, [sp, #232]	; 0xe8
   348c0:	str	r3, [r4, #4]
   348c4:	ldrb	r3, [sl, #28]
   348c8:	lsr	r3, r3, #4
   348cc:	eor	r3, r3, #1
   348d0:	cmp	r7, #1
   348d4:	moveq	r3, #0
   348d8:	andne	r3, r3, #1
   348dc:	cmp	r3, #0
   348e0:	bne	349d8 <__assert_fail@plt+0x222ec>
   348e4:	ldrb	r8, [sp, #216]	; 0xd8
   348e8:	ldr	ip, [sp, #168]	; 0xa8
   348ec:	ldr	r5, [sp, #152]	; 0x98
   348f0:	ldr	lr, [sp, #172]	; 0xac
   348f4:	ldr	r6, [sp, #108]	; 0x6c
   348f8:	mov	r1, r4
   348fc:	mov	r2, r4
   34900:	mov	r3, #0
   34904:	ldr	r0, [r4, r3, lsl #3]
   34908:	cmn	r0, #1
   3490c:	beq	34954 <__assert_fail@plt+0x22268>
   34910:	cmp	r8, #0
   34914:	beq	3493c <__assert_fail@plt+0x22250>
   34918:	cmp	r0, ip
   3491c:	moveq	r0, lr
   34920:	ldrne	r0, [r5, r0, lsl #2]
   34924:	str	r0, [r4, r3, lsl #3]
   34928:	ldr	r0, [r2, #4]
   3492c:	cmp	ip, r0
   34930:	moveq	r0, lr
   34934:	ldrne	r0, [r5, r0, lsl #2]
   34938:	str	r0, [r2, #4]
   3493c:	ldr	r0, [r4, r3, lsl #3]
   34940:	add	r0, r0, r6
   34944:	str	r0, [r4, r3, lsl #3]
   34948:	ldr	r0, [r2, #4]
   3494c:	add	r0, r0, r6
   34950:	str	r0, [r2, #4]
   34954:	add	r3, r3, #1
   34958:	cmp	r7, r3
   3495c:	add	r2, r2, #8
   34960:	bne	34904 <__assert_fail@plt+0x22218>
   34964:	ldr	r2, [sp, #16]
   34968:	mvn	r0, #0
   3496c:	add	r6, r4, r2, lsl #3
   34970:	mov	r2, #0
   34974:	ldr	ip, [sp, #68]	; 0x44
   34978:	add	r6, r6, #8
   3497c:	cmp	r2, ip
   34980:	blt	34df0 <__assert_fail@plt+0x22704>
   34984:	ldr	r2, [fp, #132]	; 0x84
   34988:	cmp	r2, #0
   3498c:	movne	ip, #0
   34990:	beq	34858 <__assert_fail@plt+0x2216c>
   34994:	add	lr, ip, #1
   34998:	cmp	r3, lr
   3499c:	beq	34858 <__assert_fail@plt+0x2216c>
   349a0:	ldr	r0, [r2]
   349a4:	cmp	ip, r0
   349a8:	beq	349c8 <__assert_fail@plt+0x222dc>
   349ac:	add	r0, r0, #1
   349b0:	ldr	r0, [r4, r0, lsl #3]
   349b4:	str	r0, [r1, #8]
   349b8:	ldr	r0, [r2]
   349bc:	add	r0, r4, r0, lsl #3
   349c0:	ldr	r0, [r0, #12]
   349c4:	str	r0, [r1, #12]
   349c8:	add	r2, r2, #4
   349cc:	add	r1, r1, #8
   349d0:	mov	ip, lr
   349d4:	b	34994 <__assert_fail@plt+0x222a8>
   349d8:	ldrb	r3, [fp, #88]	; 0x58
   349dc:	tst	r3, #1
   349e0:	beq	349f8 <__assert_fail@plt+0x2230c>
   349e4:	ldr	r5, [fp, #76]	; 0x4c
   349e8:	cmp	r5, #0
   349ec:	movle	r3, #0
   349f0:	movgt	r3, #1
   349f4:	str	r3, [sp, #28]
   349f8:	ldr	r3, [sl]
   349fc:	mov	r2, #2
   34a00:	str	r3, [sp, #32]
   34a04:	mov	r3, #0
   34a08:	str	r3, [sp, #128]	; 0x80
   34a0c:	str	r3, [sp, #136]	; 0x88
   34a10:	str	r3, [sp, #276]	; 0x114
   34a14:	mov	r3, #16
   34a18:	str	r3, [sp, #280]	; 0x118
   34a1c:	add	r3, sp, #288	; 0x120
   34a20:	str	r3, [sp, #284]	; 0x11c
   34a24:	ldr	r3, [sp, #28]
   34a28:	str	r2, [sp, #132]	; 0x84
   34a2c:	cmp	r3, #0
   34a30:	beq	34ad8 <__assert_fail@plt+0x223ec>
   34a34:	mov	r0, #48	; 0x30
   34a38:	bl	2bf10 <__assert_fail@plt+0x19824>
   34a3c:	cmp	r0, #0
   34a40:	str	r0, [sp, #136]	; 0x88
   34a44:	addne	r5, sp, #128	; 0x80
   34a48:	beq	33d10 <__assert_fail@plt+0x21624>
   34a4c:	ldr	r3, [sp, #32]
   34a50:	ldr	r2, [sp, #16]
   34a54:	ldr	r6, [r3, #72]	; 0x48
   34a58:	mov	r3, #0
   34a5c:	str	r3, [sp, #116]	; 0x74
   34a60:	str	r3, [sp, #120]	; 0x78
   34a64:	str	r3, [sp, #124]	; 0x7c
   34a68:	ldr	r3, [sp, #276]	; 0x114
   34a6c:	cmp	r2, r3
   34a70:	ldrls	r3, [sp, #16]
   34a74:	strls	r3, [sp, #276]	; 0x114
   34a78:	bls	35044 <__assert_fail@plt+0x22958>
   34a7c:	add	r8, sp, #288	; 0x120
   34a80:	mov	r3, #8
   34a84:	mov	r2, r8
   34a88:	ldr	r1, [sp, #16]
   34a8c:	add	r0, sp, #276	; 0x114
   34a90:	bl	38a78 <__assert_fail@plt+0x2638c>
   34a94:	cmp	r0, #0
   34a98:	bne	35044 <__assert_fail@plt+0x22958>
   34a9c:	ldr	r0, [sp, #284]	; 0x11c
   34aa0:	cmp	r0, r8
   34aa4:	beq	34aac <__assert_fail@plt+0x223c0>
   34aa8:	bl	2a01c <__assert_fail@plt+0x17930>
   34aac:	add	r3, sp, #288	; 0x120
   34ab0:	str	r3, [sp, #284]	; 0x11c
   34ab4:	mov	r3, #0
   34ab8:	str	r3, [sp, #276]	; 0x114
   34abc:	mvn	r3, #0
   34ac0:	str	r3, [sp, #280]	; 0x118
   34ac4:	add	r0, sp, #276	; 0x114
   34ac8:	bl	31888 <__assert_fail@plt+0x1f19c>
   34acc:	mov	r0, r5
   34ad0:	bl	2e2d0 <__assert_fail@plt+0x1bbe4>
   34ad4:	b	33d10 <__assert_fail@plt+0x21624>
   34ad8:	ldr	r5, [sp, #28]
   34adc:	b	34a4c <__assert_fail@plt+0x22360>
   34ae0:	cmp	ip, #9
   34ae4:	bne	350cc <__assert_fail@plt+0x229e0>
   34ae8:	ldr	r3, [r3, r1]
   34aec:	add	r3, r3, #1
   34af0:	cmp	r7, r3
   34af4:	ble	350cc <__assert_fail@plt+0x229e0>
   34af8:	ldr	ip, [r4, r3, lsl #3]
   34afc:	add	r1, r4, r3, lsl #3
   34b00:	cmp	r2, ip
   34b04:	ble	34b20 <__assert_fail@plt+0x22434>
   34b08:	str	r2, [r1, #4]
   34b0c:	ldr	r0, [sp, #20]
   34b10:	ldr	r2, [sp, #24]
   34b14:	mov	r1, r4
   34b18:	bl	120f8 <memcpy@plt>
   34b1c:	b	350cc <__assert_fail@plt+0x229e0>
   34b20:	ldrb	r0, [r0, #6]
   34b24:	tst	r0, #8
   34b28:	beq	34b48 <__assert_fail@plt+0x2245c>
   34b2c:	ldr	r0, [sp, #20]
   34b30:	ldr	r3, [r0, r3, lsl #3]
   34b34:	cmn	r3, #1
   34b38:	movne	r1, r0
   34b3c:	ldrne	r2, [sp, #24]
   34b40:	movne	r0, r4
   34b44:	bne	34b18 <__assert_fail@plt+0x2242c>
   34b48:	str	r2, [r1, #4]
   34b4c:	b	350cc <__assert_fail@plt+0x229e0>
   34b50:	cmp	r5, #0
   34b54:	beq	34ba4 <__assert_fail@plt+0x224b8>
   34b58:	mov	r2, r4
   34b5c:	mov	r3, #0
   34b60:	ldr	r1, [r4, r3, lsl #3]
   34b64:	cmp	r1, #0
   34b68:	blt	34bcc <__assert_fail@plt+0x224e0>
   34b6c:	ldr	r1, [r2, #4]
   34b70:	cmn	r1, #1
   34b74:	bne	34bcc <__assert_fail@plt+0x224e0>
   34b78:	add	r3, sp, #116	; 0x74
   34b7c:	str	r3, [sp, #4]
   34b80:	ldr	r3, [sp, #20]
   34b84:	mov	r2, r7
   34b88:	str	r3, [sp]
   34b8c:	ldr	r1, [sp, #28]
   34b90:	mov	r3, r4
   34b94:	mov	r0, r5
   34b98:	bl	2e600 <__assert_fail@plt+0x1bf14>
   34b9c:	subs	r6, r0, #0
   34ba0:	bge	35104 <__assert_fail@plt+0x22a18>
   34ba4:	ldr	r0, [sp, #124]	; 0x7c
   34ba8:	bl	2a01c <__assert_fail@plt+0x17930>
   34bac:	add	r0, sp, #276	; 0x114
   34bb0:	bl	31888 <__assert_fail@plt+0x1f19c>
   34bb4:	mov	r0, r5
   34bb8:	bl	2e2d0 <__assert_fail@plt+0x1bbe4>
   34bbc:	cmp	r0, #0
   34bc0:	beq	348e4 <__assert_fail@plt+0x221f8>
   34bc4:	str	r0, [sp, #12]
   34bc8:	b	34858 <__assert_fail@plt+0x2216c>
   34bcc:	add	r3, r3, #1
   34bd0:	cmp	r7, r3
   34bd4:	add	r2, r2, #8
   34bd8:	bne	34b60 <__assert_fail@plt+0x22474>
   34bdc:	b	34ba4 <__assert_fail@plt+0x224b8>
   34be0:	mov	r1, r6
   34be4:	add	r0, sp, #116	; 0x74
   34be8:	bl	2ff28 <__assert_fail@plt+0x1d83c>
   34bec:	cmp	r0, #0
   34bf0:	bne	35154 <__assert_fail@plt+0x22a68>
   34bf4:	ldr	r0, [sp, #124]	; 0x7c
   34bf8:	bl	2a01c <__assert_fail@plt+0x17930>
   34bfc:	b	34ac4 <__assert_fail@plt+0x223d8>
   34c00:	mov	r6, r8
   34c04:	add	r3, r3, #1
   34c08:	b	35160 <__assert_fail@plt+0x22a74>
   34c0c:	ldrb	r1, [r1, #6]
   34c10:	tst	r1, #16
   34c14:	beq	34ca8 <__assert_fail@plt+0x225bc>
   34c18:	ldr	r3, [sp, #112]	; 0x70
   34c1c:	add	r2, sp, #140	; 0x8c
   34c20:	mov	r1, r6
   34c24:	mov	r0, r8
   34c28:	bl	2f33c <__assert_fail@plt+0x1cc50>
   34c2c:	subs	r3, r0, #0
   34c30:	bne	34d88 <__assert_fail@plt+0x2269c>
   34c34:	ldr	r1, [r8]
   34c38:	ldr	r2, [sp, #112]	; 0x70
   34c3c:	add	r1, r1, r9
   34c40:	add	r0, sp, #140	; 0x8c
   34c44:	bl	3075c <__assert_fail@plt+0x1e070>
   34c48:	cmp	r0, #0
   34c4c:	movne	r3, #0
   34c50:	bne	34d88 <__assert_fail@plt+0x2269c>
   34c54:	add	r3, sp, #116	; 0x74
   34c58:	str	r3, [sp, #4]
   34c5c:	ldr	r3, [sp, #20]
   34c60:	mov	r2, r7
   34c64:	str	r3, [sp]
   34c68:	ldr	r1, [sp, #28]
   34c6c:	mov	r3, r4
   34c70:	mov	r0, r5
   34c74:	bl	2e600 <__assert_fail@plt+0x1bf14>
   34c78:	subs	r6, r0, #0
   34c7c:	bge	35084 <__assert_fail@plt+0x22998>
   34c80:	ldr	r0, [sp, #124]	; 0x7c
   34c84:	bl	2a01c <__assert_fail@plt+0x17930>
   34c88:	add	r0, sp, #276	; 0x114
   34c8c:	bl	31888 <__assert_fail@plt+0x1f19c>
   34c90:	mov	r0, r5
   34c94:	bl	2e2d0 <__assert_fail@plt+0x1bbe4>
   34c98:	b	33dd4 <__assert_fail@plt+0x216e8>
   34c9c:	beq	feadf74c <stdout@@GLIBC_2.4+0xfea8f1e0>
   34ca0:	andeq	pc, r3, r0, lsl #30
   34ca4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   34ca8:	cmp	r2, #4
   34cac:	bne	34c34 <__assert_fail@plt+0x22548>
   34cb0:	ldr	r3, [r3, r9]
   34cb4:	add	r3, r3, #1
   34cb8:	cmp	r7, r3
   34cbc:	ble	34ce4 <__assert_fail@plt+0x225f8>
   34cc0:	add	r2, r4, r3, lsl #3
   34cc4:	ldr	r0, [r4, r3, lsl #3]
   34cc8:	ldr	r2, [r2, #4]
   34ccc:	cmp	r5, #0
   34cd0:	sub	r3, r2, r0
   34cd4:	bne	34d38 <__assert_fail@plt+0x2264c>
   34cd8:	cmp	r3, #0
   34cdc:	bne	34d88 <__assert_fail@plt+0x2269c>
   34ce0:	b	34cec <__assert_fail@plt+0x22600>
   34ce4:	cmp	r5, #0
   34ce8:	bne	34c54 <__assert_fail@plt+0x22568>
   34cec:	mov	r1, r6
   34cf0:	add	r0, sp, #116	; 0x74
   34cf4:	bl	2ff28 <__assert_fail@plt+0x1d83c>
   34cf8:	cmp	r0, #0
   34cfc:	beq	34bf4 <__assert_fail@plt+0x22508>
   34d00:	ldr	r2, [r8, #20]
   34d04:	mov	r3, #12
   34d08:	mla	r6, r3, r6, r2
   34d0c:	ldr	r2, [sp, #112]	; 0x70
   34d10:	ldr	r3, [r6, #8]
   34d14:	ldr	r6, [r3]
   34d18:	ldr	r3, [sp, #240]	; 0xf0
   34d1c:	mov	r1, r6
   34d20:	ldr	r0, [r3, r2, lsl #2]
   34d24:	add	r0, r0, #4
   34d28:	bl	2caf0 <__assert_fail@plt+0x1a404>
   34d2c:	cmp	r0, #0
   34d30:	beq	34c34 <__assert_fail@plt+0x22548>
   34d34:	b	35280 <__assert_fail@plt+0x22b94>
   34d38:	cmn	r0, #1
   34d3c:	beq	34c54 <__assert_fail@plt+0x22568>
   34d40:	cmn	r2, #1
   34d44:	beq	34c54 <__assert_fail@plt+0x22568>
   34d48:	cmp	r3, #0
   34d4c:	beq	34cec <__assert_fail@plt+0x22600>
   34d50:	ldr	r1, [sp, #112]	; 0x70
   34d54:	ldr	r2, [sp, #168]	; 0xa8
   34d58:	ldr	ip, [sp, #144]	; 0x90
   34d5c:	sub	r2, r2, r1
   34d60:	cmp	r3, r2
   34d64:	bgt	34c54 <__assert_fail@plt+0x22568>
   34d68:	mov	r2, r3
   34d6c:	add	r1, ip, r1
   34d70:	add	r0, ip, r0
   34d74:	str	r3, [sp, #40]	; 0x28
   34d78:	bl	12158 <memcmp@plt>
   34d7c:	ldr	r3, [sp, #40]	; 0x28
   34d80:	cmp	r0, #0
   34d84:	bne	34c54 <__assert_fail@plt+0x22568>
   34d88:	ldr	r2, [r8, #12]
   34d8c:	cmp	r3, #0
   34d90:	ldr	r6, [r2, sl, lsl #2]
   34d94:	ldr	r2, [sp, #112]	; 0x70
   34d98:	addeq	r3, r2, #1
   34d9c:	addne	r3, r3, r2
   34da0:	cmp	r5, #0
   34da4:	str	r3, [sp, #112]	; 0x70
   34da8:	beq	34ddc <__assert_fail@plt+0x226f0>
   34dac:	ldr	r2, [sp, #232]	; 0xe8
   34db0:	cmp	r3, r2
   34db4:	bgt	34c54 <__assert_fail@plt+0x22568>
   34db8:	ldr	r2, [sp, #240]	; 0xf0
   34dbc:	ldr	r0, [r2, r3, lsl #2]
   34dc0:	cmp	r0, #0
   34dc4:	beq	34c54 <__assert_fail@plt+0x22568>
   34dc8:	mov	r1, r6
   34dcc:	add	r0, r0, #4
   34dd0:	bl	2caf0 <__assert_fail@plt+0x1a404>
   34dd4:	cmp	r0, #0
   34dd8:	beq	34c54 <__assert_fail@plt+0x22568>
   34ddc:	mov	r3, #0
   34de0:	str	r3, [sp, #120]	; 0x78
   34de4:	b	35280 <__assert_fail@plt+0x22b94>
   34de8:	mov	r6, r8
   34dec:	b	35280 <__assert_fail@plt+0x22b94>
   34df0:	str	r0, [r6, #-8]
   34df4:	str	r0, [r6, #-4]
   34df8:	add	r2, r2, #1
   34dfc:	b	34974 <__assert_fail@plt+0x22288>
   34e00:	ldr	r3, [fp, #40]	; 0x28
   34e04:	cmp	r3, #0
   34e08:	beq	33ccc <__assert_fail@plt+0x215e0>
   34e0c:	ldr	r1, [fp, #44]	; 0x2c
   34e10:	cmp	r1, #0
   34e14:	beq	33ccc <__assert_fail@plt+0x215e0>
   34e18:	ldr	r0, [fp, #48]	; 0x30
   34e1c:	cmp	r0, #0
   34e20:	beq	33ccc <__assert_fail@plt+0x215e0>
   34e24:	ldr	r2, [r2, #8]
   34e28:	cmp	r2, #0
   34e2c:	bne	34e6c <__assert_fail@plt+0x22780>
   34e30:	ldr	r3, [r3, #8]
   34e34:	cmp	r3, #0
   34e38:	bne	34e6c <__assert_fail@plt+0x22780>
   34e3c:	ldr	r3, [r1, #8]
   34e40:	cmp	r3, #0
   34e44:	beq	34e54 <__assert_fail@plt+0x22768>
   34e48:	ldrsb	r3, [sl, #28]
   34e4c:	cmp	r3, #0
   34e50:	blt	34e6c <__assert_fail@plt+0x22780>
   34e54:	cmp	r5, #0
   34e58:	cmpne	r8, #0
   34e5c:	movne	r8, #1
   34e60:	moveq	r8, #0
   34e64:	bne	33ccc <__assert_fail@plt+0x215e0>
   34e68:	mov	r5, r8
   34e6c:	ldr	r3, [sp, #68]	; 0x44
   34e70:	subs	r3, r6, r3
   34e74:	str	r3, [sp, #16]
   34e78:	movne	r3, #1
   34e7c:	bne	34e8c <__assert_fail@plt+0x227a0>
   34e80:	ldr	r3, [fp, #76]	; 0x4c
   34e84:	adds	r3, r3, #0
   34e88:	movne	r3, #1
   34e8c:	ldr	ip, [sp, #32]
   34e90:	str	r3, [sp, #56]	; 0x38
   34e94:	ldr	r3, [sl, #20]
   34e98:	ldr	r2, [fp, #8]
   34e9c:	str	ip, [sp, #140]	; 0x8c
   34ea0:	ldr	ip, [sp, #36]	; 0x24
   34ea4:	ldr	r0, [fp, #92]	; 0x5c
   34ea8:	str	r3, [sp, #24]
   34eac:	ldr	r3, [sl, #12]
   34eb0:	add	r2, r2, #1
   34eb4:	str	ip, [sp, #188]	; 0xbc
   34eb8:	str	ip, [sp, #184]	; 0xb8
   34ebc:	ldr	ip, [sp, #24]
   34ec0:	cmp	r2, r0
   34ec4:	movlt	r2, r0
   34ec8:	lsr	r3, r3, #22
   34ecc:	adds	r6, ip, #0
   34ed0:	and	r3, r3, #1
   34ed4:	movne	r6, #1
   34ed8:	strb	r3, [sp, #212]	; 0xd4
   34edc:	orr	r3, r3, r6
   34ee0:	strb	r3, [sp, #215]	; 0xd7
   34ee4:	ldrb	r3, [fp, #88]	; 0x58
   34ee8:	ldr	r1, [sp, #36]	; 0x24
   34eec:	str	r0, [sp, #220]	; 0xdc
   34ef0:	add	r1, r1, #1
   34ef4:	lsr	r0, r3, #2
   34ef8:	lsr	r3, r3, #3
   34efc:	and	r3, r3, #1
   34f00:	cmp	r2, r1
   34f04:	and	r0, r0, #1
   34f08:	strb	r3, [sp, #214]	; 0xd6
   34f0c:	ldr	r3, [sp, #36]	; 0x24
   34f10:	strb	r0, [sp, #213]	; 0xd5
   34f14:	movlt	r1, r2
   34f18:	add	r0, sp, #140	; 0x8c
   34f1c:	str	r3, [sp, #196]	; 0xc4
   34f20:	str	r3, [sp, #192]	; 0xc0
   34f24:	str	ip, [sp, #204]	; 0xcc
   34f28:	bl	2d10c <__assert_fail@plt+0x1aa20>
   34f2c:	subs	r3, r0, #0
   34f30:	str	r3, [sp, #12]
   34f34:	bne	34858 <__assert_fail@plt+0x2216c>
   34f38:	add	r3, fp, #96	; 0x60
   34f3c:	str	r3, [sp, #208]	; 0xd0
   34f40:	ldrb	r3, [fp, #88]	; 0x58
   34f44:	lsr	r3, r3, #4
   34f48:	and	r3, r3, #1
   34f4c:	strb	r3, [sp, #218]	; 0xda
   34f50:	ldrb	r3, [sp, #215]	; 0xd7
   34f54:	cmp	r3, #0
   34f58:	ldrne	r2, [sp, #144]	; 0x90
   34f5c:	ldreq	r2, [sp, #32]
   34f60:	cmp	r3, #0
   34f64:	str	r2, [sp, #144]	; 0x90
   34f68:	movne	r3, #0
   34f6c:	bne	34f84 <__assert_fail@plt+0x22898>
   34f70:	ldr	r3, [fp, #92]	; 0x5c
   34f74:	ldr	r2, [sp, #36]	; 0x24
   34f78:	cmp	r3, #1
   34f7c:	movgt	r2, #0
   34f80:	mov	r3, r2
   34f84:	str	r3, [sp, #168]	; 0xa8
   34f88:	str	r3, [sp, #172]	; 0xac
   34f8c:	ldrb	r3, [sl, #28]
   34f90:	str	r7, [sp, #196]	; 0xc4
   34f94:	str	r7, [sp, #192]	; 0xc0
   34f98:	lsr	r3, r3, #7
   34f9c:	strb	r3, [sp, #217]	; 0xd9
   34fa0:	ldr	r9, [fp, #76]	; 0x4c
   34fa4:	ldr	r3, [sp, #472]	; 0x1d8
   34fa8:	lsl	r7, r9, #1
   34fac:	str	r3, [sp, #228]	; 0xe4
   34fb0:	cmp	r7, #0
   34fb4:	mvn	r3, #0
   34fb8:	str	r3, [sp, #232]	; 0xe8
   34fbc:	bgt	33cd8 <__assert_fail@plt+0x215ec>
   34fc0:	mov	r3, #1
   34fc4:	str	r3, [sp, #260]	; 0x104
   34fc8:	ldr	r3, [sp, #16]
   34fcc:	str	r7, [sp, #252]	; 0xfc
   34fd0:	cmp	r3, #1
   34fd4:	str	r7, [sp, #268]	; 0x10c
   34fd8:	bhi	33d18 <__assert_fail@plt+0x2162c>
   34fdc:	ldrb	r3, [fp, #88]	; 0x58
   34fe0:	tst	r3, #2
   34fe4:	bne	33d18 <__assert_fail@plt+0x2162c>
   34fe8:	ldr	r3, [sp, #472]	; 0x1d8
   34fec:	str	r5, [sp, #108]	; 0x6c
   34ff0:	tst	r3, #1
   34ff4:	moveq	r3, #6
   34ff8:	movne	r3, #4
   34ffc:	cmp	r5, r8
   35000:	str	r3, [sp, #200]	; 0xc8
   35004:	movle	r3, #1
   35008:	mvngt	r3, #0
   3500c:	str	r3, [sp, #80]	; 0x50
   35010:	movlt	r3, r5
   35014:	movge	r3, r8
   35018:	str	r3, [sp, #60]	; 0x3c
   3501c:	movge	r3, r5
   35020:	movlt	r3, r8
   35024:	str	r3, [sp, #40]	; 0x28
   35028:	ldr	r3, [fp, #92]	; 0x5c
   3502c:	str	r3, [sp, #92]	; 0x5c
   35030:	ldr	r3, [sp, #20]
   35034:	cmp	r3, #0
   35038:	bne	33d40 <__assert_fail@plt+0x21654>
   3503c:	mov	r3, #8
   35040:	b	33d84 <__assert_fail@plt+0x21698>
   35044:	ldr	r3, [sp, #284]	; 0x11c
   35048:	mov	r1, r4
   3504c:	str	r3, [sp, #20]
   35050:	ldr	r3, [sp, #16]
   35054:	ldr	r0, [sp, #20]
   35058:	lsl	r3, r3, #3
   3505c:	mov	r2, r3
   35060:	str	r3, [sp, #24]
   35064:	bl	120f8 <memcpy@plt>
   35068:	ldr	r3, [r4]
   3506c:	add	r2, sp, #416	; 0x1a0
   35070:	str	r3, [r2, #-304]!	; 0xfffffed0
   35074:	ldr	r3, [sp, #16]
   35078:	str	r2, [sp, #28]
   3507c:	lsl	r3, r3, #4
   35080:	str	r3, [sp, #36]	; 0x24
   35084:	ldr	r2, [sp, #112]	; 0x70
   35088:	ldr	r3, [r4, #4]
   3508c:	cmp	r2, r3
   35090:	bgt	34ba4 <__assert_fail@plt+0x224b8>
   35094:	ldr	r3, [sp, #32]
   35098:	lsl	r1, r6, #3
   3509c:	ldr	r3, [r3]
   350a0:	add	r0, r3, r1
   350a4:	ldrb	ip, [r0, #4]
   350a8:	cmp	ip, #8
   350ac:	bne	34ae0 <__assert_fail@plt+0x223f4>
   350b0:	ldr	r3, [r3, r6, lsl #3]
   350b4:	add	r3, r3, #1
   350b8:	cmp	r7, r3
   350bc:	addgt	r1, r4, r3, lsl #3
   350c0:	strgt	r2, [r4, r3, lsl #3]
   350c4:	mvngt	r3, #0
   350c8:	strgt	r3, [r1, #4]
   350cc:	ldr	r2, [r4, #4]
   350d0:	ldr	r3, [sp, #112]	; 0x70
   350d4:	cmp	r2, r3
   350d8:	bne	350e8 <__assert_fail@plt+0x229fc>
   350dc:	ldr	r3, [sp, #236]	; 0xec
   350e0:	cmp	r6, r3
   350e4:	beq	34b50 <__assert_fail@plt+0x22464>
   350e8:	cmp	r5, #0
   350ec:	beq	35104 <__assert_fail@plt+0x22a18>
   350f0:	mov	r1, r6
   350f4:	add	r0, sp, #116	; 0x74
   350f8:	bl	2caf0 <__assert_fail@plt+0x1a404>
   350fc:	cmp	r0, #0
   35100:	bne	34b58 <__assert_fail@plt+0x2246c>
   35104:	ldr	r8, [sp, #224]	; 0xe0
   35108:	lsl	r9, r6, #3
   3510c:	mov	sl, r6
   35110:	ldr	r3, [r8]
   35114:	add	r1, r3, r9
   35118:	ldrb	r2, [r1, #4]
   3511c:	tst	r2, #8
   35120:	beq	34c0c <__assert_fail@plt+0x22520>
   35124:	ldr	r3, [sp, #240]	; 0xf0
   35128:	ldr	r2, [sp, #112]	; 0x70
   3512c:	mov	sl, #12
   35130:	mov	r1, r6
   35134:	ldr	r9, [r3, r2, lsl #2]
   35138:	ldr	r3, [r8, #20]
   3513c:	add	r0, sp, #116	; 0x74
   35140:	mla	sl, sl, r6, r3
   35144:	bl	2caf0 <__assert_fail@plt+0x1a404>
   35148:	add	r9, r9, #4
   3514c:	cmp	r0, #0
   35150:	beq	34be0 <__assert_fail@plt+0x224f4>
   35154:	ldr	r2, [sl, #4]
   35158:	mov	r3, #0
   3515c:	mvn	r6, #0
   35160:	cmp	r3, r2
   35164:	bge	35280 <__assert_fail@plt+0x22b94>
   35168:	ldr	r1, [sl, #8]
   3516c:	mov	r0, r9
   35170:	str	r2, [sp, #44]	; 0x2c
   35174:	ldr	r8, [r1, r3, lsl #2]
   35178:	str	r3, [sp, #40]	; 0x28
   3517c:	mov	r1, r8
   35180:	bl	2caf0 <__assert_fail@plt+0x1a404>
   35184:	ldr	r3, [sp, #40]	; 0x28
   35188:	ldr	r2, [sp, #44]	; 0x2c
   3518c:	cmp	r0, #0
   35190:	beq	34c04 <__assert_fail@plt+0x22518>
   35194:	cmn	r6, #1
   35198:	beq	34c00 <__assert_fail@plt+0x22514>
   3519c:	mov	r1, r6
   351a0:	add	r0, sp, #116	; 0x74
   351a4:	bl	2caf0 <__assert_fail@plt+0x1a404>
   351a8:	cmp	r0, #0
   351ac:	bne	34de8 <__assert_fail@plt+0x226fc>
   351b0:	cmp	r5, #0
   351b4:	beq	35280 <__assert_fail@plt+0x22b94>
   351b8:	ldr	r9, [r5]
   351bc:	ldr	r2, [r5, #4]
   351c0:	add	r3, r9, #1
   351c4:	cmp	r3, r2
   351c8:	ldr	sl, [sp, #112]	; 0x70
   351cc:	str	r3, [r5]
   351d0:	bne	351fc <__assert_fail@plt+0x22b10>
   351d4:	mov	r1, #48	; 0x30
   351d8:	ldr	r0, [r5, #8]
   351dc:	mul	r1, r1, r3
   351e0:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   351e4:	cmp	r0, #0
   351e8:	beq	34bf4 <__assert_fail@plt+0x22508>
   351ec:	ldr	r3, [r5, #4]
   351f0:	str	r0, [r5, #8]
   351f4:	lsl	r3, r3, #1
   351f8:	str	r3, [r5, #4]
   351fc:	mov	r0, #24
   35200:	ldr	r2, [r5, #8]
   35204:	mul	r9, r0, r9
   35208:	ldr	r0, [sp, #36]	; 0x24
   3520c:	add	r3, r2, r9
   35210:	str	sl, [r2, r9]
   35214:	str	r8, [r3, #4]
   35218:	str	r3, [sp, #40]	; 0x28
   3521c:	bl	2bf10 <__assert_fail@plt+0x19824>
   35220:	ldr	r3, [sp, #40]	; 0x28
   35224:	str	r0, [r3, #8]
   35228:	ldr	r3, [r5, #8]
   3522c:	add	r3, r3, r9
   35230:	ldr	r0, [r3, #8]
   35234:	cmp	r0, #0
   35238:	beq	34bf4 <__assert_fail@plt+0x22508>
   3523c:	ldr	r2, [sp, #24]
   35240:	mov	r1, r4
   35244:	bl	120f8 <memcpy@plt>
   35248:	ldr	r3, [r5, #8]
   3524c:	ldr	r2, [sp, #24]
   35250:	add	r3, r3, r9
   35254:	ldr	r1, [sp, #20]
   35258:	ldr	r0, [r3, #8]
   3525c:	add	r0, r0, r2
   35260:	bl	120f8 <memcpy@plt>
   35264:	ldr	r0, [r5, #8]
   35268:	add	r1, sp, #116	; 0x74
   3526c:	add	r0, r0, r9
   35270:	add	r0, r0, #12
   35274:	bl	2f740 <__assert_fail@plt+0x1d054>
   35278:	cmp	r0, #0
   3527c:	bne	34bf4 <__assert_fail@plt+0x22508>
   35280:	cmp	r6, #0
   35284:	bge	35084 <__assert_fail@plt+0x22998>
   35288:	cmn	r6, #2
   3528c:	bne	34c54 <__assert_fail@plt+0x22568>
   35290:	b	34bf4 <__assert_fail@plt+0x22508>
   35294:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35298:	sub	sp, sp, #156	; 0x9c
   3529c:	mov	fp, r0
   352a0:	ldr	r9, [sp, #196]	; 0xc4
   352a4:	mov	r5, r1
   352a8:	mov	sl, r2
   352ac:	and	r6, r3, #16777216	; 0x1000000
   352b0:	and	r7, r3, #32
   352b4:	and	r8, r3, #16
   352b8:	str	r3, [sp, #12]
   352bc:	ldrb	r3, [sl, #4]
   352c0:	ldr	r4, [r5]
   352c4:	sub	r2, r3, #1
   352c8:	cmp	r2, #35	; 0x23
   352cc:	ldrls	pc, [pc, r2, lsl #2]
   352d0:	b	35dd0 <__assert_fail@plt+0x236e4>
   352d4:	andeq	r5, r3, r4, ror #6
   352d8:	andeq	r5, r3, r8, ror #10
   352dc:	ldrdeq	r5, [r3], -r0
   352e0:	muleq	r3, ip, sl
   352e4:	andeq	r5, r3, r8, asr #26
   352e8:	ldrdeq	r5, [r3], -r0
   352ec:	ldrdeq	r5, [r3], -r0
   352f0:			; <UNDEFINED> instruction: 0x000354b8
   352f4:	andeq	r5, r3, r8, lsr fp
   352f8:	andeq	r5, r3, r8, ror #10
   352fc:	andeq	r5, r3, ip, lsl #22
   35300:	andeq	r5, r3, r0, lsl #23
   35304:	ldrdeq	r5, [r3], -r0
   35308:	ldrdeq	r5, [r3], -r0
   3530c:	ldrdeq	r5, [r3], -r0
   35310:	ldrdeq	r5, [r3], -r0
   35314:	ldrdeq	r5, [r3], -r0
   35318:	andeq	r5, r3, ip, lsl #22
   3531c:	andeq	r5, r3, ip, lsl #22
   35320:			; <UNDEFINED> instruction: 0x000355b4
   35324:	ldrdeq	r5, [r3], -r0
   35328:	ldrdeq	r5, [r3], -r0
   3532c:	strdeq	r5, [r3], -ip
   35330:	andeq	r5, r3, r8, asr fp
   35334:	ldrdeq	r5, [r3], -r0
   35338:	ldrdeq	r5, [r3], -r0
   3533c:	ldrdeq	r5, [r3], -r0
   35340:	ldrdeq	r5, [r3], -r0
   35344:	ldrdeq	r5, [r3], -r0
   35348:	ldrdeq	r5, [r3], -r0
   3534c:	ldrdeq	r5, [r3], -r0
   35350:	andeq	r5, r3, r4, ror sp
   35354:	andeq	r5, r3, r4, ror sp
   35358:	andeq	r5, r3, r8, lsr #27
   3535c:	andeq	r5, r3, r8, lsr #27
   35360:	andeq	r5, r3, r8, asr #27
   35364:	mov	r2, #0
   35368:	mov	r3, sl
   3536c:	mov	r1, r2
   35370:	mov	r0, r4
   35374:	bl	2d204 <__assert_fail@plt+0x1ab18>
   35378:	subs	r5, r0, #0
   3537c:	bne	3538c <__assert_fail@plt+0x22ca0>
   35380:	mov	r3, #12
   35384:	str	r3, [r9]
   35388:	b	35568 <__assert_fail@plt+0x22e7c>
   3538c:	ldr	r3, [r4, #92]	; 0x5c
   35390:	cmp	r3, #1
   35394:	movgt	r7, #0
   35398:	movgt	r8, #16
   3539c:	bgt	35488 <__assert_fail@plt+0x22d9c>
   353a0:	ldr	r2, [sp, #12]
   353a4:	mov	r1, fp
   353a8:	mov	r0, sl
   353ac:	bl	317bc <__assert_fail@plt+0x1f0d0>
   353b0:	ldrb	r3, [sl, #4]
   353b4:	cmp	r3, #23
   353b8:	movhi	r7, #1
   353bc:	ldrls	r2, [pc, #3844]	; 362c8 <__assert_fail@plt+0x23bdc>
   353c0:	sub	r8, r3, #18
   353c4:	clz	r8, r8
   353c8:	mvnls	r7, r2, lsr r3
   353cc:	ands	r7, r7, #1
   353d0:	lsr	r8, r8, #5
   353d4:	bne	35b4c <__assert_fail@plt+0x23460>
   353d8:	ldr	r2, [fp, #40]	; 0x28
   353dc:	ldm	sl, {r0, r1}
   353e0:	str	r2, [sp, #16]
   353e4:	add	r2, sp, #120	; 0x78
   353e8:	cmp	r3, #23
   353ec:	stm	r2, {r0, r1}
   353f0:	bne	35eec <__assert_fail@plt+0x23800>
   353f4:	ldr	r2, [sp, #12]
   353f8:	mov	r1, sl
   353fc:	mov	r0, fp
   35400:	bl	317d8 <__assert_fail@plt+0x1f0ec>
   35404:	cmn	r0, #1
   35408:	mov	r8, r0
   3540c:	bne	35dd0 <__assert_fail@plt+0x236e4>
   35410:	ldrb	r3, [sl, #4]
   35414:	cmp	r3, #1
   35418:	bne	3542c <__assert_fail@plt+0x22d40>
   3541c:	ldrb	r3, [sl]
   35420:	cmp	r3, #44	; 0x2c
   35424:	moveq	r8, r7
   35428:	beq	35e3c <__assert_fail@plt+0x23750>
   3542c:	mov	r3, #10
   35430:	str	r3, [r9]
   35434:	mov	r6, #0
   35438:	b	35e04 <__assert_fail@plt+0x23718>
   3543c:	ldr	r2, [sp, #12]
   35440:	mov	r1, fp
   35444:	mov	r0, sl
   35448:	bl	317bc <__assert_fail@plt+0x1f0d0>
   3544c:	mov	r3, sl
   35450:	mov	r2, r7
   35454:	mov	r1, #0
   35458:	mov	r0, r4
   3545c:	bl	2d204 <__assert_fail@plt+0x1ab18>
   35460:	mov	r1, r5
   35464:	mov	r3, r8
   35468:	mov	r6, r0
   3546c:	mov	r2, r0
   35470:	mov	r0, r4
   35474:	bl	2d354 <__assert_fail@plt+0x1ac68>
   35478:	cmp	r0, #0
   3547c:	cmpne	r6, #0
   35480:	mov	r5, r0
   35484:	beq	35380 <__assert_fail@plt+0x22c94>
   35488:	ldr	r3, [fp, #40]	; 0x28
   3548c:	ldr	r2, [fp, #56]	; 0x38
   35490:	cmp	r2, r3
   35494:	ble	353a0 <__assert_fail@plt+0x22cb4>
   35498:	ldr	r2, [fp, #28]
   3549c:	cmp	r3, r2
   354a0:	beq	353a0 <__assert_fail@plt+0x22cb4>
   354a4:	ldr	r2, [fp, #8]
   354a8:	ldr	r3, [r2, r3, lsl #2]
   354ac:	cmn	r3, #1
   354b0:	beq	3543c <__assert_fail@plt+0x22d50>
   354b4:	b	353a0 <__assert_fail@plt+0x22cb4>
   354b8:	ldr	r6, [r5, #24]
   354bc:	mov	r1, fp
   354c0:	add	r3, r6, #1
   354c4:	str	r3, [r5, #24]
   354c8:	ldr	r3, [sp, #12]
   354cc:	mov	r0, sl
   354d0:	orr	r2, r3, #8388608	; 0x800000
   354d4:	bl	317bc <__assert_fail@plt+0x1f0d0>
   354d8:	ldrb	r3, [sl, #4]
   354dc:	cmp	r3, #9
   354e0:	beq	35570 <__assert_fail@plt+0x22e84>
   354e4:	ldr	r3, [sp, #192]	; 0xc0
   354e8:	mov	r2, sl
   354ec:	add	r3, r3, #1
   354f0:	str	r3, [sp]
   354f4:	mov	r1, r5
   354f8:	str	r9, [sp, #4]
   354fc:	ldr	r3, [sp, #12]
   35500:	mov	r0, fp
   35504:	bl	36444 <__assert_fail@plt+0x23d58>
   35508:	ldr	r2, [r9]
   3550c:	cmp	r2, #0
   35510:	mov	r5, r0
   35514:	bne	3553c <__assert_fail@plt+0x22e50>
   35518:	ldrb	r3, [sl, #4]
   3551c:	cmp	r3, #9
   35520:	beq	3553c <__assert_fail@plt+0x22e50>
   35524:	cmp	r0, #0
   35528:	beq	35534 <__assert_fail@plt+0x22e48>
   3552c:	ldr	r1, [pc, #3480]	; 362cc <__assert_fail@plt+0x23be0>
   35530:	bl	2d034 <__assert_fail@plt+0x1a948>
   35534:	mov	r3, #8
   35538:	str	r3, [r9]
   3553c:	ldr	r3, [r9]
   35540:	cmp	r3, #0
   35544:	beq	35574 <__assert_fail@plt+0x22e88>
   35548:	mov	r5, #0
   3554c:	ldr	r3, [r9]
   35550:	adds	r3, r3, #0
   35554:	movne	r3, #1
   35558:	cmp	r5, #0
   3555c:	movne	r3, #0
   35560:	cmp	r3, #0
   35564:	beq	353a0 <__assert_fail@plt+0x22cb4>
   35568:	mov	r5, #0
   3556c:	b	35b4c <__assert_fail@plt+0x23460>
   35570:	mov	r5, #0
   35574:	cmp	r6, #8
   35578:	movls	r2, #1
   3557c:	ldrls	r3, [r4, #84]	; 0x54
   35580:	mov	r1, r5
   35584:	orrls	r3, r3, r2, lsl r6
   35588:	mov	r0, r4
   3558c:	strls	r3, [r4, #84]	; 0x54
   35590:	mov	r2, #0
   35594:	mov	r3, #17
   35598:	bl	2d354 <__assert_fail@plt+0x1ac68>
   3559c:	subs	r5, r0, #0
   355a0:	strne	r6, [r5, #20]
   355a4:	bne	3554c <__assert_fail@plt+0x22e60>
   355a8:	mov	r3, #12
   355ac:	str	r3, [r9]
   355b0:	b	3554c <__assert_fail@plt+0x22e60>
   355b4:	mov	r5, #0
   355b8:	mov	r1, #1
   355bc:	mov	r0, #32
   355c0:	str	r5, [sp, #60]	; 0x3c
   355c4:	bl	29b08 <__assert_fail@plt+0x1741c>
   355c8:	mov	r1, #1
   355cc:	str	r0, [sp, #16]
   355d0:	mov	r0, #40	; 0x28
   355d4:	bl	29b08 <__assert_fail@plt+0x1741c>
   355d8:	ldr	r3, [sp, #16]
   355dc:	cmp	r0, r5
   355e0:	cmpne	r3, r5
   355e4:	moveq	r3, #1
   355e8:	movne	r3, #0
   355ec:	mov	r6, r0
   355f0:	str	r3, [sp, #36]	; 0x24
   355f4:	bne	3560c <__assert_fail@plt+0x22f20>
   355f8:	ldr	r0, [sp, #16]
   355fc:	bl	2a01c <__assert_fail@plt+0x17930>
   35600:	mov	r0, r6
   35604:	bl	2a01c <__assert_fail@plt+0x17930>
   35608:	b	355a8 <__assert_fail@plt+0x22ebc>
   3560c:	ldr	r2, [sp, #12]
   35610:	mov	r1, fp
   35614:	mov	r0, sl
   35618:	bl	2cb54 <__assert_fail@plt+0x1a468>
   3561c:	ldrb	r3, [sl, #4]
   35620:	cmp	r3, #2
   35624:	str	r0, [sp, #24]
   35628:	bne	35638 <__assert_fail@plt+0x22f4c>
   3562c:	mov	r3, #2
   35630:	str	r3, [r9]
   35634:	b	35710 <__assert_fail@plt+0x23024>
   35638:	cmp	r3, #25
   3563c:	ldrne	r3, [sp, #36]	; 0x24
   35640:	bne	3569c <__assert_fail@plt+0x22fb0>
   35644:	ldrb	r3, [r6, #16]
   35648:	orr	r3, r3, #1
   3564c:	strb	r3, [r6, #16]
   35650:	ldr	r3, [sp, #12]
   35654:	tst	r3, #256	; 0x100
   35658:	beq	35668 <__assert_fail@plt+0x22f7c>
   3565c:	mov	r1, #10
   35660:	ldr	r0, [sp, #16]
   35664:	bl	2c958 <__assert_fail@plt+0x1a26c>
   35668:	ldr	r3, [fp, #40]	; 0x28
   3566c:	ldr	r2, [sp, #24]
   35670:	mov	r1, fp
   35674:	add	r3, r3, r2
   35678:	str	r3, [fp, #40]	; 0x28
   3567c:	ldr	r2, [sp, #12]
   35680:	mov	r0, sl
   35684:	bl	2cb54 <__assert_fail@plt+0x1a468>
   35688:	ldrb	r3, [sl, #4]
   3568c:	cmp	r3, #2
   35690:	movne	r3, #1
   35694:	str	r0, [sp, #24]
   35698:	beq	3562c <__assert_fail@plt+0x22f40>
   3569c:	str	r3, [sp, #40]	; 0x28
   356a0:	ldrb	r3, [sl, #4]
   356a4:	mov	r2, #0
   356a8:	str	r2, [sp, #28]
   356ac:	cmp	r3, #21
   356b0:	ldr	r2, [sp, #12]
   356b4:	moveq	r3, #1
   356b8:	strbeq	r3, [sl, #4]
   356bc:	mov	r3, #0
   356c0:	str	r3, [sp, #32]
   356c4:	lsr	r2, r2, #16
   356c8:	mov	r3, #1
   356cc:	and	r2, r2, r3
   356d0:	str	r2, [sp, #44]	; 0x2c
   356d4:	add	r0, sp, #152	; 0x98
   356d8:	mov	r7, #3
   356dc:	str	r7, [r0, #-88]!	; 0xffffffa8
   356e0:	str	r3, [sp, #4]
   356e4:	ldr	r3, [sp, #12]
   356e8:	add	r2, sp, #88	; 0x58
   356ec:	str	r2, [sp, #68]	; 0x44
   356f0:	str	r3, [sp]
   356f4:	mov	r2, sl
   356f8:	ldr	r3, [sp, #24]
   356fc:	mov	r1, fp
   35700:	bl	30f84 <__assert_fail@plt+0x1e898>
   35704:	subs	r5, r0, #0
   35708:	beq	35724 <__assert_fail@plt+0x23038>
   3570c:	str	r5, [r9]
   35710:	ldr	r0, [sp, #16]
   35714:	bl	2a01c <__assert_fail@plt+0x17930>
   35718:	mov	r0, r6
   3571c:	bl	2dda4 <__assert_fail@plt+0x1b6b8>
   35720:	b	35548 <__assert_fail@plt+0x22e5c>
   35724:	ldr	r2, [sp, #12]
   35728:	mov	r1, fp
   3572c:	mov	r0, sl
   35730:	bl	2cb54 <__assert_fail@plt+0x1a468>
   35734:	ldr	r3, [sp, #64]	; 0x40
   35738:	sub	r3, r3, #2
   3573c:	bics	r3, r3, #2
   35740:	str	r0, [sp, #24]
   35744:	beq	357b4 <__assert_fail@plt+0x230c8>
   35748:	ldrb	r3, [sl, #4]
   3574c:	cmp	r3, #2
   35750:	bne	3575c <__assert_fail@plt+0x23070>
   35754:	mov	r3, #7
   35758:	b	35630 <__assert_fail@plt+0x22f44>
   3575c:	cmp	r3, #22
   35760:	bne	357b4 <__assert_fail@plt+0x230c8>
   35764:	ldr	r3, [fp, #40]	; 0x28
   35768:	ldr	r2, [sp, #24]
   3576c:	mov	r1, fp
   35770:	add	r3, r3, r2
   35774:	str	r3, [fp, #40]	; 0x28
   35778:	ldr	r2, [sp, #12]
   3577c:	add	r0, sp, #80	; 0x50
   35780:	bl	2cb54 <__assert_fail@plt+0x1a468>
   35784:	ldrb	r2, [sp, #84]	; 0x54
   35788:	cmp	r2, #2
   3578c:	mov	r3, r0
   35790:	beq	35754 <__assert_fail@plt+0x23068>
   35794:	cmp	r2, #21
   35798:	bne	360d8 <__assert_fail@plt+0x239ec>
   3579c:	ldr	r3, [fp, #40]	; 0x28
   357a0:	ldr	r2, [sp, #24]
   357a4:	sub	r3, r3, r2
   357a8:	str	r3, [fp, #40]	; 0x28
   357ac:	mov	r3, #1
   357b0:	strb	r3, [sl, #4]
   357b4:	ldr	r3, [sp, #64]	; 0x40
   357b8:	cmp	r3, #4
   357bc:	ldrls	pc, [pc, r3, lsl #2]
   357c0:	b	35978 <__assert_fail@plt+0x2328c>
   357c4:	andeq	r5, r3, r0, lsr #17
   357c8:	andeq	r5, r3, r8, asr #17
   357cc:	andeq	r5, r3, r8, lsl r9
   357d0:	andeq	r5, r3, r8, lsl r9
   357d4:	andeq	r5, r3, r8, asr #18
   357d8:	ldr	r2, [sp, #12]
   357dc:	mov	r1, fp
   357e0:	mov	r0, sl
   357e4:	bl	2cb54 <__assert_fail@plt+0x1a468>
   357e8:	ldr	r8, [sp, #64]	; 0x40
   357ec:	sub	r3, r8, #2
   357f0:	bics	r3, r3, #2
   357f4:	str	r0, [sp, #24]
   357f8:	beq	3580c <__assert_fail@plt+0x23120>
   357fc:	ldr	r7, [sp, #72]	; 0x48
   35800:	sub	r3, r7, #2
   35804:	bics	r3, r3, #2
   35808:	bne	36118 <__assert_fail@plt+0x23a2c>
   3580c:	mov	r3, #11
   35810:	b	36268 <__assert_fail@plt+0x23b7c>
   35814:	ldr	r0, [sp, #68]	; 0x44
   35818:	bl	123bc <strlen@plt>
   3581c:	cmp	r0, #1
   35820:	bls	362bc <__assert_fail@plt+0x23bd0>
   35824:	mov	r3, #3
   35828:	b	36268 <__assert_fail@plt+0x23b7c>
   3582c:	stmib	r6, {r2, r3}
   35830:	str	r8, [sp, #32]
   35834:	ldr	r2, [r6, #32]
   35838:	ldr	r3, [r6, #4]
   3583c:	str	r5, [r3, r2, lsl #2]
   35840:	ldr	r2, [r6, #8]
   35844:	ldr	r3, [r6, #32]
   35848:	add	r1, r3, #1
   3584c:	str	r1, [r6, #32]
   35850:	str	r7, [r2, r3, lsl #2]
   35854:	mov	r8, #0
   35858:	cmp	r5, r8
   3585c:	movhi	r3, #0
   35860:	movls	r3, #1
   35864:	cmp	r7, r8
   35868:	movcc	r3, #0
   3586c:	cmp	r3, #0
   35870:	beq	35880 <__assert_fail@plt+0x23194>
   35874:	mov	r1, r8
   35878:	ldr	r0, [sp, #16]
   3587c:	bl	2c958 <__assert_fail@plt+0x1a26c>
   35880:	add	r8, r8, #1
   35884:	cmp	r8, #256	; 0x100
   35888:	bne	35858 <__assert_fail@plt+0x2316c>
   3588c:	ldr	r3, [sp, #20]
   35890:	cmp	r3, #0
   35894:	str	r3, [r9]
   35898:	beq	358ac <__assert_fail@plt+0x231c0>
   3589c:	b	35710 <__assert_fail@plt+0x23024>
   358a0:	ldrb	r1, [sp, #68]	; 0x44
   358a4:	ldr	r0, [sp, #16]
   358a8:	bl	2c958 <__assert_fail@plt+0x1a26c>
   358ac:	ldrb	r3, [sl, #4]
   358b0:	cmp	r3, #2
   358b4:	beq	35754 <__assert_fail@plt+0x23068>
   358b8:	cmp	r3, #21
   358bc:	beq	35978 <__assert_fail@plt+0x2328c>
   358c0:	ldr	r3, [sp, #36]	; 0x24
   358c4:	b	356d4 <__assert_fail@plt+0x22fe8>
   358c8:	ldr	r3, [r6, #20]
   358cc:	ldr	r2, [sp, #28]
   358d0:	cmp	r3, r2
   358d4:	bne	358fc <__assert_fail@plt+0x23210>
   358d8:	lsl	r3, r2, #1
   358dc:	add	r3, r3, #1
   358e0:	ldr	r0, [r6]
   358e4:	lsl	r1, r3, #2
   358e8:	str	r3, [sp, #28]
   358ec:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   358f0:	cmp	r0, #0
   358f4:	beq	362b4 <__assert_fail@plt+0x23bc8>
   358f8:	str	r0, [r6]
   358fc:	ldr	r3, [r6, #20]
   35900:	ldr	r2, [r6]
   35904:	add	r1, r3, #1
   35908:	str	r1, [r6, #20]
   3590c:	ldr	r1, [sp, #68]	; 0x44
   35910:	str	r1, [r2, r3, lsl #2]
   35914:	b	358ac <__assert_fail@plt+0x231c0>
   35918:	ldr	r7, [sp, #68]	; 0x44
   3591c:	mov	r0, r7
   35920:	bl	123bc <strlen@plt>
   35924:	cmp	r0, #1
   35928:	movne	r5, #3
   3592c:	bne	3593c <__assert_fail@plt+0x23250>
   35930:	ldrb	r1, [r7]
   35934:	ldr	r0, [sp, #16]
   35938:	bl	2c958 <__assert_fail@plt+0x1a26c>
   3593c:	str	r5, [r9]
   35940:	cmp	r5, #0
   35944:	b	35898 <__assert_fail@plt+0x231ac>
   35948:	ldr	r3, [sp, #12]
   3594c:	mov	r2, r6
   35950:	str	r3, [sp, #4]
   35954:	ldr	r3, [sp, #68]	; 0x44
   35958:	ldr	r1, [sp, #16]
   3595c:	str	r3, [sp]
   35960:	ldr	r0, [fp, #64]	; 0x40
   35964:	add	r3, sp, #60	; 0x3c
   35968:	bl	2e6a8 <__assert_fail@plt+0x1bfbc>
   3596c:	str	r0, [r9]
   35970:	cmp	r0, #0
   35974:	b	35898 <__assert_fail@plt+0x231ac>
   35978:	ldr	r3, [fp, #40]	; 0x28
   3597c:	ldr	r2, [sp, #24]
   35980:	add	r3, r3, r2
   35984:	str	r3, [fp, #40]	; 0x28
   35988:	ldr	r3, [sp, #40]	; 0x28
   3598c:	cmp	r3, #0
   35990:	beq	3599c <__assert_fail@plt+0x232b0>
   35994:	ldr	r0, [sp, #16]
   35998:	bl	2c9bc <__assert_fail@plt+0x1a2d0>
   3599c:	ldr	r3, [r4, #92]	; 0x5c
   359a0:	cmp	r3, #1
   359a4:	ble	359b4 <__assert_fail@plt+0x232c8>
   359a8:	ldr	r1, [r4, #60]	; 0x3c
   359ac:	ldr	r0, [sp, #16]
   359b0:	bl	2ca04 <__assert_fail@plt+0x1a318>
   359b4:	ldr	r3, [r6, #20]
   359b8:	cmp	r3, #0
   359bc:	bne	35a08 <__assert_fail@plt+0x2331c>
   359c0:	ldr	r3, [r6, #24]
   359c4:	cmp	r3, #0
   359c8:	bne	35a08 <__assert_fail@plt+0x2331c>
   359cc:	ldr	r3, [r6, #28]
   359d0:	cmp	r3, #0
   359d4:	bne	35a08 <__assert_fail@plt+0x2331c>
   359d8:	ldr	r3, [r6, #32]
   359dc:	cmp	r3, #0
   359e0:	bne	35a08 <__assert_fail@plt+0x2331c>
   359e4:	ldr	r3, [r4, #92]	; 0x5c
   359e8:	cmp	r3, #1
   359ec:	ble	35a6c <__assert_fail@plt+0x23380>
   359f0:	ldr	r3, [r6, #36]	; 0x24
   359f4:	cmp	r3, #0
   359f8:	bne	35a08 <__assert_fail@plt+0x2331c>
   359fc:	ldrb	r3, [r6, #16]
   35a00:	tst	r3, #1
   35a04:	beq	35a6c <__assert_fail@plt+0x23380>
   35a08:	ldrb	r3, [r4, #88]	; 0x58
   35a0c:	mov	r2, #0
   35a10:	mov	r1, r2
   35a14:	orr	r3, r3, #2
   35a18:	strb	r3, [r4, #88]	; 0x58
   35a1c:	mov	r3, #6
   35a20:	strb	r3, [sp, #124]	; 0x7c
   35a24:	mov	r0, r4
   35a28:	add	r3, sp, #120	; 0x78
   35a2c:	str	r6, [sp, #120]	; 0x78
   35a30:	bl	2d204 <__assert_fail@plt+0x1ab18>
   35a34:	subs	r5, r0, #0
   35a38:	beq	362b4 <__assert_fail@plt+0x23bc8>
   35a3c:	ldr	r3, [sp, #16]
   35a40:	ldr	r2, [sp, #16]
   35a44:	sub	r3, r3, #4
   35a48:	add	r2, r2, #28
   35a4c:	ldr	r1, [r3, #4]!
   35a50:	cmp	r1, #0
   35a54:	bne	36270 <__assert_fail@plt+0x23b84>
   35a58:	cmp	r2, r3
   35a5c:	bne	35a4c <__assert_fail@plt+0x23360>
   35a60:	ldr	r0, [sp, #16]
   35a64:	bl	2a01c <__assert_fail@plt+0x17930>
   35a68:	b	3554c <__assert_fail@plt+0x22e60>
   35a6c:	mov	r0, r6
   35a70:	bl	2dda4 <__assert_fail@plt+0x1b6b8>
   35a74:	mov	r3, #3
   35a78:	strb	r3, [sp, #124]	; 0x7c
   35a7c:	ldr	r3, [sp, #16]
   35a80:	mov	r2, #0
   35a84:	str	r3, [sp, #120]	; 0x78
   35a88:	mov	r1, r2
   35a8c:	add	r3, sp, #120	; 0x78
   35a90:	mov	r0, r4
   35a94:	bl	2d204 <__assert_fail@plt+0x1ab18>
   35a98:	b	362ac <__assert_fail@plt+0x23bc0>
   35a9c:	ldr	r2, [sl]
   35aa0:	mov	r3, #1
   35aa4:	ldr	r5, [r4, #84]	; 0x54
   35aa8:	lsl	r3, r3, r2
   35aac:	ands	r5, r3, r5
   35ab0:	moveq	r3, #6
   35ab4:	beq	35b48 <__assert_fail@plt+0x2345c>
   35ab8:	ldr	r2, [r4, #80]	; 0x50
   35abc:	mov	r0, r4
   35ac0:	orr	r3, r2, r3
   35ac4:	mov	r2, #0
   35ac8:	str	r3, [r4, #80]	; 0x50
   35acc:	mov	r1, r2
   35ad0:	mov	r3, sl
   35ad4:	bl	2d204 <__assert_fail@plt+0x1ab18>
   35ad8:	subs	r5, r0, #0
   35adc:	ldrne	r3, [r4, #76]	; 0x4c
   35ae0:	addne	r3, r3, #1
   35ae4:	strne	r3, [r4, #76]	; 0x4c
   35ae8:	beq	35380 <__assert_fail@plt+0x22c94>
   35aec:	ldrb	r3, [r4, #88]	; 0x58
   35af0:	orr	r3, r3, #2
   35af4:	strb	r3, [r4, #88]	; 0x58
   35af8:	b	353a0 <__assert_fail@plt+0x22cb4>
   35afc:	cmp	r6, #0
   35b00:	beq	35b0c <__assert_fail@plt+0x23420>
   35b04:	mov	r3, #13
   35b08:	b	35384 <__assert_fail@plt+0x22c98>
   35b0c:	cmp	r7, #0
   35b10:	bne	35b04 <__assert_fail@plt+0x23418>
   35b14:	cmp	r8, #0
   35b18:	beq	35b30 <__assert_fail@plt+0x23444>
   35b1c:	ldr	r2, [sp, #12]
   35b20:	mov	r1, fp
   35b24:	mov	r0, sl
   35b28:	bl	317bc <__assert_fail@plt+0x1f0d0>
   35b2c:	b	352bc <__assert_fail@plt+0x22bd0>
   35b30:	cmp	r3, #9
   35b34:	bne	35b58 <__assert_fail@plt+0x2346c>
   35b38:	ldr	r3, [sp, #12]
   35b3c:	ands	r5, r3, #131072	; 0x20000
   35b40:	bne	35b58 <__assert_fail@plt+0x2346c>
   35b44:	mov	r3, #16
   35b48:	str	r3, [r9]
   35b4c:	mov	r0, r5
   35b50:	add	sp, sp, #156	; 0x9c
   35b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35b58:	mov	r3, #1
   35b5c:	mov	r2, #0
   35b60:	strb	r3, [sl, #4]
   35b64:	mov	r1, r2
   35b68:	mov	r3, sl
   35b6c:	mov	r0, r4
   35b70:	bl	2d204 <__assert_fail@plt+0x1ab18>
   35b74:	subs	r5, r0, #0
   35b78:	bne	353a0 <__assert_fail@plt+0x22cb4>
   35b7c:	b	35380 <__assert_fail@plt+0x22c94>
   35b80:	ldr	r2, [sl]
   35b84:	ldr	r3, [pc, #1860]	; 362d0 <__assert_fail@plt+0x23be4>
   35b88:	and	r3, r3, r2
   35b8c:	cmp	r3, #0
   35b90:	beq	35be0 <__assert_fail@plt+0x234f4>
   35b94:	ldrb	r3, [r4, #88]	; 0x58
   35b98:	ands	r5, r3, #16
   35b9c:	bne	35be0 <__assert_fail@plt+0x234f4>
   35ba0:	orr	r3, r3, #16
   35ba4:	ands	r1, r3, #8
   35ba8:	strb	r3, [r4, #88]	; 0x58
   35bac:	bne	35cd8 <__assert_fail@plt+0x235ec>
   35bb0:	ldr	r2, [pc, #1820]	; 362d4 <__assert_fail@plt+0x23be8>
   35bb4:	tst	r3, #4
   35bb8:	str	r2, [r4, #100]	; 0x64
   35bbc:	mvn	r2, #2013265921	; 0x78000001
   35bc0:	str	r2, [r4, #104]	; 0x68
   35bc4:	mvn	r2, #-134217727	; 0xf8000001
   35bc8:	str	r1, [r4, #96]	; 0x60
   35bcc:	str	r2, [r4, #108]	; 0x6c
   35bd0:	beq	35cf8 <__assert_fail@plt+0x2360c>
   35bd4:	mov	r2, #16
   35bd8:	add	r0, r4, #112	; 0x70
   35bdc:	bl	12434 <memset@plt>
   35be0:	ldr	r3, [sl]
   35be4:	sub	r2, r3, #256	; 0x100
   35be8:	bics	r2, r2, #256	; 0x100
   35bec:	bne	35d28 <__assert_fail@plt+0x2363c>
   35bf0:	cmp	r3, #256	; 0x100
   35bf4:	bne	35d04 <__assert_fail@plt+0x23618>
   35bf8:	mov	r3, #6
   35bfc:	str	r3, [sl]
   35c00:	mov	r1, r2
   35c04:	mov	r3, sl
   35c08:	mov	r0, r4
   35c0c:	bl	2d204 <__assert_fail@plt+0x1ab18>
   35c10:	mov	r3, #9
   35c14:	mov	r5, r0
   35c18:	mov	r2, #0
   35c1c:	mov	r1, r2
   35c20:	str	r3, [sl]
   35c24:	mov	r0, r4
   35c28:	mov	r3, sl
   35c2c:	bl	2d204 <__assert_fail@plt+0x1ab18>
   35c30:	mov	r1, r5
   35c34:	mov	r3, #10
   35c38:	mov	r2, r0
   35c3c:	mov	r6, r0
   35c40:	mov	r0, r4
   35c44:	bl	2d354 <__assert_fail@plt+0x1ac68>
   35c48:	cmp	r6, #0
   35c4c:	cmpne	r5, #0
   35c50:	moveq	r2, #1
   35c54:	movne	r2, #0
   35c58:	cmp	r0, #0
   35c5c:	orreq	r2, r2, #1
   35c60:	cmp	r2, #0
   35c64:	mov	r5, r0
   35c68:	bne	35380 <__assert_fail@plt+0x22c94>
   35c6c:	ldr	r2, [sp, #12]
   35c70:	mov	r1, fp
   35c74:	mov	r0, sl
   35c78:	bl	317bc <__assert_fail@plt+0x1f0d0>
   35c7c:	b	35b4c <__assert_fail@plt+0x23460>
   35c80:	ldrh	r7, [ip], #2
   35c84:	add	r0, r5, r2
   35c88:	lsr	r7, r7, #3
   35c8c:	cmp	r0, #95	; 0x5f
   35c90:	movne	r0, r7
   35c94:	orreq	r0, r7, #1
   35c98:	tst	r0, #1
   35c9c:	ldrne	r0, [r3]
   35ca0:	orrne	r0, r0, lr, lsl r2
   35ca4:	add	r2, r2, #1
   35ca8:	strne	r0, [r3]
   35cac:	cmp	r2, #32
   35cb0:	bne	35c80 <__assert_fail@plt+0x23594>
   35cb4:	add	r6, r6, #1
   35cb8:	cmp	r6, #8
   35cbc:	add	r5, r5, #32
   35cc0:	add	r1, r1, #64	; 0x40
   35cc4:	add	r3, r3, #4
   35cc8:	beq	35be0 <__assert_fail@plt+0x234f4>
   35ccc:	mov	ip, r1
   35cd0:	mov	r2, #0
   35cd4:	b	35c80 <__assert_fail@plt+0x23594>
   35cd8:	mov	r6, r5
   35cdc:	bl	12374 <__ctype_b_loc@plt>
   35ce0:	add	r3, r6, #24
   35ce4:	mov	lr, #1
   35ce8:	add	r3, r4, r3, lsl #2
   35cec:	ldr	r1, [r0]
   35cf0:	add	r1, r1, r5, lsl #1
   35cf4:	b	35ccc <__assert_fail@plt+0x235e0>
   35cf8:	mov	r5, #128	; 0x80
   35cfc:	mov	r6, #4
   35d00:	b	35cdc <__assert_fail@plt+0x235f0>
   35d04:	mov	r3, #5
   35d08:	str	r3, [sl]
   35d0c:	mov	r1, r2
   35d10:	mov	r3, sl
   35d14:	mov	r0, r4
   35d18:	bl	2d204 <__assert_fail@plt+0x1ab18>
   35d1c:	mov	r3, #10
   35d20:	mov	r5, r0
   35d24:	b	35c18 <__assert_fail@plt+0x2352c>
   35d28:	mov	r2, #0
   35d2c:	mov	r3, sl
   35d30:	mov	r1, r2
   35d34:	mov	r0, r4
   35d38:	bl	2d204 <__assert_fail@plt+0x1ab18>
   35d3c:	subs	r5, r0, #0
   35d40:	bne	35c6c <__assert_fail@plt+0x23580>
   35d44:	b	35380 <__assert_fail@plt+0x22c94>
   35d48:	mov	r2, #0
   35d4c:	mov	r3, sl
   35d50:	mov	r1, r2
   35d54:	mov	r0, r4
   35d58:	bl	2d204 <__assert_fail@plt+0x1ab18>
   35d5c:	subs	r5, r0, #0
   35d60:	beq	35380 <__assert_fail@plt+0x22c94>
   35d64:	ldr	r3, [r4, #92]	; 0x5c
   35d68:	cmp	r3, #1
   35d6c:	bgt	35aec <__assert_fail@plt+0x23400>
   35d70:	b	353a0 <__assert_fail@plt+0x22cb4>
   35d74:	sub	r3, r3, #33	; 0x21
   35d78:	clz	r3, r3
   35d7c:	lsr	r3, r3, #5
   35d80:	str	r3, [sp]
   35d84:	ldr	r2, [pc, #1356]	; 362d8 <__assert_fail@plt+0x23bec>
   35d88:	ldr	r3, [pc, #1356]	; 362dc <__assert_fail@plt+0x23bf0>
   35d8c:	str	r9, [sp, #4]
   35d90:	ldr	r1, [fp, #64]	; 0x40
   35d94:	mov	r0, r4
   35d98:	bl	2ee20 <__assert_fail@plt+0x1c734>
   35d9c:	ldr	r3, [r9]
   35da0:	mov	r5, r0
   35da4:	b	35550 <__assert_fail@plt+0x22e64>
   35da8:	sub	r3, r3, #35	; 0x23
   35dac:	clz	r3, r3
   35db0:	lsr	r3, r3, #5
   35db4:	str	r3, [sp]
   35db8:	str	r9, [sp, #4]
   35dbc:	ldr	r3, [pc, #1308]	; 362e0 <__assert_fail@plt+0x23bf4>
   35dc0:	ldr	r2, [pc, #1308]	; 362e4 <__assert_fail@plt+0x23bf8>
   35dc4:	b	35d90 <__assert_fail@plt+0x236a4>
   35dc8:	mov	r3, #5
   35dcc:	b	35384 <__assert_fail@plt+0x22c98>
   35dd0:	cmn	r0, #2
   35dd4:	bne	35e3c <__assert_fail@plt+0x23750>
   35dd8:	cmn	r8, #2
   35ddc:	cmnne	r7, #2
   35de0:	bne	35ea4 <__assert_fail@plt+0x237b8>
   35de4:	ldr	r3, [sp, #12]
   35de8:	ands	r6, r3, #2097152	; 0x200000
   35dec:	bne	35e80 <__assert_fail@plt+0x23794>
   35df0:	ldrb	r3, [sl, #4]
   35df4:	cmp	r3, #2
   35df8:	moveq	r3, #9
   35dfc:	streq	r3, [r9]
   35e00:	bne	3542c <__assert_fail@plt+0x22d40>
   35e04:	ldr	r2, [r9]
   35e08:	adds	r2, r2, #0
   35e0c:	movne	r2, #1
   35e10:	cmp	r6, #0
   35e14:	movne	r2, #0
   35e18:	cmp	r2, #0
   35e1c:	beq	3609c <__assert_fail@plt+0x239b0>
   35e20:	cmp	r5, #0
   35e24:	beq	35568 <__assert_fail@plt+0x22e7c>
   35e28:	mov	r2, #0
   35e2c:	ldr	r1, [pc, #1176]	; 362cc <__assert_fail@plt+0x23be0>
   35e30:	mov	r0, r5
   35e34:	bl	2d034 <__assert_fail@plt+0x1a948>
   35e38:	b	35568 <__assert_fail@plt+0x22e7c>
   35e3c:	ldrb	r3, [sl, #4]
   35e40:	cmp	r3, #24
   35e44:	moveq	r7, r8
   35e48:	beq	35dd8 <__assert_fail@plt+0x236ec>
   35e4c:	cmp	r3, #1
   35e50:	bne	35e78 <__assert_fail@plt+0x2378c>
   35e54:	ldrb	r3, [sl]
   35e58:	cmp	r3, #44	; 0x2c
   35e5c:	bne	35e78 <__assert_fail@plt+0x2378c>
   35e60:	ldr	r2, [sp, #12]
   35e64:	mov	r1, sl
   35e68:	mov	r0, fp
   35e6c:	bl	317d8 <__assert_fail@plt+0x1f0ec>
   35e70:	mov	r7, r0
   35e74:	b	35dd8 <__assert_fail@plt+0x236ec>
   35e78:	mvn	r7, #1
   35e7c:	b	35dd8 <__assert_fail@plt+0x236ec>
   35e80:	ldr	r3, [sp, #16]
   35e84:	str	r3, [fp, #40]	; 0x28
   35e88:	add	r3, sp, #120	; 0x78
   35e8c:	ldm	r3, {r0, r1}
   35e90:	mov	r3, #1
   35e94:	stm	sl, {r0, r1}
   35e98:	strb	r3, [sl, #4]
   35e9c:	mov	r6, r5
   35ea0:	b	35e04 <__assert_fail@plt+0x23718>
   35ea4:	cmn	r7, #1
   35ea8:	cmpne	r7, r8
   35eac:	blt	3542c <__assert_fail@plt+0x22d40>
   35eb0:	ldrb	r3, [sl, #4]
   35eb4:	cmp	r3, #24
   35eb8:	bne	3542c <__assert_fail@plt+0x22d40>
   35ebc:	cmn	r7, #1
   35ec0:	ldr	r3, [pc, #1056]	; 362e8 <__assert_fail@plt+0x23bfc>
   35ec4:	bne	35ee4 <__assert_fail@plt+0x237f8>
   35ec8:	cmp	r8, r3
   35ecc:	movle	r3, #0
   35ed0:	movgt	r3, #1
   35ed4:	cmp	r3, #0
   35ed8:	beq	35ef8 <__assert_fail@plt+0x2380c>
   35edc:	mov	r3, #15
   35ee0:	b	35430 <__assert_fail@plt+0x22d44>
   35ee4:	cmp	r7, r3
   35ee8:	b	35ecc <__assert_fail@plt+0x237e0>
   35eec:	cmp	r3, #19
   35ef0:	mvnne	r7, #0
   35ef4:	moveq	r7, #1
   35ef8:	ldr	r2, [sp, #12]
   35efc:	mov	r1, fp
   35f00:	mov	r0, sl
   35f04:	bl	317bc <__assert_fail@plt+0x1f0d0>
   35f08:	cmp	r5, #0
   35f0c:	beq	35e9c <__assert_fail@plt+0x237b0>
   35f10:	orrs	r6, r8, r7
   35f14:	bne	35f2c <__assert_fail@plt+0x23840>
   35f18:	mov	r2, r6
   35f1c:	ldr	r1, [pc, #936]	; 362cc <__assert_fail@plt+0x23be0>
   35f20:	mov	r0, r5
   35f24:	bl	2d034 <__assert_fail@plt+0x1a948>
   35f28:	b	35e04 <__assert_fail@plt+0x23718>
   35f2c:	cmp	r8, #0
   35f30:	movgt	r6, r5
   35f34:	strgt	r5, [sp, #16]
   35f38:	movgt	r3, #2
   35f3c:	bgt	36008 <__assert_fail@plt+0x2391c>
   35f40:	mov	r3, #0
   35f44:	str	r5, [sp, #16]
   35f48:	str	r3, [sp, #20]
   35f4c:	ldr	r3, [sp, #16]
   35f50:	ldrb	r3, [r3, #24]
   35f54:	cmp	r3, #17
   35f58:	bne	35f70 <__assert_fail@plt+0x23884>
   35f5c:	ldr	r3, [sp, #16]
   35f60:	ldr	r1, [pc, #900]	; 362ec <__assert_fail@plt+0x23c00>
   35f64:	mov	r0, r3
   35f68:	ldr	r2, [r3, #20]
   35f6c:	bl	2d034 <__assert_fail@plt+0x1a948>
   35f70:	cmn	r7, #1
   35f74:	movne	r3, #10
   35f78:	moveq	r3, #11
   35f7c:	mov	r2, #0
   35f80:	ldr	r1, [sp, #16]
   35f84:	mov	r0, r4
   35f88:	bl	2d354 <__assert_fail@plt+0x1ac68>
   35f8c:	subs	r6, r0, #0
   35f90:	addne	r8, r8, #2
   35f94:	beq	3603c <__assert_fail@plt+0x23950>
   35f98:	cmp	r7, r8
   35f9c:	bge	36044 <__assert_fail@plt+0x23958>
   35fa0:	ldr	r3, [sp, #20]
   35fa4:	cmp	r3, #0
   35fa8:	beq	35e04 <__assert_fail@plt+0x23718>
   35fac:	mov	r2, r6
   35fb0:	mov	r3, #16
   35fb4:	ldr	r1, [sp, #20]
   35fb8:	mov	r0, r4
   35fbc:	bl	2d354 <__assert_fail@plt+0x1ac68>
   35fc0:	mov	r6, r0
   35fc4:	b	35e04 <__assert_fail@plt+0x23718>
   35fc8:	mov	r1, r4
   35fcc:	ldr	r0, [sp, #16]
   35fd0:	bl	2d2b0 <__assert_fail@plt+0x1abc4>
   35fd4:	mov	r3, #16
   35fd8:	mov	r1, r6
   35fdc:	str	r0, [sp, #16]
   35fe0:	mov	r2, r0
   35fe4:	mov	r0, r4
   35fe8:	bl	2d354 <__assert_fail@plt+0x1ac68>
   35fec:	ldr	r3, [sp, #16]
   35ff0:	cmp	r0, #0
   35ff4:	cmpne	r3, #0
   35ff8:	mov	r6, r0
   35ffc:	beq	3603c <__assert_fail@plt+0x23950>
   36000:	ldr	r3, [sp, #20]
   36004:	add	r3, r3, #1
   36008:	str	r3, [sp, #20]
   3600c:	ldr	r3, [sp, #20]
   36010:	cmp	r8, r3
   36014:	bge	35fc8 <__assert_fail@plt+0x238dc>
   36018:	cmp	r8, r7
   3601c:	beq	35e04 <__assert_fail@plt+0x23718>
   36020:	mov	r1, r4
   36024:	ldr	r0, [sp, #16]
   36028:	bl	2d2b0 <__assert_fail@plt+0x1abc4>
   3602c:	subs	r3, r0, #0
   36030:	str	r3, [sp, #16]
   36034:	strne	r6, [sp, #20]
   36038:	bne	35f4c <__assert_fail@plt+0x23860>
   3603c:	mov	r3, #12
   36040:	b	35430 <__assert_fail@plt+0x22d44>
   36044:	mov	r1, r4
   36048:	ldr	r0, [sp, #16]
   3604c:	bl	2d2b0 <__assert_fail@plt+0x1abc4>
   36050:	mov	r3, #16
   36054:	mov	r1, r6
   36058:	str	r0, [sp, #16]
   3605c:	mov	r2, r0
   36060:	mov	r0, r4
   36064:	bl	2d354 <__assert_fail@plt+0x1ac68>
   36068:	ldr	r3, [sp, #16]
   3606c:	cmp	r0, #0
   36070:	cmpne	r3, #0
   36074:	mov	r1, r0
   36078:	beq	3603c <__assert_fail@plt+0x23950>
   3607c:	mov	r3, #10
   36080:	mov	r2, #0
   36084:	mov	r0, r4
   36088:	bl	2d354 <__assert_fail@plt+0x1ac68>
   3608c:	subs	r6, r0, #0
   36090:	beq	3603c <__assert_fail@plt+0x23950>
   36094:	add	r8, r8, #1
   36098:	b	35f98 <__assert_fail@plt+0x238ac>
   3609c:	ldr	r3, [sp, #12]
   360a0:	tst	r3, #16777216	; 0x1000000
   360a4:	beq	360d0 <__assert_fail@plt+0x239e4>
   360a8:	ldrb	r3, [sl, #4]
   360ac:	cmp	r3, #23
   360b0:	cmpne	r3, #11
   360b4:	bne	360d0 <__assert_fail@plt+0x239e4>
   360b8:	cmp	r6, #0
   360bc:	beq	35b04 <__assert_fail@plt+0x23418>
   360c0:	ldr	r1, [pc, #516]	; 362cc <__assert_fail@plt+0x23be0>
   360c4:	mov	r0, r6
   360c8:	bl	2d034 <__assert_fail@plt+0x1a948>
   360cc:	b	35b04 <__assert_fail@plt+0x23418>
   360d0:	mov	r5, r6
   360d4:	b	353b0 <__assert_fail@plt+0x22cc4>
   360d8:	add	r2, sp, #120	; 0x78
   360dc:	add	r0, sp, #152	; 0x98
   360e0:	str	r2, [sp, #76]	; 0x4c
   360e4:	mov	r2, #1
   360e8:	str	r7, [r0, #-80]!	; 0xffffffb0
   360ec:	str	r2, [sp, #4]
   360f0:	ldr	r2, [sp, #12]
   360f4:	mov	r1, fp
   360f8:	str	r2, [sp]
   360fc:	add	r2, sp, #80	; 0x50
   36100:	bl	30f84 <__assert_fail@plt+0x1e898>
   36104:	subs	r3, r0, #0
   36108:	str	r3, [sp, #20]
   3610c:	beq	357d8 <__assert_fail@plt+0x230ec>
   36110:	ldr	r3, [sp, #20]
   36114:	b	35630 <__assert_fail@plt+0x22f44>
   36118:	cmp	r8, #3
   3611c:	beq	35814 <__assert_fail@plt+0x23128>
   36120:	cmp	r7, #3
   36124:	bne	36138 <__assert_fail@plt+0x23a4c>
   36128:	ldr	r0, [sp, #76]	; 0x4c
   3612c:	bl	123bc <strlen@plt>
   36130:	cmp	r0, #1
   36134:	bhi	35824 <__assert_fail@plt+0x23138>
   36138:	cmp	r8, #0
   3613c:	ldrbeq	r5, [sp, #68]	; 0x44
   36140:	beq	36158 <__assert_fail@plt+0x23a6c>
   36144:	cmp	r8, #3
   36148:	movne	r5, #0
   3614c:	bne	36158 <__assert_fail@plt+0x23a6c>
   36150:	ldr	r3, [sp, #68]	; 0x44
   36154:	ldrb	r5, [r3]
   36158:	cmp	r7, #0
   3615c:	ldrbeq	r7, [sp, #76]	; 0x4c
   36160:	beq	36174 <__assert_fail@plt+0x23a88>
   36164:	cmp	r7, #3
   36168:	movne	r7, #0
   3616c:	ldreq	r3, [sp, #76]	; 0x4c
   36170:	ldrbeq	r7, [r3]
   36174:	cmp	r8, #0
   36178:	cmpne	r8, #3
   3617c:	ldrne	r5, [sp, #68]	; 0x44
   36180:	bne	3619c <__assert_fail@plt+0x23ab0>
   36184:	ldr	r3, [r4, #92]	; 0x5c
   36188:	cmp	r3, #1
   3618c:	ble	3619c <__assert_fail@plt+0x23ab0>
   36190:	mov	r0, r5
   36194:	bl	12470 <btowc@plt>
   36198:	mov	r5, r0
   3619c:	ldr	r3, [sp, #72]	; 0x48
   361a0:	cmp	r3, #3
   361a4:	cmpne	r3, #0
   361a8:	ldrne	r7, [sp, #76]	; 0x4c
   361ac:	bne	361c8 <__assert_fail@plt+0x23adc>
   361b0:	ldr	r3, [r4, #92]	; 0x5c
   361b4:	cmp	r3, #1
   361b8:	ble	361c8 <__assert_fail@plt+0x23adc>
   361bc:	mov	r0, r7
   361c0:	bl	12470 <btowc@plt>
   361c4:	mov	r7, r0
   361c8:	cmn	r5, #1
   361cc:	cmnne	r7, #1
   361d0:	beq	35824 <__assert_fail@plt+0x23138>
   361d4:	ldr	r3, [sp, #44]	; 0x2c
   361d8:	cmp	r5, r7
   361dc:	movls	r3, #0
   361e0:	andhi	r3, r3, #1
   361e4:	cmp	r3, #0
   361e8:	bne	3580c <__assert_fail@plt+0x23120>
   361ec:	ldr	r3, [r4, #92]	; 0x5c
   361f0:	cmp	r3, #1
   361f4:	ble	35854 <__assert_fail@plt+0x23168>
   361f8:	ldr	r3, [r6, #32]
   361fc:	ldr	r2, [sp, #32]
   36200:	cmp	r3, r2
   36204:	bne	35834 <__assert_fail@plt+0x23148>
   36208:	lsl	r8, r2, #1
   3620c:	add	r8, r8, #1
   36210:	ldr	r0, [r6, #4]
   36214:	lsl	r3, r8, #2
   36218:	mov	r1, r3
   3621c:	str	r3, [sp, #52]	; 0x34
   36220:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   36224:	ldr	r3, [sp, #52]	; 0x34
   36228:	mov	r1, r3
   3622c:	str	r0, [sp, #48]	; 0x30
   36230:	ldr	r0, [r6, #8]
   36234:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   36238:	ldr	r2, [sp, #48]	; 0x30
   3623c:	cmp	r0, #0
   36240:	cmpne	r2, #0
   36244:	mov	r3, r0
   36248:	bne	3582c <__assert_fail@plt+0x23140>
   3624c:	str	r0, [sp, #20]
   36250:	mov	r0, r2
   36254:	bl	2a01c <__assert_fail@plt+0x17930>
   36258:	ldr	r3, [sp, #20]
   3625c:	mov	r0, r3
   36260:	bl	2a01c <__assert_fail@plt+0x17930>
   36264:	mov	r3, #12
   36268:	str	r3, [sp, #20]
   3626c:	b	3588c <__assert_fail@plt+0x231a0>
   36270:	mov	r3, #3
   36274:	strb	r3, [sp, #124]	; 0x7c
   36278:	ldr	r3, [sp, #16]
   3627c:	mov	r2, #0
   36280:	str	r3, [sp, #120]	; 0x78
   36284:	mov	r1, r2
   36288:	add	r3, sp, #120	; 0x78
   3628c:	mov	r0, r4
   36290:	bl	2d204 <__assert_fail@plt+0x1ab18>
   36294:	subs	r1, r0, #0
   36298:	beq	362b4 <__assert_fail@plt+0x23bc8>
   3629c:	mov	r3, #10
   362a0:	mov	r2, r5
   362a4:	mov	r0, r4
   362a8:	bl	2d354 <__assert_fail@plt+0x1ac68>
   362ac:	subs	r5, r0, #0
   362b0:	bne	3554c <__assert_fail@plt+0x22e60>
   362b4:	mov	r3, #12
   362b8:	b	35630 <__assert_fail@plt+0x22f44>
   362bc:	cmp	r7, #3
   362c0:	bne	36150 <__assert_fail@plt+0x23a64>
   362c4:	b	36128 <__assert_fail@plt+0x23a3c>
   362c8:	addeq	r0, ip, r0, lsl #16
   362cc:	andeq	sp, r2, r8, lsl #28
   362d0:	andeq	r0, r0, pc, lsl #6
   362d4:	mvnseq	r0, #0
   362d8:	andeq	pc, r3, r6, lsl r4	; <UNPREDICTABLE>
   362dc:	andeq	pc, r3, r1, asr #8
   362e0:	ldrdeq	fp, [r3], -pc	; <UNPREDICTABLE>
   362e4:	andeq	pc, r3, r2, lsr #8
   362e8:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   362ec:	muleq	r2, r8, ip
   362f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   362f4:	sub	sp, sp, #20
   362f8:	ldr	ip, [r1]
   362fc:	ldr	r5, [sp, #60]	; 0x3c
   36300:	mov	sl, r3
   36304:	str	r0, [sp, #12]
   36308:	stmib	sp, {r5, ip}
   3630c:	ldr	ip, [sp, #56]	; 0x38
   36310:	mov	r7, r1
   36314:	str	ip, [sp]
   36318:	mov	r8, r2
   3631c:	bl	35294 <__assert_fail@plt+0x22ba8>
   36320:	ldr	r3, [r5]
   36324:	adds	r3, r3, #0
   36328:	movne	r3, #1
   3632c:	cmp	r0, #0
   36330:	movne	r3, #0
   36334:	cmp	r3, #0
   36338:	moveq	r4, r0
   3633c:	moveq	fp, #16
   36340:	beq	363b8 <__assert_fail@plt+0x23ccc>
   36344:	mov	r4, #0
   36348:	mov	r0, r4
   3634c:	add	sp, sp, #20
   36350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36354:	cmp	r4, #0
   36358:	cmpne	r0, #0
   3635c:	beq	363a8 <__assert_fail@plt+0x23cbc>
   36360:	mov	r2, r0
   36364:	mov	r3, fp
   36368:	mov	r1, r4
   3636c:	ldr	r0, [sp, #8]
   36370:	bl	2d354 <__assert_fail@plt+0x1ac68>
   36374:	subs	r9, r0, #0
   36378:	bne	363b4 <__assert_fail@plt+0x23cc8>
   3637c:	mov	r2, r9
   36380:	ldr	r1, [pc, #184]	; 36440 <__assert_fail@plt+0x23d54>
   36384:	mov	r0, r6
   36388:	bl	2d034 <__assert_fail@plt+0x1a948>
   3638c:	mov	r2, r9
   36390:	ldr	r1, [pc, #168]	; 36440 <__assert_fail@plt+0x23d54>
   36394:	mov	r0, r4
   36398:	bl	2d034 <__assert_fail@plt+0x1a948>
   3639c:	mov	r2, #12
   363a0:	str	r2, [r5]
   363a4:	b	36344 <__assert_fail@plt+0x23c58>
   363a8:	cmp	r4, #0
   363ac:	movne	r9, r4
   363b0:	moveq	r9, r0
   363b4:	mov	r4, r9
   363b8:	ldrb	r2, [r8, #4]
   363bc:	and	r3, r2, #247	; 0xf7
   363c0:	cmp	r3, #2
   363c4:	beq	36348 <__assert_fail@plt+0x23c5c>
   363c8:	ldr	r3, [sp, #56]	; 0x38
   363cc:	clz	r3, r3
   363d0:	lsr	r3, r3, #5
   363d4:	cmp	r2, #9
   363d8:	orrne	r3, r3, #1
   363dc:	cmp	r3, #0
   363e0:	beq	36348 <__assert_fail@plt+0x23c5c>
   363e4:	ldr	r3, [sp, #56]	; 0x38
   363e8:	str	r5, [sp, #4]
   363ec:	str	r3, [sp]
   363f0:	mov	r2, r8
   363f4:	mov	r3, sl
   363f8:	mov	r1, r7
   363fc:	ldr	r0, [sp, #12]
   36400:	bl	35294 <__assert_fail@plt+0x22ba8>
   36404:	ldr	r3, [r5]
   36408:	adds	r3, r3, #0
   3640c:	movne	r3, #1
   36410:	cmp	r0, #0
   36414:	movne	r3, #0
   36418:	cmp	r3, #0
   3641c:	mov	r6, r0
   36420:	beq	36354 <__assert_fail@plt+0x23c68>
   36424:	cmp	r4, #0
   36428:	beq	36344 <__assert_fail@plt+0x23c58>
   3642c:	mov	r2, #0
   36430:	ldr	r1, [pc, #8]	; 36440 <__assert_fail@plt+0x23d54>
   36434:	mov	r0, r4
   36438:	bl	2d034 <__assert_fail@plt+0x1a948>
   3643c:	b	36344 <__assert_fail@plt+0x23c58>
   36440:	andeq	sp, r2, r8, lsl #28
   36444:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36448:	sub	sp, sp, #28
   3644c:	ldr	r6, [r1]
   36450:	ldr	r7, [sp, #68]	; 0x44
   36454:	mov	fp, r3
   36458:	ldr	ip, [r6, #84]	; 0x54
   3645c:	str	r7, [sp, #4]
   36460:	str	ip, [sp, #12]
   36464:	ldr	ip, [sp, #64]	; 0x40
   36468:	mov	r9, r0
   3646c:	str	ip, [sp]
   36470:	mov	sl, r1
   36474:	mov	r8, r2
   36478:	bl	362f0 <__assert_fail@plt+0x23c04>
   3647c:	ldr	r5, [r7]
   36480:	adds	r5, r5, #0
   36484:	movne	r5, #1
   36488:	cmp	r0, #0
   3648c:	movne	r5, #0
   36490:	cmp	r5, #0
   36494:	orreq	r3, fp, #8388608	; 0x800000
   36498:	moveq	r4, r0
   3649c:	streq	r3, [sp, #20]
   364a0:	beq	364f0 <__assert_fail@plt+0x23e04>
   364a4:	mov	r4, #0
   364a8:	mov	r0, r4
   364ac:	add	sp, sp, #28
   364b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   364b4:	ldr	r3, [r6, #84]	; 0x54
   364b8:	ldr	r1, [sp, #16]
   364bc:	orr	r3, r3, r1
   364c0:	str	r3, [r6, #84]	; 0x54
   364c4:	mov	r1, r4
   364c8:	mov	r3, #10
   364cc:	mov	r0, r6
   364d0:	bl	2d354 <__assert_fail@plt+0x1ac68>
   364d4:	subs	r4, r0, #0
   364d8:	bne	364f0 <__assert_fail@plt+0x23e04>
   364dc:	mov	r3, #12
   364e0:	str	r3, [r7]
   364e4:	b	364a8 <__assert_fail@plt+0x23dbc>
   364e8:	mov	r2, r5
   364ec:	b	364c4 <__assert_fail@plt+0x23dd8>
   364f0:	ldrb	r3, [r8, #4]
   364f4:	cmp	r3, #10
   364f8:	bne	364a8 <__assert_fail@plt+0x23dbc>
   364fc:	ldr	r2, [sp, #20]
   36500:	mov	r1, r9
   36504:	mov	r0, r8
   36508:	bl	317bc <__assert_fail@plt+0x1f0d0>
   3650c:	ldrb	r2, [r8, #4]
   36510:	and	r3, r2, #247	; 0xf7
   36514:	cmp	r3, #2
   36518:	beq	364e8 <__assert_fail@plt+0x23dfc>
   3651c:	ldr	r3, [sp, #64]	; 0x40
   36520:	clz	r3, r3
   36524:	lsr	r3, r3, #5
   36528:	cmp	r2, #9
   3652c:	orrne	r3, r3, #1
   36530:	cmp	r3, #0
   36534:	beq	364e8 <__assert_fail@plt+0x23dfc>
   36538:	ldr	r3, [r6, #84]	; 0x54
   3653c:	mov	r2, r8
   36540:	str	r3, [sp, #16]
   36544:	ldr	r3, [sp, #12]
   36548:	mov	r1, sl
   3654c:	str	r3, [r6, #84]	; 0x54
   36550:	ldr	r3, [sp, #64]	; 0x40
   36554:	str	r7, [sp, #4]
   36558:	str	r3, [sp]
   3655c:	mov	r0, r9
   36560:	mov	r3, fp
   36564:	bl	362f0 <__assert_fail@plt+0x23c04>
   36568:	ldr	r3, [r7]
   3656c:	adds	r3, r3, #0
   36570:	movne	r3, #1
   36574:	cmp	r0, #0
   36578:	movne	r3, #0
   3657c:	cmp	r3, #0
   36580:	mov	r2, r0
   36584:	beq	364b4 <__assert_fail@plt+0x23dc8>
   36588:	cmp	r4, #0
   3658c:	beq	364a4 <__assert_fail@plt+0x23db8>
   36590:	mov	r2, #0
   36594:	ldr	r1, [pc, #8]	; 365a4 <__assert_fail@plt+0x23eb8>
   36598:	mov	r0, r4
   3659c:	bl	2d034 <__assert_fail@plt+0x1a948>
   365a0:	b	364a4 <__assert_fail@plt+0x23db8>
   365a4:	andeq	sp, r2, r8, lsl #28
   365a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   365ac:	mov	r9, r3
   365b0:	ldrb	r3, [r0, #28]
   365b4:	sub	sp, sp, #132	; 0x84
   365b8:	mov	r7, r2
   365bc:	and	r3, r3, #144	; 0x90
   365c0:	strb	r3, [r0, #28]
   365c4:	ldr	r3, [r0, #4]
   365c8:	mov	r2, #0
   365cc:	cmp	r3, #159	; 0x9f
   365d0:	mov	r6, r0
   365d4:	mov	sl, r1
   365d8:	str	r2, [sp, #24]
   365dc:	str	r9, [r0, #12]
   365e0:	str	r2, [r0, #8]
   365e4:	str	r2, [r0, #24]
   365e8:	ldr	r4, [r0]
   365ec:	bhi	36610 <__assert_fail@plt+0x23f24>
   365f0:	mov	r0, r4
   365f4:	mov	r1, #160	; 0xa0
   365f8:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   365fc:	subs	r4, r0, #0
   36600:	beq	370dc <__assert_fail@plt+0x249f0>
   36604:	mov	r3, #160	; 0xa0
   36608:	str	r3, [r6, #4]
   3660c:	str	r4, [r6]
   36610:	mov	r2, #160	; 0xa0
   36614:	str	r2, [r6, #8]
   36618:	mov	r1, #0
   3661c:	mov	r0, r4
   36620:	bl	12434 <memset@plt>
   36624:	mov	r3, #31
   36628:	str	r3, [r4, #64]	; 0x40
   3662c:	ldr	r3, [pc, #2796]	; 37120 <__assert_fail@plt+0x24a34>
   36630:	cmp	r7, r3
   36634:	bls	367d8 <__assert_fail@plt+0x240ec>
   36638:	mov	r5, #12
   3663c:	cmp	r5, #0
   36640:	str	r5, [sp, #24]
   36644:	bne	37108 <__assert_fail@plt+0x24a1c>
   36648:	ldr	r8, [pc, #2772]	; 37124 <__assert_fail@plt+0x24a38>
   3664c:	ldr	r1, [pc, #2772]	; 37128 <__assert_fail@plt+0x24a3c>
   36650:	cmp	r8, #0
   36654:	mov	r3, #1
   36658:	moveq	r3, r5
   3665c:	cmp	r1, #0
   36660:	mov	r2, #1
   36664:	moveq	r2, r1
   36668:	orr	r3, r3, r2
   3666c:	tst	r3, #1
   36670:	bne	370e4 <__assert_fail@plt+0x249f8>
   36674:	ldr	r3, [r6, #20]
   36678:	mov	r2, #84	; 0x54
   3667c:	str	r3, [sp, #12]
   36680:	mov	r1, #0
   36684:	ands	r3, r9, #4194304	; 0x400000
   36688:	add	r0, sp, #44	; 0x2c
   3668c:	movne	fp, #1
   36690:	moveq	fp, #0
   36694:	str	r3, [sp, #16]
   36698:	bl	12434 <memset@plt>
   3669c:	ldr	r3, [sp, #12]
   366a0:	ldrb	r2, [r4, #88]	; 0x58
   366a4:	str	r3, [sp, #108]	; 0x6c
   366a8:	strb	fp, [sp, #116]	; 0x74
   366ac:	cmp	r3, #0
   366b0:	orrne	fp, fp, #1
   366b4:	ldr	r3, [r4, #92]	; 0x5c
   366b8:	cmp	r7, #0
   366bc:	str	r3, [sp, #124]	; 0x7c
   366c0:	lsr	r3, r2, #2
   366c4:	lsr	r2, r2, #3
   366c8:	and	r3, r3, #1
   366cc:	and	r2, r2, #1
   366d0:	str	sl, [sp, #44]	; 0x2c
   366d4:	str	r7, [sp, #92]	; 0x5c
   366d8:	str	r7, [sp, #88]	; 0x58
   366dc:	strb	fp, [sp, #119]	; 0x77
   366e0:	strb	r3, [sp, #117]	; 0x75
   366e4:	strb	r2, [sp, #118]	; 0x76
   366e8:	str	r7, [sp, #100]	; 0x64
   366ec:	str	r7, [sp, #96]	; 0x60
   366f0:	bgt	36950 <__assert_fail@plt+0x24264>
   366f4:	ldrb	r3, [sp, #119]	; 0x77
   366f8:	cmp	r3, #0
   366fc:	ldrne	sl, [sp, #48]	; 0x30
   36700:	ands	r3, r9, #4194304	; 0x400000
   36704:	cmp	r3, #0
   36708:	str	sl, [sp, #48]	; 0x30
   3670c:	ldr	r3, [r4, #92]	; 0x5c
   36710:	beq	36978 <__assert_fail@plt+0x2428c>
   36714:	cmp	r3, #1
   36718:	ble	3696c <__assert_fail@plt+0x24280>
   3671c:	add	r0, sp, #44	; 0x2c
   36720:	bl	2d7b0 <__assert_fail@plt+0x1b0c4>
   36724:	subs	r5, r0, #0
   36728:	bne	36764 <__assert_fail@plt+0x24078>
   3672c:	ldr	r3, [sp, #76]	; 0x4c
   36730:	cmp	r7, r3
   36734:	ble	36764 <__assert_fail@plt+0x24078>
   36738:	ldr	r2, [r4, #92]	; 0x5c
   3673c:	ldr	r3, [sp, #72]	; 0x48
   36740:	ldr	r1, [sp, #80]	; 0x50
   36744:	add	r3, r3, r2
   36748:	cmp	r1, r3
   3674c:	bgt	36764 <__assert_fail@plt+0x24078>
   36750:	lsl	r1, r1, #1
   36754:	add	r0, sp, #44	; 0x2c
   36758:	bl	2d10c <__assert_fail@plt+0x1aa20>
   3675c:	subs	r5, r0, #0
   36760:	beq	3671c <__assert_fail@plt+0x24030>
   36764:	cmp	r5, #0
   36768:	str	r5, [sp, #24]
   3676c:	beq	369c0 <__assert_fail@plt+0x242d4>
   36770:	ldr	r7, [r6]
   36774:	ldr	r5, [r7, #56]	; 0x38
   36778:	cmp	r5, #0
   3677c:	bne	369ac <__assert_fail@plt+0x242c0>
   36780:	mov	r3, #31
   36784:	ldr	r0, [r7, #16]
   36788:	str	r5, [r7, #56]	; 0x38
   3678c:	str	r3, [r7, #64]	; 0x40
   36790:	str	r5, [r7, #52]	; 0x34
   36794:	bl	2a01c <__assert_fail@plt+0x17930>
   36798:	str	r5, [r7, #16]
   3679c:	add	r0, sp, #44	; 0x2c
   367a0:	bl	2e0b0 <__assert_fail@plt+0x1b9c4>
   367a4:	ldr	r2, [pc, #2428]	; 37128 <__assert_fail@plt+0x24a3c>
   367a8:	mov	r3, #1
   367ac:	cmp	r2, #0
   367b0:	moveq	r3, r5
   367b4:	cmp	r8, #0
   367b8:	mov	r2, #1
   367bc:	moveq	r2, r8
   367c0:	orr	r3, r3, r2
   367c4:	tst	r3, #1
   367c8:	beq	37108 <__assert_fail@plt+0x24a1c>
   367cc:	add	r0, r4, #136	; 0x88
   367d0:	bl	12044 <pthread_mutex_destroy@plt>
   367d4:	b	37108 <__assert_fail@plt+0x24a1c>
   367d8:	add	r0, r7, #1
   367dc:	str	r0, [r4, #4]
   367e0:	lsl	r0, r0, #3
   367e4:	bl	2bf10 <__assert_fail@plt+0x19824>
   367e8:	mov	r5, #1
   367ec:	str	r0, [r4]
   367f0:	cmp	r7, r5
   367f4:	lslcs	r5, r5, #1
   367f8:	bcs	367f0 <__assert_fail@plt+0x24104>
   367fc:	mov	r1, r5
   36800:	mov	r0, #12
   36804:	bl	29b08 <__assert_fail@plt+0x1741c>
   36808:	sub	r5, r5, #1
   3680c:	str	r5, [r4, #68]	; 0x44
   36810:	str	r0, [r4, #32]
   36814:	bl	12260 <__ctype_get_mb_cur_max@plt>
   36818:	str	r0, [r4, #92]	; 0x5c
   3681c:	mov	r0, #14
   36820:	bl	12560 <nl_langinfo@plt>
   36824:	ldrb	r3, [r0]
   36828:	and	r3, r3, #223	; 0xdf
   3682c:	cmp	r3, #85	; 0x55
   36830:	bne	36880 <__assert_fail@plt+0x24194>
   36834:	ldrb	r3, [r0, #1]
   36838:	and	r3, r3, #223	; 0xdf
   3683c:	cmp	r3, #84	; 0x54
   36840:	bne	36880 <__assert_fail@plt+0x24194>
   36844:	ldrb	r3, [r0, #2]
   36848:	and	r3, r3, #223	; 0xdf
   3684c:	cmp	r3, #70	; 0x46
   36850:	bne	36880 <__assert_fail@plt+0x24194>
   36854:	ldrb	r3, [r0, #3]
   36858:	ldr	r1, [pc, #2252]	; 3712c <__assert_fail@plt+0x24a40>
   3685c:	cmp	r3, #45	; 0x2d
   36860:	moveq	r3, #4
   36864:	movne	r3, #3
   36868:	add	r0, r0, r3
   3686c:	bl	11ffc <strcmp@plt>
   36870:	cmp	r0, #0
   36874:	ldrbeq	r3, [r4, #88]	; 0x58
   36878:	orreq	r3, r3, #4
   3687c:	strbeq	r3, [r4, #88]	; 0x58
   36880:	ldrb	r3, [r4, #88]	; 0x58
   36884:	bic	r3, r3, #8
   36888:	strb	r3, [r4, #88]	; 0x58
   3688c:	ldr	r3, [r4, #92]	; 0x5c
   36890:	cmp	r3, #1
   36894:	ble	36930 <__assert_fail@plt+0x24244>
   36898:	ldrb	r5, [r4, #88]	; 0x58
   3689c:	ands	r5, r5, #4
   368a0:	ldrne	r3, [pc, #2184]	; 37130 <__assert_fail@plt+0x24a44>
   368a4:	strne	r3, [r4, #60]	; 0x3c
   368a8:	bne	36930 <__assert_fail@plt+0x24244>
   368ac:	mov	r1, #1
   368b0:	mov	r0, #32
   368b4:	bl	29b08 <__assert_fail@plt+0x1741c>
   368b8:	cmp	r0, #0
   368bc:	str	r0, [r4, #60]	; 0x3c
   368c0:	movne	r2, #1
   368c4:	beq	36638 <__assert_fail@plt+0x23f4c>
   368c8:	lsl	fp, r5, #3
   368cc:	mov	r8, #0
   368d0:	add	r3, r8, fp
   368d4:	mov	r0, r3
   368d8:	str	r2, [sp, #16]
   368dc:	str	r3, [sp, #12]
   368e0:	bl	12470 <btowc@plt>
   368e4:	ldr	r2, [sp, #16]
   368e8:	ldr	r3, [sp, #12]
   368ec:	cmn	r0, #1
   368f0:	ldrne	ip, [r4, #60]	; 0x3c
   368f4:	ldrne	r1, [ip, r5]
   368f8:	orrne	r1, r1, r2, lsl r8
   368fc:	strne	r1, [ip, r5]
   36900:	bics	r1, r3, #127	; 0x7f
   36904:	bne	36918 <__assert_fail@plt+0x2422c>
   36908:	cmp	r3, r0
   3690c:	ldrbne	r3, [r4, #88]	; 0x58
   36910:	orrne	r3, r3, #8
   36914:	strbne	r3, [r4, #88]	; 0x58
   36918:	add	r8, r8, #1
   3691c:	cmp	r8, #32
   36920:	bne	368d0 <__assert_fail@plt+0x241e4>
   36924:	add	r5, r5, #4
   36928:	cmp	r5, #32
   3692c:	bne	368c8 <__assert_fail@plt+0x241dc>
   36930:	ldr	r3, [r4]
   36934:	cmp	r3, #0
   36938:	beq	36638 <__assert_fail@plt+0x23f4c>
   3693c:	ldr	r3, [r4, #32]
   36940:	cmp	r3, #0
   36944:	beq	36638 <__assert_fail@plt+0x23f4c>
   36948:	mov	r5, #0
   3694c:	b	3663c <__assert_fail@plt+0x23f50>
   36950:	add	r1, r7, #1
   36954:	add	r0, sp, #44	; 0x2c
   36958:	bl	2d10c <__assert_fail@plt+0x1aa20>
   3695c:	cmp	r0, #0
   36960:	beq	366f4 <__assert_fail@plt+0x24008>
   36964:	mov	r5, r0
   36968:	b	36764 <__assert_fail@plt+0x24078>
   3696c:	add	r0, sp, #44	; 0x2c
   36970:	bl	2dc80 <__assert_fail@plt+0x1b594>
   36974:	b	36764 <__assert_fail@plt+0x24078>
   36978:	cmp	r3, #1
   3697c:	ble	3698c <__assert_fail@plt+0x242a0>
   36980:	add	r0, sp, #44	; 0x2c
   36984:	bl	2d65c <__assert_fail@plt+0x1af70>
   36988:	b	36764 <__assert_fail@plt+0x24078>
   3698c:	cmp	fp, #0
   36990:	ldreq	r3, [sp, #80]	; 0x50
   36994:	streq	r3, [sp, #72]	; 0x48
   36998:	streq	r3, [sp, #76]	; 0x4c
   3699c:	beq	36764 <__assert_fail@plt+0x24078>
   369a0:	add	r0, sp, #44	; 0x2c
   369a4:	bl	2caa0 <__assert_fail@plt+0x1a3b4>
   369a8:	b	36764 <__assert_fail@plt+0x24078>
   369ac:	ldr	r9, [r5]
   369b0:	mov	r0, r5
   369b4:	bl	2a01c <__assert_fail@plt+0x17930>
   369b8:	mov	r5, r9
   369bc:	b	36778 <__assert_fail@plt+0x2408c>
   369c0:	ldr	r7, [r6]
   369c4:	orr	r2, r9, #8388608	; 0x800000
   369c8:	str	r5, [r6, #24]
   369cc:	add	r1, sp, #44	; 0x2c
   369d0:	str	r9, [r7, #128]	; 0x80
   369d4:	add	r0, sp, #32
   369d8:	bl	317bc <__assert_fail@plt+0x1f0d0>
   369dc:	add	r3, sp, #24
   369e0:	str	r3, [sp, #4]
   369e4:	str	r5, [sp]
   369e8:	mov	r3, r9
   369ec:	add	r2, sp, #32
   369f0:	mov	r1, r6
   369f4:	add	r0, sp, #44	; 0x2c
   369f8:	bl	36444 <__assert_fail@plt+0x23d58>
   369fc:	ldr	r3, [sp, #24]
   36a00:	adds	r3, r3, #0
   36a04:	movne	r3, #1
   36a08:	cmp	r0, #0
   36a0c:	movne	r3, #0
   36a10:	cmp	r3, #0
   36a14:	mov	r9, r0
   36a18:	movne	r0, r5
   36a1c:	bne	36a68 <__assert_fail@plt+0x2437c>
   36a20:	mov	r2, r5
   36a24:	mov	r1, r5
   36a28:	mov	r3, #2
   36a2c:	mov	r0, r7
   36a30:	bl	2d354 <__assert_fail@plt+0x1ac68>
   36a34:	cmp	r9, #0
   36a38:	mov	r5, r0
   36a3c:	beq	36a54 <__assert_fail@plt+0x24368>
   36a40:	mov	r3, #16
   36a44:	mov	r2, r5
   36a48:	mov	r1, r9
   36a4c:	mov	r0, r7
   36a50:	bl	2d354 <__assert_fail@plt+0x1ac68>
   36a54:	cmp	r0, #0
   36a58:	cmpne	r5, #0
   36a5c:	moveq	r0, #0
   36a60:	moveq	r3, #12
   36a64:	streq	r3, [sp, #24]
   36a68:	cmp	r0, #0
   36a6c:	str	r0, [r4, #52]	; 0x34
   36a70:	beq	36770 <__assert_fail@plt+0x24084>
   36a74:	ldr	r5, [r6]
   36a78:	mov	r7, #12
   36a7c:	ldr	r0, [r5, #4]
   36a80:	lsl	r0, r0, #2
   36a84:	bl	2bf10 <__assert_fail@plt+0x19824>
   36a88:	str	r0, [r5, #12]
   36a8c:	ldr	r0, [r5, #4]
   36a90:	lsl	r0, r0, #2
   36a94:	bl	2bf10 <__assert_fail@plt+0x19824>
   36a98:	str	r0, [r5, #16]
   36a9c:	ldr	r0, [r5, #4]
   36aa0:	mul	r0, r7, r0
   36aa4:	bl	2bf10 <__assert_fail@plt+0x19824>
   36aa8:	str	r0, [r5, #20]
   36aac:	ldr	r0, [r5, #4]
   36ab0:	mul	r0, r7, r0
   36ab4:	bl	2bf10 <__assert_fail@plt+0x19824>
   36ab8:	ldr	r3, [r5, #12]
   36abc:	cmp	r3, #0
   36ac0:	str	r0, [r5, #24]
   36ac4:	bne	36bc0 <__assert_fail@plt+0x244d4>
   36ac8:	mov	r7, #12
   36acc:	cmp	r7, #0
   36ad0:	str	r7, [sp, #24]
   36ad4:	bne	36770 <__assert_fail@plt+0x24084>
   36ad8:	ldrb	r2, [r4, #88]	; 0x58
   36adc:	ldr	r3, [sp, #16]
   36ae0:	clz	r3, r3
   36ae4:	lsr	r3, r3, #5
   36ae8:	ands	r3, r3, r2, lsr #2
   36aec:	beq	36b08 <__assert_fail@plt+0x2441c>
   36af0:	ldr	r2, [r6, #20]
   36af4:	cmp	r2, #0
   36af8:	moveq	lr, r7
   36afc:	ldreq	ip, [r4, #8]
   36b00:	moveq	r0, r7
   36b04:	beq	36ea8 <__assert_fail@plt+0x247bc>
   36b08:	ldr	r3, [r4, #52]	; 0x34
   36b0c:	ldr	r1, [r4, #24]
   36b10:	mov	r9, #12
   36b14:	ldr	r3, [r3, #12]
   36b18:	add	r0, sp, #32
   36b1c:	ldr	r3, [r3, #28]
   36b20:	str	r3, [r4, #72]	; 0x48
   36b24:	mla	r1, r9, r3, r1
   36b28:	bl	2f740 <__assert_fail@plt+0x1d054>
   36b2c:	cmp	r0, #0
   36b30:	mov	r7, r0
   36b34:	str	r0, [sp, #28]
   36b38:	bne	36b70 <__assert_fail@plt+0x24484>
   36b3c:	ldr	r3, [r4, #76]	; 0x4c
   36b40:	cmp	r3, #0
   36b44:	movgt	r5, r0
   36b48:	bgt	36fb8 <__assert_fail@plt+0x248cc>
   36b4c:	mov	r3, #0
   36b50:	add	r2, sp, #32
   36b54:	mov	r1, r4
   36b58:	add	r0, sp, #28
   36b5c:	bl	2f8f0 <__assert_fail@plt+0x1d204>
   36b60:	cmp	r0, #0
   36b64:	str	r0, [r4, #36]	; 0x24
   36b68:	bne	37040 <__assert_fail@plt+0x24954>
   36b6c:	ldr	r7, [sp, #28]
   36b70:	str	r7, [sp, #24]
   36b74:	ldr	r7, [r6]
   36b78:	ldr	r5, [r7, #56]	; 0x38
   36b7c:	cmp	r5, #0
   36b80:	bne	370c8 <__assert_fail@plt+0x249dc>
   36b84:	mov	r3, #31
   36b88:	str	r3, [r7, #64]	; 0x40
   36b8c:	ldr	r0, [r7, #16]
   36b90:	str	r5, [r7, #56]	; 0x38
   36b94:	str	r5, [r7, #52]	; 0x34
   36b98:	bl	2a01c <__assert_fail@plt+0x17930>
   36b9c:	str	r5, [r7, #16]
   36ba0:	add	r0, sp, #44	; 0x2c
   36ba4:	bl	2e0b0 <__assert_fail@plt+0x1b9c4>
   36ba8:	ldr	r3, [sp, #24]
   36bac:	cmp	r3, #0
   36bb0:	bne	367a4 <__assert_fail@plt+0x240b8>
   36bb4:	ldr	r0, [sp, #24]
   36bb8:	add	sp, sp, #132	; 0x84
   36bbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36bc0:	ldr	r3, [r5, #16]
   36bc4:	cmp	r3, #0
   36bc8:	beq	36ac8 <__assert_fail@plt+0x243dc>
   36bcc:	ldr	r9, [r5, #20]
   36bd0:	cmp	r0, #0
   36bd4:	cmpne	r9, #0
   36bd8:	moveq	r9, #1
   36bdc:	movne	r9, #0
   36be0:	beq	36ac8 <__assert_fail@plt+0x243dc>
   36be4:	ldr	r0, [r6, #24]
   36be8:	lsl	r0, r0, #2
   36bec:	bl	2bf10 <__assert_fail@plt+0x19824>
   36bf0:	cmp	r0, #0
   36bf4:	str	r0, [r5, #132]	; 0x84
   36bf8:	ldrne	r2, [r6, #24]
   36bfc:	movne	r3, r9
   36c00:	bne	36cd0 <__assert_fail@plt+0x245e4>
   36c04:	mov	r2, r6
   36c08:	ldr	r1, [pc, #1316]	; 37134 <__assert_fail@plt+0x24a48>
   36c0c:	ldr	r0, [r5, #52]	; 0x34
   36c10:	bl	2d034 <__assert_fail@plt+0x1a948>
   36c14:	subs	r7, r0, #0
   36c18:	bne	36acc <__assert_fail@plt+0x243e0>
   36c1c:	mov	r2, r5
   36c20:	ldr	r1, [pc, #1296]	; 37138 <__assert_fail@plt+0x24a4c>
   36c24:	ldr	r0, [r5, #52]	; 0x34
   36c28:	bl	2d034 <__assert_fail@plt+0x1a948>
   36c2c:	subs	r7, r0, #0
   36c30:	bne	36acc <__assert_fail@plt+0x243e0>
   36c34:	mov	r2, r5
   36c38:	ldr	r1, [pc, #1276]	; 3713c <__assert_fail@plt+0x24a50>
   36c3c:	ldr	r0, [r5, #52]	; 0x34
   36c40:	bl	2d0a4 <__assert_fail@plt+0x1a9b8>
   36c44:	mov	r2, r5
   36c48:	ldr	r1, [pc, #1264]	; 37140 <__assert_fail@plt+0x24a54>
   36c4c:	ldr	r0, [r5, #52]	; 0x34
   36c50:	bl	2d0a4 <__assert_fail@plt+0x1a9b8>
   36c54:	subs	r7, r0, #0
   36c58:	bne	36acc <__assert_fail@plt+0x243e0>
   36c5c:	mov	fp, r9
   36c60:	mov	sl, r7
   36c64:	ldr	r0, [r5, #8]
   36c68:	cmp	r0, sl
   36c6c:	bne	36c80 <__assert_fail@plt+0x24594>
   36c70:	cmp	fp, #0
   36c74:	beq	36d50 <__assert_fail@plt+0x24664>
   36c78:	mov	fp, r9
   36c7c:	mov	sl, #0
   36c80:	mov	r3, #12
   36c84:	mul	r3, r3, sl
   36c88:	str	r3, [sp, #12]
   36c8c:	ldr	r2, [sp, #12]
   36c90:	ldr	r3, [r5, #24]
   36c94:	add	r3, r3, r2
   36c98:	ldr	r3, [r3, #4]
   36c9c:	cmp	r3, #0
   36ca0:	bne	36d48 <__assert_fail@plt+0x2465c>
   36ca4:	mov	r3, #1
   36ca8:	mov	r2, sl
   36cac:	mov	r1, r5
   36cb0:	add	r0, sp, #32
   36cb4:	bl	30494 <__assert_fail@plt+0x1dda8>
   36cb8:	cmp	r0, #0
   36cbc:	beq	36d24 <__assert_fail@plt+0x24638>
   36cc0:	mov	r7, r0
   36cc4:	b	36acc <__assert_fail@plt+0x243e0>
   36cc8:	str	r3, [r0, r3, lsl #2]
   36ccc:	add	r3, r3, #1
   36cd0:	cmp	r2, r3
   36cd4:	bne	36cc8 <__assert_fail@plt+0x245dc>
   36cd8:	mov	r2, r5
   36cdc:	ldr	r1, [pc, #1120]	; 37144 <__assert_fail@plt+0x24a58>
   36ce0:	ldr	r0, [r5, #52]	; 0x34
   36ce4:	bl	2d0a4 <__assert_fail@plt+0x1a9b8>
   36ce8:	ldr	r2, [r6, #24]
   36cec:	mov	r3, #0
   36cf0:	cmp	r2, r3
   36cf4:	bne	36d0c <__assert_fail@plt+0x24620>
   36cf8:	ldr	r0, [r5, #132]	; 0x84
   36cfc:	bl	2a01c <__assert_fail@plt+0x17930>
   36d00:	mov	r3, #0
   36d04:	str	r3, [r5, #132]	; 0x84
   36d08:	b	36c04 <__assert_fail@plt+0x24518>
   36d0c:	ldr	r1, [r5, #132]	; 0x84
   36d10:	ldr	r1, [r1, r3, lsl #2]
   36d14:	cmp	r1, r3
   36d18:	bne	36c04 <__assert_fail@plt+0x24518>
   36d1c:	add	r3, r3, #1
   36d20:	b	36cf0 <__assert_fail@plt+0x24604>
   36d24:	ldr	r3, [r5, #24]
   36d28:	ldr	r2, [sp, #12]
   36d2c:	add	r3, r3, r2
   36d30:	ldr	r3, [r3, #4]
   36d34:	cmp	r3, #0
   36d38:	bne	36d48 <__assert_fail@plt+0x2465c>
   36d3c:	ldr	r0, [sp, #40]	; 0x28
   36d40:	bl	2a01c <__assert_fail@plt+0x17930>
   36d44:	mov	fp, #1
   36d48:	add	sl, sl, #1
   36d4c:	b	36c64 <__assert_fail@plt+0x24578>
   36d50:	ldrb	r3, [r6, #28]
   36d54:	tst	r3, #16
   36d58:	beq	36d6c <__assert_fail@plt+0x24680>
   36d5c:	ldr	r3, [r5, #76]	; 0x4c
   36d60:	cmp	r3, #0
   36d64:	bne	36d84 <__assert_fail@plt+0x24698>
   36d68:	b	36acc <__assert_fail@plt+0x243e0>
   36d6c:	ldr	r3, [r6, #24]
   36d70:	cmp	r3, #0
   36d74:	beq	36d5c <__assert_fail@plt+0x24670>
   36d78:	ldrb	r3, [r5, #88]	; 0x58
   36d7c:	tst	r3, #1
   36d80:	beq	36d5c <__assert_fail@plt+0x24670>
   36d84:	mov	r9, #12
   36d88:	mul	r0, r9, r0
   36d8c:	bl	2bf10 <__assert_fail@plt+0x19824>
   36d90:	cmp	r0, #0
   36d94:	movne	r3, #0
   36d98:	str	r0, [r5, #28]
   36d9c:	movne	r2, r3
   36da0:	beq	36ac8 <__assert_fail@plt+0x243dc>
   36da4:	ldr	r1, [r5, #8]
   36da8:	cmp	r3, r1
   36dac:	bcc	36df4 <__assert_fail@plt+0x24708>
   36db0:	mov	r9, #0
   36db4:	mov	fp, #12
   36db8:	ldr	r3, [r5, #8]
   36dbc:	cmp	r9, r3
   36dc0:	bcs	36acc <__assert_fail@plt+0x243e0>
   36dc4:	mul	r3, fp, r9
   36dc8:	ldr	r2, [r5, #24]
   36dcc:	mov	sl, #0
   36dd0:	add	r2, r2, r3
   36dd4:	ldr	r2, [r2, #8]
   36dd8:	ldr	r1, [r5, #24]
   36ddc:	add	r1, r1, r3
   36de0:	ldr	r1, [r1, #4]
   36de4:	cmp	sl, r1
   36de8:	blt	36e14 <__assert_fail@plt+0x24728>
   36dec:	add	r9, r9, #1
   36df0:	b	36db8 <__assert_fail@plt+0x246cc>
   36df4:	mul	r0, r9, r3
   36df8:	ldr	ip, [r5, #28]
   36dfc:	add	r3, r3, #1
   36e00:	add	r1, ip, r0
   36e04:	str	r2, [ip, r0]
   36e08:	str	r2, [r1, #4]
   36e0c:	str	r2, [r1, #8]
   36e10:	b	36da4 <__assert_fail@plt+0x246b8>
   36e14:	ldr	ip, [r2, sl, lsl #2]
   36e18:	ldr	r0, [r5, #28]
   36e1c:	mov	r1, r9
   36e20:	mla	r0, fp, ip, r0
   36e24:	str	r3, [sp, #20]
   36e28:	str	r2, [sp, #12]
   36e2c:	bl	2d1a0 <__assert_fail@plt+0x1aab4>
   36e30:	cmp	r0, #0
   36e34:	beq	36ac8 <__assert_fail@plt+0x243dc>
   36e38:	add	sl, sl, #1
   36e3c:	ldr	r3, [sp, #20]
   36e40:	ldr	r2, [sp, #12]
   36e44:	b	36dd8 <__assert_fail@plt+0x246ec>
   36e48:	ldr	r2, [r4]
   36e4c:	lsl	r5, r0, #3
   36e50:	add	r1, r2, r5
   36e54:	ldrb	r1, [r1, #4]
   36e58:	sub	r1, r1, #1
   36e5c:	cmp	r1, #11
   36e60:	ldrls	pc, [pc, r1, lsl #2]
   36e64:	b	36f40 <__assert_fail@plt+0x24854>
   36e68:	muleq	r3, r8, lr
   36e6c:	andeq	r6, r3, r4, lsr #29
   36e70:	andeq	r6, r3, ip, lsl pc
   36e74:	andeq	r6, r3, r4, lsr #29
   36e78:	andeq	r6, r3, r4, asr #30
   36e7c:	andeq	r6, r3, r8, lsl #22
   36e80:	andeq	r6, r3, r0, asr #30
   36e84:	andeq	r6, r3, r4, lsr #29
   36e88:	andeq	r6, r3, r4, lsr #29
   36e8c:	andeq	r6, r3, r4, lsr #29
   36e90:	andeq	r6, r3, r4, lsr #29
   36e94:	strdeq	r6, [r3], -r0
   36e98:	ldrsb	r2, [r2, r5]
   36e9c:	cmp	r2, #0
   36ea0:	movlt	lr, r3
   36ea4:	add	r0, r0, #1
   36ea8:	cmp	r0, ip
   36eac:	bne	36e48 <__assert_fail@plt+0x2475c>
   36eb0:	orr	r3, lr, r7
   36eb4:	tst	r3, #255	; 0xff
   36eb8:	movne	r3, #0
   36ebc:	movne	r5, #7
   36ec0:	bne	36f7c <__assert_fail@plt+0x24890>
   36ec4:	mov	r3, #1
   36ec8:	str	r3, [r4, #92]	; 0x5c
   36ecc:	ldr	r2, [r4, #76]	; 0x4c
   36ed0:	ldrb	r3, [r4, #88]	; 0x58
   36ed4:	cmp	r2, #0
   36ed8:	movle	r2, r7
   36edc:	orrgt	r2, r7, #1
   36ee0:	and	r7, r3, #249	; 0xf9
   36ee4:	orr	r7, r7, r2, lsl #1
   36ee8:	strb	r7, [r4, #88]	; 0x58
   36eec:	b	36b08 <__assert_fail@plt+0x2441c>
   36ef0:	ldr	r2, [r2, r0, lsl #3]
   36ef4:	cmp	r2, #32
   36ef8:	beq	36ea4 <__assert_fail@plt+0x247b8>
   36efc:	bhi	36f0c <__assert_fail@plt+0x24820>
   36f00:	cmp	r2, #16
   36f04:	beq	36ea4 <__assert_fail@plt+0x247b8>
   36f08:	b	36b08 <__assert_fail@plt+0x2441c>
   36f0c:	cmp	r2, #64	; 0x40
   36f10:	beq	36ea4 <__assert_fail@plt+0x247b8>
   36f14:	cmp	r2, #128	; 0x80
   36f18:	b	36f04 <__assert_fail@plt+0x24818>
   36f1c:	ldr	r2, [r2, r0, lsl #3]
   36f20:	add	r1, r2, #12
   36f24:	add	r2, r2, #28
   36f28:	ldr	r5, [r1, #4]!
   36f2c:	cmp	r5, #0
   36f30:	bne	36b08 <__assert_fail@plt+0x2441c>
   36f34:	cmp	r1, r2
   36f38:	bne	36f28 <__assert_fail@plt+0x2483c>
   36f3c:	b	36ea4 <__assert_fail@plt+0x247b8>
   36f40:	bl	12698 <abort@plt>
   36f44:	mov	r7, r3
   36f48:	b	36ea4 <__assert_fail@plt+0x247b8>
   36f4c:	ldr	lr, [r4]
   36f50:	lsl	ip, r3, #3
   36f54:	add	r2, lr, ip
   36f58:	ldrb	r1, [r2, #4]
   36f5c:	cmp	r1, #1
   36f60:	bne	36f88 <__assert_fail@plt+0x2489c>
   36f64:	ldrsb	r1, [lr, ip]
   36f68:	cmp	r1, #0
   36f6c:	ldrblt	r1, [r2, #6]
   36f70:	biclt	r1, r1, #32
   36f74:	strblt	r1, [r2, #6]
   36f78:	add	r3, r3, #1
   36f7c:	cmp	r0, r3
   36f80:	bne	36f4c <__assert_fail@plt+0x24860>
   36f84:	b	36ec4 <__assert_fail@plt+0x247d8>
   36f88:	cmp	r1, #5
   36f8c:	strbeq	r5, [r2, #4]
   36f90:	b	36f78 <__assert_fail@plt+0x2488c>
   36f94:	ldr	ip, [sp, #40]	; 0x28
   36f98:	ldr	r1, [r4]
   36f9c:	ldr	r3, [ip, r5, lsl #2]
   36fa0:	add	lr, r1, r3, lsl #3
   36fa4:	ldrb	r2, [lr, #4]
   36fa8:	cmp	r2, #4
   36fac:	moveq	r2, #0
   36fb0:	beq	36ff0 <__assert_fail@plt+0x24904>
   36fb4:	add	r5, r5, #1
   36fb8:	ldr	r0, [sp, #36]	; 0x24
   36fbc:	cmp	r5, r0
   36fc0:	blt	36f94 <__assert_fail@plt+0x248a8>
   36fc4:	b	36b4c <__assert_fail@plt+0x24460>
   36fc8:	ldr	sl, [ip, r2, lsl #2]
   36fcc:	add	fp, r1, sl, lsl #3
   36fd0:	ldrb	fp, [fp, #4]
   36fd4:	cmp	fp, #9
   36fd8:	bne	36fec <__assert_fail@plt+0x24900>
   36fdc:	ldr	fp, [r1, sl, lsl #3]
   36fe0:	ldr	sl, [lr]
   36fe4:	cmp	fp, sl
   36fe8:	beq	36ffc <__assert_fail@plt+0x24910>
   36fec:	add	r2, r2, #1
   36ff0:	cmp	r2, r0
   36ff4:	blt	36fc8 <__assert_fail@plt+0x248dc>
   36ff8:	beq	36fb4 <__assert_fail@plt+0x248c8>
   36ffc:	ldr	r2, [r4, #20]
   37000:	add	r0, sp, #32
   37004:	mla	r3, r9, r3, r2
   37008:	ldr	r3, [r3, #8]
   3700c:	ldr	sl, [r3]
   37010:	mov	r1, sl
   37014:	bl	2caf0 <__assert_fail@plt+0x1a404>
   37018:	cmp	r0, #0
   3701c:	bne	36fb4 <__assert_fail@plt+0x248c8>
   37020:	ldr	r1, [r4, #24]
   37024:	add	r0, sp, #32
   37028:	mla	r1, r9, sl, r1
   3702c:	bl	30330 <__assert_fail@plt+0x1dc44>
   37030:	subs	r5, r0, #0
   37034:	beq	36fb4 <__assert_fail@plt+0x248c8>
   37038:	mov	r7, r5
   3703c:	b	36b70 <__assert_fail@plt+0x24484>
   37040:	ldrsb	r3, [r0, #52]	; 0x34
   37044:	cmp	r3, #0
   37048:	strge	r0, [r4, #48]	; 0x30
   3704c:	strge	r0, [r4, #44]	; 0x2c
   37050:	strge	r0, [r4, #40]	; 0x28
   37054:	bge	370bc <__assert_fail@plt+0x249d0>
   37058:	mov	r3, #1
   3705c:	add	r2, sp, #32
   37060:	mov	r1, r4
   37064:	add	r0, sp, #28
   37068:	bl	2f8f0 <__assert_fail@plt+0x1d204>
   3706c:	mov	r3, #2
   37070:	add	r2, sp, #32
   37074:	mov	r1, r4
   37078:	str	r0, [r4, #40]	; 0x28
   3707c:	add	r0, sp, #28
   37080:	bl	2f8f0 <__assert_fail@plt+0x1d204>
   37084:	mov	r3, #6
   37088:	add	r2, sp, #32
   3708c:	mov	r1, r4
   37090:	str	r0, [r4, #44]	; 0x2c
   37094:	add	r0, sp, #28
   37098:	bl	2f8f0 <__assert_fail@plt+0x1d204>
   3709c:	ldr	r3, [r4, #40]	; 0x28
   370a0:	cmp	r3, #0
   370a4:	str	r0, [r4, #48]	; 0x30
   370a8:	beq	36b6c <__assert_fail@plt+0x24480>
   370ac:	ldr	r3, [r4, #44]	; 0x2c
   370b0:	cmp	r0, #0
   370b4:	cmpne	r3, #0
   370b8:	beq	36b6c <__assert_fail@plt+0x24480>
   370bc:	ldr	r0, [sp, #40]	; 0x28
   370c0:	bl	2a01c <__assert_fail@plt+0x17930>
   370c4:	b	36b70 <__assert_fail@plt+0x24484>
   370c8:	ldr	r9, [r5]
   370cc:	mov	r0, r5
   370d0:	bl	2a01c <__assert_fail@plt+0x17930>
   370d4:	mov	r5, r9
   370d8:	b	36b7c <__assert_fail@plt+0x24490>
   370dc:	mov	r0, #12
   370e0:	b	36bb8 <__assert_fail@plt+0x244cc>
   370e4:	mov	r1, #0
   370e8:	add	r0, r4, #136	; 0x88
   370ec:	bl	1211c <pthread_mutex_init@plt>
   370f0:	cmp	r0, #0
   370f4:	movne	r3, #12
   370f8:	strne	r3, [sp, #24]
   370fc:	ldr	r3, [sp, #24]
   37100:	cmp	r3, #0
   37104:	beq	36674 <__assert_fail@plt+0x23f88>
   37108:	mov	r0, r4
   3710c:	bl	2e0e0 <__assert_fail@plt+0x1b9f4>
   37110:	mov	r3, #0
   37114:	str	r3, [r6]
   37118:	str	r3, [r6, #4]
   3711c:	b	36bb4 <__assert_fail@plt+0x244c8>
   37120:	beq	feae1bcc <stdout@@GLIBC_2.4+0xfea91660>
   37124:	andeq	r2, r1, r8, asr #1
   37128:	andeq	r2, r1, r4, ror #8
   3712c:	andeq	pc, r3, r3, asr #8
   37130:	andeq	pc, r3, r0, lsr #4
   37134:	andeq	sp, r2, ip, lsl #9
   37138:	muleq	r2, r4, lr
   3713c:	strdeq	pc, [r2], -r0
   37140:	andeq	lr, r2, ip, lsr #6
   37144:	andeq	pc, r2, r8, asr r6	; <UNPREDICTABLE>
   37148:	ldr	r3, [pc, #96]	; 371b0 <__assert_fail@plt+0x24ac4>
   3714c:	mov	ip, r2
   37150:	ldrb	r2, [r2, #28]
   37154:	ldr	r3, [r3]
   37158:	push	{r4, lr}
   3715c:	and	r2, r2, #239	; 0xef
   37160:	lsr	lr, r3, #21
   37164:	and	lr, lr, #16
   37168:	orr	r2, r2, lr
   3716c:	orr	r2, r2, #128	; 0x80
   37170:	strb	r2, [ip, #28]
   37174:	mov	r2, r1
   37178:	mov	r1, r0
   3717c:	mov	r0, ip
   37180:	bl	365a8 <__assert_fail@plt+0x23ebc>
   37184:	subs	r2, r0, #0
   37188:	popeq	{r4, pc}
   3718c:	ldr	r3, [pc, #32]	; 371b4 <__assert_fail@plt+0x24ac8>
   37190:	mov	r0, #0
   37194:	add	r1, r3, #32
   37198:	add	r3, r3, r2, lsl #2
   3719c:	pop	{r4, lr}
   371a0:	mov	r2, #5
   371a4:	ldr	r3, [r3, #416]	; 0x1a0
   371a8:	add	r1, r1, r3
   371ac:	b	1217c <dcgettext@plt>
   371b0:	ldrdeq	r0, [r5], -r8
   371b4:	andeq	pc, r3, r0, lsr #4
   371b8:	ldr	r3, [pc, #12]	; 371cc <__assert_fail@plt+0x24ae0>
   371bc:	ldr	r2, [r3]
   371c0:	str	r0, [r3]
   371c4:	mov	r0, r2
   371c8:	bx	lr
   371cc:	ldrdeq	r0, [r5], -r8
   371d0:	push	{r4, r5, r6, lr}
   371d4:	mov	r2, #256	; 0x100
   371d8:	ldr	r5, [r0]
   371dc:	ldr	r6, [r0, #16]
   371e0:	mov	r4, r0
   371e4:	mov	r1, #0
   371e8:	mov	r0, r6
   371ec:	bl	12434 <memset@plt>
   371f0:	ldr	r1, [r5, #36]	; 0x24
   371f4:	mov	r2, r6
   371f8:	mov	r0, r4
   371fc:	bl	2efd0 <__assert_fail@plt+0x1c8e4>
   37200:	ldr	r1, [r5, #40]	; 0x28
   37204:	ldr	r3, [r5, #36]	; 0x24
   37208:	cmp	r3, r1
   3720c:	beq	3721c <__assert_fail@plt+0x24b30>
   37210:	mov	r2, r6
   37214:	mov	r0, r4
   37218:	bl	2efd0 <__assert_fail@plt+0x1c8e4>
   3721c:	ldr	r1, [r5, #44]	; 0x2c
   37220:	ldr	r3, [r5, #36]	; 0x24
   37224:	cmp	r3, r1
   37228:	beq	37238 <__assert_fail@plt+0x24b4c>
   3722c:	mov	r2, r6
   37230:	mov	r0, r4
   37234:	bl	2efd0 <__assert_fail@plt+0x1c8e4>
   37238:	ldr	r1, [r5, #48]	; 0x30
   3723c:	ldr	r3, [r5, #36]	; 0x24
   37240:	cmp	r3, r1
   37244:	beq	37254 <__assert_fail@plt+0x24b68>
   37248:	mov	r2, r6
   3724c:	mov	r0, r4
   37250:	bl	2efd0 <__assert_fail@plt+0x1c8e4>
   37254:	ldrb	r3, [r4, #28]
   37258:	mov	r0, #0
   3725c:	orr	r3, r3, #8
   37260:	strb	r3, [r4, #28]
   37264:	pop	{r4, r5, r6, pc}
   37268:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3726c:	sub	sp, sp, #44	; 0x2c
   37270:	cmp	r3, r2
   37274:	ldr	ip, [sp, #80]	; 0x50
   37278:	movle	lr, #0
   3727c:	movgt	lr, #1
   37280:	orrs	lr, lr, r3, lsr #31
   37284:	ldr	r4, [sp, #88]	; 0x58
   37288:	ldr	fp, [r0]
   3728c:	add	r8, r3, ip
   37290:	mvnne	r7, #0
   37294:	bne	3740c <__assert_fail@plt+0x24d20>
   37298:	cmp	r8, r2
   3729c:	bgt	37418 <__assert_fail@plt+0x24d2c>
   372a0:	cmp	ip, #0
   372a4:	cmpge	r3, r8
   372a8:	movgt	lr, #1
   372ac:	movle	lr, #0
   372b0:	bgt	37418 <__assert_fail@plt+0x24d2c>
   372b4:	cmp	r8, #0
   372b8:	movlt	r8, lr
   372bc:	blt	372d4 <__assert_fail@plt+0x24be8>
   372c0:	cmp	r3, r8
   372c4:	movgt	lr, #0
   372c8:	movle	lr, #1
   372cc:	ands	ip, lr, ip, lsr #31
   372d0:	movne	r8, #0
   372d4:	ldr	lr, [pc, #700]	; 37598 <__assert_fail@plt+0x24eac>
   372d8:	ldr	r6, [pc, #700]	; 3759c <__assert_fail@plt+0x24eb0>
   372dc:	cmp	lr, #0
   372e0:	mov	ip, #1
   372e4:	moveq	ip, lr
   372e8:	cmp	r6, #0
   372ec:	mov	lr, #1
   372f0:	moveq	lr, r6
   372f4:	mov	r7, r3
   372f8:	orr	r3, ip, lr
   372fc:	ands	r3, r3, #255	; 0xff
   37300:	str	r2, [sp, #36]	; 0x24
   37304:	str	r1, [sp, #32]
   37308:	mov	r6, r0
   3730c:	str	r3, [sp, #28]
   37310:	beq	3731c <__assert_fail@plt+0x24c30>
   37314:	add	r0, fp, #136	; 0x88
   37318:	bl	120a4 <pthread_mutex_lock@plt>
   3731c:	ldrb	r3, [r6, #28]
   37320:	cmp	r8, r7
   37324:	lsr	sl, r3, #5
   37328:	and	sl, sl, #3
   3732c:	ble	3734c <__assert_fail@plt+0x24c60>
   37330:	ldr	r2, [r6, #16]
   37334:	cmp	r2, #0
   37338:	beq	3734c <__assert_fail@plt+0x24c60>
   3733c:	tst	r3, #8
   37340:	bne	3734c <__assert_fail@plt+0x24c60>
   37344:	mov	r0, r6
   37348:	bl	371d0 <__assert_fail@plt+0x24ae4>
   3734c:	ldrb	r2, [r6, #28]
   37350:	lsr	r3, r2, #4
   37354:	and	r3, r3, #1
   37358:	cmp	r4, #0
   3735c:	orreq	r3, r3, #1
   37360:	cmp	r3, #0
   37364:	movne	r5, #1
   37368:	movne	r4, #0
   3736c:	bne	37398 <__assert_fail@plt+0x24cac>
   37370:	and	r2, r2, #6
   37374:	cmp	r2, #4
   37378:	ldr	r5, [r6, #24]
   3737c:	bne	37420 <__assert_fail@plt+0x24d34>
   37380:	ldr	r2, [r4]
   37384:	cmp	r2, r5
   37388:	bhi	37420 <__assert_fail@plt+0x24d34>
   3738c:	subs	r5, r2, #0
   37390:	movle	r5, #1
   37394:	movle	r4, r3
   37398:	lsl	r0, r5, #3
   3739c:	bl	2bf10 <__assert_fail@plt+0x19824>
   373a0:	subs	r9, r0, #0
   373a4:	mvneq	r7, #1
   373a8:	beq	373f8 <__assert_fail@plt+0x24d0c>
   373ac:	ldr	r3, [sp, #84]	; 0x54
   373b0:	str	sl, [sp, #16]
   373b4:	str	r3, [sp, #4]
   373b8:	str	r9, [sp, #12]
   373bc:	str	r5, [sp, #8]
   373c0:	str	r8, [sp]
   373c4:	mov	r3, r7
   373c8:	ldr	r2, [sp, #36]	; 0x24
   373cc:	ldr	r1, [sp, #32]
   373d0:	mov	r0, r6
   373d4:	bl	33c28 <__assert_fail@plt+0x2153c>
   373d8:	cmp	r0, #0
   373dc:	beq	37428 <__assert_fail@plt+0x24d3c>
   373e0:	cmp	r0, #1
   373e4:	mvneq	r7, #0
   373e8:	beq	373f0 <__assert_fail@plt+0x24d04>
   373ec:	mvn	r7, #1
   373f0:	mov	r0, r9
   373f4:	bl	2a01c <__assert_fail@plt+0x17930>
   373f8:	ldr	r3, [sp, #28]
   373fc:	cmp	r3, #0
   37400:	beq	3740c <__assert_fail@plt+0x24d20>
   37404:	add	r0, fp, #136	; 0x88
   37408:	bl	11f60 <pthread_mutex_unlock@plt>
   3740c:	mov	r0, r7
   37410:	add	sp, sp, #44	; 0x2c
   37414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37418:	mov	r8, r2
   3741c:	b	372d4 <__assert_fail@plt+0x24be8>
   37420:	add	r5, r5, #1
   37424:	b	37398 <__assert_fail@plt+0x24cac>
   37428:	cmp	r4, #0
   3742c:	beq	3747c <__assert_fail@plt+0x24d90>
   37430:	ldrb	r8, [r6, #28]
   37434:	add	sl, r5, #1
   37438:	lsr	r8, r8, #1
   3743c:	ands	r8, r8, #3
   37440:	bne	374c0 <__assert_fail@plt+0x24dd4>
   37444:	lsl	r8, sl, #2
   37448:	mov	r0, r8
   3744c:	bl	2bf10 <__assert_fail@plt+0x19824>
   37450:	cmp	r0, #0
   37454:	str	r0, [r4, #4]
   37458:	bne	37494 <__assert_fail@plt+0x24da8>
   3745c:	mov	r8, #0
   37460:	ldrb	r3, [r6, #28]
   37464:	and	r8, r8, #3
   37468:	bic	r3, r3, #6
   3746c:	orr	r8, r3, r8, lsl #1
   37470:	tst	r8, #6
   37474:	strb	r8, [r6, #28]
   37478:	beq	373ec <__assert_fail@plt+0x24d00>
   3747c:	ldrb	r3, [sp, #92]	; 0x5c
   37480:	cmp	r3, #0
   37484:	ldrne	r3, [r9, #4]
   37488:	subne	r7, r3, r7
   3748c:	ldreq	r7, [r9]
   37490:	b	373f0 <__assert_fail@plt+0x24d04>
   37494:	mov	r0, r8
   37498:	bl	2bf10 <__assert_fail@plt+0x19824>
   3749c:	cmp	r0, #0
   374a0:	mov	r8, r0
   374a4:	str	r0, [r4, #8]
   374a8:	strne	sl, [r4]
   374ac:	movne	r8, #1
   374b0:	bne	37530 <__assert_fail@plt+0x24e44>
   374b4:	ldr	r0, [r4, #4]
   374b8:	bl	2a01c <__assert_fail@plt+0x17930>
   374bc:	b	37460 <__assert_fail@plt+0x24d74>
   374c0:	cmp	r8, #1
   374c4:	movne	r8, #2
   374c8:	bne	37530 <__assert_fail@plt+0x24e44>
   374cc:	ldr	r3, [r4]
   374d0:	cmp	r3, sl
   374d4:	bcs	37530 <__assert_fail@plt+0x24e44>
   374d8:	lsl	r2, sl, #2
   374dc:	mov	r1, r2
   374e0:	ldr	r0, [r4, #4]
   374e4:	str	r2, [sp, #36]	; 0x24
   374e8:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   374ec:	subs	r3, r0, #0
   374f0:	str	r3, [sp, #32]
   374f4:	beq	3745c <__assert_fail@plt+0x24d70>
   374f8:	ldr	r2, [sp, #36]	; 0x24
   374fc:	ldr	r0, [r4, #8]
   37500:	mov	r1, r2
   37504:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   37508:	ldr	r3, [sp, #32]
   3750c:	subs	r2, r0, #0
   37510:	strne	r3, [r4, #4]
   37514:	strne	r2, [r4, #8]
   37518:	strne	sl, [r4]
   3751c:	bne	37530 <__assert_fail@plt+0x24e44>
   37520:	mov	r0, r3
   37524:	str	r2, [sp, #32]
   37528:	bl	2a01c <__assert_fail@plt+0x17930>
   3752c:	b	3745c <__assert_fail@plt+0x24d70>
   37530:	mov	r2, r9
   37534:	mov	r3, #0
   37538:	cmp	r5, r3
   3753c:	add	r2, r2, #8
   37540:	bgt	37578 <__assert_fail@plt+0x24e8c>
   37544:	bic	r5, r5, r5, asr #31
   37548:	mvn	r2, #0
   3754c:	lsl	r3, r5, #2
   37550:	ldr	r1, [r4]
   37554:	cmp	r5, r1
   37558:	bcs	37460 <__assert_fail@plt+0x24d74>
   3755c:	ldr	r1, [r4, #4]
   37560:	ldr	r0, [r4, #8]
   37564:	add	r5, r5, #1
   37568:	str	r2, [r0, r3]
   3756c:	str	r2, [r1, r3]
   37570:	add	r3, r3, #4
   37574:	b	37550 <__assert_fail@plt+0x24e64>
   37578:	ldr	r1, [r4, #4]
   3757c:	ldr	r0, [r2, #-8]
   37580:	str	r0, [r1, r3, lsl #2]
   37584:	ldr	r1, [r4, #8]
   37588:	ldr	r0, [r2, #-4]
   3758c:	str	r0, [r1, r3, lsl #2]
   37590:	add	r3, r3, #1
   37594:	b	37538 <__assert_fail@plt+0x24e4c>
   37598:	andeq	r2, r1, r8, asr #1
   3759c:	andeq	r2, r1, r4, ror #8
   375a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   375a4:	sub	sp, sp, #20
   375a8:	mov	r7, r3
   375ac:	ldr	r9, [sp, #72]	; 0x48
   375b0:	ldr	r5, [sp, #56]	; 0x38
   375b4:	orr	r3, r2, r9
   375b8:	orrs	r3, r3, r5
   375bc:	bpl	375e4 <__assert_fail@plt+0x24ef8>
   375c0:	mvn	r4, #1
   375c4:	mov	r0, r4
   375c8:	add	sp, sp, #20
   375cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   375d0:	mov	r7, r8
   375d4:	mov	r6, #0
   375d8:	b	3764c <__assert_fail@plt+0x24f60>
   375dc:	mov	r6, r4
   375e0:	b	3764c <__assert_fail@plt+0x24f60>
   375e4:	cmp	r5, #0
   375e8:	mov	sl, r0
   375ec:	mov	r8, r1
   375f0:	mov	r4, r2
   375f4:	blt	37608 <__assert_fail@plt+0x24f1c>
   375f8:	mvn	r3, #-2147483648	; 0x80000000
   375fc:	sub	r3, r3, r5
   37600:	cmp	r4, r3
   37604:	bgt	375c0 <__assert_fail@plt+0x24ed4>
   37608:	cmp	r5, #0
   3760c:	add	fp, r4, r5
   37610:	ble	375d0 <__assert_fail@plt+0x24ee4>
   37614:	cmp	r4, #0
   37618:	beq	375dc <__assert_fail@plt+0x24ef0>
   3761c:	mov	r0, fp
   37620:	bl	2bf10 <__assert_fail@plt+0x19824>
   37624:	subs	r6, r0, #0
   37628:	beq	375c0 <__assert_fail@plt+0x24ed4>
   3762c:	mov	r2, r4
   37630:	mov	r1, r8
   37634:	bl	120f8 <memcpy@plt>
   37638:	mov	r1, r7
   3763c:	mov	r2, r5
   37640:	add	r0, r6, r4
   37644:	bl	120f8 <memcpy@plt>
   37648:	mov	r7, r6
   3764c:	ldrb	r3, [sp, #76]	; 0x4c
   37650:	str	r9, [sp, #4]
   37654:	mov	r2, fp
   37658:	str	r3, [sp, #12]
   3765c:	ldr	r3, [sp, #68]	; 0x44
   37660:	mov	r1, r7
   37664:	str	r3, [sp, #8]
   37668:	ldr	r3, [sp, #64]	; 0x40
   3766c:	mov	r0, sl
   37670:	str	r3, [sp]
   37674:	ldr	r3, [sp, #60]	; 0x3c
   37678:	bl	37268 <__assert_fail@plt+0x24b7c>
   3767c:	mov	r4, r0
   37680:	mov	r0, r6
   37684:	bl	2a01c <__assert_fail@plt+0x17930>
   37688:	b	375c4 <__assert_fail@plt+0x24ed8>
   3768c:	ldr	r3, [pc, #232]	; 3777c <__assert_fail@plt+0x25090>
   37690:	tst	r2, #1
   37694:	push	{r4, r5, r6, r7, r8, lr}
   37698:	mov	r4, r0
   3769c:	ldr	r6, [pc, #220]	; 37780 <__assert_fail@plt+0x25094>
   376a0:	moveq	r6, r3
   376a4:	mov	r3, #0
   376a8:	str	r3, [r0]
   376ac:	str	r3, [r0, #4]
   376b0:	str	r3, [r0, #8]
   376b4:	mov	r0, #256	; 0x100
   376b8:	mov	r7, r1
   376bc:	mov	r5, r2
   376c0:	bl	2bf10 <__assert_fail@plt+0x19824>
   376c4:	cmp	r0, #0
   376c8:	str	r0, [r4, #16]
   376cc:	beq	37774 <__assert_fail@plt+0x25088>
   376d0:	ldrb	r2, [r4, #28]
   376d4:	tst	r5, #2
   376d8:	movne	r3, #4194304	; 0x400000
   376dc:	moveq	r3, #0
   376e0:	tst	r5, #4
   376e4:	orrne	r2, r2, #128	; 0x80
   376e8:	biceq	r2, r2, #128	; 0x80
   376ec:	strb	r2, [r4, #28]
   376f0:	ldrb	r2, [r4, #28]
   376f4:	lsl	r5, r5, #1
   376f8:	and	r5, r5, #16
   376fc:	bic	r2, r2, #16
   37700:	orr	r6, r6, r3
   37704:	orr	r5, r5, r2
   37708:	mov	r3, #0
   3770c:	bicne	r6, r6, #64	; 0x40
   37710:	strb	r5, [r4, #28]
   37714:	str	r3, [r4, #20]
   37718:	mov	r0, r7
   3771c:	orrne	r6, r6, #256	; 0x100
   37720:	bl	123bc <strlen@plt>
   37724:	mov	r3, r6
   37728:	mov	r1, r7
   3772c:	mov	r2, r0
   37730:	mov	r0, r4
   37734:	bl	365a8 <__assert_fail@plt+0x23ebc>
   37738:	cmp	r0, #16
   3773c:	mov	r5, r0
   37740:	beq	3775c <__assert_fail@plt+0x25070>
   37744:	cmp	r0, #0
   37748:	bne	37760 <__assert_fail@plt+0x25074>
   3774c:	mov	r0, r4
   37750:	bl	371d0 <__assert_fail@plt+0x24ae4>
   37754:	mov	r0, r5
   37758:	pop	{r4, r5, r6, r7, r8, pc}
   3775c:	mov	r5, #8
   37760:	ldr	r0, [r4, #16]
   37764:	bl	2a01c <__assert_fail@plt+0x17930>
   37768:	mov	r3, #0
   3776c:	str	r3, [r4, #16]
   37770:	b	37754 <__assert_fail@plt+0x25068>
   37774:	mov	r0, #12
   37778:	pop	{r4, r5, r6, r7, r8, pc}
   3777c:	smlabteq	r1, r6, r2, r0
   37780:	strdeq	fp, [r3], -ip
   37784:	cmp	r0, #16
   37788:	push	{r4, r5, r6, r7, r8, lr}
   3778c:	bls	37794 <__assert_fail@plt+0x250a8>
   37790:	bl	12698 <abort@plt>
   37794:	mov	r4, r3
   37798:	ldr	r3, [pc, #88]	; 377f8 <__assert_fail@plt+0x2510c>
   3779c:	mov	r6, r2
   377a0:	add	r1, r3, #32
   377a4:	add	r3, r3, r0, lsl #2
   377a8:	mov	r2, #5
   377ac:	ldr	r3, [r3, #416]	; 0x1a0
   377b0:	mov	r0, #0
   377b4:	add	r1, r1, r3
   377b8:	bl	1217c <dcgettext@plt>
   377bc:	mov	r7, r0
   377c0:	bl	123bc <strlen@plt>
   377c4:	cmp	r4, #0
   377c8:	add	r5, r0, #1
   377cc:	beq	377f0 <__assert_fail@plt+0x25104>
   377d0:	cmp	r5, r4
   377d4:	subhi	r2, r4, #1
   377d8:	movhi	r3, #0
   377dc:	strbhi	r3, [r6, r2]
   377e0:	movls	r2, r5
   377e4:	mov	r1, r7
   377e8:	mov	r0, r6
   377ec:	bl	120f8 <memcpy@plt>
   377f0:	mov	r0, r5
   377f4:	pop	{r4, r5, r6, r7, r8, pc}
   377f8:	andeq	pc, r3, r0, lsr #4
   377fc:	push	{r4, r5, r6, lr}
   37800:	mov	r4, r0
   37804:	ldr	r5, [r0]
   37808:	cmp	r5, #0
   3780c:	beq	3784c <__assert_fail@plt+0x25160>
   37810:	ldr	r2, [pc, #92]	; 37874 <__assert_fail@plt+0x25188>
   37814:	ldr	r1, [pc, #92]	; 37878 <__assert_fail@plt+0x2518c>
   37818:	cmp	r2, #0
   3781c:	mov	r3, #1
   37820:	moveq	r3, r2
   37824:	cmp	r1, #0
   37828:	mov	r2, #1
   3782c:	moveq	r2, r1
   37830:	orr	r3, r3, r2
   37834:	tst	r3, #1
   37838:	beq	37844 <__assert_fail@plt+0x25158>
   3783c:	add	r0, r5, #136	; 0x88
   37840:	bl	12044 <pthread_mutex_destroy@plt>
   37844:	mov	r0, r5
   37848:	bl	2e0e0 <__assert_fail@plt+0x1b9f4>
   3784c:	mov	r5, #0
   37850:	ldr	r0, [r4, #16]
   37854:	str	r5, [r4]
   37858:	str	r5, [r4, #4]
   3785c:	bl	2a01c <__assert_fail@plt+0x17930>
   37860:	str	r5, [r4, #16]
   37864:	ldr	r0, [r4, #20]
   37868:	bl	2a01c <__assert_fail@plt+0x17930>
   3786c:	str	r5, [r4, #20]
   37870:	pop	{r4, r5, r6, pc}
   37874:	andeq	r2, r1, r8, asr #1
   37878:	andeq	r2, r1, r4, ror #8
   3787c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37880:	sub	sp, sp, #36	; 0x24
   37884:	ldr	r9, [sp, #72]	; 0x48
   37888:	bics	ip, r9, #7
   3788c:	movne	r0, #2
   37890:	bne	37954 <__assert_fail@plt+0x25268>
   37894:	ands	fp, r9, #4
   37898:	mov	r8, r3
   3789c:	str	r2, [sp, #28]
   378a0:	mov	r7, r1
   378a4:	mov	r6, r0
   378a8:	ldrne	fp, [r3]
   378ac:	ldrne	r5, [r3, #4]
   378b0:	bne	378c0 <__assert_fail@plt+0x251d4>
   378b4:	mov	r0, r1
   378b8:	bl	123bc <strlen@plt>
   378bc:	mov	r5, r0
   378c0:	ldr	r2, [pc, #148]	; 3795c <__assert_fail@plt+0x25270>
   378c4:	ldr	r1, [pc, #148]	; 37960 <__assert_fail@plt+0x25274>
   378c8:	cmp	r2, #0
   378cc:	mov	r4, #1
   378d0:	moveq	r4, r2
   378d4:	cmp	r1, #0
   378d8:	mov	r2, #1
   378dc:	moveq	r2, r1
   378e0:	orr	r4, r4, r2
   378e4:	ands	r4, r4, #255	; 0xff
   378e8:	ldr	sl, [r6]
   378ec:	beq	378f8 <__assert_fail@plt+0x2520c>
   378f0:	add	r0, sl, #136	; 0x88
   378f4:	bl	120a4 <pthread_mutex_lock@plt>
   378f8:	ldrb	r2, [r6, #28]
   378fc:	mov	r1, r7
   37900:	str	r5, [sp, #4]
   37904:	tst	r2, #16
   37908:	movne	r2, #0
   3790c:	ldreq	r3, [sp, #28]
   37910:	strne	r2, [sp, #12]
   37914:	strne	r2, [sp, #8]
   37918:	streq	r3, [sp, #8]
   3791c:	streq	r8, [sp, #12]
   37920:	str	r5, [sp]
   37924:	mov	r2, r5
   37928:	str	r9, [sp, #16]
   3792c:	mov	r3, fp
   37930:	mov	r0, r6
   37934:	bl	33c28 <__assert_fail@plt+0x2153c>
   37938:	cmp	r4, #0
   3793c:	mov	r5, r0
   37940:	beq	3794c <__assert_fail@plt+0x25260>
   37944:	add	r0, sl, #136	; 0x88
   37948:	bl	11f60 <pthread_mutex_unlock@plt>
   3794c:	adds	r0, r5, #0
   37950:	movne	r0, #1
   37954:	add	sp, sp, #36	; 0x24
   37958:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3795c:	andeq	r2, r1, r4, ror #8
   37960:	andeq	r2, r1, r8, asr #1
   37964:	push	{r0, r1, r2, r3, r4, lr}
   37968:	mov	ip, #1
   3796c:	str	ip, [sp, #12]
   37970:	ldr	ip, [sp, #24]
   37974:	stmib	sp, {r2, ip}
   37978:	mov	ip, #0
   3797c:	str	ip, [sp]
   37980:	bl	37268 <__assert_fail@plt+0x24b7c>
   37984:	add	sp, sp, #20
   37988:	pop	{pc}		; (ldr pc, [sp], #4)
   3798c:	push	{r0, r1, r2, r3, r4, lr}
   37990:	mov	ip, #0
   37994:	str	ip, [sp, #12]
   37998:	ldr	ip, [sp, #28]
   3799c:	stmib	sp, {r2, ip}
   379a0:	ldr	ip, [sp, #24]
   379a4:	str	ip, [sp]
   379a8:	bl	37268 <__assert_fail@plt+0x24b7c>
   379ac:	add	sp, sp, #20
   379b0:	pop	{pc}		; (ldr pc, [sp], #4)
   379b4:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   379b8:	mov	ip, #1
   379bc:	str	ip, [sp, #20]
   379c0:	ldr	ip, [sp, #44]	; 0x2c
   379c4:	str	ip, [sp, #16]
   379c8:	ldr	ip, [sp, #40]	; 0x28
   379cc:	str	ip, [sp, #12]
   379d0:	mov	ip, #0
   379d4:	str	ip, [sp, #8]
   379d8:	ldr	ip, [sp, #36]	; 0x24
   379dc:	str	ip, [sp, #4]
   379e0:	ldr	ip, [sp, #32]
   379e4:	str	ip, [sp]
   379e8:	bl	375a0 <__assert_fail@plt+0x24eb4>
   379ec:	add	sp, sp, #28
   379f0:	pop	{pc}		; (ldr pc, [sp], #4)
   379f4:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   379f8:	mov	ip, #0
   379fc:	str	ip, [sp, #20]
   37a00:	ldr	ip, [sp, #48]	; 0x30
   37a04:	str	ip, [sp, #16]
   37a08:	ldr	ip, [sp, #44]	; 0x2c
   37a0c:	str	ip, [sp, #12]
   37a10:	ldr	ip, [sp, #40]	; 0x28
   37a14:	str	ip, [sp, #8]
   37a18:	ldr	ip, [sp, #36]	; 0x24
   37a1c:	str	ip, [sp, #4]
   37a20:	ldr	ip, [sp, #32]
   37a24:	str	ip, [sp]
   37a28:	bl	375a0 <__assert_fail@plt+0x24eb4>
   37a2c:	add	sp, sp, #28
   37a30:	pop	{pc}		; (ldr pc, [sp], #4)
   37a34:	ldrb	ip, [r0, #28]
   37a38:	cmp	r2, #0
   37a3c:	bicne	ip, ip, #4
   37a40:	orrne	ip, ip, #2
   37a44:	strbne	ip, [r0, #28]
   37a48:	stmne	r1, {r2, r3}
   37a4c:	ldrne	r3, [sp]
   37a50:	biceq	ip, ip, #6
   37a54:	strbeq	ip, [r0, #28]
   37a58:	strne	r3, [r1, #8]
   37a5c:	streq	r2, [r1]
   37a60:	streq	r2, [r1, #8]
   37a64:	streq	r2, [r1, #4]
   37a68:	bx	lr
   37a6c:	push	{r4, r5, r6, r7, r8, r9, lr}
   37a70:	mov	lr, #1
   37a74:	mov	ip, lr
   37a78:	mov	r5, #0
   37a7c:	mvn	r3, #0
   37a80:	mov	r6, lr
   37a84:	add	r4, ip, r5
   37a88:	cmp	r4, r1
   37a8c:	bcc	37acc <__assert_fail@plt+0x253e0>
   37a90:	mov	r4, #1
   37a94:	str	lr, [r2]
   37a98:	mov	ip, r4
   37a9c:	mov	r6, #0
   37aa0:	mvn	lr, #0
   37aa4:	mov	r7, r4
   37aa8:	add	r5, ip, r6
   37aac:	cmp	r1, r5
   37ab0:	bhi	37b10 <__assert_fail@plt+0x25424>
   37ab4:	add	r0, r3, #1
   37ab8:	add	lr, lr, #1
   37abc:	cmp	lr, r0
   37ac0:	strcs	r4, [r2]
   37ac4:	movcs	r0, lr
   37ac8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   37acc:	add	r7, r0, r3
   37ad0:	ldrb	r8, [r0, r4]
   37ad4:	ldrb	r7, [r7, ip]
   37ad8:	cmp	r8, r7
   37adc:	subcc	lr, r4, r3
   37ae0:	bcc	37b04 <__assert_fail@plt+0x25418>
   37ae4:	addne	r4, r5, #1
   37ae8:	movne	r3, r5
   37aec:	movne	lr, r6
   37af0:	bne	37b04 <__assert_fail@plt+0x25418>
   37af4:	cmp	ip, lr
   37af8:	addne	ip, ip, #1
   37afc:	movne	r4, r5
   37b00:	bne	37b08 <__assert_fail@plt+0x2541c>
   37b04:	mov	ip, #1
   37b08:	mov	r5, r4
   37b0c:	b	37a84 <__assert_fail@plt+0x25398>
   37b10:	add	r8, r0, lr
   37b14:	ldrb	r9, [r0, r5]
   37b18:	ldrb	r8, [r8, ip]
   37b1c:	cmp	r9, r8
   37b20:	subhi	r4, r5, lr
   37b24:	bhi	37b48 <__assert_fail@plt+0x2545c>
   37b28:	addne	r5, r6, #1
   37b2c:	movne	lr, r6
   37b30:	movne	r4, r7
   37b34:	bne	37b48 <__assert_fail@plt+0x2545c>
   37b38:	cmp	ip, r4
   37b3c:	addne	ip, ip, #1
   37b40:	movne	r5, r6
   37b44:	bne	37b4c <__assert_fail@plt+0x25460>
   37b48:	mov	ip, #1
   37b4c:	mov	r6, r5
   37b50:	b	37aa8 <__assert_fail@plt+0x253bc>
   37b54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37b58:	sub	sp, sp, #1040	; 0x410
   37b5c:	sub	sp, sp, #12
   37b60:	cmp	r3, #2
   37b64:	mov	r6, r0
   37b68:	str	r1, [sp]
   37b6c:	mov	r7, r2
   37b70:	mov	r9, r3
   37b74:	add	r5, sp, #24
   37b78:	bls	37c5c <__assert_fail@plt+0x25570>
   37b7c:	sub	r2, r5, #4
   37b80:	mov	r1, r3
   37b84:	mov	r0, r7
   37b88:	bl	37a6c <__assert_fail@plt+0x25380>
   37b8c:	mov	r4, r0
   37b90:	mov	r3, #0
   37b94:	str	r9, [r5, r3, lsl #2]
   37b98:	add	r3, r3, #1
   37b9c:	cmp	r3, #256	; 0x100
   37ba0:	bne	37b94 <__assert_fail@plt+0x254a8>
   37ba4:	mov	r1, r7
   37ba8:	sub	r3, r9, #1
   37bac:	str	r3, [sp, #4]
   37bb0:	cmn	r3, #1
   37bb4:	bne	37c6c <__assert_fail@plt+0x25580>
   37bb8:	ldr	r5, [sp, #20]
   37bbc:	mov	r2, r4
   37bc0:	add	r1, r7, r5
   37bc4:	mov	r0, r7
   37bc8:	bl	12158 <memcmp@plt>
   37bcc:	subs	sl, r0, #0
   37bd0:	bne	37d24 <__assert_fail@plt+0x25638>
   37bd4:	sub	r3, r9, r5
   37bd8:	mov	r8, sl
   37bdc:	str	r3, [sp, #8]
   37be0:	rsb	r3, r4, #1
   37be4:	str	r3, [sp, #12]
   37be8:	ldr	r3, [sp]
   37bec:	add	fp, r8, r9
   37bf0:	sub	r2, fp, r3
   37bf4:	add	r0, r6, r3
   37bf8:	mov	r1, #0
   37bfc:	bl	124ac <memchr@plt>
   37c00:	adds	r3, fp, #0
   37c04:	movne	r3, #1
   37c08:	cmp	r0, #0
   37c0c:	movne	r3, #0
   37c10:	cmp	r3, #0
   37c14:	mov	r0, r3
   37c18:	beq	37cf0 <__assert_fail@plt+0x25604>
   37c1c:	add	r3, r6, fp
   37c20:	add	r2, sp, #1040	; 0x410
   37c24:	ldrb	r3, [r3, #-1]
   37c28:	add	r2, r2, #8
   37c2c:	add	r3, r2, r3, lsl #2
   37c30:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   37c34:	cmp	r3, #0
   37c38:	beq	37c88 <__assert_fail@plt+0x2559c>
   37c3c:	cmp	sl, #0
   37c40:	cmpne	r5, r3
   37c44:	ldrhi	r3, [sp, #8]
   37c48:	add	r8, r8, r3
   37c4c:	mov	r3, #0
   37c50:	mov	sl, r3
   37c54:	str	fp, [sp]
   37c58:	b	37be8 <__assert_fail@plt+0x254fc>
   37c5c:	mov	r3, #1
   37c60:	str	r3, [sp, #20]
   37c64:	sub	r4, r9, #1
   37c68:	b	37b90 <__assert_fail@plt+0x254a4>
   37c6c:	ldrb	r2, [r1], #1
   37c70:	add	r0, sp, #1040	; 0x410
   37c74:	add	r0, r0, #8
   37c78:	add	r2, r0, r2, lsl #2
   37c7c:	str	r3, [r2, #-1024]	; 0xfffffc00
   37c80:	sub	r3, r3, #1
   37c84:	b	37bb0 <__assert_fail@plt+0x254c4>
   37c88:	cmp	sl, r4
   37c8c:	movcs	r2, sl
   37c90:	movcc	r2, r4
   37c94:	add	ip, r6, r8
   37c98:	ldr	r1, [sp, #4]
   37c9c:	cmp	r2, r1
   37ca0:	bcs	37cc8 <__assert_fail@plt+0x255dc>
   37ca4:	ldrb	r0, [r7, r2]
   37ca8:	ldrb	r1, [ip, r2]
   37cac:	cmp	r0, r1
   37cb0:	ldrne	r1, [sp, #12]
   37cb4:	addne	r8, r1, r8
   37cb8:	addne	r8, r2, r8
   37cbc:	bne	37c50 <__assert_fail@plt+0x25564>
   37cc0:	add	r2, r2, #1
   37cc4:	b	37c98 <__assert_fail@plt+0x255ac>
   37cc8:	add	r2, r8, r4
   37ccc:	add	r1, r7, r4
   37cd0:	add	r2, r6, r2
   37cd4:	mov	r3, r4
   37cd8:	cmp	sl, r3
   37cdc:	bcc	37cfc <__assert_fail@plt+0x25610>
   37ce0:	add	sl, sl, #1
   37ce4:	cmp	sl, r3
   37ce8:	bls	37d18 <__assert_fail@plt+0x2562c>
   37cec:	add	r0, r6, r8
   37cf0:	add	sp, sp, #1040	; 0x410
   37cf4:	add	sp, sp, #12
   37cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37cfc:	ldrb	ip, [r1, #-1]!
   37d00:	ldrb	r0, [r2, #-1]!
   37d04:	sub	lr, r3, #1
   37d08:	cmp	ip, r0
   37d0c:	bne	37ce0 <__assert_fail@plt+0x255f4>
   37d10:	mov	r3, lr
   37d14:	b	37cd8 <__assert_fail@plt+0x255ec>
   37d18:	add	r8, r8, r5
   37d1c:	ldr	r3, [sp, #8]
   37d20:	b	37c50 <__assert_fail@plt+0x25564>
   37d24:	sub	r8, r9, r4
   37d28:	cmp	r8, r4
   37d2c:	movcc	r8, r4
   37d30:	mov	r5, #0
   37d34:	add	r8, r8, #1
   37d38:	mov	fp, r5
   37d3c:	rsb	r3, r4, #1
   37d40:	str	r3, [sp, #8]
   37d44:	ldr	r3, [sp]
   37d48:	add	sl, r5, r9
   37d4c:	sub	r2, sl, r3
   37d50:	add	r0, r6, r3
   37d54:	mov	r1, fp
   37d58:	bl	124ac <memchr@plt>
   37d5c:	adds	r3, sl, #0
   37d60:	movne	r3, #1
   37d64:	cmp	r0, #0
   37d68:	movne	r3, #0
   37d6c:	cmp	r3, #0
   37d70:	mov	r0, r3
   37d74:	ldr	r3, [sp, #8]
   37d78:	beq	37cf0 <__assert_fail@plt+0x25604>
   37d7c:	add	r2, r6, sl
   37d80:	add	r1, sp, #1040	; 0x410
   37d84:	ldrb	r2, [r2, #-1]
   37d88:	add	r1, r1, #8
   37d8c:	add	r2, r1, r2, lsl #2
   37d90:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   37d94:	cmp	r2, #0
   37d98:	moveq	r2, r4
   37d9c:	addeq	ip, r6, r5
   37da0:	beq	37db4 <__assert_fail@plt+0x256c8>
   37da4:	add	r5, r2, r5
   37da8:	str	sl, [sp]
   37dac:	b	37d40 <__assert_fail@plt+0x25654>
   37db0:	add	r2, r2, #1
   37db4:	ldr	r1, [sp, #4]
   37db8:	cmp	r2, r1
   37dbc:	bcs	37dd8 <__assert_fail@plt+0x256ec>
   37dc0:	ldrb	r0, [r7, r2]
   37dc4:	ldrb	r1, [ip, r2]
   37dc8:	cmp	r0, r1
   37dcc:	beq	37db0 <__assert_fail@plt+0x256c4>
   37dd0:	add	r5, r3, r5
   37dd4:	b	37da4 <__assert_fail@plt+0x256b8>
   37dd8:	add	r2, r5, r4
   37ddc:	add	r1, r7, r4
   37de0:	add	r2, r6, r2
   37de4:	cmp	r7, r1
   37de8:	beq	37e04 <__assert_fail@plt+0x25718>
   37dec:	ldrb	ip, [r1, #-1]!
   37df0:	ldrb	r0, [r2, #-1]!
   37df4:	cmp	ip, r0
   37df8:	beq	37de4 <__assert_fail@plt+0x256f8>
   37dfc:	add	r5, r5, r8
   37e00:	b	37da8 <__assert_fail@plt+0x256bc>
   37e04:	add	r0, r6, r5
   37e08:	b	37cf0 <__assert_fail@plt+0x25604>
   37e0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37e10:	sub	lr, r0, #1
   37e14:	sub	sp, sp, #28
   37e18:	mov	fp, r1
   37e1c:	mov	r7, #1
   37e20:	ldrb	ip, [lr, #1]!
   37e24:	cmp	ip, #0
   37e28:	bne	37e40 <__assert_fail@plt+0x25754>
   37e2c:	ldrb	r3, [fp]
   37e30:	cmp	r3, #0
   37e34:	beq	37e64 <__assert_fail@plt+0x25778>
   37e38:	mov	r0, #0
   37e3c:	b	37fb4 <__assert_fail@plt+0x258c8>
   37e40:	mov	r3, fp
   37e44:	ldrb	r2, [r3], #1
   37e48:	cmp	r2, #0
   37e4c:	beq	37e2c <__assert_fail@plt+0x25740>
   37e50:	cmp	ip, r2
   37e54:	movne	r7, #0
   37e58:	andeq	r7, r7, #1
   37e5c:	mov	fp, r3
   37e60:	b	37e20 <__assert_fail@plt+0x25734>
   37e64:	cmp	r7, #0
   37e68:	bne	37fb4 <__assert_fail@plt+0x258c8>
   37e6c:	mov	sl, r0
   37e70:	sub	r6, fp, r1
   37e74:	add	r0, r0, #1
   37e78:	ldrb	r1, [r1]
   37e7c:	bl	123c8 <strchr@plt>
   37e80:	subs	r4, r0, #0
   37e84:	beq	37e38 <__assert_fail@plt+0x2574c>
   37e88:	cmp	r6, #1
   37e8c:	moveq	r0, r4
   37e90:	beq	37fb4 <__assert_fail@plt+0x258c8>
   37e94:	add	r0, sl, r6
   37e98:	cmp	r4, r0
   37e9c:	subls	r1, r0, r4
   37ea0:	movhi	r1, #1
   37ea4:	cmp	r6, #31
   37ea8:	sub	fp, fp, r6
   37eac:	mov	r9, r1
   37eb0:	bhi	3809c <__assert_fail@plt+0x259b0>
   37eb4:	cmp	r6, #2
   37eb8:	bls	37f74 <__assert_fail@plt+0x25888>
   37ebc:	add	r2, sp, #20
   37ec0:	mov	r1, r6
   37ec4:	mov	r0, fp
   37ec8:	bl	37a6c <__assert_fail@plt+0x25380>
   37ecc:	mov	r5, r0
   37ed0:	ldr	r7, [sp, #20]
   37ed4:	mov	r2, r5
   37ed8:	add	r1, fp, r7
   37edc:	mov	r0, fp
   37ee0:	bl	12158 <memcmp@plt>
   37ee4:	subs	r8, r0, #0
   37ee8:	bne	37fe8 <__assert_fail@plt+0x258fc>
   37eec:	sub	r3, r6, r7
   37ef0:	mov	sl, r8
   37ef4:	str	r3, [sp, #4]
   37ef8:	rsb	r3, r5, #1
   37efc:	str	r3, [sp, #8]
   37f00:	add	r3, r6, sl
   37f04:	sub	r2, r3, r9
   37f08:	mov	r1, #0
   37f0c:	add	r0, r4, r9
   37f10:	str	r3, [sp, #12]
   37f14:	bl	124ac <memchr@plt>
   37f18:	ldr	r3, [sp, #12]
   37f1c:	adds	r2, r3, #0
   37f20:	movne	r2, #1
   37f24:	cmp	r0, #0
   37f28:	movne	r2, #0
   37f2c:	cmp	r2, #0
   37f30:	mov	r0, r2
   37f34:	beq	37fb4 <__assert_fail@plt+0x258c8>
   37f38:	cmp	r8, r5
   37f3c:	movcs	r2, r8
   37f40:	movcc	r2, r5
   37f44:	add	ip, r4, sl
   37f48:	cmp	r6, r2
   37f4c:	bls	37f8c <__assert_fail@plt+0x258a0>
   37f50:	ldrb	r0, [fp, r2]
   37f54:	ldrb	r1, [ip, r2]
   37f58:	cmp	r0, r1
   37f5c:	beq	37f84 <__assert_fail@plt+0x25898>
   37f60:	ldr	r1, [sp, #8]
   37f64:	mov	r8, #0
   37f68:	add	sl, r1, sl
   37f6c:	add	sl, r2, sl
   37f70:	b	37fe0 <__assert_fail@plt+0x258f4>
   37f74:	mov	r3, #1
   37f78:	str	r3, [sp, #20]
   37f7c:	sub	r5, r6, #1
   37f80:	b	37ed0 <__assert_fail@plt+0x257e4>
   37f84:	add	r2, r2, #1
   37f88:	b	37f48 <__assert_fail@plt+0x2585c>
   37f8c:	add	r9, sl, r5
   37f90:	add	r1, fp, r5
   37f94:	add	r9, r4, r9
   37f98:	mov	r2, r5
   37f9c:	cmp	r8, r2
   37fa0:	bcc	37fbc <__assert_fail@plt+0x258d0>
   37fa4:	add	r8, r8, #1
   37fa8:	cmp	r8, r2
   37fac:	bls	37fd8 <__assert_fail@plt+0x258ec>
   37fb0:	add	r0, r4, sl
   37fb4:	add	sp, sp, #28
   37fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37fbc:	ldrb	ip, [r1, #-1]!
   37fc0:	ldrb	r0, [r9, #-1]!
   37fc4:	sub	lr, r2, #1
   37fc8:	cmp	ip, r0
   37fcc:	bne	37fa4 <__assert_fail@plt+0x258b8>
   37fd0:	mov	r2, lr
   37fd4:	b	37f9c <__assert_fail@plt+0x258b0>
   37fd8:	ldr	r8, [sp, #4]
   37fdc:	add	sl, sl, r7
   37fe0:	mov	r9, r3
   37fe4:	b	37f00 <__assert_fail@plt+0x25814>
   37fe8:	sub	r8, r6, r5
   37fec:	cmp	r8, r5
   37ff0:	movcc	r8, r5
   37ff4:	add	r8, r8, #1
   37ff8:	mov	r7, #0
   37ffc:	rsb	r3, r5, #1
   38000:	add	sl, r6, r7
   38004:	sub	r2, sl, r9
   38008:	mov	r1, #0
   3800c:	add	r0, r4, r9
   38010:	str	r3, [sp, #4]
   38014:	bl	124ac <memchr@plt>
   38018:	adds	r3, sl, #0
   3801c:	movne	r3, #1
   38020:	cmp	r0, #0
   38024:	movne	r3, #0
   38028:	cmp	r3, #0
   3802c:	mov	r0, r3
   38030:	beq	37fb4 <__assert_fail@plt+0x258c8>
   38034:	mov	r2, r5
   38038:	add	r1, r4, r7
   3803c:	ldr	r3, [sp, #4]
   38040:	b	38048 <__assert_fail@plt+0x2595c>
   38044:	add	r2, r2, #1
   38048:	cmp	r6, r2
   3804c:	bls	38070 <__assert_fail@plt+0x25984>
   38050:	ldrb	ip, [fp, r2]
   38054:	ldrb	r0, [r1, r2]
   38058:	cmp	ip, r0
   3805c:	beq	38044 <__assert_fail@plt+0x25958>
   38060:	add	r7, r3, r7
   38064:	add	r7, r7, r2
   38068:	mov	r9, sl
   3806c:	b	38000 <__assert_fail@plt+0x25914>
   38070:	add	r2, r7, r5
   38074:	add	r1, fp, r5
   38078:	add	r2, r4, r2
   3807c:	cmp	fp, r1
   38080:	beq	380b0 <__assert_fail@plt+0x259c4>
   38084:	ldrb	ip, [r1, #-1]!
   38088:	ldrb	r0, [r2, #-1]!
   3808c:	cmp	ip, r0
   38090:	beq	3807c <__assert_fail@plt+0x25990>
   38094:	add	r7, r7, r8
   38098:	b	38068 <__assert_fail@plt+0x2597c>
   3809c:	mov	r3, r6
   380a0:	mov	r2, fp
   380a4:	mov	r0, r4
   380a8:	bl	37b54 <__assert_fail@plt+0x25468>
   380ac:	b	37fb4 <__assert_fail@plt+0x258c8>
   380b0:	add	r0, r4, r7
   380b4:	b	37fb4 <__assert_fail@plt+0x258c8>
   380b8:	push	{r4, lr}
   380bc:	ldrb	r3, [r0, #4]
   380c0:	cmp	r3, #0
   380c4:	beq	380f4 <__assert_fail@plt+0x25a08>
   380c8:	add	r1, r0, #5
   380cc:	mov	r2, #1
   380d0:	ldr	r0, [pc, #40]	; 38100 <__assert_fail@plt+0x25a14>
   380d4:	bl	123d4 <setenv@plt>
   380d8:	cmp	r0, #0
   380dc:	bne	380ec <__assert_fail@plt+0x25a00>
   380e0:	bl	1220c <tzset@plt>
   380e4:	mov	r0, #1
   380e8:	pop	{r4, pc}
   380ec:	mov	r0, #0
   380f0:	pop	{r4, pc}
   380f4:	ldr	r0, [pc, #4]	; 38100 <__assert_fail@plt+0x25a14>
   380f8:	bl	12668 <unsetenv@plt>
   380fc:	b	380d8 <__assert_fail@plt+0x259ec>
   38100:	andeq	lr, r3, r1, lsr #20
   38104:	push	{r4, r5, r6, r7, r8, lr}
   38108:	subs	r7, r0, #0
   3810c:	beq	3817c <__assert_fail@plt+0x25a90>
   38110:	bl	123bc <strlen@plt>
   38114:	add	r5, r0, #1
   38118:	cmp	r5, #58	; 0x3a
   3811c:	addhi	r0, r0, #2
   38120:	bhi	38128 <__assert_fail@plt+0x25a3c>
   38124:	mov	r0, #59	; 0x3b
   38128:	add	r0, r0, #8
   3812c:	bic	r0, r0, #3
   38130:	bl	2bf10 <__assert_fail@plt+0x19824>
   38134:	subs	r4, r0, #0
   38138:	beq	38174 <__assert_fail@plt+0x25a88>
   3813c:	mov	r6, #0
   38140:	cmp	r7, r6
   38144:	movne	r3, #1
   38148:	moveq	r3, r6
   3814c:	str	r6, [r4]
   38150:	strb	r3, [r4, #4]
   38154:	strb	r6, [r4, #5]
   38158:	beq	38174 <__assert_fail@plt+0x25a88>
   3815c:	add	r3, r4, #5
   38160:	mov	r2, r5
   38164:	mov	r1, r7
   38168:	mov	r0, r3
   3816c:	bl	120f8 <memcpy@plt>
   38170:	strb	r6, [r0, r5]
   38174:	mov	r0, r4
   38178:	pop	{r4, r5, r6, r7, r8, pc}
   3817c:	mov	r5, r7
   38180:	b	38124 <__assert_fail@plt+0x25a38>
   38184:	push	{r4, r5, r6, r7, r8, lr}
   38188:	ldr	r5, [r1, #40]	; 0x28
   3818c:	cmp	r5, #0
   38190:	beq	38284 <__assert_fail@plt+0x25b98>
   38194:	cmp	r1, r5
   38198:	mov	r6, r0
   3819c:	mov	r7, r1
   381a0:	bhi	381b0 <__assert_fail@plt+0x25ac4>
   381a4:	add	r3, r1, #44	; 0x2c
   381a8:	cmp	r5, r3
   381ac:	bcc	38284 <__assert_fail@plt+0x25b98>
   381b0:	ldrb	r3, [r5]
   381b4:	cmp	r3, #0
   381b8:	addne	r4, r6, #5
   381bc:	bne	381fc <__assert_fail@plt+0x25b10>
   381c0:	ldr	r4, [pc, #196]	; 3828c <__assert_fail@plt+0x25ba0>
   381c4:	b	38280 <__assert_fail@plt+0x25b94>
   381c8:	ldrb	r3, [r6, #4]
   381cc:	cmp	r3, #0
   381d0:	beq	38228 <__assert_fail@plt+0x25b3c>
   381d4:	mov	r0, r4
   381d8:	bl	123bc <strlen@plt>
   381dc:	add	r0, r0, #1
   381e0:	ldrb	r3, [r4, r0]!
   381e4:	cmp	r3, #0
   381e8:	bne	381fc <__assert_fail@plt+0x25b10>
   381ec:	ldr	r3, [r6]
   381f0:	cmp	r3, #0
   381f4:	addne	r4, r3, #5
   381f8:	movne	r6, r3
   381fc:	mov	r1, r5
   38200:	mov	r0, r4
   38204:	bl	11ffc <strcmp@plt>
   38208:	cmp	r0, #0
   3820c:	beq	38280 <__assert_fail@plt+0x25b94>
   38210:	ldrb	r3, [r4]
   38214:	cmp	r3, #0
   38218:	bne	381d4 <__assert_fail@plt+0x25ae8>
   3821c:	add	r3, r6, #5
   38220:	cmp	r4, r3
   38224:	beq	381c8 <__assert_fail@plt+0x25adc>
   38228:	mov	r0, r5
   3822c:	bl	123bc <strlen@plt>
   38230:	add	r3, r6, #64	; 0x40
   38234:	sub	r3, r3, r4
   38238:	add	r8, r0, #1
   3823c:	cmp	r8, r3
   38240:	blt	38268 <__assert_fail@plt+0x25b7c>
   38244:	mov	r0, r5
   38248:	bl	38104 <__assert_fail@plt+0x25a18>
   3824c:	cmp	r0, #0
   38250:	movne	r3, #0
   38254:	str	r0, [r6]
   38258:	addne	r4, r0, #5
   3825c:	strbne	r3, [r0, #4]
   38260:	bne	38280 <__assert_fail@plt+0x25b94>
   38264:	pop	{r4, r5, r6, r7, r8, pc}
   38268:	mov	r2, r8
   3826c:	mov	r1, r5
   38270:	mov	r0, r4
   38274:	bl	120f8 <memcpy@plt>
   38278:	mov	r3, #0
   3827c:	strb	r3, [r4, r8]
   38280:	str	r4, [r7, #40]	; 0x28
   38284:	mov	r0, #1
   38288:	pop	{r4, r5, r6, r7, r8, pc}
   3828c:	ldrdeq	fp, [r3], -pc	; <UNPREDICTABLE>
   38290:	cmp	r0, #1
   38294:	bne	3829c <__assert_fail@plt+0x25bb0>
   38298:	bx	lr
   3829c:	cmp	r0, #0
   382a0:	bne	382a8 <__assert_fail@plt+0x25bbc>
   382a4:	bx	lr
   382a8:	push	{r4, lr}
   382ac:	ldr	r4, [r0]
   382b0:	bl	2a01c <__assert_fail@plt+0x17930>
   382b4:	cmp	r4, #0
   382b8:	mov	r0, r4
   382bc:	bne	382ac <__assert_fail@plt+0x25bc0>
   382c0:	pop	{r4, pc}
   382c4:	push	{r4, r5, r6, r7, r8, lr}
   382c8:	mov	r6, r0
   382cc:	ldr	r0, [pc, #128]	; 38354 <__assert_fail@plt+0x25c68>
   382d0:	bl	122fc <getenv@plt>
   382d4:	ldrb	r4, [r6, #4]
   382d8:	subs	r5, r0, #0
   382dc:	beq	3834c <__assert_fail@plt+0x25c60>
   382e0:	cmp	r4, #0
   382e4:	beq	382fc <__assert_fail@plt+0x25c10>
   382e8:	mov	r1, r5
   382ec:	add	r0, r6, #5
   382f0:	bl	11ffc <strcmp@plt>
   382f4:	clz	r4, r0
   382f8:	lsr	r4, r4, #5
   382fc:	cmp	r4, #0
   38300:	movne	r5, #1
   38304:	bne	38344 <__assert_fail@plt+0x25c58>
   38308:	mov	r0, r5
   3830c:	bl	38104 <__assert_fail@plt+0x25a18>
   38310:	subs	r5, r0, #0
   38314:	beq	38344 <__assert_fail@plt+0x25c58>
   38318:	mov	r0, r6
   3831c:	bl	380b8 <__assert_fail@plt+0x259cc>
   38320:	cmp	r0, #0
   38324:	bne	38344 <__assert_fail@plt+0x25c58>
   38328:	bl	12404 <__errno_location@plt>
   3832c:	ldr	r7, [r0]
   38330:	mov	r6, r0
   38334:	mov	r0, r5
   38338:	mov	r5, r4
   3833c:	bl	38290 <__assert_fail@plt+0x25ba4>
   38340:	str	r7, [r6]
   38344:	mov	r0, r5
   38348:	pop	{r4, r5, r6, r7, r8, pc}
   3834c:	clz	r4, r4
   38350:	b	382f8 <__assert_fail@plt+0x25c0c>
   38354:	andeq	lr, r3, r1, lsr #20
   38358:	cmp	r0, #1
   3835c:	push	{r4, r5, r6, r7, r8, lr}
   38360:	moveq	r4, r0
   38364:	beq	38394 <__assert_fail@plt+0x25ca8>
   38368:	mov	r7, r0
   3836c:	bl	12404 <__errno_location@plt>
   38370:	ldr	r6, [r0]
   38374:	mov	r5, r0
   38378:	mov	r0, r7
   3837c:	bl	380b8 <__assert_fail@plt+0x259cc>
   38380:	subs	r4, r0, #0
   38384:	mov	r0, r7
   38388:	ldreq	r6, [r5]
   3838c:	bl	38290 <__assert_fail@plt+0x25ba4>
   38390:	str	r6, [r5]
   38394:	mov	r0, r4
   38398:	pop	{r4, r5, r6, r7, r8, pc}
   3839c:	push	{r4, r5, r6, r7, r8, lr}
   383a0:	subs	r7, r0, #0
   383a4:	mov	r4, r1
   383a8:	mov	r5, r2
   383ac:	bne	383c0 <__assert_fail@plt+0x25cd4>
   383b0:	mov	r0, r4
   383b4:	mov	r1, r2
   383b8:	pop	{r4, r5, r6, r7, r8, lr}
   383bc:	b	11fcc <gmtime_r@plt>
   383c0:	bl	382c4 <__assert_fail@plt+0x25bd8>
   383c4:	subs	r6, r0, #0
   383c8:	beq	38404 <__assert_fail@plt+0x25d18>
   383cc:	mov	r0, r4
   383d0:	mov	r1, r5
   383d4:	bl	121c4 <localtime_r@plt>
   383d8:	subs	r4, r0, #0
   383dc:	beq	383f0 <__assert_fail@plt+0x25d04>
   383e0:	mov	r1, r5
   383e4:	mov	r0, r7
   383e8:	bl	38184 <__assert_fail@plt+0x25a98>
   383ec:	mov	r4, r0
   383f0:	mov	r0, r6
   383f4:	bl	38358 <__assert_fail@plt+0x25c6c>
   383f8:	and	r4, r4, #1
   383fc:	tst	r0, r4
   38400:	bne	38408 <__assert_fail@plt+0x25d1c>
   38404:	mov	r5, #0
   38408:	mov	r0, r5
   3840c:	pop	{r4, r5, r6, r7, r8, pc}
   38410:	push	{r4, r5, r6, r7, lr}
   38414:	subs	r6, r0, #0
   38418:	sub	sp, sp, #52	; 0x34
   3841c:	mov	r4, r1
   38420:	bne	3843c <__assert_fail@plt+0x25d50>
   38424:	mov	r0, r1
   38428:	bl	125b4 <timegm@plt>
   3842c:	mov	r5, r0
   38430:	mov	r0, r5
   38434:	add	sp, sp, #52	; 0x34
   38438:	pop	{r4, r5, r6, r7, pc}
   3843c:	bl	382c4 <__assert_fail@plt+0x25bd8>
   38440:	subs	r7, r0, #0
   38444:	beq	384ec <__assert_fail@plt+0x25e00>
   38448:	ldr	r3, [r4]
   3844c:	add	r0, sp, #4
   38450:	str	r3, [sp, #4]
   38454:	ldr	r3, [r4, #4]
   38458:	str	r3, [sp, #8]
   3845c:	ldr	r3, [r4, #8]
   38460:	str	r3, [sp, #12]
   38464:	ldr	r3, [r4, #12]
   38468:	str	r3, [sp, #16]
   3846c:	ldr	r3, [r4, #16]
   38470:	str	r3, [sp, #20]
   38474:	ldr	r3, [r4, #20]
   38478:	str	r3, [sp, #24]
   3847c:	mvn	r3, #0
   38480:	str	r3, [sp, #32]
   38484:	ldr	r3, [r4, #32]
   38488:	str	r3, [sp, #36]	; 0x24
   3848c:	bl	12050 <mktime@plt>
   38490:	ldr	r3, [sp, #32]
   38494:	cmp	r3, #0
   38498:	movlt	r6, #0
   3849c:	mov	r5, r0
   384a0:	blt	384b4 <__assert_fail@plt+0x25dc8>
   384a4:	mov	r0, r6
   384a8:	add	r1, sp, #4
   384ac:	bl	38184 <__assert_fail@plt+0x25a98>
   384b0:	mov	r6, r0
   384b4:	mov	r0, r7
   384b8:	bl	38358 <__assert_fail@plt+0x25c6c>
   384bc:	and	r6, r6, #1
   384c0:	tst	r0, r6
   384c4:	beq	384ec <__assert_fail@plt+0x25e00>
   384c8:	add	lr, sp, #4
   384cc:	mov	ip, r4
   384d0:	ldm	lr!, {r0, r1, r2, r3}
   384d4:	stmia	ip!, {r0, r1, r2, r3}
   384d8:	ldm	lr!, {r0, r1, r2, r3}
   384dc:	stmia	ip!, {r0, r1, r2, r3}
   384e0:	ldm	lr, {r0, r1, r2}
   384e4:	stm	ip, {r0, r1, r2}
   384e8:	b	38430 <__assert_fail@plt+0x25d44>
   384ec:	mvn	r5, #0
   384f0:	b	38430 <__assert_fail@plt+0x25d44>
   384f4:	ldr	r3, [pc, #8]	; 38504 <__assert_fail@plt+0x25e18>
   384f8:	push	{r4, lr}
   384fc:	ldr	r0, [r3]
   38500:	bl	1238c <exit@plt>
   38504:	andeq	r0, r5, r4, lsl #10
   38508:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3850c:	mov	r8, r2
   38510:	str	r0, [sp]
   38514:	mov	fp, r1
   38518:	mov	r9, r3
   3851c:	bl	123bc <strlen@plt>
   38520:	mov	r5, #0
   38524:	mov	r7, r8
   38528:	mvn	r4, #0
   3852c:	mov	r6, r5
   38530:	mov	sl, r0
   38534:	ldr	r3, [fp, r6, lsl #2]
   38538:	cmp	r3, #0
   3853c:	bne	3854c <__assert_fail@plt+0x25e60>
   38540:	cmp	r5, #0
   38544:	mvnne	r4, #1
   38548:	b	38580 <__assert_fail@plt+0x25e94>
   3854c:	mov	r2, sl
   38550:	ldr	r1, [sp]
   38554:	mov	r0, r3
   38558:	str	r3, [sp, #4]
   3855c:	bl	1268c <strncmp@plt>
   38560:	cmp	r0, #0
   38564:	bne	385bc <__assert_fail@plt+0x25ed0>
   38568:	ldr	r3, [sp, #4]
   3856c:	mov	r0, r3
   38570:	bl	123bc <strlen@plt>
   38574:	cmp	sl, r0
   38578:	bne	3858c <__assert_fail@plt+0x25ea0>
   3857c:	mov	r4, r6
   38580:	mov	r0, r4
   38584:	add	sp, sp, #12
   38588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3858c:	cmn	r4, #1
   38590:	moveq	r4, r6
   38594:	beq	385bc <__assert_fail@plt+0x25ed0>
   38598:	cmp	r8, #0
   3859c:	moveq	r5, #1
   385a0:	beq	385bc <__assert_fail@plt+0x25ed0>
   385a4:	mov	r2, r9
   385a8:	mov	r1, r7
   385ac:	mla	r0, r9, r4, r8
   385b0:	bl	12158 <memcmp@plt>
   385b4:	cmp	r0, #0
   385b8:	movne	r5, #1
   385bc:	add	r6, r6, #1
   385c0:	add	r7, r7, r9
   385c4:	b	38534 <__assert_fail@plt+0x25e48>
   385c8:	cmn	r2, #1
   385cc:	push	{r0, r1, r4, r5, r6, lr}
   385d0:	mov	r2, #5
   385d4:	mov	r5, r1
   385d8:	mov	r6, r0
   385dc:	ldreq	r1, [pc, #76]	; 38630 <__assert_fail@plt+0x25f44>
   385e0:	ldrne	r1, [pc, #76]	; 38634 <__assert_fail@plt+0x25f48>
   385e4:	mov	r0, #0
   385e8:	bl	1217c <dcgettext@plt>
   385ec:	mov	r2, r5
   385f0:	mov	r1, #8
   385f4:	mov	r4, r0
   385f8:	mov	r0, #0
   385fc:	bl	27f14 <__assert_fail@plt+0x15828>
   38600:	mov	r1, r6
   38604:	mov	r5, r0
   38608:	mov	r0, #1
   3860c:	bl	2815c <__assert_fail@plt+0x15a70>
   38610:	mov	r1, #0
   38614:	mov	r3, r5
   38618:	mov	r2, r4
   3861c:	str	r0, [sp]
   38620:	mov	r0, r1
   38624:	bl	122c0 <error@plt>
   38628:	add	sp, sp, #8
   3862c:	pop	{r4, r5, r6, pc}
   38630:	andeq	pc, r3, r8, asr r4	; <UNPREDICTABLE>
   38634:	andeq	pc, r3, r3, ror r4	; <UNPREDICTABLE>
   38638:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3863c:	mov	sl, r0
   38640:	ldr	r4, [pc, #188]	; 38704 <__assert_fail@plt+0x26018>
   38644:	mov	r5, r1
   38648:	mov	r9, r2
   3864c:	ldr	r1, [pc, #180]	; 38708 <__assert_fail@plt+0x2601c>
   38650:	mov	r2, #5
   38654:	mov	r0, #0
   38658:	bl	1217c <dcgettext@plt>
   3865c:	ldr	r1, [r4]
   38660:	bl	12680 <fputs@plt>
   38664:	mov	r8, #0
   38668:	ldr	fp, [pc, #156]	; 3870c <__assert_fail@plt+0x26020>
   3866c:	mov	r6, r8
   38670:	ldr	r7, [sl, r6, lsl #2]
   38674:	cmp	r7, #0
   38678:	bne	38690 <__assert_fail@plt+0x25fa4>
   3867c:	ldr	r1, [r4]
   38680:	mov	r0, #10
   38684:	add	sp, sp, #12
   38688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3868c:	b	125c0 <putc@plt>
   38690:	cmp	r6, #0
   38694:	beq	386b0 <__assert_fail@plt+0x25fc4>
   38698:	mov	r2, r9
   3869c:	mov	r1, r5
   386a0:	mov	r0, r8
   386a4:	bl	12158 <memcmp@plt>
   386a8:	cmp	r0, #0
   386ac:	beq	386dc <__assert_fail@plt+0x25ff0>
   386b0:	mov	r0, r7
   386b4:	ldr	r8, [r4]
   386b8:	bl	28164 <__assert_fail@plt+0x15a78>
   386bc:	ldr	r1, [pc, #76]	; 38710 <__assert_fail@plt+0x26024>
   386c0:	mov	r2, r0
   386c4:	mov	r0, r8
   386c8:	bl	123f8 <fprintf@plt>
   386cc:	mov	r8, r5
   386d0:	add	r6, r6, #1
   386d4:	add	r5, r5, r9
   386d8:	b	38670 <__assert_fail@plt+0x25f84>
   386dc:	ldr	r3, [r4]
   386e0:	mov	r0, r7
   386e4:	str	r3, [sp, #4]
   386e8:	bl	28164 <__assert_fail@plt+0x15a78>
   386ec:	ldr	r3, [sp, #4]
   386f0:	mov	r1, fp
   386f4:	mov	r2, r0
   386f8:	mov	r0, r3
   386fc:	bl	123f8 <fprintf@plt>
   38700:	b	386d0 <__assert_fail@plt+0x25fe4>
   38704:	andeq	r0, r5, r0, ror #10
   38708:	muleq	r3, r0, r4
   3870c:	andeq	pc, r3, sp, lsr #9
   38710:	andeq	pc, r3, r5, lsr #9
   38714:	push	{r4, r5, r6, r7, r8, lr}
   38718:	mov	r6, r1
   3871c:	mov	r4, r2
   38720:	mov	r5, r3
   38724:	mov	r7, r0
   38728:	ldr	r3, [sp, #24]
   3872c:	mov	r2, r5
   38730:	mov	r1, r4
   38734:	mov	r0, r6
   38738:	bl	38508 <__assert_fail@plt+0x25e1c>
   3873c:	cmp	r0, #0
   38740:	popge	{r4, r5, r6, r7, r8, pc}
   38744:	mov	r2, r0
   38748:	mov	r1, r6
   3874c:	mov	r0, r7
   38750:	bl	385c8 <__assert_fail@plt+0x25edc>
   38754:	mov	r0, r4
   38758:	ldr	r2, [sp, #24]
   3875c:	mov	r1, r5
   38760:	bl	38638 <__assert_fail@plt+0x25f4c>
   38764:	ldr	r3, [sp, #28]
   38768:	blx	r3
   3876c:	mvn	r0, #0
   38770:	pop	{r4, r5, r6, r7, r8, pc}
   38774:	push	{r4, r5, r6, r7, r8, lr}
   38778:	mov	r8, r0
   3877c:	mov	r7, r3
   38780:	sub	r6, r1, #4
   38784:	mov	r4, r2
   38788:	ldr	r5, [r6, #4]!
   3878c:	cmp	r5, #0
   38790:	beq	387b0 <__assert_fail@plt+0x260c4>
   38794:	mov	r1, r4
   38798:	mov	r2, r7
   3879c:	mov	r0, r8
   387a0:	bl	12158 <memcmp@plt>
   387a4:	add	r4, r4, r7
   387a8:	cmp	r0, #0
   387ac:	bne	38788 <__assert_fail@plt+0x2609c>
   387b0:	mov	r0, r5
   387b4:	pop	{r4, r5, r6, r7, r8, pc}
   387b8:	push	{r4, r5, r6, r7, r8, r9, lr}
   387bc:	mov	r4, r0
   387c0:	ldrb	r3, [r2]
   387c4:	sub	sp, sp, #36	; 0x24
   387c8:	cmp	r3, #0
   387cc:	strbeq	r3, [r0]
   387d0:	beq	3884c <__assert_fail@plt+0x26160>
   387d4:	ldr	r5, [pc, #188]	; 38898 <__assert_fail@plt+0x261ac>
   387d8:	mov	r9, r1
   387dc:	mov	r6, r2
   387e0:	ldr	r8, [r5]
   387e4:	cmp	r8, #0
   387e8:	bne	3883c <__assert_fail@plt+0x26150>
   387ec:	ldr	r1, [pc, #168]	; 3889c <__assert_fail@plt+0x261b0>
   387f0:	ldr	r0, [pc, #168]	; 388a0 <__assert_fail@plt+0x261b4>
   387f4:	bl	122f0 <open64@plt>
   387f8:	subs	r7, r0, #0
   387fc:	mvnlt	r3, #0
   38800:	strlt	r3, [r5]
   38804:	blt	3883c <__assert_fail@plt+0x26150>
   38808:	mov	r2, r7
   3880c:	ldr	r1, [pc, #144]	; 388a4 <__assert_fail@plt+0x261b8>
   38810:	mov	r0, sp
   38814:	bl	12590 <sprintf@plt>
   38818:	mov	r1, r8
   3881c:	mov	r0, sp
   38820:	bl	124c4 <access@plt>
   38824:	cmp	r0, #0
   38828:	mvnne	r3, #0
   3882c:	moveq	r3, #1
   38830:	mov	r0, r7
   38834:	str	r3, [r5]
   38838:	bl	126a4 <close@plt>
   3883c:	ldr	r3, [r5]
   38840:	cmp	r3, #0
   38844:	bge	38858 <__assert_fail@plt+0x2616c>
   38848:	mov	r4, #0
   3884c:	mov	r0, r4
   38850:	add	sp, sp, #36	; 0x24
   38854:	pop	{r4, r5, r6, r7, r8, r9, pc}
   38858:	mov	r0, r6
   3885c:	bl	123bc <strlen@plt>
   38860:	add	r0, r0, #27
   38864:	cmp	r0, #4032	; 0xfc0
   38868:	bls	38878 <__assert_fail@plt+0x2618c>
   3886c:	bl	2bf10 <__assert_fail@plt+0x19824>
   38870:	subs	r4, r0, #0
   38874:	beq	38848 <__assert_fail@plt+0x2615c>
   38878:	mov	r2, r9
   3887c:	ldr	r1, [pc, #36]	; 388a8 <__assert_fail@plt+0x261bc>
   38880:	mov	r0, r4
   38884:	bl	12590 <sprintf@plt>
   38888:	mov	r1, r6
   3888c:	add	r0, r4, r0
   38890:	bl	12278 <strcpy@plt>
   38894:	b	3884c <__assert_fail@plt+0x26160>
   38898:	andeq	r0, r5, r4, asr lr
   3889c:	andeq	r4, r8, r0, lsl #18
   388a0:	muleq	r3, r2, r9
   388a4:			; <UNDEFINED> instruction: 0x0003f4b2
   388a8:	andeq	pc, r3, r9, asr #9
   388ac:	mov	r2, r0
   388b0:	push	{r4, lr}
   388b4:	mov	r0, r2
   388b8:	ldrb	r3, [r2]
   388bc:	add	r1, r2, #1
   388c0:	cmp	r3, #47	; 0x2f
   388c4:	beq	388e8 <__assert_fail@plt+0x261fc>
   388c8:	mov	r3, #0
   388cc:	mov	lr, #1
   388d0:	mov	r4, r3
   388d4:	mov	ip, r2
   388d8:	ldrb	r1, [r2], #1
   388dc:	cmp	r1, #0
   388e0:	bne	388f0 <__assert_fail@plt+0x26204>
   388e4:	pop	{r4, pc}
   388e8:	mov	r2, r1
   388ec:	b	388b4 <__assert_fail@plt+0x261c8>
   388f0:	cmp	r1, #47	; 0x2f
   388f4:	moveq	r3, lr
   388f8:	beq	388d4 <__assert_fail@plt+0x261e8>
   388fc:	cmp	r3, #0
   38900:	movne	r0, ip
   38904:	movne	r3, r4
   38908:	b	388d4 <__assert_fail@plt+0x261e8>
   3890c:	push	{r4, lr}
   38910:	mov	r4, r0
   38914:	bl	123bc <strlen@plt>
   38918:	cmp	r0, #1
   3891c:	popls	{r4, pc}
   38920:	sub	r3, r0, #1
   38924:	ldrb	r2, [r4, r3]
   38928:	cmp	r2, #47	; 0x2f
   3892c:	beq	38934 <__assert_fail@plt+0x26248>
   38930:	pop	{r4, pc}
   38934:	mov	r0, r3
   38938:	b	38918 <__assert_fail@plt+0x2622c>
   3893c:	push	{r4, r5, r6, lr}
   38940:	mov	r4, r0
   38944:	bl	12290 <__fpending@plt>
   38948:	mov	r5, r0
   3894c:	mov	r0, r4
   38950:	bl	120bc <ferror@plt>
   38954:	mov	r6, r0
   38958:	mov	r0, r4
   3895c:	bl	124d0 <fclose@plt>
   38960:	cmp	r6, #0
   38964:	mov	r4, r0
   38968:	bne	38994 <__assert_fail@plt+0x262a8>
   3896c:	cmp	r0, #0
   38970:	beq	3898c <__assert_fail@plt+0x262a0>
   38974:	cmp	r5, #0
   38978:	bne	389a4 <__assert_fail@plt+0x262b8>
   3897c:	bl	12404 <__errno_location@plt>
   38980:	ldr	r4, [r0]
   38984:	subs	r4, r4, #9
   38988:	mvnne	r4, #0
   3898c:	mov	r0, r4
   38990:	pop	{r4, r5, r6, pc}
   38994:	cmp	r0, #0
   38998:	bne	389a4 <__assert_fail@plt+0x262b8>
   3899c:	bl	12404 <__errno_location@plt>
   389a0:	str	r4, [r0]
   389a4:	mvn	r4, #0
   389a8:	b	3898c <__assert_fail@plt+0x262a0>
   389ac:	mov	r3, #0
   389b0:	mov	r2, #0
   389b4:	strd	r2, [r0, #16]
   389b8:	ldr	r3, [pc, #4]	; 389c4 <__assert_fail@plt+0x262d8>
   389bc:	str	r3, [r0, #24]
   389c0:	bx	lr
   389c4:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   389c8:	ldr	r2, [r0, #24]
   389cc:	ldr	r3, [pc, #148]	; 38a68 <__assert_fail@plt+0x2637c>
   389d0:	push	{r4, r5, r6, r7, r8, lr}
   389d4:	cmp	r2, r3
   389d8:	beq	389f0 <__assert_fail@plt+0x26304>
   389dc:	ldr	r3, [pc, #136]	; 38a6c <__assert_fail@plt+0x26380>
   389e0:	mov	r2, #60	; 0x3c
   389e4:	ldr	r1, [pc, #132]	; 38a70 <__assert_fail@plt+0x26384>
   389e8:	ldr	r0, [pc, #132]	; 38a74 <__assert_fail@plt+0x26388>
   389ec:	bl	126ec <__assert_fail@plt>
   389f0:	ldrd	r6, [r0, #16]
   389f4:	orrs	r3, r6, r7
   389f8:	beq	38a2c <__assert_fail@plt+0x26340>
   389fc:	ldrd	r4, [r1, #96]	; 0x60
   38a00:	ldrd	r2, [r0]
   38a04:	cmp	r5, r3
   38a08:	cmpeq	r4, r2
   38a0c:	bne	38a2c <__assert_fail@plt+0x26340>
   38a10:	ldrd	r4, [r1]
   38a14:	ldrd	r2, [r0, #8]
   38a18:	cmp	r5, r3
   38a1c:	cmpeq	r4, r2
   38a20:	bne	38a2c <__assert_fail@plt+0x26340>
   38a24:	mov	r0, #1
   38a28:	pop	{r4, r5, r6, r7, r8, pc}
   38a2c:	adds	r2, r6, #1
   38a30:	adc	r3, r7, #0
   38a34:	and	r6, r6, r2
   38a38:	and	r7, r7, r3
   38a3c:	orrs	ip, r6, r7
   38a40:	strd	r2, [r0, #16]
   38a44:	bne	38a60 <__assert_fail@plt+0x26374>
   38a48:	orrs	r3, r2, r3
   38a4c:	beq	38a24 <__assert_fail@plt+0x26338>
   38a50:	ldrd	r2, [r1]
   38a54:	strd	r2, [r0, #8]
   38a58:	ldrd	r2, [r1, #96]	; 0x60
   38a5c:	strd	r2, [r0]
   38a60:	mov	r0, #0
   38a64:	pop	{r4, r5, r6, r7, r8, pc}
   38a68:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   38a6c:	ldrdeq	pc, [r3], -fp
   38a70:	andeq	pc, r3, r7, ror #9
   38a74:	strdeq	pc, [r3], -r5
   38a78:	ldr	ip, [r0, #4]
   38a7c:	cmp	ip, r1
   38a80:	bcc	38a90 <__assert_fail@plt+0x263a4>
   38a84:	str	r1, [r0]
   38a88:	mov	r0, #1
   38a8c:	bx	lr
   38a90:	cmp	r3, #0
   38a94:	push	{r4, r5, r6, r7, r8, lr}
   38a98:	mov	r7, r3
   38a9c:	mov	r6, r2
   38aa0:	mov	r5, r1
   38aa4:	mov	r4, r0
   38aa8:	beq	38ac0 <__assert_fail@plt+0x263d4>
   38aac:	mov	r1, r3
   38ab0:	mvn	r0, #0
   38ab4:	bl	39074 <__assert_fail@plt+0x26988>
   38ab8:	cmp	r5, r0
   38abc:	bhi	38b20 <__assert_fail@plt+0x26434>
   38ac0:	ldr	r0, [r4, #8]
   38ac4:	mul	r1, r7, r5
   38ac8:	cmp	r0, r6
   38acc:	bne	38b10 <__assert_fail@plt+0x26424>
   38ad0:	mov	r0, r1
   38ad4:	bl	2bf10 <__assert_fail@plt+0x19824>
   38ad8:	subs	r6, r0, #0
   38adc:	bne	38ae8 <__assert_fail@plt+0x263fc>
   38ae0:	mov	r0, #0
   38ae4:	pop	{r4, r5, r6, r7, r8, pc}
   38ae8:	ldr	r1, [r4, #8]
   38aec:	cmp	r1, #0
   38af0:	beq	38b00 <__assert_fail@plt+0x26414>
   38af4:	ldr	r2, [r4]
   38af8:	mul	r2, r2, r7
   38afc:	bl	120f8 <memcpy@plt>
   38b00:	stmib	r4, {r5, r6}
   38b04:	str	r5, [r4]
   38b08:	mov	r0, #1
   38b0c:	pop	{r4, r5, r6, r7, r8, pc}
   38b10:	bl	2c8b0 <__assert_fail@plt+0x1a1c4>
   38b14:	subs	r6, r0, #0
   38b18:	bne	38b00 <__assert_fail@plt+0x26414>
   38b1c:	b	38ae0 <__assert_fail@plt+0x263f4>
   38b20:	bl	12404 <__errno_location@plt>
   38b24:	mov	r3, #12
   38b28:	str	r3, [r0]
   38b2c:	b	38ae0 <__assert_fail@plt+0x263f4>
   38b30:	mov	r1, r0
   38b34:	mov	r0, #0
   38b38:	b	120e0 <clock_gettime@plt>
   38b3c:	push	{r0, r1, r2, r4, r5, lr}
   38b40:	mov	r4, r0
   38b44:	mov	r0, sp
   38b48:	bl	38b30 <__assert_fail@plt+0x26444>
   38b4c:	ldm	sp, {r0, r1}
   38b50:	stm	r4, {r0, r1}
   38b54:	mov	r0, r4
   38b58:	add	sp, sp, #12
   38b5c:	pop	{r4, r5, pc}
   38b60:	push	{lr}		; (str lr, [sp, #-4]!)
   38b64:	sub	sp, sp, #268	; 0x10c
   38b68:	ldr	r2, [pc, #64]	; 38bb0 <__assert_fail@plt+0x264c4>
   38b6c:	add	r1, sp, #4
   38b70:	bl	38ff0 <__assert_fail@plt+0x26904>
   38b74:	cmp	r0, #0
   38b78:	movne	r0, #0
   38b7c:	bne	38ba8 <__assert_fail@plt+0x264bc>
   38b80:	ldr	r1, [pc, #44]	; 38bb4 <__assert_fail@plt+0x264c8>
   38b84:	add	r0, sp, #4
   38b88:	bl	11ffc <strcmp@plt>
   38b8c:	cmp	r0, #0
   38b90:	beq	38ba8 <__assert_fail@plt+0x264bc>
   38b94:	ldr	r1, [pc, #28]	; 38bb8 <__assert_fail@plt+0x264cc>
   38b98:	add	r0, sp, #4
   38b9c:	bl	11ffc <strcmp@plt>
   38ba0:	adds	r0, r0, #0
   38ba4:	movne	r0, #1
   38ba8:	add	sp, sp, #268	; 0x10c
   38bac:	pop	{pc}		; (ldr pc, [sp], #4)
   38bb0:	andeq	r0, r0, r1, lsl #2
   38bb4:	andeq	r9, r3, r4, asr ip
   38bb8:	andeq	pc, r3, sp, lsl #10
   38bbc:	mov	r3, #1
   38bc0:	strb	r3, [r0, #28]
   38bc4:	mov	r3, #0
   38bc8:	str	r3, [r0, #20]
   38bcc:	str	r3, [r0, #24]
   38bd0:	str	r1, [r0]
   38bd4:	str	r1, [r0, #4]
   38bd8:	str	r1, [r0, #8]
   38bdc:	str	r1, [r0, #12]
   38be0:	str	r1, [r0, #16]
   38be4:	bx	lr
   38be8:	ldrb	r0, [r0, #28]
   38bec:	bx	lr
   38bf0:	ldrb	ip, [r0, #28]
   38bf4:	ldr	r3, [r0, #20]
   38bf8:	mov	r2, r0
   38bfc:	eor	ip, ip, #1
   38c00:	add	r3, ip, r3
   38c04:	and	r3, r3, #3
   38c08:	ldr	r0, [r0, r3, lsl #2]
   38c0c:	str	r1, [r2, r3, lsl #2]
   38c10:	ldr	r1, [r2, #24]
   38c14:	str	r3, [r2, #20]
   38c18:	cmp	r3, r1
   38c1c:	addeq	r3, ip, r3
   38c20:	andeq	r3, r3, #3
   38c24:	streq	r3, [r2, #24]
   38c28:	mov	r3, #0
   38c2c:	strb	r3, [r2, #28]
   38c30:	bx	lr
   38c34:	ldrb	r2, [r0, #28]
   38c38:	cmp	r2, #0
   38c3c:	beq	38c48 <__assert_fail@plt+0x2655c>
   38c40:	push	{r4, lr}
   38c44:	bl	12698 <abort@plt>
   38c48:	mov	r3, r0
   38c4c:	ldr	r2, [r0, #20]
   38c50:	ldr	r1, [r3, #16]
   38c54:	ldr	r0, [r0, r2, lsl #2]
   38c58:	str	r1, [r3, r2, lsl #2]
   38c5c:	ldr	r1, [r3, #24]
   38c60:	cmp	r2, r1
   38c64:	addne	r2, r2, #3
   38c68:	moveq	r2, #1
   38c6c:	andne	r2, r2, #3
   38c70:	strbeq	r2, [r3, #28]
   38c74:	strne	r2, [r3, #20]
   38c78:	bx	lr
   38c7c:	push	{r4, lr}
   38c80:	mov	r0, #14
   38c84:	bl	12560 <nl_langinfo@plt>
   38c88:	ldr	r3, [pc, #24]	; 38ca8 <__assert_fail@plt+0x265bc>
   38c8c:	cmp	r0, #0
   38c90:	moveq	r0, r3
   38c94:	ldr	r3, [pc, #16]	; 38cac <__assert_fail@plt+0x265c0>
   38c98:	ldrb	r2, [r0]
   38c9c:	cmp	r2, #0
   38ca0:	moveq	r0, r3
   38ca4:	pop	{r4, pc}
   38ca8:	ldrdeq	fp, [r3], -pc	; <UNPREDICTABLE>
   38cac:	andeq	pc, r3, r3, lsl r5	; <UNPREDICTABLE>
   38cb0:	cmn	r0, #-2147483631	; 0x80000011
   38cb4:	bls	38cc8 <__assert_fail@plt+0x265dc>
   38cb8:	mov	r0, #0
   38cbc:	bx	lr
   38cc0:	mov	r0, #0
   38cc4:	pop	{r4, pc}
   38cc8:	push	{r4, lr}
   38ccc:	add	r0, r0, #16
   38cd0:	bl	12314 <malloc@plt>
   38cd4:	cmp	r0, #0
   38cd8:	beq	38cc0 <__assert_fail@plt+0x265d4>
   38cdc:	cmn	r0, #9
   38ce0:	addls	r2, r0, #8
   38ce4:	movhi	r2, #0
   38ce8:	rsb	r3, r0, #8
   38cec:	bic	r2, r2, #15
   38cf0:	add	r3, r3, r2
   38cf4:	add	r0, r0, r3
   38cf8:	strb	r3, [r0, #-1]
   38cfc:	pop	{r4, pc}
   38d00:	tst	r0, #7
   38d04:	beq	38d10 <__assert_fail@plt+0x26624>
   38d08:	push	{r4, lr}
   38d0c:	bl	12698 <abort@plt>
   38d10:	tst	r0, #8
   38d14:	bxeq	lr
   38d18:	ldrb	r3, [r0, #-1]
   38d1c:	sub	r0, r0, r3
   38d20:	b	2a01c <__assert_fail@plt+0x17930>
   38d24:	push	{r4, lr}
   38d28:	mov	r4, r0
   38d2c:	bl	12074 <wcwidth@plt>
   38d30:	cmp	r0, #0
   38d34:	popge	{r4, pc}
   38d38:	mov	r0, r4
   38d3c:	bl	121dc <iswcntrl@plt>
   38d40:	clz	r0, r0
   38d44:	lsr	r0, r0, #5
   38d48:	pop	{r4, pc}
   38d4c:	mov	r3, r1
   38d50:	push	{r4, r5, r6, lr}
   38d54:	mov	r5, r1
   38d58:	ldr	r1, [r3], #16
   38d5c:	mov	r4, r0
   38d60:	cmp	r1, r3
   38d64:	strne	r1, [r0]
   38d68:	bne	38d80 <__assert_fail@plt+0x26694>
   38d6c:	add	r3, r0, #16
   38d70:	ldr	r2, [r5, #4]
   38d74:	mov	r0, r3
   38d78:	bl	120f8 <memcpy@plt>
   38d7c:	str	r0, [r4]
   38d80:	ldr	r3, [r5, #4]
   38d84:	str	r3, [r4, #4]
   38d88:	ldrb	r3, [r5, #8]
   38d8c:	cmp	r3, #0
   38d90:	strb	r3, [r4, #8]
   38d94:	ldrne	r3, [r5, #12]
   38d98:	strne	r3, [r4, #12]
   38d9c:	pop	{r4, r5, r6, pc}
   38da0:	ldr	r3, [pc, #20]	; 38dbc <__assert_fail@plt+0x266d0>
   38da4:	lsr	r2, r0, #5
   38da8:	and	r0, r0, #31
   38dac:	ldr	r3, [r3, r2, lsl #2]
   38db0:	lsr	r0, r3, r0
   38db4:	and	r0, r0, #1
   38db8:	bx	lr
   38dbc:	andeq	pc, r3, ip, lsl r5	; <UNPREDICTABLE>
   38dc0:	push	{r4, r5, r6, r7, r8, lr}
   38dc4:	sub	sp, sp, #56	; 0x38
   38dc8:	mov	r4, r0
   38dcc:	bl	12260 <__ctype_get_mb_cur_max@plt>
   38dd0:	cmp	r0, #1
   38dd4:	bls	38f58 <__assert_fail@plt+0x2686c>
   38dd8:	add	r3, sp, #56	; 0x38
   38ddc:	mov	r0, #0
   38de0:	ldr	r8, [pc, #416]	; 38f88 <__assert_fail@plt+0x2689c>
   38de4:	strb	r0, [r3, #-56]!	; 0xffffffc8
   38de8:	str	r4, [sp, #16]
   38dec:	add	r5, r3, #4
   38df0:	mov	r4, r0
   38df4:	add	r7, r3, #28
   38df8:	str	r0, [sp, #4]
   38dfc:	str	r0, [r5, #4]
   38e00:	strb	r0, [sp, #12]
   38e04:	ldrb	r3, [sp]
   38e08:	ldr	r6, [sp, #16]
   38e0c:	cmp	r3, #0
   38e10:	bne	38e94 <__assert_fail@plt+0x267a8>
   38e14:	ldrb	r3, [r6]
   38e18:	lsr	r2, r3, #5
   38e1c:	and	r3, r3, #31
   38e20:	ldr	r2, [r8, r2, lsl #2]
   38e24:	lsr	r3, r2, r3
   38e28:	tst	r3, #1
   38e2c:	beq	38e68 <__assert_fail@plt+0x2677c>
   38e30:	mov	r3, #1
   38e34:	str	r3, [sp, #20]
   38e38:	ldrb	r2, [r6]
   38e3c:	str	r2, [sp, #28]
   38e40:	strb	r3, [sp, #24]
   38e44:	ldrb	r3, [sp, #24]
   38e48:	cmp	r3, #0
   38e4c:	beq	38f68 <__assert_fail@plt+0x2687c>
   38e50:	ldr	r3, [sp, #28]
   38e54:	cmp	r3, #0
   38e58:	bne	38f68 <__assert_fail@plt+0x2687c>
   38e5c:	mov	r0, r4
   38e60:	add	sp, sp, #56	; 0x38
   38e64:	pop	{r4, r5, r6, r7, r8, pc}
   38e68:	mov	r0, r5
   38e6c:	bl	12134 <mbsinit@plt>
   38e70:	cmp	r0, #0
   38e74:	bne	38e8c <__assert_fail@plt+0x267a0>
   38e78:	ldr	r3, [pc, #268]	; 38f8c <__assert_fail@plt+0x268a0>
   38e7c:	ldr	r1, [pc, #268]	; 38f90 <__assert_fail@plt+0x268a4>
   38e80:	ldr	r0, [pc, #268]	; 38f94 <__assert_fail@plt+0x268a8>
   38e84:	mov	r2, #143	; 0x8f
   38e88:	bl	126ec <__assert_fail@plt>
   38e8c:	mov	r3, #1
   38e90:	strb	r3, [sp]
   38e94:	bl	12260 <__ctype_get_mb_cur_max@plt>
   38e98:	mov	r1, r0
   38e9c:	mov	r0, r6
   38ea0:	bl	28854 <__assert_fail@plt+0x16168>
   38ea4:	mov	r3, r5
   38ea8:	mov	r1, r6
   38eac:	mov	r2, r0
   38eb0:	mov	r0, r7
   38eb4:	bl	2bf50 <__assert_fail@plt+0x19864>
   38eb8:	cmn	r0, #1
   38ebc:	str	r0, [sp, #20]
   38ec0:	bne	38ed4 <__assert_fail@plt+0x267e8>
   38ec4:	mov	r3, #1
   38ec8:	str	r3, [sp, #20]
   38ecc:	mov	r3, #0
   38ed0:	b	38e40 <__assert_fail@plt+0x26754>
   38ed4:	cmn	r0, #2
   38ed8:	bne	38eec <__assert_fail@plt+0x26800>
   38edc:	ldr	r0, [sp, #16]
   38ee0:	bl	123bc <strlen@plt>
   38ee4:	str	r0, [sp, #20]
   38ee8:	b	38ecc <__assert_fail@plt+0x267e0>
   38eec:	cmp	r0, #0
   38ef0:	bne	38f38 <__assert_fail@plt+0x2684c>
   38ef4:	mov	r3, #1
   38ef8:	str	r3, [sp, #20]
   38efc:	ldr	r3, [sp, #16]
   38f00:	ldrb	r3, [r3]
   38f04:	cmp	r3, #0
   38f08:	ldrne	r3, [pc, #124]	; 38f8c <__assert_fail@plt+0x268a0>
   38f0c:	movne	r2, #171	; 0xab
   38f10:	ldrne	r1, [pc, #120]	; 38f90 <__assert_fail@plt+0x268a4>
   38f14:	ldrne	r0, [pc, #124]	; 38f98 <__assert_fail@plt+0x268ac>
   38f18:	bne	38e88 <__assert_fail@plt+0x2679c>
   38f1c:	ldr	r3, [sp, #28]
   38f20:	cmp	r3, #0
   38f24:	ldrne	r3, [pc, #96]	; 38f8c <__assert_fail@plt+0x268a0>
   38f28:	movne	r2, #172	; 0xac
   38f2c:	ldrne	r1, [pc, #92]	; 38f90 <__assert_fail@plt+0x268a4>
   38f30:	ldrne	r0, [pc, #100]	; 38f9c <__assert_fail@plt+0x268b0>
   38f34:	bne	38e88 <__assert_fail@plt+0x2679c>
   38f38:	mov	r3, #1
   38f3c:	mov	r0, r5
   38f40:	strb	r3, [sp, #24]
   38f44:	bl	12134 <mbsinit@plt>
   38f48:	cmp	r0, #0
   38f4c:	movne	r3, #0
   38f50:	strbne	r3, [sp]
   38f54:	b	38e44 <__assert_fail@plt+0x26758>
   38f58:	mov	r0, r4
   38f5c:	bl	123bc <strlen@plt>
   38f60:	mov	r4, r0
   38f64:	b	38e5c <__assert_fail@plt+0x26770>
   38f68:	ldr	r3, [sp, #16]
   38f6c:	ldr	r2, [sp, #20]
   38f70:	add	r4, r4, #1
   38f74:	add	r3, r3, r2
   38f78:	str	r3, [sp, #16]
   38f7c:	mov	r3, #0
   38f80:	strb	r3, [sp, #12]
   38f84:	b	38e04 <__assert_fail@plt+0x26718>
   38f88:	andeq	pc, r3, ip, lsl r5	; <UNPREDICTABLE>
   38f8c:	andeq	pc, r3, ip, lsr r5	; <UNPREDICTABLE>
   38f90:	ldrdeq	sp, [r3], -sp	; <UNPREDICTABLE>
   38f94:	andeq	sp, r3, r7, ror #29
   38f98:	strdeq	sp, [r3], -lr
   38f9c:	andeq	sp, r3, r5, lsl pc
   38fa0:	orr	r2, r2, #540672	; 0x84000
   38fa4:	push	{r4, r5, r6, r7, r8, lr}
   38fa8:	orr	r2, r2, #2304	; 0x900
   38fac:	mov	r5, r3
   38fb0:	bl	23648 <__assert_fail@plt+0x10f5c>
   38fb4:	subs	r6, r0, #0
   38fb8:	movlt	r4, #0
   38fbc:	blt	38fe8 <__assert_fail@plt+0x268fc>
   38fc0:	bl	125a8 <fdopendir@plt>
   38fc4:	subs	r4, r0, #0
   38fc8:	strne	r6, [r5]
   38fcc:	bne	38fe8 <__assert_fail@plt+0x268fc>
   38fd0:	bl	12404 <__errno_location@plt>
   38fd4:	ldr	r7, [r0]
   38fd8:	mov	r5, r0
   38fdc:	mov	r0, r6
   38fe0:	bl	126a4 <close@plt>
   38fe4:	str	r7, [r5]
   38fe8:	mov	r0, r4
   38fec:	pop	{r4, r5, r6, r7, r8, pc}
   38ff0:	push	{r4, r5, r6, lr}
   38ff4:	mov	r5, r1
   38ff8:	mov	r1, #0
   38ffc:	mov	r4, r2
   39000:	bl	12518 <setlocale@plt>
   39004:	subs	r6, r0, #0
   39008:	bne	3901c <__assert_fail@plt+0x26930>
   3900c:	cmp	r4, #0
   39010:	strbne	r6, [r5]
   39014:	mov	r0, #22
   39018:	pop	{r4, r5, r6, pc}
   3901c:	bl	123bc <strlen@plt>
   39020:	cmp	r4, r0
   39024:	bls	39040 <__assert_fail@plt+0x26954>
   39028:	add	r2, r0, #1
   3902c:	mov	r1, r6
   39030:	mov	r0, r5
   39034:	bl	120f8 <memcpy@plt>
   39038:	mov	r0, #0
   3903c:	pop	{r4, r5, r6, pc}
   39040:	cmp	r4, #0
   39044:	beq	39064 <__assert_fail@plt+0x26978>
   39048:	sub	r4, r4, #1
   3904c:	mov	r2, r4
   39050:	mov	r1, r6
   39054:	mov	r0, r5
   39058:	bl	120f8 <memcpy@plt>
   3905c:	mov	r3, #0
   39060:	strb	r3, [r5, r4]
   39064:	mov	r0, #34	; 0x22
   39068:	pop	{r4, r5, r6, pc}
   3906c:	mov	r1, #0
   39070:	b	12518 <setlocale@plt>
   39074:	subs	r2, r1, #1
   39078:	bxeq	lr
   3907c:	bcc	39254 <__assert_fail@plt+0x26b68>
   39080:	cmp	r0, r1
   39084:	bls	39238 <__assert_fail@plt+0x26b4c>
   39088:	tst	r1, r2
   3908c:	beq	39244 <__assert_fail@plt+0x26b58>
   39090:	clz	r3, r0
   39094:	clz	r2, r1
   39098:	sub	r3, r2, r3
   3909c:	rsbs	r3, r3, #31
   390a0:	addne	r3, r3, r3, lsl #1
   390a4:	mov	r2, #0
   390a8:	addne	pc, pc, r3, lsl #2
   390ac:	nop			; (mov r0, r0)
   390b0:	cmp	r0, r1, lsl #31
   390b4:	adc	r2, r2, r2
   390b8:	subcs	r0, r0, r1, lsl #31
   390bc:	cmp	r0, r1, lsl #30
   390c0:	adc	r2, r2, r2
   390c4:	subcs	r0, r0, r1, lsl #30
   390c8:	cmp	r0, r1, lsl #29
   390cc:	adc	r2, r2, r2
   390d0:	subcs	r0, r0, r1, lsl #29
   390d4:	cmp	r0, r1, lsl #28
   390d8:	adc	r2, r2, r2
   390dc:	subcs	r0, r0, r1, lsl #28
   390e0:	cmp	r0, r1, lsl #27
   390e4:	adc	r2, r2, r2
   390e8:	subcs	r0, r0, r1, lsl #27
   390ec:	cmp	r0, r1, lsl #26
   390f0:	adc	r2, r2, r2
   390f4:	subcs	r0, r0, r1, lsl #26
   390f8:	cmp	r0, r1, lsl #25
   390fc:	adc	r2, r2, r2
   39100:	subcs	r0, r0, r1, lsl #25
   39104:	cmp	r0, r1, lsl #24
   39108:	adc	r2, r2, r2
   3910c:	subcs	r0, r0, r1, lsl #24
   39110:	cmp	r0, r1, lsl #23
   39114:	adc	r2, r2, r2
   39118:	subcs	r0, r0, r1, lsl #23
   3911c:	cmp	r0, r1, lsl #22
   39120:	adc	r2, r2, r2
   39124:	subcs	r0, r0, r1, lsl #22
   39128:	cmp	r0, r1, lsl #21
   3912c:	adc	r2, r2, r2
   39130:	subcs	r0, r0, r1, lsl #21
   39134:	cmp	r0, r1, lsl #20
   39138:	adc	r2, r2, r2
   3913c:	subcs	r0, r0, r1, lsl #20
   39140:	cmp	r0, r1, lsl #19
   39144:	adc	r2, r2, r2
   39148:	subcs	r0, r0, r1, lsl #19
   3914c:	cmp	r0, r1, lsl #18
   39150:	adc	r2, r2, r2
   39154:	subcs	r0, r0, r1, lsl #18
   39158:	cmp	r0, r1, lsl #17
   3915c:	adc	r2, r2, r2
   39160:	subcs	r0, r0, r1, lsl #17
   39164:	cmp	r0, r1, lsl #16
   39168:	adc	r2, r2, r2
   3916c:	subcs	r0, r0, r1, lsl #16
   39170:	cmp	r0, r1, lsl #15
   39174:	adc	r2, r2, r2
   39178:	subcs	r0, r0, r1, lsl #15
   3917c:	cmp	r0, r1, lsl #14
   39180:	adc	r2, r2, r2
   39184:	subcs	r0, r0, r1, lsl #14
   39188:	cmp	r0, r1, lsl #13
   3918c:	adc	r2, r2, r2
   39190:	subcs	r0, r0, r1, lsl #13
   39194:	cmp	r0, r1, lsl #12
   39198:	adc	r2, r2, r2
   3919c:	subcs	r0, r0, r1, lsl #12
   391a0:	cmp	r0, r1, lsl #11
   391a4:	adc	r2, r2, r2
   391a8:	subcs	r0, r0, r1, lsl #11
   391ac:	cmp	r0, r1, lsl #10
   391b0:	adc	r2, r2, r2
   391b4:	subcs	r0, r0, r1, lsl #10
   391b8:	cmp	r0, r1, lsl #9
   391bc:	adc	r2, r2, r2
   391c0:	subcs	r0, r0, r1, lsl #9
   391c4:	cmp	r0, r1, lsl #8
   391c8:	adc	r2, r2, r2
   391cc:	subcs	r0, r0, r1, lsl #8
   391d0:	cmp	r0, r1, lsl #7
   391d4:	adc	r2, r2, r2
   391d8:	subcs	r0, r0, r1, lsl #7
   391dc:	cmp	r0, r1, lsl #6
   391e0:	adc	r2, r2, r2
   391e4:	subcs	r0, r0, r1, lsl #6
   391e8:	cmp	r0, r1, lsl #5
   391ec:	adc	r2, r2, r2
   391f0:	subcs	r0, r0, r1, lsl #5
   391f4:	cmp	r0, r1, lsl #4
   391f8:	adc	r2, r2, r2
   391fc:	subcs	r0, r0, r1, lsl #4
   39200:	cmp	r0, r1, lsl #3
   39204:	adc	r2, r2, r2
   39208:	subcs	r0, r0, r1, lsl #3
   3920c:	cmp	r0, r1, lsl #2
   39210:	adc	r2, r2, r2
   39214:	subcs	r0, r0, r1, lsl #2
   39218:	cmp	r0, r1, lsl #1
   3921c:	adc	r2, r2, r2
   39220:	subcs	r0, r0, r1, lsl #1
   39224:	cmp	r0, r1
   39228:	adc	r2, r2, r2
   3922c:	subcs	r0, r0, r1
   39230:	mov	r0, r2
   39234:	bx	lr
   39238:	moveq	r0, #1
   3923c:	movne	r0, #0
   39240:	bx	lr
   39244:	clz	r2, r1
   39248:	rsb	r2, r2, #31
   3924c:	lsr	r0, r0, r2
   39250:	bx	lr
   39254:	cmp	r0, #0
   39258:	mvnne	r0, #0
   3925c:	b	39988 <__assert_fail@plt+0x2729c>
   39260:	cmp	r1, #0
   39264:	beq	39254 <__assert_fail@plt+0x26b68>
   39268:	push	{r0, r1, lr}
   3926c:	bl	39074 <__assert_fail@plt+0x26988>
   39270:	pop	{r1, r2, lr}
   39274:	mul	r3, r2, r0
   39278:	sub	r1, r1, r3
   3927c:	bx	lr
   39280:	cmp	r1, #0
   39284:	beq	39490 <__assert_fail@plt+0x26da4>
   39288:	eor	ip, r0, r1
   3928c:	rsbmi	r1, r1, #0
   39290:	subs	r2, r1, #1
   39294:	beq	3945c <__assert_fail@plt+0x26d70>
   39298:	movs	r3, r0
   3929c:	rsbmi	r3, r0, #0
   392a0:	cmp	r3, r1
   392a4:	bls	39468 <__assert_fail@plt+0x26d7c>
   392a8:	tst	r1, r2
   392ac:	beq	39478 <__assert_fail@plt+0x26d8c>
   392b0:	clz	r2, r3
   392b4:	clz	r0, r1
   392b8:	sub	r2, r0, r2
   392bc:	rsbs	r2, r2, #31
   392c0:	addne	r2, r2, r2, lsl #1
   392c4:	mov	r0, #0
   392c8:	addne	pc, pc, r2, lsl #2
   392cc:	nop			; (mov r0, r0)
   392d0:	cmp	r3, r1, lsl #31
   392d4:	adc	r0, r0, r0
   392d8:	subcs	r3, r3, r1, lsl #31
   392dc:	cmp	r3, r1, lsl #30
   392e0:	adc	r0, r0, r0
   392e4:	subcs	r3, r3, r1, lsl #30
   392e8:	cmp	r3, r1, lsl #29
   392ec:	adc	r0, r0, r0
   392f0:	subcs	r3, r3, r1, lsl #29
   392f4:	cmp	r3, r1, lsl #28
   392f8:	adc	r0, r0, r0
   392fc:	subcs	r3, r3, r1, lsl #28
   39300:	cmp	r3, r1, lsl #27
   39304:	adc	r0, r0, r0
   39308:	subcs	r3, r3, r1, lsl #27
   3930c:	cmp	r3, r1, lsl #26
   39310:	adc	r0, r0, r0
   39314:	subcs	r3, r3, r1, lsl #26
   39318:	cmp	r3, r1, lsl #25
   3931c:	adc	r0, r0, r0
   39320:	subcs	r3, r3, r1, lsl #25
   39324:	cmp	r3, r1, lsl #24
   39328:	adc	r0, r0, r0
   3932c:	subcs	r3, r3, r1, lsl #24
   39330:	cmp	r3, r1, lsl #23
   39334:	adc	r0, r0, r0
   39338:	subcs	r3, r3, r1, lsl #23
   3933c:	cmp	r3, r1, lsl #22
   39340:	adc	r0, r0, r0
   39344:	subcs	r3, r3, r1, lsl #22
   39348:	cmp	r3, r1, lsl #21
   3934c:	adc	r0, r0, r0
   39350:	subcs	r3, r3, r1, lsl #21
   39354:	cmp	r3, r1, lsl #20
   39358:	adc	r0, r0, r0
   3935c:	subcs	r3, r3, r1, lsl #20
   39360:	cmp	r3, r1, lsl #19
   39364:	adc	r0, r0, r0
   39368:	subcs	r3, r3, r1, lsl #19
   3936c:	cmp	r3, r1, lsl #18
   39370:	adc	r0, r0, r0
   39374:	subcs	r3, r3, r1, lsl #18
   39378:	cmp	r3, r1, lsl #17
   3937c:	adc	r0, r0, r0
   39380:	subcs	r3, r3, r1, lsl #17
   39384:	cmp	r3, r1, lsl #16
   39388:	adc	r0, r0, r0
   3938c:	subcs	r3, r3, r1, lsl #16
   39390:	cmp	r3, r1, lsl #15
   39394:	adc	r0, r0, r0
   39398:	subcs	r3, r3, r1, lsl #15
   3939c:	cmp	r3, r1, lsl #14
   393a0:	adc	r0, r0, r0
   393a4:	subcs	r3, r3, r1, lsl #14
   393a8:	cmp	r3, r1, lsl #13
   393ac:	adc	r0, r0, r0
   393b0:	subcs	r3, r3, r1, lsl #13
   393b4:	cmp	r3, r1, lsl #12
   393b8:	adc	r0, r0, r0
   393bc:	subcs	r3, r3, r1, lsl #12
   393c0:	cmp	r3, r1, lsl #11
   393c4:	adc	r0, r0, r0
   393c8:	subcs	r3, r3, r1, lsl #11
   393cc:	cmp	r3, r1, lsl #10
   393d0:	adc	r0, r0, r0
   393d4:	subcs	r3, r3, r1, lsl #10
   393d8:	cmp	r3, r1, lsl #9
   393dc:	adc	r0, r0, r0
   393e0:	subcs	r3, r3, r1, lsl #9
   393e4:	cmp	r3, r1, lsl #8
   393e8:	adc	r0, r0, r0
   393ec:	subcs	r3, r3, r1, lsl #8
   393f0:	cmp	r3, r1, lsl #7
   393f4:	adc	r0, r0, r0
   393f8:	subcs	r3, r3, r1, lsl #7
   393fc:	cmp	r3, r1, lsl #6
   39400:	adc	r0, r0, r0
   39404:	subcs	r3, r3, r1, lsl #6
   39408:	cmp	r3, r1, lsl #5
   3940c:	adc	r0, r0, r0
   39410:	subcs	r3, r3, r1, lsl #5
   39414:	cmp	r3, r1, lsl #4
   39418:	adc	r0, r0, r0
   3941c:	subcs	r3, r3, r1, lsl #4
   39420:	cmp	r3, r1, lsl #3
   39424:	adc	r0, r0, r0
   39428:	subcs	r3, r3, r1, lsl #3
   3942c:	cmp	r3, r1, lsl #2
   39430:	adc	r0, r0, r0
   39434:	subcs	r3, r3, r1, lsl #2
   39438:	cmp	r3, r1, lsl #1
   3943c:	adc	r0, r0, r0
   39440:	subcs	r3, r3, r1, lsl #1
   39444:	cmp	r3, r1
   39448:	adc	r0, r0, r0
   3944c:	subcs	r3, r3, r1
   39450:	cmp	ip, #0
   39454:	rsbmi	r0, r0, #0
   39458:	bx	lr
   3945c:	teq	ip, r0
   39460:	rsbmi	r0, r0, #0
   39464:	bx	lr
   39468:	movcc	r0, #0
   3946c:	asreq	r0, ip, #31
   39470:	orreq	r0, r0, #1
   39474:	bx	lr
   39478:	clz	r2, r1
   3947c:	rsb	r2, r2, #31
   39480:	cmp	ip, #0
   39484:	lsr	r0, r3, r2
   39488:	rsbmi	r0, r0, #0
   3948c:	bx	lr
   39490:	cmp	r0, #0
   39494:	mvngt	r0, #-2147483648	; 0x80000000
   39498:	movlt	r0, #-2147483648	; 0x80000000
   3949c:	b	39988 <__assert_fail@plt+0x2729c>
   394a0:	cmp	r1, #0
   394a4:	beq	39490 <__assert_fail@plt+0x26da4>
   394a8:	push	{r0, r1, lr}
   394ac:	bl	39288 <__assert_fail@plt+0x26b9c>
   394b0:	pop	{r1, r2, lr}
   394b4:	mul	r3, r2, r0
   394b8:	sub	r1, r1, r3
   394bc:	bx	lr
   394c0:	eor	r1, r1, #-2147483648	; 0x80000000
   394c4:	b	394cc <__assert_fail@plt+0x26de0>
   394c8:	eor	r3, r3, #-2147483648	; 0x80000000
   394cc:	push	{r4, r5, lr}
   394d0:	lsl	r4, r1, #1
   394d4:	lsl	r5, r3, #1
   394d8:	teq	r4, r5
   394dc:	teqeq	r0, r2
   394e0:	orrsne	ip, r4, r0
   394e4:	orrsne	ip, r5, r2
   394e8:	mvnsne	ip, r4, asr #21
   394ec:	mvnsne	ip, r5, asr #21
   394f0:	beq	396dc <__assert_fail@plt+0x26ff0>
   394f4:	lsr	r4, r4, #21
   394f8:	rsbs	r5, r4, r5, lsr #21
   394fc:	rsblt	r5, r5, #0
   39500:	ble	39520 <__assert_fail@plt+0x26e34>
   39504:	add	r4, r4, r5
   39508:	eor	r2, r0, r2
   3950c:	eor	r3, r1, r3
   39510:	eor	r0, r2, r0
   39514:	eor	r1, r3, r1
   39518:	eor	r2, r0, r2
   3951c:	eor	r3, r1, r3
   39520:	cmp	r5, #54	; 0x36
   39524:	pophi	{r4, r5, pc}
   39528:	tst	r1, #-2147483648	; 0x80000000
   3952c:	lsl	r1, r1, #12
   39530:	mov	ip, #1048576	; 0x100000
   39534:	orr	r1, ip, r1, lsr #12
   39538:	beq	39544 <__assert_fail@plt+0x26e58>
   3953c:	rsbs	r0, r0, #0
   39540:	rsc	r1, r1, #0
   39544:	tst	r3, #-2147483648	; 0x80000000
   39548:	lsl	r3, r3, #12
   3954c:	orr	r3, ip, r3, lsr #12
   39550:	beq	3955c <__assert_fail@plt+0x26e70>
   39554:	rsbs	r2, r2, #0
   39558:	rsc	r3, r3, #0
   3955c:	teq	r4, r5
   39560:	beq	396c4 <__assert_fail@plt+0x26fd8>
   39564:	sub	r4, r4, #1
   39568:	rsbs	lr, r5, #32
   3956c:	blt	39588 <__assert_fail@plt+0x26e9c>
   39570:	lsl	ip, r2, lr
   39574:	adds	r0, r0, r2, lsr r5
   39578:	adc	r1, r1, #0
   3957c:	adds	r0, r0, r3, lsl lr
   39580:	adcs	r1, r1, r3, asr r5
   39584:	b	395a4 <__assert_fail@plt+0x26eb8>
   39588:	sub	r5, r5, #32
   3958c:	add	lr, lr, #32
   39590:	cmp	r2, #1
   39594:	lsl	ip, r3, lr
   39598:	orrcs	ip, ip, #2
   3959c:	adds	r0, r0, r3, asr r5
   395a0:	adcs	r1, r1, r3, asr #31
   395a4:	and	r5, r1, #-2147483648	; 0x80000000
   395a8:	bpl	395b8 <__assert_fail@plt+0x26ecc>
   395ac:	rsbs	ip, ip, #0
   395b0:	rscs	r0, r0, #0
   395b4:	rsc	r1, r1, #0
   395b8:	cmp	r1, #1048576	; 0x100000
   395bc:	bcc	395fc <__assert_fail@plt+0x26f10>
   395c0:	cmp	r1, #2097152	; 0x200000
   395c4:	bcc	395e4 <__assert_fail@plt+0x26ef8>
   395c8:	lsrs	r1, r1, #1
   395cc:	rrxs	r0, r0
   395d0:	rrx	ip, ip
   395d4:	add	r4, r4, #1
   395d8:	lsl	r2, r4, #21
   395dc:	cmn	r2, #4194304	; 0x400000
   395e0:	bcs	3973c <__assert_fail@plt+0x27050>
   395e4:	cmp	ip, #-2147483648	; 0x80000000
   395e8:	lsrseq	ip, r0, #1
   395ec:	adcs	r0, r0, #0
   395f0:	adc	r1, r1, r4, lsl #20
   395f4:	orr	r1, r1, r5
   395f8:	pop	{r4, r5, pc}
   395fc:	lsls	ip, ip, #1
   39600:	adcs	r0, r0, r0
   39604:	adc	r1, r1, r1
   39608:	tst	r1, #1048576	; 0x100000
   3960c:	sub	r4, r4, #1
   39610:	bne	395e4 <__assert_fail@plt+0x26ef8>
   39614:	teq	r1, #0
   39618:	moveq	r1, r0
   3961c:	moveq	r0, #0
   39620:	clz	r3, r1
   39624:	addeq	r3, r3, #32
   39628:	sub	r3, r3, #11
   3962c:	subs	r2, r3, #32
   39630:	bge	39654 <__assert_fail@plt+0x26f68>
   39634:	adds	r2, r2, #12
   39638:	ble	39650 <__assert_fail@plt+0x26f64>
   3963c:	add	ip, r2, #20
   39640:	rsb	r2, r2, #12
   39644:	lsl	r0, r1, ip
   39648:	lsr	r1, r1, r2
   3964c:	b	39664 <__assert_fail@plt+0x26f78>
   39650:	add	r2, r2, #20
   39654:	rsble	ip, r2, #32
   39658:	lsl	r1, r1, r2
   3965c:	orrle	r1, r1, r0, lsr ip
   39660:	lslle	r0, r0, r2
   39664:	subs	r4, r4, r3
   39668:	addge	r1, r1, r4, lsl #20
   3966c:	orrge	r1, r1, r5
   39670:	popge	{r4, r5, pc}
   39674:	mvn	r4, r4
   39678:	subs	r4, r4, #31
   3967c:	bge	396b8 <__assert_fail@plt+0x26fcc>
   39680:	adds	r4, r4, #12
   39684:	bgt	396a0 <__assert_fail@plt+0x26fb4>
   39688:	add	r4, r4, #20
   3968c:	rsb	r2, r4, #32
   39690:	lsr	r0, r0, r4
   39694:	orr	r0, r0, r1, lsl r2
   39698:	orr	r1, r5, r1, lsr r4
   3969c:	pop	{r4, r5, pc}
   396a0:	rsb	r4, r4, #12
   396a4:	rsb	r2, r4, #32
   396a8:	lsr	r0, r0, r2
   396ac:	orr	r0, r0, r1, lsl r4
   396b0:	mov	r1, r5
   396b4:	pop	{r4, r5, pc}
   396b8:	lsr	r0, r1, r4
   396bc:	mov	r1, r5
   396c0:	pop	{r4, r5, pc}
   396c4:	teq	r4, #0
   396c8:	eor	r3, r3, #1048576	; 0x100000
   396cc:	eoreq	r1, r1, #1048576	; 0x100000
   396d0:	addeq	r4, r4, #1
   396d4:	subne	r5, r5, #1
   396d8:	b	39564 <__assert_fail@plt+0x26e78>
   396dc:	mvns	ip, r4, asr #21
   396e0:	mvnsne	ip, r5, asr #21
   396e4:	beq	3974c <__assert_fail@plt+0x27060>
   396e8:	teq	r4, r5
   396ec:	teqeq	r0, r2
   396f0:	beq	39704 <__assert_fail@plt+0x27018>
   396f4:	orrs	ip, r4, r0
   396f8:	moveq	r1, r3
   396fc:	moveq	r0, r2
   39700:	pop	{r4, r5, pc}
   39704:	teq	r1, r3
   39708:	movne	r1, #0
   3970c:	movne	r0, #0
   39710:	popne	{r4, r5, pc}
   39714:	lsrs	ip, r4, #21
   39718:	bne	3972c <__assert_fail@plt+0x27040>
   3971c:	lsls	r0, r0, #1
   39720:	adcs	r1, r1, r1
   39724:	orrcs	r1, r1, #-2147483648	; 0x80000000
   39728:	pop	{r4, r5, pc}
   3972c:	adds	r4, r4, #4194304	; 0x400000
   39730:	addcc	r1, r1, #1048576	; 0x100000
   39734:	popcc	{r4, r5, pc}
   39738:	and	r5, r1, #-2147483648	; 0x80000000
   3973c:	orr	r1, r5, #2130706432	; 0x7f000000
   39740:	orr	r1, r1, #15728640	; 0xf00000
   39744:	mov	r0, #0
   39748:	pop	{r4, r5, pc}
   3974c:	mvns	ip, r4, asr #21
   39750:	movne	r1, r3
   39754:	movne	r0, r2
   39758:	mvnseq	ip, r5, asr #21
   3975c:	movne	r3, r1
   39760:	movne	r2, r0
   39764:	orrs	r4, r0, r1, lsl #12
   39768:	orrseq	r5, r2, r3, lsl #12
   3976c:	teqeq	r1, r3
   39770:	orrne	r1, r1, #524288	; 0x80000
   39774:	pop	{r4, r5, pc}
   39778:	teq	r0, #0
   3977c:	moveq	r1, #0
   39780:	bxeq	lr
   39784:	push	{r4, r5, lr}
   39788:	mov	r4, #1024	; 0x400
   3978c:	add	r4, r4, #50	; 0x32
   39790:	mov	r5, #0
   39794:	mov	r1, #0
   39798:	b	39614 <__assert_fail@plt+0x26f28>
   3979c:	teq	r0, #0
   397a0:	moveq	r1, #0
   397a4:	bxeq	lr
   397a8:	push	{r4, r5, lr}
   397ac:	mov	r4, #1024	; 0x400
   397b0:	add	r4, r4, #50	; 0x32
   397b4:	ands	r5, r0, #-2147483648	; 0x80000000
   397b8:	rsbmi	r0, r0, #0
   397bc:	mov	r1, #0
   397c0:	b	39614 <__assert_fail@plt+0x26f28>
   397c4:	lsls	r2, r0, #1
   397c8:	asr	r1, r2, #3
   397cc:	rrx	r1, r1
   397d0:	lsl	r0, r2, #28
   397d4:	andsne	r3, r2, #-16777216	; 0xff000000
   397d8:	teqne	r3, #-16777216	; 0xff000000
   397dc:	eorne	r1, r1, #939524096	; 0x38000000
   397e0:	bxne	lr
   397e4:	teq	r2, #0
   397e8:	teqne	r3, #-16777216	; 0xff000000
   397ec:	bxeq	lr
   397f0:	push	{r4, r5, lr}
   397f4:	mov	r4, #896	; 0x380
   397f8:	and	r5, r1, #-2147483648	; 0x80000000
   397fc:	bic	r1, r1, #-2147483648	; 0x80000000
   39800:	b	39614 <__assert_fail@plt+0x26f28>
   39804:	orrs	r2, r0, r1
   39808:	bxeq	lr
   3980c:	push	{r4, r5, lr}
   39810:	mov	r5, #0
   39814:	b	39834 <__assert_fail@plt+0x27148>
   39818:	orrs	r2, r0, r1
   3981c:	bxeq	lr
   39820:	push	{r4, r5, lr}
   39824:	ands	r5, r1, #-2147483648	; 0x80000000
   39828:	bpl	39834 <__assert_fail@plt+0x27148>
   3982c:	rsbs	r0, r0, #0
   39830:	rsc	r1, r1, #0
   39834:	mov	r4, #1024	; 0x400
   39838:	add	r4, r4, #50	; 0x32
   3983c:	lsrs	ip, r1, #22
   39840:	beq	395b8 <__assert_fail@plt+0x26ecc>
   39844:	mov	r2, #3
   39848:	lsrs	ip, ip, #3
   3984c:	addne	r2, r2, #3
   39850:	lsrs	ip, ip, #3
   39854:	addne	r2, r2, #3
   39858:	add	r2, r2, ip, lsr #3
   3985c:	rsb	r3, r2, #32
   39860:	lsl	ip, r0, r3
   39864:	lsr	r0, r0, r2
   39868:	orr	r0, r0, r1, lsl r3
   3986c:	lsr	r1, r1, r2
   39870:	add	r4, r4, r2
   39874:	b	395b8 <__assert_fail@plt+0x26ecc>
   39878:	cmp	r3, #0
   3987c:	cmpeq	r2, #0
   39880:	bne	398a4 <__assert_fail@plt+0x271b8>
   39884:	cmp	r1, #0
   39888:	movlt	r1, #-2147483648	; 0x80000000
   3988c:	movlt	r0, #0
   39890:	blt	398a0 <__assert_fail@plt+0x271b4>
   39894:	cmpeq	r0, #0
   39898:	mvnne	r1, #-2147483648	; 0x80000000
   3989c:	mvnne	r0, #0
   398a0:	b	39988 <__assert_fail@plt+0x2729c>
   398a4:	sub	sp, sp, #8
   398a8:	push	{sp, lr}
   398ac:	cmp	r1, #0
   398b0:	blt	398d0 <__assert_fail@plt+0x271e4>
   398b4:	cmp	r3, #0
   398b8:	blt	39904 <__assert_fail@plt+0x27218>
   398bc:	bl	399e0 <__assert_fail@plt+0x272f4>
   398c0:	ldr	lr, [sp, #4]
   398c4:	add	sp, sp, #8
   398c8:	pop	{r2, r3}
   398cc:	bx	lr
   398d0:	rsbs	r0, r0, #0
   398d4:	sbc	r1, r1, r1, lsl #1
   398d8:	cmp	r3, #0
   398dc:	blt	39928 <__assert_fail@plt+0x2723c>
   398e0:	bl	399e0 <__assert_fail@plt+0x272f4>
   398e4:	ldr	lr, [sp, #4]
   398e8:	add	sp, sp, #8
   398ec:	pop	{r2, r3}
   398f0:	rsbs	r0, r0, #0
   398f4:	sbc	r1, r1, r1, lsl #1
   398f8:	rsbs	r2, r2, #0
   398fc:	sbc	r3, r3, r3, lsl #1
   39900:	bx	lr
   39904:	rsbs	r2, r2, #0
   39908:	sbc	r3, r3, r3, lsl #1
   3990c:	bl	399e0 <__assert_fail@plt+0x272f4>
   39910:	ldr	lr, [sp, #4]
   39914:	add	sp, sp, #8
   39918:	pop	{r2, r3}
   3991c:	rsbs	r0, r0, #0
   39920:	sbc	r1, r1, r1, lsl #1
   39924:	bx	lr
   39928:	rsbs	r2, r2, #0
   3992c:	sbc	r3, r3, r3, lsl #1
   39930:	bl	399e0 <__assert_fail@plt+0x272f4>
   39934:	ldr	lr, [sp, #4]
   39938:	add	sp, sp, #8
   3993c:	pop	{r2, r3}
   39940:	rsbs	r2, r2, #0
   39944:	sbc	r3, r3, r3, lsl #1
   39948:	bx	lr
   3994c:	cmp	r3, #0
   39950:	cmpeq	r2, #0
   39954:	bne	3996c <__assert_fail@plt+0x27280>
   39958:	cmp	r1, #0
   3995c:	cmpeq	r0, #0
   39960:	mvnne	r1, #0
   39964:	mvnne	r0, #0
   39968:	b	39988 <__assert_fail@plt+0x2729c>
   3996c:	sub	sp, sp, #8
   39970:	push	{sp, lr}
   39974:	bl	399e0 <__assert_fail@plt+0x272f4>
   39978:	ldr	lr, [sp, #4]
   3997c:	add	sp, sp, #8
   39980:	pop	{r2, r3}
   39984:	bx	lr
   39988:	push	{r1, lr}
   3998c:	mov	r0, #8
   39990:	bl	11fb4 <raise@plt>
   39994:	pop	{r1, pc}
   39998:	vmov	d7, r0, r1
   3999c:	vldr	d6, [pc, #44]	; 399d0 <__assert_fail@plt+0x272e4>
   399a0:	vldr	d5, [pc, #48]	; 399d8 <__assert_fail@plt+0x272ec>
   399a4:	mov	r0, #0
   399a8:	vmul.f64	d6, d7, d6
   399ac:	vcvt.u32.f64	s12, d6
   399b0:	vcvt.f64.u32	d4, s12
   399b4:	vmov	r1, s12
   399b8:	vmls.f64	d7, d4, d5
   399bc:	vcvt.u32.f64	s14, d7
   399c0:	vmov	r3, s14
   399c4:	orr	r0, r0, r3
   399c8:	bx	lr
   399cc:	nop			; (mov r0, r0)
   399d0:	andeq	r0, r0, r0
   399d4:	ldclcc	0, cr0, [r0]
   399d8:	andeq	r0, r0, r0
   399dc:	mvnsmi	r0, r0
   399e0:	cmp	r1, r3
   399e4:	push	{r4, r5, r6, r7, r8, r9, lr}
   399e8:	cmpeq	r0, r2
   399ec:	mov	r4, r0
   399f0:	mov	r5, r1
   399f4:	ldr	r9, [sp, #28]
   399f8:	movcc	r0, #0
   399fc:	movcc	r1, #0
   39a00:	bcc	39af8 <__assert_fail@plt+0x2740c>
   39a04:	cmp	r3, #0
   39a08:	clzeq	ip, r2
   39a0c:	clzne	ip, r3
   39a10:	addeq	ip, ip, #32
   39a14:	cmp	r5, #0
   39a18:	clzeq	r1, r4
   39a1c:	addeq	r1, r1, #32
   39a20:	clzne	r1, r5
   39a24:	sub	ip, ip, r1
   39a28:	sub	lr, ip, #32
   39a2c:	lsl	r7, r3, ip
   39a30:	rsb	r8, ip, #32
   39a34:	orr	r7, r7, r2, lsl lr
   39a38:	orr	r7, r7, r2, lsr r8
   39a3c:	lsl	r6, r2, ip
   39a40:	cmp	r5, r7
   39a44:	cmpeq	r4, r6
   39a48:	movcc	r0, #0
   39a4c:	movcc	r1, #0
   39a50:	bcc	39a6c <__assert_fail@plt+0x27380>
   39a54:	mov	r3, #1
   39a58:	subs	r4, r4, r6
   39a5c:	lsl	r1, r3, lr
   39a60:	lsl	r0, r3, ip
   39a64:	orr	r1, r1, r3, lsr r8
   39a68:	sbc	r5, r5, r7
   39a6c:	cmp	ip, #0
   39a70:	beq	39af8 <__assert_fail@plt+0x2740c>
   39a74:	lsrs	r3, r7, #1
   39a78:	rrx	r2, r6
   39a7c:	mov	r6, ip
   39a80:	b	39aa4 <__assert_fail@plt+0x273b8>
   39a84:	subs	r4, r4, r2
   39a88:	sbc	r5, r5, r3
   39a8c:	adds	r4, r4, r4
   39a90:	adc	r5, r5, r5
   39a94:	adds	r4, r4, #1
   39a98:	adc	r5, r5, #0
   39a9c:	subs	r6, r6, #1
   39aa0:	beq	39ac0 <__assert_fail@plt+0x273d4>
   39aa4:	cmp	r5, r3
   39aa8:	cmpeq	r4, r2
   39aac:	bcs	39a84 <__assert_fail@plt+0x27398>
   39ab0:	adds	r4, r4, r4
   39ab4:	adc	r5, r5, r5
   39ab8:	subs	r6, r6, #1
   39abc:	bne	39aa4 <__assert_fail@plt+0x273b8>
   39ac0:	lsr	r6, r4, ip
   39ac4:	lsr	r7, r5, ip
   39ac8:	orr	r6, r6, r5, lsl r8
   39acc:	adds	r2, r0, r4
   39ad0:	orr	r6, r6, r5, lsr lr
   39ad4:	adc	r3, r1, r5
   39ad8:	lsl	r1, r7, ip
   39adc:	orr	r1, r1, r6, lsl lr
   39ae0:	lsl	r0, r6, ip
   39ae4:	orr	r1, r1, r6, lsr r8
   39ae8:	subs	r0, r2, r0
   39aec:	mov	r4, r6
   39af0:	mov	r5, r7
   39af4:	sbc	r1, r3, r1
   39af8:	cmp	r9, #0
   39afc:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   39b00:	strd	r4, [r9]
   39b04:	pop	{r4, r5, r6, r7, r8, r9, pc}
   39b08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   39b0c:	mov	r7, r0
   39b10:	ldr	r6, [pc, #72]	; 39b60 <__assert_fail@plt+0x27474>
   39b14:	ldr	r5, [pc, #72]	; 39b64 <__assert_fail@plt+0x27478>
   39b18:	add	r6, pc, r6
   39b1c:	add	r5, pc, r5
   39b20:	sub	r6, r6, r5
   39b24:	mov	r8, r1
   39b28:	mov	r9, r2
   39b2c:	bl	11f40 <pthread_mutex_unlock@plt-0x20>
   39b30:	asrs	r6, r6, #2
   39b34:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   39b38:	mov	r4, #0
   39b3c:	add	r4, r4, #1
   39b40:	ldr	r3, [r5], #4
   39b44:	mov	r2, r9
   39b48:	mov	r1, r8
   39b4c:	mov	r0, r7
   39b50:	blx	r3
   39b54:	cmp	r6, r4
   39b58:	bne	39b3c <__assert_fail@plt+0x27450>
   39b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39b60:	andeq	r6, r1, r0, ror #7
   39b64:	ldrdeq	r6, [r1], -r8
   39b68:	bx	lr
   39b6c:	ldr	r3, [pc, #12]	; 39b80 <__assert_fail@plt+0x27494>
   39b70:	mov	r1, #0
   39b74:	add	r3, pc, r3
   39b78:	ldr	r2, [r3]
   39b7c:	b	12428 <__cxa_atexit@plt>
   39b80:	andeq	r6, r1, r0, lsr #14
   39b84:	mov	r2, r1
   39b88:	mov	r1, r0
   39b8c:	mov	r0, #3
   39b90:	b	12650 <__xstat64@plt>
   39b94:	mov	r2, r1
   39b98:	mov	r1, r0
   39b9c:	mov	r0, #3
   39ba0:	b	12224 <__fxstat64@plt>
   39ba4:	mov	r2, r1
   39ba8:	mov	r1, r0
   39bac:	mov	r0, #3
   39bb0:	b	126b0 <__lxstat64@plt>
   39bb4:	push	{lr}		; (str lr, [sp, #-4]!)
   39bb8:	sub	sp, sp, #12
   39bbc:	str	r3, [sp]
   39bc0:	mov	r3, r2
   39bc4:	mov	r2, r1
   39bc8:	mov	r1, r0
   39bcc:	mov	r0, #3
   39bd0:	bl	121f4 <__fxstatat64@plt>
   39bd4:	add	sp, sp, #12
   39bd8:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00039bdc <.fini>:
   39bdc:	push	{r3, lr}
   39be0:	pop	{r3, pc}
