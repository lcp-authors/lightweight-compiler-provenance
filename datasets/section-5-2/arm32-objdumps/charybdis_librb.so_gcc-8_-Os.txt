
../repos/charybdis/librb/src/.libs/librb.so:     file format elf32-littlearm


Disassembly of section .init:

00004318 <_init>:
    4318:	push	{r3, lr}
    431c:	bl	4cf8 <call_weak_fn>
    4320:	pop	{r3, pc}

Disassembly of section .plt:

00004324 <.plt>:
    4324:	push	{lr}		; (str lr, [sp, #-4]!)
    4328:	ldr	lr, [pc, #4]	; 4334 <.plt+0x10>
    432c:	add	lr, pc, lr
    4330:	ldr	pc, [lr, #8]!
    4334:	.word	0x00020ccc

00004338 <rb_helper_run@plt>:
    4338:	add	ip, pc, #0, 12
    433c:	add	ip, ip, #32, 20	; 0x20000
    4340:	ldr	pc, [ip, #3276]!	; 0xccc

00004344 <TLS_method@plt>:
    4344:	add	ip, pc, #0, 12
    4348:	add	ip, ip, #32, 20	; 0x20000
    434c:	ldr	pc, [ip, #3268]!	; 0xcc4

00004350 <open@plt>:
    4350:	add	ip, pc, #0, 12
    4354:	add	ip, ip, #32, 20	; 0x20000
    4358:	ldr	pc, [ip, #3260]!	; 0xcbc

0000435c <rb_init_netio@plt>:
    435c:	add	ip, pc, #0, 12
    4360:	add	ip, ip, #32, 20	; 0x20000
    4364:	ldr	pc, [ip, #3252]!	; 0xcb4

00004368 <sigemptyset@plt>:
    4368:	add	ip, pc, #0, 12
    436c:	add	ip, ip, #32, 20	; 0x20000
    4370:	ldr	pc, [ip, #3244]!	; 0xcac

00004374 <strerror@plt>:
    4374:	add	ip, pc, #0, 12
    4378:	add	ip, ip, #32, 20	; 0x20000
    437c:	ldr	pc, [ip, #3236]!	; 0xca4

00004380 <rb_radixtree_elem_delete@plt>:
    4380:	add	ip, pc, #0, 12
    4384:	add	ip, ip, #32, 20	; 0x20000
    4388:	ldr	pc, [ip, #3228]!	; 0xc9c

0000438c <getdtablesize@plt>:
    438c:	add	ip, pc, #0, 12
    4390:	add	ip, ip, #32, 20	; 0x20000
    4394:	ldr	pc, [ip, #3220]!	; 0xc94

00004398 <abort@plt>:
    4398:	add	ip, pc, #0, 12
    439c:	add	ip, ip, #32, 20	; 0x20000
    43a0:	ldr	pc, [ip, #3212]!	; 0xc8c

000043a4 <connect@plt>:
    43a4:	add	ip, pc, #0, 12
    43a8:	add	ip, ip, #32, 20	; 0x20000
    43ac:	ldr	pc, [ip, #3204]!	; 0xc84

000043b0 <rb_ignore_errno@plt>:
    43b0:	add	ip, pc, #0, 12
    43b4:	add	ip, ip, #32, 20	; 0x20000
    43b8:	ldr	pc, [ip, #3196]!	; 0xc7c

000043bc <rb_settimeout@plt>:
    43bc:	add	ip, pc, #0, 12
    43c0:	add	ip, ip, #32, 20	; 0x20000
    43c4:	ldr	pc, [ip, #3188]!	; 0xc74

000043c8 <SSL_CTX_set_cipher_list@plt>:
    43c8:	add	ip, pc, #0, 12
    43cc:	add	ip, ip, #32, 20	; 0x20000
    43d0:	ldr	pc, [ip, #3180]!	; 0xc6c

000043d4 <ERR_get_error@plt>:
    43d4:	add	ip, pc, #0, 12
    43d8:	add	ip, ip, #32, 20	; 0x20000
    43dc:	ldr	pc, [ip, #3172]!	; 0xc64

000043e0 <rb_radixtree_foreach_start@plt>:
    43e0:	add	ip, pc, #0, 12
    43e4:	add	ip, ip, #32, 20	; 0x20000
    43e8:	ldr	pc, [ip, #3164]!	; 0xc5c

000043ec <strcasestr@plt>:
    43ec:	add	ip, pc, #0, 12
    43f0:	add	ip, ip, #32, 20	; 0x20000
    43f4:	ldr	pc, [ip, #3156]!	; 0xc54

000043f8 <rb_connect_tcp@plt>:
    43f8:	add	ip, pc, #0, 12
    43fc:	add	ip, ip, #32, 20	; 0x20000
    4400:	ldr	pc, [ip, #3148]!	; 0xc4c

00004404 <RAND_load_file@plt>:
    4404:	add	ip, pc, #0, 12
    4408:	add	ip, ip, #32, 20	; 0x20000
    440c:	ldr	pc, [ip, #3140]!	; 0xc44

00004410 <signalfd@plt>:
    4410:	add	ip, pc, #0, 12
    4414:	add	ip, ip, #32, 20	; 0x20000
    4418:	ldr	pc, [ip, #3132]!	; 0xc3c

0000441c <rb_radixtree_foreach_next@plt>:
    441c:	add	ip, pc, #0, 12
    4420:	add	ip, ip, #32, 20	; 0x20000
    4424:	ldr	pc, [ip, #3124]!	; 0xc34

00004428 <memcmp@plt>:
    4428:	add	ip, pc, #0, 12
    442c:	add	ip, ip, #32, 20	; 0x20000
    4430:	ldr	pc, [ip, #3116]!	; 0xc2c

00004434 <SSL_CTX_free@plt>:
    4434:	add	ip, pc, #0, 12
    4438:	add	ip, ip, #32, 20	; 0x20000
    443c:	ldr	pc, [ip, #3108]!	; 0xc24

00004440 <rb_getmaxconnect@plt>:
    4440:	add	ip, pc, #0, 12
    4444:	add	ip, ip, #32, 20	; 0x20000
    4448:	ldr	pc, [ip, #3100]!	; 0xc1c

0000444c <sigwaitinfo@plt>:
    444c:	add	ip, pc, #0, 12
    4450:	add	ip, ip, #32, 20	; 0x20000
    4454:	ldr	pc, [ip, #3092]!	; 0xc14

00004458 <__libc_current_sigrtmin@plt>:
    4458:	add	ip, pc, #0, 12
    445c:	add	ip, ip, #32, 20	; 0x20000
    4460:	ldr	pc, [ip, #3084]!	; 0xc0c

00004464 <__xstat@plt>:
    4464:	add	ip, pc, #0, 12
    4468:	add	ip, ip, #32, 20	; 0x20000
    446c:	ldr	pc, [ip, #3076]!	; 0xc04

00004470 <rb_event_delete@plt>:
    4470:	add	ip, pc, #0, 12
    4474:	add	ip, ip, #32, 20	; 0x20000
    4478:	ldr	pc, [ip, #3068]!	; 0xbfc

0000447c <rb_setselect@plt>:
    447c:	add	ip, pc, #0, 12
    4480:	add	ip, ip, #32, 20	; 0x20000
    4484:	ldr	pc, [ip, #3060]!	; 0xbf4

00004488 <rb_fd_ssl@plt>:
    4488:	add	ip, pc, #0, 12
    448c:	add	ip, ip, #32, 20	; 0x20000
    4490:	ldr	pc, [ip, #3052]!	; 0xbec

00004494 <sigtimedwait@plt>:
    4494:	add	ip, pc, #0, 12
    4498:	add	ip, ip, #32, 20	; 0x20000
    449c:	ldr	pc, [ip, #3044]!	; 0xbe4

000044a0 <rb_setenv@plt>:
    44a0:	add	ip, pc, #0, 12
    44a4:	add	ip, ip, #32, 20	; 0x20000
    44a8:	ldr	pc, [ip, #3036]!	; 0xbdc

000044ac <signal@plt>:
    44ac:	add	ip, pc, #0, 12
    44b0:	add	ip, ip, #32, 20	; 0x20000
    44b4:	ldr	pc, [ip, #3028]!	; 0xbd4

000044b8 <rb_get_fd@plt>:
    44b8:	add	ip, pc, #0, 12
    44bc:	add	ip, ip, #32, 20	; 0x20000
    44c0:	ldr	pc, [ip, #3020]!	; 0xbcc

000044c4 <epoll_create@plt>:
    44c4:	add	ip, pc, #0, 12
    44c8:	add	ip, ip, #32, 20	; 0x20000
    44cc:	ldr	pc, [ip, #3012]!	; 0xbc4

000044d0 <rb_clear_patricia@plt>:
    44d0:	add	ip, pc, #0, 12
    44d4:	add	ip, ip, #32, 20	; 0x20000
    44d8:	ldr	pc, [ip, #3004]!	; 0xbbc

000044dc <__gmon_start__@plt>:
    44dc:	add	ip, pc, #0, 12
    44e0:	add	ip, ip, #32, 20	; 0x20000
    44e4:	ldr	pc, [ip, #2996]!	; 0xbb4

000044e8 <SSL_CTX_clear_options@plt>:
    44e8:	add	ip, pc, #0, 12
    44ec:	add	ip, ip, #32, 20	; 0x20000
    44f0:	ldr	pc, [ip, #2988]!	; 0xbac

000044f4 <SSL_get_current_cipher@plt>:
    44f4:	add	ip, pc, #0, 12
    44f8:	add	ip, ip, #32, 20	; 0x20000
    44fc:	ldr	pc, [ip, #2980]!	; 0xba4

00004500 <timer_create@plt>:
    4500:	add	ip, pc, #0, 12
    4504:	add	ip, ip, #32, 20	; 0x20000
    4508:	ldr	pc, [ip, #2972]!	; 0xb9c

0000450c <X509_get_X509_PUBKEY@plt>:
    450c:	add	ip, pc, #0, 12
    4510:	add	ip, ip, #32, 20	; 0x20000
    4514:	ldr	pc, [ip, #2964]!	; 0xb94

00004518 <rb_select@plt>:
    4518:	add	ip, pc, #0, 12
    451c:	add	ip, ip, #32, 20	; 0x20000
    4520:	ldr	pc, [ip, #2956]!	; 0xb8c

00004524 <rb_patricia_search_best@plt>:
    4524:	add	ip, pc, #0, 12
    4528:	add	ip, ip, #32, 20	; 0x20000
    452c:	ldr	pc, [ip, #2948]!	; 0xb84

00004530 <vsnprintf@plt>:
    4530:	add	ip, pc, #0, 12
    4534:	add	ip, ip, #32, 20	; 0x20000
    4538:	ldr	pc, [ip, #2940]!	; 0xb7c

0000453c <socketpair@plt>:
    453c:	add	ip, pc, #0, 12
    4540:	add	ip, ip, #32, 20	; 0x20000
    4544:	ldr	pc, [ip, #2932]!	; 0xb74

00004548 <strncpy@plt>:
    4548:	add	ip, pc, #0, 12
    454c:	add	ip, ip, #32, 20	; 0x20000
    4550:	ldr	pc, [ip, #2924]!	; 0xb6c

00004554 <fclose@plt>:
    4554:	add	ip, pc, #0, 12
    4558:	add	ip, ip, #32, 20	; 0x20000
    455c:	ldr	pc, [ip, #2916]!	; 0xb64

00004560 <recv@plt>:
    4560:	add	ip, pc, #0, 12
    4564:	add	ip, ip, #32, 20	; 0x20000
    4568:	ldr	pc, [ip, #2908]!	; 0xb5c

0000456c <getenv@plt>:
    456c:	add	ip, pc, #0, 12
    4570:	add	ip, ip, #32, 20	; 0x20000
    4574:	ldr	pc, [ip, #2900]!	; 0xb54

00004578 <ERR_error_string_n@plt>:
    4578:	add	ip, pc, #0, 12
    457c:	add	ip, ip, #32, 20	; 0x20000
    4580:	ldr	pc, [ip, #2892]!	; 0xb4c

00004584 <strchr@plt>:
    4584:	add	ip, pc, #0, 12
    4588:	add	ip, ip, #32, 20	; 0x20000
    458c:	ldr	pc, [ip, #2884]!	; 0xb44

00004590 <rb_gettimeofday@plt>:
    4590:	add	ip, pc, #0, 12
    4594:	add	ip, ip, #32, 20	; 0x20000
    4598:	ldr	pc, [ip, #2876]!	; 0xb3c

0000459c <strcasecmp@plt>:
    459c:	add	ip, pc, #0, 12
    45a0:	add	ip, ip, #32, 20	; 0x20000
    45a4:	ldr	pc, [ip, #2868]!	; 0xb34

000045a8 <rb_helper_restart@plt>:
    45a8:	add	ip, pc, #0, 12
    45ac:	add	ip, ip, #32, 20	; 0x20000
    45b0:	ldr	pc, [ip, #2860]!	; 0xb2c

000045b4 <listen@plt>:
    45b4:	add	ip, pc, #0, 12
    45b8:	add	ip, ip, #32, 20	; 0x20000
    45bc:	ldr	pc, [ip, #2852]!	; 0xb24

000045c0 <calloc@plt>:
    45c0:	add	ip, pc, #0, 12
    45c4:	add	ip, ip, #32, 20	; 0x20000
    45c8:	ldr	pc, [ip, #2844]!	; 0xb1c

000045cc <SSL_write@plt>:
    45cc:	add	ip, pc, #0, 12
    45d0:	add	ip, ip, #32, 20	; 0x20000
    45d4:	ldr	pc, [ip, #2836]!	; 0xb14

000045d8 <rb_event_init@plt>:
    45d8:	add	ip, pc, #0, 12
    45dc:	add	ip, ip, #32, 20	; 0x20000
    45e0:	ldr	pc, [ip, #2828]!	; 0xb0c

000045e4 <fopen@plt>:
    45e4:	add	ip, pc, #0, 12
    45e8:	add	ip, ip, #32, 20	; 0x20000
    45ec:	ldr	pc, [ip, #2820]!	; 0xb04

000045f0 <rb_set_nb@plt>:
    45f0:	add	ip, pc, #0, 12
    45f4:	add	ip, ip, #32, 20	; 0x20000
    45f8:	ldr	pc, [ip, #2812]!	; 0xafc

000045fc <memset@plt>:
    45fc:	add	ip, pc, #0, 12
    4600:	add	ip, ip, #32, 20	; 0x20000
    4604:	ldr	pc, [ip, #2804]!	; 0xaf4

00004608 <rb_inet_pton@plt>:
    4608:	add	ip, pc, #0, 12
    460c:	add	ip, ip, #32, 20	; 0x20000
    4610:	ldr	pc, [ip, #2796]!	; 0xaec

00004614 <rb_radixtree_stats@plt>:
    4614:	add	ip, pc, #0, 12
    4618:	add	ip, ip, #32, 20	; 0x20000
    461c:	ldr	pc, [ip, #2788]!	; 0xae4

00004620 <strrchr@plt>:
    4620:	add	ip, pc, #0, 12
    4624:	add	ip, ip, #32, 20	; 0x20000
    4628:	ldr	pc, [ip, #2780]!	; 0xadc

0000462c <rb_write@plt>:
    462c:	add	ip, pc, #0, 12
    4630:	add	ip, ip, #32, 20	; 0x20000
    4634:	ldr	pc, [ip, #2772]!	; 0xad4

00004638 <SSL_set_fd@plt>:
    4638:	add	ip, pc, #0, 12
    463c:	add	ip, ip, #32, 20	; 0x20000
    4640:	ldr	pc, [ip, #2764]!	; 0xacc

00004644 <SSL_CTX_ctrl@plt>:
    4644:	add	ip, pc, #0, 12
    4648:	add	ip, ip, #32, 20	; 0x20000
    464c:	ldr	pc, [ip, #2756]!	; 0xac4

00004650 <rb_linebuf_parse@plt>:
    4650:	add	ip, pc, #0, 12
    4654:	add	ip, ip, #32, 20	; 0x20000
    4658:	ldr	pc, [ip, #2748]!	; 0xabc

0000465c <writev@plt>:
    465c:	add	ip, pc, #0, 12
    4660:	add	ip, ip, #32, 20	; 0x20000
    4664:	ldr	pc, [ip, #2740]!	; 0xab4

00004668 <rb_fsnprint@plt>:
    4668:	add	ip, pc, #0, 12
    466c:	add	ip, ip, #32, 20	; 0x20000
    4670:	ldr	pc, [ip, #2732]!	; 0xaac

00004674 <rb_strlcpy@plt>:
    4674:	add	ip, pc, #0, 12
    4678:	add	ip, ip, #32, 20	; 0x20000
    467c:	ldr	pc, [ip, #2724]!	; 0xaa4

00004680 <rb_patricia_search_best2@plt>:
    4680:	add	ip, pc, #0, 12
    4684:	add	ip, ip, #32, 20	; 0x20000
    4688:	ldr	pc, [ip, #2716]!	; 0xa9c

0000468c <SSL_CIPHER_get_name@plt>:
    468c:	add	ip, pc, #0, 12
    4690:	add	ip, ip, #32, 20	; 0x20000
    4694:	ldr	pc, [ip, #2708]!	; 0xa94

00004698 <posix_spawnattr_init@plt>:
    4698:	add	ip, pc, #0, 12
    469c:	add	ip, ip, #32, 20	; 0x20000
    46a0:	ldr	pc, [ip, #2700]!	; 0xa8c

000046a4 <OpenSSL_version_num@plt>:
    46a4:	add	ip, pc, #0, 12
    46a8:	add	ip, ip, #32, 20	; 0x20000
    46ac:	ldr	pc, [ip, #2692]!	; 0xa84

000046b0 <rb_dictionary_foreach_next@plt>:
    46b0:	add	ip, pc, #0, 12
    46b4:	add	ip, ip, #32, 20	; 0x20000
    46b8:	ldr	pc, [ip, #2684]!	; 0xa7c

000046bc <rb_kill@plt>:
    46bc:	add	ip, pc, #0, 12
    46c0:	add	ip, ip, #32, 20	; 0x20000
    46c4:	ldr	pc, [ip, #2676]!	; 0xa74

000046c8 <free@plt>:
    46c8:	add	ip, pc, #0, 12
    46cc:	add	ip, ip, #32, 20	; 0x20000
    46d0:	ldr	pc, [ip, #2668]!	; 0xa6c

000046d4 <sendmsg@plt>:
    46d4:	add	ip, pc, #0, 12
    46d8:	add	ip, ip, #32, 20	; 0x20000
    46dc:	ldr	pc, [ip, #2660]!	; 0xa64

000046e0 <read@plt>:
    46e0:	add	ip, pc, #0, 12
    46e4:	add	ip, ip, #32, 20	; 0x20000
    46e8:	ldr	pc, [ip, #2652]!	; 0xa5c

000046ec <rb_radixtree_elem_add@plt>:
    46ec:	add	ip, pc, #0, 12
    46f0:	add	ip, ip, #32, 20	; 0x20000
    46f4:	ldr	pc, [ip, #2644]!	; 0xa54

000046f8 <write@plt>:
    46f8:	add	ip, pc, #0, 12
    46fc:	add	ip, ip, #32, 20	; 0x20000
    4700:	ldr	pc, [ip, #2636]!	; 0xa4c

00004704 <SSL_new@plt>:
    4704:	add	ip, pc, #0, 12
    4708:	add	ip, ip, #32, 20	; 0x20000
    470c:	ldr	pc, [ip, #2628]!	; 0xa44

00004710 <access@plt>:
    4710:	add	ip, pc, #0, 12
    4714:	add	ip, ip, #32, 20	; 0x20000
    4718:	ldr	pc, [ip, #2620]!	; 0xa3c

0000471c <rb_lib_loop@plt>:
    471c:	add	ip, pc, #0, 12
    4720:	add	ip, ip, #32, 20	; 0x20000
    4724:	ldr	pc, [ip, #2612]!	; 0xa34

00004728 <timer_settime@plt>:
    4728:	add	ip, pc, #0, 12
    472c:	add	ip, ip, #32, 20	; 0x20000
    4730:	ldr	pc, [ip, #2604]!	; 0xa2c

00004734 <gettimeofday@plt>:
    4734:	add	ip, pc, #0, 12
    4738:	add	ip, ip, #32, 20	; 0x20000
    473c:	ldr	pc, [ip, #2596]!	; 0xa24

00004740 <accept@plt>:
    4740:	add	ip, pc, #0, 12
    4744:	add	ip, ip, #32, 20	; 0x20000
    4748:	ldr	pc, [ip, #2588]!	; 0xa1c

0000474c <SSL_read@plt>:
    474c:	add	ip, pc, #0, 12
    4750:	add	ip, ip, #32, 20	; 0x20000
    4754:	ldr	pc, [ip, #2580]!	; 0xa14

00004758 <rb_read@plt>:
    4758:	add	ip, pc, #0, 12
    475c:	add	ip, ip, #32, 20	; 0x20000
    4760:	ldr	pc, [ip, #2572]!	; 0xa0c

00004764 <socket@plt>:
    4764:	add	ip, pc, #0, 12
    4768:	add	ip, ip, #32, 20	; 0x20000
    476c:	ldr	pc, [ip, #2564]!	; 0xa04

00004770 <rb_linebuf_get@plt>:
    4770:	add	ip, pc, #0, 12
    4774:	add	ip, ip, #32, 20	; 0x20000
    4778:	ldr	pc, [ip, #2556]!	; 0x9fc

0000477c <rb_radixtree_foreach_cur@plt>:
    477c:	add	ip, pc, #0, 12
    4780:	add	ip, ip, #32, 20	; 0x20000
    4784:	ldr	pc, [ip, #2548]!	; 0x9f4

00004788 <epoll_wait@plt>:
    4788:	add	ip, pc, #0, 12
    478c:	add	ip, ip, #32, 20	; 0x20000
    4790:	ldr	pc, [ip, #2540]!	; 0x9ec

00004794 <SSL_do_handshake@plt>:
    4794:	add	ip, pc, #0, 12
    4798:	add	ip, ip, #32, 20	; 0x20000
    479c:	ldr	pc, [ip, #2532]!	; 0x9e4

000047a0 <rb_linebuf_flush@plt>:
    47a0:	add	ip, pc, #0, 12
    47a4:	add	ip, ip, #32, 20	; 0x20000
    47a8:	ldr	pc, [ip, #2524]!	; 0x9dc

000047ac <posix_spawn@plt>:
    47ac:	add	ip, pc, #0, 12
    47b0:	add	ip, ip, #32, 20	; 0x20000
    47b4:	ldr	pc, [ip, #2516]!	; 0x9d4

000047b8 <strlen@plt>:
    47b8:	add	ip, pc, #0, 12
    47bc:	add	ip, ip, #32, 20	; 0x20000
    47c0:	ldr	pc, [ip, #2508]!	; 0x9cc

000047c4 <rb_current_time@plt>:
    47c4:	add	ip, pc, #0, 12
    47c8:	add	ip, ip, #32, 20	; 0x20000
    47cc:	ldr	pc, [ip, #2500]!	; 0x9c4

000047d0 <strtoul@plt>:
    47d0:	add	ip, pc, #0, 12
    47d4:	add	ip, ip, #32, 20	; 0x20000
    47d8:	ldr	pc, [ip, #2492]!	; 0x9bc

000047dc <memcpy@plt>:
    47dc:	add	ip, pc, #0, 12
    47e0:	add	ip, ip, #32, 20	; 0x20000
    47e4:	ldr	pc, [ip, #2484]!	; 0x9b4

000047e8 <PEM_read_X509@plt>:
    47e8:	add	ip, pc, #0, 12
    47ec:	add	ip, ip, #32, 20	; 0x20000
    47f0:	ldr	pc, [ip, #2476]!	; 0x9ac

000047f4 <posix_spawnattr_setflags@plt>:
    47f4:	add	ip, pc, #0, 12
    47f8:	add	ip, ip, #32, 20	; 0x20000
    47fc:	ldr	pc, [ip, #2468]!	; 0x9a4

00004800 <__ctype_tolower_loc@plt>:
    4800:	add	ip, pc, #0, 12
    4804:	add	ip, ip, #32, 20	; 0x20000
    4808:	ldr	pc, [ip, #2460]!	; 0x99c

0000480c <SSL_CTX_use_certificate_chain_file@plt>:
    480c:	add	ip, pc, #0, 12
    4810:	add	ip, ip, #32, 20	; 0x20000
    4814:	ldr	pc, [ip, #2452]!	; 0x994

00004818 <rb_free_rb_dlink_node@plt>:
    4818:	add	ip, pc, #0, 12
    481c:	add	ip, ip, #32, 20	; 0x20000
    4820:	ldr	pc, [ip, #2444]!	; 0x98c

00004824 <SSL_CTX_set_options@plt>:
    4824:	add	ip, pc, #0, 12
    4828:	add	ip, ip, #32, 20	; 0x20000
    482c:	ldr	pc, [ip, #2436]!	; 0x984

00004830 <posix_spawnattr_destroy@plt>:
    4830:	add	ip, pc, #0, 12
    4834:	add	ip, ip, #32, 20	; 0x20000
    4838:	ldr	pc, [ip, #2428]!	; 0x97c

0000483c <rb_close@plt>:
    483c:	add	ip, pc, #0, 12
    4840:	add	ip, ip, #32, 20	; 0x20000
    4844:	ldr	pc, [ip, #2420]!	; 0x974

00004848 <strtol@plt>:
    4848:	add	ip, pc, #0, 12
    484c:	add	ip, ip, #32, 20	; 0x20000
    4850:	ldr	pc, [ip, #2412]!	; 0x96c

00004854 <sigaddset@plt>:
    4854:	add	ip, pc, #0, 12
    4858:	add	ip, ip, #32, 20	; 0x20000
    485c:	ldr	pc, [ip, #2404]!	; 0x964

00004860 <strcpy@plt>:
    4860:	add	ip, pc, #0, 12
    4864:	add	ip, ip, #32, 20	; 0x20000
    4868:	ldr	pc, [ip, #2396]!	; 0x95c

0000486c <waitpid@plt>:
    486c:	add	ip, pc, #0, 12
    4870:	add	ip, ip, #32, 20	; 0x20000
    4874:	ldr	pc, [ip, #2388]!	; 0x954

00004878 <rb_run_one_event@plt>:
    4878:	add	ip, pc, #0, 12
    487c:	add	ip, ip, #32, 20	; 0x20000
    4880:	ldr	pc, [ip, #2380]!	; 0x94c

00004884 <rb_patricia_search_exact@plt>:
    4884:	add	ip, pc, #0, 12
    4888:	add	ip, ip, #32, 20	; 0x20000
    488c:	ldr	pc, [ip, #2372]!	; 0x944

00004890 <strncat@plt>:
    4890:	add	ip, pc, #0, 12
    4894:	add	ip, ip, #32, 20	; 0x20000
    4898:	ldr	pc, [ip, #2364]!	; 0x93c

0000489c <atol@plt>:
    489c:	add	ip, pc, #0, 12
    48a0:	add	ip, ip, #32, 20	; 0x20000
    48a4:	ldr	pc, [ip, #2356]!	; 0x934

000048a8 <rb_bh_free@plt>:
    48a8:	add	ip, pc, #0, 12
    48ac:	add	ip, ip, #32, 20	; 0x20000
    48b0:	ldr	pc, [ip, #2348]!	; 0x92c

000048b4 <rb_init_rb_dlink_nodes@plt>:
    48b4:	add	ip, pc, #0, 12
    48b8:	add	ip, ip, #32, 20	; 0x20000
    48bc:	ldr	pc, [ip, #2340]!	; 0x924

000048c0 <EVP_sha1@plt>:
    48c0:	add	ip, pc, #0, 12
    48c4:	add	ip, ip, #32, 20	; 0x20000
    48c8:	ldr	pc, [ip, #2332]!	; 0x91c

000048cc <rb_patricia_lookup@plt>:
    48cc:	add	ip, pc, #0, 12
    48d0:	add	ip, ip, #32, 20	; 0x20000
    48d4:	ldr	pc, [ip, #2324]!	; 0x914

000048d8 <shutdown@plt>:
    48d8:	add	ip, pc, #0, 12
    48dc:	add	ip, ip, #32, 20	; 0x20000
    48e0:	ldr	pc, [ip, #2316]!	; 0x90c

000048e4 <bind@plt>:
    48e4:	add	ip, pc, #0, 12
    48e8:	add	ip, ip, #32, 20	; 0x20000
    48ec:	ldr	pc, [ip, #2308]!	; 0x904

000048f0 <rb_lib_log@plt>:
    48f0:	add	ip, pc, #0, 12
    48f4:	add	ip, ip, #32, 20	; 0x20000
    48f8:	ldr	pc, [ip, #2300]!	; 0x8fc

000048fc <SSL_CTX_use_PrivateKey_file@plt>:
    48fc:	add	ip, pc, #0, 12
    4900:	add	ip, ip, #32, 20	; 0x20000
    4904:	ldr	pc, [ip, #2292]!	; 0x8f4

00004908 <select@plt>:
    4908:	add	ip, pc, #0, 12
    490c:	add	ip, ip, #32, 20	; 0x20000
    4910:	ldr	pc, [ip, #2284]!	; 0x8ec

00004914 <close@plt>:
    4914:	add	ip, pc, #0, 12
    4918:	add	ip, ip, #32, 20	; 0x20000
    491c:	ldr	pc, [ip, #2276]!	; 0x8e4

00004920 <rb_inet_ntop@plt>:
    4920:	add	ip, pc, #0, 12
    4924:	add	ip, ip, #32, 20	; 0x20000
    4928:	ldr	pc, [ip, #2268]!	; 0x8dc

0000492c <rb_bh_alloc@plt>:
    492c:	add	ip, pc, #0, 12
    4930:	add	ip, ip, #32, 20	; 0x20000
    4934:	ldr	pc, [ip, #2260]!	; 0x8d4

00004938 <SSL_free@plt>:
    4938:	add	ip, pc, #0, 12
    493c:	add	ip, ip, #32, 20	; 0x20000
    4940:	ldr	pc, [ip, #2252]!	; 0x8cc

00004944 <rb_pipe@plt>:
    4944:	add	ip, pc, #0, 12
    4948:	add	ip, ip, #32, 20	; 0x20000
    494c:	ldr	pc, [ip, #2244]!	; 0x8c4

00004950 <strncasecmp@plt>:
    4950:	add	ip, pc, #0, 12
    4954:	add	ip, ip, #32, 20	; 0x20000
    4958:	ldr	pc, [ip, #2236]!	; 0x8bc

0000495c <rb_outofmemory@plt>:
    495c:	add	ip, pc, #0, 12
    4960:	add	ip, ip, #32, 20	; 0x20000
    4964:	ldr	pc, [ip, #2228]!	; 0x8b4

00004968 <rb_set_time@plt>:
    4968:	add	ip, pc, #0, 12
    496c:	add	ip, ip, #32, 20	; 0x20000
    4970:	ldr	pc, [ip, #2220]!	; 0x8ac

00004974 <rb_dictionary_stats@plt>:
    4974:	add	ip, pc, #0, 12
    4978:	add	ip, ip, #32, 20	; 0x20000
    497c:	ldr	pc, [ip, #2212]!	; 0x8a4

00004980 <malloc@plt>:
    4980:	add	ip, pc, #0, 12
    4984:	add	ip, ip, #32, 20	; 0x20000
    4988:	ldr	pc, [ip, #2204]!	; 0x89c

0000498c <sigprocmask@plt>:
    498c:	add	ip, pc, #0, 12
    4990:	add	ip, ip, #32, 20	; 0x20000
    4994:	ldr	pc, [ip, #2196]!	; 0x894

00004998 <rb_event_run@plt>:
    4998:	add	ip, pc, #0, 12
    499c:	add	ip, ip, #32, 20	; 0x20000
    49a0:	ldr	pc, [ip, #2188]!	; 0x88c

000049a4 <SSL_set_accept_state@plt>:
    49a4:	add	ip, pc, #0, 12
    49a8:	add	ip, ip, #32, 20	; 0x20000
    49ac:	ldr	pc, [ip, #2180]!	; 0x884

000049b0 <rb_init_bh@plt>:
    49b0:	add	ip, pc, #0, 12
    49b4:	add	ip, ip, #32, 20	; 0x20000
    49b8:	ldr	pc, [ip, #2172]!	; 0x87c

000049bc <PEM_read_DHparams@plt>:
    49bc:	add	ip, pc, #0, 12
    49c0:	add	ip, ip, #32, 20	; 0x20000
    49c4:	ldr	pc, [ip, #2164]!	; 0x874

000049c8 <gmtime_r@plt>:
    49c8:	add	ip, pc, #0, 12
    49cc:	add	ip, ip, #32, 20	; 0x20000
    49d0:	ldr	pc, [ip, #2156]!	; 0x86c

000049d4 <poll@plt>:
    49d4:	add	ip, pc, #0, 12
    49d8:	add	ip, ip, #32, 20	; 0x20000
    49dc:	ldr	pc, [ip, #2148]!	; 0x864

000049e0 <ASN1_item_digest@plt>:
    49e0:	add	ip, pc, #0, 12
    49e4:	add	ip, ip, #32, 20	; 0x20000
    49e8:	ldr	pc, [ip, #2140]!	; 0x85c

000049ec <strnlen@plt>:
    49ec:	add	ip, pc, #0, 12
    49f0:	add	ip, ip, #32, 20	; 0x20000
    49f4:	ldr	pc, [ip, #2132]!	; 0x854

000049f8 <SSL_get_peer_certificate@plt>:
    49f8:	add	ip, pc, #0, 12
    49fc:	add	ip, ip, #32, 20	; 0x20000
    4a00:	ldr	pc, [ip, #2124]!	; 0x84c

00004a04 <rb_dictionary_find@plt>:
    4a04:	add	ip, pc, #0, 12
    4a08:	add	ip, ip, #32, 20	; 0x20000
    4a0c:	ldr	pc, [ip, #2116]!	; 0x844

00004a10 <rb_lib_init@plt>:
    4a10:	add	ip, pc, #0, 12
    4a14:	add	ip, ip, #32, 20	; 0x20000
    4a18:	ldr	pc, [ip, #2108]!	; 0x83c

00004a1c <SSL_get_verify_result@plt>:
    4a1c:	add	ip, pc, #0, 12
    4a20:	add	ip, ip, #32, 20	; 0x20000
    4a24:	ldr	pc, [ip, #2100]!	; 0x834

00004a28 <strtok_r@plt>:
    4a28:	add	ip, pc, #0, 12
    4a2c:	add	ip, ip, #32, 20	; 0x20000
    4a30:	ldr	pc, [ip, #2092]!	; 0x82c

00004a34 <rb_lib_restart@plt>:
    4a34:	add	ip, pc, #0, 12
    4a38:	add	ip, ip, #32, 20	; 0x20000
    4a3c:	ldr	pc, [ip, #2084]!	; 0x824

00004a40 <DH_free@plt>:
    4a40:	add	ip, pc, #0, 12
    4a44:	add	ip, ip, #32, 20	; 0x20000
    4a48:	ldr	pc, [ip, #2076]!	; 0x81c

00004a4c <timer_delete@plt>:
    4a4c:	add	ip, pc, #0, 12
    4a50:	add	ip, ip, #32, 20	; 0x20000
    4a54:	ldr	pc, [ip, #2068]!	; 0x814

00004a58 <rb_open@plt>:
    4a58:	add	ip, pc, #0, 12
    4a5c:	add	ip, ip, #32, 20	; 0x20000
    4a60:	ldr	pc, [ip, #2060]!	; 0x80c

00004a64 <rb_get_sockerr@plt>:
    4a64:	add	ip, pc, #0, 12
    4a68:	add	ip, ip, #32, 20	; 0x20000
    4a6c:	ldr	pc, [ip, #2052]!	; 0x804

00004a70 <send@plt>:
    4a70:	add	ip, pc, #0, 12
    4a74:	add	ip, ip, #32, 20	; 0x20000
    4a78:	ldr	pc, [ip, #2044]!	; 0x7fc

00004a7c <SSL_shutdown@plt>:
    4a7c:	add	ip, pc, #0, 12
    4a80:	add	ip, ip, #32, 20	; 0x20000
    4a84:	ldr	pc, [ip, #2036]!	; 0x7f4

00004a88 <rb_bh_create@plt>:
    4a88:	add	ip, pc, #0, 12
    4a8c:	add	ip, ip, #32, 20	; 0x20000
    4a90:	ldr	pc, [ip, #2028]!	; 0x7ec

00004a94 <dup2@plt>:
    4a94:	add	ip, pc, #0, 12
    4a98:	add	ip, ip, #32, 20	; 0x20000
    4a9c:	ldr	pc, [ip, #2020]!	; 0x7e4

00004aa0 <getpid@plt>:
    4aa0:	add	ip, pc, #0, 12
    4aa4:	add	ip, ip, #32, 20	; 0x20000
    4aa8:	ldr	pc, [ip, #2012]!	; 0x7dc

00004aac <rb_writev@plt>:
    4aac:	add	ip, pc, #0, 12
    4ab0:	add	ip, ip, #32, 20	; 0x20000
    4ab4:	ldr	pc, [ip, #2004]!	; 0x7d4

00004ab8 <RAND_bytes@plt>:
    4ab8:	add	ip, pc, #0, 12
    4abc:	add	ip, ip, #32, 20	; 0x20000
    4ac0:	ldr	pc, [ip, #1996]!	; 0x7cc

00004ac4 <rb_linebuf_newbuf@plt>:
    4ac4:	add	ip, pc, #0, 12
    4ac8:	add	ip, ip, #32, 20	; 0x20000
    4acc:	ldr	pc, [ip, #1988]!	; 0x7c4

00004ad0 <rb_fdlist_init@plt>:
    4ad0:	add	ip, pc, #0, 12
    4ad4:	add	ip, ip, #32, 20	; 0x20000
    4ad8:	ldr	pc, [ip, #1980]!	; 0x7bc

00004adc <rb_event_add@plt>:
    4adc:	add	ip, pc, #0, 12
    4ae0:	add	ip, ip, #32, 20	; 0x20000
    4ae4:	ldr	pc, [ip, #1972]!	; 0x7b4

00004ae8 <readlink@plt>:
    4ae8:	add	ip, pc, #0, 12
    4aec:	add	ip, ip, #32, 20	; 0x20000
    4af0:	ldr	pc, [ip, #1964]!	; 0x7ac

00004af4 <SSL_CTX_new@plt>:
    4af4:	add	ip, pc, #0, 12
    4af8:	add	ip, ip, #32, 20	; 0x20000
    4afc:	ldr	pc, [ip, #1956]!	; 0x7a4

00004b00 <rb_setup_fd@plt>:
    4b00:	add	ip, pc, #0, 12
    4b04:	add	ip, ip, #32, 20	; 0x20000
    4b08:	ldr	pc, [ip, #1948]!	; 0x79c

00004b0c <recvmsg@plt>:
    4b0c:	add	ip, pc, #0, 12
    4b10:	add	ip, ip, #32, 20	; 0x20000
    4b14:	ldr	pc, [ip, #1940]!	; 0x794

00004b18 <rand@plt>:
    4b18:	add	ip, pc, #0, 12
    4b1c:	add	ip, ip, #32, 20	; 0x20000
    4b20:	ldr	pc, [ip, #1932]!	; 0x78c

00004b24 <rb_linebuf_init@plt>:
    4b24:	add	ip, pc, #0, 12
    4b28:	add	ip, ip, #32, 20	; 0x20000
    4b2c:	ldr	pc, [ip, #1924]!	; 0x784

00004b30 <__fxstat@plt>:
    4b30:	add	ip, pc, #0, 12
    4b34:	add	ip, ip, #32, 20	; 0x20000
    4b38:	ldr	pc, [ip, #1916]!	; 0x77c

00004b3c <SSL_set_connect_state@plt>:
    4b3c:	add	ip, pc, #0, 12
    4b40:	add	ip, ip, #32, 20	; 0x20000
    4b44:	ldr	pc, [ip, #1908]!	; 0x774

00004b48 <rb_radixtree_elem_find@plt>:
    4b48:	add	ip, pc, #0, 12
    4b4c:	add	ip, ip, #32, 20	; 0x20000
    4b50:	ldr	pc, [ip, #1900]!	; 0x76c

00004b54 <rb_make_rb_dlink_node@plt>:
    4b54:	add	ip, pc, #0, 12
    4b58:	add	ip, ip, #32, 20	; 0x20000
    4b5c:	ldr	pc, [ip, #1892]!	; 0x764

00004b60 <rb_strlcat@plt>:
    4b60:	add	ip, pc, #0, 12
    4b64:	add	ip, ip, #32, 20	; 0x20000
    4b68:	ldr	pc, [ip, #1884]!	; 0x75c

00004b6c <rb_spawn_process@plt>:
    4b6c:	add	ip, pc, #0, 12
    4b70:	add	ip, ip, #32, 20	; 0x20000
    4b74:	ldr	pc, [ip, #1876]!	; 0x754

00004b78 <EVP_sha512@plt>:
    4b78:	add	ip, pc, #0, 12
    4b7c:	add	ip, ip, #32, 20	; 0x20000
    4b80:	ldr	pc, [ip, #1868]!	; 0x74c

00004b84 <snprintf@plt>:
    4b84:	add	ip, pc, #0, 12
    4b88:	add	ip, ip, #32, 20	; 0x20000
    4b8c:	ldr	pc, [ip, #1860]!	; 0x744

00004b90 <RAND_status@plt>:
    4b90:	add	ip, pc, #0, 12
    4b94:	add	ip, ip, #32, 20	; 0x20000
    4b98:	ldr	pc, [ip, #1852]!	; 0x73c

00004b9c <timerfd_create@plt>:
    4b9c:	add	ip, pc, #0, 12
    4ba0:	add	ip, ip, #32, 20	; 0x20000
    4ba4:	ldr	pc, [ip, #1844]!	; 0x734

00004ba8 <EVP_sha256@plt>:
    4ba8:	add	ip, pc, #0, 12
    4bac:	add	ip, ip, #32, 20	; 0x20000
    4bb0:	ldr	pc, [ip, #1836]!	; 0x72c

00004bb4 <strcspn@plt>:
    4bb4:	add	ip, pc, #0, 12
    4bb8:	add	ip, ip, #32, 20	; 0x20000
    4bbc:	ldr	pc, [ip, #1828]!	; 0x724

00004bc0 <rb_linebuf_put@plt>:
    4bc0:	add	ip, pc, #0, 12
    4bc4:	add	ip, ip, #32, 20	; 0x20000
    4bc8:	ldr	pc, [ip, #1820]!	; 0x71c

00004bcc <rb_listen@plt>:
    4bcc:	add	ip, pc, #0, 12
    4bd0:	add	ip, ip, #32, 20	; 0x20000
    4bd4:	ldr	pc, [ip, #1812]!	; 0x714

00004bd8 <fcntl@plt>:
    4bd8:	add	ip, pc, #0, 12
    4bdc:	add	ip, ip, #32, 20	; 0x20000
    4be0:	ldr	pc, [ip, #1804]!	; 0x70c

00004be4 <strncmp@plt>:
    4be4:	add	ip, pc, #0, 12
    4be8:	add	ip, ip, #32, 20	; 0x20000
    4bec:	ldr	pc, [ip, #1796]!	; 0x704

00004bf0 <kill@plt>:
    4bf0:	add	ip, pc, #0, 12
    4bf4:	add	ip, ip, #32, 20	; 0x20000
    4bf8:	ldr	pc, [ip, #1788]!	; 0x6fc

00004bfc <nanosleep@plt>:
    4bfc:	add	ip, pc, #0, 12
    4c00:	add	ip, ip, #32, 20	; 0x20000
    4c04:	ldr	pc, [ip, #1780]!	; 0x6f4

00004c08 <rb_event_next@plt>:
    4c08:	add	ip, pc, #0, 12
    4c0c:	add	ip, ip, #32, 20	; 0x20000
    4c10:	ldr	pc, [ip, #1772]!	; 0x6ec

00004c14 <realloc@plt>:
    4c14:	add	ip, pc, #0, 12
    4c18:	add	ip, ip, #32, 20	; 0x20000
    4c1c:	ldr	pc, [ip, #1764]!	; 0x6e4

00004c20 <timerfd_settime@plt>:
    4c20:	add	ip, pc, #0, 12
    4c24:	add	ip, ip, #32, 20	; 0x20000
    4c28:	ldr	pc, [ip, #1756]!	; 0x6dc

00004c2c <epoll_ctl@plt>:
    4c2c:	add	ip, pc, #0, 12
    4c30:	add	ip, ip, #32, 20	; 0x20000
    4c34:	ldr	pc, [ip, #1748]!	; 0x6d4

00004c38 <X509_free@plt>:
    4c38:	add	ip, pc, #0, 12
    4c3c:	add	ip, ip, #32, 20	; 0x20000
    4c40:	ldr	pc, [ip, #1740]!	; 0x6cc

00004c44 <readv@plt>:
    4c44:	add	ip, pc, #0, 12
    4c48:	add	ip, ip, #32, 20	; 0x20000
    4c4c:	ldr	pc, [ip, #1732]!	; 0x6c4

00004c50 <getsockopt@plt>:
    4c50:	add	ip, pc, #0, 12
    4c54:	add	ip, ip, #32, 20	; 0x20000
    4c58:	ldr	pc, [ip, #1724]!	; 0x6bc

00004c5c <pipe@plt>:
    4c5c:	add	ip, pc, #0, 12
    4c60:	add	ip, ip, #32, 20	; 0x20000
    4c64:	ldr	pc, [ip, #1716]!	; 0x6b4

00004c68 <OpenSSL_version@plt>:
    4c68:	add	ip, pc, #0, 12
    4c6c:	add	ip, ip, #32, 20	; 0x20000
    4c70:	ldr	pc, [ip, #1708]!	; 0x6ac

00004c74 <setsockopt@plt>:
    4c74:	add	ip, pc, #0, 12
    4c78:	add	ip, ip, #32, 20	; 0x20000
    4c7c:	ldr	pc, [ip, #1700]!	; 0x6a4

00004c80 <SSL_get_error@plt>:
    4c80:	add	ip, pc, #0, 12
    4c84:	add	ip, ip, #32, 20	; 0x20000
    4c88:	ldr	pc, [ip, #1692]!	; 0x69c

00004c8c <SSL_get_version@plt>:
    4c8c:	add	ip, pc, #0, 12
    4c90:	add	ip, ip, #32, 20	; 0x20000
    4c94:	ldr	pc, [ip, #1684]!	; 0x694

00004c98 <rb_radixtree_delete@plt>:
    4c98:	add	ip, pc, #0, 12
    4c9c:	add	ip, ip, #32, 20	; 0x20000
    4ca0:	ldr	pc, [ip, #1676]!	; 0x68c

00004ca4 <setenv@plt>:
    4ca4:	add	ip, pc, #0, 12
    4ca8:	add	ip, ip, #32, 20	; 0x20000
    4cac:	ldr	pc, [ip, #1668]!	; 0x684

00004cb0 <strcmp@plt>:
    4cb0:	add	ip, pc, #0, 12
    4cb4:	add	ip, ip, #32, 20	; 0x20000
    4cb8:	ldr	pc, [ip, #1660]!	; 0x67c

00004cbc <__errno_location@plt>:
    4cbc:	add	ip, pc, #0, 12
    4cc0:	add	ip, ip, #32, 20	; 0x20000
    4cc4:	ldr	pc, [ip, #1652]!	; 0x674

00004cc8 <__cxa_finalize@plt>:
    4cc8:	add	ip, pc, #0, 12
    4ccc:	add	ip, ip, #32, 20	; 0x20000
    4cd0:	ldr	pc, [ip, #1644]!	; 0x66c

00004cd4 <sprintf@plt>:
    4cd4:	add	ip, pc, #0, 12
    4cd8:	add	ip, ip, #32, 20	; 0x20000
    4cdc:	ldr	pc, [ip, #1636]!	; 0x664

00004ce0 <rb_bh_usage@plt>:
    4ce0:	add	ip, pc, #0, 12
    4ce4:	add	ip, ip, #32, 20	; 0x20000
    4ce8:	ldr	pc, [ip, #1628]!	; 0x65c

00004cec <SSL_CTX_set_verify@plt>:
    4cec:	add	ip, pc, #0, 12
    4cf0:	add	ip, ip, #32, 20	; 0x20000
    4cf4:	ldr	pc, [ip, #1620]!	; 0x654

Disassembly of section .text:

00004cf8 <call_weak_fn>:
    4cf8:	ldr	r3, [pc, #20]	; 4d14 <call_weak_fn+0x1c>
    4cfc:	ldr	r2, [pc, #20]	; 4d18 <call_weak_fn+0x20>
    4d00:	add	r3, pc, r3
    4d04:	ldr	r2, [r3, r2]
    4d08:	cmp	r2, #0
    4d0c:	bxeq	lr
    4d10:	b	44dc <__gmon_start__@plt>
    4d14:	.word	0x000202f8
    4d18:	.word	0x0000035c

00004d1c <deregister_tm_clones>:
    4d1c:	ldr	r0, [pc, #44]	; 4d50 <deregister_tm_clones+0x34>
    4d20:	ldr	r3, [pc, #44]	; 4d54 <deregister_tm_clones+0x38>
    4d24:	add	r0, pc, r0
    4d28:	add	r3, pc, r3
    4d2c:	cmp	r3, r0
    4d30:	ldr	r3, [pc, #32]	; 4d58 <deregister_tm_clones+0x3c>
    4d34:	add	r3, pc, r3
    4d38:	bxeq	lr
    4d3c:	ldr	r2, [pc, #24]	; 4d5c <deregister_tm_clones+0x40>
    4d40:	ldr	r3, [r3, r2]
    4d44:	cmp	r3, #0
    4d48:	bxeq	lr
    4d4c:	bx	r3
    4d50:	.word	0x000207a0
    4d54:	.word	0x0002079c
    4d58:	.word	0x000202c4
    4d5c:	.word	0x00000378

00004d60 <register_tm_clones>:
    4d60:	ldr	r0, [pc, #56]	; 4da0 <register_tm_clones+0x40>
    4d64:	ldr	r3, [pc, #56]	; 4da4 <register_tm_clones+0x44>
    4d68:	add	r0, pc, r0
    4d6c:	add	r3, pc, r3
    4d70:	sub	r1, r3, r0
    4d74:	ldr	r3, [pc, #44]	; 4da8 <register_tm_clones+0x48>
    4d78:	asr	r1, r1, #2
    4d7c:	add	r3, pc, r3
    4d80:	add	r1, r1, r1, lsr #31
    4d84:	asrs	r1, r1, #1
    4d88:	bxeq	lr
    4d8c:	ldr	r2, [pc, #24]	; 4dac <register_tm_clones+0x4c>
    4d90:	ldr	r3, [r3, r2]
    4d94:	cmp	r3, #0
    4d98:	bxeq	lr
    4d9c:	bx	r3
    4da0:	.word	0x0002075c
    4da4:	.word	0x00020758
    4da8:	.word	0x0002027c
    4dac:	.word	0x00000388

00004db0 <__do_global_dtors_aux>:
    4db0:	ldr	r3, [pc, #76]	; 4e04 <__do_global_dtors_aux+0x54>
    4db4:	ldr	r2, [pc, #76]	; 4e08 <__do_global_dtors_aux+0x58>
    4db8:	add	r3, pc, r3
    4dbc:	add	r2, pc, r2
    4dc0:	ldrb	r3, [r3]
    4dc4:	cmp	r3, #0
    4dc8:	bxne	lr
    4dcc:	ldr	r3, [pc, #56]	; 4e0c <__do_global_dtors_aux+0x5c>
    4dd0:	push	{r4, lr}
    4dd4:	ldr	r3, [r2, r3]
    4dd8:	cmp	r3, #0
    4ddc:	beq	4dec <__do_global_dtors_aux+0x3c>
    4de0:	ldr	r3, [pc, #40]	; 4e10 <__do_global_dtors_aux+0x60>
    4de4:	ldr	r0, [pc, r3]
    4de8:	bl	4cc8 <__cxa_finalize@plt>
    4dec:	bl	4d1c <deregister_tm_clones>
    4df0:	ldr	r3, [pc, #28]	; 4e14 <__do_global_dtors_aux+0x64>
    4df4:	mov	r2, #1
    4df8:	add	r3, pc, r3
    4dfc:	strb	r2, [r3]
    4e00:	pop	{r4, pc}
    4e04:	.word	0x00020710
    4e08:	.word	0x0002023c
    4e0c:	.word	0x00000418
    4e10:	.word	0x00020634
    4e14:	.word	0x000206d0

00004e18 <frame_dummy>:
    4e18:	b	4d60 <register_tm_clones>

00004e1c <rb_spawn_process>:
    4e1c:	push	{r4, r5, r6, r7, lr}
    4e20:	sub	sp, sp, #356	; 0x164
    4e24:	mov	r6, r0
    4e28:	add	r4, sp, #16
    4e2c:	mov	r7, r1
    4e30:	mov	r0, r4
    4e34:	bl	4698 <posix_spawnattr_init@plt>
    4e38:	ldr	r5, [pc, #100]	; 4ea4 <rb_spawn_process+0x88>
    4e3c:	mov	r1, #64	; 0x40
    4e40:	mov	r0, r4
    4e44:	bl	47f4 <posix_spawnattr_setflags@plt>
    4e48:	ldr	r3, [pc, #88]	; 4ea8 <rb_spawn_process+0x8c>
    4e4c:	mov	r2, #0
    4e50:	mov	r1, r6
    4e54:	add	r0, sp, #12
    4e58:	add	r5, pc, r5
    4e5c:	ldr	r3, [r5, r3]
    4e60:	ldr	r3, [r3]
    4e64:	str	r7, [sp]
    4e68:	str	r3, [sp, #4]
    4e6c:	mov	r3, r4
    4e70:	bl	47ac <posix_spawn@plt>
    4e74:	mov	r5, r0
    4e78:	mov	r0, r4
    4e7c:	bl	4830 <posix_spawnattr_destroy@plt>
    4e80:	cmp	r5, #0
    4e84:	beq	4e98 <rb_spawn_process+0x7c>
    4e88:	bl	4cbc <__errno_location@plt>
    4e8c:	mvn	r3, #0
    4e90:	str	r5, [r0]
    4e94:	str	r3, [sp, #12]
    4e98:	ldr	r0, [sp, #12]
    4e9c:	add	sp, sp, #356	; 0x164
    4ea0:	pop	{r4, r5, r6, r7, pc}
    4ea4:	.word	0x000201a0
    4ea8:	.word	0x000003a0

00004eac <rb_gettimeofday>:
    4eac:	b	4734 <gettimeofday@plt>

00004eb0 <rb_sleep>:
    4eb0:	mov	r3, #1000	; 0x3e8
    4eb4:	push	{r0, r1, r2, lr}
    4eb8:	mul	r1, r3, r1
    4ebc:	strd	r0, [sp]
    4ec0:	mov	r1, #0
    4ec4:	mov	r0, sp
    4ec8:	bl	4bfc <nanosleep@plt>
    4ecc:	add	sp, sp, #12
    4ed0:	pop	{pc}		; (ldr pc, [sp], #4)

00004ed4 <rb_strerror>:
    4ed4:	b	4374 <strerror@plt>

00004ed8 <rb_kill>:
    4ed8:	b	4bf0 <kill@plt>

00004edc <rb_setenv>:
    4edc:	b	4ca4 <setenv@plt>

00004ee0 <rb_waitpid>:
    4ee0:	b	486c <waitpid@plt>

00004ee4 <rb_getpid>:
    4ee4:	b	4aa0 <getpid@plt>

00004ee8 <rb_path_to_self>:
    4ee8:	push	{r4, lr}
    4eec:	mov	r2, #4096	; 0x1000
    4ef0:	ldr	r4, [pc, #32]	; 4f18 <rb_path_to_self+0x30>
    4ef4:	ldr	r0, [pc, #32]	; 4f1c <rb_path_to_self+0x34>
    4ef8:	add	r4, pc, r4
    4efc:	mov	r1, r4
    4f00:	add	r0, pc, r0
    4f04:	bl	4ae8 <readlink@plt>
    4f08:	cmn	r0, #1
    4f0c:	movne	r0, r4
    4f10:	moveq	r0, #0
    4f14:	pop	{r4, pc}
    4f18:	.word	0x000205d1
    4f1c:	.word	0x0000dc30

00004f20 <rb_init_netio_win32>:
    4f20:	push	{r4, lr}
    4f24:	bl	4cbc <__errno_location@plt>
    4f28:	mov	r3, #38	; 0x26
    4f2c:	str	r3, [r0]
    4f30:	mvn	r0, #0
    4f34:	pop	{r4, pc}

00004f38 <rb_setselect_win32>:
    4f38:	push	{r4, lr}
    4f3c:	bl	4cbc <__errno_location@plt>
    4f40:	mov	r3, #38	; 0x26
    4f44:	str	r3, [r0]
    4f48:	pop	{r4, pc}

00004f4c <rb_select_win32>:
    4f4c:	push	{r4, lr}
    4f50:	bl	4cbc <__errno_location@plt>
    4f54:	mov	r3, #38	; 0x26
    4f58:	str	r3, [r0]
    4f5c:	mvn	r0, #0
    4f60:	pop	{r4, pc}

00004f64 <rb_setup_fd_win32>:
    4f64:	push	{r4, lr}
    4f68:	bl	4cbc <__errno_location@plt>
    4f6c:	mov	r3, #38	; 0x26
    4f70:	str	r3, [r0]
    4f74:	mvn	r0, #0
    4f78:	pop	{r4, pc}
    4f7c:	andeq	r0, r0, r0

00004f80 <_crypt_to64>:
    4f80:	ldr	r3, [pc, #32]	; 4fa8 <_crypt_to64+0x28>
    4f84:	add	r2, r0, r2
    4f88:	add	r3, pc, r3
    4f8c:	cmp	r0, r2
    4f90:	bxeq	lr
    4f94:	and	ip, r1, #63	; 0x3f
    4f98:	lsr	r1, r1, #6
    4f9c:	ldrb	ip, [r3, ip]
    4fa0:	strb	ip, [r0], #1
    4fa4:	b	4f8c <_crypt_to64+0xc>
    4fa8:	.word	0x0000dbb8

00004fac <rb_sha256_process_block>:
    4fac:	lsr	r3, r1, #2
    4fb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fb4:	sub	sp, sp, #308	; 0x134
    4fb8:	add	r0, r0, #60	; 0x3c
    4fbc:	str	r3, [sp, #28]
    4fc0:	ldr	r3, [r2]
    4fc4:	ldr	sl, [r2, #28]
    4fc8:	str	r3, [sp]
    4fcc:	ldr	r3, [r2, #4]
    4fd0:	str	r3, [sp, #4]
    4fd4:	ldr	r3, [r2, #8]
    4fd8:	str	r3, [sp, #8]
    4fdc:	ldr	r3, [r2, #12]
    4fe0:	str	r3, [sp, #12]
    4fe4:	ldr	r3, [r2, #16]
    4fe8:	str	r3, [sp, #16]
    4fec:	ldr	r3, [r2, #20]
    4ff0:	str	r3, [sp, #20]
    4ff4:	ldr	r3, [r2, #24]
    4ff8:	str	r3, [sp, #24]
    4ffc:	ldr	r3, [r2, #32]
    5000:	adds	r3, r3, r1
    5004:	str	r3, [r2, #32]
    5008:	ldrcs	r3, [r2, #36]	; 0x24
    500c:	addcs	r3, r3, #1
    5010:	strcs	r3, [r2, #36]	; 0x24
    5014:	ldr	r3, [pc, #512]	; 521c <rb_sha256_process_block+0x270>
    5018:	add	r3, pc, r3
    501c:	str	r3, [sp, #40]	; 0x28
    5020:	add	r3, sp, #48	; 0x30
    5024:	str	r3, [sp, #44]	; 0x2c
    5028:	ldr	r3, [sp, #28]
    502c:	cmp	r3, #0
    5030:	bne	5078 <rb_sha256_process_block+0xcc>
    5034:	ldr	r3, [sp]
    5038:	str	r3, [r2]
    503c:	ldr	r3, [sp, #4]
    5040:	str	sl, [r2, #28]
    5044:	str	r3, [r2, #4]
    5048:	ldr	r3, [sp, #8]
    504c:	str	r3, [r2, #8]
    5050:	ldr	r3, [sp, #12]
    5054:	str	r3, [r2, #12]
    5058:	ldr	r3, [sp, #16]
    505c:	str	r3, [r2, #16]
    5060:	ldr	r3, [sp, #20]
    5064:	str	r3, [r2, #20]
    5068:	ldr	r3, [sp, #24]
    506c:	str	r3, [r2, #24]
    5070:	add	sp, sp, #308	; 0x134
    5074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5078:	add	r1, sp, #48	; 0x30
    507c:	sub	r3, r0, #64	; 0x40
    5080:	mov	lr, r1
    5084:	ldr	ip, [r3, #4]!
    5088:	rev	ip, ip
    508c:	cmp	r0, r3
    5090:	str	ip, [lr], #4
    5094:	bne	5084 <rb_sha256_process_block+0xd8>
    5098:	mov	lr, #16
    509c:	ldr	r3, [r1, #56]	; 0x38
    50a0:	mov	r5, r1
    50a4:	add	lr, lr, #1
    50a8:	cmp	lr, #64	; 0x40
    50ac:	ldr	r4, [r1, #4]!
    50b0:	ror	ip, r3, #19
    50b4:	eor	ip, ip, r3, ror #17
    50b8:	eor	ip, ip, r3, lsr #10
    50bc:	ldr	r3, [r5, #36]	; 0x24
    50c0:	ldr	r5, [r5]
    50c4:	add	r3, r3, r5
    50c8:	ror	r5, r4, #18
    50cc:	add	ip, ip, r3
    50d0:	eor	r5, r5, r4, ror #7
    50d4:	eor	r4, r5, r4, lsr #3
    50d8:	add	ip, ip, r4
    50dc:	str	ip, [r1, #60]	; 0x3c
    50e0:	bne	509c <rb_sha256_process_block+0xf0>
    50e4:	ldr	lr, [sp]
    50e8:	mov	fp, sl
    50ec:	mov	r9, #0
    50f0:	ldr	r3, [sp, #40]	; 0x28
    50f4:	ldr	r5, [sp, #4]
    50f8:	ldr	r4, [sp, #8]
    50fc:	add	r3, r3, #68	; 0x44
    5100:	ldr	ip, [sp, #16]
    5104:	str	r3, [sp, #36]	; 0x24
    5108:	ldr	r3, [sp, #12]
    510c:	ldr	r8, [sp, #20]
    5110:	ldr	r7, [sp, #24]
    5114:	str	r3, [sp, #32]
    5118:	ldr	r3, [sp, #36]	; 0x24
    511c:	ldr	r1, [sp, #44]	; 0x2c
    5120:	ldr	r6, [r3], #4
    5124:	ldr	r1, [r1, r9, lsl #2]
    5128:	add	r9, r9, #1
    512c:	cmp	r9, #64	; 0x40
    5130:	str	r3, [sp, #36]	; 0x24
    5134:	ror	r3, ip, #11
    5138:	eor	r3, r3, ip, ror #6
    513c:	add	r1, r6, r1
    5140:	bic	r6, r7, ip
    5144:	eor	r3, r3, ip, ror #25
    5148:	add	r3, r3, r1
    514c:	and	r1, ip, r8
    5150:	eor	r1, r1, r6
    5154:	ror	r6, lr, #13
    5158:	add	r1, r3, r1
    515c:	eor	r3, r5, r4
    5160:	eor	r6, r6, lr, ror #2
    5164:	add	r1, r1, fp
    5168:	and	r3, r3, lr
    516c:	and	fp, r5, r4
    5170:	eor	r6, r6, lr, ror #22
    5174:	eor	r3, r3, fp
    5178:	mov	fp, r7
    517c:	add	r6, r6, r3
    5180:	ldr	r3, [sp, #32]
    5184:	str	r4, [sp, #32]
    5188:	add	r3, r1, r3
    518c:	add	r1, r1, r6
    5190:	bne	5200 <rb_sha256_process_block+0x254>
    5194:	ldr	r6, [sp]
    5198:	add	sl, sl, r7
    519c:	add	r0, r0, #64	; 0x40
    51a0:	add	r1, r6, r1
    51a4:	str	r1, [sp]
    51a8:	ldr	r1, [sp, #4]
    51ac:	add	r1, r1, lr
    51b0:	str	r1, [sp, #4]
    51b4:	ldr	r1, [sp, #8]
    51b8:	add	r1, r1, r5
    51bc:	str	r1, [sp, #8]
    51c0:	ldr	r1, [sp, #12]
    51c4:	add	r1, r1, r4
    51c8:	str	r1, [sp, #12]
    51cc:	ldr	r1, [sp, #16]
    51d0:	add	r3, r1, r3
    51d4:	str	r3, [sp, #16]
    51d8:	ldr	r3, [sp, #20]
    51dc:	add	r3, r3, ip
    51e0:	str	r3, [sp, #20]
    51e4:	ldr	r3, [sp, #24]
    51e8:	add	r3, r3, r8
    51ec:	str	r3, [sp, #24]
    51f0:	ldr	r3, [sp, #28]
    51f4:	sub	r3, r3, #16
    51f8:	str	r3, [sp, #28]
    51fc:	b	5028 <rb_sha256_process_block+0x7c>
    5200:	mov	r7, r8
    5204:	mov	r4, r5
    5208:	mov	r8, ip
    520c:	mov	r5, lr
    5210:	mov	ip, r3
    5214:	mov	lr, r1
    5218:	b	5118 <rb_sha256_process_block+0x16c>
    521c:	.word	0x0000db28

00005220 <rb_sha256_init_ctx>:
    5220:	ldr	r2, [pc, #60]	; 5264 <rb_sha256_init_ctx+0x44>
    5224:	ldr	r3, [pc, #60]	; 5268 <rb_sha256_init_ctx+0x48>
    5228:	strd	r2, [r0]
    522c:	ldr	r2, [pc, #56]	; 526c <rb_sha256_init_ctx+0x4c>
    5230:	ldr	r3, [pc, #56]	; 5270 <rb_sha256_init_ctx+0x50>
    5234:	strd	r2, [r0, #8]
    5238:	ldr	r2, [pc, #52]	; 5274 <rb_sha256_init_ctx+0x54>
    523c:	ldr	r3, [pc, #52]	; 5278 <rb_sha256_init_ctx+0x58>
    5240:	strd	r2, [r0, #16]
    5244:	ldr	r3, [pc, #48]	; 527c <rb_sha256_init_ctx+0x5c>
    5248:	ldr	r2, [pc, #48]	; 5280 <rb_sha256_init_ctx+0x60>
    524c:	strd	r2, [r0, #24]
    5250:	mov	r3, #0
    5254:	str	r3, [r0, #32]
    5258:	str	r3, [r0, #36]	; 0x24
    525c:	str	r3, [r0, #40]	; 0x28
    5260:	bx	lr
    5264:	.word	0x6a09e667
    5268:	.word	0xbb67ae85
    526c:	.word	0x3c6ef372
    5270:	.word	0xa54ff53a
    5274:	.word	0x510e527f
    5278:	.word	0x9b05688c
    527c:	.word	0x5be0cd19
    5280:	.word	0x1f83d9ab

00005284 <rb_sha512_process_block>:
    5284:	lsr	r3, r1, #3
    5288:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    528c:	sub	sp, sp, #780	; 0x30c
    5290:	mov	r5, #0
    5294:	mov	r9, #0
    5298:	str	r3, [sp, #104]	; 0x68
    529c:	ldr	r3, [r2]
    52a0:	str	r3, [sp, #32]
    52a4:	ldr	r3, [r2, #4]
    52a8:	str	r3, [sp, #36]	; 0x24
    52ac:	ldr	r3, [r2, #8]
    52b0:	str	r3, [sp, #40]	; 0x28
    52b4:	ldr	r3, [r2, #12]
    52b8:	str	r3, [sp, #44]	; 0x2c
    52bc:	ldr	r3, [r2, #16]
    52c0:	str	r3, [sp, #48]	; 0x30
    52c4:	ldr	r3, [r2, #20]
    52c8:	str	r3, [sp, #52]	; 0x34
    52cc:	ldr	r3, [r2, #24]
    52d0:	str	r3, [sp, #56]	; 0x38
    52d4:	ldr	r3, [r2, #28]
    52d8:	str	r3, [sp, #60]	; 0x3c
    52dc:	ldr	r3, [r2, #32]
    52e0:	str	r3, [sp, #64]	; 0x40
    52e4:	ldr	r3, [r2, #36]	; 0x24
    52e8:	str	r3, [sp, #68]	; 0x44
    52ec:	ldr	r3, [r2, #40]	; 0x28
    52f0:	str	r3, [sp, #72]	; 0x48
    52f4:	ldr	r3, [r2, #44]	; 0x2c
    52f8:	str	r3, [sp, #76]	; 0x4c
    52fc:	ldr	r3, [r2, #48]	; 0x30
    5300:	str	r3, [sp, #80]	; 0x50
    5304:	ldr	r3, [r2, #52]	; 0x34
    5308:	str	r3, [sp, #84]	; 0x54
    530c:	ldr	r3, [r2, #56]	; 0x38
    5310:	str	r3, [sp, #88]	; 0x58
    5314:	ldr	r3, [r2, #60]	; 0x3c
    5318:	ldrd	r6, [r2, #64]	; 0x40
    531c:	str	r3, [sp, #92]	; 0x5c
    5320:	adds	sl, r6, r1
    5324:	adcs	fp, r7, r5
    5328:	movcs	r8, #1
    532c:	movcc	r8, #0
    5330:	orrs	r3, r8, r9
    5334:	strd	sl, [r2, #64]	; 0x40
    5338:	beq	5354 <rb_sha512_process_block+0xd0>
    533c:	ldr	r3, [r2, #72]	; 0x48
    5340:	ldr	r1, [r2, #76]	; 0x4c
    5344:	adds	r3, r3, #1
    5348:	adc	r1, r1, #0
    534c:	str	r3, [r2, #72]	; 0x48
    5350:	str	r1, [r2, #76]	; 0x4c
    5354:	add	r3, r0, #120	; 0x78
    5358:	str	r3, [sp, #20]
    535c:	ldr	r3, [pc, #1232]	; 5834 <rb_sha512_process_block+0x5b0>
    5360:	add	r3, pc, r3
    5364:	str	r3, [sp, #132]	; 0x84
    5368:	add	r3, sp, #136	; 0x88
    536c:	str	r3, [sp, #112]	; 0x70
    5370:	ldr	r3, [sp, #104]	; 0x68
    5374:	cmp	r3, #0
    5378:	bne	5404 <rb_sha512_process_block+0x180>
    537c:	ldr	r3, [sp, #32]
    5380:	str	r3, [r2]
    5384:	ldr	r3, [sp, #36]	; 0x24
    5388:	str	r3, [r2, #4]
    538c:	ldr	r3, [sp, #40]	; 0x28
    5390:	str	r3, [r2, #8]
    5394:	ldr	r3, [sp, #44]	; 0x2c
    5398:	str	r3, [r2, #12]
    539c:	ldr	r3, [sp, #48]	; 0x30
    53a0:	str	r3, [r2, #16]
    53a4:	ldr	r3, [sp, #52]	; 0x34
    53a8:	str	r3, [r2, #20]
    53ac:	ldr	r3, [sp, #56]	; 0x38
    53b0:	str	r3, [r2, #24]
    53b4:	ldr	r3, [sp, #60]	; 0x3c
    53b8:	str	r3, [r2, #28]
    53bc:	ldr	r3, [sp, #64]	; 0x40
    53c0:	str	r3, [r2, #32]
    53c4:	ldr	r3, [sp, #68]	; 0x44
    53c8:	str	r3, [r2, #36]	; 0x24
    53cc:	ldr	r3, [sp, #72]	; 0x48
    53d0:	str	r3, [r2, #40]	; 0x28
    53d4:	ldr	r3, [sp, #76]	; 0x4c
    53d8:	str	r3, [r2, #44]	; 0x2c
    53dc:	ldr	r3, [sp, #80]	; 0x50
    53e0:	str	r3, [r2, #48]	; 0x30
    53e4:	ldr	r3, [sp, #84]	; 0x54
    53e8:	str	r3, [r2, #52]	; 0x34
    53ec:	ldr	r3, [sp, #88]	; 0x58
    53f0:	str	r3, [r2, #56]	; 0x38
    53f4:	ldr	r3, [sp, #92]	; 0x5c
    53f8:	str	r3, [r2, #60]	; 0x3c
    53fc:	add	sp, sp, #780	; 0x30c
    5400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5404:	ldr	r3, [sp, #20]
    5408:	add	r0, sp, #136	; 0x88
    540c:	mov	r1, r0
    5410:	sub	r3, r3, #128	; 0x80
    5414:	ldr	ip, [r3, #8]!
    5418:	add	r1, r1, #8
    541c:	rev	ip, ip
    5420:	ldr	lr, [r3, #4]
    5424:	str	ip, [r1, #-4]
    5428:	ldr	ip, [sp, #20]
    542c:	rev	lr, lr
    5430:	str	lr, [r1, #-8]
    5434:	cmp	ip, r3
    5438:	bne	5414 <rb_sha512_process_block+0x190>
    543c:	mov	r3, #64	; 0x40
    5440:	str	r3, [sp, #4]
    5444:	mov	r6, r0
    5448:	ldr	ip, [r0, #8]
    544c:	add	r0, r0, #8
    5450:	ldr	lr, [r0, #4]
    5454:	ldr	r4, [r0, #108]	; 0x6c
    5458:	ldr	r3, [r0, #104]	; 0x68
    545c:	lsr	r1, r4, #19
    5460:	lsl	r7, r4, #3
    5464:	lsr	r8, r3, #19
    5468:	lsl	r5, r3, #3
    546c:	orr	r7, r7, r3, lsr #29
    5470:	orr	r1, r1, r3, lsl #13
    5474:	lsr	r3, r3, #6
    5478:	orr	r8, r8, r4, lsl #13
    547c:	eor	r1, r1, r7
    5480:	ldr	r7, [r6, #76]	; 0x4c
    5484:	orr	r5, r5, r4, lsr #29
    5488:	orr	r3, r3, r4, lsl #26
    548c:	eor	r5, r5, r8
    5490:	ldr	r8, [r6, #72]	; 0x48
    5494:	eor	r4, r1, r4, lsr #6
    5498:	eor	r5, r5, r3
    549c:	ldr	r3, [r6]
    54a0:	ldr	r1, [r6, #4]
    54a4:	lsr	r6, lr, #1
    54a8:	orr	r6, r6, ip, lsl #31
    54ac:	adds	r8, r8, r3
    54b0:	lsr	r3, ip, #1
    54b4:	adc	r7, r7, r1
    54b8:	adds	r5, r5, r8
    54bc:	lsr	r1, lr, #8
    54c0:	adc	r4, r4, r7
    54c4:	lsr	r7, ip, #8
    54c8:	orr	r1, r1, ip, lsl #24
    54cc:	lsr	ip, ip, #7
    54d0:	orr	r3, r3, lr, lsl #31
    54d4:	eor	r1, r1, r6
    54d8:	orr	r7, r7, lr, lsl #24
    54dc:	orr	ip, ip, lr, lsl #25
    54e0:	eor	r3, r3, r7
    54e4:	eor	r1, r1, lr, lsr #7
    54e8:	eor	r3, r3, ip
    54ec:	adds	r3, r5, r3
    54f0:	adc	r1, r4, r1
    54f4:	str	r3, [r0, #120]	; 0x78
    54f8:	ldr	r3, [sp, #4]
    54fc:	str	r1, [r0, #124]	; 0x7c
    5500:	subs	r3, r3, #1
    5504:	str	r3, [sp, #4]
    5508:	bne	5444 <rb_sha512_process_block+0x1c0>
    550c:	ldr	lr, [sp, #32]
    5510:	ldr	r3, [sp, #132]	; 0x84
    5514:	ldr	r4, [sp, #36]	; 0x24
    5518:	ldr	r8, [sp, #52]	; 0x34
    551c:	add	r3, r3, #328	; 0x148
    5520:	ldr	r0, [sp, #64]	; 0x40
    5524:	str	r3, [sp, #108]	; 0x6c
    5528:	ldr	ip, [sp, #68]	; 0x44
    552c:	ldr	r3, [sp, #88]	; 0x58
    5530:	str	r3, [sp, #124]	; 0x7c
    5534:	ldr	r3, [sp, #92]	; 0x5c
    5538:	str	r3, [sp, #128]	; 0x80
    553c:	ldr	r3, [sp, #80]	; 0x50
    5540:	str	r3, [sp, #96]	; 0x60
    5544:	ldr	r3, [sp, #84]	; 0x54
    5548:	str	r3, [sp, #100]	; 0x64
    554c:	ldr	r3, [sp, #72]	; 0x48
    5550:	str	r3, [sp, #24]
    5554:	ldr	r3, [sp, #76]	; 0x4c
    5558:	str	r3, [sp, #28]
    555c:	ldr	r3, [sp, #56]	; 0x38
    5560:	str	r3, [sp, #116]	; 0x74
    5564:	ldr	r3, [sp, #60]	; 0x3c
    5568:	str	r3, [sp, #120]	; 0x78
    556c:	ldr	r3, [sp, #48]	; 0x30
    5570:	str	r3, [sp, #16]
    5574:	ldr	r3, [sp, #40]	; 0x28
    5578:	str	r3, [sp, #8]
    557c:	ldr	r3, [sp, #44]	; 0x2c
    5580:	str	r3, [sp, #12]
    5584:	ldr	r3, [sp, #108]	; 0x6c
    5588:	lsr	r1, ip, #14
    558c:	lsr	r5, r0, #14
    5590:	orr	r6, r1, r0, lsl #18
    5594:	lsr	r1, ip, #18
    5598:	orr	r5, r5, ip, lsl #18
    559c:	ldrd	sl, [r3], #8
    55a0:	orr	r1, r1, r0, lsl #14
    55a4:	eor	r1, r1, r6
    55a8:	lsl	r6, ip, #23
    55ac:	orr	r6, r6, r0, lsr #9
    55b0:	str	r3, [sp, #108]	; 0x6c
    55b4:	lsr	r3, r0, #18
    55b8:	eor	r6, r6, r1
    55bc:	ldr	r1, [sp, #4]
    55c0:	orr	r3, r3, ip, lsl #14
    55c4:	eor	r3, r3, r5
    55c8:	lsl	r5, r0, #23
    55cc:	orr	r5, r5, ip, lsr #9
    55d0:	eor	r5, r5, r3
    55d4:	ldr	r3, [sp, #112]	; 0x70
    55d8:	ldr	r7, [r1, r3]
    55dc:	add	r3, r3, r1
    55e0:	ldr	r1, [r3, #4]
    55e4:	adds	r3, sl, r7
    55e8:	ldr	r7, [sp, #28]
    55ec:	adc	r1, fp, r1
    55f0:	adds	r5, r5, r3
    55f4:	ldr	r3, [sp, #96]	; 0x60
    55f8:	adc	r6, r6, r1
    55fc:	and	r7, ip, r7
    5600:	bic	r9, r3, r0
    5604:	ldr	r3, [sp, #100]	; 0x64
    5608:	bic	r1, r3, ip
    560c:	ldr	r3, [sp, #24]
    5610:	eor	r1, r1, r7
    5614:	lsr	r7, lr, #28
    5618:	orr	r7, r7, r4, lsl #4
    561c:	and	r3, r0, r3
    5620:	eor	r3, r3, r9
    5624:	adds	r3, r5, r3
    5628:	ldr	r5, [sp, #124]	; 0x7c
    562c:	adc	r1, r6, r1
    5630:	lsl	r6, lr, #30
    5634:	orr	r6, r6, r4, lsr #2
    5638:	adds	r3, r3, r5
    563c:	ldr	r5, [sp, #128]	; 0x80
    5640:	eor	r7, r7, r6
    5644:	lsl	r6, lr, #25
    5648:	orr	r6, r6, r4, lsr #7
    564c:	adc	r1, r1, r5
    5650:	lsr	r5, r4, #28
    5654:	eor	r7, r7, r6
    5658:	ldr	r6, [sp, #8]
    565c:	orr	r9, r5, lr, lsl #4
    5660:	lsl	r5, r4, #30
    5664:	orr	r5, r5, lr, lsr #2
    5668:	eor	r5, r5, r9
    566c:	lsl	r9, r4, #25
    5670:	orr	r9, r9, lr, lsr #7
    5674:	eor	r5, r5, r9
    5678:	ldr	r9, [sp, #16]
    567c:	eor	fp, r6, r9
    5680:	ldr	r6, [sp, #12]
    5684:	and	fp, fp, lr
    5688:	eor	sl, r6, r8
    568c:	ldr	r6, [sp, #8]
    5690:	and	sl, sl, r4
    5694:	and	r6, r6, r9
    5698:	ldr	r9, [sp, #12]
    569c:	eor	r6, r6, fp
    56a0:	adds	r6, r7, r6
    56a4:	and	r9, r9, r8
    56a8:	eor	r9, r9, sl
    56ac:	adc	r9, r5, r9
    56b0:	ldr	r5, [sp, #116]	; 0x74
    56b4:	adds	sl, r3, r5
    56b8:	ldr	r5, [sp, #120]	; 0x78
    56bc:	str	r8, [sp, #120]	; 0x78
    56c0:	adc	fp, r1, r5
    56c4:	adds	r6, r3, r6
    56c8:	ldr	r3, [sp, #4]
    56cc:	adc	r9, r1, r9
    56d0:	add	r3, r3, #8
    56d4:	str	r3, [sp, #4]
    56d8:	ldr	r3, [sp, #16]
    56dc:	str	r3, [sp, #116]	; 0x74
    56e0:	ldr	r3, [sp, #96]	; 0x60
    56e4:	str	r3, [sp, #124]	; 0x7c
    56e8:	ldr	r3, [sp, #100]	; 0x64
    56ec:	str	r3, [sp, #128]	; 0x80
    56f0:	ldr	r3, [sp, #4]
    56f4:	cmp	r3, #640	; 0x280
    56f8:	bne	57f4 <rb_sha512_process_block+0x570>
    56fc:	ldr	r1, [sp, #8]
    5700:	ldr	r3, [sp, #32]
    5704:	adds	r3, r3, r6
    5708:	str	r3, [sp, #32]
    570c:	ldr	r3, [sp, #36]	; 0x24
    5710:	adc	r3, r3, r9
    5714:	str	r3, [sp, #36]	; 0x24
    5718:	ldr	r3, [sp, #40]	; 0x28
    571c:	adds	r3, r3, lr
    5720:	str	r3, [sp, #40]	; 0x28
    5724:	ldr	r3, [sp, #44]	; 0x2c
    5728:	adc	r3, r3, r4
    572c:	str	r3, [sp, #44]	; 0x2c
    5730:	ldr	r3, [sp, #48]	; 0x30
    5734:	adds	r3, r3, r1
    5738:	ldr	r1, [sp, #12]
    573c:	str	r3, [sp, #48]	; 0x30
    5740:	ldr	r3, [sp, #52]	; 0x34
    5744:	adc	r3, r3, r1
    5748:	ldr	r1, [sp, #16]
    574c:	str	r3, [sp, #52]	; 0x34
    5750:	ldr	r3, [sp, #56]	; 0x38
    5754:	adds	r3, r3, r1
    5758:	ldr	r1, [sp, #24]
    575c:	str	r3, [sp, #56]	; 0x38
    5760:	ldr	r3, [sp, #60]	; 0x3c
    5764:	adc	r3, r3, r8
    5768:	str	r3, [sp, #60]	; 0x3c
    576c:	ldr	r3, [sp, #64]	; 0x40
    5770:	adds	r3, r3, sl
    5774:	str	r3, [sp, #64]	; 0x40
    5778:	ldr	r3, [sp, #68]	; 0x44
    577c:	adc	r3, r3, fp
    5780:	str	r3, [sp, #68]	; 0x44
    5784:	ldr	r3, [sp, #72]	; 0x48
    5788:	adds	r3, r3, r0
    578c:	str	r3, [sp, #72]	; 0x48
    5790:	ldr	r3, [sp, #76]	; 0x4c
    5794:	adc	r3, r3, ip
    5798:	str	r3, [sp, #76]	; 0x4c
    579c:	ldr	r3, [sp, #80]	; 0x50
    57a0:	adds	r3, r3, r1
    57a4:	ldr	r1, [sp, #28]
    57a8:	str	r3, [sp, #80]	; 0x50
    57ac:	ldr	r3, [sp, #84]	; 0x54
    57b0:	adc	r3, r3, r1
    57b4:	str	r3, [sp, #84]	; 0x54
    57b8:	ldr	r3, [sp, #88]	; 0x58
    57bc:	ldr	r1, [sp, #96]	; 0x60
    57c0:	adds	r3, r3, r1
    57c4:	ldr	r1, [sp, #100]	; 0x64
    57c8:	str	r3, [sp, #88]	; 0x58
    57cc:	ldr	r3, [sp, #92]	; 0x5c
    57d0:	adc	r3, r3, r1
    57d4:	str	r3, [sp, #92]	; 0x5c
    57d8:	ldr	r3, [sp, #104]	; 0x68
    57dc:	sub	r3, r3, #16
    57e0:	str	r3, [sp, #104]	; 0x68
    57e4:	ldr	r3, [sp, #20]
    57e8:	add	r3, r3, #128	; 0x80
    57ec:	str	r3, [sp, #20]
    57f0:	b	5370 <rb_sha512_process_block+0xec>
    57f4:	ldr	r8, [sp, #12]
    57f8:	str	r4, [sp, #12]
    57fc:	mov	r4, r9
    5800:	ldr	r3, [sp, #24]
    5804:	str	r0, [sp, #24]
    5808:	mov	r0, sl
    580c:	str	r3, [sp, #96]	; 0x60
    5810:	ldr	r3, [sp, #28]
    5814:	str	ip, [sp, #28]
    5818:	mov	ip, fp
    581c:	str	r3, [sp, #100]	; 0x64
    5820:	ldr	r3, [sp, #8]
    5824:	str	lr, [sp, #8]
    5828:	mov	lr, r6
    582c:	str	r3, [sp, #16]
    5830:	b	5584 <rb_sha512_process_block+0x300>
    5834:	.word	0x0000d7e0

00005838 <rb_sha512_init_ctx>:
    5838:	add	r3, pc, #112	; 0x70
    583c:	ldrd	r2, [r3]
    5840:	strd	r2, [r0]
    5844:	add	r3, pc, #108	; 0x6c
    5848:	ldrd	r2, [r3]
    584c:	strd	r2, [r0, #8]
    5850:	add	r3, pc, #104	; 0x68
    5854:	ldrd	r2, [r3]
    5858:	strd	r2, [r0, #16]
    585c:	add	r3, pc, #100	; 0x64
    5860:	ldrd	r2, [r3]
    5864:	strd	r2, [r0, #24]
    5868:	add	r3, pc, #96	; 0x60
    586c:	ldrd	r2, [r3]
    5870:	strd	r2, [r0, #32]
    5874:	add	r3, pc, #92	; 0x5c
    5878:	ldrd	r2, [r3]
    587c:	strd	r2, [r0, #40]	; 0x28
    5880:	add	r3, pc, #88	; 0x58
    5884:	ldrd	r2, [r3]
    5888:	strd	r2, [r0, #48]	; 0x30
    588c:	add	r3, pc, #84	; 0x54
    5890:	ldrd	r2, [r3]
    5894:	strd	r2, [r0, #56]	; 0x38
    5898:	mov	r2, #0
    589c:	mov	r3, #0
    58a0:	strd	r2, [r0, #64]	; 0x40
    58a4:	strd	r2, [r0, #72]	; 0x48
    58a8:	strd	r2, [r0, #80]	; 0x50
    58ac:	bx	lr
    58b0:	.word	0xf3bcc908
    58b4:	.word	0x6a09e667
    58b8:	.word	0x84caa73b
    58bc:	.word	0xbb67ae85
    58c0:	.word	0xfe94f82b
    58c4:	.word	0x3c6ef372
    58c8:	.word	0x5f1d36f1
    58cc:	.word	0xa54ff53a
    58d0:	.word	0xade682d1
    58d4:	.word	0x510e527f
    58d8:	.word	0x2b3e6c1f
    58dc:	.word	0x9b05688c
    58e0:	.word	0xfb41bd6b
    58e4:	.word	0x1f83d9ab
    58e8:	.word	0x137e2179
    58ec:	.word	0x5be0cd19

000058f0 <MD5Transform>:
    58f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58f4:	sub	sp, sp, #76	; 0x4c
    58f8:	mov	r4, r0
    58fc:	add	ip, sp, #8
    5900:	add	r7, r1, #64	; 0x40
    5904:	ldm	r0, {r3, lr}
    5908:	ldr	r5, [r0, #8]
    590c:	ldr	r6, [r0, #12]
    5910:	str	r3, [sp, #4]
    5914:	mov	r3, r1
    5918:	ldr	r0, [r3]
    591c:	mov	r2, ip
    5920:	add	r3, r3, #8
    5924:	ldr	r1, [r3, #-4]
    5928:	cmp	r3, r7
    592c:	stmia	r2!, {r0, r1}
    5930:	mov	ip, r2
    5934:	bne	5918 <MD5Transform+0x28>
    5938:	ldr	r3, [pc, #2228]	; 61f4 <MD5Transform+0x904>
    593c:	ldr	r2, [sp, #8]
    5940:	ldr	r1, [pc, #2224]	; 61f8 <MD5Transform+0x908>
    5944:	ldr	r0, [pc, #2224]	; 61fc <MD5Transform+0x90c>
    5948:	add	r3, r2, r3
    594c:	ldr	r2, [sp, #4]
    5950:	ldr	fp, [sp, #12]
    5954:	ldr	ip, [sp, #20]
    5958:	add	r2, r3, r2
    595c:	eor	r3, r5, r6
    5960:	and	r3, r3, lr
    5964:	ldr	r7, [sp, #24]
    5968:	eor	r3, r3, r6
    596c:	add	r3, r3, r2
    5970:	ldr	r2, [sp, #12]
    5974:	add	r3, lr, r3, ror #25
    5978:	ldr	sl, [sp, #36]	; 0x24
    597c:	ldr	r8, [sp, #56]	; 0x38
    5980:	add	r1, r2, r1
    5984:	add	r2, r1, r6
    5988:	eor	r1, lr, r5
    598c:	ldr	r9, [sp, #64]	; 0x40
    5990:	and	r1, r1, r3
    5994:	eor	r1, r1, r5
    5998:	add	r1, r1, r2
    599c:	ldr	r2, [sp, #16]
    59a0:	add	r1, r3, r1, ror #20
    59a4:	add	r0, r2, r0
    59a8:	add	r2, r0, r5
    59ac:	eor	r0, lr, r3
    59b0:	and	r0, r0, r1
    59b4:	eor	r0, r0, lr
    59b8:	add	r0, r0, r2
    59bc:	ldr	r2, [pc, #2108]	; 6200 <MD5Transform+0x910>
    59c0:	add	r0, r1, r0, ror #15
    59c4:	add	r2, ip, r2
    59c8:	add	ip, r2, lr
    59cc:	eor	r2, r3, r1
    59d0:	and	r2, r2, r0
    59d4:	eor	r2, r2, r3
    59d8:	add	r2, r2, ip
    59dc:	ldr	ip, [pc, #2080]	; 6204 <MD5Transform+0x914>
    59e0:	add	r2, r0, r2, ror #10
    59e4:	add	ip, r7, ip
    59e8:	ldr	r7, [sp, #28]
    59ec:	add	ip, ip, r3
    59f0:	eor	r3, r1, r0
    59f4:	and	r3, r3, r2
    59f8:	eor	r3, r3, r1
    59fc:	add	r3, r3, ip
    5a00:	ldr	ip, [pc, #2048]	; 6208 <MD5Transform+0x918>
    5a04:	add	r3, r2, r3, ror #25
    5a08:	add	ip, r7, ip
    5a0c:	ldr	r7, [sp, #32]
    5a10:	add	ip, ip, r1
    5a14:	eor	r1, r0, r2
    5a18:	and	r1, r1, r3
    5a1c:	eor	r1, r1, r0
    5a20:	add	r1, r1, ip
    5a24:	ldr	ip, [pc, #2016]	; 620c <MD5Transform+0x91c>
    5a28:	add	r1, r3, r1, ror #20
    5a2c:	add	ip, r7, ip
    5a30:	ldr	r7, [sp, #40]	; 0x28
    5a34:	add	ip, ip, r0
    5a38:	eor	r0, r2, r3
    5a3c:	and	r0, r0, r1
    5a40:	eor	r0, r0, r2
    5a44:	add	r0, r0, ip
    5a48:	ldr	ip, [pc, #1984]	; 6210 <MD5Transform+0x920>
    5a4c:	add	r0, r1, r0, ror #15
    5a50:	add	ip, sl, ip
    5a54:	add	ip, ip, r2
    5a58:	eor	r2, r3, r1
    5a5c:	and	r2, r2, r0
    5a60:	eor	r2, r2, r3
    5a64:	add	r2, r2, ip
    5a68:	ldr	ip, [pc, #1956]	; 6214 <MD5Transform+0x924>
    5a6c:	add	r2, r0, r2, ror #10
    5a70:	add	ip, r7, ip
    5a74:	ldr	r7, [sp, #44]	; 0x2c
    5a78:	add	ip, ip, r3
    5a7c:	eor	r3, r1, r0
    5a80:	and	r3, r3, r2
    5a84:	eor	r3, r3, r1
    5a88:	add	r3, r3, ip
    5a8c:	ldr	ip, [pc, #1924]	; 6218 <MD5Transform+0x928>
    5a90:	add	r3, r2, r3, ror #25
    5a94:	add	ip, r7, ip
    5a98:	ldr	r7, [sp, #52]	; 0x34
    5a9c:	add	ip, ip, r1
    5aa0:	eor	r1, r0, r2
    5aa4:	and	r1, r1, r3
    5aa8:	eor	r1, r1, r0
    5aac:	add	r1, r1, ip
    5ab0:	ldr	ip, [sp, #48]	; 0x30
    5ab4:	add	r1, r3, r1, ror #20
    5ab8:	sub	ip, ip, #41984	; 0xa400
    5abc:	sub	ip, ip, #79	; 0x4f
    5ac0:	add	ip, ip, r0
    5ac4:	eor	r0, r2, r3
    5ac8:	and	r0, r0, r1
    5acc:	eor	r0, r0, r2
    5ad0:	add	r0, r0, ip
    5ad4:	ldr	ip, [pc, #1856]	; 621c <MD5Transform+0x92c>
    5ad8:	add	r0, r1, r0, ror #15
    5adc:	add	ip, r7, ip
    5ae0:	ldr	r7, [sp, #60]	; 0x3c
    5ae4:	add	ip, ip, r2
    5ae8:	eor	r2, r3, r1
    5aec:	and	r2, r2, r0
    5af0:	eor	r2, r2, r3
    5af4:	add	r2, r2, ip
    5af8:	ldr	ip, [pc, #1824]	; 6220 <MD5Transform+0x930>
    5afc:	add	r2, r0, r2, ror #10
    5b00:	add	ip, r8, ip
    5b04:	add	ip, ip, r3
    5b08:	eor	r3, r1, r0
    5b0c:	and	r3, r3, r2
    5b10:	eor	r3, r3, r1
    5b14:	add	r3, r3, ip
    5b18:	ldr	ip, [pc, #1796]	; 6224 <MD5Transform+0x934>
    5b1c:	add	r3, r2, r3, ror #25
    5b20:	add	ip, r7, ip
    5b24:	ldr	r7, [sp, #68]	; 0x44
    5b28:	add	ip, ip, r1
    5b2c:	eor	r1, r0, r2
    5b30:	and	r1, r1, r3
    5b34:	eor	r1, r1, r0
    5b38:	add	r1, r1, ip
    5b3c:	ldr	ip, [pc, #1764]	; 6228 <MD5Transform+0x938>
    5b40:	add	r1, r3, r1, ror #20
    5b44:	add	ip, r9, ip
    5b48:	add	ip, ip, r0
    5b4c:	eor	r0, r2, r3
    5b50:	and	r0, r0, r1
    5b54:	eor	r0, r0, r2
    5b58:	add	r0, r0, ip
    5b5c:	ldr	ip, [pc, #1736]	; 622c <MD5Transform+0x93c>
    5b60:	add	r0, r1, r0, ror #15
    5b64:	add	ip, r7, ip
    5b68:	add	ip, ip, r2
    5b6c:	eor	r2, r3, r1
    5b70:	and	r2, r2, r0
    5b74:	eor	r2, r2, r3
    5b78:	add	r2, r2, ip
    5b7c:	ldr	ip, [pc, #1708]	; 6230 <MD5Transform+0x940>
    5b80:	add	r2, r0, r2, ror #10
    5b84:	add	ip, fp, ip
    5b88:	ldr	fp, [sp, #32]
    5b8c:	add	ip, ip, r3
    5b90:	eor	r3, r0, r2
    5b94:	and	r3, r3, r1
    5b98:	eor	r3, r3, r0
    5b9c:	add	r3, r3, ip
    5ba0:	ldr	ip, [pc, #1676]	; 6234 <MD5Transform+0x944>
    5ba4:	add	r3, r2, r3, ror #27
    5ba8:	add	ip, fp, ip
    5bac:	ldr	fp, [sp, #52]	; 0x34
    5bb0:	add	ip, ip, r1
    5bb4:	eor	r1, r2, r3
    5bb8:	and	r1, r1, r0
    5bbc:	eor	r1, r1, r2
    5bc0:	add	r1, r1, ip
    5bc4:	ldr	ip, [pc, #1644]	; 6238 <MD5Transform+0x948>
    5bc8:	add	r1, r3, r1, ror #23
    5bcc:	add	ip, fp, ip
    5bd0:	ldr	fp, [sp, #8]
    5bd4:	add	ip, ip, r0
    5bd8:	eor	r0, r3, r1
    5bdc:	and	r0, r0, r2
    5be0:	eor	r0, r0, r3
    5be4:	add	r0, r0, ip
    5be8:	ldr	ip, [pc, #1612]	; 623c <MD5Transform+0x94c>
    5bec:	add	r0, r1, r0, ror #18
    5bf0:	add	ip, fp, ip
    5bf4:	ldr	fp, [sp, #28]
    5bf8:	add	ip, ip, r2
    5bfc:	eor	r2, r1, r0
    5c00:	and	r2, r2, r3
    5c04:	eor	r2, r2, r1
    5c08:	add	r2, r2, ip
    5c0c:	ldr	ip, [pc, #1580]	; 6240 <MD5Transform+0x950>
    5c10:	add	r2, r0, r2, ror #12
    5c14:	add	ip, fp, ip
    5c18:	ldr	fp, [sp, #48]	; 0x30
    5c1c:	add	ip, ip, r3
    5c20:	eor	r3, r0, r2
    5c24:	and	r3, r3, r1
    5c28:	eor	r3, r3, r0
    5c2c:	add	r3, r3, ip
    5c30:	ldr	ip, [pc, #1548]	; 6244 <MD5Transform+0x954>
    5c34:	add	r3, r2, r3, ror #27
    5c38:	add	ip, fp, ip
    5c3c:	ldr	fp, [sp, #24]
    5c40:	add	ip, ip, r1
    5c44:	eor	r1, r2, r3
    5c48:	and	r1, r1, r0
    5c4c:	eor	r1, r1, r2
    5c50:	add	r1, r1, ip
    5c54:	ldr	ip, [pc, #1516]	; 6248 <MD5Transform+0x958>
    5c58:	add	r1, r3, r1, ror #23
    5c5c:	add	ip, r7, ip
    5c60:	add	ip, ip, r0
    5c64:	eor	r0, r3, r1
    5c68:	and	r0, r0, r2
    5c6c:	eor	r0, r0, r3
    5c70:	add	r0, r0, ip
    5c74:	ldr	ip, [pc, #1488]	; 624c <MD5Transform+0x95c>
    5c78:	add	r0, r1, r0, ror #18
    5c7c:	add	ip, fp, ip
    5c80:	ldr	fp, [sp, #44]	; 0x2c
    5c84:	add	ip, ip, r2
    5c88:	eor	r2, r1, r0
    5c8c:	and	r2, r2, r3
    5c90:	eor	r2, r2, r1
    5c94:	add	r2, r2, ip
    5c98:	ldr	ip, [pc, #1456]	; 6250 <MD5Transform+0x960>
    5c9c:	add	r2, r0, r2, ror #12
    5ca0:	add	ip, fp, ip
    5ca4:	ldr	fp, [sp, #20]
    5ca8:	add	ip, ip, r3
    5cac:	eor	r3, r0, r2
    5cb0:	and	r3, r3, r1
    5cb4:	eor	r3, r3, r0
    5cb8:	add	r3, r3, ip
    5cbc:	ldr	ip, [pc, #1424]	; 6254 <MD5Transform+0x964>
    5cc0:	add	r3, r2, r3, ror #27
    5cc4:	add	ip, r9, ip
    5cc8:	add	ip, ip, r1
    5ccc:	eor	r1, r2, r3
    5cd0:	and	r1, r1, r0
    5cd4:	eor	r1, r1, r2
    5cd8:	add	r1, r1, ip
    5cdc:	ldr	ip, [pc, #1396]	; 6258 <MD5Transform+0x968>
    5ce0:	add	r1, r3, r1, ror #23
    5ce4:	add	ip, fp, ip
    5ce8:	ldr	fp, [sp, #40]	; 0x28
    5cec:	add	r0, ip, r0
    5cf0:	eor	ip, r3, r1
    5cf4:	and	ip, ip, r2
    5cf8:	eor	ip, ip, r3
    5cfc:	add	r0, ip, r0
    5d00:	ldr	ip, [pc, #1364]	; 625c <MD5Transform+0x96c>
    5d04:	add	r0, r1, r0, ror #18
    5d08:	add	ip, fp, ip
    5d0c:	ldr	fp, [sp, #60]	; 0x3c
    5d10:	add	r2, ip, r2
    5d14:	eor	ip, r1, r0
    5d18:	and	ip, ip, r3
    5d1c:	eor	ip, ip, r1
    5d20:	add	r2, ip, r2
    5d24:	ldr	ip, [pc, #1332]	; 6260 <MD5Transform+0x970>
    5d28:	add	r2, r0, r2, ror #12
    5d2c:	add	ip, fp, ip
    5d30:	ldr	fp, [sp, #16]
    5d34:	add	r3, ip, r3
    5d38:	eor	ip, r0, r2
    5d3c:	and	ip, ip, r1
    5d40:	eor	ip, ip, r0
    5d44:	add	r3, ip, r3
    5d48:	ldr	ip, [pc, #1300]	; 6264 <MD5Transform+0x974>
    5d4c:	add	r3, r2, r3, ror #27
    5d50:	add	ip, fp, ip
    5d54:	ldr	fp, [pc, #1292]	; 6268 <MD5Transform+0x978>
    5d58:	add	r1, ip, r1
    5d5c:	eor	ip, r2, r3
    5d60:	and	ip, ip, r0
    5d64:	eor	ip, ip, r2
    5d68:	add	r1, ip, r1
    5d6c:	ldr	ip, [pc, #1272]	; 626c <MD5Transform+0x97c>
    5d70:	add	r1, r3, r1, ror #23
    5d74:	add	fp, r8, fp
    5d78:	add	fp, fp, r2
    5d7c:	add	ip, sl, ip
    5d80:	add	r0, ip, r0
    5d84:	eor	ip, r3, r1
    5d88:	and	ip, ip, r2
    5d8c:	eor	ip, ip, r3
    5d90:	add	ip, ip, r0
    5d94:	ldr	r0, [sp, #28]
    5d98:	add	ip, r1, ip, ror #18
    5d9c:	eor	r2, r1, ip
    5da0:	and	r2, r3, r2
    5da4:	eor	r2, r2, r1
    5da8:	add	r2, r2, fp
    5dac:	ldr	fp, [pc, #1212]	; 6270 <MD5Transform+0x980>
    5db0:	add	r2, ip, r2, ror #12
    5db4:	add	fp, r0, fp
    5db8:	eor	r0, r1, ip
    5dbc:	eor	r0, r0, r2
    5dc0:	add	r3, fp, r3
    5dc4:	ldr	fp, [sp, #40]	; 0x28
    5dc8:	add	r3, r0, r3
    5dcc:	ldr	r0, [pc, #1184]	; 6274 <MD5Transform+0x984>
    5dd0:	add	r3, r2, r3, ror #28
    5dd4:	add	r0, fp, r0
    5dd8:	ldr	fp, [sp, #52]	; 0x34
    5ddc:	add	r0, r0, r1
    5de0:	eor	r1, ip, r2
    5de4:	eor	r1, r1, r3
    5de8:	add	r1, r1, r0
    5dec:	ldr	r0, [pc, #1156]	; 6278 <MD5Transform+0x988>
    5df0:	add	r1, r3, r1, ror #21
    5df4:	add	r0, fp, r0
    5df8:	ldr	fp, [sp, #12]
    5dfc:	add	ip, r0, ip
    5e00:	eor	r0, r2, r3
    5e04:	eor	r0, r0, r1
    5e08:	add	ip, r0, ip
    5e0c:	ldr	r0, [pc, #1128]	; 627c <MD5Transform+0x98c>
    5e10:	add	ip, r1, ip, ror #16
    5e14:	add	r0, r9, r0
    5e18:	add	r0, r0, r2
    5e1c:	eor	r2, r3, r1
    5e20:	eor	r2, r2, ip
    5e24:	add	r2, r2, r0
    5e28:	ldr	r0, [pc, #1104]	; 6280 <MD5Transform+0x990>
    5e2c:	add	r2, ip, r2, ror #9
    5e30:	add	r0, fp, r0
    5e34:	ldr	fp, [sp, #24]
    5e38:	add	r0, r0, r3
    5e3c:	eor	r3, r1, ip
    5e40:	eor	r3, r3, r2
    5e44:	add	r3, r3, r0
    5e48:	ldr	r0, [pc, #1076]	; 6284 <MD5Transform+0x994>
    5e4c:	add	r3, r2, r3, ror #28
    5e50:	add	r0, fp, r0
    5e54:	ldr	fp, [sp, #48]	; 0x30
    5e58:	add	r0, r0, r1
    5e5c:	eor	r1, ip, r2
    5e60:	eor	r1, r1, r3
    5e64:	add	r1, r1, r0
    5e68:	ldr	r0, [pc, #1048]	; 6288 <MD5Transform+0x998>
    5e6c:	add	r1, r3, r1, ror #21
    5e70:	add	r0, sl, r0
    5e74:	add	ip, r0, ip
    5e78:	eor	r0, r2, r3
    5e7c:	eor	r0, r0, r1
    5e80:	add	r0, r0, ip
    5e84:	ldr	ip, [pc, #1024]	; 628c <MD5Transform+0x99c>
    5e88:	add	r0, r1, r0, ror #16
    5e8c:	add	ip, fp, ip
    5e90:	ldr	fp, [sp, #60]	; 0x3c
    5e94:	add	ip, ip, r2
    5e98:	eor	r2, r3, r1
    5e9c:	eor	r2, r2, r0
    5ea0:	add	r2, r2, ip
    5ea4:	ldr	ip, [pc, #996]	; 6290 <MD5Transform+0x9a0>
    5ea8:	add	r2, r0, r2, ror #9
    5eac:	add	ip, fp, ip
    5eb0:	ldr	fp, [sp, #8]
    5eb4:	add	ip, ip, r3
    5eb8:	eor	r3, r1, r0
    5ebc:	eor	r3, r3, r2
    5ec0:	add	r3, r3, ip
    5ec4:	ldr	ip, [pc, #968]	; 6294 <MD5Transform+0x9a4>
    5ec8:	add	r3, r2, r3, ror #28
    5ecc:	add	ip, fp, ip
    5ed0:	ldr	fp, [sp, #20]
    5ed4:	add	r1, ip, r1
    5ed8:	eor	ip, r0, r2
    5edc:	eor	ip, ip, r3
    5ee0:	add	r1, ip, r1
    5ee4:	ldr	ip, [pc, #940]	; 6298 <MD5Transform+0x9a8>
    5ee8:	add	r1, r3, r1, ror #21
    5eec:	add	ip, fp, ip
    5ef0:	ldr	fp, [sp, #32]
    5ef4:	add	ip, ip, r0
    5ef8:	eor	r0, r2, r3
    5efc:	eor	r0, r0, r1
    5f00:	add	r0, r0, ip
    5f04:	ldr	ip, [pc, #912]	; 629c <MD5Transform+0x9ac>
    5f08:	add	r0, r1, r0, ror #16
    5f0c:	add	ip, fp, ip
    5f10:	ldr	fp, [sp, #44]	; 0x2c
    5f14:	add	r2, ip, r2
    5f18:	eor	ip, r3, r1
    5f1c:	eor	ip, ip, r0
    5f20:	add	ip, ip, r2
    5f24:	ldr	r2, [pc, #884]	; 62a0 <MD5Transform+0x9b0>
    5f28:	add	ip, r0, ip, ror #9
    5f2c:	add	r2, fp, r2
    5f30:	ldr	fp, [sp, #16]
    5f34:	add	r3, r2, r3
    5f38:	eor	r2, r1, r0
    5f3c:	eor	r2, r2, ip
    5f40:	add	r2, r2, r3
    5f44:	ldr	r3, [pc, #856]	; 62a4 <MD5Transform+0x9b4>
    5f48:	add	r2, ip, r2, ror #28
    5f4c:	add	r3, r8, r3
    5f50:	add	r3, r3, r1
    5f54:	eor	r1, r0, ip
    5f58:	eor	r1, r1, r2
    5f5c:	add	r1, r1, r3
    5f60:	ldr	r3, [pc, #832]	; 62a8 <MD5Transform+0x9b8>
    5f64:	add	r1, r2, r1, ror #21
    5f68:	add	r3, r7, r3
    5f6c:	add	r0, r3, r0
    5f70:	eor	r3, ip, r2
    5f74:	eor	r3, r3, r1
    5f78:	add	r0, r3, r0
    5f7c:	ldr	r3, [pc, #808]	; 62ac <MD5Transform+0x9bc>
    5f80:	add	r0, r1, r0, ror #16
    5f84:	add	r3, fp, r3
    5f88:	ldr	fp, [sp, #8]
    5f8c:	add	ip, r3, ip
    5f90:	eor	r3, r2, r1
    5f94:	eor	r3, r3, r0
    5f98:	add	r3, r3, ip
    5f9c:	ldr	ip, [pc, #780]	; 62b0 <MD5Transform+0x9c0>
    5fa0:	add	r3, r0, r3, ror #9
    5fa4:	add	ip, fp, ip
    5fa8:	mvn	fp, r1
    5fac:	add	r2, ip, r2
    5fb0:	ldr	ip, [pc, #764]	; 62b4 <MD5Transform+0x9c4>
    5fb4:	orr	fp, fp, r3
    5fb8:	eor	fp, fp, r0
    5fbc:	add	r2, fp, r2
    5fc0:	add	r2, r3, r2, ror #26
    5fc4:	add	ip, sl, ip
    5fc8:	mvn	sl, r0
    5fcc:	add	r1, ip, r1
    5fd0:	ldr	ip, [pc, #736]	; 62b8 <MD5Transform+0x9c8>
    5fd4:	orr	sl, sl, r2
    5fd8:	eor	sl, sl, r3
    5fdc:	add	r1, sl, r1
    5fe0:	add	r1, r2, r1, ror #22
    5fe4:	add	ip, r9, ip
    5fe8:	mvn	r9, r3
    5fec:	orr	r9, r9, r1
    5ff0:	add	r0, ip, r0
    5ff4:	ldr	ip, [pc, #704]	; 62bc <MD5Transform+0x9cc>
    5ff8:	eor	r9, r9, r2
    5ffc:	add	r0, r9, r0
    6000:	ldr	r9, [sp, #28]
    6004:	add	r0, r1, r0, ror #17
    6008:	add	ip, r9, ip
    600c:	mvn	r9, r2
    6010:	add	r3, ip, r3
    6014:	ldr	ip, [pc, #676]	; 62c0 <MD5Transform+0x9d0>
    6018:	orr	r9, r9, r0
    601c:	eor	r9, r9, r1
    6020:	add	r3, r9, r3
    6024:	add	r3, r0, r3, ror #11
    6028:	add	ip, r8, ip
    602c:	mvn	r8, r1
    6030:	orr	r8, r8, r3
    6034:	add	r2, ip, r2
    6038:	ldr	ip, [pc, #644]	; 62c4 <MD5Transform+0x9d4>
    603c:	eor	r8, r8, r0
    6040:	add	r2, r8, r2
    6044:	ldr	r8, [sp, #20]
    6048:	add	r2, r3, r2, ror #26
    604c:	add	ip, r8, ip
    6050:	mvn	r8, r0
    6054:	orr	r8, r8, r2
    6058:	add	r1, ip, r1
    605c:	ldr	ip, [pc, #612]	; 62c8 <MD5Transform+0x9d8>
    6060:	eor	r8, r8, r3
    6064:	add	r1, r8, r1
    6068:	ldr	r8, [sp, #48]	; 0x30
    606c:	add	r1, r2, r1, ror #22
    6070:	add	ip, r8, ip
    6074:	mvn	r8, r3
    6078:	orr	r8, r8, r1
    607c:	add	r0, ip, r0
    6080:	ldr	ip, [pc, #580]	; 62cc <MD5Transform+0x9dc>
    6084:	eor	r8, r8, r2
    6088:	add	r0, r8, r0
    608c:	ldr	r8, [sp, #12]
    6090:	add	r0, r1, r0, ror #17
    6094:	add	ip, r8, ip
    6098:	mvn	r8, r2
    609c:	orr	r8, r8, r0
    60a0:	add	r3, ip, r3
    60a4:	ldr	ip, [pc, #548]	; 62d0 <MD5Transform+0x9e0>
    60a8:	eor	r8, r8, r1
    60ac:	add	r3, r8, r3
    60b0:	ldr	r8, [sp, #40]	; 0x28
    60b4:	add	r3, r0, r3, ror #11
    60b8:	add	ip, r8, ip
    60bc:	mvn	r8, r1
    60c0:	add	r2, ip, r2
    60c4:	ldr	ip, [pc, #520]	; 62d4 <MD5Transform+0x9e4>
    60c8:	orr	r8, r8, r3
    60cc:	eor	r8, r8, r0
    60d0:	add	r2, r8, r2
    60d4:	add	r2, r3, r2, ror #26
    60d8:	add	ip, r7, ip
    60dc:	mvn	r7, r0
    60e0:	orr	r7, r7, r2
    60e4:	add	r1, ip, r1
    60e8:	ldr	ip, [pc, #488]	; 62d8 <MD5Transform+0x9e8>
    60ec:	eor	r7, r7, r3
    60f0:	add	r1, r7, r1
    60f4:	ldr	r7, [sp, #32]
    60f8:	add	r1, r2, r1, ror #22
    60fc:	add	ip, r7, ip
    6100:	mvn	r7, r3
    6104:	orr	r7, r7, r1
    6108:	add	r0, ip, r0
    610c:	ldr	ip, [pc, #456]	; 62dc <MD5Transform+0x9ec>
    6110:	eor	r7, r7, r2
    6114:	add	r0, r7, r0
    6118:	ldr	r7, [sp, #60]	; 0x3c
    611c:	add	r0, r1, r0, ror #17
    6120:	add	ip, r7, ip
    6124:	ldr	r7, [sp, #24]
    6128:	add	ip, ip, r3
    612c:	mvn	r3, r2
    6130:	orr	r3, r3, r0
    6134:	eor	r3, r3, r1
    6138:	add	r3, r3, ip
    613c:	ldr	ip, [pc, #412]	; 62e0 <MD5Transform+0x9f0>
    6140:	add	r3, r0, r3, ror #11
    6144:	add	ip, r7, ip
    6148:	ldr	r7, [sp, #52]	; 0x34
    614c:	add	ip, ip, r2
    6150:	mvn	r2, r1
    6154:	orr	r2, r2, r3
    6158:	eor	r2, r2, r0
    615c:	add	r2, r2, ip
    6160:	ldr	ip, [pc, #380]	; 62e4 <MD5Transform+0x9f4>
    6164:	add	r2, r3, r2, ror #26
    6168:	add	ip, r7, ip
    616c:	ldr	r7, [sp, #16]
    6170:	add	ip, ip, r1
    6174:	mvn	r1, r0
    6178:	orr	r1, r1, r2
    617c:	eor	r1, r1, r3
    6180:	add	r1, r1, ip
    6184:	ldr	ip, [pc, #348]	; 62e8 <MD5Transform+0x9f8>
    6188:	add	r1, r2, r1, ror #22
    618c:	add	r6, r6, r1
    6190:	add	ip, r7, ip
    6194:	ldr	r7, [sp, #44]	; 0x2c
    6198:	add	ip, ip, r0
    619c:	mvn	r0, r3
    61a0:	str	r6, [r4, #12]
    61a4:	orr	r0, r0, r1
    61a8:	eor	r0, r0, r2
    61ac:	add	r0, r0, ip
    61b0:	ldr	ip, [pc, #308]	; 62ec <MD5Transform+0x9fc>
    61b4:	add	r0, r1, r0, ror #17
    61b8:	add	lr, lr, r0
    61bc:	add	r5, r5, r0
    61c0:	add	ip, r7, ip
    61c4:	str	r5, [r4, #8]
    61c8:	add	ip, ip, r3
    61cc:	mvn	r3, r2
    61d0:	orr	r3, r3, r0
    61d4:	eor	r3, r3, r1
    61d8:	add	r3, r3, ip
    61dc:	ldr	ip, [sp, #4]
    61e0:	add	lr, lr, r3, ror #11
    61e4:	add	r2, ip, r2
    61e8:	stm	r4, {r2, lr}
    61ec:	add	sp, sp, #76	; 0x4c
    61f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61f4:	.word	0xd76aa478
    61f8:	.word	0xe8c7b756
    61fc:	.word	0x242070db
    6200:	.word	0xc1bdceee
    6204:	.word	0xf57c0faf
    6208:	.word	0x4787c62a
    620c:	.word	0xa8304613
    6210:	.word	0xfd469501
    6214:	.word	0x698098d8
    6218:	.word	0x8b44f7af
    621c:	.word	0x895cd7be
    6220:	.word	0x6b901122
    6224:	.word	0xfd987193
    6228:	.word	0xa679438e
    622c:	.word	0x49b40821
    6230:	.word	0xf61e2562
    6234:	.word	0xc040b340
    6238:	.word	0x265e5a51
    623c:	.word	0xe9b6c7aa
    6240:	.word	0xd62f105d
    6244:	.word	0x02441453
    6248:	.word	0xd8a1e681
    624c:	.word	0xe7d3fbc8
    6250:	.word	0x21e1cde6
    6254:	.word	0xc33707d6
    6258:	.word	0xf4d50d87
    625c:	.word	0x455a14ed
    6260:	.word	0xa9e3e905
    6264:	.word	0xfcefa3f8
    6268:	.word	0x8d2a4c8a
    626c:	.word	0x676f02d9
    6270:	.word	0xfffa3942
    6274:	.word	0x8771f681
    6278:	.word	0x6d9d6122
    627c:	.word	0xfde5380c
    6280:	.word	0xa4beea44
    6284:	.word	0x4bdecfa9
    6288:	.word	0xf6bb4b60
    628c:	.word	0xbebfbc70
    6290:	.word	0x289b7ec6
    6294:	.word	0xeaa127fa
    6298:	.word	0xd4ef3085
    629c:	.word	0x04881d05
    62a0:	.word	0xd9d4d039
    62a4:	.word	0xe6db99e5
    62a8:	.word	0x1fa27cf8
    62ac:	.word	0xc4ac5665
    62b0:	.word	0xf4292244
    62b4:	.word	0x432aff97
    62b8:	.word	0xab9423a7
    62bc:	.word	0xfc93a039
    62c0:	.word	0x655b59c3
    62c4:	.word	0x8f0ccc92
    62c8:	.word	0xffeff47d
    62cc:	.word	0x85845dd1
    62d0:	.word	0x6fa87e4f
    62d4:	.word	0xfe2ce6e0
    62d8:	.word	0xa3014314
    62dc:	.word	0x4e0811a1
    62e0:	.word	0xf7537e82
    62e4:	.word	0xbd3af235
    62e8:	.word	0x2ad7d2bb
    62ec:	.word	0xeb86d391

000062f0 <MD5Update>:
    62f0:	ldr	r3, [r0, #16]
    62f4:	push	{r4, r5, r6, r7, r8, lr}
    62f8:	mov	r6, r2
    62fc:	lsl	r2, r2, #3
    6300:	mov	r4, r0
    6304:	mov	r7, r1
    6308:	ubfx	r0, r3, #3, #6
    630c:	adds	r3, r3, r2
    6310:	str	r3, [r4, #16]
    6314:	rsb	r5, r0, #64	; 0x40
    6318:	ldrcs	r3, [r4, #20]
    631c:	addcs	r3, r3, #1
    6320:	strcs	r3, [r4, #20]
    6324:	cmp	r6, r5
    6328:	ldr	r3, [r4, #20]
    632c:	movcc	r5, #0
    6330:	add	r3, r3, r6, lsr #29
    6334:	str	r3, [r4, #20]
    6338:	bcc	636c <MD5Update+0x7c>
    633c:	add	r0, r0, #24
    6340:	mov	r2, r5
    6344:	add	r0, r4, r0
    6348:	bl	47dc <memcpy@plt>
    634c:	add	r1, r4, #24
    6350:	mov	r0, r4
    6354:	bl	58f0 <MD5Transform>
    6358:	add	r3, r5, #63	; 0x3f
    635c:	add	r1, r7, r5
    6360:	cmp	r6, r3
    6364:	bhi	6384 <MD5Update+0x94>
    6368:	mov	r0, #0
    636c:	add	r0, r0, #24
    6370:	sub	r2, r6, r5
    6374:	add	r1, r7, r5
    6378:	add	r0, r4, r0
    637c:	pop	{r4, r5, r6, r7, r8, lr}
    6380:	b	47dc <memcpy@plt>
    6384:	mov	r0, r4
    6388:	add	r5, r5, #64	; 0x40
    638c:	bl	58f0 <MD5Transform>
    6390:	b	6358 <MD5Update+0x68>

00006394 <MD5Final>:
    6394:	add	r3, r1, #16
    6398:	push	{r0, r1, r4, r5, r6, lr}
    639c:	mov	r4, r1
    63a0:	mov	r5, r0
    63a4:	mov	r6, sp
    63a8:	ldm	r3, {r0, r1}
    63ac:	stm	r6, {r0, r1}
    63b0:	ubfx	r2, r0, #3, #6
    63b4:	mov	r0, r4
    63b8:	ldr	r1, [pc, #64]	; 6400 <MD5Final+0x6c>
    63bc:	cmp	r2, #55	; 0x37
    63c0:	rsbls	r2, r2, #56	; 0x38
    63c4:	rsbhi	r2, r2, #120	; 0x78
    63c8:	add	r1, pc, r1
    63cc:	bl	62f0 <MD5Update>
    63d0:	mov	r1, r6
    63d4:	mov	r0, r4
    63d8:	mov	r2, #8
    63dc:	bl	62f0 <MD5Update>
    63e0:	ldm	r4, {r0, r1, r2, r3}
    63e4:	stm	r5, {r0, r1, r2, r3}
    63e8:	mov	r2, #88	; 0x58
    63ec:	mov	r1, #0
    63f0:	mov	r0, r4
    63f4:	add	sp, sp, #8
    63f8:	pop	{r4, r5, r6, lr}
    63fc:	b	45fc <memset@plt>
    6400:	.word	0x0001f054

00006404 <rb_sha256_process_bytes>:
    6404:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    6408:	mov	r6, r0
    640c:	mov	r5, r1
    6410:	mov	r4, r2
    6414:	ldr	r7, [r2, #40]	; 0x28
    6418:	cmp	r7, #0
    641c:	beq	6494 <rb_sha256_process_bytes+0x90>
    6420:	rsb	r8, r7, #128	; 0x80
    6424:	add	r0, r7, #44	; 0x2c
    6428:	cmp	r8, r1
    642c:	add	r0, r4, r0
    6430:	movcs	r8, r1
    6434:	mov	r1, r6
    6438:	mov	r2, r8
    643c:	bl	47dc <memcpy@plt>
    6440:	ldr	r1, [r4, #40]	; 0x28
    6444:	add	r1, r8, r1
    6448:	cmp	r1, #64	; 0x40
    644c:	str	r1, [r4, #40]	; 0x28
    6450:	bls	648c <rb_sha256_process_bytes+0x88>
    6454:	add	r9, r4, #44	; 0x2c
    6458:	mov	r2, r4
    645c:	bic	r1, r1, #63	; 0x3f
    6460:	mov	r0, r9
    6464:	bl	4fac <rb_sha256_process_block>
    6468:	ldr	r2, [r4, #40]	; 0x28
    646c:	add	r1, r7, r8
    6470:	mov	r0, r9
    6474:	bic	r1, r1, #63	; 0x3f
    6478:	add	r1, r1, #44	; 0x2c
    647c:	add	r1, r4, r1
    6480:	and	r2, r2, #63	; 0x3f
    6484:	str	r2, [r4, #40]	; 0x28
    6488:	bl	47dc <memcpy@plt>
    648c:	add	r6, r6, r8
    6490:	sub	r5, r5, r8
    6494:	cmp	r5, #63	; 0x3f
    6498:	bls	64cc <rb_sha256_process_bytes+0xc8>
    649c:	tst	r6, #3
    64a0:	movne	r7, r5
    64a4:	addne	r9, r6, r5
    64a8:	addne	r8, r4, #44	; 0x2c
    64ac:	bne	6514 <rb_sha256_process_bytes+0x110>
    64b0:	bic	r7, r5, #63	; 0x3f
    64b4:	mov	r0, r6
    64b8:	mov	r2, r4
    64bc:	mov	r1, r7
    64c0:	add	r6, r6, r7
    64c4:	and	r5, r5, #63	; 0x3f
    64c8:	bl	4fac <rb_sha256_process_block>
    64cc:	cmp	r5, #0
    64d0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    64d4:	b	6534 <rb_sha256_process_bytes+0x130>
    64d8:	mov	ip, r8
    64dc:	add	lr, r3, #64	; 0x40
    64e0:	ldr	r0, [r3]
    64e4:	mov	r2, ip
    64e8:	add	r3, r3, #8
    64ec:	ldr	r1, [r3, #-4]
    64f0:	cmp	r3, lr
    64f4:	stmia	r2!, {r0, r1}
    64f8:	mov	ip, r2
    64fc:	bne	64e0 <rb_sha256_process_bytes+0xdc>
    6500:	mov	r2, r4
    6504:	mov	r1, #64	; 0x40
    6508:	mov	r0, r8
    650c:	sub	r7, r7, #64	; 0x40
    6510:	bl	4fac <rb_sha256_process_block>
    6514:	cmp	r7, #64	; 0x40
    6518:	sub	r3, r9, r7
    651c:	bhi	64d8 <rb_sha256_process_bytes+0xd4>
    6520:	sub	r3, r5, #1
    6524:	mvn	r2, #63	; 0x3f
    6528:	lsr	r3, r3, #6
    652c:	add	r6, r6, r3, lsl #6
    6530:	mla	r5, r2, r3, r5
    6534:	ldr	r7, [r4, #40]	; 0x28
    6538:	mov	r2, r5
    653c:	mov	r1, r6
    6540:	add	r0, r7, #44	; 0x2c
    6544:	add	r5, r7, r5
    6548:	add	r0, r4, r0
    654c:	bl	47dc <memcpy@plt>
    6550:	cmp	r5, #63	; 0x3f
    6554:	bls	6580 <rb_sha256_process_bytes+0x17c>
    6558:	add	r6, r4, #44	; 0x2c
    655c:	mov	r2, r4
    6560:	mov	r1, #64	; 0x40
    6564:	mov	r0, r6
    6568:	sub	r5, r5, #64	; 0x40
    656c:	bl	4fac <rb_sha256_process_block>
    6570:	mov	r2, r5
    6574:	add	r1, r4, #108	; 0x6c
    6578:	mov	r0, r6
    657c:	bl	47dc <memcpy@plt>
    6580:	str	r5, [r4, #40]	; 0x28
    6584:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00006588 <rb_sha256_finish_ctx>:
    6588:	push	{r4, r5, r6, r7, r8, lr}
    658c:	mov	r5, r1
    6590:	mov	r4, r0
    6594:	ldr	r3, [r0, #32]
    6598:	ldr	r6, [r0, #40]	; 0x28
    659c:	ldr	r1, [pc, #172]	; 6650 <rb_sha256_finish_ctx+0xc8>
    65a0:	adds	r3, r3, r6
    65a4:	str	r3, [r0, #32]
    65a8:	add	r1, pc, r1
    65ac:	ldrcs	r3, [r0, #36]	; 0x24
    65b0:	add	r1, r1, #968	; 0x3c8
    65b4:	addcs	r3, r3, #1
    65b8:	strcs	r3, [r0, #36]	; 0x24
    65bc:	cmp	r6, #55	; 0x37
    65c0:	add	r0, r6, #44	; 0x2c
    65c4:	rsbhi	r7, r6, #120	; 0x78
    65c8:	rsbls	r7, r6, #56	; 0x38
    65cc:	mov	r2, r7
    65d0:	add	r0, r4, r0
    65d4:	bl	47dc <memcpy@plt>
    65d8:	ldr	r3, [r4, #32]
    65dc:	add	r1, r7, r6
    65e0:	add	ip, r4, r1
    65e4:	add	r1, r1, #8
    65e8:	lsl	r0, r3, #11
    65ec:	lsl	r2, r3, #3
    65f0:	and	r0, r0, #16711680	; 0xff0000
    65f4:	orr	r0, r0, r2, lsr #24
    65f8:	lsr	r2, r2, #8
    65fc:	orr	r0, r0, r3, lsl #27
    6600:	and	r2, r2, #65280	; 0xff00
    6604:	lsr	r3, r3, #29
    6608:	orr	r0, r0, r2
    660c:	str	r0, [ip, #48]	; 0x30
    6610:	add	r0, r4, #44	; 0x2c
    6614:	ldr	r2, [r4, #36]	; 0x24
    6618:	orr	r3, r3, r2, lsl #3
    661c:	mov	r2, r4
    6620:	rev	r3, r3
    6624:	str	r3, [ip, #44]	; 0x2c
    6628:	bl	4fac <rb_sha256_process_block>
    662c:	mov	r3, #0
    6630:	ldr	r2, [r4, r3, lsl #2]
    6634:	rev	r2, r2
    6638:	str	r2, [r5, r3, lsl #2]
    663c:	add	r3, r3, #1
    6640:	cmp	r3, #8
    6644:	bne	6630 <rb_sha256_finish_ctx+0xa8>
    6648:	mov	r0, r5
    664c:	pop	{r4, r5, r6, r7, r8, pc}
    6650:	.word	0x0000c598

00006654 <rb_sha512_process_bytes>:
    6654:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6658:	mov	r4, r2
    665c:	mov	r6, r0
    6660:	mov	r5, r1
    6664:	ldrd	r2, [r2, #80]	; 0x50
    6668:	strd	r2, [sp]
    666c:	orrs	r3, r2, r3
    6670:	beq	66fc <rb_sha512_process_bytes+0xa8>
    6674:	ldr	r3, [sp]
    6678:	mov	r1, r0
    667c:	rsb	r7, r3, #256	; 0x100
    6680:	add	r0, r3, #88	; 0x58
    6684:	cmp	r7, r5
    6688:	add	r0, r4, r0
    668c:	movcs	r7, r5
    6690:	mov	r2, r7
    6694:	bl	47dc <memcpy@plt>
    6698:	ldrd	sl, [r4, #80]	; 0x50
    669c:	adds	r0, sl, r7
    66a0:	adc	r1, fp, #0
    66a4:	cmp	r1, #0
    66a8:	cmpeq	r0, #128	; 0x80
    66ac:	strd	r0, [r4, #80]	; 0x50
    66b0:	bls	66f4 <rb_sha512_process_bytes+0xa0>
    66b4:	add	r9, r4, #88	; 0x58
    66b8:	bic	r1, r0, #127	; 0x7f
    66bc:	mov	r2, r4
    66c0:	mov	r0, r9
    66c4:	bl	5284 <rb_sha512_process_block>
    66c8:	ldr	r2, [r4, #80]	; 0x50
    66cc:	mov	r3, #0
    66d0:	mov	r0, r9
    66d4:	and	r2, r2, #127	; 0x7f
    66d8:	strd	r2, [r4, #80]	; 0x50
    66dc:	ldr	r3, [sp]
    66e0:	add	r1, r7, r3
    66e4:	bic	r1, r1, #127	; 0x7f
    66e8:	add	r1, r1, #88	; 0x58
    66ec:	add	r1, r4, r1
    66f0:	bl	47dc <memcpy@plt>
    66f4:	add	r6, r6, r7
    66f8:	sub	r5, r5, r7
    66fc:	cmp	r5, #127	; 0x7f
    6700:	bls	6734 <rb_sha512_process_bytes+0xe0>
    6704:	tst	r6, #7
    6708:	movne	r7, r5
    670c:	addne	r8, r6, r5
    6710:	addne	r9, r4, #88	; 0x58
    6714:	bne	6760 <rb_sha512_process_bytes+0x10c>
    6718:	bic	r7, r5, #127	; 0x7f
    671c:	mov	r0, r6
    6720:	mov	r2, r4
    6724:	mov	r1, r7
    6728:	add	r6, r6, r7
    672c:	and	r5, r5, #127	; 0x7f
    6730:	bl	5284 <rb_sha512_process_block>
    6734:	cmp	r5, #0
    6738:	bne	6780 <rb_sha512_process_bytes+0x12c>
    673c:	add	sp, sp, #12
    6740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6744:	mov	r2, #128	; 0x80
    6748:	mov	r0, r9
    674c:	bl	47dc <memcpy@plt>
    6750:	sub	r7, r7, #128	; 0x80
    6754:	mov	r2, r4
    6758:	mov	r1, #128	; 0x80
    675c:	bl	5284 <rb_sha512_process_block>
    6760:	cmp	r7, #128	; 0x80
    6764:	sub	r1, r8, r7
    6768:	bhi	6744 <rb_sha512_process_bytes+0xf0>
    676c:	sub	r3, r5, #1
    6770:	mvn	r2, #127	; 0x7f
    6774:	lsr	r3, r3, #7
    6778:	add	r6, r6, r3, lsl #7
    677c:	mla	r5, r2, r3, r5
    6780:	ldr	r7, [r4, #80]	; 0x50
    6784:	mov	r2, r5
    6788:	mov	r1, r6
    678c:	add	r0, r7, #88	; 0x58
    6790:	add	r5, r7, r5
    6794:	add	r0, r4, r0
    6798:	bl	47dc <memcpy@plt>
    679c:	cmp	r5, #127	; 0x7f
    67a0:	bls	67cc <rb_sha512_process_bytes+0x178>
    67a4:	add	r6, r4, #88	; 0x58
    67a8:	mov	r2, r4
    67ac:	mov	r1, #128	; 0x80
    67b0:	mov	r0, r6
    67b4:	sub	r5, r5, #128	; 0x80
    67b8:	bl	5284 <rb_sha512_process_block>
    67bc:	mov	r2, r5
    67c0:	add	r1, r4, #216	; 0xd8
    67c4:	mov	r0, r6
    67c8:	bl	47dc <memcpy@plt>
    67cc:	mov	r3, #0
    67d0:	str	r5, [r4, #80]	; 0x50
    67d4:	str	r3, [r4, #84]	; 0x54
    67d8:	b	673c <rb_sha512_process_bytes+0xe8>

000067dc <rb_sha512_finish_ctx>:
    67dc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    67e0:	mov	r4, r0
    67e4:	mov	r5, r1
    67e8:	mov	r9, #0
    67ec:	ldrd	r2, [r0, #64]	; 0x40
    67f0:	ldrd	sl, [r0, #80]	; 0x50
    67f4:	adds	r0, r2, sl
    67f8:	adcs	r1, r3, fp
    67fc:	movcs	r8, #1
    6800:	movcc	r8, #0
    6804:	orrs	r3, r8, r9
    6808:	strd	r0, [r4, #64]	; 0x40
    680c:	beq	6828 <rb_sha512_finish_ctx+0x4c>
    6810:	ldr	r3, [r4, #72]	; 0x48
    6814:	ldr	r2, [r4, #76]	; 0x4c
    6818:	adds	r3, r3, #1
    681c:	adc	r2, r2, #0
    6820:	str	r3, [r4, #72]	; 0x48
    6824:	str	r2, [r4, #76]	; 0x4c
    6828:	ldr	r1, [pc, #272]	; 6940 <rb_sha512_finish_ctx+0x164>
    682c:	cmp	fp, #0
    6830:	add	r0, sl, #88	; 0x58
    6834:	cmpeq	sl, #111	; 0x6f
    6838:	add	r0, r4, r0
    683c:	rsbhi	r8, sl, #240	; 0xf0
    6840:	rsbls	r8, sl, #112	; 0x70
    6844:	mov	r2, r8
    6848:	add	r1, pc, r1
    684c:	add	r1, r1, #1024	; 0x400
    6850:	add	r1, r1, #8
    6854:	bl	47dc <memcpy@plt>
    6858:	ldr	ip, [r4, #64]	; 0x40
    685c:	adds	r2, sl, r8
    6860:	adc	r3, fp, #0
    6864:	ldr	r0, [r4, #68]	; 0x44
    6868:	strd	r2, [sp]
    686c:	ldr	r2, [sp]
    6870:	lsl	r1, ip, #11
    6874:	lsr	r7, ip, #5
    6878:	lsl	r3, r0, #3
    687c:	and	r1, r1, #16711680	; 0xff0000
    6880:	and	r7, r7, #65280	; 0xff00
    6884:	lsr	r0, r0, #29
    6888:	orr	r1, r1, r7
    688c:	orr	r3, r3, ip, lsr #29
    6890:	adds	lr, r2, #8
    6894:	orr	r1, r1, ip, lsl #27
    6898:	add	lr, r4, lr
    689c:	add	r2, r4, r2
    68a0:	ubfx	ip, ip, #21, #8
    68a4:	lsr	r7, r3, #8
    68a8:	orr	r1, r1, ip
    68ac:	lsl	ip, r3, #24
    68b0:	and	r7, r7, #65280	; 0xff00
    68b4:	orr	ip, ip, r3, lsr #24
    68b8:	str	r1, [lr, #92]	; 0x5c
    68bc:	lsl	r3, r3, #8
    68c0:	and	r3, r3, #16711680	; 0xff0000
    68c4:	orr	r3, ip, r3
    68c8:	orr	r3, r3, r7
    68cc:	str	r3, [lr, #88]	; 0x58
    68d0:	ldr	r1, [r4, #72]	; 0x48
    68d4:	ldr	r3, [r4, #76]	; 0x4c
    68d8:	orr	r0, r0, r1, lsl #3
    68dc:	lsl	r3, r3, #3
    68e0:	rev	r0, r0
    68e4:	orr	r3, r3, r1, lsr #29
    68e8:	add	r1, sl, #16
    68ec:	str	r0, [r2, #92]	; 0x5c
    68f0:	add	r1, r1, r8
    68f4:	add	r0, r4, #88	; 0x58
    68f8:	rev	r3, r3
    68fc:	str	r3, [r2, #88]	; 0x58
    6900:	mov	r2, r4
    6904:	bl	5284 <rb_sha512_process_block>
    6908:	sub	r3, r4, #8
    690c:	sub	r2, r5, #8
    6910:	add	r4, r4, #56	; 0x38
    6914:	ldr	r1, [r3, #8]!
    6918:	ldr	r0, [r3, #4]
    691c:	rev	r1, r1
    6920:	cmp	r3, r4
    6924:	rev	r0, r0
    6928:	str	r0, [r2, #8]!
    692c:	str	r1, [r2, #4]
    6930:	bne	6914 <rb_sha512_finish_ctx+0x138>
    6934:	mov	r0, r5
    6938:	add	sp, sp, #12
    693c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6940:	.word	0x0000c2f8

00006944 <rb_sha256_crypt_r>:
    6944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6948:	mov	r8, r0
    694c:	add	fp, sp, #32
    6950:	sub	sp, sp, #452	; 0x1c4
    6954:	mov	r5, r1
    6958:	ldr	r0, [pc, #2212]	; 7204 <rb_sha256_crypt_r+0x8c0>
    695c:	str	r3, [fp, #-472]	; 0xfffffe28
    6960:	str	r2, [fp, #-448]	; 0xfffffe40
    6964:	mov	r2, #3
    6968:	add	r0, pc, r0
    696c:	add	r0, r0, #1152	; 0x480
    6970:	add	r0, r0, #8
    6974:	bl	4be4 <strncmp@plt>
    6978:	ldr	r1, [pc, #2184]	; 7208 <rb_sha256_crypt_r+0x8c4>
    697c:	cmp	r0, #0
    6980:	mov	r2, #7
    6984:	addeq	r5, r5, #3
    6988:	mov	r0, r5
    698c:	add	r1, pc, r1
    6990:	add	r1, r1, #1152	; 0x480
    6994:	add	r1, r1, #12
    6998:	bl	4be4 <strncmp@plt>
    699c:	subs	r3, r0, #0
    69a0:	str	r3, [fp, #-456]	; 0xfffffe38
    69a4:	movne	r3, #0
    69a8:	strne	r3, [fp, #-456]	; 0xfffffe38
    69ac:	bne	6fb4 <rb_sha256_crypt_r+0x670>
    69b0:	mov	r2, #10
    69b4:	sub	r1, fp, #208	; 0xd0
    69b8:	add	r0, r5, #7
    69bc:	bl	47d0 <strtoul@plt>
    69c0:	ldr	r3, [fp, #-208]	; 0xffffff30
    69c4:	ldrb	r2, [r3]
    69c8:	cmp	r2, #36	; 0x24
    69cc:	bne	6fb4 <rb_sha256_crypt_r+0x670>
    69d0:	add	r5, r3, #1
    69d4:	ldr	r3, [pc, #2096]	; 720c <rb_sha256_crypt_r+0x8c8>
    69d8:	cmp	r0, r3
    69dc:	movcc	r3, r0
    69e0:	cmp	r3, #1000	; 0x3e8
    69e4:	movcc	r3, #1000	; 0x3e8
    69e8:	str	r3, [fp, #-452]	; 0xfffffe3c
    69ec:	mov	r3, #1
    69f0:	str	r3, [fp, #-456]	; 0xfffffe38
    69f4:	ldr	r1, [pc, #2068]	; 7210 <rb_sha256_crypt_r+0x8cc>
    69f8:	mov	r0, r5
    69fc:	add	r1, pc, r1
    6a00:	bl	4bb4 <strcspn@plt>
    6a04:	cmp	r0, #16
    6a08:	movcc	r7, r0
    6a0c:	mov	r0, r8
    6a10:	movcs	r7, #16
    6a14:	bl	47b8 <strlen@plt>
    6a18:	ands	r3, r8, #3
    6a1c:	mov	r4, r0
    6a20:	streq	r3, [fp, #-460]	; 0xfffffe34
    6a24:	beq	6a4c <rb_sha256_crypt_r+0x108>
    6a28:	add	r3, r0, #11
    6a2c:	mov	r2, r0
    6a30:	bic	r3, r3, #7
    6a34:	mov	r1, r8
    6a38:	sub	sp, sp, r3
    6a3c:	add	r0, sp, #12
    6a40:	bl	47dc <memcpy@plt>
    6a44:	mov	r8, r0
    6a48:	str	r0, [fp, #-460]	; 0xfffffe34
    6a4c:	ands	r3, r5, #3
    6a50:	streq	r3, [fp, #-464]	; 0xfffffe30
    6a54:	beq	6a7c <rb_sha256_crypt_r+0x138>
    6a58:	add	r3, r7, #11
    6a5c:	mov	r1, r5
    6a60:	bic	r3, r3, #7
    6a64:	mov	r2, r7
    6a68:	sub	sp, sp, r3
    6a6c:	add	r0, sp, #12
    6a70:	bl	47dc <memcpy@plt>
    6a74:	mov	r5, r0
    6a78:	str	r0, [fp, #-464]	; 0xfffffe30
    6a7c:	sub	sl, fp, #380	; 0x17c
    6a80:	sub	r9, fp, #208	; 0xd0
    6a84:	mov	r0, sl
    6a88:	mov	r6, r4
    6a8c:	bl	5220 <rb_sha256_init_ctx>
    6a90:	mov	r2, sl
    6a94:	mov	r1, r4
    6a98:	mov	r0, r8
    6a9c:	bl	6404 <rb_sha256_process_bytes>
    6aa0:	mov	r2, sl
    6aa4:	mov	r1, r7
    6aa8:	mov	r0, r5
    6aac:	bl	6404 <rb_sha256_process_bytes>
    6ab0:	mov	r0, r9
    6ab4:	bl	5220 <rb_sha256_init_ctx>
    6ab8:	mov	r2, r9
    6abc:	mov	r1, r4
    6ac0:	mov	r0, r8
    6ac4:	bl	6404 <rb_sha256_process_bytes>
    6ac8:	mov	r2, r9
    6acc:	mov	r1, r7
    6ad0:	mov	r0, r5
    6ad4:	bl	6404 <rb_sha256_process_bytes>
    6ad8:	mov	r2, r9
    6adc:	mov	r1, r4
    6ae0:	mov	r0, r8
    6ae4:	bl	6404 <rb_sha256_process_bytes>
    6ae8:	sub	r2, fp, #444	; 0x1bc
    6aec:	mov	r0, r9
    6af0:	mov	r1, r2
    6af4:	str	r2, [fp, #-468]	; 0xfffffe2c
    6af8:	bl	6588 <rb_sha256_finish_ctx>
    6afc:	ldr	r2, [fp, #-468]	; 0xfffffe2c
    6b00:	mov	r3, sl
    6b04:	mov	sl, r2
    6b08:	cmp	r6, #32
    6b0c:	mov	r2, r3
    6b10:	str	r3, [fp, #-468]	; 0xfffffe2c
    6b14:	bhi	6fc0 <rb_sha256_crypt_r+0x67c>
    6b18:	mov	r1, r6
    6b1c:	mov	r0, sl
    6b20:	bl	6404 <rb_sha256_process_bytes>
    6b24:	ldr	r3, [fp, #-468]	; 0xfffffe2c
    6b28:	mov	r6, r4
    6b2c:	cmp	r6, #0
    6b30:	bne	6fd8 <rb_sha256_crypt_r+0x694>
    6b34:	mov	r0, r3
    6b38:	sub	r1, fp, #444	; 0x1bc
    6b3c:	bl	6588 <rb_sha256_finish_ctx>
    6b40:	mov	r0, r9
    6b44:	mov	sl, r6
    6b48:	bl	5220 <rb_sha256_init_ctx>
    6b4c:	mov	r3, r9
    6b50:	cmp	sl, r4
    6b54:	bne	7004 <rb_sha256_crypt_r+0x6c0>
    6b58:	mov	r0, r9
    6b5c:	sub	r1, fp, #412	; 0x19c
    6b60:	lsr	sl, r4, #5
    6b64:	bl	6588 <rb_sha256_finish_ctx>
    6b68:	add	r3, r4, #7
    6b6c:	mov	r9, #0
    6b70:	bic	r3, r3, #7
    6b74:	sub	sp, sp, r3
    6b78:	add	r8, sp, #8
    6b7c:	cmp	sl, r9
    6b80:	bne	7024 <rb_sha256_crypt_r+0x6e0>
    6b84:	mvn	r2, #31
    6b88:	sub	r1, fp, #412	; 0x19c
    6b8c:	add	r0, r8, sl, lsl #5
    6b90:	mov	r9, #0
    6b94:	mla	r2, r2, sl, r4
    6b98:	sub	sl, fp, #208	; 0xd0
    6b9c:	bl	47dc <memcpy@plt>
    6ba0:	mov	r0, sl
    6ba4:	bl	5220 <rb_sha256_init_ctx>
    6ba8:	mov	r2, sl
    6bac:	mov	r1, r7
    6bb0:	mov	r0, r5
    6bb4:	add	r9, r9, #1
    6bb8:	bl	6404 <rb_sha256_process_bytes>
    6bbc:	ldrb	r3, [fp, #-444]	; 0xfffffe44
    6bc0:	add	r3, r3, #16
    6bc4:	cmp	r3, r9
    6bc8:	bhi	6ba8 <rb_sha256_crypt_r+0x264>
    6bcc:	sub	r9, fp, #412	; 0x19c
    6bd0:	mov	r0, sl
    6bd4:	mov	r1, r9
    6bd8:	sub	sl, fp, #444	; 0x1bc
    6bdc:	bl	6588 <rb_sha256_finish_ctx>
    6be0:	add	r3, r7, #7
    6be4:	mov	r1, r9
    6be8:	bic	r3, r3, #7
    6bec:	mov	r2, r7
    6bf0:	sub	sp, sp, r3
    6bf4:	sub	r9, fp, #380	; 0x17c
    6bf8:	add	r3, sp, #8
    6bfc:	mov	r0, r3
    6c00:	str	r3, [fp, #-468]	; 0xfffffe2c
    6c04:	bl	47dc <memcpy@plt>
    6c08:	mov	r0, r9
    6c0c:	bl	5220 <rb_sha256_init_ctx>
    6c10:	ands	r3, r6, #1
    6c14:	mov	r2, r9
    6c18:	movne	r1, r4
    6c1c:	movne	r0, r8
    6c20:	moveq	r1, #32
    6c24:	moveq	r0, sl
    6c28:	str	r3, [fp, #-476]	; 0xfffffe24
    6c2c:	bl	6404 <rb_sha256_process_bytes>
    6c30:	mov	r3, #3
    6c34:	udiv	r3, r6, r3
    6c38:	add	r3, r3, r3, lsl #1
    6c3c:	cmp	r6, r3
    6c40:	beq	6c54 <rb_sha256_crypt_r+0x310>
    6c44:	mov	r2, r9
    6c48:	mov	r1, r7
    6c4c:	ldr	r0, [fp, #-468]	; 0xfffffe2c
    6c50:	bl	6404 <rb_sha256_process_bytes>
    6c54:	mov	r3, #7
    6c58:	udiv	r3, r6, r3
    6c5c:	rsb	r3, r3, r3, lsl #3
    6c60:	cmp	r6, r3
    6c64:	beq	6c78 <rb_sha256_crypt_r+0x334>
    6c68:	mov	r2, r9
    6c6c:	mov	r1, r4
    6c70:	mov	r0, r8
    6c74:	bl	6404 <rb_sha256_process_bytes>
    6c78:	ands	r3, r6, #1
    6c7c:	mov	r2, r9
    6c80:	cmp	r3, #0
    6c84:	add	r6, r6, #1
    6c88:	movne	r1, #32
    6c8c:	movne	r0, sl
    6c90:	moveq	r1, r4
    6c94:	moveq	r0, r8
    6c98:	bl	6404 <rb_sha256_process_bytes>
    6c9c:	mov	r1, sl
    6ca0:	mov	r0, r9
    6ca4:	bl	6588 <rb_sha256_finish_ctx>
    6ca8:	ldr	r3, [fp, #-452]	; 0xfffffe3c
    6cac:	cmp	r3, r6
    6cb0:	bne	6c08 <rb_sha256_crypt_r+0x2c4>
    6cb4:	ldr	r3, [fp, #-472]	; 0xfffffe28
    6cb8:	mov	r1, #0
    6cbc:	ldr	r0, [fp, #-448]	; 0xfffffe40
    6cc0:	bic	r9, r3, r3, asr #31
    6cc4:	mov	r2, r9
    6cc8:	bl	45fc <memset@plt>
    6ccc:	ldr	r1, [pc, #1344]	; 7214 <rb_sha256_crypt_r+0x8d0>
    6cd0:	mov	r2, r9
    6cd4:	ldr	r0, [fp, #-448]	; 0xfffffe40
    6cd8:	add	r1, pc, r1
    6cdc:	add	r1, r1, #1152	; 0x480
    6ce0:	add	r1, r1, #8
    6ce4:	bl	4548 <strncpy@plt>
    6ce8:	ldr	r0, [fp, #-448]	; 0xfffffe40
    6cec:	bl	47b8 <strlen@plt>
    6cf0:	ldr	r3, [fp, #-448]	; 0xfffffe40
    6cf4:	adds	sl, r3, r0
    6cf8:	addeq	sl, r3, r9
    6cfc:	ldr	r3, [fp, #-472]	; 0xfffffe28
    6d00:	sub	r9, r3, #3
    6d04:	ldr	r3, [fp, #-456]	; 0xfffffe38
    6d08:	cmp	r3, #0
    6d0c:	beq	6d40 <rb_sha256_crypt_r+0x3fc>
    6d10:	ldr	r3, [pc, #1280]	; 7218 <rb_sha256_crypt_r+0x8d4>
    6d14:	bic	r1, r9, r9, asr #31
    6d18:	mov	r0, sl
    6d1c:	str	r6, [sp]
    6d20:	ldr	r2, [pc, #1268]	; 721c <rb_sha256_crypt_r+0x8d8>
    6d24:	add	r3, pc, r3
    6d28:	add	r3, r3, #1152	; 0x480
    6d2c:	add	r3, r3, #12
    6d30:	add	r2, pc, r2
    6d34:	bl	4b84 <snprintf@plt>
    6d38:	add	sl, sl, r0
    6d3c:	sub	r9, r9, r0
    6d40:	bic	r6, r9, r9, asr #31
    6d44:	mov	r2, r7
    6d48:	mov	r1, #0
    6d4c:	mov	r0, sl
    6d50:	bl	45fc <memset@plt>
    6d54:	cmp	r6, r7
    6d58:	mov	r1, r5
    6d5c:	movcs	r6, r7
    6d60:	mov	r0, sl
    6d64:	mov	r2, r6
    6d68:	sub	r9, r9, r6
    6d6c:	bl	4548 <strncpy@plt>
    6d70:	ldr	r0, [fp, #-448]	; 0xfffffe40
    6d74:	bl	47b8 <strlen@plt>
    6d78:	ldr	r3, [fp, #-448]	; 0xfffffe40
    6d7c:	ldrb	r2, [fp, #-444]	; 0xfffffe44
    6d80:	ldr	r1, [pc, #1176]	; 7220 <rb_sha256_crypt_r+0x8dc>
    6d84:	adds	r0, r3, r0
    6d88:	moveq	r0, r7
    6d8c:	cmp	r9, #0
    6d90:	movgt	r3, #36	; 0x24
    6d94:	subgt	r9, r9, #1
    6d98:	strbgt	r3, [r0], #1
    6d9c:	add	r1, pc, r1
    6da0:	ldrb	r3, [fp, #-434]	; 0xfffffe4e
    6da4:	lsl	r3, r3, #8
    6da8:	orr	r3, r3, r2, lsl #16
    6dac:	ldrb	r2, [fp, #-424]	; 0xfffffe58
    6db0:	orr	r3, r3, r2
    6db4:	add	r2, r0, #4
    6db8:	cmp	r2, r0
    6dbc:	cmpne	r9, #0
    6dc0:	bgt	7044 <rb_sha256_crypt_r+0x700>
    6dc4:	ldrb	r3, [fp, #-443]	; 0xfffffe45
    6dc8:	ldrb	r2, [fp, #-423]	; 0xfffffe59
    6dcc:	ldr	r1, [pc, #1104]	; 7224 <rb_sha256_crypt_r+0x8e0>
    6dd0:	lsl	r3, r3, #8
    6dd4:	orr	r3, r3, r2, lsl #16
    6dd8:	ldrb	r2, [fp, #-433]	; 0xfffffe4f
    6ddc:	add	r1, pc, r1
    6de0:	orr	r3, r3, r2
    6de4:	add	r2, r0, #4
    6de8:	cmp	r2, r0
    6dec:	cmpne	r9, #0
    6df0:	bgt	705c <rb_sha256_crypt_r+0x718>
    6df4:	ldrb	r3, [fp, #-422]	; 0xfffffe5a
    6df8:	ldrb	r2, [fp, #-432]	; 0xfffffe50
    6dfc:	ldr	r1, [pc, #1060]	; 7228 <rb_sha256_crypt_r+0x8e4>
    6e00:	lsl	r3, r3, #8
    6e04:	orr	r3, r3, r2, lsl #16
    6e08:	ldrb	r2, [fp, #-442]	; 0xfffffe46
    6e0c:	add	r1, pc, r1
    6e10:	orr	r3, r3, r2
    6e14:	add	r2, r0, #4
    6e18:	cmp	r2, r0
    6e1c:	cmpne	r9, #0
    6e20:	bgt	7074 <rb_sha256_crypt_r+0x730>
    6e24:	ldrb	r3, [fp, #-431]	; 0xfffffe51
    6e28:	ldrb	r2, [fp, #-441]	; 0xfffffe47
    6e2c:	ldr	r1, [pc, #1016]	; 722c <rb_sha256_crypt_r+0x8e8>
    6e30:	lsl	r3, r3, #8
    6e34:	orr	r3, r3, r2, lsl #16
    6e38:	ldrb	r2, [fp, #-421]	; 0xfffffe5b
    6e3c:	add	r1, pc, r1
    6e40:	orr	r3, r3, r2
    6e44:	add	r2, r0, #4
    6e48:	cmp	r2, r0
    6e4c:	cmpne	r9, #0
    6e50:	bgt	708c <rb_sha256_crypt_r+0x748>
    6e54:	ldrb	r3, [fp, #-440]	; 0xfffffe48
    6e58:	ldrb	r2, [fp, #-420]	; 0xfffffe5c
    6e5c:	ldr	r1, [pc, #972]	; 7230 <rb_sha256_crypt_r+0x8ec>
    6e60:	lsl	r3, r3, #8
    6e64:	orr	r3, r3, r2, lsl #16
    6e68:	ldrb	r2, [fp, #-430]	; 0xfffffe52
    6e6c:	add	r1, pc, r1
    6e70:	orr	r3, r3, r2
    6e74:	add	r2, r0, #4
    6e78:	cmp	r2, r0
    6e7c:	cmpne	r9, #0
    6e80:	bgt	70a4 <rb_sha256_crypt_r+0x760>
    6e84:	ldrb	r3, [fp, #-419]	; 0xfffffe5d
    6e88:	ldrb	r2, [fp, #-429]	; 0xfffffe53
    6e8c:	ldr	r1, [pc, #928]	; 7234 <rb_sha256_crypt_r+0x8f0>
    6e90:	lsl	r3, r3, #8
    6e94:	orr	r3, r3, r2, lsl #16
    6e98:	ldrb	r2, [fp, #-439]	; 0xfffffe49
    6e9c:	add	r1, pc, r1
    6ea0:	orr	r3, r3, r2
    6ea4:	add	r2, r0, #4
    6ea8:	cmp	r2, r0
    6eac:	cmpne	r9, #0
    6eb0:	bgt	70bc <rb_sha256_crypt_r+0x778>
    6eb4:	ldrb	r3, [fp, #-428]	; 0xfffffe54
    6eb8:	ldrb	r2, [fp, #-438]	; 0xfffffe4a
    6ebc:	ldr	r1, [pc, #884]	; 7238 <rb_sha256_crypt_r+0x8f4>
    6ec0:	lsl	r3, r3, #8
    6ec4:	orr	r3, r3, r2, lsl #16
    6ec8:	ldrb	r2, [fp, #-418]	; 0xfffffe5e
    6ecc:	add	r1, pc, r1
    6ed0:	orr	r3, r3, r2
    6ed4:	add	r2, r0, #4
    6ed8:	cmp	r2, r0
    6edc:	cmpne	r9, #0
    6ee0:	bgt	70d4 <rb_sha256_crypt_r+0x790>
    6ee4:	ldrb	r3, [fp, #-437]	; 0xfffffe4b
    6ee8:	ldrb	r2, [fp, #-417]	; 0xfffffe5f
    6eec:	ldr	r1, [pc, #840]	; 723c <rb_sha256_crypt_r+0x8f8>
    6ef0:	lsl	r3, r3, #8
    6ef4:	orr	r3, r3, r2, lsl #16
    6ef8:	ldrb	r2, [fp, #-427]	; 0xfffffe55
    6efc:	add	r1, pc, r1
    6f00:	orr	r3, r3, r2
    6f04:	add	r2, r0, #4
    6f08:	cmp	r2, r0
    6f0c:	cmpne	r9, #0
    6f10:	bgt	70ec <rb_sha256_crypt_r+0x7a8>
    6f14:	ldrb	r3, [fp, #-416]	; 0xfffffe60
    6f18:	ldrb	r2, [fp, #-426]	; 0xfffffe56
    6f1c:	ldr	r1, [pc, #796]	; 7240 <rb_sha256_crypt_r+0x8fc>
    6f20:	lsl	r3, r3, #8
    6f24:	orr	r3, r3, r2, lsl #16
    6f28:	ldrb	r2, [fp, #-436]	; 0xfffffe4c
    6f2c:	add	r1, pc, r1
    6f30:	orr	r3, r3, r2
    6f34:	add	r2, r0, #4
    6f38:	cmp	r2, r0
    6f3c:	cmpne	r9, #0
    6f40:	bgt	7104 <rb_sha256_crypt_r+0x7c0>
    6f44:	ldrb	r3, [fp, #-425]	; 0xfffffe57
    6f48:	ldrb	r2, [fp, #-435]	; 0xfffffe4d
    6f4c:	ldr	r1, [pc, #752]	; 7244 <rb_sha256_crypt_r+0x900>
    6f50:	lsl	r3, r3, #8
    6f54:	orr	r3, r3, r2, lsl #16
    6f58:	ldrb	r2, [fp, #-415]	; 0xfffffe61
    6f5c:	add	r1, pc, r1
    6f60:	orr	r3, r3, r2
    6f64:	add	r2, r0, #4
    6f68:	cmp	r0, r2
    6f6c:	cmpne	r9, #0
    6f70:	bgt	711c <rb_sha256_crypt_r+0x7d8>
    6f74:	ldr	ip, [pc, #716]	; 7248 <rb_sha256_crypt_r+0x904>
    6f78:	sub	r5, fp, #444	; 0x1bc
    6f7c:	add	r1, r0, #3
    6f80:	mov	r3, r0
    6f84:	ldrh	r2, [r5, #30]
    6f88:	add	ip, pc, ip
    6f8c:	cmp	r3, r1
    6f90:	beq	714c <rb_sha256_crypt_r+0x808>
    6f94:	cmp	r9, #0
    6f98:	bgt	7134 <rb_sha256_crypt_r+0x7f0>
    6f9c:	bl	4cbc <__errno_location@plt>
    6fa0:	mov	r3, #34	; 0x22
    6fa4:	str	r3, [r0]
    6fa8:	mov	r3, #0
    6fac:	str	r3, [fp, #-448]	; 0xfffffe40
    6fb0:	b	715c <rb_sha256_crypt_r+0x818>
    6fb4:	movw	r3, #5000	; 0x1388
    6fb8:	str	r3, [fp, #-452]	; 0xfffffe3c
    6fbc:	b	69f4 <rb_sha256_crypt_r+0xb0>
    6fc0:	mov	r1, #32
    6fc4:	mov	r0, sl
    6fc8:	bl	6404 <rb_sha256_process_bytes>
    6fcc:	sub	r6, r6, #32
    6fd0:	ldr	r3, [fp, #-468]	; 0xfffffe2c
    6fd4:	b	6b08 <rb_sha256_crypt_r+0x1c4>
    6fd8:	tst	r6, #1
    6fdc:	mov	r2, r3
    6fe0:	lsr	r6, r6, #1
    6fe4:	movne	r1, #32
    6fe8:	movne	r0, sl
    6fec:	str	r3, [fp, #-468]	; 0xfffffe2c
    6ff0:	moveq	r1, r4
    6ff4:	moveq	r0, r8
    6ff8:	bl	6404 <rb_sha256_process_bytes>
    6ffc:	ldr	r3, [fp, #-468]	; 0xfffffe2c
    7000:	b	6b2c <rb_sha256_crypt_r+0x1e8>
    7004:	mov	r2, r3
    7008:	mov	r1, r4
    700c:	str	r3, [fp, #-468]	; 0xfffffe2c
    7010:	mov	r0, r8
    7014:	add	sl, sl, #1
    7018:	bl	6404 <rb_sha256_process_bytes>
    701c:	ldr	r3, [fp, #-468]	; 0xfffffe2c
    7020:	b	6b50 <rb_sha256_crypt_r+0x20c>
    7024:	sub	lr, fp, #412	; 0x19c
    7028:	add	ip, r8, r9, lsl #5
    702c:	add	r9, r9, #1
    7030:	ldm	lr!, {r0, r1, r2, r3}
    7034:	stmia	ip!, {r0, r1, r2, r3}
    7038:	ldm	lr, {r0, r1, r2, r3}
    703c:	stm	ip, {r0, r1, r2, r3}
    7040:	b	6b7c <rb_sha256_crypt_r+0x238>
    7044:	and	ip, r3, #63	; 0x3f
    7048:	sub	r9, r9, #1
    704c:	lsr	r3, r3, #6
    7050:	ldrb	ip, [r1, ip]
    7054:	strb	ip, [r0], #1
    7058:	b	6db8 <rb_sha256_crypt_r+0x474>
    705c:	and	ip, r3, #63	; 0x3f
    7060:	sub	r9, r9, #1
    7064:	lsr	r3, r3, #6
    7068:	ldrb	ip, [r1, ip]
    706c:	strb	ip, [r0], #1
    7070:	b	6de8 <rb_sha256_crypt_r+0x4a4>
    7074:	and	ip, r3, #63	; 0x3f
    7078:	sub	r9, r9, #1
    707c:	lsr	r3, r3, #6
    7080:	ldrb	ip, [r1, ip]
    7084:	strb	ip, [r0], #1
    7088:	b	6e18 <rb_sha256_crypt_r+0x4d4>
    708c:	and	ip, r3, #63	; 0x3f
    7090:	sub	r9, r9, #1
    7094:	lsr	r3, r3, #6
    7098:	ldrb	ip, [r1, ip]
    709c:	strb	ip, [r0], #1
    70a0:	b	6e48 <rb_sha256_crypt_r+0x504>
    70a4:	and	ip, r3, #63	; 0x3f
    70a8:	sub	r9, r9, #1
    70ac:	lsr	r3, r3, #6
    70b0:	ldrb	ip, [r1, ip]
    70b4:	strb	ip, [r0], #1
    70b8:	b	6e78 <rb_sha256_crypt_r+0x534>
    70bc:	and	ip, r3, #63	; 0x3f
    70c0:	sub	r9, r9, #1
    70c4:	lsr	r3, r3, #6
    70c8:	ldrb	ip, [r1, ip]
    70cc:	strb	ip, [r0], #1
    70d0:	b	6ea8 <rb_sha256_crypt_r+0x564>
    70d4:	and	ip, r3, #63	; 0x3f
    70d8:	sub	r9, r9, #1
    70dc:	lsr	r3, r3, #6
    70e0:	ldrb	ip, [r1, ip]
    70e4:	strb	ip, [r0], #1
    70e8:	b	6ed8 <rb_sha256_crypt_r+0x594>
    70ec:	and	ip, r3, #63	; 0x3f
    70f0:	sub	r9, r9, #1
    70f4:	lsr	r3, r3, #6
    70f8:	ldrb	ip, [r1, ip]
    70fc:	strb	ip, [r0], #1
    7100:	b	6f08 <rb_sha256_crypt_r+0x5c4>
    7104:	and	ip, r3, #63	; 0x3f
    7108:	sub	r9, r9, #1
    710c:	lsr	r3, r3, #6
    7110:	ldrb	ip, [r1, ip]
    7114:	strb	ip, [r0], #1
    7118:	b	6f38 <rb_sha256_crypt_r+0x5f4>
    711c:	and	ip, r3, #63	; 0x3f
    7120:	sub	r9, r9, #1
    7124:	lsr	r3, r3, #6
    7128:	ldrb	ip, [r1, ip]
    712c:	strb	ip, [r0], #1
    7130:	b	6f68 <rb_sha256_crypt_r+0x624>
    7134:	and	lr, r2, #63	; 0x3f
    7138:	sub	r9, r9, #1
    713c:	lsr	r2, r2, #6
    7140:	ldrb	lr, [ip, lr]
    7144:	strb	lr, [r3], #1
    7148:	b	6f8c <rb_sha256_crypt_r+0x648>
    714c:	cmp	r9, #0
    7150:	movgt	r3, #0
    7154:	strbgt	r3, [r0, #3]
    7158:	ble	6f9c <rb_sha256_crypt_r+0x658>
    715c:	sub	r6, fp, #380	; 0x17c
    7160:	mov	r0, r6
    7164:	bl	5220 <rb_sha256_init_ctx>
    7168:	mov	r1, r5
    716c:	bl	6588 <rb_sha256_finish_ctx>
    7170:	mov	r2, #32
    7174:	mov	r1, #0
    7178:	sub	r0, fp, #412	; 0x19c
    717c:	bl	45fc <memset@plt>
    7180:	mov	r2, r4
    7184:	mov	r1, #0
    7188:	mov	r0, r8
    718c:	bl	45fc <memset@plt>
    7190:	mov	r2, r7
    7194:	mov	r1, #0
    7198:	ldr	r0, [fp, #-468]	; 0xfffffe2c
    719c:	bl	45fc <memset@plt>
    71a0:	mov	r2, #172	; 0xac
    71a4:	mov	r1, #0
    71a8:	mov	r0, r6
    71ac:	bl	45fc <memset@plt>
    71b0:	mov	r2, #172	; 0xac
    71b4:	mov	r1, #0
    71b8:	sub	r0, fp, #208	; 0xd0
    71bc:	bl	45fc <memset@plt>
    71c0:	ldr	r3, [fp, #-460]	; 0xfffffe34
    71c4:	cmp	r3, #0
    71c8:	beq	71dc <rb_sha256_crypt_r+0x898>
    71cc:	mov	r2, r4
    71d0:	mov	r1, #0
    71d4:	mov	r0, r3
    71d8:	bl	45fc <memset@plt>
    71dc:	ldr	r3, [fp, #-464]	; 0xfffffe30
    71e0:	cmp	r3, #0
    71e4:	beq	71f8 <rb_sha256_crypt_r+0x8b4>
    71e8:	mov	r2, r7
    71ec:	mov	r1, #0
    71f0:	mov	r0, r3
    71f4:	bl	45fc <memset@plt>
    71f8:	ldr	r0, [fp, #-448]	; 0xfffffe40
    71fc:	sub	sp, fp, #32
    7200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7204:	.word	0x0000c1d8
    7208:	.word	0x0000c1b4
    720c:	.word	0x3b9ac9ff
    7210:	.word	0x0000c94d
    7214:	.word	0x0000be68
    7218:	.word	0x0000be1c
    721c:	.word	0x0000c610
    7220:	.word	0x0000bda4
    7224:	.word	0x0000bd64
    7228:	.word	0x0000bd34
    722c:	.word	0x0000bd04
    7230:	.word	0x0000bcd4
    7234:	.word	0x0000bca4
    7238:	.word	0x0000bc74
    723c:	.word	0x0000bc44
    7240:	.word	0x0000bc14
    7244:	.word	0x0000bbe4
    7248:	.word	0x0000bbb8

0000724c <rb_sha512_crypt_r>:
    724c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7250:	mov	r8, r0
    7254:	add	fp, sp, #32
    7258:	sub	sp, sp, #860	; 0x35c
    725c:	mov	r5, r1
    7260:	ldr	r0, [pc, #3008]	; 7e28 <rb_sha512_crypt_r+0xbdc>
    7264:	str	r3, [fp, #-880]	; 0xfffffc90
    7268:	str	r2, [fp, #-856]	; 0xfffffca8
    726c:	mov	r2, #3
    7270:	add	r0, pc, r0
    7274:	add	r0, r0, #1168	; 0x490
    7278:	add	r0, r0, #4
    727c:	bl	4be4 <strncmp@plt>
    7280:	ldr	r1, [pc, #2980]	; 7e2c <rb_sha512_crypt_r+0xbe0>
    7284:	cmp	r0, #0
    7288:	mov	r2, #7
    728c:	addeq	r5, r5, #3
    7290:	mov	r0, r5
    7294:	add	r1, pc, r1
    7298:	add	r1, r1, #1168	; 0x490
    729c:	add	r1, r1, #8
    72a0:	bl	4be4 <strncmp@plt>
    72a4:	subs	r3, r0, #0
    72a8:	str	r3, [fp, #-864]	; 0xfffffca0
    72ac:	movne	r3, #0
    72b0:	strne	r3, [fp, #-864]	; 0xfffffca0
    72b4:	bne	7b5c <rb_sha512_crypt_r+0x910>
    72b8:	mov	r2, #10
    72bc:	sub	r1, fp, #380	; 0x17c
    72c0:	add	r0, r5, #7
    72c4:	bl	47d0 <strtoul@plt>
    72c8:	ldr	r3, [fp, #-380]	; 0xfffffe84
    72cc:	ldrb	r2, [r3]
    72d0:	cmp	r2, #36	; 0x24
    72d4:	bne	7b5c <rb_sha512_crypt_r+0x910>
    72d8:	add	r5, r3, #1
    72dc:	ldr	r3, [pc, #2892]	; 7e30 <rb_sha512_crypt_r+0xbe4>
    72e0:	cmp	r0, r3
    72e4:	movcc	r3, r0
    72e8:	cmp	r3, #1000	; 0x3e8
    72ec:	movcc	r3, #1000	; 0x3e8
    72f0:	str	r3, [fp, #-860]	; 0xfffffca4
    72f4:	mov	r3, #1
    72f8:	str	r3, [fp, #-864]	; 0xfffffca0
    72fc:	ldr	r1, [pc, #2864]	; 7e34 <rb_sha512_crypt_r+0xbe8>
    7300:	mov	r0, r5
    7304:	add	r1, pc, r1
    7308:	bl	4bb4 <strcspn@plt>
    730c:	cmp	r0, #16
    7310:	movcc	r7, r0
    7314:	mov	r0, r8
    7318:	movcs	r7, #16
    731c:	bl	47b8 <strlen@plt>
    7320:	ands	r3, r8, #7
    7324:	mov	r4, r0
    7328:	streq	r3, [fp, #-868]	; 0xfffffc9c
    732c:	beq	7354 <rb_sha512_crypt_r+0x108>
    7330:	add	r3, r0, #15
    7334:	mov	r2, r0
    7338:	bic	r3, r3, #7
    733c:	mov	r1, r8
    7340:	sub	sp, sp, r3
    7344:	add	r0, sp, #16
    7348:	bl	47dc <memcpy@plt>
    734c:	mov	r8, r0
    7350:	str	r0, [fp, #-868]	; 0xfffffc9c
    7354:	ands	r3, r5, #7
    7358:	streq	r3, [fp, #-872]	; 0xfffffc98
    735c:	beq	7384 <rb_sha512_crypt_r+0x138>
    7360:	add	r3, r7, #15
    7364:	mov	r1, r5
    7368:	bic	r3, r3, #7
    736c:	mov	r2, r7
    7370:	sub	sp, sp, r3
    7374:	add	r0, sp, #16
    7378:	bl	47dc <memcpy@plt>
    737c:	mov	r5, r0
    7380:	str	r0, [fp, #-872]	; 0xfffffc98
    7384:	sub	sl, fp, #724	; 0x2d4
    7388:	sub	r9, fp, #380	; 0x17c
    738c:	mov	r0, sl
    7390:	mov	r6, r4
    7394:	bl	5838 <rb_sha512_init_ctx>
    7398:	mov	r2, sl
    739c:	mov	r1, r4
    73a0:	mov	r0, r8
    73a4:	bl	6654 <rb_sha512_process_bytes>
    73a8:	mov	r2, sl
    73ac:	mov	r1, r7
    73b0:	mov	r0, r5
    73b4:	bl	6654 <rb_sha512_process_bytes>
    73b8:	mov	r0, r9
    73bc:	bl	5838 <rb_sha512_init_ctx>
    73c0:	mov	r2, r9
    73c4:	mov	r1, r4
    73c8:	mov	r0, r8
    73cc:	bl	6654 <rb_sha512_process_bytes>
    73d0:	mov	r2, r9
    73d4:	mov	r1, r7
    73d8:	mov	r0, r5
    73dc:	bl	6654 <rb_sha512_process_bytes>
    73e0:	mov	r2, r9
    73e4:	mov	r1, r4
    73e8:	mov	r0, r8
    73ec:	bl	6654 <rb_sha512_process_bytes>
    73f0:	sub	r2, fp, #852	; 0x354
    73f4:	mov	r0, r9
    73f8:	mov	r1, r2
    73fc:	str	r2, [fp, #-876]	; 0xfffffc94
    7400:	bl	67dc <rb_sha512_finish_ctx>
    7404:	ldr	r2, [fp, #-876]	; 0xfffffc94
    7408:	mov	r3, sl
    740c:	mov	sl, r2
    7410:	cmp	r6, #64	; 0x40
    7414:	mov	r2, r3
    7418:	str	r3, [fp, #-876]	; 0xfffffc94
    741c:	bhi	7b68 <rb_sha512_crypt_r+0x91c>
    7420:	mov	r1, r6
    7424:	mov	r0, sl
    7428:	bl	6654 <rb_sha512_process_bytes>
    742c:	ldr	r3, [fp, #-876]	; 0xfffffc94
    7430:	mov	r6, r4
    7434:	cmp	r6, #0
    7438:	bne	7b80 <rb_sha512_crypt_r+0x934>
    743c:	mov	r0, r3
    7440:	sub	r1, fp, #852	; 0x354
    7444:	bl	67dc <rb_sha512_finish_ctx>
    7448:	mov	r0, r9
    744c:	mov	sl, r6
    7450:	bl	5838 <rb_sha512_init_ctx>
    7454:	mov	r3, r9
    7458:	cmp	sl, r4
    745c:	bne	7bac <rb_sha512_crypt_r+0x960>
    7460:	mov	r0, r9
    7464:	sub	r1, fp, #788	; 0x314
    7468:	lsr	r9, r4, #6
    746c:	bl	67dc <rb_sha512_finish_ctx>
    7470:	add	r3, r4, #7
    7474:	mov	r8, #0
    7478:	bic	r3, r3, #7
    747c:	sub	sp, sp, r3
    7480:	add	sl, sp, #8
    7484:	cmp	r9, r8
    7488:	bne	7bcc <rb_sha512_crypt_r+0x980>
    748c:	mvn	r2, #63	; 0x3f
    7490:	sub	r1, fp, #788	; 0x314
    7494:	add	r0, sl, r9, lsl #6
    7498:	mov	r8, #0
    749c:	mla	r2, r2, r9, r4
    74a0:	sub	r9, fp, #380	; 0x17c
    74a4:	bl	47dc <memcpy@plt>
    74a8:	mov	r0, r9
    74ac:	bl	5838 <rb_sha512_init_ctx>
    74b0:	mov	r2, r9
    74b4:	mov	r1, r7
    74b8:	mov	r0, r5
    74bc:	add	r8, r8, #1
    74c0:	bl	6654 <rb_sha512_process_bytes>
    74c4:	ldrb	r3, [fp, #-852]	; 0xfffffcac
    74c8:	add	r3, r3, #16
    74cc:	cmp	r3, r8
    74d0:	bhi	74b0 <rb_sha512_crypt_r+0x264>
    74d4:	sub	r8, fp, #788	; 0x314
    74d8:	mov	r0, r9
    74dc:	mov	r1, r8
    74e0:	sub	r9, fp, #852	; 0x354
    74e4:	bl	67dc <rb_sha512_finish_ctx>
    74e8:	add	r3, r7, #7
    74ec:	mov	r1, r8
    74f0:	bic	r3, r3, #7
    74f4:	mov	r2, r7
    74f8:	sub	sp, sp, r3
    74fc:	sub	r8, fp, #724	; 0x2d4
    7500:	add	r3, sp, #8
    7504:	mov	r0, r3
    7508:	str	r3, [fp, #-876]	; 0xfffffc94
    750c:	bl	47dc <memcpy@plt>
    7510:	mov	r0, r8
    7514:	bl	5838 <rb_sha512_init_ctx>
    7518:	ands	r3, r6, #1
    751c:	mov	r2, r8
    7520:	movne	r1, r4
    7524:	movne	r0, sl
    7528:	moveq	r1, #64	; 0x40
    752c:	moveq	r0, r9
    7530:	str	r3, [fp, #-884]	; 0xfffffc8c
    7534:	bl	6654 <rb_sha512_process_bytes>
    7538:	mov	r3, #3
    753c:	udiv	r3, r6, r3
    7540:	add	r3, r3, r3, lsl #1
    7544:	cmp	r6, r3
    7548:	beq	755c <rb_sha512_crypt_r+0x310>
    754c:	mov	r2, r8
    7550:	mov	r1, r7
    7554:	ldr	r0, [fp, #-876]	; 0xfffffc94
    7558:	bl	6654 <rb_sha512_process_bytes>
    755c:	mov	r3, #7
    7560:	udiv	r3, r6, r3
    7564:	rsb	r3, r3, r3, lsl #3
    7568:	cmp	r6, r3
    756c:	beq	7580 <rb_sha512_crypt_r+0x334>
    7570:	mov	r2, r8
    7574:	mov	r1, r4
    7578:	mov	r0, sl
    757c:	bl	6654 <rb_sha512_process_bytes>
    7580:	ands	r3, r6, #1
    7584:	mov	r2, r8
    7588:	cmp	r3, #0
    758c:	add	r6, r6, #1
    7590:	movne	r1, #64	; 0x40
    7594:	movne	r0, r9
    7598:	moveq	r1, r4
    759c:	moveq	r0, sl
    75a0:	bl	6654 <rb_sha512_process_bytes>
    75a4:	mov	r1, r9
    75a8:	mov	r0, r8
    75ac:	bl	67dc <rb_sha512_finish_ctx>
    75b0:	ldr	r3, [fp, #-860]	; 0xfffffca4
    75b4:	cmp	r3, r6
    75b8:	bne	7510 <rb_sha512_crypt_r+0x2c4>
    75bc:	ldr	r3, [fp, #-880]	; 0xfffffc90
    75c0:	mov	r1, #0
    75c4:	ldr	r0, [fp, #-856]	; 0xfffffca8
    75c8:	bic	r8, r3, r3, asr #31
    75cc:	mov	r2, r8
    75d0:	bl	45fc <memset@plt>
    75d4:	ldr	r1, [pc, #2140]	; 7e38 <rb_sha512_crypt_r+0xbec>
    75d8:	mov	r2, r8
    75dc:	ldr	r0, [fp, #-856]	; 0xfffffca8
    75e0:	add	r1, pc, r1
    75e4:	add	r1, r1, #1168	; 0x490
    75e8:	add	r1, r1, #4
    75ec:	bl	4548 <strncpy@plt>
    75f0:	ldr	r0, [fp, #-856]	; 0xfffffca8
    75f4:	bl	47b8 <strlen@plt>
    75f8:	ldr	r3, [fp, #-856]	; 0xfffffca8
    75fc:	adds	r9, r3, r0
    7600:	addeq	r9, r3, r8
    7604:	ldr	r3, [fp, #-880]	; 0xfffffc90
    7608:	sub	r8, r3, #3
    760c:	ldr	r3, [fp, #-864]	; 0xfffffca0
    7610:	cmp	r3, #0
    7614:	beq	7648 <rb_sha512_crypt_r+0x3fc>
    7618:	ldr	r3, [pc, #2076]	; 7e3c <rb_sha512_crypt_r+0xbf0>
    761c:	bic	r1, r8, r8, asr #31
    7620:	mov	r0, r9
    7624:	str	r6, [sp]
    7628:	ldr	r2, [pc, #2064]	; 7e40 <rb_sha512_crypt_r+0xbf4>
    762c:	add	r3, pc, r3
    7630:	add	r3, r3, #1168	; 0x490
    7634:	add	r3, r3, #8
    7638:	add	r2, pc, r2
    763c:	bl	4b84 <snprintf@plt>
    7640:	add	r9, r9, r0
    7644:	sub	r8, r8, r0
    7648:	bic	r6, r8, r8, asr #31
    764c:	mov	r1, #0
    7650:	mov	r0, r9
    7654:	cmp	r6, r7
    7658:	movcs	r6, r7
    765c:	mov	r2, r6
    7660:	sub	r8, r8, r6
    7664:	bl	45fc <memset@plt>
    7668:	mov	r2, r6
    766c:	mov	r1, r5
    7670:	mov	r0, r9
    7674:	bl	4548 <strncpy@plt>
    7678:	ldr	r0, [fp, #-856]	; 0xfffffca8
    767c:	bl	47b8 <strlen@plt>
    7680:	ldr	r3, [fp, #-856]	; 0xfffffca8
    7684:	ldrb	r2, [fp, #-852]	; 0xfffffcac
    7688:	ldr	r1, [pc, #1972]	; 7e44 <rb_sha512_crypt_r+0xbf8>
    768c:	adds	r0, r3, r0
    7690:	addeq	r0, r3, r7
    7694:	cmp	r8, #0
    7698:	movgt	r3, #36	; 0x24
    769c:	subgt	r8, r8, #1
    76a0:	strbgt	r3, [r0], #1
    76a4:	add	r1, pc, r1
    76a8:	ldrb	r3, [fp, #-831]	; 0xfffffcc1
    76ac:	lsl	r3, r3, #8
    76b0:	orr	r3, r3, r2, lsl #16
    76b4:	ldrb	r2, [fp, #-810]	; 0xfffffcd6
    76b8:	orr	r3, r3, r2
    76bc:	add	r2, r0, #4
    76c0:	cmp	r2, r0
    76c4:	cmpne	r8, #0
    76c8:	bgt	7bfc <rb_sha512_crypt_r+0x9b0>
    76cc:	ldrb	r3, [fp, #-809]	; 0xfffffcd7
    76d0:	ldrb	r2, [fp, #-830]	; 0xfffffcc2
    76d4:	ldr	r1, [pc, #1900]	; 7e48 <rb_sha512_crypt_r+0xbfc>
    76d8:	lsl	r3, r3, #8
    76dc:	orr	r3, r3, r2, lsl #16
    76e0:	ldrb	r2, [fp, #-851]	; 0xfffffcad
    76e4:	add	r1, pc, r1
    76e8:	orr	r3, r3, r2
    76ec:	add	r2, r0, #4
    76f0:	cmp	r2, r0
    76f4:	cmpne	r8, #0
    76f8:	bgt	7c14 <rb_sha512_crypt_r+0x9c8>
    76fc:	ldrb	r3, [fp, #-850]	; 0xfffffcae
    7700:	ldrb	r2, [fp, #-808]	; 0xfffffcd8
    7704:	ldr	r1, [pc, #1856]	; 7e4c <rb_sha512_crypt_r+0xc00>
    7708:	lsl	r3, r3, #8
    770c:	orr	r3, r3, r2, lsl #16
    7710:	ldrb	r2, [fp, #-829]	; 0xfffffcc3
    7714:	add	r1, pc, r1
    7718:	orr	r3, r3, r2
    771c:	add	r2, r0, #4
    7720:	cmp	r2, r0
    7724:	cmpne	r8, #0
    7728:	bgt	7c2c <rb_sha512_crypt_r+0x9e0>
    772c:	ldrb	r3, [fp, #-828]	; 0xfffffcc4
    7730:	ldrb	r2, [fp, #-849]	; 0xfffffcaf
    7734:	ldr	r1, [pc, #1812]	; 7e50 <rb_sha512_crypt_r+0xc04>
    7738:	lsl	r3, r3, #8
    773c:	orr	r3, r3, r2, lsl #16
    7740:	ldrb	r2, [fp, #-807]	; 0xfffffcd9
    7744:	add	r1, pc, r1
    7748:	orr	r3, r3, r2
    774c:	add	r2, r0, #4
    7750:	cmp	r2, r0
    7754:	cmpne	r8, #0
    7758:	bgt	7c44 <rb_sha512_crypt_r+0x9f8>
    775c:	ldrb	r3, [fp, #-806]	; 0xfffffcda
    7760:	ldrb	r2, [fp, #-827]	; 0xfffffcc5
    7764:	ldr	r1, [pc, #1768]	; 7e54 <rb_sha512_crypt_r+0xc08>
    7768:	lsl	r3, r3, #8
    776c:	orr	r3, r3, r2, lsl #16
    7770:	ldrb	r2, [fp, #-848]	; 0xfffffcb0
    7774:	add	r1, pc, r1
    7778:	orr	r3, r3, r2
    777c:	add	r2, r0, #4
    7780:	cmp	r2, r0
    7784:	cmpne	r8, #0
    7788:	bgt	7c5c <rb_sha512_crypt_r+0xa10>
    778c:	ldrb	r3, [fp, #-847]	; 0xfffffcb1
    7790:	ldrb	r2, [fp, #-805]	; 0xfffffcdb
    7794:	ldr	r1, [pc, #1724]	; 7e58 <rb_sha512_crypt_r+0xc0c>
    7798:	lsl	r3, r3, #8
    779c:	orr	r3, r3, r2, lsl #16
    77a0:	ldrb	r2, [fp, #-826]	; 0xfffffcc6
    77a4:	add	r1, pc, r1
    77a8:	orr	r3, r3, r2
    77ac:	add	r2, r0, #4
    77b0:	cmp	r2, r0
    77b4:	cmpne	r8, #0
    77b8:	bgt	7c74 <rb_sha512_crypt_r+0xa28>
    77bc:	ldrb	r3, [fp, #-825]	; 0xfffffcc7
    77c0:	ldrb	r2, [fp, #-846]	; 0xfffffcb2
    77c4:	ldr	r1, [pc, #1680]	; 7e5c <rb_sha512_crypt_r+0xc10>
    77c8:	lsl	r3, r3, #8
    77cc:	orr	r3, r3, r2, lsl #16
    77d0:	ldrb	r2, [fp, #-804]	; 0xfffffcdc
    77d4:	add	r1, pc, r1
    77d8:	orr	r3, r3, r2
    77dc:	add	r2, r0, #4
    77e0:	cmp	r2, r0
    77e4:	cmpne	r8, #0
    77e8:	bgt	7c8c <rb_sha512_crypt_r+0xa40>
    77ec:	ldrb	r3, [fp, #-803]	; 0xfffffcdd
    77f0:	ldrb	r2, [fp, #-824]	; 0xfffffcc8
    77f4:	ldr	r1, [pc, #1636]	; 7e60 <rb_sha512_crypt_r+0xc14>
    77f8:	lsl	r3, r3, #8
    77fc:	orr	r3, r3, r2, lsl #16
    7800:	ldrb	r2, [fp, #-845]	; 0xfffffcb3
    7804:	add	r1, pc, r1
    7808:	orr	r3, r3, r2
    780c:	add	r2, r0, #4
    7810:	cmp	r2, r0
    7814:	cmpne	r8, #0
    7818:	bgt	7ca4 <rb_sha512_crypt_r+0xa58>
    781c:	ldrb	r3, [fp, #-844]	; 0xfffffcb4
    7820:	ldrb	r2, [fp, #-802]	; 0xfffffcde
    7824:	ldr	r1, [pc, #1592]	; 7e64 <rb_sha512_crypt_r+0xc18>
    7828:	lsl	r3, r3, #8
    782c:	orr	r3, r3, r2, lsl #16
    7830:	ldrb	r2, [fp, #-823]	; 0xfffffcc9
    7834:	add	r1, pc, r1
    7838:	orr	r3, r3, r2
    783c:	add	r2, r0, #4
    7840:	cmp	r2, r0
    7844:	cmpne	r8, #0
    7848:	bgt	7cbc <rb_sha512_crypt_r+0xa70>
    784c:	ldrb	r3, [fp, #-822]	; 0xfffffcca
    7850:	ldrb	r2, [fp, #-843]	; 0xfffffcb5
    7854:	ldr	r1, [pc, #1548]	; 7e68 <rb_sha512_crypt_r+0xc1c>
    7858:	lsl	r3, r3, #8
    785c:	orr	r3, r3, r2, lsl #16
    7860:	ldrb	r2, [fp, #-801]	; 0xfffffcdf
    7864:	add	r1, pc, r1
    7868:	orr	r3, r3, r2
    786c:	add	r2, r0, #4
    7870:	cmp	r2, r0
    7874:	cmpne	r8, #0
    7878:	bgt	7cd4 <rb_sha512_crypt_r+0xa88>
    787c:	ldrb	r3, [fp, #-800]	; 0xfffffce0
    7880:	ldrb	r2, [fp, #-821]	; 0xfffffccb
    7884:	ldr	r1, [pc, #1504]	; 7e6c <rb_sha512_crypt_r+0xc20>
    7888:	lsl	r3, r3, #8
    788c:	orr	r3, r3, r2, lsl #16
    7890:	ldrb	r2, [fp, #-842]	; 0xfffffcb6
    7894:	add	r1, pc, r1
    7898:	orr	r3, r3, r2
    789c:	add	r2, r0, #4
    78a0:	cmp	r2, r0
    78a4:	cmpne	r8, #0
    78a8:	bgt	7cec <rb_sha512_crypt_r+0xaa0>
    78ac:	ldrb	r3, [fp, #-841]	; 0xfffffcb7
    78b0:	ldrb	r2, [fp, #-799]	; 0xfffffce1
    78b4:	ldr	r1, [pc, #1460]	; 7e70 <rb_sha512_crypt_r+0xc24>
    78b8:	lsl	r3, r3, #8
    78bc:	orr	r3, r3, r2, lsl #16
    78c0:	ldrb	r2, [fp, #-820]	; 0xfffffccc
    78c4:	add	r1, pc, r1
    78c8:	orr	r3, r3, r2
    78cc:	add	r2, r0, #4
    78d0:	cmp	r2, r0
    78d4:	cmpne	r8, #0
    78d8:	bgt	7d04 <rb_sha512_crypt_r+0xab8>
    78dc:	ldrb	r3, [fp, #-819]	; 0xfffffccd
    78e0:	ldrb	r2, [fp, #-840]	; 0xfffffcb8
    78e4:	ldr	r1, [pc, #1416]	; 7e74 <rb_sha512_crypt_r+0xc28>
    78e8:	lsl	r3, r3, #8
    78ec:	orr	r3, r3, r2, lsl #16
    78f0:	ldrb	r2, [fp, #-798]	; 0xfffffce2
    78f4:	add	r1, pc, r1
    78f8:	orr	r3, r3, r2
    78fc:	add	r2, r0, #4
    7900:	cmp	r2, r0
    7904:	cmpne	r8, #0
    7908:	bgt	7d1c <rb_sha512_crypt_r+0xad0>
    790c:	ldrb	r3, [fp, #-797]	; 0xfffffce3
    7910:	ldrb	r2, [fp, #-818]	; 0xfffffcce
    7914:	ldr	r1, [pc, #1372]	; 7e78 <rb_sha512_crypt_r+0xc2c>
    7918:	lsl	r3, r3, #8
    791c:	orr	r3, r3, r2, lsl #16
    7920:	ldrb	r2, [fp, #-839]	; 0xfffffcb9
    7924:	add	r1, pc, r1
    7928:	orr	r3, r3, r2
    792c:	add	r2, r0, #4
    7930:	cmp	r2, r0
    7934:	cmpne	r8, #0
    7938:	bgt	7d34 <rb_sha512_crypt_r+0xae8>
    793c:	ldrb	r3, [fp, #-838]	; 0xfffffcba
    7940:	ldrb	r2, [fp, #-796]	; 0xfffffce4
    7944:	ldr	r1, [pc, #1328]	; 7e7c <rb_sha512_crypt_r+0xc30>
    7948:	lsl	r3, r3, #8
    794c:	orr	r3, r3, r2, lsl #16
    7950:	ldrb	r2, [fp, #-817]	; 0xfffffccf
    7954:	add	r1, pc, r1
    7958:	orr	r3, r3, r2
    795c:	add	r2, r0, #4
    7960:	cmp	r2, r0
    7964:	cmpne	r8, #0
    7968:	bgt	7d4c <rb_sha512_crypt_r+0xb00>
    796c:	ldrb	r3, [fp, #-816]	; 0xfffffcd0
    7970:	ldrb	r2, [fp, #-837]	; 0xfffffcbb
    7974:	ldr	r1, [pc, #1284]	; 7e80 <rb_sha512_crypt_r+0xc34>
    7978:	lsl	r3, r3, #8
    797c:	orr	r3, r3, r2, lsl #16
    7980:	ldrb	r2, [fp, #-795]	; 0xfffffce5
    7984:	add	r1, pc, r1
    7988:	orr	r3, r3, r2
    798c:	add	r2, r0, #4
    7990:	cmp	r2, r0
    7994:	cmpne	r8, #0
    7998:	bgt	7d64 <rb_sha512_crypt_r+0xb18>
    799c:	ldrb	r3, [fp, #-794]	; 0xfffffce6
    79a0:	ldrb	r2, [fp, #-815]	; 0xfffffcd1
    79a4:	ldr	r1, [pc, #1240]	; 7e84 <rb_sha512_crypt_r+0xc38>
    79a8:	lsl	r3, r3, #8
    79ac:	orr	r3, r3, r2, lsl #16
    79b0:	ldrb	r2, [fp, #-836]	; 0xfffffcbc
    79b4:	add	r1, pc, r1
    79b8:	orr	r3, r3, r2
    79bc:	add	r2, r0, #4
    79c0:	cmp	r2, r0
    79c4:	cmpne	r8, #0
    79c8:	bgt	7d7c <rb_sha512_crypt_r+0xb30>
    79cc:	ldrb	r3, [fp, #-835]	; 0xfffffcbd
    79d0:	ldrb	r2, [fp, #-793]	; 0xfffffce7
    79d4:	ldr	r1, [pc, #1196]	; 7e88 <rb_sha512_crypt_r+0xc3c>
    79d8:	lsl	r3, r3, #8
    79dc:	orr	r3, r3, r2, lsl #16
    79e0:	ldrb	r2, [fp, #-814]	; 0xfffffcd2
    79e4:	add	r1, pc, r1
    79e8:	orr	r3, r3, r2
    79ec:	add	r2, r0, #4
    79f0:	cmp	r2, r0
    79f4:	cmpne	r8, #0
    79f8:	bgt	7d94 <rb_sha512_crypt_r+0xb48>
    79fc:	ldrb	r3, [fp, #-813]	; 0xfffffcd3
    7a00:	ldrb	r2, [fp, #-834]	; 0xfffffcbe
    7a04:	ldr	r1, [pc, #1152]	; 7e8c <rb_sha512_crypt_r+0xc40>
    7a08:	lsl	r3, r3, #8
    7a0c:	orr	r3, r3, r2, lsl #16
    7a10:	ldrb	r2, [fp, #-792]	; 0xfffffce8
    7a14:	add	r1, pc, r1
    7a18:	orr	r3, r3, r2
    7a1c:	add	r2, r0, #4
    7a20:	cmp	r2, r0
    7a24:	cmpne	r8, #0
    7a28:	bgt	7dac <rb_sha512_crypt_r+0xb60>
    7a2c:	ldrb	r3, [fp, #-791]	; 0xfffffce9
    7a30:	ldrb	r2, [fp, #-812]	; 0xfffffcd4
    7a34:	ldr	r1, [pc, #1108]	; 7e90 <rb_sha512_crypt_r+0xc44>
    7a38:	lsl	r3, r3, #8
    7a3c:	orr	r3, r3, r2, lsl #16
    7a40:	ldrb	r2, [fp, #-833]	; 0xfffffcbf
    7a44:	add	r1, pc, r1
    7a48:	orr	r3, r3, r2
    7a4c:	add	r2, r0, #4
    7a50:	cmp	r2, r0
    7a54:	cmpne	r8, #0
    7a58:	bgt	7dc4 <rb_sha512_crypt_r+0xb78>
    7a5c:	ldrb	r3, [fp, #-832]	; 0xfffffcc0
    7a60:	ldrb	r2, [fp, #-790]	; 0xfffffcea
    7a64:	ldr	ip, [pc, #1064]	; 7e94 <rb_sha512_crypt_r+0xc48>
    7a68:	lsl	r3, r3, #8
    7a6c:	orr	r3, r3, r2, lsl #16
    7a70:	ldrb	r2, [fp, #-811]	; 0xfffffcd5
    7a74:	add	ip, pc, ip
    7a78:	orr	r3, r3, r2
    7a7c:	add	r2, r0, #4
    7a80:	cmp	r0, r2
    7a84:	cmpne	r8, #0
    7a88:	movgt	r1, #1
    7a8c:	movle	r1, #0
    7a90:	bgt	7ddc <rb_sha512_crypt_r+0xb90>
    7a94:	cmp	r8, #0
    7a98:	ldrb	r2, [fp, #-789]	; 0xfffffceb
    7a9c:	bgt	7df4 <rb_sha512_crypt_r+0xba8>
    7aa0:	bl	4cbc <__errno_location@plt>
    7aa4:	mov	r3, #34	; 0x22
    7aa8:	str	r3, [r0]
    7aac:	mov	r3, #0
    7ab0:	str	r3, [fp, #-856]	; 0xfffffca8
    7ab4:	sub	r5, fp, #724	; 0x2d4
    7ab8:	mov	r0, r5
    7abc:	bl	5838 <rb_sha512_init_ctx>
    7ac0:	sub	r1, fp, #852	; 0x354
    7ac4:	bl	67dc <rb_sha512_finish_ctx>
    7ac8:	mov	r2, #64	; 0x40
    7acc:	mov	r1, #0
    7ad0:	sub	r0, fp, #788	; 0x314
    7ad4:	bl	45fc <memset@plt>
    7ad8:	mov	r2, r4
    7adc:	mov	r1, #0
    7ae0:	mov	r0, sl
    7ae4:	bl	45fc <memset@plt>
    7ae8:	mov	r2, r7
    7aec:	mov	r1, #0
    7af0:	ldr	r0, [fp, #-876]	; 0xfffffc94
    7af4:	bl	45fc <memset@plt>
    7af8:	mov	r2, #344	; 0x158
    7afc:	mov	r1, #0
    7b00:	mov	r0, r5
    7b04:	bl	45fc <memset@plt>
    7b08:	mov	r2, #344	; 0x158
    7b0c:	mov	r1, #0
    7b10:	sub	r0, fp, #380	; 0x17c
    7b14:	bl	45fc <memset@plt>
    7b18:	ldr	r3, [fp, #-868]	; 0xfffffc9c
    7b1c:	cmp	r3, #0
    7b20:	beq	7b34 <rb_sha512_crypt_r+0x8e8>
    7b24:	mov	r2, r4
    7b28:	mov	r1, #0
    7b2c:	mov	r0, r3
    7b30:	bl	45fc <memset@plt>
    7b34:	ldr	r3, [fp, #-872]	; 0xfffffc98
    7b38:	cmp	r3, #0
    7b3c:	beq	7b50 <rb_sha512_crypt_r+0x904>
    7b40:	mov	r2, r7
    7b44:	mov	r1, #0
    7b48:	mov	r0, r3
    7b4c:	bl	45fc <memset@plt>
    7b50:	ldr	r0, [fp, #-856]	; 0xfffffca8
    7b54:	sub	sp, fp, #32
    7b58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7b5c:	movw	r3, #5000	; 0x1388
    7b60:	str	r3, [fp, #-860]	; 0xfffffca4
    7b64:	b	72fc <rb_sha512_crypt_r+0xb0>
    7b68:	mov	r1, #64	; 0x40
    7b6c:	mov	r0, sl
    7b70:	bl	6654 <rb_sha512_process_bytes>
    7b74:	sub	r6, r6, #64	; 0x40
    7b78:	ldr	r3, [fp, #-876]	; 0xfffffc94
    7b7c:	b	7410 <rb_sha512_crypt_r+0x1c4>
    7b80:	tst	r6, #1
    7b84:	mov	r2, r3
    7b88:	lsr	r6, r6, #1
    7b8c:	movne	r1, #64	; 0x40
    7b90:	movne	r0, sl
    7b94:	str	r3, [fp, #-876]	; 0xfffffc94
    7b98:	moveq	r1, r4
    7b9c:	moveq	r0, r8
    7ba0:	bl	6654 <rb_sha512_process_bytes>
    7ba4:	ldr	r3, [fp, #-876]	; 0xfffffc94
    7ba8:	b	7434 <rb_sha512_crypt_r+0x1e8>
    7bac:	mov	r2, r3
    7bb0:	mov	r1, r4
    7bb4:	str	r3, [fp, #-876]	; 0xfffffc94
    7bb8:	mov	r0, r8
    7bbc:	add	sl, sl, #1
    7bc0:	bl	6654 <rb_sha512_process_bytes>
    7bc4:	ldr	r3, [fp, #-876]	; 0xfffffc94
    7bc8:	b	7458 <rb_sha512_crypt_r+0x20c>
    7bcc:	sub	lr, fp, #788	; 0x314
    7bd0:	add	ip, sl, r8, lsl #6
    7bd4:	add	r8, r8, #1
    7bd8:	ldm	lr!, {r0, r1, r2, r3}
    7bdc:	stmia	ip!, {r0, r1, r2, r3}
    7be0:	ldm	lr!, {r0, r1, r2, r3}
    7be4:	stmia	ip!, {r0, r1, r2, r3}
    7be8:	ldm	lr!, {r0, r1, r2, r3}
    7bec:	stmia	ip!, {r0, r1, r2, r3}
    7bf0:	ldm	lr, {r0, r1, r2, r3}
    7bf4:	stm	ip, {r0, r1, r2, r3}
    7bf8:	b	7484 <rb_sha512_crypt_r+0x238>
    7bfc:	and	ip, r3, #63	; 0x3f
    7c00:	sub	r8, r8, #1
    7c04:	lsr	r3, r3, #6
    7c08:	ldrb	ip, [r1, ip]
    7c0c:	strb	ip, [r0], #1
    7c10:	b	76c0 <rb_sha512_crypt_r+0x474>
    7c14:	and	ip, r3, #63	; 0x3f
    7c18:	sub	r8, r8, #1
    7c1c:	lsr	r3, r3, #6
    7c20:	ldrb	ip, [r1, ip]
    7c24:	strb	ip, [r0], #1
    7c28:	b	76f0 <rb_sha512_crypt_r+0x4a4>
    7c2c:	and	ip, r3, #63	; 0x3f
    7c30:	sub	r8, r8, #1
    7c34:	lsr	r3, r3, #6
    7c38:	ldrb	ip, [r1, ip]
    7c3c:	strb	ip, [r0], #1
    7c40:	b	7720 <rb_sha512_crypt_r+0x4d4>
    7c44:	and	ip, r3, #63	; 0x3f
    7c48:	sub	r8, r8, #1
    7c4c:	lsr	r3, r3, #6
    7c50:	ldrb	ip, [r1, ip]
    7c54:	strb	ip, [r0], #1
    7c58:	b	7750 <rb_sha512_crypt_r+0x504>
    7c5c:	and	ip, r3, #63	; 0x3f
    7c60:	sub	r8, r8, #1
    7c64:	lsr	r3, r3, #6
    7c68:	ldrb	ip, [r1, ip]
    7c6c:	strb	ip, [r0], #1
    7c70:	b	7780 <rb_sha512_crypt_r+0x534>
    7c74:	and	ip, r3, #63	; 0x3f
    7c78:	sub	r8, r8, #1
    7c7c:	lsr	r3, r3, #6
    7c80:	ldrb	ip, [r1, ip]
    7c84:	strb	ip, [r0], #1
    7c88:	b	77b0 <rb_sha512_crypt_r+0x564>
    7c8c:	and	ip, r3, #63	; 0x3f
    7c90:	sub	r8, r8, #1
    7c94:	lsr	r3, r3, #6
    7c98:	ldrb	ip, [r1, ip]
    7c9c:	strb	ip, [r0], #1
    7ca0:	b	77e0 <rb_sha512_crypt_r+0x594>
    7ca4:	and	ip, r3, #63	; 0x3f
    7ca8:	sub	r8, r8, #1
    7cac:	lsr	r3, r3, #6
    7cb0:	ldrb	ip, [r1, ip]
    7cb4:	strb	ip, [r0], #1
    7cb8:	b	7810 <rb_sha512_crypt_r+0x5c4>
    7cbc:	and	ip, r3, #63	; 0x3f
    7cc0:	sub	r8, r8, #1
    7cc4:	lsr	r3, r3, #6
    7cc8:	ldrb	ip, [r1, ip]
    7ccc:	strb	ip, [r0], #1
    7cd0:	b	7840 <rb_sha512_crypt_r+0x5f4>
    7cd4:	and	ip, r3, #63	; 0x3f
    7cd8:	sub	r8, r8, #1
    7cdc:	lsr	r3, r3, #6
    7ce0:	ldrb	ip, [r1, ip]
    7ce4:	strb	ip, [r0], #1
    7ce8:	b	7870 <rb_sha512_crypt_r+0x624>
    7cec:	and	ip, r3, #63	; 0x3f
    7cf0:	sub	r8, r8, #1
    7cf4:	lsr	r3, r3, #6
    7cf8:	ldrb	ip, [r1, ip]
    7cfc:	strb	ip, [r0], #1
    7d00:	b	78a0 <rb_sha512_crypt_r+0x654>
    7d04:	and	ip, r3, #63	; 0x3f
    7d08:	sub	r8, r8, #1
    7d0c:	lsr	r3, r3, #6
    7d10:	ldrb	ip, [r1, ip]
    7d14:	strb	ip, [r0], #1
    7d18:	b	78d0 <rb_sha512_crypt_r+0x684>
    7d1c:	and	ip, r3, #63	; 0x3f
    7d20:	sub	r8, r8, #1
    7d24:	lsr	r3, r3, #6
    7d28:	ldrb	ip, [r1, ip]
    7d2c:	strb	ip, [r0], #1
    7d30:	b	7900 <rb_sha512_crypt_r+0x6b4>
    7d34:	and	ip, r3, #63	; 0x3f
    7d38:	sub	r8, r8, #1
    7d3c:	lsr	r3, r3, #6
    7d40:	ldrb	ip, [r1, ip]
    7d44:	strb	ip, [r0], #1
    7d48:	b	7930 <rb_sha512_crypt_r+0x6e4>
    7d4c:	and	ip, r3, #63	; 0x3f
    7d50:	sub	r8, r8, #1
    7d54:	lsr	r3, r3, #6
    7d58:	ldrb	ip, [r1, ip]
    7d5c:	strb	ip, [r0], #1
    7d60:	b	7960 <rb_sha512_crypt_r+0x714>
    7d64:	and	ip, r3, #63	; 0x3f
    7d68:	sub	r8, r8, #1
    7d6c:	lsr	r3, r3, #6
    7d70:	ldrb	ip, [r1, ip]
    7d74:	strb	ip, [r0], #1
    7d78:	b	7990 <rb_sha512_crypt_r+0x744>
    7d7c:	and	ip, r3, #63	; 0x3f
    7d80:	sub	r8, r8, #1
    7d84:	lsr	r3, r3, #6
    7d88:	ldrb	ip, [r1, ip]
    7d8c:	strb	ip, [r0], #1
    7d90:	b	79c0 <rb_sha512_crypt_r+0x774>
    7d94:	and	ip, r3, #63	; 0x3f
    7d98:	sub	r8, r8, #1
    7d9c:	lsr	r3, r3, #6
    7da0:	ldrb	ip, [r1, ip]
    7da4:	strb	ip, [r0], #1
    7da8:	b	79f0 <rb_sha512_crypt_r+0x7a4>
    7dac:	and	ip, r3, #63	; 0x3f
    7db0:	sub	r8, r8, #1
    7db4:	lsr	r3, r3, #6
    7db8:	ldrb	ip, [r1, ip]
    7dbc:	strb	ip, [r0], #1
    7dc0:	b	7a20 <rb_sha512_crypt_r+0x7d4>
    7dc4:	and	ip, r3, #63	; 0x3f
    7dc8:	sub	r8, r8, #1
    7dcc:	lsr	r3, r3, #6
    7dd0:	ldrb	ip, [r1, ip]
    7dd4:	strb	ip, [r0], #1
    7dd8:	b	7a50 <rb_sha512_crypt_r+0x804>
    7ddc:	and	r1, r3, #63	; 0x3f
    7de0:	sub	r8, r8, #1
    7de4:	lsr	r3, r3, #6
    7de8:	ldrb	r1, [ip, r1]
    7dec:	strb	r1, [r0], #1
    7df0:	b	7a80 <rb_sha512_crypt_r+0x834>
    7df4:	ldr	r3, [pc, #156]	; 7e98 <rb_sha512_crypt_r+0xc4c>
    7df8:	and	ip, r2, #63	; 0x3f
    7dfc:	cmp	r8, #1
    7e00:	add	r3, pc, r3
    7e04:	ldrb	ip, [r3, ip]
    7e08:	strb	ip, [r0]
    7e0c:	beq	7aa0 <rb_sha512_crypt_r+0x854>
    7e10:	ldrb	r3, [r3, r2, lsr #6]
    7e14:	cmp	r8, #2
    7e18:	strb	r3, [r0, #1]
    7e1c:	ble	7aa0 <rb_sha512_crypt_r+0x854>
    7e20:	strb	r1, [r0, #2]
    7e24:	b	7ab4 <rb_sha512_crypt_r+0x868>
    7e28:	.word	0x0000b8d0
    7e2c:	.word	0x0000b8ac
    7e30:	.word	0x3b9ac9ff
    7e34:	.word	0x0000c045
    7e38:	.word	0x0000b560
    7e3c:	.word	0x0000b514
    7e40:	.word	0x0000bd08
    7e44:	.word	0x0000b49c
    7e48:	.word	0x0000b45c
    7e4c:	.word	0x0000b42c
    7e50:	.word	0x0000b3fc
    7e54:	.word	0x0000b3cc
    7e58:	.word	0x0000b39c
    7e5c:	.word	0x0000b36c
    7e60:	.word	0x0000b33c
    7e64:	.word	0x0000b30c
    7e68:	.word	0x0000b2dc
    7e6c:	.word	0x0000b2ac
    7e70:	.word	0x0000b27c
    7e74:	.word	0x0000b24c
    7e78:	.word	0x0000b21c
    7e7c:	.word	0x0000b1ec
    7e80:	.word	0x0000b1bc
    7e84:	.word	0x0000b18c
    7e88:	.word	0x0000b15c
    7e8c:	.word	0x0000b12c
    7e90:	.word	0x0000b0fc
    7e94:	.word	0x0000b0cc
    7e98:	.word	0x0000ad40

00007e9c <rb_ascii_to_bin>:
    7e9c:	cmp	r0, #122	; 0x7a
    7ea0:	bhi	7ee0 <rb_ascii_to_bin+0x44>
    7ea4:	cmp	r0, #96	; 0x60
    7ea8:	bls	7eb4 <rb_ascii_to_bin+0x18>
    7eac:	sub	r0, r0, #59	; 0x3b
    7eb0:	bx	lr
    7eb4:	cmp	r0, #90	; 0x5a
    7eb8:	bhi	7ee0 <rb_ascii_to_bin+0x44>
    7ebc:	cmp	r0, #64	; 0x40
    7ec0:	bls	7ecc <rb_ascii_to_bin+0x30>
    7ec4:	sub	r0, r0, #53	; 0x35
    7ec8:	bx	lr
    7ecc:	sub	r0, r0, #46	; 0x2e
    7ed0:	uxtb	r3, r0
    7ed4:	cmp	r3, #11
    7ed8:	movhi	r0, #0
    7edc:	bx	lr
    7ee0:	mov	r0, #0
    7ee4:	bx	lr

00007ee8 <rb_des_init>:
    7ee8:	ldr	r3, [pc, #1372]	; 844c <rb_des_init+0x564>
    7eec:	add	r3, pc, r3
    7ef0:	ldr	r2, [r3]
    7ef4:	cmp	r2, #1
    7ef8:	bxeq	lr
    7efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7f00:	mov	r1, #0
    7f04:	sub	sp, sp, #44	; 0x2c
    7f08:	mov	ip, r1
    7f0c:	add	r3, r3, #28
    7f10:	ldr	r2, [pc, #1336]	; 8450 <rb_des_init+0x568>
    7f14:	str	r1, [r3, #-24]	; 0xffffffe8
    7f18:	str	r1, [r3, #-20]	; 0xffffffec
    7f1c:	str	r1, [r3, #-16]
    7f20:	str	r1, [r3, #-12]
    7f24:	add	r2, pc, r2
    7f28:	add	r0, r2, #1200	; 0x4b0
    7f2c:	str	r0, [r3, #-8]
    7f30:	add	r0, r2, #1216	; 0x4c0
    7f34:	str	r0, [r3, #-4]
    7f38:	mov	r0, r2
    7f3c:	add	r5, r0, ip, lsl #6
    7f40:	mov	r4, r3
    7f44:	mov	r1, #0
    7f48:	ubfx	r2, r1, #1, #4
    7f4c:	and	lr, r1, #32
    7f50:	orr	r2, r2, lr
    7f54:	lsl	lr, r1, #4
    7f58:	add	r1, r1, #1
    7f5c:	cmp	r1, #64	; 0x40
    7f60:	and	lr, lr, #16
    7f64:	orr	r2, r2, lr
    7f68:	add	r2, r5, r2
    7f6c:	ldrb	r2, [r2, #1312]	; 0x520
    7f70:	strb	r2, [r4], #1
    7f74:	bne	7f48 <rb_des_init+0x60>
    7f78:	add	ip, ip, #1
    7f7c:	add	r3, r3, #64	; 0x40
    7f80:	cmp	ip, #8
    7f84:	bne	7f3c <rb_des_init+0x54>
    7f88:	ldr	r3, [pc, #1220]	; 8454 <rb_des_init+0x56c>
    7f8c:	mov	r1, #0
    7f90:	ldr	r7, [pc, #1216]	; 8458 <rb_des_init+0x570>
    7f94:	add	r3, pc, r3
    7f98:	add	r3, r3, #92	; 0x5c
    7f9c:	add	r7, pc, r7
    7fa0:	sub	r4, r3, #64	; 0x40
    7fa4:	mov	r0, #0
    7fa8:	add	r6, r7, r1, lsl #12
    7fac:	b	7fd8 <rb_des_init+0xf0>
    7fb0:	ldrb	lr, [r5], #1
    7fb4:	orr	r8, r0, ip
    7fb8:	add	ip, ip, #1
    7fbc:	cmp	ip, #64	; 0x40
    7fc0:	orr	lr, r2, lr
    7fc4:	strb	lr, [r6, r8]
    7fc8:	bne	7fb0 <rb_des_init+0xc8>
    7fcc:	add	r0, r0, #64	; 0x40
    7fd0:	cmp	r0, #4096	; 0x1000
    7fd4:	beq	7ff0 <rb_des_init+0x108>
    7fd8:	ldrb	r2, [r4], #1
    7fdc:	mov	r5, r3
    7fe0:	mov	ip, #0
    7fe4:	lsl	r2, r2, #4
    7fe8:	sxtb	r2, r2
    7fec:	b	7fb0 <rb_des_init+0xc8>
    7ff0:	add	r1, r1, #1
    7ff4:	add	r3, r3, #128	; 0x80
    7ff8:	cmp	r1, #4
    7ffc:	bne	7fa0 <rb_des_init+0xb8>
    8000:	ldr	r0, [pc, #1108]	; 845c <rb_des_init+0x574>
    8004:	mov	r1, #0
    8008:	mvn	r4, #0
    800c:	ldr	r3, [pc, #1100]	; 8460 <rb_des_init+0x578>
    8010:	add	r0, pc, r0
    8014:	add	r0, r0, #1824	; 0x720
    8018:	add	r3, pc, r3
    801c:	add	lr, r3, #540	; 0x21c
    8020:	add	ip, r3, #604	; 0x25c
    8024:	ldrb	r2, [r0], #1
    8028:	strb	r4, [ip], #1
    802c:	sub	r2, r2, #1
    8030:	uxtb	r2, r2
    8034:	strb	r2, [lr], #1
    8038:	add	r2, r3, r2
    803c:	strb	r1, [r2, #668]	; 0x29c
    8040:	add	r1, r1, #1
    8044:	cmp	r1, #64	; 0x40
    8048:	bne	8024 <rb_des_init+0x13c>
    804c:	ldr	r1, [pc, #1040]	; 8464 <rb_des_init+0x57c>
    8050:	add	r3, r3, #732	; 0x2dc
    8054:	mov	r2, #0
    8058:	sub	lr, r3, #732	; 0x2dc
    805c:	mvn	ip, #0
    8060:	add	r1, pc, r1
    8064:	add	r1, r1, #1888	; 0x760
    8068:	ldrb	r0, [r1], #1
    806c:	strb	ip, [r3], #1
    8070:	add	r0, lr, r0
    8074:	strb	r2, [r0, #603]	; 0x25b
    8078:	add	r2, r2, #1
    807c:	cmp	r2, #56	; 0x38
    8080:	bne	8068 <rb_des_init+0x180>
    8084:	ldr	r2, [pc, #988]	; 8468 <rb_des_init+0x580>
    8088:	mov	r1, #0
    808c:	ldr	r3, [pc, #984]	; 846c <rb_des_init+0x584>
    8090:	add	r2, pc, r2
    8094:	add	r2, r2, #1936	; 0x790
    8098:	add	r2, r2, #8
    809c:	add	r3, pc, r3
    80a0:	ldrb	r0, [r2], #1
    80a4:	add	r0, r3, r0
    80a8:	strb	r1, [r0, #731]	; 0x2db
    80ac:	add	r1, r1, #1
    80b0:	cmp	r1, #48	; 0x30
    80b4:	bne	80a0 <rb_des_init+0x1b8>
    80b8:	mov	r1, #8
    80bc:	add	r6, r3, #728	; 0x2d8
    80c0:	mov	r2, #0
    80c4:	add	r3, r3, #600	; 0x258
    80c8:	add	r3, r3, #3
    80cc:	add	r6, r6, #3
    80d0:	str	r1, [sp, #16]
    80d4:	mov	r5, r2
    80d8:	ldr	r1, [pc, #912]	; 8470 <rb_des_init+0x588>
    80dc:	str	r3, [sp, #4]
    80e0:	str	r2, [sp, #12]
    80e4:	add	r1, pc, r1
    80e8:	add	r1, r1, #1984	; 0x7c0
    80ec:	add	r1, r1, #8
    80f0:	str	r1, [sp, #8]
    80f4:	ldr	r1, [pc, #888]	; 8474 <rb_des_init+0x58c>
    80f8:	add	r1, pc, r1
    80fc:	add	r1, r1, #668	; 0x29c
    8100:	str	r1, [sp, #28]
    8104:	ldr	r1, [pc, #876]	; 8478 <rb_des_init+0x590>
    8108:	add	r1, pc, r1
    810c:	add	r1, r1, #540	; 0x21c
    8110:	str	r1, [sp, #32]
    8114:	ldr	r1, [pc, #864]	; 847c <rb_des_init+0x594>
    8118:	add	r1, pc, r1
    811c:	str	r1, [sp, #36]	; 0x24
    8120:	ldr	r4, [pc, #856]	; 8480 <rb_des_init+0x598>
    8124:	mov	r8, #0
    8128:	ldr	lr, [pc, #852]	; 8484 <rb_des_init+0x59c>
    812c:	ldr	ip, [pc, #852]	; 8488 <rb_des_init+0x5a0>
    8130:	add	r4, pc, r4
    8134:	ldr	r0, [pc, #848]	; 848c <rb_des_init+0x5a4>
    8138:	add	r4, r2, r4
    813c:	add	lr, pc, lr
    8140:	add	lr, r2, lr
    8144:	add	ip, pc, ip
    8148:	add	ip, r2, ip
    814c:	add	r0, pc, r0
    8150:	add	r0, r2, r0
    8154:	mov	r1, #0
    8158:	ldr	sl, [pc, #816]	; 8490 <rb_des_init+0x5a8>
    815c:	ldr	fp, [pc, #816]	; 8494 <rb_des_init+0x5ac>
    8160:	str	r1, [r4], #4
    8164:	str	r1, [lr], #4
    8168:	str	r1, [ip], #4
    816c:	add	sl, pc, sl
    8170:	str	r1, [r0], #4
    8174:	ldr	r1, [pc, #796]	; 8498 <rb_des_init+0x5b0>
    8178:	add	fp, pc, fp
    817c:	ldr	r9, [sp, #8]
    8180:	ldr	r7, [sp, #12]
    8184:	add	r1, pc, r1
    8188:	str	r1, [sp, #20]
    818c:	ldrb	r1, [r9], #1
    8190:	tst	r1, r8
    8194:	beq	81e4 <rb_des_init+0x2fc>
    8198:	ldr	r1, [sp, #28]
    819c:	ldrb	r1, [r7, r1]
    81a0:	cmp	r1, #31
    81a4:	bgt	8418 <rb_des_init+0x530>
    81a8:	add	r1, fp, r1, lsl #2
    81ac:	ldr	r3, [r4, #-4]
    81b0:	ldr	r1, [r1, #1184]	; 0x4a0
    81b4:	orr	r1, r3, r1
    81b8:	str	r1, [r4, #-4]
    81bc:	ldr	r3, [sp, #32]
    81c0:	ldrb	r1, [r7, r3]
    81c4:	cmp	r1, #31
    81c8:	bgt	8430 <rb_des_init+0x548>
    81cc:	ldr	r3, [sp, #20]
    81d0:	add	r1, r3, r1, lsl #2
    81d4:	ldr	r3, [ip, #-4]
    81d8:	ldr	r1, [r1, #1184]	; 0x4a0
    81dc:	orr	r1, r3, r1
    81e0:	str	r1, [ip, #-4]
    81e4:	ldr	r3, [sp, #16]
    81e8:	add	r7, r7, #1
    81ec:	cmp	r7, r3
    81f0:	bne	818c <rb_des_init+0x2a4>
    81f4:	add	r8, r8, #1
    81f8:	cmp	r8, #256	; 0x100
    81fc:	bne	8154 <rb_des_init+0x26c>
    8200:	ldr	sl, [pc, #660]	; 849c <rb_des_init+0x5b4>
    8204:	mov	lr, #0
    8208:	mov	r9, lr
    820c:	ldr	r4, [pc, #652]	; 84a0 <rb_des_init+0x5b8>
    8210:	ldr	r7, [pc, #652]	; 84a4 <rb_des_init+0x5bc>
    8214:	add	sl, pc, sl
    8218:	ldr	ip, [pc, #648]	; 84a8 <rb_des_init+0x5c0>
    821c:	add	fp, sl, #1984	; 0x7c0
    8220:	add	r4, pc, r4
    8224:	add	fp, fp, #8
    8228:	ldr	r0, [pc, #636]	; 84ac <rb_des_init+0x5c4>
    822c:	add	r4, r5, r4
    8230:	add	r7, pc, r7
    8234:	strd	sl, [sp, #20]
    8238:	add	r7, r5, r7
    823c:	add	ip, pc, ip
    8240:	add	ip, r5, ip
    8244:	add	r0, pc, r0
    8248:	add	r0, r5, r0
    824c:	mov	r8, #0
    8250:	str	r9, [r4], #4
    8254:	str	r9, [r7], #4
    8258:	add	r8, r8, #1
    825c:	ldrb	r1, [r8, fp]
    8260:	tst	r1, lr
    8264:	beq	82a0 <rb_des_init+0x3b8>
    8268:	ldr	r3, [sp, #4]
    826c:	ldrb	r1, [r3, r8]
    8270:	cmp	r1, #255	; 0xff
    8274:	beq	82a0 <rb_des_init+0x3b8>
    8278:	cmp	r1, #27
    827c:	add	r1, sl, r1, lsl #2
    8280:	ldrle	r3, [r4, #-4]
    8284:	ldrle	r1, [r1, #1200]	; 0x4b0
    8288:	ldrgt	r1, [r1, #1088]	; 0x440
    828c:	ldrgt	r3, [r7, #-4]
    8290:	orrle	r1, r3, r1
    8294:	strle	r1, [r4, #-4]
    8298:	orrgt	r1, r3, r1
    829c:	strgt	r1, [r7, #-4]
    82a0:	cmp	r8, #7
    82a4:	bne	8258 <rb_des_init+0x370>
    82a8:	mov	r8, #0
    82ac:	str	r9, [r0]
    82b0:	str	r9, [ip]
    82b4:	ldr	r3, [sp, #24]
    82b8:	add	r8, r8, #1
    82bc:	ldrb	r1, [r8, r3]
    82c0:	tst	r1, lr
    82c4:	beq	8300 <rb_des_init+0x418>
    82c8:	ldrb	r1, [r6, r8]
    82cc:	cmp	r1, #255	; 0xff
    82d0:	beq	8300 <rb_des_init+0x418>
    82d4:	ldr	r3, [sp, #20]
    82d8:	cmp	r1, #23
    82dc:	add	r1, r3, r1, lsl #2
    82e0:	ldrle	r3, [ip]
    82e4:	ldrle	r1, [r1, #1216]	; 0x4c0
    82e8:	ldrgt	r3, [r0]
    82ec:	ldrgt	r1, [r1, #1120]	; 0x460
    82f0:	orrle	r1, r3, r1
    82f4:	strle	r1, [ip]
    82f8:	orrgt	r1, r3, r1
    82fc:	strgt	r1, [r0]
    8300:	cmp	r8, #7
    8304:	bne	82b4 <rb_des_init+0x3cc>
    8308:	add	lr, lr, #1
    830c:	add	ip, ip, #4
    8310:	cmp	lr, #128	; 0x80
    8314:	add	r0, r0, #4
    8318:	bne	824c <rb_des_init+0x364>
    831c:	ldr	r3, [sp, #4]
    8320:	add	r6, r6, #7
    8324:	add	r5, r5, #512	; 0x200
    8328:	add	r2, r2, #1024	; 0x400
    832c:	add	r3, r3, #8
    8330:	str	r3, [sp, #4]
    8334:	ldr	r3, [sp, #16]
    8338:	add	r3, r3, #8
    833c:	str	r3, [sp, #16]
    8340:	ldr	r3, [sp, #12]
    8344:	add	r3, r3, #8
    8348:	cmp	r3, #64	; 0x40
    834c:	str	r3, [sp, #12]
    8350:	bne	8120 <rb_des_init+0x238>
    8354:	ldr	r1, [pc, #340]	; 84b0 <rb_des_init+0x5c8>
    8358:	mov	r2, #0
    835c:	ldr	r3, [pc, #336]	; 84b4 <rb_des_init+0x5cc>
    8360:	add	r1, pc, r1
    8364:	add	r1, r1, #2000	; 0x7d0
    8368:	add	r3, pc, r3
    836c:	ldrb	r0, [r1], #1
    8370:	add	r0, r3, r0
    8374:	strb	r2, [r0, #787]	; 0x313
    8378:	add	r2, r2, #1
    837c:	cmp	r2, #32
    8380:	bne	836c <rb_des_init+0x484>
    8384:	ldr	r0, [pc, #300]	; 84b8 <rb_des_init+0x5d0>
    8388:	add	r3, r3, #788	; 0x314
    838c:	mov	r5, #4
    8390:	mov	r7, #0
    8394:	ldr	r8, [pc, #288]	; 84bc <rb_des_init+0x5d4>
    8398:	add	r0, pc, r0
    839c:	add	r8, pc, r8
    83a0:	mov	r1, r0
    83a4:	mov	r2, #0
    83a8:	ldr	r6, [sp, #8]
    83ac:	mov	r4, #0
    83b0:	str	r7, [r1], #4
    83b4:	ldrb	ip, [r6], #1
    83b8:	tst	ip, r2
    83bc:	beq	83d8 <rb_des_init+0x4f0>
    83c0:	ldrb	lr, [r3, r4]
    83c4:	ldr	ip, [r1, #-4]
    83c8:	add	lr, r8, lr, lsl #2
    83cc:	ldr	lr, [lr, #1184]	; 0x4a0
    83d0:	orr	ip, ip, lr
    83d4:	str	ip, [r1, #-4]
    83d8:	add	r4, r4, #1
    83dc:	cmp	r4, #8
    83e0:	bne	83b4 <rb_des_init+0x4cc>
    83e4:	add	r2, r2, #1
    83e8:	cmp	r2, #256	; 0x100
    83ec:	bne	83a8 <rb_des_init+0x4c0>
    83f0:	subs	r5, r5, #1
    83f4:	add	r3, r3, #8
    83f8:	add	r0, r0, #1024	; 0x400
    83fc:	bne	83a0 <rb_des_init+0x4b8>
    8400:	ldr	r3, [pc, #184]	; 84c0 <rb_des_init+0x5d8>
    8404:	mov	r2, #1
    8408:	add	r3, pc, r3
    840c:	str	r2, [r3]
    8410:	add	sp, sp, #44	; 0x2c
    8414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8418:	add	r1, sl, r1, lsl #2
    841c:	ldr	r3, [lr, #-4]
    8420:	ldr	r1, [r1, #1056]	; 0x420
    8424:	orr	r1, r3, r1
    8428:	str	r1, [lr, #-4]
    842c:	b	81bc <rb_des_init+0x2d4>
    8430:	ldr	r3, [sp, #36]	; 0x24
    8434:	add	r1, r3, r1, lsl #2
    8438:	ldr	r3, [r0, #-4]
    843c:	ldr	r1, [r1, #1056]	; 0x420
    8440:	orr	r1, r3, r1
    8444:	str	r1, [r0, #-4]
    8448:	b	81e4 <rb_des_init+0x2fc>
    844c:	.word	0x0001e5e0
    8450:	.word	0x0000ac1c
    8454:	.word	0x0001e538
    8458:	.word	0x0001fa08
    845c:	.word	0x0000ab30
    8460:	.word	0x0001e4b4
    8464:	.word	0x0000aae0
    8468:	.word	0x0000aab0
    846c:	.word	0x0001e430
    8470:	.word	0x0000aa5c
    8474:	.word	0x0001e3d4
    8478:	.word	0x0001e3c4
    847c:	.word	0x0000aa28
    8480:	.word	0x0002d874
    8484:	.word	0x0002b868
    8488:	.word	0x00029860
    848c:	.word	0x00027858
    8490:	.word	0x0000a9d4
    8494:	.word	0x0000a9c8
    8498:	.word	0x0000a9bc
    849c:	.word	0x0000a92c
    84a0:	.word	0x00026784
    84a4:	.word	0x00025774
    84a8:	.word	0x00024768
    84ac:	.word	0x00023760
    84b0:	.word	0x0000a7e0
    84b4:	.word	0x0001e164
    84b8:	.word	0x0001e60c
    84bc:	.word	0x0000a7a4
    84c0:	.word	0x0001e0c4

000084c4 <rb_crypt>:
    84c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84c8:	mov	r4, r0
    84cc:	sub	sp, sp, #228	; 0xe4
    84d0:	mov	r5, r1
    84d4:	ldrb	r3, [r1]
    84d8:	cmp	r3, #36	; 0x24
    84dc:	bne	89e4 <rb_crypt+0x520>
    84e0:	ldrb	r3, [r1, #2]
    84e4:	cmp	r3, #36	; 0x24
    84e8:	beq	84f8 <rb_crypt+0x34>
    84ec:	ldrb	r3, [r1, #3]
    84f0:	cmp	r3, #36	; 0x24
    84f4:	bne	89e4 <rb_crypt+0x520>
    84f8:	ldrb	r3, [r5, #1]
    84fc:	cmp	r3, #53	; 0x35
    8500:	beq	8950 <rb_crypt+0x48c>
    8504:	cmp	r3, #54	; 0x36
    8508:	beq	8988 <rb_crypt+0x4c4>
    850c:	cmp	r3, #49	; 0x31
    8510:	bne	896c <rb_crypt+0x4a8>
    8514:	ldr	r6, [pc, #2904]	; 9074 <rb_crypt+0xbb0>
    8518:	mov	r0, r5
    851c:	mov	r2, #3
    8520:	ldr	r1, [pc, #2896]	; 9078 <rb_crypt+0xbb4>
    8524:	add	r6, pc, r6
    8528:	add	r1, pc, r1
    852c:	str	r5, [r6, #1092]	; 0x444
    8530:	bl	4be4 <strncmp@plt>
    8534:	ldr	r3, [pc, #2880]	; 907c <rb_crypt+0xbb8>
    8538:	cmp	r0, #0
    853c:	mov	r1, #0
    8540:	addeq	r5, r5, #3
    8544:	streq	r5, [r6, #1092]	; 0x444
    8548:	add	r3, pc, r3
    854c:	ldr	r6, [r3, #1092]	; 0x444
    8550:	mov	r0, r6
    8554:	add	lr, r6, #9
    8558:	str	r6, [r3, #1096]	; 0x448
    855c:	ldrb	ip, [r0]
    8560:	mov	r3, r0
    8564:	add	r0, r0, #1
    8568:	subs	r2, ip, #36	; 0x24
    856c:	movne	r2, #1
    8570:	cmp	ip, #0
    8574:	moveq	r2, #0
    8578:	cmp	r2, #0
    857c:	bne	88f4 <rb_crypt+0x430>
    8580:	cmp	r1, #0
    8584:	beq	8594 <rb_crypt+0xd0>
    8588:	ldr	r2, [pc, #2800]	; 9080 <rb_crypt+0xbbc>
    858c:	add	r2, pc, r2
    8590:	str	r3, [r2, #1096]	; 0x448
    8594:	sub	r3, r3, r6
    8598:	ldr	sl, [pc, #2788]	; 9084 <rb_crypt+0xbc0>
    859c:	mov	r5, #0
    85a0:	mov	r0, r4
    85a4:	add	r7, sp, #48	; 0x30
    85a8:	ldr	r9, [pc, #2776]	; 9088 <rb_crypt+0xbc4>
    85ac:	str	r3, [sp]
    85b0:	ldr	fp, [pc, #2772]	; 908c <rb_crypt+0xbc8>
    85b4:	ldr	r3, [pc, #2772]	; 9090 <rb_crypt+0xbcc>
    85b8:	str	r5, [sp, #64]	; 0x40
    85bc:	str	r5, [sp, #68]	; 0x44
    85c0:	str	sl, [sp, #56]	; 0x38
    85c4:	str	r9, [sp, #60]	; 0x3c
    85c8:	str	r3, [sp, #48]	; 0x30
    85cc:	str	fp, [sp, #52]	; 0x34
    85d0:	bl	47b8 <strlen@plt>
    85d4:	mov	r2, r0
    85d8:	mov	r1, r4
    85dc:	mov	r0, r7
    85e0:	bl	62f0 <MD5Update>
    85e4:	ldr	r1, [pc, #2728]	; 9094 <rb_crypt+0xbd0>
    85e8:	mov	r2, #3
    85ec:	mov	r0, r7
    85f0:	add	r1, pc, r1
    85f4:	bl	62f0 <MD5Update>
    85f8:	mov	r1, r6
    85fc:	mov	r0, r7
    8600:	ldr	r2, [sp]
    8604:	bl	62f0 <MD5Update>
    8608:	ldr	r3, [pc, #2688]	; 9090 <rb_crypt+0xbcc>
    860c:	mov	r0, r4
    8610:	str	r3, [sp, #136]	; 0x88
    8614:	str	fp, [sp, #140]	; 0x8c
    8618:	str	sl, [sp, #144]	; 0x90
    861c:	str	r9, [sp, #148]	; 0x94
    8620:	str	r5, [sp, #152]	; 0x98
    8624:	str	r5, [sp, #156]	; 0x9c
    8628:	add	r5, sp, #136	; 0x88
    862c:	bl	47b8 <strlen@plt>
    8630:	mov	r2, r0
    8634:	mov	r1, r4
    8638:	mov	r0, r5
    863c:	bl	62f0 <MD5Update>
    8640:	mov	r1, r6
    8644:	mov	r0, r5
    8648:	ldr	r2, [sp]
    864c:	bl	62f0 <MD5Update>
    8650:	mov	r0, r4
    8654:	add	r6, sp, #32
    8658:	bl	47b8 <strlen@plt>
    865c:	mov	r2, r0
    8660:	mov	r1, r4
    8664:	mov	r0, r5
    8668:	bl	62f0 <MD5Update>
    866c:	mov	r1, r5
    8670:	mov	r0, r6
    8674:	bl	6394 <MD5Final>
    8678:	mov	r0, r4
    867c:	bl	47b8 <strlen@plt>
    8680:	ldr	r3, [pc, #2568]	; 9090 <rb_crypt+0xbcc>
    8684:	mov	r8, r0
    8688:	stmib	sp, {r3, sl}
    868c:	str	r9, [sp, #12]
    8690:	cmp	r8, #0
    8694:	bgt	8910 <rb_crypt+0x44c>
    8698:	mov	r2, #0
    869c:	mov	r3, #0
    86a0:	mov	r0, r4
    86a4:	strd	r2, [sp, #32]
    86a8:	strd	r2, [r6, #8]
    86ac:	bl	47b8 <strlen@plt>
    86b0:	mov	r8, r0
    86b4:	cmp	r8, #0
    86b8:	bne	8930 <rb_crypt+0x46c>
    86bc:	ldr	sl, [pc, #2516]	; 9098 <rb_crypt+0xbd4>
    86c0:	mov	r2, #120	; 0x78
    86c4:	ldr	r1, [pc, #2512]	; 909c <rb_crypt+0xbd8>
    86c8:	add	sl, pc, sl
    86cc:	add	r9, sl, #948	; 0x3b4
    86d0:	add	r1, pc, r1
    86d4:	mov	r0, r9
    86d8:	bl	4674 <rb_strlcpy@plt>
    86dc:	mov	r0, r9
    86e0:	ldr	r2, [sp]
    86e4:	ldr	r1, [sl, #1092]	; 0x444
    86e8:	bl	4890 <strncat@plt>
    86ec:	ldr	r1, [pc, #2476]	; 90a0 <rb_crypt+0xbdc>
    86f0:	mov	r0, r9
    86f4:	mov	r2, #120	; 0x78
    86f8:	ldr	r9, [pc, #2468]	; 90a4 <rb_crypt+0xbe0>
    86fc:	add	r1, pc, r1
    8700:	bl	4b60 <rb_strlcat@plt>
    8704:	add	r9, pc, r9
    8708:	mov	r1, r7
    870c:	mov	r0, r6
    8710:	mov	r7, r8
    8714:	bl	6394 <MD5Final>
    8718:	ldr	r3, [sp, #4]
    871c:	ands	sl, r8, #1
    8720:	moveq	r2, #16
    8724:	moveq	r1, r6
    8728:	str	r3, [sp, #136]	; 0x88
    872c:	ldr	r3, [sp, #8]
    8730:	str	fp, [sp, #140]	; 0x8c
    8734:	str	r3, [sp, #144]	; 0x90
    8738:	ldr	r3, [sp, #12]
    873c:	str	r7, [sp, #152]	; 0x98
    8740:	str	r7, [sp, #156]	; 0x9c
    8744:	str	r3, [sp, #148]	; 0x94
    8748:	beq	875c <rb_crypt+0x298>
    874c:	mov	r0, r4
    8750:	bl	47b8 <strlen@plt>
    8754:	mov	r2, r0
    8758:	mov	r1, r4
    875c:	mov	r0, r5
    8760:	bl	62f0 <MD5Update>
    8764:	mov	r3, #3
    8768:	udiv	r3, r8, r3
    876c:	add	r3, r3, r3, lsl #1
    8770:	cmp	r8, r3
    8774:	beq	8788 <rb_crypt+0x2c4>
    8778:	mov	r0, r5
    877c:	ldr	r2, [sp]
    8780:	ldr	r1, [r9, #1092]	; 0x444
    8784:	bl	62f0 <MD5Update>
    8788:	mov	r3, #7
    878c:	udiv	r3, r8, r3
    8790:	rsb	r3, r3, r3, lsl #3
    8794:	cmp	r8, r3
    8798:	beq	87b4 <rb_crypt+0x2f0>
    879c:	mov	r0, r4
    87a0:	bl	47b8 <strlen@plt>
    87a4:	mov	r2, r0
    87a8:	mov	r1, r4
    87ac:	mov	r0, r5
    87b0:	bl	62f0 <MD5Update>
    87b4:	cmp	sl, #0
    87b8:	movne	r2, #16
    87bc:	movne	r1, r6
    87c0:	bne	87d4 <rb_crypt+0x310>
    87c4:	mov	r0, r4
    87c8:	bl	47b8 <strlen@plt>
    87cc:	mov	r2, r0
    87d0:	mov	r1, r4
    87d4:	mov	r0, r5
    87d8:	add	r8, r8, #1
    87dc:	bl	62f0 <MD5Update>
    87e0:	mov	r1, r5
    87e4:	mov	r0, r6
    87e8:	bl	6394 <MD5Final>
    87ec:	cmp	r8, #1000	; 0x3e8
    87f0:	bne	8718 <rb_crypt+0x254>
    87f4:	ldr	r6, [pc, #2220]	; 90a8 <rb_crypt+0xbe4>
    87f8:	add	r6, pc, r6
    87fc:	add	r4, r6, #948	; 0x3b4
    8800:	mov	r0, r4
    8804:	bl	47b8 <strlen@plt>
    8808:	ldrb	r3, [sp, #38]	; 0x26
    880c:	add	r5, r4, r0
    8810:	mov	r2, #4
    8814:	mov	r0, r5
    8818:	ldrb	r1, [sp, #32]
    881c:	lsl	r3, r3, #8
    8820:	orr	r3, r3, r1, lsl #16
    8824:	ldrb	r1, [sp, #44]	; 0x2c
    8828:	orr	r1, r3, r1
    882c:	bl	4f80 <_crypt_to64>
    8830:	ldrb	r3, [sp, #39]	; 0x27
    8834:	mov	r2, #4
    8838:	add	r0, r5, r2
    883c:	ldrb	r1, [sp, #33]	; 0x21
    8840:	lsl	r3, r3, #8
    8844:	orr	r3, r3, r1, lsl #16
    8848:	ldrb	r1, [sp, #45]	; 0x2d
    884c:	orr	r1, r3, r1
    8850:	bl	4f80 <_crypt_to64>
    8854:	ldrb	r3, [sp, #40]	; 0x28
    8858:	mov	r2, #4
    885c:	add	r0, r5, #8
    8860:	ldrb	r1, [sp, #34]	; 0x22
    8864:	lsl	r3, r3, #8
    8868:	orr	r3, r3, r1, lsl #16
    886c:	ldrb	r1, [sp, #46]	; 0x2e
    8870:	orr	r1, r3, r1
    8874:	bl	4f80 <_crypt_to64>
    8878:	ldrb	r3, [sp, #41]	; 0x29
    887c:	mov	r2, #4
    8880:	add	r0, r5, #12
    8884:	ldrb	r1, [sp, #35]	; 0x23
    8888:	lsl	r3, r3, #8
    888c:	orr	r3, r3, r1, lsl #16
    8890:	ldrb	r1, [sp, #47]	; 0x2f
    8894:	orr	r1, r3, r1
    8898:	bl	4f80 <_crypt_to64>
    889c:	ldrb	r3, [sp, #42]	; 0x2a
    88a0:	mov	r2, #4
    88a4:	add	r0, r5, #16
    88a8:	ldrb	r1, [sp, #36]	; 0x24
    88ac:	lsl	r3, r3, #8
    88b0:	orr	r3, r3, r1, lsl #16
    88b4:	ldrb	r1, [sp, #37]	; 0x25
    88b8:	orr	r1, r3, r1
    88bc:	bl	4f80 <_crypt_to64>
    88c0:	add	r0, r5, #20
    88c4:	mov	r2, #2
    88c8:	ldrb	r1, [sp, #43]	; 0x2b
    88cc:	bl	4f80 <_crypt_to64>
    88d0:	add	r3, r5, #22
    88d4:	mov	r0, r4
    88d8:	str	r3, [r6, #1100]	; 0x44c
    88dc:	mov	r3, #0
    88e0:	strb	r3, [r5, #22]
    88e4:	add	sp, sp, #228	; 0xe4
    88e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    88ec:	mov	r1, r2
    88f0:	b	855c <rb_crypt+0x98>
    88f4:	cmp	lr, r0
    88f8:	bne	88ec <rb_crypt+0x428>
    88fc:	cmp	r1, #0
    8900:	beq	8594 <rb_crypt+0xd0>
    8904:	ldr	r2, [pc, #1952]	; 90ac <rb_crypt+0xbe8>
    8908:	add	r2, pc, r2
    890c:	b	8590 <rb_crypt+0xcc>
    8910:	cmp	r8, #16
    8914:	mov	r1, r6
    8918:	movlt	r2, r8
    891c:	movge	r2, #16
    8920:	mov	r0, r7
    8924:	sub	r8, r8, #16
    8928:	bl	62f0 <MD5Update>
    892c:	b	8690 <rb_crypt+0x1cc>
    8930:	tst	r8, #1
    8934:	mov	r2, #1
    8938:	lsr	r8, r8, #1
    893c:	movne	r1, r6
    8940:	moveq	r1, r4
    8944:	mov	r0, r7
    8948:	bl	62f0 <MD5Update>
    894c:	b	86b4 <rb_crypt+0x1f0>
    8950:	mov	r0, r5
    8954:	bl	47b8 <strlen@plt>
    8958:	add	r6, r0, #66	; 0x42
    895c:	mov	r0, r6
    8960:	bl	4980 <malloc@plt>
    8964:	subs	r2, r0, #0
    8968:	bne	8974 <rb_crypt+0x4b0>
    896c:	mov	r0, #0
    8970:	b	88e4 <rb_crypt+0x420>
    8974:	mov	r3, r6
    8978:	mov	r1, r5
    897c:	mov	r0, r4
    8980:	bl	6944 <rb_sha256_crypt_r>
    8984:	b	88e4 <rb_crypt+0x420>
    8988:	ldr	r6, [pc, #1824]	; 90b0 <rb_crypt+0xbec>
    898c:	mov	r0, r5
    8990:	bl	47b8 <strlen@plt>
    8994:	add	r7, r0, #109	; 0x6d
    8998:	add	r6, pc, r6
    899c:	ldr	r3, [r6, #1104]	; 0x450
    89a0:	cmp	r7, r3
    89a4:	ble	89c4 <rb_crypt+0x500>
    89a8:	mov	r1, r7
    89ac:	ldr	r0, [r6, #1108]	; 0x454
    89b0:	bl	4c14 <realloc@plt>
    89b4:	cmp	r0, #0
    89b8:	beq	896c <rb_crypt+0x4a8>
    89bc:	str	r7, [r6, #1104]	; 0x450
    89c0:	str	r0, [r6, #1108]	; 0x454
    89c4:	ldr	r2, [pc, #1768]	; 90b4 <rb_crypt+0xbf0>
    89c8:	mov	r1, r5
    89cc:	mov	r0, r4
    89d0:	add	r2, pc, r2
    89d4:	ldr	r3, [r2, #1104]	; 0x450
    89d8:	ldr	r2, [r2, #1108]	; 0x454
    89dc:	bl	724c <rb_sha512_crypt_r>
    89e0:	b	88e4 <rb_crypt+0x420>
    89e4:	bl	7ee8 <rb_des_init>
    89e8:	add	r2, sp, #136	; 0x88
    89ec:	mov	r1, r2
    89f0:	ldrb	r3, [r4]
    89f4:	lsl	r3, r3, #1
    89f8:	uxtb	r3, r3
    89fc:	cmp	r3, #0
    8a00:	strb	r3, [r2], #1
    8a04:	sub	r3, r2, r1
    8a08:	addne	r4, r4, #1
    8a0c:	cmp	r3, #8
    8a10:	bne	89f0 <rb_crypt+0x52c>
    8a14:	bl	7ee8 <rb_des_init>
    8a18:	ldrd	r2, [sp, #136]	; 0x88
    8a1c:	rev	r2, r2
    8a20:	rev	r3, r3
    8a24:	orrs	r1, r2, r3
    8a28:	beq	8cc4 <rb_crypt+0x800>
    8a2c:	ldr	r1, [pc, #1668]	; 90b8 <rb_crypt+0xbf4>
    8a30:	add	r1, pc, r1
    8a34:	ldr	r0, [r1, #8]
    8a38:	cmp	r2, r0
    8a3c:	bne	8cc4 <rb_crypt+0x800>
    8a40:	ldr	r1, [r1, #4]
    8a44:	cmp	r3, r1
    8a48:	bne	8cc4 <rb_crypt+0x800>
    8a4c:	ldrb	r1, [r5, #1]
    8a50:	mov	r0, r1
    8a54:	bl	7e9c <rb_ascii_to_bin>
    8a58:	ldrb	r4, [r5]
    8a5c:	mov	r2, r0
    8a60:	mov	r0, r4
    8a64:	bl	7e9c <rb_ascii_to_bin>
    8a68:	orr	r0, r0, r2, lsl #6
    8a6c:	ldr	r2, [pc, #1608]	; 90bc <rb_crypt+0xbf8>
    8a70:	cmp	r1, #0
    8a74:	moveq	r1, r4
    8a78:	add	r2, pc, r2
    8a7c:	ldr	r3, [r2, #16]
    8a80:	strb	r4, [r2, #1068]	; 0x42c
    8a84:	strb	r1, [r2, #1069]	; 0x42d
    8a88:	cmp	r0, r3
    8a8c:	bne	8f14 <rb_crypt+0xa50>
    8a90:	ldr	r2, [pc, #1576]	; 90c0 <rb_crypt+0xbfc>
    8a94:	mov	lr, #26
    8a98:	mov	r9, #0
    8a9c:	ldr	r5, [pc, #1568]	; 90c4 <rb_crypt+0xc00>
    8aa0:	ldr	ip, [pc, #1568]	; 90c8 <rb_crypt+0xc04>
    8aa4:	add	r2, pc, r2
    8aa8:	ldr	r3, [r2]
    8aac:	add	r2, r2, #4096	; 0x1000
    8ab0:	add	r5, pc, r5
    8ab4:	ldr	r1, [r2, #-3072]	; 0xfffff400
    8ab8:	add	ip, pc, ip
    8abc:	orr	r3, r3, r1
    8ac0:	ldr	r1, [r2, #-2048]	; 0xfffff800
    8ac4:	orr	r3, r3, r1
    8ac8:	ldr	r1, [r2, #-1024]	; 0xfffffc00
    8acc:	orr	r3, r3, r1
    8ad0:	ldr	r1, [r2]
    8ad4:	orr	r3, r3, r1
    8ad8:	ldr	r1, [r2, #1024]	; 0x400
    8adc:	orr	r3, r3, r1
    8ae0:	ldr	r1, [r2, #2048]	; 0x800
    8ae4:	ldr	r2, [r2, #3072]	; 0xc00
    8ae8:	orr	r3, r3, r1
    8aec:	ldr	r1, [pc, #1496]	; 90cc <rb_crypt+0xc08>
    8af0:	orr	r3, r3, r2
    8af4:	add	r1, pc, r1
    8af8:	ldr	r2, [r1]
    8afc:	add	r1, r1, #4096	; 0x1000
    8b00:	ldr	r0, [r1, #-3072]	; 0xfffff400
    8b04:	orr	r2, r2, r0
    8b08:	ldr	r0, [r1, #-2048]	; 0xfffff800
    8b0c:	orr	r2, r2, r0
    8b10:	ldr	r0, [r1, #-1024]	; 0xfffffc00
    8b14:	orr	r2, r2, r0
    8b18:	ldr	r0, [r1]
    8b1c:	orr	r2, r2, r0
    8b20:	ldr	r0, [r1, #1024]	; 0x400
    8b24:	orr	r2, r2, r0
    8b28:	ldr	r0, [r1, #2048]	; 0x800
    8b2c:	ldr	r1, [r1, #3072]	; 0xc00
    8b30:	orr	r2, r2, r0
    8b34:	ldr	r0, [pc, #1428]	; 90d0 <rb_crypt+0xc0c>
    8b38:	orr	r2, r2, r1
    8b3c:	ldr	r1, [pc, #1424]	; 90d4 <rb_crypt+0xc10>
    8b40:	add	r0, pc, r0
    8b44:	add	r1, pc, r1
    8b48:	ldr	r8, [r1, #12]
    8b4c:	subs	lr, lr, #1
    8b50:	bne	9060 <rb_crypt+0xb9c>
    8b54:	ldr	r0, [pc, #1404]	; 90d8 <rb_crypt+0xc14>
    8b58:	lsr	r1, r3, #24
    8b5c:	ubfx	r7, r3, #16, #8
    8b60:	ubfx	r6, r3, #8, #8
    8b64:	uxtb	r3, r3
    8b68:	add	r3, r3, #768	; 0x300
    8b6c:	lsr	r8, r2, #24
    8b70:	add	r7, r7, #256	; 0x100
    8b74:	ubfx	r5, r2, #16, #8
    8b78:	add	r6, r6, #512	; 0x200
    8b7c:	add	r0, pc, r0
    8b80:	add	r8, r8, #1024	; 0x400
    8b84:	ubfx	r4, r2, #8, #8
    8b88:	ldr	r9, [r0, r3, lsl #2]
    8b8c:	uxtb	r2, r2
    8b90:	add	r5, r5, #1280	; 0x500
    8b94:	add	r2, r2, #1792	; 0x700
    8b98:	add	r4, r4, #1536	; 0x600
    8b9c:	ldr	ip, [r0, r1, lsl #2]
    8ba0:	orr	ip, ip, r9
    8ba4:	ldr	r9, [r0, r8, lsl #2]
    8ba8:	orr	ip, ip, r9
    8bac:	ldr	r9, [r0, r2, lsl #2]
    8bb0:	orr	ip, ip, r9
    8bb4:	ldr	r9, [r0, r7, lsl #2]
    8bb8:	orr	ip, ip, r9
    8bbc:	ldr	r9, [r0, r6, lsl #2]
    8bc0:	orr	ip, ip, r9
    8bc4:	ldr	r9, [r0, r5, lsl #2]
    8bc8:	ldr	r0, [r0, r4, lsl #2]
    8bcc:	orr	ip, ip, r9
    8bd0:	orr	ip, ip, r0
    8bd4:	ldr	r0, [pc, #1280]	; 90dc <rb_crypt+0xc18>
    8bd8:	add	r0, pc, r0
    8bdc:	ldr	r1, [r0, r1, lsl #2]
    8be0:	ldr	r3, [r0, r3, lsl #2]
    8be4:	ldr	r2, [r0, r2, lsl #2]
    8be8:	orr	r3, r1, r3
    8bec:	ldr	r1, [r0, r8, lsl #2]
    8bf0:	orr	r3, r3, r1
    8bf4:	orr	r3, r3, r2
    8bf8:	ldr	r2, [r0, r7, lsl #2]
    8bfc:	orr	r3, r3, r2
    8c00:	ldr	r2, [r0, r6, lsl #2]
    8c04:	orr	r3, r3, r2
    8c08:	ldr	r2, [r0, r5, lsl #2]
    8c0c:	orr	r3, r3, r2
    8c10:	ldr	r2, [r0, r4, lsl #2]
    8c14:	ldr	r0, [pc, #1220]	; 90e0 <rb_crypt+0xc1c>
    8c18:	orr	r3, r3, r2
    8c1c:	ldr	r2, [pc, #1216]	; 90e4 <rb_crypt+0xc20>
    8c20:	add	r0, pc, r0
    8c24:	add	r0, r0, #1056	; 0x420
    8c28:	add	r2, pc, r2
    8c2c:	ldrb	r1, [r2, ip, lsr #26]
    8c30:	strb	r1, [r0, #14]
    8c34:	ubfx	r1, ip, #20, #6
    8c38:	ldrb	r1, [r2, r1]
    8c3c:	strb	r1, [r0, #15]
    8c40:	ubfx	r1, ip, #14, #6
    8c44:	ldrb	r1, [r2, r1]
    8c48:	strb	r1, [r0, #16]
    8c4c:	ubfx	r1, ip, #8, #6
    8c50:	ldrb	r1, [r2, r1]
    8c54:	strb	r1, [r0, #17]
    8c58:	lsr	r1, r3, #16
    8c5c:	lsl	r3, r3, #2
    8c60:	orr	ip, r1, ip, lsl #16
    8c64:	ubfx	r1, ip, #18, #6
    8c68:	ldrb	r1, [r2, r1]
    8c6c:	strb	r1, [r0, #18]
    8c70:	ubfx	r1, ip, #12, #6
    8c74:	ldrb	r1, [r2, r1]
    8c78:	strb	r1, [r0, #19]
    8c7c:	ubfx	r1, ip, #6, #6
    8c80:	and	ip, ip, #63	; 0x3f
    8c84:	ldrb	r1, [r2, r1]
    8c88:	strb	r1, [r0, #20]
    8c8c:	ldrb	r1, [r2, ip]
    8c90:	strb	r1, [r0, #21]
    8c94:	ubfx	r1, r3, #12, #6
    8c98:	ldrb	r1, [r2, r1]
    8c9c:	strb	r1, [r0, #22]
    8ca0:	ubfx	r1, r3, #6, #6
    8ca4:	and	r3, r3, #63	; 0x3f
    8ca8:	ldrb	r3, [r2, r3]
    8cac:	strb	lr, [r0, #25]
    8cb0:	ldrb	r1, [r2, r1]
    8cb4:	strb	r1, [r0, #23]
    8cb8:	strb	r3, [r0, #24]
    8cbc:	add	r0, r0, #12
    8cc0:	b	88e4 <rb_crypt+0x420>
    8cc4:	ldr	ip, [pc, #1052]	; 90e8 <rb_crypt+0xc24>
    8cc8:	lsr	r8, r3, #25
    8ccc:	lsr	r9, r2, #25
    8cd0:	add	r8, r8, #512	; 0x200
    8cd4:	ubfx	r7, r2, #17, #7
    8cd8:	ldr	r1, [pc, #1036]	; 90ec <rb_crypt+0xc28>
    8cdc:	ubfx	r6, r2, #9, #7
    8ce0:	add	r7, r7, #128	; 0x80
    8ce4:	ubfx	r4, r3, #17, #7
    8ce8:	add	ip, pc, ip
    8cec:	add	r6, r6, #256	; 0x100
    8cf0:	ubfx	lr, r3, #9, #7
    8cf4:	ldr	sl, [ip, r8, lsl #2]
    8cf8:	add	r4, r4, #640	; 0x280
    8cfc:	add	r1, pc, r1
    8d00:	add	lr, lr, #768	; 0x300
    8d04:	ldr	r0, [ip, r9, lsl #2]
    8d08:	add	fp, r1, #1168	; 0x490
    8d0c:	str	r3, [r1, #4]
    8d10:	ubfx	r3, r3, #1, #7
    8d14:	add	fp, fp, #8
    8d18:	str	r2, [r1, #8]
    8d1c:	ubfx	r2, r2, #1, #7
    8d20:	add	r3, r3, #896	; 0x380
    8d24:	add	r2, r2, #384	; 0x180
    8d28:	orr	r0, r0, sl
    8d2c:	ldr	sl, [ip, r7, lsl #2]
    8d30:	orr	r0, r0, sl
    8d34:	ldr	sl, [ip, r6, lsl #2]
    8d38:	orr	r0, r0, sl
    8d3c:	ldr	sl, [ip, r2, lsl #2]
    8d40:	orr	r0, r0, sl
    8d44:	ldr	sl, [ip, r4, lsl #2]
    8d48:	orr	r0, r0, sl
    8d4c:	ldr	sl, [ip, lr, lsl #2]
    8d50:	ldr	ip, [ip, r3, lsl #2]
    8d54:	orr	r0, r0, sl
    8d58:	orr	r0, r0, ip
    8d5c:	ldr	ip, [pc, #908]	; 90f0 <rb_crypt+0xc2c>
    8d60:	str	r0, [sp]
    8d64:	add	ip, pc, ip
    8d68:	ldr	r8, [ip, r8, lsl #2]
    8d6c:	ldr	r0, [ip, r9, lsl #2]
    8d70:	ldr	r7, [ip, r7, lsl #2]
    8d74:	ldr	r6, [ip, r6, lsl #2]
    8d78:	orr	r0, r0, r8
    8d7c:	ldr	r2, [ip, r2, lsl #2]
    8d80:	orr	r0, r0, r7
    8d84:	ldr	r3, [ip, r3, lsl #2]
    8d88:	orr	r0, r0, r6
    8d8c:	orr	r2, r0, r2
    8d90:	ldr	r0, [ip, r4, lsl #2]
    8d94:	mov	r4, #0
    8d98:	orr	r2, r2, r0
    8d9c:	ldr	r0, [ip, lr, lsl #2]
    8da0:	mov	lr, #15
    8da4:	ldr	ip, [pc, #840]	; 90f4 <rb_crypt+0xc30>
    8da8:	orr	r2, r2, r0
    8dac:	ldr	r0, [pc, #836]	; 90f8 <rb_crypt+0xc34>
    8db0:	orr	r3, r2, r3
    8db4:	add	ip, pc, ip
    8db8:	str	r3, [sp, #4]
    8dbc:	ldr	r3, [pc, #824]	; 90fc <rb_crypt+0xc38>
    8dc0:	add	r0, pc, r0
    8dc4:	add	r3, pc, r3
    8dc8:	add	r3, r3, #2032	; 0x7f0
    8dcc:	str	r3, [sp, #20]
    8dd0:	add	r3, r1, #884	; 0x374
    8dd4:	str	r3, [sp, #16]
    8dd8:	add	r3, r1, #820	; 0x334
    8ddc:	str	r3, [sp, #12]
    8de0:	add	r3, r1, #1104	; 0x450
    8de4:	add	r3, r3, #8
    8de8:	str	r3, [sp, #28]
    8dec:	ldr	r2, [sp, #20]
    8df0:	ldrb	r3, [r2], #1
    8df4:	add	r4, r4, r3
    8df8:	ldr	r3, [sp]
    8dfc:	str	r2, [sp, #20]
    8e00:	rsb	r2, r4, #28
    8e04:	lsr	r1, r3, r2
    8e08:	orr	r1, r1, r3, lsl r4
    8e0c:	ldr	r3, [sp, #4]
    8e10:	ubfx	sl, r1, #14, #7
    8e14:	ubfx	r9, r1, #7, #7
    8e18:	add	sl, sl, #128	; 0x80
    8e1c:	lsr	r2, r3, r2
    8e20:	add	r9, r9, #256	; 0x100
    8e24:	orr	r2, r2, r3, lsl r4
    8e28:	ubfx	r3, r1, #21, #7
    8e2c:	and	r1, r1, #127	; 0x7f
    8e30:	ubfx	r8, r2, #21, #7
    8e34:	add	r1, r1, #384	; 0x180
    8e38:	ubfx	r7, r2, #14, #7
    8e3c:	ubfx	r6, r2, #7, #7
    8e40:	and	r2, r2, #127	; 0x7f
    8e44:	str	r3, [sp, #8]
    8e48:	add	r3, r2, #896	; 0x380
    8e4c:	ldr	r2, [ip, r1, lsl #2]
    8e50:	add	r8, r8, #512	; 0x200
    8e54:	add	r7, r7, #640	; 0x280
    8e58:	add	r6, r6, #768	; 0x300
    8e5c:	str	r3, [sp, #24]
    8e60:	ldr	r3, [ip, r3, lsl #2]
    8e64:	orr	r3, r2, r3
    8e68:	ldr	r2, [sp, #8]
    8e6c:	ldr	r2, [ip, r2, lsl #2]
    8e70:	orr	r3, r3, r2
    8e74:	ldr	r2, [ip, sl, lsl #2]
    8e78:	orr	r3, r3, r2
    8e7c:	ldr	r2, [ip, r9, lsl #2]
    8e80:	orr	r3, r3, r2
    8e84:	ldr	r2, [ip, r8, lsl #2]
    8e88:	orr	r3, r3, r2
    8e8c:	ldr	r2, [ip, r7, lsl #2]
    8e90:	orr	r3, r3, r2
    8e94:	ldr	r2, [ip, r6, lsl #2]
    8e98:	orr	r3, r3, r2
    8e9c:	ldr	r2, [sp, #16]
    8ea0:	str	r3, [r2], #4
    8ea4:	str	r2, [sp, #16]
    8ea8:	ldr	r2, [sp, #28]
    8eac:	str	r3, [r2, lr, lsl #2]
    8eb0:	ldr	r2, [sp, #24]
    8eb4:	ldr	r3, [r0, r1, lsl #2]
    8eb8:	ldr	r2, [r0, r2, lsl #2]
    8ebc:	orr	r3, r3, r2
    8ec0:	ldr	r2, [sp, #8]
    8ec4:	ldr	r2, [r0, r2, lsl #2]
    8ec8:	orr	r3, r3, r2
    8ecc:	ldr	r2, [r0, sl, lsl #2]
    8ed0:	orr	r3, r3, r2
    8ed4:	ldr	r2, [r0, r9, lsl #2]
    8ed8:	orr	r3, r3, r2
    8edc:	ldr	r2, [r0, r8, lsl #2]
    8ee0:	orr	r3, r3, r2
    8ee4:	ldr	r2, [r0, r7, lsl #2]
    8ee8:	orr	r2, r3, r2
    8eec:	ldr	r3, [r0, r6, lsl #2]
    8ef0:	orr	r2, r2, r3
    8ef4:	ldr	r3, [sp, #12]
    8ef8:	str	r2, [r3], #4
    8efc:	str	r2, [fp, lr, lsl #2]
    8f00:	sub	lr, lr, #1
    8f04:	cmn	lr, #1
    8f08:	str	r3, [sp, #12]
    8f0c:	bne	8dec <rb_crypt+0x928>
    8f10:	b	8a4c <rb_crypt+0x588>
    8f14:	mov	r3, #0
    8f18:	mov	r1, #24
    8f1c:	mov	ip, #8388608	; 0x800000
    8f20:	mov	lr, #1
    8f24:	str	r3, [r2, #12]
    8f28:	str	r0, [r2, #16]
    8f2c:	mov	r2, r3
    8f30:	tst	lr, r0
    8f34:	lsl	lr, lr, #1
    8f38:	orrne	r2, r2, ip
    8f3c:	movne	r3, #1
    8f40:	lsr	ip, ip, #1
    8f44:	subs	r1, r1, #1
    8f48:	bne	8f30 <rb_crypt+0xa6c>
    8f4c:	cmp	r3, #0
    8f50:	ldrne	r3, [pc, #424]	; 9100 <rb_crypt+0xc3c>
    8f54:	addne	r3, pc, r3
    8f58:	strne	r2, [r3, #12]
    8f5c:	b	8a90 <rb_crypt+0x5cc>
    8f60:	lsl	r9, r1, #23
    8f64:	ldr	fp, [r6], #4
    8f68:	lsr	r2, r1, #9
    8f6c:	and	r9, r9, #8388608	; 0x800000
    8f70:	lsl	sl, r1, #5
    8f74:	and	r2, r2, #8126464	; 0x7c0000
    8f78:	orr	r9, r9, r2
    8f7c:	lsr	r2, r1, #11
    8f80:	and	sl, sl, #258048	; 0x3f000
    8f84:	and	r2, r2, #258048	; 0x3f000
    8f88:	orr	r9, r9, r2
    8f8c:	lsr	r2, r1, #13
    8f90:	and	r2, r2, #4032	; 0xfc0
    8f94:	orr	r9, r9, r2
    8f98:	ubfx	r2, r1, #15, #6
    8f9c:	orr	r9, r9, r2
    8fa0:	lsl	r2, r1, #7
    8fa4:	and	r2, r2, #16515072	; 0xfc0000
    8fa8:	orr	r2, r2, sl
    8fac:	lsl	sl, r1, #3
    8fb0:	orr	r2, r2, r1, lsr #31
    8fb4:	and	sl, sl, #4032	; 0xfc0
    8fb8:	orr	r2, r2, sl
    8fbc:	lsl	sl, r1, #1
    8fc0:	and	sl, sl, #62	; 0x3e
    8fc4:	orr	r2, r2, sl
    8fc8:	eor	sl, r9, r2
    8fcc:	eor	r9, r9, fp
    8fd0:	ldr	fp, [r7], #4
    8fd4:	and	sl, sl, r8
    8fd8:	eor	r9, r9, sl
    8fdc:	eor	r2, r2, fp
    8fe0:	eor	r2, r2, sl
    8fe4:	ldrb	sl, [ip, r9, lsr #12]
    8fe8:	ubfx	r9, r9, #0, #12
    8fec:	add	r9, ip, r9
    8ff0:	add	r9, r9, #4096	; 0x1000
    8ff4:	ldrb	fp, [r9]
    8ff8:	ldr	sl, [r0, sl, lsl #2]
    8ffc:	add	fp, fp, #256	; 0x100
    9000:	ldr	r9, [r0, fp, lsl #2]
    9004:	orr	r9, sl, r9
    9008:	add	sl, ip, r2, lsr #12
    900c:	ubfx	r2, r2, #0, #12
    9010:	add	sl, sl, #8192	; 0x2000
    9014:	add	r2, ip, r2
    9018:	ldrb	sl, [sl]
    901c:	add	r2, r2, #12288	; 0x3000
    9020:	ldrb	r2, [r2]
    9024:	add	sl, sl, #512	; 0x200
    9028:	ldr	sl, [r0, sl, lsl #2]
    902c:	add	r2, r2, #768	; 0x300
    9030:	ldr	r2, [r0, r2, lsl #2]
    9034:	orr	r9, r9, sl
    9038:	orr	r9, r9, r2
    903c:	eor	r9, r9, r3
    9040:	mov	r3, r1
    9044:	mov	r1, r9
    9048:	sub	r4, r4, #1
    904c:	mov	r2, r3
    9050:	cmn	r4, #1
    9054:	bne	8f60 <rb_crypt+0xa9c>
    9058:	mov	r3, r9
    905c:	b	8b4c <rb_crypt+0x688>
    9060:	mov	r1, r2
    9064:	mov	r4, #16
    9068:	add	r7, r5, #820	; 0x334
    906c:	add	r6, r5, #884	; 0x374
    9070:	b	9048 <rb_crypt+0xb84>
    9074:	.word	0x0001dfa8
    9078:	.word	0x0000ae1f
    907c:	.word	0x0001df84
    9080:	.word	0x0001df40
    9084:	.word	0x98badcfe
    9088:	.word	0x10325476
    908c:	.word	0xefcdab89
    9090:	.word	0x67452301
    9094:	.word	0x0000ad57
    9098:	.word	0x0001de04
    909c:	.word	0x0000ac77
    90a0:	.word	0x0000ac4d
    90a4:	.word	0x0001ddc8
    90a8:	.word	0x0001dcd4
    90ac:	.word	0x0001dbc4
    90b0:	.word	0x0001db34
    90b4:	.word	0x0001dafc
    90b8:	.word	0x0001da9c
    90bc:	.word	0x0001da54
    90c0:	.word	0x0002cf00
    90c4:	.word	0x0001da1c
    90c8:	.word	0x0001eeec
    90cc:	.word	0x0002aeb0
    90d0:	.word	0x0001de64
    90d4:	.word	0x0001d988
    90d8:	.word	0x00028e28
    90dc:	.word	0x00026dcc
    90e0:	.word	0x0001d8ac
    90e4:	.word	0x00009f18
    90e8:	.word	0x00025cbc
    90ec:	.word	0x0001d7d0
    90f0:	.word	0x00024c40
    90f4:	.word	0x00023bf0
    90f8:	.word	0x00022be4
    90fc:	.word	0x00009d7c
    9100:	.word	0x0001d578

00009104 <rb_malloc>:
    9104:	push	{r4, lr}
    9108:	mov	r1, r0
    910c:	mov	r0, #1
    9110:	bl	45c0 <calloc@plt>
    9114:	cmp	r0, #0
    9118:	popne	{r4, pc}
    911c:	bl	495c <rb_outofmemory@plt>

00009120 <rb_free>:
    9120:	cmp	r0, #0
    9124:	bxeq	lr
    9128:	b	46c8 <free@plt>

0000912c <rb_init_bh>:
    912c:	push	{r4, lr}
    9130:	mov	r0, #12
    9134:	bl	9104 <rb_malloc>
    9138:	ldr	r3, [pc, #8]	; 9148 <rb_init_bh+0x1c>
    913c:	add	r3, pc, r3
    9140:	str	r0, [r3]
    9144:	pop	{r4, pc}
    9148:	.word	0x0002e868

0000914c <rb_bh_create>:
    914c:	cmp	r0, #0
    9150:	cmpne	r1, #0
    9154:	push	{r4, r5, r6, r7, r8, lr}
    9158:	bgt	9180 <rb_bh_create+0x34>
    915c:	ldr	r2, [pc, #224]	; 9244 <rb_bh_create+0xf8>
    9160:	mov	r3, #147	; 0x93
    9164:	ldr	r1, [pc, #220]	; 9248 <rb_bh_create+0xfc>
    9168:	ldr	r0, [pc, #220]	; 924c <rb_bh_create+0x100>
    916c:	add	r2, pc, r2
    9170:	add	r1, pc, r1
    9174:	add	r0, pc, r0
    9178:	bl	48f0 <rb_lib_log@plt>
    917c:	bl	4398 <abort@plt>
    9180:	cmp	r0, #11
    9184:	mov	r6, r0
    9188:	bhi	91ac <rb_bh_create+0x60>
    918c:	ldr	r2, [pc, #188]	; 9250 <rb_bh_create+0x104>
    9190:	mov	r3, #151	; 0x97
    9194:	ldr	r1, [pc, #184]	; 9254 <rb_bh_create+0x108>
    9198:	ldr	r0, [pc, #184]	; 9258 <rb_bh_create+0x10c>
    919c:	add	r2, pc, r2
    91a0:	add	r1, pc, r1
    91a4:	add	r0, pc, r0
    91a8:	b	9178 <rb_bh_create+0x2c>
    91ac:	mov	r5, r2
    91b0:	mov	r7, r1
    91b4:	mov	r0, #48	; 0x30
    91b8:	bl	9104 <rb_malloc>
    91bc:	cmp	r5, #0
    91c0:	mov	r4, r0
    91c4:	strd	r6, [r0, #12]
    91c8:	beq	91f4 <rb_bh_create+0xa8>
    91cc:	mov	r0, r5
    91d0:	bl	47b8 <strlen@plt>
    91d4:	add	r0, r0, #1
    91d8:	bl	4980 <malloc@plt>
    91dc:	subs	r6, r0, #0
    91e0:	bne	91e8 <rb_bh_create+0x9c>
    91e4:	bl	495c <rb_outofmemory@plt>
    91e8:	mov	r1, r5
    91ec:	bl	4860 <strcpy@plt>
    91f0:	str	r6, [r4, #44]	; 0x2c
    91f4:	ldr	r3, [pc, #96]	; 925c <rb_bh_create+0x110>
    91f8:	mov	r2, #0
    91fc:	str	r4, [r4]
    9200:	str	r2, [r4, #4]
    9204:	add	r3, pc, r3
    9208:	ldr	r3, [r3]
    920c:	ldr	r2, [r3]
    9210:	cmp	r2, #0
    9214:	str	r2, [r4, #8]
    9218:	strne	r4, [r2, #4]
    921c:	bne	922c <rb_bh_create+0xe0>
    9220:	ldr	r2, [r3, #4]
    9224:	cmp	r2, #0
    9228:	streq	r4, [r3, #4]
    922c:	ldr	r2, [r3, #8]
    9230:	mov	r0, r4
    9234:	str	r4, [r3]
    9238:	add	r2, r2, #1
    923c:	str	r2, [r3, #8]
    9240:	pop	{r4, r5, r6, r7, r8, pc}
    9244:	.word	0x0000a1df
    9248:	.word	0x0000a1e4
    924c:	.word	0x0000a209
    9250:	.word	0x0000a1af
    9254:	.word	0x0000a203
    9258:	.word	0x0000a1d9
    925c:	.word	0x0002e7a0

00009260 <rb_bh_alloc>:
    9260:	cmp	r0, #0
    9264:	bne	9290 <rb_bh_alloc+0x30>
    9268:	ldr	r2, [pc, #40]	; 9298 <rb_bh_alloc+0x38>
    926c:	mov	r3, #186	; 0xba
    9270:	push	{r4, lr}
    9274:	ldr	r1, [pc, #32]	; 929c <rb_bh_alloc+0x3c>
    9278:	add	r2, pc, r2
    927c:	ldr	r0, [pc, #28]	; 92a0 <rb_bh_alloc+0x40>
    9280:	add	r1, pc, r1
    9284:	add	r0, pc, r0
    9288:	bl	48f0 <rb_lib_log@plt>
    928c:	bl	4398 <abort@plt>
    9290:	ldr	r0, [r0, #12]
    9294:	b	9104 <rb_malloc>
    9298:	.word	0x0000a0d3
    929c:	.word	0x0000a15e
    92a0:	.word	0x0000a0f9

000092a4 <rb_bh_free>:
    92a4:	cmp	r0, #0
    92a8:	push	{r4, lr}
    92ac:	bne	92c4 <rb_bh_free+0x20>
    92b0:	ldr	r0, [pc, #44]	; 92e4 <rb_bh_free+0x40>
    92b4:	add	r0, pc, r0
    92b8:	bl	48f0 <rb_lib_log@plt>
    92bc:	mov	r0, #1
    92c0:	pop	{r4, pc}
    92c4:	cmp	r1, #0
    92c8:	ldreq	r0, [pc, #24]	; 92e8 <rb_bh_free+0x44>
    92cc:	addeq	r0, pc, r0
    92d0:	beq	92b8 <rb_bh_free+0x14>
    92d4:	mov	r0, r1
    92d8:	bl	9120 <rb_free>
    92dc:	mov	r0, #0
    92e0:	pop	{r4, pc}
    92e4:	.word	0x0000a148
    92e8:	.word	0x0000a150

000092ec <rb_bh_destroy>:
    92ec:	push	{r4, r5, r6, lr}
    92f0:	subs	r4, r0, #0
    92f4:	beq	9354 <rb_bh_destroy+0x68>
    92f8:	mov	r5, #0
    92fc:	ldr	r3, [pc, #88]	; 935c <rb_bh_destroy+0x70>
    9300:	ldmib	r4, {r1, r2}
    9304:	ldr	r0, [r4, #44]	; 0x2c
    9308:	add	r3, pc, r3
    930c:	ldr	r3, [r3]
    9310:	cmp	r2, #0
    9314:	strne	r1, [r2, #4]
    9318:	streq	r1, [r3, #4]
    931c:	ldr	r1, [r4, #4]
    9320:	cmp	r1, #0
    9324:	strne	r2, [r1, #8]
    9328:	streq	r2, [r3]
    932c:	ldr	r2, [r3, #8]
    9330:	str	r5, [r4, #4]
    9334:	str	r5, [r4, #8]
    9338:	sub	r2, r2, #1
    933c:	str	r2, [r3, #8]
    9340:	bl	9120 <rb_free>
    9344:	mov	r0, r4
    9348:	bl	9120 <rb_free>
    934c:	mov	r0, r5
    9350:	pop	{r4, r5, r6, pc}
    9354:	mov	r0, #1
    9358:	pop	{r4, r5, r6, pc}
    935c:	.word	0x0002e69c

00009360 <rb_bh_usage>:
    9360:	cmp	r1, #0
    9364:	ldr	r0, [sp]
    9368:	movne	ip, #0
    936c:	strne	ip, [r1]
    9370:	cmp	r2, #0
    9374:	movne	r1, #0
    9378:	strne	r1, [r2]
    937c:	cmp	r3, #0
    9380:	movne	r2, #0
    9384:	strne	r2, [r3]
    9388:	cmp	r0, #0
    938c:	ldrne	r3, [pc, #8]	; 939c <rb_bh_usage+0x3c>
    9390:	addne	r3, pc, r3
    9394:	strne	r3, [r0]
    9398:	bx	lr
    939c:	.word	0x0000a0ab

000093a0 <rb_bh_usage_all>:
    93a0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    93a4:	subs	r7, r0, #0
    93a8:	beq	93d0 <rb_bh_usage_all+0x30>
    93ac:	mov	r6, r1
    93b0:	ldr	r3, [pc, #96]	; 9418 <rb_bh_usage_all+0x78>
    93b4:	ldr	r5, [pc, #96]	; 941c <rb_bh_usage_all+0x7c>
    93b8:	add	r3, pc, r3
    93bc:	ldr	r3, [r3]
    93c0:	add	r5, pc, r5
    93c4:	ldr	r4, [r3]
    93c8:	cmp	r4, #0
    93cc:	bne	93d8 <rb_bh_usage_all+0x38>
    93d0:	add	sp, sp, #12
    93d4:	pop	{r4, r5, r6, r7, pc}
    93d8:	ldr	ip, [r4]
    93dc:	ldr	r3, [ip, #16]
    93e0:	ldr	r2, [ip, #28]
    93e4:	ldr	r1, [ip, #40]	; 0x28
    93e8:	mul	r3, r3, r2
    93ec:	ldr	r2, [ip, #12]
    93f0:	ldr	ip, [ip, #44]	; 0x2c
    93f4:	sub	r0, r3, r1
    93f8:	mul	r3, r2, r3
    93fc:	mul	r2, r0, r2
    9400:	cmp	ip, #0
    9404:	movne	r5, ip
    9408:	stm	sp, {r5, r6}
    940c:	blx	r7
    9410:	ldr	r4, [r4, #8]
    9414:	b	93c8 <rb_bh_usage_all+0x28>
    9418:	.word	0x0002e5ec
    941c:	.word	0x0000a088

00009420 <rb_bh_total_usage>:
    9420:	ldr	r3, [pc, #92]	; 9484 <rb_bh_total_usage+0x64>
    9424:	push	{r4, r5, lr}
    9428:	add	r3, pc, r3
    942c:	ldr	r3, [r3]
    9430:	ldr	r2, [r3]
    9434:	mov	r3, #0
    9438:	mov	r4, r3
    943c:	cmp	r2, #0
    9440:	bne	9458 <rb_bh_total_usage+0x38>
    9444:	cmp	r0, #0
    9448:	strne	r4, [r0]
    944c:	cmp	r1, #0
    9450:	strne	r3, [r1]
    9454:	pop	{r4, r5, pc}
    9458:	ldr	lr, [r2]
    945c:	ldr	r2, [r2, #8]
    9460:	ldr	ip, [lr, #16]
    9464:	ldr	r5, [lr, #28]
    9468:	mul	ip, ip, r5
    946c:	ldr	r5, [lr, #12]
    9470:	ldr	lr, [lr, #40]	; 0x28
    9474:	mla	r4, r5, ip, r4
    9478:	sub	lr, ip, lr
    947c:	mla	r3, r5, lr, r3
    9480:	b	943c <rb_bh_total_usage+0x1c>
    9484:	.word	0x0002e57c

00009488 <rb_dlinkDelete>:
    9488:	ldrd	r2, [r0, #4]
    948c:	cmp	r3, #0
    9490:	strne	r2, [r3, #4]
    9494:	streq	r2, [r1, #4]
    9498:	ldr	r2, [r0, #4]
    949c:	cmp	r2, #0
    94a0:	strne	r3, [r2, #8]
    94a4:	streq	r3, [r1]
    94a8:	mov	r3, #0
    94ac:	str	r3, [r0, #4]
    94b0:	str	r3, [r0, #8]
    94b4:	ldr	r3, [r1, #8]
    94b8:	sub	r3, r3, #1
    94bc:	str	r3, [r1, #8]
    94c0:	bx	lr

000094c4 <rb_find_fd>:
    94c4:	ldr	r1, [pc, #96]	; 952c <rb_find_fd+0x68>
    94c8:	subs	r2, r0, #0
    94cc:	add	r1, pc, r1
    94d0:	blt	951c <rb_find_fd+0x58>
    94d4:	ldr	r0, [pc, #84]	; 9530 <rb_find_fd+0x6c>
    94d8:	asr	r3, r2, #24
    94dc:	eor	r3, r3, r2, asr #12
    94e0:	eor	r3, r3, r2
    94e4:	ldr	r1, [r1, r0]
    94e8:	ubfx	r3, r3, #0, #12
    94ec:	ldr	r0, [r1]
    94f0:	mov	r1, #12
    94f4:	mul	r3, r1, r3
    94f8:	ldr	r0, [r0, r3]
    94fc:	cmp	r0, #0
    9500:	bxeq	lr
    9504:	ldr	r3, [r0]
    9508:	ldr	r1, [r3, #12]
    950c:	cmp	r1, r2
    9510:	beq	9524 <rb_find_fd+0x60>
    9514:	ldr	r0, [r0, #8]
    9518:	b	94fc <rb_find_fd+0x38>
    951c:	mov	r0, #0
    9520:	bx	lr
    9524:	mov	r0, r3
    9528:	bx	lr
    952c:	.word	0x0001bb2c
    9530:	.word	0x000003bc

00009534 <inetntoa>:
    9534:	ldr	r3, [pc, #224]	; 961c <inetntoa+0xe8>
    9538:	ldrb	r2, [r0]
    953c:	ldr	r1, [pc, #220]	; 9620 <inetntoa+0xec>
    9540:	add	r3, pc, r3
    9544:	ldr	r2, [r3, r2, lsl #2]
    9548:	add	r1, pc, r1
    954c:	sub	r2, r2, #1
    9550:	ldrb	ip, [r2, #1]!
    9554:	add	r3, r1, #1
    9558:	cmp	ip, #0
    955c:	bne	95f0 <inetntoa+0xbc>
    9560:	mov	r2, #46	; 0x2e
    9564:	strb	r2, [r1]
    9568:	ldr	r2, [pc, #180]	; 9624 <inetntoa+0xf0>
    956c:	ldrb	r1, [r0, #1]
    9570:	add	r2, pc, r2
    9574:	ldr	r1, [r2, r1, lsl #2]
    9578:	sub	r1, r1, #1
    957c:	ldrb	ip, [r1, #1]!
    9580:	add	r2, r3, #1
    9584:	cmp	ip, #0
    9588:	bne	95fc <inetntoa+0xc8>
    958c:	mov	r1, #46	; 0x2e
    9590:	strb	r1, [r3]
    9594:	ldr	r3, [pc, #140]	; 9628 <inetntoa+0xf4>
    9598:	ldrb	r1, [r0, #2]
    959c:	add	r3, pc, r3
    95a0:	ldr	r1, [r3, r1, lsl #2]
    95a4:	sub	r1, r1, #1
    95a8:	ldrb	ip, [r1, #1]!
    95ac:	add	r3, r2, #1
    95b0:	cmp	ip, #0
    95b4:	bne	9608 <inetntoa+0xd4>
    95b8:	mov	r1, #46	; 0x2e
    95bc:	strb	r1, [r2]
    95c0:	ldr	r2, [pc, #100]	; 962c <inetntoa+0xf8>
    95c4:	ldrb	r1, [r0, #3]
    95c8:	add	r2, pc, r2
    95cc:	ldr	r2, [r2, r1, lsl #2]
    95d0:	sub	r2, r2, #1
    95d4:	ldrb	r1, [r2, #1]!
    95d8:	cmp	r1, #0
    95dc:	bne	9614 <inetntoa+0xe0>
    95e0:	ldr	r0, [pc, #72]	; 9630 <inetntoa+0xfc>
    95e4:	strb	r1, [r3]
    95e8:	add	r0, pc, r0
    95ec:	bx	lr
    95f0:	mov	r1, r3
    95f4:	strb	ip, [r3, #-1]
    95f8:	b	9550 <inetntoa+0x1c>
    95fc:	mov	r3, r2
    9600:	strb	ip, [r2, #-1]
    9604:	b	957c <inetntoa+0x48>
    9608:	mov	r2, r3
    960c:	strb	ip, [r3, #-1]
    9610:	b	95a8 <inetntoa+0x74>
    9614:	strb	r1, [r3], #1
    9618:	b	95d4 <inetntoa+0xa0>
    961c:	.word	0x0001b4fc
    9620:	.word	0x0002e460
    9624:	.word	0x0001b4cc
    9628:	.word	0x0001b4a0
    962c:	.word	0x0001b474
    9630:	.word	0x0002e3c0

00009634 <inet_pton4>:
    9634:	mov	r2, #0
    9638:	push	{r0, r1, r4, r5, r6, lr}
    963c:	mov	r6, #10
    9640:	add	ip, sp, #4
    9644:	mov	r3, r2
    9648:	strb	r2, [sp, #4]
    964c:	ldrb	r4, [r0], #1
    9650:	cmp	r4, #0
    9654:	bne	9670 <inet_pton4+0x3c>
    9658:	cmp	r2, #3
    965c:	ble	968c <inet_pton4+0x58>
    9660:	ldr	r3, [sp, #4]
    9664:	mov	r0, #1
    9668:	str	r3, [r1]
    966c:	b	9690 <inet_pton4+0x5c>
    9670:	sub	r5, r4, #48	; 0x30
    9674:	cmp	r5, #9
    9678:	bhi	96b8 <inet_pton4+0x84>
    967c:	ldrb	lr, [ip]
    9680:	smlabb	lr, r6, lr, r5
    9684:	cmp	lr, #255	; 0xff
    9688:	bls	9698 <inet_pton4+0x64>
    968c:	mov	r0, #0
    9690:	add	sp, sp, #8
    9694:	pop	{r4, r5, r6, pc}
    9698:	cmp	r3, #0
    969c:	strb	lr, [ip]
    96a0:	bne	964c <inet_pton4+0x18>
    96a4:	add	r2, r2, #1
    96a8:	cmp	r2, #4
    96ac:	bgt	968c <inet_pton4+0x58>
    96b0:	mov	r3, #1
    96b4:	b	964c <inet_pton4+0x18>
    96b8:	cmp	r4, #46	; 0x2e
    96bc:	movne	r3, #0
    96c0:	andeq	r3, r3, #1
    96c4:	eor	r3, r3, #1
    96c8:	cmp	r2, #4
    96cc:	orreq	r3, r3, #1
    96d0:	cmp	r3, #0
    96d4:	bne	968c <inet_pton4+0x58>
    96d8:	add	ip, ip, #1
    96dc:	strb	r3, [ip]
    96e0:	b	964c <inet_pton4+0x18>

000096e4 <rb_unsupported_event>:
    96e4:	mov	r0, #0
    96e8:	bx	lr

000096ec <rb_free>:
    96ec:	cmp	r0, #0
    96f0:	bxeq	lr
    96f4:	b	46c8 <free@plt>

000096f8 <rb_checktimeouts>:
    96f8:	ldr	r3, [pc, #144]	; 9790 <rb_checktimeouts+0x98>
    96fc:	add	r3, pc, r3
    9700:	ldr	r3, [r3, #16]
    9704:	cmp	r3, #0
    9708:	bxeq	lr
    970c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9710:	mov	r8, #0
    9714:	ldr	r7, [pc, #120]	; 9794 <rb_checktimeouts+0x9c>
    9718:	ldr	r5, [r3, #8]
    971c:	add	r7, pc, r7
    9720:	add	r7, r7, #16
    9724:	ldr	r4, [r3]
    9728:	ldr	r6, [r4]
    972c:	cmp	r6, #0
    9730:	beq	977c <rb_checktimeouts+0x84>
    9734:	ldrb	r3, [r6, #16]
    9738:	tst	r3, #1
    973c:	beq	977c <rb_checktimeouts+0x84>
    9740:	ldr	r9, [r4, #16]
    9744:	bl	47c4 <rb_current_time@plt>
    9748:	cmp	r9, r0
    974c:	bge	977c <rb_checktimeouts+0x84>
    9750:	mov	r1, r7
    9754:	add	r0, r4, #4
    9758:	ldr	r9, [r4, #20]
    975c:	ldr	sl, [r4, #24]
    9760:	bl	9488 <rb_dlinkDelete>
    9764:	mov	r0, r4
    9768:	str	r8, [r6, #44]	; 0x2c
    976c:	bl	96ec <rb_free>
    9770:	mov	r0, r6
    9774:	mov	r1, sl
    9778:	blx	r9
    977c:	cmp	r5, #0
    9780:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    9784:	mov	r3, r5
    9788:	ldr	r5, [r5, #8]
    978c:	b	9724 <rb_checktimeouts+0x2c>
    9790:	.word	0x0002e2ac
    9794:	.word	0x0002e28c

00009798 <rb_malloc>:
    9798:	push	{r4, lr}
    979c:	mov	r1, r0
    97a0:	mov	r0, #1
    97a4:	bl	45c0 <calloc@plt>
    97a8:	cmp	r0, #0
    97ac:	popne	{r4, pc}
    97b0:	bl	495c <rb_outofmemory@plt>

000097b4 <inet_pton6>:
    97b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97b8:	sub	sp, sp, #36	; 0x24
    97bc:	mov	r3, #0
    97c0:	mov	r2, #0
    97c4:	add	sl, sp, #16
    97c8:	mov	r5, r0
    97cc:	add	r6, sp, #32
    97d0:	str	r1, [sp, #4]
    97d4:	strd	r2, [sp, #16]
    97d8:	strd	r2, [sl, #8]
    97dc:	ldrb	r3, [r0]
    97e0:	cmp	r3, #58	; 0x3a
    97e4:	bne	9804 <inet_pton6+0x50>
    97e8:	ldrb	r3, [r0, #1]
    97ec:	cmp	r3, #58	; 0x3a
    97f0:	addeq	r5, r0, #1
    97f4:	beq	9804 <inet_pton6+0x50>
    97f8:	mov	r0, #0
    97fc:	add	sp, sp, #36	; 0x24
    9800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9804:	bl	4800 <__ctype_tolower_loc@plt>
    9808:	ldr	r2, [pc, #412]	; 99ac <inet_pton6+0x1f8>
    980c:	mov	r4, #0
    9810:	mov	r7, sl
    9814:	mov	fp, r4
    9818:	mov	r9, r4
    981c:	ldr	r3, [r0]
    9820:	add	r2, pc, r2
    9824:	str	r3, [sp]
    9828:	mov	r3, r5
    982c:	ldrb	r1, [r5], #1
    9830:	ldr	r0, [sp]
    9834:	ldr	r8, [r0, r1, lsl #2]
    9838:	cmp	r8, #0
    983c:	bne	9860 <inet_pton6+0xac>
    9840:	cmp	fp, #0
    9844:	beq	9988 <inet_pton6+0x1d4>
    9848:	add	r5, r7, #2
    984c:	cmp	r6, r5
    9850:	bcc	97f8 <inet_pton6+0x44>
    9854:	rev16	r4, r4
    9858:	strh	r4, [r7]
    985c:	b	992c <inet_pton6+0x178>
    9860:	mov	r0, r2
    9864:	mov	r1, r8
    9868:	strd	r2, [sp, #8]
    986c:	bl	4584 <strchr@plt>
    9870:	cmp	r0, #0
    9874:	ldrd	r2, [sp, #8]
    9878:	beq	9894 <inet_pton6+0xe0>
    987c:	sub	r0, r0, r2
    9880:	orr	r4, r0, r4, lsl #4
    9884:	cmp	r4, #65536	; 0x10000
    9888:	bcs	97f8 <inet_pton6+0x44>
    988c:	mov	fp, #1
    9890:	b	982c <inet_pton6+0x78>
    9894:	cmp	r8, #58	; 0x3a
    9898:	bne	98ec <inet_pton6+0x138>
    989c:	cmp	fp, #0
    98a0:	bne	98b8 <inet_pton6+0x104>
    98a4:	cmp	r9, #0
    98a8:	bne	97f8 <inet_pton6+0x44>
    98ac:	mov	r3, r5
    98b0:	mov	r9, r7
    98b4:	b	982c <inet_pton6+0x78>
    98b8:	ldrb	r3, [r5]
    98bc:	cmp	r3, #0
    98c0:	beq	97f8 <inet_pton6+0x44>
    98c4:	add	r1, r7, #2
    98c8:	cmp	r6, r1
    98cc:	bcc	97f8 <inet_pton6+0x44>
    98d0:	rev16	r4, r4
    98d4:	mov	r3, r5
    98d8:	mov	fp, r0
    98dc:	strh	r4, [r7]
    98e0:	mov	r7, r1
    98e4:	mov	r4, r0
    98e8:	b	982c <inet_pton6+0x78>
    98ec:	ldrb	r1, [r5]
    98f0:	sub	r8, r8, #46	; 0x2e
    98f4:	clz	r8, r8
    98f8:	lsr	r8, r8, #5
    98fc:	cmp	r1, #0
    9900:	moveq	r8, #0
    9904:	cmp	r8, #0
    9908:	beq	982c <inet_pton6+0x78>
    990c:	add	r5, r7, #4
    9910:	cmp	r5, r6
    9914:	bhi	97f8 <inet_pton6+0x44>
    9918:	mov	r1, r7
    991c:	mov	r0, r3
    9920:	bl	9634 <inet_pton4>
    9924:	cmp	r0, #0
    9928:	ble	97f8 <inet_pton6+0x44>
    992c:	cmp	r9, #0
    9930:	beq	99a0 <inet_pton6+0x1ec>
    9934:	cmp	r5, r6
    9938:	sub	r9, r5, r9
    993c:	addne	sl, sl, #17
    9940:	movne	r2, #0
    9944:	beq	97f8 <inet_pton6+0x44>
    9948:	sub	r3, sl, r6
    994c:	cmp	r9, r3
    9950:	bge	9990 <inet_pton6+0x1dc>
    9954:	ldr	r2, [sp, #4]
    9958:	add	ip, sp, #16
    995c:	add	lr, sp, #32
    9960:	mov	r3, ip
    9964:	add	r2, r2, #8
    9968:	ldm	r3!, {r0, r1}
    996c:	cmp	r3, lr
    9970:	mov	ip, r3
    9974:	str	r0, [r2, #-8]
    9978:	str	r1, [r2, #-4]
    997c:	bne	9960 <inet_pton6+0x1ac>
    9980:	mov	r0, #1
    9984:	b	97fc <inet_pton6+0x48>
    9988:	mov	r5, r7
    998c:	b	992c <inet_pton6+0x178>
    9990:	ldrb	r3, [r5, #-1]!
    9994:	strb	r3, [r6, #-1]!
    9998:	strb	r2, [r5]
    999c:	b	9948 <inet_pton6+0x194>
    99a0:	cmp	r5, r6
    99a4:	bne	97f8 <inet_pton6+0x44>
    99a8:	b	9954 <inet_pton6+0x1a0>
    99ac:	.word	0x00009c37

000099b0 <try_kqueue>:
    99b0:	push	{r4, r5, r6, lr}
    99b4:	ldr	r4, [pc, #136]	; 9a44 <try_kqueue+0x94>
    99b8:	bl	1067c <rb_init_netio_kqueue>
    99bc:	subs	r5, r0, #0
    99c0:	mvnne	r5, #0
    99c4:	add	r4, pc, r4
    99c8:	bne	9a3c <try_kqueue+0x8c>
    99cc:	ldr	r3, [pc, #116]	; 9a48 <try_kqueue+0x98>
    99d0:	mov	r2, #25
    99d4:	ldr	r0, [pc, #112]	; 9a4c <try_kqueue+0x9c>
    99d8:	ldr	r1, [pc, #112]	; 9a50 <try_kqueue+0xa0>
    99dc:	ldr	r3, [r4, r3]
    99e0:	add	r0, pc, r0
    99e4:	add	r0, r0, #56	; 0x38
    99e8:	add	r1, pc, r1
    99ec:	str	r3, [r0, #-28]	; 0xffffffe4
    99f0:	ldr	r3, [pc, #92]	; 9a54 <try_kqueue+0xa4>
    99f4:	ldr	r3, [r4, r3]
    99f8:	str	r3, [r0, #-24]	; 0xffffffe8
    99fc:	ldr	r3, [pc, #84]	; 9a58 <try_kqueue+0xa8>
    9a00:	ldr	r3, [r4, r3]
    9a04:	str	r3, [r0, #-20]	; 0xffffffec
    9a08:	ldr	r3, [pc, #76]	; 9a5c <try_kqueue+0xac>
    9a0c:	ldr	r3, [r4, r3]
    9a10:	str	r3, [r0, #-16]
    9a14:	ldr	r3, [pc, #68]	; 9a60 <try_kqueue+0xb0>
    9a18:	ldr	r3, [r4, r3]
    9a1c:	str	r3, [r0, #-12]
    9a20:	ldr	r3, [pc, #60]	; 9a64 <try_kqueue+0xb4>
    9a24:	ldr	r3, [r4, r3]
    9a28:	str	r3, [r0, #-8]
    9a2c:	ldr	r3, [pc, #52]	; 9a68 <try_kqueue+0xb8>
    9a30:	ldr	r3, [r4, r3]
    9a34:	str	r3, [r0, #-4]
    9a38:	bl	4674 <rb_strlcpy@plt>
    9a3c:	mov	r0, r5
    9a40:	pop	{r4, r5, r6, pc}
    9a44:	.word	0x0001b634
    9a48:	.word	0x000003b8
    9a4c:	.word	0x0002dfc8
    9a50:	.word	0x00009a85
    9a54:	.word	0x00000374
    9a58:	.word	0x00000394
    9a5c:	.word	0x0000038c
    9a60:	.word	0x000003d0
    9a64:	.word	0x00000390
    9a68:	.word	0x000003e0

00009a6c <try_epoll>:
    9a6c:	push	{r4, r5, r6, lr}
    9a70:	ldr	r4, [pc, #136]	; 9b00 <try_epoll+0x94>
    9a74:	bl	edd0 <rb_init_netio_epoll>
    9a78:	subs	r5, r0, #0
    9a7c:	mvnne	r5, #0
    9a80:	add	r4, pc, r4
    9a84:	bne	9af8 <try_epoll+0x8c>
    9a88:	ldr	r3, [pc, #116]	; 9b04 <try_epoll+0x98>
    9a8c:	mov	r2, #25
    9a90:	ldr	r0, [pc, #112]	; 9b08 <try_epoll+0x9c>
    9a94:	ldr	r1, [pc, #112]	; 9b0c <try_epoll+0xa0>
    9a98:	ldr	r3, [r4, r3]
    9a9c:	add	r0, pc, r0
    9aa0:	add	r0, r0, #56	; 0x38
    9aa4:	add	r1, pc, r1
    9aa8:	str	r3, [r0, #-28]	; 0xffffffe4
    9aac:	ldr	r3, [pc, #92]	; 9b10 <try_epoll+0xa4>
    9ab0:	ldr	r3, [r4, r3]
    9ab4:	str	r3, [r0, #-24]	; 0xffffffe8
    9ab8:	ldr	r3, [pc, #84]	; 9b14 <try_epoll+0xa8>
    9abc:	ldr	r3, [r4, r3]
    9ac0:	str	r3, [r0, #-20]	; 0xffffffec
    9ac4:	ldr	r3, [pc, #76]	; 9b18 <try_epoll+0xac>
    9ac8:	ldr	r3, [r4, r3]
    9acc:	str	r3, [r0, #-16]
    9ad0:	ldr	r3, [pc, #68]	; 9b1c <try_epoll+0xb0>
    9ad4:	ldr	r3, [r4, r3]
    9ad8:	str	r3, [r0, #-12]
    9adc:	ldr	r3, [pc, #60]	; 9b20 <try_epoll+0xb4>
    9ae0:	ldr	r3, [r4, r3]
    9ae4:	str	r3, [r0, #-4]
    9ae8:	ldr	r3, [pc, #52]	; 9b24 <try_epoll+0xb8>
    9aec:	ldr	r3, [r4, r3]
    9af0:	str	r3, [r0, #-8]
    9af4:	bl	4674 <rb_strlcpy@plt>
    9af8:	mov	r0, r5
    9afc:	pop	{r4, r5, r6, pc}
    9b00:	.word	0x0001b578
    9b04:	.word	0x00000364
    9b08:	.word	0x0002df0c
    9b0c:	.word	0x000099d0
    9b10:	.word	0x000003c4
    9b14:	.word	0x00000400
    9b18:	.word	0x00000380
    9b1c:	.word	0x000003c0
    9b20:	.word	0x00000354
    9b24:	.word	0x00000414

00009b28 <try_ports>:
    9b28:	push	{r4, r5, r6, lr}
    9b2c:	ldr	r4, [pc, #136]	; 9bbc <try_ports+0x94>
    9b30:	bl	f9b0 <rb_init_netio_ports>
    9b34:	subs	r5, r0, #0
    9b38:	mvnne	r5, #0
    9b3c:	add	r4, pc, r4
    9b40:	bne	9bb4 <try_ports+0x8c>
    9b44:	ldr	r3, [pc, #116]	; 9bc0 <try_ports+0x98>
    9b48:	mov	r2, #25
    9b4c:	ldr	r0, [pc, #112]	; 9bc4 <try_ports+0x9c>
    9b50:	ldr	r1, [pc, #112]	; 9bc8 <try_ports+0xa0>
    9b54:	ldr	r3, [r4, r3]
    9b58:	add	r0, pc, r0
    9b5c:	add	r0, r0, #56	; 0x38
    9b60:	add	r1, pc, r1
    9b64:	str	r3, [r0, #-28]	; 0xffffffe4
    9b68:	ldr	r3, [pc, #92]	; 9bcc <try_ports+0xa4>
    9b6c:	ldr	r3, [r4, r3]
    9b70:	str	r3, [r0, #-24]	; 0xffffffe8
    9b74:	ldr	r3, [pc, #84]	; 9bd0 <try_ports+0xa8>
    9b78:	ldr	r3, [r4, r3]
    9b7c:	str	r3, [r0, #-20]	; 0xffffffec
    9b80:	ldr	r3, [pc, #76]	; 9bd4 <try_ports+0xac>
    9b84:	ldr	r3, [r4, r3]
    9b88:	str	r3, [r0, #-16]
    9b8c:	ldr	r3, [pc, #68]	; 9bd8 <try_ports+0xb0>
    9b90:	ldr	r3, [r4, r3]
    9b94:	str	r3, [r0, #-12]
    9b98:	ldr	r3, [pc, #60]	; 9bdc <try_ports+0xb4>
    9b9c:	ldr	r3, [r4, r3]
    9ba0:	str	r3, [r0, #-8]
    9ba4:	ldr	r3, [pc, #52]	; 9be0 <try_ports+0xb8>
    9ba8:	ldr	r3, [r4, r3]
    9bac:	str	r3, [r0, #-4]
    9bb0:	bl	4674 <rb_strlcpy@plt>
    9bb4:	mov	r0, r5
    9bb8:	pop	{r4, r5, r6, pc}
    9bbc:	.word	0x0001b4bc
    9bc0:	.word	0x000003e4
    9bc4:	.word	0x0002de50
    9bc8:	.word	0x0000991a
    9bcc:	.word	0x00000384
    9bd0:	.word	0x0000040c
    9bd4:	.word	0x00000350
    9bd8:	.word	0x00000408
    9bdc:	.word	0x00000360
    9be0:	.word	0x000003dc

00009be4 <try_devpoll>:
    9be4:	push	{r4, r5, r6, lr}
    9be8:	ldr	r5, [pc, #112]	; 9c60 <try_devpoll+0x7c>
    9bec:	bl	ecc4 <rb_init_netio_devpoll>
    9bf0:	subs	r4, r0, #0
    9bf4:	mvnne	r4, #0
    9bf8:	add	r5, pc, r5
    9bfc:	bne	9c58 <try_devpoll+0x74>
    9c00:	ldr	r3, [pc, #92]	; 9c64 <try_devpoll+0x80>
    9c04:	mov	r2, #25
    9c08:	ldr	r0, [pc, #88]	; 9c68 <try_devpoll+0x84>
    9c0c:	ldr	r1, [pc, #88]	; 9c6c <try_devpoll+0x88>
    9c10:	ldr	r3, [r5, r3]
    9c14:	add	r0, pc, r0
    9c18:	add	r0, r0, #56	; 0x38
    9c1c:	add	r1, pc, r1
    9c20:	str	r3, [r0, #-28]	; 0xffffffe4
    9c24:	ldr	r3, [pc, #68]	; 9c70 <try_devpoll+0x8c>
    9c28:	ldr	r3, [r5, r3]
    9c2c:	str	r3, [r0, #-24]	; 0xffffffe8
    9c30:	ldr	r3, [pc, #60]	; 9c74 <try_devpoll+0x90>
    9c34:	ldr	r3, [r5, r3]
    9c38:	str	r3, [r0, #-20]	; 0xffffffec
    9c3c:	ldr	r3, [pc, #52]	; 9c78 <try_devpoll+0x94>
    9c40:	str	r4, [r0, #-16]
    9c44:	str	r4, [r0, #-12]
    9c48:	str	r4, [r0, #-8]
    9c4c:	add	r3, pc, r3
    9c50:	str	r3, [r0, #-4]
    9c54:	bl	4674 <rb_strlcpy@plt>
    9c58:	mov	r0, r4
    9c5c:	pop	{r4, r5, r6, pc}
    9c60:	.word	0x0001b400
    9c64:	.word	0x000003ac
    9c68:	.word	0x0002dd94
    9c6c:	.word	0x00009864
    9c70:	.word	0x000003ec
    9c74:	.word	0x000003b0
    9c78:	.word	0xfffffa90

00009c7c <try_sigio>:
    9c7c:	push	{r4, r5, r6, lr}
    9c80:	ldr	r4, [pc, #136]	; 9d10 <try_sigio+0x94>
    9c84:	bl	fa6c <rb_init_netio_sigio>
    9c88:	subs	r5, r0, #0
    9c8c:	mvnne	r5, #0
    9c90:	add	r4, pc, r4
    9c94:	bne	9d08 <try_sigio+0x8c>
    9c98:	ldr	r3, [pc, #116]	; 9d14 <try_sigio+0x98>
    9c9c:	mov	r2, #25
    9ca0:	ldr	r0, [pc, #112]	; 9d18 <try_sigio+0x9c>
    9ca4:	ldr	r1, [pc, #112]	; 9d1c <try_sigio+0xa0>
    9ca8:	ldr	r3, [r4, r3]
    9cac:	add	r0, pc, r0
    9cb0:	add	r0, r0, #56	; 0x38
    9cb4:	add	r1, pc, r1
    9cb8:	str	r3, [r0, #-28]	; 0xffffffe4
    9cbc:	ldr	r3, [pc, #92]	; 9d20 <try_sigio+0xa4>
    9cc0:	ldr	r3, [r4, r3]
    9cc4:	str	r3, [r0, #-24]	; 0xffffffe8
    9cc8:	ldr	r3, [pc, #84]	; 9d24 <try_sigio+0xa8>
    9ccc:	ldr	r3, [r4, r3]
    9cd0:	str	r3, [r0, #-20]	; 0xffffffec
    9cd4:	ldr	r3, [pc, #76]	; 9d28 <try_sigio+0xac>
    9cd8:	ldr	r3, [r4, r3]
    9cdc:	str	r3, [r0, #-16]
    9ce0:	ldr	r3, [pc, #68]	; 9d2c <try_sigio+0xb0>
    9ce4:	ldr	r3, [r4, r3]
    9ce8:	str	r3, [r0, #-12]
    9cec:	ldr	r3, [pc, #60]	; 9d30 <try_sigio+0xb4>
    9cf0:	ldr	r3, [r4, r3]
    9cf4:	str	r3, [r0, #-4]
    9cf8:	ldr	r3, [pc, #52]	; 9d34 <try_sigio+0xb8>
    9cfc:	ldr	r3, [r4, r3]
    9d00:	str	r3, [r0, #-8]
    9d04:	bl	4674 <rb_strlcpy@plt>
    9d08:	mov	r0, r5
    9d0c:	pop	{r4, r5, r6, pc}
    9d10:	.word	0x0001b368
    9d14:	.word	0x000003c8
    9d18:	.word	0x0002dcfc
    9d1c:	.word	0x000097d4
    9d20:	.word	0x00000368
    9d24:	.word	0x000003d8
    9d28:	.word	0x00000370
    9d2c:	.word	0x00000358
    9d30:	.word	0x000003d4
    9d34:	.word	0x000003f4

00009d38 <try_poll>:
    9d38:	push	{r4, r5, r6, lr}
    9d3c:	ldr	r5, [pc, #112]	; 9db4 <try_poll+0x7c>
    9d40:	bl	f608 <rb_init_netio_poll>
    9d44:	subs	r4, r0, #0
    9d48:	mvnne	r4, #0
    9d4c:	add	r5, pc, r5
    9d50:	bne	9dac <try_poll+0x74>
    9d54:	ldr	r3, [pc, #92]	; 9db8 <try_poll+0x80>
    9d58:	mov	r2, #25
    9d5c:	ldr	r0, [pc, #88]	; 9dbc <try_poll+0x84>
    9d60:	ldr	r1, [pc, #88]	; 9dc0 <try_poll+0x88>
    9d64:	ldr	r3, [r5, r3]
    9d68:	add	r0, pc, r0
    9d6c:	add	r0, r0, #56	; 0x38
    9d70:	add	r1, pc, r1
    9d74:	str	r3, [r0, #-28]	; 0xffffffe4
    9d78:	ldr	r3, [pc, #68]	; 9dc4 <try_poll+0x8c>
    9d7c:	ldr	r3, [r5, r3]
    9d80:	str	r3, [r0, #-24]	; 0xffffffe8
    9d84:	ldr	r3, [pc, #60]	; 9dc8 <try_poll+0x90>
    9d88:	ldr	r3, [r5, r3]
    9d8c:	str	r3, [r0, #-20]	; 0xffffffec
    9d90:	ldr	r3, [pc, #52]	; 9dcc <try_poll+0x94>
    9d94:	str	r4, [r0, #-16]
    9d98:	str	r4, [r0, #-12]
    9d9c:	str	r4, [r0, #-8]
    9da0:	add	r3, pc, r3
    9da4:	str	r3, [r0, #-4]
    9da8:	bl	4674 <rb_strlcpy@plt>
    9dac:	mov	r0, r4
    9db0:	pop	{r4, r5, r6, pc}
    9db4:	.word	0x0001b2ac
    9db8:	.word	0x000003e8
    9dbc:	.word	0x0002dc40
    9dc0:	.word	0x00009705
    9dc4:	.word	0x000003f8
    9dc8:	.word	0x0000037c
    9dcc:	.word	0xfffff93c

00009dd0 <try_win32>:
    9dd0:	push	{r4, r5, r6, lr}
    9dd4:	ldr	r5, [pc, #112]	; 9e4c <try_win32+0x7c>
    9dd8:	bl	4f20 <rb_init_netio_win32>
    9ddc:	subs	r4, r0, #0
    9de0:	mvnne	r4, #0
    9de4:	add	r5, pc, r5
    9de8:	bne	9e44 <try_win32+0x74>
    9dec:	ldr	r3, [pc, #92]	; 9e50 <try_win32+0x80>
    9df0:	mov	r2, #25
    9df4:	ldr	r0, [pc, #88]	; 9e54 <try_win32+0x84>
    9df8:	ldr	r1, [pc, #88]	; 9e58 <try_win32+0x88>
    9dfc:	ldr	r3, [r5, r3]
    9e00:	add	r0, pc, r0
    9e04:	add	r0, r0, #56	; 0x38
    9e08:	add	r1, pc, r1
    9e0c:	str	r3, [r0, #-28]	; 0xffffffe4
    9e10:	ldr	r3, [pc, #68]	; 9e5c <try_win32+0x8c>
    9e14:	ldr	r3, [r5, r3]
    9e18:	str	r3, [r0, #-24]	; 0xffffffe8
    9e1c:	ldr	r3, [pc, #60]	; 9e60 <try_win32+0x90>
    9e20:	ldr	r3, [r5, r3]
    9e24:	str	r3, [r0, #-20]	; 0xffffffec
    9e28:	ldr	r3, [pc, #52]	; 9e64 <try_win32+0x94>
    9e2c:	str	r4, [r0, #-16]
    9e30:	str	r4, [r0, #-12]
    9e34:	str	r4, [r0, #-8]
    9e38:	add	r3, pc, r3
    9e3c:	str	r3, [r0, #-4]
    9e40:	bl	4674 <rb_strlcpy@plt>
    9e44:	mov	r0, r4
    9e48:	pop	{r4, r5, r6, pc}
    9e4c:	.word	0x0001b214
    9e50:	.word	0x00000398
    9e54:	.word	0x0002dba8
    9e58:	.word	0x00009686
    9e5c:	.word	0x000003a4
    9e60:	.word	0x0000036c
    9e64:	.word	0xfffff8a4

00009e68 <try_select>:
    9e68:	push	{r4, r5, r6, lr}
    9e6c:	ldr	r5, [pc, #112]	; 9ee4 <try_select+0x7c>
    9e70:	bl	103b4 <rb_init_netio_select>
    9e74:	subs	r4, r0, #0
    9e78:	mvnne	r4, #0
    9e7c:	add	r5, pc, r5
    9e80:	bne	9edc <try_select+0x74>
    9e84:	ldr	r3, [pc, #92]	; 9ee8 <try_select+0x80>
    9e88:	mov	r2, #25
    9e8c:	ldr	r0, [pc, #88]	; 9eec <try_select+0x84>
    9e90:	ldr	r1, [pc, #88]	; 9ef0 <try_select+0x88>
    9e94:	ldr	r3, [r5, r3]
    9e98:	add	r0, pc, r0
    9e9c:	add	r0, r0, #56	; 0x38
    9ea0:	add	r1, pc, r1
    9ea4:	str	r3, [r0, #-28]	; 0xffffffe4
    9ea8:	ldr	r3, [pc, #68]	; 9ef4 <try_select+0x8c>
    9eac:	ldr	r3, [r5, r3]
    9eb0:	str	r3, [r0, #-24]	; 0xffffffe8
    9eb4:	ldr	r3, [pc, #60]	; 9ef8 <try_select+0x90>
    9eb8:	ldr	r3, [r5, r3]
    9ebc:	str	r3, [r0, #-20]	; 0xffffffec
    9ec0:	ldr	r3, [pc, #52]	; 9efc <try_select+0x94>
    9ec4:	str	r4, [r0, #-16]
    9ec8:	str	r4, [r0, #-12]
    9ecc:	str	r4, [r0, #-8]
    9ed0:	add	r3, pc, r3
    9ed4:	str	r3, [r0, #-4]
    9ed8:	bl	4674 <rb_strlcpy@plt>
    9edc:	mov	r0, r4
    9ee0:	pop	{r4, r5, r6, pc}
    9ee4:	.word	0x0001b17c
    9ee8:	.word	0x0000041c
    9eec:	.word	0x0002db10
    9ef0:	.word	0x000095f4
    9ef4:	.word	0x000003b4
    9ef8:	.word	0x000003fc
    9efc:	.word	0xfffff80c

00009f00 <rb_getmaxconnect>:
    9f00:	ldr	r3, [pc, #16]	; 9f18 <rb_getmaxconnect+0x18>
    9f04:	ldr	r2, [pc, #16]	; 9f1c <rb_getmaxconnect+0x1c>
    9f08:	add	r3, pc, r3
    9f0c:	ldr	r3, [r3, r2]
    9f10:	ldr	r0, [r3]
    9f14:	bx	lr
    9f18:	.word	0x0001b0f0
    9f1c:	.word	0x0000039c

00009f20 <rb_set_buffers>:
    9f20:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    9f24:	subs	r4, r0, #0
    9f28:	str	r1, [sp, #12]
    9f2c:	bne	9f3c <rb_set_buffers+0x1c>
    9f30:	mov	r0, #0
    9f34:	add	sp, sp, #16
    9f38:	pop	{r4, r5, r6, pc}
    9f3c:	mov	r6, #4
    9f40:	add	r5, sp, #12
    9f44:	mov	r3, r5
    9f48:	mov	r2, #8
    9f4c:	mov	r1, #1
    9f50:	str	r6, [sp]
    9f54:	ldr	r0, [r4, #12]
    9f58:	bl	4c74 <setsockopt@plt>
    9f5c:	cmp	r0, #0
    9f60:	bne	9f30 <rb_set_buffers+0x10>
    9f64:	mov	r3, r5
    9f68:	mov	r2, #7
    9f6c:	str	r6, [sp]
    9f70:	mov	r1, #1
    9f74:	ldr	r0, [r4, #12]
    9f78:	bl	4c74 <setsockopt@plt>
    9f7c:	clz	r0, r0
    9f80:	lsr	r0, r0, #5
    9f84:	b	9f34 <rb_set_buffers+0x14>

00009f88 <rb_settimeout>:
    9f88:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    9f8c:	subs	r5, r0, #0
    9f90:	ldr	r8, [pc, #280]	; a0b0 <rb_settimeout+0x128>
    9f94:	add	r8, pc, r8
    9f98:	beq	9ff4 <rb_settimeout+0x6c>
    9f9c:	cmp	r2, #0
    9fa0:	mov	r9, r3
    9fa4:	ldr	r4, [r5, #44]	; 0x2c
    9fa8:	mov	r6, r2
    9fac:	mov	r7, r1
    9fb0:	bne	9ffc <rb_settimeout+0x74>
    9fb4:	cmp	r4, #0
    9fb8:	beq	9ff4 <rb_settimeout+0x6c>
    9fbc:	ldr	r7, [pc, #240]	; a0b4 <rb_settimeout+0x12c>
    9fc0:	add	r0, r4, #4
    9fc4:	add	r7, pc, r7
    9fc8:	add	r1, r7, #16
    9fcc:	bl	9488 <rb_dlinkDelete>
    9fd0:	mov	r0, r4
    9fd4:	bl	96ec <rb_free>
    9fd8:	ldr	r4, [r7, #24]
    9fdc:	str	r6, [r5, #44]	; 0x2c
    9fe0:	cmp	r4, #0
    9fe4:	bne	9ff4 <rb_settimeout+0x6c>
    9fe8:	ldr	r0, [r7, #84]	; 0x54
    9fec:	bl	4470 <rb_event_delete@plt>
    9ff0:	str	r4, [r7, #84]	; 0x54
    9ff4:	add	sp, sp, #12
    9ff8:	pop	{r4, r5, r6, r7, r8, r9, pc}
    9ffc:	cmp	r4, #0
    a000:	bne	a014 <rb_settimeout+0x8c>
    a004:	mov	r0, #28
    a008:	bl	9798 <rb_malloc>
    a00c:	mov	r4, r0
    a010:	str	r0, [r5, #44]	; 0x2c
    a014:	str	r5, [r4]
    a018:	bl	47c4 <rb_current_time@plt>
    a01c:	mov	r2, #0
    a020:	add	r0, r0, r7
    a024:	str	r4, [r4, #4]
    a028:	add	r3, r4, #4
    a02c:	str	r2, [r4, #8]
    a030:	ldr	r2, [pc, #128]	; a0b8 <rb_settimeout+0x130>
    a034:	str	r0, [r4, #16]
    a038:	str	r6, [r4, #20]
    a03c:	str	r9, [r4, #24]
    a040:	add	r2, pc, r2
    a044:	ldr	r1, [r2, #16]
    a048:	cmp	r1, #0
    a04c:	str	r1, [r4, #12]
    a050:	strne	r3, [r1, #4]
    a054:	bne	a064 <rb_settimeout+0xdc>
    a058:	ldr	r1, [r2, #20]
    a05c:	cmp	r1, #0
    a060:	streq	r3, [r2, #20]
    a064:	ldr	r4, [pc, #80]	; a0bc <rb_settimeout+0x134>
    a068:	add	r4, pc, r4
    a06c:	ldr	r2, [r4, #84]	; 0x54
    a070:	str	r3, [r4, #16]
    a074:	ldr	r3, [r4, #24]
    a078:	cmp	r2, #0
    a07c:	add	r3, r3, #1
    a080:	str	r3, [r4, #24]
    a084:	bne	9ff4 <rb_settimeout+0x6c>
    a088:	ldr	r3, [pc, #48]	; a0c0 <rb_settimeout+0x138>
    a08c:	ldr	r0, [pc, #48]	; a0c4 <rb_settimeout+0x13c>
    a090:	ldr	r3, [r8, r3]
    a094:	add	r0, pc, r0
    a098:	str	r3, [sp, #4]
    a09c:	mov	r3, #5
    a0a0:	ldr	r1, [sp, #4]
    a0a4:	bl	4adc <rb_event_add@plt>
    a0a8:	str	r0, [r4, #84]	; 0x54
    a0ac:	b	9ff4 <rb_settimeout+0x6c>
    a0b0:	.word	0x0001b064
    a0b4:	.word	0x0002d9e4
    a0b8:	.word	0x0002d968
    a0bc:	.word	0x0002d940
    a0c0:	.word	0x0000034c
    a0c4:	.word	0x00009407

0000a0c8 <rb_sctp_bindx>:
    a0c8:	mvn	r0, #0
    a0cc:	bx	lr

0000a0d0 <rb_inet_get_proto>:
    a0d0:	mov	r0, #6
    a0d4:	bx	lr

0000a0d8 <rb_connect_callback>:
    a0d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a0dc:	subs	r4, r0, #0
    a0e0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    a0e4:	ldr	r5, [r4, #48]	; 0x30
    a0e8:	cmp	r5, #0
    a0ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    a0f0:	ldr	r8, [r5, #260]	; 0x104
    a0f4:	cmp	r8, #0
    a0f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    a0fc:	mov	r6, r1
    a100:	bl	4cbc <__errno_location@plt>
    a104:	mov	r7, r0
    a108:	ldr	r9, [r5, #264]	; 0x108
    a10c:	mov	r3, #0
    a110:	mov	r2, r3
    a114:	mov	r1, r3
    a118:	ldr	sl, [r7]
    a11c:	mov	r0, r4
    a120:	str	r3, [r5, #260]	; 0x104
    a124:	bl	43bc <rb_settimeout@plt>
    a128:	mov	r2, r9
    a12c:	mov	r1, r6
    a130:	mov	r0, r4
    a134:	mov	r3, r8
    a138:	str	sl, [r7]
    a13c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    a140:	bx	r3

0000a144 <rb_connect_outcome>:
    a144:	push	{r4, r5, lr}
    a148:	mov	r3, #0
    a14c:	sub	sp, sp, #20
    a150:	mov	r2, #4
    a154:	subs	r4, r0, #0
    a158:	str	r3, [sp, #8]
    a15c:	str	r2, [sp, #12]
    a160:	beq	a1c0 <rb_connect_outcome+0x7c>
    a164:	ldr	r3, [r4, #48]	; 0x30
    a168:	cmp	r3, #0
    a16c:	beq	a1c0 <rb_connect_outcome+0x7c>
    a170:	ldr	r3, [r3, #260]	; 0x104
    a174:	cmp	r3, #0
    a178:	beq	a1c0 <rb_connect_outcome+0x7c>
    a17c:	add	r3, sp, #12
    a180:	mov	r1, #1
    a184:	str	r3, [sp]
    a188:	add	r3, sp, #8
    a18c:	ldr	r0, [r4, #12]
    a190:	bl	4c50 <getsockopt@plt>
    a194:	cmp	r0, #0
    a198:	blt	a1b4 <rb_connect_outcome+0x70>
    a19c:	ldr	r5, [sp, #8]
    a1a0:	cmp	r5, #0
    a1a4:	moveq	r1, r5
    a1a8:	beq	a1b8 <rb_connect_outcome+0x74>
    a1ac:	bl	4cbc <__errno_location@plt>
    a1b0:	str	r5, [r0]
    a1b4:	mov	r1, #4
    a1b8:	mov	r0, r4
    a1bc:	bl	a0d8 <rb_connect_callback>
    a1c0:	add	sp, sp, #20
    a1c4:	pop	{r4, r5, pc}

0000a1c8 <rb_connect_timeout>:
    a1c8:	mov	r1, #3
    a1cc:	b	a0d8 <rb_connect_callback>

0000a1d0 <rb_connect_sctp>:
    a1d0:	mov	r1, #4
    a1d4:	b	a0d8 <rb_connect_callback>

0000a1d8 <rb_connect_sockaddr>:
    a1d8:	cmp	r0, #0
    a1dc:	bxeq	lr
    a1e0:	mov	r3, r0
    a1e4:	mov	r0, r1
    a1e8:	push	{r4, lr}
    a1ec:	ldr	r1, [r3, #48]	; 0x30
    a1f0:	add	r1, r1, #128	; 0x80
    a1f4:	bl	47dc <memcpy@plt>
    a1f8:	mov	r0, #1
    a1fc:	pop	{r4, pc}

0000a200 <rb_errstr>:
    a200:	cmp	r0, #6
    a204:	bhi	a21c <rb_errstr+0x1c>
    a208:	ldr	r3, [pc, #24]	; a228 <rb_errstr+0x28>
    a20c:	add	r3, pc, r3
    a210:	add	r3, r3, r0, lsl #2
    a214:	ldr	r0, [r3, #1024]	; 0x400
    a218:	bx	lr
    a21c:	ldr	r0, [pc, #8]	; a22c <rb_errstr+0x2c>
    a220:	add	r0, pc, r0
    a224:	bx	lr
    a228:	.word	0x0001a830
    a22c:	.word	0x0000928c

0000a230 <rb_listen>:
    a230:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    a234:	mov	r4, r0
    a238:	mov	r6, r2
    a23c:	ldrb	r3, [r0, #17]
    a240:	str	r1, [sp, #12]
    a244:	bic	r3, r3, #127	; 0x7f
    a248:	orr	r3, r3, #20
    a24c:	strb	r3, [r0, #17]
    a250:	ldr	r0, [r0, #12]
    a254:	bl	45b4 <listen@plt>
    a258:	mov	r5, r0
    a25c:	clz	r0, r0
    a260:	lsr	r0, r0, #5
    a264:	cmp	r6, #0
    a268:	moveq	r0, #0
    a26c:	cmp	r0, #0
    a270:	beq	a290 <rb_listen+0x60>
    a274:	mov	r3, #4
    a278:	mov	r2, #9
    a27c:	ldr	r0, [r4, #12]
    a280:	mov	r1, #6
    a284:	str	r3, [sp]
    a288:	add	r3, sp, #12
    a28c:	bl	4c74 <setsockopt@plt>
    a290:	mov	r0, r5
    a294:	add	sp, sp, #16
    a298:	pop	{r4, r5, r6, pc}

0000a29c <rb_fdlist_init>:
    a29c:	push	{r4, r5, r6, lr}
    a2a0:	mov	r6, r2
    a2a4:	ldr	r2, [pc, #128]	; a32c <rb_fdlist_init+0x90>
    a2a8:	ldr	r3, [pc, #128]	; a330 <rb_fdlist_init+0x94>
    a2ac:	add	r2, pc, r2
    a2b0:	ldr	r2, [r2, #88]	; 0x58
    a2b4:	add	r3, pc, r3
    a2b8:	cmp	r2, #0
    a2bc:	bne	a2e4 <rb_fdlist_init+0x48>
    a2c0:	ldr	r2, [pc, #108]	; a334 <rb_fdlist_init+0x98>
    a2c4:	cmp	r0, #0
    a2c8:	ldr	r5, [r3, r2]
    a2cc:	str	r1, [r5]
    a2d0:	bne	a324 <rb_fdlist_init+0x88>
    a2d4:	ldr	r3, [pc, #92]	; a338 <rb_fdlist_init+0x9c>
    a2d8:	mov	r2, #1
    a2dc:	add	r3, pc, r3
    a2e0:	str	r2, [r3, #88]	; 0x58
    a2e4:	ldr	r2, [pc, #80]	; a33c <rb_fdlist_init+0xa0>
    a2e8:	mov	r1, r6
    a2ec:	mov	r0, #68	; 0x44
    a2f0:	add	r2, pc, r2
    a2f4:	bl	4a88 <rb_bh_create@plt>
    a2f8:	ldr	r3, [pc, #64]	; a340 <rb_fdlist_init+0xa4>
    a2fc:	add	r3, pc, r3
    a300:	str	r0, [r3, #92]	; 0x5c
    a304:	pop	{r4, r5, r6, pc}
    a308:	mov	r0, r4
    a30c:	add	r4, r4, #1
    a310:	bl	4914 <close@plt>
    a314:	ldr	r3, [r5]
    a318:	cmp	r4, r3
    a31c:	blt	a308 <rb_fdlist_init+0x6c>
    a320:	b	a2d4 <rb_fdlist_init+0x38>
    a324:	mov	r4, #3
    a328:	b	a314 <rb_fdlist_init+0x78>
    a32c:	.word	0x0002d6fc
    a330:	.word	0x0001ad44
    a334:	.word	0x0000039c
    a338:	.word	0x0002d6cc
    a33c:	.word	0x000091d2
    a340:	.word	0x0002d6ac

0000a344 <rb_open>:
    a344:	push	{r4, r5, r6, r7, r8, lr}
    a348:	mov	r5, r0
    a34c:	mov	r7, r1
    a350:	mov	r6, r2
    a354:	ldr	r8, [pc, #276]	; a470 <rb_open+0x12c>
    a358:	bl	94c4 <rb_find_fd>
    a35c:	subs	r4, r0, #0
    a360:	add	r8, pc, r8
    a364:	bne	a3e4 <rb_open+0xa0>
    a368:	ldr	r3, [pc, #260]	; a474 <rb_open+0x130>
    a36c:	add	r3, pc, r3
    a370:	ldr	r0, [r3, #92]	; 0x5c
    a374:	bl	492c <rb_bh_alloc@plt>
    a378:	ldr	r3, [pc, #248]	; a478 <rb_open+0x134>
    a37c:	mov	r4, r0
    a380:	mov	r2, #12
    a384:	mov	r0, #0
    a388:	str	r5, [r4, #12]
    a38c:	ldr	r1, [r8, r3]
    a390:	asr	r3, r5, #24
    a394:	str	r0, [r4, #4]
    a398:	eor	r3, r3, r5, asr #12
    a39c:	eor	r3, r3, r5
    a3a0:	ubfx	r3, r3, #0, #12
    a3a4:	ldr	r1, [r1]
    a3a8:	str	r4, [r4]
    a3ac:	mul	r3, r2, r3
    a3b0:	ldr	r0, [r1, r3]
    a3b4:	add	r2, r1, r3
    a3b8:	cmp	r0, #0
    a3bc:	str	r0, [r4, #8]
    a3c0:	strne	r4, [r0, #4]
    a3c4:	bne	a3d4 <rb_open+0x90>
    a3c8:	ldr	r0, [r2, #4]
    a3cc:	cmp	r0, #0
    a3d0:	streq	r4, [r2, #4]
    a3d4:	str	r4, [r1, r3]
    a3d8:	ldr	r3, [r2, #8]
    a3dc:	add	r3, r3, #1
    a3e0:	str	r3, [r2, #8]
    a3e4:	ldrb	r3, [r4, #16]
    a3e8:	tst	r3, #1
    a3ec:	beq	a41c <rb_open+0xd8>
    a3f0:	ldr	r2, [r4, #24]
    a3f4:	cmp	r2, #0
    a3f8:	ldreq	r2, [pc, #124]	; a47c <rb_open+0x138>
    a3fc:	addeq	r2, pc, r2
    a400:	ldr	r0, [pc, #120]	; a480 <rb_open+0x13c>
    a404:	mov	r1, r5
    a408:	mov	r4, #0
    a40c:	add	r0, pc, r0
    a410:	bl	48f0 <rb_lib_log@plt>
    a414:	mov	r0, r4
    a418:	pop	{r4, r5, r6, r7, r8, pc}
    a41c:	orr	r3, r3, #1
    a420:	cmp	r6, #0
    a424:	str	r5, [r4, #12]
    a428:	strb	r3, [r4, #16]
    a42c:	strb	r7, [r4, #17]
    a430:	beq	a458 <rb_open+0x114>
    a434:	mov	r0, #128	; 0x80
    a438:	bl	4980 <malloc@plt>
    a43c:	subs	r5, r0, #0
    a440:	bne	a448 <rb_open+0x104>
    a444:	bl	495c <rb_outofmemory@plt>
    a448:	mov	r2, #128	; 0x80
    a44c:	mov	r1, r6
    a450:	bl	4674 <rb_strlcpy@plt>
    a454:	str	r5, [r4, #24]
    a458:	ldr	r2, [pc, #36]	; a484 <rb_open+0x140>
    a45c:	add	r2, pc, r2
    a460:	ldr	r3, [r2, #96]	; 0x60
    a464:	add	r3, r3, #1
    a468:	str	r3, [r2, #96]	; 0x60
    a46c:	b	a414 <rb_open+0xd0>
    a470:	.word	0x0001ac98
    a474:	.word	0x0002d63c
    a478:	.word	0x000003bc
    a47c:	.word	0x0000901b
    a480:	.word	0x000090c4
    a484:	.word	0x0002d54c

0000a488 <rb_dump_fd>:
    a488:	ldr	r3, [pc, #136]	; a518 <rb_dump_fd+0x90>
    a48c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a490:	mov	r6, r0
    a494:	mov	r7, r1
    a498:	mov	r4, #0
    a49c:	ldr	r2, [pc, #120]	; a51c <rb_dump_fd+0x94>
    a4a0:	add	r3, pc, r3
    a4a4:	ldr	r9, [pc, #116]	; a520 <rb_dump_fd+0x98>
    a4a8:	ldr	r8, [r3, r2]
    a4ac:	add	r9, pc, r9
    a4b0:	ldr	r3, [r8]
    a4b4:	add	r2, r3, r4
    a4b8:	ldr	r2, [r2, #8]
    a4bc:	cmp	r2, #0
    a4c0:	bne	a4d4 <rb_dump_fd+0x4c>
    a4c4:	add	r4, r4, #12
    a4c8:	cmp	r4, #49152	; 0xc000
    a4cc:	bne	a4b0 <rb_dump_fd+0x28>
    a4d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a4d4:	ldr	r5, [r3, r4]
    a4d8:	cmp	r5, #0
    a4dc:	beq	a4c4 <rb_dump_fd+0x3c>
    a4e0:	ldr	r3, [r5]
    a4e4:	cmp	r3, #0
    a4e8:	beq	a510 <rb_dump_fd+0x88>
    a4ec:	ldrb	r2, [r3, #16]
    a4f0:	tst	r2, #1
    a4f4:	beq	a510 <rb_dump_fd+0x88>
    a4f8:	mov	r2, r7
    a4fc:	ldr	r0, [r3, #12]
    a500:	ldr	r1, [r3, #24]
    a504:	cmp	r1, #0
    a508:	moveq	r1, r9
    a50c:	blx	r6
    a510:	ldr	r5, [r5, #8]
    a514:	b	a4d8 <rb_dump_fd+0x50>
    a518:	.word	0x0001ab58
    a51c:	.word	0x000003bc
    a520:	.word	0x0000924f

0000a524 <rb_note>:
    a524:	push	{r4, r5, r6, lr}
    a528:	subs	r4, r0, #0
    a52c:	popeq	{r4, r5, r6, pc}
    a530:	mov	r5, r1
    a534:	ldr	r0, [r4, #24]
    a538:	bl	96ec <rb_free>
    a53c:	mov	r0, #128	; 0x80
    a540:	bl	4980 <malloc@plt>
    a544:	subs	r6, r0, #0
    a548:	bne	a550 <rb_note+0x2c>
    a54c:	bl	495c <rb_outofmemory@plt>
    a550:	mov	r2, #128	; 0x80
    a554:	mov	r1, r5
    a558:	bl	4674 <rb_strlcpy@plt>
    a55c:	str	r6, [r4, #24]
    a560:	pop	{r4, r5, r6, pc}

0000a564 <rb_set_type>:
    a564:	strb	r1, [r0, #17]
    a568:	bx	lr

0000a56c <rb_get_type>:
    a56c:	ldrb	r0, [r0, #17]
    a570:	bx	lr

0000a574 <rb_fd_ssl>:
    a574:	cmp	r0, #0
    a578:	ldrbne	r0, [r0, #17]
    a57c:	ubfxne	r0, r0, #5, #1
    a580:	bx	lr

0000a584 <rb_get_fd>:
    a584:	cmp	r0, #0
    a588:	ldrne	r0, [r0, #12]
    a58c:	mvneq	r0, #0
    a590:	bx	lr

0000a594 <rb_get_sockerr>:
    a594:	push	{r4, r5, r6, r7, lr}
    a598:	mov	r3, #0
    a59c:	sub	sp, sp, #20
    a5a0:	mov	r6, #4
    a5a4:	mov	r7, r0
    a5a8:	str	r3, [sp, #8]
    a5ac:	str	r6, [sp, #12]
    a5b0:	bl	4cbc <__errno_location@plt>
    a5b4:	ldrb	r3, [r7, #17]
    a5b8:	ldr	r4, [r0]
    a5bc:	tst	r3, #4
    a5c0:	beq	a600 <rb_get_sockerr+0x6c>
    a5c4:	mov	r5, r0
    a5c8:	mov	r0, r7
    a5cc:	bl	44b8 <rb_get_fd@plt>
    a5d0:	add	r3, sp, #12
    a5d4:	mov	r2, r6
    a5d8:	mov	r1, #1
    a5dc:	str	r3, [sp]
    a5e0:	add	r3, sp, #8
    a5e4:	bl	4c50 <getsockopt@plt>
    a5e8:	cmp	r0, #0
    a5ec:	bne	a5fc <rb_get_sockerr+0x68>
    a5f0:	ldr	r3, [sp, #8]
    a5f4:	cmp	r3, #0
    a5f8:	movne	r4, r3
    a5fc:	str	r4, [r5]
    a600:	mov	r0, r4
    a604:	add	sp, sp, #20
    a608:	pop	{r4, r5, r6, r7, pc}

0000a60c <rb_bind>:
    a60c:	push	{r4, r5, r6, r7, lr}
    a610:	mov	r3, #4
    a614:	sub	sp, sp, #20
    a618:	mov	r7, r1
    a61c:	mov	r1, #1
    a620:	mov	r4, r0
    a624:	mov	r2, #2
    a628:	str	r3, [sp]
    a62c:	add	r3, sp, #12
    a630:	ldr	r0, [r0, #12]
    a634:	str	r1, [sp, #12]
    a638:	bl	4c74 <setsockopt@plt>
    a63c:	subs	r5, r0, #0
    a640:	ldr	r6, [r4, #12]
    a644:	bne	a674 <rb_bind+0x68>
    a648:	ldrh	r3, [r7]
    a64c:	mov	r1, r7
    a650:	mov	r0, r6
    a654:	cmp	r3, #2
    a658:	moveq	r2, #16
    a65c:	movne	r2, #28
    a660:	bl	48e4 <bind@plt>
    a664:	mov	r5, r0
    a668:	mov	r0, r5
    a66c:	add	sp, sp, #20
    a670:	pop	{r4, r5, r6, r7, pc}
    a674:	mov	r0, r4
    a678:	bl	4a64 <rb_get_sockerr@plt>
    a67c:	bl	4374 <strerror@plt>
    a680:	mov	r2, r0
    a684:	ldr	r0, [pc, #12]	; a698 <rb_bind+0x8c>
    a688:	mov	r1, r6
    a68c:	add	r0, pc, r0
    a690:	bl	48f0 <rb_lib_log@plt>
    a694:	b	a668 <rb_bind+0x5c>
    a698:	.word	0x00008e76

0000a69c <rb_get_fde>:
    a69c:	b	94c4 <rb_find_fd>

0000a6a0 <rb_read>:
    a6a0:	push	{lr}		; (str lr, [sp, #-4]!)
    a6a4:	subs	lr, r0, #0
    a6a8:	popeq	{pc}		; (ldreq pc, [sp], #4)
    a6ac:	ldrb	ip, [lr, #17]
    a6b0:	ands	r3, ip, #32
    a6b4:	beq	a6c0 <rb_read+0x20>
    a6b8:	pop	{lr}		; (ldr lr, [sp], #4)
    a6bc:	b	c82c <rb_ssl_read>
    a6c0:	tst	ip, #4
    a6c4:	ldr	r0, [lr, #12]
    a6c8:	beq	a6d4 <rb_read+0x34>
    a6cc:	pop	{lr}		; (ldr lr, [sp], #4)
    a6d0:	b	4560 <recv@plt>
    a6d4:	pop	{lr}		; (ldr lr, [sp], #4)
    a6d8:	b	46e0 <read@plt>

0000a6dc <rb_write>:
    a6dc:	subs	ip, r0, #0
    a6e0:	bxeq	lr
    a6e4:	ldrb	r3, [ip, #17]
    a6e8:	tst	r3, #32
    a6ec:	beq	a6f4 <rb_write+0x18>
    a6f0:	b	c850 <rb_ssl_write>
    a6f4:	tst	r3, #4
    a6f8:	ldr	r0, [ip, #12]
    a6fc:	beq	a708 <rb_write+0x2c>
    a700:	mov	r3, #16384	; 0x4000
    a704:	b	4a70 <send@plt>
    a708:	b	46f8 <write@plt>

0000a70c <rb_writev>:
    a70c:	push	{r4, r5, r6, r7, lr}
    a710:	subs	r7, r0, #0
    a714:	sub	sp, sp, #36	; 0x24
    a718:	bne	a738 <rb_writev+0x2c>
    a71c:	bl	4cbc <__errno_location@plt>
    a720:	mvn	r4, #0
    a724:	mov	r3, #9
    a728:	str	r3, [r0]
    a72c:	mov	r0, r4
    a730:	add	sp, sp, #36	; 0x24
    a734:	pop	{r4, r5, r6, r7, pc}
    a738:	ldrb	r3, [r7, #17]
    a73c:	mov	r5, r1
    a740:	mov	r6, r2
    a744:	ands	r0, r3, #32
    a748:	addne	r5, r1, #8
    a74c:	movne	r4, #0
    a750:	bne	a798 <rb_writev+0x8c>
    a754:	tst	r3, #4
    a758:	ldr	r4, [r7, #12]
    a75c:	beq	a7c8 <rb_writev+0xbc>
    a760:	add	r3, sp, #4
    a764:	mov	r1, r0
    a768:	mov	r2, #28
    a76c:	mov	r0, r3
    a770:	bl	45fc <memset@plt>
    a774:	mov	r1, r0
    a778:	mov	r2, #16384	; 0x4000
    a77c:	str	r5, [sp, #12]
    a780:	mov	r0, r4
    a784:	str	r6, [sp, #16]
    a788:	bl	46d4 <sendmsg@plt>
    a78c:	mov	r4, r0
    a790:	b	a72c <rb_writev+0x20>
    a794:	add	r4, r4, r0
    a798:	cmp	r6, #0
    a79c:	beq	a72c <rb_writev+0x20>
    a7a0:	mov	r0, r7
    a7a4:	ldmdb	r5, {r1, r2}
    a7a8:	sub	r6, r6, #1
    a7ac:	bl	462c <rb_write@plt>
    a7b0:	cmp	r0, #0
    a7b4:	add	r5, r5, #8
    a7b8:	bgt	a794 <rb_writev+0x88>
    a7bc:	cmp	r4, #0
    a7c0:	moveq	r4, r0
    a7c4:	b	a72c <rb_writev+0x20>
    a7c8:	mov	r0, r4
    a7cc:	bl	465c <writev@plt>
    a7d0:	b	a78c <rb_writev+0x80>

0000a7d4 <rb_inet_ntop>:
    a7d4:	cmp	r0, #2
    a7d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a7dc:	mov	r7, r1
    a7e0:	sub	sp, sp, #92	; 0x5c
    a7e4:	mov	r9, r2
    a7e8:	mov	sl, r3
    a7ec:	beq	a800 <rb_inet_ntop+0x2c>
    a7f0:	cmp	r0, #10
    a7f4:	beq	a820 <rb_inet_ntop+0x4c>
    a7f8:	mov	r0, #0
    a7fc:	b	a9e0 <rb_inet_ntop+0x20c>
    a800:	cmp	r3, #15
    a804:	movhi	r0, r1
    a808:	bls	a7f8 <rb_inet_ntop+0x24>
    a80c:	bl	9534 <inetntoa>
    a810:	mov	r1, r0
    a814:	mov	r0, r9
    a818:	bl	4860 <strcpy@plt>
    a81c:	b	a9e0 <rb_inet_ntop+0x20c>
    a820:	ldr	r3, [r1]
    a824:	cmp	r3, #0
    a828:	bne	a85c <rb_inet_ntop+0x88>
    a82c:	ldr	r3, [r1, #4]
    a830:	cmp	r3, #0
    a834:	bne	a85c <rb_inet_ntop+0x88>
    a838:	ldr	r3, [r1, #8]
    a83c:	cmn	r3, #65536	; 0x10000
    a840:	beq	aa84 <rb_inet_ntop+0x2b0>
    a844:	cmp	r3, #0
    a848:	bne	a85c <rb_inet_ntop+0x88>
    a84c:	ldr	r3, [r1, #12]
    a850:	rev	r3, r3
    a854:	cmp	r3, #1
    a858:	bhi	aa84 <rb_inet_ntop+0x2b0>
    a85c:	add	r3, sp, #8
    a860:	mov	r2, #32
    a864:	mov	r1, #0
    a868:	mov	r0, r3
    a86c:	str	r3, [sp]
    a870:	bl	45fc <memset@plt>
    a874:	mov	r2, #0
    a878:	add	lr, r7, #1
    a87c:	ldrb	ip, [r7, r2]
    a880:	asr	r1, r2, #1
    a884:	add	r3, sp, #88	; 0x58
    a888:	ldrb	r0, [lr, r2]
    a88c:	add	r1, r3, r1, lsl #2
    a890:	add	r2, r2, #2
    a894:	cmp	r2, #16
    a898:	orr	r0, r0, ip, lsl #8
    a89c:	str	r0, [r1, #-80]	; 0xffffffb0
    a8a0:	bne	a87c <rb_inet_ntop+0xa8>
    a8a4:	ldr	lr, [sp]
    a8a8:	mov	r6, #0
    a8ac:	mvn	r5, #0
    a8b0:	mov	r1, r6
    a8b4:	mov	r2, r5
    a8b8:	mov	r0, r6
    a8bc:	ldr	ip, [lr], #4
    a8c0:	cmp	ip, #0
    a8c4:	bne	a8dc <rb_inet_ntop+0x108>
    a8c8:	cmn	r2, #1
    a8cc:	addne	r1, r1, #1
    a8d0:	moveq	r2, r0
    a8d4:	moveq	r1, #1
    a8d8:	b	a908 <rb_inet_ntop+0x134>
    a8dc:	cmn	r2, #1
    a8e0:	beq	a908 <rb_inet_ntop+0x134>
    a8e4:	cmn	r5, #1
    a8e8:	movne	ip, #0
    a8ec:	moveq	ip, #1
    a8f0:	cmp	r1, r6
    a8f4:	orrgt	ip, ip, #1
    a8f8:	cmp	ip, #0
    a8fc:	movne	r5, r2
    a900:	movne	r6, r1
    a904:	mvn	r2, #0
    a908:	add	r0, r0, #1
    a90c:	cmp	r0, #8
    a910:	bne	a8bc <rb_inet_ntop+0xe8>
    a914:	cmn	r2, #1
    a918:	beq	a948 <rb_inet_ntop+0x174>
    a91c:	cmn	r5, #1
    a920:	movne	r0, #0
    a924:	moveq	r0, #1
    a928:	cmp	r6, r1
    a92c:	orrlt	r0, r0, #1
    a930:	cmp	r0, #0
    a934:	movne	r6, r1
    a938:	movne	r5, r2
    a93c:	cmp	r6, #1
    a940:	mvnle	r5, #0
    a944:	b	a950 <rb_inet_ntop+0x17c>
    a948:	cmn	r5, #1
    a94c:	bne	a93c <rb_inet_ntop+0x168>
    a950:	ldr	r3, [pc, #316]	; aa94 <rb_inet_ntop+0x2c0>
    a954:	add	r4, sp, #40	; 0x28
    a958:	mov	r8, #0
    a95c:	mov	fp, r4
    a960:	add	r3, pc, r3
    a964:	str	r3, [sp, #4]
    a968:	mov	r3, #58	; 0x3a
    a96c:	cmp	r5, r8
    a970:	movgt	r2, #0
    a974:	movle	r2, #1
    a978:	cmn	r5, #1
    a97c:	moveq	r2, #0
    a980:	cmp	r2, #0
    a984:	beq	a9e8 <rb_inet_ntop+0x214>
    a988:	add	r2, r5, r6
    a98c:	cmp	r2, r8
    a990:	ble	a9e8 <rb_inet_ntop+0x214>
    a994:	cmp	r5, r8
    a998:	bne	a9ac <rb_inet_ntop+0x1d8>
    a99c:	cmp	r5, #0
    a9a0:	moveq	r2, #48	; 0x30
    a9a4:	strbeq	r2, [r4], #1
    a9a8:	strb	r3, [r4], #1
    a9ac:	add	r8, r8, #1
    a9b0:	cmp	r8, #8
    a9b4:	bne	a96c <rb_inet_ntop+0x198>
    a9b8:	cmn	r5, #1
    a9bc:	bne	aa50 <rb_inet_ntop+0x27c>
    a9c0:	mov	r3, #0
    a9c4:	strb	r3, [r4], #1
    a9c8:	sub	r2, r4, fp
    a9cc:	cmp	sl, r2
    a9d0:	bcc	a7f8 <rb_inet_ntop+0x24>
    a9d4:	mov	r1, fp
    a9d8:	mov	r0, r9
    a9dc:	bl	47dc <memcpy@plt>
    a9e0:	add	sp, sp, #92	; 0x5c
    a9e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a9e8:	cmp	r8, #0
    a9ec:	beq	aa64 <rb_inet_ntop+0x290>
    a9f0:	cmp	r5, #0
    a9f4:	cmpeq	r8, #6
    a9f8:	strb	r3, [r4], #1
    a9fc:	bne	aa64 <rb_inet_ntop+0x290>
    aa00:	cmp	r6, #6
    aa04:	beq	aa20 <rb_inet_ntop+0x24c>
    aa08:	cmp	r6, #5
    aa0c:	bne	aa64 <rb_inet_ntop+0x290>
    aa10:	ldr	r2, [sp, #28]
    aa14:	movw	r1, #65535	; 0xffff
    aa18:	cmp	r2, r1
    aa1c:	bne	aa64 <rb_inet_ntop+0x290>
    aa20:	sub	r3, r4, fp
    aa24:	add	r0, r7, #12
    aa28:	rsb	r3, r3, #46	; 0x2e
    aa2c:	cmp	r3, #15
    aa30:	bls	a7f8 <rb_inet_ntop+0x24>
    aa34:	bl	9534 <inetntoa>
    aa38:	mov	r1, r0
    aa3c:	mov	r0, r4
    aa40:	bl	4860 <strcpy@plt>
    aa44:	mov	r0, r4
    aa48:	bl	47b8 <strlen@plt>
    aa4c:	add	r4, r4, r0
    aa50:	add	r5, r5, r6
    aa54:	cmp	r5, #8
    aa58:	moveq	r3, #58	; 0x3a
    aa5c:	strbeq	r3, [r4], #1
    aa60:	b	a9c0 <rb_inet_ntop+0x1ec>
    aa64:	ldr	r3, [sp]
    aa68:	mov	r0, r4
    aa6c:	ldr	r1, [sp, #4]
    aa70:	ldr	r2, [r3, r8, lsl #2]
    aa74:	bl	4cd4 <sprintf@plt>
    aa78:	add	r4, r4, r0
    aa7c:	mov	r3, #58	; 0x3a
    aa80:	b	a9ac <rb_inet_ntop+0x1d8>
    aa84:	cmp	sl, #15
    aa88:	bls	a7f8 <rb_inet_ntop+0x24>
    aa8c:	add	r0, r7, #12
    aa90:	b	a80c <rb_inet_ntop+0x38>
    aa94:	.word	0x00008be1

0000aa98 <rb_inet_ntop_sock>:
    aa98:	mov	ip, r0
    aa9c:	ldrh	r0, [r0]
    aaa0:	mov	r3, r2
    aaa4:	cmp	r0, #2
    aaa8:	beq	aabc <rb_inet_ntop_sock+0x24>
    aaac:	cmp	r0, #10
    aab0:	beq	aac8 <rb_inet_ntop_sock+0x30>
    aab4:	mov	r0, #0
    aab8:	bx	lr
    aabc:	mov	r2, r1
    aac0:	add	r1, ip, #4
    aac4:	b	4920 <rb_inet_ntop@plt>
    aac8:	mov	r2, r1
    aacc:	add	r1, ip, #8
    aad0:	b	aac4 <rb_inet_ntop_sock+0x2c>

0000aad4 <rb_inet_pton>:
    aad4:	cmp	r0, #2
    aad8:	push	{r4, r5, lr}
    aadc:	mov	r4, r1
    aae0:	sub	sp, sp, #60	; 0x3c
    aae4:	mov	r5, r2
    aae8:	beq	ab34 <rb_inet_pton+0x60>
    aaec:	cmp	r0, #10
    aaf0:	mvnne	r0, #0
    aaf4:	bne	ab40 <rb_inet_pton+0x6c>
    aaf8:	mov	r1, r2
    aafc:	mov	r0, r4
    ab00:	bl	9634 <inet_pton4>
    ab04:	cmp	r0, #0
    ab08:	beq	ab24 <rb_inet_pton+0x50>
    ab0c:	ldr	r1, [pc, #52]	; ab48 <rb_inet_pton+0x74>
    ab10:	mov	r2, r4
    ab14:	mov	r4, sp
    ab18:	mov	r0, r4
    ab1c:	add	r1, pc, r1
    ab20:	bl	4cd4 <sprintf@plt>
    ab24:	mov	r1, r5
    ab28:	mov	r0, r4
    ab2c:	bl	97b4 <inet_pton6>
    ab30:	b	ab40 <rb_inet_pton+0x6c>
    ab34:	mov	r1, r2
    ab38:	mov	r0, r4
    ab3c:	bl	9634 <inet_pton4>
    ab40:	add	sp, sp, #60	; 0x3c
    ab44:	pop	{r4, r5, pc}
    ab48:	.word	0x00008a28

0000ab4c <rb_inet_pton_sock>:
    ab4c:	push	{r4, r5, r6, lr}
    ab50:	mov	r4, r1
    ab54:	mov	r5, r0
    ab58:	mov	r2, #128	; 0x80
    ab5c:	mov	r1, #0
    ab60:	mov	r0, r4
    ab64:	bl	45fc <memset@plt>
    ab68:	add	r2, r4, #4
    ab6c:	mov	r1, r5
    ab70:	mov	r0, #2
    ab74:	bl	4608 <rb_inet_pton@plt>
    ab78:	cmp	r0, #0
    ab7c:	movne	r3, #2
    ab80:	bne	aba0 <rb_inet_pton_sock+0x54>
    ab84:	add	r2, r4, #8
    ab88:	mov	r1, r5
    ab8c:	mov	r0, #10
    ab90:	bl	4608 <rb_inet_pton@plt>
    ab94:	cmp	r0, #0
    ab98:	popeq	{r4, r5, r6, pc}
    ab9c:	mov	r3, #10
    aba0:	mov	r0, #1
    aba4:	str	r3, [r4]
    aba8:	pop	{r4, r5, r6, pc}

0000abac <rb_get_iotype>:
    abac:	ldr	r0, [pc, #8]	; abbc <rb_get_iotype+0x10>
    abb0:	add	r0, pc, r0
    abb4:	add	r0, r0, #56	; 0x38
    abb8:	bx	lr
    abbc:	.word	0x0002cdf8

0000abc0 <rb_io_sched_event>:
    abc0:	push	{r4, r5, r6, lr}
    abc4:	subs	r4, r0, #0
    abc8:	beq	ac10 <rb_io_sched_event+0x50>
    abcc:	ldr	r6, [pc, #68]	; ac18 <rb_io_sched_event+0x58>
    abd0:	add	r6, pc, r6
    abd4:	ldr	r3, [r6, #52]	; 0x34
    abd8:	cmp	r3, #0
    abdc:	beq	ac10 <rb_io_sched_event+0x50>
    abe0:	ldr	r2, [r6, #40]	; 0x28
    abe4:	cmp	r2, #0
    abe8:	beq	ac10 <rb_io_sched_event+0x50>
    abec:	mov	r5, r1
    abf0:	blx	r3
    abf4:	cmp	r0, #0
    abf8:	beq	ac10 <rb_io_sched_event+0x50>
    abfc:	mov	r1, r5
    ac00:	mov	r0, r4
    ac04:	ldr	r3, [r6, #40]	; 0x28
    ac08:	pop	{r4, r5, r6, lr}
    ac0c:	bx	r3
    ac10:	mov	r0, #0
    ac14:	pop	{r4, r5, r6, pc}
    ac18:	.word	0x0002cdd8

0000ac1c <rb_io_unsched_event>:
    ac1c:	push	{r4, r5, r6, lr}
    ac20:	subs	r4, r0, #0
    ac24:	popeq	{r4, r5, r6, pc}
    ac28:	ldr	r5, [pc, #52]	; ac64 <rb_io_unsched_event+0x48>
    ac2c:	add	r5, pc, r5
    ac30:	ldr	r3, [r5, #52]	; 0x34
    ac34:	cmp	r3, #0
    ac38:	popeq	{r4, r5, r6, pc}
    ac3c:	ldr	r2, [r5, #44]	; 0x2c
    ac40:	cmp	r2, #0
    ac44:	popeq	{r4, r5, r6, pc}
    ac48:	blx	r3
    ac4c:	cmp	r0, #0
    ac50:	popeq	{r4, r5, r6, pc}
    ac54:	mov	r0, r4
    ac58:	ldr	r3, [r5, #44]	; 0x2c
    ac5c:	pop	{r4, r5, r6, lr}
    ac60:	bx	r3
    ac64:	.word	0x0002cd7c

0000ac68 <rb_io_supports_event>:
    ac68:	ldr	r3, [pc, #16]	; ac80 <rb_io_supports_event+0x18>
    ac6c:	add	r3, pc, r3
    ac70:	ldr	r0, [r3, #52]	; 0x34
    ac74:	cmp	r0, #0
    ac78:	bxeq	lr
    ac7c:	bx	r0
    ac80:	.word	0x0002cd3c

0000ac84 <rb_io_init_event>:
    ac84:	ldr	r3, [pc, #20]	; aca0 <rb_io_init_event+0x1c>
    ac88:	push	{r4, lr}
    ac8c:	add	r3, pc, r3
    ac90:	ldr	r3, [r3, #48]	; 0x30
    ac94:	blx	r3
    ac98:	pop	{r4, lr}
    ac9c:	b	cfa8 <rb_event_io_register_all>
    aca0:	.word	0x0002cd1c

0000aca4 <rb_init_netio>:
    aca4:	ldr	r0, [pc, #432]	; ae5c <rb_init_netio+0x1b8>
    aca8:	push	{r4, r5, r6, lr}
    acac:	ldr	r5, [pc, #428]	; ae60 <rb_init_netio+0x1bc>
    acb0:	add	r0, pc, r0
    acb4:	bl	456c <getenv@plt>
    acb8:	mov	r4, r0
    acbc:	mov	r0, #49152	; 0xc000
    acc0:	bl	9798 <rb_malloc>
    acc4:	ldr	r3, [pc, #408]	; ae64 <rb_init_netio+0x1c0>
    acc8:	add	r5, pc, r5
    accc:	ldr	r3, [r5, r3]
    acd0:	str	r0, [r3]
    acd4:	bl	c164 <rb_init_ssl>
    acd8:	cmp	r4, #0
    acdc:	bne	ad50 <rb_init_netio+0xac>
    ace0:	bl	99b0 <try_kqueue>
    ace4:	cmp	r0, #0
    ace8:	popeq	{r4, r5, r6, pc}
    acec:	bl	9a6c <try_epoll>
    acf0:	cmp	r0, #0
    acf4:	popeq	{r4, r5, r6, pc}
    acf8:	bl	9b28 <try_ports>
    acfc:	cmp	r0, #0
    ad00:	popeq	{r4, r5, r6, pc}
    ad04:	bl	9be4 <try_devpoll>
    ad08:	cmp	r0, #0
    ad0c:	popeq	{r4, r5, r6, pc}
    ad10:	bl	9c7c <try_sigio>
    ad14:	cmp	r0, #0
    ad18:	popeq	{r4, r5, r6, pc}
    ad1c:	bl	9d38 <try_poll>
    ad20:	cmp	r0, #0
    ad24:	popeq	{r4, r5, r6, pc}
    ad28:	bl	9dd0 <try_win32>
    ad2c:	cmp	r0, #0
    ad30:	popeq	{r4, r5, r6, pc}
    ad34:	bl	9e68 <try_select>
    ad38:	cmp	r0, #0
    ad3c:	popeq	{r4, r5, r6, pc}
    ad40:	ldr	r0, [pc, #288]	; ae68 <rb_init_netio+0x1c4>
    ad44:	add	r0, pc, r0
    ad48:	bl	48f0 <rb_lib_log@plt>
    ad4c:	bl	4398 <abort@plt>
    ad50:	ldr	r0, [pc, #276]	; ae6c <rb_init_netio+0x1c8>
    ad54:	mov	r1, r4
    ad58:	add	r0, pc, r0
    ad5c:	bl	4cb0 <strcmp@plt>
    ad60:	cmp	r0, #0
    ad64:	bne	ad9c <rb_init_netio+0xf8>
    ad68:	bl	9a6c <try_epoll>
    ad6c:	cmp	r0, #0
    ad70:	popeq	{r4, r5, r6, pc}
    ad74:	mov	r1, r4
    ad78:	ldr	r0, [pc, #240]	; ae70 <rb_init_netio+0x1cc>
    ad7c:	add	r0, pc, r0
    ad80:	bl	4cb0 <strcmp@plt>
    ad84:	cmp	r0, #0
    ad88:	bne	ace0 <rb_init_netio+0x3c>
    ad8c:	bl	9dd0 <try_win32>
    ad90:	cmp	r0, #0
    ad94:	bne	ace0 <rb_init_netio+0x3c>
    ad98:	pop	{r4, r5, r6, pc}
    ad9c:	ldr	r0, [pc, #208]	; ae74 <rb_init_netio+0x1d0>
    ada0:	mov	r1, r4
    ada4:	add	r0, pc, r0
    ada8:	bl	4cb0 <strcmp@plt>
    adac:	cmp	r0, #0
    adb0:	bne	adbc <rb_init_netio+0x118>
    adb4:	bl	99b0 <try_kqueue>
    adb8:	b	ad6c <rb_init_netio+0xc8>
    adbc:	ldr	r0, [pc, #180]	; ae78 <rb_init_netio+0x1d4>
    adc0:	mov	r1, r4
    adc4:	add	r0, pc, r0
    adc8:	bl	4cb0 <strcmp@plt>
    adcc:	cmp	r0, #0
    add0:	bne	addc <rb_init_netio+0x138>
    add4:	bl	9b28 <try_ports>
    add8:	b	ad6c <rb_init_netio+0xc8>
    addc:	ldr	r0, [pc, #152]	; ae7c <rb_init_netio+0x1d8>
    ade0:	mov	r1, r4
    ade4:	add	r0, pc, r0
    ade8:	bl	4cb0 <strcmp@plt>
    adec:	cmp	r0, #0
    adf0:	bne	adfc <rb_init_netio+0x158>
    adf4:	bl	9d38 <try_poll>
    adf8:	b	ad6c <rb_init_netio+0xc8>
    adfc:	ldr	r0, [pc, #124]	; ae80 <rb_init_netio+0x1dc>
    ae00:	mov	r1, r4
    ae04:	add	r0, pc, r0
    ae08:	bl	4cb0 <strcmp@plt>
    ae0c:	cmp	r0, #0
    ae10:	bne	ae1c <rb_init_netio+0x178>
    ae14:	bl	9be4 <try_devpoll>
    ae18:	b	ad6c <rb_init_netio+0xc8>
    ae1c:	ldr	r0, [pc, #96]	; ae84 <rb_init_netio+0x1e0>
    ae20:	mov	r1, r4
    ae24:	add	r0, pc, r0
    ae28:	bl	4cb0 <strcmp@plt>
    ae2c:	cmp	r0, #0
    ae30:	bne	ae3c <rb_init_netio+0x198>
    ae34:	bl	9c7c <try_sigio>
    ae38:	b	ad6c <rb_init_netio+0xc8>
    ae3c:	ldr	r0, [pc, #68]	; ae88 <rb_init_netio+0x1e4>
    ae40:	mov	r1, r4
    ae44:	add	r0, pc, r0
    ae48:	bl	4cb0 <strcmp@plt>
    ae4c:	cmp	r0, #0
    ae50:	bne	ad74 <rb_init_netio+0xd0>
    ae54:	bl	9e68 <try_select>
    ae58:	b	ad6c <rb_init_netio+0xc8>
    ae5c:	.word	0x0000889e
    ae60:	.word	0x0001a330
    ae64:	.word	0x000003bc
    ae68:	.word	0x0000881b
    ae6c:	.word	0x0000871c
    ae70:	.word	0x00008712
    ae74:	.word	0x000086c9
    ae78:	.word	0x000086b6
    ae7c:	.word	0x00008691
    ae80:	.word	0x0000867c
    ae84:	.word	0x00008664
    ae88:	.word	0x00008650

0000ae8c <rb_setselect>:
    ae8c:	ldr	ip, [pc, #20]	; aea8 <rb_setselect+0x1c>
    ae90:	push	{lr}		; (str lr, [sp, #-4]!)
    ae94:	add	ip, pc, ip
    ae98:	ldr	lr, [ip, #28]
    ae9c:	mov	ip, lr
    aea0:	pop	{lr}		; (ldr lr, [sp], #4)
    aea4:	bx	ip
    aea8:	.word	0x0002cb14

0000aeac <rb_close>:
    aeac:	push	{r4, r5, r6, r7, r8, lr}
    aeb0:	subs	r4, r0, #0
    aeb4:	ldr	r8, [pc, #324]	; b000 <rb_close+0x154>
    aeb8:	add	r8, pc, r8
    aebc:	popeq	{r4, r5, r6, r7, r8, pc}
    aec0:	ldrb	r7, [r4, #17]
    aec4:	ldr	r5, [r4, #12]
    aec8:	ands	r6, r7, #16
    aecc:	beq	aedc <rb_close+0x30>
    aed0:	mov	r1, #0
    aed4:	mov	r0, r5
    aed8:	bl	45b4 <listen@plt>
    aedc:	mov	r3, #0
    aee0:	mov	r1, #3
    aee4:	mov	r2, r3
    aee8:	mov	r0, r4
    aeec:	bl	447c <rb_setselect@plt>
    aef0:	mov	r3, #0
    aef4:	mov	r0, r4
    aef8:	mov	r2, r3
    aefc:	mov	r1, r3
    af00:	bl	43bc <rb_settimeout@plt>
    af04:	ldr	r0, [r4, #52]	; 0x34
    af08:	bl	96ec <rb_free>
    af0c:	ldr	r0, [r4, #48]	; 0x30
    af10:	bl	96ec <rb_free>
    af14:	ldr	r0, [r4, #24]
    af18:	bl	96ec <rb_free>
    af1c:	tst	r7, #32
    af20:	beq	af2c <rb_close+0x80>
    af24:	mov	r0, r4
    af28:	bl	c0fc <rb_ssl_shutdown>
    af2c:	ldrb	r3, [r4, #16]
    af30:	tst	r3, #1
    af34:	beq	afe8 <rb_close+0x13c>
    af38:	ldr	r3, [pc, #196]	; b004 <rb_close+0x158>
    af3c:	ldr	ip, [r4, #4]
    af40:	ldr	r2, [r4, #12]
    af44:	ldr	r1, [r8, r3]
    af48:	asr	r3, r2, #24
    af4c:	eor	r3, r3, r2, asr #12
    af50:	ldr	r0, [r1]
    af54:	eor	r3, r3, r2
    af58:	mov	r2, #12
    af5c:	ubfx	r3, r3, #0, #12
    af60:	mul	r3, r2, r3
    af64:	ldr	r2, [r4, #8]
    af68:	add	r1, r0, r3
    af6c:	cmp	r2, #0
    af70:	strne	ip, [r2, #4]
    af74:	streq	ip, [r1, #4]
    af78:	ldr	ip, [r4, #4]
    af7c:	cmp	ip, #0
    af80:	streq	r2, [r0, r3]
    af84:	mov	r3, #0
    af88:	strne	r2, [ip, #8]
    af8c:	str	r3, [r4, #4]
    af90:	ldr	r3, [pc, #112]	; b008 <rb_close+0x15c>
    af94:	add	r3, pc, r3
    af98:	ldr	r2, [r3, #100]	; 0x64
    af9c:	cmp	r2, #0
    afa0:	str	r2, [r4, #8]
    afa4:	strne	r4, [r2, #4]
    afa8:	bne	afb8 <rb_close+0x10c>
    afac:	ldr	r2, [r3, #104]	; 0x68
    afb0:	cmp	r2, #0
    afb4:	streq	r4, [r3, #104]	; 0x68
    afb8:	ldr	r2, [r1, #8]
    afbc:	ldr	r3, [pc, #72]	; b00c <rb_close+0x160>
    afc0:	sub	r2, r2, #1
    afc4:	add	r3, pc, r3
    afc8:	str	r2, [r1, #8]
    afcc:	ldr	r2, [r3, #108]	; 0x6c
    afd0:	str	r4, [r3, #100]	; 0x64
    afd4:	add	r2, r2, #1
    afd8:	str	r2, [r3, #108]	; 0x6c
    afdc:	ldrb	r3, [r4, #16]
    afe0:	bic	r3, r3, #1
    afe4:	strb	r3, [r4, #16]
    afe8:	cmp	r6, #0
    afec:	popeq	{r4, r5, r6, r7, r8, pc}
    aff0:	mov	r0, r5
    aff4:	mov	r1, #2
    aff8:	pop	{r4, r5, r6, r7, r8, lr}
    affc:	b	48d8 <shutdown@plt>
    b000:	.word	0x0001a140
    b004:	.word	0x000003bc
    b008:	.word	0x0002ca14
    b00c:	.word	0x0002c9e4

0000b010 <rb_select>:
    b010:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b014:	ldr	r4, [pc, #104]	; b084 <rb_select+0x74>
    b018:	add	r4, pc, r4
    b01c:	ldr	r3, [r4, #32]
    b020:	blx	r3
    b024:	ldr	r5, [r4, #100]	; 0x64
    b028:	mov	r8, r0
    b02c:	cmp	r5, #0
    b030:	beq	b07c <rb_select+0x6c>
    b034:	ldr	r6, [r5, #8]
    b038:	add	r9, r4, #100	; 0x64
    b03c:	ldr	r3, [r4, #96]	; 0x60
    b040:	ldr	r7, [r5]
    b044:	sub	r3, r3, #1
    b048:	ldr	r0, [r7, #12]
    b04c:	str	r3, [r4, #96]	; 0x60
    b050:	bl	4914 <close@plt>
    b054:	mov	r1, r9
    b058:	mov	r0, r5
    b05c:	bl	9488 <rb_dlinkDelete>
    b060:	mov	r1, r7
    b064:	ldr	r0, [r4, #92]	; 0x5c
    b068:	bl	48a8 <rb_bh_free@plt>
    b06c:	cmp	r6, #0
    b070:	movne	r5, r6
    b074:	ldrne	r6, [r6, #8]
    b078:	bne	b03c <rb_select+0x2c>
    b07c:	mov	r0, r8
    b080:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b084:	.word	0x0002c990

0000b088 <rb_setup_fd>:
    b088:	ldr	r3, [pc, #8]	; b098 <rb_setup_fd+0x10>
    b08c:	add	r3, pc, r3
    b090:	ldr	r3, [r3, #36]	; 0x24
    b094:	bx	r3
    b098:	.word	0x0002c91c

0000b09c <rb_set_nb>:
    b09c:	subs	r3, r0, #0
    b0a0:	bne	b0b4 <rb_set_nb+0x18>
    b0a4:	mov	r0, #0
    b0a8:	bx	lr
    b0ac:	mov	r0, #0
    b0b0:	pop	{r4, pc}
    b0b4:	push	{r4, lr}
    b0b8:	ldr	r4, [r3, #12]
    b0bc:	bl	4b00 <rb_setup_fd@plt>
    b0c0:	cmp	r0, #0
    b0c4:	popne	{r4, pc}
    b0c8:	mov	r2, r0
    b0cc:	mov	r1, #3
    b0d0:	mov	r0, r4
    b0d4:	bl	4bd8 <fcntl@plt>
    b0d8:	cmn	r0, #1
    b0dc:	beq	b0ac <rb_set_nb+0x10>
    b0e0:	orr	r2, r0, #2048	; 0x800
    b0e4:	mov	r1, #4
    b0e8:	mov	r0, r4
    b0ec:	bl	4bd8 <fcntl@plt>
    b0f0:	adds	r0, r0, #1
    b0f4:	movne	r0, #1
    b0f8:	pop	{r4, pc}

0000b0fc <rb_accept_tryaccept>:
    b0fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b100:	mov	r5, r0
    b104:	sub	sp, sp, #164	; 0xa4
    b108:	mov	r6, #0
    b10c:	mov	r7, #0
    b110:	ldr	r9, [pc, #372]	; b28c <rb_accept_tryaccept+0x190>
    b114:	ldr	sl, [pc, #372]	; b290 <rb_accept_tryaccept+0x194>
    b118:	add	r9, pc, r9
    b11c:	add	sl, pc, sl
    b120:	add	r4, sp, #32
    b124:	mov	r8, #128	; 0x80
    b128:	mov	r2, r8
    b12c:	mov	r1, #0
    b130:	mov	r0, r4
    b134:	bl	45fc <memset@plt>
    b138:	add	r2, sp, #12
    b13c:	mov	r1, r4
    b140:	ldr	r0, [r5, #12]
    b144:	str	r8, [sp, #12]
    b148:	bl	4740 <accept@plt>
    b14c:	subs	fp, r0, #0
    b150:	bge	b174 <rb_accept_tryaccept+0x78>
    b154:	ldr	r2, [pc, #312]	; b294 <rb_accept_tryaccept+0x198>
    b158:	mov	r3, #0
    b15c:	mov	r1, #1
    b160:	mov	r0, r5
    b164:	add	r2, pc, r2
    b168:	bl	447c <rb_setselect@plt>
    b16c:	add	sp, sp, #164	; 0xa4
    b170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b174:	ldrb	r1, [r5, #17]
    b178:	mov	r2, r9
    b17c:	bic	r1, r1, #127	; 0x7f
    b180:	orr	r1, r1, #4
    b184:	bl	4a58 <rb_open@plt>
    b188:	subs	r8, r0, #0
    b18c:	bne	b1ac <rb_accept_tryaccept+0xb0>
    b190:	ldr	r0, [pc, #256]	; b298 <rb_accept_tryaccept+0x19c>
    b194:	mov	r1, fp
    b198:	add	r0, pc, r0
    b19c:	bl	48f0 <rb_lib_log@plt>
    b1a0:	mov	r0, fp
    b1a4:	bl	4914 <close@plt>
    b1a8:	b	b120 <rb_accept_tryaccept+0x24>
    b1ac:	bl	45f0 <rb_set_nb@plt>
    b1b0:	cmp	r0, #0
    b1b4:	bne	b1cc <rb_accept_tryaccept+0xd0>
    b1b8:	mov	r0, sl
    b1bc:	ldr	r1, [r8, #12]
    b1c0:	bl	48f0 <rb_lib_log@plt>
    b1c4:	mov	r0, r8
    b1c8:	bl	483c <rb_close@plt>
    b1cc:	ldrh	r3, [sp, #32]
    b1d0:	cmp	r3, #10
    b1d4:	bne	b218 <rb_accept_tryaccept+0x11c>
    b1d8:	ldrd	r2, [sp, #40]	; 0x28
    b1dc:	orrs	r3, r2, r3
    b1e0:	bne	b218 <rb_accept_tryaccept+0x11c>
    b1e4:	ldr	r3, [sp, #48]	; 0x30
    b1e8:	cmn	r3, #65536	; 0x10000
    b1ec:	bne	b218 <rb_accept_tryaccept+0x11c>
    b1f0:	mov	r3, #2
    b1f4:	strh	r3, [sp, #16]
    b1f8:	ldrh	r3, [sp, #34]	; 0x22
    b1fc:	strd	r6, [sp, #24]
    b200:	strh	r3, [sp, #18]
    b204:	ldr	r3, [sp, #52]	; 0x34
    b208:	str	r3, [sp, #20]
    b20c:	add	r3, sp, #16
    b210:	ldm	r3, {r0, r1, r2, r3}
    b214:	stm	r4, {r0, r1, r2, r3}
    b218:	ldr	r3, [r5, #52]	; 0x34
    b21c:	ldr	fp, [r3, #136]	; 0x88
    b220:	cmp	fp, #0
    b224:	bne	b24c <rb_accept_tryaccept+0x150>
    b228:	ldrb	r1, [r5, #17]
    b22c:	ldr	r3, [sp, #12]
    b230:	ands	r1, r1, #32
    b234:	beq	b26c <rb_accept_tryaccept+0x170>
    b238:	mov	r2, r4
    b23c:	mov	r1, r8
    b240:	mov	r0, r5
    b244:	bl	c910 <rb_ssl_accept_setup>
    b248:	b	b120 <rb_accept_tryaccept+0x24>
    b24c:	mov	r1, r4
    b250:	mov	r0, r8
    b254:	ldr	r2, [sp, #12]
    b258:	ldr	r3, [r3, #140]	; 0x8c
    b25c:	blx	fp
    b260:	cmp	r0, #0
    b264:	bne	b228 <rb_accept_tryaccept+0x12c>
    b268:	b	b120 <rb_accept_tryaccept+0x24>
    b26c:	ldr	r2, [r5, #52]	; 0x34
    b270:	ldr	r0, [r2, #140]	; 0x8c
    b274:	str	r0, [sp]
    b278:	mov	r0, r8
    b27c:	ldr	fp, [r2, #132]	; 0x84
    b280:	mov	r2, r4
    b284:	blx	fp
    b288:	b	b120 <rb_accept_tryaccept+0x24>
    b28c:	.word	0x00008481
    b290:	.word	0x000084d7
    b294:	.word	0xffffff90
    b298:	.word	0x00008415

0000b29c <rb_accept_tcp>:
    b29c:	push	{r4, r5, r6, r7, r8, lr}
    b2a0:	subs	r4, r0, #0
    b2a4:	popeq	{r4, r5, r6, r7, r8, pc}
    b2a8:	mov	r5, r1
    b2ac:	mov	r6, r3
    b2b0:	mov	r7, r2
    b2b4:	mov	r0, #144	; 0x90
    b2b8:	bl	9798 <rb_malloc>
    b2bc:	mov	r1, #0
    b2c0:	str	r0, [r4, #52]	; 0x34
    b2c4:	str	r7, [r0, #132]	; 0x84
    b2c8:	str	r5, [r0, #136]	; 0x88
    b2cc:	str	r6, [r0, #140]	; 0x8c
    b2d0:	mov	r0, r4
    b2d4:	pop	{r4, r5, r6, r7, r8, lr}
    b2d8:	b	b0fc <rb_accept_tryaccept>

0000b2dc <rb_socketpair>:
    b2dc:	push	{r0, r1, r4, r5, r6, lr}
    b2e0:	mov	r6, r3
    b2e4:	ldr	r3, [pc, #280]	; b404 <rb_socketpair+0x128>
    b2e8:	ldr	ip, [pc, #280]	; b408 <rb_socketpair+0x12c>
    b2ec:	ldr	r5, [sp, #24]
    b2f0:	add	r3, pc, r3
    b2f4:	ldr	r3, [r3, ip]
    b2f8:	ldr	ip, [pc, #268]	; b40c <rb_socketpair+0x130>
    b2fc:	ldr	r3, [r3]
    b300:	add	ip, pc, ip
    b304:	ldr	ip, [ip, #96]	; 0x60
    b308:	cmp	ip, r3
    b30c:	blt	b32c <rb_socketpair+0x50>
    b310:	bl	4cbc <__errno_location@plt>
    b314:	mov	r3, #23
    b318:	str	r3, [r0]
    b31c:	mvn	r4, #0
    b320:	mov	r0, r4
    b324:	add	sp, sp, #8
    b328:	pop	{r4, r5, r6, pc}
    b32c:	mov	r3, sp
    b330:	bl	453c <socketpair@plt>
    b334:	subs	r4, r0, #0
    b338:	bne	b31c <rb_socketpair+0x40>
    b33c:	mov	r1, #4
    b340:	ldr	r0, [sp]
    b344:	ldr	r2, [sp, #28]
    b348:	bl	4a58 <rb_open@plt>
    b34c:	mov	r1, #4
    b350:	str	r0, [r6]
    b354:	ldr	r0, [sp, #4]
    b358:	ldr	r2, [sp, #28]
    b35c:	bl	4a58 <rb_open@plt>
    b360:	str	r0, [r5]
    b364:	mov	r2, r0
    b368:	ldr	r3, [r6]
    b36c:	cmp	r3, #0
    b370:	bne	b384 <rb_socketpair+0xa8>
    b374:	cmp	r0, #0
    b378:	beq	b31c <rb_socketpair+0x40>
    b37c:	bl	483c <rb_close@plt>
    b380:	b	b31c <rb_socketpair+0x40>
    b384:	cmp	r2, #0
    b388:	mov	r0, r3
    b38c:	beq	b37c <rb_socketpair+0xa0>
    b390:	bl	45f0 <rb_set_nb@plt>
    b394:	cmp	r0, #0
    b398:	bne	b3d0 <rb_socketpair+0xf4>
    b39c:	bl	4cbc <__errno_location@plt>
    b3a0:	ldr	r0, [r0]
    b3a4:	ldr	r4, [sp]
    b3a8:	bl	4374 <strerror@plt>
    b3ac:	mov	r2, r0
    b3b0:	ldr	r0, [pc, #88]	; b410 <rb_socketpair+0x134>
    b3b4:	mov	r1, r4
    b3b8:	add	r0, pc, r0
    b3bc:	bl	48f0 <rb_lib_log@plt>
    b3c0:	ldr	r0, [r6]
    b3c4:	bl	483c <rb_close@plt>
    b3c8:	ldr	r0, [r5]
    b3cc:	b	b37c <rb_socketpair+0xa0>
    b3d0:	ldr	r0, [r5]
    b3d4:	bl	45f0 <rb_set_nb@plt>
    b3d8:	cmp	r0, #0
    b3dc:	bne	b320 <rb_socketpair+0x44>
    b3e0:	bl	4cbc <__errno_location@plt>
    b3e4:	ldr	r0, [r0]
    b3e8:	ldr	r4, [sp, #4]
    b3ec:	bl	4374 <strerror@plt>
    b3f0:	mov	r2, r0
    b3f4:	ldr	r0, [pc, #24]	; b414 <rb_socketpair+0x138>
    b3f8:	mov	r1, r4
    b3fc:	add	r0, pc, r0
    b400:	b	b3bc <rb_socketpair+0xe0>
    b404:	.word	0x00019d08
    b408:	.word	0x0000039c
    b40c:	.word	0x0002c6a8
    b410:	.word	0x00008267
    b414:	.word	0x00008223

0000b418 <rb_pipe>:
    b418:	ldr	r3, [pc, #256]	; b520 <rb_pipe+0x108>
    b41c:	push	{r0, r1, r4, r5, r6, lr}
    b420:	mov	r6, r2
    b424:	ldr	r2, [pc, #248]	; b524 <rb_pipe+0x10c>
    b428:	add	r3, pc, r3
    b42c:	ldr	r3, [r3, r2]
    b430:	ldr	r2, [pc, #240]	; b528 <rb_pipe+0x110>
    b434:	ldr	r3, [r3]
    b438:	add	r2, pc, r2
    b43c:	ldr	r2, [r2, #96]	; 0x60
    b440:	cmp	r2, r3
    b444:	blt	b460 <rb_pipe+0x48>
    b448:	bl	4cbc <__errno_location@plt>
    b44c:	mov	r3, #23
    b450:	str	r3, [r0]
    b454:	mvn	r0, #0
    b458:	add	sp, sp, #8
    b45c:	pop	{r4, r5, r6, pc}
    b460:	mov	r5, r0
    b464:	mov	r0, sp
    b468:	mov	r4, r1
    b46c:	bl	4c5c <pipe@plt>
    b470:	cmn	r0, #1
    b474:	beq	b458 <rb_pipe+0x40>
    b478:	mov	r2, r6
    b47c:	mov	r1, #8
    b480:	ldr	r0, [sp]
    b484:	bl	4a58 <rb_open@plt>
    b488:	mov	r2, r6
    b48c:	mov	r1, #8
    b490:	str	r0, [r5]
    b494:	ldr	r0, [sp, #4]
    b498:	bl	4a58 <rb_open@plt>
    b49c:	str	r0, [r4]
    b4a0:	ldr	r0, [r5]
    b4a4:	bl	45f0 <rb_set_nb@plt>
    b4a8:	cmp	r0, #0
    b4ac:	bne	b4e8 <rb_pipe+0xd0>
    b4b0:	bl	4cbc <__errno_location@plt>
    b4b4:	ldr	r0, [r0]
    b4b8:	ldr	r6, [sp]
    b4bc:	bl	4374 <strerror@plt>
    b4c0:	mov	r2, r0
    b4c4:	ldr	r0, [pc, #96]	; b52c <rb_pipe+0x114>
    b4c8:	mov	r1, r6
    b4cc:	add	r0, pc, r0
    b4d0:	bl	48f0 <rb_lib_log@plt>
    b4d4:	ldr	r0, [r5]
    b4d8:	bl	483c <rb_close@plt>
    b4dc:	ldr	r0, [r4]
    b4e0:	bl	483c <rb_close@plt>
    b4e4:	b	b454 <rb_pipe+0x3c>
    b4e8:	ldr	r0, [r4]
    b4ec:	bl	45f0 <rb_set_nb@plt>
    b4f0:	cmp	r0, #0
    b4f4:	movne	r0, #0
    b4f8:	bne	b458 <rb_pipe+0x40>
    b4fc:	bl	4cbc <__errno_location@plt>
    b500:	ldr	r0, [r0]
    b504:	ldr	r6, [sp, #4]
    b508:	bl	4374 <strerror@plt>
    b50c:	mov	r2, r0
    b510:	ldr	r0, [pc, #24]	; b530 <rb_pipe+0x118>
    b514:	mov	r1, r6
    b518:	add	r0, pc, r0
    b51c:	b	b4d0 <rb_pipe+0xb8>
    b520:	.word	0x00019bd0
    b524:	.word	0x0000039c
    b528:	.word	0x0002c570
    b52c:	.word	0x00008153
    b530:	.word	0x00008107

0000b534 <rb_socket>:
    b534:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    b538:	mov	r4, r3
    b53c:	ldr	r3, [pc, #300]	; b670 <rb_socket+0x13c>
    b540:	ldr	ip, [pc, #300]	; b674 <rb_socket+0x140>
    b544:	add	r3, pc, r3
    b548:	ldr	r3, [r3, ip]
    b54c:	ldr	ip, [pc, #292]	; b678 <rb_socket+0x144>
    b550:	ldr	r3, [r3]
    b554:	add	ip, pc, ip
    b558:	ldr	ip, [ip, #96]	; 0x60
    b55c:	cmp	ip, r3
    b560:	blt	b578 <rb_socket+0x44>
    b564:	bl	4cbc <__errno_location@plt>
    b568:	mov	r3, #23
    b56c:	str	r3, [r0]
    b570:	mov	r4, #0
    b574:	b	b62c <rb_socket+0xf8>
    b578:	mov	r6, r0
    b57c:	bl	4764 <socket@plt>
    b580:	subs	r5, r0, #0
    b584:	blt	b570 <rb_socket+0x3c>
    b588:	cmp	r6, #10
    b58c:	bne	b5ec <rb_socket+0xb8>
    b590:	mov	r3, #1
    b594:	mov	r2, #26
    b598:	mov	r1, #41	; 0x29
    b59c:	str	r3, [sp, #12]
    b5a0:	mov	r3, #4
    b5a4:	str	r3, [sp]
    b5a8:	add	r3, sp, #12
    b5ac:	bl	4c74 <setsockopt@plt>
    b5b0:	cmn	r0, #1
    b5b4:	bne	b5ec <rb_socket+0xb8>
    b5b8:	bl	4cbc <__errno_location@plt>
    b5bc:	ldr	r0, [r0]
    b5c0:	ldr	r4, [sp, #12]
    b5c4:	bl	4374 <strerror@plt>
    b5c8:	mov	r3, r0
    b5cc:	ldr	r0, [pc, #168]	; b67c <rb_socket+0x148>
    b5d0:	mov	r2, r5
    b5d4:	mov	r1, r4
    b5d8:	add	r0, pc, r0
    b5dc:	bl	48f0 <rb_lib_log@plt>
    b5e0:	mov	r0, r5
    b5e4:	bl	4914 <close@plt>
    b5e8:	b	b570 <rb_socket+0x3c>
    b5ec:	mov	r2, r4
    b5f0:	mov	r1, #4
    b5f4:	mov	r0, r5
    b5f8:	bl	4a58 <rb_open@plt>
    b5fc:	subs	r4, r0, #0
    b600:	bne	b638 <rb_socket+0x104>
    b604:	bl	4cbc <__errno_location@plt>
    b608:	ldr	r0, [r0]
    b60c:	bl	4374 <strerror@plt>
    b610:	mov	r2, r0
    b614:	ldr	r0, [pc, #100]	; b680 <rb_socket+0x14c>
    b618:	mov	r1, r5
    b61c:	add	r0, pc, r0
    b620:	bl	48f0 <rb_lib_log@plt>
    b624:	mov	r0, r5
    b628:	bl	4914 <close@plt>
    b62c:	mov	r0, r4
    b630:	add	sp, sp, #16
    b634:	pop	{r4, r5, r6, pc}
    b638:	bl	45f0 <rb_set_nb@plt>
    b63c:	subs	r6, r0, #0
    b640:	bne	b62c <rb_socket+0xf8>
    b644:	bl	4cbc <__errno_location@plt>
    b648:	ldr	r0, [r0]
    b64c:	bl	4374 <strerror@plt>
    b650:	mov	r2, r0
    b654:	ldr	r0, [pc, #40]	; b684 <rb_socket+0x150>
    b658:	mov	r1, r5
    b65c:	add	r0, pc, r0
    b660:	bl	48f0 <rb_lib_log@plt>
    b664:	mov	r0, r4
    b668:	bl	483c <rb_close@plt>
    b66c:	b	b570 <rb_socket+0x3c>
    b670:	.word	0x00019ab4
    b674:	.word	0x0000039c
    b678:	.word	0x0002c454
    b67c:	.word	0x00008074
    b680:	.word	0x0000806f
    b684:	.word	0x00007fc3

0000b688 <rb_ignore_errno>:
    b688:	cmp	r0, #85	; 0x55
    b68c:	beq	b6bc <rb_ignore_errno+0x34>
    b690:	bgt	b6ac <rb_ignore_errno+0x24>
    b694:	cmp	r0, #4
    b698:	beq	b6bc <rb_ignore_errno+0x34>
    b69c:	cmp	r0, #11
    b6a0:	movne	r0, #0
    b6a4:	moveq	r0, #1
    b6a8:	bx	lr
    b6ac:	cmp	r0, #105	; 0x69
    b6b0:	beq	b6bc <rb_ignore_errno+0x34>
    b6b4:	cmp	r0, #115	; 0x73
    b6b8:	b	b6a0 <rb_ignore_errno+0x18>
    b6bc:	mov	r0, #1
    b6c0:	bx	lr

0000b6c4 <rb_connect_tcp>:
    b6c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b6c8:	subs	r4, r0, #0
    b6cc:	ldr	r9, [sp, #32]
    b6d0:	ldr	r8, [sp, #36]	; 0x24
    b6d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    b6d8:	mov	r7, r3
    b6dc:	mov	r0, #268	; 0x10c
    b6e0:	mov	r5, r2
    b6e4:	mov	r6, r1
    b6e8:	bl	9798 <rb_malloc>
    b6ec:	mov	r2, #128	; 0x80
    b6f0:	mov	r1, r6
    b6f4:	str	r0, [r4, #48]	; 0x30
    b6f8:	str	r7, [r0, #260]	; 0x104
    b6fc:	str	r9, [r0, #264]	; 0x108
    b700:	add	r0, r0, r2
    b704:	bl	47dc <memcpy@plt>
    b708:	cmp	r5, #0
    b70c:	beq	b738 <rb_connect_tcp+0x74>
    b710:	ldrh	r3, [r5]
    b714:	mov	r1, r5
    b718:	ldr	r0, [r4, #12]
    b71c:	cmp	r3, #2
    b720:	moveq	r2, #16
    b724:	movne	r2, #28
    b728:	bl	48e4 <bind@plt>
    b72c:	cmp	r0, #0
    b730:	movlt	r1, #1
    b734:	blt	b78c <rb_connect_tcp+0xc8>
    b738:	ldr	r2, [pc, #136]	; b7c8 <rb_connect_tcp+0x104>
    b73c:	mov	r3, #0
    b740:	mov	r1, r8
    b744:	mov	r0, r4
    b748:	add	r2, pc, r2
    b74c:	bl	43bc <rb_settimeout@plt>
    b750:	ldr	r0, [r4, #12]
    b754:	ldr	r1, [r4, #48]	; 0x30
    b758:	ldrh	r3, [r1, #128]	; 0x80
    b75c:	add	r1, r1, #128	; 0x80
    b760:	cmp	r3, #2
    b764:	moveq	r2, #16
    b768:	movne	r2, #28
    b76c:	bl	43a4 <connect@plt>
    b770:	cmp	r0, #0
    b774:	bge	b788 <rb_connect_tcp+0xc4>
    b778:	bl	4cbc <__errno_location@plt>
    b77c:	ldr	r0, [r0]
    b780:	cmp	r0, #106	; 0x6a
    b784:	bne	b798 <rb_connect_tcp+0xd4>
    b788:	mov	r1, #0
    b78c:	mov	r0, r4
    b790:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    b794:	b	a0d8 <rb_connect_callback>
    b798:	bl	43b0 <rb_ignore_errno@plt>
    b79c:	cmp	r0, #0
    b7a0:	beq	b7c0 <rb_connect_tcp+0xfc>
    b7a4:	ldr	r2, [pc, #32]	; b7cc <rb_connect_tcp+0x108>
    b7a8:	mov	r0, r4
    b7ac:	mov	r3, #0
    b7b0:	mov	r1, #2
    b7b4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    b7b8:	add	r2, pc, r2
    b7bc:	b	447c <rb_setselect@plt>
    b7c0:	mov	r1, #4
    b7c4:	b	b78c <rb_connect_tcp+0xc8>
    b7c8:	.word	0xffffea78
    b7cc:	.word	0xffffe984

0000b7d0 <rb_recv_fd_buf>:
    b7d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b7d4:	add	fp, sp, #32
    b7d8:	sub	sp, sp, #140	; 0x8c
    b7dc:	mov	r6, r3
    b7e0:	mov	r4, #0
    b7e4:	ldr	r5, [fp, #4]
    b7e8:	str	r1, [fp, #-160]	; 0xffffff60
    b7ec:	str	r2, [fp, #-156]	; 0xffffff64
    b7f0:	sub	r2, fp, #160	; 0xa0
    b7f4:	str	r4, [fp, #-152]	; 0xffffff68
    b7f8:	str	r4, [fp, #-148]	; 0xffffff6c
    b7fc:	lsl	r3, r5, #2
    b800:	str	r2, [fp, #-144]	; 0xffffff70
    b804:	mov	r2, #1
    b808:	add	ip, r3, #12
    b80c:	add	r3, r3, #19
    b810:	str	r2, [fp, #-140]	; 0xffffff74
    b814:	bic	r3, r3, #7
    b818:	sub	sp, sp, r3
    b81c:	str	r4, [fp, #-128]	; 0xffffff80
    b820:	str	sp, [fp, #-136]	; 0xffffff78
    b824:	str	ip, [fp, #-132]	; 0xffffff7c
    b828:	bl	44b8 <rb_get_fd@plt>
    b82c:	mov	r2, r4
    b830:	sub	r1, fp, #152	; 0x98
    b834:	bl	4b0c <recvmsg@plt>
    b838:	subs	r7, r0, #0
    b83c:	ble	b88c <rb_recv_fd_buf+0xbc>
    b840:	ldr	r3, [fp, #-132]	; 0xffffff7c
    b844:	cmp	r3, r4
    b848:	beq	b928 <rb_recv_fd_buf+0x158>
    b84c:	ldr	r8, [fp, #-136]	; 0xffffff78
    b850:	cmp	r8, r4
    b854:	cmpne	r3, #11
    b858:	bls	b928 <rb_recv_fd_buf+0x158>
    b85c:	ldr	r3, [r8]
    b860:	add	r8, r8, #8
    b864:	ldr	r9, [pc, #200]	; b934 <rb_recv_fd_buf+0x164>
    b868:	ldr	sl, [pc, #200]	; b938 <rb_recv_fd_buf+0x168>
    b86c:	sub	r3, r3, #12
    b870:	lsr	r3, r3, #2
    b874:	add	r9, pc, r9
    b878:	cmp	r5, r3
    b87c:	add	sl, pc, sl
    b880:	movge	r5, r3
    b884:	cmp	r4, r5
    b888:	blt	b898 <rb_recv_fd_buf+0xc8>
    b88c:	mov	r0, r7
    b890:	sub	sp, fp, #32
    b894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b898:	ldr	r3, [r8, #4]!
    b89c:	sub	r1, fp, #124	; 0x7c
    b8a0:	mov	r0, r3
    b8a4:	str	r3, [fp, #-168]	; 0xffffff58
    b8a8:	bl	12b1c <__fstat>
    b8ac:	cmp	r0, #0
    b8b0:	ldr	r3, [fp, #-168]	; 0xffffff58
    b8b4:	bne	b900 <rb_recv_fd_buf+0x130>
    b8b8:	ldr	r2, [fp, #-108]	; 0xffffff94
    b8bc:	and	r2, r2, #61440	; 0xf000
    b8c0:	cmp	r2, #49152	; 0xc000
    b8c4:	moveq	r2, sl
    b8c8:	moveq	r1, #4
    b8cc:	beq	b8ec <rb_recv_fd_buf+0x11c>
    b8d0:	cmp	r2, #4096	; 0x1000
    b8d4:	beq	b90c <rb_recv_fd_buf+0x13c>
    b8d8:	cmp	r2, #32768	; 0x8000
    b8dc:	bne	b91c <rb_recv_fd_buf+0x14c>
    b8e0:	ldr	r2, [pc, #84]	; b93c <rb_recv_fd_buf+0x16c>
    b8e4:	mov	r1, #2
    b8e8:	add	r2, pc, r2
    b8ec:	mov	r0, r3
    b8f0:	bl	4a58 <rb_open@plt>
    b8f4:	str	r0, [r6, r4, lsl #2]
    b8f8:	add	r4, r4, #1
    b8fc:	b	b884 <rb_recv_fd_buf+0xb4>
    b900:	mov	r2, r9
    b904:	mov	r1, #64	; 0x40
    b908:	b	b8ec <rb_recv_fd_buf+0x11c>
    b90c:	ldr	r2, [pc, #44]	; b940 <rb_recv_fd_buf+0x170>
    b910:	mov	r1, #8
    b914:	add	r2, pc, r2
    b918:	b	b8ec <rb_recv_fd_buf+0x11c>
    b91c:	ldr	r2, [pc, #32]	; b944 <rb_recv_fd_buf+0x174>
    b920:	add	r2, pc, r2
    b924:	b	b904 <rb_recv_fd_buf+0x134>
    b928:	mov	r3, #0
    b92c:	str	r3, [r6]
    b930:	b	b88c <rb_recv_fd_buf+0xbc>
    b934:	.word	0x00007e5c
    b938:	.word	0x00007e63
    b93c:	.word	0x00007e05
    b940:	.word	0x00007db0
    b944:	.word	0x00007db0

0000b948 <rb_send_fd_buf>:
    b948:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b94c:	add	fp, sp, #32
    b950:	sub	sp, sp, #44	; 0x2c
    b954:	mov	r9, r3
    b958:	sub	r6, fp, #64	; 0x40
    b95c:	mov	r3, #48	; 0x30
    b960:	mov	r4, r2
    b964:	ldr	r8, [fp, #4]
    b968:	mov	r7, r0
    b96c:	mov	r5, r1
    b970:	mov	r2, #28
    b974:	mov	r1, #0
    b978:	strb	r3, [fp, #-73]	; 0xffffffb7
    b97c:	mov	r0, r6
    b980:	bl	45fc <memset@plt>
    b984:	mov	r1, #1
    b988:	cmp	r8, #0
    b98c:	subeq	r3, fp, #73	; 0x49
    b990:	str	r1, [fp, #-52]	; 0xffffffcc
    b994:	strne	r9, [fp, #-72]	; 0xffffffb8
    b998:	streq	r3, [fp, #-72]	; 0xffffffb8
    b99c:	moveq	r3, #1
    b9a0:	strne	r8, [fp, #-68]	; 0xffffffbc
    b9a4:	streq	r3, [fp, #-68]	; 0xffffffbc
    b9a8:	sub	r3, fp, #72	; 0x48
    b9ac:	cmp	r4, #0
    b9b0:	str	r3, [fp, #-56]	; 0xffffffc8
    b9b4:	ble	ba3c <rb_send_fd_buf+0xf4>
    b9b8:	add	r2, r4, r1
    b9bc:	mov	r8, sp
    b9c0:	lsl	r2, r2, #2
    b9c4:	add	r3, r2, #15
    b9c8:	add	r0, r2, #8
    b9cc:	bic	r3, r3, #7
    b9d0:	cmp	r0, #11
    b9d4:	sub	sp, sp, r3
    b9d8:	mov	sl, sp
    b9dc:	str	sp, [fp, #-48]	; 0xffffffd0
    b9e0:	str	r0, [fp, #-44]	; 0xffffffd4
    b9e4:	bls	ba54 <rb_send_fd_buf+0x10c>
    b9e8:	sub	r2, r2, #4
    b9ec:	mov	r9, sp
    b9f0:	str	r1, [sp, #4]
    b9f4:	add	r4, r5, r2
    b9f8:	str	r1, [sp, #8]
    b9fc:	str	r0, [r9], #8
    ba00:	ldr	r0, [r5], #4
    ba04:	bl	44b8 <rb_get_fd@plt>
    ba08:	str	r0, [r9, #4]!
    ba0c:	cmp	r5, r4
    ba10:	bne	ba00 <rb_send_fd_buf+0xb8>
    ba14:	ldr	r3, [sl]
    ba18:	mov	r0, r7
    ba1c:	str	r3, [fp, #-44]	; 0xffffffd4
    ba20:	bl	44b8 <rb_get_fd@plt>
    ba24:	mov	r2, #16384	; 0x4000
    ba28:	mov	r1, r6
    ba2c:	bl	46d4 <sendmsg@plt>
    ba30:	mov	sp, r8
    ba34:	sub	sp, fp, #32
    ba38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba3c:	mov	r0, r7
    ba40:	bl	44b8 <rb_get_fd@plt>
    ba44:	mov	r2, #16384	; 0x4000
    ba48:	mov	r1, r6
    ba4c:	bl	46d4 <sendmsg@plt>
    ba50:	b	ba34 <rb_send_fd_buf+0xec>
    ba54:	mov	r3, #0
    ba58:	str	r3, [r3, #4]
    ba5c:	udf	#0

0000ba60 <rb_ipv4_from_ipv6>:
    ba60:	push	{r4, r5, r6, lr}
    ba64:	mov	r5, r1
    ba68:	add	r6, r0, #8
    ba6c:	mov	r4, r0
    ba70:	mov	r2, #2
    ba74:	mov	r0, r6
    ba78:	ldr	r1, [pc, #108]	; baec <rb_ipv4_from_ipv6+0x8c>
    ba7c:	add	r1, pc, r1
    ba80:	bl	4428 <memcmp@plt>
    ba84:	cmp	r0, #0
    ba88:	ldreq	r3, [r4, #10]
    ba8c:	streq	r3, [r5, #4]
    ba90:	beq	bad4 <rb_ipv4_from_ipv6+0x74>
    ba94:	ldr	r1, [pc, #84]	; baf0 <rb_ipv4_from_ipv6+0x90>
    ba98:	mov	r2, #4
    ba9c:	mov	r0, r6
    baa0:	add	r1, pc, r1
    baa4:	add	r1, r1, #17
    baa8:	bl	4428 <memcmp@plt>
    baac:	cmp	r0, #0
    bab0:	bne	bae4 <rb_ipv4_from_ipv6+0x84>
    bab4:	add	r4, r4, #20
    bab8:	add	r3, r5, #4
    babc:	add	r1, r5, #8
    bac0:	ldrb	r2, [r4], #1
    bac4:	mvn	r2, r2
    bac8:	strb	r2, [r3], #1
    bacc:	cmp	r3, r1
    bad0:	bne	bac0 <rb_ipv4_from_ipv6+0x60>
    bad4:	mov	r3, #2
    bad8:	mov	r0, #1
    badc:	str	r3, [r5]
    bae0:	pop	{r4, r5, r6, pc}
    bae4:	mov	r0, #0
    bae8:	pop	{r4, r5, r6, pc}
    baec:	.word	0x00007c7d
    baf0:	.word	0x000079b7

0000baf4 <verify_accept_all_cb>:
    baf4:	mov	r0, #1
    baf8:	bx	lr

0000bafc <rb_ssl_timeout_cb>:
    bafc:	ldr	r3, [r0, #52]	; 0x34
    bb00:	push	{r0, r1, r4, lr}
    bb04:	mov	r1, #3
    bb08:	ldr	r2, [r3, #140]	; 0x8c
    bb0c:	str	r2, [sp]
    bb10:	ldr	r4, [r3, #132]	; 0x84
    bb14:	mov	r3, #0
    bb18:	mov	r2, r3
    bb1c:	blx	r4
    bb20:	add	sp, sp, #8
    bb24:	pop	{r4, pc}

0000bb28 <rb_ssl_last_err>:
    bb28:	push	{r4, lr}
    bb2c:	mov	r4, #0
    bb30:	bl	43d4 <ERR_get_error@plt>
    bb34:	cmp	r0, #0
    bb38:	bne	bb44 <rb_ssl_last_err+0x1c>
    bb3c:	mov	r0, r4
    bb40:	pop	{r4, pc}
    bb44:	mov	r4, r0
    bb48:	b	bb30 <rb_ssl_last_err+0x8>

0000bb4c <rb_ssl_strerror>:
    bb4c:	push	{r4, lr}
    bb50:	mov	r2, #512	; 0x200
    bb54:	ldr	r4, [pc, #16]	; bb6c <rb_ssl_strerror+0x20>
    bb58:	add	r4, pc, r4
    bb5c:	mov	r1, r4
    bb60:	bl	4578 <ERR_error_string_n@plt>
    bb64:	mov	r0, r4
    bb68:	pop	{r4, pc}
    bb6c:	.word	0x0002bec4

0000bb70 <make_certfp>:
    bb70:	push	{r4, r5, r6, r7, lr}
    bb74:	cmp	r2, #2
    bb78:	sub	sp, sp, #20
    bb7c:	mov	r6, r0
    bb80:	mov	r7, r1
    bb84:	ldr	r4, [pc, #240]	; bc7c <make_certfp+0x10c>
    bb88:	add	r4, pc, r4
    bb8c:	beq	bc48 <make_certfp+0xd8>
    bb90:	bgt	bbb0 <make_certfp+0x40>
    bb94:	cmp	r2, #0
    bb98:	beq	bbd8 <make_certfp+0x68>
    bb9c:	cmp	r2, #1
    bba0:	beq	bc38 <make_certfp+0xc8>
    bba4:	mov	r0, #0
    bba8:	add	sp, sp, #20
    bbac:	pop	{r4, r5, r6, r7, pc}
    bbb0:	movw	r3, #4097	; 0x1001
    bbb4:	cmp	r2, r3
    bbb8:	beq	bc58 <make_certfp+0xe8>
    bbbc:	movw	r3, #4098	; 0x1002
    bbc0:	cmp	r2, r3
    bbc4:	bne	bba4 <make_certfp+0x34>
    bbc8:	mov	r3, #64	; 0x40
    bbcc:	str	r3, [sp, #12]
    bbd0:	bl	4b78 <EVP_sha512@plt>
    bbd4:	b	bc64 <make_certfp+0xf4>
    bbd8:	mov	r3, #20
    bbdc:	str	r3, [sp, #12]
    bbe0:	bl	48c0 <EVP_sha1@plt>
    bbe4:	ldr	r3, [pc, #148]	; bc80 <make_certfp+0x110>
    bbe8:	mov	r5, r0
    bbec:	mov	r2, r6
    bbf0:	mov	r1, r5
    bbf4:	ldr	r0, [r4, r3]
    bbf8:	add	r3, sp, #12
    bbfc:	str	r3, [sp]
    bc00:	mov	r3, r7
    bc04:	bl	49e0 <ASN1_item_digest@plt>
    bc08:	cmp	r0, #1
    bc0c:	ldreq	r0, [sp, #12]
    bc10:	beq	bba8 <make_certfp+0x38>
    bc14:	bl	bb28 <rb_ssl_last_err>
    bc18:	bl	bb4c <rb_ssl_strerror>
    bc1c:	mov	r2, r0
    bc20:	ldr	r1, [pc, #92]	; bc84 <make_certfp+0x114>
    bc24:	ldr	r0, [pc, #92]	; bc88 <make_certfp+0x118>
    bc28:	add	r1, pc, r1
    bc2c:	add	r0, pc, r0
    bc30:	bl	48f0 <rb_lib_log@plt>
    bc34:	b	bba4 <make_certfp+0x34>
    bc38:	mov	r3, #32
    bc3c:	str	r3, [sp, #12]
    bc40:	bl	4ba8 <EVP_sha256@plt>
    bc44:	b	bbe4 <make_certfp+0x74>
    bc48:	mov	r3, #64	; 0x40
    bc4c:	str	r3, [sp, #12]
    bc50:	bl	4b78 <EVP_sha512@plt>
    bc54:	b	bbe4 <make_certfp+0x74>
    bc58:	mov	r3, #32
    bc5c:	str	r3, [sp, #12]
    bc60:	bl	4ba8 <EVP_sha256@plt>
    bc64:	mov	r5, r0
    bc68:	mov	r0, r6
    bc6c:	bl	450c <X509_get_X509_PUBKEY@plt>
    bc70:	mov	r6, r0
    bc74:	ldr	r3, [pc, #16]	; bc8c <make_certfp+0x11c>
    bc78:	b	bbec <make_certfp+0x7c>
    bc7c:	.word	0x00019470
    bc80:	.word	0x00000404
    bc84:	.word	0x00007db9
    bc88:	.word	0x00007f9b
    bc8c:	.word	0x00000410

0000bc90 <rb_ssl_read_or_write>:
    bc90:	push	{r4, r5, r6, r7, r8, lr}
    bc94:	mov	r7, r0
    bc98:	mov	r6, r2
    bc9c:	mov	r4, r1
    bca0:	mov	r5, r3
    bca4:	bl	bb28 <rb_ssl_last_err>
    bca8:	cmp	r7, #0
    bcac:	ldr	r2, [sp, #24]
    bcb0:	bne	bcf8 <rb_ssl_read_or_write+0x68>
    bcb4:	mov	r1, r6
    bcb8:	ldr	r0, [r4, #56]	; 0x38
    bcbc:	bl	474c <SSL_read@plt>
    bcc0:	cmp	r0, #0
    bcc4:	popge	{r4, r5, r6, r7, r8, pc}
    bcc8:	mov	r1, r0
    bccc:	ldr	r0, [r4, #56]	; 0x38
    bcd0:	bl	4c80 <SSL_get_error@plt>
    bcd4:	sub	r0, r0, #2
    bcd8:	cmp	r0, #4
    bcdc:	addls	pc, pc, r0, lsl #2
    bce0:	b	bd60 <rb_ssl_read_or_write+0xd0>
    bce4:	b	bd08 <rb_ssl_read_or_write+0x78>
    bce8:	b	bd1c <rb_ssl_read_or_write+0x8c>
    bcec:	b	bd60 <rb_ssl_read_or_write+0xd0>
    bcf0:	b	bd30 <rb_ssl_read_or_write+0xa0>
    bcf4:	b	bd68 <rb_ssl_read_or_write+0xd8>
    bcf8:	mov	r1, r5
    bcfc:	ldr	r0, [r4, #56]	; 0x38
    bd00:	bl	45cc <SSL_write@plt>
    bd04:	b	bcc0 <rb_ssl_read_or_write+0x30>
    bd08:	bl	4cbc <__errno_location@plt>
    bd0c:	mov	r3, #11
    bd10:	str	r3, [r0]
    bd14:	mvn	r0, #2
    bd18:	pop	{r4, r5, r6, r7, r8, pc}
    bd1c:	bl	4cbc <__errno_location@plt>
    bd20:	mov	r3, #11
    bd24:	str	r3, [r0]
    bd28:	mvn	r0, #3
    bd2c:	pop	{r4, r5, r6, r7, r8, pc}
    bd30:	bl	bb28 <rb_ssl_last_err>
    bd34:	cmp	r0, #0
    bd38:	streq	r0, [r4, #64]	; 0x40
    bd3c:	beq	bd70 <rb_ssl_read_or_write+0xe0>
    bd40:	cmp	r0, #0
    bd44:	str	r0, [r4, #64]	; 0x40
    bd48:	beq	bd70 <rb_ssl_read_or_write+0xe0>
    bd4c:	bl	4cbc <__errno_location@plt>
    bd50:	mov	r3, #5
    bd54:	str	r3, [r0]
    bd58:	mvn	r0, #1
    bd5c:	pop	{r4, r5, r6, r7, r8, pc}
    bd60:	bl	bb28 <rb_ssl_last_err>
    bd64:	b	bd40 <rb_ssl_read_or_write+0xb0>
    bd68:	mov	r0, #0
    bd6c:	pop	{r4, r5, r6, r7, r8, pc}
    bd70:	mvn	r0, #0
    bd74:	pop	{r4, r5, r6, r7, r8, pc}

0000bd78 <rb_malloc>:
    bd78:	push	{r4, lr}
    bd7c:	mov	r1, r0
    bd80:	mov	r0, #1
    bd84:	bl	45c0 <calloc@plt>
    bd88:	cmp	r0, #0
    bd8c:	popne	{r4, pc}
    bd90:	bl	495c <rb_outofmemory@plt>

0000bd94 <rb_ssl_accept_common>:
    bd94:	push	{r0, r1, r4, r5, r6, lr}
    bd98:	mov	r4, r0
    bd9c:	bl	bb28 <rb_ssl_last_err>
    bda0:	ldr	r0, [r4, #56]	; 0x38
    bda4:	bl	4794 <SSL_do_handshake@plt>
    bda8:	mov	r5, r0
    bdac:	mov	r1, r0
    bdb0:	ldr	r0, [r4, #56]	; 0x38
    bdb4:	bl	4c80 <SSL_get_error@plt>
    bdb8:	cmp	r5, #1
    bdbc:	bne	be2c <rb_ssl_accept_common+0x98>
    bdc0:	ldr	r3, [r4, #60]	; 0x3c
    bdc4:	mov	r0, r4
    bdc8:	add	r3, r3, #1
    bdcc:	str	r3, [r4, #60]	; 0x3c
    bdd0:	mov	r3, #0
    bdd4:	mov	r2, r3
    bdd8:	mov	r1, r3
    bddc:	bl	43bc <rb_settimeout@plt>
    bde0:	mov	r3, #0
    bde4:	mov	r0, r4
    bde8:	mov	r2, r3
    bdec:	mov	r1, #3
    bdf0:	bl	447c <rb_setselect@plt>
    bdf4:	ldr	r5, [r4, #52]	; 0x34
    bdf8:	mov	r1, #0
    bdfc:	mov	r0, r4
    be00:	ldr	r3, [r5, #140]	; 0x8c
    be04:	mov	r2, r5
    be08:	str	r1, [r4, #52]	; 0x34
    be0c:	str	r3, [sp]
    be10:	ldr	r3, [r5, #128]	; 0x80
    be14:	ldr	r6, [r5, #132]	; 0x84
    be18:	blx	r6
    be1c:	mov	r0, r5
    be20:	add	sp, sp, #8
    be24:	pop	{r4, r5, r6, lr}
    be28:	b	46c8 <free@plt>
    be2c:	cmn	r5, #1
    be30:	mov	r6, r0
    be34:	movne	r5, #0
    be38:	moveq	r5, #1
    be3c:	cmp	r0, #2
    be40:	movne	r3, #0
    be44:	andeq	r3, r5, #1
    be48:	cmp	r3, #0
    be4c:	beq	be70 <rb_ssl_accept_common+0xdc>
    be50:	ldr	r2, [pc, #120]	; bed0 <rb_ssl_accept_common+0x13c>
    be54:	mov	r3, #0
    be58:	mov	r1, #1
    be5c:	add	r2, pc, r2
    be60:	mov	r0, r4
    be64:	add	sp, sp, #8
    be68:	pop	{r4, r5, r6, lr}
    be6c:	b	447c <rb_setselect@plt>
    be70:	cmp	r0, #3
    be74:	movne	r5, #0
    be78:	andeq	r5, r5, #1
    be7c:	cmp	r5, #0
    be80:	beq	be94 <rb_ssl_accept_common+0x100>
    be84:	ldr	r2, [pc, #72]	; bed4 <rb_ssl_accept_common+0x140>
    be88:	mov	r1, #2
    be8c:	add	r2, pc, r2
    be90:	b	be60 <rb_ssl_accept_common+0xcc>
    be94:	bl	4cbc <__errno_location@plt>
    be98:	mov	r3, #5
    be9c:	mov	r1, #6
    bea0:	str	r3, [r0]
    bea4:	mov	r0, r4
    bea8:	ldr	r3, [r4, #52]	; 0x34
    beac:	str	r6, [r4, #64]	; 0x40
    beb0:	ldr	r2, [r3, #140]	; 0x8c
    beb4:	str	r2, [sp]
    beb8:	mov	r2, r5
    bebc:	ldr	r6, [r3, #132]	; 0x84
    bec0:	mov	r3, r5
    bec4:	blx	r6
    bec8:	add	sp, sp, #8
    becc:	pop	{r4, r5, r6, pc}
    bed0:	.word	0xffffff30
    bed4:	.word	0xffffff00

0000bed8 <rb_ssl_init_fd>:
    bed8:	push	{r4, r5, r6, lr}
    bedc:	mov	r4, r0
    bee0:	mov	r5, r1
    bee4:	bl	bb28 <rb_ssl_last_err>
    bee8:	ldr	r3, [pc, #116]	; bf64 <rb_ssl_init_fd+0x8c>
    beec:	add	r3, pc, r3
    bef0:	ldr	r0, [r3, #512]	; 0x200
    bef4:	bl	4704 <SSL_new@plt>
    bef8:	cmp	r0, #0
    befc:	str	r0, [r4, #56]	; 0x38
    bf00:	bne	bf34 <rb_ssl_init_fd+0x5c>
    bf04:	bl	bb28 <rb_ssl_last_err>
    bf08:	bl	bb4c <rb_ssl_strerror>
    bf0c:	ldr	r1, [pc, #84]	; bf68 <rb_ssl_init_fd+0x90>
    bf10:	mov	r2, r0
    bf14:	ldr	r0, [pc, #80]	; bf6c <rb_ssl_init_fd+0x94>
    bf18:	add	r1, pc, r1
    bf1c:	add	r1, r1, #12
    bf20:	add	r0, pc, r0
    bf24:	bl	48f0 <rb_lib_log@plt>
    bf28:	mov	r0, r4
    bf2c:	pop	{r4, r5, r6, lr}
    bf30:	b	483c <rb_close@plt>
    bf34:	cmp	r5, #1
    bf38:	beq	bf5c <rb_ssl_init_fd+0x84>
    bf3c:	bl	49a4 <SSL_set_accept_state@plt>
    bf40:	ldr	r5, [r4, #56]	; 0x38
    bf44:	mov	r0, r4
    bf48:	bl	44b8 <rb_get_fd@plt>
    bf4c:	mov	r1, r0
    bf50:	mov	r0, r5
    bf54:	pop	{r4, r5, r6, lr}
    bf58:	b	4638 <SSL_set_fd@plt>
    bf5c:	bl	4b3c <SSL_set_connect_state@plt>
    bf60:	b	bf40 <rb_ssl_init_fd+0x68>
    bf64:	.word	0x0002bb30
    bf68:	.word	0x00007ac9
    bf6c:	.word	0x00007cc0

0000bf70 <rb_ssl_connect_realcb>:
    bf70:	push	{r4, lr}
    bf74:	mov	r4, r2
    bf78:	ldr	r2, [r2]
    bf7c:	ldr	r3, [r0, #48]	; 0x30
    bf80:	str	r2, [r3, #260]	; 0x104
    bf84:	ldr	r2, [r4, #4]
    bf88:	str	r2, [r3, #264]	; 0x108
    bf8c:	bl	a0d8 <rb_connect_callback>
    bf90:	mov	r0, r4
    bf94:	pop	{r4, lr}
    bf98:	b	46c8 <free@plt>

0000bf9c <rb_ssl_tryconn_timeout_cb>:
    bf9c:	mov	r2, r1
    bfa0:	mov	r1, #3
    bfa4:	b	bf70 <rb_ssl_connect_realcb>

0000bfa8 <rb_ssl_connect_common>:
    bfa8:	push	{r4, r5, r6, r7, r8, lr}
    bfac:	mov	r4, r0
    bfb0:	mov	r5, r1
    bfb4:	bl	bb28 <rb_ssl_last_err>
    bfb8:	ldr	r0, [r4, #56]	; 0x38
    bfbc:	bl	4794 <SSL_do_handshake@plt>
    bfc0:	mov	r6, r0
    bfc4:	mov	r1, r0
    bfc8:	ldr	r0, [r4, #56]	; 0x38
    bfcc:	bl	4c80 <SSL_get_error@plt>
    bfd0:	cmp	r6, #1
    bfd4:	bne	c020 <rb_ssl_connect_common+0x78>
    bfd8:	ldr	r3, [r4, #60]	; 0x3c
    bfdc:	mov	r0, r4
    bfe0:	add	r3, r3, #1
    bfe4:	str	r3, [r4, #60]	; 0x3c
    bfe8:	mov	r3, #0
    bfec:	mov	r2, r3
    bff0:	mov	r1, r3
    bff4:	bl	43bc <rb_settimeout@plt>
    bff8:	mov	r3, #0
    bffc:	mov	r1, #3
    c000:	mov	r2, r3
    c004:	mov	r0, r4
    c008:	bl	447c <rb_setselect@plt>
    c00c:	mov	r2, r5
    c010:	mov	r1, #0
    c014:	mov	r0, r4
    c018:	pop	{r4, r5, r6, r7, r8, lr}
    c01c:	b	bf70 <rb_ssl_connect_realcb>
    c020:	cmn	r6, #1
    c024:	mov	r7, r0
    c028:	movne	r3, #0
    c02c:	moveq	r3, #1
    c030:	cmp	r0, #2
    c034:	cmneq	r6, #1
    c038:	bne	c058 <rb_ssl_connect_common+0xb0>
    c03c:	ldr	r2, [pc, #88]	; c09c <rb_ssl_connect_common+0xf4>
    c040:	mov	r3, r5
    c044:	mov	r1, #1
    c048:	add	r2, pc, r2
    c04c:	mov	r0, r4
    c050:	pop	{r4, r5, r6, r7, r8, lr}
    c054:	b	447c <rb_setselect@plt>
    c058:	cmp	r0, #3
    c05c:	movne	r3, #0
    c060:	andeq	r3, r3, #1
    c064:	cmp	r3, #0
    c068:	beq	c080 <rb_ssl_connect_common+0xd8>
    c06c:	ldr	r2, [pc, #44]	; c0a0 <rb_ssl_connect_common+0xf8>
    c070:	mov	r3, r5
    c074:	mov	r1, #2
    c078:	add	r2, pc, r2
    c07c:	b	c04c <rb_ssl_connect_common+0xa4>
    c080:	bl	4cbc <__errno_location@plt>
    c084:	mov	r3, #5
    c088:	mov	r2, r5
    c08c:	mov	r1, #6
    c090:	str	r3, [r0]
    c094:	str	r7, [r4, #64]	; 0x40
    c098:	b	c014 <rb_ssl_connect_common+0x6c>
    c09c:	.word	0xffffff58
    c0a0:	.word	0xffffff28

0000c0a4 <rb_ssl_tryconn>:
    c0a4:	cmp	r1, #0
    c0a8:	beq	c0b0 <rb_ssl_tryconn+0xc>
    c0ac:	b	bf70 <rb_ssl_connect_realcb>
    c0b0:	push	{r4, r5, r6, lr}
    c0b4:	mov	r5, r2
    c0b8:	mov	r4, r0
    c0bc:	ldrb	r3, [r0, #17]
    c0c0:	ldr	r2, [pc, #48]	; c0f8 <rb_ssl_tryconn+0x54>
    c0c4:	orr	r3, r3, #32
    c0c8:	add	r2, pc, r2
    c0cc:	strb	r3, [r0, #17]
    c0d0:	mov	r3, r5
    c0d4:	ldr	r1, [r5, #8]
    c0d8:	bl	43bc <rb_settimeout@plt>
    c0dc:	mov	r0, r4
    c0e0:	mov	r1, #1
    c0e4:	bl	bed8 <rb_ssl_init_fd>
    c0e8:	mov	r1, r5
    c0ec:	mov	r0, r4
    c0f0:	pop	{r4, r5, r6, lr}
    c0f4:	b	bfa8 <rb_ssl_connect_common>
    c0f8:	.word	0xfffffecc

0000c0fc <rb_ssl_shutdown>:
    c0fc:	push	{r4, r5, r6, lr}
    c100:	subs	r4, r0, #0
    c104:	popeq	{r4, r5, r6, pc}
    c108:	ldr	r3, [r4, #56]	; 0x38
    c10c:	cmp	r3, #0
    c110:	popeq	{r4, r5, r6, pc}
    c114:	mov	r5, #4
    c118:	bl	bb28 <rb_ssl_last_err>
    c11c:	ldr	r0, [r4, #56]	; 0x38
    c120:	bl	4a7c <SSL_shutdown@plt>
    c124:	mov	r6, r0
    c128:	mov	r1, r0
    c12c:	ldr	r0, [r4, #56]	; 0x38
    c130:	bl	4c80 <SSL_get_error@plt>
    c134:	cmp	r6, #0
    c138:	bge	c150 <rb_ssl_shutdown+0x54>
    c13c:	sub	r0, r0, #2
    c140:	cmp	r0, #1
    c144:	bhi	c150 <rb_ssl_shutdown+0x54>
    c148:	subs	r5, r5, #1
    c14c:	bne	c11c <rb_ssl_shutdown+0x20>
    c150:	ldr	r0, [r4, #56]	; 0x38
    c154:	bl	4938 <SSL_free@plt>
    c158:	mov	r3, #0
    c15c:	str	r3, [r4, #56]	; 0x38
    c160:	pop	{r4, r5, r6, pc}

0000c164 <rb_init_ssl>:
    c164:	ldr	r1, [pc, #28]	; c188 <rb_init_ssl+0x24>
    c168:	push	{r4, lr}
    c16c:	ldr	r0, [pc, #24]	; c18c <rb_init_ssl+0x28>
    c170:	add	r1, pc, r1
    c174:	add	r1, r1, #27
    c178:	add	r0, pc, r0
    c17c:	bl	48f0 <rb_lib_log@plt>
    c180:	mov	r0, #1
    c184:	pop	{r4, pc}
    c188:	.word	0x00007871
    c18c:	.word	0x00007a78

0000c190 <rb_setup_ssl_server>:
    c190:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
    c194:	subs	r5, r0, #0
    c198:	bne	c1bc <rb_setup_ssl_server+0x2c>
    c19c:	ldr	r1, [pc, #764]	; c4a0 <rb_setup_ssl_server+0x310>
    c1a0:	ldr	r0, [pc, #764]	; c4a4 <rb_setup_ssl_server+0x314>
    c1a4:	add	r1, pc, r1
    c1a8:	add	r1, r1, #436	; 0x1b4
    c1ac:	add	r1, r1, #3
    c1b0:	add	r0, pc, r0
    c1b4:	bl	48f0 <rb_lib_log@plt>
    c1b8:	b	c220 <rb_setup_ssl_server+0x90>
    c1bc:	cmp	r1, #0
    c1c0:	mov	r7, r1
    c1c4:	moveq	r7, r5
    c1c8:	cmp	r3, #0
    c1cc:	mov	r8, r2
    c1d0:	mov	r6, r3
    c1d4:	ldreq	r6, [pc, #716]	; c4a8 <rb_setup_ssl_server+0x318>
    c1d8:	addeq	r6, pc, r6
    c1dc:	addeq	r6, r6, #39	; 0x27
    c1e0:	bl	bb28 <rb_ssl_last_err>
    c1e4:	bl	4344 <TLS_method@plt>
    c1e8:	bl	4af4 <SSL_CTX_new@plt>
    c1ec:	subs	r4, r0, #0
    c1f0:	bne	c22c <rb_setup_ssl_server+0x9c>
    c1f4:	bl	bb28 <rb_ssl_last_err>
    c1f8:	bl	bb4c <rb_ssl_strerror>
    c1fc:	ldr	r1, [pc, #680]	; c4ac <rb_setup_ssl_server+0x31c>
    c200:	mov	r2, r0
    c204:	ldr	r0, [pc, #676]	; c4b0 <rb_setup_ssl_server+0x320>
    c208:	add	r1, pc, r1
    c20c:	add	r1, r1, #436	; 0x1b4
    c210:	add	r1, r1, #3
    c214:	add	r0, pc, r0
    c218:	bl	48f0 <rb_lib_log@plt>
    c21c:	mov	r5, #0
    c220:	mov	r0, r5
    c224:	add	sp, sp, #8
    c228:	pop	{r4, r5, r6, r7, r8, pc}
    c22c:	mov	r1, r5
    c230:	bl	480c <SSL_CTX_use_certificate_chain_file@plt>
    c234:	cmp	r0, #1
    c238:	mov	r2, r0
    c23c:	beq	c278 <rb_setup_ssl_server+0xe8>
    c240:	bl	bb28 <rb_ssl_last_err>
    c244:	bl	bb4c <rb_ssl_strerror>
    c248:	ldr	r1, [pc, #612]	; c4b4 <rb_setup_ssl_server+0x324>
    c24c:	mov	r3, r0
    c250:	mov	r2, r5
    c254:	ldr	r0, [pc, #604]	; c4b8 <rb_setup_ssl_server+0x328>
    c258:	add	r1, pc, r1
    c25c:	add	r1, r1, #436	; 0x1b4
    c260:	add	r1, r1, #3
    c264:	add	r0, pc, r0
    c268:	bl	48f0 <rb_lib_log@plt>
    c26c:	mov	r0, r4
    c270:	bl	4434 <SSL_CTX_free@plt>
    c274:	b	c21c <rb_setup_ssl_server+0x8c>
    c278:	mov	r1, r7
    c27c:	mov	r0, r4
    c280:	bl	48fc <SSL_CTX_use_PrivateKey_file@plt>
    c284:	cmp	r0, #1
    c288:	beq	c2b8 <rb_setup_ssl_server+0x128>
    c28c:	bl	bb28 <rb_ssl_last_err>
    c290:	bl	bb4c <rb_ssl_strerror>
    c294:	ldr	r1, [pc, #544]	; c4bc <rb_setup_ssl_server+0x32c>
    c298:	mov	r3, r0
    c29c:	mov	r2, r7
    c2a0:	ldr	r0, [pc, #536]	; c4c0 <rb_setup_ssl_server+0x330>
    c2a4:	add	r1, pc, r1
    c2a8:	add	r1, r1, #436	; 0x1b4
    c2ac:	add	r1, r1, #3
    c2b0:	add	r0, pc, r0
    c2b4:	b	c268 <rb_setup_ssl_server+0xd8>
    c2b8:	cmp	r8, #0
    c2bc:	bne	c314 <rb_setup_ssl_server+0x184>
    c2c0:	ldr	r1, [pc, #508]	; c4c4 <rb_setup_ssl_server+0x334>
    c2c4:	ldr	r0, [pc, #508]	; c4c8 <rb_setup_ssl_server+0x338>
    c2c8:	add	r1, pc, r1
    c2cc:	add	r1, r1, #436	; 0x1b4
    c2d0:	add	r1, r1, #3
    c2d4:	add	r0, pc, r0
    c2d8:	bl	48f0 <rb_lib_log@plt>
    c2dc:	mov	r1, r6
    c2e0:	mov	r0, r4
    c2e4:	bl	43c8 <SSL_CTX_set_cipher_list@plt>
    c2e8:	cmp	r0, #1
    c2ec:	mov	r5, r0
    c2f0:	beq	c3d8 <rb_setup_ssl_server+0x248>
    c2f4:	ldr	r1, [pc, #464]	; c4cc <rb_setup_ssl_server+0x33c>
    c2f8:	ldr	r0, [pc, #464]	; c4d0 <rb_setup_ssl_server+0x340>
    c2fc:	add	r1, pc, r1
    c300:	add	r1, r1, #436	; 0x1b4
    c304:	add	r1, r1, #3
    c308:	add	r0, pc, r0
    c30c:	bl	48f0 <rb_lib_log@plt>
    c310:	b	c26c <rb_setup_ssl_server+0xdc>
    c314:	ldr	r1, [pc, #440]	; c4d4 <rb_setup_ssl_server+0x344>
    c318:	mov	r0, r8
    c31c:	mov	r5, #0
    c320:	add	r1, pc, r1
    c324:	bl	45e4 <fopen@plt>
    c328:	subs	r7, r0, #0
    c32c:	str	r5, [sp, #4]
    c330:	bne	c368 <rb_setup_ssl_server+0x1d8>
    c334:	bl	4cbc <__errno_location@plt>
    c338:	ldr	r0, [r0]
    c33c:	bl	4374 <strerror@plt>
    c340:	ldr	r1, [pc, #400]	; c4d8 <rb_setup_ssl_server+0x348>
    c344:	mov	r3, r0
    c348:	mov	r2, r8
    c34c:	ldr	r0, [pc, #392]	; c4dc <rb_setup_ssl_server+0x34c>
    c350:	add	r1, pc, r1
    c354:	add	r1, r1, #436	; 0x1b4
    c358:	add	r1, r1, #3
    c35c:	add	r0, pc, r0
    c360:	bl	48f0 <rb_lib_log@plt>
    c364:	b	c2dc <rb_setup_ssl_server+0x14c>
    c368:	mov	r3, r5
    c36c:	mov	r2, r5
    c370:	add	r1, sp, #4
    c374:	bl	49bc <PEM_read_DHparams@plt>
    c378:	cmp	r0, #0
    c37c:	bne	c3b8 <rb_setup_ssl_server+0x228>
    c380:	bl	bb28 <rb_ssl_last_err>
    c384:	bl	bb4c <rb_ssl_strerror>
    c388:	ldr	r1, [pc, #336]	; c4e0 <rb_setup_ssl_server+0x350>
    c38c:	mov	r3, r0
    c390:	mov	r2, r8
    c394:	ldr	r0, [pc, #328]	; c4e4 <rb_setup_ssl_server+0x354>
    c398:	add	r1, pc, r1
    c39c:	add	r1, r1, #436	; 0x1b4
    c3a0:	add	r1, r1, #3
    c3a4:	add	r0, pc, r0
    c3a8:	bl	48f0 <rb_lib_log@plt>
    c3ac:	mov	r0, r7
    c3b0:	bl	4554 <fclose@plt>
    c3b4:	b	c2dc <rb_setup_ssl_server+0x14c>
    c3b8:	mov	r2, r5
    c3bc:	mov	r1, #3
    c3c0:	ldr	r3, [sp, #4]
    c3c4:	mov	r0, r4
    c3c8:	bl	4644 <SSL_CTX_ctrl@plt>
    c3cc:	ldr	r0, [sp, #4]
    c3d0:	bl	4a40 <DH_free@plt>
    c3d4:	b	c3ac <rb_setup_ssl_server+0x21c>
    c3d8:	mov	r3, #0
    c3dc:	mov	r1, #44	; 0x2c
    c3e0:	mov	r2, r3
    c3e4:	mov	r0, r4
    c3e8:	bl	4644 <SSL_CTX_ctrl@plt>
    c3ec:	ldr	r2, [pc, #244]	; c4e8 <rb_setup_ssl_server+0x358>
    c3f0:	mov	r1, #5
    c3f4:	mov	r0, r4
    c3f8:	add	r2, pc, r2
    c3fc:	bl	4cec <SSL_CTX_set_verify@plt>
    c400:	mov	r1, #2048	; 0x800
    c404:	mov	r0, r4
    c408:	bl	44e8 <SSL_CTX_clear_options@plt>
    c40c:	mov	r1, #67108864	; 0x4000000
    c410:	mov	r0, r4
    c414:	bl	4824 <SSL_CTX_set_options@plt>
    c418:	mov	r1, #16384	; 0x4000
    c41c:	mov	r0, r4
    c420:	bl	4824 <SSL_CTX_set_options@plt>
    c424:	mov	r1, #4194304	; 0x400000
    c428:	mov	r0, r4
    c42c:	bl	4824 <SSL_CTX_set_options@plt>
    c430:	mov	r1, #0
    c434:	mov	r0, r4
    c438:	bl	4824 <SSL_CTX_set_options@plt>
    c43c:	mov	r1, #0
    c440:	mov	r0, r4
    c444:	bl	4824 <SSL_CTX_set_options@plt>
    c448:	ldr	r3, [pc, #156]	; c4ec <rb_setup_ssl_server+0x35c>
    c44c:	mov	r2, #0
    c450:	mov	r1, #92	; 0x5c
    c454:	mov	r0, r4
    c458:	add	r3, pc, r3
    c45c:	bl	4644 <SSL_CTX_ctrl@plt>
    c460:	ldr	r3, [pc, #136]	; c4f0 <rb_setup_ssl_server+0x360>
    c464:	add	r3, pc, r3
    c468:	ldr	r0, [r3, #512]	; 0x200
    c46c:	cmp	r0, #0
    c470:	beq	c478 <rb_setup_ssl_server+0x2e8>
    c474:	bl	4434 <SSL_CTX_free@plt>
    c478:	ldr	r3, [pc, #116]	; c4f4 <rb_setup_ssl_server+0x364>
    c47c:	ldr	r1, [pc, #116]	; c4f8 <rb_setup_ssl_server+0x368>
    c480:	ldr	r0, [pc, #116]	; c4fc <rb_setup_ssl_server+0x36c>
    c484:	add	r3, pc, r3
    c488:	add	r1, pc, r1
    c48c:	str	r4, [r3, #512]	; 0x200
    c490:	add	r1, r1, #436	; 0x1b4
    c494:	add	r1, r1, #3
    c498:	add	r0, pc, r0
    c49c:	b	c1b4 <rb_setup_ssl_server+0x24>
    c4a0:	.word	0x0000783d
    c4a4:	.word	0x00007a60
    c4a8:	.word	0x00007809
    c4ac:	.word	0x000077d9
    c4b0:	.word	0x00007a1e
    c4b4:	.word	0x00007789
    c4b8:	.word	0x000079e2
    c4bc:	.word	0x0000773d
    c4c0:	.word	0x000079c8
    c4c4:	.word	0x00007719
    c4c8:	.word	0x000079cf
    c4cc:	.word	0x000076e5
    c4d0:	.word	0x000079f5
    c4d4:	.word	0x00007ed8
    c4d8:	.word	0x00007691
    c4dc:	.word	0x0000796b
    c4e0:	.word	0x00007649
    c4e4:	.word	0x00007938
    c4e8:	.word	0xfffff6f4
    c4ec:	.word	0x00019004
    c4f0:	.word	0x0002b5b8
    c4f4:	.word	0x0002b598
    c4f8:	.word	0x00007559
    c4fc:	.word	0x000078a2

0000c500 <rb_init_prng>:
    c500:	push	{r4, r5, r6, lr}
    c504:	mov	r5, r1
    c508:	mov	r4, r0
    c50c:	bl	bb28 <rb_ssl_last_err>
    c510:	cmp	r5, #0
    c514:	bne	c554 <rb_init_prng+0x54>
    c518:	mvn	r1, #0
    c51c:	mov	r0, r4
    c520:	bl	4404 <RAND_load_file@plt>
    c524:	cmp	r0, #0
    c528:	bge	c554 <rb_init_prng+0x54>
    c52c:	bl	bb28 <rb_ssl_last_err>
    c530:	bl	bb4c <rb_ssl_strerror>
    c534:	ldr	r1, [pc, #124]	; c5b8 <rb_init_prng+0xb8>
    c538:	mov	r2, r0
    c53c:	ldr	r0, [pc, #120]	; c5bc <rb_init_prng+0xbc>
    c540:	add	r1, pc, r1
    c544:	add	r1, r1, #456	; 0x1c8
    c548:	add	r1, r1, #3
    c54c:	add	r0, pc, r0
    c550:	bl	48f0 <rb_lib_log@plt>
    c554:	bl	4b90 <RAND_status@plt>
    c558:	cmp	r0, #1
    c55c:	mov	r4, r0
    c560:	beq	c598 <rb_init_prng+0x98>
    c564:	bl	bb28 <rb_ssl_last_err>
    c568:	bl	bb4c <rb_ssl_strerror>
    c56c:	ldr	r1, [pc, #76]	; c5c0 <rb_init_prng+0xc0>
    c570:	mov	r2, r0
    c574:	mov	r4, #0
    c578:	ldr	r0, [pc, #68]	; c5c4 <rb_init_prng+0xc4>
    c57c:	add	r1, pc, r1
    c580:	add	r1, r1, #456	; 0x1c8
    c584:	add	r1, r1, #3
    c588:	add	r0, pc, r0
    c58c:	bl	48f0 <rb_lib_log@plt>
    c590:	mov	r0, r4
    c594:	pop	{r4, r5, r6, pc}
    c598:	ldr	r1, [pc, #40]	; c5c8 <rb_init_prng+0xc8>
    c59c:	ldr	r0, [pc, #40]	; c5cc <rb_init_prng+0xcc>
    c5a0:	add	r1, pc, r1
    c5a4:	add	r1, r1, #456	; 0x1c8
    c5a8:	add	r1, r1, #3
    c5ac:	add	r0, pc, r0
    c5b0:	bl	48f0 <rb_lib_log@plt>
    c5b4:	b	c590 <rb_init_prng+0x90>
    c5b8:	.word	0x000074a1
    c5bc:	.word	0x0000780f
    c5c0:	.word	0x00007465
    c5c4:	.word	0x000077ea
    c5c8:	.word	0x00007441
    c5cc:	.word	0x000077da

0000c5d0 <rb_get_random>:
    c5d0:	push	{r4, r5, r6, lr}
    c5d4:	mov	r4, r0
    c5d8:	mov	r5, r1
    c5dc:	bl	bb28 <rb_ssl_last_err>
    c5e0:	mov	r1, r5
    c5e4:	mov	r0, r4
    c5e8:	bl	4ab8 <RAND_bytes@plt>
    c5ec:	cmp	r0, #1
    c5f0:	popeq	{r4, r5, r6, pc}
    c5f4:	bl	bb28 <rb_ssl_last_err>
    c5f8:	bl	bb4c <rb_ssl_strerror>
    c5fc:	ldr	r1, [pc, #28]	; c620 <rb_get_random+0x50>
    c600:	mov	r2, r0
    c604:	ldr	r0, [pc, #24]	; c624 <rb_get_random+0x54>
    c608:	add	r1, pc, r1
    c60c:	add	r1, r1, #472	; 0x1d8
    c610:	add	r0, pc, r0
    c614:	bl	48f0 <rb_lib_log@plt>
    c618:	mov	r0, #0
    c61c:	pop	{r4, r5, r6, pc}
    c620:	.word	0x000073d9
    c624:	.word	0x0000778b

0000c628 <rb_get_ssl_strerror>:
    c628:	ldr	r0, [r0, #64]	; 0x40
    c62c:	b	bb4c <rb_ssl_strerror>

0000c630 <rb_get_ssl_certfp>:
    c630:	push	{r4, r5, r6, r7, r8, lr}
    c634:	subs	r4, r0, #0
    c638:	bne	c648 <rb_get_ssl_certfp+0x18>
    c63c:	mov	r4, #0
    c640:	mov	r0, r4
    c644:	pop	{r4, r5, r6, r7, r8, pc}
    c648:	ldr	r0, [r4, #56]	; 0x38
    c64c:	cmp	r0, #0
    c650:	beq	c63c <rb_get_ssl_certfp+0xc>
    c654:	mov	r6, r2
    c658:	mov	r5, r1
    c65c:	bl	49f8 <SSL_get_peer_certificate@plt>
    c660:	subs	r7, r0, #0
    c664:	beq	c63c <rb_get_ssl_certfp+0xc>
    c668:	ldr	r0, [r4, #56]	; 0x38
    c66c:	bl	4a1c <SSL_get_verify_result@plt>
    c670:	cmp	r0, #27
    c674:	movhi	r4, #0
    c678:	bhi	c6a0 <rb_get_ssl_certfp+0x70>
    c67c:	ldr	r4, [pc, #40]	; c6ac <rb_get_ssl_certfp+0x7c>
    c680:	mov	r3, #1
    c684:	ands	r4, r4, r3, lsl r0
    c688:	beq	c6a0 <rb_get_ssl_certfp+0x70>
    c68c:	mov	r2, r6
    c690:	mov	r1, r5
    c694:	mov	r0, r7
    c698:	bl	bb70 <make_certfp>
    c69c:	mov	r4, r0
    c6a0:	mov	r0, r7
    c6a4:	bl	4c38 <X509_free@plt>
    c6a8:	b	c640 <rb_get_ssl_certfp+0x10>
    c6ac:	.word	0x083c0001

0000c6b0 <rb_get_ssl_certfp_file>:
    c6b0:	push	{r4, r5, r6, r7, r8, lr}
    c6b4:	mov	r4, r1
    c6b8:	mov	r7, r2
    c6bc:	ldr	r1, [pc, #96]	; c724 <rb_get_ssl_certfp_file+0x74>
    c6c0:	add	r1, pc, r1
    c6c4:	bl	45e4 <fopen@plt>
    c6c8:	subs	r5, r0, #0
    c6cc:	mvneq	r4, #0
    c6d0:	beq	c6f8 <rb_get_ssl_certfp_file+0x48>
    c6d4:	mov	r3, #0
    c6d8:	mov	r2, r3
    c6dc:	mov	r1, r3
    c6e0:	bl	47e8 <PEM_read_X509@plt>
    c6e4:	subs	r6, r0, #0
    c6e8:	bne	c700 <rb_get_ssl_certfp_file+0x50>
    c6ec:	mov	r0, r5
    c6f0:	mov	r4, r6
    c6f4:	bl	4554 <fclose@plt>
    c6f8:	mov	r0, r4
    c6fc:	pop	{r4, r5, r6, r7, r8, pc}
    c700:	mov	r1, r4
    c704:	mov	r2, r7
    c708:	bl	bb70 <make_certfp>
    c70c:	mov	r4, r0
    c710:	mov	r0, r6
    c714:	bl	4c38 <X509_free@plt>
    c718:	mov	r0, r5
    c71c:	bl	4554 <fclose@plt>
    c720:	b	c6f8 <rb_get_ssl_certfp_file+0x48>
    c724:	.word	0x00007b38

0000c728 <rb_get_ssl_info>:
    c728:	push	{r4, r5, r6, r7, lr}
    c72c:	sub	sp, sp, #20
    c730:	mov	r4, r0
    c734:	mov	r5, r1
    c738:	ldr	r6, [pc, #112]	; c7b0 <rb_get_ssl_info+0x88>
    c73c:	bl	46a4 <OpenSSL_version_num@plt>
    c740:	cmp	r0, r6
    c744:	bne	c774 <rb_get_ssl_info+0x4c>
    c748:	ldr	r2, [pc, #100]	; c7b4 <rb_get_ssl_info+0x8c>
    c74c:	mov	r3, r0
    c750:	mov	r1, r5
    c754:	mov	r0, r4
    c758:	add	r2, pc, r2
    c75c:	str	r2, [sp]
    c760:	ldr	r2, [pc, #80]	; c7b8 <rb_get_ssl_info+0x90>
    c764:	add	r2, pc, r2
    c768:	bl	4b84 <snprintf@plt>
    c76c:	add	sp, sp, #20
    c770:	pop	{r4, r5, r6, r7, pc}
    c774:	bl	46a4 <OpenSSL_version_num@plt>
    c778:	mov	r7, r0
    c77c:	mov	r0, #0
    c780:	bl	4c68 <OpenSSL_version@plt>
    c784:	ldr	r3, [pc, #48]	; c7bc <rb_get_ssl_info+0x94>
    c788:	mov	r1, r5
    c78c:	str	r0, [sp, #8]
    c790:	mov	r0, r4
    c794:	ldr	r2, [pc, #36]	; c7c0 <rb_get_ssl_info+0x98>
    c798:	add	r3, pc, r3
    c79c:	add	r2, pc, r2
    c7a0:	stm	sp, {r3, r7}
    c7a4:	mov	r3, r6
    c7a8:	bl	4b84 <snprintf@plt>
    c7ac:	b	c76c <rb_get_ssl_info+0x44>
    c7b0:	.word	0x1010104f
    c7b4:	.word	0x0000767a
    c7b8:	.word	0x0000764a
    c7bc:	.word	0x0000763a
    c7c0:	.word	0x00007652

0000c7c4 <rb_ssl_get_cipher>:
    c7c4:	push	{r0, r1, r2, r4, r5, lr}
    c7c8:	subs	r4, r0, #0
    c7cc:	beq	c818 <rb_ssl_get_cipher+0x54>
    c7d0:	ldr	r0, [r4, #56]	; 0x38
    c7d4:	cmp	r0, #0
    c7d8:	beq	c81c <rb_ssl_get_cipher+0x58>
    c7dc:	bl	4c8c <SSL_get_version@plt>
    c7e0:	mov	r5, r0
    c7e4:	ldr	r0, [r4, #56]	; 0x38
    c7e8:	bl	44f4 <SSL_get_current_cipher@plt>
    c7ec:	ldr	r4, [pc, #48]	; c824 <rb_ssl_get_cipher+0x60>
    c7f0:	bl	468c <SSL_CIPHER_get_name@plt>
    c7f4:	ldr	r2, [pc, #44]	; c828 <rb_ssl_get_cipher+0x64>
    c7f8:	mov	r3, r5
    c7fc:	mov	r1, #512	; 0x200
    c800:	str	r0, [sp]
    c804:	add	r4, pc, r4
    c808:	add	r4, r4, #516	; 0x204
    c80c:	add	r2, pc, r2
    c810:	mov	r0, r4
    c814:	bl	4b84 <snprintf@plt>
    c818:	mov	r0, r4
    c81c:	add	sp, sp, #12
    c820:	pop	{r4, r5, pc}
    c824:	.word	0x0002b218
    c828:	.word	0x00007615

0000c82c <rb_ssl_read>:
    c82c:	mov	r3, #0
    c830:	push	{r0, r1, r2, lr}
    c834:	str	r2, [sp]
    c838:	mov	r2, r1
    c83c:	mov	r1, r0
    c840:	mov	r0, r3
    c844:	bl	bc90 <rb_ssl_read_or_write>
    c848:	add	sp, sp, #12
    c84c:	pop	{pc}		; (ldr pc, [sp], #4)

0000c850 <rb_ssl_write>:
    c850:	push	{r0, r1, r2, lr}
    c854:	mov	r3, r1
    c858:	mov	r1, r0
    c85c:	mov	r0, #1
    c860:	str	r2, [sp]
    c864:	mov	r2, #0
    c868:	bl	bc90 <rb_ssl_read_or_write>
    c86c:	add	sp, sp, #12
    c870:	pop	{pc}		; (ldr pc, [sp], #4)

0000c874 <rb_supports_ssl>:
    c874:	mov	r0, #1
    c878:	bx	lr

0000c87c <rb_ssl_handshake_count>:
    c87c:	ldr	r0, [r0, #60]	; 0x3c
    c880:	bx	lr

0000c884 <rb_ssl_clear_handshake_count>:
    c884:	mov	r3, #0
    c888:	str	r3, [r0, #60]	; 0x3c
    c88c:	bx	lr

0000c890 <rb_ssl_start_accepted>:
    c890:	push	{r4, r5, r6, r7, r8, lr}
    c894:	mov	r6, r3
    c898:	mov	r4, r0
    c89c:	mov	r5, r2
    c8a0:	mov	r7, r1
    c8a4:	ldrb	r3, [r0, #17]
    c8a8:	mov	r0, #144	; 0x90
    c8ac:	orr	r3, r3, #32
    c8b0:	strb	r3, [r4, #17]
    c8b4:	bl	bd78 <rb_malloc>
    c8b8:	mov	r2, #128	; 0x80
    c8bc:	str	r0, [r4, #52]	; 0x34
    c8c0:	str	r5, [r0, #140]	; 0x8c
    c8c4:	mov	r5, #0
    c8c8:	mov	r1, r5
    c8cc:	str	r5, [r0, #128]	; 0x80
    c8d0:	str	r7, [r0, #132]	; 0x84
    c8d4:	bl	45fc <memset@plt>
    c8d8:	ldr	r2, [pc, #44]	; c90c <rb_ssl_start_accepted+0x7c>
    c8dc:	mov	r3, r5
    c8e0:	mov	r1, r6
    c8e4:	mov	r0, r4
    c8e8:	add	r2, pc, r2
    c8ec:	bl	43bc <rb_settimeout@plt>
    c8f0:	mov	r1, r5
    c8f4:	mov	r0, r4
    c8f8:	bl	bed8 <rb_ssl_init_fd>
    c8fc:	mov	r1, r5
    c900:	mov	r0, r4
    c904:	pop	{r4, r5, r6, r7, r8, lr}
    c908:	b	bd94 <rb_ssl_accept_common>
    c90c:	.word	0xfffff20c

0000c910 <rb_ssl_accept_setup>:
    c910:	push	{r4, r5, r6, r7, r8, lr}
    c914:	mov	r5, r3
    c918:	mov	r4, r1
    c91c:	mov	r7, r0
    c920:	mov	r0, #144	; 0x90
    c924:	mov	r6, r2
    c928:	ldrb	r3, [r1, #17]
    c92c:	orr	r3, r3, #32
    c930:	strb	r3, [r1, #17]
    c934:	bl	bd78 <rb_malloc>
    c938:	str	r0, [r4, #52]	; 0x34
    c93c:	ldr	r2, [r7, #52]	; 0x34
    c940:	ldr	r1, [r2, #132]	; 0x84
    c944:	ldr	r2, [r2, #140]	; 0x8c
    c948:	str	r5, [r0, #128]	; 0x80
    c94c:	str	r1, [r0, #132]	; 0x84
    c950:	mov	r1, #0
    c954:	str	r2, [r0, #140]	; 0x8c
    c958:	mov	r2, #128	; 0x80
    c95c:	bl	45fc <memset@plt>
    c960:	mov	r2, r5
    c964:	mov	r1, r6
    c968:	bl	47dc <memcpy@plt>
    c96c:	ldr	r2, [pc, #44]	; c9a0 <rb_ssl_accept_setup+0x90>
    c970:	mov	r0, r4
    c974:	mov	r3, #0
    c978:	mov	r1, #10
    c97c:	add	r2, pc, r2
    c980:	bl	43bc <rb_settimeout@plt>
    c984:	mov	r0, r4
    c988:	mov	r1, #0
    c98c:	bl	bed8 <rb_ssl_init_fd>
    c990:	mov	r0, r4
    c994:	mov	r1, #0
    c998:	pop	{r4, r5, r6, r7, r8, lr}
    c99c:	b	bd94 <rb_ssl_accept_common>
    c9a0:	.word	0xfffff178

0000c9a4 <rb_ssl_listen>:
    c9a4:	push	{r4, lr}
    c9a8:	mov	r4, r0
    c9ac:	bl	4bcc <rb_listen@plt>
    c9b0:	mov	r3, #52	; 0x34
    c9b4:	strb	r3, [r4, #17]
    c9b8:	pop	{r4, pc}

0000c9bc <rb_connect_tcp_ssl>:
    c9bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c9c0:	subs	r4, r0, #0
    c9c4:	ldr	r9, [sp, #32]
    c9c8:	ldr	r8, [sp, #36]	; 0x24
    c9cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    c9d0:	mov	r0, #12
    c9d4:	mov	r7, r3
    c9d8:	mov	r6, r2
    c9dc:	mov	r5, r1
    c9e0:	bl	bd78 <rb_malloc>
    c9e4:	ldr	r3, [pc, #36]	; ca10 <rb_connect_tcp_ssl+0x54>
    c9e8:	mov	r2, r6
    c9ec:	mov	r1, r5
    c9f0:	stm	r0, {r7, r9}
    c9f4:	str	r8, [r0, #8]
    c9f8:	str	r0, [sp, #32]
    c9fc:	mov	r0, r4
    ca00:	str	r8, [sp, #36]	; 0x24
    ca04:	add	r3, pc, r3
    ca08:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    ca0c:	b	43f8 <rb_connect_tcp@plt>
    ca10:	.word	0xfffff698

0000ca14 <rb_ssl_start_connected>:
    ca14:	push	{r4, r5, r6, r7, r8, lr}
    ca18:	subs	r4, r0, #0
    ca1c:	popeq	{r4, r5, r6, r7, r8, pc}
    ca20:	mov	r0, #12
    ca24:	mov	r6, r2
    ca28:	mov	r7, r1
    ca2c:	mov	r8, r3
    ca30:	bl	bd78 <rb_malloc>
    ca34:	mov	r5, r0
    ca38:	mov	r0, #268	; 0x10c
    ca3c:	str	r7, [r5]
    ca40:	stmib	r5, {r6, r8}
    ca44:	bl	bd78 <rb_malloc>
    ca48:	ldrb	r3, [r4, #17]
    ca4c:	str	r0, [r4, #48]	; 0x30
    ca50:	ldr	r2, [pc, #60]	; ca94 <rb_ssl_start_connected+0x80>
    ca54:	str	r7, [r0, #260]	; 0x104
    ca58:	str	r6, [r0, #264]	; 0x108
    ca5c:	mov	r0, r4
    ca60:	orr	r3, r3, #32
    ca64:	ldr	r1, [r5, #8]
    ca68:	add	r2, pc, r2
    ca6c:	strb	r3, [r4, #17]
    ca70:	mov	r3, r5
    ca74:	bl	43bc <rb_settimeout@plt>
    ca78:	mov	r0, r4
    ca7c:	mov	r1, #1
    ca80:	bl	bed8 <rb_ssl_init_fd>
    ca84:	mov	r1, r5
    ca88:	mov	r0, r4
    ca8c:	pop	{r4, r5, r6, r7, r8, lr}
    ca90:	b	bfa8 <rb_ssl_connect_common>
    ca94:	.word	0xfffff52c

0000ca98 <rb_free>:
    ca98:	cmp	r0, #0
    ca9c:	bxeq	lr
    caa0:	b	46c8 <free@plt>

0000caa4 <rb_event_frequency.part.0>:
    caa4:	push	{r4, lr}
    caa8:	eor	r4, r0, r0, asr #31
    caac:	sub	r4, r4, r0, asr #31
    cab0:	mov	r0, #3
    cab4:	lsl	r4, r4, #1
    cab8:	udiv	r4, r4, r0
    cabc:	bl	4b18 <rand@plt>
    cac0:	mov	r2, #1000	; 0x3e8
    cac4:	sdiv	r3, r0, r2
    cac8:	mls	r0, r3, r2, r0
    cacc:	mul	r0, r4, r0
    cad0:	sdiv	r0, r0, r2
    cad4:	add	r0, r0, r4
    cad8:	pop	{r4, pc}

0000cadc <rb_event_add_common>:
    cadc:	push	{r4, r5, r6, r7, r8, lr}
    cae0:	mov	r8, r0
    cae4:	mov	r7, r1
    cae8:	mov	r0, #1
    caec:	mov	r1, #48	; 0x30
    caf0:	mov	r6, r2
    caf4:	mov	r5, r3
    caf8:	bl	45c0 <calloc@plt>
    cafc:	subs	r4, r0, #0
    cb00:	bne	cb08 <rb_event_add_common+0x2c>
    cb04:	bl	495c <rb_outofmemory@plt>
    cb08:	mov	r0, #33	; 0x21
    cb0c:	str	r7, [r4, #12]
    cb10:	bl	4980 <malloc@plt>
    cb14:	subs	r7, r0, #0
    cb18:	beq	cb04 <rb_event_add_common+0x28>
    cb1c:	mov	r2, #33	; 0x21
    cb20:	mov	r1, r8
    cb24:	bl	4674 <rb_strlcpy@plt>
    cb28:	strd	r6, [r4, #16]
    cb2c:	bl	47c4 <rb_current_time@plt>
    cb30:	ldr	r1, [pc, #152]	; cbd0 <rb_event_add_common+0xf4>
    cb34:	add	r0, r0, r5
    cb38:	str	r4, [r4]
    cb3c:	ldr	r3, [sp, #24]
    cb40:	add	r1, pc, r1
    cb44:	ldr	ip, [r1]
    cb48:	str	r3, [r4, #24]
    cb4c:	mov	r3, #0
    cb50:	str	r0, [r4, #28]
    cb54:	str	r3, [r4, #4]
    cb58:	str	r5, [r4, #32]
    cb5c:	cmn	ip, #1
    cb60:	str	r3, [r4, #44]	; 0x2c
    cb64:	movne	r2, #0
    cb68:	moveq	r2, #1
    cb6c:	cmp	r0, ip
    cb70:	orrlt	r2, r2, #1
    cb74:	cmp	r2, r3
    cb78:	ldr	r3, [pc, #84]	; cbd4 <rb_event_add_common+0xf8>
    cb7c:	strne	r0, [r1]
    cb80:	add	r3, pc, r3
    cb84:	ldr	r2, [r3]
    cb88:	cmp	r2, #0
    cb8c:	str	r2, [r4, #8]
    cb90:	strne	r4, [r2, #4]
    cb94:	bne	cba4 <rb_event_add_common+0xc8>
    cb98:	ldr	r2, [r3, #4]
    cb9c:	cmp	r2, #0
    cba0:	streq	r4, [r3, #4]
    cba4:	ldr	r3, [pc, #44]	; cbd8 <rb_event_add_common+0xfc>
    cba8:	mov	r1, r5
    cbac:	mov	r0, r4
    cbb0:	add	r3, pc, r3
    cbb4:	ldr	r2, [r3, #8]
    cbb8:	str	r4, [r3]
    cbbc:	add	r2, r2, #1
    cbc0:	str	r2, [r3, #8]
    cbc4:	bl	abc0 <rb_io_sched_event>
    cbc8:	mov	r0, r4
    cbcc:	pop	{r4, r5, r6, r7, r8, pc}
    cbd0:	.word	0x00018938
    cbd4:	.word	0x0002b2a0
    cbd8:	.word	0x0002b270

0000cbdc <rb_event_add>:
    cbdc:	cmp	r3, #0
    cbe0:	push	{r0, r1, r4, r5, r6, lr}
    cbe4:	mov	r4, r0
    cbe8:	mov	r5, r1
    cbec:	mov	r6, r2
    cbf0:	bgt	cc0c <rb_event_add+0x30>
    cbf4:	mov	r1, r0
    cbf8:	mov	r2, r3
    cbfc:	ldr	r0, [pc, #36]	; cc28 <rb_event_add+0x4c>
    cc00:	add	r0, pc, r0
    cc04:	bl	48f0 <rb_lib_log@plt>
    cc08:	mov	r3, #1
    cc0c:	mov	r2, r6
    cc10:	mov	r1, r5
    cc14:	str	r3, [sp]
    cc18:	mov	r0, r4
    cc1c:	bl	cadc <rb_event_add_common>
    cc20:	add	sp, sp, #8
    cc24:	pop	{r4, r5, r6, pc}
    cc28:	.word	0x00007228

0000cc2c <rb_event_addonce>:
    cc2c:	cmp	r3, #0
    cc30:	push	{r0, r1, r4, r5, r6, lr}
    cc34:	mov	r4, r0
    cc38:	mov	r5, r1
    cc3c:	mov	r6, r2
    cc40:	bgt	cc5c <rb_event_addonce+0x30>
    cc44:	mov	r1, r0
    cc48:	mov	r2, r3
    cc4c:	ldr	r0, [pc, #40]	; cc7c <rb_event_addonce+0x50>
    cc50:	add	r0, pc, r0
    cc54:	bl	48f0 <rb_lib_log@plt>
    cc58:	mov	r3, #1
    cc5c:	mov	r2, #0
    cc60:	mov	r1, r5
    cc64:	mov	r0, r4
    cc68:	str	r2, [sp]
    cc6c:	mov	r2, r6
    cc70:	bl	cadc <rb_event_add_common>
    cc74:	add	sp, sp, #8
    cc78:	pop	{r4, r5, r6, pc}
    cc7c:	.word	0x0000721c

0000cc80 <rb_event_delete>:
    cc80:	subs	r3, r0, #0
    cc84:	bxeq	lr
    cc88:	mov	r2, #1
    cc8c:	str	r2, [r3, #44]	; 0x2c
    cc90:	b	ac1c <rb_io_unsched_event>

0000cc94 <rb_event_find_delete>:
    cc94:	ldr	r3, [pc, #60]	; ccd8 <rb_event_find_delete+0x44>
    cc98:	add	r3, pc, r3
    cc9c:	ldr	r3, [r3]
    cca0:	cmp	r3, #0
    cca4:	bne	ccb4 <rb_event_find_delete+0x20>
    cca8:	mov	r2, r3
    ccac:	mov	r0, r2
    ccb0:	b	4470 <rb_event_delete@plt>
    ccb4:	ldr	r2, [r3]
    ccb8:	ldr	ip, [r2, #12]
    ccbc:	cmp	r0, ip
    ccc0:	bne	ccd0 <rb_event_find_delete+0x3c>
    ccc4:	ldr	ip, [r2, #16]
    ccc8:	cmp	r1, ip
    cccc:	beq	ccac <rb_event_find_delete+0x18>
    ccd0:	ldr	r3, [r3, #8]
    ccd4:	b	cca0 <rb_event_find_delete+0xc>
    ccd8:	.word	0x0002b188

0000ccdc <rb_event_addish>:
    ccdc:	cmp	r3, #0
    cce0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cce4:	mov	r5, r0
    cce8:	rsblt	r3, r3, #0
    ccec:	mov	r6, r1
    ccf0:	cmp	r3, #2
    ccf4:	mov	r7, r2
    ccf8:	movle	r4, r3
    ccfc:	ble	cd10 <rb_event_addish+0x34>
    cd00:	rsb	r4, r3, #0
    cd04:	mov	r0, r4
    cd08:	bl	caa4 <rb_event_frequency.part.0>
    cd0c:	mov	r3, r0
    cd10:	mov	r2, r7
    cd14:	mov	r1, r6
    cd18:	str	r4, [sp]
    cd1c:	mov	r0, r5
    cd20:	bl	cadc <rb_event_add_common>
    cd24:	add	sp, sp, #12
    cd28:	pop	{r4, r5, r6, r7, pc}

0000cd2c <rb_run_one_event>:
    cd2c:	push	{r4, r5, r6, lr}
    cd30:	mov	r4, r0
    cd34:	mov	r2, #33	; 0x21
    cd38:	ldr	r1, [r0, #20]
    cd3c:	ldr	r0, [pc, #120]	; cdbc <rb_run_one_event+0x90>
    cd40:	add	r0, pc, r0
    cd44:	add	r0, r0, #12
    cd48:	bl	4674 <rb_strlcpy@plt>
    cd4c:	ldr	r3, [r4, #12]
    cd50:	ldr	r0, [r4, #16]
    cd54:	blx	r3
    cd58:	ldr	r3, [r4, #24]
    cd5c:	cmp	r3, #0
    cd60:	bne	cd70 <rb_run_one_event+0x44>
    cd64:	mov	r0, r4
    cd68:	pop	{r4, r5, r6, lr}
    cd6c:	b	4470 <rb_event_delete@plt>
    cd70:	bl	47c4 <rb_current_time@plt>
    cd74:	mov	r5, r0
    cd78:	ldr	r0, [r4, #24]
    cd7c:	cmp	r0, #0
    cd80:	bge	cd88 <rb_run_one_event+0x5c>
    cd84:	bl	caa4 <rb_event_frequency.part.0>
    cd88:	ldr	r2, [pc, #48]	; cdc0 <rb_run_one_event+0x94>
    cd8c:	add	r0, r5, r0
    cd90:	str	r0, [r4, #28]
    cd94:	add	r2, pc, r2
    cd98:	ldr	r1, [r2]
    cd9c:	cmn	r1, #1
    cda0:	movne	r3, #0
    cda4:	moveq	r3, #1
    cda8:	cmp	r0, r1
    cdac:	orrlt	r3, r3, #1
    cdb0:	cmp	r3, #0
    cdb4:	strne	r0, [r2]
    cdb8:	pop	{r4, r5, r6, pc}
    cdbc:	.word	0x0002b0e0
    cdc0:	.word	0x000186e4

0000cdc4 <rb_event_run>:
    cdc4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    cdc8:	bl	ac68 <rb_io_supports_event>
    cdcc:	cmp	r0, #0
    cdd0:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
    cdd4:	mvn	r2, #0
    cdd8:	ldr	r3, [pc, #416]	; cf80 <rb_event_run+0x1bc>
    cddc:	add	r3, pc, r3
    cde0:	str	r2, [r3]
    cde4:	ldr	r3, [pc, #408]	; cf84 <rb_event_run+0x1c0>
    cde8:	add	r3, pc, r3
    cdec:	ldr	r3, [r3]
    cdf0:	cmp	r3, #0
    cdf4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    cdf8:	ldr	r8, [pc, #392]	; cf88 <rb_event_run+0x1c4>
    cdfc:	ldr	r7, [pc, #392]	; cf8c <rb_event_run+0x1c8>
    ce00:	ldr	r6, [r3, #8]
    ce04:	add	r8, pc, r8
    ce08:	add	r9, r8, #12
    ce0c:	add	r7, pc, r7
    ce10:	ldr	r4, [r3]
    ce14:	ldr	r3, [r4, #44]	; 0x2c
    ce18:	cmp	r3, #0
    ce1c:	beq	ce84 <rb_event_run+0xc0>
    ce20:	ldrd	r2, [r4, #4]
    ce24:	cmp	r3, #0
    ce28:	strne	r2, [r3, #4]
    ce2c:	ldreq	r1, [pc, #348]	; cf90 <rb_event_run+0x1cc>
    ce30:	addeq	r1, pc, r1
    ce34:	streq	r2, [r1, #4]
    ce38:	ldr	r2, [r4, #4]
    ce3c:	cmp	r2, #0
    ce40:	strne	r3, [r2, #8]
    ce44:	ldreq	r2, [pc, #328]	; cf94 <rb_event_run+0x1d0>
    ce48:	addeq	r2, pc, r2
    ce4c:	streq	r3, [r2]
    ce50:	ldr	r2, [pc, #320]	; cf98 <rb_event_run+0x1d4>
    ce54:	mov	r3, #0
    ce58:	str	r3, [r4, #4]
    ce5c:	str	r3, [r4, #8]
    ce60:	add	r2, pc, r2
    ce64:	ldr	r3, [r2, #8]
    ce68:	ldr	r0, [r4, #20]
    ce6c:	sub	r3, r3, #1
    ce70:	str	r3, [r2, #8]
    ce74:	bl	ca98 <rb_free>
    ce78:	mov	r0, r4
    ce7c:	bl	ca98 <rb_free>
    ce80:	b	cf04 <rb_event_run+0x140>
    ce84:	ldr	r5, [r4, #28]
    ce88:	bl	47c4 <rb_current_time@plt>
    ce8c:	cmp	r5, r0
    ce90:	bgt	cf58 <rb_event_run+0x194>
    ce94:	mov	r2, #33	; 0x21
    ce98:	mov	r0, r9
    ce9c:	ldr	r1, [r4, #20]
    cea0:	bl	4674 <rb_strlcpy@plt>
    cea4:	ldr	r3, [r4, #12]
    cea8:	ldr	r0, [r4, #16]
    ceac:	blx	r3
    ceb0:	ldr	r3, [r4, #24]
    ceb4:	cmp	r3, #0
    ceb8:	beq	cf18 <rb_event_run+0x154>
    cebc:	bl	47c4 <rb_current_time@plt>
    cec0:	mov	r5, r0
    cec4:	ldr	r0, [r4, #24]
    cec8:	cmp	r0, #0
    cecc:	bge	ced4 <rb_event_run+0x110>
    ced0:	bl	caa4 <rb_event_frequency.part.0>
    ced4:	ldr	r2, [pc, #192]	; cf9c <rb_event_run+0x1d8>
    ced8:	add	r0, r5, r0
    cedc:	str	r0, [r4, #28]
    cee0:	add	r2, pc, r2
    cee4:	ldr	r1, [r2]
    cee8:	cmn	r1, #1
    ceec:	movne	r3, #0
    cef0:	moveq	r3, #1
    cef4:	cmp	r0, r1
    cef8:	orrlt	r3, r3, #1
    cefc:	cmp	r3, #0
    cf00:	strne	r0, [r2]
    cf04:	cmp	r6, #0
    cf08:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    cf0c:	mov	r3, r6
    cf10:	ldr	r6, [r6, #8]
    cf14:	b	ce10 <rb_event_run+0x4c>
    cf18:	ldrd	r2, [r4, #4]
    cf1c:	cmp	r3, #0
    cf20:	strne	r2, [r3, #4]
    cf24:	streq	r2, [r8, #4]
    cf28:	ldr	r2, [r4, #4]
    cf2c:	cmp	r2, #0
    cf30:	strne	r3, [r2, #8]
    cf34:	ldreq	r2, [pc, #100]	; cfa0 <rb_event_run+0x1dc>
    cf38:	addeq	r2, pc, r2
    cf3c:	streq	r3, [r2]
    cf40:	ldr	r2, [pc, #92]	; cfa4 <rb_event_run+0x1e0>
    cf44:	mov	r3, #0
    cf48:	str	r3, [r4, #4]
    cf4c:	str	r3, [r4, #8]
    cf50:	add	r2, pc, r2
    cf54:	b	ce64 <rb_event_run+0xa0>
    cf58:	ldr	r1, [r7]
    cf5c:	ldr	r2, [r4, #28]
    cf60:	cmn	r1, #1
    cf64:	movne	r3, #0
    cf68:	moveq	r3, #1
    cf6c:	cmp	r2, r1
    cf70:	orrlt	r3, r3, #1
    cf74:	cmp	r3, #0
    cf78:	strne	r2, [r7]
    cf7c:	b	cf04 <rb_event_run+0x140>
    cf80:	.word	0x0001869c
    cf84:	.word	0x0002b038
    cf88:	.word	0x0002b01c
    cf8c:	.word	0x0001866c
    cf90:	.word	0x0002aff0
    cf94:	.word	0x0002afd8
    cf98:	.word	0x0002afc0
    cf9c:	.word	0x00018598
    cfa0:	.word	0x0002aee8
    cfa4:	.word	0x0002aed0

0000cfa8 <rb_event_io_register_all>:
    cfa8:	push	{r4, lr}
    cfac:	bl	ac68 <rb_io_supports_event>
    cfb0:	cmp	r0, #0
    cfb4:	popeq	{r4, pc}
    cfb8:	ldr	r3, [pc, #28]	; cfdc <rb_event_io_register_all+0x34>
    cfbc:	ldr	r4, [pc, r3]
    cfc0:	cmp	r4, #0
    cfc4:	popeq	{r4, pc}
    cfc8:	ldr	r0, [r4]
    cfcc:	ldr	r1, [r0, #32]
    cfd0:	bl	abc0 <rb_io_sched_event>
    cfd4:	ldr	r4, [r4, #8]
    cfd8:	b	cfc0 <rb_event_io_register_all+0x18>
    cfdc:	.word	0x0002ae64

0000cfe0 <rb_event_init>:
    cfe0:	ldr	r0, [pc, #20]	; cffc <rb_event_init+0x1c>
    cfe4:	mov	r2, #33	; 0x21
    cfe8:	ldr	r1, [pc, #16]	; d000 <rb_event_init+0x20>
    cfec:	add	r0, pc, r0
    cff0:	add	r0, r0, #12
    cff4:	add	r1, pc, r1
    cff8:	b	4674 <rb_strlcpy@plt>
    cffc:	.word	0x0002ae34
    d000:	.word	0x00006eba

0000d004 <rb_dump_events>:
    d004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d008:	sub	sp, sp, #524	; 0x20c
    d00c:	mov	r6, r0
    d010:	add	r4, sp, #8
    d014:	mov	r7, r1
    d018:	mov	r0, r4
    d01c:	mov	r1, #512	; 0x200
    d020:	ldr	r5, [pc, #156]	; d0c4 <rb_dump_events+0xc0>
    d024:	ldr	r2, [pc, #156]	; d0c8 <rb_dump_events+0xc4>
    d028:	ldr	sl, [pc, #156]	; d0cc <rb_dump_events+0xc8>
    d02c:	add	r5, pc, r5
    d030:	add	r3, r5, #12
    d034:	add	r2, pc, r2
    d038:	bl	4b84 <snprintf@plt>
    d03c:	mov	r1, r7
    d040:	mov	r0, r4
    d044:	blx	r6
    d048:	ldr	r1, [pc, #128]	; d0d0 <rb_dump_events+0xcc>
    d04c:	mov	r2, #512	; 0x200
    d050:	mov	r0, r4
    d054:	add	sl, pc, sl
    d058:	add	r1, pc, r1
    d05c:	bl	4674 <rb_strlcpy@plt>
    d060:	mov	r1, r7
    d064:	mov	r0, r4
    d068:	blx	r6
    d06c:	ldr	r5, [r5]
    d070:	cmp	r5, #0
    d074:	bne	d080 <rb_dump_events+0x7c>
    d078:	add	sp, sp, #524	; 0x20c
    d07c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d080:	ldr	r9, [r5]
    d084:	ldr	fp, [r9, #20]
    d088:	ldr	r8, [r9, #28]
    d08c:	bl	47c4 <rb_current_time@plt>
    d090:	ldr	r3, [r9, #24]
    d094:	mov	r2, sl
    d098:	mov	r1, #512	; 0x200
    d09c:	sub	r0, r8, r0
    d0a0:	stm	sp, {r0, r3}
    d0a4:	mov	r3, fp
    d0a8:	mov	r0, r4
    d0ac:	bl	4b84 <snprintf@plt>
    d0b0:	mov	r1, r7
    d0b4:	mov	r0, r4
    d0b8:	blx	r6
    d0bc:	ldr	r5, [r5, #8]
    d0c0:	b	d070 <rb_dump_events+0x6c>
    d0c4:	.word	0x0002adf4
    d0c8:	.word	0x00006e7f
    d0cc:	.word	0x00006ea1
    d0d0:	.word	0x00006e71

0000d0d4 <rb_set_back_events>:
    d0d4:	ldr	r3, [pc, #40]	; d104 <rb_set_back_events+0x30>
    d0d8:	ldr	r2, [pc, r3]
    d0dc:	cmp	r2, #0
    d0e0:	bxeq	lr
    d0e4:	ldr	r1, [r2]
    d0e8:	ldr	r2, [r2, #8]
    d0ec:	ldr	r3, [r1, #28]
    d0f0:	cmp	r3, r0
    d0f4:	subgt	r3, r3, r0
    d0f8:	movle	r3, #0
    d0fc:	str	r3, [r1, #28]
    d100:	b	d0dc <rb_set_back_events+0x8>
    d104:	.word	0x0002ad48

0000d108 <rb_event_update>:
    d108:	push	{r4, r5, r6, lr}
    d10c:	subs	r5, r0, #0
    d110:	popeq	{r4, r5, r6, pc}
    d114:	cmp	r1, #0
    d118:	mov	r4, r1
    d11c:	str	r1, [r5, #24]
    d120:	bge	d130 <rb_event_update+0x28>
    d124:	mov	r0, r1
    d128:	bl	caa4 <rb_event_frequency.part.0>
    d12c:	mov	r4, r0
    d130:	bl	47c4 <rb_current_time@plt>
    d134:	ldr	r3, [r5, #28]
    d138:	add	r0, r0, r4
    d13c:	cmp	r0, r3
    d140:	popge	{r4, r5, r6, pc}
    d144:	bl	47c4 <rb_current_time@plt>
    d148:	add	r0, r0, r4
    d14c:	str	r0, [r5, #28]
    d150:	pop	{r4, r5, r6, pc}

0000d154 <rb_event_next>:
    d154:	ldr	r3, [pc, #4]	; d160 <rb_event_next+0xc>
    d158:	ldr	r0, [pc, r3]
    d15c:	bx	lr
    d160:	.word	0x00018320

0000d164 <rb_ctime>:
    d164:	push	{r4, r5, lr}
    d168:	sub	sp, sp, #84	; 0x54
    d16c:	mov	r4, r1
    d170:	add	r1, sp, #36	; 0x24
    d174:	mov	r5, r2
    d178:	str	r0, [sp, #28]
    d17c:	add	r0, sp, #28
    d180:	bl	49c8 <gmtime_r@plt>
    d184:	cmp	r4, #0
    d188:	ldreq	r4, [pc, #152]	; d228 <rb_ctime+0xc4>
    d18c:	moveq	r5, #128	; 0x80
    d190:	addeq	r4, pc, r4
    d194:	cmp	r0, #0
    d198:	bne	d1bc <rb_ctime+0x58>
    d19c:	ldr	r1, [pc, #136]	; d22c <rb_ctime+0xc8>
    d1a0:	mov	r2, r5
    d1a4:	mov	r0, r4
    d1a8:	add	r1, pc, r1
    d1ac:	bl	4674 <rb_strlcpy@plt>
    d1b0:	mov	r0, r4
    d1b4:	add	sp, sp, #84	; 0x54
    d1b8:	pop	{r4, r5, pc}
    d1bc:	ldr	r3, [r0, #20]
    d1c0:	ldr	ip, [r0, #24]
    d1c4:	ldr	r2, [pc, #100]	; d230 <rb_ctime+0xcc>
    d1c8:	add	r3, r3, #1888	; 0x760
    d1cc:	add	r3, r3, #12
    d1d0:	str	r3, [sp, #20]
    d1d4:	ldr	r3, [r0]
    d1d8:	add	r2, pc, r2
    d1dc:	str	r3, [sp, #16]
    d1e0:	ldr	r3, [r0, #4]
    d1e4:	str	r3, [sp, #12]
    d1e8:	ldr	r3, [r0, #8]
    d1ec:	str	r3, [sp, #8]
    d1f0:	ldr	r3, [r0, #12]
    d1f4:	str	r3, [sp, #4]
    d1f8:	mov	r3, r2
    d1fc:	ldr	r1, [r0, #16]
    d200:	mov	r0, r4
    d204:	ldr	r3, [r3, ip, lsl #2]
    d208:	add	r2, r2, r1, lsl #2
    d20c:	mov	r1, r5
    d210:	ldr	r2, [r2, #28]
    d214:	str	r2, [sp]
    d218:	ldr	r2, [pc, #20]	; d234 <rb_ctime+0xd0>
    d21c:	add	r2, pc, r2
    d220:	bl	4b84 <snprintf@plt>
    d224:	b	d1b0 <rb_ctime+0x4c>
    d228:	.word	0x0002acc0
    d22c:	.word	0x00006553
    d230:	.word	0x00017c80
    d234:	.word	0x00006f3e

0000d238 <rb_date>:
    d238:	push	{r4, r5, lr}
    d23c:	sub	sp, sp, #84	; 0x54
    d240:	mov	r4, r1
    d244:	add	r1, sp, #36	; 0x24
    d248:	mov	r5, r2
    d24c:	str	r0, [sp, #28]
    d250:	add	r0, sp, #28
    d254:	bl	49c8 <gmtime_r@plt>
    d258:	cmp	r0, #0
    d25c:	bne	d280 <rb_date+0x48>
    d260:	ldr	r1, [pc, #132]	; d2ec <rb_date+0xb4>
    d264:	mov	r2, r5
    d268:	mov	r0, r4
    d26c:	add	r1, pc, r1
    d270:	bl	4674 <rb_strlcpy@plt>
    d274:	mov	r0, r4
    d278:	add	sp, sp, #84	; 0x54
    d27c:	pop	{r4, r5, pc}
    d280:	ldr	r2, [r0]
    d284:	ldr	r1, [r0, #24]
    d288:	ldr	r3, [pc, #96]	; d2f0 <rb_date+0xb8>
    d28c:	str	r2, [sp, #20]
    d290:	ldr	r2, [r0, #4]
    d294:	add	r3, pc, r3
    d298:	add	r1, r3, r1, lsl #2
    d29c:	str	r2, [sp, #16]
    d2a0:	ldr	r2, [r0, #8]
    d2a4:	str	r2, [sp, #12]
    d2a8:	ldr	r2, [r0, #20]
    d2ac:	add	r2, r2, #1888	; 0x760
    d2b0:	add	r2, r2, #12
    d2b4:	str	r2, [sp, #8]
    d2b8:	ldr	r2, [r0, #12]
    d2bc:	str	r2, [sp, #4]
    d2c0:	ldr	r2, [r0, #16]
    d2c4:	mov	r0, r4
    d2c8:	add	r3, r3, r2, lsl #2
    d2cc:	ldr	r2, [pc, #32]	; d2f4 <rb_date+0xbc>
    d2d0:	ldr	r3, [r3, #104]	; 0x68
    d2d4:	add	r2, pc, r2
    d2d8:	str	r3, [sp]
    d2dc:	ldr	r3, [r1, #76]	; 0x4c
    d2e0:	mov	r1, r5
    d2e4:	bl	4b84 <snprintf@plt>
    d2e8:	b	d274 <rb_date+0x3c>
    d2ec:	.word	0x0000648f
    d2f0:	.word	0x00017bc4
    d2f4:	.word	0x00006ea1

0000d2f8 <rb_current_time>:
    d2f8:	ldr	r3, [pc, #8]	; d308 <rb_current_time+0x10>
    d2fc:	add	r3, pc, r3
    d300:	ldr	r0, [r3, #128]	; 0x80
    d304:	bx	lr
    d308:	.word	0x0002ab54

0000d30c <rb_current_time_tv>:
    d30c:	ldr	r0, [pc, #8]	; d31c <rb_current_time_tv+0x10>
    d310:	add	r0, pc, r0
    d314:	add	r0, r0, #128	; 0x80
    d318:	bx	lr
    d31c:	.word	0x0002ab40

0000d320 <rb_lib_log>:
    d320:	push	{r0, r1, r2, r3}
    d324:	push	{r0, r1, r2, r4, r5, lr}
    d328:	ldr	r4, [pc, #68]	; d374 <rb_lib_log+0x54>
    d32c:	add	r4, pc, r4
    d330:	ldr	r3, [r4, #136]	; 0x88
    d334:	cmp	r3, #0
    d338:	beq	d364 <rb_lib_log+0x44>
    d33c:	add	r3, sp, #28
    d340:	add	r5, r4, #140	; 0x8c
    d344:	ldr	r2, [sp, #24]
    d348:	mov	r1, #512	; 0x200
    d34c:	mov	r0, r5
    d350:	str	r3, [sp, #4]
    d354:	bl	4530 <vsnprintf@plt>
    d358:	mov	r0, r5
    d35c:	ldr	r3, [r4, #136]	; 0x88
    d360:	blx	r3
    d364:	add	sp, sp, #12
    d368:	pop	{r4, r5, lr}
    d36c:	add	sp, sp, #16
    d370:	bx	lr
    d374:	.word	0x0002ab24

0000d378 <rb_lib_die>:
    d378:	push	{r0, r1, r2, r3}
    d37c:	push	{r0, r1, r2, r4, r5, lr}
    d380:	ldr	r4, [pc, #72]	; d3d0 <rb_lib_die+0x58>
    d384:	add	r4, pc, r4
    d388:	ldr	r3, [r4, #652]	; 0x28c
    d38c:	cmp	r3, #0
    d390:	bne	d398 <rb_lib_die+0x20>
    d394:	bl	4398 <abort@plt>
    d398:	add	r3, sp, #28
    d39c:	add	r5, r4, #140	; 0x8c
    d3a0:	ldr	r2, [sp, #24]
    d3a4:	mov	r1, #512	; 0x200
    d3a8:	mov	r0, r5
    d3ac:	str	r3, [sp, #4]
    d3b0:	bl	4530 <vsnprintf@plt>
    d3b4:	ldr	r3, [r4, #652]	; 0x28c
    d3b8:	mov	r0, r5
    d3bc:	blx	r3
    d3c0:	add	sp, sp, #12
    d3c4:	pop	{r4, r5, lr}
    d3c8:	add	sp, sp, #16
    d3cc:	bx	lr
    d3d0:	.word	0x0002aacc

0000d3d4 <rb_lib_restart>:
    d3d4:	ldr	r4, [pc, #68]	; d420 <rb_lib_restart+0x4c>
    d3d8:	push	{r0, r1, r2, r3}
    d3dc:	push	{r0, r1, r2, lr}
    d3e0:	add	r4, pc, r4
    d3e4:	ldr	r3, [r4, #656]	; 0x290
    d3e8:	cmp	r3, #0
    d3ec:	bne	d3f4 <rb_lib_restart+0x20>
    d3f0:	bl	4398 <abort@plt>
    d3f4:	add	r3, sp, #20
    d3f8:	add	r5, r4, #140	; 0x8c
    d3fc:	ldr	r2, [sp, #16]
    d400:	mov	r1, #512	; 0x200
    d404:	mov	r0, r5
    d408:	str	r3, [sp, #4]
    d40c:	bl	4530 <vsnprintf@plt>
    d410:	mov	r0, r5
    d414:	ldr	r3, [r4, #656]	; 0x290
    d418:	blx	r3
    d41c:	b	d3f0 <rb_lib_restart+0x1c>
    d420:	.word	0x0002aa70

0000d424 <rb_set_time>:
    d424:	push	{r0, r1, r4, lr}
    d428:	mov	r4, sp
    d42c:	mov	r1, #0
    d430:	mov	r0, r4
    d434:	bl	4590 <rb_gettimeofday@plt>
    d438:	cmn	r0, #1
    d43c:	bne	d468 <rb_set_time+0x44>
    d440:	bl	4cbc <__errno_location@plt>
    d444:	ldr	r0, [r0]
    d448:	bl	4374 <strerror@plt>
    d44c:	mov	r1, r0
    d450:	ldr	r0, [pc, #76]	; d4a4 <rb_set_time+0x80>
    d454:	add	r0, pc, r0
    d458:	bl	48f0 <rb_lib_log@plt>
    d45c:	ldr	r0, [pc, #68]	; d4a8 <rb_set_time+0x84>
    d460:	add	r0, pc, r0
    d464:	bl	4a34 <rb_lib_restart@plt>
    d468:	ldr	r2, [pc, #60]	; d4ac <rb_set_time+0x88>
    d46c:	ldr	r3, [sp]
    d470:	add	r2, pc, r2
    d474:	ldr	r0, [r2, #128]	; 0x80
    d478:	cmp	r3, r0
    d47c:	bge	d488 <rb_set_time+0x64>
    d480:	sub	r0, r0, r3
    d484:	bl	d0d4 <rb_set_back_events>
    d488:	ldr	r3, [pc, #32]	; d4b0 <rb_set_time+0x8c>
    d48c:	ldm	r4, {r0, r1}
    d490:	add	r3, pc, r3
    d494:	add	r3, r3, #128	; 0x80
    d498:	stm	r3, {r0, r1}
    d49c:	add	sp, sp, #8
    d4a0:	pop	{r4, pc}
    d4a4:	.word	0x00006d46
    d4a8:	.word	0x00006d4d
    d4ac:	.word	0x0002a9e0
    d4b0:	.word	0x0002a9c0

0000d4b4 <rb_lib_version>:
    d4b4:	push	{r4, r5, lr}
    d4b8:	sub	sp, sp, #524	; 0x20c
    d4bc:	mov	r1, #512	; 0x200
    d4c0:	add	r5, sp, #8
    d4c4:	mov	r0, r5
    d4c8:	ldr	r4, [pc, #64]	; d510 <rb_lib_version+0x5c>
    d4cc:	bl	c728 <rb_get_ssl_info>
    d4d0:	ldr	r3, [pc, #60]	; d514 <rb_lib_version+0x60>
    d4d4:	mov	r1, #640	; 0x280
    d4d8:	ldr	r2, [pc, #56]	; d518 <rb_lib_version+0x64>
    d4dc:	add	r4, pc, r4
    d4e0:	ldr	r3, [r4, r3]
    d4e4:	str	r5, [sp]
    d4e8:	ldr	r4, [pc, #44]	; d51c <rb_lib_version+0x68>
    d4ec:	add	r2, pc, r2
    d4f0:	ldr	r3, [r3]
    d4f4:	add	r4, pc, r4
    d4f8:	add	r4, r4, #660	; 0x294
    d4fc:	mov	r0, r4
    d500:	bl	4b84 <snprintf@plt>
    d504:	mov	r0, r4
    d508:	add	sp, sp, #524	; 0x20c
    d50c:	pop	{r4, r5, pc}
    d510:	.word	0x00017b1c
    d514:	.word	0x000003a8
    d518:	.word	0x00006ccf
    d51c:	.word	0x0002a95c

0000d520 <rb_lib_init>:
    d520:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d524:	mov	r5, r3
    d528:	mov	sl, r0
    d52c:	mov	r9, r1
    d530:	mov	r8, r2
    d534:	ldr	r6, [sp, #32]
    d538:	ldr	r4, [sp, #36]	; 0x24
    d53c:	ldr	r7, [sp, #40]	; 0x28
    d540:	bl	4968 <rb_set_time@plt>
    d544:	ldr	ip, [pc, #68]	; d590 <rb_lib_init+0x70>
    d548:	add	ip, pc, ip
    d54c:	str	sl, [ip, #136]	; 0x88
    d550:	str	r8, [ip, #652]	; 0x28c
    d554:	str	r9, [ip, #656]	; 0x290
    d558:	bl	45d8 <rb_event_init@plt>
    d55c:	bl	49b0 <rb_init_bh@plt>
    d560:	mov	r2, r7
    d564:	mov	r1, r6
    d568:	mov	r0, r5
    d56c:	bl	4ad0 <rb_fdlist_init@plt>
    d570:	bl	435c <rb_init_netio@plt>
    d574:	mov	r0, r4
    d578:	bl	48b4 <rb_init_rb_dlink_nodes@plt>
    d57c:	bl	ac68 <rb_io_supports_event>
    d580:	cmp	r0, #0
    d584:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    d588:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    d58c:	b	ac84 <rb_io_init_event>
    d590:	.word	0x0002a908

0000d594 <rb_lib_loop>:
    d594:	push	{r4, lr}
    d598:	mov	r5, r0
    d59c:	bl	4968 <rb_set_time@plt>
    d5a0:	bl	ac68 <rb_io_supports_event>
    d5a4:	cmp	r0, #0
    d5a8:	moveq	r6, #1000	; 0x3e8
    d5ac:	beq	d5bc <rb_lib_loop+0x28>
    d5b0:	mvn	r0, #0
    d5b4:	bl	4518 <rb_select@plt>
    d5b8:	b	d5b0 <rb_lib_loop+0x1c>
    d5bc:	cmp	r5, #0
    d5c0:	bne	d5f4 <rb_lib_loop+0x60>
    d5c4:	bl	4c08 <rb_event_next@plt>
    d5c8:	subs	r4, r0, #0
    d5cc:	mvnle	r0, #0
    d5d0:	ble	d5e8 <rb_lib_loop+0x54>
    d5d4:	bl	47c4 <rb_current_time@plt>
    d5d8:	sub	r0, r4, r0
    d5dc:	cmp	r0, #0
    d5e0:	movle	r0, #1000	; 0x3e8
    d5e4:	mulgt	r0, r6, r0
    d5e8:	bl	4518 <rb_select@plt>
    d5ec:	bl	4998 <rb_event_run@plt>
    d5f0:	b	d5bc <rb_lib_loop+0x28>
    d5f4:	mov	r0, r5
    d5f8:	b	d5e8 <rb_lib_loop+0x54>

0000d5fc <rb_strtok_r>:
    d5fc:	b	4a28 <strtok_r@plt>

0000d600 <rb_base64_encode>:
    d600:	cmn	r1, #2
    d604:	blt	d72c <rb_base64_encode+0x12c>
    d608:	push	{r4, r5, r6, lr}
    d60c:	mov	r3, #3
    d610:	mov	r4, r1
    d614:	add	r1, r1, #2
    d618:	mov	r5, r0
    d61c:	mov	r0, #1
    d620:	udiv	r1, r1, r3
    d624:	add	r1, r1, r1, lsl #2
    d628:	bl	45c0 <calloc@plt>
    d62c:	cmp	r0, #0
    d630:	beq	d6c4 <rb_base64_encode+0xc4>
    d634:	ldr	lr, [pc, #248]	; d734 <rb_base64_encode+0x134>
    d638:	mov	r3, r5
    d63c:	mov	ip, r0
    d640:	add	lr, pc, lr
    d644:	cmp	r4, #2
    d648:	mov	r2, ip
    d64c:	mov	r1, r3
    d650:	add	ip, ip, #4
    d654:	add	r3, r3, #3
    d658:	bgt	d6c8 <rb_base64_encode+0xc8>
    d65c:	cmp	r4, #0
    d660:	moveq	ip, r2
    d664:	beq	d6b8 <rb_base64_encode+0xb8>
    d668:	ldr	lr, [pc, #200]	; d738 <rb_base64_encode+0x138>
    d66c:	mov	ip, r2
    d670:	cmp	r4, #2
    d674:	ldrb	r3, [r1]
    d678:	add	lr, pc, lr
    d67c:	ldrb	r5, [lr, r3, lsr #2]
    d680:	lsl	r3, r3, #4
    d684:	and	r3, r3, #48	; 0x30
    d688:	strb	r5, [ip], #4
    d68c:	bne	d718 <rb_base64_encode+0x118>
    d690:	ldrb	r1, [r1, #1]
    d694:	add	r3, lr, r3
    d698:	ldrb	r3, [r3, r1, lsr #4]
    d69c:	lsl	r1, r1, #2
    d6a0:	and	r1, r1, #60	; 0x3c
    d6a4:	strb	r3, [r2, #1]
    d6a8:	ldrb	r3, [lr, r1]
    d6ac:	strb	r3, [r2, #2]
    d6b0:	mov	r3, #61	; 0x3d
    d6b4:	strb	r3, [r2, #3]
    d6b8:	mov	r3, #0
    d6bc:	strb	r3, [ip]
    d6c0:	pop	{r4, r5, r6, pc}
    d6c4:	bl	495c <rb_outofmemory@plt>
    d6c8:	ldrb	r1, [r3, #-3]
    d6cc:	sub	r4, r4, #3
    d6d0:	ldrb	r2, [lr, r1, lsr #2]
    d6d4:	lsl	r1, r1, #4
    d6d8:	and	r1, r1, #48	; 0x30
    d6dc:	add	r1, lr, r1
    d6e0:	strb	r2, [ip, #-4]
    d6e4:	ldrb	r2, [r3, #-2]
    d6e8:	ldrb	r1, [r1, r2, lsr #4]
    d6ec:	lsl	r2, r2, #2
    d6f0:	and	r2, r2, #60	; 0x3c
    d6f4:	add	r2, lr, r2
    d6f8:	strb	r1, [ip, #-3]
    d6fc:	ldrb	r1, [r3, #-1]
    d700:	ldrb	r2, [r2, r1, lsr #6]
    d704:	and	r1, r1, #63	; 0x3f
    d708:	strb	r2, [ip, #-2]
    d70c:	ldrb	r2, [lr, r1]
    d710:	strb	r2, [ip, #-1]
    d714:	b	d644 <rb_base64_encode+0x44>
    d718:	ldrb	r3, [lr, r3]
    d71c:	strb	r3, [r2, #1]
    d720:	mov	r3, #61	; 0x3d
    d724:	strb	r3, [r2, #2]
    d728:	b	d6b4 <rb_base64_encode+0xb4>
    d72c:	mov	r0, #0
    d730:	bx	lr
    d734:	.word	0x000068d8
    d738:	.word	0x000068a0

0000d73c <rb_base64_decode>:
    d73c:	push	{r4, r5, r6, r7, r8, lr}
    d740:	mov	r4, r0
    d744:	mov	r5, r1
    d748:	mov	r0, #1
    d74c:	add	r1, r1, #1
    d750:	mov	r6, r2
    d754:	bl	45c0 <calloc@plt>
    d758:	cmp	r0, #0
    d75c:	beq	d7c0 <rb_base64_decode+0x84>
    d760:	ldr	r8, [pc, #264]	; d870 <rb_base64_decode+0x134>
    d764:	mov	r3, #0
    d768:	sub	r7, r4, #1
    d76c:	mov	ip, r3
    d770:	add	r8, pc, r8
    d774:	ldrb	r1, [r7, #1]!
    d778:	cmp	r1, #0
    d77c:	beq	d858 <rb_base64_decode+0x11c>
    d780:	sub	r2, r5, r7
    d784:	add	r2, r4, r2
    d788:	cmp	r2, #0
    d78c:	bgt	d7c4 <rb_base64_decode+0x88>
    d790:	cmp	r1, #61	; 0x3d
    d794:	bne	d858 <rb_base64_decode+0x11c>
    d798:	and	ip, ip, #3
    d79c:	cmp	ip, #2
    d7a0:	beq	d84c <rb_base64_decode+0x110>
    d7a4:	cmp	ip, #3
    d7a8:	beq	d868 <rb_base64_decode+0x12c>
    d7ac:	cmp	ip, #1
    d7b0:	bne	d858 <rb_base64_decode+0x11c>
    d7b4:	bl	46c8 <free@plt>
    d7b8:	mov	r0, #0
    d7bc:	pop	{r4, r5, r6, r7, r8, pc}
    d7c0:	bl	495c <rb_outofmemory@plt>
    d7c4:	cmp	r1, #61	; 0x3d
    d7c8:	beq	d798 <rb_base64_decode+0x5c>
    d7cc:	add	r1, r8, r1, lsl #1
    d7d0:	ldrsh	r1, [r1, #66]	; 0x42
    d7d4:	cmp	r1, #0
    d7d8:	blt	d774 <rb_base64_decode+0x38>
    d7dc:	and	r2, ip, #3
    d7e0:	add	lr, r0, r3
    d7e4:	cmp	r2, #2
    d7e8:	beq	d820 <rb_base64_decode+0xe4>
    d7ec:	cmp	r2, #3
    d7f0:	beq	d838 <rb_base64_decode+0xfc>
    d7f4:	cmp	r2, #1
    d7f8:	lslne	r1, r1, #2
    d7fc:	bne	d844 <rb_base64_decode+0x108>
    d800:	ldrb	r2, [lr]
    d804:	add	r3, r3, #1
    d808:	orr	r2, r2, r1, asr #4
    d80c:	lsl	r1, r1, #4
    d810:	strb	r2, [lr]
    d814:	strb	r1, [r0, r3]
    d818:	add	ip, ip, #1
    d81c:	b	d774 <rb_base64_decode+0x38>
    d820:	ldrb	r2, [lr]
    d824:	add	r3, r3, #1
    d828:	orr	r2, r2, r1, asr #2
    d82c:	lsl	r1, r1, #6
    d830:	strb	r2, [lr]
    d834:	b	d814 <rb_base64_decode+0xd8>
    d838:	ldrb	r2, [lr]
    d83c:	add	r3, r3, #1
    d840:	orr	r1, r2, r1
    d844:	strb	r1, [lr]
    d848:	b	d818 <rb_base64_decode+0xdc>
    d84c:	add	r2, r3, #1
    d850:	mov	r1, #0
    d854:	strb	r1, [r0, r2]
    d858:	mov	r2, #0
    d85c:	str	r3, [r6]
    d860:	strb	r2, [r0, r3]
    d864:	pop	{r4, r5, r6, r7, r8, pc}
    d868:	mov	r2, r3
    d86c:	b	d850 <rb_base64_decode+0x114>
    d870:	.word	0x000067a8

0000d874 <rb_outofmemory>:
    d874:	ldr	r3, [pc, #52]	; d8b0 <rb_outofmemory+0x3c>
    d878:	push	{r4, lr}
    d87c:	add	r3, pc, r3
    d880:	ldr	r2, [r3]
    d884:	cmp	r2, #0
    d888:	beq	d890 <rb_outofmemory+0x1c>
    d88c:	bl	4398 <abort@plt>
    d890:	ldr	r0, [pc, #28]	; d8b4 <rb_outofmemory+0x40>
    d894:	mov	r2, #1
    d898:	str	r2, [r3]
    d89c:	add	r0, pc, r0
    d8a0:	bl	48f0 <rb_lib_log@plt>
    d8a4:	ldr	r0, [pc, #12]	; d8b8 <rb_outofmemory+0x44>
    d8a8:	add	r0, pc, r0
    d8ac:	bl	4a34 <rb_lib_restart@plt>
    d8b0:	.word	0x0002aae8
    d8b4:	.word	0x00006a0d
    d8b8:	.word	0x00006a25

0000d8bc <rb_linebuf_skip_crlf>:
    d8bc:	mov	r3, r1
    d8c0:	cmp	r3, #0
    d8c4:	mov	r2, r0
    d8c8:	bne	d8d4 <rb_linebuf_skip_crlf+0x18>
    d8cc:	sub	r0, r1, r3
    d8d0:	bx	lr
    d8d4:	ldrb	ip, [r0], #1
    d8d8:	cmp	ip, #10
    d8dc:	cmpne	ip, #13
    d8e0:	subne	r3, r3, #1
    d8e4:	bne	d8c0 <rb_linebuf_skip_crlf+0x4>
    d8e8:	sub	r2, r2, #1
    d8ec:	ldrb	r0, [r2, #1]!
    d8f0:	cmp	r0, #13
    d8f4:	cmpne	r0, #10
    d8f8:	bne	d8cc <rb_linebuf_skip_crlf+0x10>
    d8fc:	subs	r3, r3, #1
    d900:	bne	d8ec <rb_linebuf_skip_crlf+0x30>
    d904:	b	d8cc <rb_linebuf_skip_crlf+0x10>

0000d908 <rb_linebuf_new_line>:
    d908:	push	{r4, r5, r6, lr}
    d90c:	mov	r4, r0
    d910:	ldr	r6, [pc, #132]	; d99c <rb_linebuf_new_line+0x94>
    d914:	add	r6, pc, r6
    d918:	ldr	r0, [r6]
    d91c:	bl	492c <rb_bh_alloc@plt>
    d920:	subs	r5, r0, #0
    d924:	beq	d994 <rb_linebuf_new_line+0x8c>
    d928:	ldr	r3, [r6, #4]
    d92c:	add	r3, r3, #1
    d930:	str	r3, [r6, #4]
    d934:	bl	4b54 <rb_make_rb_dlink_node@plt>
    d938:	mov	r3, #0
    d93c:	str	r5, [r0]
    d940:	str	r3, [r0, #8]
    d944:	ldr	r3, [r4, #4]
    d948:	cmp	r3, #0
    d94c:	str	r3, [r0, #4]
    d950:	strne	r0, [r3, #8]
    d954:	bne	d964 <rb_linebuf_new_line+0x5c>
    d958:	ldr	r3, [r4]
    d95c:	cmp	r3, #0
    d960:	streq	r0, [r4]
    d964:	ldr	r3, [r4, #8]
    d968:	add	r3, r3, #1
    d96c:	stmib	r4, {r0, r3}
    d970:	ldr	r3, [r5, #1032]	; 0x408
    d974:	add	r3, r3, #1
    d978:	str	r3, [r5, #1032]	; 0x408
    d97c:	ldr	r3, [r4, #16]
    d980:	add	r3, r3, #1
    d984:	str	r3, [r4, #16]
    d988:	ldr	r3, [r4, #24]
    d98c:	add	r3, r3, #1
    d990:	str	r3, [r4, #24]
    d994:	mov	r0, r5
    d998:	pop	{r4, r5, r6, pc}
    d99c:	.word	0x0002aa54

0000d9a0 <rb_linebuf_done_line>:
    d9a0:	push	{r4, r5, r6, lr}
    d9a4:	mov	r5, r1
    d9a8:	mov	r4, r0
    d9ac:	ldmib	r2, {r1, r3}
    d9b0:	cmp	r3, #0
    d9b4:	strne	r1, [r3, #4]
    d9b8:	streq	r1, [r0, #4]
    d9bc:	ldr	r1, [r2, #4]
    d9c0:	cmp	r1, #0
    d9c4:	streq	r3, [r0]
    d9c8:	mov	r0, r2
    d9cc:	strne	r3, [r1, #8]
    d9d0:	mov	r3, #0
    d9d4:	str	r3, [r2, #4]
    d9d8:	str	r3, [r2, #8]
    d9dc:	ldr	r3, [r4, #8]
    d9e0:	sub	r3, r3, #1
    d9e4:	str	r3, [r4, #8]
    d9e8:	bl	4818 <rb_free_rb_dlink_node@plt>
    d9ec:	ldr	r3, [r4, #16]
    d9f0:	ldr	r2, [r5, #1028]	; 0x404
    d9f4:	sub	r3, r3, #1
    d9f8:	str	r3, [r4, #16]
    d9fc:	ldr	r3, [r4, #12]
    da00:	sub	r3, r3, r2
    da04:	str	r3, [r4, #12]
    da08:	ldr	r3, [r4, #24]
    da0c:	sub	r3, r3, #1
    da10:	str	r3, [r4, #24]
    da14:	ldr	r3, [r5, #1032]	; 0x408
    da18:	sub	r3, r3, #1
    da1c:	cmp	r3, #0
    da20:	str	r3, [r5, #1032]	; 0x408
    da24:	popne	{r4, r5, r6, pc}
    da28:	mov	r1, r5
    da2c:	pop	{r4, r5, r6, lr}
    da30:	ldr	r3, [pc, #16]	; da48 <rb_linebuf_done_line+0xa8>
    da34:	add	r3, pc, r3
    da38:	ldm	r3, {r0, r2}
    da3c:	sub	r2, r2, #1
    da40:	str	r2, [r3, #4]
    da44:	b	48a8 <rb_bh_free@plt>
    da48:	.word	0x0002a934

0000da4c <rb_linebuf_copy_line.isra.1>:
    da4c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    da50:	mov	r6, #0
    da54:	mov	r4, r1
    da58:	ldr	r8, [r1, #1028]	; 0x404
    da5c:	strb	r6, [r1, #1026]	; 0x402
    da60:	add	sl, r1, r8
    da64:	ldrb	r1, [r1, #1025]	; 0x401
    da68:	cmp	r1, #1
    da6c:	moveq	r5, r6
    da70:	beq	dafc <rb_linebuf_copy_line.isra.1+0xb0>
    da74:	mov	r1, r3
    da78:	mov	r7, r0
    da7c:	mov	r0, r2
    da80:	mov	r9, r2
    da84:	bl	d8bc <rb_linebuf_skip_crlf>
    da88:	cmn	r0, #1
    da8c:	mov	r5, r0
    da90:	beq	dafc <rb_linebuf_copy_line.isra.1+0xb0>
    da94:	rsb	r8, r8, #1020	; 0x3fc
    da98:	add	r8, r8, #2
    da9c:	cmp	r0, r8
    daa0:	ble	db0c <rb_linebuf_copy_line.isra.1+0xc0>
    daa4:	mov	r2, r8
    daa8:	mov	r1, r9
    daac:	mov	r0, sl
    dab0:	bl	47dc <memcpy@plt>
    dab4:	movw	r3, #1021	; 0x3fd
    dab8:	strb	r6, [r4, #1022]	; 0x3fe
    dabc:	sub	r8, r3, r8
    dac0:	add	r2, r4, r3
    dac4:	add	r8, r4, r8
    dac8:	cmp	r2, r8
    dacc:	beq	dae0 <rb_linebuf_copy_line.isra.1+0x94>
    dad0:	ldrb	r3, [r2]
    dad4:	cmp	r3, #10
    dad8:	cmpne	r3, #13
    dadc:	beq	db04 <rb_linebuf_copy_line.isra.1+0xb8>
    dae0:	mov	r3, #1
    dae4:	movw	r2, #1022	; 0x3fe
    dae8:	strb	r3, [r4, #1025]	; 0x401
    daec:	str	r2, [r4, #1028]	; 0x404
    daf0:	ldr	r3, [r7]
    daf4:	add	r3, r3, r2
    daf8:	str	r3, [r7]
    dafc:	mov	r0, r5
    db00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    db04:	strb	r6, [r2], #-1
    db08:	b	dac8 <rb_linebuf_copy_line.isra.1+0x7c>
    db0c:	mov	r2, r0
    db10:	mov	r1, r9
    db14:	mov	r0, sl
    db18:	bl	47dc <memcpy@plt>
    db1c:	add	r2, sl, r5
    db20:	strb	r6, [sl, r5]
    db24:	ldrb	r3, [r2, #-1]
    db28:	cmp	r3, #13
    db2c:	cmpne	r3, #10
    db30:	movne	r3, #1
    db34:	moveq	r3, #0
    db38:	subeq	r2, r2, #1
    db3c:	moveq	r1, r5
    db40:	beq	db6c <rb_linebuf_copy_line.isra.1+0x120>
    db44:	ldr	r3, [r7]
    db48:	add	r3, r3, r5
    db4c:	str	r3, [r7]
    db50:	ldr	r3, [r4, #1028]	; 0x404
    db54:	strb	r6, [r4, #1025]	; 0x401
    db58:	add	r3, r3, r5
    db5c:	str	r3, [r4, #1028]	; 0x404
    db60:	b	dafc <rb_linebuf_copy_line.isra.1+0xb0>
    db64:	sub	r1, r1, #1
    db68:	strb	r3, [r2], #-1
    db6c:	cmp	r1, #0
    db70:	beq	db84 <rb_linebuf_copy_line.isra.1+0x138>
    db74:	ldrb	r0, [r2]
    db78:	cmp	r0, #10
    db7c:	cmpne	r0, #13
    db80:	beq	db64 <rb_linebuf_copy_line.isra.1+0x118>
    db84:	mov	r3, #1
    db88:	strb	r3, [r4, #1025]	; 0x401
    db8c:	ldr	r3, [r7]
    db90:	add	r3, r3, r1
    db94:	str	r3, [r7]
    db98:	ldr	r3, [r4, #1028]	; 0x404
    db9c:	add	r1, r3, r1
    dba0:	str	r1, [r4, #1028]	; 0x404
    dba4:	b	dafc <rb_linebuf_copy_line.isra.1+0xb0>

0000dba8 <rb_linebuf_copy_raw.isra.2>:
    dba8:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dbac:	mov	sl, #1
    dbb0:	mov	r4, r1
    dbb4:	ldr	r7, [r1, #1028]	; 0x404
    dbb8:	strb	sl, [r1, #1026]	; 0x402
    dbbc:	add	r9, r1, r7
    dbc0:	ldrb	r1, [r1, #1025]	; 0x401
    dbc4:	cmp	r1, sl
    dbc8:	moveq	r5, #0
    dbcc:	beq	dc30 <rb_linebuf_copy_raw.isra.2+0x88>
    dbd0:	mov	r1, r3
    dbd4:	mov	r6, r0
    dbd8:	mov	r0, r2
    dbdc:	mov	r8, r2
    dbe0:	bl	d8bc <rb_linebuf_skip_crlf>
    dbe4:	cmn	r0, #1
    dbe8:	mov	r5, r0
    dbec:	beq	dc30 <rb_linebuf_copy_raw.isra.2+0x88>
    dbf0:	movw	fp, #1022	; 0x3fe
    dbf4:	sub	r7, fp, r7
    dbf8:	cmp	r0, r7
    dbfc:	ble	dc3c <rb_linebuf_copy_raw.isra.2+0x94>
    dc00:	mov	r2, r7
    dc04:	mov	r1, r8
    dc08:	mov	r0, r9
    dc0c:	mov	r5, r7
    dc10:	bl	47dc <memcpy@plt>
    dc14:	mov	r3, #0
    dc18:	strb	r3, [r4, #1022]	; 0x3fe
    dc1c:	strb	sl, [r4, #1025]	; 0x401
    dc20:	str	fp, [r4, #1028]	; 0x404
    dc24:	ldr	r3, [r6]
    dc28:	add	r3, r3, fp
    dc2c:	str	r3, [r6]
    dc30:	mov	r0, r5
    dc34:	add	sp, sp, #4
    dc38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc3c:	mov	r2, r0
    dc40:	mov	r1, r8
    dc44:	mov	r0, r9
    dc48:	bl	47dc <memcpy@plt>
    dc4c:	mov	r2, #0
    dc50:	add	r3, r9, r5
    dc54:	strb	r2, [r9, r5]
    dc58:	ldrb	r3, [r3, #-1]
    dc5c:	cmp	r3, #13
    dc60:	cmpne	r3, #10
    dc64:	ldrne	r3, [r6]
    dc68:	strbeq	sl, [r4, #1025]	; 0x401
    dc6c:	ldreq	r3, [r6]
    dc70:	addne	r3, r3, r5
    dc74:	addeq	r3, r3, r5
    dc78:	strne	r3, [r6]
    dc7c:	strbne	r2, [r4, #1025]	; 0x401
    dc80:	streq	r3, [r6]
    dc84:	ldr	r3, [r4, #1028]	; 0x404
    dc88:	add	r3, r3, r5
    dc8c:	str	r3, [r4, #1028]	; 0x404
    dc90:	b	dc30 <rb_linebuf_copy_raw.isra.2+0x88>

0000dc94 <rb_linebuf_init>:
    dc94:	ldr	r2, [pc, #32]	; dcbc <rb_linebuf_init+0x28>
    dc98:	mov	r1, r0
    dc9c:	movw	r0, #1036	; 0x40c
    dca0:	push	{r4, lr}
    dca4:	add	r2, pc, r2
    dca8:	bl	4a88 <rb_bh_create@plt>
    dcac:	ldr	r3, [pc, #12]	; dcc0 <rb_linebuf_init+0x2c>
    dcb0:	add	r3, pc, r3
    dcb4:	str	r0, [r3]
    dcb8:	pop	{r4, pc}
    dcbc:	.word	0x00006637
    dcc0:	.word	0x0002a6b8

0000dcc4 <rb_linebuf_newbuf>:
    dcc4:	mov	r2, #28
    dcc8:	mov	r1, #0
    dccc:	b	45fc <memset@plt>

0000dcd0 <rb_linebuf_donebuf>:
    dcd0:	push	{r4, lr}
    dcd4:	mov	r4, r0
    dcd8:	ldr	r2, [r4]
    dcdc:	cmp	r2, #0
    dce0:	popeq	{r4, pc}
    dce4:	mov	r0, r4
    dce8:	ldr	r1, [r2]
    dcec:	bl	d9a0 <rb_linebuf_done_line>
    dcf0:	b	dcd8 <rb_linebuf_donebuf+0x8>

0000dcf4 <rb_linebuf_parse>:
    dcf4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    dcf8:	mov	r7, r0
    dcfc:	mov	r6, r1
    dd00:	mov	r5, r2
    dd04:	mov	r8, r3
    dd08:	ldr	r4, [r0, #4]
    dd0c:	cmp	r4, #0
    dd10:	beq	dd64 <rb_linebuf_parse+0x70>
    dd14:	cmp	r8, #0
    dd18:	mov	r3, r2
    dd1c:	add	r0, r0, #12
    dd20:	mov	r2, r1
    dd24:	ldr	r1, [r4]
    dd28:	bne	dd44 <rb_linebuf_parse+0x50>
    dd2c:	bl	da4c <rb_linebuf_copy_line.isra.1>
    dd30:	cmn	r0, #1
    dd34:	bne	dd4c <rb_linebuf_parse+0x58>
    dd38:	mvn	r4, #0
    dd3c:	mov	r0, r4
    dd40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    dd44:	bl	dba8 <rb_linebuf_copy_raw.isra.2>
    dd48:	b	dd30 <rb_linebuf_parse+0x3c>
    dd4c:	cmp	r0, r5
    dd50:	moveq	r4, #1
    dd54:	beq	dd3c <rb_linebuf_parse+0x48>
    dd58:	sub	r5, r5, r0
    dd5c:	add	r6, r6, r0
    dd60:	mov	r4, #1
    dd64:	add	r9, r7, #12
    dd68:	cmp	r5, #0
    dd6c:	ble	dd3c <rb_linebuf_parse+0x48>
    dd70:	mov	r0, r7
    dd74:	bl	d908 <rb_linebuf_new_line>
    dd78:	cmp	r8, #0
    dd7c:	mov	r1, r0
    dd80:	mov	r3, r5
    dd84:	mov	r2, r6
    dd88:	mov	r0, r9
    dd8c:	bne	ddac <rb_linebuf_parse+0xb8>
    dd90:	bl	da4c <rb_linebuf_copy_line.isra.1>
    dd94:	cmn	r0, #1
    dd98:	beq	dd38 <rb_linebuf_parse+0x44>
    dd9c:	sub	r5, r5, r0
    dda0:	add	r6, r6, r0
    dda4:	add	r4, r4, #1
    dda8:	b	dd68 <rb_linebuf_parse+0x74>
    ddac:	bl	dba8 <rb_linebuf_copy_raw.isra.2>
    ddb0:	b	dd94 <rb_linebuf_parse+0xa0>

0000ddb4 <rb_linebuf_get>:
    ddb4:	push	{r4, r5, r6, r7, r8, lr}
    ddb8:	mov	r4, r3
    ddbc:	ldr	r3, [r0]
    ddc0:	ldr	r7, [sp, #24]
    ddc4:	cmp	r3, #0
    ddc8:	moveq	r4, r3
    ddcc:	beq	de44 <rb_linebuf_get+0x90>
    ddd0:	cmp	r4, #0
    ddd4:	mov	r6, r0
    ddd8:	ldr	r5, [r3]
    dddc:	mov	r8, r1
    dde0:	bne	ddf0 <rb_linebuf_get+0x3c>
    dde4:	ldrb	r3, [r5, #1025]	; 0x401
    dde8:	cmp	r3, #0
    ddec:	beq	de44 <rb_linebuf_get+0x90>
    ddf0:	ldr	r4, [r5, #1028]	; 0x404
    ddf4:	clz	r3, r7
    ddf8:	mov	r1, r5
    ddfc:	lsr	r3, r3, #5
    de00:	cmp	r4, r2
    de04:	subgt	r4, r2, #1
    de08:	ldrb	r2, [r5, #1026]	; 0x402
    de0c:	cmp	r2, #0
    de10:	moveq	r3, #0
    de14:	cmp	r3, #0
    de18:	movne	r3, r5
    de1c:	bne	de50 <rb_linebuf_get+0x9c>
    de20:	mov	r2, r4
    de24:	mov	r0, r8
    de28:	bl	47dc <memcpy@plt>
    de2c:	cmp	r7, #0
    de30:	mov	r1, r5
    de34:	mov	r0, r6
    de38:	strbeq	r7, [r8, r4]
    de3c:	ldr	r2, [r6]
    de40:	bl	d9a0 <rb_linebuf_done_line>
    de44:	mov	r0, r4
    de48:	pop	{r4, r5, r6, r7, r8, pc}
    de4c:	sub	r4, r4, #1
    de50:	cmp	r4, #0
    de54:	mov	r1, r3
    de58:	beq	de6c <rb_linebuf_get+0xb8>
    de5c:	ldrb	r2, [r3], #1
    de60:	cmp	r2, #10
    de64:	cmpne	r2, #13
    de68:	beq	de4c <rb_linebuf_get+0x98>
    de6c:	add	r2, r1, r4
    de70:	cmp	r4, #0
    de74:	beq	de20 <rb_linebuf_get+0x6c>
    de78:	ldrb	r3, [r2, #-1]!
    de7c:	cmp	r3, #10
    de80:	cmpne	r3, #13
    de84:	bne	de20 <rb_linebuf_get+0x6c>
    de88:	sub	r4, r4, #1
    de8c:	b	de70 <rb_linebuf_get+0xbc>

0000de90 <rb_linebuf_attach>:
    de90:	push	{r4, r5, r6, r7, r8, lr}
    de94:	mov	r4, r0
    de98:	mov	r7, #0
    de9c:	ldr	r5, [r1]
    dea0:	cmp	r5, #0
    dea4:	popeq	{r4, r5, r6, r7, r8, pc}
    dea8:	ldr	r6, [r5]
    deac:	bl	4b54 <rb_make_rb_dlink_node@plt>
    deb0:	ldr	r3, [r4, #4]
    deb4:	str	r6, [r0]
    deb8:	cmp	r3, #0
    debc:	stmib	r0, {r3, r7}
    dec0:	strne	r0, [r3, #8]
    dec4:	bne	ded4 <rb_linebuf_attach+0x44>
    dec8:	ldr	r3, [r4]
    decc:	cmp	r3, #0
    ded0:	streq	r0, [r4]
    ded4:	ldr	r3, [r4, #8]
    ded8:	ldr	r5, [r5, #8]
    dedc:	ldr	r2, [r6, #1028]	; 0x404
    dee0:	add	r3, r3, #1
    dee4:	stmib	r4, {r0, r3}
    dee8:	ldr	r3, [r4, #16]
    deec:	add	r3, r3, #1
    def0:	str	r3, [r4, #16]
    def4:	ldr	r3, [r4, #12]
    def8:	add	r3, r3, r2
    defc:	str	r3, [r4, #12]
    df00:	ldr	r3, [r4, #24]
    df04:	add	r3, r3, #1
    df08:	str	r3, [r4, #24]
    df0c:	ldr	r3, [r6, #1032]	; 0x408
    df10:	add	r3, r3, #1
    df14:	str	r3, [r6, #1032]	; 0x408
    df18:	b	dea0 <rb_linebuf_attach+0x10>

0000df1c <rb_linebuf_put>:
    df1c:	push	{r4, r5, r6, lr}
    df20:	mov	r6, r1
    df24:	mov	r5, r0
    df28:	bl	d908 <rb_linebuf_new_line>
    df2c:	mov	r2, r6
    df30:	movw	r1, #1023	; 0x3ff
    df34:	mov	r4, r0
    df38:	bl	4668 <rb_fsnprint@plt>
    df3c:	cmp	r0, #0
    df40:	movle	r0, #0
    df44:	ble	df54 <rb_linebuf_put+0x38>
    df48:	movw	r3, #1022	; 0x3fe
    df4c:	cmp	r0, r3
    df50:	movge	r0, r3
    df54:	mov	r3, r4
    df58:	mov	r2, #13
    df5c:	strb	r2, [r3, r0]!
    df60:	mov	r2, #10
    df64:	add	r0, r0, #2
    df68:	strb	r2, [r3, #1]
    df6c:	mov	r3, #0
    df70:	strb	r3, [r4, r0]
    df74:	mov	r3, #1
    df78:	strb	r3, [r4, #1025]	; 0x401
    df7c:	ldr	r3, [r5, #12]
    df80:	str	r0, [r4, #1028]	; 0x404
    df84:	add	r0, r3, r0
    df88:	str	r0, [r5, #12]
    df8c:	pop	{r4, r5, r6, pc}

0000df90 <rb_linebuf_flush>:
    df90:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    df94:	mov	r5, r0
    df98:	mov	r4, r1
    df9c:	bl	4488 <rb_fd_ssl@plt>
    dfa0:	subs	r8, r0, #0
    dfa4:	bne	e0c4 <rb_linebuf_flush+0x134>
    dfa8:	ldr	r3, [pc, #388]	; e134 <rb_linebuf_flush+0x1a4>
    dfac:	mov	r2, #8192	; 0x2000
    dfb0:	mov	r1, r8
    dfb4:	add	r3, pc, r3
    dfb8:	mov	r0, r3
    dfbc:	bl	45fc <memset@plt>
    dfc0:	ldr	r2, [r4]
    dfc4:	mov	r3, r0
    dfc8:	cmp	r2, #0
    dfcc:	bne	dfe4 <rb_linebuf_flush+0x54>
    dfd0:	bl	4cbc <__errno_location@plt>
    dfd4:	mov	r3, #11
    dfd8:	mvn	r5, #0
    dfdc:	str	r3, [r0]
    dfe0:	b	e0b0 <rb_linebuf_flush+0x120>
    dfe4:	ldr	r0, [r2]
    dfe8:	ldrb	r1, [r0, #1025]	; 0x401
    dfec:	cmp	r1, #0
    dff0:	beq	dfd0 <rb_linebuf_flush+0x40>
    dff4:	ldr	ip, [r4, #20]
    dff8:	mov	r6, #1
    dffc:	ldr	r2, [r2, #8]
    e000:	add	r1, r0, ip
    e004:	str	r1, [r3]
    e008:	ldr	r1, [r0, #1028]	; 0x404
    e00c:	sub	r1, r1, ip
    e010:	str	r1, [r3, #4]
    e014:	cmp	r2, #0
    e018:	beq	e04c <rb_linebuf_flush+0xbc>
    e01c:	ldr	r1, [r2]
    e020:	ldrb	r0, [r1, #1025]	; 0x401
    e024:	cmp	r0, #0
    e028:	beq	e04c <rb_linebuf_flush+0xbc>
    e02c:	str	r1, [r3, #8]
    e030:	add	r6, r6, #1
    e034:	add	r3, r3, #8
    e038:	ldr	r1, [r1, #1028]	; 0x404
    e03c:	cmp	r6, #1024	; 0x400
    e040:	ldr	r2, [r2, #8]
    e044:	str	r1, [r3, #4]
    e048:	bne	e014 <rb_linebuf_flush+0x84>
    e04c:	ldr	r1, [pc, #228]	; e138 <rb_linebuf_flush+0x1a8>
    e050:	mov	r0, r5
    e054:	mov	r2, r6
    e058:	add	r1, pc, r1
    e05c:	bl	4aac <rb_writev@plt>
    e060:	subs	r5, r0, #0
    e064:	ble	e0b0 <rb_linebuf_flush+0x120>
    e068:	ldr	r9, [r4]
    e06c:	mov	r7, r5
    e070:	mov	sl, #0
    e074:	ldr	r1, [r9]
    e078:	ldr	r3, [r4, #20]
    e07c:	ldr	r2, [r1, #1028]	; 0x404
    e080:	sub	r2, r2, r3
    e084:	cmp	r2, r7
    e088:	bgt	e0b8 <rb_linebuf_flush+0x128>
    e08c:	sub	r7, r7, r2
    e090:	mov	r0, r4
    e094:	ldr	r2, [r4]
    e098:	add	r8, r8, #1
    e09c:	ldr	r9, [r9, #8]
    e0a0:	bl	d9a0 <rb_linebuf_done_line>
    e0a4:	cmp	r6, r8
    e0a8:	str	sl, [r4, #20]
    e0ac:	bne	e074 <rb_linebuf_flush+0xe4>
    e0b0:	mov	r0, r5
    e0b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e0b8:	add	r3, r3, r7
    e0bc:	str	r3, [r4, #20]
    e0c0:	b	e0b0 <rb_linebuf_flush+0x120>
    e0c4:	ldr	r3, [r4]
    e0c8:	cmp	r3, #0
    e0cc:	beq	dfd0 <rb_linebuf_flush+0x40>
    e0d0:	ldr	r6, [r3]
    e0d4:	ldrb	r3, [r6, #1025]	; 0x401
    e0d8:	cmp	r3, #0
    e0dc:	beq	dfd0 <rb_linebuf_flush+0x40>
    e0e0:	ldr	r1, [r4, #20]
    e0e4:	mov	r0, r5
    e0e8:	ldr	r2, [r6, #1028]	; 0x404
    e0ec:	sub	r2, r2, r1
    e0f0:	add	r1, r6, r1
    e0f4:	bl	462c <rb_write@plt>
    e0f8:	subs	r5, r0, #0
    e0fc:	ble	e0b0 <rb_linebuf_flush+0x120>
    e100:	ldr	r3, [r4, #20]
    e104:	ldr	r2, [r6, #1028]	; 0x404
    e108:	add	r3, r5, r3
    e10c:	cmp	r3, r2
    e110:	str	r3, [r4, #20]
    e114:	bne	e0b0 <rb_linebuf_flush+0x120>
    e118:	mov	r3, #0
    e11c:	mov	r1, r6
    e120:	ldr	r2, [r4]
    e124:	mov	r0, r4
    e128:	str	r3, [r4, #20]
    e12c:	bl	d9a0 <rb_linebuf_done_line>
    e130:	b	e0b0 <rb_linebuf_flush+0x120>
    e134:	.word	0x0002a3bc
    e138:	.word	0x0002a318

0000e13c <rb_count_rb_linebuf_memory>:
    e13c:	push	{r0, r1, r2, lr}
    e140:	mov	r3, r1
    e144:	mov	r1, r0
    e148:	mov	r2, #0
    e14c:	ldr	r0, [pc, #20]	; e168 <rb_count_rb_linebuf_memory+0x2c>
    e150:	str	r2, [sp]
    e154:	add	r0, pc, r0
    e158:	ldr	r0, [r0]
    e15c:	bl	4ce0 <rb_bh_usage@plt>
    e160:	add	sp, sp, #12
    e164:	pop	{pc}		; (ldr pc, [sp], #4)
    e168:	.word	0x0002a214

0000e16c <rb_strdup>:
    e16c:	push	{r4, r5, r6, lr}
    e170:	mov	r5, r0
    e174:	bl	47b8 <strlen@plt>
    e178:	add	r0, r0, #1
    e17c:	bl	4980 <malloc@plt>
    e180:	subs	r4, r0, #0
    e184:	bne	e18c <rb_strdup+0x20>
    e188:	bl	495c <rb_outofmemory@plt>
    e18c:	mov	r1, r5
    e190:	bl	4860 <strcpy@plt>
    e194:	mov	r0, r4
    e198:	pop	{r4, r5, r6, pc}

0000e19c <rb_init_rb_dlink_nodes>:
    e19c:	ldr	r2, [pc, #40]	; e1cc <rb_init_rb_dlink_nodes+0x30>
    e1a0:	mov	r1, r0
    e1a4:	mov	r0, #12
    e1a8:	push	{r4, lr}
    e1ac:	add	r2, pc, r2
    e1b0:	bl	4a88 <rb_bh_create@plt>
    e1b4:	ldr	r3, [pc, #20]	; e1d0 <rb_init_rb_dlink_nodes+0x34>
    e1b8:	cmp	r0, #0
    e1bc:	add	r3, pc, r3
    e1c0:	str	r0, [r3]
    e1c4:	popne	{r4, pc}
    e1c8:	bl	495c <rb_outofmemory@plt>
    e1cc:	.word	0x00006142
    e1d0:	.word	0x0002c1b4

0000e1d4 <rb_make_rb_dlink_node>:
    e1d4:	ldr	r3, [pc, #4]	; e1e0 <rb_make_rb_dlink_node+0xc>
    e1d8:	ldr	r0, [pc, r3]
    e1dc:	b	492c <rb_bh_alloc@plt>
    e1e0:	.word	0x0002c198

0000e1e4 <rb_free_rb_dlink_node>:
    e1e4:	ldr	r3, [pc, #8]	; e1f4 <rb_free_rb_dlink_node+0x10>
    e1e8:	mov	r1, r0
    e1ec:	ldr	r0, [pc, r3]
    e1f0:	b	48a8 <rb_bh_free@plt>
    e1f4:	.word	0x0002c184

0000e1f8 <rb_string_to_array>:
    e1f8:	cmp	r0, #0
    e1fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e200:	moveq	r4, r0
    e204:	beq	e264 <rb_string_to_array+0x6c>
    e208:	ldrb	r4, [r0]
    e20c:	cmp	r4, #0
    e210:	beq	e264 <rb_string_to_array+0x6c>
    e214:	mov	r4, r0
    e218:	ldrb	r3, [r4]
    e21c:	mov	r0, r4
    e220:	add	r4, r4, #1
    e224:	cmp	r3, #32
    e228:	beq	e218 <rb_string_to_array+0x20>
    e22c:	cmp	r3, #0
    e230:	moveq	r4, r3
    e234:	beq	e264 <rb_string_to_array+0x6c>
    e238:	mov	r5, #0
    e23c:	mov	r6, r1
    e240:	mov	r7, r1
    e244:	mov	r8, r5
    e248:	sub	r9, r2, #1
    e24c:	ldrb	r3, [r0]
    e250:	add	r4, r5, #1
    e254:	cmp	r3, #58	; 0x3a
    e258:	bne	e274 <rb_string_to_array+0x7c>
    e25c:	add	r0, r0, #1
    e260:	str	r0, [r7]
    e264:	mov	r0, r4
    e268:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e26c:	mov	r5, r4
    e270:	b	e24c <rb_string_to_array+0x54>
    e274:	mov	r1, #32
    e278:	str	r0, [r7], #4
    e27c:	bl	4584 <strchr@plt>
    e280:	subs	ip, r0, #0
    e284:	beq	e264 <rb_string_to_array+0x6c>
    e288:	mov	r3, ip
    e28c:	strb	r8, [r3], #1
    e290:	mov	lr, r3
    e294:	mov	r0, lr
    e298:	ldrb	r2, [lr], #1
    e29c:	cmp	r2, #32
    e2a0:	beq	e294 <rb_string_to_array+0x9c>
    e2a4:	cmp	r2, #0
    e2a8:	beq	e264 <rb_string_to_array+0x6c>
    e2ac:	cmp	r9, r4
    e2b0:	bgt	e26c <rb_string_to_array+0x74>
    e2b4:	ldrb	r2, [ip, #1]
    e2b8:	cmp	r2, #58	; 0x3a
    e2bc:	addeq	r3, ip, #2
    e2c0:	str	r3, [r6, r4, lsl #2]
    e2c4:	add	r4, r5, #2
    e2c8:	b	e264 <rb_string_to_array+0x6c>

0000e2cc <rb_strcasecmp>:
    e2cc:	b	459c <strcasecmp@plt>

0000e2d0 <rb_strncasecmp>:
    e2d0:	b	4950 <strncasecmp@plt>

0000e2d4 <rb_strcasestr>:
    e2d4:	b	43ec <strcasestr@plt>

0000e2d8 <rb_strlcat>:
    e2d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e2dc:	mov	r8, r1
    e2e0:	mov	r6, r2
    e2e4:	mov	r5, r0
    e2e8:	bl	47b8 <strlen@plt>
    e2ec:	mov	r7, r0
    e2f0:	mov	r0, r8
    e2f4:	bl	47b8 <strlen@plt>
    e2f8:	sub	r2, r6, r7
    e2fc:	add	r5, r5, r7
    e300:	cmp	r0, r2
    e304:	add	r9, r7, r0
    e308:	movcc	r4, r0
    e30c:	subcs	r4, r2, #1
    e310:	mov	r2, r4
    e314:	mov	r1, r8
    e318:	mov	r0, r5
    e31c:	bl	47dc <memcpy@plt>
    e320:	mov	r2, #0
    e324:	mov	r0, r9
    e328:	strb	r2, [r5, r4]
    e32c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0000e330 <rb_strlcpy>:
    e330:	push	{r4, r5, r6, r7, r8, lr}
    e334:	mov	r4, r2
    e338:	mov	r6, r0
    e33c:	mov	r0, r1
    e340:	mov	r7, r1
    e344:	bl	47b8 <strlen@plt>
    e348:	cmp	r4, #0
    e34c:	mov	r5, r0
    e350:	beq	e378 <rb_strlcpy+0x48>
    e354:	cmp	r0, r4
    e358:	mov	r1, r7
    e35c:	movcc	r4, r0
    e360:	subcs	r4, r4, #1
    e364:	mov	r2, r4
    e368:	mov	r0, r6
    e36c:	bl	47dc <memcpy@plt>
    e370:	mov	r3, #0
    e374:	strb	r3, [r6, r4]
    e378:	mov	r0, r5
    e37c:	pop	{r4, r5, r6, r7, r8, pc}

0000e380 <rb_strnlen>:
    e380:	b	49ec <strnlen@plt>

0000e384 <rb_snprintf_append>:
    e384:	push	{r2, r3}
    e388:	push	{r0, r1, r4, r5, r6, lr}
    e38c:	subs	r4, r1, #0
    e390:	mvneq	r0, #0
    e394:	beq	e3d8 <rb_snprintf_append+0x54>
    e398:	mov	r6, r0
    e39c:	bl	47b8 <strlen@plt>
    e3a0:	cmp	r4, r0
    e3a4:	mov	r5, r0
    e3a8:	movlt	r3, #0
    e3ac:	sublt	r0, r4, #1
    e3b0:	strblt	r3, [r6, r0]
    e3b4:	blt	e3d8 <rb_snprintf_append+0x54>
    e3b8:	add	r3, sp, #28
    e3bc:	sub	r1, r4, r5
    e3c0:	ldr	r2, [sp, #24]
    e3c4:	add	r0, r6, r5
    e3c8:	str	r3, [sp, #4]
    e3cc:	bl	4530 <vsnprintf@plt>
    e3d0:	cmp	r0, #0
    e3d4:	addge	r0, r0, r5
    e3d8:	add	sp, sp, #8
    e3dc:	pop	{r4, r5, r6, lr}
    e3e0:	add	sp, sp, #8
    e3e4:	bx	lr

0000e3e8 <rb_snprintf_try_append>:
    e3e8:	push	{r2, r3}
    e3ec:	push	{r0, r1, r4, r5, r6, lr}
    e3f0:	subs	r4, r1, #0
    e3f4:	beq	e450 <rb_snprintf_try_append+0x68>
    e3f8:	mov	r5, r0
    e3fc:	bl	47b8 <strlen@plt>
    e400:	cmp	r4, r0
    e404:	mov	r6, r0
    e408:	addlt	r4, r5, r4
    e40c:	movlt	r3, #0
    e410:	strblt	r3, [r4, #-1]
    e414:	blt	e450 <rb_snprintf_try_append+0x68>
    e418:	add	r3, sp, #28
    e41c:	sub	r1, r4, r0
    e420:	ldr	r2, [sp, #24]
    e424:	add	r0, r5, r0
    e428:	str	r3, [sp, #4]
    e42c:	bl	4530 <vsnprintf@plt>
    e430:	cmp	r0, #0
    e434:	blt	e454 <rb_snprintf_try_append+0x6c>
    e438:	add	r0, r0, r6
    e43c:	sub	r4, r4, #1
    e440:	cmp	r0, r4
    e444:	ble	e454 <rb_snprintf_try_append+0x6c>
    e448:	mov	r3, #0
    e44c:	strb	r3, [r5, r6]
    e450:	mvn	r0, #0
    e454:	add	sp, sp, #8
    e458:	pop	{r4, r5, r6, lr}
    e45c:	add	sp, sp, #8
    e460:	bx	lr

0000e464 <rb_basename>:
    e464:	push	{r4, lr}
    e468:	mov	r1, #47	; 0x2f
    e46c:	mov	r4, r0
    e470:	bl	4620 <strrchr@plt>
    e474:	cmp	r0, #0
    e478:	addne	r4, r0, #1
    e47c:	mov	r0, r4
    e480:	pop	{r4, lr}
    e484:	b	e16c <rb_strdup>

0000e488 <rb_dirname>:
    e488:	push	{r4, r5, r6, lr}
    e48c:	mov	r1, #47	; 0x2f
    e490:	mov	r5, r0
    e494:	bl	4620 <strrchr@plt>
    e498:	cmp	r0, #0
    e49c:	bne	e4c4 <rb_dirname+0x3c>
    e4a0:	ldr	r0, [pc, #84]	; e4fc <rb_dirname+0x74>
    e4a4:	pop	{r4, r5, r6, lr}
    e4a8:	add	r0, pc, r0
    e4ac:	b	e16c <rb_strdup>
    e4b0:	mov	r3, r0
    e4b4:	ldrb	r2, [r3], #-1
    e4b8:	cmp	r2, #47	; 0x2f
    e4bc:	bne	e4cc <rb_dirname+0x44>
    e4c0:	mov	r0, r3
    e4c4:	cmp	r0, r5
    e4c8:	bhi	e4b0 <rb_dirname+0x28>
    e4cc:	rsb	r4, r5, #2
    e4d0:	add	r4, r4, r0
    e4d4:	mov	r0, r4
    e4d8:	bl	4980 <malloc@plt>
    e4dc:	subs	r6, r0, #0
    e4e0:	bne	e4e8 <rb_dirname+0x60>
    e4e4:	bl	495c <rb_outofmemory@plt>
    e4e8:	mov	r2, r4
    e4ec:	mov	r1, r5
    e4f0:	bl	4674 <rb_strlcpy@plt>
    e4f4:	mov	r0, r6
    e4f8:	pop	{r4, r5, r6, pc}
    e4fc:	.word	0x00005e23

0000e500 <rb_fsnprint>:
    e500:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e504:	mov	r8, r0
    e508:	mov	r7, r1
    e50c:	mov	r6, r2
    e510:	mov	r4, r1
    e514:	mov	r5, #0
    e518:	sub	r9, r1, #1
    e51c:	cmp	r6, #0
    e520:	beq	e544 <rb_fsnprint+0x44>
    e524:	ldr	r3, [r6]
    e528:	cmp	r3, #0
    e52c:	beq	e53c <rb_fsnprint+0x3c>
    e530:	sub	r4, r7, r5
    e534:	cmp	r3, r4
    e538:	bls	e54c <rb_fsnprint+0x4c>
    e53c:	cmp	r4, #0
    e540:	bne	e550 <rb_fsnprint+0x50>
    e544:	mov	r0, r5
    e548:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e54c:	mov	r4, r3
    e550:	ldr	r1, [r6, #4]
    e554:	cmp	r1, #0
    e558:	beq	e5c0 <rb_fsnprint+0xc0>
    e55c:	ldr	r3, [r6, #12]
    e560:	add	r0, r8, r5
    e564:	cmp	r3, #0
    e568:	beq	e5b4 <rb_fsnprint+0xb4>
    e56c:	mov	r2, r1
    e570:	mov	r1, r4
    e574:	ldr	r3, [r3]
    e578:	bl	4530 <vsnprintf@plt>
    e57c:	cmp	r0, #0
    e580:	poplt	{r4, r5, r6, r7, r8, r9, sl, pc}
    e584:	sub	r3, r4, #1
    e588:	cmp	r3, r0
    e58c:	subcc	r5, r5, #1
    e590:	addcs	r3, r0, r5
    e594:	addcc	r3, r5, r4
    e598:	mov	r5, r9
    e59c:	cmp	r9, r3
    e5a0:	bls	e544 <rb_fsnprint+0x44>
    e5a4:	sub	r4, r4, r0
    e5a8:	mov	r5, r3
    e5ac:	ldr	r6, [r6, #16]
    e5b0:	b	e51c <rb_fsnprint+0x1c>
    e5b4:	mov	r2, r4
    e5b8:	bl	4674 <rb_strlcpy@plt>
    e5bc:	b	e57c <rb_fsnprint+0x7c>
    e5c0:	ldr	r3, [r6, #8]
    e5c4:	cmp	r3, #0
    e5c8:	beq	e5e0 <rb_fsnprint+0xe0>
    e5cc:	mov	r1, r4
    e5d0:	add	r0, r8, r5
    e5d4:	ldr	r2, [r6, #12]
    e5d8:	blx	r3
    e5dc:	b	e57c <rb_fsnprint+0x7c>
    e5e0:	mov	r0, r3
    e5e4:	b	e584 <rb_fsnprint+0x84>

0000e5e8 <rb_fsnprintf>:
    e5e8:	mov	ip, #0
    e5ec:	push	{r3}		; (str r3, [sp, #-4]!)
    e5f0:	push	{r0, r1, r2, r3, r4, r5, lr}
    e5f4:	add	r3, sp, #4
    e5f8:	str	ip, [sp, #4]
    e5fc:	str	ip, [sp, #12]
    e600:	ldr	ip, [sp, #28]
    e604:	str	r2, [sp, #20]
    e608:	add	r2, sp, #32
    e60c:	str	ip, [sp, #8]
    e610:	mov	ip, sp
    e614:	str	r2, [sp]
    e618:	mov	r2, r3
    e61c:	str	ip, [sp, #16]
    e620:	bl	4668 <rb_fsnprint@plt>
    e624:	add	sp, sp, #24
    e628:	pop	{lr}		; (ldr lr, [sp], #4)
    e62c:	add	sp, sp, #4
    e630:	bx	lr

0000e634 <rb_free>:
    e634:	cmp	r0, #0
    e638:	bxeq	lr
    e63c:	b	46c8 <free@plt>

0000e640 <rb_helper_child>:
    e640:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e644:	mov	r9, r0
    e648:	sub	sp, sp, #28
    e64c:	mov	sl, r2
    e650:	mov	fp, r3
    e654:	ldr	r0, [pc, #460]	; e828 <rb_helper_child+0x1e8>
    e658:	str	r1, [sp, #20]
    e65c:	add	r0, pc, r0
    e660:	bl	456c <getenv@plt>
    e664:	mov	r7, r0
    e668:	ldr	r0, [pc, #444]	; e82c <rb_helper_child+0x1ec>
    e66c:	add	r0, pc, r0
    e670:	bl	456c <getenv@plt>
    e674:	mov	r6, r0
    e678:	ldr	r0, [pc, #432]	; e830 <rb_helper_child+0x1f0>
    e67c:	clz	r4, r6
    e680:	lsr	r4, r4, #5
    e684:	add	r0, pc, r0
    e688:	bl	456c <getenv@plt>
    e68c:	cmp	r7, #0
    e690:	moveq	r4, #1
    e694:	cmp	r0, #0
    e698:	moveq	r4, #1
    e69c:	cmp	r4, #0
    e6a0:	bne	e820 <rb_helper_child+0x1e0>
    e6a4:	mov	r8, r0
    e6a8:	mov	r1, #84	; 0x54
    e6ac:	mov	r0, #1
    e6b0:	bl	45c0 <calloc@plt>
    e6b4:	subs	r5, r0, #0
    e6b8:	bne	e6c0 <rb_helper_child+0x80>
    e6bc:	bl	495c <rb_outofmemory@plt>
    e6c0:	mov	r2, #10
    e6c4:	mov	r1, r4
    e6c8:	mov	r0, r7
    e6cc:	bl	4848 <strtol@plt>
    e6d0:	mov	r7, r0
    e6d4:	mov	r2, #10
    e6d8:	mov	r1, r4
    e6dc:	mov	r0, r6
    e6e0:	bl	4848 <strtol@plt>
    e6e4:	mov	r6, r0
    e6e8:	mov	r2, #10
    e6ec:	mov	r0, r8
    e6f0:	mov	r1, r4
    e6f4:	bl	4848 <strtol@plt>
    e6f8:	mov	r8, r0
    e6fc:	cmp	r4, r8
    e700:	blt	e804 <rb_helper_child+0x1c4>
    e704:	ldr	r0, [pc, #296]	; e834 <rb_helper_child+0x1f4>
    e708:	mov	r1, #2
    e70c:	add	r0, pc, r0
    e710:	bl	4350 <open@plt>
    e714:	cmp	r7, #0
    e718:	cmpne	r6, #0
    e71c:	mov	r4, r0
    e720:	beq	e72c <rb_helper_child+0xec>
    e724:	mov	r1, #0
    e728:	bl	4a94 <dup2@plt>
    e72c:	cmp	r7, #1
    e730:	cmpne	r6, #1
    e734:	beq	e744 <rb_helper_child+0x104>
    e738:	mov	r1, #1
    e73c:	mov	r0, r4
    e740:	bl	4a94 <dup2@plt>
    e744:	cmp	r7, #2
    e748:	cmpne	r6, #2
    e74c:	beq	e75c <rb_helper_child+0x11c>
    e750:	mov	r1, #2
    e754:	mov	r0, r4
    e758:	bl	4a94 <dup2@plt>
    e75c:	cmp	r4, #2
    e760:	ble	e76c <rb_helper_child+0x12c>
    e764:	mov	r0, r4
    e768:	bl	4914 <close@plt>
    e76c:	mov	r1, fp
    e770:	mov	r0, sl
    e774:	str	r8, [sp]
    e778:	ldr	r3, [sp, #76]	; 0x4c
    e77c:	ldr	r2, [sp, #64]	; 0x40
    e780:	str	r3, [sp, #8]
    e784:	ldr	r3, [sp, #72]	; 0x48
    e788:	str	r3, [sp, #4]
    e78c:	mov	r3, #0
    e790:	bl	4a10 <rb_lib_init@plt>
    e794:	ldr	r0, [sp, #68]	; 0x44
    e798:	bl	4b24 <rb_linebuf_init@plt>
    e79c:	add	r0, r5, #4
    e7a0:	bl	4ac4 <rb_linebuf_newbuf@plt>
    e7a4:	add	r0, r5, #32
    e7a8:	bl	4ac4 <rb_linebuf_newbuf@plt>
    e7ac:	ldr	r2, [pc, #132]	; e838 <rb_helper_child+0x1f8>
    e7b0:	mov	r1, #8
    e7b4:	mov	r0, r7
    e7b8:	add	r2, pc, r2
    e7bc:	bl	4a58 <rb_open@plt>
    e7c0:	ldr	r2, [pc, #116]	; e83c <rb_helper_child+0x1fc>
    e7c4:	mov	r1, #8
    e7c8:	str	r0, [r5, #60]	; 0x3c
    e7cc:	mov	r0, r6
    e7d0:	add	r2, pc, r2
    e7d4:	bl	4a58 <rb_open@plt>
    e7d8:	str	r0, [r5, #64]	; 0x40
    e7dc:	ldr	r0, [r5, #60]	; 0x3c
    e7e0:	bl	45f0 <rb_set_nb@plt>
    e7e4:	ldr	r0, [r5, #64]	; 0x40
    e7e8:	bl	45f0 <rb_set_nb@plt>
    e7ec:	ldr	r3, [sp, #20]
    e7f0:	str	r9, [r5, #76]	; 0x4c
    e7f4:	str	r3, [r5, #80]	; 0x50
    e7f8:	mov	r0, r5
    e7fc:	add	sp, sp, #28
    e800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e804:	cmp	r4, r7
    e808:	cmpne	r4, r6
    e80c:	beq	e818 <rb_helper_child+0x1d8>
    e810:	mov	r0, r4
    e814:	bl	4914 <close@plt>
    e818:	add	r4, r4, #1
    e81c:	b	e6fc <rb_helper_child+0xbc>
    e820:	mov	r5, #0
    e824:	b	e7f8 <rb_helper_child+0x1b8>
    e828:	.word	0x00005ca3
    e82c:	.word	0x00005c97
    e830:	.word	0x00005c83
    e834:	.word	0x00005c01
    e838:	.word	0x00005b5f
    e83c:	.word	0x00005b5b

0000e840 <rb_helper_start>:
    e840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e844:	mov	r9, r1
    e848:	sub	sp, sp, #188	; 0xbc
    e84c:	mov	r8, r0
    e850:	mov	r1, #1
    e854:	mov	r0, r9
    e858:	mov	fp, r2
    e85c:	mov	sl, r3
    e860:	bl	4710 <access@plt>
    e864:	cmn	r0, #1
    e868:	beq	e8c0 <rb_helper_start+0x80>
    e86c:	mov	r1, #84	; 0x54
    e870:	mov	r0, #1
    e874:	bl	45c0 <calloc@plt>
    e878:	subs	r4, r0, #0
    e87c:	bne	e884 <rb_helper_start+0x44>
    e880:	bl	495c <rb_outofmemory@plt>
    e884:	ldr	r2, [pc, #448]	; ea4c <rb_helper_start+0x20c>
    e888:	add	r5, sp, #56	; 0x38
    e88c:	mov	r3, r8
    e890:	mov	r1, #128	; 0x80
    e894:	mov	r0, r5
    e898:	add	r2, pc, r2
    e89c:	bl	4b84 <snprintf@plt>
    e8a0:	mov	r2, r5
    e8a4:	add	r1, sp, #12
    e8a8:	add	r0, sp, #8
    e8ac:	bl	4944 <rb_pipe@plt>
    e8b0:	cmp	r0, #0
    e8b4:	bge	e8c8 <rb_helper_start+0x88>
    e8b8:	mov	r0, r4
    e8bc:	bl	e634 <rb_free>
    e8c0:	mov	r4, #0
    e8c4:	b	ea40 <rb_helper_start+0x200>
    e8c8:	ldr	r2, [pc, #384]	; ea50 <rb_helper_start+0x210>
    e8cc:	mov	r3, r8
    e8d0:	mov	r1, #128	; 0x80
    e8d4:	mov	r0, r5
    e8d8:	add	r2, pc, r2
    e8dc:	bl	4b84 <snprintf@plt>
    e8e0:	mov	r2, r5
    e8e4:	add	r1, sp, #20
    e8e8:	add	r0, sp, #16
    e8ec:	bl	4944 <rb_pipe@plt>
    e8f0:	cmp	r0, #0
    e8f4:	blt	e8b8 <rb_helper_start+0x78>
    e8f8:	ldr	r7, [pc, #340]	; ea54 <rb_helper_start+0x214>
    e8fc:	add	r6, sp, #24
    e900:	ldr	r0, [sp, #12]
    e904:	bl	44b8 <rb_get_fd@plt>
    e908:	mov	r3, r0
    e90c:	mov	r1, #16
    e910:	add	r7, pc, r7
    e914:	mov	r0, r6
    e918:	mov	r2, r7
    e91c:	bl	4b84 <snprintf@plt>
    e920:	ldr	r0, [sp, #16]
    e924:	bl	44b8 <rb_get_fd@plt>
    e928:	mov	r2, r7
    e92c:	add	r7, sp, #40	; 0x28
    e930:	mov	r3, r0
    e934:	mov	r1, #16
    e938:	mov	r0, r7
    e93c:	bl	4b84 <snprintf@plt>
    e940:	ldr	r0, [sp, #8]
    e944:	bl	45f0 <rb_set_nb@plt>
    e948:	ldr	r0, [sp, #12]
    e94c:	bl	45f0 <rb_set_nb@plt>
    e950:	ldr	r0, [sp, #16]
    e954:	bl	45f0 <rb_set_nb@plt>
    e958:	ldr	r0, [sp, #20]
    e95c:	bl	45f0 <rb_set_nb@plt>
    e960:	ldr	r0, [pc, #240]	; ea58 <rb_helper_start+0x218>
    e964:	mov	r2, #1
    e968:	mov	r1, r7
    e96c:	add	r0, pc, r0
    e970:	bl	44a0 <rb_setenv@plt>
    e974:	ldr	r0, [pc, #224]	; ea5c <rb_helper_start+0x21c>
    e978:	mov	r1, r6
    e97c:	mov	r2, #1
    e980:	add	r0, pc, r0
    e984:	bl	44a0 <rb_setenv@plt>
    e988:	ldr	r1, [pc, #208]	; ea60 <rb_helper_start+0x220>
    e98c:	mov	r2, #1
    e990:	ldr	r0, [pc, #204]	; ea64 <rb_helper_start+0x224>
    e994:	add	r1, pc, r1
    e998:	add	r0, pc, r0
    e99c:	bl	44a0 <rb_setenv@plt>
    e9a0:	ldr	r2, [pc, #192]	; ea68 <rb_helper_start+0x228>
    e9a4:	mov	r3, r8
    e9a8:	mov	r1, #128	; 0x80
    e9ac:	mov	r0, r5
    e9b0:	add	r2, pc, r2
    e9b4:	bl	4b84 <snprintf@plt>
    e9b8:	str	r5, [sp]
    e9bc:	mov	r5, #0
    e9c0:	mov	r1, sp
    e9c4:	mov	r0, r9
    e9c8:	str	r5, [sp, #4]
    e9cc:	bl	4b6c <rb_spawn_process@plt>
    e9d0:	cmn	r0, #1
    e9d4:	mov	r6, r0
    e9d8:	bne	ea00 <rb_helper_start+0x1c0>
    e9dc:	ldr	r0, [sp, #8]
    e9e0:	bl	483c <rb_close@plt>
    e9e4:	ldr	r0, [sp, #12]
    e9e8:	bl	483c <rb_close@plt>
    e9ec:	ldr	r0, [sp, #16]
    e9f0:	bl	483c <rb_close@plt>
    e9f4:	ldr	r0, [sp, #20]
    e9f8:	bl	483c <rb_close@plt>
    e9fc:	b	e8b8 <rb_helper_start+0x78>
    ea00:	ldr	r0, [sp, #12]
    ea04:	bl	483c <rb_close@plt>
    ea08:	ldr	r0, [sp, #16]
    ea0c:	bl	483c <rb_close@plt>
    ea10:	add	r0, r4, #4
    ea14:	bl	4ac4 <rb_linebuf_newbuf@plt>
    ea18:	add	r0, r4, #32
    ea1c:	bl	4ac4 <rb_linebuf_newbuf@plt>
    ea20:	ldr	r3, [sp, #8]
    ea24:	str	r3, [r4, #60]	; 0x3c
    ea28:	ldr	r3, [sp, #20]
    ea2c:	str	r6, [r4, #68]	; 0x44
    ea30:	str	r5, [r4, #72]	; 0x48
    ea34:	str	fp, [r4, #76]	; 0x4c
    ea38:	str	sl, [r4, #80]	; 0x50
    ea3c:	str	r3, [r4, #64]	; 0x40
    ea40:	mov	r0, r4
    ea44:	add	sp, sp, #188	; 0xbc
    ea48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea4c:	.word	0x00005aa7
    ea50:	.word	0x00005a78
    ea54:	.word	0x00004ce0
    ea58:	.word	0x00005993
    ea5c:	.word	0x00005983
    ea60:	.word	0x000059ce
    ea64:	.word	0x0000596f
    ea68:	.word	0x000059b6

0000ea6c <rb_helper_restart>:
    ea6c:	ldr	r3, [r0, #80]	; 0x50
    ea70:	bx	r3

0000ea74 <rb_helper_write_sendq>:
    ea74:	ldr	r3, [r1, #16]
    ea78:	cmp	r3, #0
    ea7c:	bxle	lr
    ea80:	push	{r4, r5, r6, lr}
    ea84:	mov	r4, r1
    ea88:	mov	r5, r0
    ea8c:	add	r6, r1, #4
    ea90:	mov	r1, r6
    ea94:	mov	r0, r5
    ea98:	bl	47a0 <rb_linebuf_flush@plt>
    ea9c:	cmp	r0, #0
    eaa0:	bgt	ea90 <rb_helper_write_sendq+0x1c>
    eaa4:	bne	eab4 <rb_helper_write_sendq+0x40>
    eaa8:	mov	r0, r4
    eaac:	pop	{r4, r5, r6, lr}
    eab0:	b	45a8 <rb_helper_restart@plt>
    eab4:	bl	4cbc <__errno_location@plt>
    eab8:	ldr	r0, [r0]
    eabc:	bl	43b0 <rb_ignore_errno@plt>
    eac0:	cmp	r0, #0
    eac4:	beq	eaa8 <rb_helper_write_sendq+0x34>
    eac8:	ldr	r3, [r4, #16]
    eacc:	cmp	r3, #0
    ead0:	pople	{r4, r5, r6, pc}
    ead4:	mov	r3, r4
    ead8:	mov	r1, #2
    eadc:	pop	{r4, r5, r6, lr}
    eae0:	ldr	r2, [pc, #8]	; eaf0 <rb_helper_write_sendq+0x7c>
    eae4:	ldr	r0, [r3, #64]	; 0x40
    eae8:	add	r2, pc, r2
    eaec:	b	447c <rb_setselect@plt>
    eaf0:	.word	0xffffff84

0000eaf4 <rb_helper_read_cb>:
    eaf4:	push	{r4, r5, r6, lr}
    eaf8:	subs	r4, r1, #0
    eafc:	popeq	{r4, r5, r6, pc}
    eb00:	add	r6, r4, #32
    eb04:	ldr	r5, [pc, #120]	; eb84 <rb_helper_read_cb+0x90>
    eb08:	add	r5, pc, r5
    eb0c:	mov	r2, #32768	; 0x8000
    eb10:	mov	r1, r5
    eb14:	ldr	r0, [r4, #60]	; 0x3c
    eb18:	bl	4758 <rb_read@plt>
    eb1c:	subs	r2, r0, #0
    eb20:	bgt	eb34 <rb_helper_read_cb+0x40>
    eb24:	bne	eb54 <rb_helper_read_cb+0x60>
    eb28:	mov	r0, r4
    eb2c:	pop	{r4, r5, r6, lr}
    eb30:	b	45a8 <rb_helper_restart@plt>
    eb34:	mov	r3, #0
    eb38:	mov	r1, r5
    eb3c:	mov	r0, r6
    eb40:	bl	4650 <rb_linebuf_parse@plt>
    eb44:	mov	r0, r4
    eb48:	ldr	r3, [r4, #76]	; 0x4c
    eb4c:	blx	r3
    eb50:	b	eb0c <rb_helper_read_cb+0x18>
    eb54:	bl	4cbc <__errno_location@plt>
    eb58:	ldr	r0, [r0]
    eb5c:	bl	43b0 <rb_ignore_errno@plt>
    eb60:	cmp	r0, #0
    eb64:	beq	eb28 <rb_helper_read_cb+0x34>
    eb68:	ldr	r2, [pc, #24]	; eb88 <rb_helper_read_cb+0x94>
    eb6c:	mov	r3, r4
    eb70:	mov	r1, #1
    eb74:	pop	{r4, r5, r6, lr}
    eb78:	add	r2, pc, r2
    eb7c:	ldr	r0, [r3, #60]	; 0x3c
    eb80:	b	447c <rb_setselect@plt>
    eb84:	.word	0x0002b86c
    eb88:	.word	0xffffff74

0000eb8c <rb_helper_write_queue>:
    eb8c:	push	{r1, r2, r3}
    eb90:	mov	r2, #20
    eb94:	mov	r1, #0
    eb98:	push	{r4, lr}
    eb9c:	sub	sp, sp, #28
    eba0:	mov	r4, r0
    eba4:	add	r3, sp, #4
    eba8:	mov	r0, r3
    ebac:	bl	45fc <memset@plt>
    ebb0:	ldr	r2, [sp, #36]	; 0x24
    ebb4:	mov	r1, r0
    ebb8:	add	r0, r4, #4
    ebbc:	str	r2, [sp, #8]
    ebc0:	mov	r2, sp
    ebc4:	str	r2, [sp, #16]
    ebc8:	add	r2, sp, #40	; 0x28
    ebcc:	str	r2, [sp]
    ebd0:	bl	4bc0 <rb_linebuf_put@plt>
    ebd4:	add	sp, sp, #28
    ebd8:	pop	{r4, lr}
    ebdc:	add	sp, sp, #12
    ebe0:	bx	lr

0000ebe4 <rb_helper_write_flush>:
    ebe4:	mov	r1, r0
    ebe8:	ldr	r0, [r0, #64]	; 0x40
    ebec:	b	ea74 <rb_helper_write_sendq>

0000ebf0 <rb_helper_write>:
    ebf0:	push	{r1, r2, r3}
    ebf4:	mov	r2, #20
    ebf8:	mov	r1, #0
    ebfc:	push	{r4, lr}
    ec00:	sub	sp, sp, #28
    ec04:	mov	r4, r0
    ec08:	add	r3, sp, #4
    ec0c:	mov	r0, r3
    ec10:	bl	45fc <memset@plt>
    ec14:	ldr	r2, [sp, #36]	; 0x24
    ec18:	mov	r1, r0
    ec1c:	add	r0, r4, #4
    ec20:	str	r2, [sp, #8]
    ec24:	mov	r2, sp
    ec28:	str	r2, [sp, #16]
    ec2c:	add	r2, sp, #40	; 0x28
    ec30:	str	r2, [sp]
    ec34:	bl	4bc0 <rb_linebuf_put@plt>
    ec38:	mov	r0, r4
    ec3c:	bl	ebe4 <rb_helper_write_flush>
    ec40:	add	sp, sp, #28
    ec44:	pop	{r4, lr}
    ec48:	add	sp, sp, #12
    ec4c:	bx	lr

0000ec50 <rb_helper_run>:
    ec50:	subs	r1, r0, #0
    ec54:	bxeq	lr
    ec58:	ldr	r0, [r1, #60]	; 0x3c
    ec5c:	b	eaf4 <rb_helper_read_cb>

0000ec60 <rb_helper_close>:
    ec60:	push	{r4, lr}
    ec64:	subs	r4, r0, #0
    ec68:	popeq	{r4, pc}
    ec6c:	mov	r1, #9
    ec70:	ldr	r0, [r4, #68]	; 0x44
    ec74:	bl	46bc <rb_kill@plt>
    ec78:	ldr	r0, [r4, #60]	; 0x3c
    ec7c:	bl	483c <rb_close@plt>
    ec80:	ldr	r0, [r4, #64]	; 0x40
    ec84:	bl	483c <rb_close@plt>
    ec88:	mov	r0, r4
    ec8c:	pop	{r4, lr}
    ec90:	b	e634 <rb_free>

0000ec94 <rb_helper_read>:
    ec94:	mov	r3, #0
    ec98:	push	{r0, r1, r2, lr}
    ec9c:	add	r0, r0, #32
    eca0:	str	r3, [sp]
    eca4:	bl	4770 <rb_linebuf_get@plt>
    eca8:	add	sp, sp, #12
    ecac:	pop	{pc}		; (ldr pc, [sp], #4)

0000ecb0 <rb_helper_loop>:
    ecb0:	push	{r4, lr}
    ecb4:	mov	r4, r1
    ecb8:	bl	4338 <rb_helper_run@plt>
    ecbc:	mov	r0, r4
    ecc0:	bl	471c <rb_lib_loop@plt>

0000ecc4 <rb_init_netio_devpoll>:
    ecc4:	mov	r0, #38	; 0x26
    ecc8:	bx	lr

0000eccc <rb_setselect_devpoll>:
    eccc:	push	{r4, lr}
    ecd0:	bl	4cbc <__errno_location@plt>
    ecd4:	mov	r3, #38	; 0x26
    ecd8:	str	r3, [r0]
    ecdc:	pop	{r4, pc}

0000ece0 <rb_select_devpoll>:
    ece0:	push	{r4, lr}
    ece4:	bl	4cbc <__errno_location@plt>
    ece8:	mov	r3, #38	; 0x26
    ecec:	str	r3, [r0]
    ecf0:	mvn	r0, #0
    ecf4:	pop	{r4, pc}

0000ecf8 <rb_setup_fd_devpoll>:
    ecf8:	push	{r4, lr}
    ecfc:	bl	4cbc <__errno_location@plt>
    ed00:	mov	r3, #38	; 0x26
    ed04:	str	r3, [r0]
    ed08:	mvn	r0, #0
    ed0c:	pop	{r4, pc}

0000ed10 <rb_malloc>:
    ed10:	push	{r4, lr}
    ed14:	mov	r1, r0
    ed18:	mov	r0, #1
    ed1c:	bl	45c0 <calloc@plt>
    ed20:	cmp	r0, #0
    ed24:	popne	{r4, pc}
    ed28:	bl	495c <rb_outofmemory@plt>

0000ed2c <rb_read_timerfd>:
    ed2c:	push	{r0, r1, r2, r4, r5, lr}
    ed30:	subs	r4, r1, #0
    ed34:	bne	ed44 <rb_read_timerfd+0x18>
    ed38:	bl	483c <rb_close@plt>
    ed3c:	add	sp, sp, #12
    ed40:	pop	{r4, r5, pc}
    ed44:	mov	r2, #8
    ed48:	mov	r1, sp
    ed4c:	mov	r5, r0
    ed50:	bl	4758 <rb_read@plt>
    ed54:	cmp	r0, #0
    ed58:	bne	ed8c <rb_read_timerfd+0x60>
    ed5c:	mov	r0, r5
    ed60:	bl	483c <rb_close@plt>
    ed64:	bl	4cbc <__errno_location@plt>
    ed68:	ldr	r0, [r0]
    ed6c:	ldr	r4, [r4, #20]
    ed70:	bl	4374 <strerror@plt>
    ed74:	mov	r2, r0
    ed78:	ldr	r0, [pc, #72]	; edc8 <rb_read_timerfd+0x9c>
    ed7c:	mov	r1, r4
    ed80:	add	r0, pc, r0
    ed84:	bl	48f0 <rb_lib_log@plt>
    ed88:	b	ed3c <rb_read_timerfd+0x10>
    ed8c:	bge	eda4 <rb_read_timerfd+0x78>
    ed90:	bl	4cbc <__errno_location@plt>
    ed94:	ldr	r0, [r0]
    ed98:	bl	43b0 <rb_ignore_errno@plt>
    ed9c:	cmp	r0, #0
    eda0:	beq	ed5c <rb_read_timerfd+0x30>
    eda4:	ldr	r2, [pc, #32]	; edcc <rb_read_timerfd+0xa0>
    eda8:	mov	r0, r5
    edac:	mov	r3, r4
    edb0:	mov	r1, #1
    edb4:	add	r2, pc, r2
    edb8:	bl	447c <rb_setselect@plt>
    edbc:	mov	r0, r4
    edc0:	bl	4878 <rb_run_one_event@plt>
    edc4:	b	ed3c <rb_read_timerfd+0x10>
    edc8:	.word	0x000055f6
    edcc:	.word	0xffffff70

0000edd0 <rb_init_netio_epoll>:
    edd0:	push	{r4, r5, r6, lr}
    edd4:	mov	r4, #0
    edd8:	mov	r0, #12
    eddc:	ldr	r5, [pc, #96]	; ee44 <rb_init_netio_epoll+0x74>
    ede0:	add	r5, pc, r5
    ede4:	str	r4, [r5]
    ede8:	str	r4, [r5, #4]
    edec:	bl	ed10 <rb_malloc>
    edf0:	mov	r6, r0
    edf4:	str	r0, [r5, #8]
    edf8:	bl	438c <getdtablesize@plt>
    edfc:	str	r0, [r6, #8]
    ee00:	bl	44c4 <epoll_create@plt>
    ee04:	cmp	r0, r4
    ee08:	str	r0, [r6]
    ee0c:	blt	ee3c <rb_init_netio_epoll+0x6c>
    ee10:	ldr	r2, [pc, #48]	; ee48 <rb_init_netio_epoll+0x78>
    ee14:	mov	r1, #64	; 0x40
    ee18:	add	r2, pc, r2
    ee1c:	bl	4a58 <rb_open@plt>
    ee20:	ldr	r5, [r5, #8]
    ee24:	ldr	r0, [r5, #8]
    ee28:	lsl	r0, r0, #4
    ee2c:	bl	ed10 <rb_malloc>
    ee30:	str	r0, [r5, #4]
    ee34:	mov	r0, r4
    ee38:	pop	{r4, r5, r6, pc}
    ee3c:	mvn	r0, #0
    ee40:	pop	{r4, r5, r6, pc}
    ee44:	.word	0x00033598
    ee48:	.word	0x0000558f

0000ee4c <rb_setup_fd_epoll>:
    ee4c:	mov	r0, #0
    ee50:	bx	lr

0000ee54 <rb_setselect_epoll>:
    ee54:	tst	r1, #1
    ee58:	push	{r0, r1, r2, r3, r4, lr}
    ee5c:	ldr	ip, [r0, #20]
    ee60:	beq	ee78 <rb_setselect_epoll+0x24>
    ee64:	cmp	r2, #0
    ee68:	strd	r2, [r0, #28]
    ee6c:	orrne	lr, ip, #1
    ee70:	biceq	lr, ip, #1
    ee74:	str	lr, [r0, #20]
    ee78:	tst	r1, #2
    ee7c:	beq	ee98 <rb_setselect_epoll+0x44>
    ee80:	ldr	r1, [r0, #20]
    ee84:	cmp	r2, #0
    ee88:	strd	r2, [r0, #36]	; 0x24
    ee8c:	orrne	r1, r1, #4
    ee90:	biceq	r1, r1, #4
    ee94:	str	r1, [r0, #20]
    ee98:	ldr	r3, [r0, #20]
    ee9c:	orrs	r2, r3, ip
    eea0:	beq	eec0 <rb_setselect_epoll+0x6c>
    eea4:	cmp	r3, #0
    eea8:	ble	eec8 <rb_setselect_epoll+0x74>
    eeac:	cmp	ip, #0
    eeb0:	beq	ef24 <rb_setselect_epoll+0xd0>
    eeb4:	cmp	r3, ip
    eeb8:	movne	r1, #3
    eebc:	bne	eecc <rb_setselect_epoll+0x78>
    eec0:	add	sp, sp, #20
    eec4:	pop	{pc}		; (ldr pc, [sp], #4)
    eec8:	mov	r1, #2
    eecc:	tst	r1, #1
    eed0:	str	r3, [sp]
    eed4:	orrne	r3, r3, #-2147483648	; 0x80000000
    eed8:	str	r0, [sp, #8]
    eedc:	ldr	r2, [r0, #12]
    eee0:	strne	r3, [sp]
    eee4:	ldr	r3, [pc, #64]	; ef2c <rb_setselect_epoll+0xd8>
    eee8:	add	r3, pc, r3
    eeec:	ldr	ip, [r3, #8]
    eef0:	mov	r3, sp
    eef4:	ldr	r0, [ip]
    eef8:	bl	4c2c <epoll_ctl@plt>
    eefc:	cmp	r0, #0
    ef00:	beq	eec0 <rb_setselect_epoll+0x6c>
    ef04:	bl	4cbc <__errno_location@plt>
    ef08:	ldr	r0, [r0]
    ef0c:	bl	4374 <strerror@plt>
    ef10:	mov	r1, r0
    ef14:	ldr	r0, [pc, #20]	; ef30 <rb_setselect_epoll+0xdc>
    ef18:	add	r0, pc, r0
    ef1c:	bl	48f0 <rb_lib_log@plt>
    ef20:	bl	4398 <abort@plt>
    ef24:	mov	r1, #1
    ef28:	b	eecc <rb_setselect_epoll+0x78>
    ef2c:	.word	0x00033490
    ef30:	.word	0x000054a5

0000ef34 <rb_select_epoll>:
    ef34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef38:	mov	r3, r0
    ef3c:	sub	sp, sp, #28
    ef40:	ldr	r6, [pc, #428]	; f0f4 <rb_select_epoll+0x1c0>
    ef44:	add	r6, pc, r6
    ef48:	ldr	ip, [r6, #8]
    ef4c:	ldrd	r0, [ip]
    ef50:	ldr	r2, [ip, #8]
    ef54:	bl	4788 <epoll_wait@plt>
    ef58:	mov	r8, r0
    ef5c:	bl	4cbc <__errno_location@plt>
    ef60:	ldr	r4, [r0]
    ef64:	mov	r7, r0
    ef68:	bl	4968 <rb_set_time@plt>
    ef6c:	cmp	r8, #0
    ef70:	str	r4, [r7]
    ef74:	bge	ef98 <rb_select_epoll+0x64>
    ef78:	mov	r0, r4
    ef7c:	bl	43b0 <rb_ignore_errno@plt>
    ef80:	cmp	r0, #0
    ef84:	moveq	r0, #5
    ef88:	beq	ef90 <rb_select_epoll+0x5c>
    ef8c:	mov	r0, #0
    ef90:	add	sp, sp, #28
    ef94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef98:	beq	ef8c <rb_select_epoll+0x58>
    ef9c:	ldr	sl, [pc, #340]	; f0f8 <rb_select_epoll+0x1c4>
    efa0:	mov	r5, #0
    efa4:	ldr	fp, [pc, #336]	; f0fc <rb_select_epoll+0x1c8>
    efa8:	add	sl, pc, sl
    efac:	add	fp, pc, fp
    efb0:	ldr	r2, [r6, #8]
    efb4:	lsl	r3, r5, #4
    efb8:	ldr	r2, [r2, #4]
    efbc:	add	r1, r2, r3
    efc0:	ldr	r2, [r2, r5, lsl #4]
    efc4:	ldr	r4, [r1, #8]
    efc8:	tst	r2, #25
    efcc:	ldr	r9, [r4, #20]
    efd0:	beq	f000 <rb_select_epoll+0xcc>
    efd4:	mov	r0, #0
    efd8:	ldr	r2, [r4, #28]
    efdc:	str	r0, [r4, #28]
    efe0:	ldr	r1, [r4, #32]
    efe4:	str	r0, [r4, #32]
    efe8:	cmp	r2, r0
    efec:	beq	f000 <rb_select_epoll+0xcc>
    eff0:	mov	r0, r4
    eff4:	str	r3, [sp, #4]
    eff8:	blx	r2
    effc:	ldr	r3, [sp, #4]
    f000:	ldrb	r2, [r4, #16]
    f004:	tst	r2, #1
    f008:	beq	f0d0 <rb_select_epoll+0x19c>
    f00c:	ldr	r2, [sl, #8]
    f010:	ldr	r2, [r2, #4]
    f014:	ldr	r3, [r2, r3]
    f018:	tst	r3, #28
    f01c:	beq	f050 <rb_select_epoll+0x11c>
    f020:	ldr	r3, [r4, #36]	; 0x24
    f024:	mov	r2, #0
    f028:	str	r2, [r4, #36]	; 0x24
    f02c:	ldr	r1, [r4, #40]	; 0x28
    f030:	str	r2, [r4, #40]	; 0x28
    f034:	cmp	r3, r2
    f038:	beq	f050 <rb_select_epoll+0x11c>
    f03c:	mov	r0, r4
    f040:	blx	r3
    f044:	ldrb	r3, [r4, #16]
    f048:	tst	r3, #1
    f04c:	beq	f0d0 <rb_select_epoll+0x19c>
    f050:	ldr	r2, [r4, #28]
    f054:	ldr	r1, [r4, #36]	; 0x24
    f058:	adds	r3, r2, #0
    f05c:	movne	r3, #1
    f060:	cmp	r1, #0
    f064:	bne	f0e0 <rb_select_epoll+0x1ac>
    f068:	cmp	r9, r3
    f06c:	beq	f0d0 <rb_select_epoll+0x19c>
    f070:	cmp	r2, #0
    f074:	movne	r3, #1
    f078:	moveq	r3, #0
    f07c:	moveq	r1, #2
    f080:	movne	r1, #3
    f084:	ldr	r0, [fp, #8]
    f088:	cmp	r1, #3
    f08c:	str	r3, [sp, #8]
    f090:	str	r3, [r4, #20]
    f094:	orreq	r3, r3, #-2147483648	; 0x80000000
    f098:	ldr	r2, [r4, #12]
    f09c:	streq	r3, [sp, #8]
    f0a0:	add	r3, sp, #8
    f0a4:	ldr	r0, [r0]
    f0a8:	str	r4, [sp, #16]
    f0ac:	bl	4c2c <epoll_ctl@plt>
    f0b0:	cmp	r0, #0
    f0b4:	beq	f0d0 <rb_select_epoll+0x19c>
    f0b8:	ldr	r0, [r7]
    f0bc:	bl	4374 <strerror@plt>
    f0c0:	mov	r1, r0
    f0c4:	ldr	r0, [pc, #52]	; f100 <rb_select_epoll+0x1cc>
    f0c8:	add	r0, pc, r0
    f0cc:	bl	48f0 <rb_lib_log@plt>
    f0d0:	add	r5, r5, #1
    f0d4:	cmp	r8, r5
    f0d8:	bgt	efb0 <rb_select_epoll+0x7c>
    f0dc:	b	ef8c <rb_select_epoll+0x58>
    f0e0:	orr	r3, r3, #4
    f0e4:	cmp	r9, r3
    f0e8:	beq	f0d0 <rb_select_epoll+0x19c>
    f0ec:	mov	r1, #3
    f0f0:	b	f084 <rb_select_epoll+0x150>
    f0f4:	.word	0x00033434
    f0f8:	.word	0x000333d0
    f0fc:	.word	0x000333cc
    f100:	.word	0x00005320

0000f104 <rb_epoll_supports_event>:
    f104:	push	{r4, r5, r6, lr}
    f108:	sub	sp, sp, #288	; 0x120
    f10c:	ldr	r4, [pc, #216]	; f1ec <rb_epoll_supports_event+0xe8>
    f110:	add	r4, pc, r4
    f114:	ldr	r0, [r4]
    f118:	cmp	r0, #1
    f11c:	beq	f16c <rb_epoll_supports_event+0x68>
    f120:	cmn	r0, #1
    f124:	beq	f1a8 <rb_epoll_supports_event+0xa4>
    f128:	ldr	r0, [pc, #192]	; f1f0 <rb_epoll_supports_event+0xec>
    f12c:	add	r1, sp, #72	; 0x48
    f130:	add	r0, pc, r0
    f134:	bl	12b0c <__stat>
    f138:	cmp	r0, #0
    f13c:	mvneq	r3, #0
    f140:	streq	r3, [r4]
    f144:	beq	f16c <rb_epoll_supports_event+0x68>
    f148:	mov	r1, #0
    f14c:	mov	r0, r1
    f150:	bl	4b9c <timerfd_create@plt>
    f154:	cmp	r0, #0
    f158:	blt	f174 <rb_epoll_supports_event+0x70>
    f15c:	bl	4914 <close@plt>
    f160:	mov	r0, #1
    f164:	str	r0, [r4]
    f168:	str	r0, [r4, #4]
    f16c:	add	sp, sp, #288	; 0x120
    f170:	pop	{r4, r5, r6, pc}
    f174:	mov	r3, #26
    f178:	mov	r0, #0
    f17c:	add	r2, sp, #4
    f180:	add	r1, sp, #8
    f184:	str	r3, [sp, #12]
    f188:	str	r0, [sp, #16]
    f18c:	bl	4500 <timer_create@plt>
    f190:	subs	r6, r0, #0
    f194:	beq	f1b0 <rb_epoll_supports_event+0xac>
    f198:	ldr	r3, [pc, #84]	; f1f4 <rb_epoll_supports_event+0xf0>
    f19c:	mvn	r2, #0
    f1a0:	add	r3, pc, r3
    f1a4:	str	r2, [r3]
    f1a8:	mov	r0, #0
    f1ac:	b	f16c <rb_epoll_supports_event+0x68>
    f1b0:	add	r5, sp, #160	; 0xa0
    f1b4:	ldr	r0, [sp, #4]
    f1b8:	bl	4a4c <timer_delete@plt>
    f1bc:	mov	r0, r5
    f1c0:	bl	4368 <sigemptyset@plt>
    f1c4:	mov	r2, r6
    f1c8:	mov	r1, r5
    f1cc:	mvn	r0, #0
    f1d0:	bl	4410 <signalfd@plt>
    f1d4:	cmp	r0, #0
    f1d8:	blt	f198 <rb_epoll_supports_event+0x94>
    f1dc:	bl	4914 <close@plt>
    f1e0:	mov	r0, #1
    f1e4:	str	r0, [r4]
    f1e8:	b	f16c <rb_epoll_supports_event+0x68>
    f1ec:	.word	0x00033268
    f1f0:	.word	0x000052e0
    f1f4:	.word	0x000331d8

0000f1f8 <rb_epoll_init_event>:
    f1f8:	push	{r4, r5, r6, lr}
    f1fc:	sub	sp, sp, #128	; 0x80
    f200:	ldr	r6, [pc, #156]	; f2a4 <rb_epoll_init_event+0xac>
    f204:	bl	f104 <rb_epoll_supports_event>
    f208:	add	r6, pc, r6
    f20c:	ldr	r5, [r6, #4]
    f210:	cmp	r5, #0
    f214:	bne	f29c <rb_epoll_init_event+0xa4>
    f218:	mov	r4, sp
    f21c:	mov	r0, r4
    f220:	bl	4368 <sigemptyset@plt>
    f224:	bl	4458 <__libc_current_sigrtmin@plt>
    f228:	mov	r1, r0
    f22c:	mov	r0, r4
    f230:	bl	4854 <sigaddset@plt>
    f234:	mov	r2, r5
    f238:	mov	r1, r4
    f23c:	mov	r0, r5
    f240:	bl	498c <sigprocmask@plt>
    f244:	mov	r0, r4
    f248:	bl	4368 <sigemptyset@plt>
    f24c:	bl	4458 <__libc_current_sigrtmin@plt>
    f250:	mov	r1, r0
    f254:	mov	r0, r4
    f258:	bl	4854 <sigaddset@plt>
    f25c:	mov	r2, r5
    f260:	mov	r1, r4
    f264:	mvn	r0, #0
    f268:	bl	4410 <signalfd@plt>
    f26c:	cmn	r0, #1
    f270:	streq	r0, [r6]
    f274:	beq	f29c <rb_epoll_init_event+0xa4>
    f278:	ldr	r2, [pc, #40]	; f2a8 <rb_epoll_init_event+0xb0>
    f27c:	mov	r1, #64	; 0x40
    f280:	add	r2, pc, r2
    f284:	bl	4a58 <rb_open@plt>
    f288:	mov	r4, r0
    f28c:	bl	45f0 <rb_set_nb@plt>
    f290:	mov	r1, r5
    f294:	mov	r0, r4
    f298:	bl	f2ac <signalfd_handler>
    f29c:	add	sp, sp, #128	; 0x80
    f2a0:	pop	{r4, r5, r6, pc}
    f2a4:	.word	0x00033170
    f2a8:	.word	0x000051a8

0000f2ac <signalfd_handler>:
    f2ac:	ldr	r3, [pc, #212]	; f388 <signalfd_handler+0xdc>
    f2b0:	mov	r2, #0
    f2b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f2b8:	mov	r4, r0
    f2bc:	mov	r0, #128	; 0x80
    f2c0:	add	r3, pc, r3
    f2c4:	add	r8, r3, #16
    f2c8:	add	r3, r3, #2064	; 0x810
    f2cc:	mov	r1, r8
    f2d0:	add	r2, r2, #1
    f2d4:	add	r3, r3, #8
    f2d8:	str	r1, [r3, #-8]
    f2dc:	cmp	r2, #16
    f2e0:	add	r1, r1, #128	; 0x80
    f2e4:	str	r0, [r3, #-4]
    f2e8:	bne	f2d0 <signalfd_handler+0x24>
    f2ec:	ldr	r5, [pc, #152]	; f38c <signalfd_handler+0xe0>
    f2f0:	add	r5, pc, r5
    f2f4:	add	r5, r5, #2064	; 0x810
    f2f8:	mov	r0, r4
    f2fc:	bl	44b8 <rb_get_fd@plt>
    f300:	mov	r2, #16
    f304:	mov	r1, r5
    f308:	bl	4c44 <readv@plt>
    f30c:	cmp	r0, #0
    f310:	bne	f324 <signalfd_handler+0x78>
    f314:	mov	r0, r4
    f318:	bl	483c <rb_close@plt>
    f31c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    f320:	b	f1f8 <rb_epoll_init_event>
    f324:	blt	f358 <signalfd_handler+0xac>
    f328:	asr	r7, r0, #7
    f32c:	mov	r9, r8
    f330:	mov	r6, #0
    f334:	cmp	r7, r6
    f338:	beq	f2f8 <signalfd_handler+0x4c>
    f33c:	ldr	r0, [r9, #48]	; 0x30
    f340:	cmp	r0, #0
    f344:	beq	f34c <signalfd_handler+0xa0>
    f348:	bl	4878 <rb_run_one_event@plt>
    f34c:	add	r6, r6, #1
    f350:	add	r9, r9, #128	; 0x80
    f354:	b	f334 <signalfd_handler+0x88>
    f358:	bl	4cbc <__errno_location@plt>
    f35c:	ldr	r0, [r0]
    f360:	bl	43b0 <rb_ignore_errno@plt>
    f364:	cmp	r0, #0
    f368:	beq	f314 <signalfd_handler+0x68>
    f36c:	ldr	r2, [pc, #28]	; f390 <signalfd_handler+0xe4>
    f370:	mov	r0, r4
    f374:	mov	r3, #0
    f378:	mov	r1, #1
    f37c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    f380:	add	r2, pc, r2
    f384:	b	447c <rb_setselect@plt>
    f388:	.word	0x000330b8
    f38c:	.word	0x00033088
    f390:	.word	0xffffff24

0000f394 <rb_epoll_sched_event>:
    f394:	ldr	r3, [pc, #500]	; f590 <rb_epoll_sched_event+0x1fc>
    f398:	push	{r4, r5, r6, r7, r8, lr}
    f39c:	mov	r5, r0
    f3a0:	sub	sp, sp, #80	; 0x50
    f3a4:	mov	r8, r1
    f3a8:	add	r3, pc, r3
    f3ac:	ldr	r4, [r3, #4]
    f3b0:	cmp	r4, #0
    f3b4:	beq	f4c4 <rb_epoll_sched_event+0x130>
    f3b8:	mov	r1, #0
    f3bc:	mov	r0, r1
    f3c0:	bl	4b9c <timerfd_create@plt>
    f3c4:	subs	r6, r0, #0
    f3c8:	bge	f3f8 <rb_epoll_sched_event+0x64>
    f3cc:	bl	4cbc <__errno_location@plt>
    f3d0:	ldr	r0, [r0]
    f3d4:	bl	4374 <strerror@plt>
    f3d8:	mov	r1, r0
    f3dc:	ldr	r0, [pc, #432]	; f594 <rb_epoll_sched_event+0x200>
    f3e0:	add	r0, pc, r0
    f3e4:	bl	48f0 <rb_lib_log@plt>
    f3e8:	mov	r4, #0
    f3ec:	mov	r0, r4
    f3f0:	add	sp, sp, #80	; 0x50
    f3f4:	pop	{r4, r5, r6, r7, r8, pc}
    f3f8:	ldr	r3, [r5, #24]
    f3fc:	mov	r0, #0
    f400:	mov	r1, #0
    f404:	add	r2, sp, #16
    f408:	strd	r0, [sp, #16]
    f40c:	strd	r0, [r2, #8]
    f410:	str	r8, [sp, #24]
    f414:	cmp	r3, #0
    f418:	addne	r3, sp, #24
    f41c:	ldmne	r3, {r0, r1}
    f420:	mov	r3, #0
    f424:	stmne	r2, {r0, r1}
    f428:	mov	r1, r3
    f42c:	mov	r0, r6
    f430:	bl	4c20 <timerfd_settime@plt>
    f434:	cmp	r0, #0
    f438:	bge	f464 <rb_epoll_sched_event+0xd0>
    f43c:	bl	4cbc <__errno_location@plt>
    f440:	ldr	r0, [r0]
    f444:	bl	4374 <strerror@plt>
    f448:	mov	r1, r0
    f44c:	ldr	r0, [pc, #324]	; f598 <rb_epoll_sched_event+0x204>
    f450:	add	r0, pc, r0
    f454:	bl	48f0 <rb_lib_log@plt>
    f458:	mov	r0, r6
    f45c:	bl	4914 <close@plt>
    f460:	b	f3e8 <rb_epoll_sched_event+0x54>
    f464:	ldr	r4, [pc, #304]	; f59c <rb_epoll_sched_event+0x208>
    f468:	mov	r1, #136	; 0x88
    f46c:	ldr	r2, [pc, #300]	; f5a0 <rb_epoll_sched_event+0x20c>
    f470:	ldr	r3, [r5, #20]
    f474:	add	r4, pc, r4
    f478:	add	r4, r4, #2192	; 0x890
    f47c:	add	r2, pc, r2
    f480:	mov	r0, r4
    f484:	bl	4b84 <snprintf@plt>
    f488:	mov	r2, r4
    f48c:	mov	r1, #64	; 0x40
    f490:	mov	r0, r6
    f494:	bl	4a58 <rb_open@plt>
    f498:	mov	r4, r0
    f49c:	bl	45f0 <rb_set_nb@plt>
    f4a0:	ldr	r2, [pc, #252]	; f5a4 <rb_epoll_sched_event+0x210>
    f4a4:	mov	r3, r5
    f4a8:	mov	r1, #1
    f4ac:	mov	r0, r4
    f4b0:	str	r4, [r5, #40]	; 0x28
    f4b4:	add	r2, pc, r2
    f4b8:	bl	447c <rb_setselect@plt>
    f4bc:	mov	r4, #1
    f4c0:	b	f3ec <rb_epoll_sched_event+0x58>
    f4c4:	add	r6, sp, #16
    f4c8:	mov	r2, #64	; 0x40
    f4cc:	mov	r1, r4
    f4d0:	mov	r0, r6
    f4d4:	bl	45fc <memset@plt>
    f4d8:	mov	r0, #4
    f4dc:	bl	ed10 <rb_malloc>
    f4e0:	str	r0, [r5, #40]	; 0x28
    f4e4:	mov	r7, r0
    f4e8:	str	r4, [sp, #24]
    f4ec:	bl	4458 <__libc_current_sigrtmin@plt>
    f4f0:	mov	r2, r7
    f4f4:	mov	r1, r6
    f4f8:	str	r5, [sp, #16]
    f4fc:	str	r0, [sp, #20]
    f500:	mov	r0, r4
    f504:	bl	4500 <timer_create@plt>
    f508:	cmp	r0, #0
    f50c:	bge	f530 <rb_epoll_sched_event+0x19c>
    f510:	bl	4cbc <__errno_location@plt>
    f514:	ldr	r0, [r0]
    f518:	bl	4374 <strerror@plt>
    f51c:	mov	r1, r0
    f520:	ldr	r0, [pc, #128]	; f5a8 <rb_epoll_sched_event+0x214>
    f524:	add	r0, pc, r0
    f528:	bl	48f0 <rb_lib_log@plt>
    f52c:	b	f3ec <rb_epoll_sched_event+0x58>
    f530:	ldr	r3, [r5, #24]
    f534:	mov	r0, #0
    f538:	mov	r1, #0
    f53c:	mov	r2, sp
    f540:	strd	r0, [sp]
    f544:	strd	r0, [r2, #8]
    f548:	str	r8, [sp, #8]
    f54c:	cmp	r3, #0
    f550:	addne	r3, sp, #8
    f554:	ldmne	r3, {r0, r1}
    f558:	mov	r3, #0
    f55c:	stmne	r2, {r0, r1}
    f560:	mov	r1, r3
    f564:	ldr	r0, [r7]
    f568:	bl	4728 <timer_settime@plt>
    f56c:	cmp	r0, #0
    f570:	bge	f4bc <rb_epoll_sched_event+0x128>
    f574:	bl	4cbc <__errno_location@plt>
    f578:	ldr	r0, [r0]
    f57c:	bl	4374 <strerror@plt>
    f580:	mov	r1, r0
    f584:	ldr	r0, [pc, #32]	; f5ac <rb_epoll_sched_event+0x218>
    f588:	add	r0, pc, r0
    f58c:	b	f528 <rb_epoll_sched_event+0x194>
    f590:	.word	0x00032fd0
    f594:	.word	0x00005051
    f598:	.word	0x00004ff5
    f59c:	.word	0x00032f04
    f5a0:	.word	0x00004fde
    f5a4:	.word	0xfffff870
    f5a8:	.word	0x00004f42
    f5ac:	.word	0x00004ef0

0000f5b0 <rb_epoll_unsched_event>:
    f5b0:	ldr	r3, [pc, #68]	; f5fc <rb_epoll_unsched_event+0x4c>
    f5b4:	push	{r4, lr}
    f5b8:	mov	r4, r0
    f5bc:	ldr	r0, [r0, #40]	; 0x28
    f5c0:	add	r3, pc, r3
    f5c4:	ldr	r3, [r3, #4]
    f5c8:	cmp	r3, #0
    f5cc:	beq	f5e0 <rb_epoll_unsched_event+0x30>
    f5d0:	bl	483c <rb_close@plt>
    f5d4:	mov	r3, #0
    f5d8:	str	r3, [r4, #40]	; 0x28
    f5dc:	pop	{r4, pc}
    f5e0:	ldr	r0, [r0]
    f5e4:	bl	4a4c <timer_delete@plt>
    f5e8:	ldr	r0, [r4, #40]	; 0x28
    f5ec:	cmp	r0, #0
    f5f0:	beq	f5d4 <rb_epoll_unsched_event+0x24>
    f5f4:	bl	46c8 <free@plt>
    f5f8:	b	f5d4 <rb_epoll_unsched_event+0x24>
    f5fc:	.word	0x00032db8

0000f600 <rb_setup_fd_poll>:
    f600:	mov	r0, #0
    f604:	bx	lr

0000f608 <rb_init_netio_poll>:
    f608:	push	{r4, r5, r6, lr}
    f60c:	bl	4440 <rb_getmaxconnect@plt>
    f610:	lsl	r1, r0, #3
    f614:	mov	r0, #1
    f618:	bl	45c0 <calloc@plt>
    f61c:	cmp	r0, #0
    f620:	bne	f628 <rb_init_netio_poll+0x20>
    f624:	bl	495c <rb_outofmemory@plt>
    f628:	ldr	r4, [pc, #76]	; f67c <rb_init_netio_poll+0x74>
    f62c:	mvn	r6, #0
    f630:	ldr	r5, [pc, #72]	; f680 <rb_init_netio_poll+0x78>
    f634:	add	r4, pc, r4
    f638:	str	r0, [r4]
    f63c:	add	r5, pc, r5
    f640:	bl	4440 <rb_getmaxconnect@plt>
    f644:	str	r0, [r4, #8]
    f648:	mov	r4, #0
    f64c:	bl	4440 <rb_getmaxconnect@plt>
    f650:	cmp	r0, r4
    f654:	bgt	f66c <rb_init_netio_poll+0x64>
    f658:	ldr	r3, [pc, #36]	; f684 <rb_init_netio_poll+0x7c>
    f65c:	mov	r0, #0
    f660:	add	r3, pc, r3
    f664:	str	r0, [r3, #4]
    f668:	pop	{r4, r5, r6, pc}
    f66c:	ldr	r3, [r5]
    f670:	str	r6, [r3, r4, lsl #3]
    f674:	add	r4, r4, #1
    f678:	b	f64c <rb_init_netio_poll+0x44>
    f67c:	.word	0x0003365c
    f680:	.word	0x00033654
    f684:	.word	0x00033630

0000f688 <rb_setselect_poll>:
    f688:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f68c:	subs	r4, r0, #0
    f690:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    f694:	tst	r1, #1
    f698:	beq	f6b4 <rb_setselect_poll+0x2c>
    f69c:	ldr	ip, [r4, #20]
    f6a0:	cmp	r2, #0
    f6a4:	strd	r2, [r4, #28]
    f6a8:	orrne	ip, ip, #64	; 0x40
    f6ac:	biceq	ip, ip, #64	; 0x40
    f6b0:	str	ip, [r4, #20]
    f6b4:	tst	r1, #2
    f6b8:	beq	f6d4 <rb_setselect_poll+0x4c>
    f6bc:	strd	r2, [r4, #36]	; 0x24
    f6c0:	cmp	r2, #0
    f6c4:	ldr	r3, [r4, #20]
    f6c8:	orrne	r3, r3, #256	; 0x100
    f6cc:	biceq	r3, r3, #256	; 0x100
    f6d0:	str	r3, [r4, #20]
    f6d4:	ldr	r7, [pc, #264]	; f7e4 <rb_setselect_poll+0x15c>
    f6d8:	ldr	r3, [r4, #12]
    f6dc:	add	r7, pc, r7
    f6e0:	ldr	r5, [r7, #8]
    f6e4:	cmp	r3, r5
    f6e8:	bge	f748 <rb_setselect_poll+0xc0>
    f6ec:	ldr	r1, [pc, #244]	; f7e8 <rb_setselect_poll+0x160>
    f6f0:	ldr	r3, [r4, #12]
    f6f4:	ldr	lr, [r4, #20]
    f6f8:	add	r1, pc, r1
    f6fc:	ldr	r2, [r1]
    f700:	ldr	r0, [r1, #4]
    f704:	cmp	lr, #0
    f708:	add	ip, r2, r3, lsl #3
    f70c:	bgt	f7d0 <rb_setselect_poll+0x148>
    f710:	mov	r1, #0
    f714:	cmp	r3, r0
    f718:	strh	r1, [ip, #4]
    f71c:	mvn	ip, #0
    f720:	str	ip, [r2, r3, lsl #3]
    f724:	addeq	r2, r2, #8
    f728:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
    f72c:	subs	r0, r3, #0
    f730:	bge	f7ac <rb_setselect_poll+0x124>
    f734:	cmp	r1, #0
    f738:	ldrne	r2, [pc, #172]	; f7ec <rb_setselect_poll+0x164>
    f73c:	addne	r2, pc, r2
    f740:	strne	r3, [r2, #4]
    f744:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f748:	add	r8, r5, #1024	; 0x400
    f74c:	ldr	r0, [r7]
    f750:	lsl	r6, r8, #3
    f754:	str	r8, [r7, #8]
    f758:	mov	r1, r6
    f75c:	bl	4c14 <realloc@plt>
    f760:	subs	r9, r0, #0
    f764:	bne	f76c <rb_setselect_poll+0xe4>
    f768:	bl	495c <rb_outofmemory@plt>
    f76c:	sub	r0, r6, #8128	; 0x1fc0
    f770:	mov	r2, #8192	; 0x2000
    f774:	str	r9, [r7]
    f778:	sub	r0, r0, #56	; 0x38
    f77c:	mov	r1, #0
    f780:	add	r0, r9, r0
    f784:	bl	45fc <memset@plt>
    f788:	add	r3, r5, #1
    f78c:	mvn	r2, #0
    f790:	cmp	r8, r3
    f794:	beq	f6ec <rb_setselect_poll+0x64>
    f798:	str	r2, [r9, r3, lsl #3]
    f79c:	add	r3, r3, #1
    f7a0:	b	f790 <rb_setselect_poll+0x108>
    f7a4:	mov	r1, #1
    f7a8:	b	f72c <rb_setselect_poll+0xa4>
    f7ac:	sub	r3, r3, #1
    f7b0:	ldr	ip, [r2, r3, lsl #3]
    f7b4:	cmn	ip, #1
    f7b8:	beq	f7a4 <rb_setselect_poll+0x11c>
    f7bc:	cmp	r1, #0
    f7c0:	ldrne	r3, [pc, #40]	; f7f0 <rb_setselect_poll+0x168>
    f7c4:	addne	r3, pc, r3
    f7c8:	strne	r0, [r3, #4]
    f7cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f7d0:	cmp	r3, r0
    f7d4:	strh	lr, [ip, #4]
    f7d8:	str	r3, [r2, r3, lsl #3]
    f7dc:	strgt	r3, [r1, #4]
    f7e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f7e4:	.word	0x000335b4
    f7e8:	.word	0x00033598
    f7ec:	.word	0x00033554
    f7f0:	.word	0x000334cc

0000f7f4 <rb_select_poll>:
    f7f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f7f8:	mov	r2, r0
    f7fc:	ldr	r6, [pc, #360]	; f96c <rb_select_poll+0x178>
    f800:	ldr	r8, [pc, #360]	; f970 <rb_select_poll+0x17c>
    f804:	add	r6, pc, r6
    f808:	ldrd	r0, [r6]
    f80c:	add	r8, pc, r8
    f810:	add	r1, r1, #1
    f814:	bl	49d4 <poll@plt>
    f818:	mov	r4, r0
    f81c:	bl	4968 <rb_set_time@plt>
    f820:	cmp	r4, #0
    f824:	bge	f844 <rb_select_poll+0x50>
    f828:	bl	4cbc <__errno_location@plt>
    f82c:	ldr	r0, [r0]
    f830:	bl	43b0 <rb_ignore_errno@plt>
    f834:	cmp	r0, #0
    f838:	bne	f8c8 <rb_select_poll+0xd4>
    f83c:	mov	r0, #0
    f840:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f844:	movne	r5, #0
    f848:	movne	r9, #12
    f84c:	movne	r7, r5
    f850:	beq	f83c <rb_select_poll+0x48>
    f854:	ldr	r3, [r6, #4]
    f858:	cmp	r3, r5
    f85c:	blt	f83c <rb_select_poll+0x48>
    f860:	ldr	r3, [r6]
    f864:	add	r2, r3, r5, lsl #3
    f868:	ldrsh	sl, [r2, #6]
    f86c:	ldr	r2, [r3, r5, lsl #3]
    f870:	cmp	sl, #0
    f874:	moveq	r3, #1
    f878:	lsrne	r3, r2, #31
    f87c:	cmp	r3, #0
    f880:	bne	f964 <rb_select_poll+0x170>
    f884:	ldr	r1, [pc, #232]	; f974 <rb_select_poll+0x180>
    f888:	asr	r3, r2, #24
    f88c:	eor	r3, r3, r2, asr #12
    f890:	eor	r3, r3, r2
    f894:	ldr	r1, [r8, r1]
    f898:	ubfx	r3, r3, #0, #12
    f89c:	mul	r3, r9, r3
    f8a0:	ldr	r1, [r1]
    f8a4:	ldr	r3, [r1, r3]
    f8a8:	cmp	r3, #0
    f8ac:	beq	f964 <rb_select_poll+0x170>
    f8b0:	ldr	r4, [r3]
    f8b4:	ldr	r1, [r4, #12]
    f8b8:	cmp	r2, r1
    f8bc:	beq	f8d0 <rb_select_poll+0xdc>
    f8c0:	ldr	r3, [r3, #8]
    f8c4:	b	f8a8 <rb_select_poll+0xb4>
    f8c8:	mov	r0, #5
    f8cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f8d0:	tst	sl, #89	; 0x59
    f8d4:	beq	f8f8 <rb_select_poll+0x104>
    f8d8:	ldr	r3, [r4, #28]
    f8dc:	str	r7, [r4, #28]
    f8e0:	ldr	r1, [r4, #32]
    f8e4:	str	r7, [r4, #32]
    f8e8:	cmp	r3, #0
    f8ec:	beq	f8f8 <rb_select_poll+0x104>
    f8f0:	mov	r0, r4
    f8f4:	blx	r3
    f8f8:	ldrb	r3, [r4, #16]
    f8fc:	tst	r3, #1
    f900:	beq	f92c <rb_select_poll+0x138>
    f904:	tst	sl, #284	; 0x11c
    f908:	beq	f92c <rb_select_poll+0x138>
    f90c:	ldr	r3, [r4, #36]	; 0x24
    f910:	str	r7, [r4, #36]	; 0x24
    f914:	ldr	r1, [r4, #40]	; 0x28
    f918:	str	r7, [r4, #40]	; 0x28
    f91c:	cmp	r3, #0
    f920:	beq	f92c <rb_select_poll+0x138>
    f924:	mov	r0, r4
    f928:	blx	r3
    f92c:	ldr	r3, [r4, #28]
    f930:	cmp	r3, #0
    f934:	bne	f948 <rb_select_poll+0x154>
    f938:	mov	r2, r3
    f93c:	mov	r1, #1
    f940:	mov	r0, r4
    f944:	bl	f688 <rb_setselect_poll>
    f948:	ldr	r3, [r4, #36]	; 0x24
    f94c:	cmp	r3, #0
    f950:	bne	f964 <rb_select_poll+0x170>
    f954:	mov	r2, r3
    f958:	mov	r1, #2
    f95c:	mov	r0, r4
    f960:	bl	f688 <rb_setselect_poll>
    f964:	add	r5, r5, #1
    f968:	b	f854 <rb_select_poll+0x60>
    f96c:	.word	0x0003348c
    f970:	.word	0x000157ec
    f974:	.word	0x000003bc

0000f978 <rb_ports_supports_event>:
    f978:	push	{r4, lr}
    f97c:	bl	4cbc <__errno_location@plt>
    f980:	mov	r3, #38	; 0x26
    f984:	str	r3, [r0]
    f988:	mov	r0, #0
    f98c:	pop	{r4, pc}

0000f990 <rb_ports_init_event>:
    f990:	bx	lr

0000f994 <rb_ports_sched_event>:
    f994:	push	{r4, lr}
    f998:	bl	4cbc <__errno_location@plt>
    f99c:	mov	r3, #38	; 0x26
    f9a0:	str	r3, [r0]
    f9a4:	mvn	r0, #0
    f9a8:	pop	{r4, pc}

0000f9ac <rb_ports_unsched_event>:
    f9ac:	bx	lr

0000f9b0 <rb_init_netio_ports>:
    f9b0:	mov	r0, #38	; 0x26
    f9b4:	bx	lr

0000f9b8 <rb_setselect_ports>:
    f9b8:	push	{r4, lr}
    f9bc:	bl	4cbc <__errno_location@plt>
    f9c0:	mov	r3, #38	; 0x26
    f9c4:	str	r3, [r0]
    f9c8:	pop	{r4, pc}

0000f9cc <rb_select_ports>:
    f9cc:	push	{r4, lr}
    f9d0:	bl	4cbc <__errno_location@plt>
    f9d4:	mov	r3, #38	; 0x26
    f9d8:	str	r3, [r0]
    f9dc:	mvn	r0, #0
    f9e0:	pop	{r4, pc}

0000f9e4 <rb_setup_fd_ports>:
    f9e4:	push	{r4, lr}
    f9e8:	bl	4cbc <__errno_location@plt>
    f9ec:	mov	r3, #38	; 0x26
    f9f0:	str	r3, [r0]
    f9f4:	mvn	r0, #0
    f9f8:	pop	{r4, pc}

0000f9fc <rb_find_fd>:
    f9fc:	ldr	r1, [pc, #96]	; fa64 <rb_find_fd+0x68>
    fa00:	subs	r2, r0, #0
    fa04:	add	r1, pc, r1
    fa08:	blt	fa54 <rb_find_fd+0x58>
    fa0c:	ldr	r0, [pc, #84]	; fa68 <rb_find_fd+0x6c>
    fa10:	asr	r3, r2, #24
    fa14:	eor	r3, r3, r2, asr #12
    fa18:	eor	r3, r3, r2
    fa1c:	ldr	r1, [r1, r0]
    fa20:	ubfx	r3, r3, #0, #12
    fa24:	ldr	r0, [r1]
    fa28:	mov	r1, #12
    fa2c:	mul	r3, r1, r3
    fa30:	ldr	r0, [r0, r3]
    fa34:	cmp	r0, #0
    fa38:	bxeq	lr
    fa3c:	ldr	r3, [r0]
    fa40:	ldr	r1, [r3, #12]
    fa44:	cmp	r1, r2
    fa48:	beq	fa5c <rb_find_fd+0x60>
    fa4c:	ldr	r0, [r0, #8]
    fa50:	b	fa34 <rb_find_fd+0x38>
    fa54:	mov	r0, #0
    fa58:	bx	lr
    fa5c:	mov	r0, r3
    fa60:	bx	lr
    fa64:	.word	0x000155f4
    fa68:	.word	0x000003bc

0000fa6c <rb_init_netio_sigio>:
    fa6c:	push	{r4, r5, r6, lr}
    fa70:	ldr	r4, [pc, #184]	; fb30 <rb_init_netio_sigio+0xc4>
    fa74:	bl	4440 <rb_getmaxconnect@plt>
    fa78:	lsl	r1, r0, #3
    fa7c:	mov	r0, #1
    fa80:	bl	45c0 <calloc@plt>
    fa84:	cmp	r0, #0
    fa88:	add	r4, pc, r4
    fa8c:	bne	fa94 <rb_init_netio_sigio+0x28>
    fa90:	bl	495c <rb_outofmemory@plt>
    fa94:	ldr	r3, [pc, #152]	; fb34 <rb_init_netio_sigio+0xc8>
    fa98:	mov	r5, #0
    fa9c:	mvn	r6, #0
    faa0:	ldr	r4, [r4, r3]
    faa4:	str	r0, [r4]
    faa8:	bl	4440 <rb_getmaxconnect@plt>
    faac:	str	r0, [r4, #8]
    fab0:	bl	4440 <rb_getmaxconnect@plt>
    fab4:	cmp	r0, r5
    fab8:	bgt	fb20 <rb_init_netio_sigio+0xb4>
    fabc:	mov	r5, #0
    fac0:	mov	r3, #1
    fac4:	str	r5, [r4, #4]
    fac8:	ldr	r4, [pc, #104]	; fb38 <rb_init_netio_sigio+0xcc>
    facc:	add	r4, pc, r4
    fad0:	str	r3, [r4], #4
    fad4:	mov	r0, r4
    fad8:	bl	4368 <sigemptyset@plt>
    fadc:	bl	4458 <__libc_current_sigrtmin@plt>
    fae0:	mov	r1, r0
    fae4:	mov	r0, r4
    fae8:	bl	4854 <sigaddset@plt>
    faec:	mov	r1, #29
    faf0:	mov	r0, r4
    faf4:	bl	4854 <sigaddset@plt>
    faf8:	bl	4458 <__libc_current_sigrtmin@plt>
    fafc:	add	r1, r0, #1
    fb00:	mov	r0, r4
    fb04:	bl	4854 <sigaddset@plt>
    fb08:	mov	r2, r5
    fb0c:	mov	r1, r4
    fb10:	mov	r0, r5
    fb14:	bl	498c <sigprocmask@plt>
    fb18:	mov	r0, r5
    fb1c:	pop	{r4, r5, r6, pc}
    fb20:	ldr	r3, [r4]
    fb24:	str	r6, [r3, r5, lsl #3]
    fb28:	add	r5, r5, #1
    fb2c:	b	fab0 <rb_init_netio_sigio+0x44>
    fb30:	.word	0x00015570
    fb34:	.word	0x000003cc
    fb38:	.word	0x000331d0

0000fb3c <rb_setup_fd_sigio>:
    fb3c:	push	{r4, r5, r6, lr}
    fb40:	mov	r2, #0
    fb44:	mov	r1, #3
    fb48:	ldr	r5, [r0, #12]
    fb4c:	mov	r0, r5
    fb50:	bl	4bd8 <fcntl@plt>
    fb54:	cmn	r0, #1
    fb58:	bne	fb64 <rb_setup_fd_sigio+0x28>
    fb5c:	mov	r0, #0
    fb60:	pop	{r4, r5, r6, pc}
    fb64:	tst	r0, #8192	; 0x2000
    fb68:	mov	r4, r0
    fb6c:	beq	fb84 <rb_setup_fd_sigio+0x48>
    fb70:	bic	r4, r0, #8192	; 0x2000
    fb74:	mov	r1, #4
    fb78:	mov	r2, r4
    fb7c:	mov	r0, r5
    fb80:	bl	4bd8 <fcntl@plt>
    fb84:	orr	r2, r4, #10240	; 0x2800
    fb88:	mov	r1, #4
    fb8c:	mov	r0, r5
    fb90:	bl	4bd8 <fcntl@plt>
    fb94:	cmn	r0, #1
    fb98:	beq	fb5c <rb_setup_fd_sigio+0x20>
    fb9c:	bl	4458 <__libc_current_sigrtmin@plt>
    fba0:	mov	r2, r0
    fba4:	mov	r1, #10
    fba8:	mov	r0, r5
    fbac:	bl	4bd8 <fcntl@plt>
    fbb0:	cmn	r0, #1
    fbb4:	beq	fb5c <rb_setup_fd_sigio+0x20>
    fbb8:	bl	4aa0 <getpid@plt>
    fbbc:	mov	r2, r0
    fbc0:	mov	r1, #8
    fbc4:	mov	r0, r5
    fbc8:	bl	4bd8 <fcntl@plt>
    fbcc:	adds	r0, r0, #1
    fbd0:	movne	r0, #1
    fbd4:	pop	{r4, r5, r6, pc}

0000fbd8 <rb_setselect_sigio>:
    fbd8:	push	{r4, r5, r6, r7, r8, lr}
    fbdc:	subs	r4, r0, #0
    fbe0:	ldr	lr, [pc, #328]	; fd30 <rb_setselect_sigio+0x158>
    fbe4:	add	lr, pc, lr
    fbe8:	popeq	{r4, r5, r6, r7, r8, pc}
    fbec:	tst	r1, #1
    fbf0:	beq	fc0c <rb_setselect_sigio+0x34>
    fbf4:	ldr	ip, [r4, #20]
    fbf8:	cmp	r2, #0
    fbfc:	strd	r2, [r4, #28]
    fc00:	orrne	ip, ip, #64	; 0x40
    fc04:	biceq	ip, ip, #64	; 0x40
    fc08:	str	ip, [r4, #20]
    fc0c:	tst	r1, #2
    fc10:	beq	fc2c <rb_setselect_sigio+0x54>
    fc14:	strd	r2, [r4, #36]	; 0x24
    fc18:	cmp	r2, #0
    fc1c:	ldr	r3, [r4, #20]
    fc20:	orrne	r3, r3, #256	; 0x100
    fc24:	biceq	r3, r3, #256	; 0x100
    fc28:	str	r3, [r4, #20]
    fc2c:	ldr	r3, [pc, #256]	; fd34 <rb_setselect_sigio+0x15c>
    fc30:	ldr	r5, [lr, r3]
    fc34:	ldr	r3, [r4, #12]
    fc38:	ldr	r7, [r5, #8]
    fc3c:	cmp	r3, r7
    fc40:	bge	fc94 <rb_setselect_sigio+0xbc>
    fc44:	ldr	r2, [r5]
    fc48:	ldr	r1, [r4, #20]
    fc4c:	ldr	r3, [r4, #12]
    fc50:	ldr	r0, [r5, #4]
    fc54:	cmp	r1, #0
    fc58:	add	ip, r2, r3, lsl #3
    fc5c:	bgt	fd1c <rb_setselect_sigio+0x144>
    fc60:	mov	r1, #0
    fc64:	cmp	r3, r0
    fc68:	strh	r1, [ip, #4]
    fc6c:	mvn	ip, #0
    fc70:	str	ip, [r2, r3, lsl #3]
    fc74:	addeq	r2, r2, #8
    fc78:	popne	{r4, r5, r6, r7, r8, pc}
    fc7c:	subs	r0, r3, #0
    fc80:	bge	fd00 <rb_setselect_sigio+0x128>
    fc84:	cmp	r1, #0
    fc88:	popeq	{r4, r5, r6, r7, r8, pc}
    fc8c:	str	r3, [r5, #4]
    fc90:	pop	{r4, r5, r6, r7, r8, pc}
    fc94:	add	r3, r7, #1024	; 0x400
    fc98:	ldr	r0, [r5]
    fc9c:	lsl	r6, r3, #3
    fca0:	str	r3, [r5, #8]
    fca4:	mov	r1, r6
    fca8:	bl	4c14 <realloc@plt>
    fcac:	cmp	r0, #0
    fcb0:	bne	fcb8 <rb_setselect_sigio+0xe0>
    fcb4:	bl	495c <rb_outofmemory@plt>
    fcb8:	sub	r6, r6, #8128	; 0x1fc0
    fcbc:	mov	r2, #8192	; 0x2000
    fcc0:	str	r0, [r5]
    fcc4:	sub	r6, r6, #56	; 0x38
    fcc8:	mov	r1, #0
    fccc:	add	r0, r0, r6
    fcd0:	bl	45fc <memset@plt>
    fcd4:	ldr	r1, [r5]
    fcd8:	add	r3, r7, #1
    fcdc:	mvn	r0, #0
    fce0:	ldr	r2, [r5, #8]
    fce4:	cmp	r3, r2
    fce8:	bge	fc44 <rb_setselect_sigio+0x6c>
    fcec:	str	r0, [r1, r3, lsl #3]
    fcf0:	add	r3, r3, #1
    fcf4:	b	fce4 <rb_setselect_sigio+0x10c>
    fcf8:	mov	r1, #1
    fcfc:	b	fc7c <rb_setselect_sigio+0xa4>
    fd00:	sub	r3, r3, #1
    fd04:	ldr	ip, [r2, r3, lsl #3]
    fd08:	cmn	ip, #1
    fd0c:	beq	fcf8 <rb_setselect_sigio+0x120>
    fd10:	cmp	r1, #0
    fd14:	strne	r0, [r5, #4]
    fd18:	pop	{r4, r5, r6, r7, r8, pc}
    fd1c:	cmp	r3, r0
    fd20:	strh	r1, [ip, #4]
    fd24:	str	r3, [r2, r3, lsl #3]
    fd28:	pople	{r4, r5, r6, r7, r8, pc}
    fd2c:	b	fc8c <rb_setselect_sigio+0xb4>
    fd30:	.word	0x00015414
    fd34:	.word	0x000003cc

0000fd38 <rb_sigio_supports_event>:
    fd38:	push	{r4, r5, lr}
    fd3c:	sub	sp, sp, #76	; 0x4c
    fd40:	ldr	r5, [pc, #100]	; fdac <rb_sigio_supports_event+0x74>
    fd44:	add	r5, pc, r5
    fd48:	ldr	r0, [r5, #132]	; 0x84
    fd4c:	cmp	r0, #1
    fd50:	beq	fd9c <rb_sigio_supports_event+0x64>
    fd54:	cmn	r0, #1
    fd58:	mov	r4, #0
    fd5c:	beq	fda4 <rb_sigio_supports_event+0x6c>
    fd60:	mov	r3, #26
    fd64:	add	r2, sp, #4
    fd68:	add	r1, sp, #8
    fd6c:	mov	r0, r4
    fd70:	str	r3, [sp, #12]
    fd74:	str	r4, [sp, #16]
    fd78:	bl	4500 <timer_create@plt>
    fd7c:	cmp	r0, r4
    fd80:	mvnne	r3, #0
    fd84:	strne	r3, [r5, #132]	; 0x84
    fd88:	bne	fda4 <rb_sigio_supports_event+0x6c>
    fd8c:	ldr	r0, [sp, #4]
    fd90:	bl	4a4c <timer_delete@plt>
    fd94:	mov	r0, #1
    fd98:	str	r0, [r5, #132]	; 0x84
    fd9c:	add	sp, sp, #76	; 0x4c
    fda0:	pop	{r4, r5, pc}
    fda4:	mov	r0, r4
    fda8:	b	fd9c <rb_sigio_supports_event+0x64>
    fdac:	.word	0x00032f58

0000fdb0 <rb_select_sigio>:
    fdb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    fdb4:	mov	r6, r0
    fdb8:	sub	sp, sp, #136	; 0x88
    fdbc:	bl	fd38 <rb_sigio_supports_event>
    fdc0:	ldr	r7, [pc, #720]	; 10098 <rb_select_sigio+0x2e8>
    fdc4:	mvn	r3, r6
    fdc8:	cmp	r0, #0
    fdcc:	lsr	r3, r3, #31
    fdd0:	movne	r0, #1
    fdd4:	moveq	r0, r3
    fdd8:	cmp	r0, #0
    fddc:	add	r7, pc, r7
    fde0:	beq	fe00 <rb_select_sigio+0x50>
    fde4:	mov	r2, #1000	; 0x3e8
    fde8:	sdiv	r3, r6, r2
    fdec:	str	r3, [sp]
    fdf0:	mls	r3, r2, r3, r6
    fdf4:	ldr	r2, [pc, #672]	; 1009c <rb_select_sigio+0x2ec>
    fdf8:	mul	r3, r2, r3
    fdfc:	str	r3, [sp, #4]
    fe00:	ldr	r8, [pc, #664]	; 100a0 <rb_select_sigio+0x2f0>
    fe04:	ldr	sl, [pc, #664]	; 100a4 <rb_select_sigio+0x2f4>
    fe08:	add	r8, pc, r8
    fe0c:	add	r9, r8, #4
    fe10:	add	sl, pc, sl
    fe14:	ldr	r3, [r8]
    fe18:	cmp	r3, #0
    fe1c:	bne	fe64 <rb_select_sigio+0xb4>
    fe20:	ldr	r3, [r8, #132]	; 0x84
    fe24:	add	r1, sp, #8
    fe28:	cmp	r3, #0
    fe2c:	lsreq	r3, r6, #31
    fe30:	movne	r3, #1
    fe34:	cmp	r3, #0
    fe38:	beq	fed4 <rb_select_sigio+0x124>
    fe3c:	mov	r0, r9
    fe40:	bl	444c <sigwaitinfo@plt>
    fe44:	cmp	r0, #0
    fe48:	mov	r4, r0
    fe4c:	ble	ffa0 <rb_select_sigio+0x1f0>
    fe50:	cmp	r0, #29
    fe54:	bne	fee4 <rb_select_sigio+0x134>
    fe58:	ldr	r0, [pc, #584]	; 100a8 <rb_select_sigio+0x2f8>
    fe5c:	add	r0, pc, r0
    fe60:	bl	48f0 <rb_lib_log@plt>
    fe64:	bl	4458 <__libc_current_sigrtmin@plt>
    fe68:	mov	r1, #1
    fe6c:	mov	r5, #0
    fe70:	bl	44ac <signal@plt>
    fe74:	bl	4458 <__libc_current_sigrtmin@plt>
    fe78:	mov	r1, #0
    fe7c:	bl	44ac <signal@plt>
    fe80:	ldr	r3, [pc, #548]	; 100ac <rb_select_sigio+0x2fc>
    fe84:	mov	r2, r6
    fe88:	add	r3, pc, r3
    fe8c:	str	r5, [r3]
    fe90:	ldr	r3, [pc, #536]	; 100b0 <rb_select_sigio+0x300>
    fe94:	ldr	r7, [r7, r3]
    fe98:	ldrd	r0, [r7]
    fe9c:	add	r1, r1, #1
    fea0:	bl	49d4 <poll@plt>
    fea4:	mov	r4, r0
    fea8:	bl	4968 <rb_set_time@plt>
    feac:	cmp	r4, r5
    feb0:	bge	ffc0 <rb_select_sigio+0x210>
    feb4:	bl	4cbc <__errno_location@plt>
    feb8:	ldr	r0, [r0]
    febc:	bl	43b0 <rb_ignore_errno@plt>
    fec0:	cmp	r0, #0
    fec4:	movne	r4, #5
    fec8:	bne	ffb4 <rb_select_sigio+0x204>
    fecc:	mov	r4, #0
    fed0:	b	ffb4 <rb_select_sigio+0x204>
    fed4:	mov	r2, sp
    fed8:	mov	r0, r9
    fedc:	bl	4494 <sigtimedwait@plt>
    fee0:	b	fe44 <rb_select_sigio+0x94>
    fee4:	bl	4458 <__libc_current_sigrtmin@plt>
    fee8:	add	r0, r0, #1
    feec:	cmp	r0, r4
    fef0:	bne	ff14 <rb_select_sigio+0x164>
    fef4:	ldr	r3, [sl, #132]	; 0x84
    fef8:	cmp	r3, #0
    fefc:	beq	ff14 <rb_select_sigio+0x164>
    ff00:	ldr	r0, [sp, #28]
    ff04:	cmp	r0, #0
    ff08:	beq	fe14 <rb_select_sigio+0x64>
    ff0c:	bl	4878 <rb_run_one_event@plt>
    ff10:	b	fe14 <rb_select_sigio+0x64>
    ff14:	ldr	r3, [pc, #404]	; 100b0 <rb_select_sigio+0x300>
    ff18:	ldr	r2, [sp, #20]
    ff1c:	ldr	r0, [sp, #24]
    ff20:	ldr	r3, [r7, r3]
    ff24:	ldr	r3, [r3]
    ff28:	add	r3, r3, r0, lsl #3
    ff2c:	ldrh	r5, [r3, #6]
    ff30:	orr	r5, r5, r2
    ff34:	sxth	r5, r5
    ff38:	strh	r5, [r3, #6]
    ff3c:	bl	f9fc <rb_find_fd>
    ff40:	subs	r4, r0, #0
    ff44:	beq	fe14 <rb_select_sigio+0x64>
    ff48:	tst	r5, #89	; 0x59
    ff4c:	beq	ff70 <rb_select_sigio+0x1c0>
    ff50:	ldr	r3, [r4, #28]
    ff54:	mov	r2, #0
    ff58:	str	r2, [r4, #28]
    ff5c:	ldr	r1, [r4, #32]
    ff60:	str	r2, [r4, #32]
    ff64:	cmp	r3, r2
    ff68:	beq	ff70 <rb_select_sigio+0x1c0>
    ff6c:	blx	r3
    ff70:	tst	r5, #284	; 0x11c
    ff74:	beq	fe14 <rb_select_sigio+0x64>
    ff78:	ldr	r3, [r4, #36]	; 0x24
    ff7c:	mov	r2, #0
    ff80:	str	r2, [r4, #36]	; 0x24
    ff84:	ldr	r1, [r4, #40]	; 0x28
    ff88:	str	r2, [r4, #40]	; 0x28
    ff8c:	cmp	r3, r2
    ff90:	beq	fe14 <rb_select_sigio+0x64>
    ff94:	mov	r0, r4
    ff98:	blx	r3
    ff9c:	b	fe14 <rb_select_sigio+0x64>
    ffa0:	ldr	r3, [pc, #268]	; 100b4 <rb_select_sigio+0x304>
    ffa4:	ldr	r4, [pc, r3]
    ffa8:	cmp	r4, #0
    ffac:	bne	fe64 <rb_select_sigio+0xb4>
    ffb0:	bl	4968 <rb_set_time@plt>
    ffb4:	mov	r0, r4
    ffb8:	add	sp, sp, #136	; 0x88
    ffbc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ffc0:	movne	r8, r5
    ffc4:	beq	fecc <rb_select_sigio+0x11c>
    ffc8:	ldr	r3, [r7, #4]
    ffcc:	cmp	r3, r5
    ffd0:	blt	fecc <rb_select_sigio+0x11c>
    ffd4:	ldr	r3, [r7]
    ffd8:	add	r2, r3, r5, lsl #3
    ffdc:	ldrsh	r6, [r2, #6]
    ffe0:	cmp	r6, #0
    ffe4:	beq	10090 <rb_select_sigio+0x2e0>
    ffe8:	ldr	r0, [r3, r5, lsl #3]
    ffec:	cmn	r0, #1
    fff0:	beq	10090 <rb_select_sigio+0x2e0>
    fff4:	bl	f9fc <rb_find_fd>
    fff8:	subs	r4, r0, #0
    fffc:	beq	10090 <rb_select_sigio+0x2e0>
   10000:	tst	r6, #89	; 0x59
   10004:	beq	10024 <rb_select_sigio+0x274>
   10008:	ldr	r3, [r4, #28]
   1000c:	str	r8, [r4, #28]
   10010:	ldr	r1, [r4, #32]
   10014:	str	r8, [r4, #32]
   10018:	cmp	r3, #0
   1001c:	beq	10024 <rb_select_sigio+0x274>
   10020:	blx	r3
   10024:	ldrb	r3, [r4, #16]
   10028:	tst	r3, #1
   1002c:	beq	10058 <rb_select_sigio+0x2a8>
   10030:	tst	r6, #284	; 0x11c
   10034:	beq	10058 <rb_select_sigio+0x2a8>
   10038:	ldr	r3, [r4, #36]	; 0x24
   1003c:	str	r8, [r4, #36]	; 0x24
   10040:	ldr	r1, [r4, #40]	; 0x28
   10044:	str	r8, [r4, #40]	; 0x28
   10048:	cmp	r3, #0
   1004c:	beq	10058 <rb_select_sigio+0x2a8>
   10050:	mov	r0, r4
   10054:	blx	r3
   10058:	ldr	r3, [r4, #28]
   1005c:	cmp	r3, #0
   10060:	bne	10074 <rb_select_sigio+0x2c4>
   10064:	mov	r2, r3
   10068:	mov	r1, #1
   1006c:	mov	r0, r4
   10070:	bl	fbd8 <rb_setselect_sigio>
   10074:	ldr	r3, [r4, #36]	; 0x24
   10078:	cmp	r3, #0
   1007c:	bne	10090 <rb_select_sigio+0x2e0>
   10080:	mov	r2, r3
   10084:	mov	r1, #2
   10088:	mov	r0, r4
   1008c:	bl	fbd8 <rb_setselect_sigio>
   10090:	add	r5, r5, #1
   10094:	b	ffc8 <rb_select_sigio+0x218>
   10098:	.word	0x0001521c
   1009c:	.word	0x000f4240
   100a0:	.word	0x00032e94
   100a4:	.word	0x00032e8c
   100a8:	.word	0x0000462f
   100ac:	.word	0x00032e14
   100b0:	.word	0x000003cc
   100b4:	.word	0x00032cf8

000100b8 <rb_sigio_init_event>:
   100b8:	b	fd38 <rb_sigio_supports_event>

000100bc <rb_sigio_sched_event>:
   100bc:	ldr	r3, [pc, #264]	; 101cc <rb_sigio_sched_event+0x110>
   100c0:	add	r3, pc, r3
   100c4:	ldr	r3, [r3, #132]	; 0x84
   100c8:	cmp	r3, #0
   100cc:	ble	101c4 <rb_sigio_sched_event+0x108>
   100d0:	push	{r4, r5, r6, r7, lr}
   100d4:	sub	sp, sp, #84	; 0x54
   100d8:	mov	r2, #64	; 0x40
   100dc:	add	r7, sp, #16
   100e0:	mov	r6, r1
   100e4:	mov	r4, r0
   100e8:	mov	r1, #0
   100ec:	mov	r0, r7
   100f0:	bl	45fc <memset@plt>
   100f4:	mov	r1, #4
   100f8:	mov	r0, #1
   100fc:	bl	45c0 <calloc@plt>
   10100:	subs	r5, r0, #0
   10104:	bne	1010c <rb_sigio_sched_event+0x50>
   10108:	bl	495c <rb_outofmemory@plt>
   1010c:	str	r5, [r4, #40]	; 0x28
   10110:	bl	4458 <__libc_current_sigrtmin@plt>
   10114:	add	r0, r0, #1
   10118:	mov	r2, r5
   1011c:	str	r4, [sp, #16]
   10120:	mov	r1, r7
   10124:	str	r0, [sp, #20]
   10128:	mov	r0, #0
   1012c:	bl	4500 <timer_create@plt>
   10130:	cmp	r0, #0
   10134:	bge	10160 <rb_sigio_sched_event+0xa4>
   10138:	bl	4cbc <__errno_location@plt>
   1013c:	ldr	r0, [r0]
   10140:	bl	4374 <strerror@plt>
   10144:	mov	r1, r0
   10148:	ldr	r0, [pc, #128]	; 101d0 <rb_sigio_sched_event+0x114>
   1014c:	add	r0, pc, r0
   10150:	bl	48f0 <rb_lib_log@plt>
   10154:	mov	r0, #0
   10158:	add	sp, sp, #84	; 0x54
   1015c:	pop	{r4, r5, r6, r7, pc}
   10160:	ldr	r3, [r4, #24]
   10164:	mov	r0, #0
   10168:	mov	r1, #0
   1016c:	mov	r2, sp
   10170:	strd	r0, [sp]
   10174:	strd	r0, [r2, #8]
   10178:	str	r6, [sp, #8]
   1017c:	cmp	r3, #0
   10180:	addne	r3, sp, #8
   10184:	ldmne	r3, {r0, r1}
   10188:	mov	r3, #0
   1018c:	stmne	r2, {r0, r1}
   10190:	mov	r1, r3
   10194:	ldr	r0, [r5]
   10198:	bl	4728 <timer_settime@plt>
   1019c:	cmp	r0, #0
   101a0:	movge	r0, #1
   101a4:	bge	10158 <rb_sigio_sched_event+0x9c>
   101a8:	bl	4cbc <__errno_location@plt>
   101ac:	ldr	r0, [r0]
   101b0:	bl	4374 <strerror@plt>
   101b4:	mov	r1, r0
   101b8:	ldr	r0, [pc, #20]	; 101d4 <rb_sigio_sched_event+0x118>
   101bc:	add	r0, pc, r0
   101c0:	b	10150 <rb_sigio_sched_event+0x94>
   101c4:	mov	r0, #0
   101c8:	bx	lr
   101cc:	.word	0x00032bdc
   101d0:	.word	0x0000431a
   101d4:	.word	0x000042bc

000101d8 <rb_sigio_unsched_event>:
   101d8:	ldr	r3, [pc, #60]	; 1021c <rb_sigio_unsched_event+0x44>
   101dc:	add	r3, pc, r3
   101e0:	ldr	r3, [r3, #132]	; 0x84
   101e4:	cmp	r3, #0
   101e8:	bxle	lr
   101ec:	push	{r4, lr}
   101f0:	mov	r4, r0
   101f4:	ldr	r3, [r0, #40]	; 0x28
   101f8:	ldr	r0, [r3]
   101fc:	bl	4a4c <timer_delete@plt>
   10200:	ldr	r0, [r4, #40]	; 0x28
   10204:	cmp	r0, #0
   10208:	beq	10210 <rb_sigio_unsched_event+0x38>
   1020c:	bl	46c8 <free@plt>
   10210:	mov	r3, #0
   10214:	str	r3, [r4, #40]	; 0x28
   10218:	pop	{r4, pc}
   1021c:	.word	0x00032ac0

00010220 <select_update_selectfds>:
   10220:	ldr	r3, [r0, #12]
   10224:	cmp	r1, #1
   10228:	push	{r4, r5, r6, r7, lr}
   1022c:	ldr	ip, [r0, #20]
   10230:	add	lr, r3, #31
   10234:	and	r4, r3, #31
   10238:	bne	10340 <select_update_selectfds+0x120>
   1023c:	ldr	r6, [pc, #332]	; 10390 <select_update_selectfds+0x170>
   10240:	cmp	r3, #0
   10244:	movge	lr, r3
   10248:	rsbs	r7, r3, #0
   1024c:	asr	lr, lr, #5
   10250:	and	r7, r7, #31
   10254:	rsbpl	r4, r7, #0
   10258:	cmp	r2, #0
   1025c:	lsl	r1, r1, r4
   10260:	orrne	ip, ip, #1
   10264:	biceq	ip, ip, #1
   10268:	add	r6, pc, r6
   1026c:	ldr	r5, [r6, lr, lsl #2]
   10270:	orrne	r5, r5, r1
   10274:	biceq	r5, r5, r1
   10278:	strne	r5, [r6, lr, lsl #2]
   1027c:	streq	r5, [r6, lr, lsl #2]
   10280:	str	ip, [r0, #20]
   10284:	ldr	ip, [pc, #264]	; 10394 <select_update_selectfds+0x174>
   10288:	ldr	r1, [r0, #20]
   1028c:	add	ip, pc, ip
   10290:	ldr	r2, [ip]
   10294:	ands	r1, r1, #3
   10298:	beq	102a8 <select_update_selectfds+0x88>
   1029c:	cmp	r2, r3
   102a0:	strlt	r3, [ip]
   102a4:	pop	{r4, r5, r6, r7, pc}
   102a8:	cmp	r2, r3
   102ac:	poplt	{r4, r5, r6, r7, pc}
   102b0:	mov	r3, r2
   102b4:	mov	r4, #1
   102b8:	ldr	ip, [pc, #216]	; 10398 <select_update_selectfds+0x178>
   102bc:	mov	r2, r1
   102c0:	add	ip, pc, ip
   102c4:	subs	lr, r3, #0
   102c8:	bge	102ec <select_update_selectfds+0xcc>
   102cc:	cmp	r2, #0
   102d0:	popeq	{r4, r5, r6, r7, pc}
   102d4:	ldr	r2, [pc, #192]	; 1039c <select_update_selectfds+0x17c>
   102d8:	add	r2, pc, r2
   102dc:	str	r3, [r2]
   102e0:	pop	{r4, r5, r6, r7, pc}
   102e4:	mov	r2, #1
   102e8:	b	102c4 <select_update_selectfds+0xa4>
   102ec:	asr	r0, r3, #5
   102f0:	and	r1, r3, #31
   102f4:	lsl	r1, r4, r1
   102f8:	ldr	r5, [ip, r0, lsl #2]
   102fc:	tst	r1, r5
   10300:	beq	10318 <select_update_selectfds+0xf8>
   10304:	cmp	r2, #0
   10308:	popeq	{r4, r5, r6, r7, pc}
   1030c:	ldr	r2, [pc, #140]	; 103a0 <select_update_selectfds+0x180>
   10310:	add	r2, pc, r2
   10314:	b	102dc <select_update_selectfds+0xbc>
   10318:	add	r0, ip, r0, lsl #2
   1031c:	sub	r3, r3, #1
   10320:	ldr	r0, [r0, #128]	; 0x80
   10324:	tst	r1, r0
   10328:	beq	102e4 <select_update_selectfds+0xc4>
   1032c:	cmp	r2, #0
   10330:	ldrne	r3, [pc, #108]	; 103a4 <select_update_selectfds+0x184>
   10334:	addne	r3, pc, r3
   10338:	strne	lr, [r3]
   1033c:	pop	{r4, r5, r6, r7, pc}
   10340:	rsbs	r1, r3, #0
   10344:	and	r1, r1, #31
   10348:	rsbpl	r4, r1, #0
   1034c:	mov	r1, #1
   10350:	lsl	r1, r1, r4
   10354:	ldr	r4, [pc, #76]	; 103a8 <select_update_selectfds+0x188>
   10358:	cmp	r3, #0
   1035c:	movge	lr, r3
   10360:	cmp	r2, #0
   10364:	asr	lr, lr, #5
   10368:	orrne	ip, ip, #2
   1036c:	add	r4, pc, r4
   10370:	add	lr, r4, lr, lsl #2
   10374:	ldr	r4, [lr, #128]	; 0x80
   10378:	orrne	r1, r1, r4
   1037c:	strne	r1, [lr, #128]	; 0x80
   10380:	biceq	r1, r4, r1
   10384:	biceq	ip, ip, #2
   10388:	streq	r1, [lr, #128]	; 0x80
   1038c:	b	10280 <select_update_selectfds+0x60>
   10390:	.word	0x00032abc
   10394:	.word	0x000151f0
   10398:	.word	0x00032a64
   1039c:	.word	0x000151a4
   103a0:	.word	0x0001516c
   103a4:	.word	0x00015148
   103a8:	.word	0x000329b8

000103ac <rb_setup_fd_select>:
   103ac:	mov	r0, #0
   103b0:	bx	lr

000103b4 <rb_init_netio_select>:
   103b4:	ldr	r3, [pc, #100]	; 10420 <rb_init_netio_select+0x6c>
   103b8:	ldr	r2, [pc, #100]	; 10424 <rb_init_netio_select+0x70>
   103bc:	add	r3, pc, r3
   103c0:	ldr	r3, [r3, r2]
   103c4:	ldr	r2, [r3]
   103c8:	cmp	r2, #1024	; 0x400
   103cc:	movgt	r2, #1024	; 0x400
   103d0:	strgt	r2, [r3]
   103d4:	mov	r3, #0
   103d8:	ldr	r2, [pc, #72]	; 10428 <rb_init_netio_select+0x74>
   103dc:	mov	r1, r3
   103e0:	add	r2, pc, r2
   103e4:	add	r3, r3, #1
   103e8:	str	r1, [r2], #4
   103ec:	cmp	r3, #32
   103f0:	bne	103e4 <rb_init_netio_select+0x30>
   103f4:	ldr	r2, [pc, #48]	; 1042c <rb_init_netio_select+0x78>
   103f8:	mov	r3, #0
   103fc:	mov	r1, r3
   10400:	add	r2, pc, r2
   10404:	add	r2, r2, #128	; 0x80
   10408:	add	r3, r3, #1
   1040c:	str	r1, [r2], #4
   10410:	cmp	r3, #32
   10414:	bne	10408 <rb_init_netio_select+0x54>
   10418:	mov	r0, #0
   1041c:	bx	lr
   10420:	.word	0x00014c3c
   10424:	.word	0x0000039c
   10428:	.word	0x00032944
   1042c:	.word	0x00032924

00010430 <rb_setselect_select>:
   10430:	tst	r1, #1
   10434:	push	{r4, r5, r6, r7, r8, lr}
   10438:	mov	r4, r0
   1043c:	mov	r7, r1
   10440:	mov	r5, r2
   10444:	mov	r6, r3
   10448:	beq	1045c <rb_setselect_select+0x2c>
   1044c:	mov	r1, #1
   10450:	str	r2, [r4, #28]
   10454:	str	r3, [r4, #32]
   10458:	bl	10220 <select_update_selectfds>
   1045c:	tst	r7, #2
   10460:	popeq	{r4, r5, r6, r7, r8, pc}
   10464:	mov	r2, r5
   10468:	mov	r0, r4
   1046c:	str	r5, [r4, #36]	; 0x24
   10470:	mov	r1, #2
   10474:	str	r6, [r4, #40]	; 0x28
   10478:	pop	{r4, r5, r6, r7, r8, lr}
   1047c:	b	10220 <select_update_selectfds>

00010480 <rb_select_select>:
   10480:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10484:	mov	r5, r0
   10488:	mov	r8, #1000	; 0x3e8
   1048c:	sub	sp, sp, #20
   10490:	mov	r2, #128	; 0x80
   10494:	mul	r8, r8, r5
   10498:	ldr	r4, [pc, #448]	; 10660 <rb_select_select+0x1e0>
   1049c:	ldr	sl, [pc, #448]	; 10664 <rb_select_select+0x1e4>
   104a0:	ldr	r6, [pc, #448]	; 10668 <rb_select_select+0x1e8>
   104a4:	add	r4, pc, r4
   104a8:	mov	r1, r4
   104ac:	add	r0, r4, #256	; 0x100
   104b0:	bl	47dc <memcpy@plt>
   104b4:	add	r7, r4, #384	; 0x180
   104b8:	mov	r2, #128	; 0x80
   104bc:	add	r1, r4, r2
   104c0:	mov	r0, r7
   104c4:	add	sl, pc, sl
   104c8:	add	r6, pc, r6
   104cc:	bl	47dc <memcpy@plt>
   104d0:	ldr	r0, [sl]
   104d4:	add	r3, sp, #8
   104d8:	mov	r5, #0
   104dc:	mov	r2, r7
   104e0:	add	r1, r4, #256	; 0x100
   104e4:	str	r3, [sp]
   104e8:	mov	r3, r5
   104ec:	str	r5, [sp, #8]
   104f0:	str	r8, [sp, #12]
   104f4:	add	r0, r0, #1
   104f8:	bl	4908 <select@plt>
   104fc:	subs	r9, r0, #0
   10500:	bge	10528 <rb_select_select+0xa8>
   10504:	bl	4cbc <__errno_location@plt>
   10508:	ldr	r0, [r0]
   1050c:	bl	43b0 <rb_ignore_errno@plt>
   10510:	cmp	r0, r5
   10514:	bne	104d0 <rb_select_select+0x50>
   10518:	bl	4968 <rb_set_time@plt>
   1051c:	mvn	r0, #0
   10520:	add	sp, sp, #20
   10524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10528:	bl	4968 <rb_set_time@plt>
   1052c:	cmp	r9, #0
   10530:	bne	1053c <rb_select_select+0xbc>
   10534:	mov	r0, #0
   10538:	b	10520 <rb_select_select+0xa0>
   1053c:	ldr	r7, [pc, #296]	; 1066c <rb_select_select+0x1ec>
   10540:	ldr	r8, [pc, #296]	; 10670 <rb_select_select+0x1f0>
   10544:	ldr	r9, [pc, #296]	; 10674 <rb_select_select+0x1f4>
   10548:	add	r7, pc, r7
   1054c:	add	r8, pc, r8
   10550:	add	r9, pc, r9
   10554:	b	1060c <rb_select_select+0x18c>
   10558:	asr	sl, r5, #5
   1055c:	and	r3, r5, #31
   10560:	mov	fp, #1
   10564:	lsl	fp, fp, r3
   10568:	lsl	sl, sl, #2
   1056c:	add	r3, r8, sl
   10570:	ldr	r3, [r3, #256]	; 0x100
   10574:	tst	fp, r3
   10578:	beq	1059c <rb_select_select+0x11c>
   1057c:	ldr	r3, [r4, #28]
   10580:	mov	r2, #0
   10584:	str	r2, [r4, #28]
   10588:	cmp	r3, r2
   1058c:	beq	1059c <rb_select_select+0x11c>
   10590:	mov	r0, r4
   10594:	ldr	r1, [r4, #32]
   10598:	blx	r3
   1059c:	ldrb	r3, [r4, #16]
   105a0:	tst	r3, #1
   105a4:	beq	10608 <rb_select_select+0x188>
   105a8:	add	sl, r9, sl
   105ac:	ldr	r3, [sl, #384]	; 0x180
   105b0:	tst	fp, r3
   105b4:	beq	105d8 <rb_select_select+0x158>
   105b8:	ldr	r3, [r4, #36]	; 0x24
   105bc:	mov	r2, #0
   105c0:	str	r2, [r4, #36]	; 0x24
   105c4:	cmp	r3, r2
   105c8:	beq	105d8 <rb_select_select+0x158>
   105cc:	mov	r0, r4
   105d0:	ldr	r1, [r4, #40]	; 0x28
   105d4:	blx	r3
   105d8:	ldr	r2, [r4, #28]
   105dc:	cmp	r2, #0
   105e0:	bne	105f0 <rb_select_select+0x170>
   105e4:	mov	r1, #1
   105e8:	mov	r0, r4
   105ec:	bl	10220 <select_update_selectfds>
   105f0:	ldr	r2, [r4, #36]	; 0x24
   105f4:	cmp	r2, #0
   105f8:	bne	10608 <rb_select_select+0x188>
   105fc:	mov	r1, #2
   10600:	mov	r0, r4
   10604:	bl	10220 <select_update_selectfds>
   10608:	add	r5, r5, #1
   1060c:	ldr	r3, [r7]
   10610:	cmp	r3, r5
   10614:	blt	10534 <rb_select_select+0xb4>
   10618:	ldr	r2, [pc, #88]	; 10678 <rb_select_select+0x1f8>
   1061c:	asr	r3, r5, #24
   10620:	eor	r3, r3, r5, asr #12
   10624:	eor	r3, r3, r5
   10628:	ldr	r2, [r6, r2]
   1062c:	ubfx	r3, r3, #0, #12
   10630:	ldr	r1, [r2]
   10634:	mov	r2, #12
   10638:	mul	r3, r2, r3
   1063c:	ldr	r3, [r1, r3]
   10640:	cmp	r3, #0
   10644:	beq	10608 <rb_select_select+0x188>
   10648:	ldr	r4, [r3]
   1064c:	ldr	r2, [r4, #12]
   10650:	cmp	r5, r2
   10654:	beq	10558 <rb_select_select+0xd8>
   10658:	ldr	r3, [r3, #8]
   1065c:	b	10640 <rb_select_select+0x1c0>
   10660:	.word	0x00032880
   10664:	.word	0x00014fb8
   10668:	.word	0x00014b30
   1066c:	.word	0x00014f34
   10670:	.word	0x000327d8
   10674:	.word	0x000327d4
   10678:	.word	0x000003bc

0001067c <rb_init_netio_kqueue>:
   1067c:	push	{r4, lr}
   10680:	bl	4cbc <__errno_location@plt>
   10684:	mov	r3, #38	; 0x26
   10688:	str	r3, [r0]
   1068c:	mvn	r0, #0
   10690:	pop	{r4, pc}

00010694 <rb_setselect_kqueue>:
   10694:	push	{r4, lr}
   10698:	bl	4cbc <__errno_location@plt>
   1069c:	mov	r3, #38	; 0x26
   106a0:	str	r3, [r0]
   106a4:	pop	{r4, pc}

000106a8 <rb_select_kqueue>:
   106a8:	push	{r4, lr}
   106ac:	bl	4cbc <__errno_location@plt>
   106b0:	mov	r3, #38	; 0x26
   106b4:	str	r3, [r0]
   106b8:	mvn	r0, #0
   106bc:	pop	{r4, pc}

000106c0 <rb_setup_fd_kqueue>:
   106c0:	push	{r4, lr}
   106c4:	bl	4cbc <__errno_location@plt>
   106c8:	mov	r3, #38	; 0x26
   106cc:	str	r3, [r0]
   106d0:	mvn	r0, #0
   106d4:	pop	{r4, pc}

000106d8 <rb_kqueue_init_event>:
   106d8:	bx	lr

000106dc <rb_kqueue_sched_event>:
   106dc:	push	{r4, lr}
   106e0:	bl	4cbc <__errno_location@plt>
   106e4:	mov	r3, #38	; 0x26
   106e8:	str	r3, [r0]
   106ec:	mvn	r0, #0
   106f0:	pop	{r4, pc}

000106f4 <rb_kqueue_unsched_event>:
   106f4:	bx	lr

000106f8 <rb_kqueue_supports_event>:
   106f8:	push	{r4, lr}
   106fc:	bl	4cbc <__errno_location@plt>
   10700:	mov	r3, #38	; 0x26
   10704:	str	r3, [r0]
   10708:	mov	r0, #0
   1070c:	pop	{r4, pc}

00010710 <rb_rawbuf_done>:
   10710:	ldrd	r2, [r1, #4]
   10714:	cmp	r3, #0
   10718:	strne	r2, [r3, #4]
   1071c:	streq	r2, [r0, #4]
   10720:	ldr	r2, [r1, #4]
   10724:	cmp	r2, #0
   10728:	strne	r3, [r2, #8]
   1072c:	streq	r3, [r0]
   10730:	mov	r3, #0
   10734:	str	r3, [r1, #4]
   10738:	str	r3, [r1, #8]
   1073c:	ldr	r3, [r0, #8]
   10740:	sub	r3, r3, #1
   10744:	str	r3, [r0, #8]
   10748:	ldr	r3, [pc, #4]	; 10754 <rb_rawbuf_done+0x44>
   1074c:	ldr	r0, [pc, r3]
   10750:	b	48a8 <rb_bh_free@plt>
   10754:	.word	0x000327d8

00010758 <rb_rawbuf_flush_writev>:
   10758:	push	{r4, r5, r6, r7, r8, r9, lr}
   1075c:	sub	sp, sp, #8192	; 0x2000
   10760:	mov	r4, r0
   10764:	sub	sp, sp, #4
   10768:	mov	r2, #8192	; 0x2000
   1076c:	mov	r5, sp
   10770:	mov	r6, r1
   10774:	mov	r0, r5
   10778:	mov	r1, #0
   1077c:	bl	45fc <memset@plt>
   10780:	ldr	r2, [r4]
   10784:	cmp	r2, #0
   10788:	movne	r3, r5
   1078c:	movne	r7, #0
   10790:	bne	107c0 <rb_rawbuf_flush_writev+0x68>
   10794:	bl	4cbc <__errno_location@plt>
   10798:	mvn	r8, #0
   1079c:	mov	r3, #11
   107a0:	str	r3, [r0]
   107a4:	mov	r0, r8
   107a8:	add	sp, sp, #8192	; 0x2000
   107ac:	add	sp, sp, #4
   107b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   107b4:	cmp	r7, #1024	; 0x400
   107b8:	add	r3, r3, #8
   107bc:	beq	107f8 <rb_rawbuf_flush_writev+0xa0>
   107c0:	ldr	ip, [r2]
   107c4:	add	r7, r7, #1
   107c8:	add	r0, ip, #12
   107cc:	ldr	r1, [ip, #1036]	; 0x40c
   107d0:	ldrb	ip, [ip, #1040]	; 0x410
   107d4:	cmp	ip, #0
   107d8:	ldrne	ip, [r4, #16]
   107dc:	addne	r0, r0, ip
   107e0:	subne	r1, r1, ip
   107e4:	str	r0, [r3]
   107e8:	ldr	r2, [r2, #8]
   107ec:	str	r1, [r3, #4]
   107f0:	cmp	r2, #0
   107f4:	bne	107b4 <rb_rawbuf_flush_writev+0x5c>
   107f8:	mov	r2, r7
   107fc:	mov	r1, r5
   10800:	mov	r0, r6
   10804:	bl	4aac <rb_writev@plt>
   10808:	subs	r8, r0, #0
   1080c:	ble	107a4 <rb_rawbuf_flush_writev+0x4c>
   10810:	ldr	r3, [r4]
   10814:	mov	r5, r8
   10818:	mov	r9, #0
   1081c:	cmp	r3, #0
   10820:	ldrne	r6, [r3, #8]
   10824:	moveq	r6, r3
   10828:	cmp	r3, #0
   1082c:	beq	107a4 <rb_rawbuf_flush_writev+0x4c>
   10830:	cmp	r9, r7
   10834:	ldr	r1, [r3]
   10838:	beq	107a4 <rb_rawbuf_flush_writev+0x4c>
   1083c:	ldrb	r2, [r1, #1040]	; 0x410
   10840:	ldr	r3, [r4, #12]
   10844:	ldr	r0, [r1, #1036]	; 0x40c
   10848:	cmp	r2, #0
   1084c:	beq	10868 <rb_rawbuf_flush_writev+0x110>
   10850:	ldr	r2, [r4, #16]
   10854:	sub	r2, r0, r2
   10858:	cmp	r2, r5
   1085c:	suble	r5, r5, r2
   10860:	suble	r3, r3, r2
   10864:	ble	10878 <rb_rawbuf_flush_writev+0x120>
   10868:	cmp	r0, r5
   1086c:	bgt	108a0 <rb_rawbuf_flush_writev+0x148>
   10870:	sub	r5, r5, r0
   10874:	sub	r3, r3, r0
   10878:	mov	r0, r4
   1087c:	str	r3, [r4, #12]
   10880:	add	r9, r9, #1
   10884:	bl	10710 <rb_rawbuf_done>
   10888:	cmp	r6, #0
   1088c:	mov	r3, r6
   10890:	ldrne	r2, [r6, #8]
   10894:	moveq	r2, r6
   10898:	mov	r6, r2
   1089c:	b	10828 <rb_rawbuf_flush_writev+0xd0>
   108a0:	mov	r2, #1
   108a4:	sub	r3, r3, r5
   108a8:	strb	r2, [r1, #1040]	; 0x410
   108ac:	str	r3, [r4, #12]
   108b0:	str	r5, [r4, #16]
   108b4:	b	107a4 <rb_rawbuf_flush_writev+0x4c>

000108b8 <rb_rawbuf_flush>:
   108b8:	ldr	r3, [r0]
   108bc:	push	{r4, r5, r6, lr}
   108c0:	cmp	r3, #0
   108c4:	bne	108e0 <rb_rawbuf_flush+0x28>
   108c8:	bl	4cbc <__errno_location@plt>
   108cc:	mvn	r6, #0
   108d0:	mov	r3, #11
   108d4:	str	r3, [r0]
   108d8:	mov	r0, r6
   108dc:	pop	{r4, r5, r6, pc}
   108e0:	mov	r4, r0
   108e4:	mov	r0, r1
   108e8:	mov	r6, r1
   108ec:	bl	4488 <rb_fd_ssl@plt>
   108f0:	cmp	r0, #0
   108f4:	bne	10908 <rb_rawbuf_flush+0x50>
   108f8:	mov	r1, r6
   108fc:	mov	r0, r4
   10900:	pop	{r4, r5, r6, lr}
   10904:	b	10758 <rb_rawbuf_flush_writev>
   10908:	ldr	r3, [r4]
   1090c:	mov	r0, r6
   10910:	ldr	r5, [r3]
   10914:	ldrb	r3, [r5, #1040]	; 0x410
   10918:	add	r1, r5, #12
   1091c:	cmp	r3, #0
   10920:	moveq	r2, #1
   10924:	strbeq	r2, [r5, #1040]	; 0x410
   10928:	streq	r3, [r4, #16]
   1092c:	ldr	r3, [r4, #16]
   10930:	ldr	r2, [r5, #1036]	; 0x40c
   10934:	add	r1, r1, r3
   10938:	sub	r2, r2, r3
   1093c:	bl	462c <rb_write@plt>
   10940:	subs	r6, r0, #0
   10944:	ble	108d8 <rb_rawbuf_flush+0x20>
   10948:	ldr	r3, [r4, #16]
   1094c:	ldr	r2, [r5, #1036]	; 0x40c
   10950:	add	r3, r6, r3
   10954:	cmp	r3, r2
   10958:	str	r3, [r4, #16]
   1095c:	bne	109b4 <rb_rawbuf_flush+0xfc>
   10960:	mov	r3, #0
   10964:	ldr	r2, [r5, #4]
   10968:	mov	r1, r5
   1096c:	str	r3, [r4, #16]
   10970:	ldr	r3, [r5, #8]
   10974:	cmp	r3, #0
   10978:	strne	r2, [r3, #4]
   1097c:	streq	r2, [r4, #4]
   10980:	ldr	r2, [r5, #4]
   10984:	cmp	r2, #0
   10988:	strne	r3, [r2, #8]
   1098c:	streq	r3, [r4]
   10990:	mov	r3, #0
   10994:	str	r3, [r5, #4]
   10998:	str	r3, [r5, #8]
   1099c:	ldr	r3, [r4, #8]
   109a0:	sub	r3, r3, #1
   109a4:	str	r3, [r4, #8]
   109a8:	ldr	r3, [pc, #20]	; 109c4 <rb_rawbuf_flush+0x10c>
   109ac:	ldr	r0, [pc, r3]
   109b0:	bl	48a8 <rb_bh_free@plt>
   109b4:	ldr	r3, [r4, #12]
   109b8:	sub	r3, r3, r6
   109bc:	str	r3, [r4, #12]
   109c0:	b	108d8 <rb_rawbuf_flush+0x20>
   109c4:	.word	0x00032578

000109c8 <rb_rawbuf_append>:
   109c8:	ldr	r3, [r0, #4]
   109cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   109d0:	mov	r4, r0
   109d4:	mov	r8, r1
   109d8:	mov	r5, r2
   109dc:	cmp	r3, #0
   109e0:	beq	10a48 <rb_rawbuf_append+0x80>
   109e4:	ldr	r7, [r3]
   109e8:	cmp	r7, #0
   109ec:	beq	10a48 <rb_rawbuf_append+0x80>
   109f0:	ldr	r3, [r7, #1036]	; 0x40c
   109f4:	cmp	r3, #1024	; 0x400
   109f8:	bge	10a48 <rb_rawbuf_append+0x80>
   109fc:	ldrb	r2, [r7, #1040]	; 0x410
   10a00:	cmp	r2, #0
   10a04:	bne	10a48 <rb_rawbuf_append+0x80>
   10a08:	rsb	r6, r3, #1024	; 0x400
   10a0c:	add	r0, r7, #12
   10a10:	cmp	r5, r6
   10a14:	add	r0, r0, r3
   10a18:	movlt	r6, r5
   10a1c:	mov	r2, r6
   10a20:	bl	47dc <memcpy@plt>
   10a24:	ldr	r3, [r7, #1036]	; 0x40c
   10a28:	subs	r5, r5, r6
   10a2c:	addne	r8, r8, r6
   10a30:	add	r3, r3, r6
   10a34:	str	r3, [r7, #1036]	; 0x40c
   10a38:	ldr	r3, [r4, #12]
   10a3c:	add	r3, r3, r6
   10a40:	str	r3, [r4, #12]
   10a44:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a48:	mov	sl, #0
   10a4c:	ldr	r9, [pc, #140]	; 10ae0 <rb_rawbuf_append+0x118>
   10a50:	add	r9, pc, r9
   10a54:	b	10ad4 <rb_rawbuf_append+0x10c>
   10a58:	ldr	r0, [r9]
   10a5c:	bl	492c <rb_bh_alloc@plt>
   10a60:	ldr	r3, [r4, #4]
   10a64:	mov	r6, r0
   10a68:	str	r0, [r6]
   10a6c:	cmp	r3, #0
   10a70:	stmib	r0, {r3, sl}
   10a74:	strne	r0, [r3, #8]
   10a78:	bne	10a88 <rb_rawbuf_append+0xc0>
   10a7c:	ldr	r3, [r4]
   10a80:	cmp	r3, #0
   10a84:	streq	r0, [r4]
   10a88:	ldr	r3, [r4, #8]
   10a8c:	cmp	r5, #1024	; 0x400
   10a90:	mov	r1, r8
   10a94:	movlt	r7, r5
   10a98:	movge	r7, #1024	; 0x400
   10a9c:	str	r6, [r4, #4]
   10aa0:	mov	r2, r7
   10aa4:	add	r0, r6, #12
   10aa8:	sub	r5, r5, r7
   10aac:	add	r8, r8, r7
   10ab0:	add	r3, r3, #1
   10ab4:	str	r3, [r4, #8]
   10ab8:	bl	47dc <memcpy@plt>
   10abc:	ldr	r3, [r6, #1036]	; 0x40c
   10ac0:	add	r3, r3, r7
   10ac4:	str	r3, [r6, #1036]	; 0x40c
   10ac8:	ldr	r3, [r4, #12]
   10acc:	add	r7, r3, r7
   10ad0:	str	r7, [r4, #12]
   10ad4:	cmp	r5, #0
   10ad8:	bgt	10a58 <rb_rawbuf_append+0x90>
   10adc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ae0:	.word	0x000324d4

00010ae4 <rb_rawbuf_get>:
   10ae4:	push	{r4, r5, r6, r7, r8, lr}
   10ae8:	ldr	r4, [r0]
   10aec:	cmp	r4, #0
   10af0:	beq	10b5c <rb_rawbuf_get+0x78>
   10af4:	ldr	r5, [r4]
   10af8:	mov	r3, r1
   10afc:	mov	r6, r2
   10b00:	mov	r7, r0
   10b04:	ldrb	ip, [r5, #1040]	; 0x410
   10b08:	add	r1, r5, #12
   10b0c:	ldr	r4, [r5, #1036]	; 0x40c
   10b10:	cmp	ip, #0
   10b14:	ldrne	ip, [r0, #16]
   10b18:	mov	r0, r3
   10b1c:	addne	r1, r1, ip
   10b20:	cmp	r2, r4
   10b24:	movlt	r4, r2
   10b28:	mov	r2, r4
   10b2c:	bl	47dc <memcpy@plt>
   10b30:	ldr	r3, [r5, #1036]	; 0x40c
   10b34:	cmp	r3, r4
   10b38:	bne	10b64 <rb_rawbuf_get+0x80>
   10b3c:	mov	r3, #0
   10b40:	mov	r1, r5
   10b44:	mov	r0, r7
   10b48:	str	r3, [r7, #16]
   10b4c:	bl	10710 <rb_rawbuf_done>
   10b50:	ldr	r2, [r7, #12]
   10b54:	sub	r6, r2, r6
   10b58:	str	r6, [r7, #12]
   10b5c:	mov	r0, r4
   10b60:	pop	{r4, r5, r6, r7, r8, pc}
   10b64:	sub	r3, r3, r4
   10b68:	mov	r2, #1
   10b6c:	str	r3, [r5, #1036]	; 0x40c
   10b70:	strb	r2, [r5, #1040]	; 0x410
   10b74:	ldr	r3, [r7, #12]
   10b78:	sub	r3, r3, r4
   10b7c:	str	r3, [r7, #12]
   10b80:	ldr	r3, [r7, #16]
   10b84:	add	r3, r3, r4
   10b88:	str	r3, [r7, #16]
   10b8c:	b	10b5c <rb_rawbuf_get+0x78>

00010b90 <rb_rawbuf_length>:
   10b90:	ldr	r0, [r0, #12]
   10b94:	bx	lr

00010b98 <rb_new_rawbuffer>:
   10b98:	push	{r4, lr}
   10b9c:	mov	r1, #20
   10ba0:	mov	r0, #1
   10ba4:	bl	45c0 <calloc@plt>
   10ba8:	cmp	r0, #0
   10bac:	popne	{r4, pc}
   10bb0:	bl	495c <rb_outofmemory@plt>

00010bb4 <rb_free_rawbuffer>:
   10bb4:	ldr	r3, [r0]
   10bb8:	push	{r4, r5, r6, lr}
   10bbc:	mov	r5, r0
   10bc0:	cmp	r3, #0
   10bc4:	ldrne	r4, [r3, #8]
   10bc8:	bne	10bd8 <rb_free_rawbuffer+0x24>
   10bcc:	mov	r0, r5
   10bd0:	pop	{r4, r5, r6, lr}
   10bd4:	b	46c8 <free@plt>
   10bd8:	mov	r0, r5
   10bdc:	ldr	r1, [r3]
   10be0:	bl	10710 <rb_rawbuf_done>
   10be4:	cmp	r4, #0
   10be8:	beq	10bcc <rb_free_rawbuffer+0x18>
   10bec:	mov	r3, r4
   10bf0:	ldr	r4, [r4, #8]
   10bf4:	b	10bd8 <rb_free_rawbuffer+0x24>

00010bf8 <rb_init_rawbuffers>:
   10bf8:	push	{r4, lr}
   10bfc:	ldr	r4, [pc, #40]	; 10c2c <rb_init_rawbuffers+0x34>
   10c00:	add	r4, pc, r4
   10c04:	ldr	r3, [r4]
   10c08:	cmp	r3, #0
   10c0c:	popne	{r4, pc}
   10c10:	mov	r1, r0
   10c14:	movw	r0, #1044	; 0x414
   10c18:	ldr	r2, [pc, #16]	; 10c30 <rb_init_rawbuffers+0x38>
   10c1c:	add	r2, pc, r2
   10c20:	bl	4a88 <rb_bh_create@plt>
   10c24:	str	r0, [r4]
   10c28:	pop	{r4, pc}
   10c2c:	.word	0x00032324
   10c30:	.word	0x000038e0

00010c34 <rb_malloc>:
   10c34:	push	{r4, lr}
   10c38:	mov	r1, r0
   10c3c:	mov	r0, #1
   10c40:	bl	45c0 <calloc@plt>
   10c44:	cmp	r0, #0
   10c48:	popne	{r4, pc}
   10c4c:	bl	495c <rb_outofmemory@plt>

00010c50 <rb_free>:
   10c50:	cmp	r0, #0
   10c54:	bxeq	lr
   10c58:	b	46c8 <free@plt>

00010c5c <Deref_Prefix>:
   10c5c:	subs	r2, r0, #0
   10c60:	bxeq	lr
   10c64:	ldr	r3, [r2, #4]
   10c68:	sub	r3, r3, #1
   10c6c:	cmp	r3, #0
   10c70:	str	r3, [r2, #4]
   10c74:	bxgt	lr
   10c78:	b	10c50 <rb_free>

00010c7c <comp_with_mask>:
   10c7c:	push	{r4, r5, r6, lr}
   10c80:	mov	r4, r2
   10c84:	lsr	r2, r2, #3
   10c88:	mov	r6, r0
   10c8c:	mov	r5, r1
   10c90:	bl	4428 <memcmp@plt>
   10c94:	cmp	r0, #0
   10c98:	bne	10cc8 <comp_with_mask+0x4c>
   10c9c:	ands	r2, r4, #7
   10ca0:	beq	10cd0 <comp_with_mask+0x54>
   10ca4:	ldrb	r1, [r5, r4, lsr #3]
   10ca8:	rsb	r2, r2, #8
   10cac:	ldrb	r3, [r6, r4, lsr #3]
   10cb0:	eor	r3, r3, r1
   10cb4:	mov	r1, #255	; 0xff
   10cb8:	ands	r3, r3, r1, lsl r2
   10cbc:	moveq	r0, #1
   10cc0:	movne	r0, #0
   10cc4:	pop	{r4, r5, r6, pc}
   10cc8:	mov	r0, #0
   10ccc:	pop	{r4, r5, r6, pc}
   10cd0:	mov	r0, #1
   10cd4:	pop	{r4, r5, r6, pc}

00010cd8 <New_Prefix2.constprop.1>:
   10cd8:	cmp	r0, #10
   10cdc:	push	{r4, r5, r6, lr}
   10ce0:	mov	r6, r0
   10ce4:	mov	r4, r1
   10ce8:	mov	r5, r2
   10cec:	bne	10d30 <New_Prefix2.constprop.1+0x58>
   10cf0:	mov	r0, #24
   10cf4:	bl	10c34 <rb_malloc>
   10cf8:	add	r3, r0, #8
   10cfc:	mov	r1, r4
   10d00:	add	r2, r4, #16
   10d04:	ldr	ip, [r1], #4
   10d08:	cmp	r1, r2
   10d0c:	str	ip, [r3], #4
   10d10:	bne	10d04 <New_Prefix2.constprop.1+0x2c>
   10d14:	cmp	r5, #0
   10d18:	mov	r3, #1
   10d1c:	strh	r6, [r0]
   10d20:	movlt	r5, #128	; 0x80
   10d24:	strh	r5, [r0, #2]
   10d28:	str	r3, [r0, #4]
   10d2c:	pop	{r4, r5, r6, pc}
   10d30:	cmp	r0, #2
   10d34:	bne	10d4c <New_Prefix2.constprop.1+0x74>
   10d38:	mov	r0, #24
   10d3c:	bl	10c34 <rb_malloc>
   10d40:	ldr	r3, [r4]
   10d44:	str	r3, [r0, #8]
   10d48:	b	10d14 <New_Prefix2.constprop.1+0x3c>
   10d4c:	mov	r0, #0
   10d50:	pop	{r4, r5, r6, pc}

00010d54 <Ref_Prefix>:
   10d54:	cmp	r0, #0
   10d58:	bxeq	lr
   10d5c:	ldr	r3, [r0, #4]
   10d60:	cmp	r3, #0
   10d64:	bne	10d7c <Ref_Prefix+0x28>
   10d68:	mov	r1, r0
   10d6c:	ldrh	r2, [r0, #2]
   10d70:	ldrh	r3, [r1], #8
   10d74:	mov	r0, r3
   10d78:	b	10cd8 <New_Prefix2.constprop.1>
   10d7c:	add	r3, r3, #1
   10d80:	str	r3, [r0, #4]
   10d84:	bx	lr

00010d88 <ascii2prefix>:
   10d88:	push	{r4, r5, r6, r7, r8, lr}
   10d8c:	subs	r7, r1, #0
   10d90:	sub	sp, sp, #1040	; 0x410
   10d94:	bne	10da4 <ascii2prefix+0x1c>
   10d98:	mov	r0, #0
   10d9c:	add	sp, sp, #1040	; 0x410
   10da0:	pop	{r4, r5, r6, r7, r8, pc}
   10da4:	cmp	r0, #2
   10da8:	mov	r4, r0
   10dac:	moveq	r6, #32
   10db0:	beq	10dc0 <ascii2prefix+0x38>
   10db4:	cmp	r0, #10
   10db8:	movne	r6, #0
   10dbc:	moveq	r6, #128	; 0x80
   10dc0:	mov	r1, #47	; 0x2f
   10dc4:	mov	r0, r7
   10dc8:	bl	4584 <strchr@plt>
   10dcc:	subs	r5, r0, #0
   10dd0:	beq	10e14 <ascii2prefix+0x8c>
   10dd4:	add	r0, r5, #1
   10dd8:	sub	r5, r5, r7
   10ddc:	bl	489c <atol@plt>
   10de0:	mov	r1, r7
   10de4:	add	r7, sp, #16
   10de8:	mov	r8, r0
   10dec:	mov	r2, r5
   10df0:	mov	r0, r7
   10df4:	bl	47dc <memcpy@plt>
   10df8:	add	r3, sp, #1040	; 0x410
   10dfc:	add	r5, r3, r5
   10e00:	mov	r3, #0
   10e04:	cmp	r6, r8
   10e08:	cmpge	r8, r3
   10e0c:	movgt	r6, r8
   10e10:	strb	r3, [r5, #-1024]	; 0xfffffc00
   10e14:	cmp	r4, #2
   10e18:	bne	10e4c <ascii2prefix+0xc4>
   10e1c:	mov	r5, sp
   10e20:	mov	r1, r7
   10e24:	mov	r2, r5
   10e28:	mov	r0, r4
   10e2c:	bl	4608 <rb_inet_pton@plt>
   10e30:	cmp	r0, #0
   10e34:	ble	10d98 <ascii2prefix+0x10>
   10e38:	mov	r2, r6
   10e3c:	mov	r1, r5
   10e40:	mov	r0, r4
   10e44:	bl	10cd8 <New_Prefix2.constprop.1>
   10e48:	b	10d9c <ascii2prefix+0x14>
   10e4c:	cmp	r4, #10
   10e50:	beq	10e1c <ascii2prefix+0x94>
   10e54:	b	10d98 <ascii2prefix+0x10>

00010e58 <rb_init_patricia>:
   10e58:	bx	lr

00010e5c <rb_new_patricia>:
   10e5c:	push	{r4, lr}
   10e60:	mov	r4, r0
   10e64:	mov	r0, #12
   10e68:	bl	10c34 <rb_malloc>
   10e6c:	mov	r2, #0
   10e70:	stm	r0, {r2, r4}
   10e74:	str	r2, [r0, #8]
   10e78:	ldr	r2, [pc, #16]	; 10e90 <rb_new_patricia+0x34>
   10e7c:	add	r2, pc, r2
   10e80:	ldr	r3, [r2]
   10e84:	add	r3, r3, #1
   10e88:	str	r3, [r2]
   10e8c:	pop	{r4, pc}
   10e90:	.word	0x000320ac

00010e94 <rb_clear_patricia>:
   10e94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10e98:	mov	r8, r0
   10e9c:	sub	sp, sp, #520	; 0x208
   10ea0:	ldr	r5, [r0]
   10ea4:	cmp	r5, #0
   10ea8:	beq	10f2c <rb_clear_patricia+0x98>
   10eac:	add	r4, sp, #4
   10eb0:	mov	r9, r1
   10eb4:	mov	sl, r4
   10eb8:	ldmib	r5, {r0, r6, r7}
   10ebc:	cmp	r0, #0
   10ec0:	beq	10edc <rb_clear_patricia+0x48>
   10ec4:	bl	10c5c <Deref_Prefix>
   10ec8:	ldr	r0, [r5, #20]
   10ecc:	cmp	r9, #0
   10ed0:	cmpne	r0, #0
   10ed4:	beq	10edc <rb_clear_patricia+0x48>
   10ed8:	blx	r9
   10edc:	mov	r0, r5
   10ee0:	bl	10c50 <rb_free>
   10ee4:	ldr	r3, [r8, #8]
   10ee8:	cmp	r6, #0
   10eec:	sub	r3, r3, #1
   10ef0:	str	r3, [r8, #8]
   10ef4:	beq	10f08 <rb_clear_patricia+0x74>
   10ef8:	cmp	r7, #0
   10efc:	strne	r7, [r4], #4
   10f00:	mov	r5, r6
   10f04:	b	10eb8 <rb_clear_patricia+0x24>
   10f08:	cmp	r7, #0
   10f0c:	movne	r6, r7
   10f10:	bne	10f00 <rb_clear_patricia+0x6c>
   10f14:	cmp	r4, sl
   10f18:	beq	10f2c <rb_clear_patricia+0x98>
   10f1c:	ldr	r6, [r4, #-4]
   10f20:	cmp	r6, #0
   10f24:	subne	r4, r4, #4
   10f28:	bne	10f00 <rb_clear_patricia+0x6c>
   10f2c:	mov	r0, r8
   10f30:	add	sp, sp, #520	; 0x208
   10f34:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   10f38:	b	10c50 <rb_free>

00010f3c <rb_destroy_patricia>:
   10f3c:	push	{r4, lr}
   10f40:	bl	44d0 <rb_clear_patricia@plt>
   10f44:	ldr	r2, [pc, #16]	; 10f5c <rb_destroy_patricia+0x20>
   10f48:	add	r2, pc, r2
   10f4c:	ldr	r3, [r2]
   10f50:	sub	r3, r3, #1
   10f54:	str	r3, [r2]
   10f58:	pop	{r4, pc}
   10f5c:	.word	0x00031fe0

00010f60 <rb_patricia_process>:
   10f60:	push	{r4, r5, r6, r7, lr}
   10f64:	sub	sp, sp, #524	; 0x20c
   10f68:	mov	r6, r1
   10f6c:	add	r4, sp, #4
   10f70:	mov	r7, r4
   10f74:	ldr	r5, [r0]
   10f78:	cmp	r5, #0
   10f7c:	bne	10f88 <rb_patricia_process+0x28>
   10f80:	add	sp, sp, #524	; 0x20c
   10f84:	pop	{r4, r5, r6, r7, pc}
   10f88:	ldr	r0, [r5, #4]
   10f8c:	cmp	r0, #0
   10f90:	beq	10f9c <rb_patricia_process+0x3c>
   10f94:	ldr	r1, [r5, #20]
   10f98:	blx	r6
   10f9c:	ldr	r3, [r5, #8]
   10fa0:	ldr	r2, [r5, #12]
   10fa4:	cmp	r3, #0
   10fa8:	beq	10fbc <rb_patricia_process+0x5c>
   10fac:	cmp	r2, #0
   10fb0:	strne	r2, [r4], #4
   10fb4:	mov	r5, r3
   10fb8:	b	10f78 <rb_patricia_process+0x18>
   10fbc:	cmp	r2, #0
   10fc0:	movne	r3, r2
   10fc4:	bne	10fb4 <rb_patricia_process+0x54>
   10fc8:	cmp	r4, r7
   10fcc:	beq	10f80 <rb_patricia_process+0x20>
   10fd0:	sub	r4, r4, #4
   10fd4:	ldr	r3, [r4]
   10fd8:	b	10fb4 <rb_patricia_process+0x54>

00010fdc <rb_patricia_search_exact>:
   10fdc:	ldr	r0, [r0]
   10fe0:	cmp	r0, #0
   10fe4:	bxeq	lr
   10fe8:	mov	r3, r1
   10fec:	push	{r4, lr}
   10ff0:	add	r1, r1, #8
   10ff4:	mov	r4, r0
   10ff8:	mov	ip, #128	; 0x80
   10ffc:	ldrh	r2, [r3, #2]
   11000:	ldr	r3, [r0]
   11004:	cmp	r3, r2
   11008:	bcc	11034 <rb_patricia_search_exact+0x58>
   1100c:	bhi	1105c <rb_patricia_search_exact+0x80>
   11010:	ldr	r0, [r0, #4]
   11014:	cmp	r0, #0
   11018:	popeq	{r4, pc}
   1101c:	add	r0, r0, #8
   11020:	bl	10c7c <comp_with_mask>
   11024:	cmp	r0, #0
   11028:	movne	r0, r4
   1102c:	moveq	r0, #0
   11030:	pop	{r4, pc}
   11034:	ldrb	r4, [r1, r3, lsr #3]
   11038:	and	r3, r3, #7
   1103c:	ldr	lr, [r0, #8]
   11040:	ldr	r0, [r0, #12]
   11044:	ands	r3, r4, ip, asr r3
   11048:	moveq	r0, lr
   1104c:	cmp	r0, #0
   11050:	popeq	{r4, pc}
   11054:	mov	r4, r0
   11058:	b	11000 <rb_patricia_search_exact+0x24>
   1105c:	mov	r0, #0
   11060:	pop	{r4, pc}

00011064 <rb_patricia_search_best2>:
   11064:	ldr	r3, [r0]
   11068:	push	{r4, r5, r6, r7, lr}
   1106c:	sub	sp, sp, #524	; 0x20c
   11070:	cmp	r3, #0
   11074:	bne	11088 <rb_patricia_search_best2+0x24>
   11078:	mov	r5, #0
   1107c:	mov	r0, r5
   11080:	add	sp, sp, #524	; 0x20c
   11084:	pop	{r4, r5, r6, r7, pc}
   11088:	ldrh	r0, [r1, #2]
   1108c:	add	r6, r1, #8
   11090:	mov	r4, #0
   11094:	mov	ip, #128	; 0x80
   11098:	ldr	r1, [r3]
   1109c:	cmp	r1, r0
   110a0:	bcc	110d0 <rb_patricia_search_best2+0x6c>
   110a4:	cmp	r2, #0
   110a8:	beq	11108 <rb_patricia_search_best2+0xa4>
   110ac:	ldr	r2, [r3, #4]
   110b0:	cmp	r2, #0
   110b4:	beq	11108 <rb_patricia_search_best2+0xa4>
   110b8:	add	r2, sp, #520	; 0x208
   110bc:	add	r2, r2, r4, lsl #2
   110c0:	add	r4, r4, #1
   110c4:	str	r3, [r2, #-516]	; 0xfffffdfc
   110c8:	add	r7, sp, #4
   110cc:	b	1113c <rb_patricia_search_best2+0xd8>
   110d0:	ldr	lr, [r3, #4]
   110d4:	ldrb	r5, [r6, r1, lsr #3]
   110d8:	and	r1, r1, #7
   110dc:	cmp	lr, #0
   110e0:	addne	lr, sp, #520	; 0x208
   110e4:	addne	lr, lr, r4, lsl #2
   110e8:	addne	r4, r4, #1
   110ec:	strne	r3, [lr, #-516]	; 0xfffffdfc
   110f0:	ands	r1, r5, ip, asr r1
   110f4:	ldr	lr, [r3, #8]
   110f8:	ldr	r3, [r3, #12]
   110fc:	moveq	r3, lr
   11100:	cmp	r3, #0
   11104:	bne	11098 <rb_patricia_search_best2+0x34>
   11108:	cmp	r4, #0
   1110c:	bne	110c8 <rb_patricia_search_best2+0x64>
   11110:	b	11078 <rb_patricia_search_best2+0x14>
   11114:	ldr	r5, [r7, r4, lsl #2]
   11118:	mov	r1, r6
   1111c:	ldr	r3, [r5, #4]
   11120:	cmp	r3, #0
   11124:	ldrh	r2, [r3, #2]
   11128:	addne	r0, r3, #8
   1112c:	moveq	r0, r3
   11130:	bl	10c7c <comp_with_mask>
   11134:	cmp	r0, #0
   11138:	bne	1107c <rb_patricia_search_best2+0x18>
   1113c:	subs	r4, r4, #1
   11140:	bcs	11114 <rb_patricia_search_best2+0xb0>
   11144:	b	11078 <rb_patricia_search_best2+0x14>

00011148 <rb_patricia_search_best>:
   11148:	mov	r2, #1
   1114c:	b	4680 <rb_patricia_search_best2@plt>

00011150 <rb_patricia_lookup>:
   11150:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11154:	mov	r7, r0
   11158:	mov	r9, r1
   1115c:	ldr	r4, [r0]
   11160:	cmp	r4, #0
   11164:	addne	sl, r1, #8
   11168:	ldrhne	r8, [r1, #2]
   1116c:	movne	r2, #128	; 0x80
   11170:	bne	111c8 <rb_patricia_lookup+0x78>
   11174:	mov	r0, #24
   11178:	bl	10c34 <rb_malloc>
   1117c:	ldrh	r3, [r9, #2]
   11180:	mov	r5, r0
   11184:	mov	r0, r9
   11188:	str	r3, [r5]
   1118c:	bl	10d54 <Ref_Prefix>
   11190:	ldr	r3, [r7, #8]
   11194:	str	r5, [r7]
   11198:	stmib	r5, {r0, r4}
   1119c:	str	r4, [r5, #12]
   111a0:	str	r4, [r5, #16]
   111a4:	add	r3, r3, #1
   111a8:	str	r4, [r5, #20]
   111ac:	str	r3, [r7, #8]
   111b0:	mov	r0, r5
   111b4:	add	sp, sp, #4
   111b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111bc:	ldr	r3, [r4, #8]
   111c0:	b	11200 <rb_patricia_lookup+0xb0>
   111c4:	mov	r4, r3
   111c8:	ldr	r6, [r4]
   111cc:	cmp	r6, r8
   111d0:	bcc	111e0 <rb_patricia_lookup+0x90>
   111d4:	ldr	r3, [r4, #4]
   111d8:	cmp	r3, #0
   111dc:	bne	11208 <rb_patricia_lookup+0xb8>
   111e0:	ldr	r3, [r7, #4]
   111e4:	cmp	r3, r6
   111e8:	bls	111bc <rb_patricia_lookup+0x6c>
   111ec:	ldrb	r3, [sl, r6, lsr #3]
   111f0:	and	r1, r6, #7
   111f4:	ands	r3, r3, r2, asr r1
   111f8:	beq	111bc <rb_patricia_lookup+0x6c>
   111fc:	ldr	r3, [r4, #12]
   11200:	cmp	r3, #0
   11204:	bne	111c4 <rb_patricia_lookup+0x74>
   11208:	ldr	r2, [r4, #4]
   1120c:	cmp	r6, r8
   11210:	add	r0, r9, #7
   11214:	movcc	r3, r6
   11218:	movcs	r3, r8
   1121c:	mov	r6, #0
   11220:	add	fp, r2, #8
   11224:	add	r2, r2, #7
   11228:	cmp	r6, r3
   1122c:	bcs	11268 <rb_patricia_lookup+0x118>
   11230:	ldrb	r1, [r0, #1]!
   11234:	ldrb	ip, [r2, #1]!
   11238:	cmp	r1, ip
   1123c:	addeq	r6, r6, #8
   11240:	beq	11228 <rb_patricia_lookup+0xd8>
   11244:	mov	r2, #0
   11248:	mov	r0, #128	; 0x80
   1124c:	eor	r1, r1, ip
   11250:	ands	ip, r1, r0, asr r2
   11254:	bne	11264 <rb_patricia_lookup+0x114>
   11258:	add	r2, r2, #1
   1125c:	cmp	r2, #8
   11260:	bne	11250 <rb_patricia_lookup+0x100>
   11264:	add	r6, r6, r2
   11268:	cmp	r6, r3
   1126c:	movcs	r6, r3
   11270:	ldr	r3, [r4, #16]
   11274:	cmp	r3, #0
   11278:	bne	112fc <rb_patricia_lookup+0x1ac>
   1127c:	cmp	r8, r6
   11280:	beq	11314 <rb_patricia_lookup+0x1c4>
   11284:	mov	r0, #24
   11288:	bl	10c34 <rb_malloc>
   1128c:	ldrh	r3, [r9, #2]
   11290:	mov	r5, r0
   11294:	mov	r0, r9
   11298:	mov	r9, #0
   1129c:	str	r3, [r5]
   112a0:	bl	10d54 <Ref_Prefix>
   112a4:	ldr	r3, [r7, #8]
   112a8:	stmib	r5, {r0, r9}
   112ac:	str	r9, [r5, #12]
   112b0:	str	r9, [r5, #16]
   112b4:	str	r9, [r5, #20]
   112b8:	add	r3, r3, #1
   112bc:	str	r3, [r7, #8]
   112c0:	ldr	r3, [r4]
   112c4:	cmp	r3, r6
   112c8:	bne	11340 <rb_patricia_lookup+0x1f0>
   112cc:	ldr	r3, [r7, #4]
   112d0:	str	r4, [r5, #16]
   112d4:	cmp	r6, r3
   112d8:	bcs	112f4 <rb_patricia_lookup+0x1a4>
   112dc:	ldrb	r3, [sl, r6, lsr #3]
   112e0:	mov	r2, #128	; 0x80
   112e4:	and	r6, r6, #7
   112e8:	ands	r3, r3, r2, asr r6
   112ec:	strne	r5, [r4, #12]
   112f0:	bne	111b0 <rb_patricia_lookup+0x60>
   112f4:	str	r5, [r4, #8]
   112f8:	b	111b0 <rb_patricia_lookup+0x60>
   112fc:	ldr	r2, [r3]
   11300:	cmp	r2, r6
   11304:	bcc	1127c <rb_patricia_lookup+0x12c>
   11308:	mov	r4, r3
   1130c:	ldr	r3, [r3, #16]
   11310:	b	11274 <rb_patricia_lookup+0x124>
   11314:	ldr	r3, [r4]
   11318:	cmp	r3, r8
   1131c:	bne	11284 <rb_patricia_lookup+0x134>
   11320:	ldr	r3, [r4, #4]
   11324:	cmp	r3, #0
   11328:	bne	11338 <rb_patricia_lookup+0x1e8>
   1132c:	mov	r0, r9
   11330:	bl	10d54 <Ref_Prefix>
   11334:	str	r0, [r4, #4]
   11338:	mov	r5, r4
   1133c:	b	111b0 <rb_patricia_lookup+0x60>
   11340:	cmp	r8, r6
   11344:	bne	113a0 <rb_patricia_lookup+0x250>
   11348:	ldr	r3, [r7, #4]
   1134c:	cmp	r3, r8
   11350:	bls	1136c <rb_patricia_lookup+0x21c>
   11354:	ldrb	r2, [fp, r8, lsr #3]
   11358:	and	r3, r8, #7
   1135c:	mov	r1, #128	; 0x80
   11360:	ands	r3, r2, r1, asr r3
   11364:	strne	r4, [r5, #12]
   11368:	bne	11370 <rb_patricia_lookup+0x220>
   1136c:	str	r4, [r5, #8]
   11370:	ldr	r3, [r4, #16]
   11374:	str	r3, [r5, #16]
   11378:	ldr	r3, [r4, #16]
   1137c:	cmp	r3, #0
   11380:	streq	r5, [r7]
   11384:	beq	11398 <rb_patricia_lookup+0x248>
   11388:	ldr	r2, [r3, #12]
   1138c:	cmp	r2, r4
   11390:	streq	r5, [r3, #12]
   11394:	strne	r5, [r3, #8]
   11398:	str	r5, [r4, #16]
   1139c:	b	111b0 <rb_patricia_lookup+0x60>
   113a0:	mov	r0, #24
   113a4:	bl	10c34 <rb_malloc>
   113a8:	ldr	r3, [r4, #16]
   113ac:	stm	r0, {r6, r9}
   113b0:	str	r3, [r0, #16]
   113b4:	ldr	r3, [r7, #8]
   113b8:	str	r9, [r0, #20]
   113bc:	add	r3, r3, #1
   113c0:	str	r3, [r7, #8]
   113c4:	ldr	r3, [r7, #4]
   113c8:	cmp	r3, r6
   113cc:	bls	113e8 <rb_patricia_lookup+0x298>
   113d0:	ldrb	r3, [sl, r6, lsr #3]
   113d4:	mov	r2, #128	; 0x80
   113d8:	and	r6, r6, #7
   113dc:	ands	r3, r3, r2, asr r6
   113e0:	strdne	r4, [r0, #8]
   113e4:	bne	113f0 <rb_patricia_lookup+0x2a0>
   113e8:	str	r5, [r0, #8]
   113ec:	str	r4, [r0, #12]
   113f0:	str	r0, [r5, #16]
   113f4:	ldr	r3, [r4, #16]
   113f8:	cmp	r3, #0
   113fc:	streq	r0, [r7]
   11400:	beq	11414 <rb_patricia_lookup+0x2c4>
   11404:	ldr	r2, [r3, #12]
   11408:	cmp	r2, r4
   1140c:	streq	r0, [r3, #12]
   11410:	strne	r0, [r3, #8]
   11414:	str	r0, [r4, #16]
   11418:	b	111b0 <rb_patricia_lookup+0x60>

0001141c <rb_patricia_remove>:
   1141c:	push	{r4, r5, r6, r7, r8, lr}
   11420:	mov	r6, r0
   11424:	mov	r4, r1
   11428:	ldmib	r1, {r0, r7}
   1142c:	ldr	r5, [r1, #12]
   11430:	cmp	r5, #0
   11434:	beq	1145c <rb_patricia_remove+0x40>
   11438:	cmp	r7, #0
   1143c:	beq	114f0 <rb_patricia_remove+0xd4>
   11440:	cmp	r0, #0
   11444:	beq	1144c <rb_patricia_remove+0x30>
   11448:	bl	10c5c <Deref_Prefix>
   1144c:	mov	r3, #0
   11450:	str	r3, [r4, #4]
   11454:	str	r3, [r4, #20]
   11458:	pop	{r4, r5, r6, r7, r8, pc}
   1145c:	cmp	r7, #0
   11460:	movne	r5, r7
   11464:	bne	114f0 <rb_patricia_remove+0xd4>
   11468:	ldr	r5, [r1, #16]
   1146c:	bl	10c5c <Deref_Prefix>
   11470:	mov	r0, r4
   11474:	bl	10c50 <rb_free>
   11478:	ldr	r3, [r6, #8]
   1147c:	cmp	r5, #0
   11480:	sub	r3, r3, #1
   11484:	str	r3, [r6, #8]
   11488:	bne	11494 <rb_patricia_remove+0x78>
   1148c:	str	r5, [r6]
   11490:	pop	{r4, r5, r6, r7, r8, pc}
   11494:	ldr	r2, [r5, #4]
   11498:	ldr	r3, [r5, #12]
   1149c:	cmp	r3, r4
   114a0:	ldreq	r3, [r5, #8]
   114a4:	streq	r7, [r5, #12]
   114a8:	strne	r7, [r5, #8]
   114ac:	cmp	r2, #0
   114b0:	popne	{r4, r5, r6, r7, r8, pc}
   114b4:	ldr	r2, [r5, #16]
   114b8:	cmp	r2, #0
   114bc:	streq	r3, [r6]
   114c0:	beq	114d4 <rb_patricia_remove+0xb8>
   114c4:	ldr	r1, [r2, #12]
   114c8:	cmp	r1, r5
   114cc:	streq	r3, [r2, #12]
   114d0:	strne	r3, [r2, #8]
   114d4:	mov	r0, r5
   114d8:	str	r2, [r3, #16]
   114dc:	bl	10c50 <rb_free>
   114e0:	ldr	r3, [r6, #8]
   114e4:	sub	r3, r3, #1
   114e8:	str	r3, [r6, #8]
   114ec:	pop	{r4, r5, r6, r7, r8, pc}
   114f0:	ldr	r7, [r4, #16]
   114f4:	str	r7, [r5, #16]
   114f8:	bl	10c5c <Deref_Prefix>
   114fc:	mov	r0, r4
   11500:	bl	10c50 <rb_free>
   11504:	ldr	r3, [r6, #8]
   11508:	cmp	r7, #0
   1150c:	sub	r3, r3, #1
   11510:	str	r3, [r6, #8]
   11514:	beq	1148c <rb_patricia_remove+0x70>
   11518:	ldr	r3, [r7, #12]
   1151c:	cmp	r3, r4
   11520:	streq	r5, [r7, #12]
   11524:	strne	r5, [r7, #8]
   11528:	pop	{r4, r5, r6, r7, r8, pc}

0001152c <make_and_lookup_ip>:
   1152c:	push	{r4, r5, r6, lr}
   11530:	mov	r5, r0
   11534:	ldrh	r0, [r1]
   11538:	cmp	r0, #10
   1153c:	addeq	r1, r1, #8
   11540:	addne	r1, r1, #4
   11544:	bl	10cd8 <New_Prefix2.constprop.1>
   11548:	subs	r4, r0, #0
   1154c:	beq	1156c <make_and_lookup_ip+0x40>
   11550:	mov	r1, r4
   11554:	mov	r0, r5
   11558:	bl	48cc <rb_patricia_lookup@plt>
   1155c:	mov	r5, r0
   11560:	mov	r0, r4
   11564:	mov	r4, r5
   11568:	bl	10c5c <Deref_Prefix>
   1156c:	mov	r0, r4
   11570:	pop	{r4, r5, r6, pc}

00011574 <make_and_lookup>:
   11574:	push	{r4, r5, r6, lr}
   11578:	mov	r5, r0
   1157c:	mov	r0, #2
   11580:	mov	r6, r1
   11584:	bl	10d88 <ascii2prefix>
   11588:	subs	r4, r0, #0
   1158c:	beq	115b0 <make_and_lookup+0x3c>
   11590:	mov	r1, r4
   11594:	mov	r0, r5
   11598:	bl	48cc <rb_patricia_lookup@plt>
   1159c:	mov	r5, r0
   115a0:	mov	r0, r4
   115a4:	bl	10c5c <Deref_Prefix>
   115a8:	mov	r4, r5
   115ac:	b	115c4 <make_and_lookup+0x50>
   115b0:	mov	r1, r6
   115b4:	mov	r0, #10
   115b8:	bl	10d88 <ascii2prefix>
   115bc:	subs	r4, r0, #0
   115c0:	bne	11590 <make_and_lookup+0x1c>
   115c4:	mov	r0, r4
   115c8:	pop	{r4, r5, r6, pc}

000115cc <rb_match_ip>:
   115cc:	push	{r4, r5, r6, lr}
   115d0:	mov	r5, r0
   115d4:	ldrh	r0, [r1]
   115d8:	cmp	r0, #10
   115dc:	addeq	r1, r1, #8
   115e0:	moveq	r2, #128	; 0x80
   115e4:	addne	r1, r1, #4
   115e8:	movne	r0, #2
   115ec:	movne	r2, #32
   115f0:	bl	10cd8 <New_Prefix2.constprop.1>
   115f4:	subs	r4, r0, #0
   115f8:	beq	11618 <rb_match_ip+0x4c>
   115fc:	mov	r1, r4
   11600:	mov	r0, r5
   11604:	bl	4524 <rb_patricia_search_best@plt>
   11608:	mov	r5, r0
   1160c:	mov	r0, r4
   11610:	mov	r4, r5
   11614:	bl	10c5c <Deref_Prefix>
   11618:	mov	r0, r4
   1161c:	pop	{r4, r5, r6, pc}

00011620 <rb_match_ip_exact>:
   11620:	push	{r4, r5, r6, lr}
   11624:	mov	r5, r0
   11628:	ldrh	r0, [r1]
   1162c:	cmp	r0, #10
   11630:	bne	11670 <rb_match_ip_exact+0x50>
   11634:	cmp	r2, #128	; 0x80
   11638:	add	r1, r1, #8
   1163c:	movcs	r2, #128	; 0x80
   11640:	bl	10cd8 <New_Prefix2.constprop.1>
   11644:	subs	r4, r0, #0
   11648:	beq	11668 <rb_match_ip_exact+0x48>
   1164c:	mov	r1, r4
   11650:	mov	r0, r5
   11654:	bl	4884 <rb_patricia_search_exact@plt>
   11658:	mov	r5, r0
   1165c:	mov	r0, r4
   11660:	mov	r4, r5
   11664:	bl	10c5c <Deref_Prefix>
   11668:	mov	r0, r4
   1166c:	pop	{r4, r5, r6, pc}
   11670:	cmp	r2, #32
   11674:	add	r1, r1, #4
   11678:	movcs	r2, #32
   1167c:	mov	r0, #2
   11680:	b	11640 <rb_match_ip_exact+0x20>

00011684 <rb_match_string>:
   11684:	push	{r4, r5, r6, lr}
   11688:	mov	r5, r0
   1168c:	mov	r0, #2
   11690:	mov	r4, r1
   11694:	bl	10d88 <ascii2prefix>
   11698:	subs	r6, r0, #0
   1169c:	beq	116c0 <rb_match_string+0x3c>
   116a0:	mov	r1, r6
   116a4:	mov	r0, r5
   116a8:	bl	4524 <rb_patricia_search_best@plt>
   116ac:	mov	r4, r0
   116b0:	mov	r0, r6
   116b4:	bl	10c5c <Deref_Prefix>
   116b8:	mov	r0, r4
   116bc:	pop	{r4, r5, r6, pc}
   116c0:	mov	r1, r4
   116c4:	mov	r0, #10
   116c8:	bl	10d88 <ascii2prefix>
   116cc:	subs	r4, r0, #0
   116d0:	beq	116b8 <rb_match_string+0x34>
   116d4:	mov	r1, r4
   116d8:	mov	r0, r5
   116dc:	bl	4524 <rb_patricia_search_best@plt>
   116e0:	mov	r5, r0
   116e4:	mov	r0, r4
   116e8:	bl	10c5c <Deref_Prefix>
   116ec:	mov	r4, r5
   116f0:	b	116b8 <rb_match_string+0x34>

000116f4 <rb_match_exact_string>:
   116f4:	push	{r4, r5, r6, lr}
   116f8:	mov	r5, r0
   116fc:	mov	r0, #2
   11700:	mov	r4, r1
   11704:	bl	10d88 <ascii2prefix>
   11708:	subs	r6, r0, #0
   1170c:	beq	11730 <rb_match_exact_string+0x3c>
   11710:	mov	r1, r6
   11714:	mov	r0, r5
   11718:	bl	4884 <rb_patricia_search_exact@plt>
   1171c:	mov	r4, r0
   11720:	mov	r0, r6
   11724:	bl	10c5c <Deref_Prefix>
   11728:	mov	r0, r4
   1172c:	pop	{r4, r5, r6, pc}
   11730:	mov	r1, r4
   11734:	mov	r0, #10
   11738:	bl	10d88 <ascii2prefix>
   1173c:	subs	r4, r0, #0
   11740:	beq	11728 <rb_match_exact_string+0x34>
   11744:	mov	r1, r4
   11748:	mov	r0, r5
   1174c:	bl	4884 <rb_patricia_search_exact@plt>
   11750:	mov	r5, r0
   11754:	mov	r0, r4
   11758:	bl	10c5c <Deref_Prefix>
   1175c:	mov	r4, r5
   11760:	b	11728 <rb_match_exact_string+0x34>

00011764 <rb_dictionary_retune>:
   11764:	push	{r4, r5, r6, r7, r8, lr}
   11768:	sub	sp, sp, #32
   1176c:	ldr	r4, [r0, #4]
   11770:	cmp	r4, #0
   11774:	beq	1181c <rb_dictionary_retune+0xb8>
   11778:	add	r6, sp, #4
   1177c:	mov	r3, #0
   11780:	mov	r7, r1
   11784:	mov	r5, r0
   11788:	mov	r8, r6
   1178c:	str	r3, [sp, #4]
   11790:	str	r3, [sp, #8]
   11794:	mov	r0, r7
   11798:	ldr	r3, [r5]
   1179c:	ldr	r1, [r4, #20]
   117a0:	blx	r3
   117a4:	cmp	r0, #0
   117a8:	beq	117f8 <rb_dictionary_retune+0x94>
   117ac:	bge	1183c <rb_dictionary_retune+0xd8>
   117b0:	ldr	r3, [r4]
   117b4:	cmp	r3, #0
   117b8:	beq	117f8 <rb_dictionary_retune+0x94>
   117bc:	mov	r0, r7
   117c0:	ldr	r2, [r5]
   117c4:	ldr	r1, [r3, #20]
   117c8:	blx	r2
   117cc:	cmp	r0, #0
   117d0:	movge	r2, r4
   117d4:	bge	11824 <rb_dictionary_retune+0xc0>
   117d8:	ldr	r2, [r4]
   117dc:	ldr	r3, [r2, #4]
   117e0:	str	r3, [r4]
   117e4:	ldr	r3, [r2]
   117e8:	str	r4, [r2, #4]
   117ec:	cmp	r3, #0
   117f0:	bne	11824 <rb_dictionary_retune+0xc0>
   117f4:	mov	r4, r2
   117f8:	ldr	r3, [r4]
   117fc:	str	r3, [r8, #4]
   11800:	ldr	r3, [r4, #4]
   11804:	str	r3, [r6]
   11808:	ldr	r3, [sp, #8]
   1180c:	str	r3, [r4]
   11810:	ldr	r3, [sp, #4]
   11814:	str	r3, [r4, #4]
   11818:	str	r4, [r5, #4]
   1181c:	add	sp, sp, #32
   11820:	pop	{r4, r5, r6, r7, r8, pc}
   11824:	str	r2, [r6]
   11828:	mov	r3, r8
   1182c:	ldr	r4, [r2]
   11830:	mov	r6, r2
   11834:	mov	r8, r3
   11838:	b	11794 <rb_dictionary_retune+0x30>
   1183c:	ldr	r3, [r4, #4]
   11840:	cmp	r3, #0
   11844:	beq	117f8 <rb_dictionary_retune+0x94>
   11848:	mov	r0, r7
   1184c:	ldr	r2, [r5]
   11850:	ldr	r1, [r3, #20]
   11854:	blx	r2
   11858:	cmp	r0, #0
   1185c:	ble	11884 <rb_dictionary_retune+0x120>
   11860:	ldr	r3, [r4, #4]
   11864:	ldr	r2, [r3]
   11868:	str	r2, [r4, #4]
   1186c:	ldr	r2, [r3, #4]
   11870:	str	r4, [r3]
   11874:	cmp	r2, #0
   11878:	bne	11888 <rb_dictionary_retune+0x124>
   1187c:	mov	r4, r3
   11880:	b	117f8 <rb_dictionary_retune+0x94>
   11884:	mov	r3, r4
   11888:	mov	r2, r6
   1188c:	str	r3, [r8, #4]
   11890:	ldr	r4, [r3, #4]
   11894:	b	11830 <rb_dictionary_retune+0xcc>

00011898 <stats_recurse>:
   11898:	push	{r4, r5, r6, r7, r8, lr}
   1189c:	mov	r5, r0
   118a0:	mov	r4, r1
   118a4:	mov	r7, r2
   118a8:	mov	r6, #0
   118ac:	ldr	r3, [r7]
   118b0:	cmp	r3, r4
   118b4:	strlt	r4, [r7]
   118b8:	cmp	r5, #0
   118bc:	beq	118fc <stats_recurse+0x64>
   118c0:	ldr	r0, [r5]
   118c4:	cmp	r0, #0
   118c8:	moveq	r0, r4
   118cc:	beq	118e0 <stats_recurse+0x48>
   118d0:	mov	r2, r7
   118d4:	add	r1, r4, #1
   118d8:	bl	11898 <stats_recurse>
   118dc:	add	r0, r4, r0
   118e0:	ldr	r5, [r5, #4]
   118e4:	add	r3, r6, r0
   118e8:	cmp	r5, #0
   118ec:	beq	11900 <stats_recurse+0x68>
   118f0:	add	r4, r4, #1
   118f4:	mov	r6, r3
   118f8:	b	118ac <stats_recurse+0x14>
   118fc:	mov	r0, r4
   11900:	add	r0, r0, r6
   11904:	pop	{r4, r5, r6, r7, r8, pc}

00011908 <rb_free>:
   11908:	cmp	r0, #0
   1190c:	bxeq	lr
   11910:	b	46c8 <free@plt>

00011914 <rb_dictionary_create>:
   11914:	push	{r4, r5, r6, lr}
   11918:	mov	r5, r0
   1191c:	mov	r6, r1
   11920:	mov	r0, #1
   11924:	mov	r1, #40	; 0x28
   11928:	bl	45c0 <calloc@plt>
   1192c:	subs	r4, r0, #0
   11930:	bne	11938 <rb_dictionary_create+0x24>
   11934:	bl	495c <rb_outofmemory@plt>
   11938:	mov	r0, r5
   1193c:	str	r6, [r4]
   11940:	bl	47b8 <strlen@plt>
   11944:	add	r0, r0, #1
   11948:	bl	4980 <malloc@plt>
   1194c:	subs	r6, r0, #0
   11950:	beq	11934 <rb_dictionary_create+0x20>
   11954:	mov	r1, r5
   11958:	bl	4860 <strcpy@plt>
   1195c:	mov	r3, #0
   11960:	add	r2, r4, #28
   11964:	str	r6, [r4, #20]
   11968:	str	r4, [r4, #28]
   1196c:	str	r3, [r4, #32]
   11970:	ldr	r3, [pc, #64]	; 119b8 <rb_dictionary_create+0xa4>
   11974:	add	r3, pc, r3
   11978:	ldr	r1, [r3]
   1197c:	cmp	r1, #0
   11980:	str	r1, [r4, #36]	; 0x24
   11984:	strne	r2, [r1, #4]
   11988:	bne	11998 <rb_dictionary_create+0x84>
   1198c:	ldr	r1, [r3, #4]
   11990:	cmp	r1, #0
   11994:	streq	r2, [r3, #4]
   11998:	ldr	r3, [pc, #28]	; 119bc <rb_dictionary_create+0xa8>
   1199c:	mov	r0, r4
   119a0:	add	r3, pc, r3
   119a4:	str	r2, [r3]
   119a8:	ldr	r2, [r3, #8]
   119ac:	add	r2, r2, #1
   119b0:	str	r2, [r3, #8]
   119b4:	pop	{r4, r5, r6, pc}
   119b8:	.word	0x000315b8
   119bc:	.word	0x0003158c

000119c0 <rb_dictionary_set_comparator_func>:
   119c0:	str	r1, [r0]
   119c4:	bx	lr

000119c8 <rb_dictionary_get_comparator_func>:
   119c8:	ldr	r0, [r0]
   119cc:	bx	lr

000119d0 <rb_dictionary_destroy>:
   119d0:	push	{r4, r5, r6, r7, r8, lr}
   119d4:	mov	r4, r0
   119d8:	ldr	r5, [r0, #8]
   119dc:	cmp	r5, #0
   119e0:	movne	r7, r1
   119e4:	movne	r8, r2
   119e8:	ldrne	r6, [r5, #12]
   119ec:	bne	11a54 <rb_dictionary_destroy+0x84>
   119f0:	ldrd	r2, [r4, #32]
   119f4:	cmp	r3, #0
   119f8:	strne	r2, [r3, #4]
   119fc:	ldreq	r1, [pc, #128]	; 11a84 <rb_dictionary_destroy+0xb4>
   11a00:	addeq	r1, pc, r1
   11a04:	streq	r2, [r1, #4]
   11a08:	ldr	r2, [r4, #32]
   11a0c:	cmp	r2, #0
   11a10:	strne	r3, [r2, #8]
   11a14:	ldreq	r2, [pc, #108]	; 11a88 <rb_dictionary_destroy+0xb8>
   11a18:	addeq	r2, pc, r2
   11a1c:	streq	r3, [r2]
   11a20:	ldr	r2, [pc, #100]	; 11a8c <rb_dictionary_destroy+0xbc>
   11a24:	mov	r3, #0
   11a28:	str	r3, [r4, #32]
   11a2c:	str	r3, [r4, #36]	; 0x24
   11a30:	ldr	r0, [r4, #20]
   11a34:	add	r2, pc, r2
   11a38:	ldr	r3, [r2, #8]
   11a3c:	sub	r3, r3, #1
   11a40:	str	r3, [r2, #8]
   11a44:	bl	11908 <rb_free>
   11a48:	mov	r0, r4
   11a4c:	pop	{r4, r5, r6, r7, r8, lr}
   11a50:	b	11908 <rb_free>
   11a54:	cmp	r7, #0
   11a58:	beq	11a68 <rb_dictionary_destroy+0x98>
   11a5c:	mov	r1, r8
   11a60:	mov	r0, r5
   11a64:	blx	r7
   11a68:	mov	r0, r5
   11a6c:	bl	11908 <rb_free>
   11a70:	cmp	r6, #0
   11a74:	beq	119f0 <rb_dictionary_destroy+0x20>
   11a78:	mov	r5, r6
   11a7c:	ldr	r6, [r6, #12]
   11a80:	b	11a54 <rb_dictionary_destroy+0x84>
   11a84:	.word	0x0003152c
   11a88:	.word	0x00031514
   11a8c:	.word	0x000314f8

00011a90 <rb_dictionary_foreach>:
   11a90:	ldr	r0, [r0, #8]
   11a94:	cmp	r0, #0
   11a98:	bxeq	lr
   11a9c:	push	{r4, r5, r6, lr}
   11aa0:	mov	r6, r2
   11aa4:	mov	r5, r1
   11aa8:	ldr	r4, [r0, #12]
   11aac:	cmp	r5, #0
   11ab0:	beq	11abc <rb_dictionary_foreach+0x2c>
   11ab4:	mov	r1, r6
   11ab8:	blx	r5
   11abc:	cmp	r4, #0
   11ac0:	popeq	{r4, r5, r6, pc}
   11ac4:	mov	r0, r4
   11ac8:	ldr	r4, [r4, #12]
   11acc:	b	11aac <rb_dictionary_foreach+0x1c>

00011ad0 <rb_dictionary_search>:
   11ad0:	ldr	r0, [r0, #8]
   11ad4:	cmp	r0, #0
   11ad8:	bne	11ae4 <rb_dictionary_search+0x14>
   11adc:	mov	r0, #0
   11ae0:	bx	lr
   11ae4:	push	{r4, r5, r6, lr}
   11ae8:	mov	r6, r2
   11aec:	mov	r5, r1
   11af0:	ldr	r4, [r0, #12]
   11af4:	cmp	r5, #0
   11af8:	bne	11b0c <rb_dictionary_search+0x3c>
   11afc:	cmp	r4, #0
   11b00:	bne	11b20 <rb_dictionary_search+0x50>
   11b04:	mov	r0, #0
   11b08:	pop	{r4, r5, r6, pc}
   11b0c:	mov	r1, r6
   11b10:	blx	r5
   11b14:	cmp	r0, #0
   11b18:	beq	11afc <rb_dictionary_search+0x2c>
   11b1c:	pop	{r4, r5, r6, pc}
   11b20:	mov	r0, r4
   11b24:	ldr	r4, [r4, #12]
   11b28:	b	11af4 <rb_dictionary_search+0x24>

00011b2c <rb_dictionary_foreach_cur>:
   11b2c:	ldr	r0, [r1]
   11b30:	cmp	r0, #0
   11b34:	ldrne	r0, [r0, #16]
   11b38:	bx	lr

00011b3c <rb_dictionary_foreach_next>:
   11b3c:	ldr	r3, [r1]
   11b40:	cmp	r3, #0
   11b44:	bne	11b58 <rb_dictionary_foreach_next+0x1c>
   11b48:	mov	r1, r0
   11b4c:	ldr	r0, [pc, #28]	; 11b70 <rb_dictionary_foreach_next+0x34>
   11b50:	add	r0, pc, r0
   11b54:	b	48f0 <rb_lib_log@plt>
   11b58:	ldr	r3, [r1, #4]
   11b5c:	cmp	r3, #0
   11b60:	str	r3, [r1]
   11b64:	ldrne	r3, [r3, #12]
   11b68:	strne	r3, [r1, #4]
   11b6c:	bx	lr
   11b70:	.word	0x000029be

00011b74 <rb_dictionary_foreach_start>:
   11b74:	mov	r2, #0
   11b78:	str	r2, [r1, #4]
   11b7c:	ldr	r2, [r0, #8]
   11b80:	cmp	r2, #0
   11b84:	str	r2, [r1]
   11b88:	bxeq	lr
   11b8c:	str	r2, [r1, #4]
   11b90:	b	46b0 <rb_dictionary_foreach_next@plt>

00011b94 <rb_dictionary_find>:
   11b94:	push	{r4, r5, r6, lr}
   11b98:	mov	r4, r0
   11b9c:	mov	r5, r1
   11ba0:	bl	11764 <rb_dictionary_retune>
   11ba4:	ldr	r3, [r4, #4]
   11ba8:	cmp	r3, #0
   11bac:	bne	11bb8 <rb_dictionary_find+0x24>
   11bb0:	mov	r0, #0
   11bb4:	pop	{r4, r5, r6, pc}
   11bb8:	mov	r0, r5
   11bbc:	ldr	r2, [r4]
   11bc0:	ldr	r1, [r3, #20]
   11bc4:	blx	r2
   11bc8:	cmp	r0, #0
   11bcc:	bne	11bb0 <rb_dictionary_find+0x1c>
   11bd0:	ldr	r0, [r4, #4]
   11bd4:	pop	{r4, r5, r6, pc}

00011bd8 <rb_dictionary_get_linear_index>:
   11bd8:	push	{r4, lr}
   11bdc:	mov	r4, r0
   11be0:	bl	4a04 <rb_dictionary_find@plt>
   11be4:	cmp	r0, #0
   11be8:	beq	11c2c <rb_dictionary_get_linear_index+0x54>
   11bec:	ldrb	r3, [r4, #24]
   11bf0:	tst	r3, #1
   11bf4:	movne	r2, #0
   11bf8:	ldrne	r3, [r4, #8]
   11bfc:	bne	11c14 <rb_dictionary_get_linear_index+0x3c>
   11c00:	ldr	r0, [r0, #24]
   11c04:	pop	{r4, pc}
   11c08:	str	r2, [r3, #24]
   11c0c:	add	r2, r2, #1
   11c10:	ldr	r3, [r3, #12]
   11c14:	cmp	r3, #0
   11c18:	bne	11c08 <rb_dictionary_get_linear_index+0x30>
   11c1c:	ldrb	r2, [r4, #24]
   11c20:	bfi	r2, r3, #0, #1
   11c24:	strb	r2, [r4, #24]
   11c28:	b	11c00 <rb_dictionary_get_linear_index+0x28>
   11c2c:	mvn	r0, #0
   11c30:	pop	{r4, pc}

00011c34 <rb_dictionary_add>:
   11c34:	push	{r4, r5, r6, r7, r8, lr}
   11c38:	mov	r5, r0
   11c3c:	mov	r6, r1
   11c40:	mov	r0, #1
   11c44:	mov	r1, #28
   11c48:	mov	r7, r2
   11c4c:	bl	45c0 <calloc@plt>
   11c50:	subs	r4, r0, #0
   11c54:	bne	11c5c <rb_dictionary_add+0x28>
   11c58:	bl	495c <rb_outofmemory@plt>
   11c5c:	ldrb	r3, [r5, #24]
   11c60:	str	r7, [r4, #16]
   11c64:	str	r6, [r4, #20]
   11c68:	orr	r3, r3, #1
   11c6c:	strb	r3, [r5, #24]
   11c70:	ldr	r3, [r5, #16]
   11c74:	add	r3, r3, #1
   11c78:	str	r3, [r5, #16]
   11c7c:	ldr	r3, [r5, #4]
   11c80:	cmp	r3, #0
   11c84:	bne	11cac <rb_dictionary_add+0x78>
   11c88:	str	r3, [r4]
   11c8c:	str	r3, [r4, #4]
   11c90:	str	r4, [r5, #4]
   11c94:	str	r3, [r4, #8]
   11c98:	str	r4, [r5, #8]
   11c9c:	str	r3, [r4, #12]
   11ca0:	str	r4, [r5, #12]
   11ca4:	mov	r0, r4
   11ca8:	pop	{r4, r5, r6, r7, r8, pc}
   11cac:	mov	r1, r6
   11cb0:	mov	r0, r5
   11cb4:	bl	11764 <rb_dictionary_retune>
   11cb8:	ldr	r3, [r5]
   11cbc:	ldr	r2, [r5, #4]
   11cc0:	ldr	r0, [r4, #20]
   11cc4:	ldr	r1, [r2, #20]
   11cc8:	blx	r3
   11ccc:	cmp	r0, #0
   11cd0:	ldr	r3, [r5, #4]
   11cd4:	bge	11d08 <rb_dictionary_add+0xd4>
   11cd8:	ldr	r2, [r3]
   11cdc:	strd	r2, [r4]
   11ce0:	mov	r2, #0
   11ce4:	str	r2, [r3]
   11ce8:	ldr	r2, [r3, #8]
   11cec:	cmp	r2, #0
   11cf0:	strne	r4, [r2, #12]
   11cf4:	streq	r4, [r5, #8]
   11cf8:	strd	r2, [r4, #8]
   11cfc:	str	r4, [r3, #8]
   11d00:	str	r4, [r5, #4]
   11d04:	b	11ca4 <rb_dictionary_add+0x70>
   11d08:	beq	11d40 <rb_dictionary_add+0x10c>
   11d0c:	ldr	r2, [r3, #4]
   11d10:	str	r3, [r4]
   11d14:	str	r2, [r4, #4]
   11d18:	mov	r2, #0
   11d1c:	str	r2, [r3, #4]
   11d20:	ldr	r2, [r3, #12]
   11d24:	cmp	r2, #0
   11d28:	strne	r4, [r2, #8]
   11d2c:	streq	r4, [r5, #12]
   11d30:	str	r3, [r4, #8]
   11d34:	str	r2, [r4, #12]
   11d38:	str	r4, [r3, #12]
   11d3c:	b	11d00 <rb_dictionary_add+0xcc>
   11d40:	ldr	r2, [r4, #20]
   11d44:	mov	r0, r4
   11d48:	str	r2, [r3, #20]
   11d4c:	ldr	r2, [r4, #16]
   11d50:	str	r2, [r3, #16]
   11d54:	ldr	r3, [r5, #16]
   11d58:	sub	r3, r3, #1
   11d5c:	str	r3, [r5, #16]
   11d60:	bl	11908 <rb_free>
   11d64:	ldr	r4, [r5, #4]
   11d68:	b	11ca4 <rb_dictionary_add+0x70>

00011d6c <rb_dictionary_delete>:
   11d6c:	push	{r4, r5, r6, lr}
   11d70:	mov	r4, r0
   11d74:	bl	4a04 <rb_dictionary_find@plt>
   11d78:	cmp	r0, #0
   11d7c:	popeq	{r4, r5, r6, pc}
   11d80:	ldrb	r3, [r4, #24]
   11d84:	ldr	r5, [r0, #16]
   11d88:	orr	r3, r3, #1
   11d8c:	strb	r3, [r4, #24]
   11d90:	ldr	r3, [r4, #4]
   11d94:	cmp	r3, #0
   11d98:	beq	11e14 <rb_dictionary_delete+0xa8>
   11d9c:	ldr	ip, [r3]
   11da0:	ldr	r1, [r3, #4]
   11da4:	ldr	r2, [r3, #12]
   11da8:	cmp	ip, #0
   11dac:	streq	r1, [r4, #4]
   11db0:	beq	11dd4 <rb_dictionary_delete+0x68>
   11db4:	cmp	r1, #0
   11db8:	streq	ip, [r4, #4]
   11dbc:	beq	11dd4 <rb_dictionary_delete+0x68>
   11dc0:	cmp	r2, r1
   11dc4:	movne	ip, r1
   11dc8:	streq	r2, [r4, #4]
   11dcc:	streq	ip, [r2]
   11dd0:	bne	11e24 <rb_dictionary_delete+0xb8>
   11dd4:	ldr	r1, [r3, #8]
   11dd8:	ldr	ip, [r4, #8]
   11ddc:	cmp	r1, #0
   11de0:	strne	r2, [r1, #12]
   11de4:	cmp	r3, ip
   11de8:	ldr	r2, [r3, #12]
   11dec:	streq	r2, [r4, #8]
   11df0:	cmp	r2, #0
   11df4:	strne	r1, [r2, #8]
   11df8:	ldr	r2, [r4, #12]
   11dfc:	cmp	r3, r2
   11e00:	ldreq	r3, [r3, #8]
   11e04:	streq	r3, [r4, #12]
   11e08:	ldr	r3, [r4, #16]
   11e0c:	sub	r3, r3, #1
   11e10:	str	r3, [r4, #16]
   11e14:	bl	11908 <rb_free>
   11e18:	mov	r0, r5
   11e1c:	pop	{r4, r5, r6, pc}
   11e20:	mov	ip, lr
   11e24:	ldr	lr, [ip]
   11e28:	cmp	lr, r2
   11e2c:	cmpne	lr, #0
   11e30:	bne	11e20 <rb_dictionary_delete+0xb4>
   11e34:	ldr	lr, [r2, #4]
   11e38:	str	lr, [ip]
   11e3c:	ldr	ip, [r3]
   11e40:	str	r2, [r4, #4]
   11e44:	str	ip, [r2]
   11e48:	str	r1, [r2, #4]
   11e4c:	b	11dd4 <rb_dictionary_delete+0x68>

00011e50 <rb_dictionary_retrieve>:
   11e50:	push	{r4, lr}
   11e54:	bl	4a04 <rb_dictionary_find@plt>
   11e58:	cmp	r0, #0
   11e5c:	ldrne	r0, [r0, #16]
   11e60:	pop	{r4, pc}

00011e64 <rb_dictionary_size>:
   11e64:	ldr	r0, [r0, #16]
   11e68:	bx	lr

00011e6c <rb_dictionary_stats>:
   11e6c:	ldr	r3, [r0, #16]
   11e70:	push	{r4, r5, r6, r7, lr}
   11e74:	sub	sp, sp, #292	; 0x124
   11e78:	mov	r4, r0
   11e7c:	mov	r6, r1
   11e80:	mov	r7, r2
   11e84:	add	r5, sp, #32
   11e88:	cmp	r3, #0
   11e8c:	beq	11ef8 <rb_dictionary_stats+0x8c>
   11e90:	mov	r1, #0
   11e94:	add	r2, sp, #28
   11e98:	ldr	r0, [r0, #4]
   11e9c:	str	r1, [sp, #28]
   11ea0:	bl	11898 <stats_recurse>
   11ea4:	ldr	r3, [r4, #16]
   11ea8:	ldr	r2, [sp, #28]
   11eac:	str	r3, [sp, #4]
   11eb0:	str	r0, [sp, #8]
   11eb4:	str	r2, [sp, #16]
   11eb8:	udiv	r2, r0, r3
   11ebc:	ldr	r3, [pc, #104]	; 11f2c <rb_dictionary_stats+0xc0>
   11ec0:	add	r3, pc, r3
   11ec4:	str	r3, [sp]
   11ec8:	str	r2, [sp, #12]
   11ecc:	ldr	r2, [pc, #92]	; 11f30 <rb_dictionary_stats+0xc4>
   11ed0:	ldr	r3, [r4, #20]
   11ed4:	add	r2, pc, r2
   11ed8:	mov	r1, #256	; 0x100
   11edc:	mov	r0, r5
   11ee0:	bl	4b84 <snprintf@plt>
   11ee4:	mov	r1, r7
   11ee8:	mov	r0, r5
   11eec:	blx	r6
   11ef0:	add	sp, sp, #292	; 0x124
   11ef4:	pop	{r4, r5, r6, r7, pc}
   11ef8:	ldr	r3, [pc, #52]	; 11f34 <rb_dictionary_stats+0xc8>
   11efc:	ldr	r2, [pc, #52]	; 11f38 <rb_dictionary_stats+0xcc>
   11f00:	add	r3, pc, r3
   11f04:	str	r3, [sp, #4]
   11f08:	add	r2, pc, r2
   11f0c:	str	r3, [sp, #8]
   11f10:	str	r3, [sp, #12]
   11f14:	str	r3, [sp, #16]
   11f18:	ldr	r3, [pc, #28]	; 11f3c <rb_dictionary_stats+0xd0>
   11f1c:	add	r3, pc, r3
   11f20:	str	r3, [sp]
   11f24:	ldr	r3, [r0, #20]
   11f28:	b	11ed8 <rb_dictionary_stats+0x6c>
   11f2c:	.word	0x000026c3
   11f30:	.word	0x0000268b
   11f34:	.word	0x000017fe
   11f38:	.word	0x00002680
   11f3c:	.word	0x00002667

00011f40 <rb_dictionary_stats_walk>:
   11f40:	ldr	r3, [pc, #44]	; 11f74 <rb_dictionary_stats_walk+0x34>
   11f44:	push	{r4, r5, r6, lr}
   11f48:	mov	r5, r0
   11f4c:	mov	r6, r1
   11f50:	ldr	r4, [pc, r3]
   11f54:	cmp	r4, #0
   11f58:	popeq	{r4, r5, r6, pc}
   11f5c:	mov	r2, r6
   11f60:	mov	r1, r5
   11f64:	ldr	r0, [r4]
   11f68:	bl	4974 <rb_dictionary_stats@plt>
   11f6c:	ldr	r4, [r4, #8]
   11f70:	b	11f54 <rb_dictionary_stats_walk+0x14>
   11f74:	.word	0x00030fdc

00011f78 <stats_recurse>:
   11f78:	ldr	r3, [r2]
   11f7c:	push	{r4, r5, r6, r7, r8, lr}
   11f80:	cmp	r3, r1
   11f84:	strlt	r1, [r2]
   11f88:	ldr	r3, [r0]
   11f8c:	cmn	r3, #1
   11f90:	moveq	r4, r1
   11f94:	beq	11fd0 <stats_recurse+0x58>
   11f98:	mov	r8, r2
   11f9c:	add	r6, r0, #4
   11fa0:	add	r5, r0, #68	; 0x44
   11fa4:	mov	r4, #0
   11fa8:	add	r7, r1, #1
   11fac:	ldr	r0, [r6], #4
   11fb0:	cmp	r0, #0
   11fb4:	beq	11fc8 <stats_recurse+0x50>
   11fb8:	mov	r2, r8
   11fbc:	mov	r1, r7
   11fc0:	bl	11f78 <stats_recurse>
   11fc4:	add	r4, r4, r0
   11fc8:	cmp	r6, r5
   11fcc:	bne	11fac <stats_recurse+0x34>
   11fd0:	mov	r0, r4
   11fd4:	pop	{r4, r5, r6, r7, r8, pc}

00011fd8 <rb_malloc>:
   11fd8:	push	{r4, lr}
   11fdc:	mov	r1, r0
   11fe0:	mov	r0, #1
   11fe4:	bl	45c0 <calloc@plt>
   11fe8:	cmp	r0, #0
   11fec:	popne	{r4, pc}
   11ff0:	bl	495c <rb_outofmemory@plt>

00011ff4 <rb_strdup>:
   11ff4:	push	{r4, r5, r6, lr}
   11ff8:	mov	r5, r0
   11ffc:	bl	47b8 <strlen@plt>
   12000:	add	r0, r0, #1
   12004:	bl	4980 <malloc@plt>
   12008:	subs	r4, r0, #0
   1200c:	bne	12014 <rb_strdup+0x20>
   12010:	bl	495c <rb_outofmemory@plt>
   12014:	mov	r1, r5
   12018:	bl	4860 <strcpy@plt>
   1201c:	mov	r0, r4
   12020:	pop	{r4, r5, r6, pc}

00012024 <rb_free>:
   12024:	cmp	r0, #0
   12028:	bxeq	lr
   1202c:	b	46c8 <free@plt>

00012030 <rb_radixtree_create>:
   12030:	push	{r4, r5, r6, r7, r8, lr}
   12034:	mov	r7, r1
   12038:	mov	r6, r0
   1203c:	mov	r0, #28
   12040:	bl	11fd8 <rb_malloc>
   12044:	mov	r4, r0
   12048:	str	r7, [r0]
   1204c:	mov	r0, r6
   12050:	bl	11ff4 <rb_strdup>
   12054:	mov	r3, #0
   12058:	ldr	r5, [pc, #84]	; 120b4 <rb_radixtree_create+0x84>
   1205c:	add	r2, r4, #16
   12060:	str	r3, [r4, #4]
   12064:	str	r0, [r4, #12]
   12068:	str	r3, [r4, #20]
   1206c:	ldr	r3, [pc, #68]	; 120b8 <rb_radixtree_create+0x88>
   12070:	add	r5, pc, r5
   12074:	str	r4, [r4, #16]
   12078:	ldr	r3, [r5, r3]
   1207c:	ldr	r1, [r3]
   12080:	cmp	r1, #0
   12084:	str	r1, [r4, #24]
   12088:	strne	r2, [r1, #4]
   1208c:	bne	1209c <rb_radixtree_create+0x6c>
   12090:	ldr	r1, [r3, #4]
   12094:	cmp	r1, #0
   12098:	streq	r2, [r3, #4]
   1209c:	str	r2, [r3]
   120a0:	mov	r0, r4
   120a4:	ldr	r2, [r3, #8]
   120a8:	add	r2, r2, #1
   120ac:	str	r2, [r3, #8]
   120b0:	pop	{r4, r5, r6, r7, r8, pc}
   120b4:	.word	0x00012f88
   120b8:	.word	0x000003f0

000120bc <rb_radixtree_foreach>:
   120bc:	push	{r4, r5, r6, r7, r8, lr}
   120c0:	ldr	r5, [r0, #4]
   120c4:	cmp	r5, #0
   120c8:	popeq	{r4, r5, r6, r7, r8, pc}
   120cc:	mov	r3, r1
   120d0:	ldr	r1, [r5]
   120d4:	cmn	r1, #1
   120d8:	movne	r7, r2
   120dc:	movne	r6, r3
   120e0:	movne	r4, #0
   120e4:	bne	12104 <rb_radixtree_foreach+0x48>
   120e8:	cmp	r3, #0
   120ec:	popeq	{r4, r5, r6, r7, r8, pc}
   120f0:	ldr	r1, [r5, #4]
   120f4:	ldr	r0, [r5, #8]
   120f8:	pop	{r4, r5, r6, r7, r8, lr}
   120fc:	bx	r3
   12100:	mov	r5, r3
   12104:	add	r4, r4, #1
   12108:	ldr	r3, [r5, r4, lsl #2]
   1210c:	cmp	r4, #15
   12110:	movgt	r1, #0
   12114:	movle	r1, #1
   12118:	cmp	r3, #0
   1211c:	movne	r1, #0
   12120:	cmp	r1, #0
   12124:	bne	12104 <rb_radixtree_foreach+0x48>
   12128:	cmp	r3, #0
   1212c:	beq	12158 <rb_radixtree_foreach+0x9c>
   12130:	ldr	r2, [r3]
   12134:	cmn	r2, #1
   12138:	movne	r4, r1
   1213c:	bne	12100 <rb_radixtree_foreach+0x44>
   12140:	cmp	r6, #0
   12144:	beq	12158 <rb_radixtree_foreach+0x9c>
   12148:	mov	r2, r7
   1214c:	ldr	r1, [r3, #4]
   12150:	ldr	r0, [r3, #8]
   12154:	blx	r6
   12158:	mov	r3, r5
   1215c:	cmp	r4, #15
   12160:	ble	12100 <rb_radixtree_foreach+0x44>
   12164:	ldrb	r4, [r3, #72]	; 0x48
   12168:	ldr	r3, [r3, #68]	; 0x44
   1216c:	cmp	r3, #0
   12170:	popeq	{r4, r5, r6, r7, r8, pc}
   12174:	add	r4, r4, #1
   12178:	b	1215c <rb_radixtree_foreach+0xa0>

0001217c <rb_radixtree_search>:
   1217c:	ldr	r0, [r0, #4]
   12180:	cmp	r0, #0
   12184:	bxeq	lr
   12188:	mov	r3, r1
   1218c:	ldr	r1, [r0]
   12190:	cmn	r1, #1
   12194:	bne	121ac <rb_radixtree_search+0x30>
   12198:	cmp	r3, #0
   1219c:	beq	12250 <rb_radixtree_search+0xd4>
   121a0:	ldr	r1, [r0, #4]
   121a4:	ldr	r0, [r0, #8]
   121a8:	bx	r3
   121ac:	push	{r4, r5, r6, r7, r8, lr}
   121b0:	mov	r6, r2
   121b4:	mov	r5, r3
   121b8:	mov	r7, r0
   121bc:	mov	r4, #0
   121c0:	b	12214 <rb_radixtree_search+0x98>
   121c4:	ldr	r2, [r3]
   121c8:	cmn	r2, #1
   121cc:	movne	r4, r1
   121d0:	bne	12210 <rb_radixtree_search+0x94>
   121d4:	cmp	r5, #0
   121d8:	beq	12240 <rb_radixtree_search+0xc4>
   121dc:	mov	r2, r6
   121e0:	ldr	r1, [r3, #4]
   121e4:	ldr	r0, [r3, #8]
   121e8:	blx	r5
   121ec:	cmp	r0, #0
   121f0:	beq	12240 <rb_radixtree_search+0xc4>
   121f4:	pop	{r4, r5, r6, r7, r8, pc}
   121f8:	ldrb	r2, [r3, #72]	; 0x48
   121fc:	ldr	r3, [r3, #68]	; 0x44
   12200:	add	r4, r2, #1
   12204:	cmp	r3, #0
   12208:	bne	12244 <rb_radixtree_search+0xc8>
   1220c:	mov	r4, r2
   12210:	mov	r7, r3
   12214:	add	r4, r4, #1
   12218:	ldr	r3, [r7, r4, lsl #2]
   1221c:	cmp	r4, #15
   12220:	movgt	r1, #0
   12224:	movle	r1, #1
   12228:	cmp	r3, #0
   1222c:	movne	r1, #0
   12230:	cmp	r1, #0
   12234:	bne	12214 <rb_radixtree_search+0x98>
   12238:	cmp	r3, #0
   1223c:	bne	121c4 <rb_radixtree_search+0x48>
   12240:	mov	r3, r7
   12244:	cmp	r4, #15
   12248:	bgt	121f8 <rb_radixtree_search+0x7c>
   1224c:	b	12210 <rb_radixtree_search+0x94>
   12250:	mov	r0, r3
   12254:	bx	lr

00012258 <rb_radixtree_foreach_cur>:
   12258:	cmp	r0, #0
   1225c:	bxeq	lr
   12260:	ldr	r0, [r1, #8]
   12264:	cmp	r0, #0
   12268:	ldrne	r0, [r0, #4]
   1226c:	bx	lr

00012270 <rb_radixtree_foreach_next>:
   12270:	cmp	r0, #0
   12274:	bxeq	lr
   12278:	ldr	r3, [r1, #8]
   1227c:	cmp	r3, #0
   12280:	bxeq	lr
   12284:	ldr	r2, [r1, #12]
   12288:	cmp	r2, #0
   1228c:	str	r2, [r1, #8]
   12290:	bxeq	lr
   12294:	push	{r4, r5, r6, lr}
   12298:	mov	r5, r1
   1229c:	ldrb	r3, [r2, #16]
   122a0:	ldr	r4, [r2, #12]
   122a4:	subs	r0, r4, #0
   122a8:	beq	12304 <rb_radixtree_foreach_next+0x94>
   122ac:	add	r3, r3, #1
   122b0:	ldr	r4, [r0, r3, lsl #2]
   122b4:	cmp	r3, #15
   122b8:	movgt	r1, #0
   122bc:	movle	r1, #1
   122c0:	cmp	r4, #0
   122c4:	movne	r1, #0
   122c8:	cmp	r1, #0
   122cc:	bne	122ac <rb_radixtree_foreach_next+0x3c>
   122d0:	cmp	r4, #0
   122d4:	beq	12338 <rb_radixtree_foreach_next+0xc8>
   122d8:	ldr	ip, [r4]
   122dc:	cmn	ip, #1
   122e0:	movne	r3, r1
   122e4:	bne	122a4 <rb_radixtree_foreach_next+0x34>
   122e8:	cmp	r2, r4
   122ec:	beq	12338 <rb_radixtree_foreach_next+0xc8>
   122f0:	ldr	r1, [r2, #8]
   122f4:	ldr	r0, [r4, #8]
   122f8:	bl	4cb0 <strcmp@plt>
   122fc:	cmp	r0, #0
   12300:	bge	12310 <rb_radixtree_foreach_next+0xa0>
   12304:	mov	r3, #0
   12308:	str	r3, [r5, #12]
   1230c:	pop	{r4, r5, r6, pc}
   12310:	str	r4, [r5, #12]
   12314:	pop	{r4, r5, r6, pc}
   12318:	ldrb	r3, [r4, #72]	; 0x48
   1231c:	ldr	r4, [r4, #68]	; 0x44
   12320:	cmp	r4, #0
   12324:	beq	122a4 <rb_radixtree_foreach_next+0x34>
   12328:	add	r3, r3, #1
   1232c:	cmp	r3, #15
   12330:	bgt	12318 <rb_radixtree_foreach_next+0xa8>
   12334:	b	122a4 <rb_radixtree_foreach_next+0x34>
   12338:	mov	r4, r0
   1233c:	b	1232c <rb_radixtree_foreach_next+0xbc>

00012340 <rb_radixtree_foreach_start>:
   12340:	cmp	r0, #0
   12344:	bxeq	lr
   12348:	ldr	r3, [r0, #4]
   1234c:	cmp	r3, #0
   12350:	bne	123b8 <rb_radixtree_foreach_start+0x78>
   12354:	str	r3, [r1, #12]
   12358:	ldr	r3, [r1, #12]
   1235c:	cmp	r3, #0
   12360:	str	r3, [r1, #8]
   12364:	bne	123a4 <rb_radixtree_foreach_start+0x64>
   12368:	bx	lr
   1236c:	add	ip, r3, #4
   12370:	ldr	lr, [ip], #4
   12374:	cmp	lr, #0
   12378:	bne	123a8 <rb_radixtree_foreach_start+0x68>
   1237c:	cmp	ip, r2
   12380:	bne	12370 <rb_radixtree_foreach_start+0x30>
   12384:	cmn	r4, #1
   12388:	bne	1236c <rb_radixtree_foreach_start+0x2c>
   1238c:	str	r3, [r1, #12]
   12390:	ldr	r3, [r1, #12]
   12394:	cmp	r3, #0
   12398:	str	r3, [r1, #8]
   1239c:	popeq	{r4, pc}
   123a0:	pop	{r4, lr}
   123a4:	b	441c <rb_radixtree_foreach_next@plt>
   123a8:	mov	r3, lr
   123ac:	mov	r2, r3
   123b0:	ldr	r4, [r2], #68	; 0x44
   123b4:	b	12384 <rb_radixtree_foreach_start+0x44>
   123b8:	push	{r4, lr}
   123bc:	b	123ac <rb_radixtree_foreach_start+0x6c>

000123c0 <rb_radixtree_elem_find>:
   123c0:	push	{r4, r5, r6, r7, r8, lr}
   123c4:	mov	r4, r0
   123c8:	sub	sp, sp, #256	; 0x100
   123cc:	mov	r0, r1
   123d0:	mov	r8, r1
   123d4:	mov	r7, r2
   123d8:	bl	47b8 <strlen@plt>
   123dc:	ldr	r5, [r4]
   123e0:	mov	r6, r0
   123e4:	cmp	r5, #0
   123e8:	beq	1240c <rb_radixtree_elem_find+0x4c>
   123ec:	cmp	r0, #255	; 0xff
   123f0:	bls	1245c <rb_radixtree_elem_find+0x9c>
   123f4:	mov	r0, r8
   123f8:	bl	11ff4 <rb_strdup>
   123fc:	ldr	r3, [r4]
   12400:	mov	r5, r0
   12404:	mov	r8, r0
   12408:	blx	r3
   1240c:	ldr	r4, [r4, #4]
   12410:	cmp	r4, #0
   12414:	beq	12440 <rb_radixtree_elem_find+0x80>
   12418:	ldr	r2, [r4]
   1241c:	cmn	r2, #1
   12420:	bne	12484 <rb_radixtree_elem_find+0xc4>
   12424:	cmp	r7, #0
   12428:	bne	12440 <rb_radixtree_elem_find+0x80>
   1242c:	mov	r1, r8
   12430:	ldr	r0, [r4, #8]
   12434:	bl	4cb0 <strcmp@plt>
   12438:	cmp	r0, #0
   1243c:	movne	r4, #0
   12440:	cmp	r5, #0
   12444:	beq	12450 <rb_radixtree_elem_find+0x90>
   12448:	mov	r0, r5
   1244c:	bl	12024 <rb_free>
   12450:	mov	r0, r4
   12454:	add	sp, sp, #256	; 0x100
   12458:	pop	{r4, r5, r6, r7, r8, pc}
   1245c:	mov	r1, r8
   12460:	mov	r8, sp
   12464:	mov	r2, #256	; 0x100
   12468:	mov	r0, r8
   1246c:	bl	4674 <rb_strlcpy@plt>
   12470:	mov	r0, r8
   12474:	ldr	r3, [r4]
   12478:	mov	r5, #0
   1247c:	blx	r3
   12480:	b	1240c <rb_radixtree_elem_find+0x4c>
   12484:	add	r3, r2, r2, lsr #31
   12488:	cmp	r6, r3, asr #1
   1248c:	movle	r3, #0
   12490:	ble	124ac <rb_radixtree_elem_find+0xec>
   12494:	ldrb	r3, [r8, r3, asr #1]
   12498:	tst	r2, #1
   1249c:	movne	r2, #0
   124a0:	moveq	r2, #4
   124a4:	asr	r3, r3, r2
   124a8:	and	r3, r3, #15
   124ac:	add	r4, r4, r3, lsl #2
   124b0:	b	1240c <rb_radixtree_elem_find+0x4c>

000124b4 <rb_radixtree_foreach_start_from>:
   124b4:	cmp	r2, #0
   124b8:	beq	124f0 <rb_radixtree_foreach_start_from+0x3c>
   124bc:	push	{r4, r5, r6, lr}
   124c0:	mov	r3, #0
   124c4:	mov	r4, r1
   124c8:	mov	r1, r2
   124cc:	mov	r2, #1
   124d0:	mov	r5, r0
   124d4:	str	r3, [r4, #8]
   124d8:	bl	4b48 <rb_radixtree_elem_find@plt>
   124dc:	mov	r1, r4
   124e0:	str	r0, [r4, #12]
   124e4:	mov	r0, r5
   124e8:	pop	{r4, r5, r6, lr}
   124ec:	b	441c <rb_radixtree_foreach_next@plt>
   124f0:	b	43e0 <rb_radixtree_foreach_start@plt>

000124f4 <rb_radixtree_elem_add>:
   124f4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124f8:	mov	r8, r0
   124fc:	mov	r0, r1
   12500:	mov	r4, r1
   12504:	mov	r9, r2
   12508:	bl	47b8 <strlen@plt>
   1250c:	mov	sl, r0
   12510:	mov	r0, r4
   12514:	bl	11ff4 <rb_strdup>
   12518:	subs	r6, r0, #0
   1251c:	beq	12570 <rb_radixtree_elem_add+0x7c>
   12520:	ldr	r3, [r8]
   12524:	cmp	r3, #0
   12528:	beq	12530 <rb_radixtree_elem_add+0x3c>
   1252c:	blx	r3
   12530:	ldr	r5, [r8, #4]
   12534:	mov	r7, #18
   12538:	mov	r4, #0
   1253c:	cmp	r5, #0
   12540:	beq	12794 <rb_radixtree_elem_add+0x2a0>
   12544:	ldr	r3, [r5]
   12548:	cmn	r3, #1
   1254c:	bne	1257c <rb_radixtree_elem_add+0x88>
   12550:	mov	r1, r6
   12554:	ldr	r0, [r5, #8]
   12558:	bl	4cb0 <strcmp@plt>
   1255c:	subs	sl, r0, #0
   12560:	bne	125d4 <rb_radixtree_elem_add+0xe0>
   12564:	mov	r0, r6
   12568:	mov	r6, sl
   1256c:	bl	12024 <rb_free>
   12570:	mov	r0, r6
   12574:	add	sp, sp, #12
   12578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1257c:	add	r2, r3, r3, lsr #31
   12580:	cmp	sl, r2, asr #1
   12584:	movle	r7, #0
   12588:	ble	125a4 <rb_radixtree_elem_add+0xb0>
   1258c:	ldrb	r7, [r6, r2, asr #1]
   12590:	tst	r3, #1
   12594:	movne	r4, #0
   12598:	moveq	r4, #4
   1259c:	asr	r7, r7, r4
   125a0:	and	r7, r7, #15
   125a4:	add	r3, r5, r7, lsl #2
   125a8:	mov	r4, r5
   125ac:	ldr	r5, [r3, #4]
   125b0:	b	1253c <rb_radixtree_elem_add+0x48>
   125b4:	add	r2, r5, #4
   125b8:	ldr	r1, [r2], #4
   125bc:	cmp	r1, #0
   125c0:	bne	12700 <rb_radixtree_elem_add+0x20c>
   125c4:	cmp	r3, r2
   125c8:	bne	125b8 <rb_radixtree_elem_add+0xc4>
   125cc:	cmn	r0, #1
   125d0:	bne	125b4 <rb_radixtree_elem_add+0xc0>
   125d4:	ldr	r0, [r5, #8]
   125d8:	mov	r3, #0
   125dc:	tst	r3, #1
   125e0:	asr	fp, r3, #1
   125e4:	ldrb	r1, [r6, r3, asr #1]
   125e8:	movne	sl, #0
   125ec:	moveq	sl, #4
   125f0:	add	r2, r6, fp
   125f4:	ldrb	ip, [r0, r3, asr #1]
   125f8:	asr	r1, r1, sl
   125fc:	eor	r1, r1, ip, asr sl
   12600:	tst	r1, #15
   12604:	beq	12710 <rb_radixtree_elem_add+0x21c>
   12608:	cmp	r4, #0
   1260c:	beq	12620 <rb_radixtree_elem_add+0x12c>
   12610:	ldr	r1, [r4]
   12614:	cmp	r1, r3
   12618:	bgt	12718 <rb_radixtree_elem_add+0x224>
   1261c:	bge	126a8 <rb_radixtree_elem_add+0x1b4>
   12620:	mov	r0, #76	; 0x4c
   12624:	strd	r2, [sp]
   12628:	bl	11fd8 <rb_malloc>
   1262c:	ldrd	r2, [sp]
   12630:	add	r1, r0, #68	; 0x44
   12634:	mov	ip, #0
   12638:	str	r3, [r0]
   1263c:	add	r3, r0, #4
   12640:	str	r4, [r0, #68]	; 0x44
   12644:	strb	r7, [r0, #72]	; 0x48
   12648:	str	ip, [r3], #4
   1264c:	cmp	r1, r3
   12650:	bne	12648 <rb_radixtree_elem_add+0x154>
   12654:	ldr	r3, [r5, #8]
   12658:	cmp	r4, #0
   1265c:	ldrb	r3, [r3, fp]
   12660:	asr	r3, r3, sl
   12664:	and	r3, r3, #15
   12668:	lsl	r3, r3, #2
   1266c:	bne	1273c <rb_radixtree_elem_add+0x248>
   12670:	ldr	r1, [r8, #4]
   12674:	add	r3, r0, r3
   12678:	str	r1, [r3, #4]
   1267c:	ldr	r3, [r1]
   12680:	cmn	r3, #1
   12684:	ldr	r3, [r5, #8]
   12688:	bne	12724 <rb_radixtree_elem_add+0x230>
   1268c:	str	r0, [r1, #12]
   12690:	ldrb	r3, [r3, fp]
   12694:	asr	r3, r3, sl
   12698:	and	r3, r3, #15
   1269c:	strb	r3, [r1, #16]
   126a0:	str	r0, [r8, #4]
   126a4:	mov	r4, r0
   126a8:	ldrb	r3, [r2]
   126ac:	mov	r0, #20
   126b0:	asr	sl, r3, sl
   126b4:	bl	11fd8 <rb_malloc>
   126b8:	and	sl, sl, #15
   126bc:	mvn	r2, #0
   126c0:	add	r3, r4, sl, lsl #2
   126c4:	str	r0, [r3, #4]
   126c8:	str	r2, [r0]
   126cc:	ldr	r2, [r3, #4]
   126d0:	str	r9, [r2, #4]
   126d4:	ldr	r2, [r3, #4]
   126d8:	str	r6, [r2, #8]
   126dc:	ldr	r2, [r3, #4]
   126e0:	str	r4, [r2, #12]
   126e4:	ldr	r2, [r3, #4]
   126e8:	strb	sl, [r2, #16]
   126ec:	ldr	r2, [r8, #8]
   126f0:	ldr	r6, [r3, #4]
   126f4:	add	r2, r2, #1
   126f8:	str	r2, [r8, #8]
   126fc:	b	12570 <rb_radixtree_elem_add+0x7c>
   12700:	mov	r5, r1
   12704:	mov	r3, r5
   12708:	ldr	r0, [r3], #68	; 0x44
   1270c:	b	125cc <rb_radixtree_elem_add+0xd8>
   12710:	add	r3, r3, #1
   12714:	b	125dc <rb_radixtree_elem_add+0xe8>
   12718:	ldrb	r7, [r4, #72]	; 0x48
   1271c:	ldr	r4, [r4, #68]	; 0x44
   12720:	b	12608 <rb_radixtree_elem_add+0x114>
   12724:	str	r0, [r1, #68]	; 0x44
   12728:	ldrb	r3, [r3, fp]
   1272c:	asr	r3, r3, sl
   12730:	and	r3, r3, #15
   12734:	strb	r3, [r1, #72]	; 0x48
   12738:	b	126a0 <rb_radixtree_elem_add+0x1ac>
   1273c:	add	r4, r4, r7, lsl #2
   12740:	add	r3, r0, r3
   12744:	ldr	r1, [r4, #4]
   12748:	str	r1, [r3, #4]
   1274c:	ldr	r3, [r1]
   12750:	cmn	r3, #1
   12754:	ldr	r3, [r5, #8]
   12758:	bne	1277c <rb_radixtree_elem_add+0x288>
   1275c:	str	r0, [r1, #12]
   12760:	ldrb	r3, [r3, fp]
   12764:	ldr	r1, [r4, #4]
   12768:	asr	r3, r3, sl
   1276c:	and	r3, r3, #15
   12770:	strb	r3, [r1, #16]
   12774:	str	r0, [r4, #4]
   12778:	b	126a4 <rb_radixtree_elem_add+0x1b0>
   1277c:	str	r0, [r1, #68]	; 0x44
   12780:	ldrb	r3, [r3, fp]
   12784:	asr	r3, r3, sl
   12788:	and	r3, r3, #15
   1278c:	strb	r3, [r1, #72]	; 0x48
   12790:	b	12774 <rb_radixtree_elem_add+0x280>
   12794:	cmp	r4, #0
   12798:	movne	r5, r4
   1279c:	bne	12704 <rb_radixtree_elem_add+0x210>
   127a0:	mov	r0, #20
   127a4:	bl	11fd8 <rb_malloc>
   127a8:	mvn	r3, #0
   127ac:	str	r0, [r8, #4]
   127b0:	stm	r0, {r3, r9}
   127b4:	ldr	r3, [r8, #8]
   127b8:	str	r6, [r0, #8]
   127bc:	mov	r6, r0
   127c0:	str	r4, [r0, #12]
   127c4:	strb	r7, [r0, #16]
   127c8:	add	r3, r3, #1
   127cc:	str	r3, [r8, #8]
   127d0:	b	12570 <rb_radixtree_elem_add+0x7c>

000127d4 <rb_radixtree_add>:
   127d4:	push	{r4, lr}
   127d8:	bl	46ec <rb_radixtree_elem_add@plt>
   127dc:	adds	r0, r0, #0
   127e0:	movne	r0, #1
   127e4:	pop	{r4, pc}

000127e8 <rb_radixtree_elem_delete>:
   127e8:	push	{r4, r5, r6, r7, r8, lr}
   127ec:	mov	r6, r1
   127f0:	mov	r5, r0
   127f4:	ldr	r0, [r1, #8]
   127f8:	ldr	r4, [r1, #12]
   127fc:	ldrb	r7, [r1, #16]
   12800:	bl	12024 <rb_free>
   12804:	mov	r0, r6
   12808:	bl	12024 <rb_free>
   1280c:	cmp	r4, #0
   12810:	streq	r4, [r5, #4]
   12814:	beq	12898 <rb_radixtree_elem_delete+0xb0>
   12818:	add	r7, r4, r7, lsl #2
   1281c:	mov	r3, #0
   12820:	add	r1, r4, #4
   12824:	mvn	r2, #0
   12828:	str	r3, [r7, #4]
   1282c:	ldr	r0, [r1], #4
   12830:	cmp	r0, #0
   12834:	beq	12844 <rb_radixtree_elem_delete+0x5c>
   12838:	cmn	r2, #1
   1283c:	moveq	r2, r3
   12840:	mvnne	r2, #1
   12844:	add	r3, r3, #1
   12848:	cmp	r3, #16
   1284c:	bne	1282c <rb_radixtree_elem_delete+0x44>
   12850:	cmp	r2, #0
   12854:	blt	12898 <rb_radixtree_elem_delete+0xb0>
   12858:	add	r2, r4, r2, lsl #2
   1285c:	ldrb	r1, [r4, #72]	; 0x48
   12860:	ldr	r3, [r2, #4]
   12864:	ldr	r2, [r4, #68]	; 0x44
   12868:	cmp	r2, #0
   1286c:	addne	r0, r2, r1, lsl #2
   12870:	streq	r3, [r5, #4]
   12874:	strne	r3, [r0, #4]
   12878:	ldr	r0, [r3]
   1287c:	cmn	r0, #1
   12880:	mov	r0, r4
   12884:	streq	r2, [r3, #12]
   12888:	strbeq	r1, [r3, #16]
   1288c:	strne	r2, [r3, #68]	; 0x44
   12890:	strbne	r1, [r3, #72]	; 0x48
   12894:	bl	12024 <rb_free>
   12898:	ldr	r3, [r5, #8]
   1289c:	sub	r3, r3, #1
   128a0:	cmp	r3, #0
   128a4:	str	r3, [r5, #8]
   128a8:	streq	r3, [r5, #4]
   128ac:	pop	{r4, r5, r6, r7, r8, pc}

000128b0 <rb_radixtree_delete>:
   128b0:	push	{r4, r5, r6, lr}
   128b4:	mov	r2, #0
   128b8:	mov	r5, r0
   128bc:	bl	4b48 <rb_radixtree_elem_find@plt>
   128c0:	cmp	r0, #0
   128c4:	popeq	{r4, r5, r6, pc}
   128c8:	mov	r1, r0
   128cc:	ldr	r4, [r0, #4]
   128d0:	mov	r0, r5
   128d4:	bl	4380 <rb_radixtree_elem_delete@plt>
   128d8:	mov	r0, r4
   128dc:	pop	{r4, r5, r6, pc}

000128e0 <rb_radixtree_destroy>:
   128e0:	push	{r4, r5, r6, r7, r8, r9, lr}
   128e4:	sub	sp, sp, #44	; 0x2c
   128e8:	mov	r8, r1
   128ec:	mov	r5, sp
   128f0:	mov	r4, r0
   128f4:	mov	r1, r5
   128f8:	mov	r9, r2
   128fc:	ldr	r7, [pc, #172]	; 129b0 <rb_radixtree_destroy+0xd0>
   12900:	add	r7, pc, r7
   12904:	bl	43e0 <rb_radixtree_foreach_start@plt>
   12908:	mov	r1, r5
   1290c:	mov	r0, r4
   12910:	bl	477c <rb_radixtree_foreach_cur@plt>
   12914:	cmp	r0, #0
   12918:	bne	12978 <rb_radixtree_destroy+0x98>
   1291c:	ldr	r3, [pc, #144]	; 129b4 <rb_radixtree_destroy+0xd4>
   12920:	ldr	r0, [r4, #12]
   12924:	ldr	r2, [r4, #24]
   12928:	ldr	r3, [r7, r3]
   1292c:	ldr	r1, [r4, #20]
   12930:	cmp	r2, #0
   12934:	strne	r1, [r2, #4]
   12938:	streq	r1, [r3, #4]
   1293c:	ldr	r1, [r4, #20]
   12940:	cmp	r1, #0
   12944:	strne	r2, [r1, #8]
   12948:	streq	r2, [r3]
   1294c:	mov	r2, #0
   12950:	str	r2, [r4, #20]
   12954:	str	r2, [r4, #24]
   12958:	ldr	r2, [r3, #8]
   1295c:	sub	r2, r2, #1
   12960:	str	r2, [r3, #8]
   12964:	bl	12024 <rb_free>
   12968:	mov	r0, r4
   1296c:	bl	12024 <rb_free>
   12970:	add	sp, sp, #44	; 0x2c
   12974:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12978:	cmp	r8, #0
   1297c:	ldr	r6, [sp, #8]
   12980:	beq	12994 <rb_radixtree_destroy+0xb4>
   12984:	mov	r2, r9
   12988:	ldr	r1, [r6, #4]
   1298c:	ldr	r0, [r6, #8]
   12990:	blx	r8
   12994:	mov	r0, r4
   12998:	ldr	r1, [r6, #8]
   1299c:	bl	4c98 <rb_radixtree_delete@plt>
   129a0:	mov	r1, r5
   129a4:	mov	r0, r4
   129a8:	bl	441c <rb_radixtree_foreach_next@plt>
   129ac:	b	12908 <rb_radixtree_destroy+0x28>
   129b0:	.word	0x000126f8
   129b4:	.word	0x000003f0

000129b8 <rb_radixtree_retrieve>:
   129b8:	push	{r4, lr}
   129bc:	mov	r2, #0
   129c0:	bl	4b48 <rb_radixtree_elem_find@plt>
   129c4:	cmp	r0, #0
   129c8:	ldrne	r0, [r0, #4]
   129cc:	pop	{r4, pc}

000129d0 <rb_radixtree_elem_get_key>:
   129d0:	ldr	r0, [r0, #8]
   129d4:	bx	lr

000129d8 <rb_radixtree_elem_set_data>:
   129d8:	str	r1, [r0, #4]
   129dc:	bx	lr

000129e0 <rb_radixtree_elem_get_data>:
   129e0:	ldr	r0, [r0, #4]
   129e4:	bx	lr

000129e8 <rb_radixtree_size>:
   129e8:	ldr	r0, [r0, #8]
   129ec:	bx	lr

000129f0 <rb_radixtree_stats>:
   129f0:	ldr	r3, [r0, #8]
   129f4:	push	{r4, r5, r6, r7, lr}
   129f8:	mov	r6, r1
   129fc:	sub	sp, sp, #292	; 0x124
   12a00:	mov	r1, #0
   12a04:	mov	r4, r0
   12a08:	mov	r7, r2
   12a0c:	add	r5, sp, #32
   12a10:	str	r1, [sp, #28]
   12a14:	cmp	r3, r1
   12a18:	beq	12a7c <rb_radixtree_stats+0x8c>
   12a1c:	add	r2, sp, #28
   12a20:	ldr	r0, [r0, #4]
   12a24:	bl	11f78 <stats_recurse>
   12a28:	ldr	r3, [r4, #8]
   12a2c:	ldr	r2, [sp, #28]
   12a30:	str	r3, [sp, #4]
   12a34:	str	r0, [sp, #8]
   12a38:	str	r2, [sp, #16]
   12a3c:	udiv	r2, r0, r3
   12a40:	ldr	r3, [pc, #104]	; 12ab0 <rb_radixtree_stats+0xc0>
   12a44:	add	r3, pc, r3
   12a48:	str	r3, [sp]
   12a4c:	str	r2, [sp, #12]
   12a50:	ldr	r2, [pc, #92]	; 12ab4 <rb_radixtree_stats+0xc4>
   12a54:	ldr	r3, [r4, #12]
   12a58:	add	r2, pc, r2
   12a5c:	mov	r1, #256	; 0x100
   12a60:	mov	r0, r5
   12a64:	bl	4b84 <snprintf@plt>
   12a68:	mov	r1, r7
   12a6c:	mov	r0, r5
   12a70:	blx	r6
   12a74:	add	sp, sp, #292	; 0x124
   12a78:	pop	{r4, r5, r6, r7, pc}
   12a7c:	ldr	r3, [pc, #52]	; 12ab8 <rb_radixtree_stats+0xc8>
   12a80:	ldr	r2, [pc, #52]	; 12abc <rb_radixtree_stats+0xcc>
   12a84:	add	r3, pc, r3
   12a88:	str	r3, [sp, #4]
   12a8c:	add	r2, pc, r2
   12a90:	str	r3, [sp, #8]
   12a94:	str	r3, [sp, #12]
   12a98:	str	r3, [sp, #16]
   12a9c:	ldr	r3, [pc, #28]	; 12ac0 <rb_radixtree_stats+0xd0>
   12aa0:	add	r3, pc, r3
   12aa4:	str	r3, [sp]
   12aa8:	ldr	r3, [r0, #12]
   12aac:	b	12a5c <rb_radixtree_stats+0x6c>
   12ab0:	.word	0x00001b68
   12ab4:	.word	0x00001b07
   12ab8:	.word	0x00000c7a
   12abc:	.word	0x00001afc
   12ac0:	.word	0x00001b0c

00012ac4 <rb_radixtree_stats_walk>:
   12ac4:	ldr	r3, [pc, #56]	; 12b04 <rb_radixtree_stats_walk+0x40>
   12ac8:	push	{r4, r5, r6, lr}
   12acc:	mov	r5, r0
   12ad0:	mov	r6, r1
   12ad4:	ldr	r2, [pc, #44]	; 12b08 <rb_radixtree_stats_walk+0x44>
   12ad8:	add	r3, pc, r3
   12adc:	ldr	r3, [r3, r2]
   12ae0:	ldr	r4, [r3]
   12ae4:	cmp	r4, #0
   12ae8:	popeq	{r4, r5, r6, pc}
   12aec:	mov	r2, r6
   12af0:	mov	r1, r5
   12af4:	ldr	r0, [r4]
   12af8:	bl	4614 <rb_radixtree_stats@plt>
   12afc:	ldr	r4, [r4, #8]
   12b00:	b	12ae4 <rb_radixtree_stats_walk+0x20>
   12b04:	.word	0x00012520
   12b08:	.word	0x000003f0

00012b0c <__stat>:
   12b0c:	mov	r2, r1
   12b10:	mov	r1, r0
   12b14:	mov	r0, #3
   12b18:	b	4464 <__xstat@plt>

00012b1c <__fstat>:
   12b1c:	mov	r2, r1
   12b20:	mov	r1, r0
   12b24:	mov	r0, #3
   12b28:	b	4b30 <__fxstat@plt>

Disassembly of section .fini:

00012b2c <_fini>:
   12b2c:	push	{r3, lr}
   12b30:	pop	{r3, pc}
