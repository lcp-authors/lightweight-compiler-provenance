
../repos/eddieantonio-ocreval-3ab279a/wordfreq/wordfreq:     file format elf32-littlearm


Disassembly of section .init:

00010b68 <.init>:
   10b68:	push	{r3, lr}
   10b6c:	bl	10d9c <__assert_fail@plt+0x4c>
   10b70:	pop	{r3, pc}

Disassembly of section .plt:

00010b74 <calloc@plt-0x14>:
   10b74:	push	{lr}		; (str lr, [sp, #-4]!)
   10b78:	ldr	lr, [pc, #4]	; 10b84 <calloc@plt-0x4>
   10b7c:	add	lr, pc, lr
   10b80:	ldr	pc, [lr, #8]!
   10b84:	andeq	r7, r1, ip, ror r4

00010b88 <calloc@plt>:
   10b88:	add	ip, pc, #0, 12
   10b8c:	add	ip, ip, #94208	; 0x17000
   10b90:	ldr	pc, [ip, #1148]!	; 0x47c

00010b94 <strcmp@plt>:
   10b94:	add	ip, pc, #0, 12
   10b98:	add	ip, ip, #94208	; 0x17000
   10b9c:	ldr	pc, [ip, #1140]!	; 0x474

00010ba0 <strtol@plt>:
   10ba0:	add	ip, pc, #0, 12
   10ba4:	add	ip, ip, #94208	; 0x17000
   10ba8:	ldr	pc, [ip, #1132]!	; 0x46c

00010bac <printf@plt>:
   10bac:	add	ip, pc, #0, 12
   10bb0:	add	ip, ip, #94208	; 0x17000
   10bb4:	ldr	pc, [ip, #1124]!	; 0x464

00010bb8 <fopen@plt>:
   10bb8:	add	ip, pc, #0, 12
   10bbc:	add	ip, ip, #94208	; 0x17000
   10bc0:	ldr	pc, [ip, #1116]!	; 0x45c

00010bc4 <free@plt>:
   10bc4:	add	ip, pc, #0, 12
   10bc8:	add	ip, ip, #94208	; 0x17000
   10bcc:	ldr	pc, [ip, #1108]!	; 0x454

00010bd0 <utf8proc_get_property@plt>:
   10bd0:	add	ip, pc, #0, 12
   10bd4:	add	ip, ip, #94208	; 0x17000
   10bd8:	ldr	pc, [ip, #1100]!	; 0x44c

00010bdc <fgets@plt>:
   10bdc:	add	ip, pc, #0, 12
   10be0:	add	ip, ip, #94208	; 0x17000
   10be4:	ldr	pc, [ip, #1092]!	; 0x444

00010be8 <utf8proc_encode_char@plt>:
   10be8:	add	ip, pc, #0, 12
   10bec:	add	ip, ip, #94208	; 0x17000
   10bf0:	ldr	pc, [ip, #1084]!	; 0x43c

00010bf4 <strdup@plt>:
   10bf4:	add	ip, pc, #0, 12
   10bf8:	add	ip, ip, #94208	; 0x17000
   10bfc:	ldr	pc, [ip, #1076]!	; 0x434

00010c00 <rewind@plt>:
   10c00:	add	ip, pc, #0, 12
   10c04:	add	ip, ip, #94208	; 0x17000
   10c08:	ldr	pc, [ip, #1068]!	; 0x42c

00010c0c <unlink@plt>:
   10c0c:	add	ip, pc, #0, 12
   10c10:	add	ip, ip, #94208	; 0x17000
   10c14:	ldr	pc, [ip, #1060]!	; 0x424

00010c18 <utf8proc_tolower@plt>:
   10c18:	add	ip, pc, #0, 12
   10c1c:	add	ip, ip, #94208	; 0x17000
   10c20:	ldr	pc, [ip, #1052]!	; 0x41c

00010c24 <__xstat@plt>:
   10c24:	add	ip, pc, #0, 12
   10c28:	add	ip, ip, #94208	; 0x17000
   10c2c:	ldr	pc, [ip, #1044]!	; 0x414

00010c30 <fwrite@plt>:
   10c30:	add	ip, pc, #0, 12
   10c34:	add	ip, ip, #94208	; 0x17000
   10c38:	ldr	pc, [ip, #1036]!	; 0x40c

00010c3c <fread@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #94208	; 0x17000
   10c44:	ldr	pc, [ip, #1028]!	; 0x404

00010c48 <utf8proc_iterate@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #94208	; 0x17000
   10c50:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c54 <puts@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #94208	; 0x17000
   10c5c:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c60 <malloc@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #94208	; 0x17000
   10c68:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c6c <__libc_start_main@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #94208	; 0x17000
   10c74:	ldr	pc, [ip, #996]!	; 0x3e4

00010c78 <__sysv_signal@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #94208	; 0x17000
   10c80:	ldr	pc, [ip, #988]!	; 0x3dc

00010c84 <__gmon_start__@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #94208	; 0x17000
   10c8c:	ldr	pc, [ip, #980]!	; 0x3d4

00010c90 <getpid@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #94208	; 0x17000
   10c98:	ldr	pc, [ip, #972]!	; 0x3cc

00010c9c <exit@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #94208	; 0x17000
   10ca4:	ldr	pc, [ip, #964]!	; 0x3c4

00010ca8 <bcmp@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #94208	; 0x17000
   10cb0:	ldr	pc, [ip, #956]!	; 0x3bc

00010cb4 <utf8proc_category@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #94208	; 0x17000
   10cbc:	ldr	pc, [ip, #948]!	; 0x3b4

00010cc0 <strlen@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #94208	; 0x17000
   10cc8:	ldr	pc, [ip, #940]!	; 0x3ac

00010ccc <fprintf@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #94208	; 0x17000
   10cd4:	ldr	pc, [ip, #932]!	; 0x3a4

00010cd8 <__isoc99_sscanf@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #94208	; 0x17000
   10ce0:	ldr	pc, [ip, #924]!	; 0x39c

00010ce4 <fclose@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #94208	; 0x17000
   10cec:	ldr	pc, [ip, #916]!	; 0x394

00010cf0 <utf8proc_NFC@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #94208	; 0x17000
   10cf8:	ldr	pc, [ip, #908]!	; 0x38c

00010cfc <fputc@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #94208	; 0x17000
   10d04:	ldr	pc, [ip, #900]!	; 0x384

00010d08 <sprintf@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #94208	; 0x17000
   10d10:	ldr	pc, [ip, #892]!	; 0x37c

00010d14 <utf8proc_errmsg@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #94208	; 0x17000
   10d1c:	ldr	pc, [ip, #884]!	; 0x374

00010d20 <fputs@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #94208	; 0x17000
   10d28:	ldr	pc, [ip, #876]!	; 0x36c

00010d2c <strncmp@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #94208	; 0x17000
   10d34:	ldr	pc, [ip, #868]!	; 0x364

00010d38 <abort@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #94208	; 0x17000
   10d40:	ldr	pc, [ip, #860]!	; 0x35c

00010d44 <getc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #94208	; 0x17000
   10d4c:	ldr	pc, [ip, #852]!	; 0x354

00010d50 <__assert_fail@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #94208	; 0x17000
   10d58:	ldr	pc, [ip, #844]!	; 0x34c

Disassembly of section .text:

00010d60 <error@@Base-0x2498>:
   10d60:	mov	fp, #0
   10d64:	mov	lr, #0
   10d68:	pop	{r1}		; (ldr r1, [sp], #4)
   10d6c:	mov	r2, sp
   10d70:	push	{r2}		; (str r2, [sp, #-4]!)
   10d74:	push	{r0}		; (str r0, [sp, #-4]!)
   10d78:	ldr	ip, [pc, #16]	; 10d90 <__assert_fail@plt+0x40>
   10d7c:	push	{ip}		; (str ip, [sp, #-4]!)
   10d80:	ldr	r0, [pc, #12]	; 10d94 <__assert_fail@plt+0x44>
   10d84:	ldr	r3, [pc, #12]	; 10d98 <__assert_fail@plt+0x48>
   10d88:	bl	10c6c <__libc_start_main@plt>
   10d8c:	bl	10d38 <abort@plt>
   10d90:	andeq	r3, r1, ip, asr fp
   10d94:	andeq	r1, r1, r0, lsl #2
   10d98:	strdeq	r3, [r1], -ip
   10d9c:	ldr	r3, [pc, #20]	; 10db8 <__assert_fail@plt+0x68>
   10da0:	ldr	r2, [pc, #20]	; 10dbc <__assert_fail@plt+0x6c>
   10da4:	add	r3, pc, r3
   10da8:	ldr	r2, [r3, r2]
   10dac:	cmp	r2, #0
   10db0:	bxeq	lr
   10db4:	b	10c84 <__gmon_start__@plt>
   10db8:	andeq	r7, r1, r4, asr r2
   10dbc:	andeq	r0, r0, r8, lsr #1
   10dc0:	ldr	r0, [pc, #24]	; 10de0 <__assert_fail@plt+0x90>
   10dc4:	ldr	r3, [pc, #24]	; 10de4 <__assert_fail@plt+0x94>
   10dc8:	cmp	r3, r0
   10dcc:	bxeq	lr
   10dd0:	ldr	r3, [pc, #16]	; 10de8 <__assert_fail@plt+0x98>
   10dd4:	cmp	r3, #0
   10dd8:	bxeq	lr
   10ddc:	bx	r3
   10de0:	andeq	r8, r2, r8, asr #1
   10de4:	andeq	r8, r2, r8, asr #1
   10de8:	andeq	r0, r0, r0
   10dec:	ldr	r0, [pc, #36]	; 10e18 <__assert_fail@plt+0xc8>
   10df0:	ldr	r1, [pc, #36]	; 10e1c <__assert_fail@plt+0xcc>
   10df4:	sub	r1, r1, r0
   10df8:	asr	r1, r1, #2
   10dfc:	add	r1, r1, r1, lsr #31
   10e00:	asrs	r1, r1, #1
   10e04:	bxeq	lr
   10e08:	ldr	r3, [pc, #16]	; 10e20 <__assert_fail@plt+0xd0>
   10e0c:	cmp	r3, #0
   10e10:	bxeq	lr
   10e14:	bx	r3
   10e18:	andeq	r8, r2, r8, asr #1
   10e1c:	andeq	r8, r2, r8, asr #1
   10e20:	andeq	r0, r0, r0
   10e24:	push	{r4, lr}
   10e28:	ldr	r4, [pc, #24]	; 10e48 <__assert_fail@plt+0xf8>
   10e2c:	ldrb	r3, [r4]
   10e30:	cmp	r3, #0
   10e34:	popne	{r4, pc}
   10e38:	bl	10dc0 <__assert_fail@plt+0x70>
   10e3c:	mov	r3, #1
   10e40:	strb	r3, [r4]
   10e44:	pop	{r4, pc}
   10e48:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   10e4c:	b	10dec <__assert_fail@plt+0x9c>
   10e50:	push	{r4, r5, fp, lr}
   10e54:	add	fp, sp, #8
   10e58:	movw	r4, #33100	; 0x814c
   10e5c:	movw	r2, #32948	; 0x80b4
   10e60:	mov	r1, r0
   10e64:	movt	r4, #2
   10e68:	movt	r2, #2
   10e6c:	mov	r0, r4
   10e70:	bl	13408 <error@@Base+0x210>
   10e74:	movw	r5, #33116	; 0x815c
   10e78:	mov	r1, r4
   10e7c:	movt	r5, #2
   10e80:	mov	r0, r5
   10e84:	bl	12458 <__assert_fail@plt+0x1708>
   10e88:	ldr	r5, [r5]
   10e8c:	cmp	r5, #0
   10e90:	beq	10ebc <__assert_fail@plt+0x16c>
   10e94:	movw	r4, #33132	; 0x816c
   10e98:	movt	r4, #2
   10e9c:	ldr	r1, [r5, #8]
   10ea0:	mov	r0, r4
   10ea4:	mov	r2, #1
   10ea8:	mov	r3, #0
   10eac:	bl	115fc <__assert_fail@plt+0x8ac>
   10eb0:	ldr	r5, [r5, #4]
   10eb4:	cmp	r5, #0
   10eb8:	bne	10e9c <__assert_fail@plt+0x14c>
   10ebc:	movw	r0, #33100	; 0x814c
   10ec0:	movw	r1, #3012	; 0xbc4
   10ec4:	movt	r0, #2
   10ec8:	movt	r1, #1
   10ecc:	bl	11410 <__assert_fail@plt+0x6c0>
   10ed0:	movw	r0, #33116	; 0x815c
   10ed4:	movw	r1, #11424	; 0x2ca0
   10ed8:	movt	r0, #2
   10edc:	movt	r1, #1
   10ee0:	pop	{r4, r5, fp, lr}
   10ee4:	b	11410 <__assert_fail@plt+0x6c0>
   10ee8:	ldr	r1, [r1, #8]
   10eec:	ldr	r0, [r0, #8]
   10ef0:	b	12ce0 <__assert_fail@plt+0x1f90>
   10ef4:	ldr	r2, [r1, #12]
   10ef8:	ldr	r3, [r0, #12]
   10efc:	cmp	r2, r3
   10f00:	subne	r0, r2, r3
   10f04:	bxne	lr
   10f08:	ldr	r1, [r1, #8]
   10f0c:	ldr	r0, [r0, #8]
   10f10:	b	12ce0 <__assert_fail@plt+0x1f90>
   10f14:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10f18:	add	fp, sp, #24
   10f1c:	movw	r0, #15297	; 0x3bc1
   10f20:	movt	r0, #1
   10f24:	bl	10c54 <puts@plt>
   10f28:	movw	r7, #33132	; 0x816c
   10f2c:	movw	r8, #8052	; 0x1f74
   10f30:	movt	r7, #2
   10f34:	ldr	r0, [r7, r8]
   10f38:	cmp	r0, #1
   10f3c:	blt	10f90 <__assert_fail@plt+0x240>
   10f40:	movw	r9, #8048	; 0x1f70
   10f44:	movw	r5, #15212	; 0x3b6c
   10f48:	mov	r4, #0
   10f4c:	mov	r6, #0
   10f50:	ldr	r0, [r7, r9]
   10f54:	movt	r5, #1
   10f58:	ldr	r0, [r0, r6, lsl #2]
   10f5c:	ldr	r2, [r0, #8]
   10f60:	ldr	r1, [r0, #12]
   10f64:	mov	r0, r5
   10f68:	bl	10bac <printf@plt>
   10f6c:	ldr	r0, [r7, r9]
   10f70:	ldr	r1, [r7, r8]
   10f74:	ldr	r2, [r0, r6, lsl #2]
   10f78:	add	r6, r6, #1
   10f7c:	cmp	r6, r1
   10f80:	ldr	r2, [r2, #12]
   10f84:	add	r4, r2, r4
   10f88:	blt	10f58 <__assert_fail@plt+0x208>
   10f8c:	b	10f94 <__assert_fail@plt+0x244>
   10f90:	mov	r4, #0
   10f94:	movw	r0, #15223	; 0x3b77
   10f98:	mov	r1, r4
   10f9c:	movt	r0, #1
   10fa0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   10fa4:	b	10bac <printf@plt>
   10fa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fac:	add	fp, sp, #28
   10fb0:	sub	sp, sp, #4
   10fb4:	movw	r4, #33132	; 0x816c
   10fb8:	movt	r4, #2
   10fbc:	mov	r0, r4
   10fc0:	bl	12378 <__assert_fail@plt+0x1628>
   10fc4:	movw	r8, #8052	; 0x1f74
   10fc8:	mov	r5, r4
   10fcc:	movw	r2, #3816	; 0xee8
   10fd0:	ldr	r0, [r5, r8]!
   10fd4:	movt	r2, #1
   10fd8:	ldr	r1, [r5, #-4]
   10fdc:	bl	114ac <__assert_fail@plt+0x75c>
   10fe0:	movw	r0, #15297	; 0x3bc1
   10fe4:	movt	r0, #1
   10fe8:	bl	10c54 <puts@plt>
   10fec:	ldr	r0, [r5]
   10ff0:	mov	r5, #0
   10ff4:	mov	r6, #0
   10ff8:	cmp	r0, #1
   10ffc:	blt	1104c <__assert_fail@plt+0x2fc>
   11000:	movw	r9, #8048	; 0x1f70
   11004:	movw	sl, #15212	; 0x3b6c
   11008:	mov	r6, #0
   1100c:	mov	r7, #0
   11010:	ldr	r0, [r4, r9]
   11014:	movt	sl, #1
   11018:	ldr	r0, [r0, r7, lsl #2]
   1101c:	ldr	r2, [r0, #8]
   11020:	ldr	r1, [r0, #12]
   11024:	mov	r0, sl
   11028:	bl	10bac <printf@plt>
   1102c:	ldr	r0, [r4, r9]
   11030:	ldr	r1, [r4, r8]
   11034:	ldr	r2, [r0, r7, lsl #2]
   11038:	add	r7, r7, #1
   1103c:	cmp	r7, r1
   11040:	ldr	r2, [r2, #12]
   11044:	add	r6, r2, r6
   11048:	blt	11018 <__assert_fail@plt+0x2c8>
   1104c:	movw	r0, #15223	; 0x3b77
   11050:	mov	r1, r6
   11054:	movt	r0, #1
   11058:	bl	10bac <printf@plt>
   1105c:	movw	r0, #28875	; 0x70cb
   11060:	movt	r0, #1
   11064:	bl	10c54 <puts@plt>
   11068:	mov	r6, r4
   1106c:	movw	r2, #3828	; 0xef4
   11070:	ldr	r0, [r6, r8]!
   11074:	movt	r2, #1
   11078:	ldr	r1, [r6, #-4]
   1107c:	bl	114ac <__assert_fail@plt+0x75c>
   11080:	movw	r0, #15297	; 0x3bc1
   11084:	movt	r0, #1
   11088:	bl	10c54 <puts@plt>
   1108c:	ldr	r0, [r6]
   11090:	cmp	r0, #1
   11094:	blt	110e8 <__assert_fail@plt+0x398>
   11098:	movw	r8, #8048	; 0x1f70
   1109c:	movw	r9, #15212	; 0x3b6c
   110a0:	mov	r5, #0
   110a4:	movw	r7, #8052	; 0x1f74
   110a8:	mov	r6, #0
   110ac:	ldr	r0, [r4, r8]
   110b0:	movt	r9, #1
   110b4:	ldr	r0, [r0, r6, lsl #2]
   110b8:	ldr	r2, [r0, #8]
   110bc:	ldr	r1, [r0, #12]
   110c0:	mov	r0, r9
   110c4:	bl	10bac <printf@plt>
   110c8:	ldr	r0, [r4, r8]
   110cc:	ldr	r1, [r4, r7]
   110d0:	ldr	r2, [r0, r6, lsl #2]
   110d4:	add	r6, r6, #1
   110d8:	cmp	r6, r1
   110dc:	ldr	r2, [r2, #12]
   110e0:	add	r5, r2, r5
   110e4:	blt	110b4 <__assert_fail@plt+0x364>
   110e8:	movw	r0, #15223	; 0x3b77
   110ec:	mov	r1, r5
   110f0:	movt	r0, #1
   110f4:	sub	sp, fp, #28
   110f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110fc:	b	10bac <printf@plt>
   11100:	push	{fp, lr}
   11104:	mov	fp, sp
   11108:	sub	sp, sp, #8
   1110c:	movw	r2, #15237	; 0x3b85
   11110:	str	r0, [sp, #4]
   11114:	add	r0, sp, #4
   11118:	mov	r3, #0
   1111c:	mov	r4, r1
   11120:	movt	r2, #1
   11124:	bl	12ee0 <__assert_fail@plt+0x2190>
   11128:	ldr	r0, [sp, #4]
   1112c:	cmp	r0, #0
   11130:	beq	111dc <__assert_fail@plt+0x48c>
   11134:	cmp	r0, #1
   11138:	blt	111d4 <__assert_fail@plt+0x484>
   1113c:	movw	r5, #33100	; 0x814c
   11140:	movw	r7, #33116	; 0x815c
   11144:	movw	sl, #11424	; 0x2ca0
   11148:	movw	r6, #33132	; 0x816c
   1114c:	mov	r8, #0
   11150:	movt	r5, #2
   11154:	movt	r7, #2
   11158:	movt	sl, #1
   1115c:	movt	r6, #2
   11160:	ldr	r1, [r4, r8, lsl #2]
   11164:	movw	r2, #32948	; 0x80b4
   11168:	mov	r0, r5
   1116c:	movt	r2, #2
   11170:	bl	13408 <error@@Base+0x210>
   11174:	mov	r0, r7
   11178:	mov	r1, r5
   1117c:	bl	12458 <__assert_fail@plt+0x1708>
   11180:	ldr	r9, [r7]
   11184:	b	111a0 <__assert_fail@plt+0x450>
   11188:	ldr	r1, [r9, #8]
   1118c:	mov	r0, r6
   11190:	mov	r2, #1
   11194:	mov	r3, #0
   11198:	bl	115fc <__assert_fail@plt+0x8ac>
   1119c:	ldr	r9, [r9, #4]
   111a0:	cmp	r9, #0
   111a4:	bne	11188 <__assert_fail@plt+0x438>
   111a8:	movw	r1, #3012	; 0xbc4
   111ac:	mov	r0, r5
   111b0:	movt	r1, #1
   111b4:	bl	11410 <__assert_fail@plt+0x6c0>
   111b8:	mov	r0, r7
   111bc:	mov	r1, sl
   111c0:	bl	11410 <__assert_fail@plt+0x6c0>
   111c4:	ldr	r0, [sp, #4]
   111c8:	add	r8, r8, #1
   111cc:	cmp	r8, r0
   111d0:	blt	11160 <__assert_fail@plt+0x410>
   111d4:	bl	10fa8 <__assert_fail@plt+0x258>
   111d8:	bl	131b8 <__assert_fail@plt+0x2468>
   111dc:	movw	r0, #15273	; 0x3ba9
   111e0:	movt	r0, #1
   111e4:	bl	131f8 <error@@Base>
   111e8:	vmov.i32	q8, #0	; 0x00000000
   111ec:	vst1.32	{d16-d17}, [r0]
   111f0:	bx	lr
   111f4:	push	{r4, r5, fp, lr}
   111f8:	add	fp, sp, #8
   111fc:	mov	r4, r0
   11200:	ldr	r0, [r0]
   11204:	mov	r5, #0
   11208:	str	r5, [r1]
   1120c:	cmp	r0, #0
   11210:	str	r0, [r1, #4]
   11214:	str	r1, [r4]
   11218:	addeq	r0, r4, #4
   1121c:	str	r1, [r0]
   11220:	ldr	r0, [r4, #8]
   11224:	cmp	r0, #0
   11228:	beq	11234 <__assert_fail@plt+0x4e4>
   1122c:	bl	10bc4 <free@plt>
   11230:	str	r5, [r4, #8]
   11234:	ldr	r0, [r4, #12]
   11238:	add	r0, r0, #1
   1123c:	str	r0, [r4, #12]
   11240:	pop	{r4, r5, fp, pc}
   11244:	push	{r4, r5, fp, lr}
   11248:	add	fp, sp, #8
   1124c:	mov	r4, r0
   11250:	ldr	r0, [r0, #4]
   11254:	mov	r5, #0
   11258:	mov	r2, r4
   1125c:	cmp	r0, #0
   11260:	stm	r1, {r0, r5}
   11264:	addne	r2, r0, #4
   11268:	str	r1, [r2]
   1126c:	str	r1, [r4, #4]
   11270:	ldr	r0, [r4, #8]
   11274:	cmp	r0, #0
   11278:	beq	11284 <__assert_fail@plt+0x534>
   1127c:	bl	10bc4 <free@plt>
   11280:	str	r5, [r4, #8]
   11284:	ldr	r0, [r4, #12]
   11288:	add	r0, r0, #1
   1128c:	str	r0, [r4, #12]
   11290:	pop	{r4, r5, fp, pc}
   11294:	push	{r4, sl, fp, lr}
   11298:	add	fp, sp, #8
   1129c:	mov	r4, r0
   112a0:	ldr	r0, [r2]
   112a4:	mov	r3, r4
   112a8:	cmp	r0, #0
   112ac:	stm	r1, {r0, r2}
   112b0:	addne	r3, r0, #4
   112b4:	str	r1, [r3]
   112b8:	str	r1, [r2]
   112bc:	ldr	r0, [r4, #8]
   112c0:	cmp	r0, #0
   112c4:	beq	112d4 <__assert_fail@plt+0x584>
   112c8:	bl	10bc4 <free@plt>
   112cc:	mov	r0, #0
   112d0:	str	r0, [r4, #8]
   112d4:	ldr	r0, [r4, #12]
   112d8:	add	r0, r0, #1
   112dc:	str	r0, [r4, #12]
   112e0:	pop	{r4, sl, fp, pc}
   112e4:	push	{r4, sl, fp, lr}
   112e8:	add	fp, sp, #8
   112ec:	mov	r4, r0
   112f0:	mov	r0, r1
   112f4:	cmp	r1, #0
   112f8:	ldr	r3, [r0, #4]!
   112fc:	moveq	r0, r4
   11300:	stm	r2, {r1, r3}
   11304:	str	r2, [r0]
   11308:	cmp	r3, #0
   1130c:	addeq	r3, r4, #4
   11310:	str	r2, [r3]
   11314:	ldr	r0, [r4, #8]
   11318:	cmp	r0, #0
   1131c:	beq	1132c <__assert_fail@plt+0x5dc>
   11320:	bl	10bc4 <free@plt>
   11324:	mov	r0, #0
   11328:	str	r0, [r4, #8]
   1132c:	ldr	r0, [r4, #12]
   11330:	add	r0, r0, #1
   11334:	str	r0, [r4, #12]
   11338:	pop	{r4, sl, fp, pc}
   1133c:	push	{r4, r5, fp, lr}
   11340:	add	fp, sp, #8
   11344:	mov	r4, r0
   11348:	ldm	r1, {r0, r2}
   1134c:	cmp	r0, #0
   11350:	beq	11360 <__assert_fail@plt+0x610>
   11354:	str	r2, [r0, #4]
   11358:	ldr	r2, [r1, #4]
   1135c:	b	11364 <__assert_fail@plt+0x614>
   11360:	str	r2, [r4]
   11364:	cmp	r2, #0
   11368:	mov	r5, #0
   1136c:	addeq	r2, r4, #4
   11370:	str	r0, [r2]
   11374:	str	r5, [r1]
   11378:	str	r5, [r1, #4]
   1137c:	ldr	r0, [r4, #8]
   11380:	cmp	r0, #0
   11384:	beq	11390 <__assert_fail@plt+0x640>
   11388:	bl	10bc4 <free@plt>
   1138c:	str	r5, [r4, #8]
   11390:	ldr	r0, [r4, #12]
   11394:	sub	r0, r0, #1
   11398:	str	r0, [r4, #12]
   1139c:	pop	{r4, r5, fp, pc}
   113a0:	push	{r4, sl, fp, lr}
   113a4:	add	fp, sp, #8
   113a8:	mov	r4, r0
   113ac:	ldr	r0, [r0, #8]
   113b0:	cmp	r0, #0
   113b4:	beq	113bc <__assert_fail@plt+0x66c>
   113b8:	pop	{r4, sl, fp, pc}
   113bc:	ldr	r0, [r4, #12]
   113c0:	cmp	r0, #0
   113c4:	beq	113b8 <__assert_fail@plt+0x668>
   113c8:	mov	r1, #4
   113cc:	bl	12cc0 <__assert_fail@plt+0x1f70>
   113d0:	str	r0, [r4, #8]
   113d4:	ldr	r1, [r4]
   113d8:	cmp	r1, #0
   113dc:	beq	113b8 <__assert_fail@plt+0x668>
   113e0:	str	r1, [r0]
   113e4:	ldr	r0, [r1, #4]
   113e8:	cmp	r0, #0
   113ec:	popeq	{r4, sl, fp, pc}
   113f0:	mov	r1, #4
   113f4:	ldr	r2, [r4, #8]
   113f8:	str	r0, [r2, r1]
   113fc:	add	r1, r1, #4
   11400:	ldr	r0, [r0, #4]
   11404:	cmp	r0, #0
   11408:	bne	113f4 <__assert_fail@plt+0x6a4>
   1140c:	b	113b8 <__assert_fail@plt+0x668>
   11410:	push	{r4, r5, r6, r7, fp, lr}
   11414:	add	fp, sp, #16
   11418:	ldr	r6, [r0]
   1141c:	cmp	r6, #0
   11420:	beq	114a8 <__assert_fail@plt+0x758>
   11424:	mov	r4, r1
   11428:	mov	r5, r0
   1142c:	mov	r7, #0
   11430:	ldm	r6, {r0, r1}
   11434:	cmp	r0, #0
   11438:	bne	1146c <__assert_fail@plt+0x71c>
   1143c:	b	11478 <__assert_fail@plt+0x728>
   11440:	ldr	r0, [r5, #12]
   11444:	sub	r0, r0, #1
   11448:	str	r0, [r5, #12]
   1144c:	mov	r0, r6
   11450:	blx	r4
   11454:	ldr	r6, [r5]
   11458:	cmp	r6, #0
   1145c:	beq	114a8 <__assert_fail@plt+0x758>
   11460:	ldm	r6, {r0, r1}
   11464:	cmp	r0, #0
   11468:	beq	11478 <__assert_fail@plt+0x728>
   1146c:	str	r1, [r0, #4]
   11470:	ldr	r1, [r6, #4]
   11474:	b	1147c <__assert_fail@plt+0x72c>
   11478:	str	r1, [r5]
   1147c:	cmp	r1, #0
   11480:	addeq	r1, r5, #4
   11484:	str	r0, [r1]
   11488:	str	r7, [r6]
   1148c:	str	r7, [r6, #4]
   11490:	ldr	r0, [r5, #8]
   11494:	cmp	r0, #0
   11498:	beq	11440 <__assert_fail@plt+0x6f0>
   1149c:	bl	10bc4 <free@plt>
   114a0:	str	r7, [r5, #8]
   114a4:	b	11440 <__assert_fail@plt+0x6f0>
   114a8:	pop	{r4, r5, r6, r7, fp, pc}
   114ac:	cmp	r0, #2
   114b0:	bxlt	lr
   114b4:	movw	r3, #32988	; 0x80dc
   114b8:	movt	r3, #2
   114bc:	stm	r3, {r1, r2}
   114c0:	sub	r1, r0, #1
   114c4:	mov	r0, #0
   114c8:	b	114cc <__assert_fail@plt+0x77c>
   114cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   114d0:	add	fp, sp, #24
   114d4:	movw	r7, #32988	; 0x80dc
   114d8:	mov	r8, r1
   114dc:	mov	r9, r0
   114e0:	movt	r7, #2
   114e4:	b	11510 <__assert_fail@plt+0x7c0>
   114e8:	mov	r4, r5
   114ec:	ldr	r0, [r7]
   114f0:	sub	r1, r5, #1
   114f4:	str	r6, [r0, r5, lsl #2]
   114f8:	cmp	r1, r9
   114fc:	movgt	r0, r9
   11500:	blgt	114cc <__assert_fail@plt+0x77c>
   11504:	add	r9, r4, #1
   11508:	cmp	r9, r8
   1150c:	bge	115e0 <__assert_fail@plt+0x890>
   11510:	ldr	r0, [r7]
   11514:	cmp	r9, r8
   11518:	mov	r5, r8
   1151c:	mov	r4, r9
   11520:	ldr	r6, [r0, r9, lsl #2]
   11524:	bge	114f0 <__assert_fail@plt+0x7a0>
   11528:	mov	r4, r9
   1152c:	mov	r5, r8
   11530:	cmp	r4, r5
   11534:	blt	1154c <__assert_fail@plt+0x7fc>
   11538:	b	11570 <__assert_fail@plt+0x820>
   1153c:	cmp	r4, r5
   11540:	bge	114ec <__assert_fail@plt+0x79c>
   11544:	cmp	r4, r5
   11548:	bge	11570 <__assert_fail@plt+0x820>
   1154c:	ldm	r7, {r0, r2}
   11550:	ldr	r1, [r0, r5, lsl #2]
   11554:	mov	r0, r6
   11558:	blx	r2
   1155c:	cmn	r0, #1
   11560:	bgt	11570 <__assert_fail@plt+0x820>
   11564:	sub	r5, r5, #1
   11568:	cmp	r4, r5
   1156c:	blt	1154c <__assert_fail@plt+0x7fc>
   11570:	cmp	r4, r5
   11574:	bne	11584 <__assert_fail@plt+0x834>
   11578:	cmp	r4, r5
   1157c:	blt	1159c <__assert_fail@plt+0x84c>
   11580:	b	115c4 <__assert_fail@plt+0x874>
   11584:	ldr	r0, [r7]
   11588:	ldr	r1, [r0, r5, lsl #2]
   1158c:	str	r1, [r0, r4, lsl #2]
   11590:	add	r4, r4, #1
   11594:	cmp	r4, r5
   11598:	bge	115c4 <__assert_fail@plt+0x874>
   1159c:	ldm	r7, {r0, r2}
   115a0:	ldr	r1, [r0, r4, lsl #2]
   115a4:	mov	r0, r6
   115a8:	blx	r2
   115ac:	cmp	r0, #1
   115b0:	blt	115c4 <__assert_fail@plt+0x874>
   115b4:	add	r4, r4, #1
   115b8:	cmp	r5, r4
   115bc:	bne	1159c <__assert_fail@plt+0x84c>
   115c0:	b	114e8 <__assert_fail@plt+0x798>
   115c4:	cmp	r4, r5
   115c8:	beq	1153c <__assert_fail@plt+0x7ec>
   115cc:	ldr	r0, [r7]
   115d0:	ldr	r1, [r0, r4, lsl #2]
   115d4:	str	r1, [r0, r5, lsl #2]
   115d8:	sub	r5, r5, #1
   115dc:	b	1153c <__assert_fail@plt+0x7ec>
   115e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   115e4:	andeq	r0, r0, r0
   115e8:	ldm	r0, {r3, ip}
   115ec:	add	r2, ip, r2
   115f0:	add	r1, r3, r1
   115f4:	stm	r0, {r1, r2}
   115f8:	bx	lr
   115fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11600:	add	fp, sp, #24
   11604:	mov	r8, r3
   11608:	mov	r5, r2
   1160c:	mov	r4, r1
   11610:	mov	r6, r0
   11614:	bl	121d8 <__assert_fail@plt+0x1488>
   11618:	mov	r7, r0
   1161c:	cmp	r0, #0
   11620:	bne	1164c <__assert_fail@plt+0x8fc>
   11624:	mov	r0, #1
   11628:	mov	r1, #20
   1162c:	bl	12cc0 <__assert_fail@plt+0x1f70>
   11630:	mov	r7, r0
   11634:	mov	r0, r4
   11638:	bl	10bf4 <strdup@plt>
   1163c:	str	r0, [r7, #8]
   11640:	mov	r0, r6
   11644:	mov	r1, r7
   11648:	bl	12268 <__assert_fail@plt+0x1518>
   1164c:	ldr	r0, [r7, #12]
   11650:	ldr	r1, [r7, #16]
   11654:	add	r0, r0, r5
   11658:	add	r1, r1, r8
   1165c:	str	r0, [r7, #12]
   11660:	str	r1, [r7, #16]
   11664:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11668:	push	{r4, r5, r6, r7, fp, lr}
   1166c:	add	fp, sp, #16
   11670:	sub	sp, sp, #8
   11674:	mov	r6, r1
   11678:	movw	r1, #29161	; 0x71e9
   1167c:	mov	r5, r0
   11680:	movt	r1, #1
   11684:	mov	r0, r6
   11688:	bl	12d64 <__assert_fail@plt+0x2014>
   1168c:	mov	r4, r0
   11690:	movw	r0, #32996	; 0x80e4
   11694:	mov	r1, #99	; 0x63
   11698:	movt	r0, #2
   1169c:	mov	r2, r4
   116a0:	bl	10bdc <fgets@plt>
   116a4:	cmp	r0, #0
   116a8:	beq	11848 <__assert_fail@plt+0xaf8>
   116ac:	movw	r0, #32996	; 0x80e4
   116b0:	movw	r1, #15306	; 0x3bca
   116b4:	mov	r2, #45	; 0x2d
   116b8:	movt	r0, #2
   116bc:	movt	r1, #1
   116c0:	bl	10ca8 <bcmp@plt>
   116c4:	cmp	r0, #0
   116c8:	bne	11848 <__assert_fail@plt+0xaf8>
   116cc:	movw	r0, #32996	; 0x80e4
   116d0:	mov	r1, #99	; 0x63
   116d4:	mov	r2, r4
   116d8:	movt	r0, #2
   116dc:	bl	10bdc <fgets@plt>
   116e0:	cmp	r0, #0
   116e4:	beq	11848 <__assert_fail@plt+0xaf8>
   116e8:	movw	r0, #32996	; 0x80e4
   116ec:	movw	r1, #29091	; 0x71a3
   116f0:	mov	r2, #48	; 0x30
   116f4:	movt	r0, #2
   116f8:	movt	r1, #1
   116fc:	bl	10ca8 <bcmp@plt>
   11700:	cmp	r0, #0
   11704:	bne	11848 <__assert_fail@plt+0xaf8>
   11708:	movw	r0, #32996	; 0x80e4
   1170c:	mov	r1, #99	; 0x63
   11710:	mov	r2, r4
   11714:	movt	r0, #2
   11718:	bl	10bdc <fgets@plt>
   1171c:	cmp	r0, #0
   11720:	beq	11848 <__assert_fail@plt+0xaf8>
   11724:	movw	r0, #32996	; 0x80e4
   11728:	movw	r1, #15479	; 0x3c77
   1172c:	add	r2, sp, #4
   11730:	movt	r0, #2
   11734:	movt	r1, #1
   11738:	bl	10cd8 <__isoc99_sscanf@plt>
   1173c:	cmp	r0, #1
   11740:	bne	11848 <__assert_fail@plt+0xaf8>
   11744:	movw	r0, #32996	; 0x80e4
   11748:	mov	r1, #99	; 0x63
   1174c:	mov	r2, r4
   11750:	movt	r0, #2
   11754:	bl	10bdc <fgets@plt>
   11758:	cmp	r0, #0
   1175c:	beq	11848 <__assert_fail@plt+0xaf8>
   11760:	movw	r0, #32996	; 0x80e4
   11764:	movw	r1, #15479	; 0x3c77
   11768:	mov	r2, sp
   1176c:	movt	r0, #2
   11770:	movt	r1, #1
   11774:	bl	10cd8 <__isoc99_sscanf@plt>
   11778:	cmp	r0, #1
   1177c:	bne	11848 <__assert_fail@plt+0xaf8>
   11780:	movw	r0, #32996	; 0x80e4
   11784:	mov	r1, #99	; 0x63
   11788:	mov	r2, r4
   1178c:	movt	r0, #2
   11790:	bl	10bdc <fgets@plt>
   11794:	cmp	r0, #0
   11798:	beq	11848 <__assert_fail@plt+0xaf8>
   1179c:	movw	r0, #32996	; 0x80e4
   117a0:	mov	r1, #99	; 0x63
   117a4:	mov	r2, r4
   117a8:	movt	r0, #2
   117ac:	bl	10bdc <fgets@plt>
   117b0:	cmp	r0, #0
   117b4:	beq	11848 <__assert_fail@plt+0xaf8>
   117b8:	ldr	r2, [sp, #4]
   117bc:	ldm	r5, {r0, r1}
   117c0:	add	r0, r0, r2
   117c4:	ldr	r2, [sp]
   117c8:	add	r1, r1, r2
   117cc:	stm	r5, {r0, r1}
   117d0:	add	r1, r5, #8
   117d4:	mov	r0, r4
   117d8:	bl	11864 <__assert_fail@plt+0xb14>
   117dc:	mov	r7, r0
   117e0:	add	r1, r5, #416	; 0x1a0
   117e4:	mov	r0, r4
   117e8:	bl	11864 <__assert_fail@plt+0xb14>
   117ec:	mov	r6, r0
   117f0:	add	r1, r5, #824	; 0x338
   117f4:	mov	r0, r4
   117f8:	bl	11864 <__assert_fail@plt+0xb14>
   117fc:	ldr	r0, [sp, #4]
   11800:	cmp	r0, #1
   11804:	blt	11838 <__assert_fail@plt+0xae8>
   11808:	add	r1, r5, #920	; 0x398
   1180c:	mov	r0, r4
   11810:	bl	11864 <__assert_fail@plt+0xb14>
   11814:	cmp	r7, #1
   11818:	addge	r1, r5, #992	; 0x3e0
   1181c:	movge	r0, r4
   11820:	blge	11990 <__assert_fail@plt+0xc40>
   11824:	cmp	r6, #1
   11828:	movwge	r0, #9048	; 0x2358
   1182c:	addge	r1, r5, r0
   11830:	movge	r0, r4
   11834:	blge	11990 <__assert_fail@plt+0xc40>
   11838:	mov	r0, r4
   1183c:	bl	12ddc <__assert_fail@plt+0x208c>
   11840:	sub	sp, fp, #16
   11844:	pop	{r4, r5, r6, r7, fp, pc}
   11848:	movw	r0, #15354	; 0x3bfa
   1184c:	movw	r1, #15372	; 0x3c0c
   11850:	cmp	r6, #0
   11854:	movt	r0, #1
   11858:	movt	r1, #1
   1185c:	movne	r1, r6
   11860:	bl	13238 <error@@Base+0x40>
   11864:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11868:	add	fp, sp, #28
   1186c:	sub	sp, sp, #12
   11870:	mov	r5, r0
   11874:	movw	r0, #32996	; 0x80e4
   11878:	mov	r4, r1
   1187c:	mov	r1, #99	; 0x63
   11880:	movt	r0, #2
   11884:	mov	r2, r5
   11888:	bl	10bdc <fgets@plt>
   1188c:	mov	r6, #0
   11890:	cmp	r0, #0
   11894:	beq	11984 <__assert_fail@plt+0xc34>
   11898:	movw	r0, #32996	; 0x80e4
   1189c:	mov	r1, #99	; 0x63
   118a0:	mov	r2, r5
   118a4:	movt	r0, #2
   118a8:	bl	10bdc <fgets@plt>
   118ac:	cmp	r0, #0
   118b0:	beq	11984 <__assert_fail@plt+0xc34>
   118b4:	movw	r7, #32996	; 0x80e4
   118b8:	mov	r1, #99	; 0x63
   118bc:	mov	r2, r5
   118c0:	movt	r7, #2
   118c4:	mov	r0, r7
   118c8:	bl	10bdc <fgets@plt>
   118cc:	cmp	r0, #0
   118d0:	beq	11984 <__assert_fail@plt+0xc34>
   118d4:	mov	r6, #0
   118d8:	add	r9, sp, #8
   118dc:	add	sl, sp, #4
   118e0:	add	r8, r7, #29
   118e4:	b	11944 <__assert_fail@plt+0xbf4>
   118e8:	movw	r1, #15229	; 0x3b7d
   118ec:	mov	r0, r8
   118f0:	mov	r2, #8
   118f4:	movt	r1, #1
   118f8:	bl	10ca8 <bcmp@plt>
   118fc:	ldr	r1, [sp, #8]
   11900:	cmp	r0, #0
   11904:	movwne	r0, #11
   11908:	moveq	r6, r1
   1190c:	mov	r2, r4
   11910:	ldr	r0, [r2, r0, lsl #3]!
   11914:	add	r0, r0, r1
   11918:	ldr	r1, [sp, #4]
   1191c:	str	r0, [r2]
   11920:	ldr	r0, [r2, #4]
   11924:	add	r0, r0, r1
   11928:	mov	r1, #99	; 0x63
   1192c:	str	r0, [r2, #4]
   11930:	mov	r0, r7
   11934:	mov	r2, r5
   11938:	bl	10bdc <fgets@plt>
   1193c:	cmp	r0, #0
   11940:	beq	11984 <__assert_fail@plt+0xc34>
   11944:	movw	r1, #15475	; 0x3c73
   11948:	mov	r0, r7
   1194c:	mov	r2, r9
   11950:	mov	r3, sl
   11954:	movt	r1, #1
   11958:	bl	10cd8 <__isoc99_sscanf@plt>
   1195c:	cmp	r0, #2
   11960:	bne	11984 <__assert_fail@plt+0xc34>
   11964:	mov	r0, r8
   11968:	mov	r1, #0
   1196c:	mov	r2, #10
   11970:	bl	10ba0 <strtol@plt>
   11974:	cmp	r0, #0
   11978:	beq	118e8 <__assert_fail@plt+0xb98>
   1197c:	ldr	r1, [sp, #8]
   11980:	b	1190c <__assert_fail@plt+0xbbc>
   11984:	mov	r0, r6
   11988:	sub	sp, fp, #28
   1198c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11994:	add	fp, sp, #28
   11998:	sub	sp, sp, #12
   1199c:	mov	r5, r0
   119a0:	movw	r0, #32996	; 0x80e4
   119a4:	mov	r4, r1
   119a8:	mov	r1, #99	; 0x63
   119ac:	movt	r0, #2
   119b0:	mov	r2, r5
   119b4:	bl	10bdc <fgets@plt>
   119b8:	cmp	r0, #0
   119bc:	beq	11ab4 <__assert_fail@plt+0xd64>
   119c0:	movw	r0, #32996	; 0x80e4
   119c4:	mov	r1, #99	; 0x63
   119c8:	mov	r2, r5
   119cc:	movt	r0, #2
   119d0:	bl	10bdc <fgets@plt>
   119d4:	cmp	r0, #0
   119d8:	beq	11ab4 <__assert_fail@plt+0xd64>
   119dc:	movw	r6, #32996	; 0x80e4
   119e0:	mov	r1, #99	; 0x63
   119e4:	mov	r2, r5
   119e8:	movt	r6, #2
   119ec:	mov	r0, r6
   119f0:	bl	10bdc <fgets@plt>
   119f4:	cmp	r0, #0
   119f8:	beq	11ab4 <__assert_fail@plt+0xd64>
   119fc:	add	r7, r6, #29
   11a00:	b	11a34 <__assert_fail@plt+0xce4>
   11a04:	ldr	r0, [r8, #12]
   11a08:	ldr	r1, [r8, #16]
   11a0c:	mov	r2, r5
   11a10:	add	r0, r0, r9
   11a14:	add	r1, r1, sl
   11a18:	str	r0, [r8, #12]
   11a1c:	str	r1, [r8, #16]
   11a20:	mov	r0, r6
   11a24:	mov	r1, #99	; 0x63
   11a28:	bl	10bdc <fgets@plt>
   11a2c:	cmp	r0, #0
   11a30:	beq	11ab4 <__assert_fail@plt+0xd64>
   11a34:	movw	r1, #15475	; 0x3c73
   11a38:	mov	r0, r6
   11a3c:	add	r2, sp, #8
   11a40:	add	r3, sp, #4
   11a44:	movt	r1, #1
   11a48:	bl	10cd8 <__isoc99_sscanf@plt>
   11a4c:	cmp	r0, #2
   11a50:	bne	11ab4 <__assert_fail@plt+0xd64>
   11a54:	mov	r0, r6
   11a58:	bl	10cc0 <strlen@plt>
   11a5c:	ldr	r9, [sp, #8]
   11a60:	ldr	sl, [sp, #4]
   11a64:	add	r0, r0, r6
   11a68:	mov	r1, #0
   11a6c:	strb	r1, [r0, #-1]
   11a70:	mov	r0, r4
   11a74:	mov	r1, r7
   11a78:	bl	121d8 <__assert_fail@plt+0x1488>
   11a7c:	mov	r8, r0
   11a80:	cmp	r0, #0
   11a84:	bne	11a04 <__assert_fail@plt+0xcb4>
   11a88:	mov	r0, #1
   11a8c:	mov	r1, #20
   11a90:	bl	12cc0 <__assert_fail@plt+0x1f70>
   11a94:	mov	r8, r0
   11a98:	mov	r0, r7
   11a9c:	bl	10bf4 <strdup@plt>
   11aa0:	str	r0, [r8, #8]
   11aa4:	mov	r0, r4
   11aa8:	mov	r1, r8
   11aac:	bl	12268 <__assert_fail@plt+0x1518>
   11ab0:	b	11a04 <__assert_fail@plt+0xcb4>
   11ab4:	sub	sp, fp, #28
   11ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11abc:	nop	{0}
   11ac0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11ac4:	add	fp, sp, #24
   11ac8:	sub	sp, sp, #8
   11acc:	mov	r2, r1
   11ad0:	movw	r1, #15378	; 0x3c12
   11ad4:	mov	r5, r0
   11ad8:	movt	r1, #1
   11adc:	mov	r0, r2
   11ae0:	bl	12d64 <__assert_fail@plt+0x2014>
   11ae4:	movw	r1, #15380	; 0x3c14
   11ae8:	movw	r2, #15306	; 0x3bca
   11aec:	movw	r3, #29091	; 0x71a3
   11af0:	mov	r4, r0
   11af4:	movt	r1, #1
   11af8:	movt	r2, #1
   11afc:	movt	r3, #1
   11b00:	bl	10ccc <fprintf@plt>
   11b04:	ldr	r2, [r5]
   11b08:	movw	r1, #15385	; 0x3c19
   11b0c:	mov	r0, r4
   11b10:	movt	r1, #1
   11b14:	bl	10ccc <fprintf@plt>
   11b18:	ldr	r2, [r5, #4]
   11b1c:	movw	r1, #15399	; 0x3c27
   11b20:	mov	r0, r4
   11b24:	movt	r1, #1
   11b28:	bl	10ccc <fprintf@plt>
   11b2c:	ldr	r0, [r5]
   11b30:	cmp	r0, #0
   11b34:	beq	11b74 <__assert_fail@plt+0xe24>
   11b38:	ldr	r1, [r5, #4]
   11b3c:	vldr	d16, [pc, #332]	; 11c90 <__assert_fail@plt+0xf40>
   11b40:	vmov	s2, r0
   11b44:	sub	r1, r0, r1
   11b48:	mov	r0, r4
   11b4c:	vmov	s0, r1
   11b50:	movw	r1, #15492	; 0x3c84
   11b54:	movt	r1, #1
   11b58:	vcvt.f64.s32	d17, s0
   11b5c:	vcvt.f64.s32	d18, s2
   11b60:	vmul.f64	d16, d17, d16
   11b64:	vdiv.f64	d16, d16, d18
   11b68:	vmov	r2, r3, d16
   11b6c:	bl	10ccc <fprintf@plt>
   11b70:	b	11b8c <__assert_fail@plt+0xe3c>
   11b74:	movw	r0, #15483	; 0x3c7b
   11b78:	mov	r1, #8
   11b7c:	mov	r2, #1
   11b80:	mov	r3, r4
   11b84:	movt	r0, #1
   11b88:	bl	10c30 <fwrite@plt>
   11b8c:	movw	r0, #15421	; 0x3c3d
   11b90:	mov	r1, #12
   11b94:	mov	r2, #1
   11b98:	mov	r3, r4
   11b9c:	mov	r7, #1
   11ba0:	movt	r0, #1
   11ba4:	bl	10c30 <fwrite@plt>
   11ba8:	movw	r3, #15434	; 0x3c4a
   11bac:	mov	r8, #0
   11bb0:	add	r1, r5, #8
   11bb4:	mov	r0, r4
   11bb8:	mov	r2, #50	; 0x32
   11bbc:	str	r7, [sp, #4]
   11bc0:	movt	r3, #1
   11bc4:	str	r8, [sp]
   11bc8:	bl	11c98 <__assert_fail@plt+0xf48>
   11bcc:	movw	r3, #15453	; 0x3c5d
   11bd0:	add	r6, r5, #416	; 0x1a0
   11bd4:	mov	r0, r4
   11bd8:	mov	r2, #50	; 0x32
   11bdc:	str	r8, [sp]
   11be0:	str	r7, [sp, #4]
   11be4:	movt	r3, #1
   11be8:	mov	r1, r6
   11bec:	bl	11c98 <__assert_fail@plt+0xf48>
   11bf0:	movw	r3, #15444	; 0x3c54
   11bf4:	add	r1, r5, #824	; 0x338
   11bf8:	mov	r0, r4
   11bfc:	mov	r2, #10
   11c00:	str	r7, [sp]
   11c04:	str	r7, [sp, #4]
   11c08:	movt	r3, #1
   11c0c:	bl	11c98 <__assert_fail@plt+0xf48>
   11c10:	ldr	r0, [r5]
   11c14:	cmp	r0, #1
   11c18:	blt	11c80 <__assert_fail@plt+0xf30>
   11c1c:	movw	r3, #15467	; 0x3c6b
   11c20:	add	r1, r5, #920	; 0x398
   11c24:	mov	r0, r4
   11c28:	mov	r2, #8
   11c2c:	str	r8, [sp]
   11c30:	str	r8, [sp, #4]
   11c34:	movt	r3, #1
   11c38:	bl	11c98 <__assert_fail@plt+0xf48>
   11c3c:	ldr	r0, [r5, #8]
   11c40:	cmp	r0, #1
   11c44:	blt	11c5c <__assert_fail@plt+0xf0c>
   11c48:	movw	r2, #15434	; 0x3c4a
   11c4c:	add	r1, r5, #992	; 0x3e0
   11c50:	mov	r0, r4
   11c54:	movt	r2, #1
   11c58:	bl	12008 <__assert_fail@plt+0x12b8>
   11c5c:	ldr	r0, [r6]
   11c60:	cmp	r0, #1
   11c64:	blt	11c80 <__assert_fail@plt+0xf30>
   11c68:	movw	r2, #15453	; 0x3c5d
   11c6c:	movw	r0, #9048	; 0x2358
   11c70:	movt	r2, #1
   11c74:	add	r1, r5, r0
   11c78:	mov	r0, r4
   11c7c:	bl	12008 <__assert_fail@plt+0x12b8>
   11c80:	mov	r0, r4
   11c84:	sub	sp, fp, #24
   11c88:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11c8c:	b	12ddc <__assert_fail@plt+0x208c>
   11c90:	andeq	r0, r0, r0
   11c94:	subsmi	r0, r9, r0
   11c98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c9c:	add	fp, sp, #28
   11ca0:	sub	sp, sp, #4
   11ca4:	vpush	{d8}
   11ca8:	sub	sp, sp, #8
   11cac:	mov	r5, r1
   11cb0:	movw	r1, #15498	; 0x3c8a
   11cb4:	mov	r8, r2
   11cb8:	mov	r2, r3
   11cbc:	mov	r4, r0
   11cc0:	movt	r1, #1
   11cc4:	bl	10ccc <fprintf@plt>
   11cc8:	movw	r0, #15546	; 0x3cba
   11ccc:	mov	r1, #26
   11cd0:	mov	r2, #1
   11cd4:	mov	r3, r4
   11cd8:	mov	r7, #1
   11cdc:	movt	r0, #1
   11ce0:	bl	10c30 <fwrite@plt>
   11ce4:	movw	r0, #15573	; 0x3cd5
   11ce8:	mov	r1, #3
   11cec:	mov	r2, #1
   11cf0:	mov	r3, r4
   11cf4:	movt	r0, #1
   11cf8:	bl	10c30 <fwrite@plt>
   11cfc:	ldrb	r1, [fp, #8]
   11d00:	movw	r0, #15503	; 0x3c8f
   11d04:	movw	r2, #15510	; 0x3c96
   11d08:	movt	r0, #1
   11d0c:	movt	r2, #1
   11d10:	cmp	r1, #0
   11d14:	str	r1, [sp]
   11d18:	movw	r1, #15499	; 0x3c8b
   11d1c:	movt	r1, #1
   11d20:	movne	r2, r0
   11d24:	mov	r0, r4
   11d28:	bl	10ccc <fprintf@plt>
   11d2c:	ldr	r1, [fp, #12]
   11d30:	lsl	r0, r8, #16
   11d34:	sxth	r6, r8
   11d38:	cmp	r0, #65536	; 0x10000
   11d3c:	str	r1, [sp, #4]
   11d40:	blt	11e3c <__assert_fail@plt+0x10ec>
   11d44:	vldr	d8, [pc, #692]	; 12000 <__assert_fail@plt+0x12b0>
   11d48:	movw	sl, #15517	; 0x3c9d
   11d4c:	mov	r8, #1
   11d50:	movt	sl, #1
   11d54:	mov	r0, r5
   11d58:	ldr	r2, [r0, r7, lsl #3]!
   11d5c:	cmp	r2, #1
   11d60:	bge	11dc8 <__assert_fail@plt+0x1078>
   11d64:	b	11da8 <__assert_fail@plt+0x1058>
   11d68:	movw	r0, #15546	; 0x3cba
   11d6c:	mov	r1, #26
   11d70:	movt	r0, #1
   11d74:	mov	r2, #1
   11d78:	mov	r3, r4
   11d7c:	bl	10c30 <fwrite@plt>
   11d80:	movw	r0, #15573	; 0x3cd5
   11d84:	mov	r1, #3
   11d88:	mov	r2, #1
   11d8c:	mov	r3, r4
   11d90:	movt	r0, #1
   11d94:	bl	10c30 <fwrite@plt>
   11d98:	mov	r0, r4
   11d9c:	mov	r1, sl
   11da0:	mov	r2, r7
   11da4:	bl	10ccc <fprintf@plt>
   11da8:	add	r8, r8, #1
   11dac:	sxth	r7, r8
   11db0:	cmp	r6, r7
   11db4:	blt	11e3c <__assert_fail@plt+0x10ec>
   11db8:	mov	r0, r5
   11dbc:	ldr	r2, [r0, r7, lsl #3]!
   11dc0:	cmp	r2, #1
   11dc4:	blt	11da8 <__assert_fail@plt+0x1058>
   11dc8:	cmp	r0, #0
   11dcc:	beq	11d68 <__assert_fail@plt+0x1018>
   11dd0:	add	r9, r5, r7, lsl #3
   11dd4:	movw	r1, #15535	; 0x3caf
   11dd8:	mov	r0, r4
   11ddc:	movt	r1, #1
   11de0:	ldr	r3, [r9, #4]!
   11de4:	bl	10ccc <fprintf@plt>
   11de8:	ldr	r0, [r5, r7, lsl #3]
   11dec:	cmp	r0, #0
   11df0:	beq	11e2c <__assert_fail@plt+0x10dc>
   11df4:	ldr	r1, [r9]
   11df8:	vmov	s2, r0
   11dfc:	sub	r1, r0, r1
   11e00:	mov	r0, r4
   11e04:	vmov	s0, r1
   11e08:	movw	r1, #15492	; 0x3c84
   11e0c:	movt	r1, #1
   11e10:	vcvt.f64.s32	d16, s0
   11e14:	vcvt.f64.s32	d17, s2
   11e18:	vmul.f64	d16, d16, d8
   11e1c:	vdiv.f64	d16, d16, d17
   11e20:	vmov	r2, r3, d16
   11e24:	bl	10ccc <fprintf@plt>
   11e28:	b	11d80 <__assert_fail@plt+0x1030>
   11e2c:	movw	r0, #15483	; 0x3c7b
   11e30:	mov	r1, #8
   11e34:	movt	r0, #1
   11e38:	b	11d74 <__assert_fail@plt+0x1024>
   11e3c:	ldr	r0, [sp]
   11e40:	cmp	r0, #0
   11e44:	beq	11f18 <__assert_fail@plt+0x11c8>
   11e48:	add	r7, r6, #1
   11e4c:	mov	r0, r5
   11e50:	ldr	r2, [r0, r7, lsl #3]!
   11e54:	cmp	r2, #1
   11e58:	blt	11f18 <__assert_fail@plt+0x11c8>
   11e5c:	cmp	r0, #0
   11e60:	beq	11ec4 <__assert_fail@plt+0x1174>
   11e64:	add	r8, r5, r7, lsl #3
   11e68:	movw	r1, #15535	; 0x3caf
   11e6c:	mov	r0, r4
   11e70:	movt	r1, #1
   11e74:	ldr	r3, [r8, #4]!
   11e78:	bl	10ccc <fprintf@plt>
   11e7c:	ldr	r0, [r5, r7, lsl #3]
   11e80:	cmp	r0, #0
   11e84:	beq	11ed4 <__assert_fail@plt+0x1184>
   11e88:	ldr	r1, [r8]
   11e8c:	vldr	d16, [pc, #364]	; 12000 <__assert_fail@plt+0x12b0>
   11e90:	vmov	s2, r0
   11e94:	sub	r1, r0, r1
   11e98:	mov	r0, r4
   11e9c:	vmov	s0, r1
   11ea0:	movw	r1, #15492	; 0x3c84
   11ea4:	movt	r1, #1
   11ea8:	vcvt.f64.s32	d17, s0
   11eac:	vcvt.f64.s32	d18, s2
   11eb0:	vmul.f64	d16, d17, d16
   11eb4:	vdiv.f64	d16, d16, d18
   11eb8:	vmov	r2, r3, d16
   11ebc:	bl	10ccc <fprintf@plt>
   11ec0:	b	11eec <__assert_fail@plt+0x119c>
   11ec4:	movw	r0, #15546	; 0x3cba
   11ec8:	mov	r1, #26
   11ecc:	movt	r0, #1
   11ed0:	b	11ee0 <__assert_fail@plt+0x1190>
   11ed4:	movw	r0, #15483	; 0x3c7b
   11ed8:	mov	r1, #8
   11edc:	movt	r0, #1
   11ee0:	mov	r2, #1
   11ee4:	mov	r3, r4
   11ee8:	bl	10c30 <fwrite@plt>
   11eec:	movw	r0, #15573	; 0x3cd5
   11ef0:	mov	r1, #3
   11ef4:	mov	r2, #1
   11ef8:	mov	r3, r4
   11efc:	movt	r0, #1
   11f00:	bl	10c30 <fwrite@plt>
   11f04:	movw	r1, #15526	; 0x3ca6
   11f08:	mov	r0, r4
   11f0c:	mov	r2, r6
   11f10:	movt	r1, #1
   11f14:	bl	10ccc <fprintf@plt>
   11f18:	ldr	r0, [sp, #4]
   11f1c:	tst	r0, #255	; 0xff
   11f20:	beq	11f88 <__assert_fail@plt+0x1238>
   11f24:	cmp	r5, #0
   11f28:	beq	11f98 <__assert_fail@plt+0x1248>
   11f2c:	movw	r1, #15535	; 0x3caf
   11f30:	ldm	r5, {r2, r3}
   11f34:	mov	r0, r4
   11f38:	movt	r1, #1
   11f3c:	bl	10ccc <fprintf@plt>
   11f40:	ldr	r0, [r5]
   11f44:	cmp	r0, #0
   11f48:	beq	11fa8 <__assert_fail@plt+0x1258>
   11f4c:	ldr	r1, [r5, #4]
   11f50:	vldr	d16, [pc, #168]	; 12000 <__assert_fail@plt+0x12b0>
   11f54:	vmov	s2, r0
   11f58:	sub	r1, r0, r1
   11f5c:	mov	r0, r4
   11f60:	vmov	s0, r1
   11f64:	movw	r1, #15492	; 0x3c84
   11f68:	movt	r1, #1
   11f6c:	vcvt.f64.s32	d17, s0
   11f70:	vcvt.f64.s32	d18, s2
   11f74:	vmul.f64	d16, d17, d16
   11f78:	vdiv.f64	d16, d16, d18
   11f7c:	vmov	r2, r3, d16
   11f80:	bl	10ccc <fprintf@plt>
   11f84:	b	11fc0 <__assert_fail@plt+0x1270>
   11f88:	sub	sp, fp, #40	; 0x28
   11f8c:	vpop	{d8}
   11f90:	add	sp, sp, #4
   11f94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f98:	movw	r0, #15546	; 0x3cba
   11f9c:	mov	r1, #26
   11fa0:	movt	r0, #1
   11fa4:	b	11fb4 <__assert_fail@plt+0x1264>
   11fa8:	movw	r0, #15483	; 0x3c7b
   11fac:	mov	r1, #8
   11fb0:	movt	r0, #1
   11fb4:	mov	r2, #1
   11fb8:	mov	r3, r4
   11fbc:	bl	10c30 <fwrite@plt>
   11fc0:	movw	r0, #15573	; 0x3cd5
   11fc4:	mov	r1, #3
   11fc8:	mov	r2, #1
   11fcc:	mov	r3, r4
   11fd0:	movt	r0, #1
   11fd4:	bl	10c30 <fwrite@plt>
   11fd8:	movw	r0, #15229	; 0x3b7d
   11fdc:	mov	r1, #7
   11fe0:	mov	r2, #1
   11fe4:	mov	r3, r4
   11fe8:	movt	r0, #1
   11fec:	sub	sp, fp, #40	; 0x28
   11ff0:	vpop	{d8}
   11ff4:	add	sp, sp, #4
   11ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ffc:	b	10c30 <fwrite@plt>
   12000:	andeq	r0, r0, r0
   12004:	subsmi	r0, r9, r0
   12008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1200c:	add	fp, sp, #28
   12010:	sub	sp, sp, #4
   12014:	vpush	{d8}
   12018:	mov	r5, r0
   1201c:	mov	r0, r1
   12020:	mov	r6, r2
   12024:	mov	r4, r1
   12028:	bl	12378 <__assert_fail@plt+0x1628>
   1202c:	movw	r0, #8048	; 0x1f70
   12030:	movw	r2, #8592	; 0x2190
   12034:	ldr	r1, [r4, r0]!
   12038:	movt	r2, #1
   1203c:	ldr	r0, [r4, #4]
   12040:	bl	114ac <__assert_fail@plt+0x75c>
   12044:	movw	r1, #15498	; 0x3c8a
   12048:	mov	r0, r5
   1204c:	mov	r2, r6
   12050:	movt	r1, #1
   12054:	bl	10ccc <fprintf@plt>
   12058:	movw	r0, #15546	; 0x3cba
   1205c:	mov	r1, #26
   12060:	mov	r2, #1
   12064:	mov	r3, r5
   12068:	movt	r0, #1
   1206c:	bl	10c30 <fwrite@plt>
   12070:	movw	r0, #15573	; 0x3cd5
   12074:	mov	r1, #3
   12078:	mov	r2, #1
   1207c:	mov	r3, r5
   12080:	movt	r0, #1
   12084:	bl	10c30 <fwrite@plt>
   12088:	mov	r0, #10
   1208c:	mov	r1, r5
   12090:	bl	10cfc <fputc@plt>
   12094:	ldr	r0, [r4, #4]
   12098:	cmp	r0, #1
   1209c:	blt	12178 <__assert_fail@plt+0x1428>
   120a0:	vldr	d8, [pc, #224]	; 12188 <__assert_fail@plt+0x1438>
   120a4:	movw	r9, #15535	; 0x3caf
   120a8:	movw	r7, #15573	; 0x3cd5
   120ac:	movw	r6, #15499	; 0x3c8b
   120b0:	mov	r8, #0
   120b4:	movt	r9, #1
   120b8:	movt	r7, #1
   120bc:	movt	r6, #1
   120c0:	b	12134 <__assert_fail@plt+0x13e4>
   120c4:	ldr	r1, [sl, #16]
   120c8:	vmov	s2, r0
   120cc:	sub	r1, r0, r1
   120d0:	mov	r0, r5
   120d4:	vmov	s0, r1
   120d8:	movw	r1, #15492	; 0x3c84
   120dc:	movt	r1, #1
   120e0:	vcvt.f64.s32	d16, s0
   120e4:	vcvt.f64.s32	d17, s2
   120e8:	vmul.f64	d16, d16, d8
   120ec:	vdiv.f64	d16, d16, d17
   120f0:	vmov	r2, r3, d16
   120f4:	bl	10ccc <fprintf@plt>
   120f8:	mov	r0, r7
   120fc:	mov	r1, #3
   12100:	mov	r2, #1
   12104:	mov	r3, r5
   12108:	bl	10c30 <fwrite@plt>
   1210c:	ldr	r0, [r4]
   12110:	mov	r1, r6
   12114:	ldr	r0, [r0, r8, lsl #2]
   12118:	ldr	r2, [r0, #8]
   1211c:	mov	r0, r5
   12120:	bl	10ccc <fprintf@plt>
   12124:	ldr	r0, [r4, #4]
   12128:	add	r8, r8, #1
   1212c:	cmp	r8, r0
   12130:	bge	12178 <__assert_fail@plt+0x1428>
   12134:	ldr	r0, [r4]
   12138:	mov	r1, r9
   1213c:	ldr	sl, [r0, r8, lsl #2]
   12140:	mov	r0, r5
   12144:	ldr	r2, [sl, #12]
   12148:	ldr	r3, [sl, #16]
   1214c:	bl	10ccc <fprintf@plt>
   12150:	ldr	r0, [sl, #12]
   12154:	cmp	r0, #0
   12158:	bne	120c4 <__assert_fail@plt+0x1374>
   1215c:	movw	r0, #15483	; 0x3c7b
   12160:	mov	r1, #8
   12164:	mov	r2, #1
   12168:	mov	r3, r5
   1216c:	movt	r0, #1
   12170:	bl	10c30 <fwrite@plt>
   12174:	b	120f8 <__assert_fail@plt+0x13a8>
   12178:	vpop	{d8}
   1217c:	add	sp, sp, #4
   12180:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12184:	nop	{0}
   12188:	andeq	r0, r0, r0
   1218c:	subsmi	r0, r9, r0
   12190:	ldr	r1, [r1, #8]
   12194:	ldr	r0, [r0, #8]
   12198:	b	12ce0 <__assert_fail@plt+0x1f90>
   1219c:	push	{r4, r5, r6, sl, fp, lr}
   121a0:	add	fp, sp, #16
   121a4:	mov	r4, r0
   121a8:	movw	r0, #8048	; 0x1f70
   121ac:	movw	r6, #503	; 0x1f7
   121b0:	add	r5, r4, r0
   121b4:	mov	r0, r4
   121b8:	bl	111e8 <__assert_fail@plt+0x498>
   121bc:	subs	r6, r6, #1
   121c0:	add	r4, r4, #16
   121c4:	bne	121b4 <__assert_fail@plt+0x1464>
   121c8:	mov	r0, #0
   121cc:	str	r0, [r5]
   121d0:	str	r0, [r5, #4]
   121d4:	pop	{r4, r5, r6, sl, fp, pc}
   121d8:	push	{r4, r5, r6, sl, fp, lr}
   121dc:	add	fp, sp, #16
   121e0:	mov	r5, r1
   121e4:	ldrb	r1, [r1]
   121e8:	mov	r4, #0
   121ec:	mov	r2, #0
   121f0:	cmp	r1, #0
   121f4:	beq	12228 <__assert_fail@plt+0x14d8>
   121f8:	add	r3, r5, #1
   121fc:	mov	r2, #0
   12200:	uxtab	r2, r2, r1
   12204:	ldrb	r1, [r3], #1
   12208:	cmp	r1, #0
   1220c:	bne	12200 <__assert_fail@plt+0x14b0>
   12210:	movw	r1, #20065	; 0x4e61
   12214:	movt	r1, #33354	; 0x824a
   12218:	umull	r1, r3, r2, r1
   1221c:	lsr	r1, r3, #8
   12220:	movw	r3, #503	; 0x1f7
   12224:	mls	r2, r1, r3, r2
   12228:	ldr	r6, [r0, r2, lsl #4]
   1222c:	cmp	r6, #0
   12230:	beq	12254 <__assert_fail@plt+0x1504>
   12234:	ldr	r1, [r6, #8]
   12238:	mov	r0, r5
   1223c:	bl	10b94 <strcmp@plt>
   12240:	cmp	r0, #0
   12244:	beq	1225c <__assert_fail@plt+0x150c>
   12248:	ldr	r6, [r6, #4]
   1224c:	cmp	r6, #0
   12250:	bne	12234 <__assert_fail@plt+0x14e4>
   12254:	mov	r0, r4
   12258:	pop	{r4, r5, r6, sl, fp, pc}
   1225c:	mov	r4, r6
   12260:	mov	r0, r4
   12264:	pop	{r4, r5, r6, sl, fp, pc}
   12268:	push	{r4, r5, fp, lr}
   1226c:	add	fp, sp, #8
   12270:	movw	r2, #8048	; 0x1f70
   12274:	add	r5, r0, r2
   12278:	ldr	r2, [r1, #8]
   1227c:	ldrb	r3, [r2]
   12280:	cmp	r3, #0
   12284:	beq	122bc <__assert_fail@plt+0x156c>
   12288:	add	r4, r2, #1
   1228c:	mov	r2, #0
   12290:	uxtab	r2, r2, r3
   12294:	ldrb	r3, [r4], #1
   12298:	cmp	r3, #0
   1229c:	bne	12290 <__assert_fail@plt+0x1540>
   122a0:	movw	r3, #20065	; 0x4e61
   122a4:	movt	r3, #33354	; 0x824a
   122a8:	umull	r3, r4, r2, r3
   122ac:	lsr	r3, r4, #8
   122b0:	movw	r4, #503	; 0x1f7
   122b4:	mls	r2, r3, r4, r2
   122b8:	b	122c0 <__assert_fail@plt+0x1570>
   122bc:	mov	r2, #0
   122c0:	add	r0, r0, r2, lsl #4
   122c4:	bl	111f4 <__assert_fail@plt+0x4a4>
   122c8:	ldr	r0, [r5]
   122cc:	cmp	r0, #0
   122d0:	beq	122e0 <__assert_fail@plt+0x1590>
   122d4:	bl	10bc4 <free@plt>
   122d8:	mov	r0, #0
   122dc:	str	r0, [r5]
   122e0:	ldr	r0, [r5, #4]
   122e4:	add	r0, r0, #1
   122e8:	str	r0, [r5, #4]
   122ec:	pop	{r4, r5, fp, pc}
   122f0:	push	{r4, r5, fp, lr}
   122f4:	add	fp, sp, #8
   122f8:	movw	r2, #8048	; 0x1f70
   122fc:	add	r5, r0, r2
   12300:	ldr	r2, [r1, #8]
   12304:	ldrb	r3, [r2]
   12308:	cmp	r3, #0
   1230c:	beq	12344 <__assert_fail@plt+0x15f4>
   12310:	add	r4, r2, #1
   12314:	mov	r2, #0
   12318:	uxtab	r2, r2, r3
   1231c:	ldrb	r3, [r4], #1
   12320:	cmp	r3, #0
   12324:	bne	12318 <__assert_fail@plt+0x15c8>
   12328:	movw	r3, #20065	; 0x4e61
   1232c:	movt	r3, #33354	; 0x824a
   12330:	umull	r3, r4, r2, r3
   12334:	lsr	r3, r4, #8
   12338:	movw	r4, #503	; 0x1f7
   1233c:	mls	r2, r3, r4, r2
   12340:	b	12348 <__assert_fail@plt+0x15f8>
   12344:	mov	r2, #0
   12348:	add	r0, r0, r2, lsl #4
   1234c:	bl	1133c <__assert_fail@plt+0x5ec>
   12350:	ldr	r0, [r5]
   12354:	cmp	r0, #0
   12358:	beq	12368 <__assert_fail@plt+0x1618>
   1235c:	bl	10bc4 <free@plt>
   12360:	mov	r0, #0
   12364:	str	r0, [r5]
   12368:	ldr	r0, [r5, #4]
   1236c:	sub	r0, r0, #1
   12370:	str	r0, [r5, #4]
   12374:	pop	{r4, r5, fp, pc}
   12378:	push	{r4, r5, fp, lr}
   1237c:	add	fp, sp, #8
   12380:	mov	r4, r0
   12384:	movw	r0, #8048	; 0x1f70
   12388:	mov	r5, r4
   1238c:	ldr	r0, [r5, r0]!
   12390:	cmp	r0, #0
   12394:	bne	123fc <__assert_fail@plt+0x16ac>
   12398:	ldr	r0, [r5, #4]
   1239c:	cmp	r0, #0
   123a0:	popeq	{r4, r5, fp, pc}
   123a4:	mov	r1, #4
   123a8:	bl	12cc0 <__assert_fail@plt+0x1f70>
   123ac:	str	r0, [r5]
   123b0:	mov	r0, #0
   123b4:	movw	ip, #503	; 0x1f7
   123b8:	mov	r2, #0
   123bc:	ldr	r3, [r4, r2, lsl #4]
   123c0:	cmp	r3, #0
   123c4:	bne	123e0 <__assert_fail@plt+0x1690>
   123c8:	add	r2, r2, #1
   123cc:	cmp	r2, ip
   123d0:	beq	123fc <__assert_fail@plt+0x16ac>
   123d4:	ldr	r3, [r4, r2, lsl #4]
   123d8:	cmp	r3, #0
   123dc:	beq	123c8 <__assert_fail@plt+0x1678>
   123e0:	ldr	r1, [r5]
   123e4:	str	r3, [r1, r0, lsl #2]
   123e8:	add	r0, r0, #1
   123ec:	ldr	r3, [r3, #4]
   123f0:	cmp	r3, #0
   123f4:	bne	123e0 <__assert_fail@plt+0x1690>
   123f8:	b	123c8 <__assert_fail@plt+0x1678>
   123fc:	pop	{r4, r5, fp, pc}
   12400:	push	{r4, r5, r6, r7, fp, lr}
   12404:	add	fp, sp, #16
   12408:	mov	r5, r0
   1240c:	movw	r0, #8048	; 0x1f70
   12410:	mov	r4, r1
   12414:	movw	r7, #503	; 0x1f7
   12418:	add	r6, r5, r0
   1241c:	mov	r0, r5
   12420:	mov	r1, r4
   12424:	bl	11410 <__assert_fail@plt+0x6c0>
   12428:	subs	r7, r7, #1
   1242c:	add	r5, r5, #16
   12430:	bne	1241c <__assert_fail@plt+0x16cc>
   12434:	ldr	r0, [r6]
   12438:	cmp	r0, #0
   1243c:	beq	1244c <__assert_fail@plt+0x16fc>
   12440:	bl	10bc4 <free@plt>
   12444:	mov	r0, #0
   12448:	str	r0, [r6]
   1244c:	mov	r0, #0
   12450:	str	r0, [r6, #4]
   12454:	pop	{r4, r5, r6, r7, fp, pc}
   12458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1245c:	add	fp, sp, #28
   12460:	sub	sp, sp, #28
   12464:	ldr	r8, [r1]
   12468:	str	r0, [sp, #4]
   1246c:	cmp	r8, #0
   12470:	str	r8, [sp, #16]
   12474:	beq	12c38 <__assert_fail@plt+0x1ee8>
   12478:	movw	sl, #15580	; 0x3cdc
   1247c:	add	r9, sp, #12
   12480:	movt	sl, #1
   12484:	mov	r0, #17
   12488:	mov	r1, r8
   1248c:	mov	r7, r9
   12490:	mov	ip, r0
   12494:	mov	lr, #18
   12498:	cmp	r7, #0
   1249c:	beq	12608 <__assert_fail@plt+0x18b8>
   124a0:	mov	r7, r1
   124a4:	ldr	r0, [r7, #12]
   124a8:	mov	r2, #0
   124ac:	movw	r1, #1092	; 0x444
   124b0:	sub	r3, r1, r2
   124b4:	add	r3, r2, r3, lsr #1
   124b8:	add	r4, r3, r3, lsl #1
   124bc:	ldr	r5, [sl, r4, lsl #2]
   124c0:	cmp	r5, r0
   124c4:	bls	124d8 <__assert_fail@plt+0x1788>
   124c8:	sub	r1, r3, #1
   124cc:	cmp	r1, r2
   124d0:	bcs	124b0 <__assert_fail@plt+0x1760>
   124d4:	b	12524 <__assert_fail@plt+0x17d4>
   124d8:	add	r2, sl, r4, lsl #2
   124dc:	ldr	r4, [r2, #4]
   124e0:	cmp	r4, r0
   124e4:	bcs	124f8 <__assert_fail@plt+0x17a8>
   124e8:	add	r2, r3, #1
   124ec:	cmp	r1, r2
   124f0:	bcs	124b0 <__assert_fail@plt+0x1760>
   124f4:	b	12524 <__assert_fail@plt+0x17d4>
   124f8:	ldr	r1, [r2, #8]
   124fc:	orr	r1, r1, #2
   12500:	cmp	r1, #6
   12504:	bne	12524 <__assert_fail@plt+0x17d4>
   12508:	ldr	r7, [r7, #4]
   1250c:	cmp	r7, #0
   12510:	bne	124a4 <__assert_fail@plt+0x1754>
   12514:	mov	r2, #18
   12518:	mov	r9, #18
   1251c:	mov	r7, #0
   12520:	b	12614 <__assert_fail@plt+0x18c4>
   12524:	cmp	r7, #0
   12528:	beq	12608 <__assert_fail@plt+0x18b8>
   1252c:	mov	r2, #0
   12530:	movw	r1, #1092	; 0x444
   12534:	sub	r3, r1, r2
   12538:	add	r3, r2, r3, lsr #1
   1253c:	add	r4, r3, r3, lsl #1
   12540:	ldr	r5, [sl, r4, lsl #2]
   12544:	cmp	r5, r0
   12548:	bls	1255c <__assert_fail@plt+0x180c>
   1254c:	sub	r1, r3, #1
   12550:	cmp	r1, r2
   12554:	bcs	12534 <__assert_fail@plt+0x17e4>
   12558:	b	12578 <__assert_fail@plt+0x1828>
   1255c:	add	r2, sl, r4, lsl #2
   12560:	ldr	r4, [r2, #4]
   12564:	cmp	r4, r0
   12568:	bcs	1296c <__assert_fail@plt+0x1c1c>
   1256c:	add	r2, r3, #1
   12570:	cmp	r1, r2
   12574:	bcs	12534 <__assert_fail@plt+0x17e4>
   12578:	mov	r9, #0
   1257c:	ldr	r6, [r7, #4]
   12580:	cmp	r6, #0
   12584:	beq	1297c <__assert_fail@plt+0x1c2c>
   12588:	mov	r2, r6
   1258c:	str	r7, [sp, #8]
   12590:	ldr	r0, [r2, #12]
   12594:	mov	r4, #0
   12598:	movw	r3, #1092	; 0x444
   1259c:	sub	r7, r3, r4
   125a0:	add	r7, r4, r7, lsr #1
   125a4:	add	r5, r7, r7, lsl #1
   125a8:	ldr	r1, [sl, r5, lsl #2]
   125ac:	cmp	r1, r0
   125b0:	bls	125c4 <__assert_fail@plt+0x1874>
   125b4:	sub	r3, r7, #1
   125b8:	cmp	r3, r4
   125bc:	bcs	1259c <__assert_fail@plt+0x184c>
   125c0:	b	1267c <__assert_fail@plt+0x192c>
   125c4:	add	r5, sl, r5, lsl #2
   125c8:	ldr	r1, [r5, #4]
   125cc:	cmp	r1, r0
   125d0:	bcs	125e4 <__assert_fail@plt+0x1894>
   125d4:	add	r4, r7, #1
   125d8:	cmp	r3, r4
   125dc:	bcs	1259c <__assert_fail@plt+0x184c>
   125e0:	b	1267c <__assert_fail@plt+0x192c>
   125e4:	ldr	r1, [r5, #8]
   125e8:	orr	r1, r1, #2
   125ec:	cmp	r1, #6
   125f0:	bne	1267c <__assert_fail@plt+0x192c>
   125f4:	ldr	r2, [r2, #4]
   125f8:	cmp	r2, #0
   125fc:	bne	12590 <__assert_fail@plt+0x1840>
   12600:	mov	r2, #18
   12604:	b	127cc <__assert_fail@plt+0x1a7c>
   12608:	mov	r7, #0
   1260c:	mov	r2, #18
   12610:	mov	r9, #18
   12614:	sub	r0, r2, #1
   12618:	cmp	r0, #3
   1261c:	subcs	r0, r9, #1
   12620:	cmpcs	r0, #3
   12624:	bcc	12a88 <__assert_fail@plt+0x1d38>
   12628:	orr	r4, r2, #1
   1262c:	orr	r6, r9, #1
   12630:	cmp	r4, #9
   12634:	cmpeq	r6, #9
   12638:	beq	127ac <__assert_fail@plt+0x1a5c>
   1263c:	cmp	r6, #9
   12640:	bne	126d8 <__assert_fail@plt+0x1988>
   12644:	cmp	r2, #13
   12648:	bhi	126d8 <__assert_fail@plt+0x1988>
   1264c:	mov	r0, #1
   12650:	mov	r1, #13312	; 0x3400
   12654:	tst	r1, r0, lsl r2
   12658:	beq	126d8 <__assert_fail@plt+0x1988>
   1265c:	orr	r0, lr, #1
   12660:	cmp	r0, #9
   12664:	bne	126d8 <__assert_fail@plt+0x1988>
   12668:	mov	r0, r9
   1266c:	ldr	r1, [r7, #4]
   12670:	cmp	r1, #0
   12674:	bne	12490 <__assert_fail@plt+0x1740>
   12678:	b	12a88 <__assert_fail@plt+0x1d38>
   1267c:	cmp	r2, #0
   12680:	beq	127c8 <__assert_fail@plt+0x1a78>
   12684:	mov	r3, #0
   12688:	movw	r2, #1092	; 0x444
   1268c:	sub	r1, r2, r3
   12690:	add	r7, r3, r1, lsr #1
   12694:	add	r5, r7, r7, lsl #1
   12698:	ldr	r1, [sl, r5, lsl #2]
   1269c:	cmp	r1, r0
   126a0:	bls	126b4 <__assert_fail@plt+0x1964>
   126a4:	sub	r2, r7, #1
   126a8:	cmp	r2, r3
   126ac:	bcs	1268c <__assert_fail@plt+0x193c>
   126b0:	b	127c0 <__assert_fail@plt+0x1a70>
   126b4:	add	r3, sl, r5, lsl #2
   126b8:	ldr	r1, [r3, #4]
   126bc:	cmp	r1, r0
   126c0:	bcs	12998 <__assert_fail@plt+0x1c48>
   126c4:	add	r3, r7, #1
   126c8:	cmp	r2, r3
   126cc:	bcs	1268c <__assert_fail@plt+0x193c>
   126d0:	mov	r2, #0
   126d4:	b	127cc <__assert_fail@plt+0x1a7c>
   126d8:	orr	r0, ip, #1
   126dc:	cmp	r0, #9
   126e0:	bne	12718 <__assert_fail@plt+0x19c8>
   126e4:	cmp	r9, #13
   126e8:	bhi	12718 <__assert_fail@plt+0x19c8>
   126ec:	mov	r0, #1
   126f0:	mov	r1, #13312	; 0x3400
   126f4:	tst	r1, r0, lsl r9
   126f8:	beq	12718 <__assert_fail@plt+0x19c8>
   126fc:	cmp	r4, #9
   12700:	bne	12718 <__assert_fail@plt+0x19c8>
   12704:	mov	r0, r9
   12708:	ldr	r1, [r7, #4]
   1270c:	cmp	r1, #0
   12710:	bne	12490 <__assert_fail@plt+0x1740>
   12714:	b	12a88 <__assert_fail@plt+0x1d38>
   12718:	cmp	r2, #10
   1271c:	mov	r0, #8
   12720:	cmpeq	r9, #8
   12724:	beq	12940 <__assert_fail@plt+0x1bf0>
   12728:	cmp	lr, #8
   1272c:	cmpeq	r2, #11
   12730:	beq	12950 <__assert_fail@plt+0x1c00>
   12734:	cmp	r2, #8
   12738:	cmpeq	ip, #8
   1273c:	beq	1295c <__assert_fail@plt+0x1c0c>
   12740:	cmp	r2, #15
   12744:	mov	r0, #15
   12748:	cmpeq	r9, #15
   1274c:	beq	12940 <__assert_fail@plt+0x1bf0>
   12750:	cmp	r2, #15
   12754:	cmpeq	r6, #9
   12758:	beq	12984 <__assert_fail@plt+0x1c34>
   1275c:	cmp	r9, #15
   12760:	cmpeq	r4, #9
   12764:	beq	12940 <__assert_fail@plt+0x1bf0>
   12768:	cmp	ip, #15
   1276c:	cmpeq	r2, #15
   12770:	beq	12a00 <__assert_fail@plt+0x1cb0>
   12774:	cmp	r9, #15
   12778:	bne	129a0 <__assert_fail@plt+0x1c50>
   1277c:	cmp	lr, #15
   12780:	bne	129b0 <__assert_fail@plt+0x1c60>
   12784:	orr	r3, r2, #2
   12788:	sub	r1, r2, #10
   1278c:	sub	r3, r3, #14
   12790:	clz	r1, r1
   12794:	clz	r3, r3
   12798:	lsr	r1, r1, #5
   1279c:	lsr	r3, r3, #5
   127a0:	orrs	r1, r1, r3
   127a4:	bne	12940 <__assert_fail@plt+0x1bf0>
   127a8:	b	129b0 <__assert_fail@plt+0x1c60>
   127ac:	mov	r0, r9
   127b0:	ldr	r1, [r7, #4]
   127b4:	cmp	r1, #0
   127b8:	bne	12490 <__assert_fail@plt+0x1740>
   127bc:	b	12a88 <__assert_fail@plt+0x1d38>
   127c0:	mov	r2, #0
   127c4:	b	127cc <__assert_fail@plt+0x1a7c>
   127c8:	mov	r2, #18
   127cc:	ldr	r0, [r6, #12]
   127d0:	mov	r4, #0
   127d4:	movw	r3, #1092	; 0x444
   127d8:	sub	r1, r3, r4
   127dc:	add	r7, r4, r1, lsr #1
   127e0:	add	r5, r7, r7, lsl #1
   127e4:	ldr	r1, [sl, r5, lsl #2]
   127e8:	cmp	r1, r0
   127ec:	bls	12800 <__assert_fail@plt+0x1ab0>
   127f0:	sub	r3, r7, #1
   127f4:	cmp	r3, r4
   127f8:	bcs	127d8 <__assert_fail@plt+0x1a88>
   127fc:	b	1284c <__assert_fail@plt+0x1afc>
   12800:	add	r5, sl, r5, lsl #2
   12804:	ldr	r1, [r5, #4]
   12808:	cmp	r1, r0
   1280c:	bcs	12820 <__assert_fail@plt+0x1ad0>
   12810:	add	r4, r7, #1
   12814:	cmp	r3, r4
   12818:	bcs	127d8 <__assert_fail@plt+0x1a88>
   1281c:	b	1284c <__assert_fail@plt+0x1afc>
   12820:	ldr	r0, [r5, #8]
   12824:	orr	r0, r0, #2
   12828:	cmp	r0, #6
   1282c:	bne	1284c <__assert_fail@plt+0x1afc>
   12830:	ldr	r6, [r6, #4]
   12834:	cmp	r6, #0
   12838:	bne	127cc <__assert_fail@plt+0x1a7c>
   1283c:	mov	lr, #18
   12840:	cmp	r9, #1
   12844:	beq	12930 <__assert_fail@plt+0x1be0>
   12848:	b	12a44 <__assert_fail@plt+0x1cf4>
   1284c:	mov	lr, #18
   12850:	cmp	r6, #0
   12854:	beq	12928 <__assert_fail@plt+0x1bd8>
   12858:	ldr	r6, [r6, #4]
   1285c:	cmp	r6, #0
   12860:	beq	12928 <__assert_fail@plt+0x1bd8>
   12864:	ldr	r0, [r6, #12]
   12868:	mov	r3, #0
   1286c:	movw	r4, #1092	; 0x444
   12870:	sub	r1, r4, r3
   12874:	add	r7, r3, r1, lsr #1
   12878:	add	r5, r7, r7, lsl #1
   1287c:	ldr	r1, [sl, r5, lsl #2]
   12880:	cmp	r1, r0
   12884:	bls	12898 <__assert_fail@plt+0x1b48>
   12888:	sub	r4, r7, #1
   1288c:	cmp	r4, r3
   12890:	bcs	12870 <__assert_fail@plt+0x1b20>
   12894:	b	128c8 <__assert_fail@plt+0x1b78>
   12898:	add	r3, sl, r5, lsl #2
   1289c:	ldr	r1, [r3, #4]
   128a0:	cmp	r1, r0
   128a4:	bcs	128b8 <__assert_fail@plt+0x1b68>
   128a8:	add	r3, r7, #1
   128ac:	cmp	r4, r3
   128b0:	bcs	12870 <__assert_fail@plt+0x1b20>
   128b4:	b	128c8 <__assert_fail@plt+0x1b78>
   128b8:	ldr	r1, [r3, #8]
   128bc:	orr	r1, r1, #2
   128c0:	cmp	r1, #6
   128c4:	beq	12858 <__assert_fail@plt+0x1b08>
   128c8:	cmp	r6, #0
   128cc:	beq	12928 <__assert_fail@plt+0x1bd8>
   128d0:	mov	r4, #0
   128d4:	movw	r6, #1092	; 0x444
   128d8:	sub	r1, r6, r4
   128dc:	add	r3, r4, r1, lsr #1
   128e0:	add	r7, r3, r3, lsl #1
   128e4:	ldr	r1, [sl, r7, lsl #2]
   128e8:	cmp	r1, r0
   128ec:	bls	12900 <__assert_fail@plt+0x1bb0>
   128f0:	sub	r6, r3, #1
   128f4:	cmp	r6, r4
   128f8:	bcs	128d8 <__assert_fail@plt+0x1b88>
   128fc:	b	12924 <__assert_fail@plt+0x1bd4>
   12900:	add	r7, sl, r7, lsl #2
   12904:	ldr	r1, [r7, #4]
   12908:	cmp	r1, r0
   1290c:	bcs	12a38 <__assert_fail@plt+0x1ce8>
   12910:	add	r4, r3, #1
   12914:	mov	lr, #0
   12918:	cmp	r6, r4
   1291c:	bcs	128d8 <__assert_fail@plt+0x1b88>
   12920:	b	12928 <__assert_fail@plt+0x1bd8>
   12924:	mov	lr, #0
   12928:	cmp	r9, #1
   1292c:	bne	12a44 <__assert_fail@plt+0x1cf4>
   12930:	ldr	r7, [sp, #8]
   12934:	mov	r0, #1
   12938:	cmp	r2, #2
   1293c:	bne	12614 <__assert_fail@plt+0x18c4>
   12940:	ldr	r1, [r7, #4]
   12944:	cmp	r1, #0
   12948:	bne	12490 <__assert_fail@plt+0x1740>
   1294c:	b	12a88 <__assert_fail@plt+0x1d38>
   12950:	cmp	r9, #8
   12954:	beq	12940 <__assert_fail@plt+0x1bf0>
   12958:	b	12734 <__assert_fail@plt+0x19e4>
   1295c:	mov	r0, #11
   12960:	cmp	r9, #11
   12964:	beq	12940 <__assert_fail@plt+0x1bf0>
   12968:	b	12740 <__assert_fail@plt+0x19f0>
   1296c:	ldr	r9, [r2, #8]
   12970:	ldr	r6, [r7, #4]
   12974:	cmp	r6, #0
   12978:	bne	12588 <__assert_fail@plt+0x1838>
   1297c:	mov	r2, #18
   12980:	b	12614 <__assert_fail@plt+0x18c4>
   12984:	mov	r0, r9
   12988:	ldr	r1, [r7, #4]
   1298c:	cmp	r1, #0
   12990:	bne	12490 <__assert_fail@plt+0x1740>
   12994:	b	12a88 <__assert_fail@plt+0x1d38>
   12998:	ldr	r2, [r3, #8]
   1299c:	b	127cc <__assert_fail@plt+0x1a7c>
   129a0:	cmp	r2, #7
   129a4:	moveq	r0, #7
   129a8:	cmpeq	r9, #7
   129ac:	beq	12940 <__assert_fail@plt+0x1bf0>
   129b0:	cmp	r2, #16
   129b4:	bne	12a4c <__assert_fail@plt+0x1cfc>
   129b8:	orr	r1, r9, #8
   129bc:	sub	r0, r6, #9
   129c0:	sub	r1, r1, #15
   129c4:	clz	r0, r0
   129c8:	clz	r1, r1
   129cc:	lsr	r0, r0, #5
   129d0:	lsr	r1, r1, #5
   129d4:	orr	r0, r1, r0
   129d8:	sub	r1, r9, #16
   129dc:	clz	r1, r1
   129e0:	lsr	r1, r1, #5
   129e4:	orrs	r0, r1, r0
   129e8:	beq	12a4c <__assert_fail@plt+0x1cfc>
   129ec:	mov	r0, r9
   129f0:	ldr	r1, [r7, #4]
   129f4:	cmp	r1, #0
   129f8:	bne	12490 <__assert_fail@plt+0x1740>
   129fc:	b	12a88 <__assert_fail@plt+0x1d38>
   12a00:	orr	r3, r9, #2
   12a04:	sub	r1, r9, #10
   12a08:	sub	r3, r3, #14
   12a0c:	clz	r1, r1
   12a10:	clz	r3, r3
   12a14:	lsr	r1, r1, #5
   12a18:	lsr	r3, r3, #5
   12a1c:	orrs	r1, r1, r3
   12a20:	beq	12774 <__assert_fail@plt+0x1a24>
   12a24:	mov	r0, r9
   12a28:	ldr	r1, [r7, #4]
   12a2c:	cmp	r1, #0
   12a30:	bne	12490 <__assert_fail@plt+0x1740>
   12a34:	b	12a88 <__assert_fail@plt+0x1d38>
   12a38:	ldr	lr, [r7, #8]
   12a3c:	cmp	r9, #1
   12a40:	beq	12930 <__assert_fail@plt+0x1be0>
   12a44:	ldr	r7, [sp, #8]
   12a48:	b	12614 <__assert_fail@plt+0x18c4>
   12a4c:	cmp	r9, #16
   12a50:	bne	12a78 <__assert_fail@plt+0x1d28>
   12a54:	cmp	r2, #16
   12a58:	bhi	12a88 <__assert_fail@plt+0x1d38>
   12a5c:	movw	r3, #33664	; 0x8380
   12a60:	mov	r1, #1
   12a64:	mov	r0, #16
   12a68:	movt	r3, #1
   12a6c:	tst	r3, r1, lsl r2
   12a70:	bne	12940 <__assert_fail@plt+0x1bf0>
   12a74:	b	12a88 <__assert_fail@plt+0x1d38>
   12a78:	cmp	r2, #5
   12a7c:	moveq	r0, #5
   12a80:	cmpeq	r9, #5
   12a84:	beq	12940 <__assert_fail@plt+0x1bf0>
   12a88:	cmp	r7, #0
   12a8c:	add	r9, sp, #12
   12a90:	beq	12c38 <__assert_fail@plt+0x1ee8>
   12a94:	ldr	r1, [r7, #4]
   12a98:	cmp	r1, #0
   12a9c:	beq	12b2c <__assert_fail@plt+0x1ddc>
   12aa0:	mov	r0, r1
   12aa4:	ldr	r1, [r1, #12]
   12aa8:	mov	r4, r7
   12aac:	mov	r3, #0
   12ab0:	movw	r2, #1092	; 0x444
   12ab4:	sub	r7, r2, r3
   12ab8:	add	r7, r3, r7, lsr #1
   12abc:	add	r6, r7, r7, lsl #1
   12ac0:	ldr	r5, [sl, r6, lsl #2]
   12ac4:	cmp	r5, r1
   12ac8:	bls	12adc <__assert_fail@plt+0x1d8c>
   12acc:	sub	r2, r7, #1
   12ad0:	cmp	r2, r3
   12ad4:	bcs	12ab4 <__assert_fail@plt+0x1d64>
   12ad8:	b	12b20 <__assert_fail@plt+0x1dd0>
   12adc:	add	r3, sl, r6, lsl #2
   12ae0:	ldr	r6, [r3, #4]
   12ae4:	cmp	r6, r1
   12ae8:	bcs	12afc <__assert_fail@plt+0x1dac>
   12aec:	add	r3, r7, #1
   12af0:	cmp	r2, r3
   12af4:	bcs	12ab4 <__assert_fail@plt+0x1d64>
   12af8:	b	12b20 <__assert_fail@plt+0x1dd0>
   12afc:	ldr	r1, [r3, #8]
   12b00:	orr	r1, r1, #2
   12b04:	cmp	r1, #6
   12b08:	bne	12b20 <__assert_fail@plt+0x1dd0>
   12b0c:	ldr	r1, [r0, #4]
   12b10:	mov	r7, r0
   12b14:	cmp	r1, #0
   12b18:	bne	12aa0 <__assert_fail@plt+0x1d50>
   12b1c:	b	12b30 <__assert_fail@plt+0x1de0>
   12b20:	cmp	r4, #0
   12b24:	bne	12b34 <__assert_fail@plt+0x1de4>
   12b28:	b	12c38 <__assert_fail@plt+0x1ee8>
   12b2c:	mov	r0, r7
   12b30:	mov	r4, r0
   12b34:	ldr	r0, [r8, #12]
   12b38:	bl	10bd0 <utf8proc_get_property@plt>
   12b3c:	ldrsh	r0, [r0]
   12b40:	sub	r1, r0, #1
   12b44:	cmp	r1, #12
   12b48:	bcs	12c2c <__assert_fail@plt+0x1edc>
   12b4c:	mov	r5, r4
   12b50:	ldr	r4, [r4, #4]
   12b54:	cmp	r8, r4
   12b58:	beq	12bc8 <__assert_fail@plt+0x1e78>
   12b5c:	mov	r6, #0
   12b60:	mov	r7, r8
   12b64:	cmp	r7, #0
   12b68:	beq	12c40 <__assert_fail@plt+0x1ef0>
   12b6c:	ldr	r0, [r7, #12]
   12b70:	mov	r1, r9
   12b74:	bl	10be8 <utf8proc_encode_char@plt>
   12b78:	cmp	r0, #0
   12b7c:	beq	12c60 <__assert_fail@plt+0x1f10>
   12b80:	ldr	r7, [r7, #4]
   12b84:	add	r6, r0, r6
   12b88:	cmp	r7, r4
   12b8c:	bne	12b64 <__assert_fail@plt+0x1e14>
   12b90:	add	r0, r6, #1
   12b94:	bl	10c60 <malloc@plt>
   12b98:	mov	r6, r0
   12b9c:	mov	r9, #0
   12ba0:	cmp	r8, #0
   12ba4:	beq	12c80 <__assert_fail@plt+0x1f30>
   12ba8:	ldr	r0, [r8, #12]
   12bac:	add	r1, r6, r9
   12bb0:	bl	10be8 <utf8proc_encode_char@plt>
   12bb4:	ldr	r8, [r8, #4]
   12bb8:	add	r9, r0, r9
   12bbc:	cmp	r8, r4
   12bc0:	bne	12ba0 <__assert_fail@plt+0x1e50>
   12bc4:	b	12bd8 <__assert_fail@plt+0x1e88>
   12bc8:	mov	r0, #1
   12bcc:	bl	10c60 <malloc@plt>
   12bd0:	mov	r6, r0
   12bd4:	mov	r9, #0
   12bd8:	mov	r0, #0
   12bdc:	mov	r1, #12
   12be0:	strb	r0, [r6, r9]
   12be4:	mov	r0, #1
   12be8:	bl	12cc0 <__assert_fail@plt+0x1f70>
   12bec:	mov	r7, r0
   12bf0:	mov	r0, r6
   12bf4:	bl	10cf0 <utf8proc_NFC@plt>
   12bf8:	str	r0, [r7, #8]
   12bfc:	ldr	r0, [sp, #4]
   12c00:	mov	r1, r7
   12c04:	bl	11244 <__assert_fail@plt+0x4f4>
   12c08:	mov	r0, r6
   12c0c:	bl	10bc4 <free@plt>
   12c10:	add	r9, sp, #12
   12c14:	mov	r4, r5
   12c18:	ldr	r8, [r4, #4]
   12c1c:	cmp	r8, #0
   12c20:	str	r8, [sp, #16]
   12c24:	bne	12484 <__assert_fail@plt+0x1734>
   12c28:	b	12c38 <__assert_fail@plt+0x1ee8>
   12c2c:	cmp	r0, #29
   12c30:	beq	12b4c <__assert_fail@plt+0x1dfc>
   12c34:	b	12c18 <__assert_fail@plt+0x1ec8>
   12c38:	sub	sp, fp, #28
   12c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c40:	movw	r0, #28703	; 0x701f
   12c44:	movw	r1, #28696	; 0x7018
   12c48:	movw	r3, #28719	; 0x702f
   12c4c:	mov	r2, #249	; 0xf9
   12c50:	movt	r0, #1
   12c54:	movt	r1, #1
   12c58:	movt	r3, #1
   12c5c:	bl	10d50 <__assert_fail@plt>
   12c60:	movw	r0, #28745	; 0x7049
   12c64:	movw	r1, #28696	; 0x7018
   12c68:	movw	r3, #28719	; 0x702f
   12c6c:	mov	r2, #253	; 0xfd
   12c70:	movt	r0, #1
   12c74:	movt	r1, #1
   12c78:	movt	r3, #1
   12c7c:	bl	10d50 <__assert_fail@plt>
   12c80:	movw	r0, #28703	; 0x701f
   12c84:	movw	r1, #28696	; 0x7018
   12c88:	movw	r3, #28764	; 0x705c
   12c8c:	movw	r2, #269	; 0x10d
   12c90:	movt	r0, #1
   12c94:	movt	r1, #1
   12c98:	movt	r3, #1
   12c9c:	bl	10d50 <__assert_fail@plt>
   12ca0:	push	{r4, sl, fp, lr}
   12ca4:	add	fp, sp, #8
   12ca8:	mov	r4, r0
   12cac:	ldr	r0, [r0, #8]
   12cb0:	bl	10bc4 <free@plt>
   12cb4:	mov	r0, r4
   12cb8:	pop	{r4, sl, fp, lr}
   12cbc:	b	10bc4 <free@plt>
   12cc0:	push	{fp, lr}
   12cc4:	mov	fp, sp
   12cc8:	bl	10b88 <calloc@plt>
   12ccc:	cmp	r0, #0
   12cd0:	popne	{fp, pc}
   12cd4:	movw	r0, #28788	; 0x7074
   12cd8:	movt	r0, #1
   12cdc:	bl	131f8 <error@@Base>
   12ce0:	push	{r4, r5, r6, sl, fp, lr}
   12ce4:	add	fp, sp, #16
   12ce8:	ldrb	r3, [r0]
   12cec:	ldrb	ip, [r1]
   12cf0:	mov	r2, r0
   12cf4:	mov	r0, #0
   12cf8:	cmp	r3, #0
   12cfc:	beq	12d3c <__assert_fail@plt+0x1fec>
   12d00:	add	r6, r2, #1
   12d04:	add	lr, r1, #1
   12d08:	mov	r2, #0
   12d0c:	uxtb	r4, ip
   12d10:	uxtb	r5, r3
   12d14:	cmp	r5, r4
   12d18:	bne	12d4c <__assert_fail@plt+0x1ffc>
   12d1c:	ldrb	r3, [r6, r2]
   12d20:	ldrb	ip, [lr, r2]
   12d24:	add	r2, r2, #1
   12d28:	cmp	r3, #0
   12d2c:	bne	12d0c <__assert_fail@plt+0x1fbc>
   12d30:	cmp	ip, #0
   12d34:	bne	12d48 <__assert_fail@plt+0x1ff8>
   12d38:	pop	{r4, r5, r6, sl, fp, pc}
   12d3c:	mov	r2, #0
   12d40:	cmp	ip, #0
   12d44:	beq	12d38 <__assert_fail@plt+0x1fe8>
   12d48:	mov	r3, #0
   12d4c:	ldrb	r1, [r1, r2]
   12d50:	uxtb	r2, r3
   12d54:	mov	r0, #1
   12d58:	cmp	r2, r1
   12d5c:	mvncc	r0, #0
   12d60:	pop	{r4, r5, r6, sl, fp, pc}
   12d64:	push	{r4, r5, fp, lr}
   12d68:	add	fp, sp, #8
   12d6c:	mov	r5, r1
   12d70:	cmp	r0, #0
   12d74:	beq	12da8 <__assert_fail@plt+0x2058>
   12d78:	mov	r1, r5
   12d7c:	mov	r4, r0
   12d80:	bl	10bb8 <fopen@plt>
   12d84:	cmp	r0, #0
   12d88:	popne	{r4, r5, fp, pc}
   12d8c:	ldrb	r0, [r5]
   12d90:	cmp	r0, #119	; 0x77
   12d94:	bne	12dcc <__assert_fail@plt+0x207c>
   12d98:	movw	r0, #28814	; 0x708e
   12d9c:	mov	r1, r4
   12da0:	movt	r0, #1
   12da4:	bl	13238 <error@@Base+0x40>
   12da8:	ldrb	r0, [r5]
   12dac:	movw	r1, #32976	; 0x80d0
   12db0:	movw	r2, #32980	; 0x80d4
   12db4:	movt	r1, #2
   12db8:	movt	r2, #2
   12dbc:	cmp	r0, #114	; 0x72
   12dc0:	moveq	r2, r1
   12dc4:	ldr	r0, [r2]
   12dc8:	pop	{r4, r5, fp, pc}
   12dcc:	movw	r0, #28836	; 0x70a4
   12dd0:	mov	r1, r4
   12dd4:	movt	r0, #1
   12dd8:	bl	13238 <error@@Base+0x40>
   12ddc:	movw	r1, #32976	; 0x80d0
   12de0:	movt	r1, #2
   12de4:	ldr	r1, [r1]
   12de8:	cmp	r1, r0
   12dec:	bxeq	lr
   12df0:	movw	r1, #32980	; 0x80d4
   12df4:	movt	r1, #2
   12df8:	ldr	r1, [r1]
   12dfc:	cmp	r1, r0
   12e00:	beq	12e08 <__assert_fail@plt+0x20b8>
   12e04:	b	10ce4 <fclose@plt>
   12e08:	bx	lr
   12e0c:	push	{fp, lr}
   12e10:	mov	fp, sp
   12e14:	sub	sp, sp, #88	; 0x58
   12e18:	mov	r1, r0
   12e1c:	mov	r2, sp
   12e20:	mov	r0, #3
   12e24:	bl	10c24 <__xstat@plt>
   12e28:	clz	r0, r0
   12e2c:	lsr	r0, r0, #5
   12e30:	mov	sp, fp
   12e34:	pop	{fp, pc}
   12e38:	push	{r4, r5, fp, lr}
   12e3c:	add	fp, sp, #8
   12e40:	sub	sp, sp, #104	; 0x68
   12e44:	movw	r0, #33096	; 0x8148
   12e48:	movt	r0, #2
   12e4c:	ldrh	r1, [r0]
   12e50:	add	r5, r1, #1
   12e54:	strh	r5, [r0]
   12e58:	movw	r0, #41192	; 0xa0e8
   12e5c:	movt	r0, #2
   12e60:	ldr	r4, [r0]
   12e64:	bl	10c90 <getpid@plt>
   12e68:	movw	r1, #28877	; 0x70cd
   12e6c:	mov	r3, r0
   12e70:	sxth	r0, r5
   12e74:	add	r5, sp, #4
   12e78:	mov	r2, r4
   12e7c:	movt	r1, #1
   12e80:	str	r0, [sp]
   12e84:	mov	r0, r5
   12e88:	bl	10d08 <sprintf@plt>
   12e8c:	mov	r0, r5
   12e90:	bl	10bf4 <strdup@plt>
   12e94:	mov	r4, r0
   12e98:	bl	10c0c <unlink@plt>
   12e9c:	mov	r0, r4
   12ea0:	sub	sp, fp, #8
   12ea4:	pop	{r4, r5, fp, pc}
   12ea8:	push	{r4, sl, fp, lr}
   12eac:	add	fp, sp, #8
   12eb0:	mov	r4, r0
   12eb4:	bl	10cc0 <strlen@plt>
   12eb8:	sub	r0, r0, #1
   12ebc:	sxth	r0, r0
   12ec0:	cmp	r0, #0
   12ec4:	bmi	12ed4 <__assert_fail@plt+0x2184>
   12ec8:	ldrb	r1, [r4, r0]
   12ecc:	cmp	r1, #47	; 0x2f
   12ed0:	bne	12eb8 <__assert_fail@plt+0x2168>
   12ed4:	add	r0, r0, r4
   12ed8:	add	r0, r0, #1
   12edc:	pop	{r4, sl, fp, pc}
   12ee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ee4:	add	fp, sp, #28
   12ee8:	sub	sp, sp, #12
   12eec:	ldr	r4, [r1]
   12ef0:	str	r0, [sp, #8]
   12ef4:	mov	r7, r3
   12ef8:	str	r2, [sp]
   12efc:	str	r1, [sp, #4]
   12f00:	mov	r0, r4
   12f04:	bl	10cc0 <strlen@plt>
   12f08:	sub	r0, r0, #1
   12f0c:	sxth	r0, r0
   12f10:	cmp	r0, #0
   12f14:	bmi	12f24 <__assert_fail@plt+0x21d4>
   12f18:	ldrb	r1, [r4, r0]
   12f1c:	cmp	r1, #47	; 0x2f
   12f20:	bne	12f08 <__assert_fail@plt+0x21b8>
   12f24:	add	r0, r0, r4
   12f28:	movw	r1, #41192	; 0xa0e8
   12f2c:	movw	r4, #12992	; 0x32c0
   12f30:	movt	r1, #2
   12f34:	movt	r4, #1
   12f38:	add	r0, r0, #1
   12f3c:	str	r0, [r1]
   12f40:	mov	r0, #2
   12f44:	mov	r1, r4
   12f48:	bl	10c78 <__sysv_signal@plt>
   12f4c:	mov	r0, #15
   12f50:	mov	r1, r4
   12f54:	bl	10c78 <__sysv_signal@plt>
   12f58:	ldr	r0, [sp, #8]
   12f5c:	ldr	r6, [r0]
   12f60:	cmp	r6, #1
   12f64:	bne	12f7c <__assert_fail@plt+0x222c>
   12f68:	movw	r0, #32960	; 0x80c0
   12f6c:	movt	r0, #2
   12f70:	ldrb	r0, [r0]
   12f74:	cmp	r0, #0
   12f78:	bne	1317c <__assert_fail@plt+0x242c>
   12f7c:	ldr	ip, [sp, #4]
   12f80:	mov	r8, #0
   12f84:	cmp	r6, #2
   12f88:	blt	13184 <__assert_fail@plt+0x2434>
   12f8c:	cmp	r7, #0
   12f90:	beq	13104 <__assert_fail@plt+0x23b4>
   12f94:	mov	r8, #0
   12f98:	mov	r5, #1
   12f9c:	mov	r9, #1
   12fa0:	ldr	r4, [ip, r5, lsl #2]
   12fa4:	ldrb	r0, [r4]
   12fa8:	cmp	r0, #45	; 0x2d
   12fac:	beq	12fdc <__assert_fail@plt+0x228c>
   12fb0:	sxth	r0, r8
   12fb4:	add	r8, r8, #1
   12fb8:	str	r4, [ip, r0, lsl #2]
   12fbc:	add	r9, r9, #1
   12fc0:	sxth	r5, r9
   12fc4:	cmp	r6, r5
   12fc8:	ble	13184 <__assert_fail@plt+0x2434>
   12fcc:	ldr	r4, [ip, r5, lsl #2]
   12fd0:	ldrb	r0, [r4]
   12fd4:	cmp	r0, #45	; 0x2d
   12fd8:	bne	12fb0 <__assert_fail@plt+0x2260>
   12fdc:	ldrb	sl, [r4, #1]
   12fe0:	cmp	sl, #0
   12fe4:	beq	12fb0 <__assert_fail@plt+0x2260>
   12fe8:	mov	r0, r4
   12fec:	bl	10cc0 <strlen@plt>
   12ff0:	mov	r2, r0
   12ff4:	movw	r0, #28906	; 0x70ea
   12ff8:	mov	r1, r4
   12ffc:	movt	r0, #1
   13000:	bl	10d2c <strncmp@plt>
   13004:	cmp	r0, #0
   13008:	beq	1317c <__assert_fail@plt+0x242c>
   1300c:	ldr	ip, [sp, #4]
   13010:	add	r1, r5, #1
   13014:	ldrb	r2, [r7]
   13018:	mov	r0, #0
   1301c:	cmp	r1, r6
   13020:	ldrlt	r0, [ip, r1, lsl #2]
   13024:	cmp	r2, #0
   13028:	beq	13198 <__assert_fail@plt+0x2448>
   1302c:	mov	r1, #0
   13030:	cmp	sl, r2
   13034:	beq	1305c <__assert_fail@plt+0x230c>
   13038:	mov	r2, #1
   1303c:	sxth	r1, r2
   13040:	add	r3, r1, r1, lsl #1
   13044:	ldrb	r3, [r7, r3, lsl #2]
   13048:	cmp	r3, #0
   1304c:	beq	13198 <__assert_fail@plt+0x2448>
   13050:	add	r2, r2, #1
   13054:	cmp	sl, r3
   13058:	bne	1303c <__assert_fail@plt+0x22ec>
   1305c:	add	r1, r1, r1, lsl #1
   13060:	add	r3, r7, r1, lsl #2
   13064:	ldr	r1, [r3, #4]
   13068:	cmp	r1, #0
   1306c:	beq	130bc <__assert_fail@plt+0x236c>
   13070:	mov	r2, r4
   13074:	cmp	r0, #0
   13078:	ldrb	r5, [r2, #2]!
   1307c:	cmpeq	r5, #0
   13080:	beq	130bc <__assert_fail@plt+0x236c>
   13084:	ldr	r3, [r1]
   13088:	cmp	r3, #0
   1308c:	bne	131a8 <__assert_fail@plt+0x2458>
   13090:	cmp	r5, #0
   13094:	movne	r0, r2
   13098:	str	r0, [r1]
   1309c:	ldrb	r0, [r2]
   130a0:	cmp	r0, #0
   130a4:	addeq	r9, r9, #1
   130a8:	add	r9, r9, #1
   130ac:	sxth	r5, r9
   130b0:	cmp	r6, r5
   130b4:	bgt	12fcc <__assert_fail@plt+0x227c>
   130b8:	b	13184 <__assert_fail@plt+0x2434>
   130bc:	ldr	r0, [r3, #8]
   130c0:	cmp	r0, #0
   130c4:	beq	13198 <__assert_fail@plt+0x2448>
   130c8:	ldrb	r1, [r4, #2]
   130cc:	cmp	r1, #0
   130d0:	bne	13198 <__assert_fail@plt+0x2448>
   130d4:	ldrb	r1, [r0]
   130d8:	cmp	r1, #0
   130dc:	bne	131a8 <__assert_fail@plt+0x2458>
   130e0:	mov	r1, #1
   130e4:	strb	r1, [r0]
   130e8:	ldr	r0, [sp, #8]
   130ec:	ldr	r6, [r0]
   130f0:	add	r9, r9, #1
   130f4:	sxth	r5, r9
   130f8:	cmp	r6, r5
   130fc:	bgt	12fcc <__assert_fail@plt+0x227c>
   13100:	b	13184 <__assert_fail@plt+0x2434>
   13104:	mov	r1, #1
   13108:	mov	r8, #0
   1310c:	mov	r0, #1
   13110:	ldr	r4, [ip, r1, lsl #2]
   13114:	ldrb	r1, [r4]
   13118:	cmp	r1, #45	; 0x2d
   1311c:	beq	1314c <__assert_fail@plt+0x23fc>
   13120:	sxth	r1, r8
   13124:	add	r0, r0, #1
   13128:	add	r8, r8, #1
   1312c:	str	r4, [ip, r1, lsl #2]
   13130:	sxth	r1, r0
   13134:	cmp	r6, r1
   13138:	ble	13184 <__assert_fail@plt+0x2434>
   1313c:	ldr	r4, [ip, r1, lsl #2]
   13140:	ldrb	r1, [r4]
   13144:	cmp	r1, #45	; 0x2d
   13148:	bne	13120 <__assert_fail@plt+0x23d0>
   1314c:	ldrb	r1, [r4, #1]
   13150:	cmp	r1, #0
   13154:	beq	13120 <__assert_fail@plt+0x23d0>
   13158:	mov	r0, r4
   1315c:	bl	10cc0 <strlen@plt>
   13160:	mov	r2, r0
   13164:	movw	r0, #28906	; 0x70ea
   13168:	mov	r1, r4
   1316c:	movt	r0, #1
   13170:	bl	10d2c <strncmp@plt>
   13174:	cmp	r0, #0
   13178:	bne	13198 <__assert_fail@plt+0x2448>
   1317c:	ldr	r0, [sp]
   13180:	bl	132f0 <error@@Base+0xf8>
   13184:	ldr	r1, [sp, #8]
   13188:	sxth	r0, r8
   1318c:	str	r0, [r1]
   13190:	sub	sp, fp, #28
   13194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13198:	movw	r0, #28927	; 0x70ff
   1319c:	mov	r1, r4
   131a0:	movt	r0, #1
   131a4:	bl	13238 <error@@Base+0x40>
   131a8:	movw	r0, #28942	; 0x710e
   131ac:	mov	r1, r4
   131b0:	movt	r0, #1
   131b4:	bl	13238 <error@@Base+0x40>
   131b8:	push	{fp, lr}
   131bc:	mov	fp, sp
   131c0:	mov	r0, #0
   131c4:	bl	131c8 <__assert_fail@plt+0x2478>
   131c8:	push	{fp, lr}
   131cc:	mov	fp, sp
   131d0:	mov	r4, r0
   131d4:	movw	r0, #41196	; 0xa0ec
   131d8:	movt	r0, #2
   131dc:	ldr	r0, [r0]
   131e0:	cmp	r0, #0
   131e4:	beq	131ec <__assert_fail@plt+0x249c>
   131e8:	blx	r0
   131ec:	bl	13340 <error@@Base+0x148>
   131f0:	mov	r0, r4
   131f4:	bl	10c9c <exit@plt>

000131f8 <error@@Base>:
   131f8:	push	{fp, lr}
   131fc:	mov	fp, sp
   13200:	mov	r3, r0
   13204:	movw	r0, #41192	; 0xa0e8
   13208:	movw	r1, #28856	; 0x70b8
   1320c:	movt	r0, #2
   13210:	movt	r1, #1
   13214:	ldr	r2, [r0]
   13218:	movw	r0, #32968	; 0x80c8
   1321c:	movt	r0, #2
   13220:	ldr	r0, [r0]
   13224:	bl	10ccc <fprintf@plt>
   13228:	movw	r0, #32964	; 0x80c4
   1322c:	movt	r0, #2
   13230:	ldr	r0, [r0]
   13234:	bl	131c8 <__assert_fail@plt+0x2478>
   13238:	push	{fp, lr}
   1323c:	mov	fp, sp
   13240:	sub	sp, sp, #8
   13244:	mov	r3, r0
   13248:	movw	r0, #41192	; 0xa0e8
   1324c:	str	r1, [sp]
   13250:	movw	r1, #28864	; 0x70c0
   13254:	movt	r0, #2
   13258:	movt	r1, #1
   1325c:	ldr	r2, [r0]
   13260:	movw	r0, #32968	; 0x80c8
   13264:	movt	r0, #2
   13268:	ldr	r0, [r0]
   1326c:	bl	10ccc <fprintf@plt>
   13270:	movw	r0, #32964	; 0x80c4
   13274:	movt	r0, #2
   13278:	ldr	r0, [r0]
   1327c:	bl	131c8 <__assert_fail@plt+0x2478>
   13280:	push	{fp, lr}
   13284:	mov	fp, sp
   13288:	sub	sp, sp, #8
   1328c:	mov	r3, r0
   13290:	movw	r0, #41192	; 0xa0e8
   13294:	str	r1, [sp]
   13298:	movw	r1, #28864	; 0x70c0
   1329c:	movt	r0, #2
   132a0:	movt	r1, #1
   132a4:	ldr	r2, [r0]
   132a8:	movw	r0, #32968	; 0x80c8
   132ac:	movt	r0, #2
   132b0:	ldr	r0, [r0]
   132b4:	bl	10ccc <fprintf@plt>
   132b8:	mov	sp, fp
   132bc:	pop	{fp, pc}
   132c0:	push	{fp, lr}
   132c4:	mov	fp, sp
   132c8:	movw	r0, #33098	; 0x814a
   132cc:	movt	r0, #2
   132d0:	ldrb	r1, [r0]
   132d4:	cmp	r1, #1
   132d8:	popeq	{fp, pc}
   132dc:	mov	r1, #1
   132e0:	strb	r1, [r0]
   132e4:	movw	r0, #28891	; 0x70db
   132e8:	movt	r0, #1
   132ec:	bl	131f8 <error@@Base>
   132f0:	push	{fp, lr}
   132f4:	mov	fp, sp
   132f8:	mov	r3, r0
   132fc:	movw	r0, #41188	; 0xa0e4
   13300:	movt	r0, #2
   13304:	ldr	r0, [r0]
   13308:	cmp	r0, #0
   1330c:	bne	13338 <error@@Base+0x140>
   13310:	movw	r0, #41192	; 0xa0e8
   13314:	movw	r1, #28912	; 0x70f0
   13318:	movt	r0, #2
   1331c:	movt	r1, #1
   13320:	ldr	r2, [r0]
   13324:	movw	r0, #32968	; 0x80c8
   13328:	movt	r0, #2
   1332c:	ldr	r0, [r0]
   13330:	bl	10ccc <fprintf@plt>
   13334:	bl	131b8 <__assert_fail@plt+0x2468>
   13338:	blx	r0
   1333c:	bl	131b8 <__assert_fail@plt+0x2468>
   13340:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13344:	add	fp, sp, #24
   13348:	sub	sp, sp, #104	; 0x68
   1334c:	movw	r8, #33096	; 0x8148
   13350:	movt	r8, #2
   13354:	ldrsh	r0, [r8]
   13358:	cmp	r0, #1
   1335c:	blt	133c8 <error@@Base+0x1d0>
   13360:	movw	r9, #41192	; 0xa0e8
   13364:	movw	r5, #28877	; 0x70cd
   13368:	mov	r7, #1
   1336c:	add	r4, sp, #4
   13370:	movt	r9, #2
   13374:	movt	r5, #1
   13378:	ldr	r6, [r9]
   1337c:	bl	10c90 <getpid@plt>
   13380:	mov	r3, r0
   13384:	sxth	r0, r7
   13388:	mov	r1, r5
   1338c:	mov	r2, r6
   13390:	str	r0, [sp]
   13394:	mov	r0, r4
   13398:	bl	10d08 <sprintf@plt>
   1339c:	mov	r0, r4
   133a0:	bl	10bf4 <strdup@plt>
   133a4:	mov	r6, r0
   133a8:	bl	10c0c <unlink@plt>
   133ac:	mov	r0, r6
   133b0:	bl	10bc4 <free@plt>
   133b4:	add	r0, r7, #1
   133b8:	sxth	r7, r0
   133bc:	ldrsh	r0, [r8]
   133c0:	cmp	r7, r0
   133c4:	ble	13378 <error@@Base+0x180>
   133c8:	sub	sp, fp, #24
   133cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   133d0:	push	{r4, r5, r6, sl, fp, lr}
   133d4:	add	fp, sp, #16
   133d8:	mov	r5, r1
   133dc:	mov	r6, r0
   133e0:	mov	r0, #1
   133e4:	mov	r1, #16
   133e8:	mov	r4, r2
   133ec:	bl	12cc0 <__assert_fail@plt+0x1f70>
   133f0:	str	r4, [r0, #12]
   133f4:	mov	r1, r0
   133f8:	strb	r5, [r0, #8]
   133fc:	mov	r0, r6
   13400:	pop	{r4, r5, r6, sl, fp, lr}
   13404:	b	11244 <__assert_fail@plt+0x4f4>
   13408:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1340c:	add	fp, sp, #28
   13410:	sub	sp, sp, #124	; 0x7c
   13414:	mov	r5, r2
   13418:	mov	r2, r1
   1341c:	cmp	r1, #0
   13420:	str	r0, [sp, #16]
   13424:	bne	13434 <error@@Base+0x23c>
   13428:	ldrb	r0, [r5]
   1342c:	cmp	r0, #0
   13430:	bne	1382c <error@@Base+0x634>
   13434:	ldr	r0, [sp, #16]
   13438:	movw	r1, #29161	; 0x71e9
   1343c:	movt	r1, #1
   13440:	ldr	r0, [r0, #4]
   13444:	str	r0, [sp, #4]
   13448:	mov	r0, r2
   1344c:	bl	12d64 <__assert_fail@plt+0x2014>
   13450:	mov	r6, r0
   13454:	ldrb	r0, [r5]
   13458:	cmp	r0, #0
   1345c:	beq	134a4 <error@@Base+0x2ac>
   13460:	add	r0, sp, #20
   13464:	mov	r1, #99	; 0x63
   13468:	mov	r2, r6
   1346c:	bl	10bdc <fgets@plt>
   13470:	cmp	r0, #0
   13474:	beq	13494 <error@@Base+0x29c>
   13478:	movw	r1, #29027	; 0x7163
   1347c:	add	r0, sp, #20
   13480:	mov	r2, #51	; 0x33
   13484:	movt	r1, #1
   13488:	bl	10ca8 <bcmp@plt>
   1348c:	cmp	r0, #0
   13490:	beq	137b8 <error@@Base+0x5c0>
   13494:	mov	r0, r6
   13498:	bl	10c00 <rewind@plt>
   1349c:	mov	r7, #0
   134a0:	strb	r7, [r5, #11]
   134a4:	ldr	r8, [r5, #4]
   134a8:	ldrb	r4, [r5, #1]
   134ac:	mov	r0, r6
   134b0:	str	r5, [sp, #8]
   134b4:	cmp	r8, #0
   134b8:	movweq	r8, #94	; 0x5e
   134bc:	bl	10d44 <getc@plt>
   134c0:	cmn	r0, #1
   134c4:	beq	13628 <error@@Base+0x430>
   134c8:	add	r1, sp, #20
   134cc:	cmp	r4, #0
   134d0:	add	r1, r1, #1
   134d4:	str	r1, [sp, #12]
   134d8:	beq	1358c <error@@Base+0x394>
   134dc:	mov	sl, #0
   134e0:	sub	r7, fp, #32
   134e4:	b	134fc <error@@Base+0x304>
   134e8:	mov	r0, r6
   134ec:	bl	10d44 <getc@plt>
   134f0:	cmn	r0, #1
   134f4:	mov	sl, r4
   134f8:	beq	13628 <error@@Base+0x430>
   134fc:	movw	r1, #32256	; 0x7e00
   13500:	movt	r1, #2
   13504:	add	r1, r1, r0
   13508:	ldrsb	r9, [r1]
   1350c:	cmp	r9, #1
   13510:	blt	1380c <error@@Base+0x614>
   13514:	strb	r0, [sp, #20]
   13518:	beq	1353c <error@@Base+0x344>
   1351c:	ldr	r0, [sp, #12]
   13520:	sub	r4, r9, #1
   13524:	mov	r1, #1
   13528:	mov	r3, r6
   1352c:	mov	r2, r4
   13530:	bl	10c3c <fread@plt>
   13534:	cmp	r0, r4
   13538:	bne	13820 <error@@Base+0x628>
   1353c:	add	r0, sp, #20
   13540:	mov	r1, #4
   13544:	mov	r2, r7
   13548:	bl	10c48 <utf8proc_iterate@plt>
   1354c:	cmp	r0, r9
   13550:	bne	13818 <error@@Base+0x620>
   13554:	ldr	r5, [fp, #-32]	; 0xffffffe0
   13558:	mov	r4, #1
   1355c:	cmp	r5, r8
   13560:	beq	134e8 <error@@Base+0x2f0>
   13564:	mov	r0, #1
   13568:	mov	r1, #16
   1356c:	bl	12cc0 <__assert_fail@plt+0x1f70>
   13570:	str	r5, [r0, #12]
   13574:	mov	r1, r0
   13578:	strb	sl, [r0, #8]
   1357c:	ldr	r0, [sp, #16]
   13580:	bl	11244 <__assert_fail@plt+0x4f4>
   13584:	mov	r4, #0
   13588:	b	134e8 <error@@Base+0x2f0>
   1358c:	movw	r8, #32256	; 0x7e00
   13590:	add	r9, sp, #20
   13594:	sub	sl, fp, #32
   13598:	mov	r5, #0
   1359c:	movt	r8, #2
   135a0:	add	r1, r8, r0
   135a4:	ldrsb	r7, [r1]
   135a8:	cmp	r7, #0
   135ac:	ble	1380c <error@@Base+0x614>
   135b0:	cmp	r7, #1
   135b4:	strb	r0, [sp, #20]
   135b8:	beq	135dc <error@@Base+0x3e4>
   135bc:	ldr	r0, [sp, #12]
   135c0:	sub	r4, r7, #1
   135c4:	mov	r1, #1
   135c8:	mov	r3, r6
   135cc:	mov	r2, r4
   135d0:	bl	10c3c <fread@plt>
   135d4:	cmp	r0, r4
   135d8:	bne	13820 <error@@Base+0x628>
   135dc:	mov	r0, r9
   135e0:	mov	r1, #4
   135e4:	mov	r2, sl
   135e8:	bl	10c48 <utf8proc_iterate@plt>
   135ec:	cmp	r0, r7
   135f0:	bne	13818 <error@@Base+0x620>
   135f4:	ldr	r4, [fp, #-32]	; 0xffffffe0
   135f8:	mov	r0, #1
   135fc:	mov	r1, #16
   13600:	bl	12cc0 <__assert_fail@plt+0x1f70>
   13604:	str	r4, [r0, #12]
   13608:	mov	r1, r0
   1360c:	strb	r5, [r0, #8]
   13610:	ldr	r0, [sp, #16]
   13614:	bl	11244 <__assert_fail@plt+0x4f4>
   13618:	mov	r0, r6
   1361c:	bl	10d44 <getc@plt>
   13620:	cmn	r0, #1
   13624:	bne	135a0 <error@@Base+0x3a8>
   13628:	mov	r0, r6
   1362c:	bl	12ddc <__assert_fail@plt+0x208c>
   13630:	ldr	r8, [sp, #8]
   13634:	ldr	r9, [sp, #4]
   13638:	ldrb	r0, [r8, #9]
   1363c:	cmp	r0, #0
   13640:	beq	13774 <error@@Base+0x57c>
   13644:	cmp	r9, #0
   13648:	ldr	r0, [sp, #16]
   1364c:	addne	r0, r9, #4
   13650:	ldr	r6, [r0]
   13654:	cmp	r6, #0
   13658:	beq	13774 <error@@Base+0x57c>
   1365c:	mov	r4, #32
   13660:	mov	r7, r6
   13664:	b	13678 <error@@Base+0x480>
   13668:	str	r4, [r7, #12]
   1366c:	ldr	r7, [r7, #4]
   13670:	cmp	r7, #0
   13674:	beq	136d0 <error@@Base+0x4d8>
   13678:	ldr	r5, [r7, #12]
   1367c:	mov	r0, r5
   13680:	bl	10bd0 <utf8proc_get_property@plt>
   13684:	cmp	r5, #10
   13688:	ble	136a4 <error@@Base+0x4ac>
   1368c:	sub	r1, r5, #11
   13690:	cmp	r1, #3
   13694:	bcc	13668 <error@@Base+0x470>
   13698:	cmp	r5, #160	; 0xa0
   1369c:	beq	13668 <error@@Base+0x470>
   136a0:	b	136b4 <error@@Base+0x4bc>
   136a4:	cmp	r5, #9
   136a8:	beq	13668 <error@@Base+0x470>
   136ac:	cmp	r5, #10
   136b0:	beq	1366c <error@@Base+0x474>
   136b4:	ldrsh	r0, [r0]
   136b8:	sub	r0, r0, #23
   136bc:	cmp	r0, #2
   136c0:	strls	r4, [r7, #12]
   136c4:	ldr	r7, [r7, #4]
   136c8:	cmp	r7, #0
   136cc:	bne	13678 <error@@Base+0x480>
   136d0:	mov	r4, #0
   136d4:	ldr	r1, [r6, #12]
   136d8:	ldr	r5, [r6, #4]
   136dc:	cmp	r1, #32
   136e0:	bne	13720 <error@@Base+0x528>
   136e4:	tst	r4, #255	; 0xff
   136e8:	cmpne	r5, #0
   136ec:	bne	13748 <error@@Base+0x550>
   136f0:	ldr	r0, [sp, #16]
   136f4:	mov	r1, r6
   136f8:	bl	1133c <__assert_fail@plt+0x5ec>
   136fc:	mov	r0, r6
   13700:	bl	10bc4 <free@plt>
   13704:	cmp	r5, #0
   13708:	mov	r6, r5
   1370c:	beq	13774 <error@@Base+0x57c>
   13710:	ldr	r1, [r6, #12]
   13714:	ldr	r5, [r6, #4]
   13718:	cmp	r1, #32
   1371c:	beq	136e4 <error@@Base+0x4ec>
   13720:	subs	r0, r1, #10
   13724:	movwne	r0, #1
   13728:	tst	r4, #255	; 0xff
   1372c:	cmpeq	r1, #10
   13730:	beq	136f0 <error@@Base+0x4f8>
   13734:	mov	r4, r0
   13738:	cmp	r5, #0
   1373c:	mov	r6, r5
   13740:	bne	13710 <error@@Base+0x518>
   13744:	b	13774 <error@@Base+0x57c>
   13748:	ldr	r1, [r5, #12]
   1374c:	cmp	r1, #10
   13750:	beq	136f0 <error@@Base+0x4f8>
   13754:	mov	r0, #1
   13758:	cmp	r1, #32
   1375c:	bne	13734 <error@@Base+0x53c>
   13760:	ldrb	r0, [r6, #8]
   13764:	ldrb	r1, [r5, #8]
   13768:	orr	r0, r1, r0
   1376c:	strb	r0, [r5, #8]
   13770:	b	136f0 <error@@Base+0x4f8>
   13774:	ldrb	r0, [r8, #10]
   13778:	cmp	r0, #0
   1377c:	beq	137b0 <error@@Base+0x5b8>
   13780:	cmp	r9, #0
   13784:	ldr	r0, [sp, #16]
   13788:	addne	r0, r9, #4
   1378c:	ldr	r4, [r0]
   13790:	cmp	r4, #0
   13794:	beq	137b0 <error@@Base+0x5b8>
   13798:	ldr	r0, [r4, #12]
   1379c:	bl	10c18 <utf8proc_tolower@plt>
   137a0:	str	r0, [r4, #12]
   137a4:	ldr	r4, [r4, #4]
   137a8:	cmp	r4, #0
   137ac:	bne	13798 <error@@Base+0x5a0>
   137b0:	sub	sp, fp, #28
   137b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137b8:	movw	r8, #29083	; 0x719b
   137bc:	mov	r4, #0
   137c0:	add	r9, sp, #20
   137c4:	mov	r7, #1
   137c8:	movt	r8, #1
   137cc:	mov	r0, r9
   137d0:	mov	r1, #99	; 0x63
   137d4:	mov	r2, r6
   137d8:	bl	10bdc <fgets@plt>
   137dc:	cmp	r0, #0
   137e0:	beq	134a0 <error@@Base+0x2a8>
   137e4:	mov	r0, r9
   137e8:	mov	r1, r8
   137ec:	mov	r2, #56	; 0x38
   137f0:	bl	10ca8 <bcmp@plt>
   137f4:	cmp	r0, #0
   137f8:	addeq	r4, r4, #1
   137fc:	uxth	r0, r4
   13800:	cmp	r0, #2
   13804:	bcc	137cc <error@@Base+0x5d4>
   13808:	b	134a0 <error@@Base+0x2a8>
   1380c:	movw	r0, #29139	; 0x71d3
   13810:	movt	r0, #1
   13814:	bl	131f8 <error@@Base>
   13818:	bl	10d14 <utf8proc_errmsg@plt>
   1381c:	bl	131f8 <error@@Base>
   13820:	movw	r0, #29163	; 0x71eb
   13824:	movt	r0, #1
   13828:	bl	131f8 <error@@Base>
   1382c:	movw	r0, #28959	; 0x711f
   13830:	movw	r1, #28975	; 0x712f
   13834:	movt	r0, #1
   13838:	movt	r1, #1
   1383c:	bl	13238 <error@@Base+0x40>
   13840:	push	{fp, lr}
   13844:	mov	fp, sp
   13848:	bl	10be8 <utf8proc_encode_char@plt>
   1384c:	cmp	r0, #0
   13850:	sxtbgt	r0, r0
   13854:	popgt	{fp, pc}
   13858:	movw	r0, #28985	; 0x7139
   1385c:	movt	r0, #1
   13860:	bl	131f8 <error@@Base>
   13864:	push	{r4, r5, r6, r7, fp, lr}
   13868:	add	fp, sp, #16
   1386c:	mov	r6, r3
   13870:	mov	r4, r2
   13874:	mov	r5, r1
   13878:	tst	r0, #255	; 0xff
   1387c:	beq	138c4 <error@@Base+0x6cc>
   13880:	mov	r0, #94	; 0x5e
   13884:	mov	r1, r4
   13888:	bl	10be8 <utf8proc_encode_char@plt>
   1388c:	cmp	r0, #0
   13890:	ble	1393c <error@@Base+0x744>
   13894:	sxtb	r7, r0
   13898:	cmp	r5, #10
   1389c:	bne	138d0 <error@@Base+0x6d8>
   138a0:	movw	r0, #28875	; 0x70cb
   138a4:	movw	r1, #29008	; 0x7150
   138a8:	tst	r6, #255	; 0xff
   138ac:	movt	r0, #1
   138b0:	movt	r1, #1
   138b4:	moveq	r1, r0
   138b8:	add	r0, r4, r7
   138bc:	pop	{r4, r5, r6, r7, fp, lr}
   138c0:	b	10d08 <sprintf@plt>
   138c4:	mov	r7, #0
   138c8:	cmp	r5, #10
   138cc:	beq	138a0 <error@@Base+0x6a8>
   138d0:	mov	r0, r5
   138d4:	bl	10bd0 <utf8proc_get_property@plt>
   138d8:	cmp	r5, #32
   138dc:	beq	138f0 <error@@Base+0x6f8>
   138e0:	ldrsh	r0, [r0]
   138e4:	sub	r1, r0, #1
   138e8:	cmp	r1, #22
   138ec:	bcs	13948 <error@@Base+0x750>
   138f0:	mov	r0, r5
   138f4:	bl	10cb4 <utf8proc_category@plt>
   138f8:	sub	r0, r0, #6
   138fc:	cmp	r0, #2
   13900:	bhi	1391c <error@@Base+0x724>
   13904:	add	r1, r4, r7
   13908:	movw	r0, #9676	; 0x25cc
   1390c:	bl	10be8 <utf8proc_encode_char@plt>
   13910:	cmp	r0, #0
   13914:	ble	1393c <error@@Base+0x744>
   13918:	sxtab	r7, r7, r0
   1391c:	add	r1, r4, r7
   13920:	mov	r0, r5
   13924:	bl	10be8 <utf8proc_encode_char@plt>
   13928:	cmp	r0, #0
   1392c:	sxtabgt	r0, r7, r0
   13930:	movgt	r1, #0
   13934:	strbgt	r1, [r4, r0]
   13938:	popgt	{r4, r5, r6, r7, fp, pc}
   1393c:	movw	r0, #28985	; 0x7139
   13940:	movt	r0, #1
   13944:	bl	131f8 <error@@Base>
   13948:	cmp	r0, #29
   1394c:	beq	138f0 <error@@Base+0x6f8>
   13950:	add	r0, r4, r7
   13954:	cmp	r5, #255	; 0xff
   13958:	bhi	13970 <error@@Base+0x778>
   1395c:	movw	r1, #29013	; 0x7155
   13960:	movt	r1, #1
   13964:	mov	r2, r5
   13968:	pop	{r4, r5, r6, r7, fp, lr}
   1396c:	b	10d08 <sprintf@plt>
   13970:	movw	r1, #29020	; 0x715c
   13974:	movt	r1, #1
   13978:	mov	r2, r5
   1397c:	pop	{r4, r5, r6, r7, fp, lr}
   13980:	b	10d08 <sprintf@plt>
   13984:	push	{r4, r5, r6, r7, fp, lr}
   13988:	add	fp, sp, #16
   1398c:	sub	sp, sp, #16
   13990:	mov	r6, r2
   13994:	mov	r2, r1
   13998:	movw	r1, #15378	; 0x3c12
   1399c:	mov	r5, r0
   139a0:	movt	r1, #1
   139a4:	mov	r0, r2
   139a8:	bl	12d64 <__assert_fail@plt+0x2014>
   139ac:	mov	r4, r0
   139b0:	cmp	r6, #0
   139b4:	beq	13a08 <error@@Base+0x810>
   139b8:	movw	r0, #29027	; 0x7163
   139bc:	mov	r1, #55	; 0x37
   139c0:	mov	r2, #1
   139c4:	mov	r3, r4
   139c8:	movt	r0, #1
   139cc:	bl	10c30 <fwrite@plt>
   139d0:	movw	r7, #29083	; 0x719b
   139d4:	mov	r1, #55	; 0x37
   139d8:	mov	r2, #1
   139dc:	mov	r3, r4
   139e0:	movt	r7, #1
   139e4:	mov	r0, r7
   139e8:	bl	10c30 <fwrite@plt>
   139ec:	mov	r0, r4
   139f0:	blx	r6
   139f4:	mov	r0, r7
   139f8:	mov	r1, #55	; 0x37
   139fc:	mov	r2, #1
   13a00:	mov	r3, r4
   13a04:	bl	10c30 <fwrite@plt>
   13a08:	ldr	r6, [r5]
   13a0c:	cmp	r6, #0
   13a10:	beq	13a44 <error@@Base+0x84c>
   13a14:	add	r5, sp, #7
   13a18:	ldr	r1, [r6, #12]
   13a1c:	ldrb	r0, [r6, #8]
   13a20:	mov	r2, r5
   13a24:	mov	r3, #0
   13a28:	bl	13864 <error@@Base+0x66c>
   13a2c:	mov	r0, r5
   13a30:	mov	r1, r4
   13a34:	bl	10d20 <fputs@plt>
   13a38:	ldr	r6, [r6, #4]
   13a3c:	cmp	r6, #0
   13a40:	bne	13a18 <error@@Base+0x820>
   13a44:	mov	r0, r4
   13a48:	bl	12ddc <__assert_fail@plt+0x208c>
   13a4c:	sub	sp, fp, #16
   13a50:	pop	{r4, r5, r6, r7, fp, pc}
   13a54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a58:	add	fp, sp, #28
   13a5c:	sub	sp, sp, #4
   13a60:	mov	r9, #0
   13a64:	mov	sl, r0
   13a68:	str	r9, [sp]
   13a6c:	ldrb	r0, [r1]
   13a70:	cmp	r0, #0
   13a74:	beq	13adc <error@@Base+0x8e4>
   13a78:	mov	r4, r1
   13a7c:	mov	r8, sp
   13a80:	mov	r7, #1
   13a84:	mov	r0, r4
   13a88:	mvn	r1, #0
   13a8c:	mov	r2, r8
   13a90:	bl	10c48 <utf8proc_iterate@plt>
   13a94:	cmp	r0, #1
   13a98:	blt	13aec <error@@Base+0x8f4>
   13a9c:	ldr	r5, [sp]
   13aa0:	mov	r6, r0
   13aa4:	mov	r0, #1
   13aa8:	mov	r1, #16
   13aac:	bl	12cc0 <__assert_fail@plt+0x1f70>
   13ab0:	str	r5, [r0, #12]
   13ab4:	mov	r1, r0
   13ab8:	strb	r9, [r0, #8]
   13abc:	mov	r0, sl
   13ac0:	bl	11244 <__assert_fail@plt+0x4f4>
   13ac4:	ldrb	r0, [r4, r6]!
   13ac8:	cmp	r0, #0
   13acc:	bne	13a84 <error@@Base+0x88c>
   13ad0:	mov	r0, r7
   13ad4:	sub	sp, fp, #28
   13ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13adc:	mov	r7, #1
   13ae0:	mov	r0, r7
   13ae4:	sub	sp, fp, #28
   13ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13aec:	mov	r7, #0
   13af0:	mov	r0, r7
   13af4:	sub	sp, fp, #28
   13af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13afc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13b00:	mov	r7, r0
   13b04:	ldr	r6, [pc, #72]	; 13b54 <error@@Base+0x95c>
   13b08:	ldr	r5, [pc, #72]	; 13b58 <error@@Base+0x960>
   13b0c:	add	r6, pc, r6
   13b10:	add	r5, pc, r5
   13b14:	sub	r6, r6, r5
   13b18:	mov	r8, r1
   13b1c:	mov	r9, r2
   13b20:	bl	10b68 <calloc@plt-0x20>
   13b24:	asrs	r6, r6, #2
   13b28:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b2c:	mov	r4, #0
   13b30:	add	r4, r4, #1
   13b34:	ldr	r3, [r5], #4
   13b38:	mov	r2, r9
   13b3c:	mov	r1, r8
   13b40:	mov	r0, r7
   13b44:	blx	r3
   13b48:	cmp	r6, r4
   13b4c:	bne	13b30 <error@@Base+0x938>
   13b50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b54:	andeq	r4, r1, r8, ror #5
   13b58:	andeq	r4, r1, r0, ror #5
   13b5c:	bx	lr

Disassembly of section .fini:

00013b60 <.fini>:
   13b60:	push	{r3, lr}
   13b64:	pop	{r3, pc}
