
../repos/coreutils/src/uniq:     file format elf32-littlearm


Disassembly of section .init:

00010d08 <.init>:
   10d08:	push	{r3, lr}
   10d0c:	bl	11004 <__assert_fail@plt+0x48>
   10d10:	pop	{r3, pc}

Disassembly of section .plt:

00010d14 <calloc@plt-0x14>:
   10d14:	push	{lr}		; (str lr, [sp, #-4]!)
   10d18:	ldr	lr, [pc, #4]	; 10d24 <calloc@plt-0x4>
   10d1c:	add	lr, pc, lr
   10d20:	ldr	pc, [lr, #8]!
   10d24:	ldrdeq	r7, [r1], -ip

00010d28 <calloc@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #94208	; 0x17000
   10d30:	ldr	pc, [ip, #732]!	; 0x2dc

00010d34 <fputs_unlocked@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #94208	; 0x17000
   10d3c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d40 <strcmp@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #94208	; 0x17000
   10d48:	ldr	pc, [ip, #716]!	; 0x2cc

00010d4c <strtol@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #94208	; 0x17000
   10d54:	ldr	pc, [ip, #708]!	; 0x2c4

00010d58 <posix_fadvise64@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #94208	; 0x17000
   10d60:	ldr	pc, [ip, #700]!	; 0x2bc

00010d64 <fflush@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #94208	; 0x17000
   10d6c:	ldr	pc, [ip, #692]!	; 0x2b4

00010d70 <free@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #94208	; 0x17000
   10d78:	ldr	pc, [ip, #684]!	; 0x2ac

00010d7c <_exit@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #94208	; 0x17000
   10d84:	ldr	pc, [ip, #676]!	; 0x2a4

00010d88 <memcpy@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #94208	; 0x17000
   10d90:	ldr	pc, [ip, #668]!	; 0x29c

00010d94 <__strtoull_internal@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #94208	; 0x17000
   10d9c:	ldr	pc, [ip, #660]!	; 0x294

00010da0 <mbsinit@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #94208	; 0x17000
   10da8:	ldr	pc, [ip, #652]!	; 0x28c

00010dac <fwrite_unlocked@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #94208	; 0x17000
   10db4:	ldr	pc, [ip, #644]!	; 0x284

00010db8 <memcmp@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #636]!	; 0x27c

00010dc4 <fputc_unlocked@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #628]!	; 0x274

00010dd0 <dcgettext@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #620]!	; 0x26c

00010ddc <dup2@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #612]!	; 0x264

00010de8 <realloc@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #604]!	; 0x25c

00010df4 <textdomain@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #596]!	; 0x254

00010e00 <iswprint@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #94208	; 0x17000
   10e08:	ldr	pc, [ip, #588]!	; 0x24c

00010e0c <fwrite@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #94208	; 0x17000
   10e14:	ldr	pc, [ip, #580]!	; 0x244

00010e18 <lseek64@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #94208	; 0x17000
   10e20:	ldr	pc, [ip, #572]!	; 0x23c

00010e24 <__ctype_get_mb_cur_max@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #94208	; 0x17000
   10e2c:	ldr	pc, [ip, #564]!	; 0x234

00010e30 <__fpending@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #94208	; 0x17000
   10e38:	ldr	pc, [ip, #556]!	; 0x22c

00010e3c <mbrtowc@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #94208	; 0x17000
   10e44:	ldr	pc, [ip, #548]!	; 0x224

00010e48 <error@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #540]!	; 0x21c

00010e54 <open64@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #532]!	; 0x214

00010e60 <getenv@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #524]!	; 0x20c

00010e6c <malloc@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #516]!	; 0x204

00010e78 <__libc_start_main@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #508]!	; 0x1fc

00010e84 <__freading@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #500]!	; 0x1f4

00010e90 <__ctype_toupper_loc@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #492]!	; 0x1ec

00010e9c <__gmon_start__@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #484]!	; 0x1e4

00010ea8 <freopen64@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #476]!	; 0x1dc

00010eb4 <getopt_long@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #468]!	; 0x1d4

00010ec0 <__ctype_b_loc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #460]!	; 0x1cc

00010ecc <exit@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #452]!	; 0x1c4

00010ed8 <strlen@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #444]!	; 0x1bc

00010ee4 <strchr@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #436]!	; 0x1b4

00010ef0 <__errno_location@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #428]!	; 0x1ac

00010efc <__cxa_atexit@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #420]!	; 0x1a4

00010f08 <memset@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #412]!	; 0x19c

00010f14 <__printf_chk@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #404]!	; 0x194

00010f20 <fileno@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #396]!	; 0x18c

00010f2c <__fprintf_chk@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #388]!	; 0x184

00010f38 <fclose@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #380]!	; 0x17c

00010f44 <fseeko64@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #372]!	; 0x174

00010f50 <__uflow@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #364]!	; 0x16c

00010f5c <__overflow@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #356]!	; 0x164

00010f68 <setlocale@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #348]!	; 0x15c

00010f74 <strrchr@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #340]!	; 0x154

00010f80 <nl_langinfo@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #332]!	; 0x14c

00010f8c <bindtextdomain@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #324]!	; 0x144

00010f98 <strncmp@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #316]!	; 0x13c

00010fa4 <abort@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #308]!	; 0x134

00010fb0 <close@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #300]!	; 0x12c

00010fbc <__assert_fail@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #292]!	; 0x124

Disassembly of section .text:

00010fc8 <.text>:
   10fc8:	mov	fp, #0
   10fcc:	mov	lr, #0
   10fd0:	pop	{r1}		; (ldr r1, [sp], #4)
   10fd4:	mov	r2, sp
   10fd8:	push	{r2}		; (str r2, [sp, #-4]!)
   10fdc:	push	{r0}		; (str r0, [sp, #-4]!)
   10fe0:	ldr	ip, [pc, #16]	; 10ff8 <__assert_fail@plt+0x3c>
   10fe4:	push	{ip}		; (str ip, [sp, #-4]!)
   10fe8:	ldr	r0, [pc, #12]	; 10ffc <__assert_fail@plt+0x40>
   10fec:	ldr	r3, [pc, #12]	; 11000 <__assert_fail@plt+0x44>
   10ff0:	bl	10e78 <__libc_start_main@plt>
   10ff4:	bl	10fa4 <abort@plt>
   10ff8:	andeq	r6, r1, ip, asr r9
   10ffc:	andeq	r1, r1, r4, lsr r8
   11000:	strdeq	r6, [r1], -ip
   11004:	ldr	r3, [pc, #20]	; 11020 <__assert_fail@plt+0x64>
   11008:	ldr	r2, [pc, #20]	; 11024 <__assert_fail@plt+0x68>
   1100c:	add	r3, pc, r3
   11010:	ldr	r2, [r3, r2]
   11014:	cmp	r2, #0
   11018:	bxeq	lr
   1101c:	b	10e9c <__gmon_start__@plt>
   11020:	andeq	r6, r1, ip, ror #31
   11024:	andeq	r0, r0, ip, ror #1
   11028:	ldr	r0, [pc, #24]	; 11048 <__assert_fail@plt+0x8c>
   1102c:	ldr	r3, [pc, #24]	; 1104c <__assert_fail@plt+0x90>
   11030:	cmp	r3, r0
   11034:	bxeq	lr
   11038:	ldr	r3, [pc, #16]	; 11050 <__assert_fail@plt+0x94>
   1103c:	cmp	r3, #0
   11040:	bxeq	lr
   11044:	bx	r3
   11048:	andeq	r8, r2, r4, asr #2
   1104c:	andeq	r8, r2, r4, asr #2
   11050:	andeq	r0, r0, r0
   11054:	ldr	r0, [pc, #36]	; 11080 <__assert_fail@plt+0xc4>
   11058:	ldr	r1, [pc, #36]	; 11084 <__assert_fail@plt+0xc8>
   1105c:	sub	r1, r1, r0
   11060:	asr	r1, r1, #2
   11064:	add	r1, r1, r1, lsr #31
   11068:	asrs	r1, r1, #1
   1106c:	bxeq	lr
   11070:	ldr	r3, [pc, #16]	; 11088 <__assert_fail@plt+0xcc>
   11074:	cmp	r3, #0
   11078:	bxeq	lr
   1107c:	bx	r3
   11080:	andeq	r8, r2, r4, asr #2
   11084:	andeq	r8, r2, r4, asr #2
   11088:	andeq	r0, r0, r0
   1108c:	push	{r4, lr}
   11090:	ldr	r4, [pc, #24]	; 110b0 <__assert_fail@plt+0xf4>
   11094:	ldrb	r3, [r4]
   11098:	cmp	r3, #0
   1109c:	popne	{r4, pc}
   110a0:	bl	11028 <__assert_fail@plt+0x6c>
   110a4:	mov	r3, #1
   110a8:	strb	r3, [r4]
   110ac:	pop	{r4, pc}
   110b0:	andeq	r8, r2, ip, ror #2
   110b4:	b	11054 <__assert_fail@plt+0x98>
   110b8:	strd	r4, [sp, #-12]!
   110bc:	str	lr, [sp, #8]
   110c0:	sub	sp, sp, #20
   110c4:	mov	r4, r0
   110c8:	mov	r5, r1
   110cc:	movw	r3, #27616	; 0x6be0
   110d0:	movt	r3, #1
   110d4:	str	r3, [sp]
   110d8:	add	r3, sp, #8
   110dc:	mov	r2, #10
   110e0:	mov	r1, #0
   110e4:	bl	16008 <__assert_fail@plt+0x504c>
   110e8:	cmp	r0, #1
   110ec:	bhi	11118 <__assert_fail@plt+0x15c>
   110f0:	ldrd	r0, [sp, #8]
   110f4:	mvn	r2, #0
   110f8:	mov	r3, #0
   110fc:	cmp	r1, r3
   11100:	cmpeq	r0, r2
   11104:	movhi	r0, r2
   11108:	add	sp, sp, #20
   1110c:	ldrd	r4, [sp]
   11110:	add	sp, sp, #8
   11114:	pop	{pc}		; (ldr pc, [sp], #4)
   11118:	mov	r2, #5
   1111c:	mov	r1, r5
   11120:	mov	r0, #0
   11124:	bl	10dd0 <dcgettext@plt>
   11128:	str	r0, [sp]
   1112c:	mov	r3, r4
   11130:	movw	r2, #27340	; 0x6acc
   11134:	movt	r2, #1
   11138:	mov	r1, #0
   1113c:	mov	r0, #1
   11140:	bl	10e48 <error@plt>
   11144:	orrs	ip, r2, r3
   11148:	bne	111b8 <__assert_fail@plt+0x1fc>
   1114c:	movw	r1, #33136	; 0x8170
   11150:	movt	r1, #2
   11154:	ldrb	r1, [r1]
   11158:	eor	r1, r1, #1
   1115c:	cmp	r1, #0
   11160:	bxne	lr
   11164:	strd	r4, [sp, #-16]!
   11168:	str	r6, [sp, #8]
   1116c:	str	lr, [sp, #12]
   11170:	mov	r5, r3
   11174:	mov	r6, r0
   11178:	movw	r3, #33136	; 0x8170
   1117c:	movt	r3, #2
   11180:	ldr	r3, [r3, #4]
   11184:	cmp	r3, #0
   11188:	beq	111d4 <__assert_fail@plt+0x218>
   1118c:	movw	r3, #33124	; 0x8164
   11190:	movt	r3, #2
   11194:	ldr	r3, [r3]
   11198:	ldr	r2, [r6, #4]
   1119c:	mov	r1, #1
   111a0:	ldr	r0, [r6, #8]
   111a4:	bl	10dac <fwrite_unlocked@plt>
   111a8:	ldrd	r4, [sp]
   111ac:	ldr	r6, [sp, #8]
   111b0:	add	sp, sp, #12
   111b4:	pop	{pc}		; (ldr pc, [sp], #4)
   111b8:	cmp	r1, #0
   111bc:	movw	r1, #33136	; 0x8170
   111c0:	movt	r1, #2
   111c4:	ldrbeq	r1, [r1, #1]
   111c8:	ldrbne	r1, [r1, #2]
   111cc:	eor	r1, r1, #1
   111d0:	b	1115c <__assert_fail@plt+0x1a0>
   111d4:	adds	r2, r2, #1
   111d8:	adc	r3, r5, #0
   111dc:	movw	r1, #27348	; 0x6ad4
   111e0:	movt	r1, #1
   111e4:	mov	r0, #1
   111e8:	bl	10f14 <__printf_chk@plt>
   111ec:	b	1118c <__assert_fail@plt+0x1d0>
   111f0:	str	r4, [sp, #-8]!
   111f4:	str	lr, [sp, #4]
   111f8:	movw	lr, #33136	; 0x8170
   111fc:	movt	lr, #2
   11200:	ldr	ip, [lr, #8]
   11204:	cmp	ip, r2
   11208:	movcc	r2, ip
   1120c:	cmp	ip, r3
   11210:	movcc	r3, ip
   11214:	ldrb	ip, [lr, #12]
   11218:	cmp	ip, #0
   1121c:	beq	11248 <__assert_fail@plt+0x28c>
   11220:	cmp	r3, r2
   11224:	movne	r0, #1
   11228:	beq	11238 <__assert_fail@plt+0x27c>
   1122c:	ldr	r4, [sp]
   11230:	add	sp, sp, #4
   11234:	pop	{pc}		; (ldr pc, [sp], #4)
   11238:	bl	13064 <__assert_fail@plt+0x20a8>
   1123c:	adds	r0, r0, #0
   11240:	movne	r0, #1
   11244:	b	1122c <__assert_fail@plt+0x270>
   11248:	cmp	r3, r2
   1124c:	movne	r0, #1
   11250:	bne	1122c <__assert_fail@plt+0x270>
   11254:	bl	10db8 <memcmp@plt>
   11258:	adds	r0, r0, #0
   1125c:	movne	r0, #1
   11260:	b	1122c <__assert_fail@plt+0x270>
   11264:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11268:	strd	r6, [sp, #8]
   1126c:	strd	r8, [sp, #16]
   11270:	str	sl, [sp, #24]
   11274:	str	lr, [sp, #28]
   11278:	ldr	r8, [r0, #8]
   1127c:	ldr	r5, [r0, #4]
   11280:	movw	r3, #33136	; 0x8170
   11284:	movt	r3, #2
   11288:	ldr	r9, [r3, #16]
   1128c:	subs	r6, r5, #1
   11290:	movne	r3, #1
   11294:	moveq	r3, #0
   11298:	cmp	r9, #0
   1129c:	moveq	r3, #0
   112a0:	cmp	r3, #0
   112a4:	moveq	r0, #0
   112a8:	beq	1135c <__assert_fail@plt+0x3a0>
   112ac:	mov	r4, #0
   112b0:	mov	r7, r4
   112b4:	sub	r5, r5, #1
   112b8:	b	11318 <__assert_fail@plt+0x35c>
   112bc:	cmp	r6, r4
   112c0:	bls	1139c <__assert_fail@plt+0x3e0>
   112c4:	sub	ip, r4, #1
   112c8:	add	ip, r8, ip
   112cc:	ldrb	r2, [ip, #1]!
   112d0:	lsl	r3, r2, #1
   112d4:	ldrh	r3, [r1, r3]
   112d8:	cmp	r2, #10
   112dc:	orreq	r3, r3, #1
   112e0:	tst	r3, #1
   112e4:	bne	112f8 <__assert_fail@plt+0x33c>
   112e8:	add	r4, r4, #1
   112ec:	cmp	r4, r5
   112f0:	bne	112cc <__assert_fail@plt+0x310>
   112f4:	b	1135c <__assert_fail@plt+0x3a0>
   112f8:	add	r7, r7, #1
   112fc:	cmp	r6, r4
   11300:	movls	r3, #0
   11304:	movhi	r3, #1
   11308:	cmp	r7, r9
   1130c:	movcs	r3, #0
   11310:	cmp	r3, #0
   11314:	beq	11394 <__assert_fail@plt+0x3d8>
   11318:	cmp	r6, r4
   1131c:	bls	113a4 <__assert_fail@plt+0x3e8>
   11320:	bl	10ec0 <__ctype_b_loc@plt>
   11324:	ldr	r1, [r0]
   11328:	sub	ip, r4, #1
   1132c:	add	ip, r8, ip
   11330:	mov	r0, r5
   11334:	ldrb	r2, [ip, #1]!
   11338:	lsl	r3, r2, #1
   1133c:	ldrh	r3, [r1, r3]
   11340:	cmp	r2, #10
   11344:	orreq	r3, r3, #1
   11348:	tst	r3, #1
   1134c:	beq	112bc <__assert_fail@plt+0x300>
   11350:	add	r4, r4, #1
   11354:	cmp	r4, r5
   11358:	bne	11334 <__assert_fail@plt+0x378>
   1135c:	sub	r6, r6, r0
   11360:	movw	r3, #33136	; 0x8170
   11364:	movt	r3, #2
   11368:	ldr	r3, [r3, #20]
   1136c:	cmp	r6, r3
   11370:	addls	r0, r0, r6
   11374:	addhi	r0, r0, r3
   11378:	add	r0, r8, r0
   1137c:	ldrd	r4, [sp]
   11380:	ldrd	r6, [sp, #8]
   11384:	ldrd	r8, [sp, #16]
   11388:	ldr	sl, [sp, #24]
   1138c:	add	sp, sp, #28
   11390:	pop	{pc}		; (ldr pc, [sp], #4)
   11394:	mov	r0, r4
   11398:	b	1135c <__assert_fail@plt+0x3a0>
   1139c:	mov	r0, r4
   113a0:	b	1135c <__assert_fail@plt+0x3a0>
   113a4:	mov	r0, r4
   113a8:	b	1135c <__assert_fail@plt+0x3a0>
   113ac:	push	{lr}		; (str lr, [sp, #-4]!)
   113b0:	sub	sp, sp, #60	; 0x3c
   113b4:	subs	r5, r0, #0
   113b8:	beq	11400 <__assert_fail@plt+0x444>
   113bc:	movw	r3, #33112	; 0x8158
   113c0:	movt	r3, #2
   113c4:	ldr	r4, [r3]
   113c8:	mov	r2, #5
   113cc:	movw	r1, #27364	; 0x6ae4
   113d0:	movt	r1, #1
   113d4:	mov	r0, #0
   113d8:	bl	10dd0 <dcgettext@plt>
   113dc:	movw	r3, #33176	; 0x8198
   113e0:	movt	r3, #2
   113e4:	ldr	r3, [r3]
   113e8:	mov	r2, r0
   113ec:	mov	r1, #1
   113f0:	mov	r0, r4
   113f4:	bl	10f2c <__fprintf_chk@plt>
   113f8:	mov	r0, r5
   113fc:	bl	10ecc <exit@plt>
   11400:	mov	r2, #5
   11404:	movw	r1, #27404	; 0x6b0c
   11408:	movt	r1, #1
   1140c:	mov	r0, #0
   11410:	bl	10dd0 <dcgettext@plt>
   11414:	movw	r3, #33176	; 0x8198
   11418:	movt	r3, #2
   1141c:	ldr	r2, [r3]
   11420:	mov	r1, r0
   11424:	mov	r0, #1
   11428:	bl	10f14 <__printf_chk@plt>
   1142c:	mov	r2, #5
   11430:	movw	r1, #27444	; 0x6b34
   11434:	movt	r1, #1
   11438:	mov	r0, #0
   1143c:	bl	10dd0 <dcgettext@plt>
   11440:	movw	r4, #33124	; 0x8164
   11444:	movt	r4, #2
   11448:	ldr	r1, [r4]
   1144c:	bl	10d34 <fputs_unlocked@plt>
   11450:	mov	r2, #5
   11454:	movw	r1, #27620	; 0x6be4
   11458:	movt	r1, #1
   1145c:	mov	r0, #0
   11460:	bl	10dd0 <dcgettext@plt>
   11464:	ldr	r1, [r4]
   11468:	bl	10d34 <fputs_unlocked@plt>
   1146c:	mov	r2, #5
   11470:	movw	r1, #27696	; 0x6c30
   11474:	movt	r1, #1
   11478:	mov	r0, #0
   1147c:	bl	10dd0 <dcgettext@plt>
   11480:	ldr	r1, [r4]
   11484:	bl	10d34 <fputs_unlocked@plt>
   11488:	mov	r2, #5
   1148c:	movw	r1, #27836	; 0x6cbc
   11490:	movt	r1, #1
   11494:	mov	r0, #0
   11498:	bl	10dd0 <dcgettext@plt>
   1149c:	ldr	r1, [r4]
   114a0:	bl	10d34 <fputs_unlocked@plt>
   114a4:	mov	r2, #5
   114a8:	movw	r1, #28084	; 0x6db4
   114ac:	movt	r1, #1
   114b0:	mov	r0, #0
   114b4:	bl	10dd0 <dcgettext@plt>
   114b8:	ldr	r1, [r4]
   114bc:	bl	10d34 <fputs_unlocked@plt>
   114c0:	mov	r2, #5
   114c4:	movw	r1, #28144	; 0x6df0
   114c8:	movt	r1, #1
   114cc:	mov	r0, #0
   114d0:	bl	10dd0 <dcgettext@plt>
   114d4:	ldr	r1, [r4]
   114d8:	bl	10d34 <fputs_unlocked@plt>
   114dc:	mov	r2, #5
   114e0:	movw	r1, #28296	; 0x6e88
   114e4:	movt	r1, #1
   114e8:	mov	r0, #0
   114ec:	bl	10dd0 <dcgettext@plt>
   114f0:	ldr	r1, [r4]
   114f4:	bl	10d34 <fputs_unlocked@plt>
   114f8:	mov	r2, #5
   114fc:	movw	r1, #28476	; 0x6f3c
   11500:	movt	r1, #1
   11504:	mov	r0, #0
   11508:	bl	10dd0 <dcgettext@plt>
   1150c:	ldr	r1, [r4]
   11510:	bl	10d34 <fputs_unlocked@plt>
   11514:	mov	r2, #5
   11518:	movw	r1, #28540	; 0x6f7c
   1151c:	movt	r1, #1
   11520:	mov	r0, #0
   11524:	bl	10dd0 <dcgettext@plt>
   11528:	ldr	r1, [r4]
   1152c:	bl	10d34 <fputs_unlocked@plt>
   11530:	mov	r2, #5
   11534:	movw	r1, #28608	; 0x6fc0
   11538:	movt	r1, #1
   1153c:	mov	r0, #0
   11540:	bl	10dd0 <dcgettext@plt>
   11544:	ldr	r1, [r4]
   11548:	bl	10d34 <fputs_unlocked@plt>
   1154c:	mov	r2, #5
   11550:	movw	r1, #28656	; 0x6ff0
   11554:	movt	r1, #1
   11558:	mov	r0, #0
   1155c:	bl	10dd0 <dcgettext@plt>
   11560:	ldr	r1, [r4]
   11564:	bl	10d34 <fputs_unlocked@plt>
   11568:	mov	r2, #5
   1156c:	movw	r1, #28712	; 0x7028
   11570:	movt	r1, #1
   11574:	mov	r0, #0
   11578:	bl	10dd0 <dcgettext@plt>
   1157c:	ldr	r1, [r4]
   11580:	bl	10d34 <fputs_unlocked@plt>
   11584:	mov	r2, #5
   11588:	movw	r1, #28832	; 0x70a0
   1158c:	movt	r1, #1
   11590:	mov	r0, #0
   11594:	bl	10dd0 <dcgettext@plt>
   11598:	ldr	r1, [r4]
   1159c:	bl	10d34 <fputs_unlocked@plt>
   115a0:	movw	r0, #27012	; 0x6984
   115a4:	movt	r0, #1
   115a8:	ldr	r1, [r0]
   115ac:	ldr	r3, [r0, #4]
   115b0:	str	r1, [sp]
   115b4:	str	r3, [sp, #4]
   115b8:	ldrd	r2, [r0, #8]
   115bc:	strd	r2, [sp, #8]
   115c0:	ldrd	r2, [r0, #16]
   115c4:	strd	r2, [sp, #16]
   115c8:	ldrd	r2, [r0, #24]
   115cc:	strd	r2, [sp, #24]
   115d0:	ldrd	r2, [r0, #32]
   115d4:	strd	r2, [sp, #32]
   115d8:	ldrd	r2, [r0, #40]	; 0x28
   115dc:	strd	r2, [sp, #40]	; 0x28
   115e0:	ldrd	r2, [r0, #48]	; 0x30
   115e4:	strd	r2, [sp, #48]	; 0x30
   115e8:	cmp	r1, #0
   115ec:	moveq	r4, sp
   115f0:	beq	1161c <__assert_fail@plt+0x660>
   115f4:	mov	r4, sp
   115f8:	movw	r6, #27356	; 0x6adc
   115fc:	movt	r6, #1
   11600:	mov	r0, r6
   11604:	bl	10d40 <strcmp@plt>
   11608:	cmp	r0, #0
   1160c:	beq	1161c <__assert_fail@plt+0x660>
   11610:	ldr	r1, [r4, #8]!
   11614:	cmp	r1, #0
   11618:	bne	11600 <__assert_fail@plt+0x644>
   1161c:	ldr	r4, [r4, #4]
   11620:	cmp	r4, #0
   11624:	beq	11780 <__assert_fail@plt+0x7c4>
   11628:	mov	r2, #5
   1162c:	movw	r1, #28976	; 0x7130
   11630:	movt	r1, #1
   11634:	mov	r0, #0
   11638:	bl	10dd0 <dcgettext@plt>
   1163c:	movw	r3, #29000	; 0x7148
   11640:	movt	r3, #1
   11644:	movw	r2, #29040	; 0x7170
   11648:	movt	r2, #1
   1164c:	mov	r1, r0
   11650:	mov	r0, #1
   11654:	bl	10f14 <__printf_chk@plt>
   11658:	mov	r1, #0
   1165c:	mov	r0, #5
   11660:	bl	10f68 <setlocale@plt>
   11664:	cmp	r0, #0
   11668:	beq	11684 <__assert_fail@plt+0x6c8>
   1166c:	mov	r2, #3
   11670:	movw	r1, #29056	; 0x7180
   11674:	movt	r1, #1
   11678:	bl	10f98 <strncmp@plt>
   1167c:	cmp	r0, #0
   11680:	bne	11700 <__assert_fail@plt+0x744>
   11684:	mov	r2, #5
   11688:	movw	r1, #29132	; 0x71cc
   1168c:	movt	r1, #1
   11690:	mov	r0, #0
   11694:	bl	10dd0 <dcgettext@plt>
   11698:	movw	r6, #27356	; 0x6adc
   1169c:	movt	r6, #1
   116a0:	mov	r3, r6
   116a4:	movw	r2, #29000	; 0x7148
   116a8:	movt	r2, #1
   116ac:	mov	r1, r0
   116b0:	mov	r0, #1
   116b4:	bl	10f14 <__printf_chk@plt>
   116b8:	mov	r2, #5
   116bc:	movw	r1, #29160	; 0x71e8
   116c0:	movt	r1, #1
   116c4:	mov	r0, #0
   116c8:	bl	10dd0 <dcgettext@plt>
   116cc:	mov	r1, r0
   116d0:	movw	r2, #29664	; 0x73e0
   116d4:	movt	r2, #1
   116d8:	movw	r3, #27616	; 0x6be0
   116dc:	movt	r3, #1
   116e0:	cmp	r4, r6
   116e4:	moveq	r3, r2
   116e8:	mov	r2, r4
   116ec:	mov	r0, #1
   116f0:	bl	10f14 <__printf_chk@plt>
   116f4:	b	113f8 <__assert_fail@plt+0x43c>
   116f8:	movw	r4, #27356	; 0x6adc
   116fc:	movt	r4, #1
   11700:	mov	r2, #5
   11704:	movw	r1, #29060	; 0x7184
   11708:	movt	r1, #1
   1170c:	mov	r0, #0
   11710:	bl	10dd0 <dcgettext@plt>
   11714:	movw	r3, #33124	; 0x8164
   11718:	movt	r3, #2
   1171c:	ldr	r1, [r3]
   11720:	bl	10d34 <fputs_unlocked@plt>
   11724:	b	11684 <__assert_fail@plt+0x6c8>
   11728:	mov	r2, #5
   1172c:	movw	r1, #29132	; 0x71cc
   11730:	movt	r1, #1
   11734:	mov	r0, #0
   11738:	bl	10dd0 <dcgettext@plt>
   1173c:	movw	r4, #27356	; 0x6adc
   11740:	movt	r4, #1
   11744:	mov	r3, r4
   11748:	movw	r2, #29000	; 0x7148
   1174c:	movt	r2, #1
   11750:	mov	r1, r0
   11754:	mov	r0, #1
   11758:	bl	10f14 <__printf_chk@plt>
   1175c:	mov	r2, #5
   11760:	movw	r1, #29160	; 0x71e8
   11764:	movt	r1, #1
   11768:	mov	r0, #0
   1176c:	bl	10dd0 <dcgettext@plt>
   11770:	mov	r1, r0
   11774:	movw	r3, #29664	; 0x73e0
   11778:	movt	r3, #1
   1177c:	b	116e8 <__assert_fail@plt+0x72c>
   11780:	mov	r2, #5
   11784:	movw	r1, #28976	; 0x7130
   11788:	movt	r1, #1
   1178c:	mov	r0, #0
   11790:	bl	10dd0 <dcgettext@plt>
   11794:	movw	r3, #29000	; 0x7148
   11798:	movt	r3, #1
   1179c:	movw	r2, #29040	; 0x7170
   117a0:	movt	r2, #1
   117a4:	mov	r1, r0
   117a8:	mov	r0, #1
   117ac:	bl	10f14 <__printf_chk@plt>
   117b0:	mov	r1, #0
   117b4:	mov	r0, #5
   117b8:	bl	10f68 <setlocale@plt>
   117bc:	cmp	r0, #0
   117c0:	beq	11728 <__assert_fail@plt+0x76c>
   117c4:	mov	r2, #3
   117c8:	movw	r1, #29056	; 0x7180
   117cc:	movt	r1, #1
   117d0:	bl	10f98 <strncmp@plt>
   117d4:	cmp	r0, #0
   117d8:	bne	116f8 <__assert_fail@plt+0x73c>
   117dc:	mov	r2, #5
   117e0:	movw	r1, #29132	; 0x71cc
   117e4:	movt	r1, #1
   117e8:	mov	r0, #0
   117ec:	bl	10dd0 <dcgettext@plt>
   117f0:	movw	r4, #27356	; 0x6adc
   117f4:	movt	r4, #1
   117f8:	mov	r3, r4
   117fc:	movw	r2, #29000	; 0x7148
   11800:	movt	r2, #1
   11804:	mov	r1, r0
   11808:	mov	r0, #1
   1180c:	bl	10f14 <__printf_chk@plt>
   11810:	mov	r2, #5
   11814:	movw	r1, #29160	; 0x71e8
   11818:	movt	r1, #1
   1181c:	mov	r0, #0
   11820:	bl	10dd0 <dcgettext@plt>
   11824:	mov	r1, r0
   11828:	movw	r3, #29664	; 0x73e0
   1182c:	movt	r3, #1
   11830:	b	116e8 <__assert_fail@plt+0x72c>
   11834:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11838:	strd	r6, [sp, #8]
   1183c:	strd	r8, [sp, #16]
   11840:	strd	sl, [sp, #24]
   11844:	str	lr, [sp, #32]
   11848:	sub	sp, sp, #92	; 0x5c
   1184c:	mov	r7, r0
   11850:	mov	r6, r1
   11854:	movw	r0, #29212	; 0x721c
   11858:	movt	r0, #1
   1185c:	bl	10e60 <getenv@plt>
   11860:	adds	r8, r0, #0
   11864:	movne	r8, #1
   11868:	movw	r3, #29228	; 0x722c
   1186c:	movt	r3, #1
   11870:	str	r3, [sp, #84]	; 0x54
   11874:	str	r3, [sp, #80]	; 0x50
   11878:	ldr	r0, [r6]
   1187c:	bl	1313c <__assert_fail@plt+0x2180>
   11880:	movw	r1, #27616	; 0x6be0
   11884:	movt	r1, #1
   11888:	mov	r0, #6
   1188c:	bl	10f68 <setlocale@plt>
   11890:	movw	r4, #29044	; 0x7174
   11894:	movt	r4, #1
   11898:	movw	r1, #29232	; 0x7230
   1189c:	movt	r1, #1
   118a0:	mov	r0, r4
   118a4:	bl	10f8c <bindtextdomain@plt>
   118a8:	mov	r0, r4
   118ac:	bl	10df4 <textdomain@plt>
   118b0:	movw	r0, #10532	; 0x2924
   118b4:	movt	r0, #1
   118b8:	bl	16960 <__assert_fail@plt+0x59a4>
   118bc:	movw	r3, #33136	; 0x8170
   118c0:	movt	r3, #2
   118c4:	mov	r4, #0
   118c8:	str	r4, [r3, #20]
   118cc:	str	r4, [r3, #16]
   118d0:	mvn	r2, #0
   118d4:	str	r2, [r3, #8]
   118d8:	mov	r2, #1
   118dc:	strb	r2, [r3, #1]
   118e0:	strb	r2, [r3]
   118e4:	strb	r4, [r3, #2]
   118e8:	str	r2, [r3, #4]
   118ec:	str	r4, [r3, #24]
   118f0:	str	r4, [sp, #20]
   118f4:	mov	r3, #10
   118f8:	str	r3, [sp, #16]
   118fc:	mov	r5, r4
   11900:	str	r4, [sp, #24]
   11904:	movw	r9, #27012	; 0x6984
   11908:	movt	r9, #1
   1190c:	add	fp, r9, #56	; 0x38
   11910:	movw	sl, #39321	; 0x9999
   11914:	movt	sl, #6553	; 0x1999
   11918:	b	11968 <__assert_fail@plt+0x9ac>
   1191c:	mov	r3, #0
   11920:	str	r3, [sp, #16]
   11924:	b	11968 <__assert_fail@plt+0x9ac>
   11928:	movw	r3, #33104	; 0x8150
   1192c:	movt	r3, #2
   11930:	ldr	r3, [r3]
   11934:	cmp	r3, r7
   11938:	bge	11e34 <__assert_fail@plt+0xe78>
   1193c:	cmp	r5, #2
   11940:	beq	11a0c <__assert_fail@plt+0xa50>
   11944:	movw	r2, #33104	; 0x8150
   11948:	movt	r2, #2
   1194c:	add	r1, r3, #1
   11950:	str	r1, [r2]
   11954:	add	r2, sp, #88	; 0x58
   11958:	add	r2, r2, r5, lsl #2
   1195c:	ldr	r3, [r6, r3, lsl #2]
   11960:	str	r3, [r2, #-8]
   11964:	add	r5, r5, #1
   11968:	cmn	r4, #1
   1196c:	beq	11928 <__assert_fail@plt+0x96c>
   11970:	cmp	r5, #0
   11974:	movne	r3, r8
   11978:	moveq	r3, #0
   1197c:	cmp	r3, #0
   11980:	bne	11928 <__assert_fail@plt+0x96c>
   11984:	str	r3, [sp]
   11988:	mov	r3, fp
   1198c:	movw	r2, #29256	; 0x7248
   11990:	movt	r2, #1
   11994:	mov	r1, r6
   11998:	mov	r0, r7
   1199c:	bl	10eb4 <getopt_long@plt>
   119a0:	mov	r4, r0
   119a4:	cmn	r0, #1
   119a8:	beq	11928 <__assert_fail@plt+0x96c>
   119ac:	cmp	r0, #100	; 0x64
   119b0:	beq	11c54 <__assert_fail@plt+0xc98>
   119b4:	ble	11a54 <__assert_fail@plt+0xa98>
   119b8:	cmp	r0, #117	; 0x75
   119bc:	beq	11dbc <__assert_fail@plt+0xe00>
   119c0:	bgt	11ab0 <__assert_fail@plt+0xaf4>
   119c4:	cmp	r0, #105	; 0x69
   119c8:	beq	11d80 <__assert_fail@plt+0xdc4>
   119cc:	cmp	r0, #115	; 0x73
   119d0:	beq	11d94 <__assert_fail@plt+0xdd8>
   119d4:	cmp	r0, #102	; 0x66
   119d8:	bne	11a7c <__assert_fail@plt+0xac0>
   119dc:	movw	r3, #33128	; 0x8168
   119e0:	movt	r3, #2
   119e4:	movw	r1, #29324	; 0x728c
   119e8:	movt	r1, #1
   119ec:	ldr	r0, [r3]
   119f0:	bl	110b8 <__assert_fail@plt+0xfc>
   119f4:	movw	r3, #33136	; 0x8170
   119f8:	movt	r3, #2
   119fc:	str	r0, [r3, #16]
   11a00:	mov	r3, #2
   11a04:	str	r3, [sp, #24]
   11a08:	b	11968 <__assert_fail@plt+0x9ac>
   11a0c:	mov	r2, #5
   11a10:	movw	r1, #29280	; 0x7260
   11a14:	movt	r1, #1
   11a18:	mov	r0, #0
   11a1c:	bl	10dd0 <dcgettext@plt>
   11a20:	mov	r4, r0
   11a24:	movw	r3, #33104	; 0x8150
   11a28:	movt	r3, #2
   11a2c:	ldr	r3, [r3]
   11a30:	ldr	r0, [r6, r3, lsl #2]
   11a34:	bl	15438 <__assert_fail@plt+0x447c>
   11a38:	mov	r3, r0
   11a3c:	mov	r2, r4
   11a40:	mov	r1, #0
   11a44:	mov	r0, r1
   11a48:	bl	10e48 <error@plt>
   11a4c:	mov	r0, #1
   11a50:	bl	113ac <__assert_fail@plt+0x3f0>
   11a54:	cmp	r0, #57	; 0x39
   11a58:	bgt	11a84 <__assert_fail@plt+0xac8>
   11a5c:	cmp	r0, #48	; 0x30
   11a60:	bge	11be8 <__assert_fail@plt+0xc2c>
   11a64:	cmn	r0, #2
   11a68:	beq	11dd8 <__assert_fail@plt+0xe1c>
   11a6c:	cmp	r0, #1
   11a70:	beq	11af0 <__assert_fail@plt+0xb34>
   11a74:	cmn	r0, #3
   11a78:	beq	11de0 <__assert_fail@plt+0xe24>
   11a7c:	mov	r0, #1
   11a80:	bl	113ac <__assert_fail@plt+0x3f0>
   11a84:	cmp	r0, #68	; 0x44
   11a88:	beq	11c70 <__assert_fail@plt+0xcb4>
   11a8c:	cmp	r0, #99	; 0x63
   11a90:	bne	11a7c <__assert_fail@plt+0xac0>
   11a94:	movw	r3, #33136	; 0x8170
   11a98:	movt	r3, #2
   11a9c:	mov	r2, #0
   11aa0:	str	r2, [r3, #4]
   11aa4:	mov	r3, #1
   11aa8:	str	r3, [sp, #20]
   11aac:	b	11968 <__assert_fail@plt+0x9ac>
   11ab0:	cmp	r0, #122	; 0x7a
   11ab4:	beq	1191c <__assert_fail@plt+0x960>
   11ab8:	cmp	r0, #256	; 0x100
   11abc:	beq	11d0c <__assert_fail@plt+0xd50>
   11ac0:	cmp	r0, #119	; 0x77
   11ac4:	bne	11a7c <__assert_fail@plt+0xac0>
   11ac8:	movw	r3, #33128	; 0x8168
   11acc:	movt	r3, #2
   11ad0:	movw	r1, #29392	; 0x72d0
   11ad4:	movt	r1, #1
   11ad8:	ldr	r0, [r3]
   11adc:	bl	110b8 <__assert_fail@plt+0xfc>
   11ae0:	movw	r3, #33136	; 0x8170
   11ae4:	movt	r3, #2
   11ae8:	str	r0, [r3, #8]
   11aec:	b	11968 <__assert_fail@plt+0x9ac>
   11af0:	movw	r3, #33128	; 0x8168
   11af4:	movt	r3, #2
   11af8:	ldr	r3, [r3]
   11afc:	ldrb	r3, [r3]
   11b00:	cmp	r3, #43	; 0x2b
   11b04:	beq	11b30 <__assert_fail@plt+0xb74>
   11b08:	cmp	r5, #2
   11b0c:	beq	11ba4 <__assert_fail@plt+0xbe8>
   11b10:	add	r3, sp, #88	; 0x58
   11b14:	add	r2, r3, r5, lsl #2
   11b18:	movw	r3, #33128	; 0x8168
   11b1c:	movt	r3, #2
   11b20:	ldr	r3, [r3]
   11b24:	str	r3, [r2, #-8]
   11b28:	add	r5, r5, #1
   11b2c:	b	11968 <__assert_fail@plt+0x9ac>
   11b30:	bl	130cc <__assert_fail@plt+0x2110>
   11b34:	sub	r0, r0, #199680	; 0x30c00
   11b38:	sub	r0, r0, #432	; 0x1b0
   11b3c:	cmp	r0, #696	; 0x2b8
   11b40:	bls	11b08 <__assert_fail@plt+0xb4c>
   11b44:	movw	r0, #33128	; 0x8168
   11b48:	movt	r0, #2
   11b4c:	movw	r3, #27616	; 0x6be0
   11b50:	movt	r3, #1
   11b54:	str	r3, [sp]
   11b58:	add	r3, sp, #64	; 0x40
   11b5c:	mov	r2, #10
   11b60:	mov	r1, #0
   11b64:	ldr	r0, [r0]
   11b68:	bl	16008 <__assert_fail@plt+0x504c>
   11b6c:	cmp	r0, #0
   11b70:	bne	11b08 <__assert_fail@plt+0xb4c>
   11b74:	ldrd	r2, [sp, #64]	; 0x40
   11b78:	mvn	r0, #0
   11b7c:	mov	r1, #0
   11b80:	strd	r2, [sp, #32]
   11b84:	cmp	r3, r1
   11b88:	cmpeq	r2, r0
   11b8c:	bhi	11b08 <__assert_fail@plt+0xb4c>
   11b90:	movw	r3, #33136	; 0x8170
   11b94:	movt	r3, #2
   11b98:	ldr	r2, [sp, #32]
   11b9c:	str	r2, [r3, #20]
   11ba0:	b	11968 <__assert_fail@plt+0x9ac>
   11ba4:	mov	r2, #5
   11ba8:	movw	r1, #29280	; 0x7260
   11bac:	movt	r1, #1
   11bb0:	mov	r0, #0
   11bb4:	bl	10dd0 <dcgettext@plt>
   11bb8:	mov	r4, r0
   11bbc:	movw	r3, #33128	; 0x8168
   11bc0:	movt	r3, #2
   11bc4:	ldr	r0, [r3]
   11bc8:	bl	15438 <__assert_fail@plt+0x447c>
   11bcc:	mov	r3, r0
   11bd0:	mov	r2, r4
   11bd4:	mov	r1, #0
   11bd8:	mov	r0, r1
   11bdc:	bl	10e48 <error@plt>
   11be0:	mov	r0, #1
   11be4:	bl	113ac <__assert_fail@plt+0x3f0>
   11be8:	ldr	r3, [sp, #24]
   11bec:	cmp	r3, #2
   11bf0:	subeq	r2, r0, #48	; 0x30
   11bf4:	beq	11c3c <__assert_fail@plt+0xc80>
   11bf8:	movw	r3, #33136	; 0x8170
   11bfc:	movt	r3, #2
   11c00:	ldr	r3, [r3, #16]
   11c04:	cmp	r3, sl
   11c08:	bls	11c28 <__assert_fail@plt+0xc6c>
   11c0c:	movw	r3, #33136	; 0x8170
   11c10:	movt	r3, #2
   11c14:	mvn	r2, #0
   11c18:	str	r2, [r3, #16]
   11c1c:	mov	r3, #1
   11c20:	str	r3, [sp, #24]
   11c24:	b	11968 <__assert_fail@plt+0x9ac>
   11c28:	sub	r1, r0, #48	; 0x30
   11c2c:	mov	r2, #10
   11c30:	mla	r2, r2, r3, r1
   11c34:	cmp	r3, r2
   11c38:	bhi	11c0c <__assert_fail@plt+0xc50>
   11c3c:	movw	r3, #33136	; 0x8170
   11c40:	movt	r3, #2
   11c44:	str	r2, [r3, #16]
   11c48:	mov	r3, #1
   11c4c:	str	r3, [sp, #24]
   11c50:	b	11968 <__assert_fail@plt+0x9ac>
   11c54:	movw	r3, #33136	; 0x8170
   11c58:	movt	r3, #2
   11c5c:	mov	r2, #0
   11c60:	strb	r2, [r3]
   11c64:	mov	r3, #1
   11c68:	str	r3, [sp, #20]
   11c6c:	b	11968 <__assert_fail@plt+0x9ac>
   11c70:	movw	r3, #33136	; 0x8170
   11c74:	movt	r3, #2
   11c78:	mov	r2, #0
   11c7c:	strb	r2, [r3]
   11c80:	mov	r2, #1
   11c84:	strb	r2, [r3, #2]
   11c88:	movw	r3, #33128	; 0x8168
   11c8c:	movt	r3, #2
   11c90:	ldr	r1, [r3]
   11c94:	cmp	r1, #0
   11c98:	beq	11cf0 <__assert_fail@plt+0xd34>
   11c9c:	mov	r3, #1
   11ca0:	str	r3, [sp, #8]
   11ca4:	movw	r3, #33020	; 0x80fc
   11ca8:	movt	r3, #2
   11cac:	ldr	r3, [r3]
   11cb0:	str	r3, [sp, #4]
   11cb4:	mov	r3, #4
   11cb8:	str	r3, [sp]
   11cbc:	add	r3, r9, #264	; 0x108
   11cc0:	add	r2, r9, #276	; 0x114
   11cc4:	movw	r0, #29300	; 0x7274
   11cc8:	movt	r0, #1
   11ccc:	bl	127fc <__assert_fail@plt+0x1840>
   11cd0:	movw	r3, #33136	; 0x8170
   11cd4:	movt	r3, #2
   11cd8:	add	r0, r9, r0, lsl #2
   11cdc:	ldr	r2, [r0, #264]	; 0x108
   11ce0:	str	r2, [r3, #24]
   11ce4:	mov	r3, #1
   11ce8:	str	r3, [sp, #20]
   11cec:	b	11968 <__assert_fail@plt+0x9ac>
   11cf0:	movw	r3, #33136	; 0x8170
   11cf4:	movt	r3, #2
   11cf8:	mov	r2, #0
   11cfc:	str	r2, [r3, #24]
   11d00:	mov	r3, #1
   11d04:	str	r3, [sp, #20]
   11d08:	b	11968 <__assert_fail@plt+0x9ac>
   11d0c:	movw	r3, #33128	; 0x8168
   11d10:	movt	r3, #2
   11d14:	ldr	r1, [r3]
   11d18:	cmp	r1, #0
   11d1c:	beq	11d6c <__assert_fail@plt+0xdb0>
   11d20:	mov	r3, #1
   11d24:	str	r3, [sp, #8]
   11d28:	movw	r3, #33020	; 0x80fc
   11d2c:	movt	r3, #2
   11d30:	ldr	r3, [r3]
   11d34:	str	r3, [sp, #4]
   11d38:	mov	r3, #4
   11d3c:	str	r3, [sp]
   11d40:	add	r3, r9, #292	; 0x124
   11d44:	add	r2, r9, #308	; 0x134
   11d48:	movw	r0, #29316	; 0x7284
   11d4c:	movt	r0, #1
   11d50:	bl	127fc <__assert_fail@plt+0x1840>
   11d54:	movw	r3, #33136	; 0x8170
   11d58:	movt	r3, #2
   11d5c:	add	r0, r9, r0, lsl #2
   11d60:	ldr	r2, [r0, #292]	; 0x124
   11d64:	str	r2, [r3, #28]
   11d68:	b	11968 <__assert_fail@plt+0x9ac>
   11d6c:	movw	r3, #33136	; 0x8170
   11d70:	movt	r3, #2
   11d74:	mov	r2, #3
   11d78:	str	r2, [r3, #28]
   11d7c:	b	11968 <__assert_fail@plt+0x9ac>
   11d80:	movw	r3, #33136	; 0x8170
   11d84:	movt	r3, #2
   11d88:	mov	r2, #1
   11d8c:	strb	r2, [r3, #12]
   11d90:	b	11968 <__assert_fail@plt+0x9ac>
   11d94:	movw	r3, #33128	; 0x8168
   11d98:	movt	r3, #2
   11d9c:	movw	r1, #29360	; 0x72b0
   11da0:	movt	r1, #1
   11da4:	ldr	r0, [r3]
   11da8:	bl	110b8 <__assert_fail@plt+0xfc>
   11dac:	movw	r3, #33136	; 0x8170
   11db0:	movt	r3, #2
   11db4:	str	r0, [r3, #20]
   11db8:	b	11968 <__assert_fail@plt+0x9ac>
   11dbc:	movw	r3, #33136	; 0x8170
   11dc0:	movt	r3, #2
   11dc4:	mov	r2, #0
   11dc8:	strb	r2, [r3, #1]
   11dcc:	mov	r3, #1
   11dd0:	str	r3, [sp, #20]
   11dd4:	b	11968 <__assert_fail@plt+0x9ac>
   11dd8:	mov	r0, #0
   11ddc:	bl	113ac <__assert_fail@plt+0x3f0>
   11de0:	movw	r3, #33016	; 0x80f8
   11de4:	movt	r3, #2
   11de8:	movw	r0, #33124	; 0x8164
   11dec:	movt	r0, #2
   11df0:	mov	r4, #0
   11df4:	str	r4, [sp, #8]
   11df8:	movw	r2, #29428	; 0x72f4
   11dfc:	movt	r2, #1
   11e00:	str	r2, [sp, #4]
   11e04:	movw	r2, #29444	; 0x7304
   11e08:	movt	r2, #1
   11e0c:	str	r2, [sp]
   11e10:	ldr	r3, [r3]
   11e14:	movw	r2, #29040	; 0x7170
   11e18:	movt	r2, #1
   11e1c:	movw	r1, #27356	; 0x6adc
   11e20:	movt	r1, #1
   11e24:	ldr	r0, [r0]
   11e28:	bl	15934 <__assert_fail@plt+0x4978>
   11e2c:	mov	r0, r4
   11e30:	bl	10ecc <exit@plt>
   11e34:	movw	r3, #33136	; 0x8170
   11e38:	movt	r3, #2
   11e3c:	ldr	r3, [r3, #28]
   11e40:	ldr	r2, [sp, #20]
   11e44:	cmp	r3, #0
   11e48:	moveq	r2, #0
   11e4c:	str	r2, [sp, #40]	; 0x28
   11e50:	cmp	r2, #0
   11e54:	bne	11ea0 <__assert_fail@plt+0xee4>
   11e58:	cmp	r3, #0
   11e5c:	beq	11ecc <__assert_fail@plt+0xf10>
   11e60:	movw	r3, #33136	; 0x8170
   11e64:	movt	r3, #2
   11e68:	ldr	r3, [r3, #4]
   11e6c:	cmp	r3, #1
   11e70:	beq	11ef4 <__assert_fail@plt+0xf38>
   11e74:	mov	r2, #5
   11e78:	movw	r1, #29512	; 0x7348
   11e7c:	movt	r1, #1
   11e80:	mov	r0, #0
   11e84:	bl	10dd0 <dcgettext@plt>
   11e88:	mov	r2, r0
   11e8c:	mov	r1, #0
   11e90:	mov	r0, r1
   11e94:	bl	10e48 <error@plt>
   11e98:	mov	r0, #1
   11e9c:	bl	113ac <__assert_fail@plt+0x3f0>
   11ea0:	mov	r2, #5
   11ea4:	movw	r1, #29464	; 0x7318
   11ea8:	movt	r1, #1
   11eac:	mov	r0, #0
   11eb0:	bl	10dd0 <dcgettext@plt>
   11eb4:	mov	r2, r0
   11eb8:	mov	r1, #0
   11ebc:	mov	r0, r1
   11ec0:	bl	10e48 <error@plt>
   11ec4:	mov	r0, #1
   11ec8:	bl	113ac <__assert_fail@plt+0x3f0>
   11ecc:	movw	r3, #33136	; 0x8170
   11ed0:	movt	r3, #2
   11ed4:	ldr	r3, [r3, #4]
   11ed8:	cmp	r3, #0
   11edc:	bne	11ef4 <__assert_fail@plt+0xf38>
   11ee0:	movw	r3, #33136	; 0x8170
   11ee4:	movt	r3, #2
   11ee8:	ldrb	r3, [r3, #2]
   11eec:	cmp	r3, #0
   11ef0:	bne	12028 <__assert_fail@plt+0x106c>
   11ef4:	ldr	r3, [sp, #80]	; 0x50
   11ef8:	str	r3, [sp, #44]	; 0x2c
   11efc:	ldr	r4, [sp, #84]	; 0x54
   11f00:	movw	r1, #29228	; 0x722c
   11f04:	movt	r1, #1
   11f08:	mov	r0, r3
   11f0c:	bl	10d40 <strcmp@plt>
   11f10:	cmp	r0, #0
   11f14:	bne	12054 <__assert_fail@plt+0x1098>
   11f18:	movw	r1, #29228	; 0x722c
   11f1c:	movt	r1, #1
   11f20:	mov	r0, r4
   11f24:	bl	10d40 <strcmp@plt>
   11f28:	cmp	r0, #0
   11f2c:	beq	11f54 <__assert_fail@plt+0xf98>
   11f30:	movw	r3, #33124	; 0x8164
   11f34:	movt	r3, #2
   11f38:	ldr	r2, [r3]
   11f3c:	movw	r1, #29632	; 0x73c0
   11f40:	movt	r1, #1
   11f44:	mov	r0, r4
   11f48:	bl	12c88 <__assert_fail@plt+0x1ccc>
   11f4c:	cmp	r0, #0
   11f50:	beq	120a8 <__assert_fail@plt+0x10ec>
   11f54:	movw	r3, #33120	; 0x8160
   11f58:	movt	r3, #2
   11f5c:	mov	r1, #2
   11f60:	ldr	r0, [r3]
   11f64:	bl	12a64 <__assert_fail@plt+0x1aa8>
   11f68:	add	r0, sp, #52	; 0x34
   11f6c:	bl	12ee8 <__assert_fail@plt+0x1f2c>
   11f70:	add	r0, sp, #64	; 0x40
   11f74:	bl	12ee8 <__assert_fail@plt+0x1f2c>
   11f78:	movw	r3, #33136	; 0x8170
   11f7c:	movt	r3, #2
   11f80:	ldrb	r3, [r3]
   11f84:	cmp	r3, #0
   11f88:	beq	11fb4 <__assert_fail@plt+0xff8>
   11f8c:	movw	r3, #33136	; 0x8170
   11f90:	movt	r3, #2
   11f94:	ldrb	r8, [r3, #1]
   11f98:	cmp	r8, #0
   11f9c:	beq	11fb4 <__assert_fail@plt+0xff8>
   11fa0:	movw	r3, #33136	; 0x8170
   11fa4:	movt	r3, #2
   11fa8:	ldr	r3, [r3, #4]
   11fac:	cmp	r3, #1
   11fb0:	beq	121d8 <__assert_fail@plt+0x121c>
   11fb4:	movw	r3, #33120	; 0x8160
   11fb8:	movt	r3, #2
   11fbc:	ldr	r2, [sp, #16]
   11fc0:	ldr	r1, [r3]
   11fc4:	add	r0, sp, #64	; 0x40
   11fc8:	bl	12efc <__assert_fail@plt+0x1f40>
   11fcc:	cmp	r0, #0
   11fd0:	beq	12290 <__assert_fail@plt+0x12d4>
   11fd4:	add	r0, sp, #64	; 0x40
   11fd8:	bl	11264 <__assert_fail@plt+0x2a8>
   11fdc:	str	r0, [sp, #20]
   11fe0:	ldr	r2, [sp, #68]	; 0x44
   11fe4:	sub	r2, r2, #1
   11fe8:	ldr	r3, [sp, #72]	; 0x48
   11fec:	sub	r3, r0, r3
   11ff0:	sub	r3, r2, r3
   11ff4:	str	r3, [sp, #24]
   11ff8:	mov	r3, #1
   11ffc:	str	r3, [sp, #32]
   12000:	mov	r4, #0
   12004:	mov	r5, #0
   12008:	add	r3, sp, #64	; 0x40
   1200c:	str	r3, [sp, #28]
   12010:	add	r7, sp, #52	; 0x34
   12014:	movw	fp, #33120	; 0x8160
   12018:	movt	fp, #2
   1201c:	movw	sl, #33136	; 0x8170
   12020:	movt	sl, #2
   12024:	b	12358 <__assert_fail@plt+0x139c>
   12028:	mov	r2, #5
   1202c:	movw	r1, #29564	; 0x737c
   12030:	movt	r1, #1
   12034:	mov	r0, #0
   12038:	bl	10dd0 <dcgettext@plt>
   1203c:	mov	r2, r0
   12040:	mov	r1, #0
   12044:	mov	r0, r1
   12048:	bl	10e48 <error@plt>
   1204c:	mov	r0, #1
   12050:	bl	113ac <__assert_fail@plt+0x3f0>
   12054:	movw	r3, #33120	; 0x8160
   12058:	movt	r3, #2
   1205c:	ldr	r2, [r3]
   12060:	movw	r1, #29628	; 0x73bc
   12064:	movt	r1, #1
   12068:	ldr	r0, [sp, #44]	; 0x2c
   1206c:	bl	12c88 <__assert_fail@plt+0x1ccc>
   12070:	cmp	r0, #0
   12074:	bne	11f18 <__assert_fail@plt+0xf5c>
   12078:	bl	10ef0 <__errno_location@plt>
   1207c:	ldr	r4, [r0]
   12080:	ldr	r2, [sp, #44]	; 0x2c
   12084:	mov	r1, #3
   12088:	mov	r0, #0
   1208c:	bl	1526c <__assert_fail@plt+0x42b0>
   12090:	mov	r3, r0
   12094:	movw	r2, #27344	; 0x6ad0
   12098:	movt	r2, #1
   1209c:	mov	r1, r4
   120a0:	mov	r0, #1
   120a4:	bl	10e48 <error@plt>
   120a8:	bl	10ef0 <__errno_location@plt>
   120ac:	ldr	r5, [r0]
   120b0:	mov	r2, r4
   120b4:	mov	r1, #3
   120b8:	mov	r0, #0
   120bc:	bl	1526c <__assert_fail@plt+0x42b0>
   120c0:	mov	r3, r0
   120c4:	movw	r2, #27344	; 0x6ad0
   120c8:	movt	r2, #1
   120cc:	mov	r1, r5
   120d0:	mov	r0, #1
   120d4:	bl	10e48 <error@plt>
   120d8:	ldr	r3, [sl, #28]
   120dc:	cmp	r3, #0
   120e0:	beq	1212c <__assert_fail@plt+0x1170>
   120e4:	cmp	r3, #4
   120e8:	cmpne	r3, #1
   120ec:	beq	12108 <__assert_fail@plt+0x114c>
   120f0:	ldr	r2, [sp, #40]	; 0x28
   120f4:	cmp	r2, #0
   120f8:	beq	1212c <__assert_fail@plt+0x1170>
   120fc:	sub	r3, r3, #2
   12100:	cmp	r3, #1
   12104:	bhi	1212c <__assert_fail@plt+0x1170>
   12108:	ldr	r0, [fp]
   1210c:	ldr	r3, [r0, #20]
   12110:	ldr	r2, [r0, #24]
   12114:	cmp	r3, r2
   12118:	addcc	r2, r3, #1
   1211c:	strcc	r2, [r0, #20]
   12120:	ldrcc	r2, [sp, #16]
   12124:	strbcc	r2, [r3]
   12128:	bcs	121cc <__assert_fail@plt+0x1210>
   1212c:	ldr	r3, [fp]
   12130:	ldr	r2, [r4, #4]
   12134:	mov	r1, #1
   12138:	ldr	r0, [r4, #8]
   1213c:	bl	10dac <fwrite_unlocked@plt>
   12140:	str	r8, [sp, #40]	; 0x28
   12144:	str	r5, [sp, #28]
   12148:	mov	r7, r6
   1214c:	mov	r3, r4
   12150:	ldr	r4, [sp, #20]
   12154:	str	r3, [sp, #20]
   12158:	ldr	r1, [r9]
   1215c:	ldr	r3, [r1]
   12160:	tst	r3, #16
   12164:	bne	12204 <__assert_fail@plt+0x1248>
   12168:	ldr	r2, [sp, #16]
   1216c:	mov	r0, r4
   12170:	bl	12efc <__assert_fail@plt+0x1f40>
   12174:	cmp	r0, #0
   12178:	beq	12204 <__assert_fail@plt+0x1248>
   1217c:	mov	r0, r4
   12180:	bl	11264 <__assert_fail@plt+0x2a8>
   12184:	mov	r6, r0
   12188:	ldr	r5, [r4, #4]
   1218c:	sub	r5, r5, #1
   12190:	ldr	r3, [r4, #8]
   12194:	sub	r3, r0, r3
   12198:	sub	r5, r5, r3
   1219c:	cmp	r7, #0
   121a0:	beq	120d8 <__assert_fail@plt+0x111c>
   121a4:	ldr	r3, [sp, #28]
   121a8:	mov	r2, r5
   121ac:	mov	r1, r7
   121b0:	bl	111f0 <__assert_fail@plt+0x234>
   121b4:	cmp	r0, #0
   121b8:	bne	120d8 <__assert_fail@plt+0x111c>
   121bc:	ldr	r3, [sl, #28]
   121c0:	cmp	r3, #0
   121c4:	bne	1212c <__assert_fail@plt+0x1170>
   121c8:	b	12158 <__assert_fail@plt+0x119c>
   121cc:	ldr	r1, [sp, #16]
   121d0:	bl	10f5c <__overflow@plt>
   121d4:	b	1212c <__assert_fail@plt+0x1170>
   121d8:	mov	r7, #0
   121dc:	add	r3, sp, #64	; 0x40
   121e0:	str	r3, [sp, #20]
   121e4:	add	r4, sp, #52	; 0x34
   121e8:	movw	r9, #33120	; 0x8160
   121ec:	movt	r9, #2
   121f0:	movw	fp, #33124	; 0x8164
   121f4:	movt	fp, #2
   121f8:	movw	sl, #33136	; 0x8170
   121fc:	movt	sl, #2
   12200:	b	12158 <__assert_fail@plt+0x119c>
   12204:	movw	r3, #33136	; 0x8170
   12208:	movt	r3, #2
   1220c:	ldr	r3, [r3, #28]
   12210:	sub	r3, r3, #2
   12214:	bics	r3, r3, #2
   12218:	ldr	r3, [sp, #40]	; 0x28
   1221c:	movne	fp, #0
   12220:	andeq	fp, r3, #1
   12224:	cmp	fp, #0
   12228:	beq	12290 <__assert_fail@plt+0x12d4>
   1222c:	movw	r3, #33124	; 0x8164
   12230:	movt	r3, #2
   12234:	ldr	r0, [r3]
   12238:	ldr	r3, [r0, #20]
   1223c:	ldr	r2, [r0, #24]
   12240:	cmp	r3, r2
   12244:	addcc	r2, r3, #1
   12248:	strcc	r2, [r0, #20]
   1224c:	ldrcc	r2, [sp, #16]
   12250:	strbcc	r2, [r3]
   12254:	bcc	12290 <__assert_fail@plt+0x12d4>
   12258:	ldr	r1, [sp, #16]
   1225c:	bl	10f5c <__overflow@plt>
   12260:	b	12290 <__assert_fail@plt+0x12d4>
   12264:	movw	r3, #33120	; 0x8160
   12268:	movt	r3, #2
   1226c:	ldr	r3, [r3]
   12270:	ldr	r3, [r3]
   12274:	tst	r3, #32
   12278:	bne	1243c <__assert_fail@plt+0x1480>
   1227c:	mov	r2, r4
   12280:	mov	r3, r5
   12284:	mov	r1, #0
   12288:	ldr	r0, [sp, #28]
   1228c:	bl	11144 <__assert_fail@plt+0x188>
   12290:	movw	r3, #33120	; 0x8160
   12294:	movt	r3, #2
   12298:	ldr	r0, [r3]
   1229c:	ldr	r3, [r0]
   122a0:	tst	r3, #32
   122a4:	bne	1243c <__assert_fail@plt+0x1480>
   122a8:	bl	12aa4 <__assert_fail@plt+0x1ae8>
   122ac:	cmp	r0, #0
   122b0:	bne	1243c <__assert_fail@plt+0x1480>
   122b4:	ldr	r0, [sp, #60]	; 0x3c
   122b8:	bl	12bd0 <__assert_fail@plt+0x1c14>
   122bc:	ldr	r0, [sp, #72]	; 0x48
   122c0:	bl	12bd0 <__assert_fail@plt+0x1c14>
   122c4:	mov	r0, #0
   122c8:	add	sp, sp, #92	; 0x5c
   122cc:	ldrd	r4, [sp]
   122d0:	ldrd	r6, [sp, #8]
   122d4:	ldrd	r8, [sp, #16]
   122d8:	ldrd	sl, [sp, #24]
   122dc:	add	sp, sp, #32
   122e0:	pop	{pc}		; (ldr pc, [sp], #4)
   122e4:	cmp	r5, #0
   122e8:	cmpeq	r4, #1
   122ec:	bne	1234c <__assert_fail@plt+0x1390>
   122f0:	cmp	r3, #1
   122f4:	beq	1230c <__assert_fail@plt+0x1350>
   122f8:	ldr	r2, [sp, #32]
   122fc:	cmp	r3, #2
   12300:	orrne	r2, r2, #1
   12304:	tst	r2, #255	; 0xff
   12308:	bne	1234c <__assert_fail@plt+0x1390>
   1230c:	movw	r3, #33124	; 0x8164
   12310:	movt	r3, #2
   12314:	ldr	r0, [r3]
   12318:	ldr	r3, [r0, #20]
   1231c:	ldr	r2, [r0, #24]
   12320:	cmp	r3, r2
   12324:	addcc	r2, r3, #1
   12328:	strcc	r2, [r0, #20]
   1232c:	ldrcc	r2, [sp, #16]
   12330:	strbcc	r2, [r3]
   12334:	bcc	1234c <__assert_fail@plt+0x1390>
   12338:	ldr	r1, [sp, #16]
   1233c:	bl	10f5c <__overflow@plt>
   12340:	b	1234c <__assert_fail@plt+0x1390>
   12344:	cmp	r0, #0
   12348:	bne	12404 <__assert_fail@plt+0x1448>
   1234c:	ldrb	r3, [sl, #2]
   12350:	cmp	r3, #0
   12354:	bne	12474 <__assert_fail@plt+0x14b8>
   12358:	ldr	r1, [fp]
   1235c:	ldr	r3, [r1]
   12360:	tst	r3, #16
   12364:	bne	1227c <__assert_fail@plt+0x12c0>
   12368:	ldr	r2, [sp, #16]
   1236c:	mov	r0, r7
   12370:	bl	12efc <__assert_fail@plt+0x1f40>
   12374:	cmp	r0, #0
   12378:	beq	12264 <__assert_fail@plt+0x12a8>
   1237c:	mov	r0, r7
   12380:	bl	11264 <__assert_fail@plt+0x2a8>
   12384:	mov	r9, r0
   12388:	ldr	r6, [r7, #4]
   1238c:	sub	r6, r6, #1
   12390:	ldr	r3, [r7, #8]
   12394:	sub	r3, r0, r3
   12398:	sub	r6, r6, r3
   1239c:	ldr	r3, [sp, #24]
   123a0:	mov	r2, r6
   123a4:	ldr	r1, [sp, #20]
   123a8:	bl	111f0 <__assert_fail@plt+0x234>
   123ac:	eor	r8, r0, #1
   123b0:	uxtb	r8, r8
   123b4:	uxtb	r2, r8
   123b8:	mov	r3, #0
   123bc:	adds	r4, r4, r2
   123c0:	adc	r5, r5, r3
   123c4:	mvn	r2, #0
   123c8:	mvn	r3, #0
   123cc:	cmp	r5, r3
   123d0:	cmpeq	r4, r2
   123d4:	mvneq	r4, #1
   123d8:	mvneq	r5, #0
   123dc:	ldr	r3, [sl, #24]
   123e0:	cmp	r3, #0
   123e4:	beq	12344 <__assert_fail@plt+0x1388>
   123e8:	cmp	r0, #0
   123ec:	beq	122e4 <__assert_fail@plt+0x1328>
   123f0:	orrs	r3, r4, r5
   123f4:	ldr	r3, [sp, #32]
   123f8:	ldr	r2, [sp, #40]	; 0x28
   123fc:	movne	r3, r2
   12400:	str	r3, [sp, #32]
   12404:	mov	r2, r4
   12408:	mov	r3, r5
   1240c:	mov	r1, r8
   12410:	ldr	r4, [sp, #28]
   12414:	mov	r0, r4
   12418:	bl	11144 <__assert_fail@plt+0x188>
   1241c:	str	r6, [sp, #24]
   12420:	str	r9, [sp, #20]
   12424:	mov	r3, r7
   12428:	mov	r7, r4
   1242c:	str	r3, [sp, #28]
   12430:	mov	r4, #0
   12434:	mov	r5, #0
   12438:	b	12358 <__assert_fail@plt+0x139c>
   1243c:	mov	r2, #5
   12440:	movw	r1, #29636	; 0x73c4
   12444:	movt	r1, #1
   12448:	mov	r0, #0
   1244c:	bl	10dd0 <dcgettext@plt>
   12450:	mov	r4, r0
   12454:	ldr	r1, [sp, #44]	; 0x2c
   12458:	mov	r0, #4
   1245c:	bl	15148 <__assert_fail@plt+0x418c>
   12460:	mov	r3, r0
   12464:	mov	r2, r4
   12468:	mov	r1, #0
   1246c:	mov	r0, #1
   12470:	bl	10e48 <error@plt>
   12474:	mov	r2, r4
   12478:	mov	r3, r5
   1247c:	mov	r1, r8
   12480:	ldr	r8, [sp, #28]
   12484:	mov	r0, r8
   12488:	bl	11144 <__assert_fail@plt+0x188>
   1248c:	str	r6, [sp, #24]
   12490:	str	r9, [sp, #20]
   12494:	mov	r3, r7
   12498:	mov	r7, r8
   1249c:	str	r3, [sp, #28]
   124a0:	b	12358 <__assert_fail@plt+0x139c>
   124a4:	str	r4, [sp, #-8]!
   124a8:	str	lr, [sp, #4]
   124ac:	mov	r0, #1
   124b0:	bl	113ac <__assert_fail@plt+0x3f0>
   124b4:	ldr	r4, [sp]
   124b8:	add	sp, sp, #4
   124bc:	pop	{pc}		; (ldr pc, [sp], #4)
   124c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   124c4:	strd	r6, [sp, #8]
   124c8:	strd	r8, [sp, #16]
   124cc:	strd	sl, [sp, #24]
   124d0:	str	lr, [sp, #32]
   124d4:	sub	sp, sp, #12
   124d8:	str	r0, [sp]
   124dc:	mov	r5, r1
   124e0:	mov	r6, r2
   124e4:	str	r2, [sp, #4]
   124e8:	mov	r9, r3
   124ec:	bl	10ed8 <strlen@plt>
   124f0:	ldr	r4, [r5]
   124f4:	cmp	r4, #0
   124f8:	beq	125b4 <__assert_fail@plt+0x15f8>
   124fc:	mov	r8, r0
   12500:	mov	fp, #0
   12504:	mvn	sl, #0
   12508:	mov	r7, fp
   1250c:	b	1252c <__assert_fail@plt+0x1570>
   12510:	mov	sl, r7
   12514:	b	12594 <__assert_fail@plt+0x15d8>
   12518:	add	r7, r7, #1
   1251c:	ldr	r4, [r5, #4]!
   12520:	add	r6, r6, r9
   12524:	cmp	r4, #0
   12528:	beq	1258c <__assert_fail@plt+0x15d0>
   1252c:	mov	r2, r8
   12530:	ldr	r1, [sp]
   12534:	mov	r0, r4
   12538:	bl	10f98 <strncmp@plt>
   1253c:	cmp	r0, #0
   12540:	bne	12518 <__assert_fail@plt+0x155c>
   12544:	mov	r0, r4
   12548:	bl	10ed8 <strlen@plt>
   1254c:	cmp	r0, r8
   12550:	beq	12510 <__assert_fail@plt+0x1554>
   12554:	cmn	sl, #1
   12558:	moveq	sl, r7
   1255c:	beq	12518 <__assert_fail@plt+0x155c>
   12560:	ldr	r3, [sp, #4]
   12564:	cmp	r3, #0
   12568:	moveq	fp, #1
   1256c:	beq	12518 <__assert_fail@plt+0x155c>
   12570:	mov	r2, r9
   12574:	mov	r1, r6
   12578:	mla	r0, r9, sl, r3
   1257c:	bl	10db8 <memcmp@plt>
   12580:	cmp	r0, #0
   12584:	movne	fp, #1
   12588:	b	12518 <__assert_fail@plt+0x155c>
   1258c:	cmp	fp, #0
   12590:	mvnne	sl, #1
   12594:	mov	r0, sl
   12598:	add	sp, sp, #12
   1259c:	ldrd	r4, [sp]
   125a0:	ldrd	r6, [sp, #8]
   125a4:	ldrd	r8, [sp, #16]
   125a8:	ldrd	sl, [sp, #24]
   125ac:	add	sp, sp, #32
   125b0:	pop	{pc}		; (ldr pc, [sp], #4)
   125b4:	mvn	sl, #0
   125b8:	b	12594 <__assert_fail@plt+0x15d8>
   125bc:	strd	r4, [sp, #-16]!
   125c0:	str	r6, [sp, #8]
   125c4:	str	lr, [sp, #12]
   125c8:	mov	r6, r0
   125cc:	ldr	r0, [r1]
   125d0:	cmp	r0, #0
   125d4:	beq	1261c <__assert_fail@plt+0x1660>
   125d8:	mov	r4, r1
   125dc:	mov	r5, #0
   125e0:	mov	r1, r6
   125e4:	bl	10d40 <strcmp@plt>
   125e8:	cmp	r0, #0
   125ec:	beq	12608 <__assert_fail@plt+0x164c>
   125f0:	add	r5, r5, #1
   125f4:	ldr	r0, [r4, #4]!
   125f8:	cmp	r0, #0
   125fc:	bne	125e0 <__assert_fail@plt+0x1624>
   12600:	mvn	r0, #0
   12604:	b	1260c <__assert_fail@plt+0x1650>
   12608:	mov	r0, r5
   1260c:	ldrd	r4, [sp]
   12610:	ldr	r6, [sp, #8]
   12614:	add	sp, sp, #12
   12618:	pop	{pc}		; (ldr pc, [sp], #4)
   1261c:	mvn	r0, #0
   12620:	b	1260c <__assert_fail@plt+0x1650>
   12624:	strd	r4, [sp, #-16]!
   12628:	str	r6, [sp, #8]
   1262c:	str	lr, [sp, #12]
   12630:	sub	sp, sp, #8
   12634:	mov	r6, r0
   12638:	mov	r5, r1
   1263c:	cmn	r2, #1
   12640:	mov	r2, #5
   12644:	movweq	r1, #29944	; 0x74f8
   12648:	movteq	r1, #1
   1264c:	movwne	r1, #29972	; 0x7514
   12650:	movtne	r1, #1
   12654:	mov	r0, #0
   12658:	bl	10dd0 <dcgettext@plt>
   1265c:	mov	r4, r0
   12660:	mov	r2, r5
   12664:	mov	r1, #8
   12668:	mov	r0, #0
   1266c:	bl	150bc <__assert_fail@plt+0x4100>
   12670:	mov	r5, r0
   12674:	mov	r1, r6
   12678:	mov	r0, #1
   1267c:	bl	1541c <__assert_fail@plt+0x4460>
   12680:	str	r0, [sp]
   12684:	mov	r3, r5
   12688:	mov	r2, r4
   1268c:	mov	r1, #0
   12690:	mov	r0, r1
   12694:	bl	10e48 <error@plt>
   12698:	add	sp, sp, #8
   1269c:	ldrd	r4, [sp]
   126a0:	ldr	r6, [sp, #8]
   126a4:	add	sp, sp, #12
   126a8:	pop	{pc}		; (ldr pc, [sp], #4)
   126ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   126b0:	strd	r6, [sp, #8]
   126b4:	strd	r8, [sp, #16]
   126b8:	strd	sl, [sp, #24]
   126bc:	str	lr, [sp, #32]
   126c0:	sub	sp, sp, #12
   126c4:	mov	r7, r0
   126c8:	mov	r4, r1
   126cc:	mov	r8, r2
   126d0:	mov	r2, #5
   126d4:	movw	r1, #30004	; 0x7534
   126d8:	movt	r1, #1
   126dc:	mov	r0, #0
   126e0:	bl	10dd0 <dcgettext@plt>
   126e4:	movw	r3, #33112	; 0x8158
   126e8:	movt	r3, #2
   126ec:	ldr	r1, [r3]
   126f0:	bl	10d34 <fputs_unlocked@plt>
   126f4:	ldr	r5, [r7]
   126f8:	cmp	r5, #0
   126fc:	beq	127a8 <__assert_fail@plt+0x17ec>
   12700:	mov	r3, #0
   12704:	str	r3, [sp]
   12708:	mov	r6, r3
   1270c:	movw	sl, #33112	; 0x8158
   12710:	movt	sl, #2
   12714:	movw	fp, #30028	; 0x754c
   12718:	movt	fp, #1
   1271c:	movw	r3, #30036	; 0x7554
   12720:	movt	r3, #1
   12724:	str	r3, [sp, #4]
   12728:	b	12764 <__assert_fail@plt+0x17a8>
   1272c:	ldr	r9, [sl]
   12730:	mov	r0, r5
   12734:	bl	15438 <__assert_fail@plt+0x447c>
   12738:	mov	r3, r0
   1273c:	mov	r2, fp
   12740:	mov	r1, #1
   12744:	mov	r0, r9
   12748:	bl	10f2c <__fprintf_chk@plt>
   1274c:	str	r4, [sp]
   12750:	add	r6, r6, #1
   12754:	ldr	r5, [r7, #4]!
   12758:	add	r4, r4, r8
   1275c:	cmp	r5, #0
   12760:	beq	127a8 <__assert_fail@plt+0x17ec>
   12764:	cmp	r6, #0
   12768:	beq	1272c <__assert_fail@plt+0x1770>
   1276c:	mov	r2, r8
   12770:	mov	r1, r4
   12774:	ldr	r0, [sp]
   12778:	bl	10db8 <memcmp@plt>
   1277c:	cmp	r0, #0
   12780:	bne	1272c <__assert_fail@plt+0x1770>
   12784:	ldr	r9, [sl]
   12788:	mov	r0, r5
   1278c:	bl	15438 <__assert_fail@plt+0x447c>
   12790:	mov	r3, r0
   12794:	ldr	r2, [sp, #4]
   12798:	mov	r1, #1
   1279c:	mov	r0, r9
   127a0:	bl	10f2c <__fprintf_chk@plt>
   127a4:	b	12750 <__assert_fail@plt+0x1794>
   127a8:	movw	r3, #33112	; 0x8158
   127ac:	movt	r3, #2
   127b0:	ldr	r0, [r3]
   127b4:	ldr	r3, [r0, #20]
   127b8:	ldr	r2, [r0, #24]
   127bc:	cmp	r3, r2
   127c0:	addcc	r2, r3, #1
   127c4:	strcc	r2, [r0, #20]
   127c8:	movcc	r2, #10
   127cc:	strbcc	r2, [r3]
   127d0:	bcs	127f0 <__assert_fail@plt+0x1834>
   127d4:	add	sp, sp, #12
   127d8:	ldrd	r4, [sp]
   127dc:	ldrd	r6, [sp, #8]
   127e0:	ldrd	r8, [sp, #16]
   127e4:	ldrd	sl, [sp, #24]
   127e8:	add	sp, sp, #32
   127ec:	pop	{pc}		; (ldr pc, [sp], #4)
   127f0:	mov	r1, #10
   127f4:	bl	10f5c <__overflow@plt>
   127f8:	b	127d4 <__assert_fail@plt+0x1818>
   127fc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12800:	strd	r6, [sp, #8]
   12804:	str	r8, [sp, #16]
   12808:	str	lr, [sp, #20]
   1280c:	mov	r7, r0
   12810:	mov	r5, r1
   12814:	mov	r4, r2
   12818:	mov	r6, r3
   1281c:	ldrb	r3, [sp, #32]
   12820:	cmp	r3, #0
   12824:	beq	12858 <__assert_fail@plt+0x189c>
   12828:	ldr	r3, [sp, #24]
   1282c:	mov	r2, r6
   12830:	mov	r1, r4
   12834:	mov	r0, r5
   12838:	bl	124c0 <__assert_fail@plt+0x1504>
   1283c:	cmp	r0, #0
   12840:	blt	12868 <__assert_fail@plt+0x18ac>
   12844:	ldrd	r4, [sp]
   12848:	ldrd	r6, [sp, #8]
   1284c:	ldr	r8, [sp, #16]
   12850:	add	sp, sp, #20
   12854:	pop	{pc}		; (ldr pc, [sp], #4)
   12858:	mov	r1, r2
   1285c:	mov	r0, r5
   12860:	bl	125bc <__assert_fail@plt+0x1600>
   12864:	b	1283c <__assert_fail@plt+0x1880>
   12868:	mov	r2, r0
   1286c:	mov	r1, r5
   12870:	mov	r0, r7
   12874:	bl	12624 <__assert_fail@plt+0x1668>
   12878:	ldr	r2, [sp, #24]
   1287c:	mov	r1, r6
   12880:	mov	r0, r4
   12884:	bl	126ac <__assert_fail@plt+0x16f0>
   12888:	ldr	r3, [sp, #28]
   1288c:	blx	r3
   12890:	mvn	r0, #0
   12894:	b	12844 <__assert_fail@plt+0x1888>
   12898:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1289c:	strd	r6, [sp, #8]
   128a0:	str	r8, [sp, #16]
   128a4:	str	lr, [sp, #20]
   128a8:	ldr	r7, [r1]
   128ac:	cmp	r7, #0
   128b0:	beq	128ec <__assert_fail@plt+0x1930>
   128b4:	mov	r6, r3
   128b8:	mov	r8, r0
   128bc:	mov	r4, r2
   128c0:	mov	r5, r1
   128c4:	mov	r2, r6
   128c8:	mov	r1, r4
   128cc:	mov	r0, r8
   128d0:	bl	10db8 <memcmp@plt>
   128d4:	cmp	r0, #0
   128d8:	beq	128ec <__assert_fail@plt+0x1930>
   128dc:	ldr	r7, [r5, #4]!
   128e0:	add	r4, r4, r6
   128e4:	cmp	r7, #0
   128e8:	bne	128c4 <__assert_fail@plt+0x1908>
   128ec:	mov	r0, r7
   128f0:	ldrd	r4, [sp]
   128f4:	ldrd	r6, [sp, #8]
   128f8:	ldr	r8, [sp, #16]
   128fc:	add	sp, sp, #20
   12900:	pop	{pc}		; (ldr pc, [sp], #4)
   12904:	movw	r3, #33168	; 0x8190
   12908:	movt	r3, #2
   1290c:	str	r0, [r3]
   12910:	bx	lr
   12914:	movw	r3, #33168	; 0x8190
   12918:	movt	r3, #2
   1291c:	strb	r0, [r3, #4]
   12920:	bx	lr
   12924:	strd	r4, [sp, #-16]!
   12928:	str	r6, [sp, #8]
   1292c:	str	lr, [sp, #12]
   12930:	sub	sp, sp, #8
   12934:	movw	r3, #33124	; 0x8164
   12938:	movt	r3, #2
   1293c:	ldr	r0, [r3]
   12940:	bl	16664 <__assert_fail@plt+0x56a8>
   12944:	cmp	r0, #0
   12948:	beq	12970 <__assert_fail@plt+0x19b4>
   1294c:	movw	r3, #33168	; 0x8190
   12950:	movt	r3, #2
   12954:	ldrb	r3, [r3, #4]
   12958:	cmp	r3, #0
   1295c:	beq	1299c <__assert_fail@plt+0x19e0>
   12960:	bl	10ef0 <__errno_location@plt>
   12964:	ldr	r3, [r0]
   12968:	cmp	r3, #32
   1296c:	bne	1299c <__assert_fail@plt+0x19e0>
   12970:	movw	r3, #33112	; 0x8158
   12974:	movt	r3, #2
   12978:	ldr	r0, [r3]
   1297c:	bl	16664 <__assert_fail@plt+0x56a8>
   12980:	cmp	r0, #0
   12984:	bne	12a24 <__assert_fail@plt+0x1a68>
   12988:	add	sp, sp, #8
   1298c:	ldrd	r4, [sp]
   12990:	ldr	r6, [sp, #8]
   12994:	add	sp, sp, #12
   12998:	pop	{pc}		; (ldr pc, [sp], #4)
   1299c:	mov	r2, #5
   129a0:	movw	r1, #30044	; 0x755c
   129a4:	movt	r1, #1
   129a8:	mov	r0, #0
   129ac:	bl	10dd0 <dcgettext@plt>
   129b0:	mov	r4, r0
   129b4:	movw	r3, #33168	; 0x8190
   129b8:	movt	r3, #2
   129bc:	ldr	r5, [r3]
   129c0:	cmp	r5, #0
   129c4:	beq	12a04 <__assert_fail@plt+0x1a48>
   129c8:	bl	10ef0 <__errno_location@plt>
   129cc:	ldr	r6, [r0]
   129d0:	mov	r0, r5
   129d4:	bl	15234 <__assert_fail@plt+0x4278>
   129d8:	str	r4, [sp]
   129dc:	mov	r3, r0
   129e0:	movw	r2, #27340	; 0x6acc
   129e4:	movt	r2, #1
   129e8:	mov	r1, r6
   129ec:	mov	r0, #0
   129f0:	bl	10e48 <error@plt>
   129f4:	movw	r3, #33024	; 0x8100
   129f8:	movt	r3, #2
   129fc:	ldr	r0, [r3]
   12a00:	bl	10d7c <_exit@plt>
   12a04:	bl	10ef0 <__errno_location@plt>
   12a08:	mov	r3, r4
   12a0c:	movw	r2, #27344	; 0x6ad0
   12a10:	movt	r2, #1
   12a14:	ldr	r1, [r0]
   12a18:	mov	r0, #0
   12a1c:	bl	10e48 <error@plt>
   12a20:	b	129f4 <__assert_fail@plt+0x1a38>
   12a24:	movw	r3, #33024	; 0x8100
   12a28:	movt	r3, #2
   12a2c:	ldr	r0, [r3]
   12a30:	bl	10d7c <_exit@plt>
   12a34:	strd	r4, [sp, #-12]!
   12a38:	str	lr, [sp, #8]
   12a3c:	sub	sp, sp, #20
   12a40:	ldr	r1, [sp, #40]	; 0x28
   12a44:	str	r1, [sp, #8]
   12a48:	ldrd	r4, [sp, #32]
   12a4c:	strd	r4, [sp]
   12a50:	bl	10d58 <posix_fadvise64@plt>
   12a54:	add	sp, sp, #20
   12a58:	ldrd	r4, [sp]
   12a5c:	add	sp, sp, #8
   12a60:	pop	{pc}		; (ldr pc, [sp], #4)
   12a64:	cmp	r0, #0
   12a68:	bxeq	lr
   12a6c:	str	r4, [sp, #-8]!
   12a70:	str	lr, [sp, #4]
   12a74:	sub	sp, sp, #16
   12a78:	mov	r4, r1
   12a7c:	bl	10f20 <fileno@plt>
   12a80:	str	r4, [sp, #8]
   12a84:	mov	r2, #0
   12a88:	mov	r3, #0
   12a8c:	strd	r2, [sp]
   12a90:	bl	10d58 <posix_fadvise64@plt>
   12a94:	add	sp, sp, #16
   12a98:	ldr	r4, [sp]
   12a9c:	add	sp, sp, #4
   12aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   12aa4:	strd	r4, [sp, #-16]!
   12aa8:	str	r6, [sp, #8]
   12aac:	str	lr, [sp, #12]
   12ab0:	sub	sp, sp, #8
   12ab4:	mov	r4, r0
   12ab8:	bl	10f20 <fileno@plt>
   12abc:	cmp	r0, #0
   12ac0:	blt	12b38 <__assert_fail@plt+0x1b7c>
   12ac4:	mov	r0, r4
   12ac8:	bl	10e84 <__freading@plt>
   12acc:	cmp	r0, #0
   12ad0:	beq	12b04 <__assert_fail@plt+0x1b48>
   12ad4:	mov	r0, r4
   12ad8:	bl	10f20 <fileno@plt>
   12adc:	mov	r3, #1
   12ae0:	str	r3, [sp]
   12ae4:	mov	r2, #0
   12ae8:	mov	r3, #0
   12aec:	bl	10e18 <lseek64@plt>
   12af0:	mvn	r2, #0
   12af4:	mvn	r3, #0
   12af8:	cmp	r1, r3
   12afc:	cmpeq	r0, r2
   12b00:	beq	12b44 <__assert_fail@plt+0x1b88>
   12b04:	mov	r0, r4
   12b08:	bl	12b60 <__assert_fail@plt+0x1ba4>
   12b0c:	cmp	r0, #0
   12b10:	beq	12b44 <__assert_fail@plt+0x1b88>
   12b14:	bl	10ef0 <__errno_location@plt>
   12b18:	mov	r5, r0
   12b1c:	ldr	r6, [r0]
   12b20:	mov	r0, r4
   12b24:	bl	10f38 <fclose@plt>
   12b28:	cmp	r6, #0
   12b2c:	strne	r6, [r5]
   12b30:	mvnne	r0, #0
   12b34:	b	12b4c <__assert_fail@plt+0x1b90>
   12b38:	mov	r0, r4
   12b3c:	bl	10f38 <fclose@plt>
   12b40:	b	12b4c <__assert_fail@plt+0x1b90>
   12b44:	mov	r0, r4
   12b48:	bl	10f38 <fclose@plt>
   12b4c:	add	sp, sp, #8
   12b50:	ldrd	r4, [sp]
   12b54:	ldr	r6, [sp, #8]
   12b58:	add	sp, sp, #12
   12b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   12b60:	str	r4, [sp, #-8]!
   12b64:	str	lr, [sp, #4]
   12b68:	sub	sp, sp, #8
   12b6c:	subs	r4, r0, #0
   12b70:	beq	12b84 <__assert_fail@plt+0x1bc8>
   12b74:	mov	r0, r4
   12b78:	bl	10e84 <__freading@plt>
   12b7c:	cmp	r0, #0
   12b80:	bne	12b9c <__assert_fail@plt+0x1be0>
   12b84:	mov	r0, r4
   12b88:	bl	10d64 <fflush@plt>
   12b8c:	add	sp, sp, #8
   12b90:	ldr	r4, [sp]
   12b94:	add	sp, sp, #4
   12b98:	pop	{pc}		; (ldr pc, [sp], #4)
   12b9c:	ldr	r3, [r4]
   12ba0:	tst	r3, #256	; 0x100
   12ba4:	bne	12bb4 <__assert_fail@plt+0x1bf8>
   12ba8:	mov	r0, r4
   12bac:	bl	10d64 <fflush@plt>
   12bb0:	b	12b8c <__assert_fail@plt+0x1bd0>
   12bb4:	mov	r3, #1
   12bb8:	str	r3, [sp]
   12bbc:	mov	r2, #0
   12bc0:	mov	r3, #0
   12bc4:	mov	r0, r4
   12bc8:	bl	12e28 <__assert_fail@plt+0x1e6c>
   12bcc:	b	12ba8 <__assert_fail@plt+0x1bec>
   12bd0:	strd	r4, [sp, #-12]!
   12bd4:	str	lr, [sp, #8]
   12bd8:	sub	sp, sp, #12
   12bdc:	mov	r5, r0
   12be0:	bl	10ef0 <__errno_location@plt>
   12be4:	mov	r4, r0
   12be8:	ldr	r3, [r0]
   12bec:	str	r3, [sp]
   12bf0:	str	r3, [sp, #4]
   12bf4:	mov	r3, #0
   12bf8:	str	r3, [r0]
   12bfc:	mov	r0, r5
   12c00:	bl	10d70 <free@plt>
   12c04:	ldr	r3, [r4]
   12c08:	clz	r3, r3
   12c0c:	lsr	r3, r3, #5
   12c10:	add	r2, sp, #8
   12c14:	add	r3, r2, r3, lsl #2
   12c18:	ldr	r3, [r3, #-8]
   12c1c:	str	r3, [r4]
   12c20:	add	sp, sp, #12
   12c24:	ldrd	r4, [sp]
   12c28:	add	sp, sp, #8
   12c2c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c30:	str	r4, [sp, #-8]!
   12c34:	str	lr, [sp, #4]
   12c38:	mov	r4, r0
   12c3c:	mov	r1, #0
   12c40:	movw	r0, #30056	; 0x7568
   12c44:	movt	r0, #1
   12c48:	bl	10e54 <open64@plt>
   12c4c:	cmp	r4, r0
   12c50:	moveq	r0, #1
   12c54:	beq	12c64 <__assert_fail@plt+0x1ca8>
   12c58:	cmp	r0, #0
   12c5c:	movlt	r0, #0
   12c60:	bge	12c70 <__assert_fail@plt+0x1cb4>
   12c64:	ldr	r4, [sp]
   12c68:	add	sp, sp, #4
   12c6c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c70:	bl	10fb0 <close@plt>
   12c74:	bl	10ef0 <__errno_location@plt>
   12c78:	mov	r3, #9
   12c7c:	str	r3, [r0]
   12c80:	mov	r0, #0
   12c84:	b	12c64 <__assert_fail@plt+0x1ca8>
   12c88:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12c8c:	strd	r6, [sp, #8]
   12c90:	strd	r8, [sp, #16]
   12c94:	str	sl, [sp, #24]
   12c98:	str	lr, [sp, #28]
   12c9c:	mov	r8, r0
   12ca0:	mov	r9, r1
   12ca4:	mov	r6, r2
   12ca8:	mov	r0, r2
   12cac:	bl	10f20 <fileno@plt>
   12cb0:	cmp	r0, #1
   12cb4:	beq	12d90 <__assert_fail@plt+0x1dd4>
   12cb8:	cmp	r0, #2
   12cbc:	beq	12ce0 <__assert_fail@plt+0x1d24>
   12cc0:	cmp	r0, #0
   12cc4:	beq	12d9c <__assert_fail@plt+0x1de0>
   12cc8:	mov	r1, #2
   12ccc:	mov	r0, r1
   12cd0:	bl	10ddc <dup2@plt>
   12cd4:	subs	r4, r0, #2
   12cd8:	movne	r4, #1
   12cdc:	b	12ce4 <__assert_fail@plt+0x1d28>
   12ce0:	mov	r4, #0
   12ce4:	mov	r1, #1
   12ce8:	mov	r0, r1
   12cec:	bl	10ddc <dup2@plt>
   12cf0:	subs	r7, r0, #1
   12cf4:	movne	r7, #1
   12cf8:	mov	r1, #0
   12cfc:	mov	r0, r1
   12d00:	bl	10ddc <dup2@plt>
   12d04:	adds	r5, r0, #0
   12d08:	movne	r5, #1
   12d0c:	cmp	r5, #0
   12d10:	bne	12dac <__assert_fail@plt+0x1df0>
   12d14:	cmp	r7, #0
   12d18:	bne	12dc4 <__assert_fail@plt+0x1e08>
   12d1c:	cmp	r4, #0
   12d20:	beq	12d34 <__assert_fail@plt+0x1d78>
   12d24:	mov	r0, #2
   12d28:	bl	12c30 <__assert_fail@plt+0x1c74>
   12d2c:	cmp	r0, #0
   12d30:	beq	12e0c <__assert_fail@plt+0x1e50>
   12d34:	mov	r2, r6
   12d38:	mov	r1, r9
   12d3c:	mov	r0, r8
   12d40:	bl	10ea8 <freopen64@plt>
   12d44:	mov	r6, r0
   12d48:	bl	10ef0 <__errno_location@plt>
   12d4c:	mov	r8, r0
   12d50:	ldr	r9, [r0]
   12d54:	cmp	r4, #0
   12d58:	bne	12e1c <__assert_fail@plt+0x1e60>
   12d5c:	cmp	r7, #0
   12d60:	bne	12dec <__assert_fail@plt+0x1e30>
   12d64:	cmp	r5, #0
   12d68:	bne	12e00 <__assert_fail@plt+0x1e44>
   12d6c:	cmp	r6, #0
   12d70:	streq	r9, [r8]
   12d74:	mov	r0, r6
   12d78:	ldrd	r4, [sp]
   12d7c:	ldrd	r6, [sp, #8]
   12d80:	ldrd	r8, [sp, #16]
   12d84:	ldr	sl, [sp, #24]
   12d88:	add	sp, sp, #28
   12d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   12d90:	mov	r4, #0
   12d94:	mov	r7, r4
   12d98:	b	12cf8 <__assert_fail@plt+0x1d3c>
   12d9c:	mov	r4, #0
   12da0:	mov	r7, r4
   12da4:	mov	r5, r4
   12da8:	b	12d0c <__assert_fail@plt+0x1d50>
   12dac:	mov	r0, #0
   12db0:	bl	12c30 <__assert_fail@plt+0x1c74>
   12db4:	cmp	r0, #0
   12db8:	bne	12d14 <__assert_fail@plt+0x1d58>
   12dbc:	mov	r6, #0
   12dc0:	b	12d48 <__assert_fail@plt+0x1d8c>
   12dc4:	mov	r0, #1
   12dc8:	bl	12c30 <__assert_fail@plt+0x1c74>
   12dcc:	cmp	r0, #0
   12dd0:	bne	12d1c <__assert_fail@plt+0x1d60>
   12dd4:	bl	10ef0 <__errno_location@plt>
   12dd8:	mov	r8, r0
   12ddc:	ldr	r9, [r0]
   12de0:	cmp	r4, #0
   12de4:	moveq	r6, #0
   12de8:	bne	12df8 <__assert_fail@plt+0x1e3c>
   12dec:	mov	r0, #1
   12df0:	bl	10fb0 <close@plt>
   12df4:	b	12d64 <__assert_fail@plt+0x1da8>
   12df8:	mov	r6, #0
   12dfc:	b	12e1c <__assert_fail@plt+0x1e60>
   12e00:	mov	r0, #0
   12e04:	bl	10fb0 <close@plt>
   12e08:	b	12d6c <__assert_fail@plt+0x1db0>
   12e0c:	bl	10ef0 <__errno_location@plt>
   12e10:	mov	r8, r0
   12e14:	ldr	r9, [r0]
   12e18:	mov	r6, #0
   12e1c:	mov	r0, #2
   12e20:	bl	10fb0 <close@plt>
   12e24:	b	12d5c <__assert_fail@plt+0x1da0>
   12e28:	str	r4, [sp, #-16]!
   12e2c:	strd	r6, [sp, #4]
   12e30:	str	lr, [sp, #12]
   12e34:	sub	sp, sp, #8
   12e38:	mov	r4, r0
   12e3c:	mov	r6, r2
   12e40:	mov	r7, r3
   12e44:	ldr	r2, [r0, #8]
   12e48:	ldr	r3, [r0, #4]
   12e4c:	cmp	r2, r3
   12e50:	beq	12e80 <__assert_fail@plt+0x1ec4>
   12e54:	ldr	r3, [sp, #24]
   12e58:	str	r3, [sp]
   12e5c:	mov	r2, r6
   12e60:	mov	r3, r7
   12e64:	mov	r0, r4
   12e68:	bl	10f44 <fseeko64@plt>
   12e6c:	add	sp, sp, #8
   12e70:	ldr	r4, [sp]
   12e74:	ldrd	r6, [sp, #4]
   12e78:	add	sp, sp, #12
   12e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   12e80:	ldr	r2, [r0, #20]
   12e84:	ldr	r3, [r0, #16]
   12e88:	cmp	r2, r3
   12e8c:	bne	12e54 <__assert_fail@plt+0x1e98>
   12e90:	ldr	r3, [r0, #36]	; 0x24
   12e94:	cmp	r3, #0
   12e98:	bne	12e54 <__assert_fail@plt+0x1e98>
   12e9c:	bl	10f20 <fileno@plt>
   12ea0:	ldr	r3, [sp, #24]
   12ea4:	str	r3, [sp]
   12ea8:	mov	r2, r6
   12eac:	mov	r3, r7
   12eb0:	bl	10e18 <lseek64@plt>
   12eb4:	mvn	r2, #0
   12eb8:	mvn	r3, #0
   12ebc:	cmp	r1, r3
   12ec0:	cmpeq	r0, r2
   12ec4:	beq	12ee0 <__assert_fail@plt+0x1f24>
   12ec8:	ldr	r3, [r4]
   12ecc:	bic	r3, r3, #16
   12ed0:	str	r3, [r4]
   12ed4:	strd	r0, [r4, #80]	; 0x50
   12ed8:	mov	r0, #0
   12edc:	b	12e6c <__assert_fail@plt+0x1eb0>
   12ee0:	mvn	r0, #0
   12ee4:	b	12e6c <__assert_fail@plt+0x1eb0>
   12ee8:	mov	r3, #0
   12eec:	str	r3, [r0]
   12ef0:	str	r3, [r0, #4]
   12ef4:	str	r3, [r0, #8]
   12ef8:	bx	lr
   12efc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12f00:	strd	r6, [sp, #8]
   12f04:	strd	r8, [sp, #16]
   12f08:	strd	sl, [sp, #24]
   12f0c:	str	lr, [sp, #32]
   12f10:	sub	sp, sp, #20
   12f14:	ldr	r9, [r0, #8]
   12f18:	ldr	r7, [r0]
   12f1c:	add	r7, r9, r7
   12f20:	ldr	r3, [r1]
   12f24:	tst	r3, #16
   12f28:	movne	r0, #0
   12f2c:	bne	13010 <__assert_fail@plt+0x2054>
   12f30:	mov	r8, r2
   12f34:	mov	r5, r1
   12f38:	mov	sl, r0
   12f3c:	mov	r4, r9
   12f40:	mov	fp, #1
   12f44:	str	r2, [sp, #12]
   12f48:	b	12fc8 <__assert_fail@plt+0x200c>
   12f4c:	mov	r0, r5
   12f50:	bl	10f50 <__uflow@plt>
   12f54:	mov	r6, r0
   12f58:	cmn	r0, #1
   12f5c:	bne	12fe4 <__assert_fail@plt+0x2028>
   12f60:	cmp	r9, r4
   12f64:	beq	12ff0 <__assert_fail@plt+0x2034>
   12f68:	ldr	r3, [r5]
   12f6c:	tst	r3, #32
   12f70:	bne	12ff8 <__assert_fail@plt+0x203c>
   12f74:	ldrb	r3, [r4, #-1]
   12f78:	cmp	r3, r8
   12f7c:	beq	13004 <__assert_fail@plt+0x2048>
   12f80:	ldr	r6, [sp, #12]
   12f84:	cmp	r4, r7
   12f88:	bne	13000 <__assert_fail@plt+0x2044>
   12f8c:	ldr	r4, [sl]
   12f90:	str	fp, [sp]
   12f94:	mvn	r3, #0
   12f98:	mov	r2, fp
   12f9c:	mov	r1, sl
   12fa0:	mov	r0, r9
   12fa4:	bl	15c58 <__assert_fail@plt+0x4c9c>
   12fa8:	mov	r9, r0
   12fac:	add	r4, r0, r4
   12fb0:	str	r0, [sl, #8]
   12fb4:	ldr	r7, [sl]
   12fb8:	add	r7, r0, r7
   12fbc:	strb	r6, [r4], #1
   12fc0:	cmp	r8, r6
   12fc4:	beq	13004 <__assert_fail@plt+0x2048>
   12fc8:	ldr	r3, [r5, #4]
   12fcc:	ldr	r2, [r5, #8]
   12fd0:	cmp	r3, r2
   12fd4:	bcs	12f4c <__assert_fail@plt+0x1f90>
   12fd8:	add	r2, r3, #1
   12fdc:	str	r2, [r5, #4]
   12fe0:	ldrb	r6, [r3]
   12fe4:	cmp	r4, r7
   12fe8:	bne	12fbc <__assert_fail@plt+0x2000>
   12fec:	b	12f8c <__assert_fail@plt+0x1fd0>
   12ff0:	mov	r0, #0
   12ff4:	b	13010 <__assert_fail@plt+0x2054>
   12ff8:	mov	r0, #0
   12ffc:	b	13010 <__assert_fail@plt+0x2054>
   13000:	strb	r8, [r4], #1
   13004:	sub	r4, r4, r9
   13008:	str	r4, [sl, #4]
   1300c:	mov	r0, sl
   13010:	add	sp, sp, #20
   13014:	ldrd	r4, [sp]
   13018:	ldrd	r6, [sp, #8]
   1301c:	ldrd	r8, [sp, #16]
   13020:	ldrd	sl, [sp, #24]
   13024:	add	sp, sp, #32
   13028:	pop	{pc}		; (ldr pc, [sp], #4)
   1302c:	str	r4, [sp, #-8]!
   13030:	str	lr, [sp, #4]
   13034:	mov	r2, #10
   13038:	bl	12efc <__assert_fail@plt+0x1f40>
   1303c:	ldr	r4, [sp]
   13040:	add	sp, sp, #4
   13044:	pop	{pc}		; (ldr pc, [sp], #4)
   13048:	str	r4, [sp, #-8]!
   1304c:	str	lr, [sp, #4]
   13050:	ldr	r0, [r0, #8]
   13054:	bl	12bd0 <__assert_fail@plt+0x1c14>
   13058:	ldr	r4, [sp]
   1305c:	add	sp, sp, #4
   13060:	pop	{pc}		; (ldr pc, [sp], #4)
   13064:	strd	r4, [sp, #-16]!
   13068:	str	r6, [sp, #8]
   1306c:	str	lr, [sp, #12]
   13070:	subs	r6, r2, #0
   13074:	beq	130c4 <__assert_fail@plt+0x2108>
   13078:	mov	r5, r1
   1307c:	mov	r4, r0
   13080:	bl	10e90 <__ctype_toupper_loc@plt>
   13084:	ldr	ip, [r0]
   13088:	sub	r3, r4, #1
   1308c:	sub	r1, r5, #1
   13090:	add	lr, r3, r6
   13094:	ldrb	r0, [r3, #1]!
   13098:	ldrb	r2, [r1, #1]!
   1309c:	ldr	r0, [ip, r0, lsl #2]
   130a0:	ldr	r2, [ip, r2, lsl #2]
   130a4:	subs	r0, r0, r2
   130a8:	bne	130b4 <__assert_fail@plt+0x20f8>
   130ac:	cmp	r3, lr
   130b0:	bne	13094 <__assert_fail@plt+0x20d8>
   130b4:	ldrd	r4, [sp]
   130b8:	ldr	r6, [sp, #8]
   130bc:	add	sp, sp, #12
   130c0:	pop	{pc}		; (ldr pc, [sp], #4)
   130c4:	mov	r0, #0
   130c8:	b	130b4 <__assert_fail@plt+0x20f8>
   130cc:	push	{lr}		; (str lr, [sp, #-4]!)
   130d0:	sub	sp, sp, #12
   130d4:	movw	r0, #30068	; 0x7574
   130d8:	movt	r0, #1
   130dc:	bl	10e60 <getenv@plt>
   130e0:	cmp	r0, #0
   130e4:	beq	13130 <__assert_fail@plt+0x2174>
   130e8:	ldrb	r3, [r0]
   130ec:	cmp	r3, #0
   130f0:	movweq	r3, #4201	; 0x1069
   130f4:	movteq	r3, #3
   130f8:	bne	13108 <__assert_fail@plt+0x214c>
   130fc:	mov	r0, r3
   13100:	add	sp, sp, #12
   13104:	pop	{pc}		; (ldr pc, [sp], #4)
   13108:	mov	r2, #10
   1310c:	add	r1, sp, #4
   13110:	bl	10d4c <strtol@plt>
   13114:	ldr	r3, [sp, #4]
   13118:	ldrb	r2, [r3]
   1311c:	cmp	r2, #0
   13120:	movw	r3, #4201	; 0x1069
   13124:	movt	r3, #3
   13128:	moveq	r3, r0
   1312c:	b	130fc <__assert_fail@plt+0x2140>
   13130:	movw	r3, #4201	; 0x1069
   13134:	movt	r3, #3
   13138:	b	130fc <__assert_fail@plt+0x2140>
   1313c:	strd	r4, [sp, #-16]!
   13140:	str	r6, [sp, #8]
   13144:	str	lr, [sp, #12]
   13148:	subs	r4, r0, #0
   1314c:	beq	131e8 <__assert_fail@plt+0x222c>
   13150:	mov	r1, #47	; 0x2f
   13154:	mov	r0, r4
   13158:	bl	10f74 <strrchr@plt>
   1315c:	subs	r5, r0, #0
   13160:	beq	131c0 <__assert_fail@plt+0x2204>
   13164:	add	r6, r5, #1
   13168:	sub	r3, r6, r4
   1316c:	cmp	r3, #6
   13170:	ble	131c0 <__assert_fail@plt+0x2204>
   13174:	mov	r2, #7
   13178:	movw	r1, #30140	; 0x75bc
   1317c:	movt	r1, #1
   13180:	sub	r0, r5, #6
   13184:	bl	10f98 <strncmp@plt>
   13188:	cmp	r0, #0
   1318c:	bne	131c0 <__assert_fail@plt+0x2204>
   13190:	mov	r2, #3
   13194:	movw	r1, #30148	; 0x75c4
   13198:	movt	r1, #1
   1319c:	mov	r0, r6
   131a0:	bl	10f98 <strncmp@plt>
   131a4:	cmp	r0, #0
   131a8:	movne	r4, r6
   131ac:	bne	131c0 <__assert_fail@plt+0x2204>
   131b0:	add	r4, r5, #4
   131b4:	movw	r3, #33096	; 0x8148
   131b8:	movt	r3, #2
   131bc:	str	r4, [r3]
   131c0:	movw	r3, #33176	; 0x8198
   131c4:	movt	r3, #2
   131c8:	str	r4, [r3]
   131cc:	movw	r3, #33100	; 0x814c
   131d0:	movt	r3, #2
   131d4:	str	r4, [r3]
   131d8:	ldrd	r4, [sp]
   131dc:	ldr	r6, [sp, #8]
   131e0:	add	sp, sp, #12
   131e4:	pop	{pc}		; (ldr pc, [sp], #4)
   131e8:	movw	r3, #33112	; 0x8158
   131ec:	movt	r3, #2
   131f0:	ldr	r3, [r3]
   131f4:	mov	r2, #55	; 0x37
   131f8:	mov	r1, #1
   131fc:	movw	r0, #30084	; 0x7584
   13200:	movt	r0, #1
   13204:	bl	10e0c <fwrite@plt>
   13208:	bl	10fa4 <abort@plt>
   1320c:	mov	r2, #0
   13210:	mov	r3, #0
   13214:	strd	r2, [r0]
   13218:	strd	r2, [r0, #8]
   1321c:	strd	r2, [r0, #16]
   13220:	strd	r2, [r0, #24]
   13224:	strd	r2, [r0, #32]
   13228:	strd	r2, [r0, #40]	; 0x28
   1322c:	cmp	r1, #10
   13230:	beq	1323c <__assert_fail@plt+0x2280>
   13234:	str	r1, [r0]
   13238:	bx	lr
   1323c:	str	r4, [sp, #-8]!
   13240:	str	lr, [sp, #4]
   13244:	bl	10fa4 <abort@plt>
   13248:	strd	r4, [sp, #-16]!
   1324c:	str	r6, [sp, #8]
   13250:	str	lr, [sp, #12]
   13254:	mov	r5, r0
   13258:	mov	r6, r1
   1325c:	mov	r2, #5
   13260:	mov	r1, r0
   13264:	mov	r0, #0
   13268:	bl	10dd0 <dcgettext@plt>
   1326c:	mov	r4, r0
   13270:	cmp	r5, r0
   13274:	beq	1328c <__assert_fail@plt+0x22d0>
   13278:	mov	r0, r4
   1327c:	ldrd	r4, [sp]
   13280:	ldr	r6, [sp, #8]
   13284:	add	sp, sp, #12
   13288:	pop	{pc}		; (ldr pc, [sp], #4)
   1328c:	bl	166f0 <__assert_fail@plt+0x5734>
   13290:	ldrb	r3, [r0]
   13294:	bic	r3, r3, #32
   13298:	cmp	r3, #85	; 0x55
   1329c:	bne	13320 <__assert_fail@plt+0x2364>
   132a0:	ldrb	r3, [r0, #1]
   132a4:	bic	r3, r3, #32
   132a8:	cmp	r3, #84	; 0x54
   132ac:	bne	132e4 <__assert_fail@plt+0x2328>
   132b0:	ldrb	r3, [r0, #2]
   132b4:	bic	r3, r3, #32
   132b8:	cmp	r3, #70	; 0x46
   132bc:	bne	132e4 <__assert_fail@plt+0x2328>
   132c0:	ldrb	r3, [r0, #3]
   132c4:	cmp	r3, #45	; 0x2d
   132c8:	bne	132e4 <__assert_fail@plt+0x2328>
   132cc:	ldrb	r3, [r0, #4]
   132d0:	cmp	r3, #56	; 0x38
   132d4:	bne	132e4 <__assert_fail@plt+0x2328>
   132d8:	ldrb	r3, [r0, #5]
   132dc:	cmp	r3, #0
   132e0:	beq	13300 <__assert_fail@plt+0x2344>
   132e4:	movw	r4, #30236	; 0x761c
   132e8:	movt	r4, #1
   132ec:	movw	r3, #30256	; 0x7630
   132f0:	movt	r3, #1
   132f4:	cmp	r6, #9
   132f8:	movne	r4, r3
   132fc:	b	13278 <__assert_fail@plt+0x22bc>
   13300:	ldrb	r2, [r4]
   13304:	movw	r4, #30252	; 0x762c
   13308:	movt	r4, #1
   1330c:	movw	r3, #30240	; 0x7620
   13310:	movt	r3, #1
   13314:	cmp	r2, #96	; 0x60
   13318:	movne	r4, r3
   1331c:	b	13278 <__assert_fail@plt+0x22bc>
   13320:	cmp	r3, #71	; 0x47
   13324:	bne	132e4 <__assert_fail@plt+0x2328>
   13328:	ldrb	r3, [r0, #1]
   1332c:	bic	r3, r3, #32
   13330:	cmp	r3, #66	; 0x42
   13334:	bne	132e4 <__assert_fail@plt+0x2328>
   13338:	ldrb	r3, [r0, #2]
   1333c:	cmp	r3, #49	; 0x31
   13340:	bne	132e4 <__assert_fail@plt+0x2328>
   13344:	ldrb	r3, [r0, #3]
   13348:	cmp	r3, #56	; 0x38
   1334c:	bne	132e4 <__assert_fail@plt+0x2328>
   13350:	ldrb	r3, [r0, #4]
   13354:	cmp	r3, #48	; 0x30
   13358:	bne	132e4 <__assert_fail@plt+0x2328>
   1335c:	ldrb	r3, [r0, #5]
   13360:	cmp	r3, #51	; 0x33
   13364:	bne	132e4 <__assert_fail@plt+0x2328>
   13368:	ldrb	r3, [r0, #6]
   1336c:	cmp	r3, #48	; 0x30
   13370:	bne	132e4 <__assert_fail@plt+0x2328>
   13374:	ldrb	r3, [r0, #7]
   13378:	cmp	r3, #0
   1337c:	bne	132e4 <__assert_fail@plt+0x2328>
   13380:	ldrb	r2, [r4]
   13384:	movw	r4, #30248	; 0x7628
   13388:	movt	r4, #1
   1338c:	movw	r3, #30244	; 0x7624
   13390:	movt	r3, #1
   13394:	cmp	r2, #96	; 0x60
   13398:	movne	r4, r3
   1339c:	b	13278 <__assert_fail@plt+0x22bc>
   133a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   133a4:	strd	r6, [sp, #8]
   133a8:	strd	r8, [sp, #16]
   133ac:	strd	sl, [sp, #24]
   133b0:	str	lr, [sp, #32]
   133b4:	sub	sp, sp, #116	; 0x74
   133b8:	str	r0, [sp, #64]	; 0x40
   133bc:	mov	r8, r1
   133c0:	str	r2, [sp, #48]	; 0x30
   133c4:	str	r3, [sp, #24]
   133c8:	ldr	r7, [sp, #152]	; 0x98
   133cc:	bl	10e24 <__ctype_get_mb_cur_max@plt>
   133d0:	str	r0, [sp, #76]	; 0x4c
   133d4:	ldr	r3, [sp, #156]	; 0x9c
   133d8:	ubfx	r3, r3, #1, #1
   133dc:	str	r3, [sp, #32]
   133e0:	mov	r3, #1
   133e4:	str	r3, [sp, #40]	; 0x28
   133e8:	mov	r3, #0
   133ec:	str	r3, [sp, #68]	; 0x44
   133f0:	str	r3, [sp, #36]	; 0x24
   133f4:	str	r3, [sp, #28]
   133f8:	str	r3, [sp, #52]	; 0x34
   133fc:	str	r3, [sp, #60]	; 0x3c
   13400:	str	r3, [sp, #72]	; 0x48
   13404:	movw	r3, #30260	; 0x7634
   13408:	movt	r3, #1
   1340c:	str	r3, [sp, #80]	; 0x50
   13410:	mov	r9, r8
   13414:	mov	sl, r7
   13418:	cmp	sl, #10
   1341c:	ldrls	pc, [pc, sl, lsl #2]
   13420:	b	135e4 <__assert_fail@plt+0x2628>
   13424:	andeq	r3, r1, r4, lsl #9
   13428:	andeq	r3, r1, r8, asr r4
   1342c:			; <UNDEFINED> instruction: 0x000135bc
   13430:	andeq	r3, r1, r0, asr r4
   13434:	andeq	r3, r1, r0, ror r5
   13438:	muleq	r1, r4, r4
   1343c:	andeq	r4, r1, r0, ror #16
   13440:	andeq	r3, r1, r8, ror #11
   13444:	ldrdeq	r3, [r1], -r0
   13448:	ldrdeq	r3, [r1], -r0
   1344c:	ldrdeq	r3, [r1], -r0
   13450:	mov	r3, #1
   13454:	str	r3, [sp, #28]
   13458:	mov	r3, #1
   1345c:	str	r3, [sp, #32]
   13460:	str	r3, [sp, #52]	; 0x34
   13464:	movw	r3, #30256	; 0x7630
   13468:	movt	r3, #1
   1346c:	str	r3, [sp, #60]	; 0x3c
   13470:	mov	fp, #0
   13474:	mov	sl, #2
   13478:	mov	r6, #0
   1347c:	ldr	r8, [sp, #64]	; 0x40
   13480:	b	13cf8 <__assert_fail@plt+0x2d3c>
   13484:	mov	fp, sl
   13488:	mov	r3, #0
   1348c:	str	r3, [sp, #32]
   13490:	b	13478 <__assert_fail@plt+0x24bc>
   13494:	ldr	r3, [sp, #32]
   13498:	cmp	r3, #0
   1349c:	bne	135fc <__assert_fail@plt+0x2640>
   134a0:	cmp	r9, #0
   134a4:	beq	13620 <__assert_fail@plt+0x2664>
   134a8:	mov	r3, #34	; 0x22
   134ac:	ldr	r2, [sp, #64]	; 0x40
   134b0:	strb	r3, [r2]
   134b4:	mov	fp, #1
   134b8:	str	fp, [sp, #28]
   134bc:	str	fp, [sp, #52]	; 0x34
   134c0:	movw	r3, #30236	; 0x761c
   134c4:	movt	r3, #1
   134c8:	str	r3, [sp, #60]	; 0x3c
   134cc:	b	13478 <__assert_fail@plt+0x24bc>
   134d0:	cmp	sl, #10
   134d4:	bne	13508 <__assert_fail@plt+0x254c>
   134d8:	ldr	r3, [sp, #32]
   134dc:	cmp	r3, #0
   134e0:	movne	fp, #0
   134e4:	beq	13530 <__assert_fail@plt+0x2574>
   134e8:	ldr	r0, [sp, #168]	; 0xa8
   134ec:	bl	10ed8 <strlen@plt>
   134f0:	str	r0, [sp, #52]	; 0x34
   134f4:	ldr	r3, [sp, #168]	; 0xa8
   134f8:	str	r3, [sp, #60]	; 0x3c
   134fc:	mov	r3, #1
   13500:	str	r3, [sp, #28]
   13504:	b	13478 <__assert_fail@plt+0x24bc>
   13508:	mov	r1, sl
   1350c:	ldr	r0, [sp, #80]	; 0x50
   13510:	bl	13248 <__assert_fail@plt+0x228c>
   13514:	str	r0, [sp, #164]	; 0xa4
   13518:	mov	r1, sl
   1351c:	movw	r0, #30256	; 0x7630
   13520:	movt	r0, #1
   13524:	bl	13248 <__assert_fail@plt+0x228c>
   13528:	str	r0, [sp, #168]	; 0xa8
   1352c:	b	134d8 <__assert_fail@plt+0x251c>
   13530:	ldr	r3, [sp, #164]	; 0xa4
   13534:	ldrb	r3, [r3]
   13538:	cmp	r3, #0
   1353c:	beq	13568 <__assert_fail@plt+0x25ac>
   13540:	ldr	r2, [sp, #164]	; 0xa4
   13544:	mov	fp, #0
   13548:	ldr	r1, [sp, #64]	; 0x40
   1354c:	cmp	r9, fp
   13550:	strbhi	r3, [r1, fp]
   13554:	add	fp, fp, #1
   13558:	ldrb	r3, [r2, #1]!
   1355c:	cmp	r3, #0
   13560:	bne	1354c <__assert_fail@plt+0x2590>
   13564:	b	134e8 <__assert_fail@plt+0x252c>
   13568:	mov	fp, #0
   1356c:	b	134e8 <__assert_fail@plt+0x252c>
   13570:	ldr	r3, [sp, #32]
   13574:	cmp	r3, #0
   13578:	bne	13458 <__assert_fail@plt+0x249c>
   1357c:	mov	r3, #1
   13580:	str	r3, [sp, #28]
   13584:	cmp	r9, #0
   13588:	beq	1363c <__assert_fail@plt+0x2680>
   1358c:	mov	r3, #39	; 0x27
   13590:	ldr	r2, [sp, #64]	; 0x40
   13594:	strb	r3, [r2]
   13598:	mov	r3, #0
   1359c:	str	r3, [sp, #32]
   135a0:	mov	fp, #1
   135a4:	str	fp, [sp, #52]	; 0x34
   135a8:	movw	r3, #30256	; 0x7630
   135ac:	movt	r3, #1
   135b0:	str	r3, [sp, #60]	; 0x3c
   135b4:	mov	sl, #2
   135b8:	b	13478 <__assert_fail@plt+0x24bc>
   135bc:	ldr	r3, [sp, #32]
   135c0:	cmp	r3, #0
   135c4:	beq	13584 <__assert_fail@plt+0x25c8>
   135c8:	mov	r3, #1
   135cc:	str	r3, [sp, #52]	; 0x34
   135d0:	movw	r3, #30256	; 0x7630
   135d4:	movt	r3, #1
   135d8:	str	r3, [sp, #60]	; 0x3c
   135dc:	mov	fp, #0
   135e0:	b	13478 <__assert_fail@plt+0x24bc>
   135e4:	bl	10fa4 <abort@plt>
   135e8:	mov	fp, #0
   135ec:	str	fp, [sp, #32]
   135f0:	mov	r3, #1
   135f4:	str	r3, [sp, #28]
   135f8:	b	13478 <__assert_fail@plt+0x24bc>
   135fc:	ldr	r3, [sp, #32]
   13600:	str	r3, [sp, #28]
   13604:	mov	r3, #1
   13608:	str	r3, [sp, #52]	; 0x34
   1360c:	movw	r3, #30236	; 0x761c
   13610:	movt	r3, #1
   13614:	str	r3, [sp, #60]	; 0x3c
   13618:	mov	fp, #0
   1361c:	b	13478 <__assert_fail@plt+0x24bc>
   13620:	mov	fp, #1
   13624:	str	fp, [sp, #28]
   13628:	str	fp, [sp, #52]	; 0x34
   1362c:	movw	r3, #30236	; 0x761c
   13630:	movt	r3, #1
   13634:	str	r3, [sp, #60]	; 0x3c
   13638:	b	13478 <__assert_fail@plt+0x24bc>
   1363c:	mov	r3, #0
   13640:	str	r3, [sp, #32]
   13644:	mov	fp, #1
   13648:	str	fp, [sp, #52]	; 0x34
   1364c:	movw	r3, #30256	; 0x7630
   13650:	movt	r3, #1
   13654:	str	r3, [sp, #60]	; 0x3c
   13658:	mov	sl, #2
   1365c:	b	13478 <__assert_fail@plt+0x24bc>
   13660:	mov	r3, r2
   13664:	add	r4, r6, r2
   13668:	ldr	r2, [sp, #24]
   1366c:	cmp	r3, #1
   13670:	movls	r3, #0
   13674:	movhi	r3, #1
   13678:	cmn	r2, #1
   1367c:	movne	r3, #0
   13680:	cmp	r3, #0
   13684:	beq	13694 <__assert_fail@plt+0x26d8>
   13688:	ldr	r0, [sp, #48]	; 0x30
   1368c:	bl	10ed8 <strlen@plt>
   13690:	str	r0, [sp, #24]
   13694:	ldr	r3, [sp, #24]
   13698:	cmp	r4, r3
   1369c:	bhi	14888 <__assert_fail@plt+0x38cc>
   136a0:	ldr	r3, [sp, #48]	; 0x30
   136a4:	add	r4, r3, r6
   136a8:	ldr	r2, [sp, #52]	; 0x34
   136ac:	ldr	r1, [sp, #60]	; 0x3c
   136b0:	mov	r0, r4
   136b4:	bl	10db8 <memcmp@plt>
   136b8:	cmp	r0, #0
   136bc:	bne	14888 <__assert_fail@plt+0x38cc>
   136c0:	ldr	r3, [sp, #32]
   136c4:	cmp	r3, #0
   136c8:	bne	138d8 <__assert_fail@plt+0x291c>
   136cc:	ldrb	r4, [r4]
   136d0:	cmp	r4, #126	; 0x7e
   136d4:	ldrls	pc, [pc, r4, lsl #2]
   136d8:	b	1418c <__assert_fail@plt+0x31d0>
   136dc:	andeq	r3, r1, ip, lsl r9
   136e0:	andeq	r4, r1, ip, lsl #3
   136e4:	andeq	r4, r1, ip, lsl #3
   136e8:	andeq	r4, r1, ip, lsl #3
   136ec:	andeq	r4, r1, ip, lsl #3
   136f0:	andeq	r4, r1, ip, lsl #3
   136f4:	andeq	r4, r1, ip, lsl #3
   136f8:	andeq	r4, r1, r4, lsr r0
   136fc:			; <UNDEFINED> instruction: 0x00013bb8
   13700:	andeq	r3, r1, ip, asr pc
   13704:	andeq	r4, r1, r8
   13708:	andeq	r3, r1, r0, ror pc
   1370c:	andeq	r3, r1, ip, asr #23
   13710:	andeq	r3, r1, r0, ror #23
   13714:	andeq	r4, r1, ip, lsl #3
   13718:	andeq	r4, r1, ip, lsl #3
   1371c:	andeq	r4, r1, ip, lsl #3
   13720:	andeq	r4, r1, ip, lsl #3
   13724:	andeq	r4, r1, ip, lsl #3
   13728:	andeq	r4, r1, ip, lsl #3
   1372c:	andeq	r4, r1, ip, lsl #3
   13730:	andeq	r4, r1, ip, lsl #3
   13734:	andeq	r4, r1, ip, lsl #3
   13738:	andeq	r4, r1, ip, lsl #3
   1373c:	andeq	r4, r1, ip, lsl #3
   13740:	andeq	r4, r1, ip, lsl #3
   13744:	andeq	r4, r1, ip, lsl #3
   13748:	andeq	r4, r1, ip, lsl #3
   1374c:	andeq	r4, r1, ip, lsl #3
   13750:	andeq	r4, r1, ip, lsl #3
   13754:	andeq	r4, r1, ip, lsl #3
   13758:	andeq	r4, r1, ip, lsl #3
   1375c:	andeq	r4, r1, r8, lsr #1
   13760:	andeq	r4, r1, ip, asr #1
   13764:	andeq	r4, r1, ip, asr #1
   13768:	andeq	r4, r1, r4, rrx
   1376c:	andeq	r4, r1, ip, asr #1
   13770:	andeq	r4, r1, ip, ror #11
   13774:	andeq	r4, r1, ip, asr #1
   13778:	andeq	r4, r1, ip, ror #1
   1377c:	andeq	r4, r1, ip, asr #1
   13780:	andeq	r4, r1, ip, asr #1
   13784:	andeq	r4, r1, ip, asr #1
   13788:	andeq	r4, r1, ip, ror #11
   1378c:	andeq	r4, r1, ip, ror #11
   13790:	andeq	r4, r1, ip, ror #11
   13794:	andeq	r4, r1, ip, ror #11
   13798:	andeq	r4, r1, ip, ror #11
   1379c:	andeq	r4, r1, ip, ror #11
   137a0:	andeq	r4, r1, ip, ror #11
   137a4:	andeq	r4, r1, ip, ror #11
   137a8:	andeq	r4, r1, ip, ror #11
   137ac:	andeq	r4, r1, ip, ror #11
   137b0:	andeq	r4, r1, ip, ror #11
   137b4:	andeq	r4, r1, ip, ror #11
   137b8:	andeq	r4, r1, ip, ror #11
   137bc:	andeq	r4, r1, ip, ror #11
   137c0:	andeq	r4, r1, ip, ror #11
   137c4:	andeq	r4, r1, ip, ror #11
   137c8:	andeq	r4, r1, ip, asr #1
   137cc:	andeq	r4, r1, ip, asr #1
   137d0:	andeq	r4, r1, ip, asr #1
   137d4:	andeq	r4, r1, ip, asr #1
   137d8:	andeq	r3, r1, ip, asr #20
   137dc:	andeq	r4, r1, ip, lsl #3
   137e0:	andeq	r4, r1, ip, ror #11
   137e4:	andeq	r4, r1, ip, ror #11
   137e8:	andeq	r4, r1, ip, ror #11
   137ec:	andeq	r4, r1, ip, ror #11
   137f0:	andeq	r4, r1, ip, ror #11
   137f4:	andeq	r4, r1, ip, ror #11
   137f8:	andeq	r4, r1, ip, ror #11
   137fc:	andeq	r4, r1, ip, ror #11
   13800:	andeq	r4, r1, ip, ror #11
   13804:	andeq	r4, r1, ip, ror #11
   13808:	andeq	r4, r1, ip, ror #11
   1380c:	andeq	r4, r1, ip, ror #11
   13810:	andeq	r4, r1, ip, ror #11
   13814:	andeq	r4, r1, ip, ror #11
   13818:	andeq	r4, r1, ip, ror #11
   1381c:	andeq	r4, r1, ip, ror #11
   13820:	andeq	r4, r1, ip, ror #11
   13824:	andeq	r4, r1, ip, ror #11
   13828:	andeq	r4, r1, ip, ror #11
   1382c:	andeq	r4, r1, ip, ror #11
   13830:	andeq	r4, r1, ip, ror #11
   13834:	andeq	r4, r1, ip, ror #11
   13838:	andeq	r4, r1, ip, ror #11
   1383c:	andeq	r4, r1, ip, ror #11
   13840:	andeq	r4, r1, ip, ror #11
   13844:	andeq	r4, r1, ip, ror #11
   13848:	andeq	r4, r1, ip, asr #1
   1384c:	andeq	r3, r1, r4, lsl #31
   13850:	andeq	r4, r1, ip, ror #11
   13854:	andeq	r4, r1, ip, asr #1
   13858:	andeq	r4, r1, ip, ror #11
   1385c:	andeq	r4, r1, ip, asr #1
   13860:	andeq	r4, r1, ip, ror #11
   13864:	andeq	r4, r1, ip, ror #11
   13868:	andeq	r4, r1, ip, ror #11
   1386c:	andeq	r4, r1, ip, ror #11
   13870:	andeq	r4, r1, ip, ror #11
   13874:	andeq	r4, r1, ip, ror #11
   13878:	andeq	r4, r1, ip, ror #11
   1387c:	andeq	r4, r1, ip, ror #11
   13880:	andeq	r4, r1, ip, ror #11
   13884:	andeq	r4, r1, ip, ror #11
   13888:	andeq	r4, r1, ip, ror #11
   1388c:	andeq	r4, r1, ip, ror #11
   13890:	andeq	r4, r1, ip, ror #11
   13894:	andeq	r4, r1, ip, ror #11
   13898:	andeq	r4, r1, ip, ror #11
   1389c:	andeq	r4, r1, ip, ror #11
   138a0:	andeq	r4, r1, ip, ror #11
   138a4:	andeq	r4, r1, ip, ror #11
   138a8:	andeq	r4, r1, ip, ror #11
   138ac:	andeq	r4, r1, ip, ror #11
   138b0:	andeq	r4, r1, ip, ror #11
   138b4:	andeq	r4, r1, ip, ror #11
   138b8:	andeq	r4, r1, ip, ror #11
   138bc:	andeq	r4, r1, ip, ror #11
   138c0:	andeq	r4, r1, ip, ror #11
   138c4:	andeq	r4, r1, ip, ror #11
   138c8:	andeq	r4, r1, r4, asr #32
   138cc:	andeq	r4, r1, ip, asr #1
   138d0:	andeq	r4, r1, r4, asr #32
   138d4:	andeq	r4, r1, r4, rrx
   138d8:	mov	r8, r9
   138dc:	mov	r7, sl
   138e0:	b	147e0 <__assert_fail@plt+0x3824>
   138e4:	ldr	r3, [sp, #28]
   138e8:	cmp	r3, #0
   138ec:	bne	1390c <__assert_fail@plt+0x2950>
   138f0:	ldr	r3, [sp, #156]	; 0x9c
   138f4:	tst	r3, #1
   138f8:	bne	13cf4 <__assert_fail@plt+0x2d38>
   138fc:	ldr	r3, [sp, #28]
   13900:	str	r3, [sp, #44]	; 0x2c
   13904:	mov	r5, r3
   13908:	b	13c14 <__assert_fail@plt+0x2c58>
   1390c:	ldr	r3, [sp, #32]
   13910:	cmp	r3, #0
   13914:	bne	14790 <__assert_fail@plt+0x37d4>
   13918:	str	r3, [sp, #44]	; 0x2c
   1391c:	ldr	r3, [sp, #36]	; 0x24
   13920:	eor	r3, r3, #1
   13924:	cmp	sl, #2
   13928:	movne	r3, #0
   1392c:	andeq	r3, r3, #1
   13930:	cmp	r3, #0
   13934:	beq	1398c <__assert_fail@plt+0x29d0>
   13938:	cmp	r9, fp
   1393c:	movhi	r2, #39	; 0x27
   13940:	strbhi	r2, [r8, fp]
   13944:	add	r2, fp, #1
   13948:	cmp	r9, r2
   1394c:	movhi	r1, #36	; 0x24
   13950:	strbhi	r1, [r8, r2]
   13954:	add	r2, fp, #2
   13958:	cmp	r9, r2
   1395c:	movhi	r1, #39	; 0x27
   13960:	strbhi	r1, [r8, r2]
   13964:	add	r2, fp, #3
   13968:	cmp	r9, r2
   1396c:	bls	1484c <__assert_fail@plt+0x3890>
   13970:	mov	r1, #92	; 0x5c
   13974:	strb	r1, [r8, r2]
   13978:	add	fp, fp, #4
   1397c:	str	r3, [sp, #36]	; 0x24
   13980:	mov	r5, #0
   13984:	mov	r4, #48	; 0x30
   13988:	b	13c60 <__assert_fail@plt+0x2ca4>
   1398c:	cmp	r9, fp
   13990:	bhi	139b8 <__assert_fail@plt+0x29fc>
   13994:	add	r1, fp, #1
   13998:	ldr	r2, [sp, #56]	; 0x38
   1399c:	cmp	r2, #0
   139a0:	bne	139e0 <__assert_fail@plt+0x2a24>
   139a4:	mov	r3, r5
   139a8:	ldr	r5, [sp, #56]	; 0x38
   139ac:	mov	fp, r1
   139b0:	mov	r4, #48	; 0x30
   139b4:	b	13c14 <__assert_fail@plt+0x2c58>
   139b8:	mov	r2, #92	; 0x5c
   139bc:	strb	r2, [r8, fp]
   139c0:	add	r1, fp, #1
   139c4:	ldr	r2, [sp, #56]	; 0x38
   139c8:	cmp	r2, #0
   139cc:	moveq	r3, r5
   139d0:	moveq	r5, r2
   139d4:	moveq	fp, r1
   139d8:	moveq	r4, #48	; 0x30
   139dc:	beq	13c60 <__assert_fail@plt+0x2ca4>
   139e0:	add	r2, r6, #1
   139e4:	ldr	r0, [sp, #24]
   139e8:	cmp	r2, r0
   139ec:	bcs	13a08 <__assert_fail@plt+0x2a4c>
   139f0:	ldr	r0, [sp, #48]	; 0x30
   139f4:	ldrb	r2, [r0, r2]
   139f8:	sub	r2, r2, #48	; 0x30
   139fc:	uxtb	r2, r2
   13a00:	cmp	r2, #9
   13a04:	bls	13a20 <__assert_fail@plt+0x2a64>
   13a08:	mov	r2, r3
   13a0c:	mov	r3, r5
   13a10:	mov	r5, r2
   13a14:	mov	fp, r1
   13a18:	mov	r4, #48	; 0x30
   13a1c:	b	13c38 <__assert_fail@plt+0x2c7c>
   13a20:	cmp	r9, r1
   13a24:	movhi	r2, #48	; 0x30
   13a28:	strbhi	r2, [r8, r1]
   13a2c:	add	r2, fp, #2
   13a30:	cmp	r9, r2
   13a34:	movhi	r1, #48	; 0x30
   13a38:	strbhi	r1, [r8, r2]
   13a3c:	add	r1, fp, #3
   13a40:	b	13a08 <__assert_fail@plt+0x2a4c>
   13a44:	mov	r3, #0
   13a48:	str	r3, [sp, #44]	; 0x2c
   13a4c:	cmp	sl, #2
   13a50:	beq	13a6c <__assert_fail@plt+0x2ab0>
   13a54:	cmp	sl, #5
   13a58:	beq	13a84 <__assert_fail@plt+0x2ac8>
   13a5c:	mov	r5, #0
   13a60:	mov	r3, r5
   13a64:	mov	r4, #63	; 0x3f
   13a68:	b	13c14 <__assert_fail@plt+0x2c58>
   13a6c:	ldr	r3, [sp, #32]
   13a70:	cmp	r3, #0
   13a74:	bne	1479c <__assert_fail@plt+0x37e0>
   13a78:	mov	r5, r3
   13a7c:	mov	r4, #63	; 0x3f
   13a80:	b	1417c <__assert_fail@plt+0x31c0>
   13a84:	ldr	r3, [sp, #156]	; 0x9c
   13a88:	tst	r3, #4
   13a8c:	beq	145b4 <__assert_fail@plt+0x35f8>
   13a90:	add	r2, r6, #2
   13a94:	ldr	r3, [sp, #24]
   13a98:	cmp	r2, r3
   13a9c:	bcs	145c4 <__assert_fail@plt+0x3608>
   13aa0:	ldr	r3, [sp, #48]	; 0x30
   13aa4:	add	r3, r3, r6
   13aa8:	ldrb	r4, [r3, #1]
   13aac:	cmp	r4, #63	; 0x3f
   13ab0:	movne	r5, #0
   13ab4:	movne	r3, r5
   13ab8:	movne	r4, #63	; 0x3f
   13abc:	bne	13c14 <__assert_fail@plt+0x2c58>
   13ac0:	ldr	r3, [sp, #48]	; 0x30
   13ac4:	ldrb	r1, [r3, r2]
   13ac8:	sub	r3, r1, #33	; 0x21
   13acc:	cmp	r3, #29
   13ad0:	ldrls	pc, [pc, r3, lsl #2]
   13ad4:	b	145d4 <__assert_fail@plt+0x3618>
   13ad8:	andeq	r3, r1, r0, asr fp
   13adc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ae0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ae4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ae8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13aec:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13af0:	andeq	r3, r1, r0, asr fp
   13af4:	andeq	r3, r1, r0, asr fp
   13af8:	andeq	r3, r1, r0, asr fp
   13afc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b00:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b04:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b08:	andeq	r3, r1, r0, asr fp
   13b0c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b10:	andeq	r3, r1, r0, asr fp
   13b14:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b18:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b1c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b20:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b24:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b28:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b2c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b30:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b34:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b38:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b3c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b40:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b44:	andeq	r3, r1, r0, asr fp
   13b48:	andeq	r3, r1, r0, asr fp
   13b4c:	andeq	r3, r1, r0, asr fp
   13b50:	ldr	r3, [sp, #32]
   13b54:	cmp	r3, #0
   13b58:	bne	14840 <__assert_fail@plt+0x3884>
   13b5c:	cmp	r9, fp
   13b60:	movhi	r3, #63	; 0x3f
   13b64:	strbhi	r3, [r8, fp]
   13b68:	add	r3, fp, #1
   13b6c:	cmp	r9, r3
   13b70:	movhi	r0, #34	; 0x22
   13b74:	strbhi	r0, [r8, r3]
   13b78:	add	r3, fp, #2
   13b7c:	cmp	r9, r3
   13b80:	movhi	r0, #34	; 0x22
   13b84:	strbhi	r0, [r8, r3]
   13b88:	add	r3, fp, #3
   13b8c:	cmp	r9, r3
   13b90:	movhi	r0, #63	; 0x3f
   13b94:	strbhi	r0, [r8, r3]
   13b98:	add	fp, fp, #4
   13b9c:	ldr	r3, [sp, #32]
   13ba0:	mov	r5, r3
   13ba4:	mov	r4, r1
   13ba8:	mov	r6, r2
   13bac:	b	13c14 <__assert_fail@plt+0x2c58>
   13bb0:	mov	r3, #0
   13bb4:	str	r3, [sp, #44]	; 0x2c
   13bb8:	mov	r4, #8
   13bbc:	mov	r3, #98	; 0x62
   13bc0:	b	13c00 <__assert_fail@plt+0x2c44>
   13bc4:	mov	r3, #0
   13bc8:	str	r3, [sp, #44]	; 0x2c
   13bcc:	mov	r4, #12
   13bd0:	mov	r3, #102	; 0x66
   13bd4:	b	13c00 <__assert_fail@plt+0x2c44>
   13bd8:	mov	r3, #0
   13bdc:	str	r3, [sp, #44]	; 0x2c
   13be0:	mov	r4, #13
   13be4:	mov	r3, #114	; 0x72
   13be8:	ldr	r2, [sp, #32]
   13bec:	cmp	sl, #2
   13bf0:	movne	r2, #0
   13bf4:	andeq	r2, r2, #1
   13bf8:	cmp	r2, #0
   13bfc:	bne	14020 <__assert_fail@plt+0x3064>
   13c00:	ldr	r2, [sp, #28]
   13c04:	cmp	r2, #0
   13c08:	bne	14608 <__assert_fail@plt+0x364c>
   13c0c:	mov	r5, r2
   13c10:	mov	r3, r2
   13c14:	ldr	r2, [sp, #28]
   13c18:	eor	r2, r2, #1
   13c1c:	cmp	sl, #2
   13c20:	orreq	r2, r2, #1
   13c24:	eor	r2, r2, #1
   13c28:	ldr	r1, [sp, #32]
   13c2c:	orr	r2, r1, r2
   13c30:	tst	r2, #255	; 0xff
   13c34:	beq	13c60 <__assert_fail@plt+0x2ca4>
   13c38:	ldr	r2, [sp, #160]	; 0xa0
   13c3c:	cmp	r2, #0
   13c40:	beq	13c60 <__assert_fail@plt+0x2ca4>
   13c44:	ubfx	r1, r4, #5, #8
   13c48:	and	r2, r4, #31
   13c4c:	ldr	r0, [sp, #160]	; 0xa0
   13c50:	ldr	r1, [r0, r1, lsl #2]
   13c54:	lsr	r2, r1, r2
   13c58:	tst	r2, #1
   13c5c:	bne	13c6c <__assert_fail@plt+0x2cb0>
   13c60:	ldr	r2, [sp, #44]	; 0x2c
   13c64:	cmp	r2, #0
   13c68:	beq	13fc0 <__assert_fail@plt+0x3004>
   13c6c:	ldr	r3, [sp, #32]
   13c70:	cmp	r3, #0
   13c74:	bne	147c0 <__assert_fail@plt+0x3804>
   13c78:	ldr	r3, [sp, #36]	; 0x24
   13c7c:	eor	r3, r3, #1
   13c80:	cmp	sl, #2
   13c84:	movne	r3, #0
   13c88:	andeq	r3, r3, #1
   13c8c:	cmp	r3, #0
   13c90:	beq	13cc8 <__assert_fail@plt+0x2d0c>
   13c94:	cmp	r9, fp
   13c98:	movhi	r2, #39	; 0x27
   13c9c:	strbhi	r2, [r8, fp]
   13ca0:	add	r2, fp, #1
   13ca4:	cmp	r9, r2
   13ca8:	movhi	r1, #36	; 0x24
   13cac:	strbhi	r1, [r8, r2]
   13cb0:	add	r2, fp, #2
   13cb4:	cmp	r9, r2
   13cb8:	movhi	r1, #39	; 0x27
   13cbc:	strbhi	r1, [r8, r2]
   13cc0:	add	fp, fp, #3
   13cc4:	str	r3, [sp, #36]	; 0x24
   13cc8:	cmp	r9, fp
   13ccc:	movhi	r3, #92	; 0x5c
   13cd0:	strbhi	r3, [r8, fp]
   13cd4:	add	fp, fp, #1
   13cd8:	cmp	fp, r9
   13cdc:	strbcc	r4, [r8, fp]
   13ce0:	add	fp, fp, #1
   13ce4:	cmp	r5, #0
   13ce8:	ldr	r3, [sp, #40]	; 0x28
   13cec:	moveq	r3, r5
   13cf0:	str	r3, [sp, #40]	; 0x28
   13cf4:	add	r6, r6, #1
   13cf8:	ldr	r3, [sp, #24]
   13cfc:	cmn	r3, #1
   13d00:	beq	14630 <__assert_fail@plt+0x3674>
   13d04:	ldr	r3, [sp, #24]
   13d08:	subs	r5, r3, r6
   13d0c:	movne	r5, #1
   13d10:	cmp	r5, #0
   13d14:	beq	14644 <__assert_fail@plt+0x3688>
   13d18:	ldr	r3, [sp, #28]
   13d1c:	cmp	sl, #2
   13d20:	moveq	r3, #0
   13d24:	andne	r3, r3, #1
   13d28:	str	r3, [sp, #56]	; 0x38
   13d2c:	ldr	r2, [sp, #52]	; 0x34
   13d30:	adds	r7, r2, #0
   13d34:	movne	r7, #1
   13d38:	ands	r3, r3, r7
   13d3c:	str	r3, [sp, #44]	; 0x2c
   13d40:	bne	13660 <__assert_fail@plt+0x26a4>
   13d44:	ldr	r3, [sp, #48]	; 0x30
   13d48:	ldrb	r4, [r3, r6]
   13d4c:	cmp	r4, #126	; 0x7e
   13d50:	ldrls	pc, [pc, r4, lsl #2]
   13d54:	b	1418c <__assert_fail@plt+0x31d0>
   13d58:	andeq	r3, r1, r4, ror #17
   13d5c:	andeq	r4, r1, ip, lsl #3
   13d60:	andeq	r4, r1, ip, lsl #3
   13d64:	andeq	r4, r1, ip, lsl #3
   13d68:	andeq	r4, r1, ip, lsl #3
   13d6c:	andeq	r4, r1, ip, lsl #3
   13d70:	andeq	r4, r1, ip, lsl #3
   13d74:	andeq	r4, r1, ip, lsr #32
   13d78:			; <UNDEFINED> instruction: 0x00013bb8
   13d7c:	andeq	r3, r1, ip, asr pc
   13d80:	andeq	r4, r1, r0
   13d84:	andeq	r3, r1, r0, ror pc
   13d88:	andeq	r3, r1, ip, asr #23
   13d8c:	andeq	r3, r1, r0, ror #23
   13d90:	andeq	r4, r1, ip, lsl #3
   13d94:	andeq	r4, r1, ip, lsl #3
   13d98:	andeq	r4, r1, ip, lsl #3
   13d9c:	andeq	r4, r1, ip, lsl #3
   13da0:	andeq	r4, r1, ip, lsl #3
   13da4:	andeq	r4, r1, ip, lsl #3
   13da8:	andeq	r4, r1, ip, lsl #3
   13dac:	andeq	r4, r1, ip, lsl #3
   13db0:	andeq	r4, r1, ip, lsl #3
   13db4:	andeq	r4, r1, ip, lsl #3
   13db8:	andeq	r4, r1, ip, lsl #3
   13dbc:	andeq	r4, r1, ip, lsl #3
   13dc0:	andeq	r4, r1, ip, lsl #3
   13dc4:	andeq	r4, r1, ip, lsl #3
   13dc8:	andeq	r4, r1, ip, lsl #3
   13dcc:	andeq	r4, r1, ip, lsl #3
   13dd0:	andeq	r4, r1, ip, lsl #3
   13dd4:	andeq	r4, r1, ip, lsl #3
   13dd8:	andeq	r4, r1, r8, lsr #1
   13ddc:	andeq	r4, r1, r4, lsr #1
   13de0:	andeq	r4, r1, r4, lsr #1
   13de4:	andeq	r4, r1, r4, rrx
   13de8:	andeq	r4, r1, r4, lsr #1
   13dec:	andeq	r4, r1, ip, lsr #11
   13df0:	andeq	r4, r1, r4, lsr #1
   13df4:	andeq	r4, r1, ip, ror #1
   13df8:	andeq	r4, r1, r4, lsr #1
   13dfc:	andeq	r4, r1, r4, lsr #1
   13e00:	andeq	r4, r1, r4, lsr #1
   13e04:	andeq	r4, r1, ip, lsr #11
   13e08:	andeq	r4, r1, ip, lsr #11
   13e0c:	andeq	r4, r1, ip, lsr #11
   13e10:	andeq	r4, r1, ip, lsr #11
   13e14:	andeq	r4, r1, ip, lsr #11
   13e18:	andeq	r4, r1, ip, lsr #11
   13e1c:	andeq	r4, r1, ip, lsr #11
   13e20:	andeq	r4, r1, ip, lsr #11
   13e24:	andeq	r4, r1, ip, lsr #11
   13e28:	andeq	r4, r1, ip, lsr #11
   13e2c:	andeq	r4, r1, ip, lsr #11
   13e30:	andeq	r4, r1, ip, lsr #11
   13e34:	andeq	r4, r1, ip, lsr #11
   13e38:	andeq	r4, r1, ip, lsr #11
   13e3c:	andeq	r4, r1, ip, lsr #11
   13e40:	andeq	r4, r1, ip, lsr #11
   13e44:	andeq	r4, r1, r4, lsr #1
   13e48:	andeq	r4, r1, r4, lsr #1
   13e4c:	andeq	r4, r1, r4, lsr #1
   13e50:	andeq	r4, r1, r4, lsr #1
   13e54:	andeq	r3, r1, ip, asr #20
   13e58:	andeq	r4, r1, ip, lsl #3
   13e5c:	andeq	r4, r1, ip, lsr #11
   13e60:	andeq	r4, r1, ip, lsr #11
   13e64:	andeq	r4, r1, ip, lsr #11
   13e68:	andeq	r4, r1, ip, lsr #11
   13e6c:	andeq	r4, r1, ip, lsr #11
   13e70:	andeq	r4, r1, ip, lsr #11
   13e74:	andeq	r4, r1, ip, lsr #11
   13e78:	andeq	r4, r1, ip, lsr #11
   13e7c:	andeq	r4, r1, ip, lsr #11
   13e80:	andeq	r4, r1, ip, lsr #11
   13e84:	andeq	r4, r1, ip, lsr #11
   13e88:	andeq	r4, r1, ip, lsr #11
   13e8c:	andeq	r4, r1, ip, lsr #11
   13e90:	andeq	r4, r1, ip, lsr #11
   13e94:	andeq	r4, r1, ip, lsr #11
   13e98:	andeq	r4, r1, ip, lsr #11
   13e9c:	andeq	r4, r1, ip, lsr #11
   13ea0:	andeq	r4, r1, ip, lsr #11
   13ea4:	andeq	r4, r1, ip, lsr #11
   13ea8:	andeq	r4, r1, ip, lsr #11
   13eac:	andeq	r4, r1, ip, lsr #11
   13eb0:	andeq	r4, r1, ip, lsr #11
   13eb4:	andeq	r4, r1, ip, lsr #11
   13eb8:	andeq	r4, r1, ip, lsr #11
   13ebc:	andeq	r4, r1, ip, lsr #11
   13ec0:	andeq	r4, r1, ip, lsr #11
   13ec4:	andeq	r4, r1, r4, lsr #1
   13ec8:	andeq	r3, r1, r4, lsl #31
   13ecc:	andeq	r4, r1, ip, lsr #11
   13ed0:	andeq	r4, r1, r4, lsr #1
   13ed4:	andeq	r4, r1, ip, lsr #11
   13ed8:	andeq	r4, r1, r4, lsr #1
   13edc:	andeq	r4, r1, ip, lsr #11
   13ee0:	andeq	r4, r1, ip, lsr #11
   13ee4:	andeq	r4, r1, ip, lsr #11
   13ee8:	andeq	r4, r1, ip, lsr #11
   13eec:	andeq	r4, r1, ip, lsr #11
   13ef0:	andeq	r4, r1, ip, lsr #11
   13ef4:	andeq	r4, r1, ip, lsr #11
   13ef8:	andeq	r4, r1, ip, lsr #11
   13efc:	andeq	r4, r1, ip, lsr #11
   13f00:	andeq	r4, r1, ip, lsr #11
   13f04:	andeq	r4, r1, ip, lsr #11
   13f08:	andeq	r4, r1, ip, lsr #11
   13f0c:	andeq	r4, r1, ip, lsr #11
   13f10:	andeq	r4, r1, ip, lsr #11
   13f14:	andeq	r4, r1, ip, lsr #11
   13f18:	andeq	r4, r1, ip, lsr #11
   13f1c:	andeq	r4, r1, ip, lsr #11
   13f20:	andeq	r4, r1, ip, lsr #11
   13f24:	andeq	r4, r1, ip, lsr #11
   13f28:	andeq	r4, r1, ip, lsr #11
   13f2c:	andeq	r4, r1, ip, lsr #11
   13f30:	andeq	r4, r1, ip, lsr #11
   13f34:	andeq	r4, r1, ip, lsr #11
   13f38:	andeq	r4, r1, ip, lsr #11
   13f3c:	andeq	r4, r1, ip, lsr #11
   13f40:	andeq	r4, r1, ip, lsr #11
   13f44:	andeq	r4, r1, r4, asr #32
   13f48:	andeq	r4, r1, r4, lsr #1
   13f4c:	andeq	r4, r1, r4, asr #32
   13f50:	andeq	r4, r1, r4, rrx
   13f54:	mov	r3, #0
   13f58:	str	r3, [sp, #44]	; 0x2c
   13f5c:	mov	r4, #9
   13f60:	mov	r3, #116	; 0x74
   13f64:	b	13be8 <__assert_fail@plt+0x2c2c>
   13f68:	mov	r3, #0
   13f6c:	str	r3, [sp, #44]	; 0x2c
   13f70:	mov	r4, #11
   13f74:	mov	r3, #118	; 0x76
   13f78:	b	13c00 <__assert_fail@plt+0x2c44>
   13f7c:	mov	r3, #0
   13f80:	str	r3, [sp, #44]	; 0x2c
   13f84:	cmp	sl, #2
   13f88:	beq	13fac <__assert_fail@plt+0x2ff0>
   13f8c:	ldr	r3, [sp, #28]
   13f90:	ldr	r2, [sp, #32]
   13f94:	and	r3, r3, r2
   13f98:	tst	r7, r3
   13f9c:	bne	14620 <__assert_fail@plt+0x3664>
   13fa0:	mov	r4, #92	; 0x5c
   13fa4:	mov	r3, r4
   13fa8:	b	13c00 <__assert_fail@plt+0x2c44>
   13fac:	ldr	r3, [sp, #32]
   13fb0:	cmp	r3, #0
   13fb4:	bne	147a8 <__assert_fail@plt+0x37ec>
   13fb8:	mov	r5, r3
   13fbc:	mov	r4, #92	; 0x5c
   13fc0:	eor	r3, r3, #1
   13fc4:	ldr	r2, [sp, #36]	; 0x24
   13fc8:	and	r3, r3, r2
   13fcc:	tst	r3, #255	; 0xff
   13fd0:	beq	13cd8 <__assert_fail@plt+0x2d1c>
   13fd4:	cmp	r9, fp
   13fd8:	movhi	r3, #39	; 0x27
   13fdc:	strbhi	r3, [r8, fp]
   13fe0:	add	r3, fp, #1
   13fe4:	cmp	r9, r3
   13fe8:	movhi	r2, #39	; 0x27
   13fec:	strbhi	r2, [r8, r3]
   13ff0:	add	fp, fp, #2
   13ff4:	mov	r3, #0
   13ff8:	str	r3, [sp, #36]	; 0x24
   13ffc:	b	13cd8 <__assert_fail@plt+0x2d1c>
   14000:	mov	r3, #110	; 0x6e
   14004:	b	13be8 <__assert_fail@plt+0x2c2c>
   14008:	mov	r3, #110	; 0x6e
   1400c:	b	13be8 <__assert_fail@plt+0x2c2c>
   14010:	mov	r3, #0
   14014:	str	r3, [sp, #44]	; 0x2c
   14018:	mov	r3, #110	; 0x6e
   1401c:	b	13be8 <__assert_fail@plt+0x2c2c>
   14020:	mov	r8, r9
   14024:	mov	r7, #2
   14028:	b	147c8 <__assert_fail@plt+0x380c>
   1402c:	mov	r3, #97	; 0x61
   14030:	b	13c00 <__assert_fail@plt+0x2c44>
   14034:	mov	r3, #97	; 0x61
   14038:	b	13c00 <__assert_fail@plt+0x2c44>
   1403c:	mov	r3, #0
   14040:	str	r3, [sp, #44]	; 0x2c
   14044:	ldr	r3, [sp, #24]
   14048:	cmn	r3, #1
   1404c:	beq	14078 <__assert_fail@plt+0x30bc>
   14050:	ldr	r3, [sp, #24]
   14054:	subs	r3, r3, #1
   14058:	movne	r3, #1
   1405c:	cmp	r3, #0
   14060:	bne	145e0 <__assert_fail@plt+0x3624>
   14064:	cmp	r6, #0
   14068:	beq	140a8 <__assert_fail@plt+0x30ec>
   1406c:	mov	r5, #0
   14070:	mov	r3, r5
   14074:	b	13c14 <__assert_fail@plt+0x2c58>
   14078:	ldr	r3, [sp, #48]	; 0x30
   1407c:	ldrb	r3, [r3, #1]
   14080:	adds	r3, r3, #0
   14084:	movne	r3, #1
   14088:	b	1405c <__assert_fail@plt+0x30a0>
   1408c:	mov	r3, #0
   14090:	str	r3, [sp, #44]	; 0x2c
   14094:	b	14064 <__assert_fail@plt+0x30a8>
   14098:	mov	r3, #0
   1409c:	str	r3, [sp, #44]	; 0x2c
   140a0:	b	140a8 <__assert_fail@plt+0x30ec>
   140a4:	ldr	r5, [sp, #44]	; 0x2c
   140a8:	ldr	r3, [sp, #32]
   140ac:	cmp	sl, #2
   140b0:	movne	r3, #0
   140b4:	andeq	r3, r3, #1
   140b8:	cmp	r3, #0
   140bc:	beq	13c14 <__assert_fail@plt+0x2c58>
   140c0:	mov	r8, r9
   140c4:	mov	r7, #2
   140c8:	b	147c8 <__assert_fail@plt+0x380c>
   140cc:	ldr	r5, [sp, #32]
   140d0:	b	140a8 <__assert_fail@plt+0x30ec>
   140d4:	mov	r3, #0
   140d8:	str	r3, [sp, #44]	; 0x2c
   140dc:	mov	r5, r3
   140e0:	b	140a8 <__assert_fail@plt+0x30ec>
   140e4:	mov	r3, #0
   140e8:	str	r3, [sp, #44]	; 0x2c
   140ec:	cmp	sl, #2
   140f0:	strne	r5, [sp, #68]	; 0x44
   140f4:	movne	r3, #0
   140f8:	movne	r4, #39	; 0x27
   140fc:	bne	13c14 <__assert_fail@plt+0x2c58>
   14100:	ldr	r3, [sp, #32]
   14104:	cmp	r3, #0
   14108:	bne	147b4 <__assert_fail@plt+0x37f8>
   1410c:	ldr	r3, [sp, #72]	; 0x48
   14110:	clz	r3, r3
   14114:	lsr	r3, r3, #5
   14118:	cmp	r9, #0
   1411c:	moveq	r3, #0
   14120:	cmp	r3, #0
   14124:	movne	r3, #0
   14128:	bne	14150 <__assert_fail@plt+0x3194>
   1412c:	cmp	r9, fp
   14130:	movhi	r3, #39	; 0x27
   14134:	strbhi	r3, [r8, fp]
   14138:	add	r3, fp, #1
   1413c:	cmp	r9, r3
   14140:	movhi	r2, #92	; 0x5c
   14144:	strbhi	r2, [r8, r3]
   14148:	mov	r3, r9
   1414c:	ldr	r9, [sp, #72]	; 0x48
   14150:	add	r2, fp, #2
   14154:	cmp	r2, r3
   14158:	movcc	r1, #39	; 0x27
   1415c:	strbcc	r1, [r8, r2]
   14160:	add	fp, fp, #3
   14164:	str	r5, [sp, #68]	; 0x44
   14168:	ldr	r2, [sp, #32]
   1416c:	str	r2, [sp, #36]	; 0x24
   14170:	str	r9, [sp, #72]	; 0x48
   14174:	mov	r9, r3
   14178:	mov	r4, #39	; 0x27
   1417c:	mov	r3, #0
   14180:	b	13c60 <__assert_fail@plt+0x2ca4>
   14184:	mov	r3, #0
   14188:	str	r3, [sp, #44]	; 0x2c
   1418c:	ldr	r7, [sp, #76]	; 0x4c
   14190:	cmp	r7, #1
   14194:	bne	141cc <__assert_fail@plt+0x3210>
   14198:	bl	10ec0 <__ctype_b_loc@plt>
   1419c:	ldr	r2, [r0]
   141a0:	lsl	r3, r4, #1
   141a4:	ldrh	r5, [r2, r3]
   141a8:	ubfx	r5, r5, #14, #1
   141ac:	mov	ip, r7
   141b0:	eor	r3, r5, #1
   141b4:	ldr	r2, [sp, #28]
   141b8:	and	r3, r3, r2
   141bc:	ands	r3, r3, #255	; 0xff
   141c0:	beq	13c14 <__assert_fail@plt+0x2c58>
   141c4:	mov	r5, #0
   141c8:	b	14428 <__assert_fail@plt+0x346c>
   141cc:	mov	r2, #0
   141d0:	mov	r3, #0
   141d4:	strd	r2, [sp, #104]	; 0x68
   141d8:	ldr	r3, [sp, #24]
   141dc:	cmn	r3, #1
   141e0:	beq	14204 <__assert_fail@plt+0x3248>
   141e4:	mov	r3, #0
   141e8:	str	r4, [sp, #88]	; 0x58
   141ec:	str	fp, [sp, #92]	; 0x5c
   141f0:	str	r8, [sp, #56]	; 0x38
   141f4:	mov	r8, r3
   141f8:	str	r9, [sp, #84]	; 0x54
   141fc:	ldr	r9, [sp, #48]	; 0x30
   14200:	b	14350 <__assert_fail@plt+0x3394>
   14204:	ldr	r0, [sp, #48]	; 0x30
   14208:	bl	10ed8 <strlen@plt>
   1420c:	str	r0, [sp, #24]
   14210:	b	141e4 <__assert_fail@plt+0x3228>
   14214:	mov	r1, fp
   14218:	ldr	r4, [sp, #88]	; 0x58
   1421c:	mov	r2, r8
   14220:	mov	ip, r8
   14224:	ldr	fp, [sp, #92]	; 0x5c
   14228:	ldr	r8, [sp, #56]	; 0x38
   1422c:	ldr	r9, [sp, #84]	; 0x54
   14230:	ldr	r0, [sp, #24]
   14234:	cmp	r7, r0
   14238:	bcs	143f0 <__assert_fail@plt+0x3434>
   1423c:	ldrb	r3, [r1]
   14240:	cmp	r3, #0
   14244:	beq	143f8 <__assert_fail@plt+0x343c>
   14248:	mov	r3, r1
   1424c:	add	r2, r2, #1
   14250:	add	r1, r6, r2
   14254:	cmp	r0, r1
   14258:	bls	14400 <__assert_fail@plt+0x3444>
   1425c:	ldrb	r1, [r3, #1]!
   14260:	cmp	r1, #0
   14264:	bne	1424c <__assert_fail@plt+0x3290>
   14268:	mov	ip, r2
   1426c:	mov	r5, #0
   14270:	b	14420 <__assert_fail@plt+0x3464>
   14274:	ldr	r3, [sp, #56]	; 0x38
   14278:	str	r3, [sp, #64]	; 0x40
   1427c:	ldr	r8, [sp, #84]	; 0x54
   14280:	mov	r7, #2
   14284:	b	147c8 <__assert_fail@plt+0x380c>
   14288:	cmp	r2, r7
   1428c:	beq	1432c <__assert_fail@plt+0x3370>
   14290:	ldrb	r3, [r2], #1
   14294:	sub	r3, r3, #91	; 0x5b
   14298:	cmp	r3, #33	; 0x21
   1429c:	ldrls	pc, [pc, r3, lsl #2]
   142a0:	b	14288 <__assert_fail@plt+0x32cc>
   142a4:	andeq	r4, r1, r4, ror r2
   142a8:	andeq	r4, r1, r4, ror r2
   142ac:	andeq	r4, r1, r8, lsl #5
   142b0:	andeq	r4, r1, r4, ror r2
   142b4:	andeq	r4, r1, r8, lsl #5
   142b8:	andeq	r4, r1, r4, ror r2
   142bc:	andeq	r4, r1, r8, lsl #5
   142c0:	andeq	r4, r1, r8, lsl #5
   142c4:	andeq	r4, r1, r8, lsl #5
   142c8:	andeq	r4, r1, r8, lsl #5
   142cc:	andeq	r4, r1, r8, lsl #5
   142d0:	andeq	r4, r1, r8, lsl #5
   142d4:	andeq	r4, r1, r8, lsl #5
   142d8:	andeq	r4, r1, r8, lsl #5
   142dc:	andeq	r4, r1, r8, lsl #5
   142e0:	andeq	r4, r1, r8, lsl #5
   142e4:	andeq	r4, r1, r8, lsl #5
   142e8:	andeq	r4, r1, r8, lsl #5
   142ec:	andeq	r4, r1, r8, lsl #5
   142f0:	andeq	r4, r1, r8, lsl #5
   142f4:	andeq	r4, r1, r8, lsl #5
   142f8:	andeq	r4, r1, r8, lsl #5
   142fc:	andeq	r4, r1, r8, lsl #5
   14300:	andeq	r4, r1, r8, lsl #5
   14304:	andeq	r4, r1, r8, lsl #5
   14308:	andeq	r4, r1, r8, lsl #5
   1430c:	andeq	r4, r1, r8, lsl #5
   14310:	andeq	r4, r1, r8, lsl #5
   14314:	andeq	r4, r1, r8, lsl #5
   14318:	andeq	r4, r1, r8, lsl #5
   1431c:	andeq	r4, r1, r8, lsl #5
   14320:	andeq	r4, r1, r8, lsl #5
   14324:	andeq	r4, r1, r8, lsl #5
   14328:	andeq	r4, r1, r4, ror r2
   1432c:	ldr	r0, [sp, #100]	; 0x64
   14330:	bl	10e00 <iswprint@plt>
   14334:	cmp	r0, #0
   14338:	moveq	r5, #0
   1433c:	add	r8, r8, r4
   14340:	add	r0, sp, #104	; 0x68
   14344:	bl	10da0 <mbsinit@plt>
   14348:	cmp	r0, #0
   1434c:	bne	143bc <__assert_fail@plt+0x3400>
   14350:	add	r7, r6, r8
   14354:	add	fp, r9, r7
   14358:	add	r3, sp, #104	; 0x68
   1435c:	ldr	r2, [sp, #24]
   14360:	sub	r2, r2, r7
   14364:	mov	r1, fp
   14368:	add	r0, sp, #100	; 0x64
   1436c:	bl	16734 <__assert_fail@plt+0x5778>
   14370:	subs	r4, r0, #0
   14374:	beq	1440c <__assert_fail@plt+0x3450>
   14378:	cmn	r4, #1
   1437c:	beq	143d4 <__assert_fail@plt+0x3418>
   14380:	cmn	r4, #2
   14384:	beq	14214 <__assert_fail@plt+0x3258>
   14388:	ldr	r3, [sp, #32]
   1438c:	cmp	sl, #2
   14390:	movne	r3, #0
   14394:	andeq	r3, r3, #1
   14398:	cmp	r3, #0
   1439c:	beq	1432c <__assert_fail@plt+0x3370>
   143a0:	cmp	r4, #1
   143a4:	bls	1432c <__assert_fail@plt+0x3370>
   143a8:	add	r2, r7, #1
   143ac:	add	r2, r9, r2
   143b0:	add	r3, r9, r4
   143b4:	add	r7, r3, r7
   143b8:	b	14290 <__assert_fail@plt+0x32d4>
   143bc:	ldr	r4, [sp, #88]	; 0x58
   143c0:	mov	ip, r8
   143c4:	ldr	fp, [sp, #92]	; 0x5c
   143c8:	ldr	r8, [sp, #56]	; 0x38
   143cc:	ldr	r9, [sp, #84]	; 0x54
   143d0:	b	14420 <__assert_fail@plt+0x3464>
   143d4:	ldr	r4, [sp, #88]	; 0x58
   143d8:	mov	ip, r8
   143dc:	ldr	fp, [sp, #92]	; 0x5c
   143e0:	ldr	r8, [sp, #56]	; 0x38
   143e4:	ldr	r9, [sp, #84]	; 0x54
   143e8:	mov	r5, #0
   143ec:	b	14420 <__assert_fail@plt+0x3464>
   143f0:	mov	r5, #0
   143f4:	b	14420 <__assert_fail@plt+0x3464>
   143f8:	mov	r5, #0
   143fc:	b	14420 <__assert_fail@plt+0x3464>
   14400:	mov	ip, r2
   14404:	mov	r5, #0
   14408:	b	14420 <__assert_fail@plt+0x3464>
   1440c:	ldr	r4, [sp, #88]	; 0x58
   14410:	mov	ip, r8
   14414:	ldr	fp, [sp, #92]	; 0x5c
   14418:	ldr	r8, [sp, #56]	; 0x38
   1441c:	ldr	r9, [sp, #84]	; 0x54
   14420:	cmp	ip, #1
   14424:	bls	141b0 <__assert_fail@plt+0x31f4>
   14428:	add	lr, r6, ip
   1442c:	ldr	r3, [sp, #48]	; 0x30
   14430:	add	r1, r3, r6
   14434:	mov	r3, #0
   14438:	eor	r0, r5, #1
   1443c:	ldr	r2, [sp, #28]
   14440:	and	r0, r0, r2
   14444:	uxtb	r0, r0
   14448:	str	r0, [sp, #56]	; 0x38
   1444c:	mov	r7, #92	; 0x5c
   14450:	ldr	ip, [sp, #36]	; 0x24
   14454:	str	r5, [sp, #84]	; 0x54
   14458:	ldr	r2, [sp, #44]	; 0x2c
   1445c:	b	144cc <__assert_fail@plt+0x3510>
   14460:	cmp	r2, #0
   14464:	beq	14474 <__assert_fail@plt+0x34b8>
   14468:	cmp	r9, fp
   1446c:	strbhi	r7, [r8, fp]
   14470:	add	fp, fp, #1
   14474:	add	r5, r6, #1
   14478:	cmp	r5, lr
   1447c:	bcs	14588 <__assert_fail@plt+0x35cc>
   14480:	eor	r2, r3, #1
   14484:	and	r2, r2, ip
   14488:	ands	r2, r2, #255	; 0xff
   1448c:	beq	145a4 <__assert_fail@plt+0x35e8>
   14490:	cmp	r9, fp
   14494:	movhi	r2, #39	; 0x27
   14498:	strbhi	r2, [r8, fp]
   1449c:	add	r2, fp, #1
   144a0:	cmp	r9, r2
   144a4:	movhi	ip, #39	; 0x27
   144a8:	strbhi	ip, [r8, r2]
   144ac:	add	fp, fp, #2
   144b0:	ldr	ip, [sp, #56]	; 0x38
   144b4:	mov	r2, ip
   144b8:	mov	r6, r5
   144bc:	cmp	r9, fp
   144c0:	strbhi	r4, [r8, fp]
   144c4:	add	fp, fp, #1
   144c8:	ldrb	r4, [r1, #1]!
   144cc:	cmp	r0, #0
   144d0:	beq	14460 <__assert_fail@plt+0x34a4>
   144d4:	ldr	r3, [sp, #32]
   144d8:	cmp	r3, #0
   144dc:	bne	14770 <__assert_fail@plt+0x37b4>
   144e0:	eor	r3, ip, #1
   144e4:	cmp	sl, #2
   144e8:	movne	r3, #0
   144ec:	andeq	r3, r3, #1
   144f0:	cmp	r3, #0
   144f4:	beq	1452c <__assert_fail@plt+0x3570>
   144f8:	cmp	r9, fp
   144fc:	movhi	ip, #39	; 0x27
   14500:	strbhi	ip, [r8, fp]
   14504:	add	ip, fp, #1
   14508:	cmp	r9, ip
   1450c:	movhi	r5, #36	; 0x24
   14510:	strbhi	r5, [r8, ip]
   14514:	add	ip, fp, #2
   14518:	cmp	r9, ip
   1451c:	movhi	r5, #39	; 0x27
   14520:	strbhi	r5, [r8, ip]
   14524:	add	fp, fp, #3
   14528:	mov	ip, r3
   1452c:	cmp	r9, fp
   14530:	strbhi	r7, [r8, fp]
   14534:	add	r3, fp, #1
   14538:	cmp	r9, r3
   1453c:	bls	1454c <__assert_fail@plt+0x3590>
   14540:	lsr	r5, r4, #6
   14544:	add	r5, r5, #48	; 0x30
   14548:	strb	r5, [r8, r3]
   1454c:	add	r3, fp, #2
   14550:	cmp	r9, r3
   14554:	bls	14564 <__assert_fail@plt+0x35a8>
   14558:	ubfx	r5, r4, #3, #3
   1455c:	add	r5, r5, #48	; 0x30
   14560:	strb	r5, [r8, r3]
   14564:	add	fp, fp, #3
   14568:	and	r4, r4, #7
   1456c:	add	r4, r4, #48	; 0x30
   14570:	add	r5, r6, #1
   14574:	cmp	r5, lr
   14578:	bcs	14594 <__assert_fail@plt+0x35d8>
   1457c:	ldr	r3, [sp, #56]	; 0x38
   14580:	mov	r6, r5
   14584:	b	144bc <__assert_fail@plt+0x3500>
   14588:	str	ip, [sp, #36]	; 0x24
   1458c:	ldr	r5, [sp, #84]	; 0x54
   14590:	b	13fc0 <__assert_fail@plt+0x3004>
   14594:	str	ip, [sp, #36]	; 0x24
   14598:	ldr	r5, [sp, #84]	; 0x54
   1459c:	mov	r3, r0
   145a0:	b	13fc0 <__assert_fail@plt+0x3004>
   145a4:	mov	r6, r5
   145a8:	b	144bc <__assert_fail@plt+0x3500>
   145ac:	ldr	r3, [sp, #44]	; 0x2c
   145b0:	b	13c14 <__assert_fail@plt+0x2c58>
   145b4:	mov	r5, #0
   145b8:	mov	r3, r5
   145bc:	mov	r4, #63	; 0x3f
   145c0:	b	13c14 <__assert_fail@plt+0x2c58>
   145c4:	mov	r5, #0
   145c8:	mov	r3, r5
   145cc:	mov	r4, #63	; 0x3f
   145d0:	b	13c14 <__assert_fail@plt+0x2c58>
   145d4:	mov	r5, #0
   145d8:	mov	r3, r5
   145dc:	b	13c14 <__assert_fail@plt+0x2c58>
   145e0:	mov	r5, #0
   145e4:	mov	r3, r5
   145e8:	b	13c14 <__assert_fail@plt+0x2c58>
   145ec:	ldr	r5, [sp, #44]	; 0x2c
   145f0:	ldr	r3, [sp, #32]
   145f4:	b	13c14 <__assert_fail@plt+0x2c58>
   145f8:	ldr	r5, [sp, #44]	; 0x2c
   145fc:	mov	r3, #0
   14600:	str	r3, [sp, #44]	; 0x2c
   14604:	b	13c14 <__assert_fail@plt+0x2c58>
   14608:	mov	r4, r3
   1460c:	mov	r5, #0
   14610:	b	13c6c <__assert_fail@plt+0x2cb0>
   14614:	mov	r5, #0
   14618:	mov	r4, #97	; 0x61
   1461c:	b	13c6c <__assert_fail@plt+0x2cb0>
   14620:	mov	r5, #0
   14624:	mov	r3, r5
   14628:	mov	r4, #92	; 0x5c
   1462c:	b	13fc0 <__assert_fail@plt+0x3004>
   14630:	ldr	r3, [sp, #48]	; 0x30
   14634:	ldrb	r5, [r3, r6]
   14638:	adds	r5, r5, #0
   1463c:	movne	r5, #1
   14640:	b	13d10 <__assert_fail@plt+0x2d54>
   14644:	cmp	sl, #2
   14648:	movne	r3, #0
   1464c:	moveq	r3, #1
   14650:	ldr	r1, [sp, #32]
   14654:	cmp	fp, #0
   14658:	andeq	r2, r3, r1
   1465c:	movne	r2, #0
   14660:	cmp	r2, #0
   14664:	bne	14784 <__assert_fail@plt+0x37c8>
   14668:	eor	r2, r1, #1
   1466c:	uxtb	r2, r2
   14670:	and	r3, r3, r2
   14674:	ldr	r1, [sp, #68]	; 0x44
   14678:	ands	r3, r1, r3
   1467c:	beq	14710 <__assert_fail@plt+0x3754>
   14680:	ldr	r2, [sp, #40]	; 0x28
   14684:	cmp	r2, #0
   14688:	bne	146c0 <__assert_fail@plt+0x3704>
   1468c:	ldr	r2, [sp, #72]	; 0x48
   14690:	adds	r2, r2, #0
   14694:	movne	r2, #1
   14698:	cmp	r9, #0
   1469c:	movne	r2, #0
   146a0:	str	r2, [sp, #68]	; 0x44
   146a4:	mov	sl, #2
   146a8:	ldr	r1, [sp, #40]	; 0x28
   146ac:	str	r1, [sp, #32]
   146b0:	cmp	r2, #0
   146b4:	beq	14704 <__assert_fail@plt+0x3748>
   146b8:	ldr	r9, [sp, #72]	; 0x48
   146bc:	b	13418 <__assert_fail@plt+0x245c>
   146c0:	ldr	r3, [sp, #168]	; 0xa8
   146c4:	str	r3, [sp, #16]
   146c8:	ldr	r3, [sp, #164]	; 0xa4
   146cc:	str	r3, [sp, #12]
   146d0:	ldr	r3, [sp, #160]	; 0xa0
   146d4:	str	r3, [sp, #8]
   146d8:	ldr	r3, [sp, #156]	; 0x9c
   146dc:	str	r3, [sp, #4]
   146e0:	mov	r3, #5
   146e4:	str	r3, [sp]
   146e8:	ldr	r3, [sp, #24]
   146ec:	ldr	r2, [sp, #48]	; 0x30
   146f0:	ldr	r1, [sp, #72]	; 0x48
   146f4:	ldr	r0, [sp, #64]	; 0x40
   146f8:	bl	133a0 <__assert_fail@plt+0x23e4>
   146fc:	mov	fp, r0
   14700:	b	14820 <__assert_fail@plt+0x3864>
   14704:	mov	r8, r9
   14708:	mov	r2, r3
   1470c:	b	14714 <__assert_fail@plt+0x3758>
   14710:	mov	r8, r9
   14714:	ldr	r3, [sp, #60]	; 0x3c
   14718:	cmp	r3, #0
   1471c:	moveq	r2, #0
   14720:	andne	r2, r2, #1
   14724:	cmp	r2, #0
   14728:	beq	14758 <__assert_fail@plt+0x379c>
   1472c:	mov	r2, r3
   14730:	ldrb	r3, [r3]
   14734:	cmp	r3, #0
   14738:	beq	14758 <__assert_fail@plt+0x379c>
   1473c:	ldr	r1, [sp, #64]	; 0x40
   14740:	cmp	r8, fp
   14744:	strbhi	r3, [r1, fp]
   14748:	add	fp, fp, #1
   1474c:	ldrb	r3, [r2, #1]!
   14750:	cmp	r3, #0
   14754:	bne	14740 <__assert_fail@plt+0x3784>
   14758:	cmp	r8, fp
   1475c:	bls	14820 <__assert_fail@plt+0x3864>
   14760:	mov	r3, #0
   14764:	ldr	r2, [sp, #64]	; 0x40
   14768:	strb	r3, [r2, fp]
   1476c:	b	14820 <__assert_fail@plt+0x3864>
   14770:	mov	r8, r9
   14774:	mov	r7, sl
   14778:	ldr	r3, [sp, #32]
   1477c:	str	r3, [sp, #28]
   14780:	b	147c8 <__assert_fail@plt+0x380c>
   14784:	mov	r8, r9
   14788:	mov	r7, #2
   1478c:	b	147c8 <__assert_fail@plt+0x380c>
   14790:	mov	r8, r9
   14794:	mov	r7, sl
   14798:	b	147c8 <__assert_fail@plt+0x380c>
   1479c:	mov	r8, r9
   147a0:	mov	r7, sl
   147a4:	b	147c8 <__assert_fail@plt+0x380c>
   147a8:	mov	r8, r9
   147ac:	mov	r7, sl
   147b0:	b	147c8 <__assert_fail@plt+0x380c>
   147b4:	mov	r8, r9
   147b8:	mov	r7, sl
   147bc:	b	147c8 <__assert_fail@plt+0x380c>
   147c0:	mov	r8, r9
   147c4:	mov	r7, sl
   147c8:	ldr	r3, [sp, #28]
   147cc:	cmp	r7, #2
   147d0:	movne	r3, #0
   147d4:	andeq	r3, r3, #1
   147d8:	cmp	r3, #0
   147dc:	movne	r7, #4
   147e0:	ldr	r3, [sp, #168]	; 0xa8
   147e4:	str	r3, [sp, #16]
   147e8:	ldr	r3, [sp, #164]	; 0xa4
   147ec:	str	r3, [sp, #12]
   147f0:	mov	r3, #0
   147f4:	str	r3, [sp, #8]
   147f8:	ldr	r3, [sp, #156]	; 0x9c
   147fc:	bic	r3, r3, #2
   14800:	str	r3, [sp, #4]
   14804:	str	r7, [sp]
   14808:	ldr	r3, [sp, #24]
   1480c:	ldr	r2, [sp, #48]	; 0x30
   14810:	mov	r1, r8
   14814:	ldr	r0, [sp, #64]	; 0x40
   14818:	bl	133a0 <__assert_fail@plt+0x23e4>
   1481c:	mov	fp, r0
   14820:	mov	r0, fp
   14824:	add	sp, sp, #116	; 0x74
   14828:	ldrd	r4, [sp]
   1482c:	ldrd	r6, [sp, #8]
   14830:	ldrd	r8, [sp, #16]
   14834:	ldrd	sl, [sp, #24]
   14838:	add	sp, sp, #32
   1483c:	pop	{pc}		; (ldr pc, [sp], #4)
   14840:	mov	r8, r9
   14844:	mov	r7, sl
   14848:	b	147e0 <__assert_fail@plt+0x3824>
   1484c:	add	fp, fp, #4
   14850:	str	r3, [sp, #36]	; 0x24
   14854:	mov	r5, #0
   14858:	mov	r4, #48	; 0x30
   1485c:	b	13c14 <__assert_fail@plt+0x2c58>
   14860:	mov	r3, #1
   14864:	str	r3, [sp, #32]
   14868:	str	r3, [sp, #28]
   1486c:	str	r3, [sp, #52]	; 0x34
   14870:	movw	r3, #30236	; 0x761c
   14874:	movt	r3, #1
   14878:	str	r3, [sp, #60]	; 0x3c
   1487c:	mov	fp, #0
   14880:	mov	sl, #5
   14884:	b	13478 <__assert_fail@plt+0x24bc>
   14888:	ldr	r3, [sp, #48]	; 0x30
   1488c:	ldrb	r4, [r3, r6]
   14890:	cmp	r4, #126	; 0x7e
   14894:	ldrls	pc, [pc, r4, lsl #2]
   14898:	b	14184 <__assert_fail@plt+0x31c8>
   1489c:	andeq	r3, r1, ip, lsl #18
   148a0:	andeq	r4, r1, r4, lsl #3
   148a4:	andeq	r4, r1, r4, lsl #3
   148a8:	andeq	r4, r1, r4, lsl #3
   148ac:	andeq	r4, r1, r4, lsl #3
   148b0:	andeq	r4, r1, r4, lsl #3
   148b4:	andeq	r4, r1, r4, lsl #3
   148b8:	andeq	r4, r1, r4, lsl r6
   148bc:			; <UNDEFINED> instruction: 0x00013bb0
   148c0:	andeq	r3, r1, r4, asr pc
   148c4:	andeq	r4, r1, r0, lsl r0
   148c8:	andeq	r3, r1, r8, ror #30
   148cc:	andeq	r3, r1, r4, asr #23
   148d0:	ldrdeq	r3, [r1], -r8
   148d4:	andeq	r4, r1, r4, lsl #3
   148d8:	andeq	r4, r1, r4, lsl #3
   148dc:	andeq	r4, r1, r4, lsl #3
   148e0:	andeq	r4, r1, r4, lsl #3
   148e4:	andeq	r4, r1, r4, lsl #3
   148e8:	andeq	r4, r1, r4, lsl #3
   148ec:	andeq	r4, r1, r4, lsl #3
   148f0:	andeq	r4, r1, r4, lsl #3
   148f4:	andeq	r4, r1, r4, lsl #3
   148f8:	andeq	r4, r1, r4, lsl #3
   148fc:	andeq	r4, r1, r4, lsl #3
   14900:	andeq	r4, r1, r4, lsl #3
   14904:	andeq	r4, r1, r4, lsl #3
   14908:	andeq	r4, r1, r4, lsl #3
   1490c:	andeq	r4, r1, r4, lsl #3
   14910:	andeq	r4, r1, r4, lsl #3
   14914:	andeq	r4, r1, r4, lsl #3
   14918:	andeq	r4, r1, r4, lsl #3
   1491c:	muleq	r1, r8, r0
   14920:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14924:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14928:	andeq	r4, r1, ip, lsl #1
   1492c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14930:	strdeq	r4, [r1], -r8
   14934:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14938:	andeq	r4, r1, r4, ror #1
   1493c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14940:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14944:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14948:	strdeq	r4, [r1], -r8
   1494c:	strdeq	r4, [r1], -r8
   14950:	strdeq	r4, [r1], -r8
   14954:	strdeq	r4, [r1], -r8
   14958:	strdeq	r4, [r1], -r8
   1495c:	strdeq	r4, [r1], -r8
   14960:	strdeq	r4, [r1], -r8
   14964:	strdeq	r4, [r1], -r8
   14968:	strdeq	r4, [r1], -r8
   1496c:	strdeq	r4, [r1], -r8
   14970:	strdeq	r4, [r1], -r8
   14974:	strdeq	r4, [r1], -r8
   14978:	strdeq	r4, [r1], -r8
   1497c:	strdeq	r4, [r1], -r8
   14980:	strdeq	r4, [r1], -r8
   14984:	strdeq	r4, [r1], -r8
   14988:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1498c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14990:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14994:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14998:	andeq	r3, r1, r4, asr #20
   1499c:	andeq	r4, r1, r4, lsl #3
   149a0:	strdeq	r4, [r1], -r8
   149a4:	strdeq	r4, [r1], -r8
   149a8:	strdeq	r4, [r1], -r8
   149ac:	strdeq	r4, [r1], -r8
   149b0:	strdeq	r4, [r1], -r8
   149b4:	strdeq	r4, [r1], -r8
   149b8:	strdeq	r4, [r1], -r8
   149bc:	strdeq	r4, [r1], -r8
   149c0:	strdeq	r4, [r1], -r8
   149c4:	strdeq	r4, [r1], -r8
   149c8:	strdeq	r4, [r1], -r8
   149cc:	strdeq	r4, [r1], -r8
   149d0:	strdeq	r4, [r1], -r8
   149d4:	strdeq	r4, [r1], -r8
   149d8:	strdeq	r4, [r1], -r8
   149dc:	strdeq	r4, [r1], -r8
   149e0:	strdeq	r4, [r1], -r8
   149e4:	strdeq	r4, [r1], -r8
   149e8:	strdeq	r4, [r1], -r8
   149ec:	strdeq	r4, [r1], -r8
   149f0:	strdeq	r4, [r1], -r8
   149f4:	strdeq	r4, [r1], -r8
   149f8:	strdeq	r4, [r1], -r8
   149fc:	strdeq	r4, [r1], -r8
   14a00:	strdeq	r4, [r1], -r8
   14a04:	strdeq	r4, [r1], -r8
   14a08:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a0c:	andeq	r3, r1, ip, ror pc
   14a10:	strdeq	r4, [r1], -r8
   14a14:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a18:	strdeq	r4, [r1], -r8
   14a1c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a20:	strdeq	r4, [r1], -r8
   14a24:	strdeq	r4, [r1], -r8
   14a28:	strdeq	r4, [r1], -r8
   14a2c:	strdeq	r4, [r1], -r8
   14a30:	strdeq	r4, [r1], -r8
   14a34:	strdeq	r4, [r1], -r8
   14a38:	strdeq	r4, [r1], -r8
   14a3c:	strdeq	r4, [r1], -r8
   14a40:	strdeq	r4, [r1], -r8
   14a44:	strdeq	r4, [r1], -r8
   14a48:	strdeq	r4, [r1], -r8
   14a4c:	strdeq	r4, [r1], -r8
   14a50:	strdeq	r4, [r1], -r8
   14a54:	strdeq	r4, [r1], -r8
   14a58:	strdeq	r4, [r1], -r8
   14a5c:	strdeq	r4, [r1], -r8
   14a60:	strdeq	r4, [r1], -r8
   14a64:	strdeq	r4, [r1], -r8
   14a68:	strdeq	r4, [r1], -r8
   14a6c:	strdeq	r4, [r1], -r8
   14a70:	strdeq	r4, [r1], -r8
   14a74:	strdeq	r4, [r1], -r8
   14a78:	strdeq	r4, [r1], -r8
   14a7c:	strdeq	r4, [r1], -r8
   14a80:	strdeq	r4, [r1], -r8
   14a84:	strdeq	r4, [r1], -r8
   14a88:	andeq	r4, r1, ip, lsr r0
   14a8c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a90:	andeq	r4, r1, ip, lsr r0
   14a94:	andeq	r4, r1, ip, lsl #1
   14a98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14a9c:	strd	r6, [sp, #8]
   14aa0:	strd	r8, [sp, #16]
   14aa4:	strd	sl, [sp, #24]
   14aa8:	str	lr, [sp, #32]
   14aac:	sub	sp, sp, #52	; 0x34
   14ab0:	mov	r5, r0
   14ab4:	str	r1, [sp, #24]
   14ab8:	str	r2, [sp, #28]
   14abc:	mov	r4, r3
   14ac0:	bl	10ef0 <__errno_location@plt>
   14ac4:	str	r0, [sp, #32]
   14ac8:	ldr	r3, [r0]
   14acc:	str	r3, [sp, #36]	; 0x24
   14ad0:	movw	r3, #33028	; 0x8104
   14ad4:	movt	r3, #2
   14ad8:	ldr	r6, [r3]
   14adc:	cmn	r5, #-2147483647	; 0x80000001
   14ae0:	movne	r3, #0
   14ae4:	moveq	r3, #1
   14ae8:	orrs	r3, r3, r5, lsr #31
   14aec:	bne	14c50 <__assert_fail@plt+0x3c94>
   14af0:	movw	r3, #33028	; 0x8104
   14af4:	movt	r3, #2
   14af8:	ldr	r2, [r3, #4]
   14afc:	cmp	r2, r5
   14b00:	bgt	14b70 <__assert_fail@plt+0x3bb4>
   14b04:	str	r2, [sp, #44]	; 0x2c
   14b08:	add	r3, r3, #8
   14b0c:	cmp	r6, r3
   14b10:	beq	14c54 <__assert_fail@plt+0x3c98>
   14b14:	sub	r2, r5, r2
   14b18:	mov	r3, #8
   14b1c:	str	r3, [sp]
   14b20:	mvn	r3, #-2147483648	; 0x80000000
   14b24:	add	r2, r2, #1
   14b28:	add	r1, sp, #44	; 0x2c
   14b2c:	mov	r0, r6
   14b30:	bl	15c58 <__assert_fail@plt+0x4c9c>
   14b34:	mov	r6, r0
   14b38:	movw	r3, #33028	; 0x8104
   14b3c:	movt	r3, #2
   14b40:	str	r0, [r3]
   14b44:	movw	r7, #33028	; 0x8104
   14b48:	movt	r7, #2
   14b4c:	ldr	r0, [r7, #4]
   14b50:	ldr	r2, [sp, #44]	; 0x2c
   14b54:	sub	r2, r2, r0
   14b58:	lsl	r2, r2, #3
   14b5c:	mov	r1, #0
   14b60:	add	r0, r6, r0, lsl #3
   14b64:	bl	10f08 <memset@plt>
   14b68:	ldr	r3, [sp, #44]	; 0x2c
   14b6c:	str	r3, [r7, #4]
   14b70:	add	fp, r6, r5, lsl #3
   14b74:	ldr	r8, [r6, r5, lsl #3]
   14b78:	ldr	r7, [fp, #4]
   14b7c:	ldr	r3, [r4, #4]
   14b80:	orr	r9, r3, #1
   14b84:	add	sl, r4, #8
   14b88:	ldr	r3, [r4, #44]	; 0x2c
   14b8c:	str	r3, [sp, #16]
   14b90:	ldr	r3, [r4, #40]	; 0x28
   14b94:	str	r3, [sp, #12]
   14b98:	str	sl, [sp, #8]
   14b9c:	str	r9, [sp, #4]
   14ba0:	ldr	r3, [r4]
   14ba4:	str	r3, [sp]
   14ba8:	ldr	r3, [sp, #28]
   14bac:	ldr	r2, [sp, #24]
   14bb0:	mov	r1, r8
   14bb4:	mov	r0, r7
   14bb8:	bl	133a0 <__assert_fail@plt+0x23e4>
   14bbc:	cmp	r8, r0
   14bc0:	bhi	14c24 <__assert_fail@plt+0x3c68>
   14bc4:	add	r8, r0, #1
   14bc8:	str	r8, [r6, r5, lsl #3]
   14bcc:	movw	r3, #33180	; 0x819c
   14bd0:	movt	r3, #2
   14bd4:	cmp	r7, r3
   14bd8:	beq	14be4 <__assert_fail@plt+0x3c28>
   14bdc:	mov	r0, r7
   14be0:	bl	12bd0 <__assert_fail@plt+0x1c14>
   14be4:	mov	r0, r8
   14be8:	bl	15a54 <__assert_fail@plt+0x4a98>
   14bec:	mov	r7, r0
   14bf0:	str	r0, [fp, #4]
   14bf4:	ldr	r3, [r4, #44]	; 0x2c
   14bf8:	str	r3, [sp, #16]
   14bfc:	ldr	r3, [r4, #40]	; 0x28
   14c00:	str	r3, [sp, #12]
   14c04:	str	sl, [sp, #8]
   14c08:	str	r9, [sp, #4]
   14c0c:	ldr	r3, [r4]
   14c10:	str	r3, [sp]
   14c14:	ldr	r3, [sp, #28]
   14c18:	ldr	r2, [sp, #24]
   14c1c:	mov	r1, r8
   14c20:	bl	133a0 <__assert_fail@plt+0x23e4>
   14c24:	ldr	r3, [sp, #32]
   14c28:	ldr	r2, [sp, #36]	; 0x24
   14c2c:	str	r2, [r3]
   14c30:	mov	r0, r7
   14c34:	add	sp, sp, #52	; 0x34
   14c38:	ldrd	r4, [sp]
   14c3c:	ldrd	r6, [sp, #8]
   14c40:	ldrd	r8, [sp, #16]
   14c44:	ldrd	sl, [sp, #24]
   14c48:	add	sp, sp, #32
   14c4c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c50:	bl	10fa4 <abort@plt>
   14c54:	sub	r2, r5, r2
   14c58:	mov	r3, #8
   14c5c:	str	r3, [sp]
   14c60:	mvn	r3, #-2147483648	; 0x80000000
   14c64:	add	r2, r2, #1
   14c68:	add	r1, sp, #44	; 0x2c
   14c6c:	mov	r0, #0
   14c70:	bl	15c58 <__assert_fail@plt+0x4c9c>
   14c74:	mov	r6, r0
   14c78:	movw	r3, #33028	; 0x8104
   14c7c:	movt	r3, #2
   14c80:	str	r0, [r3]
   14c84:	ldrd	r2, [r3, #8]
   14c88:	strd	r2, [r0]
   14c8c:	b	14b44 <__assert_fail@plt+0x3b88>
   14c90:	strd	r4, [sp, #-16]!
   14c94:	str	r6, [sp, #8]
   14c98:	str	lr, [sp, #12]
   14c9c:	mov	r4, r0
   14ca0:	bl	10ef0 <__errno_location@plt>
   14ca4:	mov	r5, r0
   14ca8:	ldr	r6, [r0]
   14cac:	cmp	r4, #0
   14cb0:	ldr	r3, [pc, #32]	; 14cd8 <__assert_fail@plt+0x3d1c>
   14cb4:	moveq	r4, r3
   14cb8:	mov	r1, #48	; 0x30
   14cbc:	mov	r0, r4
   14cc0:	bl	15dc8 <__assert_fail@plt+0x4e0c>
   14cc4:	str	r6, [r5]
   14cc8:	ldrd	r4, [sp]
   14ccc:	ldr	r6, [sp, #8]
   14cd0:	add	sp, sp, #12
   14cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   14cd8:	muleq	r2, ip, r2
   14cdc:	subs	r3, r0, #0
   14ce0:	ldr	r2, [pc, #8]	; 14cf0 <__assert_fail@plt+0x3d34>
   14ce4:	moveq	r3, r2
   14ce8:	ldr	r0, [r3]
   14cec:	bx	lr
   14cf0:	muleq	r2, ip, r2
   14cf4:	subs	r3, r0, #0
   14cf8:	ldr	r2, [pc, #8]	; 14d08 <__assert_fail@plt+0x3d4c>
   14cfc:	moveq	r3, r2
   14d00:	str	r1, [r3]
   14d04:	bx	lr
   14d08:	muleq	r2, ip, r2
   14d0c:	push	{lr}		; (str lr, [sp, #-4]!)
   14d10:	subs	r3, r0, #0
   14d14:	ldr	r0, [pc, #44]	; 14d48 <__assert_fail@plt+0x3d8c>
   14d18:	moveq	r3, r0
   14d1c:	add	r3, r3, #8
   14d20:	lsr	lr, r1, #5
   14d24:	and	r1, r1, #31
   14d28:	ldr	ip, [r3, lr, lsl #2]
   14d2c:	lsr	r0, ip, r1
   14d30:	eor	r2, r2, r0
   14d34:	and	r2, r2, #1
   14d38:	eor	r1, ip, r2, lsl r1
   14d3c:	str	r1, [r3, lr, lsl #2]
   14d40:	and	r0, r0, #1
   14d44:	pop	{pc}		; (ldr pc, [sp], #4)
   14d48:	muleq	r2, ip, r2
   14d4c:	subs	r3, r0, #0
   14d50:	ldr	r2, [pc, #12]	; 14d64 <__assert_fail@plt+0x3da8>
   14d54:	moveq	r3, r2
   14d58:	ldr	r0, [r3, #4]
   14d5c:	str	r1, [r3, #4]
   14d60:	bx	lr
   14d64:	muleq	r2, ip, r2
   14d68:	subs	r3, r0, #0
   14d6c:	ldr	r0, [pc, #44]	; 14da0 <__assert_fail@plt+0x3de4>
   14d70:	moveq	r3, r0
   14d74:	mov	r0, #10
   14d78:	str	r0, [r3]
   14d7c:	cmp	r2, #0
   14d80:	cmpne	r1, #0
   14d84:	beq	14d94 <__assert_fail@plt+0x3dd8>
   14d88:	str	r1, [r3, #40]	; 0x28
   14d8c:	str	r2, [r3, #44]	; 0x2c
   14d90:	bx	lr
   14d94:	str	r4, [sp, #-8]!
   14d98:	str	lr, [sp, #4]
   14d9c:	bl	10fa4 <abort@plt>
   14da0:	muleq	r2, ip, r2
   14da4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14da8:	strd	r6, [sp, #8]
   14dac:	strd	r8, [sp, #16]
   14db0:	str	sl, [sp, #24]
   14db4:	str	lr, [sp, #28]
   14db8:	sub	sp, sp, #24
   14dbc:	mov	r7, r0
   14dc0:	mov	r8, r1
   14dc4:	mov	r9, r2
   14dc8:	mov	sl, r3
   14dcc:	ldr	r4, [sp, #56]	; 0x38
   14dd0:	cmp	r4, #0
   14dd4:	ldr	r3, [pc, #104]	; 14e44 <__assert_fail@plt+0x3e88>
   14dd8:	moveq	r4, r3
   14ddc:	bl	10ef0 <__errno_location@plt>
   14de0:	mov	r5, r0
   14de4:	ldr	r6, [r0]
   14de8:	ldr	r3, [r4, #44]	; 0x2c
   14dec:	str	r3, [sp, #16]
   14df0:	ldr	r3, [r4, #40]	; 0x28
   14df4:	str	r3, [sp, #12]
   14df8:	add	r3, r4, #8
   14dfc:	str	r3, [sp, #8]
   14e00:	ldr	r3, [r4, #4]
   14e04:	str	r3, [sp, #4]
   14e08:	ldr	r3, [r4]
   14e0c:	str	r3, [sp]
   14e10:	mov	r3, sl
   14e14:	mov	r2, r9
   14e18:	mov	r1, r8
   14e1c:	mov	r0, r7
   14e20:	bl	133a0 <__assert_fail@plt+0x23e4>
   14e24:	str	r6, [r5]
   14e28:	add	sp, sp, #24
   14e2c:	ldrd	r4, [sp]
   14e30:	ldrd	r6, [sp, #8]
   14e34:	ldrd	r8, [sp, #16]
   14e38:	ldr	sl, [sp, #24]
   14e3c:	add	sp, sp, #28
   14e40:	pop	{pc}		; (ldr pc, [sp], #4)
   14e44:	muleq	r2, ip, r2
   14e48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14e4c:	strd	r6, [sp, #8]
   14e50:	strd	r8, [sp, #16]
   14e54:	strd	sl, [sp, #24]
   14e58:	str	lr, [sp, #32]
   14e5c:	sub	sp, sp, #44	; 0x2c
   14e60:	mov	r8, r0
   14e64:	mov	sl, r1
   14e68:	mov	r6, r2
   14e6c:	subs	r4, r3, #0
   14e70:	ldr	r3, [pc, #200]	; 14f40 <__assert_fail@plt+0x3f84>
   14e74:	moveq	r4, r3
   14e78:	bl	10ef0 <__errno_location@plt>
   14e7c:	mov	r7, r0
   14e80:	ldr	fp, [r0]
   14e84:	ldr	r5, [r4, #4]
   14e88:	cmp	r6, #0
   14e8c:	orreq	r5, r5, #1
   14e90:	add	r9, r4, #8
   14e94:	ldr	r3, [r4, #44]	; 0x2c
   14e98:	str	r3, [sp, #16]
   14e9c:	ldr	r3, [r4, #40]	; 0x28
   14ea0:	str	r3, [sp, #12]
   14ea4:	str	r9, [sp, #8]
   14ea8:	str	r5, [sp, #4]
   14eac:	ldr	r3, [r4]
   14eb0:	str	r3, [sp]
   14eb4:	str	sl, [sp, #36]	; 0x24
   14eb8:	mov	r3, sl
   14ebc:	str	r8, [sp, #32]
   14ec0:	mov	r2, r8
   14ec4:	mov	r1, #0
   14ec8:	mov	r0, r1
   14ecc:	bl	133a0 <__assert_fail@plt+0x23e4>
   14ed0:	mov	sl, r0
   14ed4:	add	r8, r0, #1
   14ed8:	mov	r0, r8
   14edc:	bl	15a54 <__assert_fail@plt+0x4a98>
   14ee0:	str	r0, [sp, #28]
   14ee4:	ldr	r3, [r4, #44]	; 0x2c
   14ee8:	str	r3, [sp, #16]
   14eec:	ldr	r3, [r4, #40]	; 0x28
   14ef0:	str	r3, [sp, #12]
   14ef4:	str	r9, [sp, #8]
   14ef8:	str	r5, [sp, #4]
   14efc:	ldr	r3, [r4]
   14f00:	str	r3, [sp]
   14f04:	ldr	r3, [sp, #36]	; 0x24
   14f08:	ldr	r2, [sp, #32]
   14f0c:	mov	r1, r8
   14f10:	bl	133a0 <__assert_fail@plt+0x23e4>
   14f14:	str	fp, [r7]
   14f18:	cmp	r6, #0
   14f1c:	strne	sl, [r6]
   14f20:	ldr	r0, [sp, #28]
   14f24:	add	sp, sp, #44	; 0x2c
   14f28:	ldrd	r4, [sp]
   14f2c:	ldrd	r6, [sp, #8]
   14f30:	ldrd	r8, [sp, #16]
   14f34:	ldrd	sl, [sp, #24]
   14f38:	add	sp, sp, #32
   14f3c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f40:	muleq	r2, ip, r2
   14f44:	str	r4, [sp, #-8]!
   14f48:	str	lr, [sp, #4]
   14f4c:	mov	r3, r2
   14f50:	mov	r2, #0
   14f54:	bl	14e48 <__assert_fail@plt+0x3e8c>
   14f58:	ldr	r4, [sp]
   14f5c:	add	sp, sp, #4
   14f60:	pop	{pc}		; (ldr pc, [sp], #4)
   14f64:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14f68:	strd	r6, [sp, #8]
   14f6c:	str	r8, [sp, #16]
   14f70:	str	lr, [sp, #20]
   14f74:	movw	r3, #33028	; 0x8104
   14f78:	movt	r3, #2
   14f7c:	ldr	r7, [r3]
   14f80:	ldr	r3, [r3, #4]
   14f84:	cmp	r3, #1
   14f88:	ble	14fb4 <__assert_fail@plt+0x3ff8>
   14f8c:	mov	r4, #1
   14f90:	add	r6, r7, #4
   14f94:	movw	r5, #33028	; 0x8104
   14f98:	movt	r5, #2
   14f9c:	ldr	r0, [r6, r4, lsl #3]
   14fa0:	bl	12bd0 <__assert_fail@plt+0x1c14>
   14fa4:	add	r4, r4, #1
   14fa8:	ldr	r3, [r5, #4]
   14fac:	cmp	r3, r4
   14fb0:	bgt	14f9c <__assert_fail@plt+0x3fe0>
   14fb4:	ldr	r0, [r7, #4]
   14fb8:	movw	r3, #33180	; 0x819c
   14fbc:	movt	r3, #2
   14fc0:	cmp	r0, r3
   14fc4:	beq	14fe8 <__assert_fail@plt+0x402c>
   14fc8:	bl	12bd0 <__assert_fail@plt+0x1c14>
   14fcc:	movw	r3, #33028	; 0x8104
   14fd0:	movt	r3, #2
   14fd4:	mov	r2, #256	; 0x100
   14fd8:	str	r2, [r3, #8]
   14fdc:	movw	r2, #33180	; 0x819c
   14fe0:	movt	r2, #2
   14fe4:	str	r2, [r3, #12]
   14fe8:	ldr	r3, [pc, #64]	; 15030 <__assert_fail@plt+0x4074>
   14fec:	cmp	r7, r3
   14ff0:	beq	1500c <__assert_fail@plt+0x4050>
   14ff4:	mov	r0, r7
   14ff8:	bl	12bd0 <__assert_fail@plt+0x1c14>
   14ffc:	movw	r3, #33028	; 0x8104
   15000:	movt	r3, #2
   15004:	add	r2, r3, #8
   15008:	str	r2, [r3]
   1500c:	movw	r3, #33028	; 0x8104
   15010:	movt	r3, #2
   15014:	mov	r2, #1
   15018:	str	r2, [r3, #4]
   1501c:	ldrd	r4, [sp]
   15020:	ldrd	r6, [sp, #8]
   15024:	ldr	r8, [sp, #16]
   15028:	add	sp, sp, #20
   1502c:	pop	{pc}		; (ldr pc, [sp], #4)
   15030:	andeq	r8, r2, ip, lsl #2
   15034:	str	r4, [sp, #-8]!
   15038:	str	lr, [sp, #4]
   1503c:	ldr	r3, [pc, #16]	; 15054 <__assert_fail@plt+0x4098>
   15040:	mvn	r2, #0
   15044:	bl	14a98 <__assert_fail@plt+0x3adc>
   15048:	ldr	r4, [sp]
   1504c:	add	sp, sp, #4
   15050:	pop	{pc}		; (ldr pc, [sp], #4)
   15054:	muleq	r2, ip, r2
   15058:	str	r4, [sp, #-8]!
   1505c:	str	lr, [sp, #4]
   15060:	ldr	r3, [pc, #12]	; 15074 <__assert_fail@plt+0x40b8>
   15064:	bl	14a98 <__assert_fail@plt+0x3adc>
   15068:	ldr	r4, [sp]
   1506c:	add	sp, sp, #4
   15070:	pop	{pc}		; (ldr pc, [sp], #4)
   15074:	muleq	r2, ip, r2
   15078:	str	r4, [sp, #-8]!
   1507c:	str	lr, [sp, #4]
   15080:	mov	r1, r0
   15084:	mov	r0, #0
   15088:	bl	15034 <__assert_fail@plt+0x4078>
   1508c:	ldr	r4, [sp]
   15090:	add	sp, sp, #4
   15094:	pop	{pc}		; (ldr pc, [sp], #4)
   15098:	str	r4, [sp, #-8]!
   1509c:	str	lr, [sp, #4]
   150a0:	mov	r2, r1
   150a4:	mov	r1, r0
   150a8:	mov	r0, #0
   150ac:	bl	15058 <__assert_fail@plt+0x409c>
   150b0:	ldr	r4, [sp]
   150b4:	add	sp, sp, #4
   150b8:	pop	{pc}		; (ldr pc, [sp], #4)
   150bc:	strd	r4, [sp, #-12]!
   150c0:	str	lr, [sp, #8]
   150c4:	sub	sp, sp, #52	; 0x34
   150c8:	mov	r4, r0
   150cc:	mov	r5, r2
   150d0:	mov	r0, sp
   150d4:	bl	1320c <__assert_fail@plt+0x2250>
   150d8:	mov	r3, sp
   150dc:	mvn	r2, #0
   150e0:	mov	r1, r5
   150e4:	mov	r0, r4
   150e8:	bl	14a98 <__assert_fail@plt+0x3adc>
   150ec:	add	sp, sp, #52	; 0x34
   150f0:	ldrd	r4, [sp]
   150f4:	add	sp, sp, #8
   150f8:	pop	{pc}		; (ldr pc, [sp], #4)
   150fc:	strd	r4, [sp, #-16]!
   15100:	str	r6, [sp, #8]
   15104:	str	lr, [sp, #12]
   15108:	sub	sp, sp, #48	; 0x30
   1510c:	mov	r4, r0
   15110:	mov	r5, r2
   15114:	mov	r6, r3
   15118:	mov	r0, sp
   1511c:	bl	1320c <__assert_fail@plt+0x2250>
   15120:	mov	r3, sp
   15124:	mov	r2, r6
   15128:	mov	r1, r5
   1512c:	mov	r0, r4
   15130:	bl	14a98 <__assert_fail@plt+0x3adc>
   15134:	add	sp, sp, #48	; 0x30
   15138:	ldrd	r4, [sp]
   1513c:	ldr	r6, [sp, #8]
   15140:	add	sp, sp, #12
   15144:	pop	{pc}		; (ldr pc, [sp], #4)
   15148:	str	r4, [sp, #-8]!
   1514c:	str	lr, [sp, #4]
   15150:	mov	r2, r1
   15154:	mov	r1, r0
   15158:	mov	r0, #0
   1515c:	bl	150bc <__assert_fail@plt+0x4100>
   15160:	ldr	r4, [sp]
   15164:	add	sp, sp, #4
   15168:	pop	{pc}		; (ldr pc, [sp], #4)
   1516c:	str	r4, [sp, #-8]!
   15170:	str	lr, [sp, #4]
   15174:	mov	r3, r2
   15178:	mov	r2, r1
   1517c:	mov	r1, r0
   15180:	mov	r0, #0
   15184:	bl	150fc <__assert_fail@plt+0x4140>
   15188:	ldr	r4, [sp]
   1518c:	add	sp, sp, #4
   15190:	pop	{pc}		; (ldr pc, [sp], #4)
   15194:	strd	r4, [sp, #-12]!
   15198:	str	lr, [sp, #8]
   1519c:	sub	sp, sp, #52	; 0x34
   151a0:	mov	r4, r0
   151a4:	mov	r5, r1
   151a8:	mov	r1, r2
   151ac:	ldr	r0, [pc, #92]	; 15210 <__assert_fail@plt+0x4254>
   151b0:	ldrd	r2, [r0]
   151b4:	strd	r2, [sp]
   151b8:	ldrd	r2, [r0, #8]
   151bc:	strd	r2, [sp, #8]
   151c0:	ldrd	r2, [r0, #16]
   151c4:	strd	r2, [sp, #16]
   151c8:	ldrd	r2, [r0, #24]
   151cc:	strd	r2, [sp, #24]
   151d0:	ldrd	r2, [r0, #32]
   151d4:	strd	r2, [sp, #32]
   151d8:	ldrd	r2, [r0, #40]	; 0x28
   151dc:	strd	r2, [sp, #40]	; 0x28
   151e0:	mov	r2, #1
   151e4:	mov	r0, sp
   151e8:	bl	14d0c <__assert_fail@plt+0x3d50>
   151ec:	mov	r3, sp
   151f0:	mov	r2, r5
   151f4:	mov	r1, r4
   151f8:	mov	r0, #0
   151fc:	bl	14a98 <__assert_fail@plt+0x3adc>
   15200:	add	sp, sp, #52	; 0x34
   15204:	ldrd	r4, [sp]
   15208:	add	sp, sp, #8
   1520c:	pop	{pc}		; (ldr pc, [sp], #4)
   15210:	muleq	r2, ip, r2
   15214:	str	r4, [sp, #-8]!
   15218:	str	lr, [sp, #4]
   1521c:	mov	r2, r1
   15220:	mvn	r1, #0
   15224:	bl	15194 <__assert_fail@plt+0x41d8>
   15228:	ldr	r4, [sp]
   1522c:	add	sp, sp, #4
   15230:	pop	{pc}		; (ldr pc, [sp], #4)
   15234:	str	r4, [sp, #-8]!
   15238:	str	lr, [sp, #4]
   1523c:	mov	r1, #58	; 0x3a
   15240:	bl	15214 <__assert_fail@plt+0x4258>
   15244:	ldr	r4, [sp]
   15248:	add	sp, sp, #4
   1524c:	pop	{pc}		; (ldr pc, [sp], #4)
   15250:	str	r4, [sp, #-8]!
   15254:	str	lr, [sp, #4]
   15258:	mov	r2, #58	; 0x3a
   1525c:	bl	15194 <__assert_fail@plt+0x41d8>
   15260:	ldr	r4, [sp]
   15264:	add	sp, sp, #4
   15268:	pop	{pc}		; (ldr pc, [sp], #4)
   1526c:	strd	r4, [sp, #-12]!
   15270:	str	lr, [sp, #8]
   15274:	sub	sp, sp, #100	; 0x64
   15278:	mov	r4, r0
   1527c:	mov	r5, r2
   15280:	mov	r0, sp
   15284:	bl	1320c <__assert_fail@plt+0x2250>
   15288:	ldrd	r2, [sp]
   1528c:	strd	r2, [sp, #48]	; 0x30
   15290:	ldrd	r2, [sp, #8]
   15294:	strd	r2, [sp, #56]	; 0x38
   15298:	ldrd	r2, [sp, #16]
   1529c:	strd	r2, [sp, #64]	; 0x40
   152a0:	ldrd	r2, [sp, #24]
   152a4:	strd	r2, [sp, #72]	; 0x48
   152a8:	ldrd	r2, [sp, #32]
   152ac:	strd	r2, [sp, #80]	; 0x50
   152b0:	ldrd	r2, [sp, #40]	; 0x28
   152b4:	strd	r2, [sp, #88]	; 0x58
   152b8:	mov	r2, #1
   152bc:	mov	r1, #58	; 0x3a
   152c0:	add	r0, sp, #48	; 0x30
   152c4:	bl	14d0c <__assert_fail@plt+0x3d50>
   152c8:	add	r3, sp, #48	; 0x30
   152cc:	mvn	r2, #0
   152d0:	mov	r1, r5
   152d4:	mov	r0, r4
   152d8:	bl	14a98 <__assert_fail@plt+0x3adc>
   152dc:	add	sp, sp, #100	; 0x64
   152e0:	ldrd	r4, [sp]
   152e4:	add	sp, sp, #8
   152e8:	pop	{pc}		; (ldr pc, [sp], #4)
   152ec:	strd	r4, [sp, #-20]!	; 0xffffffec
   152f0:	strd	r6, [sp, #8]
   152f4:	str	lr, [sp, #16]
   152f8:	sub	sp, sp, #52	; 0x34
   152fc:	mov	r4, r0
   15300:	mov	r5, r3
   15304:	ldr	r3, [pc, #92]	; 15368 <__assert_fail@plt+0x43ac>
   15308:	ldrd	r6, [r3]
   1530c:	strd	r6, [sp]
   15310:	ldrd	r6, [r3, #8]
   15314:	strd	r6, [sp, #8]
   15318:	ldrd	r6, [r3, #16]
   1531c:	strd	r6, [sp, #16]
   15320:	ldrd	r6, [r3, #24]
   15324:	strd	r6, [sp, #24]
   15328:	ldrd	r6, [r3, #32]
   1532c:	strd	r6, [sp, #32]
   15330:	ldrd	r6, [r3, #40]	; 0x28
   15334:	strd	r6, [sp, #40]	; 0x28
   15338:	mov	r0, sp
   1533c:	bl	14d68 <__assert_fail@plt+0x3dac>
   15340:	mov	r3, sp
   15344:	ldr	r2, [sp, #72]	; 0x48
   15348:	mov	r1, r5
   1534c:	mov	r0, r4
   15350:	bl	14a98 <__assert_fail@plt+0x3adc>
   15354:	add	sp, sp, #52	; 0x34
   15358:	ldrd	r4, [sp]
   1535c:	ldrd	r6, [sp, #8]
   15360:	add	sp, sp, #16
   15364:	pop	{pc}		; (ldr pc, [sp], #4)
   15368:	muleq	r2, ip, r2
   1536c:	push	{lr}		; (str lr, [sp, #-4]!)
   15370:	sub	sp, sp, #12
   15374:	mvn	ip, #0
   15378:	str	ip, [sp]
   1537c:	bl	152ec <__assert_fail@plt+0x4330>
   15380:	add	sp, sp, #12
   15384:	pop	{pc}		; (ldr pc, [sp], #4)
   15388:	str	r4, [sp, #-8]!
   1538c:	str	lr, [sp, #4]
   15390:	mov	r3, r2
   15394:	mov	r2, r1
   15398:	mov	r1, r0
   1539c:	mov	r0, #0
   153a0:	bl	1536c <__assert_fail@plt+0x43b0>
   153a4:	ldr	r4, [sp]
   153a8:	add	sp, sp, #4
   153ac:	pop	{pc}		; (ldr pc, [sp], #4)
   153b0:	push	{lr}		; (str lr, [sp, #-4]!)
   153b4:	sub	sp, sp, #12
   153b8:	str	r3, [sp]
   153bc:	mov	r3, r2
   153c0:	mov	r2, r1
   153c4:	mov	r1, r0
   153c8:	mov	r0, #0
   153cc:	bl	152ec <__assert_fail@plt+0x4330>
   153d0:	add	sp, sp, #12
   153d4:	pop	{pc}		; (ldr pc, [sp], #4)
   153d8:	str	r4, [sp, #-8]!
   153dc:	str	lr, [sp, #4]
   153e0:	ldr	r3, [pc, #12]	; 153f4 <__assert_fail@plt+0x4438>
   153e4:	bl	14a98 <__assert_fail@plt+0x3adc>
   153e8:	ldr	r4, [sp]
   153ec:	add	sp, sp, #4
   153f0:	pop	{pc}		; (ldr pc, [sp], #4)
   153f4:	andeq	r8, r2, r4, lsl r1
   153f8:	str	r4, [sp, #-8]!
   153fc:	str	lr, [sp, #4]
   15400:	mov	r2, r1
   15404:	mov	r1, r0
   15408:	mov	r0, #0
   1540c:	bl	153d8 <__assert_fail@plt+0x441c>
   15410:	ldr	r4, [sp]
   15414:	add	sp, sp, #4
   15418:	pop	{pc}		; (ldr pc, [sp], #4)
   1541c:	str	r4, [sp, #-8]!
   15420:	str	lr, [sp, #4]
   15424:	mvn	r2, #0
   15428:	bl	153d8 <__assert_fail@plt+0x441c>
   1542c:	ldr	r4, [sp]
   15430:	add	sp, sp, #4
   15434:	pop	{pc}		; (ldr pc, [sp], #4)
   15438:	str	r4, [sp, #-8]!
   1543c:	str	lr, [sp, #4]
   15440:	mov	r1, r0
   15444:	mov	r0, #0
   15448:	bl	1541c <__assert_fail@plt+0x4460>
   1544c:	ldr	r4, [sp]
   15450:	add	sp, sp, #4
   15454:	pop	{pc}		; (ldr pc, [sp], #4)
   15458:	strd	r4, [sp, #-16]!
   1545c:	str	r6, [sp, #8]
   15460:	str	lr, [sp, #12]
   15464:	sub	sp, sp, #32
   15468:	mov	r4, r0
   1546c:	ldr	r5, [sp, #48]	; 0x30
   15470:	ldr	r6, [sp, #52]	; 0x34
   15474:	cmp	r1, #0
   15478:	beq	15544 <__assert_fail@plt+0x4588>
   1547c:	str	r3, [sp, #4]
   15480:	str	r2, [sp]
   15484:	mov	r3, r1
   15488:	movw	r2, #30364	; 0x769c
   1548c:	movt	r2, #1
   15490:	mov	r1, #1
   15494:	bl	10f2c <__fprintf_chk@plt>
   15498:	mov	r2, #5
   1549c:	movw	r1, #30384	; 0x76b0
   154a0:	movt	r1, #1
   154a4:	mov	r0, #0
   154a8:	bl	10dd0 <dcgettext@plt>
   154ac:	movw	r3, #2022	; 0x7e6
   154b0:	str	r3, [sp]
   154b4:	mov	r3, r0
   154b8:	movw	r2, #31112	; 0x7988
   154bc:	movt	r2, #1
   154c0:	mov	r1, #1
   154c4:	mov	r0, r4
   154c8:	bl	10f2c <__fprintf_chk@plt>
   154cc:	mov	r1, r4
   154d0:	mov	r0, #10
   154d4:	bl	10dc4 <fputc_unlocked@plt>
   154d8:	mov	r2, #5
   154dc:	movw	r1, #30388	; 0x76b4
   154e0:	movt	r1, #1
   154e4:	mov	r0, #0
   154e8:	bl	10dd0 <dcgettext@plt>
   154ec:	movw	r3, #30560	; 0x7760
   154f0:	movt	r3, #1
   154f4:	mov	r2, r0
   154f8:	mov	r1, #1
   154fc:	mov	r0, r4
   15500:	bl	10f2c <__fprintf_chk@plt>
   15504:	mov	r1, r4
   15508:	mov	r0, #10
   1550c:	bl	10dc4 <fputc_unlocked@plt>
   15510:	cmp	r6, #9
   15514:	ldrls	pc, [pc, r6, lsl #2]
   15518:	b	1581c <__assert_fail@plt+0x4860>
   1551c:	andeq	r5, r1, r8, lsl #11
   15520:	andeq	r5, r1, r0, ror #10
   15524:	muleq	r1, ip, r5
   15528:	ldrdeq	r5, [r1], -r0
   1552c:	andeq	r5, r1, ip, lsl #12
   15530:	andeq	r5, r1, r0, asr r6
   15534:	muleq	r1, ip, r6
   15538:	strdeq	r5, [r1], -r0
   1553c:	andeq	r5, r1, ip, asr #14
   15540:			; <UNDEFINED> instruction: 0x000157b0
   15544:	str	r3, [sp]
   15548:	mov	r3, r2
   1554c:	movw	r2, #30376	; 0x76a8
   15550:	movt	r2, #1
   15554:	mov	r1, #1
   15558:	bl	10f2c <__fprintf_chk@plt>
   1555c:	b	15498 <__assert_fail@plt+0x44dc>
   15560:	mov	r2, #5
   15564:	movw	r1, #30596	; 0x7784
   15568:	movt	r1, #1
   1556c:	mov	r0, #0
   15570:	bl	10dd0 <dcgettext@plt>
   15574:	ldr	r3, [r5]
   15578:	mov	r2, r0
   1557c:	mov	r1, #1
   15580:	mov	r0, r4
   15584:	bl	10f2c <__fprintf_chk@plt>
   15588:	add	sp, sp, #32
   1558c:	ldrd	r4, [sp]
   15590:	ldr	r6, [sp, #8]
   15594:	add	sp, sp, #12
   15598:	pop	{pc}		; (ldr pc, [sp], #4)
   1559c:	mov	r2, #5
   155a0:	movw	r1, #30612	; 0x7794
   155a4:	movt	r1, #1
   155a8:	mov	r0, #0
   155ac:	bl	10dd0 <dcgettext@plt>
   155b0:	ldr	r3, [r5, #4]
   155b4:	str	r3, [sp]
   155b8:	ldr	r3, [r5]
   155bc:	mov	r2, r0
   155c0:	mov	r1, #1
   155c4:	mov	r0, r4
   155c8:	bl	10f2c <__fprintf_chk@plt>
   155cc:	b	15588 <__assert_fail@plt+0x45cc>
   155d0:	mov	r2, #5
   155d4:	movw	r1, #30636	; 0x77ac
   155d8:	movt	r1, #1
   155dc:	mov	r0, #0
   155e0:	bl	10dd0 <dcgettext@plt>
   155e4:	ldr	r3, [r5, #8]
   155e8:	str	r3, [sp, #4]
   155ec:	ldr	r3, [r5, #4]
   155f0:	str	r3, [sp]
   155f4:	ldr	r3, [r5]
   155f8:	mov	r2, r0
   155fc:	mov	r1, #1
   15600:	mov	r0, r4
   15604:	bl	10f2c <__fprintf_chk@plt>
   15608:	b	15588 <__assert_fail@plt+0x45cc>
   1560c:	mov	r2, #5
   15610:	movw	r1, #30664	; 0x77c8
   15614:	movt	r1, #1
   15618:	mov	r0, #0
   1561c:	bl	10dd0 <dcgettext@plt>
   15620:	ldr	r3, [r5, #12]
   15624:	str	r3, [sp, #8]
   15628:	ldr	r3, [r5, #8]
   1562c:	str	r3, [sp, #4]
   15630:	ldr	r3, [r5, #4]
   15634:	str	r3, [sp]
   15638:	ldr	r3, [r5]
   1563c:	mov	r2, r0
   15640:	mov	r1, #1
   15644:	mov	r0, r4
   15648:	bl	10f2c <__fprintf_chk@plt>
   1564c:	b	15588 <__assert_fail@plt+0x45cc>
   15650:	mov	r2, #5
   15654:	movw	r1, #30696	; 0x77e8
   15658:	movt	r1, #1
   1565c:	mov	r0, #0
   15660:	bl	10dd0 <dcgettext@plt>
   15664:	ldr	r3, [r5, #16]
   15668:	str	r3, [sp, #12]
   1566c:	ldr	r3, [r5, #12]
   15670:	str	r3, [sp, #8]
   15674:	ldr	r3, [r5, #8]
   15678:	str	r3, [sp, #4]
   1567c:	ldr	r3, [r5, #4]
   15680:	str	r3, [sp]
   15684:	ldr	r3, [r5]
   15688:	mov	r2, r0
   1568c:	mov	r1, #1
   15690:	mov	r0, r4
   15694:	bl	10f2c <__fprintf_chk@plt>
   15698:	b	15588 <__assert_fail@plt+0x45cc>
   1569c:	mov	r2, #5
   156a0:	movw	r1, #30732	; 0x780c
   156a4:	movt	r1, #1
   156a8:	mov	r0, #0
   156ac:	bl	10dd0 <dcgettext@plt>
   156b0:	ldr	r3, [r5, #20]
   156b4:	str	r3, [sp, #16]
   156b8:	ldr	r3, [r5, #16]
   156bc:	str	r3, [sp, #12]
   156c0:	ldr	r3, [r5, #12]
   156c4:	str	r3, [sp, #8]
   156c8:	ldr	r3, [r5, #8]
   156cc:	str	r3, [sp, #4]
   156d0:	ldr	r3, [r5, #4]
   156d4:	str	r3, [sp]
   156d8:	ldr	r3, [r5]
   156dc:	mov	r2, r0
   156e0:	mov	r1, #1
   156e4:	mov	r0, r4
   156e8:	bl	10f2c <__fprintf_chk@plt>
   156ec:	b	15588 <__assert_fail@plt+0x45cc>
   156f0:	mov	r2, #5
   156f4:	movw	r1, #30772	; 0x7834
   156f8:	movt	r1, #1
   156fc:	mov	r0, #0
   15700:	bl	10dd0 <dcgettext@plt>
   15704:	ldr	r3, [r5, #24]
   15708:	str	r3, [sp, #20]
   1570c:	ldr	r3, [r5, #20]
   15710:	str	r3, [sp, #16]
   15714:	ldr	r3, [r5, #16]
   15718:	str	r3, [sp, #12]
   1571c:	ldr	r3, [r5, #12]
   15720:	str	r3, [sp, #8]
   15724:	ldr	r3, [r5, #8]
   15728:	str	r3, [sp, #4]
   1572c:	ldr	r3, [r5, #4]
   15730:	str	r3, [sp]
   15734:	ldr	r3, [r5]
   15738:	mov	r2, r0
   1573c:	mov	r1, #1
   15740:	mov	r0, r4
   15744:	bl	10f2c <__fprintf_chk@plt>
   15748:	b	15588 <__assert_fail@plt+0x45cc>
   1574c:	mov	r2, #5
   15750:	movw	r1, #30816	; 0x7860
   15754:	movt	r1, #1
   15758:	mov	r0, #0
   1575c:	bl	10dd0 <dcgettext@plt>
   15760:	ldr	r3, [r5, #28]
   15764:	str	r3, [sp, #24]
   15768:	ldr	r3, [r5, #24]
   1576c:	str	r3, [sp, #20]
   15770:	ldr	r3, [r5, #20]
   15774:	str	r3, [sp, #16]
   15778:	ldr	r3, [r5, #16]
   1577c:	str	r3, [sp, #12]
   15780:	ldr	r3, [r5, #12]
   15784:	str	r3, [sp, #8]
   15788:	ldr	r3, [r5, #8]
   1578c:	str	r3, [sp, #4]
   15790:	ldr	r3, [r5, #4]
   15794:	str	r3, [sp]
   15798:	ldr	r3, [r5]
   1579c:	mov	r2, r0
   157a0:	mov	r1, #1
   157a4:	mov	r0, r4
   157a8:	bl	10f2c <__fprintf_chk@plt>
   157ac:	b	15588 <__assert_fail@plt+0x45cc>
   157b0:	mov	r2, #5
   157b4:	movw	r1, #30864	; 0x7890
   157b8:	movt	r1, #1
   157bc:	mov	r0, #0
   157c0:	bl	10dd0 <dcgettext@plt>
   157c4:	ldr	r3, [r5, #32]
   157c8:	str	r3, [sp, #28]
   157cc:	ldr	r3, [r5, #28]
   157d0:	str	r3, [sp, #24]
   157d4:	ldr	r3, [r5, #24]
   157d8:	str	r3, [sp, #20]
   157dc:	ldr	r3, [r5, #20]
   157e0:	str	r3, [sp, #16]
   157e4:	ldr	r3, [r5, #16]
   157e8:	str	r3, [sp, #12]
   157ec:	ldr	r3, [r5, #12]
   157f0:	str	r3, [sp, #8]
   157f4:	ldr	r3, [r5, #8]
   157f8:	str	r3, [sp, #4]
   157fc:	ldr	r3, [r5, #4]
   15800:	str	r3, [sp]
   15804:	ldr	r3, [r5]
   15808:	mov	r2, r0
   1580c:	mov	r1, #1
   15810:	mov	r0, r4
   15814:	bl	10f2c <__fprintf_chk@plt>
   15818:	b	15588 <__assert_fail@plt+0x45cc>
   1581c:	mov	r2, #5
   15820:	movw	r1, #30916	; 0x78c4
   15824:	movt	r1, #1
   15828:	mov	r0, #0
   1582c:	bl	10dd0 <dcgettext@plt>
   15830:	ldr	r3, [r5, #32]
   15834:	str	r3, [sp, #28]
   15838:	ldr	r3, [r5, #28]
   1583c:	str	r3, [sp, #24]
   15840:	ldr	r3, [r5, #24]
   15844:	str	r3, [sp, #20]
   15848:	ldr	r3, [r5, #20]
   1584c:	str	r3, [sp, #16]
   15850:	ldr	r3, [r5, #16]
   15854:	str	r3, [sp, #12]
   15858:	ldr	r3, [r5, #12]
   1585c:	str	r3, [sp, #8]
   15860:	ldr	r3, [r5, #8]
   15864:	str	r3, [sp, #4]
   15868:	ldr	r3, [r5, #4]
   1586c:	str	r3, [sp]
   15870:	ldr	r3, [r5]
   15874:	mov	r2, r0
   15878:	mov	r1, #1
   1587c:	mov	r0, r4
   15880:	bl	10f2c <__fprintf_chk@plt>
   15884:	b	15588 <__assert_fail@plt+0x45cc>
   15888:	strd	r4, [sp, #-12]!
   1588c:	str	lr, [sp, #8]
   15890:	sub	sp, sp, #12
   15894:	ldr	r5, [sp, #24]
   15898:	ldr	ip, [r5]
   1589c:	cmp	ip, #0
   158a0:	beq	158d8 <__assert_fail@plt+0x491c>
   158a4:	mov	lr, r5
   158a8:	mov	ip, #0
   158ac:	add	ip, ip, #1
   158b0:	ldr	r4, [lr, #4]!
   158b4:	cmp	r4, #0
   158b8:	bne	158ac <__assert_fail@plt+0x48f0>
   158bc:	str	ip, [sp, #4]
   158c0:	str	r5, [sp]
   158c4:	bl	15458 <__assert_fail@plt+0x449c>
   158c8:	add	sp, sp, #12
   158cc:	ldrd	r4, [sp]
   158d0:	add	sp, sp, #8
   158d4:	pop	{pc}		; (ldr pc, [sp], #4)
   158d8:	mov	ip, #0
   158dc:	b	158bc <__assert_fail@plt+0x4900>
   158e0:	strd	r4, [sp, #-12]!
   158e4:	str	lr, [sp, #8]
   158e8:	sub	sp, sp, #52	; 0x34
   158ec:	ldr	r5, [sp, #64]	; 0x40
   158f0:	add	r4, sp, #8
   158f4:	mov	ip, #0
   158f8:	ldr	lr, [r5], #4
   158fc:	str	lr, [r4], #4
   15900:	cmp	lr, #0
   15904:	beq	15914 <__assert_fail@plt+0x4958>
   15908:	add	ip, ip, #1
   1590c:	cmp	ip, #10
   15910:	bne	158f8 <__assert_fail@plt+0x493c>
   15914:	str	ip, [sp, #4]
   15918:	add	ip, sp, #8
   1591c:	str	ip, [sp]
   15920:	bl	15458 <__assert_fail@plt+0x449c>
   15924:	add	sp, sp, #52	; 0x34
   15928:	ldrd	r4, [sp]
   1592c:	add	sp, sp, #8
   15930:	pop	{pc}		; (ldr pc, [sp], #4)
   15934:	push	{r3}		; (str r3, [sp, #-4]!)
   15938:	push	{lr}		; (str lr, [sp, #-4]!)
   1593c:	sub	sp, sp, #16
   15940:	add	r3, sp, #24
   15944:	str	r3, [sp, #12]
   15948:	str	r3, [sp]
   1594c:	ldr	r3, [sp, #20]
   15950:	bl	158e0 <__assert_fail@plt+0x4924>
   15954:	add	sp, sp, #16
   15958:	pop	{lr}		; (ldr lr, [sp], #4)
   1595c:	add	sp, sp, #4
   15960:	bx	lr
   15964:	str	r4, [sp, #-8]!
   15968:	str	lr, [sp, #4]
   1596c:	movw	r3, #33124	; 0x8164
   15970:	movt	r3, #2
   15974:	ldr	r1, [r3]
   15978:	mov	r0, #10
   1597c:	bl	10dc4 <fputc_unlocked@plt>
   15980:	mov	r2, #5
   15984:	movw	r1, #30976	; 0x7900
   15988:	movt	r1, #1
   1598c:	mov	r0, #0
   15990:	bl	10dd0 <dcgettext@plt>
   15994:	movw	r2, #30996	; 0x7914
   15998:	movt	r2, #1
   1599c:	mov	r1, r0
   159a0:	mov	r0, #1
   159a4:	bl	10f14 <__printf_chk@plt>
   159a8:	mov	r2, #5
   159ac:	movw	r1, #31020	; 0x792c
   159b0:	movt	r1, #1
   159b4:	mov	r0, #0
   159b8:	bl	10dd0 <dcgettext@plt>
   159bc:	movw	r3, #29000	; 0x7148
   159c0:	movt	r3, #1
   159c4:	movw	r2, #29040	; 0x7170
   159c8:	movt	r2, #1
   159cc:	mov	r1, r0
   159d0:	mov	r0, #1
   159d4:	bl	10f14 <__printf_chk@plt>
   159d8:	mov	r2, #5
   159dc:	movw	r1, #31040	; 0x7940
   159e0:	movt	r1, #1
   159e4:	mov	r0, #0
   159e8:	bl	10dd0 <dcgettext@plt>
   159ec:	movw	r2, #31080	; 0x7968
   159f0:	movt	r2, #1
   159f4:	mov	r1, r0
   159f8:	mov	r0, #1
   159fc:	bl	10f14 <__printf_chk@plt>
   15a00:	ldr	r4, [sp]
   15a04:	add	sp, sp, #4
   15a08:	pop	{pc}		; (ldr pc, [sp], #4)
   15a0c:	str	r4, [sp, #-8]!
   15a10:	str	lr, [sp, #4]
   15a14:	bl	165cc <__assert_fail@plt+0x5610>
   15a18:	cmp	r0, #0
   15a1c:	beq	15a2c <__assert_fail@plt+0x4a70>
   15a20:	ldr	r4, [sp]
   15a24:	add	sp, sp, #4
   15a28:	pop	{pc}		; (ldr pc, [sp], #4)
   15a2c:	bl	15ea0 <__assert_fail@plt+0x4ee4>
   15a30:	str	r4, [sp, #-8]!
   15a34:	str	lr, [sp, #4]
   15a38:	bl	165cc <__assert_fail@plt+0x5610>
   15a3c:	cmp	r0, #0
   15a40:	beq	15a50 <__assert_fail@plt+0x4a94>
   15a44:	ldr	r4, [sp]
   15a48:	add	sp, sp, #4
   15a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a50:	bl	15ea0 <__assert_fail@plt+0x4ee4>
   15a54:	str	r4, [sp, #-8]!
   15a58:	str	lr, [sp, #4]
   15a5c:	bl	15a0c <__assert_fail@plt+0x4a50>
   15a60:	ldr	r4, [sp]
   15a64:	add	sp, sp, #4
   15a68:	pop	{pc}		; (ldr pc, [sp], #4)
   15a6c:	strd	r4, [sp, #-16]!
   15a70:	str	r6, [sp, #8]
   15a74:	str	lr, [sp, #12]
   15a78:	mov	r5, r0
   15a7c:	mov	r4, r1
   15a80:	bl	16608 <__assert_fail@plt+0x564c>
   15a84:	cmp	r0, #0
   15a88:	beq	15a9c <__assert_fail@plt+0x4ae0>
   15a8c:	ldrd	r4, [sp]
   15a90:	ldr	r6, [sp, #8]
   15a94:	add	sp, sp, #12
   15a98:	pop	{pc}		; (ldr pc, [sp], #4)
   15a9c:	adds	r4, r4, #0
   15aa0:	movne	r4, #1
   15aa4:	cmp	r5, #0
   15aa8:	moveq	r4, #1
   15aac:	cmp	r4, #0
   15ab0:	beq	15a8c <__assert_fail@plt+0x4ad0>
   15ab4:	bl	15ea0 <__assert_fail@plt+0x4ee4>
   15ab8:	str	r4, [sp, #-8]!
   15abc:	str	lr, [sp, #4]
   15ac0:	cmp	r1, #0
   15ac4:	orreq	r1, r1, #1
   15ac8:	bl	16608 <__assert_fail@plt+0x564c>
   15acc:	cmp	r0, #0
   15ad0:	beq	15ae0 <__assert_fail@plt+0x4b24>
   15ad4:	ldr	r4, [sp]
   15ad8:	add	sp, sp, #4
   15adc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ae0:	bl	15ea0 <__assert_fail@plt+0x4ee4>
   15ae4:	strd	r4, [sp, #-16]!
   15ae8:	str	r6, [sp, #8]
   15aec:	str	lr, [sp, #12]
   15af0:	mov	r4, r0
   15af4:	mov	r6, r1
   15af8:	mov	r5, r2
   15afc:	bl	167a4 <__assert_fail@plt+0x57e8>
   15b00:	cmp	r0, #0
   15b04:	beq	15b18 <__assert_fail@plt+0x4b5c>
   15b08:	ldrd	r4, [sp]
   15b0c:	ldr	r6, [sp, #8]
   15b10:	add	sp, sp, #12
   15b14:	pop	{pc}		; (ldr pc, [sp], #4)
   15b18:	cmp	r4, #0
   15b1c:	beq	15b2c <__assert_fail@plt+0x4b70>
   15b20:	cmp	r6, #0
   15b24:	cmpne	r5, #0
   15b28:	beq	15b08 <__assert_fail@plt+0x4b4c>
   15b2c:	bl	15ea0 <__assert_fail@plt+0x4ee4>
   15b30:	str	r4, [sp, #-8]!
   15b34:	str	lr, [sp, #4]
   15b38:	bl	15ae4 <__assert_fail@plt+0x4b28>
   15b3c:	ldr	r4, [sp]
   15b40:	add	sp, sp, #4
   15b44:	pop	{pc}		; (ldr pc, [sp], #4)
   15b48:	str	r4, [sp, #-8]!
   15b4c:	str	lr, [sp, #4]
   15b50:	mov	ip, r1
   15b54:	mov	r3, r2
   15b58:	cmp	r2, #0
   15b5c:	cmpne	r1, #0
   15b60:	moveq	r3, #1
   15b64:	moveq	ip, r3
   15b68:	mov	r2, r3
   15b6c:	mov	r1, ip
   15b70:	bl	167a4 <__assert_fail@plt+0x57e8>
   15b74:	cmp	r0, #0
   15b78:	beq	15b88 <__assert_fail@plt+0x4bcc>
   15b7c:	ldr	r4, [sp]
   15b80:	add	sp, sp, #4
   15b84:	pop	{pc}		; (ldr pc, [sp], #4)
   15b88:	bl	15ea0 <__assert_fail@plt+0x4ee4>
   15b8c:	str	r4, [sp, #-8]!
   15b90:	str	lr, [sp, #4]
   15b94:	mov	r2, r1
   15b98:	mov	r1, r0
   15b9c:	mov	r0, #0
   15ba0:	bl	15ae4 <__assert_fail@plt+0x4b28>
   15ba4:	ldr	r4, [sp]
   15ba8:	add	sp, sp, #4
   15bac:	pop	{pc}		; (ldr pc, [sp], #4)
   15bb0:	str	r4, [sp, #-8]!
   15bb4:	str	lr, [sp, #4]
   15bb8:	mov	r2, r1
   15bbc:	mov	r1, r0
   15bc0:	mov	r0, #0
   15bc4:	bl	15b48 <__assert_fail@plt+0x4b8c>
   15bc8:	ldr	r4, [sp]
   15bcc:	add	sp, sp, #4
   15bd0:	pop	{pc}		; (ldr pc, [sp], #4)
   15bd4:	strd	r4, [sp, #-16]!
   15bd8:	str	r6, [sp, #8]
   15bdc:	str	lr, [sp, #12]
   15be0:	mov	r5, r1
   15be4:	ldr	r4, [r1]
   15be8:	cmp	r0, #0
   15bec:	beq	15c1c <__assert_fail@plt+0x4c60>
   15bf0:	lsr	r3, r4, #1
   15bf4:	add	r3, r3, #1
   15bf8:	adds	r4, r4, r3
   15bfc:	bcs	15c38 <__assert_fail@plt+0x4c7c>
   15c00:	mov	r1, r4
   15c04:	bl	15ae4 <__assert_fail@plt+0x4b28>
   15c08:	str	r4, [r5]
   15c0c:	ldrd	r4, [sp]
   15c10:	ldr	r6, [sp, #8]
   15c14:	add	sp, sp, #12
   15c18:	pop	{pc}		; (ldr pc, [sp], #4)
   15c1c:	cmp	r4, #0
   15c20:	bne	15c00 <__assert_fail@plt+0x4c44>
   15c24:	mov	r4, #64	; 0x40
   15c28:	udiv	r4, r4, r2
   15c2c:	cmp	r2, #64	; 0x40
   15c30:	addhi	r4, r4, #1
   15c34:	b	15c00 <__assert_fail@plt+0x4c44>
   15c38:	bl	15ea0 <__assert_fail@plt+0x4ee4>
   15c3c:	str	r4, [sp, #-8]!
   15c40:	str	lr, [sp, #4]
   15c44:	mov	r2, #1
   15c48:	bl	15bd4 <__assert_fail@plt+0x4c18>
   15c4c:	ldr	r4, [sp]
   15c50:	add	sp, sp, #4
   15c54:	pop	{pc}		; (ldr pc, [sp], #4)
   15c58:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15c5c:	strd	r6, [sp, #8]
   15c60:	str	r8, [sp, #16]
   15c64:	str	lr, [sp, #20]
   15c68:	mov	r5, r1
   15c6c:	ldr	lr, [sp, #24]
   15c70:	ldr	ip, [r1]
   15c74:	asr	r4, ip, #1
   15c78:	adds	r4, ip, r4
   15c7c:	movvs	r1, #1
   15c80:	movvc	r1, #0
   15c84:	cmp	r1, #0
   15c88:	mvnne	r4, #-2147483648	; 0x80000000
   15c8c:	mvn	r8, r3
   15c90:	lsr	r8, r8, #31
   15c94:	cmp	r3, r4
   15c98:	movge	r1, #0
   15c9c:	andlt	r1, r8, #1
   15ca0:	cmp	r1, #0
   15ca4:	movne	r4, r3
   15ca8:	smull	r6, r7, r4, lr
   15cac:	asr	r1, r6, #31
   15cb0:	cmp	r1, r7
   15cb4:	bne	15ccc <__assert_fail@plt+0x4d10>
   15cb8:	mov	r1, r6
   15cbc:	cmp	r6, #63	; 0x3f
   15cc0:	movle	r1, #64	; 0x40
   15cc4:	ble	15cd0 <__assert_fail@plt+0x4d14>
   15cc8:	b	15cdc <__assert_fail@plt+0x4d20>
   15ccc:	mvn	r1, #-2147483648	; 0x80000000
   15cd0:	sdiv	r4, r1, lr
   15cd4:	mls	r6, lr, r4, r1
   15cd8:	sub	r1, r1, r6
   15cdc:	cmp	r0, #0
   15ce0:	moveq	r6, #0
   15ce4:	streq	r6, [r5]
   15ce8:	sub	r6, r4, ip
   15cec:	cmp	r6, r2
   15cf0:	bge	15d28 <__assert_fail@plt+0x4d6c>
   15cf4:	adds	r2, ip, r2
   15cf8:	mov	r4, r2
   15cfc:	bvs	15d44 <__assert_fail@plt+0x4d88>
   15d00:	cmp	r2, r3
   15d04:	movle	r3, #0
   15d08:	andgt	r3, r8, #1
   15d0c:	cmp	r3, #0
   15d10:	bne	15d44 <__assert_fail@plt+0x4d88>
   15d14:	smull	r2, r3, r2, lr
   15d18:	asr	ip, r2, #31
   15d1c:	mov	r1, r2
   15d20:	cmp	ip, r3
   15d24:	bne	15d44 <__assert_fail@plt+0x4d88>
   15d28:	bl	15a6c <__assert_fail@plt+0x4ab0>
   15d2c:	str	r4, [r5]
   15d30:	ldrd	r4, [sp]
   15d34:	ldrd	r6, [sp, #8]
   15d38:	ldr	r8, [sp, #16]
   15d3c:	add	sp, sp, #20
   15d40:	pop	{pc}		; (ldr pc, [sp], #4)
   15d44:	bl	15ea0 <__assert_fail@plt+0x4ee4>
   15d48:	str	r4, [sp, #-8]!
   15d4c:	str	lr, [sp, #4]
   15d50:	bl	16558 <__assert_fail@plt+0x559c>
   15d54:	cmp	r0, #0
   15d58:	beq	15d68 <__assert_fail@plt+0x4dac>
   15d5c:	ldr	r4, [sp]
   15d60:	add	sp, sp, #4
   15d64:	pop	{pc}		; (ldr pc, [sp], #4)
   15d68:	bl	15ea0 <__assert_fail@plt+0x4ee4>
   15d6c:	str	r4, [sp, #-8]!
   15d70:	str	lr, [sp, #4]
   15d74:	mov	r1, #1
   15d78:	bl	15d48 <__assert_fail@plt+0x4d8c>
   15d7c:	ldr	r4, [sp]
   15d80:	add	sp, sp, #4
   15d84:	pop	{pc}		; (ldr pc, [sp], #4)
   15d88:	str	r4, [sp, #-8]!
   15d8c:	str	lr, [sp, #4]
   15d90:	bl	16558 <__assert_fail@plt+0x559c>
   15d94:	cmp	r0, #0
   15d98:	beq	15da8 <__assert_fail@plt+0x4dec>
   15d9c:	ldr	r4, [sp]
   15da0:	add	sp, sp, #4
   15da4:	pop	{pc}		; (ldr pc, [sp], #4)
   15da8:	bl	15ea0 <__assert_fail@plt+0x4ee4>
   15dac:	str	r4, [sp, #-8]!
   15db0:	str	lr, [sp, #4]
   15db4:	mov	r1, #1
   15db8:	bl	15d88 <__assert_fail@plt+0x4dcc>
   15dbc:	ldr	r4, [sp]
   15dc0:	add	sp, sp, #4
   15dc4:	pop	{pc}		; (ldr pc, [sp], #4)
   15dc8:	strd	r4, [sp, #-16]!
   15dcc:	str	r6, [sp, #8]
   15dd0:	str	lr, [sp, #12]
   15dd4:	mov	r5, r0
   15dd8:	mov	r4, r1
   15ddc:	mov	r0, r1
   15de0:	bl	15a0c <__assert_fail@plt+0x4a50>
   15de4:	mov	r2, r4
   15de8:	mov	r1, r5
   15dec:	bl	10d88 <memcpy@plt>
   15df0:	ldrd	r4, [sp]
   15df4:	ldr	r6, [sp, #8]
   15df8:	add	sp, sp, #12
   15dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   15e00:	strd	r4, [sp, #-16]!
   15e04:	str	r6, [sp, #8]
   15e08:	str	lr, [sp, #12]
   15e0c:	mov	r5, r0
   15e10:	mov	r4, r1
   15e14:	mov	r0, r1
   15e18:	bl	15a30 <__assert_fail@plt+0x4a74>
   15e1c:	mov	r2, r4
   15e20:	mov	r1, r5
   15e24:	bl	10d88 <memcpy@plt>
   15e28:	ldrd	r4, [sp]
   15e2c:	ldr	r6, [sp, #8]
   15e30:	add	sp, sp, #12
   15e34:	pop	{pc}		; (ldr pc, [sp], #4)
   15e38:	strd	r4, [sp, #-16]!
   15e3c:	str	r6, [sp, #8]
   15e40:	str	lr, [sp, #12]
   15e44:	mov	r5, r0
   15e48:	mov	r4, r1
   15e4c:	add	r0, r1, #1
   15e50:	bl	15a30 <__assert_fail@plt+0x4a74>
   15e54:	mov	r2, #0
   15e58:	strb	r2, [r0, r4]
   15e5c:	mov	r2, r4
   15e60:	mov	r1, r5
   15e64:	bl	10d88 <memcpy@plt>
   15e68:	ldrd	r4, [sp]
   15e6c:	ldr	r6, [sp, #8]
   15e70:	add	sp, sp, #12
   15e74:	pop	{pc}		; (ldr pc, [sp], #4)
   15e78:	str	r4, [sp, #-8]!
   15e7c:	str	lr, [sp, #4]
   15e80:	mov	r4, r0
   15e84:	bl	10ed8 <strlen@plt>
   15e88:	add	r1, r0, #1
   15e8c:	mov	r0, r4
   15e90:	bl	15dc8 <__assert_fail@plt+0x4e0c>
   15e94:	ldr	r4, [sp]
   15e98:	add	sp, sp, #4
   15e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   15ea0:	str	r4, [sp, #-8]!
   15ea4:	str	lr, [sp, #4]
   15ea8:	movw	r3, #33024	; 0x8100
   15eac:	movt	r3, #2
   15eb0:	ldr	r4, [r3]
   15eb4:	mov	r2, #5
   15eb8:	movw	r1, #31160	; 0x79b8
   15ebc:	movt	r1, #1
   15ec0:	mov	r0, #0
   15ec4:	bl	10dd0 <dcgettext@plt>
   15ec8:	mov	r3, r0
   15ecc:	movw	r2, #27344	; 0x6ad0
   15ed0:	movt	r2, #1
   15ed4:	mov	r1, #0
   15ed8:	mov	r0, r4
   15edc:	bl	10e48 <error@plt>
   15ee0:	bl	10fa4 <abort@plt>
   15ee4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15ee8:	strd	r6, [sp, #8]
   15eec:	strd	r8, [sp, #16]
   15ef0:	strd	sl, [sp, #24]
   15ef4:	str	lr, [sp, #32]
   15ef8:	sub	sp, sp, #12
   15efc:	str	r0, [sp, #4]
   15f00:	cmp	r2, #0
   15f04:	beq	16000 <__assert_fail@plt+0x5044>
   15f08:	sub	ip, r2, #1
   15f0c:	ldrd	r2, [r0]
   15f10:	mov	r0, #0
   15f14:	mov	r8, r1
   15f18:	asr	r9, r1, #31
   15f1c:	str	r1, [sp]
   15f20:	b	15f70 <__assert_fail@plt+0x4fb4>
   15f24:	orrs	r4, r2, r3
   15f28:	movne	lr, #1
   15f2c:	b	15f80 <__assert_fail@plt+0x4fc4>
   15f30:	mov	sl, r3
   15f34:	ldr	fp, [sp]
   15f38:	umull	r6, r7, r1, r2
   15f3c:	mov	r4, r7
   15f40:	mov	r5, #0
   15f44:	umlal	r4, r5, sl, fp
   15f48:	cmp	r5, #0
   15f4c:	bne	15fb4 <__assert_fail@plt+0x4ff8>
   15f50:	cmp	lr, #0
   15f54:	bne	15fcc <__assert_fail@plt+0x5010>
   15f58:	mov	r2, r6
   15f5c:	mov	r3, r4
   15f60:	orr	r0, r0, lr
   15f64:	sub	ip, ip, #1
   15f68:	cmn	ip, #1
   15f6c:	beq	15fdc <__assert_fail@plt+0x5020>
   15f70:	mov	lr, #0
   15f74:	cmp	r8, #0
   15f78:	sbcs	r4, r9, #0
   15f7c:	blt	15f24 <__assert_fail@plt+0x4f68>
   15f80:	cmp	r9, #0
   15f84:	bne	15fa0 <__assert_fail@plt+0x4fe4>
   15f88:	cmp	r3, #0
   15f8c:	bne	15f30 <__assert_fail@plt+0x4f74>
   15f90:	umull	r2, r3, r1, r2
   15f94:	mov	r6, r2
   15f98:	mov	r4, r3
   15f9c:	b	15f50 <__assert_fail@plt+0x4f94>
   15fa0:	cmp	r3, #0
   15fa4:	bne	15fb4 <__assert_fail@plt+0x4ff8>
   15fa8:	mov	sl, r9
   15fac:	mov	fp, r2
   15fb0:	b	15f38 <__assert_fail@plt+0x4f7c>
   15fb4:	mul	r4, r1, r3
   15fb8:	mla	r4, r2, r9, r4
   15fbc:	umull	r6, r7, r1, r2
   15fc0:	add	r4, r4, r7
   15fc4:	mov	lr, #1
   15fc8:	b	15f50 <__assert_fail@plt+0x4f94>
   15fcc:	mvn	r2, #0
   15fd0:	mvn	r3, #0
   15fd4:	mov	lr, #1
   15fd8:	b	15f60 <__assert_fail@plt+0x4fa4>
   15fdc:	ldr	r1, [sp, #4]
   15fe0:	strd	r2, [r1]
   15fe4:	add	sp, sp, #12
   15fe8:	ldrd	r4, [sp]
   15fec:	ldrd	r6, [sp, #8]
   15ff0:	ldrd	r8, [sp, #16]
   15ff4:	ldrd	sl, [sp, #24]
   15ff8:	add	sp, sp, #32
   15ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   16000:	mov	r0, #0
   16004:	b	15fe4 <__assert_fail@plt+0x5028>
   16008:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1600c:	strd	r6, [sp, #8]
   16010:	strd	r8, [sp, #16]
   16014:	str	lr, [sp, #24]
   16018:	sub	sp, sp, #20
   1601c:	cmp	r2, #36	; 0x24
   16020:	bhi	16074 <__assert_fail@plt+0x50b8>
   16024:	mov	r5, r0
   16028:	mov	r6, r1
   1602c:	mov	r7, r2
   16030:	mov	r9, r3
   16034:	cmp	r1, #0
   16038:	addeq	r6, sp, #12
   1603c:	bl	10ef0 <__errno_location@plt>
   16040:	mov	r8, r0
   16044:	mov	r3, #0
   16048:	str	r3, [r0]
   1604c:	ldrb	r4, [r5]
   16050:	bl	10ec0 <__ctype_b_loc@plt>
   16054:	ldr	r1, [r0]
   16058:	mov	r2, r5
   1605c:	lsl	r3, r4, #1
   16060:	ldrh	r3, [r1, r3]
   16064:	tst	r3, #8192	; 0x2000
   16068:	beq	16094 <__assert_fail@plt+0x50d8>
   1606c:	ldrb	r4, [r2, #1]!
   16070:	b	1605c <__assert_fail@plt+0x50a0>
   16074:	movw	r3, #31180	; 0x79cc
   16078:	movt	r3, #1
   1607c:	mov	r2, #85	; 0x55
   16080:	movw	r1, #31192	; 0x79d8
   16084:	movt	r1, #1
   16088:	movw	r0, #31208	; 0x79e8
   1608c:	movt	r0, #1
   16090:	bl	10fbc <__assert_fail@plt>
   16094:	cmp	r4, #45	; 0x2d
   16098:	moveq	r4, #4
   1609c:	beq	16230 <__assert_fail@plt+0x5274>
   160a0:	mov	r3, #0
   160a4:	mov	r2, r7
   160a8:	mov	r1, r6
   160ac:	mov	r0, r5
   160b0:	bl	10d94 <__strtoull_internal@plt>
   160b4:	strd	r0, [sp]
   160b8:	ldr	r7, [r6]
   160bc:	cmp	r7, r5
   160c0:	beq	160e4 <__assert_fail@plt+0x5128>
   160c4:	ldr	r3, [r8]
   160c8:	cmp	r3, #0
   160cc:	beq	16208 <__assert_fail@plt+0x524c>
   160d0:	cmp	r3, #34	; 0x22
   160d4:	moveq	r4, #1
   160d8:	beq	1620c <__assert_fail@plt+0x5250>
   160dc:	mov	r4, #4
   160e0:	b	16230 <__assert_fail@plt+0x5274>
   160e4:	ldr	r3, [sp, #48]	; 0x30
   160e8:	cmp	r3, #0
   160ec:	beq	16548 <__assert_fail@plt+0x558c>
   160f0:	ldrb	r1, [r5]
   160f4:	cmp	r1, #0
   160f8:	moveq	r4, #4
   160fc:	beq	16230 <__assert_fail@plt+0x5274>
   16100:	mov	r0, r3
   16104:	bl	10ee4 <strchr@plt>
   16108:	cmp	r0, #0
   1610c:	beq	16550 <__assert_fail@plt+0x5594>
   16110:	mov	r2, #1
   16114:	mov	r3, #0
   16118:	strd	r2, [sp]
   1611c:	ldrb	r5, [r7]
   16120:	mov	r4, #0
   16124:	mov	r1, r5
   16128:	ldr	r0, [sp, #48]	; 0x30
   1612c:	bl	10ee4 <strchr@plt>
   16130:	cmp	r0, #0
   16134:	beq	1624c <__assert_fail@plt+0x5290>
   16138:	sub	r3, r5, #69	; 0x45
   1613c:	cmp	r3, #47	; 0x2f
   16140:	ldrls	pc, [pc, r3, lsl #2]
   16144:	b	16398 <__assert_fail@plt+0x53dc>
   16148:	andeq	r6, r1, ip, asr r2
   1614c:	muleq	r1, r8, r3
   16150:	andeq	r6, r1, ip, asr r2
   16154:	muleq	r1, r8, r3
   16158:	muleq	r1, r8, r3
   1615c:	muleq	r1, r8, r3
   16160:	andeq	r6, r1, ip, asr r2
   16164:	muleq	r1, r8, r3
   16168:	andeq	r6, r1, ip, asr r2
   1616c:	muleq	r1, r8, r3
   16170:	muleq	r1, r8, r3
   16174:	andeq	r6, r1, ip, asr r2
   16178:	muleq	r1, r8, r3
   1617c:	muleq	r1, r8, r3
   16180:	muleq	r1, r8, r3
   16184:	andeq	r6, r1, ip, asr r2
   16188:	muleq	r1, r8, r3
   1618c:	muleq	r1, r8, r3
   16190:	muleq	r1, r8, r3
   16194:	muleq	r1, r8, r3
   16198:	andeq	r6, r1, ip, asr r2
   1619c:	andeq	r6, r1, ip, asr r2
   161a0:	muleq	r1, r8, r3
   161a4:	muleq	r1, r8, r3
   161a8:	muleq	r1, r8, r3
   161ac:	muleq	r1, r8, r3
   161b0:	muleq	r1, r8, r3
   161b4:	muleq	r1, r8, r3
   161b8:	muleq	r1, r8, r3
   161bc:	muleq	r1, r8, r3
   161c0:	muleq	r1, r8, r3
   161c4:	muleq	r1, r8, r3
   161c8:	muleq	r1, r8, r3
   161cc:	muleq	r1, r8, r3
   161d0:	andeq	r6, r1, ip, asr r2
   161d4:	muleq	r1, r8, r3
   161d8:	muleq	r1, r8, r3
   161dc:	muleq	r1, r8, r3
   161e0:	andeq	r6, r1, ip, asr r2
   161e4:	muleq	r1, r8, r3
   161e8:	andeq	r6, r1, ip, asr r2
   161ec:	muleq	r1, r8, r3
   161f0:	muleq	r1, r8, r3
   161f4:	muleq	r1, r8, r3
   161f8:	muleq	r1, r8, r3
   161fc:	muleq	r1, r8, r3
   16200:	muleq	r1, r8, r3
   16204:	andeq	r6, r1, ip, asr r2
   16208:	mov	r4, #0
   1620c:	ldr	r3, [sp, #48]	; 0x30
   16210:	cmp	r3, #0
   16214:	strdeq	r0, [r9]
   16218:	beq	16230 <__assert_fail@plt+0x5274>
   1621c:	ldrb	r5, [r7]
   16220:	cmp	r5, #0
   16224:	bne	16124 <__assert_fail@plt+0x5168>
   16228:	ldrd	r2, [sp]
   1622c:	strd	r2, [r9]
   16230:	mov	r0, r4
   16234:	add	sp, sp, #20
   16238:	ldrd	r4, [sp]
   1623c:	ldrd	r6, [sp, #8]
   16240:	ldrd	r8, [sp, #16]
   16244:	add	sp, sp, #24
   16248:	pop	{pc}		; (ldr pc, [sp], #4)
   1624c:	ldrd	r2, [sp]
   16250:	strd	r2, [r9]
   16254:	orr	r4, r4, #2
   16258:	b	16230 <__assert_fail@plt+0x5274>
   1625c:	mov	r1, #48	; 0x30
   16260:	ldr	r0, [sp, #48]	; 0x30
   16264:	bl	10ee4 <strchr@plt>
   16268:	cmp	r0, #0
   1626c:	beq	163a4 <__assert_fail@plt+0x53e8>
   16270:	ldrb	r3, [r7, #1]
   16274:	cmp	r3, #68	; 0x44
   16278:	beq	163b0 <__assert_fail@plt+0x53f4>
   1627c:	cmp	r3, #105	; 0x69
   16280:	beq	16380 <__assert_fail@plt+0x53c4>
   16284:	cmp	r3, #66	; 0x42
   16288:	moveq	r7, #2
   1628c:	movne	r7, #1
   16290:	moveq	r1, #1000	; 0x3e8
   16294:	movne	r1, #1024	; 0x400
   16298:	sub	r5, r5, #66	; 0x42
   1629c:	cmp	r5, #53	; 0x35
   162a0:	ldrls	pc, [pc, r5, lsl #2]
   162a4:	b	16514 <__assert_fail@plt+0x5558>
   162a8:	andeq	r6, r1, r4, lsl #8
   162ac:	andeq	r6, r1, r4, lsl r5
   162b0:	andeq	r6, r1, r4, lsl r5
   162b4:	andeq	r6, r1, ip, asr #8
   162b8:	andeq	r6, r1, r4, lsl r5
   162bc:	andeq	r6, r1, ip, asr r4
   162c0:	andeq	r6, r1, r4, lsl r5
   162c4:	andeq	r6, r1, r4, lsl r5
   162c8:	andeq	r6, r1, r4, lsl r5
   162cc:	andeq	r6, r1, ip, ror #8
   162d0:	andeq	r6, r1, r4, lsl r5
   162d4:	andeq	r6, r1, ip, ror r4
   162d8:	andeq	r6, r1, r4, lsl r5
   162dc:	andeq	r6, r1, r4, lsl r5
   162e0:	andeq	r6, r1, ip, lsl #9
   162e4:	andeq	r6, r1, r4, lsl r5
   162e8:	andeq	r6, r1, r4, lsl r5
   162ec:	andeq	r6, r1, r4, lsl r5
   162f0:	muleq	r1, ip, r4
   162f4:	andeq	r6, r1, r4, lsl r5
   162f8:	andeq	r6, r1, r4, lsl r5
   162fc:	andeq	r6, r1, r4, lsl r5
   16300:	andeq	r6, r1, r4, lsl r5
   16304:	strdeq	r6, [r1], -r4
   16308:	andeq	r6, r1, r4, lsl #10
   1630c:	andeq	r6, r1, r4, lsl r5
   16310:	andeq	r6, r1, r4, lsl r5
   16314:	andeq	r6, r1, r4, lsl r5
   16318:	andeq	r6, r1, r4, lsl r5
   1631c:	andeq	r6, r1, r4, lsl r5
   16320:	andeq	r6, r1, r4, lsl r5
   16324:	andeq	r6, r1, r4, lsl r5
   16328:			; <UNDEFINED> instruction: 0x000163bc
   1632c:	andeq	r6, r1, r4, lsr #10
   16330:	andeq	r6, r1, r4, lsl r5
   16334:	andeq	r6, r1, r4, lsl r5
   16338:	andeq	r6, r1, r4, lsl r5
   1633c:	andeq	r6, r1, ip, asr r4
   16340:	andeq	r6, r1, r4, lsl r5
   16344:	andeq	r6, r1, r4, lsl r5
   16348:	andeq	r6, r1, r4, lsl r5
   1634c:	andeq	r6, r1, ip, ror #8
   16350:	andeq	r6, r1, r4, lsl r5
   16354:	andeq	r6, r1, ip, ror r4
   16358:	andeq	r6, r1, r4, lsl r5
   1635c:	andeq	r6, r1, r4, lsl r5
   16360:	andeq	r6, r1, r4, lsl r5
   16364:	andeq	r6, r1, r4, lsl r5
   16368:	andeq	r6, r1, r4, lsl r5
   1636c:	andeq	r6, r1, r4, lsl r5
   16370:	muleq	r1, ip, r4
   16374:	andeq	r6, r1, r4, lsl r5
   16378:	andeq	r6, r1, r4, lsl r5
   1637c:	andeq	r6, r1, ip, lsr #9
   16380:	ldrb	r3, [r7, #2]
   16384:	cmp	r3, #66	; 0x42
   16388:	movne	r7, #1
   1638c:	moveq	r7, #3
   16390:	mov	r1, #1024	; 0x400
   16394:	b	16298 <__assert_fail@plt+0x52dc>
   16398:	mov	r7, #1
   1639c:	mov	r1, #1024	; 0x400
   163a0:	b	16298 <__assert_fail@plt+0x52dc>
   163a4:	mov	r7, #1
   163a8:	mov	r1, #1024	; 0x400
   163ac:	b	16298 <__assert_fail@plt+0x52dc>
   163b0:	mov	r7, #2
   163b4:	mov	r1, #1000	; 0x3e8
   163b8:	b	16298 <__assert_fail@plt+0x52dc>
   163bc:	ldr	r3, [sp]
   163c0:	ldr	ip, [sp, #4]
   163c4:	lsl	r2, ip, #9
   163c8:	orr	r2, r2, r3, lsr #23
   163cc:	lsl	r3, r3, #9
   163d0:	mov	r0, #0
   163d4:	mov	r1, r0
   163d8:	lsr	r0, ip, #23
   163dc:	orrs	r1, r0, r1
   163e0:	streq	r3, [sp]
   163e4:	streq	r2, [sp, #4]
   163e8:	moveq	r0, #0
   163ec:	beq	16528 <__assert_fail@plt+0x556c>
   163f0:	mvn	r2, #0
   163f4:	mvn	r3, #0
   163f8:	strd	r2, [sp]
   163fc:	mov	r0, #1
   16400:	b	16528 <__assert_fail@plt+0x556c>
   16404:	ldr	r3, [sp]
   16408:	ldr	ip, [sp, #4]
   1640c:	lsl	r2, ip, #10
   16410:	orr	r2, r2, r3, lsr #22
   16414:	lsl	r3, r3, #10
   16418:	mov	r0, #0
   1641c:	mov	r1, r0
   16420:	lsr	r0, ip, #22
   16424:	orrs	r1, r0, r1
   16428:	streq	r3, [sp]
   1642c:	streq	r2, [sp, #4]
   16430:	moveq	r0, #0
   16434:	beq	16528 <__assert_fail@plt+0x556c>
   16438:	mvn	r2, #0
   1643c:	mvn	r3, #0
   16440:	strd	r2, [sp]
   16444:	mov	r0, #1
   16448:	b	16528 <__assert_fail@plt+0x556c>
   1644c:	mov	r2, #6
   16450:	mov	r0, sp
   16454:	bl	15ee4 <__assert_fail@plt+0x4f28>
   16458:	b	16528 <__assert_fail@plt+0x556c>
   1645c:	mov	r2, #3
   16460:	mov	r0, sp
   16464:	bl	15ee4 <__assert_fail@plt+0x4f28>
   16468:	b	16528 <__assert_fail@plt+0x556c>
   1646c:	mov	r2, #1
   16470:	mov	r0, sp
   16474:	bl	15ee4 <__assert_fail@plt+0x4f28>
   16478:	b	16528 <__assert_fail@plt+0x556c>
   1647c:	mov	r2, #2
   16480:	mov	r0, sp
   16484:	bl	15ee4 <__assert_fail@plt+0x4f28>
   16488:	b	16528 <__assert_fail@plt+0x556c>
   1648c:	mov	r2, #5
   16490:	mov	r0, sp
   16494:	bl	15ee4 <__assert_fail@plt+0x4f28>
   16498:	b	16528 <__assert_fail@plt+0x556c>
   1649c:	mov	r2, #4
   164a0:	mov	r0, sp
   164a4:	bl	15ee4 <__assert_fail@plt+0x4f28>
   164a8:	b	16528 <__assert_fail@plt+0x556c>
   164ac:	ldr	r3, [sp]
   164b0:	ldr	r2, [sp, #4]
   164b4:	adds	r3, r3, r3
   164b8:	adc	r2, r2, r2
   164bc:	mov	r1, #0
   164c0:	mov	r0, r1
   164c4:	ldr	r1, [sp, #4]
   164c8:	lsr	r1, r1, #31
   164cc:	orrs	r1, r1, r0
   164d0:	streq	r3, [sp]
   164d4:	streq	r2, [sp, #4]
   164d8:	moveq	r0, #0
   164dc:	beq	16528 <__assert_fail@plt+0x556c>
   164e0:	mvn	r2, #0
   164e4:	mvn	r3, #0
   164e8:	strd	r2, [sp]
   164ec:	mov	r0, #1
   164f0:	b	16528 <__assert_fail@plt+0x556c>
   164f4:	mov	r2, #8
   164f8:	mov	r0, sp
   164fc:	bl	15ee4 <__assert_fail@plt+0x4f28>
   16500:	b	16528 <__assert_fail@plt+0x556c>
   16504:	mov	r2, #7
   16508:	mov	r0, sp
   1650c:	bl	15ee4 <__assert_fail@plt+0x4f28>
   16510:	b	16528 <__assert_fail@plt+0x556c>
   16514:	ldrd	r2, [sp]
   16518:	strd	r2, [r9]
   1651c:	orr	r4, r4, #2
   16520:	b	16230 <__assert_fail@plt+0x5274>
   16524:	mov	r0, #0
   16528:	orr	r4, r4, r0
   1652c:	ldr	r3, [r6]
   16530:	add	r2, r3, r7
   16534:	str	r2, [r6]
   16538:	ldrb	r3, [r3, r7]
   1653c:	cmp	r3, #0
   16540:	orrne	r4, r4, #2
   16544:	b	16228 <__assert_fail@plt+0x526c>
   16548:	mov	r4, #4
   1654c:	b	16230 <__assert_fail@plt+0x5274>
   16550:	mov	r4, #4
   16554:	b	16230 <__assert_fail@plt+0x5274>
   16558:	strd	r4, [sp, #-16]!
   1655c:	str	r6, [sp, #8]
   16560:	str	lr, [sp, #12]
   16564:	cmp	r1, #0
   16568:	cmpne	r0, #0
   1656c:	beq	165a8 <__assert_fail@plt+0x55ec>
   16570:	mov	r2, r0
   16574:	mov	r3, r1
   16578:	umull	r4, r5, r0, r1
   1657c:	adds	r1, r5, #0
   16580:	movne	r1, #1
   16584:	cmp	r4, #0
   16588:	movlt	r1, #1
   1658c:	cmp	r1, #0
   16590:	beq	165b0 <__assert_fail@plt+0x55f4>
   16594:	bl	10ef0 <__errno_location@plt>
   16598:	mov	r3, #12
   1659c:	str	r3, [r0]
   165a0:	mov	r0, #0
   165a4:	b	165bc <__assert_fail@plt+0x5600>
   165a8:	mov	r3, #1
   165ac:	mov	r2, r3
   165b0:	mov	r1, r3
   165b4:	mov	r0, r2
   165b8:	bl	10d28 <calloc@plt>
   165bc:	ldrd	r4, [sp]
   165c0:	ldr	r6, [sp, #8]
   165c4:	add	sp, sp, #12
   165c8:	pop	{pc}		; (ldr pc, [sp], #4)
   165cc:	str	r4, [sp, #-8]!
   165d0:	str	lr, [sp, #4]
   165d4:	cmp	r0, #0
   165d8:	beq	165f4 <__assert_fail@plt+0x5638>
   165dc:	bge	165f8 <__assert_fail@plt+0x563c>
   165e0:	bl	10ef0 <__errno_location@plt>
   165e4:	mov	r3, #12
   165e8:	str	r3, [r0]
   165ec:	mov	r0, #0
   165f0:	b	165fc <__assert_fail@plt+0x5640>
   165f4:	mov	r0, #1
   165f8:	bl	10e6c <malloc@plt>
   165fc:	ldr	r4, [sp]
   16600:	add	sp, sp, #4
   16604:	pop	{pc}		; (ldr pc, [sp], #4)
   16608:	str	r4, [sp, #-8]!
   1660c:	str	lr, [sp, #4]
   16610:	cmp	r0, #0
   16614:	beq	16638 <__assert_fail@plt+0x567c>
   16618:	cmp	r1, #0
   1661c:	beq	16644 <__assert_fail@plt+0x5688>
   16620:	cmp	r1, #0
   16624:	blt	16650 <__assert_fail@plt+0x5694>
   16628:	bl	10de8 <realloc@plt>
   1662c:	ldr	r4, [sp]
   16630:	add	sp, sp, #4
   16634:	pop	{pc}		; (ldr pc, [sp], #4)
   16638:	mov	r0, r1
   1663c:	bl	165cc <__assert_fail@plt+0x5610>
   16640:	b	1662c <__assert_fail@plt+0x5670>
   16644:	bl	12bd0 <__assert_fail@plt+0x1c14>
   16648:	mov	r0, #0
   1664c:	b	1662c <__assert_fail@plt+0x5670>
   16650:	bl	10ef0 <__errno_location@plt>
   16654:	mov	r3, #12
   16658:	str	r3, [r0]
   1665c:	mov	r0, #0
   16660:	b	1662c <__assert_fail@plt+0x5670>
   16664:	strd	r4, [sp, #-16]!
   16668:	str	r6, [sp, #8]
   1666c:	str	lr, [sp, #12]
   16670:	mov	r5, r0
   16674:	bl	10e30 <__fpending@plt>
   16678:	mov	r6, r0
   1667c:	ldr	r4, [r5]
   16680:	and	r4, r4, #32
   16684:	mov	r0, r5
   16688:	bl	12aa4 <__assert_fail@plt+0x1ae8>
   1668c:	cmp	r4, #0
   16690:	bne	166c4 <__assert_fail@plt+0x5708>
   16694:	cmp	r0, #0
   16698:	beq	166b4 <__assert_fail@plt+0x56f8>
   1669c:	cmp	r6, #0
   166a0:	bne	166e0 <__assert_fail@plt+0x5724>
   166a4:	bl	10ef0 <__errno_location@plt>
   166a8:	ldr	r0, [r0]
   166ac:	subs	r0, r0, #9
   166b0:	mvnne	r0, #0
   166b4:	ldrd	r4, [sp]
   166b8:	ldr	r6, [sp, #8]
   166bc:	add	sp, sp, #12
   166c0:	pop	{pc}		; (ldr pc, [sp], #4)
   166c4:	cmp	r0, #0
   166c8:	bne	166e8 <__assert_fail@plt+0x572c>
   166cc:	bl	10ef0 <__errno_location@plt>
   166d0:	mov	r3, #0
   166d4:	str	r3, [r0]
   166d8:	mvn	r0, #0
   166dc:	b	166b4 <__assert_fail@plt+0x56f8>
   166e0:	mvn	r0, #0
   166e4:	b	166b4 <__assert_fail@plt+0x56f8>
   166e8:	mvn	r0, #0
   166ec:	b	166b4 <__assert_fail@plt+0x56f8>
   166f0:	str	r4, [sp, #-8]!
   166f4:	str	lr, [sp, #4]
   166f8:	mov	r0, #14
   166fc:	bl	10f80 <nl_langinfo@plt>
   16700:	cmp	r0, #0
   16704:	beq	16728 <__assert_fail@plt+0x576c>
   16708:	ldrb	r2, [r0]
   1670c:	movw	r3, #31248	; 0x7a10
   16710:	movt	r3, #1
   16714:	cmp	r2, #0
   16718:	moveq	r0, r3
   1671c:	ldr	r4, [sp]
   16720:	add	sp, sp, #4
   16724:	pop	{pc}		; (ldr pc, [sp], #4)
   16728:	movw	r0, #31248	; 0x7a10
   1672c:	movt	r0, #1
   16730:	b	1671c <__assert_fail@plt+0x5760>
   16734:	strd	r4, [sp, #-20]!	; 0xffffffec
   16738:	strd	r6, [sp, #8]
   1673c:	str	lr, [sp, #16]
   16740:	sub	sp, sp, #12
   16744:	mov	r7, r1
   16748:	mov	r5, r2
   1674c:	subs	r6, r0, #0
   16750:	addeq	r6, sp, #4
   16754:	mov	r0, r6
   16758:	bl	10e3c <mbrtowc@plt>
   1675c:	mov	r4, r0
   16760:	cmp	r5, #0
   16764:	cmnne	r0, #3
   16768:	bhi	16784 <__assert_fail@plt+0x57c8>
   1676c:	mov	r0, r4
   16770:	add	sp, sp, #12
   16774:	ldrd	r4, [sp]
   16778:	ldrd	r6, [sp, #8]
   1677c:	add	sp, sp, #16
   16780:	pop	{pc}		; (ldr pc, [sp], #4)
   16784:	mov	r0, #0
   16788:	bl	167e0 <__assert_fail@plt+0x5824>
   1678c:	cmp	r0, #0
   16790:	bne	1676c <__assert_fail@plt+0x57b0>
   16794:	ldrb	r3, [r7]
   16798:	str	r3, [r6]
   1679c:	mov	r4, #1
   167a0:	b	1676c <__assert_fail@plt+0x57b0>
   167a4:	str	r4, [sp, #-8]!
   167a8:	str	lr, [sp, #4]
   167ac:	umull	r2, r3, r1, r2
   167b0:	cmp	r3, #0
   167b4:	bne	167cc <__assert_fail@plt+0x5810>
   167b8:	mov	r1, r2
   167bc:	bl	16608 <__assert_fail@plt+0x564c>
   167c0:	ldr	r4, [sp]
   167c4:	add	sp, sp, #4
   167c8:	pop	{pc}		; (ldr pc, [sp], #4)
   167cc:	bl	10ef0 <__errno_location@plt>
   167d0:	mov	r3, #12
   167d4:	str	r3, [r0]
   167d8:	mov	r0, #0
   167dc:	b	167c0 <__assert_fail@plt+0x5804>
   167e0:	push	{lr}		; (str lr, [sp, #-4]!)
   167e4:	sub	sp, sp, #268	; 0x10c
   167e8:	movw	r2, #257	; 0x101
   167ec:	add	r1, sp, #4
   167f0:	bl	1683c <__assert_fail@plt+0x5880>
   167f4:	cmp	r0, #0
   167f8:	movne	r0, #0
   167fc:	bne	16834 <__assert_fail@plt+0x5878>
   16800:	movw	r1, #31256	; 0x7a18
   16804:	movt	r1, #1
   16808:	add	r0, sp, #4
   1680c:	bl	10d40 <strcmp@plt>
   16810:	cmp	r0, #0
   16814:	beq	16830 <__assert_fail@plt+0x5874>
   16818:	movw	r1, #31260	; 0x7a1c
   1681c:	movt	r1, #1
   16820:	add	r0, sp, #4
   16824:	bl	10d40 <strcmp@plt>
   16828:	adds	r0, r0, #0
   1682c:	movne	r0, #1
   16830:	and	r0, r0, #1
   16834:	add	sp, sp, #268	; 0x10c
   16838:	pop	{pc}		; (ldr pc, [sp], #4)
   1683c:	strd	r4, [sp, #-16]!
   16840:	str	r6, [sp, #8]
   16844:	str	lr, [sp, #12]
   16848:	mov	r6, r1
   1684c:	mov	r4, r2
   16850:	mov	r1, #0
   16854:	bl	10f68 <setlocale@plt>
   16858:	subs	r5, r0, #0
   1685c:	beq	168a0 <__assert_fail@plt+0x58e4>
   16860:	mov	r0, r5
   16864:	bl	10ed8 <strlen@plt>
   16868:	cmp	r4, r0
   1686c:	bhi	168bc <__assert_fail@plt+0x5900>
   16870:	cmp	r4, #0
   16874:	moveq	r0, #34	; 0x22
   16878:	beq	168d0 <__assert_fail@plt+0x5914>
   1687c:	sub	r4, r4, #1
   16880:	mov	r2, r4
   16884:	mov	r1, r5
   16888:	mov	r0, r6
   1688c:	bl	10d88 <memcpy@plt>
   16890:	mov	r3, #0
   16894:	strb	r3, [r6, r4]
   16898:	mov	r0, #34	; 0x22
   1689c:	b	168d0 <__assert_fail@plt+0x5914>
   168a0:	cmp	r4, #0
   168a4:	moveq	r0, #22
   168a8:	beq	168d0 <__assert_fail@plt+0x5914>
   168ac:	mov	r3, #0
   168b0:	strb	r3, [r6]
   168b4:	mov	r0, #22
   168b8:	b	168d0 <__assert_fail@plt+0x5914>
   168bc:	add	r2, r0, #1
   168c0:	mov	r1, r5
   168c4:	mov	r0, r6
   168c8:	bl	10d88 <memcpy@plt>
   168cc:	mov	r0, #0
   168d0:	ldrd	r4, [sp]
   168d4:	ldr	r6, [sp, #8]
   168d8:	add	sp, sp, #12
   168dc:	pop	{pc}		; (ldr pc, [sp], #4)
   168e0:	str	r4, [sp, #-8]!
   168e4:	str	lr, [sp, #4]
   168e8:	mov	r1, #0
   168ec:	bl	10f68 <setlocale@plt>
   168f0:	ldr	r4, [sp]
   168f4:	add	sp, sp, #4
   168f8:	pop	{pc}		; (ldr pc, [sp], #4)
   168fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16900:	mov	r7, r0
   16904:	ldr	r6, [pc, #72]	; 16954 <__assert_fail@plt+0x5998>
   16908:	ldr	r5, [pc, #72]	; 16958 <__assert_fail@plt+0x599c>
   1690c:	add	r6, pc, r6
   16910:	add	r5, pc, r5
   16914:	sub	r6, r6, r5
   16918:	mov	r8, r1
   1691c:	mov	r9, r2
   16920:	bl	10d08 <calloc@plt-0x20>
   16924:	asrs	r6, r6, #2
   16928:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1692c:	mov	r4, #0
   16930:	add	r4, r4, #1
   16934:	ldr	r3, [r5], #4
   16938:	mov	r2, r9
   1693c:	mov	r1, r8
   16940:	mov	r0, r7
   16944:	blx	r3
   16948:	cmp	r6, r4
   1694c:	bne	16930 <__assert_fail@plt+0x5974>
   16950:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16954:	andeq	r1, r1, r0, lsl #12
   16958:	strdeq	r1, [r1], -r8
   1695c:	bx	lr
   16960:	ldr	r3, [pc, #12]	; 16974 <__assert_fail@plt+0x59b8>
   16964:	mov	r1, #0
   16968:	add	r3, pc, r3
   1696c:	ldr	r2, [r3]
   16970:	b	10efc <__cxa_atexit@plt>
   16974:	andeq	r1, r1, r4, lsl #15

Disassembly of section .fini:

00016978 <.fini>:
   16978:	push	{r3, lr}
   1697c:	pop	{r3, pc}
