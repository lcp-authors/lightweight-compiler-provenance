
../repos/coreutils/src/unexpand:     file format elf32-littlearm


Disassembly of section .init:

00010c70 <.init>:
   10c70:	push	{r3, lr}
   10c74:	bl	10f3c <__assert_fail@plt+0x48>
   10c78:	pop	{r3, pc}

Disassembly of section .plt:

00010c7c <calloc@plt-0x14>:
   10c7c:	push	{lr}		; (str lr, [sp, #-4]!)
   10c80:	ldr	lr, [pc, #4]	; 10c8c <calloc@plt-0x4>
   10c84:	add	lr, pc, lr
   10c88:	ldr	pc, [lr, #8]!
   10c8c:	andeq	r8, r1, r4, ror r3

00010c90 <calloc@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #24, 20	; 0x18000
   10c98:	ldr	pc, [ip, #884]!	; 0x374

00010c9c <fputs_unlocked@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #24, 20	; 0x18000
   10ca4:	ldr	pc, [ip, #876]!	; 0x36c

00010ca8 <raise@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #24, 20	; 0x18000
   10cb0:	ldr	pc, [ip, #868]!	; 0x364

00010cb4 <strcmp@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #24, 20	; 0x18000
   10cbc:	ldr	pc, [ip, #860]!	; 0x35c

00010cc0 <posix_fadvise64@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #24, 20	; 0x18000
   10cc8:	ldr	pc, [ip, #852]!	; 0x354

00010ccc <printf@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #24, 20	; 0x18000
   10cd4:	ldr	pc, [ip, #844]!	; 0x34c

00010cd8 <fflush@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #24, 20	; 0x18000
   10ce0:	ldr	pc, [ip, #836]!	; 0x344

00010ce4 <free@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #24, 20	; 0x18000
   10cec:	ldr	pc, [ip, #828]!	; 0x33c

00010cf0 <_exit@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #24, 20	; 0x18000
   10cf8:	ldr	pc, [ip, #820]!	; 0x334

00010cfc <memcpy@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #24, 20	; 0x18000
   10d04:	ldr	pc, [ip, #812]!	; 0x32c

00010d08 <mbsinit@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #24, 20	; 0x18000
   10d10:	ldr	pc, [ip, #804]!	; 0x324

00010d14 <fwrite_unlocked@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #24, 20	; 0x18000
   10d1c:	ldr	pc, [ip, #796]!	; 0x31c

00010d20 <memcmp@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #24, 20	; 0x18000
   10d28:	ldr	pc, [ip, #788]!	; 0x314

00010d2c <fputc_unlocked@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #24, 20	; 0x18000
   10d34:	ldr	pc, [ip, #780]!	; 0x30c

00010d38 <getc_unlocked@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #24, 20	; 0x18000
   10d40:	ldr	pc, [ip, #772]!	; 0x304

00010d44 <realloc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #24, 20	; 0x18000
   10d4c:	ldr	pc, [ip, #764]!	; 0x2fc

00010d50 <textdomain@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #24, 20	; 0x18000
   10d58:	ldr	pc, [ip, #756]!	; 0x2f4

00010d5c <iswprint@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #24, 20	; 0x18000
   10d64:	ldr	pc, [ip, #748]!	; 0x2ec

00010d68 <fwrite@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #24, 20	; 0x18000
   10d70:	ldr	pc, [ip, #740]!	; 0x2e4

00010d74 <lseek64@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #24, 20	; 0x18000
   10d7c:	ldr	pc, [ip, #732]!	; 0x2dc

00010d80 <__ctype_get_mb_cur_max@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #24, 20	; 0x18000
   10d88:	ldr	pc, [ip, #724]!	; 0x2d4

00010d8c <__fpending@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #24, 20	; 0x18000
   10d94:	ldr	pc, [ip, #716]!	; 0x2cc

00010d98 <ferror_unlocked@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #24, 20	; 0x18000
   10da0:	ldr	pc, [ip, #708]!	; 0x2c4

00010da4 <mbrtowc@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #24, 20	; 0x18000
   10dac:	ldr	pc, [ip, #700]!	; 0x2bc

00010db0 <error@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #24, 20	; 0x18000
   10db8:	ldr	pc, [ip, #692]!	; 0x2b4

00010dbc <malloc@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #24, 20	; 0x18000
   10dc4:	ldr	pc, [ip, #684]!	; 0x2ac

00010dc8 <__libc_start_main@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #24, 20	; 0x18000
   10dd0:	ldr	pc, [ip, #676]!	; 0x2a4

00010dd4 <__freading@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #24, 20	; 0x18000
   10ddc:	ldr	pc, [ip, #668]!	; 0x29c

00010de0 <__gmon_start__@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #24, 20	; 0x18000
   10de8:	ldr	pc, [ip, #660]!	; 0x294

00010dec <getopt_long@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #24, 20	; 0x18000
   10df4:	ldr	pc, [ip, #652]!	; 0x28c

00010df8 <__ctype_b_loc@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #24, 20	; 0x18000
   10e00:	ldr	pc, [ip, #644]!	; 0x284

00010e04 <exit@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #24, 20	; 0x18000
   10e0c:	ldr	pc, [ip, #636]!	; 0x27c

00010e10 <gettext@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #24, 20	; 0x18000
   10e18:	ldr	pc, [ip, #628]!	; 0x274

00010e1c <strlen@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #24, 20	; 0x18000
   10e24:	ldr	pc, [ip, #620]!	; 0x26c

00010e28 <fprintf@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #24, 20	; 0x18000
   10e30:	ldr	pc, [ip, #612]!	; 0x264

00010e34 <__errno_location@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #24, 20	; 0x18000
   10e3c:	ldr	pc, [ip, #604]!	; 0x25c

00010e40 <__cxa_atexit@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #24, 20	; 0x18000
   10e48:	ldr	pc, [ip, #596]!	; 0x254

00010e4c <memset@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #24, 20	; 0x18000
   10e54:	ldr	pc, [ip, #588]!	; 0x24c

00010e58 <fileno@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #24, 20	; 0x18000
   10e60:	ldr	pc, [ip, #580]!	; 0x244

00010e64 <fclose@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #24, 20	; 0x18000
   10e6c:	ldr	pc, [ip, #572]!	; 0x23c

00010e70 <fseeko64@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #24, 20	; 0x18000
   10e78:	ldr	pc, [ip, #564]!	; 0x234

00010e7c <setlocale@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #24, 20	; 0x18000
   10e84:	ldr	pc, [ip, #556]!	; 0x22c

00010e88 <strrchr@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #24, 20	; 0x18000
   10e90:	ldr	pc, [ip, #548]!	; 0x224

00010e94 <nl_langinfo@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #24, 20	; 0x18000
   10e9c:	ldr	pc, [ip, #540]!	; 0x21c

00010ea0 <clearerr_unlocked@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #24, 20	; 0x18000
   10ea8:	ldr	pc, [ip, #532]!	; 0x214

00010eac <fopen64@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #24, 20	; 0x18000
   10eb4:	ldr	pc, [ip, #524]!	; 0x20c

00010eb8 <bindtextdomain@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #24, 20	; 0x18000
   10ec0:	ldr	pc, [ip, #516]!	; 0x204

00010ec4 <strncmp@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #24, 20	; 0x18000
   10ecc:	ldr	pc, [ip, #508]!	; 0x1fc

00010ed0 <abort@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #24, 20	; 0x18000
   10ed8:	ldr	pc, [ip, #500]!	; 0x1f4

00010edc <putchar_unlocked@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #24, 20	; 0x18000
   10ee4:	ldr	pc, [ip, #492]!	; 0x1ec

00010ee8 <strspn@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #24, 20	; 0x18000
   10ef0:	ldr	pc, [ip, #484]!	; 0x1e4

00010ef4 <__assert_fail@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #24, 20	; 0x18000
   10efc:	ldr	pc, [ip, #476]!	; 0x1dc

Disassembly of section .text:

00010f00 <.text>:
   10f00:	mov	fp, #0
   10f04:	mov	lr, #0
   10f08:	pop	{r1}		; (ldr r1, [sp], #4)
   10f0c:	mov	r2, sp
   10f10:	push	{r2}		; (str r2, [sp, #-4]!)
   10f14:	push	{r0}		; (str r0, [sp, #-4]!)
   10f18:	ldr	ip, [pc, #16]	; 10f30 <__assert_fail@plt+0x3c>
   10f1c:	push	{ip}		; (str ip, [sp, #-4]!)
   10f20:	ldr	r0, [pc, #12]	; 10f34 <__assert_fail@plt+0x40>
   10f24:	ldr	r3, [pc, #12]	; 10f38 <__assert_fail@plt+0x44>
   10f28:	bl	10dc8 <__libc_start_main@plt>
   10f2c:	bl	10ed0 <abort@plt>
   10f30:	andeq	r7, r1, ip, lsl #25
   10f34:	andeq	r1, r1, r4, ror #15
   10f38:	andeq	r7, r1, ip, lsr #24
   10f3c:	ldr	r3, [pc, #20]	; 10f58 <__assert_fail@plt+0x64>
   10f40:	ldr	r2, [pc, #20]	; 10f5c <__assert_fail@plt+0x68>
   10f44:	add	r3, pc, r3
   10f48:	ldr	r2, [r3, r2]
   10f4c:	cmp	r2, #0
   10f50:	bxeq	lr
   10f54:	b	10de0 <__gmon_start__@plt>
   10f58:	strheq	r8, [r1], -r4
   10f5c:	ldrdeq	r0, [r0], -ip
   10f60:	ldr	r0, [pc, #24]	; 10f80 <__assert_fail@plt+0x8c>
   10f64:	ldr	r3, [pc, #24]	; 10f84 <__assert_fail@plt+0x90>
   10f68:	cmp	r3, r0
   10f6c:	bxeq	lr
   10f70:	ldr	r3, [pc, #16]	; 10f88 <__assert_fail@plt+0x94>
   10f74:	cmp	r3, #0
   10f78:	bxeq	lr
   10f7c:	bx	r3
   10f80:	andeq	r9, r2, r8, lsr r1
   10f84:	andeq	r9, r2, r8, lsr r1
   10f88:	andeq	r0, r0, r0
   10f8c:	ldr	r0, [pc, #36]	; 10fb8 <__assert_fail@plt+0xc4>
   10f90:	ldr	r1, [pc, #36]	; 10fbc <__assert_fail@plt+0xc8>
   10f94:	sub	r1, r1, r0
   10f98:	asr	r1, r1, #2
   10f9c:	add	r1, r1, r1, lsr #31
   10fa0:	asrs	r1, r1, #1
   10fa4:	bxeq	lr
   10fa8:	ldr	r3, [pc, #16]	; 10fc0 <__assert_fail@plt+0xcc>
   10fac:	cmp	r3, #0
   10fb0:	bxeq	lr
   10fb4:	bx	r3
   10fb8:	andeq	r9, r2, r8, lsr r1
   10fbc:	andeq	r9, r2, r8, lsr r1
   10fc0:	andeq	r0, r0, r0
   10fc4:	push	{r4, lr}
   10fc8:	ldr	r4, [pc, #24]	; 10fe8 <__assert_fail@plt+0xf4>
   10fcc:	ldrb	r3, [r4]
   10fd0:	cmp	r3, #0
   10fd4:	popne	{r4, pc}
   10fd8:	bl	10f60 <__assert_fail@plt+0x6c>
   10fdc:	mov	r3, #1
   10fe0:	strb	r3, [r4]
   10fe4:	pop	{r4, pc}
   10fe8:	andeq	r9, r2, ip, asr r1
   10fec:	b	10f8c <__assert_fail@plt+0x98>
   10ff0:	str	fp, [sp, #-8]!
   10ff4:	str	lr, [sp, #4]
   10ff8:	add	fp, sp, #4
   10ffc:	movw	r0, #31924	; 0x7cb4
   11000:	movt	r0, #1
   11004:	bl	10e10 <gettext@plt>
   11008:	mov	r2, r0
   1100c:	movw	r3, #37204	; 0x9154
   11010:	movt	r3, #2
   11014:	ldr	r3, [r3]
   11018:	mov	r1, r3
   1101c:	mov	r0, r2
   11020:	bl	10c9c <fputs_unlocked@plt>
   11024:	nop	{0}
   11028:	sub	sp, fp, #4
   1102c:	ldr	fp, [sp]
   11030:	add	sp, sp, #4
   11034:	pop	{pc}		; (ldr pc, [sp], #4)
   11038:	str	fp, [sp, #-8]!
   1103c:	str	lr, [sp, #4]
   11040:	add	fp, sp, #4
   11044:	movw	r0, #31980	; 0x7cec
   11048:	movt	r0, #1
   1104c:	bl	10e10 <gettext@plt>
   11050:	mov	r2, r0
   11054:	movw	r3, #37204	; 0x9154
   11058:	movt	r3, #2
   1105c:	ldr	r3, [r3]
   11060:	mov	r1, r3
   11064:	mov	r0, r2
   11068:	bl	10c9c <fputs_unlocked@plt>
   1106c:	nop	{0}
   11070:	sub	sp, fp, #4
   11074:	ldr	fp, [sp]
   11078:	add	sp, sp, #4
   1107c:	pop	{pc}		; (ldr pc, [sp], #4)
   11080:	str	fp, [sp, #-8]!
   11084:	str	lr, [sp, #4]
   11088:	add	fp, sp, #4
   1108c:	sub	sp, sp, #80	; 0x50
   11090:	str	r0, [fp, #-80]	; 0xffffffb0
   11094:	movw	r2, #32428	; 0x7eac
   11098:	movt	r2, #1
   1109c:	sub	r3, fp, #72	; 0x48
   110a0:	ldrd	r0, [r2]
   110a4:	strd	r0, [r3]
   110a8:	ldrd	r0, [r2, #8]
   110ac:	strd	r0, [r3, #8]
   110b0:	ldrd	r0, [r2, #16]
   110b4:	strd	r0, [r3, #16]
   110b8:	ldrd	r0, [r2, #24]
   110bc:	strd	r0, [r3, #24]
   110c0:	ldrd	r0, [r2, #32]
   110c4:	strd	r0, [r3, #32]
   110c8:	ldrd	r0, [r2, #40]	; 0x28
   110cc:	strd	r0, [r3, #40]	; 0x28
   110d0:	ldrd	r0, [r2, #48]	; 0x30
   110d4:	strd	r0, [r3, #48]	; 0x30
   110d8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   110dc:	str	r3, [fp, #-8]
   110e0:	sub	r3, fp, #72	; 0x48
   110e4:	str	r3, [fp, #-12]
   110e8:	b	110f8 <__assert_fail@plt+0x204>
   110ec:	ldr	r3, [fp, #-12]
   110f0:	add	r3, r3, #8
   110f4:	str	r3, [fp, #-12]
   110f8:	ldr	r3, [fp, #-12]
   110fc:	ldr	r3, [r3]
   11100:	cmp	r3, #0
   11104:	beq	11128 <__assert_fail@plt+0x234>
   11108:	ldr	r3, [fp, #-12]
   1110c:	ldr	r3, [r3]
   11110:	mov	r1, r3
   11114:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11118:	bl	10cb4 <strcmp@plt>
   1111c:	mov	r3, r0
   11120:	cmp	r3, #0
   11124:	bne	110ec <__assert_fail@plt+0x1f8>
   11128:	ldr	r3, [fp, #-12]
   1112c:	ldr	r3, [r3, #4]
   11130:	cmp	r3, #0
   11134:	beq	11144 <__assert_fail@plt+0x250>
   11138:	ldr	r3, [fp, #-12]
   1113c:	ldr	r3, [r3, #4]
   11140:	str	r3, [fp, #-8]
   11144:	movw	r0, #32056	; 0x7d38
   11148:	movt	r0, #1
   1114c:	bl	10e10 <gettext@plt>
   11150:	mov	r3, r0
   11154:	movw	r2, #32080	; 0x7d50
   11158:	movt	r2, #1
   1115c:	movw	r1, #32120	; 0x7d78
   11160:	movt	r1, #1
   11164:	mov	r0, r3
   11168:	bl	10ccc <printf@plt>
   1116c:	mov	r1, #0
   11170:	mov	r0, #5
   11174:	bl	10e7c <setlocale@plt>
   11178:	str	r0, [fp, #-16]
   1117c:	ldr	r3, [fp, #-16]
   11180:	cmp	r3, #0
   11184:	beq	111d0 <__assert_fail@plt+0x2dc>
   11188:	mov	r2, #3
   1118c:	movw	r1, #32136	; 0x7d88
   11190:	movt	r1, #1
   11194:	ldr	r0, [fp, #-16]
   11198:	bl	10ec4 <strncmp@plt>
   1119c:	mov	r3, r0
   111a0:	cmp	r3, #0
   111a4:	beq	111d0 <__assert_fail@plt+0x2dc>
   111a8:	movw	r0, #32140	; 0x7d8c
   111ac:	movt	r0, #1
   111b0:	bl	10e10 <gettext@plt>
   111b4:	mov	r2, r0
   111b8:	movw	r3, #37204	; 0x9154
   111bc:	movt	r3, #2
   111c0:	ldr	r3, [r3]
   111c4:	mov	r1, r3
   111c8:	mov	r0, r2
   111cc:	bl	10c9c <fputs_unlocked@plt>
   111d0:	movw	r0, #32212	; 0x7dd4
   111d4:	movt	r0, #1
   111d8:	bl	10e10 <gettext@plt>
   111dc:	mov	r3, r0
   111e0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   111e4:	movw	r1, #32080	; 0x7d50
   111e8:	movt	r1, #1
   111ec:	mov	r0, r3
   111f0:	bl	10ccc <printf@plt>
   111f4:	movw	r0, #32240	; 0x7df0
   111f8:	movt	r0, #1
   111fc:	bl	10e10 <gettext@plt>
   11200:	ldr	r2, [fp, #-8]
   11204:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11208:	cmp	r2, r3
   1120c:	bne	1121c <__assert_fail@plt+0x328>
   11210:	movw	r3, #32292	; 0x7e24
   11214:	movt	r3, #1
   11218:	b	11224 <__assert_fail@plt+0x330>
   1121c:	movw	r3, #32304	; 0x7e30
   11220:	movt	r3, #1
   11224:	mov	r2, r3
   11228:	ldr	r1, [fp, #-8]
   1122c:	bl	10ccc <printf@plt>
   11230:	nop	{0}
   11234:	sub	sp, fp, #4
   11238:	ldr	fp, [sp]
   1123c:	add	sp, sp, #4
   11240:	pop	{pc}		; (ldr pc, [sp], #4)
   11244:	str	r4, [sp, #-12]!
   11248:	str	fp, [sp, #4]
   1124c:	str	lr, [sp, #8]
   11250:	add	fp, sp, #8
   11254:	sub	sp, sp, #12
   11258:	str	r0, [fp, #-16]
   1125c:	ldr	r3, [fp, #-16]
   11260:	cmp	r3, #0
   11264:	beq	112a0 <__assert_fail@plt+0x3ac>
   11268:	movw	r3, #37192	; 0x9148
   1126c:	movt	r3, #2
   11270:	ldr	r4, [r3]
   11274:	movw	r0, #32620	; 0x7f6c
   11278:	movt	r0, #1
   1127c:	bl	10e10 <gettext@plt>
   11280:	mov	r1, r0
   11284:	movw	r3, #37288	; 0x91a8
   11288:	movt	r3, #2
   1128c:	ldr	r3, [r3]
   11290:	mov	r2, r3
   11294:	mov	r0, r4
   11298:	bl	10e28 <fprintf@plt>
   1129c:	b	11380 <__assert_fail@plt+0x48c>
   112a0:	movw	r0, #32660	; 0x7f94
   112a4:	movt	r0, #1
   112a8:	bl	10e10 <gettext@plt>
   112ac:	mov	r2, r0
   112b0:	movw	r3, #37288	; 0x91a8
   112b4:	movt	r3, #2
   112b8:	ldr	r3, [r3]
   112bc:	mov	r1, r3
   112c0:	mov	r0, r2
   112c4:	bl	10ccc <printf@plt>
   112c8:	movw	r0, #32696	; 0x7fb8
   112cc:	movt	r0, #1
   112d0:	bl	10e10 <gettext@plt>
   112d4:	mov	r2, r0
   112d8:	movw	r3, #37204	; 0x9154
   112dc:	movt	r3, #2
   112e0:	ldr	r3, [r3]
   112e4:	mov	r1, r3
   112e8:	mov	r0, r2
   112ec:	bl	10c9c <fputs_unlocked@plt>
   112f0:	bl	10ff0 <__assert_fail@plt+0xfc>
   112f4:	bl	11038 <__assert_fail@plt+0x144>
   112f8:	movw	r0, #32764	; 0x7ffc
   112fc:	movt	r0, #1
   11300:	bl	10e10 <gettext@plt>
   11304:	mov	r2, r0
   11308:	movw	r3, #37204	; 0x9154
   1130c:	movt	r3, #2
   11310:	ldr	r3, [r3]
   11314:	mov	r1, r3
   11318:	mov	r0, r2
   1131c:	bl	10c9c <fputs_unlocked@plt>
   11320:	bl	12b9c <__assert_fail@plt+0x1ca8>
   11324:	movw	r0, #32988	; 0x80dc
   11328:	movt	r0, #1
   1132c:	bl	10e10 <gettext@plt>
   11330:	mov	r2, r0
   11334:	movw	r3, #37204	; 0x9154
   11338:	movt	r3, #2
   1133c:	ldr	r3, [r3]
   11340:	mov	r1, r3
   11344:	mov	r0, r2
   11348:	bl	10c9c <fputs_unlocked@plt>
   1134c:	movw	r0, #33036	; 0x810c
   11350:	movt	r0, #1
   11354:	bl	10e10 <gettext@plt>
   11358:	mov	r2, r0
   1135c:	movw	r3, #37204	; 0x9154
   11360:	movt	r3, #2
   11364:	ldr	r3, [r3]
   11368:	mov	r1, r3
   1136c:	mov	r0, r2
   11370:	bl	10c9c <fputs_unlocked@plt>
   11374:	movw	r0, #33092	; 0x8144
   11378:	movt	r0, #1
   1137c:	bl	11080 <__assert_fail@plt+0x18c>
   11380:	ldr	r0, [fp, #-16]
   11384:	bl	10e04 <exit@plt>
   11388:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1138c:	strd	r6, [sp, #8]
   11390:	strd	r8, [sp, #16]
   11394:	str	fp, [sp, #24]
   11398:	str	lr, [sp, #28]
   1139c:	add	fp, sp, #28
   113a0:	sub	sp, sp, #64	; 0x40
   113a4:	mov	r0, #0
   113a8:	bl	128e4 <__assert_fail@plt+0x19f0>
   113ac:	str	r0, [fp, #-32]	; 0xffffffe0
   113b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   113b4:	cmp	r3, #0
   113b8:	beq	117c4 <__assert_fail@plt+0x8d0>
   113bc:	movw	r3, #37220	; 0x9164
   113c0:	movt	r3, #2
   113c4:	ldr	r3, [r3]
   113c8:	mov	r0, r3
   113cc:	bl	163b4 <__assert_fail@plt+0x54c0>
   113d0:	mov	r3, r0
   113d4:	str	r3, [fp, #-64]	; 0xffffffc0
   113d8:	mov	r3, #1
   113dc:	strb	r3, [fp, #-37]	; 0xffffffdb
   113e0:	mov	r2, #0
   113e4:	mov	r3, #0
   113e8:	strd	r2, [fp, #-52]	; 0xffffffcc
   113ec:	mov	r2, #0
   113f0:	mov	r3, #0
   113f4:	strd	r2, [fp, #-76]	; 0xffffffb4
   113f8:	mov	r3, #0
   113fc:	str	r3, [fp, #-84]	; 0xffffffac
   11400:	mov	r3, #0
   11404:	strb	r3, [fp, #-53]	; 0xffffffcb
   11408:	mov	r3, #1
   1140c:	strb	r3, [fp, #-54]	; 0xffffffca
   11410:	mov	r3, #0
   11414:	str	r3, [fp, #-60]	; 0xffffffc4
   11418:	b	11420 <__assert_fail@plt+0x52c>
   1141c:	nop	{0}
   11420:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11424:	bl	10d38 <getc_unlocked@plt>
   11428:	str	r0, [fp, #-36]	; 0xffffffdc
   1142c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11430:	cmp	r3, #0
   11434:	bge	11450 <__assert_fail@plt+0x55c>
   11438:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1143c:	bl	128e4 <__assert_fail@plt+0x19f0>
   11440:	str	r0, [fp, #-32]	; 0xffffffe0
   11444:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11448:	cmp	r3, #0
   1144c:	bne	1141c <__assert_fail@plt+0x528>
   11450:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   11454:	cmp	r3, #0
   11458:	beq	1175c <__assert_fail@plt+0x868>
   1145c:	bl	10df8 <__ctype_b_loc@plt>
   11460:	mov	r3, r0
   11464:	ldr	r2, [r3]
   11468:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1146c:	lsl	r3, r3, #1
   11470:	add	r3, r2, r3
   11474:	ldrh	r3, [r3]
   11478:	and	r3, r3, #1
   1147c:	cmp	r3, #0
   11480:	movne	r3, #1
   11484:	moveq	r3, #0
   11488:	strb	r3, [fp, #-77]	; 0xffffffb3
   1148c:	ldrb	r3, [fp, #-77]	; 0xffffffb3
   11490:	cmp	r3, #0
   11494:	beq	115d0 <__assert_fail@plt+0x6dc>
   11498:	sub	r3, fp, #85	; 0x55
   1149c:	sub	r2, fp, #84	; 0x54
   114a0:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   114a4:	bl	12654 <__assert_fail@plt+0x1760>
   114a8:	strd	r0, [fp, #-76]	; 0xffffffb4
   114ac:	ldrb	r3, [fp, #-85]	; 0xffffffab
   114b0:	cmp	r3, #0
   114b4:	beq	114c0 <__assert_fail@plt+0x5cc>
   114b8:	mov	r3, #0
   114bc:	strb	r3, [fp, #-37]	; 0xffffffdb
   114c0:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   114c4:	cmp	r3, #0
   114c8:	beq	11678 <__assert_fail@plt+0x784>
   114cc:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   114d0:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   114d4:	cmp	r1, r3
   114d8:	cmpeq	r0, r2
   114dc:	bcs	11500 <__assert_fail@plt+0x60c>
   114e0:	movw	r0, #33104	; 0x8150
   114e4:	movt	r0, #1
   114e8:	bl	10e10 <gettext@plt>
   114ec:	mov	r3, r0
   114f0:	mov	r2, r3
   114f4:	mov	r1, #0
   114f8:	mov	r0, #1
   114fc:	bl	10db0 <error@plt>
   11500:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11504:	cmp	r3, #9
   11508:	bne	11530 <__assert_fail@plt+0x63c>
   1150c:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   11510:	strd	r2, [fp, #-52]	; 0xffffffcc
   11514:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11518:	cmp	r3, #0
   1151c:	beq	115c4 <__assert_fail@plt+0x6d0>
   11520:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11524:	mov	r2, #9
   11528:	strb	r2, [r3]
   1152c:	b	115c4 <__assert_fail@plt+0x6d0>
   11530:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   11534:	adds	r4, r2, #1
   11538:	adc	r5, r3, #0
   1153c:	strd	r4, [fp, #-52]	; 0xffffffcc
   11540:	ldrb	r3, [fp, #-54]	; 0xffffffca
   11544:	eor	r3, r3, #1
   11548:	uxtb	r3, r3
   1154c:	cmp	r3, #0
   11550:	bne	11568 <__assert_fail@plt+0x674>
   11554:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   11558:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   1155c:	cmp	r1, r3
   11560:	cmpeq	r0, r2
   11564:	beq	115b0 <__assert_fail@plt+0x6bc>
   11568:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   1156c:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   11570:	cmp	r1, r3
   11574:	cmpeq	r0, r2
   11578:	bne	11584 <__assert_fail@plt+0x690>
   1157c:	mov	r3, #1
   11580:	strb	r3, [fp, #-53]	; 0xffffffcb
   11584:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11588:	add	r2, r3, #1
   1158c:	str	r2, [fp, #-60]	; 0xffffffc4
   11590:	ldr	r2, [fp, #-64]	; 0xffffffc0
   11594:	add	r3, r2, r3
   11598:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1159c:	uxtb	r2, r2
   115a0:	strb	r2, [r3]
   115a4:	mov	r3, #1
   115a8:	strb	r3, [fp, #-54]	; 0xffffffca
   115ac:	b	117b4 <__assert_fail@plt+0x8c0>
   115b0:	mov	r3, #9
   115b4:	str	r3, [fp, #-36]	; 0xffffffdc
   115b8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   115bc:	mov	r2, #9
   115c0:	strb	r2, [r3]
   115c4:	ldrb	r3, [fp, #-53]	; 0xffffffcb
   115c8:	str	r3, [fp, #-60]	; 0xffffffc4
   115cc:	b	11678 <__assert_fail@plt+0x784>
   115d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   115d4:	cmp	r3, #8
   115d8:	bne	1163c <__assert_fail@plt+0x748>
   115dc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   115e0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   115e4:	orr	r3, r2, r3
   115e8:	cmp	r3, #0
   115ec:	movne	r3, #1
   115f0:	moveq	r3, #0
   115f4:	uxtb	r3, r3
   115f8:	uxtb	r2, r3
   115fc:	mov	r3, #0
   11600:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   11604:	subs	r6, r0, r2
   11608:	sbc	r7, r1, r3
   1160c:	strd	r6, [fp, #-52]	; 0xffffffcc
   11610:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   11614:	strd	r2, [fp, #-76]	; 0xffffffb4
   11618:	ldr	r3, [fp, #-84]	; 0xffffffac
   1161c:	ldr	r2, [fp, #-84]	; 0xffffffac
   11620:	cmp	r2, #0
   11624:	movne	r2, #1
   11628:	moveq	r2, #0
   1162c:	uxtb	r2, r2
   11630:	sub	r3, r3, r2
   11634:	str	r3, [fp, #-84]	; 0xffffffac
   11638:	b	11678 <__assert_fail@plt+0x784>
   1163c:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   11640:	adds	r8, r2, #1
   11644:	adc	r9, r3, #0
   11648:	strd	r8, [fp, #-52]	; 0xffffffcc
   1164c:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   11650:	orrs	r3, r2, r3
   11654:	bne	11678 <__assert_fail@plt+0x784>
   11658:	movw	r0, #33104	; 0x8150
   1165c:	movt	r0, #1
   11660:	bl	10e10 <gettext@plt>
   11664:	mov	r3, r0
   11668:	mov	r2, r3
   1166c:	mov	r1, #0
   11670:	mov	r0, #1
   11674:	bl	10db0 <error@plt>
   11678:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1167c:	cmp	r3, #0
   11680:	beq	11710 <__assert_fail@plt+0x81c>
   11684:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11688:	cmp	r3, #1
   1168c:	bls	116a8 <__assert_fail@plt+0x7b4>
   11690:	ldrb	r3, [fp, #-53]	; 0xffffffcb
   11694:	cmp	r3, #0
   11698:	beq	116a8 <__assert_fail@plt+0x7b4>
   1169c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   116a0:	mov	r2, #9
   116a4:	strb	r2, [r3]
   116a8:	movw	r3, #37204	; 0x9154
   116ac:	movt	r3, #2
   116b0:	ldr	r3, [r3]
   116b4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   116b8:	mov	r1, #1
   116bc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   116c0:	bl	10d14 <fwrite_unlocked@plt>
   116c4:	mov	r2, r0
   116c8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   116cc:	cmp	r3, r2
   116d0:	beq	11700 <__assert_fail@plt+0x80c>
   116d4:	bl	10e34 <__errno_location@plt>
   116d8:	mov	r3, r0
   116dc:	ldr	r4, [r3]
   116e0:	movw	r0, #33128	; 0x8168
   116e4:	movt	r0, #1
   116e8:	bl	10e10 <gettext@plt>
   116ec:	mov	r3, r0
   116f0:	mov	r2, r3
   116f4:	mov	r1, r4
   116f8:	mov	r0, #1
   116fc:	bl	10db0 <error@plt>
   11700:	mov	r3, #0
   11704:	str	r3, [fp, #-60]	; 0xffffffc4
   11708:	mov	r3, #0
   1170c:	strb	r3, [fp, #-53]	; 0xffffffcb
   11710:	ldrb	r3, [fp, #-77]	; 0xffffffb3
   11714:	strb	r3, [fp, #-54]	; 0xffffffca
   11718:	ldrb	r2, [fp, #-37]	; 0xffffffdb
   1171c:	movw	r3, #37216	; 0x9160
   11720:	movt	r3, #2
   11724:	ldrb	r3, [r3]
   11728:	cmp	r3, #0
   1172c:	bne	1173c <__assert_fail@plt+0x848>
   11730:	ldrb	r3, [fp, #-77]	; 0xffffffb3
   11734:	cmp	r3, #0
   11738:	beq	11744 <__assert_fail@plt+0x850>
   1173c:	mov	r3, #1
   11740:	b	11748 <__assert_fail@plt+0x854>
   11744:	mov	r3, #0
   11748:	and	r3, r3, r2
   1174c:	cmp	r3, #0
   11750:	movne	r3, #1
   11754:	moveq	r3, #0
   11758:	strb	r3, [fp, #-37]	; 0xffffffdb
   1175c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11760:	cmp	r3, #0
   11764:	bge	11774 <__assert_fail@plt+0x880>
   11768:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1176c:	bl	13038 <__assert_fail@plt+0x2144>
   11770:	b	117c8 <__assert_fail@plt+0x8d4>
   11774:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11778:	bl	10edc <putchar_unlocked@plt>
   1177c:	mov	r3, r0
   11780:	cmp	r3, #0
   11784:	bge	117b4 <__assert_fail@plt+0x8c0>
   11788:	bl	10e34 <__errno_location@plt>
   1178c:	mov	r3, r0
   11790:	ldr	r4, [r3]
   11794:	movw	r0, #33128	; 0x8168
   11798:	movt	r0, #1
   1179c:	bl	10e10 <gettext@plt>
   117a0:	mov	r3, r0
   117a4:	mov	r2, r3
   117a8:	mov	r1, r4
   117ac:	mov	r0, #1
   117b0:	bl	10db0 <error@plt>
   117b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   117b8:	cmp	r3, #10
   117bc:	bne	11420 <__assert_fail@plt+0x52c>
   117c0:	b	113d8 <__assert_fail@plt+0x4e4>
   117c4:	nop	{0}
   117c8:	sub	sp, fp, #28
   117cc:	ldrd	r4, [sp]
   117d0:	ldrd	r6, [sp, #8]
   117d4:	ldrd	r8, [sp, #16]
   117d8:	ldr	fp, [sp, #24]
   117dc:	add	sp, sp, #28
   117e0:	pop	{pc}		; (ldr pc, [sp], #4)
   117e4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   117e8:	strd	r6, [sp, #8]
   117ec:	strd	r8, [sp, #16]
   117f0:	str	fp, [sp, #24]
   117f4:	str	lr, [sp, #28]
   117f8:	add	fp, sp, #28
   117fc:	sub	sp, sp, #48	; 0x30
   11800:	str	r0, [fp, #-48]	; 0xffffffd0
   11804:	str	r1, [fp, #-52]	; 0xffffffcc
   11808:	mov	r3, #0
   1180c:	strb	r3, [fp, #-29]	; 0xffffffe3
   11810:	mov	r2, #0
   11814:	mov	r3, #0
   11818:	strd	r2, [fp, #-44]	; 0xffffffd4
   1181c:	mov	r3, #0
   11820:	strb	r3, [fp, #-30]	; 0xffffffe2
   11824:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11828:	ldr	r3, [r3]
   1182c:	mov	r0, r3
   11830:	bl	131cc <__assert_fail@plt+0x22d8>
   11834:	movw	r1, #32304	; 0x7e30
   11838:	movt	r1, #1
   1183c:	mov	r0, #6
   11840:	bl	10e7c <setlocale@plt>
   11844:	movw	r1, #33140	; 0x8174
   11848:	movt	r1, #1
   1184c:	movw	r0, #32328	; 0x7e48
   11850:	movt	r0, #1
   11854:	bl	10eb8 <bindtextdomain@plt>
   11858:	movw	r0, #32328	; 0x7e48
   1185c:	movt	r0, #1
   11860:	bl	10d50 <textdomain@plt>
   11864:	movw	r0, #11376	; 0x2c70
   11868:	movt	r0, #1
   1186c:	bl	17c90 <__assert_fail@plt+0x6d9c>
   11870:	b	11afc <__assert_fail@plt+0xc08>
   11874:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11878:	cmp	r3, #63	; 0x3f
   1187c:	beq	118dc <__assert_fail@plt+0x9e8>
   11880:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11884:	cmp	r3, #63	; 0x3f
   11888:	bgt	118b4 <__assert_fail@plt+0x9c0>
   1188c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11890:	cmn	r3, #2
   11894:	beq	11954 <__assert_fail@plt+0xa60>
   11898:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1189c:	cmp	r3, #44	; 0x2c
   118a0:	beq	1192c <__assert_fail@plt+0xa38>
   118a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   118a8:	cmn	r3, #3
   118ac:	beq	1195c <__assert_fail@plt+0xa68>
   118b0:	b	119a8 <__assert_fail@plt+0xab4>
   118b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   118b8:	cmp	r3, #116	; 0x74
   118bc:	beq	118f8 <__assert_fail@plt+0xa04>
   118c0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   118c4:	cmp	r3, #256	; 0x100
   118c8:	beq	11920 <__assert_fail@plt+0xa2c>
   118cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   118d0:	cmp	r3, #97	; 0x61
   118d4:	beq	118e4 <__assert_fail@plt+0x9f0>
   118d8:	b	119a8 <__assert_fail@plt+0xab4>
   118dc:	mov	r0, #1
   118e0:	bl	11244 <__assert_fail@plt+0x350>
   118e4:	movw	r3, #37216	; 0x9160
   118e8:	movt	r3, #2
   118ec:	mov	r2, #1
   118f0:	strb	r2, [r3]
   118f4:	b	11afc <__assert_fail@plt+0xc08>
   118f8:	movw	r3, #37216	; 0x9160
   118fc:	movt	r3, #2
   11900:	mov	r2, #1
   11904:	strb	r2, [r3]
   11908:	movw	r3, #37208	; 0x9158
   1190c:	movt	r3, #2
   11910:	ldr	r3, [r3]
   11914:	mov	r0, r3
   11918:	bl	11eb4 <__assert_fail@plt+0xfc0>
   1191c:	b	11afc <__assert_fail@plt+0xc08>
   11920:	mov	r3, #1
   11924:	strb	r3, [fp, #-30]	; 0xffffffe2
   11928:	b	11afc <__assert_fail@plt+0xc08>
   1192c:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   11930:	cmp	r3, #0
   11934:	beq	11948 <__assert_fail@plt+0xa54>
   11938:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1193c:	mov	r0, r2
   11940:	mov	r1, r3
   11944:	bl	11c10 <__assert_fail@plt+0xd1c>
   11948:	mov	r3, #0
   1194c:	strb	r3, [fp, #-29]	; 0xffffffe3
   11950:	b	11afc <__assert_fail@plt+0xc08>
   11954:	mov	r0, #0
   11958:	bl	11244 <__assert_fail@plt+0x350>
   1195c:	movw	r3, #37204	; 0x9154
   11960:	movt	r3, #2
   11964:	ldr	r0, [r3]
   11968:	movw	r3, #37104	; 0x90f0
   1196c:	movt	r3, #2
   11970:	ldr	r2, [r3]
   11974:	mov	r3, #0
   11978:	str	r3, [sp, #4]
   1197c:	movw	r3, #33164	; 0x818c
   11980:	movt	r3, #1
   11984:	str	r3, [sp]
   11988:	mov	r3, r2
   1198c:	movw	r2, #32120	; 0x7d78
   11990:	movt	r2, #1
   11994:	movw	r1, #33092	; 0x8144
   11998:	movt	r1, #1
   1199c:	bl	16234 <__assert_fail@plt+0x5340>
   119a0:	mov	r0, #0
   119a4:	bl	10e04 <exit@plt>
   119a8:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   119ac:	eor	r3, r3, #1
   119b0:	uxtb	r3, r3
   119b4:	cmp	r3, #0
   119b8:	beq	119d0 <__assert_fail@plt+0xadc>
   119bc:	mov	r2, #0
   119c0:	mov	r3, #0
   119c4:	strd	r2, [fp, #-44]	; 0xffffffd4
   119c8:	mov	r3, #1
   119cc:	strb	r3, [fp, #-29]	; 0xffffffe3
   119d0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   119d4:	add	r1, pc, #516	; 0x204
   119d8:	ldrd	r0, [r1]
   119dc:	cmp	r3, r1
   119e0:	cmpeq	r2, r0
   119e4:	bhi	11acc <__assert_fail@plt+0xbd8>
   119e8:	ldrd	r4, [fp, #-44]	; 0xffffffd4
   119ec:	mov	r2, r4
   119f0:	mov	r3, r5
   119f4:	mov	r0, #0
   119f8:	mov	r1, #0
   119fc:	lsl	r1, r3, #2
   11a00:	orr	r1, r1, r2, lsr #30
   11a04:	lsl	r0, r2, #2
   11a08:	mov	r2, r0
   11a0c:	mov	r3, r1
   11a10:	adds	r2, r2, r4
   11a14:	adc	r3, r3, r5
   11a18:	adds	r1, r2, r2
   11a1c:	str	r1, [fp, #-60]	; 0xffffffc4
   11a20:	adc	r3, r3, r3
   11a24:	str	r3, [fp, #-56]	; 0xffffffc8
   11a28:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   11a2c:	mov	r0, r2
   11a30:	mov	r1, r3
   11a34:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11a38:	sub	r3, r3, #48	; 0x30
   11a3c:	mov	r2, r3
   11a40:	asr	r3, r2, #31
   11a44:	adds	r6, r0, r2
   11a48:	adc	r7, r1, r3
   11a4c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11a50:	cmp	r7, r3
   11a54:	cmpeq	r6, r2
   11a58:	bcc	11acc <__assert_fail@plt+0xbd8>
   11a5c:	ldrd	r4, [fp, #-44]	; 0xffffffd4
   11a60:	mov	r2, r4
   11a64:	mov	r3, r5
   11a68:	mov	r0, #0
   11a6c:	mov	r1, #0
   11a70:	lsl	r1, r3, #2
   11a74:	orr	r1, r1, r2, lsr #30
   11a78:	lsl	r0, r2, #2
   11a7c:	mov	r2, r0
   11a80:	mov	r3, r1
   11a84:	adds	r2, r2, r4
   11a88:	adc	r3, r3, r5
   11a8c:	adds	r1, r2, r2
   11a90:	str	r1, [fp, #-68]	; 0xffffffbc
   11a94:	adc	r3, r3, r3
   11a98:	str	r3, [fp, #-64]	; 0xffffffc0
   11a9c:	ldrd	r2, [fp, #-68]	; 0xffffffbc
   11aa0:	mov	r0, r2
   11aa4:	mov	r1, r3
   11aa8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11aac:	sub	r3, r3, #48	; 0x30
   11ab0:	mov	r2, r3
   11ab4:	asr	r3, r2, #31
   11ab8:	adds	r8, r0, r2
   11abc:	adc	r9, r1, r3
   11ac0:	strd	r8, [fp, #-44]	; 0xffffffd4
   11ac4:	mov	r3, #0
   11ac8:	b	11ad0 <__assert_fail@plt+0xbdc>
   11acc:	mov	r3, #1
   11ad0:	cmp	r3, #0
   11ad4:	beq	11af8 <__assert_fail@plt+0xc04>
   11ad8:	movw	r0, #33180	; 0x819c
   11adc:	movt	r0, #1
   11ae0:	bl	10e10 <gettext@plt>
   11ae4:	mov	r3, r0
   11ae8:	mov	r2, r3
   11aec:	mov	r1, #0
   11af0:	mov	r0, #1
   11af4:	bl	10db0 <error@plt>
   11af8:	nop	{0}
   11afc:	mov	r3, #0
   11b00:	str	r3, [sp]
   11b04:	movw	r3, #32524	; 0x7f0c
   11b08:	movt	r3, #1
   11b0c:	movw	r2, #33208	; 0x81b8
   11b10:	movt	r2, #1
   11b14:	ldr	r1, [fp, #-52]	; 0xffffffcc
   11b18:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11b1c:	bl	10dec <getopt_long@plt>
   11b20:	str	r0, [fp, #-36]	; 0xffffffdc
   11b24:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11b28:	cmn	r3, #1
   11b2c:	bne	11874 <__assert_fail@plt+0x980>
   11b30:	ldrb	r3, [fp, #-30]	; 0xffffffe2
   11b34:	cmp	r3, #0
   11b38:	beq	11b4c <__assert_fail@plt+0xc58>
   11b3c:	movw	r3, #37216	; 0x9160
   11b40:	movt	r3, #2
   11b44:	mov	r2, #0
   11b48:	strb	r2, [r3]
   11b4c:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   11b50:	cmp	r3, #0
   11b54:	beq	11b68 <__assert_fail@plt+0xc74>
   11b58:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11b5c:	mov	r0, r2
   11b60:	mov	r1, r3
   11b64:	bl	11c10 <__assert_fail@plt+0xd1c>
   11b68:	bl	12510 <__assert_fail@plt+0x161c>
   11b6c:	movw	r3, #37184	; 0x9140
   11b70:	movt	r3, #2
   11b74:	ldr	r3, [r3]
   11b78:	ldr	r2, [fp, #-48]	; 0xffffffd0
   11b7c:	cmp	r2, r3
   11b80:	ble	11ba0 <__assert_fail@plt+0xcac>
   11b84:	movw	r3, #37184	; 0x9140
   11b88:	movt	r3, #2
   11b8c:	ldr	r3, [r3]
   11b90:	lsl	r3, r3, #2
   11b94:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11b98:	add	r3, r2, r3
   11b9c:	b	11ba4 <__assert_fail@plt+0xcb0>
   11ba0:	mov	r3, #0
   11ba4:	mov	r0, r3
   11ba8:	bl	12880 <__assert_fail@plt+0x198c>
   11bac:	bl	11388 <__assert_fail@plt+0x494>
   11bb0:	bl	12b28 <__assert_fail@plt+0x1c34>
   11bb4:	movw	r3, #37224	; 0x9168
   11bb8:	movt	r3, #2
   11bbc:	ldr	r3, [r3]
   11bc0:	mov	r0, r3
   11bc4:	sub	sp, fp, #28
   11bc8:	ldrd	r4, [sp]
   11bcc:	ldrd	r6, [sp, #8]
   11bd0:	ldrd	r8, [sp, #16]
   11bd4:	ldr	fp, [sp, #24]
   11bd8:	add	sp, sp, #28
   11bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   11be0:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11be4:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11be8:	push	{fp}		; (str fp, [sp, #-4]!)
   11bec:	add	fp, sp, #0
   11bf0:	sub	sp, sp, #12
   11bf4:	mov	r3, r0
   11bf8:	strb	r3, [fp, #-5]
   11bfc:	ldrb	r3, [fp, #-5]
   11c00:	mov	r0, r3
   11c04:	add	sp, fp, #0
   11c08:	pop	{fp}		; (ldr fp, [sp], #4)
   11c0c:	bx	lr
   11c10:	strd	r4, [sp, #-16]!
   11c14:	str	fp, [sp, #8]
   11c18:	str	lr, [sp, #12]
   11c1c:	add	fp, sp, #12
   11c20:	sub	sp, sp, #24
   11c24:	strd	r0, [fp, #-36]	; 0xffffffdc
   11c28:	movw	r1, #37264	; 0x9190
   11c2c:	movt	r1, #2
   11c30:	ldr	r1, [r1]
   11c34:	cmp	r1, #0
   11c38:	beq	11c68 <__assert_fail@plt+0xd74>
   11c3c:	movw	r1, #37256	; 0x9188
   11c40:	movt	r1, #2
   11c44:	ldr	r0, [r1]
   11c48:	movw	r1, #37264	; 0x9190
   11c4c:	movt	r1, #2
   11c50:	ldr	r1, [r1]
   11c54:	sub	r1, r1, #-536870911	; 0xe0000001
   11c58:	lsl	r1, r1, #3
   11c5c:	add	r1, r0, r1
   11c60:	ldrd	r0, [r1]
   11c64:	b	11c70 <__assert_fail@plt+0xd7c>
   11c68:	mov	r0, #0
   11c6c:	mov	r1, #0
   11c70:	strd	r0, [fp, #-20]	; 0xffffffec
   11c74:	ldrd	r4, [fp, #-20]	; 0xffffffec
   11c78:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   11c7c:	cmp	r5, r1
   11c80:	cmpeq	r4, r0
   11c84:	bhi	11c9c <__assert_fail@plt+0xda8>
   11c88:	ldrd	r4, [fp, #-36]	; 0xffffffdc
   11c8c:	ldrd	r0, [fp, #-20]	; 0xffffffec
   11c90:	subs	r2, r4, r0
   11c94:	sbc	r3, r5, r1
   11c98:	b	11ca4 <__assert_fail@plt+0xdb0>
   11c9c:	mov	r2, #0
   11ca0:	mov	r3, #0
   11ca4:	strd	r2, [fp, #-28]	; 0xffffffe4
   11ca8:	movw	r3, #37264	; 0x9190
   11cac:	movt	r3, #2
   11cb0:	ldr	r2, [r3]
   11cb4:	movw	r3, #37260	; 0x918c
   11cb8:	movt	r3, #2
   11cbc:	ldr	r3, [r3]
   11cc0:	cmp	r2, r3
   11cc4:	bne	11cf8 <__assert_fail@plt+0xe04>
   11cc8:	movw	r3, #37256	; 0x9188
   11ccc:	movt	r3, #2
   11cd0:	ldr	r3, [r3]
   11cd4:	mov	r2, #8
   11cd8:	movw	r1, #37260	; 0x918c
   11cdc:	movt	r1, #2
   11ce0:	mov	r0, r3
   11ce4:	bl	166a4 <__assert_fail@plt+0x57b0>
   11ce8:	mov	r2, r0
   11cec:	movw	r3, #37256	; 0x9188
   11cf0:	movt	r3, #2
   11cf4:	str	r2, [r3]
   11cf8:	movw	r3, #37256	; 0x9188
   11cfc:	movt	r3, #2
   11d00:	ldr	r1, [r3]
   11d04:	movw	r3, #37264	; 0x9190
   11d08:	movt	r3, #2
   11d0c:	ldr	r2, [r3]
   11d10:	add	r0, r2, #1
   11d14:	movw	r3, #37264	; 0x9190
   11d18:	movt	r3, #2
   11d1c:	str	r0, [r3]
   11d20:	lsl	r3, r2, #3
   11d24:	add	r1, r1, r3
   11d28:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   11d2c:	strd	r2, [r1]
   11d30:	movw	r3, #37220	; 0x9164
   11d34:	movt	r3, #2
   11d38:	ldr	r3, [r3]
   11d3c:	mov	r2, r3
   11d40:	mov	r3, #0
   11d44:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   11d48:	cmp	r1, r3
   11d4c:	cmpeq	r0, r2
   11d50:	bls	11d9c <__assert_fail@plt+0xea8>
   11d54:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11d58:	mvn	r0, #0
   11d5c:	mov	r1, #0
   11d60:	cmp	r3, r1
   11d64:	cmpeq	r2, r0
   11d68:	bls	11d8c <__assert_fail@plt+0xe98>
   11d6c:	movw	r0, #33228	; 0x81cc
   11d70:	movt	r0, #1
   11d74:	bl	10e10 <gettext@plt>
   11d78:	mov	r3, r0
   11d7c:	mov	r2, r3
   11d80:	mov	r1, #0
   11d84:	mov	r0, #1
   11d88:	bl	10db0 <error@plt>
   11d8c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11d90:	movw	r3, #37220	; 0x9164
   11d94:	movt	r3, #2
   11d98:	str	r2, [r3]
   11d9c:	nop	{0}
   11da0:	sub	sp, fp, #12
   11da4:	ldrd	r4, [sp]
   11da8:	ldr	fp, [sp, #8]
   11dac:	add	sp, sp, #12
   11db0:	pop	{pc}		; (ldr pc, [sp], #4)
   11db4:	str	fp, [sp, #-8]!
   11db8:	str	lr, [sp, #4]
   11dbc:	add	fp, sp, #4
   11dc0:	sub	sp, sp, #16
   11dc4:	strd	r0, [fp, #-20]	; 0xffffffec
   11dc8:	mov	r3, #1
   11dcc:	strb	r3, [fp, #-5]
   11dd0:	movw	r3, #37240	; 0x9178
   11dd4:	movt	r3, #2
   11dd8:	ldrd	r2, [r3]
   11ddc:	orrs	r3, r2, r3
   11de0:	beq	11e0c <__assert_fail@plt+0xf18>
   11de4:	movw	r0, #33252	; 0x81e4
   11de8:	movt	r0, #1
   11dec:	bl	10e10 <gettext@plt>
   11df0:	mov	r3, r0
   11df4:	mov	r2, r3
   11df8:	mov	r1, #0
   11dfc:	mov	r0, #0
   11e00:	bl	10db0 <error@plt>
   11e04:	mov	r3, #0
   11e08:	strb	r3, [fp, #-5]
   11e0c:	movw	r3, #37240	; 0x9178
   11e10:	movt	r3, #2
   11e14:	ldrd	r0, [fp, #-20]	; 0xffffffec
   11e18:	strd	r0, [r3]
   11e1c:	ldrb	r3, [fp, #-5]
   11e20:	mov	r0, r3
   11e24:	sub	sp, fp, #4
   11e28:	ldr	fp, [sp]
   11e2c:	add	sp, sp, #4
   11e30:	pop	{pc}		; (ldr pc, [sp], #4)
   11e34:	str	fp, [sp, #-8]!
   11e38:	str	lr, [sp, #4]
   11e3c:	add	fp, sp, #4
   11e40:	sub	sp, sp, #16
   11e44:	strd	r0, [fp, #-20]	; 0xffffffec
   11e48:	mov	r3, #1
   11e4c:	strb	r3, [fp, #-5]
   11e50:	movw	r3, #37248	; 0x9180
   11e54:	movt	r3, #2
   11e58:	ldrd	r2, [r3]
   11e5c:	orrs	r3, r2, r3
   11e60:	beq	11e8c <__assert_fail@plt+0xf98>
   11e64:	movw	r0, #33300	; 0x8214
   11e68:	movt	r0, #1
   11e6c:	bl	10e10 <gettext@plt>
   11e70:	mov	r3, r0
   11e74:	mov	r2, r3
   11e78:	mov	r1, #0
   11e7c:	mov	r0, #0
   11e80:	bl	10db0 <error@plt>
   11e84:	mov	r3, #0
   11e88:	strb	r3, [fp, #-5]
   11e8c:	movw	r3, #37248	; 0x9180
   11e90:	movt	r3, #2
   11e94:	ldrd	r0, [fp, #-20]	; 0xffffffec
   11e98:	strd	r0, [r3]
   11e9c:	ldrb	r3, [fp, #-5]
   11ea0:	mov	r0, r3
   11ea4:	sub	sp, fp, #4
   11ea8:	ldr	fp, [sp]
   11eac:	add	sp, sp, #4
   11eb0:	pop	{pc}		; (ldr pc, [sp], #4)
   11eb4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11eb8:	strd	r6, [sp, #8]
   11ebc:	strd	r8, [sp, #16]
   11ec0:	str	fp, [sp, #24]
   11ec4:	str	lr, [sp, #28]
   11ec8:	add	fp, sp, #28
   11ecc:	sub	sp, sp, #56	; 0x38
   11ed0:	str	r0, [fp, #-64]	; 0xffffffc0
   11ed4:	mov	r3, #0
   11ed8:	strb	r3, [fp, #-29]	; 0xffffffe3
   11edc:	mov	r2, #0
   11ee0:	mov	r3, #0
   11ee4:	strd	r2, [fp, #-60]	; 0xffffffc4
   11ee8:	mov	r3, #0
   11eec:	strb	r3, [fp, #-30]	; 0xffffffe2
   11ef0:	mov	r3, #0
   11ef4:	strb	r3, [fp, #-31]	; 0xffffffe1
   11ef8:	mov	r3, #0
   11efc:	str	r3, [fp, #-36]	; 0xffffffdc
   11f00:	mov	r3, #1
   11f04:	strb	r3, [fp, #-37]	; 0xffffffdb
   11f08:	b	122d4 <__assert_fail@plt+0x13e0>
   11f0c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11f10:	ldrb	r3, [r3]
   11f14:	cmp	r3, #44	; 0x2c
   11f18:	beq	11f54 <__assert_fail@plt+0x1060>
   11f1c:	bl	10df8 <__ctype_b_loc@plt>
   11f20:	mov	r3, r0
   11f24:	ldr	r4, [r3]
   11f28:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11f2c:	ldrb	r3, [r3]
   11f30:	mov	r0, r3
   11f34:	bl	11be8 <__assert_fail@plt+0xcf4>
   11f38:	mov	r3, r0
   11f3c:	lsl	r3, r3, #1
   11f40:	add	r3, r4, r3
   11f44:	ldrh	r3, [r3]
   11f48:	and	r3, r3, #1
   11f4c:	cmp	r3, #0
   11f50:	beq	11ff4 <__assert_fail@plt+0x1100>
   11f54:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   11f58:	cmp	r3, #0
   11f5c:	beq	11fe8 <__assert_fail@plt+0x10f4>
   11f60:	ldrb	r3, [fp, #-30]	; 0xffffffe2
   11f64:	cmp	r3, #0
   11f68:	beq	11f9c <__assert_fail@plt+0x10a8>
   11f6c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   11f70:	mov	r0, r2
   11f74:	mov	r1, r3
   11f78:	bl	11db4 <__assert_fail@plt+0xec0>
   11f7c:	mov	r3, r0
   11f80:	eor	r3, r3, #1
   11f84:	uxtb	r3, r3
   11f88:	cmp	r3, #0
   11f8c:	beq	11fe8 <__assert_fail@plt+0x10f4>
   11f90:	mov	r3, #0
   11f94:	strb	r3, [fp, #-37]	; 0xffffffdb
   11f98:	b	122e4 <__assert_fail@plt+0x13f0>
   11f9c:	ldrb	r3, [fp, #-31]	; 0xffffffe1
   11fa0:	cmp	r3, #0
   11fa4:	beq	11fd8 <__assert_fail@plt+0x10e4>
   11fa8:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   11fac:	mov	r0, r2
   11fb0:	mov	r1, r3
   11fb4:	bl	11e34 <__assert_fail@plt+0xf40>
   11fb8:	mov	r3, r0
   11fbc:	eor	r3, r3, #1
   11fc0:	uxtb	r3, r3
   11fc4:	cmp	r3, #0
   11fc8:	beq	11fe8 <__assert_fail@plt+0x10f4>
   11fcc:	mov	r3, #0
   11fd0:	strb	r3, [fp, #-37]	; 0xffffffdb
   11fd4:	b	122e4 <__assert_fail@plt+0x13f0>
   11fd8:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   11fdc:	mov	r0, r2
   11fe0:	mov	r1, r3
   11fe4:	bl	11c10 <__assert_fail@plt+0xd1c>
   11fe8:	mov	r3, #0
   11fec:	strb	r3, [fp, #-29]	; 0xffffffe3
   11ff0:	b	122c8 <__assert_fail@plt+0x13d4>
   11ff4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11ff8:	ldrb	r3, [r3]
   11ffc:	cmp	r3, #47	; 0x2f
   12000:	bne	12058 <__assert_fail@plt+0x1164>
   12004:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   12008:	cmp	r3, #0
   1200c:	beq	12044 <__assert_fail@plt+0x1150>
   12010:	movw	r0, #33348	; 0x8244
   12014:	movt	r0, #1
   12018:	bl	10e10 <gettext@plt>
   1201c:	mov	r4, r0
   12020:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12024:	bl	15b2c <__assert_fail@plt+0x4c38>
   12028:	mov	r3, r0
   1202c:	mov	r2, r4
   12030:	mov	r1, #0
   12034:	mov	r0, #0
   12038:	bl	10db0 <error@plt>
   1203c:	mov	r3, #0
   12040:	strb	r3, [fp, #-37]	; 0xffffffdb
   12044:	mov	r3, #1
   12048:	strb	r3, [fp, #-30]	; 0xffffffe2
   1204c:	mov	r3, #0
   12050:	strb	r3, [fp, #-31]	; 0xffffffe1
   12054:	b	122c8 <__assert_fail@plt+0x13d4>
   12058:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1205c:	ldrb	r3, [r3]
   12060:	cmp	r3, #43	; 0x2b
   12064:	bne	120bc <__assert_fail@plt+0x11c8>
   12068:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1206c:	cmp	r3, #0
   12070:	beq	120a8 <__assert_fail@plt+0x11b4>
   12074:	movw	r0, #33392	; 0x8270
   12078:	movt	r0, #1
   1207c:	bl	10e10 <gettext@plt>
   12080:	mov	r4, r0
   12084:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12088:	bl	15b2c <__assert_fail@plt+0x4c38>
   1208c:	mov	r3, r0
   12090:	mov	r2, r4
   12094:	mov	r1, #0
   12098:	mov	r0, #0
   1209c:	bl	10db0 <error@plt>
   120a0:	mov	r3, #0
   120a4:	strb	r3, [fp, #-37]	; 0xffffffdb
   120a8:	mov	r3, #1
   120ac:	strb	r3, [fp, #-31]	; 0xffffffe1
   120b0:	mov	r3, #0
   120b4:	strb	r3, [fp, #-30]	; 0xffffffe2
   120b8:	b	122c8 <__assert_fail@plt+0x13d4>
   120bc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   120c0:	ldrb	r3, [r3]
   120c4:	sub	r3, r3, #48	; 0x30
   120c8:	cmp	r3, #9
   120cc:	bhi	12290 <__assert_fail@plt+0x139c>
   120d0:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   120d4:	eor	r3, r3, #1
   120d8:	uxtb	r3, r3
   120dc:	cmp	r3, #0
   120e0:	beq	12100 <__assert_fail@plt+0x120c>
   120e4:	mov	r2, #0
   120e8:	mov	r3, #0
   120ec:	strd	r2, [fp, #-60]	; 0xffffffc4
   120f0:	mov	r3, #1
   120f4:	strb	r3, [fp, #-29]	; 0xffffffe3
   120f8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   120fc:	str	r3, [fp, #-36]	; 0xffffffdc
   12100:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   12104:	add	r1, pc, #700	; 0x2bc
   12108:	ldrd	r0, [r1]
   1210c:	cmp	r3, r1
   12110:	cmpeq	r2, r0
   12114:	bhi	12204 <__assert_fail@plt+0x1310>
   12118:	ldrd	r4, [fp, #-60]	; 0xffffffc4
   1211c:	mov	r2, r4
   12120:	mov	r3, r5
   12124:	mov	r0, #0
   12128:	mov	r1, #0
   1212c:	lsl	r1, r3, #2
   12130:	orr	r1, r1, r2, lsr #30
   12134:	lsl	r0, r2, #2
   12138:	mov	r2, r0
   1213c:	mov	r3, r1
   12140:	adds	r2, r2, r4
   12144:	adc	r3, r3, r5
   12148:	adds	r1, r2, r2
   1214c:	str	r1, [fp, #-76]	; 0xffffffb4
   12150:	adc	r3, r3, r3
   12154:	str	r3, [fp, #-72]	; 0xffffffb8
   12158:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   1215c:	mov	r0, r2
   12160:	mov	r1, r3
   12164:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12168:	ldrb	r3, [r3]
   1216c:	sub	r3, r3, #48	; 0x30
   12170:	mov	r2, r3
   12174:	asr	r3, r2, #31
   12178:	adds	r6, r0, r2
   1217c:	adc	r7, r1, r3
   12180:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   12184:	cmp	r7, r3
   12188:	cmpeq	r6, r2
   1218c:	bcc	12204 <__assert_fail@plt+0x1310>
   12190:	ldrd	r4, [fp, #-60]	; 0xffffffc4
   12194:	mov	r2, r4
   12198:	mov	r3, r5
   1219c:	mov	r0, #0
   121a0:	mov	r1, #0
   121a4:	lsl	r1, r3, #2
   121a8:	orr	r1, r1, r2, lsr #30
   121ac:	lsl	r0, r2, #2
   121b0:	mov	r2, r0
   121b4:	mov	r3, r1
   121b8:	adds	r2, r2, r4
   121bc:	adc	r3, r3, r5
   121c0:	adds	r1, r2, r2
   121c4:	str	r1, [fp, #-84]	; 0xffffffac
   121c8:	adc	r3, r3, r3
   121cc:	str	r3, [fp, #-80]	; 0xffffffb0
   121d0:	ldrd	r2, [fp, #-84]	; 0xffffffac
   121d4:	mov	r0, r2
   121d8:	mov	r1, r3
   121dc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   121e0:	ldrb	r3, [r3]
   121e4:	sub	r3, r3, #48	; 0x30
   121e8:	mov	r2, r3
   121ec:	asr	r3, r2, #31
   121f0:	adds	r8, r0, r2
   121f4:	adc	r9, r1, r3
   121f8:	strd	r8, [fp, #-60]	; 0xffffffc4
   121fc:	mov	r3, #0
   12200:	b	12208 <__assert_fail@plt+0x1314>
   12204:	mov	r3, #1
   12208:	cmp	r3, #0
   1220c:	beq	122c8 <__assert_fail@plt+0x13d4>
   12210:	movw	r1, #33436	; 0x829c
   12214:	movt	r1, #1
   12218:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1221c:	bl	10ee8 <strspn@plt>
   12220:	str	r0, [fp, #-44]	; 0xffffffd4
   12224:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12228:	mov	r1, r3
   1222c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12230:	bl	16b70 <__assert_fail@plt+0x5c7c>
   12234:	mov	r3, r0
   12238:	str	r3, [fp, #-48]	; 0xffffffd0
   1223c:	movw	r0, #33448	; 0x82a8
   12240:	movt	r0, #1
   12244:	bl	10e10 <gettext@plt>
   12248:	mov	r4, r0
   1224c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12250:	bl	15b2c <__assert_fail@plt+0x4c38>
   12254:	mov	r3, r0
   12258:	mov	r2, r4
   1225c:	mov	r1, #0
   12260:	mov	r0, #0
   12264:	bl	10db0 <error@plt>
   12268:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1226c:	bl	13038 <__assert_fail@plt+0x2144>
   12270:	mov	r3, #0
   12274:	strb	r3, [fp, #-37]	; 0xffffffdb
   12278:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1227c:	sub	r3, r3, #1
   12280:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12284:	add	r3, r2, r3
   12288:	str	r3, [fp, #-64]	; 0xffffffc0
   1228c:	b	122c8 <__assert_fail@plt+0x13d4>
   12290:	movw	r0, #33476	; 0x82c4
   12294:	movt	r0, #1
   12298:	bl	10e10 <gettext@plt>
   1229c:	mov	r4, r0
   122a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   122a4:	bl	15b2c <__assert_fail@plt+0x4c38>
   122a8:	mov	r3, r0
   122ac:	mov	r2, r4
   122b0:	mov	r1, #0
   122b4:	mov	r0, #0
   122b8:	bl	10db0 <error@plt>
   122bc:	mov	r3, #0
   122c0:	strb	r3, [fp, #-37]	; 0xffffffdb
   122c4:	b	122e4 <__assert_fail@plt+0x13f0>
   122c8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   122cc:	add	r3, r3, #1
   122d0:	str	r3, [fp, #-64]	; 0xffffffc0
   122d4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   122d8:	ldrb	r3, [r3]
   122dc:	cmp	r3, #0
   122e0:	bne	11f0c <__assert_fail@plt+0x1018>
   122e4:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   122e8:	cmp	r3, #0
   122ec:	beq	1238c <__assert_fail@plt+0x1498>
   122f0:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   122f4:	cmp	r3, #0
   122f8:	beq	1238c <__assert_fail@plt+0x1498>
   122fc:	ldrb	r3, [fp, #-30]	; 0xffffffe2
   12300:	cmp	r3, #0
   12304:	beq	1233c <__assert_fail@plt+0x1448>
   12308:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   1230c:	mov	r0, r2
   12310:	mov	r1, r3
   12314:	bl	11db4 <__assert_fail@plt+0xec0>
   12318:	mov	r3, r0
   1231c:	mov	r2, r3
   12320:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   12324:	and	r3, r3, r2
   12328:	cmp	r3, #0
   1232c:	movne	r3, #1
   12330:	moveq	r3, #0
   12334:	strb	r3, [fp, #-37]	; 0xffffffdb
   12338:	b	1238c <__assert_fail@plt+0x1498>
   1233c:	ldrb	r3, [fp, #-31]	; 0xffffffe1
   12340:	cmp	r3, #0
   12344:	beq	1237c <__assert_fail@plt+0x1488>
   12348:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   1234c:	mov	r0, r2
   12350:	mov	r1, r3
   12354:	bl	11e34 <__assert_fail@plt+0xf40>
   12358:	mov	r3, r0
   1235c:	mov	r2, r3
   12360:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   12364:	and	r3, r3, r2
   12368:	cmp	r3, #0
   1236c:	movne	r3, #1
   12370:	moveq	r3, #0
   12374:	strb	r3, [fp, #-37]	; 0xffffffdb
   12378:	b	1238c <__assert_fail@plt+0x1498>
   1237c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   12380:	mov	r0, r2
   12384:	mov	r1, r3
   12388:	bl	11c10 <__assert_fail@plt+0xd1c>
   1238c:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   12390:	eor	r3, r3, #1
   12394:	uxtb	r3, r3
   12398:	cmp	r3, #0
   1239c:	beq	123a8 <__assert_fail@plt+0x14b4>
   123a0:	mov	r0, #1
   123a4:	bl	10e04 <exit@plt>
   123a8:	nop	{0}
   123ac:	sub	sp, fp, #28
   123b0:	ldrd	r4, [sp]
   123b4:	ldrd	r6, [sp, #8]
   123b8:	ldrd	r8, [sp, #16]
   123bc:	ldr	fp, [sp, #24]
   123c0:	add	sp, sp, #28
   123c4:	pop	{pc}		; (ldr pc, [sp], #4)
   123c8:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   123cc:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   123d0:	str	fp, [sp, #-8]!
   123d4:	str	lr, [sp, #4]
   123d8:	add	fp, sp, #4
   123dc:	sub	sp, sp, #24
   123e0:	str	r0, [fp, #-24]	; 0xffffffe8
   123e4:	str	r1, [fp, #-28]	; 0xffffffe4
   123e8:	mov	r2, #0
   123ec:	mov	r3, #0
   123f0:	strd	r2, [fp, #-12]
   123f4:	mov	r3, #0
   123f8:	str	r3, [fp, #-16]
   123fc:	b	124a4 <__assert_fail@plt+0x15b0>
   12400:	ldr	r3, [fp, #-16]
   12404:	lsl	r3, r3, #3
   12408:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1240c:	add	r3, r2, r3
   12410:	ldrd	r2, [r3]
   12414:	orrs	r3, r2, r3
   12418:	bne	1243c <__assert_fail@plt+0x1548>
   1241c:	movw	r0, #33520	; 0x82f0
   12420:	movt	r0, #1
   12424:	bl	10e10 <gettext@plt>
   12428:	mov	r3, r0
   1242c:	mov	r2, r3
   12430:	mov	r1, #0
   12434:	mov	r0, #1
   12438:	bl	10db0 <error@plt>
   1243c:	ldr	r3, [fp, #-16]
   12440:	lsl	r3, r3, #3
   12444:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12448:	add	r3, r2, r3
   1244c:	ldrd	r2, [r3]
   12450:	ldrd	r0, [fp, #-12]
   12454:	cmp	r1, r3
   12458:	cmpeq	r0, r2
   1245c:	bcc	12480 <__assert_fail@plt+0x158c>
   12460:	movw	r0, #33544	; 0x8308
   12464:	movt	r0, #1
   12468:	bl	10e10 <gettext@plt>
   1246c:	mov	r3, r0
   12470:	mov	r2, r3
   12474:	mov	r1, #0
   12478:	mov	r0, #1
   1247c:	bl	10db0 <error@plt>
   12480:	ldr	r3, [fp, #-16]
   12484:	lsl	r3, r3, #3
   12488:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1248c:	add	r3, r2, r3
   12490:	ldrd	r2, [r3]
   12494:	strd	r2, [fp, #-12]
   12498:	ldr	r3, [fp, #-16]
   1249c:	add	r3, r3, #1
   124a0:	str	r3, [fp, #-16]
   124a4:	ldr	r2, [fp, #-16]
   124a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   124ac:	cmp	r2, r3
   124b0:	bcc	12400 <__assert_fail@plt+0x150c>
   124b4:	movw	r3, #37248	; 0x9180
   124b8:	movt	r3, #2
   124bc:	ldrd	r2, [r3]
   124c0:	orrs	r3, r2, r3
   124c4:	beq	124fc <__assert_fail@plt+0x1608>
   124c8:	movw	r3, #37240	; 0x9178
   124cc:	movt	r3, #2
   124d0:	ldrd	r2, [r3]
   124d4:	orrs	r3, r2, r3
   124d8:	beq	124fc <__assert_fail@plt+0x1608>
   124dc:	movw	r0, #33572	; 0x8324
   124e0:	movt	r0, #1
   124e4:	bl	10e10 <gettext@plt>
   124e8:	mov	r3, r0
   124ec:	mov	r2, r3
   124f0:	mov	r1, #0
   124f4:	mov	r0, #1
   124f8:	bl	10db0 <error@plt>
   124fc:	nop	{0}
   12500:	sub	sp, fp, #4
   12504:	ldr	fp, [sp]
   12508:	add	sp, sp, #4
   1250c:	pop	{pc}		; (ldr pc, [sp], #4)
   12510:	str	fp, [sp, #-8]!
   12514:	str	lr, [sp, #4]
   12518:	add	fp, sp, #4
   1251c:	movw	r3, #37256	; 0x9188
   12520:	movt	r3, #2
   12524:	ldr	r2, [r3]
   12528:	movw	r3, #37264	; 0x9190
   1252c:	movt	r3, #2
   12530:	ldr	r3, [r3]
   12534:	mov	r1, r3
   12538:	mov	r0, r2
   1253c:	bl	123d0 <__assert_fail@plt+0x14dc>
   12540:	movw	r3, #37264	; 0x9190
   12544:	movt	r3, #2
   12548:	ldr	r3, [r3]
   1254c:	cmp	r3, #0
   12550:	bne	125d0 <__assert_fail@plt+0x16dc>
   12554:	movw	r3, #37240	; 0x9178
   12558:	movt	r3, #2
   1255c:	ldrd	r2, [r3]
   12560:	orrs	r3, r2, r3
   12564:	bne	12594 <__assert_fail@plt+0x16a0>
   12568:	movw	r3, #37248	; 0x9180
   1256c:	movt	r3, #2
   12570:	ldrd	r2, [r3]
   12574:	orrs	r3, r2, r3
   12578:	beq	1258c <__assert_fail@plt+0x1698>
   1257c:	movw	r3, #37248	; 0x9180
   12580:	movt	r3, #2
   12584:	ldrd	r2, [r3]
   12588:	b	125a0 <__assert_fail@plt+0x16ac>
   1258c:	mov	r2, #8
   12590:	b	125a0 <__assert_fail@plt+0x16ac>
   12594:	movw	r3, #37240	; 0x9178
   12598:	movt	r3, #2
   1259c:	ldrd	r2, [r3]
   125a0:	movw	r3, #37220	; 0x9164
   125a4:	movt	r3, #2
   125a8:	str	r2, [r3]
   125ac:	movw	r3, #37220	; 0x9164
   125b0:	movt	r3, #2
   125b4:	ldr	r3, [r3]
   125b8:	mov	r0, r3
   125bc:	mov	r1, #0
   125c0:	movw	r3, #37232	; 0x9170
   125c4:	movt	r3, #2
   125c8:	strd	r0, [r3]
   125cc:	b	12640 <__assert_fail@plt+0x174c>
   125d0:	movw	r3, #37264	; 0x9190
   125d4:	movt	r3, #2
   125d8:	ldr	r3, [r3]
   125dc:	cmp	r3, #1
   125e0:	bne	1262c <__assert_fail@plt+0x1738>
   125e4:	movw	r3, #37240	; 0x9178
   125e8:	movt	r3, #2
   125ec:	ldrd	r2, [r3]
   125f0:	orrs	r3, r2, r3
   125f4:	bne	1262c <__assert_fail@plt+0x1738>
   125f8:	movw	r3, #37248	; 0x9180
   125fc:	movt	r3, #2
   12600:	ldrd	r2, [r3]
   12604:	orrs	r3, r2, r3
   12608:	bne	1262c <__assert_fail@plt+0x1738>
   1260c:	movw	r3, #37256	; 0x9188
   12610:	movt	r3, #2
   12614:	ldr	r3, [r3]
   12618:	ldrd	r0, [r3]
   1261c:	movw	r3, #37232	; 0x9170
   12620:	movt	r3, #2
   12624:	strd	r0, [r3]
   12628:	b	12640 <__assert_fail@plt+0x174c>
   1262c:	movw	r3, #37232	; 0x9170
   12630:	movt	r3, #2
   12634:	mov	r0, #0
   12638:	mov	r1, #0
   1263c:	strd	r0, [r3]
   12640:	nop	{0}
   12644:	sub	sp, fp, #4
   12648:	ldr	fp, [sp]
   1264c:	add	sp, sp, #4
   12650:	pop	{pc}		; (ldr pc, [sp], #4)
   12654:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12658:	strd	r6, [sp, #8]
   1265c:	strd	r8, [sp, #16]
   12660:	str	fp, [sp, #24]
   12664:	str	lr, [sp, #28]
   12668:	add	fp, sp, #28
   1266c:	sub	sp, sp, #56	; 0x38
   12670:	strd	r0, [fp, #-52]	; 0xffffffcc
   12674:	str	r2, [fp, #-56]	; 0xffffffc8
   12678:	str	r3, [fp, #-60]	; 0xffffffc4
   1267c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12680:	mov	r2, #0
   12684:	strb	r2, [r3]
   12688:	movw	r3, #37232	; 0x9170
   1268c:	movt	r3, #2
   12690:	ldrd	r2, [r3]
   12694:	orrs	r3, r2, r3
   12698:	beq	12738 <__assert_fail@plt+0x1844>
   1269c:	movw	r3, #37232	; 0x9170
   126a0:	movt	r3, #2
   126a4:	ldrd	r6, [r3]
   126a8:	movw	r3, #37232	; 0x9170
   126ac:	movt	r3, #2
   126b0:	ldrd	r2, [r3]
   126b4:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   126b8:	bl	17ab8 <__assert_fail@plt+0x6bc4>
   126bc:	subs	r1, r6, r2
   126c0:	str	r1, [fp, #-68]	; 0xffffffbc
   126c4:	sbc	r3, r7, r3
   126c8:	str	r3, [fp, #-64]	; 0xffffffc0
   126cc:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   126d0:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   126d4:	mov	ip, r0
   126d8:	adds	r4, ip, r2
   126dc:	adc	r5, r1, r3
   126e0:	b	12854 <__assert_fail@plt+0x1960>
   126e4:	movw	r3, #37256	; 0x9188
   126e8:	movt	r3, #2
   126ec:	ldr	r2, [r3]
   126f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   126f4:	ldr	r3, [r3]
   126f8:	lsl	r3, r3, #3
   126fc:	add	r3, r2, r3
   12700:	ldrd	r2, [r3]
   12704:	strd	r2, [fp, #-36]	; 0xffffffdc
   12708:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   1270c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   12710:	cmp	r1, r3
   12714:	cmpeq	r0, r2
   12718:	bcs	12724 <__assert_fail@plt+0x1830>
   1271c:	ldrd	r4, [fp, #-36]	; 0xffffffdc
   12720:	b	12854 <__assert_fail@plt+0x1960>
   12724:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12728:	ldr	r3, [r3]
   1272c:	add	r2, r3, #1
   12730:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12734:	str	r2, [r3]
   12738:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1273c:	ldr	r2, [r3]
   12740:	movw	r3, #37264	; 0x9190
   12744:	movt	r3, #2
   12748:	ldr	r3, [r3]
   1274c:	cmp	r2, r3
   12750:	bcc	126e4 <__assert_fail@plt+0x17f0>
   12754:	movw	r3, #37240	; 0x9178
   12758:	movt	r3, #2
   1275c:	ldrd	r2, [r3]
   12760:	orrs	r3, r2, r3
   12764:	beq	127b0 <__assert_fail@plt+0x18bc>
   12768:	movw	r3, #37240	; 0x9178
   1276c:	movt	r3, #2
   12770:	ldrd	r6, [r3]
   12774:	movw	r3, #37240	; 0x9178
   12778:	movt	r3, #2
   1277c:	ldrd	r2, [r3]
   12780:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   12784:	bl	17ab8 <__assert_fail@plt+0x6bc4>
   12788:	subs	r1, r6, r2
   1278c:	str	r1, [fp, #-76]	; 0xffffffb4
   12790:	sbc	r3, r7, r3
   12794:	str	r3, [fp, #-72]	; 0xffffffb8
   12798:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   1279c:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   127a0:	mov	ip, r0
   127a4:	adds	r4, ip, r2
   127a8:	adc	r5, r1, r3
   127ac:	b	12854 <__assert_fail@plt+0x1960>
   127b0:	movw	r3, #37248	; 0x9180
   127b4:	movt	r3, #2
   127b8:	ldrd	r2, [r3]
   127bc:	orrs	r3, r2, r3
   127c0:	beq	12840 <__assert_fail@plt+0x194c>
   127c4:	movw	r3, #37256	; 0x9188
   127c8:	movt	r3, #2
   127cc:	ldr	r2, [r3]
   127d0:	movw	r3, #37264	; 0x9190
   127d4:	movt	r3, #2
   127d8:	ldr	r3, [r3]
   127dc:	sub	r3, r3, #-536870911	; 0xe0000001
   127e0:	lsl	r3, r3, #3
   127e4:	add	r3, r2, r3
   127e8:	ldrd	r2, [r3]
   127ec:	strd	r2, [fp, #-44]	; 0xffffffd4
   127f0:	movw	r3, #37248	; 0x9180
   127f4:	movt	r3, #2
   127f8:	ldrd	r6, [r3]
   127fc:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   12800:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   12804:	subs	ip, r0, r2
   12808:	str	ip, [fp, #-84]	; 0xffffffac
   1280c:	sbc	r3, r1, r3
   12810:	str	r3, [fp, #-80]	; 0xffffffb0
   12814:	movw	r3, #37248	; 0x9180
   12818:	movt	r3, #2
   1281c:	ldrd	r2, [r3]
   12820:	ldrd	r0, [fp, #-84]	; 0xffffffac
   12824:	bl	17ab8 <__assert_fail@plt+0x6bc4>
   12828:	subs	r8, r6, r2
   1282c:	sbc	r9, r7, r3
   12830:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   12834:	adds	r4, r8, r2
   12838:	adc	r5, r9, r3
   1283c:	b	12854 <__assert_fail@plt+0x1960>
   12840:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12844:	mov	r2, #1
   12848:	strb	r2, [r3]
   1284c:	mov	r4, #0
   12850:	mov	r5, #0
   12854:	mov	r2, r4
   12858:	mov	r3, r5
   1285c:	mov	r0, r2
   12860:	mov	r1, r3
   12864:	sub	sp, fp, #28
   12868:	ldrd	r4, [sp]
   1286c:	ldrd	r6, [sp, #8]
   12870:	ldrd	r8, [sp, #16]
   12874:	ldr	fp, [sp, #24]
   12878:	add	sp, sp, #28
   1287c:	pop	{pc}		; (ldr pc, [sp], #4)
   12880:	push	{fp}		; (str fp, [sp, #-4]!)
   12884:	add	fp, sp, #0
   12888:	sub	sp, sp, #12
   1288c:	str	r0, [fp, #-8]
   12890:	movw	r3, #37272	; 0x9198
   12894:	movt	r3, #2
   12898:	mov	r2, #0
   1289c:	strb	r2, [r3]
   128a0:	ldr	r3, [fp, #-8]
   128a4:	cmp	r3, #0
   128a8:	bne	128c4 <__assert_fail@plt+0x19d0>
   128ac:	movw	r3, #37268	; 0x9194
   128b0:	movt	r3, #2
   128b4:	movw	r2, #37096	; 0x90e8
   128b8:	movt	r2, #2
   128bc:	str	r2, [r3]
   128c0:	b	128d4 <__assert_fail@plt+0x19e0>
   128c4:	movw	r3, #37268	; 0x9194
   128c8:	movt	r3, #2
   128cc:	ldr	r2, [fp, #-8]
   128d0:	str	r2, [r3]
   128d4:	nop	{0}
   128d8:	add	sp, fp, #0
   128dc:	pop	{fp}		; (ldr fp, [sp], #4)
   128e0:	bx	lr
   128e4:	str	r4, [sp, #-12]!
   128e8:	str	fp, [sp, #4]
   128ec:	str	lr, [sp, #8]
   128f0:	add	fp, sp, #8
   128f4:	sub	sp, sp, #20
   128f8:	str	r0, [fp, #-24]	; 0xffffffe8
   128fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12900:	cmp	r3, #0
   12904:	beq	12adc <__assert_fail@plt+0x1be8>
   12908:	movw	r3, #37276	; 0x919c
   1290c:	movt	r3, #2
   12910:	ldr	r3, [r3]
   12914:	cmp	r3, #0
   12918:	bne	1293c <__assert_fail@plt+0x1a48>
   1291c:	movw	r3, #34092	; 0x852c
   12920:	movt	r3, #1
   12924:	mov	r2, #340	; 0x154
   12928:	movw	r1, #33620	; 0x8354
   1292c:	movt	r1, #1
   12930:	movw	r0, #33640	; 0x8368
   12934:	movt	r0, #1
   12938:	bl	10ef4 <__assert_fail@plt>
   1293c:	bl	10e34 <__errno_location@plt>
   12940:	mov	r3, r0
   12944:	ldr	r3, [r3]
   12948:	str	r3, [fp, #-16]
   1294c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12950:	bl	10d98 <ferror_unlocked@plt>
   12954:	mov	r3, r0
   12958:	cmp	r3, #0
   1295c:	bne	12968 <__assert_fail@plt+0x1a74>
   12960:	mov	r3, #0
   12964:	str	r3, [fp, #-16]
   12968:	movw	r3, #37276	; 0x919c
   1296c:	movt	r3, #2
   12970:	ldr	r3, [r3]
   12974:	movw	r1, #33224	; 0x81c8
   12978:	movt	r1, #1
   1297c:	mov	r0, r3
   12980:	bl	10cb4 <strcmp@plt>
   12984:	mov	r3, r0
   12988:	cmp	r3, #0
   1298c:	bne	1299c <__assert_fail@plt+0x1aa8>
   12990:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12994:	bl	10ea0 <clearerr_unlocked@plt>
   12998:	b	129c0 <__assert_fail@plt+0x1acc>
   1299c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   129a0:	bl	12e74 <__assert_fail@plt+0x1f80>
   129a4:	mov	r3, r0
   129a8:	cmp	r3, #0
   129ac:	beq	129c0 <__assert_fail@plt+0x1acc>
   129b0:	bl	10e34 <__errno_location@plt>
   129b4:	mov	r3, r0
   129b8:	ldr	r3, [r3]
   129bc:	str	r3, [fp, #-16]
   129c0:	ldr	r3, [fp, #-16]
   129c4:	cmp	r3, #0
   129c8:	beq	12adc <__assert_fail@plt+0x1be8>
   129cc:	movw	r3, #37276	; 0x919c
   129d0:	movt	r3, #2
   129d4:	ldr	r3, [r3]
   129d8:	mov	r2, r3
   129dc:	mov	r1, #3
   129e0:	mov	r0, #0
   129e4:	bl	15830 <__assert_fail@plt+0x493c>
   129e8:	mov	r3, r0
   129ec:	movw	r2, #33652	; 0x8374
   129f0:	movt	r2, #1
   129f4:	ldr	r1, [fp, #-16]
   129f8:	mov	r0, #0
   129fc:	bl	10db0 <error@plt>
   12a00:	movw	r3, #37224	; 0x9168
   12a04:	movt	r3, #2
   12a08:	mov	r2, #1
   12a0c:	str	r2, [r3]
   12a10:	b	12adc <__assert_fail@plt+0x1be8>
   12a14:	movw	r1, #33224	; 0x81c8
   12a18:	movt	r1, #1
   12a1c:	ldr	r0, [fp, #-20]	; 0xffffffec
   12a20:	bl	10cb4 <strcmp@plt>
   12a24:	mov	r3, r0
   12a28:	cmp	r3, #0
   12a2c:	bne	12a54 <__assert_fail@plt+0x1b60>
   12a30:	movw	r3, #37272	; 0x9198
   12a34:	movt	r3, #2
   12a38:	mov	r2, #1
   12a3c:	strb	r2, [r3]
   12a40:	movw	r3, #37200	; 0x9150
   12a44:	movt	r3, #2
   12a48:	ldr	r3, [r3]
   12a4c:	str	r3, [fp, #-24]	; 0xffffffe8
   12a50:	b	12a68 <__assert_fail@plt+0x1b74>
   12a54:	movw	r1, #33656	; 0x8378
   12a58:	movt	r1, #1
   12a5c:	ldr	r0, [fp, #-20]	; 0xffffffec
   12a60:	bl	10eac <fopen64@plt>
   12a64:	str	r0, [fp, #-24]	; 0xffffffe8
   12a68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a6c:	cmp	r3, #0
   12a70:	beq	12a98 <__assert_fail@plt+0x1ba4>
   12a74:	movw	r3, #37276	; 0x919c
   12a78:	movt	r3, #2
   12a7c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12a80:	str	r2, [r3]
   12a84:	mov	r1, #2
   12a88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12a8c:	bl	12e0c <__assert_fail@plt+0x1f18>
   12a90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a94:	b	12b10 <__assert_fail@plt+0x1c1c>
   12a98:	bl	10e34 <__errno_location@plt>
   12a9c:	mov	r3, r0
   12aa0:	ldr	r4, [r3]
   12aa4:	ldr	r2, [fp, #-20]	; 0xffffffec
   12aa8:	mov	r1, #3
   12aac:	mov	r0, #0
   12ab0:	bl	15830 <__assert_fail@plt+0x493c>
   12ab4:	mov	r3, r0
   12ab8:	movw	r2, #33652	; 0x8374
   12abc:	movt	r2, #1
   12ac0:	mov	r1, r4
   12ac4:	mov	r0, #0
   12ac8:	bl	10db0 <error@plt>
   12acc:	movw	r3, #37224	; 0x9168
   12ad0:	movt	r3, #2
   12ad4:	mov	r2, #1
   12ad8:	str	r2, [r3]
   12adc:	movw	r3, #37268	; 0x9194
   12ae0:	movt	r3, #2
   12ae4:	ldr	r2, [r3]
   12ae8:	add	r1, r2, #4
   12aec:	movw	r3, #37268	; 0x9194
   12af0:	movt	r3, #2
   12af4:	str	r1, [r3]
   12af8:	ldr	r3, [r2]
   12afc:	str	r3, [fp, #-20]	; 0xffffffec
   12b00:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b04:	cmp	r3, #0
   12b08:	bne	12a14 <__assert_fail@plt+0x1b20>
   12b0c:	mov	r3, #0
   12b10:	mov	r0, r3
   12b14:	sub	sp, fp, #8
   12b18:	ldr	r4, [sp]
   12b1c:	ldr	fp, [sp, #4]
   12b20:	add	sp, sp, #8
   12b24:	pop	{pc}		; (ldr pc, [sp], #4)
   12b28:	str	fp, [sp, #-8]!
   12b2c:	str	lr, [sp, #4]
   12b30:	add	fp, sp, #4
   12b34:	movw	r3, #37272	; 0x9198
   12b38:	movt	r3, #2
   12b3c:	ldrb	r3, [r3]
   12b40:	cmp	r3, #0
   12b44:	beq	12b88 <__assert_fail@plt+0x1c94>
   12b48:	movw	r3, #37200	; 0x9150
   12b4c:	movt	r3, #2
   12b50:	ldr	r3, [r3]
   12b54:	mov	r0, r3
   12b58:	bl	12e74 <__assert_fail@plt+0x1f80>
   12b5c:	mov	r3, r0
   12b60:	cmp	r3, #0
   12b64:	beq	12b88 <__assert_fail@plt+0x1c94>
   12b68:	bl	10e34 <__errno_location@plt>
   12b6c:	mov	r3, r0
   12b70:	ldr	r3, [r3]
   12b74:	movw	r2, #33224	; 0x81c8
   12b78:	movt	r2, #1
   12b7c:	mov	r1, r3
   12b80:	mov	r0, #1
   12b84:	bl	10db0 <error@plt>
   12b88:	nop	{0}
   12b8c:	sub	sp, fp, #4
   12b90:	ldr	fp, [sp]
   12b94:	add	sp, sp, #4
   12b98:	pop	{pc}		; (ldr pc, [sp], #4)
   12b9c:	str	fp, [sp, #-8]!
   12ba0:	str	lr, [sp, #4]
   12ba4:	add	fp, sp, #4
   12ba8:	movw	r0, #33660	; 0x837c
   12bac:	movt	r0, #1
   12bb0:	bl	10e10 <gettext@plt>
   12bb4:	mov	r2, r0
   12bb8:	movw	r3, #37204	; 0x9154
   12bbc:	movt	r3, #2
   12bc0:	ldr	r3, [r3]
   12bc4:	mov	r1, r3
   12bc8:	mov	r0, r2
   12bcc:	bl	10c9c <fputs_unlocked@plt>
   12bd0:	movw	r0, #33724	; 0x83bc
   12bd4:	movt	r0, #1
   12bd8:	bl	10e10 <gettext@plt>
   12bdc:	mov	r2, r0
   12be0:	movw	r3, #37204	; 0x9154
   12be4:	movt	r3, #2
   12be8:	ldr	r3, [r3]
   12bec:	mov	r1, r3
   12bf0:	mov	r0, r2
   12bf4:	bl	10c9c <fputs_unlocked@plt>
   12bf8:	nop	{0}
   12bfc:	sub	sp, fp, #4
   12c00:	ldr	fp, [sp]
   12c04:	add	sp, sp, #4
   12c08:	pop	{pc}		; (ldr pc, [sp], #4)
   12c0c:	push	{fp}		; (str fp, [sp, #-4]!)
   12c10:	add	fp, sp, #0
   12c14:	sub	sp, sp, #12
   12c18:	str	r0, [fp, #-8]
   12c1c:	movw	r3, #37280	; 0x91a0
   12c20:	movt	r3, #2
   12c24:	ldr	r2, [fp, #-8]
   12c28:	str	r2, [r3]
   12c2c:	nop	{0}
   12c30:	add	sp, fp, #0
   12c34:	pop	{fp}		; (ldr fp, [sp], #4)
   12c38:	bx	lr
   12c3c:	push	{fp}		; (str fp, [sp, #-4]!)
   12c40:	add	fp, sp, #0
   12c44:	sub	sp, sp, #12
   12c48:	mov	r3, r0
   12c4c:	strb	r3, [fp, #-5]
   12c50:	movw	r3, #37284	; 0x91a4
   12c54:	movt	r3, #2
   12c58:	ldrb	r2, [fp, #-5]
   12c5c:	strb	r2, [r3]
   12c60:	nop	{0}
   12c64:	add	sp, fp, #0
   12c68:	pop	{fp}		; (ldr fp, [sp], #4)
   12c6c:	bx	lr
   12c70:	str	r4, [sp, #-12]!
   12c74:	str	fp, [sp, #4]
   12c78:	str	lr, [sp, #8]
   12c7c:	add	fp, sp, #8
   12c80:	sub	sp, sp, #20
   12c84:	movw	r3, #37204	; 0x9154
   12c88:	movt	r3, #2
   12c8c:	ldr	r3, [r3]
   12c90:	mov	r0, r3
   12c94:	bl	16f30 <__assert_fail@plt+0x603c>
   12c98:	mov	r3, r0
   12c9c:	cmp	r3, #0
   12ca0:	beq	12d74 <__assert_fail@plt+0x1e80>
   12ca4:	movw	r3, #37284	; 0x91a4
   12ca8:	movt	r3, #2
   12cac:	ldrb	r3, [r3]
   12cb0:	eor	r3, r3, #1
   12cb4:	uxtb	r3, r3
   12cb8:	cmp	r3, #0
   12cbc:	bne	12cd4 <__assert_fail@plt+0x1de0>
   12cc0:	bl	10e34 <__errno_location@plt>
   12cc4:	mov	r3, r0
   12cc8:	ldr	r3, [r3]
   12ccc:	cmp	r3, #32
   12cd0:	beq	12d74 <__assert_fail@plt+0x1e80>
   12cd4:	movw	r0, #34120	; 0x8548
   12cd8:	movt	r0, #1
   12cdc:	bl	10e10 <gettext@plt>
   12ce0:	str	r0, [fp, #-16]
   12ce4:	movw	r3, #37280	; 0x91a0
   12ce8:	movt	r3, #2
   12cec:	ldr	r3, [r3]
   12cf0:	cmp	r3, #0
   12cf4:	beq	12d40 <__assert_fail@plt+0x1e4c>
   12cf8:	bl	10e34 <__errno_location@plt>
   12cfc:	mov	r3, r0
   12d00:	ldr	r4, [r3]
   12d04:	movw	r3, #37280	; 0x91a0
   12d08:	movt	r3, #2
   12d0c:	ldr	r3, [r3]
   12d10:	mov	r0, r3
   12d14:	bl	157b8 <__assert_fail@plt+0x48c4>
   12d18:	mov	r2, r0
   12d1c:	ldr	r3, [fp, #-16]
   12d20:	str	r3, [sp]
   12d24:	mov	r3, r2
   12d28:	movw	r2, #34132	; 0x8554
   12d2c:	movt	r2, #1
   12d30:	mov	r1, r4
   12d34:	mov	r0, #0
   12d38:	bl	10db0 <error@plt>
   12d3c:	b	12d60 <__assert_fail@plt+0x1e6c>
   12d40:	bl	10e34 <__errno_location@plt>
   12d44:	mov	r3, r0
   12d48:	ldr	r1, [r3]
   12d4c:	ldr	r3, [fp, #-16]
   12d50:	movw	r2, #34140	; 0x855c
   12d54:	movt	r2, #1
   12d58:	mov	r0, #0
   12d5c:	bl	10db0 <error@plt>
   12d60:	movw	r3, #37108	; 0x90f4
   12d64:	movt	r3, #2
   12d68:	ldr	r3, [r3]
   12d6c:	mov	r0, r3
   12d70:	bl	10cf0 <_exit@plt>
   12d74:	movw	r3, #37192	; 0x9148
   12d78:	movt	r3, #2
   12d7c:	ldr	r3, [r3]
   12d80:	mov	r0, r3
   12d84:	bl	16f30 <__assert_fail@plt+0x603c>
   12d88:	mov	r3, r0
   12d8c:	cmp	r3, #0
   12d90:	beq	12da8 <__assert_fail@plt+0x1eb4>
   12d94:	movw	r3, #37108	; 0x90f4
   12d98:	movt	r3, #2
   12d9c:	ldr	r3, [r3]
   12da0:	mov	r0, r3
   12da4:	bl	10cf0 <_exit@plt>
   12da8:	nop	{0}
   12dac:	sub	sp, fp, #8
   12db0:	ldr	r4, [sp]
   12db4:	ldr	fp, [sp, #4]
   12db8:	add	sp, sp, #8
   12dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   12dc0:	str	fp, [sp, #-8]!
   12dc4:	str	lr, [sp, #4]
   12dc8:	add	fp, sp, #4
   12dcc:	sub	sp, sp, #40	; 0x28
   12dd0:	str	r0, [fp, #-16]
   12dd4:	strd	r2, [fp, #-28]	; 0xffffffe4
   12dd8:	ldr	r3, [fp, #12]
   12ddc:	str	r3, [sp, #8]
   12de0:	ldrd	r2, [fp, #4]
   12de4:	strd	r2, [sp]
   12de8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12dec:	ldr	r0, [fp, #-16]
   12df0:	bl	10cc0 <posix_fadvise64@plt>
   12df4:	str	r0, [fp, #-8]
   12df8:	nop	{0}
   12dfc:	sub	sp, fp, #4
   12e00:	ldr	fp, [sp]
   12e04:	add	sp, sp, #4
   12e08:	pop	{pc}		; (ldr pc, [sp], #4)
   12e0c:	str	fp, [sp, #-8]!
   12e10:	str	lr, [sp, #4]
   12e14:	add	fp, sp, #4
   12e18:	sub	sp, sp, #24
   12e1c:	str	r0, [fp, #-8]
   12e20:	str	r1, [fp, #-12]
   12e24:	ldr	r3, [fp, #-8]
   12e28:	cmp	r3, #0
   12e2c:	beq	12e60 <__assert_fail@plt+0x1f6c>
   12e30:	ldr	r0, [fp, #-8]
   12e34:	bl	10e58 <fileno@plt>
   12e38:	mov	r1, r0
   12e3c:	ldr	r3, [fp, #-12]
   12e40:	str	r3, [sp, #8]
   12e44:	mov	r2, #0
   12e48:	mov	r3, #0
   12e4c:	strd	r2, [sp]
   12e50:	mov	r2, #0
   12e54:	mov	r3, #0
   12e58:	mov	r0, r1
   12e5c:	bl	12dc0 <__assert_fail@plt+0x1ecc>
   12e60:	nop	{0}
   12e64:	sub	sp, fp, #4
   12e68:	ldr	fp, [sp]
   12e6c:	add	sp, sp, #4
   12e70:	pop	{pc}		; (ldr pc, [sp], #4)
   12e74:	str	fp, [sp, #-8]!
   12e78:	str	lr, [sp, #4]
   12e7c:	add	fp, sp, #4
   12e80:	sub	sp, sp, #32
   12e84:	str	r0, [fp, #-24]	; 0xffffffe8
   12e88:	mov	r3, #0
   12e8c:	str	r3, [fp, #-8]
   12e90:	mov	r3, #0
   12e94:	str	r3, [fp, #-12]
   12e98:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12e9c:	bl	10e58 <fileno@plt>
   12ea0:	str	r0, [fp, #-16]
   12ea4:	ldr	r3, [fp, #-16]
   12ea8:	cmp	r3, #0
   12eac:	bge	12ec0 <__assert_fail@plt+0x1fcc>
   12eb0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12eb4:	bl	10e64 <fclose@plt>
   12eb8:	mov	r3, r0
   12ebc:	b	12f64 <__assert_fail@plt+0x2070>
   12ec0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12ec4:	bl	10dd4 <__freading@plt>
   12ec8:	mov	r3, r0
   12ecc:	cmp	r3, #0
   12ed0:	beq	12f0c <__assert_fail@plt+0x2018>
   12ed4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12ed8:	bl	10e58 <fileno@plt>
   12edc:	mov	r1, r0
   12ee0:	mov	r3, #1
   12ee4:	str	r3, [sp]
   12ee8:	mov	r2, #0
   12eec:	mov	r3, #0
   12ef0:	mov	r0, r1
   12ef4:	bl	10d74 <lseek64@plt>
   12ef8:	mvn	r2, #0
   12efc:	mvn	r3, #0
   12f00:	cmp	r1, r3
   12f04:	cmpeq	r0, r2
   12f08:	beq	12f30 <__assert_fail@plt+0x203c>
   12f0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12f10:	bl	12fcc <__assert_fail@plt+0x20d8>
   12f14:	mov	r3, r0
   12f18:	cmp	r3, #0
   12f1c:	beq	12f30 <__assert_fail@plt+0x203c>
   12f20:	bl	10e34 <__errno_location@plt>
   12f24:	mov	r3, r0
   12f28:	ldr	r3, [r3]
   12f2c:	str	r3, [fp, #-8]
   12f30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12f34:	bl	10e64 <fclose@plt>
   12f38:	str	r0, [fp, #-12]
   12f3c:	ldr	r3, [fp, #-8]
   12f40:	cmp	r3, #0
   12f44:	beq	12f60 <__assert_fail@plt+0x206c>
   12f48:	bl	10e34 <__errno_location@plt>
   12f4c:	mov	r2, r0
   12f50:	ldr	r3, [fp, #-8]
   12f54:	str	r3, [r2]
   12f58:	mvn	r3, #0
   12f5c:	str	r3, [fp, #-12]
   12f60:	ldr	r3, [fp, #-12]
   12f64:	mov	r0, r3
   12f68:	sub	sp, fp, #4
   12f6c:	ldr	fp, [sp]
   12f70:	add	sp, sp, #4
   12f74:	pop	{pc}		; (ldr pc, [sp], #4)
   12f78:	str	fp, [sp, #-8]!
   12f7c:	str	lr, [sp, #4]
   12f80:	add	fp, sp, #4
   12f84:	sub	sp, sp, #16
   12f88:	str	r0, [fp, #-8]
   12f8c:	ldr	r3, [fp, #-8]
   12f90:	ldr	r3, [r3]
   12f94:	and	r3, r3, #256	; 0x100
   12f98:	cmp	r3, #0
   12f9c:	beq	12fb8 <__assert_fail@plt+0x20c4>
   12fa0:	mov	r3, #1
   12fa4:	str	r3, [sp]
   12fa8:	mov	r2, #0
   12fac:	mov	r3, #0
   12fb0:	ldr	r0, [fp, #-8]
   12fb4:	bl	130dc <__assert_fail@plt+0x21e8>
   12fb8:	nop	{0}
   12fbc:	sub	sp, fp, #4
   12fc0:	ldr	fp, [sp]
   12fc4:	add	sp, sp, #4
   12fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   12fcc:	str	fp, [sp, #-8]!
   12fd0:	str	lr, [sp, #4]
   12fd4:	add	fp, sp, #4
   12fd8:	sub	sp, sp, #8
   12fdc:	str	r0, [fp, #-8]
   12fe0:	ldr	r3, [fp, #-8]
   12fe4:	cmp	r3, #0
   12fe8:	beq	13000 <__assert_fail@plt+0x210c>
   12fec:	ldr	r0, [fp, #-8]
   12ff0:	bl	10dd4 <__freading@plt>
   12ff4:	mov	r3, r0
   12ff8:	cmp	r3, #0
   12ffc:	bne	13010 <__assert_fail@plt+0x211c>
   13000:	ldr	r0, [fp, #-8]
   13004:	bl	10cd8 <fflush@plt>
   13008:	mov	r3, r0
   1300c:	b	13024 <__assert_fail@plt+0x2130>
   13010:	ldr	r0, [fp, #-8]
   13014:	bl	12f78 <__assert_fail@plt+0x2084>
   13018:	ldr	r0, [fp, #-8]
   1301c:	bl	10cd8 <fflush@plt>
   13020:	mov	r3, r0
   13024:	mov	r0, r3
   13028:	sub	sp, fp, #4
   1302c:	ldr	fp, [sp]
   13030:	add	sp, sp, #4
   13034:	pop	{pc}		; (ldr pc, [sp], #4)
   13038:	str	r4, [sp, #-12]!
   1303c:	str	fp, [sp, #4]
   13040:	str	lr, [sp, #8]
   13044:	add	fp, sp, #8
   13048:	sub	sp, sp, #20
   1304c:	str	r0, [fp, #-24]	; 0xffffffe8
   13050:	bl	10e34 <__errno_location@plt>
   13054:	mov	r3, r0
   13058:	ldr	r3, [r3]
   1305c:	str	r3, [fp, #-20]	; 0xffffffec
   13060:	bl	10e34 <__errno_location@plt>
   13064:	mov	r3, r0
   13068:	ldr	r3, [r3]
   1306c:	str	r3, [fp, #-16]
   13070:	bl	10e34 <__errno_location@plt>
   13074:	mov	r2, r0
   13078:	mov	r3, #0
   1307c:	str	r3, [r2]
   13080:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13084:	bl	10ce4 <free@plt>
   13088:	bl	10e34 <__errno_location@plt>
   1308c:	mov	r3, r0
   13090:	ldr	r3, [r3]
   13094:	cmp	r3, #0
   13098:	moveq	r3, #1
   1309c:	movne	r3, #0
   130a0:	uxtb	r3, r3
   130a4:	mov	r4, r3
   130a8:	bl	10e34 <__errno_location@plt>
   130ac:	mov	r2, r0
   130b0:	lsl	r3, r4, #2
   130b4:	sub	r1, fp, #12
   130b8:	add	r3, r1, r3
   130bc:	ldr	r3, [r3, #-8]
   130c0:	str	r3, [r2]
   130c4:	nop	{0}
   130c8:	sub	sp, fp, #8
   130cc:	ldr	r4, [sp]
   130d0:	ldr	fp, [sp, #4]
   130d4:	add	sp, sp, #8
   130d8:	pop	{pc}		; (ldr pc, [sp], #4)
   130dc:	str	fp, [sp, #-8]!
   130e0:	str	lr, [sp, #4]
   130e4:	add	fp, sp, #4
   130e8:	sub	sp, sp, #32
   130ec:	str	r0, [fp, #-16]
   130f0:	strd	r2, [fp, #-28]	; 0xffffffe4
   130f4:	ldr	r3, [fp, #-16]
   130f8:	ldr	r2, [r3, #8]
   130fc:	ldr	r3, [fp, #-16]
   13100:	ldr	r3, [r3, #4]
   13104:	cmp	r2, r3
   13108:	bne	131a0 <__assert_fail@plt+0x22ac>
   1310c:	ldr	r3, [fp, #-16]
   13110:	ldr	r2, [r3, #20]
   13114:	ldr	r3, [fp, #-16]
   13118:	ldr	r3, [r3, #16]
   1311c:	cmp	r2, r3
   13120:	bne	131a0 <__assert_fail@plt+0x22ac>
   13124:	ldr	r3, [fp, #-16]
   13128:	ldr	r3, [r3, #36]	; 0x24
   1312c:	cmp	r3, #0
   13130:	bne	131a0 <__assert_fail@plt+0x22ac>
   13134:	ldr	r0, [fp, #-16]
   13138:	bl	10e58 <fileno@plt>
   1313c:	mov	r1, r0
   13140:	ldr	r3, [fp, #4]
   13144:	str	r3, [sp]
   13148:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1314c:	mov	r0, r1
   13150:	bl	10d74 <lseek64@plt>
   13154:	strd	r0, [fp, #-12]
   13158:	ldrd	r2, [fp, #-12]
   1315c:	mvn	r0, #0
   13160:	mvn	r1, #0
   13164:	cmp	r3, r1
   13168:	cmpeq	r2, r0
   1316c:	bne	13178 <__assert_fail@plt+0x2284>
   13170:	mvn	r3, #0
   13174:	b	131b8 <__assert_fail@plt+0x22c4>
   13178:	ldr	r3, [fp, #-16]
   1317c:	ldr	r3, [r3]
   13180:	bic	r2, r3, #16
   13184:	ldr	r3, [fp, #-16]
   13188:	str	r2, [r3]
   1318c:	ldr	r1, [fp, #-16]
   13190:	ldrd	r2, [fp, #-12]
   13194:	strd	r2, [r1, #80]	; 0x50
   13198:	mov	r3, #0
   1319c:	b	131b8 <__assert_fail@plt+0x22c4>
   131a0:	ldr	r3, [fp, #4]
   131a4:	str	r3, [sp]
   131a8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   131ac:	ldr	r0, [fp, #-16]
   131b0:	bl	10e70 <fseeko64@plt>
   131b4:	mov	r3, r0
   131b8:	mov	r0, r3
   131bc:	sub	sp, fp, #4
   131c0:	ldr	fp, [sp]
   131c4:	add	sp, sp, #4
   131c8:	pop	{pc}		; (ldr pc, [sp], #4)
   131cc:	str	fp, [sp, #-8]!
   131d0:	str	lr, [sp, #4]
   131d4:	add	fp, sp, #4
   131d8:	sub	sp, sp, #16
   131dc:	str	r0, [fp, #-16]
   131e0:	ldr	r3, [fp, #-16]
   131e4:	cmp	r3, #0
   131e8:	bne	13210 <__assert_fail@plt+0x231c>
   131ec:	movw	r3, #37192	; 0x9148
   131f0:	movt	r3, #2
   131f4:	ldr	r3, [r3]
   131f8:	mov	r2, #55	; 0x37
   131fc:	mov	r1, #1
   13200:	movw	r0, #34144	; 0x8560
   13204:	movt	r0, #1
   13208:	bl	10d68 <fwrite@plt>
   1320c:	bl	10ed0 <abort@plt>
   13210:	mov	r1, #47	; 0x2f
   13214:	ldr	r0, [fp, #-16]
   13218:	bl	10e88 <strrchr@plt>
   1321c:	str	r0, [fp, #-8]
   13220:	ldr	r3, [fp, #-8]
   13224:	cmp	r3, #0
   13228:	beq	13238 <__assert_fail@plt+0x2344>
   1322c:	ldr	r3, [fp, #-8]
   13230:	add	r3, r3, #1
   13234:	b	1323c <__assert_fail@plt+0x2348>
   13238:	ldr	r3, [fp, #-16]
   1323c:	str	r3, [fp, #-12]
   13240:	ldr	r2, [fp, #-12]
   13244:	ldr	r3, [fp, #-16]
   13248:	sub	r3, r2, r3
   1324c:	cmp	r3, #6
   13250:	ble	132c0 <__assert_fail@plt+0x23cc>
   13254:	ldr	r3, [fp, #-12]
   13258:	sub	r3, r3, #7
   1325c:	mov	r2, #7
   13260:	movw	r1, #34200	; 0x8598
   13264:	movt	r1, #1
   13268:	mov	r0, r3
   1326c:	bl	10ec4 <strncmp@plt>
   13270:	mov	r3, r0
   13274:	cmp	r3, #0
   13278:	bne	132c0 <__assert_fail@plt+0x23cc>
   1327c:	ldr	r3, [fp, #-12]
   13280:	str	r3, [fp, #-16]
   13284:	mov	r2, #3
   13288:	movw	r1, #34208	; 0x85a0
   1328c:	movt	r1, #1
   13290:	ldr	r0, [fp, #-12]
   13294:	bl	10ec4 <strncmp@plt>
   13298:	mov	r3, r0
   1329c:	cmp	r3, #0
   132a0:	bne	132c0 <__assert_fail@plt+0x23cc>
   132a4:	ldr	r3, [fp, #-12]
   132a8:	add	r3, r3, #3
   132ac:	str	r3, [fp, #-16]
   132b0:	movw	r3, #37176	; 0x9138
   132b4:	movt	r3, #2
   132b8:	ldr	r2, [fp, #-16]
   132bc:	str	r2, [r3]
   132c0:	movw	r3, #37288	; 0x91a8
   132c4:	movt	r3, #2
   132c8:	ldr	r2, [fp, #-16]
   132cc:	str	r2, [r3]
   132d0:	movw	r3, #37180	; 0x913c
   132d4:	movt	r3, #2
   132d8:	ldr	r2, [fp, #-16]
   132dc:	str	r2, [r3]
   132e0:	nop	{0}
   132e4:	sub	sp, fp, #4
   132e8:	ldr	fp, [sp]
   132ec:	add	sp, sp, #4
   132f0:	pop	{pc}		; (ldr pc, [sp], #4)
   132f4:	str	fp, [sp, #-8]!
   132f8:	str	lr, [sp, #4]
   132fc:	add	fp, sp, #4
   13300:	sub	sp, sp, #16
   13304:	str	r0, [fp, #-16]
   13308:	bl	10e34 <__errno_location@plt>
   1330c:	mov	r3, r0
   13310:	ldr	r3, [r3]
   13314:	str	r3, [fp, #-8]
   13318:	ldr	r3, [fp, #-16]
   1331c:	cmp	r3, #0
   13320:	beq	1332c <__assert_fail@plt+0x2438>
   13324:	ldr	r3, [fp, #-16]
   13328:	b	13334 <__assert_fail@plt+0x2440>
   1332c:	movw	r3, #37292	; 0x91ac
   13330:	movt	r3, #2
   13334:	mov	r1, #48	; 0x30
   13338:	mov	r0, r3
   1333c:	bl	16ad4 <__assert_fail@plt+0x5be0>
   13340:	mov	r3, r0
   13344:	str	r3, [fp, #-12]
   13348:	bl	10e34 <__errno_location@plt>
   1334c:	mov	r2, r0
   13350:	ldr	r3, [fp, #-8]
   13354:	str	r3, [r2]
   13358:	ldr	r3, [fp, #-12]
   1335c:	mov	r0, r3
   13360:	sub	sp, fp, #4
   13364:	ldr	fp, [sp]
   13368:	add	sp, sp, #4
   1336c:	pop	{pc}		; (ldr pc, [sp], #4)
   13370:	push	{fp}		; (str fp, [sp, #-4]!)
   13374:	add	fp, sp, #0
   13378:	sub	sp, sp, #12
   1337c:	str	r0, [fp, #-8]
   13380:	ldr	r3, [fp, #-8]
   13384:	cmp	r3, #0
   13388:	beq	13394 <__assert_fail@plt+0x24a0>
   1338c:	ldr	r3, [fp, #-8]
   13390:	b	1339c <__assert_fail@plt+0x24a8>
   13394:	movw	r3, #37292	; 0x91ac
   13398:	movt	r3, #2
   1339c:	ldr	r3, [r3]
   133a0:	mov	r0, r3
   133a4:	add	sp, fp, #0
   133a8:	pop	{fp}		; (ldr fp, [sp], #4)
   133ac:	bx	lr
   133b0:	push	{fp}		; (str fp, [sp, #-4]!)
   133b4:	add	fp, sp, #0
   133b8:	sub	sp, sp, #12
   133bc:	str	r0, [fp, #-8]
   133c0:	str	r1, [fp, #-12]
   133c4:	ldr	r3, [fp, #-8]
   133c8:	cmp	r3, #0
   133cc:	beq	133d8 <__assert_fail@plt+0x24e4>
   133d0:	ldr	r3, [fp, #-8]
   133d4:	b	133e0 <__assert_fail@plt+0x24ec>
   133d8:	movw	r3, #37292	; 0x91ac
   133dc:	movt	r3, #2
   133e0:	ldr	r2, [fp, #-12]
   133e4:	str	r2, [r3]
   133e8:	nop	{0}
   133ec:	add	sp, fp, #0
   133f0:	pop	{fp}		; (ldr fp, [sp], #4)
   133f4:	bx	lr
   133f8:	push	{fp}		; (str fp, [sp, #-4]!)
   133fc:	add	fp, sp, #0
   13400:	sub	sp, sp, #36	; 0x24
   13404:	str	r0, [fp, #-24]	; 0xffffffe8
   13408:	mov	r3, r1
   1340c:	str	r2, [fp, #-32]	; 0xffffffe0
   13410:	strb	r3, [fp, #-25]	; 0xffffffe7
   13414:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13418:	strb	r3, [fp, #-5]
   1341c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13420:	cmp	r3, #0
   13424:	beq	13430 <__assert_fail@plt+0x253c>
   13428:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1342c:	b	13438 <__assert_fail@plt+0x2544>
   13430:	movw	r3, #37292	; 0x91ac
   13434:	movt	r3, #2
   13438:	add	r2, r3, #8
   1343c:	ldrb	r3, [fp, #-5]
   13440:	lsr	r3, r3, #5
   13444:	uxtb	r3, r3
   13448:	lsl	r3, r3, #2
   1344c:	add	r3, r2, r3
   13450:	str	r3, [fp, #-12]
   13454:	ldrb	r3, [fp, #-5]
   13458:	and	r3, r3, #31
   1345c:	str	r3, [fp, #-16]
   13460:	ldr	r3, [fp, #-12]
   13464:	ldr	r2, [r3]
   13468:	ldr	r3, [fp, #-16]
   1346c:	lsr	r3, r2, r3
   13470:	and	r3, r3, #1
   13474:	str	r3, [fp, #-20]	; 0xffffffec
   13478:	ldr	r3, [fp, #-12]
   1347c:	ldr	r3, [r3]
   13480:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13484:	and	r1, r2, #1
   13488:	ldr	r2, [fp, #-20]	; 0xffffffec
   1348c:	eor	r1, r1, r2
   13490:	ldr	r2, [fp, #-16]
   13494:	lsl	r2, r1, r2
   13498:	eor	r2, r2, r3
   1349c:	ldr	r3, [fp, #-12]
   134a0:	str	r2, [r3]
   134a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   134a8:	mov	r0, r3
   134ac:	add	sp, fp, #0
   134b0:	pop	{fp}		; (ldr fp, [sp], #4)
   134b4:	bx	lr
   134b8:	push	{fp}		; (str fp, [sp, #-4]!)
   134bc:	add	fp, sp, #0
   134c0:	sub	sp, sp, #20
   134c4:	str	r0, [fp, #-16]
   134c8:	str	r1, [fp, #-20]	; 0xffffffec
   134cc:	ldr	r3, [fp, #-16]
   134d0:	cmp	r3, #0
   134d4:	bne	134e4 <__assert_fail@plt+0x25f0>
   134d8:	movw	r3, #37292	; 0x91ac
   134dc:	movt	r3, #2
   134e0:	str	r3, [fp, #-16]
   134e4:	ldr	r3, [fp, #-16]
   134e8:	ldr	r3, [r3, #4]
   134ec:	str	r3, [fp, #-8]
   134f0:	ldr	r3, [fp, #-16]
   134f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   134f8:	str	r2, [r3, #4]
   134fc:	ldr	r3, [fp, #-8]
   13500:	mov	r0, r3
   13504:	add	sp, fp, #0
   13508:	pop	{fp}		; (ldr fp, [sp], #4)
   1350c:	bx	lr
   13510:	str	fp, [sp, #-8]!
   13514:	str	lr, [sp, #4]
   13518:	add	fp, sp, #4
   1351c:	sub	sp, sp, #16
   13520:	str	r0, [fp, #-8]
   13524:	str	r1, [fp, #-12]
   13528:	str	r2, [fp, #-16]
   1352c:	ldr	r3, [fp, #-8]
   13530:	cmp	r3, #0
   13534:	bne	13544 <__assert_fail@plt+0x2650>
   13538:	movw	r3, #37292	; 0x91ac
   1353c:	movt	r3, #2
   13540:	str	r3, [fp, #-8]
   13544:	ldr	r3, [fp, #-8]
   13548:	mov	r2, #10
   1354c:	str	r2, [r3]
   13550:	ldr	r3, [fp, #-12]
   13554:	cmp	r3, #0
   13558:	beq	13568 <__assert_fail@plt+0x2674>
   1355c:	ldr	r3, [fp, #-16]
   13560:	cmp	r3, #0
   13564:	bne	1356c <__assert_fail@plt+0x2678>
   13568:	bl	10ed0 <abort@plt>
   1356c:	ldr	r3, [fp, #-8]
   13570:	ldr	r2, [fp, #-12]
   13574:	str	r2, [r3, #40]	; 0x28
   13578:	ldr	r3, [fp, #-8]
   1357c:	ldr	r2, [fp, #-16]
   13580:	str	r2, [r3, #44]	; 0x2c
   13584:	nop	{0}
   13588:	sub	sp, fp, #4
   1358c:	ldr	fp, [sp]
   13590:	add	sp, sp, #4
   13594:	pop	{pc}		; (ldr pc, [sp], #4)
   13598:	str	fp, [sp, #-8]!
   1359c:	str	lr, [sp, #4]
   135a0:	add	fp, sp, #4
   135a4:	sub	sp, sp, #56	; 0x38
   135a8:	str	r0, [fp, #-56]	; 0xffffffc8
   135ac:	str	r1, [fp, #-60]	; 0xffffffc4
   135b0:	sub	r1, fp, #52	; 0x34
   135b4:	mov	r2, #0
   135b8:	mov	r3, #0
   135bc:	strd	r2, [r1]
   135c0:	strd	r2, [r1, #8]
   135c4:	strd	r2, [r1, #16]
   135c8:	strd	r2, [r1, #24]
   135cc:	strd	r2, [r1, #32]
   135d0:	strd	r2, [r1, #40]	; 0x28
   135d4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   135d8:	cmp	r3, #10
   135dc:	bne	135e4 <__assert_fail@plt+0x26f0>
   135e0:	bl	10ed0 <abort@plt>
   135e4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   135e8:	str	r3, [fp, #-52]	; 0xffffffcc
   135ec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   135f0:	mov	r2, r3
   135f4:	sub	r3, fp, #52	; 0x34
   135f8:	ldrd	r0, [r3]
   135fc:	strd	r0, [r2]
   13600:	ldrd	r0, [r3, #8]
   13604:	strd	r0, [r2, #8]
   13608:	ldrd	r0, [r3, #16]
   1360c:	strd	r0, [r2, #16]
   13610:	ldrd	r0, [r3, #24]
   13614:	strd	r0, [r2, #24]
   13618:	ldrd	r0, [r3, #32]
   1361c:	strd	r0, [r2, #32]
   13620:	ldrd	r0, [r3, #40]	; 0x28
   13624:	strd	r0, [r2, #40]	; 0x28
   13628:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1362c:	sub	sp, fp, #4
   13630:	ldr	fp, [sp]
   13634:	add	sp, sp, #4
   13638:	pop	{pc}		; (ldr pc, [sp], #4)
   1363c:	str	fp, [sp, #-8]!
   13640:	str	lr, [sp, #4]
   13644:	add	fp, sp, #4
   13648:	sub	sp, sp, #16
   1364c:	str	r0, [fp, #-16]
   13650:	str	r1, [fp, #-20]	; 0xffffffec
   13654:	ldr	r0, [fp, #-16]
   13658:	bl	10e10 <gettext@plt>
   1365c:	str	r0, [fp, #-8]
   13660:	ldr	r2, [fp, #-8]
   13664:	ldr	r3, [fp, #-16]
   13668:	cmp	r2, r3
   1366c:	beq	13678 <__assert_fail@plt+0x2784>
   13670:	ldr	r3, [fp, #-8]
   13674:	b	13728 <__assert_fail@plt+0x2834>
   13678:	bl	17190 <__assert_fail@plt+0x629c>
   1367c:	str	r0, [fp, #-12]
   13680:	movw	r1, #34400	; 0x8660
   13684:	movt	r1, #1
   13688:	ldr	r0, [fp, #-12]
   1368c:	bl	16e84 <__assert_fail@plt+0x5f90>
   13690:	mov	r3, r0
   13694:	cmp	r3, #0
   13698:	bne	136c4 <__assert_fail@plt+0x27d0>
   1369c:	ldr	r3, [fp, #-16]
   136a0:	ldrb	r3, [r3]
   136a4:	cmp	r3, #96	; 0x60
   136a8:	bne	136b8 <__assert_fail@plt+0x27c4>
   136ac:	movw	r3, #34408	; 0x8668
   136b0:	movt	r3, #1
   136b4:	b	13728 <__assert_fail@plt+0x2834>
   136b8:	movw	r3, #34412	; 0x866c
   136bc:	movt	r3, #1
   136c0:	b	13728 <__assert_fail@plt+0x2834>
   136c4:	movw	r1, #34416	; 0x8670
   136c8:	movt	r1, #1
   136cc:	ldr	r0, [fp, #-12]
   136d0:	bl	16e84 <__assert_fail@plt+0x5f90>
   136d4:	mov	r3, r0
   136d8:	cmp	r3, #0
   136dc:	bne	13708 <__assert_fail@plt+0x2814>
   136e0:	ldr	r3, [fp, #-16]
   136e4:	ldrb	r3, [r3]
   136e8:	cmp	r3, #96	; 0x60
   136ec:	bne	136fc <__assert_fail@plt+0x2808>
   136f0:	movw	r3, #34424	; 0x8678
   136f4:	movt	r3, #1
   136f8:	b	13728 <__assert_fail@plt+0x2834>
   136fc:	movw	r3, #34428	; 0x867c
   13700:	movt	r3, #1
   13704:	b	13728 <__assert_fail@plt+0x2834>
   13708:	ldr	r3, [fp, #-20]	; 0xffffffec
   1370c:	cmp	r3, #9
   13710:	bne	13720 <__assert_fail@plt+0x282c>
   13714:	movw	r3, #34432	; 0x8680
   13718:	movt	r3, #1
   1371c:	b	13728 <__assert_fail@plt+0x2834>
   13720:	movw	r3, #34436	; 0x8684
   13724:	movt	r3, #1
   13728:	mov	r0, r3
   1372c:	sub	sp, fp, #4
   13730:	ldr	fp, [sp]
   13734:	add	sp, sp, #4
   13738:	pop	{pc}		; (ldr pc, [sp], #4)
   1373c:	str	r4, [sp, #-12]!
   13740:	str	fp, [sp, #4]
   13744:	str	lr, [sp, #8]
   13748:	add	fp, sp, #8
   1374c:	sub	sp, sp, #116	; 0x74
   13750:	str	r0, [fp, #-88]	; 0xffffffa8
   13754:	str	r1, [fp, #-92]	; 0xffffffa4
   13758:	str	r2, [fp, #-96]	; 0xffffffa0
   1375c:	str	r3, [fp, #-100]	; 0xffffff9c
   13760:	mov	r3, #0
   13764:	str	r3, [fp, #-20]	; 0xffffffec
   13768:	mov	r3, #0
   1376c:	str	r3, [fp, #-24]	; 0xffffffe8
   13770:	mov	r3, #0
   13774:	str	r3, [fp, #-28]	; 0xffffffe4
   13778:	mov	r3, #0
   1377c:	str	r3, [fp, #-32]	; 0xffffffe0
   13780:	mov	r3, #0
   13784:	strb	r3, [fp, #-33]	; 0xffffffdf
   13788:	bl	10d80 <__ctype_get_mb_cur_max@plt>
   1378c:	mov	r3, r0
   13790:	cmp	r3, #1
   13794:	moveq	r3, #1
   13798:	movne	r3, #0
   1379c:	strb	r3, [fp, #-57]	; 0xffffffc7
   137a0:	ldr	r3, [fp, #8]
   137a4:	and	r3, r3, #2
   137a8:	cmp	r3, #0
   137ac:	movne	r3, #1
   137b0:	moveq	r3, #0
   137b4:	strb	r3, [fp, #-34]	; 0xffffffde
   137b8:	mov	r3, #0
   137bc:	strb	r3, [fp, #-35]	; 0xffffffdd
   137c0:	mov	r3, #0
   137c4:	strb	r3, [fp, #-36]	; 0xffffffdc
   137c8:	mov	r3, #1
   137cc:	strb	r3, [fp, #-37]	; 0xffffffdb
   137d0:	ldr	r3, [fp, #4]
   137d4:	cmp	r3, #10
   137d8:	ldrls	pc, [pc, r3, lsl #2]
   137dc:	b	139f4 <__assert_fail@plt+0x2b00>
   137e0:	andeq	r3, r1, r8, ror #19
   137e4:	andeq	r3, r1, r0, ror #18
   137e8:	andeq	r3, r1, r4, lsl #19
   137ec:	andeq	r3, r1, r8, asr r9
   137f0:	andeq	r3, r1, r8, ror #18
   137f4:	andeq	r3, r1, ip, lsl r8
   137f8:	andeq	r3, r1, ip, lsl #16
   137fc:	andeq	r3, r1, r0, lsl #17
   13800:	muleq	r1, r4, r8
   13804:	muleq	r1, r4, r8
   13808:	muleq	r1, r4, r8
   1380c:	mov	r3, #5
   13810:	str	r3, [fp, #4]
   13814:	mov	r3, #1
   13818:	strb	r3, [fp, #-34]	; 0xffffffde
   1381c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13820:	eor	r3, r3, #1
   13824:	uxtb	r3, r3
   13828:	cmp	r3, #0
   1382c:	beq	13860 <__assert_fail@plt+0x296c>
   13830:	ldr	r2, [fp, #-20]	; 0xffffffec
   13834:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13838:	cmp	r2, r3
   1383c:	bcs	13854 <__assert_fail@plt+0x2960>
   13840:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13844:	ldr	r3, [fp, #-20]	; 0xffffffec
   13848:	add	r3, r2, r3
   1384c:	mov	r2, #34	; 0x22
   13850:	strb	r2, [r3]
   13854:	ldr	r3, [fp, #-20]	; 0xffffffec
   13858:	add	r3, r3, #1
   1385c:	str	r3, [fp, #-20]	; 0xffffffec
   13860:	mov	r3, #1
   13864:	strb	r3, [fp, #-33]	; 0xffffffdf
   13868:	movw	r3, #34432	; 0x8680
   1386c:	movt	r3, #1
   13870:	str	r3, [fp, #-28]	; 0xffffffe4
   13874:	mov	r3, #1
   13878:	str	r3, [fp, #-32]	; 0xffffffe0
   1387c:	b	139f8 <__assert_fail@plt+0x2b04>
   13880:	mov	r3, #1
   13884:	strb	r3, [fp, #-33]	; 0xffffffdf
   13888:	mov	r3, #0
   1388c:	strb	r3, [fp, #-34]	; 0xffffffde
   13890:	b	139f8 <__assert_fail@plt+0x2b04>
   13894:	ldr	r3, [fp, #4]
   13898:	cmp	r3, #10
   1389c:	beq	138c8 <__assert_fail@plt+0x29d4>
   138a0:	ldr	r1, [fp, #4]
   138a4:	movw	r0, #34440	; 0x8688
   138a8:	movt	r0, #1
   138ac:	bl	1363c <__assert_fail@plt+0x2748>
   138b0:	str	r0, [fp, #16]
   138b4:	ldr	r1, [fp, #4]
   138b8:	movw	r0, #34436	; 0x8684
   138bc:	movt	r0, #1
   138c0:	bl	1363c <__assert_fail@plt+0x2748>
   138c4:	str	r0, [fp, #20]
   138c8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   138cc:	eor	r3, r3, #1
   138d0:	uxtb	r3, r3
   138d4:	cmp	r3, #0
   138d8:	beq	13938 <__assert_fail@plt+0x2a44>
   138dc:	ldr	r3, [fp, #16]
   138e0:	str	r3, [fp, #-28]	; 0xffffffe4
   138e4:	b	13928 <__assert_fail@plt+0x2a34>
   138e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   138ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   138f0:	cmp	r2, r3
   138f4:	bcs	13910 <__assert_fail@plt+0x2a1c>
   138f8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   138fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13900:	add	r3, r2, r3
   13904:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13908:	ldrb	r2, [r2]
   1390c:	strb	r2, [r3]
   13910:	ldr	r3, [fp, #-20]	; 0xffffffec
   13914:	add	r3, r3, #1
   13918:	str	r3, [fp, #-20]	; 0xffffffec
   1391c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13920:	add	r3, r3, #1
   13924:	str	r3, [fp, #-28]	; 0xffffffe4
   13928:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1392c:	ldrb	r3, [r3]
   13930:	cmp	r3, #0
   13934:	bne	138e8 <__assert_fail@plt+0x29f4>
   13938:	mov	r3, #1
   1393c:	strb	r3, [fp, #-33]	; 0xffffffdf
   13940:	ldr	r3, [fp, #20]
   13944:	str	r3, [fp, #-28]	; 0xffffffe4
   13948:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1394c:	bl	10e1c <strlen@plt>
   13950:	str	r0, [fp, #-32]	; 0xffffffe0
   13954:	b	139f8 <__assert_fail@plt+0x2b04>
   13958:	mov	r3, #1
   1395c:	strb	r3, [fp, #-33]	; 0xffffffdf
   13960:	mov	r3, #1
   13964:	strb	r3, [fp, #-34]	; 0xffffffde
   13968:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1396c:	eor	r3, r3, #1
   13970:	uxtb	r3, r3
   13974:	cmp	r3, #0
   13978:	beq	13984 <__assert_fail@plt+0x2a90>
   1397c:	mov	r3, #1
   13980:	strb	r3, [fp, #-33]	; 0xffffffdf
   13984:	mov	r3, #2
   13988:	str	r3, [fp, #4]
   1398c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13990:	eor	r3, r3, #1
   13994:	uxtb	r3, r3
   13998:	cmp	r3, #0
   1399c:	beq	139d0 <__assert_fail@plt+0x2adc>
   139a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   139a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   139a8:	cmp	r2, r3
   139ac:	bcs	139c4 <__assert_fail@plt+0x2ad0>
   139b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   139b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   139b8:	add	r3, r2, r3
   139bc:	mov	r2, #39	; 0x27
   139c0:	strb	r2, [r3]
   139c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   139c8:	add	r3, r3, #1
   139cc:	str	r3, [fp, #-20]	; 0xffffffec
   139d0:	movw	r3, #34436	; 0x8684
   139d4:	movt	r3, #1
   139d8:	str	r3, [fp, #-28]	; 0xffffffe4
   139dc:	mov	r3, #1
   139e0:	str	r3, [fp, #-32]	; 0xffffffe0
   139e4:	b	139f8 <__assert_fail@plt+0x2b04>
   139e8:	mov	r3, #0
   139ec:	strb	r3, [fp, #-34]	; 0xffffffde
   139f0:	b	139f8 <__assert_fail@plt+0x2b04>
   139f4:	bl	10ed0 <abort@plt>
   139f8:	mov	r3, #0
   139fc:	str	r3, [fp, #-16]
   13a00:	b	14b9c <__assert_fail@plt+0x3ca8>
   13a04:	mov	r3, #0
   13a08:	strb	r3, [fp, #-40]	; 0xffffffd8
   13a0c:	mov	r3, #0
   13a10:	strb	r3, [fp, #-41]	; 0xffffffd7
   13a14:	mov	r3, #0
   13a18:	strb	r3, [fp, #-42]	; 0xffffffd6
   13a1c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13a20:	cmp	r3, #0
   13a24:	beq	13ac0 <__assert_fail@plt+0x2bcc>
   13a28:	ldr	r3, [fp, #4]
   13a2c:	cmp	r3, #2
   13a30:	beq	13ac0 <__assert_fail@plt+0x2bcc>
   13a34:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13a38:	cmp	r3, #0
   13a3c:	beq	13ac0 <__assert_fail@plt+0x2bcc>
   13a40:	ldr	r2, [fp, #-16]
   13a44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13a48:	add	r4, r2, r3
   13a4c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13a50:	cmn	r3, #1
   13a54:	bne	13a78 <__assert_fail@plt+0x2b84>
   13a58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13a5c:	cmp	r3, #1
   13a60:	bls	13a78 <__assert_fail@plt+0x2b84>
   13a64:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13a68:	bl	10e1c <strlen@plt>
   13a6c:	str	r0, [fp, #-100]	; 0xffffff9c
   13a70:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13a74:	b	13a7c <__assert_fail@plt+0x2b88>
   13a78:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13a7c:	cmp	r3, r4
   13a80:	bcc	13ac0 <__assert_fail@plt+0x2bcc>
   13a84:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13a88:	ldr	r3, [fp, #-16]
   13a8c:	add	r3, r2, r3
   13a90:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13a94:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13a98:	mov	r0, r3
   13a9c:	bl	10d20 <memcmp@plt>
   13aa0:	mov	r3, r0
   13aa4:	cmp	r3, #0
   13aa8:	bne	13ac0 <__assert_fail@plt+0x2bcc>
   13aac:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13ab0:	cmp	r3, #0
   13ab4:	bne	14d58 <__assert_fail@plt+0x3e64>
   13ab8:	mov	r3, #1
   13abc:	strb	r3, [fp, #-40]	; 0xffffffd8
   13ac0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13ac4:	ldr	r3, [fp, #-16]
   13ac8:	add	r3, r2, r3
   13acc:	ldrb	r3, [r3]
   13ad0:	strb	r3, [fp, #-38]	; 0xffffffda
   13ad4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13ad8:	cmp	r3, #126	; 0x7e
   13adc:	ldrls	pc, [pc, r3, lsl #2]
   13ae0:	b	14318 <__assert_fail@plt+0x3424>
   13ae4:	andeq	r3, r1, r0, ror #25
   13ae8:	andeq	r4, r1, r8, lsl r3
   13aec:	andeq	r4, r1, r8, lsl r3
   13af0:	andeq	r4, r1, r8, lsl r3
   13af4:	andeq	r4, r1, r8, lsl r3
   13af8:	andeq	r4, r1, r8, lsl r3
   13afc:	andeq	r4, r1, r8, lsl r3
   13b00:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b04:	andeq	r4, r1, r0, ror #1
   13b08:	andeq	r4, r1, r0, lsl r1
   13b0c:	strdeq	r4, [r1], -r8
   13b10:	andeq	r4, r1, ip, lsl r1
   13b14:	andeq	r4, r1, ip, ror #1
   13b18:	andeq	r4, r1, r4, lsl #2
   13b1c:	andeq	r4, r1, r8, lsl r3
   13b20:	andeq	r4, r1, r8, lsl r3
   13b24:	andeq	r4, r1, r8, lsl r3
   13b28:	andeq	r4, r1, r8, lsl r3
   13b2c:	andeq	r4, r1, r8, lsl r3
   13b30:	andeq	r4, r1, r8, lsl r3
   13b34:	andeq	r4, r1, r8, lsl r3
   13b38:	andeq	r4, r1, r8, lsl r3
   13b3c:	andeq	r4, r1, r8, lsl r3
   13b40:	andeq	r4, r1, r8, lsl r3
   13b44:	andeq	r4, r1, r8, lsl r3
   13b48:	andeq	r4, r1, r8, lsl r3
   13b4c:	andeq	r4, r1, r8, lsl r3
   13b50:	andeq	r4, r1, r8, lsl r3
   13b54:	andeq	r4, r1, r8, lsl r3
   13b58:	andeq	r4, r1, r8, lsl r3
   13b5c:	andeq	r4, r1, r8, lsl r3
   13b60:	andeq	r4, r1, r8, lsl r3
   13b64:	strdeq	r4, [r1], -ip
   13b68:	andeq	r4, r1, r4, lsl #4
   13b6c:	andeq	r4, r1, r4, lsl #4
   13b70:	strdeq	r4, [r1], -r0
   13b74:	andeq	r4, r1, r4, lsl #4
   13b78:	andeq	r4, r1, ip, lsl #6
   13b7c:	andeq	r4, r1, r4, lsl #4
   13b80:	andeq	r4, r1, r0, lsr #4
   13b84:	andeq	r4, r1, r4, lsl #4
   13b88:	andeq	r4, r1, r4, lsl #4
   13b8c:	andeq	r4, r1, r4, lsl #4
   13b90:	andeq	r4, r1, ip, lsl #6
   13b94:	andeq	r4, r1, ip, lsl #6
   13b98:	andeq	r4, r1, ip, lsl #6
   13b9c:	andeq	r4, r1, ip, lsl #6
   13ba0:	andeq	r4, r1, ip, lsl #6
   13ba4:	andeq	r4, r1, ip, lsl #6
   13ba8:	andeq	r4, r1, ip, lsl #6
   13bac:	andeq	r4, r1, ip, lsl #6
   13bb0:	andeq	r4, r1, ip, lsl #6
   13bb4:	andeq	r4, r1, ip, lsl #6
   13bb8:	andeq	r4, r1, ip, lsl #6
   13bbc:	andeq	r4, r1, ip, lsl #6
   13bc0:	andeq	r4, r1, ip, lsl #6
   13bc4:	andeq	r4, r1, ip, lsl #6
   13bc8:	andeq	r4, r1, ip, lsl #6
   13bcc:	andeq	r4, r1, ip, lsl #6
   13bd0:	andeq	r4, r1, r4, lsl #4
   13bd4:	andeq	r4, r1, r4, lsl #4
   13bd8:	andeq	r4, r1, r4, lsl #4
   13bdc:	andeq	r4, r1, r4, lsl #4
   13be0:	andeq	r3, r1, r0, asr #29
   13be4:	andeq	r4, r1, r8, lsl r3
   13be8:	andeq	r4, r1, ip, lsl #6
   13bec:	andeq	r4, r1, ip, lsl #6
   13bf0:	andeq	r4, r1, ip, lsl #6
   13bf4:	andeq	r4, r1, ip, lsl #6
   13bf8:	andeq	r4, r1, ip, lsl #6
   13bfc:	andeq	r4, r1, ip, lsl #6
   13c00:	andeq	r4, r1, ip, lsl #6
   13c04:	andeq	r4, r1, ip, lsl #6
   13c08:	andeq	r4, r1, ip, lsl #6
   13c0c:	andeq	r4, r1, ip, lsl #6
   13c10:	andeq	r4, r1, ip, lsl #6
   13c14:	andeq	r4, r1, ip, lsl #6
   13c18:	andeq	r4, r1, ip, lsl #6
   13c1c:	andeq	r4, r1, ip, lsl #6
   13c20:	andeq	r4, r1, ip, lsl #6
   13c24:	andeq	r4, r1, ip, lsl #6
   13c28:	andeq	r4, r1, ip, lsl #6
   13c2c:	andeq	r4, r1, ip, lsl #6
   13c30:	andeq	r4, r1, ip, lsl #6
   13c34:	andeq	r4, r1, ip, lsl #6
   13c38:	andeq	r4, r1, ip, lsl #6
   13c3c:	andeq	r4, r1, ip, lsl #6
   13c40:	andeq	r4, r1, ip, lsl #6
   13c44:	andeq	r4, r1, ip, lsl #6
   13c48:	andeq	r4, r1, ip, lsl #6
   13c4c:	andeq	r4, r1, ip, lsl #6
   13c50:	andeq	r4, r1, r4, lsl #4
   13c54:	andeq	r4, r1, r8, lsr #2
   13c58:	andeq	r4, r1, ip, lsl #6
   13c5c:	andeq	r4, r1, r4, lsl #4
   13c60:	andeq	r4, r1, ip, lsl #6
   13c64:	andeq	r4, r1, r4, lsl #4
   13c68:	andeq	r4, r1, ip, lsl #6
   13c6c:	andeq	r4, r1, ip, lsl #6
   13c70:	andeq	r4, r1, ip, lsl #6
   13c74:	andeq	r4, r1, ip, lsl #6
   13c78:	andeq	r4, r1, ip, lsl #6
   13c7c:	andeq	r4, r1, ip, lsl #6
   13c80:	andeq	r4, r1, ip, lsl #6
   13c84:	andeq	r4, r1, ip, lsl #6
   13c88:	andeq	r4, r1, ip, lsl #6
   13c8c:	andeq	r4, r1, ip, lsl #6
   13c90:	andeq	r4, r1, ip, lsl #6
   13c94:	andeq	r4, r1, ip, lsl #6
   13c98:	andeq	r4, r1, ip, lsl #6
   13c9c:	andeq	r4, r1, ip, lsl #6
   13ca0:	andeq	r4, r1, ip, lsl #6
   13ca4:	andeq	r4, r1, ip, lsl #6
   13ca8:	andeq	r4, r1, ip, lsl #6
   13cac:	andeq	r4, r1, ip, lsl #6
   13cb0:	andeq	r4, r1, ip, lsl #6
   13cb4:	andeq	r4, r1, ip, lsl #6
   13cb8:	andeq	r4, r1, ip, lsl #6
   13cbc:	andeq	r4, r1, ip, lsl #6
   13cc0:	andeq	r4, r1, ip, lsl #6
   13cc4:	andeq	r4, r1, ip, lsl #6
   13cc8:	andeq	r4, r1, ip, lsl #6
   13ccc:	andeq	r4, r1, ip, lsl #6
   13cd0:	andeq	r4, r1, r8, lsr #3
   13cd4:	andeq	r4, r1, r4, lsl #4
   13cd8:	andeq	r4, r1, r8, lsr #3
   13cdc:	strdeq	r4, [r1], -r0
   13ce0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13ce4:	cmp	r3, #0
   13ce8:	beq	13eac <__assert_fail@plt+0x2fb8>
   13cec:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13cf0:	cmp	r3, #0
   13cf4:	bne	14d60 <__assert_fail@plt+0x3e6c>
   13cf8:	mov	r3, #1
   13cfc:	strb	r3, [fp, #-41]	; 0xffffffd7
   13d00:	ldr	r3, [fp, #4]
   13d04:	cmp	r3, #2
   13d08:	bne	13db8 <__assert_fail@plt+0x2ec4>
   13d0c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13d10:	eor	r3, r3, #1
   13d14:	uxtb	r3, r3
   13d18:	cmp	r3, #0
   13d1c:	beq	13db8 <__assert_fail@plt+0x2ec4>
   13d20:	ldr	r2, [fp, #-20]	; 0xffffffec
   13d24:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13d28:	cmp	r2, r3
   13d2c:	bcs	13d44 <__assert_fail@plt+0x2e50>
   13d30:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13d34:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d38:	add	r3, r2, r3
   13d3c:	mov	r2, #39	; 0x27
   13d40:	strb	r2, [r3]
   13d44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d48:	add	r3, r3, #1
   13d4c:	str	r3, [fp, #-20]	; 0xffffffec
   13d50:	ldr	r2, [fp, #-20]	; 0xffffffec
   13d54:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13d58:	cmp	r2, r3
   13d5c:	bcs	13d74 <__assert_fail@plt+0x2e80>
   13d60:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13d64:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d68:	add	r3, r2, r3
   13d6c:	mov	r2, #36	; 0x24
   13d70:	strb	r2, [r3]
   13d74:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d78:	add	r3, r3, #1
   13d7c:	str	r3, [fp, #-20]	; 0xffffffec
   13d80:	ldr	r2, [fp, #-20]	; 0xffffffec
   13d84:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13d88:	cmp	r2, r3
   13d8c:	bcs	13da4 <__assert_fail@plt+0x2eb0>
   13d90:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13d94:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d98:	add	r3, r2, r3
   13d9c:	mov	r2, #39	; 0x27
   13da0:	strb	r2, [r3]
   13da4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13da8:	add	r3, r3, #1
   13dac:	str	r3, [fp, #-20]	; 0xffffffec
   13db0:	mov	r3, #1
   13db4:	strb	r3, [fp, #-35]	; 0xffffffdd
   13db8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13dbc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13dc0:	cmp	r2, r3
   13dc4:	bcs	13ddc <__assert_fail@plt+0x2ee8>
   13dc8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13dcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13dd0:	add	r3, r2, r3
   13dd4:	mov	r2, #92	; 0x5c
   13dd8:	strb	r2, [r3]
   13ddc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13de0:	add	r3, r3, #1
   13de4:	str	r3, [fp, #-20]	; 0xffffffec
   13de8:	ldr	r3, [fp, #4]
   13dec:	cmp	r3, #2
   13df0:	beq	13ea0 <__assert_fail@plt+0x2fac>
   13df4:	ldr	r3, [fp, #-16]
   13df8:	add	r3, r3, #1
   13dfc:	ldr	r2, [fp, #-100]	; 0xffffff9c
   13e00:	cmp	r2, r3
   13e04:	bls	13ea0 <__assert_fail@plt+0x2fac>
   13e08:	ldr	r3, [fp, #-16]
   13e0c:	add	r3, r3, #1
   13e10:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13e14:	add	r3, r2, r3
   13e18:	ldrb	r3, [r3]
   13e1c:	cmp	r3, #47	; 0x2f
   13e20:	bls	13ea0 <__assert_fail@plt+0x2fac>
   13e24:	ldr	r3, [fp, #-16]
   13e28:	add	r3, r3, #1
   13e2c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13e30:	add	r3, r2, r3
   13e34:	ldrb	r3, [r3]
   13e38:	cmp	r3, #57	; 0x39
   13e3c:	bhi	13ea0 <__assert_fail@plt+0x2fac>
   13e40:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e44:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e48:	cmp	r2, r3
   13e4c:	bcs	13e64 <__assert_fail@plt+0x2f70>
   13e50:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e54:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e58:	add	r3, r2, r3
   13e5c:	mov	r2, #48	; 0x30
   13e60:	strb	r2, [r3]
   13e64:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e68:	add	r3, r3, #1
   13e6c:	str	r3, [fp, #-20]	; 0xffffffec
   13e70:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e74:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e78:	cmp	r2, r3
   13e7c:	bcs	13e94 <__assert_fail@plt+0x2fa0>
   13e80:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e84:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e88:	add	r3, r2, r3
   13e8c:	mov	r2, #48	; 0x30
   13e90:	strb	r2, [r3]
   13e94:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e98:	add	r3, r3, #1
   13e9c:	str	r3, [fp, #-20]	; 0xffffffec
   13ea0:	mov	r3, #48	; 0x30
   13ea4:	strb	r3, [fp, #-38]	; 0xffffffda
   13ea8:	b	148e8 <__assert_fail@plt+0x39f4>
   13eac:	ldr	r3, [fp, #8]
   13eb0:	and	r3, r3, #1
   13eb4:	cmp	r3, #0
   13eb8:	beq	148e8 <__assert_fail@plt+0x39f4>
   13ebc:	b	14b90 <__assert_fail@plt+0x3c9c>
   13ec0:	ldr	r3, [fp, #4]
   13ec4:	cmp	r3, #2
   13ec8:	beq	13edc <__assert_fail@plt+0x2fe8>
   13ecc:	ldr	r3, [fp, #4]
   13ed0:	cmp	r3, #5
   13ed4:	beq	13eec <__assert_fail@plt+0x2ff8>
   13ed8:	b	140d0 <__assert_fail@plt+0x31dc>
   13edc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13ee0:	cmp	r3, #0
   13ee4:	beq	140c4 <__assert_fail@plt+0x31d0>
   13ee8:	b	14d94 <__assert_fail@plt+0x3ea0>
   13eec:	ldr	r3, [fp, #8]
   13ef0:	and	r3, r3, #4
   13ef4:	cmp	r3, #0
   13ef8:	beq	140cc <__assert_fail@plt+0x31d8>
   13efc:	ldr	r3, [fp, #-16]
   13f00:	add	r3, r3, #2
   13f04:	ldr	r2, [fp, #-100]	; 0xffffff9c
   13f08:	cmp	r2, r3
   13f0c:	bls	140cc <__assert_fail@plt+0x31d8>
   13f10:	ldr	r3, [fp, #-16]
   13f14:	add	r3, r3, #1
   13f18:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13f1c:	add	r3, r2, r3
   13f20:	ldrb	r3, [r3]
   13f24:	cmp	r3, #63	; 0x3f
   13f28:	bne	140cc <__assert_fail@plt+0x31d8>
   13f2c:	ldr	r3, [fp, #-16]
   13f30:	add	r3, r3, #2
   13f34:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13f38:	add	r3, r2, r3
   13f3c:	ldrb	r3, [r3]
   13f40:	sub	r3, r3, #33	; 0x21
   13f44:	cmp	r3, #29
   13f48:	ldrls	pc, [pc, r3, lsl #2]
   13f4c:	b	140bc <__assert_fail@plt+0x31c8>
   13f50:	andeq	r3, r1, r8, asr #31
   13f54:	strheq	r4, [r1], -ip
   13f58:	strheq	r4, [r1], -ip
   13f5c:	strheq	r4, [r1], -ip
   13f60:	strheq	r4, [r1], -ip
   13f64:	strheq	r4, [r1], -ip
   13f68:	andeq	r3, r1, r8, asr #31
   13f6c:	andeq	r3, r1, r8, asr #31
   13f70:	andeq	r3, r1, r8, asr #31
   13f74:	strheq	r4, [r1], -ip
   13f78:	strheq	r4, [r1], -ip
   13f7c:	strheq	r4, [r1], -ip
   13f80:	andeq	r3, r1, r8, asr #31
   13f84:	strheq	r4, [r1], -ip
   13f88:	andeq	r3, r1, r8, asr #31
   13f8c:	strheq	r4, [r1], -ip
   13f90:	strheq	r4, [r1], -ip
   13f94:	strheq	r4, [r1], -ip
   13f98:	strheq	r4, [r1], -ip
   13f9c:	strheq	r4, [r1], -ip
   13fa0:	strheq	r4, [r1], -ip
   13fa4:	strheq	r4, [r1], -ip
   13fa8:	strheq	r4, [r1], -ip
   13fac:	strheq	r4, [r1], -ip
   13fb0:	strheq	r4, [r1], -ip
   13fb4:	strheq	r4, [r1], -ip
   13fb8:	strheq	r4, [r1], -ip
   13fbc:	andeq	r3, r1, r8, asr #31
   13fc0:	andeq	r3, r1, r8, asr #31
   13fc4:	andeq	r3, r1, r8, asr #31
   13fc8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13fcc:	cmp	r3, #0
   13fd0:	bne	14d68 <__assert_fail@plt+0x3e74>
   13fd4:	ldr	r3, [fp, #-16]
   13fd8:	add	r3, r3, #2
   13fdc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13fe0:	add	r3, r2, r3
   13fe4:	ldrb	r3, [r3]
   13fe8:	strb	r3, [fp, #-38]	; 0xffffffda
   13fec:	ldr	r3, [fp, #-16]
   13ff0:	add	r3, r3, #2
   13ff4:	str	r3, [fp, #-16]
   13ff8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ffc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14000:	cmp	r2, r3
   14004:	bcs	1401c <__assert_fail@plt+0x3128>
   14008:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1400c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14010:	add	r3, r2, r3
   14014:	mov	r2, #63	; 0x3f
   14018:	strb	r2, [r3]
   1401c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14020:	add	r3, r3, #1
   14024:	str	r3, [fp, #-20]	; 0xffffffec
   14028:	ldr	r2, [fp, #-20]	; 0xffffffec
   1402c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14030:	cmp	r2, r3
   14034:	bcs	1404c <__assert_fail@plt+0x3158>
   14038:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1403c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14040:	add	r3, r2, r3
   14044:	mov	r2, #34	; 0x22
   14048:	strb	r2, [r3]
   1404c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14050:	add	r3, r3, #1
   14054:	str	r3, [fp, #-20]	; 0xffffffec
   14058:	ldr	r2, [fp, #-20]	; 0xffffffec
   1405c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14060:	cmp	r2, r3
   14064:	bcs	1407c <__assert_fail@plt+0x3188>
   14068:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1406c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14070:	add	r3, r2, r3
   14074:	mov	r2, #34	; 0x22
   14078:	strb	r2, [r3]
   1407c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14080:	add	r3, r3, #1
   14084:	str	r3, [fp, #-20]	; 0xffffffec
   14088:	ldr	r2, [fp, #-20]	; 0xffffffec
   1408c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14090:	cmp	r2, r3
   14094:	bcs	140ac <__assert_fail@plt+0x31b8>
   14098:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1409c:	ldr	r3, [fp, #-20]	; 0xffffffec
   140a0:	add	r3, r2, r3
   140a4:	mov	r2, #63	; 0x3f
   140a8:	strb	r2, [r3]
   140ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   140b0:	add	r3, r3, #1
   140b4:	str	r3, [fp, #-20]	; 0xffffffec
   140b8:	b	140c0 <__assert_fail@plt+0x31cc>
   140bc:	nop	{0}
   140c0:	b	140cc <__assert_fail@plt+0x31d8>
   140c4:	nop	{0}
   140c8:	b	1491c <__assert_fail@plt+0x3a28>
   140cc:	nop	{0}
   140d0:	b	1491c <__assert_fail@plt+0x3a28>
   140d4:	mov	r3, #97	; 0x61
   140d8:	strb	r3, [fp, #-39]	; 0xffffffd9
   140dc:	b	14190 <__assert_fail@plt+0x329c>
   140e0:	mov	r3, #98	; 0x62
   140e4:	strb	r3, [fp, #-39]	; 0xffffffd9
   140e8:	b	14190 <__assert_fail@plt+0x329c>
   140ec:	mov	r3, #102	; 0x66
   140f0:	strb	r3, [fp, #-39]	; 0xffffffd9
   140f4:	b	14190 <__assert_fail@plt+0x329c>
   140f8:	mov	r3, #110	; 0x6e
   140fc:	strb	r3, [fp, #-39]	; 0xffffffd9
   14100:	b	14174 <__assert_fail@plt+0x3280>
   14104:	mov	r3, #114	; 0x72
   14108:	strb	r3, [fp, #-39]	; 0xffffffd9
   1410c:	b	14174 <__assert_fail@plt+0x3280>
   14110:	mov	r3, #116	; 0x74
   14114:	strb	r3, [fp, #-39]	; 0xffffffd9
   14118:	b	14174 <__assert_fail@plt+0x3280>
   1411c:	mov	r3, #118	; 0x76
   14120:	strb	r3, [fp, #-39]	; 0xffffffd9
   14124:	b	14190 <__assert_fail@plt+0x329c>
   14128:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1412c:	strb	r3, [fp, #-39]	; 0xffffffd9
   14130:	ldr	r3, [fp, #4]
   14134:	cmp	r3, #2
   14138:	bne	1414c <__assert_fail@plt+0x3258>
   1413c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14140:	cmp	r3, #0
   14144:	beq	14aa8 <__assert_fail@plt+0x3bb4>
   14148:	b	14d94 <__assert_fail@plt+0x3ea0>
   1414c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14150:	cmp	r3, #0
   14154:	beq	14170 <__assert_fail@plt+0x327c>
   14158:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1415c:	cmp	r3, #0
   14160:	beq	14170 <__assert_fail@plt+0x327c>
   14164:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14168:	cmp	r3, #0
   1416c:	bne	14ab0 <__assert_fail@plt+0x3bbc>
   14170:	nop	{0}
   14174:	ldr	r3, [fp, #4]
   14178:	cmp	r3, #2
   1417c:	bne	1418c <__assert_fail@plt+0x3298>
   14180:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14184:	cmp	r3, #0
   14188:	bne	14d70 <__assert_fail@plt+0x3e7c>
   1418c:	nop	{0}
   14190:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14194:	cmp	r3, #0
   14198:	beq	148f0 <__assert_fail@plt+0x39fc>
   1419c:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   141a0:	strb	r3, [fp, #-38]	; 0xffffffda
   141a4:	b	149a8 <__assert_fail@plt+0x3ab4>
   141a8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   141ac:	cmn	r3, #1
   141b0:	bne	141d4 <__assert_fail@plt+0x32e0>
   141b4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   141b8:	add	r3, r3, #1
   141bc:	ldrb	r3, [r3]
   141c0:	cmp	r3, #0
   141c4:	movne	r3, #1
   141c8:	moveq	r3, #0
   141cc:	uxtb	r3, r3
   141d0:	b	141e8 <__assert_fail@plt+0x32f4>
   141d4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   141d8:	cmp	r3, #1
   141dc:	movne	r3, #1
   141e0:	moveq	r3, #0
   141e4:	uxtb	r3, r3
   141e8:	cmp	r3, #0
   141ec:	bne	148f8 <__assert_fail@plt+0x3a04>
   141f0:	ldr	r3, [fp, #-16]
   141f4:	cmp	r3, #0
   141f8:	bne	14900 <__assert_fail@plt+0x3a0c>
   141fc:	mov	r3, #1
   14200:	strb	r3, [fp, #-42]	; 0xffffffd6
   14204:	ldr	r3, [fp, #4]
   14208:	cmp	r3, #2
   1420c:	bne	14908 <__assert_fail@plt+0x3a14>
   14210:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14214:	cmp	r3, #0
   14218:	beq	14908 <__assert_fail@plt+0x3a14>
   1421c:	b	14d94 <__assert_fail@plt+0x3ea0>
   14220:	mov	r3, #1
   14224:	strb	r3, [fp, #-36]	; 0xffffffdc
   14228:	mov	r3, #1
   1422c:	strb	r3, [fp, #-42]	; 0xffffffd6
   14230:	ldr	r3, [fp, #4]
   14234:	cmp	r3, #2
   14238:	bne	14910 <__assert_fail@plt+0x3a1c>
   1423c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14240:	cmp	r3, #0
   14244:	bne	14d78 <__assert_fail@plt+0x3e84>
   14248:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1424c:	cmp	r3, #0
   14250:	beq	14270 <__assert_fail@plt+0x337c>
   14254:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14258:	cmp	r3, #0
   1425c:	bne	14270 <__assert_fail@plt+0x337c>
   14260:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14264:	str	r3, [fp, #-24]	; 0xffffffe8
   14268:	mov	r3, #0
   1426c:	str	r3, [fp, #-92]	; 0xffffffa4
   14270:	ldr	r2, [fp, #-20]	; 0xffffffec
   14274:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14278:	cmp	r2, r3
   1427c:	bcs	14294 <__assert_fail@plt+0x33a0>
   14280:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14284:	ldr	r3, [fp, #-20]	; 0xffffffec
   14288:	add	r3, r2, r3
   1428c:	mov	r2, #39	; 0x27
   14290:	strb	r2, [r3]
   14294:	ldr	r3, [fp, #-20]	; 0xffffffec
   14298:	add	r3, r3, #1
   1429c:	str	r3, [fp, #-20]	; 0xffffffec
   142a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   142a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   142a8:	cmp	r2, r3
   142ac:	bcs	142c4 <__assert_fail@plt+0x33d0>
   142b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   142b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   142b8:	add	r3, r2, r3
   142bc:	mov	r2, #92	; 0x5c
   142c0:	strb	r2, [r3]
   142c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   142c8:	add	r3, r3, #1
   142cc:	str	r3, [fp, #-20]	; 0xffffffec
   142d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   142d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   142d8:	cmp	r2, r3
   142dc:	bcs	142f4 <__assert_fail@plt+0x3400>
   142e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   142e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   142e8:	add	r3, r2, r3
   142ec:	mov	r2, #39	; 0x27
   142f0:	strb	r2, [r3]
   142f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   142f8:	add	r3, r3, #1
   142fc:	str	r3, [fp, #-20]	; 0xffffffec
   14300:	mov	r3, #0
   14304:	strb	r3, [fp, #-35]	; 0xffffffdd
   14308:	b	14910 <__assert_fail@plt+0x3a1c>
   1430c:	mov	r3, #1
   14310:	strb	r3, [fp, #-42]	; 0xffffffd6
   14314:	b	1491c <__assert_fail@plt+0x3a28>
   14318:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   1431c:	cmp	r3, #0
   14320:	beq	14360 <__assert_fail@plt+0x346c>
   14324:	mov	r3, #1
   14328:	str	r3, [fp, #-48]	; 0xffffffd0
   1432c:	bl	10df8 <__ctype_b_loc@plt>
   14330:	mov	r3, r0
   14334:	ldr	r2, [r3]
   14338:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1433c:	lsl	r3, r3, #1
   14340:	add	r3, r2, r3
   14344:	ldrh	r3, [r3]
   14348:	and	r3, r3, #16384	; 0x4000
   1434c:	cmp	r3, #0
   14350:	movne	r3, #1
   14354:	moveq	r3, #0
   14358:	strb	r3, [fp, #-49]	; 0xffffffcf
   1435c:	b	145ac <__assert_fail@plt+0x36b8>
   14360:	sub	r3, fp, #76	; 0x4c
   14364:	mov	r2, #8
   14368:	mov	r1, #0
   1436c:	mov	r0, r3
   14370:	bl	10e4c <memset@plt>
   14374:	mov	r3, #0
   14378:	str	r3, [fp, #-48]	; 0xffffffd0
   1437c:	mov	r3, #1
   14380:	strb	r3, [fp, #-49]	; 0xffffffcf
   14384:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14388:	cmn	r3, #1
   1438c:	bne	1439c <__assert_fail@plt+0x34a8>
   14390:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14394:	bl	10e1c <strlen@plt>
   14398:	str	r0, [fp, #-100]	; 0xffffff9c
   1439c:	ldr	r2, [fp, #-16]
   143a0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   143a4:	add	r3, r2, r3
   143a8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   143ac:	add	r1, r2, r3
   143b0:	ldr	r2, [fp, #-16]
   143b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   143b8:	add	r3, r2, r3
   143bc:	ldr	r2, [fp, #-100]	; 0xffffff9c
   143c0:	sub	r2, r2, r3
   143c4:	sub	r3, fp, #76	; 0x4c
   143c8:	sub	r0, fp, #80	; 0x50
   143cc:	bl	171f8 <__assert_fail@plt+0x6304>
   143d0:	str	r0, [fp, #-64]	; 0xffffffc0
   143d4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   143d8:	cmp	r3, #0
   143dc:	beq	145a0 <__assert_fail@plt+0x36ac>
   143e0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   143e4:	cmn	r3, #1
   143e8:	bne	143f8 <__assert_fail@plt+0x3504>
   143ec:	mov	r3, #0
   143f0:	strb	r3, [fp, #-49]	; 0xffffffcf
   143f4:	b	145ac <__assert_fail@plt+0x36b8>
   143f8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   143fc:	cmn	r3, #2
   14400:	bne	14458 <__assert_fail@plt+0x3564>
   14404:	mov	r3, #0
   14408:	strb	r3, [fp, #-49]	; 0xffffffcf
   1440c:	b	1441c <__assert_fail@plt+0x3528>
   14410:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14414:	add	r3, r3, #1
   14418:	str	r3, [fp, #-48]	; 0xffffffd0
   1441c:	ldr	r2, [fp, #-16]
   14420:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14424:	add	r3, r2, r3
   14428:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1442c:	cmp	r2, r3
   14430:	bls	145a8 <__assert_fail@plt+0x36b4>
   14434:	ldr	r2, [fp, #-16]
   14438:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1443c:	add	r3, r2, r3
   14440:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14444:	add	r3, r2, r3
   14448:	ldrb	r3, [r3]
   1444c:	cmp	r3, #0
   14450:	bne	14410 <__assert_fail@plt+0x351c>
   14454:	b	145a8 <__assert_fail@plt+0x36b4>
   14458:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1445c:	cmp	r3, #0
   14460:	beq	14554 <__assert_fail@plt+0x3660>
   14464:	ldr	r3, [fp, #4]
   14468:	cmp	r3, #2
   1446c:	bne	14554 <__assert_fail@plt+0x3660>
   14470:	mov	r3, #1
   14474:	str	r3, [fp, #-56]	; 0xffffffc8
   14478:	b	14544 <__assert_fail@plt+0x3650>
   1447c:	ldr	r2, [fp, #-16]
   14480:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14484:	add	r2, r2, r3
   14488:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1448c:	add	r3, r2, r3
   14490:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14494:	add	r3, r2, r3
   14498:	ldrb	r3, [r3]
   1449c:	sub	r3, r3, #91	; 0x5b
   144a0:	cmp	r3, #33	; 0x21
   144a4:	ldrls	pc, [pc, r3, lsl #2]
   144a8:	b	14534 <__assert_fail@plt+0x3640>
   144ac:	muleq	r1, r4, sp
   144b0:	muleq	r1, r4, sp
   144b4:	andeq	r4, r1, r4, lsr r5
   144b8:	muleq	r1, r4, sp
   144bc:	andeq	r4, r1, r4, lsr r5
   144c0:	muleq	r1, r4, sp
   144c4:	andeq	r4, r1, r4, lsr r5
   144c8:	andeq	r4, r1, r4, lsr r5
   144cc:	andeq	r4, r1, r4, lsr r5
   144d0:	andeq	r4, r1, r4, lsr r5
   144d4:	andeq	r4, r1, r4, lsr r5
   144d8:	andeq	r4, r1, r4, lsr r5
   144dc:	andeq	r4, r1, r4, lsr r5
   144e0:	andeq	r4, r1, r4, lsr r5
   144e4:	andeq	r4, r1, r4, lsr r5
   144e8:	andeq	r4, r1, r4, lsr r5
   144ec:	andeq	r4, r1, r4, lsr r5
   144f0:	andeq	r4, r1, r4, lsr r5
   144f4:	andeq	r4, r1, r4, lsr r5
   144f8:	andeq	r4, r1, r4, lsr r5
   144fc:	andeq	r4, r1, r4, lsr r5
   14500:	andeq	r4, r1, r4, lsr r5
   14504:	andeq	r4, r1, r4, lsr r5
   14508:	andeq	r4, r1, r4, lsr r5
   1450c:	andeq	r4, r1, r4, lsr r5
   14510:	andeq	r4, r1, r4, lsr r5
   14514:	andeq	r4, r1, r4, lsr r5
   14518:	andeq	r4, r1, r4, lsr r5
   1451c:	andeq	r4, r1, r4, lsr r5
   14520:	andeq	r4, r1, r4, lsr r5
   14524:	andeq	r4, r1, r4, lsr r5
   14528:	andeq	r4, r1, r4, lsr r5
   1452c:	andeq	r4, r1, r4, lsr r5
   14530:	muleq	r1, r4, sp
   14534:	nop	{0}
   14538:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1453c:	add	r3, r3, #1
   14540:	str	r3, [fp, #-56]	; 0xffffffc8
   14544:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14548:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1454c:	cmp	r2, r3
   14550:	bcc	1447c <__assert_fail@plt+0x3588>
   14554:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14558:	mov	r0, r3
   1455c:	bl	10d5c <iswprint@plt>
   14560:	mov	r3, r0
   14564:	cmp	r3, #0
   14568:	bne	14574 <__assert_fail@plt+0x3680>
   1456c:	mov	r3, #0
   14570:	strb	r3, [fp, #-49]	; 0xffffffcf
   14574:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14578:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1457c:	add	r3, r2, r3
   14580:	str	r3, [fp, #-48]	; 0xffffffd0
   14584:	sub	r3, fp, #76	; 0x4c
   14588:	mov	r0, r3
   1458c:	bl	10d08 <mbsinit@plt>
   14590:	mov	r3, r0
   14594:	cmp	r3, #0
   14598:	beq	1439c <__assert_fail@plt+0x34a8>
   1459c:	b	145ac <__assert_fail@plt+0x36b8>
   145a0:	nop	{0}
   145a4:	b	145ac <__assert_fail@plt+0x36b8>
   145a8:	nop	{0}
   145ac:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   145b0:	strb	r3, [fp, #-42]	; 0xffffffd6
   145b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   145b8:	cmp	r3, #1
   145bc:	bhi	145e0 <__assert_fail@plt+0x36ec>
   145c0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   145c4:	cmp	r3, #0
   145c8:	beq	14918 <__assert_fail@plt+0x3a24>
   145cc:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   145d0:	eor	r3, r3, #1
   145d4:	uxtb	r3, r3
   145d8:	cmp	r3, #0
   145dc:	beq	14918 <__assert_fail@plt+0x3a24>
   145e0:	ldr	r2, [fp, #-16]
   145e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   145e8:	add	r3, r2, r3
   145ec:	str	r3, [fp, #-68]	; 0xffffffbc
   145f0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   145f4:	cmp	r3, #0
   145f8:	beq	147ac <__assert_fail@plt+0x38b8>
   145fc:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14600:	eor	r3, r3, #1
   14604:	uxtb	r3, r3
   14608:	cmp	r3, #0
   1460c:	beq	147ac <__assert_fail@plt+0x38b8>
   14610:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14614:	cmp	r3, #0
   14618:	bne	14d80 <__assert_fail@plt+0x3e8c>
   1461c:	mov	r3, #1
   14620:	strb	r3, [fp, #-41]	; 0xffffffd7
   14624:	ldr	r3, [fp, #4]
   14628:	cmp	r3, #2
   1462c:	bne	146dc <__assert_fail@plt+0x37e8>
   14630:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14634:	eor	r3, r3, #1
   14638:	uxtb	r3, r3
   1463c:	cmp	r3, #0
   14640:	beq	146dc <__assert_fail@plt+0x37e8>
   14644:	ldr	r2, [fp, #-20]	; 0xffffffec
   14648:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1464c:	cmp	r2, r3
   14650:	bcs	14668 <__assert_fail@plt+0x3774>
   14654:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14658:	ldr	r3, [fp, #-20]	; 0xffffffec
   1465c:	add	r3, r2, r3
   14660:	mov	r2, #39	; 0x27
   14664:	strb	r2, [r3]
   14668:	ldr	r3, [fp, #-20]	; 0xffffffec
   1466c:	add	r3, r3, #1
   14670:	str	r3, [fp, #-20]	; 0xffffffec
   14674:	ldr	r2, [fp, #-20]	; 0xffffffec
   14678:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1467c:	cmp	r2, r3
   14680:	bcs	14698 <__assert_fail@plt+0x37a4>
   14684:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14688:	ldr	r3, [fp, #-20]	; 0xffffffec
   1468c:	add	r3, r2, r3
   14690:	mov	r2, #36	; 0x24
   14694:	strb	r2, [r3]
   14698:	ldr	r3, [fp, #-20]	; 0xffffffec
   1469c:	add	r3, r3, #1
   146a0:	str	r3, [fp, #-20]	; 0xffffffec
   146a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   146a8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   146ac:	cmp	r2, r3
   146b0:	bcs	146c8 <__assert_fail@plt+0x37d4>
   146b4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   146b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   146bc:	add	r3, r2, r3
   146c0:	mov	r2, #39	; 0x27
   146c4:	strb	r2, [r3]
   146c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   146cc:	add	r3, r3, #1
   146d0:	str	r3, [fp, #-20]	; 0xffffffec
   146d4:	mov	r3, #1
   146d8:	strb	r3, [fp, #-35]	; 0xffffffdd
   146dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   146e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   146e4:	cmp	r2, r3
   146e8:	bcs	14700 <__assert_fail@plt+0x380c>
   146ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   146f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   146f4:	add	r3, r2, r3
   146f8:	mov	r2, #92	; 0x5c
   146fc:	strb	r2, [r3]
   14700:	ldr	r3, [fp, #-20]	; 0xffffffec
   14704:	add	r3, r3, #1
   14708:	str	r3, [fp, #-20]	; 0xffffffec
   1470c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14710:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14714:	cmp	r2, r3
   14718:	bcs	14740 <__assert_fail@plt+0x384c>
   1471c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14720:	lsr	r3, r3, #6
   14724:	uxtb	r2, r3
   14728:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1472c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14730:	add	r3, r1, r3
   14734:	add	r2, r2, #48	; 0x30
   14738:	uxtb	r2, r2
   1473c:	strb	r2, [r3]
   14740:	ldr	r3, [fp, #-20]	; 0xffffffec
   14744:	add	r3, r3, #1
   14748:	str	r3, [fp, #-20]	; 0xffffffec
   1474c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14750:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14754:	cmp	r2, r3
   14758:	bcs	14788 <__assert_fail@plt+0x3894>
   1475c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14760:	lsr	r3, r3, #3
   14764:	uxtb	r3, r3
   14768:	and	r3, r3, #7
   1476c:	uxtb	r2, r3
   14770:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14774:	ldr	r3, [fp, #-20]	; 0xffffffec
   14778:	add	r3, r1, r3
   1477c:	add	r2, r2, #48	; 0x30
   14780:	uxtb	r2, r2
   14784:	strb	r2, [r3]
   14788:	ldr	r3, [fp, #-20]	; 0xffffffec
   1478c:	add	r3, r3, #1
   14790:	str	r3, [fp, #-20]	; 0xffffffec
   14794:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14798:	and	r3, r3, #7
   1479c:	uxtb	r3, r3
   147a0:	add	r3, r3, #48	; 0x30
   147a4:	strb	r3, [fp, #-38]	; 0xffffffda
   147a8:	b	147f0 <__assert_fail@plt+0x38fc>
   147ac:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   147b0:	cmp	r3, #0
   147b4:	beq	147f0 <__assert_fail@plt+0x38fc>
   147b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   147bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   147c0:	cmp	r2, r3
   147c4:	bcs	147dc <__assert_fail@plt+0x38e8>
   147c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   147cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   147d0:	add	r3, r2, r3
   147d4:	mov	r2, #92	; 0x5c
   147d8:	strb	r2, [r3]
   147dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   147e0:	add	r3, r3, #1
   147e4:	str	r3, [fp, #-20]	; 0xffffffec
   147e8:	mov	r3, #0
   147ec:	strb	r3, [fp, #-40]	; 0xffffffd8
   147f0:	ldr	r3, [fp, #-16]
   147f4:	add	r3, r3, #1
   147f8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   147fc:	cmp	r2, r3
   14800:	bls	148e0 <__assert_fail@plt+0x39ec>
   14804:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14808:	cmp	r3, #0
   1480c:	beq	1488c <__assert_fail@plt+0x3998>
   14810:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   14814:	eor	r3, r3, #1
   14818:	uxtb	r3, r3
   1481c:	cmp	r3, #0
   14820:	beq	1488c <__assert_fail@plt+0x3998>
   14824:	ldr	r2, [fp, #-20]	; 0xffffffec
   14828:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1482c:	cmp	r2, r3
   14830:	bcs	14848 <__assert_fail@plt+0x3954>
   14834:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14838:	ldr	r3, [fp, #-20]	; 0xffffffec
   1483c:	add	r3, r2, r3
   14840:	mov	r2, #39	; 0x27
   14844:	strb	r2, [r3]
   14848:	ldr	r3, [fp, #-20]	; 0xffffffec
   1484c:	add	r3, r3, #1
   14850:	str	r3, [fp, #-20]	; 0xffffffec
   14854:	ldr	r2, [fp, #-20]	; 0xffffffec
   14858:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1485c:	cmp	r2, r3
   14860:	bcs	14878 <__assert_fail@plt+0x3984>
   14864:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14868:	ldr	r3, [fp, #-20]	; 0xffffffec
   1486c:	add	r3, r2, r3
   14870:	mov	r2, #39	; 0x27
   14874:	strb	r2, [r3]
   14878:	ldr	r3, [fp, #-20]	; 0xffffffec
   1487c:	add	r3, r3, #1
   14880:	str	r3, [fp, #-20]	; 0xffffffec
   14884:	mov	r3, #0
   14888:	strb	r3, [fp, #-35]	; 0xffffffdd
   1488c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14890:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14894:	cmp	r2, r3
   14898:	bcs	148b0 <__assert_fail@plt+0x39bc>
   1489c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   148a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   148a4:	add	r3, r2, r3
   148a8:	ldrb	r2, [fp, #-38]	; 0xffffffda
   148ac:	strb	r2, [r3]
   148b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   148b4:	add	r3, r3, #1
   148b8:	str	r3, [fp, #-20]	; 0xffffffec
   148bc:	ldr	r3, [fp, #-16]
   148c0:	add	r3, r3, #1
   148c4:	str	r3, [fp, #-16]
   148c8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   148cc:	ldr	r3, [fp, #-16]
   148d0:	add	r3, r2, r3
   148d4:	ldrb	r3, [r3]
   148d8:	strb	r3, [fp, #-38]	; 0xffffffda
   148dc:	b	145f0 <__assert_fail@plt+0x36fc>
   148e0:	nop	{0}
   148e4:	b	14abc <__assert_fail@plt+0x3bc8>
   148e8:	nop	{0}
   148ec:	b	1491c <__assert_fail@plt+0x3a28>
   148f0:	nop	{0}
   148f4:	b	1491c <__assert_fail@plt+0x3a28>
   148f8:	nop	{0}
   148fc:	b	1491c <__assert_fail@plt+0x3a28>
   14900:	nop	{0}
   14904:	b	1491c <__assert_fail@plt+0x3a28>
   14908:	nop	{0}
   1490c:	b	1491c <__assert_fail@plt+0x3a28>
   14910:	nop	{0}
   14914:	b	1491c <__assert_fail@plt+0x3a28>
   14918:	nop	{0}
   1491c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14920:	eor	r3, r3, #1
   14924:	uxtb	r3, r3
   14928:	cmp	r3, #0
   1492c:	bne	1493c <__assert_fail@plt+0x3a48>
   14930:	ldr	r3, [fp, #4]
   14934:	cmp	r3, #2
   14938:	bne	14950 <__assert_fail@plt+0x3a5c>
   1493c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14940:	eor	r3, r3, #1
   14944:	uxtb	r3, r3
   14948:	cmp	r3, #0
   1494c:	bne	14990 <__assert_fail@plt+0x3a9c>
   14950:	ldr	r3, [fp, #12]
   14954:	cmp	r3, #0
   14958:	beq	14990 <__assert_fail@plt+0x3a9c>
   1495c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14960:	lsr	r3, r3, #5
   14964:	uxtb	r3, r3
   14968:	lsl	r3, r3, #2
   1496c:	ldr	r2, [fp, #12]
   14970:	add	r3, r2, r3
   14974:	ldr	r2, [r3]
   14978:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1497c:	and	r3, r3, #31
   14980:	lsr	r3, r2, r3
   14984:	and	r3, r3, #1
   14988:	cmp	r3, #0
   1498c:	bne	149a4 <__assert_fail@plt+0x3ab0>
   14990:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14994:	eor	r3, r3, #1
   14998:	uxtb	r3, r3
   1499c:	cmp	r3, #0
   149a0:	bne	14ab8 <__assert_fail@plt+0x3bc4>
   149a4:	nop	{0}
   149a8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   149ac:	cmp	r3, #0
   149b0:	bne	14d88 <__assert_fail@plt+0x3e94>
   149b4:	mov	r3, #1
   149b8:	strb	r3, [fp, #-41]	; 0xffffffd7
   149bc:	ldr	r3, [fp, #4]
   149c0:	cmp	r3, #2
   149c4:	bne	14a74 <__assert_fail@plt+0x3b80>
   149c8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   149cc:	eor	r3, r3, #1
   149d0:	uxtb	r3, r3
   149d4:	cmp	r3, #0
   149d8:	beq	14a74 <__assert_fail@plt+0x3b80>
   149dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   149e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   149e4:	cmp	r2, r3
   149e8:	bcs	14a00 <__assert_fail@plt+0x3b0c>
   149ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   149f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   149f4:	add	r3, r2, r3
   149f8:	mov	r2, #39	; 0x27
   149fc:	strb	r2, [r3]
   14a00:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a04:	add	r3, r3, #1
   14a08:	str	r3, [fp, #-20]	; 0xffffffec
   14a0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14a10:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14a14:	cmp	r2, r3
   14a18:	bcs	14a30 <__assert_fail@plt+0x3b3c>
   14a1c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14a20:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a24:	add	r3, r2, r3
   14a28:	mov	r2, #36	; 0x24
   14a2c:	strb	r2, [r3]
   14a30:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a34:	add	r3, r3, #1
   14a38:	str	r3, [fp, #-20]	; 0xffffffec
   14a3c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14a40:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14a44:	cmp	r2, r3
   14a48:	bcs	14a60 <__assert_fail@plt+0x3b6c>
   14a4c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14a50:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a54:	add	r3, r2, r3
   14a58:	mov	r2, #39	; 0x27
   14a5c:	strb	r2, [r3]
   14a60:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a64:	add	r3, r3, #1
   14a68:	str	r3, [fp, #-20]	; 0xffffffec
   14a6c:	mov	r3, #1
   14a70:	strb	r3, [fp, #-35]	; 0xffffffdd
   14a74:	ldr	r2, [fp, #-20]	; 0xffffffec
   14a78:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14a7c:	cmp	r2, r3
   14a80:	bcs	14a98 <__assert_fail@plt+0x3ba4>
   14a84:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14a88:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a8c:	add	r3, r2, r3
   14a90:	mov	r2, #92	; 0x5c
   14a94:	strb	r2, [r3]
   14a98:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a9c:	add	r3, r3, #1
   14aa0:	str	r3, [fp, #-20]	; 0xffffffec
   14aa4:	b	14abc <__assert_fail@plt+0x3bc8>
   14aa8:	nop	{0}
   14aac:	b	14abc <__assert_fail@plt+0x3bc8>
   14ab0:	nop	{0}
   14ab4:	b	14abc <__assert_fail@plt+0x3bc8>
   14ab8:	nop	{0}
   14abc:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14ac0:	cmp	r3, #0
   14ac4:	beq	14b44 <__assert_fail@plt+0x3c50>
   14ac8:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   14acc:	eor	r3, r3, #1
   14ad0:	uxtb	r3, r3
   14ad4:	cmp	r3, #0
   14ad8:	beq	14b44 <__assert_fail@plt+0x3c50>
   14adc:	ldr	r2, [fp, #-20]	; 0xffffffec
   14ae0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ae4:	cmp	r2, r3
   14ae8:	bcs	14b00 <__assert_fail@plt+0x3c0c>
   14aec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14af0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14af4:	add	r3, r2, r3
   14af8:	mov	r2, #39	; 0x27
   14afc:	strb	r2, [r3]
   14b00:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b04:	add	r3, r3, #1
   14b08:	str	r3, [fp, #-20]	; 0xffffffec
   14b0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14b10:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14b14:	cmp	r2, r3
   14b18:	bcs	14b30 <__assert_fail@plt+0x3c3c>
   14b1c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14b20:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b24:	add	r3, r2, r3
   14b28:	mov	r2, #39	; 0x27
   14b2c:	strb	r2, [r3]
   14b30:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b34:	add	r3, r3, #1
   14b38:	str	r3, [fp, #-20]	; 0xffffffec
   14b3c:	mov	r3, #0
   14b40:	strb	r3, [fp, #-35]	; 0xffffffdd
   14b44:	ldr	r2, [fp, #-20]	; 0xffffffec
   14b48:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14b4c:	cmp	r2, r3
   14b50:	bcs	14b68 <__assert_fail@plt+0x3c74>
   14b54:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14b58:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b5c:	add	r3, r2, r3
   14b60:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14b64:	strb	r2, [r3]
   14b68:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b6c:	add	r3, r3, #1
   14b70:	str	r3, [fp, #-20]	; 0xffffffec
   14b74:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   14b78:	eor	r3, r3, #1
   14b7c:	uxtb	r3, r3
   14b80:	cmp	r3, #0
   14b84:	beq	14b90 <__assert_fail@plt+0x3c9c>
   14b88:	mov	r3, #0
   14b8c:	strb	r3, [fp, #-37]	; 0xffffffdb
   14b90:	ldr	r3, [fp, #-16]
   14b94:	add	r3, r3, #1
   14b98:	str	r3, [fp, #-16]
   14b9c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14ba0:	cmn	r3, #1
   14ba4:	bne	14bcc <__assert_fail@plt+0x3cd8>
   14ba8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14bac:	ldr	r3, [fp, #-16]
   14bb0:	add	r3, r2, r3
   14bb4:	ldrb	r3, [r3]
   14bb8:	cmp	r3, #0
   14bbc:	movne	r3, #1
   14bc0:	moveq	r3, #0
   14bc4:	uxtb	r3, r3
   14bc8:	b	14be4 <__assert_fail@plt+0x3cf0>
   14bcc:	ldr	r2, [fp, #-16]
   14bd0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14bd4:	cmp	r2, r3
   14bd8:	movne	r3, #1
   14bdc:	moveq	r3, #0
   14be0:	uxtb	r3, r3
   14be4:	cmp	r3, #0
   14be8:	bne	13a04 <__assert_fail@plt+0x2b10>
   14bec:	ldr	r3, [fp, #-20]	; 0xffffffec
   14bf0:	cmp	r3, #0
   14bf4:	bne	14c10 <__assert_fail@plt+0x3d1c>
   14bf8:	ldr	r3, [fp, #4]
   14bfc:	cmp	r3, #2
   14c00:	bne	14c10 <__assert_fail@plt+0x3d1c>
   14c04:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14c08:	cmp	r3, #0
   14c0c:	bne	14d90 <__assert_fail@plt+0x3e9c>
   14c10:	ldr	r3, [fp, #4]
   14c14:	cmp	r3, #2
   14c18:	bne	14cb8 <__assert_fail@plt+0x3dc4>
   14c1c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14c20:	eor	r3, r3, #1
   14c24:	uxtb	r3, r3
   14c28:	cmp	r3, #0
   14c2c:	beq	14cb8 <__assert_fail@plt+0x3dc4>
   14c30:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   14c34:	cmp	r3, #0
   14c38:	beq	14cb8 <__assert_fail@plt+0x3dc4>
   14c3c:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   14c40:	cmp	r3, #0
   14c44:	beq	14c8c <__assert_fail@plt+0x3d98>
   14c48:	ldr	r3, [fp, #20]
   14c4c:	str	r3, [sp, #16]
   14c50:	ldr	r3, [fp, #16]
   14c54:	str	r3, [sp, #12]
   14c58:	ldr	r3, [fp, #12]
   14c5c:	str	r3, [sp, #8]
   14c60:	ldr	r3, [fp, #8]
   14c64:	str	r3, [sp, #4]
   14c68:	mov	r3, #5
   14c6c:	str	r3, [sp]
   14c70:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14c74:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14c78:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14c7c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14c80:	bl	1373c <__assert_fail@plt+0x2848>
   14c84:	mov	r3, r0
   14c88:	b	14df8 <__assert_fail@plt+0x3f04>
   14c8c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14c90:	cmp	r3, #0
   14c94:	bne	14cb8 <__assert_fail@plt+0x3dc4>
   14c98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c9c:	cmp	r3, #0
   14ca0:	beq	14cb8 <__assert_fail@plt+0x3dc4>
   14ca4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ca8:	str	r3, [fp, #-92]	; 0xffffffa4
   14cac:	mov	r3, #0
   14cb0:	str	r3, [fp, #-20]	; 0xffffffec
   14cb4:	b	137d0 <__assert_fail@plt+0x28dc>
   14cb8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14cbc:	cmp	r3, #0
   14cc0:	beq	14d2c <__assert_fail@plt+0x3e38>
   14cc4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14cc8:	eor	r3, r3, #1
   14ccc:	uxtb	r3, r3
   14cd0:	cmp	r3, #0
   14cd4:	beq	14d2c <__assert_fail@plt+0x3e38>
   14cd8:	b	14d1c <__assert_fail@plt+0x3e28>
   14cdc:	ldr	r2, [fp, #-20]	; 0xffffffec
   14ce0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ce4:	cmp	r2, r3
   14ce8:	bcs	14d04 <__assert_fail@plt+0x3e10>
   14cec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14cf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14cf4:	add	r3, r2, r3
   14cf8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14cfc:	ldrb	r2, [r2]
   14d00:	strb	r2, [r3]
   14d04:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d08:	add	r3, r3, #1
   14d0c:	str	r3, [fp, #-20]	; 0xffffffec
   14d10:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14d14:	add	r3, r3, #1
   14d18:	str	r3, [fp, #-28]	; 0xffffffe4
   14d1c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14d20:	ldrb	r3, [r3]
   14d24:	cmp	r3, #0
   14d28:	bne	14cdc <__assert_fail@plt+0x3de8>
   14d2c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14d30:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14d34:	cmp	r2, r3
   14d38:	bcs	14d50 <__assert_fail@plt+0x3e5c>
   14d3c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14d40:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d44:	add	r3, r2, r3
   14d48:	mov	r2, #0
   14d4c:	strb	r2, [r3]
   14d50:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d54:	b	14df8 <__assert_fail@plt+0x3f04>
   14d58:	nop	{0}
   14d5c:	b	14d94 <__assert_fail@plt+0x3ea0>
   14d60:	nop	{0}
   14d64:	b	14d94 <__assert_fail@plt+0x3ea0>
   14d68:	nop	{0}
   14d6c:	b	14d94 <__assert_fail@plt+0x3ea0>
   14d70:	nop	{0}
   14d74:	b	14d94 <__assert_fail@plt+0x3ea0>
   14d78:	nop	{0}
   14d7c:	b	14d94 <__assert_fail@plt+0x3ea0>
   14d80:	nop	{0}
   14d84:	b	14d94 <__assert_fail@plt+0x3ea0>
   14d88:	nop	{0}
   14d8c:	b	14d94 <__assert_fail@plt+0x3ea0>
   14d90:	nop	{0}
   14d94:	ldr	r3, [fp, #4]
   14d98:	cmp	r3, #2
   14d9c:	bne	14db4 <__assert_fail@plt+0x3ec0>
   14da0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14da4:	cmp	r3, #0
   14da8:	beq	14db4 <__assert_fail@plt+0x3ec0>
   14dac:	mov	r3, #4
   14db0:	str	r3, [fp, #4]
   14db4:	ldr	r3, [fp, #8]
   14db8:	bic	r3, r3, #2
   14dbc:	ldr	r2, [fp, #20]
   14dc0:	str	r2, [sp, #16]
   14dc4:	ldr	r2, [fp, #16]
   14dc8:	str	r2, [sp, #12]
   14dcc:	mov	r2, #0
   14dd0:	str	r2, [sp, #8]
   14dd4:	str	r3, [sp, #4]
   14dd8:	ldr	r3, [fp, #4]
   14ddc:	str	r3, [sp]
   14de0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14de4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14de8:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14dec:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14df0:	bl	1373c <__assert_fail@plt+0x2848>
   14df4:	mov	r3, r0
   14df8:	mov	r0, r3
   14dfc:	sub	sp, fp, #8
   14e00:	ldr	r4, [sp]
   14e04:	ldr	fp, [sp, #4]
   14e08:	add	sp, sp, #8
   14e0c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e10:	str	fp, [sp, #-8]!
   14e14:	str	lr, [sp, #4]
   14e18:	add	fp, sp, #4
   14e1c:	sub	sp, sp, #56	; 0x38
   14e20:	str	r0, [fp, #-24]	; 0xffffffe8
   14e24:	str	r1, [fp, #-28]	; 0xffffffe4
   14e28:	str	r2, [fp, #-32]	; 0xffffffe0
   14e2c:	str	r3, [fp, #-36]	; 0xffffffdc
   14e30:	ldr	r3, [fp, #4]
   14e34:	cmp	r3, #0
   14e38:	beq	14e44 <__assert_fail@plt+0x3f50>
   14e3c:	ldr	r3, [fp, #4]
   14e40:	b	14e4c <__assert_fail@plt+0x3f58>
   14e44:	movw	r3, #37292	; 0x91ac
   14e48:	movt	r3, #2
   14e4c:	str	r3, [fp, #-8]
   14e50:	bl	10e34 <__errno_location@plt>
   14e54:	mov	r3, r0
   14e58:	ldr	r3, [r3]
   14e5c:	str	r3, [fp, #-12]
   14e60:	ldr	r3, [fp, #-8]
   14e64:	ldr	r3, [r3]
   14e68:	ldr	r2, [fp, #-8]
   14e6c:	ldr	r2, [r2, #4]
   14e70:	ldr	r1, [fp, #-8]
   14e74:	add	r1, r1, #8
   14e78:	ldr	r0, [fp, #-8]
   14e7c:	ldr	r0, [r0, #40]	; 0x28
   14e80:	ldr	ip, [fp, #-8]
   14e84:	ldr	ip, [ip, #44]	; 0x2c
   14e88:	str	ip, [sp, #16]
   14e8c:	str	r0, [sp, #12]
   14e90:	str	r1, [sp, #8]
   14e94:	str	r2, [sp, #4]
   14e98:	str	r3, [sp]
   14e9c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14ea0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14ea4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14ea8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14eac:	bl	1373c <__assert_fail@plt+0x2848>
   14eb0:	str	r0, [fp, #-16]
   14eb4:	bl	10e34 <__errno_location@plt>
   14eb8:	mov	r2, r0
   14ebc:	ldr	r3, [fp, #-12]
   14ec0:	str	r3, [r2]
   14ec4:	ldr	r3, [fp, #-16]
   14ec8:	mov	r0, r3
   14ecc:	sub	sp, fp, #4
   14ed0:	ldr	fp, [sp]
   14ed4:	add	sp, sp, #4
   14ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   14edc:	str	fp, [sp, #-8]!
   14ee0:	str	lr, [sp, #4]
   14ee4:	add	fp, sp, #4
   14ee8:	sub	sp, sp, #16
   14eec:	str	r0, [fp, #-8]
   14ef0:	str	r1, [fp, #-12]
   14ef4:	str	r2, [fp, #-16]
   14ef8:	ldr	r3, [fp, #-16]
   14efc:	mov	r2, #0
   14f00:	ldr	r1, [fp, #-12]
   14f04:	ldr	r0, [fp, #-8]
   14f08:	bl	14f24 <__assert_fail@plt+0x4030>
   14f0c:	mov	r3, r0
   14f10:	mov	r0, r3
   14f14:	sub	sp, fp, #4
   14f18:	ldr	fp, [sp]
   14f1c:	add	sp, sp, #4
   14f20:	pop	{pc}		; (ldr pc, [sp], #4)
   14f24:	str	fp, [sp, #-8]!
   14f28:	str	lr, [sp, #4]
   14f2c:	add	fp, sp, #4
   14f30:	sub	sp, sp, #64	; 0x40
   14f34:	str	r0, [fp, #-32]	; 0xffffffe0
   14f38:	str	r1, [fp, #-36]	; 0xffffffdc
   14f3c:	str	r2, [fp, #-40]	; 0xffffffd8
   14f40:	str	r3, [fp, #-44]	; 0xffffffd4
   14f44:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f48:	cmp	r3, #0
   14f4c:	beq	14f58 <__assert_fail@plt+0x4064>
   14f50:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f54:	b	14f60 <__assert_fail@plt+0x406c>
   14f58:	movw	r3, #37292	; 0x91ac
   14f5c:	movt	r3, #2
   14f60:	str	r3, [fp, #-8]
   14f64:	bl	10e34 <__errno_location@plt>
   14f68:	mov	r3, r0
   14f6c:	ldr	r3, [r3]
   14f70:	str	r3, [fp, #-12]
   14f74:	ldr	r3, [fp, #-8]
   14f78:	ldr	r3, [r3, #4]
   14f7c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14f80:	cmp	r2, #0
   14f84:	moveq	r2, #1
   14f88:	movne	r2, #0
   14f8c:	uxtb	r2, r2
   14f90:	orr	r3, r3, r2
   14f94:	str	r3, [fp, #-16]
   14f98:	ldr	r3, [fp, #-8]
   14f9c:	ldr	r3, [r3]
   14fa0:	ldr	r2, [fp, #-8]
   14fa4:	add	r2, r2, #8
   14fa8:	ldr	r1, [fp, #-8]
   14fac:	ldr	r1, [r1, #40]	; 0x28
   14fb0:	ldr	r0, [fp, #-8]
   14fb4:	ldr	r0, [r0, #44]	; 0x2c
   14fb8:	str	r0, [sp, #16]
   14fbc:	str	r1, [sp, #12]
   14fc0:	str	r2, [sp, #8]
   14fc4:	ldr	r2, [fp, #-16]
   14fc8:	str	r2, [sp, #4]
   14fcc:	str	r3, [sp]
   14fd0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14fd4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14fd8:	mov	r1, #0
   14fdc:	mov	r0, #0
   14fe0:	bl	1373c <__assert_fail@plt+0x2848>
   14fe4:	mov	r3, r0
   14fe8:	add	r3, r3, #1
   14fec:	str	r3, [fp, #-20]	; 0xffffffec
   14ff0:	ldr	r0, [fp, #-20]	; 0xffffffec
   14ff4:	bl	16434 <__assert_fail@plt+0x5540>
   14ff8:	mov	r3, r0
   14ffc:	str	r3, [fp, #-24]	; 0xffffffe8
   15000:	ldr	r3, [fp, #-8]
   15004:	ldr	r3, [r3]
   15008:	ldr	r2, [fp, #-8]
   1500c:	add	r2, r2, #8
   15010:	ldr	r1, [fp, #-8]
   15014:	ldr	r1, [r1, #40]	; 0x28
   15018:	ldr	r0, [fp, #-8]
   1501c:	ldr	r0, [r0, #44]	; 0x2c
   15020:	str	r0, [sp, #16]
   15024:	str	r1, [sp, #12]
   15028:	str	r2, [sp, #8]
   1502c:	ldr	r2, [fp, #-16]
   15030:	str	r2, [sp, #4]
   15034:	str	r3, [sp]
   15038:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1503c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15040:	ldr	r1, [fp, #-20]	; 0xffffffec
   15044:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15048:	bl	1373c <__assert_fail@plt+0x2848>
   1504c:	bl	10e34 <__errno_location@plt>
   15050:	mov	r2, r0
   15054:	ldr	r3, [fp, #-12]
   15058:	str	r3, [r2]
   1505c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15060:	cmp	r3, #0
   15064:	beq	15078 <__assert_fail@plt+0x4184>
   15068:	ldr	r3, [fp, #-20]	; 0xffffffec
   1506c:	sub	r2, r3, #1
   15070:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15074:	str	r2, [r3]
   15078:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1507c:	mov	r0, r3
   15080:	sub	sp, fp, #4
   15084:	ldr	fp, [sp]
   15088:	add	sp, sp, #4
   1508c:	pop	{pc}		; (ldr pc, [sp], #4)
   15090:	str	fp, [sp, #-8]!
   15094:	str	lr, [sp, #4]
   15098:	add	fp, sp, #4
   1509c:	sub	sp, sp, #8
   150a0:	movw	r3, #37124	; 0x9104
   150a4:	movt	r3, #2
   150a8:	ldr	r3, [r3]
   150ac:	str	r3, [fp, #-12]
   150b0:	mov	r3, #1
   150b4:	str	r3, [fp, #-8]
   150b8:	b	150e4 <__assert_fail@plt+0x41f0>
   150bc:	ldr	r3, [fp, #-8]
   150c0:	lsl	r3, r3, #3
   150c4:	ldr	r2, [fp, #-12]
   150c8:	add	r3, r2, r3
   150cc:	ldr	r3, [r3, #4]
   150d0:	mov	r0, r3
   150d4:	bl	13038 <__assert_fail@plt+0x2144>
   150d8:	ldr	r3, [fp, #-8]
   150dc:	add	r3, r3, #1
   150e0:	str	r3, [fp, #-8]
   150e4:	movw	r3, #37112	; 0x90f8
   150e8:	movt	r3, #2
   150ec:	ldr	r3, [r3]
   150f0:	ldr	r2, [fp, #-8]
   150f4:	cmp	r2, r3
   150f8:	blt	150bc <__assert_fail@plt+0x41c8>
   150fc:	ldr	r3, [fp, #-12]
   15100:	ldr	r2, [r3, #4]
   15104:	movw	r3, #37340	; 0x91dc
   15108:	movt	r3, #2
   1510c:	cmp	r2, r3
   15110:	beq	15148 <__assert_fail@plt+0x4254>
   15114:	ldr	r3, [fp, #-12]
   15118:	ldr	r3, [r3, #4]
   1511c:	mov	r0, r3
   15120:	bl	13038 <__assert_fail@plt+0x2144>
   15124:	movw	r3, #37116	; 0x90fc
   15128:	movt	r3, #2
   1512c:	mov	r2, #256	; 0x100
   15130:	str	r2, [r3]
   15134:	movw	r3, #37116	; 0x90fc
   15138:	movt	r3, #2
   1513c:	movw	r2, #37340	; 0x91dc
   15140:	movt	r2, #2
   15144:	str	r2, [r3, #4]
   15148:	ldr	r2, [fp, #-12]
   1514c:	movw	r3, #37116	; 0x90fc
   15150:	movt	r3, #2
   15154:	cmp	r2, r3
   15158:	beq	15178 <__assert_fail@plt+0x4284>
   1515c:	ldr	r0, [fp, #-12]
   15160:	bl	13038 <__assert_fail@plt+0x2144>
   15164:	movw	r3, #37124	; 0x9104
   15168:	movt	r3, #2
   1516c:	movw	r2, #37116	; 0x90fc
   15170:	movt	r2, #2
   15174:	str	r2, [r3]
   15178:	movw	r3, #37112	; 0x90f8
   1517c:	movt	r3, #2
   15180:	mov	r2, #1
   15184:	str	r2, [r3]
   15188:	nop	{0}
   1518c:	sub	sp, fp, #4
   15190:	ldr	fp, [sp]
   15194:	add	sp, sp, #4
   15198:	pop	{pc}		; (ldr pc, [sp], #4)
   1519c:	str	fp, [sp, #-8]!
   151a0:	str	lr, [sp, #4]
   151a4:	add	fp, sp, #4
   151a8:	sub	sp, sp, #80	; 0x50
   151ac:	str	r0, [fp, #-48]	; 0xffffffd0
   151b0:	str	r1, [fp, #-52]	; 0xffffffcc
   151b4:	str	r2, [fp, #-56]	; 0xffffffc8
   151b8:	str	r3, [fp, #-60]	; 0xffffffc4
   151bc:	bl	10e34 <__errno_location@plt>
   151c0:	mov	r3, r0
   151c4:	ldr	r3, [r3]
   151c8:	str	r3, [fp, #-16]
   151cc:	movw	r3, #37124	; 0x9104
   151d0:	movt	r3, #2
   151d4:	ldr	r3, [r3]
   151d8:	str	r3, [fp, #-8]
   151dc:	mvn	r3, #-2147483648	; 0x80000000
   151e0:	str	r3, [fp, #-20]	; 0xffffffec
   151e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   151e8:	cmp	r3, #0
   151ec:	blt	15200 <__assert_fail@plt+0x430c>
   151f0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   151f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   151f8:	cmp	r2, r3
   151fc:	blt	15204 <__assert_fail@plt+0x4310>
   15200:	bl	10ed0 <abort@plt>
   15204:	movw	r3, #37112	; 0x90f8
   15208:	movt	r3, #2
   1520c:	ldr	r3, [r3]
   15210:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15214:	cmp	r2, r3
   15218:	blt	15310 <__assert_fail@plt+0x441c>
   1521c:	ldr	r2, [fp, #-8]
   15220:	movw	r3, #37116	; 0x90fc
   15224:	movt	r3, #2
   15228:	cmp	r2, r3
   1522c:	moveq	r3, #1
   15230:	movne	r3, #0
   15234:	strb	r3, [fp, #-21]	; 0xffffffeb
   15238:	movw	r3, #37112	; 0x90f8
   1523c:	movt	r3, #2
   15240:	ldr	r3, [r3]
   15244:	str	r3, [fp, #-40]	; 0xffffffd8
   15248:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   1524c:	cmp	r3, #0
   15250:	beq	1525c <__assert_fail@plt+0x4368>
   15254:	mov	r0, #0
   15258:	b	15260 <__assert_fail@plt+0x436c>
   1525c:	ldr	r0, [fp, #-8]
   15260:	movw	r3, #37112	; 0x90f8
   15264:	movt	r3, #2
   15268:	ldr	r3, [r3]
   1526c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15270:	sub	r3, r2, r3
   15274:	add	r2, r3, #1
   15278:	sub	r1, fp, #40	; 0x28
   1527c:	mov	r3, #8
   15280:	str	r3, [sp]
   15284:	ldr	r3, [fp, #-20]	; 0xffffffec
   15288:	bl	16794 <__assert_fail@plt+0x58a0>
   1528c:	str	r0, [fp, #-8]
   15290:	movw	r3, #37124	; 0x9104
   15294:	movt	r3, #2
   15298:	ldr	r2, [fp, #-8]
   1529c:	str	r2, [r3]
   152a0:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   152a4:	cmp	r3, #0
   152a8:	beq	152c4 <__assert_fail@plt+0x43d0>
   152ac:	ldr	r2, [fp, #-8]
   152b0:	movw	r3, #37116	; 0x90fc
   152b4:	movt	r3, #2
   152b8:	mov	r1, r2
   152bc:	ldrd	r2, [r3]
   152c0:	strd	r2, [r1]
   152c4:	movw	r3, #37112	; 0x90f8
   152c8:	movt	r3, #2
   152cc:	ldr	r3, [r3]
   152d0:	lsl	r3, r3, #3
   152d4:	ldr	r2, [fp, #-8]
   152d8:	add	r0, r2, r3
   152dc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   152e0:	movw	r3, #37112	; 0x90f8
   152e4:	movt	r3, #2
   152e8:	ldr	r3, [r3]
   152ec:	sub	r3, r2, r3
   152f0:	lsl	r3, r3, #3
   152f4:	mov	r2, r3
   152f8:	mov	r1, #0
   152fc:	bl	10e4c <memset@plt>
   15300:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15304:	movw	r3, #37112	; 0x90f8
   15308:	movt	r3, #2
   1530c:	str	r2, [r3]
   15310:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15314:	lsl	r3, r3, #3
   15318:	ldr	r2, [fp, #-8]
   1531c:	add	r3, r2, r3
   15320:	ldr	r3, [r3]
   15324:	str	r3, [fp, #-28]	; 0xffffffe4
   15328:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1532c:	lsl	r3, r3, #3
   15330:	ldr	r2, [fp, #-8]
   15334:	add	r3, r2, r3
   15338:	ldr	r3, [r3, #4]
   1533c:	str	r3, [fp, #-12]
   15340:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15344:	ldr	r3, [r3, #4]
   15348:	orr	r3, r3, #1
   1534c:	str	r3, [fp, #-32]	; 0xffffffe0
   15350:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15354:	ldr	r3, [r3]
   15358:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1535c:	add	r2, r2, #8
   15360:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15364:	ldr	r1, [r1, #40]	; 0x28
   15368:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1536c:	ldr	r0, [r0, #44]	; 0x2c
   15370:	str	r0, [sp, #16]
   15374:	str	r1, [sp, #12]
   15378:	str	r2, [sp, #8]
   1537c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15380:	str	r2, [sp, #4]
   15384:	str	r3, [sp]
   15388:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1538c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15390:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15394:	ldr	r0, [fp, #-12]
   15398:	bl	1373c <__assert_fail@plt+0x2848>
   1539c:	str	r0, [fp, #-36]	; 0xffffffdc
   153a0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   153a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   153a8:	cmp	r2, r3
   153ac:	bhi	15464 <__assert_fail@plt+0x4570>
   153b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   153b4:	add	r3, r3, #1
   153b8:	str	r3, [fp, #-28]	; 0xffffffe4
   153bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   153c0:	lsl	r3, r3, #3
   153c4:	ldr	r2, [fp, #-8]
   153c8:	add	r3, r2, r3
   153cc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   153d0:	str	r2, [r3]
   153d4:	ldr	r2, [fp, #-12]
   153d8:	movw	r3, #37340	; 0x91dc
   153dc:	movt	r3, #2
   153e0:	cmp	r2, r3
   153e4:	beq	153f0 <__assert_fail@plt+0x44fc>
   153e8:	ldr	r0, [fp, #-12]
   153ec:	bl	13038 <__assert_fail@plt+0x2144>
   153f0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   153f4:	bl	16434 <__assert_fail@plt+0x5540>
   153f8:	mov	r3, r0
   153fc:	str	r3, [fp, #-12]
   15400:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15404:	lsl	r3, r3, #3
   15408:	ldr	r2, [fp, #-8]
   1540c:	add	r3, r2, r3
   15410:	ldr	r2, [fp, #-12]
   15414:	str	r2, [r3, #4]
   15418:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1541c:	ldr	r3, [r3]
   15420:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15424:	add	r2, r2, #8
   15428:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1542c:	ldr	r1, [r1, #40]	; 0x28
   15430:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15434:	ldr	r0, [r0, #44]	; 0x2c
   15438:	str	r0, [sp, #16]
   1543c:	str	r1, [sp, #12]
   15440:	str	r2, [sp, #8]
   15444:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15448:	str	r2, [sp, #4]
   1544c:	str	r3, [sp]
   15450:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15454:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15458:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1545c:	ldr	r0, [fp, #-12]
   15460:	bl	1373c <__assert_fail@plt+0x2848>
   15464:	bl	10e34 <__errno_location@plt>
   15468:	mov	r2, r0
   1546c:	ldr	r3, [fp, #-16]
   15470:	str	r3, [r2]
   15474:	ldr	r3, [fp, #-12]
   15478:	mov	r0, r3
   1547c:	sub	sp, fp, #4
   15480:	ldr	fp, [sp]
   15484:	add	sp, sp, #4
   15488:	pop	{pc}		; (ldr pc, [sp], #4)
   1548c:	str	fp, [sp, #-8]!
   15490:	str	lr, [sp, #4]
   15494:	add	fp, sp, #4
   15498:	sub	sp, sp, #8
   1549c:	str	r0, [fp, #-8]
   154a0:	str	r1, [fp, #-12]
   154a4:	movw	r3, #37292	; 0x91ac
   154a8:	movt	r3, #2
   154ac:	mvn	r2, #0
   154b0:	ldr	r1, [fp, #-12]
   154b4:	ldr	r0, [fp, #-8]
   154b8:	bl	1519c <__assert_fail@plt+0x42a8>
   154bc:	mov	r3, r0
   154c0:	mov	r0, r3
   154c4:	sub	sp, fp, #4
   154c8:	ldr	fp, [sp]
   154cc:	add	sp, sp, #4
   154d0:	pop	{pc}		; (ldr pc, [sp], #4)
   154d4:	str	fp, [sp, #-8]!
   154d8:	str	lr, [sp, #4]
   154dc:	add	fp, sp, #4
   154e0:	sub	sp, sp, #16
   154e4:	str	r0, [fp, #-8]
   154e8:	str	r1, [fp, #-12]
   154ec:	str	r2, [fp, #-16]
   154f0:	movw	r3, #37292	; 0x91ac
   154f4:	movt	r3, #2
   154f8:	ldr	r2, [fp, #-16]
   154fc:	ldr	r1, [fp, #-12]
   15500:	ldr	r0, [fp, #-8]
   15504:	bl	1519c <__assert_fail@plt+0x42a8>
   15508:	mov	r3, r0
   1550c:	mov	r0, r3
   15510:	sub	sp, fp, #4
   15514:	ldr	fp, [sp]
   15518:	add	sp, sp, #4
   1551c:	pop	{pc}		; (ldr pc, [sp], #4)
   15520:	str	fp, [sp, #-8]!
   15524:	str	lr, [sp, #4]
   15528:	add	fp, sp, #4
   1552c:	sub	sp, sp, #8
   15530:	str	r0, [fp, #-8]
   15534:	ldr	r1, [fp, #-8]
   15538:	mov	r0, #0
   1553c:	bl	1548c <__assert_fail@plt+0x4598>
   15540:	mov	r3, r0
   15544:	mov	r0, r3
   15548:	sub	sp, fp, #4
   1554c:	ldr	fp, [sp]
   15550:	add	sp, sp, #4
   15554:	pop	{pc}		; (ldr pc, [sp], #4)
   15558:	str	fp, [sp, #-8]!
   1555c:	str	lr, [sp, #4]
   15560:	add	fp, sp, #4
   15564:	sub	sp, sp, #8
   15568:	str	r0, [fp, #-8]
   1556c:	str	r1, [fp, #-12]
   15570:	ldr	r2, [fp, #-12]
   15574:	ldr	r1, [fp, #-8]
   15578:	mov	r0, #0
   1557c:	bl	154d4 <__assert_fail@plt+0x45e0>
   15580:	mov	r3, r0
   15584:	mov	r0, r3
   15588:	sub	sp, fp, #4
   1558c:	ldr	fp, [sp]
   15590:	add	sp, sp, #4
   15594:	pop	{pc}		; (ldr pc, [sp], #4)
   15598:	str	fp, [sp, #-8]!
   1559c:	str	lr, [sp, #4]
   155a0:	add	fp, sp, #4
   155a4:	sub	sp, sp, #64	; 0x40
   155a8:	str	r0, [fp, #-56]	; 0xffffffc8
   155ac:	str	r1, [fp, #-60]	; 0xffffffc4
   155b0:	str	r2, [fp, #-64]	; 0xffffffc0
   155b4:	sub	r3, fp, #52	; 0x34
   155b8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   155bc:	mov	r0, r3
   155c0:	bl	13598 <__assert_fail@plt+0x26a4>
   155c4:	sub	r3, fp, #52	; 0x34
   155c8:	mvn	r2, #0
   155cc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   155d0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   155d4:	bl	1519c <__assert_fail@plt+0x42a8>
   155d8:	mov	r3, r0
   155dc:	mov	r0, r3
   155e0:	sub	sp, fp, #4
   155e4:	ldr	fp, [sp]
   155e8:	add	sp, sp, #4
   155ec:	pop	{pc}		; (ldr pc, [sp], #4)
   155f0:	str	fp, [sp, #-8]!
   155f4:	str	lr, [sp, #4]
   155f8:	add	fp, sp, #4
   155fc:	sub	sp, sp, #64	; 0x40
   15600:	str	r0, [fp, #-56]	; 0xffffffc8
   15604:	str	r1, [fp, #-60]	; 0xffffffc4
   15608:	str	r2, [fp, #-64]	; 0xffffffc0
   1560c:	str	r3, [fp, #-68]	; 0xffffffbc
   15610:	sub	r3, fp, #52	; 0x34
   15614:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15618:	mov	r0, r3
   1561c:	bl	13598 <__assert_fail@plt+0x26a4>
   15620:	sub	r3, fp, #52	; 0x34
   15624:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15628:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1562c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15630:	bl	1519c <__assert_fail@plt+0x42a8>
   15634:	mov	r3, r0
   15638:	mov	r0, r3
   1563c:	sub	sp, fp, #4
   15640:	ldr	fp, [sp]
   15644:	add	sp, sp, #4
   15648:	pop	{pc}		; (ldr pc, [sp], #4)
   1564c:	str	fp, [sp, #-8]!
   15650:	str	lr, [sp, #4]
   15654:	add	fp, sp, #4
   15658:	sub	sp, sp, #8
   1565c:	str	r0, [fp, #-8]
   15660:	str	r1, [fp, #-12]
   15664:	ldr	r2, [fp, #-12]
   15668:	ldr	r1, [fp, #-8]
   1566c:	mov	r0, #0
   15670:	bl	15598 <__assert_fail@plt+0x46a4>
   15674:	mov	r3, r0
   15678:	mov	r0, r3
   1567c:	sub	sp, fp, #4
   15680:	ldr	fp, [sp]
   15684:	add	sp, sp, #4
   15688:	pop	{pc}		; (ldr pc, [sp], #4)
   1568c:	str	fp, [sp, #-8]!
   15690:	str	lr, [sp, #4]
   15694:	add	fp, sp, #4
   15698:	sub	sp, sp, #16
   1569c:	str	r0, [fp, #-8]
   156a0:	str	r1, [fp, #-12]
   156a4:	str	r2, [fp, #-16]
   156a8:	ldr	r3, [fp, #-16]
   156ac:	ldr	r2, [fp, #-12]
   156b0:	ldr	r1, [fp, #-8]
   156b4:	mov	r0, #0
   156b8:	bl	155f0 <__assert_fail@plt+0x46fc>
   156bc:	mov	r3, r0
   156c0:	mov	r0, r3
   156c4:	sub	sp, fp, #4
   156c8:	ldr	fp, [sp]
   156cc:	add	sp, sp, #4
   156d0:	pop	{pc}		; (ldr pc, [sp], #4)
   156d4:	str	fp, [sp, #-8]!
   156d8:	str	lr, [sp, #4]
   156dc:	add	fp, sp, #4
   156e0:	sub	sp, sp, #64	; 0x40
   156e4:	str	r0, [fp, #-56]	; 0xffffffc8
   156e8:	str	r1, [fp, #-60]	; 0xffffffc4
   156ec:	mov	r3, r2
   156f0:	strb	r3, [fp, #-61]	; 0xffffffc3
   156f4:	movw	r2, #37292	; 0x91ac
   156f8:	movt	r2, #2
   156fc:	sub	r3, fp, #52	; 0x34
   15700:	ldrd	r0, [r2]
   15704:	strd	r0, [r3]
   15708:	ldrd	r0, [r2, #8]
   1570c:	strd	r0, [r3, #8]
   15710:	ldrd	r0, [r2, #16]
   15714:	strd	r0, [r3, #16]
   15718:	ldrd	r0, [r2, #24]
   1571c:	strd	r0, [r3, #24]
   15720:	ldrd	r0, [r2, #32]
   15724:	strd	r0, [r3, #32]
   15728:	ldrd	r0, [r2, #40]	; 0x28
   1572c:	strd	r0, [r3, #40]	; 0x28
   15730:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   15734:	sub	r3, fp, #52	; 0x34
   15738:	mov	r2, #1
   1573c:	mov	r0, r3
   15740:	bl	133f8 <__assert_fail@plt+0x2504>
   15744:	sub	r3, fp, #52	; 0x34
   15748:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1574c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15750:	mov	r0, #0
   15754:	bl	1519c <__assert_fail@plt+0x42a8>
   15758:	mov	r3, r0
   1575c:	mov	r0, r3
   15760:	sub	sp, fp, #4
   15764:	ldr	fp, [sp]
   15768:	add	sp, sp, #4
   1576c:	pop	{pc}		; (ldr pc, [sp], #4)
   15770:	str	fp, [sp, #-8]!
   15774:	str	lr, [sp, #4]
   15778:	add	fp, sp, #4
   1577c:	sub	sp, sp, #8
   15780:	str	r0, [fp, #-8]
   15784:	mov	r3, r1
   15788:	strb	r3, [fp, #-9]
   1578c:	ldrb	r3, [fp, #-9]
   15790:	mov	r2, r3
   15794:	mvn	r1, #0
   15798:	ldr	r0, [fp, #-8]
   1579c:	bl	156d4 <__assert_fail@plt+0x47e0>
   157a0:	mov	r3, r0
   157a4:	mov	r0, r3
   157a8:	sub	sp, fp, #4
   157ac:	ldr	fp, [sp]
   157b0:	add	sp, sp, #4
   157b4:	pop	{pc}		; (ldr pc, [sp], #4)
   157b8:	str	fp, [sp, #-8]!
   157bc:	str	lr, [sp, #4]
   157c0:	add	fp, sp, #4
   157c4:	sub	sp, sp, #8
   157c8:	str	r0, [fp, #-8]
   157cc:	mov	r1, #58	; 0x3a
   157d0:	ldr	r0, [fp, #-8]
   157d4:	bl	15770 <__assert_fail@plt+0x487c>
   157d8:	mov	r3, r0
   157dc:	mov	r0, r3
   157e0:	sub	sp, fp, #4
   157e4:	ldr	fp, [sp]
   157e8:	add	sp, sp, #4
   157ec:	pop	{pc}		; (ldr pc, [sp], #4)
   157f0:	str	fp, [sp, #-8]!
   157f4:	str	lr, [sp, #4]
   157f8:	add	fp, sp, #4
   157fc:	sub	sp, sp, #8
   15800:	str	r0, [fp, #-8]
   15804:	str	r1, [fp, #-12]
   15808:	mov	r2, #58	; 0x3a
   1580c:	ldr	r1, [fp, #-12]
   15810:	ldr	r0, [fp, #-8]
   15814:	bl	156d4 <__assert_fail@plt+0x47e0>
   15818:	mov	r3, r0
   1581c:	mov	r0, r3
   15820:	sub	sp, fp, #4
   15824:	ldr	fp, [sp]
   15828:	add	sp, sp, #4
   1582c:	pop	{pc}		; (ldr pc, [sp], #4)
   15830:	str	fp, [sp, #-8]!
   15834:	str	lr, [sp, #4]
   15838:	add	fp, sp, #4
   1583c:	sub	sp, sp, #112	; 0x70
   15840:	str	r0, [fp, #-56]	; 0xffffffc8
   15844:	str	r1, [fp, #-60]	; 0xffffffc4
   15848:	str	r2, [fp, #-64]	; 0xffffffc0
   1584c:	sub	r3, fp, #116	; 0x74
   15850:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15854:	mov	r0, r3
   15858:	bl	13598 <__assert_fail@plt+0x26a4>
   1585c:	sub	r3, fp, #52	; 0x34
   15860:	sub	r2, fp, #116	; 0x74
   15864:	ldrd	r0, [r2]
   15868:	strd	r0, [r3]
   1586c:	ldrd	r0, [r2, #8]
   15870:	strd	r0, [r3, #8]
   15874:	ldrd	r0, [r2, #16]
   15878:	strd	r0, [r3, #16]
   1587c:	ldrd	r0, [r2, #24]
   15880:	strd	r0, [r3, #24]
   15884:	ldrd	r0, [r2, #32]
   15888:	strd	r0, [r3, #32]
   1588c:	ldrd	r0, [r2, #40]	; 0x28
   15890:	strd	r0, [r3, #40]	; 0x28
   15894:	sub	r3, fp, #52	; 0x34
   15898:	mov	r2, #1
   1589c:	mov	r1, #58	; 0x3a
   158a0:	mov	r0, r3
   158a4:	bl	133f8 <__assert_fail@plt+0x2504>
   158a8:	sub	r3, fp, #52	; 0x34
   158ac:	mvn	r2, #0
   158b0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   158b4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   158b8:	bl	1519c <__assert_fail@plt+0x42a8>
   158bc:	mov	r3, r0
   158c0:	mov	r0, r3
   158c4:	sub	sp, fp, #4
   158c8:	ldr	fp, [sp]
   158cc:	add	sp, sp, #4
   158d0:	pop	{pc}		; (ldr pc, [sp], #4)
   158d4:	str	fp, [sp, #-8]!
   158d8:	str	lr, [sp, #4]
   158dc:	add	fp, sp, #4
   158e0:	sub	sp, sp, #24
   158e4:	str	r0, [fp, #-8]
   158e8:	str	r1, [fp, #-12]
   158ec:	str	r2, [fp, #-16]
   158f0:	str	r3, [fp, #-20]	; 0xffffffec
   158f4:	mvn	r3, #0
   158f8:	str	r3, [sp]
   158fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   15900:	ldr	r2, [fp, #-16]
   15904:	ldr	r1, [fp, #-12]
   15908:	ldr	r0, [fp, #-8]
   1590c:	bl	15928 <__assert_fail@plt+0x4a34>
   15910:	mov	r3, r0
   15914:	mov	r0, r3
   15918:	sub	sp, fp, #4
   1591c:	ldr	fp, [sp]
   15920:	add	sp, sp, #4
   15924:	pop	{pc}		; (ldr pc, [sp], #4)
   15928:	str	fp, [sp, #-8]!
   1592c:	str	lr, [sp, #4]
   15930:	add	fp, sp, #4
   15934:	sub	sp, sp, #64	; 0x40
   15938:	str	r0, [fp, #-56]	; 0xffffffc8
   1593c:	str	r1, [fp, #-60]	; 0xffffffc4
   15940:	str	r2, [fp, #-64]	; 0xffffffc0
   15944:	str	r3, [fp, #-68]	; 0xffffffbc
   15948:	movw	r2, #37292	; 0x91ac
   1594c:	movt	r2, #2
   15950:	sub	r3, fp, #52	; 0x34
   15954:	ldrd	r0, [r2]
   15958:	strd	r0, [r3]
   1595c:	ldrd	r0, [r2, #8]
   15960:	strd	r0, [r3, #8]
   15964:	ldrd	r0, [r2, #16]
   15968:	strd	r0, [r3, #16]
   1596c:	ldrd	r0, [r2, #24]
   15970:	strd	r0, [r3, #24]
   15974:	ldrd	r0, [r2, #32]
   15978:	strd	r0, [r3, #32]
   1597c:	ldrd	r0, [r2, #40]	; 0x28
   15980:	strd	r0, [r3, #40]	; 0x28
   15984:	sub	r3, fp, #52	; 0x34
   15988:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1598c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15990:	mov	r0, r3
   15994:	bl	13510 <__assert_fail@plt+0x261c>
   15998:	sub	r3, fp, #52	; 0x34
   1599c:	ldr	r2, [fp, #4]
   159a0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   159a4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   159a8:	bl	1519c <__assert_fail@plt+0x42a8>
   159ac:	mov	r3, r0
   159b0:	mov	r0, r3
   159b4:	sub	sp, fp, #4
   159b8:	ldr	fp, [sp]
   159bc:	add	sp, sp, #4
   159c0:	pop	{pc}		; (ldr pc, [sp], #4)
   159c4:	str	fp, [sp, #-8]!
   159c8:	str	lr, [sp, #4]
   159cc:	add	fp, sp, #4
   159d0:	sub	sp, sp, #16
   159d4:	str	r0, [fp, #-8]
   159d8:	str	r1, [fp, #-12]
   159dc:	str	r2, [fp, #-16]
   159e0:	ldr	r3, [fp, #-16]
   159e4:	ldr	r2, [fp, #-12]
   159e8:	ldr	r1, [fp, #-8]
   159ec:	mov	r0, #0
   159f0:	bl	158d4 <__assert_fail@plt+0x49e0>
   159f4:	mov	r3, r0
   159f8:	mov	r0, r3
   159fc:	sub	sp, fp, #4
   15a00:	ldr	fp, [sp]
   15a04:	add	sp, sp, #4
   15a08:	pop	{pc}		; (ldr pc, [sp], #4)
   15a0c:	str	fp, [sp, #-8]!
   15a10:	str	lr, [sp, #4]
   15a14:	add	fp, sp, #4
   15a18:	sub	sp, sp, #24
   15a1c:	str	r0, [fp, #-8]
   15a20:	str	r1, [fp, #-12]
   15a24:	str	r2, [fp, #-16]
   15a28:	str	r3, [fp, #-20]	; 0xffffffec
   15a2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15a30:	str	r3, [sp]
   15a34:	ldr	r3, [fp, #-16]
   15a38:	ldr	r2, [fp, #-12]
   15a3c:	ldr	r1, [fp, #-8]
   15a40:	mov	r0, #0
   15a44:	bl	15928 <__assert_fail@plt+0x4a34>
   15a48:	mov	r3, r0
   15a4c:	mov	r0, r3
   15a50:	sub	sp, fp, #4
   15a54:	ldr	fp, [sp]
   15a58:	add	sp, sp, #4
   15a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a60:	str	fp, [sp, #-8]!
   15a64:	str	lr, [sp, #4]
   15a68:	add	fp, sp, #4
   15a6c:	sub	sp, sp, #16
   15a70:	str	r0, [fp, #-8]
   15a74:	str	r1, [fp, #-12]
   15a78:	str	r2, [fp, #-16]
   15a7c:	movw	r3, #37128	; 0x9108
   15a80:	movt	r3, #2
   15a84:	ldr	r2, [fp, #-16]
   15a88:	ldr	r1, [fp, #-12]
   15a8c:	ldr	r0, [fp, #-8]
   15a90:	bl	1519c <__assert_fail@plt+0x42a8>
   15a94:	mov	r3, r0
   15a98:	mov	r0, r3
   15a9c:	sub	sp, fp, #4
   15aa0:	ldr	fp, [sp]
   15aa4:	add	sp, sp, #4
   15aa8:	pop	{pc}		; (ldr pc, [sp], #4)
   15aac:	str	fp, [sp, #-8]!
   15ab0:	str	lr, [sp, #4]
   15ab4:	add	fp, sp, #4
   15ab8:	sub	sp, sp, #8
   15abc:	str	r0, [fp, #-8]
   15ac0:	str	r1, [fp, #-12]
   15ac4:	ldr	r2, [fp, #-12]
   15ac8:	ldr	r1, [fp, #-8]
   15acc:	mov	r0, #0
   15ad0:	bl	15a60 <__assert_fail@plt+0x4b6c>
   15ad4:	mov	r3, r0
   15ad8:	mov	r0, r3
   15adc:	sub	sp, fp, #4
   15ae0:	ldr	fp, [sp]
   15ae4:	add	sp, sp, #4
   15ae8:	pop	{pc}		; (ldr pc, [sp], #4)
   15aec:	str	fp, [sp, #-8]!
   15af0:	str	lr, [sp, #4]
   15af4:	add	fp, sp, #4
   15af8:	sub	sp, sp, #8
   15afc:	str	r0, [fp, #-8]
   15b00:	str	r1, [fp, #-12]
   15b04:	mvn	r2, #0
   15b08:	ldr	r1, [fp, #-12]
   15b0c:	ldr	r0, [fp, #-8]
   15b10:	bl	15a60 <__assert_fail@plt+0x4b6c>
   15b14:	mov	r3, r0
   15b18:	mov	r0, r3
   15b1c:	sub	sp, fp, #4
   15b20:	ldr	fp, [sp]
   15b24:	add	sp, sp, #4
   15b28:	pop	{pc}		; (ldr pc, [sp], #4)
   15b2c:	str	fp, [sp, #-8]!
   15b30:	str	lr, [sp, #4]
   15b34:	add	fp, sp, #4
   15b38:	sub	sp, sp, #8
   15b3c:	str	r0, [fp, #-8]
   15b40:	ldr	r1, [fp, #-8]
   15b44:	mov	r0, #0
   15b48:	bl	15aec <__assert_fail@plt+0x4bf8>
   15b4c:	mov	r3, r0
   15b50:	mov	r0, r3
   15b54:	sub	sp, fp, #4
   15b58:	ldr	fp, [sp]
   15b5c:	add	sp, sp, #4
   15b60:	pop	{pc}		; (ldr pc, [sp], #4)
   15b64:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15b68:	strd	r6, [sp, #8]
   15b6c:	str	fp, [sp, #16]
   15b70:	str	lr, [sp, #20]
   15b74:	add	fp, sp, #20
   15b78:	sub	sp, sp, #48	; 0x30
   15b7c:	str	r0, [fp, #-24]	; 0xffffffe8
   15b80:	str	r1, [fp, #-28]	; 0xffffffe4
   15b84:	str	r2, [fp, #-32]	; 0xffffffe0
   15b88:	str	r3, [fp, #-36]	; 0xffffffdc
   15b8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15b90:	cmp	r3, #0
   15b94:	beq	15bbc <__assert_fail@plt+0x4cc8>
   15b98:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15b9c:	str	r3, [sp]
   15ba0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15ba4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15ba8:	movw	r1, #34444	; 0x868c
   15bac:	movt	r1, #1
   15bb0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15bb4:	bl	10e28 <fprintf@plt>
   15bb8:	b	15bd4 <__assert_fail@plt+0x4ce0>
   15bbc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15bc0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15bc4:	movw	r1, #34456	; 0x8698
   15bc8:	movt	r1, #1
   15bcc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15bd0:	bl	10e28 <fprintf@plt>
   15bd4:	movw	r0, #34464	; 0x86a0
   15bd8:	movt	r0, #1
   15bdc:	bl	10e10 <gettext@plt>
   15be0:	mov	r2, r0
   15be4:	movw	r3, #2022	; 0x7e6
   15be8:	movw	r1, #35248	; 0x89b0
   15bec:	movt	r1, #1
   15bf0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15bf4:	bl	10e28 <fprintf@plt>
   15bf8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15bfc:	mov	r0, #10
   15c00:	bl	10d2c <fputc_unlocked@plt>
   15c04:	movw	r0, #34468	; 0x86a4
   15c08:	movt	r0, #1
   15c0c:	bl	10e10 <gettext@plt>
   15c10:	mov	r3, r0
   15c14:	movw	r2, #34640	; 0x8750
   15c18:	movt	r2, #1
   15c1c:	mov	r1, r3
   15c20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15c24:	bl	10e28 <fprintf@plt>
   15c28:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15c2c:	mov	r0, #10
   15c30:	bl	10d2c <fputc_unlocked@plt>
   15c34:	ldr	r3, [fp, #8]
   15c38:	cmp	r3, #9
   15c3c:	ldrls	pc, [pc, r3, lsl #2]
   15c40:	b	16020 <__assert_fail@plt+0x512c>
   15c44:	andeq	r6, r1, ip, asr #1
   15c48:	andeq	r5, r1, ip, ror #24
   15c4c:	muleq	r1, r4, ip
   15c50:	andeq	r5, r1, r4, asr #25
   15c54:	andeq	r5, r1, r8, lsl #26
   15c58:	andeq	r5, r1, r4, ror #26
   15c5c:	ldrdeq	r5, [r1], -r0
   15c60:	andeq	r5, r1, ip, asr #28
   15c64:	ldrdeq	r5, [r1], -r8
   15c68:	andeq	r5, r1, r4, ror pc
   15c6c:	movw	r0, #34676	; 0x8774
   15c70:	movt	r0, #1
   15c74:	bl	10e10 <gettext@plt>
   15c78:	mov	r1, r0
   15c7c:	ldr	r3, [fp, #4]
   15c80:	ldr	r3, [r3]
   15c84:	mov	r2, r3
   15c88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15c8c:	bl	10e28 <fprintf@plt>
   15c90:	b	160d0 <__assert_fail@plt+0x51dc>
   15c94:	movw	r0, #34692	; 0x8784
   15c98:	movt	r0, #1
   15c9c:	bl	10e10 <gettext@plt>
   15ca0:	mov	r1, r0
   15ca4:	ldr	r3, [fp, #4]
   15ca8:	ldr	r2, [r3]
   15cac:	ldr	r3, [fp, #4]
   15cb0:	add	r3, r3, #4
   15cb4:	ldr	r3, [r3]
   15cb8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15cbc:	bl	10e28 <fprintf@plt>
   15cc0:	b	160d0 <__assert_fail@plt+0x51dc>
   15cc4:	movw	r0, #34716	; 0x879c
   15cc8:	movt	r0, #1
   15ccc:	bl	10e10 <gettext@plt>
   15cd0:	ldr	r3, [fp, #4]
   15cd4:	ldr	r2, [r3]
   15cd8:	ldr	r3, [fp, #4]
   15cdc:	add	r3, r3, #4
   15ce0:	ldr	r1, [r3]
   15ce4:	ldr	r3, [fp, #4]
   15ce8:	add	r3, r3, #8
   15cec:	ldr	r3, [r3]
   15cf0:	str	r3, [sp]
   15cf4:	mov	r3, r1
   15cf8:	mov	r1, r0
   15cfc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15d00:	bl	10e28 <fprintf@plt>
   15d04:	b	160d0 <__assert_fail@plt+0x51dc>
   15d08:	movw	r0, #34744	; 0x87b8
   15d0c:	movt	r0, #1
   15d10:	bl	10e10 <gettext@plt>
   15d14:	mov	ip, r0
   15d18:	ldr	r3, [fp, #4]
   15d1c:	ldr	r1, [r3]
   15d20:	ldr	r3, [fp, #4]
   15d24:	add	r3, r3, #4
   15d28:	ldr	r0, [r3]
   15d2c:	ldr	r3, [fp, #4]
   15d30:	add	r3, r3, #8
   15d34:	ldr	r3, [r3]
   15d38:	ldr	r2, [fp, #4]
   15d3c:	add	r2, r2, #12
   15d40:	ldr	r2, [r2]
   15d44:	str	r2, [sp, #4]
   15d48:	str	r3, [sp]
   15d4c:	mov	r3, r0
   15d50:	mov	r2, r1
   15d54:	mov	r1, ip
   15d58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15d5c:	bl	10e28 <fprintf@plt>
   15d60:	b	160d0 <__assert_fail@plt+0x51dc>
   15d64:	movw	r0, #34776	; 0x87d8
   15d68:	movt	r0, #1
   15d6c:	bl	10e10 <gettext@plt>
   15d70:	mov	lr, r0
   15d74:	ldr	r3, [fp, #4]
   15d78:	ldr	r0, [r3]
   15d7c:	ldr	r3, [fp, #4]
   15d80:	add	r3, r3, #4
   15d84:	ldr	ip, [r3]
   15d88:	ldr	r3, [fp, #4]
   15d8c:	add	r3, r3, #8
   15d90:	ldr	r3, [r3]
   15d94:	ldr	r2, [fp, #4]
   15d98:	add	r2, r2, #12
   15d9c:	ldr	r2, [r2]
   15da0:	ldr	r1, [fp, #4]
   15da4:	add	r1, r1, #16
   15da8:	ldr	r1, [r1]
   15dac:	str	r1, [sp, #8]
   15db0:	str	r2, [sp, #4]
   15db4:	str	r3, [sp]
   15db8:	mov	r3, ip
   15dbc:	mov	r2, r0
   15dc0:	mov	r1, lr
   15dc4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15dc8:	bl	10e28 <fprintf@plt>
   15dcc:	b	160d0 <__assert_fail@plt+0x51dc>
   15dd0:	movw	r0, #34812	; 0x87fc
   15dd4:	movt	r0, #1
   15dd8:	bl	10e10 <gettext@plt>
   15ddc:	mov	r4, r0
   15de0:	ldr	r3, [fp, #4]
   15de4:	ldr	ip, [r3]
   15de8:	ldr	r3, [fp, #4]
   15dec:	add	r3, r3, #4
   15df0:	ldr	lr, [r3]
   15df4:	ldr	r3, [fp, #4]
   15df8:	add	r3, r3, #8
   15dfc:	ldr	r3, [r3]
   15e00:	ldr	r2, [fp, #4]
   15e04:	add	r2, r2, #12
   15e08:	ldr	r2, [r2]
   15e0c:	ldr	r1, [fp, #4]
   15e10:	add	r1, r1, #16
   15e14:	ldr	r1, [r1]
   15e18:	ldr	r0, [fp, #4]
   15e1c:	add	r0, r0, #20
   15e20:	ldr	r0, [r0]
   15e24:	str	r0, [sp, #12]
   15e28:	str	r1, [sp, #8]
   15e2c:	str	r2, [sp, #4]
   15e30:	str	r3, [sp]
   15e34:	mov	r3, lr
   15e38:	mov	r2, ip
   15e3c:	mov	r1, r4
   15e40:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15e44:	bl	10e28 <fprintf@plt>
   15e48:	b	160d0 <__assert_fail@plt+0x51dc>
   15e4c:	movw	r0, #34852	; 0x8824
   15e50:	movt	r0, #1
   15e54:	bl	10e10 <gettext@plt>
   15e58:	mov	r5, r0
   15e5c:	ldr	r3, [fp, #4]
   15e60:	ldr	lr, [r3]
   15e64:	ldr	r3, [fp, #4]
   15e68:	add	r3, r3, #4
   15e6c:	ldr	r4, [r3]
   15e70:	ldr	r3, [fp, #4]
   15e74:	add	r3, r3, #8
   15e78:	ldr	r3, [r3]
   15e7c:	ldr	r2, [fp, #4]
   15e80:	add	r2, r2, #12
   15e84:	ldr	r2, [r2]
   15e88:	ldr	r1, [fp, #4]
   15e8c:	add	r1, r1, #16
   15e90:	ldr	r1, [r1]
   15e94:	ldr	r0, [fp, #4]
   15e98:	add	r0, r0, #20
   15e9c:	ldr	r0, [r0]
   15ea0:	ldr	ip, [fp, #4]
   15ea4:	add	ip, ip, #24
   15ea8:	ldr	ip, [ip]
   15eac:	str	ip, [sp, #16]
   15eb0:	str	r0, [sp, #12]
   15eb4:	str	r1, [sp, #8]
   15eb8:	str	r2, [sp, #4]
   15ebc:	str	r3, [sp]
   15ec0:	mov	r3, r4
   15ec4:	mov	r2, lr
   15ec8:	mov	r1, r5
   15ecc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15ed0:	bl	10e28 <fprintf@plt>
   15ed4:	b	160d0 <__assert_fail@plt+0x51dc>
   15ed8:	movw	r0, #34896	; 0x8850
   15edc:	movt	r0, #1
   15ee0:	bl	10e10 <gettext@plt>
   15ee4:	mov	r6, r0
   15ee8:	ldr	r3, [fp, #4]
   15eec:	ldr	r4, [r3]
   15ef0:	ldr	r3, [fp, #4]
   15ef4:	add	r3, r3, #4
   15ef8:	ldr	r5, [r3]
   15efc:	ldr	r3, [fp, #4]
   15f00:	add	r3, r3, #8
   15f04:	ldr	r3, [r3]
   15f08:	ldr	r2, [fp, #4]
   15f0c:	add	r2, r2, #12
   15f10:	ldr	r2, [r2]
   15f14:	ldr	r1, [fp, #4]
   15f18:	add	r1, r1, #16
   15f1c:	ldr	r1, [r1]
   15f20:	ldr	r0, [fp, #4]
   15f24:	add	r0, r0, #20
   15f28:	ldr	r0, [r0]
   15f2c:	ldr	ip, [fp, #4]
   15f30:	add	ip, ip, #24
   15f34:	ldr	ip, [ip]
   15f38:	ldr	lr, [fp, #4]
   15f3c:	add	lr, lr, #28
   15f40:	ldr	lr, [lr]
   15f44:	str	lr, [sp, #20]
   15f48:	str	ip, [sp, #16]
   15f4c:	str	r0, [sp, #12]
   15f50:	str	r1, [sp, #8]
   15f54:	str	r2, [sp, #4]
   15f58:	str	r3, [sp]
   15f5c:	mov	r3, r5
   15f60:	mov	r2, r4
   15f64:	mov	r1, r6
   15f68:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15f6c:	bl	10e28 <fprintf@plt>
   15f70:	b	160d0 <__assert_fail@plt+0x51dc>
   15f74:	movw	r0, #34944	; 0x8880
   15f78:	movt	r0, #1
   15f7c:	bl	10e10 <gettext@plt>
   15f80:	mov	r7, r0
   15f84:	ldr	r3, [fp, #4]
   15f88:	ldr	r5, [r3]
   15f8c:	ldr	r3, [fp, #4]
   15f90:	add	r3, r3, #4
   15f94:	ldr	r6, [r3]
   15f98:	ldr	r3, [fp, #4]
   15f9c:	add	r3, r3, #8
   15fa0:	ldr	r3, [r3]
   15fa4:	ldr	r2, [fp, #4]
   15fa8:	add	r2, r2, #12
   15fac:	ldr	r2, [r2]
   15fb0:	ldr	r1, [fp, #4]
   15fb4:	add	r1, r1, #16
   15fb8:	ldr	r1, [r1]
   15fbc:	ldr	r0, [fp, #4]
   15fc0:	add	r0, r0, #20
   15fc4:	ldr	r0, [r0]
   15fc8:	ldr	ip, [fp, #4]
   15fcc:	add	ip, ip, #24
   15fd0:	ldr	ip, [ip]
   15fd4:	ldr	lr, [fp, #4]
   15fd8:	add	lr, lr, #28
   15fdc:	ldr	lr, [lr]
   15fe0:	ldr	r4, [fp, #4]
   15fe4:	add	r4, r4, #32
   15fe8:	ldr	r4, [r4]
   15fec:	str	r4, [sp, #24]
   15ff0:	str	lr, [sp, #20]
   15ff4:	str	ip, [sp, #16]
   15ff8:	str	r0, [sp, #12]
   15ffc:	str	r1, [sp, #8]
   16000:	str	r2, [sp, #4]
   16004:	str	r3, [sp]
   16008:	mov	r3, r6
   1600c:	mov	r2, r5
   16010:	mov	r1, r7
   16014:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16018:	bl	10e28 <fprintf@plt>
   1601c:	b	160d0 <__assert_fail@plt+0x51dc>
   16020:	movw	r0, #34996	; 0x88b4
   16024:	movt	r0, #1
   16028:	bl	10e10 <gettext@plt>
   1602c:	mov	r7, r0
   16030:	ldr	r3, [fp, #4]
   16034:	ldr	r5, [r3]
   16038:	ldr	r3, [fp, #4]
   1603c:	add	r3, r3, #4
   16040:	ldr	r6, [r3]
   16044:	ldr	r3, [fp, #4]
   16048:	add	r3, r3, #8
   1604c:	ldr	r3, [r3]
   16050:	ldr	r2, [fp, #4]
   16054:	add	r2, r2, #12
   16058:	ldr	r2, [r2]
   1605c:	ldr	r1, [fp, #4]
   16060:	add	r1, r1, #16
   16064:	ldr	r1, [r1]
   16068:	ldr	r0, [fp, #4]
   1606c:	add	r0, r0, #20
   16070:	ldr	r0, [r0]
   16074:	ldr	ip, [fp, #4]
   16078:	add	ip, ip, #24
   1607c:	ldr	ip, [ip]
   16080:	ldr	lr, [fp, #4]
   16084:	add	lr, lr, #28
   16088:	ldr	lr, [lr]
   1608c:	ldr	r4, [fp, #4]
   16090:	add	r4, r4, #32
   16094:	ldr	r4, [r4]
   16098:	str	r4, [sp, #24]
   1609c:	str	lr, [sp, #20]
   160a0:	str	ip, [sp, #16]
   160a4:	str	r0, [sp, #12]
   160a8:	str	r1, [sp, #8]
   160ac:	str	r2, [sp, #4]
   160b0:	str	r3, [sp]
   160b4:	mov	r3, r6
   160b8:	mov	r2, r5
   160bc:	mov	r1, r7
   160c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   160c4:	bl	10e28 <fprintf@plt>
   160c8:	b	160d0 <__assert_fail@plt+0x51dc>
   160cc:	nop	{0}
   160d0:	nop	{0}
   160d4:	sub	sp, fp, #20
   160d8:	ldrd	r4, [sp]
   160dc:	ldrd	r6, [sp, #8]
   160e0:	ldr	fp, [sp, #16]
   160e4:	add	sp, sp, #20
   160e8:	pop	{pc}		; (ldr pc, [sp], #4)
   160ec:	str	fp, [sp, #-8]!
   160f0:	str	lr, [sp, #4]
   160f4:	add	fp, sp, #4
   160f8:	sub	sp, sp, #32
   160fc:	str	r0, [fp, #-16]
   16100:	str	r1, [fp, #-20]	; 0xffffffec
   16104:	str	r2, [fp, #-24]	; 0xffffffe8
   16108:	str	r3, [fp, #-28]	; 0xffffffe4
   1610c:	mov	r3, #0
   16110:	str	r3, [fp, #-8]
   16114:	b	16124 <__assert_fail@plt+0x5230>
   16118:	ldr	r3, [fp, #-8]
   1611c:	add	r3, r3, #1
   16120:	str	r3, [fp, #-8]
   16124:	ldr	r3, [fp, #-8]
   16128:	lsl	r3, r3, #2
   1612c:	ldr	r2, [fp, #4]
   16130:	add	r3, r2, r3
   16134:	ldr	r3, [r3]
   16138:	cmp	r3, #0
   1613c:	bne	16118 <__assert_fail@plt+0x5224>
   16140:	ldr	r3, [fp, #-8]
   16144:	str	r3, [sp, #4]
   16148:	ldr	r3, [fp, #4]
   1614c:	str	r3, [sp]
   16150:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16154:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16158:	ldr	r1, [fp, #-20]	; 0xffffffec
   1615c:	ldr	r0, [fp, #-16]
   16160:	bl	15b64 <__assert_fail@plt+0x4c70>
   16164:	nop	{0}
   16168:	sub	sp, fp, #4
   1616c:	ldr	fp, [sp]
   16170:	add	sp, sp, #4
   16174:	pop	{pc}		; (ldr pc, [sp], #4)
   16178:	str	fp, [sp, #-8]!
   1617c:	str	lr, [sp, #4]
   16180:	add	fp, sp, #4
   16184:	sub	sp, sp, #72	; 0x48
   16188:	str	r0, [fp, #-56]	; 0xffffffc8
   1618c:	str	r1, [fp, #-60]	; 0xffffffc4
   16190:	str	r2, [fp, #-64]	; 0xffffffc0
   16194:	str	r3, [fp, #-68]	; 0xffffffbc
   16198:	mov	r3, #0
   1619c:	str	r3, [fp, #-8]
   161a0:	b	161b0 <__assert_fail@plt+0x52bc>
   161a4:	ldr	r3, [fp, #-8]
   161a8:	add	r3, r3, #1
   161ac:	str	r3, [fp, #-8]
   161b0:	ldr	r3, [fp, #-8]
   161b4:	cmp	r3, #9
   161b8:	bhi	161fc <__assert_fail@plt+0x5308>
   161bc:	ldr	r3, [fp, #4]
   161c0:	add	r2, r3, #4
   161c4:	str	r2, [fp, #4]
   161c8:	ldr	r2, [r3]
   161cc:	ldr	r3, [fp, #-8]
   161d0:	lsl	r3, r3, #2
   161d4:	sub	r1, fp, #4
   161d8:	add	r3, r1, r3
   161dc:	str	r2, [r3, #-44]	; 0xffffffd4
   161e0:	ldr	r3, [fp, #-8]
   161e4:	lsl	r3, r3, #2
   161e8:	sub	r2, fp, #4
   161ec:	add	r3, r2, r3
   161f0:	ldr	r3, [r3, #-44]	; 0xffffffd4
   161f4:	cmp	r3, #0
   161f8:	bne	161a4 <__assert_fail@plt+0x52b0>
   161fc:	ldr	r3, [fp, #-8]
   16200:	str	r3, [sp, #4]
   16204:	sub	r3, fp, #48	; 0x30
   16208:	str	r3, [sp]
   1620c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16210:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16214:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16218:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1621c:	bl	15b64 <__assert_fail@plt+0x4c70>
   16220:	nop	{0}
   16224:	sub	sp, fp, #4
   16228:	ldr	fp, [sp]
   1622c:	add	sp, sp, #4
   16230:	pop	{pc}		; (ldr pc, [sp], #4)
   16234:	push	{r3}		; (str r3, [sp, #-4]!)
   16238:	str	fp, [sp, #-8]!
   1623c:	str	lr, [sp, #4]
   16240:	add	fp, sp, #4
   16244:	sub	sp, sp, #36	; 0x24
   16248:	str	r0, [fp, #-20]	; 0xffffffec
   1624c:	str	r1, [fp, #-24]	; 0xffffffe8
   16250:	str	r2, [fp, #-28]	; 0xffffffe4
   16254:	add	r3, fp, #8
   16258:	str	r3, [fp, #-12]
   1625c:	ldr	r3, [fp, #-12]
   16260:	str	r3, [sp]
   16264:	ldr	r3, [fp, #4]
   16268:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1626c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16270:	ldr	r0, [fp, #-20]	; 0xffffffec
   16274:	bl	16178 <__assert_fail@plt+0x5284>
   16278:	nop	{0}
   1627c:	sub	sp, fp, #4
   16280:	ldr	fp, [sp]
   16284:	ldr	lr, [sp, #4]
   16288:	add	sp, sp, #8
   1628c:	add	sp, sp, #4
   16290:	bx	lr
   16294:	str	fp, [sp, #-8]!
   16298:	str	lr, [sp, #4]
   1629c:	add	fp, sp, #4
   162a0:	movw	r3, #37204	; 0x9154
   162a4:	movt	r3, #2
   162a8:	ldr	r3, [r3]
   162ac:	mov	r1, r3
   162b0:	mov	r0, #10
   162b4:	bl	10d2c <fputc_unlocked@plt>
   162b8:	movw	r0, #35056	; 0x88f0
   162bc:	movt	r0, #1
   162c0:	bl	10e10 <gettext@plt>
   162c4:	mov	r3, r0
   162c8:	movw	r1, #35076	; 0x8904
   162cc:	movt	r1, #1
   162d0:	mov	r0, r3
   162d4:	bl	10ccc <printf@plt>
   162d8:	movw	r0, #35100	; 0x891c
   162dc:	movt	r0, #1
   162e0:	bl	10e10 <gettext@plt>
   162e4:	mov	r3, r0
   162e8:	movw	r2, #35120	; 0x8930
   162ec:	movt	r2, #1
   162f0:	movw	r1, #35160	; 0x8958
   162f4:	movt	r1, #1
   162f8:	mov	r0, r3
   162fc:	bl	10ccc <printf@plt>
   16300:	movw	r0, #35176	; 0x8968
   16304:	movt	r0, #1
   16308:	bl	10e10 <gettext@plt>
   1630c:	mov	r3, r0
   16310:	movw	r1, #35216	; 0x8990
   16314:	movt	r1, #1
   16318:	mov	r0, r3
   1631c:	bl	10ccc <printf@plt>
   16320:	nop	{0}
   16324:	sub	sp, fp, #4
   16328:	ldr	fp, [sp]
   1632c:	add	sp, sp, #4
   16330:	pop	{pc}		; (ldr pc, [sp], #4)
   16334:	str	fp, [sp, #-8]!
   16338:	str	lr, [sp, #4]
   1633c:	add	fp, sp, #4
   16340:	sub	sp, sp, #16
   16344:	str	r0, [fp, #-8]
   16348:	str	r1, [fp, #-12]
   1634c:	str	r2, [fp, #-16]
   16350:	ldr	r2, [fp, #-16]
   16354:	ldr	r1, [fp, #-12]
   16358:	ldr	r0, [fp, #-8]
   1635c:	bl	16518 <__assert_fail@plt+0x5624>
   16360:	mov	r3, r0
   16364:	mov	r0, r3
   16368:	sub	sp, fp, #4
   1636c:	ldr	fp, [sp]
   16370:	add	sp, sp, #4
   16374:	pop	{pc}		; (ldr pc, [sp], #4)
   16378:	str	fp, [sp, #-8]!
   1637c:	str	lr, [sp, #4]
   16380:	add	fp, sp, #4
   16384:	sub	sp, sp, #8
   16388:	str	r0, [fp, #-8]
   1638c:	ldr	r3, [fp, #-8]
   16390:	cmp	r3, #0
   16394:	bne	1639c <__assert_fail@plt+0x54a8>
   16398:	bl	16c28 <__assert_fail@plt+0x5d34>
   1639c:	ldr	r3, [fp, #-8]
   163a0:	mov	r0, r3
   163a4:	sub	sp, fp, #4
   163a8:	ldr	fp, [sp]
   163ac:	add	sp, sp, #4
   163b0:	pop	{pc}		; (ldr pc, [sp], #4)
   163b4:	str	fp, [sp, #-8]!
   163b8:	str	lr, [sp, #4]
   163bc:	add	fp, sp, #4
   163c0:	sub	sp, sp, #8
   163c4:	str	r0, [fp, #-8]
   163c8:	ldr	r0, [fp, #-8]
   163cc:	bl	16d3c <__assert_fail@plt+0x5e48>
   163d0:	mov	r3, r0
   163d4:	mov	r0, r3
   163d8:	bl	16378 <__assert_fail@plt+0x5484>
   163dc:	mov	r3, r0
   163e0:	mov	r0, r3
   163e4:	sub	sp, fp, #4
   163e8:	ldr	fp, [sp]
   163ec:	add	sp, sp, #4
   163f0:	pop	{pc}		; (ldr pc, [sp], #4)
   163f4:	str	fp, [sp, #-8]!
   163f8:	str	lr, [sp, #4]
   163fc:	add	fp, sp, #4
   16400:	sub	sp, sp, #8
   16404:	str	r0, [fp, #-8]
   16408:	ldr	r0, [fp, #-8]
   1640c:	bl	17048 <__assert_fail@plt+0x6154>
   16410:	mov	r3, r0
   16414:	mov	r0, r3
   16418:	bl	16378 <__assert_fail@plt+0x5484>
   1641c:	mov	r3, r0
   16420:	mov	r0, r3
   16424:	sub	sp, fp, #4
   16428:	ldr	fp, [sp]
   1642c:	add	sp, sp, #4
   16430:	pop	{pc}		; (ldr pc, [sp], #4)
   16434:	str	fp, [sp, #-8]!
   16438:	str	lr, [sp, #4]
   1643c:	add	fp, sp, #4
   16440:	sub	sp, sp, #8
   16444:	str	r0, [fp, #-8]
   16448:	ldr	r0, [fp, #-8]
   1644c:	bl	163b4 <__assert_fail@plt+0x54c0>
   16450:	mov	r3, r0
   16454:	mov	r0, r3
   16458:	sub	sp, fp, #4
   1645c:	ldr	fp, [sp]
   16460:	add	sp, sp, #4
   16464:	pop	{pc}		; (ldr pc, [sp], #4)
   16468:	str	fp, [sp, #-8]!
   1646c:	str	lr, [sp, #4]
   16470:	add	fp, sp, #4
   16474:	sub	sp, sp, #16
   16478:	str	r0, [fp, #-16]
   1647c:	str	r1, [fp, #-20]	; 0xffffffec
   16480:	ldr	r1, [fp, #-20]	; 0xffffffec
   16484:	ldr	r0, [fp, #-16]
   16488:	bl	16dcc <__assert_fail@plt+0x5ed8>
   1648c:	str	r0, [fp, #-8]
   16490:	ldr	r3, [fp, #-8]
   16494:	cmp	r3, #0
   16498:	bne	164b8 <__assert_fail@plt+0x55c4>
   1649c:	ldr	r3, [fp, #-16]
   164a0:	cmp	r3, #0
   164a4:	beq	164b4 <__assert_fail@plt+0x55c0>
   164a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   164ac:	cmp	r3, #0
   164b0:	beq	164b8 <__assert_fail@plt+0x55c4>
   164b4:	bl	16c28 <__assert_fail@plt+0x5d34>
   164b8:	ldr	r3, [fp, #-8]
   164bc:	mov	r0, r3
   164c0:	sub	sp, fp, #4
   164c4:	ldr	fp, [sp]
   164c8:	add	sp, sp, #4
   164cc:	pop	{pc}		; (ldr pc, [sp], #4)
   164d0:	str	fp, [sp, #-8]!
   164d4:	str	lr, [sp, #4]
   164d8:	add	fp, sp, #4
   164dc:	sub	sp, sp, #8
   164e0:	str	r0, [fp, #-8]
   164e4:	str	r1, [fp, #-12]
   164e8:	ldr	r1, [fp, #-12]
   164ec:	ldr	r0, [fp, #-8]
   164f0:	bl	17080 <__assert_fail@plt+0x618c>
   164f4:	mov	r3, r0
   164f8:	mov	r0, r3
   164fc:	bl	16378 <__assert_fail@plt+0x5484>
   16500:	mov	r3, r0
   16504:	mov	r0, r3
   16508:	sub	sp, fp, #4
   1650c:	ldr	fp, [sp]
   16510:	add	sp, sp, #4
   16514:	pop	{pc}		; (ldr pc, [sp], #4)
   16518:	str	fp, [sp, #-8]!
   1651c:	str	lr, [sp, #4]
   16520:	add	fp, sp, #4
   16524:	sub	sp, sp, #24
   16528:	str	r0, [fp, #-16]
   1652c:	str	r1, [fp, #-20]	; 0xffffffec
   16530:	str	r2, [fp, #-24]	; 0xffffffe8
   16534:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16538:	ldr	r1, [fp, #-20]	; 0xffffffec
   1653c:	ldr	r0, [fp, #-16]
   16540:	bl	172b0 <__assert_fail@plt+0x63bc>
   16544:	str	r0, [fp, #-8]
   16548:	ldr	r3, [fp, #-8]
   1654c:	cmp	r3, #0
   16550:	bne	1657c <__assert_fail@plt+0x5688>
   16554:	ldr	r3, [fp, #-16]
   16558:	cmp	r3, #0
   1655c:	beq	16578 <__assert_fail@plt+0x5684>
   16560:	ldr	r3, [fp, #-20]	; 0xffffffec
   16564:	cmp	r3, #0
   16568:	beq	1657c <__assert_fail@plt+0x5688>
   1656c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16570:	cmp	r3, #0
   16574:	beq	1657c <__assert_fail@plt+0x5688>
   16578:	bl	16c28 <__assert_fail@plt+0x5d34>
   1657c:	ldr	r3, [fp, #-8]
   16580:	mov	r0, r3
   16584:	sub	sp, fp, #4
   16588:	ldr	fp, [sp]
   1658c:	add	sp, sp, #4
   16590:	pop	{pc}		; (ldr pc, [sp], #4)
   16594:	str	fp, [sp, #-8]!
   16598:	str	lr, [sp, #4]
   1659c:	add	fp, sp, #4
   165a0:	sub	sp, sp, #16
   165a4:	str	r0, [fp, #-8]
   165a8:	str	r1, [fp, #-12]
   165ac:	str	r2, [fp, #-16]
   165b0:	ldr	r2, [fp, #-16]
   165b4:	ldr	r1, [fp, #-12]
   165b8:	ldr	r0, [fp, #-8]
   165bc:	bl	17120 <__assert_fail@plt+0x622c>
   165c0:	mov	r3, r0
   165c4:	mov	r0, r3
   165c8:	bl	16378 <__assert_fail@plt+0x5484>
   165cc:	mov	r3, r0
   165d0:	mov	r0, r3
   165d4:	sub	sp, fp, #4
   165d8:	ldr	fp, [sp]
   165dc:	add	sp, sp, #4
   165e0:	pop	{pc}		; (ldr pc, [sp], #4)
   165e4:	str	fp, [sp, #-8]!
   165e8:	str	lr, [sp, #4]
   165ec:	add	fp, sp, #4
   165f0:	sub	sp, sp, #8
   165f4:	str	r0, [fp, #-8]
   165f8:	str	r1, [fp, #-12]
   165fc:	ldr	r2, [fp, #-12]
   16600:	ldr	r1, [fp, #-8]
   16604:	mov	r0, #0
   16608:	bl	16518 <__assert_fail@plt+0x5624>
   1660c:	mov	r3, r0
   16610:	mov	r0, r3
   16614:	sub	sp, fp, #4
   16618:	ldr	fp, [sp]
   1661c:	add	sp, sp, #4
   16620:	pop	{pc}		; (ldr pc, [sp], #4)
   16624:	str	fp, [sp, #-8]!
   16628:	str	lr, [sp, #4]
   1662c:	add	fp, sp, #4
   16630:	sub	sp, sp, #8
   16634:	str	r0, [fp, #-8]
   16638:	str	r1, [fp, #-12]
   1663c:	ldr	r2, [fp, #-12]
   16640:	ldr	r1, [fp, #-8]
   16644:	mov	r0, #0
   16648:	bl	16594 <__assert_fail@plt+0x56a0>
   1664c:	mov	r3, r0
   16650:	mov	r0, r3
   16654:	sub	sp, fp, #4
   16658:	ldr	fp, [sp]
   1665c:	add	sp, sp, #4
   16660:	pop	{pc}		; (ldr pc, [sp], #4)
   16664:	str	fp, [sp, #-8]!
   16668:	str	lr, [sp, #4]
   1666c:	add	fp, sp, #4
   16670:	sub	sp, sp, #8
   16674:	str	r0, [fp, #-8]
   16678:	str	r1, [fp, #-12]
   1667c:	mov	r2, #1
   16680:	ldr	r1, [fp, #-12]
   16684:	ldr	r0, [fp, #-8]
   16688:	bl	166a4 <__assert_fail@plt+0x57b0>
   1668c:	mov	r3, r0
   16690:	mov	r0, r3
   16694:	sub	sp, fp, #4
   16698:	ldr	fp, [sp]
   1669c:	add	sp, sp, #4
   166a0:	pop	{pc}		; (ldr pc, [sp], #4)
   166a4:	str	fp, [sp, #-8]!
   166a8:	str	lr, [sp, #4]
   166ac:	add	fp, sp, #4
   166b0:	sub	sp, sp, #24
   166b4:	str	r0, [fp, #-16]
   166b8:	str	r1, [fp, #-20]	; 0xffffffec
   166bc:	str	r2, [fp, #-24]	; 0xffffffe8
   166c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   166c4:	ldr	r3, [r3]
   166c8:	str	r3, [fp, #-8]
   166cc:	ldr	r3, [fp, #-16]
   166d0:	cmp	r3, #0
   166d4:	bne	1671c <__assert_fail@plt+0x5828>
   166d8:	ldr	r3, [fp, #-8]
   166dc:	cmp	r3, #0
   166e0:	bne	16758 <__assert_fail@plt+0x5864>
   166e4:	mov	r2, #64	; 0x40
   166e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   166ec:	udiv	r3, r2, r3
   166f0:	str	r3, [fp, #-8]
   166f4:	ldr	r3, [fp, #-8]
   166f8:	cmp	r3, #0
   166fc:	moveq	r3, #1
   16700:	movne	r3, #0
   16704:	uxtb	r3, r3
   16708:	mov	r2, r3
   1670c:	ldr	r3, [fp, #-8]
   16710:	add	r3, r2, r3
   16714:	str	r3, [fp, #-8]
   16718:	b	16758 <__assert_fail@plt+0x5864>
   1671c:	ldr	r2, [fp, #-8]
   16720:	ldr	r3, [fp, #-8]
   16724:	lsr	r3, r3, #1
   16728:	add	r3, r3, #1
   1672c:	mov	r1, #0
   16730:	adds	r3, r2, r3
   16734:	bcc	1673c <__assert_fail@plt+0x5848>
   16738:	mov	r1, #1
   1673c:	str	r3, [fp, #-8]
   16740:	mov	r3, r1
   16744:	and	r3, r3, #1
   16748:	uxtb	r3, r3
   1674c:	cmp	r3, #0
   16750:	beq	16758 <__assert_fail@plt+0x5864>
   16754:	bl	16c28 <__assert_fail@plt+0x5d34>
   16758:	ldr	r3, [fp, #-8]
   1675c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16760:	mov	r1, r3
   16764:	ldr	r0, [fp, #-16]
   16768:	bl	16518 <__assert_fail@plt+0x5624>
   1676c:	str	r0, [fp, #-16]
   16770:	ldr	r2, [fp, #-8]
   16774:	ldr	r3, [fp, #-20]	; 0xffffffec
   16778:	str	r2, [r3]
   1677c:	ldr	r3, [fp, #-16]
   16780:	mov	r0, r3
   16784:	sub	sp, fp, #4
   16788:	ldr	fp, [sp]
   1678c:	add	sp, sp, #4
   16790:	pop	{pc}		; (ldr pc, [sp], #4)
   16794:	str	fp, [sp, #-8]!
   16798:	str	lr, [sp, #4]
   1679c:	add	fp, sp, #4
   167a0:	sub	sp, sp, #32
   167a4:	str	r0, [fp, #-24]	; 0xffffffe8
   167a8:	str	r1, [fp, #-28]	; 0xffffffe4
   167ac:	str	r2, [fp, #-32]	; 0xffffffe0
   167b0:	str	r3, [fp, #-36]	; 0xffffffdc
   167b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   167b8:	ldr	r3, [r3]
   167bc:	str	r3, [fp, #-8]
   167c0:	ldr	r3, [fp, #-8]
   167c4:	asr	r3, r3, #1
   167c8:	mov	r1, #0
   167cc:	ldr	r2, [fp, #-8]
   167d0:	adds	r3, r2, r3
   167d4:	bvc	167dc <__assert_fail@plt+0x58e8>
   167d8:	mov	r1, #1
   167dc:	str	r3, [fp, #-16]
   167e0:	mov	r3, r1
   167e4:	and	r3, r3, #1
   167e8:	uxtb	r3, r3
   167ec:	cmp	r3, #0
   167f0:	beq	167fc <__assert_fail@plt+0x5908>
   167f4:	mvn	r3, #-2147483648	; 0x80000000
   167f8:	str	r3, [fp, #-16]
   167fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16800:	cmp	r3, #0
   16804:	blt	16820 <__assert_fail@plt+0x592c>
   16808:	ldr	r3, [fp, #-16]
   1680c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16810:	cmp	r2, r3
   16814:	bge	16820 <__assert_fail@plt+0x592c>
   16818:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1681c:	str	r3, [fp, #-16]
   16820:	ldr	r2, [fp, #-16]
   16824:	mov	lr, #0
   16828:	ldr	r3, [fp, #4]
   1682c:	smull	r2, r3, r2, r3
   16830:	mov	r0, #0
   16834:	mov	r1, #0
   16838:	mov	r0, r3
   1683c:	asr	r1, r3, #31
   16840:	asr	ip, r2, #31
   16844:	cmp	ip, r0
   16848:	beq	16850 <__assert_fail@plt+0x595c>
   1684c:	mov	lr, #1
   16850:	mov	r3, r2
   16854:	str	r3, [fp, #-20]	; 0xffffffec
   16858:	mov	r3, lr
   1685c:	and	r3, r3, #1
   16860:	uxtb	r3, r3
   16864:	cmp	r3, #0
   16868:	beq	16874 <__assert_fail@plt+0x5980>
   1686c:	mvn	r3, #-2147483648	; 0x80000000
   16870:	b	1688c <__assert_fail@plt+0x5998>
   16874:	ldr	r3, [fp, #-20]	; 0xffffffec
   16878:	cmp	r3, #63	; 0x3f
   1687c:	bgt	16888 <__assert_fail@plt+0x5994>
   16880:	mov	r3, #64	; 0x40
   16884:	b	1688c <__assert_fail@plt+0x5998>
   16888:	mov	r3, #0
   1688c:	str	r3, [fp, #-12]
   16890:	ldr	r3, [fp, #-12]
   16894:	cmp	r3, #0
   16898:	beq	168d0 <__assert_fail@plt+0x59dc>
   1689c:	ldr	r2, [fp, #-12]
   168a0:	ldr	r3, [fp, #4]
   168a4:	sdiv	r3, r2, r3
   168a8:	str	r3, [fp, #-16]
   168ac:	ldr	r3, [fp, #-12]
   168b0:	ldr	r2, [fp, #4]
   168b4:	sdiv	r2, r3, r2
   168b8:	ldr	r1, [fp, #4]
   168bc:	mul	r2, r1, r2
   168c0:	sub	r3, r3, r2
   168c4:	ldr	r2, [fp, #-12]
   168c8:	sub	r3, r2, r3
   168cc:	str	r3, [fp, #-20]	; 0xffffffec
   168d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   168d4:	cmp	r3, #0
   168d8:	bne	168e8 <__assert_fail@plt+0x59f4>
   168dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   168e0:	mov	r2, #0
   168e4:	str	r2, [r3]
   168e8:	ldr	r2, [fp, #-16]
   168ec:	ldr	r3, [fp, #-8]
   168f0:	sub	r3, r2, r3
   168f4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   168f8:	cmp	r2, r3
   168fc:	ble	1699c <__assert_fail@plt+0x5aa8>
   16900:	mov	r1, #0
   16904:	ldr	r2, [fp, #-8]
   16908:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1690c:	adds	r3, r2, r3
   16910:	bvc	16918 <__assert_fail@plt+0x5a24>
   16914:	mov	r1, #1
   16918:	str	r3, [fp, #-16]
   1691c:	mov	r3, r1
   16920:	and	r3, r3, #1
   16924:	uxtb	r3, r3
   16928:	cmp	r3, #0
   1692c:	bne	16998 <__assert_fail@plt+0x5aa4>
   16930:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16934:	cmp	r3, #0
   16938:	blt	1694c <__assert_fail@plt+0x5a58>
   1693c:	ldr	r3, [fp, #-16]
   16940:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16944:	cmp	r2, r3
   16948:	blt	16998 <__assert_fail@plt+0x5aa4>
   1694c:	ldr	r2, [fp, #-16]
   16950:	mov	lr, #0
   16954:	ldr	r3, [fp, #4]
   16958:	smull	r2, r3, r2, r3
   1695c:	mov	r0, #0
   16960:	mov	r1, #0
   16964:	mov	r0, r3
   16968:	asr	r1, r3, #31
   1696c:	asr	ip, r2, #31
   16970:	cmp	ip, r0
   16974:	beq	1697c <__assert_fail@plt+0x5a88>
   16978:	mov	lr, #1
   1697c:	mov	r3, r2
   16980:	str	r3, [fp, #-20]	; 0xffffffec
   16984:	mov	r3, lr
   16988:	and	r3, r3, #1
   1698c:	uxtb	r3, r3
   16990:	cmp	r3, #0
   16994:	beq	1699c <__assert_fail@plt+0x5aa8>
   16998:	bl	16c28 <__assert_fail@plt+0x5d34>
   1699c:	ldr	r3, [fp, #-20]	; 0xffffffec
   169a0:	mov	r1, r3
   169a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   169a8:	bl	16468 <__assert_fail@plt+0x5574>
   169ac:	str	r0, [fp, #-24]	; 0xffffffe8
   169b0:	ldr	r2, [fp, #-16]
   169b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   169b8:	str	r2, [r3]
   169bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   169c0:	mov	r0, r3
   169c4:	sub	sp, fp, #4
   169c8:	ldr	fp, [sp]
   169cc:	add	sp, sp, #4
   169d0:	pop	{pc}		; (ldr pc, [sp], #4)
   169d4:	str	fp, [sp, #-8]!
   169d8:	str	lr, [sp, #4]
   169dc:	add	fp, sp, #4
   169e0:	sub	sp, sp, #8
   169e4:	str	r0, [fp, #-8]
   169e8:	mov	r1, #1
   169ec:	ldr	r0, [fp, #-8]
   169f0:	bl	16a44 <__assert_fail@plt+0x5b50>
   169f4:	mov	r3, r0
   169f8:	mov	r0, r3
   169fc:	sub	sp, fp, #4
   16a00:	ldr	fp, [sp]
   16a04:	add	sp, sp, #4
   16a08:	pop	{pc}		; (ldr pc, [sp], #4)
   16a0c:	str	fp, [sp, #-8]!
   16a10:	str	lr, [sp, #4]
   16a14:	add	fp, sp, #4
   16a18:	sub	sp, sp, #8
   16a1c:	str	r0, [fp, #-8]
   16a20:	mov	r1, #1
   16a24:	ldr	r0, [fp, #-8]
   16a28:	bl	16a8c <__assert_fail@plt+0x5b98>
   16a2c:	mov	r3, r0
   16a30:	mov	r0, r3
   16a34:	sub	sp, fp, #4
   16a38:	ldr	fp, [sp]
   16a3c:	add	sp, sp, #4
   16a40:	pop	{pc}		; (ldr pc, [sp], #4)
   16a44:	str	fp, [sp, #-8]!
   16a48:	str	lr, [sp, #4]
   16a4c:	add	fp, sp, #4
   16a50:	sub	sp, sp, #8
   16a54:	str	r0, [fp, #-8]
   16a58:	str	r1, [fp, #-12]
   16a5c:	ldr	r1, [fp, #-12]
   16a60:	ldr	r0, [fp, #-8]
   16a64:	bl	16c6c <__assert_fail@plt+0x5d78>
   16a68:	mov	r3, r0
   16a6c:	mov	r0, r3
   16a70:	bl	16378 <__assert_fail@plt+0x5484>
   16a74:	mov	r3, r0
   16a78:	mov	r0, r3
   16a7c:	sub	sp, fp, #4
   16a80:	ldr	fp, [sp]
   16a84:	add	sp, sp, #4
   16a88:	pop	{pc}		; (ldr pc, [sp], #4)
   16a8c:	str	fp, [sp, #-8]!
   16a90:	str	lr, [sp, #4]
   16a94:	add	fp, sp, #4
   16a98:	sub	sp, sp, #8
   16a9c:	str	r0, [fp, #-8]
   16aa0:	str	r1, [fp, #-12]
   16aa4:	ldr	r1, [fp, #-12]
   16aa8:	ldr	r0, [fp, #-8]
   16aac:	bl	170dc <__assert_fail@plt+0x61e8>
   16ab0:	mov	r3, r0
   16ab4:	mov	r0, r3
   16ab8:	bl	16378 <__assert_fail@plt+0x5484>
   16abc:	mov	r3, r0
   16ac0:	mov	r0, r3
   16ac4:	sub	sp, fp, #4
   16ac8:	ldr	fp, [sp]
   16acc:	add	sp, sp, #4
   16ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ad4:	str	fp, [sp, #-8]!
   16ad8:	str	lr, [sp, #4]
   16adc:	add	fp, sp, #4
   16ae0:	sub	sp, sp, #8
   16ae4:	str	r0, [fp, #-8]
   16ae8:	str	r1, [fp, #-12]
   16aec:	ldr	r0, [fp, #-12]
   16af0:	bl	163b4 <__assert_fail@plt+0x54c0>
   16af4:	mov	r3, r0
   16af8:	ldr	r2, [fp, #-12]
   16afc:	ldr	r1, [fp, #-8]
   16b00:	mov	r0, r3
   16b04:	bl	10cfc <memcpy@plt>
   16b08:	mov	r3, r0
   16b0c:	mov	r0, r3
   16b10:	sub	sp, fp, #4
   16b14:	ldr	fp, [sp]
   16b18:	add	sp, sp, #4
   16b1c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b20:	str	fp, [sp, #-8]!
   16b24:	str	lr, [sp, #4]
   16b28:	add	fp, sp, #4
   16b2c:	sub	sp, sp, #8
   16b30:	str	r0, [fp, #-8]
   16b34:	str	r1, [fp, #-12]
   16b38:	ldr	r0, [fp, #-12]
   16b3c:	bl	163f4 <__assert_fail@plt+0x5500>
   16b40:	mov	r3, r0
   16b44:	mov	r0, r3
   16b48:	ldr	r3, [fp, #-12]
   16b4c:	mov	r2, r3
   16b50:	ldr	r1, [fp, #-8]
   16b54:	bl	10cfc <memcpy@plt>
   16b58:	mov	r3, r0
   16b5c:	mov	r0, r3
   16b60:	sub	sp, fp, #4
   16b64:	ldr	fp, [sp]
   16b68:	add	sp, sp, #4
   16b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b70:	str	fp, [sp, #-8]!
   16b74:	str	lr, [sp, #4]
   16b78:	add	fp, sp, #4
   16b7c:	sub	sp, sp, #16
   16b80:	str	r0, [fp, #-16]
   16b84:	str	r1, [fp, #-20]	; 0xffffffec
   16b88:	ldr	r3, [fp, #-20]	; 0xffffffec
   16b8c:	add	r3, r3, #1
   16b90:	mov	r0, r3
   16b94:	bl	163f4 <__assert_fail@plt+0x5500>
   16b98:	mov	r3, r0
   16b9c:	str	r3, [fp, #-8]
   16ba0:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ba4:	ldr	r2, [fp, #-8]
   16ba8:	add	r3, r2, r3
   16bac:	mov	r2, #0
   16bb0:	strb	r2, [r3]
   16bb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   16bb8:	mov	r2, r3
   16bbc:	ldr	r1, [fp, #-16]
   16bc0:	ldr	r0, [fp, #-8]
   16bc4:	bl	10cfc <memcpy@plt>
   16bc8:	mov	r3, r0
   16bcc:	mov	r0, r3
   16bd0:	sub	sp, fp, #4
   16bd4:	ldr	fp, [sp]
   16bd8:	add	sp, sp, #4
   16bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   16be0:	str	fp, [sp, #-8]!
   16be4:	str	lr, [sp, #4]
   16be8:	add	fp, sp, #4
   16bec:	sub	sp, sp, #8
   16bf0:	str	r0, [fp, #-8]
   16bf4:	ldr	r0, [fp, #-8]
   16bf8:	bl	10e1c <strlen@plt>
   16bfc:	mov	r3, r0
   16c00:	add	r3, r3, #1
   16c04:	mov	r1, r3
   16c08:	ldr	r0, [fp, #-8]
   16c0c:	bl	16ad4 <__assert_fail@plt+0x5be0>
   16c10:	mov	r3, r0
   16c14:	mov	r0, r3
   16c18:	sub	sp, fp, #4
   16c1c:	ldr	fp, [sp]
   16c20:	add	sp, sp, #4
   16c24:	pop	{pc}		; (ldr pc, [sp], #4)
   16c28:	strd	r4, [sp, #-16]!
   16c2c:	str	fp, [sp, #8]
   16c30:	str	lr, [sp, #12]
   16c34:	add	fp, sp, #12
   16c38:	movw	r3, #37108	; 0x90f4
   16c3c:	movt	r3, #2
   16c40:	ldr	r4, [r3]
   16c44:	movw	r0, #35296	; 0x89e0
   16c48:	movt	r0, #1
   16c4c:	bl	10e10 <gettext@plt>
   16c50:	mov	r3, r0
   16c54:	movw	r2, #35316	; 0x89f4
   16c58:	movt	r2, #1
   16c5c:	mov	r1, #0
   16c60:	mov	r0, r4
   16c64:	bl	10db0 <error@plt>
   16c68:	bl	10ed0 <abort@plt>
   16c6c:	str	fp, [sp, #-8]!
   16c70:	str	lr, [sp, #4]
   16c74:	add	fp, sp, #4
   16c78:	sub	sp, sp, #16
   16c7c:	str	r0, [fp, #-16]
   16c80:	str	r1, [fp, #-20]	; 0xffffffec
   16c84:	ldr	r3, [fp, #-16]
   16c88:	cmp	r3, #0
   16c8c:	beq	16c9c <__assert_fail@plt+0x5da8>
   16c90:	ldr	r3, [fp, #-20]	; 0xffffffec
   16c94:	cmp	r3, #0
   16c98:	bne	16cac <__assert_fail@plt+0x5db8>
   16c9c:	mov	r3, #1
   16ca0:	str	r3, [fp, #-20]	; 0xffffffec
   16ca4:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ca8:	str	r3, [fp, #-16]
   16cac:	mov	ip, #0
   16cb0:	ldr	r2, [fp, #-16]
   16cb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   16cb8:	umull	r0, r1, r2, r3
   16cbc:	mov	r2, #0
   16cc0:	mov	r3, #0
   16cc4:	mov	r2, r1
   16cc8:	mov	r3, #0
   16ccc:	cmp	r2, #0
   16cd0:	beq	16cd8 <__assert_fail@plt+0x5de4>
   16cd4:	mov	ip, #1
   16cd8:	cmp	r0, #0
   16cdc:	bge	16ce4 <__assert_fail@plt+0x5df0>
   16ce0:	mov	ip, #1
   16ce4:	mov	r3, ip
   16ce8:	and	r3, r3, #1
   16cec:	uxtb	r3, r3
   16cf0:	cmp	r3, #0
   16cf4:	beq	16d10 <__assert_fail@plt+0x5e1c>
   16cf8:	bl	10e34 <__errno_location@plt>
   16cfc:	mov	r2, r0
   16d00:	mov	r3, #12
   16d04:	str	r3, [r2]
   16d08:	mov	r3, #0
   16d0c:	b	16d28 <__assert_fail@plt+0x5e34>
   16d10:	ldr	r1, [fp, #-20]	; 0xffffffec
   16d14:	ldr	r0, [fp, #-16]
   16d18:	bl	10c90 <calloc@plt>
   16d1c:	mov	r3, r0
   16d20:	str	r3, [fp, #-8]
   16d24:	ldr	r3, [fp, #-8]
   16d28:	mov	r0, r3
   16d2c:	sub	sp, fp, #4
   16d30:	ldr	fp, [sp]
   16d34:	add	sp, sp, #4
   16d38:	pop	{pc}		; (ldr pc, [sp], #4)
   16d3c:	str	fp, [sp, #-8]!
   16d40:	str	lr, [sp, #4]
   16d44:	add	fp, sp, #4
   16d48:	sub	sp, sp, #16
   16d4c:	str	r0, [fp, #-16]
   16d50:	ldr	r3, [fp, #-16]
   16d54:	cmp	r3, #0
   16d58:	bne	16d64 <__assert_fail@plt+0x5e70>
   16d5c:	mov	r3, #1
   16d60:	str	r3, [fp, #-16]
   16d64:	mov	r2, #0
   16d68:	ldr	r3, [fp, #-16]
   16d6c:	cmp	r3, #0
   16d70:	bge	16d78 <__assert_fail@plt+0x5e84>
   16d74:	mov	r2, #1
   16d78:	mov	r3, r2
   16d7c:	and	r3, r3, #1
   16d80:	uxtb	r3, r3
   16d84:	cmp	r3, #0
   16d88:	beq	16da4 <__assert_fail@plt+0x5eb0>
   16d8c:	bl	10e34 <__errno_location@plt>
   16d90:	mov	r2, r0
   16d94:	mov	r3, #12
   16d98:	str	r3, [r2]
   16d9c:	mov	r3, #0
   16da0:	b	16db8 <__assert_fail@plt+0x5ec4>
   16da4:	ldr	r0, [fp, #-16]
   16da8:	bl	10dbc <malloc@plt>
   16dac:	mov	r3, r0
   16db0:	str	r3, [fp, #-8]
   16db4:	ldr	r3, [fp, #-8]
   16db8:	mov	r0, r3
   16dbc:	sub	sp, fp, #4
   16dc0:	ldr	fp, [sp]
   16dc4:	add	sp, sp, #4
   16dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   16dcc:	str	fp, [sp, #-8]!
   16dd0:	str	lr, [sp, #4]
   16dd4:	add	fp, sp, #4
   16dd8:	sub	sp, sp, #16
   16ddc:	str	r0, [fp, #-16]
   16de0:	str	r1, [fp, #-20]	; 0xffffffec
   16de4:	ldr	r3, [fp, #-16]
   16de8:	cmp	r3, #0
   16dec:	bne	16e00 <__assert_fail@plt+0x5f0c>
   16df0:	ldr	r0, [fp, #-20]	; 0xffffffec
   16df4:	bl	16d3c <__assert_fail@plt+0x5e48>
   16df8:	mov	r3, r0
   16dfc:	b	16e70 <__assert_fail@plt+0x5f7c>
   16e00:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e04:	cmp	r3, #0
   16e08:	bne	16e1c <__assert_fail@plt+0x5f28>
   16e0c:	ldr	r0, [fp, #-16]
   16e10:	bl	13038 <__assert_fail@plt+0x2144>
   16e14:	mov	r3, #0
   16e18:	b	16e70 <__assert_fail@plt+0x5f7c>
   16e1c:	mov	r2, #0
   16e20:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e24:	cmp	r3, #0
   16e28:	bge	16e30 <__assert_fail@plt+0x5f3c>
   16e2c:	mov	r2, #1
   16e30:	mov	r3, r2
   16e34:	and	r3, r3, #1
   16e38:	uxtb	r3, r3
   16e3c:	cmp	r3, #0
   16e40:	beq	16e5c <__assert_fail@plt+0x5f68>
   16e44:	bl	10e34 <__errno_location@plt>
   16e48:	mov	r2, r0
   16e4c:	mov	r3, #12
   16e50:	str	r3, [r2]
   16e54:	mov	r3, #0
   16e58:	b	16e70 <__assert_fail@plt+0x5f7c>
   16e5c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16e60:	ldr	r0, [fp, #-16]
   16e64:	bl	10d44 <realloc@plt>
   16e68:	str	r0, [fp, #-8]
   16e6c:	ldr	r3, [fp, #-8]
   16e70:	mov	r0, r3
   16e74:	sub	sp, fp, #4
   16e78:	ldr	fp, [sp]
   16e7c:	add	sp, sp, #4
   16e80:	pop	{pc}		; (ldr pc, [sp], #4)
   16e84:	strd	r4, [sp, #-16]!
   16e88:	str	fp, [sp, #8]
   16e8c:	str	lr, [sp, #12]
   16e90:	add	fp, sp, #12
   16e94:	sub	sp, sp, #16
   16e98:	str	r0, [fp, #-24]	; 0xffffffe8
   16e9c:	str	r1, [fp, #-28]	; 0xffffffe4
   16ea0:	ldr	r5, [fp, #-24]	; 0xffffffe8
   16ea4:	ldr	r4, [fp, #-28]	; 0xffffffe4
   16ea8:	cmp	r5, r4
   16eac:	bne	16eb8 <__assert_fail@plt+0x5fc4>
   16eb0:	mov	r3, #0
   16eb4:	b	16f18 <__assert_fail@plt+0x6024>
   16eb8:	ldrb	r3, [r5]
   16ebc:	mov	r0, r3
   16ec0:	bl	177fc <__assert_fail@plt+0x6908>
   16ec4:	mov	r3, r0
   16ec8:	strb	r3, [fp, #-13]
   16ecc:	ldrb	r3, [r4]
   16ed0:	mov	r0, r3
   16ed4:	bl	177fc <__assert_fail@plt+0x6908>
   16ed8:	mov	r3, r0
   16edc:	strb	r3, [fp, #-14]
   16ee0:	ldrb	r3, [fp, #-13]
   16ee4:	cmp	r3, #0
   16ee8:	beq	16f08 <__assert_fail@plt+0x6014>
   16eec:	add	r5, r5, #1
   16ef0:	add	r4, r4, #1
   16ef4:	ldrb	r2, [fp, #-13]
   16ef8:	ldrb	r3, [fp, #-14]
   16efc:	cmp	r2, r3
   16f00:	beq	16eb8 <__assert_fail@plt+0x5fc4>
   16f04:	b	16f0c <__assert_fail@plt+0x6018>
   16f08:	nop	{0}
   16f0c:	ldrb	r2, [fp, #-13]
   16f10:	ldrb	r3, [fp, #-14]
   16f14:	sub	r3, r2, r3
   16f18:	mov	r0, r3
   16f1c:	sub	sp, fp, #12
   16f20:	ldrd	r4, [sp]
   16f24:	ldr	fp, [sp, #8]
   16f28:	add	sp, sp, #12
   16f2c:	pop	{pc}		; (ldr pc, [sp], #4)
   16f30:	str	fp, [sp, #-8]!
   16f34:	str	lr, [sp, #4]
   16f38:	add	fp, sp, #4
   16f3c:	sub	sp, sp, #16
   16f40:	str	r0, [fp, #-16]
   16f44:	ldr	r0, [fp, #-16]
   16f48:	bl	10d8c <__fpending@plt>
   16f4c:	mov	r3, r0
   16f50:	cmp	r3, #0
   16f54:	movne	r3, #1
   16f58:	moveq	r3, #0
   16f5c:	strb	r3, [fp, #-5]
   16f60:	ldr	r0, [fp, #-16]
   16f64:	bl	10d98 <ferror_unlocked@plt>
   16f68:	mov	r3, r0
   16f6c:	cmp	r3, #0
   16f70:	movne	r3, #1
   16f74:	moveq	r3, #0
   16f78:	strb	r3, [fp, #-6]
   16f7c:	ldr	r0, [fp, #-16]
   16f80:	bl	12e74 <__assert_fail@plt+0x1f80>
   16f84:	mov	r3, r0
   16f88:	cmp	r3, #0
   16f8c:	movne	r3, #1
   16f90:	moveq	r3, #0
   16f94:	strb	r3, [fp, #-7]
   16f98:	ldrb	r3, [fp, #-6]
   16f9c:	cmp	r3, #0
   16fa0:	bne	16fd0 <__assert_fail@plt+0x60dc>
   16fa4:	ldrb	r3, [fp, #-7]
   16fa8:	cmp	r3, #0
   16fac:	beq	16ffc <__assert_fail@plt+0x6108>
   16fb0:	ldrb	r3, [fp, #-5]
   16fb4:	cmp	r3, #0
   16fb8:	bne	16fd0 <__assert_fail@plt+0x60dc>
   16fbc:	bl	10e34 <__errno_location@plt>
   16fc0:	mov	r3, r0
   16fc4:	ldr	r3, [r3]
   16fc8:	cmp	r3, #9
   16fcc:	beq	16ffc <__assert_fail@plt+0x6108>
   16fd0:	ldrb	r3, [fp, #-7]
   16fd4:	eor	r3, r3, #1
   16fd8:	uxtb	r3, r3
   16fdc:	cmp	r3, #0
   16fe0:	beq	16ff4 <__assert_fail@plt+0x6100>
   16fe4:	bl	10e34 <__errno_location@plt>
   16fe8:	mov	r2, r0
   16fec:	mov	r3, #0
   16ff0:	str	r3, [r2]
   16ff4:	mvn	r3, #0
   16ff8:	b	17000 <__assert_fail@plt+0x610c>
   16ffc:	mov	r3, #0
   17000:	mov	r0, r3
   17004:	sub	sp, fp, #4
   17008:	ldr	fp, [sp]
   1700c:	add	sp, sp, #4
   17010:	pop	{pc}		; (ldr pc, [sp], #4)
   17014:	str	fp, [sp, #-8]!
   17018:	str	lr, [sp, #4]
   1701c:	add	fp, sp, #4
   17020:	bl	10e34 <__errno_location@plt>
   17024:	mov	r2, r0
   17028:	mov	r3, #12
   1702c:	str	r3, [r2]
   17030:	mov	r3, #0
   17034:	mov	r0, r3
   17038:	sub	sp, fp, #4
   1703c:	ldr	fp, [sp]
   17040:	add	sp, sp, #4
   17044:	pop	{pc}		; (ldr pc, [sp], #4)
   17048:	str	fp, [sp, #-8]!
   1704c:	str	lr, [sp, #4]
   17050:	add	fp, sp, #4
   17054:	sub	sp, sp, #8
   17058:	str	r0, [fp, #-8]
   1705c:	ldr	r3, [fp, #-8]
   17060:	mov	r0, r3
   17064:	bl	16d3c <__assert_fail@plt+0x5e48>
   17068:	mov	r3, r0
   1706c:	mov	r0, r3
   17070:	sub	sp, fp, #4
   17074:	ldr	fp, [sp]
   17078:	add	sp, sp, #4
   1707c:	pop	{pc}		; (ldr pc, [sp], #4)
   17080:	str	fp, [sp, #-8]!
   17084:	str	lr, [sp, #4]
   17088:	add	fp, sp, #4
   1708c:	sub	sp, sp, #8
   17090:	str	r0, [fp, #-8]
   17094:	str	r1, [fp, #-12]
   17098:	ldr	r3, [fp, #-12]
   1709c:	cmp	r3, #0
   170a0:	moveq	r3, #1
   170a4:	movne	r3, #0
   170a8:	uxtb	r3, r3
   170ac:	mov	r2, r3
   170b0:	ldr	r3, [fp, #-12]
   170b4:	orr	r3, r2, r3
   170b8:	mov	r1, r3
   170bc:	ldr	r0, [fp, #-8]
   170c0:	bl	16dcc <__assert_fail@plt+0x5ed8>
   170c4:	mov	r3, r0
   170c8:	mov	r0, r3
   170cc:	sub	sp, fp, #4
   170d0:	ldr	fp, [sp]
   170d4:	add	sp, sp, #4
   170d8:	pop	{pc}		; (ldr pc, [sp], #4)
   170dc:	str	fp, [sp, #-8]!
   170e0:	str	lr, [sp, #4]
   170e4:	add	fp, sp, #4
   170e8:	sub	sp, sp, #8
   170ec:	str	r0, [fp, #-8]
   170f0:	str	r1, [fp, #-12]
   170f4:	ldr	r3, [fp, #-8]
   170f8:	ldr	r2, [fp, #-12]
   170fc:	mov	r1, r2
   17100:	mov	r0, r3
   17104:	bl	16c6c <__assert_fail@plt+0x5d78>
   17108:	mov	r3, r0
   1710c:	mov	r0, r3
   17110:	sub	sp, fp, #4
   17114:	ldr	fp, [sp]
   17118:	add	sp, sp, #4
   1711c:	pop	{pc}		; (ldr pc, [sp], #4)
   17120:	str	fp, [sp, #-8]!
   17124:	str	lr, [sp, #4]
   17128:	add	fp, sp, #4
   1712c:	sub	sp, sp, #16
   17130:	str	r0, [fp, #-8]
   17134:	str	r1, [fp, #-12]
   17138:	str	r2, [fp, #-16]
   1713c:	ldr	r3, [fp, #-12]
   17140:	cmp	r3, #0
   17144:	beq	17154 <__assert_fail@plt+0x6260>
   17148:	ldr	r3, [fp, #-16]
   1714c:	cmp	r3, #0
   17150:	bne	17164 <__assert_fail@plt+0x6270>
   17154:	mov	r3, #1
   17158:	str	r3, [fp, #-16]
   1715c:	ldr	r3, [fp, #-16]
   17160:	str	r3, [fp, #-12]
   17164:	ldr	r3, [fp, #-12]
   17168:	ldr	r2, [fp, #-16]
   1716c:	mov	r1, r3
   17170:	ldr	r0, [fp, #-8]
   17174:	bl	172b0 <__assert_fail@plt+0x63bc>
   17178:	mov	r3, r0
   1717c:	mov	r0, r3
   17180:	sub	sp, fp, #4
   17184:	ldr	fp, [sp]
   17188:	add	sp, sp, #4
   1718c:	pop	{pc}		; (ldr pc, [sp], #4)
   17190:	str	fp, [sp, #-8]!
   17194:	str	lr, [sp, #4]
   17198:	add	fp, sp, #4
   1719c:	sub	sp, sp, #8
   171a0:	mov	r0, #14
   171a4:	bl	10e94 <nl_langinfo@plt>
   171a8:	str	r0, [fp, #-8]
   171ac:	ldr	r3, [fp, #-8]
   171b0:	cmp	r3, #0
   171b4:	bne	171c4 <__assert_fail@plt+0x62d0>
   171b8:	movw	r3, #35320	; 0x89f8
   171bc:	movt	r3, #1
   171c0:	str	r3, [fp, #-8]
   171c4:	ldr	r3, [fp, #-8]
   171c8:	ldrb	r3, [r3]
   171cc:	cmp	r3, #0
   171d0:	bne	171e0 <__assert_fail@plt+0x62ec>
   171d4:	movw	r3, #35324	; 0x89fc
   171d8:	movt	r3, #1
   171dc:	str	r3, [fp, #-8]
   171e0:	ldr	r3, [fp, #-8]
   171e4:	mov	r0, r3
   171e8:	sub	sp, fp, #4
   171ec:	ldr	fp, [sp]
   171f0:	add	sp, sp, #4
   171f4:	pop	{pc}		; (ldr pc, [sp], #4)
   171f8:	str	fp, [sp, #-8]!
   171fc:	str	lr, [sp, #4]
   17200:	add	fp, sp, #4
   17204:	sub	sp, sp, #32
   17208:	str	r0, [fp, #-24]	; 0xffffffe8
   1720c:	str	r1, [fp, #-28]	; 0xffffffe4
   17210:	str	r2, [fp, #-32]	; 0xffffffe0
   17214:	str	r3, [fp, #-36]	; 0xffffffdc
   17218:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1721c:	cmp	r3, #0
   17220:	bne	1722c <__assert_fail@plt+0x6338>
   17224:	sub	r3, fp, #16
   17228:	str	r3, [fp, #-24]	; 0xffffffe8
   1722c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17230:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17234:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17238:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1723c:	bl	10da4 <mbrtowc@plt>
   17240:	str	r0, [fp, #-8]
   17244:	ldr	r3, [fp, #-8]
   17248:	cmn	r3, #3
   1724c:	bls	17298 <__assert_fail@plt+0x63a4>
   17250:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17254:	cmp	r3, #0
   17258:	beq	17298 <__assert_fail@plt+0x63a4>
   1725c:	mov	r0, #0
   17260:	bl	1787c <__assert_fail@plt+0x6988>
   17264:	mov	r3, r0
   17268:	eor	r3, r3, #1
   1726c:	uxtb	r3, r3
   17270:	cmp	r3, #0
   17274:	beq	17298 <__assert_fail@plt+0x63a4>
   17278:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1727c:	ldrb	r3, [r3]
   17280:	strb	r3, [fp, #-9]
   17284:	ldrb	r2, [fp, #-9]
   17288:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1728c:	str	r2, [r3]
   17290:	mov	r3, #1
   17294:	b	1729c <__assert_fail@plt+0x63a8>
   17298:	ldr	r3, [fp, #-8]
   1729c:	mov	r0, r3
   172a0:	sub	sp, fp, #4
   172a4:	ldr	fp, [sp]
   172a8:	add	sp, sp, #4
   172ac:	pop	{pc}		; (ldr pc, [sp], #4)
   172b0:	str	fp, [sp, #-8]!
   172b4:	str	lr, [sp, #4]
   172b8:	add	fp, sp, #4
   172bc:	sub	sp, sp, #24
   172c0:	str	r0, [fp, #-16]
   172c4:	str	r1, [fp, #-20]	; 0xffffffec
   172c8:	str	r2, [fp, #-24]	; 0xffffffe8
   172cc:	mov	ip, #0
   172d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   172d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172d8:	umull	r0, r1, r2, r3
   172dc:	mov	r2, #0
   172e0:	mov	r3, #0
   172e4:	mov	r2, r1
   172e8:	mov	r3, #0
   172ec:	cmp	r2, #0
   172f0:	beq	172f8 <__assert_fail@plt+0x6404>
   172f4:	mov	ip, #1
   172f8:	mov	r3, r0
   172fc:	str	r3, [fp, #-8]
   17300:	mov	r3, ip
   17304:	and	r3, r3, #1
   17308:	uxtb	r3, r3
   1730c:	cmp	r3, #0
   17310:	beq	1732c <__assert_fail@plt+0x6438>
   17314:	bl	10e34 <__errno_location@plt>
   17318:	mov	r2, r0
   1731c:	mov	r3, #12
   17320:	str	r3, [r2]
   17324:	mov	r3, #0
   17328:	b	17340 <__assert_fail@plt+0x644c>
   1732c:	ldr	r3, [fp, #-8]
   17330:	mov	r1, r3
   17334:	ldr	r0, [fp, #-16]
   17338:	bl	16dcc <__assert_fail@plt+0x5ed8>
   1733c:	mov	r3, r0
   17340:	mov	r0, r3
   17344:	sub	sp, fp, #4
   17348:	ldr	fp, [sp]
   1734c:	add	sp, sp, #4
   17350:	pop	{pc}		; (ldr pc, [sp], #4)
   17354:	push	{fp}		; (str fp, [sp, #-4]!)
   17358:	add	fp, sp, #0
   1735c:	sub	sp, sp, #12
   17360:	str	r0, [fp, #-8]
   17364:	ldr	r3, [fp, #-8]
   17368:	cmp	r3, #90	; 0x5a
   1736c:	bgt	17390 <__assert_fail@plt+0x649c>
   17370:	ldr	r3, [fp, #-8]
   17374:	cmp	r3, #65	; 0x41
   17378:	bge	173a0 <__assert_fail@plt+0x64ac>
   1737c:	ldr	r3, [fp, #-8]
   17380:	sub	r3, r3, #48	; 0x30
   17384:	cmp	r3, #9
   17388:	bhi	173a8 <__assert_fail@plt+0x64b4>
   1738c:	b	173a0 <__assert_fail@plt+0x64ac>
   17390:	ldr	r3, [fp, #-8]
   17394:	sub	r3, r3, #97	; 0x61
   17398:	cmp	r3, #25
   1739c:	bhi	173a8 <__assert_fail@plt+0x64b4>
   173a0:	mov	r3, #1
   173a4:	b	173ac <__assert_fail@plt+0x64b8>
   173a8:	mov	r3, #0
   173ac:	mov	r0, r3
   173b0:	add	sp, fp, #0
   173b4:	pop	{fp}		; (ldr fp, [sp], #4)
   173b8:	bx	lr
   173bc:	push	{fp}		; (str fp, [sp, #-4]!)
   173c0:	add	fp, sp, #0
   173c4:	sub	sp, sp, #12
   173c8:	str	r0, [fp, #-8]
   173cc:	ldr	r3, [fp, #-8]
   173d0:	cmp	r3, #65	; 0x41
   173d4:	blt	173fc <__assert_fail@plt+0x6508>
   173d8:	ldr	r3, [fp, #-8]
   173dc:	cmp	r3, #90	; 0x5a
   173e0:	ble	173f4 <__assert_fail@plt+0x6500>
   173e4:	ldr	r3, [fp, #-8]
   173e8:	sub	r3, r3, #97	; 0x61
   173ec:	cmp	r3, #25
   173f0:	bhi	173fc <__assert_fail@plt+0x6508>
   173f4:	mov	r3, #1
   173f8:	b	17400 <__assert_fail@plt+0x650c>
   173fc:	mov	r3, #0
   17400:	mov	r0, r3
   17404:	add	sp, fp, #0
   17408:	pop	{fp}		; (ldr fp, [sp], #4)
   1740c:	bx	lr
   17410:	push	{fp}		; (str fp, [sp, #-4]!)
   17414:	add	fp, sp, #0
   17418:	sub	sp, sp, #12
   1741c:	str	r0, [fp, #-8]
   17420:	ldr	r3, [fp, #-8]
   17424:	cmp	r3, #127	; 0x7f
   17428:	bhi	17434 <__assert_fail@plt+0x6540>
   1742c:	mov	r3, #1
   17430:	b	17438 <__assert_fail@plt+0x6544>
   17434:	mov	r3, #0
   17438:	mov	r0, r3
   1743c:	add	sp, fp, #0
   17440:	pop	{fp}		; (ldr fp, [sp], #4)
   17444:	bx	lr
   17448:	push	{fp}		; (str fp, [sp, #-4]!)
   1744c:	add	fp, sp, #0
   17450:	sub	sp, sp, #12
   17454:	str	r0, [fp, #-8]
   17458:	ldr	r3, [fp, #-8]
   1745c:	cmp	r3, #32
   17460:	beq	17470 <__assert_fail@plt+0x657c>
   17464:	ldr	r3, [fp, #-8]
   17468:	cmp	r3, #9
   1746c:	bne	17478 <__assert_fail@plt+0x6584>
   17470:	mov	r3, #1
   17474:	b	1747c <__assert_fail@plt+0x6588>
   17478:	mov	r3, #0
   1747c:	and	r3, r3, #1
   17480:	uxtb	r3, r3
   17484:	mov	r0, r3
   17488:	add	sp, fp, #0
   1748c:	pop	{fp}		; (ldr fp, [sp], #4)
   17490:	bx	lr
   17494:	push	{fp}		; (str fp, [sp, #-4]!)
   17498:	add	fp, sp, #0
   1749c:	sub	sp, sp, #12
   174a0:	str	r0, [fp, #-8]
   174a4:	ldr	r3, [fp, #-8]
   174a8:	cmp	r3, #0
   174ac:	blt	174d0 <__assert_fail@plt+0x65dc>
   174b0:	ldr	r3, [fp, #-8]
   174b4:	cmp	r3, #31
   174b8:	ble	174c8 <__assert_fail@plt+0x65d4>
   174bc:	ldr	r3, [fp, #-8]
   174c0:	cmp	r3, #127	; 0x7f
   174c4:	bne	174d0 <__assert_fail@plt+0x65dc>
   174c8:	mov	r3, #1
   174cc:	b	174d4 <__assert_fail@plt+0x65e0>
   174d0:	mov	r3, #0
   174d4:	mov	r0, r3
   174d8:	add	sp, fp, #0
   174dc:	pop	{fp}		; (ldr fp, [sp], #4)
   174e0:	bx	lr
   174e4:	push	{fp}		; (str fp, [sp, #-4]!)
   174e8:	add	fp, sp, #0
   174ec:	sub	sp, sp, #12
   174f0:	str	r0, [fp, #-8]
   174f4:	ldr	r3, [fp, #-8]
   174f8:	sub	r3, r3, #48	; 0x30
   174fc:	cmp	r3, #9
   17500:	bhi	1750c <__assert_fail@plt+0x6618>
   17504:	mov	r3, #1
   17508:	b	17510 <__assert_fail@plt+0x661c>
   1750c:	mov	r3, #0
   17510:	mov	r0, r3
   17514:	add	sp, fp, #0
   17518:	pop	{fp}		; (ldr fp, [sp], #4)
   1751c:	bx	lr
   17520:	push	{fp}		; (str fp, [sp, #-4]!)
   17524:	add	fp, sp, #0
   17528:	sub	sp, sp, #12
   1752c:	str	r0, [fp, #-8]
   17530:	ldr	r3, [fp, #-8]
   17534:	sub	r3, r3, #33	; 0x21
   17538:	cmp	r3, #93	; 0x5d
   1753c:	bhi	17548 <__assert_fail@plt+0x6654>
   17540:	mov	r3, #1
   17544:	b	1754c <__assert_fail@plt+0x6658>
   17548:	mov	r3, #0
   1754c:	mov	r0, r3
   17550:	add	sp, fp, #0
   17554:	pop	{fp}		; (ldr fp, [sp], #4)
   17558:	bx	lr
   1755c:	push	{fp}		; (str fp, [sp, #-4]!)
   17560:	add	fp, sp, #0
   17564:	sub	sp, sp, #12
   17568:	str	r0, [fp, #-8]
   1756c:	ldr	r3, [fp, #-8]
   17570:	sub	r3, r3, #97	; 0x61
   17574:	cmp	r3, #25
   17578:	bhi	17584 <__assert_fail@plt+0x6690>
   1757c:	mov	r3, #1
   17580:	b	17588 <__assert_fail@plt+0x6694>
   17584:	mov	r3, #0
   17588:	mov	r0, r3
   1758c:	add	sp, fp, #0
   17590:	pop	{fp}		; (ldr fp, [sp], #4)
   17594:	bx	lr
   17598:	push	{fp}		; (str fp, [sp, #-4]!)
   1759c:	add	fp, sp, #0
   175a0:	sub	sp, sp, #12
   175a4:	str	r0, [fp, #-8]
   175a8:	ldr	r3, [fp, #-8]
   175ac:	sub	r3, r3, #32
   175b0:	cmp	r3, #94	; 0x5e
   175b4:	bhi	175c0 <__assert_fail@plt+0x66cc>
   175b8:	mov	r3, #1
   175bc:	b	175c4 <__assert_fail@plt+0x66d0>
   175c0:	mov	r3, #0
   175c4:	mov	r0, r3
   175c8:	add	sp, fp, #0
   175cc:	pop	{fp}		; (ldr fp, [sp], #4)
   175d0:	bx	lr
   175d4:	push	{fp}		; (str fp, [sp, #-4]!)
   175d8:	add	fp, sp, #0
   175dc:	sub	sp, sp, #12
   175e0:	str	r0, [fp, #-8]
   175e4:	ldr	r3, [fp, #-8]
   175e8:	cmp	r3, #64	; 0x40
   175ec:	bgt	17610 <__assert_fail@plt+0x671c>
   175f0:	ldr	r3, [fp, #-8]
   175f4:	cmp	r3, #58	; 0x3a
   175f8:	bge	17638 <__assert_fail@plt+0x6744>
   175fc:	ldr	r3, [fp, #-8]
   17600:	sub	r3, r3, #33	; 0x21
   17604:	cmp	r3, #14
   17608:	bhi	17640 <__assert_fail@plt+0x674c>
   1760c:	b	17638 <__assert_fail@plt+0x6744>
   17610:	ldr	r3, [fp, #-8]
   17614:	cmp	r3, #91	; 0x5b
   17618:	blt	17640 <__assert_fail@plt+0x674c>
   1761c:	ldr	r3, [fp, #-8]
   17620:	cmp	r3, #96	; 0x60
   17624:	ble	17638 <__assert_fail@plt+0x6744>
   17628:	ldr	r3, [fp, #-8]
   1762c:	sub	r3, r3, #123	; 0x7b
   17630:	cmp	r3, #3
   17634:	bhi	17640 <__assert_fail@plt+0x674c>
   17638:	mov	r3, #1
   1763c:	b	17644 <__assert_fail@plt+0x6750>
   17640:	mov	r3, #0
   17644:	mov	r0, r3
   17648:	add	sp, fp, #0
   1764c:	pop	{fp}		; (ldr fp, [sp], #4)
   17650:	bx	lr
   17654:	push	{fp}		; (str fp, [sp, #-4]!)
   17658:	add	fp, sp, #0
   1765c:	sub	sp, sp, #12
   17660:	str	r0, [fp, #-8]
   17664:	ldr	r3, [fp, #-8]
   17668:	cmp	r3, #9
   1766c:	blt	17690 <__assert_fail@plt+0x679c>
   17670:	ldr	r3, [fp, #-8]
   17674:	cmp	r3, #13
   17678:	ble	17688 <__assert_fail@plt+0x6794>
   1767c:	ldr	r3, [fp, #-8]
   17680:	cmp	r3, #32
   17684:	bne	17690 <__assert_fail@plt+0x679c>
   17688:	mov	r3, #1
   1768c:	b	17694 <__assert_fail@plt+0x67a0>
   17690:	mov	r3, #0
   17694:	mov	r0, r3
   17698:	add	sp, fp, #0
   1769c:	pop	{fp}		; (ldr fp, [sp], #4)
   176a0:	bx	lr
   176a4:	push	{fp}		; (str fp, [sp, #-4]!)
   176a8:	add	fp, sp, #0
   176ac:	sub	sp, sp, #12
   176b0:	str	r0, [fp, #-8]
   176b4:	ldr	r3, [fp, #-8]
   176b8:	sub	r3, r3, #65	; 0x41
   176bc:	cmp	r3, #25
   176c0:	bhi	176cc <__assert_fail@plt+0x67d8>
   176c4:	mov	r3, #1
   176c8:	b	176d0 <__assert_fail@plt+0x67dc>
   176cc:	mov	r3, #0
   176d0:	mov	r0, r3
   176d4:	add	sp, fp, #0
   176d8:	pop	{fp}		; (ldr fp, [sp], #4)
   176dc:	bx	lr
   176e0:	push	{fp}		; (str fp, [sp, #-4]!)
   176e4:	add	fp, sp, #0
   176e8:	sub	sp, sp, #12
   176ec:	str	r0, [fp, #-8]
   176f0:	ldr	r3, [fp, #-8]
   176f4:	sub	r3, r3, #48	; 0x30
   176f8:	cmp	r3, #54	; 0x36
   176fc:	ldrls	pc, [pc, r3, lsl #2]
   17700:	b	177e8 <__assert_fail@plt+0x68f4>
   17704:	andeq	r7, r1, r0, ror #15
   17708:	andeq	r7, r1, r0, ror #15
   1770c:	andeq	r7, r1, r0, ror #15
   17710:	andeq	r7, r1, r0, ror #15
   17714:	andeq	r7, r1, r0, ror #15
   17718:	andeq	r7, r1, r0, ror #15
   1771c:	andeq	r7, r1, r0, ror #15
   17720:	andeq	r7, r1, r0, ror #15
   17724:	andeq	r7, r1, r0, ror #15
   17728:	andeq	r7, r1, r0, ror #15
   1772c:	andeq	r7, r1, r8, ror #15
   17730:	andeq	r7, r1, r8, ror #15
   17734:	andeq	r7, r1, r8, ror #15
   17738:	andeq	r7, r1, r8, ror #15
   1773c:	andeq	r7, r1, r8, ror #15
   17740:	andeq	r7, r1, r8, ror #15
   17744:	andeq	r7, r1, r8, ror #15
   17748:	andeq	r7, r1, r0, ror #15
   1774c:	andeq	r7, r1, r0, ror #15
   17750:	andeq	r7, r1, r0, ror #15
   17754:	andeq	r7, r1, r0, ror #15
   17758:	andeq	r7, r1, r0, ror #15
   1775c:	andeq	r7, r1, r0, ror #15
   17760:	andeq	r7, r1, r8, ror #15
   17764:	andeq	r7, r1, r8, ror #15
   17768:	andeq	r7, r1, r8, ror #15
   1776c:	andeq	r7, r1, r8, ror #15
   17770:	andeq	r7, r1, r8, ror #15
   17774:	andeq	r7, r1, r8, ror #15
   17778:	andeq	r7, r1, r8, ror #15
   1777c:	andeq	r7, r1, r8, ror #15
   17780:	andeq	r7, r1, r8, ror #15
   17784:	andeq	r7, r1, r8, ror #15
   17788:	andeq	r7, r1, r8, ror #15
   1778c:	andeq	r7, r1, r8, ror #15
   17790:	andeq	r7, r1, r8, ror #15
   17794:	andeq	r7, r1, r8, ror #15
   17798:	andeq	r7, r1, r8, ror #15
   1779c:	andeq	r7, r1, r8, ror #15
   177a0:	andeq	r7, r1, r8, ror #15
   177a4:	andeq	r7, r1, r8, ror #15
   177a8:	andeq	r7, r1, r8, ror #15
   177ac:	andeq	r7, r1, r8, ror #15
   177b0:	andeq	r7, r1, r8, ror #15
   177b4:	andeq	r7, r1, r8, ror #15
   177b8:	andeq	r7, r1, r8, ror #15
   177bc:	andeq	r7, r1, r8, ror #15
   177c0:	andeq	r7, r1, r8, ror #15
   177c4:	andeq	r7, r1, r8, ror #15
   177c8:	andeq	r7, r1, r0, ror #15
   177cc:	andeq	r7, r1, r0, ror #15
   177d0:	andeq	r7, r1, r0, ror #15
   177d4:	andeq	r7, r1, r0, ror #15
   177d8:	andeq	r7, r1, r0, ror #15
   177dc:	andeq	r7, r1, r0, ror #15
   177e0:	mov	r3, #1
   177e4:	b	177ec <__assert_fail@plt+0x68f8>
   177e8:	mov	r3, #0
   177ec:	mov	r0, r3
   177f0:	add	sp, fp, #0
   177f4:	pop	{fp}		; (ldr fp, [sp], #4)
   177f8:	bx	lr
   177fc:	push	{fp}		; (str fp, [sp, #-4]!)
   17800:	add	fp, sp, #0
   17804:	sub	sp, sp, #12
   17808:	str	r0, [fp, #-8]
   1780c:	ldr	r3, [fp, #-8]
   17810:	sub	r3, r3, #65	; 0x41
   17814:	cmp	r3, #25
   17818:	bhi	17828 <__assert_fail@plt+0x6934>
   1781c:	ldr	r3, [fp, #-8]
   17820:	add	r3, r3, #32
   17824:	b	1782c <__assert_fail@plt+0x6938>
   17828:	ldr	r3, [fp, #-8]
   1782c:	mov	r0, r3
   17830:	add	sp, fp, #0
   17834:	pop	{fp}		; (ldr fp, [sp], #4)
   17838:	bx	lr
   1783c:	push	{fp}		; (str fp, [sp, #-4]!)
   17840:	add	fp, sp, #0
   17844:	sub	sp, sp, #12
   17848:	str	r0, [fp, #-8]
   1784c:	ldr	r3, [fp, #-8]
   17850:	sub	r3, r3, #97	; 0x61
   17854:	cmp	r3, #25
   17858:	bhi	17868 <__assert_fail@plt+0x6974>
   1785c:	ldr	r3, [fp, #-8]
   17860:	sub	r3, r3, #32
   17864:	b	1786c <__assert_fail@plt+0x6978>
   17868:	ldr	r3, [fp, #-8]
   1786c:	mov	r0, r3
   17870:	add	sp, fp, #0
   17874:	pop	{fp}		; (ldr fp, [sp], #4)
   17878:	bx	lr
   1787c:	str	fp, [sp, #-8]!
   17880:	str	lr, [sp, #4]
   17884:	add	fp, sp, #4
   17888:	sub	sp, sp, #272	; 0x110
   1788c:	str	r0, [fp, #-272]	; 0xfffffef0
   17890:	sub	r3, fp, #264	; 0x108
   17894:	movw	r2, #257	; 0x101
   17898:	mov	r1, r3
   1789c:	ldr	r0, [fp, #-272]	; 0xfffffef0
   178a0:	bl	17a40 <__assert_fail@plt+0x6b4c>
   178a4:	mov	r3, r0
   178a8:	cmp	r3, #0
   178ac:	beq	178b8 <__assert_fail@plt+0x69c4>
   178b0:	mov	r3, #0
   178b4:	b	1790c <__assert_fail@plt+0x6a18>
   178b8:	sub	r3, fp, #264	; 0x108
   178bc:	movw	r1, #35332	; 0x8a04
   178c0:	movt	r1, #1
   178c4:	mov	r0, r3
   178c8:	bl	10cb4 <strcmp@plt>
   178cc:	mov	r3, r0
   178d0:	cmp	r3, #0
   178d4:	beq	17900 <__assert_fail@plt+0x6a0c>
   178d8:	sub	r3, fp, #264	; 0x108
   178dc:	movw	r1, #35336	; 0x8a08
   178e0:	movt	r1, #1
   178e4:	mov	r0, r3
   178e8:	bl	10cb4 <strcmp@plt>
   178ec:	mov	r3, r0
   178f0:	cmp	r3, #0
   178f4:	beq	17900 <__assert_fail@plt+0x6a0c>
   178f8:	mov	r3, #1
   178fc:	b	17904 <__assert_fail@plt+0x6a10>
   17900:	mov	r3, #0
   17904:	and	r3, r3, #1
   17908:	uxtb	r3, r3
   1790c:	mov	r0, r3
   17910:	sub	sp, fp, #4
   17914:	ldr	fp, [sp]
   17918:	add	sp, sp, #4
   1791c:	pop	{pc}		; (ldr pc, [sp], #4)
   17920:	str	fp, [sp, #-8]!
   17924:	str	lr, [sp, #4]
   17928:	add	fp, sp, #4
   1792c:	sub	sp, sp, #16
   17930:	str	r0, [fp, #-16]
   17934:	mov	r1, #0
   17938:	ldr	r0, [fp, #-16]
   1793c:	bl	10e7c <setlocale@plt>
   17940:	str	r0, [fp, #-8]
   17944:	ldr	r3, [fp, #-8]
   17948:	mov	r0, r3
   1794c:	sub	sp, fp, #4
   17950:	ldr	fp, [sp]
   17954:	add	sp, sp, #4
   17958:	pop	{pc}		; (ldr pc, [sp], #4)
   1795c:	str	fp, [sp, #-8]!
   17960:	str	lr, [sp, #4]
   17964:	add	fp, sp, #4
   17968:	sub	sp, sp, #24
   1796c:	str	r0, [fp, #-16]
   17970:	str	r1, [fp, #-20]	; 0xffffffec
   17974:	str	r2, [fp, #-24]	; 0xffffffe8
   17978:	ldr	r0, [fp, #-16]
   1797c:	bl	17920 <__assert_fail@plt+0x6a2c>
   17980:	str	r0, [fp, #-8]
   17984:	ldr	r3, [fp, #-8]
   17988:	cmp	r3, #0
   1798c:	bne	179b0 <__assert_fail@plt+0x6abc>
   17990:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17994:	cmp	r3, #0
   17998:	beq	179a8 <__assert_fail@plt+0x6ab4>
   1799c:	ldr	r3, [fp, #-20]	; 0xffffffec
   179a0:	mov	r2, #0
   179a4:	strb	r2, [r3]
   179a8:	mov	r3, #22
   179ac:	b	17a2c <__assert_fail@plt+0x6b38>
   179b0:	ldr	r0, [fp, #-8]
   179b4:	bl	10e1c <strlen@plt>
   179b8:	str	r0, [fp, #-12]
   179bc:	ldr	r2, [fp, #-12]
   179c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179c4:	cmp	r2, r3
   179c8:	bcs	179ec <__assert_fail@plt+0x6af8>
   179cc:	ldr	r3, [fp, #-12]
   179d0:	add	r3, r3, #1
   179d4:	mov	r2, r3
   179d8:	ldr	r1, [fp, #-8]
   179dc:	ldr	r0, [fp, #-20]	; 0xffffffec
   179e0:	bl	10cfc <memcpy@plt>
   179e4:	mov	r3, #0
   179e8:	b	17a2c <__assert_fail@plt+0x6b38>
   179ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179f0:	cmp	r3, #0
   179f4:	beq	17a28 <__assert_fail@plt+0x6b34>
   179f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179fc:	sub	r3, r3, #1
   17a00:	mov	r2, r3
   17a04:	ldr	r1, [fp, #-8]
   17a08:	ldr	r0, [fp, #-20]	; 0xffffffec
   17a0c:	bl	10cfc <memcpy@plt>
   17a10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a14:	sub	r3, r3, #1
   17a18:	ldr	r2, [fp, #-20]	; 0xffffffec
   17a1c:	add	r3, r2, r3
   17a20:	mov	r2, #0
   17a24:	strb	r2, [r3]
   17a28:	mov	r3, #34	; 0x22
   17a2c:	mov	r0, r3
   17a30:	sub	sp, fp, #4
   17a34:	ldr	fp, [sp]
   17a38:	add	sp, sp, #4
   17a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   17a40:	str	fp, [sp, #-8]!
   17a44:	str	lr, [sp, #4]
   17a48:	add	fp, sp, #4
   17a4c:	sub	sp, sp, #16
   17a50:	str	r0, [fp, #-8]
   17a54:	str	r1, [fp, #-12]
   17a58:	str	r2, [fp, #-16]
   17a5c:	ldr	r2, [fp, #-16]
   17a60:	ldr	r1, [fp, #-12]
   17a64:	ldr	r0, [fp, #-8]
   17a68:	bl	1795c <__assert_fail@plt+0x6a68>
   17a6c:	mov	r3, r0
   17a70:	mov	r0, r3
   17a74:	sub	sp, fp, #4
   17a78:	ldr	fp, [sp]
   17a7c:	add	sp, sp, #4
   17a80:	pop	{pc}		; (ldr pc, [sp], #4)
   17a84:	str	fp, [sp, #-8]!
   17a88:	str	lr, [sp, #4]
   17a8c:	add	fp, sp, #4
   17a90:	sub	sp, sp, #8
   17a94:	str	r0, [fp, #-8]
   17a98:	ldr	r0, [fp, #-8]
   17a9c:	bl	17920 <__assert_fail@plt+0x6a2c>
   17aa0:	mov	r3, r0
   17aa4:	mov	r0, r3
   17aa8:	sub	sp, fp, #4
   17aac:	ldr	fp, [sp]
   17ab0:	add	sp, sp, #4
   17ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ab8:	cmp	r3, #0
   17abc:	cmpeq	r2, #0
   17ac0:	bne	17ad8 <__assert_fail@plt+0x6be4>
   17ac4:	cmp	r1, #0
   17ac8:	cmpeq	r0, #0
   17acc:	mvnne	r1, #0
   17ad0:	mvnne	r0, #0
   17ad4:	b	17af4 <__assert_fail@plt+0x6c00>
   17ad8:	sub	sp, sp, #8
   17adc:	push	{sp, lr}
   17ae0:	bl	17b04 <__assert_fail@plt+0x6c10>
   17ae4:	ldr	lr, [sp, #4]
   17ae8:	add	sp, sp, #8
   17aec:	pop	{r2, r3}
   17af0:	bx	lr
   17af4:	push	{r1, lr}
   17af8:	mov	r0, #8
   17afc:	bl	10ca8 <raise@plt>
   17b00:	pop	{r1, pc}
   17b04:	cmp	r1, r3
   17b08:	cmpeq	r0, r2
   17b0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b10:	mov	r4, r0
   17b14:	movcc	r0, #0
   17b18:	mov	r5, r1
   17b1c:	ldr	lr, [sp, #36]	; 0x24
   17b20:	movcc	r1, r0
   17b24:	bcc	17c20 <__assert_fail@plt+0x6d2c>
   17b28:	cmp	r3, #0
   17b2c:	clzeq	ip, r2
   17b30:	clzne	ip, r3
   17b34:	addeq	ip, ip, #32
   17b38:	cmp	r5, #0
   17b3c:	clzeq	r1, r4
   17b40:	addeq	r1, r1, #32
   17b44:	clzne	r1, r5
   17b48:	sub	ip, ip, r1
   17b4c:	sub	sl, ip, #32
   17b50:	lsl	r9, r3, ip
   17b54:	rsb	fp, ip, #32
   17b58:	orr	r9, r9, r2, lsl sl
   17b5c:	orr	r9, r9, r2, lsr fp
   17b60:	lsl	r8, r2, ip
   17b64:	cmp	r5, r9
   17b68:	cmpeq	r4, r8
   17b6c:	movcc	r0, #0
   17b70:	movcc	r1, r0
   17b74:	bcc	17b90 <__assert_fail@plt+0x6c9c>
   17b78:	mov	r0, #1
   17b7c:	subs	r4, r4, r8
   17b80:	lsl	r1, r0, sl
   17b84:	orr	r1, r1, r0, lsr fp
   17b88:	lsl	r0, r0, ip
   17b8c:	sbc	r5, r5, r9
   17b90:	cmp	ip, #0
   17b94:	beq	17c20 <__assert_fail@plt+0x6d2c>
   17b98:	lsr	r6, r8, #1
   17b9c:	orr	r6, r6, r9, lsl #31
   17ba0:	lsr	r7, r9, #1
   17ba4:	mov	r2, ip
   17ba8:	b	17bcc <__assert_fail@plt+0x6cd8>
   17bac:	subs	r3, r4, r6
   17bb0:	sbc	r8, r5, r7
   17bb4:	adds	r3, r3, r3
   17bb8:	adc	r8, r8, r8
   17bbc:	adds	r4, r3, #1
   17bc0:	adc	r5, r8, #0
   17bc4:	subs	r2, r2, #1
   17bc8:	beq	17be8 <__assert_fail@plt+0x6cf4>
   17bcc:	cmp	r5, r7
   17bd0:	cmpeq	r4, r6
   17bd4:	bcs	17bac <__assert_fail@plt+0x6cb8>
   17bd8:	adds	r4, r4, r4
   17bdc:	adc	r5, r5, r5
   17be0:	subs	r2, r2, #1
   17be4:	bne	17bcc <__assert_fail@plt+0x6cd8>
   17be8:	lsr	r3, r4, ip
   17bec:	orr	r3, r3, r5, lsl fp
   17bf0:	lsr	r2, r5, ip
   17bf4:	orr	r3, r3, r5, lsr sl
   17bf8:	adds	r0, r0, r4
   17bfc:	mov	r4, r3
   17c00:	lsl	r3, r2, ip
   17c04:	orr	r3, r3, r4, lsl sl
   17c08:	lsl	ip, r4, ip
   17c0c:	orr	r3, r3, r4, lsr fp
   17c10:	adc	r1, r1, r5
   17c14:	subs	r0, r0, ip
   17c18:	mov	r5, r2
   17c1c:	sbc	r1, r1, r3
   17c20:	cmp	lr, #0
   17c24:	strdne	r4, [lr]
   17c28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17c30:	mov	r7, r0
   17c34:	ldr	r6, [pc, #72]	; 17c84 <__assert_fail@plt+0x6d90>
   17c38:	ldr	r5, [pc, #72]	; 17c88 <__assert_fail@plt+0x6d94>
   17c3c:	add	r6, pc, r6
   17c40:	add	r5, pc, r5
   17c44:	sub	r6, r6, r5
   17c48:	mov	r8, r1
   17c4c:	mov	r9, r2
   17c50:	bl	10c70 <calloc@plt-0x20>
   17c54:	asrs	r6, r6, #2
   17c58:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17c5c:	mov	r4, #0
   17c60:	add	r4, r4, #1
   17c64:	ldr	r3, [r5], #4
   17c68:	mov	r2, r9
   17c6c:	mov	r1, r8
   17c70:	mov	r0, r7
   17c74:	blx	r3
   17c78:	cmp	r6, r4
   17c7c:	bne	17c60 <__assert_fail@plt+0x6d6c>
   17c80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17c84:	ldrdeq	r1, [r1], -r0
   17c88:	andeq	r1, r1, r8, asr #5
   17c8c:	bx	lr
   17c90:	ldr	r3, [pc, #12]	; 17ca4 <__assert_fail@plt+0x6db0>
   17c94:	mov	r1, #0
   17c98:	add	r3, pc, r3
   17c9c:	ldr	r2, [r3]
   17ca0:	b	10e40 <__cxa_atexit@plt>
   17ca4:	andeq	r1, r1, r4, asr #8

Disassembly of section .fini:

00017ca8 <.fini>:
   17ca8:	push	{r3, lr}
   17cac:	pop	{r3, pc}
