
../repos/prog2/3.2:     file format elf32-littlearm


Disassembly of section .init:

0001066c <.init>:
   1066c:	push	{r3, lr}
   10670:	bl	10a98 <_start@@Base+0x3c>
   10674:	pop	{r3, pc}

Disassembly of section .plt:

00010678 <printf@plt-0x14>:
   10678:	push	{lr}		; (str lr, [sp, #-4]!)
   1067c:	ldr	lr, [pc, #4]	; 10688 <printf@plt-0x4>
   10680:	add	lr, pc, lr
   10684:	ldr	pc, [lr, #8]!
   10688:	andeq	r1, r1, r8, ror r9

0001068c <printf@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #69632	; 0x11000
   10694:	ldr	pc, [ip, #2424]!	; 0x978

00010698 <puts@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #69632	; 0x11000
   106a0:	ldr	pc, [ip, #2416]!	; 0x970

000106a4 <__libc_start_main@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #69632	; 0x11000
   106ac:	ldr	pc, [ip, #2408]!	; 0x968

000106b0 <__gmon_start__@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #69632	; 0x11000
   106b8:	ldr	pc, [ip, #2400]!	; 0x960

000106bc <strlen@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #69632	; 0x11000
   106c4:	ldr	pc, [ip, #2392]!	; 0x958

000106c8 <abort@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #69632	; 0x11000
   106d0:	ldr	pc, [ip, #2384]!	; 0x950

Disassembly of section .text:

000106d4 <main@@Base>:
   106d4:	ldr	ip, [pc, #792]	; 109f4 <main@@Base+0x320>
   106d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   106dc:	strd	r6, [sp, #8]
   106e0:	strd	r8, [sp, #16]
   106e4:	strd	sl, [sp, #24]
   106e8:	add	ip, pc, ip
   106ec:	str	lr, [sp, #32]
   106f0:	sub	sp, sp, #84	; 0x54
   106f4:	ldrd	r0, [ip]
   106f8:	add	r5, sp, #56	; 0x38
   106fc:	add	r8, sp, #32
   10700:	mov	r6, r5
   10704:	mov	r9, r5
   10708:	ldrd	r2, [ip, #8]
   1070c:	add	r4, sp, #80	; 0x50
   10710:	ldrd	sl, [ip, #16]
   10714:	strd	r0, [sp, #32]
   10718:	strd	r0, [sp, #56]	; 0x38
   1071c:	ldr	r0, [pc, #724]	; 109f8 <main@@Base+0x324>
   10720:	strd	r2, [r8, #8]
   10724:	strd	r2, [r5, #8]
   10728:	strd	sl, [r8, #16]
   1072c:	strd	sl, [r5, #16]
   10730:	add	r0, pc, r0
   10734:	ldr	r7, [pc, #704]	; 109fc <main@@Base+0x328>
   10738:	bl	10698 <puts@plt>
   1073c:	ldr	r0, [pc, #700]	; 10a00 <main@@Base+0x32c>
   10740:	ldr	sl, [pc, #700]	; 10a04 <main@@Base+0x330>
   10744:	add	r7, pc, r7
   10748:	add	r0, pc, r0
   1074c:	bl	1068c <printf@plt>
   10750:	add	sl, pc, sl
   10754:	ldr	r1, [r9], #4
   10758:	mov	r0, r7
   1075c:	bl	1068c <printf@plt>
   10760:	cmp	r9, r4
   10764:	bne	10754 <main@@Base+0x80>
   10768:	ldr	r0, [pc, #664]	; 10a08 <main@@Base+0x334>
   1076c:	mov	fp, r5
   10770:	add	r0, pc, r0
   10774:	bl	10698 <puts@plt>
   10778:	ldr	r3, [pc, #652]	; 10a0c <main@@Base+0x338>
   1077c:	mov	r0, r5
   10780:	mov	r2, #4
   10784:	mov	r1, #6
   10788:	ldr	r9, [sl, r3]
   1078c:	mov	r3, r9
   10790:	bl	10bcc <sort@@Base>
   10794:	ldr	r0, [pc, #628]	; 10a10 <main@@Base+0x33c>
   10798:	add	r0, pc, r0
   1079c:	bl	1068c <printf@plt>
   107a0:	ldr	r1, [fp], #4
   107a4:	mov	r0, r7
   107a8:	bl	1068c <printf@plt>
   107ac:	cmp	fp, r4
   107b0:	bne	107a0 <main@@Base+0xcc>
   107b4:	ldr	r0, [pc, #600]	; 10a14 <main@@Base+0x340>
   107b8:	add	r7, sp, #20
   107bc:	str	sl, [sp, #12]
   107c0:	add	r0, pc, r0
   107c4:	bl	10698 <puts@plt>
   107c8:	ldrd	r2, [sp, #32]
   107cc:	ldr	r0, [pc, #580]	; 10a18 <main@@Base+0x344>
   107d0:	strd	r2, [sp, #56]	; 0x38
   107d4:	ldrd	r2, [r8, #8]
   107d8:	add	r0, pc, r0
   107dc:	strd	r2, [r5, #8]
   107e0:	ldrd	r2, [r8, #16]
   107e4:	strd	r2, [r5, #16]
   107e8:	bl	10698 <puts@plt>
   107ec:	mov	ip, #4
   107f0:	mov	r0, r7
   107f4:	str	r9, [sp]
   107f8:	mov	r3, ip
   107fc:	mov	r2, #6
   10800:	mov	r1, r5
   10804:	str	ip, [sp, #20]
   10808:	bl	10cac <linear_search@@Base>
   1080c:	cmp	r0, #0
   10810:	beq	109cc <main@@Base+0x2f8>
   10814:	sub	r2, r0, r5
   10818:	ldr	r0, [pc, #508]	; 10a1c <main@@Base+0x348>
   1081c:	asr	r2, r2, #2
   10820:	ldr	r1, [sp, #20]
   10824:	add	r0, pc, r0
   10828:	bl	1068c <printf@plt>
   1082c:	ldrd	sl, [sp, #32]
   10830:	mov	r3, r9
   10834:	mov	r2, #4
   10838:	mov	r1, #6
   1083c:	mov	r0, r5
   10840:	strd	sl, [sp, #56]	; 0x38
   10844:	ldrd	sl, [r8, #8]
   10848:	strd	sl, [r5, #8]
   1084c:	ldrd	sl, [r8, #16]
   10850:	strd	sl, [r5, #16]
   10854:	bl	10bcc <sort@@Base>
   10858:	ldr	r0, [pc, #448]	; 10a20 <main@@Base+0x34c>
   1085c:	add	r0, pc, r0
   10860:	bl	10698 <puts@plt>
   10864:	mov	r0, r7
   10868:	mov	r3, #4
   1086c:	str	r9, [sp]
   10870:	mov	r2, #6
   10874:	mov	r1, r5
   10878:	bl	10d50 <binary_search@@Base>
   1087c:	cmp	r0, #0
   10880:	beq	109e0 <main@@Base+0x30c>
   10884:	sub	r2, r0, r5
   10888:	ldr	r0, [pc, #404]	; 10a24 <main@@Base+0x350>
   1088c:	asr	r2, r2, #2
   10890:	ldr	r1, [sp, #20]
   10894:	add	r0, pc, r0
   10898:	bl	1068c <printf@plt>
   1089c:	ldrd	r0, [r8, #8]
   108a0:	mov	r7, r5
   108a4:	ldrd	sl, [r8, #16]
   108a8:	ldrd	r2, [sp, #32]
   108ac:	ldr	r8, [pc, #372]	; 10a28 <main@@Base+0x354>
   108b0:	strd	sl, [r5, #16]
   108b4:	strd	r2, [sp, #56]	; 0x38
   108b8:	strd	r0, [r5, #8]
   108bc:	ldr	r0, [pc, #360]	; 10a2c <main@@Base+0x358>
   108c0:	add	r8, pc, r8
   108c4:	add	r0, pc, r0
   108c8:	bl	10698 <puts@plt>
   108cc:	ldr	r0, [pc, #348]	; 10a30 <main@@Base+0x35c>
   108d0:	add	r0, pc, r0
   108d4:	bl	1068c <printf@plt>
   108d8:	ldr	sl, [sp, #12]
   108dc:	mov	r0, r8
   108e0:	ldr	r1, [r7], #4
   108e4:	bl	1068c <printf@plt>
   108e8:	cmp	r7, r4
   108ec:	bne	108dc <main@@Base+0x208>
   108f0:	ldr	r0, [pc, #316]	; 10a34 <main@@Base+0x360>
   108f4:	add	r0, pc, r0
   108f8:	bl	10698 <puts@plt>
   108fc:	mov	r0, r5
   10900:	mov	r3, r9
   10904:	mov	r2, #4
   10908:	mov	r1, #6
   1090c:	bl	10e18 <insertion_sort@@Base>
   10910:	ldr	r0, [pc, #288]	; 10a38 <main@@Base+0x364>
   10914:	add	r0, pc, r0
   10918:	bl	1068c <printf@plt>
   1091c:	ldr	r1, [r6], #4
   10920:	mov	r0, r8
   10924:	bl	1068c <printf@plt>
   10928:	cmp	r6, r4
   1092c:	bne	1091c <main@@Base+0x248>
   10930:	ldr	r0, [pc, #260]	; 10a3c <main@@Base+0x368>
   10934:	add	r4, sp, #24
   10938:	add	r0, pc, r0
   1093c:	bl	10698 <puts@plt>
   10940:	ldr	r0, [pc, #248]	; 10a40 <main@@Base+0x36c>
   10944:	add	r0, pc, r0
   10948:	bl	10698 <puts@plt>
   1094c:	ldr	r3, [pc, #240]	; 10a44 <main@@Base+0x370>
   10950:	ldr	r0, [pc, #240]	; 10a48 <main@@Base+0x374>
   10954:	add	r3, pc, r3
   10958:	ldr	r2, [r3]
   1095c:	add	r0, pc, r0
   10960:	ldrb	r3, [r3, #4]
   10964:	str	r2, [sp, #24]
   10968:	strb	r3, [sp, #28]
   1096c:	bl	1068c <printf@plt>
   10970:	mov	r0, r4
   10974:	bl	10698 <puts@plt>
   10978:	mov	r0, r4
   1097c:	bl	106bc <strlen@plt>
   10980:	ldr	r3, [pc, #196]	; 10a4c <main@@Base+0x378>
   10984:	mov	r1, r0
   10988:	mov	r2, #1
   1098c:	mov	r0, r4
   10990:	ldr	r3, [sl, r3]
   10994:	bl	10bcc <sort@@Base>
   10998:	ldr	r0, [pc, #176]	; 10a50 <main@@Base+0x37c>
   1099c:	add	r0, pc, r0
   109a0:	bl	1068c <printf@plt>
   109a4:	mov	r0, r4
   109a8:	bl	10698 <puts@plt>
   109ac:	mov	r0, #0
   109b0:	add	sp, sp, #84	; 0x54
   109b4:	ldrd	r4, [sp]
   109b8:	ldrd	r6, [sp, #8]
   109bc:	ldrd	r8, [sp, #16]
   109c0:	ldrd	sl, [sp, #24]
   109c4:	add	sp, sp, #32
   109c8:	pop	{pc}		; (ldr pc, [sp], #4)
   109cc:	ldr	r0, [pc, #128]	; 10a54 <main@@Base+0x380>
   109d0:	ldr	r1, [sp, #20]
   109d4:	add	r0, pc, r0
   109d8:	bl	1068c <printf@plt>
   109dc:	b	1082c <main@@Base+0x158>
   109e0:	ldr	r0, [pc, #112]	; 10a58 <main@@Base+0x384>
   109e4:	ldr	r1, [sp, #20]
   109e8:	add	r0, pc, r0
   109ec:	bl	1068c <printf@plt>
   109f0:	b	1089c <main@@Base+0x1c8>
   109f4:	andeq	r0, r0, r0, ror r8
   109f8:	andeq	r0, r0, r0, asr #16
   109fc:	andeq	r0, r0, r4, asr #16
   10a00:	andeq	r0, r0, r8, lsr r8
   10a04:	andeq	r1, r1, r8, lsr #17
   10a08:	andeq	r0, r0, ip, asr r8
   10a0c:	andeq	r0, r0, r4, lsr #32
   10a10:	strdeq	r0, [r0], -r4
   10a14:	andeq	r0, r0, ip, lsl #16
   10a18:			; <UNDEFINED> instruction: 0x000007bc
   10a1c:	andeq	r0, r0, ip, ror r7
   10a20:	muleq	r0, r8, r7
   10a24:	andeq	r0, r0, ip, lsl #14
   10a28:	andeq	r0, r0, r8, asr #13
   10a2c:	andeq	r0, r0, ip, lsr r7
   10a30:			; <UNDEFINED> instruction: 0x000006b0
   10a34:	ldrdeq	r0, [r0], -r8
   10a38:	andeq	r0, r0, r8, ror r6
   10a3c:	muleq	r0, r4, r6
   10a40:	andeq	r0, r0, r8, asr #13
   10a44:	andeq	r0, r0, r4, asr #13
   10a48:	andeq	r0, r0, r4, lsr #12
   10a4c:	andeq	r0, r0, ip, lsr #32
   10a50:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10a54:	strdeq	r0, [r0], -ip
   10a58:	andeq	r0, r0, r8, ror #11

00010a5c <_start@@Base>:
   10a5c:	mov	fp, #0
   10a60:	mov	lr, #0
   10a64:	pop	{r1}		; (ldr r1, [sp], #4)
   10a68:	mov	r2, sp
   10a6c:	push	{r2}		; (str r2, [sp, #-4]!)
   10a70:	push	{r0}		; (str r0, [sp, #-4]!)
   10a74:	ldr	ip, [pc, #16]	; 10a8c <_start@@Base+0x30>
   10a78:	push	{ip}		; (str ip, [sp, #-4]!)
   10a7c:	ldr	r0, [pc, #12]	; 10a90 <_start@@Base+0x34>
   10a80:	ldr	r3, [pc, #12]	; 10a94 <_start@@Base+0x38>
   10a84:	bl	106a4 <__libc_start_main@plt>
   10a88:	bl	106c8 <abort@plt>
   10a8c:	andeq	r0, r1, r0, asr pc
   10a90:	ldrdeq	r0, [r1], -r4
   10a94:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10a98:	ldr	r3, [pc, #20]	; 10ab4 <_start@@Base+0x58>
   10a9c:	ldr	r2, [pc, #20]	; 10ab8 <_start@@Base+0x5c>
   10aa0:	add	r3, pc, r3
   10aa4:	ldr	r2, [r3, r2]
   10aa8:	cmp	r2, #0
   10aac:	bxeq	lr
   10ab0:	b	106b0 <__gmon_start__@plt>
   10ab4:	andeq	r1, r1, r8, asr r5
   10ab8:	andeq	r0, r0, r8, lsr #32
   10abc:	ldr	r0, [pc, #24]	; 10adc <_start@@Base+0x80>
   10ac0:	ldr	r3, [pc, #24]	; 10ae0 <_start@@Base+0x84>
   10ac4:	cmp	r3, r0
   10ac8:	bxeq	lr
   10acc:	ldr	r3, [pc, #16]	; 10ae4 <_start@@Base+0x88>
   10ad0:	cmp	r3, #0
   10ad4:	bxeq	lr
   10ad8:	bx	r3
   10adc:	andeq	r2, r2, r8, lsr r0
   10ae0:	andeq	r2, r2, r8, lsr r0
   10ae4:	andeq	r0, r0, r0
   10ae8:	ldr	r0, [pc, #36]	; 10b14 <_start@@Base+0xb8>
   10aec:	ldr	r1, [pc, #36]	; 10b18 <_start@@Base+0xbc>
   10af0:	sub	r1, r1, r0
   10af4:	asr	r1, r1, #2
   10af8:	add	r1, r1, r1, lsr #31
   10afc:	asrs	r1, r1, #1
   10b00:	bxeq	lr
   10b04:	ldr	r3, [pc, #16]	; 10b1c <_start@@Base+0xc0>
   10b08:	cmp	r3, #0
   10b0c:	bxeq	lr
   10b10:	bx	r3
   10b14:	andeq	r2, r2, r8, lsr r0
   10b18:	andeq	r2, r2, r8, lsr r0
   10b1c:	andeq	r0, r0, r0
   10b20:	push	{r4, lr}
   10b24:	ldr	r4, [pc, #24]	; 10b44 <_start@@Base+0xe8>
   10b28:	ldrb	r3, [r4]
   10b2c:	cmp	r3, #0
   10b30:	popne	{r4, pc}
   10b34:	bl	10abc <_start@@Base+0x60>
   10b38:	mov	r3, #1
   10b3c:	strb	r3, [r4]
   10b40:	pop	{r4, pc}
   10b44:	andeq	r2, r2, r8, lsr r0
   10b48:	b	10ae8 <_start@@Base+0x8c>

00010b4c <comp_int_asc@@Base>:
   10b4c:	ldr	r2, [r0]
   10b50:	ldr	r3, [r1]
   10b54:	cmp	r2, r3
   10b58:	blt	10b68 <comp_int_asc@@Base+0x1c>
   10b5c:	movgt	r0, #1
   10b60:	movle	r0, #0
   10b64:	bx	lr
   10b68:	mvn	r0, #0
   10b6c:	bx	lr

00010b70 <comp_char_desc@@Base>:
   10b70:	ldrb	r2, [r0]
   10b74:	ldrb	r3, [r1]
   10b78:	cmp	r2, r3
   10b7c:	bcc	10b8c <comp_char_desc@@Base+0x1c>
   10b80:	mvnhi	r0, #0
   10b84:	movls	r0, #0
   10b88:	bx	lr
   10b8c:	mov	r0, #1
   10b90:	bx	lr

00010b94 <get_elem@@Base>:
   10b94:	mla	r0, r2, r1, r0
   10b98:	bx	lr

00010b9c <swap@@Base>:
   10b9c:	cmp	r2, #0
   10ba0:	ble	10bc8 <swap@@Base+0x2c>
   10ba4:	sub	r0, r0, #1
   10ba8:	sub	r1, r1, #1
   10bac:	add	r2, r0, r2
   10bb0:	ldrb	r3, [r0, #1]!
   10bb4:	ldrb	ip, [r1, #1]!
   10bb8:	cmp	r0, r2
   10bbc:	strb	ip, [r0]
   10bc0:	strb	r3, [r1]
   10bc4:	bne	10bb0 <swap@@Base+0x14>
   10bc8:	bx	lr

00010bcc <sort@@Base>:
   10bcc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10bd0:	strd	r6, [sp, #8]
   10bd4:	subs	r7, r1, #0
   10bd8:	strd	r8, [sp, #16]
   10bdc:	strd	sl, [sp, #24]
   10be0:	str	lr, [sp, #32]
   10be4:	sub	sp, sp, #12
   10be8:	ble	10c90 <sort@@Base+0xc4>
   10bec:	mov	r9, r3
   10bf0:	mov	r6, r2
   10bf4:	mov	r8, r0
   10bf8:	mov	sl, #0
   10bfc:	mov	r1, sl
   10c00:	mov	r2, r6
   10c04:	mov	r0, r8
   10c08:	add	sl, sl, #1
   10c0c:	bl	10b94 <get_elem@@Base>
   10c10:	cmp	r7, sl
   10c14:	mov	r5, r0
   10c18:	str	r0, [sp, #4]
   10c1c:	beq	10c68 <sort@@Base+0x9c>
   10c20:	mov	r4, sl
   10c24:	mov	r1, r4
   10c28:	mov	r2, r6
   10c2c:	mov	r0, r8
   10c30:	add	r4, r4, #1
   10c34:	bl	10b94 <get_elem@@Base>
   10c38:	mov	r1, r5
   10c3c:	mov	fp, r0
   10c40:	blx	r9
   10c44:	cmp	r0, #0
   10c48:	movlt	r5, fp
   10c4c:	cmp	r7, r4
   10c50:	bne	10c24 <sort@@Base+0x58>
   10c54:	mov	r0, r5
   10c58:	mov	r2, r6
   10c5c:	ldr	r1, [sp, #4]
   10c60:	bl	10b9c <swap@@Base>
   10c64:	b	10bfc <sort@@Base+0x30>
   10c68:	ldr	r1, [sp, #4]
   10c6c:	mov	r2, r6
   10c70:	add	sp, sp, #12
   10c74:	ldrd	r4, [sp]
   10c78:	ldrd	r6, [sp, #8]
   10c7c:	ldrd	r8, [sp, #16]
   10c80:	ldrd	sl, [sp, #24]
   10c84:	ldr	lr, [sp, #32]
   10c88:	add	sp, sp, #36	; 0x24
   10c8c:	b	10b9c <swap@@Base>
   10c90:	add	sp, sp, #12
   10c94:	ldrd	r4, [sp]
   10c98:	ldrd	r6, [sp, #8]
   10c9c:	ldrd	r8, [sp, #16]
   10ca0:	ldrd	sl, [sp, #24]
   10ca4:	add	sp, sp, #32
   10ca8:	pop	{pc}		; (ldr pc, [sp], #4)

00010cac <linear_search@@Base>:
   10cac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   10cb0:	subs	r5, r2, #0
   10cb4:	strd	r6, [sp, #8]
   10cb8:	strd	r8, [sp, #16]
   10cbc:	str	sl, [sp, #24]
   10cc0:	str	lr, [sp, #28]
   10cc4:	ldr	r8, [sp, #32]
   10cc8:	ble	10d34 <linear_search@@Base+0x88>
   10ccc:	mov	r9, r3
   10cd0:	mov	r6, r1
   10cd4:	mov	r7, r0
   10cd8:	mov	r4, #0
   10cdc:	b	10cec <linear_search@@Base+0x40>
   10ce0:	add	r4, r4, #1
   10ce4:	cmp	r5, r4
   10ce8:	beq	10d34 <linear_search@@Base+0x88>
   10cec:	mov	r2, r5
   10cf0:	mov	r1, r4
   10cf4:	mov	r0, r6
   10cf8:	bl	10b94 <get_elem@@Base>
   10cfc:	mov	r1, r7
   10d00:	blx	r8
   10d04:	cmp	r0, #0
   10d08:	bne	10ce0 <linear_search@@Base+0x34>
   10d0c:	mov	r2, r9
   10d10:	mov	r1, r4
   10d14:	ldrd	r4, [sp]
   10d18:	mov	r0, r6
   10d1c:	ldrd	r6, [sp, #8]
   10d20:	ldrd	r8, [sp, #16]
   10d24:	ldr	sl, [sp, #24]
   10d28:	ldr	lr, [sp, #28]
   10d2c:	add	sp, sp, #32
   10d30:	b	10b94 <get_elem@@Base>
   10d34:	ldrd	r4, [sp]
   10d38:	mov	r0, #0
   10d3c:	ldrd	r6, [sp, #8]
   10d40:	ldrd	r8, [sp, #16]
   10d44:	ldr	sl, [sp, #24]
   10d48:	add	sp, sp, #28
   10d4c:	pop	{pc}		; (ldr pc, [sp], #4)

00010d50 <binary_search@@Base>:
   10d50:	strd	r4, [sp, #-32]!	; 0xffffffe0
   10d54:	strd	r6, [sp, #8]
   10d58:	strd	r8, [sp, #16]
   10d5c:	subs	r8, r2, #1
   10d60:	str	sl, [sp, #24]
   10d64:	str	lr, [sp, #28]
   10d68:	ldr	sl, [sp, #32]
   10d6c:	bmi	10dfc <binary_search@@Base+0xac>
   10d70:	mov	r7, r3
   10d74:	mov	r6, r1
   10d78:	mov	r9, r0
   10d7c:	mov	r5, #0
   10d80:	b	10da8 <binary_search@@Base+0x58>
   10d84:	bl	10b94 <get_elem@@Base>
   10d88:	mov	r1, r0
   10d8c:	mov	r0, r9
   10d90:	blx	sl
   10d94:	cmn	r0, #1
   10d98:	subeq	r8, r4, #1
   10d9c:	addne	r5, r4, #1
   10da0:	cmp	r8, r5
   10da4:	blt	10dfc <binary_search@@Base+0xac>
   10da8:	add	r4, r5, r8
   10dac:	mov	r2, r7
   10db0:	asr	r4, r4, #1
   10db4:	mov	r0, r6
   10db8:	mov	r1, r4
   10dbc:	bl	10b94 <get_elem@@Base>
   10dc0:	mov	r1, r0
   10dc4:	mov	r0, r9
   10dc8:	blx	sl
   10dcc:	cmp	r0, #0
   10dd0:	mov	r2, r7
   10dd4:	mov	r1, r4
   10dd8:	mov	r0, r6
   10ddc:	beq	10d84 <binary_search@@Base+0x34>
   10de0:	ldrd	r4, [sp]
   10de4:	ldrd	r6, [sp, #8]
   10de8:	ldrd	r8, [sp, #16]
   10dec:	ldr	sl, [sp, #24]
   10df0:	ldr	lr, [sp, #28]
   10df4:	add	sp, sp, #32
   10df8:	b	10b94 <get_elem@@Base>
   10dfc:	ldrd	r4, [sp]
   10e00:	mov	r0, #0
   10e04:	ldrd	r6, [sp, #8]
   10e08:	ldrd	r8, [sp, #16]
   10e0c:	ldr	sl, [sp, #24]
   10e10:	add	sp, sp, #28
   10e14:	pop	{pc}		; (ldr pc, [sp], #4)

00010e18 <insertion_sort@@Base>:
   10e18:	cmp	r1, #1
   10e1c:	bxle	lr
   10e20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10e24:	mov	r4, r2
   10e28:	strd	r6, [sp, #8]
   10e2c:	mov	r7, r0
   10e30:	strd	r8, [sp, #16]
   10e34:	mov	r9, r3
   10e38:	strd	sl, [sp, #24]
   10e3c:	mov	fp, r1
   10e40:	mov	sl, #1
   10e44:	str	lr, [sp, #32]
   10e48:	sub	sp, sp, #4
   10e4c:	mov	r6, sl
   10e50:	mov	r2, r4
   10e54:	mov	r1, r6
   10e58:	mov	r0, r7
   10e5c:	sub	r5, r6, #1
   10e60:	bl	10b94 <get_elem@@Base>
   10e64:	mov	r8, r0
   10e68:	mov	r2, r4
   10e6c:	mov	r1, r5
   10e70:	mov	r0, r7
   10e74:	bl	10b94 <get_elem@@Base>
   10e78:	mov	r1, r0
   10e7c:	mov	r0, r8
   10e80:	blx	r9
   10e84:	cmn	r0, #1
   10e88:	mov	r1, r6
   10e8c:	mov	r2, r4
   10e90:	mov	r0, r7
   10e94:	bne	10ec8 <insertion_sort@@Base+0xb0>
   10e98:	bl	10b94 <get_elem@@Base>
   10e9c:	mov	r6, r0
   10ea0:	mov	r2, r4
   10ea4:	mov	r1, r5
   10ea8:	mov	r0, r7
   10eac:	bl	10b94 <get_elem@@Base>
   10eb0:	mov	r1, r0
   10eb4:	mov	r2, r4
   10eb8:	mov	r0, r6
   10ebc:	bl	10b9c <swap@@Base>
   10ec0:	subs	r6, r5, #0
   10ec4:	bne	10e50 <insertion_sort@@Base+0x38>
   10ec8:	add	sl, sl, #1
   10ecc:	cmp	fp, sl
   10ed0:	bne	10e4c <insertion_sort@@Base+0x34>
   10ed4:	add	sp, sp, #4
   10ed8:	ldrd	r4, [sp]
   10edc:	ldrd	r6, [sp, #8]
   10ee0:	ldrd	r8, [sp, #16]
   10ee4:	ldrd	sl, [sp, #24]
   10ee8:	add	sp, sp, #32
   10eec:	pop	{pc}		; (ldr pc, [sp], #4)

00010ef0 <__libc_csu_init@@Base>:
   10ef0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10ef4:	mov	r7, r0
   10ef8:	ldr	r6, [pc, #72]	; 10f48 <__libc_csu_init@@Base+0x58>
   10efc:	ldr	r5, [pc, #72]	; 10f4c <__libc_csu_init@@Base+0x5c>
   10f00:	add	r6, pc, r6
   10f04:	add	r5, pc, r5
   10f08:	sub	r6, r6, r5
   10f0c:	mov	r8, r1
   10f10:	mov	r9, r2
   10f14:	bl	1066c <printf@plt-0x20>
   10f18:	asrs	r6, r6, #2
   10f1c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10f20:	mov	r4, #0
   10f24:	add	r4, r4, #1
   10f28:	ldr	r3, [r5], #4
   10f2c:	mov	r2, r9
   10f30:	mov	r1, r8
   10f34:	mov	r0, r7
   10f38:	blx	r3
   10f3c:	cmp	r6, r4
   10f40:	bne	10f24 <__libc_csu_init@@Base+0x34>
   10f44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10f48:	andeq	r1, r1, ip
   10f4c:	andeq	r1, r1, r4

00010f50 <__libc_csu_fini@@Base>:
   10f50:	bx	lr

Disassembly of section .fini:

00010f54 <.fini>:
   10f54:	push	{r3, lr}
   10f58:	pop	{r3, pc}
