
../repos/charybdis/extensions/.libs/extb_extgecos.so:     file format elf32-littlearm


Disassembly of section .init:

000003bc <_init>:
 3bc:	push	{r3, lr}
 3c0:	bl	40c <call_weak_fn>
 3c4:	pop	{r3, pc}

Disassembly of section .plt:

000003c8 <.plt>:
 3c8:	push	{lr}		; (str lr, [sp, #-4]!)
 3cc:	ldr	lr, [pc, #4]	; 3d8 <.plt+0x10>
 3d0:	add	lr, pc, lr
 3d4:	ldr	pc, [lr, #8]!
 3d8:	.word	0x00010c28

000003dc <__cxa_finalize@plt>:
 3dc:	add	ip, pc, #0, 12
 3e0:	add	ip, ip, #16, 20	; 0x10000
 3e4:	ldr	pc, [ip, #3112]!	; 0xc28

000003e8 <__gmon_start__@plt>:
 3e8:	add	ip, pc, #0, 12
 3ec:	add	ip, ip, #16, 20	; 0x10000
 3f0:	ldr	pc, [ip, #3104]!	; 0xc20

000003f4 <snprintf@plt>:
 3f4:	add	ip, pc, #0, 12
 3f8:	add	ip, ip, #16, 20	; 0x10000
 3fc:	ldr	pc, [ip, #3096]!	; 0xc18

00000400 <match@plt>:
 400:	add	ip, pc, #0, 12
 404:	add	ip, ip, #16, 20	; 0x10000
 408:	ldr	pc, [ip, #3088]!	; 0xc10

Disassembly of section .text:

0000040c <call_weak_fn>:
 40c:	ldr	r3, [pc, #20]	; 428 <call_weak_fn+0x1c>
 410:	ldr	r2, [pc, #20]	; 42c <call_weak_fn+0x20>
 414:	add	r3, pc, r3
 418:	ldr	r2, [r3, r2]
 41c:	cmp	r2, #0
 420:	bxeq	lr
 424:	b	3e8 <__gmon_start__@plt>
 428:	.word	0x00010be4
 42c:	.word	0x00000024

00000430 <deregister_tm_clones>:
 430:	ldr	r3, [pc, #52]	; 46c <deregister_tm_clones+0x3c>
 434:	ldr	r0, [pc, #52]	; 470 <deregister_tm_clones+0x40>
 438:	add	r3, pc, r3
 43c:	add	r0, pc, r0
 440:	add	r3, r3, #3
 444:	sub	r3, r3, r0
 448:	cmp	r3, #6
 44c:	ldr	r3, [pc, #32]	; 474 <deregister_tm_clones+0x44>
 450:	add	r3, pc, r3
 454:	bxls	lr
 458:	ldr	r2, [pc, #24]	; 478 <deregister_tm_clones+0x48>
 45c:	ldr	r3, [r3, r2]
 460:	cmp	r3, #0
 464:	bxeq	lr
 468:	bx	r3
 46c:	.word	0x00010c20
 470:	.word	0x00010c1c
 474:	.word	0x00010ba8
 478:	.word	0x00000020

0000047c <register_tm_clones>:
 47c:	ldr	r1, [pc, #56]	; 4bc <register_tm_clones+0x40>
 480:	ldr	r0, [pc, #56]	; 4c0 <register_tm_clones+0x44>
 484:	add	r1, pc, r1
 488:	add	r0, pc, r0
 48c:	sub	r1, r1, r0
 490:	ldr	r3, [pc, #44]	; 4c4 <register_tm_clones+0x48>
 494:	asr	r1, r1, #2
 498:	add	r3, pc, r3
 49c:	add	r1, r1, r1, lsr #31
 4a0:	asrs	r1, r1, #1
 4a4:	bxeq	lr
 4a8:	ldr	r2, [pc, #24]	; 4c8 <register_tm_clones+0x4c>
 4ac:	ldr	r3, [r3, r2]
 4b0:	cmp	r3, #0
 4b4:	bxeq	lr
 4b8:	bx	r3
 4bc:	.word	0x00010bd4
 4c0:	.word	0x00010bd0
 4c4:	.word	0x00010b60
 4c8:	.word	0x00000030

000004cc <__do_global_dtors_aux>:
 4cc:	ldr	r3, [pc, #76]	; 520 <__do_global_dtors_aux+0x54>
 4d0:	ldr	r2, [pc, #76]	; 524 <__do_global_dtors_aux+0x58>
 4d4:	add	r3, pc, r3
 4d8:	add	r2, pc, r2
 4dc:	ldrb	r3, [r3]
 4e0:	cmp	r3, #0
 4e4:	bxne	lr
 4e8:	ldr	r3, [pc, #56]	; 528 <__do_global_dtors_aux+0x5c>
 4ec:	push	{r4, lr}
 4f0:	ldr	r3, [r2, r3]
 4f4:	cmp	r3, #0
 4f8:	beq	508 <__do_global_dtors_aux+0x3c>
 4fc:	ldr	r3, [pc, #40]	; 52c <__do_global_dtors_aux+0x60>
 500:	ldr	r0, [pc, r3]
 504:	bl	3dc <__cxa_finalize@plt>
 508:	bl	430 <deregister_tm_clones>
 50c:	ldr	r3, [pc, #28]	; 530 <__do_global_dtors_aux+0x64>
 510:	mov	r2, #1
 514:	add	r3, pc, r3
 518:	strb	r2, [r3]
 51c:	pop	{r4, pc}
 520:	.word	0x00010b84
 524:	.word	0x00010b20
 528:	.word	0x0000001c
 52c:	.word	0x00010b2c
 530:	.word	0x00010b44

00000534 <frame_dummy>:
 534:	ldr	r0, [pc, #56]	; 574 <frame_dummy+0x40>
 538:	ldr	r3, [pc, #56]	; 578 <frame_dummy+0x44>
 53c:	add	r0, pc, r0
 540:	ldr	r2, [r0]
 544:	add	r3, pc, r3
 548:	cmp	r2, #0
 54c:	bne	554 <frame_dummy+0x20>
 550:	b	47c <register_tm_clones>
 554:	ldr	r2, [pc, #32]	; 57c <frame_dummy+0x48>
 558:	ldr	r3, [r3, r2]
 55c:	cmp	r3, #0
 560:	beq	550 <frame_dummy+0x1c>
 564:	push	{r4, lr}
 568:	blx	r3
 56c:	pop	{r4, lr}
 570:	b	47c <register_tm_clones>
 574:	.word	0x000109b8
 578:	.word	0x00010ab4
 57c:	.word	0x00000028

00000580 <_modinit>:
 580:	push	{fp}		; (str fp, [sp, #-4]!)
 584:	add	fp, sp, #0
 588:	ldr	r2, [pc, #40]	; 5b8 <_modinit+0x38>
 58c:	add	r2, pc, r2
 590:	ldr	r3, [pc, #36]	; 5bc <_modinit+0x3c>
 594:	ldr	r3, [r2, r3]
 598:	ldr	r2, [pc, #32]	; 5c0 <_modinit+0x40>
 59c:	add	r2, pc, r2
 5a0:	str	r2, [r3, #480]	; 0x1e0
 5a4:	mov	r3, #0
 5a8:	mov	r0, r3
 5ac:	add	sp, fp, #0
 5b0:	pop	{fp}		; (ldr fp, [sp], #4)
 5b4:	bx	lr
 5b8:	.word	0x00010a6c
 5bc:	.word	0x0000002c
 5c0:	.word	0x00000058

000005c4 <_moddeinit>:
 5c4:	push	{fp}		; (str fp, [sp, #-4]!)
 5c8:	add	fp, sp, #0
 5cc:	ldr	r2, [pc, #32]	; 5f4 <_moddeinit+0x30>
 5d0:	add	r2, pc, r2
 5d4:	ldr	r3, [pc, #28]	; 5f8 <_moddeinit+0x34>
 5d8:	ldr	r3, [r2, r3]
 5dc:	mov	r2, #0
 5e0:	str	r2, [r3, #480]	; 0x1e0
 5e4:	nop			; (mov r0, r0)
 5e8:	add	sp, fp, #0
 5ec:	pop	{fp}		; (ldr fp, [sp], #4)
 5f0:	bx	lr
 5f4:	.word	0x00010a28
 5f8:	.word	0x0000002c

000005fc <eb_extended>:
 5fc:	push	{fp, lr}
 600:	add	fp, sp, #4
 604:	sub	sp, sp, #552	; 0x228
 608:	str	r0, [fp, #-528]	; 0xfffffdf0
 60c:	str	r1, [fp, #-532]	; 0xfffffdec
 610:	str	r2, [fp, #-536]	; 0xfffffde8
 614:	str	r3, [fp, #-540]	; 0xfffffde4
 618:	ldr	r3, [fp, #-528]	; 0xfffffdf0
 61c:	cmp	r3, #0
 620:	bne	62c <eb_extended+0x30>
 624:	mvn	r3, #0
 628:	b	73c <eb_extended+0x140>
 62c:	ldr	r3, [fp, #-532]	; 0xfffffdec
 630:	add	ip, r3, #88	; 0x58
 634:	ldr	r3, [fp, #-532]	; 0xfffffdec
 638:	add	r2, r3, #152	; 0x98
 63c:	ldr	r3, [fp, #-532]	; 0xfffffdec
 640:	add	r1, r3, #163	; 0xa3
 644:	ldr	r3, [fp, #-532]	; 0xfffffdec
 648:	add	r3, r3, #344	; 0x158
 64c:	add	r3, r3, #1
 650:	sub	r0, fp, #520	; 0x208
 654:	str	r3, [sp, #8]
 658:	str	r1, [sp, #4]
 65c:	str	r2, [sp]
 660:	mov	r3, ip
 664:	ldr	r2, [pc, #220]	; 748 <eb_extended+0x14c>
 668:	add	r2, pc, r2
 66c:	mov	r1, #512	; 0x200
 670:	bl	3f4 <snprintf@plt>
 674:	sub	r3, fp, #520	; 0x208
 678:	mov	r1, r3
 67c:	ldr	r0, [fp, #-528]	; 0xfffffdf0
 680:	bl	400 <match@plt>
 684:	mov	r3, r0
 688:	cmp	r3, #0
 68c:	movne	r3, #1
 690:	moveq	r3, #0
 694:	uxtb	r3, r3
 698:	str	r3, [fp, #-8]
 69c:	ldr	r3, [fp, #-8]
 6a0:	cmp	r3, #0
 6a4:	bne	738 <eb_extended+0x13c>
 6a8:	ldr	r3, [fp, #-532]	; 0xfffffdec
 6ac:	ldrd	r2, [r3, #64]	; 0x40
 6b0:	mov	r0, #131072	; 0x20000
 6b4:	mov	r1, #0
 6b8:	and	r2, r2, r0
 6bc:	and	r3, r3, r1
 6c0:	orrs	r3, r2, r3
 6c4:	beq	738 <eb_extended+0x13c>
 6c8:	ldr	r3, [fp, #-532]	; 0xfffffdec
 6cc:	add	ip, r3, #88	; 0x58
 6d0:	ldr	r3, [fp, #-532]	; 0xfffffdec
 6d4:	add	r2, r3, #152	; 0x98
 6d8:	ldr	r3, [fp, #-532]	; 0xfffffdec
 6dc:	add	r1, r3, #227	; 0xe3
 6e0:	ldr	r3, [fp, #-532]	; 0xfffffdec
 6e4:	add	r3, r3, #344	; 0x158
 6e8:	add	r3, r3, #1
 6ec:	sub	r0, fp, #520	; 0x208
 6f0:	str	r3, [sp, #8]
 6f4:	str	r1, [sp, #4]
 6f8:	str	r2, [sp]
 6fc:	mov	r3, ip
 700:	ldr	r2, [pc, #68]	; 74c <eb_extended+0x150>
 704:	add	r2, pc, r2
 708:	mov	r1, #512	; 0x200
 70c:	bl	3f4 <snprintf@plt>
 710:	sub	r3, fp, #520	; 0x208
 714:	mov	r1, r3
 718:	ldr	r0, [fp, #-528]	; 0xfffffdf0
 71c:	bl	400 <match@plt>
 720:	mov	r3, r0
 724:	cmp	r3, #0
 728:	movne	r3, #1
 72c:	moveq	r3, #0
 730:	uxtb	r3, r3
 734:	str	r3, [fp, #-8]
 738:	ldr	r3, [fp, #-8]
 73c:	mov	r0, r3
 740:	sub	sp, fp, #4
 744:	pop	{fp, pc}
 748:	.word	0x00000108
 74c:	.word	0x0000006c

Disassembly of section .fini:

00000750 <_fini>:
 750:	push	{r3, lr}
 754:	pop	{r3, pc}
