
../repos/coreutils/src/mkfifo:     file format elf32-littlearm


Disassembly of section .init:

000113ec <.init>:
   113ec:	push	{r3, lr}
   113f0:	bl	11c88 <__assert_fail@plt+0x45c>
   113f4:	pop	{r3, pc}

Disassembly of section .plt:

000113f8 <fstatfs64@plt-0x14>:
   113f8:	push	{lr}		; (str lr, [sp, #-4]!)
   113fc:	ldr	lr, [pc, #4]	; 11408 <fstatfs64@plt-0x4>
   11400:	add	lr, pc, lr
   11404:	ldr	pc, [lr, #8]!
   11408:	strdeq	sl, [r1], -r8

0001140c <fstatfs64@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #106496	; 0x1a000
   11414:	ldr	pc, [ip, #3064]!	; 0xbf8

00011418 <selabel_lookup@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #106496	; 0x1a000
   11420:	ldr	pc, [ip, #3056]!	; 0xbf0

00011424 <calloc@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #106496	; 0x1a000
   1142c:	ldr	pc, [ip, #3048]!	; 0xbe8

00011430 <fputs_unlocked@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #106496	; 0x1a000
   11438:	ldr	pc, [ip, #3040]!	; 0xbe0

0001143c <raise@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #106496	; 0x1a000
   11444:	ldr	pc, [ip, #3032]!	; 0xbd8

00011448 <is_selinux_enabled@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #106496	; 0x1a000
   11450:	ldr	pc, [ip, #3024]!	; 0xbd0

00011454 <strcmp@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #106496	; 0x1a000
   1145c:	ldr	pc, [ip, #3016]!	; 0xbc8

00011460 <context_type_get@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #106496	; 0x1a000
   11468:	ldr	pc, [ip, #3008]!	; 0xbc0

0001146c <fflush@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #106496	; 0x1a000
   11474:	ldr	pc, [ip, #3000]!	; 0xbb8

00011478 <lsetfilecon@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #106496	; 0x1a000
   11480:	ldr	pc, [ip, #2992]!	; 0xbb0

00011484 <memmove@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #106496	; 0x1a000
   1148c:	ldr	pc, [ip, #2984]!	; 0xba8

00011490 <free@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #106496	; 0x1a000
   11498:	ldr	pc, [ip, #2976]!	; 0xba0

0001149c <faccessat@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #106496	; 0x1a000
   114a4:	ldr	pc, [ip, #2968]!	; 0xb98

000114a8 <_exit@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #106496	; 0x1a000
   114b0:	ldr	pc, [ip, #2960]!	; 0xb90

000114b4 <memcpy@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #106496	; 0x1a000
   114bc:	ldr	pc, [ip, #2952]!	; 0xb88

000114c0 <mbsinit@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #106496	; 0x1a000
   114c8:	ldr	pc, [ip, #2944]!	; 0xb80

000114cc <context_new@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #106496	; 0x1a000
   114d4:	ldr	pc, [ip, #2936]!	; 0xb78

000114d8 <memcmp@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #106496	; 0x1a000
   114e0:	ldr	pc, [ip, #2928]!	; 0xb70

000114e4 <fputc_unlocked@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #106496	; 0x1a000
   114ec:	ldr	pc, [ip, #2920]!	; 0xb68

000114f0 <dcgettext@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #106496	; 0x1a000
   114f8:	ldr	pc, [ip, #2912]!	; 0xb60

000114fc <context_type_set@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #106496	; 0x1a000
   11504:	ldr	pc, [ip, #2904]!	; 0xb58

00011508 <realloc@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #106496	; 0x1a000
   11510:	ldr	pc, [ip, #2896]!	; 0xb50

00011514 <fgetfilecon@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #106496	; 0x1a000
   1151c:	ldr	pc, [ip, #2888]!	; 0xb48

00011520 <textdomain@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #106496	; 0x1a000
   11528:	ldr	pc, [ip, #2880]!	; 0xb40

0001152c <rawmemchr@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #106496	; 0x1a000
   11534:	ldr	pc, [ip, #2872]!	; 0xb38

00011538 <__fxstatat64@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #106496	; 0x1a000
   11540:	ldr	pc, [ip, #2864]!	; 0xb30

00011544 <iswprint@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #106496	; 0x1a000
   1154c:	ldr	pc, [ip, #2856]!	; 0xb28

00011550 <__fxstat64@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #106496	; 0x1a000
   11558:	ldr	pc, [ip, #2848]!	; 0xb20

0001155c <readlink@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #106496	; 0x1a000
   11564:	ldr	pc, [ip, #2840]!	; 0xb18

00011568 <fwrite@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #106496	; 0x1a000
   11570:	ldr	pc, [ip, #2832]!	; 0xb10

00011574 <lseek64@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #106496	; 0x1a000
   1157c:	ldr	pc, [ip, #2824]!	; 0xb08

00011580 <__ctype_get_mb_cur_max@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #106496	; 0x1a000
   11588:	ldr	pc, [ip, #2816]!	; 0xb00

0001158c <getcon@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #106496	; 0x1a000
   11594:	ldr	pc, [ip, #2808]!	; 0xaf8

00011598 <__fpending@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #106496	; 0x1a000
   115a0:	ldr	pc, [ip, #2800]!	; 0xaf0

000115a4 <mbrtowc@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #106496	; 0x1a000
   115ac:	ldr	pc, [ip, #2792]!	; 0xae8

000115b0 <error@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #106496	; 0x1a000
   115b8:	ldr	pc, [ip, #2784]!	; 0xae0

000115bc <open64@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #106496	; 0x1a000
   115c4:	ldr	pc, [ip, #2776]!	; 0xad8

000115c8 <lgetfilecon@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #106496	; 0x1a000
   115d0:	ldr	pc, [ip, #2768]!	; 0xad0

000115d4 <malloc@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #106496	; 0x1a000
   115dc:	ldr	pc, [ip, #2760]!	; 0xac8

000115e0 <__libc_start_main@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #106496	; 0x1a000
   115e8:	ldr	pc, [ip, #2752]!	; 0xac0

000115ec <__freading@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #106496	; 0x1a000
   115f4:	ldr	pc, [ip, #2744]!	; 0xab8

000115f8 <__gmon_start__@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #106496	; 0x1a000
   11600:	ldr	pc, [ip, #2736]!	; 0xab0

00011604 <context_free@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #106496	; 0x1a000
   1160c:	ldr	pc, [ip, #2728]!	; 0xaa8

00011610 <mempcpy@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #106496	; 0x1a000
   11618:	ldr	pc, [ip, #2720]!	; 0xaa0

0001161c <getopt_long@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #106496	; 0x1a000
   11624:	ldr	pc, [ip, #2712]!	; 0xa98

00011628 <__ctype_b_loc@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #106496	; 0x1a000
   11630:	ldr	pc, [ip, #2704]!	; 0xa90

00011634 <getcwd@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #106496	; 0x1a000
   1163c:	ldr	pc, [ip, #2696]!	; 0xa88

00011640 <exit@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #106496	; 0x1a000
   11648:	ldr	pc, [ip, #2688]!	; 0xa80

0001164c <getfilecon@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #106496	; 0x1a000
   11654:	ldr	pc, [ip, #2680]!	; 0xa78

00011658 <strlen@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #106496	; 0x1a000
   11660:	ldr	pc, [ip, #2672]!	; 0xa70

00011664 <selabel_open@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #106496	; 0x1a000
   1166c:	ldr	pc, [ip, #2664]!	; 0xa68

00011670 <openat64@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #106496	; 0x1a000
   11678:	ldr	pc, [ip, #2656]!	; 0xa60

0001167c <setfscreatecon@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #106496	; 0x1a000
   11684:	ldr	pc, [ip, #2648]!	; 0xa58

00011688 <__errno_location@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #106496	; 0x1a000
   11690:	ldr	pc, [ip, #2640]!	; 0xa50

00011694 <__sprintf_chk@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #106496	; 0x1a000
   1169c:	ldr	pc, [ip, #2632]!	; 0xa48

000116a0 <__cxa_atexit@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #106496	; 0x1a000
   116a8:	ldr	pc, [ip, #2624]!	; 0xa40

000116ac <memset@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #106496	; 0x1a000
   116b4:	ldr	pc, [ip, #2616]!	; 0xa38

000116b8 <__printf_chk@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #106496	; 0x1a000
   116c0:	ldr	pc, [ip, #2608]!	; 0xa30

000116c4 <fileno@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #106496	; 0x1a000
   116cc:	ldr	pc, [ip, #2600]!	; 0xa28

000116d0 <__fprintf_chk@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #106496	; 0x1a000
   116d8:	ldr	pc, [ip, #2592]!	; 0xa20

000116dc <fclose@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #106496	; 0x1a000
   116e4:	ldr	pc, [ip, #2584]!	; 0xa18

000116e8 <fseeko64@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #106496	; 0x1a000
   116f0:	ldr	pc, [ip, #2576]!	; 0xa10

000116f4 <fcntl64@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #106496	; 0x1a000
   116fc:	ldr	pc, [ip, #2568]!	; 0xa08

00011700 <setlocale@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #106496	; 0x1a000
   11708:	ldr	pc, [ip, #2560]!	; 0xa00

0001170c <fsetfilecon@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #106496	; 0x1a000
   11714:	ldr	pc, [ip, #2552]!	; 0x9f8

00011718 <strrchr@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #106496	; 0x1a000
   11720:	ldr	pc, [ip, #2544]!	; 0x9f0

00011724 <nl_langinfo@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #106496	; 0x1a000
   1172c:	ldr	pc, [ip, #2536]!	; 0x9e8

00011730 <readdir64@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #106496	; 0x1a000
   11738:	ldr	pc, [ip, #2528]!	; 0x9e0

0001173c <fdopendir@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #106496	; 0x1a000
   11744:	ldr	pc, [ip, #2520]!	; 0x9d8

00011748 <security_compute_create@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #106496	; 0x1a000
   11750:	ldr	pc, [ip, #2512]!	; 0x9d0

00011754 <dirfd@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #106496	; 0x1a000
   1175c:	ldr	pc, [ip, #2504]!	; 0x9c8

00011760 <fchdir@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #106496	; 0x1a000
   11768:	ldr	pc, [ip, #2496]!	; 0x9c0

0001176c <qsort@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #106496	; 0x1a000
   11774:	ldr	pc, [ip, #2488]!	; 0x9b8

00011778 <freecon@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #106496	; 0x1a000
   11780:	ldr	pc, [ip, #2480]!	; 0x9b0

00011784 <bindtextdomain@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #106496	; 0x1a000
   1178c:	ldr	pc, [ip, #2472]!	; 0x9a8

00011790 <getfscreatecon@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #106496	; 0x1a000
   11798:	ldr	pc, [ip, #2464]!	; 0x9a0

0001179c <umask@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #106496	; 0x1a000
   117a4:	ldr	pc, [ip, #2456]!	; 0x998

000117a8 <context_str@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #106496	; 0x1a000
   117b0:	ldr	pc, [ip, #2448]!	; 0x990

000117b4 <chmod@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #106496	; 0x1a000
   117bc:	ldr	pc, [ip, #2440]!	; 0x988

000117c0 <__xstat64@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #106496	; 0x1a000
   117c8:	ldr	pc, [ip, #2432]!	; 0x980

000117cc <strncmp@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #106496	; 0x1a000
   117d4:	ldr	pc, [ip, #2424]!	; 0x978

000117d8 <abort@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #106496	; 0x1a000
   117e0:	ldr	pc, [ip, #2416]!	; 0x970

000117e4 <close@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #106496	; 0x1a000
   117ec:	ldr	pc, [ip, #2408]!	; 0x968

000117f0 <__lxstat64@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #106496	; 0x1a000
   117f8:	ldr	pc, [ip, #2400]!	; 0x960

000117fc <mkfifo@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #106496	; 0x1a000
   11804:	ldr	pc, [ip, #2392]!	; 0x958

00011808 <mode_to_security_class@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #106496	; 0x1a000
   11810:	ldr	pc, [ip, #2384]!	; 0x950

00011814 <closedir@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #106496	; 0x1a000
   1181c:	ldr	pc, [ip, #2376]!	; 0x948

00011820 <strspn@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #106496	; 0x1a000
   11828:	ldr	pc, [ip, #2368]!	; 0x940

0001182c <__assert_fail@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #106496	; 0x1a000
   11834:	ldr	pc, [ip, #2360]!	; 0x938

Disassembly of section .text:

00011838 <lchmod@@Base-0x4a38>:
   11838:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1183c:	mov	r7, r0
   11840:	sub	sp, sp, #20
   11844:	ldr	r0, [r1]
   11848:	mov	r5, r1
   1184c:	bl	16928 <lchmod@@Base+0x6b8>
   11850:	ldr	r1, [pc, #924]	; 11bf4 <__assert_fail@plt+0x3c8>
   11854:	mov	r0, #6
   11858:	bl	11700 <setlocale@plt>
   1185c:	mov	r4, #0
   11860:	ldr	r1, [pc, #912]	; 11bf8 <__assert_fail@plt+0x3cc>
   11864:	ldr	r0, [pc, #912]	; 11bfc <__assert_fail@plt+0x3d0>
   11868:	ldr	r9, [pc, #912]	; 11c00 <__assert_fail@plt+0x3d4>
   1186c:	ldr	r8, [pc, #912]	; 11c04 <__assert_fail@plt+0x3d8>
   11870:	ldr	sl, [pc, #912]	; 11c08 <__assert_fail@plt+0x3dc>
   11874:	bl	11784 <bindtextdomain@plt>
   11878:	mov	fp, r4
   1187c:	ldr	r0, [pc, #888]	; 11bfc <__assert_fail@plt+0x3d0>
   11880:	mov	r6, r4
   11884:	bl	11520 <textdomain@plt>
   11888:	ldr	r0, [pc, #892]	; 11c0c <__assert_fail@plt+0x3e0>
   1188c:	bl	1a434 <lchmod@@Base+0x41c4>
   11890:	str	r4, [sp, #8]
   11894:	str	r6, [sp]
   11898:	mov	r3, r9
   1189c:	mov	r2, r8
   118a0:	mov	r1, r5
   118a4:	mov	r0, r7
   118a8:	bl	1161c <getopt_long@plt>
   118ac:	cmn	r0, #1
   118b0:	beq	119d4 <__assert_fail@plt+0x1a8>
   118b4:	cmn	r0, #2
   118b8:	beq	1199c <__assert_fail@plt+0x170>
   118bc:	ble	1193c <__assert_fail@plt+0x110>
   118c0:	cmp	r0, #90	; 0x5a
   118c4:	beq	118d8 <__assert_fail@plt+0xac>
   118c8:	cmp	r0, #109	; 0x6d
   118cc:	bne	11994 <__assert_fail@plt+0x168>
   118d0:	ldr	fp, [sl]
   118d4:	b	11894 <__assert_fail@plt+0x68>
   118d8:	bl	11448 <is_selinux_enabled@plt>
   118dc:	cmp	r0, #0
   118e0:	ble	119a4 <__assert_fail@plt+0x178>
   118e4:	ldr	r1, [sl]
   118e8:	cmp	r1, #0
   118ec:	strne	r1, [sp, #8]
   118f0:	bne	11894 <__assert_fail@plt+0x68>
   118f4:	mov	r2, r6
   118f8:	mov	r0, r1
   118fc:	bl	11664 <selabel_open@plt>
   11900:	subs	r4, r0, #0
   11904:	bne	11894 <__assert_fail@plt+0x68>
   11908:	bl	11688 <__errno_location@plt>
   1190c:	mov	r2, #5
   11910:	ldr	r1, [pc, #760]	; 11c10 <__assert_fail@plt+0x3e4>
   11914:	ldr	r3, [r0]
   11918:	mov	r0, r6
   1191c:	str	r3, [sp, #12]
   11920:	bl	114f0 <dcgettext@plt>
   11924:	ldr	r3, [sp, #12]
   11928:	mov	r1, r3
   1192c:	mov	r2, r0
   11930:	mov	r0, r6
   11934:	bl	115b0 <error@plt>
   11938:	b	11894 <__assert_fail@plt+0x68>
   1193c:	cmn	r0, #3
   11940:	bne	11994 <__assert_fail@plt+0x168>
   11944:	ldr	r1, [pc, #712]	; 11c14 <__assert_fail@plt+0x3e8>
   11948:	ldr	r3, [pc, #712]	; 11c18 <__assert_fail@plt+0x3ec>
   1194c:	ldr	r2, [pc, #712]	; 11c1c <__assert_fail@plt+0x3f0>
   11950:	str	r6, [sp, #4]
   11954:	ldr	r0, [r1]
   11958:	ldr	r3, [r3]
   1195c:	ldr	r1, [pc, #700]	; 11c20 <__assert_fail@plt+0x3f4>
   11960:	str	r2, [sp]
   11964:	ldr	r2, [pc, #696]	; 11c24 <__assert_fail@plt+0x3f8>
   11968:	bl	18e68 <lchmod@@Base+0x2bf8>
   1196c:	mov	r0, #0
   11970:	bl	11640 <exit@plt>
   11974:	mov	r2, #5
   11978:	ldr	r1, [pc, #680]	; 11c28 <__assert_fail@plt+0x3fc>
   1197c:	mov	r0, #0
   11980:	bl	114f0 <dcgettext@plt>
   11984:	mov	r1, #0
   11988:	mov	r2, r0
   1198c:	mov	r0, r1
   11990:	bl	115b0 <error@plt>
   11994:	mov	r0, #1
   11998:	bl	11d74 <__assert_fail@plt+0x548>
   1199c:	mov	r0, #0
   119a0:	bl	11d74 <__assert_fail@plt+0x548>
   119a4:	ldr	r3, [sl]
   119a8:	cmp	r3, #0
   119ac:	beq	11894 <__assert_fail@plt+0x68>
   119b0:	mov	r2, #5
   119b4:	ldr	r1, [pc, #624]	; 11c2c <__assert_fail@plt+0x400>
   119b8:	mov	r0, r6
   119bc:	bl	114f0 <dcgettext@plt>
   119c0:	mov	r1, r6
   119c4:	mov	r2, r0
   119c8:	mov	r0, #0
   119cc:	bl	115b0 <error@plt>
   119d0:	b	11894 <__assert_fail@plt+0x68>
   119d4:	ldr	r6, [pc, #596]	; 11c30 <__assert_fail@plt+0x404>
   119d8:	ldr	r3, [r6]
   119dc:	cmp	r7, r3
   119e0:	beq	11974 <__assert_fail@plt+0x148>
   119e4:	ldr	r3, [sp, #8]
   119e8:	cmp	r3, #0
   119ec:	beq	11a00 <__assert_fail@plt+0x1d4>
   119f0:	mov	r0, r3
   119f4:	bl	1167c <setfscreatecon@plt>
   119f8:	cmp	r0, #0
   119fc:	blt	11bbc <__assert_fail@plt+0x390>
   11a00:	cmp	fp, #0
   11a04:	beq	11b78 <__assert_fail@plt+0x34c>
   11a08:	mov	r0, fp
   11a0c:	bl	1637c <lchmod@@Base+0x10c>
   11a10:	subs	sl, r0, #0
   11a14:	beq	11ba0 <__assert_fail@plt+0x374>
   11a18:	mov	r0, #0
   11a1c:	bl	1179c <umask@plt>
   11a20:	mov	r9, #0
   11a24:	mov	r8, r0
   11a28:	bl	1179c <umask@plt>
   11a2c:	mov	r2, r8
   11a30:	mov	r3, sl
   11a34:	mov	r1, r9
   11a38:	str	r9, [sp]
   11a3c:	ldr	r0, [pc, #496]	; 11c34 <__assert_fail@plt+0x408>
   11a40:	bl	1676c <lchmod@@Base+0x4fc>
   11a44:	mov	r8, r0
   11a48:	mov	r0, sl
   11a4c:	bl	12fdc <__assert_fail@plt+0x17b0>
   11a50:	bic	r3, r8, #508	; 0x1fc
   11a54:	bic	r3, r3, #3
   11a58:	cmp	r3, r9
   11a5c:	bne	11b80 <__assert_fail@plt+0x354>
   11a60:	mov	r3, #0
   11a64:	str	r3, [sp, #8]
   11a68:	b	11a98 <__assert_fail@plt+0x26c>
   11a6c:	cmp	fp, #0
   11a70:	beq	11a8c <__assert_fail@plt+0x260>
   11a74:	ldr	r3, [r6]
   11a78:	mov	r1, r8
   11a7c:	ldr	r0, [r5, r3, lsl #2]
   11a80:	bl	16270 <lchmod@@Base>
   11a84:	cmp	r0, #0
   11a88:	bne	11b20 <__assert_fail@plt+0x2f4>
   11a8c:	ldr	r3, [r6]
   11a90:	add	r3, r3, #1
   11a94:	str	r3, [r6]
   11a98:	ldr	r3, [r6]
   11a9c:	cmp	r7, r3
   11aa0:	ble	11b6c <__assert_fail@plt+0x340>
   11aa4:	cmp	r4, #0
   11aa8:	beq	11abc <__assert_fail@plt+0x290>
   11aac:	ldr	r1, [r5, r3, lsl #2]
   11ab0:	mov	r2, #4096	; 0x1000
   11ab4:	mov	r0, r4
   11ab8:	bl	12328 <__assert_fail@plt+0xafc>
   11abc:	ldr	r3, [r6]
   11ac0:	mov	r1, r8
   11ac4:	ldr	r0, [r5, r3, lsl #2]
   11ac8:	bl	117fc <mkfifo@plt>
   11acc:	subs	r9, r0, #0
   11ad0:	beq	11a6c <__assert_fail@plt+0x240>
   11ad4:	bl	11688 <__errno_location@plt>
   11ad8:	mov	r2, #5
   11adc:	mov	r3, #1
   11ae0:	ldr	r1, [pc, #336]	; 11c38 <__assert_fail@plt+0x40c>
   11ae4:	str	r3, [sp, #8]
   11ae8:	ldr	r9, [r0]
   11aec:	mov	r0, #0
   11af0:	bl	114f0 <dcgettext@plt>
   11af4:	ldr	r3, [r6]
   11af8:	ldr	r1, [r5, r3, lsl #2]
   11afc:	mov	sl, r0
   11b00:	mov	r0, #4
   11b04:	bl	185a8 <lchmod@@Base+0x2338>
   11b08:	mov	r2, sl
   11b0c:	mov	r1, r9
   11b10:	mov	r3, r0
   11b14:	mov	r0, #0
   11b18:	bl	115b0 <error@plt>
   11b1c:	b	11a8c <__assert_fail@plt+0x260>
   11b20:	bl	11688 <__errno_location@plt>
   11b24:	mov	r2, #5
   11b28:	mov	r3, #1
   11b2c:	ldr	r1, [pc, #264]	; 11c3c <__assert_fail@plt+0x410>
   11b30:	str	r3, [sp, #8]
   11b34:	ldr	sl, [r0]
   11b38:	mov	r0, r9
   11b3c:	bl	114f0 <dcgettext@plt>
   11b40:	ldr	r3, [r6]
   11b44:	ldr	r1, [r5, r3, lsl #2]
   11b48:	str	r0, [sp, #12]
   11b4c:	mov	r0, #4
   11b50:	bl	185a8 <lchmod@@Base+0x2338>
   11b54:	ldr	r2, [sp, #12]
   11b58:	mov	r1, sl
   11b5c:	mov	r3, r0
   11b60:	mov	r0, r9
   11b64:	bl	115b0 <error@plt>
   11b68:	b	11a8c <__assert_fail@plt+0x260>
   11b6c:	ldr	r0, [sp, #8]
   11b70:	add	sp, sp, #20
   11b74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b78:	ldr	r8, [pc, #180]	; 11c34 <__assert_fail@plt+0x408>
   11b7c:	b	11a60 <__assert_fail@plt+0x234>
   11b80:	mov	r2, #5
   11b84:	ldr	r1, [pc, #180]	; 11c40 <__assert_fail@plt+0x414>
   11b88:	mov	r0, r9
   11b8c:	bl	114f0 <dcgettext@plt>
   11b90:	mov	r1, r9
   11b94:	mov	r2, r0
   11b98:	mov	r0, #1
   11b9c:	bl	115b0 <error@plt>
   11ba0:	mov	r2, #5
   11ba4:	ldr	r1, [pc, #152]	; 11c44 <__assert_fail@plt+0x418>
   11ba8:	bl	114f0 <dcgettext@plt>
   11bac:	mov	r1, sl
   11bb0:	mov	r2, r0
   11bb4:	mov	r0, #1
   11bb8:	bl	115b0 <error@plt>
   11bbc:	bl	11688 <__errno_location@plt>
   11bc0:	mov	r2, #5
   11bc4:	ldr	r1, [pc, #124]	; 11c48 <__assert_fail@plt+0x41c>
   11bc8:	ldr	r4, [r0]
   11bcc:	mov	r0, #0
   11bd0:	bl	114f0 <dcgettext@plt>
   11bd4:	mov	r5, r0
   11bd8:	ldr	r0, [sp, #8]
   11bdc:	bl	187e8 <lchmod@@Base+0x2578>
   11be0:	mov	r2, r5
   11be4:	mov	r1, r4
   11be8:	mov	r3, r0
   11bec:	mov	r0, #1
   11bf0:	bl	115b0 <error@plt>
   11bf4:	andeq	sl, r1, ip, lsr #21
   11bf8:	andeq	sl, r1, r0, lsr #16
   11bfc:	andeq	sl, r1, r8, ror r7
   11c00:	muleq	r1, r0, r4
   11c04:			; <UNDEFINED> instruction: 0x0001a8b0
   11c08:	andeq	ip, r2, r0, ror #3
   11c0c:	andeq	r2, r1, r4, ror #26
   11c10:	andeq	sl, r1, r8, lsr r8
   11c14:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   11c18:	andeq	ip, r2, ip, ror r1
   11c1c:	andeq	sl, r1, r0, lsr #17
   11c20:	andeq	sl, r1, r0, ror #9
   11c24:	andeq	sl, r1, r4, ror r7
   11c28:			; <UNDEFINED> instruction: 0x0001a8b4
   11c2c:	andeq	sl, r1, r4, asr r8
   11c30:	ldrdeq	ip, [r2], -r0
   11c34:			; <UNDEFINED> instruction: 0x000001b6
   11c38:	andeq	sl, r1, r4, lsr r9
   11c3c:	andeq	sl, r1, ip, asr #18
   11c40:	andeq	sl, r1, r8, lsl #18
   11c44:	strdeq	sl, [r1], -r8
   11c48:	andeq	sl, r1, r4, asr #17
   11c4c:	mov	fp, #0
   11c50:	mov	lr, #0
   11c54:	pop	{r1}		; (ldr r1, [sp], #4)
   11c58:	mov	r2, sp
   11c5c:	push	{r2}		; (str r2, [sp, #-4]!)
   11c60:	push	{r0}		; (str r0, [sp, #-4]!)
   11c64:	ldr	ip, [pc, #16]	; 11c7c <__assert_fail@plt+0x450>
   11c68:	push	{ip}		; (str ip, [sp, #-4]!)
   11c6c:	ldr	r0, [pc, #12]	; 11c80 <__assert_fail@plt+0x454>
   11c70:	ldr	r3, [pc, #12]	; 11c84 <__assert_fail@plt+0x458>
   11c74:	bl	115e0 <__libc_start_main@plt>
   11c78:	bl	117d8 <abort@plt>
   11c7c:	andeq	sl, r1, r0, lsr r4
   11c80:	andeq	r1, r1, r8, lsr r8
   11c84:	ldrdeq	sl, [r1], -r0
   11c88:	ldr	r3, [pc, #20]	; 11ca4 <__assert_fail@plt+0x478>
   11c8c:	ldr	r2, [pc, #20]	; 11ca8 <__assert_fail@plt+0x47c>
   11c90:	add	r3, pc, r3
   11c94:	ldr	r2, [r3, r2]
   11c98:	cmp	r2, #0
   11c9c:	bxeq	lr
   11ca0:	b	115f8 <__gmon_start__@plt>
   11ca4:	andeq	sl, r1, r8, ror #6
   11ca8:	andeq	r0, r0, r0, ror r1
   11cac:	ldr	r3, [pc, #28]	; 11cd0 <__assert_fail@plt+0x4a4>
   11cb0:	ldr	r0, [pc, #28]	; 11cd4 <__assert_fail@plt+0x4a8>
   11cb4:	sub	r3, r3, r0
   11cb8:	cmp	r3, #6
   11cbc:	bxls	lr
   11cc0:	ldr	r3, [pc, #16]	; 11cd8 <__assert_fail@plt+0x4ac>
   11cc4:	cmp	r3, #0
   11cc8:	bxeq	lr
   11ccc:	bx	r3
   11cd0:	andeq	ip, r2, r7, asr #3
   11cd4:	andeq	ip, r2, r4, asr #3
   11cd8:	andeq	r0, r0, r0
   11cdc:	ldr	r1, [pc, #36]	; 11d08 <__assert_fail@plt+0x4dc>
   11ce0:	ldr	r0, [pc, #36]	; 11d0c <__assert_fail@plt+0x4e0>
   11ce4:	sub	r1, r1, r0
   11ce8:	asr	r1, r1, #2
   11cec:	add	r1, r1, r1, lsr #31
   11cf0:	asrs	r1, r1, #1
   11cf4:	bxeq	lr
   11cf8:	ldr	r3, [pc, #16]	; 11d10 <__assert_fail@plt+0x4e4>
   11cfc:	cmp	r3, #0
   11d00:	bxeq	lr
   11d04:	bx	r3
   11d08:	andeq	ip, r2, r4, asr #3
   11d0c:	andeq	ip, r2, r4, asr #3
   11d10:	andeq	r0, r0, r0
   11d14:	push	{r4, lr}
   11d18:	ldr	r4, [pc, #24]	; 11d38 <__assert_fail@plt+0x50c>
   11d1c:	ldrb	r3, [r4]
   11d20:	cmp	r3, #0
   11d24:	popne	{r4, pc}
   11d28:	bl	11cac <__assert_fail@plt+0x480>
   11d2c:	mov	r3, #1
   11d30:	strb	r3, [r4]
   11d34:	pop	{r4, pc}
   11d38:	andeq	ip, r2, r4, ror #3
   11d3c:	ldr	r0, [pc, #40]	; 11d6c <__assert_fail@plt+0x540>
   11d40:	ldr	r3, [r0]
   11d44:	cmp	r3, #0
   11d48:	bne	11d50 <__assert_fail@plt+0x524>
   11d4c:	b	11cdc <__assert_fail@plt+0x4b0>
   11d50:	ldr	r3, [pc, #24]	; 11d70 <__assert_fail@plt+0x544>
   11d54:	cmp	r3, #0
   11d58:	beq	11d4c <__assert_fail@plt+0x520>
   11d5c:	push	{r4, lr}
   11d60:	blx	r3
   11d64:	pop	{r4, lr}
   11d68:	b	11cdc <__assert_fail@plt+0x4b0>
   11d6c:	andeq	fp, r2, ip, lsl #30
   11d70:	andeq	r0, r0, r0
   11d74:	subs	r6, r0, #0
   11d78:	push	{r7, lr}
   11d7c:	sub	sp, sp, #56	; 0x38
   11d80:	beq	11dbc <__assert_fail@plt+0x590>
   11d84:	ldr	r3, [pc, #684]	; 12038 <__assert_fail@plt+0x80c>
   11d88:	mov	r2, #5
   11d8c:	ldr	r1, [pc, #680]	; 1203c <__assert_fail@plt+0x810>
   11d90:	mov	r0, #0
   11d94:	ldr	r4, [r3]
   11d98:	bl	114f0 <dcgettext@plt>
   11d9c:	ldr	r3, [pc, #668]	; 12040 <__assert_fail@plt+0x814>
   11da0:	mov	r1, #1
   11da4:	ldr	r3, [r3]
   11da8:	mov	r2, r0
   11dac:	mov	r0, r4
   11db0:	bl	116d0 <__fprintf_chk@plt>
   11db4:	mov	r0, r6
   11db8:	bl	11640 <exit@plt>
   11dbc:	mov	r2, #5
   11dc0:	ldr	r1, [pc, #636]	; 12044 <__assert_fail@plt+0x818>
   11dc4:	bl	114f0 <dcgettext@plt>
   11dc8:	ldr	r3, [pc, #624]	; 12040 <__assert_fail@plt+0x814>
   11dcc:	ldr	r7, [pc, #628]	; 12048 <__assert_fail@plt+0x81c>
   11dd0:	ldr	r4, [pc, #628]	; 1204c <__assert_fail@plt+0x820>
   11dd4:	ldr	r2, [r3]
   11dd8:	mov	r1, r0
   11ddc:	mov	r0, #1
   11de0:	bl	116b8 <__printf_chk@plt>
   11de4:	mov	r2, #5
   11de8:	ldr	r1, [pc, #608]	; 12050 <__assert_fail@plt+0x824>
   11dec:	mov	r0, r6
   11df0:	bl	114f0 <dcgettext@plt>
   11df4:	ldr	r1, [r7]
   11df8:	bl	11430 <fputs_unlocked@plt>
   11dfc:	mov	r2, #5
   11e00:	ldr	r1, [pc, #588]	; 12054 <__assert_fail@plt+0x828>
   11e04:	mov	r0, r6
   11e08:	bl	114f0 <dcgettext@plt>
   11e0c:	ldr	r1, [r7]
   11e10:	bl	11430 <fputs_unlocked@plt>
   11e14:	mov	r2, #5
   11e18:	ldr	r1, [pc, #568]	; 12058 <__assert_fail@plt+0x82c>
   11e1c:	mov	r0, r6
   11e20:	bl	114f0 <dcgettext@plt>
   11e24:	ldr	r1, [r7]
   11e28:	bl	11430 <fputs_unlocked@plt>
   11e2c:	mov	r2, #5
   11e30:	ldr	r1, [pc, #548]	; 1205c <__assert_fail@plt+0x830>
   11e34:	mov	r0, r6
   11e38:	bl	114f0 <dcgettext@plt>
   11e3c:	ldr	r1, [r7]
   11e40:	bl	11430 <fputs_unlocked@plt>
   11e44:	mov	r2, #5
   11e48:	ldr	r1, [pc, #528]	; 12060 <__assert_fail@plt+0x834>
   11e4c:	mov	r0, r6
   11e50:	bl	114f0 <dcgettext@plt>
   11e54:	ldr	r1, [r7]
   11e58:	bl	11430 <fputs_unlocked@plt>
   11e5c:	mov	r2, #5
   11e60:	ldr	r1, [pc, #508]	; 12064 <__assert_fail@plt+0x838>
   11e64:	mov	r0, r6
   11e68:	bl	114f0 <dcgettext@plt>
   11e6c:	ldr	r1, [r7]
   11e70:	bl	11430 <fputs_unlocked@plt>
   11e74:	ldm	r4!, {r0, r1, r2, r3}
   11e78:	mov	lr, sp
   11e7c:	stmia	lr!, {r0, r1, r2, r3}
   11e80:	ldm	r4!, {r0, r1, r2, r3}
   11e84:	ldr	ip, [sp]
   11e88:	stmia	lr!, {r0, r1, r2, r3}
   11e8c:	cmp	ip, #0
   11e90:	ldm	r4!, {r0, r1, r2, r3}
   11e94:	stmia	lr!, {r0, r1, r2, r3}
   11e98:	ldm	r4, {r0, r1}
   11e9c:	moveq	r4, sp
   11ea0:	stm	lr, {r0, r1}
   11ea4:	beq	11ed4 <__assert_fail@plt+0x6a8>
   11ea8:	ldr	r5, [pc, #440]	; 12068 <__assert_fail@plt+0x83c>
   11eac:	mov	r4, sp
   11eb0:	b	11ec0 <__assert_fail@plt+0x694>
   11eb4:	ldr	ip, [r4, #8]!
   11eb8:	cmp	ip, #0
   11ebc:	beq	11ed4 <__assert_fail@plt+0x6a8>
   11ec0:	mov	r1, ip
   11ec4:	mov	r0, r5
   11ec8:	bl	11454 <strcmp@plt>
   11ecc:	cmp	r0, #0
   11ed0:	bne	11eb4 <__assert_fail@plt+0x688>
   11ed4:	ldr	r4, [r4, #4]
   11ed8:	mov	r2, #5
   11edc:	cmp	r4, #0
   11ee0:	ldr	r1, [pc, #388]	; 1206c <__assert_fail@plt+0x840>
   11ee4:	beq	11f8c <__assert_fail@plt+0x760>
   11ee8:	mov	r0, #0
   11eec:	bl	114f0 <dcgettext@plt>
   11ef0:	ldr	r3, [pc, #376]	; 12070 <__assert_fail@plt+0x844>
   11ef4:	ldr	r2, [pc, #376]	; 12074 <__assert_fail@plt+0x848>
   11ef8:	mov	r1, r0
   11efc:	mov	r0, #1
   11f00:	bl	116b8 <__printf_chk@plt>
   11f04:	mov	r1, #0
   11f08:	mov	r0, #5
   11f0c:	bl	11700 <setlocale@plt>
   11f10:	cmp	r0, #0
   11f14:	ldreq	r5, [pc, #332]	; 12068 <__assert_fail@plt+0x83c>
   11f18:	beq	11f34 <__assert_fail@plt+0x708>
   11f1c:	mov	r2, #3
   11f20:	ldr	r1, [pc, #336]	; 12078 <__assert_fail@plt+0x84c>
   11f24:	bl	117cc <strncmp@plt>
   11f28:	ldr	r5, [pc, #312]	; 12068 <__assert_fail@plt+0x83c>
   11f2c:	cmp	r0, #0
   11f30:	bne	1201c <__assert_fail@plt+0x7f0>
   11f34:	mov	r2, #5
   11f38:	ldr	r1, [pc, #316]	; 1207c <__assert_fail@plt+0x850>
   11f3c:	mov	r0, #0
   11f40:	bl	114f0 <dcgettext@plt>
   11f44:	ldr	r3, [pc, #284]	; 12068 <__assert_fail@plt+0x83c>
   11f48:	ldr	r2, [pc, #288]	; 12070 <__assert_fail@plt+0x844>
   11f4c:	mov	r1, r0
   11f50:	mov	r0, #1
   11f54:	bl	116b8 <__printf_chk@plt>
   11f58:	mov	r2, #5
   11f5c:	ldr	r1, [pc, #284]	; 12080 <__assert_fail@plt+0x854>
   11f60:	mov	r0, #0
   11f64:	bl	114f0 <dcgettext@plt>
   11f68:	ldr	r2, [pc, #276]	; 12084 <__assert_fail@plt+0x858>
   11f6c:	cmp	r4, r5
   11f70:	ldr	r3, [pc, #272]	; 12088 <__assert_fail@plt+0x85c>
   11f74:	movne	r3, r2
   11f78:	mov	r1, r0
   11f7c:	mov	r2, r4
   11f80:	mov	r0, #1
   11f84:	bl	116b8 <__printf_chk@plt>
   11f88:	b	11db4 <__assert_fail@plt+0x588>
   11f8c:	mov	r0, r4
   11f90:	bl	114f0 <dcgettext@plt>
   11f94:	ldr	r3, [pc, #212]	; 12070 <__assert_fail@plt+0x844>
   11f98:	ldr	r2, [pc, #212]	; 12074 <__assert_fail@plt+0x848>
   11f9c:	mov	r1, r0
   11fa0:	mov	r0, #1
   11fa4:	bl	116b8 <__printf_chk@plt>
   11fa8:	mov	r1, r4
   11fac:	mov	r0, #5
   11fb0:	bl	11700 <setlocale@plt>
   11fb4:	cmp	r0, #0
   11fb8:	beq	11fd0 <__assert_fail@plt+0x7a4>
   11fbc:	mov	r2, #3
   11fc0:	ldr	r1, [pc, #176]	; 12078 <__assert_fail@plt+0x84c>
   11fc4:	bl	117cc <strncmp@plt>
   11fc8:	cmp	r0, #0
   11fcc:	bne	12014 <__assert_fail@plt+0x7e8>
   11fd0:	mov	r2, #5
   11fd4:	ldr	r1, [pc, #160]	; 1207c <__assert_fail@plt+0x850>
   11fd8:	mov	r0, #0
   11fdc:	bl	114f0 <dcgettext@plt>
   11fe0:	ldr	r3, [pc, #128]	; 12068 <__assert_fail@plt+0x83c>
   11fe4:	ldr	r2, [pc, #132]	; 12070 <__assert_fail@plt+0x844>
   11fe8:	mov	r4, r3
   11fec:	mov	r1, r0
   11ff0:	mov	r0, #1
   11ff4:	bl	116b8 <__printf_chk@plt>
   11ff8:	ldr	r1, [pc, #128]	; 12080 <__assert_fail@plt+0x854>
   11ffc:	mov	r2, #5
   12000:	mov	r0, #0
   12004:	bl	114f0 <dcgettext@plt>
   12008:	ldr	r3, [pc, #120]	; 12088 <__assert_fail@plt+0x85c>
   1200c:	mov	r1, r0
   12010:	b	11f7c <__assert_fail@plt+0x750>
   12014:	ldr	r5, [pc, #76]	; 12068 <__assert_fail@plt+0x83c>
   12018:	mov	r4, r5
   1201c:	mov	r2, #5
   12020:	ldr	r1, [pc, #100]	; 1208c <__assert_fail@plt+0x860>
   12024:	mov	r0, #0
   12028:	bl	114f0 <dcgettext@plt>
   1202c:	ldr	r1, [r7]
   12030:	bl	11430 <fputs_unlocked@plt>
   12034:	b	11f34 <__assert_fail@plt+0x708>
   12038:	ldrdeq	ip, [r2], -r8
   1203c:	andeq	sl, r1, r8, ror #9
   12040:	strdeq	ip, [r2], -r0
   12044:	andeq	sl, r1, r0, lsl r5
   12048:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   1204c:	andeq	sl, r1, r8, asr r4
   12050:	andeq	sl, r1, r0, lsr r5
   12054:	andeq	sl, r1, r4, ror #10
   12058:			; <UNDEFINED> instruction: 0x0001a5b0
   1205c:	strdeq	sl, [r1], -ip
   12060:	andeq	sl, r1, ip, asr #13
   12064:	strdeq	sl, [r1], -ip
   12068:	andeq	sl, r1, r0, ror #9
   1206c:	andeq	sl, r1, r4, lsr r7
   12070:	andeq	sl, r1, ip, asr #14
   12074:	andeq	sl, r1, r4, ror r7
   12078:	andeq	sl, r1, r4, lsl #15
   1207c:	ldrdeq	sl, [r1], -r0
   12080:	andeq	sl, r1, ip, ror #15
   12084:	andeq	sl, r1, ip, lsr #21
   12088:	andeq	sl, r1, r4, ror r9
   1208c:	andeq	sl, r1, r8, lsl #15
   12090:	push	{r4, r5, r6, r7, r8, r9, lr}
   12094:	sub	sp, sp, #116	; 0x74
   12098:	mov	r4, #0
   1209c:	subs	r9, r0, #0
   120a0:	mov	r6, r1
   120a4:	str	r4, [sp]
   120a8:	str	r4, [sp, #4]
   120ac:	beq	12254 <__assert_fail@plt+0xa28>
   120b0:	mov	r1, #32768	; 0x8000
   120b4:	mov	r0, r6
   120b8:	bl	115bc <open64@plt>
   120bc:	cmn	r0, #1
   120c0:	mov	r5, r0
   120c4:	beq	1217c <__assert_fail@plt+0x950>
   120c8:	mov	r1, r0
   120cc:	add	r2, sp, #8
   120d0:	mov	r0, #3
   120d4:	bl	11550 <__fxstat64@plt>
   120d8:	cmp	r0, #0
   120dc:	blt	121ec <__assert_fail@plt+0x9c0>
   120e0:	bl	11688 <__errno_location@plt>
   120e4:	mov	r7, r0
   120e8:	mov	r0, r9
   120ec:	ldr	r3, [sp, #24]
   120f0:	mov	r2, r6
   120f4:	mov	r1, sp
   120f8:	bl	11418 <selabel_lookup@plt>
   120fc:	cmp	r0, #0
   12100:	blt	121c8 <__assert_fail@plt+0x99c>
   12104:	ldr	r0, [sp]
   12108:	bl	114cc <context_new@plt>
   1210c:	subs	r9, r0, #0
   12110:	beq	122b8 <__assert_fail@plt+0xa8c>
   12114:	cmn	r5, #1
   12118:	add	r1, sp, #4
   1211c:	beq	12228 <__assert_fail@plt+0x9fc>
   12120:	mov	r0, r5
   12124:	bl	189f0 <lchmod@@Base+0x2780>
   12128:	cmp	r0, #0
   1212c:	blt	122ac <__assert_fail@plt+0xa80>
   12130:	ldr	r0, [sp, #4]
   12134:	bl	114cc <context_new@plt>
   12138:	subs	r4, r0, #0
   1213c:	beq	12300 <__assert_fail@plt+0xad4>
   12140:	mov	r0, r9
   12144:	bl	11460 <context_type_get@plt>
   12148:	subs	r1, r0, #0
   1214c:	beq	12160 <__assert_fail@plt+0x934>
   12150:	mov	r0, r4
   12154:	bl	114fc <context_type_set@plt>
   12158:	cmp	r0, #0
   1215c:	beq	122c4 <__assert_fail@plt+0xa98>
   12160:	ldr	r8, [r7]
   12164:	cmn	r5, #1
   12168:	beq	12194 <__assert_fail@plt+0x968>
   1216c:	mvn	r6, #0
   12170:	mov	r0, r5
   12174:	bl	117e4 <close@plt>
   12178:	b	12198 <__assert_fail@plt+0x96c>
   1217c:	bl	11688 <__errno_location@plt>
   12180:	ldr	r8, [r0]
   12184:	mov	r7, r0
   12188:	cmp	r8, #40	; 0x28
   1218c:	movne	r9, r4
   12190:	beq	12204 <__assert_fail@plt+0x9d8>
   12194:	mov	r6, r5
   12198:	mov	r0, r9
   1219c:	bl	11604 <context_free@plt>
   121a0:	mov	r0, r4
   121a4:	bl	11604 <context_free@plt>
   121a8:	ldr	r0, [sp]
   121ac:	bl	11778 <freecon@plt>
   121b0:	ldr	r0, [sp, #4]
   121b4:	bl	11778 <freecon@plt>
   121b8:	str	r8, [r7]
   121bc:	mov	r0, r6
   121c0:	add	sp, sp, #116	; 0x74
   121c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   121c8:	ldr	r8, [r7]
   121cc:	cmp	r8, #2
   121d0:	movne	r4, #0
   121d4:	movne	r9, r4
   121d8:	moveq	r8, #61	; 0x3d
   121dc:	moveq	r4, #0
   121e0:	streq	r8, [r7]
   121e4:	moveq	r9, r4
   121e8:	b	12164 <__assert_fail@plt+0x938>
   121ec:	bl	11688 <__errno_location@plt>
   121f0:	mov	r9, r4
   121f4:	mvn	r6, #0
   121f8:	mov	r7, r0
   121fc:	ldr	r8, [r7]
   12200:	b	12170 <__assert_fail@plt+0x944>
   12204:	add	r2, sp, #8
   12208:	mov	r1, r6
   1220c:	mov	r0, #3
   12210:	bl	117f0 <__lxstat64@plt>
   12214:	cmp	r0, #0
   12218:	bge	120e8 <__assert_fail@plt+0x8bc>
   1221c:	mov	r9, r4
   12220:	ldr	r8, [r7]
   12224:	b	12194 <__assert_fail@plt+0x968>
   12228:	mov	r0, r6
   1222c:	bl	189d8 <lchmod@@Base+0x2768>
   12230:	cmp	r0, #0
   12234:	blt	122a0 <__assert_fail@plt+0xa74>
   12238:	ldr	r0, [sp, #4]
   1223c:	bl	114cc <context_new@plt>
   12240:	subs	r4, r0, #0
   12244:	moveq	r6, r5
   12248:	ldreq	r8, [r7]
   1224c:	beq	12198 <__assert_fail@plt+0x96c>
   12250:	b	12140 <__assert_fail@plt+0x914>
   12254:	add	r0, sp, #4
   12258:	bl	11790 <getfscreatecon@plt>
   1225c:	cmp	r0, r4
   12260:	blt	12320 <__assert_fail@plt+0xaf4>
   12264:	ldr	r1, [sp, #4]
   12268:	cmp	r1, r4
   1226c:	beq	1230c <__assert_fail@plt+0xae0>
   12270:	mov	r0, r6
   12274:	bl	11478 <lsetfilecon@plt>
   12278:	mov	r6, r0
   1227c:	bl	11688 <__errno_location@plt>
   12280:	mov	r4, r0
   12284:	ldr	r0, [sp, #4]
   12288:	ldr	r5, [r4]
   1228c:	bl	11778 <freecon@plt>
   12290:	mov	r0, r6
   12294:	str	r5, [r4]
   12298:	add	sp, sp, #116	; 0x74
   1229c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   122a0:	ldr	r8, [r7]
   122a4:	mov	r4, #0
   122a8:	b	12194 <__assert_fail@plt+0x968>
   122ac:	mov	r4, #0
   122b0:	mvn	r6, #0
   122b4:	b	121fc <__assert_fail@plt+0x9d0>
   122b8:	ldr	r8, [r7]
   122bc:	mov	r4, r9
   122c0:	b	12164 <__assert_fail@plt+0x938>
   122c4:	mov	r0, r4
   122c8:	bl	117a8 <context_str@plt>
   122cc:	subs	r1, r0, #0
   122d0:	beq	12160 <__assert_fail@plt+0x934>
   122d4:	cmn	r5, #1
   122d8:	beq	122ec <__assert_fail@plt+0xac0>
   122dc:	mov	r0, r5
   122e0:	bl	1170c <fsetfilecon@plt>
   122e4:	mov	r6, r0
   122e8:	b	121fc <__assert_fail@plt+0x9d0>
   122ec:	mov	r0, r6
   122f0:	bl	11478 <lsetfilecon@plt>
   122f4:	ldr	r8, [r7]
   122f8:	mov	r5, r0
   122fc:	b	12194 <__assert_fail@plt+0x968>
   12300:	ldr	r8, [r7]
   12304:	mvn	r6, #0
   12308:	b	12170 <__assert_fail@plt+0x944>
   1230c:	bl	11688 <__errno_location@plt>
   12310:	mov	r3, #61	; 0x3d
   12314:	mvn	r6, #0
   12318:	str	r3, [r0]
   1231c:	b	121bc <__assert_fail@plt+0x990>
   12320:	mvn	r6, #0
   12324:	b	121bc <__assert_fail@plt+0x990>
   12328:	push	{r4, r5, r6, r7, r8, r9, lr}
   1232c:	mov	r4, r1
   12330:	ldrb	r1, [r1]
   12334:	sub	sp, sp, #20
   12338:	mov	r3, #0
   1233c:	cmp	r1, #47	; 0x2f
   12340:	mov	r7, r0
   12344:	mov	r5, r2
   12348:	str	r3, [sp]
   1234c:	str	r3, [sp, #4]
   12350:	beq	124ec <__assert_fail@plt+0xcc0>
   12354:	mov	r0, r4
   12358:	mov	r1, #2
   1235c:	bl	12678 <__assert_fail@plt+0xe4c>
   12360:	subs	r6, r0, #0
   12364:	movne	r4, r6
   12368:	beq	12548 <__assert_fail@plt+0xd1c>
   1236c:	mov	r0, r7
   12370:	mov	r3, r5
   12374:	mov	r2, r4
   12378:	mov	r1, sp
   1237c:	bl	11418 <selabel_lookup@plt>
   12380:	cmp	r0, #0
   12384:	blt	124b4 <__assert_fail@plt+0xc88>
   12388:	mov	r0, r4
   1238c:	mov	r4, #0
   12390:	str	r4, [sp, #8]
   12394:	str	r4, [sp, #12]
   12398:	bl	12e48 <__assert_fail@plt+0x161c>
   1239c:	mov	r7, r0
   123a0:	add	r0, sp, #8
   123a4:	bl	1158c <getcon@plt>
   123a8:	cmp	r0, r4
   123ac:	blt	124f4 <__assert_fail@plt+0xcc8>
   123b0:	add	r1, sp, #12
   123b4:	mov	r0, r7
   123b8:	bl	189c0 <lchmod@@Base+0x2750>
   123bc:	cmp	r0, #0
   123c0:	blt	124f4 <__assert_fail@plt+0xcc8>
   123c4:	mov	r0, r5
   123c8:	bl	11808 <mode_to_security_class@plt>
   123cc:	subs	r2, r0, #0
   123d0:	beq	124f4 <__assert_fail@plt+0xcc8>
   123d4:	add	r3, sp, #4
   123d8:	ldr	r1, [sp, #12]
   123dc:	ldr	r0, [sp, #8]
   123e0:	bl	11748 <security_compute_create@plt>
   123e4:	mov	r8, r0
   123e8:	bl	11688 <__errno_location@plt>
   123ec:	mov	r9, r0
   123f0:	mov	r0, r7
   123f4:	ldr	r5, [r9]
   123f8:	bl	12fdc <__assert_fail@plt+0x17b0>
   123fc:	ldr	r0, [sp, #8]
   12400:	bl	11778 <freecon@plt>
   12404:	ldr	r0, [sp, #12]
   12408:	bl	11778 <freecon@plt>
   1240c:	cmp	r8, #0
   12410:	str	r5, [r9]
   12414:	movlt	r7, r4
   12418:	mvnlt	r8, #0
   1241c:	blt	1247c <__assert_fail@plt+0xc50>
   12420:	ldr	r0, [sp]
   12424:	bl	114cc <context_new@plt>
   12428:	subs	r7, r0, #0
   1242c:	beq	12538 <__assert_fail@plt+0xd0c>
   12430:	ldr	r0, [sp, #4]
   12434:	bl	114cc <context_new@plt>
   12438:	subs	r4, r0, #0
   1243c:	beq	1252c <__assert_fail@plt+0xd00>
   12440:	mov	r0, r7
   12444:	bl	11460 <context_type_get@plt>
   12448:	subs	r1, r0, #0
   1244c:	beq	1252c <__assert_fail@plt+0xd00>
   12450:	mov	r0, r4
   12454:	bl	114fc <context_type_set@plt>
   12458:	cmp	r0, #0
   1245c:	bne	1252c <__assert_fail@plt+0xd00>
   12460:	mov	r0, r4
   12464:	bl	117a8 <context_str@plt>
   12468:	cmp	r0, #0
   1246c:	beq	1252c <__assert_fail@plt+0xd00>
   12470:	bl	1167c <setfscreatecon@plt>
   12474:	ldr	r5, [r9]
   12478:	mov	r8, r0
   1247c:	mov	r0, r7
   12480:	bl	11604 <context_free@plt>
   12484:	mov	r0, r4
   12488:	bl	11604 <context_free@plt>
   1248c:	ldr	r0, [sp]
   12490:	bl	11778 <freecon@plt>
   12494:	ldr	r0, [sp, #4]
   12498:	bl	11778 <freecon@plt>
   1249c:	mov	r0, r6
   124a0:	bl	12fdc <__assert_fail@plt+0x17b0>
   124a4:	mov	r0, r8
   124a8:	str	r5, [r9]
   124ac:	add	sp, sp, #20
   124b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   124b4:	bl	11688 <__errno_location@plt>
   124b8:	ldr	r5, [r0]
   124bc:	mov	r9, r0
   124c0:	cmp	r5, #2
   124c4:	movne	r4, #0
   124c8:	movne	r7, r4
   124cc:	mvnne	r8, #0
   124d0:	bne	1247c <__assert_fail@plt+0xc50>
   124d4:	mov	r5, #61	; 0x3d
   124d8:	mov	r4, #0
   124dc:	str	r5, [r0]
   124e0:	mov	r7, r4
   124e4:	mvn	r8, #0
   124e8:	b	1247c <__assert_fail@plt+0xc50>
   124ec:	mov	r6, r3
   124f0:	b	1236c <__assert_fail@plt+0xb40>
   124f4:	bl	11688 <__errno_location@plt>
   124f8:	mov	r4, #0
   124fc:	mvn	r8, #0
   12500:	mov	r9, r0
   12504:	mov	r0, r7
   12508:	ldr	r5, [r9]
   1250c:	bl	12fdc <__assert_fail@plt+0x17b0>
   12510:	ldr	r0, [sp, #8]
   12514:	bl	11778 <freecon@plt>
   12518:	ldr	r0, [sp, #12]
   1251c:	bl	11778 <freecon@plt>
   12520:	mov	r7, r4
   12524:	str	r5, [r9]
   12528:	b	1247c <__assert_fail@plt+0xc50>
   1252c:	ldr	r5, [r9]
   12530:	mvn	r8, #0
   12534:	b	1247c <__assert_fail@plt+0xc50>
   12538:	ldr	r5, [r9]
   1253c:	mov	r4, r7
   12540:	mvn	r8, #0
   12544:	b	1247c <__assert_fail@plt+0xc50>
   12548:	bl	11688 <__errno_location@plt>
   1254c:	mov	r4, r6
   12550:	mov	r7, r6
   12554:	mvn	r8, #0
   12558:	mov	r9, r0
   1255c:	ldr	r5, [r0]
   12560:	b	1247c <__assert_fail@plt+0xc50>
   12564:	push	{r4, r5, r6, r7, r8, lr}
   12568:	mov	r3, r1
   1256c:	ldrb	r1, [r1]
   12570:	sub	sp, sp, #8
   12574:	mov	r5, r0
   12578:	cmp	r1, #47	; 0x2f
   1257c:	mov	r4, r2
   12580:	beq	1262c <__assert_fail@plt+0xe00>
   12584:	mov	r0, r3
   12588:	mov	r1, #2
   1258c:	bl	12678 <__assert_fail@plt+0xe4c>
   12590:	subs	r8, r0, #0
   12594:	beq	12670 <__assert_fail@plt+0xe44>
   12598:	cmp	r4, #0
   1259c:	mov	r3, r8
   125a0:	beq	12638 <__assert_fail@plt+0xe0c>
   125a4:	mov	r2, #0
   125a8:	mov	r1, #16
   125ac:	mov	r0, sp
   125b0:	str	r3, [sp]
   125b4:	str	r2, [sp, #4]
   125b8:	mov	r7, r2
   125bc:	bl	194ec <lchmod@@Base+0x327c>
   125c0:	mov	r4, r0
   125c4:	bl	11688 <__errno_location@plt>
   125c8:	mov	r6, r0
   125cc:	b	125e0 <__assert_fail@plt+0xdb4>
   125d0:	ldr	r1, [r4, #24]
   125d4:	bl	12090 <__assert_fail@plt+0x864>
   125d8:	cmp	r0, #0
   125dc:	ldrlt	r7, [r6]
   125e0:	mov	r0, r4
   125e4:	bl	14908 <__assert_fail@plt+0x30dc>
   125e8:	cmp	r0, #0
   125ec:	mov	r0, r5
   125f0:	bne	125d0 <__assert_fail@plt+0xda4>
   125f4:	mov	r0, r4
   125f8:	ldr	r4, [r6]
   125fc:	bl	147a8 <__assert_fail@plt+0x2f7c>
   12600:	cmp	r4, #0
   12604:	moveq	r4, r7
   12608:	cmp	r0, #0
   1260c:	mov	r0, r8
   12610:	ldrne	r4, [r6]
   12614:	bl	12fdc <__assert_fail@plt+0x17b0>
   12618:	clz	r4, r4
   1261c:	lsr	r4, r4, #5
   12620:	mov	r0, r4
   12624:	add	sp, sp, #8
   12628:	pop	{r4, r5, r6, r7, r8, pc}
   1262c:	cmp	r4, #0
   12630:	mov	r8, #0
   12634:	bne	125a4 <__assert_fail@plt+0xd78>
   12638:	mov	r1, r3
   1263c:	mov	r0, r5
   12640:	bl	12090 <__assert_fail@plt+0x864>
   12644:	adds	r4, r0, #1
   12648:	movne	r4, #1
   1264c:	bl	11688 <__errno_location@plt>
   12650:	mov	r5, r0
   12654:	mov	r0, r8
   12658:	ldr	r6, [r5]
   1265c:	bl	12fdc <__assert_fail@plt+0x17b0>
   12660:	mov	r0, r4
   12664:	str	r6, [r5]
   12668:	add	sp, sp, #8
   1266c:	pop	{r4, r5, r6, r7, r8, pc}
   12670:	mov	r4, r8
   12674:	b	12620 <__assert_fail@plt+0xdf4>
   12678:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1267c:	and	r9, r1, #3
   12680:	sub	r3, r9, #1
   12684:	sub	sp, sp, #3232	; 0xca0
   12688:	tst	r3, r9
   1268c:	sub	sp, sp, #12
   12690:	bne	12870 <__assert_fail@plt+0x1044>
   12694:	cmp	r0, #0
   12698:	mov	r8, r0
   1269c:	beq	12870 <__assert_fail@plt+0x1044>
   126a0:	ldrb	r6, [r0]
   126a4:	cmp	r6, #0
   126a8:	beq	128ac <__assert_fail@plt+0x1080>
   126ac:	add	fp, sp, #2208	; 0x8a0
   126b0:	mov	r5, r1
   126b4:	add	r3, sp, #1184	; 0x4a0
   126b8:	mov	r1, #1024	; 0x400
   126bc:	add	fp, fp, #8
   126c0:	add	sl, sp, #152	; 0x98
   126c4:	cmp	r6, #47	; 0x2f
   126c8:	str	r3, [sp, #1176]	; 0x498
   126cc:	str	r1, [sp, #1180]	; 0x49c
   126d0:	str	r1, [sp, #2212]	; 0x8a4
   126d4:	str	r1, [sp, #148]	; 0x94
   126d8:	str	fp, [sp, #2208]	; 0x8a0
   126dc:	str	sl, [sp, #144]	; 0x90
   126e0:	beq	1278c <__assert_fail@plt+0xf60>
   126e4:	mov	r4, sl
   126e8:	sub	r6, sl, #8
   126ec:	mov	r0, r4
   126f0:	bl	11634 <getcwd@plt>
   126f4:	cmp	r0, #0
   126f8:	bne	12a58 <__assert_fail@plt+0x122c>
   126fc:	bl	11688 <__errno_location@plt>
   12700:	ldr	r3, [r0]
   12704:	cmp	r3, #12
   12708:	beq	1286c <__assert_fail@plt+0x1040>
   1270c:	cmp	r3, #34	; 0x22
   12710:	beq	12770 <__assert_fail@plt+0xf44>
   12714:	mov	r5, r4
   12718:	mov	r6, #1
   1271c:	ldr	r0, [sp, #1176]	; 0x498
   12720:	add	r3, sp, #1184	; 0x4a0
   12724:	cmp	r0, r3
   12728:	beq	12730 <__assert_fail@plt+0xf04>
   1272c:	bl	12fdc <__assert_fail@plt+0x17b0>
   12730:	ldr	r0, [sp, #2208]	; 0x8a0
   12734:	cmp	r0, fp
   12738:	beq	12740 <__assert_fail@plt+0xf14>
   1273c:	bl	12fdc <__assert_fail@plt+0x17b0>
   12740:	cmp	r6, #0
   12744:	beq	12890 <__assert_fail@plt+0x1064>
   12748:	ldr	r0, [sp, #144]	; 0x90
   1274c:	cmp	r0, sl
   12750:	moveq	r6, #0
   12754:	beq	12760 <__assert_fail@plt+0xf34>
   12758:	bl	12fdc <__assert_fail@plt+0x17b0>
   1275c:	mov	r6, #0
   12760:	mov	r0, r6
   12764:	add	sp, sp, #3232	; 0xca0
   12768:	add	sp, sp, #12
   1276c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12770:	mov	r0, r6
   12774:	bl	18850 <lchmod@@Base+0x25e0>
   12778:	cmp	r0, #0
   1277c:	beq	1286c <__assert_fail@plt+0x1040>
   12780:	ldr	r4, [sp, #144]	; 0x90
   12784:	ldr	r1, [sp, #148]	; 0x94
   12788:	b	126ec <__assert_fail@plt+0xec0>
   1278c:	mov	r4, sl
   12790:	add	r0, sl, #1
   12794:	strb	r6, [sp, #152]	; 0x98
   12798:	mov	r3, #0
   1279c:	and	r2, r5, #4
   127a0:	str	r3, [sp, #24]
   127a4:	str	r2, [sp, #8]
   127a8:	str	r3, [sp, #12]
   127ac:	str	r3, [sp, #16]
   127b0:	str	r9, [sp, #20]
   127b4:	cmp	r6, #0
   127b8:	beq	12bbc <__assert_fail@plt+0x1390>
   127bc:	cmp	r6, #47	; 0x2f
   127c0:	bne	127d8 <__assert_fail@plt+0xfac>
   127c4:	ldrb	r6, [r8, #1]!
   127c8:	cmp	r6, #47	; 0x2f
   127cc:	beq	127c4 <__assert_fail@plt+0xf98>
   127d0:	cmp	r6, #0
   127d4:	beq	12bbc <__assert_fail@plt+0x1390>
   127d8:	mov	r5, r8
   127dc:	ldrb	r3, [r5, #1]!
   127e0:	cmp	r3, #0
   127e4:	cmpne	r3, #47	; 0x2f
   127e8:	bne	127dc <__assert_fail@plt+0xfb0>
   127ec:	subs	r7, r5, r8
   127f0:	beq	12bbc <__assert_fail@plt+0x1390>
   127f4:	cmp	r7, #1
   127f8:	beq	1297c <__assert_fail@plt+0x1150>
   127fc:	cmp	r7, #2
   12800:	cmpeq	r6, #46	; 0x2e
   12804:	beq	128bc <__assert_fail@plt+0x1090>
   12808:	ldrb	r3, [r0, #-1]
   1280c:	add	r6, r7, #2
   12810:	cmp	r3, #47	; 0x2f
   12814:	movne	r3, #47	; 0x2f
   12818:	strbne	r3, [r0]
   1281c:	ldr	r3, [sp, #148]	; 0x94
   12820:	addne	r0, r0, #1
   12824:	add	r3, r4, r3
   12828:	sub	r3, r3, r0
   1282c:	cmp	r3, r6
   12830:	bcs	12914 <__assert_fail@plt+0x10e8>
   12834:	mov	r9, r0
   12838:	b	12858 <__assert_fail@plt+0x102c>
   1283c:	ldr	r3, [sp, #148]	; 0x94
   12840:	ldr	r4, [sp, #144]	; 0x90
   12844:	sub	r3, r3, r9
   12848:	cmp	r3, r6
   1284c:	add	r9, r4, r9
   12850:	mov	r0, r9
   12854:	bcs	12914 <__assert_fail@plt+0x10e8>
   12858:	add	r0, sp, #144	; 0x90
   1285c:	bl	188bc <lchmod@@Base+0x264c>
   12860:	sub	r9, r9, r4
   12864:	cmp	r0, #0
   12868:	bne	1283c <__assert_fail@plt+0x1010>
   1286c:	bl	194ac <lchmod@@Base+0x323c>
   12870:	bl	11688 <__errno_location@plt>
   12874:	mov	r6, #0
   12878:	mov	r3, #22
   1287c:	str	r3, [r0]
   12880:	mov	r0, r6
   12884:	add	sp, sp, #3232	; 0xca0
   12888:	add	sp, sp, #12
   1288c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12890:	strb	r6, [r4], #1
   12894:	sub	r0, sl, #8
   12898:	sub	r1, r4, r5
   1289c:	bl	18800 <lchmod@@Base+0x2590>
   128a0:	subs	r6, r0, #0
   128a4:	bne	12760 <__assert_fail@plt+0xf34>
   128a8:	b	1286c <__assert_fail@plt+0x1040>
   128ac:	bl	11688 <__errno_location@plt>
   128b0:	mov	r3, #2
   128b4:	str	r3, [r0]
   128b8:	b	12760 <__assert_fail@plt+0xf34>
   128bc:	ldrb	r3, [r8, #1]
   128c0:	cmp	r3, #46	; 0x2e
   128c4:	bne	12808 <__assert_fail@plt+0xfdc>
   128c8:	add	r3, r4, #1
   128cc:	cmp	r0, r3
   128d0:	bls	12908 <__assert_fail@plt+0x10dc>
   128d4:	sub	r3, r0, #1
   128d8:	cmp	r4, r3
   128dc:	bcs	12d1c <__assert_fail@plt+0x14f0>
   128e0:	ldrb	r2, [r0, #-2]
   128e4:	cmp	r2, #47	; 0x2f
   128e8:	beq	12d1c <__assert_fail@plt+0x14f0>
   128ec:	sub	r3, r0, #2
   128f0:	cmp	r3, r4
   128f4:	mov	r0, r3
   128f8:	beq	12908 <__assert_fail@plt+0x10dc>
   128fc:	ldrb	r2, [r3, #-1]!
   12900:	cmp	r2, #47	; 0x2f
   12904:	bne	128f0 <__assert_fail@plt+0x10c4>
   12908:	ldrb	r6, [r5]
   1290c:	mov	r8, r5
   12910:	b	127b4 <__assert_fail@plt+0xf88>
   12914:	mov	r2, r7
   12918:	mov	r1, r8
   1291c:	bl	11610 <mempcpy@plt>
   12920:	ldr	r3, [sp, #8]
   12924:	cmp	r3, #0
   12928:	mov	r3, #0
   1292c:	str	r0, [sp, #28]
   12930:	strb	r3, [r0]
   12934:	bne	12988 <__assert_fail@plt+0x115c>
   12938:	sub	r3, fp, #8
   1293c:	mov	r9, r3
   12940:	str	r5, [sp, #32]
   12944:	ldr	r6, [sp, #2212]	; 0x8a4
   12948:	ldr	r5, [sp, #2208]	; 0x8a0
   1294c:	sub	r6, r6, #1
   12950:	mov	r2, r6
   12954:	mov	r1, r5
   12958:	mov	r0, r4
   1295c:	bl	1155c <readlink@plt>
   12960:	cmp	r6, r0
   12964:	bgt	12a6c <__assert_fail@plt+0x1240>
   12968:	mov	r0, r9
   1296c:	bl	18850 <lchmod@@Base+0x25e0>
   12970:	cmp	r0, #0
   12974:	bne	12944 <__assert_fail@plt+0x1118>
   12978:	b	1286c <__assert_fail@plt+0x1040>
   1297c:	cmp	r6, #46	; 0x2e
   12980:	bne	12808 <__assert_fail@plt+0xfdc>
   12984:	b	12908 <__assert_fail@plt+0x10dc>
   12988:	ldr	r3, [sp, #20]
   1298c:	cmp	r3, #2
   12990:	beq	12a50 <__assert_fail@plt+0x1224>
   12994:	ldrb	r2, [r5]
   12998:	mov	r3, r5
   1299c:	mov	r1, r2
   129a0:	cmp	r1, #47	; 0x2f
   129a4:	beq	129b0 <__assert_fail@plt+0x1184>
   129a8:	b	129f8 <__assert_fail@plt+0x11cc>
   129ac:	mov	r3, r0
   129b0:	ldrb	r1, [r3, #1]
   129b4:	add	r0, r3, #1
   129b8:	cmp	r1, #47	; 0x2f
   129bc:	beq	129ac <__assert_fail@plt+0x1180>
   129c0:	cmp	r1, #0
   129c4:	add	r3, r3, #2
   129c8:	beq	12c90 <__assert_fail@plt+0x1464>
   129cc:	cmp	r1, #46	; 0x2e
   129d0:	bne	129f8 <__assert_fail@plt+0x11cc>
   129d4:	ldrb	r1, [r0, #1]
   129d8:	cmp	r1, #0
   129dc:	beq	12c90 <__assert_fail@plt+0x1464>
   129e0:	cmp	r1, #46	; 0x2e
   129e4:	bne	129a0 <__assert_fail@plt+0x1174>
   129e8:	ldrb	r3, [r0, #2]
   129ec:	cmp	r3, #47	; 0x2f
   129f0:	cmpne	r3, #0
   129f4:	beq	12c90 <__assert_fail@plt+0x1464>
   129f8:	ldr	r3, [sp, #8]
   129fc:	cmp	r3, #0
   12a00:	bne	12cd0 <__assert_fail@plt+0x14a4>
   12a04:	bl	11688 <__errno_location@plt>
   12a08:	ldr	r6, [r0]
   12a0c:	subs	r6, r6, #22
   12a10:	movne	r6, #1
   12a14:	cmp	r6, #0
   12a18:	beq	12a50 <__assert_fail@plt+0x1224>
   12a1c:	ldr	r3, [sp, #20]
   12a20:	cmp	r3, #1
   12a24:	bne	12d24 <__assert_fail@plt+0x14f8>
   12a28:	bl	11688 <__errno_location@plt>
   12a2c:	ldr	r3, [r0]
   12a30:	cmp	r3, #2
   12a34:	bne	12d24 <__assert_fail@plt+0x14f8>
   12a38:	ldr	r1, [pc, #752]	; 12d30 <__assert_fail@plt+0x1504>
   12a3c:	mov	r0, r5
   12a40:	bl	11820 <strspn@plt>
   12a44:	ldrb	r3, [r5, r0]
   12a48:	cmp	r3, #0
   12a4c:	bne	12d24 <__assert_fail@plt+0x14f8>
   12a50:	ldr	r0, [sp, #28]
   12a54:	b	12908 <__assert_fail@plt+0x10dc>
   12a58:	mov	r1, #0
   12a5c:	mov	r0, r4
   12a60:	bl	1152c <rawmemchr@plt>
   12a64:	ldrb	r6, [r8]
   12a68:	b	12798 <__assert_fail@plt+0xf6c>
   12a6c:	cmp	r0, #0
   12a70:	mov	r9, r5
   12a74:	mov	r6, r0
   12a78:	ldr	r5, [sp, #32]
   12a7c:	blt	12988 <__assert_fail@plt+0x115c>
   12a80:	ldr	r3, [sp, #16]
   12a84:	cmp	r3, #19
   12a88:	addle	r3, r3, #1
   12a8c:	strle	r3, [sp, #16]
   12a90:	ble	12b54 <__assert_fail@plt+0x1328>
   12a94:	ldrb	r3, [r8]
   12a98:	cmp	r3, #0
   12a9c:	beq	12b54 <__assert_fail@plt+0x1328>
   12aa0:	ldr	r2, [sp, #28]
   12aa4:	rsb	r7, r7, #0
   12aa8:	mov	r3, #0
   12aac:	strb	r3, [r2, r7]
   12ab0:	ldrb	r1, [r4]
   12ab4:	add	r3, sp, #40	; 0x28
   12ab8:	mov	r2, r3
   12abc:	cmp	r1, #0
   12ac0:	ldr	r3, [pc, #620]	; 12d34 <__assert_fail@plt+0x1508>
   12ac4:	movne	r3, r4
   12ac8:	mov	r1, r3
   12acc:	mov	r0, #3
   12ad0:	bl	117c0 <__xstat64@plt>
   12ad4:	cmp	r0, #0
   12ad8:	bne	12b24 <__assert_fail@plt+0x12f8>
   12adc:	ldrb	r3, [r8]
   12ae0:	ldr	r1, [sp, #24]
   12ae4:	ldr	r2, [sp, #28]
   12ae8:	cmp	r1, #0
   12aec:	strb	r3, [r2, r7]
   12af0:	beq	12ce0 <__assert_fail@plt+0x14b4>
   12af4:	add	r2, sp, #40	; 0x28
   12af8:	mov	r1, r8
   12afc:	ldr	r0, [sp, #24]
   12b00:	bl	12f94 <__assert_fail@plt+0x1768>
   12b04:	cmp	r0, #0
   12b08:	beq	12b44 <__assert_fail@plt+0x1318>
   12b0c:	ldr	r3, [sp, #20]
   12b10:	cmp	r3, #2
   12b14:	beq	12a50 <__assert_fail@plt+0x1224>
   12b18:	bl	11688 <__errno_location@plt>
   12b1c:	mov	r3, #40	; 0x28
   12b20:	str	r3, [r0]
   12b24:	mov	r5, r4
   12b28:	ldr	r4, [sp, #28]
   12b2c:	mov	r6, #1
   12b30:	ldr	r0, [sp, #24]
   12b34:	cmp	r0, #0
   12b38:	beq	1271c <__assert_fail@plt+0xef0>
   12b3c:	bl	15bd4 <__assert_fail@plt+0x43a8>
   12b40:	b	1271c <__assert_fail@plt+0xef0>
   12b44:	add	r2, sp, #40	; 0x28
   12b48:	mov	r1, r8
   12b4c:	ldr	r0, [sp, #24]
   12b50:	bl	12f2c <__assert_fail@plt+0x1700>
   12b54:	ldr	r2, [sp, #12]
   12b58:	mov	r3, #0
   12b5c:	cmp	r2, r3
   12b60:	strb	r3, [r9, r6]
   12b64:	ldr	r8, [sp, #1176]	; 0x498
   12b68:	ldreq	r3, [sp, #12]
   12b6c:	subne	r3, r5, r8
   12b70:	mov	r0, r5
   12b74:	str	r3, [sp, #36]	; 0x24
   12b78:	bl	11658 <strlen@plt>
   12b7c:	adds	r7, r6, r0
   12b80:	str	r0, [sp, #32]
   12b84:	bcs	1286c <__assert_fail@plt+0x1040>
   12b88:	ldr	r3, [sp, #1180]	; 0x49c
   12b8c:	cmp	r3, r7
   12b90:	bls	12ba4 <__assert_fail@plt+0x1378>
   12b94:	b	12be8 <__assert_fail@plt+0x13bc>
   12b98:	ldr	r3, [sp, #1180]	; 0x49c
   12b9c:	cmp	r7, r3
   12ba0:	bcc	12be4 <__assert_fail@plt+0x13b8>
   12ba4:	add	r0, sp, #1168	; 0x490
   12ba8:	add	r0, r0, #8
   12bac:	bl	188bc <lchmod@@Base+0x264c>
   12bb0:	cmp	r0, #0
   12bb4:	bne	12b98 <__assert_fail@plt+0x136c>
   12bb8:	b	1286c <__assert_fail@plt+0x1040>
   12bbc:	add	r3, r4, #1
   12bc0:	cmp	r0, r3
   12bc4:	bls	12c80 <__assert_fail@plt+0x1454>
   12bc8:	ldrb	r3, [r0, #-1]
   12bcc:	mov	r5, r4
   12bd0:	mov	r6, #0
   12bd4:	cmp	r3, #47	; 0x2f
   12bd8:	subeq	r4, r0, #1
   12bdc:	movne	r4, r0
   12be0:	b	12b30 <__assert_fail@plt+0x1304>
   12be4:	ldr	r8, [sp, #1176]	; 0x498
   12be8:	ldr	r3, [sp, #12]
   12bec:	add	r0, r8, r6
   12bf0:	cmp	r3, #0
   12bf4:	ldrne	r3, [sp, #36]	; 0x24
   12bf8:	addne	r5, r8, r3
   12bfc:	ldr	r3, [sp, #32]
   12c00:	mov	r1, r5
   12c04:	add	r2, r3, #1
   12c08:	bl	11484 <memmove@plt>
   12c0c:	mov	r2, r6
   12c10:	mov	r1, r9
   12c14:	mov	r0, r8
   12c18:	bl	114b4 <memcpy@plt>
   12c1c:	ldrb	r3, [r9]
   12c20:	cmp	r3, #47	; 0x2f
   12c24:	mov	r5, r0
   12c28:	beq	12d08 <__assert_fail@plt+0x14dc>
   12c2c:	ldr	r2, [sp, #28]
   12c30:	add	r3, r4, #1
   12c34:	cmp	r2, r3
   12c38:	bls	12cc0 <__assert_fail@plt+0x1494>
   12c3c:	sub	r0, r2, #1
   12c40:	cmp	r0, r4
   12c44:	bls	12c74 <__assert_fail@plt+0x1448>
   12c48:	ldrb	r3, [r2, #-2]
   12c4c:	cmp	r3, #47	; 0x2f
   12c50:	beq	12c74 <__assert_fail@plt+0x1448>
   12c54:	sub	r3, r2, #2
   12c58:	cmp	r4, r3
   12c5c:	mov	r0, r3
   12c60:	beq	12c74 <__assert_fail@plt+0x1448>
   12c64:	ldrb	r2, [r3, #-1]
   12c68:	sub	r3, r3, #1
   12c6c:	cmp	r2, #47	; 0x2f
   12c70:	bne	12c58 <__assert_fail@plt+0x142c>
   12c74:	mov	r3, #1
   12c78:	str	r3, [sp, #12]
   12c7c:	b	12908 <__assert_fail@plt+0x10dc>
   12c80:	mov	r5, r4
   12c84:	mov	r6, #0
   12c88:	mov	r4, r0
   12c8c:	b	12b30 <__assert_fail@plt+0x1304>
   12c90:	ldr	r3, [pc, #152]	; 12d30 <__assert_fail@plt+0x1504>
   12c94:	ldr	r0, [sp, #28]
   12c98:	mov	r2, #0
   12c9c:	ldrh	r1, [r3]
   12ca0:	mov	r3, #512	; 0x200
   12ca4:	strh	r1, [r0]
   12ca8:	mov	r1, r4
   12cac:	mvn	r0, #99	; 0x63
   12cb0:	bl	1149c <faccessat@plt>
   12cb4:	adds	r6, r0, #0
   12cb8:	movne	r6, #1
   12cbc:	b	12a14 <__assert_fail@plt+0x11e8>
   12cc0:	mov	r3, #1
   12cc4:	ldr	r0, [sp, #28]
   12cc8:	str	r3, [sp, #12]
   12ccc:	b	12908 <__assert_fail@plt+0x10dc>
   12cd0:	cmp	r2, #0
   12cd4:	bne	12a50 <__assert_fail@plt+0x1224>
   12cd8:	mov	r3, #512	; 0x200
   12cdc:	b	12ca8 <__assert_fail@plt+0x147c>
   12ce0:	ldr	r3, [pc, #80]	; 12d38 <__assert_fail@plt+0x150c>
   12ce4:	ldr	r2, [pc, #80]	; 12d3c <__assert_fail@plt+0x1510>
   12ce8:	str	r3, [sp]
   12cec:	mov	r0, #7
   12cf0:	ldr	r3, [pc, #72]	; 12d40 <__assert_fail@plt+0x1514>
   12cf4:	bl	159d8 <__assert_fail@plt+0x41ac>
   12cf8:	subs	r3, r0, #0
   12cfc:	str	r3, [sp, #24]
   12d00:	bne	12af4 <__assert_fail@plt+0x12c8>
   12d04:	b	1286c <__assert_fail@plt+0x1040>
   12d08:	strb	r3, [r4]
   12d0c:	mov	r3, #1
   12d10:	add	r0, r4, #1
   12d14:	str	r3, [sp, #12]
   12d18:	b	12908 <__assert_fail@plt+0x10dc>
   12d1c:	mov	r0, r3
   12d20:	b	12908 <__assert_fail@plt+0x10dc>
   12d24:	mov	r5, r4
   12d28:	ldr	r4, [sp, #28]
   12d2c:	b	12b30 <__assert_fail@plt+0x1304>
   12d30:	strdeq	sl, [r1], -ip
   12d34:	strdeq	sl, [r1], -r8
   12d38:	muleq	r1, r4, r1
   12d3c:	andeq	r6, r1, r0, lsl r1
   12d40:	andeq	r6, r1, r8, asr #2
   12d44:	ldr	r3, [pc, #4]	; 12d50 <__assert_fail@plt+0x1524>
   12d48:	str	r0, [r3]
   12d4c:	bx	lr
   12d50:	andeq	ip, r2, r8, ror #3
   12d54:	ldr	r3, [pc, #4]	; 12d60 <__assert_fail@plt+0x1534>
   12d58:	strb	r0, [r3, #4]
   12d5c:	bx	lr
   12d60:	andeq	ip, r2, r8, ror #3
   12d64:	ldr	r3, [pc, #192]	; 12e2c <__assert_fail@plt+0x1600>
   12d68:	push	{r4, r5, r6, lr}
   12d6c:	sub	sp, sp, #8
   12d70:	ldr	r0, [r3]
   12d74:	bl	196e8 <lchmod@@Base+0x3478>
   12d78:	cmp	r0, #0
   12d7c:	beq	12da0 <__assert_fail@plt+0x1574>
   12d80:	ldr	r4, [pc, #168]	; 12e30 <__assert_fail@plt+0x1604>
   12d84:	ldrb	r3, [r4, #4]
   12d88:	cmp	r3, #0
   12d8c:	beq	12dbc <__assert_fail@plt+0x1590>
   12d90:	bl	11688 <__errno_location@plt>
   12d94:	ldr	r3, [r0]
   12d98:	cmp	r3, #32
   12d9c:	bne	12dbc <__assert_fail@plt+0x1590>
   12da0:	ldr	r3, [pc, #140]	; 12e34 <__assert_fail@plt+0x1608>
   12da4:	ldr	r0, [r3]
   12da8:	bl	196e8 <lchmod@@Base+0x3478>
   12dac:	cmp	r0, #0
   12db0:	bne	12e04 <__assert_fail@plt+0x15d8>
   12db4:	add	sp, sp, #8
   12db8:	pop	{r4, r5, r6, pc}
   12dbc:	mov	r2, #5
   12dc0:	ldr	r1, [pc, #112]	; 12e38 <__assert_fail@plt+0x160c>
   12dc4:	mov	r0, #0
   12dc8:	bl	114f0 <dcgettext@plt>
   12dcc:	ldr	r4, [r4]
   12dd0:	cmp	r4, #0
   12dd4:	mov	r5, r0
   12dd8:	beq	12e10 <__assert_fail@plt+0x15e4>
   12ddc:	bl	11688 <__errno_location@plt>
   12de0:	ldr	r6, [r0]
   12de4:	mov	r0, r4
   12de8:	bl	18650 <lchmod@@Base+0x23e0>
   12dec:	mov	r1, r6
   12df0:	str	r5, [sp]
   12df4:	ldr	r2, [pc, #64]	; 12e3c <__assert_fail@plt+0x1610>
   12df8:	mov	r3, r0
   12dfc:	mov	r0, #0
   12e00:	bl	115b0 <error@plt>
   12e04:	ldr	r3, [pc, #52]	; 12e40 <__assert_fail@plt+0x1614>
   12e08:	ldr	r0, [r3]
   12e0c:	bl	114a8 <_exit@plt>
   12e10:	bl	11688 <__errno_location@plt>
   12e14:	mov	r3, r5
   12e18:	ldr	r2, [pc, #36]	; 12e44 <__assert_fail@plt+0x1618>
   12e1c:	ldr	r1, [r0]
   12e20:	mov	r0, r4
   12e24:	bl	115b0 <error@plt>
   12e28:	b	12e04 <__assert_fail@plt+0x15d8>
   12e2c:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   12e30:	andeq	ip, r2, r8, ror #3
   12e34:	ldrdeq	ip, [r2], -r8
   12e38:	andeq	sl, r1, r0, lsl #20
   12e3c:	andeq	sl, r1, ip, lsl #20
   12e40:	andeq	ip, r2, r0, lsl #3
   12e44:	andeq	sl, r1, r0, lsl sl
   12e48:	push	{r4, lr}
   12e4c:	bl	12ed4 <__assert_fail@plt+0x16a8>
   12e50:	cmp	r0, #0
   12e54:	popne	{r4, pc}
   12e58:	bl	194ac <lchmod@@Base+0x323c>
   12e5c:	push	{r4, r5, r6, lr}
   12e60:	mov	r5, r0
   12e64:	ldrb	r4, [r0]
   12e68:	bl	1963c <lchmod@@Base+0x33cc>
   12e6c:	sub	r4, r4, #47	; 0x2f
   12e70:	clz	r4, r4
   12e74:	lsr	r4, r4, #5
   12e78:	sub	r0, r0, r5
   12e7c:	cmp	r0, r4
   12e80:	bls	12ecc <__assert_fail@plt+0x16a0>
   12e84:	sub	r3, r0, #1
   12e88:	add	r2, r5, r3
   12e8c:	ldrb	r1, [r5, r3]
   12e90:	cmp	r1, #47	; 0x2f
   12e94:	beq	12eb0 <__assert_fail@plt+0x1684>
   12e98:	b	12ecc <__assert_fail@plt+0x16a0>
   12e9c:	ldrb	r1, [r2, #-1]!
   12ea0:	sub	r0, r3, #1
   12ea4:	cmp	r1, #47	; 0x2f
   12ea8:	bne	12ec0 <__assert_fail@plt+0x1694>
   12eac:	mov	r3, r0
   12eb0:	cmp	r4, r3
   12eb4:	bne	12e9c <__assert_fail@plt+0x1670>
   12eb8:	mov	r0, r4
   12ebc:	pop	{r4, r5, r6, pc}
   12ec0:	mov	r4, r3
   12ec4:	mov	r0, r4
   12ec8:	pop	{r4, r5, r6, pc}
   12ecc:	mov	r4, r0
   12ed0:	b	12eb8 <__assert_fail@plt+0x168c>
   12ed4:	push	{r4, r5, r6, lr}
   12ed8:	mov	r6, r0
   12edc:	bl	12e5c <__assert_fail@plt+0x1630>
   12ee0:	add	r3, r0, #1
   12ee4:	mov	r4, r0
   12ee8:	cmp	r0, #0
   12eec:	movne	r0, r3
   12ef0:	addeq	r0, r3, #1
   12ef4:	bl	195b4 <lchmod@@Base+0x3344>
   12ef8:	subs	r5, r0, #0
   12efc:	beq	12f24 <__assert_fail@plt+0x16f8>
   12f00:	mov	r2, r4
   12f04:	mov	r1, r6
   12f08:	bl	114b4 <memcpy@plt>
   12f0c:	cmp	r4, #0
   12f10:	moveq	r3, #46	; 0x2e
   12f14:	moveq	r4, #1
   12f18:	strbeq	r3, [r5]
   12f1c:	mov	r3, #0
   12f20:	strb	r3, [r5, r4]
   12f24:	mov	r0, r5
   12f28:	pop	{r4, r5, r6, pc}
   12f2c:	push	{r4, r5, r6, r7, r8, lr}
   12f30:	subs	r8, r0, #0
   12f34:	popeq	{r4, r5, r6, r7, r8, pc}
   12f38:	mov	r0, #24
   12f3c:	mov	r4, r1
   12f40:	mov	r7, r2
   12f44:	bl	18f64 <lchmod@@Base+0x2cf4>
   12f48:	mov	r6, r0
   12f4c:	mov	r0, r4
   12f50:	bl	19490 <lchmod@@Base+0x3220>
   12f54:	ldrd	r4, [r7, #96]	; 0x60
   12f58:	ldrd	r2, [r7]
   12f5c:	mov	r1, r6
   12f60:	strd	r4, [r6, #8]
   12f64:	strd	r2, [r6, #16]
   12f68:	str	r0, [r6]
   12f6c:	mov	r0, r8
   12f70:	bl	15fcc <__assert_fail@plt+0x47a0>
   12f74:	cmp	r0, #0
   12f78:	beq	12f90 <__assert_fail@plt+0x1764>
   12f7c:	cmp	r6, r0
   12f80:	popeq	{r4, r5, r6, r7, r8, pc}
   12f84:	mov	r0, r6
   12f88:	pop	{r4, r5, r6, r7, r8, lr}
   12f8c:	b	16194 <__assert_fail@plt+0x4968>
   12f90:	bl	194ac <lchmod@@Base+0x323c>
   12f94:	subs	r3, r0, #0
   12f98:	beq	12fd4 <__assert_fail@plt+0x17a8>
   12f9c:	push	{r4, r5, lr}
   12fa0:	sub	sp, sp, #28
   12fa4:	ldrd	r4, [r2, #96]	; 0x60
   12fa8:	ldrd	r2, [r2]
   12fac:	mov	ip, r1
   12fb0:	mov	r1, sp
   12fb4:	str	ip, [sp]
   12fb8:	strd	r4, [sp, #8]
   12fbc:	strd	r2, [sp, #16]
   12fc0:	bl	15738 <__assert_fail@plt+0x3f0c>
   12fc4:	adds	r0, r0, #0
   12fc8:	movne	r0, #1
   12fcc:	add	sp, sp, #28
   12fd0:	pop	{r4, r5, pc}
   12fd4:	mov	r0, r3
   12fd8:	bx	lr
   12fdc:	push	{r4, r5, lr}
   12fe0:	sub	sp, sp, #12
   12fe4:	mov	r5, r0
   12fe8:	bl	11688 <__errno_location@plt>
   12fec:	mov	r2, #0
   12ff0:	mov	r4, r0
   12ff4:	ldr	r3, [r0]
   12ff8:	str	r2, [r4]
   12ffc:	mov	r0, r5
   13000:	str	r3, [sp]
   13004:	str	r3, [sp, #4]
   13008:	bl	11490 <free@plt>
   1300c:	ldr	r3, [r4]
   13010:	add	r2, sp, #8
   13014:	cmp	r3, #0
   13018:	moveq	r3, #4
   1301c:	movne	r3, #0
   13020:	add	r3, r2, r3
   13024:	ldr	r3, [r3, #-8]
   13028:	str	r3, [r4]
   1302c:	add	sp, sp, #12
   13030:	pop	{r4, r5, pc}
   13034:	ldrd	r2, [r1, #8]
   13038:	push	{r4, r5}
   1303c:	ldrd	r4, [r0, #8]
   13040:	cmp	r5, r3
   13044:	cmpeq	r4, r2
   13048:	movne	r0, #0
   1304c:	beq	13058 <__assert_fail@plt+0x182c>
   13050:	pop	{r4, r5}
   13054:	bx	lr
   13058:	ldrd	r4, [r0]
   1305c:	ldrd	r2, [r1]
   13060:	cmp	r5, r3
   13064:	cmpeq	r4, r2
   13068:	moveq	r0, #1
   1306c:	movne	r0, #0
   13070:	pop	{r4, r5}
   13074:	bx	lr
   13078:	push	{r4, lr}
   1307c:	mov	r2, r1
   13080:	mov	r3, #0
   13084:	ldrd	r0, [r0, #8]
   13088:	bl	1a25c <lchmod@@Base+0x3fec>
   1308c:	mov	r0, r2
   13090:	pop	{r4, pc}
   13094:	push	{r4, lr}
   13098:	mov	r2, r1
   1309c:	mov	r3, #0
   130a0:	ldrd	r0, [r0]
   130a4:	bl	1a25c <lchmod@@Base+0x3fec>
   130a8:	mov	r0, r2
   130ac:	pop	{r4, pc}
   130b0:	push	{r4, r5}
   130b4:	ldrd	r2, [r1]
   130b8:	ldrd	r4, [r0]
   130bc:	cmp	r5, r3
   130c0:	cmpeq	r4, r2
   130c4:	moveq	r0, #1
   130c8:	movne	r0, #0
   130cc:	pop	{r4, r5}
   130d0:	bx	lr
   130d4:	ldr	r2, [r0]
   130d8:	ldr	r3, [r1]
   130dc:	ldrd	r0, [r2, #160]	; 0xa0
   130e0:	ldrd	r2, [r3, #160]	; 0xa0
   130e4:	cmp	r1, r3
   130e8:	cmpeq	r0, r2
   130ec:	movhi	r0, #1
   130f0:	movls	r0, #0
   130f4:	movcc	r3, #1
   130f8:	movcs	r3, #0
   130fc:	sub	r0, r0, r3
   13100:	bx	lr
   13104:	ldr	r3, [r0, #40]	; 0x28
   13108:	push	{r4, r5, r6, r7, r8, lr}
   1310c:	cmp	r3, r2
   13110:	mov	r6, r0
   13114:	mov	r5, r2
   13118:	mov	r4, r1
   1311c:	ldr	r7, [r0, #44]	; 0x2c
   13120:	bcc	13198 <__assert_fail@plt+0x196c>
   13124:	ldr	r0, [r0, #8]
   13128:	cmp	r4, #0
   1312c:	movne	r2, r0
   13130:	beq	13144 <__assert_fail@plt+0x1918>
   13134:	str	r4, [r2], #4
   13138:	ldr	r4, [r4, #8]
   1313c:	cmp	r4, #0
   13140:	bne	13134 <__assert_fail@plt+0x1908>
   13144:	mov	r3, r7
   13148:	mov	r2, #4
   1314c:	mov	r1, r5
   13150:	bl	1176c <qsort@plt>
   13154:	ldr	lr, [r6, #8]
   13158:	subs	r3, r5, #1
   1315c:	ldr	r0, [lr]
   13160:	beq	131dc <__assert_fail@plt+0x19b0>
   13164:	mov	r2, lr
   13168:	mov	ip, r0
   1316c:	b	13174 <__assert_fail@plt+0x1948>
   13170:	ldr	ip, [r2, #4]!
   13174:	ldr	r1, [r2, #4]
   13178:	subs	r3, r3, #1
   1317c:	str	r1, [ip, #8]
   13180:	bne	13170 <__assert_fail@plt+0x1944>
   13184:	add	r5, lr, r5, lsl #2
   13188:	ldr	r2, [r5, #-4]
   1318c:	mov	r3, #0
   13190:	str	r3, [r2, #8]
   13194:	pop	{r4, r5, r6, r7, r8, pc}
   13198:	add	r1, r2, #40	; 0x28
   1319c:	cmn	r1, #-1073741823	; 0xc0000001
   131a0:	str	r1, [r0, #40]	; 0x28
   131a4:	bhi	131c0 <__assert_fail@plt+0x1994>
   131a8:	lsl	r1, r1, #2
   131ac:	ldr	r0, [r0, #8]
   131b0:	bl	195e0 <lchmod@@Base+0x3370>
   131b4:	cmp	r0, #0
   131b8:	strne	r0, [r6, #8]
   131bc:	bne	13128 <__assert_fail@plt+0x18fc>
   131c0:	ldr	r0, [r6, #8]
   131c4:	bl	12fdc <__assert_fail@plt+0x17b0>
   131c8:	mov	r3, #0
   131cc:	mov	r0, r4
   131d0:	str	r3, [r6, #8]
   131d4:	str	r3, [r6, #40]	; 0x28
   131d8:	pop	{r4, r5, r6, r7, r8, pc}
   131dc:	mov	r2, r0
   131e0:	b	1318c <__assert_fail@plt+0x1960>
   131e4:	add	r3, r2, #176	; 0xb0
   131e8:	push	{r4, r5, r6, r7, r8, lr}
   131ec:	mov	r6, r0
   131f0:	bic	r0, r3, #7
   131f4:	mov	r5, r2
   131f8:	mov	r7, r1
   131fc:	bl	195b4 <lchmod@@Base+0x3344>
   13200:	subs	r4, r0, #0
   13204:	beq	13250 <__assert_fail@plt+0x1a24>
   13208:	mov	r1, r7
   1320c:	mov	r2, r5
   13210:	add	r0, r4, #168	; 0xa8
   13214:	bl	114b4 <memcpy@plt>
   13218:	add	r0, r4, r5
   1321c:	ldr	r1, [r6, #24]
   13220:	mov	r3, #0
   13224:	mov	r2, #3
   13228:	strb	r3, [r0, #168]	; 0xa8
   1322c:	str	r3, [r4, #32]
   13230:	str	r3, [r4, #12]
   13234:	strh	r3, [r4, #58]	; 0x3a
   13238:	str	r3, [r4, #16]
   1323c:	str	r3, [r4, #20]
   13240:	str	r5, [r4, #52]	; 0x34
   13244:	str	r6, [r4, #44]	; 0x2c
   13248:	str	r1, [r4, #28]
   1324c:	strh	r2, [r4, #60]	; 0x3c
   13250:	mov	r0, r4
   13254:	pop	{r4, r5, r6, r7, r8, pc}
   13258:	push	{r4, r5, r6, lr}
   1325c:	subs	r4, r0, #0
   13260:	popeq	{r4, r5, r6, pc}
   13264:	ldr	r3, [r4, #12]
   13268:	ldr	r5, [r4, #8]
   1326c:	subs	r0, r3, #0
   13270:	beq	13278 <__assert_fail@plt+0x1a4c>
   13274:	bl	11814 <closedir@plt>
   13278:	mov	r0, r4
   1327c:	bl	12fdc <__assert_fail@plt+0x17b0>
   13280:	subs	r4, r5, #0
   13284:	bne	13264 <__assert_fail@plt+0x1a38>
   13288:	pop	{r4, r5, r6, pc}
   1328c:	push	{r4, lr}
   13290:	mov	r4, r0
   13294:	b	132a4 <__assert_fail@plt+0x1a78>
   13298:	bl	16228 <__assert_fail@plt+0x49fc>
   1329c:	cmp	r0, #0
   132a0:	bge	132bc <__assert_fail@plt+0x1a90>
   132a4:	mov	r0, r4
   132a8:	bl	161dc <__assert_fail@plt+0x49b0>
   132ac:	cmp	r0, #0
   132b0:	mov	r0, r4
   132b4:	beq	13298 <__assert_fail@plt+0x1a6c>
   132b8:	pop	{r4, pc}
   132bc:	bl	117e4 <close@plt>
   132c0:	b	132a4 <__assert_fail@plt+0x1a78>
   132c4:	push	{r4, r5, r6, r7, lr}
   132c8:	sub	sp, sp, #100	; 0x64
   132cc:	ldr	r4, [r0, #44]	; 0x2c
   132d0:	ldr	r3, [r4, #48]	; 0x30
   132d4:	tst	r3, #512	; 0x200
   132d8:	beq	1334c <__assert_fail@plt+0x1b20>
   132dc:	ldr	r6, [r4, #52]	; 0x34
   132e0:	mov	r7, r1
   132e4:	cmp	r6, #0
   132e8:	mov	r5, r0
   132ec:	beq	13318 <__assert_fail@plt+0x1aec>
   132f0:	ldrd	r2, [r5, #64]	; 0x40
   132f4:	add	r1, sp, #96	; 0x60
   132f8:	mov	r0, r6
   132fc:	strd	r2, [r1, #-88]!	; 0xffffffa8
   13300:	bl	15738 <__assert_fail@plt+0x3f0c>
   13304:	cmp	r0, #0
   13308:	beq	13344 <__assert_fail@plt+0x1b18>
   1330c:	ldr	r0, [r0, #8]
   13310:	add	sp, sp, #100	; 0x64
   13314:	pop	{r4, r5, r6, r7, pc}
   13318:	ldr	r3, [pc, #168]	; 133c8 <__assert_fail@plt+0x1b9c>
   1331c:	mov	r1, r6
   13320:	str	r3, [sp]
   13324:	ldr	r2, [pc, #160]	; 133cc <__assert_fail@plt+0x1ba0>
   13328:	ldr	r3, [pc, #160]	; 133d0 <__assert_fail@plt+0x1ba4>
   1332c:	mov	r0, #13
   13330:	bl	159d8 <__assert_fail@plt+0x41ac>
   13334:	cmp	r0, #0
   13338:	mov	r6, r0
   1333c:	str	r0, [r4, #52]	; 0x34
   13340:	bne	132f0 <__assert_fail@plt+0x1ac4>
   13344:	cmp	r7, #0
   13348:	bge	13358 <__assert_fail@plt+0x1b2c>
   1334c:	mov	r0, #0
   13350:	add	sp, sp, #100	; 0x64
   13354:	pop	{r4, r5, r6, r7, pc}
   13358:	mov	r0, r7
   1335c:	add	r1, sp, #8
   13360:	bl	1140c <fstatfs64@plt>
   13364:	cmp	r0, #0
   13368:	bne	1334c <__assert_fail@plt+0x1b20>
   1336c:	cmp	r6, #0
   13370:	beq	133bc <__assert_fail@plt+0x1b90>
   13374:	mov	r0, #16
   13378:	bl	195b4 <lchmod@@Base+0x3344>
   1337c:	subs	r4, r0, #0
   13380:	beq	133bc <__assert_fail@plt+0x1b90>
   13384:	ldrd	r2, [r5, #64]	; 0x40
   13388:	ldr	r1, [sp, #8]
   1338c:	mov	r0, r6
   13390:	str	r1, [r4, #8]
   13394:	strd	r2, [r4]
   13398:	mov	r1, r4
   1339c:	bl	15fcc <__assert_fail@plt+0x47a0>
   133a0:	cmp	r0, #0
   133a4:	beq	133b4 <__assert_fail@plt+0x1b88>
   133a8:	cmp	r4, r0
   133ac:	beq	133bc <__assert_fail@plt+0x1b90>
   133b0:	bl	117d8 <abort@plt>
   133b4:	mov	r0, r4
   133b8:	bl	12fdc <__assert_fail@plt+0x17b0>
   133bc:	ldr	r0, [sp, #8]
   133c0:	add	sp, sp, #100	; 0x64
   133c4:	pop	{r4, r5, r6, r7, pc}
   133c8:	ldrdeq	r2, [r1], -ip
   133cc:	muleq	r1, r4, r0
   133d0:	strheq	r3, [r1], -r0
   133d4:	push	{r4, r5, r6, lr}
   133d8:	mov	r5, r1
   133dc:	ldr	r1, [r0, #32]
   133e0:	cmn	r1, #100	; 0x64
   133e4:	sub	r3, r1, r5
   133e8:	clz	r3, r3
   133ec:	lsr	r3, r3, #5
   133f0:	moveq	r3, #0
   133f4:	cmp	r3, #0
   133f8:	bne	13450 <__assert_fail@plt+0x1c24>
   133fc:	cmp	r2, #0
   13400:	mov	r4, r0
   13404:	bne	13438 <__assert_fail@plt+0x1c0c>
   13408:	ldr	r3, [r0, #48]	; 0x30
   1340c:	lsr	r3, r3, #2
   13410:	eor	r3, r3, #1
   13414:	cmp	r1, #0
   13418:	movlt	r3, #0
   1341c:	andge	r3, r3, #1
   13420:	cmp	r3, #0
   13424:	beq	13430 <__assert_fail@plt+0x1c04>
   13428:	mov	r0, r1
   1342c:	bl	117e4 <close@plt>
   13430:	str	r5, [r4, #32]
   13434:	pop	{r4, r5, r6, pc}
   13438:	add	r0, r0, #60	; 0x3c
   1343c:	bl	161e4 <__assert_fail@plt+0x49b8>
   13440:	cmp	r0, #0
   13444:	bge	1342c <__assert_fail@plt+0x1c00>
   13448:	str	r5, [r4, #32]
   1344c:	pop	{r4, r5, r6, pc}
   13450:	bl	117d8 <abort@plt>
   13454:	ldr	r3, [r0, #48]	; 0x30
   13458:	push	{r4, r5, r6, lr}
   1345c:	ands	r5, r3, #4
   13460:	mov	r4, r0
   13464:	movne	r5, #0
   13468:	bne	13484 <__assert_fail@plt+0x1c58>
   1346c:	tst	r3, #512	; 0x200
   13470:	bne	13494 <__assert_fail@plt+0x1c68>
   13474:	ldr	r0, [r0, #28]
   13478:	bl	11760 <fchdir@plt>
   1347c:	adds	r5, r0, #0
   13480:	movne	r5, #1
   13484:	add	r0, r4, #60	; 0x3c
   13488:	bl	1328c <__assert_fail@plt+0x1a60>
   1348c:	mov	r0, r5
   13490:	pop	{r4, r5, r6, pc}
   13494:	mov	r2, #1
   13498:	mvn	r1, #99	; 0x63
   1349c:	bl	133d4 <__assert_fail@plt+0x1ba8>
   134a0:	b	13484 <__assert_fail@plt+0x1c58>
   134a4:	push	{r4, r5, r6, lr}
   134a8:	mov	r4, r2
   134ac:	ldr	r2, [r2, #48]	; 0x30
   134b0:	sub	sp, sp, #8
   134b4:	cmp	r2, #0
   134b8:	add	r5, r4, #64	; 0x40
   134bc:	bne	13514 <__assert_fail@plt+0x1ce8>
   134c0:	tst	r1, #1
   134c4:	beq	13514 <__assert_fail@plt+0x1ce8>
   134c8:	mov	r2, r5
   134cc:	ldr	r1, [r4, #24]
   134d0:	mov	r0, #3
   134d4:	bl	117c0 <__xstat64@plt>
   134d8:	cmp	r0, #0
   134dc:	beq	13550 <__assert_fail@plt+0x1d24>
   134e0:	bl	11688 <__errno_location@plt>
   134e4:	ldr	r3, [r0]
   134e8:	mov	r6, r0
   134ec:	cmp	r3, #2
   134f0:	beq	135c8 <__assert_fail@plt+0x1d9c>
   134f4:	str	r3, [r4, #32]
   134f8:	mov	r0, r5
   134fc:	mov	r2, #104	; 0x68
   13500:	mov	r1, #0
   13504:	bl	116ac <memset@plt>
   13508:	mov	r0, #10
   1350c:	add	sp, sp, #8
   13510:	pop	{r4, r5, r6, pc}
   13514:	lsl	r1, r1, #30
   13518:	orrs	r3, r3, r1, lsr #31
   1351c:	bne	134c8 <__assert_fail@plt+0x1c9c>
   13520:	mov	r3, #256	; 0x100
   13524:	ldr	r2, [r4, #24]
   13528:	mov	r1, r0
   1352c:	str	r3, [sp]
   13530:	mov	r0, #3
   13534:	mov	r3, r5
   13538:	bl	11538 <__fxstatat64@plt>
   1353c:	cmp	r0, #0
   13540:	beq	13550 <__assert_fail@plt+0x1d24>
   13544:	bl	11688 <__errno_location@plt>
   13548:	ldr	r3, [r0]
   1354c:	b	134f4 <__assert_fail@plt+0x1cc8>
   13550:	ldr	r0, [r4, #80]	; 0x50
   13554:	and	r0, r0, #61440	; 0xf000
   13558:	cmp	r0, #16384	; 0x4000
   1355c:	beq	13580 <__assert_fail@plt+0x1d54>
   13560:	cmp	r0, #40960	; 0xa000
   13564:	moveq	r0, #12
   13568:	beq	1350c <__assert_fail@plt+0x1ce0>
   1356c:	cmp	r0, #32768	; 0x8000
   13570:	movne	r0, #3
   13574:	moveq	r0, #8
   13578:	add	sp, sp, #8
   1357c:	pop	{r4, r5, r6, pc}
   13580:	ldrb	r3, [r4, #168]	; 0xa8
   13584:	cmp	r3, #46	; 0x2e
   13588:	beq	13594 <__assert_fail@plt+0x1d68>
   1358c:	mov	r0, #1
   13590:	b	1350c <__assert_fail@plt+0x1ce0>
   13594:	ldrb	r3, [r4, #169]	; 0xa9
   13598:	cmp	r3, #0
   1359c:	beq	135b4 <__assert_fail@plt+0x1d88>
   135a0:	ldr	r3, [r4, #168]	; 0xa8
   135a4:	bic	r3, r3, #-16777216	; 0xff000000
   135a8:	bic	r3, r3, #255	; 0xff
   135ac:	cmp	r3, #11776	; 0x2e00
   135b0:	bne	1358c <__assert_fail@plt+0x1d60>
   135b4:	ldr	r0, [r4, #48]	; 0x30
   135b8:	cmp	r0, #0
   135bc:	movne	r0, #5
   135c0:	moveq	r0, #1
   135c4:	b	1350c <__assert_fail@plt+0x1ce0>
   135c8:	mov	r2, r5
   135cc:	ldr	r1, [r4, #24]
   135d0:	mov	r0, #3
   135d4:	bl	117f0 <__lxstat64@plt>
   135d8:	cmp	r0, #0
   135dc:	streq	r0, [r6]
   135e0:	moveq	r0, #13
   135e4:	beq	1350c <__assert_fail@plt+0x1ce0>
   135e8:	ldr	r3, [r6]
   135ec:	b	134f4 <__assert_fail@plt+0x1cc8>
   135f0:	push	{r4, r5, r6, lr}
   135f4:	mov	r5, r0
   135f8:	ldr	r0, [r1]
   135fc:	add	r3, r0, #256	; 0x100
   13600:	add	r2, r3, r2
   13604:	cmp	r0, r2
   13608:	bhi	13634 <__assert_fail@plt+0x1e08>
   1360c:	str	r2, [r1]
   13610:	ldr	r0, [r5]
   13614:	mov	r1, r2
   13618:	bl	195e0 <lchmod@@Base+0x3370>
   1361c:	subs	r4, r0, #0
   13620:	movne	r3, #1
   13624:	strne	r4, [r5]
   13628:	beq	1365c <__assert_fail@plt+0x1e30>
   1362c:	mov	r0, r3
   13630:	pop	{r4, r5, r6, pc}
   13634:	ldr	r0, [r5]
   13638:	mov	r4, #0
   1363c:	bl	12fdc <__assert_fail@plt+0x17b0>
   13640:	str	r4, [r5]
   13644:	bl	11688 <__errno_location@plt>
   13648:	mov	r2, #36	; 0x24
   1364c:	mov	r3, r4
   13650:	str	r2, [r0]
   13654:	mov	r0, r3
   13658:	pop	{r4, r5, r6, pc}
   1365c:	ldr	r0, [r5]
   13660:	bl	12fdc <__assert_fail@plt+0x17b0>
   13664:	str	r4, [r5]
   13668:	mov	r3, r4
   1366c:	b	1362c <__assert_fail@plt+0x1e00>
   13670:	ldr	r3, [pc, #104]	; 136e0 <__assert_fail@plt+0x1eb4>
   13674:	push	{r4, lr}
   13678:	and	r3, r3, r0
   1367c:	cmp	r3, #0
   13680:	sub	sp, sp, #8
   13684:	mov	r4, r1
   13688:	beq	136bc <__assert_fail@plt+0x1e90>
   1368c:	ldr	r2, [pc, #80]	; 136e4 <__assert_fail@plt+0x1eb8>
   13690:	ldr	r3, [pc, #80]	; 136e8 <__assert_fail@plt+0x1ebc>
   13694:	str	r2, [sp]
   13698:	mov	r1, #0
   1369c:	ldr	r2, [pc, #72]	; 136ec <__assert_fail@plt+0x1ec0>
   136a0:	mov	r0, #31
   136a4:	bl	159d8 <__assert_fail@plt+0x41ac>
   136a8:	str	r0, [r4]
   136ac:	adds	r0, r0, #0
   136b0:	movne	r0, #1
   136b4:	add	sp, sp, #8
   136b8:	pop	{r4, pc}
   136bc:	mov	r0, #32
   136c0:	bl	195b4 <lchmod@@Base+0x3344>
   136c4:	cmp	r0, #0
   136c8:	str	r0, [r4]
   136cc:	beq	136b4 <__assert_fail@plt+0x1e88>
   136d0:	bl	19764 <lchmod@@Base+0x34f4>
   136d4:	mov	r0, #1
   136d8:	add	sp, sp, #8
   136dc:	pop	{r4, pc}
   136e0:	andeq	r0, r0, r2, lsl #2
   136e4:	ldrdeq	r2, [r1], -ip
   136e8:	andeq	r3, r1, r4, lsr r0
   136ec:	andeq	r3, r1, r8, ror r0
   136f0:	ldr	ip, [pc, #44]	; 13724 <__assert_fail@plt+0x1ef8>
   136f4:	tst	r1, #16
   136f8:	ldr	r3, [pc, #40]	; 13728 <__assert_fail@plt+0x1efc>
   136fc:	moveq	r3, ip
   13700:	tst	r1, #512	; 0x200
   13704:	mov	ip, r2
   13708:	bne	13718 <__assert_fail@plt+0x1eec>
   1370c:	mov	r1, r3
   13710:	mov	r0, r2
   13714:	b	19ac8 <lchmod@@Base+0x3858>
   13718:	mov	r2, r3
   1371c:	mov	r1, ip
   13720:	b	1689c <lchmod@@Base+0x62c>
   13724:	andeq	r4, r8, r0, lsl #18
   13728:	andeq	ip, r8, r0, lsl #18
   1372c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13730:	subs	sl, r3, #0
   13734:	sub	sp, sp, #104	; 0x68
   13738:	mov	r5, r0
   1373c:	mov	r6, r1
   13740:	mov	r4, r2
   13744:	ldr	r9, [r0, #48]	; 0x30
   13748:	beq	1379c <__assert_fail@plt+0x1f70>
   1374c:	ldr	r1, [pc, #432]	; 13904 <__assert_fail@plt+0x20d8>
   13750:	mov	r0, sl
   13754:	bl	11454 <strcmp@plt>
   13758:	cmp	r0, #0
   1375c:	bne	1379c <__assert_fail@plt+0x1f70>
   13760:	tst	r9, #4
   13764:	bne	137a4 <__assert_fail@plt+0x1f78>
   13768:	cmp	r4, #0
   1376c:	bge	138f0 <__assert_fail@plt+0x20c4>
   13770:	tst	r9, #512	; 0x200
   13774:	bne	13890 <__assert_fail@plt+0x2064>
   13778:	mov	r8, #1
   1377c:	mov	r1, r9
   13780:	mov	r2, sl
   13784:	ldr	r0, [r5, #32]
   13788:	bl	136f0 <__assert_fail@plt+0x1ec4>
   1378c:	subs	r7, r0, #0
   13790:	blt	138e8 <__assert_fail@plt+0x20bc>
   13794:	ldr	r9, [r5, #48]	; 0x30
   13798:	b	137d8 <__assert_fail@plt+0x1fac>
   1379c:	ands	r8, r9, #4
   137a0:	beq	137cc <__assert_fail@plt+0x1fa0>
   137a4:	mvn	r3, r4
   137a8:	lsr	r3, r3, #31
   137ac:	ands	r9, r3, r9, lsr #9
   137b0:	beq	137c0 <__assert_fail@plt+0x1f94>
   137b4:	mov	r0, r4
   137b8:	bl	117e4 <close@plt>
   137bc:	mov	r9, #0
   137c0:	mov	r0, r9
   137c4:	add	sp, sp, #104	; 0x68
   137c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   137cc:	cmp	r4, #0
   137d0:	movge	r7, r4
   137d4:	blt	1377c <__assert_fail@plt+0x1f50>
   137d8:	tst	r9, #2
   137dc:	bne	137fc <__assert_fail@plt+0x1fd0>
   137e0:	cmp	sl, #0
   137e4:	beq	13854 <__assert_fail@plt+0x2028>
   137e8:	mov	r0, sl
   137ec:	ldr	r1, [pc, #272]	; 13904 <__assert_fail@plt+0x20d8>
   137f0:	bl	11454 <strcmp@plt>
   137f4:	cmp	r0, #0
   137f8:	bne	13854 <__assert_fail@plt+0x2028>
   137fc:	mov	r2, sp
   13800:	mov	r1, r7
   13804:	mov	r0, #3
   13808:	bl	11550 <__fxstat64@plt>
   1380c:	cmp	r0, #0
   13810:	beq	1386c <__assert_fail@plt+0x2040>
   13814:	mvn	r9, #0
   13818:	cmp	r4, #0
   1381c:	bge	137c0 <__assert_fail@plt+0x1f94>
   13820:	bl	11688 <__errno_location@plt>
   13824:	mov	r4, r0
   13828:	mov	r0, r7
   1382c:	ldr	r5, [r4]
   13830:	bl	117e4 <close@plt>
   13834:	str	r5, [r4]
   13838:	b	137c0 <__assert_fail@plt+0x1f94>
   1383c:	ldrd	r0, [r6, #160]	; 0xa0
   13840:	ldrd	r2, [sp, #96]	; 0x60
   13844:	cmp	r1, r3
   13848:	cmpeq	r0, r2
   1384c:	bne	13880 <__assert_fail@plt+0x2054>
   13850:	ldr	r9, [r5, #48]	; 0x30
   13854:	tst	r9, #512	; 0x200
   13858:	bne	138cc <__assert_fail@plt+0x20a0>
   1385c:	mov	r0, r7
   13860:	bl	11760 <fchdir@plt>
   13864:	mov	r9, r0
   13868:	b	13818 <__assert_fail@plt+0x1fec>
   1386c:	ldrd	r0, [r6, #64]	; 0x40
   13870:	ldrd	r2, [sp]
   13874:	cmp	r1, r3
   13878:	cmpeq	r0, r2
   1387c:	beq	1383c <__assert_fail@plt+0x2010>
   13880:	bl	11688 <__errno_location@plt>
   13884:	mov	r3, #2
   13888:	str	r3, [r0]
   1388c:	b	13814 <__assert_fail@plt+0x1fe8>
   13890:	add	r7, r5, #60	; 0x3c
   13894:	mov	r0, r7
   13898:	bl	161dc <__assert_fail@plt+0x49b0>
   1389c:	subs	r8, r0, #0
   138a0:	bne	1377c <__assert_fail@plt+0x1f50>
   138a4:	mov	r0, r7
   138a8:	bl	16228 <__assert_fail@plt+0x49fc>
   138ac:	ldr	r9, [r5, #48]	; 0x30
   138b0:	subs	r7, r0, #0
   138b4:	blt	13778 <__assert_fail@plt+0x1f4c>
   138b8:	tst	r9, #2
   138bc:	mov	r4, r7
   138c0:	mov	r8, #1
   138c4:	beq	13854 <__assert_fail@plt+0x2028>
   138c8:	b	137fc <__assert_fail@plt+0x1fd0>
   138cc:	eor	r2, r8, #1
   138d0:	mov	r1, r7
   138d4:	uxtb	r2, r2
   138d8:	mov	r0, r5
   138dc:	bl	133d4 <__assert_fail@plt+0x1ba8>
   138e0:	mov	r9, #0
   138e4:	b	137c0 <__assert_fail@plt+0x1f94>
   138e8:	mvn	r9, #0
   138ec:	b	137c0 <__assert_fail@plt+0x1f94>
   138f0:	tst	r9, #2
   138f4:	mov	r7, r4
   138f8:	mov	r8, #1
   138fc:	beq	137e8 <__assert_fail@plt+0x1fbc>
   13900:	b	137fc <__assert_fail@plt+0x1fd0>
   13904:	andeq	sl, r1, r4, asr #20
   13908:	ldr	r3, [pc, #164]	; 139b4 <__assert_fail@plt+0x2188>
   1390c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13910:	and	r3, r3, r0
   13914:	cmp	r3, #0
   13918:	mov	sl, r1
   1391c:	mov	r8, r2
   13920:	beq	13988 <__assert_fail@plt+0x215c>
   13924:	mov	r0, #24
   13928:	bl	195b4 <lchmod@@Base+0x3344>
   1392c:	subs	r9, r0, #0
   13930:	beq	139ac <__assert_fail@plt+0x2180>
   13934:	ldrd	r4, [r8, #160]	; 0xa0
   13938:	ldrd	r6, [r8, #64]	; 0x40
   1393c:	str	r8, [r9, #16]
   13940:	strd	r4, [r9, #8]
   13944:	ldr	r0, [sl]
   13948:	strd	r6, [r9]
   1394c:	mov	r1, r9
   13950:	bl	15fcc <__assert_fail@plt+0x47a0>
   13954:	cmp	r9, r0
   13958:	mov	r4, r0
   1395c:	beq	13980 <__assert_fail@plt+0x2154>
   13960:	mov	r0, r9
   13964:	bl	12fdc <__assert_fail@plt+0x17b0>
   13968:	cmp	r4, #0
   1396c:	beq	139ac <__assert_fail@plt+0x2180>
   13970:	ldr	r2, [r4, #16]
   13974:	mov	r3, #2
   13978:	str	r2, [r8]
   1397c:	strh	r3, [r8, #56]	; 0x38
   13980:	mov	r0, #1
   13984:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13988:	ldr	r0, [r1]
   1398c:	add	r1, r2, #64	; 0x40
   13990:	bl	19788 <lchmod@@Base+0x3518>
   13994:	cmp	r0, #0
   13998:	beq	13980 <__assert_fail@plt+0x2154>
   1399c:	mov	r3, #2
   139a0:	str	r8, [r8]
   139a4:	strh	r3, [r8, #56]	; 0x38
   139a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   139ac:	mov	r0, #0
   139b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   139b4:	andeq	r0, r0, r2, lsl #2
   139b8:	ldr	r3, [pc, #172]	; 13a6c <__assert_fail@plt+0x2240>
   139bc:	push	{r4, r5, lr}
   139c0:	and	r3, r3, r0
   139c4:	cmp	r3, #0
   139c8:	sub	sp, sp, #28
   139cc:	bne	13a14 <__assert_fail@plt+0x21e8>
   139d0:	ldr	r3, [r2, #4]
   139d4:	cmp	r3, #0
   139d8:	beq	13a0c <__assert_fail@plt+0x21e0>
   139dc:	ldr	r0, [r3, #48]	; 0x30
   139e0:	cmp	r0, #0
   139e4:	blt	13a0c <__assert_fail@plt+0x21e0>
   139e8:	ldr	ip, [r1]
   139ec:	ldrd	r0, [ip, #16]
   139f0:	orrs	r1, r0, r1
   139f4:	beq	13a68 <__assert_fail@plt+0x223c>
   139f8:	ldrd	r4, [ip]
   139fc:	ldrd	r0, [r2, #160]	; 0xa0
   13a00:	cmp	r5, r1
   13a04:	cmpeq	r4, r0
   13a08:	beq	13a44 <__assert_fail@plt+0x2218>
   13a0c:	add	sp, sp, #28
   13a10:	pop	{r4, r5, pc}
   13a14:	ldrd	r4, [r2, #64]	; 0x40
   13a18:	ldrd	r2, [r2, #160]	; 0xa0
   13a1c:	ldr	r0, [r1]
   13a20:	mov	r1, sp
   13a24:	strd	r4, [sp]
   13a28:	strd	r2, [sp, #8]
   13a2c:	bl	16004 <__assert_fail@plt+0x47d8>
   13a30:	cmp	r0, #0
   13a34:	beq	13a68 <__assert_fail@plt+0x223c>
   13a38:	bl	12fdc <__assert_fail@plt+0x17b0>
   13a3c:	add	sp, sp, #28
   13a40:	pop	{r4, r5, pc}
   13a44:	ldrd	r0, [ip, #8]
   13a48:	ldrd	r4, [r2, #64]	; 0x40
   13a4c:	cmp	r1, r5
   13a50:	cmpeq	r0, r4
   13a54:	ldrdeq	r0, [r3, #64]	; 0x40
   13a58:	ldrdeq	r2, [r3, #160]	; 0xa0
   13a5c:	strdeq	r0, [ip, #8]
   13a60:	strdeq	r2, [ip]
   13a64:	b	13a0c <__assert_fail@plt+0x21e0>
   13a68:	bl	117d8 <abort@plt>
   13a6c:	andeq	r0, r0, r2, lsl #2
   13a70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a74:	sub	sp, sp, #68	; 0x44
   13a78:	ldr	sl, [r0]
   13a7c:	mov	r5, r0
   13a80:	str	r1, [sp, #40]	; 0x28
   13a84:	ldr	r3, [sl, #12]
   13a88:	cmp	r3, #0
   13a8c:	str	r3, [sp, #44]	; 0x2c
   13a90:	beq	13e54 <__assert_fail@plt+0x2628>
   13a94:	mov	r0, r3
   13a98:	bl	11754 <dirfd@plt>
   13a9c:	cmp	r0, #0
   13aa0:	str	r0, [sp, #60]	; 0x3c
   13aa4:	blt	14230 <__assert_fail@plt+0x2a04>
   13aa8:	ldr	r3, [r5, #44]	; 0x2c
   13aac:	cmp	r3, #0
   13ab0:	beq	143cc <__assert_fail@plt+0x2ba0>
   13ab4:	mvn	r3, #0
   13ab8:	str	r3, [sp, #20]
   13abc:	ldr	r0, [r5, #48]	; 0x30
   13ac0:	mov	r3, #1
   13ac4:	str	r3, [sp, #52]	; 0x34
   13ac8:	ldr	r3, [sl, #40]	; 0x28
   13acc:	ldr	r2, [sl, #28]
   13ad0:	mov	r1, r3
   13ad4:	sub	r3, r3, #1
   13ad8:	str	sl, [sp, #12]
   13adc:	ldrb	r2, [r2, r3]
   13ae0:	cmp	r2, #47	; 0x2f
   13ae4:	moveq	r1, r3
   13ae8:	ands	r0, r0, #4
   13aec:	mov	r2, r1
   13af0:	ldrne	r3, [r5, #24]
   13af4:	movne	r0, r2
   13af8:	str	r1, [sp, #32]
   13afc:	addne	r2, r3, r2
   13b00:	movne	r1, #47	; 0x2f
   13b04:	strbne	r1, [r3, r0]
   13b08:	addne	r3, r2, #1
   13b0c:	ldr	r2, [sp, #32]
   13b10:	strne	r3, [sp, #28]
   13b14:	add	r2, r2, #1
   13b18:	ldr	r3, [sl, #48]	; 0x30
   13b1c:	ldr	fp, [r5, #36]	; 0x24
   13b20:	mov	r1, r2
   13b24:	str	r2, [sp, #8]
   13b28:	sub	r1, fp, r1
   13b2c:	mov	r2, #0
   13b30:	add	r3, r3, #1
   13b34:	streq	r0, [sp, #28]
   13b38:	str	r2, [sp, #48]	; 0x30
   13b3c:	str	r1, [sp, #16]
   13b40:	str	r3, [sp, #24]
   13b44:	str	r2, [sp, #36]	; 0x24
   13b48:	mov	r7, r2
   13b4c:	str	r2, [sp, #4]
   13b50:	mov	r8, r2
   13b54:	mov	sl, r2
   13b58:	b	13bd8 <__assert_fail@plt+0x23ac>
   13b5c:	tst	r3, #251	; 0xfb
   13b60:	beq	13cac <__assert_fail@plt+0x2480>
   13b64:	lsr	r2, r2, #4
   13b68:	cmp	r3, #10
   13b6c:	orrne	r2, r2, #1
   13b70:	tst	r2, #1
   13b74:	beq	13f7c <__assert_fail@plt+0x2750>
   13b78:	sub	r3, r3, #1
   13b7c:	mov	r2, #11
   13b80:	cmp	r3, #11
   13b84:	strh	r2, [r4, #56]	; 0x38
   13b88:	bhi	143bc <__assert_fail@plt+0x2b90>
   13b8c:	ldr	r2, [pc, #2128]	; 143e4 <__assert_fail@plt+0x2bb8>
   13b90:	ldr	r1, [r2, r3, lsl #2]
   13b94:	mov	r2, #1
   13b98:	mov	r3, #0
   13b9c:	str	r1, [r4, #80]	; 0x50
   13ba0:	strd	r2, [r4, #112]	; 0x70
   13ba4:	ldr	r3, [sp, #4]
   13ba8:	str	r8, [r4, #8]
   13bac:	cmp	r3, #0
   13bb0:	ldr	r3, [pc, #2096]	; 143e8 <__assert_fail@plt+0x2bbc>
   13bb4:	strne	r4, [sl, #8]
   13bb8:	streq	r4, [sp, #4]
   13bbc:	cmp	r7, r3
   13bc0:	beq	13dc4 <__assert_fail@plt+0x2598>
   13bc4:	ldr	r3, [sp, #20]
   13bc8:	add	r7, r7, #1
   13bcc:	cmp	r7, r3
   13bd0:	bcs	141f8 <__assert_fail@plt+0x29cc>
   13bd4:	mov	sl, r4
   13bd8:	ldr	r3, [sp, #12]
   13bdc:	ldr	r4, [r3, #12]
   13be0:	cmp	r4, #0
   13be4:	beq	1404c <__assert_fail@plt+0x2820>
   13be8:	bl	11688 <__errno_location@plt>
   13bec:	mov	r9, r0
   13bf0:	mov	r0, r4
   13bf4:	str	r8, [r9]
   13bf8:	bl	11730 <readdir64@plt>
   13bfc:	subs	fp, r0, #0
   13c00:	beq	14124 <__assert_fail@plt+0x28f8>
   13c04:	ldr	r2, [r5, #48]	; 0x30
   13c08:	tst	r2, #32
   13c0c:	bne	13c1c <__assert_fail@plt+0x23f0>
   13c10:	ldrb	r2, [fp, #19]
   13c14:	cmp	r2, #46	; 0x2e
   13c18:	beq	13e2c <__assert_fail@plt+0x2600>
   13c1c:	add	r4, fp, #19
   13c20:	mov	r0, r4
   13c24:	bl	11658 <strlen@plt>
   13c28:	mov	r1, r4
   13c2c:	mov	r2, r0
   13c30:	mov	r6, r0
   13c34:	mov	r0, r5
   13c38:	bl	131e4 <__assert_fail@plt+0x19b8>
   13c3c:	subs	r4, r0, #0
   13c40:	beq	13ffc <__assert_fail@plt+0x27d0>
   13c44:	ldr	r3, [sp, #16]
   13c48:	cmp	r3, r6
   13c4c:	bls	13ce4 <__assert_fail@plt+0x24b8>
   13c50:	ldr	r3, [sp, #8]
   13c54:	adds	r6, r3, r6
   13c58:	bcs	13d50 <__assert_fail@plt+0x2524>
   13c5c:	ldrd	r0, [fp]
   13c60:	ldr	r2, [r5, #48]	; 0x30
   13c64:	ldr	ip, [r5]
   13c68:	tst	r2, #4
   13c6c:	ldr	r3, [sp, #24]
   13c70:	strd	r0, [r4, #160]	; 0xa0
   13c74:	addeq	r1, r4, #168	; 0xa8
   13c78:	str	r3, [r4, #48]	; 0x30
   13c7c:	str	ip, [r4, #4]
   13c80:	str	r6, [r4, #40]	; 0x28
   13c84:	streq	r1, [r4, #24]
   13c88:	bne	13da0 <__assert_fail@plt+0x2574>
   13c8c:	ldr	r1, [r5, #44]	; 0x2c
   13c90:	cmp	r1, #0
   13c94:	beq	13ca0 <__assert_fail@plt+0x2474>
   13c98:	tst	r2, #1024	; 0x400
   13c9c:	beq	13e10 <__assert_fail@plt+0x25e4>
   13ca0:	tst	r2, #8
   13ca4:	ldrb	r3, [fp, #18]
   13ca8:	bne	13b5c <__assert_fail@plt+0x2330>
   13cac:	sub	r3, r3, #1
   13cb0:	cmp	r3, #11
   13cb4:	mov	r2, #11
   13cb8:	strh	r2, [r4, #56]	; 0x38
   13cbc:	strhi	r8, [r4, #80]	; 0x50
   13cc0:	movhi	r2, #2
   13cc4:	movhi	r3, #0
   13cc8:	bhi	13ba0 <__assert_fail@plt+0x2374>
   13ccc:	ldr	r2, [pc, #1808]	; 143e4 <__assert_fail@plt+0x2bb8>
   13cd0:	ldr	r1, [r2, r3, lsl #2]
   13cd4:	mov	r2, #2
   13cd8:	mov	r3, #0
   13cdc:	str	r1, [r4, #80]	; 0x50
   13ce0:	b	13ba0 <__assert_fail@plt+0x2374>
   13ce4:	ldr	r3, [sp, #32]
   13ce8:	add	r1, r5, #36	; 0x24
   13cec:	add	r2, r3, #2
   13cf0:	ldr	r3, [r5, #24]
   13cf4:	add	r2, r2, r6
   13cf8:	add	r0, r5, #24
   13cfc:	str	r3, [sp, #16]
   13d00:	bl	135f0 <__assert_fail@plt+0x1dc4>
   13d04:	cmp	r0, #0
   13d08:	beq	13ffc <__assert_fail@plt+0x27d0>
   13d0c:	ldr	r2, [r5, #24]
   13d10:	ldr	r3, [sp, #16]
   13d14:	cmp	r3, r2
   13d18:	beq	13e4c <__assert_fail@plt+0x2620>
   13d1c:	ldr	r1, [r5, #48]	; 0x30
   13d20:	tst	r1, #4
   13d24:	ldrne	r3, [sp, #8]
   13d28:	addne	r3, r2, r3
   13d2c:	strne	r3, [sp, #28]
   13d30:	ldr	r3, [r5, #36]	; 0x24
   13d34:	ldr	r2, [sp, #8]
   13d38:	str	r0, [sp, #36]	; 0x24
   13d3c:	sub	r3, r3, r2
   13d40:	str	r3, [sp, #16]
   13d44:	ldr	r3, [sp, #8]
   13d48:	adds	r6, r3, r6
   13d4c:	bcc	13c5c <__assert_fail@plt+0x2430>
   13d50:	ldr	sl, [sp, #12]
   13d54:	mov	r0, r4
   13d58:	bl	12fdc <__assert_fail@plt+0x17b0>
   13d5c:	ldr	r0, [sp, #4]
   13d60:	bl	13258 <__assert_fail@plt+0x1a2c>
   13d64:	ldr	r0, [sl, #12]
   13d68:	bl	11814 <closedir@plt>
   13d6c:	ldr	r3, [r5, #48]	; 0x30
   13d70:	mov	r2, #0
   13d74:	orr	r3, r3, #8192	; 0x2000
   13d78:	mov	r0, #7
   13d7c:	mov	r1, #36	; 0x24
   13d80:	str	r2, [sp, #4]
   13d84:	strh	r0, [sl, #56]	; 0x38
   13d88:	str	r2, [sl, #12]
   13d8c:	ldr	r0, [sp, #4]
   13d90:	str	r3, [r5, #48]	; 0x30
   13d94:	str	r1, [r9]
   13d98:	add	sp, sp, #68	; 0x44
   13d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13da0:	ldr	r1, [r4, #28]
   13da4:	ldr	r2, [r4, #52]	; 0x34
   13da8:	str	r1, [r4, #24]
   13dac:	add	r2, r2, #1
   13db0:	add	r1, r4, #168	; 0xa8
   13db4:	ldr	r0, [sp, #28]
   13db8:	bl	11484 <memmove@plt>
   13dbc:	ldr	r2, [r5, #48]	; 0x30
   13dc0:	b	13c8c <__assert_fail@plt+0x2460>
   13dc4:	ldr	r3, [r5, #44]	; 0x2c
   13dc8:	cmp	r3, #0
   13dcc:	bne	13bc4 <__assert_fail@plt+0x2398>
   13dd0:	ldr	r1, [sp, #60]	; 0x3c
   13dd4:	ldr	r0, [sp, #12]
   13dd8:	bl	132c4 <__assert_fail@plt+0x1a98>
   13ddc:	ldr	r3, [pc, #1544]	; 143ec <__assert_fail@plt+0x2bc0>
   13de0:	cmp	r0, r3
   13de4:	beq	13e08 <__assert_fail@plt+0x25dc>
   13de8:	ldr	r3, [pc, #1536]	; 143f0 <__assert_fail@plt+0x2bc4>
   13dec:	cmp	r0, r3
   13df0:	beq	13e08 <__assert_fail@plt+0x25dc>
   13df4:	ldr	r3, [pc, #1528]	; 143f4 <__assert_fail@plt+0x2bc8>
   13df8:	cmp	r0, r3
   13dfc:	movne	r3, #1
   13e00:	strne	r3, [sp, #48]	; 0x30
   13e04:	bne	13bc4 <__assert_fail@plt+0x2398>
   13e08:	str	r8, [sp, #48]	; 0x30
   13e0c:	b	13bc4 <__assert_fail@plt+0x2398>
   13e10:	mov	r1, r2
   13e14:	mov	r3, r8
   13e18:	mov	r2, r4
   13e1c:	ldr	r0, [r5, #32]
   13e20:	bl	134a4 <__assert_fail@plt+0x1c78>
   13e24:	strh	r0, [r4, #56]	; 0x38
   13e28:	b	13ba4 <__assert_fail@plt+0x2378>
   13e2c:	ldrb	r2, [fp, #20]
   13e30:	cmp	r2, #0
   13e34:	beq	13e44 <__assert_fail@plt+0x2618>
   13e38:	ldrh	r2, [fp, #20]
   13e3c:	cmp	r2, #46	; 0x2e
   13e40:	bne	13c1c <__assert_fail@plt+0x23f0>
   13e44:	mov	r4, sl
   13e48:	b	13bd4 <__assert_fail@plt+0x23a8>
   13e4c:	ldr	r0, [sp, #36]	; 0x24
   13e50:	b	13d30 <__assert_fail@plt+0x2504>
   13e54:	ldr	r3, [r0, #48]	; 0x30
   13e58:	ldr	r1, [sl, #24]
   13e5c:	and	r2, r3, #516	; 0x204
   13e60:	cmp	r2, #512	; 0x200
   13e64:	mvnne	r0, #99	; 0x63
   13e68:	ldreq	r0, [r0, #32]
   13e6c:	ands	r2, r3, #16
   13e70:	bne	13f8c <__assert_fail@plt+0x2760>
   13e74:	add	r3, sp, #60	; 0x3c
   13e78:	bl	168d4 <lchmod@@Base+0x664>
   13e7c:	cmp	r0, #0
   13e80:	mov	r4, r0
   13e84:	str	r0, [sl, #12]
   13e88:	beq	142e4 <__assert_fail@plt+0x2ab8>
   13e8c:	ldrh	r3, [sl, #56]	; 0x38
   13e90:	cmp	r3, #11
   13e94:	beq	1430c <__assert_fail@plt+0x2ae0>
   13e98:	ldr	r0, [r5, #48]	; 0x30
   13e9c:	tst	r0, #256	; 0x100
   13ea0:	bne	13fac <__assert_fail@plt+0x2780>
   13ea4:	ldr	r2, [r5, #44]	; 0x2c
   13ea8:	ldr	r3, [pc, #1352]	; 143f8 <__assert_fail@plt+0x2bcc>
   13eac:	cmp	r2, #0
   13eb0:	mvnne	r3, #0
   13eb4:	str	r3, [sp, #20]
   13eb8:	ldr	r3, [sp, #40]	; 0x28
   13ebc:	cmp	r3, #2
   13ec0:	beq	142a0 <__assert_fail@plt+0x2a74>
   13ec4:	ldr	r3, [r5, #48]	; 0x30
   13ec8:	and	r3, r3, #56	; 0x38
   13ecc:	cmp	r3, #24
   13ed0:	beq	14328 <__assert_fail@plt+0x2afc>
   13ed4:	ldr	r3, [sp, #40]	; 0x28
   13ed8:	mov	r4, #1
   13edc:	sub	r6, r3, #3
   13ee0:	clz	r6, r6
   13ee4:	lsr	r6, r6, #5
   13ee8:	ldr	r3, [r5, #48]	; 0x30
   13eec:	tst	r3, #512	; 0x200
   13ef0:	bne	142c8 <__assert_fail@plt+0x2a9c>
   13ef4:	ldr	r2, [sp, #60]	; 0x3c
   13ef8:	cmp	r2, #0
   13efc:	blt	13f18 <__assert_fail@plt+0x26ec>
   13f00:	mov	r3, #0
   13f04:	mov	r1, sl
   13f08:	mov	r0, r5
   13f0c:	bl	1372c <__assert_fail@plt+0x1f00>
   13f10:	cmp	r0, #0
   13f14:	beq	13abc <__assert_fail@plt+0x2290>
   13f18:	tst	r4, r6
   13f1c:	beq	13f2c <__assert_fail@plt+0x2700>
   13f20:	bl	11688 <__errno_location@plt>
   13f24:	ldr	r3, [r0]
   13f28:	str	r3, [sl, #32]
   13f2c:	ldrh	r3, [sl, #58]	; 0x3a
   13f30:	ldr	r0, [sl, #12]
   13f34:	orr	r3, r3, #1
   13f38:	strh	r3, [sl, #58]	; 0x3a
   13f3c:	bl	11814 <closedir@plt>
   13f40:	ldr	r0, [r5, #48]	; 0x30
   13f44:	mov	r3, #0
   13f48:	tst	r0, #512	; 0x200
   13f4c:	str	r3, [sl, #12]
   13f50:	beq	13f6c <__assert_fail@plt+0x2740>
   13f54:	ldr	r3, [sp, #60]	; 0x3c
   13f58:	cmp	r3, #0
   13f5c:	blt	13f6c <__assert_fail@plt+0x2740>
   13f60:	mov	r0, r3
   13f64:	bl	117e4 <close@plt>
   13f68:	ldr	r0, [r5, #48]	; 0x30
   13f6c:	mov	r3, #0
   13f70:	str	r3, [sl, #12]
   13f74:	str	r3, [sp, #52]	; 0x34
   13f78:	b	13ac8 <__assert_fail@plt+0x229c>
   13f7c:	mov	r3, #11
   13f80:	strh	r3, [r4, #56]	; 0x38
   13f84:	mov	r3, #9
   13f88:	b	13ccc <__assert_fail@plt+0x24a0>
   13f8c:	tst	r3, #1
   13f90:	moveq	r2, #32768	; 0x8000
   13f94:	beq	13e74 <__assert_fail@plt+0x2648>
   13f98:	ldr	r2, [sl, #48]	; 0x30
   13f9c:	cmp	r2, #0
   13fa0:	movne	r2, #32768	; 0x8000
   13fa4:	moveq	r2, #0
   13fa8:	b	13e74 <__assert_fail@plt+0x2648>
   13fac:	add	r4, r5, #56	; 0x38
   13fb0:	mov	r1, r4
   13fb4:	mov	r2, sl
   13fb8:	bl	139b8 <__assert_fail@plt+0x218c>
   13fbc:	mov	r3, #0
   13fc0:	mov	r2, sl
   13fc4:	ldr	r1, [r5, #48]	; 0x30
   13fc8:	ldr	r0, [r5, #32]
   13fcc:	bl	134a4 <__assert_fail@plt+0x1c78>
   13fd0:	mov	r1, r4
   13fd4:	mov	r2, sl
   13fd8:	ldr	r0, [r5, #48]	; 0x30
   13fdc:	bl	13908 <__assert_fail@plt+0x20dc>
   13fe0:	subs	r4, r0, #0
   13fe4:	bne	13ea4 <__assert_fail@plt+0x2678>
   13fe8:	bl	11688 <__errno_location@plt>
   13fec:	mov	r3, #12
   13ff0:	str	r4, [sp, #4]
   13ff4:	str	r3, [r0]
   13ff8:	b	14040 <__assert_fail@plt+0x2814>
   13ffc:	ldr	sl, [sp, #12]
   14000:	mov	r0, r4
   14004:	ldr	r4, [r9]
   14008:	bl	12fdc <__assert_fail@plt+0x17b0>
   1400c:	ldr	r0, [sp, #4]
   14010:	bl	13258 <__assert_fail@plt+0x1a2c>
   14014:	ldr	r0, [sl, #12]
   14018:	bl	11814 <closedir@plt>
   1401c:	ldr	r3, [r5, #48]	; 0x30
   14020:	mov	r2, #0
   14024:	orr	r3, r3, #8192	; 0x2000
   14028:	mov	r1, #7
   1402c:	str	r2, [sl, #12]
   14030:	strh	r1, [sl, #56]	; 0x38
   14034:	str	r2, [sp, #4]
   14038:	str	r3, [r5, #48]	; 0x30
   1403c:	str	r4, [r9]
   14040:	ldr	r0, [sp, #4]
   14044:	add	sp, sp, #68	; 0x44
   14048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1404c:	mov	sl, r3
   14050:	ldr	r3, [sp, #36]	; 0x24
   14054:	cmp	r3, #0
   14058:	bne	14174 <__assert_fail@plt+0x2948>
   1405c:	ldr	r3, [r5, #48]	; 0x30
   14060:	tst	r3, #4
   14064:	beq	14090 <__assert_fail@plt+0x2864>
   14068:	ldr	r3, [r5, #36]	; 0x24
   1406c:	ldr	r2, [sp, #8]
   14070:	cmp	r7, #0
   14074:	cmpne	r3, r2
   14078:	ldreq	r3, [sp, #28]
   1407c:	subeq	r3, r3, #1
   14080:	streq	r3, [sp, #28]
   14084:	ldr	r2, [sp, #28]
   14088:	mov	r3, #0
   1408c:	strb	r3, [r2]
   14090:	ldr	r3, [sp, #52]	; 0x34
   14094:	ldr	r2, [sp, #44]	; 0x2c
   14098:	cmp	r2, #0
   1409c:	movne	r3, #0
   140a0:	andeq	r3, r3, #1
   140a4:	cmp	r3, #0
   140a8:	beq	140e0 <__assert_fail@plt+0x28b4>
   140ac:	ldr	r3, [sp, #40]	; 0x28
   140b0:	cmp	r7, #0
   140b4:	cmpne	r3, #1
   140b8:	bne	140e8 <__assert_fail@plt+0x28bc>
   140bc:	ldr	r3, [sl, #48]	; 0x30
   140c0:	cmp	r3, #0
   140c4:	bne	14260 <__assert_fail@plt+0x2a34>
   140c8:	mov	r0, r5
   140cc:	bl	13454 <__assert_fail@plt+0x1c28>
   140d0:	adds	r0, r0, #0
   140d4:	movne	r0, #1
   140d8:	cmp	r0, #0
   140dc:	bne	14380 <__assert_fail@plt+0x2b54>
   140e0:	cmp	r7, #0
   140e4:	beq	14280 <__assert_fail@plt+0x2a54>
   140e8:	ldr	r3, [sp, #48]	; 0x30
   140ec:	cmp	r3, #0
   140f0:	bne	14200 <__assert_fail@plt+0x29d4>
   140f4:	ldr	r3, [r5, #44]	; 0x2c
   140f8:	cmp	r3, #0
   140fc:	cmpne	r7, #1
   14100:	bls	14040 <__assert_fail@plt+0x2814>
   14104:	mov	r2, r7
   14108:	ldr	r1, [sp, #4]
   1410c:	mov	r0, r5
   14110:	bl	13104 <__assert_fail@plt+0x18d8>
   14114:	str	r0, [sp, #4]
   14118:	ldr	r0, [sp, #4]
   1411c:	add	sp, sp, #68	; 0x44
   14120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14124:	ldr	r3, [r9]
   14128:	ldr	sl, [sp, #12]
   1412c:	cmp	r3, #0
   14130:	beq	14150 <__assert_fail@plt+0x2924>
   14134:	ldr	r2, [sp, #44]	; 0x2c
   14138:	str	r3, [sl, #32]
   1413c:	cmp	r7, #0
   14140:	cmpeq	r2, #0
   14144:	moveq	r2, #4
   14148:	movne	r2, #7
   1414c:	strh	r2, [sl, #56]	; 0x38
   14150:	ldr	r0, [sl, #12]
   14154:	cmp	r0, #0
   14158:	beq	14050 <__assert_fail@plt+0x2824>
   1415c:	bl	11814 <closedir@plt>
   14160:	mov	r3, #0
   14164:	str	r3, [sl, #12]
   14168:	ldr	r3, [sp, #36]	; 0x24
   1416c:	cmp	r3, #0
   14170:	beq	1405c <__assert_fail@plt+0x2830>
   14174:	ldr	r1, [r5, #4]
   14178:	ldr	r0, [r5, #24]
   1417c:	cmp	r1, #0
   14180:	beq	141b0 <__assert_fail@plt+0x2984>
   14184:	ldr	r3, [r1, #24]
   14188:	add	r2, r1, #168	; 0xa8
   1418c:	cmp	r3, r2
   14190:	ldrne	r2, [r1, #28]
   14194:	str	r0, [r1, #28]
   14198:	subne	r3, r3, r2
   1419c:	addne	r3, r0, r3
   141a0:	strne	r3, [r1, #24]
   141a4:	ldr	r1, [r1, #8]
   141a8:	cmp	r1, #0
   141ac:	bne	14184 <__assert_fail@plt+0x2958>
   141b0:	ldr	r3, [sp, #4]
   141b4:	b	141e4 <__assert_fail@plt+0x29b8>
   141b8:	ldr	r2, [r3, #24]
   141bc:	cmp	r2, r1
   141c0:	ldrne	r1, [r3, #28]
   141c4:	str	r0, [r3, #28]
   141c8:	subne	r2, r2, r1
   141cc:	addne	r2, r0, r2
   141d0:	strne	r2, [r3, #24]
   141d4:	ldr	r2, [r3, #8]
   141d8:	cmp	r2, #0
   141dc:	ldreq	r2, [r3, #4]
   141e0:	mov	r3, r2
   141e4:	ldr	r2, [r3, #48]	; 0x30
   141e8:	add	r1, r3, #168	; 0xa8
   141ec:	cmp	r2, #0
   141f0:	bge	141b8 <__assert_fail@plt+0x298c>
   141f4:	b	1405c <__assert_fail@plt+0x2830>
   141f8:	ldr	sl, [sp, #12]
   141fc:	b	14050 <__assert_fail@plt+0x2824>
   14200:	ldr	r3, [pc, #500]	; 143fc <__assert_fail@plt+0x2bd0>
   14204:	mov	r2, r7
   14208:	str	r3, [r5, #44]	; 0x2c
   1420c:	ldr	r1, [sp, #4]
   14210:	mov	r0, r5
   14214:	bl	13104 <__assert_fail@plt+0x18d8>
   14218:	mov	r3, #0
   1421c:	str	r3, [r5, #44]	; 0x2c
   14220:	str	r0, [sp, #4]
   14224:	ldr	r0, [sp, #4]
   14228:	add	sp, sp, #68	; 0x44
   1422c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14230:	ldr	r0, [sl, #12]
   14234:	bl	11814 <closedir@plt>
   14238:	ldr	r3, [sp, #40]	; 0x28
   1423c:	mov	r4, #0
   14240:	cmp	r3, #3
   14244:	str	r4, [sl, #12]
   14248:	beq	142f0 <__assert_fail@plt+0x2ac4>
   1424c:	mov	r3, #0
   14250:	str	r3, [sp, #4]
   14254:	ldr	r0, [sp, #4]
   14258:	add	sp, sp, #68	; 0x44
   1425c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14260:	ldr	r3, [pc, #408]	; 14400 <__assert_fail@plt+0x2bd4>
   14264:	mvn	r2, #0
   14268:	ldr	r1, [sl, #4]
   1426c:	mov	r0, r5
   14270:	bl	1372c <__assert_fail@plt+0x1f00>
   14274:	adds	r0, r0, #0
   14278:	movne	r0, #1
   1427c:	b	140d8 <__assert_fail@plt+0x28ac>
   14280:	ldr	r3, [sp, #40]	; 0x28
   14284:	cmp	r3, #3
   14288:	beq	142b0 <__assert_fail@plt+0x2a84>
   1428c:	ldr	r0, [sp, #4]
   14290:	bl	13258 <__assert_fail@plt+0x1a2c>
   14294:	mov	r3, #0
   14298:	str	r3, [sp, #4]
   1429c:	b	14040 <__assert_fail@plt+0x2814>
   142a0:	mov	r3, #0
   142a4:	str	r3, [sp, #52]	; 0x34
   142a8:	ldr	r0, [r5, #48]	; 0x30
   142ac:	b	13ac8 <__assert_fail@plt+0x229c>
   142b0:	ldrh	r3, [sl, #56]	; 0x38
   142b4:	cmp	r3, #4
   142b8:	cmpne	r3, #7
   142bc:	movne	r3, #6
   142c0:	strhne	r3, [sl, #56]	; 0x38
   142c4:	b	1428c <__assert_fail@plt+0x2a60>
   142c8:	mov	r2, #3
   142cc:	ldr	r1, [pc, #304]	; 14404 <__assert_fail@plt+0x2bd8>
   142d0:	ldr	r0, [sp, #60]	; 0x3c
   142d4:	bl	198f4 <lchmod@@Base+0x3684>
   142d8:	mov	r2, r0
   142dc:	str	r0, [sp, #60]	; 0x3c
   142e0:	b	13ef8 <__assert_fail@plt+0x26cc>
   142e4:	ldr	r3, [sp, #40]	; 0x28
   142e8:	cmp	r3, #3
   142ec:	bne	1424c <__assert_fail@plt+0x2a20>
   142f0:	mov	r3, #4
   142f4:	strh	r3, [sl, #56]	; 0x38
   142f8:	bl	11688 <__errno_location@plt>
   142fc:	str	r4, [sp, #4]
   14300:	ldr	r3, [r0]
   14304:	str	r3, [sl, #32]
   14308:	b	14040 <__assert_fail@plt+0x2814>
   1430c:	mov	r3, #0
   14310:	mov	r2, sl
   14314:	ldr	r1, [r5, #48]	; 0x30
   14318:	ldr	r0, [r5, #32]
   1431c:	bl	134a4 <__assert_fail@plt+0x1c78>
   14320:	strh	r0, [sl, #56]	; 0x38
   14324:	b	13ea4 <__assert_fail@plt+0x2678>
   14328:	ldr	r3, [sl, #84]	; 0x54
   1432c:	cmp	r3, #2
   14330:	bne	13ed4 <__assert_fail@plt+0x26a8>
   14334:	ldr	r1, [sp, #60]	; 0x3c
   14338:	mov	r0, sl
   1433c:	bl	132c4 <__assert_fail@plt+0x1a98>
   14340:	ldr	r3, [pc, #164]	; 143ec <__assert_fail@plt+0x2bc0>
   14344:	cmp	r0, r3
   14348:	beq	13ed4 <__assert_fail@plt+0x26a8>
   1434c:	bgt	143a0 <__assert_fail@plt+0x2b74>
   14350:	ldr	r3, [pc, #156]	; 143f4 <__assert_fail@plt+0x2bc8>
   14354:	cmp	r0, r3
   14358:	beq	13ed4 <__assert_fail@plt+0x26a8>
   1435c:	cmp	r0, #0
   14360:	beq	13ed4 <__assert_fail@plt+0x26a8>
   14364:	ldr	r3, [sp, #40]	; 0x28
   14368:	cmp	r3, #3
   1436c:	moveq	r6, #1
   14370:	movne	r6, #0
   14374:	bne	142a0 <__assert_fail@plt+0x2a74>
   14378:	mov	r4, #0
   1437c:	b	13ee8 <__assert_fail@plt+0x26bc>
   14380:	ldr	r3, [r5, #48]	; 0x30
   14384:	mov	r2, #7
   14388:	orr	r3, r3, #8192	; 0x2000
   1438c:	strh	r2, [sl, #56]	; 0x38
   14390:	ldr	r0, [sp, #4]
   14394:	str	r3, [r5, #48]	; 0x30
   14398:	bl	13258 <__assert_fail@plt+0x1a2c>
   1439c:	b	1424c <__assert_fail@plt+0x2a20>
   143a0:	ldr	r3, [pc, #96]	; 14408 <__assert_fail@plt+0x2bdc>
   143a4:	cmp	r0, r3
   143a8:	beq	13ed4 <__assert_fail@plt+0x26a8>
   143ac:	ldr	r3, [pc, #88]	; 1440c <__assert_fail@plt+0x2be0>
   143b0:	cmp	r0, r3
   143b4:	bne	14364 <__assert_fail@plt+0x2b38>
   143b8:	b	13ed4 <__assert_fail@plt+0x26a8>
   143bc:	str	r8, [r4, #80]	; 0x50
   143c0:	mov	r2, #1
   143c4:	mov	r3, #0
   143c8:	b	13ba0 <__assert_fail@plt+0x2374>
   143cc:	ldr	r3, [pc, #36]	; 143f8 <__assert_fail@plt+0x2bcc>
   143d0:	ldr	r0, [r5, #48]	; 0x30
   143d4:	str	r3, [sp, #20]
   143d8:	mov	r3, #1
   143dc:	str	r3, [sp, #52]	; 0x34
   143e0:	b	13ac8 <__assert_fail@plt+0x229c>
   143e4:	andeq	sl, r1, r4, lsl sl
   143e8:	andeq	r2, r0, r0, lsl r7
   143ec:	andeq	r6, r0, r9, ror #18
   143f0:			; <UNDEFINED> instruction: 0x01021994
   143f4:			; <UNDEFINED> instruction: 0xff534d42
   143f8:	andeq	r8, r1, r0, lsr #13
   143fc:	ldrdeq	r3, [r1], -r4
   14400:	andeq	sl, r1, r4, asr #20
   14404:	andeq	r0, r0, r6, lsl #8
   14408:	andeq	r9, r0, r0, lsr #31
   1440c:	movtpl	r4, #24911	; 0x614f
   14410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14414:	bic	r5, r1, #4080	; 0xff0
   14418:	bic	r5, r5, #15
   1441c:	cmp	r5, #0
   14420:	sub	sp, sp, #20
   14424:	bne	1475c <__assert_fail@plt+0x2f30>
   14428:	and	r3, r1, #516	; 0x204
   1442c:	cmp	r3, #516	; 0x204
   14430:	mov	r6, r1
   14434:	beq	146fc <__assert_fail@plt+0x2ed0>
   14438:	ands	r5, r1, #18
   1443c:	beq	146fc <__assert_fail@plt+0x2ed0>
   14440:	mov	r7, r0
   14444:	mov	r1, #96	; 0x60
   14448:	mov	r0, #1
   1444c:	mov	r9, r2
   14450:	bl	1956c <lchmod@@Base+0x32fc>
   14454:	subs	r5, r0, #0
   14458:	beq	146a4 <__assert_fail@plt+0x2e78>
   1445c:	tst	r6, #2
   14460:	bicne	r3, r6, #512	; 0x200
   14464:	orrne	r3, r3, #4
   14468:	strne	r3, [r5, #48]	; 0x30
   1446c:	ldr	r3, [r7]
   14470:	streq	r6, [r5, #48]	; 0x30
   14474:	mvn	r2, #99	; 0x63
   14478:	cmp	r3, #0
   1447c:	str	r9, [r5, #44]	; 0x2c
   14480:	str	r2, [r5, #32]
   14484:	beq	14790 <__assert_fail@plt+0x2f64>
   14488:	mov	r8, r7
   1448c:	mov	r4, #0
   14490:	mov	r0, r3
   14494:	bl	11658 <strlen@plt>
   14498:	ldr	r3, [r8, #4]!
   1449c:	cmp	r4, r0
   144a0:	movcc	r4, r0
   144a4:	cmp	r3, #0
   144a8:	bne	14490 <__assert_fail@plt+0x2c64>
   144ac:	add	r2, r4, #1
   144b0:	cmp	r2, #4096	; 0x1000
   144b4:	movcc	r2, #4096	; 0x1000
   144b8:	add	r1, r5, #36	; 0x24
   144bc:	add	r0, r5, #24
   144c0:	bl	135f0 <__assert_fail@plt+0x1dc4>
   144c4:	subs	r3, r0, #0
   144c8:	str	r3, [sp, #4]
   144cc:	beq	146e4 <__assert_fail@plt+0x2eb8>
   144d0:	ldr	r4, [r7]
   144d4:	cmp	r4, #0
   144d8:	beq	14714 <__assert_fail@plt+0x2ee8>
   144dc:	mov	r2, #0
   144e0:	ldr	r1, [pc, #696]	; 147a0 <__assert_fail@plt+0x2f74>
   144e4:	mov	r0, r5
   144e8:	bl	131e4 <__assert_fail@plt+0x19b8>
   144ec:	subs	fp, r0, #0
   144f0:	beq	146dc <__assert_fail@plt+0x2eb0>
   144f4:	mvn	r3, #0
   144f8:	cmp	r9, #0
   144fc:	str	r3, [fp, #48]	; 0x30
   14500:	ldr	r4, [r7]
   14504:	beq	14518 <__assert_fail@plt+0x2cec>
   14508:	ldr	r3, [r5, #48]	; 0x30
   1450c:	lsr	r3, r3, #10
   14510:	and	r3, r3, #1
   14514:	str	r3, [sp, #4]
   14518:	cmp	r4, #0
   1451c:	beq	14798 <__assert_fail@plt+0x2f6c>
   14520:	lsr	r6, r6, #11
   14524:	mov	r3, #0
   14528:	eor	r6, r6, #1
   1452c:	mov	sl, r3
   14530:	str	r3, [sp, #12]
   14534:	and	r3, r6, #1
   14538:	str	r3, [sp, #8]
   1453c:	mov	r8, sl
   14540:	mov	r6, sl
   14544:	b	1457c <__assert_fail@plt+0x2d50>
   14548:	mov	r3, #11
   1454c:	strh	r3, [r4, #56]	; 0x38
   14550:	mov	r2, #2
   14554:	mov	r3, #0
   14558:	cmp	r9, #0
   1455c:	strd	r2, [r4, #112]	; 0x70
   14560:	beq	14610 <__assert_fail@plt+0x2de4>
   14564:	str	r6, [r4, #8]
   14568:	mov	r6, r4
   1456c:	ldr	r4, [r7, #4]!
   14570:	add	r8, r8, #1
   14574:	cmp	r4, #0
   14578:	beq	1463c <__assert_fail@plt+0x2e10>
   1457c:	mov	r0, r4
   14580:	bl	11658 <strlen@plt>
   14584:	ldr	r3, [sp, #8]
   14588:	cmp	r0, #2
   1458c:	movls	r3, #0
   14590:	andhi	r3, r3, #1
   14594:	cmp	r3, #0
   14598:	mov	r2, r0
   1459c:	beq	145b4 <__assert_fail@plt+0x2d88>
   145a0:	sub	r1, r0, #1
   145a4:	add	r3, r4, r1
   145a8:	ldrb	r1, [r4, r1]
   145ac:	cmp	r1, #47	; 0x2f
   145b0:	beq	146b0 <__assert_fail@plt+0x2e84>
   145b4:	mov	r1, r4
   145b8:	mov	r0, r5
   145bc:	bl	131e4 <__assert_fail@plt+0x19b8>
   145c0:	subs	r4, r0, #0
   145c4:	beq	146cc <__assert_fail@plt+0x2ea0>
   145c8:	ldr	r3, [sp, #4]
   145cc:	str	sl, [r4, #48]	; 0x30
   145d0:	cmp	r6, #0
   145d4:	moveq	r3, #0
   145d8:	andne	r3, r3, #1
   145dc:	cmp	r3, #0
   145e0:	add	r3, r4, #168	; 0xa8
   145e4:	str	fp, [r4, #4]
   145e8:	str	r3, [r4, #24]
   145ec:	bne	14548 <__assert_fail@plt+0x2d1c>
   145f0:	mov	r3, sl
   145f4:	mov	r2, r4
   145f8:	ldr	r1, [r5, #48]	; 0x30
   145fc:	ldr	r0, [r5, #32]
   14600:	bl	134a4 <__assert_fail@plt+0x1c78>
   14604:	cmp	r9, #0
   14608:	strh	r0, [r4, #56]	; 0x38
   1460c:	bne	14564 <__assert_fail@plt+0x2d38>
   14610:	cmp	r6, #0
   14614:	str	r9, [r4, #8]
   14618:	ldrne	r3, [sp, #12]
   1461c:	streq	r4, [sp, #12]
   14620:	strne	r4, [sp, #12]
   14624:	strne	r4, [r3, #8]
   14628:	moveq	r6, r4
   1462c:	ldr	r4, [r7, #4]!
   14630:	add	r8, r8, #1
   14634:	cmp	r4, #0
   14638:	bne	1457c <__assert_fail@plt+0x2d50>
   1463c:	cmp	r9, #0
   14640:	cmpne	r8, #1
   14644:	bhi	14778 <__assert_fail@plt+0x2f4c>
   14648:	mov	r2, #0
   1464c:	ldr	r1, [pc, #332]	; 147a0 <__assert_fail@plt+0x2f74>
   14650:	mov	r0, r5
   14654:	bl	131e4 <__assert_fail@plt+0x19b8>
   14658:	cmp	r0, #0
   1465c:	str	r0, [r5]
   14660:	beq	146cc <__assert_fail@plt+0x2ea0>
   14664:	mov	r2, #1
   14668:	mov	r3, #9
   1466c:	str	r6, [r0, #8]
   14670:	str	r2, [r0, #48]	; 0x30
   14674:	strh	r3, [r0, #56]	; 0x38
   14678:	add	r1, r5, #56	; 0x38
   1467c:	ldr	r0, [r5, #48]	; 0x30
   14680:	bl	13670 <__assert_fail@plt+0x1e44>
   14684:	cmp	r0, #0
   14688:	beq	146cc <__assert_fail@plt+0x2ea0>
   1468c:	ldr	r1, [r5, #48]	; 0x30
   14690:	tst	r1, #516	; 0x204
   14694:	beq	1472c <__assert_fail@plt+0x2f00>
   14698:	mvn	r1, #0
   1469c:	add	r0, r5, #60	; 0x3c
   146a0:	bl	161b0 <__assert_fail@plt+0x4984>
   146a4:	mov	r0, r5
   146a8:	add	sp, sp, #20
   146ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146b0:	ldrb	r1, [r3, #-1]!
   146b4:	cmp	r1, #47	; 0x2f
   146b8:	bne	145b4 <__assert_fail@plt+0x2d88>
   146bc:	sub	r2, r2, #1
   146c0:	cmp	r2, #1
   146c4:	bne	146b0 <__assert_fail@plt+0x2e84>
   146c8:	b	145b4 <__assert_fail@plt+0x2d88>
   146cc:	mov	r0, r6
   146d0:	bl	13258 <__assert_fail@plt+0x1a2c>
   146d4:	mov	r0, fp
   146d8:	bl	12fdc <__assert_fail@plt+0x17b0>
   146dc:	ldr	r0, [r5, #24]
   146e0:	bl	12fdc <__assert_fail@plt+0x17b0>
   146e4:	mov	r0, r5
   146e8:	bl	12fdc <__assert_fail@plt+0x17b0>
   146ec:	mov	r5, #0
   146f0:	mov	r0, r5
   146f4:	add	sp, sp, #20
   146f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146fc:	bl	11688 <__errno_location@plt>
   14700:	mov	r3, #22
   14704:	str	r3, [r0]
   14708:	mov	r0, r5
   1470c:	add	sp, sp, #20
   14710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14714:	cmp	r9, #0
   14718:	movne	fp, r4
   1471c:	bne	14508 <__assert_fail@plt+0x2cdc>
   14720:	mov	fp, r9
   14724:	mov	r6, r9
   14728:	b	14648 <__assert_fail@plt+0x2e1c>
   1472c:	ldr	r2, [pc, #112]	; 147a4 <__assert_fail@plt+0x2f78>
   14730:	ldr	r0, [r5, #32]
   14734:	bl	136f0 <__assert_fail@plt+0x1ec4>
   14738:	mvn	r1, #0
   1473c:	cmp	r0, #0
   14740:	str	r0, [r5, #28]
   14744:	ldrlt	r3, [r5, #48]	; 0x30
   14748:	add	r0, r5, #60	; 0x3c
   1474c:	orrlt	r3, r3, #4
   14750:	strlt	r3, [r5, #48]	; 0x30
   14754:	bl	161b0 <__assert_fail@plt+0x4984>
   14758:	b	146a4 <__assert_fail@plt+0x2e78>
   1475c:	bl	11688 <__errno_location@plt>
   14760:	mov	r5, #0
   14764:	mov	r3, #22
   14768:	str	r3, [r0]
   1476c:	mov	r0, r5
   14770:	add	sp, sp, #20
   14774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14778:	mov	r1, r6
   1477c:	mov	r2, r8
   14780:	mov	r0, r5
   14784:	bl	13104 <__assert_fail@plt+0x18d8>
   14788:	mov	r6, r0
   1478c:	b	14648 <__assert_fail@plt+0x2e1c>
   14790:	mov	r2, #4096	; 0x1000
   14794:	b	144b8 <__assert_fail@plt+0x2c8c>
   14798:	mov	r6, r4
   1479c:	b	14648 <__assert_fail@plt+0x2e1c>
   147a0:	andeq	sl, r1, ip, lsr #21
   147a4:	strdeq	sl, [r1], -r8
   147a8:	ldr	r3, [r0]
   147ac:	push	{r4, r5, r6, lr}
   147b0:	cmp	r3, #0
   147b4:	mov	r5, r0
   147b8:	beq	147f4 <__assert_fail@plt+0x2fc8>
   147bc:	ldr	r2, [r3, #48]	; 0x30
   147c0:	cmp	r2, #0
   147c4:	blt	148e4 <__assert_fail@plt+0x30b8>
   147c8:	ldr	r4, [r3, #8]
   147cc:	mov	r0, r3
   147d0:	cmp	r4, #0
   147d4:	ldreq	r4, [r3, #4]
   147d8:	bl	12fdc <__assert_fail@plt+0x17b0>
   147dc:	mov	r3, r4
   147e0:	ldr	r2, [r4, #48]	; 0x30
   147e4:	cmp	r2, #0
   147e8:	bge	147c8 <__assert_fail@plt+0x2f9c>
   147ec:	mov	r0, r4
   147f0:	bl	12fdc <__assert_fail@plt+0x17b0>
   147f4:	ldr	r0, [r5, #4]
   147f8:	cmp	r0, #0
   147fc:	beq	14804 <__assert_fail@plt+0x2fd8>
   14800:	bl	13258 <__assert_fail@plt+0x1a2c>
   14804:	ldr	r0, [r5, #8]
   14808:	bl	12fdc <__assert_fail@plt+0x17b0>
   1480c:	ldr	r0, [r5, #24]
   14810:	bl	12fdc <__assert_fail@plt+0x17b0>
   14814:	ldr	r3, [r5, #48]	; 0x30
   14818:	tst	r3, #512	; 0x200
   1481c:	beq	14890 <__assert_fail@plt+0x3064>
   14820:	ldr	r0, [r5, #32]
   14824:	cmp	r0, #0
   14828:	blt	14838 <__assert_fail@plt+0x300c>
   1482c:	bl	117e4 <close@plt>
   14830:	cmp	r0, #0
   14834:	bne	148d0 <__assert_fail@plt+0x30a4>
   14838:	mov	r4, #0
   1483c:	add	r0, r5, #60	; 0x3c
   14840:	bl	1328c <__assert_fail@plt+0x1a60>
   14844:	ldr	r0, [r5, #52]	; 0x34
   14848:	cmp	r0, #0
   1484c:	beq	14854 <__assert_fail@plt+0x3028>
   14850:	bl	15bd4 <__assert_fail@plt+0x43a8>
   14854:	ldr	r2, [r5, #48]	; 0x30
   14858:	ldr	r3, [pc, #164]	; 14904 <__assert_fail@plt+0x30d8>
   1485c:	ldr	r0, [r5, #56]	; 0x38
   14860:	and	r3, r3, r2
   14864:	cmp	r3, #0
   14868:	beq	148dc <__assert_fail@plt+0x30b0>
   1486c:	cmp	r0, #0
   14870:	beq	14878 <__assert_fail@plt+0x304c>
   14874:	bl	15bd4 <__assert_fail@plt+0x43a8>
   14878:	mov	r0, r5
   1487c:	bl	12fdc <__assert_fail@plt+0x17b0>
   14880:	cmp	r4, #0
   14884:	bne	148f4 <__assert_fail@plt+0x30c8>
   14888:	mov	r0, r4
   1488c:	pop	{r4, r5, r6, pc}
   14890:	tst	r3, #4
   14894:	bne	14838 <__assert_fail@plt+0x300c>
   14898:	ldr	r0, [r5, #28]
   1489c:	bl	11760 <fchdir@plt>
   148a0:	cmp	r0, #0
   148a4:	beq	148ec <__assert_fail@plt+0x30c0>
   148a8:	bl	11688 <__errno_location@plt>
   148ac:	ldr	r4, [r0]
   148b0:	ldr	r0, [r5, #28]
   148b4:	bl	117e4 <close@plt>
   148b8:	clz	r3, r4
   148bc:	lsr	r3, r3, #5
   148c0:	cmp	r0, #0
   148c4:	moveq	r3, #0
   148c8:	cmp	r3, #0
   148cc:	beq	1483c <__assert_fail@plt+0x3010>
   148d0:	bl	11688 <__errno_location@plt>
   148d4:	ldr	r4, [r0]
   148d8:	b	1483c <__assert_fail@plt+0x3010>
   148dc:	bl	12fdc <__assert_fail@plt+0x17b0>
   148e0:	b	14878 <__assert_fail@plt+0x304c>
   148e4:	mov	r4, r3
   148e8:	b	147ec <__assert_fail@plt+0x2fc0>
   148ec:	ldr	r0, [r5, #28]
   148f0:	b	1482c <__assert_fail@plt+0x3000>
   148f4:	bl	11688 <__errno_location@plt>
   148f8:	str	r4, [r0]
   148fc:	mvn	r4, #0
   14900:	b	14888 <__assert_fail@plt+0x305c>
   14904:	andeq	r0, r0, r2, lsl #2
   14908:	push	{r4, r5, r6, r7, r8, lr}
   1490c:	ldr	r5, [r0]
   14910:	cmp	r5, #0
   14914:	beq	14a48 <__assert_fail@plt+0x321c>
   14918:	ldr	r1, [r0, #48]	; 0x30
   1491c:	ands	r3, r1, #8192	; 0x2000
   14920:	bne	14a48 <__assert_fail@plt+0x321c>
   14924:	ldrh	r2, [r5, #60]	; 0x3c
   14928:	mov	r8, r0
   1492c:	mov	r0, #3
   14930:	cmp	r2, #1
   14934:	strh	r0, [r5, #60]	; 0x3c
   14938:	beq	14cb4 <__assert_fail@plt+0x3488>
   1493c:	cmp	r2, #2
   14940:	ldrh	r3, [r5, #56]	; 0x38
   14944:	beq	14a54 <__assert_fail@plt+0x3228>
   14948:	cmp	r3, #1
   1494c:	bne	14984 <__assert_fail@plt+0x3158>
   14950:	cmp	r2, #4
   14954:	bne	14a68 <__assert_fail@plt+0x323c>
   14958:	b	14a84 <__assert_fail@plt+0x3258>
   1495c:	mov	r0, r5
   14960:	str	r4, [r8]
   14964:	bl	12fdc <__assert_fail@plt+0x17b0>
   14968:	ldr	r5, [r4, #48]	; 0x30
   1496c:	cmp	r5, #0
   14970:	beq	14acc <__assert_fail@plt+0x32a0>
   14974:	ldrh	r3, [r4, #60]	; 0x3c
   14978:	mov	r5, r4
   1497c:	cmp	r3, #4
   14980:	bne	14bc8 <__assert_fail@plt+0x339c>
   14984:	ldr	r4, [r5, #8]
   14988:	cmp	r4, #0
   1498c:	bne	1495c <__assert_fail@plt+0x3130>
   14990:	ldr	r4, [r5, #4]
   14994:	ldr	r3, [r4, #12]
   14998:	cmp	r3, #0
   1499c:	bne	14e44 <__assert_fail@plt+0x3618>
   149a0:	str	r4, [r8]
   149a4:	mov	r0, r5
   149a8:	bl	12fdc <__assert_fail@plt+0x17b0>
   149ac:	ldr	r3, [r4, #48]	; 0x30
   149b0:	cmn	r3, #1
   149b4:	beq	14d80 <__assert_fail@plt+0x3554>
   149b8:	ldrh	r3, [r4, #56]	; 0x38
   149bc:	cmp	r3, #11
   149c0:	beq	14c3c <__assert_fail@plt+0x3410>
   149c4:	ldr	r3, [r4, #40]	; 0x28
   149c8:	ldr	r2, [r8, #24]
   149cc:	mov	r1, #0
   149d0:	strb	r1, [r2, r3]
   149d4:	ldr	r3, [r4, #48]	; 0x30
   149d8:	cmp	r3, r1
   149dc:	beq	14d0c <__assert_fail@plt+0x34e0>
   149e0:	ldrh	r3, [r4, #58]	; 0x3a
   149e4:	tst	r3, #2
   149e8:	beq	14ccc <__assert_fail@plt+0x34a0>
   149ec:	ldr	r3, [r8, #48]	; 0x30
   149f0:	tst	r3, #4
   149f4:	beq	14d30 <__assert_fail@plt+0x3504>
   149f8:	ldr	r0, [r4, #36]	; 0x24
   149fc:	bl	117e4 <close@plt>
   14a00:	ldr	r3, [r8, #48]	; 0x30
   14a04:	ldrh	r2, [r4, #56]	; 0x38
   14a08:	cmp	r2, #2
   14a0c:	beq	14a40 <__assert_fail@plt+0x3214>
   14a10:	ldr	r2, [r4, #32]
   14a14:	cmp	r2, #0
   14a18:	movne	r2, #7
   14a1c:	strhne	r2, [r4, #56]	; 0x38
   14a20:	bne	14a40 <__assert_fail@plt+0x3214>
   14a24:	mov	r2, #6
   14a28:	mov	r0, r3
   14a2c:	strh	r2, [r4, #56]	; 0x38
   14a30:	add	r1, r8, #56	; 0x38
   14a34:	mov	r2, r4
   14a38:	bl	139b8 <__assert_fail@plt+0x218c>
   14a3c:	ldr	r3, [r8, #48]	; 0x30
   14a40:	tst	r3, #8192	; 0x2000
   14a44:	beq	14ac4 <__assert_fail@plt+0x3298>
   14a48:	mov	r4, #0
   14a4c:	mov	r0, r4
   14a50:	pop	{r4, r5, r6, r7, r8, pc}
   14a54:	sub	r2, r3, #12
   14a58:	cmp	r2, #1
   14a5c:	bls	14d4c <__assert_fail@plt+0x3520>
   14a60:	cmp	r3, #1
   14a64:	bne	14984 <__assert_fail@plt+0x3158>
   14a68:	tst	r1, #64	; 0x40
   14a6c:	beq	14c40 <__assert_fail@plt+0x3414>
   14a70:	ldrd	r6, [r5, #64]	; 0x40
   14a74:	ldrd	r2, [r8, #16]
   14a78:	cmp	r7, r3
   14a7c:	cmpeq	r6, r2
   14a80:	beq	14c40 <__assert_fail@plt+0x3414>
   14a84:	ldrh	r3, [r5, #58]	; 0x3a
   14a88:	tst	r3, #2
   14a8c:	bne	14e38 <__assert_fail@plt+0x360c>
   14a90:	ldr	r0, [r8, #4]
   14a94:	cmp	r0, #0
   14a98:	beq	14aa8 <__assert_fail@plt+0x327c>
   14a9c:	bl	13258 <__assert_fail@plt+0x1a2c>
   14aa0:	mov	r3, #0
   14aa4:	str	r3, [r8, #4]
   14aa8:	mov	r3, #6
   14aac:	strh	r3, [r5, #56]	; 0x38
   14ab0:	mov	r2, r5
   14ab4:	add	r1, r8, #56	; 0x38
   14ab8:	ldr	r0, [r8, #48]	; 0x30
   14abc:	mov	r4, r5
   14ac0:	bl	139b8 <__assert_fail@plt+0x218c>
   14ac4:	mov	r0, r4
   14ac8:	pop	{r4, r5, r6, r7, r8, pc}
   14acc:	mov	r0, r8
   14ad0:	bl	13454 <__assert_fail@plt+0x1c28>
   14ad4:	cmp	r0, #0
   14ad8:	bne	14e24 <__assert_fail@plt+0x35f8>
   14adc:	ldr	r2, [r8, #48]	; 0x30
   14ae0:	ldr	r3, [pc, #1228]	; 14fb4 <__assert_fail@plt+0x3788>
   14ae4:	ldr	r0, [r8, #56]	; 0x38
   14ae8:	and	r3, r3, r2
   14aec:	cmp	r3, #0
   14af0:	beq	14da0 <__assert_fail@plt+0x3574>
   14af4:	cmp	r0, #0
   14af8:	beq	14b00 <__assert_fail@plt+0x32d4>
   14afc:	bl	15bd4 <__assert_fail@plt+0x43a8>
   14b00:	ldr	r2, [r4, #52]	; 0x34
   14b04:	add	r6, r4, #168	; 0xa8
   14b08:	str	r2, [r4, #40]	; 0x28
   14b0c:	mov	r1, r6
   14b10:	add	r2, r2, #1
   14b14:	ldr	r0, [r8, #24]
   14b18:	bl	11484 <memmove@plt>
   14b1c:	mov	r0, r6
   14b20:	mov	r1, #47	; 0x2f
   14b24:	bl	11718 <strrchr@plt>
   14b28:	cmp	r0, #0
   14b2c:	beq	14b5c <__assert_fail@plt+0x3330>
   14b30:	cmp	r6, r0
   14b34:	beq	14e14 <__assert_fail@plt+0x35e8>
   14b38:	add	r5, r0, #1
   14b3c:	mov	r0, r5
   14b40:	bl	11658 <strlen@plt>
   14b44:	mov	r1, r5
   14b48:	mov	r7, r0
   14b4c:	add	r2, r7, #1
   14b50:	mov	r0, r6
   14b54:	bl	11484 <memmove@plt>
   14b58:	str	r7, [r4, #52]	; 0x34
   14b5c:	ldr	r3, [r8, #24]
   14b60:	add	r1, r8, #56	; 0x38
   14b64:	str	r3, [r4, #28]
   14b68:	str	r3, [r4, #24]
   14b6c:	ldr	r0, [r8, #48]	; 0x30
   14b70:	bl	13670 <__assert_fail@plt+0x1e44>
   14b74:	ldrh	r3, [r4, #56]	; 0x38
   14b78:	cmp	r3, #11
   14b7c:	str	r4, [r8]
   14b80:	beq	14c20 <__assert_fail@plt+0x33f4>
   14b84:	cmp	r3, #1
   14b88:	bne	14ac4 <__assert_fail@plt+0x3298>
   14b8c:	ldr	r3, [r4, #48]	; 0x30
   14b90:	cmp	r3, #0
   14b94:	ldrdeq	r2, [r4, #64]	; 0x40
   14b98:	strdeq	r2, [r8, #16]
   14b9c:	mov	r2, r4
   14ba0:	add	r1, r8, #56	; 0x38
   14ba4:	ldr	r0, [r8, #48]	; 0x30
   14ba8:	bl	13908 <__assert_fail@plt+0x20dc>
   14bac:	subs	r5, r0, #0
   14bb0:	bne	14ac4 <__assert_fail@plt+0x3298>
   14bb4:	bl	11688 <__errno_location@plt>
   14bb8:	mov	r3, #12
   14bbc:	mov	r4, r5
   14bc0:	str	r3, [r0]
   14bc4:	b	14ac4 <__assert_fail@plt+0x3298>
   14bc8:	cmp	r3, #2
   14bcc:	beq	14e78 <__assert_fail@plt+0x364c>
   14bd0:	ldr	r3, [r4, #4]
   14bd4:	mov	ip, #47	; 0x2f
   14bd8:	ldr	r2, [r8, #24]
   14bdc:	ldr	r0, [r3, #40]	; 0x28
   14be0:	ldr	lr, [r3, #28]
   14be4:	sub	r3, r0, #1
   14be8:	add	r1, r4, #168	; 0xa8
   14bec:	ldrb	lr, [lr, r3]
   14bf0:	cmp	lr, ip
   14bf4:	movne	r3, r0
   14bf8:	add	r0, r2, r3
   14bfc:	strb	ip, [r2, r3]
   14c00:	ldr	r2, [r4, #52]	; 0x34
   14c04:	add	r0, r0, #1
   14c08:	add	r2, r2, #1
   14c0c:	bl	11484 <memmove@plt>
   14c10:	ldrh	r3, [r4, #56]	; 0x38
   14c14:	str	r4, [r8]
   14c18:	cmp	r3, #11
   14c1c:	bne	14b84 <__assert_fail@plt+0x3358>
   14c20:	ldrd	r2, [r4, #112]	; 0x70
   14c24:	cmp	r3, #0
   14c28:	cmpeq	r2, #2
   14c2c:	beq	14ea4 <__assert_fail@plt+0x3678>
   14c30:	cmp	r3, #0
   14c34:	cmpeq	r2, #1
   14c38:	beq	14ac4 <__assert_fail@plt+0x3298>
   14c3c:	bl	117d8 <abort@plt>
   14c40:	ldr	r0, [r8, #4]
   14c44:	cmp	r0, #0
   14c48:	beq	14dbc <__assert_fail@plt+0x3590>
   14c4c:	tst	r1, #4096	; 0x1000
   14c50:	bne	14da8 <__assert_fail@plt+0x357c>
   14c54:	ldr	r3, [r5, #24]
   14c58:	mvn	r2, #0
   14c5c:	mov	r1, r5
   14c60:	mov	r0, r8
   14c64:	bl	1372c <__assert_fail@plt+0x1f00>
   14c68:	cmp	r0, #0
   14c6c:	beq	14d20 <__assert_fail@plt+0x34f4>
   14c70:	bl	11688 <__errno_location@plt>
   14c74:	ldrh	r3, [r5, #58]	; 0x3a
   14c78:	ldr	r4, [r8, #4]
   14c7c:	orr	r3, r3, #1
   14c80:	cmp	r4, #0
   14c84:	ldr	r2, [r0]
   14c88:	strh	r3, [r5, #58]	; 0x3a
   14c8c:	str	r2, [r5, #32]
   14c90:	beq	14d24 <__assert_fail@plt+0x34f8>
   14c94:	mov	r3, r4
   14c98:	ldr	r2, [r3, #4]
   14c9c:	ldr	r2, [r2, #24]
   14ca0:	str	r2, [r3, #24]
   14ca4:	ldr	r3, [r3, #8]
   14ca8:	cmp	r3, #0
   14cac:	bne	14c98 <__assert_fail@plt+0x346c>
   14cb0:	b	14d24 <__assert_fail@plt+0x34f8>
   14cb4:	ldr	r0, [r8, #32]
   14cb8:	mov	r2, r5
   14cbc:	bl	134a4 <__assert_fail@plt+0x1c78>
   14cc0:	mov	r4, r5
   14cc4:	strh	r0, [r5, #56]	; 0x38
   14cc8:	b	14ac4 <__assert_fail@plt+0x3298>
   14ccc:	tst	r3, #1
   14cd0:	bne	14a00 <__assert_fail@plt+0x31d4>
   14cd4:	ldr	r3, [pc, #732]	; 14fb8 <__assert_fail@plt+0x378c>
   14cd8:	mvn	r2, #0
   14cdc:	ldr	r1, [r4, #4]
   14ce0:	mov	r0, r8
   14ce4:	bl	1372c <__assert_fail@plt+0x1f00>
   14ce8:	cmp	r0, #0
   14cec:	beq	14a00 <__assert_fail@plt+0x31d4>
   14cf0:	bl	11688 <__errno_location@plt>
   14cf4:	ldr	r3, [r8, #48]	; 0x30
   14cf8:	orr	r3, r3, #8192	; 0x2000
   14cfc:	ldr	r2, [r0]
   14d00:	str	r2, [r4, #32]
   14d04:	str	r3, [r8, #48]	; 0x30
   14d08:	b	14a04 <__assert_fail@plt+0x31d8>
   14d0c:	mov	r0, r8
   14d10:	bl	13454 <__assert_fail@plt+0x1c28>
   14d14:	cmp	r0, #0
   14d18:	bne	14cf0 <__assert_fail@plt+0x34c4>
   14d1c:	b	14a00 <__assert_fail@plt+0x31d4>
   14d20:	ldr	r4, [r8, #4]
   14d24:	mov	r3, #0
   14d28:	str	r3, [r8, #4]
   14d2c:	b	14bd0 <__assert_fail@plt+0x33a4>
   14d30:	tst	r3, #512	; 0x200
   14d34:	beq	14ec4 <__assert_fail@plt+0x3698>
   14d38:	mov	r2, #1
   14d3c:	ldr	r1, [r4, #36]	; 0x24
   14d40:	mov	r0, r8
   14d44:	bl	133d4 <__assert_fail@plt+0x1ba8>
   14d48:	b	149f8 <__assert_fail@plt+0x31cc>
   14d4c:	mov	r3, #1
   14d50:	mov	r2, r5
   14d54:	ldr	r0, [r8, #32]
   14d58:	bl	134a4 <__assert_fail@plt+0x1c78>
   14d5c:	cmp	r0, #1
   14d60:	mov	r3, r0
   14d64:	strh	r0, [r5, #56]	; 0x38
   14d68:	beq	14f04 <__assert_fail@plt+0x36d8>
   14d6c:	cmp	r0, #11
   14d70:	mov	r4, r5
   14d74:	str	r5, [r8]
   14d78:	bne	14ac4 <__assert_fail@plt+0x3298>
   14d7c:	b	14c20 <__assert_fail@plt+0x33f4>
   14d80:	mov	r0, r4
   14d84:	bl	12fdc <__assert_fail@plt+0x17b0>
   14d88:	bl	11688 <__errno_location@plt>
   14d8c:	mov	r3, #0
   14d90:	mov	r4, r3
   14d94:	str	r3, [r0]
   14d98:	str	r3, [r8]
   14d9c:	b	14ac4 <__assert_fail@plt+0x3298>
   14da0:	bl	12fdc <__assert_fail@plt+0x17b0>
   14da4:	b	14b00 <__assert_fail@plt+0x32d4>
   14da8:	bic	r1, r1, #4096	; 0x1000
   14dac:	str	r1, [r8, #48]	; 0x30
   14db0:	bl	13258 <__assert_fail@plt+0x1a2c>
   14db4:	mov	r3, #0
   14db8:	str	r3, [r8, #4]
   14dbc:	mov	r1, #3
   14dc0:	mov	r0, r8
   14dc4:	bl	13a70 <__assert_fail@plt+0x2244>
   14dc8:	cmp	r0, #0
   14dcc:	mov	r4, r0
   14dd0:	str	r0, [r8, #4]
   14dd4:	bne	14d24 <__assert_fail@plt+0x34f8>
   14dd8:	ldr	r0, [r8, #48]	; 0x30
   14ddc:	tst	r0, #8192	; 0x2000
   14de0:	bne	14a48 <__assert_fail@plt+0x321c>
   14de4:	ldr	r3, [r5, #32]
   14de8:	cmp	r3, #0
   14dec:	beq	14e00 <__assert_fail@plt+0x35d4>
   14df0:	ldrh	r3, [r5, #56]	; 0x38
   14df4:	cmp	r3, #4
   14df8:	movne	r3, #7
   14dfc:	strhne	r3, [r5, #56]	; 0x38
   14e00:	add	r1, r8, #56	; 0x38
   14e04:	mov	r2, r5
   14e08:	bl	139b8 <__assert_fail@plt+0x218c>
   14e0c:	mov	r4, r5
   14e10:	b	14ac4 <__assert_fail@plt+0x3298>
   14e14:	ldrb	r3, [r4, #169]	; 0xa9
   14e18:	cmp	r3, #0
   14e1c:	bne	14b38 <__assert_fail@plt+0x330c>
   14e20:	b	14b5c <__assert_fail@plt+0x3330>
   14e24:	ldr	r3, [r8, #48]	; 0x30
   14e28:	mov	r4, r5
   14e2c:	orr	r3, r3, #8192	; 0x2000
   14e30:	str	r3, [r8, #48]	; 0x30
   14e34:	b	14ac4 <__assert_fail@plt+0x3298>
   14e38:	ldr	r0, [r5, #36]	; 0x24
   14e3c:	bl	117e4 <close@plt>
   14e40:	b	14a90 <__assert_fail@plt+0x3264>
   14e44:	ldr	r3, [r4, #40]	; 0x28
   14e48:	ldr	r2, [r8, #24]
   14e4c:	mov	r0, #0
   14e50:	str	r4, [r8]
   14e54:	mov	r1, #3
   14e58:	strb	r0, [r2, r3]
   14e5c:	mov	r0, r8
   14e60:	bl	13a70 <__assert_fail@plt+0x2244>
   14e64:	subs	r4, r0, #0
   14e68:	beq	14ef0 <__assert_fail@plt+0x36c4>
   14e6c:	mov	r0, r5
   14e70:	bl	12fdc <__assert_fail@plt+0x17b0>
   14e74:	b	14bd0 <__assert_fail@plt+0x33a4>
   14e78:	mov	r3, #1
   14e7c:	mov	r2, r4
   14e80:	ldr	r1, [r8, #48]	; 0x30
   14e84:	ldr	r0, [r8, #32]
   14e88:	bl	134a4 <__assert_fail@plt+0x1c78>
   14e8c:	cmp	r0, #1
   14e90:	strh	r0, [r4, #56]	; 0x38
   14e94:	beq	14f1c <__assert_fail@plt+0x36f0>
   14e98:	mov	r3, #3
   14e9c:	strh	r3, [r4, #60]	; 0x3c
   14ea0:	b	14bd0 <__assert_fail@plt+0x33a4>
   14ea4:	mov	r3, #0
   14ea8:	mov	r2, r4
   14eac:	ldr	r1, [r8, #48]	; 0x30
   14eb0:	ldr	r0, [r8, #32]
   14eb4:	bl	134a4 <__assert_fail@plt+0x1c78>
   14eb8:	mov	r3, r0
   14ebc:	strh	r0, [r4, #56]	; 0x38
   14ec0:	b	14b84 <__assert_fail@plt+0x3358>
   14ec4:	ldr	r0, [r4, #36]	; 0x24
   14ec8:	bl	11760 <fchdir@plt>
   14ecc:	cmp	r0, #0
   14ed0:	beq	149f8 <__assert_fail@plt+0x31cc>
   14ed4:	bl	11688 <__errno_location@plt>
   14ed8:	ldr	r3, [r8, #48]	; 0x30
   14edc:	orr	r3, r3, #8192	; 0x2000
   14ee0:	ldr	r2, [r0]
   14ee4:	str	r2, [r4, #32]
   14ee8:	str	r3, [r8, #48]	; 0x30
   14eec:	b	149f8 <__assert_fail@plt+0x31cc>
   14ef0:	ldr	r3, [r8, #48]	; 0x30
   14ef4:	tst	r3, #8192	; 0x2000
   14ef8:	bne	14a48 <__assert_fail@plt+0x321c>
   14efc:	ldr	r4, [r5, #4]
   14f00:	b	149a0 <__assert_fail@plt+0x3174>
   14f04:	ldr	r1, [r8, #48]	; 0x30
   14f08:	tst	r1, #4
   14f0c:	beq	14f50 <__assert_fail@plt+0x3724>
   14f10:	str	r5, [r8]
   14f14:	mov	r4, r5
   14f18:	b	14b84 <__assert_fail@plt+0x3358>
   14f1c:	ldr	r1, [r8, #48]	; 0x30
   14f20:	tst	r1, #4
   14f24:	bne	14e98 <__assert_fail@plt+0x366c>
   14f28:	ldr	r2, [pc, #140]	; 14fbc <__assert_fail@plt+0x3790>
   14f2c:	ldr	r0, [r8, #32]
   14f30:	bl	136f0 <__assert_fail@plt+0x1ec4>
   14f34:	cmp	r0, #0
   14f38:	str	r0, [r4, #36]	; 0x24
   14f3c:	blt	14f80 <__assert_fail@plt+0x3754>
   14f40:	ldrh	r3, [r4, #58]	; 0x3a
   14f44:	orr	r3, r3, #2
   14f48:	strh	r3, [r4, #58]	; 0x3a
   14f4c:	b	14e98 <__assert_fail@plt+0x366c>
   14f50:	ldr	r2, [pc, #100]	; 14fbc <__assert_fail@plt+0x3790>
   14f54:	ldr	r0, [r8, #32]
   14f58:	bl	136f0 <__assert_fail@plt+0x1ec4>
   14f5c:	cmp	r0, #0
   14f60:	str	r0, [r5, #36]	; 0x24
   14f64:	blt	14f98 <__assert_fail@plt+0x376c>
   14f68:	ldrh	r2, [r5, #58]	; 0x3a
   14f6c:	ldrh	r3, [r5, #56]	; 0x38
   14f70:	mov	r4, r5
   14f74:	orr	r2, r2, #2
   14f78:	strh	r2, [r5, #58]	; 0x3a
   14f7c:	b	14b78 <__assert_fail@plt+0x334c>
   14f80:	bl	11688 <__errno_location@plt>
   14f84:	mov	r2, #7
   14f88:	ldr	r3, [r0]
   14f8c:	strh	r2, [r4, #56]	; 0x38
   14f90:	str	r3, [r4, #32]
   14f94:	b	14e98 <__assert_fail@plt+0x366c>
   14f98:	bl	11688 <__errno_location@plt>
   14f9c:	mov	r2, #7
   14fa0:	mov	r3, r2
   14fa4:	ldr	r1, [r0]
   14fa8:	strh	r2, [r5, #56]	; 0x38
   14fac:	str	r1, [r5, #32]
   14fb0:	b	14f10 <__assert_fail@plt+0x36e4>
   14fb4:	andeq	r0, r0, r2, lsl #2
   14fb8:	andeq	sl, r1, r4, asr #20
   14fbc:	strdeq	sl, [r1], -r8
   14fc0:	cmp	r2, #4
   14fc4:	bhi	14fd8 <__assert_fail@plt+0x37ac>
   14fc8:	mov	r3, #0
   14fcc:	strh	r2, [r1, #60]	; 0x3c
   14fd0:	mov	r0, r3
   14fd4:	bx	lr
   14fd8:	push	{r4, lr}
   14fdc:	bl	11688 <__errno_location@plt>
   14fe0:	mov	r2, #22
   14fe4:	mov	r3, #1
   14fe8:	str	r2, [r0]
   14fec:	mov	r0, r3
   14ff0:	pop	{r4, pc}
   14ff4:	push	{r4, r5, r6, r7, r8, lr}
   14ff8:	bics	r8, r1, #4096	; 0x1000
   14ffc:	bne	150fc <__assert_fail@plt+0x38d0>
   15000:	mov	r5, r0
   15004:	mov	r4, r1
   15008:	bl	11688 <__errno_location@plt>
   1500c:	ldr	r6, [r5]
   15010:	str	r8, [r0]
   15014:	ldr	r3, [r5, #48]	; 0x30
   15018:	mov	r7, r0
   1501c:	ands	r3, r3, #8192	; 0x2000
   15020:	bne	15114 <__assert_fail@plt+0x38e8>
   15024:	ldrh	r2, [r6, #56]	; 0x38
   15028:	cmp	r2, #9
   1502c:	ldreq	r3, [r6, #8]
   15030:	beq	150a0 <__assert_fail@plt+0x3874>
   15034:	cmp	r2, #1
   15038:	bne	150a0 <__assert_fail@plt+0x3874>
   1503c:	ldr	r0, [r5, #4]
   15040:	cmp	r0, #0
   15044:	beq	1504c <__assert_fail@plt+0x3820>
   15048:	bl	13258 <__assert_fail@plt+0x1a2c>
   1504c:	cmp	r4, #4096	; 0x1000
   15050:	moveq	r8, #2
   15054:	ldreq	r3, [r5, #48]	; 0x30
   15058:	movne	r8, #1
   1505c:	orreq	r3, r3, #4096	; 0x1000
   15060:	streq	r3, [r5, #48]	; 0x30
   15064:	ldr	r3, [r6, #48]	; 0x30
   15068:	cmp	r3, #0
   1506c:	bne	1508c <__assert_fail@plt+0x3860>
   15070:	ldr	r3, [r6, #24]
   15074:	ldrb	r3, [r3]
   15078:	cmp	r3, #47	; 0x2f
   1507c:	beq	1508c <__assert_fail@plt+0x3860>
   15080:	ldr	r1, [r5, #48]	; 0x30
   15084:	ands	r4, r1, #4
   15088:	beq	150a8 <__assert_fail@plt+0x387c>
   1508c:	mov	r1, r8
   15090:	mov	r0, r5
   15094:	bl	13a70 <__assert_fail@plt+0x2244>
   15098:	mov	r3, r0
   1509c:	str	r0, [r5, #4]
   150a0:	mov	r0, r3
   150a4:	pop	{r4, r5, r6, r7, r8, pc}
   150a8:	ldr	r2, [pc, #160]	; 15150 <__assert_fail@plt+0x3924>
   150ac:	ldr	r0, [r5, #32]
   150b0:	bl	136f0 <__assert_fail@plt+0x1ec4>
   150b4:	subs	r6, r0, #0
   150b8:	strlt	r4, [r5, #4]
   150bc:	movlt	r3, r4
   150c0:	blt	150a0 <__assert_fail@plt+0x3874>
   150c4:	mov	r1, r8
   150c8:	mov	r0, r5
   150cc:	bl	13a70 <__assert_fail@plt+0x2244>
   150d0:	ldr	r3, [r5, #48]	; 0x30
   150d4:	ands	r4, r3, #512	; 0x200
   150d8:	str	r0, [r5, #4]
   150dc:	beq	1511c <__assert_fail@plt+0x38f0>
   150e0:	mov	r1, r6
   150e4:	mov	r2, #1
   150e8:	mov	r0, r5
   150ec:	bl	133d4 <__assert_fail@plt+0x1ba8>
   150f0:	ldr	r3, [r5, #4]
   150f4:	mov	r0, r3
   150f8:	pop	{r4, r5, r6, r7, r8, pc}
   150fc:	bl	11688 <__errno_location@plt>
   15100:	mov	r2, #22
   15104:	mov	r3, #0
   15108:	str	r2, [r0]
   1510c:	mov	r0, r3
   15110:	pop	{r4, r5, r6, r7, r8, pc}
   15114:	mov	r3, r8
   15118:	b	150a0 <__assert_fail@plt+0x3874>
   1511c:	mov	r0, r6
   15120:	bl	11760 <fchdir@plt>
   15124:	cmp	r0, #0
   15128:	bne	15138 <__assert_fail@plt+0x390c>
   1512c:	mov	r0, r6
   15130:	bl	117e4 <close@plt>
   15134:	b	150f0 <__assert_fail@plt+0x38c4>
   15138:	ldr	r5, [r7]
   1513c:	mov	r0, r6
   15140:	bl	117e4 <close@plt>
   15144:	str	r5, [r7]
   15148:	mov	r3, r4
   1514c:	b	150a0 <__assert_fail@plt+0x3874>
   15150:	strdeq	sl, [r1], -r8
   15154:	andeq	r0, r0, r0
   15158:	cmp	r0, #10
   1515c:	movcc	r0, #10
   15160:	push	{r4, r5, r6, r7, r8, lr}
   15164:	orr	r7, r0, #1
   15168:	cmn	r7, #1
   1516c:	ldrne	r8, [pc, #132]	; 151f8 <__assert_fail@plt+0x39cc>
   15170:	beq	151e8 <__assert_fail@plt+0x39bc>
   15174:	cmp	r7, #9
   15178:	bls	151f0 <__assert_fail@plt+0x39c4>
   1517c:	umull	r2, r3, r8, r7
   15180:	lsr	r3, r3, #1
   15184:	add	r3, r3, r3, lsl #1
   15188:	cmp	r7, r3
   1518c:	beq	151dc <__assert_fail@plt+0x39b0>
   15190:	mov	r6, #16
   15194:	mov	r5, #9
   15198:	mov	r4, #3
   1519c:	b	151b0 <__assert_fail@plt+0x3984>
   151a0:	bl	19ffc <lchmod@@Base+0x3d8c>
   151a4:	add	r6, r6, #8
   151a8:	cmp	r1, #0
   151ac:	beq	151dc <__assert_fail@plt+0x39b0>
   151b0:	add	r5, r5, r6
   151b4:	add	r4, r4, #2
   151b8:	cmp	r5, r7
   151bc:	mov	r0, r7
   151c0:	mov	r1, r4
   151c4:	bcc	151a0 <__assert_fail@plt+0x3974>
   151c8:	mov	r1, r4
   151cc:	mov	r0, r7
   151d0:	bl	19ffc <lchmod@@Base+0x3d8c>
   151d4:	cmp	r1, #0
   151d8:	bne	151e8 <__assert_fail@plt+0x39bc>
   151dc:	add	r7, r7, #2
   151e0:	cmn	r7, #1
   151e4:	bne	15174 <__assert_fail@plt+0x3948>
   151e8:	mov	r0, r7
   151ec:	pop	{r4, r5, r6, r7, r8, pc}
   151f0:	mov	r4, #3
   151f4:	b	151c8 <__assert_fail@plt+0x399c>
   151f8:	bge	feabfcac <optarg@@GLIBC_2.4+0xfea93acc>
   151fc:	push	{r4, lr}
   15200:	ror	r0, r0, #3
   15204:	bl	19ffc <lchmod@@Base+0x3d8c>
   15208:	mov	r0, r1
   1520c:	pop	{r4, pc}
   15210:	sub	r0, r1, r0
   15214:	clz	r0, r0
   15218:	lsr	r0, r0, #5
   1521c:	bx	lr
   15220:	push	{r4, lr}
   15224:	mov	r4, r0
   15228:	mov	r0, r1
   1522c:	ldr	r3, [r4, #24]
   15230:	ldr	r1, [r4, #8]
   15234:	blx	r3
   15238:	ldr	r3, [r4, #8]
   1523c:	cmp	r0, r3
   15240:	bcs	15250 <__assert_fail@plt+0x3a24>
   15244:	ldr	r3, [r4]
   15248:	add	r0, r3, r0, lsl #3
   1524c:	pop	{r4, pc}
   15250:	bl	117d8 <abort@plt>
   15254:	push	{r4, r5, r6, r7, r8, lr}
   15258:	mov	r7, r2
   1525c:	mov	r8, r3
   15260:	mov	r6, r0
   15264:	mov	r5, r1
   15268:	bl	15220 <__assert_fail@plt+0x39f4>
   1526c:	str	r0, [r7]
   15270:	ldr	r3, [r0]
   15274:	cmp	r3, #0
   15278:	beq	15310 <__assert_fail@plt+0x3ae4>
   1527c:	cmp	r5, r3
   15280:	mov	r4, r0
   15284:	beq	152a4 <__assert_fail@plt+0x3a78>
   15288:	mov	r1, r3
   1528c:	mov	r0, r5
   15290:	ldr	r3, [r6, #28]
   15294:	blx	r3
   15298:	cmp	r0, #0
   1529c:	beq	15304 <__assert_fail@plt+0x3ad8>
   152a0:	ldr	r3, [r4]
   152a4:	cmp	r8, #0
   152a8:	beq	152d4 <__assert_fail@plt+0x3aa8>
   152ac:	ldr	r2, [r4, #4]
   152b0:	cmp	r2, #0
   152b4:	movne	ip, #0
   152b8:	ldmne	r2, {r0, r1}
   152bc:	streq	r2, [r4]
   152c0:	stmne	r4, {r0, r1}
   152c4:	strne	ip, [r2]
   152c8:	ldrne	r1, [r6, #36]	; 0x24
   152cc:	strne	r1, [r2, #4]
   152d0:	strne	r2, [r6, #36]	; 0x24
   152d4:	mov	r0, r3
   152d8:	pop	{r4, r5, r6, r7, r8, pc}
   152dc:	ldr	r3, [r2]
   152e0:	cmp	r5, r3
   152e4:	beq	15324 <__assert_fail@plt+0x3af8>
   152e8:	mov	r1, r3
   152ec:	mov	r0, r5
   152f0:	ldr	r3, [r6, #28]
   152f4:	blx	r3
   152f8:	cmp	r0, #0
   152fc:	bne	1531c <__assert_fail@plt+0x3af0>
   15300:	ldr	r4, [r4, #4]
   15304:	ldr	r2, [r4, #4]
   15308:	cmp	r2, #0
   1530c:	bne	152dc <__assert_fail@plt+0x3ab0>
   15310:	mov	r3, #0
   15314:	mov	r0, r3
   15318:	pop	{r4, r5, r6, r7, r8, pc}
   1531c:	ldr	r2, [r4, #4]
   15320:	ldr	r3, [r2]
   15324:	cmp	r8, #0
   15328:	beq	152d4 <__assert_fail@plt+0x3aa8>
   1532c:	ldr	r0, [r2, #4]
   15330:	mov	r1, #0
   15334:	str	r0, [r4, #4]
   15338:	str	r1, [r2]
   1533c:	ldr	r1, [r6, #36]	; 0x24
   15340:	mov	r0, r3
   15344:	str	r1, [r2, #4]
   15348:	str	r2, [r6, #36]	; 0x24
   1534c:	pop	{r4, r5, r6, r7, r8, pc}
   15350:	ldr	r2, [pc, #164]	; 153fc <__assert_fail@plt+0x3bd0>
   15354:	ldr	r3, [r0]
   15358:	cmp	r3, r2
   1535c:	beq	153e4 <__assert_fail@plt+0x3bb8>
   15360:	vldr	s15, [r3, #8]
   15364:	vldr	s14, [pc, #128]	; 153ec <__assert_fail@plt+0x3bc0>
   15368:	vcmpe.f32	s15, s14
   1536c:	vmrs	APSR_nzcv, fpscr
   15370:	ble	153d8 <__assert_fail@plt+0x3bac>
   15374:	vldr	s13, [pc, #116]	; 153f0 <__assert_fail@plt+0x3bc4>
   15378:	vcmpe.f32	s15, s13
   1537c:	vmrs	APSR_nzcv, fpscr
   15380:	bpl	153d8 <__assert_fail@plt+0x3bac>
   15384:	vldr	s13, [pc, #104]	; 153f4 <__assert_fail@plt+0x3bc8>
   15388:	vldr	s12, [r3, #12]
   1538c:	vcmpe.f32	s12, s13
   15390:	vmrs	APSR_nzcv, fpscr
   15394:	ble	153d8 <__assert_fail@plt+0x3bac>
   15398:	vldr	s13, [r3]
   1539c:	vcmpe.f32	s13, #0.0
   153a0:	vmrs	APSR_nzcv, fpscr
   153a4:	blt	153d8 <__assert_fail@plt+0x3bac>
   153a8:	vadd.f32	s14, s13, s14
   153ac:	vldr	s13, [r3, #4]
   153b0:	vcmpe.f32	s14, s13
   153b4:	vmrs	APSR_nzcv, fpscr
   153b8:	bpl	153d8 <__assert_fail@plt+0x3bac>
   153bc:	vldr	s12, [pc, #52]	; 153f8 <__assert_fail@plt+0x3bcc>
   153c0:	vcmpe.f32	s13, s12
   153c4:	vmrs	APSR_nzcv, fpscr
   153c8:	bhi	153d8 <__assert_fail@plt+0x3bac>
   153cc:	vcmpe.f32	s15, s14
   153d0:	vmrs	APSR_nzcv, fpscr
   153d4:	bgt	153e4 <__assert_fail@plt+0x3bb8>
   153d8:	str	r2, [r0]
   153dc:	mov	r0, #0
   153e0:	bx	lr
   153e4:	mov	r0, #1
   153e8:	bx	lr
   153ec:	stclcc	12, cr12, [ip, #820]	; 0x334
   153f0:	svccc	0x00666666
   153f4:	svccc	0x008ccccd
   153f8:	svccc	0x00800000
   153fc:	andeq	sl, r1, r8, asr #20
   15400:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15404:	ldm	r1, {r6, ip}
   15408:	cmp	r6, ip
   1540c:	bcs	154c8 <__assert_fail@plt+0x3c9c>
   15410:	mov	sl, r2
   15414:	mov	r5, r0
   15418:	mov	r8, r1
   1541c:	add	r6, r6, #8
   15420:	mov	r9, #0
   15424:	ldr	fp, [r6, #-8]
   15428:	mov	r7, r6
   1542c:	cmp	fp, #0
   15430:	beq	154bc <__assert_fail@plt+0x3c90>
   15434:	ldr	r4, [r6, #-4]
   15438:	cmp	r4, #0
   1543c:	bne	1545c <__assert_fail@plt+0x3c30>
   15440:	b	154ac <__assert_fail@plt+0x3c80>
   15444:	ldr	r3, [r0, #4]
   15448:	cmp	r2, #0
   1544c:	str	r3, [r4, #4]
   15450:	str	r4, [r0, #4]
   15454:	mov	r4, r2
   15458:	beq	154a8 <__assert_fail@plt+0x3c7c>
   1545c:	ldr	fp, [r4]
   15460:	mov	r0, r5
   15464:	mov	r1, fp
   15468:	bl	15220 <__assert_fail@plt+0x39f4>
   1546c:	ldr	r2, [r4, #4]
   15470:	ldr	r1, [r0]
   15474:	cmp	r1, #0
   15478:	bne	15444 <__assert_fail@plt+0x3c18>
   1547c:	ldr	ip, [r5, #12]
   15480:	str	fp, [r0]
   15484:	add	r3, ip, #1
   15488:	str	r3, [r5, #12]
   1548c:	str	r1, [r4]
   15490:	ldr	r3, [r5, #36]	; 0x24
   15494:	cmp	r2, #0
   15498:	str	r3, [r4, #4]
   1549c:	str	r4, [r5, #36]	; 0x24
   154a0:	mov	r4, r2
   154a4:	bne	1545c <__assert_fail@plt+0x3c30>
   154a8:	ldr	fp, [r6, #-8]
   154ac:	cmp	sl, #0
   154b0:	str	r9, [r6, #-4]
   154b4:	beq	154d0 <__assert_fail@plt+0x3ca4>
   154b8:	ldr	ip, [r8, #4]
   154bc:	cmp	ip, r7
   154c0:	add	r6, r6, #8
   154c4:	bhi	15424 <__assert_fail@plt+0x3bf8>
   154c8:	mov	r0, #1
   154cc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154d0:	mov	r1, fp
   154d4:	mov	r0, r5
   154d8:	bl	15220 <__assert_fail@plt+0x39f4>
   154dc:	ldr	r2, [r0]
   154e0:	mov	r4, r0
   154e4:	cmp	r2, #0
   154e8:	beq	15534 <__assert_fail@plt+0x3d08>
   154ec:	ldr	r0, [r5, #36]	; 0x24
   154f0:	cmp	r0, #0
   154f4:	beq	15548 <__assert_fail@plt+0x3d1c>
   154f8:	ldr	r2, [r0, #4]
   154fc:	str	r2, [r5, #36]	; 0x24
   15500:	ldr	r2, [r4, #4]
   15504:	str	fp, [r0]
   15508:	str	r2, [r0, #4]
   1550c:	str	r0, [r4, #4]
   15510:	str	r9, [r6, #-8]
   15514:	ldr	r3, [r8, #12]
   15518:	ldr	ip, [r8, #4]
   1551c:	sub	r3, r3, #1
   15520:	cmp	ip, r7
   15524:	str	r3, [r8, #12]
   15528:	add	r6, r6, #8
   1552c:	bhi	15424 <__assert_fail@plt+0x3bf8>
   15530:	b	154c8 <__assert_fail@plt+0x3c9c>
   15534:	ldr	r2, [r5, #12]
   15538:	str	fp, [r0]
   1553c:	add	r3, r2, #1
   15540:	str	r3, [r5, #12]
   15544:	b	15510 <__assert_fail@plt+0x3ce4>
   15548:	mov	r0, #8
   1554c:	bl	195b4 <lchmod@@Base+0x3344>
   15550:	cmp	r0, #0
   15554:	bne	15500 <__assert_fail@plt+0x3cd4>
   15558:	mov	r0, sl
   1555c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15560:	ldr	r0, [r0, #8]
   15564:	bx	lr
   15568:	ldr	r0, [r0, #12]
   1556c:	bx	lr
   15570:	ldr	r0, [r0, #16]
   15574:	bx	lr
   15578:	ldm	r0, {r1, ip}
   1557c:	mov	r0, #0
   15580:	cmp	r1, ip
   15584:	bcs	155cc <__assert_fail@plt+0x3da0>
   15588:	ldr	r3, [r1]
   1558c:	cmp	r3, #0
   15590:	beq	155bc <__assert_fail@plt+0x3d90>
   15594:	ldr	r3, [r1, #4]
   15598:	mov	r2, #1
   1559c:	cmp	r3, #0
   155a0:	beq	155b4 <__assert_fail@plt+0x3d88>
   155a4:	ldr	r3, [r3, #4]
   155a8:	add	r2, r2, #1
   155ac:	cmp	r3, #0
   155b0:	bne	155a4 <__assert_fail@plt+0x3d78>
   155b4:	cmp	r0, r2
   155b8:	movcc	r0, r2
   155bc:	add	r1, r1, #8
   155c0:	cmp	r1, ip
   155c4:	bcc	15588 <__assert_fail@plt+0x3d5c>
   155c8:	bx	lr
   155cc:	bx	lr
   155d0:	push	{lr}		; (str lr, [sp, #-4]!)
   155d4:	mov	r2, #0
   155d8:	ldm	r0, {r1, lr}
   155dc:	mov	ip, r2
   155e0:	cmp	r1, lr
   155e4:	bcs	15624 <__assert_fail@plt+0x3df8>
   155e8:	ldr	r3, [r1]
   155ec:	cmp	r3, #0
   155f0:	beq	15618 <__assert_fail@plt+0x3dec>
   155f4:	ldr	r3, [r1, #4]
   155f8:	add	ip, ip, #1
   155fc:	cmp	r3, #0
   15600:	add	r2, r2, #1
   15604:	beq	15618 <__assert_fail@plt+0x3dec>
   15608:	ldr	r3, [r3, #4]
   1560c:	add	r2, r2, #1
   15610:	cmp	r3, #0
   15614:	bne	15608 <__assert_fail@plt+0x3ddc>
   15618:	add	r1, r1, #8
   1561c:	cmp	r1, lr
   15620:	bcc	155e8 <__assert_fail@plt+0x3dbc>
   15624:	ldr	r3, [r0, #12]
   15628:	cmp	r3, ip
   1562c:	ldreq	r0, [r0, #16]
   15630:	subeq	r0, r0, r2
   15634:	clzeq	r0, r0
   15638:	lsreq	r0, r0, #5
   1563c:	movne	r0, #0
   15640:	pop	{pc}		; (ldr pc, [sp], #4)
   15644:	push	{r4, r5, r6, r7, lr}
   15648:	mov	r5, r1
   1564c:	ldm	r0, {ip, lr}
   15650:	sub	sp, sp, #12
   15654:	ldr	r3, [r0, #16]
   15658:	cmp	ip, lr
   1565c:	mov	r4, #0
   15660:	ldr	r6, [r0, #8]
   15664:	ldr	r7, [r0, #12]
   15668:	bcs	156ac <__assert_fail@plt+0x3e80>
   1566c:	ldr	r2, [ip]
   15670:	cmp	r2, #0
   15674:	beq	156a0 <__assert_fail@plt+0x3e74>
   15678:	ldr	r2, [ip, #4]
   1567c:	mov	r1, #1
   15680:	cmp	r2, #0
   15684:	beq	15698 <__assert_fail@plt+0x3e6c>
   15688:	ldr	r2, [r2, #4]
   1568c:	add	r1, r1, #1
   15690:	cmp	r2, #0
   15694:	bne	15688 <__assert_fail@plt+0x3e5c>
   15698:	cmp	r4, r1
   1569c:	movcc	r4, r1
   156a0:	add	ip, ip, #8
   156a4:	cmp	ip, lr
   156a8:	bcc	1566c <__assert_fail@plt+0x3e40>
   156ac:	ldr	r2, [pc, #116]	; 15728 <__assert_fail@plt+0x3efc>
   156b0:	mov	r1, #1
   156b4:	mov	r0, r5
   156b8:	bl	116d0 <__fprintf_chk@plt>
   156bc:	mov	r3, r6
   156c0:	ldr	r2, [pc, #100]	; 1572c <__assert_fail@plt+0x3f00>
   156c4:	mov	r1, #1
   156c8:	mov	r0, r5
   156cc:	bl	116d0 <__fprintf_chk@plt>
   156d0:	vmov	s15, r7
   156d4:	vldr	d5, [pc, #68]	; 15720 <__assert_fail@plt+0x3ef4>
   156d8:	mov	r3, r7
   156dc:	ldr	r2, [pc, #76]	; 15730 <__assert_fail@plt+0x3f04>
   156e0:	vcvt.f64.u32	d6, s15
   156e4:	vmov	s15, r6
   156e8:	mov	r1, #1
   156ec:	mov	r0, r5
   156f0:	vcvt.f64.u32	d7, s15
   156f4:	vmul.f64	d6, d6, d5
   156f8:	vdiv.f64	d5, d6, d7
   156fc:	vstr	d5, [sp]
   15700:	bl	116d0 <__fprintf_chk@plt>
   15704:	mov	r3, r4
   15708:	mov	r0, r5
   1570c:	ldr	r2, [pc, #32]	; 15734 <__assert_fail@plt+0x3f08>
   15710:	mov	r1, #1
   15714:	add	sp, sp, #12
   15718:	pop	{r4, r5, r6, r7, lr}
   1571c:	b	116d0 <__fprintf_chk@plt>
   15720:	andeq	r0, r0, r0
   15724:	subsmi	r0, r9, r0
   15728:	andeq	sl, r1, ip, asr sl
   1572c:	andeq	sl, r1, r4, ror sl
   15730:	andeq	sl, r1, ip, lsl #21
   15734:			; <UNDEFINED> instruction: 0x0001aab0
   15738:	push	{r4, r5, r6, lr}
   1573c:	mov	r6, r0
   15740:	mov	r5, r1
   15744:	bl	15220 <__assert_fail@plt+0x39f4>
   15748:	ldr	r3, [r0]
   1574c:	cmp	r3, #0
   15750:	movne	r4, r0
   15754:	bne	15760 <__assert_fail@plt+0x3f34>
   15758:	b	1578c <__assert_fail@plt+0x3f60>
   1575c:	ldr	r3, [r4]
   15760:	cmp	r5, r3
   15764:	mov	r1, r3
   15768:	mov	r0, r5
   1576c:	beq	15794 <__assert_fail@plt+0x3f68>
   15770:	ldr	r3, [r6, #28]
   15774:	blx	r3
   15778:	cmp	r0, #0
   1577c:	bne	1579c <__assert_fail@plt+0x3f70>
   15780:	ldr	r4, [r4, #4]
   15784:	cmp	r4, #0
   15788:	bne	1575c <__assert_fail@plt+0x3f30>
   1578c:	mov	r0, #0
   15790:	pop	{r4, r5, r6, pc}
   15794:	mov	r0, r5
   15798:	pop	{r4, r5, r6, pc}
   1579c:	ldr	r0, [r4]
   157a0:	pop	{r4, r5, r6, pc}
   157a4:	ldr	r3, [r0, #16]
   157a8:	cmp	r3, #0
   157ac:	beq	157e0 <__assert_fail@plt+0x3fb4>
   157b0:	ldr	r3, [r0]
   157b4:	ldr	r2, [r0, #4]
   157b8:	cmp	r3, r2
   157bc:	bcc	157d0 <__assert_fail@plt+0x3fa4>
   157c0:	b	157e8 <__assert_fail@plt+0x3fbc>
   157c4:	add	r3, r3, #8
   157c8:	cmp	r3, r2
   157cc:	bcs	157e8 <__assert_fail@plt+0x3fbc>
   157d0:	ldr	r0, [r3]
   157d4:	cmp	r0, #0
   157d8:	beq	157c4 <__assert_fail@plt+0x3f98>
   157dc:	bx	lr
   157e0:	mov	r0, r3
   157e4:	bx	lr
   157e8:	push	{r4, lr}
   157ec:	bl	117d8 <abort@plt>
   157f0:	push	{r4, r5, r6, lr}
   157f4:	mov	r5, r0
   157f8:	mov	r4, r1
   157fc:	bl	15220 <__assert_fail@plt+0x39f4>
   15800:	mov	r2, r0
   15804:	mov	r3, r0
   15808:	b	15814 <__assert_fail@plt+0x3fe8>
   1580c:	cmp	r3, #0
   15810:	beq	15828 <__assert_fail@plt+0x3ffc>
   15814:	ldm	r3, {r1, r3}
   15818:	cmp	r4, r1
   1581c:	bne	1580c <__assert_fail@plt+0x3fe0>
   15820:	cmp	r3, #0
   15824:	bne	15850 <__assert_fail@plt+0x4024>
   15828:	ldr	r3, [r5, #4]
   1582c:	b	1583c <__assert_fail@plt+0x4010>
   15830:	ldr	r0, [r2]
   15834:	cmp	r0, #0
   15838:	popne	{r4, r5, r6, pc}
   1583c:	add	r2, r2, #8
   15840:	cmp	r2, r3
   15844:	bcc	15830 <__assert_fail@plt+0x4004>
   15848:	mov	r0, #0
   1584c:	pop	{r4, r5, r6, pc}
   15850:	ldr	r0, [r3]
   15854:	pop	{r4, r5, r6, pc}
   15858:	push	{r4, r5, r6, lr}
   1585c:	ldm	r0, {r5, lr}
   15860:	cmp	r5, lr
   15864:	bcs	158e8 <__assert_fail@plt+0x40bc>
   15868:	add	r5, r5, #8
   1586c:	mov	ip, #0
   15870:	ldr	r3, [r5, #-8]
   15874:	mov	r6, r5
   15878:	cmp	r3, #0
   1587c:	beq	158c8 <__assert_fail@plt+0x409c>
   15880:	cmp	r2, ip
   15884:	bls	158d4 <__assert_fail@plt+0x40a8>
   15888:	str	r3, [r1, ip, lsl #2]
   1588c:	ldr	r3, [r5, #-4]
   15890:	add	r4, ip, #1
   15894:	cmp	r3, #0
   15898:	add	lr, r1, ip, lsl #2
   1589c:	beq	158dc <__assert_fail@plt+0x40b0>
   158a0:	mov	ip, r4
   158a4:	cmp	r2, ip
   158a8:	beq	158d4 <__assert_fail@plt+0x40a8>
   158ac:	ldr	r4, [r3]
   158b0:	add	ip, ip, #1
   158b4:	str	r4, [lr, #4]!
   158b8:	ldr	r3, [r3, #4]
   158bc:	cmp	r3, #0
   158c0:	bne	158a4 <__assert_fail@plt+0x4078>
   158c4:	ldr	lr, [r0, #4]
   158c8:	cmp	lr, r6
   158cc:	add	r5, r5, #8
   158d0:	bhi	15870 <__assert_fail@plt+0x4044>
   158d4:	mov	r0, ip
   158d8:	pop	{r4, r5, r6, pc}
   158dc:	ldr	lr, [r0, #4]
   158e0:	mov	ip, r4
   158e4:	b	158c8 <__assert_fail@plt+0x409c>
   158e8:	mov	ip, #0
   158ec:	b	158d4 <__assert_fail@plt+0x40a8>
   158f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   158f4:	ldr	r3, [r0, #4]
   158f8:	ldr	r8, [r0]
   158fc:	cmp	r8, r3
   15900:	bcs	15964 <__assert_fail@plt+0x4138>
   15904:	mov	r7, r2
   15908:	mov	r6, r1
   1590c:	mov	r9, r0
   15910:	mov	r5, #0
   15914:	ldr	r0, [r8]
   15918:	cmp	r0, #0
   1591c:	beq	15950 <__assert_fail@plt+0x4124>
   15920:	mov	r4, r8
   15924:	b	1592c <__assert_fail@plt+0x4100>
   15928:	ldr	r0, [r4]
   1592c:	mov	r1, r7
   15930:	blx	r6
   15934:	cmp	r0, #0
   15938:	beq	1595c <__assert_fail@plt+0x4130>
   1593c:	ldr	r4, [r4, #4]
   15940:	add	r5, r5, #1
   15944:	cmp	r4, #0
   15948:	bne	15928 <__assert_fail@plt+0x40fc>
   1594c:	ldr	r3, [r9, #4]
   15950:	add	r8, r8, #8
   15954:	cmp	r3, r8
   15958:	bhi	15914 <__assert_fail@plt+0x40e8>
   1595c:	mov	r0, r5
   15960:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15964:	mov	r5, #0
   15968:	b	1595c <__assert_fail@plt+0x4130>
   1596c:	push	{r4, r5, r6, lr}
   15970:	mov	r4, r0
   15974:	ldrb	r0, [r0]
   15978:	cmp	r0, #0
   1597c:	beq	159ac <__assert_fail@plt+0x4180>
   15980:	mov	r5, r1
   15984:	mov	r1, #0
   15988:	rsb	r1, r1, r1, lsl #5
   1598c:	add	r0, r1, r0
   15990:	mov	r1, r5
   15994:	bl	19ffc <lchmod@@Base+0x3d8c>
   15998:	ldrb	r0, [r4, #1]!
   1599c:	cmp	r0, #0
   159a0:	bne	15988 <__assert_fail@plt+0x415c>
   159a4:	mov	r0, r1
   159a8:	pop	{r4, r5, r6, pc}
   159ac:	mov	r1, r0
   159b0:	b	159a4 <__assert_fail@plt+0x4178>
   159b4:	push	{lr}		; (str lr, [sp, #-4]!)
   159b8:	mov	ip, r0
   159bc:	ldr	lr, [pc, #16]	; 159d4 <__assert_fail@plt+0x41a8>
   159c0:	ldm	lr!, {r0, r1, r2, r3}
   159c4:	ldr	lr, [lr]
   159c8:	stmia	ip!, {r0, r1, r2, r3}
   159cc:	str	lr, [ip]
   159d0:	pop	{pc}		; (ldr pc, [sp], #4)
   159d4:	andeq	sl, r1, r8, asr #20
   159d8:	push	{r4, r5, r6, r7, lr}
   159dc:	sub	sp, sp, #12
   159e0:	cmp	r2, #0
   159e4:	str	r0, [sp, #4]
   159e8:	ldr	r6, [pc, #304]	; 15b20 <__assert_fail@plt+0x42f4>
   159ec:	mov	r0, #40	; 0x28
   159f0:	movne	r6, r2
   159f4:	cmp	r3, #0
   159f8:	ldr	r7, [pc, #292]	; 15b24 <__assert_fail@plt+0x42f8>
   159fc:	mov	r5, r1
   15a00:	movne	r7, r3
   15a04:	bl	195b4 <lchmod@@Base+0x3344>
   15a08:	subs	r4, r0, #0
   15a0c:	beq	15aa4 <__assert_fail@plt+0x4278>
   15a10:	cmp	r5, #0
   15a14:	beq	15af8 <__assert_fail@plt+0x42cc>
   15a18:	mov	r0, r4
   15a1c:	str	r5, [r0, #20]!
   15a20:	bl	15350 <__assert_fail@plt+0x3b24>
   15a24:	cmp	r0, #0
   15a28:	beq	15ae0 <__assert_fail@plt+0x42b4>
   15a2c:	ldrb	r3, [r5, #16]
   15a30:	cmp	r3, #0
   15a34:	beq	15ab0 <__assert_fail@plt+0x4284>
   15a38:	ldr	r0, [sp, #4]
   15a3c:	bl	15158 <__assert_fail@plt+0x392c>
   15a40:	lsrs	r2, r0, #30
   15a44:	movne	r5, #1
   15a48:	moveq	r5, #0
   15a4c:	tst	r0, #536870912	; 0x20000000
   15a50:	bne	15ad8 <__assert_fail@plt+0x42ac>
   15a54:	cmp	r5, #0
   15a58:	bne	15ad8 <__assert_fail@plt+0x42ac>
   15a5c:	cmp	r0, #0
   15a60:	str	r0, [r4, #8]
   15a64:	beq	15ae0 <__assert_fail@plt+0x42b4>
   15a68:	mov	r1, #8
   15a6c:	bl	1956c <lchmod@@Base+0x32fc>
   15a70:	cmp	r0, #0
   15a74:	str	r0, [r4]
   15a78:	beq	15ae0 <__assert_fail@plt+0x42b4>
   15a7c:	ldr	r3, [r4, #8]
   15a80:	str	r5, [r4, #12]
   15a84:	str	r5, [r4, #16]
   15a88:	add	r0, r0, r3, lsl #3
   15a8c:	ldr	r3, [sp, #32]
   15a90:	str	r6, [r4, #24]
   15a94:	str	r7, [r4, #28]
   15a98:	str	r3, [r4, #32]
   15a9c:	str	r5, [r4, #36]	; 0x24
   15aa0:	str	r0, [r4, #4]
   15aa4:	mov	r0, r4
   15aa8:	add	sp, sp, #12
   15aac:	pop	{r4, r5, r6, r7, pc}
   15ab0:	vldr	s12, [r5, #8]
   15ab4:	vldr	s15, [sp, #4]
   15ab8:	vldr	s14, [pc, #88]	; 15b18 <__assert_fail@plt+0x42ec>
   15abc:	vcvt.f32.u32	s13, s15
   15ac0:	vdiv.f32	s15, s13, s12
   15ac4:	vcmpe.f32	s15, s14
   15ac8:	vmrs	APSR_nzcv, fpscr
   15acc:	vcvtlt.u32.f32	s15, s15
   15ad0:	vstrlt	s15, [sp, #4]
   15ad4:	blt	15a38 <__assert_fail@plt+0x420c>
   15ad8:	mov	r3, #0
   15adc:	str	r3, [r4, #8]
   15ae0:	mov	r0, r4
   15ae4:	bl	12fdc <__assert_fail@plt+0x17b0>
   15ae8:	mov	r4, #0
   15aec:	mov	r0, r4
   15af0:	add	sp, sp, #12
   15af4:	pop	{r4, r5, r6, r7, pc}
   15af8:	ldr	r3, [pc, #40]	; 15b28 <__assert_fail@plt+0x42fc>
   15afc:	mov	r0, r4
   15b00:	str	r3, [r0, #20]!
   15b04:	bl	15350 <__assert_fail@plt+0x3b24>
   15b08:	cmp	r0, #0
   15b0c:	vldrne	s12, [pc, #8]	; 15b1c <__assert_fail@plt+0x42f0>
   15b10:	bne	15ab4 <__assert_fail@plt+0x4288>
   15b14:	b	15ae0 <__assert_fail@plt+0x42b4>
   15b18:	svcmi	0x00800000
   15b1c:	svccc	0x004ccccd
   15b20:	strdeq	r5, [r1], -ip
   15b24:	andeq	r5, r1, r0, lsl r2
   15b28:	andeq	sl, r1, r8, asr #20
   15b2c:	push	{r4, r5, r6, r7, r8, lr}
   15b30:	mov	r5, r0
   15b34:	ldr	r7, [r0]
   15b38:	ldr	r3, [r0, #4]
   15b3c:	cmp	r7, r3
   15b40:	addcc	r7, r7, #8
   15b44:	movcc	r6, #0
   15b48:	bcs	15bc4 <__assert_fail@plt+0x4398>
   15b4c:	ldr	r2, [r7, #-8]
   15b50:	mov	r8, r7
   15b54:	cmp	r2, #0
   15b58:	beq	15bb8 <__assert_fail@plt+0x438c>
   15b5c:	ldr	r4, [r7, #-4]
   15b60:	ldr	r2, [r5, #32]
   15b64:	cmp	r4, #0
   15b68:	beq	15b9c <__assert_fail@plt+0x4370>
   15b6c:	cmp	r2, #0
   15b70:	beq	15b80 <__assert_fail@plt+0x4354>
   15b74:	ldr	r0, [r4]
   15b78:	blx	r2
   15b7c:	ldr	r2, [r5, #32]
   15b80:	ldr	r3, [r4, #4]
   15b84:	ldr	r1, [r5, #36]	; 0x24
   15b88:	str	r6, [r4]
   15b8c:	str	r1, [r4, #4]
   15b90:	str	r4, [r5, #36]	; 0x24
   15b94:	subs	r4, r3, #0
   15b98:	bne	15b6c <__assert_fail@plt+0x4340>
   15b9c:	cmp	r2, #0
   15ba0:	beq	15bac <__assert_fail@plt+0x4380>
   15ba4:	ldr	r0, [r7, #-8]
   15ba8:	blx	r2
   15bac:	str	r6, [r7, #-8]
   15bb0:	str	r6, [r7, #-4]
   15bb4:	ldr	r3, [r5, #4]
   15bb8:	cmp	r3, r8
   15bbc:	add	r7, r7, #8
   15bc0:	bhi	15b4c <__assert_fail@plt+0x4320>
   15bc4:	mov	r3, #0
   15bc8:	str	r3, [r5, #12]
   15bcc:	str	r3, [r5, #16]
   15bd0:	pop	{r4, r5, r6, r7, r8, pc}
   15bd4:	ldr	r3, [r0, #32]
   15bd8:	push	{r4, r5, r6, lr}
   15bdc:	cmp	r3, #0
   15be0:	mov	r5, r0
   15be4:	beq	15c44 <__assert_fail@plt+0x4418>
   15be8:	ldr	r3, [r0, #16]
   15bec:	cmp	r3, #0
   15bf0:	beq	15c44 <__assert_fail@plt+0x4418>
   15bf4:	ldr	r6, [r0]
   15bf8:	ldr	r3, [r0, #4]
   15bfc:	cmp	r6, r3
   15c00:	bcs	15c80 <__assert_fail@plt+0x4454>
   15c04:	ldr	r0, [r6]
   15c08:	cmp	r0, #0
   15c0c:	movne	r4, r6
   15c10:	bne	15c1c <__assert_fail@plt+0x43f0>
   15c14:	b	15c34 <__assert_fail@plt+0x4408>
   15c18:	ldr	r0, [r4]
   15c1c:	ldr	r3, [r5, #32]
   15c20:	blx	r3
   15c24:	ldr	r4, [r4, #4]
   15c28:	cmp	r4, #0
   15c2c:	bne	15c18 <__assert_fail@plt+0x43ec>
   15c30:	ldr	r3, [r5, #4]
   15c34:	add	r6, r6, #8
   15c38:	cmp	r3, r6
   15c3c:	bhi	15c04 <__assert_fail@plt+0x43d8>
   15c40:	b	15c48 <__assert_fail@plt+0x441c>
   15c44:	ldr	r3, [r5, #4]
   15c48:	ldr	r6, [r5]
   15c4c:	cmp	r3, r6
   15c50:	bls	15c80 <__assert_fail@plt+0x4454>
   15c54:	ldr	r0, [r6, #4]
   15c58:	cmp	r0, #0
   15c5c:	beq	15c74 <__assert_fail@plt+0x4448>
   15c60:	ldr	r4, [r0, #4]
   15c64:	bl	12fdc <__assert_fail@plt+0x17b0>
   15c68:	subs	r0, r4, #0
   15c6c:	bne	15c60 <__assert_fail@plt+0x4434>
   15c70:	ldr	r3, [r5, #4]
   15c74:	add	r6, r6, #8
   15c78:	cmp	r3, r6
   15c7c:	bhi	15c54 <__assert_fail@plt+0x4428>
   15c80:	ldr	r0, [r5, #36]	; 0x24
   15c84:	cmp	r0, #0
   15c88:	beq	15c9c <__assert_fail@plt+0x4470>
   15c8c:	ldr	r4, [r0, #4]
   15c90:	bl	12fdc <__assert_fail@plt+0x17b0>
   15c94:	subs	r0, r4, #0
   15c98:	bne	15c8c <__assert_fail@plt+0x4460>
   15c9c:	ldr	r0, [r5]
   15ca0:	bl	12fdc <__assert_fail@plt+0x17b0>
   15ca4:	mov	r0, r5
   15ca8:	pop	{r4, r5, r6, lr}
   15cac:	b	12fdc <__assert_fail@plt+0x17b0>
   15cb0:	ldr	r3, [r0, #20]
   15cb4:	push	{r4, r5, r6, r7, lr}
   15cb8:	sub	sp, sp, #52	; 0x34
   15cbc:	ldrb	r2, [r3, #16]
   15cc0:	mov	r5, r0
   15cc4:	str	r1, [sp, #4]
   15cc8:	cmp	r2, #0
   15ccc:	bne	15cf8 <__assert_fail@plt+0x44cc>
   15cd0:	vmov	s15, r1
   15cd4:	vldr	s13, [r3, #8]
   15cd8:	vldr	s14, [pc, #352]	; 15e40 <__assert_fail@plt+0x4614>
   15cdc:	vcvt.f32.u32	s12, s15
   15ce0:	vdiv.f32	s15, s12, s13
   15ce4:	vcmpe.f32	s15, s14
   15ce8:	vmrs	APSR_nzcv, fpscr
   15cec:	bge	15dfc <__assert_fail@plt+0x45d0>
   15cf0:	vcvt.u32.f32	s15, s15
   15cf4:	vstr	s15, [sp, #4]
   15cf8:	ldr	r0, [sp, #4]
   15cfc:	bl	15158 <__assert_fail@plt+0x392c>
   15d00:	lsrs	r3, r0, #30
   15d04:	movne	r2, #1
   15d08:	moveq	r2, #0
   15d0c:	tst	r0, #536870912	; 0x20000000
   15d10:	movne	r2, #1
   15d14:	cmp	r0, #0
   15d18:	movne	r4, r2
   15d1c:	orreq	r4, r2, #1
   15d20:	cmp	r4, #0
   15d24:	mov	r6, r0
   15d28:	bne	15dfc <__assert_fail@plt+0x45d0>
   15d2c:	ldr	r3, [r5, #8]
   15d30:	cmp	r3, r0
   15d34:	beq	15dec <__assert_fail@plt+0x45c0>
   15d38:	mov	r1, #8
   15d3c:	bl	1956c <lchmod@@Base+0x32fc>
   15d40:	cmp	r0, #0
   15d44:	str	r0, [sp, #8]
   15d48:	beq	15dfc <__assert_fail@plt+0x45d0>
   15d4c:	ldr	r1, [r5, #24]
   15d50:	ldr	r7, [r5, #20]
   15d54:	ldr	lr, [r5, #28]
   15d58:	ldr	ip, [r5, #32]
   15d5c:	add	r0, r0, r6, lsl #3
   15d60:	ldr	r3, [r5, #36]	; 0x24
   15d64:	str	r0, [sp, #12]
   15d68:	mov	r2, r4
   15d6c:	str	r1, [sp, #32]
   15d70:	add	r0, sp, #8
   15d74:	mov	r1, r5
   15d78:	str	r4, [sp, #20]
   15d7c:	str	r4, [sp, #24]
   15d80:	str	r6, [sp, #16]
   15d84:	str	r7, [sp, #28]
   15d88:	str	lr, [sp, #36]	; 0x24
   15d8c:	str	ip, [sp, #40]	; 0x28
   15d90:	str	r3, [sp, #44]	; 0x2c
   15d94:	bl	15400 <__assert_fail@plt+0x3bd4>
   15d98:	subs	r4, r0, #0
   15d9c:	bne	15e0c <__assert_fail@plt+0x45e0>
   15da0:	ldr	r3, [sp, #44]	; 0x2c
   15da4:	mov	r2, #1
   15da8:	str	r3, [r5, #36]	; 0x24
   15dac:	add	r1, sp, #8
   15db0:	mov	r0, r5
   15db4:	bl	15400 <__assert_fail@plt+0x3bd4>
   15db8:	cmp	r0, #0
   15dbc:	beq	15e3c <__assert_fail@plt+0x4610>
   15dc0:	add	r1, sp, #8
   15dc4:	mov	r0, r5
   15dc8:	mov	r2, r4
   15dcc:	bl	15400 <__assert_fail@plt+0x3bd4>
   15dd0:	cmp	r0, #0
   15dd4:	beq	15e3c <__assert_fail@plt+0x4610>
   15dd8:	ldr	r0, [sp, #8]
   15ddc:	bl	12fdc <__assert_fail@plt+0x17b0>
   15de0:	mov	r0, r4
   15de4:	add	sp, sp, #52	; 0x34
   15de8:	pop	{r4, r5, r6, r7, pc}
   15dec:	mov	r4, #1
   15df0:	mov	r0, r4
   15df4:	add	sp, sp, #52	; 0x34
   15df8:	pop	{r4, r5, r6, r7, pc}
   15dfc:	mov	r4, #0
   15e00:	mov	r0, r4
   15e04:	add	sp, sp, #52	; 0x34
   15e08:	pop	{r4, r5, r6, r7, pc}
   15e0c:	ldr	r0, [r5]
   15e10:	bl	12fdc <__assert_fail@plt+0x17b0>
   15e14:	add	r0, sp, #12
   15e18:	ldr	ip, [sp, #8]
   15e1c:	ldm	r0, {r0, r1, r2}
   15e20:	ldr	r3, [sp, #44]	; 0x2c
   15e24:	str	ip, [r5]
   15e28:	stmib	r5, {r0, r1, r2}
   15e2c:	mov	r0, r4
   15e30:	str	r3, [r5, #36]	; 0x24
   15e34:	add	sp, sp, #52	; 0x34
   15e38:	pop	{r4, r5, r6, r7, pc}
   15e3c:	bl	117d8 <abort@plt>
   15e40:	svcmi	0x00800000
   15e44:	push	{r4, r5, r6, lr}
   15e48:	subs	r6, r1, #0
   15e4c:	sub	sp, sp, #8
   15e50:	beq	15f84 <__assert_fail@plt+0x4758>
   15e54:	mov	r4, r2
   15e58:	mov	r3, #0
   15e5c:	add	r2, sp, #4
   15e60:	mov	r5, r0
   15e64:	bl	15254 <__assert_fail@plt+0x3a28>
   15e68:	cmp	r0, #0
   15e6c:	beq	15e88 <__assert_fail@plt+0x465c>
   15e70:	cmp	r4, #0
   15e74:	moveq	r0, r4
   15e78:	strne	r0, [r4]
   15e7c:	movne	r0, #0
   15e80:	add	sp, sp, #8
   15e84:	pop	{r4, r5, r6, pc}
   15e88:	vldr	s15, [r5, #8]
   15e8c:	ldr	r3, [r5, #20]
   15e90:	vldr	s14, [r5, #12]
   15e94:	vcvt.f32.u32	s15, s15
   15e98:	vldr	s13, [r3, #8]
   15e9c:	vcvt.f32.u32	s14, s14
   15ea0:	vmul.f32	s15, s15, s13
   15ea4:	vcmpe.f32	s14, s15
   15ea8:	vmrs	APSR_nzcv, fpscr
   15eac:	bgt	15efc <__assert_fail@plt+0x46d0>
   15eb0:	ldr	r2, [sp, #4]
   15eb4:	ldr	r3, [r2]
   15eb8:	cmp	r3, #0
   15ebc:	beq	15f88 <__assert_fail@plt+0x475c>
   15ec0:	ldr	r3, [r5, #36]	; 0x24
   15ec4:	cmp	r3, #0
   15ec8:	beq	15fac <__assert_fail@plt+0x4780>
   15ecc:	ldr	r1, [r3, #4]
   15ed0:	str	r1, [r5, #36]	; 0x24
   15ed4:	ldr	r1, [r5, #16]
   15ed8:	ldr	r0, [r2, #4]
   15edc:	add	r1, r1, #1
   15ee0:	str	r0, [r3, #4]
   15ee4:	str	r6, [r3]
   15ee8:	mov	r0, #1
   15eec:	str	r3, [r2, #4]
   15ef0:	str	r1, [r5, #16]
   15ef4:	add	sp, sp, #8
   15ef8:	pop	{r4, r5, r6, pc}
   15efc:	add	r0, r5, #20
   15f00:	bl	15350 <__assert_fail@plt+0x3b24>
   15f04:	vldr	s15, [r5, #8]
   15f08:	ldr	r3, [r5, #20]
   15f0c:	vldr	s14, [r5, #12]
   15f10:	vcvt.f32.u32	s15, s15
   15f14:	vldr	s13, [r3, #8]
   15f18:	vcvt.f32.u32	s14, s14
   15f1c:	vmul.f32	s12, s13, s15
   15f20:	vcmpe.f32	s14, s12
   15f24:	vmrs	APSR_nzcv, fpscr
   15f28:	ble	15eb0 <__assert_fail@plt+0x4684>
   15f2c:	vldr	s14, [r3, #12]
   15f30:	ldrb	r2, [r3, #16]
   15f34:	vmul.f32	s15, s15, s14
   15f38:	cmp	r2, #0
   15f3c:	vldr	s14, [pc, #132]	; 15fc8 <__assert_fail@plt+0x479c>
   15f40:	vmuleq.f32	s15, s15, s13
   15f44:	vcmpe.f32	s15, s14
   15f48:	vmrs	APSR_nzcv, fpscr
   15f4c:	bge	15fc0 <__assert_fail@plt+0x4794>
   15f50:	vcvt.u32.f32	s15, s15
   15f54:	mov	r0, r5
   15f58:	vmov	r1, s15
   15f5c:	bl	15cb0 <__assert_fail@plt+0x4484>
   15f60:	cmp	r0, #0
   15f64:	beq	15fc0 <__assert_fail@plt+0x4794>
   15f68:	add	r2, sp, #4
   15f6c:	mov	r3, #0
   15f70:	mov	r1, r6
   15f74:	mov	r0, r5
   15f78:	bl	15254 <__assert_fail@plt+0x3a28>
   15f7c:	cmp	r0, #0
   15f80:	beq	15eb0 <__assert_fail@plt+0x4684>
   15f84:	bl	117d8 <abort@plt>
   15f88:	ldr	r1, [r5, #16]
   15f8c:	ldr	r3, [r5, #12]
   15f90:	add	r1, r1, #1
   15f94:	add	r3, r3, #1
   15f98:	str	r6, [r2]
   15f9c:	mov	r0, #1
   15fa0:	str	r1, [r5, #16]
   15fa4:	str	r3, [r5, #12]
   15fa8:	b	15e80 <__assert_fail@plt+0x4654>
   15fac:	mov	r0, #8
   15fb0:	bl	195b4 <lchmod@@Base+0x3344>
   15fb4:	subs	r3, r0, #0
   15fb8:	ldrne	r2, [sp, #4]
   15fbc:	bne	15ed4 <__assert_fail@plt+0x46a8>
   15fc0:	mvn	r0, #0
   15fc4:	b	15e80 <__assert_fail@plt+0x4654>
   15fc8:	svcmi	0x00800000
   15fcc:	push	{r4, lr}
   15fd0:	sub	sp, sp, #8
   15fd4:	add	r2, sp, #4
   15fd8:	mov	r4, r1
   15fdc:	bl	15e44 <__assert_fail@plt+0x4618>
   15fe0:	cmn	r0, #1
   15fe4:	beq	15ffc <__assert_fail@plt+0x47d0>
   15fe8:	cmp	r0, #0
   15fec:	movne	r0, r4
   15ff0:	ldreq	r0, [sp, #4]
   15ff4:	add	sp, sp, #8
   15ff8:	pop	{r4, pc}
   15ffc:	mov	r0, #0
   16000:	b	15ff4 <__assert_fail@plt+0x47c8>
   16004:	push	{r4, r5, r6, lr}
   16008:	sub	sp, sp, #8
   1600c:	mov	r3, #1
   16010:	add	r2, sp, #4
   16014:	mov	r4, r0
   16018:	bl	15254 <__assert_fail@plt+0x3a28>
   1601c:	subs	r5, r0, #0
   16020:	beq	16040 <__assert_fail@plt+0x4814>
   16024:	ldr	r2, [sp, #4]
   16028:	ldr	r3, [r4, #16]
   1602c:	ldr	r2, [r2]
   16030:	sub	r3, r3, #1
   16034:	cmp	r2, #0
   16038:	str	r3, [r4, #16]
   1603c:	beq	1604c <__assert_fail@plt+0x4820>
   16040:	mov	r0, r5
   16044:	add	sp, sp, #8
   16048:	pop	{r4, r5, r6, pc}
   1604c:	vldr	s15, [r4, #8]
   16050:	ldr	r3, [r4, #12]
   16054:	ldr	r2, [r4, #20]
   16058:	sub	r3, r3, #1
   1605c:	vcvt.f32.u32	s14, s15
   16060:	vldr	s13, [r2]
   16064:	vmov	s15, r3
   16068:	str	r3, [r4, #12]
   1606c:	vcvt.f32.u32	s15, s15
   16070:	vmul.f32	s14, s14, s13
   16074:	vcmpe.f32	s15, s14
   16078:	vmrs	APSR_nzcv, fpscr
   1607c:	bpl	16040 <__assert_fail@plt+0x4814>
   16080:	add	r0, r4, #20
   16084:	bl	15350 <__assert_fail@plt+0x3b24>
   16088:	vldr	s15, [r4, #8]
   1608c:	ldr	r3, [r4, #20]
   16090:	vldr	s13, [r4, #12]
   16094:	vcvt.f32.u32	s15, s15
   16098:	vldr	s14, [r3]
   1609c:	vcvt.f32.u32	s13, s13
   160a0:	vmul.f32	s14, s15, s14
   160a4:	vcmpe.f32	s13, s14
   160a8:	vmrs	APSR_nzcv, fpscr
   160ac:	bpl	16040 <__assert_fail@plt+0x4814>
   160b0:	ldrb	r2, [r3, #16]
   160b4:	mov	r0, r4
   160b8:	cmp	r2, #0
   160bc:	vldreq	s13, [r3, #4]
   160c0:	vldrne	s14, [r3, #4]
   160c4:	vldreq	s14, [r3, #8]
   160c8:	vmuleq.f32	s15, s15, s13
   160cc:	vmul.f32	s15, s15, s14
   160d0:	vcvt.u32.f32	s15, s15
   160d4:	vmov	r1, s15
   160d8:	bl	15cb0 <__assert_fail@plt+0x4484>
   160dc:	cmp	r0, #0
   160e0:	bne	16040 <__assert_fail@plt+0x4814>
   160e4:	ldr	r0, [r4, #36]	; 0x24
   160e8:	cmp	r0, #0
   160ec:	beq	16100 <__assert_fail@plt+0x48d4>
   160f0:	ldr	r6, [r0, #4]
   160f4:	bl	12fdc <__assert_fail@plt+0x17b0>
   160f8:	subs	r0, r6, #0
   160fc:	bne	160f0 <__assert_fail@plt+0x48c4>
   16100:	mov	r3, #0
   16104:	str	r3, [r4, #36]	; 0x24
   16108:	b	16040 <__assert_fail@plt+0x4814>
   1610c:	b	16004 <__assert_fail@plt+0x47d8>
   16110:	push	{r4, r5, r6, lr}
   16114:	mov	r4, r0
   16118:	ldr	r0, [r0]
   1611c:	mov	r6, r1
   16120:	bl	19c00 <lchmod@@Base+0x3990>
   16124:	ldrd	r4, [r4, #8]
   16128:	mov	r2, r6
   1612c:	mov	r3, #0
   16130:	eor	r4, r4, r0
   16134:	mov	r0, r4
   16138:	mov	r1, r5
   1613c:	bl	1a25c <lchmod@@Base+0x3fec>
   16140:	mov	r0, r2
   16144:	pop	{r4, r5, r6, pc}
   16148:	ldrd	r2, [r1, #8]
   1614c:	push	{r4, r5, r6, lr}
   16150:	ldrd	r4, [r0, #8]
   16154:	cmp	r5, r3
   16158:	cmpeq	r4, r2
   1615c:	beq	16168 <__assert_fail@plt+0x493c>
   16160:	mov	r0, #0
   16164:	pop	{r4, r5, r6, pc}
   16168:	ldrd	r4, [r0, #16]
   1616c:	ldrd	r2, [r1, #16]
   16170:	cmp	r5, r3
   16174:	cmpeq	r4, r2
   16178:	bne	16160 <__assert_fail@plt+0x4934>
   1617c:	ldr	r1, [r1]
   16180:	ldr	r0, [r0]
   16184:	bl	11454 <strcmp@plt>
   16188:	clz	r0, r0
   1618c:	lsr	r0, r0, #5
   16190:	pop	{r4, r5, r6, pc}
   16194:	push	{r4, lr}
   16198:	mov	r4, r0
   1619c:	ldr	r0, [r0]
   161a0:	bl	12fdc <__assert_fail@plt+0x17b0>
   161a4:	mov	r0, r4
   161a8:	pop	{r4, lr}
   161ac:	b	12fdc <__assert_fail@plt+0x17b0>
   161b0:	mov	r3, #0
   161b4:	mov	r2, #1
   161b8:	str	r1, [r0]
   161bc:	str	r1, [r0, #4]
   161c0:	str	r1, [r0, #8]
   161c4:	str	r1, [r0, #12]
   161c8:	str	r1, [r0, #16]
   161cc:	strb	r2, [r0, #28]
   161d0:	str	r3, [r0, #20]
   161d4:	str	r3, [r0, #24]
   161d8:	bx	lr
   161dc:	ldrb	r0, [r0, #28]
   161e0:	bx	lr
   161e4:	ldrb	ip, [r0, #28]
   161e8:	ldr	r3, [r0, #20]
   161ec:	mov	r2, r0
   161f0:	eor	ip, ip, #1
   161f4:	add	r3, ip, r3
   161f8:	and	r3, r3, #3
   161fc:	ldr	r0, [r0, r3, lsl #2]
   16200:	str	r1, [r2, r3, lsl #2]
   16204:	ldr	r1, [r2, #24]
   16208:	str	r3, [r2, #20]
   1620c:	cmp	r3, r1
   16210:	addeq	r3, ip, r3
   16214:	andeq	r3, r3, #3
   16218:	streq	r3, [r2, #24]
   1621c:	mov	r3, #0
   16220:	strb	r3, [r2, #28]
   16224:	bx	lr
   16228:	ldrb	r3, [r0, #28]
   1622c:	cmp	r3, #0
   16230:	bne	16268 <__assert_fail@plt+0x4a3c>
   16234:	ldr	r3, [r0, #20]
   16238:	ldr	r1, [r0, #16]
   1623c:	ldr	r2, [r0, r3, lsl #2]
   16240:	str	r1, [r0, r3, lsl #2]
   16244:	ldr	r1, [r0, #24]
   16248:	cmp	r3, r1
   1624c:	addne	r3, r3, #3
   16250:	moveq	r3, #1
   16254:	andne	r3, r3, #3
   16258:	strbeq	r3, [r0, #28]
   1625c:	strne	r3, [r0, #20]
   16260:	mov	r0, r2
   16264:	bx	lr
   16268:	push	{r4, lr}
   1626c:	bl	117d8 <abort@plt>

00016270 <lchmod@@Base>:
   16270:	push	{r4, r5, r6, r7, r8, lr}
   16274:	mov	r6, r1
   16278:	sub	sp, sp, #144	; 0x90
   1627c:	mov	r1, #2654208	; 0x288000
   16280:	mov	r8, r0
   16284:	bl	115bc <open64@plt>
   16288:	subs	r4, r0, #0
   1628c:	movlt	r5, r4
   16290:	blt	16318 <lchmod@@Base+0xa8>
   16294:	mov	r3, #4096	; 0x1000
   16298:	str	r3, [sp]
   1629c:	ldr	r2, [pc, #208]	; 16374 <lchmod@@Base+0x104>
   162a0:	add	r3, sp, #40	; 0x28
   162a4:	mov	r1, r4
   162a8:	mov	r0, #3
   162ac:	bl	11538 <__fxstatat64@plt>
   162b0:	cmp	r0, #0
   162b4:	bne	16338 <lchmod@@Base+0xc8>
   162b8:	ldr	r3, [sp, #56]	; 0x38
   162bc:	and	r3, r3, #61440	; 0xf000
   162c0:	cmp	r3, #40960	; 0xa000
   162c4:	beq	16358 <lchmod@@Base+0xe8>
   162c8:	ldr	r3, [pc, #168]	; 16378 <lchmod@@Base+0x108>
   162cc:	mov	r2, #26
   162d0:	str	r4, [sp]
   162d4:	mov	r1, #1
   162d8:	add	r0, sp, #12
   162dc:	bl	11694 <__sprintf_chk@plt>
   162e0:	mov	r1, r6
   162e4:	add	r0, sp, #12
   162e8:	bl	117b4 <chmod@plt>
   162ec:	mov	r5, r0
   162f0:	bl	11688 <__errno_location@plt>
   162f4:	mov	r7, r0
   162f8:	mov	r0, r4
   162fc:	ldr	r4, [r7]
   16300:	bl	117e4 <close@plt>
   16304:	cmp	r5, #0
   16308:	beq	16318 <lchmod@@Base+0xa8>
   1630c:	cmp	r4, #2
   16310:	strne	r4, [r7]
   16314:	beq	16324 <lchmod@@Base+0xb4>
   16318:	mov	r0, r5
   1631c:	add	sp, sp, #144	; 0x90
   16320:	pop	{r4, r5, r6, r7, r8, pc}
   16324:	mov	r1, r6
   16328:	mov	r0, r8
   1632c:	bl	117b4 <chmod@plt>
   16330:	mov	r5, r0
   16334:	b	16318 <lchmod@@Base+0xa8>
   16338:	bl	11688 <__errno_location@plt>
   1633c:	mvn	r5, #0
   16340:	mov	r6, r0
   16344:	mov	r0, r4
   16348:	ldr	r4, [r6]
   1634c:	bl	117e4 <close@plt>
   16350:	str	r4, [r6]
   16354:	b	16318 <lchmod@@Base+0xa8>
   16358:	mov	r0, r4
   1635c:	bl	117e4 <close@plt>
   16360:	bl	11688 <__errno_location@plt>
   16364:	mov	r3, #95	; 0x5f
   16368:	mvn	r5, #0
   1636c:	str	r3, [r0]
   16370:	b	16318 <lchmod@@Base+0xa8>
   16374:	andeq	sl, r1, ip, lsr #21
   16378:	andeq	sl, r1, r8, asr #21
   1637c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16380:	mov	r4, r0
   16384:	ldrb	r3, [r0]
   16388:	sub	r2, r3, #48	; 0x30
   1638c:	cmp	r2, #7
   16390:	bls	16428 <lchmod@@Base+0x1b8>
   16394:	cmp	r3, #0
   16398:	moveq	r0, #1
   1639c:	beq	163cc <lchmod@@Base+0x15c>
   163a0:	mov	r1, r4
   163a4:	mov	r0, #1
   163a8:	and	r2, r3, #239	; 0xef
   163ac:	cmp	r3, #43	; 0x2b
   163b0:	cmpne	r2, #45	; 0x2d
   163b4:	ldrb	r3, [r1, #1]!
   163b8:	moveq	r2, #1
   163bc:	movne	r2, #0
   163c0:	cmp	r3, #0
   163c4:	add	r0, r0, r2
   163c8:	bne	163a8 <lchmod@@Base+0x138>
   163cc:	mov	r1, #16
   163d0:	ldr	r6, [pc, #816]	; 16708 <lchmod@@Base+0x498>
   163d4:	bl	1904c <lchmod@@Base+0x2ddc>
   163d8:	mov	r8, #3
   163dc:	mov	ip, #0
   163e0:	mov	r9, #1
   163e4:	mov	sl, #2
   163e8:	mov	fp, #0
   163ec:	ldrb	r5, [r4]
   163f0:	mov	r1, r4
   163f4:	add	r4, r4, #1
   163f8:	cmp	r5, #97	; 0x61
   163fc:	beq	16670 <lchmod@@Base+0x400>
   16400:	bls	16470 <lchmod@@Base+0x200>
   16404:	cmp	r5, #111	; 0x6f
   16408:	beq	16678 <lchmod@@Base+0x408>
   1640c:	cmp	r5, #117	; 0x75
   16410:	beq	16468 <lchmod@@Base+0x1f8>
   16414:	cmp	r5, #103	; 0x67
   16418:	beq	16684 <lchmod@@Base+0x414>
   1641c:	bl	12fdc <__assert_fail@plt+0x17b0>
   16420:	mov	r0, #0
   16424:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16428:	add	r1, r0, #1
   1642c:	mov	r5, #0
   16430:	ldr	ip, [pc, #720]	; 16708 <lchmod@@Base+0x498>
   16434:	b	1644c <lchmod@@Base+0x1dc>
   16438:	ldrb	r3, [r2], #1
   1643c:	sub	r0, r3, #48	; 0x30
   16440:	cmp	r0, #7
   16444:	bhi	16690 <lchmod@@Base+0x420>
   16448:	mov	r1, r2
   1644c:	add	r5, r3, r5, lsl #3
   16450:	sub	r5, r5, #48	; 0x30
   16454:	cmp	r5, ip
   16458:	mov	r2, r1
   1645c:	bls	16438 <lchmod@@Base+0x1c8>
   16460:	mov	r0, #0
   16464:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16468:	orr	fp, fp, #2496	; 0x9c0
   1646c:	b	163ec <lchmod@@Base+0x17c>
   16470:	cmp	r5, #45	; 0x2d
   16474:	beq	16488 <lchmod@@Base+0x218>
   16478:	cmp	r5, #61	; 0x3d
   1647c:	beq	16488 <lchmod@@Base+0x218>
   16480:	cmp	r5, #43	; 0x2b
   16484:	bne	1641c <lchmod@@Base+0x1ac>
   16488:	add	r7, ip, #1
   1648c:	add	ip, r0, ip, lsl #4
   16490:	b	164f0 <lchmod@@Base+0x280>
   16494:	cmp	r3, #111	; 0x6f
   16498:	beq	1665c <lchmod@@Base+0x3ec>
   1649c:	cmp	r3, #117	; 0x75
   164a0:	bne	16588 <lchmod@@Base+0x318>
   164a4:	ldrb	r3, [r1, #2]
   164a8:	mov	r4, r8
   164ac:	add	r1, r1, #2
   164b0:	mov	r2, #448	; 0x1c0
   164b4:	cmp	fp, #0
   164b8:	strb	r5, [ip]
   164bc:	str	r2, [ip, #8]
   164c0:	mov	r5, r3
   164c4:	andne	r2, r2, fp
   164c8:	strb	r4, [ip, #1]
   164cc:	str	fp, [ip, #4]
   164d0:	and	lr, r3, #239	; 0xef
   164d4:	cmp	r3, #43	; 0x2b
   164d8:	cmpne	lr, #45	; 0x2d
   164dc:	str	r2, [ip, #12]
   164e0:	add	r2, r7, #1
   164e4:	add	ip, ip, #16
   164e8:	bne	166e4 <lchmod@@Base+0x474>
   164ec:	mov	r7, r2
   164f0:	ldrb	r3, [r1, #1]
   164f4:	add	r2, r1, #1
   164f8:	cmp	r3, #103	; 0x67
   164fc:	beq	16574 <lchmod@@Base+0x304>
   16500:	bhi	16494 <lchmod@@Base+0x224>
   16504:	sub	lr, r3, #48	; 0x30
   16508:	cmp	lr, #7
   1650c:	addls	lr, r1, #2
   16510:	movls	r2, #0
   16514:	bhi	16588 <lchmod@@Base+0x318>
   16518:	add	r2, r3, r2, lsl #3
   1651c:	sub	r2, r2, #48	; 0x30
   16520:	cmp	r2, r6
   16524:	mov	r1, lr
   16528:	bhi	1641c <lchmod@@Base+0x1ac>
   1652c:	ldrb	r3, [lr]
   16530:	add	lr, lr, #1
   16534:	sub	r4, r3, #48	; 0x30
   16538:	cmp	r4, #7
   1653c:	bls	16518 <lchmod@@Base+0x2a8>
   16540:	cmp	fp, #0
   16544:	bne	1641c <lchmod@@Base+0x1ac>
   16548:	cmp	r3, #0
   1654c:	cmpne	r3, #44	; 0x2c
   16550:	bne	1641c <lchmod@@Base+0x1ac>
   16554:	ldr	fp, [pc, #428]	; 16708 <lchmod@@Base+0x498>
   16558:	strb	r5, [ip]
   1655c:	str	r2, [ip, #8]
   16560:	strb	r9, [ip, #1]
   16564:	str	r6, [ip, #4]
   16568:	mov	r2, fp
   1656c:	mov	r5, r3
   16570:	b	164d0 <lchmod@@Base+0x260>
   16574:	ldrb	r3, [r1, #2]
   16578:	mov	r4, r8
   1657c:	add	r1, r1, #2
   16580:	mov	r2, #56	; 0x38
   16584:	b	164b4 <lchmod@@Base+0x244>
   16588:	mov	r1, r2
   1658c:	mov	r4, r9
   16590:	mov	r2, #0
   16594:	sub	lr, r3, #88	; 0x58
   16598:	cmp	lr, #32
   1659c:	ldrls	pc, [pc, lr, lsl #2]
   165a0:	b	164b4 <lchmod@@Base+0x244>
   165a4:	andeq	r6, r1, r8, lsr #12
   165a8:			; <UNDEFINED> instruction: 0x000164b4
   165ac:			; <UNDEFINED> instruction: 0x000164b4
   165b0:			; <UNDEFINED> instruction: 0x000164b4
   165b4:			; <UNDEFINED> instruction: 0x000164b4
   165b8:			; <UNDEFINED> instruction: 0x000164b4
   165bc:			; <UNDEFINED> instruction: 0x000164b4
   165c0:			; <UNDEFINED> instruction: 0x000164b4
   165c4:			; <UNDEFINED> instruction: 0x000164b4
   165c8:			; <UNDEFINED> instruction: 0x000164b4
   165cc:			; <UNDEFINED> instruction: 0x000164b4
   165d0:			; <UNDEFINED> instruction: 0x000164b4
   165d4:			; <UNDEFINED> instruction: 0x000164b4
   165d8:			; <UNDEFINED> instruction: 0x000164b4
   165dc:			; <UNDEFINED> instruction: 0x000164b4
   165e0:			; <UNDEFINED> instruction: 0x000164b4
   165e4:			; <UNDEFINED> instruction: 0x000164b4
   165e8:			; <UNDEFINED> instruction: 0x000164b4
   165ec:			; <UNDEFINED> instruction: 0x000164b4
   165f0:			; <UNDEFINED> instruction: 0x000164b4
   165f4:			; <UNDEFINED> instruction: 0x000164b4
   165f8:			; <UNDEFINED> instruction: 0x000164b4
   165fc:			; <UNDEFINED> instruction: 0x000164b4
   16600:			; <UNDEFINED> instruction: 0x000164b4
   16604:			; <UNDEFINED> instruction: 0x000164b4
   16608:			; <UNDEFINED> instruction: 0x000164b4
   1660c:	andeq	r6, r1, r4, asr r6
   16610:	andeq	r6, r1, ip, asr #12
   16614:	andeq	r6, r1, r4, asr #12
   16618:			; <UNDEFINED> instruction: 0x000164b4
   1661c:			; <UNDEFINED> instruction: 0x000164b4
   16620:	andeq	r6, r1, ip, lsr r6
   16624:	andeq	r6, r1, r4, lsr r6
   16628:	mov	r4, sl
   1662c:	ldrb	r3, [r1, #1]!
   16630:	b	16594 <lchmod@@Base+0x324>
   16634:	orr	r2, r2, #73	; 0x49
   16638:	b	1662c <lchmod@@Base+0x3bc>
   1663c:	orr	r2, r2, #146	; 0x92
   16640:	b	1662c <lchmod@@Base+0x3bc>
   16644:	orr	r2, r2, #512	; 0x200
   16648:	b	1662c <lchmod@@Base+0x3bc>
   1664c:	orr	r2, r2, #3072	; 0xc00
   16650:	b	1662c <lchmod@@Base+0x3bc>
   16654:	orr	r2, r2, #292	; 0x124
   16658:	b	1662c <lchmod@@Base+0x3bc>
   1665c:	ldrb	r3, [r1, #2]
   16660:	mov	r4, r8
   16664:	add	r1, r1, #2
   16668:	mov	r2, #7
   1666c:	b	164b4 <lchmod@@Base+0x244>
   16670:	ldr	fp, [pc, #144]	; 16708 <lchmod@@Base+0x498>
   16674:	b	163ec <lchmod@@Base+0x17c>
   16678:	orr	fp, fp, #516	; 0x204
   1667c:	orr	fp, fp, #3
   16680:	b	163ec <lchmod@@Base+0x17c>
   16684:	orr	fp, fp, #1072	; 0x430
   16688:	orr	fp, fp, #8
   1668c:	b	163ec <lchmod@@Base+0x17c>
   16690:	cmp	r3, #0
   16694:	bne	16460 <lchmod@@Base+0x1f0>
   16698:	sub	r1, r1, r4
   1669c:	cmp	r1, #4
   166a0:	andle	r4, r5, #3072	; 0xc00
   166a4:	mov	r0, #32
   166a8:	mvnle	r4, r4, lsr #10
   166ac:	ldrgt	r4, [pc, #84]	; 16708 <lchmod@@Base+0x498>
   166b0:	mvnle	r4, r4, lsl #10
   166b4:	bl	18f64 <lchmod@@Base+0x2cf4>
   166b8:	ldr	r2, [pc, #72]	; 16708 <lchmod@@Base+0x498>
   166bc:	mov	ip, #61	; 0x3d
   166c0:	mov	r1, #1
   166c4:	mov	r3, #0
   166c8:	str	r5, [r0, #8]
   166cc:	str	r4, [r0, #12]
   166d0:	strb	ip, [r0]
   166d4:	strb	r1, [r0, #1]
   166d8:	str	r2, [r0, #4]
   166dc:	strb	r3, [r0, #17]
   166e0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166e4:	cmp	r3, #44	; 0x2c
   166e8:	addeq	r4, r1, #1
   166ec:	moveq	ip, r7
   166f0:	beq	163e8 <lchmod@@Base+0x178>
   166f4:	cmp	r3, #0
   166f8:	bne	1641c <lchmod@@Base+0x1ac>
   166fc:	add	r7, r0, r7, lsl #4
   16700:	strb	r3, [r7, #1]
   16704:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16708:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1670c:	push	{r4, r5, lr}
   16710:	sub	sp, sp, #108	; 0x6c
   16714:	mov	r1, r0
   16718:	mov	r2, sp
   1671c:	mov	r0, #3
   16720:	bl	117c0 <__xstat64@plt>
   16724:	subs	r4, r0, #0
   16728:	movne	r0, #0
   1672c:	bne	16760 <lchmod@@Base+0x4f0>
   16730:	mov	r0, #32
   16734:	ldr	r5, [sp, #16]
   16738:	bl	18f64 <lchmod@@Base+0x2cf4>
   1673c:	ldr	r3, [pc, #36]	; 16768 <lchmod@@Base+0x4f8>
   16740:	mov	r1, #61	; 0x3d
   16744:	mov	r2, #1
   16748:	str	r5, [r0, #8]
   1674c:	strb	r4, [r0, #17]
   16750:	strb	r1, [r0]
   16754:	strb	r2, [r0, #1]
   16758:	str	r3, [r0, #4]
   1675c:	str	r3, [r0, #12]
   16760:	add	sp, sp, #108	; 0x6c
   16764:	pop	{r4, r5, pc}
   16768:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1676c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16770:	ldrb	r8, [r3, #1]
   16774:	ldr	r6, [pc, #284]	; 16898 <lchmod@@Base+0x628>
   16778:	ldr	r7, [sp, #32]
   1677c:	cmp	r8, #0
   16780:	and	r0, r0, r6
   16784:	beq	16890 <lchmod@@Base+0x620>
   16788:	cmp	r1, #0
   1678c:	add	r3, r3, #16
   16790:	mvn	r2, r2
   16794:	movne	r5, #3072	; 0xc00
   16798:	moveq	r5, #0
   1679c:	mov	r4, #0
   167a0:	b	16824 <lchmod@@Base+0x5b4>
   167a4:	cmp	r8, #3
   167a8:	bne	167e0 <lchmod@@Base+0x570>
   167ac:	and	ip, ip, r0
   167b0:	tst	ip, #292	; 0x124
   167b4:	movne	r8, #292	; 0x124
   167b8:	moveq	r8, #0
   167bc:	tst	ip, #146	; 0x92
   167c0:	movne	sl, #146	; 0x92
   167c4:	moveq	sl, #0
   167c8:	tst	ip, #73	; 0x49
   167cc:	orr	sl, r8, sl
   167d0:	movne	r8, #73	; 0x49
   167d4:	moveq	r8, #0
   167d8:	orr	r8, r8, sl
   167dc:	orr	ip, r8, ip
   167e0:	ldrb	r8, [r3, #-16]
   167e4:	cmp	lr, #0
   167e8:	movne	sl, lr
   167ec:	moveq	sl, r2
   167f0:	bic	ip, ip, r9
   167f4:	cmp	r8, #45	; 0x2d
   167f8:	and	ip, ip, sl
   167fc:	beq	16884 <lchmod@@Base+0x614>
   16800:	cmp	r8, #61	; 0x3d
   16804:	beq	1684c <lchmod@@Base+0x5dc>
   16808:	cmp	r8, #43	; 0x2b
   1680c:	orreq	r4, r4, ip
   16810:	orreq	r0, r0, ip
   16814:	add	r3, r3, #16
   16818:	ldrb	r8, [r3, #-15]
   1681c:	cmp	r8, #0
   16820:	beq	16878 <lchmod@@Base+0x608>
   16824:	ldr	lr, [r3, #-4]
   16828:	cmp	r8, #2
   1682c:	bic	r9, r5, lr
   16830:	ldr	ip, [r3, #-8]
   16834:	ldr	lr, [r3, #-12]
   16838:	bne	167a4 <lchmod@@Base+0x534>
   1683c:	and	r8, r0, #73	; 0x49
   16840:	orrs	r8, r8, r1
   16844:	orrne	ip, ip, #73	; 0x49
   16848:	b	167e0 <lchmod@@Base+0x570>
   1684c:	add	r3, r3, #16
   16850:	cmp	lr, #0
   16854:	ldrb	r8, [r3, #-15]
   16858:	mvnne	lr, lr
   1685c:	orr	lr, lr, r9
   16860:	and	r0, r0, lr
   16864:	cmp	r8, #0
   16868:	bic	lr, r6, lr
   1686c:	orr	r0, ip, r0
   16870:	orr	r4, r4, lr
   16874:	bne	16824 <lchmod@@Base+0x5b4>
   16878:	cmp	r7, #0
   1687c:	strne	r4, [r7]
   16880:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16884:	orr	r4, r4, ip
   16888:	bic	r0, r0, ip
   1688c:	b	16814 <lchmod@@Base+0x5a4>
   16890:	mov	r4, r8
   16894:	b	16878 <lchmod@@Base+0x608>
   16898:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1689c:	push	{r2, r3}
   168a0:	push	{lr}		; (str lr, [sp, #-4]!)
   168a4:	sub	sp, sp, #12
   168a8:	ldr	r2, [sp, #16]
   168ac:	ands	r3, r2, #64	; 0x40
   168b0:	addne	r3, sp, #20
   168b4:	strne	r3, [sp, #4]
   168b8:	ldrne	r3, [sp, #20]
   168bc:	bl	11670 <openat64@plt>
   168c0:	bl	18a08 <lchmod@@Base+0x2798>
   168c4:	add	sp, sp, #12
   168c8:	pop	{lr}		; (ldr lr, [sp], #4)
   168cc:	add	sp, sp, #8
   168d0:	bx	lr
   168d4:	orr	r2, r2, #540672	; 0x84000
   168d8:	push	{r4, r5, r6, lr}
   168dc:	orr	r2, r2, #2304	; 0x900
   168e0:	mov	r6, r3
   168e4:	bl	1689c <lchmod@@Base+0x62c>
   168e8:	subs	r5, r0, #0
   168ec:	blt	16920 <lchmod@@Base+0x6b0>
   168f0:	bl	1173c <fdopendir@plt>
   168f4:	subs	r4, r0, #0
   168f8:	beq	16908 <lchmod@@Base+0x698>
   168fc:	str	r5, [r6]
   16900:	mov	r0, r4
   16904:	pop	{r4, r5, r6, pc}
   16908:	bl	11688 <__errno_location@plt>
   1690c:	mov	r6, r0
   16910:	mov	r0, r5
   16914:	ldr	r5, [r6]
   16918:	bl	117e4 <close@plt>
   1691c:	b	168fc <lchmod@@Base+0x68c>
   16920:	mov	r4, #0
   16924:	b	16900 <lchmod@@Base+0x690>
   16928:	push	{r4, r5, r6, lr}
   1692c:	subs	r4, r0, #0
   16930:	beq	169a4 <lchmod@@Base+0x734>
   16934:	mov	r1, #47	; 0x2f
   16938:	bl	11718 <strrchr@plt>
   1693c:	subs	r5, r0, #0
   16940:	beq	16990 <lchmod@@Base+0x720>
   16944:	add	r6, r5, #1
   16948:	sub	r3, r6, r4
   1694c:	cmp	r3, #6
   16950:	ble	16990 <lchmod@@Base+0x720>
   16954:	mov	r2, #7
   16958:	ldr	r1, [pc, #96]	; 169c0 <lchmod@@Base+0x750>
   1695c:	sub	r0, r5, #6
   16960:	bl	117cc <strncmp@plt>
   16964:	cmp	r0, #0
   16968:	bne	16990 <lchmod@@Base+0x720>
   1696c:	mov	r2, #3
   16970:	ldr	r1, [pc, #76]	; 169c4 <lchmod@@Base+0x754>
   16974:	mov	r0, r6
   16978:	bl	117cc <strncmp@plt>
   1697c:	cmp	r0, #0
   16980:	movne	r4, r6
   16984:	ldreq	r3, [pc, #60]	; 169c8 <lchmod@@Base+0x758>
   16988:	addeq	r4, r5, #4
   1698c:	streq	r4, [r3]
   16990:	ldr	r2, [pc, #52]	; 169cc <lchmod@@Base+0x75c>
   16994:	ldr	r3, [pc, #52]	; 169d0 <lchmod@@Base+0x760>
   16998:	str	r4, [r2]
   1699c:	str	r4, [r3]
   169a0:	pop	{r4, r5, r6, pc}
   169a4:	ldr	r3, [pc, #40]	; 169d4 <lchmod@@Base+0x764>
   169a8:	mov	r2, #55	; 0x37
   169ac:	mov	r1, #1
   169b0:	ldr	r3, [r3]
   169b4:	ldr	r0, [pc, #28]	; 169d8 <lchmod@@Base+0x768>
   169b8:	bl	11568 <fwrite@plt>
   169bc:	bl	117d8 <abort@plt>
   169c0:	andeq	sl, r1, r4, lsl fp
   169c4:	andeq	sl, r1, ip, lsl fp
   169c8:	andeq	ip, r2, r8, asr #3
   169cc:	strdeq	ip, [r2], -r0
   169d0:	andeq	ip, r2, ip, asr #3
   169d4:	ldrdeq	ip, [r2], -r8
   169d8:	ldrdeq	sl, [r1], -ip
   169dc:	push	{r4, r5, r6, lr}
   169e0:	mov	r2, #48	; 0x30
   169e4:	mov	r4, r1
   169e8:	mov	r1, #0
   169ec:	mov	r5, r0
   169f0:	bl	116ac <memset@plt>
   169f4:	cmp	r4, #10
   169f8:	beq	16a08 <lchmod@@Base+0x798>
   169fc:	str	r4, [r5]
   16a00:	mov	r0, r5
   16a04:	pop	{r4, r5, r6, pc}
   16a08:	bl	117d8 <abort@plt>
   16a0c:	push	{r4, r5, r6, lr}
   16a10:	mov	r4, r0
   16a14:	mov	r5, r1
   16a18:	bl	19c3c <lchmod@@Base+0x39cc>
   16a1c:	ldrb	r3, [r0]
   16a20:	bic	r3, r3, #32
   16a24:	cmp	r3, #85	; 0x55
   16a28:	bne	16a88 <lchmod@@Base+0x818>
   16a2c:	ldrb	r3, [r0, #1]
   16a30:	bic	r3, r3, #32
   16a34:	cmp	r3, #84	; 0x54
   16a38:	bne	16ac4 <lchmod@@Base+0x854>
   16a3c:	ldrb	r3, [r0, #2]
   16a40:	bic	r3, r3, #32
   16a44:	cmp	r3, #70	; 0x46
   16a48:	bne	16ac4 <lchmod@@Base+0x854>
   16a4c:	ldrb	r3, [r0, #3]
   16a50:	cmp	r3, #45	; 0x2d
   16a54:	bne	16ac4 <lchmod@@Base+0x854>
   16a58:	ldrb	r3, [r0, #4]
   16a5c:	cmp	r3, #56	; 0x38
   16a60:	bne	16ac4 <lchmod@@Base+0x854>
   16a64:	ldrb	r3, [r0, #5]
   16a68:	cmp	r3, #0
   16a6c:	bne	16ac4 <lchmod@@Base+0x854>
   16a70:	ldrb	r2, [r4]
   16a74:	ldr	r3, [pc, #152]	; 16b14 <lchmod@@Base+0x8a4>
   16a78:	ldr	r0, [pc, #152]	; 16b18 <lchmod@@Base+0x8a8>
   16a7c:	cmp	r2, #96	; 0x60
   16a80:	movne	r0, r3
   16a84:	pop	{r4, r5, r6, pc}
   16a88:	cmp	r3, #71	; 0x47
   16a8c:	bne	16ac4 <lchmod@@Base+0x854>
   16a90:	ldrb	r3, [r0, #1]
   16a94:	bic	r3, r3, #32
   16a98:	cmp	r3, #66	; 0x42
   16a9c:	bne	16ac4 <lchmod@@Base+0x854>
   16aa0:	ldrb	r3, [r0, #2]
   16aa4:	cmp	r3, #49	; 0x31
   16aa8:	bne	16ac4 <lchmod@@Base+0x854>
   16aac:	ldrb	r3, [r0, #3]
   16ab0:	cmp	r3, #56	; 0x38
   16ab4:	bne	16ac4 <lchmod@@Base+0x854>
   16ab8:	ldrb	r3, [r0, #4]
   16abc:	cmp	r3, #48	; 0x30
   16ac0:	beq	16ad8 <lchmod@@Base+0x868>
   16ac4:	ldr	r3, [pc, #80]	; 16b1c <lchmod@@Base+0x8ac>
   16ac8:	cmp	r5, #9
   16acc:	ldr	r0, [pc, #76]	; 16b20 <lchmod@@Base+0x8b0>
   16ad0:	movne	r0, r3
   16ad4:	pop	{r4, r5, r6, pc}
   16ad8:	ldrb	r3, [r0, #5]
   16adc:	cmp	r3, #51	; 0x33
   16ae0:	bne	16ac4 <lchmod@@Base+0x854>
   16ae4:	ldrb	r3, [r0, #6]
   16ae8:	cmp	r3, #48	; 0x30
   16aec:	bne	16ac4 <lchmod@@Base+0x854>
   16af0:	ldrb	r3, [r0, #7]
   16af4:	cmp	r3, #0
   16af8:	bne	16ac4 <lchmod@@Base+0x854>
   16afc:	ldrb	r2, [r4]
   16b00:	ldr	r3, [pc, #28]	; 16b24 <lchmod@@Base+0x8b4>
   16b04:	ldr	r0, [pc, #28]	; 16b28 <lchmod@@Base+0x8b8>
   16b08:	cmp	r2, #96	; 0x60
   16b0c:	movne	r0, r3
   16b10:	pop	{r4, r5, r6, pc}
   16b14:	andeq	sl, r1, r8, ror fp
   16b18:	andeq	sl, r1, r4, ror fp
   16b1c:	andeq	sl, r1, r8, lsl #23
   16b20:	andeq	sl, r1, r4, lsl #23
   16b24:	andeq	sl, r1, r0, lsl #23
   16b28:	andeq	sl, r1, ip, ror fp
   16b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b30:	sub	sp, sp, #116	; 0x74
   16b34:	mov	sl, r0
   16b38:	str	r3, [sp, #24]
   16b3c:	mov	r3, #1
   16b40:	mov	r8, r1
   16b44:	str	r2, [sp, #56]	; 0x38
   16b48:	str	r3, [sp, #36]	; 0x24
   16b4c:	bl	11580 <__ctype_get_mb_cur_max@plt>
   16b50:	ldr	r3, [sp, #156]	; 0x9c
   16b54:	mov	fp, r8
   16b58:	mov	r2, #0
   16b5c:	lsr	r3, r3, #1
   16b60:	and	r3, r3, #1
   16b64:	str	r2, [sp, #68]	; 0x44
   16b68:	str	r3, [sp, #28]
   16b6c:	str	r2, [sp, #40]	; 0x28
   16b70:	str	r2, [sp, #44]	; 0x2c
   16b74:	str	r2, [sp, #52]	; 0x34
   16b78:	str	r2, [sp, #64]	; 0x40
   16b7c:	str	r2, [sp, #72]	; 0x48
   16b80:	str	sl, [sp, #32]
   16b84:	str	r0, [sp, #76]	; 0x4c
   16b88:	ldr	r3, [sp, #152]	; 0x98
   16b8c:	cmp	r3, #10
   16b90:	ldrls	pc, [pc, r3, lsl #2]
   16b94:	b	17d54 <lchmod@@Base+0x1ae4>
   16b98:	andeq	r6, r1, r4, asr #23
   16b9c:	andeq	r6, r1, ip, lsr #29
   16ba0:	ldrdeq	r6, [r1], -r0
   16ba4:	strdeq	r6, [r1], -r4
   16ba8:	andeq	r7, r1, r0, lsr #32
   16bac:	strdeq	r6, [r1], -r4
   16bb0:	andeq	r6, r1, ip, asr #31
   16bb4:	andeq	r6, r1, r8, lsl #30
   16bb8:	andeq	r6, r1, r0, lsr #30
   16bbc:	andeq	r6, r1, r0, lsr #30
   16bc0:	andeq	r6, r1, r0, lsr #30
   16bc4:	mov	r3, #0
   16bc8:	mov	r7, r3
   16bcc:	str	r3, [sp, #28]
   16bd0:	ldr	r3, [sp, #44]	; 0x2c
   16bd4:	mov	sl, #0
   16bd8:	eor	r3, r3, #1
   16bdc:	str	r3, [sp, #60]	; 0x3c
   16be0:	ldr	r3, [sp, #24]
   16be4:	cmn	r3, #1
   16be8:	beq	1714c <lchmod@@Base+0xedc>
   16bec:	ldr	r3, [sp, #24]
   16bf0:	subs	r5, r3, sl
   16bf4:	movne	r5, #1
   16bf8:	cmp	r5, #0
   16bfc:	beq	17164 <lchmod@@Base+0xef4>
   16c00:	ldr	r3, [sp, #152]	; 0x98
   16c04:	ldr	r8, [sp, #44]	; 0x2c
   16c08:	cmp	r3, #2
   16c0c:	moveq	r8, #0
   16c10:	andne	r8, r8, #1
   16c14:	ldr	r3, [sp, #52]	; 0x34
   16c18:	adds	r9, r3, #0
   16c1c:	movne	r9, #1
   16c20:	ands	r6, r9, r8
   16c24:	beq	175cc <lchmod@@Base+0x135c>
   16c28:	ldr	r2, [sp, #52]	; 0x34
   16c2c:	ldr	r1, [sp, #24]
   16c30:	cmp	r2, #1
   16c34:	mov	r3, r2
   16c38:	movls	r3, #0
   16c3c:	movhi	r3, #1
   16c40:	cmn	r1, #1
   16c44:	movne	r3, #0
   16c48:	cmp	r3, #0
   16c4c:	add	r4, sl, r2
   16c50:	beq	16c60 <lchmod@@Base+0x9f0>
   16c54:	ldr	r0, [sp, #56]	; 0x38
   16c58:	bl	11658 <strlen@plt>
   16c5c:	str	r0, [sp, #24]
   16c60:	ldr	r3, [sp, #24]
   16c64:	cmp	r3, r4
   16c68:	ldr	r3, [sp, #56]	; 0x38
   16c6c:	add	r3, r3, sl
   16c70:	str	r3, [sp, #48]	; 0x30
   16c74:	bcc	175d8 <lchmod@@Base+0x1368>
   16c78:	mov	r0, r3
   16c7c:	ldr	r2, [sp, #52]	; 0x34
   16c80:	ldr	r1, [sp, #64]	; 0x40
   16c84:	bl	114d8 <memcmp@plt>
   16c88:	cmp	r0, #0
   16c8c:	bne	175d8 <lchmod@@Base+0x1368>
   16c90:	ldr	r3, [sp, #28]
   16c94:	cmp	r3, #0
   16c98:	bne	17e54 <lchmod@@Base+0x1be4>
   16c9c:	ldr	r3, [sp, #48]	; 0x30
   16ca0:	ldrb	r4, [r3]
   16ca4:	cmp	r4, #126	; 0x7e
   16ca8:	ldrls	pc, [pc, r4, lsl #2]
   16cac:	b	1756c <lchmod@@Base+0x12fc>
   16cb0:	muleq	r1, r0, r3
   16cb4:	andeq	r7, r1, ip, ror #10
   16cb8:	andeq	r7, r1, ip, ror #10
   16cbc:	andeq	r7, r1, ip, ror #10
   16cc0:	andeq	r7, r1, ip, ror #10
   16cc4:	andeq	r7, r1, ip, ror #10
   16cc8:	andeq	r7, r1, ip, ror #10
   16ccc:	andeq	r7, r1, r4, ror r3
   16cd0:	andeq	r7, r1, r8, asr r3
   16cd4:	andeq	r7, r1, r4, asr r5
   16cd8:			; <UNDEFINED> instruction: 0x000172b8
   16cdc:	muleq	r1, ip, r2
   16ce0:	andeq	r7, r1, r0, lsr r5
   16ce4:	andeq	r7, r1, ip, lsl #10
   16ce8:	andeq	r7, r1, ip, ror #10
   16cec:	andeq	r7, r1, ip, ror #10
   16cf0:	andeq	r7, r1, ip, ror #10
   16cf4:	andeq	r7, r1, ip, ror #10
   16cf8:	andeq	r7, r1, ip, ror #10
   16cfc:	andeq	r7, r1, ip, ror #10
   16d00:	andeq	r7, r1, ip, ror #10
   16d04:	andeq	r7, r1, ip, ror #10
   16d08:	andeq	r7, r1, ip, ror #10
   16d0c:	andeq	r7, r1, ip, ror #10
   16d10:	andeq	r7, r1, ip, ror #10
   16d14:	andeq	r7, r1, ip, ror #10
   16d18:	andeq	r7, r1, ip, ror #10
   16d1c:	andeq	r7, r1, ip, ror #10
   16d20:	andeq	r7, r1, ip, ror #10
   16d24:	andeq	r7, r1, ip, ror #10
   16d28:	andeq	r7, r1, ip, ror #10
   16d2c:	andeq	r7, r1, ip, ror #10
   16d30:	andeq	r7, r1, ip, asr #10
   16d34:	andeq	r7, r1, r0, lsl #9
   16d38:	andeq	r7, r1, r0, lsl #9
   16d3c:	muleq	r1, r0, r0
   16d40:	andeq	r7, r1, r0, lsl #9
   16d44:	andeq	r7, r1, r8, lsl r5
   16d48:	andeq	r7, r1, r0, lsl #9
   16d4c:	andeq	r7, r1, ip, ror #9
   16d50:	andeq	r7, r1, r0, lsl #9
   16d54:	andeq	r7, r1, r0, lsl #9
   16d58:	andeq	r7, r1, r0, lsl #9
   16d5c:	andeq	r7, r1, r8, lsl r5
   16d60:	andeq	r7, r1, r8, lsl r5
   16d64:	andeq	r7, r1, r8, lsl r5
   16d68:	andeq	r7, r1, r8, lsl r5
   16d6c:	andeq	r7, r1, r8, lsl r5
   16d70:	andeq	r7, r1, r8, lsl r5
   16d74:	andeq	r7, r1, r8, lsl r5
   16d78:	andeq	r7, r1, r8, lsl r5
   16d7c:	andeq	r7, r1, r8, lsl r5
   16d80:	andeq	r7, r1, r8, lsl r5
   16d84:	andeq	r7, r1, r8, lsl r5
   16d88:	andeq	r7, r1, r8, lsl r5
   16d8c:	andeq	r7, r1, r8, lsl r5
   16d90:	andeq	r7, r1, r8, lsl r5
   16d94:	andeq	r7, r1, r8, lsl r5
   16d98:	andeq	r7, r1, r8, lsl r5
   16d9c:	andeq	r7, r1, r0, lsl #9
   16da0:	andeq	r7, r1, r0, lsl #9
   16da4:	andeq	r7, r1, r0, lsl #9
   16da8:	andeq	r7, r1, r0, lsl #9
   16dac:			; <UNDEFINED> instruction: 0x000174bc
   16db0:	andeq	r7, r1, ip, ror #10
   16db4:	andeq	r7, r1, r8, lsl r5
   16db8:	andeq	r7, r1, r8, lsl r5
   16dbc:	andeq	r7, r1, r8, lsl r5
   16dc0:	andeq	r7, r1, r8, lsl r5
   16dc4:	andeq	r7, r1, r8, lsl r5
   16dc8:	andeq	r7, r1, r8, lsl r5
   16dcc:	andeq	r7, r1, r8, lsl r5
   16dd0:	andeq	r7, r1, r8, lsl r5
   16dd4:	andeq	r7, r1, r8, lsl r5
   16dd8:	andeq	r7, r1, r8, lsl r5
   16ddc:	andeq	r7, r1, r8, lsl r5
   16de0:	andeq	r7, r1, r8, lsl r5
   16de4:	andeq	r7, r1, r8, lsl r5
   16de8:	andeq	r7, r1, r8, lsl r5
   16dec:	andeq	r7, r1, r8, lsl r5
   16df0:	andeq	r7, r1, r8, lsl r5
   16df4:	andeq	r7, r1, r8, lsl r5
   16df8:	andeq	r7, r1, r8, lsl r5
   16dfc:	andeq	r7, r1, r8, lsl r5
   16e00:	andeq	r7, r1, r8, lsl r5
   16e04:	andeq	r7, r1, r8, lsl r5
   16e08:	andeq	r7, r1, r8, lsl r5
   16e0c:	andeq	r7, r1, r8, lsl r5
   16e10:	andeq	r7, r1, r8, lsl r5
   16e14:	andeq	r7, r1, r8, lsl r5
   16e18:	andeq	r7, r1, r8, lsl r5
   16e1c:	andeq	r7, r1, r0, lsl #9
   16e20:	ldrdeq	r7, [r1], -ip
   16e24:	andeq	r7, r1, r8, lsl r5
   16e28:	andeq	r7, r1, r0, lsl #9
   16e2c:	andeq	r7, r1, r8, lsl r5
   16e30:	andeq	r7, r1, r0, lsl #9
   16e34:	andeq	r7, r1, r8, lsl r5
   16e38:	andeq	r7, r1, r8, lsl r5
   16e3c:	andeq	r7, r1, r8, lsl r5
   16e40:	andeq	r7, r1, r8, lsl r5
   16e44:	andeq	r7, r1, r8, lsl r5
   16e48:	andeq	r7, r1, r8, lsl r5
   16e4c:	andeq	r7, r1, r8, lsl r5
   16e50:	andeq	r7, r1, r8, lsl r5
   16e54:	andeq	r7, r1, r8, lsl r5
   16e58:	andeq	r7, r1, r8, lsl r5
   16e5c:	andeq	r7, r1, r8, lsl r5
   16e60:	andeq	r7, r1, r8, lsl r5
   16e64:	andeq	r7, r1, r8, lsl r5
   16e68:	andeq	r7, r1, r8, lsl r5
   16e6c:	andeq	r7, r1, r8, lsl r5
   16e70:	andeq	r7, r1, r8, lsl r5
   16e74:	andeq	r7, r1, r8, lsl r5
   16e78:	andeq	r7, r1, r8, lsl r5
   16e7c:	andeq	r7, r1, r8, lsl r5
   16e80:	andeq	r7, r1, r8, lsl r5
   16e84:	andeq	r7, r1, r8, lsl r5
   16e88:	andeq	r7, r1, r8, lsl r5
   16e8c:	andeq	r7, r1, r8, lsl r5
   16e90:	andeq	r7, r1, r8, lsl r5
   16e94:	andeq	r7, r1, r8, lsl r5
   16e98:	andeq	r7, r1, r8, lsl r5
   16e9c:	andeq	r7, r1, r0, ror r0
   16ea0:	andeq	r7, r1, r0, lsl #9
   16ea4:	andeq	r7, r1, r0, ror r0
   16ea8:	muleq	r1, r0, r0
   16eac:	mov	r3, #1
   16eb0:	str	r3, [sp, #28]
   16eb4:	str	r3, [sp, #52]	; 0x34
   16eb8:	ldr	r3, [pc, #4000]	; 17e60 <lchmod@@Base+0x1bf0>
   16ebc:	mov	r7, #0
   16ec0:	str	r3, [sp, #64]	; 0x40
   16ec4:	mov	r3, #2
   16ec8:	str	r3, [sp, #152]	; 0x98
   16ecc:	b	16bd0 <lchmod@@Base+0x960>
   16ed0:	ldr	r3, [sp, #28]
   16ed4:	cmp	r3, #0
   16ed8:	beq	17034 <lchmod@@Base+0xdc4>
   16edc:	mov	r3, #1
   16ee0:	str	r3, [sp, #52]	; 0x34
   16ee4:	ldr	r3, [pc, #3956]	; 17e60 <lchmod@@Base+0x1bf0>
   16ee8:	mov	r7, #0
   16eec:	str	r3, [sp, #64]	; 0x40
   16ef0:	b	16bd0 <lchmod@@Base+0x960>
   16ef4:	mov	r3, #1
   16ef8:	str	r3, [sp, #44]	; 0x2c
   16efc:	str	r3, [sp, #52]	; 0x34
   16f00:	str	r3, [sp, #28]
   16f04:	b	16eb8 <lchmod@@Base+0xc48>
   16f08:	mov	r3, #0
   16f0c:	str	r3, [sp, #28]
   16f10:	mov	r3, #1
   16f14:	str	r3, [sp, #44]	; 0x2c
   16f18:	mov	r7, #0
   16f1c:	b	16bd0 <lchmod@@Base+0x960>
   16f20:	ldr	r3, [sp, #152]	; 0x98
   16f24:	cmp	r3, #10
   16f28:	beq	16f6c <lchmod@@Base+0xcfc>
   16f2c:	mov	r2, #5
   16f30:	ldr	r1, [pc, #3884]	; 17e64 <lchmod@@Base+0x1bf4>
   16f34:	mov	r0, #0
   16f38:	bl	114f0 <dcgettext@plt>
   16f3c:	ldr	r2, [pc, #3872]	; 17e64 <lchmod@@Base+0x1bf4>
   16f40:	cmp	r0, r2
   16f44:	str	r0, [sp, #164]	; 0xa4
   16f48:	beq	17f50 <lchmod@@Base+0x1ce0>
   16f4c:	mov	r2, #5
   16f50:	ldr	r1, [pc, #3848]	; 17e60 <lchmod@@Base+0x1bf0>
   16f54:	mov	r0, #0
   16f58:	bl	114f0 <dcgettext@plt>
   16f5c:	ldr	r2, [pc, #3836]	; 17e60 <lchmod@@Base+0x1bf0>
   16f60:	cmp	r0, r2
   16f64:	str	r0, [sp, #168]	; 0xa8
   16f68:	beq	17f40 <lchmod@@Base+0x1cd0>
   16f6c:	ldr	r7, [sp, #28]
   16f70:	cmp	r7, #0
   16f74:	movne	r7, #0
   16f78:	bne	16fac <lchmod@@Base+0xd3c>
   16f7c:	ldr	r3, [sp, #164]	; 0xa4
   16f80:	ldrb	r3, [r3]
   16f84:	cmp	r3, #0
   16f88:	beq	17f60 <lchmod@@Base+0x1cf0>
   16f8c:	ldr	r2, [sp, #164]	; 0xa4
   16f90:	ldr	r1, [sp, #32]
   16f94:	cmp	fp, r7
   16f98:	strbhi	r3, [r1, r7]
   16f9c:	ldrb	r3, [r2, #1]!
   16fa0:	add	r7, r7, #1
   16fa4:	cmp	r3, #0
   16fa8:	bne	16f94 <lchmod@@Base+0xd24>
   16fac:	ldr	r0, [sp, #168]	; 0xa8
   16fb0:	bl	11658 <strlen@plt>
   16fb4:	ldr	r3, [sp, #168]	; 0xa8
   16fb8:	str	r3, [sp, #64]	; 0x40
   16fbc:	mov	r3, #1
   16fc0:	str	r3, [sp, #44]	; 0x2c
   16fc4:	str	r0, [sp, #52]	; 0x34
   16fc8:	b	16bd0 <lchmod@@Base+0x960>
   16fcc:	mov	r3, #1
   16fd0:	str	r3, [sp, #44]	; 0x2c
   16fd4:	str	r3, [sp, #52]	; 0x34
   16fd8:	str	r3, [sp, #28]
   16fdc:	ldr	r3, [pc, #3716]	; 17e68 <lchmod@@Base+0x1bf8>
   16fe0:	mov	r7, #0
   16fe4:	str	r3, [sp, #64]	; 0x40
   16fe8:	mov	r3, #5
   16fec:	str	r3, [sp, #152]	; 0x98
   16ff0:	b	16bd0 <lchmod@@Base+0x960>
   16ff4:	ldr	r3, [sp, #28]
   16ff8:	cmp	r3, #0
   16ffc:	beq	17cfc <lchmod@@Base+0x1a8c>
   17000:	ldr	r3, [sp, #28]
   17004:	mov	r7, #0
   17008:	str	r3, [sp, #44]	; 0x2c
   1700c:	mov	r3, #1
   17010:	str	r3, [sp, #52]	; 0x34
   17014:	ldr	r3, [pc, #3660]	; 17e68 <lchmod@@Base+0x1bf8>
   17018:	str	r3, [sp, #64]	; 0x40
   1701c:	b	16bd0 <lchmod@@Base+0x960>
   17020:	ldr	r3, [sp, #28]
   17024:	cmp	r3, #0
   17028:	mov	r3, #1
   1702c:	streq	r3, [sp, #44]	; 0x2c
   17030:	bne	16eb4 <lchmod@@Base+0xc44>
   17034:	cmp	fp, #0
   17038:	beq	17d2c <lchmod@@Base+0x1abc>
   1703c:	ldr	r3, [sp, #32]
   17040:	mov	r2, #39	; 0x27
   17044:	mov	r7, #1
   17048:	strb	r2, [r3]
   1704c:	mov	r3, #0
   17050:	str	r3, [sp, #28]
   17054:	mov	r3, #1
   17058:	str	r3, [sp, #52]	; 0x34
   1705c:	ldr	r3, [pc, #3580]	; 17e60 <lchmod@@Base+0x1bf0>
   17060:	str	r3, [sp, #64]	; 0x40
   17064:	mov	r3, #2
   17068:	str	r3, [sp, #152]	; 0x98
   1706c:	b	16bd0 <lchmod@@Base+0x960>
   17070:	ldr	r3, [sp, #24]
   17074:	cmn	r3, #1
   17078:	beq	17c90 <lchmod@@Base+0x1a20>
   1707c:	ldr	r3, [sp, #24]
   17080:	subs	r3, r3, #1
   17084:	movne	r3, #1
   17088:	cmp	r3, #0
   1708c:	bne	17098 <lchmod@@Base+0xe28>
   17090:	cmp	sl, #0
   17094:	beq	17484 <lchmod@@Base+0x1214>
   17098:	ldr	r3, [sp, #152]	; 0x98
   1709c:	mov	r5, #0
   170a0:	sub	r2, r3, #2
   170a4:	mov	r8, r5
   170a8:	clz	r2, r2
   170ac:	lsr	r2, r2, #5
   170b0:	ldr	r3, [sp, #60]	; 0x3c
   170b4:	ldr	r1, [sp, #28]
   170b8:	orr	r3, r2, r3
   170bc:	eor	r3, r3, #1
   170c0:	orr	r3, r1, r3
   170c4:	tst	r3, #255	; 0xff
   170c8:	bne	177f4 <lchmod@@Base+0x1584>
   170cc:	cmp	r6, #0
   170d0:	bne	17220 <lchmod@@Base+0xfb0>
   170d4:	ldr	r3, [sp, #40]	; 0x28
   170d8:	eor	r8, r8, #1
   170dc:	and	r8, r8, r3
   170e0:	add	sl, sl, #1
   170e4:	uxtb	r6, r8
   170e8:	cmp	r6, #0
   170ec:	beq	17120 <lchmod@@Base+0xeb0>
   170f0:	cmp	fp, r7
   170f4:	movhi	r2, #39	; 0x27
   170f8:	ldrhi	r3, [sp, #32]
   170fc:	strbhi	r2, [r3, r7]
   17100:	add	r3, r7, #1
   17104:	cmp	fp, r3
   17108:	movhi	r1, #39	; 0x27
   1710c:	ldrhi	r2, [sp, #32]
   17110:	add	r7, r7, #2
   17114:	strbhi	r1, [r2, r3]
   17118:	mov	r3, #0
   1711c:	str	r3, [sp, #40]	; 0x28
   17120:	cmp	r7, fp
   17124:	ldrcc	r3, [sp, #32]
   17128:	strbcc	r4, [r3, r7]
   1712c:	ldr	r3, [sp, #36]	; 0x24
   17130:	cmp	r5, #0
   17134:	moveq	r3, #0
   17138:	str	r3, [sp, #36]	; 0x24
   1713c:	ldr	r3, [sp, #24]
   17140:	add	r7, r7, #1
   17144:	cmn	r3, #1
   17148:	bne	16bec <lchmod@@Base+0x97c>
   1714c:	ldr	r3, [sp, #56]	; 0x38
   17150:	ldrb	r5, [r3, sl]
   17154:	adds	r5, r5, #0
   17158:	movne	r5, #1
   1715c:	cmp	r5, #0
   17160:	bne	16c00 <lchmod@@Base+0x990>
   17164:	ldr	r3, [sp, #152]	; 0x98
   17168:	ldr	r1, [sp, #28]
   1716c:	sub	r3, r3, #2
   17170:	clz	r3, r3
   17174:	lsr	r3, r3, #5
   17178:	and	r9, r1, r3
   1717c:	cmp	r7, #0
   17180:	movne	r2, #0
   17184:	andeq	r2, r9, #1
   17188:	cmp	r2, #0
   1718c:	bne	17b68 <lchmod@@Base+0x18f8>
   17190:	eor	r2, r1, #1
   17194:	ands	r3, r3, r2
   17198:	beq	18024 <lchmod@@Base+0x1db4>
   1719c:	ldr	r2, [sp, #68]	; 0x44
   171a0:	cmp	r2, #0
   171a4:	beq	18010 <lchmod@@Base+0x1da0>
   171a8:	ldr	r3, [sp, #36]	; 0x24
   171ac:	cmp	r3, #0
   171b0:	bne	17fc8 <lchmod@@Base+0x1d58>
   171b4:	ldr	r2, [sp, #72]	; 0x48
   171b8:	clz	r3, fp
   171bc:	cmp	r2, #0
   171c0:	lsr	r3, r3, #5
   171c4:	moveq	r3, #0
   171c8:	cmp	r3, #0
   171cc:	beq	17f68 <lchmod@@Base+0x1cf8>
   171d0:	str	r3, [sp, #68]	; 0x44
   171d4:	ldr	fp, [sp, #72]	; 0x48
   171d8:	b	16b88 <lchmod@@Base+0x918>
   171dc:	ldr	r3, [sp, #152]	; 0x98
   171e0:	cmp	r3, #2
   171e4:	beq	17838 <lchmod@@Base+0x15c8>
   171e8:	ldr	r3, [sp, #44]	; 0x2c
   171ec:	ldr	r2, [sp, #28]
   171f0:	and	r2, r3, r2
   171f4:	ands	r2, r9, r2
   171f8:	bne	17844 <lchmod@@Base+0x15d4>
   171fc:	mov	r4, #92	; 0x5c
   17200:	mov	r3, r4
   17204:	ldr	r1, [sp, #44]	; 0x2c
   17208:	cmp	r1, #0
   1720c:	moveq	r5, #0
   17210:	moveq	r8, r1
   17214:	beq	170b0 <lchmod@@Base+0xe40>
   17218:	mov	r4, r3
   1721c:	mov	r5, #0
   17220:	ldr	r3, [sp, #28]
   17224:	cmp	r3, #0
   17228:	bne	1782c <lchmod@@Base+0x15bc>
   1722c:	ldr	r3, [sp, #40]	; 0x28
   17230:	eor	r9, r3, #1
   17234:	and	r9, r9, r2
   17238:	ands	r9, r9, #255	; 0xff
   1723c:	beq	17280 <lchmod@@Base+0x1010>
   17240:	cmp	fp, r7
   17244:	movhi	r2, #39	; 0x27
   17248:	ldrhi	r3, [sp, #32]
   1724c:	str	r9, [sp, #40]	; 0x28
   17250:	strbhi	r2, [r3, r7]
   17254:	add	r3, r7, #1
   17258:	cmp	fp, r3
   1725c:	movhi	r1, #36	; 0x24
   17260:	ldrhi	r2, [sp, #32]
   17264:	strbhi	r1, [r2, r3]
   17268:	add	r3, r7, #2
   1726c:	cmp	fp, r3
   17270:	add	r7, r7, #3
   17274:	ldrhi	r2, [sp, #32]
   17278:	movhi	r1, #39	; 0x27
   1727c:	strbhi	r1, [r2, r3]
   17280:	cmp	fp, r7
   17284:	movhi	r2, #92	; 0x5c
   17288:	ldrhi	r3, [sp, #32]
   1728c:	add	sl, sl, #1
   17290:	strbhi	r2, [r3, r7]
   17294:	add	r7, r7, #1
   17298:	b	17120 <lchmod@@Base+0xeb0>
   1729c:	ldr	r3, [sp, #152]	; 0x98
   172a0:	mov	r4, #11
   172a4:	sub	r2, r3, #2
   172a8:	mov	r3, #118	; 0x76
   172ac:	clz	r2, r2
   172b0:	lsr	r2, r2, #5
   172b4:	b	17204 <lchmod@@Base+0xf94>
   172b8:	mov	r4, #10
   172bc:	mov	r3, #110	; 0x6e
   172c0:	ldr	r2, [sp, #152]	; 0x98
   172c4:	ldr	r1, [sp, #28]
   172c8:	sub	r2, r2, #2
   172cc:	clz	r2, r2
   172d0:	lsr	r2, r2, #5
   172d4:	ands	r1, r1, r2
   172d8:	beq	17204 <lchmod@@Base+0xf94>
   172dc:	ldr	sl, [sp, #32]
   172e0:	mov	r8, fp
   172e4:	mov	r2, r1
   172e8:	mov	r3, #2
   172ec:	str	r3, [sp, #152]	; 0x98
   172f0:	ldr	r9, [sp, #44]	; 0x2c
   172f4:	ldr	r3, [sp, #152]	; 0x98
   172f8:	and	r9, r9, r2
   172fc:	tst	r9, #255	; 0xff
   17300:	movne	r3, #4
   17304:	str	r3, [sp, #152]	; 0x98
   17308:	ldr	r3, [sp, #156]	; 0x9c
   1730c:	mov	ip, #0
   17310:	bic	r3, r3, #2
   17314:	str	r3, [sp, #4]
   17318:	ldr	r3, [sp, #168]	; 0xa8
   1731c:	ldr	r2, [sp, #56]	; 0x38
   17320:	str	r3, [sp, #16]
   17324:	ldr	r3, [sp, #164]	; 0xa4
   17328:	mov	r1, r8
   1732c:	str	r3, [sp, #12]
   17330:	ldr	r3, [sp, #152]	; 0x98
   17334:	mov	r0, sl
   17338:	str	r3, [sp]
   1733c:	str	ip, [sp, #8]
   17340:	ldr	r3, [sp, #24]
   17344:	bl	16b2c <lchmod@@Base+0x8bc>
   17348:	mov	fp, r0
   1734c:	mov	r0, fp
   17350:	add	sp, sp, #116	; 0x74
   17354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17358:	ldr	r3, [sp, #152]	; 0x98
   1735c:	mov	r4, #8
   17360:	sub	r2, r3, #2
   17364:	mov	r3, #98	; 0x62
   17368:	clz	r2, r2
   1736c:	lsr	r2, r2, #5
   17370:	b	17204 <lchmod@@Base+0xf94>
   17374:	ldr	r3, [sp, #152]	; 0x98
   17378:	mov	r4, #7
   1737c:	sub	r2, r3, #2
   17380:	mov	r3, #97	; 0x61
   17384:	clz	r2, r2
   17388:	lsr	r2, r2, #5
   1738c:	b	17204 <lchmod@@Base+0xf94>
   17390:	ldr	r3, [sp, #44]	; 0x2c
   17394:	cmp	r3, #0
   17398:	beq	17b7c <lchmod@@Base+0x190c>
   1739c:	ldr	r3, [sp, #28]
   173a0:	cmp	r3, #0
   173a4:	bne	17e54 <lchmod@@Base+0x1be4>
   173a8:	ldr	r3, [sp, #152]	; 0x98
   173ac:	sub	r2, r3, #2
   173b0:	ldr	r3, [sp, #40]	; 0x28
   173b4:	clz	r2, r2
   173b8:	eor	r3, r3, #1
   173bc:	lsr	r2, r2, #5
   173c0:	ands	r3, r2, r3
   173c4:	moveq	r1, r7
   173c8:	beq	1740c <lchmod@@Base+0x119c>
   173cc:	cmp	fp, r7
   173d0:	movhi	r0, #39	; 0x27
   173d4:	ldrhi	r1, [sp, #32]
   173d8:	str	r3, [sp, #40]	; 0x28
   173dc:	strbhi	r0, [r1, r7]
   173e0:	add	r1, r7, #1
   173e4:	cmp	fp, r1
   173e8:	movhi	ip, #36	; 0x24
   173ec:	ldrhi	r0, [sp, #32]
   173f0:	strbhi	ip, [r0, r1]
   173f4:	add	r1, r7, #2
   173f8:	cmp	fp, r1
   173fc:	movhi	ip, #39	; 0x27
   17400:	ldrhi	r0, [sp, #32]
   17404:	strbhi	ip, [r0, r1]
   17408:	add	r1, r7, #3
   1740c:	cmp	fp, r1
   17410:	movhi	r0, #92	; 0x5c
   17414:	ldrhi	r3, [sp, #32]
   17418:	add	r7, r1, #1
   1741c:	strbhi	r0, [r3, r1]
   17420:	cmp	r8, #0
   17424:	beq	17d68 <lchmod@@Base+0x1af8>
   17428:	ldr	r0, [sp, #24]
   1742c:	add	r3, sl, #1
   17430:	cmp	r3, r0
   17434:	bcs	17ca4 <lchmod@@Base+0x1a34>
   17438:	ldr	r0, [sp, #56]	; 0x38
   1743c:	ldrb	r3, [r0, r3]
   17440:	sub	r3, r3, #48	; 0x30
   17444:	cmp	r3, #9
   17448:	bhi	17ca4 <lchmod@@Base+0x1a34>
   1744c:	cmp	fp, r7
   17450:	movhi	r3, #48	; 0x30
   17454:	ldrhi	r0, [sp, #32]
   17458:	ldr	r5, [sp, #28]
   1745c:	mov	r4, #48	; 0x30
   17460:	strbhi	r3, [r0, r7]
   17464:	add	r3, r1, #2
   17468:	cmp	fp, r3
   1746c:	movhi	r0, #48	; 0x30
   17470:	ldrhi	ip, [sp, #32]
   17474:	add	r7, r1, #3
   17478:	strbhi	r0, [ip, r3]
   1747c:	b	170b0 <lchmod@@Base+0xe40>
   17480:	mov	r5, #0
   17484:	ldr	r3, [sp, #152]	; 0x98
   17488:	sub	r2, r3, #2
   1748c:	ldr	r3, [sp, #28]
   17490:	clz	r2, r2
   17494:	lsr	r2, r2, #5
   17498:	ands	r8, r3, r2
   1749c:	beq	170b0 <lchmod@@Base+0xe40>
   174a0:	mov	r3, r8
   174a4:	mov	r2, r3
   174a8:	mov	r3, #2
   174ac:	ldr	sl, [sp, #32]
   174b0:	mov	r8, fp
   174b4:	str	r3, [sp, #152]	; 0x98
   174b8:	b	172f0 <lchmod@@Base+0x1080>
   174bc:	ldr	r3, [sp, #152]	; 0x98
   174c0:	cmp	r3, #2
   174c4:	beq	17be8 <lchmod@@Base+0x1978>
   174c8:	cmp	r3, #5
   174cc:	beq	17ba8 <lchmod@@Base+0x1938>
   174d0:	mov	r5, #0
   174d4:	sub	r2, r3, #2
   174d8:	mov	r8, r5
   174dc:	clz	r2, r2
   174e0:	mov	r4, #63	; 0x3f
   174e4:	lsr	r2, r2, #5
   174e8:	b	170b0 <lchmod@@Base+0xe40>
   174ec:	ldr	r3, [sp, #152]	; 0x98
   174f0:	cmp	r3, #2
   174f4:	beq	17c08 <lchmod@@Base+0x1998>
   174f8:	mov	r2, #0
   174fc:	str	r5, [sp, #68]	; 0x44
   17500:	mov	r8, r2
   17504:	mov	r4, #39	; 0x27
   17508:	b	170b0 <lchmod@@Base+0xe40>
   1750c:	mov	r4, #13
   17510:	mov	r3, #114	; 0x72
   17514:	b	172c0 <lchmod@@Base+0x1050>
   17518:	ldr	r3, [sp, #152]	; 0x98
   1751c:	mov	r8, #0
   17520:	sub	r2, r3, #2
   17524:	clz	r2, r2
   17528:	lsr	r2, r2, #5
   1752c:	b	170b0 <lchmod@@Base+0xe40>
   17530:	ldr	r3, [sp, #152]	; 0x98
   17534:	mov	r4, #12
   17538:	sub	r2, r3, #2
   1753c:	mov	r3, #102	; 0x66
   17540:	clz	r2, r2
   17544:	lsr	r2, r2, #5
   17548:	b	17204 <lchmod@@Base+0xf94>
   1754c:	mov	r5, r6
   17550:	b	17484 <lchmod@@Base+0x1214>
   17554:	ldr	r3, [sp, #152]	; 0x98
   17558:	sub	r2, r3, #2
   1755c:	mov	r3, #116	; 0x74
   17560:	clz	r2, r2
   17564:	lsr	r2, r2, #5
   17568:	b	17204 <lchmod@@Base+0xf94>
   1756c:	ldr	r8, [sp, #76]	; 0x4c
   17570:	cmp	r8, #1
   17574:	bne	17a24 <lchmod@@Base+0x17b4>
   17578:	bl	11628 <__ctype_b_loc@plt>
   1757c:	sxth	r3, r4
   17580:	mov	ip, r8
   17584:	lsl	r3, r3, #1
   17588:	ldr	r2, [r0]
   1758c:	ldrh	r3, [r2, r3]
   17590:	and	r3, r3, #16384	; 0x4000
   17594:	cmp	r3, #0
   17598:	movne	r5, #1
   1759c:	moveq	r5, #0
   175a0:	moveq	r3, #1
   175a4:	movne	r3, #0
   175a8:	ldr	r2, [sp, #44]	; 0x2c
   175ac:	and	r3, r3, r2
   175b0:	ands	r8, r3, #255	; 0xff
   175b4:	bne	178b8 <lchmod@@Base+0x1648>
   175b8:	ldr	r3, [sp, #152]	; 0x98
   175bc:	sub	r2, r3, #2
   175c0:	clz	r2, r2
   175c4:	lsr	r2, r2, #5
   175c8:	b	170b0 <lchmod@@Base+0xe40>
   175cc:	ldr	r3, [sp, #56]	; 0x38
   175d0:	add	r3, r3, sl
   175d4:	str	r3, [sp, #48]	; 0x30
   175d8:	ldr	r3, [sp, #48]	; 0x30
   175dc:	mov	r6, #0
   175e0:	ldrb	r4, [r3]
   175e4:	cmp	r4, #126	; 0x7e
   175e8:	ldrls	pc, [pc, r4, lsl #2]
   175ec:	b	1756c <lchmod@@Base+0x12fc>
   175f0:	muleq	r1, r0, r3
   175f4:	andeq	r7, r1, ip, ror #10
   175f8:	andeq	r7, r1, ip, ror #10
   175fc:	andeq	r7, r1, ip, ror #10
   17600:	andeq	r7, r1, ip, ror #10
   17604:	andeq	r7, r1, ip, ror #10
   17608:	andeq	r7, r1, ip, ror #10
   1760c:	andeq	r7, r1, r4, ror r3
   17610:	andeq	r7, r1, r8, asr r3
   17614:	andeq	r7, r1, ip, ror #15
   17618:			; <UNDEFINED> instruction: 0x000172b8
   1761c:	muleq	r1, ip, r2
   17620:	andeq	r7, r1, r0, lsr r5
   17624:	andeq	r7, r1, ip, lsl #10
   17628:	andeq	r7, r1, ip, ror #10
   1762c:	andeq	r7, r1, ip, ror #10
   17630:	andeq	r7, r1, ip, ror #10
   17634:	andeq	r7, r1, ip, ror #10
   17638:	andeq	r7, r1, ip, ror #10
   1763c:	andeq	r7, r1, ip, ror #10
   17640:	andeq	r7, r1, ip, ror #10
   17644:	andeq	r7, r1, ip, ror #10
   17648:	andeq	r7, r1, ip, ror #10
   1764c:	andeq	r7, r1, ip, ror #10
   17650:	andeq	r7, r1, ip, ror #10
   17654:	andeq	r7, r1, ip, ror #10
   17658:	andeq	r7, r1, ip, ror #10
   1765c:	andeq	r7, r1, ip, ror #10
   17660:	andeq	r7, r1, ip, ror #10
   17664:	andeq	r7, r1, ip, ror #10
   17668:	andeq	r7, r1, ip, ror #10
   1766c:	andeq	r7, r1, ip, ror #10
   17670:	andeq	r7, r1, r4, lsl #9
   17674:	andeq	r7, r1, r0, lsl #9
   17678:	andeq	r7, r1, r0, lsl #9
   1767c:	muleq	r1, r0, r0
   17680:	andeq	r7, r1, r0, lsl #9
   17684:	andeq	r7, r1, r8, lsl r5
   17688:	andeq	r7, r1, r0, lsl #9
   1768c:	andeq	r7, r1, ip, ror #9
   17690:	andeq	r7, r1, r0, lsl #9
   17694:	andeq	r7, r1, r0, lsl #9
   17698:	andeq	r7, r1, r0, lsl #9
   1769c:	andeq	r7, r1, r8, lsl r5
   176a0:	andeq	r7, r1, r8, lsl r5
   176a4:	andeq	r7, r1, r8, lsl r5
   176a8:	andeq	r7, r1, r8, lsl r5
   176ac:	andeq	r7, r1, r8, lsl r5
   176b0:	andeq	r7, r1, r8, lsl r5
   176b4:	andeq	r7, r1, r8, lsl r5
   176b8:	andeq	r7, r1, r8, lsl r5
   176bc:	andeq	r7, r1, r8, lsl r5
   176c0:	andeq	r7, r1, r8, lsl r5
   176c4:	andeq	r7, r1, r8, lsl r5
   176c8:	andeq	r7, r1, r8, lsl r5
   176cc:	andeq	r7, r1, r8, lsl r5
   176d0:	andeq	r7, r1, r8, lsl r5
   176d4:	andeq	r7, r1, r8, lsl r5
   176d8:	andeq	r7, r1, r8, lsl r5
   176dc:	andeq	r7, r1, r0, lsl #9
   176e0:	andeq	r7, r1, r0, lsl #9
   176e4:	andeq	r7, r1, r0, lsl #9
   176e8:	andeq	r7, r1, r0, lsl #9
   176ec:			; <UNDEFINED> instruction: 0x000174bc
   176f0:	andeq	r7, r1, ip, ror #10
   176f4:	andeq	r7, r1, r8, lsl r5
   176f8:	andeq	r7, r1, r8, lsl r5
   176fc:	andeq	r7, r1, r8, lsl r5
   17700:	andeq	r7, r1, r8, lsl r5
   17704:	andeq	r7, r1, r8, lsl r5
   17708:	andeq	r7, r1, r8, lsl r5
   1770c:	andeq	r7, r1, r8, lsl r5
   17710:	andeq	r7, r1, r8, lsl r5
   17714:	andeq	r7, r1, r8, lsl r5
   17718:	andeq	r7, r1, r8, lsl r5
   1771c:	andeq	r7, r1, r8, lsl r5
   17720:	andeq	r7, r1, r8, lsl r5
   17724:	andeq	r7, r1, r8, lsl r5
   17728:	andeq	r7, r1, r8, lsl r5
   1772c:	andeq	r7, r1, r8, lsl r5
   17730:	andeq	r7, r1, r8, lsl r5
   17734:	andeq	r7, r1, r8, lsl r5
   17738:	andeq	r7, r1, r8, lsl r5
   1773c:	andeq	r7, r1, r8, lsl r5
   17740:	andeq	r7, r1, r8, lsl r5
   17744:	andeq	r7, r1, r8, lsl r5
   17748:	andeq	r7, r1, r8, lsl r5
   1774c:	andeq	r7, r1, r8, lsl r5
   17750:	andeq	r7, r1, r8, lsl r5
   17754:	andeq	r7, r1, r8, lsl r5
   17758:	andeq	r7, r1, r8, lsl r5
   1775c:	andeq	r7, r1, r0, lsl #9
   17760:	ldrdeq	r7, [r1], -ip
   17764:	andeq	r7, r1, r8, lsl r5
   17768:	andeq	r7, r1, r0, lsl #9
   1776c:	andeq	r7, r1, r8, lsl r5
   17770:	andeq	r7, r1, r0, lsl #9
   17774:	andeq	r7, r1, r8, lsl r5
   17778:	andeq	r7, r1, r8, lsl r5
   1777c:	andeq	r7, r1, r8, lsl r5
   17780:	andeq	r7, r1, r8, lsl r5
   17784:	andeq	r7, r1, r8, lsl r5
   17788:	andeq	r7, r1, r8, lsl r5
   1778c:	andeq	r7, r1, r8, lsl r5
   17790:	andeq	r7, r1, r8, lsl r5
   17794:	andeq	r7, r1, r8, lsl r5
   17798:	andeq	r7, r1, r8, lsl r5
   1779c:	andeq	r7, r1, r8, lsl r5
   177a0:	andeq	r7, r1, r8, lsl r5
   177a4:	andeq	r7, r1, r8, lsl r5
   177a8:	andeq	r7, r1, r8, lsl r5
   177ac:	andeq	r7, r1, r8, lsl r5
   177b0:	andeq	r7, r1, r8, lsl r5
   177b4:	andeq	r7, r1, r8, lsl r5
   177b8:	andeq	r7, r1, r8, lsl r5
   177bc:	andeq	r7, r1, r8, lsl r5
   177c0:	andeq	r7, r1, r8, lsl r5
   177c4:	andeq	r7, r1, r8, lsl r5
   177c8:	andeq	r7, r1, r8, lsl r5
   177cc:	andeq	r7, r1, r8, lsl r5
   177d0:	andeq	r7, r1, r8, lsl r5
   177d4:	andeq	r7, r1, r8, lsl r5
   177d8:	andeq	r7, r1, r8, lsl r5
   177dc:	andeq	r7, r1, r0, ror r0
   177e0:	andeq	r7, r1, r0, lsl #9
   177e4:	andeq	r7, r1, r0, ror r0
   177e8:	muleq	r1, r0, r0
   177ec:	mov	r3, #116	; 0x74
   177f0:	b	172c0 <lchmod@@Base+0x1050>
   177f4:	ldr	r3, [sp, #160]	; 0xa0
   177f8:	cmp	r3, #0
   177fc:	beq	170cc <lchmod@@Base+0xe5c>
   17800:	lsr	r3, r4, #5
   17804:	ldr	r0, [sp, #160]	; 0xa0
   17808:	uxtb	r3, r3
   1780c:	and	r1, r4, #31
   17810:	ldr	r0, [r0, r3, lsl #2]
   17814:	lsr	r3, r0, r1
   17818:	tst	r3, #1
   1781c:	beq	170cc <lchmod@@Base+0xe5c>
   17820:	ldr	r3, [sp, #28]
   17824:	cmp	r3, #0
   17828:	beq	1722c <lchmod@@Base+0xfbc>
   1782c:	ldr	sl, [sp, #32]
   17830:	mov	r8, fp
   17834:	b	172f0 <lchmod@@Base+0x1080>
   17838:	ldr	r3, [sp, #28]
   1783c:	cmp	r3, #0
   17840:	bne	17d94 <lchmod@@Base+0x1b24>
   17844:	add	sl, sl, #1
   17848:	ldr	r6, [sp, #40]	; 0x28
   1784c:	mov	r5, #0
   17850:	mov	r4, #92	; 0x5c
   17854:	b	170e8 <lchmod@@Base+0xe78>
   17858:	cmp	r9, r8
   1785c:	bne	17acc <lchmod@@Base+0x185c>
   17860:	ldr	r0, [sp, #100]	; 0x64
   17864:	bl	11544 <iswprint@plt>
   17868:	add	r5, r5, r4
   1786c:	cmp	r0, #0
   17870:	add	r0, sp, #104	; 0x68
   17874:	moveq	r6, #0
   17878:	bl	114c0 <mbsinit@plt>
   1787c:	cmp	r0, #0
   17880:	beq	17a60 <lchmod@@Base+0x17f0>
   17884:	mov	r2, r6
   17888:	mov	ip, r5
   1788c:	eor	r5, r2, #1
   17890:	ldr	r4, [sp, #80]	; 0x50
   17894:	ldr	r6, [sp, #84]	; 0x54
   17898:	ldr	r7, [sp, #88]	; 0x58
   1789c:	uxtb	r5, r5
   178a0:	cmp	ip, #1
   178a4:	bls	17da4 <lchmod@@Base+0x1b34>
   178a8:	ldr	r3, [sp, #44]	; 0x2c
   178ac:	and	r8, r3, r5
   178b0:	mov	r5, r2
   178b4:	uxtb	r8, r8
   178b8:	add	r2, sl, ip
   178bc:	ldr	r0, [sp, #48]	; 0x30
   178c0:	mov	r1, #0
   178c4:	str	r5, [sp, #48]	; 0x30
   178c8:	ldr	r9, [sp, #28]
   178cc:	ldr	ip, [sp, #40]	; 0x28
   178d0:	ldr	r3, [sp, #32]
   178d4:	ldr	r5, [sp, #152]	; 0x98
   178d8:	b	17994 <lchmod@@Base+0x1724>
   178dc:	cmp	r9, #0
   178e0:	bne	17cb8 <lchmod@@Base+0x1a48>
   178e4:	eor	r1, ip, #1
   178e8:	cmp	r5, #2
   178ec:	movne	r1, #0
   178f0:	andeq	r1, r1, #1
   178f4:	cmp	r1, #0
   178f8:	beq	17930 <lchmod@@Base+0x16c0>
   178fc:	cmp	fp, r7
   17900:	movhi	ip, #39	; 0x27
   17904:	strbhi	ip, [r3, r7]
   17908:	add	ip, r7, #1
   1790c:	cmp	fp, ip
   17910:	movhi	lr, #36	; 0x24
   17914:	strbhi	lr, [r3, ip]
   17918:	add	ip, r7, #2
   1791c:	cmp	fp, ip
   17920:	movhi	lr, #39	; 0x27
   17924:	strbhi	lr, [r3, ip]
   17928:	add	r7, r7, #3
   1792c:	mov	ip, r1
   17930:	cmp	fp, r7
   17934:	movhi	r1, #92	; 0x5c
   17938:	strbhi	r1, [r3, r7]
   1793c:	add	r1, r7, #1
   17940:	cmp	fp, r1
   17944:	lsrhi	lr, r4, #6
   17948:	addhi	lr, lr, #48	; 0x30
   1794c:	strbhi	lr, [r3, r1]
   17950:	add	lr, r7, #2
   17954:	cmp	fp, lr
   17958:	lsrhi	r1, r4, #3
   1795c:	andhi	r1, r1, #7
   17960:	addhi	r1, r1, #48	; 0x30
   17964:	add	sl, sl, #1
   17968:	strbhi	r1, [r3, lr]
   1796c:	and	r4, r4, #7
   17970:	cmp	r2, sl
   17974:	add	r4, r4, #48	; 0x30
   17978:	add	r7, r7, #3
   1797c:	bls	17cdc <lchmod@@Base+0x1a6c>
   17980:	mov	r1, r8
   17984:	cmp	fp, r7
   17988:	strbhi	r4, [r3, r7]
   1798c:	ldrb	r4, [r0, #1]!
   17990:	add	r7, r7, #1
   17994:	cmp	r8, #0
   17998:	bne	178dc <lchmod@@Base+0x166c>
   1799c:	cmp	r6, #0
   179a0:	bne	179f0 <lchmod@@Base+0x1780>
   179a4:	eor	r6, r1, #1
   179a8:	and	r6, r6, ip
   179ac:	add	sl, sl, #1
   179b0:	cmp	r2, sl
   179b4:	uxtb	r6, r6
   179b8:	bls	17a18 <lchmod@@Base+0x17a8>
   179bc:	cmp	r6, #0
   179c0:	beq	17984 <lchmod@@Base+0x1714>
   179c4:	cmp	fp, r7
   179c8:	movhi	ip, #39	; 0x27
   179cc:	strbhi	ip, [r3, r7]
   179d0:	add	ip, r7, #1
   179d4:	cmp	fp, ip
   179d8:	movhi	lr, #39	; 0x27
   179dc:	strbhi	lr, [r3, ip]
   179e0:	add	r7, r7, #2
   179e4:	mov	r6, r8
   179e8:	mov	ip, r8
   179ec:	b	17984 <lchmod@@Base+0x1714>
   179f0:	cmp	fp, r7
   179f4:	eor	r6, r1, #1
   179f8:	movhi	lr, #92	; 0x5c
   179fc:	and	r6, r6, ip
   17a00:	add	sl, sl, #1
   17a04:	strbhi	lr, [r3, r7]
   17a08:	cmp	r2, sl
   17a0c:	add	r7, r7, #1
   17a10:	uxtb	r6, r6
   17a14:	bhi	179bc <lchmod@@Base+0x174c>
   17a18:	str	ip, [sp, #40]	; 0x28
   17a1c:	ldr	r5, [sp, #48]	; 0x30
   17a20:	b	170e8 <lchmod@@Base+0xe78>
   17a24:	ldr	r3, [sp, #24]
   17a28:	cmn	r3, #1
   17a2c:	mov	r3, #0
   17a30:	str	r3, [sp, #104]	; 0x68
   17a34:	str	r3, [sp, #108]	; 0x6c
   17a38:	beq	17d58 <lchmod@@Base+0x1ae8>
   17a3c:	mov	r2, r5
   17a40:	mov	r3, #0
   17a44:	str	r7, [sp, #88]	; 0x58
   17a48:	ldr	r7, [sp, #152]	; 0x98
   17a4c:	str	r5, [sp, #92]	; 0x5c
   17a50:	str	r6, [sp, #84]	; 0x54
   17a54:	mov	r5, r3
   17a58:	mov	r6, r2
   17a5c:	str	r4, [sp, #80]	; 0x50
   17a60:	ldr	r3, [sp, #56]	; 0x38
   17a64:	add	r9, sl, r5
   17a68:	add	r8, r3, r9
   17a6c:	ldr	r3, [sp, #24]
   17a70:	mov	r1, r8
   17a74:	sub	r2, r3, r9
   17a78:	add	r0, sp, #100	; 0x64
   17a7c:	add	r3, sp, #104	; 0x68
   17a80:	bl	19c70 <lchmod@@Base+0x3a00>
   17a84:	subs	r4, r0, #0
   17a88:	beq	17e30 <lchmod@@Base+0x1bc0>
   17a8c:	cmn	r4, #1
   17a90:	beq	17e10 <lchmod@@Base+0x1ba0>
   17a94:	cmn	r4, #2
   17a98:	beq	17db0 <lchmod@@Base+0x1b40>
   17a9c:	ldr	r2, [sp, #28]
   17aa0:	cmp	r7, #2
   17aa4:	movne	r2, #0
   17aa8:	andeq	r2, r2, #1
   17aac:	cmp	r2, #0
   17ab0:	beq	17860 <lchmod@@Base+0x15f0>
   17ab4:	cmp	r4, #1
   17ab8:	beq	17860 <lchmod@@Base+0x15f0>
   17abc:	sub	r3, r4, #1
   17ac0:	add	r9, r3, r9
   17ac4:	ldr	r3, [sp, #56]	; 0x38
   17ac8:	add	r9, r3, r9
   17acc:	ldrb	r3, [r8, #1]!
   17ad0:	sub	r3, r3, #91	; 0x5b
   17ad4:	cmp	r3, #33	; 0x21
   17ad8:	ldrls	pc, [pc, r3, lsl #2]
   17adc:	b	17858 <lchmod@@Base+0x15e8>
   17ae0:	andeq	r7, r1, r8, ror #22
   17ae4:	andeq	r7, r1, r8, ror #22
   17ae8:	andeq	r7, r1, r8, asr r8
   17aec:	andeq	r7, r1, r8, ror #22
   17af0:	andeq	r7, r1, r8, asr r8
   17af4:	andeq	r7, r1, r8, ror #22
   17af8:	andeq	r7, r1, r8, asr r8
   17afc:	andeq	r7, r1, r8, asr r8
   17b00:	andeq	r7, r1, r8, asr r8
   17b04:	andeq	r7, r1, r8, asr r8
   17b08:	andeq	r7, r1, r8, asr r8
   17b0c:	andeq	r7, r1, r8, asr r8
   17b10:	andeq	r7, r1, r8, asr r8
   17b14:	andeq	r7, r1, r8, asr r8
   17b18:	andeq	r7, r1, r8, asr r8
   17b1c:	andeq	r7, r1, r8, asr r8
   17b20:	andeq	r7, r1, r8, asr r8
   17b24:	andeq	r7, r1, r8, asr r8
   17b28:	andeq	r7, r1, r8, asr r8
   17b2c:	andeq	r7, r1, r8, asr r8
   17b30:	andeq	r7, r1, r8, asr r8
   17b34:	andeq	r7, r1, r8, asr r8
   17b38:	andeq	r7, r1, r8, asr r8
   17b3c:	andeq	r7, r1, r8, asr r8
   17b40:	andeq	r7, r1, r8, asr r8
   17b44:	andeq	r7, r1, r8, asr r8
   17b48:	andeq	r7, r1, r8, asr r8
   17b4c:	andeq	r7, r1, r8, asr r8
   17b50:	andeq	r7, r1, r8, asr r8
   17b54:	andeq	r7, r1, r8, asr r8
   17b58:	andeq	r7, r1, r8, asr r8
   17b5c:	andeq	r7, r1, r8, asr r8
   17b60:	andeq	r7, r1, r8, asr r8
   17b64:	andeq	r7, r1, r8, ror #22
   17b68:	mov	r3, #2
   17b6c:	ldr	sl, [sp, #32]
   17b70:	mov	r8, fp
   17b74:	str	r3, [sp, #152]	; 0x98
   17b78:	b	172f0 <lchmod@@Base+0x1080>
   17b7c:	ldr	r3, [sp, #156]	; 0x9c
   17b80:	tst	r3, #1
   17b84:	bne	17cb0 <lchmod@@Base+0x1a40>
   17b88:	ldr	r3, [sp, #152]	; 0x98
   17b8c:	ldr	r4, [sp, #44]	; 0x2c
   17b90:	sub	r2, r3, #2
   17b94:	mov	r5, #0
   17b98:	clz	r2, r2
   17b9c:	mov	r8, r4
   17ba0:	lsr	r2, r2, #5
   17ba4:	b	170b0 <lchmod@@Base+0xe40>
   17ba8:	ldr	r3, [sp, #156]	; 0x9c
   17bac:	ands	r9, r3, #4
   17bb0:	beq	17ce8 <lchmod@@Base+0x1a78>
   17bb4:	ldr	r2, [sp, #24]
   17bb8:	add	r3, sl, #2
   17bbc:	cmp	r3, r2
   17bc0:	bcs	17bd4 <lchmod@@Base+0x1964>
   17bc4:	ldr	r2, [sp, #48]	; 0x30
   17bc8:	ldrb	r4, [r2, #1]
   17bcc:	cmp	r4, #63	; 0x3f
   17bd0:	beq	17e70 <lchmod@@Base+0x1c00>
   17bd4:	mov	r2, #0
   17bd8:	mov	r8, r2
   17bdc:	mov	r5, r2
   17be0:	mov	r4, #63	; 0x3f
   17be4:	b	170b0 <lchmod@@Base+0xe40>
   17be8:	ldr	r3, [sp, #28]
   17bec:	cmp	r3, #0
   17bf0:	bne	17f14 <lchmod@@Base+0x1ca4>
   17bf4:	mov	r2, r5
   17bf8:	mov	r8, r3
   17bfc:	mov	r5, #0
   17c00:	mov	r4, #63	; 0x3f
   17c04:	b	170b0 <lchmod@@Base+0xe40>
   17c08:	ldr	r3, [sp, #28]
   17c0c:	cmp	r3, #0
   17c10:	bne	17f14 <lchmod@@Base+0x1ca4>
   17c14:	ldr	r2, [sp, #72]	; 0x48
   17c18:	adds	r3, fp, #0
   17c1c:	movne	r3, #1
   17c20:	cmp	r2, #0
   17c24:	movne	r3, #0
   17c28:	cmp	r3, #0
   17c2c:	strne	fp, [sp, #72]	; 0x48
   17c30:	movne	fp, #0
   17c34:	bne	17c70 <lchmod@@Base+0x1a00>
   17c38:	cmp	fp, r7
   17c3c:	movhi	r2, #39	; 0x27
   17c40:	ldrhi	r3, [sp, #32]
   17c44:	strbhi	r2, [r3, r7]
   17c48:	add	r3, r7, #1
   17c4c:	cmp	fp, r3
   17c50:	movhi	r1, #92	; 0x5c
   17c54:	ldrhi	r2, [sp, #32]
   17c58:	strbhi	r1, [r2, r3]
   17c5c:	add	r3, r7, #2
   17c60:	cmp	fp, r3
   17c64:	movhi	r1, #39	; 0x27
   17c68:	ldrhi	r2, [sp, #32]
   17c6c:	strbhi	r1, [r2, r3]
   17c70:	ldr	r3, [sp, #28]
   17c74:	add	r7, r7, #3
   17c78:	mov	r2, r5
   17c7c:	mov	r8, r3
   17c80:	str	r5, [sp, #68]	; 0x44
   17c84:	str	r3, [sp, #40]	; 0x28
   17c88:	mov	r4, #39	; 0x27
   17c8c:	b	170b0 <lchmod@@Base+0xe40>
   17c90:	ldr	r3, [sp, #56]	; 0x38
   17c94:	ldrb	r3, [r3, #1]
   17c98:	adds	r3, r3, #0
   17c9c:	movne	r3, #1
   17ca0:	b	17088 <lchmod@@Base+0xe18>
   17ca4:	ldr	r5, [sp, #28]
   17ca8:	mov	r4, #48	; 0x30
   17cac:	b	170b0 <lchmod@@Base+0xe40>
   17cb0:	add	sl, sl, #1
   17cb4:	b	16be0 <lchmod@@Base+0x970>
   17cb8:	mov	sl, r3
   17cbc:	ldr	r3, [sp, #28]
   17cc0:	mov	r8, fp
   17cc4:	str	r3, [sp, #44]	; 0x2c
   17cc8:	ldr	r3, [sp, #152]	; 0x98
   17ccc:	sub	r2, r3, #2
   17cd0:	clz	r2, r2
   17cd4:	lsr	r2, r2, #5
   17cd8:	b	172f0 <lchmod@@Base+0x1080>
   17cdc:	str	ip, [sp, #40]	; 0x28
   17ce0:	ldr	r5, [sp, #48]	; 0x30
   17ce4:	b	17120 <lchmod@@Base+0xeb0>
   17ce8:	mov	r2, r9
   17cec:	mov	r8, r9
   17cf0:	mov	r5, #0
   17cf4:	mov	r4, #63	; 0x3f
   17cf8:	b	170b0 <lchmod@@Base+0xe40>
   17cfc:	cmp	fp, #0
   17d00:	beq	17d78 <lchmod@@Base+0x1b08>
   17d04:	ldr	r1, [sp, #32]
   17d08:	mov	r3, #34	; 0x22
   17d0c:	mov	r2, #1
   17d10:	strb	r3, [r1]
   17d14:	ldr	r3, [pc, #332]	; 17e68 <lchmod@@Base+0x1bf8>
   17d18:	str	r2, [sp, #52]	; 0x34
   17d1c:	mov	r7, r2
   17d20:	str	r2, [sp, #44]	; 0x2c
   17d24:	str	r3, [sp, #64]	; 0x40
   17d28:	b	16bd0 <lchmod@@Base+0x960>
   17d2c:	ldr	r3, [pc, #300]	; 17e60 <lchmod@@Base+0x1bf0>
   17d30:	str	r3, [sp, #64]	; 0x40
   17d34:	mov	r3, #0
   17d38:	str	r3, [sp, #28]
   17d3c:	mov	r3, #1
   17d40:	str	r3, [sp, #52]	; 0x34
   17d44:	mov	r7, r3
   17d48:	mov	r3, #2
   17d4c:	str	r3, [sp, #152]	; 0x98
   17d50:	b	16bd0 <lchmod@@Base+0x960>
   17d54:	bl	117d8 <abort@plt>
   17d58:	ldr	r0, [sp, #56]	; 0x38
   17d5c:	bl	11658 <strlen@plt>
   17d60:	str	r0, [sp, #24]
   17d64:	b	17a3c <lchmod@@Base+0x17cc>
   17d68:	mov	r5, r8
   17d6c:	mov	r4, #48	; 0x30
   17d70:	ldr	r8, [sp, #44]	; 0x2c
   17d74:	b	170b0 <lchmod@@Base+0xe40>
   17d78:	mov	r3, #1
   17d7c:	str	r3, [sp, #52]	; 0x34
   17d80:	mov	r7, r3
   17d84:	str	r3, [sp, #44]	; 0x2c
   17d88:	ldr	r3, [pc, #216]	; 17e68 <lchmod@@Base+0x1bf8>
   17d8c:	str	r3, [sp, #64]	; 0x40
   17d90:	b	16bd0 <lchmod@@Base+0x960>
   17d94:	ldr	sl, [sp, #32]
   17d98:	mov	r8, fp
   17d9c:	mov	r2, r3
   17da0:	b	172f0 <lchmod@@Base+0x1080>
   17da4:	mov	r3, r5
   17da8:	mov	r5, r2
   17dac:	b	175a8 <lchmod@@Base+0x1338>
   17db0:	ldr	r1, [sp, #24]
   17db4:	mov	r2, r5
   17db8:	cmp	r1, r9
   17dbc:	mov	ip, r5
   17dc0:	ldr	r4, [sp, #80]	; 0x50
   17dc4:	ldr	r5, [sp, #92]	; 0x5c
   17dc8:	ldr	r6, [sp, #84]	; 0x54
   17dcc:	ldr	r7, [sp, #88]	; 0x58
   17dd0:	bls	17e04 <lchmod@@Base+0x1b94>
   17dd4:	ldrb	r3, [r8]
   17dd8:	cmp	r3, #0
   17ddc:	bne	17df0 <lchmod@@Base+0x1b80>
   17de0:	b	17e08 <lchmod@@Base+0x1b98>
   17de4:	ldrb	r3, [r8, #1]!
   17de8:	cmp	r3, #0
   17dec:	beq	17f08 <lchmod@@Base+0x1c98>
   17df0:	add	r2, r2, #1
   17df4:	add	r3, sl, r2
   17df8:	cmp	r1, r3
   17dfc:	bhi	17de4 <lchmod@@Base+0x1b74>
   17e00:	mov	ip, r2
   17e04:	mov	r3, #0
   17e08:	mov	r2, r3
   17e0c:	b	178a0 <lchmod@@Base+0x1630>
   17e10:	mov	r3, #0
   17e14:	mov	ip, r5
   17e18:	ldr	r4, [sp, #80]	; 0x50
   17e1c:	ldr	r5, [sp, #92]	; 0x5c
   17e20:	ldr	r6, [sp, #84]	; 0x54
   17e24:	ldr	r7, [sp, #88]	; 0x58
   17e28:	mov	r2, r3
   17e2c:	b	178a0 <lchmod@@Base+0x1630>
   17e30:	mov	r3, r6
   17e34:	mov	ip, r5
   17e38:	eor	r5, r3, #1
   17e3c:	mov	r2, r6
   17e40:	ldr	r4, [sp, #80]	; 0x50
   17e44:	ldr	r6, [sp, #84]	; 0x54
   17e48:	ldr	r7, [sp, #88]	; 0x58
   17e4c:	uxtb	r5, r5
   17e50:	b	178a0 <lchmod@@Base+0x1630>
   17e54:	ldr	sl, [sp, #32]
   17e58:	mov	r8, fp
   17e5c:	b	17cc4 <lchmod@@Base+0x1a54>
   17e60:	andeq	sl, r1, r8, lsl #23
   17e64:	andeq	sl, r1, ip, lsl #23
   17e68:	andeq	sl, r1, r4, lsl #23
   17e6c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   17e70:	ldr	r2, [sp, #56]	; 0x38
   17e74:	ldrb	r1, [r2, r3]
   17e78:	sub	r2, r1, #33	; 0x21
   17e7c:	uxtb	r2, r2
   17e80:	cmp	r2, #29
   17e84:	bhi	17f24 <lchmod@@Base+0x1cb4>
   17e88:	ldr	r0, [pc, #-36]	; 17e6c <lchmod@@Base+0x1bfc>
   17e8c:	mov	ip, #1
   17e90:	ands	r2, r0, ip, lsl r2
   17e94:	beq	17f34 <lchmod@@Base+0x1cc4>
   17e98:	ldr	r2, [sp, #28]
   17e9c:	cmp	r2, #0
   17ea0:	bne	18034 <lchmod@@Base+0x1dc4>
   17ea4:	cmp	fp, r7
   17ea8:	ldr	r8, [sp, #28]
   17eac:	ldrhi	r2, [sp, #32]
   17eb0:	mov	sl, r3
   17eb4:	mov	r5, r8
   17eb8:	strbhi	r4, [r2, r7]
   17ebc:	add	r2, r7, #1
   17ec0:	cmp	fp, r2
   17ec4:	movhi	r0, #34	; 0x22
   17ec8:	ldrhi	ip, [sp, #32]
   17ecc:	mov	r4, r1
   17ed0:	strbhi	r0, [ip, r2]
   17ed4:	add	r2, r7, #2
   17ed8:	cmp	fp, r2
   17edc:	movhi	r0, #34	; 0x22
   17ee0:	ldrhi	ip, [sp, #32]
   17ee4:	strbhi	r0, [ip, r2]
   17ee8:	add	r2, r7, #3
   17eec:	cmp	fp, r2
   17ef0:	movhi	r0, #63	; 0x3f
   17ef4:	ldrhi	ip, [sp, #32]
   17ef8:	add	r7, r7, #4
   17efc:	strbhi	r0, [ip, r2]
   17f00:	mov	r2, r8
   17f04:	b	170b0 <lchmod@@Base+0xe40>
   17f08:	mov	ip, r2
   17f0c:	mov	r2, r3
   17f10:	b	178a0 <lchmod@@Base+0x1630>
   17f14:	ldr	sl, [sp, #32]
   17f18:	mov	r8, fp
   17f1c:	ldr	r2, [sp, #28]
   17f20:	b	172f0 <lchmod@@Base+0x1080>
   17f24:	mov	r2, #0
   17f28:	mov	r8, r2
   17f2c:	mov	r5, r2
   17f30:	b	170b0 <lchmod@@Base+0xe40>
   17f34:	mov	r8, r2
   17f38:	mov	r5, #0
   17f3c:	b	170b0 <lchmod@@Base+0xe40>
   17f40:	ldr	r1, [sp, #152]	; 0x98
   17f44:	bl	16a0c <lchmod@@Base+0x79c>
   17f48:	str	r0, [sp, #168]	; 0xa8
   17f4c:	b	16f6c <lchmod@@Base+0xcfc>
   17f50:	ldr	r1, [sp, #152]	; 0x98
   17f54:	bl	16a0c <lchmod@@Base+0x79c>
   17f58:	str	r0, [sp, #164]	; 0xa4
   17f5c:	b	16f4c <lchmod@@Base+0xcdc>
   17f60:	ldr	r7, [sp, #28]
   17f64:	b	16fac <lchmod@@Base+0xd3c>
   17f68:	ldr	sl, [sp, #32]
   17f6c:	ldr	r2, [sp, #68]	; 0x44
   17f70:	mov	r8, fp
   17f74:	mov	fp, r7
   17f78:	ldr	r3, [sp, #64]	; 0x40
   17f7c:	cmp	r3, #0
   17f80:	moveq	r2, #0
   17f84:	andne	r2, r2, #1
   17f88:	cmp	r2, #0
   17f8c:	beq	17fb8 <lchmod@@Base+0x1d48>
   17f90:	mov	r2, r3
   17f94:	ldrb	r3, [r3]
   17f98:	cmp	r3, #0
   17f9c:	beq	17fb8 <lchmod@@Base+0x1d48>
   17fa0:	cmp	r8, fp
   17fa4:	strbhi	r3, [sl, fp]
   17fa8:	ldrb	r3, [r2, #1]!
   17fac:	add	fp, fp, #1
   17fb0:	cmp	r3, #0
   17fb4:	bne	17fa0 <lchmod@@Base+0x1d30>
   17fb8:	cmp	r8, fp
   17fbc:	movhi	r3, #0
   17fc0:	strbhi	r3, [sl, fp]
   17fc4:	b	1734c <lchmod@@Base+0x10dc>
   17fc8:	ldr	r3, [sp, #168]	; 0xa8
   17fcc:	ldr	sl, [sp, #32]
   17fd0:	str	r3, [sp, #16]
   17fd4:	ldr	r3, [sp, #164]	; 0xa4
   17fd8:	mov	ip, #5
   17fdc:	str	r3, [sp, #12]
   17fe0:	ldr	r3, [sp, #160]	; 0xa0
   17fe4:	ldr	r2, [sp, #56]	; 0x38
   17fe8:	str	r3, [sp, #8]
   17fec:	ldr	r3, [sp, #156]	; 0x9c
   17ff0:	ldr	r1, [sp, #72]	; 0x48
   17ff4:	str	r3, [sp, #4]
   17ff8:	mov	r0, sl
   17ffc:	ldr	r3, [sp, #24]
   18000:	str	ip, [sp]
   18004:	bl	16b2c <lchmod@@Base+0x8bc>
   18008:	mov	fp, r0
   1800c:	b	1734c <lchmod@@Base+0x10dc>
   18010:	mov	r8, fp
   18014:	ldr	sl, [sp, #32]
   18018:	mov	fp, r7
   1801c:	mov	r2, r3
   18020:	b	17f78 <lchmod@@Base+0x1d08>
   18024:	mov	r8, fp
   18028:	ldr	sl, [sp, #32]
   1802c:	mov	fp, r7
   18030:	b	17f78 <lchmod@@Base+0x1d08>
   18034:	ldr	sl, [sp, #32]
   18038:	mov	r8, fp
   1803c:	b	17308 <lchmod@@Base+0x1098>
   18040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18044:	sub	sp, sp, #52	; 0x34
   18048:	mov	r4, r0
   1804c:	mov	r5, r3
   18050:	mov	sl, r1
   18054:	mov	fp, r2
   18058:	bl	11688 <__errno_location@plt>
   1805c:	ldr	r7, [pc, #412]	; 18200 <lchmod@@Base+0x1f90>
   18060:	cmn	r4, #-2147483647	; 0x80000001
   18064:	ldr	r6, [r7]
   18068:	mov	r8, r0
   1806c:	movne	r0, #0
   18070:	moveq	r0, #1
   18074:	ldr	r3, [r8]
   18078:	orrs	r0, r0, r4, lsr #31
   1807c:	str	r3, [sp, #24]
   18080:	bne	181fc <lchmod@@Base+0x1f8c>
   18084:	ldr	r2, [r7, #4]
   18088:	cmp	r4, r2
   1808c:	blt	180ec <lchmod@@Base+0x1e7c>
   18090:	add	r9, r7, #8
   18094:	cmp	r6, r9
   18098:	str	r2, [sp, #44]	; 0x2c
   1809c:	beq	181cc <lchmod@@Base+0x1f5c>
   180a0:	mov	r3, #8
   180a4:	sub	r2, r4, r2
   180a8:	mov	r0, r6
   180ac:	str	r3, [sp]
   180b0:	add	r2, r2, #1
   180b4:	mvn	r3, #-2147483648	; 0x80000000
   180b8:	add	r1, sp, #44	; 0x2c
   180bc:	bl	190f0 <lchmod@@Base+0x2e80>
   180c0:	mov	r6, r0
   180c4:	str	r0, [r7]
   180c8:	ldr	r0, [r7, #4]
   180cc:	ldr	r2, [sp, #44]	; 0x2c
   180d0:	mov	r1, #0
   180d4:	sub	r2, r2, r0
   180d8:	add	r0, r6, r0, lsl #3
   180dc:	lsl	r2, r2, #3
   180e0:	bl	116ac <memset@plt>
   180e4:	ldr	r3, [sp, #44]	; 0x2c
   180e8:	str	r3, [r7, #4]
   180ec:	add	r3, r6, r4, lsl #3
   180f0:	ldr	r1, [r5, #4]
   180f4:	ldr	r7, [r3, #4]
   180f8:	ldr	r9, [r6, r4, lsl #3]
   180fc:	ldr	r2, [r5, #40]	; 0x28
   18100:	ldr	ip, [r5, #44]	; 0x2c
   18104:	add	r0, r5, #8
   18108:	str	r3, [sp, #28]
   1810c:	ldr	r3, [r5]
   18110:	orr	r1, r1, #1
   18114:	mov	lr, r0
   18118:	str	r1, [sp, #32]
   1811c:	str	r0, [sp, #36]	; 0x24
   18120:	str	r1, [sp, #4]
   18124:	str	r2, [sp, #12]
   18128:	str	r3, [sp]
   1812c:	mov	r0, r7
   18130:	mov	r1, r9
   18134:	str	ip, [sp, #16]
   18138:	str	lr, [sp, #8]
   1813c:	mov	r3, fp
   18140:	mov	r2, sl
   18144:	bl	16b2c <lchmod@@Base+0x8bc>
   18148:	cmp	r9, r0
   1814c:	bhi	181b8 <lchmod@@Base+0x1f48>
   18150:	ldr	r3, [pc, #172]	; 18204 <lchmod@@Base+0x1f94>
   18154:	add	r9, r0, #1
   18158:	cmp	r7, r3
   1815c:	str	r9, [r6, r4, lsl #3]
   18160:	beq	1816c <lchmod@@Base+0x1efc>
   18164:	mov	r0, r7
   18168:	bl	12fdc <__assert_fail@plt+0x17b0>
   1816c:	mov	r0, r9
   18170:	bl	18f8c <lchmod@@Base+0x2d1c>
   18174:	ldr	lr, [sp, #28]
   18178:	ldr	ip, [r5, #44]	; 0x2c
   1817c:	ldr	r4, [r5, #40]	; 0x28
   18180:	mov	r3, fp
   18184:	mov	r2, sl
   18188:	mov	r1, r9
   1818c:	str	r0, [lr, #4]
   18190:	ldr	lr, [r5]
   18194:	ldr	r5, [sp, #36]	; 0x24
   18198:	str	ip, [sp, #16]
   1819c:	str	r5, [sp, #8]
   181a0:	ldr	r5, [sp, #32]
   181a4:	str	r4, [sp, #12]
   181a8:	str	r5, [sp, #4]
   181ac:	str	lr, [sp]
   181b0:	mov	r7, r0
   181b4:	bl	16b2c <lchmod@@Base+0x8bc>
   181b8:	ldr	r3, [sp, #24]
   181bc:	mov	r0, r7
   181c0:	str	r3, [r8]
   181c4:	add	sp, sp, #52	; 0x34
   181c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181cc:	mov	r3, #8
   181d0:	sub	r2, r4, r2
   181d4:	str	r3, [sp]
   181d8:	add	r1, sp, #44	; 0x2c
   181dc:	add	r2, r2, #1
   181e0:	mvn	r3, #-2147483648	; 0x80000000
   181e4:	bl	190f0 <lchmod@@Base+0x2e80>
   181e8:	mov	r6, r0
   181ec:	ldm	r9, {r0, r1}
   181f0:	str	r6, [r7]
   181f4:	stm	r6, {r0, r1}
   181f8:	b	180c8 <lchmod@@Base+0x1e58>
   181fc:	bl	117d8 <abort@plt>
   18200:	andeq	ip, r2, r4, lsl #3
   18204:	strdeq	ip, [r2], -r4
   18208:	push	{r4, r5, r6, lr}
   1820c:	mov	r5, r0
   18210:	bl	11688 <__errno_location@plt>
   18214:	cmp	r5, #0
   18218:	mov	r1, #48	; 0x30
   1821c:	mov	r4, r0
   18220:	ldr	r0, [pc, #16]	; 18238 <lchmod@@Base+0x1fc8>
   18224:	ldr	r6, [r4]
   18228:	movne	r0, r5
   1822c:	bl	193ec <lchmod@@Base+0x317c>
   18230:	str	r6, [r4]
   18234:	pop	{r4, r5, r6, pc}
   18238:	strdeq	ip, [r2], -r4
   1823c:	ldr	r3, [pc, #12]	; 18250 <lchmod@@Base+0x1fe0>
   18240:	cmp	r0, #0
   18244:	moveq	r0, r3
   18248:	ldr	r0, [r0]
   1824c:	bx	lr
   18250:	strdeq	ip, [r2], -r4
   18254:	ldr	r3, [pc, #12]	; 18268 <lchmod@@Base+0x1ff8>
   18258:	cmp	r0, #0
   1825c:	moveq	r0, r3
   18260:	str	r1, [r0]
   18264:	bx	lr
   18268:	strdeq	ip, [r2], -r4
   1826c:	ldr	r3, [pc, #52]	; 182a8 <lchmod@@Base+0x2038>
   18270:	cmp	r0, #0
   18274:	moveq	r0, r3
   18278:	add	r3, r0, #8
   1827c:	push	{lr}		; (str lr, [sp, #-4]!)
   18280:	lsr	lr, r1, #5
   18284:	and	r1, r1, #31
   18288:	ldr	ip, [r3, lr, lsl #2]
   1828c:	lsr	r0, ip, r1
   18290:	eor	r2, r2, r0
   18294:	and	r2, r2, #1
   18298:	and	r0, r0, #1
   1829c:	eor	r1, ip, r2, lsl r1
   182a0:	str	r1, [r3, lr, lsl #2]
   182a4:	pop	{pc}		; (ldr pc, [sp], #4)
   182a8:	strdeq	ip, [r2], -r4
   182ac:	ldr	r3, [pc, #16]	; 182c4 <lchmod@@Base+0x2054>
   182b0:	cmp	r0, #0
   182b4:	movne	r3, r0
   182b8:	ldr	r0, [r3, #4]
   182bc:	str	r1, [r3, #4]
   182c0:	bx	lr
   182c4:	strdeq	ip, [r2], -r4
   182c8:	ldr	r3, [pc, #44]	; 182fc <lchmod@@Base+0x208c>
   182cc:	cmp	r0, #0
   182d0:	moveq	r0, r3
   182d4:	mov	ip, #10
   182d8:	cmp	r2, #0
   182dc:	cmpne	r1, #0
   182e0:	str	ip, [r0]
   182e4:	beq	182f4 <lchmod@@Base+0x2084>
   182e8:	str	r1, [r0, #40]	; 0x28
   182ec:	str	r2, [r0, #44]	; 0x2c
   182f0:	bx	lr
   182f4:	push	{r4, lr}
   182f8:	bl	117d8 <abort@plt>
   182fc:	strdeq	ip, [r2], -r4
   18300:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18304:	sub	sp, sp, #24
   18308:	ldr	ip, [pc, #108]	; 1837c <lchmod@@Base+0x210c>
   1830c:	ldr	r4, [sp, #56]	; 0x38
   18310:	mov	r9, r2
   18314:	cmp	r4, #0
   18318:	moveq	r4, ip
   1831c:	mov	sl, r3
   18320:	mov	r7, r0
   18324:	mov	r8, r1
   18328:	bl	11688 <__errno_location@plt>
   1832c:	ldr	r3, [r4, #44]	; 0x2c
   18330:	mov	r1, r8
   18334:	ldr	r6, [r0]
   18338:	str	r3, [sp, #16]
   1833c:	ldr	r2, [r4, #40]	; 0x28
   18340:	add	r3, r4, #8
   18344:	str	r3, [sp, #8]
   18348:	str	r2, [sp, #12]
   1834c:	ldr	r2, [r4, #4]
   18350:	mov	r5, r0
   18354:	str	r2, [sp, #4]
   18358:	ldr	ip, [r4]
   1835c:	mov	r3, sl
   18360:	mov	r2, r9
   18364:	mov	r0, r7
   18368:	str	ip, [sp]
   1836c:	bl	16b2c <lchmod@@Base+0x8bc>
   18370:	str	r6, [r5]
   18374:	add	sp, sp, #24
   18378:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1837c:	strdeq	ip, [r2], -r4
   18380:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18384:	cmp	r3, #0
   18388:	sub	sp, sp, #44	; 0x2c
   1838c:	ldr	r4, [pc, #192]	; 18454 <lchmod@@Base+0x21e4>
   18390:	mov	r6, r2
   18394:	movne	r4, r3
   18398:	mov	r9, r1
   1839c:	mov	r8, r0
   183a0:	bl	11688 <__errno_location@plt>
   183a4:	ldr	r3, [r4, #44]	; 0x2c
   183a8:	ldr	r5, [r4, #4]
   183ac:	add	sl, r4, #8
   183b0:	cmp	r6, #0
   183b4:	orreq	r5, r5, #1
   183b8:	mov	r1, #0
   183bc:	ldr	r2, [r0]
   183c0:	str	r3, [sp, #16]
   183c4:	ldr	r3, [r4, #40]	; 0x28
   183c8:	stmib	sp, {r5, sl}
   183cc:	str	r3, [sp, #12]
   183d0:	ldr	r3, [r4]
   183d4:	mov	r7, r0
   183d8:	str	r2, [sp, #28]
   183dc:	str	r3, [sp]
   183e0:	mov	r2, r8
   183e4:	mov	r3, r9
   183e8:	mov	r0, r1
   183ec:	bl	16b2c <lchmod@@Base+0x8bc>
   183f0:	add	r1, r0, #1
   183f4:	mov	fp, r0
   183f8:	mov	r0, r1
   183fc:	str	r1, [sp, #36]	; 0x24
   18400:	bl	18f8c <lchmod@@Base+0x2d1c>
   18404:	ldr	r3, [r4, #44]	; 0x2c
   18408:	mov	r2, r8
   1840c:	str	r3, [sp, #16]
   18410:	ldr	r3, [r4, #40]	; 0x28
   18414:	str	r5, [sp, #4]
   18418:	str	r3, [sp, #12]
   1841c:	str	sl, [sp, #8]
   18420:	ldr	ip, [r4]
   18424:	ldr	r1, [sp, #36]	; 0x24
   18428:	mov	r3, r9
   1842c:	str	ip, [sp]
   18430:	str	r0, [sp, #32]
   18434:	bl	16b2c <lchmod@@Base+0x8bc>
   18438:	ldr	r2, [sp, #28]
   1843c:	cmp	r6, #0
   18440:	str	r2, [r7]
   18444:	ldr	r0, [sp, #32]
   18448:	strne	fp, [r6]
   1844c:	add	sp, sp, #44	; 0x2c
   18450:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18454:	strdeq	ip, [r2], -r4
   18458:	mov	r3, r2
   1845c:	mov	r2, #0
   18460:	b	18380 <lchmod@@Base+0x2110>
   18464:	push	{r4, r5, r6, r7, r8, lr}
   18468:	ldr	r6, [pc, #116]	; 184e4 <lchmod@@Base+0x2274>
   1846c:	ldr	r3, [r6, #4]
   18470:	ldr	r7, [r6]
   18474:	cmp	r3, #1
   18478:	movgt	r5, r7
   1847c:	movgt	r4, #1
   18480:	ble	184a0 <lchmod@@Base+0x2230>
   18484:	ldr	r0, [r5, #12]
   18488:	bl	12fdc <__assert_fail@plt+0x17b0>
   1848c:	ldr	r3, [r6, #4]
   18490:	add	r4, r4, #1
   18494:	cmp	r3, r4
   18498:	add	r5, r5, #8
   1849c:	bgt	18484 <lchmod@@Base+0x2214>
   184a0:	ldr	r0, [r7, #4]
   184a4:	ldr	r4, [pc, #60]	; 184e8 <lchmod@@Base+0x2278>
   184a8:	cmp	r0, r4
   184ac:	beq	184c0 <lchmod@@Base+0x2250>
   184b0:	bl	12fdc <__assert_fail@plt+0x17b0>
   184b4:	mov	r3, #256	; 0x100
   184b8:	str	r4, [r6, #12]
   184bc:	str	r3, [r6, #8]
   184c0:	ldr	r4, [pc, #36]	; 184ec <lchmod@@Base+0x227c>
   184c4:	cmp	r7, r4
   184c8:	beq	184d8 <lchmod@@Base+0x2268>
   184cc:	mov	r0, r7
   184d0:	bl	12fdc <__assert_fail@plt+0x17b0>
   184d4:	str	r4, [r6]
   184d8:	mov	r3, #1
   184dc:	str	r3, [r6, #4]
   184e0:	pop	{r4, r5, r6, r7, r8, pc}
   184e4:	andeq	ip, r2, r4, lsl #3
   184e8:	strdeq	ip, [r2], -r4
   184ec:	andeq	ip, r2, ip, lsl #3
   184f0:	ldr	r3, [pc, #4]	; 184fc <lchmod@@Base+0x228c>
   184f4:	mvn	r2, #0
   184f8:	b	18040 <lchmod@@Base+0x1dd0>
   184fc:	strdeq	ip, [r2], -r4
   18500:	ldr	r3, [pc]	; 18508 <lchmod@@Base+0x2298>
   18504:	b	18040 <lchmod@@Base+0x1dd0>
   18508:	strdeq	ip, [r2], -r4
   1850c:	mov	r1, r0
   18510:	ldr	r3, [pc, #8]	; 18520 <lchmod@@Base+0x22b0>
   18514:	mvn	r2, #0
   18518:	mov	r0, #0
   1851c:	b	18040 <lchmod@@Base+0x1dd0>
   18520:	strdeq	ip, [r2], -r4
   18524:	mov	r2, r1
   18528:	ldr	r3, [pc, #8]	; 18538 <lchmod@@Base+0x22c8>
   1852c:	mov	r1, r0
   18530:	mov	r0, #0
   18534:	b	18040 <lchmod@@Base+0x1dd0>
   18538:	strdeq	ip, [r2], -r4
   1853c:	push	{r4, r5, lr}
   18540:	sub	sp, sp, #52	; 0x34
   18544:	mov	r5, r2
   18548:	mov	r4, r0
   1854c:	mov	r0, sp
   18550:	bl	169dc <lchmod@@Base+0x76c>
   18554:	mov	r3, sp
   18558:	mov	r1, r5
   1855c:	mov	r0, r4
   18560:	mvn	r2, #0
   18564:	bl	18040 <lchmod@@Base+0x1dd0>
   18568:	add	sp, sp, #52	; 0x34
   1856c:	pop	{r4, r5, pc}
   18570:	push	{r4, r5, r6, lr}
   18574:	sub	sp, sp, #48	; 0x30
   18578:	mov	r5, r2
   1857c:	mov	r6, r3
   18580:	mov	r4, r0
   18584:	mov	r0, sp
   18588:	bl	169dc <lchmod@@Base+0x76c>
   1858c:	mov	r3, sp
   18590:	mov	r2, r6
   18594:	mov	r1, r5
   18598:	mov	r0, r4
   1859c:	bl	18040 <lchmod@@Base+0x1dd0>
   185a0:	add	sp, sp, #48	; 0x30
   185a4:	pop	{r4, r5, r6, pc}
   185a8:	mov	r2, r1
   185ac:	mov	r1, r0
   185b0:	mov	r0, #0
   185b4:	b	1853c <lchmod@@Base+0x22cc>
   185b8:	mov	r3, r2
   185bc:	mov	r2, r1
   185c0:	mov	r1, r0
   185c4:	mov	r0, #0
   185c8:	b	18570 <lchmod@@Base+0x2300>
   185cc:	push	{r4, r5, r6, r7, r8, lr}
   185d0:	mov	r7, r0
   185d4:	ldr	lr, [pc, #100]	; 18640 <lchmod@@Base+0x23d0>
   185d8:	mov	r8, r1
   185dc:	mov	r4, r2
   185e0:	ldm	lr!, {r0, r1, r2, r3}
   185e4:	sub	sp, sp, #48	; 0x30
   185e8:	mov	ip, sp
   185ec:	lsr	r5, r4, #5
   185f0:	stmia	ip!, {r0, r1, r2, r3}
   185f4:	add	r6, sp, #8
   185f8:	ldm	lr!, {r0, r1, r2, r3}
   185fc:	and	r4, r4, #31
   18600:	stmia	ip!, {r0, r1, r2, r3}
   18604:	ldm	lr, {r0, r1, r2, r3}
   18608:	stm	ip, {r0, r1, r2, r3}
   1860c:	mov	r2, r8
   18610:	ldr	lr, [r6, r5, lsl #2]
   18614:	mov	r1, r7
   18618:	mov	r3, sp
   1861c:	lsr	ip, lr, r4
   18620:	eor	ip, ip, #1
   18624:	and	ip, ip, #1
   18628:	mov	r0, #0
   1862c:	eor	r4, lr, ip, lsl r4
   18630:	str	r4, [r6, r5, lsl #2]
   18634:	bl	18040 <lchmod@@Base+0x1dd0>
   18638:	add	sp, sp, #48	; 0x30
   1863c:	pop	{r4, r5, r6, r7, r8, pc}
   18640:	strdeq	ip, [r2], -r4
   18644:	mov	r2, r1
   18648:	mvn	r1, #0
   1864c:	b	185cc <lchmod@@Base+0x235c>
   18650:	mov	r2, #58	; 0x3a
   18654:	mvn	r1, #0
   18658:	b	185cc <lchmod@@Base+0x235c>
   1865c:	mov	r2, #58	; 0x3a
   18660:	b	185cc <lchmod@@Base+0x235c>
   18664:	push	{r4, r5, r6, r7, lr}
   18668:	sub	sp, sp, #100	; 0x64
   1866c:	mov	r6, r0
   18670:	mov	r0, sp
   18674:	mov	r7, r2
   18678:	bl	169dc <lchmod@@Base+0x76c>
   1867c:	mov	ip, sp
   18680:	add	lr, sp, #48	; 0x30
   18684:	ldm	ip!, {r0, r1, r2, r3}
   18688:	stmia	lr!, {r0, r1, r2, r3}
   1868c:	ldm	ip!, {r0, r1, r2, r3}
   18690:	ldr	r5, [sp, #60]	; 0x3c
   18694:	stmia	lr!, {r0, r1, r2, r3}
   18698:	mvn	r4, r5
   1869c:	ldm	ip, {r0, r1, r2, r3}
   186a0:	and	ip, r4, #67108864	; 0x4000000
   186a4:	eor	ip, ip, r5
   186a8:	str	ip, [sp, #60]	; 0x3c
   186ac:	stm	lr, {r0, r1, r2, r3}
   186b0:	mov	r1, r7
   186b4:	mov	r0, r6
   186b8:	add	r3, sp, #48	; 0x30
   186bc:	mvn	r2, #0
   186c0:	bl	18040 <lchmod@@Base+0x1dd0>
   186c4:	add	sp, sp, #100	; 0x64
   186c8:	pop	{r4, r5, r6, r7, pc}
   186cc:	push	{r4, r5, r6, r7, r8, lr}
   186d0:	mov	r5, r1
   186d4:	ldr	lr, [pc, #100]	; 18740 <lchmod@@Base+0x24d0>
   186d8:	mov	r4, r2
   186dc:	mov	r7, r0
   186e0:	mov	r8, r3
   186e4:	ldm	lr!, {r0, r1, r2, r3}
   186e8:	sub	sp, sp, #48	; 0x30
   186ec:	mov	ip, sp
   186f0:	mov	r6, #10
   186f4:	stmia	ip!, {r0, r1, r2, r3}
   186f8:	cmp	r4, #0
   186fc:	cmpne	r5, #0
   18700:	ldm	lr!, {r0, r1, r2, r3}
   18704:	str	r6, [sp]
   18708:	stmia	ip!, {r0, r1, r2, r3}
   1870c:	ldm	lr, {r0, r1, r2, r3}
   18710:	stm	ip, {r0, r1, r2, r3}
   18714:	beq	1873c <lchmod@@Base+0x24cc>
   18718:	mov	r3, sp
   1871c:	mov	r1, r8
   18720:	mov	r0, r7
   18724:	ldr	r2, [sp, #72]	; 0x48
   18728:	str	r5, [sp, #40]	; 0x28
   1872c:	str	r4, [sp, #44]	; 0x2c
   18730:	bl	18040 <lchmod@@Base+0x1dd0>
   18734:	add	sp, sp, #48	; 0x30
   18738:	pop	{r4, r5, r6, r7, r8, pc}
   1873c:	bl	117d8 <abort@plt>
   18740:	strdeq	ip, [r2], -r4
   18744:	push	{lr}		; (str lr, [sp, #-4]!)
   18748:	sub	sp, sp, #12
   1874c:	mvn	ip, #0
   18750:	str	ip, [sp]
   18754:	bl	186cc <lchmod@@Base+0x245c>
   18758:	add	sp, sp, #12
   1875c:	pop	{pc}		; (ldr pc, [sp], #4)
   18760:	push	{lr}		; (str lr, [sp, #-4]!)
   18764:	sub	sp, sp, #12
   18768:	mvn	ip, #0
   1876c:	mov	r3, r2
   18770:	str	ip, [sp]
   18774:	mov	r2, r1
   18778:	mov	r1, r0
   1877c:	mov	r0, #0
   18780:	bl	186cc <lchmod@@Base+0x245c>
   18784:	add	sp, sp, #12
   18788:	pop	{pc}		; (ldr pc, [sp], #4)
   1878c:	push	{lr}		; (str lr, [sp, #-4]!)
   18790:	sub	sp, sp, #12
   18794:	str	r3, [sp]
   18798:	mov	r3, r2
   1879c:	mov	r2, r1
   187a0:	mov	r1, r0
   187a4:	mov	r0, #0
   187a8:	bl	186cc <lchmod@@Base+0x245c>
   187ac:	add	sp, sp, #12
   187b0:	pop	{pc}		; (ldr pc, [sp], #4)
   187b4:	ldr	r3, [pc]	; 187bc <lchmod@@Base+0x254c>
   187b8:	b	18040 <lchmod@@Base+0x1dd0>
   187bc:	muleq	r2, r4, r1
   187c0:	mov	r2, r1
   187c4:	ldr	r3, [pc, #8]	; 187d4 <lchmod@@Base+0x2564>
   187c8:	mov	r1, r0
   187cc:	mov	r0, #0
   187d0:	b	18040 <lchmod@@Base+0x1dd0>
   187d4:	muleq	r2, r4, r1
   187d8:	ldr	r3, [pc, #4]	; 187e4 <lchmod@@Base+0x2574>
   187dc:	mvn	r2, #0
   187e0:	b	18040 <lchmod@@Base+0x1dd0>
   187e4:	muleq	r2, r4, r1
   187e8:	mov	r1, r0
   187ec:	ldr	r3, [pc, #8]	; 187fc <lchmod@@Base+0x258c>
   187f0:	mvn	r2, #0
   187f4:	mov	r0, #0
   187f8:	b	18040 <lchmod@@Base+0x1dd0>
   187fc:	muleq	r2, r4, r1
   18800:	push	{r4, r5, r6, lr}
   18804:	ldr	r4, [r0], #8
   18808:	cmp	r4, r0
   1880c:	beq	1882c <lchmod@@Base+0x25bc>
   18810:	mov	r0, r4
   18814:	bl	195e0 <lchmod@@Base+0x3370>
   18818:	cmp	r0, #0
   1881c:	movne	r3, r0
   18820:	moveq	r3, r4
   18824:	mov	r0, r3
   18828:	pop	{r4, r5, r6, pc}
   1882c:	mov	r0, r1
   18830:	mov	r5, r1
   18834:	bl	195b4 <lchmod@@Base+0x3344>
   18838:	subs	r3, r0, #0
   1883c:	beq	18824 <lchmod@@Base+0x25b4>
   18840:	mov	r2, r5
   18844:	mov	r1, r4
   18848:	pop	{r4, r5, r6, lr}
   1884c:	b	114b4 <memcpy@plt>
   18850:	push	{r4, r5, r6, lr}
   18854:	mov	r5, r0
   18858:	ldr	r3, [r0, #4]
   1885c:	mov	r4, r0
   18860:	ldr	r0, [r5], #8
   18864:	lsl	r6, r3, #1
   18868:	cmp	r0, r5
   1886c:	beq	18878 <lchmod@@Base+0x2608>
   18870:	bl	12fdc <__assert_fail@plt+0x17b0>
   18874:	ldr	r3, [r4, #4]
   18878:	cmp	r6, r3
   1887c:	bcc	1889c <lchmod@@Base+0x262c>
   18880:	mov	r0, r6
   18884:	bl	195b4 <lchmod@@Base+0x3344>
   18888:	subs	r3, r0, #0
   1888c:	beq	188a8 <lchmod@@Base+0x2638>
   18890:	mov	r0, #1
   18894:	stm	r4, {r3, r6}
   18898:	pop	{r4, r5, r6, pc}
   1889c:	bl	11688 <__errno_location@plt>
   188a0:	mov	r3, #12
   188a4:	str	r3, [r0]
   188a8:	mov	r3, #1024	; 0x400
   188ac:	str	r5, [r4]
   188b0:	str	r3, [r4, #4]
   188b4:	mov	r0, #0
   188b8:	pop	{r4, r5, r6, pc}
   188bc:	push	{r4, r5, r6, r7, r8, lr}
   188c0:	mov	r5, r0
   188c4:	ldr	r3, [r0, #4]
   188c8:	ldr	r8, [r5], #8
   188cc:	mov	r4, r0
   188d0:	cmp	r8, r5
   188d4:	lsl	r7, r3, #1
   188d8:	beq	18930 <lchmod@@Base+0x26c0>
   188dc:	cmp	r3, r7
   188e0:	bhi	18908 <lchmod@@Base+0x2698>
   188e4:	mov	r0, r8
   188e8:	mov	r1, r7
   188ec:	bl	195e0 <lchmod@@Base+0x3370>
   188f0:	subs	r6, r0, #0
   188f4:	ldreq	r8, [r4]
   188f8:	beq	18914 <lchmod@@Base+0x26a4>
   188fc:	stm	r4, {r6, r7}
   18900:	mov	r0, #1
   18904:	pop	{r4, r5, r6, r7, r8, pc}
   18908:	bl	11688 <__errno_location@plt>
   1890c:	mov	r3, #12
   18910:	str	r3, [r0]
   18914:	mov	r0, r8
   18918:	bl	12fdc <__assert_fail@plt+0x17b0>
   1891c:	mov	r3, #1024	; 0x400
   18920:	str	r5, [r4]
   18924:	str	r3, [r4, #4]
   18928:	mov	r0, #0
   1892c:	pop	{r4, r5, r6, r7, r8, pc}
   18930:	mov	r0, r7
   18934:	bl	195b4 <lchmod@@Base+0x3344>
   18938:	subs	r6, r0, #0
   1893c:	beq	18928 <lchmod@@Base+0x26b8>
   18940:	mov	r1, r8
   18944:	ldr	r2, [r4, #4]
   18948:	bl	114b4 <memcpy@plt>
   1894c:	b	188fc <lchmod@@Base+0x268c>
   18950:	push	{r4, r5, r6, r7, r8, lr}
   18954:	subs	r4, r0, #0
   18958:	beq	189a8 <lchmod@@Base+0x2738>
   1895c:	cmp	r4, #10
   18960:	beq	1896c <lchmod@@Base+0x26fc>
   18964:	mov	r0, r4
   18968:	pop	{r4, r5, r6, r7, r8, pc}
   1896c:	ldr	r6, [r1]
   18970:	mov	r5, r1
   18974:	mov	r0, r6
   18978:	ldr	r1, [pc, #60]	; 189bc <lchmod@@Base+0x274c>
   1897c:	bl	11454 <strcmp@plt>
   18980:	subs	r7, r0, #0
   18984:	bne	18964 <lchmod@@Base+0x26f4>
   18988:	mov	r0, r6
   1898c:	bl	11778 <freecon@plt>
   18990:	str	r7, [r5]
   18994:	bl	11688 <__errno_location@plt>
   18998:	mov	r3, #61	; 0x3d
   1899c:	mvn	r4, #0
   189a0:	str	r3, [r0]
   189a4:	b	18964 <lchmod@@Base+0x26f4>
   189a8:	bl	11688 <__errno_location@plt>
   189ac:	mov	r3, #95	; 0x5f
   189b0:	mvn	r4, #0
   189b4:	str	r3, [r0]
   189b8:	b	18964 <lchmod@@Base+0x26f4>
   189bc:	strdeq	sl, [r1], -r4
   189c0:	push	{r4, lr}
   189c4:	mov	r4, r1
   189c8:	bl	1164c <getfilecon@plt>
   189cc:	mov	r1, r4
   189d0:	pop	{r4, lr}
   189d4:	b	18950 <lchmod@@Base+0x26e0>
   189d8:	push	{r4, lr}
   189dc:	mov	r4, r1
   189e0:	bl	115c8 <lgetfilecon@plt>
   189e4:	mov	r1, r4
   189e8:	pop	{r4, lr}
   189ec:	b	18950 <lchmod@@Base+0x26e0>
   189f0:	push	{r4, lr}
   189f4:	mov	r4, r1
   189f8:	bl	11514 <fgetfilecon@plt>
   189fc:	mov	r1, r4
   18a00:	pop	{r4, lr}
   18a04:	b	18950 <lchmod@@Base+0x26e0>
   18a08:	cmp	r0, #2
   18a0c:	push	{r4, r5, r6, r7, r8, lr}
   18a10:	mov	r4, r0
   18a14:	bhi	18a3c <lchmod@@Base+0x27cc>
   18a18:	bl	19d10 <lchmod@@Base+0x3aa0>
   18a1c:	mov	r7, r0
   18a20:	bl	11688 <__errno_location@plt>
   18a24:	mov	r5, r0
   18a28:	mov	r0, r4
   18a2c:	ldr	r6, [r5]
   18a30:	mov	r4, r7
   18a34:	bl	117e4 <close@plt>
   18a38:	str	r6, [r5]
   18a3c:	mov	r0, r4
   18a40:	pop	{r4, r5, r6, r7, r8, pc}
   18a44:	push	{r4, r5, r6, lr}
   18a48:	sub	sp, sp, #32
   18a4c:	cmp	r1, #0
   18a50:	mov	r4, r0
   18a54:	ldr	r5, [sp, #48]	; 0x30
   18a58:	ldr	r6, [sp, #52]	; 0x34
   18a5c:	beq	18d74 <lchmod@@Base+0x2b04>
   18a60:	stm	sp, {r2, r3}
   18a64:	mov	r3, r1
   18a68:	ldr	r2, [pc, #808]	; 18d98 <lchmod@@Base+0x2b28>
   18a6c:	mov	r1, #1
   18a70:	bl	116d0 <__fprintf_chk@plt>
   18a74:	mov	r2, #5
   18a78:	ldr	r1, [pc, #796]	; 18d9c <lchmod@@Base+0x2b2c>
   18a7c:	mov	r0, #0
   18a80:	bl	114f0 <dcgettext@plt>
   18a84:	ldr	r3, [pc, #788]	; 18da0 <lchmod@@Base+0x2b30>
   18a88:	ldr	r2, [pc, #788]	; 18da4 <lchmod@@Base+0x2b34>
   18a8c:	str	r3, [sp]
   18a90:	mov	r1, #1
   18a94:	mov	r3, r0
   18a98:	mov	r0, r4
   18a9c:	bl	116d0 <__fprintf_chk@plt>
   18aa0:	mov	r1, r4
   18aa4:	mov	r0, #10
   18aa8:	bl	114e4 <fputc_unlocked@plt>
   18aac:	mov	r2, #5
   18ab0:	ldr	r1, [pc, #752]	; 18da8 <lchmod@@Base+0x2b38>
   18ab4:	mov	r0, #0
   18ab8:	bl	114f0 <dcgettext@plt>
   18abc:	mov	r1, #1
   18ac0:	ldr	r3, [pc, #740]	; 18dac <lchmod@@Base+0x2b3c>
   18ac4:	mov	r2, r0
   18ac8:	mov	r0, r4
   18acc:	bl	116d0 <__fprintf_chk@plt>
   18ad0:	mov	r1, r4
   18ad4:	mov	r0, #10
   18ad8:	bl	114e4 <fputc_unlocked@plt>
   18adc:	cmp	r6, #9
   18ae0:	ldrls	pc, [pc, r6, lsl #2]
   18ae4:	b	18d8c <lchmod@@Base+0x2b1c>
   18ae8:	andeq	r8, r1, ip, ror #22
   18aec:	andeq	r8, r1, r4, ror fp
   18af0:	andeq	r8, r1, r0, lsr #23
   18af4:	ldrdeq	r8, [r1], -r4
   18af8:	andeq	r8, r1, r0, lsl ip
   18afc:	andeq	r8, r1, ip, asr #24
   18b00:	andeq	r8, r1, r8, lsl #25
   18b04:	andeq	r8, r1, ip, asr #25
   18b08:	andeq	r8, r1, ip, lsl sp
   18b0c:	andeq	r8, r1, r0, lsl fp
   18b10:	ldr	r1, [pc, #664]	; 18db0 <lchmod@@Base+0x2b40>
   18b14:	mov	r2, #5
   18b18:	mov	r0, #0
   18b1c:	bl	114f0 <dcgettext@plt>
   18b20:	ldr	ip, [r5, #32]
   18b24:	ldr	r1, [r5, #28]
   18b28:	ldr	r2, [r5, #24]
   18b2c:	ldr	r3, [r5]
   18b30:	ldr	r6, [r5, #20]
   18b34:	str	ip, [sp, #28]
   18b38:	ldr	lr, [r5, #16]
   18b3c:	str	r1, [sp, #24]
   18b40:	ldr	ip, [r5, #12]
   18b44:	str	r2, [sp, #20]
   18b48:	ldr	r1, [r5, #8]
   18b4c:	ldr	r2, [r5, #4]
   18b50:	str	r6, [sp, #16]
   18b54:	stmib	sp, {r1, ip, lr}
   18b58:	mov	r1, #1
   18b5c:	str	r2, [sp]
   18b60:	mov	r2, r0
   18b64:	mov	r0, r4
   18b68:	bl	116d0 <__fprintf_chk@plt>
   18b6c:	add	sp, sp, #32
   18b70:	pop	{r4, r5, r6, pc}
   18b74:	mov	r2, #5
   18b78:	ldr	r1, [pc, #564]	; 18db4 <lchmod@@Base+0x2b44>
   18b7c:	mov	r0, #0
   18b80:	bl	114f0 <dcgettext@plt>
   18b84:	ldr	r3, [r5]
   18b88:	mov	r1, #1
   18b8c:	mov	r2, r0
   18b90:	mov	r0, r4
   18b94:	add	sp, sp, #32
   18b98:	pop	{r4, r5, r6, lr}
   18b9c:	b	116d0 <__fprintf_chk@plt>
   18ba0:	mov	r2, #5
   18ba4:	ldr	r1, [pc, #524]	; 18db8 <lchmod@@Base+0x2b48>
   18ba8:	mov	r0, #0
   18bac:	bl	114f0 <dcgettext@plt>
   18bb0:	ldr	r2, [r5, #4]
   18bb4:	ldr	r3, [r5]
   18bb8:	mov	r1, #1
   18bbc:	str	r2, [sp, #48]	; 0x30
   18bc0:	mov	r2, r0
   18bc4:	mov	r0, r4
   18bc8:	add	sp, sp, #32
   18bcc:	pop	{r4, r5, r6, lr}
   18bd0:	b	116d0 <__fprintf_chk@plt>
   18bd4:	mov	r2, #5
   18bd8:	ldr	r1, [pc, #476]	; 18dbc <lchmod@@Base+0x2b4c>
   18bdc:	mov	r0, #0
   18be0:	bl	114f0 <dcgettext@plt>
   18be4:	ldr	r1, [r5, #8]
   18be8:	ldr	r2, [r5, #4]
   18bec:	ldr	r3, [r5]
   18bf0:	str	r1, [sp, #52]	; 0x34
   18bf4:	str	r2, [sp, #48]	; 0x30
   18bf8:	mov	r1, #1
   18bfc:	mov	r2, r0
   18c00:	mov	r0, r4
   18c04:	add	sp, sp, #32
   18c08:	pop	{r4, r5, r6, lr}
   18c0c:	b	116d0 <__fprintf_chk@plt>
   18c10:	mov	r2, #5
   18c14:	ldr	r1, [pc, #420]	; 18dc0 <lchmod@@Base+0x2b50>
   18c18:	mov	r0, #0
   18c1c:	bl	114f0 <dcgettext@plt>
   18c20:	ldr	r1, [r5, #8]
   18c24:	ldr	ip, [r5, #12]
   18c28:	ldr	r2, [r5, #4]
   18c2c:	ldr	r3, [r5]
   18c30:	stmib	sp, {r1, ip}
   18c34:	str	r2, [sp]
   18c38:	mov	r1, #1
   18c3c:	mov	r2, r0
   18c40:	mov	r0, r4
   18c44:	bl	116d0 <__fprintf_chk@plt>
   18c48:	b	18b6c <lchmod@@Base+0x28fc>
   18c4c:	mov	r2, #5
   18c50:	ldr	r1, [pc, #364]	; 18dc4 <lchmod@@Base+0x2b54>
   18c54:	mov	r0, #0
   18c58:	bl	114f0 <dcgettext@plt>
   18c5c:	add	r1, r5, #8
   18c60:	ldr	r2, [r5, #4]
   18c64:	ldm	r1, {r1, ip, lr}
   18c68:	ldr	r3, [r5]
   18c6c:	str	r2, [sp]
   18c70:	stmib	sp, {r1, ip, lr}
   18c74:	mov	r1, #1
   18c78:	mov	r2, r0
   18c7c:	mov	r0, r4
   18c80:	bl	116d0 <__fprintf_chk@plt>
   18c84:	b	18b6c <lchmod@@Base+0x28fc>
   18c88:	mov	r2, #5
   18c8c:	ldr	r1, [pc, #308]	; 18dc8 <lchmod@@Base+0x2b58>
   18c90:	mov	r0, #0
   18c94:	bl	114f0 <dcgettext@plt>
   18c98:	add	r1, r5, #8
   18c9c:	ldr	r2, [r5, #4]
   18ca0:	ldm	r1, {r1, ip, lr}
   18ca4:	ldr	r6, [r5, #20]
   18ca8:	ldr	r3, [r5]
   18cac:	stmib	sp, {r1, ip, lr}
   18cb0:	mov	r1, #1
   18cb4:	str	r2, [sp]
   18cb8:	str	r6, [sp, #16]
   18cbc:	mov	r2, r0
   18cc0:	mov	r0, r4
   18cc4:	bl	116d0 <__fprintf_chk@plt>
   18cc8:	b	18b6c <lchmod@@Base+0x28fc>
   18ccc:	mov	r2, #5
   18cd0:	ldr	r1, [pc, #244]	; 18dcc <lchmod@@Base+0x2b5c>
   18cd4:	mov	r0, #0
   18cd8:	bl	114f0 <dcgettext@plt>
   18cdc:	ldr	r2, [r5, #24]
   18ce0:	ldr	r3, [r5]
   18ce4:	ldr	r6, [r5, #20]
   18ce8:	ldr	lr, [r5, #16]
   18cec:	ldr	ip, [r5, #12]
   18cf0:	str	r2, [sp, #20]
   18cf4:	ldr	r1, [r5, #8]
   18cf8:	ldr	r2, [r5, #4]
   18cfc:	str	r6, [sp, #16]
   18d00:	stmib	sp, {r1, ip, lr}
   18d04:	mov	r1, #1
   18d08:	str	r2, [sp]
   18d0c:	mov	r2, r0
   18d10:	mov	r0, r4
   18d14:	bl	116d0 <__fprintf_chk@plt>
   18d18:	b	18b6c <lchmod@@Base+0x28fc>
   18d1c:	mov	r2, #5
   18d20:	ldr	r1, [pc, #168]	; 18dd0 <lchmod@@Base+0x2b60>
   18d24:	mov	r0, #0
   18d28:	bl	114f0 <dcgettext@plt>
   18d2c:	ldr	r1, [r5, #28]
   18d30:	ldr	r2, [r5, #24]
   18d34:	ldr	r3, [r5]
   18d38:	ldr	r6, [r5, #20]
   18d3c:	ldr	lr, [r5, #16]
   18d40:	str	r1, [sp, #24]
   18d44:	ldr	ip, [r5, #12]
   18d48:	str	r2, [sp, #20]
   18d4c:	ldr	r1, [r5, #8]
   18d50:	ldr	r2, [r5, #4]
   18d54:	str	r6, [sp, #16]
   18d58:	stmib	sp, {r1, ip, lr}
   18d5c:	mov	r1, #1
   18d60:	str	r2, [sp]
   18d64:	mov	r2, r0
   18d68:	mov	r0, r4
   18d6c:	bl	116d0 <__fprintf_chk@plt>
   18d70:	b	18b6c <lchmod@@Base+0x28fc>
   18d74:	str	r3, [sp]
   18d78:	mov	r1, #1
   18d7c:	mov	r3, r2
   18d80:	ldr	r2, [pc, #76]	; 18dd4 <lchmod@@Base+0x2b64>
   18d84:	bl	116d0 <__fprintf_chk@plt>
   18d88:	b	18a74 <lchmod@@Base+0x2804>
   18d8c:	mov	r2, #5
   18d90:	ldr	r1, [pc, #64]	; 18dd8 <lchmod@@Base+0x2b68>
   18d94:	b	18b18 <lchmod@@Base+0x28a8>
   18d98:	andeq	sl, r1, r0, lsl #24
   18d9c:	andeq	sl, r1, r4, lsl ip
   18da0:	andeq	r0, r0, r6, ror #15
   18da4:	andeq	sl, r1, ip, ror #29
   18da8:	andeq	sl, r1, r8, lsl ip
   18dac:	andeq	sl, r1, r4, asr #25
   18db0:	strdeq	sl, [r1], -r4
   18db4:	andeq	sl, r1, r8, ror #25
   18db8:	strdeq	sl, [r1], -r8
   18dbc:	andeq	sl, r1, r0, lsl sp
   18dc0:	andeq	sl, r1, ip, lsr #26
   18dc4:	andeq	sl, r1, ip, asr #26
   18dc8:	andeq	sl, r1, r0, ror sp
   18dcc:	muleq	r1, r8, sp
   18dd0:	andeq	sl, r1, r4, asr #27
   18dd4:	andeq	sl, r1, ip, lsl #24
   18dd8:	andeq	sl, r1, r8, lsr #28
   18ddc:	push	{r4, r5, lr}
   18de0:	sub	sp, sp, #12
   18de4:	ldr	r5, [sp, #24]
   18de8:	ldr	ip, [r5]
   18dec:	cmp	ip, #0
   18df0:	beq	18e0c <lchmod@@Base+0x2b9c>
   18df4:	mov	lr, r5
   18df8:	mov	ip, #0
   18dfc:	ldr	r4, [lr, #4]!
   18e00:	add	ip, ip, #1
   18e04:	cmp	r4, #0
   18e08:	bne	18dfc <lchmod@@Base+0x2b8c>
   18e0c:	stm	sp, {r5, ip}
   18e10:	bl	18a44 <lchmod@@Base+0x27d4>
   18e14:	add	sp, sp, #12
   18e18:	pop	{r4, r5, pc}
   18e1c:	push	{r4, r5, lr}
   18e20:	sub	sp, sp, #52	; 0x34
   18e24:	add	r5, sp, #4
   18e28:	ldr	r4, [sp, #64]	; 0x40
   18e2c:	mov	ip, #0
   18e30:	sub	r4, r4, #4
   18e34:	ldr	lr, [r4, #4]!
   18e38:	cmp	lr, #0
   18e3c:	str	lr, [r5, #4]!
   18e40:	beq	18e50 <lchmod@@Base+0x2be0>
   18e44:	add	ip, ip, #1
   18e48:	cmp	ip, #10
   18e4c:	bne	18e34 <lchmod@@Base+0x2bc4>
   18e50:	add	lr, sp, #8
   18e54:	str	ip, [sp, #4]
   18e58:	str	lr, [sp]
   18e5c:	bl	18a44 <lchmod@@Base+0x27d4>
   18e60:	add	sp, sp, #52	; 0x34
   18e64:	pop	{r4, r5, pc}
   18e68:	push	{r3}		; (str r3, [sp, #-4]!)
   18e6c:	push	{r4, lr}
   18e70:	sub	sp, sp, #60	; 0x3c
   18e74:	add	lr, sp, #56	; 0x38
   18e78:	add	r3, sp, #72	; 0x48
   18e7c:	str	r3, [lr, #-44]!	; 0xffffffd4
   18e80:	add	r4, sp, #68	; 0x44
   18e84:	mov	r3, #0
   18e88:	ldr	ip, [r4, #4]!
   18e8c:	cmp	ip, #0
   18e90:	str	ip, [lr, #4]!
   18e94:	beq	18ea4 <lchmod@@Base+0x2c34>
   18e98:	add	r3, r3, #1
   18e9c:	cmp	r3, #10
   18ea0:	bne	18e88 <lchmod@@Base+0x2c18>
   18ea4:	add	ip, sp, #16
   18ea8:	str	r3, [sp, #4]
   18eac:	str	ip, [sp]
   18eb0:	ldr	r3, [sp, #68]	; 0x44
   18eb4:	bl	18a44 <lchmod@@Base+0x27d4>
   18eb8:	add	sp, sp, #60	; 0x3c
   18ebc:	pop	{r4, lr}
   18ec0:	add	sp, sp, #4
   18ec4:	bx	lr
   18ec8:	ldr	r3, [pc, #116]	; 18f44 <lchmod@@Base+0x2cd4>
   18ecc:	push	{r4, lr}
   18ed0:	mov	r0, #10
   18ed4:	ldr	r1, [r3]
   18ed8:	bl	114e4 <fputc_unlocked@plt>
   18edc:	mov	r2, #5
   18ee0:	ldr	r1, [pc, #96]	; 18f48 <lchmod@@Base+0x2cd8>
   18ee4:	mov	r0, #0
   18ee8:	bl	114f0 <dcgettext@plt>
   18eec:	ldr	r2, [pc, #88]	; 18f4c <lchmod@@Base+0x2cdc>
   18ef0:	mov	r1, r0
   18ef4:	mov	r0, #1
   18ef8:	bl	116b8 <__printf_chk@plt>
   18efc:	mov	r2, #5
   18f00:	ldr	r1, [pc, #72]	; 18f50 <lchmod@@Base+0x2ce0>
   18f04:	mov	r0, #0
   18f08:	bl	114f0 <dcgettext@plt>
   18f0c:	ldr	r3, [pc, #64]	; 18f54 <lchmod@@Base+0x2ce4>
   18f10:	ldr	r2, [pc, #64]	; 18f58 <lchmod@@Base+0x2ce8>
   18f14:	mov	r1, r0
   18f18:	mov	r0, #1
   18f1c:	bl	116b8 <__printf_chk@plt>
   18f20:	mov	r2, #5
   18f24:	ldr	r1, [pc, #48]	; 18f5c <lchmod@@Base+0x2cec>
   18f28:	mov	r0, #0
   18f2c:	bl	114f0 <dcgettext@plt>
   18f30:	ldr	r2, [pc, #40]	; 18f60 <lchmod@@Base+0x2cf0>
   18f34:	pop	{r4, lr}
   18f38:	mov	r1, r0
   18f3c:	mov	r0, #1
   18f40:	b	116b8 <__printf_chk@plt>
   18f44:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   18f48:	andeq	sl, r1, r4, ror #28
   18f4c:	andeq	sl, r1, r8, ror lr
   18f50:	muleq	r1, r0, lr
   18f54:	andeq	sl, r1, ip, asr #14
   18f58:	andeq	sl, r1, r4, ror r7
   18f5c:	andeq	sl, r1, r4, lsr #29
   18f60:	andeq	sl, r1, ip, asr #29
   18f64:	push	{r4, lr}
   18f68:	bl	195b4 <lchmod@@Base+0x3344>
   18f6c:	cmp	r0, #0
   18f70:	popne	{r4, pc}
   18f74:	bl	194ac <lchmod@@Base+0x323c>
   18f78:	push	{r4, lr}
   18f7c:	bl	195b4 <lchmod@@Base+0x3344>
   18f80:	cmp	r0, #0
   18f84:	popne	{r4, pc}
   18f88:	bl	194ac <lchmod@@Base+0x323c>
   18f8c:	push	{r4, lr}
   18f90:	bl	195b4 <lchmod@@Base+0x3344>
   18f94:	cmp	r0, #0
   18f98:	popne	{r4, pc}
   18f9c:	bl	194ac <lchmod@@Base+0x323c>
   18fa0:	push	{r4, r5, r6, lr}
   18fa4:	mov	r5, r0
   18fa8:	mov	r4, r1
   18fac:	bl	195e0 <lchmod@@Base+0x3370>
   18fb0:	cmp	r0, #0
   18fb4:	popne	{r4, r5, r6, pc}
   18fb8:	adds	r4, r4, #0
   18fbc:	movne	r4, #1
   18fc0:	cmp	r5, #0
   18fc4:	orreq	r4, r4, #1
   18fc8:	cmp	r4, #0
   18fcc:	popeq	{r4, r5, r6, pc}
   18fd0:	bl	194ac <lchmod@@Base+0x323c>
   18fd4:	push	{r4, lr}
   18fd8:	cmp	r1, #0
   18fdc:	orreq	r1, r1, #1
   18fe0:	bl	195e0 <lchmod@@Base+0x3370>
   18fe4:	cmp	r0, #0
   18fe8:	popne	{r4, pc}
   18fec:	bl	194ac <lchmod@@Base+0x323c>
   18ff0:	push	{r4, r5, r6, lr}
   18ff4:	mov	r6, r0
   18ff8:	mov	r5, r1
   18ffc:	mov	r4, r2
   19000:	bl	19cc4 <lchmod@@Base+0x3a54>
   19004:	cmp	r0, #0
   19008:	popne	{r4, r5, r6, pc}
   1900c:	cmp	r6, #0
   19010:	beq	19020 <lchmod@@Base+0x2db0>
   19014:	cmp	r5, #0
   19018:	cmpne	r4, #0
   1901c:	popeq	{r4, r5, r6, pc}
   19020:	bl	194ac <lchmod@@Base+0x323c>
   19024:	b	18ff0 <lchmod@@Base+0x2d80>
   19028:	cmp	r2, #0
   1902c:	cmpne	r1, #0
   19030:	moveq	r2, #1
   19034:	moveq	r1, r2
   19038:	push	{r4, lr}
   1903c:	bl	19cc4 <lchmod@@Base+0x3a54>
   19040:	cmp	r0, #0
   19044:	popne	{r4, pc}
   19048:	bl	194ac <lchmod@@Base+0x323c>
   1904c:	mov	r2, r1
   19050:	mov	r1, r0
   19054:	mov	r0, #0
   19058:	b	18ff0 <lchmod@@Base+0x2d80>
   1905c:	mov	r2, r1
   19060:	mov	r1, r0
   19064:	mov	r0, #0
   19068:	b	19028 <lchmod@@Base+0x2db8>
   1906c:	push	{r4, r5, r6, lr}
   19070:	subs	r6, r0, #0
   19074:	sub	sp, sp, #8
   19078:	mov	r5, r1
   1907c:	ldr	r4, [r1]
   19080:	beq	190bc <lchmod@@Base+0x2e4c>
   19084:	lsr	r1, r4, #1
   19088:	add	r3, r1, #1
   1908c:	mvn	r3, r3
   19090:	cmp	r4, r3
   19094:	bhi	190b8 <lchmod@@Base+0x2e48>
   19098:	add	r4, r4, #1
   1909c:	add	r4, r4, r1
   190a0:	mov	r0, r6
   190a4:	mov	r1, r4
   190a8:	bl	18ff0 <lchmod@@Base+0x2d80>
   190ac:	str	r4, [r5]
   190b0:	add	sp, sp, #8
   190b4:	pop	{r4, r5, r6, pc}
   190b8:	bl	194ac <lchmod@@Base+0x323c>
   190bc:	cmp	r4, #0
   190c0:	bne	190a0 <lchmod@@Base+0x2e30>
   190c4:	mov	r1, r2
   190c8:	mov	r0, #64	; 0x40
   190cc:	str	r2, [sp, #4]
   190d0:	bl	19e10 <lchmod@@Base+0x3ba0>
   190d4:	ldr	r2, [sp, #4]
   190d8:	cmp	r0, #0
   190dc:	movne	r4, r0
   190e0:	addeq	r4, r0, #1
   190e4:	b	190a0 <lchmod@@Base+0x2e30>
   190e8:	mov	r2, #1
   190ec:	b	1906c <lchmod@@Base+0x2dfc>
   190f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190f4:	sub	sp, sp, #12
   190f8:	ldr	r6, [r1]
   190fc:	mov	sl, r1
   19100:	mov	r9, r0
   19104:	asrs	r4, r6, #1
   19108:	mov	r5, r2
   1910c:	mov	fp, r3
   19110:	ldr	r7, [sp, #48]	; 0x30
   19114:	bmi	19280 <lchmod@@Base+0x3010>
   19118:	mvn	r3, #-2147483648	; 0x80000000
   1911c:	sub	r3, r3, r4
   19120:	cmp	r6, r3
   19124:	movle	r3, #0
   19128:	movgt	r3, #1
   1912c:	mvn	r8, fp
   19130:	cmp	r3, #0
   19134:	addeq	r4, r4, r6
   19138:	mvnne	r4, #-2147483648	; 0x80000000
   1913c:	lsr	r8, r8, #31
   19140:	cmp	fp, r4
   19144:	movge	r3, #0
   19148:	andlt	r3, r8, #1
   1914c:	cmp	r3, #0
   19150:	beq	19238 <lchmod@@Base+0x2fc8>
   19154:	cmp	r7, #0
   19158:	blt	19308 <lchmod@@Base+0x3098>
   1915c:	bne	19300 <lchmod@@Base+0x3090>
   19160:	mov	r2, #64	; 0x40
   19164:	mov	r1, r7
   19168:	mov	r0, r2
   1916c:	str	r2, [sp, #4]
   19170:	bl	1a01c <lchmod@@Base+0x3dac>
   19174:	ldr	r2, [sp, #4]
   19178:	mov	r1, r7
   1917c:	mov	r4, r0
   19180:	mov	r0, r2
   19184:	bl	1a23c <lchmod@@Base+0x3fcc>
   19188:	ldr	r2, [sp, #4]
   1918c:	sub	r1, r2, r1
   19190:	cmp	r9, #0
   19194:	sub	r3, r4, r6
   19198:	streq	r9, [sl]
   1919c:	cmp	r3, r5
   191a0:	bge	19224 <lchmod@@Base+0x2fb4>
   191a4:	cmp	r5, #0
   191a8:	blt	19294 <lchmod@@Base+0x3024>
   191ac:	cmp	r6, #0
   191b0:	blt	191d0 <lchmod@@Base+0x2f60>
   191b4:	mvn	r3, #-2147483648	; 0x80000000
   191b8:	sub	r3, r3, r5
   191bc:	cmp	r6, r3
   191c0:	movle	r3, #0
   191c4:	movgt	r3, #1
   191c8:	cmp	r3, #0
   191cc:	bne	19390 <lchmod@@Base+0x3120>
   191d0:	add	r5, r6, r5
   191d4:	cmp	fp, r5
   191d8:	movge	r8, #0
   191dc:	andlt	r8, r8, #1
   191e0:	cmp	r8, #0
   191e4:	mov	r4, r5
   191e8:	bne	19390 <lchmod@@Base+0x3120>
   191ec:	cmp	r7, #0
   191f0:	blt	192a8 <lchmod@@Base+0x3038>
   191f4:	beq	19220 <lchmod@@Base+0x2fb0>
   191f8:	cmp	r5, #0
   191fc:	blt	19350 <lchmod@@Base+0x30e0>
   19200:	mov	r1, r7
   19204:	mvn	r0, #-2147483648	; 0x80000000
   19208:	bl	1a01c <lchmod@@Base+0x3dac>
   1920c:	cmp	r5, r0
   19210:	movle	r0, #0
   19214:	movgt	r0, #1
   19218:	cmp	r0, #0
   1921c:	bne	19390 <lchmod@@Base+0x3120>
   19220:	mul	r1, r5, r7
   19224:	mov	r0, r9
   19228:	bl	18fa0 <lchmod@@Base+0x2d30>
   1922c:	str	r4, [sl]
   19230:	add	sp, sp, #12
   19234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19238:	cmp	r7, #0
   1923c:	blt	192d4 <lchmod@@Base+0x3064>
   19240:	beq	19160 <lchmod@@Base+0x2ef0>
   19244:	cmp	r4, #0
   19248:	blt	19310 <lchmod@@Base+0x30a0>
   1924c:	mov	r1, r7
   19250:	mvn	r0, #-2147483648	; 0x80000000
   19254:	bl	1a01c <lchmod@@Base+0x3dac>
   19258:	cmp	r0, r4
   1925c:	movge	r0, #0
   19260:	movlt	r0, #1
   19264:	cmp	r0, #0
   19268:	mvnne	r2, #-2147483648	; 0x80000000
   1926c:	bne	19164 <lchmod@@Base+0x2ef4>
   19270:	mul	r1, r7, r4
   19274:	cmp	r1, #63	; 0x3f
   19278:	bgt	19190 <lchmod@@Base+0x2f20>
   1927c:	b	19160 <lchmod@@Base+0x2ef0>
   19280:	rsb	r3, r4, #-2147483648	; 0x80000000
   19284:	cmp	r6, r3
   19288:	movge	r3, #0
   1928c:	movlt	r3, #1
   19290:	b	1912c <lchmod@@Base+0x2ebc>
   19294:	rsb	r3, r5, #-2147483648	; 0x80000000
   19298:	cmp	r6, r3
   1929c:	movge	r3, #0
   192a0:	movlt	r3, #1
   192a4:	b	191c8 <lchmod@@Base+0x2f58>
   192a8:	cmp	r5, #0
   192ac:	blt	19334 <lchmod@@Base+0x30c4>
   192b0:	cmn	r7, #1
   192b4:	beq	19220 <lchmod@@Base+0x2fb0>
   192b8:	mov	r1, r7
   192bc:	mov	r0, #-2147483648	; 0x80000000
   192c0:	bl	1a01c <lchmod@@Base+0x3dac>
   192c4:	cmp	r5, r0
   192c8:	movle	r0, #0
   192cc:	movgt	r0, #1
   192d0:	b	19218 <lchmod@@Base+0x2fa8>
   192d4:	cmp	r4, #0
   192d8:	blt	19374 <lchmod@@Base+0x3104>
   192dc:	cmn	r7, #1
   192e0:	beq	19270 <lchmod@@Base+0x3000>
   192e4:	mov	r1, r7
   192e8:	mov	r0, #-2147483648	; 0x80000000
   192ec:	bl	1a01c <lchmod@@Base+0x3dac>
   192f0:	cmp	r0, r4
   192f4:	movge	r0, #0
   192f8:	movlt	r0, #1
   192fc:	b	19264 <lchmod@@Base+0x2ff4>
   19300:	mov	r4, fp
   19304:	b	1924c <lchmod@@Base+0x2fdc>
   19308:	mov	r4, fp
   1930c:	b	192dc <lchmod@@Base+0x306c>
   19310:	cmn	r4, #1
   19314:	beq	19270 <lchmod@@Base+0x3000>
   19318:	mov	r1, r4
   1931c:	mov	r0, #-2147483648	; 0x80000000
   19320:	bl	1a01c <lchmod@@Base+0x3dac>
   19324:	cmp	r7, r0
   19328:	movle	r0, #0
   1932c:	movgt	r0, #1
   19330:	b	19264 <lchmod@@Base+0x2ff4>
   19334:	mov	r1, r7
   19338:	mvn	r0, #-2147483648	; 0x80000000
   1933c:	bl	1a01c <lchmod@@Base+0x3dac>
   19340:	cmp	r5, r0
   19344:	movge	r0, #0
   19348:	movlt	r0, #1
   1934c:	b	19218 <lchmod@@Base+0x2fa8>
   19350:	cmn	r5, #1
   19354:	beq	19220 <lchmod@@Base+0x2fb0>
   19358:	mov	r1, r5
   1935c:	mov	r0, #-2147483648	; 0x80000000
   19360:	bl	1a01c <lchmod@@Base+0x3dac>
   19364:	cmp	r7, r0
   19368:	movle	r0, #0
   1936c:	movgt	r0, #1
   19370:	b	19218 <lchmod@@Base+0x2fa8>
   19374:	mov	r1, r7
   19378:	mvn	r0, #-2147483648	; 0x80000000
   1937c:	bl	1a01c <lchmod@@Base+0x3dac>
   19380:	cmp	r0, r4
   19384:	movle	r0, #0
   19388:	movgt	r0, #1
   1938c:	b	19264 <lchmod@@Base+0x2ff4>
   19390:	bl	194ac <lchmod@@Base+0x323c>
   19394:	push	{r4, lr}
   19398:	mov	r1, #1
   1939c:	bl	1956c <lchmod@@Base+0x32fc>
   193a0:	cmp	r0, #0
   193a4:	popne	{r4, pc}
   193a8:	bl	194ac <lchmod@@Base+0x323c>
   193ac:	push	{r4, lr}
   193b0:	mov	r1, #1
   193b4:	bl	1956c <lchmod@@Base+0x32fc>
   193b8:	cmp	r0, #0
   193bc:	popne	{r4, pc}
   193c0:	bl	194ac <lchmod@@Base+0x323c>
   193c4:	push	{r4, lr}
   193c8:	bl	1956c <lchmod@@Base+0x32fc>
   193cc:	cmp	r0, #0
   193d0:	popne	{r4, pc}
   193d4:	bl	194ac <lchmod@@Base+0x323c>
   193d8:	push	{r4, lr}
   193dc:	bl	1956c <lchmod@@Base+0x32fc>
   193e0:	cmp	r0, #0
   193e4:	popne	{r4, pc}
   193e8:	bl	194ac <lchmod@@Base+0x323c>
   193ec:	push	{r4, r5, r6, lr}
   193f0:	mov	r6, r0
   193f4:	mov	r0, r1
   193f8:	mov	r4, r1
   193fc:	bl	195b4 <lchmod@@Base+0x3344>
   19400:	subs	r5, r0, #0
   19404:	beq	1941c <lchmod@@Base+0x31ac>
   19408:	mov	r2, r4
   1940c:	mov	r1, r6
   19410:	bl	114b4 <memcpy@plt>
   19414:	mov	r0, r5
   19418:	pop	{r4, r5, r6, pc}
   1941c:	bl	194ac <lchmod@@Base+0x323c>
   19420:	push	{r4, r5, r6, lr}
   19424:	mov	r6, r0
   19428:	mov	r0, r1
   1942c:	mov	r4, r1
   19430:	bl	195b4 <lchmod@@Base+0x3344>
   19434:	subs	r5, r0, #0
   19438:	beq	19450 <lchmod@@Base+0x31e0>
   1943c:	mov	r2, r4
   19440:	mov	r1, r6
   19444:	bl	114b4 <memcpy@plt>
   19448:	mov	r0, r5
   1944c:	pop	{r4, r5, r6, pc}
   19450:	bl	194ac <lchmod@@Base+0x323c>
   19454:	push	{r4, r5, r6, lr}
   19458:	mov	r6, r0
   1945c:	add	r0, r1, #1
   19460:	mov	r4, r1
   19464:	bl	195b4 <lchmod@@Base+0x3344>
   19468:	subs	r5, r0, #0
   1946c:	beq	1948c <lchmod@@Base+0x321c>
   19470:	mov	r3, #0
   19474:	mov	r1, r6
   19478:	strb	r3, [r5, r4]
   1947c:	mov	r2, r4
   19480:	bl	114b4 <memcpy@plt>
   19484:	mov	r0, r5
   19488:	pop	{r4, r5, r6, pc}
   1948c:	bl	194ac <lchmod@@Base+0x323c>
   19490:	push	{r4, lr}
   19494:	mov	r4, r0
   19498:	bl	11658 <strlen@plt>
   1949c:	add	r1, r0, #1
   194a0:	mov	r0, r4
   194a4:	pop	{r4, lr}
   194a8:	b	193ec <lchmod@@Base+0x317c>
   194ac:	ldr	r3, [pc, #44]	; 194e0 <lchmod@@Base+0x3270>
   194b0:	push	{r4, lr}
   194b4:	mov	r2, #5
   194b8:	ldr	r1, [pc, #36]	; 194e4 <lchmod@@Base+0x3274>
   194bc:	mov	r0, #0
   194c0:	ldr	r4, [r3]
   194c4:	bl	114f0 <dcgettext@plt>
   194c8:	ldr	r2, [pc, #24]	; 194e8 <lchmod@@Base+0x3278>
   194cc:	mov	r1, #0
   194d0:	mov	r3, r0
   194d4:	mov	r0, r4
   194d8:	bl	115b0 <error@plt>
   194dc:	bl	117d8 <abort@plt>
   194e0:	andeq	ip, r2, r0, lsl #3
   194e4:	andeq	sl, r1, ip, lsl pc
   194e8:	andeq	sl, r1, r0, lsl sl
   194ec:	push	{r4, lr}
   194f0:	orr	r1, r1, #512	; 0x200
   194f4:	bl	14410 <__assert_fail@plt+0x2be4>
   194f8:	cmp	r0, #0
   194fc:	popne	{r4, pc}
   19500:	bl	11688 <__errno_location@plt>
   19504:	ldr	r3, [r0]
   19508:	cmp	r3, #22
   1950c:	beq	19514 <lchmod@@Base+0x32a4>
   19510:	bl	194ac <lchmod@@Base+0x323c>
   19514:	ldr	r3, [pc, #12]	; 19528 <lchmod@@Base+0x32b8>
   19518:	mov	r2, #41	; 0x29
   1951c:	ldr	r1, [pc, #8]	; 1952c <lchmod@@Base+0x32bc>
   19520:	ldr	r0, [pc, #8]	; 19530 <lchmod@@Base+0x32c0>
   19524:	bl	1182c <__assert_fail@plt>
   19528:	andeq	sl, r1, r0, lsr pc
   1952c:	andeq	sl, r1, ip, lsr pc
   19530:	andeq	sl, r1, r8, asr #30
   19534:	ldr	r3, [r0, #48]	; 0x30
   19538:	and	r3, r3, #17
   1953c:	cmp	r3, #16
   19540:	beq	19564 <lchmod@@Base+0x32f4>
   19544:	cmp	r3, #17
   19548:	beq	19554 <lchmod@@Base+0x32e4>
   1954c:	mov	r0, #0
   19550:	bx	lr
   19554:	ldr	r0, [r1, #48]	; 0x30
   19558:	adds	r0, r0, #0
   1955c:	movne	r0, #1
   19560:	bx	lr
   19564:	mov	r0, #1
   19568:	bx	lr
   1956c:	cmp	r1, #0
   19570:	cmpne	r0, #0
   19574:	moveq	r1, #1
   19578:	moveq	r0, r1
   1957c:	umull	r2, r3, r0, r1
   19580:	adds	r3, r3, #0
   19584:	movne	r3, #1
   19588:	cmp	r2, #0
   1958c:	blt	1959c <lchmod@@Base+0x332c>
   19590:	cmp	r3, #0
   19594:	bne	1959c <lchmod@@Base+0x332c>
   19598:	b	11424 <calloc@plt>
   1959c:	push	{r4, lr}
   195a0:	bl	11688 <__errno_location@plt>
   195a4:	mov	r3, #12
   195a8:	str	r3, [r0]
   195ac:	mov	r0, #0
   195b0:	pop	{r4, pc}
   195b4:	cmp	r0, #0
   195b8:	moveq	r0, #1
   195bc:	cmp	r0, #0
   195c0:	blt	195c8 <lchmod@@Base+0x3358>
   195c4:	b	115d4 <malloc@plt>
   195c8:	push	{r4, lr}
   195cc:	bl	11688 <__errno_location@plt>
   195d0:	mov	r3, #12
   195d4:	str	r3, [r0]
   195d8:	mov	r0, #0
   195dc:	pop	{r4, pc}
   195e0:	cmp	r0, #0
   195e4:	beq	19608 <lchmod@@Base+0x3398>
   195e8:	cmp	r1, #0
   195ec:	push	{lr}		; (str lr, [sp, #-4]!)
   195f0:	sub	sp, sp, #12
   195f4:	beq	19610 <lchmod@@Base+0x33a0>
   195f8:	blt	19628 <lchmod@@Base+0x33b8>
   195fc:	add	sp, sp, #12
   19600:	pop	{lr}		; (ldr lr, [sp], #4)
   19604:	b	11508 <realloc@plt>
   19608:	mov	r0, r1
   1960c:	b	195b4 <lchmod@@Base+0x3344>
   19610:	str	r1, [sp, #4]
   19614:	bl	12fdc <__assert_fail@plt+0x17b0>
   19618:	ldr	r3, [sp, #4]
   1961c:	mov	r0, r3
   19620:	add	sp, sp, #12
   19624:	pop	{pc}		; (ldr pc, [sp], #4)
   19628:	bl	11688 <__errno_location@plt>
   1962c:	mov	r2, #12
   19630:	mov	r3, #0
   19634:	str	r2, [r0]
   19638:	b	1961c <lchmod@@Base+0x33ac>
   1963c:	ldrb	r3, [r0]
   19640:	cmp	r3, #47	; 0x2f
   19644:	bne	19654 <lchmod@@Base+0x33e4>
   19648:	ldrb	r3, [r0, #1]!
   1964c:	cmp	r3, #47	; 0x2f
   19650:	beq	19648 <lchmod@@Base+0x33d8>
   19654:	cmp	r3, #0
   19658:	bxeq	lr
   1965c:	mov	r2, #0
   19660:	push	{lr}		; (str lr, [sp, #-4]!)
   19664:	mov	ip, r2
   19668:	mov	r1, r0
   1966c:	mov	lr, #1
   19670:	cmp	r3, #47	; 0x2f
   19674:	moveq	r2, lr
   19678:	beq	19688 <lchmod@@Base+0x3418>
   1967c:	cmp	r2, #0
   19680:	movne	r0, r1
   19684:	movne	r2, ip
   19688:	ldrb	r3, [r1, #1]!
   1968c:	cmp	r3, #0
   19690:	bne	19670 <lchmod@@Base+0x3400>
   19694:	pop	{pc}		; (ldr pc, [sp], #4)
   19698:	push	{r4, lr}
   1969c:	mov	r4, r0
   196a0:	bl	11658 <strlen@plt>
   196a4:	cmp	r0, #1
   196a8:	popls	{r4, pc}
   196ac:	sub	r3, r0, #1
   196b0:	add	r2, r4, r3
   196b4:	ldrb	r1, [r4, r3]
   196b8:	cmp	r1, #47	; 0x2f
   196bc:	popne	{r4, pc}
   196c0:	cmp	r3, #1
   196c4:	beq	196d8 <lchmod@@Base+0x3468>
   196c8:	ldrb	r1, [r2, #-1]!
   196cc:	sub	r0, r3, #1
   196d0:	cmp	r1, #47	; 0x2f
   196d4:	beq	196e0 <lchmod@@Base+0x3470>
   196d8:	mov	r0, r3
   196dc:	pop	{r4, pc}
   196e0:	mov	r3, r0
   196e4:	b	196c0 <lchmod@@Base+0x3450>
   196e8:	push	{r4, r5, r6, lr}
   196ec:	mov	r4, r0
   196f0:	bl	11598 <__fpending@plt>
   196f4:	ldr	r5, [r4]
   196f8:	and	r5, r5, #32
   196fc:	mov	r6, r0
   19700:	mov	r0, r4
   19704:	bl	19854 <lchmod@@Base+0x35e4>
   19708:	cmp	r5, #0
   1970c:	mov	r4, r0
   19710:	bne	19730 <lchmod@@Base+0x34c0>
   19714:	cmp	r0, #0
   19718:	beq	19728 <lchmod@@Base+0x34b8>
   1971c:	cmp	r6, #0
   19720:	beq	1974c <lchmod@@Base+0x34dc>
   19724:	mvn	r4, #0
   19728:	mov	r0, r4
   1972c:	pop	{r4, r5, r6, pc}
   19730:	cmp	r0, #0
   19734:	bne	19724 <lchmod@@Base+0x34b4>
   19738:	bl	11688 <__errno_location@plt>
   1973c:	str	r4, [r0]
   19740:	mvn	r4, #0
   19744:	mov	r0, r4
   19748:	pop	{r4, r5, r6, pc}
   1974c:	bl	11688 <__errno_location@plt>
   19750:	ldr	r4, [r0]
   19754:	subs	r4, r4, #9
   19758:	mvnne	r4, #0
   1975c:	mov	r0, r4
   19760:	pop	{r4, r5, r6, pc}
   19764:	push	{r4, r5}
   19768:	mov	r4, #0
   1976c:	mov	r5, #0
   19770:	ldr	r3, [pc, #12]	; 19784 <lchmod@@Base+0x3514>
   19774:	strd	r4, [r0, #16]
   19778:	str	r3, [r0, #24]
   1977c:	pop	{r4, r5}
   19780:	bx	lr
   19784:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   19788:	ldr	r3, [pc, #180]	; 19844 <lchmod@@Base+0x35d4>
   1978c:	ldr	r2, [r0, #24]
   19790:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19794:	cmp	r2, r3
   19798:	bne	19830 <lchmod@@Base+0x35c0>
   1979c:	ldrd	r6, [r0, #16]
   197a0:	orrs	r3, r6, r7
   197a4:	bne	197d0 <lchmod@@Base+0x3560>
   197a8:	mov	r2, #1
   197ac:	mov	r3, #0
   197b0:	ldrd	r8, [r1, #96]	; 0x60
   197b4:	strd	r2, [r0, #16]
   197b8:	ldrd	r2, [r1]
   197bc:	mov	r1, #0
   197c0:	strd	r8, [r0]
   197c4:	strd	r2, [r0, #8]
   197c8:	mov	r0, r1
   197cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   197d0:	ldrd	r8, [r1, #96]	; 0x60
   197d4:	ldrd	r2, [r0]
   197d8:	cmp	r9, r3
   197dc:	cmpeq	r8, r2
   197e0:	beq	19818 <lchmod@@Base+0x35a8>
   197e4:	adds	r2, r6, #1
   197e8:	adc	r3, r7, #0
   197ec:	and	r6, r6, r2
   197f0:	and	r7, r7, r3
   197f4:	orrs	ip, r6, r7
   197f8:	strd	r2, [r0, #16]
   197fc:	movne	r1, #0
   19800:	bne	197c8 <lchmod@@Base+0x3558>
   19804:	orrs	r3, r2, r3
   19808:	bne	197b8 <lchmod@@Base+0x3548>
   1980c:	mov	r1, #1
   19810:	mov	r0, r1
   19814:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19818:	ldrd	r4, [r1]
   1981c:	ldrd	r2, [r0, #8]
   19820:	cmp	r5, r3
   19824:	cmpeq	r4, r2
   19828:	bne	197e4 <lchmod@@Base+0x3574>
   1982c:	b	1980c <lchmod@@Base+0x359c>
   19830:	ldr	r3, [pc, #16]	; 19848 <lchmod@@Base+0x35d8>
   19834:	mov	r2, #60	; 0x3c
   19838:	ldr	r1, [pc, #12]	; 1984c <lchmod@@Base+0x35dc>
   1983c:	ldr	r0, [pc, #12]	; 19850 <lchmod@@Base+0x35e0>
   19840:	bl	1182c <__assert_fail@plt>
   19844:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   19848:	andeq	sl, r1, r8, asr pc
   1984c:	andeq	sl, r1, r4, ror #30
   19850:	andeq	sl, r1, r8, ror pc
   19854:	push	{r4, r5, lr}
   19858:	sub	sp, sp, #12
   1985c:	mov	r4, r0
   19860:	bl	116c4 <fileno@plt>
   19864:	cmp	r0, #0
   19868:	mov	r0, r4
   1986c:	blt	198e8 <lchmod@@Base+0x3678>
   19870:	bl	115ec <__freading@plt>
   19874:	cmp	r0, #0
   19878:	bne	198b4 <lchmod@@Base+0x3644>
   1987c:	mov	r0, r4
   19880:	bl	19b00 <lchmod@@Base+0x3890>
   19884:	cmp	r0, #0
   19888:	beq	198e4 <lchmod@@Base+0x3674>
   1988c:	bl	11688 <__errno_location@plt>
   19890:	mov	r5, r0
   19894:	mov	r0, r4
   19898:	ldr	r4, [r5]
   1989c:	bl	116dc <fclose@plt>
   198a0:	cmp	r4, #0
   198a4:	mvnne	r0, #0
   198a8:	strne	r4, [r5]
   198ac:	add	sp, sp, #12
   198b0:	pop	{r4, r5, pc}
   198b4:	mov	r0, r4
   198b8:	bl	116c4 <fileno@plt>
   198bc:	mov	r3, #1
   198c0:	str	r3, [sp]
   198c4:	mov	r2, #0
   198c8:	mov	r3, #0
   198cc:	bl	11574 <lseek64@plt>
   198d0:	mvn	r3, #0
   198d4:	mvn	r2, #0
   198d8:	cmp	r1, r3
   198dc:	cmpeq	r0, r2
   198e0:	bne	1987c <lchmod@@Base+0x360c>
   198e4:	mov	r0, r4
   198e8:	add	sp, sp, #12
   198ec:	pop	{r4, r5, lr}
   198f0:	b	116dc <fclose@plt>
   198f4:	push	{r1, r2, r3}
   198f8:	push	{r4, r5, r6, r7, lr}
   198fc:	sub	sp, sp, #8
   19900:	add	r3, sp, #32
   19904:	ldr	r1, [sp, #28]
   19908:	str	r3, [sp, #4]
   1990c:	cmp	r1, #0
   19910:	beq	199a8 <lchmod@@Base+0x3738>
   19914:	ldr	r2, [pc, #412]	; 19ab8 <lchmod@@Base+0x3848>
   19918:	mov	r5, r0
   1991c:	cmp	r1, r2
   19920:	bne	1996c <lchmod@@Base+0x36fc>
   19924:	ldr	r6, [pc, #400]	; 19abc <lchmod@@Base+0x384c>
   19928:	ldr	r7, [r3]
   1992c:	add	r2, sp, #36	; 0x24
   19930:	ldr	r3, [r6]
   19934:	str	r2, [sp, #4]
   19938:	cmp	r3, #0
   1993c:	mov	r2, r7
   19940:	blt	19a6c <lchmod@@Base+0x37fc>
   19944:	bl	116f4 <fcntl64@plt>
   19948:	subs	r4, r0, #0
   1994c:	blt	199f0 <lchmod@@Base+0x3780>
   19950:	mov	r3, #1
   19954:	str	r3, [r6]
   19958:	mov	r0, r4
   1995c:	add	sp, sp, #8
   19960:	pop	{r4, r5, r6, r7, lr}
   19964:	add	sp, sp, #12
   19968:	bx	lr
   1996c:	cmp	r1, #11
   19970:	beq	19998 <lchmod@@Base+0x3728>
   19974:	bgt	199b8 <lchmod@@Base+0x3748>
   19978:	cmp	r1, #3
   1997c:	beq	19998 <lchmod@@Base+0x3728>
   19980:	ble	19aac <lchmod@@Base+0x383c>
   19984:	cmp	r1, #8
   19988:	beq	199d8 <lchmod@@Base+0x3768>
   1998c:	ble	199d8 <lchmod@@Base+0x3768>
   19990:	cmp	r1, #9
   19994:	bne	199d8 <lchmod@@Base+0x3768>
   19998:	mov	r0, r5
   1999c:	bl	116f4 <fcntl64@plt>
   199a0:	mov	r4, r0
   199a4:	b	19958 <lchmod@@Base+0x36e8>
   199a8:	ldr	r2, [sp, #32]
   199ac:	bl	116f4 <fcntl64@plt>
   199b0:	mov	r4, r0
   199b4:	b	19958 <lchmod@@Base+0x36e8>
   199b8:	ldr	r3, [pc, #256]	; 19ac0 <lchmod@@Base+0x3850>
   199bc:	cmp	r1, r3
   199c0:	bgt	19a8c <lchmod@@Base+0x381c>
   199c4:	cmp	r1, r2
   199c8:	bge	199d8 <lchmod@@Base+0x3768>
   199cc:	sub	r3, r3, #6
   199d0:	cmp	r1, r3
   199d4:	beq	19998 <lchmod@@Base+0x3728>
   199d8:	ldr	r3, [sp, #4]
   199dc:	mov	r0, r5
   199e0:	ldr	r2, [r3]
   199e4:	bl	116f4 <fcntl64@plt>
   199e8:	mov	r4, r0
   199ec:	b	19958 <lchmod@@Base+0x36e8>
   199f0:	bl	11688 <__errno_location@plt>
   199f4:	ldr	r3, [r0]
   199f8:	cmp	r3, #22
   199fc:	bne	19950 <lchmod@@Base+0x36e0>
   19a00:	mov	r2, r7
   19a04:	mov	r0, r5
   19a08:	mov	r1, #0
   19a0c:	bl	116f4 <fcntl64@plt>
   19a10:	subs	r4, r0, #0
   19a14:	blt	19958 <lchmod@@Base+0x36e8>
   19a18:	mvn	r3, #0
   19a1c:	str	r3, [r6]
   19a20:	mov	r1, #1
   19a24:	mov	r0, r4
   19a28:	bl	116f4 <fcntl64@plt>
   19a2c:	subs	r2, r0, #0
   19a30:	blt	19a4c <lchmod@@Base+0x37dc>
   19a34:	orr	r2, r2, #1
   19a38:	mov	r1, #2
   19a3c:	mov	r0, r4
   19a40:	bl	116f4 <fcntl64@plt>
   19a44:	cmn	r0, #1
   19a48:	bne	19958 <lchmod@@Base+0x36e8>
   19a4c:	bl	11688 <__errno_location@plt>
   19a50:	mov	r5, r0
   19a54:	mov	r0, r4
   19a58:	ldr	r6, [r5]
   19a5c:	mvn	r4, #0
   19a60:	bl	117e4 <close@plt>
   19a64:	str	r6, [r5]
   19a68:	b	19958 <lchmod@@Base+0x36e8>
   19a6c:	mov	r1, #0
   19a70:	bl	116f4 <fcntl64@plt>
   19a74:	subs	r4, r0, #0
   19a78:	blt	19958 <lchmod@@Base+0x36e8>
   19a7c:	ldr	r3, [r6]
   19a80:	cmn	r3, #1
   19a84:	beq	19a20 <lchmod@@Base+0x37b0>
   19a88:	b	19958 <lchmod@@Base+0x36e8>
   19a8c:	ldr	r3, [pc, #48]	; 19ac4 <lchmod@@Base+0x3854>
   19a90:	cmp	r1, r3
   19a94:	beq	199d8 <lchmod@@Base+0x3768>
   19a98:	blt	19998 <lchmod@@Base+0x3728>
   19a9c:	add	r3, r3, #1
   19aa0:	cmp	r1, r3
   19aa4:	bne	199d8 <lchmod@@Base+0x3768>
   19aa8:	b	19998 <lchmod@@Base+0x3728>
   19aac:	cmp	r1, #1
   19ab0:	bne	199d8 <lchmod@@Base+0x3768>
   19ab4:	b	19998 <lchmod@@Base+0x3728>
   19ab8:	andeq	r0, r0, r6, lsl #8
   19abc:	andeq	ip, r2, r4, lsr #6
   19ac0:	andeq	r0, r0, r7, lsl #8
   19ac4:	andeq	r0, r0, r9, lsl #8
   19ac8:	push	{r1, r2, r3}
   19acc:	push	{lr}		; (str lr, [sp, #-4]!)
   19ad0:	sub	sp, sp, #8
   19ad4:	ldr	r1, [sp, #12]
   19ad8:	ands	r2, r1, #64	; 0x40
   19adc:	addne	r3, sp, #16
   19ae0:	ldrne	r2, [sp, #16]
   19ae4:	strne	r3, [sp, #4]
   19ae8:	bl	115bc <open64@plt>
   19aec:	bl	18a08 <lchmod@@Base+0x2798>
   19af0:	add	sp, sp, #8
   19af4:	pop	{lr}		; (ldr lr, [sp], #4)
   19af8:	add	sp, sp, #12
   19afc:	bx	lr
   19b00:	push	{r4, lr}
   19b04:	subs	r4, r0, #0
   19b08:	sub	sp, sp, #8
   19b0c:	beq	19b28 <lchmod@@Base+0x38b8>
   19b10:	bl	115ec <__freading@plt>
   19b14:	cmp	r0, #0
   19b18:	beq	19b28 <lchmod@@Base+0x38b8>
   19b1c:	ldr	r3, [r4]
   19b20:	tst	r3, #256	; 0x100
   19b24:	bne	19b38 <lchmod@@Base+0x38c8>
   19b28:	mov	r0, r4
   19b2c:	add	sp, sp, #8
   19b30:	pop	{r4, lr}
   19b34:	b	1146c <fflush@plt>
   19b38:	mov	r3, #1
   19b3c:	str	r3, [sp]
   19b40:	mov	r2, #0
   19b44:	mov	r3, #0
   19b48:	mov	r0, r4
   19b4c:	bl	19b60 <lchmod@@Base+0x38f0>
   19b50:	mov	r0, r4
   19b54:	add	sp, sp, #8
   19b58:	pop	{r4, lr}
   19b5c:	b	1146c <fflush@plt>
   19b60:	push	{r4, r5, r6, r7, r8, lr}
   19b64:	sub	sp, sp, #8
   19b68:	ldmib	r0, {ip, lr}
   19b6c:	mov	r4, r0
   19b70:	ldr	r5, [sp, #32]
   19b74:	cmp	lr, ip
   19b78:	beq	19b90 <lchmod@@Base+0x3920>
   19b7c:	str	r5, [sp, #32]
   19b80:	mov	r0, r4
   19b84:	add	sp, sp, #8
   19b88:	pop	{r4, r5, r6, r7, r8, lr}
   19b8c:	b	116e8 <fseeko64@plt>
   19b90:	ldr	lr, [r0, #20]
   19b94:	ldr	ip, [r0, #16]
   19b98:	cmp	lr, ip
   19b9c:	bne	19b7c <lchmod@@Base+0x390c>
   19ba0:	ldr	r8, [r0, #36]	; 0x24
   19ba4:	cmp	r8, #0
   19ba8:	bne	19b7c <lchmod@@Base+0x390c>
   19bac:	mov	r6, r2
   19bb0:	mov	r7, r3
   19bb4:	bl	116c4 <fileno@plt>
   19bb8:	mov	r2, r6
   19bbc:	mov	r3, r7
   19bc0:	str	r5, [sp]
   19bc4:	bl	11574 <lseek64@plt>
   19bc8:	mvn	r3, #0
   19bcc:	mvn	r2, #0
   19bd0:	cmp	r1, r3
   19bd4:	cmpeq	r0, r2
   19bd8:	beq	19bf8 <lchmod@@Base+0x3988>
   19bdc:	ldr	r3, [r4]
   19be0:	strd	r0, [r4, #80]	; 0x50
   19be4:	mov	r0, r8
   19be8:	bic	r3, r3, #16
   19bec:	str	r3, [r4]
   19bf0:	add	sp, sp, #8
   19bf4:	pop	{r4, r5, r6, r7, r8, pc}
   19bf8:	mvn	r0, #0
   19bfc:	b	19bf0 <lchmod@@Base+0x3980>
   19c00:	ldrb	r3, [r0]
   19c04:	cmp	r3, #0
   19c08:	beq	19c34 <lchmod@@Base+0x39c4>
   19c0c:	mov	r2, r0
   19c10:	mov	r0, #0
   19c14:	push	{r4, lr}
   19c18:	add	r0, r3, r0, ror #23
   19c1c:	ldrb	r3, [r2, #1]!
   19c20:	cmp	r3, #0
   19c24:	bne	19c18 <lchmod@@Base+0x39a8>
   19c28:	bl	19ffc <lchmod@@Base+0x3d8c>
   19c2c:	mov	r0, r1
   19c30:	pop	{r4, pc}
   19c34:	mov	r0, r3
   19c38:	bx	lr
   19c3c:	push	{r4, lr}
   19c40:	mov	r0, #14
   19c44:	bl	11724 <nl_langinfo@plt>
   19c48:	cmp	r0, #0
   19c4c:	beq	19c64 <lchmod@@Base+0x39f4>
   19c50:	ldrb	r2, [r0]
   19c54:	ldr	r3, [pc, #16]	; 19c6c <lchmod@@Base+0x39fc>
   19c58:	cmp	r2, #0
   19c5c:	moveq	r0, r3
   19c60:	pop	{r4, pc}
   19c64:	ldr	r0, [pc]	; 19c6c <lchmod@@Base+0x39fc>
   19c68:	pop	{r4, pc}
   19c6c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   19c70:	push	{r4, r5, r6, r7, lr}
   19c74:	subs	r6, r0, #0
   19c78:	sub	sp, sp, #12
   19c7c:	addeq	r6, sp, #4
   19c80:	mov	r0, r6
   19c84:	mov	r5, r2
   19c88:	mov	r7, r1
   19c8c:	bl	115a4 <mbrtowc@plt>
   19c90:	cmp	r5, #0
   19c94:	cmnne	r0, #3
   19c98:	mov	r4, r0
   19c9c:	bls	19cb8 <lchmod@@Base+0x3a48>
   19ca0:	mov	r0, #0
   19ca4:	bl	19d1c <lchmod@@Base+0x3aac>
   19ca8:	cmp	r0, #0
   19cac:	moveq	r4, #1
   19cb0:	ldrbeq	r3, [r7]
   19cb4:	streq	r3, [r6]
   19cb8:	mov	r0, r4
   19cbc:	add	sp, sp, #12
   19cc0:	pop	{r4, r5, r6, r7, pc}
   19cc4:	push	{r4, r5, r6, lr}
   19cc8:	subs	r4, r2, #0
   19ccc:	mov	r6, r0
   19cd0:	mov	r5, r1
   19cd4:	beq	19d00 <lchmod@@Base+0x3a90>
   19cd8:	mov	r1, r4
   19cdc:	mvn	r0, #0
   19ce0:	bl	19e10 <lchmod@@Base+0x3ba0>
   19ce4:	cmp	r0, r5
   19ce8:	bcs	19d00 <lchmod@@Base+0x3a90>
   19cec:	bl	11688 <__errno_location@plt>
   19cf0:	mov	r3, #12
   19cf4:	str	r3, [r0]
   19cf8:	mov	r0, #0
   19cfc:	pop	{r4, r5, r6, pc}
   19d00:	mul	r1, r5, r4
   19d04:	mov	r0, r6
   19d08:	pop	{r4, r5, r6, lr}
   19d0c:	b	195e0 <lchmod@@Base+0x3370>
   19d10:	mov	r2, #3
   19d14:	mov	r1, #0
   19d18:	b	198f4 <lchmod@@Base+0x3684>
   19d1c:	push	{lr}		; (str lr, [sp, #-4]!)
   19d20:	sub	sp, sp, #268	; 0x10c
   19d24:	add	r1, sp, #4
   19d28:	ldr	r2, [pc, #60]	; 19d6c <lchmod@@Base+0x3afc>
   19d2c:	bl	19d78 <lchmod@@Base+0x3b08>
   19d30:	cmp	r0, #0
   19d34:	movne	r0, #0
   19d38:	bne	19d64 <lchmod@@Base+0x3af4>
   19d3c:	ldr	r1, [pc, #44]	; 19d70 <lchmod@@Base+0x3b00>
   19d40:	add	r0, sp, #4
   19d44:	bl	11454 <strcmp@plt>
   19d48:	cmp	r0, #0
   19d4c:	beq	19d64 <lchmod@@Base+0x3af4>
   19d50:	add	r0, sp, #4
   19d54:	ldr	r1, [pc, #24]	; 19d74 <lchmod@@Base+0x3b04>
   19d58:	bl	11454 <strcmp@plt>
   19d5c:	adds	r0, r0, #0
   19d60:	movne	r0, #1
   19d64:	add	sp, sp, #268	; 0x10c
   19d68:	pop	{pc}		; (ldr pc, [sp], #4)
   19d6c:	andeq	r0, r0, r1, lsl #2
   19d70:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   19d74:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   19d78:	push	{r4, r5, r6, lr}
   19d7c:	mov	r5, r1
   19d80:	mov	r1, #0
   19d84:	mov	r4, r2
   19d88:	bl	11700 <setlocale@plt>
   19d8c:	subs	r6, r0, #0
   19d90:	beq	19dec <lchmod@@Base+0x3b7c>
   19d94:	bl	11658 <strlen@plt>
   19d98:	cmp	r4, r0
   19d9c:	bhi	19dd4 <lchmod@@Base+0x3b64>
   19da0:	cmp	r4, #0
   19da4:	bne	19db0 <lchmod@@Base+0x3b40>
   19da8:	mov	r0, #34	; 0x22
   19dac:	pop	{r4, r5, r6, pc}
   19db0:	sub	r4, r4, #1
   19db4:	mov	r1, r6
   19db8:	mov	r2, r4
   19dbc:	mov	r0, r5
   19dc0:	bl	114b4 <memcpy@plt>
   19dc4:	mov	r3, #0
   19dc8:	strb	r3, [r5, r4]
   19dcc:	mov	r0, #34	; 0x22
   19dd0:	pop	{r4, r5, r6, pc}
   19dd4:	add	r2, r0, #1
   19dd8:	mov	r1, r6
   19ddc:	mov	r0, r5
   19de0:	bl	114b4 <memcpy@plt>
   19de4:	mov	r0, #0
   19de8:	pop	{r4, r5, r6, pc}
   19dec:	cmp	r4, #0
   19df0:	beq	19e00 <lchmod@@Base+0x3b90>
   19df4:	strb	r6, [r5]
   19df8:	mov	r0, #22
   19dfc:	pop	{r4, r5, r6, pc}
   19e00:	mov	r0, #22
   19e04:	pop	{r4, r5, r6, pc}
   19e08:	mov	r1, #0
   19e0c:	b	11700 <setlocale@plt>
   19e10:	subs	r2, r1, #1
   19e14:	bxeq	lr
   19e18:	bcc	19ff0 <lchmod@@Base+0x3d80>
   19e1c:	cmp	r0, r1
   19e20:	bls	19fd4 <lchmod@@Base+0x3d64>
   19e24:	tst	r1, r2
   19e28:	beq	19fe0 <lchmod@@Base+0x3d70>
   19e2c:	clz	r3, r0
   19e30:	clz	r2, r1
   19e34:	sub	r3, r2, r3
   19e38:	rsbs	r3, r3, #31
   19e3c:	addne	r3, r3, r3, lsl #1
   19e40:	mov	r2, #0
   19e44:	addne	pc, pc, r3, lsl #2
   19e48:	nop			; (mov r0, r0)
   19e4c:	cmp	r0, r1, lsl #31
   19e50:	adc	r2, r2, r2
   19e54:	subcs	r0, r0, r1, lsl #31
   19e58:	cmp	r0, r1, lsl #30
   19e5c:	adc	r2, r2, r2
   19e60:	subcs	r0, r0, r1, lsl #30
   19e64:	cmp	r0, r1, lsl #29
   19e68:	adc	r2, r2, r2
   19e6c:	subcs	r0, r0, r1, lsl #29
   19e70:	cmp	r0, r1, lsl #28
   19e74:	adc	r2, r2, r2
   19e78:	subcs	r0, r0, r1, lsl #28
   19e7c:	cmp	r0, r1, lsl #27
   19e80:	adc	r2, r2, r2
   19e84:	subcs	r0, r0, r1, lsl #27
   19e88:	cmp	r0, r1, lsl #26
   19e8c:	adc	r2, r2, r2
   19e90:	subcs	r0, r0, r1, lsl #26
   19e94:	cmp	r0, r1, lsl #25
   19e98:	adc	r2, r2, r2
   19e9c:	subcs	r0, r0, r1, lsl #25
   19ea0:	cmp	r0, r1, lsl #24
   19ea4:	adc	r2, r2, r2
   19ea8:	subcs	r0, r0, r1, lsl #24
   19eac:	cmp	r0, r1, lsl #23
   19eb0:	adc	r2, r2, r2
   19eb4:	subcs	r0, r0, r1, lsl #23
   19eb8:	cmp	r0, r1, lsl #22
   19ebc:	adc	r2, r2, r2
   19ec0:	subcs	r0, r0, r1, lsl #22
   19ec4:	cmp	r0, r1, lsl #21
   19ec8:	adc	r2, r2, r2
   19ecc:	subcs	r0, r0, r1, lsl #21
   19ed0:	cmp	r0, r1, lsl #20
   19ed4:	adc	r2, r2, r2
   19ed8:	subcs	r0, r0, r1, lsl #20
   19edc:	cmp	r0, r1, lsl #19
   19ee0:	adc	r2, r2, r2
   19ee4:	subcs	r0, r0, r1, lsl #19
   19ee8:	cmp	r0, r1, lsl #18
   19eec:	adc	r2, r2, r2
   19ef0:	subcs	r0, r0, r1, lsl #18
   19ef4:	cmp	r0, r1, lsl #17
   19ef8:	adc	r2, r2, r2
   19efc:	subcs	r0, r0, r1, lsl #17
   19f00:	cmp	r0, r1, lsl #16
   19f04:	adc	r2, r2, r2
   19f08:	subcs	r0, r0, r1, lsl #16
   19f0c:	cmp	r0, r1, lsl #15
   19f10:	adc	r2, r2, r2
   19f14:	subcs	r0, r0, r1, lsl #15
   19f18:	cmp	r0, r1, lsl #14
   19f1c:	adc	r2, r2, r2
   19f20:	subcs	r0, r0, r1, lsl #14
   19f24:	cmp	r0, r1, lsl #13
   19f28:	adc	r2, r2, r2
   19f2c:	subcs	r0, r0, r1, lsl #13
   19f30:	cmp	r0, r1, lsl #12
   19f34:	adc	r2, r2, r2
   19f38:	subcs	r0, r0, r1, lsl #12
   19f3c:	cmp	r0, r1, lsl #11
   19f40:	adc	r2, r2, r2
   19f44:	subcs	r0, r0, r1, lsl #11
   19f48:	cmp	r0, r1, lsl #10
   19f4c:	adc	r2, r2, r2
   19f50:	subcs	r0, r0, r1, lsl #10
   19f54:	cmp	r0, r1, lsl #9
   19f58:	adc	r2, r2, r2
   19f5c:	subcs	r0, r0, r1, lsl #9
   19f60:	cmp	r0, r1, lsl #8
   19f64:	adc	r2, r2, r2
   19f68:	subcs	r0, r0, r1, lsl #8
   19f6c:	cmp	r0, r1, lsl #7
   19f70:	adc	r2, r2, r2
   19f74:	subcs	r0, r0, r1, lsl #7
   19f78:	cmp	r0, r1, lsl #6
   19f7c:	adc	r2, r2, r2
   19f80:	subcs	r0, r0, r1, lsl #6
   19f84:	cmp	r0, r1, lsl #5
   19f88:	adc	r2, r2, r2
   19f8c:	subcs	r0, r0, r1, lsl #5
   19f90:	cmp	r0, r1, lsl #4
   19f94:	adc	r2, r2, r2
   19f98:	subcs	r0, r0, r1, lsl #4
   19f9c:	cmp	r0, r1, lsl #3
   19fa0:	adc	r2, r2, r2
   19fa4:	subcs	r0, r0, r1, lsl #3
   19fa8:	cmp	r0, r1, lsl #2
   19fac:	adc	r2, r2, r2
   19fb0:	subcs	r0, r0, r1, lsl #2
   19fb4:	cmp	r0, r1, lsl #1
   19fb8:	adc	r2, r2, r2
   19fbc:	subcs	r0, r0, r1, lsl #1
   19fc0:	cmp	r0, r1
   19fc4:	adc	r2, r2, r2
   19fc8:	subcs	r0, r0, r1
   19fcc:	mov	r0, r2
   19fd0:	bx	lr
   19fd4:	moveq	r0, #1
   19fd8:	movne	r0, #0
   19fdc:	bx	lr
   19fe0:	clz	r2, r1
   19fe4:	rsb	r2, r2, #31
   19fe8:	lsr	r0, r0, r2
   19fec:	bx	lr
   19ff0:	cmp	r0, #0
   19ff4:	mvnne	r0, #0
   19ff8:	b	1a298 <lchmod@@Base+0x4028>
   19ffc:	cmp	r1, #0
   1a000:	beq	19ff0 <lchmod@@Base+0x3d80>
   1a004:	push	{r0, r1, lr}
   1a008:	bl	19e10 <lchmod@@Base+0x3ba0>
   1a00c:	pop	{r1, r2, lr}
   1a010:	mul	r3, r2, r0
   1a014:	sub	r1, r1, r3
   1a018:	bx	lr
   1a01c:	cmp	r1, #0
   1a020:	beq	1a22c <lchmod@@Base+0x3fbc>
   1a024:	eor	ip, r0, r1
   1a028:	rsbmi	r1, r1, #0
   1a02c:	subs	r2, r1, #1
   1a030:	beq	1a1f8 <lchmod@@Base+0x3f88>
   1a034:	movs	r3, r0
   1a038:	rsbmi	r3, r0, #0
   1a03c:	cmp	r3, r1
   1a040:	bls	1a204 <lchmod@@Base+0x3f94>
   1a044:	tst	r1, r2
   1a048:	beq	1a214 <lchmod@@Base+0x3fa4>
   1a04c:	clz	r2, r3
   1a050:	clz	r0, r1
   1a054:	sub	r2, r0, r2
   1a058:	rsbs	r2, r2, #31
   1a05c:	addne	r2, r2, r2, lsl #1
   1a060:	mov	r0, #0
   1a064:	addne	pc, pc, r2, lsl #2
   1a068:	nop			; (mov r0, r0)
   1a06c:	cmp	r3, r1, lsl #31
   1a070:	adc	r0, r0, r0
   1a074:	subcs	r3, r3, r1, lsl #31
   1a078:	cmp	r3, r1, lsl #30
   1a07c:	adc	r0, r0, r0
   1a080:	subcs	r3, r3, r1, lsl #30
   1a084:	cmp	r3, r1, lsl #29
   1a088:	adc	r0, r0, r0
   1a08c:	subcs	r3, r3, r1, lsl #29
   1a090:	cmp	r3, r1, lsl #28
   1a094:	adc	r0, r0, r0
   1a098:	subcs	r3, r3, r1, lsl #28
   1a09c:	cmp	r3, r1, lsl #27
   1a0a0:	adc	r0, r0, r0
   1a0a4:	subcs	r3, r3, r1, lsl #27
   1a0a8:	cmp	r3, r1, lsl #26
   1a0ac:	adc	r0, r0, r0
   1a0b0:	subcs	r3, r3, r1, lsl #26
   1a0b4:	cmp	r3, r1, lsl #25
   1a0b8:	adc	r0, r0, r0
   1a0bc:	subcs	r3, r3, r1, lsl #25
   1a0c0:	cmp	r3, r1, lsl #24
   1a0c4:	adc	r0, r0, r0
   1a0c8:	subcs	r3, r3, r1, lsl #24
   1a0cc:	cmp	r3, r1, lsl #23
   1a0d0:	adc	r0, r0, r0
   1a0d4:	subcs	r3, r3, r1, lsl #23
   1a0d8:	cmp	r3, r1, lsl #22
   1a0dc:	adc	r0, r0, r0
   1a0e0:	subcs	r3, r3, r1, lsl #22
   1a0e4:	cmp	r3, r1, lsl #21
   1a0e8:	adc	r0, r0, r0
   1a0ec:	subcs	r3, r3, r1, lsl #21
   1a0f0:	cmp	r3, r1, lsl #20
   1a0f4:	adc	r0, r0, r0
   1a0f8:	subcs	r3, r3, r1, lsl #20
   1a0fc:	cmp	r3, r1, lsl #19
   1a100:	adc	r0, r0, r0
   1a104:	subcs	r3, r3, r1, lsl #19
   1a108:	cmp	r3, r1, lsl #18
   1a10c:	adc	r0, r0, r0
   1a110:	subcs	r3, r3, r1, lsl #18
   1a114:	cmp	r3, r1, lsl #17
   1a118:	adc	r0, r0, r0
   1a11c:	subcs	r3, r3, r1, lsl #17
   1a120:	cmp	r3, r1, lsl #16
   1a124:	adc	r0, r0, r0
   1a128:	subcs	r3, r3, r1, lsl #16
   1a12c:	cmp	r3, r1, lsl #15
   1a130:	adc	r0, r0, r0
   1a134:	subcs	r3, r3, r1, lsl #15
   1a138:	cmp	r3, r1, lsl #14
   1a13c:	adc	r0, r0, r0
   1a140:	subcs	r3, r3, r1, lsl #14
   1a144:	cmp	r3, r1, lsl #13
   1a148:	adc	r0, r0, r0
   1a14c:	subcs	r3, r3, r1, lsl #13
   1a150:	cmp	r3, r1, lsl #12
   1a154:	adc	r0, r0, r0
   1a158:	subcs	r3, r3, r1, lsl #12
   1a15c:	cmp	r3, r1, lsl #11
   1a160:	adc	r0, r0, r0
   1a164:	subcs	r3, r3, r1, lsl #11
   1a168:	cmp	r3, r1, lsl #10
   1a16c:	adc	r0, r0, r0
   1a170:	subcs	r3, r3, r1, lsl #10
   1a174:	cmp	r3, r1, lsl #9
   1a178:	adc	r0, r0, r0
   1a17c:	subcs	r3, r3, r1, lsl #9
   1a180:	cmp	r3, r1, lsl #8
   1a184:	adc	r0, r0, r0
   1a188:	subcs	r3, r3, r1, lsl #8
   1a18c:	cmp	r3, r1, lsl #7
   1a190:	adc	r0, r0, r0
   1a194:	subcs	r3, r3, r1, lsl #7
   1a198:	cmp	r3, r1, lsl #6
   1a19c:	adc	r0, r0, r0
   1a1a0:	subcs	r3, r3, r1, lsl #6
   1a1a4:	cmp	r3, r1, lsl #5
   1a1a8:	adc	r0, r0, r0
   1a1ac:	subcs	r3, r3, r1, lsl #5
   1a1b0:	cmp	r3, r1, lsl #4
   1a1b4:	adc	r0, r0, r0
   1a1b8:	subcs	r3, r3, r1, lsl #4
   1a1bc:	cmp	r3, r1, lsl #3
   1a1c0:	adc	r0, r0, r0
   1a1c4:	subcs	r3, r3, r1, lsl #3
   1a1c8:	cmp	r3, r1, lsl #2
   1a1cc:	adc	r0, r0, r0
   1a1d0:	subcs	r3, r3, r1, lsl #2
   1a1d4:	cmp	r3, r1, lsl #1
   1a1d8:	adc	r0, r0, r0
   1a1dc:	subcs	r3, r3, r1, lsl #1
   1a1e0:	cmp	r3, r1
   1a1e4:	adc	r0, r0, r0
   1a1e8:	subcs	r3, r3, r1
   1a1ec:	cmp	ip, #0
   1a1f0:	rsbmi	r0, r0, #0
   1a1f4:	bx	lr
   1a1f8:	teq	ip, r0
   1a1fc:	rsbmi	r0, r0, #0
   1a200:	bx	lr
   1a204:	movcc	r0, #0
   1a208:	asreq	r0, ip, #31
   1a20c:	orreq	r0, r0, #1
   1a210:	bx	lr
   1a214:	clz	r2, r1
   1a218:	rsb	r2, r2, #31
   1a21c:	cmp	ip, #0
   1a220:	lsr	r0, r3, r2
   1a224:	rsbmi	r0, r0, #0
   1a228:	bx	lr
   1a22c:	cmp	r0, #0
   1a230:	mvngt	r0, #-2147483648	; 0x80000000
   1a234:	movlt	r0, #-2147483648	; 0x80000000
   1a238:	b	1a298 <lchmod@@Base+0x4028>
   1a23c:	cmp	r1, #0
   1a240:	beq	1a22c <lchmod@@Base+0x3fbc>
   1a244:	push	{r0, r1, lr}
   1a248:	bl	1a024 <lchmod@@Base+0x3db4>
   1a24c:	pop	{r1, r2, lr}
   1a250:	mul	r3, r2, r0
   1a254:	sub	r1, r1, r3
   1a258:	bx	lr
   1a25c:	cmp	r3, #0
   1a260:	cmpeq	r2, #0
   1a264:	bne	1a27c <lchmod@@Base+0x400c>
   1a268:	cmp	r1, #0
   1a26c:	cmpeq	r0, #0
   1a270:	mvnne	r1, #0
   1a274:	mvnne	r0, #0
   1a278:	b	1a298 <lchmod@@Base+0x4028>
   1a27c:	sub	sp, sp, #8
   1a280:	push	{sp, lr}
   1a284:	bl	1a2a8 <lchmod@@Base+0x4038>
   1a288:	ldr	lr, [sp, #4]
   1a28c:	add	sp, sp, #8
   1a290:	pop	{r2, r3}
   1a294:	bx	lr
   1a298:	push	{r1, lr}
   1a29c:	mov	r0, #8
   1a2a0:	bl	1143c <raise@plt>
   1a2a4:	pop	{r1, pc}
   1a2a8:	cmp	r1, r3
   1a2ac:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a2b0:	cmpeq	r0, r2
   1a2b4:	mov	r4, r0
   1a2b8:	mov	r5, r1
   1a2bc:	ldr	r9, [sp, #28]
   1a2c0:	movcc	r0, #0
   1a2c4:	movcc	r1, #0
   1a2c8:	bcc	1a3c0 <lchmod@@Base+0x4150>
   1a2cc:	cmp	r3, #0
   1a2d0:	clzeq	ip, r2
   1a2d4:	clzne	ip, r3
   1a2d8:	addeq	ip, ip, #32
   1a2dc:	cmp	r5, #0
   1a2e0:	clzeq	r1, r4
   1a2e4:	addeq	r1, r1, #32
   1a2e8:	clzne	r1, r5
   1a2ec:	sub	ip, ip, r1
   1a2f0:	sub	lr, ip, #32
   1a2f4:	lsl	r7, r3, ip
   1a2f8:	rsb	r8, ip, #32
   1a2fc:	orr	r7, r7, r2, lsl lr
   1a300:	orr	r7, r7, r2, lsr r8
   1a304:	lsl	r6, r2, ip
   1a308:	cmp	r5, r7
   1a30c:	cmpeq	r4, r6
   1a310:	movcc	r0, #0
   1a314:	movcc	r1, #0
   1a318:	bcc	1a334 <lchmod@@Base+0x40c4>
   1a31c:	mov	r3, #1
   1a320:	subs	r4, r4, r6
   1a324:	lsl	r1, r3, lr
   1a328:	lsl	r0, r3, ip
   1a32c:	orr	r1, r1, r3, lsr r8
   1a330:	sbc	r5, r5, r7
   1a334:	cmp	ip, #0
   1a338:	beq	1a3c0 <lchmod@@Base+0x4150>
   1a33c:	lsrs	r3, r7, #1
   1a340:	rrx	r2, r6
   1a344:	mov	r6, ip
   1a348:	b	1a36c <lchmod@@Base+0x40fc>
   1a34c:	subs	r4, r4, r2
   1a350:	sbc	r5, r5, r3
   1a354:	adds	r4, r4, r4
   1a358:	adc	r5, r5, r5
   1a35c:	adds	r4, r4, #1
   1a360:	adc	r5, r5, #0
   1a364:	subs	r6, r6, #1
   1a368:	beq	1a388 <lchmod@@Base+0x4118>
   1a36c:	cmp	r5, r3
   1a370:	cmpeq	r4, r2
   1a374:	bcs	1a34c <lchmod@@Base+0x40dc>
   1a378:	adds	r4, r4, r4
   1a37c:	adc	r5, r5, r5
   1a380:	subs	r6, r6, #1
   1a384:	bne	1a36c <lchmod@@Base+0x40fc>
   1a388:	lsr	r6, r4, ip
   1a38c:	lsr	r7, r5, ip
   1a390:	orr	r6, r6, r5, lsl r8
   1a394:	adds	r2, r0, r4
   1a398:	orr	r6, r6, r5, lsr lr
   1a39c:	adc	r3, r1, r5
   1a3a0:	lsl	r1, r7, ip
   1a3a4:	orr	r1, r1, r6, lsl lr
   1a3a8:	lsl	r0, r6, ip
   1a3ac:	orr	r1, r1, r6, lsr r8
   1a3b0:	subs	r0, r2, r0
   1a3b4:	mov	r4, r6
   1a3b8:	mov	r5, r7
   1a3bc:	sbc	r1, r3, r1
   1a3c0:	cmp	r9, #0
   1a3c4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1a3c8:	strd	r4, [r9]
   1a3cc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a3d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a3d4:	mov	r7, r0
   1a3d8:	ldr	r6, [pc, #72]	; 1a428 <lchmod@@Base+0x41b8>
   1a3dc:	ldr	r5, [pc, #72]	; 1a42c <lchmod@@Base+0x41bc>
   1a3e0:	add	r6, pc, r6
   1a3e4:	add	r5, pc, r5
   1a3e8:	sub	r6, r6, r5
   1a3ec:	mov	r8, r1
   1a3f0:	mov	r9, r2
   1a3f4:	bl	113ec <fstatfs64@plt-0x20>
   1a3f8:	asrs	r6, r6, #2
   1a3fc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a400:	mov	r4, #0
   1a404:	add	r4, r4, #1
   1a408:	ldr	r3, [r5], #4
   1a40c:	mov	r2, r9
   1a410:	mov	r1, r8
   1a414:	mov	r0, r7
   1a418:	blx	r3
   1a41c:	cmp	r6, r4
   1a420:	bne	1a404 <lchmod@@Base+0x4194>
   1a424:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a428:	andeq	r1, r1, r0, lsr #22
   1a42c:	andeq	r1, r1, r8, lsl fp
   1a430:	bx	lr
   1a434:	ldr	r3, [pc, #12]	; 1a448 <lchmod@@Base+0x41d8>
   1a438:	mov	r1, #0
   1a43c:	add	r3, pc, r3
   1a440:	ldr	r2, [r3]
   1a444:	b	116a0 <__cxa_atexit@plt>
   1a448:	andeq	r1, r1, r4, lsr sp

Disassembly of section .fini:

0001a44c <.fini>:
   1a44c:	push	{r3, lr}
   1a450:	pop	{r3, pc}
