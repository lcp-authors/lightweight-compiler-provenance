
../repos/coreutils/src/csplit:     file format elf32-littlearm


Disassembly of section .init:

00011178 <.init>:
   11178:	push	{r3, lr}
   1117c:	bl	12650 <__assert_fail@plt+0x10f8>
   11180:	pop	{r3, pc}

Disassembly of section .plt:

00011184 <pthread_mutex_unlock@plt-0x14>:
   11184:	push	{lr}		; (str lr, [sp, #-4]!)
   11188:	ldr	lr, [pc, #4]	; 11194 <pthread_mutex_unlock@plt-0x4>
   1118c:	add	lr, pc, lr
   11190:	ldr	pc, [lr, #8]!
   11194:	andeq	ip, r2, ip, ror #28

00011198 <pthread_mutex_unlock@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #44, 20	; 0x2c000
   111a0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111a4 <fdopen@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #44, 20	; 0x2c000
   111ac:	ldr	pc, [ip, #3684]!	; 0xe64

000111b0 <calloc@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #44, 20	; 0x2c000
   111b8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111bc <fputs_unlocked@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #44, 20	; 0x2c000
   111c4:	ldr	pc, [ip, #3668]!	; 0xe54

000111c8 <wctype@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #44, 20	; 0x2c000
   111d0:	ldr	pc, [ip, #3660]!	; 0xe4c

000111d4 <raise@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #44, 20	; 0x2c000
   111dc:	ldr	pc, [ip, #3652]!	; 0xe44

000111e0 <wcrtomb@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #44, 20	; 0x2c000
   111e8:	ldr	pc, [ip, #3644]!	; 0xe3c

000111ec <iswctype@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #44, 20	; 0x2c000
   111f4:	ldr	pc, [ip, #3636]!	; 0xe34

000111f8 <strcmp@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #44, 20	; 0x2c000
   11200:	ldr	pc, [ip, #3628]!	; 0xe2c

00011204 <read@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #44, 20	; 0x2c000
   1120c:	ldr	pc, [ip, #3620]!	; 0xe24

00011210 <pthread_mutex_destroy@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #44, 20	; 0x2c000
   11218:	ldr	pc, [ip, #3612]!	; 0xe1c

0001121c <fflush@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #44, 20	; 0x2c000
   11224:	ldr	pc, [ip, #3604]!	; 0xe14

00011228 <sigprocmask@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #44, 20	; 0x2c000
   11230:	ldr	pc, [ip, #3596]!	; 0xe0c

00011234 <memmove@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #44, 20	; 0x2c000
   1123c:	ldr	pc, [ip, #3588]!	; 0xe04

00011240 <free@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #44, 20	; 0x2c000
   11248:	ldr	pc, [ip, #3580]!	; 0xdfc

0001124c <pthread_mutex_lock@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #44, 20	; 0x2c000
   11254:	ldr	pc, [ip, #3572]!	; 0xdf4

00011258 <_exit@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #44, 20	; 0x2c000
   11260:	ldr	pc, [ip, #3564]!	; 0xdec

00011264 <memcpy@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #44, 20	; 0x2c000
   1126c:	ldr	pc, [ip, #3556]!	; 0xde4

00011270 <pthread_mutex_init@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #44, 20	; 0x2c000
   11278:	ldr	pc, [ip, #3548]!	; 0xddc

0001127c <__strtoull_internal@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #44, 20	; 0x2c000
   11284:	ldr	pc, [ip, #3540]!	; 0xdd4

00011288 <towlower@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #44, 20	; 0x2c000
   11290:	ldr	pc, [ip, #3532]!	; 0xdcc

00011294 <mbsinit@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #44, 20	; 0x2c000
   1129c:	ldr	pc, [ip, #3524]!	; 0xdc4

000112a0 <signal@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #44, 20	; 0x2c000
   112a8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112ac <fwrite_unlocked@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #44, 20	; 0x2c000
   112b4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112b8 <memcmp@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #44, 20	; 0x2c000
   112c0:	ldr	pc, [ip, #3500]!	; 0xdac

000112c4 <fputc_unlocked@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #44, 20	; 0x2c000
   112cc:	ldr	pc, [ip, #3492]!	; 0xda4

000112d0 <dcgettext@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #44, 20	; 0x2c000
   112d8:	ldr	pc, [ip, #3484]!	; 0xd9c

000112dc <unlink@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #44, 20	; 0x2c000
   112e4:	ldr	pc, [ip, #3476]!	; 0xd94

000112e8 <dup2@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #44, 20	; 0x2c000
   112f0:	ldr	pc, [ip, #3468]!	; 0xd8c

000112f4 <realloc@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #44, 20	; 0x2c000
   112fc:	ldr	pc, [ip, #3460]!	; 0xd84

00011300 <sigismember@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #44, 20	; 0x2c000
   11308:	ldr	pc, [ip, #3452]!	; 0xd7c

0001130c <textdomain@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #44, 20	; 0x2c000
   11314:	ldr	pc, [ip, #3444]!	; 0xd74

00011318 <rawmemchr@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #44, 20	; 0x2c000
   11320:	ldr	pc, [ip, #3436]!	; 0xd6c

00011324 <iswprint@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #44, 20	; 0x2c000
   1132c:	ldr	pc, [ip, #3428]!	; 0xd64

00011330 <sigaction@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #44, 20	; 0x2c000
   11338:	ldr	pc, [ip, #3420]!	; 0xd5c

0001133c <fwrite@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #44, 20	; 0x2c000
   11344:	ldr	pc, [ip, #3412]!	; 0xd54

00011348 <lseek64@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #44, 20	; 0x2c000
   11350:	ldr	pc, [ip, #3404]!	; 0xd4c

00011354 <__ctype_get_mb_cur_max@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #44, 20	; 0x2c000
   1135c:	ldr	pc, [ip, #3396]!	; 0xd44

00011360 <strcpy@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #44, 20	; 0x2c000
   11368:	ldr	pc, [ip, #3388]!	; 0xd3c

0001136c <__fpending@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #44, 20	; 0x2c000
   11374:	ldr	pc, [ip, #3380]!	; 0xd34

00011378 <mbrtowc@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #44, 20	; 0x2c000
   11380:	ldr	pc, [ip, #3372]!	; 0xd2c

00011384 <error@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #44, 20	; 0x2c000
   1138c:	ldr	pc, [ip, #3364]!	; 0xd24

00011390 <open64@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #44, 20	; 0x2c000
   11398:	ldr	pc, [ip, #3356]!	; 0xd1c

0001139c <malloc@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #44, 20	; 0x2c000
   113a4:	ldr	pc, [ip, #3348]!	; 0xd14

000113a8 <sigaddset@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #44, 20	; 0x2c000
   113b0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113b4 <__libc_start_main@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #44, 20	; 0x2c000
   113bc:	ldr	pc, [ip, #3332]!	; 0xd04

000113c0 <__freading@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #44, 20	; 0x2c000
   113c8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113cc <__ctype_tolower_loc@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #44, 20	; 0x2c000
   113d4:	ldr	pc, [ip, #3316]!	; 0xcf4

000113d8 <__ctype_toupper_loc@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #44, 20	; 0x2c000
   113e0:	ldr	pc, [ip, #3308]!	; 0xcec

000113e4 <__gmon_start__@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #44, 20	; 0x2c000
   113ec:	ldr	pc, [ip, #3300]!	; 0xce4

000113f0 <getopt_long@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #44, 20	; 0x2c000
   113f8:	ldr	pc, [ip, #3292]!	; 0xcdc

000113fc <__ctype_b_loc@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #44, 20	; 0x2c000
   11404:	ldr	pc, [ip, #3284]!	; 0xcd4

00011408 <exit@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #44, 20	; 0x2c000
   11410:	ldr	pc, [ip, #3276]!	; 0xccc

00011414 <strlen@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #44, 20	; 0x2c000
   1141c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011420 <strchr@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #44, 20	; 0x2c000
   11428:	ldr	pc, [ip, #3260]!	; 0xcbc

0001142c <__errno_location@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #44, 20	; 0x2c000
   11434:	ldr	pc, [ip, #3252]!	; 0xcb4

00011438 <iswalnum@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #44, 20	; 0x2c000
   11440:	ldr	pc, [ip, #3244]!	; 0xcac

00011444 <__sprintf_chk@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #44, 20	; 0x2c000
   1144c:	ldr	pc, [ip, #3236]!	; 0xca4

00011450 <__cxa_atexit@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #44, 20	; 0x2c000
   11458:	ldr	pc, [ip, #3228]!	; 0xc9c

0001145c <memset@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #44, 20	; 0x2c000
   11464:	ldr	pc, [ip, #3220]!	; 0xc94

00011468 <btowc@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #44, 20	; 0x2c000
   11470:	ldr	pc, [ip, #3212]!	; 0xc8c

00011474 <__printf_chk@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #44, 20	; 0x2c000
   1147c:	ldr	pc, [ip, #3204]!	; 0xc84

00011480 <fileno@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #44, 20	; 0x2c000
   11488:	ldr	pc, [ip, #3196]!	; 0xc7c

0001148c <__fprintf_chk@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #44, 20	; 0x2c000
   11494:	ldr	pc, [ip, #3188]!	; 0xc74

00011498 <fclose@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #44, 20	; 0x2c000
   114a0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114a4 <fseeko64@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #44, 20	; 0x2c000
   114ac:	ldr	pc, [ip, #3172]!	; 0xc64

000114b0 <fcntl64@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #44, 20	; 0x2c000
   114b8:	ldr	pc, [ip, #3164]!	; 0xc5c

000114bc <setlocale@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #44, 20	; 0x2c000
   114c4:	ldr	pc, [ip, #3156]!	; 0xc54

000114c8 <sigemptyset@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #44, 20	; 0x2c000
   114d0:	ldr	pc, [ip, #3148]!	; 0xc4c

000114d4 <strrchr@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #44, 20	; 0x2c000
   114dc:	ldr	pc, [ip, #3140]!	; 0xc44

000114e0 <nl_langinfo@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #44, 20	; 0x2c000
   114e8:	ldr	pc, [ip, #3132]!	; 0xc3c

000114ec <fputc@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #44, 20	; 0x2c000
   114f4:	ldr	pc, [ip, #3124]!	; 0xc34

000114f8 <__strtoll_internal@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #44, 20	; 0x2c000
   11500:	ldr	pc, [ip, #3116]!	; 0xc2c

00011504 <fopen64@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #44, 20	; 0x2c000
   1150c:	ldr	pc, [ip, #3108]!	; 0xc24

00011510 <bindtextdomain@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #44, 20	; 0x2c000
   11518:	ldr	pc, [ip, #3100]!	; 0xc1c

0001151c <towupper@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #44, 20	; 0x2c000
   11524:	ldr	pc, [ip, #3092]!	; 0xc14

00011528 <strncmp@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #44, 20	; 0x2c000
   11530:	ldr	pc, [ip, #3084]!	; 0xc0c

00011534 <abort@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #44, 20	; 0x2c000
   1153c:	ldr	pc, [ip, #3076]!	; 0xc04

00011540 <close@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #44, 20	; 0x2c000
   11548:	ldr	pc, [ip, #3068]!	; 0xbfc

0001154c <__snprintf_chk@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #44, 20	; 0x2c000
   11554:	ldr	pc, [ip, #3060]!	; 0xbf4

00011558 <__assert_fail@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #44, 20	; 0x2c000
   11560:	ldr	pc, [ip, #3052]!	; 0xbec

Disassembly of section .text:

00011568 <.text>:
   11568:	push	{r4, lr}
   1156c:	bl	1142c <__errno_location@plt>
   11570:	mov	r2, #5
   11574:	ldr	r1, [pc, #24]	; 11594 <__assert_fail@plt+0x3c>
   11578:	ldr	r4, [r0]
   1157c:	mov	r0, #0
   11580:	bl	112d0 <dcgettext@plt>
   11584:	mov	r1, r4
   11588:	mov	r2, r0
   1158c:	mov	r0, #1
   11590:	bl	11384 <error@plt>
   11594:			; <UNDEFINED> instruction: 0x0002c3b4
   11598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1159c:	sub	sp, sp, #204	; 0xcc
   115a0:	mov	fp, r1
   115a4:	str	r0, [sp, #24]
   115a8:	ldr	r0, [r1]
   115ac:	bl	13dcc <__assert_fail@plt+0x2874>
   115b0:	ldr	r1, [pc, #3908]	; 124fc <__assert_fail@plt+0xfa4>
   115b4:	mov	r0, #6
   115b8:	bl	114bc <setlocale@plt>
   115bc:	ldr	r1, [pc, #3900]	; 12500 <__assert_fail@plt+0xfa8>
   115c0:	ldr	r0, [pc, #3900]	; 12504 <__assert_fail@plt+0xfac>
   115c4:	bl	11510 <bindtextdomain@plt>
   115c8:	ldr	r0, [pc, #3892]	; 12504 <__assert_fail@plt+0xfac>
   115cc:	ldr	sl, [pc, #3892]	; 12508 <__assert_fail@plt+0xfb0>
   115d0:	bl	1130c <textdomain@plt>
   115d4:	ldr	r6, [pc, #3888]	; 1250c <__assert_fail@plt+0xfb4>
   115d8:	ldr	r0, [pc, #3888]	; 12510 <__assert_fail@plt+0xfb8>
   115dc:	ldr	r5, [pc, #3888]	; 12514 <__assert_fail@plt+0xfbc>
   115e0:	ldr	r7, [pc, #3888]	; 12518 <__assert_fail@plt+0xfc0>
   115e4:	ldr	r9, [pc, #3856]	; 124fc <__assert_fail@plt+0xfa4>
   115e8:	ldr	r8, [pc, #3884]	; 1251c <__assert_fail@plt+0xfc4>
   115ec:	bl	2c270 <__assert_fail@plt+0x1ad18>
   115f0:	ldr	r2, [pc, #3880]	; 12520 <__assert_fail@plt+0xfc8>
   115f4:	mov	r3, #0
   115f8:	mov	r1, #1
   115fc:	strb	r1, [sl, #128]	; 0x80
   11600:	str	fp, [sl, #208]	; 0xd0
   11604:	str	r3, [sl, #212]	; 0xd4
   11608:	str	r2, [sl, #140]	; 0x8c
   1160c:	str	r3, [sl, #216]	; 0xd8
   11610:	strb	r3, [sl, #169]	; 0xa9
   11614:	strb	r3, [sl, #220]	; 0xdc
   11618:	mov	r4, #0
   1161c:	str	r4, [sp]
   11620:	mov	r3, r6
   11624:	mov	r2, r5
   11628:	mov	r1, fp
   1162c:	ldr	r0, [sp, #24]
   11630:	bl	113f0 <getopt_long@plt>
   11634:	cmn	r0, #1
   11638:	beq	11798 <__assert_fail@plt+0x240>
   1163c:	cmp	r0, #107	; 0x6b
   11640:	beq	11790 <__assert_fail@plt+0x238>
   11644:	bgt	11670 <__assert_fail@plt+0x118>
   11648:	cmn	r0, #2
   1164c:	beq	11788 <__assert_fail@plt+0x230>
   11650:	ble	11748 <__assert_fail@plt+0x1f0>
   11654:	cmp	r0, #98	; 0x62
   11658:	beq	116f4 <__assert_fail@plt+0x19c>
   1165c:	cmp	r0, #102	; 0x66
   11660:	bne	11740 <__assert_fail@plt+0x1e8>
   11664:	ldr	r3, [r7]
   11668:	str	r3, [sl, #140]	; 0x8c
   1166c:	b	11618 <__assert_fail@plt+0xc0>
   11670:	cmp	r0, #115	; 0x73
   11674:	beq	11708 <__assert_fail@plt+0x1b0>
   11678:	ble	11698 <__assert_fail@plt+0x140>
   1167c:	cmp	r0, #122	; 0x7a
   11680:	beq	116e8 <__assert_fail@plt+0x190>
   11684:	cmp	r0, #256	; 0x100
   11688:	bne	11740 <__assert_fail@plt+0x1e8>
   1168c:	mov	r3, #1
   11690:	strb	r3, [sl, #220]	; 0xdc
   11694:	b	11618 <__assert_fail@plt+0xc0>
   11698:	cmp	r0, #110	; 0x6e
   1169c:	bne	11700 <__assert_fail@plt+0x1a8>
   116a0:	ldr	r3, [r7]
   116a4:	mov	r2, #5
   116a8:	ldr	r1, [pc, #3700]	; 12524 <__assert_fail@plt+0xfcc>
   116ac:	mov	r0, r4
   116b0:	str	r3, [sp, #32]
   116b4:	bl	112d0 <dcgettext@plt>
   116b8:	mvn	r2, #-2147483648	; 0x80000000
   116bc:	mov	r3, #0
   116c0:	str	r4, [sp, #16]
   116c4:	strd	r2, [sp]
   116c8:	str	r9, [sp, #8]
   116cc:	mov	r2, #0
   116d0:	mov	r3, #0
   116d4:	str	r0, [sp, #12]
   116d8:	ldr	r0, [sp, #32]
   116dc:	bl	29b58 <__assert_fail@plt+0x18600>
   116e0:	str	r0, [r8]
   116e4:	b	11618 <__assert_fail@plt+0xc0>
   116e8:	mov	r3, #1
   116ec:	strb	r3, [sl, #168]	; 0xa8
   116f0:	b	11618 <__assert_fail@plt+0xc0>
   116f4:	ldr	r3, [r7]
   116f8:	str	r3, [sl, #144]	; 0x90
   116fc:	b	11618 <__assert_fail@plt+0xc0>
   11700:	cmp	r0, #113	; 0x71
   11704:	bne	11740 <__assert_fail@plt+0x1e8>
   11708:	mov	r3, #1
   1170c:	strb	r3, [sl, #169]	; 0xa9
   11710:	b	11618 <__assert_fail@plt+0xc0>
   11714:	ldr	r2, [sp, #24]
   11718:	cmp	r2, r3
   1171c:	mov	r2, #5
   11720:	bgt	125dc <__assert_fail@plt+0x1084>
   11724:	ldr	r1, [pc, #3580]	; 12528 <__assert_fail@plt+0xfd0>
   11728:	mov	r0, r4
   1172c:	bl	112d0 <dcgettext@plt>
   11730:	mov	r1, r4
   11734:	mov	r2, r0
   11738:	mov	r0, r4
   1173c:	bl	11384 <error@plt>
   11740:	mov	r0, #1
   11744:	bl	13594 <__assert_fail@plt+0x203c>
   11748:	cmn	r0, #3
   1174c:	bne	11740 <__assert_fail@plt+0x1e8>
   11750:	ldr	r3, [pc, #3540]	; 1252c <__assert_fail@plt+0xfd4>
   11754:	ldr	r0, [pc, #3540]	; 12530 <__assert_fail@plt+0xfd8>
   11758:	ldr	r1, [pc, #3540]	; 12534 <__assert_fail@plt+0xfdc>
   1175c:	ldr	r2, [pc, #3540]	; 12538 <__assert_fail@plt+0xfe0>
   11760:	str	r4, [sp, #8]
   11764:	ldr	r0, [r0]
   11768:	ldr	r3, [r3]
   1176c:	str	r1, [sp, #4]
   11770:	str	r2, [sp]
   11774:	ldr	r1, [pc, #3520]	; 1253c <__assert_fail@plt+0xfe4>
   11778:	ldr	r2, [pc, #3520]	; 12540 <__assert_fail@plt+0xfe8>
   1177c:	bl	291e0 <__assert_fail@plt+0x17c88>
   11780:	mov	r0, r4
   11784:	bl	11408 <exit@plt>
   11788:	mov	r0, r4
   1178c:	bl	13594 <__assert_fail@plt+0x203c>
   11790:	strb	r4, [sl, #128]	; 0x80
   11794:	b	11618 <__assert_fail@plt+0xc0>
   11798:	ldr	r5, [pc, #3492]	; 12544 <__assert_fail@plt+0xfec>
   1179c:	ldr	r2, [sp, #24]
   117a0:	ldr	r3, [r5]
   117a4:	sub	r2, r2, r3
   117a8:	cmp	r2, #1
   117ac:	ble	11714 <__assert_fail@plt+0x1bc>
   117b0:	ldr	r0, [sl, #140]	; 0x8c
   117b4:	bl	11414 <strlen@plt>
   117b8:	ldr	r3, [sl, #144]	; 0x90
   117bc:	cmp	r3, #0
   117c0:	mov	r6, r0
   117c4:	beq	11920 <__assert_fail@plt+0x3c8>
   117c8:	ldr	r0, [sl, #144]	; 0x90
   117cc:	mov	ip, #1
   117d0:	mov	r2, r0
   117d4:	mov	r8, #2
   117d8:	mov	lr, #100	; 0x64
   117dc:	b	117e4 <__assert_fail@plt+0x28c>
   117e0:	add	r2, r2, #1
   117e4:	ldrb	r1, [r2]
   117e8:	cmp	r1, #0
   117ec:	beq	12190 <__assert_fail@plt+0xc38>
   117f0:	cmp	r1, #37	; 0x25
   117f4:	bne	117e0 <__assert_fail@plt+0x288>
   117f8:	ldrb	r3, [r2, #1]
   117fc:	add	r1, r2, #1
   11800:	cmp	r3, #37	; 0x25
   11804:	beq	11918 <__assert_fail@plt+0x3c0>
   11808:	cmp	r4, #0
   1180c:	bne	1249c <__assert_fail@plt+0xf44>
   11810:	mov	r2, r1
   11814:	ldrb	r3, [r1], #1
   11818:	cmp	r3, #39	; 0x27
   1181c:	beq	118a8 <__assert_fail@plt+0x350>
   11820:	bhi	11894 <__assert_fail@plt+0x33c>
   11824:	cmp	r3, #35	; 0x23
   11828:	bne	11838 <__assert_fail@plt+0x2e0>
   1182c:	orr	r4, r4, #2
   11830:	b	11810 <__assert_fail@plt+0x2b8>
   11834:	ldrb	r3, [r2, #1]!
   11838:	sub	r1, r3, #48	; 0x30
   1183c:	cmp	r1, #9
   11840:	bls	11834 <__assert_fail@plt+0x2dc>
   11844:	cmp	r3, #46	; 0x2e
   11848:	beq	11904 <__assert_fail@plt+0x3ac>
   1184c:	ldrb	r7, [r2]
   11850:	cmp	r7, #105	; 0x69
   11854:	beq	121c4 <__assert_fail@plt+0xc6c>
   11858:	bhi	118b0 <__assert_fail@plt+0x358>
   1185c:	cmp	r7, #88	; 0x58
   11860:	beq	121d8 <__assert_fail@plt+0xc80>
   11864:	cmp	r7, #100	; 0x64
   11868:	beq	121c4 <__assert_fail@plt+0xc6c>
   1186c:	cmp	r7, #0
   11870:	bne	118c8 <__assert_fail@plt+0x370>
   11874:	ldr	r1, [pc, #3276]	; 12548 <__assert_fail@plt+0xff0>
   11878:	mov	r2, #5
   1187c:	mov	r0, #0
   11880:	bl	112d0 <dcgettext@plt>
   11884:	mov	r1, #0
   11888:	mov	r2, r0
   1188c:	mov	r0, #1
   11890:	bl	11384 <error@plt>
   11894:	cmp	r3, #45	; 0x2d
   11898:	beq	11810 <__assert_fail@plt+0x2b8>
   1189c:	cmp	r3, #48	; 0x30
   118a0:	beq	11810 <__assert_fail@plt+0x2b8>
   118a4:	b	11838 <__assert_fail@plt+0x2e0>
   118a8:	orr	r4, r4, #1
   118ac:	b	11810 <__assert_fail@plt+0x2b8>
   118b0:	cmp	r7, #117	; 0x75
   118b4:	beq	121e0 <__assert_fail@plt+0xc88>
   118b8:	cmp	r7, #120	; 0x78
   118bc:	beq	121d8 <__assert_fail@plt+0xc80>
   118c0:	cmp	r7, #111	; 0x6f
   118c4:	beq	121d8 <__assert_fail@plt+0xc80>
   118c8:	bl	113fc <__ctype_b_loc@plt>
   118cc:	lsl	r3, r7, #1
   118d0:	ldr	r2, [r0]
   118d4:	mov	r0, #0
   118d8:	ldrh	r4, [r2, r3]
   118dc:	mov	r2, #5
   118e0:	ands	r4, r4, #16384	; 0x4000
   118e4:	ldreq	r1, [pc, #3168]	; 1254c <__assert_fail@plt+0xff4>
   118e8:	ldrne	r1, [pc, #3168]	; 12550 <__assert_fail@plt+0xff8>
   118ec:	bl	112d0 <dcgettext@plt>
   118f0:	mov	r3, r7
   118f4:	mov	r1, #0
   118f8:	mov	r2, r0
   118fc:	mov	r0, #1
   11900:	bl	11384 <error@plt>
   11904:	ldrb	r3, [r2, #1]!
   11908:	sub	r3, r3, #48	; 0x30
   1190c:	cmp	r3, #9
   11910:	bls	11904 <__assert_fail@plt+0x3ac>
   11914:	b	1184c <__assert_fail@plt+0x2f4>
   11918:	mov	r2, r1
   1191c:	b	117e0 <__assert_fail@plt+0x288>
   11920:	ldr	r3, [pc, #3060]	; 1251c <__assert_fail@plt+0xfc4>
   11924:	ldr	r2, [r3]
   11928:	cmp	r2, #10
   1192c:	bls	12088 <__assert_fail@plt+0xb30>
   11930:	ldr	r0, [r3]
   11934:	cmn	r0, #1
   11938:	bge	1208c <__assert_fail@plt+0xb34>
   1193c:	mvn	r3, #-2147483648	; 0x80000000
   11940:	sub	r3, r3, r0
   11944:	cmp	r6, r3
   11948:	movge	r3, #0
   1194c:	movlt	r3, #1
   11950:	cmp	r3, #0
   11954:	beq	1195c <__assert_fail@plt+0x404>
   11958:	bl	12d78 <__assert_fail@plt+0x1820>
   1195c:	add	r6, r6, #1
   11960:	add	r0, r6, r0
   11964:	bl	293dc <__assert_fail@plt+0x17e84>
   11968:	ldr	r3, [r5]
   1196c:	ldr	r1, [pc, #3040]	; 12554 <__assert_fail@plt+0xffc>
   11970:	add	r2, r3, #1
   11974:	ldr	r4, [fp, r3, lsl #2]
   11978:	str	r2, [r5]
   1197c:	str	r0, [sl, #136]	; 0x88
   11980:	mov	r0, r4
   11984:	bl	111f8 <strcmp@plt>
   11988:	cmp	r0, #0
   1198c:	bne	121f4 <__assert_fail@plt+0xc9c>
   11990:	ldr	r8, [r5]
   11994:	ldr	r3, [sp, #24]
   11998:	cmp	r3, r8
   1199c:	ble	11b3c <__assert_fail@plt+0x5e4>
   119a0:	ldr	r5, [fp, r8, lsl #2]
   119a4:	lsl	r3, r8, #2
   119a8:	str	r3, [sp, #32]
   119ac:	ldrb	r4, [r5]
   119b0:	add	r9, fp, r3
   119b4:	cmp	r4, #37	; 0x25
   119b8:	cmpne	r4, #47	; 0x2f
   119bc:	sub	r3, r4, #37	; 0x25
   119c0:	clz	r3, r3
   119c4:	lsr	r3, r3, #5
   119c8:	str	r3, [sp, #36]	; 0x24
   119cc:	bne	11bf4 <__assert_fail@plt+0x69c>
   119d0:	add	r0, r5, #1
   119d4:	mov	r1, r4
   119d8:	str	r0, [sp, #40]	; 0x28
   119dc:	bl	114d4 <strrchr@plt>
   119e0:	subs	r7, r0, #0
   119e4:	beq	123ac <__assert_fail@plt+0xe54>
   119e8:	ldr	r3, [sl, #216]	; 0xd8
   119ec:	ldr	r2, [sl, #224]	; 0xe0
   119f0:	sub	r6, r7, r5
   119f4:	cmp	r3, r2
   119f8:	sub	r6, r6, #1
   119fc:	beq	11cf8 <__assert_fail@plt+0x7a0>
   11a00:	ldr	ip, [sl, #212]	; 0xd4
   11a04:	lsl	r2, r3, #6
   11a08:	add	r4, ip, r2
   11a0c:	mov	r1, #0
   11a10:	mov	r0, #0
   11a14:	mov	r9, #0
   11a18:	strd	r0, [r4, #16]
   11a1c:	strd	r0, [r4, #8]
   11a20:	strb	r9, [r4, #28]
   11a24:	strd	r0, [ip, r2]
   11a28:	ldrb	r2, [sp, #36]	; 0x24
   11a2c:	add	r3, r3, #1
   11a30:	str	r8, [r4, #24]
   11a34:	strb	r2, [r4, #29]
   11a38:	mov	r2, #1
   11a3c:	strb	r2, [r4, #30]
   11a40:	str	r9, [r4, #32]
   11a44:	str	r9, [r4, #36]	; 0x24
   11a48:	mov	r0, #256	; 0x100
   11a4c:	str	r3, [sl, #216]	; 0xd8
   11a50:	bl	293c8 <__assert_fail@plt+0x17e70>
   11a54:	ldr	ip, [pc, #2812]	; 12558 <__assert_fail@plt+0x1000>
   11a58:	ldr	r3, [pc, #2812]	; 1255c <__assert_fail@plt+0x1004>
   11a5c:	mov	r1, r6
   11a60:	str	r9, [r4, #52]	; 0x34
   11a64:	add	r2, r4, #32
   11a68:	str	r3, [ip]
   11a6c:	str	r0, [r4, #48]	; 0x30
   11a70:	ldr	r0, [sp, #40]	; 0x28
   11a74:	bl	27dd4 <__assert_fail@plt+0x1687c>
   11a78:	subs	r6, r0, #0
   11a7c:	bne	123d0 <__assert_fail@plt+0xe78>
   11a80:	ldrb	r3, [r7, #1]
   11a84:	cmp	r3, #0
   11a88:	bne	11ca4 <__assert_fail@plt+0x74c>
   11a8c:	ldr	r2, [sp, #24]
   11a90:	add	r3, r8, #1
   11a94:	cmp	r2, r3
   11a98:	ble	11b3c <__assert_fail@plt+0x5e4>
   11a9c:	ldr	r2, [sp, #32]
   11aa0:	add	r5, r2, #4
   11aa4:	ldr	r6, [fp, r5]
   11aa8:	ldrb	r2, [r6]
   11aac:	cmp	r2, #123	; 0x7b
   11ab0:	beq	11abc <__assert_fail@plt+0x564>
   11ab4:	mov	r8, r3
   11ab8:	b	119a0 <__assert_fail@plt+0x448>
   11abc:	mov	r0, r6
   11ac0:	bl	11414 <strlen@plt>
   11ac4:	sub	r7, r0, #1
   11ac8:	add	r3, r6, r7
   11acc:	ldrb	r2, [r6, r7]
   11ad0:	cmp	r2, #125	; 0x7d
   11ad4:	bne	124cc <__assert_fail@plt+0xf74>
   11ad8:	sub	r3, r3, #1
   11adc:	add	r0, r6, #1
   11ae0:	cmp	r0, r3
   11ae4:	mov	r3, #0
   11ae8:	strb	r3, [r6, r7]
   11aec:	beq	11eec <__assert_fail@plt+0x994>
   11af0:	ldr	r3, [pc, #2564]	; 124fc <__assert_fail@plt+0xfa4>
   11af4:	mov	r2, #10
   11af8:	str	r3, [sp]
   11afc:	mov	r1, #0
   11b00:	add	r3, sp, #56	; 0x38
   11b04:	bl	2a838 <__assert_fail@plt+0x192e0>
   11b08:	cmp	r0, #0
   11b0c:	bne	1238c <__assert_fail@plt+0xe34>
   11b10:	ldrd	r2, [sp, #56]	; 0x38
   11b14:	cmp	r2, #0
   11b18:	sbcs	r1, r3, #0
   11b1c:	blt	1238c <__assert_fail@plt+0xe34>
   11b20:	strd	r2, [r4, #16]
   11b24:	ldr	r2, [sp, #24]
   11b28:	add	r3, r8, #2
   11b2c:	cmp	r2, r3
   11b30:	mov	r2, #125	; 0x7d
   11b34:	strb	r2, [r6, r7]
   11b38:	bgt	11ab4 <__assert_fail@plt+0x55c>
   11b3c:	ldr	r0, [pc, #2500]	; 12508 <__assert_fail@plt+0xfb0>
   11b40:	bl	114c8 <sigemptyset@plt>
   11b44:	mov	r4, #0
   11b48:	ldr	r5, [pc, #2576]	; 12560 <__assert_fail@plt+0x1008>
   11b4c:	ldr	r7, [pc, #2484]	; 12508 <__assert_fail@plt+0xfb0>
   11b50:	mov	r6, r4
   11b54:	ldr	r8, [r5, r4, lsl #2]
   11b58:	add	r2, sp, #56	; 0x38
   11b5c:	mov	r0, r8
   11b60:	mov	r1, r6
   11b64:	bl	11330 <sigaction@plt>
   11b68:	ldr	r3, [sp, #56]	; 0x38
   11b6c:	cmp	r3, #1
   11b70:	beq	11b80 <__assert_fail@plt+0x628>
   11b74:	mov	r1, r8
   11b78:	mov	r0, r7
   11b7c:	bl	113a8 <sigaddset@plt>
   11b80:	add	r4, r4, #1
   11b84:	cmp	r4, #11
   11b88:	bne	11b54 <__assert_fail@plt+0x5fc>
   11b8c:	ldr	r3, [pc, #2512]	; 12564 <__assert_fail@plt+0x100c>
   11b90:	mov	r2, #128	; 0x80
   11b94:	ldr	r1, [pc, #2412]	; 12508 <__assert_fail@plt+0xfb0>
   11b98:	add	r0, sp, #60	; 0x3c
   11b9c:	str	r3, [sp, #56]	; 0x38
   11ba0:	bl	11264 <memcpy@plt>
   11ba4:	mov	r3, #0
   11ba8:	mov	r4, r3
   11bac:	ldr	r7, [pc, #2388]	; 12508 <__assert_fail@plt+0xfb0>
   11bb0:	mov	r8, r3
   11bb4:	str	r3, [sp, #188]	; 0xbc
   11bb8:	b	11bc8 <__assert_fail@plt+0x670>
   11bbc:	add	r4, r4, #1
   11bc0:	cmp	r4, #11
   11bc4:	beq	11d8c <__assert_fail@plt+0x834>
   11bc8:	ldr	r6, [r5, r4, lsl #2]
   11bcc:	mov	r0, r7
   11bd0:	mov	r1, r6
   11bd4:	bl	11300 <sigismember@plt>
   11bd8:	cmp	r0, #0
   11bdc:	beq	11bbc <__assert_fail@plt+0x664>
   11be0:	mov	r0, r6
   11be4:	mov	r2, r8
   11be8:	add	r1, sp, #56	; 0x38
   11bec:	bl	11330 <sigaction@plt>
   11bf0:	b	11bbc <__assert_fail@plt+0x664>
   11bf4:	ldr	ip, [sl, #216]	; 0xd8
   11bf8:	ldr	r3, [sl, #224]	; 0xe0
   11bfc:	cmp	ip, r3
   11c00:	beq	11d20 <__assert_fail@plt+0x7c8>
   11c04:	ldr	r6, [sl, #212]	; 0xd4
   11c08:	lsl	lr, ip, #6
   11c0c:	add	r4, r6, lr
   11c10:	mov	r2, #0
   11c14:	mov	r3, #0
   11c18:	mov	r1, #0
   11c1c:	strd	r2, [r4, #16]
   11c20:	strd	r2, [r4, #8]
   11c24:	strb	r1, [r4, #30]
   11c28:	strb	r1, [r4, #28]
   11c2c:	strd	r2, [r6, lr]
   11c30:	ldr	lr, [pc, #2244]	; 124fc <__assert_fail@plt+0xfa4>
   11c34:	mov	r0, r5
   11c38:	add	ip, ip, #1
   11c3c:	str	r8, [r4, #24]
   11c40:	add	r3, sp, #48	; 0x30
   11c44:	mov	r2, #10
   11c48:	str	lr, [sp]
   11c4c:	str	ip, [sl, #216]	; 0xd8
   11c50:	bl	2a838 <__assert_fail@plt+0x192e0>
   11c54:	subs	r5, r0, #0
   11c58:	bne	12324 <__assert_fail@plt+0xdcc>
   11c5c:	ldrd	r6, [sp, #48]	; 0x30
   11c60:	cmp	r6, #0
   11c64:	sbcs	r3, r7, #0
   11c68:	blt	12324 <__assert_fail@plt+0xdcc>
   11c6c:	orrs	r3, r6, r7
   11c70:	beq	1244c <__assert_fail@plt+0xef4>
   11c74:	ldrd	r2, [sl, #232]	; 0xe8
   11c78:	cmp	r7, r3
   11c7c:	cmpeq	r6, r2
   11c80:	bcc	12408 <__assert_fail@plt+0xeb0>
   11c84:	movne	r2, r6
   11c88:	movne	r3, r7
   11c8c:	beq	11d50 <__assert_fail@plt+0x7f8>
   11c90:	str	r2, [sl, #232]	; 0xe8
   11c94:	str	r3, [sl, #236]	; 0xec
   11c98:	str	r2, [r4, #8]
   11c9c:	str	r3, [r4, #12]
   11ca0:	b	11a8c <__assert_fail@plt+0x534>
   11ca4:	ldr	r3, [pc, #2128]	; 124fc <__assert_fail@plt+0xfa4>
   11ca8:	add	r0, r7, #1
   11cac:	str	r3, [sp]
   11cb0:	mov	r2, #10
   11cb4:	mov	r3, r4
   11cb8:	mov	r1, r6
   11cbc:	bl	29ca0 <__assert_fail@plt+0x18748>
   11cc0:	cmp	r0, #0
   11cc4:	beq	11a8c <__assert_fail@plt+0x534>
   11cc8:	mov	r2, #5
   11ccc:	ldr	r1, [pc, #2196]	; 12568 <__assert_fail@plt+0x1010>
   11cd0:	mov	r0, r6
   11cd4:	bl	112d0 <dcgettext@plt>
   11cd8:	mov	r4, r0
   11cdc:	mov	r0, r5
   11ce0:	bl	17c98 <__assert_fail@plt+0x6740>
   11ce4:	mov	r2, r4
   11ce8:	mov	r1, r6
   11cec:	mov	r3, r0
   11cf0:	mov	r0, #1
   11cf4:	bl	11384 <error@plt>
   11cf8:	mov	r3, #64	; 0x40
   11cfc:	str	r3, [sp]
   11d00:	mov	r2, #1
   11d04:	mvn	r3, #0
   11d08:	ldr	r1, [pc, #2140]	; 1256c <__assert_fail@plt+0x1014>
   11d0c:	ldr	r0, [sl, #212]	; 0xd4
   11d10:	bl	2960c <__assert_fail@plt+0x180b4>
   11d14:	ldr	r3, [sl, #216]	; 0xd8
   11d18:	str	r0, [sl, #212]	; 0xd4
   11d1c:	b	11a00 <__assert_fail@plt+0x4a8>
   11d20:	mov	r3, #64	; 0x40
   11d24:	str	r3, [sp]
   11d28:	mov	r2, #1
   11d2c:	mvn	r3, #0
   11d30:	ldr	r1, [pc, #2100]	; 1256c <__assert_fail@plt+0x1014>
   11d34:	ldr	r0, [sl, #212]	; 0xd4
   11d38:	bl	2960c <__assert_fail@plt+0x180b4>
   11d3c:	ldr	r3, [sp, #32]
   11d40:	ldr	ip, [sl, #216]	; 0xd8
   11d44:	ldr	r5, [fp, r3]
   11d48:	str	r0, [sl, #212]	; 0xd4
   11d4c:	b	11c04 <__assert_fail@plt+0x6ac>
   11d50:	mov	r2, #5
   11d54:	ldr	r1, [pc, #2068]	; 12570 <__assert_fail@plt+0x1018>
   11d58:	bl	112d0 <dcgettext@plt>
   11d5c:	ldr	r3, [sp, #32]
   11d60:	mov	r6, r0
   11d64:	ldr	r0, [fp, r3]
   11d68:	bl	17c98 <__assert_fail@plt+0x6740>
   11d6c:	mov	r2, r6
   11d70:	mov	r1, r5
   11d74:	mov	r3, r0
   11d78:	mov	r0, r5
   11d7c:	bl	11384 <error@plt>
   11d80:	ldr	r2, [sp, #48]	; 0x30
   11d84:	ldr	r3, [sp, #52]	; 0x34
   11d88:	b	11c90 <__assert_fail@plt+0x738>
   11d8c:	mov	r3, #0
   11d90:	str	r3, [sp, #36]	; 0x24
   11d94:	ldr	r3, [sl, #216]	; 0xd8
   11d98:	ldr	r2, [sp, #36]	; 0x24
   11d9c:	cmp	r2, r3
   11da0:	bge	122e4 <__assert_fail@plt+0xd8c>
   11da4:	ldr	r2, [sp, #36]	; 0x24
   11da8:	ldr	r3, [sl, #212]	; 0xd4
   11dac:	lsl	r2, r2, #6
   11db0:	add	r3, r3, r2
   11db4:	str	r2, [sp, #32]
   11db8:	ldrb	r3, [r3, #30]
   11dbc:	cmp	r3, #0
   11dc0:	bne	11f04 <__assert_fail@plt+0x9ac>
   11dc4:	str	r3, [sp, #24]
   11dc8:	str	r3, [sp, #28]
   11dcc:	ldr	r3, [sp, #32]
   11dd0:	ldr	fp, [sl, #212]	; 0xd4
   11dd4:	add	fp, fp, r3
   11dd8:	ldrb	r3, [fp, #28]
   11ddc:	cmp	r3, #0
   11de0:	bne	11df8 <__assert_fail@plt+0x8a0>
   11de4:	ldrd	r2, [fp, #16]
   11de8:	ldrd	r0, [sp, #24]
   11dec:	cmp	r2, r0
   11df0:	sbcs	r3, r3, r1
   11df4:	blt	12078 <__assert_fail@plt+0xb20>
   11df8:	ldrd	r8, [sp, #24]
   11dfc:	ldr	r2, [fp, #12]
   11e00:	ldr	r3, [fp, #8]
   11e04:	adds	r8, r8, #1
   11e08:	adc	r9, r9, #0
   11e0c:	mul	r2, r8, r2
   11e10:	umull	r6, r7, r3, r8
   11e14:	mla	r3, r3, r9, r2
   11e18:	add	r7, r3, r7
   11e1c:	bl	12b54 <__assert_fail@plt+0x15fc>
   11e20:	ldrd	r0, [sl, #200]	; 0xc8
   11e24:	adds	r0, r0, #1
   11e28:	adc	r1, r1, #0
   11e2c:	bl	13220 <__assert_fail@plt+0x1cc8>
   11e30:	cmp	r0, #0
   11e34:	beq	11eac <__assert_fail@plt+0x954>
   11e38:	ldr	r3, [sl, #192]	; 0xc0
   11e3c:	cmp	r3, #0
   11e40:	beq	11ecc <__assert_fail@plt+0x974>
   11e44:	ldr	r3, [sl, #192]	; 0xc0
   11e48:	ldrd	r4, [r3, #16]
   11e4c:	cmp	r4, r6
   11e50:	sbcs	r3, r5, r7
   11e54:	bge	11e7c <__assert_fail@plt+0x924>
   11e58:	bl	1331c <__assert_fail@plt+0x1dc4>
   11e5c:	cmp	r0, #0
   11e60:	beq	11eb8 <__assert_fail@plt+0x960>
   11e64:	adds	r4, r4, #1
   11e68:	adc	r5, r5, #0
   11e6c:	bl	12ac4 <__assert_fail@plt+0x156c>
   11e70:	cmp	r5, r7
   11e74:	cmpeq	r4, r6
   11e78:	bne	11e58 <__assert_fail@plt+0x900>
   11e7c:	bl	1286c <__assert_fail@plt+0x1314>
   11e80:	ldrb	r3, [sl, #220]	; 0xdc
   11e84:	cmp	r3, #0
   11e88:	bne	11ec4 <__assert_fail@plt+0x96c>
   11e8c:	ldrd	r0, [sl, #200]	; 0xc8
   11e90:	adds	r0, r0, #1
   11e94:	adc	r1, r1, #0
   11e98:	bl	13220 <__assert_fail@plt+0x1cc8>
   11e9c:	cmp	r0, #0
   11ea0:	beq	11edc <__assert_fail@plt+0x984>
   11ea4:	strd	r8, [sp, #24]
   11ea8:	b	11dcc <__assert_fail@plt+0x874>
   11eac:	ldrb	r3, [sl, #220]	; 0xdc
   11eb0:	cmp	r3, #0
   11eb4:	beq	11e38 <__assert_fail@plt+0x8e0>
   11eb8:	ldrd	r2, [sp, #24]
   11ebc:	add	r0, fp, #8
   11ec0:	bl	129fc <__assert_fail@plt+0x14a4>
   11ec4:	bl	1331c <__assert_fail@plt+0x1dc4>
   11ec8:	b	11e8c <__assert_fail@plt+0x934>
   11ecc:	ldrb	r3, [sl, #188]	; 0xbc
   11ed0:	cmp	r3, #0
   11ed4:	beq	12180 <__assert_fail@plt+0xc28>
   11ed8:	bl	11568 <__assert_fail@plt+0x10>
   11edc:	ldrb	r3, [sl, #220]	; 0xdc
   11ee0:	cmp	r3, #0
   11ee4:	bne	11ea4 <__assert_fail@plt+0x94c>
   11ee8:	b	11eb8 <__assert_fail@plt+0x960>
   11eec:	ldrb	r3, [r6, #1]
   11ef0:	cmp	r3, #42	; 0x2a
   11ef4:	moveq	r3, #1
   11ef8:	strbeq	r3, [r4, #28]
   11efc:	bne	11af0 <__assert_fail@plt+0x598>
   11f00:	b	11b24 <__assert_fail@plt+0x5cc>
   11f04:	mov	r2, #0
   11f08:	mov	r3, #0
   11f0c:	strd	r2, [sp, #24]
   11f10:	ldr	r3, [sp, #32]
   11f14:	ldr	r7, [sl, #212]	; 0xd4
   11f18:	add	r5, r7, r3
   11f1c:	ldrb	r3, [r5, #28]
   11f20:	cmp	r3, #0
   11f24:	bne	11f3c <__assert_fail@plt+0x9e4>
   11f28:	ldrd	r2, [r5, #16]
   11f2c:	ldrd	r0, [sp, #24]
   11f30:	cmp	r2, r0
   11f34:	sbcs	r3, r3, r1
   11f38:	blt	12078 <__assert_fail@plt+0xb20>
   11f3c:	ldrb	r6, [r5, #29]
   11f40:	cmp	r6, #0
   11f44:	beq	121ec <__assert_fail@plt+0xc94>
   11f48:	ldr	r3, [sp, #32]
   11f4c:	ldrd	r2, [r3, r7]
   11f50:	cmp	r2, #0
   11f54:	sbcs	r3, r3, #0
   11f58:	blt	1224c <__assert_fail@plt+0xcf4>
   11f5c:	cmp	r6, #0
   11f60:	add	r4, r5, #32
   11f64:	bne	11fa8 <__assert_fail@plt+0xa50>
   11f68:	b	12028 <__assert_fail@plt+0xad0>
   11f6c:	ldr	r2, [r0]
   11f70:	ldr	r1, [r0, #4]
   11f74:	mov	r0, r4
   11f78:	add	r3, r1, r2
   11f7c:	ldrb	r3, [r3, #-1]
   11f80:	cmp	r3, #10
   11f84:	subeq	r2, r2, #1
   11f88:	mov	r3, #0
   11f8c:	stm	sp, {r2, r3}
   11f90:	bl	286bc <__assert_fail@plt+0x17164>
   11f94:	cmn	r0, #2
   11f98:	beq	124a8 <__assert_fail@plt+0xf50>
   11f9c:	cmn	r0, #1
   11fa0:	bne	120ac <__assert_fail@plt+0xb54>
   11fa4:	bl	1331c <__assert_fail@plt+0x1dc4>
   11fa8:	ldrd	r2, [sl, #200]	; 0xc8
   11fac:	adds	r2, r2, #1
   11fb0:	adc	r3, r3, #0
   11fb4:	mov	r0, r2
   11fb8:	mov	r1, r3
   11fbc:	strd	r2, [sl, #200]	; 0xc8
   11fc0:	bl	13220 <__assert_fail@plt+0x1cc8>
   11fc4:	cmp	r0, #0
   11fc8:	bne	11f6c <__assert_fail@plt+0xa14>
   11fcc:	ldrb	r3, [r5, #28]
   11fd0:	cmp	r3, #0
   11fd4:	bne	12070 <__assert_fail@plt+0xb18>
   11fd8:	str	r6, [sp]
   11fdc:	ldrd	r2, [sp, #24]
   11fe0:	add	r0, r5, #24
   11fe4:	bl	134ac <__assert_fail@plt+0x1f54>
   11fe8:	ldr	r2, [r0]
   11fec:	ldr	r1, [r0, #4]
   11ff0:	mov	r0, r4
   11ff4:	add	r3, r1, r2
   11ff8:	ldrb	r3, [r3, #-1]
   11ffc:	cmp	r3, #10
   12000:	subeq	r2, r2, #1
   12004:	mov	r3, #0
   12008:	stm	sp, {r2, r3}
   1200c:	bl	286bc <__assert_fail@plt+0x17164>
   12010:	cmn	r0, #2
   12014:	beq	124a8 <__assert_fail@plt+0xf50>
   12018:	cmn	r0, #1
   1201c:	bne	120ac <__assert_fail@plt+0xb54>
   12020:	bl	1331c <__assert_fail@plt+0x1dc4>
   12024:	bl	12ac4 <__assert_fail@plt+0x156c>
   12028:	ldrd	r2, [sl, #200]	; 0xc8
   1202c:	adds	r2, r2, #1
   12030:	adc	r3, r3, #0
   12034:	mov	r0, r2
   12038:	mov	r1, r3
   1203c:	strd	r2, [sl, #200]	; 0xc8
   12040:	bl	13220 <__assert_fail@plt+0x1cc8>
   12044:	cmp	r0, #0
   12048:	bne	11fe8 <__assert_fail@plt+0xa90>
   1204c:	ldrb	r6, [r5, #28]
   12050:	cmp	r6, #0
   12054:	bne	12060 <__assert_fail@plt+0xb08>
   12058:	b	11fd8 <__assert_fail@plt+0xa80>
   1205c:	bl	12ac4 <__assert_fail@plt+0x156c>
   12060:	bl	1331c <__assert_fail@plt+0x1dc4>
   12064:	cmp	r0, #0
   12068:	bne	1205c <__assert_fail@plt+0xb04>
   1206c:	bl	1286c <__assert_fail@plt+0x1314>
   12070:	mov	r0, #0
   12074:	bl	11408 <exit@plt>
   12078:	ldr	r3, [sp, #36]	; 0x24
   1207c:	add	r3, r3, #1
   12080:	str	r3, [sp, #36]	; 0x24
   12084:	b	11d94 <__assert_fail@plt+0x83c>
   12088:	mov	r0, #11
   1208c:	cmp	r6, #0
   12090:	blt	1195c <__assert_fail@plt+0x404>
   12094:	mvn	r3, #-2147483647	; 0x80000001
   12098:	sub	r3, r3, r0
   1209c:	cmp	r6, r3
   120a0:	movle	r3, #0
   120a4:	movgt	r3, #1
   120a8:	b	11950 <__assert_fail@plt+0x3f8>
   120ac:	ldr	r3, [sp, #32]
   120b0:	ldrd	r0, [sl, #200]	; 0xc8
   120b4:	ldr	ip, [sl, #192]	; 0xc0
   120b8:	ldrd	r2, [r3, r7]
   120bc:	ldr	fp, [r5, #24]
   120c0:	adds	r4, r2, r0
   120c4:	adc	r5, r3, r1
   120c8:	cmp	ip, #0
   120cc:	strd	r4, [sp, #40]	; 0x28
   120d0:	beq	12308 <__assert_fail@plt+0xdb0>
   120d4:	ldr	r3, [sl, #192]	; 0xc0
   120d8:	ldrd	r4, [r3, #16]
   120dc:	ldrd	r2, [sp, #40]	; 0x28
   120e0:	cmp	r2, r4
   120e4:	sbcs	r3, r3, r5
   120e8:	blt	124e8 <__assert_fail@plt+0xf90>
   120ec:	ldrd	r2, [sp, #40]	; 0x28
   120f0:	mov	r8, #0
   120f4:	mov	r9, #0
   120f8:	subs	r2, r2, r4
   120fc:	sbc	r3, r3, r5
   12100:	mov	r4, r2
   12104:	mov	r5, r3
   12108:	b	12114 <__assert_fail@plt+0xbbc>
   1210c:	adds	r8, r8, #1
   12110:	adc	r9, r9, #0
   12114:	cmp	r5, r9
   12118:	cmpeq	r4, r8
   1211c:	beq	1213c <__assert_fail@plt+0xbe4>
   12120:	bl	1331c <__assert_fail@plt+0x1dc4>
   12124:	subs	r1, r0, #0
   12128:	beq	12354 <__assert_fail@plt+0xdfc>
   1212c:	cmp	r6, #0
   12130:	bne	1210c <__assert_fail@plt+0xbb4>
   12134:	bl	12ac4 <__assert_fail@plt+0x156c>
   12138:	b	1210c <__assert_fail@plt+0xbb4>
   1213c:	cmp	r6, #0
   12140:	beq	122dc <__assert_fail@plt+0xd84>
   12144:	ldr	r3, [sp, #32]
   12148:	ldrd	r2, [r3, r7]
   1214c:	cmp	r2, #1
   12150:	sbcs	r3, r3, #0
   12154:	ldrdge	r2, [sp, #40]	; 0x28
   12158:	strdge	r2, [sl, #200]	; 0xc8
   1215c:	ldrb	r3, [sl, #220]	; 0xdc
   12160:	cmp	r3, #0
   12164:	beq	1216c <__assert_fail@plt+0xc14>
   12168:	bl	1331c <__assert_fail@plt+0x1dc4>
   1216c:	ldrd	r2, [sp, #24]
   12170:	adds	r2, r2, #1
   12174:	adc	r3, r3, #0
   12178:	strd	r2, [sp, #24]
   1217c:	b	11f10 <__assert_fail@plt+0x9b8>
   12180:	bl	12dac <__assert_fail@plt+0x1854>
   12184:	cmp	r0, #0
   12188:	bne	11e44 <__assert_fail@plt+0x8ec>
   1218c:	b	11ed8 <__assert_fail@plt+0x980>
   12190:	cmp	r4, #0
   12194:	moveq	r2, #5
   12198:	ldreq	r1, [pc, #980]	; 12574 <__assert_fail@plt+0x101c>
   1219c:	beq	1187c <__assert_fail@plt+0x324>
   121a0:	mvn	r3, #-2147483648	; 0x80000000
   121a4:	mov	r2, #1
   121a8:	stm	sp, {r0, r3}
   121ac:	mvn	r3, #0
   121b0:	mov	r0, r1
   121b4:	bl	1154c <__snprintf_chk@plt>
   121b8:	cmp	r0, #0
   121bc:	bge	1208c <__assert_fail@plt+0xb34>
   121c0:	b	11958 <__assert_fail@plt+0x400>
   121c4:	mov	r3, ip
   121c8:	bics	r4, r4, r3
   121cc:	bne	1246c <__assert_fail@plt+0xf14>
   121d0:	mov	r4, ip
   121d4:	b	117e0 <__assert_fail@plt+0x288>
   121d8:	mov	r3, r8
   121dc:	b	121c8 <__assert_fail@plt+0xc70>
   121e0:	strb	lr, [r2]
   121e4:	mov	r3, ip
   121e8:	b	121c8 <__assert_fail@plt+0xc70>
   121ec:	bl	12b54 <__assert_fail@plt+0x15fc>
   121f0:	b	11f48 <__assert_fail@plt+0x9f0>
   121f4:	mov	r3, #0
   121f8:	mov	r2, r3
   121fc:	mov	r0, r3
   12200:	mov	r1, r4
   12204:	bl	13aa8 <__assert_fail@plt+0x2550>
   12208:	cmp	r0, #0
   1220c:	bge	11990 <__assert_fail@plt+0x438>
   12210:	bl	1142c <__errno_location@plt>
   12214:	mov	r2, #5
   12218:	ldr	r1, [pc, #856]	; 12578 <__assert_fail@plt+0x1020>
   1221c:	ldr	r5, [r0]
   12220:	mov	r0, #0
   12224:	bl	112d0 <dcgettext@plt>
   12228:	mov	r1, r4
   1222c:	mov	r6, r0
   12230:	mov	r0, #4
   12234:	bl	16328 <__assert_fail@plt+0x4dd0>
   12238:	mov	r2, r6
   1223c:	mov	r1, r5
   12240:	mov	r3, r0
   12244:	mov	r0, #1
   12248:	bl	11384 <error@plt>
   1224c:	add	r4, r5, #32
   12250:	b	1228c <__assert_fail@plt+0xd34>
   12254:	ldr	r2, [r0]
   12258:	ldr	r1, [r0, #4]
   1225c:	mov	r0, r4
   12260:	add	r3, r1, r2
   12264:	ldrb	r3, [r3, #-1]
   12268:	cmp	r3, #10
   1226c:	subeq	r2, r2, #1
   12270:	mov	r3, #0
   12274:	stm	sp, {r2, r3}
   12278:	bl	286bc <__assert_fail@plt+0x17164>
   1227c:	cmn	r0, #2
   12280:	beq	124a8 <__assert_fail@plt+0xf50>
   12284:	cmn	r0, #1
   12288:	bne	120ac <__assert_fail@plt+0xb54>
   1228c:	ldrd	r2, [sl, #200]	; 0xc8
   12290:	adds	r2, r2, #1
   12294:	adc	r3, r3, #0
   12298:	mov	r0, r2
   1229c:	mov	r1, r3
   122a0:	strd	r2, [sl, #200]	; 0xc8
   122a4:	bl	13220 <__assert_fail@plt+0x1cc8>
   122a8:	cmp	r0, #0
   122ac:	bne	12254 <__assert_fail@plt+0xcfc>
   122b0:	ldrb	r3, [r5, #28]
   122b4:	cmp	r3, #0
   122b8:	beq	11fd8 <__assert_fail@plt+0xa80>
   122bc:	cmp	r6, #0
   122c0:	bne	12070 <__assert_fail@plt+0xb18>
   122c4:	b	122cc <__assert_fail@plt+0xd74>
   122c8:	bl	12ac4 <__assert_fail@plt+0x156c>
   122cc:	bl	1331c <__assert_fail@plt+0x1dc4>
   122d0:	cmp	r0, #0
   122d4:	bne	122c8 <__assert_fail@plt+0xd70>
   122d8:	b	1206c <__assert_fail@plt+0xb14>
   122dc:	bl	1286c <__assert_fail@plt+0x1314>
   122e0:	b	12144 <__assert_fail@plt+0xbec>
   122e4:	bl	12b54 <__assert_fail@plt+0x15fc>
   122e8:	bl	1340c <__assert_fail@plt+0x1eb4>
   122ec:	bl	1286c <__assert_fail@plt+0x1314>
   122f0:	mov	r0, #0
   122f4:	bl	11540 <close@plt>
   122f8:	cmp	r0, #0
   122fc:	bne	125b0 <__assert_fail@plt+0x1058>
   12300:	add	sp, sp, #204	; 0xcc
   12304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12308:	ldrb	r3, [sl, #188]	; 0xbc
   1230c:	cmp	r3, #0
   12310:	bne	11ed8 <__assert_fail@plt+0x980>
   12314:	bl	12dac <__assert_fail@plt+0x1854>
   12318:	cmp	r0, #0
   1231c:	bne	120d4 <__assert_fail@plt+0xb7c>
   12320:	b	11ed8 <__assert_fail@plt+0x980>
   12324:	mov	r2, #5
   12328:	ldr	r1, [pc, #588]	; 1257c <__assert_fail@plt+0x1024>
   1232c:	mov	r0, #0
   12330:	bl	112d0 <dcgettext@plt>
   12334:	mov	r4, r0
   12338:	ldr	r0, [r9]
   1233c:	bl	17c98 <__assert_fail@plt+0x6740>
   12340:	mov	r2, r4
   12344:	mov	r1, #0
   12348:	mov	r3, r0
   1234c:	mov	r0, #1
   12350:	bl	11384 <error@plt>
   12354:	ldr	r1, [pc, #548]	; 12580 <__assert_fail@plt+0x1028>
   12358:	mov	r7, fp
   1235c:	mov	r2, #5
   12360:	bl	112d0 <dcgettext@plt>
   12364:	ldr	r3, [sl, #208]	; 0xd0
   12368:	mov	r4, r0
   1236c:	ldr	r0, [r3, r7, lsl #2]
   12370:	bl	17c98 <__assert_fail@plt+0x6740>
   12374:	mov	r1, #0
   12378:	mov	r2, r4
   1237c:	mov	r3, r0
   12380:	mov	r0, r1
   12384:	bl	11384 <error@plt>
   12388:	bl	1273c <__assert_fail@plt+0x11e4>
   1238c:	mov	r2, #5
   12390:	ldr	r1, [pc, #492]	; 12584 <__assert_fail@plt+0x102c>
   12394:	mov	r0, #0
   12398:	bl	112d0 <dcgettext@plt>
   1239c:	ldr	r3, [sl, #208]	; 0xd0
   123a0:	mov	r4, r0
   123a4:	ldr	r0, [r3, r5]
   123a8:	b	1233c <__assert_fail@plt+0xde4>
   123ac:	mov	r2, #5
   123b0:	ldr	r1, [pc, #464]	; 12588 <__assert_fail@plt+0x1030>
   123b4:	bl	112d0 <dcgettext@plt>
   123b8:	str	r4, [sp]
   123bc:	mov	r3, r5
   123c0:	mov	r1, r7
   123c4:	mov	r2, r0
   123c8:	mov	r0, #1
   123cc:	bl	11384 <error@plt>
   123d0:	mov	r2, #5
   123d4:	ldr	r1, [pc, #432]	; 1258c <__assert_fail@plt+0x1034>
   123d8:	mov	r0, r9
   123dc:	bl	112d0 <dcgettext@plt>
   123e0:	mov	r4, r0
   123e4:	mov	r0, r5
   123e8:	bl	17c98 <__assert_fail@plt+0x6740>
   123ec:	mov	r2, r4
   123f0:	mov	r1, r9
   123f4:	str	r6, [sp]
   123f8:	mov	r3, r0
   123fc:	mov	r0, r9
   12400:	bl	11384 <error@plt>
   12404:	bl	1273c <__assert_fail@plt+0x11e4>
   12408:	mov	r2, #5
   1240c:	ldr	r1, [pc, #380]	; 12590 <__assert_fail@plt+0x1038>
   12410:	bl	112d0 <dcgettext@plt>
   12414:	mov	r6, r5
   12418:	mov	r4, r0
   1241c:	ldr	r0, [r9]
   12420:	bl	17c98 <__assert_fail@plt+0x6740>
   12424:	add	r2, sp, #56	; 0x38
   12428:	mov	r5, r0
   1242c:	ldrd	r0, [sl, #232]	; 0xe8
   12430:	bl	13cfc <__assert_fail@plt+0x27a4>
   12434:	mov	r3, r5
   12438:	mov	r2, r4
   1243c:	mov	r1, r6
   12440:	str	r0, [sp]
   12444:	mov	r0, #1
   12448:	bl	11384 <error@plt>
   1244c:	mov	r2, #5
   12450:	ldr	r1, [pc, #316]	; 12594 <__assert_fail@plt+0x103c>
   12454:	bl	112d0 <dcgettext@plt>
   12458:	ldr	r3, [r9]
   1245c:	mov	r1, r5
   12460:	mov	r2, r0
   12464:	mov	r0, #1
   12468:	bl	11384 <error@plt>
   1246c:	mov	r2, #5
   12470:	ldr	r1, [pc, #288]	; 12598 <__assert_fail@plt+0x1040>
   12474:	mov	r0, #0
   12478:	bl	112d0 <dcgettext@plt>
   1247c:	tst	r4, #2
   12480:	str	r7, [sp]
   12484:	moveq	r3, #39	; 0x27
   12488:	movne	r3, #35	; 0x23
   1248c:	mov	r1, #0
   12490:	mov	r2, r0
   12494:	mov	r0, #1
   12498:	bl	11384 <error@plt>
   1249c:	mov	r2, #5
   124a0:	ldr	r1, [pc, #244]	; 1259c <__assert_fail@plt+0x1044>
   124a4:	b	1187c <__assert_fail@plt+0x324>
   124a8:	mov	r2, #5
   124ac:	ldr	r1, [pc, #236]	; 125a0 <__assert_fail@plt+0x1048>
   124b0:	mov	r0, #0
   124b4:	bl	112d0 <dcgettext@plt>
   124b8:	mov	r1, #0
   124bc:	mov	r2, r0
   124c0:	mov	r0, r1
   124c4:	bl	11384 <error@plt>
   124c8:	bl	1273c <__assert_fail@plt+0x11e4>
   124cc:	mov	r2, #5
   124d0:	ldr	r1, [pc, #204]	; 125a4 <__assert_fail@plt+0x104c>
   124d4:	mov	r0, #0
   124d8:	bl	112d0 <dcgettext@plt>
   124dc:	mov	r4, r0
   124e0:	mov	r0, r6
   124e4:	b	1233c <__assert_fail@plt+0xde4>
   124e8:	mov	r7, fp
   124ec:	mov	r2, #5
   124f0:	ldr	r1, [pc, #136]	; 12580 <__assert_fail@plt+0x1028>
   124f4:	mov	r0, #0
   124f8:	b	12360 <__assert_fail@plt+0xe08>
   124fc:			; <UNDEFINED> instruction: 0x0002c7b0
   12500:	muleq	r2, r0, sl
   12504:	andeq	ip, r2, r8, ror #19
   12508:	andeq	lr, r3, r8, asr #3
   1250c:	ldrdeq	ip, [r2], -r8
   12510:	andeq	r3, r1, r4, lsr #18
   12514:	ldrdeq	ip, [r2], -r8
   12518:	andeq	lr, r3, r0, asr #3
   1251c:	andeq	lr, r3, ip, asr r1
   12520:	andeq	ip, r2, r8, lsr #21
   12524:	andeq	ip, r2, ip, lsr #21
   12528:	andeq	ip, r2, r4, ror #21
   1252c:	andeq	lr, r3, r0, ror #2
   12530:			; <UNDEFINED> instruction: 0x0003e1bc
   12534:			; <UNDEFINED> instruction: 0x0002cabc
   12538:	andeq	ip, r2, ip, asr #21
   1253c:	andeq	ip, r2, ip, ror #8
   12540:	andeq	ip, r2, r4, ror #19
   12544:			; <UNDEFINED> instruction: 0x0003e1b0
   12548:	andeq	ip, r2, r0, asr #22
   1254c:	muleq	r2, r4, fp
   12550:	andeq	ip, r2, r8, ror #22
   12554:	andeq	ip, r2, r8, lsr #24
   12558:	strdeq	lr, [r3], -r4
   1255c:	andeq	r0, r0, r6, asr #5
   12560:	andeq	ip, r2, r8, lsl #7
   12564:	andeq	r2, r1, r4, lsl #25
   12568:	muleq	r2, r0, ip
   1256c:	andeq	lr, r3, r8, lsr #5
   12570:	andeq	ip, r2, r4, lsr sp
   12574:	strdeq	ip, [r2], -r8
   12578:	andeq	ip, r2, ip, lsr #24
   1257c:			; <UNDEFINED> instruction: 0x0002ccb8
   12580:	andeq	ip, r2, r8, ror #7
   12584:	muleq	r2, r8, sp
   12588:	andeq	ip, r2, r8, asr #24
   1258c:	andeq	ip, r2, ip, ror #24
   12590:	strdeq	ip, [r2], -r8
   12594:	andeq	ip, r2, ip, asr #25
   12598:	andeq	ip, r2, r4, asr #23
   1259c:	andeq	ip, r2, r0, lsl fp
   125a0:	andeq	ip, r2, r4, asr #27
   125a4:	andeq	ip, r2, r4, ror sp
   125a8:	andeq	ip, r2, r4, lsr r4
   125ac:	strdeq	ip, [r2], -r4
   125b0:	bl	1142c <__errno_location@plt>
   125b4:	mov	r2, #5
   125b8:	ldr	r1, [pc, #-24]	; 125a8 <__assert_fail@plt+0x1050>
   125bc:	ldr	r4, [r0]
   125c0:	mov	r0, #0
   125c4:	bl	112d0 <dcgettext@plt>
   125c8:	mov	r1, r4
   125cc:	mov	r2, r0
   125d0:	mov	r0, #0
   125d4:	bl	11384 <error@plt>
   125d8:	bl	1273c <__assert_fail@plt+0x11e4>
   125dc:	ldr	r1, [pc, #-56]	; 125ac <__assert_fail@plt+0x1054>
   125e0:	mov	r0, r4
   125e4:	bl	112d0 <dcgettext@plt>
   125e8:	ldr	r3, [sp, #24]
   125ec:	sub	r3, r3, #-1073741823	; 0xc0000001
   125f0:	mov	r5, r0
   125f4:	ldr	r0, [fp, r3, lsl #2]
   125f8:	bl	17c98 <__assert_fail@plt+0x6740>
   125fc:	mov	r2, r5
   12600:	mov	r1, r4
   12604:	mov	r3, r0
   12608:	mov	r0, r4
   1260c:	bl	11384 <error@plt>
   12610:	b	11740 <__assert_fail@plt+0x1e8>
   12614:	mov	fp, #0
   12618:	mov	lr, #0
   1261c:	pop	{r1}		; (ldr r1, [sp], #4)
   12620:	mov	r2, sp
   12624:	push	{r2}		; (str r2, [sp, #-4]!)
   12628:	push	{r0}		; (str r0, [sp, #-4]!)
   1262c:	ldr	ip, [pc, #16]	; 12644 <__assert_fail@plt+0x10ec>
   12630:	push	{ip}		; (str ip, [sp, #-4]!)
   12634:	ldr	r0, [pc, #12]	; 12648 <__assert_fail@plt+0x10f0>
   12638:	ldr	r3, [pc, #12]	; 1264c <__assert_fail@plt+0x10f4>
   1263c:	bl	113b4 <__libc_start_main@plt>
   12640:	bl	11534 <abort@plt>
   12644:	andeq	ip, r2, ip, ror #4
   12648:	muleq	r1, r8, r5
   1264c:	andeq	ip, r2, ip, lsl #4
   12650:	ldr	r3, [pc, #20]	; 1266c <__assert_fail@plt+0x1114>
   12654:	ldr	r2, [pc, #20]	; 12670 <__assert_fail@plt+0x1118>
   12658:	add	r3, pc, r3
   1265c:	ldr	r2, [r3, r2]
   12660:	cmp	r2, #0
   12664:	bxeq	lr
   12668:	b	113e4 <__gmon_start__@plt>
   1266c:	andeq	fp, r2, r0, lsr #19
   12670:	andeq	r0, r0, r0, asr r1
   12674:	ldr	r3, [pc, #28]	; 12698 <__assert_fail@plt+0x1140>
   12678:	ldr	r0, [pc, #28]	; 1269c <__assert_fail@plt+0x1144>
   1267c:	sub	r3, r3, r0
   12680:	cmp	r3, #6
   12684:	bxls	lr
   12688:	ldr	r3, [pc, #16]	; 126a0 <__assert_fail@plt+0x1148>
   1268c:	cmp	r3, #0
   12690:	bxeq	lr
   12694:	bx	r3
   12698:	andeq	lr, r3, fp, lsr #3
   1269c:	andeq	lr, r3, r8, lsr #3
   126a0:	andeq	r0, r0, r0
   126a4:	ldr	r1, [pc, #36]	; 126d0 <__assert_fail@plt+0x1178>
   126a8:	ldr	r0, [pc, #36]	; 126d4 <__assert_fail@plt+0x117c>
   126ac:	sub	r1, r1, r0
   126b0:	asr	r1, r1, #2
   126b4:	add	r1, r1, r1, lsr #31
   126b8:	asrs	r1, r1, #1
   126bc:	bxeq	lr
   126c0:	ldr	r3, [pc, #16]	; 126d8 <__assert_fail@plt+0x1180>
   126c4:	cmp	r3, #0
   126c8:	bxeq	lr
   126cc:	bx	r3
   126d0:	andeq	lr, r3, r8, lsr #3
   126d4:	andeq	lr, r3, r8, lsr #3
   126d8:	andeq	r0, r0, r0
   126dc:	push	{r4, lr}
   126e0:	ldr	r4, [pc, #24]	; 12700 <__assert_fail@plt+0x11a8>
   126e4:	ldrb	r3, [r4]
   126e8:	cmp	r3, #0
   126ec:	popne	{r4, pc}
   126f0:	bl	12674 <__assert_fail@plt+0x111c>
   126f4:	mov	r3, #1
   126f8:	strb	r3, [r4]
   126fc:	pop	{r4, pc}
   12700:	andeq	lr, r3, r4, asr #3
   12704:	ldr	r0, [pc, #40]	; 12734 <__assert_fail@plt+0x11dc>
   12708:	ldr	r3, [r0]
   1270c:	cmp	r3, #0
   12710:	bne	12718 <__assert_fail@plt+0x11c0>
   12714:	b	126a4 <__assert_fail@plt+0x114c>
   12718:	ldr	r3, [pc, #24]	; 12738 <__assert_fail@plt+0x11e0>
   1271c:	cmp	r3, #0
   12720:	beq	12714 <__assert_fail@plt+0x11bc>
   12724:	push	{r4, lr}
   12728:	blx	r3
   1272c:	pop	{r4, lr}
   12730:	b	126a4 <__assert_fail@plt+0x114c>
   12734:	andeq	sp, r3, r4, lsl pc
   12738:	andeq	r0, r0, r0
   1273c:	ldr	r4, [pc, #280]	; 1285c <__assert_fail@plt+0x1304>
   12740:	push	{r7, fp, lr}
   12744:	sub	sp, sp, #140	; 0x8c
   12748:	bl	1286c <__assert_fail@plt+0x1314>
   1274c:	mov	r1, r4
   12750:	add	r2, sp, #8
   12754:	mov	r0, #0
   12758:	bl	11228 <sigprocmask@plt>
   1275c:	ldrb	r3, [r4, #128]	; 0x80
   12760:	cmp	r3, #0
   12764:	bne	12780 <__assert_fail@plt+0x1228>
   12768:	add	r1, sp, #8
   1276c:	mov	r2, #0
   12770:	mov	r0, #2
   12774:	bl	11228 <sigprocmask@plt>
   12778:	mov	r0, #1
   1277c:	bl	11408 <exit@plt>
   12780:	ldr	r5, [r4, #132]	; 0x84
   12784:	ldr	sl, [pc, #212]	; 12860 <__assert_fail@plt+0x1308>
   12788:	mvn	r9, #0
   1278c:	mov	r8, #1
   12790:	mov	fp, #3
   12794:	subs	r5, r5, #1
   12798:	bmi	12828 <__assert_fail@plt+0x12d0>
   1279c:	ldr	r0, [r4, #136]	; 0x88
   127a0:	ldr	r1, [r4, #140]	; 0x8c
   127a4:	bl	11360 <strcpy@plt>
   127a8:	ldr	r3, [r4, #144]	; 0x90
   127ac:	ldr	r6, [r4, #136]	; 0x88
   127b0:	cmp	r3, #0
   127b4:	ldr	r0, [r4, #140]	; 0x8c
   127b8:	beq	12834 <__assert_fail@plt+0x12dc>
   127bc:	bl	11414 <strlen@plt>
   127c0:	ldr	r3, [r4, #144]	; 0x90
   127c4:	str	r5, [sp]
   127c8:	mov	r2, r9
   127cc:	mov	r1, r8
   127d0:	add	r0, r6, r0
   127d4:	bl	11444 <__sprintf_chk@plt>
   127d8:	ldr	r6, [r4, #136]	; 0x88
   127dc:	mov	r0, r6
   127e0:	bl	112dc <unlink@plt>
   127e4:	cmp	r0, #0
   127e8:	beq	12794 <__assert_fail@plt+0x123c>
   127ec:	bl	1142c <__errno_location@plt>
   127f0:	ldr	r7, [r0]
   127f4:	cmp	r7, #2
   127f8:	beq	12794 <__assert_fail@plt+0x123c>
   127fc:	mov	r2, r6
   12800:	mov	r1, fp
   12804:	mov	r0, #0
   12808:	bl	16da4 <__assert_fail@plt+0x584c>
   1280c:	mov	r2, sl
   12810:	mov	r1, r7
   12814:	mov	r3, r0
   12818:	mov	r0, #0
   1281c:	bl	11384 <error@plt>
   12820:	subs	r5, r5, #1
   12824:	bpl	1279c <__assert_fail@plt+0x1244>
   12828:	mov	r3, #0
   1282c:	str	r3, [r4, #132]	; 0x84
   12830:	b	12768 <__assert_fail@plt+0x1210>
   12834:	bl	11414 <strlen@plt>
   12838:	ldr	r3, [pc, #36]	; 12864 <__assert_fail@plt+0x130c>
   1283c:	mov	r2, r9
   12840:	mov	r1, r8
   12844:	ldr	r3, [r3]
   12848:	stm	sp, {r3, r5}
   1284c:	ldr	r3, [pc, #20]	; 12868 <__assert_fail@plt+0x1310>
   12850:	add	r0, r6, r0
   12854:	bl	11444 <__sprintf_chk@plt>
   12858:	b	127d8 <__assert_fail@plt+0x1280>
   1285c:	andeq	lr, r3, r8, asr #3
   12860:	andeq	ip, r2, ip, lsl #25
   12864:	andeq	lr, r3, ip, asr r1
   12868:	andeq	ip, r2, r8, asr #7
   1286c:	push	{r4, r5, r6, r7, r8, lr}
   12870:	sub	sp, sp, #128	; 0x80
   12874:	ldr	r4, [pc, #364]	; 129e8 <__assert_fail@plt+0x1490>
   12878:	ldr	r0, [r4, #148]	; 0x94
   1287c:	cmp	r0, #0
   12880:	beq	128bc <__assert_fail@plt+0x1364>
   12884:	ldr	r3, [r0]
   12888:	ands	r5, r3, #32
   1288c:	bne	129a8 <__assert_fail@plt+0x1450>
   12890:	bl	13a08 <__assert_fail@plt+0x24b0>
   12894:	subs	r6, r0, #0
   12898:	bne	12974 <__assert_fail@plt+0x141c>
   1289c:	ldrd	r2, [r4, #160]	; 0xa0
   128a0:	orrs	r1, r2, r3
   128a4:	beq	128c4 <__assert_fail@plt+0x136c>
   128a8:	ldrb	r1, [r4, #169]	; 0xa9
   128ac:	cmp	r1, #0
   128b0:	beq	12944 <__assert_fail@plt+0x13ec>
   128b4:	mov	r3, #0
   128b8:	str	r3, [r4, #148]	; 0x94
   128bc:	add	sp, sp, #128	; 0x80
   128c0:	pop	{r4, r5, r6, r7, r8, pc}
   128c4:	ldrb	r1, [r4, #168]	; 0xa8
   128c8:	cmp	r1, #0
   128cc:	beq	128a8 <__assert_fail@plt+0x1350>
   128d0:	mov	r2, sp
   128d4:	mov	r1, r4
   128d8:	bl	11228 <sigprocmask@plt>
   128dc:	ldr	r7, [r4, #152]	; 0x98
   128e0:	mov	r0, r7
   128e4:	bl	112dc <unlink@plt>
   128e8:	mov	r8, r0
   128ec:	bl	1142c <__errno_location@plt>
   128f0:	ldr	r3, [r4, #132]	; 0x84
   128f4:	mov	r1, sp
   128f8:	sub	r3, r3, #1
   128fc:	mov	r2, r6
   12900:	str	r3, [r4, #132]	; 0x84
   12904:	ldr	r5, [r0]
   12908:	mov	r0, #2
   1290c:	bl	11228 <sigprocmask@plt>
   12910:	cmp	r8, #0
   12914:	cmpne	r5, #2
   12918:	beq	128b4 <__assert_fail@plt+0x135c>
   1291c:	mov	r2, r7
   12920:	mov	r1, #3
   12924:	mov	r0, r6
   12928:	bl	16da4 <__assert_fail@plt+0x584c>
   1292c:	mov	r1, r5
   12930:	ldr	r2, [pc, #180]	; 129ec <__assert_fail@plt+0x1494>
   12934:	mov	r3, r0
   12938:	mov	r0, r6
   1293c:	bl	11384 <error@plt>
   12940:	b	128b4 <__assert_fail@plt+0x135c>
   12944:	ldr	ip, [pc, #164]	; 129f0 <__assert_fail@plt+0x1498>
   12948:	mov	r1, r3
   1294c:	mov	r0, r2
   12950:	mov	r2, sp
   12954:	ldr	r5, [ip]
   12958:	bl	13cfc <__assert_fail@plt+0x27a4>
   1295c:	ldr	r2, [pc, #144]	; 129f4 <__assert_fail@plt+0x149c>
   12960:	mov	r1, #1
   12964:	mov	r3, r0
   12968:	mov	r0, r5
   1296c:	bl	1148c <__fprintf_chk@plt>
   12970:	b	128b4 <__assert_fail@plt+0x135c>
   12974:	bl	1142c <__errno_location@plt>
   12978:	ldr	r2, [r4, #152]	; 0x98
   1297c:	mov	r1, #3
   12980:	ldr	r6, [r0]
   12984:	mov	r0, r5
   12988:	bl	16da4 <__assert_fail@plt+0x584c>
   1298c:	mov	r1, r6
   12990:	ldr	r2, [pc, #84]	; 129ec <__assert_fail@plt+0x1494>
   12994:	mov	r3, r0
   12998:	mov	r0, r5
   1299c:	bl	11384 <error@plt>
   129a0:	str	r5, [r4, #148]	; 0x94
   129a4:	bl	1273c <__assert_fail@plt+0x11e4>
   129a8:	mov	r2, #5
   129ac:	ldr	r1, [pc, #68]	; 129f8 <__assert_fail@plt+0x14a0>
   129b0:	mov	r0, #0
   129b4:	bl	112d0 <dcgettext@plt>
   129b8:	ldr	r1, [r4, #152]	; 0x98
   129bc:	mov	r5, r0
   129c0:	mov	r0, #4
   129c4:	bl	16328 <__assert_fail@plt+0x4dd0>
   129c8:	mov	r1, #0
   129cc:	mov	r2, r5
   129d0:	mov	r3, r0
   129d4:	mov	r0, r1
   129d8:	bl	11384 <error@plt>
   129dc:	mov	r3, #0
   129e0:	str	r3, [r4, #148]	; 0x94
   129e4:	bl	1273c <__assert_fail@plt+0x11e4>
   129e8:	andeq	lr, r3, r8, asr #3
   129ec:	andeq	ip, r2, ip, lsl #25
   129f0:			; <UNDEFINED> instruction: 0x0003e1bc
   129f4:	andeq	sp, r2, r4, asr r2
   129f8:	ldrdeq	ip, [r2], -r0
   129fc:	ldr	r4, [pc, #176]	; 12ab4 <__assert_fail@plt+0x155c>
   12a00:	push	{r7, lr}
   12a04:	mov	r9, r0
   12a08:	sub	sp, sp, #32
   12a0c:	mov	r6, r2
   12a10:	ldr	r1, [pc, #160]	; 12ab8 <__assert_fail@plt+0x1560>
   12a14:	mov	r2, #5
   12a18:	mov	r0, #0
   12a1c:	mov	r7, r3
   12a20:	ldr	r5, [r4]
   12a24:	bl	112d0 <dcgettext@plt>
   12a28:	ldr	r3, [pc, #140]	; 12abc <__assert_fail@plt+0x1564>
   12a2c:	add	r2, sp, #8
   12a30:	mov	r8, r0
   12a34:	ldrd	r0, [r9]
   12a38:	ldr	r9, [r3]
   12a3c:	bl	13cfc <__assert_fail@plt+0x27a4>
   12a40:	bl	17c98 <__assert_fail@plt+0x6740>
   12a44:	mov	r3, r9
   12a48:	mov	r2, r8
   12a4c:	mov	r1, #1
   12a50:	str	r0, [sp]
   12a54:	mov	r0, r5
   12a58:	bl	1148c <__fprintf_chk@plt>
   12a5c:	orrs	r3, r6, r7
   12a60:	beq	12aa4 <__assert_fail@plt+0x154c>
   12a64:	mov	r2, #5
   12a68:	ldr	r1, [pc, #80]	; 12ac0 <__assert_fail@plt+0x1568>
   12a6c:	mov	r0, #0
   12a70:	ldr	r4, [r4]
   12a74:	bl	112d0 <dcgettext@plt>
   12a78:	add	r2, sp, #8
   12a7c:	mov	r1, r7
   12a80:	mov	r5, r0
   12a84:	mov	r0, r6
   12a88:	bl	13cfc <__assert_fail@plt+0x27a4>
   12a8c:	mov	r2, r5
   12a90:	mov	r1, #1
   12a94:	mov	r3, r0
   12a98:	mov	r0, r4
   12a9c:	bl	1148c <__fprintf_chk@plt>
   12aa0:	bl	1273c <__assert_fail@plt+0x11e4>
   12aa4:	ldr	r1, [r4]
   12aa8:	mov	r0, #10
   12aac:	bl	114ec <fputc@plt>
   12ab0:	b	12aa0 <__assert_fail@plt+0x1548>
   12ab4:			; <UNDEFINED> instruction: 0x0003e1b8
   12ab8:	andeq	ip, r2, r4, ror #7
   12abc:	andeq	lr, r3, r0, asr #5
   12ac0:	andeq	ip, r2, r8, lsl #8
   12ac4:	push	{r4, r5, r6, lr}
   12ac8:	mov	r1, #1
   12acc:	ldr	r4, [pc, #120]	; 12b4c <__assert_fail@plt+0x15f4>
   12ad0:	mov	r5, r0
   12ad4:	ldr	r2, [r0]
   12ad8:	ldr	r3, [r4, #148]	; 0x94
   12adc:	ldr	r0, [r0, #4]
   12ae0:	bl	112ac <fwrite_unlocked@plt>
   12ae4:	ldr	r3, [r5]
   12ae8:	cmp	r0, r3
   12aec:	bne	12b04 <__assert_fail@plt+0x15ac>
   12af0:	ldrd	r2, [r4, #160]	; 0xa0
   12af4:	adds	r2, r2, r0
   12af8:	adc	r3, r3, r0, asr #31
   12afc:	strd	r2, [r4, #160]	; 0xa0
   12b00:	pop	{r4, r5, r6, pc}
   12b04:	bl	1142c <__errno_location@plt>
   12b08:	mov	r2, #5
   12b0c:	ldr	r1, [pc, #60]	; 12b50 <__assert_fail@plt+0x15f8>
   12b10:	ldr	r5, [r0]
   12b14:	mov	r0, #0
   12b18:	bl	112d0 <dcgettext@plt>
   12b1c:	ldr	r1, [r4, #152]	; 0x98
   12b20:	mov	r6, r0
   12b24:	mov	r0, #4
   12b28:	bl	16328 <__assert_fail@plt+0x4dd0>
   12b2c:	mov	r2, r6
   12b30:	mov	r1, r5
   12b34:	mov	r3, r0
   12b38:	mov	r0, #0
   12b3c:	bl	11384 <error@plt>
   12b40:	mov	r3, #0
   12b44:	str	r3, [r4, #148]	; 0x94
   12b48:	bl	1273c <__assert_fail@plt+0x11e4>
   12b4c:	andeq	lr, r3, r8, asr #3
   12b50:	ldrdeq	ip, [r2], -r0
   12b54:	push	{r4, r5, r6, lr}
   12b58:	sub	sp, sp, #136	; 0x88
   12b5c:	ldr	r4, [pc, #268]	; 12c70 <__assert_fail@plt+0x1718>
   12b60:	ldr	r5, [r4, #132]	; 0x84
   12b64:	ldr	r0, [r4, #136]	; 0x88
   12b68:	ldr	r1, [r4, #140]	; 0x8c
   12b6c:	bl	11360 <strcpy@plt>
   12b70:	ldr	r3, [r4, #144]	; 0x90
   12b74:	ldr	r6, [r4, #136]	; 0x88
   12b78:	cmp	r3, #0
   12b7c:	ldr	r0, [r4, #140]	; 0x8c
   12b80:	beq	12c44 <__assert_fail@plt+0x16ec>
   12b84:	bl	11414 <strlen@plt>
   12b88:	ldr	r3, [r4, #144]	; 0x90
   12b8c:	str	r5, [sp]
   12b90:	mvn	r2, #0
   12b94:	mov	r1, #1
   12b98:	add	r0, r6, r0
   12b9c:	bl	11444 <__sprintf_chk@plt>
   12ba0:	ldr	r6, [r4, #136]	; 0x88
   12ba4:	cmn	r5, #-2147483647	; 0x80000001
   12ba8:	str	r6, [r4, #152]	; 0x98
   12bac:	beq	12c18 <__assert_fail@plt+0x16c0>
   12bb0:	add	r2, sp, #8
   12bb4:	ldr	r1, [pc, #180]	; 12c70 <__assert_fail@plt+0x1718>
   12bb8:	mov	r0, #0
   12bbc:	bl	11228 <sigprocmask@plt>
   12bc0:	ldr	r1, [pc, #172]	; 12c74 <__assert_fail@plt+0x171c>
   12bc4:	mov	r0, r6
   12bc8:	bl	13b6c <__assert_fail@plt+0x2614>
   12bcc:	mov	r6, r0
   12bd0:	str	r0, [r4, #148]	; 0x94
   12bd4:	bl	1142c <__errno_location@plt>
   12bd8:	cmp	r6, #0
   12bdc:	addne	r5, r5, #1
   12be0:	str	r5, [r4, #132]	; 0x84
   12be4:	add	r1, sp, #8
   12be8:	mov	r2, #0
   12bec:	ldr	r5, [r0]
   12bf0:	mov	r0, #2
   12bf4:	bl	11228 <sigprocmask@plt>
   12bf8:	cmp	r6, #0
   12bfc:	ldreq	r6, [r4, #152]	; 0x98
   12c00:	beq	12c1c <__assert_fail@plt+0x16c4>
   12c04:	mov	r2, #0
   12c08:	mov	r3, #0
   12c0c:	strd	r2, [r4, #160]	; 0xa0
   12c10:	add	sp, sp, #136	; 0x88
   12c14:	pop	{r4, r5, r6, pc}
   12c18:	mov	r5, #75	; 0x4b
   12c1c:	mov	r2, r6
   12c20:	mov	r1, #3
   12c24:	mov	r0, #0
   12c28:	bl	16da4 <__assert_fail@plt+0x584c>
   12c2c:	mov	r1, r5
   12c30:	ldr	r2, [pc, #64]	; 12c78 <__assert_fail@plt+0x1720>
   12c34:	mov	r3, r0
   12c38:	mov	r0, #0
   12c3c:	bl	11384 <error@plt>
   12c40:	bl	1273c <__assert_fail@plt+0x11e4>
   12c44:	bl	11414 <strlen@plt>
   12c48:	ldr	r2, [pc, #44]	; 12c7c <__assert_fail@plt+0x1724>
   12c4c:	str	r5, [sp, #4]
   12c50:	ldr	r3, [pc, #40]	; 12c80 <__assert_fail@plt+0x1728>
   12c54:	ldr	r1, [r2]
   12c58:	mvn	r2, #0
   12c5c:	str	r1, [sp]
   12c60:	mov	r1, #1
   12c64:	add	r0, r6, r0
   12c68:	bl	11444 <__sprintf_chk@plt>
   12c6c:	b	12ba0 <__assert_fail@plt+0x1648>
   12c70:	andeq	lr, r3, r8, asr #3
   12c74:	andeq	ip, r2, ip, lsl r4
   12c78:	andeq	ip, r2, ip, lsl #25
   12c7c:	andeq	lr, r3, ip, asr r1
   12c80:	andeq	ip, r2, r8, asr #7
   12c84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c88:	mov	r8, r0
   12c8c:	ldr	r4, [pc, #216]	; 12d6c <__assert_fail@plt+0x1814>
   12c90:	sub	sp, sp, #12
   12c94:	ldrb	r3, [r4, #128]	; 0x80
   12c98:	cmp	r3, #0
   12c9c:	bne	12cbc <__assert_fail@plt+0x1764>
   12ca0:	mov	r1, #0
   12ca4:	mov	r0, r8
   12ca8:	bl	112a0 <signal@plt>
   12cac:	mov	r0, r8
   12cb0:	add	sp, sp, #12
   12cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cb8:	b	111d4 <raise@plt>
   12cbc:	ldr	r5, [r4, #132]	; 0x84
   12cc0:	subs	r5, r5, #1
   12cc4:	bmi	12d28 <__assert_fail@plt+0x17d0>
   12cc8:	ldr	sl, [pc, #160]	; 12d70 <__assert_fail@plt+0x1818>
   12ccc:	ldr	r9, [pc, #160]	; 12d74 <__assert_fail@plt+0x181c>
   12cd0:	mvn	r7, #0
   12cd4:	mov	r6, #1
   12cd8:	ldr	r0, [r4, #136]	; 0x88
   12cdc:	ldr	r1, [r4, #140]	; 0x8c
   12ce0:	bl	11360 <strcpy@plt>
   12ce4:	ldr	r3, [r4, #144]	; 0x90
   12ce8:	ldr	fp, [r4, #136]	; 0x88
   12cec:	cmp	r3, #0
   12cf0:	ldr	r0, [r4, #140]	; 0x8c
   12cf4:	beq	12d34 <__assert_fail@plt+0x17dc>
   12cf8:	bl	11414 <strlen@plt>
   12cfc:	ldr	r3, [r4, #144]	; 0x90
   12d00:	str	r5, [sp]
   12d04:	mov	r2, r7
   12d08:	mov	r1, r6
   12d0c:	sub	r5, r5, #1
   12d10:	add	r0, fp, r0
   12d14:	bl	11444 <__sprintf_chk@plt>
   12d18:	ldr	r0, [r4, #136]	; 0x88
   12d1c:	bl	112dc <unlink@plt>
   12d20:	cmn	r5, #1
   12d24:	bne	12cd8 <__assert_fail@plt+0x1780>
   12d28:	mov	r3, #0
   12d2c:	str	r3, [r4, #132]	; 0x84
   12d30:	b	12ca0 <__assert_fail@plt+0x1748>
   12d34:	bl	11414 <strlen@plt>
   12d38:	ldr	r3, [sl]
   12d3c:	mov	r2, r7
   12d40:	mov	r1, r6
   12d44:	stm	sp, {r3, r5}
   12d48:	mov	r3, r9
   12d4c:	sub	r5, r5, #1
   12d50:	add	r0, fp, r0
   12d54:	bl	11444 <__sprintf_chk@plt>
   12d58:	ldr	r0, [r4, #136]	; 0x88
   12d5c:	bl	112dc <unlink@plt>
   12d60:	cmn	r5, #1
   12d64:	bne	12cd8 <__assert_fail@plt+0x1780>
   12d68:	b	12d28 <__assert_fail@plt+0x17d0>
   12d6c:	andeq	lr, r3, r8, asr #3
   12d70:	andeq	lr, r3, ip, asr r1
   12d74:	andeq	ip, r2, r8, asr #7
   12d78:	push	{r4, lr}
   12d7c:	mov	r2, #5
   12d80:	ldr	r1, [pc, #28]	; 12da4 <__assert_fail@plt+0x184c>
   12d84:	mov	r0, #0
   12d88:	bl	112d0 <dcgettext@plt>
   12d8c:	mov	r1, #0
   12d90:	ldr	r2, [pc, #16]	; 12da8 <__assert_fail@plt+0x1850>
   12d94:	mov	r3, r0
   12d98:	mov	r0, r1
   12d9c:	bl	11384 <error@plt>
   12da0:	bl	1273c <__assert_fail@plt+0x11e4>
   12da4:	andeq	ip, r2, r0, lsr #8
   12da8:	andeq	ip, r2, ip, lsl #25
   12dac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12db0:	mov	r9, #0
   12db4:	ldr	sl, [pc, #1108]	; 13210 <__assert_fail@plt+0x1cb8>
   12db8:	ldr	r3, [pc, #1108]	; 13214 <__assert_fail@plt+0x1cbc>
   12dbc:	sub	sp, sp, #28
   12dc0:	ldr	r5, [sl, #172]	; 0xac
   12dc4:	mov	fp, #10
   12dc8:	cmp	r5, r3
   12dcc:	addgt	r5, r5, #1
   12dd0:	ldrle	r5, [pc, #1088]	; 13218 <__assert_fail@plt+0x1cc0>
   12dd4:	mov	r0, #48	; 0x30
   12dd8:	bl	293c8 <__assert_fail@plt+0x17e70>
   12ddc:	mov	r3, #1
   12de0:	str	r3, [sp]
   12de4:	mov	r2, r5
   12de8:	mvn	r3, #0
   12dec:	mov	r4, r0
   12df0:	mov	r1, r0
   12df4:	str	r9, [r4]
   12df8:	mov	r0, #0
   12dfc:	bl	2960c <__assert_fail@plt+0x180b4>
   12e00:	ldrd	r2, [sl, #176]	; 0xb0
   12e04:	ldr	r7, [sl, #172]	; 0xac
   12e08:	str	r9, [r4, #4]
   12e0c:	adds	r2, r2, #1
   12e10:	adc	r3, r3, #0
   12e14:	cmp	r7, #0
   12e18:	str	r9, [r4, #24]
   12e1c:	str	r9, [r4, #36]	; 0x24
   12e20:	str	r9, [r4, #32]
   12e24:	str	r9, [r4, #40]	; 0x28
   12e28:	strd	r2, [r4, #16]
   12e2c:	strd	r2, [r4, #8]
   12e30:	ldr	r5, [r4]
   12e34:	mov	r6, r0
   12e38:	str	r0, [r4, #28]
   12e3c:	bne	12ea0 <__assert_fail@plt+0x1948>
   12e40:	subs	r2, r5, #1
   12e44:	movne	r1, r0
   12e48:	bne	12ecc <__assert_fail@plt+0x1974>
   12e4c:	ldrb	r3, [sl, #188]	; 0xbc
   12e50:	cmp	r3, #0
   12e54:	bne	130c0 <__assert_fail@plt+0x1b68>
   12e58:	ldr	r5, [r4]
   12e5c:	cmp	r5, #0
   12e60:	blt	1313c <__assert_fail@plt+0x1be4>
   12e64:	cmn	r5, #-1073741823	; 0xc0000001
   12e68:	bgt	13158 <__assert_fail@plt+0x1c00>
   12e6c:	ldr	r0, [r4, #32]
   12e70:	lsl	r5, r5, #1
   12e74:	cmp	r0, #0
   12e78:	beq	12e8c <__assert_fail@plt+0x1934>
   12e7c:	ldr	r6, [r0, #652]	; 0x28c
   12e80:	bl	13c04 <__assert_fail@plt+0x26ac>
   12e84:	subs	r0, r6, #0
   12e88:	bne	12e7c <__assert_fail@plt+0x1924>
   12e8c:	ldr	r0, [r4, #28]
   12e90:	bl	13c04 <__assert_fail@plt+0x26ac>
   12e94:	mov	r0, r4
   12e98:	bl	13c04 <__assert_fail@plt+0x26ac>
   12e9c:	b	12dd4 <__assert_fail@plt+0x187c>
   12ea0:	mov	r2, r7
   12ea4:	ldr	r1, [sl, #184]	; 0xb8
   12ea8:	bl	11264 <memcpy@plt>
   12eac:	ldr	r0, [r4, #4]
   12eb0:	sub	r5, r5, r7
   12eb4:	add	r0, r7, r0
   12eb8:	subs	r2, r5, #1
   12ebc:	str	r9, [sl, #172]	; 0xac
   12ec0:	str	r0, [r4, #4]
   12ec4:	beq	12ee8 <__assert_fail@plt+0x1990>
   12ec8:	add	r1, r6, r7
   12ecc:	mov	r0, r9
   12ed0:	bl	28918 <__assert_fail@plt+0x173c0>
   12ed4:	subs	r2, r0, #0
   12ed8:	bne	1315c <__assert_fail@plt+0x1c04>
   12edc:	ldr	r0, [r4, #4]
   12ee0:	mov	r3, #1
   12ee4:	strb	r3, [sl, #188]	; 0xbc
   12ee8:	add	r0, r0, r2
   12eec:	cmp	r0, #0
   12ef0:	str	r0, [r4, #4]
   12ef4:	beq	12e4c <__assert_fail@plt+0x18f4>
   12ef8:	ldr	r5, [r4, #28]
   12efc:	mov	r6, #0
   12f00:	add	r3, r5, r0
   12f04:	str	r3, [sp, #12]
   12f08:	strb	fp, [r5, r0]
   12f0c:	b	12f34 <__assert_fail@plt+0x19dc>
   12f10:	ldr	r3, [r7, #4]
   12f14:	add	r0, r0, #1
   12f18:	add	ip, r3, #1
   12f1c:	add	r3, r7, r3, lsl #3
   12f20:	add	r6, r6, #1
   12f24:	str	r5, [r3, #16]
   12f28:	add	r5, r1, #1
   12f2c:	str	r8, [r3, #12]
   12f30:	stm	r7, {r0, ip}
   12f34:	mov	r1, fp
   12f38:	mov	r0, r5
   12f3c:	bl	11318 <rawmemchr@plt>
   12f40:	ldr	r3, [sp, #12]
   12f44:	cmp	r3, r0
   12f48:	mov	r1, r0
   12f4c:	beq	12fb4 <__assert_fail@plt+0x1a5c>
   12f50:	ldr	r3, [r4, #32]
   12f54:	sub	r8, r0, r5
   12f58:	cmp	r3, #0
   12f5c:	add	r8, r8, #1
   12f60:	beq	130f8 <__assert_fail@plt+0x1ba0>
   12f64:	ldr	r7, [r4, #36]	; 0x24
   12f68:	ldr	r0, [r7]
   12f6c:	cmp	r0, #80	; 0x50
   12f70:	bne	12f10 <__assert_fail@plt+0x19b8>
   12f74:	mov	r0, #656	; 0x290
   12f78:	str	r1, [sp, #16]
   12f7c:	bl	293c8 <__assert_fail@plt+0x17e70>
   12f80:	ldr	r1, [sp, #16]
   12f84:	str	r9, [r0, #652]	; 0x28c
   12f88:	str	r9, [r0]
   12f8c:	str	r9, [r0, #4]
   12f90:	str	r9, [r0, #8]
   12f94:	str	r0, [r7, #652]	; 0x28c
   12f98:	ldr	r3, [r4, #36]	; 0x24
   12f9c:	ldr	r7, [r3, #652]	; 0x28c
   12fa0:	str	r7, [r4, #36]	; 0x24
   12fa4:	ldm	r7, {r0, r3}
   12fa8:	add	ip, r3, #1
   12fac:	add	r0, r0, #1
   12fb0:	b	12f1c <__assert_fail@plt+0x19c4>
   12fb4:	subs	r7, r3, r5
   12fb8:	beq	13088 <__assert_fail@plt+0x1b30>
   12fbc:	ldrb	r3, [sl, #188]	; 0xbc
   12fc0:	cmp	r3, #0
   12fc4:	beq	13068 <__assert_fail@plt+0x1b10>
   12fc8:	ldr	r9, [r4, #32]
   12fcc:	cmp	r9, #0
   12fd0:	beq	131a8 <__assert_fail@plt+0x1c50>
   12fd4:	ldr	r8, [r4, #36]	; 0x24
   12fd8:	ldr	ip, [r8]
   12fdc:	cmp	ip, #80	; 0x50
   12fe0:	beq	1316c <__assert_fail@plt+0x1c14>
   12fe4:	ldr	r9, [r8, #4]
   12fe8:	add	ip, ip, #1
   12fec:	add	lr, r9, #1
   12ff0:	ldrd	r2, [sl, #176]	; 0xb0
   12ff4:	add	r6, r6, #1
   12ff8:	add	r9, r8, r9, lsl #3
   12ffc:	adds	r0, r2, r6
   13000:	adc	r1, r3, r6, asr #31
   13004:	adds	r2, r2, #1
   13008:	adc	r3, r3, #0
   1300c:	str	r5, [r9, #16]
   13010:	str	r7, [r9, #12]
   13014:	strd	r0, [sl, #176]	; 0xb0
   13018:	stm	r8, {ip, lr}
   1301c:	str	r6, [r4, #24]
   13020:	strd	r2, [r4, #8]
   13024:	strd	r2, [r4, #16]
   13028:	ldr	r2, [sl, #192]	; 0xc0
   1302c:	ldr	r1, [r4, #32]
   13030:	mov	r3, #0
   13034:	cmp	r2, #0
   13038:	str	r1, [r4, #36]	; 0x24
   1303c:	str	r3, [r4, #40]	; 0x28
   13040:	bne	1304c <__assert_fail@plt+0x1af4>
   13044:	b	131d4 <__assert_fail@plt+0x1c7c>
   13048:	mov	r2, r3
   1304c:	ldr	r3, [r2, #40]	; 0x28
   13050:	cmp	r3, #0
   13054:	bne	13048 <__assert_fail@plt+0x1af0>
   13058:	mov	r0, #1
   1305c:	str	r4, [r2, #40]	; 0x28
   13060:	add	sp, sp, #28
   13064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13068:	mov	r0, r5
   1306c:	mov	r1, r7
   13070:	bl	29968 <__assert_fail@plt+0x18410>
   13074:	mov	r5, r0
   13078:	ldr	r0, [sl, #184]	; 0xb8
   1307c:	bl	13c04 <__assert_fail@plt+0x26ac>
   13080:	str	r5, [sl, #184]	; 0xb8
   13084:	str	r7, [sl, #172]	; 0xac
   13088:	ldrd	r2, [sl, #176]	; 0xb0
   1308c:	str	r6, [r4, #24]
   13090:	adds	r0, r2, #1
   13094:	adc	r1, r3, #0
   13098:	adds	r2, r2, r6
   1309c:	adc	r3, r3, r6, asr #31
   130a0:	cmp	r6, #0
   130a4:	strd	r0, [r4, #8]
   130a8:	strd	r0, [r4, #16]
   130ac:	strd	r2, [sl, #176]	; 0xb0
   130b0:	bne	13028 <__assert_fail@plt+0x1ad0>
   130b4:	ldrb	r3, [sl, #188]	; 0xbc
   130b8:	cmp	r3, #0
   130bc:	beq	12e58 <__assert_fail@plt+0x1900>
   130c0:	ldr	r0, [r4, #32]
   130c4:	cmp	r0, #0
   130c8:	beq	130dc <__assert_fail@plt+0x1b84>
   130cc:	ldr	r5, [r0, #652]	; 0x28c
   130d0:	bl	13c04 <__assert_fail@plt+0x26ac>
   130d4:	subs	r0, r5, #0
   130d8:	bne	130cc <__assert_fail@plt+0x1b74>
   130dc:	ldr	r0, [r4, #28]
   130e0:	bl	13c04 <__assert_fail@plt+0x26ac>
   130e4:	mov	r0, r4
   130e8:	bl	13c04 <__assert_fail@plt+0x26ac>
   130ec:	mov	r0, #0
   130f0:	add	sp, sp, #28
   130f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130f8:	str	r0, [sp, #16]
   130fc:	mov	r0, #656	; 0x290
   13100:	str	r3, [sp, #20]
   13104:	bl	293c8 <__assert_fail@plt+0x17e70>
   13108:	ldr	r3, [sp, #20]
   1310c:	mov	ip, #1
   13110:	ldr	r1, [sp, #16]
   13114:	str	r3, [r0, #652]	; 0x28c
   13118:	str	r3, [r0]
   1311c:	str	r3, [r0, #4]
   13120:	str	r3, [r0, #8]
   13124:	mov	r7, r0
   13128:	str	r0, [r4, #36]	; 0x24
   1312c:	str	r0, [r4, #32]
   13130:	mov	r3, r9
   13134:	mov	r0, ip
   13138:	b	12f1c <__assert_fail@plt+0x19c4>
   1313c:	cmn	r5, #1
   13140:	beq	12e6c <__assert_fail@plt+0x1914>
   13144:	mov	r1, r5
   13148:	mov	r0, #-2147483648	; 0x80000000
   1314c:	bl	2bdc0 <__assert_fail@plt+0x1a868>
   13150:	cmp	r0, #1
   13154:	bne	12e6c <__assert_fail@plt+0x1914>
   13158:	bl	12d78 <__assert_fail@plt+0x1820>
   1315c:	cmn	r2, #1
   13160:	beq	131e4 <__assert_fail@plt+0x1c8c>
   13164:	ldr	r0, [r4, #4]
   13168:	b	12ee8 <__assert_fail@plt+0x1990>
   1316c:	mov	r0, #656	; 0x290
   13170:	bl	293c8 <__assert_fail@plt+0x17e70>
   13174:	mov	r3, #0
   13178:	str	r3, [r0, #652]	; 0x28c
   1317c:	str	r3, [r0]
   13180:	str	r3, [r0, #4]
   13184:	str	r3, [r0, #8]
   13188:	str	r0, [r8, #652]	; 0x28c
   1318c:	ldr	r3, [r4, #36]	; 0x24
   13190:	ldr	r8, [r3, #652]	; 0x28c
   13194:	ldr	r9, [r8, #4]
   13198:	ldr	ip, [r8]
   1319c:	add	lr, r9, #1
   131a0:	add	ip, ip, #1
   131a4:	b	12ff0 <__assert_fail@plt+0x1a98>
   131a8:	mov	r0, #656	; 0x290
   131ac:	bl	293c8 <__assert_fail@plt+0x17e70>
   131b0:	mov	lr, #1
   131b4:	mov	ip, lr
   131b8:	mov	r8, r0
   131bc:	str	r9, [r0, #652]	; 0x28c
   131c0:	str	r9, [r0]
   131c4:	str	r9, [r0, #4]
   131c8:	str	r9, [r0, #8]
   131cc:	str	r0, [r4, #32]
   131d0:	b	12ff0 <__assert_fail@plt+0x1a98>
   131d4:	mov	r0, #1
   131d8:	str	r4, [sl, #192]	; 0xc0
   131dc:	add	sp, sp, #28
   131e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131e4:	bl	1142c <__errno_location@plt>
   131e8:	mov	r2, #5
   131ec:	ldr	r1, [pc, #40]	; 1321c <__assert_fail@plt+0x1cc4>
   131f0:	ldr	r4, [r0]
   131f4:	mov	r0, #0
   131f8:	bl	112d0 <dcgettext@plt>
   131fc:	mov	r1, r4
   13200:	mov	r2, r0
   13204:	mov	r0, #0
   13208:	bl	11384 <error@plt>
   1320c:	bl	1273c <__assert_fail@plt+0x11e4>
   13210:	andeq	lr, r3, r8, asr #3
   13214:	strdeq	r1, [r0], -lr
   13218:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   1321c:	andeq	ip, r2, r4, lsr r4
   13220:	push	{r4, r5, r6, r7, r8, lr}
   13224:	mov	r6, r0
   13228:	ldr	r5, [pc, #216]	; 13308 <__assert_fail@plt+0x1db0>
   1322c:	mov	r7, r1
   13230:	ldr	r4, [r5, #192]	; 0xc0
   13234:	cmp	r4, #0
   13238:	beq	132e0 <__assert_fail@plt+0x1d88>
   1323c:	ldrd	r0, [r4, #8]
   13240:	cmp	r6, r0
   13244:	sbcs	r3, r7, r1
   13248:	bge	13258 <__assert_fail@plt+0x1d00>
   1324c:	b	132ec <__assert_fail@plt+0x1d94>
   13250:	ldrd	r0, [r3, #8]
   13254:	mov	r4, r3
   13258:	ldr	ip, [r4, #24]
   1325c:	adds	r2, r0, ip
   13260:	adc	r3, r1, ip, asr #31
   13264:	cmp	r6, r2
   13268:	sbcs	r3, r7, r3
   1326c:	blt	132b4 <__assert_fail@plt+0x1d5c>
   13270:	ldr	r3, [r4, #40]	; 0x28
   13274:	cmp	r3, #0
   13278:	bne	13250 <__assert_fail@plt+0x1cf8>
   1327c:	ldrb	r3, [r5, #188]	; 0xbc
   13280:	cmp	r3, #0
   13284:	bne	132ec <__assert_fail@plt+0x1d94>
   13288:	bl	12dac <__assert_fail@plt+0x1854>
   1328c:	cmp	r0, #0
   13290:	beq	132ec <__assert_fail@plt+0x1d94>
   13294:	ldr	r3, [r4, #40]	; 0x28
   13298:	cmp	r3, #0
   1329c:	bne	13250 <__assert_fail@plt+0x1cf8>
   132a0:	ldr	r3, [pc, #100]	; 1330c <__assert_fail@plt+0x1db4>
   132a4:	ldr	r2, [pc, #100]	; 13310 <__assert_fail@plt+0x1db8>
   132a8:	ldr	r1, [pc, #100]	; 13314 <__assert_fail@plt+0x1dbc>
   132ac:	ldr	r0, [pc, #100]	; 13318 <__assert_fail@plt+0x1dc0>
   132b0:	bl	11558 <__assert_fail@plt>
   132b4:	sub	r6, r6, r0
   132b8:	cmp	r6, #79	; 0x4f
   132bc:	ldr	r3, [r4, #32]
   132c0:	ble	132d4 <__assert_fail@plt+0x1d7c>
   132c4:	sub	r6, r6, #80	; 0x50
   132c8:	cmp	r6, #79	; 0x4f
   132cc:	ldr	r3, [r3, #652]	; 0x28c
   132d0:	bgt	132c4 <__assert_fail@plt+0x1d6c>
   132d4:	add	r6, r3, r6, lsl #3
   132d8:	add	r0, r6, #12
   132dc:	pop	{r4, r5, r6, r7, r8, pc}
   132e0:	ldrb	r3, [r5, #188]	; 0xbc
   132e4:	cmp	r3, #0
   132e8:	beq	132f4 <__assert_fail@plt+0x1d9c>
   132ec:	mov	r0, #0
   132f0:	pop	{r4, r5, r6, r7, r8, pc}
   132f4:	bl	12dac <__assert_fail@plt+0x1854>
   132f8:	cmp	r0, #0
   132fc:	beq	132ec <__assert_fail@plt+0x1d94>
   13300:	ldr	r4, [r5, #192]	; 0xc0
   13304:	b	1323c <__assert_fail@plt+0x1ce4>
   13308:	andeq	lr, r3, r8, asr #3
   1330c:	muleq	r2, r4, r2
   13310:	andeq	r0, r0, r7, asr #4
   13314:	andeq	ip, r2, r0, asr #8
   13318:	andeq	ip, r2, r0, asr r4
   1331c:	push	{r4, r5, r6, r7, r8, lr}
   13320:	ldr	r5, [pc, #224]	; 13408 <__assert_fail@plt+0x1eb0>
   13324:	ldr	r6, [r5, #196]	; 0xc4
   13328:	cmp	r6, #0
   1332c:	beq	13364 <__assert_fail@plt+0x1e0c>
   13330:	ldr	r0, [r6, #32]
   13334:	cmp	r0, #0
   13338:	beq	1334c <__assert_fail@plt+0x1df4>
   1333c:	ldr	r4, [r0, #652]	; 0x28c
   13340:	bl	13c04 <__assert_fail@plt+0x26ac>
   13344:	subs	r0, r4, #0
   13348:	bne	1333c <__assert_fail@plt+0x1de4>
   1334c:	ldr	r0, [r6, #28]
   13350:	bl	13c04 <__assert_fail@plt+0x26ac>
   13354:	mov	r0, r6
   13358:	bl	13c04 <__assert_fail@plt+0x26ac>
   1335c:	mov	r3, #0
   13360:	str	r3, [r5, #196]	; 0xc4
   13364:	ldr	r2, [r5, #192]	; 0xc0
   13368:	cmp	r2, #0
   1336c:	beq	133e0 <__assert_fail@plt+0x1e88>
   13370:	ldrd	r6, [r2, #16]
   13374:	ldrd	r0, [r5, #200]	; 0xc8
   13378:	cmp	r0, r6
   1337c:	sbcs	r3, r1, r7
   13380:	strdlt	r6, [r5, #200]	; 0xc8
   13384:	ldr	r1, [r2, #36]	; 0x24
   13388:	adds	r6, r6, #1
   1338c:	adc	r7, r7, #0
   13390:	ldr	r3, [r1, #8]
   13394:	ldr	r0, [r1]
   13398:	add	r3, r3, #1
   1339c:	cmp	r3, r0
   133a0:	add	r0, r1, r3, lsl #3
   133a4:	strd	r6, [r2, #16]
   133a8:	add	r0, r0, #4
   133ac:	str	r3, [r1, #8]
   133b0:	popne	{r4, r5, r6, r7, r8, pc}
   133b4:	ldr	r3, [r1, #652]	; 0x28c
   133b8:	cmp	r3, #0
   133bc:	str	r3, [r2, #36]	; 0x24
   133c0:	beq	133d0 <__assert_fail@plt+0x1e78>
   133c4:	ldr	r3, [r3]
   133c8:	cmp	r3, #0
   133cc:	popne	{r4, r5, r6, r7, r8, pc}
   133d0:	ldr	r3, [r2, #40]	; 0x28
   133d4:	str	r2, [r5, #196]	; 0xc4
   133d8:	str	r3, [r5, #192]	; 0xc0
   133dc:	pop	{r4, r5, r6, r7, r8, pc}
   133e0:	ldrb	r3, [r5, #188]	; 0xbc
   133e4:	cmp	r3, #0
   133e8:	beq	133f4 <__assert_fail@plt+0x1e9c>
   133ec:	mov	r0, #0
   133f0:	pop	{r4, r5, r6, r7, r8, pc}
   133f4:	bl	12dac <__assert_fail@plt+0x1854>
   133f8:	cmp	r0, #0
   133fc:	beq	133ec <__assert_fail@plt+0x1e94>
   13400:	ldr	r2, [r5, #192]	; 0xc0
   13404:	b	13370 <__assert_fail@plt+0x1e18>
   13408:	andeq	lr, r3, r8, asr #3
   1340c:	push	{r4, r5, r6, lr}
   13410:	mov	r6, #1
   13414:	ldr	r5, [pc, #136]	; 134a4 <__assert_fail@plt+0x1f4c>
   13418:	b	1344c <__assert_fail@plt+0x1ef4>
   1341c:	ldr	r3, [r5, #148]	; 0x94
   13420:	ldr	r2, [r4]
   13424:	mov	r1, r6
   13428:	ldr	r0, [r4, #4]
   1342c:	bl	112ac <fwrite_unlocked@plt>
   13430:	ldr	r3, [r4]
   13434:	cmp	r0, r3
   13438:	bne	1345c <__assert_fail@plt+0x1f04>
   1343c:	ldrd	r2, [r5, #160]	; 0xa0
   13440:	adds	r2, r2, r0
   13444:	adc	r3, r3, r0, asr #31
   13448:	strd	r2, [r5, #160]	; 0xa0
   1344c:	bl	1331c <__assert_fail@plt+0x1dc4>
   13450:	subs	r4, r0, #0
   13454:	bne	1341c <__assert_fail@plt+0x1ec4>
   13458:	pop	{r4, r5, r6, pc}
   1345c:	bl	1142c <__errno_location@plt>
   13460:	mov	r2, #5
   13464:	ldr	r1, [pc, #60]	; 134a8 <__assert_fail@plt+0x1f50>
   13468:	ldr	r4, [r0]
   1346c:	mov	r0, #0
   13470:	bl	112d0 <dcgettext@plt>
   13474:	ldr	r1, [r5, #152]	; 0x98
   13478:	mov	r6, r0
   1347c:	mov	r0, #4
   13480:	bl	16328 <__assert_fail@plt+0x4dd0>
   13484:	mov	r2, r6
   13488:	mov	r1, r4
   1348c:	mov	r3, r0
   13490:	mov	r0, #0
   13494:	bl	11384 <error@plt>
   13498:	mov	r3, #0
   1349c:	str	r3, [r5, #148]	; 0x94
   134a0:	bl	1273c <__assert_fail@plt+0x11e4>
   134a4:	andeq	lr, r3, r8, asr #3
   134a8:	ldrdeq	ip, [r2], -r0
   134ac:	ldr	r4, [pc, #204]	; 13580 <__assert_fail@plt+0x2028>
   134b0:	push	{r7, lr}
   134b4:	sub	sp, sp, #32
   134b8:	mov	sl, r0
   134bc:	mov	r6, r2
   134c0:	ldr	r1, [pc, #188]	; 13584 <__assert_fail@plt+0x202c>
   134c4:	mov	r2, #5
   134c8:	mov	r0, #0
   134cc:	mov	r7, r3
   134d0:	ldr	r8, [r4]
   134d4:	ldrb	r5, [sp, #40]	; 0x28
   134d8:	bl	112d0 <dcgettext@plt>
   134dc:	ldr	r3, [pc, #164]	; 13588 <__assert_fail@plt+0x2030>
   134e0:	ldr	r2, [sl]
   134e4:	ldr	r1, [pc, #160]	; 1358c <__assert_fail@plt+0x2034>
   134e8:	ldr	r3, [r3, #208]	; 0xd0
   134ec:	ldr	sl, [r1]
   134f0:	mov	r9, r0
   134f4:	ldr	r0, [r3, r2, lsl #2]
   134f8:	bl	17c98 <__assert_fail@plt+0x6740>
   134fc:	mov	r3, sl
   13500:	mov	r2, r9
   13504:	mov	r1, #1
   13508:	str	r0, [sp]
   1350c:	mov	r0, r8
   13510:	bl	1148c <__fprintf_chk@plt>
   13514:	orrs	r3, r6, r7
   13518:	beq	13564 <__assert_fail@plt+0x200c>
   1351c:	mov	r2, #5
   13520:	ldr	r1, [pc, #104]	; 13590 <__assert_fail@plt+0x2038>
   13524:	mov	r0, #0
   13528:	ldr	r4, [r4]
   1352c:	bl	112d0 <dcgettext@plt>
   13530:	add	r2, sp, #8
   13534:	mov	r1, r7
   13538:	mov	r8, r0
   1353c:	mov	r0, r6
   13540:	bl	13cfc <__assert_fail@plt+0x27a4>
   13544:	mov	r2, r8
   13548:	mov	r1, #1
   1354c:	mov	r3, r0
   13550:	mov	r0, r4
   13554:	bl	1148c <__fprintf_chk@plt>
   13558:	cmp	r5, #0
   1355c:	beq	13574 <__assert_fail@plt+0x201c>
   13560:	bl	1273c <__assert_fail@plt+0x11e4>
   13564:	ldr	r1, [r4]
   13568:	mov	r0, #10
   1356c:	bl	114ec <fputc@plt>
   13570:	b	13558 <__assert_fail@plt+0x2000>
   13574:	bl	1340c <__assert_fail@plt+0x1eb4>
   13578:	bl	1286c <__assert_fail@plt+0x1314>
   1357c:	b	13560 <__assert_fail@plt+0x2008>
   13580:			; <UNDEFINED> instruction: 0x0003e1b8
   13584:	andeq	ip, r2, r4, asr r4
   13588:	andeq	lr, r3, r8, asr #3
   1358c:	andeq	lr, r3, r0, asr #5
   13590:	andeq	ip, r2, r8, lsl #8
   13594:	subs	r5, r0, #0
   13598:	push	{r7, lr}
   1359c:	sub	sp, sp, #56	; 0x38
   135a0:	beq	135dc <__assert_fail@plt+0x2084>
   135a4:	ldr	r3, [pc, #756]	; 138a0 <__assert_fail@plt+0x2348>
   135a8:	mov	r2, #5
   135ac:	ldr	r1, [pc, #752]	; 138a4 <__assert_fail@plt+0x234c>
   135b0:	mov	r0, #0
   135b4:	ldr	r4, [r3]
   135b8:	bl	112d0 <dcgettext@plt>
   135bc:	ldr	r3, [pc, #740]	; 138a8 <__assert_fail@plt+0x2350>
   135c0:	mov	r1, #1
   135c4:	ldr	r3, [r3]
   135c8:	mov	r2, r0
   135cc:	mov	r0, r4
   135d0:	bl	1148c <__fprintf_chk@plt>
   135d4:	mov	r0, r5
   135d8:	bl	11408 <exit@plt>
   135dc:	mov	r2, #5
   135e0:	ldr	r1, [pc, #708]	; 138ac <__assert_fail@plt+0x2354>
   135e4:	bl	112d0 <dcgettext@plt>
   135e8:	ldr	r3, [pc, #696]	; 138a8 <__assert_fail@plt+0x2350>
   135ec:	ldr	r7, [pc, #700]	; 138b0 <__assert_fail@plt+0x2358>
   135f0:	ldr	r4, [pc, #700]	; 138b4 <__assert_fail@plt+0x235c>
   135f4:	ldr	r2, [r3]
   135f8:	mov	r1, r0
   135fc:	mov	r0, #1
   13600:	bl	11474 <__printf_chk@plt>
   13604:	mov	r2, #5
   13608:	ldr	r1, [pc, #680]	; 138b8 <__assert_fail@plt+0x2360>
   1360c:	mov	r0, r5
   13610:	bl	112d0 <dcgettext@plt>
   13614:	ldr	r1, [r7]
   13618:	bl	111bc <fputs_unlocked@plt>
   1361c:	mov	r2, #5
   13620:	ldr	r1, [pc, #660]	; 138bc <__assert_fail@plt+0x2364>
   13624:	mov	r0, r5
   13628:	bl	112d0 <dcgettext@plt>
   1362c:	ldr	r1, [r7]
   13630:	bl	111bc <fputs_unlocked@plt>
   13634:	mov	r2, #5
   13638:	ldr	r1, [pc, #640]	; 138c0 <__assert_fail@plt+0x2368>
   1363c:	mov	r0, r5
   13640:	bl	112d0 <dcgettext@plt>
   13644:	ldr	r1, [r7]
   13648:	bl	111bc <fputs_unlocked@plt>
   1364c:	mov	r2, #5
   13650:	ldr	r1, [pc, #620]	; 138c4 <__assert_fail@plt+0x236c>
   13654:	mov	r0, r5
   13658:	bl	112d0 <dcgettext@plt>
   1365c:	ldr	r1, [r7]
   13660:	bl	111bc <fputs_unlocked@plt>
   13664:	mov	r2, #5
   13668:	ldr	r1, [pc, #600]	; 138c8 <__assert_fail@plt+0x2370>
   1366c:	mov	r0, r5
   13670:	bl	112d0 <dcgettext@plt>
   13674:	ldr	r1, [r7]
   13678:	bl	111bc <fputs_unlocked@plt>
   1367c:	mov	r2, #5
   13680:	ldr	r1, [pc, #580]	; 138cc <__assert_fail@plt+0x2374>
   13684:	mov	r0, r5
   13688:	bl	112d0 <dcgettext@plt>
   1368c:	ldr	r1, [r7]
   13690:	bl	111bc <fputs_unlocked@plt>
   13694:	mov	r2, #5
   13698:	ldr	r1, [pc, #560]	; 138d0 <__assert_fail@plt+0x2378>
   1369c:	mov	r0, r5
   136a0:	bl	112d0 <dcgettext@plt>
   136a4:	ldr	r1, [r7]
   136a8:	bl	111bc <fputs_unlocked@plt>
   136ac:	mov	r2, #5
   136b0:	ldr	r1, [pc, #540]	; 138d4 <__assert_fail@plt+0x237c>
   136b4:	mov	r0, r5
   136b8:	bl	112d0 <dcgettext@plt>
   136bc:	ldr	r1, [r7]
   136c0:	bl	111bc <fputs_unlocked@plt>
   136c4:	mov	r2, #5
   136c8:	ldr	r1, [pc, #520]	; 138d8 <__assert_fail@plt+0x2380>
   136cc:	mov	r0, r5
   136d0:	bl	112d0 <dcgettext@plt>
   136d4:	ldr	r1, [r7]
   136d8:	bl	111bc <fputs_unlocked@plt>
   136dc:	ldm	r4!, {r0, r1, r2, r3}
   136e0:	mov	lr, sp
   136e4:	stmia	lr!, {r0, r1, r2, r3}
   136e8:	ldm	r4!, {r0, r1, r2, r3}
   136ec:	ldr	ip, [sp]
   136f0:	stmia	lr!, {r0, r1, r2, r3}
   136f4:	cmp	ip, #0
   136f8:	ldm	r4!, {r0, r1, r2, r3}
   136fc:	stmia	lr!, {r0, r1, r2, r3}
   13700:	ldm	r4, {r0, r1}
   13704:	moveq	r4, sp
   13708:	stm	lr, {r0, r1}
   1370c:	beq	1373c <__assert_fail@plt+0x21e4>
   13710:	ldr	r6, [pc, #452]	; 138dc <__assert_fail@plt+0x2384>
   13714:	mov	r4, sp
   13718:	b	13728 <__assert_fail@plt+0x21d0>
   1371c:	ldr	ip, [r4, #8]!
   13720:	cmp	ip, #0
   13724:	beq	1373c <__assert_fail@plt+0x21e4>
   13728:	mov	r1, ip
   1372c:	mov	r0, r6
   13730:	bl	111f8 <strcmp@plt>
   13734:	cmp	r0, #0
   13738:	bne	1371c <__assert_fail@plt+0x21c4>
   1373c:	ldr	r4, [r4, #4]
   13740:	mov	r2, #5
   13744:	cmp	r4, #0
   13748:	ldr	r1, [pc, #400]	; 138e0 <__assert_fail@plt+0x2388>
   1374c:	beq	137f4 <__assert_fail@plt+0x229c>
   13750:	mov	r0, #0
   13754:	bl	112d0 <dcgettext@plt>
   13758:	ldr	r3, [pc, #388]	; 138e4 <__assert_fail@plt+0x238c>
   1375c:	ldr	r2, [pc, #388]	; 138e8 <__assert_fail@plt+0x2390>
   13760:	mov	r1, r0
   13764:	mov	r0, #1
   13768:	bl	11474 <__printf_chk@plt>
   1376c:	mov	r1, #0
   13770:	mov	r0, #5
   13774:	bl	114bc <setlocale@plt>
   13778:	cmp	r0, #0
   1377c:	ldreq	r6, [pc, #344]	; 138dc <__assert_fail@plt+0x2384>
   13780:	beq	1379c <__assert_fail@plt+0x2244>
   13784:	mov	r2, #3
   13788:	ldr	r1, [pc, #348]	; 138ec <__assert_fail@plt+0x2394>
   1378c:	bl	11528 <strncmp@plt>
   13790:	ldr	r6, [pc, #324]	; 138dc <__assert_fail@plt+0x2384>
   13794:	cmp	r0, #0
   13798:	bne	13884 <__assert_fail@plt+0x232c>
   1379c:	mov	r2, #5
   137a0:	ldr	r1, [pc, #328]	; 138f0 <__assert_fail@plt+0x2398>
   137a4:	mov	r0, #0
   137a8:	bl	112d0 <dcgettext@plt>
   137ac:	ldr	r3, [pc, #296]	; 138dc <__assert_fail@plt+0x2384>
   137b0:	ldr	r2, [pc, #300]	; 138e4 <__assert_fail@plt+0x238c>
   137b4:	mov	r1, r0
   137b8:	mov	r0, #1
   137bc:	bl	11474 <__printf_chk@plt>
   137c0:	mov	r2, #5
   137c4:	ldr	r1, [pc, #296]	; 138f4 <__assert_fail@plt+0x239c>
   137c8:	mov	r0, #0
   137cc:	bl	112d0 <dcgettext@plt>
   137d0:	ldr	r2, [pc, #288]	; 138f8 <__assert_fail@plt+0x23a0>
   137d4:	cmp	r4, r6
   137d8:	ldr	r3, [pc, #284]	; 138fc <__assert_fail@plt+0x23a4>
   137dc:	movne	r3, r2
   137e0:	mov	r1, r0
   137e4:	mov	r2, r4
   137e8:	mov	r0, #1
   137ec:	bl	11474 <__printf_chk@plt>
   137f0:	b	135d4 <__assert_fail@plt+0x207c>
   137f4:	mov	r0, r4
   137f8:	bl	112d0 <dcgettext@plt>
   137fc:	ldr	r3, [pc, #224]	; 138e4 <__assert_fail@plt+0x238c>
   13800:	ldr	r2, [pc, #224]	; 138e8 <__assert_fail@plt+0x2390>
   13804:	mov	r1, r0
   13808:	mov	r0, #1
   1380c:	bl	11474 <__printf_chk@plt>
   13810:	mov	r1, r4
   13814:	mov	r0, #5
   13818:	bl	114bc <setlocale@plt>
   1381c:	cmp	r0, #0
   13820:	beq	13838 <__assert_fail@plt+0x22e0>
   13824:	mov	r2, #3
   13828:	ldr	r1, [pc, #188]	; 138ec <__assert_fail@plt+0x2394>
   1382c:	bl	11528 <strncmp@plt>
   13830:	cmp	r0, #0
   13834:	bne	1387c <__assert_fail@plt+0x2324>
   13838:	mov	r2, #5
   1383c:	ldr	r1, [pc, #172]	; 138f0 <__assert_fail@plt+0x2398>
   13840:	mov	r0, #0
   13844:	bl	112d0 <dcgettext@plt>
   13848:	ldr	r3, [pc, #140]	; 138dc <__assert_fail@plt+0x2384>
   1384c:	ldr	r2, [pc, #144]	; 138e4 <__assert_fail@plt+0x238c>
   13850:	mov	r4, r3
   13854:	mov	r1, r0
   13858:	mov	r0, #1
   1385c:	bl	11474 <__printf_chk@plt>
   13860:	ldr	r1, [pc, #140]	; 138f4 <__assert_fail@plt+0x239c>
   13864:	mov	r2, #5
   13868:	mov	r0, #0
   1386c:	bl	112d0 <dcgettext@plt>
   13870:	ldr	r3, [pc, #132]	; 138fc <__assert_fail@plt+0x23a4>
   13874:	mov	r1, r0
   13878:	b	137e4 <__assert_fail@plt+0x228c>
   1387c:	ldr	r6, [pc, #88]	; 138dc <__assert_fail@plt+0x2384>
   13880:	mov	r4, r6
   13884:	mov	r2, #5
   13888:	ldr	r1, [pc, #112]	; 13900 <__assert_fail@plt+0x23a8>
   1388c:	mov	r0, #0
   13890:	bl	112d0 <dcgettext@plt>
   13894:	ldr	r1, [r7]
   13898:	bl	111bc <fputs_unlocked@plt>
   1389c:	b	1379c <__assert_fail@plt+0x2244>
   138a0:			; <UNDEFINED> instruction: 0x0003e1b8
   138a4:	andeq	ip, r2, r4, ror r4
   138a8:	andeq	lr, r3, r0, asr #5
   138ac:	muleq	r2, ip, r4
   138b0:			; <UNDEFINED> instruction: 0x0003e1bc
   138b4:	andeq	ip, r2, r0, lsr #5
   138b8:	andeq	ip, r2, r4, asr #9
   138bc:	andeq	ip, r2, ip, asr #10
   138c0:	andeq	ip, r2, r0, ror r5
   138c4:			; <UNDEFINED> instruction: 0x0002c5bc
   138c8:	andeq	ip, r2, r8, ror r6
   138cc:			; <UNDEFINED> instruction: 0x0002c6bc
   138d0:	andeq	ip, r2, r4, lsl #15
   138d4:			; <UNDEFINED> instruction: 0x0002c7b4
   138d8:	andeq	ip, r2, ip, ror #15
   138dc:	andeq	ip, r2, ip, ror #8
   138e0:	andeq	ip, r2, r4, lsr #19
   138e4:			; <UNDEFINED> instruction: 0x0002c9bc
   138e8:	andeq	ip, r2, r4, ror #19
   138ec:	strdeq	ip, [r2], -r4
   138f0:	andeq	ip, r2, r0, asr #20
   138f4:	andeq	ip, r2, ip, asr sl
   138f8:			; <UNDEFINED> instruction: 0x0002c7b0
   138fc:	strdeq	ip, [r2], -r0
   13900:	strdeq	ip, [r2], -r8
   13904:	ldr	r3, [pc, #4]	; 13910 <__assert_fail@plt+0x23b8>
   13908:	str	r0, [r3]
   1390c:	bx	lr
   13910:			; <UNDEFINED> instruction: 0x0003e2b8
   13914:	ldr	r3, [pc, #4]	; 13920 <__assert_fail@plt+0x23c8>
   13918:	strb	r0, [r3, #4]
   1391c:	bx	lr
   13920:			; <UNDEFINED> instruction: 0x0003e2b8
   13924:	ldr	r3, [pc, #192]	; 139ec <__assert_fail@plt+0x2494>
   13928:	push	{r4, r5, r6, lr}
   1392c:	sub	sp, sp, #8
   13930:	ldr	r0, [r3]
   13934:	bl	2b6d4 <__assert_fail@plt+0x1a17c>
   13938:	cmp	r0, #0
   1393c:	beq	13960 <__assert_fail@plt+0x2408>
   13940:	ldr	r4, [pc, #168]	; 139f0 <__assert_fail@plt+0x2498>
   13944:	ldrb	r3, [r4, #4]
   13948:	cmp	r3, #0
   1394c:	beq	1397c <__assert_fail@plt+0x2424>
   13950:	bl	1142c <__errno_location@plt>
   13954:	ldr	r3, [r0]
   13958:	cmp	r3, #32
   1395c:	bne	1397c <__assert_fail@plt+0x2424>
   13960:	ldr	r3, [pc, #140]	; 139f4 <__assert_fail@plt+0x249c>
   13964:	ldr	r0, [r3]
   13968:	bl	2b6d4 <__assert_fail@plt+0x1a17c>
   1396c:	cmp	r0, #0
   13970:	bne	139c4 <__assert_fail@plt+0x246c>
   13974:	add	sp, sp, #8
   13978:	pop	{r4, r5, r6, pc}
   1397c:	mov	r2, #5
   13980:	ldr	r1, [pc, #112]	; 139f8 <__assert_fail@plt+0x24a0>
   13984:	mov	r0, #0
   13988:	bl	112d0 <dcgettext@plt>
   1398c:	ldr	r4, [r4]
   13990:	cmp	r4, #0
   13994:	mov	r5, r0
   13998:	beq	139d0 <__assert_fail@plt+0x2478>
   1399c:	bl	1142c <__errno_location@plt>
   139a0:	ldr	r6, [r0]
   139a4:	mov	r0, r4
   139a8:	bl	16a38 <__assert_fail@plt+0x54e0>
   139ac:	mov	r1, r6
   139b0:	str	r5, [sp]
   139b4:	ldr	r2, [pc, #64]	; 139fc <__assert_fail@plt+0x24a4>
   139b8:	mov	r3, r0
   139bc:	mov	r0, #0
   139c0:	bl	11384 <error@plt>
   139c4:	ldr	r3, [pc, #52]	; 13a00 <__assert_fail@plt+0x24a8>
   139c8:	ldr	r0, [r3]
   139cc:	bl	11258 <_exit@plt>
   139d0:	bl	1142c <__errno_location@plt>
   139d4:	mov	r3, r5
   139d8:	ldr	r2, [pc, #36]	; 13a04 <__assert_fail@plt+0x24ac>
   139dc:	ldr	r1, [r0]
   139e0:	mov	r0, r4
   139e4:	bl	11384 <error@plt>
   139e8:	b	139c4 <__assert_fail@plt+0x246c>
   139ec:			; <UNDEFINED> instruction: 0x0003e1bc
   139f0:			; <UNDEFINED> instruction: 0x0003e2b8
   139f4:			; <UNDEFINED> instruction: 0x0003e1b8
   139f8:	ldrdeq	ip, [r2], -r8
   139fc:	andeq	ip, r2, r4, ror #29
   13a00:	andeq	lr, r3, r4, ror #2
   13a04:	andeq	ip, r2, ip, lsl #25
   13a08:	push	{r4, r5, lr}
   13a0c:	sub	sp, sp, #12
   13a10:	mov	r4, r0
   13a14:	bl	11480 <fileno@plt>
   13a18:	cmp	r0, #0
   13a1c:	mov	r0, r4
   13a20:	blt	13a9c <__assert_fail@plt+0x2544>
   13a24:	bl	113c0 <__freading@plt>
   13a28:	cmp	r0, #0
   13a2c:	bne	13a68 <__assert_fail@plt+0x2510>
   13a30:	mov	r0, r4
   13a34:	bl	13b0c <__assert_fail@plt+0x25b4>
   13a38:	cmp	r0, #0
   13a3c:	beq	13a98 <__assert_fail@plt+0x2540>
   13a40:	bl	1142c <__errno_location@plt>
   13a44:	mov	r5, r0
   13a48:	mov	r0, r4
   13a4c:	ldr	r4, [r5]
   13a50:	bl	11498 <fclose@plt>
   13a54:	cmp	r4, #0
   13a58:	mvnne	r0, #0
   13a5c:	strne	r4, [r5]
   13a60:	add	sp, sp, #12
   13a64:	pop	{r4, r5, pc}
   13a68:	mov	r0, r4
   13a6c:	bl	11480 <fileno@plt>
   13a70:	mov	r3, #1
   13a74:	str	r3, [sp]
   13a78:	mov	r2, #0
   13a7c:	mov	r3, #0
   13a80:	bl	11348 <lseek64@plt>
   13a84:	mvn	r3, #0
   13a88:	mvn	r2, #0
   13a8c:	cmp	r1, r3
   13a90:	cmpeq	r0, r2
   13a94:	bne	13a30 <__assert_fail@plt+0x24d8>
   13a98:	mov	r0, r4
   13a9c:	add	sp, sp, #12
   13aa0:	pop	{r4, r5, lr}
   13aa4:	b	11498 <fclose@plt>
   13aa8:	mov	ip, r1
   13aac:	push	{r4, r5, r6, r7, r8, lr}
   13ab0:	mov	r1, r2
   13ab4:	mov	r5, r0
   13ab8:	mov	r2, r3
   13abc:	mov	r0, ip
   13ac0:	bl	11390 <open64@plt>
   13ac4:	sub	r3, r5, r0
   13ac8:	clz	r3, r3
   13acc:	lsr	r3, r3, #5
   13ad0:	orrs	r3, r3, r0, lsr #31
   13ad4:	mov	r4, r0
   13ad8:	bne	13b04 <__assert_fail@plt+0x25ac>
   13adc:	mov	r1, r5
   13ae0:	bl	112e8 <dup2@plt>
   13ae4:	mov	r7, r0
   13ae8:	bl	1142c <__errno_location@plt>
   13aec:	mov	r5, r0
   13af0:	mov	r0, r4
   13af4:	ldr	r6, [r5]
   13af8:	mov	r4, r7
   13afc:	bl	11540 <close@plt>
   13b00:	str	r6, [r5]
   13b04:	mov	r0, r4
   13b08:	pop	{r4, r5, r6, r7, r8, pc}
   13b0c:	push	{r4, lr}
   13b10:	subs	r4, r0, #0
   13b14:	sub	sp, sp, #8
   13b18:	beq	13b34 <__assert_fail@plt+0x25dc>
   13b1c:	bl	113c0 <__freading@plt>
   13b20:	cmp	r0, #0
   13b24:	beq	13b34 <__assert_fail@plt+0x25dc>
   13b28:	ldr	r3, [r4]
   13b2c:	tst	r3, #256	; 0x100
   13b30:	bne	13b44 <__assert_fail@plt+0x25ec>
   13b34:	mov	r0, r4
   13b38:	add	sp, sp, #8
   13b3c:	pop	{r4, lr}
   13b40:	b	1121c <fflush@plt>
   13b44:	mov	r3, #1
   13b48:	str	r3, [sp]
   13b4c:	mov	r2, #0
   13b50:	mov	r3, #0
   13b54:	mov	r0, r4
   13b58:	bl	13c5c <__assert_fail@plt+0x2704>
   13b5c:	mov	r0, r4
   13b60:	add	sp, sp, #8
   13b64:	pop	{r4, lr}
   13b68:	b	1121c <fflush@plt>
   13b6c:	push	{r4, r5, r6, lr}
   13b70:	mov	r5, r1
   13b74:	bl	11504 <fopen64@plt>
   13b78:	subs	r4, r0, #0
   13b7c:	beq	13b8c <__assert_fail@plt+0x2634>
   13b80:	bl	11480 <fileno@plt>
   13b84:	cmp	r0, #2
   13b88:	bls	13b94 <__assert_fail@plt+0x263c>
   13b8c:	mov	r0, r4
   13b90:	pop	{r4, r5, r6, pc}
   13b94:	bl	28980 <__assert_fail@plt+0x17428>
   13b98:	subs	r6, r0, #0
   13b9c:	blt	13be4 <__assert_fail@plt+0x268c>
   13ba0:	mov	r0, r4
   13ba4:	bl	13a08 <__assert_fail@plt+0x24b0>
   13ba8:	cmp	r0, #0
   13bac:	bne	13bc4 <__assert_fail@plt+0x266c>
   13bb0:	mov	r1, r5
   13bb4:	mov	r0, r6
   13bb8:	bl	111a4 <fdopen@plt>
   13bbc:	subs	r4, r0, #0
   13bc0:	bne	13b8c <__assert_fail@plt+0x2634>
   13bc4:	bl	1142c <__errno_location@plt>
   13bc8:	mov	r4, #0
   13bcc:	mov	r5, r0
   13bd0:	mov	r0, r6
   13bd4:	ldr	r6, [r5]
   13bd8:	bl	11540 <close@plt>
   13bdc:	str	r6, [r5]
   13be0:	b	13b8c <__assert_fail@plt+0x2634>
   13be4:	bl	1142c <__errno_location@plt>
   13be8:	mov	r5, r0
   13bec:	mov	r0, r4
   13bf0:	ldr	r6, [r5]
   13bf4:	mov	r4, #0
   13bf8:	bl	13a08 <__assert_fail@plt+0x24b0>
   13bfc:	str	r6, [r5]
   13c00:	b	13b8c <__assert_fail@plt+0x2634>
   13c04:	push	{r4, r5, lr}
   13c08:	sub	sp, sp, #12
   13c0c:	mov	r5, r0
   13c10:	bl	1142c <__errno_location@plt>
   13c14:	mov	r2, #0
   13c18:	mov	r4, r0
   13c1c:	ldr	r3, [r0]
   13c20:	str	r2, [r4]
   13c24:	mov	r0, r5
   13c28:	str	r3, [sp]
   13c2c:	str	r3, [sp, #4]
   13c30:	bl	11240 <free@plt>
   13c34:	ldr	r3, [r4]
   13c38:	add	r2, sp, #8
   13c3c:	cmp	r3, #0
   13c40:	moveq	r3, #4
   13c44:	movne	r3, #0
   13c48:	add	r3, r2, r3
   13c4c:	ldr	r3, [r3, #-8]
   13c50:	str	r3, [r4]
   13c54:	add	sp, sp, #12
   13c58:	pop	{r4, r5, pc}
   13c5c:	push	{r4, r5, r6, r7, r8, lr}
   13c60:	sub	sp, sp, #8
   13c64:	ldmib	r0, {ip, lr}
   13c68:	mov	r4, r0
   13c6c:	ldr	r5, [sp, #32]
   13c70:	cmp	lr, ip
   13c74:	beq	13c8c <__assert_fail@plt+0x2734>
   13c78:	str	r5, [sp, #32]
   13c7c:	mov	r0, r4
   13c80:	add	sp, sp, #8
   13c84:	pop	{r4, r5, r6, r7, r8, lr}
   13c88:	b	114a4 <fseeko64@plt>
   13c8c:	ldr	lr, [r0, #20]
   13c90:	ldr	ip, [r0, #16]
   13c94:	cmp	lr, ip
   13c98:	bne	13c78 <__assert_fail@plt+0x2720>
   13c9c:	ldr	r8, [r0, #36]	; 0x24
   13ca0:	cmp	r8, #0
   13ca4:	bne	13c78 <__assert_fail@plt+0x2720>
   13ca8:	mov	r6, r2
   13cac:	mov	r7, r3
   13cb0:	bl	11480 <fileno@plt>
   13cb4:	mov	r2, r6
   13cb8:	mov	r3, r7
   13cbc:	str	r5, [sp]
   13cc0:	bl	11348 <lseek64@plt>
   13cc4:	mvn	r3, #0
   13cc8:	mvn	r2, #0
   13ccc:	cmp	r1, r3
   13cd0:	cmpeq	r0, r2
   13cd4:	beq	13cf4 <__assert_fail@plt+0x279c>
   13cd8:	ldr	r3, [r4]
   13cdc:	strd	r0, [r4, #80]	; 0x50
   13ce0:	mov	r0, r8
   13ce4:	bic	r3, r3, #16
   13ce8:	str	r3, [r4]
   13cec:	add	sp, sp, #8
   13cf0:	pop	{r4, r5, r6, r7, r8, pc}
   13cf4:	mvn	r0, #0
   13cf8:	b	13cec <__assert_fail@plt+0x2794>
   13cfc:	cmp	r0, #0
   13d00:	sbcs	r3, r1, #0
   13d04:	mov	r3, #0
   13d08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13d0c:	mov	r4, r0
   13d10:	mov	r5, r1
   13d14:	strb	r3, [r2, #20]
   13d18:	add	r6, r2, #20
   13d1c:	mov	r8, #10
   13d20:	mov	r9, #0
   13d24:	blt	13d74 <__assert_fail@plt+0x281c>
   13d28:	mov	r0, r4
   13d2c:	mov	r1, r5
   13d30:	mov	r2, r8
   13d34:	mov	r3, r9
   13d38:	bl	2c000 <__assert_fail@plt+0x1aaa8>
   13d3c:	mov	r0, r4
   13d40:	mov	r1, r5
   13d44:	mov	r3, r9
   13d48:	add	r2, r2, #48	; 0x30
   13d4c:	strb	r2, [r6, #-1]!
   13d50:	mov	r2, r8
   13d54:	bl	2c000 <__assert_fail@plt+0x1aaa8>
   13d58:	mov	r4, r0
   13d5c:	mov	r5, r1
   13d60:	orrs	r3, r4, r5
   13d64:	bne	13d28 <__assert_fail@plt+0x27d0>
   13d68:	mov	r0, r6
   13d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d70:	mov	r6, r7
   13d74:	mov	r0, r4
   13d78:	mov	r1, r5
   13d7c:	mov	r2, r8
   13d80:	mov	r3, r9
   13d84:	bl	2c000 <__assert_fail@plt+0x1aaa8>
   13d88:	mov	r0, r4
   13d8c:	mov	r1, r5
   13d90:	mov	r3, r9
   13d94:	sub	r7, r6, #1
   13d98:	rsb	r2, r2, #48	; 0x30
   13d9c:	strb	r2, [r6, #-1]
   13da0:	mov	r2, r8
   13da4:	bl	2c000 <__assert_fail@plt+0x1aaa8>
   13da8:	mov	r4, r0
   13dac:	mov	r5, r1
   13db0:	orrs	r3, r4, r5
   13db4:	bne	13d70 <__assert_fail@plt+0x2818>
   13db8:	mov	r3, #45	; 0x2d
   13dbc:	sub	r6, r6, #2
   13dc0:	strb	r3, [r7, #-1]
   13dc4:	mov	r0, r6
   13dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13dcc:	push	{r4, r5, r6, lr}
   13dd0:	subs	r4, r0, #0
   13dd4:	beq	13e48 <__assert_fail@plt+0x28f0>
   13dd8:	mov	r1, #47	; 0x2f
   13ddc:	bl	114d4 <strrchr@plt>
   13de0:	subs	r5, r0, #0
   13de4:	beq	13e34 <__assert_fail@plt+0x28dc>
   13de8:	add	r6, r5, #1
   13dec:	sub	r3, r6, r4
   13df0:	cmp	r3, #6
   13df4:	ble	13e34 <__assert_fail@plt+0x28dc>
   13df8:	mov	r2, #7
   13dfc:	ldr	r1, [pc, #96]	; 13e64 <__assert_fail@plt+0x290c>
   13e00:	sub	r0, r5, #6
   13e04:	bl	11528 <strncmp@plt>
   13e08:	cmp	r0, #0
   13e0c:	bne	13e34 <__assert_fail@plt+0x28dc>
   13e10:	mov	r2, #3
   13e14:	ldr	r1, [pc, #76]	; 13e68 <__assert_fail@plt+0x2910>
   13e18:	mov	r0, r6
   13e1c:	bl	11528 <strncmp@plt>
   13e20:	cmp	r0, #0
   13e24:	movne	r4, r6
   13e28:	ldreq	r3, [pc, #60]	; 13e6c <__assert_fail@plt+0x2914>
   13e2c:	addeq	r4, r5, #4
   13e30:	streq	r4, [r3]
   13e34:	ldr	r2, [pc, #52]	; 13e70 <__assert_fail@plt+0x2918>
   13e38:	ldr	r3, [pc, #52]	; 13e74 <__assert_fail@plt+0x291c>
   13e3c:	str	r4, [r2]
   13e40:	str	r4, [r3]
   13e44:	pop	{r4, r5, r6, pc}
   13e48:	ldr	r3, [pc, #40]	; 13e78 <__assert_fail@plt+0x2920>
   13e4c:	mov	r2, #55	; 0x37
   13e50:	mov	r1, #1
   13e54:	ldr	r3, [r3]
   13e58:	ldr	r0, [pc, #28]	; 13e7c <__assert_fail@plt+0x2924>
   13e5c:	bl	1133c <fwrite@plt>
   13e60:	bl	11534 <abort@plt>
   13e64:	andeq	ip, r2, r4, lsr #30
   13e68:	andeq	ip, r2, ip, lsr #30
   13e6c:	andeq	lr, r3, r8, lsr #3
   13e70:	andeq	lr, r3, r0, asr #5
   13e74:	andeq	lr, r3, ip, lsr #3
   13e78:			; <UNDEFINED> instruction: 0x0003e1b8
   13e7c:	andeq	ip, r2, ip, ror #29
   13e80:	push	{r4, r5, r6, lr}
   13e84:	mov	r4, r0
   13e88:	mov	r5, r1
   13e8c:	bl	2b9ec <__assert_fail@plt+0x1a494>
   13e90:	ldrb	r3, [r0]
   13e94:	bic	r3, r3, #32
   13e98:	cmp	r3, #85	; 0x55
   13e9c:	bne	13efc <__assert_fail@plt+0x29a4>
   13ea0:	ldrb	r3, [r0, #1]
   13ea4:	bic	r3, r3, #32
   13ea8:	cmp	r3, #84	; 0x54
   13eac:	bne	13f38 <__assert_fail@plt+0x29e0>
   13eb0:	ldrb	r3, [r0, #2]
   13eb4:	bic	r3, r3, #32
   13eb8:	cmp	r3, #70	; 0x46
   13ebc:	bne	13f38 <__assert_fail@plt+0x29e0>
   13ec0:	ldrb	r3, [r0, #3]
   13ec4:	cmp	r3, #45	; 0x2d
   13ec8:	bne	13f38 <__assert_fail@plt+0x29e0>
   13ecc:	ldrb	r3, [r0, #4]
   13ed0:	cmp	r3, #56	; 0x38
   13ed4:	bne	13f38 <__assert_fail@plt+0x29e0>
   13ed8:	ldrb	r3, [r0, #5]
   13edc:	cmp	r3, #0
   13ee0:	bne	13f38 <__assert_fail@plt+0x29e0>
   13ee4:	ldrb	r2, [r4]
   13ee8:	ldr	r3, [pc, #152]	; 13f88 <__assert_fail@plt+0x2a30>
   13eec:	ldr	r0, [pc, #152]	; 13f8c <__assert_fail@plt+0x2a34>
   13ef0:	cmp	r2, #96	; 0x60
   13ef4:	movne	r0, r3
   13ef8:	pop	{r4, r5, r6, pc}
   13efc:	cmp	r3, #71	; 0x47
   13f00:	bne	13f38 <__assert_fail@plt+0x29e0>
   13f04:	ldrb	r3, [r0, #1]
   13f08:	bic	r3, r3, #32
   13f0c:	cmp	r3, #66	; 0x42
   13f10:	bne	13f38 <__assert_fail@plt+0x29e0>
   13f14:	ldrb	r3, [r0, #2]
   13f18:	cmp	r3, #49	; 0x31
   13f1c:	bne	13f38 <__assert_fail@plt+0x29e0>
   13f20:	ldrb	r3, [r0, #3]
   13f24:	cmp	r3, #56	; 0x38
   13f28:	bne	13f38 <__assert_fail@plt+0x29e0>
   13f2c:	ldrb	r3, [r0, #4]
   13f30:	cmp	r3, #48	; 0x30
   13f34:	beq	13f4c <__assert_fail@plt+0x29f4>
   13f38:	ldr	r3, [pc, #80]	; 13f90 <__assert_fail@plt+0x2a38>
   13f3c:	cmp	r5, #9
   13f40:	ldr	r0, [pc, #76]	; 13f94 <__assert_fail@plt+0x2a3c>
   13f44:	movne	r0, r3
   13f48:	pop	{r4, r5, r6, pc}
   13f4c:	ldrb	r3, [r0, #5]
   13f50:	cmp	r3, #51	; 0x33
   13f54:	bne	13f38 <__assert_fail@plt+0x29e0>
   13f58:	ldrb	r3, [r0, #6]
   13f5c:	cmp	r3, #48	; 0x30
   13f60:	bne	13f38 <__assert_fail@plt+0x29e0>
   13f64:	ldrb	r3, [r0, #7]
   13f68:	cmp	r3, #0
   13f6c:	bne	13f38 <__assert_fail@plt+0x29e0>
   13f70:	ldrb	r2, [r4]
   13f74:	ldr	r3, [pc, #28]	; 13f98 <__assert_fail@plt+0x2a40>
   13f78:	ldr	r0, [pc, #28]	; 13f9c <__assert_fail@plt+0x2a44>
   13f7c:	cmp	r2, #96	; 0x60
   13f80:	movne	r0, r3
   13f84:	pop	{r4, r5, r6, pc}
   13f88:	andeq	ip, r2, r8, lsl #31
   13f8c:	andeq	ip, r2, r4, lsl #31
   13f90:	andeq	ip, r2, r0, asr #27
   13f94:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   13f98:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   13f9c:	andeq	ip, r2, ip, lsl #31
   13fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fa4:	sub	sp, sp, #140	; 0x8c
   13fa8:	mov	r9, r1
   13fac:	str	r3, [sp, #24]
   13fb0:	mov	r3, #1
   13fb4:	mov	sl, r0
   13fb8:	str	r2, [sp, #44]	; 0x2c
   13fbc:	str	r3, [sp, #28]
   13fc0:	bl	11354 <__ctype_get_mb_cur_max@plt>
   13fc4:	ldr	r3, [sp, #180]	; 0xb4
   13fc8:	mov	fp, r9
   13fcc:	mov	r9, sl
   13fd0:	lsr	r3, r3, #1
   13fd4:	and	r3, r3, #1
   13fd8:	str	r3, [sp, #40]	; 0x28
   13fdc:	ldr	r3, [sp, #180]	; 0xb4
   13fe0:	mov	r2, #0
   13fe4:	and	r3, r3, #4
   13fe8:	str	r3, [sp, #100]	; 0x64
   13fec:	ldr	r3, [sp, #180]	; 0xb4
   13ff0:	str	r2, [sp, #76]	; 0x4c
   13ff4:	and	r3, r3, #1
   13ff8:	str	r3, [sp, #96]	; 0x60
   13ffc:	str	r2, [sp, #36]	; 0x24
   14000:	str	r2, [sp, #56]	; 0x38
   14004:	str	r2, [sp, #68]	; 0x44
   14008:	str	r2, [sp, #72]	; 0x48
   1400c:	str	r2, [sp, #84]	; 0x54
   14010:	str	r0, [sp, #80]	; 0x50
   14014:	ldr	r3, [sp, #176]	; 0xb0
   14018:	cmp	r3, #10
   1401c:	ldrls	pc, [pc, r3, lsl #2]
   14020:	b	151f8 <__assert_fail@plt+0x3ca0>
   14024:	andeq	r4, r1, r0, asr r0
   14028:	andeq	r4, r1, r0, ror r3
   1402c:	andeq	r4, r1, r8, asr #9
   14030:	andeq	r4, r1, r4, lsr #7
   14034:	andeq	r4, r1, ip, lsl r5
   14038:	strdeq	r4, [r1], -ip
   1403c:	andeq	r4, r1, r4, asr #7
   14040:	andeq	r4, r1, r8, ror #7
   14044:	andeq	r4, r1, r0, lsl r4
   14048:	andeq	r4, r1, r0, lsl r4
   1404c:	andeq	r4, r1, r0, lsl r4
   14050:	mov	r3, #0
   14054:	ldr	r1, [sp, #56]	; 0x38
   14058:	ldr	r2, [sp, #176]	; 0xb0
   1405c:	ldr	lr, [sp, #176]	; 0xb0
   14060:	mov	r8, r3
   14064:	mov	ip, r3
   14068:	str	r3, [sp, #40]	; 0x28
   1406c:	mov	r3, r1
   14070:	cmp	r2, #2
   14074:	moveq	r3, #0
   14078:	andne	r3, r3, #1
   1407c:	mov	r0, r3
   14080:	str	r3, [sp, #92]	; 0x5c
   14084:	ldr	r3, [sp, #68]	; 0x44
   14088:	sub	lr, lr, #2
   1408c:	adds	r2, r3, #0
   14090:	movne	r2, #1
   14094:	and	r3, r1, ip
   14098:	and	r3, r2, r3
   1409c:	clz	lr, lr
   140a0:	str	r3, [sp, #88]	; 0x58
   140a4:	lsr	lr, lr, #5
   140a8:	mov	r3, ip
   140ac:	and	r3, r3, lr
   140b0:	mov	sl, #0
   140b4:	and	r0, r2, r0
   140b8:	str	r3, [sp, #64]	; 0x40
   140bc:	eor	r3, r1, #1
   140c0:	str	lr, [sp, #52]	; 0x34
   140c4:	str	r0, [sp, #48]	; 0x30
   140c8:	str	r3, [sp, #60]	; 0x3c
   140cc:	ldr	r3, [sp, #24]
   140d0:	cmn	r3, #1
   140d4:	beq	14604 <__assert_fail@plt+0x30ac>
   140d8:	subs	r7, r3, sl
   140dc:	movne	r7, #1
   140e0:	cmp	r7, #0
   140e4:	beq	1461c <__assert_fail@plt+0x30c4>
   140e8:	ldr	r3, [sp, #48]	; 0x30
   140ec:	cmp	r3, #0
   140f0:	beq	14988 <__assert_fail@plt+0x3430>
   140f4:	ldr	r2, [sp, #68]	; 0x44
   140f8:	ldr	r1, [sp, #24]
   140fc:	cmp	r2, #1
   14100:	mov	r3, r2
   14104:	movls	r3, #0
   14108:	movhi	r3, #1
   1410c:	cmn	r1, #1
   14110:	movne	r3, #0
   14114:	cmp	r3, #0
   14118:	add	r4, sl, r2
   1411c:	beq	1412c <__assert_fail@plt+0x2bd4>
   14120:	ldr	r0, [sp, #44]	; 0x2c
   14124:	bl	11414 <strlen@plt>
   14128:	str	r0, [sp, #24]
   1412c:	ldr	r3, [sp, #24]
   14130:	cmp	r3, r4
   14134:	ldr	r3, [sp, #44]	; 0x2c
   14138:	add	r5, r3, sl
   1413c:	bcc	14990 <__assert_fail@plt+0x3438>
   14140:	mov	r0, r5
   14144:	ldr	r2, [sp, #68]	; 0x44
   14148:	ldr	r1, [sp, #72]	; 0x48
   1414c:	bl	112b8 <memcmp@plt>
   14150:	cmp	r0, #0
   14154:	bne	14990 <__assert_fail@plt+0x3438>
   14158:	ldr	r3, [sp, #40]	; 0x28
   1415c:	cmp	r3, #0
   14160:	bne	1534c <__assert_fail@plt+0x3df4>
   14164:	ldrb	r4, [r5]
   14168:	cmp	r4, #126	; 0x7e
   1416c:	ldrls	pc, [pc, r4, lsl #2]
   14170:	b	15288 <__assert_fail@plt+0x3d30>
   14174:	andeq	r4, r1, r8, asr #16
   14178:	andeq	r5, r1, r8, lsl #5
   1417c:	andeq	r5, r1, r8, lsl #5
   14180:	andeq	r5, r1, r8, lsl #5
   14184:	andeq	r5, r1, r8, lsl #5
   14188:	andeq	r5, r1, r8, lsl #5
   1418c:	andeq	r5, r1, r8, lsl #5
   14190:	andeq	r4, r1, r4, lsr r8
   14194:	andeq	r4, r1, r0, lsr #16
   14198:	strdeq	r4, [r1], -ip
   1419c:	ldrdeq	r4, [r1], -ip
   141a0:	andeq	r4, r1, ip, lsl #16
   141a4:	andeq	r4, r1, r4, asr #14
   141a8:	andeq	r4, r1, r8, ror r9
   141ac:	andeq	r5, r1, r8, lsl #5
   141b0:	andeq	r5, r1, r8, lsl #5
   141b4:	andeq	r5, r1, r8, lsl #5
   141b8:	andeq	r5, r1, r8, lsl #5
   141bc:	andeq	r5, r1, r8, lsl #5
   141c0:	andeq	r5, r1, r8, lsl #5
   141c4:	andeq	r5, r1, r8, lsl #5
   141c8:	andeq	r5, r1, r8, lsl #5
   141cc:	andeq	r5, r1, r8, lsl #5
   141d0:	andeq	r5, r1, r8, lsl #5
   141d4:	andeq	r5, r1, r8, lsl #5
   141d8:	andeq	r5, r1, r8, lsl #5
   141dc:	andeq	r5, r1, r8, lsl #5
   141e0:	andeq	r5, r1, r8, lsl #5
   141e4:	andeq	r5, r1, r8, lsl #5
   141e8:	andeq	r5, r1, r8, lsl #5
   141ec:	andeq	r5, r1, r8, lsl #5
   141f0:	andeq	r5, r1, r8, lsl #5
   141f4:	andeq	r4, r1, r8, ror #18
   141f8:	andeq	r4, r1, r8, asr #18
   141fc:	andeq	r4, r1, r8, asr #18
   14200:	andeq	r4, r1, r8, lsr #18
   14204:	andeq	r4, r1, r8, asr #18
   14208:	andeq	r4, r1, r4, lsr r7
   1420c:	andeq	r4, r1, r8, asr #18
   14210:	andeq	r4, r1, r0, lsl r7
   14214:	andeq	r4, r1, r8, asr #18
   14218:	andeq	r4, r1, r8, asr #18
   1421c:	andeq	r4, r1, r8, asr #18
   14220:	andeq	r4, r1, r4, lsr r7
   14224:	andeq	r4, r1, r4, lsr r7
   14228:	andeq	r4, r1, r4, lsr r7
   1422c:	andeq	r4, r1, r4, lsr r7
   14230:	andeq	r4, r1, r4, lsr r7
   14234:	andeq	r4, r1, r4, lsr r7
   14238:	andeq	r4, r1, r4, lsr r7
   1423c:	andeq	r4, r1, r4, lsr r7
   14240:	andeq	r4, r1, r4, lsr r7
   14244:	andeq	r4, r1, r4, lsr r7
   14248:	andeq	r4, r1, r4, lsr r7
   1424c:	andeq	r4, r1, r4, lsr r7
   14250:	andeq	r4, r1, r4, lsr r7
   14254:	andeq	r4, r1, r4, lsr r7
   14258:	andeq	r4, r1, r4, lsr r7
   1425c:	andeq	r4, r1, r4, lsr r7
   14260:	andeq	r4, r1, r8, asr #18
   14264:	andeq	r4, r1, r8, asr #18
   14268:	andeq	r4, r1, r8, asr #18
   1426c:	andeq	r4, r1, r8, asr #18
   14270:	andeq	r4, r1, r0, asr #13
   14274:	andeq	r5, r1, r8, lsl #5
   14278:	andeq	r4, r1, r4, lsr r7
   1427c:	andeq	r4, r1, r4, lsr r7
   14280:	andeq	r4, r1, r4, lsr r7
   14284:	andeq	r4, r1, r4, lsr r7
   14288:	andeq	r4, r1, r4, lsr r7
   1428c:	andeq	r4, r1, r4, lsr r7
   14290:	andeq	r4, r1, r4, lsr r7
   14294:	andeq	r4, r1, r4, lsr r7
   14298:	andeq	r4, r1, r4, lsr r7
   1429c:	andeq	r4, r1, r4, lsr r7
   142a0:	andeq	r4, r1, r4, lsr r7
   142a4:	andeq	r4, r1, r4, lsr r7
   142a8:	andeq	r4, r1, r4, lsr r7
   142ac:	andeq	r4, r1, r4, lsr r7
   142b0:	andeq	r4, r1, r4, lsr r7
   142b4:	andeq	r4, r1, r4, lsr r7
   142b8:	andeq	r4, r1, r4, lsr r7
   142bc:	andeq	r4, r1, r4, lsr r7
   142c0:	andeq	r4, r1, r4, lsr r7
   142c4:	andeq	r4, r1, r4, lsr r7
   142c8:	andeq	r4, r1, r4, lsr r7
   142cc:	andeq	r4, r1, r4, lsr r7
   142d0:	andeq	r4, r1, r4, lsr r7
   142d4:	andeq	r4, r1, r4, lsr r7
   142d8:	andeq	r4, r1, r4, lsr r7
   142dc:	andeq	r4, r1, r4, lsr r7
   142e0:	andeq	r4, r1, r8, asr #18
   142e4:	andeq	r4, r1, ip, lsl #13
   142e8:	andeq	r4, r1, r4, lsr r7
   142ec:	andeq	r4, r1, r8, asr #18
   142f0:	andeq	r4, r1, r4, lsr r7
   142f4:	andeq	r4, r1, r8, asr #18
   142f8:	andeq	r4, r1, r4, lsr r7
   142fc:	andeq	r4, r1, r4, lsr r7
   14300:	andeq	r4, r1, r4, lsr r7
   14304:	andeq	r4, r1, r4, lsr r7
   14308:	andeq	r4, r1, r4, lsr r7
   1430c:	andeq	r4, r1, r4, lsr r7
   14310:	andeq	r4, r1, r4, lsr r7
   14314:	andeq	r4, r1, r4, lsr r7
   14318:	andeq	r4, r1, r4, lsr r7
   1431c:	andeq	r4, r1, r4, lsr r7
   14320:	andeq	r4, r1, r4, lsr r7
   14324:	andeq	r4, r1, r4, lsr r7
   14328:	andeq	r4, r1, r4, lsr r7
   1432c:	andeq	r4, r1, r4, lsr r7
   14330:	andeq	r4, r1, r4, lsr r7
   14334:	andeq	r4, r1, r4, lsr r7
   14338:	andeq	r4, r1, r4, lsr r7
   1433c:	andeq	r4, r1, r4, lsr r7
   14340:	andeq	r4, r1, r4, lsr r7
   14344:	andeq	r4, r1, r4, lsr r7
   14348:	andeq	r4, r1, r4, lsr r7
   1434c:	andeq	r4, r1, r4, lsr r7
   14350:	andeq	r4, r1, r4, lsr r7
   14354:	andeq	r4, r1, r4, lsr r7
   14358:	andeq	r4, r1, r4, lsr r7
   1435c:	andeq	r4, r1, r4, lsr r7
   14360:	andeq	r4, r1, r4, asr #10
   14364:	andeq	r4, r1, r8, asr #18
   14368:	andeq	r4, r1, r4, asr #10
   1436c:	andeq	r4, r1, r8, lsr #18
   14370:	mov	r3, #1
   14374:	str	r3, [sp, #40]	; 0x28
   14378:	str	r3, [sp, #68]	; 0x44
   1437c:	mov	r8, #0
   14380:	ldr	r3, [pc, #4056]	; 15360 <__assert_fail@plt+0x3e08>
   14384:	str	r3, [sp, #72]	; 0x48
   14388:	mov	r3, #2
   1438c:	str	r3, [sp, #176]	; 0xb0
   14390:	ldr	r1, [sp, #56]	; 0x38
   14394:	mov	r2, r3
   14398:	ldr	ip, [sp, #40]	; 0x28
   1439c:	mov	lr, r3
   143a0:	b	1406c <__assert_fail@plt+0x2b14>
   143a4:	mov	r3, #1
   143a8:	str	r3, [sp, #56]	; 0x38
   143ac:	str	r3, [sp, #68]	; 0x44
   143b0:	str	r3, [sp, #40]	; 0x28
   143b4:	ldr	r3, [pc, #4004]	; 15360 <__assert_fail@plt+0x3e08>
   143b8:	mov	r8, #0
   143bc:	str	r3, [sp, #72]	; 0x48
   143c0:	b	14388 <__assert_fail@plt+0x2e30>
   143c4:	mov	r3, #1
   143c8:	str	r3, [sp, #56]	; 0x38
   143cc:	str	r3, [sp, #68]	; 0x44
   143d0:	str	r3, [sp, #40]	; 0x28
   143d4:	ldr	r3, [pc, #3976]	; 15364 <__assert_fail@plt+0x3e0c>
   143d8:	mov	r8, #0
   143dc:	str	r3, [sp, #72]	; 0x48
   143e0:	mov	r3, #5
   143e4:	b	1438c <__assert_fail@plt+0x2e34>
   143e8:	mov	r3, #0
   143ec:	str	r3, [sp, #40]	; 0x28
   143f0:	mov	r3, #1
   143f4:	str	r3, [sp, #56]	; 0x38
   143f8:	mov	r8, #0
   143fc:	mov	r1, r3
   14400:	ldr	r2, [sp, #176]	; 0xb0
   14404:	ldr	ip, [sp, #40]	; 0x28
   14408:	ldr	lr, [sp, #176]	; 0xb0
   1440c:	b	1406c <__assert_fail@plt+0x2b14>
   14410:	ldr	r3, [sp, #176]	; 0xb0
   14414:	cmp	r3, #10
   14418:	beq	1445c <__assert_fail@plt+0x2f04>
   1441c:	mov	r2, #5
   14420:	ldr	r1, [pc, #3904]	; 15368 <__assert_fail@plt+0x3e10>
   14424:	mov	r0, #0
   14428:	bl	112d0 <dcgettext@plt>
   1442c:	ldr	r2, [pc, #3892]	; 15368 <__assert_fail@plt+0x3e10>
   14430:	cmp	r0, r2
   14434:	str	r0, [sp, #188]	; 0xbc
   14438:	beq	154f4 <__assert_fail@plt+0x3f9c>
   1443c:	mov	r2, #5
   14440:	ldr	r1, [pc, #3864]	; 15360 <__assert_fail@plt+0x3e08>
   14444:	mov	r0, #0
   14448:	bl	112d0 <dcgettext@plt>
   1444c:	ldr	r2, [pc, #3852]	; 15360 <__assert_fail@plt+0x3e08>
   14450:	cmp	r0, r2
   14454:	str	r0, [sp, #192]	; 0xc0
   14458:	beq	154e4 <__assert_fail@plt+0x3f8c>
   1445c:	ldr	r8, [sp, #40]	; 0x28
   14460:	cmp	r8, #0
   14464:	movne	r8, #0
   14468:	bne	14498 <__assert_fail@plt+0x2f40>
   1446c:	ldr	r3, [sp, #188]	; 0xbc
   14470:	ldrb	r3, [r3]
   14474:	cmp	r3, #0
   14478:	beq	14498 <__assert_fail@plt+0x2f40>
   1447c:	ldr	r2, [sp, #188]	; 0xbc
   14480:	cmp	fp, r8
   14484:	strbhi	r3, [r9, r8]
   14488:	ldrb	r3, [r2, #1]!
   1448c:	add	r8, r8, #1
   14490:	cmp	r3, #0
   14494:	bne	14480 <__assert_fail@plt+0x2f28>
   14498:	ldr	r0, [sp, #192]	; 0xc0
   1449c:	bl	11414 <strlen@plt>
   144a0:	ldr	r3, [sp, #192]	; 0xc0
   144a4:	ldr	r2, [sp, #176]	; 0xb0
   144a8:	str	r3, [sp, #72]	; 0x48
   144ac:	mov	r3, #1
   144b0:	str	r3, [sp, #56]	; 0x38
   144b4:	mov	r1, r3
   144b8:	ldr	ip, [sp, #40]	; 0x28
   144bc:	ldr	lr, [sp, #176]	; 0xb0
   144c0:	str	r0, [sp, #68]	; 0x44
   144c4:	b	1406c <__assert_fail@plt+0x2b14>
   144c8:	ldr	r3, [sp, #40]	; 0x28
   144cc:	cmp	r3, #0
   144d0:	beq	15178 <__assert_fail@plt+0x3c20>
   144d4:	mov	r3, #1
   144d8:	str	r3, [sp, #68]	; 0x44
   144dc:	ldr	r3, [pc, #3708]	; 15360 <__assert_fail@plt+0x3e08>
   144e0:	str	r3, [sp, #72]	; 0x48
   144e4:	mov	r8, #0
   144e8:	ldr	r1, [sp, #56]	; 0x38
   144ec:	ldr	r2, [sp, #176]	; 0xb0
   144f0:	ldr	ip, [sp, #40]	; 0x28
   144f4:	ldr	lr, [sp, #176]	; 0xb0
   144f8:	b	1406c <__assert_fail@plt+0x2b14>
   144fc:	ldr	r3, [sp, #40]	; 0x28
   14500:	cmp	r3, #0
   14504:	beq	151fc <__assert_fail@plt+0x3ca4>
   14508:	str	r3, [sp, #56]	; 0x38
   1450c:	mov	r3, #1
   14510:	str	r3, [sp, #68]	; 0x44
   14514:	ldr	r3, [pc, #3656]	; 15364 <__assert_fail@plt+0x3e0c>
   14518:	b	144e0 <__assert_fail@plt+0x2f88>
   1451c:	ldr	r3, [sp, #40]	; 0x28
   14520:	cmp	r3, #0
   14524:	mov	r3, #1
   14528:	streq	r3, [sp, #56]	; 0x38
   1452c:	beq	15178 <__assert_fail@plt+0x3c20>
   14530:	str	r3, [sp, #68]	; 0x44
   14534:	ldr	r3, [pc, #3620]	; 15360 <__assert_fail@plt+0x3e08>
   14538:	mov	r8, #0
   1453c:	str	r3, [sp, #72]	; 0x48
   14540:	b	14388 <__assert_fail@plt+0x2e30>
   14544:	ldr	r3, [sp, #24]
   14548:	ldr	r6, [sp, #48]	; 0x30
   1454c:	cmn	r3, #1
   14550:	beq	14bac <__assert_fail@plt+0x3654>
   14554:	subs	r3, r3, #1
   14558:	movne	r3, #1
   1455c:	cmp	r3, #0
   14560:	beq	1492c <__assert_fail@plt+0x33d4>
   14564:	ldr	r1, [sp, #52]	; 0x34
   14568:	mov	r7, r3
   1456c:	mov	r3, #0
   14570:	str	r3, [sp, #32]
   14574:	ldr	r3, [sp, #60]	; 0x3c
   14578:	orr	r2, r1, r3
   1457c:	ldr	r3, [sp, #40]	; 0x28
   14580:	eor	r2, r2, #1
   14584:	orr	r2, r3, r2
   14588:	tst	r2, #255	; 0xff
   1458c:	bne	14eb0 <__assert_fail@plt+0x3958>
   14590:	cmp	r6, #0
   14594:	bne	14770 <__assert_fail@plt+0x3218>
   14598:	ldr	r3, [sp, #36]	; 0x24
   1459c:	add	sl, sl, #1
   145a0:	and	r3, r3, r7
   145a4:	uxtb	r6, r3
   145a8:	cmp	r6, #0
   145ac:	beq	145d8 <__assert_fail@plt+0x3080>
   145b0:	cmp	fp, r8
   145b4:	movhi	r3, #39	; 0x27
   145b8:	strbhi	r3, [r9, r8]
   145bc:	add	r3, r8, #1
   145c0:	cmp	fp, r3
   145c4:	movhi	r2, #39	; 0x27
   145c8:	add	r8, r8, #2
   145cc:	strbhi	r2, [r9, r3]
   145d0:	mov	r3, #0
   145d4:	str	r3, [sp, #36]	; 0x24
   145d8:	ldr	r2, [sp, #32]
   145dc:	cmp	r8, fp
   145e0:	ldr	r3, [sp, #28]
   145e4:	strbcc	r4, [r9, r8]
   145e8:	cmp	r2, #0
   145ec:	moveq	r3, #0
   145f0:	str	r3, [sp, #28]
   145f4:	ldr	r3, [sp, #24]
   145f8:	add	r8, r8, #1
   145fc:	cmn	r3, #1
   14600:	bne	140d8 <__assert_fail@plt+0x2b80>
   14604:	ldr	r3, [sp, #44]	; 0x2c
   14608:	ldrb	r3, [r3, sl]
   1460c:	adds	r7, r3, #0
   14610:	movne	r7, #1
   14614:	cmp	r7, #0
   14618:	bne	140e8 <__assert_fail@plt+0x2b90>
   1461c:	ldr	r3, [sp, #64]	; 0x40
   14620:	cmp	r8, #0
   14624:	movne	r3, #0
   14628:	andeq	r3, r3, #1
   1462c:	cmp	r3, #0
   14630:	str	r3, [sp, #64]	; 0x40
   14634:	bne	150d8 <__assert_fail@plt+0x3b80>
   14638:	ldr	r3, [sp, #40]	; 0x28
   1463c:	ldr	r2, [sp, #52]	; 0x34
   14640:	eor	r3, r3, #1
   14644:	ands	r2, r2, r3
   14648:	beq	15504 <__assert_fail@plt+0x3fac>
   1464c:	ldr	r3, [sp, #76]	; 0x4c
   14650:	cmp	r3, #0
   14654:	beq	154d4 <__assert_fail@plt+0x3f7c>
   14658:	ldr	r3, [sp, #28]
   1465c:	cmp	r3, #0
   14660:	bne	15490 <__assert_fail@plt+0x3f38>
   14664:	ldr	r2, [sp, #84]	; 0x54
   14668:	clz	r3, fp
   1466c:	cmp	r2, #0
   14670:	lsr	r3, r3, #5
   14674:	moveq	r3, #0
   14678:	cmp	r3, #0
   1467c:	beq	15430 <__assert_fail@plt+0x3ed8>
   14680:	mov	fp, r2
   14684:	str	r3, [sp, #76]	; 0x4c
   14688:	b	14014 <__assert_fail@plt+0x2abc>
   1468c:	ldr	r3, [sp, #176]	; 0xb0
   14690:	ldr	r6, [sp, #48]	; 0x30
   14694:	cmp	r3, #2
   14698:	beq	14bd0 <__assert_fail@plt+0x3678>
   1469c:	ldr	r3, [sp, #88]	; 0x58
   146a0:	cmp	r3, #0
   146a4:	beq	15154 <__assert_fail@plt+0x3bfc>
   146a8:	mov	r3, #0
   146ac:	add	sl, sl, #1
   146b0:	ldr	r6, [sp, #36]	; 0x24
   146b4:	str	r3, [sp, #32]
   146b8:	mov	r4, #92	; 0x5c
   146bc:	b	145a8 <__assert_fail@plt+0x3050>
   146c0:	ldr	r3, [sp, #176]	; 0xb0
   146c4:	ldr	r6, [sp, #48]	; 0x30
   146c8:	cmp	r3, #2
   146cc:	beq	14c00 <__assert_fail@plt+0x36a8>
   146d0:	cmp	r3, #5
   146d4:	bne	15164 <__assert_fail@plt+0x3c0c>
   146d8:	ldr	r3, [sp, #100]	; 0x64
   146dc:	cmp	r3, #0
   146e0:	beq	151c8 <__assert_fail@plt+0x3c70>
   146e4:	ldr	r2, [sp, #24]
   146e8:	add	r3, sl, #2
   146ec:	cmp	r2, r3
   146f0:	bls	14700 <__assert_fail@plt+0x31a8>
   146f4:	ldrb	r4, [r5, #1]
   146f8:	cmp	r4, #63	; 0x3f
   146fc:	beq	15370 <__assert_fail@plt+0x3e18>
   14700:	mov	r1, #0
   14704:	str	r1, [sp, #32]
   14708:	mov	r4, #63	; 0x3f
   1470c:	b	14574 <__assert_fail@plt+0x301c>
   14710:	ldr	r3, [sp, #176]	; 0xb0
   14714:	ldr	r6, [sp, #48]	; 0x30
   14718:	cmp	r3, #2
   1471c:	beq	14c2c <__assert_fail@plt+0x36d4>
   14720:	str	r7, [sp, #32]
   14724:	str	r7, [sp, #76]	; 0x4c
   14728:	mov	r1, #0
   1472c:	mov	r4, #39	; 0x27
   14730:	b	14574 <__assert_fail@plt+0x301c>
   14734:	ldr	r6, [sp, #48]	; 0x30
   14738:	ldr	r1, [sp, #52]	; 0x34
   1473c:	str	r7, [sp, #32]
   14740:	b	14574 <__assert_fail@plt+0x301c>
   14744:	ldr	r6, [sp, #48]	; 0x30
   14748:	ldr	r1, [sp, #52]	; 0x34
   1474c:	mov	r4, #12
   14750:	mov	r3, #102	; 0x66
   14754:	ldr	r2, [sp, #56]	; 0x38
   14758:	cmp	r2, #0
   1475c:	streq	r2, [sp, #32]
   14760:	beq	14574 <__assert_fail@plt+0x301c>
   14764:	mov	r4, r3
   14768:	mov	r3, #0
   1476c:	str	r3, [sp, #32]
   14770:	ldr	r3, [sp, #40]	; 0x28
   14774:	cmp	r3, #0
   14778:	bne	14ee8 <__assert_fail@plt+0x3990>
   1477c:	ldr	r3, [sp, #36]	; 0x24
   14780:	eor	r3, r3, #1
   14784:	and	r3, r3, r1
   14788:	ands	r3, r3, #255	; 0xff
   1478c:	beq	147c4 <__assert_fail@plt+0x326c>
   14790:	cmp	fp, r8
   14794:	movhi	r2, #39	; 0x27
   14798:	strbhi	r2, [r9, r8]
   1479c:	add	r2, r8, #1
   147a0:	cmp	fp, r2
   147a4:	movhi	r1, #36	; 0x24
   147a8:	strbhi	r1, [r9, r2]
   147ac:	add	r2, r8, #2
   147b0:	cmp	fp, r2
   147b4:	add	r8, r8, #3
   147b8:	movhi	r1, #39	; 0x27
   147bc:	strbhi	r1, [r9, r2]
   147c0:	str	r3, [sp, #36]	; 0x24
   147c4:	cmp	fp, r8
   147c8:	movhi	r3, #92	; 0x5c
   147cc:	strbhi	r3, [r9, r8]
   147d0:	add	sl, sl, #1
   147d4:	add	r8, r8, #1
   147d8:	b	145d8 <__assert_fail@plt+0x3080>
   147dc:	ldr	r6, [sp, #48]	; 0x30
   147e0:	mov	r4, #10
   147e4:	mov	r3, #110	; 0x6e
   147e8:	ldr	r2, [sp, #64]	; 0x40
   147ec:	cmp	r2, #0
   147f0:	bne	15270 <__assert_fail@plt+0x3d18>
   147f4:	ldr	r1, [sp, #52]	; 0x34
   147f8:	b	14754 <__assert_fail@plt+0x31fc>
   147fc:	ldr	r6, [sp, #48]	; 0x30
   14800:	ldr	r1, [sp, #52]	; 0x34
   14804:	mov	r3, #116	; 0x74
   14808:	b	14754 <__assert_fail@plt+0x31fc>
   1480c:	ldr	r6, [sp, #48]	; 0x30
   14810:	ldr	r1, [sp, #52]	; 0x34
   14814:	mov	r4, #11
   14818:	mov	r3, #118	; 0x76
   1481c:	b	14754 <__assert_fail@plt+0x31fc>
   14820:	ldr	r6, [sp, #48]	; 0x30
   14824:	ldr	r1, [sp, #52]	; 0x34
   14828:	mov	r4, #8
   1482c:	mov	r3, #98	; 0x62
   14830:	b	14754 <__assert_fail@plt+0x31fc>
   14834:	ldr	r6, [sp, #48]	; 0x30
   14838:	ldr	r1, [sp, #52]	; 0x34
   1483c:	mov	r4, #7
   14840:	mov	r3, #97	; 0x61
   14844:	b	14754 <__assert_fail@plt+0x31fc>
   14848:	ldr	r3, [sp, #56]	; 0x38
   1484c:	ldr	r6, [sp, #48]	; 0x30
   14850:	cmp	r3, #0
   14854:	beq	14d18 <__assert_fail@plt+0x37c0>
   14858:	ldr	r3, [sp, #40]	; 0x28
   1485c:	cmp	r3, #0
   14860:	bne	1534c <__assert_fail@plt+0x3df4>
   14864:	ldr	r3, [sp, #36]	; 0x24
   14868:	ldr	r2, [sp, #52]	; 0x34
   1486c:	eor	r3, r3, #1
   14870:	ands	r3, r2, r3
   14874:	moveq	r2, r8
   14878:	beq	148b0 <__assert_fail@plt+0x3358>
   1487c:	cmp	fp, r8
   14880:	movhi	r2, #39	; 0x27
   14884:	strbhi	r2, [r9, r8]
   14888:	add	r2, r8, #1
   1488c:	cmp	fp, r2
   14890:	movhi	r1, #36	; 0x24
   14894:	strbhi	r1, [r9, r2]
   14898:	add	r2, r8, #2
   1489c:	cmp	fp, r2
   148a0:	movhi	r1, #39	; 0x27
   148a4:	strbhi	r1, [r9, r2]
   148a8:	add	r2, r8, #3
   148ac:	str	r3, [sp, #36]	; 0x24
   148b0:	cmp	fp, r2
   148b4:	movhi	r3, #92	; 0x5c
   148b8:	strbhi	r3, [r9, r2]
   148bc:	ldr	r3, [sp, #92]	; 0x5c
   148c0:	add	r8, r2, #1
   148c4:	cmp	r3, #0
   148c8:	beq	1524c <__assert_fail@plt+0x3cf4>
   148cc:	ldr	r1, [sp, #24]
   148d0:	add	r3, sl, #1
   148d4:	cmp	r1, r3
   148d8:	bls	14910 <__assert_fail@plt+0x33b8>
   148dc:	ldr	r1, [sp, #44]	; 0x2c
   148e0:	ldrb	r3, [r1, r3]
   148e4:	sub	r3, r3, #48	; 0x30
   148e8:	cmp	r3, #9
   148ec:	bhi	14910 <__assert_fail@plt+0x33b8>
   148f0:	cmp	fp, r8
   148f4:	movhi	r3, #48	; 0x30
   148f8:	strbhi	r3, [r9, r8]
   148fc:	add	r3, r2, #2
   14900:	cmp	fp, r3
   14904:	add	r8, r2, #3
   14908:	movhi	r1, #48	; 0x30
   1490c:	strbhi	r1, [r9, r3]
   14910:	ldr	r3, [sp, #40]	; 0x28
   14914:	ldr	r1, [sp, #52]	; 0x34
   14918:	mov	r7, r3
   1491c:	str	r3, [sp, #32]
   14920:	mov	r4, #48	; 0x30
   14924:	b	14574 <__assert_fail@plt+0x301c>
   14928:	ldr	r6, [sp, #48]	; 0x30
   1492c:	cmp	sl, #0
   14930:	streq	r7, [sp, #32]
   14934:	beq	14954 <__assert_fail@plt+0x33fc>
   14938:	mov	r3, #0
   1493c:	ldr	r1, [sp, #52]	; 0x34
   14940:	str	r3, [sp, #32]
   14944:	b	14574 <__assert_fail@plt+0x301c>
   14948:	ldr	r6, [sp, #48]	; 0x30
   1494c:	mov	r3, #0
   14950:	str	r3, [sp, #32]
   14954:	ldr	r3, [sp, #64]	; 0x40
   14958:	cmp	r3, #0
   1495c:	bne	150d8 <__assert_fail@plt+0x3b80>
   14960:	ldr	r1, [sp, #52]	; 0x34
   14964:	b	14574 <__assert_fail@plt+0x301c>
   14968:	ldr	r3, [sp, #48]	; 0x30
   1496c:	mov	r6, r3
   14970:	str	r3, [sp, #32]
   14974:	b	14954 <__assert_fail@plt+0x33fc>
   14978:	ldr	r6, [sp, #48]	; 0x30
   1497c:	mov	r4, #13
   14980:	mov	r3, #114	; 0x72
   14984:	b	147e8 <__assert_fail@plt+0x3290>
   14988:	ldr	r3, [sp, #44]	; 0x2c
   1498c:	add	r5, r3, sl
   14990:	ldrb	r4, [r5]
   14994:	cmp	r4, #126	; 0x7e
   14998:	ldrls	pc, [pc, r4, lsl #2]
   1499c:	b	14d38 <__assert_fail@plt+0x37e0>
   149a0:	andeq	r4, r1, r8, lsl #26
   149a4:	andeq	r4, r1, r8, lsr sp
   149a8:	andeq	r4, r1, r8, lsr sp
   149ac:	andeq	r4, r1, r8, lsr sp
   149b0:	andeq	r4, r1, r8, lsr sp
   149b4:	andeq	r4, r1, r8, lsr sp
   149b8:	andeq	r4, r1, r8, lsr sp
   149bc:	andeq	r4, r1, r0, lsl #26
   149c0:	strdeq	r4, [r1], -r8
   149c4:	andeq	r4, r1, ip, ror #25
   149c8:	andeq	r4, r1, r4, ror #25
   149cc:	ldrdeq	r4, [r1], -ip
   149d0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   149d4:	andeq	r4, r1, ip, asr #25
   149d8:	andeq	r4, r1, r8, lsr sp
   149dc:	andeq	r4, r1, r8, lsr sp
   149e0:	andeq	r4, r1, r8, lsr sp
   149e4:	andeq	r4, r1, r8, lsr sp
   149e8:	andeq	r4, r1, r8, lsr sp
   149ec:	andeq	r4, r1, r8, lsr sp
   149f0:	andeq	r4, r1, r8, lsr sp
   149f4:	andeq	r4, r1, r8, lsr sp
   149f8:	andeq	r4, r1, r8, lsr sp
   149fc:	andeq	r4, r1, r8, lsr sp
   14a00:	andeq	r4, r1, r8, lsr sp
   14a04:	andeq	r4, r1, r8, lsr sp
   14a08:	andeq	r4, r1, r8, lsr sp
   14a0c:	andeq	r4, r1, r8, lsr sp
   14a10:	andeq	r4, r1, r8, lsr sp
   14a14:	andeq	r4, r1, r8, lsr sp
   14a18:	andeq	r4, r1, r8, lsr sp
   14a1c:	andeq	r4, r1, r8, lsr sp
   14a20:	andeq	r4, r1, r0, asr #25
   14a24:			; <UNDEFINED> instruction: 0x00014cb8
   14a28:			; <UNDEFINED> instruction: 0x00014cb8
   14a2c:			; <UNDEFINED> instruction: 0x00014cb0
   14a30:			; <UNDEFINED> instruction: 0x00014cb8
   14a34:	andeq	r4, r1, r8, lsr #25
   14a38:			; <UNDEFINED> instruction: 0x00014cb8
   14a3c:	andeq	r4, r1, ip, lsl ip
   14a40:			; <UNDEFINED> instruction: 0x00014cb8
   14a44:			; <UNDEFINED> instruction: 0x00014cb8
   14a48:			; <UNDEFINED> instruction: 0x00014cb8
   14a4c:	andeq	r4, r1, r8, lsr #25
   14a50:	andeq	r4, r1, r8, lsr #25
   14a54:	andeq	r4, r1, r8, lsr #25
   14a58:	andeq	r4, r1, r8, lsr #25
   14a5c:	andeq	r4, r1, r8, lsr #25
   14a60:	andeq	r4, r1, r8, lsr #25
   14a64:	andeq	r4, r1, r8, lsr #25
   14a68:	andeq	r4, r1, r8, lsr #25
   14a6c:	andeq	r4, r1, r8, lsr #25
   14a70:	andeq	r4, r1, r8, lsr #25
   14a74:	andeq	r4, r1, r8, lsr #25
   14a78:	andeq	r4, r1, r8, lsr #25
   14a7c:	andeq	r4, r1, r8, lsr #25
   14a80:	andeq	r4, r1, r8, lsr #25
   14a84:	andeq	r4, r1, r8, lsr #25
   14a88:	andeq	r4, r1, r8, lsr #25
   14a8c:			; <UNDEFINED> instruction: 0x00014cb8
   14a90:			; <UNDEFINED> instruction: 0x00014cb8
   14a94:			; <UNDEFINED> instruction: 0x00014cb8
   14a98:			; <UNDEFINED> instruction: 0x00014cb8
   14a9c:	strdeq	r4, [r1], -r0
   14aa0:	andeq	r4, r1, r8, lsr sp
   14aa4:	andeq	r4, r1, r8, lsr #25
   14aa8:	andeq	r4, r1, r8, lsr #25
   14aac:	andeq	r4, r1, r8, lsr #25
   14ab0:	andeq	r4, r1, r8, lsr #25
   14ab4:	andeq	r4, r1, r8, lsr #25
   14ab8:	andeq	r4, r1, r8, lsr #25
   14abc:	andeq	r4, r1, r8, lsr #25
   14ac0:	andeq	r4, r1, r8, lsr #25
   14ac4:	andeq	r4, r1, r8, lsr #25
   14ac8:	andeq	r4, r1, r8, lsr #25
   14acc:	andeq	r4, r1, r8, lsr #25
   14ad0:	andeq	r4, r1, r8, lsr #25
   14ad4:	andeq	r4, r1, r8, lsr #25
   14ad8:	andeq	r4, r1, r8, lsr #25
   14adc:	andeq	r4, r1, r8, lsr #25
   14ae0:	andeq	r4, r1, r8, lsr #25
   14ae4:	andeq	r4, r1, r8, lsr #25
   14ae8:	andeq	r4, r1, r8, lsr #25
   14aec:	andeq	r4, r1, r8, lsr #25
   14af0:	andeq	r4, r1, r8, lsr #25
   14af4:	andeq	r4, r1, r8, lsr #25
   14af8:	andeq	r4, r1, r8, lsr #25
   14afc:	andeq	r4, r1, r8, lsr #25
   14b00:	andeq	r4, r1, r8, lsr #25
   14b04:	andeq	r4, r1, r8, lsr #25
   14b08:	andeq	r4, r1, r8, lsr #25
   14b0c:			; <UNDEFINED> instruction: 0x00014cb8
   14b10:	andeq	r4, r1, r0, asr #23
   14b14:	andeq	r4, r1, r8, lsr #25
   14b18:			; <UNDEFINED> instruction: 0x00014cb8
   14b1c:	andeq	r4, r1, r8, lsr #25
   14b20:			; <UNDEFINED> instruction: 0x00014cb8
   14b24:	andeq	r4, r1, r8, lsr #25
   14b28:	andeq	r4, r1, r8, lsr #25
   14b2c:	andeq	r4, r1, r8, lsr #25
   14b30:	andeq	r4, r1, r8, lsr #25
   14b34:	andeq	r4, r1, r8, lsr #25
   14b38:	andeq	r4, r1, r8, lsr #25
   14b3c:	andeq	r4, r1, r8, lsr #25
   14b40:	andeq	r4, r1, r8, lsr #25
   14b44:	andeq	r4, r1, r8, lsr #25
   14b48:	andeq	r4, r1, r8, lsr #25
   14b4c:	andeq	r4, r1, r8, lsr #25
   14b50:	andeq	r4, r1, r8, lsr #25
   14b54:	andeq	r4, r1, r8, lsr #25
   14b58:	andeq	r4, r1, r8, lsr #25
   14b5c:	andeq	r4, r1, r8, lsr #25
   14b60:	andeq	r4, r1, r8, lsr #25
   14b64:	andeq	r4, r1, r8, lsr #25
   14b68:	andeq	r4, r1, r8, lsr #25
   14b6c:	andeq	r4, r1, r8, lsr #25
   14b70:	andeq	r4, r1, r8, lsr #25
   14b74:	andeq	r4, r1, r8, lsr #25
   14b78:	andeq	r4, r1, r8, lsr #25
   14b7c:	andeq	r4, r1, r8, lsr #25
   14b80:	andeq	r4, r1, r8, lsr #25
   14b84:	andeq	r4, r1, r8, lsr #25
   14b88:	andeq	r4, r1, r8, lsr #25
   14b8c:	muleq	r1, ip, fp
   14b90:			; <UNDEFINED> instruction: 0x00014cb8
   14b94:	muleq	r1, ip, fp
   14b98:			; <UNDEFINED> instruction: 0x00014cb0
   14b9c:	ldr	r3, [sp, #24]
   14ba0:	mov	r6, #0
   14ba4:	cmn	r3, #1
   14ba8:	bne	14554 <__assert_fail@plt+0x2ffc>
   14bac:	ldr	r3, [sp, #44]	; 0x2c
   14bb0:	ldrb	r3, [r3, #1]
   14bb4:	adds	r3, r3, #0
   14bb8:	movne	r3, #1
   14bbc:	b	1455c <__assert_fail@plt+0x3004>
   14bc0:	ldr	r3, [sp, #176]	; 0xb0
   14bc4:	mov	r6, #0
   14bc8:	cmp	r3, #2
   14bcc:	bne	1469c <__assert_fail@plt+0x3144>
   14bd0:	ldr	r3, [sp, #64]	; 0x40
   14bd4:	cmp	r3, #0
   14bd8:	bne	15410 <__assert_fail@plt+0x3eb8>
   14bdc:	add	sl, sl, #1
   14be0:	ldr	r6, [sp, #36]	; 0x24
   14be4:	str	r3, [sp, #32]
   14be8:	mov	r4, #92	; 0x5c
   14bec:	b	145a8 <__assert_fail@plt+0x3050>
   14bf0:	ldr	r3, [sp, #176]	; 0xb0
   14bf4:	mov	r6, #0
   14bf8:	cmp	r3, #2
   14bfc:	bne	146d0 <__assert_fail@plt+0x3178>
   14c00:	ldr	r3, [sp, #40]	; 0x28
   14c04:	cmp	r3, #0
   14c08:	bne	14eec <__assert_fail@plt+0x3994>
   14c0c:	mov	r1, r7
   14c10:	str	r3, [sp, #32]
   14c14:	mov	r4, #63	; 0x3f
   14c18:	b	14574 <__assert_fail@plt+0x301c>
   14c1c:	ldr	r3, [sp, #176]	; 0xb0
   14c20:	mov	r6, #0
   14c24:	cmp	r3, #2
   14c28:	bne	14720 <__assert_fail@plt+0x31c8>
   14c2c:	ldr	r3, [sp, #64]	; 0x40
   14c30:	cmp	r3, #0
   14c34:	bne	15410 <__assert_fail@plt+0x3eb8>
   14c38:	ldr	r2, [sp, #84]	; 0x54
   14c3c:	adds	r3, fp, #0
   14c40:	movne	r3, #1
   14c44:	cmp	r2, #0
   14c48:	movne	r3, #0
   14c4c:	cmp	r3, #0
   14c50:	strne	fp, [sp, #84]	; 0x54
   14c54:	movne	fp, #0
   14c58:	bne	14c88 <__assert_fail@plt+0x3730>
   14c5c:	cmp	fp, r8
   14c60:	movhi	r3, #39	; 0x27
   14c64:	strbhi	r3, [r9, r8]
   14c68:	add	r3, r8, #1
   14c6c:	cmp	fp, r3
   14c70:	movhi	r2, #92	; 0x5c
   14c74:	strbhi	r2, [r9, r3]
   14c78:	add	r3, r8, #2
   14c7c:	cmp	fp, r3
   14c80:	movhi	r2, #39	; 0x27
   14c84:	strbhi	r2, [r9, r3]
   14c88:	ldr	r3, [sp, #64]	; 0x40
   14c8c:	add	r8, r8, #3
   14c90:	mov	r1, r7
   14c94:	str	r7, [sp, #32]
   14c98:	str	r7, [sp, #76]	; 0x4c
   14c9c:	str	r3, [sp, #36]	; 0x24
   14ca0:	mov	r4, #39	; 0x27
   14ca4:	b	14574 <__assert_fail@plt+0x301c>
   14ca8:	mov	r6, #0
   14cac:	b	14738 <__assert_fail@plt+0x31e0>
   14cb0:	mov	r6, #0
   14cb4:	b	1492c <__assert_fail@plt+0x33d4>
   14cb8:	mov	r6, #0
   14cbc:	b	1494c <__assert_fail@plt+0x33f4>
   14cc0:	str	r7, [sp, #32]
   14cc4:	mov	r6, #0
   14cc8:	b	14954 <__assert_fail@plt+0x33fc>
   14ccc:	mov	r6, #0
   14cd0:	b	1497c <__assert_fail@plt+0x3424>
   14cd4:	mov	r6, #0
   14cd8:	b	14748 <__assert_fail@plt+0x31f0>
   14cdc:	mov	r6, #0
   14ce0:	b	14810 <__assert_fail@plt+0x32b8>
   14ce4:	mov	r6, #0
   14ce8:	b	147e0 <__assert_fail@plt+0x3288>
   14cec:	mov	r6, #0
   14cf0:	mov	r3, #116	; 0x74
   14cf4:	b	147e8 <__assert_fail@plt+0x3290>
   14cf8:	mov	r6, #0
   14cfc:	b	14824 <__assert_fail@plt+0x32cc>
   14d00:	mov	r6, #0
   14d04:	b	14838 <__assert_fail@plt+0x32e0>
   14d08:	ldr	r3, [sp, #56]	; 0x38
   14d0c:	mov	r6, #0
   14d10:	cmp	r3, #0
   14d14:	bne	14858 <__assert_fail@plt+0x3300>
   14d18:	ldr	r3, [sp, #96]	; 0x60
   14d1c:	cmp	r3, #0
   14d20:	addne	sl, sl, #1
   14d24:	bne	140cc <__assert_fail@plt+0x2b74>
   14d28:	ldr	r1, [sp, #52]	; 0x34
   14d2c:	str	r3, [sp, #32]
   14d30:	mov	r4, r3
   14d34:	b	14574 <__assert_fail@plt+0x301c>
   14d38:	mov	r6, #0
   14d3c:	ldr	r3, [sp, #80]	; 0x50
   14d40:	cmp	r3, #1
   14d44:	bne	14f34 <__assert_fail@plt+0x39dc>
   14d48:	bl	113fc <__ctype_b_loc@plt>
   14d4c:	ldr	r2, [sp, #80]	; 0x50
   14d50:	sxth	r3, r4
   14d54:	mov	r1, r2
   14d58:	lsl	r3, r3, #1
   14d5c:	ldr	r2, [r0]
   14d60:	ldrh	r3, [r2, r3]
   14d64:	and	r3, r3, #16384	; 0x4000
   14d68:	cmp	r3, #0
   14d6c:	movne	r3, #1
   14d70:	moveq	r3, #0
   14d74:	str	r3, [sp, #32]
   14d78:	moveq	r3, #1
   14d7c:	movne	r3, #0
   14d80:	ldr	r2, [sp, #56]	; 0x38
   14d84:	and	r3, r3, r2
   14d88:	ands	r3, r3, #255	; 0xff
   14d8c:	beq	14960 <__assert_fail@plt+0x3408>
   14d90:	add	r1, sl, r1
   14d94:	mov	r0, #0
   14d98:	ldr	r7, [sp, #40]	; 0x28
   14d9c:	ldr	r2, [sp, #36]	; 0x24
   14da0:	ldr	lr, [sp, #52]	; 0x34
   14da4:	b	14e54 <__assert_fail@plt+0x38fc>
   14da8:	cmp	r7, #0
   14dac:	bne	151a8 <__assert_fail@plt+0x3c50>
   14db0:	eor	r0, r2, #1
   14db4:	ands	r0, lr, r0
   14db8:	beq	14df0 <__assert_fail@plt+0x3898>
   14dbc:	cmp	fp, r8
   14dc0:	movhi	r2, #39	; 0x27
   14dc4:	strbhi	r2, [r9, r8]
   14dc8:	add	r2, r8, #1
   14dcc:	cmp	fp, r2
   14dd0:	movhi	ip, #36	; 0x24
   14dd4:	strbhi	ip, [r9, r2]
   14dd8:	add	r2, r8, #2
   14ddc:	cmp	fp, r2
   14de0:	movhi	ip, #39	; 0x27
   14de4:	strbhi	ip, [r9, r2]
   14de8:	add	r8, r8, #3
   14dec:	mov	r2, r0
   14df0:	cmp	fp, r8
   14df4:	movhi	r0, #92	; 0x5c
   14df8:	strbhi	r0, [r9, r8]
   14dfc:	add	r0, r8, #1
   14e00:	cmp	fp, r0
   14e04:	lsrhi	ip, r4, #6
   14e08:	addhi	ip, ip, #48	; 0x30
   14e0c:	strbhi	ip, [r9, r0]
   14e10:	add	ip, r8, #2
   14e14:	cmp	fp, ip
   14e18:	lsrhi	r0, r4, #3
   14e1c:	andhi	r0, r0, #7
   14e20:	addhi	r0, r0, #48	; 0x30
   14e24:	add	sl, sl, #1
   14e28:	strbhi	r0, [r9, ip]
   14e2c:	and	r4, r4, #7
   14e30:	cmp	sl, r1
   14e34:	add	r4, r4, #48	; 0x30
   14e38:	add	r8, r8, #3
   14e3c:	bcs	151c0 <__assert_fail@plt+0x3c68>
   14e40:	mov	r0, r3
   14e44:	cmp	fp, r8
   14e48:	strbhi	r4, [r9, r8]
   14e4c:	ldrb	r4, [r5, #1]!
   14e50:	add	r8, r8, #1
   14e54:	cmp	r3, #0
   14e58:	bne	14da8 <__assert_fail@plt+0x3850>
   14e5c:	cmp	r6, #0
   14e60:	bne	14f04 <__assert_fail@plt+0x39ac>
   14e64:	eor	r6, r0, #1
   14e68:	and	r6, r6, r2
   14e6c:	add	sl, sl, #1
   14e70:	cmp	r1, sl
   14e74:	uxtb	r6, r6
   14e78:	bls	14f2c <__assert_fail@plt+0x39d4>
   14e7c:	cmp	r6, #0
   14e80:	beq	14e44 <__assert_fail@plt+0x38ec>
   14e84:	cmp	fp, r8
   14e88:	movhi	r2, #39	; 0x27
   14e8c:	strbhi	r2, [r9, r8]
   14e90:	add	r2, r8, #1
   14e94:	cmp	fp, r2
   14e98:	movhi	ip, #39	; 0x27
   14e9c:	strbhi	ip, [r9, r2]
   14ea0:	add	r8, r8, #2
   14ea4:	mov	r6, r3
   14ea8:	mov	r2, r3
   14eac:	b	14e44 <__assert_fail@plt+0x38ec>
   14eb0:	ldr	r3, [sp, #184]	; 0xb8
   14eb4:	cmp	r3, #0
   14eb8:	beq	14590 <__assert_fail@plt+0x3038>
   14ebc:	lsr	r2, r4, #5
   14ec0:	mov	r0, r3
   14ec4:	uxtb	r2, r2
   14ec8:	and	r3, r4, #31
   14ecc:	ldr	r2, [r0, r2, lsl #2]
   14ed0:	lsr	r3, r2, r3
   14ed4:	tst	r3, #1
   14ed8:	beq	14590 <__assert_fail@plt+0x3038>
   14edc:	ldr	r3, [sp, #40]	; 0x28
   14ee0:	cmp	r3, #0
   14ee4:	beq	1477c <__assert_fail@plt+0x3224>
   14ee8:	mov	r3, r1
   14eec:	str	r3, [sp, #64]	; 0x40
   14ef0:	mov	sl, r9
   14ef4:	ldr	r3, [sp, #56]	; 0x38
   14ef8:	mov	r9, fp
   14efc:	ldr	r2, [sp, #64]	; 0x40
   14f00:	b	150f0 <__assert_fail@plt+0x3b98>
   14f04:	cmp	fp, r8
   14f08:	eor	r6, r0, #1
   14f0c:	movhi	ip, #92	; 0x5c
   14f10:	and	r6, r6, r2
   14f14:	add	sl, sl, #1
   14f18:	strbhi	ip, [r9, r8]
   14f1c:	cmp	r1, sl
   14f20:	add	r8, r8, #1
   14f24:	uxtb	r6, r6
   14f28:	bhi	14e7c <__assert_fail@plt+0x3924>
   14f2c:	str	r2, [sp, #36]	; 0x24
   14f30:	b	145a8 <__assert_fail@plt+0x3050>
   14f34:	ldr	r3, [sp, #24]
   14f38:	cmn	r3, #1
   14f3c:	mov	r3, #0
   14f40:	str	r3, [sp, #128]	; 0x80
   14f44:	str	r3, [sp, #132]	; 0x84
   14f48:	beq	1523c <__assert_fail@plt+0x3ce4>
   14f4c:	mov	r2, r7
   14f50:	mov	r3, #0
   14f54:	str	r7, [sp, #104]	; 0x68
   14f58:	str	r5, [sp, #116]	; 0x74
   14f5c:	mov	r7, r3
   14f60:	mov	r5, r2
   14f64:	str	r4, [sp, #32]
   14f68:	str	r6, [sp, #108]	; 0x6c
   14f6c:	str	r8, [sp, #112]	; 0x70
   14f70:	ldr	r3, [sp, #44]	; 0x2c
   14f74:	add	r6, sl, r7
   14f78:	add	r4, r3, r6
   14f7c:	ldr	r3, [sp, #24]
   14f80:	mov	r1, r4
   14f84:	sub	r2, r3, r6
   14f88:	add	r0, sp, #124	; 0x7c
   14f8c:	add	r3, sp, #128	; 0x80
   14f90:	bl	2ba20 <__assert_fail@plt+0x1a4c8>
   14f94:	subs	r8, r0, #0
   14f98:	beq	15320 <__assert_fail@plt+0x3dc8>
   14f9c:	cmn	r8, #1
   14fa0:	beq	152f8 <__assert_fail@plt+0x3da0>
   14fa4:	cmn	r8, #2
   14fa8:	beq	15290 <__assert_fail@plt+0x3d38>
   14fac:	ldr	r3, [sp, #64]	; 0x40
   14fb0:	cmp	r3, #0
   14fb4:	beq	15074 <__assert_fail@plt+0x3b1c>
   14fb8:	cmp	r8, #1
   14fbc:	beq	15074 <__assert_fail@plt+0x3b1c>
   14fc0:	sub	r3, r8, #1
   14fc4:	add	r6, r3, r6
   14fc8:	ldr	r3, [sp, #44]	; 0x2c
   14fcc:	add	r6, r3, r6
   14fd0:	ldrb	r3, [r4, #1]!
   14fd4:	sub	r3, r3, #91	; 0x5b
   14fd8:	cmp	r3, #33	; 0x21
   14fdc:	ldrls	pc, [pc, r3, lsl #2]
   14fe0:	b	1506c <__assert_fail@plt+0x3b14>
   14fe4:	ldrdeq	r5, [r1], -r8
   14fe8:	ldrdeq	r5, [r1], -r8
   14fec:	andeq	r5, r1, ip, rrx
   14ff0:	ldrdeq	r5, [r1], -r8
   14ff4:	andeq	r5, r1, ip, rrx
   14ff8:	ldrdeq	r5, [r1], -r8
   14ffc:	andeq	r5, r1, ip, rrx
   15000:	andeq	r5, r1, ip, rrx
   15004:	andeq	r5, r1, ip, rrx
   15008:	andeq	r5, r1, ip, rrx
   1500c:	andeq	r5, r1, ip, rrx
   15010:	andeq	r5, r1, ip, rrx
   15014:	andeq	r5, r1, ip, rrx
   15018:	andeq	r5, r1, ip, rrx
   1501c:	andeq	r5, r1, ip, rrx
   15020:	andeq	r5, r1, ip, rrx
   15024:	andeq	r5, r1, ip, rrx
   15028:	andeq	r5, r1, ip, rrx
   1502c:	andeq	r5, r1, ip, rrx
   15030:	andeq	r5, r1, ip, rrx
   15034:	andeq	r5, r1, ip, rrx
   15038:	andeq	r5, r1, ip, rrx
   1503c:	andeq	r5, r1, ip, rrx
   15040:	andeq	r5, r1, ip, rrx
   15044:	andeq	r5, r1, ip, rrx
   15048:	andeq	r5, r1, ip, rrx
   1504c:	andeq	r5, r1, ip, rrx
   15050:	andeq	r5, r1, ip, rrx
   15054:	andeq	r5, r1, ip, rrx
   15058:	andeq	r5, r1, ip, rrx
   1505c:	andeq	r5, r1, ip, rrx
   15060:	andeq	r5, r1, ip, rrx
   15064:	andeq	r5, r1, ip, rrx
   15068:	ldrdeq	r5, [r1], -r8
   1506c:	cmp	r6, r4
   15070:	bne	14fd0 <__assert_fail@plt+0x3a78>
   15074:	ldr	r0, [sp, #124]	; 0x7c
   15078:	bl	11324 <iswprint@plt>
   1507c:	add	r7, r7, r8
   15080:	cmp	r0, #0
   15084:	add	r0, sp, #128	; 0x80
   15088:	moveq	r5, #0
   1508c:	bl	11294 <mbsinit@plt>
   15090:	cmp	r0, #0
   15094:	beq	14f70 <__assert_fail@plt+0x3a18>
   15098:	ldr	r4, [sp, #32]
   1509c:	str	r5, [sp, #32]
   150a0:	ldr	r3, [sp, #32]
   150a4:	mov	r1, r7
   150a8:	eor	r3, r3, #1
   150ac:	ldr	r7, [sp, #104]	; 0x68
   150b0:	ldr	r6, [sp, #108]	; 0x6c
   150b4:	ldr	r8, [sp, #112]	; 0x70
   150b8:	ldr	r5, [sp, #116]	; 0x74
   150bc:	uxtb	r3, r3
   150c0:	cmp	r1, #1
   150c4:	bls	14d80 <__assert_fail@plt+0x3828>
   150c8:	ldr	r2, [sp, #56]	; 0x38
   150cc:	and	r3, r3, r2
   150d0:	uxtb	r3, r3
   150d4:	b	14d90 <__assert_fail@plt+0x3838>
   150d8:	mov	r3, #2
   150dc:	str	r3, [sp, #176]	; 0xb0
   150e0:	ldr	r2, [sp, #64]	; 0x40
   150e4:	ldr	r3, [sp, #56]	; 0x38
   150e8:	mov	sl, r9
   150ec:	mov	r9, fp
   150f0:	and	r3, r3, r2
   150f4:	tst	r3, #255	; 0xff
   150f8:	ldr	r3, [sp, #176]	; 0xb0
   150fc:	movne	r3, #4
   15100:	str	r3, [sp, #176]	; 0xb0
   15104:	ldr	r3, [sp, #180]	; 0xb4
   15108:	mov	ip, #0
   1510c:	bic	r3, r3, #2
   15110:	str	r3, [sp, #4]
   15114:	ldr	r3, [sp, #192]	; 0xc0
   15118:	ldr	r2, [sp, #44]	; 0x2c
   1511c:	str	r3, [sp, #16]
   15120:	ldr	r3, [sp, #188]	; 0xbc
   15124:	mov	r1, r9
   15128:	str	r3, [sp, #12]
   1512c:	ldr	r3, [sp, #176]	; 0xb0
   15130:	mov	r0, sl
   15134:	str	r3, [sp]
   15138:	str	ip, [sp, #8]
   1513c:	ldr	r3, [sp, #24]
   15140:	bl	13fa0 <__assert_fail@plt+0x2a48>
   15144:	mov	fp, r0
   15148:	mov	r0, fp
   1514c:	add	sp, sp, #140	; 0x8c
   15150:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15154:	mov	r4, #92	; 0x5c
   15158:	mov	r1, #0
   1515c:	mov	r3, r4
   15160:	b	14754 <__assert_fail@plt+0x31fc>
   15164:	mov	r3, #0
   15168:	ldr	r1, [sp, #52]	; 0x34
   1516c:	str	r3, [sp, #32]
   15170:	mov	r4, #63	; 0x3f
   15174:	b	14574 <__assert_fail@plt+0x301c>
   15178:	cmp	fp, #0
   1517c:	beq	151d8 <__assert_fail@plt+0x3c80>
   15180:	mov	r3, #39	; 0x27
   15184:	strb	r3, [r9]
   15188:	mov	r3, #0
   1518c:	str	r3, [sp, #40]	; 0x28
   15190:	mov	r3, #1
   15194:	str	r3, [sp, #68]	; 0x44
   15198:	ldr	r3, [pc, #448]	; 15360 <__assert_fail@plt+0x3e08>
   1519c:	mov	r8, #1
   151a0:	str	r3, [sp, #72]	; 0x48
   151a4:	b	14388 <__assert_fail@plt+0x2e30>
   151a8:	ldr	r3, [sp, #40]	; 0x28
   151ac:	mov	sl, r9
   151b0:	str	r3, [sp, #56]	; 0x38
   151b4:	mov	r9, fp
   151b8:	ldr	r2, [sp, #64]	; 0x40
   151bc:	b	150f0 <__assert_fail@plt+0x3b98>
   151c0:	str	r2, [sp, #36]	; 0x24
   151c4:	b	145d8 <__assert_fail@plt+0x3080>
   151c8:	mov	r1, #0
   151cc:	str	r3, [sp, #32]
   151d0:	mov	r4, #63	; 0x3f
   151d4:	b	14574 <__assert_fail@plt+0x301c>
   151d8:	ldr	r3, [pc, #384]	; 15360 <__assert_fail@plt+0x3e08>
   151dc:	str	r3, [sp, #72]	; 0x48
   151e0:	mov	r3, #0
   151e4:	str	r3, [sp, #40]	; 0x28
   151e8:	mov	r3, #1
   151ec:	str	r3, [sp, #68]	; 0x44
   151f0:	mov	r8, r3
   151f4:	b	14388 <__assert_fail@plt+0x2e30>
   151f8:	bl	11534 <abort@plt>
   151fc:	cmp	fp, #0
   15200:	beq	15260 <__assert_fail@plt+0x3d08>
   15204:	mov	r2, #1
   15208:	mov	r3, #34	; 0x22
   1520c:	strb	r3, [r9]
   15210:	mov	r8, r2
   15214:	mov	r3, r2
   15218:	str	r2, [sp, #68]	; 0x44
   1521c:	str	r3, [sp, #56]	; 0x38
   15220:	ldr	r3, [pc, #316]	; 15364 <__assert_fail@plt+0x3e0c>
   15224:	ldr	r1, [sp, #56]	; 0x38
   15228:	str	r3, [sp, #72]	; 0x48
   1522c:	ldr	r2, [sp, #176]	; 0xb0
   15230:	ldr	ip, [sp, #40]	; 0x28
   15234:	ldr	lr, [sp, #176]	; 0xb0
   15238:	b	1406c <__assert_fail@plt+0x2b14>
   1523c:	ldr	r0, [sp, #44]	; 0x2c
   15240:	bl	11414 <strlen@plt>
   15244:	str	r0, [sp, #24]
   15248:	b	14f4c <__assert_fail@plt+0x39f4>
   1524c:	mov	r7, #0
   15250:	ldr	r1, [sp, #52]	; 0x34
   15254:	str	r3, [sp, #32]
   15258:	mov	r4, #48	; 0x30
   1525c:	b	14574 <__assert_fail@plt+0x301c>
   15260:	mov	r3, #1
   15264:	str	r3, [sp, #68]	; 0x44
   15268:	mov	r8, r3
   1526c:	b	1521c <__assert_fail@plt+0x3cc4>
   15270:	mov	r3, #2
   15274:	mov	sl, r9
   15278:	str	r3, [sp, #176]	; 0xb0
   1527c:	mov	r9, fp
   15280:	ldr	r3, [sp, #56]	; 0x38
   15284:	b	150f0 <__assert_fail@plt+0x3b98>
   15288:	ldr	r6, [sp, #48]	; 0x30
   1528c:	b	14d3c <__assert_fail@plt+0x37e4>
   15290:	ldr	r0, [sp, #24]
   15294:	mov	ip, r6
   15298:	cmp	r0, ip
   1529c:	mov	r1, r7
   152a0:	mov	r2, r4
   152a4:	ldr	r7, [sp, #104]	; 0x68
   152a8:	ldr	r4, [sp, #32]
   152ac:	ldr	r6, [sp, #108]	; 0x6c
   152b0:	ldr	r8, [sp, #112]	; 0x70
   152b4:	ldr	r5, [sp, #116]	; 0x74
   152b8:	bls	152e8 <__assert_fail@plt+0x3d90>
   152bc:	ldrb	r3, [r2]
   152c0:	cmp	r3, #0
   152c4:	bne	152d8 <__assert_fail@plt+0x3d80>
   152c8:	b	153f8 <__assert_fail@plt+0x3ea0>
   152cc:	ldrb	r3, [r2, #1]!
   152d0:	cmp	r3, #0
   152d4:	beq	153f8 <__assert_fail@plt+0x3ea0>
   152d8:	add	r1, r1, #1
   152dc:	add	r3, sl, r1
   152e0:	cmp	r0, r3
   152e4:	bhi	152cc <__assert_fail@plt+0x3d74>
   152e8:	mov	r2, #0
   152ec:	mov	r3, r7
   152f0:	str	r2, [sp, #32]
   152f4:	b	150c0 <__assert_fail@plt+0x3b68>
   152f8:	mov	r1, r7
   152fc:	ldr	r7, [sp, #104]	; 0x68
   15300:	mov	r2, #0
   15304:	ldr	r4, [sp, #32]
   15308:	ldr	r6, [sp, #108]	; 0x6c
   1530c:	ldr	r8, [sp, #112]	; 0x70
   15310:	ldr	r5, [sp, #116]	; 0x74
   15314:	mov	r3, r7
   15318:	str	r2, [sp, #32]
   1531c:	b	150c0 <__assert_fail@plt+0x3b68>
   15320:	mov	r3, r5
   15324:	eor	r3, r3, #1
   15328:	ldr	r4, [sp, #32]
   1532c:	mov	r1, r7
   15330:	str	r5, [sp, #32]
   15334:	ldr	r7, [sp, #104]	; 0x68
   15338:	ldr	r6, [sp, #108]	; 0x6c
   1533c:	ldr	r8, [sp, #112]	; 0x70
   15340:	ldr	r5, [sp, #116]	; 0x74
   15344:	uxtb	r3, r3
   15348:	b	150c0 <__assert_fail@plt+0x3b68>
   1534c:	mov	sl, r9
   15350:	str	r3, [sp, #56]	; 0x38
   15354:	mov	r9, fp
   15358:	ldr	r2, [sp, #64]	; 0x40
   1535c:	b	150f0 <__assert_fail@plt+0x3b98>
   15360:	andeq	ip, r2, r0, asr #27
   15364:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   15368:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   1536c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   15370:	ldr	r2, [sp, #44]	; 0x2c
   15374:	ldrb	r1, [r2, r3]
   15378:	sub	r2, r1, #33	; 0x21
   1537c:	uxtb	r2, r2
   15380:	cmp	r2, #29
   15384:	bhi	15404 <__assert_fail@plt+0x3eac>
   15388:	ldr	r0, [pc, #-36]	; 1536c <__assert_fail@plt+0x3e14>
   1538c:	mov	ip, #1
   15390:	ands	r2, r0, ip, lsl r2
   15394:	beq	15424 <__assert_fail@plt+0x3ecc>
   15398:	ldr	r2, [sp, #40]	; 0x28
   1539c:	cmp	r2, #0
   153a0:	bne	15518 <__assert_fail@plt+0x3fc0>
   153a4:	add	r2, r8, #1
   153a8:	cmp	fp, r8
   153ac:	strbhi	r4, [r9, r8]
   153b0:	cmp	fp, r2
   153b4:	movhi	r0, #34	; 0x22
   153b8:	strbhi	r0, [r9, r2]
   153bc:	add	r2, r8, #2
   153c0:	cmp	fp, r2
   153c4:	movhi	r0, #34	; 0x22
   153c8:	strbhi	r0, [r9, r2]
   153cc:	add	r2, r8, #3
   153d0:	cmp	fp, r2
   153d4:	mov	sl, r3
   153d8:	ldr	r3, [sp, #40]	; 0x28
   153dc:	movhi	r0, #63	; 0x3f
   153e0:	mov	r4, r1
   153e4:	strbhi	r0, [r9, r2]
   153e8:	add	r8, r8, #4
   153ec:	mov	r1, r3
   153f0:	str	r3, [sp, #32]
   153f4:	b	14574 <__assert_fail@plt+0x301c>
   153f8:	str	r3, [sp, #32]
   153fc:	mov	r3, r7
   15400:	b	150c0 <__assert_fail@plt+0x3b68>
   15404:	mov	r1, #0
   15408:	str	r1, [sp, #32]
   1540c:	b	14574 <__assert_fail@plt+0x301c>
   15410:	mov	sl, r9
   15414:	ldr	r3, [sp, #56]	; 0x38
   15418:	mov	r9, fp
   1541c:	ldr	r2, [sp, #64]	; 0x40
   15420:	b	150f0 <__assert_fail@plt+0x3b98>
   15424:	str	r2, [sp, #32]
   15428:	mov	r1, #0
   1542c:	b	14574 <__assert_fail@plt+0x301c>
   15430:	ldr	r2, [sp, #76]	; 0x4c
   15434:	mov	sl, r9
   15438:	mov	r9, fp
   1543c:	mov	fp, r8
   15440:	ldr	r1, [sp, #72]	; 0x48
   15444:	cmp	r1, #0
   15448:	moveq	r3, #0
   1544c:	andne	r3, r2, #1
   15450:	cmp	r3, #0
   15454:	beq	15480 <__assert_fail@plt+0x3f28>
   15458:	ldrb	r3, [r1]
   1545c:	cmp	r3, #0
   15460:	beq	15480 <__assert_fail@plt+0x3f28>
   15464:	mov	r2, r1
   15468:	cmp	r9, fp
   1546c:	strbhi	r3, [sl, fp]
   15470:	ldrb	r3, [r2, #1]!
   15474:	add	fp, fp, #1
   15478:	cmp	r3, #0
   1547c:	bne	15468 <__assert_fail@plt+0x3f10>
   15480:	cmp	r9, fp
   15484:	movhi	r3, #0
   15488:	strbhi	r3, [sl, fp]
   1548c:	b	15148 <__assert_fail@plt+0x3bf0>
   15490:	ldr	r3, [sp, #192]	; 0xc0
   15494:	mov	ip, #5
   15498:	str	r3, [sp, #16]
   1549c:	ldr	r3, [sp, #188]	; 0xbc
   154a0:	ldr	r2, [sp, #44]	; 0x2c
   154a4:	str	r3, [sp, #12]
   154a8:	ldr	r3, [sp, #184]	; 0xb8
   154ac:	ldr	r1, [sp, #84]	; 0x54
   154b0:	str	r3, [sp, #8]
   154b4:	ldr	r3, [sp, #180]	; 0xb4
   154b8:	mov	r0, r9
   154bc:	str	r3, [sp, #4]
   154c0:	str	ip, [sp]
   154c4:	ldr	r3, [sp, #24]
   154c8:	bl	13fa0 <__assert_fail@plt+0x2a48>
   154cc:	mov	fp, r0
   154d0:	b	15148 <__assert_fail@plt+0x3bf0>
   154d4:	mov	sl, r9
   154d8:	mov	r9, fp
   154dc:	mov	fp, r8
   154e0:	b	15440 <__assert_fail@plt+0x3ee8>
   154e4:	ldr	r1, [sp, #176]	; 0xb0
   154e8:	bl	13e80 <__assert_fail@plt+0x2928>
   154ec:	str	r0, [sp, #192]	; 0xc0
   154f0:	b	1445c <__assert_fail@plt+0x2f04>
   154f4:	ldr	r1, [sp, #176]	; 0xb0
   154f8:	bl	13e80 <__assert_fail@plt+0x2928>
   154fc:	str	r0, [sp, #188]	; 0xbc
   15500:	b	1443c <__assert_fail@plt+0x2ee4>
   15504:	mov	sl, r9
   15508:	mov	r2, r3
   1550c:	mov	r9, fp
   15510:	mov	fp, r8
   15514:	b	15440 <__assert_fail@plt+0x3ee8>
   15518:	mov	sl, r9
   1551c:	mov	r9, fp
   15520:	b	15104 <__assert_fail@plt+0x3bac>
   15524:	push	{r4, r5, r6, lr}
   15528:	mov	r5, r0
   1552c:	bl	1142c <__errno_location@plt>
   15530:	cmp	r5, #0
   15534:	mov	r1, #48	; 0x30
   15538:	mov	r4, r0
   1553c:	ldr	r0, [pc, #16]	; 15554 <__assert_fail@plt+0x3ffc>
   15540:	ldr	r6, [r4]
   15544:	movne	r0, r5
   15548:	bl	29934 <__assert_fail@plt+0x183dc>
   1554c:	str	r6, [r4]
   15550:	pop	{r4, r5, r6, pc}
   15554:	andeq	lr, r3, r4, asr #5
   15558:	ldr	r3, [pc, #12]	; 1556c <__assert_fail@plt+0x4014>
   1555c:	cmp	r0, #0
   15560:	moveq	r0, r3
   15564:	ldr	r0, [r0]
   15568:	bx	lr
   1556c:	andeq	lr, r3, r4, asr #5
   15570:	ldr	r3, [pc, #12]	; 15584 <__assert_fail@plt+0x402c>
   15574:	cmp	r0, #0
   15578:	moveq	r0, r3
   1557c:	str	r1, [r0]
   15580:	bx	lr
   15584:	andeq	lr, r3, r4, asr #5
   15588:	ldr	r3, [pc, #52]	; 155c4 <__assert_fail@plt+0x406c>
   1558c:	cmp	r0, #0
   15590:	moveq	r0, r3
   15594:	add	r3, r0, #8
   15598:	push	{lr}		; (str lr, [sp, #-4]!)
   1559c:	lsr	lr, r1, #5
   155a0:	and	r1, r1, #31
   155a4:	ldr	ip, [r3, lr, lsl #2]
   155a8:	lsr	r0, ip, r1
   155ac:	eor	r2, r2, r0
   155b0:	and	r2, r2, #1
   155b4:	and	r0, r0, #1
   155b8:	eor	r1, ip, r2, lsl r1
   155bc:	str	r1, [r3, lr, lsl #2]
   155c0:	pop	{pc}		; (ldr pc, [sp], #4)
   155c4:	andeq	lr, r3, r4, asr #5
   155c8:	ldr	r3, [pc, #16]	; 155e0 <__assert_fail@plt+0x4088>
   155cc:	cmp	r0, #0
   155d0:	movne	r3, r0
   155d4:	ldr	r0, [r3, #4]
   155d8:	str	r1, [r3, #4]
   155dc:	bx	lr
   155e0:	andeq	lr, r3, r4, asr #5
   155e4:	ldr	r3, [pc, #44]	; 15618 <__assert_fail@plt+0x40c0>
   155e8:	cmp	r0, #0
   155ec:	moveq	r0, r3
   155f0:	mov	ip, #10
   155f4:	cmp	r2, #0
   155f8:	cmpne	r1, #0
   155fc:	str	ip, [r0]
   15600:	beq	15610 <__assert_fail@plt+0x40b8>
   15604:	str	r1, [r0, #40]	; 0x28
   15608:	str	r2, [r0, #44]	; 0x2c
   1560c:	bx	lr
   15610:	push	{r4, lr}
   15614:	bl	11534 <abort@plt>
   15618:	andeq	lr, r3, r4, asr #5
   1561c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15620:	sub	sp, sp, #24
   15624:	ldr	ip, [pc, #108]	; 15698 <__assert_fail@plt+0x4140>
   15628:	ldr	r4, [sp, #56]	; 0x38
   1562c:	mov	r9, r2
   15630:	cmp	r4, #0
   15634:	moveq	r4, ip
   15638:	mov	sl, r3
   1563c:	mov	r7, r0
   15640:	mov	r8, r1
   15644:	bl	1142c <__errno_location@plt>
   15648:	ldr	r3, [r4, #44]	; 0x2c
   1564c:	mov	r1, r8
   15650:	ldr	r6, [r0]
   15654:	str	r3, [sp, #16]
   15658:	ldr	r2, [r4, #40]	; 0x28
   1565c:	add	r3, r4, #8
   15660:	str	r3, [sp, #8]
   15664:	str	r2, [sp, #12]
   15668:	ldr	r2, [r4, #4]
   1566c:	mov	r5, r0
   15670:	str	r2, [sp, #4]
   15674:	ldr	ip, [r4]
   15678:	mov	r3, sl
   1567c:	mov	r2, r9
   15680:	mov	r0, r7
   15684:	str	ip, [sp]
   15688:	bl	13fa0 <__assert_fail@plt+0x2a48>
   1568c:	str	r6, [r5]
   15690:	add	sp, sp, #24
   15694:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15698:	andeq	lr, r3, r4, asr #5
   1569c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156a0:	cmp	r2, #0
   156a4:	sub	sp, sp, #36	; 0x24
   156a8:	ldr	r4, [pc, #164]	; 15754 <__assert_fail@plt+0x41fc>
   156ac:	mov	r8, r1
   156b0:	movne	r4, r2
   156b4:	mov	r7, r0
   156b8:	bl	1142c <__errno_location@plt>
   156bc:	ldr	r3, [r4, #44]	; 0x2c
   156c0:	ldr	r5, [r4, #4]
   156c4:	add	r9, r4, #8
   156c8:	orr	r5, r5, #1
   156cc:	mov	r1, #0
   156d0:	mov	r2, r7
   156d4:	ldr	fp, [r0]
   156d8:	str	r3, [sp, #16]
   156dc:	ldr	r3, [r4, #40]	; 0x28
   156e0:	stmib	sp, {r5, r9}
   156e4:	str	r3, [sp, #12]
   156e8:	ldr	r3, [r4]
   156ec:	mov	r6, r0
   156f0:	str	r3, [sp]
   156f4:	mov	r0, r1
   156f8:	mov	r3, r8
   156fc:	bl	13fa0 <__assert_fail@plt+0x2a48>
   15700:	add	r1, r0, #1
   15704:	mov	r0, r1
   15708:	str	r1, [sp, #28]
   1570c:	bl	293f0 <__assert_fail@plt+0x17e98>
   15710:	ldr	r3, [r4, #44]	; 0x2c
   15714:	ldr	r1, [sp, #28]
   15718:	str	r3, [sp, #16]
   1571c:	ldr	r3, [r4, #40]	; 0x28
   15720:	str	r5, [sp, #4]
   15724:	str	r3, [sp, #12]
   15728:	str	r9, [sp, #8]
   1572c:	ldr	ip, [r4]
   15730:	mov	r3, r8
   15734:	mov	r2, r7
   15738:	str	ip, [sp]
   1573c:	mov	sl, r0
   15740:	bl	13fa0 <__assert_fail@plt+0x2a48>
   15744:	mov	r0, sl
   15748:	str	fp, [r6]
   1574c:	add	sp, sp, #36	; 0x24
   15750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15754:	andeq	lr, r3, r4, asr #5
   15758:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1575c:	cmp	r3, #0
   15760:	sub	sp, sp, #44	; 0x2c
   15764:	ldr	r4, [pc, #192]	; 1582c <__assert_fail@plt+0x42d4>
   15768:	mov	r6, r2
   1576c:	movne	r4, r3
   15770:	mov	r9, r1
   15774:	mov	r8, r0
   15778:	bl	1142c <__errno_location@plt>
   1577c:	ldr	r3, [r4, #44]	; 0x2c
   15780:	ldr	r5, [r4, #4]
   15784:	add	sl, r4, #8
   15788:	cmp	r6, #0
   1578c:	orreq	r5, r5, #1
   15790:	mov	r1, #0
   15794:	ldr	r2, [r0]
   15798:	str	r3, [sp, #16]
   1579c:	ldr	r3, [r4, #40]	; 0x28
   157a0:	stmib	sp, {r5, sl}
   157a4:	str	r3, [sp, #12]
   157a8:	ldr	r3, [r4]
   157ac:	mov	r7, r0
   157b0:	str	r2, [sp, #28]
   157b4:	str	r3, [sp]
   157b8:	mov	r2, r8
   157bc:	mov	r3, r9
   157c0:	mov	r0, r1
   157c4:	bl	13fa0 <__assert_fail@plt+0x2a48>
   157c8:	add	r1, r0, #1
   157cc:	mov	fp, r0
   157d0:	mov	r0, r1
   157d4:	str	r1, [sp, #36]	; 0x24
   157d8:	bl	293f0 <__assert_fail@plt+0x17e98>
   157dc:	ldr	r3, [r4, #44]	; 0x2c
   157e0:	mov	r2, r8
   157e4:	str	r3, [sp, #16]
   157e8:	ldr	r3, [r4, #40]	; 0x28
   157ec:	str	r5, [sp, #4]
   157f0:	str	r3, [sp, #12]
   157f4:	str	sl, [sp, #8]
   157f8:	ldr	ip, [r4]
   157fc:	ldr	r1, [sp, #36]	; 0x24
   15800:	mov	r3, r9
   15804:	str	ip, [sp]
   15808:	str	r0, [sp, #32]
   1580c:	bl	13fa0 <__assert_fail@plt+0x2a48>
   15810:	ldr	r2, [sp, #28]
   15814:	cmp	r6, #0
   15818:	str	r2, [r7]
   1581c:	ldr	r0, [sp, #32]
   15820:	strne	fp, [r6]
   15824:	add	sp, sp, #44	; 0x2c
   15828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1582c:	andeq	lr, r3, r4, asr #5
   15830:	push	{r4, r5, r6, r7, r8, lr}
   15834:	ldr	r6, [pc, #116]	; 158b0 <__assert_fail@plt+0x4358>
   15838:	ldr	r3, [r6, #4]
   1583c:	ldr	r7, [r6]
   15840:	cmp	r3, #1
   15844:	movgt	r5, r7
   15848:	movgt	r4, #1
   1584c:	ble	1586c <__assert_fail@plt+0x4314>
   15850:	ldr	r0, [r5, #12]
   15854:	bl	13c04 <__assert_fail@plt+0x26ac>
   15858:	ldr	r3, [r6, #4]
   1585c:	add	r4, r4, #1
   15860:	cmp	r3, r4
   15864:	add	r5, r5, #8
   15868:	bgt	15850 <__assert_fail@plt+0x42f8>
   1586c:	ldr	r0, [r7, #4]
   15870:	ldr	r4, [pc, #60]	; 158b4 <__assert_fail@plt+0x435c>
   15874:	cmp	r0, r4
   15878:	beq	1588c <__assert_fail@plt+0x4334>
   1587c:	bl	13c04 <__assert_fail@plt+0x26ac>
   15880:	mov	r3, #256	; 0x100
   15884:	str	r4, [r6, #12]
   15888:	str	r3, [r6, #8]
   1588c:	ldr	r4, [pc, #36]	; 158b8 <__assert_fail@plt+0x4360>
   15890:	cmp	r7, r4
   15894:	beq	158a4 <__assert_fail@plt+0x434c>
   15898:	mov	r0, r7
   1589c:	bl	13c04 <__assert_fail@plt+0x26ac>
   158a0:	str	r4, [r6]
   158a4:	mov	r3, #1
   158a8:	str	r3, [r6, #4]
   158ac:	pop	{r4, r5, r6, r7, r8, pc}
   158b0:	andeq	lr, r3, r8, ror #2
   158b4:	strdeq	lr, [r3], -r4
   158b8:	andeq	lr, r3, r0, ror r1
   158bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158c0:	sub	sp, sp, #44	; 0x2c
   158c4:	mov	r5, r0
   158c8:	mov	sl, r1
   158cc:	bl	1142c <__errno_location@plt>
   158d0:	ldr	r4, [pc, #400]	; 15a68 <__assert_fail@plt+0x4510>
   158d4:	cmn	r5, #-2147483647	; 0x80000001
   158d8:	ldr	r6, [r4]
   158dc:	mov	r8, r0
   158e0:	movne	r0, #0
   158e4:	moveq	r0, #1
   158e8:	ldr	r3, [r8]
   158ec:	orrs	r0, r0, r5, lsr #31
   158f0:	str	r3, [sp, #24]
   158f4:	bne	15a64 <__assert_fail@plt+0x450c>
   158f8:	ldr	r2, [r4, #4]
   158fc:	cmp	r5, r2
   15900:	blt	15960 <__assert_fail@plt+0x4408>
   15904:	add	r7, r4, #8
   15908:	cmp	r6, r7
   1590c:	str	r2, [sp, #36]	; 0x24
   15910:	beq	15a34 <__assert_fail@plt+0x44dc>
   15914:	mov	r3, #8
   15918:	sub	r2, r5, r2
   1591c:	mov	r0, r6
   15920:	str	r3, [sp]
   15924:	add	r2, r2, #1
   15928:	mvn	r3, #-2147483648	; 0x80000000
   1592c:	add	r1, sp, #36	; 0x24
   15930:	bl	2960c <__assert_fail@plt+0x180b4>
   15934:	mov	r6, r0
   15938:	str	r0, [r4]
   1593c:	ldr	r0, [r4, #4]
   15940:	ldr	r2, [sp, #36]	; 0x24
   15944:	mov	r1, #0
   15948:	sub	r2, r2, r0
   1594c:	add	r0, r6, r0, lsl #3
   15950:	lsl	r2, r2, #3
   15954:	bl	1145c <memset@plt>
   15958:	ldr	r3, [sp, #36]	; 0x24
   1595c:	str	r3, [r4, #4]
   15960:	ldr	r4, [pc, #260]	; 15a6c <__assert_fail@plt+0x4514>
   15964:	add	fp, r6, r5, lsl #3
   15968:	ldr	r9, [r6, r5, lsl #3]
   1596c:	ldr	r0, [r4, #4]
   15970:	ldr	r3, [r4]
   15974:	ldr	r7, [fp, #4]
   15978:	ldr	r1, [r4, #44]	; 0x2c
   1597c:	ldr	r2, [r4, #40]	; 0x28
   15980:	orr	r0, r0, #1
   15984:	str	r3, [sp]
   15988:	add	r3, r4, #8
   1598c:	str	r0, [sp, #28]
   15990:	str	r0, [sp, #4]
   15994:	str	r1, [sp, #16]
   15998:	str	r2, [sp, #12]
   1599c:	str	r3, [sp, #8]
   159a0:	mov	r0, r7
   159a4:	mov	r1, r9
   159a8:	mvn	r3, #0
   159ac:	mov	r2, sl
   159b0:	bl	13fa0 <__assert_fail@plt+0x2a48>
   159b4:	cmp	r9, r0
   159b8:	bhi	15a20 <__assert_fail@plt+0x44c8>
   159bc:	add	r3, r4, #48	; 0x30
   159c0:	add	r9, r0, #1
   159c4:	cmp	r7, r3
   159c8:	str	r9, [r6, r5, lsl #3]
   159cc:	beq	159d8 <__assert_fail@plt+0x4480>
   159d0:	mov	r0, r7
   159d4:	bl	13c04 <__assert_fail@plt+0x26ac>
   159d8:	mov	r0, r9
   159dc:	bl	293f0 <__assert_fail@plt+0x17e98>
   159e0:	ldr	ip, [r4, #44]	; 0x2c
   159e4:	ldr	r3, [r4]
   159e8:	ldr	lr, [r4, #40]	; 0x28
   159ec:	ldr	r4, [pc, #124]	; 15a70 <__assert_fail@plt+0x4518>
   159f0:	mov	r2, sl
   159f4:	mov	r1, r9
   159f8:	str	r0, [fp, #4]
   159fc:	str	r4, [sp, #8]
   15a00:	ldr	r4, [sp, #28]
   15a04:	str	r3, [sp]
   15a08:	str	r4, [sp, #4]
   15a0c:	str	ip, [sp, #16]
   15a10:	str	lr, [sp, #12]
   15a14:	mvn	r3, #0
   15a18:	mov	r7, r0
   15a1c:	bl	13fa0 <__assert_fail@plt+0x2a48>
   15a20:	ldr	r3, [sp, #24]
   15a24:	mov	r0, r7
   15a28:	str	r3, [r8]
   15a2c:	add	sp, sp, #44	; 0x2c
   15a30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a34:	mov	r3, #8
   15a38:	sub	r2, r5, r2
   15a3c:	str	r3, [sp]
   15a40:	add	r1, sp, #36	; 0x24
   15a44:	add	r2, r2, #1
   15a48:	mvn	r3, #-2147483648	; 0x80000000
   15a4c:	bl	2960c <__assert_fail@plt+0x180b4>
   15a50:	mov	r6, r0
   15a54:	ldm	r7, {r0, r1}
   15a58:	str	r6, [r4]
   15a5c:	stm	r6, {r0, r1}
   15a60:	b	1593c <__assert_fail@plt+0x43e4>
   15a64:	bl	11534 <abort@plt>
   15a68:	andeq	lr, r3, r8, ror #2
   15a6c:	andeq	lr, r3, r4, asr #5
   15a70:	andeq	lr, r3, ip, asr #5
   15a74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a78:	sub	sp, sp, #52	; 0x34
   15a7c:	mov	r5, r0
   15a80:	mov	sl, r1
   15a84:	mov	fp, r2
   15a88:	bl	1142c <__errno_location@plt>
   15a8c:	ldr	r4, [pc, #408]	; 15c2c <__assert_fail@plt+0x46d4>
   15a90:	cmn	r5, #-2147483647	; 0x80000001
   15a94:	ldr	r6, [r4]
   15a98:	mov	r8, r0
   15a9c:	movne	r0, #0
   15aa0:	moveq	r0, #1
   15aa4:	ldr	r3, [r8]
   15aa8:	orrs	r0, r0, r5, lsr #31
   15aac:	str	r3, [sp, #28]
   15ab0:	bne	15c28 <__assert_fail@plt+0x46d0>
   15ab4:	ldr	r2, [r4, #4]
   15ab8:	cmp	r5, r2
   15abc:	blt	15b1c <__assert_fail@plt+0x45c4>
   15ac0:	add	r7, r4, #8
   15ac4:	cmp	r6, r7
   15ac8:	str	r2, [sp, #44]	; 0x2c
   15acc:	beq	15bf8 <__assert_fail@plt+0x46a0>
   15ad0:	mov	r3, #8
   15ad4:	sub	r2, r5, r2
   15ad8:	mov	r0, r6
   15adc:	str	r3, [sp]
   15ae0:	add	r2, r2, #1
   15ae4:	mvn	r3, #-2147483648	; 0x80000000
   15ae8:	add	r1, sp, #44	; 0x2c
   15aec:	bl	2960c <__assert_fail@plt+0x180b4>
   15af0:	mov	r6, r0
   15af4:	str	r0, [r4]
   15af8:	ldr	r0, [r4, #4]
   15afc:	ldr	r2, [sp, #44]	; 0x2c
   15b00:	mov	r1, #0
   15b04:	sub	r2, r2, r0
   15b08:	add	r0, r6, r0, lsl #3
   15b0c:	lsl	r2, r2, #3
   15b10:	bl	1145c <memset@plt>
   15b14:	ldr	r3, [sp, #44]	; 0x2c
   15b18:	str	r3, [r4, #4]
   15b1c:	ldr	r4, [pc, #268]	; 15c30 <__assert_fail@plt+0x46d8>
   15b20:	add	r3, r6, r5, lsl #3
   15b24:	str	r3, [sp, #32]
   15b28:	ldr	r7, [r3, #4]
   15b2c:	ldr	r0, [r4, #4]
   15b30:	ldr	r3, [r4]
   15b34:	ldr	r9, [r6, r5, lsl #3]
   15b38:	ldr	r1, [r4, #44]	; 0x2c
   15b3c:	ldr	r2, [r4, #40]	; 0x28
   15b40:	orr	r0, r0, #1
   15b44:	str	r3, [sp]
   15b48:	add	r3, r4, #8
   15b4c:	str	r0, [sp, #36]	; 0x24
   15b50:	str	r0, [sp, #4]
   15b54:	str	r1, [sp, #16]
   15b58:	str	r2, [sp, #12]
   15b5c:	str	r3, [sp, #8]
   15b60:	mov	r0, r7
   15b64:	mov	r1, r9
   15b68:	mov	r3, fp
   15b6c:	mov	r2, sl
   15b70:	bl	13fa0 <__assert_fail@plt+0x2a48>
   15b74:	cmp	r9, r0
   15b78:	bhi	15be4 <__assert_fail@plt+0x468c>
   15b7c:	add	r3, r4, #48	; 0x30
   15b80:	add	r9, r0, #1
   15b84:	cmp	r7, r3
   15b88:	str	r9, [r6, r5, lsl #3]
   15b8c:	beq	15b98 <__assert_fail@plt+0x4640>
   15b90:	mov	r0, r7
   15b94:	bl	13c04 <__assert_fail@plt+0x26ac>
   15b98:	mov	r0, r9
   15b9c:	bl	293f0 <__assert_fail@plt+0x17e98>
   15ba0:	ldr	ip, [sp, #32]
   15ba4:	ldr	lr, [r4, #44]	; 0x2c
   15ba8:	ldr	r5, [r4, #40]	; 0x28
   15bac:	mov	r3, fp
   15bb0:	mov	r2, sl
   15bb4:	mov	r1, r9
   15bb8:	str	r0, [ip, #4]
   15bbc:	ldr	ip, [r4]
   15bc0:	ldr	r4, [pc, #108]	; 15c34 <__assert_fail@plt+0x46dc>
   15bc4:	str	lr, [sp, #16]
   15bc8:	str	r4, [sp, #8]
   15bcc:	ldr	r4, [sp, #36]	; 0x24
   15bd0:	str	r5, [sp, #12]
   15bd4:	str	r4, [sp, #4]
   15bd8:	str	ip, [sp]
   15bdc:	mov	r7, r0
   15be0:	bl	13fa0 <__assert_fail@plt+0x2a48>
   15be4:	ldr	r3, [sp, #28]
   15be8:	mov	r0, r7
   15bec:	str	r3, [r8]
   15bf0:	add	sp, sp, #52	; 0x34
   15bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bf8:	mov	r3, #8
   15bfc:	sub	r2, r5, r2
   15c00:	str	r3, [sp]
   15c04:	add	r1, sp, #44	; 0x2c
   15c08:	add	r2, r2, #1
   15c0c:	mvn	r3, #-2147483648	; 0x80000000
   15c10:	bl	2960c <__assert_fail@plt+0x180b4>
   15c14:	mov	r6, r0
   15c18:	ldm	r7, {r0, r1}
   15c1c:	str	r6, [r4]
   15c20:	stm	r6, {r0, r1}
   15c24:	b	15af8 <__assert_fail@plt+0x45a0>
   15c28:	bl	11534 <abort@plt>
   15c2c:	andeq	lr, r3, r8, ror #2
   15c30:	andeq	lr, r3, r4, asr #5
   15c34:	andeq	lr, r3, ip, asr #5
   15c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c3c:	sub	sp, sp, #44	; 0x2c
   15c40:	mov	sl, r0
   15c44:	bl	1142c <__errno_location@plt>
   15c48:	ldr	r4, [pc, #352]	; 15db0 <__assert_fail@plt+0x4858>
   15c4c:	ldr	r2, [r4, #4]
   15c50:	ldr	r5, [r4]
   15c54:	cmp	r2, #0
   15c58:	ldr	r3, [r0]
   15c5c:	mov	r8, r0
   15c60:	str	r3, [sp, #28]
   15c64:	bgt	15cc0 <__assert_fail@plt+0x4768>
   15c68:	add	r6, r4, #8
   15c6c:	cmp	r5, r6
   15c70:	str	r2, [sp, #36]	; 0x24
   15c74:	beq	15d80 <__assert_fail@plt+0x4828>
   15c78:	mov	r3, #8
   15c7c:	mov	r0, r5
   15c80:	str	r3, [sp]
   15c84:	rsb	r2, r2, #1
   15c88:	mvn	r3, #-2147483648	; 0x80000000
   15c8c:	add	r1, sp, #36	; 0x24
   15c90:	bl	2960c <__assert_fail@plt+0x180b4>
   15c94:	mov	r5, r0
   15c98:	str	r0, [r4]
   15c9c:	ldr	r0, [r4, #4]
   15ca0:	ldr	r2, [sp, #36]	; 0x24
   15ca4:	mov	r1, #0
   15ca8:	sub	r2, r2, r0
   15cac:	add	r0, r5, r0, lsl #3
   15cb0:	lsl	r2, r2, #3
   15cb4:	bl	1145c <memset@plt>
   15cb8:	ldr	r3, [sp, #36]	; 0x24
   15cbc:	str	r3, [r4, #4]
   15cc0:	ldr	r4, [pc, #236]	; 15db4 <__assert_fail@plt+0x485c>
   15cc4:	ldr	r9, [r5]
   15cc8:	ldr	r6, [r5, #4]
   15ccc:	ldr	r7, [r4, #4]
   15cd0:	ldr	r1, [r4, #44]	; 0x2c
   15cd4:	ldr	r2, [r4, #40]	; 0x28
   15cd8:	ldr	r3, [r4]
   15cdc:	orr	r7, r7, #1
   15ce0:	add	fp, r4, #8
   15ce4:	str	r1, [sp, #16]
   15ce8:	str	r2, [sp, #12]
   15cec:	str	r3, [sp]
   15cf0:	str	r7, [sp, #4]
   15cf4:	str	fp, [sp, #8]
   15cf8:	mov	r1, r9
   15cfc:	mov	r0, r6
   15d00:	mvn	r3, #0
   15d04:	mov	r2, sl
   15d08:	bl	13fa0 <__assert_fail@plt+0x2a48>
   15d0c:	cmp	r9, r0
   15d10:	bhi	15d6c <__assert_fail@plt+0x4814>
   15d14:	add	r3, r4, #48	; 0x30
   15d18:	add	r9, r0, #1
   15d1c:	cmp	r6, r3
   15d20:	str	r9, [r5]
   15d24:	beq	15d30 <__assert_fail@plt+0x47d8>
   15d28:	mov	r0, r6
   15d2c:	bl	13c04 <__assert_fail@plt+0x26ac>
   15d30:	mov	r0, r9
   15d34:	bl	293f0 <__assert_fail@plt+0x17e98>
   15d38:	ldr	ip, [r4, #44]	; 0x2c
   15d3c:	ldr	r3, [r4]
   15d40:	ldr	lr, [r4, #40]	; 0x28
   15d44:	mov	r2, sl
   15d48:	mov	r1, r9
   15d4c:	str	r0, [r5, #4]
   15d50:	str	r3, [sp]
   15d54:	stmib	sp, {r7, fp}
   15d58:	str	ip, [sp, #16]
   15d5c:	str	lr, [sp, #12]
   15d60:	mvn	r3, #0
   15d64:	mov	r6, r0
   15d68:	bl	13fa0 <__assert_fail@plt+0x2a48>
   15d6c:	ldr	r3, [sp, #28]
   15d70:	mov	r0, r6
   15d74:	str	r3, [r8]
   15d78:	add	sp, sp, #44	; 0x2c
   15d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d80:	mov	r3, #8
   15d84:	str	r3, [sp]
   15d88:	add	r1, sp, #36	; 0x24
   15d8c:	rsb	r2, r2, #1
   15d90:	mvn	r3, #-2147483648	; 0x80000000
   15d94:	mov	r0, #0
   15d98:	bl	2960c <__assert_fail@plt+0x180b4>
   15d9c:	mov	r5, r0
   15da0:	ldm	r6, {r0, r1}
   15da4:	str	r5, [r4]
   15da8:	stm	r5, {r0, r1}
   15dac:	b	15c9c <__assert_fail@plt+0x4744>
   15db0:	andeq	lr, r3, r8, ror #2
   15db4:	andeq	lr, r3, r4, asr #5
   15db8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dbc:	sub	sp, sp, #44	; 0x2c
   15dc0:	mov	r9, r0
   15dc4:	mov	sl, r1
   15dc8:	bl	1142c <__errno_location@plt>
   15dcc:	ldr	r4, [pc, #364]	; 15f40 <__assert_fail@plt+0x49e8>
   15dd0:	ldr	r2, [r4, #4]
   15dd4:	ldr	r5, [r4]
   15dd8:	cmp	r2, #0
   15ddc:	ldr	r3, [r0]
   15de0:	mov	r7, r0
   15de4:	str	r3, [sp, #24]
   15de8:	bgt	15e44 <__assert_fail@plt+0x48ec>
   15dec:	add	r6, r4, #8
   15df0:	cmp	r5, r6
   15df4:	str	r2, [sp, #36]	; 0x24
   15df8:	beq	15f10 <__assert_fail@plt+0x49b8>
   15dfc:	mov	r3, #8
   15e00:	mov	r0, r5
   15e04:	str	r3, [sp]
   15e08:	rsb	r2, r2, #1
   15e0c:	mvn	r3, #-2147483648	; 0x80000000
   15e10:	add	r1, sp, #36	; 0x24
   15e14:	bl	2960c <__assert_fail@plt+0x180b4>
   15e18:	mov	r5, r0
   15e1c:	str	r0, [r4]
   15e20:	ldr	r0, [r4, #4]
   15e24:	ldr	r2, [sp, #36]	; 0x24
   15e28:	mov	r1, #0
   15e2c:	sub	r2, r2, r0
   15e30:	add	r0, r5, r0, lsl #3
   15e34:	lsl	r2, r2, #3
   15e38:	bl	1145c <memset@plt>
   15e3c:	ldr	r3, [sp, #36]	; 0x24
   15e40:	str	r3, [r4, #4]
   15e44:	ldr	r4, [pc, #248]	; 15f44 <__assert_fail@plt+0x49ec>
   15e48:	ldr	r8, [r5]
   15e4c:	ldr	r6, [r5, #4]
   15e50:	ldr	r0, [r4, #4]
   15e54:	ldr	r1, [r4, #44]	; 0x2c
   15e58:	ldr	r2, [r4, #40]	; 0x28
   15e5c:	ldr	r3, [r4]
   15e60:	orr	r0, r0, #1
   15e64:	add	fp, r4, #8
   15e68:	str	r0, [sp, #28]
   15e6c:	str	r0, [sp, #4]
   15e70:	str	r1, [sp, #16]
   15e74:	str	r2, [sp, #12]
   15e78:	str	r3, [sp]
   15e7c:	str	fp, [sp, #8]
   15e80:	mov	r1, r8
   15e84:	mov	r0, r6
   15e88:	mov	r3, sl
   15e8c:	mov	r2, r9
   15e90:	bl	13fa0 <__assert_fail@plt+0x2a48>
   15e94:	cmp	r8, r0
   15e98:	bhi	15efc <__assert_fail@plt+0x49a4>
   15e9c:	add	r3, r4, #48	; 0x30
   15ea0:	add	r8, r0, #1
   15ea4:	cmp	r6, r3
   15ea8:	str	r8, [r5]
   15eac:	beq	15eb8 <__assert_fail@plt+0x4960>
   15eb0:	mov	r0, r6
   15eb4:	bl	13c04 <__assert_fail@plt+0x26ac>
   15eb8:	mov	r0, r8
   15ebc:	bl	293f0 <__assert_fail@plt+0x17e98>
   15ec0:	ldr	lr, [r4, #44]	; 0x2c
   15ec4:	ldr	ip, [r4]
   15ec8:	mov	r3, sl
   15ecc:	mov	r2, r9
   15ed0:	mov	r1, r8
   15ed4:	str	r0, [r5, #4]
   15ed8:	ldr	r5, [r4, #40]	; 0x28
   15edc:	ldr	r4, [sp, #28]
   15ee0:	str	fp, [sp, #8]
   15ee4:	str	r4, [sp, #4]
   15ee8:	str	lr, [sp, #16]
   15eec:	str	r5, [sp, #12]
   15ef0:	str	ip, [sp]
   15ef4:	mov	r6, r0
   15ef8:	bl	13fa0 <__assert_fail@plt+0x2a48>
   15efc:	ldr	r3, [sp, #24]
   15f00:	mov	r0, r6
   15f04:	str	r3, [r7]
   15f08:	add	sp, sp, #44	; 0x2c
   15f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f10:	mov	r3, #8
   15f14:	str	r3, [sp]
   15f18:	add	r1, sp, #36	; 0x24
   15f1c:	rsb	r2, r2, #1
   15f20:	mvn	r3, #-2147483648	; 0x80000000
   15f24:	mov	r0, #0
   15f28:	bl	2960c <__assert_fail@plt+0x180b4>
   15f2c:	mov	r5, r0
   15f30:	ldm	r6, {r0, r1}
   15f34:	str	r5, [r4]
   15f38:	stm	r5, {r0, r1}
   15f3c:	b	15e20 <__assert_fail@plt+0x48c8>
   15f40:	andeq	lr, r3, r8, ror #2
   15f44:	andeq	lr, r3, r4, asr #5
   15f48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f4c:	sub	sp, sp, #132	; 0x84
   15f50:	mov	r5, r1
   15f54:	mov	r4, r0
   15f58:	mov	r9, r2
   15f5c:	add	r0, sp, #80	; 0x50
   15f60:	mov	r2, #48	; 0x30
   15f64:	mov	r1, #0
   15f68:	bl	1145c <memset@plt>
   15f6c:	cmp	r5, #10
   15f70:	beq	16128 <__assert_fail@plt+0x4bd0>
   15f74:	add	lr, sp, #80	; 0x50
   15f78:	str	r5, [sp, #80]	; 0x50
   15f7c:	ldm	lr!, {r0, r1, r2, r3}
   15f80:	add	ip, sp, #32
   15f84:	ldr	r6, [pc, #416]	; 1612c <__assert_fail@plt+0x4bd4>
   15f88:	stmia	ip!, {r0, r1, r2, r3}
   15f8c:	ldm	lr!, {r0, r1, r2, r3}
   15f90:	stmia	ip!, {r0, r1, r2, r3}
   15f94:	ldm	lr, {r0, r1, r2, r3}
   15f98:	stm	ip, {r0, r1, r2, r3}
   15f9c:	bl	1142c <__errno_location@plt>
   15fa0:	cmn	r4, #-2147483647	; 0x80000001
   15fa4:	ldr	r5, [r6]
   15fa8:	mov	r7, r0
   15fac:	movne	r0, #0
   15fb0:	moveq	r0, #1
   15fb4:	ldr	r3, [r7]
   15fb8:	orrs	r0, r0, r4, lsr #31
   15fbc:	str	r3, [sp, #24]
   15fc0:	bne	16128 <__assert_fail@plt+0x4bd0>
   15fc4:	ldr	r2, [r6, #4]
   15fc8:	cmp	r4, r2
   15fcc:	blt	1602c <__assert_fail@plt+0x4ad4>
   15fd0:	add	r8, r6, #8
   15fd4:	cmp	r5, r8
   15fd8:	str	r2, [sp, #80]	; 0x50
   15fdc:	beq	160f8 <__assert_fail@plt+0x4ba0>
   15fe0:	mov	r3, #8
   15fe4:	sub	r2, r4, r2
   15fe8:	mov	r0, r5
   15fec:	str	r3, [sp]
   15ff0:	add	r2, r2, #1
   15ff4:	add	r1, sp, #80	; 0x50
   15ff8:	mvn	r3, #-2147483648	; 0x80000000
   15ffc:	bl	2960c <__assert_fail@plt+0x180b4>
   16000:	mov	r5, r0
   16004:	str	r0, [r6]
   16008:	ldr	r0, [r6, #4]
   1600c:	ldr	r2, [sp, #80]	; 0x50
   16010:	mov	r1, #0
   16014:	sub	r2, r2, r0
   16018:	add	r0, r5, r0, lsl #3
   1601c:	lsl	r2, r2, #3
   16020:	bl	1145c <memset@plt>
   16024:	ldr	r3, [sp, #80]	; 0x50
   16028:	str	r3, [r6, #4]
   1602c:	add	fp, r5, r4, lsl #3
   16030:	ldr	r1, [sp, #36]	; 0x24
   16034:	ldr	r8, [r5, r4, lsl #3]
   16038:	ldr	r6, [fp, #4]
   1603c:	ldr	r2, [sp, #72]	; 0x48
   16040:	ldr	r3, [sp, #32]
   16044:	ldr	ip, [sp, #76]	; 0x4c
   16048:	orr	r1, r1, #1
   1604c:	add	sl, sp, #40	; 0x28
   16050:	str	r1, [sp, #28]
   16054:	str	r1, [sp, #4]
   16058:	str	r2, [sp, #12]
   1605c:	str	r3, [sp]
   16060:	mov	r0, r6
   16064:	mov	r1, r8
   16068:	str	ip, [sp, #16]
   1606c:	str	sl, [sp, #8]
   16070:	mvn	r3, #0
   16074:	mov	r2, r9
   16078:	bl	13fa0 <__assert_fail@plt+0x2a48>
   1607c:	cmp	r8, r0
   16080:	bhi	160e4 <__assert_fail@plt+0x4b8c>
   16084:	ldr	r3, [pc, #164]	; 16130 <__assert_fail@plt+0x4bd8>
   16088:	add	r8, r0, #1
   1608c:	cmp	r6, r3
   16090:	str	r8, [r5, r4, lsl #3]
   16094:	beq	160a0 <__assert_fail@plt+0x4b48>
   16098:	mov	r0, r6
   1609c:	bl	13c04 <__assert_fail@plt+0x26ac>
   160a0:	mov	r0, r8
   160a4:	bl	293f0 <__assert_fail@plt+0x17e98>
   160a8:	ldr	lr, [sp, #76]	; 0x4c
   160ac:	ldr	r3, [sp, #32]
   160b0:	ldr	ip, [sp, #72]	; 0x48
   160b4:	ldr	r4, [sp, #28]
   160b8:	mov	r2, r9
   160bc:	mov	r1, r8
   160c0:	str	r0, [fp, #4]
   160c4:	str	r3, [sp]
   160c8:	str	sl, [sp, #8]
   160cc:	str	r4, [sp, #4]
   160d0:	str	lr, [sp, #16]
   160d4:	str	ip, [sp, #12]
   160d8:	mvn	r3, #0
   160dc:	mov	r6, r0
   160e0:	bl	13fa0 <__assert_fail@plt+0x2a48>
   160e4:	ldr	r3, [sp, #24]
   160e8:	mov	r0, r6
   160ec:	str	r3, [r7]
   160f0:	add	sp, sp, #132	; 0x84
   160f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160f8:	mov	r3, #8
   160fc:	sub	r2, r4, r2
   16100:	add	r1, sp, #80	; 0x50
   16104:	str	r3, [sp]
   16108:	add	r2, r2, #1
   1610c:	mvn	r3, #-2147483648	; 0x80000000
   16110:	bl	2960c <__assert_fail@plt+0x180b4>
   16114:	mov	r5, r0
   16118:	ldm	r8, {r0, r1}
   1611c:	str	r5, [r6]
   16120:	stm	r5, {r0, r1}
   16124:	b	16008 <__assert_fail@plt+0x4ab0>
   16128:	bl	11534 <abort@plt>
   1612c:	andeq	lr, r3, r8, ror #2
   16130:	strdeq	lr, [r3], -r4
   16134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16138:	sub	sp, sp, #132	; 0x84
   1613c:	mov	r5, r1
   16140:	mov	r4, r0
   16144:	mov	r9, r2
   16148:	add	r0, sp, #80	; 0x50
   1614c:	mov	r2, #48	; 0x30
   16150:	mov	r1, #0
   16154:	mov	sl, r3
   16158:	bl	1145c <memset@plt>
   1615c:	cmp	r5, #10
   16160:	beq	1631c <__assert_fail@plt+0x4dc4>
   16164:	add	lr, sp, #80	; 0x50
   16168:	str	r5, [sp, #80]	; 0x50
   1616c:	ldm	lr!, {r0, r1, r2, r3}
   16170:	add	ip, sp, #32
   16174:	ldr	r6, [pc, #420]	; 16320 <__assert_fail@plt+0x4dc8>
   16178:	stmia	ip!, {r0, r1, r2, r3}
   1617c:	ldm	lr!, {r0, r1, r2, r3}
   16180:	stmia	ip!, {r0, r1, r2, r3}
   16184:	ldm	lr, {r0, r1, r2, r3}
   16188:	stm	ip, {r0, r1, r2, r3}
   1618c:	bl	1142c <__errno_location@plt>
   16190:	cmn	r4, #-2147483647	; 0x80000001
   16194:	ldr	r5, [r6]
   16198:	mov	r7, r0
   1619c:	movne	r0, #0
   161a0:	moveq	r0, #1
   161a4:	ldr	r3, [r7]
   161a8:	orrs	r0, r0, r4, lsr #31
   161ac:	str	r3, [sp, #24]
   161b0:	bne	1631c <__assert_fail@plt+0x4dc4>
   161b4:	ldr	r2, [r6, #4]
   161b8:	cmp	r4, r2
   161bc:	blt	1621c <__assert_fail@plt+0x4cc4>
   161c0:	add	r8, r6, #8
   161c4:	cmp	r5, r8
   161c8:	str	r2, [sp, #80]	; 0x50
   161cc:	beq	162ec <__assert_fail@plt+0x4d94>
   161d0:	mov	r3, #8
   161d4:	sub	r2, r4, r2
   161d8:	mov	r0, r5
   161dc:	str	r3, [sp]
   161e0:	add	r2, r2, #1
   161e4:	add	r1, sp, #80	; 0x50
   161e8:	mvn	r3, #-2147483648	; 0x80000000
   161ec:	bl	2960c <__assert_fail@plt+0x180b4>
   161f0:	mov	r5, r0
   161f4:	str	r0, [r6]
   161f8:	ldr	r0, [r6, #4]
   161fc:	ldr	r2, [sp, #80]	; 0x50
   16200:	mov	r1, #0
   16204:	sub	r2, r2, r0
   16208:	add	r0, r5, r0, lsl #3
   1620c:	lsl	r2, r2, #3
   16210:	bl	1145c <memset@plt>
   16214:	ldr	r3, [sp, #80]	; 0x50
   16218:	str	r3, [r6, #4]
   1621c:	add	fp, r5, r4, lsl #3
   16220:	ldr	r3, [sp, #32]
   16224:	ldr	r1, [sp, #36]	; 0x24
   16228:	ldr	r8, [r5, r4, lsl #3]
   1622c:	ldr	r6, [fp, #4]
   16230:	ldr	r2, [sp, #72]	; 0x48
   16234:	ldr	ip, [sp, #76]	; 0x4c
   16238:	orr	r1, r1, #1
   1623c:	str	r3, [sp]
   16240:	add	r3, sp, #40	; 0x28
   16244:	str	r1, [sp, #28]
   16248:	str	r1, [sp, #4]
   1624c:	str	r2, [sp, #12]
   16250:	str	r3, [sp, #8]
   16254:	mov	r0, r6
   16258:	mov	r1, r8
   1625c:	str	ip, [sp, #16]
   16260:	mov	r3, sl
   16264:	mov	r2, r9
   16268:	bl	13fa0 <__assert_fail@plt+0x2a48>
   1626c:	cmp	r8, r0
   16270:	bhi	162d8 <__assert_fail@plt+0x4d80>
   16274:	ldr	r3, [pc, #168]	; 16324 <__assert_fail@plt+0x4dcc>
   16278:	add	r8, r0, #1
   1627c:	cmp	r6, r3
   16280:	str	r8, [r5, r4, lsl #3]
   16284:	beq	16290 <__assert_fail@plt+0x4d38>
   16288:	mov	r0, r6
   1628c:	bl	13c04 <__assert_fail@plt+0x26ac>
   16290:	mov	r0, r8
   16294:	bl	293f0 <__assert_fail@plt+0x17e98>
   16298:	add	lr, sp, #40	; 0x28
   1629c:	ldr	ip, [sp, #76]	; 0x4c
   162a0:	ldr	r4, [sp, #72]	; 0x48
   162a4:	ldr	r5, [sp, #28]
   162a8:	mov	r3, sl
   162ac:	mov	r2, r9
   162b0:	mov	r1, r8
   162b4:	str	r0, [fp, #4]
   162b8:	str	lr, [sp, #8]
   162bc:	ldr	lr, [sp, #32]
   162c0:	str	r5, [sp, #4]
   162c4:	str	ip, [sp, #16]
   162c8:	str	r4, [sp, #12]
   162cc:	str	lr, [sp]
   162d0:	mov	r6, r0
   162d4:	bl	13fa0 <__assert_fail@plt+0x2a48>
   162d8:	ldr	r3, [sp, #24]
   162dc:	mov	r0, r6
   162e0:	str	r3, [r7]
   162e4:	add	sp, sp, #132	; 0x84
   162e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162ec:	mov	r3, #8
   162f0:	sub	r2, r4, r2
   162f4:	add	r1, sp, #80	; 0x50
   162f8:	str	r3, [sp]
   162fc:	add	r2, r2, #1
   16300:	mvn	r3, #-2147483648	; 0x80000000
   16304:	bl	2960c <__assert_fail@plt+0x180b4>
   16308:	mov	r5, r0
   1630c:	ldm	r8, {r0, r1}
   16310:	str	r5, [r6]
   16314:	stm	r5, {r0, r1}
   16318:	b	161f8 <__assert_fail@plt+0x4ca0>
   1631c:	bl	11534 <abort@plt>
   16320:	andeq	lr, r3, r8, ror #2
   16324:	strdeq	lr, [r3], -r4
   16328:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1632c:	sub	sp, sp, #124	; 0x7c
   16330:	mov	r4, r0
   16334:	mov	r9, r1
   16338:	add	r0, sp, #72	; 0x48
   1633c:	mov	r2, #48	; 0x30
   16340:	mov	r1, #0
   16344:	bl	1145c <memset@plt>
   16348:	cmp	r4, #10
   1634c:	beq	164d8 <__assert_fail@plt+0x4f80>
   16350:	add	lr, sp, #72	; 0x48
   16354:	str	r4, [sp, #72]	; 0x48
   16358:	ldm	lr!, {r0, r1, r2, r3}
   1635c:	add	ip, sp, #24
   16360:	ldr	r5, [pc, #372]	; 164dc <__assert_fail@plt+0x4f84>
   16364:	stmia	ip!, {r0, r1, r2, r3}
   16368:	ldm	lr!, {r0, r1, r2, r3}
   1636c:	stmia	ip!, {r0, r1, r2, r3}
   16370:	ldm	lr, {r0, r1, r2, r3}
   16374:	stm	ip, {r0, r1, r2, r3}
   16378:	bl	1142c <__errno_location@plt>
   1637c:	ldr	r2, [r5, #4]
   16380:	ldr	r4, [r5]
   16384:	cmp	r2, #0
   16388:	mov	r7, r0
   1638c:	ldr	fp, [r0]
   16390:	bgt	163ec <__assert_fail@plt+0x4e94>
   16394:	add	r6, r5, #8
   16398:	cmp	r4, r6
   1639c:	str	r2, [sp, #72]	; 0x48
   163a0:	beq	164a8 <__assert_fail@plt+0x4f50>
   163a4:	mov	r3, #8
   163a8:	mov	r0, r4
   163ac:	str	r3, [sp]
   163b0:	rsb	r2, r2, #1
   163b4:	add	r1, sp, #72	; 0x48
   163b8:	mvn	r3, #-2147483648	; 0x80000000
   163bc:	bl	2960c <__assert_fail@plt+0x180b4>
   163c0:	mov	r4, r0
   163c4:	str	r0, [r5]
   163c8:	ldr	r0, [r5, #4]
   163cc:	ldr	r2, [sp, #72]	; 0x48
   163d0:	mov	r1, #0
   163d4:	sub	r2, r2, r0
   163d8:	add	r0, r4, r0, lsl #3
   163dc:	lsl	r2, r2, #3
   163e0:	bl	1145c <memset@plt>
   163e4:	ldr	r3, [sp, #72]	; 0x48
   163e8:	str	r3, [r5, #4]
   163ec:	ldr	r6, [sp, #28]
   163f0:	ldr	r8, [r4]
   163f4:	ldr	r5, [r4, #4]
   163f8:	ldr	r2, [sp, #64]	; 0x40
   163fc:	ldr	r3, [sp, #24]
   16400:	ldr	ip, [sp, #68]	; 0x44
   16404:	orr	r6, r6, #1
   16408:	add	sl, sp, #32
   1640c:	str	r2, [sp, #12]
   16410:	str	r3, [sp]
   16414:	str	r6, [sp, #4]
   16418:	mov	r1, r8
   1641c:	mov	r0, r5
   16420:	str	ip, [sp, #16]
   16424:	str	sl, [sp, #8]
   16428:	mvn	r3, #0
   1642c:	mov	r2, r9
   16430:	bl	13fa0 <__assert_fail@plt+0x2a48>
   16434:	cmp	r8, r0
   16438:	bhi	16498 <__assert_fail@plt+0x4f40>
   1643c:	ldr	r3, [pc, #156]	; 164e0 <__assert_fail@plt+0x4f88>
   16440:	add	r8, r0, #1
   16444:	cmp	r5, r3
   16448:	str	r8, [r4]
   1644c:	beq	16458 <__assert_fail@plt+0x4f00>
   16450:	mov	r0, r5
   16454:	bl	13c04 <__assert_fail@plt+0x26ac>
   16458:	mov	r0, r8
   1645c:	bl	293f0 <__assert_fail@plt+0x17e98>
   16460:	ldr	lr, [sp, #68]	; 0x44
   16464:	ldr	r3, [sp, #24]
   16468:	ldr	ip, [sp, #64]	; 0x40
   1646c:	mov	r2, r9
   16470:	mov	r1, r8
   16474:	str	r0, [r4, #4]
   16478:	str	r3, [sp]
   1647c:	str	sl, [sp, #8]
   16480:	str	r6, [sp, #4]
   16484:	str	lr, [sp, #16]
   16488:	str	ip, [sp, #12]
   1648c:	mvn	r3, #0
   16490:	mov	r5, r0
   16494:	bl	13fa0 <__assert_fail@plt+0x2a48>
   16498:	mov	r0, r5
   1649c:	str	fp, [r7]
   164a0:	add	sp, sp, #124	; 0x7c
   164a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164a8:	mov	r3, #8
   164ac:	add	r1, sp, #72	; 0x48
   164b0:	str	r3, [sp]
   164b4:	rsb	r2, r2, #1
   164b8:	mvn	r3, #-2147483648	; 0x80000000
   164bc:	mov	r0, #0
   164c0:	bl	2960c <__assert_fail@plt+0x180b4>
   164c4:	mov	r4, r0
   164c8:	ldm	r6, {r0, r1}
   164cc:	str	r4, [r5]
   164d0:	stm	r4, {r0, r1}
   164d4:	b	163c8 <__assert_fail@plt+0x4e70>
   164d8:	bl	11534 <abort@plt>
   164dc:	andeq	lr, r3, r8, ror #2
   164e0:	strdeq	lr, [r3], -r4
   164e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164e8:	sub	sp, sp, #132	; 0x84
   164ec:	mov	r4, r0
   164f0:	mov	r9, r1
   164f4:	mov	sl, r2
   164f8:	add	r0, sp, #80	; 0x50
   164fc:	mov	r2, #48	; 0x30
   16500:	mov	r1, #0
   16504:	bl	1145c <memset@plt>
   16508:	cmp	r4, #10
   1650c:	beq	166a0 <__assert_fail@plt+0x5148>
   16510:	add	lr, sp, #80	; 0x50
   16514:	str	r4, [sp, #80]	; 0x50
   16518:	ldm	lr!, {r0, r1, r2, r3}
   1651c:	add	ip, sp, #32
   16520:	ldr	r5, [pc, #380]	; 166a4 <__assert_fail@plt+0x514c>
   16524:	stmia	ip!, {r0, r1, r2, r3}
   16528:	ldm	lr!, {r0, r1, r2, r3}
   1652c:	stmia	ip!, {r0, r1, r2, r3}
   16530:	ldm	lr, {r0, r1, r2, r3}
   16534:	stm	ip, {r0, r1, r2, r3}
   16538:	bl	1142c <__errno_location@plt>
   1653c:	ldr	r2, [r5, #4]
   16540:	ldr	r4, [r5]
   16544:	cmp	r2, #0
   16548:	ldr	r3, [r0]
   1654c:	mov	r7, r0
   16550:	str	r3, [sp, #28]
   16554:	bgt	165b0 <__assert_fail@plt+0x5058>
   16558:	add	r6, r5, #8
   1655c:	cmp	r4, r6
   16560:	str	r2, [sp, #80]	; 0x50
   16564:	beq	16670 <__assert_fail@plt+0x5118>
   16568:	mov	r3, #8
   1656c:	mov	r0, r4
   16570:	str	r3, [sp]
   16574:	rsb	r2, r2, #1
   16578:	add	r1, sp, #80	; 0x50
   1657c:	mvn	r3, #-2147483648	; 0x80000000
   16580:	bl	2960c <__assert_fail@plt+0x180b4>
   16584:	mov	r4, r0
   16588:	str	r0, [r5]
   1658c:	ldr	r0, [r5, #4]
   16590:	ldr	r2, [sp, #80]	; 0x50
   16594:	mov	r1, #0
   16598:	sub	r2, r2, r0
   1659c:	add	r0, r4, r0, lsl #3
   165a0:	lsl	r2, r2, #3
   165a4:	bl	1145c <memset@plt>
   165a8:	ldr	r3, [sp, #80]	; 0x50
   165ac:	str	r3, [r5, #4]
   165b0:	ldr	r6, [sp, #36]	; 0x24
   165b4:	ldr	r8, [r4]
   165b8:	ldr	r5, [r4, #4]
   165bc:	ldr	r2, [sp, #72]	; 0x48
   165c0:	ldr	r3, [sp, #32]
   165c4:	ldr	ip, [sp, #76]	; 0x4c
   165c8:	orr	r6, r6, #1
   165cc:	add	fp, sp, #40	; 0x28
   165d0:	str	r2, [sp, #12]
   165d4:	str	r3, [sp]
   165d8:	str	r6, [sp, #4]
   165dc:	mov	r1, r8
   165e0:	mov	r0, r5
   165e4:	str	ip, [sp, #16]
   165e8:	str	fp, [sp, #8]
   165ec:	mov	r3, sl
   165f0:	mov	r2, r9
   165f4:	bl	13fa0 <__assert_fail@plt+0x2a48>
   165f8:	cmp	r8, r0
   165fc:	bhi	1665c <__assert_fail@plt+0x5104>
   16600:	ldr	r3, [pc, #160]	; 166a8 <__assert_fail@plt+0x5150>
   16604:	add	r8, r0, #1
   16608:	cmp	r5, r3
   1660c:	str	r8, [r4]
   16610:	beq	1661c <__assert_fail@plt+0x50c4>
   16614:	mov	r0, r5
   16618:	bl	13c04 <__assert_fail@plt+0x26ac>
   1661c:	mov	r0, r8
   16620:	bl	293f0 <__assert_fail@plt+0x17e98>
   16624:	ldr	ip, [sp, #76]	; 0x4c
   16628:	ldr	lr, [sp, #32]
   1662c:	mov	r3, sl
   16630:	mov	r2, r9
   16634:	mov	r1, r8
   16638:	str	r0, [r4, #4]
   1663c:	ldr	r4, [sp, #72]	; 0x48
   16640:	str	fp, [sp, #8]
   16644:	str	r6, [sp, #4]
   16648:	str	ip, [sp, #16]
   1664c:	str	r4, [sp, #12]
   16650:	str	lr, [sp]
   16654:	mov	r5, r0
   16658:	bl	13fa0 <__assert_fail@plt+0x2a48>
   1665c:	ldr	r3, [sp, #28]
   16660:	mov	r0, r5
   16664:	str	r3, [r7]
   16668:	add	sp, sp, #132	; 0x84
   1666c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16670:	mov	r3, #8
   16674:	add	r1, sp, #80	; 0x50
   16678:	str	r3, [sp]
   1667c:	rsb	r2, r2, #1
   16680:	mvn	r3, #-2147483648	; 0x80000000
   16684:	mov	r0, #0
   16688:	bl	2960c <__assert_fail@plt+0x180b4>
   1668c:	mov	r4, r0
   16690:	ldm	r6, {r0, r1}
   16694:	str	r4, [r5]
   16698:	stm	r4, {r0, r1}
   1669c:	b	1658c <__assert_fail@plt+0x5034>
   166a0:	bl	11534 <abort@plt>
   166a4:	andeq	lr, r3, r8, ror #2
   166a8:	strdeq	lr, [r3], -r4
   166ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166b0:	mov	r4, r2
   166b4:	ldr	lr, [pc, #432]	; 1686c <__assert_fail@plt+0x5314>
   166b8:	mov	sl, r0
   166bc:	mov	fp, r1
   166c0:	ldm	lr!, {r0, r1, r2, r3}
   166c4:	sub	sp, sp, #92	; 0x5c
   166c8:	add	ip, sp, #40	; 0x28
   166cc:	lsr	r7, r4, #5
   166d0:	stmia	ip!, {r0, r1, r2, r3}
   166d4:	add	r6, sp, #48	; 0x30
   166d8:	ldm	lr!, {r0, r1, r2, r3}
   166dc:	and	r4, r4, #31
   166e0:	ldr	r5, [pc, #392]	; 16870 <__assert_fail@plt+0x5318>
   166e4:	stmia	ip!, {r0, r1, r2, r3}
   166e8:	ldm	lr, {r0, r1, r2, r3}
   166ec:	stm	ip, {r0, r1, r2, r3}
   166f0:	ldr	r2, [r6, r7, lsl #2]
   166f4:	lsr	r3, r2, r4
   166f8:	eor	r3, r3, #1
   166fc:	and	r3, r3, #1
   16700:	eor	r4, r2, r3, lsl r4
   16704:	str	r4, [r6, r7, lsl #2]
   16708:	bl	1142c <__errno_location@plt>
   1670c:	ldr	r2, [r5, #4]
   16710:	ldr	r4, [r5]
   16714:	cmp	r2, #0
   16718:	ldr	r3, [r0]
   1671c:	mov	r8, r0
   16720:	str	r3, [sp, #28]
   16724:	bgt	16780 <__assert_fail@plt+0x5228>
   16728:	add	r7, r5, #8
   1672c:	cmp	r4, r7
   16730:	str	r2, [sp, #36]	; 0x24
   16734:	beq	1683c <__assert_fail@plt+0x52e4>
   16738:	mov	r3, #8
   1673c:	mov	r0, r4
   16740:	str	r3, [sp]
   16744:	rsb	r2, r2, #1
   16748:	mvn	r3, #-2147483648	; 0x80000000
   1674c:	add	r1, sp, #36	; 0x24
   16750:	bl	2960c <__assert_fail@plt+0x180b4>
   16754:	mov	r4, r0
   16758:	str	r0, [r5]
   1675c:	ldr	r0, [r5, #4]
   16760:	ldr	r2, [sp, #36]	; 0x24
   16764:	mov	r1, #0
   16768:	sub	r2, r2, r0
   1676c:	add	r0, r4, r0, lsl #3
   16770:	lsl	r2, r2, #3
   16774:	bl	1145c <memset@plt>
   16778:	ldr	r3, [sp, #36]	; 0x24
   1677c:	str	r3, [r5, #4]
   16780:	ldr	r7, [sp, #44]	; 0x2c
   16784:	ldr	r9, [r4]
   16788:	ldr	r5, [r4, #4]
   1678c:	ldr	r2, [sp, #80]	; 0x50
   16790:	ldr	r3, [sp, #40]	; 0x28
   16794:	ldr	ip, [sp, #84]	; 0x54
   16798:	orr	r7, r7, #1
   1679c:	str	r2, [sp, #12]
   167a0:	str	r3, [sp]
   167a4:	str	r7, [sp, #4]
   167a8:	str	r6, [sp, #8]
   167ac:	mov	r1, r9
   167b0:	mov	r0, r5
   167b4:	str	ip, [sp, #16]
   167b8:	mov	r3, fp
   167bc:	mov	r2, sl
   167c0:	bl	13fa0 <__assert_fail@plt+0x2a48>
   167c4:	cmp	r9, r0
   167c8:	bhi	16828 <__assert_fail@plt+0x52d0>
   167cc:	ldr	r3, [pc, #160]	; 16874 <__assert_fail@plt+0x531c>
   167d0:	add	r9, r0, #1
   167d4:	cmp	r5, r3
   167d8:	str	r9, [r4]
   167dc:	beq	167e8 <__assert_fail@plt+0x5290>
   167e0:	mov	r0, r5
   167e4:	bl	13c04 <__assert_fail@plt+0x26ac>
   167e8:	mov	r0, r9
   167ec:	bl	293f0 <__assert_fail@plt+0x17e98>
   167f0:	ldr	ip, [sp, #84]	; 0x54
   167f4:	ldr	lr, [sp, #40]	; 0x28
   167f8:	mov	r3, fp
   167fc:	mov	r2, sl
   16800:	mov	r1, r9
   16804:	str	r0, [r4, #4]
   16808:	ldr	r4, [sp, #80]	; 0x50
   1680c:	str	r6, [sp, #8]
   16810:	str	r7, [sp, #4]
   16814:	str	ip, [sp, #16]
   16818:	str	r4, [sp, #12]
   1681c:	str	lr, [sp]
   16820:	mov	r5, r0
   16824:	bl	13fa0 <__assert_fail@plt+0x2a48>
   16828:	ldr	r3, [sp, #28]
   1682c:	mov	r0, r5
   16830:	str	r3, [r8]
   16834:	add	sp, sp, #92	; 0x5c
   16838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1683c:	mov	r3, #8
   16840:	str	r3, [sp]
   16844:	add	r1, sp, #36	; 0x24
   16848:	rsb	r2, r2, #1
   1684c:	mvn	r3, #-2147483648	; 0x80000000
   16850:	mov	r0, #0
   16854:	bl	2960c <__assert_fail@plt+0x180b4>
   16858:	mov	r4, r0
   1685c:	ldm	r7, {r0, r1}
   16860:	str	r4, [r5]
   16864:	stm	r4, {r0, r1}
   16868:	b	1675c <__assert_fail@plt+0x5204>
   1686c:	andeq	lr, r3, r4, asr #5
   16870:	andeq	lr, r3, r8, ror #2
   16874:	strdeq	lr, [r3], -r4
   16878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1687c:	mov	r4, r1
   16880:	ldr	lr, [pc, #420]	; 16a2c <__assert_fail@plt+0x54d4>
   16884:	mov	r6, r0
   16888:	sub	sp, sp, #84	; 0x54
   1688c:	ldm	lr!, {r0, r1, r2, r3}
   16890:	add	ip, sp, #32
   16894:	lsr	r8, r4, #5
   16898:	add	r5, sp, #40	; 0x28
   1689c:	stmia	ip!, {r0, r1, r2, r3}
   168a0:	and	r4, r4, #31
   168a4:	ldm	lr!, {r0, r1, r2, r3}
   168a8:	ldr	r7, [pc, #384]	; 16a30 <__assert_fail@plt+0x54d8>
   168ac:	stmia	ip!, {r0, r1, r2, r3}
   168b0:	ldm	lr, {r0, r1, r2, r3}
   168b4:	stm	ip, {r0, r1, r2, r3}
   168b8:	ldr	r2, [r5, r8, lsl #2]
   168bc:	lsr	r3, r2, r4
   168c0:	eor	r3, r3, #1
   168c4:	and	r3, r3, #1
   168c8:	eor	r4, r2, r3, lsl r4
   168cc:	str	r4, [r5, r8, lsl #2]
   168d0:	bl	1142c <__errno_location@plt>
   168d4:	ldr	r2, [r7, #4]
   168d8:	ldr	r4, [r7]
   168dc:	cmp	r2, #0
   168e0:	mov	r9, r0
   168e4:	ldr	sl, [r0]
   168e8:	bgt	16944 <__assert_fail@plt+0x53ec>
   168ec:	add	r8, r7, #8
   168f0:	cmp	r4, r8
   168f4:	str	r2, [sp, #28]
   168f8:	beq	169fc <__assert_fail@plt+0x54a4>
   168fc:	mov	r3, #8
   16900:	mov	r0, r4
   16904:	str	r3, [sp]
   16908:	rsb	r2, r2, #1
   1690c:	mvn	r3, #-2147483648	; 0x80000000
   16910:	add	r1, sp, #28
   16914:	bl	2960c <__assert_fail@plt+0x180b4>
   16918:	mov	r4, r0
   1691c:	str	r0, [r7]
   16920:	ldr	r0, [r7, #4]
   16924:	ldr	r2, [sp, #28]
   16928:	mov	r1, #0
   1692c:	sub	r2, r2, r0
   16930:	add	r0, r4, r0, lsl #3
   16934:	lsl	r2, r2, #3
   16938:	bl	1145c <memset@plt>
   1693c:	ldr	r3, [sp, #28]
   16940:	str	r3, [r7, #4]
   16944:	ldr	r8, [sp, #36]	; 0x24
   16948:	ldr	fp, [r4]
   1694c:	ldr	r7, [r4, #4]
   16950:	ldr	r2, [sp, #72]	; 0x48
   16954:	ldr	r3, [sp, #32]
   16958:	ldr	ip, [sp, #76]	; 0x4c
   1695c:	orr	r8, r8, #1
   16960:	str	r2, [sp, #12]
   16964:	str	r3, [sp]
   16968:	str	r8, [sp, #4]
   1696c:	str	r5, [sp, #8]
   16970:	mov	r1, fp
   16974:	mov	r0, r7
   16978:	str	ip, [sp, #16]
   1697c:	mvn	r3, #0
   16980:	mov	r2, r6
   16984:	bl	13fa0 <__assert_fail@plt+0x2a48>
   16988:	cmp	fp, r0
   1698c:	bhi	169ec <__assert_fail@plt+0x5494>
   16990:	ldr	r3, [pc, #156]	; 16a34 <__assert_fail@plt+0x54dc>
   16994:	add	fp, r0, #1
   16998:	cmp	r7, r3
   1699c:	str	fp, [r4]
   169a0:	beq	169ac <__assert_fail@plt+0x5454>
   169a4:	mov	r0, r7
   169a8:	bl	13c04 <__assert_fail@plt+0x26ac>
   169ac:	mov	r0, fp
   169b0:	bl	293f0 <__assert_fail@plt+0x17e98>
   169b4:	ldr	lr, [sp, #76]	; 0x4c
   169b8:	ldr	r3, [sp, #32]
   169bc:	ldr	ip, [sp, #72]	; 0x48
   169c0:	mov	r2, r6
   169c4:	mov	r1, fp
   169c8:	str	r0, [r4, #4]
   169cc:	str	r3, [sp]
   169d0:	str	r5, [sp, #8]
   169d4:	str	r8, [sp, #4]
   169d8:	str	lr, [sp, #16]
   169dc:	str	ip, [sp, #12]
   169e0:	mvn	r3, #0
   169e4:	mov	r7, r0
   169e8:	bl	13fa0 <__assert_fail@plt+0x2a48>
   169ec:	mov	r0, r7
   169f0:	str	sl, [r9]
   169f4:	add	sp, sp, #84	; 0x54
   169f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169fc:	mov	r3, #8
   16a00:	str	r3, [sp]
   16a04:	add	r1, sp, #28
   16a08:	rsb	r2, r2, #1
   16a0c:	mvn	r3, #-2147483648	; 0x80000000
   16a10:	mov	r0, #0
   16a14:	bl	2960c <__assert_fail@plt+0x180b4>
   16a18:	mov	r4, r0
   16a1c:	ldm	r8, {r0, r1}
   16a20:	str	r4, [r7]
   16a24:	stm	r4, {r0, r1}
   16a28:	b	16920 <__assert_fail@plt+0x53c8>
   16a2c:	andeq	lr, r3, r4, asr #5
   16a30:	andeq	lr, r3, r8, ror #2
   16a34:	strdeq	lr, [r3], -r4
   16a38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a3c:	mov	r6, r0
   16a40:	ldr	lr, [pc, #404]	; 16bdc <__assert_fail@plt+0x5684>
   16a44:	sub	sp, sp, #84	; 0x54
   16a48:	add	ip, sp, #32
   16a4c:	ldm	lr!, {r0, r1, r2, r3}
   16a50:	ldr	r5, [pc, #392]	; 16be0 <__assert_fail@plt+0x5688>
   16a54:	stmia	ip!, {r0, r1, r2, r3}
   16a58:	ldm	lr!, {r0, r1, r2, r3}
   16a5c:	ldr	r4, [sp, #44]	; 0x2c
   16a60:	stmia	ip!, {r0, r1, r2, r3}
   16a64:	ldm	lr, {r0, r1, r2, r3}
   16a68:	mvn	lr, r4
   16a6c:	and	lr, lr, #67108864	; 0x4000000
   16a70:	eor	lr, lr, r4
   16a74:	stm	ip, {r0, r1, r2, r3}
   16a78:	str	lr, [sp, #44]	; 0x2c
   16a7c:	bl	1142c <__errno_location@plt>
   16a80:	ldr	r2, [r5, #4]
   16a84:	ldr	r4, [r5]
   16a88:	cmp	r2, #0
   16a8c:	mov	r8, r0
   16a90:	ldr	sl, [r0]
   16a94:	bgt	16af0 <__assert_fail@plt+0x5598>
   16a98:	add	r7, r5, #8
   16a9c:	cmp	r4, r7
   16aa0:	str	r2, [sp, #28]
   16aa4:	beq	16bac <__assert_fail@plt+0x5654>
   16aa8:	mov	r3, #8
   16aac:	mov	r0, r4
   16ab0:	str	r3, [sp]
   16ab4:	rsb	r2, r2, #1
   16ab8:	mvn	r3, #-2147483648	; 0x80000000
   16abc:	add	r1, sp, #28
   16ac0:	bl	2960c <__assert_fail@plt+0x180b4>
   16ac4:	mov	r4, r0
   16ac8:	str	r0, [r5]
   16acc:	ldr	r0, [r5, #4]
   16ad0:	ldr	r2, [sp, #28]
   16ad4:	mov	r1, #0
   16ad8:	sub	r2, r2, r0
   16adc:	add	r0, r4, r0, lsl #3
   16ae0:	lsl	r2, r2, #3
   16ae4:	bl	1145c <memset@plt>
   16ae8:	ldr	r3, [sp, #28]
   16aec:	str	r3, [r5, #4]
   16af0:	ldr	r7, [sp, #36]	; 0x24
   16af4:	ldr	r9, [r4]
   16af8:	ldr	r5, [r4, #4]
   16afc:	ldr	r2, [sp, #72]	; 0x48
   16b00:	ldr	r3, [sp, #32]
   16b04:	ldr	ip, [sp, #76]	; 0x4c
   16b08:	orr	r7, r7, #1
   16b0c:	add	fp, sp, #40	; 0x28
   16b10:	str	r2, [sp, #12]
   16b14:	str	r3, [sp]
   16b18:	str	r7, [sp, #4]
   16b1c:	mov	r1, r9
   16b20:	mov	r0, r5
   16b24:	str	ip, [sp, #16]
   16b28:	str	fp, [sp, #8]
   16b2c:	mvn	r3, #0
   16b30:	mov	r2, r6
   16b34:	bl	13fa0 <__assert_fail@plt+0x2a48>
   16b38:	cmp	r9, r0
   16b3c:	bhi	16b9c <__assert_fail@plt+0x5644>
   16b40:	ldr	r3, [pc, #156]	; 16be4 <__assert_fail@plt+0x568c>
   16b44:	add	r9, r0, #1
   16b48:	cmp	r5, r3
   16b4c:	str	r9, [r4]
   16b50:	beq	16b5c <__assert_fail@plt+0x5604>
   16b54:	mov	r0, r5
   16b58:	bl	13c04 <__assert_fail@plt+0x26ac>
   16b5c:	mov	r0, r9
   16b60:	bl	293f0 <__assert_fail@plt+0x17e98>
   16b64:	ldr	lr, [sp, #76]	; 0x4c
   16b68:	ldr	r3, [sp, #32]
   16b6c:	ldr	ip, [sp, #72]	; 0x48
   16b70:	mov	r2, r6
   16b74:	mov	r1, r9
   16b78:	str	r0, [r4, #4]
   16b7c:	str	r3, [sp]
   16b80:	str	fp, [sp, #8]
   16b84:	str	r7, [sp, #4]
   16b88:	str	lr, [sp, #16]
   16b8c:	str	ip, [sp, #12]
   16b90:	mvn	r3, #0
   16b94:	mov	r5, r0
   16b98:	bl	13fa0 <__assert_fail@plt+0x2a48>
   16b9c:	mov	r0, r5
   16ba0:	str	sl, [r8]
   16ba4:	add	sp, sp, #84	; 0x54
   16ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bac:	mov	r3, #8
   16bb0:	str	r3, [sp]
   16bb4:	add	r1, sp, #28
   16bb8:	rsb	r2, r2, #1
   16bbc:	mvn	r3, #-2147483648	; 0x80000000
   16bc0:	mov	r0, #0
   16bc4:	bl	2960c <__assert_fail@plt+0x180b4>
   16bc8:	mov	r4, r0
   16bcc:	ldm	r7, {r0, r1}
   16bd0:	str	r4, [r5]
   16bd4:	stm	r4, {r0, r1}
   16bd8:	b	16acc <__assert_fail@plt+0x5574>
   16bdc:	andeq	lr, r3, r4, asr #5
   16be0:	andeq	lr, r3, r8, ror #2
   16be4:	strdeq	lr, [r3], -r4
   16be8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bec:	mov	r9, r0
   16bf0:	ldr	lr, [pc, #416]	; 16d98 <__assert_fail@plt+0x5840>
   16bf4:	mov	sl, r1
   16bf8:	sub	sp, sp, #92	; 0x5c
   16bfc:	ldm	lr!, {r0, r1, r2, r3}
   16c00:	add	ip, sp, #40	; 0x28
   16c04:	ldr	r5, [pc, #400]	; 16d9c <__assert_fail@plt+0x5844>
   16c08:	stmia	ip!, {r0, r1, r2, r3}
   16c0c:	ldm	lr!, {r0, r1, r2, r3}
   16c10:	ldr	r4, [sp, #52]	; 0x34
   16c14:	stmia	ip!, {r0, r1, r2, r3}
   16c18:	ldm	lr, {r0, r1, r2, r3}
   16c1c:	mvn	lr, r4
   16c20:	and	lr, lr, #67108864	; 0x4000000
   16c24:	eor	lr, lr, r4
   16c28:	stm	ip, {r0, r1, r2, r3}
   16c2c:	str	lr, [sp, #52]	; 0x34
   16c30:	bl	1142c <__errno_location@plt>
   16c34:	ldr	r2, [r5, #4]
   16c38:	ldr	r4, [r5]
   16c3c:	cmp	r2, #0
   16c40:	ldr	r3, [r0]
   16c44:	mov	r7, r0
   16c48:	str	r3, [sp, #28]
   16c4c:	bgt	16ca8 <__assert_fail@plt+0x5750>
   16c50:	add	r6, r5, #8
   16c54:	cmp	r4, r6
   16c58:	str	r2, [sp, #36]	; 0x24
   16c5c:	beq	16d68 <__assert_fail@plt+0x5810>
   16c60:	mov	r3, #8
   16c64:	mov	r0, r4
   16c68:	str	r3, [sp]
   16c6c:	rsb	r2, r2, #1
   16c70:	mvn	r3, #-2147483648	; 0x80000000
   16c74:	add	r1, sp, #36	; 0x24
   16c78:	bl	2960c <__assert_fail@plt+0x180b4>
   16c7c:	mov	r4, r0
   16c80:	str	r0, [r5]
   16c84:	ldr	r0, [r5, #4]
   16c88:	ldr	r2, [sp, #36]	; 0x24
   16c8c:	mov	r1, #0
   16c90:	sub	r2, r2, r0
   16c94:	add	r0, r4, r0, lsl #3
   16c98:	lsl	r2, r2, #3
   16c9c:	bl	1145c <memset@plt>
   16ca0:	ldr	r3, [sp, #36]	; 0x24
   16ca4:	str	r3, [r5, #4]
   16ca8:	ldr	r6, [sp, #44]	; 0x2c
   16cac:	ldr	r8, [r4]
   16cb0:	ldr	r5, [r4, #4]
   16cb4:	ldr	r2, [sp, #80]	; 0x50
   16cb8:	ldr	r3, [sp, #40]	; 0x28
   16cbc:	ldr	ip, [sp, #84]	; 0x54
   16cc0:	orr	r6, r6, #1
   16cc4:	add	fp, sp, #48	; 0x30
   16cc8:	str	r2, [sp, #12]
   16ccc:	str	r3, [sp]
   16cd0:	str	r6, [sp, #4]
   16cd4:	mov	r1, r8
   16cd8:	mov	r0, r5
   16cdc:	str	ip, [sp, #16]
   16ce0:	str	fp, [sp, #8]
   16ce4:	mov	r3, sl
   16ce8:	mov	r2, r9
   16cec:	bl	13fa0 <__assert_fail@plt+0x2a48>
   16cf0:	cmp	r8, r0
   16cf4:	bhi	16d54 <__assert_fail@plt+0x57fc>
   16cf8:	ldr	r3, [pc, #160]	; 16da0 <__assert_fail@plt+0x5848>
   16cfc:	add	r8, r0, #1
   16d00:	cmp	r5, r3
   16d04:	str	r8, [r4]
   16d08:	beq	16d14 <__assert_fail@plt+0x57bc>
   16d0c:	mov	r0, r5
   16d10:	bl	13c04 <__assert_fail@plt+0x26ac>
   16d14:	mov	r0, r8
   16d18:	bl	293f0 <__assert_fail@plt+0x17e98>
   16d1c:	ldr	ip, [sp, #84]	; 0x54
   16d20:	ldr	lr, [sp, #40]	; 0x28
   16d24:	mov	r3, sl
   16d28:	mov	r2, r9
   16d2c:	mov	r1, r8
   16d30:	str	r0, [r4, #4]
   16d34:	ldr	r4, [sp, #80]	; 0x50
   16d38:	str	fp, [sp, #8]
   16d3c:	str	r6, [sp, #4]
   16d40:	str	ip, [sp, #16]
   16d44:	str	r4, [sp, #12]
   16d48:	str	lr, [sp]
   16d4c:	mov	r5, r0
   16d50:	bl	13fa0 <__assert_fail@plt+0x2a48>
   16d54:	ldr	r3, [sp, #28]
   16d58:	mov	r0, r5
   16d5c:	str	r3, [r7]
   16d60:	add	sp, sp, #92	; 0x5c
   16d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d68:	mov	r3, #8
   16d6c:	str	r3, [sp]
   16d70:	add	r1, sp, #36	; 0x24
   16d74:	rsb	r2, r2, #1
   16d78:	mvn	r3, #-2147483648	; 0x80000000
   16d7c:	mov	r0, #0
   16d80:	bl	2960c <__assert_fail@plt+0x180b4>
   16d84:	mov	r4, r0
   16d88:	ldm	r6, {r0, r1}
   16d8c:	str	r4, [r5]
   16d90:	stm	r4, {r0, r1}
   16d94:	b	16c84 <__assert_fail@plt+0x572c>
   16d98:	andeq	lr, r3, r4, asr #5
   16d9c:	andeq	lr, r3, r8, ror #2
   16da0:	strdeq	lr, [r3], -r4
   16da4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16da8:	sub	sp, sp, #180	; 0xb4
   16dac:	mov	r6, r1
   16db0:	mov	r4, r0
   16db4:	mov	r9, r2
   16db8:	add	r0, sp, #80	; 0x50
   16dbc:	mov	r2, #48	; 0x30
   16dc0:	mov	r1, #0
   16dc4:	bl	1145c <memset@plt>
   16dc8:	cmp	r6, #10
   16dcc:	beq	16fac <__assert_fail@plt+0x5a54>
   16dd0:	add	r5, sp, #80	; 0x50
   16dd4:	str	r6, [sp, #80]	; 0x50
   16dd8:	ldm	r5!, {r0, r1, r2, r3}
   16ddc:	add	ip, sp, #128	; 0x80
   16de0:	mov	r7, ip
   16de4:	add	lr, sp, #32
   16de8:	stmia	ip!, {r0, r1, r2, r3}
   16dec:	mov	r8, #67108864	; 0x4000000
   16df0:	ldm	r5!, {r0, r1, r2, r3}
   16df4:	ldr	r6, [pc, #436]	; 16fb0 <__assert_fail@plt+0x5a58>
   16df8:	stmia	ip!, {r0, r1, r2, r3}
   16dfc:	ldm	r5, {r0, r1, r2, r3}
   16e00:	stm	ip, {r0, r1, r2, r3}
   16e04:	ldm	r7!, {r0, r1, r2, r3}
   16e08:	stmia	lr!, {r0, r1, r2, r3}
   16e0c:	ldm	r7!, {r0, r1, r2, r3}
   16e10:	str	r8, [sp, #44]	; 0x2c
   16e14:	stmia	lr!, {r0, r1, r2, r3}
   16e18:	ldm	ip, {r0, r1, r2, r3}
   16e1c:	stm	lr, {r0, r1, r2, r3}
   16e20:	bl	1142c <__errno_location@plt>
   16e24:	cmn	r4, #-2147483647	; 0x80000001
   16e28:	ldr	r5, [r6]
   16e2c:	mov	r7, r0
   16e30:	movne	r0, #0
   16e34:	moveq	r0, #1
   16e38:	ldr	r3, [r7]
   16e3c:	orrs	r0, r0, r4, lsr #31
   16e40:	str	r3, [sp, #24]
   16e44:	bne	16fac <__assert_fail@plt+0x5a54>
   16e48:	ldr	r2, [r6, #4]
   16e4c:	cmp	r4, r2
   16e50:	blt	16eb0 <__assert_fail@plt+0x5958>
   16e54:	add	r8, r6, #8
   16e58:	cmp	r5, r8
   16e5c:	str	r2, [sp, #80]	; 0x50
   16e60:	beq	16f7c <__assert_fail@plt+0x5a24>
   16e64:	mov	r3, #8
   16e68:	sub	r2, r4, r2
   16e6c:	mov	r0, r5
   16e70:	str	r3, [sp]
   16e74:	add	r2, r2, #1
   16e78:	add	r1, sp, #80	; 0x50
   16e7c:	mvn	r3, #-2147483648	; 0x80000000
   16e80:	bl	2960c <__assert_fail@plt+0x180b4>
   16e84:	mov	r5, r0
   16e88:	str	r0, [r6]
   16e8c:	ldr	r0, [r6, #4]
   16e90:	ldr	r2, [sp, #80]	; 0x50
   16e94:	mov	r1, #0
   16e98:	sub	r2, r2, r0
   16e9c:	add	r0, r5, r0, lsl #3
   16ea0:	lsl	r2, r2, #3
   16ea4:	bl	1145c <memset@plt>
   16ea8:	ldr	r3, [sp, #80]	; 0x50
   16eac:	str	r3, [r6, #4]
   16eb0:	add	fp, r5, r4, lsl #3
   16eb4:	ldr	r1, [sp, #36]	; 0x24
   16eb8:	ldr	r8, [r5, r4, lsl #3]
   16ebc:	ldr	r6, [fp, #4]
   16ec0:	ldr	r2, [sp, #72]	; 0x48
   16ec4:	ldr	r3, [sp, #32]
   16ec8:	ldr	ip, [sp, #76]	; 0x4c
   16ecc:	orr	r1, r1, #1
   16ed0:	add	sl, sp, #40	; 0x28
   16ed4:	str	r1, [sp, #28]
   16ed8:	str	r1, [sp, #4]
   16edc:	str	r2, [sp, #12]
   16ee0:	str	r3, [sp]
   16ee4:	mov	r0, r6
   16ee8:	mov	r1, r8
   16eec:	str	ip, [sp, #16]
   16ef0:	str	sl, [sp, #8]
   16ef4:	mvn	r3, #0
   16ef8:	mov	r2, r9
   16efc:	bl	13fa0 <__assert_fail@plt+0x2a48>
   16f00:	cmp	r8, r0
   16f04:	bhi	16f68 <__assert_fail@plt+0x5a10>
   16f08:	ldr	r3, [pc, #164]	; 16fb4 <__assert_fail@plt+0x5a5c>
   16f0c:	add	r8, r0, #1
   16f10:	cmp	r6, r3
   16f14:	str	r8, [r5, r4, lsl #3]
   16f18:	beq	16f24 <__assert_fail@plt+0x59cc>
   16f1c:	mov	r0, r6
   16f20:	bl	13c04 <__assert_fail@plt+0x26ac>
   16f24:	mov	r0, r8
   16f28:	bl	293f0 <__assert_fail@plt+0x17e98>
   16f2c:	ldr	lr, [sp, #76]	; 0x4c
   16f30:	ldr	r3, [sp, #32]
   16f34:	ldr	ip, [sp, #72]	; 0x48
   16f38:	ldr	r4, [sp, #28]
   16f3c:	mov	r2, r9
   16f40:	mov	r1, r8
   16f44:	str	r0, [fp, #4]
   16f48:	str	r3, [sp]
   16f4c:	str	sl, [sp, #8]
   16f50:	str	r4, [sp, #4]
   16f54:	str	lr, [sp, #16]
   16f58:	str	ip, [sp, #12]
   16f5c:	mvn	r3, #0
   16f60:	mov	r6, r0
   16f64:	bl	13fa0 <__assert_fail@plt+0x2a48>
   16f68:	ldr	r3, [sp, #24]
   16f6c:	mov	r0, r6
   16f70:	str	r3, [r7]
   16f74:	add	sp, sp, #180	; 0xb4
   16f78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f7c:	mov	r3, #8
   16f80:	sub	r2, r4, r2
   16f84:	add	r1, sp, #80	; 0x50
   16f88:	str	r3, [sp]
   16f8c:	add	r2, r2, #1
   16f90:	mvn	r3, #-2147483648	; 0x80000000
   16f94:	bl	2960c <__assert_fail@plt+0x180b4>
   16f98:	mov	r5, r0
   16f9c:	ldm	r8, {r0, r1}
   16fa0:	str	r5, [r6]
   16fa4:	stm	r5, {r0, r1}
   16fa8:	b	16e8c <__assert_fail@plt+0x5934>
   16fac:	bl	11534 <abort@plt>
   16fb0:	andeq	lr, r3, r8, ror #2
   16fb4:	strdeq	lr, [r3], -r4
   16fb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fbc:	mov	r7, r1
   16fc0:	ldr	lr, [pc, #492]	; 171b4 <__assert_fail@plt+0x5c5c>
   16fc4:	mov	r8, r2
   16fc8:	mov	r4, r0
   16fcc:	mov	fp, r3
   16fd0:	ldm	lr!, {r0, r1, r2, r3}
   16fd4:	sub	sp, sp, #100	; 0x64
   16fd8:	add	ip, sp, #48	; 0x30
   16fdc:	mov	sl, #10
   16fe0:	stmia	ip!, {r0, r1, r2, r3}
   16fe4:	cmp	r8, #0
   16fe8:	cmpne	r7, #0
   16fec:	ldm	lr!, {r0, r1, r2, r3}
   16ff0:	str	sl, [sp, #48]	; 0x30
   16ff4:	stmia	ip!, {r0, r1, r2, r3}
   16ff8:	ldm	lr, {r0, r1, r2, r3}
   16ffc:	stm	ip, {r0, r1, r2, r3}
   17000:	beq	171b0 <__assert_fail@plt+0x5c58>
   17004:	str	r7, [sp, #88]	; 0x58
   17008:	str	r8, [sp, #92]	; 0x5c
   1700c:	bl	1142c <__errno_location@plt>
   17010:	ldr	r6, [pc, #416]	; 171b8 <__assert_fail@plt+0x5c60>
   17014:	cmn	r4, #-2147483647	; 0x80000001
   17018:	ldr	r5, [r6]
   1701c:	mov	r9, r0
   17020:	movne	r0, #0
   17024:	moveq	r0, #1
   17028:	ldr	r3, [r9]
   1702c:	orrs	r0, r0, r4, lsr #31
   17030:	str	r3, [sp, #28]
   17034:	bne	171b0 <__assert_fail@plt+0x5c58>
   17038:	ldr	r2, [r6, #4]
   1703c:	cmp	r4, r2
   17040:	movlt	r3, sl
   17044:	blt	170b0 <__assert_fail@plt+0x5b58>
   17048:	add	r7, r6, #8
   1704c:	cmp	r5, r7
   17050:	str	r2, [sp, #44]	; 0x2c
   17054:	beq	17180 <__assert_fail@plt+0x5c28>
   17058:	mov	r3, #8
   1705c:	sub	r2, r4, r2
   17060:	mov	r0, r5
   17064:	str	r3, [sp]
   17068:	add	r2, r2, #1
   1706c:	mvn	r3, #-2147483648	; 0x80000000
   17070:	add	r1, sp, #44	; 0x2c
   17074:	bl	2960c <__assert_fail@plt+0x180b4>
   17078:	mov	r5, r0
   1707c:	str	r0, [r6]
   17080:	ldr	r0, [r6, #4]
   17084:	ldr	r2, [sp, #44]	; 0x2c
   17088:	mov	r1, #0
   1708c:	sub	r2, r2, r0
   17090:	add	r0, r5, r0, lsl #3
   17094:	lsl	r2, r2, #3
   17098:	bl	1145c <memset@plt>
   1709c:	ldr	r3, [sp, #48]	; 0x30
   170a0:	ldr	r7, [sp, #88]	; 0x58
   170a4:	ldr	r8, [sp, #92]	; 0x5c
   170a8:	ldr	r2, [sp, #44]	; 0x2c
   170ac:	str	r2, [r6, #4]
   170b0:	add	r2, r5, r4, lsl #3
   170b4:	mov	r1, r2
   170b8:	str	r2, [sp, #32]
   170bc:	ldr	r2, [sp, #52]	; 0x34
   170c0:	ldr	r6, [r1, #4]
   170c4:	ldr	sl, [r5, r4, lsl #3]
   170c8:	orr	r2, r2, #1
   170cc:	str	r3, [sp]
   170d0:	add	r3, sp, #56	; 0x38
   170d4:	str	r2, [sp, #36]	; 0x24
   170d8:	str	r2, [sp, #4]
   170dc:	str	r3, [sp, #8]
   170e0:	mov	r0, r6
   170e4:	str	r8, [sp, #16]
   170e8:	str	r7, [sp, #12]
   170ec:	mov	r1, sl
   170f0:	mvn	r3, #0
   170f4:	mov	r2, fp
   170f8:	bl	13fa0 <__assert_fail@plt+0x2a48>
   170fc:	cmp	sl, r0
   17100:	bhi	1716c <__assert_fail@plt+0x5c14>
   17104:	ldr	r3, [pc, #176]	; 171bc <__assert_fail@plt+0x5c64>
   17108:	add	r7, r0, #1
   1710c:	cmp	r6, r3
   17110:	str	r7, [r5, r4, lsl #3]
   17114:	beq	17120 <__assert_fail@plt+0x5bc8>
   17118:	mov	r0, r6
   1711c:	bl	13c04 <__assert_fail@plt+0x26ac>
   17120:	mov	r0, r7
   17124:	bl	293f0 <__assert_fail@plt+0x17e98>
   17128:	ldr	r3, [sp, #32]
   1712c:	ldr	lr, [sp, #92]	; 0x5c
   17130:	ldr	ip, [sp, #88]	; 0x58
   17134:	ldr	r4, [sp, #36]	; 0x24
   17138:	mov	r2, fp
   1713c:	mov	r1, r7
   17140:	str	r0, [r3, #4]
   17144:	add	r3, sp, #56	; 0x38
   17148:	str	r3, [sp, #8]
   1714c:	ldr	r3, [sp, #48]	; 0x30
   17150:	str	r4, [sp, #4]
   17154:	str	r3, [sp]
   17158:	str	lr, [sp, #16]
   1715c:	str	ip, [sp, #12]
   17160:	mvn	r3, #0
   17164:	mov	r6, r0
   17168:	bl	13fa0 <__assert_fail@plt+0x2a48>
   1716c:	ldr	r3, [sp, #28]
   17170:	mov	r0, r6
   17174:	str	r3, [r9]
   17178:	add	sp, sp, #100	; 0x64
   1717c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17180:	mov	r3, #8
   17184:	sub	r2, r4, r2
   17188:	str	r3, [sp]
   1718c:	add	r1, sp, #44	; 0x2c
   17190:	add	r2, r2, #1
   17194:	mvn	r3, #-2147483648	; 0x80000000
   17198:	bl	2960c <__assert_fail@plt+0x180b4>
   1719c:	mov	r5, r0
   171a0:	ldm	r7, {r0, r1}
   171a4:	str	r5, [r6]
   171a8:	stm	r5, {r0, r1}
   171ac:	b	17080 <__assert_fail@plt+0x5b28>
   171b0:	bl	11534 <abort@plt>
   171b4:	andeq	lr, r3, r4, asr #5
   171b8:	andeq	lr, r3, r8, ror #2
   171bc:	strdeq	lr, [r3], -r4
   171c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171c4:	mov	r7, r1
   171c8:	ldr	lr, [pc, #492]	; 173bc <__assert_fail@plt+0x5e64>
   171cc:	mov	r8, r2
   171d0:	mov	r4, r0
   171d4:	mov	fp, r3
   171d8:	ldm	lr!, {r0, r1, r2, r3}
   171dc:	sub	sp, sp, #100	; 0x64
   171e0:	add	ip, sp, #48	; 0x30
   171e4:	mov	sl, #10
   171e8:	stmia	ip!, {r0, r1, r2, r3}
   171ec:	cmp	r8, #0
   171f0:	cmpne	r7, #0
   171f4:	ldm	lr!, {r0, r1, r2, r3}
   171f8:	str	sl, [sp, #48]	; 0x30
   171fc:	stmia	ip!, {r0, r1, r2, r3}
   17200:	ldm	lr, {r0, r1, r2, r3}
   17204:	stm	ip, {r0, r1, r2, r3}
   17208:	beq	173b8 <__assert_fail@plt+0x5e60>
   1720c:	str	r7, [sp, #88]	; 0x58
   17210:	str	r8, [sp, #92]	; 0x5c
   17214:	bl	1142c <__errno_location@plt>
   17218:	ldr	r6, [pc, #416]	; 173c0 <__assert_fail@plt+0x5e68>
   1721c:	cmn	r4, #-2147483647	; 0x80000001
   17220:	ldr	r5, [r6]
   17224:	mov	r9, r0
   17228:	movne	r0, #0
   1722c:	moveq	r0, #1
   17230:	ldr	r3, [r9]
   17234:	orrs	r0, r0, r4, lsr #31
   17238:	str	r3, [sp, #28]
   1723c:	bne	173b8 <__assert_fail@plt+0x5e60>
   17240:	ldr	r2, [r6, #4]
   17244:	cmp	r4, r2
   17248:	movlt	r3, sl
   1724c:	blt	172b8 <__assert_fail@plt+0x5d60>
   17250:	add	r7, r6, #8
   17254:	cmp	r5, r7
   17258:	str	r2, [sp, #44]	; 0x2c
   1725c:	beq	17388 <__assert_fail@plt+0x5e30>
   17260:	mov	r3, #8
   17264:	sub	r2, r4, r2
   17268:	mov	r0, r5
   1726c:	str	r3, [sp]
   17270:	add	r2, r2, #1
   17274:	mvn	r3, #-2147483648	; 0x80000000
   17278:	add	r1, sp, #44	; 0x2c
   1727c:	bl	2960c <__assert_fail@plt+0x180b4>
   17280:	mov	r5, r0
   17284:	str	r0, [r6]
   17288:	ldr	r0, [r6, #4]
   1728c:	ldr	r2, [sp, #44]	; 0x2c
   17290:	mov	r1, #0
   17294:	sub	r2, r2, r0
   17298:	add	r0, r5, r0, lsl #3
   1729c:	lsl	r2, r2, #3
   172a0:	bl	1145c <memset@plt>
   172a4:	ldr	r3, [sp, #48]	; 0x30
   172a8:	ldr	r7, [sp, #88]	; 0x58
   172ac:	ldr	r8, [sp, #92]	; 0x5c
   172b0:	ldr	r2, [sp, #44]	; 0x2c
   172b4:	str	r2, [r6, #4]
   172b8:	add	r2, r5, r4, lsl #3
   172bc:	mov	r1, r2
   172c0:	str	r2, [sp, #32]
   172c4:	ldr	r2, [sp, #52]	; 0x34
   172c8:	ldr	r6, [r1, #4]
   172cc:	ldr	sl, [r5, r4, lsl #3]
   172d0:	orr	r2, r2, #1
   172d4:	str	r3, [sp]
   172d8:	add	r3, sp, #56	; 0x38
   172dc:	str	r2, [sp, #36]	; 0x24
   172e0:	str	r2, [sp, #4]
   172e4:	str	r3, [sp, #8]
   172e8:	mov	r0, r6
   172ec:	str	r8, [sp, #16]
   172f0:	str	r7, [sp, #12]
   172f4:	mov	r1, sl
   172f8:	ldr	r3, [sp, #136]	; 0x88
   172fc:	mov	r2, fp
   17300:	bl	13fa0 <__assert_fail@plt+0x2a48>
   17304:	cmp	sl, r0
   17308:	bhi	17374 <__assert_fail@plt+0x5e1c>
   1730c:	ldr	r3, [pc, #176]	; 173c4 <__assert_fail@plt+0x5e6c>
   17310:	add	r7, r0, #1
   17314:	cmp	r6, r3
   17318:	str	r7, [r5, r4, lsl #3]
   1731c:	beq	17328 <__assert_fail@plt+0x5dd0>
   17320:	mov	r0, r6
   17324:	bl	13c04 <__assert_fail@plt+0x26ac>
   17328:	mov	r0, r7
   1732c:	bl	293f0 <__assert_fail@plt+0x17e98>
   17330:	ldr	r3, [sp, #32]
   17334:	ldr	lr, [sp, #92]	; 0x5c
   17338:	ldr	ip, [sp, #88]	; 0x58
   1733c:	ldr	r4, [sp, #36]	; 0x24
   17340:	mov	r2, fp
   17344:	mov	r1, r7
   17348:	str	r0, [r3, #4]
   1734c:	add	r3, sp, #56	; 0x38
   17350:	str	r3, [sp, #8]
   17354:	ldr	r3, [sp, #48]	; 0x30
   17358:	str	r4, [sp, #4]
   1735c:	str	r3, [sp]
   17360:	str	lr, [sp, #16]
   17364:	str	ip, [sp, #12]
   17368:	ldr	r3, [sp, #136]	; 0x88
   1736c:	mov	r6, r0
   17370:	bl	13fa0 <__assert_fail@plt+0x2a48>
   17374:	ldr	r3, [sp, #28]
   17378:	mov	r0, r6
   1737c:	str	r3, [r9]
   17380:	add	sp, sp, #100	; 0x64
   17384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17388:	mov	r3, #8
   1738c:	sub	r2, r4, r2
   17390:	str	r3, [sp]
   17394:	add	r1, sp, #44	; 0x2c
   17398:	add	r2, r2, #1
   1739c:	mvn	r3, #-2147483648	; 0x80000000
   173a0:	bl	2960c <__assert_fail@plt+0x180b4>
   173a4:	mov	r5, r0
   173a8:	ldm	r7, {r0, r1}
   173ac:	str	r5, [r6]
   173b0:	stm	r5, {r0, r1}
   173b4:	b	17288 <__assert_fail@plt+0x5d30>
   173b8:	bl	11534 <abort@plt>
   173bc:	andeq	lr, r3, r4, asr #5
   173c0:	andeq	lr, r3, r8, ror #2
   173c4:	strdeq	lr, [r3], -r4
   173c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173cc:	mov	r5, r0
   173d0:	ldr	lr, [pc, #452]	; 1759c <__assert_fail@plt+0x6044>
   173d4:	mov	r6, r1
   173d8:	mov	sl, r2
   173dc:	ldm	lr!, {r0, r1, r2, r3}
   173e0:	sub	sp, sp, #92	; 0x5c
   173e4:	add	ip, sp, #40	; 0x28
   173e8:	cmp	r6, #0
   173ec:	cmpne	r5, #0
   173f0:	stmia	ip!, {r0, r1, r2, r3}
   173f4:	mov	r9, #10
   173f8:	ldm	lr!, {r0, r1, r2, r3}
   173fc:	moveq	fp, #1
   17400:	movne	fp, #0
   17404:	str	r9, [sp, #40]	; 0x28
   17408:	stmia	ip!, {r0, r1, r2, r3}
   1740c:	ldm	lr, {r0, r1, r2, r3}
   17410:	stm	ip, {r0, r1, r2, r3}
   17414:	beq	17598 <__assert_fail@plt+0x6040>
   17418:	str	r5, [sp, #80]	; 0x50
   1741c:	str	r6, [sp, #84]	; 0x54
   17420:	bl	1142c <__errno_location@plt>
   17424:	ldr	r7, [pc, #372]	; 175a0 <__assert_fail@plt+0x6048>
   17428:	ldr	r2, [r7, #4]
   1742c:	ldr	r4, [r7]
   17430:	cmp	r2, #0
   17434:	ldr	r3, [r0]
   17438:	mov	r8, r0
   1743c:	str	r3, [sp, #24]
   17440:	movgt	r3, r9
   17444:	bgt	174ac <__assert_fail@plt+0x5f54>
   17448:	add	r5, r7, #8
   1744c:	cmp	r4, r5
   17450:	str	r2, [sp, #36]	; 0x24
   17454:	beq	17568 <__assert_fail@plt+0x6010>
   17458:	mov	r3, #8
   1745c:	mov	r0, r4
   17460:	str	r3, [sp]
   17464:	rsb	r2, r2, #1
   17468:	mvn	r3, #-2147483648	; 0x80000000
   1746c:	add	r1, sp, #36	; 0x24
   17470:	bl	2960c <__assert_fail@plt+0x180b4>
   17474:	mov	r4, r0
   17478:	str	r0, [r7]
   1747c:	ldr	r0, [r7, #4]
   17480:	ldr	r2, [sp, #36]	; 0x24
   17484:	mov	r1, #0
   17488:	sub	r2, r2, r0
   1748c:	add	r0, r4, r0, lsl #3
   17490:	lsl	r2, r2, #3
   17494:	bl	1145c <memset@plt>
   17498:	ldr	r3, [sp, #40]	; 0x28
   1749c:	ldr	r5, [sp, #80]	; 0x50
   174a0:	ldr	r6, [sp, #84]	; 0x54
   174a4:	ldr	r2, [sp, #36]	; 0x24
   174a8:	str	r2, [r7, #4]
   174ac:	ldr	r2, [sp, #44]	; 0x2c
   174b0:	ldr	r9, [r4]
   174b4:	ldr	r7, [r4, #4]
   174b8:	orr	r2, r2, #1
   174bc:	add	fp, sp, #48	; 0x30
   174c0:	str	r2, [sp, #28]
   174c4:	str	r2, [sp, #4]
   174c8:	str	r3, [sp]
   174cc:	str	r6, [sp, #16]
   174d0:	str	r5, [sp, #12]
   174d4:	mov	r1, r9
   174d8:	mov	r0, r7
   174dc:	str	fp, [sp, #8]
   174e0:	mvn	r3, #0
   174e4:	mov	r2, sl
   174e8:	bl	13fa0 <__assert_fail@plt+0x2a48>
   174ec:	cmp	r9, r0
   174f0:	bhi	17554 <__assert_fail@plt+0x5ffc>
   174f4:	ldr	r3, [pc, #168]	; 175a4 <__assert_fail@plt+0x604c>
   174f8:	add	r5, r0, #1
   174fc:	cmp	r7, r3
   17500:	str	r5, [r4]
   17504:	beq	17510 <__assert_fail@plt+0x5fb8>
   17508:	mov	r0, r7
   1750c:	bl	13c04 <__assert_fail@plt+0x26ac>
   17510:	mov	r0, r5
   17514:	bl	293f0 <__assert_fail@plt+0x17e98>
   17518:	ldr	lr, [sp, #84]	; 0x54
   1751c:	ldr	r3, [sp, #40]	; 0x28
   17520:	ldr	ip, [sp, #80]	; 0x50
   17524:	mov	r2, sl
   17528:	mov	r1, r5
   1752c:	str	r0, [r4, #4]
   17530:	ldr	r4, [sp, #28]
   17534:	str	r3, [sp]
   17538:	str	fp, [sp, #8]
   1753c:	str	r4, [sp, #4]
   17540:	str	lr, [sp, #16]
   17544:	str	ip, [sp, #12]
   17548:	mvn	r3, #0
   1754c:	mov	r7, r0
   17550:	bl	13fa0 <__assert_fail@plt+0x2a48>
   17554:	ldr	r3, [sp, #24]
   17558:	mov	r0, r7
   1755c:	str	r3, [r8]
   17560:	add	sp, sp, #92	; 0x5c
   17564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17568:	mov	r3, #8
   1756c:	str	r3, [sp]
   17570:	add	r1, sp, #36	; 0x24
   17574:	rsb	r2, r2, #1
   17578:	mov	r0, fp
   1757c:	mvn	r3, #-2147483648	; 0x80000000
   17580:	bl	2960c <__assert_fail@plt+0x180b4>
   17584:	mov	r4, r0
   17588:	ldm	r5, {r0, r1}
   1758c:	str	r4, [r7]
   17590:	stm	r4, {r0, r1}
   17594:	b	1747c <__assert_fail@plt+0x5f24>
   17598:	bl	11534 <abort@plt>
   1759c:	andeq	lr, r3, r4, asr #5
   175a0:	andeq	lr, r3, r8, ror #2
   175a4:	strdeq	lr, [r3], -r4
   175a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175ac:	mov	r5, r0
   175b0:	ldr	lr, [pc, #464]	; 17788 <__assert_fail@plt+0x6230>
   175b4:	mov	r6, r1
   175b8:	mov	sl, r2
   175bc:	mov	fp, r3
   175c0:	ldm	lr!, {r0, r1, r2, r3}
   175c4:	sub	sp, sp, #92	; 0x5c
   175c8:	add	ip, sp, #40	; 0x28
   175cc:	cmp	r6, #0
   175d0:	cmpne	r5, #0
   175d4:	stmia	ip!, {r0, r1, r2, r3}
   175d8:	moveq	r4, #1
   175dc:	ldm	lr!, {r0, r1, r2, r3}
   175e0:	movne	r4, #0
   175e4:	mov	r9, #10
   175e8:	str	r4, [sp, #28]
   175ec:	stmia	ip!, {r0, r1, r2, r3}
   175f0:	ldm	lr, {r0, r1, r2, r3}
   175f4:	str	r9, [sp, #40]	; 0x28
   175f8:	stm	ip, {r0, r1, r2, r3}
   175fc:	beq	17784 <__assert_fail@plt+0x622c>
   17600:	str	r5, [sp, #80]	; 0x50
   17604:	str	r6, [sp, #84]	; 0x54
   17608:	bl	1142c <__errno_location@plt>
   1760c:	ldr	r7, [pc, #376]	; 1778c <__assert_fail@plt+0x6234>
   17610:	ldr	r2, [r7, #4]
   17614:	ldr	r4, [r7]
   17618:	cmp	r2, #0
   1761c:	ldr	r3, [r0]
   17620:	mov	r8, r0
   17624:	str	r3, [sp, #24]
   17628:	movgt	r3, r9
   1762c:	bgt	17694 <__assert_fail@plt+0x613c>
   17630:	add	r5, r7, #8
   17634:	cmp	r4, r5
   17638:	str	r2, [sp, #36]	; 0x24
   1763c:	beq	17754 <__assert_fail@plt+0x61fc>
   17640:	mov	r3, #8
   17644:	mov	r0, r4
   17648:	str	r3, [sp]
   1764c:	rsb	r2, r2, #1
   17650:	mvn	r3, #-2147483648	; 0x80000000
   17654:	add	r1, sp, #36	; 0x24
   17658:	bl	2960c <__assert_fail@plt+0x180b4>
   1765c:	mov	r4, r0
   17660:	str	r0, [r7]
   17664:	ldr	r0, [r7, #4]
   17668:	ldr	r2, [sp, #36]	; 0x24
   1766c:	mov	r1, #0
   17670:	sub	r2, r2, r0
   17674:	add	r0, r4, r0, lsl #3
   17678:	lsl	r2, r2, #3
   1767c:	bl	1145c <memset@plt>
   17680:	ldr	r3, [sp, #40]	; 0x28
   17684:	ldr	r5, [sp, #80]	; 0x50
   17688:	ldr	r6, [sp, #84]	; 0x54
   1768c:	ldr	r2, [sp, #36]	; 0x24
   17690:	str	r2, [r7, #4]
   17694:	ldr	r2, [sp, #44]	; 0x2c
   17698:	ldr	r9, [r4]
   1769c:	ldr	r7, [r4, #4]
   176a0:	orr	r2, r2, #1
   176a4:	str	r3, [sp]
   176a8:	add	r3, sp, #48	; 0x30
   176ac:	str	r2, [sp, #28]
   176b0:	str	r2, [sp, #4]
   176b4:	str	r3, [sp, #8]
   176b8:	str	r6, [sp, #16]
   176bc:	str	r5, [sp, #12]
   176c0:	mov	r1, r9
   176c4:	mov	r0, r7
   176c8:	mov	r3, fp
   176cc:	mov	r2, sl
   176d0:	bl	13fa0 <__assert_fail@plt+0x2a48>
   176d4:	cmp	r9, r0
   176d8:	bhi	17740 <__assert_fail@plt+0x61e8>
   176dc:	ldr	r3, [pc, #172]	; 17790 <__assert_fail@plt+0x6238>
   176e0:	add	r5, r0, #1
   176e4:	cmp	r7, r3
   176e8:	str	r5, [r4]
   176ec:	beq	176f8 <__assert_fail@plt+0x61a0>
   176f0:	mov	r0, r7
   176f4:	bl	13c04 <__assert_fail@plt+0x26ac>
   176f8:	mov	r0, r5
   176fc:	bl	293f0 <__assert_fail@plt+0x17e98>
   17700:	add	lr, sp, #48	; 0x30
   17704:	ldr	ip, [sp, #84]	; 0x54
   17708:	mov	r1, r5
   1770c:	ldr	r5, [sp, #28]
   17710:	mov	r3, fp
   17714:	mov	r2, sl
   17718:	str	r0, [r4, #4]
   1771c:	ldr	r4, [sp, #80]	; 0x50
   17720:	str	lr, [sp, #8]
   17724:	ldr	lr, [sp, #40]	; 0x28
   17728:	str	r5, [sp, #4]
   1772c:	str	ip, [sp, #16]
   17730:	str	r4, [sp, #12]
   17734:	str	lr, [sp]
   17738:	mov	r7, r0
   1773c:	bl	13fa0 <__assert_fail@plt+0x2a48>
   17740:	ldr	r3, [sp, #24]
   17744:	mov	r0, r7
   17748:	str	r3, [r8]
   1774c:	add	sp, sp, #92	; 0x5c
   17750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17754:	mov	r3, #8
   17758:	str	r3, [sp]
   1775c:	add	r1, sp, #36	; 0x24
   17760:	rsb	r2, r2, #1
   17764:	ldr	r0, [sp, #28]
   17768:	mvn	r3, #-2147483648	; 0x80000000
   1776c:	bl	2960c <__assert_fail@plt+0x180b4>
   17770:	mov	r4, r0
   17774:	ldm	r5, {r0, r1}
   17778:	str	r4, [r7]
   1777c:	stm	r4, {r0, r1}
   17780:	b	17664 <__assert_fail@plt+0x610c>
   17784:	bl	11534 <abort@plt>
   17788:	andeq	lr, r3, r4, asr #5
   1778c:	andeq	lr, r3, r8, ror #2
   17790:	strdeq	lr, [r3], -r4
   17794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17798:	sub	sp, sp, #52	; 0x34
   1779c:	mov	r5, r0
   177a0:	mov	sl, r1
   177a4:	mov	fp, r2
   177a8:	bl	1142c <__errno_location@plt>
   177ac:	ldr	r4, [pc, #404]	; 17948 <__assert_fail@plt+0x63f0>
   177b0:	cmn	r5, #-2147483647	; 0x80000001
   177b4:	ldr	r6, [r4]
   177b8:	mov	r8, r0
   177bc:	movne	r0, #0
   177c0:	moveq	r0, #1
   177c4:	ldr	r3, [r8]
   177c8:	orrs	r0, r0, r5, lsr #31
   177cc:	str	r3, [sp, #28]
   177d0:	bne	17944 <__assert_fail@plt+0x63ec>
   177d4:	ldr	r2, [r4, #4]
   177d8:	cmp	r5, r2
   177dc:	blt	1783c <__assert_fail@plt+0x62e4>
   177e0:	add	r7, r4, #8
   177e4:	cmp	r6, r7
   177e8:	str	r2, [sp, #44]	; 0x2c
   177ec:	beq	17914 <__assert_fail@plt+0x63bc>
   177f0:	mov	r3, #8
   177f4:	sub	r2, r5, r2
   177f8:	mov	r0, r6
   177fc:	str	r3, [sp]
   17800:	add	r2, r2, #1
   17804:	mvn	r3, #-2147483648	; 0x80000000
   17808:	add	r1, sp, #44	; 0x2c
   1780c:	bl	2960c <__assert_fail@plt+0x180b4>
   17810:	mov	r6, r0
   17814:	str	r0, [r4]
   17818:	ldr	r0, [r4, #4]
   1781c:	ldr	r2, [sp, #44]	; 0x2c
   17820:	mov	r1, #0
   17824:	sub	r2, r2, r0
   17828:	add	r0, r6, r0, lsl #3
   1782c:	lsl	r2, r2, #3
   17830:	bl	1145c <memset@plt>
   17834:	ldr	r3, [sp, #44]	; 0x2c
   17838:	str	r3, [r4, #4]
   1783c:	ldr	r2, [r4, #56]	; 0x38
   17840:	add	r3, r6, r5, lsl #3
   17844:	ldr	r1, [r4, #20]
   17848:	ldr	r7, [r3, #4]
   1784c:	ldr	r9, [r6, r5, lsl #3]
   17850:	ldr	ip, [r4, #60]	; 0x3c
   17854:	str	r3, [sp, #32]
   17858:	ldr	r3, [r4, #16]
   1785c:	str	r2, [sp, #12]
   17860:	ldr	r2, [pc, #228]	; 1794c <__assert_fail@plt+0x63f4>
   17864:	orr	r1, r1, #1
   17868:	str	r1, [sp, #36]	; 0x24
   1786c:	str	r1, [sp, #4]
   17870:	str	r2, [sp, #8]
   17874:	str	r3, [sp]
   17878:	mov	r0, r7
   1787c:	mov	r1, r9
   17880:	str	ip, [sp, #16]
   17884:	mov	r3, fp
   17888:	mov	r2, sl
   1788c:	bl	13fa0 <__assert_fail@plt+0x2a48>
   17890:	cmp	r9, r0
   17894:	bhi	17900 <__assert_fail@plt+0x63a8>
   17898:	ldr	r3, [pc, #176]	; 17950 <__assert_fail@plt+0x63f8>
   1789c:	add	r9, r0, #1
   178a0:	cmp	r7, r3
   178a4:	str	r9, [r6, r5, lsl #3]
   178a8:	beq	178b4 <__assert_fail@plt+0x635c>
   178ac:	mov	r0, r7
   178b0:	bl	13c04 <__assert_fail@plt+0x26ac>
   178b4:	mov	r0, r9
   178b8:	bl	293f0 <__assert_fail@plt+0x17e98>
   178bc:	ldr	ip, [sp, #32]
   178c0:	ldr	lr, [r4, #60]	; 0x3c
   178c4:	ldr	r5, [r4, #56]	; 0x38
   178c8:	mov	r3, fp
   178cc:	mov	r2, sl
   178d0:	mov	r1, r9
   178d4:	str	r0, [ip, #4]
   178d8:	ldr	ip, [r4, #16]
   178dc:	ldr	r4, [pc, #104]	; 1794c <__assert_fail@plt+0x63f4>
   178e0:	str	lr, [sp, #16]
   178e4:	str	r4, [sp, #8]
   178e8:	ldr	r4, [sp, #36]	; 0x24
   178ec:	str	r5, [sp, #12]
   178f0:	str	r4, [sp, #4]
   178f4:	str	ip, [sp]
   178f8:	mov	r7, r0
   178fc:	bl	13fa0 <__assert_fail@plt+0x2a48>
   17900:	ldr	r3, [sp, #28]
   17904:	mov	r0, r7
   17908:	str	r3, [r8]
   1790c:	add	sp, sp, #52	; 0x34
   17910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17914:	mov	r3, #8
   17918:	sub	r2, r5, r2
   1791c:	str	r3, [sp]
   17920:	add	r1, sp, #44	; 0x2c
   17924:	add	r2, r2, #1
   17928:	mvn	r3, #-2147483648	; 0x80000000
   1792c:	bl	2960c <__assert_fail@plt+0x180b4>
   17930:	mov	r6, r0
   17934:	ldm	r7, {r0, r1}
   17938:	str	r6, [r4]
   1793c:	stm	r6, {r0, r1}
   17940:	b	17818 <__assert_fail@plt+0x62c0>
   17944:	bl	11534 <abort@plt>
   17948:	andeq	lr, r3, r8, ror #2
   1794c:	andeq	lr, r3, r0, lsl #3
   17950:	strdeq	lr, [r3], -r4
   17954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17958:	sub	sp, sp, #44	; 0x2c
   1795c:	mov	r9, r0
   17960:	mov	sl, r1
   17964:	bl	1142c <__errno_location@plt>
   17968:	ldr	r4, [pc, #360]	; 17ad8 <__assert_fail@plt+0x6580>
   1796c:	ldr	r2, [r4, #4]
   17970:	ldr	r5, [r4]
   17974:	cmp	r2, #0
   17978:	ldr	r3, [r0]
   1797c:	mov	r7, r0
   17980:	str	r3, [sp, #24]
   17984:	bgt	179e0 <__assert_fail@plt+0x6488>
   17988:	add	r6, r4, #8
   1798c:	cmp	r5, r6
   17990:	str	r2, [sp, #36]	; 0x24
   17994:	beq	17aa8 <__assert_fail@plt+0x6550>
   17998:	mov	r3, #8
   1799c:	mov	r0, r5
   179a0:	str	r3, [sp]
   179a4:	rsb	r2, r2, #1
   179a8:	mvn	r3, #-2147483648	; 0x80000000
   179ac:	add	r1, sp, #36	; 0x24
   179b0:	bl	2960c <__assert_fail@plt+0x180b4>
   179b4:	mov	r5, r0
   179b8:	str	r0, [r4]
   179bc:	ldr	r0, [r4, #4]
   179c0:	ldr	r2, [sp, #36]	; 0x24
   179c4:	mov	r1, #0
   179c8:	sub	r2, r2, r0
   179cc:	add	r0, r5, r0, lsl #3
   179d0:	lsl	r2, r2, #3
   179d4:	bl	1145c <memset@plt>
   179d8:	ldr	r3, [sp, #36]	; 0x24
   179dc:	str	r3, [r4, #4]
   179e0:	ldr	r1, [r4, #20]
   179e4:	ldr	r8, [r5]
   179e8:	ldr	r6, [r5, #4]
   179ec:	ldr	r2, [r4, #56]	; 0x38
   179f0:	ldr	r3, [r4, #16]
   179f4:	ldr	ip, [r4, #60]	; 0x3c
   179f8:	ldr	fp, [pc, #220]	; 17adc <__assert_fail@plt+0x6584>
   179fc:	orr	r1, r1, #1
   17a00:	str	r1, [sp, #28]
   17a04:	str	r1, [sp, #4]
   17a08:	str	r2, [sp, #12]
   17a0c:	str	r3, [sp]
   17a10:	mov	r1, r8
   17a14:	mov	r0, r6
   17a18:	str	ip, [sp, #16]
   17a1c:	str	fp, [sp, #8]
   17a20:	mov	r3, sl
   17a24:	mov	r2, r9
   17a28:	bl	13fa0 <__assert_fail@plt+0x2a48>
   17a2c:	cmp	r8, r0
   17a30:	bhi	17a94 <__assert_fail@plt+0x653c>
   17a34:	ldr	r3, [pc, #164]	; 17ae0 <__assert_fail@plt+0x6588>
   17a38:	add	r8, r0, #1
   17a3c:	cmp	r6, r3
   17a40:	str	r8, [r5]
   17a44:	beq	17a50 <__assert_fail@plt+0x64f8>
   17a48:	mov	r0, r6
   17a4c:	bl	13c04 <__assert_fail@plt+0x26ac>
   17a50:	mov	r0, r8
   17a54:	bl	293f0 <__assert_fail@plt+0x17e98>
   17a58:	ldr	lr, [r4, #60]	; 0x3c
   17a5c:	ldr	ip, [r4, #16]
   17a60:	mov	r3, sl
   17a64:	mov	r2, r9
   17a68:	mov	r1, r8
   17a6c:	str	r0, [r5, #4]
   17a70:	ldr	r5, [r4, #56]	; 0x38
   17a74:	ldr	r4, [sp, #28]
   17a78:	str	fp, [sp, #8]
   17a7c:	str	r4, [sp, #4]
   17a80:	str	lr, [sp, #16]
   17a84:	str	r5, [sp, #12]
   17a88:	str	ip, [sp]
   17a8c:	mov	r6, r0
   17a90:	bl	13fa0 <__assert_fail@plt+0x2a48>
   17a94:	ldr	r3, [sp, #24]
   17a98:	mov	r0, r6
   17a9c:	str	r3, [r7]
   17aa0:	add	sp, sp, #44	; 0x2c
   17aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17aa8:	mov	r3, #8
   17aac:	str	r3, [sp]
   17ab0:	add	r1, sp, #36	; 0x24
   17ab4:	rsb	r2, r2, #1
   17ab8:	mvn	r3, #-2147483648	; 0x80000000
   17abc:	mov	r0, #0
   17ac0:	bl	2960c <__assert_fail@plt+0x180b4>
   17ac4:	mov	r5, r0
   17ac8:	ldm	r6, {r0, r1}
   17acc:	str	r5, [r4]
   17ad0:	stm	r5, {r0, r1}
   17ad4:	b	179bc <__assert_fail@plt+0x6464>
   17ad8:	andeq	lr, r3, r8, ror #2
   17adc:	andeq	lr, r3, r0, lsl #3
   17ae0:	strdeq	lr, [r3], -r4
   17ae4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ae8:	sub	sp, sp, #44	; 0x2c
   17aec:	mov	r5, r0
   17af0:	mov	sl, r1
   17af4:	bl	1142c <__errno_location@plt>
   17af8:	ldr	r4, [pc, #396]	; 17c8c <__assert_fail@plt+0x6734>
   17afc:	cmn	r5, #-2147483647	; 0x80000001
   17b00:	ldr	r6, [r4]
   17b04:	mov	r8, r0
   17b08:	movne	r0, #0
   17b0c:	moveq	r0, #1
   17b10:	ldr	r3, [r8]
   17b14:	orrs	r0, r0, r5, lsr #31
   17b18:	str	r3, [sp, #24]
   17b1c:	bne	17c88 <__assert_fail@plt+0x6730>
   17b20:	ldr	r2, [r4, #4]
   17b24:	cmp	r5, r2
   17b28:	blt	17b88 <__assert_fail@plt+0x6630>
   17b2c:	add	r7, r4, #8
   17b30:	cmp	r6, r7
   17b34:	str	r2, [sp, #36]	; 0x24
   17b38:	beq	17c58 <__assert_fail@plt+0x6700>
   17b3c:	mov	r3, #8
   17b40:	sub	r2, r5, r2
   17b44:	mov	r0, r6
   17b48:	str	r3, [sp]
   17b4c:	add	r2, r2, #1
   17b50:	mvn	r3, #-2147483648	; 0x80000000
   17b54:	add	r1, sp, #36	; 0x24
   17b58:	bl	2960c <__assert_fail@plt+0x180b4>
   17b5c:	mov	r6, r0
   17b60:	str	r0, [r4]
   17b64:	ldr	r0, [r4, #4]
   17b68:	ldr	r2, [sp, #36]	; 0x24
   17b6c:	mov	r1, #0
   17b70:	sub	r2, r2, r0
   17b74:	add	r0, r6, r0, lsl #3
   17b78:	lsl	r2, r2, #3
   17b7c:	bl	1145c <memset@plt>
   17b80:	ldr	r3, [sp, #36]	; 0x24
   17b84:	str	r3, [r4, #4]
   17b88:	ldr	r2, [r4, #56]	; 0x38
   17b8c:	add	fp, r6, r5, lsl #3
   17b90:	ldr	r1, [r4, #20]
   17b94:	ldr	r9, [r6, r5, lsl #3]
   17b98:	ldr	r7, [fp, #4]
   17b9c:	ldr	r3, [r4, #16]
   17ba0:	ldr	ip, [r4, #60]	; 0x3c
   17ba4:	str	r2, [sp, #12]
   17ba8:	ldr	r2, [pc, #224]	; 17c90 <__assert_fail@plt+0x6738>
   17bac:	orr	r1, r1, #1
   17bb0:	str	r1, [sp, #28]
   17bb4:	str	r1, [sp, #4]
   17bb8:	str	r2, [sp, #8]
   17bbc:	str	r3, [sp]
   17bc0:	mov	r0, r7
   17bc4:	mov	r1, r9
   17bc8:	str	ip, [sp, #16]
   17bcc:	mvn	r3, #0
   17bd0:	mov	r2, sl
   17bd4:	bl	13fa0 <__assert_fail@plt+0x2a48>
   17bd8:	cmp	r9, r0
   17bdc:	bhi	17c44 <__assert_fail@plt+0x66ec>
   17be0:	ldr	r3, [pc, #172]	; 17c94 <__assert_fail@plt+0x673c>
   17be4:	add	r9, r0, #1
   17be8:	cmp	r7, r3
   17bec:	str	r9, [r6, r5, lsl #3]
   17bf0:	beq	17bfc <__assert_fail@plt+0x66a4>
   17bf4:	mov	r0, r7
   17bf8:	bl	13c04 <__assert_fail@plt+0x26ac>
   17bfc:	mov	r0, r9
   17c00:	bl	293f0 <__assert_fail@plt+0x17e98>
   17c04:	ldr	ip, [r4, #60]	; 0x3c
   17c08:	ldr	r3, [r4, #16]
   17c0c:	ldr	lr, [r4, #56]	; 0x38
   17c10:	ldr	r4, [pc, #120]	; 17c90 <__assert_fail@plt+0x6738>
   17c14:	mov	r2, sl
   17c18:	mov	r1, r9
   17c1c:	str	r0, [fp, #4]
   17c20:	str	r4, [sp, #8]
   17c24:	ldr	r4, [sp, #28]
   17c28:	str	r3, [sp]
   17c2c:	str	r4, [sp, #4]
   17c30:	str	ip, [sp, #16]
   17c34:	str	lr, [sp, #12]
   17c38:	mvn	r3, #0
   17c3c:	mov	r7, r0
   17c40:	bl	13fa0 <__assert_fail@plt+0x2a48>
   17c44:	ldr	r3, [sp, #24]
   17c48:	mov	r0, r7
   17c4c:	str	r3, [r8]
   17c50:	add	sp, sp, #44	; 0x2c
   17c54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c58:	mov	r3, #8
   17c5c:	sub	r2, r5, r2
   17c60:	str	r3, [sp]
   17c64:	add	r1, sp, #36	; 0x24
   17c68:	add	r2, r2, #1
   17c6c:	mvn	r3, #-2147483648	; 0x80000000
   17c70:	bl	2960c <__assert_fail@plt+0x180b4>
   17c74:	mov	r6, r0
   17c78:	ldm	r7, {r0, r1}
   17c7c:	str	r6, [r4]
   17c80:	stm	r6, {r0, r1}
   17c84:	b	17b64 <__assert_fail@plt+0x660c>
   17c88:	bl	11534 <abort@plt>
   17c8c:	andeq	lr, r3, r8, ror #2
   17c90:	andeq	lr, r3, r0, lsl #3
   17c94:	strdeq	lr, [r3], -r4
   17c98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c9c:	sub	sp, sp, #44	; 0x2c
   17ca0:	mov	sl, r0
   17ca4:	bl	1142c <__errno_location@plt>
   17ca8:	ldr	r4, [pc, #348]	; 17e0c <__assert_fail@plt+0x68b4>
   17cac:	ldr	r2, [r4, #4]
   17cb0:	ldr	r5, [r4]
   17cb4:	cmp	r2, #0
   17cb8:	ldr	r3, [r0]
   17cbc:	mov	r8, r0
   17cc0:	str	r3, [sp, #28]
   17cc4:	bgt	17d20 <__assert_fail@plt+0x67c8>
   17cc8:	add	r6, r4, #8
   17ccc:	cmp	r5, r6
   17cd0:	str	r2, [sp, #36]	; 0x24
   17cd4:	beq	17ddc <__assert_fail@plt+0x6884>
   17cd8:	mov	r3, #8
   17cdc:	mov	r0, r5
   17ce0:	str	r3, [sp]
   17ce4:	rsb	r2, r2, #1
   17ce8:	mvn	r3, #-2147483648	; 0x80000000
   17cec:	add	r1, sp, #36	; 0x24
   17cf0:	bl	2960c <__assert_fail@plt+0x180b4>
   17cf4:	mov	r5, r0
   17cf8:	str	r0, [r4]
   17cfc:	ldr	r0, [r4, #4]
   17d00:	ldr	r2, [sp, #36]	; 0x24
   17d04:	mov	r1, #0
   17d08:	sub	r2, r2, r0
   17d0c:	add	r0, r5, r0, lsl #3
   17d10:	lsl	r2, r2, #3
   17d14:	bl	1145c <memset@plt>
   17d18:	ldr	r3, [sp, #36]	; 0x24
   17d1c:	str	r3, [r4, #4]
   17d20:	ldr	r7, [r4, #20]
   17d24:	ldr	r9, [r5]
   17d28:	ldr	r6, [r5, #4]
   17d2c:	ldr	r2, [r4, #56]	; 0x38
   17d30:	ldr	r3, [r4, #16]
   17d34:	ldr	ip, [r4, #60]	; 0x3c
   17d38:	ldr	fp, [pc, #208]	; 17e10 <__assert_fail@plt+0x68b8>
   17d3c:	orr	r7, r7, #1
   17d40:	str	r2, [sp, #12]
   17d44:	str	r3, [sp]
   17d48:	str	r7, [sp, #4]
   17d4c:	mov	r1, r9
   17d50:	mov	r0, r6
   17d54:	str	ip, [sp, #16]
   17d58:	str	fp, [sp, #8]
   17d5c:	mvn	r3, #0
   17d60:	mov	r2, sl
   17d64:	bl	13fa0 <__assert_fail@plt+0x2a48>
   17d68:	cmp	r9, r0
   17d6c:	bhi	17dc8 <__assert_fail@plt+0x6870>
   17d70:	ldr	r3, [pc, #156]	; 17e14 <__assert_fail@plt+0x68bc>
   17d74:	add	r9, r0, #1
   17d78:	cmp	r6, r3
   17d7c:	str	r9, [r5]
   17d80:	beq	17d8c <__assert_fail@plt+0x6834>
   17d84:	mov	r0, r6
   17d88:	bl	13c04 <__assert_fail@plt+0x26ac>
   17d8c:	mov	r0, r9
   17d90:	bl	293f0 <__assert_fail@plt+0x17e98>
   17d94:	ldr	ip, [r4, #60]	; 0x3c
   17d98:	ldr	r3, [r4, #16]
   17d9c:	ldr	lr, [r4, #56]	; 0x38
   17da0:	mov	r2, sl
   17da4:	mov	r1, r9
   17da8:	str	r0, [r5, #4]
   17dac:	str	r3, [sp]
   17db0:	stmib	sp, {r7, fp}
   17db4:	str	ip, [sp, #16]
   17db8:	str	lr, [sp, #12]
   17dbc:	mvn	r3, #0
   17dc0:	mov	r6, r0
   17dc4:	bl	13fa0 <__assert_fail@plt+0x2a48>
   17dc8:	ldr	r3, [sp, #28]
   17dcc:	mov	r0, r6
   17dd0:	str	r3, [r8]
   17dd4:	add	sp, sp, #44	; 0x2c
   17dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ddc:	mov	r3, #8
   17de0:	str	r3, [sp]
   17de4:	add	r1, sp, #36	; 0x24
   17de8:	rsb	r2, r2, #1
   17dec:	mvn	r3, #-2147483648	; 0x80000000
   17df0:	mov	r0, #0
   17df4:	bl	2960c <__assert_fail@plt+0x180b4>
   17df8:	mov	r5, r0
   17dfc:	ldm	r6, {r0, r1}
   17e00:	str	r5, [r4]
   17e04:	stm	r5, {r0, r1}
   17e08:	b	17cfc <__assert_fail@plt+0x67a4>
   17e0c:	andeq	lr, r3, r8, ror #2
   17e10:	andeq	lr, r3, r0, lsl #3
   17e14:	strdeq	lr, [r3], -r4
   17e18:	mov	ip, r0
   17e1c:	ldr	r3, [r1, #40]	; 0x28
   17e20:	ldr	r0, [r1, #56]	; 0x38
   17e24:	cmp	r0, r3
   17e28:	ble	17e9c <__assert_fail@plt+0x6944>
   17e2c:	push	{r4, lr}
   17e30:	ldr	lr, [r1, #4]
   17e34:	ldrb	r0, [lr, r3]
   17e38:	strb	r0, [ip]
   17e3c:	ldr	r4, [r1, #80]	; 0x50
   17e40:	cmp	r4, #1
   17e44:	ble	17e64 <__assert_fail@plt+0x690c>
   17e48:	ldr	r4, [r1, #28]
   17e4c:	cmp	r3, r4
   17e50:	beq	17e64 <__assert_fail@plt+0x690c>
   17e54:	ldr	r4, [r1, #8]
   17e58:	ldr	r4, [r4, r3, lsl #2]
   17e5c:	cmn	r4, #1
   17e60:	beq	17ee4 <__assert_fail@plt+0x698c>
   17e64:	cmp	r0, #92	; 0x5c
   17e68:	beq	17eac <__assert_fail@plt+0x6954>
   17e6c:	cmp	r0, #91	; 0x5b
   17e70:	beq	17ef0 <__assert_fail@plt+0x6998>
   17e74:	cmp	r0, #93	; 0x5d
   17e78:	beq	17ed4 <__assert_fail@plt+0x697c>
   17e7c:	cmp	r0, #94	; 0x5e
   17e80:	beq	17f14 <__assert_fail@plt+0x69bc>
   17e84:	cmp	r0, #45	; 0x2d
   17e88:	bne	17ec4 <__assert_fail@plt+0x696c>
   17e8c:	mov	r3, #22
   17e90:	strb	r3, [ip, #4]
   17e94:	mov	r0, #1
   17e98:	pop	{r4, pc}
   17e9c:	mov	r3, #2
   17ea0:	strb	r3, [ip, #4]
   17ea4:	mov	r0, #0
   17ea8:	bx	lr
   17eac:	tst	r2, #1
   17eb0:	beq	17ec4 <__assert_fail@plt+0x696c>
   17eb4:	ldr	r2, [r1, #48]	; 0x30
   17eb8:	add	r3, r3, #1
   17ebc:	cmp	r3, r2
   17ec0:	blt	17f58 <__assert_fail@plt+0x6a00>
   17ec4:	mov	r3, #1
   17ec8:	mov	r0, r3
   17ecc:	strb	r3, [ip, #4]
   17ed0:	pop	{r4, pc}
   17ed4:	mov	r3, #21
   17ed8:	strb	r3, [ip, #4]
   17edc:	mov	r0, #1
   17ee0:	pop	{r4, pc}
   17ee4:	mov	r0, #1
   17ee8:	strb	r0, [ip, #4]
   17eec:	pop	{r4, pc}
   17ef0:	ldr	r1, [r1, #48]	; 0x30
   17ef4:	add	r0, r3, #1
   17ef8:	cmp	r0, r1
   17efc:	blt	17f24 <__assert_fail@plt+0x69cc>
   17f00:	mov	r0, #1
   17f04:	mov	r3, #91	; 0x5b
   17f08:	strb	r0, [ip, #4]
   17f0c:	strb	r3, [ip]
   17f10:	pop	{r4, pc}
   17f14:	mov	r3, #25
   17f18:	strb	r3, [ip, #4]
   17f1c:	mov	r0, #1
   17f20:	pop	{r4, pc}
   17f24:	add	r3, lr, r3
   17f28:	ldrb	r3, [r3, #1]
   17f2c:	cmp	r3, #58	; 0x3a
   17f30:	strb	r3, [ip]
   17f34:	beq	17f70 <__assert_fail@plt+0x6a18>
   17f38:	cmp	r3, #61	; 0x3d
   17f3c:	beq	17f88 <__assert_fail@plt+0x6a30>
   17f40:	cmp	r3, #46	; 0x2e
   17f44:	bne	17f00 <__assert_fail@plt+0x69a8>
   17f48:	mov	r3, #26
   17f4c:	strb	r3, [ip, #4]
   17f50:	mov	r0, #2
   17f54:	pop	{r4, pc}
   17f58:	str	r3, [r1, #40]	; 0x28
   17f5c:	ldrb	r3, [lr, r3]
   17f60:	mov	r0, #1
   17f64:	strb	r0, [ip, #4]
   17f68:	strb	r3, [ip]
   17f6c:	pop	{r4, pc}
   17f70:	tst	r2, #4
   17f74:	beq	17f00 <__assert_fail@plt+0x69a8>
   17f78:	mov	r3, #30
   17f7c:	strb	r3, [ip, #4]
   17f80:	mov	r0, #2
   17f84:	pop	{r4, pc}
   17f88:	mov	r3, #28
   17f8c:	strb	r3, [ip, #4]
   17f90:	mov	r0, #2
   17f94:	pop	{r4, pc}
   17f98:	ldr	r3, [r1, #8]
   17f9c:	push	{r4, r5, r6, r7, r8, lr}
   17fa0:	mov	r4, #0
   17fa4:	str	r2, [r1]
   17fa8:	mov	r8, r0
   17fac:	str	r3, [r1, #16]
   17fb0:	lsl	r0, r3, #2
   17fb4:	str	r4, [r1, #20]
   17fb8:	mov	r5, r1
   17fbc:	mov	r7, r2
   17fc0:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   17fc4:	cmp	r0, r4
   17fc8:	str	r0, [r5, #24]
   17fcc:	beq	180a0 <__assert_fail@plt+0x6b48>
   17fd0:	ldr	r1, [r5, #8]
   17fd4:	cmp	r1, #0
   17fd8:	bgt	17fec <__assert_fail@plt+0x6a94>
   17fdc:	b	18038 <__assert_fail@plt+0x6ae0>
   17fe0:	add	r4, r4, #1
   17fe4:	cmp	r4, r1
   17fe8:	bge	18038 <__assert_fail@plt+0x6ae0>
   17fec:	ldr	r2, [r5, #12]
   17ff0:	ldr	r3, [r8]
   17ff4:	ldr	r6, [r2, r4, lsl #2]
   17ff8:	add	r3, r3, r6, lsl #3
   17ffc:	ldrb	r3, [r3, #4]
   18000:	tst	r3, #8
   18004:	bne	17fe0 <__assert_fail@plt+0x6a88>
   18008:	ldr	r1, [r5, #20]
   1800c:	ldr	r3, [r5, #16]
   18010:	cmp	r3, r1
   18014:	beq	18078 <__assert_fail@plt+0x6b20>
   18018:	ldr	r0, [r5, #24]
   1801c:	add	r3, r1, #1
   18020:	str	r3, [r5, #20]
   18024:	str	r6, [r0, r1, lsl #2]
   18028:	ldr	r1, [r5, #8]
   1802c:	add	r4, r4, #1
   18030:	cmp	r4, r1
   18034:	blt	17fec <__assert_fail@plt+0x6a94>
   18038:	ldr	r4, [r8, #68]	; 0x44
   1803c:	ldr	r6, [r8, #32]
   18040:	and	r7, r7, r4
   18044:	add	r7, r7, r7, lsl #1
   18048:	lsl	r4, r7, #2
   1804c:	add	r7, r6, r4
   18050:	ldr	r3, [r6, r4]
   18054:	ldr	r2, [r7, #4]
   18058:	cmp	r2, r3
   1805c:	ldrgt	r2, [r7, #8]
   18060:	ble	180a8 <__assert_fail@plt+0x6b50>
   18064:	add	r1, r3, #1
   18068:	str	r1, [r6, r4]
   1806c:	mov	r0, #0
   18070:	str	r5, [r2, r3, lsl #2]
   18074:	pop	{r4, r5, r6, r7, r8, pc}
   18078:	add	r1, r1, #1
   1807c:	ldr	r0, [r5, #24]
   18080:	lsl	r3, r1, #1
   18084:	str	r3, [r5, #16]
   18088:	lsl	r1, r1, #3
   1808c:	bl	2b678 <__assert_fail@plt+0x1a120>
   18090:	cmp	r0, #0
   18094:	ldrne	r1, [r5, #20]
   18098:	strne	r0, [r5, #24]
   1809c:	bne	1801c <__assert_fail@plt+0x6ac4>
   180a0:	mov	r0, #12
   180a4:	pop	{r4, r5, r6, r7, r8, pc}
   180a8:	add	r3, r3, #1
   180ac:	ldr	r0, [r7, #8]
   180b0:	lsl	r1, r3, #3
   180b4:	lsl	r8, r3, #1
   180b8:	bl	2b678 <__assert_fail@plt+0x1a120>
   180bc:	subs	r2, r0, #0
   180c0:	beq	180a0 <__assert_fail@plt+0x6b48>
   180c4:	ldr	r3, [r6, r4]
   180c8:	str	r2, [r7, #8]
   180cc:	str	r8, [r7, #4]
   180d0:	b	18064 <__assert_fail@plt+0x6b0c>
   180d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180d8:	mov	r5, r0
   180dc:	ldr	r8, [r0, #36]	; 0x24
   180e0:	ldr	r3, [r0, #48]	; 0x30
   180e4:	ldr	r4, [r0, #28]
   180e8:	cmp	r8, r3
   180ec:	movge	r8, r3
   180f0:	cmp	r8, r4
   180f4:	sub	sp, sp, #92	; 0x5c
   180f8:	ble	1825c <__assert_fail@plt+0x6d04>
   180fc:	add	r6, r0, #16
   18100:	add	r7, sp, #16
   18104:	mov	fp, #1
   18108:	mvn	sl, #-1073741824	; 0xc0000000
   1810c:	mov	r9, #255	; 0xff
   18110:	b	18190 <__assert_fail@plt+0x6c38>
   18114:	ldr	r3, [r5, #24]
   18118:	ldr	r1, [r5]
   1811c:	add	r3, r4, r3
   18120:	add	r1, r1, r3
   18124:	mov	r3, r6
   18128:	add	r0, sp, #12
   1812c:	bl	2ba20 <__assert_fail@plt+0x1a4c8>
   18130:	sub	r2, r0, #1
   18134:	cmn	r2, #3
   18138:	mov	r3, r0
   1813c:	bhi	18210 <__assert_fail@plt+0x6cb8>
   18140:	cmn	r0, #2
   18144:	ldrne	r2, [sp, #12]
   18148:	beq	18244 <__assert_fail@plt+0x6cec>
   1814c:	ldr	r0, [r5, #8]
   18150:	add	r3, r4, r3
   18154:	add	ip, r4, #1
   18158:	cmp	ip, r3
   1815c:	str	r2, [r0, r4, lsl #2]
   18160:	lsl	r1, r4, #2
   18164:	bge	1826c <__assert_fail@plt+0x6d14>
   18168:	sub	r2, sl, r4
   1816c:	add	r2, r2, r3
   18170:	add	r1, r1, #4
   18174:	add	r0, r0, r1
   18178:	lsl	r2, r2, #2
   1817c:	mov	r1, r9
   18180:	mov	r4, r3
   18184:	bl	1145c <memset@plt>
   18188:	cmp	r8, r4
   1818c:	ble	1825c <__assert_fail@plt+0x6d04>
   18190:	ldm	r6, {r0, r1}
   18194:	ldr	ip, [r5, #64]	; 0x40
   18198:	sub	r2, r8, r4
   1819c:	cmp	ip, #0
   181a0:	stm	r7, {r0, r1}
   181a4:	beq	18114 <__assert_fail@plt+0x6bbc>
   181a8:	ldr	r3, [r5, #80]	; 0x50
   181ac:	cmp	r3, #0
   181b0:	ble	18208 <__assert_fail@plt+0x6cb0>
   181b4:	add	r0, sp, #23
   181b8:	mov	r3, #0
   181bc:	str	r6, [sp, #4]
   181c0:	b	181c8 <__assert_fail@plt+0x6c70>
   181c4:	ldr	ip, [r5, #64]	; 0x40
   181c8:	ldr	r1, [r5]
   181cc:	ldr	r6, [r5, #24]
   181d0:	add	r1, r1, r4
   181d4:	add	r1, r1, r3
   181d8:	ldr	lr, [r5, #4]
   181dc:	ldrb	r1, [r1, r6]
   181e0:	add	lr, lr, r4
   181e4:	ldrb	r1, [ip, r1]
   181e8:	strb	r1, [lr, r3]
   181ec:	ldr	ip, [r5, #80]	; 0x50
   181f0:	add	r3, r3, #1
   181f4:	cmp	ip, r3
   181f8:	cmpgt	r2, r3
   181fc:	strb	r1, [r0, #1]!
   18200:	bgt	181c4 <__assert_fail@plt+0x6c6c>
   18204:	ldr	r6, [sp, #4]
   18208:	add	r1, sp, #24
   1820c:	b	18124 <__assert_fail@plt+0x6bcc>
   18210:	ldr	r3, [r5]
   18214:	ldr	r2, [r5, #24]
   18218:	add	r3, r3, r4
   1821c:	ldr	r1, [r5, #64]	; 0x40
   18220:	ldrb	r2, [r3, r2]
   18224:	cmp	r1, #0
   18228:	mov	r3, fp
   1822c:	str	r2, [sp, #12]
   18230:	ldrbne	r2, [r1, r2]
   18234:	ldm	r7, {r0, r1}
   18238:	strne	r2, [sp, #12]
   1823c:	stm	r6, {r0, r1}
   18240:	b	1814c <__assert_fail@plt+0x6bf4>
   18244:	ldr	r2, [r5, #36]	; 0x24
   18248:	ldr	r3, [r5, #48]	; 0x30
   1824c:	cmp	r2, r3
   18250:	bge	18210 <__assert_fail@plt+0x6cb8>
   18254:	ldm	r7, {r0, r1}
   18258:	stm	r6, {r0, r1}
   1825c:	str	r4, [r5, #28]
   18260:	str	r4, [r5, #32]
   18264:	add	sp, sp, #92	; 0x5c
   18268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1826c:	mov	r4, ip
   18270:	b	18188 <__assert_fail@plt+0x6c30>
   18274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18278:	mov	r4, r0
   1827c:	ldr	r6, [r0, #36]	; 0x24
   18280:	ldr	r3, [r0, #48]	; 0x30
   18284:	ldrb	r2, [r0, #74]	; 0x4a
   18288:	cmp	r6, r3
   1828c:	movge	r6, r3
   18290:	cmp	r2, #0
   18294:	sub	sp, sp, #100	; 0x64
   18298:	ldr	r5, [r0, #28]
   1829c:	bne	182ac <__assert_fail@plt+0x6d54>
   182a0:	ldr	r3, [r0, #64]	; 0x40
   182a4:	cmp	r3, #0
   182a8:	beq	183dc <__assert_fail@plt+0x6e84>
   182ac:	ldr	r7, [r4, #32]
   182b0:	cmp	r5, r6
   182b4:	bge	183c8 <__assert_fail@plt+0x6e70>
   182b8:	add	r3, sp, #24
   182bc:	add	r9, r4, #16
   182c0:	sub	sl, r6, r5
   182c4:	str	r3, [sp, #4]
   182c8:	add	r3, sp, #20
   182cc:	str	r3, [sp, #8]
   182d0:	ldm	r9, {r0, r1}
   182d4:	ldr	r2, [r4, #64]	; 0x40
   182d8:	ldr	r3, [sp, #4]
   182dc:	cmp	r2, #0
   182e0:	stm	r3, {r0, r1}
   182e4:	bne	1852c <__assert_fail@plt+0x6fd4>
   182e8:	ldr	r3, [r4, #24]
   182ec:	ldr	r2, [r4]
   182f0:	add	r3, r7, r3
   182f4:	add	r3, r2, r3
   182f8:	mov	r1, r3
   182fc:	str	r3, [sp, #12]
   18300:	mov	r3, r9
   18304:	mov	r2, sl
   18308:	ldr	r0, [sp, #8]
   1830c:	bl	2ba20 <__assert_fail@plt+0x1a4c8>
   18310:	sub	r3, r0, #1
   18314:	cmn	r3, #4
   18318:	mov	r8, r0
   1831c:	str	r3, [sp, #8]
   18320:	bhi	1863c <__assert_fail@plt+0x70e4>
   18324:	ldr	fp, [sp, #20]
   18328:	mov	r0, fp
   1832c:	bl	1151c <towupper@plt>
   18330:	cmp	fp, r0
   18334:	mov	sl, r0
   18338:	beq	18624 <__assert_fail@plt+0x70cc>
   1833c:	add	r0, sp, #32
   18340:	ldr	r2, [sp, #4]
   18344:	mov	r1, sl
   18348:	bl	111e0 <wcrtomb@plt>
   1834c:	cmp	r8, r0
   18350:	mov	fp, r0
   18354:	bne	186d0 <__assert_fail@plt+0x7178>
   18358:	ldr	r0, [r4, #4]
   1835c:	add	r1, sp, #32
   18360:	add	r0, r0, r5
   18364:	mov	r2, r8
   18368:	bl	11264 <memcpy@plt>
   1836c:	ldrb	r3, [r4, #76]	; 0x4c
   18370:	cmp	r3, #0
   18374:	bne	186b0 <__assert_fail@plt+0x7158>
   18378:	add	r3, r8, r7
   1837c:	ldr	r0, [r4, #8]
   18380:	add	r8, r5, r8
   18384:	add	r2, r5, #1
   18388:	cmp	r2, r8
   1838c:	mov	r7, r3
   18390:	str	sl, [r0, r5, lsl #2]
   18394:	bge	187cc <__assert_fail@plt+0x7274>
   18398:	mvn	r3, #-1073741824	; 0xc0000000
   1839c:	sub	r3, r3, r5
   183a0:	add	r3, r3, r8
   183a4:	add	r0, r0, r2, lsl #2
   183a8:	mov	r1, #255	; 0xff
   183ac:	lsl	r2, r3, #2
   183b0:	mov	r5, r8
   183b4:	bl	1145c <memset@plt>
   183b8:	b	182b0 <__assert_fail@plt+0x6d58>
   183bc:	ldr	r3, [sp, #4]
   183c0:	ldm	r3, {r0, r1}
   183c4:	stm	r9, {r0, r1}
   183c8:	mov	r0, #0
   183cc:	str	r5, [r4, #28]
   183d0:	str	r7, [r4, #32]
   183d4:	add	sp, sp, #100	; 0x64
   183d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183dc:	ldrb	r3, [r0, #76]	; 0x4c
   183e0:	cmp	r3, #0
   183e4:	bne	182ac <__assert_fail@plt+0x6d54>
   183e8:	cmp	r5, r6
   183ec:	bge	18614 <__assert_fail@plt+0x70bc>
   183f0:	add	r9, r0, #16
   183f4:	b	18424 <__assert_fail@plt+0x6ecc>
   183f8:	mov	r0, fp
   183fc:	bl	1151c <towupper@plt>
   18400:	bics	r3, r0, #127	; 0x7f
   18404:	bne	1844c <__assert_fail@plt+0x6ef4>
   18408:	ldr	r3, [r4, #4]
   1840c:	strb	r0, [r3, r5]
   18410:	ldr	r3, [r4, #8]
   18414:	str	r0, [r3, r5, lsl #2]
   18418:	add	r5, r5, #1
   1841c:	cmp	r6, r5
   18420:	ble	18614 <__assert_fail@plt+0x70bc>
   18424:	ldr	r8, [r4]
   18428:	ldr	r7, [r4, #24]
   1842c:	add	r3, r8, r7
   18430:	ldrb	fp, [r3, r5]
   18434:	tst	fp, #128	; 0x80
   18438:	bne	1844c <__assert_fail@plt+0x6ef4>
   1843c:	mov	r0, r9
   18440:	bl	11294 <mbsinit@plt>
   18444:	cmp	r0, #0
   18448:	bne	183f8 <__assert_fail@plt+0x6ea0>
   1844c:	ldm	r9, {r0, r1}
   18450:	add	r3, sp, #24
   18454:	add	r7, r7, r5
   18458:	sub	sl, r6, r5
   1845c:	stm	r3, {r0, r1}
   18460:	mov	r2, sl
   18464:	add	r1, r8, r7
   18468:	mov	r3, r9
   1846c:	add	r0, sp, #20
   18470:	bl	2ba20 <__assert_fail@plt+0x1a4c8>
   18474:	add	r2, sp, #24
   18478:	str	r2, [sp, #4]
   1847c:	add	r2, sp, #20
   18480:	mov	r7, r5
   18484:	str	r2, [sp, #8]
   18488:	sub	r3, r0, #1
   1848c:	cmn	r3, #4
   18490:	mov	r8, r0
   18494:	bhi	185a8 <__assert_fail@plt+0x7050>
   18498:	ldr	r3, [sp, #20]
   1849c:	mov	r0, r3
   184a0:	str	r3, [sp, #12]
   184a4:	bl	1151c <towupper@plt>
   184a8:	ldr	r3, [sp, #12]
   184ac:	cmp	r3, r0
   184b0:	mov	fp, r0
   184b4:	beq	18584 <__assert_fail@plt+0x702c>
   184b8:	mov	r1, r0
   184bc:	add	r2, sp, #24
   184c0:	add	r0, sp, #32
   184c4:	bl	111e0 <wcrtomb@plt>
   184c8:	cmp	r8, r0
   184cc:	bne	185d8 <__assert_fail@plt+0x7080>
   184d0:	ldr	r0, [r4, #4]
   184d4:	mov	r2, r8
   184d8:	add	r0, r0, r5
   184dc:	add	r1, sp, #32
   184e0:	bl	11264 <memcpy@plt>
   184e4:	add	r5, r5, #1
   184e8:	sub	r3, r5, #1
   184ec:	ldr	r0, [r4, #8]
   184f0:	add	r8, r3, r8
   184f4:	cmp	r5, r8
   184f8:	str	fp, [r0, r7, lsl #2]
   184fc:	lsl	r3, r7, #2
   18500:	bge	1841c <__assert_fail@plt+0x6ec4>
   18504:	mvn	r2, #-1073741824	; 0xc0000000
   18508:	sub	r2, r2, r7
   1850c:	add	r2, r2, r8
   18510:	add	r3, r3, #4
   18514:	lsl	r2, r2, #2
   18518:	add	r0, r0, r3
   1851c:	mov	r1, #255	; 0xff
   18520:	mov	r5, r8
   18524:	bl	1145c <memset@plt>
   18528:	b	1841c <__assert_fail@plt+0x6ec4>
   1852c:	ldr	lr, [r4, #80]	; 0x50
   18530:	cmp	lr, #0
   18534:	ble	18574 <__assert_fail@plt+0x701c>
   18538:	ldr	r3, [r4, #24]
   1853c:	ldr	r1, [r4]
   18540:	add	r3, r7, r3
   18544:	sub	r3, r3, #1
   18548:	cmp	lr, sl
   1854c:	add	r1, r1, r3
   18550:	movge	lr, sl
   18554:	add	r0, sp, #31
   18558:	mov	r3, #0
   1855c:	ldrb	ip, [r1, #1]!
   18560:	add	r3, r3, #1
   18564:	cmp	r3, lr
   18568:	ldrb	ip, [r2, ip]
   1856c:	strb	ip, [r0, #1]!
   18570:	blt	1855c <__assert_fail@plt+0x7004>
   18574:	add	r3, sp, #32
   18578:	str	r3, [sp, #12]
   1857c:	mov	r1, r3
   18580:	b	18300 <__assert_fail@plt+0x6da8>
   18584:	ldr	r3, [r4, #24]
   18588:	ldr	r1, [r4]
   1858c:	ldr	r0, [r4, #4]
   18590:	add	r3, r5, r3
   18594:	add	r1, r1, r3
   18598:	add	r0, r0, r5
   1859c:	mov	r2, r8
   185a0:	bl	11264 <memcpy@plt>
   185a4:	b	184e4 <__assert_fail@plt+0x6f8c>
   185a8:	cmn	r3, #3
   185ac:	bne	185e0 <__assert_fail@plt+0x7088>
   185b0:	ldr	r2, [r4, #36]	; 0x24
   185b4:	ldr	r3, [r4, #48]	; 0x30
   185b8:	cmp	r2, r3
   185bc:	blt	18608 <__assert_fail@plt+0x70b0>
   185c0:	ldr	r3, [r4, #4]
   185c4:	strb	fp, [r3, r5]
   185c8:	ldr	r3, [r4, #8]
   185cc:	add	r5, r5, #1
   185d0:	str	fp, [r3, r7, lsl #2]
   185d4:	b	1841c <__assert_fail@plt+0x6ec4>
   185d8:	mov	r7, r5
   185dc:	b	182d0 <__assert_fail@plt+0x6d78>
   185e0:	ldr	r3, [r4, #4]
   185e4:	cmn	r0, #1
   185e8:	strb	fp, [r3, r5]
   185ec:	ldr	r3, [r4, #8]
   185f0:	add	r5, r5, #1
   185f4:	str	fp, [r3, r7, lsl #2]
   185f8:	addeq	r3, sp, #24
   185fc:	ldmeq	r3, {r0, r1}
   18600:	stmeq	r9, {r0, r1}
   18604:	b	1841c <__assert_fail@plt+0x6ec4>
   18608:	add	r3, sp, #24
   1860c:	ldm	r3, {r0, r1}
   18610:	stm	r9, {r0, r1}
   18614:	str	r5, [r4, #28]
   18618:	str	r5, [r4, #32]
   1861c:	mov	r0, #0
   18620:	b	183d4 <__assert_fail@plt+0x6e7c>
   18624:	ldr	r0, [r4, #4]
   18628:	ldr	r1, [sp, #12]
   1862c:	add	r0, r0, r5
   18630:	mov	r2, r8
   18634:	bl	11264 <memcpy@plt>
   18638:	b	1836c <__assert_fail@plt+0x6e14>
   1863c:	cmn	r3, #3
   18640:	bne	18654 <__assert_fail@plt+0x70fc>
   18644:	ldr	r2, [r4, #36]	; 0x24
   18648:	ldr	r3, [r4, #48]	; 0x30
   1864c:	cmp	r2, r3
   18650:	blt	183bc <__assert_fail@plt+0x6e64>
   18654:	ldr	r3, [r4]
   18658:	ldr	r1, [r4, #24]
   1865c:	add	r3, r3, r7
   18660:	ldr	r2, [r4, #64]	; 0x40
   18664:	ldrb	r3, [r3, r1]
   18668:	cmp	r2, #0
   1866c:	mov	r1, r5
   18670:	ldrbne	r3, [r2, r3]
   18674:	ldr	r2, [r4, #4]
   18678:	strb	r3, [r2, r5]
   1867c:	ldrb	r2, [r4, #76]	; 0x4c
   18680:	cmp	r2, #0
   18684:	ldrne	r2, [r4, #12]
   18688:	strne	r7, [r2, r5, lsl #2]
   1868c:	ldr	r2, [r4, #8]
   18690:	cmn	r8, #1
   18694:	add	r7, r7, #1
   18698:	add	r5, r5, #1
   1869c:	str	r3, [r2, r1, lsl #2]
   186a0:	ldreq	r3, [sp, #4]
   186a4:	ldmeq	r3, {r0, r1}
   186a8:	stmeq	r9, {r0, r1}
   186ac:	b	182b0 <__assert_fail@plt+0x6d58>
   186b0:	ldr	r2, [r4, #12]
   186b4:	add	r3, r8, r7
   186b8:	add	r2, r2, r5, lsl #2
   186bc:	str	r7, [r2], #4
   186c0:	add	r7, r7, #1
   186c4:	cmp	r3, r7
   186c8:	bne	186bc <__assert_fail@plt+0x7164>
   186cc:	b	1837c <__assert_fail@plt+0x6e24>
   186d0:	cmn	r0, #1
   186d4:	beq	18624 <__assert_fail@plt+0x70cc>
   186d8:	ldr	r0, [r4, #36]	; 0x24
   186dc:	add	r6, r5, fp
   186e0:	cmp	r6, r0
   186e4:	bhi	183bc <__assert_fail@plt+0x6e64>
   186e8:	ldr	r3, [r4, #12]
   186ec:	cmp	r3, #0
   186f0:	beq	187d4 <__assert_fail@plt+0x727c>
   186f4:	ldrb	r3, [r4, #76]	; 0x4c
   186f8:	cmp	r3, #0
   186fc:	bne	18728 <__assert_fail@plt+0x71d0>
   18700:	cmp	r5, #0
   18704:	ldrne	r2, [r4, #12]
   18708:	subne	r2, r2, #4
   1870c:	beq	18720 <__assert_fail@plt+0x71c8>
   18710:	str	r3, [r2, #4]!
   18714:	add	r3, r3, #1
   18718:	cmp	r5, r3
   1871c:	bne	18710 <__assert_fail@plt+0x71b8>
   18720:	mov	r3, #1
   18724:	strb	r3, [r4, #76]	; 0x4c
   18728:	ldr	r0, [r4, #4]
   1872c:	add	r1, sp, #32
   18730:	mov	r2, fp
   18734:	add	r0, r0, r5
   18738:	bl	11264 <memcpy@plt>
   1873c:	ldr	r3, [r4, #8]
   18740:	ldr	r1, [r4, #12]
   18744:	lsl	r2, r5, #2
   18748:	cmp	fp, #1
   1874c:	str	sl, [r3, r5, lsl #2]
   18750:	add	r3, r3, r2
   18754:	str	r7, [r1, r5, lsl #2]
   18758:	add	r2, r1, r2
   1875c:	bls	1878c <__assert_fail@plt+0x7234>
   18760:	mov	r1, #1
   18764:	mvn	ip, #0
   18768:	cmp	r1, r8
   1876c:	ldr	r0, [sp, #8]
   18770:	movcc	r0, r1
   18774:	add	r1, r1, #1
   18778:	add	r0, r0, r7
   1877c:	cmp	r1, fp
   18780:	str	r0, [r2, #4]!
   18784:	str	ip, [r3, #4]!
   18788:	bne	18768 <__assert_fail@plt+0x7210>
   1878c:	ldr	r2, [r4, #52]	; 0x34
   18790:	ldr	r3, [r4, #48]	; 0x30
   18794:	cmp	r7, r2
   18798:	sub	fp, fp, r8
   1879c:	ldrlt	r2, [r4, #56]	; 0x38
   187a0:	add	r3, fp, r3
   187a4:	addlt	fp, r2, fp
   187a8:	ldr	r2, [r4, #36]	; 0x24
   187ac:	strlt	fp, [r4, #56]	; 0x38
   187b0:	cmp	r3, r2
   187b4:	mov	r5, r6
   187b8:	str	r3, [r4, #48]	; 0x30
   187bc:	add	r7, r8, r7
   187c0:	movlt	r6, r3
   187c4:	movge	r6, r2
   187c8:	b	182b0 <__assert_fail@plt+0x6d58>
   187cc:	mov	r5, r2
   187d0:	b	182b0 <__assert_fail@plt+0x6d58>
   187d4:	lsl	r0, r0, #2
   187d8:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   187dc:	cmp	r0, #0
   187e0:	str	r0, [r4, #12]
   187e4:	moveq	r0, #12
   187e8:	bne	186f4 <__assert_fail@plt+0x719c>
   187ec:	b	183d4 <__assert_fail@plt+0x6e7c>
   187f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187f4:	sub	sp, sp, #12
   187f8:	ldmib	r0, {r5, ip}
   187fc:	stm	sp, {r1, r2}
   18800:	mov	r4, r0
   18804:	cmp	ip, r5
   18808:	mov	r8, sp
   1880c:	ldrb	r6, [sp, #4]
   18810:	bcs	188d0 <__assert_fail@plt+0x7378>
   18814:	ldr	r7, [r0, #12]
   18818:	ldr	r5, [r0, #20]
   1881c:	ldm	r8, {r0, r1}
   18820:	ldr	r3, [r4]
   18824:	cmp	r6, #5
   18828:	add	r3, r3, ip, lsl #3
   1882c:	bic	r2, r1, #261120	; 0x3fc00
   18830:	bic	r2, r2, #768	; 0x300
   18834:	stm	r3, {r0, r1}
   18838:	str	r2, [r3, #4]
   1883c:	beq	188bc <__assert_fail@plt+0x7364>
   18840:	sub	r6, r6, #6
   18844:	clz	r6, r6
   18848:	lsr	r6, r6, #5
   1884c:	ldrb	r2, [r3, #6]
   18850:	mvn	r1, #0
   18854:	bic	r2, r2, #16
   18858:	orr	r2, r2, r6, lsl #4
   1885c:	strb	r2, [r3, #6]
   18860:	str	r1, [r7, ip, lsl #2]
   18864:	ldr	r3, [r4, #8]
   18868:	mov	r2, #0
   1886c:	add	r3, r3, r3, lsl #1
   18870:	lsl	r3, r3, #2
   18874:	add	r1, r5, r3
   18878:	str	r2, [r5, r3]
   1887c:	str	r2, [r1, #4]
   18880:	str	r2, [r1, #8]
   18884:	ldr	r3, [r4, #8]
   18888:	ldr	r0, [r4, #24]
   1888c:	add	r3, r3, r3, lsl #1
   18890:	lsl	r3, r3, #2
   18894:	add	r1, r0, r3
   18898:	str	r2, [r0, r3]
   1889c:	str	r2, [r1, #4]
   188a0:	str	r2, [r1, #8]
   188a4:	ldr	r3, [r4, #8]
   188a8:	mov	r0, r3
   188ac:	add	r3, r3, #1
   188b0:	str	r3, [r4, #8]
   188b4:	add	sp, sp, #12
   188b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188bc:	ldr	r6, [r4, #92]	; 0x5c
   188c0:	cmp	r6, #1
   188c4:	movle	r6, #0
   188c8:	movgt	r6, #1
   188cc:	b	1884c <__assert_fail@plt+0x72f4>
   188d0:	ldr	r3, [pc, #200]	; 189a0 <__assert_fail@plt+0x7448>
   188d4:	lsl	r9, r5, #1
   188d8:	cmp	r9, r3
   188dc:	bhi	18998 <__assert_fail@plt+0x7440>
   188e0:	lsl	r1, r5, #4
   188e4:	ldr	r0, [r0]
   188e8:	bl	2b678 <__assert_fail@plt+0x1a120>
   188ec:	cmp	r0, #0
   188f0:	beq	18998 <__assert_fail@plt+0x7440>
   188f4:	lsl	sl, r5, #3
   188f8:	mov	r1, sl
   188fc:	str	r0, [r4]
   18900:	ldr	r0, [r4, #12]
   18904:	bl	2b678 <__assert_fail@plt+0x1a120>
   18908:	mov	r1, sl
   1890c:	add	r5, r9, r5, lsl #2
   18910:	lsl	sl, r5, #2
   18914:	mov	r7, r0
   18918:	ldr	r0, [r4, #16]
   1891c:	bl	2b678 <__assert_fail@plt+0x1a120>
   18920:	mov	r1, sl
   18924:	mov	fp, r0
   18928:	ldr	r0, [r4, #20]
   1892c:	bl	2b678 <__assert_fail@plt+0x1a120>
   18930:	mov	r1, sl
   18934:	mov	r5, r0
   18938:	ldr	r0, [r4, #24]
   1893c:	bl	2b678 <__assert_fail@plt+0x1a120>
   18940:	cmp	fp, #0
   18944:	cmpne	r7, #0
   18948:	mov	sl, r0
   1894c:	beq	18978 <__assert_fail@plt+0x7420>
   18950:	cmp	r0, #0
   18954:	cmpne	r5, #0
   18958:	beq	18978 <__assert_fail@plt+0x7420>
   1895c:	ldr	ip, [r4, #8]
   18960:	str	r7, [r4, #12]
   18964:	str	fp, [r4, #16]
   18968:	str	r5, [r4, #20]
   1896c:	str	r0, [r4, #24]
   18970:	str	r9, [r4, #4]
   18974:	b	1881c <__assert_fail@plt+0x72c4>
   18978:	mov	r0, r7
   1897c:	bl	13c04 <__assert_fail@plt+0x26ac>
   18980:	mov	r0, fp
   18984:	bl	13c04 <__assert_fail@plt+0x26ac>
   18988:	mov	r0, r5
   1898c:	bl	13c04 <__assert_fail@plt+0x26ac>
   18990:	mov	r0, sl
   18994:	bl	13c04 <__assert_fail@plt+0x26ac>
   18998:	mvn	r0, #0
   1899c:	b	188b4 <__assert_fail@plt+0x735c>
   189a0:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   189a4:	ldr	r3, [r0]
   189a8:	push	{r4, r5, r6, lr}
   189ac:	cmp	r3, #0
   189b0:	mov	r4, r0
   189b4:	mov	r6, r1
   189b8:	beq	189e4 <__assert_fail@plt+0x748c>
   189bc:	ldr	r2, [r0, #4]
   189c0:	cmp	r2, #0
   189c4:	bne	18a14 <__assert_fail@plt+0x74bc>
   189c8:	ldr	r3, [r0, #8]
   189cc:	mov	r0, #1
   189d0:	str	r1, [r3]
   189d4:	ldr	r3, [r4, #4]
   189d8:	add	r3, r3, r0
   189dc:	str	r3, [r4, #4]
   189e0:	pop	{r4, r5, r6, pc}
   189e4:	mov	r5, #1
   189e8:	str	r5, [r0]
   189ec:	str	r5, [r0, #4]
   189f0:	mov	r0, #4
   189f4:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   189f8:	cmp	r0, #0
   189fc:	str	r0, [r4, #8]
   18a00:	strne	r6, [r0]
   18a04:	streq	r0, [r4, #4]
   18a08:	streq	r0, [r4]
   18a0c:	movne	r0, r5
   18a10:	pop	{r4, r5, r6, pc}
   18a14:	cmp	r3, r2
   18a18:	beq	18a94 <__assert_fail@plt+0x753c>
   18a1c:	ldr	r5, [r0, #8]
   18a20:	ldr	r3, [r5]
   18a24:	cmp	r6, r3
   18a28:	bge	18a60 <__assert_fail@plt+0x7508>
   18a2c:	cmp	r2, #0
   18a30:	ble	18a48 <__assert_fail@plt+0x74f0>
   18a34:	lsl	r2, r2, #2
   18a38:	mov	r1, r5
   18a3c:	add	r0, r5, #4
   18a40:	bl	11234 <memmove@plt>
   18a44:	mov	r2, #0
   18a48:	str	r6, [r5, r2, lsl #2]
   18a4c:	ldr	r3, [r4, #4]
   18a50:	mov	r0, #1
   18a54:	add	r3, r3, r0
   18a58:	str	r3, [r4, #4]
   18a5c:	pop	{r4, r5, r6, pc}
   18a60:	sub	r3, r2, #-1073741823	; 0xc0000001
   18a64:	ldr	r1, [r5, r3, lsl #2]
   18a68:	lsl	r3, r3, #2
   18a6c:	cmp	r6, r1
   18a70:	bge	18a48 <__assert_fail@plt+0x74f0>
   18a74:	add	r3, r3, #4
   18a78:	add	r3, r5, r3
   18a7c:	str	r1, [r3], #-4
   18a80:	ldr	r1, [r3, #-4]
   18a84:	sub	r2, r2, #1
   18a88:	cmp	r6, r1
   18a8c:	blt	18a7c <__assert_fail@plt+0x7524>
   18a90:	b	18a48 <__assert_fail@plt+0x74f0>
   18a94:	lsl	r3, r2, #1
   18a98:	str	r3, [r0]
   18a9c:	lsl	r1, r2, #3
   18aa0:	ldr	r0, [r0, #8]
   18aa4:	bl	2b678 <__assert_fail@plt+0x1a120>
   18aa8:	subs	r5, r0, #0
   18aac:	ldrne	r2, [r4, #4]
   18ab0:	strne	r5, [r4, #8]
   18ab4:	bne	18a20 <__assert_fail@plt+0x74c8>
   18ab8:	mov	r0, r5
   18abc:	pop	{r4, r5, r6, pc}
   18ac0:	cmp	r0, #0
   18ac4:	ble	18b48 <__assert_fail@plt+0x75f0>
   18ac8:	push	{lr}		; (str lr, [sp, #-4]!)
   18acc:	sub	ip, r0, #1
   18ad0:	ldr	lr, [r1]
   18ad4:	mov	r0, #0
   18ad8:	cmp	r0, ip
   18adc:	bcs	18b18 <__assert_fail@plt+0x75c0>
   18ae0:	add	r1, r0, ip
   18ae4:	lsr	r1, r1, #1
   18ae8:	ldr	r3, [lr, r1, lsl #2]
   18aec:	cmp	r2, r3
   18af0:	ble	18b08 <__assert_fail@plt+0x75b0>
   18af4:	b	18b2c <__assert_fail@plt+0x75d4>
   18af8:	ldr	ip, [lr, r3, lsl #2]
   18afc:	cmp	ip, r2
   18b00:	blt	18b34 <__assert_fail@plt+0x75dc>
   18b04:	mov	r1, r3
   18b08:	add	r3, r0, r1
   18b0c:	cmp	r0, r1
   18b10:	lsr	r3, r3, #1
   18b14:	bcc	18af8 <__assert_fail@plt+0x75a0>
   18b18:	ldr	r3, [lr, r0, lsl #2]
   18b1c:	cmp	r2, r3
   18b20:	beq	18b40 <__assert_fail@plt+0x75e8>
   18b24:	mov	r0, #0
   18b28:	pop	{pc}		; (ldr pc, [sp], #4)
   18b2c:	mov	r3, r1
   18b30:	mov	r1, ip
   18b34:	add	r0, r3, #1
   18b38:	mov	ip, r1
   18b3c:	b	18ad8 <__assert_fail@plt+0x7580>
   18b40:	add	r0, r0, #1
   18b44:	pop	{pc}		; (ldr pc, [sp], #4)
   18b48:	mov	r0, #0
   18b4c:	bx	lr
   18b50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18b54:	mov	sl, r0
   18b58:	ldr	r7, [r2, #4]
   18b5c:	ldr	r0, [r1, #4]
   18b60:	ldr	r3, [sl, #4]
   18b64:	ldr	r9, [r1, #8]
   18b68:	ldr	r8, [r2, #8]
   18b6c:	sub	r5, r0, #1
   18b70:	sub	r6, r7, #1
   18b74:	add	r0, r3, r0
   18b78:	add	r7, r0, r7
   18b7c:	ldr	ip, [r9, r5, lsl #2]
   18b80:	ldr	r4, [r8, r6, lsl #2]
   18b84:	ldr	r0, [sl, #8]
   18b88:	sub	r3, r3, #1
   18b8c:	cmp	ip, r4
   18b90:	beq	18bac <__assert_fail@plt+0x7654>
   18b94:	bge	18bfc <__assert_fail@plt+0x76a4>
   18b98:	subs	r6, r6, #1
   18b9c:	bmi	18c1c <__assert_fail@plt+0x76c4>
   18ba0:	ldr	r4, [r8, r6, lsl #2]
   18ba4:	cmp	ip, r4
   18ba8:	bne	18b94 <__assert_fail@plt+0x763c>
   18bac:	cmp	r3, #0
   18bb0:	blt	18bdc <__assert_fail@plt+0x7684>
   18bb4:	ldr	lr, [r0, r3, lsl #2]
   18bb8:	add	ip, r0, r3, lsl #2
   18bbc:	cmp	lr, r4
   18bc0:	bgt	18bd4 <__assert_fail@plt+0x767c>
   18bc4:	b	18c0c <__assert_fail@plt+0x76b4>
   18bc8:	ldr	lr, [ip, #-4]!
   18bcc:	cmp	lr, r4
   18bd0:	ble	18c0c <__assert_fail@plt+0x76b4>
   18bd4:	subs	r3, r3, #1
   18bd8:	bcs	18bc8 <__assert_fail@plt+0x7670>
   18bdc:	sub	r7, r7, #1
   18be0:	subs	r5, r5, #1
   18be4:	str	r4, [r0, r7, lsl #2]
   18be8:	bmi	18c1c <__assert_fail@plt+0x76c4>
   18bec:	subs	r6, r6, #1
   18bf0:	bmi	18c1c <__assert_fail@plt+0x76c4>
   18bf4:	ldr	ip, [r9, r5, lsl #2]
   18bf8:	b	18ba0 <__assert_fail@plt+0x7648>
   18bfc:	subs	r5, r5, #1
   18c00:	bmi	18c1c <__assert_fail@plt+0x76c4>
   18c04:	ldr	ip, [r9, r5, lsl #2]
   18c08:	b	18b8c <__assert_fail@plt+0x7634>
   18c0c:	cmp	lr, r4
   18c10:	bne	18bdc <__assert_fail@plt+0x7684>
   18c14:	subs	r5, r5, #1
   18c18:	bpl	18bec <__assert_fail@plt+0x7694>
   18c1c:	ldr	ip, [sl, #4]
   18c20:	ldr	r1, [r1, #4]
   18c24:	ldr	r3, [r2, #4]
   18c28:	add	r1, ip, r1
   18c2c:	add	r1, r1, r3
   18c30:	sub	r2, r1, r7
   18c34:	sub	r3, ip, #1
   18c38:	cmp	r3, #0
   18c3c:	cmpge	r2, #0
   18c40:	add	ip, ip, r2
   18c44:	sub	r1, r1, #1
   18c48:	str	ip, [sl, #4]
   18c4c:	bgt	18c74 <__assert_fail@plt+0x771c>
   18c50:	lsl	r2, r2, #2
   18c54:	add	r1, r0, r7, lsl #2
   18c58:	bl	11264 <memcpy@plt>
   18c5c:	mov	r0, #0
   18c60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18c64:	sub	r3, r3, #1
   18c68:	cmn	r3, #1
   18c6c:	str	ip, [r0, r5, lsl #2]
   18c70:	beq	18c50 <__assert_fail@plt+0x76f8>
   18c74:	ldr	lr, [r0, r1, lsl #2]
   18c78:	ldr	ip, [r0, r3, lsl #2]
   18c7c:	add	r5, r3, r2
   18c80:	cmp	lr, ip
   18c84:	mov	r4, r5
   18c88:	ble	18c64 <__assert_fail@plt+0x770c>
   18c8c:	subs	r2, r2, #1
   18c90:	sub	r1, r1, #1
   18c94:	str	lr, [r0, r5, lsl #2]
   18c98:	bne	18c74 <__assert_fail@plt+0x771c>
   18c9c:	b	18c54 <__assert_fail@plt+0x76fc>
   18ca0:	push	{r4, r5, r6, lr}
   18ca4:	mov	r5, r0
   18ca8:	ldr	r0, [r1]
   18cac:	sub	sp, sp, #16
   18cb0:	cmp	r0, #31
   18cb4:	beq	18d28 <__assert_fail@plt+0x77d0>
   18cb8:	lsl	ip, r0, #5
   18cbc:	ldr	r4, [r5]
   18cc0:	add	r0, r0, #1
   18cc4:	add	r6, ip, #4
   18cc8:	str	r0, [r1]
   18ccc:	ldr	r1, [sp, #32]
   18cd0:	add	ip, r4, ip
   18cd4:	mov	r5, #0
   18cd8:	str	r2, [ip, #8]
   18cdc:	str	r3, [ip, #12]
   18ce0:	str	r5, [ip, #4]
   18ce4:	ldm	r1, {r0, r1}
   18ce8:	add	lr, ip, #24
   18cec:	cmp	r2, r5
   18cf0:	stm	lr, {r0, r1}
   18cf4:	ldrb	r1, [ip, #30]
   18cf8:	mvn	lr, #0
   18cfc:	add	r0, r4, r6
   18d00:	and	r1, r1, #243	; 0xf3
   18d04:	str	r5, [ip, #16]
   18d08:	str	r5, [ip, #20]
   18d0c:	strb	r1, [ip, #30]
   18d10:	str	lr, [ip, #32]
   18d14:	strne	r0, [r2]
   18d18:	cmp	r3, #0
   18d1c:	strne	r0, [r3]
   18d20:	add	sp, sp, #16
   18d24:	pop	{r4, r5, r6, pc}
   18d28:	mov	r0, #996	; 0x3e4
   18d2c:	stmib	sp, {r1, r2, r3}
   18d30:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   18d34:	subs	r4, r0, #0
   18d38:	beq	18d5c <__assert_fail@plt+0x7804>
   18d3c:	ldr	ip, [r5]
   18d40:	mov	r6, #4
   18d44:	str	ip, [r4]
   18d48:	mov	r0, #1
   18d4c:	mov	ip, #0
   18d50:	str	r4, [r5]
   18d54:	ldmib	sp, {r1, r2, r3}
   18d58:	b	18cc8 <__assert_fail@plt+0x7770>
   18d5c:	mov	r0, r4
   18d60:	b	18d20 <__assert_fail@plt+0x77c8>
   18d64:	push	{r4, r5, r6, lr}
   18d68:	mov	r4, r0
   18d6c:	ldr	r0, [r1, #4]
   18d70:	str	r0, [r4, #4]
   18d74:	ldr	r2, [r1, #4]
   18d78:	cmp	r2, #0
   18d7c:	ble	18db4 <__assert_fail@plt+0x785c>
   18d80:	str	r0, [r4]
   18d84:	lsl	r0, r0, #2
   18d88:	mov	r5, r1
   18d8c:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   18d90:	cmp	r0, #0
   18d94:	str	r0, [r4, #8]
   18d98:	beq	18dcc <__assert_fail@plt+0x7874>
   18d9c:	ldr	r2, [r5, #4]
   18da0:	ldr	r1, [r5, #8]
   18da4:	lsl	r2, r2, #2
   18da8:	bl	11264 <memcpy@plt>
   18dac:	mov	r0, #0
   18db0:	pop	{r4, r5, r6, pc}
   18db4:	mov	r2, #0
   18db8:	mov	r0, r2
   18dbc:	str	r2, [r4]
   18dc0:	str	r2, [r4, #4]
   18dc4:	str	r2, [r4, #8]
   18dc8:	pop	{r4, r5, r6, pc}
   18dcc:	str	r0, [r4, #4]
   18dd0:	str	r0, [r4]
   18dd4:	mov	r0, #12
   18dd8:	pop	{r4, r5, r6, pc}
   18ddc:	cmp	r1, #0
   18de0:	beq	18eac <__assert_fail@plt+0x7954>
   18de4:	ldr	r3, [r1, #4]
   18de8:	cmp	r2, #0
   18dec:	cmpne	r3, #0
   18df0:	ble	18ea4 <__assert_fail@plt+0x794c>
   18df4:	ldr	ip, [r2, #4]
   18df8:	cmp	ip, #0
   18dfc:	ble	18ec4 <__assert_fail@plt+0x796c>
   18e00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18e04:	mov	r8, r0
   18e08:	add	r0, r3, ip
   18e0c:	str	r0, [r8]
   18e10:	lsl	r0, r0, #2
   18e14:	mov	r5, r2
   18e18:	mov	r7, r1
   18e1c:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   18e20:	cmp	r0, #0
   18e24:	str	r0, [r8, #8]
   18e28:	beq	18f20 <__assert_fail@plt+0x79c8>
   18e2c:	mov	r3, #0
   18e30:	mov	ip, r3
   18e34:	ldr	r9, [r7, #4]
   18e38:	ldr	sl, [r5, #4]
   18e3c:	mov	r4, r0
   18e40:	mov	lr, #1
   18e44:	b	18e84 <__assert_fail@plt+0x792c>
   18e48:	cmp	r3, sl
   18e4c:	bge	18ee0 <__assert_fail@plt+0x7988>
   18e50:	ldr	r2, [r7, #8]
   18e54:	ldr	r1, [r5, #8]
   18e58:	ldr	r2, [r2, ip, lsl #2]
   18e5c:	ldr	r6, [r1, r3, lsl #2]
   18e60:	cmp	r2, r6
   18e64:	addgt	r3, r3, #1
   18e68:	strgt	r6, [r4]
   18e6c:	bgt	18e7c <__assert_fail@plt+0x7924>
   18e70:	add	ip, ip, #1
   18e74:	addeq	r3, r3, #1
   18e78:	str	r2, [r4]
   18e7c:	add	lr, lr, #1
   18e80:	add	r4, r4, #4
   18e84:	cmp	ip, r9
   18e88:	sub	r6, lr, #1
   18e8c:	blt	18e48 <__assert_fail@plt+0x78f0>
   18e90:	cmp	r3, sl
   18e94:	blt	18f00 <__assert_fail@plt+0x79a8>
   18e98:	str	r6, [r8, #4]
   18e9c:	mov	r0, #0
   18ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18ea4:	cmp	r3, #0
   18ea8:	bgt	18ec4 <__assert_fail@plt+0x796c>
   18eac:	cmp	r2, #0
   18eb0:	beq	18ec8 <__assert_fail@plt+0x7970>
   18eb4:	ldr	r3, [r2, #4]
   18eb8:	cmp	r3, #0
   18ebc:	ble	18ec8 <__assert_fail@plt+0x7970>
   18ec0:	mov	r1, r2
   18ec4:	b	18d64 <__assert_fail@plt+0x780c>
   18ec8:	mov	r3, #0
   18ecc:	str	r3, [r0]
   18ed0:	str	r3, [r0, #4]
   18ed4:	str	r3, [r0, #8]
   18ed8:	mov	r0, r3
   18edc:	bx	lr
   18ee0:	sub	r9, r9, ip
   18ee4:	ldr	r1, [r7, #8]
   18ee8:	add	r0, r0, r6, lsl #2
   18eec:	add	r1, r1, ip, lsl #2
   18ef0:	lsl	r2, r9, #2
   18ef4:	add	r6, r6, r9
   18ef8:	bl	11264 <memcpy@plt>
   18efc:	b	18e98 <__assert_fail@plt+0x7940>
   18f00:	sub	sl, sl, r3
   18f04:	ldr	r1, [r5, #8]
   18f08:	add	r0, r0, r6, lsl #2
   18f0c:	add	r1, r1, r3, lsl #2
   18f10:	lsl	r2, sl, #2
   18f14:	bl	11264 <memcpy@plt>
   18f18:	add	r6, r6, sl
   18f1c:	b	18e98 <__assert_fail@plt+0x7940>
   18f20:	mov	r0, #12
   18f24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18f28:	push	{r4, r5, r6, r7, r8, lr}
   18f2c:	mov	r5, r0
   18f30:	ldr	r4, [r0, #4]
   18f34:	mov	r6, r1
   18f38:	cmp	r4, #0
   18f3c:	beq	19048 <__assert_fail@plt+0x7af0>
   18f40:	ldr	r1, [r1, #4]
   18f44:	sub	r3, r4, #1
   18f48:	sub	r2, r1, #1
   18f4c:	add	r4, r4, r1, lsl #1
   18f50:	mvn	r7, r2
   18f54:	mvn	lr, r3
   18f58:	tst	r7, lr
   18f5c:	bpl	18f98 <__assert_fail@plt+0x7a40>
   18f60:	ldr	r1, [r5, #8]
   18f64:	ldr	r0, [r6, #8]
   18f68:	ldr	ip, [r1, r3, lsl #2]
   18f6c:	ldr	r0, [r0, r2, lsl #2]
   18f70:	cmp	ip, r0
   18f74:	beq	19034 <__assert_fail@plt+0x7adc>
   18f78:	sublt	r4, r4, #1
   18f7c:	sublt	r2, r2, #1
   18f80:	subge	r3, r3, #1
   18f84:	mvnlt	r7, r2
   18f88:	mvnge	lr, r3
   18f8c:	strlt	r0, [r1, r4, lsl #2]
   18f90:	tst	r7, lr
   18f94:	bmi	18f60 <__assert_fail@plt+0x7a08>
   18f98:	cmp	r2, #0
   18f9c:	blt	18fbc <__assert_fail@plt+0x7a64>
   18fa0:	add	r2, r2, #1
   18fa4:	sub	r4, r4, r2
   18fa8:	ldr	r0, [r5, #8]
   18fac:	lsl	r2, r2, #2
   18fb0:	add	r0, r0, r4, lsl #2
   18fb4:	ldr	r1, [r6, #8]
   18fb8:	bl	11264 <memcpy@plt>
   18fbc:	ldr	r1, [r6, #4]
   18fc0:	ldr	ip, [r5, #4]
   18fc4:	add	r1, ip, r1, lsl #1
   18fc8:	subs	r2, r1, r4
   18fcc:	sub	r1, r1, #1
   18fd0:	beq	1900c <__assert_fail@plt+0x7ab4>
   18fd4:	ldr	r0, [r5, #8]
   18fd8:	sub	r3, ip, #1
   18fdc:	add	ip, ip, r2
   18fe0:	str	ip, [r5, #4]
   18fe4:	ldr	lr, [r0, r1, lsl #2]
   18fe8:	ldr	ip, [r0, r3, lsl #2]
   18fec:	add	r6, r3, r2
   18ff0:	cmp	lr, ip
   18ff4:	mov	r5, r6
   18ff8:	ble	19014 <__assert_fail@plt+0x7abc>
   18ffc:	subs	r2, r2, #1
   19000:	sub	r1, r1, #1
   19004:	str	lr, [r0, r6, lsl #2]
   19008:	bne	18fe4 <__assert_fail@plt+0x7a8c>
   1900c:	mov	r0, #0
   19010:	pop	{r4, r5, r6, r7, r8, pc}
   19014:	subs	r3, r3, #1
   19018:	str	ip, [r0, r6, lsl #2]
   1901c:	bpl	18fe4 <__assert_fail@plt+0x7a8c>
   19020:	lsl	r2, r2, #2
   19024:	add	r1, r0, r4, lsl #2
   19028:	bl	11264 <memcpy@plt>
   1902c:	mov	r0, #0
   19030:	pop	{r4, r5, r6, r7, r8, pc}
   19034:	sub	r2, r2, #1
   19038:	sub	r3, r3, #1
   1903c:	mvn	r7, r2
   19040:	mvn	lr, r3
   19044:	b	18f58 <__assert_fail@plt+0x7a00>
   19048:	ldr	r3, [r1, #4]
   1904c:	ldr	r0, [r0, #8]
   19050:	str	r3, [r5, #4]
   19054:	ldr	r2, [r1, #4]
   19058:	ldr	r1, [r1, #8]
   1905c:	lsl	r2, r2, #2
   19060:	bl	11264 <memcpy@plt>
   19064:	mov	r0, #0
   19068:	pop	{r4, r5, r6, r7, r8, pc}
   1906c:	cmp	r1, #0
   19070:	push	{r4, r5, r6, lr}
   19074:	mov	r5, r0
   19078:	blt	190d4 <__assert_fail@plt+0x7b7c>
   1907c:	ldr	r3, [r0, #48]	; 0x30
   19080:	cmp	r1, r3
   19084:	beq	19148 <__assert_fail@plt+0x7bf0>
   19088:	ldr	r3, [r0, #80]	; 0x50
   1908c:	cmp	r3, #1
   19090:	ble	190dc <__assert_fail@plt+0x7b84>
   19094:	ldr	r3, [r0, #8]
   19098:	add	r3, r3, r1, lsl #2
   1909c:	b	190a8 <__assert_fail@plt+0x7b50>
   190a0:	cmn	r1, #1
   190a4:	beq	190d4 <__assert_fail@plt+0x7b7c>
   190a8:	ldr	r4, [r3], #-4
   190ac:	sub	r1, r1, #1
   190b0:	cmn	r4, #1
   190b4:	beq	190a0 <__assert_fail@plt+0x7b48>
   190b8:	ldrb	r3, [r5, #78]	; 0x4e
   190bc:	cmp	r3, #0
   190c0:	bne	1911c <__assert_fail@plt+0x7bc4>
   190c4:	cmp	r4, #10
   190c8:	beq	19108 <__assert_fail@plt+0x7bb0>
   190cc:	mov	r0, #0
   190d0:	pop	{r4, r5, r6, pc}
   190d4:	ldr	r0, [r5, #60]	; 0x3c
   190d8:	pop	{r4, r5, r6, pc}
   190dc:	ldr	r3, [r0, #4]
   190e0:	ldr	r0, [r0, #68]	; 0x44
   190e4:	ldrb	r3, [r3, r1]
   190e8:	and	r2, r3, #31
   190ec:	asr	r1, r3, #5
   190f0:	ldr	r0, [r0, r1, lsl #2]
   190f4:	lsr	r0, r0, r2
   190f8:	ands	r0, r0, #1
   190fc:	bne	19140 <__assert_fail@plt+0x7be8>
   19100:	cmp	r3, #10
   19104:	popne	{r4, r5, r6, pc}
   19108:	ldrb	r0, [r5, #77]	; 0x4d
   1910c:	cmp	r0, #0
   19110:	movne	r0, #2
   19114:	moveq	r0, #0
   19118:	pop	{r4, r5, r6, pc}
   1911c:	mov	r0, r4
   19120:	bl	11438 <iswalnum@plt>
   19124:	sub	r3, r4, #95	; 0x5f
   19128:	clz	r3, r3
   1912c:	lsr	r3, r3, #5
   19130:	cmp	r0, #0
   19134:	orrne	r3, r3, #1
   19138:	cmp	r3, #0
   1913c:	beq	190c4 <__assert_fail@plt+0x7b6c>
   19140:	mov	r0, #1
   19144:	pop	{r4, r5, r6, pc}
   19148:	tst	r2, #2
   1914c:	moveq	r0, #10
   19150:	movne	r0, #8
   19154:	pop	{r4, r5, r6, pc}
   19158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1915c:	mov	r4, r0
   19160:	ldr	r6, [r0, #24]
   19164:	sub	sp, sp, #36	; 0x24
   19168:	cmp	r6, r1
   1916c:	mov	r7, r1
   19170:	mov	r8, r2
   19174:	suble	r5, r1, r6
   19178:	ble	191dc <__assert_fail@plt+0x7c84>
   1917c:	ldr	r3, [r0, #80]	; 0x50
   19180:	ldr	r1, [r0, #44]	; 0x2c
   19184:	cmp	r3, #1
   19188:	ldrb	r3, [r0, #75]	; 0x4b
   1918c:	movgt	r2, #0
   19190:	strgt	r2, [r0, #16]
   19194:	strgt	r2, [r0, #20]
   19198:	tst	r8, #1
   1919c:	ldr	r2, [r0, #52]	; 0x34
   191a0:	moveq	r0, #6
   191a4:	movne	r0, #4
   191a8:	cmp	r3, #0
   191ac:	mov	r6, #0
   191b0:	str	r2, [r4, #56]	; 0x38
   191b4:	str	r6, [r4, #28]
   191b8:	str	r6, [r4, #24]
   191bc:	str	r6, [r4, #32]
   191c0:	strb	r6, [r4, #76]	; 0x4c
   191c4:	ldreq	r2, [r4]
   191c8:	moveq	r6, r3
   191cc:	mov	r5, r7
   191d0:	str	r0, [r4, #60]	; 0x3c
   191d4:	str	r1, [r4, #48]	; 0x30
   191d8:	streq	r2, [r4, #4]
   191dc:	cmp	r5, #0
   191e0:	ldreq	r3, [r4, #80]	; 0x50
   191e4:	beq	19274 <__assert_fail@plt+0x7d1c>
   191e8:	ldr	r2, [r4, #32]
   191ec:	ldrb	r3, [r4, #76]	; 0x4c
   191f0:	cmp	r5, r2
   191f4:	bge	19344 <__assert_fail@plt+0x7dec>
   191f8:	cmp	r3, #0
   191fc:	bne	19460 <__assert_fail@plt+0x7f08>
   19200:	mov	r2, r8
   19204:	sub	r1, r5, #1
   19208:	mov	r0, r4
   1920c:	bl	1906c <__assert_fail@plt+0x7b14>
   19210:	ldr	r3, [r4, #80]	; 0x50
   19214:	cmp	r3, #1
   19218:	str	r0, [r4, #60]	; 0x3c
   1921c:	ble	19238 <__assert_fail@plt+0x7ce0>
   19220:	ldr	r2, [r4, #28]
   19224:	ldr	r0, [r4, #8]
   19228:	sub	r2, r2, r5
   1922c:	add	r1, r0, r5, lsl #2
   19230:	lsl	r2, r2, #2
   19234:	bl	11234 <memmove@plt>
   19238:	ldrb	r3, [r4, #75]	; 0x4b
   1923c:	cmp	r3, #0
   19240:	bne	195a0 <__assert_fail@plt+0x8048>
   19244:	ldr	r0, [r4, #28]
   19248:	ldr	r1, [r4, #32]
   1924c:	mov	r2, r3
   19250:	ldr	r3, [r4, #80]	; 0x50
   19254:	sub	r0, r0, r5
   19258:	sub	r1, r1, r5
   1925c:	str	r0, [r4, #28]
   19260:	str	r1, [r4, #32]
   19264:	cmp	r2, #0
   19268:	ldreq	r2, [r4, #4]
   1926c:	addeq	r2, r2, r5
   19270:	streq	r2, [r4, #4]
   19274:	ldr	r2, [r4, #48]	; 0x30
   19278:	ldr	r1, [r4, #56]	; 0x38
   1927c:	cmp	r3, #1
   19280:	sub	r3, r2, r5
   19284:	sub	r5, r1, r5
   19288:	str	r7, [r4, #24]
   1928c:	str	r3, [r4, #48]	; 0x30
   19290:	str	r5, [r4, #56]	; 0x38
   19294:	ble	192cc <__assert_fail@plt+0x7d74>
   19298:	ldrb	r3, [r4, #72]	; 0x48
   1929c:	mov	r0, r4
   192a0:	cmp	r3, #0
   192a4:	bne	192bc <__assert_fail@plt+0x7d64>
   192a8:	bl	180d4 <__assert_fail@plt+0x6b7c>
   192ac:	mov	r0, #0
   192b0:	str	r0, [r4, #40]	; 0x28
   192b4:	add	sp, sp, #36	; 0x24
   192b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   192bc:	bl	18274 <__assert_fail@plt+0x6d1c>
   192c0:	cmp	r0, #0
   192c4:	beq	192ac <__assert_fail@plt+0x7d54>
   192c8:	b	192b4 <__assert_fail@plt+0x7d5c>
   192cc:	ldrb	r2, [r4, #75]	; 0x4b
   192d0:	cmp	r2, #0
   192d4:	streq	r3, [r4, #28]
   192d8:	beq	192ac <__assert_fail@plt+0x7d54>
   192dc:	ldrb	r2, [r4, #72]	; 0x48
   192e0:	cmp	r2, #0
   192e4:	bne	19814 <__assert_fail@plt+0x82bc>
   192e8:	ldr	r0, [r4, #64]	; 0x40
   192ec:	cmp	r0, #0
   192f0:	beq	192ac <__assert_fail@plt+0x7d54>
   192f4:	ldr	r1, [r4, #36]	; 0x24
   192f8:	ldr	r2, [r4, #28]
   192fc:	cmp	r3, r1
   19300:	movge	r3, r1
   19304:	cmp	r3, r2
   19308:	bgt	19318 <__assert_fail@plt+0x7dc0>
   1930c:	b	19338 <__assert_fail@plt+0x7de0>
   19310:	ldr	r7, [r4, #24]
   19314:	ldr	r0, [r4, #64]	; 0x40
   19318:	ldm	r4, {r1, ip}
   1931c:	add	r1, r1, r2
   19320:	ldrb	r1, [r1, r7]
   19324:	ldrb	r1, [r0, r1]
   19328:	strb	r1, [ip, r2]
   1932c:	add	r2, r2, #1
   19330:	cmp	r3, r2
   19334:	bne	19310 <__assert_fail@plt+0x7db8>
   19338:	str	r2, [r4, #28]
   1933c:	str	r2, [r4, #32]
   19340:	b	192ac <__assert_fail@plt+0x7d54>
   19344:	ldr	r1, [r4, #28]
   19348:	cmp	r3, #0
   1934c:	str	r1, [sp, #4]
   19350:	bne	19758 <__assert_fail@plt+0x8200>
   19354:	ldr	r3, [r4, #80]	; 0x50
   19358:	mov	r1, #0
   1935c:	cmp	r3, #1
   19360:	str	r1, [r4, #28]
   19364:	ble	19614 <__assert_fail@plt+0x80bc>
   19368:	ldrb	r1, [r4, #73]	; 0x49
   1936c:	cmp	r1, #0
   19370:	beq	193d8 <__assert_fail@plt+0x7e80>
   19374:	ldr	ip, [r4]
   19378:	sub	r3, r5, r3
   1937c:	add	r9, ip, r6
   19380:	add	r3, r9, r3
   19384:	cmp	ip, r3
   19388:	sub	r0, r5, #1
   1938c:	movcc	ip, r3
   19390:	add	r1, r9, r0
   19394:	cmp	r1, ip
   19398:	bcc	193d8 <__assert_fail@plt+0x7e80>
   1939c:	ldrb	r3, [r9, r0]
   193a0:	and	r3, r3, #192	; 0xc0
   193a4:	cmp	r3, #128	; 0x80
   193a8:	subeq	r3, r1, #1
   193ac:	subeq	ip, ip, #1
   193b0:	beq	193cc <__assert_fail@plt+0x7e74>
   193b4:	b	19668 <__assert_fail@plt+0x8110>
   193b8:	ldrb	r0, [r1]
   193bc:	sub	r3, r3, #1
   193c0:	and	r0, r0, #192	; 0xc0
   193c4:	cmp	r0, #128	; 0x80
   193c8:	bne	19668 <__assert_fail@plt+0x8110>
   193cc:	cmp	ip, r3
   193d0:	mov	r1, r3
   193d4:	bne	193b8 <__assert_fail@plt+0x7e60>
   193d8:	add	r6, r6, r2
   193dc:	cmp	r7, r6
   193e0:	ble	199e4 <__assert_fail@plt+0x848c>
   193e4:	add	sl, r4, #16
   193e8:	add	fp, sp, #24
   193ec:	b	193fc <__assert_fail@plt+0x7ea4>
   193f0:	add	r6, r6, r3
   193f4:	cmp	r7, r6
   193f8:	ble	19784 <__assert_fail@plt+0x822c>
   193fc:	ldm	sl, {r0, r1}
   19400:	ldr	r9, [r4, #44]	; 0x2c
   19404:	ldr	ip, [r4]
   19408:	sub	r9, r9, r6
   1940c:	mov	r2, r9
   19410:	stm	fp, {r0, r1}
   19414:	mov	r3, sl
   19418:	add	r1, ip, r6
   1941c:	add	r0, sp, #16
   19420:	bl	2ba20 <__assert_fail@plt+0x1a4c8>
   19424:	sub	r2, r0, #1
   19428:	cmn	r2, #4
   1942c:	mov	r3, r0
   19430:	ldrls	r9, [sp, #16]
   19434:	bls	193f0 <__assert_fail@plt+0x7e98>
   19438:	mov	r2, #0
   1943c:	cmp	r9, r2
   19440:	cmpne	r0, r2
   19444:	ldm	fp, {r0, r1}
   19448:	ldrne	r3, [r4]
   1944c:	ldrbne	r2, [r3, r6]
   19450:	mov	r3, #1
   19454:	stm	sl, {r0, r1}
   19458:	mov	r9, r2
   1945c:	b	193f0 <__assert_fail@plt+0x7e98>
   19460:	ldr	sl, [r4, #28]
   19464:	ldr	r9, [r4, #12]
   19468:	mov	r3, sl
   1946c:	mov	r2, #0
   19470:	b	19484 <__assert_fail@plt+0x7f2c>
   19474:	ble	194ac <__assert_fail@plt+0x7f54>
   19478:	add	r2, r6, #1
   1947c:	cmp	r2, r3
   19480:	bge	194a4 <__assert_fail@plt+0x7f4c>
   19484:	add	r1, r2, r3
   19488:	add	r1, r1, r1, lsr #31
   1948c:	asr	r6, r1, #1
   19490:	ldr	r1, [r9, r6, lsl #2]
   19494:	cmp	r5, r1
   19498:	bge	19474 <__assert_fail@plt+0x7f1c>
   1949c:	mov	r3, r6
   194a0:	b	1947c <__assert_fail@plt+0x7f24>
   194a4:	cmp	r5, r1
   194a8:	addgt	r6, r6, #1
   194ac:	sub	fp, r6, #1
   194b0:	mov	r2, r8
   194b4:	mov	r1, fp
   194b8:	mov	r0, r4
   194bc:	bl	1906c <__assert_fail@plt+0x7b14>
   194c0:	cmp	r5, sl
   194c4:	movge	r3, #0
   194c8:	movlt	r3, #1
   194cc:	cmp	r5, r6
   194d0:	movne	r3, #0
   194d4:	cmp	r3, #0
   194d8:	str	r0, [r4, #60]	; 0x3c
   194dc:	bne	196d0 <__assert_fail@plt+0x8178>
   194e0:	ldr	r2, [r4, #44]	; 0x2c
   194e4:	ldr	r3, [r4, #52]	; 0x34
   194e8:	sub	r2, r2, r7
   194ec:	add	r2, r2, r5
   194f0:	sub	r3, r3, r7
   194f4:	add	r3, r3, r5
   194f8:	str	r2, [r4, #48]	; 0x30
   194fc:	cmp	r6, #0
   19500:	mov	r2, #0
   19504:	str	r3, [r4, #56]	; 0x38
   19508:	strb	r2, [r4, #76]	; 0x4c
   1950c:	ble	19544 <__assert_fail@plt+0x7fec>
   19510:	sub	r3, r6, #-1073741823	; 0xc0000001
   19514:	ldr	r2, [r9, r3, lsl #2]
   19518:	add	r3, r9, r3, lsl #2
   1951c:	cmp	r5, r2
   19520:	beq	19538 <__assert_fail@plt+0x7fe0>
   19524:	b	19544 <__assert_fail@plt+0x7fec>
   19528:	ldr	r2, [r3, #-4]!
   1952c:	sub	fp, fp, #1
   19530:	cmp	r5, r2
   19534:	bne	19544 <__assert_fail@plt+0x7fec>
   19538:	cmp	fp, #0
   1953c:	mov	r6, fp
   19540:	bne	19528 <__assert_fail@plt+0x7fd0>
   19544:	cmp	sl, r6
   19548:	ble	195bc <__assert_fail@plt+0x8064>
   1954c:	ldr	r1, [r4, #8]
   19550:	lsl	r0, r6, #2
   19554:	add	r3, r1, r0
   19558:	ldr	r2, [r1, r6, lsl #2]
   1955c:	cmn	r2, #1
   19560:	rsbeq	r1, r1, #4
   19564:	beq	19578 <__assert_fail@plt+0x8020>
   19568:	b	195c4 <__assert_fail@plt+0x806c>
   1956c:	ldr	r2, [r3, #4]!
   19570:	cmn	r2, #1
   19574:	bne	195c4 <__assert_fail@plt+0x806c>
   19578:	add	r6, r6, #1
   1957c:	cmp	sl, r6
   19580:	add	r0, r1, r3
   19584:	bne	1956c <__assert_fail@plt+0x8014>
   19588:	mov	r2, #0
   1958c:	str	r2, [r4, #28]
   19590:	str	r2, [r4, #32]
   19594:	ldrb	r2, [r4, #75]	; 0x4b
   19598:	ldr	r3, [r4, #80]	; 0x50
   1959c:	b	19264 <__assert_fail@plt+0x7d0c>
   195a0:	ldr	r0, [r4, #4]
   195a4:	ldr	r2, [r4, #28]
   195a8:	add	r1, r0, r5
   195ac:	sub	r2, r2, r5
   195b0:	bl	11234 <memmove@plt>
   195b4:	ldrb	r3, [r4, #75]	; 0x4b
   195b8:	b	19244 <__assert_fail@plt+0x7cec>
   195bc:	beq	19588 <__assert_fail@plt+0x8030>
   195c0:	lsl	r0, r6, #2
   195c4:	ldr	r2, [r9, r0]
   195c8:	sub	r2, r2, r5
   195cc:	cmp	r2, #0
   195d0:	str	r2, [r4, #28]
   195d4:	beq	19590 <__assert_fail@plt+0x8038>
   195d8:	ble	19600 <__assert_fail@plt+0x80a8>
   195dc:	ldr	r1, [r4, #8]
   195e0:	mov	r3, #0
   195e4:	sub	r1, r1, #4
   195e8:	mvn	r0, #0
   195ec:	str	r0, [r1, #4]!
   195f0:	ldr	r2, [r4, #28]
   195f4:	add	r3, r3, #1
   195f8:	cmp	r2, r3
   195fc:	bgt	195ec <__assert_fail@plt+0x8094>
   19600:	mov	r1, #255	; 0xff
   19604:	ldr	r0, [r4, #4]
   19608:	bl	1145c <memset@plt>
   1960c:	ldr	r2, [r4, #28]
   19610:	b	19590 <__assert_fail@plt+0x8038>
   19614:	ldr	r2, [r4]
   19618:	ldr	ip, [r4, #64]	; 0x40
   1961c:	add	r2, r2, r5
   19620:	add	r6, r2, r6
   19624:	cmp	ip, #0
   19628:	ldrb	r0, [r6, #-1]
   1962c:	str	r1, [r4, #32]
   19630:	ldrbne	r0, [ip, r0]
   19634:	ldr	ip, [r4, #68]	; 0x44
   19638:	and	r2, r0, #31
   1963c:	asr	r1, r0, #5
   19640:	ldr	r1, [ip, r1, lsl #2]
   19644:	lsr	r2, r1, r2
   19648:	ands	r1, r2, #1
   1964c:	movne	r1, #1
   19650:	bne	1965c <__assert_fail@plt+0x8104>
   19654:	cmp	r0, #10
   19658:	beq	19910 <__assert_fail@plt+0x83b8>
   1965c:	ldrb	r2, [r4, #75]	; 0x4b
   19660:	str	r1, [r4, #60]	; 0x3c
   19664:	b	19264 <__assert_fail@plt+0x7d0c>
   19668:	ldr	r2, [r4, #48]	; 0x30
   1966c:	ldr	r3, [r4, #64]	; 0x40
   19670:	add	r2, r9, r2
   19674:	cmp	r3, #0
   19678:	mov	r6, r1
   1967c:	sub	r2, r2, r1
   19680:	bne	19924 <__assert_fail@plt+0x83cc>
   19684:	add	fp, sp, #24
   19688:	mov	r3, fp
   1968c:	mov	sl, #0
   19690:	add	r0, sp, #12
   19694:	str	sl, [sp, #24]
   19698:	str	sl, [sp, #28]
   1969c:	bl	2ba20 <__assert_fail@plt+0x1a4c8>
   196a0:	add	r9, r9, r5
   196a4:	sub	r6, r9, r6
   196a8:	cmp	r0, r6
   196ac:	movcc	r3, #0
   196b0:	movcs	r3, #1
   196b4:	cmn	r0, #3
   196b8:	movhi	r3, #0
   196bc:	cmp	r3, sl
   196c0:	bne	197c4 <__assert_fail@plt+0x826c>
   196c4:	ldr	r6, [r4, #24]
   196c8:	ldr	r2, [r4, #32]
   196cc:	b	193d8 <__assert_fail@plt+0x7e80>
   196d0:	ldr	r3, [r9, r6, lsl #2]
   196d4:	cmp	r5, r3
   196d8:	bne	194e0 <__assert_fail@plt+0x7f88>
   196dc:	ldr	r0, [r4, #8]
   196e0:	sub	r2, sl, r5
   196e4:	lsl	r6, r5, #2
   196e8:	lsl	r2, r2, #2
   196ec:	add	r1, r0, r6
   196f0:	bl	11234 <memmove@plt>
   196f4:	ldr	r0, [r4, #4]
   196f8:	ldr	r2, [r4, #28]
   196fc:	add	r1, r0, r5
   19700:	sub	r2, r2, r5
   19704:	bl	11234 <memmove@plt>
   19708:	ldr	r3, [r4, #28]
   1970c:	ldr	r2, [r4, #32]
   19710:	sub	r3, r3, r5
   19714:	sub	r2, r2, r5
   19718:	cmp	r3, #0
   1971c:	str	r3, [r4, #28]
   19720:	str	r2, [r4, #32]
   19724:	ble	19594 <__assert_fail@plt+0x803c>
   19728:	ldr	r1, [r4, #12]
   1972c:	mov	r2, #0
   19730:	add	r0, r1, r6
   19734:	sub	r1, r1, #4
   19738:	ldr	r3, [r0], #4
   1973c:	add	r2, r2, #1
   19740:	sub	r3, r3, r5
   19744:	str	r3, [r1, #4]!
   19748:	ldr	r3, [r4, #28]
   1974c:	cmp	r3, r2
   19750:	bgt	19738 <__assert_fail@plt+0x81e0>
   19754:	b	19594 <__assert_fail@plt+0x803c>
   19758:	ldr	r1, [r4, #44]	; 0x2c
   1975c:	ldr	r3, [r4, #52]	; 0x34
   19760:	sub	r1, r1, r7
   19764:	add	r1, r1, r5
   19768:	sub	r3, r3, r7
   1976c:	add	r3, r3, r5
   19770:	str	r1, [r4, #48]	; 0x30
   19774:	mov	r1, #0
   19778:	str	r3, [r4, #56]	; 0x38
   1977c:	strb	r1, [r4, #76]	; 0x4c
   19780:	b	19354 <__assert_fail@plt+0x7dfc>
   19784:	sub	r6, r6, r7
   19788:	cmn	r9, #1
   1978c:	str	r6, [r4, #28]
   19790:	bne	197e0 <__assert_fail@plt+0x8288>
   19794:	ldr	r3, [sp, #4]
   19798:	mov	r2, r8
   1979c:	sub	r1, r3, #1
   197a0:	mov	r0, r4
   197a4:	bl	1906c <__assert_fail@plt+0x7b14>
   197a8:	str	r0, [r4, #60]	; 0x3c
   197ac:	cmp	r6, #0
   197b0:	bne	19898 <__assert_fail@plt+0x8340>
   197b4:	ldrb	r2, [r4, #75]	; 0x4b
   197b8:	str	r6, [r4, #32]
   197bc:	ldr	r3, [r4, #80]	; 0x50
   197c0:	b	19264 <__assert_fail@plt+0x7d0c>
   197c4:	ldr	r9, [sp, #12]
   197c8:	sub	r6, r0, r6
   197cc:	cmn	r9, #1
   197d0:	str	sl, [r4, #16]
   197d4:	str	sl, [r4, #20]
   197d8:	str	r6, [r4, #28]
   197dc:	beq	196c4 <__assert_fail@plt+0x816c>
   197e0:	ldrb	r3, [r4, #78]	; 0x4e
   197e4:	cmp	r3, #0
   197e8:	bne	198e8 <__assert_fail@plt+0x8390>
   197ec:	cmp	r9, #10
   197f0:	movne	r3, #0
   197f4:	beq	19800 <__assert_fail@plt+0x82a8>
   197f8:	str	r3, [r4, #60]	; 0x3c
   197fc:	b	197ac <__assert_fail@plt+0x8254>
   19800:	ldrb	r3, [r4, #77]	; 0x4d
   19804:	cmp	r3, #0
   19808:	movne	r3, #2
   1980c:	moveq	r3, #0
   19810:	b	197f8 <__assert_fail@plt+0x82a0>
   19814:	ldr	r5, [r4, #36]	; 0x24
   19818:	ldr	r6, [r4, #28]
   1981c:	cmp	r3, r5
   19820:	movlt	r5, r3
   19824:	cmp	r5, r6
   19828:	ble	199f0 <__assert_fail@plt+0x8498>
   1982c:	bl	113d8 <__ctype_toupper_loc@plt>
   19830:	b	19854 <__assert_fail@plt+0x82fc>
   19834:	ldr	r1, [r0]
   19838:	ldr	r2, [r4, #4]
   1983c:	ldr	r3, [r1, r3, lsl #2]
   19840:	strb	r3, [r2, r6]
   19844:	add	r6, r6, #1
   19848:	cmp	r6, r5
   1984c:	beq	1988c <__assert_fail@plt+0x8334>
   19850:	ldr	r7, [r4, #24]
   19854:	ldr	r3, [r4]
   19858:	ldr	r2, [r4, #64]	; 0x40
   1985c:	add	r3, r3, r6
   19860:	cmp	r2, #0
   19864:	ldrb	r3, [r3, r7]
   19868:	beq	19834 <__assert_fail@plt+0x82dc>
   1986c:	ldrb	r3, [r2, r3]
   19870:	ldr	ip, [r0]
   19874:	ldr	r1, [r4, #4]
   19878:	ldr	r3, [ip, r3, lsl #2]
   1987c:	strb	r3, [r1, r6]
   19880:	add	r6, r6, #1
   19884:	cmp	r5, r6
   19888:	bne	19850 <__assert_fail@plt+0x82f8>
   1988c:	str	r5, [r4, #28]
   19890:	str	r5, [r4, #32]
   19894:	b	192ac <__assert_fail@plt+0x7d54>
   19898:	ble	198c0 <__assert_fail@plt+0x8368>
   1989c:	ldr	r2, [r4, #8]
   198a0:	mov	r3, #0
   198a4:	sub	r2, r2, #4
   198a8:	mvn	r1, #0
   198ac:	str	r1, [r2, #4]!
   198b0:	ldr	r6, [r4, #28]
   198b4:	add	r3, r3, #1
   198b8:	cmp	r6, r3
   198bc:	bgt	198ac <__assert_fail@plt+0x8354>
   198c0:	ldrb	r2, [r4, #75]	; 0x4b
   198c4:	cmp	r2, #0
   198c8:	beq	197b8 <__assert_fail@plt+0x8260>
   198cc:	mov	r2, r6
   198d0:	mov	r1, #255	; 0xff
   198d4:	ldr	r0, [r4, #4]
   198d8:	bl	1145c <memset@plt>
   198dc:	ldrb	r2, [r4, #75]	; 0x4b
   198e0:	ldr	r6, [r4, #28]
   198e4:	b	197b8 <__assert_fail@plt+0x8260>
   198e8:	mov	r0, r9
   198ec:	bl	11438 <iswalnum@plt>
   198f0:	cmp	r9, #95	; 0x5f
   198f4:	clz	r0, r0
   198f8:	lsr	r0, r0, #5
   198fc:	moveq	r0, #0
   19900:	cmp	r0, #0
   19904:	moveq	r3, #1
   19908:	bne	197ec <__assert_fail@plt+0x8294>
   1990c:	b	197f8 <__assert_fail@plt+0x82a0>
   19910:	ldrb	r1, [r4, #77]	; 0x4d
   19914:	cmp	r1, #0
   19918:	movne	r1, #2
   1991c:	moveq	r1, #0
   19920:	b	1965c <__assert_fail@plt+0x8104>
   19924:	cmp	r2, #6
   19928:	movlt	r1, r2
   1992c:	movge	r1, #6
   19930:	subs	r0, r1, #1
   19934:	bmi	199dc <__assert_fail@plt+0x8484>
   19938:	ldrb	lr, [r6, r0]
   1993c:	add	ip, sp, #32
   19940:	add	ip, ip, r0
   19944:	sub	r0, r1, #2
   19948:	ldrb	lr, [r3, lr]
   1994c:	cmn	r0, #1
   19950:	strb	lr, [ip, #-16]
   19954:	beq	199dc <__assert_fail@plt+0x8484>
   19958:	ldrb	lr, [r6, r0]
   1995c:	add	ip, sp, #32
   19960:	add	ip, ip, r0
   19964:	sub	r0, r1, #3
   19968:	ldrb	lr, [r3, lr]
   1996c:	cmn	r0, #1
   19970:	strb	lr, [ip, #-16]
   19974:	beq	199dc <__assert_fail@plt+0x8484>
   19978:	ldrb	lr, [r6, r0]
   1997c:	add	ip, sp, #32
   19980:	add	ip, ip, r0
   19984:	sub	r0, r1, #4
   19988:	ldrb	lr, [r3, lr]
   1998c:	cmn	r0, #1
   19990:	strb	lr, [ip, #-16]
   19994:	beq	199dc <__assert_fail@plt+0x8484>
   19998:	ldrb	lr, [r6, r0]
   1999c:	add	ip, sp, #32
   199a0:	add	ip, ip, r0
   199a4:	sub	r0, r1, #5
   199a8:	ldrb	lr, [r3, lr]
   199ac:	cmn	r0, #1
   199b0:	strb	lr, [ip, #-16]
   199b4:	beq	199dc <__assert_fail@plt+0x8484>
   199b8:	ldrb	ip, [r6, r0]
   199bc:	add	lr, sp, #32
   199c0:	cmp	r1, #6
   199c4:	add	r0, lr, r0
   199c8:	ldrb	r1, [r3, ip]
   199cc:	strb	r1, [r0, #-16]
   199d0:	ldrbeq	r1, [r6]
   199d4:	ldrbeq	r3, [r3, r1]
   199d8:	strbeq	r3, [sp, #16]
   199dc:	add	r1, sp, #16
   199e0:	b	19684 <__assert_fail@plt+0x812c>
   199e4:	sub	r6, r6, r7
   199e8:	str	r6, [r4, #28]
   199ec:	b	19794 <__assert_fail@plt+0x823c>
   199f0:	mov	r5, r6
   199f4:	b	1988c <__assert_fail@plt+0x8334>
   199f8:	push	{r4, r5, r6, lr}
   199fc:	mov	r4, r1
   19a00:	mov	r1, r2
   19a04:	ldr	r2, [r0, #88]	; 0x58
   19a08:	mov	r5, r0
   19a0c:	bl	1906c <__assert_fail@plt+0x7b14>
   19a10:	ldr	r2, [r4, #8]
   19a14:	cmp	r2, #0
   19a18:	ble	19ad8 <__assert_fail@plt+0x8580>
   19a1c:	ldr	r1, [r5, #84]	; 0x54
   19a20:	ands	r3, r0, #1
   19a24:	ldr	lr, [r4, #12]
   19a28:	ldr	ip, [r1]
   19a2c:	and	r1, r0, #2
   19a30:	and	r0, r0, #8
   19a34:	bne	19b88 <__assert_fail@plt+0x8630>
   19a38:	cmp	r1, #0
   19a3c:	ldr	r5, [pc, #700]	; 19d00 <__assert_fail@plt+0x87a8>
   19a40:	sub	lr, lr, #4
   19a44:	beq	19ae0 <__assert_fail@plt+0x8588>
   19a48:	cmp	r0, #0
   19a4c:	bne	19ab4 <__assert_fail@plt+0x855c>
   19a50:	mov	r3, r0
   19a54:	b	19a60 <__assert_fail@plt+0x8508>
   19a58:	cmp	r2, r3
   19a5c:	beq	19ad8 <__assert_fail@plt+0x8580>
   19a60:	ldr	r0, [lr, #4]!
   19a64:	add	r3, r3, #1
   19a68:	add	r1, ip, r0, lsl #3
   19a6c:	ldrb	r4, [r1, #4]
   19a70:	ldr	r1, [r1, #4]
   19a74:	cmp	r4, #2
   19a78:	and	r1, r5, r1, lsr #8
   19a7c:	bne	19a58 <__assert_fail@plt+0x8500>
   19a80:	cmp	r1, #0
   19a84:	popeq	{r4, r5, r6, pc}
   19a88:	tst	r1, #4
   19a8c:	bne	19a58 <__assert_fail@plt+0x8500>
   19a90:	tst	r1, #128	; 0x80
   19a94:	popeq	{r4, r5, r6, pc}
   19a98:	b	19a58 <__assert_fail@plt+0x8500>
   19a9c:	cmp	r1, #0
   19aa0:	popeq	{r4, r5, r6, pc}
   19aa4:	tst	r1, #4
   19aa8:	popeq	{r4, r5, r6, pc}
   19aac:	cmp	r2, r3
   19ab0:	beq	19ad8 <__assert_fail@plt+0x8580>
   19ab4:	ldr	r0, [lr, #4]!
   19ab8:	add	r3, r3, #1
   19abc:	add	r1, ip, r0, lsl #3
   19ac0:	ldrb	r4, [r1, #4]
   19ac4:	ldr	r1, [r1, #4]
   19ac8:	cmp	r4, #2
   19acc:	and	r1, r5, r1, lsr #8
   19ad0:	bne	19aac <__assert_fail@plt+0x8554>
   19ad4:	b	19a9c <__assert_fail@plt+0x8544>
   19ad8:	mov	r0, #0
   19adc:	pop	{r4, r5, r6, pc}
   19ae0:	cmp	r0, #0
   19ae4:	beq	19b34 <__assert_fail@plt+0x85dc>
   19ae8:	mov	r3, r1
   19aec:	b	19af8 <__assert_fail@plt+0x85a0>
   19af0:	cmp	r2, r3
   19af4:	beq	19ad8 <__assert_fail@plt+0x8580>
   19af8:	ldr	r0, [lr, #4]!
   19afc:	add	r3, r3, #1
   19b00:	add	r1, ip, r0, lsl #3
   19b04:	ldrb	r4, [r1, #4]
   19b08:	ldr	r1, [r1, #4]
   19b0c:	cmp	r4, #2
   19b10:	and	r1, r5, r1, lsr #8
   19b14:	bne	19af0 <__assert_fail@plt+0x8598>
   19b18:	cmp	r1, #0
   19b1c:	popeq	{r4, r5, r6, pc}
   19b20:	tst	r1, #4
   19b24:	bne	19af0 <__assert_fail@plt+0x8598>
   19b28:	tst	r1, #32
   19b2c:	popeq	{r4, r5, r6, pc}
   19b30:	b	19af0 <__assert_fail@plt+0x8598>
   19b34:	mov	r3, r0
   19b38:	b	19b48 <__assert_fail@plt+0x85f0>
   19b3c:	add	r3, r3, #1
   19b40:	cmp	r3, r2
   19b44:	beq	19ad8 <__assert_fail@plt+0x8580>
   19b48:	ldr	r0, [lr, #4]!
   19b4c:	add	r1, ip, r0, lsl #3
   19b50:	ldrb	r4, [r1, #4]
   19b54:	ldr	r1, [r1, #4]
   19b58:	cmp	r4, #2
   19b5c:	and	r1, r5, r1, lsr #8
   19b60:	bne	19b3c <__assert_fail@plt+0x85e4>
   19b64:	cmp	r1, #0
   19b68:	popeq	{r4, r5, r6, pc}
   19b6c:	tst	r1, #4
   19b70:	bne	19b3c <__assert_fail@plt+0x85e4>
   19b74:	tst	r1, #32
   19b78:	bne	19b3c <__assert_fail@plt+0x85e4>
   19b7c:	tst	r1, #128	; 0x80
   19b80:	bne	19b3c <__assert_fail@plt+0x85e4>
   19b84:	pop	{r4, r5, r6, pc}
   19b88:	cmp	r1, #0
   19b8c:	beq	19bec <__assert_fail@plt+0x8694>
   19b90:	cmp	r0, #0
   19b94:	ldr	r5, [pc, #356]	; 19d00 <__assert_fail@plt+0x87a8>
   19b98:	sub	lr, lr, #4
   19b9c:	beq	19cb0 <__assert_fail@plt+0x8758>
   19ba0:	mov	r1, #0
   19ba4:	b	19bb0 <__assert_fail@plt+0x8658>
   19ba8:	cmp	r2, r1
   19bac:	beq	19ad8 <__assert_fail@plt+0x8580>
   19bb0:	ldr	r0, [lr, #4]!
   19bb4:	add	r1, r1, #1
   19bb8:	add	r3, ip, r0, lsl #3
   19bbc:	ldrb	r4, [r3, #4]
   19bc0:	ldr	r3, [r3, #4]
   19bc4:	cmp	r4, #2
   19bc8:	and	r3, r5, r3, lsr #8
   19bcc:	bne	19ba8 <__assert_fail@plt+0x8650>
   19bd0:	cmp	r3, #0
   19bd4:	popeq	{r4, r5, r6, pc}
   19bd8:	tst	r3, #4
   19bdc:	beq	19c48 <__assert_fail@plt+0x86f0>
   19be0:	tst	r3, #8
   19be4:	popeq	{r4, r5, r6, pc}
   19be8:	b	19ba8 <__assert_fail@plt+0x8650>
   19bec:	cmp	r0, #0
   19bf0:	beq	19c54 <__assert_fail@plt+0x86fc>
   19bf4:	ldr	r5, [pc, #260]	; 19d00 <__assert_fail@plt+0x87a8>
   19bf8:	sub	lr, lr, #4
   19bfc:	mov	r3, r1
   19c00:	b	19c10 <__assert_fail@plt+0x86b8>
   19c04:	add	r3, r3, #1
   19c08:	cmp	r2, r3
   19c0c:	beq	19ad8 <__assert_fail@plt+0x8580>
   19c10:	ldr	r0, [lr, #4]!
   19c14:	add	r1, ip, r0, lsl #3
   19c18:	ldrb	r4, [r1, #4]
   19c1c:	ldr	r1, [r1, #4]
   19c20:	cmp	r4, #2
   19c24:	and	r1, r5, r1, lsr #8
   19c28:	bne	19c04 <__assert_fail@plt+0x86ac>
   19c2c:	cmp	r1, #0
   19c30:	popeq	{r4, r5, r6, pc}
   19c34:	tst	r1, #8
   19c38:	bne	19c04 <__assert_fail@plt+0x86ac>
   19c3c:	tst	r1, #32
   19c40:	popeq	{r4, r5, r6, pc}
   19c44:	b	19c04 <__assert_fail@plt+0x86ac>
   19c48:	tst	r3, #8
   19c4c:	bne	19ba8 <__assert_fail@plt+0x8650>
   19c50:	pop	{r4, r5, r6, pc}
   19c54:	ldr	r4, [pc, #164]	; 19d00 <__assert_fail@plt+0x87a8>
   19c58:	sub	lr, lr, #4
   19c5c:	mov	r3, r0
   19c60:	b	19c70 <__assert_fail@plt+0x8718>
   19c64:	add	r3, r3, #1
   19c68:	cmp	r2, r3
   19c6c:	beq	19ad8 <__assert_fail@plt+0x8580>
   19c70:	ldr	r0, [lr, #4]!
   19c74:	add	r1, ip, r0, lsl #3
   19c78:	ldrb	r5, [r1, #4]
   19c7c:	ldr	r1, [r1, #4]
   19c80:	cmp	r5, #2
   19c84:	and	r1, r4, r1, lsr #8
   19c88:	bne	19c64 <__assert_fail@plt+0x870c>
   19c8c:	cmp	r1, #0
   19c90:	beq	19cfc <__assert_fail@plt+0x87a4>
   19c94:	tst	r1, #8
   19c98:	bne	19c64 <__assert_fail@plt+0x870c>
   19c9c:	tst	r1, #32
   19ca0:	bne	19c64 <__assert_fail@plt+0x870c>
   19ca4:	tst	r1, #128	; 0x80
   19ca8:	bne	19c64 <__assert_fail@plt+0x870c>
   19cac:	pop	{r4, r5, r6, pc}
   19cb0:	mov	r3, r0
   19cb4:	b	19cc4 <__assert_fail@plt+0x876c>
   19cb8:	add	r3, r3, #1
   19cbc:	cmp	r2, r3
   19cc0:	beq	19ad8 <__assert_fail@plt+0x8580>
   19cc4:	ldr	r0, [lr, #4]!
   19cc8:	add	r1, ip, r0, lsl #3
   19ccc:	ldrb	r4, [r1, #4]
   19cd0:	ldr	r1, [r1, #4]
   19cd4:	cmp	r4, #2
   19cd8:	and	r1, r5, r1, lsr #8
   19cdc:	bne	19cb8 <__assert_fail@plt+0x8760>
   19ce0:	cmp	r1, #0
   19ce4:	popeq	{r4, r5, r6, pc}
   19ce8:	tst	r1, #8
   19cec:	bne	19cb8 <__assert_fail@plt+0x8760>
   19cf0:	tst	r1, #128	; 0x80
   19cf4:	popeq	{r4, r5, r6, pc}
   19cf8:	b	19cb8 <__assert_fail@plt+0x8760>
   19cfc:	pop	{r4, r5, r6, pc}
   19d00:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   19d04:	ldr	ip, [r1]
   19d08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d0c:	cmp	ip, #0
   19d10:	sub	sp, sp, #20
   19d14:	ldr	r6, [r0, #84]	; 0x54
   19d18:	ble	19de4 <__assert_fail@plt+0x888c>
   19d1c:	mov	r7, r2
   19d20:	str	r3, [sp, #8]
   19d24:	mov	r8, r0
   19d28:	str	r1, [sp, #4]
   19d2c:	mov	r4, #0
   19d30:	mov	r2, #24
   19d34:	mov	r9, #1
   19d38:	b	19d44 <__assert_fail@plt+0x87ec>
   19d3c:	cmp	r4, ip
   19d40:	bge	19de4 <__assert_fail@plt+0x888c>
   19d44:	ldr	r1, [r7]
   19d48:	ldr	r3, [r6]
   19d4c:	ldr	r5, [r1, r4, lsl #2]
   19d50:	add	r4, r4, #1
   19d54:	add	r1, r3, r5, lsl #3
   19d58:	ldrb	r1, [r1, #4]
   19d5c:	cmp	r1, #8
   19d60:	bne	19d3c <__assert_fail@plt+0x87e4>
   19d64:	ldr	r3, [r3, r5, lsl #3]
   19d68:	cmp	r3, #31
   19d6c:	bgt	19d3c <__assert_fail@plt+0x87e4>
   19d70:	ldr	r1, [r6, #80]	; 0x50
   19d74:	lsr	r3, r1, r3
   19d78:	tst	r3, #1
   19d7c:	beq	19d3c <__assert_fail@plt+0x87e4>
   19d80:	ldr	sl, [r8, #124]	; 0x7c
   19d84:	ldr	r3, [r8, #128]	; 0x80
   19d88:	ldr	fp, [r8, #132]	; 0x84
   19d8c:	cmp	r3, sl
   19d90:	beq	19df8 <__assert_fail@plt+0x88a0>
   19d94:	mov	r1, r2
   19d98:	mov	r0, r9
   19d9c:	str	r2, [sp, #12]
   19da0:	bl	2b604 <__assert_fail@plt+0x1a0ac>
   19da4:	ldr	r3, [r8, #124]	; 0x7c
   19da8:	ldr	r1, [r8, #132]	; 0x84
   19dac:	add	ip, r3, #1
   19db0:	str	r0, [fp, sl, lsl #2]
   19db4:	ldr	r3, [r1, r3, lsl #2]
   19db8:	cmp	r3, #0
   19dbc:	beq	19df0 <__assert_fail@plt+0x8898>
   19dc0:	ldr	r2, [sp, #8]
   19dc4:	str	r5, [r3, #4]
   19dc8:	str	ip, [r8, #124]	; 0x7c
   19dcc:	str	r2, [r3]
   19dd0:	ldr	r3, [sp, #4]
   19dd4:	ldr	r2, [sp, #12]
   19dd8:	ldr	ip, [r3]
   19ddc:	cmp	r4, ip
   19de0:	blt	19d44 <__assert_fail@plt+0x87ec>
   19de4:	mov	r0, #0
   19de8:	add	sp, sp, #20
   19dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19df0:	mov	r0, #12
   19df4:	b	19de8 <__assert_fail@plt+0x8890>
   19df8:	mov	r0, fp
   19dfc:	lsl	r1, sl, #3
   19e00:	str	r2, [sp, #12]
   19e04:	bl	2b678 <__assert_fail@plt+0x1a120>
   19e08:	lsl	r3, sl, #1
   19e0c:	ldr	r2, [sp, #12]
   19e10:	subs	fp, r0, #0
   19e14:	beq	19df0 <__assert_fail@plt+0x8898>
   19e18:	ldr	sl, [r8, #124]	; 0x7c
   19e1c:	str	fp, [r8, #132]	; 0x84
   19e20:	str	r3, [r8, #128]	; 0x80
   19e24:	b	19d94 <__assert_fail@plt+0x883c>
   19e28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19e2c:	mov	r6, r0
   19e30:	ldr	ip, [sp, #40]	; 0x28
   19e34:	mov	r5, r1
   19e38:	tst	ip, #4194304	; 0x400000
   19e3c:	mov	sl, r2
   19e40:	mov	r7, r3
   19e44:	ldr	r9, [sp, #32]
   19e48:	beq	19e68 <__assert_fail@plt+0x8910>
   19e4c:	ldr	r1, [pc, #2196]	; 1a6e8 <__assert_fail@plt+0x9190>
   19e50:	ldr	r0, [sp, #36]	; 0x24
   19e54:	bl	111f8 <strcmp@plt>
   19e58:	cmp	r0, #0
   19e5c:	bne	19f48 <__assert_fail@plt+0x89f0>
   19e60:	ldr	r3, [pc, #2180]	; 1a6ec <__assert_fail@plt+0x9194>
   19e64:	str	r3, [sp, #36]	; 0x24
   19e68:	ldr	r4, [r7]
   19e6c:	ldr	r3, [r9]
   19e70:	cmp	r3, r4
   19e74:	beq	19f78 <__assert_fail@plt+0x8a20>
   19e78:	ldr	r8, [sl]
   19e7c:	add	r3, r4, #1
   19e80:	str	r3, [r7]
   19e84:	ldr	r0, [sp, #36]	; 0x24
   19e88:	bl	111c8 <wctype@plt>
   19e8c:	ldr	r1, [pc, #2140]	; 1a6f0 <__assert_fail@plt+0x9198>
   19e90:	str	r0, [r8, r4, lsl #2]
   19e94:	ldr	r0, [sp, #36]	; 0x24
   19e98:	bl	111f8 <strcmp@plt>
   19e9c:	subs	r4, r0, #0
   19ea0:	beq	19f00 <__assert_fail@plt+0x89a8>
   19ea4:	ldr	r1, [pc, #2120]	; 1a6f4 <__assert_fail@plt+0x919c>
   19ea8:	ldr	r0, [sp, #36]	; 0x24
   19eac:	bl	111f8 <strcmp@plt>
   19eb0:	subs	r4, r0, #0
   19eb4:	bne	19fa4 <__assert_fail@plt+0x8a4c>
   19eb8:	cmp	r6, #0
   19ebc:	bne	1a158 <__assert_fail@plt+0x8c00>
   19ec0:	bl	113fc <__ctype_b_loc@plt>
   19ec4:	mov	ip, #1
   19ec8:	ldr	r3, [r0]
   19ecc:	sub	r3, r3, #2
   19ed0:	ldrh	r2, [r3, #2]!
   19ed4:	asr	r1, r4, #5
   19ed8:	and	r0, r4, #31
   19edc:	tst	r2, #2
   19ee0:	add	r4, r4, #1
   19ee4:	ldrne	r2, [r5, r1, lsl #2]
   19ee8:	orrne	r2, r2, ip, lsl r0
   19eec:	strne	r2, [r5, r1, lsl #2]
   19ef0:	cmp	r4, #256	; 0x100
   19ef4:	bne	19ed0 <__assert_fail@plt+0x8978>
   19ef8:	mov	r0, #0
   19efc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f00:	cmp	r6, #0
   19f04:	bne	1a0c4 <__assert_fail@plt+0x8b6c>
   19f08:	bl	113fc <__ctype_b_loc@plt>
   19f0c:	mov	lr, #1
   19f10:	ldr	r3, [r0]
   19f14:	sub	r3, r3, #2
   19f18:	ldrh	r0, [r3, #2]!
   19f1c:	asr	r2, r4, #5
   19f20:	and	ip, r4, #31
   19f24:	tst	r0, #8
   19f28:	add	r4, r4, #1
   19f2c:	ldrne	r1, [r5, r2, lsl #2]
   19f30:	orrne	r1, r1, lr, lsl ip
   19f34:	strne	r1, [r5, r2, lsl #2]
   19f38:	cmp	r4, #256	; 0x100
   19f3c:	bne	19f18 <__assert_fail@plt+0x89c0>
   19f40:	mov	r0, #0
   19f44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f48:	ldr	r0, [sp, #36]	; 0x24
   19f4c:	ldr	r1, [pc, #1956]	; 1a6f8 <__assert_fail@plt+0x91a0>
   19f50:	bl	111f8 <strcmp@plt>
   19f54:	ldr	r3, [pc, #1936]	; 1a6ec <__assert_fail@plt+0x9194>
   19f58:	ldr	r2, [sp, #36]	; 0x24
   19f5c:	ldr	r4, [r7]
   19f60:	cmp	r0, #0
   19f64:	moveq	r2, r3
   19f68:	ldr	r3, [r9]
   19f6c:	str	r2, [sp, #36]	; 0x24
   19f70:	cmp	r3, r4
   19f74:	bne	19e78 <__assert_fail@plt+0x8920>
   19f78:	lsl	r4, r4, #1
   19f7c:	add	r4, r4, #1
   19f80:	ldr	r0, [sl]
   19f84:	lsl	r1, r4, #2
   19f88:	bl	2b678 <__assert_fail@plt+0x1a120>
   19f8c:	subs	r8, r0, #0
   19f90:	beq	1a250 <__assert_fail@plt+0x8cf8>
   19f94:	str	r8, [sl]
   19f98:	str	r4, [r9]
   19f9c:	ldr	r4, [r7]
   19fa0:	b	19e7c <__assert_fail@plt+0x8924>
   19fa4:	ldr	r1, [pc, #1868]	; 1a6f8 <__assert_fail@plt+0x91a0>
   19fa8:	ldr	r0, [sp, #36]	; 0x24
   19fac:	bl	111f8 <strcmp@plt>
   19fb0:	subs	r4, r0, #0
   19fb4:	beq	1a010 <__assert_fail@plt+0x8ab8>
   19fb8:	ldr	r1, [pc, #1852]	; 1a6fc <__assert_fail@plt+0x91a4>
   19fbc:	ldr	r0, [sp, #36]	; 0x24
   19fc0:	bl	111f8 <strcmp@plt>
   19fc4:	subs	r4, r0, #0
   19fc8:	bne	1a058 <__assert_fail@plt+0x8b00>
   19fcc:	cmp	r6, #0
   19fd0:	bne	1a2b0 <__assert_fail@plt+0x8d58>
   19fd4:	bl	113fc <__ctype_b_loc@plt>
   19fd8:	mov	ip, #1
   19fdc:	ldr	r3, [r0]
   19fe0:	sub	r3, r3, #2
   19fe4:	ldrh	r2, [r3, #2]!
   19fe8:	asr	r1, r4, #5
   19fec:	and	r0, r4, #31
   19ff0:	tst	r2, #8192	; 0x2000
   19ff4:	add	r4, r4, #1
   19ff8:	ldrne	r2, [r5, r1, lsl #2]
   19ffc:	orrne	r2, r2, ip, lsl r0
   1a000:	strne	r2, [r5, r1, lsl #2]
   1a004:	cmp	r4, #256	; 0x100
   1a008:	bne	19fe4 <__assert_fail@plt+0x8a8c>
   1a00c:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a010:	cmp	r6, #0
   1a014:	bne	1a200 <__assert_fail@plt+0x8ca8>
   1a018:	bl	113fc <__ctype_b_loc@plt>
   1a01c:	mov	ip, #1
   1a020:	ldr	r3, [r0]
   1a024:	sub	r3, r3, #2
   1a028:	ldrh	r2, [r3, #2]!
   1a02c:	asr	r1, r4, #5
   1a030:	and	r0, r4, #31
   1a034:	tst	r2, #512	; 0x200
   1a038:	add	r4, r4, #1
   1a03c:	ldrne	r2, [r5, r1, lsl #2]
   1a040:	orrne	r2, r2, ip, lsl r0
   1a044:	strne	r2, [r5, r1, lsl #2]
   1a048:	cmp	r4, #256	; 0x100
   1a04c:	bne	1a028 <__assert_fail@plt+0x8ad0>
   1a050:	mov	r0, #0
   1a054:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a058:	ldr	r1, [pc, #1676]	; 1a6ec <__assert_fail@plt+0x9194>
   1a05c:	ldr	r0, [sp, #36]	; 0x24
   1a060:	bl	111f8 <strcmp@plt>
   1a064:	subs	r4, r0, #0
   1a068:	beq	1a114 <__assert_fail@plt+0x8bbc>
   1a06c:	ldr	r1, [pc, #1676]	; 1a700 <__assert_fail@plt+0x91a8>
   1a070:	ldr	r0, [sp, #36]	; 0x24
   1a074:	bl	111f8 <strcmp@plt>
   1a078:	subs	r4, r0, #0
   1a07c:	bne	1a1a8 <__assert_fail@plt+0x8c50>
   1a080:	cmp	r6, #0
   1a084:	bne	1a4a0 <__assert_fail@plt+0x8f48>
   1a088:	bl	113fc <__ctype_b_loc@plt>
   1a08c:	mov	ip, #1
   1a090:	ldr	r3, [r0]
   1a094:	sub	r3, r3, #2
   1a098:	ldrh	r1, [r3, #2]!
   1a09c:	asr	r2, r4, #5
   1a0a0:	and	r0, r4, #31
   1a0a4:	tst	r1, #2048	; 0x800
   1a0a8:	add	r4, r4, #1
   1a0ac:	ldrne	r1, [r5, r2, lsl #2]
   1a0b0:	orrne	r1, r1, ip, lsl r0
   1a0b4:	strne	r1, [r5, r2, lsl #2]
   1a0b8:	cmp	r4, #256	; 0x100
   1a0bc:	bne	1a098 <__assert_fail@plt+0x8b40>
   1a0c0:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a0c4:	bl	113fc <__ctype_b_loc@plt>
   1a0c8:	mov	r4, #1
   1a0cc:	mov	r1, r6
   1a0d0:	ldr	r3, [r0]
   1a0d4:	add	ip, r3, #508	; 0x1fc
   1a0d8:	add	ip, ip, #2
   1a0dc:	sub	r3, r3, #2
   1a0e0:	ldrh	r2, [r3, #2]!
   1a0e4:	tst	r2, #8
   1a0e8:	beq	1a104 <__assert_fail@plt+0x8bac>
   1a0ec:	ldrb	r2, [r1]
   1a0f0:	and	lr, r2, #31
   1a0f4:	asr	r2, r2, #5
   1a0f8:	ldr	r0, [r5, r2, lsl #2]
   1a0fc:	orr	r0, r0, r4, lsl lr
   1a100:	str	r0, [r5, r2, lsl #2]
   1a104:	cmp	ip, r3
   1a108:	add	r1, r1, #1
   1a10c:	bne	1a0e0 <__assert_fail@plt+0x8b88>
   1a110:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a114:	cmp	r6, #0
   1a118:	bne	1a300 <__assert_fail@plt+0x8da8>
   1a11c:	bl	113fc <__ctype_b_loc@plt>
   1a120:	mov	ip, #1
   1a124:	ldr	r3, [r0]
   1a128:	sub	r3, r3, #2
   1a12c:	ldrh	r2, [r3, #2]!
   1a130:	asr	r1, r4, #5
   1a134:	and	r0, r4, #31
   1a138:	tst	r2, #1024	; 0x400
   1a13c:	add	r4, r4, #1
   1a140:	ldrne	r2, [r5, r1, lsl #2]
   1a144:	orrne	r2, r2, ip, lsl r0
   1a148:	strne	r2, [r5, r1, lsl #2]
   1a14c:	cmp	r4, #256	; 0x100
   1a150:	bne	1a12c <__assert_fail@plt+0x8bd4>
   1a154:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a158:	bl	113fc <__ctype_b_loc@plt>
   1a15c:	mov	r4, #1
   1a160:	mov	r1, r6
   1a164:	ldr	r3, [r0]
   1a168:	add	ip, r3, #508	; 0x1fc
   1a16c:	add	ip, ip, #2
   1a170:	sub	r3, r3, #2
   1a174:	ldrh	r2, [r3, #2]!
   1a178:	tst	r2, #2
   1a17c:	beq	1a198 <__assert_fail@plt+0x8c40>
   1a180:	ldrb	r2, [r1]
   1a184:	and	lr, r2, #31
   1a188:	asr	r2, r2, #5
   1a18c:	ldr	r0, [r5, r2, lsl #2]
   1a190:	orr	r0, r0, r4, lsl lr
   1a194:	str	r0, [r5, r2, lsl #2]
   1a198:	cmp	ip, r3
   1a19c:	add	r1, r1, #1
   1a1a0:	bne	1a174 <__assert_fail@plt+0x8c1c>
   1a1a4:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a1a8:	ldr	r1, [pc, #1364]	; 1a704 <__assert_fail@plt+0x91ac>
   1a1ac:	ldr	r0, [sp, #36]	; 0x24
   1a1b0:	bl	111f8 <strcmp@plt>
   1a1b4:	subs	r4, r0, #0
   1a1b8:	bne	1a258 <__assert_fail@plt+0x8d00>
   1a1bc:	cmp	r6, #0
   1a1c0:	bne	1a4f0 <__assert_fail@plt+0x8f98>
   1a1c4:	bl	113fc <__ctype_b_loc@plt>
   1a1c8:	mov	ip, #1
   1a1cc:	ldr	r3, [r0]
   1a1d0:	sub	r3, r3, #2
   1a1d4:	ldrh	r2, [r3, #2]!
   1a1d8:	asr	r1, r4, #5
   1a1dc:	and	r0, r4, #31
   1a1e0:	tst	r2, #16384	; 0x4000
   1a1e4:	add	r4, r4, #1
   1a1e8:	ldrne	r2, [r5, r1, lsl #2]
   1a1ec:	orrne	r2, r2, ip, lsl r0
   1a1f0:	strne	r2, [r5, r1, lsl #2]
   1a1f4:	cmp	r4, #256	; 0x100
   1a1f8:	bne	1a1d4 <__assert_fail@plt+0x8c7c>
   1a1fc:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a200:	bl	113fc <__ctype_b_loc@plt>
   1a204:	mov	r4, #1
   1a208:	mov	r1, r6
   1a20c:	ldr	r3, [r0]
   1a210:	add	ip, r3, #508	; 0x1fc
   1a214:	add	ip, ip, #2
   1a218:	sub	r3, r3, #2
   1a21c:	ldrh	r2, [r3, #2]!
   1a220:	tst	r2, #512	; 0x200
   1a224:	beq	1a240 <__assert_fail@plt+0x8ce8>
   1a228:	ldrb	r2, [r1]
   1a22c:	and	lr, r2, #31
   1a230:	asr	r2, r2, #5
   1a234:	ldr	r0, [r5, r2, lsl #2]
   1a238:	orr	r0, r0, r4, lsl lr
   1a23c:	str	r0, [r5, r2, lsl #2]
   1a240:	cmp	ip, r3
   1a244:	add	r1, r1, #1
   1a248:	bne	1a21c <__assert_fail@plt+0x8cc4>
   1a24c:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a250:	mov	r0, #12
   1a254:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a258:	ldr	r1, [pc, #1160]	; 1a6e8 <__assert_fail@plt+0x9190>
   1a25c:	ldr	r0, [sp, #36]	; 0x24
   1a260:	bl	111f8 <strcmp@plt>
   1a264:	subs	r4, r0, #0
   1a268:	bne	1a350 <__assert_fail@plt+0x8df8>
   1a26c:	cmp	r6, #0
   1a270:	bne	1a3a8 <__assert_fail@plt+0x8e50>
   1a274:	bl	113fc <__ctype_b_loc@plt>
   1a278:	mov	ip, #1
   1a27c:	ldr	r3, [r0]
   1a280:	sub	r3, r3, #2
   1a284:	ldrh	r2, [r3, #2]!
   1a288:	asr	r1, r4, #5
   1a28c:	and	r0, r4, #31
   1a290:	tst	r2, #256	; 0x100
   1a294:	add	r4, r4, #1
   1a298:	ldrne	r2, [r5, r1, lsl #2]
   1a29c:	orrne	r2, r2, ip, lsl r0
   1a2a0:	strne	r2, [r5, r1, lsl #2]
   1a2a4:	cmp	r4, #256	; 0x100
   1a2a8:	bne	1a284 <__assert_fail@plt+0x8d2c>
   1a2ac:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a2b0:	bl	113fc <__ctype_b_loc@plt>
   1a2b4:	mov	r4, #1
   1a2b8:	mov	r1, r6
   1a2bc:	ldr	r3, [r0]
   1a2c0:	add	ip, r3, #508	; 0x1fc
   1a2c4:	add	ip, ip, #2
   1a2c8:	sub	r3, r3, #2
   1a2cc:	ldrh	r2, [r3, #2]!
   1a2d0:	tst	r2, #8192	; 0x2000
   1a2d4:	beq	1a2f0 <__assert_fail@plt+0x8d98>
   1a2d8:	ldrb	r2, [r1]
   1a2dc:	and	lr, r2, #31
   1a2e0:	asr	r2, r2, #5
   1a2e4:	ldr	r0, [r5, r2, lsl #2]
   1a2e8:	orr	r0, r0, r4, lsl lr
   1a2ec:	str	r0, [r5, r2, lsl #2]
   1a2f0:	cmp	ip, r3
   1a2f4:	add	r1, r1, #1
   1a2f8:	bne	1a2cc <__assert_fail@plt+0x8d74>
   1a2fc:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a300:	bl	113fc <__ctype_b_loc@plt>
   1a304:	mov	r4, #1
   1a308:	mov	r1, r6
   1a30c:	ldr	r3, [r0]
   1a310:	add	ip, r3, #508	; 0x1fc
   1a314:	add	ip, ip, #2
   1a318:	sub	r3, r3, #2
   1a31c:	ldrh	r2, [r3, #2]!
   1a320:	tst	r2, #1024	; 0x400
   1a324:	beq	1a340 <__assert_fail@plt+0x8de8>
   1a328:	ldrb	r2, [r1]
   1a32c:	and	lr, r2, #31
   1a330:	asr	r2, r2, #5
   1a334:	ldr	r0, [r5, r2, lsl #2]
   1a338:	orr	r0, r0, r4, lsl lr
   1a33c:	str	r0, [r5, r2, lsl #2]
   1a340:	cmp	ip, r3
   1a344:	add	r1, r1, #1
   1a348:	bne	1a31c <__assert_fail@plt+0x8dc4>
   1a34c:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a350:	ldr	r1, [pc, #944]	; 1a708 <__assert_fail@plt+0x91b0>
   1a354:	ldr	r0, [sp, #36]	; 0x24
   1a358:	bl	111f8 <strcmp@plt>
   1a35c:	subs	r4, r0, #0
   1a360:	bne	1a448 <__assert_fail@plt+0x8ef0>
   1a364:	cmp	r6, #0
   1a368:	bne	1a3f8 <__assert_fail@plt+0x8ea0>
   1a36c:	bl	113fc <__ctype_b_loc@plt>
   1a370:	mov	ip, #1
   1a374:	ldr	r3, [r0]
   1a378:	sub	r3, r3, #2
   1a37c:	ldrh	r2, [r3, #2]!
   1a380:	asr	r1, r4, #5
   1a384:	and	r0, r4, #31
   1a388:	tst	r2, #1
   1a38c:	add	r4, r4, #1
   1a390:	ldrne	r2, [r5, r1, lsl #2]
   1a394:	orrne	r2, r2, ip, lsl r0
   1a398:	strne	r2, [r5, r1, lsl #2]
   1a39c:	cmp	r4, #256	; 0x100
   1a3a0:	bne	1a37c <__assert_fail@plt+0x8e24>
   1a3a4:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a3a8:	bl	113fc <__ctype_b_loc@plt>
   1a3ac:	mov	r1, r6
   1a3b0:	mov	lr, #1
   1a3b4:	ldr	r3, [r0]
   1a3b8:	add	r0, r3, #508	; 0x1fc
   1a3bc:	add	r0, r0, #2
   1a3c0:	sub	r3, r3, #2
   1a3c4:	ldrh	r2, [r3, #2]!
   1a3c8:	tst	r2, #256	; 0x100
   1a3cc:	beq	1a3e8 <__assert_fail@plt+0x8e90>
   1a3d0:	ldrb	r2, [r1]
   1a3d4:	and	r4, r2, #31
   1a3d8:	asr	r2, r2, #5
   1a3dc:	ldr	ip, [r5, r2, lsl #2]
   1a3e0:	orr	ip, ip, lr, lsl r4
   1a3e4:	str	ip, [r5, r2, lsl #2]
   1a3e8:	cmp	r0, r3
   1a3ec:	add	r1, r1, #1
   1a3f0:	bne	1a3c4 <__assert_fail@plt+0x8e6c>
   1a3f4:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a3f8:	bl	113fc <__ctype_b_loc@plt>
   1a3fc:	mov	r1, r6
   1a400:	mov	lr, #1
   1a404:	ldr	r3, [r0]
   1a408:	add	r0, r3, #508	; 0x1fc
   1a40c:	add	r0, r0, #2
   1a410:	sub	r3, r3, #2
   1a414:	ldrh	r2, [r3, #2]!
   1a418:	tst	r2, #1
   1a41c:	beq	1a438 <__assert_fail@plt+0x8ee0>
   1a420:	ldrb	r2, [r1]
   1a424:	and	r4, r2, #31
   1a428:	asr	r2, r2, #5
   1a42c:	ldr	ip, [r5, r2, lsl #2]
   1a430:	orr	ip, ip, lr, lsl r4
   1a434:	str	ip, [r5, r2, lsl #2]
   1a438:	cmp	r0, r3
   1a43c:	add	r1, r1, #1
   1a440:	bne	1a414 <__assert_fail@plt+0x8ebc>
   1a444:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a448:	ldr	r1, [pc, #700]	; 1a70c <__assert_fail@plt+0x91b4>
   1a44c:	ldr	r0, [sp, #36]	; 0x24
   1a450:	bl	111f8 <strcmp@plt>
   1a454:	subs	r4, r0, #0
   1a458:	bne	1a590 <__assert_fail@plt+0x9038>
   1a45c:	cmp	r6, #0
   1a460:	bne	1a540 <__assert_fail@plt+0x8fe8>
   1a464:	bl	113fc <__ctype_b_loc@plt>
   1a468:	mov	ip, #1
   1a46c:	ldr	r3, [r0]
   1a470:	sub	r3, r3, #2
   1a474:	ldrsh	r2, [r3, #2]!
   1a478:	cmp	r2, #0
   1a47c:	asrlt	r0, r4, #5
   1a480:	andlt	r1, r4, #31
   1a484:	ldrlt	r2, [r5, r0, lsl #2]
   1a488:	add	r4, r4, #1
   1a48c:	orrlt	r2, r2, ip, lsl r1
   1a490:	strlt	r2, [r5, r0, lsl #2]
   1a494:	cmp	r4, #256	; 0x100
   1a498:	bne	1a474 <__assert_fail@plt+0x8f1c>
   1a49c:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a4a0:	bl	113fc <__ctype_b_loc@plt>
   1a4a4:	mov	r1, r6
   1a4a8:	mov	lr, #1
   1a4ac:	ldr	r3, [r0]
   1a4b0:	add	r2, r3, #508	; 0x1fc
   1a4b4:	add	r2, r2, #2
   1a4b8:	sub	r3, r3, #2
   1a4bc:	ldrh	r0, [r3, #2]!
   1a4c0:	tst	r0, #2048	; 0x800
   1a4c4:	beq	1a4e0 <__assert_fail@plt+0x8f88>
   1a4c8:	ldrb	r0, [r1]
   1a4cc:	and	r4, r0, #31
   1a4d0:	asr	r0, r0, #5
   1a4d4:	ldr	ip, [r5, r0, lsl #2]
   1a4d8:	orr	ip, ip, lr, lsl r4
   1a4dc:	str	ip, [r5, r0, lsl #2]
   1a4e0:	cmp	r2, r3
   1a4e4:	add	r1, r1, #1
   1a4e8:	bne	1a4bc <__assert_fail@plt+0x8f64>
   1a4ec:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a4f0:	bl	113fc <__ctype_b_loc@plt>
   1a4f4:	mov	r1, r6
   1a4f8:	mov	lr, #1
   1a4fc:	ldr	r3, [r0]
   1a500:	add	r0, r3, #508	; 0x1fc
   1a504:	add	r0, r0, #2
   1a508:	sub	r3, r3, #2
   1a50c:	ldrh	r2, [r3, #2]!
   1a510:	tst	r2, #16384	; 0x4000
   1a514:	beq	1a530 <__assert_fail@plt+0x8fd8>
   1a518:	ldrb	r2, [r1]
   1a51c:	and	r4, r2, #31
   1a520:	asr	r2, r2, #5
   1a524:	ldr	ip, [r5, r2, lsl #2]
   1a528:	orr	ip, ip, lr, lsl r4
   1a52c:	str	ip, [r5, r2, lsl #2]
   1a530:	cmp	r3, r0
   1a534:	add	r1, r1, #1
   1a538:	bne	1a50c <__assert_fail@plt+0x8fb4>
   1a53c:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a540:	bl	113fc <__ctype_b_loc@plt>
   1a544:	mov	r1, r6
   1a548:	mov	lr, #1
   1a54c:	ldr	r3, [r0]
   1a550:	add	r0, r3, #508	; 0x1fc
   1a554:	add	r0, r0, #2
   1a558:	sub	r3, r3, #2
   1a55c:	ldrsh	r2, [r3, #2]!
   1a560:	cmp	r2, #0
   1a564:	bge	1a580 <__assert_fail@plt+0x9028>
   1a568:	ldrb	r2, [r1]
   1a56c:	and	r4, r2, #31
   1a570:	asr	r2, r2, #5
   1a574:	ldr	ip, [r5, r2, lsl #2]
   1a578:	orr	ip, ip, lr, lsl r4
   1a57c:	str	ip, [r5, r2, lsl #2]
   1a580:	cmp	r0, r3
   1a584:	add	r1, r1, #1
   1a588:	bne	1a55c <__assert_fail@plt+0x9004>
   1a58c:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a590:	ldr	r1, [pc, #376]	; 1a710 <__assert_fail@plt+0x91b8>
   1a594:	ldr	r0, [sp, #36]	; 0x24
   1a598:	bl	111f8 <strcmp@plt>
   1a59c:	subs	r4, r0, #0
   1a5a0:	bne	1a5e8 <__assert_fail@plt+0x9090>
   1a5a4:	cmp	r6, #0
   1a5a8:	bne	1a604 <__assert_fail@plt+0x90ac>
   1a5ac:	bl	113fc <__ctype_b_loc@plt>
   1a5b0:	mov	ip, #1
   1a5b4:	ldr	r3, [r0]
   1a5b8:	sub	r3, r3, #2
   1a5bc:	ldrh	r2, [r3, #2]!
   1a5c0:	asr	r1, r4, #5
   1a5c4:	and	r0, r4, #31
   1a5c8:	tst	r2, #4
   1a5cc:	add	r4, r4, #1
   1a5d0:	ldrne	r2, [r5, r1, lsl #2]
   1a5d4:	orrne	r2, r2, ip, lsl r0
   1a5d8:	strne	r2, [r5, r1, lsl #2]
   1a5dc:	cmp	r4, #256	; 0x100
   1a5e0:	bne	1a5bc <__assert_fail@plt+0x9064>
   1a5e4:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a5e8:	ldr	r1, [pc, #292]	; 1a714 <__assert_fail@plt+0x91bc>
   1a5ec:	ldr	r0, [sp, #36]	; 0x24
   1a5f0:	bl	111f8 <strcmp@plt>
   1a5f4:	subs	r4, r0, #0
   1a5f8:	beq	1a654 <__assert_fail@plt+0x90fc>
   1a5fc:	mov	r0, #4
   1a600:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a604:	bl	113fc <__ctype_b_loc@plt>
   1a608:	mov	r1, r6
   1a60c:	mov	lr, #1
   1a610:	ldr	r3, [r0]
   1a614:	add	r0, r3, #508	; 0x1fc
   1a618:	add	r0, r0, #2
   1a61c:	sub	r3, r3, #2
   1a620:	ldrh	r2, [r3, #2]!
   1a624:	tst	r2, #4
   1a628:	beq	1a644 <__assert_fail@plt+0x90ec>
   1a62c:	ldrb	r2, [r1]
   1a630:	and	r4, r2, #31
   1a634:	asr	r2, r2, #5
   1a638:	ldr	ip, [r5, r2, lsl #2]
   1a63c:	orr	ip, ip, lr, lsl r4
   1a640:	str	ip, [r5, r2, lsl #2]
   1a644:	cmp	r0, r3
   1a648:	add	r1, r1, #1
   1a64c:	bne	1a620 <__assert_fail@plt+0x90c8>
   1a650:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a654:	cmp	r6, #0
   1a658:	bne	1a698 <__assert_fail@plt+0x9140>
   1a65c:	bl	113fc <__ctype_b_loc@plt>
   1a660:	mov	ip, #1
   1a664:	ldr	r3, [r0]
   1a668:	sub	r3, r3, #2
   1a66c:	ldrh	r2, [r3, #2]!
   1a670:	asr	r1, r4, #5
   1a674:	and	r0, r4, #31
   1a678:	tst	r2, #4096	; 0x1000
   1a67c:	add	r4, r4, #1
   1a680:	ldrne	r2, [r5, r1, lsl #2]
   1a684:	orrne	r2, r2, ip, lsl r0
   1a688:	strne	r2, [r5, r1, lsl #2]
   1a68c:	cmp	r4, #256	; 0x100
   1a690:	bne	1a66c <__assert_fail@plt+0x9114>
   1a694:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a698:	bl	113fc <__ctype_b_loc@plt>
   1a69c:	mov	r1, r6
   1a6a0:	mov	lr, #1
   1a6a4:	ldr	r3, [r0]
   1a6a8:	add	r0, r3, #508	; 0x1fc
   1a6ac:	add	r0, r0, #2
   1a6b0:	sub	r3, r3, #2
   1a6b4:	ldrh	r2, [r3, #2]!
   1a6b8:	tst	r2, #4096	; 0x1000
   1a6bc:	beq	1a6d8 <__assert_fail@plt+0x9180>
   1a6c0:	ldrb	r2, [r1]
   1a6c4:	and	r4, r2, #31
   1a6c8:	asr	r2, r2, #5
   1a6cc:	ldr	ip, [r5, r2, lsl #2]
   1a6d0:	orr	ip, ip, lr, lsl r4
   1a6d4:	str	ip, [r5, r2, lsl #2]
   1a6d8:	cmp	r3, r0
   1a6dc:	add	r1, r1, #1
   1a6e0:	bne	1a6b4 <__assert_fail@plt+0x915c>
   1a6e4:	b	19ef8 <__assert_fail@plt+0x89a0>
   1a6e8:	andeq	sp, r2, ip, ror #3
   1a6ec:	andeq	sp, r2, r4, ror #3
   1a6f0:	strdeq	sp, [r2], -ip
   1a6f4:	andeq	sp, r2, r4, lsl #4
   1a6f8:	strdeq	sp, [r2], -r4
   1a6fc:	andeq	sp, r2, ip, lsl #4
   1a700:	andeq	sp, r2, r4, lsl r2
   1a704:	andeq	sp, r2, ip, lsl r2
   1a708:	andeq	sp, r2, r4, lsr #4
   1a70c:	andeq	sp, r2, ip, lsr #4
   1a710:	andeq	sp, r2, r4, lsr r2
   1a714:	andeq	sp, r2, ip, lsr r2
   1a718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a71c:	sub	sp, sp, #308	; 0x134
   1a720:	ldr	r9, [r0]
   1a724:	ldr	ip, [r9, #92]	; 0x5c
   1a728:	cmp	ip, #1
   1a72c:	movne	ip, #0
   1a730:	ldreq	ip, [r0, #12]
   1a734:	lsreq	ip, ip, #22
   1a738:	andeq	ip, ip, #1
   1a73c:	str	ip, [sp, #20]
   1a740:	ldr	ip, [r1]
   1a744:	cmp	ip, #0
   1a748:	ble	1aaec <__assert_fail@plt+0x9594>
   1a74c:	mov	r6, r3
   1a750:	mov	r3, #0
   1a754:	str	r2, [sp, #16]
   1a758:	str	r1, [sp, #24]
   1a75c:	str	r0, [sp, #28]
   1a760:	str	r3, [sp, #4]
   1a764:	mov	r5, #1
   1a768:	b	1a7a4 <__assert_fail@plt+0x924c>
   1a76c:	cmp	r4, #3
   1a770:	beq	1a8e4 <__assert_fail@plt+0x938c>
   1a774:	cmp	r4, #6
   1a778:	beq	1a998 <__assert_fail@plt+0x9440>
   1a77c:	and	r3, r4, #253	; 0xfd
   1a780:	cmp	r3, #5
   1a784:	beq	1ab24 <__assert_fail@plt+0x95cc>
   1a788:	cmp	r4, #2
   1a78c:	beq	1aacc <__assert_fail@plt+0x9574>
   1a790:	ldr	r3, [sp, #4]
   1a794:	add	r3, r3, #1
   1a798:	cmp	r3, ip
   1a79c:	str	r3, [sp, #4]
   1a7a0:	bge	1aaec <__assert_fail@plt+0x9594>
   1a7a4:	ldr	r3, [sp, #16]
   1a7a8:	ldr	r1, [sp, #4]
   1a7ac:	ldr	r2, [r3]
   1a7b0:	ldr	r3, [r9]
   1a7b4:	ldr	r7, [r2, r1, lsl #2]
   1a7b8:	lsl	r2, r7, #3
   1a7bc:	str	r2, [sp, #8]
   1a7c0:	add	r2, r3, r2
   1a7c4:	ldrb	r4, [r2, #4]
   1a7c8:	cmp	r4, #1
   1a7cc:	bne	1a76c <__assert_fail@plt+0x9214>
   1a7d0:	ldrb	r3, [r3, r7, lsl #3]
   1a7d4:	ldr	r2, [sp, #20]
   1a7d8:	cmp	r2, #0
   1a7dc:	strb	r4, [r6, r3]
   1a7e0:	str	r3, [sp, #12]
   1a7e4:	beq	1a7fc <__assert_fail@plt+0x92a4>
   1a7e8:	bl	113cc <__ctype_tolower_loc@plt>
   1a7ec:	ldr	r3, [sp, #12]
   1a7f0:	ldr	r2, [r0]
   1a7f4:	ldr	r3, [r2, r3, lsl #2]
   1a7f8:	strb	r4, [r6, r3]
   1a7fc:	ldr	r3, [sp, #28]
   1a800:	ldr	r3, [r3, #12]
   1a804:	tst	r3, #4194304	; 0x400000
   1a808:	beq	1a8d8 <__assert_fail@plt+0x9380>
   1a80c:	ldr	r3, [r9, #92]	; 0x5c
   1a810:	cmp	r3, #1
   1a814:	ble	1a8d8 <__assert_fail@plt+0x9380>
   1a818:	ldr	r3, [r9]
   1a81c:	add	r1, r7, #1
   1a820:	ldrb	r2, [r3, r7, lsl #3]
   1a824:	strb	r2, [sp, #48]	; 0x30
   1a828:	ldr	r2, [r9, #8]
   1a82c:	cmp	r2, r1
   1a830:	bls	1ab1c <__assert_fail@plt+0x95c4>
   1a834:	ldr	r0, [sp, #8]
   1a838:	ldr	ip, [pc, #772]	; 1ab44 <__assert_fail@plt+0x95ec>
   1a83c:	add	r2, r0, #8
   1a840:	add	r3, r3, r2
   1a844:	ldr	r2, [r3, #4]
   1a848:	bic	r2, r2, #-16777216	; 0xff000000
   1a84c:	bic	r2, r2, #14614528	; 0xdf0000
   1a850:	bic	r2, r2, #65280	; 0xff00
   1a854:	cmp	r2, ip
   1a858:	bne	1ab1c <__assert_fail@plt+0x95c4>
   1a85c:	add	r8, r0, #16
   1a860:	add	r4, sp, #49	; 0x31
   1a864:	b	1a890 <__assert_fail@plt+0x9338>
   1a868:	ldr	r3, [r9]
   1a86c:	ldr	r0, [pc, #720]	; 1ab44 <__assert_fail@plt+0x95ec>
   1a870:	add	r3, r3, r8
   1a874:	add	r8, r8, #8
   1a878:	ldr	r2, [r3, #4]
   1a87c:	bic	r2, r2, #-16777216	; 0xff000000
   1a880:	bic	r2, r2, #14614528	; 0xdf0000
   1a884:	bic	r2, r2, #65280	; 0xff00
   1a888:	cmp	r2, r0
   1a88c:	bne	1a8a8 <__assert_fail@plt+0x9350>
   1a890:	ldrb	r3, [r3]
   1a894:	add	r1, r1, #1
   1a898:	strb	r3, [r4], #1
   1a89c:	ldr	r3, [r9, #8]
   1a8a0:	cmp	r1, r3
   1a8a4:	bcc	1a868 <__assert_fail@plt+0x9310>
   1a8a8:	add	r3, sp, #48	; 0x30
   1a8ac:	sub	r4, r4, r3
   1a8b0:	mov	ip, #0
   1a8b4:	mov	r2, r4
   1a8b8:	add	r3, sp, #40	; 0x28
   1a8bc:	add	r1, sp, #48	; 0x30
   1a8c0:	add	r0, sp, #36	; 0x24
   1a8c4:	str	ip, [sp, #40]	; 0x28
   1a8c8:	str	ip, [sp, #44]	; 0x2c
   1a8cc:	bl	2ba20 <__assert_fail@plt+0x1a4c8>
   1a8d0:	cmp	r4, r0
   1a8d4:	beq	1aaf4 <__assert_fail@plt+0x959c>
   1a8d8:	ldr	r3, [sp, #24]
   1a8dc:	ldr	ip, [r3]
   1a8e0:	b	1a790 <__assert_fail@plt+0x9238>
   1a8e4:	ldr	r8, [sp, #20]
   1a8e8:	mov	r7, #0
   1a8ec:	str	r9, [sp, #12]
   1a8f0:	ldr	r2, [sp, #8]
   1a8f4:	cmp	r8, #0
   1a8f8:	ldr	r3, [r3, r2]
   1a8fc:	ldr	r9, [r3, r7]
   1a900:	bne	1a93c <__assert_fail@plt+0x93e4>
   1a904:	add	r0, r6, r7, lsl #3
   1a908:	mov	r3, r8
   1a90c:	lsr	r2, r9, r3
   1a910:	tst	r2, #1
   1a914:	strbne	r5, [r0, r3]
   1a918:	add	r3, r3, #1
   1a91c:	cmp	r3, #32
   1a920:	bne	1a90c <__assert_fail@plt+0x93b4>
   1a924:	add	r7, r7, #4
   1a928:	cmp	r7, #32
   1a92c:	beq	1a988 <__assert_fail@plt+0x9430>
   1a930:	ldr	r3, [sp, #12]
   1a934:	ldr	r3, [r3]
   1a938:	b	1a8f0 <__assert_fail@plt+0x9398>
   1a93c:	add	sl, r6, r7, lsl #3
   1a940:	lsl	fp, r7, #5
   1a944:	mov	r4, #0
   1a948:	lsr	r3, r9, r4
   1a94c:	tst	r3, #1
   1a950:	add	r4, r4, #1
   1a954:	beq	1a96c <__assert_fail@plt+0x9414>
   1a958:	strb	r5, [sl]
   1a95c:	bl	113cc <__ctype_tolower_loc@plt>
   1a960:	ldr	r3, [r0]
   1a964:	ldr	r3, [r3, fp]
   1a968:	strb	r5, [r6, r3]
   1a96c:	cmp	r4, #32
   1a970:	add	sl, sl, #1
   1a974:	add	fp, fp, #4
   1a978:	bne	1a948 <__assert_fail@plt+0x93f0>
   1a97c:	add	r7, r7, #4
   1a980:	cmp	r7, #32
   1a984:	bne	1a930 <__assert_fail@plt+0x93d8>
   1a988:	ldr	r3, [sp, #24]
   1a98c:	ldr	r9, [sp, #12]
   1a990:	ldr	ip, [r3]
   1a994:	b	1a790 <__assert_fail@plt+0x9238>
   1a998:	ldr	r3, [r9, #92]	; 0x5c
   1a99c:	ldr	r7, [r2]
   1a9a0:	cmp	r3, #1
   1a9a4:	ble	1a9cc <__assert_fail@plt+0x9474>
   1a9a8:	ldr	r3, [r7, #36]	; 0x24
   1a9ac:	cmp	r3, #0
   1a9b0:	bne	1aa84 <__assert_fail@plt+0x952c>
   1a9b4:	ldrb	r3, [r7, #16]
   1a9b8:	tst	r3, #1
   1a9bc:	bne	1aa84 <__assert_fail@plt+0x952c>
   1a9c0:	ldr	r3, [r7, #32]
   1a9c4:	cmp	r3, #0
   1a9c8:	bne	1aa84 <__assert_fail@plt+0x952c>
   1a9cc:	ldr	r3, [r7, #20]
   1a9d0:	cmp	r3, #0
   1a9d4:	movgt	r4, #0
   1a9d8:	ldrgt	r8, [sp, #28]
   1a9dc:	ble	1a790 <__assert_fail@plt+0x9238>
   1a9e0:	mov	r3, #0
   1a9e4:	str	r3, [sp, #40]	; 0x28
   1a9e8:	str	r3, [sp, #44]	; 0x2c
   1a9ec:	ldr	r3, [r7]
   1a9f0:	add	r2, sp, #40	; 0x28
   1a9f4:	add	r0, sp, #48	; 0x30
   1a9f8:	ldr	r1, [r3, r4, lsl #2]
   1a9fc:	bl	111e0 <wcrtomb@plt>
   1aa00:	lsl	sl, r4, #2
   1aa04:	add	r4, r4, #1
   1aa08:	cmn	r0, #1
   1aa0c:	beq	1aa34 <__assert_fail@plt+0x94dc>
   1aa10:	ldrb	fp, [sp, #48]	; 0x30
   1aa14:	ldr	r3, [sp, #20]
   1aa18:	cmp	r3, #0
   1aa1c:	strb	r5, [r6, fp]
   1aa20:	beq	1aa34 <__assert_fail@plt+0x94dc>
   1aa24:	bl	113cc <__ctype_tolower_loc@plt>
   1aa28:	ldr	r3, [r0]
   1aa2c:	ldr	r3, [r3, fp, lsl #2]
   1aa30:	strb	r5, [r6, r3]
   1aa34:	ldr	r3, [r8, #12]
   1aa38:	tst	r3, #4194304	; 0x400000
   1aa3c:	beq	1aa74 <__assert_fail@plt+0x951c>
   1aa40:	ldr	r3, [r9, #92]	; 0x5c
   1aa44:	cmp	r3, #1
   1aa48:	ble	1aa74 <__assert_fail@plt+0x951c>
   1aa4c:	ldr	r3, [r7]
   1aa50:	ldr	r0, [r3, sl]
   1aa54:	bl	11288 <towlower@plt>
   1aa58:	add	r2, sp, #40	; 0x28
   1aa5c:	mov	r1, r0
   1aa60:	add	r0, sp, #48	; 0x30
   1aa64:	bl	111e0 <wcrtomb@plt>
   1aa68:	cmn	r0, #1
   1aa6c:	ldrbne	r3, [sp, #48]	; 0x30
   1aa70:	strbne	r5, [r6, r3]
   1aa74:	ldr	r3, [r7, #20]
   1aa78:	cmp	r4, r3
   1aa7c:	blt	1a9e0 <__assert_fail@plt+0x9488>
   1aa80:	b	1a8d8 <__assert_fail@plt+0x9380>
   1aa84:	mov	r3, #0
   1aa88:	strb	r3, [sp, #40]	; 0x28
   1aa8c:	mov	r0, #0
   1aa90:	add	r3, sp, #48	; 0x30
   1aa94:	mov	r2, r5
   1aa98:	add	r1, sp, #40	; 0x28
   1aa9c:	str	r0, [sp, #48]	; 0x30
   1aaa0:	str	r0, [sp, #52]	; 0x34
   1aaa4:	bl	2ba20 <__assert_fail@plt+0x1a4c8>
   1aaa8:	ldrb	r3, [sp, #40]	; 0x28
   1aaac:	cmn	r0, #2
   1aab0:	strbeq	r5, [r6, r3]
   1aab4:	add	r3, r3, #1
   1aab8:	uxtb	r3, r3
   1aabc:	cmp	r3, #0
   1aac0:	strb	r3, [sp, #40]	; 0x28
   1aac4:	bne	1aa8c <__assert_fail@plt+0x9534>
   1aac8:	b	1a8d8 <__assert_fail@plt+0x9380>
   1aacc:	mov	r0, r6
   1aad0:	mov	r2, #256	; 0x100
   1aad4:	mov	r1, #1
   1aad8:	bl	1145c <memset@plt>
   1aadc:	ldr	r2, [sp, #28]
   1aae0:	ldrb	r3, [r2, #28]
   1aae4:	orr	r3, r3, #1
   1aae8:	strb	r3, [r2, #28]
   1aaec:	add	sp, sp, #308	; 0x134
   1aaf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aaf4:	ldr	r0, [sp, #36]	; 0x24
   1aaf8:	bl	11288 <towlower@plt>
   1aafc:	add	r2, sp, #40	; 0x28
   1ab00:	mov	r1, r0
   1ab04:	add	r0, sp, #48	; 0x30
   1ab08:	bl	111e0 <wcrtomb@plt>
   1ab0c:	cmn	r0, #1
   1ab10:	ldrbne	r3, [sp, #48]	; 0x30
   1ab14:	strbne	r5, [r6, r3]
   1ab18:	b	1a8d8 <__assert_fail@plt+0x9380>
   1ab1c:	add	r4, sp, #49	; 0x31
   1ab20:	b	1a8a8 <__assert_fail@plt+0x9350>
   1ab24:	mov	r0, r6
   1ab28:	mov	r2, #256	; 0x100
   1ab2c:	mov	r1, #1
   1ab30:	bl	1145c <memset@plt>
   1ab34:	cmp	r4, #2
   1ab38:	beq	1aadc <__assert_fail@plt+0x9584>
   1ab3c:	add	sp, sp, #308	; 0x134
   1ab40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab44:	eoreq	r0, r0, r1
   1ab48:	add	ip, r0, r2, lsl #3
   1ab4c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ab50:	ldrb	r6, [ip, #4]
   1ab54:	ldr	r7, [sp, #32]
   1ab58:	cmp	r6, #7
   1ab5c:	beq	1ac3c <__assert_fail@plt+0x96e4>
   1ab60:	ldr	ip, [r3, #80]	; 0x50
   1ab64:	cmp	ip, #1
   1ab68:	beq	1ac4c <__assert_fail@plt+0x96f4>
   1ab6c:	ldr	r5, [r3, #28]
   1ab70:	add	lr, r7, #1
   1ab74:	cmp	r5, lr
   1ab78:	ble	1ac4c <__assert_fail@plt+0x96f4>
   1ab7c:	ldr	r8, [r3, #8]
   1ab80:	add	ip, r8, lr, lsl #2
   1ab84:	ldr	lr, [r8, lr, lsl #2]
   1ab88:	cmn	lr, #1
   1ab8c:	subeq	r5, r5, r7
   1ab90:	moveq	r4, #1
   1ab94:	beq	1aba8 <__assert_fail@plt+0x9650>
   1ab98:	b	1ac4c <__assert_fail@plt+0x96f4>
   1ab9c:	ldr	lr, [ip, #4]!
   1aba0:	cmn	lr, #1
   1aba4:	bne	1abb4 <__assert_fail@plt+0x965c>
   1aba8:	add	r4, r4, #1
   1abac:	cmp	r4, r5
   1abb0:	bne	1ab9c <__assert_fail@plt+0x9644>
   1abb4:	cmp	r6, #5
   1abb8:	beq	1ac58 <__assert_fail@plt+0x9700>
   1abbc:	cmp	r4, #1
   1abc0:	sub	r6, r6, #6
   1abc4:	clz	r6, r6
   1abc8:	lsr	r6, r6, #5
   1abcc:	moveq	r6, #0
   1abd0:	cmp	r6, #0
   1abd4:	beq	1ac4c <__assert_fail@plt+0x96f4>
   1abd8:	ldr	r9, [r0, r2, lsl #3]
   1abdc:	ldr	ip, [r9, #32]
   1abe0:	cmp	ip, #0
   1abe4:	beq	1ac94 <__assert_fail@plt+0x973c>
   1abe8:	ldr	r0, [r9, #20]
   1abec:	cmp	r0, #0
   1abf0:	ldr	r5, [r8, r7, lsl #2]
   1abf4:	ble	1ac28 <__assert_fail@plt+0x96d0>
   1abf8:	ldr	r2, [r9]
   1abfc:	ldr	r3, [r2]
   1ac00:	cmp	r5, r3
   1ac04:	movne	r3, #0
   1ac08:	bne	1ac1c <__assert_fail@plt+0x96c4>
   1ac0c:	b	1ace4 <__assert_fail@plt+0x978c>
   1ac10:	ldr	r1, [r2, #4]!
   1ac14:	cmp	r5, r1
   1ac18:	beq	1ace4 <__assert_fail@plt+0x978c>
   1ac1c:	add	r3, r3, #1
   1ac20:	cmp	r3, r0
   1ac24:	bne	1ac10 <__assert_fail@plt+0x96b8>
   1ac28:	ldr	r3, [r9, #36]	; 0x24
   1ac2c:	cmp	r3, #0
   1ac30:	ble	1ad2c <__assert_fail@plt+0x97d4>
   1ac34:	mov	r6, #0
   1ac38:	b	1acc8 <__assert_fail@plt+0x9770>
   1ac3c:	ldr	r1, [r3, #4]
   1ac40:	ldrb	r2, [r1, r7]
   1ac44:	cmp	r2, #193	; 0xc1
   1ac48:	bhi	1acf4 <__assert_fail@plt+0x979c>
   1ac4c:	mov	r4, #0
   1ac50:	mov	r0, r4
   1ac54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ac58:	ldr	r2, [r1]
   1ac5c:	tst	r2, #64	; 0x40
   1ac60:	beq	1ac80 <__assert_fail@plt+0x9728>
   1ac64:	tst	r2, #128	; 0x80
   1ac68:	beq	1ac50 <__assert_fail@plt+0x96f8>
   1ac6c:	ldr	r3, [r3, #4]
   1ac70:	ldrb	r3, [r3, r7]
   1ac74:	cmp	r3, #0
   1ac78:	beq	1ac4c <__assert_fail@plt+0x96f4>
   1ac7c:	b	1ac50 <__assert_fail@plt+0x96f8>
   1ac80:	ldr	r1, [r3, #4]
   1ac84:	ldrb	r1, [r1, r7]
   1ac88:	cmp	r1, #10
   1ac8c:	bne	1ac64 <__assert_fail@plt+0x970c>
   1ac90:	b	1ac4c <__assert_fail@plt+0x96f4>
   1ac94:	ldr	r3, [r9, #36]	; 0x24
   1ac98:	ldr	r0, [r9, #20]
   1ac9c:	cmp	r3, #0
   1aca0:	bne	1abec <__assert_fail@plt+0x9694>
   1aca4:	cmp	r0, #0
   1aca8:	bne	1abec <__assert_fail@plt+0x9694>
   1acac:	ldrb	r3, [r9, #16]
   1acb0:	tst	r3, #1
   1acb4:	bne	1ac50 <__assert_fail@plt+0x96f8>
   1acb8:	b	1ac4c <__assert_fail@plt+0x96f4>
   1acbc:	ldr	r3, [r9, #36]	; 0x24
   1acc0:	cmp	r6, r3
   1acc4:	bge	1ad28 <__assert_fail@plt+0x97d0>
   1acc8:	ldr	r3, [r9, #12]
   1accc:	mov	r0, r5
   1acd0:	ldr	r1, [r3, r6, lsl #2]
   1acd4:	bl	111ec <iswctype@plt>
   1acd8:	add	r6, r6, #1
   1acdc:	cmp	r0, #0
   1ace0:	beq	1acbc <__assert_fail@plt+0x9764>
   1ace4:	ldrb	r3, [r9, #16]
   1ace8:	tst	r3, #1
   1acec:	beq	1ac50 <__assert_fail@plt+0x96f8>
   1acf0:	b	1ac4c <__assert_fail@plt+0x96f4>
   1acf4:	ldr	lr, [r3, #48]	; 0x30
   1acf8:	add	ip, r7, #1
   1acfc:	cmp	ip, lr
   1ad00:	bge	1ac4c <__assert_fail@plt+0x96f4>
   1ad04:	add	r0, r1, r7
   1ad08:	cmp	r2, #223	; 0xdf
   1ad0c:	ldrb	r3, [r0, #1]
   1ad10:	bhi	1ad70 <__assert_fail@plt+0x9818>
   1ad14:	eor	r3, r3, #128	; 0x80
   1ad18:	cmp	r3, #63	; 0x3f
   1ad1c:	movls	r4, #2
   1ad20:	bls	1ac50 <__assert_fail@plt+0x96f8>
   1ad24:	b	1ac4c <__assert_fail@plt+0x96f4>
   1ad28:	ldr	ip, [r9, #32]
   1ad2c:	cmp	ip, #0
   1ad30:	ble	1acac <__assert_fail@plt+0x9754>
   1ad34:	ldr	r2, [r9, #4]
   1ad38:	mov	r3, #0
   1ad3c:	sub	r2, r2, #4
   1ad40:	b	1ad50 <__assert_fail@plt+0x97f8>
   1ad44:	add	r3, r3, #1
   1ad48:	cmp	r3, ip
   1ad4c:	beq	1acac <__assert_fail@plt+0x9754>
   1ad50:	ldr	r1, [r2, #4]!
   1ad54:	cmp	r5, r1
   1ad58:	bcc	1ad44 <__assert_fail@plt+0x97ec>
   1ad5c:	ldr	r1, [r9, #8]
   1ad60:	ldr	r1, [r1, r3, lsl #2]
   1ad64:	cmp	r5, r1
   1ad68:	bhi	1ad44 <__assert_fail@plt+0x97ec>
   1ad6c:	b	1ace4 <__assert_fail@plt+0x978c>
   1ad70:	cmp	r2, #239	; 0xef
   1ad74:	bhi	1ae00 <__assert_fail@plt+0x98a8>
   1ad78:	cmp	r3, #159	; 0x9f
   1ad7c:	cmpls	r2, #224	; 0xe0
   1ad80:	movne	r4, #3
   1ad84:	beq	1ac4c <__assert_fail@plt+0x96f4>
   1ad88:	add	r7, r7, r4
   1ad8c:	cmp	lr, r7
   1ad90:	blt	1ac4c <__assert_fail@plt+0x96f4>
   1ad94:	ldrb	r3, [r1, ip]
   1ad98:	eor	r3, r3, #128	; 0x80
   1ad9c:	cmp	r3, #63	; 0x3f
   1ada0:	bhi	1ac4c <__assert_fail@plt+0x96f4>
   1ada4:	ldrb	r3, [r0, #2]
   1ada8:	eor	r3, r3, #128	; 0x80
   1adac:	cmp	r3, #63	; 0x3f
   1adb0:	bhi	1ac4c <__assert_fail@plt+0x96f4>
   1adb4:	cmp	r4, #3
   1adb8:	beq	1ac50 <__assert_fail@plt+0x96f8>
   1adbc:	ldrb	r3, [r0, #3]
   1adc0:	eor	r3, r3, #128	; 0x80
   1adc4:	cmp	r3, #63	; 0x3f
   1adc8:	bhi	1ac4c <__assert_fail@plt+0x96f4>
   1adcc:	cmp	r4, #4
   1add0:	beq	1ac50 <__assert_fail@plt+0x96f8>
   1add4:	ldrb	r3, [r0, #4]
   1add8:	eor	r3, r3, #128	; 0x80
   1addc:	cmp	r3, #63	; 0x3f
   1ade0:	bhi	1ac4c <__assert_fail@plt+0x96f4>
   1ade4:	cmp	r4, #6
   1ade8:	bne	1ae54 <__assert_fail@plt+0x98fc>
   1adec:	ldrb	r3, [r0, #5]
   1adf0:	eor	r3, r3, #128	; 0x80
   1adf4:	cmp	r3, #63	; 0x3f
   1adf8:	bls	1ac50 <__assert_fail@plt+0x96f8>
   1adfc:	b	1ac4c <__assert_fail@plt+0x96f4>
   1ae00:	cmp	r2, #247	; 0xf7
   1ae04:	bhi	1ae1c <__assert_fail@plt+0x98c4>
   1ae08:	cmp	r3, #143	; 0x8f
   1ae0c:	cmpls	r2, #240	; 0xf0
   1ae10:	movne	r4, #4
   1ae14:	bne	1ad88 <__assert_fail@plt+0x9830>
   1ae18:	b	1ac4c <__assert_fail@plt+0x96f4>
   1ae1c:	cmp	r2, #251	; 0xfb
   1ae20:	bhi	1ae38 <__assert_fail@plt+0x98e0>
   1ae24:	cmp	r3, #135	; 0x87
   1ae28:	cmpls	r2, #248	; 0xf8
   1ae2c:	movne	r4, #5
   1ae30:	bne	1ad88 <__assert_fail@plt+0x9830>
   1ae34:	b	1ac4c <__assert_fail@plt+0x96f4>
   1ae38:	cmp	r2, #253	; 0xfd
   1ae3c:	bhi	1ac4c <__assert_fail@plt+0x96f4>
   1ae40:	cmp	r3, #131	; 0x83
   1ae44:	cmpls	r2, #252	; 0xfc
   1ae48:	beq	1ac4c <__assert_fail@plt+0x96f4>
   1ae4c:	mov	r4, #6
   1ae50:	b	1ad88 <__assert_fail@plt+0x9830>
   1ae54:	mov	r4, #5
   1ae58:	b	1ac50 <__assert_fail@plt+0x96f8>
   1ae5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ae60:	sub	sp, sp, #8
   1ae64:	ldr	r6, [r1, #40]	; 0x28
   1ae68:	ldr	r3, [r1, #56]	; 0x38
   1ae6c:	cmp	r3, r6
   1ae70:	ble	1b0e4 <__assert_fail@plt+0x9b8c>
   1ae74:	ldr	sl, [r1, #4]
   1ae78:	ldrb	r3, [r0, #6]
   1ae7c:	mov	r8, r2
   1ae80:	ldrb	r7, [sl, r6]
   1ae84:	and	r3, r3, #159	; 0x9f
   1ae88:	strb	r3, [r0, #6]
   1ae8c:	strb	r7, [r0]
   1ae90:	ldr	r3, [r1, #80]	; 0x50
   1ae94:	mov	r5, r0
   1ae98:	cmp	r3, #1
   1ae9c:	mov	r4, r1
   1aea0:	ble	1b0f8 <__assert_fail@plt+0x9ba0>
   1aea4:	ldr	r2, [r1, #28]
   1aea8:	cmp	r6, r2
   1aeac:	beq	1aec0 <__assert_fail@plt+0x9968>
   1aeb0:	ldr	r2, [r1, #8]
   1aeb4:	ldr	r2, [r2, r6, lsl #2]
   1aeb8:	cmn	r2, #1
   1aebc:	beq	1b358 <__assert_fail@plt+0x9e00>
   1aec0:	cmp	r7, #92	; 0x5c
   1aec4:	beq	1b160 <__assert_fail@plt+0x9c08>
   1aec8:	ldr	r3, [r4, #8]
   1aecc:	mov	r2, #1
   1aed0:	strb	r2, [r5, #4]
   1aed4:	ldr	r9, [r3, r6, lsl #2]
   1aed8:	mov	r0, r9
   1aedc:	bl	11438 <iswalnum@plt>
   1aee0:	ldrb	r3, [r5, #6]
   1aee4:	sub	r9, r9, #95	; 0x5f
   1aee8:	clz	r9, r9
   1aeec:	lsr	r9, r9, #5
   1aef0:	bic	r3, r3, #64	; 0x40
   1aef4:	cmp	r0, #0
   1aef8:	orrne	r9, r9, #1
   1aefc:	orr	r9, r3, r9, lsl #6
   1af00:	strb	r9, [r5, #6]
   1af04:	sub	r7, r7, #10
   1af08:	cmp	r7, #115	; 0x73
   1af0c:	ldrls	pc, [pc, r7, lsl #2]
   1af10:	b	1b154 <__assert_fail@plt+0x9bfc>
   1af14:	muleq	r1, ip, r3
   1af18:	andeq	fp, r1, r4, asr r1
   1af1c:	andeq	fp, r1, r4, asr r1
   1af20:	andeq	fp, r1, r4, asr r1
   1af24:	andeq	fp, r1, r4, asr r1
   1af28:	andeq	fp, r1, r4, asr r1
   1af2c:	andeq	fp, r1, r4, asr r1
   1af30:	andeq	fp, r1, r4, asr r1
   1af34:	andeq	fp, r1, r4, asr r1
   1af38:	andeq	fp, r1, r4, asr r1
   1af3c:	andeq	fp, r1, r4, asr r1
   1af40:	andeq	fp, r1, r4, asr r1
   1af44:	andeq	fp, r1, r4, asr r1
   1af48:	andeq	fp, r1, r4, asr r1
   1af4c:	andeq	fp, r1, r4, asr r1
   1af50:	andeq	fp, r1, r4, asr r1
   1af54:	andeq	fp, r1, r4, asr r1
   1af58:	andeq	fp, r1, r4, asr r1
   1af5c:	andeq	fp, r1, r4, asr r1
   1af60:	andeq	fp, r1, r4, asr r1
   1af64:	andeq	fp, r1, r4, asr r1
   1af68:	andeq	fp, r1, r4, asr r1
   1af6c:	andeq	fp, r1, r4, asr r1
   1af70:	andeq	fp, r1, r4, asr r1
   1af74:	andeq	fp, r1, r4, asr r1
   1af78:	andeq	fp, r1, r4, asr r1
   1af7c:			; <UNDEFINED> instruction: 0x0001b3b4
   1af80:	andeq	fp, r1, r4, asr r1
   1af84:	andeq	fp, r1, r4, asr r1
   1af88:	andeq	fp, r1, r4, asr r1
   1af8c:	andeq	fp, r1, r4, lsl r4
   1af90:	andeq	fp, r1, ip, lsr #8
   1af94:	andeq	fp, r1, r4, asr #8
   1af98:	andeq	fp, r1, r4, asr r4
   1af9c:	andeq	fp, r1, r4, asr r1
   1afa0:	andeq	fp, r1, r4, asr r1
   1afa4:	andeq	fp, r1, r4, ror r4
   1afa8:	andeq	fp, r1, r4, asr r1
   1afac:	andeq	fp, r1, r4, asr r1
   1afb0:	andeq	fp, r1, r4, asr r1
   1afb4:	andeq	fp, r1, r4, asr r1
   1afb8:	andeq	fp, r1, r4, asr r1
   1afbc:	andeq	fp, r1, r4, asr r1
   1afc0:	andeq	fp, r1, r4, asr r1
   1afc4:	andeq	fp, r1, r4, asr r1
   1afc8:	andeq	fp, r1, r4, asr r1
   1afcc:	andeq	fp, r1, r4, asr r1
   1afd0:	andeq	fp, r1, r4, asr r1
   1afd4:	andeq	fp, r1, r4, asr r1
   1afd8:	andeq	fp, r1, r4, asr r1
   1afdc:	andeq	fp, r1, r4, asr r1
   1afe0:	andeq	fp, r1, r4, asr r1
   1afe4:	andeq	fp, r1, r4, asr r1
   1afe8:	andeq	fp, r1, r4, lsl #9
   1afec:	andeq	fp, r1, r4, asr r1
   1aff0:	andeq	fp, r1, r4, asr r1
   1aff4:	andeq	fp, r1, r4, asr r1
   1aff8:	andeq	fp, r1, r4, asr r1
   1affc:	andeq	fp, r1, r4, asr r1
   1b000:	andeq	fp, r1, r4, asr r1
   1b004:	andeq	fp, r1, r4, asr r1
   1b008:	andeq	fp, r1, r4, asr r1
   1b00c:	andeq	fp, r1, r4, asr r1
   1b010:	andeq	fp, r1, r4, asr r1
   1b014:	andeq	fp, r1, r4, asr r1
   1b018:	andeq	fp, r1, r4, asr r1
   1b01c:	andeq	fp, r1, r4, asr r1
   1b020:	andeq	fp, r1, r4, asr r1
   1b024:	andeq	fp, r1, r4, asr r1
   1b028:	andeq	fp, r1, r4, asr r1
   1b02c:	andeq	fp, r1, r4, asr r1
   1b030:	andeq	fp, r1, r4, asr r1
   1b034:	andeq	fp, r1, r4, asr r1
   1b038:	andeq	fp, r1, r4, asr r1
   1b03c:	andeq	fp, r1, r4, asr r1
   1b040:	andeq	fp, r1, r4, asr r1
   1b044:	andeq	fp, r1, r4, asr r1
   1b048:	andeq	fp, r1, r4, asr r1
   1b04c:	andeq	fp, r1, r4, asr r1
   1b050:	andeq	fp, r1, r4, asr r1
   1b054:	andeq	fp, r1, r4, asr r1
   1b058:	andeq	fp, r1, r4, lsr #9
   1b05c:	andeq	fp, r1, r4, asr r1
   1b060:	andeq	fp, r1, r4, asr r1
   1b064:			; <UNDEFINED> instruction: 0x0001b4b4
   1b068:	andeq	fp, r1, r4, asr r1
   1b06c:	andeq	fp, r1, r4, asr r1
   1b070:	andeq	fp, r1, r4, asr r1
   1b074:	andeq	fp, r1, r4, asr r1
   1b078:	andeq	fp, r1, r4, asr r1
   1b07c:	andeq	fp, r1, r4, asr r1
   1b080:	andeq	fp, r1, r4, asr r1
   1b084:	andeq	fp, r1, r4, asr r1
   1b088:	andeq	fp, r1, r4, asr r1
   1b08c:	andeq	fp, r1, r4, asr r1
   1b090:	andeq	fp, r1, r4, asr r1
   1b094:	andeq	fp, r1, r4, asr r1
   1b098:	andeq	fp, r1, r4, asr r1
   1b09c:	andeq	fp, r1, r4, asr r1
   1b0a0:	andeq	fp, r1, r4, asr r1
   1b0a4:	andeq	fp, r1, r4, asr r1
   1b0a8:	andeq	fp, r1, r4, asr r1
   1b0ac:	andeq	fp, r1, r4, asr r1
   1b0b0:	andeq	fp, r1, r4, asr r1
   1b0b4:	andeq	fp, r1, r4, asr r1
   1b0b8:	andeq	fp, r1, r4, asr r1
   1b0bc:	andeq	fp, r1, r4, asr r1
   1b0c0:	andeq	fp, r1, r4, asr r1
   1b0c4:	andeq	fp, r1, r4, asr r1
   1b0c8:	andeq	fp, r1, r4, asr r1
   1b0cc:	andeq	fp, r1, r4, asr r1
   1b0d0:	andeq	fp, r1, r4, asr r1
   1b0d4:	andeq	fp, r1, r4, asr r1
   1b0d8:	andeq	fp, r1, ip, lsr r1
   1b0dc:	andeq	fp, r1, ip, lsl #10
   1b0e0:	andeq	fp, r1, r0, lsl #7
   1b0e4:	mov	r3, #2
   1b0e8:	strb	r3, [r0, #4]
   1b0ec:	mov	r0, #0
   1b0f0:	add	sp, sp, #8
   1b0f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b0f8:	cmp	r7, #92	; 0x5c
   1b0fc:	beq	1b160 <__assert_fail@plt+0x9c08>
   1b100:	mov	r3, #1
   1b104:	strb	r3, [r5, #4]
   1b108:	bl	113fc <__ctype_b_loc@plt>
   1b10c:	lsl	r1, r7, #1
   1b110:	ldrb	r2, [r5, #6]
   1b114:	bic	r2, r2, #64	; 0x40
   1b118:	ldr	r3, [r0]
   1b11c:	ldrh	r3, [r3, r1]
   1b120:	lsr	r3, r3, #3
   1b124:	and	r3, r3, #1
   1b128:	cmp	r7, #95	; 0x5f
   1b12c:	orreq	r3, r3, #1
   1b130:	orr	r3, r2, r3, lsl #6
   1b134:	strb	r3, [r5, #6]
   1b138:	b	1af04 <__assert_fail@plt+0x99ac>
   1b13c:	and	r8, r8, #4608	; 0x1200
   1b140:	cmp	r8, #4608	; 0x1200
   1b144:	moveq	r3, #23
   1b148:	strbeq	r3, [r5, #4]
   1b14c:	moveq	r0, #1
   1b150:	beq	1b0f0 <__assert_fail@plt+0x9b98>
   1b154:	mov	r0, #1
   1b158:	add	sp, sp, #8
   1b15c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b160:	ldr	r1, [r4, #48]	; 0x30
   1b164:	add	r2, r6, #1
   1b168:	cmp	r2, r1
   1b16c:	bge	1b370 <__assert_fail@plt+0x9e18>
   1b170:	ldrb	r1, [r4, #75]	; 0x4b
   1b174:	cmp	r1, #0
   1b178:	bne	1b72c <__assert_fail@plt+0xa1d4>
   1b17c:	ldrb	r6, [sl, r2]
   1b180:	cmp	r3, #1
   1b184:	mov	r3, #1
   1b188:	strb	r6, [r5]
   1b18c:	strb	r3, [r5, #4]
   1b190:	ble	1b6f8 <__assert_fail@plt+0xa1a0>
   1b194:	ldr	r1, [r4, #8]
   1b198:	add	r1, r1, r2, lsl #2
   1b19c:	ldr	r4, [r1]
   1b1a0:	mov	r0, r4
   1b1a4:	bl	11438 <iswalnum@plt>
   1b1a8:	ldrb	r3, [r5, #6]
   1b1ac:	sub	r4, r4, #95	; 0x5f
   1b1b0:	clz	r4, r4
   1b1b4:	lsr	r4, r4, #5
   1b1b8:	bic	r3, r3, #64	; 0x40
   1b1bc:	cmp	r0, #0
   1b1c0:	orrne	r4, r4, #1
   1b1c4:	orr	r4, r3, r4, lsl #6
   1b1c8:	strb	r4, [r5, #6]
   1b1cc:	sub	r3, r6, #39	; 0x27
   1b1d0:	cmp	r3, #86	; 0x56
   1b1d4:	ldrls	pc, [pc, r3, lsl #2]
   1b1d8:	b	1b350 <__assert_fail@plt+0x9df8>
   1b1dc:	andeq	fp, r1, r4, lsr r5
   1b1e0:	andeq	fp, r1, ip, lsl r5
   1b1e4:	andeq	fp, r1, r0, ror #13
   1b1e8:	andeq	fp, r1, r0, asr r3
   1b1ec:	andeq	fp, r1, r4, asr #13
   1b1f0:	andeq	fp, r1, r0, asr r3
   1b1f4:	andeq	fp, r1, r0, asr r3
   1b1f8:	andeq	fp, r1, r0, asr r3
   1b1fc:	andeq	fp, r1, r0, asr r3
   1b200:	andeq	fp, r1, r0, asr r3
   1b204:	andeq	fp, r1, r4, lsr #13
   1b208:	andeq	fp, r1, r4, lsr #13
   1b20c:	andeq	fp, r1, r4, lsr #13
   1b210:	andeq	fp, r1, r4, lsr #13
   1b214:	andeq	fp, r1, r4, lsr #13
   1b218:	andeq	fp, r1, r4, lsr #13
   1b21c:	andeq	fp, r1, r4, lsr #13
   1b220:	andeq	fp, r1, r4, lsr #13
   1b224:	andeq	fp, r1, r4, lsr #13
   1b228:	andeq	fp, r1, r0, asr r3
   1b22c:	andeq	fp, r1, r0, asr r3
   1b230:	andeq	fp, r1, r4, lsl #13
   1b234:	andeq	fp, r1, r0, asr r3
   1b238:	andeq	fp, r1, r4, ror #12
   1b23c:	andeq	fp, r1, r8, asr #12
   1b240:	andeq	fp, r1, r0, asr r3
   1b244:	andeq	fp, r1, r0, asr r3
   1b248:	andeq	fp, r1, r8, lsr #12
   1b24c:	andeq	fp, r1, r0, asr r3
   1b250:	andeq	fp, r1, r0, asr r3
   1b254:	andeq	fp, r1, r0, asr r3
   1b258:	andeq	fp, r1, r0, asr r3
   1b25c:	andeq	fp, r1, r0, asr r3
   1b260:	andeq	fp, r1, r0, asr r3
   1b264:	andeq	fp, r1, r0, asr r3
   1b268:	andeq	fp, r1, r0, asr r3
   1b26c:	andeq	fp, r1, r0, asr r3
   1b270:	andeq	fp, r1, r0, asr r3
   1b274:	andeq	fp, r1, r0, asr r3
   1b278:	andeq	fp, r1, r0, asr r3
   1b27c:	andeq	fp, r1, r0, asr r3
   1b280:	andeq	fp, r1, r0, asr r3
   1b284:	andeq	fp, r1, r0, asr r3
   1b288:	andeq	fp, r1, r0, asr r3
   1b28c:	andeq	fp, r1, r0, lsl r6
   1b290:	andeq	fp, r1, r0, asr r3
   1b294:	andeq	fp, r1, r0, asr r3
   1b298:	andeq	fp, r1, r0, asr r3
   1b29c:	strdeq	fp, [r1], -r8
   1b2a0:	andeq	fp, r1, r0, asr r3
   1b2a4:	andeq	fp, r1, r0, asr r3
   1b2a8:	andeq	fp, r1, r0, asr r3
   1b2ac:	andeq	fp, r1, r0, asr r3
   1b2b0:	andeq	fp, r1, r0, asr r3
   1b2b4:	andeq	fp, r1, r0, asr r3
   1b2b8:	andeq	fp, r1, r0, asr r3
   1b2bc:	andeq	fp, r1, r0, asr r3
   1b2c0:	ldrdeq	fp, [r1], -r8
   1b2c4:	andeq	fp, r1, r0, asr r3
   1b2c8:			; <UNDEFINED> instruction: 0x0001b5b8
   1b2cc:	andeq	fp, r1, r0, asr r3
   1b2d0:	andeq	fp, r1, r0, asr r3
   1b2d4:	andeq	fp, r1, r0, asr r3
   1b2d8:	andeq	fp, r1, r0, asr r3
   1b2dc:	andeq	fp, r1, r0, asr r3
   1b2e0:	andeq	fp, r1, r0, asr r3
   1b2e4:	andeq	fp, r1, r0, asr r3
   1b2e8:	andeq	fp, r1, r0, asr r3
   1b2ec:	andeq	fp, r1, r0, asr r3
   1b2f0:	andeq	fp, r1, r0, asr r3
   1b2f4:	andeq	fp, r1, r0, asr r3
   1b2f8:	andeq	fp, r1, r0, asr r3
   1b2fc:	andeq	fp, r1, r0, asr r3
   1b300:	andeq	fp, r1, r0, asr r3
   1b304:	andeq	fp, r1, r0, asr r3
   1b308:	andeq	fp, r1, r0, asr r3
   1b30c:	andeq	fp, r1, r0, lsr #11
   1b310:	andeq	fp, r1, r0, asr r3
   1b314:	andeq	fp, r1, r0, asr r3
   1b318:	andeq	fp, r1, r0, asr r3
   1b31c:	andeq	fp, r1, r8, lsl #11
   1b320:	andeq	fp, r1, r0, asr r3
   1b324:	andeq	fp, r1, r0, asr r3
   1b328:	andeq	fp, r1, r0, asr r3
   1b32c:	andeq	fp, r1, r8, lsr r3
   1b330:	andeq	fp, r1, r0, ror r5
   1b334:	andeq	fp, r1, r4, asr r5
   1b338:	and	r8, r8, #4608	; 0x1200
   1b33c:	cmp	r8, #512	; 0x200
   1b340:	moveq	r3, #23
   1b344:	strbeq	r3, [r5, #4]
   1b348:	moveq	r0, #2
   1b34c:	beq	1b0f0 <__assert_fail@plt+0x9b98>
   1b350:	mov	r0, #2
   1b354:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b358:	ldrb	r3, [r0, #6]
   1b35c:	mov	r0, #1
   1b360:	strb	r0, [r5, #4]
   1b364:	orr	r3, r3, #32
   1b368:	strb	r3, [r5, #6]
   1b36c:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b370:	mov	r3, #36	; 0x24
   1b374:	strb	r3, [r5, #4]
   1b378:	mov	r0, #1
   1b37c:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b380:	and	r8, r8, #4608	; 0x1200
   1b384:	cmp	r8, #4608	; 0x1200
   1b388:	moveq	r3, #24
   1b38c:	strbeq	r3, [r5, #4]
   1b390:	moveq	r0, #1
   1b394:	bne	1b154 <__assert_fail@plt+0x9bfc>
   1b398:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b39c:	tst	r8, #2048	; 0x800
   1b3a0:	beq	1b154 <__assert_fail@plt+0x9bfc>
   1b3a4:	mov	r3, #10
   1b3a8:	strb	r3, [r5, #4]
   1b3ac:	mov	r0, #1
   1b3b0:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b3b4:	tst	r8, #8
   1b3b8:	bne	1b3fc <__assert_fail@plt+0x9ea4>
   1b3bc:	ldr	r3, [r4, #48]	; 0x30
   1b3c0:	add	r6, r6, #1
   1b3c4:	cmp	r6, r3
   1b3c8:	beq	1b3fc <__assert_fail@plt+0x9ea4>
   1b3cc:	mov	r2, r8
   1b3d0:	str	r6, [r4, #40]	; 0x28
   1b3d4:	mov	r1, r4
   1b3d8:	mov	r0, sp
   1b3dc:	bl	1ae5c <__assert_fail@plt+0x9904>
   1b3e0:	ldrb	r2, [sp, #4]
   1b3e4:	ldr	r3, [r4, #40]	; 0x28
   1b3e8:	sub	r2, r2, #9
   1b3ec:	sub	r3, r3, #1
   1b3f0:	cmp	r2, #1
   1b3f4:	str	r3, [r4, #40]	; 0x28
   1b3f8:	bhi	1b154 <__assert_fail@plt+0x9bfc>
   1b3fc:	mov	r2, #12
   1b400:	mov	r3, #32
   1b404:	strb	r2, [r5, #4]
   1b408:	str	r3, [r5]
   1b40c:	mov	r0, #1
   1b410:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b414:	tst	r8, #8192	; 0x2000
   1b418:	beq	1b154 <__assert_fail@plt+0x9bfc>
   1b41c:	mov	r3, #8
   1b420:	strb	r3, [r5, #4]
   1b424:	mov	r0, #1
   1b428:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b42c:	tst	r8, #8192	; 0x2000
   1b430:	beq	1b154 <__assert_fail@plt+0x9bfc>
   1b434:	mov	r3, #9
   1b438:	strb	r3, [r5, #4]
   1b43c:	mov	r0, #1
   1b440:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b444:	mov	r3, #11
   1b448:	strb	r3, [r5, #4]
   1b44c:	mov	r0, #1
   1b450:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b454:	ldr	r3, [pc, #864]	; 1b7bc <__assert_fail@plt+0xa264>
   1b458:	and	r3, r3, r8
   1b45c:	cmp	r3, #0
   1b460:	bne	1b154 <__assert_fail@plt+0x9bfc>
   1b464:	mov	r3, #18
   1b468:	strb	r3, [r5, #4]
   1b46c:	mov	r0, #1
   1b470:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b474:	mov	r3, #5
   1b478:	strb	r3, [r5, #4]
   1b47c:	mov	r0, #1
   1b480:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b484:	ldr	r3, [pc, #816]	; 1b7bc <__assert_fail@plt+0xa264>
   1b488:	and	r3, r3, r8
   1b48c:	cmp	r3, #0
   1b490:	bne	1b154 <__assert_fail@plt+0x9bfc>
   1b494:	mov	r3, #19
   1b498:	strb	r3, [r5, #4]
   1b49c:	mov	r0, #1
   1b4a0:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b4a4:	mov	r3, #20
   1b4a8:	strb	r3, [r5, #4]
   1b4ac:	mov	r0, #1
   1b4b0:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b4b4:	ldr	r3, [pc, #772]	; 1b7c0 <__assert_fail@plt+0xa268>
   1b4b8:	cmp	r6, #0
   1b4bc:	and	r3, r3, r8
   1b4c0:	clz	r3, r3
   1b4c4:	lsr	r3, r3, #5
   1b4c8:	moveq	r3, #0
   1b4cc:	cmp	r3, #0
   1b4d0:	beq	1b4f4 <__assert_fail@plt+0x9f9c>
   1b4d4:	add	r6, sl, r6
   1b4d8:	lsr	r3, r8, #11
   1b4dc:	ldrb	r2, [r6, #-1]
   1b4e0:	eor	r3, r3, #1
   1b4e4:	cmp	r2, #10
   1b4e8:	orrne	r3, r3, #1
   1b4ec:	tst	r3, #1
   1b4f0:	bne	1b154 <__assert_fail@plt+0x9bfc>
   1b4f4:	mov	r2, #12
   1b4f8:	mov	r3, #16
   1b4fc:	strb	r2, [r5, #4]
   1b500:	str	r3, [r5]
   1b504:	mov	r0, #1
   1b508:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b50c:	and	r8, r8, #33792	; 0x8400
   1b510:	cmp	r8, #32768	; 0x8000
   1b514:	bne	1b154 <__assert_fail@plt+0x9bfc>
   1b518:	b	1b3a4 <__assert_fail@plt+0x9e4c>
   1b51c:	tst	r8, #8192	; 0x2000
   1b520:	bne	1b350 <__assert_fail@plt+0x9df8>
   1b524:	mov	r3, #8
   1b528:	strb	r3, [r5, #4]
   1b52c:	mov	r0, #2
   1b530:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b534:	tst	r8, #524288	; 0x80000
   1b538:	bne	1b350 <__assert_fail@plt+0x9df8>
   1b53c:	mov	r2, #12
   1b540:	mov	r3, #128	; 0x80
   1b544:	strb	r2, [r5, #4]
   1b548:	str	r3, [r5]
   1b54c:	mov	r0, #2
   1b550:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b554:	and	r8, r8, #4608	; 0x1200
   1b558:	cmp	r8, #512	; 0x200
   1b55c:	moveq	r3, #24
   1b560:	strbeq	r3, [r5, #4]
   1b564:	moveq	r0, #2
   1b568:	bne	1b350 <__assert_fail@plt+0x9df8>
   1b56c:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b570:	tst	r8, #33792	; 0x8400
   1b574:	bne	1b350 <__assert_fail@plt+0x9df8>
   1b578:	mov	r3, #10
   1b57c:	strb	r3, [r5, #4]
   1b580:	mov	r0, #2
   1b584:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b588:	tst	r8, #524288	; 0x80000
   1b58c:	bne	1b350 <__assert_fail@plt+0x9df8>
   1b590:	mov	r3, #32
   1b594:	strb	r3, [r5, #4]
   1b598:	mov	r0, #2
   1b59c:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b5a0:	tst	r8, #524288	; 0x80000
   1b5a4:	bne	1b350 <__assert_fail@plt+0x9df8>
   1b5a8:	mov	r3, #34	; 0x22
   1b5ac:	strb	r3, [r5, #4]
   1b5b0:	mov	r0, #2
   1b5b4:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b5b8:	tst	r8, #524288	; 0x80000
   1b5bc:	bne	1b350 <__assert_fail@plt+0x9df8>
   1b5c0:	mov	r2, #12
   1b5c4:	mov	r3, #256	; 0x100
   1b5c8:	strb	r2, [r5, #4]
   1b5cc:	str	r3, [r5]
   1b5d0:	mov	r0, #2
   1b5d4:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b5d8:	tst	r8, #524288	; 0x80000
   1b5dc:	bne	1b350 <__assert_fail@plt+0x9df8>
   1b5e0:	mov	r2, #12
   1b5e4:	mov	r3, #64	; 0x40
   1b5e8:	strb	r2, [r5, #4]
   1b5ec:	str	r3, [r5]
   1b5f0:	mov	r0, #2
   1b5f4:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b5f8:	tst	r8, #524288	; 0x80000
   1b5fc:	bne	1b350 <__assert_fail@plt+0x9df8>
   1b600:	mov	r3, #33	; 0x21
   1b604:	strb	r3, [r5, #4]
   1b608:	mov	r0, #2
   1b60c:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b610:	tst	r8, #524288	; 0x80000
   1b614:	bne	1b350 <__assert_fail@plt+0x9df8>
   1b618:	mov	r3, #35	; 0x23
   1b61c:	strb	r3, [r5, #4]
   1b620:	mov	r0, #2
   1b624:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b628:	tst	r8, #524288	; 0x80000
   1b62c:	bne	1b350 <__assert_fail@plt+0x9df8>
   1b630:	mov	r2, #12
   1b634:	mov	r3, #512	; 0x200
   1b638:	strb	r2, [r5, #4]
   1b63c:	str	r3, [r5]
   1b640:	mov	r0, #2
   1b644:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b648:	ldr	r0, [pc, #364]	; 1b7bc <__assert_fail@plt+0xa264>
   1b64c:	and	r0, r0, r8
   1b650:	cmp	r0, #2
   1b654:	moveq	r3, #19
   1b658:	strbeq	r3, [r5, #4]
   1b65c:	bne	1b350 <__assert_fail@plt+0x9df8>
   1b660:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b664:	tst	r8, #524288	; 0x80000
   1b668:	bne	1b350 <__assert_fail@plt+0x9df8>
   1b66c:	mov	r2, #12
   1b670:	mov	r3, #9
   1b674:	strb	r2, [r5, #4]
   1b678:	str	r3, [r5]
   1b67c:	mov	r0, #2
   1b680:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b684:	tst	r8, #524288	; 0x80000
   1b688:	bne	1b350 <__assert_fail@plt+0x9df8>
   1b68c:	mov	r2, #12
   1b690:	mov	r3, #6
   1b694:	strb	r2, [r5, #4]
   1b698:	str	r3, [r5]
   1b69c:	mov	r0, #2
   1b6a0:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b6a4:	tst	r8, #16384	; 0x4000
   1b6a8:	bne	1b350 <__assert_fail@plt+0x9df8>
   1b6ac:	sub	r6, r6, #49	; 0x31
   1b6b0:	mov	r3, #4
   1b6b4:	str	r6, [r5]
   1b6b8:	strb	r3, [r5, #4]
   1b6bc:	mov	r0, #2
   1b6c0:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b6c4:	ldr	r0, [pc, #240]	; 1b7bc <__assert_fail@plt+0xa264>
   1b6c8:	and	r0, r0, r8
   1b6cc:	cmp	r0, #2
   1b6d0:	moveq	r3, #18
   1b6d4:	strbeq	r3, [r5, #4]
   1b6d8:	bne	1b350 <__assert_fail@plt+0x9df8>
   1b6dc:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b6e0:	tst	r8, #8192	; 0x2000
   1b6e4:	bne	1b350 <__assert_fail@plt+0x9df8>
   1b6e8:	mov	r3, #9
   1b6ec:	strb	r3, [r5, #4]
   1b6f0:	mov	r0, #2
   1b6f4:	b	1b0f0 <__assert_fail@plt+0x9b98>
   1b6f8:	bl	113fc <__ctype_b_loc@plt>
   1b6fc:	lsl	r3, r6, #1
   1b700:	ldrb	r2, [r5, #6]
   1b704:	bic	r2, r2, #64	; 0x40
   1b708:	ldr	r1, [r0]
   1b70c:	ldrh	r3, [r1, r3]
   1b710:	lsr	r3, r3, #3
   1b714:	and	r3, r3, #1
   1b718:	cmp	r6, #95	; 0x5f
   1b71c:	orreq	r3, r3, #1
   1b720:	orr	r3, r2, r3, lsl #6
   1b724:	strb	r3, [r5, #6]
   1b728:	b	1b1cc <__assert_fail@plt+0x9c74>
   1b72c:	cmp	r3, #1
   1b730:	ble	1b764 <__assert_fail@plt+0xa20c>
   1b734:	ldr	r0, [r4, #8]
   1b738:	add	r1, r0, r2, lsl #2
   1b73c:	ldr	r0, [r0, r2, lsl #2]
   1b740:	cmn	r0, #1
   1b744:	beq	1b7a8 <__assert_fail@plt+0xa250>
   1b748:	ldr	r0, [r4, #28]
   1b74c:	add	r6, r6, #2
   1b750:	cmp	r0, r6
   1b754:	beq	1b764 <__assert_fail@plt+0xa20c>
   1b758:	ldr	r0, [r1, #4]
   1b75c:	cmn	r0, #1
   1b760:	beq	1b7a8 <__assert_fail@plt+0xa250>
   1b764:	ldrb	r1, [r4, #76]	; 0x4c
   1b768:	cmp	r1, #0
   1b76c:	bne	1b784 <__assert_fail@plt+0xa22c>
   1b770:	ldr	r1, [r4]
   1b774:	ldr	r0, [r4, #24]
   1b778:	add	r1, r1, r2
   1b77c:	ldrb	r6, [r1, r0]
   1b780:	b	1b180 <__assert_fail@plt+0x9c28>
   1b784:	ldr	ip, [r4, #12]
   1b788:	ldr	r1, [r4]
   1b78c:	ldr	r0, [r4, #24]
   1b790:	ldr	ip, [ip, r2, lsl #2]
   1b794:	add	r1, r1, ip
   1b798:	ldrb	r6, [r1, r0]
   1b79c:	tst	r6, #128	; 0x80
   1b7a0:	bne	1b17c <__assert_fail@plt+0x9c24>
   1b7a4:	b	1b180 <__assert_fail@plt+0x9c28>
   1b7a8:	ldrb	r6, [sl, r2]
   1b7ac:	mov	r3, #1
   1b7b0:	strb	r3, [r5, #4]
   1b7b4:	strb	r6, [r5]
   1b7b8:	b	1b19c <__assert_fail@plt+0x9c44>
   1b7bc:	andeq	r0, r0, r2, lsl #8
   1b7c0:	addeq	r0, r0, r8
   1b7c4:	ldr	ip, [r1]
   1b7c8:	push	{r4, r5, r6, lr}
   1b7cc:	cmp	ip, #31
   1b7d0:	sub	sp, sp, #8
   1b7d4:	mov	r5, r0
   1b7d8:	beq	1b83c <__assert_fail@plt+0xa2e4>
   1b7dc:	lsl	r3, ip, #5
   1b7e0:	ldr	r4, [r0]
   1b7e4:	add	lr, ip, #1
   1b7e8:	add	r6, r3, #4
   1b7ec:	add	r3, r4, r3
   1b7f0:	mov	ip, #0
   1b7f4:	str	lr, [r1]
   1b7f8:	str	ip, [r3, #4]
   1b7fc:	str	ip, [r3, #8]
   1b800:	str	ip, [r3, #12]
   1b804:	ldm	r2, {r0, r1}
   1b808:	add	r2, r3, #24
   1b80c:	add	r4, r4, r6
   1b810:	stm	r2, {r0, r1}
   1b814:	ldrb	r2, [r3, #30]
   1b818:	mvn	r1, #0
   1b81c:	str	ip, [r3, #16]
   1b820:	and	r2, r2, #243	; 0xf3
   1b824:	str	ip, [r3, #20]
   1b828:	strb	r2, [r3, #30]
   1b82c:	str	r1, [r3, #32]
   1b830:	mov	r0, r4
   1b834:	add	sp, sp, #8
   1b838:	pop	{r4, r5, r6, pc}
   1b83c:	mov	r0, #996	; 0x3e4
   1b840:	stm	sp, {r1, r2}
   1b844:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   1b848:	subs	r4, r0, #0
   1b84c:	beq	1b830 <__assert_fail@plt+0xa2d8>
   1b850:	ldr	r0, [r5]
   1b854:	mov	r6, #4
   1b858:	mov	lr, #1
   1b85c:	mov	r3, #0
   1b860:	str	r0, [r4]
   1b864:	str	r4, [r5]
   1b868:	ldm	sp, {r1, r2}
   1b86c:	b	1b7ec <__assert_fail@plt+0xa294>
   1b870:	push	{r4, r5, r6, lr}
   1b874:	mov	r4, r0
   1b878:	ldr	r5, [pc, #168]	; 1b928 <__assert_fail@plt+0xa3d0>
   1b87c:	b	1b884 <__assert_fail@plt+0xa32c>
   1b880:	mov	r4, r3
   1b884:	ldr	r3, [r4, #4]
   1b888:	cmp	r3, #0
   1b88c:	bne	1b880 <__assert_fail@plt+0xa328>
   1b890:	ldr	r3, [r4, #8]
   1b894:	cmp	r3, #0
   1b898:	bne	1b880 <__assert_fail@plt+0xa328>
   1b89c:	ldr	r3, [r4, #24]
   1b8a0:	and	r3, r3, r5
   1b8a4:	cmp	r3, #6
   1b8a8:	bne	1b914 <__assert_fail@plt+0xa3bc>
   1b8ac:	ldr	r6, [r4, #20]
   1b8b0:	ldr	r0, [r6]
   1b8b4:	bl	13c04 <__assert_fail@plt+0x26ac>
   1b8b8:	ldr	r0, [r6, #4]
   1b8bc:	bl	13c04 <__assert_fail@plt+0x26ac>
   1b8c0:	ldr	r0, [r6, #8]
   1b8c4:	bl	13c04 <__assert_fail@plt+0x26ac>
   1b8c8:	ldr	r0, [r6, #12]
   1b8cc:	bl	13c04 <__assert_fail@plt+0x26ac>
   1b8d0:	mov	r0, r6
   1b8d4:	bl	13c04 <__assert_fail@plt+0x26ac>
   1b8d8:	ldr	r0, [r4]
   1b8dc:	cmp	r0, #0
   1b8e0:	popeq	{r4, r5, r6, pc}
   1b8e4:	ldr	r3, [r0, #8]
   1b8e8:	cmp	r4, r3
   1b8ec:	cmpne	r3, #0
   1b8f0:	moveq	r4, #1
   1b8f4:	movne	r4, #0
   1b8f8:	cmp	r4, #0
   1b8fc:	mov	r4, r0
   1b900:	beq	1b880 <__assert_fail@plt+0xa328>
   1b904:	ldr	r3, [r4, #24]
   1b908:	and	r3, r3, r5
   1b90c:	cmp	r3, #6
   1b910:	beq	1b8ac <__assert_fail@plt+0xa354>
   1b914:	cmp	r3, #3
   1b918:	bne	1b8d8 <__assert_fail@plt+0xa380>
   1b91c:	ldr	r0, [r4, #20]
   1b920:	bl	13c04 <__assert_fail@plt+0x26ac>
   1b924:	b	1b8d8 <__assert_fail@plt+0xa380>
   1b928:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   1b92c:	ldr	r2, [r0]
   1b930:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b934:	cmp	r2, #0
   1b938:	mov	r7, r0
   1b93c:	beq	1b99c <__assert_fail@plt+0xa444>
   1b940:	ldr	r0, [r0, #8]
   1b944:	cmp	r0, #0
   1b948:	beq	1b99c <__assert_fail@plt+0xa444>
   1b94c:	ldr	r5, [pc, #500]	; 1bb48 <__assert_fail@plt+0xa5f0>
   1b950:	mov	r4, #0
   1b954:	b	1b968 <__assert_fail@plt+0xa410>
   1b958:	add	r4, r4, #1
   1b95c:	cmp	r4, r0
   1b960:	bcs	1b99c <__assert_fail@plt+0xa444>
   1b964:	ldr	r2, [r7]
   1b968:	add	r1, r2, r4, lsl #3
   1b96c:	ldr	r3, [r1, #4]
   1b970:	and	r3, r3, r5
   1b974:	cmp	r3, #6
   1b978:	beq	1bb14 <__assert_fail@plt+0xa5bc>
   1b97c:	cmp	r3, #3
   1b980:	bne	1b958 <__assert_fail@plt+0xa400>
   1b984:	ldr	r0, [r1]
   1b988:	bl	13c04 <__assert_fail@plt+0x26ac>
   1b98c:	ldr	r0, [r7, #8]
   1b990:	add	r4, r4, #1
   1b994:	cmp	r4, r0
   1b998:	bcc	1b964 <__assert_fail@plt+0xa40c>
   1b99c:	ldr	r0, [r7, #12]
   1b9a0:	bl	13c04 <__assert_fail@plt+0x26ac>
   1b9a4:	ldr	r3, [r7, #8]
   1b9a8:	cmp	r3, #0
   1b9ac:	movne	r4, #0
   1b9b0:	movne	r5, r4
   1b9b4:	beq	1ba14 <__assert_fail@plt+0xa4bc>
   1b9b8:	ldr	r3, [r7, #24]
   1b9bc:	add	r5, r5, #1
   1b9c0:	cmp	r3, #0
   1b9c4:	add	r2, r3, r4
   1b9c8:	beq	1b9d4 <__assert_fail@plt+0xa47c>
   1b9cc:	ldr	r0, [r2, #8]
   1b9d0:	bl	13c04 <__assert_fail@plt+0x26ac>
   1b9d4:	ldr	r3, [r7, #28]
   1b9d8:	cmp	r3, #0
   1b9dc:	add	r2, r3, r4
   1b9e0:	beq	1b9ec <__assert_fail@plt+0xa494>
   1b9e4:	ldr	r0, [r2, #8]
   1b9e8:	bl	13c04 <__assert_fail@plt+0x26ac>
   1b9ec:	ldr	r3, [r7, #20]
   1b9f0:	cmp	r3, #0
   1b9f4:	add	r2, r3, r4
   1b9f8:	beq	1ba04 <__assert_fail@plt+0xa4ac>
   1b9fc:	ldr	r0, [r2, #8]
   1ba00:	bl	13c04 <__assert_fail@plt+0x26ac>
   1ba04:	ldr	r3, [r7, #8]
   1ba08:	add	r4, r4, #12
   1ba0c:	cmp	r3, r5
   1ba10:	bhi	1b9b8 <__assert_fail@plt+0xa460>
   1ba14:	ldr	r0, [r7, #20]
   1ba18:	bl	13c04 <__assert_fail@plt+0x26ac>
   1ba1c:	ldr	r0, [r7, #24]
   1ba20:	bl	13c04 <__assert_fail@plt+0x26ac>
   1ba24:	ldr	r0, [r7, #28]
   1ba28:	bl	13c04 <__assert_fail@plt+0x26ac>
   1ba2c:	ldr	r0, [r7]
   1ba30:	bl	13c04 <__assert_fail@plt+0x26ac>
   1ba34:	ldr	r0, [r7, #32]
   1ba38:	cmp	r0, #0
   1ba3c:	beq	1bae8 <__assert_fail@plt+0xa590>
   1ba40:	mov	r8, #0
   1ba44:	mov	r9, r8
   1ba48:	ldr	r3, [r0, r8]
   1ba4c:	add	r6, r0, r8
   1ba50:	cmp	r3, #0
   1ba54:	movgt	r5, #0
   1ba58:	ble	1bac4 <__assert_fail@plt+0xa56c>
   1ba5c:	ldr	r3, [r6, #8]
   1ba60:	ldr	r4, [r3, r5, lsl #2]
   1ba64:	add	r5, r5, #1
   1ba68:	ldr	r0, [r4, #24]
   1ba6c:	bl	13c04 <__assert_fail@plt+0x26ac>
   1ba70:	ldr	r0, [r4, #36]	; 0x24
   1ba74:	bl	13c04 <__assert_fail@plt+0x26ac>
   1ba78:	ldr	r3, [r4, #40]	; 0x28
   1ba7c:	add	r2, r4, #4
   1ba80:	cmp	r3, r2
   1ba84:	beq	1ba98 <__assert_fail@plt+0xa540>
   1ba88:	ldr	r0, [r3, #8]
   1ba8c:	bl	13c04 <__assert_fail@plt+0x26ac>
   1ba90:	ldr	r0, [r4, #40]	; 0x28
   1ba94:	bl	13c04 <__assert_fail@plt+0x26ac>
   1ba98:	ldr	r0, [r4, #12]
   1ba9c:	bl	13c04 <__assert_fail@plt+0x26ac>
   1baa0:	ldr	r0, [r4, #48]	; 0x30
   1baa4:	bl	13c04 <__assert_fail@plt+0x26ac>
   1baa8:	ldr	r0, [r4, #44]	; 0x2c
   1baac:	bl	13c04 <__assert_fail@plt+0x26ac>
   1bab0:	mov	r0, r4
   1bab4:	bl	13c04 <__assert_fail@plt+0x26ac>
   1bab8:	ldr	r3, [r6]
   1babc:	cmp	r3, r5
   1bac0:	bgt	1ba5c <__assert_fail@plt+0xa504>
   1bac4:	ldr	r0, [r6, #8]
   1bac8:	bl	13c04 <__assert_fail@plt+0x26ac>
   1bacc:	ldr	r3, [r7, #68]	; 0x44
   1bad0:	add	r9, r9, #1
   1bad4:	cmp	r3, r9
   1bad8:	add	r8, r8, #12
   1badc:	ldrcs	r0, [r7, #32]
   1bae0:	bcs	1ba48 <__assert_fail@plt+0xa4f0>
   1bae4:	ldr	r0, [r7, #32]
   1bae8:	bl	13c04 <__assert_fail@plt+0x26ac>
   1baec:	ldr	r0, [r7, #60]	; 0x3c
   1baf0:	ldr	r3, [pc, #84]	; 1bb4c <__assert_fail@plt+0xa5f4>
   1baf4:	cmp	r0, r3
   1baf8:	beq	1bb00 <__assert_fail@plt+0xa5a8>
   1bafc:	bl	13c04 <__assert_fail@plt+0x26ac>
   1bb00:	ldr	r0, [r7, #132]	; 0x84
   1bb04:	bl	13c04 <__assert_fail@plt+0x26ac>
   1bb08:	mov	r0, r7
   1bb0c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bb10:	b	13c04 <__assert_fail@plt+0x26ac>
   1bb14:	ldr	r6, [r2, r4, lsl #3]
   1bb18:	ldr	r0, [r6]
   1bb1c:	bl	13c04 <__assert_fail@plt+0x26ac>
   1bb20:	ldr	r0, [r6, #4]
   1bb24:	bl	13c04 <__assert_fail@plt+0x26ac>
   1bb28:	ldr	r0, [r6, #8]
   1bb2c:	bl	13c04 <__assert_fail@plt+0x26ac>
   1bb30:	ldr	r0, [r6, #12]
   1bb34:	bl	13c04 <__assert_fail@plt+0x26ac>
   1bb38:	mov	r0, r6
   1bb3c:	bl	13c04 <__assert_fail@plt+0x26ac>
   1bb40:	ldr	r0, [r7, #8]
   1bb44:	b	1b958 <__assert_fail@plt+0xa400>
   1bb48:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   1bb4c:	andeq	sp, r2, r0
   1bb50:	ldr	r3, [pc, #96]	; 1bbb8 <__assert_fail@plt+0xa660>
   1bb54:	ldr	r2, [r1, #24]
   1bb58:	push	{r4, lr}
   1bb5c:	and	r3, r3, r2
   1bb60:	cmp	r3, #6
   1bb64:	beq	1bb88 <__assert_fail@plt+0xa630>
   1bb68:	cmp	r3, #3
   1bb6c:	beq	1bb78 <__assert_fail@plt+0xa620>
   1bb70:	mov	r0, #0
   1bb74:	pop	{r4, pc}
   1bb78:	ldr	r0, [r1, #20]
   1bb7c:	bl	13c04 <__assert_fail@plt+0x26ac>
   1bb80:	mov	r0, #0
   1bb84:	pop	{r4, pc}
   1bb88:	ldr	r4, [r1, #20]
   1bb8c:	ldr	r0, [r4]
   1bb90:	bl	13c04 <__assert_fail@plt+0x26ac>
   1bb94:	ldr	r0, [r4, #4]
   1bb98:	bl	13c04 <__assert_fail@plt+0x26ac>
   1bb9c:	ldr	r0, [r4, #8]
   1bba0:	bl	13c04 <__assert_fail@plt+0x26ac>
   1bba4:	ldr	r0, [r4, #12]
   1bba8:	bl	13c04 <__assert_fail@plt+0x26ac>
   1bbac:	mov	r0, r4
   1bbb0:	bl	13c04 <__assert_fail@plt+0x26ac>
   1bbb4:	b	1bb70 <__assert_fail@plt+0xa618>
   1bbb8:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   1bbbc:	push	{r4, r5, r6, r7, r8, r9, lr}
   1bbc0:	sub	sp, sp, #12
   1bbc4:	mov	r5, r0
   1bbc8:	ldr	r6, [sp, #40]	; 0x28
   1bbcc:	mov	r4, r1
   1bbd0:	mov	r9, r2
   1bbd4:	mov	r8, r3
   1bbd8:	mov	r7, #0
   1bbdc:	ldr	r0, [r4, #4]
   1bbe0:	cmp	r0, #0
   1bbe4:	ble	1bc40 <__assert_fail@plt+0xa6e8>
   1bbe8:	ldr	ip, [r4, #8]
   1bbec:	sub	r0, r0, #1
   1bbf0:	mov	r1, r7
   1bbf4:	cmp	r1, r0
   1bbf8:	bcs	1bc34 <__assert_fail@plt+0xa6dc>
   1bbfc:	add	r2, r1, r0
   1bc00:	lsr	r2, r2, #1
   1bc04:	ldr	r3, [ip, r2, lsl #2]
   1bc08:	cmp	r9, r3
   1bc0c:	ble	1bc24 <__assert_fail@plt+0xa6cc>
   1bc10:	b	1bca4 <__assert_fail@plt+0xa74c>
   1bc14:	ldr	r0, [ip, r3, lsl #2]
   1bc18:	cmp	r9, r0
   1bc1c:	bgt	1bcac <__assert_fail@plt+0xa754>
   1bc20:	mov	r2, r3
   1bc24:	add	r3, r2, r1
   1bc28:	cmp	r2, r1
   1bc2c:	lsr	r3, r3, #1
   1bc30:	bhi	1bc14 <__assert_fail@plt+0xa6bc>
   1bc34:	ldr	r3, [ip, r1, lsl #2]
   1bc38:	cmp	r9, r3
   1bc3c:	beq	1bcd4 <__assert_fail@plt+0xa77c>
   1bc40:	ldr	r3, [r5]
   1bc44:	add	r2, r3, r9, lsl #3
   1bc48:	ldrb	r2, [r2, #4]
   1bc4c:	cmp	r2, r6
   1bc50:	bne	1bc60 <__assert_fail@plt+0xa708>
   1bc54:	ldr	r3, [r3, r9, lsl #3]
   1bc58:	cmp	r8, r3
   1bc5c:	beq	1bcb8 <__assert_fail@plt+0xa760>
   1bc60:	mov	r1, r9
   1bc64:	mov	r0, r4
   1bc68:	bl	189a4 <__assert_fail@plt+0x744c>
   1bc6c:	cmp	r0, #0
   1bc70:	beq	1bd10 <__assert_fail@plt+0xa7b8>
   1bc74:	add	r9, r9, r9, lsl #1
   1bc78:	ldr	r3, [r5, #20]
   1bc7c:	lsl	r9, r9, #2
   1bc80:	add	r3, r3, r9
   1bc84:	ldr	r2, [r3, #4]
   1bc88:	cmp	r2, #0
   1bc8c:	beq	1bcd4 <__assert_fail@plt+0xa77c>
   1bc90:	cmp	r2, #2
   1bc94:	beq	1bce0 <__assert_fail@plt+0xa788>
   1bc98:	ldr	r3, [r3, #8]
   1bc9c:	ldr	r9, [r3]
   1bca0:	b	1bbdc <__assert_fail@plt+0xa684>
   1bca4:	mov	r3, r2
   1bca8:	mov	r2, r0
   1bcac:	add	r1, r3, #1
   1bcb0:	mov	r0, r2
   1bcb4:	b	1bbf4 <__assert_fail@plt+0xa69c>
   1bcb8:	cmp	r6, #9
   1bcbc:	bne	1bcd4 <__assert_fail@plt+0xa77c>
   1bcc0:	mov	r1, r9
   1bcc4:	mov	r0, r4
   1bcc8:	bl	189a4 <__assert_fail@plt+0x744c>
   1bccc:	cmp	r0, #0
   1bcd0:	beq	1bd10 <__assert_fail@plt+0xa7b8>
   1bcd4:	mov	r0, #0
   1bcd8:	add	sp, sp, #12
   1bcdc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1bce0:	ldr	r2, [r3, #8]
   1bce4:	mov	r1, r4
   1bce8:	mov	r3, r8
   1bcec:	ldr	r2, [r2, #4]
   1bcf0:	mov	r0, r5
   1bcf4:	str	r6, [sp]
   1bcf8:	bl	1bbbc <__assert_fail@plt+0xa664>
   1bcfc:	cmp	r0, #0
   1bd00:	bne	1bcd8 <__assert_fail@plt+0xa780>
   1bd04:	ldr	r3, [r5, #20]
   1bd08:	add	r3, r3, r9
   1bd0c:	b	1bc98 <__assert_fail@plt+0xa740>
   1bd10:	mov	r0, #12
   1bd14:	add	sp, sp, #12
   1bd18:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1bd1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd20:	sub	sp, sp, #20
   1bd24:	ldr	r8, [pc, #940]	; 1c0d8 <__assert_fail@plt+0xab80>
   1bd28:	ldr	fp, [sp, #56]	; 0x38
   1bd2c:	mov	r7, r1
   1bd30:	mov	r5, r0
   1bd34:	mov	r4, r2
   1bd38:	lsl	r6, r1, #3
   1bd3c:	str	r3, [sp, #8]
   1bd40:	ldr	lr, [r5]
   1bd44:	add	r6, lr, r6
   1bd48:	ldrb	r3, [r6, #4]
   1bd4c:	cmp	r3, #4
   1bd50:	beq	1bfe4 <__assert_fail@plt+0xaa8c>
   1bd54:	add	sl, r7, r7, lsl #1
   1bd58:	ldr	r0, [r5, #20]
   1bd5c:	lsl	sl, sl, #2
   1bd60:	add	ip, r0, sl
   1bd64:	ldr	r3, [ip, #4]
   1bd68:	cmp	r3, #0
   1bd6c:	beq	1c0ac <__assert_fail@plt+0xab54>
   1bd70:	cmp	r3, #1
   1bd74:	beq	1bf78 <__assert_fail@plt+0xaa20>
   1bd78:	ldr	r2, [r5, #8]
   1bd7c:	add	r4, r4, r4, lsl #1
   1bd80:	sub	r1, r2, #1
   1bd84:	cmp	r1, #0
   1bd88:	add	r3, lr, r1, lsl #3
   1bd8c:	lsl	r9, r4, #2
   1bd90:	ldrb	r6, [r3, #6]
   1bd94:	ldr	r4, [ip, #8]
   1bd98:	add	r0, r0, r9
   1bd9c:	movle	ip, #0
   1bda0:	movgt	ip, #1
   1bda4:	ands	ip, ip, r6, lsr #2
   1bda8:	mov	ip, #0
   1bdac:	ldr	r4, [r4]
   1bdb0:	str	ip, [r0, #4]
   1bdb4:	beq	1bec4 <__assert_fail@plt+0xa96c>
   1bdb8:	ldr	ip, [r5, #16]
   1bdbc:	rsb	r7, r3, r2, lsl #3
   1bdc0:	sub	r7, r7, #16
   1bdc4:	add	r2, ip, r2, lsl #2
   1bdc8:	b	1bdec <__assert_fail@plt+0xa894>
   1bdcc:	add	r3, lr, r6
   1bdd0:	sub	r1, r1, #1
   1bdd4:	ldrb	r6, [r3, #6]
   1bdd8:	cmp	r1, #0
   1bddc:	movle	ip, #0
   1bde0:	movgt	ip, #1
   1bde4:	ands	ip, ip, r6, lsr #2
   1bde8:	beq	1bec4 <__assert_fail@plt+0xa96c>
   1bdec:	ldr	ip, [r2, #-4]!
   1bdf0:	add	r6, r3, r7
   1bdf4:	cmp	r4, ip
   1bdf8:	bne	1bdcc <__assert_fail@plt+0xa874>
   1bdfc:	ldr	r3, [r3, #4]
   1be00:	and	r3, r8, r3, lsr #8
   1be04:	cmp	fp, r3
   1be08:	bne	1bdcc <__assert_fail@plt+0xa874>
   1be0c:	bl	189a4 <__assert_fail@plt+0x744c>
   1be10:	cmp	r0, #0
   1be14:	beq	1beb8 <__assert_fail@plt+0xa960>
   1be18:	ldr	r2, [r5, #20]
   1be1c:	ldr	r3, [r5]
   1be20:	add	sl, r2, sl
   1be24:	mov	r0, r5
   1be28:	ldr	r2, [sl, #8]
   1be2c:	ldr	r7, [r2, #4]
   1be30:	lsl	r6, r7, #3
   1be34:	add	r3, r3, r6
   1be38:	ldm	r3, {r1, r2}
   1be3c:	bl	187f0 <__assert_fail@plt+0x7298>
   1be40:	cmn	r0, #1
   1be44:	mov	r4, r0
   1be48:	beq	1beb8 <__assert_fail@plt+0xa960>
   1be4c:	ldr	r1, [r5]
   1be50:	ldr	lr, [pc, #644]	; 1c0dc <__assert_fail@plt+0xab84>
   1be54:	add	r2, r1, r4, lsl #3
   1be58:	and	r0, fp, r8
   1be5c:	ldr	r3, [r2, #4]
   1be60:	add	ip, r1, r6
   1be64:	bic	r3, r3, lr
   1be68:	orr	r3, r3, r0, lsl #8
   1be6c:	str	r3, [r2, #4]
   1be70:	ldr	ip, [ip, #4]
   1be74:	bic	r3, r3, lr
   1be78:	mov	r1, r4
   1be7c:	and	ip, r8, ip, lsr #8
   1be80:	orr	r0, r0, ip
   1be84:	orr	r3, r3, r0, lsl #8
   1be88:	str	r3, [r2, #4]
   1be8c:	lsr	r3, r3, #16
   1be90:	uxtb	r3, r3
   1be94:	orr	r3, r3, #4
   1be98:	strb	r3, [r2, #6]
   1be9c:	ldr	r3, [r5, #16]
   1bea0:	ldr	r0, [r5, #20]
   1bea4:	str	r7, [r3, r4, lsl #2]
   1bea8:	add	r0, r0, r9
   1beac:	bl	189a4 <__assert_fail@plt+0x744c>
   1beb0:	cmp	r0, #0
   1beb4:	bne	1bd40 <__assert_fail@plt+0xa7e8>
   1beb8:	mov	r0, #12
   1bebc:	add	sp, sp, #20
   1bec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bec4:	lsl	r6, r4, #3
   1bec8:	add	lr, lr, r6
   1becc:	mov	r0, r5
   1bed0:	ldm	lr, {r1, r2}
   1bed4:	bl	187f0 <__assert_fail@plt+0x7298>
   1bed8:	cmn	r0, #1
   1bedc:	mov	r7, r0
   1bee0:	beq	1beb8 <__assert_fail@plt+0xa960>
   1bee4:	ldr	r3, [r5]
   1bee8:	ldr	ip, [pc, #492]	; 1c0dc <__assert_fail@plt+0xab84>
   1beec:	add	r2, r3, r7, lsl #3
   1bef0:	add	r6, r3, r6
   1bef4:	ldr	r3, [r2, #4]
   1bef8:	and	r0, fp, r8
   1befc:	bic	r3, r3, ip
   1bf00:	orr	r3, r3, r0, lsl #8
   1bf04:	str	r3, [r2, #4]
   1bf08:	ldr	ip, [r6, #4]
   1bf0c:	ldr	lr, [pc, #456]	; 1c0dc <__assert_fail@plt+0xab84>
   1bf10:	mov	r1, r7
   1bf14:	and	ip, r8, ip, lsr #8
   1bf18:	orr	r0, r0, ip
   1bf1c:	bic	r3, r3, lr
   1bf20:	orr	r3, r3, r0, lsl #8
   1bf24:	str	r3, [r2, #4]
   1bf28:	lsr	r3, r3, #16
   1bf2c:	uxtb	r3, r3
   1bf30:	orr	r3, r3, #4
   1bf34:	strb	r3, [r2, #6]
   1bf38:	ldr	r3, [r5, #16]
   1bf3c:	ldr	r0, [r5, #20]
   1bf40:	str	r4, [r3, r7, lsl #2]
   1bf44:	add	r0, r0, r9
   1bf48:	bl	189a4 <__assert_fail@plt+0x744c>
   1bf4c:	cmp	r0, #0
   1bf50:	beq	1beb8 <__assert_fail@plt+0xa960>
   1bf54:	str	fp, [sp]
   1bf58:	mov	r2, r7
   1bf5c:	mov	r1, r4
   1bf60:	ldr	r3, [sp, #8]
   1bf64:	mov	r0, r5
   1bf68:	bl	1bd1c <__assert_fail@plt+0xa7c4>
   1bf6c:	cmp	r0, #0
   1bf70:	beq	1be18 <__assert_fail@plt+0xa8c0>
   1bf74:	b	1bebc <__assert_fail@plt+0xa964>
   1bf78:	add	r9, r4, r4, lsl #1
   1bf7c:	ldr	r3, [ip, #8]
   1bf80:	ldr	r2, [sp, #8]
   1bf84:	cmp	r7, r4
   1bf88:	lsl	r9, r9, #2
   1bf8c:	sub	r2, r7, r2
   1bf90:	add	r0, r0, r9
   1bf94:	clz	r2, r2
   1bf98:	lsr	r2, r2, #5
   1bf9c:	moveq	r2, #0
   1bfa0:	ldr	r7, [r3]
   1bfa4:	cmp	r2, #0
   1bfa8:	mov	r3, #0
   1bfac:	str	r3, [r0, #4]
   1bfb0:	bne	1c0c0 <__assert_fail@plt+0xab68>
   1bfb4:	ldr	r3, [r6, #4]
   1bfb8:	lsl	r6, r7, #3
   1bfbc:	add	lr, lr, r6
   1bfc0:	and	r3, r8, r3, lsr #8
   1bfc4:	ldm	lr, {r1, r2}
   1bfc8:	mov	r0, r5
   1bfcc:	orr	fp, fp, r3
   1bfd0:	bl	187f0 <__assert_fail@plt+0x7298>
   1bfd4:	cmn	r0, #1
   1bfd8:	mov	r4, r0
   1bfdc:	bne	1be4c <__assert_fail@plt+0xa8f4>
   1bfe0:	b	1beb8 <__assert_fail@plt+0xa960>
   1bfe4:	ldr	r3, [r5, #12]
   1bfe8:	lsl	sl, r7, #2
   1bfec:	add	r9, r4, r4, lsl #1
   1bff0:	ldr	r7, [r3, r7, lsl #2]
   1bff4:	ldr	r3, [r5, #20]
   1bff8:	lsl	r9, r9, #2
   1bffc:	lsl	r6, r7, #3
   1c000:	add	lr, lr, r6
   1c004:	add	r3, r3, r9
   1c008:	mov	r0, #0
   1c00c:	ldm	lr, {r1, r2}
   1c010:	str	r0, [r3, #4]
   1c014:	mov	r0, r5
   1c018:	str	r4, [sp, #12]
   1c01c:	bl	187f0 <__assert_fail@plt+0x7298>
   1c020:	cmn	r0, #1
   1c024:	mov	r4, r0
   1c028:	beq	1beb8 <__assert_fail@plt+0xa960>
   1c02c:	ldr	ip, [r5]
   1c030:	ldr	lr, [pc, #164]	; 1c0dc <__assert_fail@plt+0xab84>
   1c034:	add	r0, ip, r0, lsl #3
   1c038:	and	r2, fp, r8
   1c03c:	ldr	r3, [r0, #4]
   1c040:	add	ip, ip, r6
   1c044:	bic	r3, r3, lr
   1c048:	orr	r3, r3, r2, lsl #8
   1c04c:	str	r3, [r0, #4]
   1c050:	ldr	ip, [ip, #4]
   1c054:	bic	r3, r3, lr
   1c058:	mov	r1, r4
   1c05c:	and	ip, r8, ip, lsr #8
   1c060:	orr	r2, r2, ip
   1c064:	orr	r3, r3, r2, lsl #8
   1c068:	str	r3, [r0, #4]
   1c06c:	lsr	r3, r3, #16
   1c070:	uxtb	r3, r3
   1c074:	orr	r3, r3, #4
   1c078:	strb	r3, [r0, #6]
   1c07c:	ldr	r2, [r5, #16]
   1c080:	ldr	r3, [r5, #12]
   1c084:	ldr	ip, [sp, #12]
   1c088:	ldr	r0, [r5, #20]
   1c08c:	str	r7, [r2, r4, lsl #2]
   1c090:	ldr	r2, [r3, sl]
   1c094:	add	r0, r0, r9
   1c098:	str	r2, [r3, ip, lsl #2]
   1c09c:	bl	189a4 <__assert_fail@plt+0x744c>
   1c0a0:	cmp	r0, #0
   1c0a4:	bne	1bd40 <__assert_fail@plt+0xa7e8>
   1c0a8:	b	1beb8 <__assert_fail@plt+0xa960>
   1c0ac:	ldr	r2, [r5, #12]
   1c0b0:	mov	r0, r3
   1c0b4:	ldr	r3, [r2, r7, lsl #2]
   1c0b8:	str	r3, [r2, r4, lsl #2]
   1c0bc:	b	1bebc <__assert_fail@plt+0xa964>
   1c0c0:	mov	r1, r7
   1c0c4:	bl	189a4 <__assert_fail@plt+0x744c>
   1c0c8:	cmp	r0, #0
   1c0cc:	movne	r0, #0
   1c0d0:	bne	1bebc <__assert_fail@plt+0xa964>
   1c0d4:	b	1beb8 <__assert_fail@plt+0xa960>
   1c0d8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1c0dc:	andeq	pc, r3, r0, lsl #30
   1c0e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0e4:	add	r8, r2, r2, lsl #1
   1c0e8:	mov	r4, r2
   1c0ec:	ldr	r2, [r1, #20]
   1c0f0:	lsl	r8, r8, #2
   1c0f4:	add	r2, r2, r8
   1c0f8:	mov	r7, r1
   1c0fc:	ldr	r1, [r2, #4]
   1c100:	sub	sp, sp, #44	; 0x2c
   1c104:	add	r1, r1, #1
   1c108:	str	r0, [sp, #8]
   1c10c:	mov	r2, #0
   1c110:	lsl	r0, r1, #2
   1c114:	str	r3, [sp, #12]
   1c118:	str	r1, [sp, #16]
   1c11c:	str	r2, [sp, #20]
   1c120:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   1c124:	cmp	r0, #0
   1c128:	str	r0, [sp, #24]
   1c12c:	beq	1c34c <__assert_fail@plt+0xadf4>
   1c130:	ldr	r6, [r7]
   1c134:	ldr	r3, [sp, #20]
   1c138:	lsl	r5, r4, #3
   1c13c:	add	lr, r6, r5
   1c140:	str	r4, [r0, r3, lsl #2]
   1c144:	ldr	r1, [r7, #24]
   1c148:	ldr	r0, [lr, #4]
   1c14c:	ldr	r2, [pc, #520]	; 1c35c <__assert_fail@plt+0xae04>
   1c150:	add	ip, r1, r8
   1c154:	and	r2, r2, r0
   1c158:	add	r3, r3, #1
   1c15c:	cmp	r2, #0
   1c160:	mvn	r2, #0
   1c164:	str	r3, [sp, #20]
   1c168:	str	r2, [ip, #4]
   1c16c:	beq	1c19c <__assert_fail@plt+0xac44>
   1c170:	ldr	r3, [r7, #20]
   1c174:	add	r3, r3, r8
   1c178:	ldr	r2, [r3, #4]
   1c17c:	cmp	r2, #0
   1c180:	beq	1c2b0 <__assert_fail@plt+0xad58>
   1c184:	ldr	r3, [r3, #8]
   1c188:	ldr	r3, [r3]
   1c18c:	add	r6, r6, r3, lsl #3
   1c190:	ldrb	r3, [r6, #6]
   1c194:	tst	r3, #4
   1c198:	beq	1c314 <__assert_fail@plt+0xadbc>
   1c19c:	ldrb	r3, [lr, #4]
   1c1a0:	tst	r3, #8
   1c1a4:	beq	1c2ac <__assert_fail@plt+0xad54>
   1c1a8:	ldr	ip, [r7, #20]
   1c1ac:	add	r3, ip, r8
   1c1b0:	ldr	r2, [r3, #4]
   1c1b4:	cmp	r2, #0
   1c1b8:	ble	1c2ac <__assert_fail@plt+0xad54>
   1c1bc:	mov	sl, #0
   1c1c0:	mov	r5, sl
   1c1c4:	mov	fp, #1
   1c1c8:	add	r9, sp, #28
   1c1cc:	b	1c238 <__assert_fail@plt+0xace0>
   1c1d0:	ldm	r3, {r0, r1, r2}
   1c1d4:	stm	r9, {r0, r1, r2}
   1c1d8:	ldr	r3, [sp, #32]
   1c1dc:	cmp	r3, #0
   1c1e0:	beq	1c20c <__assert_fail@plt+0xacb4>
   1c1e4:	ldr	r2, [sp, #20]
   1c1e8:	ldr	r1, [sp, #16]
   1c1ec:	add	r2, r2, r3, lsl #1
   1c1f0:	cmp	r1, r2
   1c1f4:	blt	1c2ec <__assert_fail@plt+0xad94>
   1c1f8:	mov	r1, r9
   1c1fc:	add	r0, sp, #16
   1c200:	bl	18f28 <__assert_fail@plt+0x79d0>
   1c204:	cmp	r0, #0
   1c208:	bne	1c27c <__assert_fail@plt+0xad24>
   1c20c:	ldr	r1, [r7, #24]
   1c210:	add	r4, r1, r4
   1c214:	ldr	r3, [r4, #4]
   1c218:	cmp	r3, #0
   1c21c:	beq	1c2d8 <__assert_fail@plt+0xad80>
   1c220:	ldr	ip, [r7, #20]
   1c224:	add	r3, ip, r8
   1c228:	add	r5, r5, #1
   1c22c:	ldr	r2, [r3, #4]
   1c230:	cmp	r2, r5
   1c234:	ble	1c28c <__assert_fail@plt+0xad34>
   1c238:	ldr	r3, [r3, #8]
   1c23c:	ldr	r2, [r3, r5, lsl #2]
   1c240:	add	r4, r2, r2, lsl #1
   1c244:	lsl	r4, r4, #2
   1c248:	add	r3, r1, r4
   1c24c:	ldr	r0, [r3, #4]
   1c250:	cmn	r0, #1
   1c254:	moveq	sl, fp
   1c258:	beq	1c224 <__assert_fail@plt+0xaccc>
   1c25c:	cmp	r0, #0
   1c260:	bne	1c1d0 <__assert_fail@plt+0xac78>
   1c264:	mov	r3, #0
   1c268:	mov	r1, r7
   1c26c:	mov	r0, r9
   1c270:	bl	1c0e0 <__assert_fail@plt+0xab88>
   1c274:	cmp	r0, #0
   1c278:	beq	1c1d8 <__assert_fail@plt+0xac80>
   1c27c:	mov	r3, r0
   1c280:	mov	r0, r3
   1c284:	add	sp, sp, #44	; 0x2c
   1c288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c28c:	ldr	r3, [sp, #12]
   1c290:	eor	r3, r3, #1
   1c294:	tst	sl, r3
   1c298:	addne	r8, r1, r8
   1c29c:	movne	r3, #0
   1c2a0:	strne	r3, [r8, #4]
   1c2a4:	addne	lr, sp, #16
   1c2a8:	bne	1c2bc <__assert_fail@plt+0xad64>
   1c2ac:	add	ip, r1, r8
   1c2b0:	add	lr, sp, #16
   1c2b4:	ldm	lr, {r0, r1, r2}
   1c2b8:	stm	ip, {r0, r1, r2}
   1c2bc:	mov	r3, #0
   1c2c0:	ldm	lr, {r0, r1, r2}
   1c2c4:	ldr	ip, [sp, #8]
   1c2c8:	stm	ip, {r0, r1, r2}
   1c2cc:	mov	r0, r3
   1c2d0:	add	sp, sp, #44	; 0x2c
   1c2d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c2d8:	ldr	r0, [sp, #36]	; 0x24
   1c2dc:	bl	13c04 <__assert_fail@plt+0x26ac>
   1c2e0:	mov	sl, fp
   1c2e4:	ldr	r1, [r7, #24]
   1c2e8:	b	1c220 <__assert_fail@plt+0xacc8>
   1c2ec:	add	r3, r1, r3
   1c2f0:	ldr	r0, [sp, #24]
   1c2f4:	lsl	r1, r3, #3
   1c2f8:	lsl	r6, r3, #1
   1c2fc:	bl	2b678 <__assert_fail@plt+0x1a120>
   1c300:	cmp	r0, #0
   1c304:	beq	1c34c <__assert_fail@plt+0xadf4>
   1c308:	str	r0, [sp, #24]
   1c30c:	str	r6, [sp, #16]
   1c310:	b	1c1f8 <__assert_fail@plt+0xaca0>
   1c314:	ldr	r2, [pc, #68]	; 1c360 <__assert_fail@plt+0xae08>
   1c318:	mov	r3, r4
   1c31c:	and	r0, r2, r0, lsr #8
   1c320:	str	r0, [sp]
   1c324:	mov	r2, r4
   1c328:	mov	r1, r4
   1c32c:	mov	r0, r7
   1c330:	bl	1bd1c <__assert_fail@plt+0xa7c4>
   1c334:	subs	r3, r0, #0
   1c338:	bne	1c2cc <__assert_fail@plt+0xad74>
   1c33c:	ldr	lr, [r7]
   1c340:	ldr	r1, [r7, #24]
   1c344:	add	lr, lr, r5
   1c348:	b	1c19c <__assert_fail@plt+0xac44>
   1c34c:	mov	r3, #12
   1c350:	mov	r0, r3
   1c354:	add	sp, sp, #44	; 0x2c
   1c358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c35c:	andeq	pc, r3, r0, lsl #30
   1c360:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1c364:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c368:	mov	r8, r1
   1c36c:	ldr	r1, [r1, #4]
   1c370:	sub	sp, sp, #24
   1c374:	mov	r6, #0
   1c378:	mov	r7, r0
   1c37c:	lsl	r0, r1, #2
   1c380:	mov	r5, r2
   1c384:	mov	r4, r3
   1c388:	str	r1, [sp, #12]
   1c38c:	str	r6, [sp, #16]
   1c390:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   1c394:	cmp	r0, r6
   1c398:	str	r0, [sp, #20]
   1c39c:	beq	1c4cc <__assert_fail@plt+0xaf74>
   1c3a0:	ldr	r1, [r8, #4]
   1c3a4:	ldr	r0, [r8, #8]
   1c3a8:	cmp	r1, r6
   1c3ac:	ble	1c444 <__assert_fail@plt+0xaeec>
   1c3b0:	ldr	r2, [r0, r6, lsl #2]
   1c3b4:	ldr	r9, [r7, #24]
   1c3b8:	add	r3, r2, r2, lsl #1
   1c3bc:	add	r9, r9, r3, lsl #2
   1c3c0:	ldr	sl, [r9, #4]
   1c3c4:	cmp	sl, #0
   1c3c8:	ble	1c464 <__assert_fail@plt+0xaf0c>
   1c3cc:	ldr	r0, [r9, #8]
   1c3d0:	ldr	lr, [r7]
   1c3d4:	sub	r0, r0, #4
   1c3d8:	mov	r3, #0
   1c3dc:	b	1c3e8 <__assert_fail@plt+0xae90>
   1c3e0:	cmp	sl, r3
   1c3e4:	beq	1c468 <__assert_fail@plt+0xaf10>
   1c3e8:	ldr	r1, [r0, #4]!
   1c3ec:	add	r3, r3, #1
   1c3f0:	add	ip, lr, r1, lsl #3
   1c3f4:	ldrb	ip, [ip, #4]
   1c3f8:	cmp	r4, ip
   1c3fc:	bne	1c3e0 <__assert_fail@plt+0xae88>
   1c400:	ldr	ip, [lr, r1, lsl #3]
   1c404:	cmp	r5, ip
   1c408:	bne	1c3e0 <__assert_fail@plt+0xae88>
   1c40c:	cmn	r1, #1
   1c410:	beq	1c468 <__assert_fail@plt+0xaf10>
   1c414:	str	r4, [sp]
   1c418:	mov	r3, r5
   1c41c:	add	r1, sp, #12
   1c420:	mov	r0, r7
   1c424:	bl	1bbbc <__assert_fail@plt+0xa664>
   1c428:	subs	r9, r0, #0
   1c42c:	bne	1c490 <__assert_fail@plt+0xaf38>
   1c430:	ldr	r0, [r8, #8]
   1c434:	ldr	r1, [r8, #4]
   1c438:	add	r6, r6, #1
   1c43c:	cmp	r6, r1
   1c440:	blt	1c3b0 <__assert_fail@plt+0xae58>
   1c444:	bl	13c04 <__assert_fail@plt+0x26ac>
   1c448:	add	r3, sp, #24
   1c44c:	mov	r9, #0
   1c450:	ldmdb	r3, {r0, r1, r2}
   1c454:	stm	r8, {r0, r1, r2}
   1c458:	mov	r0, r9
   1c45c:	add	sp, sp, #24
   1c460:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c464:	beq	1c438 <__assert_fail@plt+0xaee0>
   1c468:	ldr	r3, [sp, #16]
   1c46c:	ldr	r2, [sp, #12]
   1c470:	add	r3, r3, sl, lsl #1
   1c474:	cmp	r2, r3
   1c478:	blt	1c4a4 <__assert_fail@plt+0xaf4c>
   1c47c:	mov	r1, r9
   1c480:	add	r0, sp, #12
   1c484:	bl	18f28 <__assert_fail@plt+0x79d0>
   1c488:	subs	r9, r0, #0
   1c48c:	beq	1c430 <__assert_fail@plt+0xaed8>
   1c490:	ldr	r0, [sp, #20]
   1c494:	bl	13c04 <__assert_fail@plt+0x26ac>
   1c498:	mov	r0, r9
   1c49c:	add	sp, sp, #24
   1c4a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c4a4:	add	r2, sl, r2
   1c4a8:	ldr	r0, [sp, #20]
   1c4ac:	lsl	r1, r2, #3
   1c4b0:	lsl	sl, r2, #1
   1c4b4:	bl	2b678 <__assert_fail@plt+0x1a120>
   1c4b8:	cmp	r0, #0
   1c4bc:	beq	1c4dc <__assert_fail@plt+0xaf84>
   1c4c0:	str	r0, [sp, #20]
   1c4c4:	str	sl, [sp, #12]
   1c4c8:	b	1c47c <__assert_fail@plt+0xaf24>
   1c4cc:	mov	r9, #12
   1c4d0:	mov	r0, r9
   1c4d4:	add	sp, sp, #24
   1c4d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c4dc:	mov	r9, #12
   1c4e0:	b	1c490 <__assert_fail@plt+0xaf38>
   1c4e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4e8:	sub	sp, sp, #172	; 0xac
   1c4ec:	mov	ip, r3
   1c4f0:	str	r0, [sp, #64]	; 0x40
   1c4f4:	ldr	r0, [r0, #84]	; 0x54
   1c4f8:	str	r3, [sp, #152]	; 0x98
   1c4fc:	mov	r3, r0
   1c500:	str	r0, [sp, #120]	; 0x78
   1c504:	ldr	r3, [r3, #24]
   1c508:	add	r0, ip, ip, lsl #1
   1c50c:	str	r1, [sp, #20]
   1c510:	add	r3, r3, r0, lsl #2
   1c514:	str	r3, [sp, #124]	; 0x7c
   1c518:	ldr	r3, [r3, #4]
   1c51c:	cmp	r3, #0
   1c520:	ble	1c5c0 <__assert_fail@plt+0xb068>
   1c524:	mov	fp, r2
   1c528:	ldr	r2, [sp, #208]	; 0xd0
   1c52c:	mov	r1, #1
   1c530:	add	r2, r2, r2, lsl r1
   1c534:	lsl	r1, r1, fp
   1c538:	lsl	r2, r2, #3
   1c53c:	str	r2, [sp, #44]	; 0x2c
   1c540:	add	r2, r2, #24
   1c544:	str	r2, [sp, #96]	; 0x60
   1c548:	ldr	r2, [sp, #20]
   1c54c:	str	r1, [sp, #24]
   1c550:	mvn	r1, r1
   1c554:	str	r1, [sp, #36]	; 0x24
   1c558:	and	r1, r2, #2
   1c55c:	and	r2, r2, #1
   1c560:	str	r2, [sp, #32]
   1c564:	mov	r2, #0
   1c568:	str	r1, [sp, #16]
   1c56c:	str	r2, [sp, #108]	; 0x6c
   1c570:	ldr	r2, [sp, #124]	; 0x7c
   1c574:	ldr	r0, [sp, #108]	; 0x6c
   1c578:	ldr	r1, [r2, #8]
   1c57c:	ldr	r2, [sp, #120]	; 0x78
   1c580:	ldr	r1, [r1, r0, lsl #2]
   1c584:	ldr	r2, [r2]
   1c588:	str	r1, [sp, #100]	; 0x64
   1c58c:	add	r1, r2, r1, lsl #3
   1c590:	ldrb	r1, [r1, #4]
   1c594:	cmp	r1, #8
   1c598:	beq	1c660 <__assert_fail@plt+0xb108>
   1c59c:	cmp	r1, #9
   1c5a0:	beq	1c63c <__assert_fail@plt+0xb0e4>
   1c5a4:	cmp	r1, #4
   1c5a8:	beq	1c5d4 <__assert_fail@plt+0xb07c>
   1c5ac:	ldr	r2, [sp, #108]	; 0x6c
   1c5b0:	add	r2, r2, #1
   1c5b4:	cmp	r2, r3
   1c5b8:	str	r2, [sp, #108]	; 0x6c
   1c5bc:	blt	1c570 <__assert_fail@plt+0xb018>
   1c5c0:	ldr	r3, [sp, #20]
   1c5c4:	lsr	r0, r3, #1
   1c5c8:	and	r0, r0, #1
   1c5cc:	add	sp, sp, #172	; 0xac
   1c5d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c5d4:	ldr	r2, [sp, #208]	; 0xd0
   1c5d8:	cmn	r2, #1
   1c5dc:	beq	1c5ac <__assert_fail@plt+0xb054>
   1c5e0:	ldr	r3, [sp, #100]	; 0x64
   1c5e4:	ldr	r2, [sp, #64]	; 0x40
   1c5e8:	add	r3, r3, r3, lsl #1
   1c5ec:	ldr	r2, [r2, #116]	; 0x74
   1c5f0:	lsl	r3, r3, #2
   1c5f4:	str	r3, [sp, #156]	; 0x9c
   1c5f8:	ldr	r3, [sp, #96]	; 0x60
   1c5fc:	add	r3, r2, r3
   1c600:	str	r3, [sp, #88]	; 0x58
   1c604:	ldr	r3, [sp, #88]	; 0x58
   1c608:	ldr	r2, [sp, #100]	; 0x64
   1c60c:	ldr	r3, [r3, #-24]	; 0xffffffe8
   1c610:	cmp	r2, r3
   1c614:	beq	1c684 <__assert_fail@plt+0xb12c>
   1c618:	ldr	r3, [sp, #88]	; 0x58
   1c61c:	add	r3, r3, #24
   1c620:	str	r3, [sp, #88]	; 0x58
   1c624:	ldrb	r3, [r3, #-28]	; 0xffffffe4
   1c628:	cmp	r3, #0
   1c62c:	bne	1c604 <__assert_fail@plt+0xb0ac>
   1c630:	ldr	r3, [sp, #124]	; 0x7c
   1c634:	ldr	r3, [r3, #4]
   1c638:	b	1c5ac <__assert_fail@plt+0xb054>
   1c63c:	ldr	r1, [sp, #16]
   1c640:	cmp	r1, #0
   1c644:	beq	1c5ac <__assert_fail@plt+0xb054>
   1c648:	ldr	r1, [sp, #100]	; 0x64
   1c64c:	ldr	r2, [r2, r1, lsl #3]
   1c650:	cmp	fp, r2
   1c654:	bne	1c5ac <__assert_fail@plt+0xb054>
   1c658:	mov	r0, #0
   1c65c:	b	1c5cc <__assert_fail@plt+0xb074>
   1c660:	ldr	r1, [sp, #32]
   1c664:	cmp	r1, #0
   1c668:	beq	1c5ac <__assert_fail@plt+0xb054>
   1c66c:	ldr	r1, [sp, #100]	; 0x64
   1c670:	ldr	r2, [r2, r1, lsl #3]
   1c674:	cmp	r2, fp
   1c678:	bne	1c5ac <__assert_fail@plt+0xb054>
   1c67c:	mvn	r0, #0
   1c680:	b	1c5cc <__assert_fail@plt+0xb074>
   1c684:	cmp	fp, #31
   1c688:	bgt	1c6a0 <__assert_fail@plt+0xb148>
   1c68c:	ldr	r3, [sp, #88]	; 0x58
   1c690:	ldr	r2, [sp, #24]
   1c694:	ldr	r3, [r3, #-8]
   1c698:	tst	r2, r3
   1c69c:	beq	1c618 <__assert_fail@plt+0xb0c0>
   1c6a0:	ldr	r3, [sp, #120]	; 0x78
   1c6a4:	ldr	r2, [sp, #156]	; 0x9c
   1c6a8:	ldr	r3, [r3, #20]
   1c6ac:	add	r3, r3, r2
   1c6b0:	ldr	r2, [sp, #152]	; 0x98
   1c6b4:	ldr	r3, [r3, #8]
   1c6b8:	ldr	r3, [r3]
   1c6bc:	cmp	r2, r3
   1c6c0:	str	r3, [sp, #128]	; 0x80
   1c6c4:	beq	1c778 <__assert_fail@plt+0xb220>
   1c6c8:	ldr	r3, [sp, #64]	; 0x40
   1c6cc:	ldr	r3, [r3, #84]	; 0x54
   1c6d0:	mov	r2, r3
   1c6d4:	str	r3, [sp, #132]	; 0x84
   1c6d8:	ldr	r3, [sp, #128]	; 0x80
   1c6dc:	ldr	r2, [r2, #24]
   1c6e0:	add	r3, r3, r3, lsl #1
   1c6e4:	add	r3, r2, r3, lsl #2
   1c6e8:	str	r3, [sp, #136]	; 0x88
   1c6ec:	ldr	r3, [r3, #4]
   1c6f0:	cmp	r3, #0
   1c6f4:	ble	1cea8 <__assert_fail@plt+0xb950>
   1c6f8:	mov	r2, #0
   1c6fc:	str	r2, [sp, #112]	; 0x70
   1c700:	b	1c728 <__assert_fail@plt+0xb1d0>
   1c704:	cmp	r1, #9
   1c708:	beq	1cec8 <__assert_fail@plt+0xb970>
   1c70c:	cmp	r1, #4
   1c710:	beq	1c784 <__assert_fail@plt+0xb22c>
   1c714:	ldr	r2, [sp, #112]	; 0x70
   1c718:	add	r2, r2, #1
   1c71c:	cmp	r2, r3
   1c720:	str	r2, [sp, #112]	; 0x70
   1c724:	bge	1cea8 <__assert_fail@plt+0xb950>
   1c728:	ldr	r2, [sp, #136]	; 0x88
   1c72c:	ldr	r0, [sp, #112]	; 0x70
   1c730:	ldr	r1, [r2, #8]
   1c734:	ldr	r2, [sp, #132]	; 0x84
   1c738:	ldr	r1, [r1, r0, lsl #2]
   1c73c:	ldr	r2, [r2]
   1c740:	str	r1, [sp, #104]	; 0x68
   1c744:	add	r1, r2, r1, lsl #3
   1c748:	ldrb	r1, [r1, #4]
   1c74c:	cmp	r1, #8
   1c750:	bne	1c704 <__assert_fail@plt+0xb1ac>
   1c754:	ldr	r1, [sp, #32]
   1c758:	cmp	r1, #0
   1c75c:	beq	1c714 <__assert_fail@plt+0xb1bc>
   1c760:	ldr	r1, [sp, #104]	; 0x68
   1c764:	ldr	r2, [r2, r1, lsl #3]
   1c768:	cmp	fp, r2
   1c76c:	bne	1c714 <__assert_fail@plt+0xb1bc>
   1c770:	mvn	r0, #0
   1c774:	b	1c5cc <__assert_fail@plt+0xb074>
   1c778:	ldr	r3, [sp, #32]
   1c77c:	rsb	r0, r3, #0
   1c780:	b	1c5cc <__assert_fail@plt+0xb074>
   1c784:	ldr	r3, [sp, #104]	; 0x68
   1c788:	ldr	r2, [sp, #64]	; 0x40
   1c78c:	add	r3, r3, r3, lsl #1
   1c790:	ldr	r2, [r2, #116]	; 0x74
   1c794:	lsl	r3, r3, #2
   1c798:	str	r3, [sp, #160]	; 0xa0
   1c79c:	ldr	r3, [sp, #96]	; 0x60
   1c7a0:	add	r3, r2, r3
   1c7a4:	str	r3, [sp, #92]	; 0x5c
   1c7a8:	b	1c7c4 <__assert_fail@plt+0xb26c>
   1c7ac:	ldr	r3, [sp, #92]	; 0x5c
   1c7b0:	add	r3, r3, #24
   1c7b4:	str	r3, [sp, #92]	; 0x5c
   1c7b8:	ldrb	r3, [r3, #-28]	; 0xffffffe4
   1c7bc:	cmp	r3, #0
   1c7c0:	beq	1cee8 <__assert_fail@plt+0xb990>
   1c7c4:	ldr	r3, [sp, #92]	; 0x5c
   1c7c8:	ldr	r2, [sp, #104]	; 0x68
   1c7cc:	ldr	r3, [r3, #-24]	; 0xffffffe8
   1c7d0:	cmp	r2, r3
   1c7d4:	bne	1c7ac <__assert_fail@plt+0xb254>
   1c7d8:	cmp	fp, #31
   1c7dc:	bgt	1c7f4 <__assert_fail@plt+0xb29c>
   1c7e0:	ldr	r3, [sp, #92]	; 0x5c
   1c7e4:	ldr	r2, [sp, #24]
   1c7e8:	ldr	r3, [r3, #-8]
   1c7ec:	tst	r2, r3
   1c7f0:	beq	1c7ac <__assert_fail@plt+0xb254>
   1c7f4:	ldr	r3, [sp, #132]	; 0x84
   1c7f8:	ldr	r2, [sp, #160]	; 0xa0
   1c7fc:	ldr	r3, [r3, #20]
   1c800:	add	r3, r3, r2
   1c804:	ldr	r2, [sp, #128]	; 0x80
   1c808:	ldr	r3, [r3, #8]
   1c80c:	ldr	r3, [r3]
   1c810:	cmp	r2, r3
   1c814:	str	r3, [sp, #140]	; 0x8c
   1c818:	beq	1ce90 <__assert_fail@plt+0xb938>
   1c81c:	ldr	r3, [sp, #64]	; 0x40
   1c820:	ldr	r3, [r3, #84]	; 0x54
   1c824:	mov	r2, r3
   1c828:	str	r3, [sp, #144]	; 0x90
   1c82c:	ldr	r3, [sp, #140]	; 0x8c
   1c830:	ldr	r2, [r2, #24]
   1c834:	add	r3, r3, r3, lsl #1
   1c838:	add	r3, r2, r3, lsl #2
   1c83c:	str	r3, [sp, #148]	; 0x94
   1c840:	ldr	r3, [r3, #4]
   1c844:	cmp	r3, #0
   1c848:	ble	1ce64 <__assert_fail@plt+0xb90c>
   1c84c:	mov	r2, #0
   1c850:	str	r2, [sp, #116]	; 0x74
   1c854:	b	1c87c <__assert_fail@plt+0xb324>
   1c858:	cmp	r1, #9
   1c85c:	beq	1c8c8 <__assert_fail@plt+0xb370>
   1c860:	cmp	r1, #4
   1c864:	beq	1c8e8 <__assert_fail@plt+0xb390>
   1c868:	ldr	r2, [sp, #116]	; 0x74
   1c86c:	add	r2, r2, #1
   1c870:	cmp	r2, r3
   1c874:	str	r2, [sp, #116]	; 0x74
   1c878:	bge	1ce64 <__assert_fail@plt+0xb90c>
   1c87c:	ldr	r2, [sp, #148]	; 0x94
   1c880:	ldr	r0, [sp, #116]	; 0x74
   1c884:	ldr	r1, [r2, #8]
   1c888:	ldr	r2, [sp, #144]	; 0x90
   1c88c:	ldr	r1, [r1, r0, lsl #2]
   1c890:	ldr	r2, [r2]
   1c894:	str	r1, [sp, #84]	; 0x54
   1c898:	add	r1, r2, r1, lsl #3
   1c89c:	ldrb	r1, [r1, #4]
   1c8a0:	cmp	r1, #8
   1c8a4:	bne	1c858 <__assert_fail@plt+0xb300>
   1c8a8:	ldr	r1, [sp, #32]
   1c8ac:	cmp	r1, #0
   1c8b0:	beq	1c868 <__assert_fail@plt+0xb310>
   1c8b4:	ldr	r1, [sp, #84]	; 0x54
   1c8b8:	ldr	r2, [r2, r1, lsl #3]
   1c8bc:	cmp	fp, r2
   1c8c0:	bne	1c868 <__assert_fail@plt+0xb310>
   1c8c4:	b	1c67c <__assert_fail@plt+0xb124>
   1c8c8:	ldr	r1, [sp, #16]
   1c8cc:	cmp	r1, #0
   1c8d0:	beq	1c868 <__assert_fail@plt+0xb310>
   1c8d4:	ldr	r1, [sp, #84]	; 0x54
   1c8d8:	ldr	r2, [r2, r1, lsl #3]
   1c8dc:	cmp	fp, r2
   1c8e0:	bne	1c868 <__assert_fail@plt+0xb310>
   1c8e4:	b	1c658 <__assert_fail@plt+0xb100>
   1c8e8:	ldr	r3, [sp, #84]	; 0x54
   1c8ec:	ldr	r2, [sp, #64]	; 0x40
   1c8f0:	add	r3, r3, r3, lsl #1
   1c8f4:	ldr	r2, [r2, #116]	; 0x74
   1c8f8:	lsl	r3, r3, #2
   1c8fc:	str	r3, [sp, #164]	; 0xa4
   1c900:	ldr	r3, [sp, #96]	; 0x60
   1c904:	add	r3, r2, r3
   1c908:	str	r3, [sp, #68]	; 0x44
   1c90c:	b	1c928 <__assert_fail@plt+0xb3d0>
   1c910:	ldr	r3, [sp, #68]	; 0x44
   1c914:	add	r3, r3, #24
   1c918:	str	r3, [sp, #68]	; 0x44
   1c91c:	ldrb	r3, [r3, #-28]	; 0xffffffe4
   1c920:	cmp	r3, #0
   1c924:	beq	1ce84 <__assert_fail@plt+0xb92c>
   1c928:	ldr	r3, [sp, #68]	; 0x44
   1c92c:	ldr	r2, [sp, #84]	; 0x54
   1c930:	ldr	r3, [r3, #-24]	; 0xffffffe8
   1c934:	cmp	r2, r3
   1c938:	bne	1c910 <__assert_fail@plt+0xb3b8>
   1c93c:	cmp	fp, #31
   1c940:	bgt	1c958 <__assert_fail@plt+0xb400>
   1c944:	ldr	r3, [sp, #68]	; 0x44
   1c948:	ldr	r2, [sp, #24]
   1c94c:	ldr	r3, [r3, #-8]
   1c950:	tst	r2, r3
   1c954:	beq	1c910 <__assert_fail@plt+0xb3b8>
   1c958:	ldr	r3, [sp, #144]	; 0x90
   1c95c:	ldr	r2, [sp, #164]	; 0xa4
   1c960:	ldr	r3, [r3, #20]
   1c964:	add	r3, r3, r2
   1c968:	ldr	r2, [sp, #140]	; 0x8c
   1c96c:	ldr	r3, [r3, #8]
   1c970:	ldr	r3, [r3]
   1c974:	cmp	r2, r3
   1c978:	str	r3, [sp, #72]	; 0x48
   1c97c:	beq	1ce4c <__assert_fail@plt+0xb8f4>
   1c980:	ldr	r3, [sp, #64]	; 0x40
   1c984:	ldr	r3, [r3, #84]	; 0x54
   1c988:	mov	r2, r3
   1c98c:	str	r3, [sp, #48]	; 0x30
   1c990:	ldr	r3, [sp, #72]	; 0x48
   1c994:	ldr	r2, [r2, #24]
   1c998:	add	r3, r3, r3, lsl #1
   1c99c:	add	r3, r2, r3, lsl #2
   1c9a0:	str	r3, [sp, #80]	; 0x50
   1c9a4:	ldr	r1, [r3, #4]
   1c9a8:	cmp	r1, #0
   1c9ac:	ble	1ce2c <__assert_fail@plt+0xb8d4>
   1c9b0:	mov	r3, #0
   1c9b4:	str	r3, [sp, #40]	; 0x28
   1c9b8:	b	1c9e0 <__assert_fail@plt+0xb488>
   1c9bc:	cmp	r3, #9
   1c9c0:	beq	1ca2c <__assert_fail@plt+0xb4d4>
   1c9c4:	cmp	r3, #4
   1c9c8:	beq	1ca4c <__assert_fail@plt+0xb4f4>
   1c9cc:	ldr	r3, [sp, #40]	; 0x28
   1c9d0:	add	r3, r3, #1
   1c9d4:	cmp	r3, r1
   1c9d8:	str	r3, [sp, #40]	; 0x28
   1c9dc:	bge	1ce2c <__assert_fail@plt+0xb8d4>
   1c9e0:	ldr	r3, [sp, #80]	; 0x50
   1c9e4:	ldr	r0, [sp, #40]	; 0x28
   1c9e8:	ldr	r2, [sp, #48]	; 0x30
   1c9ec:	ldr	r3, [r3, #8]
   1c9f0:	ldr	r2, [r2]
   1c9f4:	ldr	r3, [r3, r0, lsl #2]
   1c9f8:	str	r3, [sp, #12]
   1c9fc:	add	r3, r2, r3, lsl #3
   1ca00:	ldrb	r3, [r3, #4]
   1ca04:	cmp	r3, #8
   1ca08:	bne	1c9bc <__assert_fail@plt+0xb464>
   1ca0c:	ldr	r3, [sp, #32]
   1ca10:	cmp	r3, #0
   1ca14:	beq	1c9cc <__assert_fail@plt+0xb474>
   1ca18:	ldr	r3, [sp, #12]
   1ca1c:	ldr	r3, [r2, r3, lsl #3]
   1ca20:	cmp	fp, r3
   1ca24:	bne	1c9cc <__assert_fail@plt+0xb474>
   1ca28:	b	1c67c <__assert_fail@plt+0xb124>
   1ca2c:	ldr	r3, [sp, #16]
   1ca30:	cmp	r3, #0
   1ca34:	beq	1c9cc <__assert_fail@plt+0xb474>
   1ca38:	ldr	r3, [sp, #12]
   1ca3c:	ldr	r3, [r2, r3, lsl #3]
   1ca40:	cmp	fp, r3
   1ca44:	bne	1c9cc <__assert_fail@plt+0xb474>
   1ca48:	b	1c658 <__assert_fail@plt+0xb100>
   1ca4c:	ldr	r3, [sp, #12]
   1ca50:	ldr	r2, [sp, #64]	; 0x40
   1ca54:	add	r3, r3, r3, lsl #1
   1ca58:	ldr	r9, [r2, #116]	; 0x74
   1ca5c:	lsl	r3, r3, #2
   1ca60:	str	r3, [sp, #76]	; 0x4c
   1ca64:	ldr	r3, [sp, #96]	; 0x60
   1ca68:	add	r9, r9, r3
   1ca6c:	b	1ca80 <__assert_fail@plt+0xb528>
   1ca70:	add	r9, r9, #24
   1ca74:	ldrb	r3, [r9, #-28]	; 0xffffffe4
   1ca78:	cmp	r3, #0
   1ca7c:	beq	1ccd4 <__assert_fail@plt+0xb77c>
   1ca80:	ldr	r3, [r9, #-24]	; 0xffffffe8
   1ca84:	ldr	r2, [sp, #12]
   1ca88:	cmp	r2, r3
   1ca8c:	bne	1ca70 <__assert_fail@plt+0xb518>
   1ca90:	cmp	fp, #31
   1ca94:	bgt	1caa8 <__assert_fail@plt+0xb550>
   1ca98:	ldr	r3, [r9, #-8]
   1ca9c:	ldr	r2, [sp, #24]
   1caa0:	tst	r2, r3
   1caa4:	beq	1ca70 <__assert_fail@plt+0xb518>
   1caa8:	ldr	r3, [sp, #48]	; 0x30
   1caac:	ldr	r2, [sp, #76]	; 0x4c
   1cab0:	ldr	r3, [r3, #20]
   1cab4:	add	r3, r3, r2
   1cab8:	ldr	r2, [sp, #72]	; 0x48
   1cabc:	ldr	r3, [r3, #8]
   1cac0:	ldr	r3, [r3]
   1cac4:	cmp	r2, r3
   1cac8:	str	r3, [sp, #28]
   1cacc:	beq	1ce14 <__assert_fail@plt+0xb8bc>
   1cad0:	ldr	r2, [sp, #64]	; 0x40
   1cad4:	ldr	r3, [sp, #28]
   1cad8:	ldr	r7, [r2, #84]	; 0x54
   1cadc:	add	sl, r3, r3, lsl #1
   1cae0:	ldr	r3, [r7, #24]
   1cae4:	add	sl, r3, sl, lsl #2
   1cae8:	ldr	r1, [sl, #4]
   1caec:	cmp	r1, #0
   1caf0:	ble	1ccac <__assert_fail@plt+0xb754>
   1caf4:	str	r9, [sp, #52]	; 0x34
   1caf8:	mov	r6, #0
   1cafc:	mov	r9, r2
   1cb00:	b	1cb20 <__assert_fail@plt+0xb5c8>
   1cb04:	cmp	r3, #9
   1cb08:	beq	1cb68 <__assert_fail@plt+0xb610>
   1cb0c:	cmp	r3, #4
   1cb10:	beq	1cb84 <__assert_fail@plt+0xb62c>
   1cb14:	add	r6, r6, #1
   1cb18:	cmp	r6, r1
   1cb1c:	bge	1cb60 <__assert_fail@plt+0xb608>
   1cb20:	ldr	r3, [sl, #8]
   1cb24:	ldr	r2, [r7]
   1cb28:	ldr	r5, [r3, r6, lsl #2]
   1cb2c:	add	r3, r2, r5, lsl #3
   1cb30:	ldrb	r3, [r3, #4]
   1cb34:	cmp	r3, #8
   1cb38:	bne	1cb04 <__assert_fail@plt+0xb5ac>
   1cb3c:	ldr	r3, [sp, #32]
   1cb40:	cmp	r3, #0
   1cb44:	beq	1cb14 <__assert_fail@plt+0xb5bc>
   1cb48:	ldr	r3, [r2, r5, lsl #3]
   1cb4c:	cmp	fp, r3
   1cb50:	beq	1c67c <__assert_fail@plt+0xb124>
   1cb54:	add	r6, r6, #1
   1cb58:	cmp	r6, r1
   1cb5c:	blt	1cb20 <__assert_fail@plt+0xb5c8>
   1cb60:	ldr	r9, [sp, #52]	; 0x34
   1cb64:	b	1ccac <__assert_fail@plt+0xb754>
   1cb68:	ldr	r3, [sp, #16]
   1cb6c:	cmp	r3, #0
   1cb70:	beq	1cb14 <__assert_fail@plt+0xb5bc>
   1cb74:	ldr	r3, [r2, r5, lsl #3]
   1cb78:	cmp	fp, r3
   1cb7c:	bne	1cb14 <__assert_fail@plt+0xb5bc>
   1cb80:	b	1c658 <__assert_fail@plt+0xb100>
   1cb84:	ldr	r3, [sp, #44]	; 0x2c
   1cb88:	ldr	r4, [r9, #116]	; 0x74
   1cb8c:	add	r8, r5, r5, lsl #1
   1cb90:	add	r4, r4, r3
   1cb94:	cmp	fp, #31
   1cb98:	lsl	r8, r8, #2
   1cb9c:	ldr	r3, [sp, #16]
   1cba0:	add	r4, r4, #24
   1cba4:	ble	1cce0 <__assert_fail@plt+0xb788>
   1cba8:	cmp	r3, #0
   1cbac:	bne	1cc44 <__assert_fail@plt+0xb6ec>
   1cbb0:	str	sl, [sp, #56]	; 0x38
   1cbb4:	str	r6, [sp, #60]	; 0x3c
   1cbb8:	ldr	sl, [sp, #20]
   1cbbc:	ldr	r6, [sp, #28]
   1cbc0:	b	1cbd0 <__assert_fail@plt+0xb678>
   1cbc4:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1cbc8:	cmp	r3, #0
   1cbcc:	beq	1cc28 <__assert_fail@plt+0xb6d0>
   1cbd0:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1cbd4:	add	r4, r4, #24
   1cbd8:	cmp	r5, r3
   1cbdc:	bne	1cbc4 <__assert_fail@plt+0xb66c>
   1cbe0:	ldr	r3, [r7, #20]
   1cbe4:	mov	r2, fp
   1cbe8:	add	r3, r3, r8
   1cbec:	mov	r1, sl
   1cbf0:	ldr	r3, [r3, #8]
   1cbf4:	mov	r0, r9
   1cbf8:	ldr	ip, [r3]
   1cbfc:	cmp	ip, r6
   1cc00:	mov	r3, ip
   1cc04:	beq	1cdfc <__assert_fail@plt+0xb8a4>
   1cc08:	ldr	ip, [sp, #208]	; 0xd0
   1cc0c:	str	ip, [sp]
   1cc10:	bl	1c4e4 <__assert_fail@plt+0xaf8c>
   1cc14:	cmn	r0, #1
   1cc18:	beq	1c67c <__assert_fail@plt+0xb124>
   1cc1c:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1cc20:	cmp	r3, #0
   1cc24:	bne	1cbd0 <__assert_fail@plt+0xb678>
   1cc28:	ldr	sl, [sp, #56]	; 0x38
   1cc2c:	ldr	r6, [sp, #60]	; 0x3c
   1cc30:	ldr	r1, [sl, #4]
   1cc34:	b	1cb14 <__assert_fail@plt+0xb5bc>
   1cc38:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1cc3c:	cmp	r3, #0
   1cc40:	beq	1cc30 <__assert_fail@plt+0xb6d8>
   1cc44:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1cc48:	add	r4, r4, #24
   1cc4c:	cmp	r5, r3
   1cc50:	bne	1cc38 <__assert_fail@plt+0xb6e0>
   1cc54:	ldr	r3, [r7, #20]
   1cc58:	ldr	lr, [sp, #28]
   1cc5c:	add	r3, r3, r8
   1cc60:	mov	r2, fp
   1cc64:	ldr	r3, [r3, #8]
   1cc68:	ldr	r1, [sp, #20]
   1cc6c:	mov	r0, r9
   1cc70:	ldr	ip, [r3]
   1cc74:	cmp	ip, lr
   1cc78:	mov	r3, ip
   1cc7c:	beq	1cdfc <__assert_fail@plt+0xb8a4>
   1cc80:	ldr	ip, [sp, #208]	; 0xd0
   1cc84:	str	ip, [sp]
   1cc88:	bl	1c4e4 <__assert_fail@plt+0xaf8c>
   1cc8c:	cmn	r0, #1
   1cc90:	beq	1c67c <__assert_fail@plt+0xb124>
   1cc94:	cmp	r0, #0
   1cc98:	bne	1cc38 <__assert_fail@plt+0xb6e0>
   1cc9c:	ldr	r9, [sp, #52]	; 0x34
   1cca0:	ldr	r3, [sp, #16]
   1cca4:	cmp	r3, #0
   1cca8:	bne	1c658 <__assert_fail@plt+0xb100>
   1ccac:	cmp	fp, #31
   1ccb0:	bgt	1ca70 <__assert_fail@plt+0xb518>
   1ccb4:	ldr	r3, [r9, #-8]
   1ccb8:	ldr	r2, [sp, #36]	; 0x24
   1ccbc:	add	r9, r9, #24
   1ccc0:	and	r3, r3, r2
   1ccc4:	str	r3, [r9, #-32]	; 0xffffffe0
   1ccc8:	ldrb	r3, [r9, #-28]	; 0xffffffe4
   1cccc:	cmp	r3, #0
   1ccd0:	bne	1ca80 <__assert_fail@plt+0xb528>
   1ccd4:	ldr	r3, [sp, #80]	; 0x50
   1ccd8:	ldr	r1, [r3, #4]
   1ccdc:	b	1c9cc <__assert_fail@plt+0xb474>
   1cce0:	cmp	r3, #0
   1cce4:	bne	1cdec <__assert_fail@plt+0xb894>
   1cce8:	str	sl, [sp, #56]	; 0x38
   1ccec:	str	r6, [sp, #60]	; 0x3c
   1ccf0:	ldr	sl, [sp, #208]	; 0xd0
   1ccf4:	ldr	r6, [sp, #28]
   1ccf8:	b	1cd0c <__assert_fail@plt+0xb7b4>
   1ccfc:	add	r4, r4, #24
   1cd00:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1cd04:	cmp	r3, #0
   1cd08:	beq	1cc28 <__assert_fail@plt+0xb6d0>
   1cd0c:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1cd10:	cmp	r5, r3
   1cd14:	bne	1ccfc <__assert_fail@plt+0xb7a4>
   1cd18:	ldr	r3, [r4, #-8]
   1cd1c:	ldr	ip, [sp, #24]
   1cd20:	mov	r2, fp
   1cd24:	tst	ip, r3
   1cd28:	ldr	r1, [sp, #20]
   1cd2c:	mov	r0, r9
   1cd30:	beq	1ccfc <__assert_fail@plt+0xb7a4>
   1cd34:	ldr	r3, [r7, #20]
   1cd38:	add	r3, r3, r8
   1cd3c:	ldr	r3, [r3, #8]
   1cd40:	ldr	ip, [r3]
   1cd44:	cmp	r6, ip
   1cd48:	mov	r3, ip
   1cd4c:	beq	1cdfc <__assert_fail@plt+0xb8a4>
   1cd50:	str	sl, [sp]
   1cd54:	bl	1c4e4 <__assert_fail@plt+0xaf8c>
   1cd58:	cmn	r0, #1
   1cd5c:	beq	1c67c <__assert_fail@plt+0xb124>
   1cd60:	ldr	r3, [r4, #-8]
   1cd64:	ldr	r2, [sp, #36]	; 0x24
   1cd68:	and	r3, r3, r2
   1cd6c:	str	r3, [r4, #-8]
   1cd70:	b	1ccfc <__assert_fail@plt+0xb7a4>
   1cd74:	ldr	r3, [r4, #-8]
   1cd78:	ldr	ip, [sp, #24]
   1cd7c:	mov	r2, fp
   1cd80:	tst	ip, r3
   1cd84:	ldr	r1, [sp, #20]
   1cd88:	mov	r0, r9
   1cd8c:	beq	1cddc <__assert_fail@plt+0xb884>
   1cd90:	ldr	r3, [r7, #20]
   1cd94:	ldr	lr, [sp, #28]
   1cd98:	add	r3, r3, r8
   1cd9c:	ldr	r3, [r3, #8]
   1cda0:	ldr	ip, [r3]
   1cda4:	cmp	lr, ip
   1cda8:	mov	r3, ip
   1cdac:	beq	1cdfc <__assert_fail@plt+0xb8a4>
   1cdb0:	ldr	ip, [sp, #208]	; 0xd0
   1cdb4:	str	ip, [sp]
   1cdb8:	bl	1c4e4 <__assert_fail@plt+0xaf8c>
   1cdbc:	cmn	r0, #1
   1cdc0:	beq	1c67c <__assert_fail@plt+0xb124>
   1cdc4:	cmp	r0, #0
   1cdc8:	beq	1cc9c <__assert_fail@plt+0xb744>
   1cdcc:	ldr	r3, [r4, #-8]
   1cdd0:	ldr	r2, [sp, #36]	; 0x24
   1cdd4:	and	r3, r3, r2
   1cdd8:	str	r3, [r4, #-8]
   1cddc:	add	r4, r4, #24
   1cde0:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1cde4:	cmp	r3, #0
   1cde8:	beq	1cc30 <__assert_fail@plt+0xb6d8>
   1cdec:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1cdf0:	cmp	r5, r3
   1cdf4:	bne	1cddc <__assert_fail@plt+0xb884>
   1cdf8:	b	1cd74 <__assert_fail@plt+0xb81c>
   1cdfc:	ldr	r3, [sp, #32]
   1ce00:	ldr	r9, [sp, #52]	; 0x34
   1ce04:	cmp	r3, #0
   1ce08:	beq	1cca0 <__assert_fail@plt+0xb748>
   1ce0c:	mvn	r0, #0
   1ce10:	b	1c5cc <__assert_fail@plt+0xb074>
   1ce14:	ldr	r3, [sp, #32]
   1ce18:	cmp	r3, #0
   1ce1c:	bne	1c67c <__assert_fail@plt+0xb124>
   1ce20:	ldr	r3, [sp, #16]
   1ce24:	cmp	r3, #0
   1ce28:	bne	1c658 <__assert_fail@plt+0xb100>
   1ce2c:	cmp	fp, #31
   1ce30:	bgt	1c910 <__assert_fail@plt+0xb3b8>
   1ce34:	ldr	r2, [sp, #68]	; 0x44
   1ce38:	ldr	r1, [sp, #36]	; 0x24
   1ce3c:	ldr	r3, [r2, #-8]
   1ce40:	and	r3, r3, r1
   1ce44:	str	r3, [r2, #-8]
   1ce48:	b	1c910 <__assert_fail@plt+0xb3b8>
   1ce4c:	ldr	r3, [sp, #32]
   1ce50:	cmp	r3, #0
   1ce54:	bne	1c67c <__assert_fail@plt+0xb124>
   1ce58:	ldr	r3, [sp, #16]
   1ce5c:	cmp	r3, #0
   1ce60:	bne	1c658 <__assert_fail@plt+0xb100>
   1ce64:	cmp	fp, #31
   1ce68:	bgt	1c7ac <__assert_fail@plt+0xb254>
   1ce6c:	ldr	r2, [sp, #92]	; 0x5c
   1ce70:	ldr	r1, [sp, #36]	; 0x24
   1ce74:	ldr	r3, [r2, #-8]
   1ce78:	and	r3, r3, r1
   1ce7c:	str	r3, [r2, #-8]
   1ce80:	b	1c7ac <__assert_fail@plt+0xb254>
   1ce84:	ldr	r3, [sp, #148]	; 0x94
   1ce88:	ldr	r3, [r3, #4]
   1ce8c:	b	1c868 <__assert_fail@plt+0xb310>
   1ce90:	ldr	r3, [sp, #32]
   1ce94:	cmp	r3, #0
   1ce98:	bne	1c67c <__assert_fail@plt+0xb124>
   1ce9c:	ldr	r3, [sp, #16]
   1cea0:	cmp	r3, #0
   1cea4:	bne	1c658 <__assert_fail@plt+0xb100>
   1cea8:	cmp	fp, #31
   1ceac:	bgt	1c618 <__assert_fail@plt+0xb0c0>
   1ceb0:	ldr	r2, [sp, #88]	; 0x58
   1ceb4:	ldr	r1, [sp, #36]	; 0x24
   1ceb8:	ldr	r3, [r2, #-8]
   1cebc:	and	r3, r3, r1
   1cec0:	str	r3, [r2, #-8]
   1cec4:	b	1c618 <__assert_fail@plt+0xb0c0>
   1cec8:	ldr	r1, [sp, #16]
   1cecc:	cmp	r1, #0
   1ced0:	beq	1c714 <__assert_fail@plt+0xb1bc>
   1ced4:	ldr	r1, [sp, #104]	; 0x68
   1ced8:	ldr	r2, [r2, r1, lsl #3]
   1cedc:	cmp	fp, r2
   1cee0:	bne	1c714 <__assert_fail@plt+0xb1bc>
   1cee4:	b	1c658 <__assert_fail@plt+0xb100>
   1cee8:	ldr	r3, [sp, #136]	; 0x88
   1ceec:	ldr	r3, [r3, #4]
   1cef0:	b	1c714 <__assert_fail@plt+0xb1bc>
   1cef4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cef8:	sub	sp, sp, #36	; 0x24
   1cefc:	ldr	fp, [r0, #108]	; 0x6c
   1cf00:	ldr	r6, [sp, #72]	; 0x48
   1cf04:	ldr	r7, [sp, #80]	; 0x50
   1cf08:	ldr	lr, [r0, #84]	; 0x54
   1cf0c:	mov	ip, fp
   1cf10:	mov	r4, #0
   1cf14:	str	lr, [sp, #12]
   1cf18:	cmp	r4, ip
   1cf1c:	bge	1cf78 <__assert_fail@plt+0xba20>
   1cf20:	add	lr, r4, ip
   1cf24:	ldr	r5, [r0, #116]	; 0x74
   1cf28:	add	lr, lr, lr, lsr #31
   1cf2c:	asr	lr, lr, #1
   1cf30:	add	r8, lr, lr, lsl #1
   1cf34:	add	r8, r5, r8, lsl #3
   1cf38:	ldr	r8, [r8, #4]
   1cf3c:	cmp	r6, r8
   1cf40:	ble	1cf68 <__assert_fail@plt+0xba10>
   1cf44:	b	1d114 <__assert_fail@plt+0xbbbc>
   1cf48:	asr	ip, ip, #1
   1cf4c:	mov	r9, ip
   1cf50:	add	r8, ip, ip, lsl #1
   1cf54:	add	r8, r5, r8, lsl #3
   1cf58:	ldr	r8, [r8, #4]
   1cf5c:	cmp	r8, r6
   1cf60:	blt	1d11c <__assert_fail@plt+0xbbc4>
   1cf64:	mov	lr, ip
   1cf68:	add	ip, r4, lr
   1cf6c:	cmp	r4, lr
   1cf70:	add	ip, ip, ip, lsr #31
   1cf74:	blt	1cf48 <__assert_fail@plt+0xb9f0>
   1cf78:	cmp	fp, r4
   1cf7c:	mvnle	r4, #0
   1cf80:	ble	1cf9c <__assert_fail@plt+0xba44>
   1cf84:	add	lr, r4, r4, lsl #1
   1cf88:	ldr	ip, [r0, #116]	; 0x74
   1cf8c:	add	ip, ip, lr, lsl #3
   1cf90:	ldr	ip, [ip, #4]
   1cf94:	cmp	r6, ip
   1cf98:	mvnne	r4, #0
   1cf9c:	mov	ip, fp
   1cfa0:	mov	r5, #0
   1cfa4:	cmp	r5, ip
   1cfa8:	bge	1d004 <__assert_fail@plt+0xbaac>
   1cfac:	add	lr, r5, ip
   1cfb0:	ldr	r8, [r0, #116]	; 0x74
   1cfb4:	add	lr, lr, lr, lsr #31
   1cfb8:	asr	lr, lr, #1
   1cfbc:	add	r9, lr, lr, lsl #1
   1cfc0:	add	r9, r8, r9, lsl #3
   1cfc4:	ldr	r9, [r9, #4]
   1cfc8:	cmp	r7, r9
   1cfcc:	ble	1cff4 <__assert_fail@plt+0xba9c>
   1cfd0:	b	1d128 <__assert_fail@plt+0xbbd0>
   1cfd4:	asr	ip, ip, #1
   1cfd8:	mov	sl, ip
   1cfdc:	add	r9, ip, ip, lsl #1
   1cfe0:	add	r9, r8, r9, lsl #3
   1cfe4:	ldr	r9, [r9, #4]
   1cfe8:	cmp	r9, r7
   1cfec:	blt	1d130 <__assert_fail@plt+0xbbd8>
   1cff0:	mov	lr, ip
   1cff4:	add	ip, r5, lr
   1cff8:	cmp	r5, lr
   1cffc:	add	ip, ip, ip, lsr #31
   1d000:	blt	1cfd4 <__assert_fail@plt+0xba7c>
   1d004:	cmp	fp, r5
   1d008:	mvnle	r5, #0
   1d00c:	ble	1d028 <__assert_fail@plt+0xbad0>
   1d010:	add	lr, r5, r5, lsl #1
   1d014:	ldr	ip, [r0, #116]	; 0x74
   1d018:	add	ip, ip, lr, lsl #3
   1d01c:	ldr	ip, [ip, #4]
   1d020:	cmp	r7, ip
   1d024:	mvnne	r5, #0
   1d028:	ldr	ip, [r1]
   1d02c:	cmp	ip, #0
   1d030:	ble	1d150 <__assert_fail@plt+0xbbf8>
   1d034:	ldr	r8, [sp, #12]
   1d038:	mov	sl, r2
   1d03c:	mov	fp, r0
   1d040:	mov	r9, #0
   1d044:	str	r3, [sp, #20]
   1d048:	str	r1, [sp, #16]
   1d04c:	str	r4, [sp, #24]
   1d050:	str	r5, [sp, #28]
   1d054:	ldr	r3, [sl]
   1d058:	ldr	r2, [fp, #116]	; 0x74
   1d05c:	lsl	r1, r9, #2
   1d060:	ldr	r3, [r3, r9, lsl #2]
   1d064:	ldr	r0, [r8]
   1d068:	str	r1, [sp, #12]
   1d06c:	add	r3, r3, r3, lsl #1
   1d070:	add	lr, r2, r3, lsl #3
   1d074:	ldr	r3, [r2, r3, lsl #3]
   1d078:	ldr	r1, [lr, #8]
   1d07c:	cmp	r6, r1
   1d080:	ldr	r5, [r0, r3, lsl #3]
   1d084:	blt	1d1b0 <__assert_fail@plt+0xbc58>
   1d088:	ldr	r3, [lr, #12]
   1d08c:	cmp	r6, r3
   1d090:	bgt	1d158 <__assert_fail@plt+0xbc00>
   1d094:	cmp	r6, r3
   1d098:	moveq	r4, #2
   1d09c:	movne	r4, #0
   1d0a0:	cmp	r6, r1
   1d0a4:	orreq	r4, r4, #1
   1d0a8:	cmp	r4, #0
   1d0ac:	bne	1d160 <__assert_fail@plt+0xbc08>
   1d0b0:	cmp	r7, r1
   1d0b4:	blt	1d108 <__assert_fail@plt+0xbbb0>
   1d0b8:	cmp	r7, r3
   1d0bc:	movgt	r1, #1
   1d0c0:	bgt	1d100 <__assert_fail@plt+0xbba8>
   1d0c4:	cmp	r7, r3
   1d0c8:	moveq	r3, #2
   1d0cc:	movne	r3, #0
   1d0d0:	cmp	r7, r1
   1d0d4:	movne	r1, r3
   1d0d8:	orreq	r1, r3, #1
   1d0dc:	cmp	r1, #0
   1d0e0:	beq	1d100 <__assert_fail@plt+0xbba8>
   1d0e4:	ldr	r3, [sp, #28]
   1d0e8:	mov	r2, r5
   1d0ec:	str	r3, [sp]
   1d0f0:	mov	r0, fp
   1d0f4:	ldr	r3, [sp, #76]	; 0x4c
   1d0f8:	bl	1c4e4 <__assert_fail@plt+0xaf8c>
   1d0fc:	mov	r1, r0
   1d100:	cmp	r1, r4
   1d104:	beq	1d13c <__assert_fail@plt+0xbbe4>
   1d108:	mov	r0, #1
   1d10c:	add	sp, sp, #36	; 0x24
   1d110:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d114:	mov	r9, lr
   1d118:	mov	lr, ip
   1d11c:	add	r4, r9, #1
   1d120:	mov	ip, lr
   1d124:	b	1cf18 <__assert_fail@plt+0xb9c0>
   1d128:	mov	sl, lr
   1d12c:	mov	lr, ip
   1d130:	add	r5, sl, #1
   1d134:	mov	ip, lr
   1d138:	b	1cfa4 <__assert_fail@plt+0xba4c>
   1d13c:	ldr	r3, [sp, #16]
   1d140:	ldr	ip, [r3]
   1d144:	add	r9, r9, #1
   1d148:	cmp	r9, ip
   1d14c:	blt	1d054 <__assert_fail@plt+0xbafc>
   1d150:	mov	r0, #0
   1d154:	b	1d10c <__assert_fail@plt+0xbbb4>
   1d158:	mov	r4, #1
   1d15c:	b	1d0b0 <__assert_fail@plt+0xbb58>
   1d160:	ldr	r3, [sp, #24]
   1d164:	mov	r1, r4
   1d168:	str	r3, [sp]
   1d16c:	mov	r2, r5
   1d170:	ldr	r3, [sp, #20]
   1d174:	mov	r0, fp
   1d178:	bl	1c4e4 <__assert_fail@plt+0xaf8c>
   1d17c:	ldr	r2, [sl]
   1d180:	lsl	r1, r9, #2
   1d184:	ldr	r3, [fp, #116]	; 0x74
   1d188:	ldr	r2, [r2, r1]
   1d18c:	add	r2, r2, r2, lsl #1
   1d190:	add	r3, r3, r2, lsl #3
   1d194:	ldr	r1, [r3, #8]
   1d198:	cmp	r7, r1
   1d19c:	mvnlt	r1, #0
   1d1a0:	mov	r4, r0
   1d1a4:	blt	1d100 <__assert_fail@plt+0xbba8>
   1d1a8:	ldr	r3, [r3, #12]
   1d1ac:	b	1d0b8 <__assert_fail@plt+0xbb60>
   1d1b0:	cmp	r7, r1
   1d1b4:	blt	1d144 <__assert_fail@plt+0xbbec>
   1d1b8:	ldr	r3, [lr, #12]
   1d1bc:	cmp	r7, r3
   1d1c0:	bgt	1d108 <__assert_fail@plt+0xbbb0>
   1d1c4:	mvn	r4, #0
   1d1c8:	b	1d0c4 <__assert_fail@plt+0xbb6c>
   1d1cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1d0:	mov	r8, r1
   1d1d4:	mov	r6, r0
   1d1d8:	ldr	r1, [r0, #28]
   1d1dc:	add	r0, r8, r8, lsl #1
   1d1e0:	sub	sp, sp, #36	; 0x24
   1d1e4:	add	r1, r1, r0, lsl #2
   1d1e8:	mov	r4, #0
   1d1ec:	str	r4, [sp, #24]
   1d1f0:	str	r4, [sp, #20]
   1d1f4:	str	r4, [sp, #28]
   1d1f8:	ldr	lr, [r1, #4]
   1d1fc:	str	r1, [sp, #12]
   1d200:	cmp	lr, r4
   1d204:	str	r3, [sp, #8]
   1d208:	ble	1d6b0 <__assert_fail@plt+0xc158>
   1d20c:	mov	r5, r1
   1d210:	str	r2, [sp]
   1d214:	ldr	r2, [r5, #8]
   1d218:	ldr	r3, [r2, r4, lsl #2]
   1d21c:	cmp	r8, r3
   1d220:	beq	1d3fc <__assert_fail@plt+0xbea4>
   1d224:	ldr	r1, [r6]
   1d228:	add	r1, r1, r3, lsl #3
   1d22c:	ldrb	r1, [r1, #4]
   1d230:	tst	r1, #8
   1d234:	beq	1d3fc <__assert_fail@plt+0xbea4>
   1d238:	add	r3, r3, r3, lsl #1
   1d23c:	ldr	r1, [r6, #20]
   1d240:	lsl	r3, r3, #2
   1d244:	str	r3, [sp, #4]
   1d248:	add	r3, r1, r3
   1d24c:	ldr	r0, [r3, #8]
   1d250:	ldr	r3, [r3, #4]
   1d254:	cmp	r3, #1
   1d258:	ldr	r1, [r0]
   1d25c:	ble	1d634 <__assert_fail@plt+0xc0dc>
   1d260:	cmp	lr, #0
   1d264:	ldr	r7, [r0, #4]
   1d268:	ble	1d2c4 <__assert_fail@plt+0xbd6c>
   1d26c:	sub	sl, lr, #1
   1d270:	mov	r9, sl
   1d274:	mov	ip, #0
   1d278:	cmp	ip, r9
   1d27c:	bcs	1d2b8 <__assert_fail@plt+0xbd60>
   1d280:	add	r0, ip, r9
   1d284:	lsr	r0, r0, #1
   1d288:	ldr	r3, [r2, r0, lsl #2]
   1d28c:	cmp	r1, r3
   1d290:	ble	1d2a8 <__assert_fail@plt+0xbd50>
   1d294:	b	1d534 <__assert_fail@plt+0xbfdc>
   1d298:	ldr	r9, [r2, r3, lsl #2]
   1d29c:	cmp	r1, r9
   1d2a0:	bgt	1d53c <__assert_fail@plt+0xbfe4>
   1d2a4:	mov	r0, r3
   1d2a8:	add	r3, ip, r0
   1d2ac:	cmp	ip, r0
   1d2b0:	lsr	r3, r3, #1
   1d2b4:	bcc	1d298 <__assert_fail@plt+0xbd40>
   1d2b8:	ldr	r3, [r2, ip, lsl #2]
   1d2bc:	cmp	r1, r3
   1d2c0:	beq	1d628 <__assert_fail@plt+0xc0d0>
   1d2c4:	ldr	r3, [sp]
   1d2c8:	ldr	fp, [r3, #4]
   1d2cc:	cmp	fp, #0
   1d2d0:	ble	1d32c <__assert_fail@plt+0xbdd4>
   1d2d4:	ldr	sl, [r3, #8]
   1d2d8:	sub	r9, fp, #1
   1d2dc:	mov	ip, #0
   1d2e0:	cmp	ip, r9
   1d2e4:	bcs	1d320 <__assert_fail@plt+0xbdc8>
   1d2e8:	add	r0, ip, r9
   1d2ec:	lsr	r0, r0, #1
   1d2f0:	ldr	r3, [sl, r0, lsl #2]
   1d2f4:	cmp	r1, r3
   1d2f8:	ble	1d310 <__assert_fail@plt+0xbdb8>
   1d2fc:	b	1d614 <__assert_fail@plt+0xc0bc>
   1d300:	ldr	r9, [sl, r3, lsl #2]
   1d304:	cmp	r1, r9
   1d308:	bgt	1d61c <__assert_fail@plt+0xc0c4>
   1d30c:	mov	r0, r3
   1d310:	add	r3, ip, r0
   1d314:	cmp	ip, r0
   1d318:	lsr	r3, r3, #1
   1d31c:	bcc	1d300 <__assert_fail@plt+0xbda8>
   1d320:	ldr	r3, [sl, ip, lsl #2]
   1d324:	cmp	r1, r3
   1d328:	beq	1d5b8 <__assert_fail@plt+0xc060>
   1d32c:	cmp	r7, #0
   1d330:	ble	1d3fc <__assert_fail@plt+0xbea4>
   1d334:	cmp	lr, #0
   1d338:	ble	1d398 <__assert_fail@plt+0xbe40>
   1d33c:	sub	sl, lr, #1
   1d340:	mov	r0, #0
   1d344:	cmp	r0, sl
   1d348:	bcs	1d384 <__assert_fail@plt+0xbe2c>
   1d34c:	add	r1, r0, sl
   1d350:	lsr	r1, r1, #1
   1d354:	ldr	r3, [r2, r1, lsl #2]
   1d358:	cmp	r3, r7
   1d35c:	bge	1d374 <__assert_fail@plt+0xbe1c>
   1d360:	b	1d5a4 <__assert_fail@plt+0xc04c>
   1d364:	ldr	ip, [r2, r3, lsl #2]
   1d368:	cmp	ip, r7
   1d36c:	blt	1d5ac <__assert_fail@plt+0xc054>
   1d370:	mov	r1, r3
   1d374:	add	r3, r0, r1
   1d378:	cmp	r0, r1
   1d37c:	lsr	r3, r3, #1
   1d380:	bcc	1d364 <__assert_fail@plt+0xbe0c>
   1d384:	ldr	r3, [r2, r0, lsl #2]
   1d388:	cmp	r3, r7
   1d38c:	beq	1d3fc <__assert_fail@plt+0xbea4>
   1d390:	ldr	r3, [sp]
   1d394:	ldr	fp, [r3, #4]
   1d398:	cmp	fp, #0
   1d39c:	ble	1d3fc <__assert_fail@plt+0xbea4>
   1d3a0:	ldr	r3, [sp]
   1d3a4:	sub	fp, fp, #1
   1d3a8:	mov	r1, #0
   1d3ac:	ldr	r0, [r3, #8]
   1d3b0:	cmp	r1, fp
   1d3b4:	bcs	1d3f0 <__assert_fail@plt+0xbe98>
   1d3b8:	add	r2, r1, fp
   1d3bc:	lsr	r2, r2, #1
   1d3c0:	ldr	r3, [r0, r2, lsl #2]
   1d3c4:	cmp	r7, r3
   1d3c8:	ble	1d3e0 <__assert_fail@plt+0xbe88>
   1d3cc:	b	1d658 <__assert_fail@plt+0xc100>
   1d3d0:	ldr	ip, [r0, r3, lsl #2]
   1d3d4:	cmp	ip, r7
   1d3d8:	blt	1d660 <__assert_fail@plt+0xc108>
   1d3dc:	mov	r2, r3
   1d3e0:	add	r3, r1, r2
   1d3e4:	cmp	r1, r2
   1d3e8:	lsr	r3, r3, #1
   1d3ec:	bcc	1d3d0 <__assert_fail@plt+0xbe78>
   1d3f0:	ldr	r3, [r0, r1, lsl #2]
   1d3f4:	cmp	r3, r7
   1d3f8:	beq	1d5b8 <__assert_fail@plt+0xc060>
   1d3fc:	add	r4, r4, #1
   1d400:	cmp	r4, lr
   1d404:	blt	1d214 <__assert_fail@plt+0xbcbc>
   1d408:	cmp	lr, #0
   1d40c:	ldr	r5, [sp]
   1d410:	ldrle	r0, [sp, #28]
   1d414:	ble	1d50c <__assert_fail@plt+0xbfb4>
   1d418:	ldr	r3, [sp, #12]
   1d41c:	mov	r7, #0
   1d420:	ldr	r0, [sp, #28]
   1d424:	ldr	r9, [r3, #8]
   1d428:	mov	sl, r7
   1d42c:	sub	r9, r9, #4
   1d430:	ldr	r4, [sp, #24]
   1d434:	ldr	r2, [r9, #4]!
   1d438:	cmp	r4, #0
   1d43c:	ble	1d494 <__assert_fail@plt+0xbf3c>
   1d440:	sub	r4, r4, #1
   1d444:	mov	ip, sl
   1d448:	cmp	ip, r4
   1d44c:	bcs	1d488 <__assert_fail@plt+0xbf30>
   1d450:	add	r1, ip, r4
   1d454:	lsr	r1, r1, #1
   1d458:	ldr	r3, [r0, r1, lsl #2]
   1d45c:	cmp	r2, r3
   1d460:	ble	1d478 <__assert_fail@plt+0xbf20>
   1d464:	b	1d520 <__assert_fail@plt+0xbfc8>
   1d468:	ldr	r4, [r0, r3, lsl #2]
   1d46c:	cmp	r2, r4
   1d470:	bgt	1d528 <__assert_fail@plt+0xbfd0>
   1d474:	mov	r1, r3
   1d478:	add	r3, r1, ip
   1d47c:	cmp	r1, ip
   1d480:	lsr	r3, r3, #1
   1d484:	bhi	1d468 <__assert_fail@plt+0xbf10>
   1d488:	ldr	r3, [r0, ip, lsl #2]
   1d48c:	cmp	r2, r3
   1d490:	beq	1d500 <__assert_fail@plt+0xbfa8>
   1d494:	ldr	r8, [r5, #4]
   1d498:	cmp	r8, #0
   1d49c:	ble	1d500 <__assert_fail@plt+0xbfa8>
   1d4a0:	sub	fp, r8, #1
   1d4a4:	ldr	r6, [r5, #8]
   1d4a8:	mov	r4, fp
   1d4ac:	mov	ip, sl
   1d4b0:	cmp	ip, r4
   1d4b4:	bcs	1d4f0 <__assert_fail@plt+0xbf98>
   1d4b8:	add	r1, ip, r4
   1d4bc:	lsr	r1, r1, #1
   1d4c0:	ldr	r3, [r6, r1, lsl #2]
   1d4c4:	cmp	r3, r2
   1d4c8:	bge	1d4e0 <__assert_fail@plt+0xbf88>
   1d4cc:	b	1d548 <__assert_fail@plt+0xbff0>
   1d4d0:	ldr	r4, [r6, r3, lsl #2]
   1d4d4:	cmp	r2, r4
   1d4d8:	bgt	1d550 <__assert_fail@plt+0xbff8>
   1d4dc:	mov	r1, r3
   1d4e0:	add	r3, ip, r1
   1d4e4:	cmp	ip, r1
   1d4e8:	lsr	r3, r3, #1
   1d4ec:	bcc	1d4d0 <__assert_fail@plt+0xbf78>
   1d4f0:	ldr	r3, [r6, ip, lsl #2]
   1d4f4:	add	r6, r6, ip, lsl #2
   1d4f8:	cmp	r2, r3
   1d4fc:	beq	1d55c <__assert_fail@plt+0xc004>
   1d500:	add	r7, r7, #1
   1d504:	cmp	r7, lr
   1d508:	blt	1d430 <__assert_fail@plt+0xbed8>
   1d50c:	bl	13c04 <__assert_fail@plt+0x26ac>
   1d510:	mov	r7, #0
   1d514:	mov	r0, r7
   1d518:	add	sp, sp, #36	; 0x24
   1d51c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d520:	mov	r3, r1
   1d524:	mov	r1, r4
   1d528:	add	ip, r3, #1
   1d52c:	mov	r4, r1
   1d530:	b	1d448 <__assert_fail@plt+0xbef0>
   1d534:	mov	r3, r0
   1d538:	mov	r0, r9
   1d53c:	add	ip, r3, #1
   1d540:	mov	r9, r0
   1d544:	b	1d278 <__assert_fail@plt+0xbd20>
   1d548:	mov	r3, r1
   1d54c:	mov	r1, r4
   1d550:	add	ip, r3, #1
   1d554:	mov	r4, r1
   1d558:	b	1d4b0 <__assert_fail@plt+0xbf58>
   1d55c:	cmp	ip, r8
   1d560:	movlt	r8, #0
   1d564:	movge	r8, #1
   1d568:	orrs	r3, r8, ip, lsr #31
   1d56c:	mov	r3, ip
   1d570:	bne	1d500 <__assert_fail@plt+0xbfa8>
   1d574:	cmp	ip, fp
   1d578:	str	fp, [r5, #4]
   1d57c:	bge	1d598 <__assert_fail@plt+0xc040>
   1d580:	ldr	r2, [r6, #4]
   1d584:	add	r3, r3, #1
   1d588:	str	r2, [r6], #4
   1d58c:	ldr	r2, [r5, #4]
   1d590:	cmp	r3, r2
   1d594:	blt	1d580 <__assert_fail@plt+0xc028>
   1d598:	ldr	r3, [sp, #12]
   1d59c:	ldr	lr, [r3, #4]
   1d5a0:	b	1d500 <__assert_fail@plt+0xbfa8>
   1d5a4:	mov	r3, r1
   1d5a8:	mov	r1, sl
   1d5ac:	add	r0, r3, #1
   1d5b0:	mov	sl, r1
   1d5b4:	b	1d344 <__assert_fail@plt+0xbdec>
   1d5b8:	ldr	r3, [sp, #8]
   1d5bc:	ldr	r3, [r3, #4]
   1d5c0:	cmp	r3, #0
   1d5c4:	beq	1d3fc <__assert_fail@plt+0xbea4>
   1d5c8:	ldr	r2, [r6, #28]
   1d5cc:	ldr	r1, [sp, #4]
   1d5d0:	add	r2, r2, r1
   1d5d4:	ldr	r0, [r2, #4]
   1d5d8:	cmp	r0, #0
   1d5dc:	beq	1d3fc <__assert_fail@plt+0xbea4>
   1d5e0:	ldr	r1, [sp, #24]
   1d5e4:	add	r3, r3, r0
   1d5e8:	ldr	r7, [sp, #20]
   1d5ec:	add	r1, r3, r1
   1d5f0:	cmp	r1, r7
   1d5f4:	bgt	1d66c <__assert_fail@plt+0xc114>
   1d5f8:	ldr	r1, [sp, #8]
   1d5fc:	add	r0, sp, #20
   1d600:	bl	18b50 <__assert_fail@plt+0x75f8>
   1d604:	cmp	r0, #0
   1d608:	bne	1d698 <__assert_fail@plt+0xc140>
   1d60c:	ldr	lr, [r5, #4]
   1d610:	b	1d3fc <__assert_fail@plt+0xbea4>
   1d614:	mov	r3, r0
   1d618:	mov	r0, r9
   1d61c:	add	ip, r3, #1
   1d620:	mov	r9, r0
   1d624:	b	1d2e0 <__assert_fail@plt+0xbd88>
   1d628:	cmp	r7, #0
   1d62c:	bgt	1d340 <__assert_fail@plt+0xbde8>
   1d630:	b	1d3fc <__assert_fail@plt+0xbea4>
   1d634:	cmp	lr, #0
   1d638:	mvngt	r7, #0
   1d63c:	bgt	1d26c <__assert_fail@plt+0xbd14>
   1d640:	ldr	r3, [sp]
   1d644:	ldr	fp, [r3, #4]
   1d648:	cmp	fp, #0
   1d64c:	ble	1d408 <__assert_fail@plt+0xbeb0>
   1d650:	mvn	r7, #0
   1d654:	b	1d2d4 <__assert_fail@plt+0xbd7c>
   1d658:	mov	r3, r2
   1d65c:	mov	r2, fp
   1d660:	add	r1, r3, #1
   1d664:	mov	fp, r2
   1d668:	b	1d3b0 <__assert_fail@plt+0xbe58>
   1d66c:	add	r7, r3, r7
   1d670:	ldr	r0, [sp, #28]
   1d674:	lsl	r1, r7, #2
   1d678:	str	r2, [sp, #4]
   1d67c:	bl	2b678 <__assert_fail@plt+0x1a120>
   1d680:	cmp	r0, #0
   1d684:	beq	1d6b8 <__assert_fail@plt+0xc160>
   1d688:	str	r0, [sp, #28]
   1d68c:	str	r7, [sp, #20]
   1d690:	ldr	r2, [sp, #4]
   1d694:	b	1d5f8 <__assert_fail@plt+0xc0a0>
   1d698:	mov	r7, r0
   1d69c:	ldr	r0, [sp, #28]
   1d6a0:	bl	13c04 <__assert_fail@plt+0x26ac>
   1d6a4:	mov	r0, r7
   1d6a8:	add	sp, sp, #36	; 0x24
   1d6ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d6b0:	mov	r0, r4
   1d6b4:	b	1d50c <__assert_fail@plt+0xbfb4>
   1d6b8:	mov	r7, #12
   1d6bc:	b	1d69c <__assert_fail@plt+0xc144>
   1d6c0:	ldr	r3, [r0, #36]	; 0x24
   1d6c4:	cmn	r3, #-536870910	; 0xe0000002
   1d6c8:	bhi	1d8c4 <__assert_fail@plt+0xc36c>
   1d6cc:	ldr	r2, [r0, #48]	; 0x30
   1d6d0:	push	{r4, r5, r6, lr}
   1d6d4:	lsl	r5, r3, #1
   1d6d8:	cmp	r5, r2
   1d6dc:	movge	r5, r2
   1d6e0:	ldr	r3, [r0, #80]	; 0x50
   1d6e4:	cmp	r5, r1
   1d6e8:	movlt	r5, r1
   1d6ec:	cmp	r3, #1
   1d6f0:	mov	r4, r0
   1d6f4:	ble	1d73c <__assert_fail@plt+0xc1e4>
   1d6f8:	cmn	r5, #-1073741823	; 0xc0000001
   1d6fc:	bhi	1d818 <__assert_fail@plt+0xc2c0>
   1d700:	lsl	r6, r5, #2
   1d704:	mov	r1, r6
   1d708:	ldr	r0, [r0, #8]
   1d70c:	bl	2b678 <__assert_fail@plt+0x1a120>
   1d710:	subs	r3, r0, #0
   1d714:	beq	1d818 <__assert_fail@plt+0xc2c0>
   1d718:	ldr	r0, [r4, #12]
   1d71c:	str	r3, [r4, #8]
   1d720:	cmp	r0, #0
   1d724:	beq	1d73c <__assert_fail@plt+0xc1e4>
   1d728:	mov	r1, r6
   1d72c:	bl	2b678 <__assert_fail@plt+0x1a120>
   1d730:	cmp	r0, #0
   1d734:	beq	1d818 <__assert_fail@plt+0xc2c0>
   1d738:	str	r0, [r4, #12]
   1d73c:	ldrb	r3, [r4, #75]	; 0x4b
   1d740:	cmp	r3, #0
   1d744:	bne	1d804 <__assert_fail@plt+0xc2ac>
   1d748:	ldr	r0, [r4, #100]	; 0x64
   1d74c:	str	r5, [r4, #36]	; 0x24
   1d750:	cmp	r0, #0
   1d754:	beq	1d770 <__assert_fail@plt+0xc218>
   1d758:	add	r1, r5, #1
   1d75c:	lsl	r1, r1, #2
   1d760:	bl	2b678 <__assert_fail@plt+0x1a120>
   1d764:	cmp	r0, #0
   1d768:	beq	1d818 <__assert_fail@plt+0xc2c0>
   1d76c:	str	r0, [r4, #100]	; 0x64
   1d770:	ldrb	r5, [r4, #72]	; 0x48
   1d774:	ldr	r3, [r4, #80]	; 0x50
   1d778:	cmp	r5, #0
   1d77c:	beq	1d794 <__assert_fail@plt+0xc23c>
   1d780:	cmp	r3, #1
   1d784:	ble	1d838 <__assert_fail@plt+0xc2e0>
   1d788:	mov	r0, r4
   1d78c:	pop	{r4, r5, r6, lr}
   1d790:	b	18274 <__assert_fail@plt+0x6d1c>
   1d794:	cmp	r3, #1
   1d798:	bgt	1d828 <__assert_fail@plt+0xc2d0>
   1d79c:	ldr	r0, [r4, #64]	; 0x40
   1d7a0:	cmp	r0, #0
   1d7a4:	popeq	{r4, r5, r6, pc}
   1d7a8:	ldr	lr, [r4, #36]	; 0x24
   1d7ac:	ldr	r2, [r4, #48]	; 0x30
   1d7b0:	ldr	r3, [r4, #28]
   1d7b4:	cmp	lr, r2
   1d7b8:	movge	lr, r2
   1d7bc:	cmp	lr, r3
   1d7c0:	bgt	1d7cc <__assert_fail@plt+0xc274>
   1d7c4:	b	1d7f4 <__assert_fail@plt+0xc29c>
   1d7c8:	ldr	r0, [r4, #64]	; 0x40
   1d7cc:	ldr	r2, [r4]
   1d7d0:	ldr	ip, [r4, #24]
   1d7d4:	add	r2, r2, r3
   1d7d8:	ldr	r1, [r4, #4]
   1d7dc:	ldrb	r2, [r2, ip]
   1d7e0:	ldrb	r2, [r0, r2]
   1d7e4:	strb	r2, [r1, r3]
   1d7e8:	add	r3, r3, #1
   1d7ec:	cmp	lr, r3
   1d7f0:	bne	1d7c8 <__assert_fail@plt+0xc270>
   1d7f4:	str	r3, [r4, #28]
   1d7f8:	str	r3, [r4, #32]
   1d7fc:	mov	r0, #0
   1d800:	pop	{r4, r5, r6, pc}
   1d804:	mov	r1, r5
   1d808:	ldr	r0, [r4, #4]
   1d80c:	bl	2b678 <__assert_fail@plt+0x1a120>
   1d810:	cmp	r0, #0
   1d814:	bne	1d820 <__assert_fail@plt+0xc2c8>
   1d818:	mov	r0, #12
   1d81c:	pop	{r4, r5, r6, pc}
   1d820:	str	r0, [r4, #4]
   1d824:	b	1d748 <__assert_fail@plt+0xc1f0>
   1d828:	mov	r0, r4
   1d82c:	bl	180d4 <__assert_fail@plt+0x6b7c>
   1d830:	mov	r0, r5
   1d834:	pop	{r4, r5, r6, pc}
   1d838:	ldr	r6, [r4, #36]	; 0x24
   1d83c:	ldr	r3, [r4, #48]	; 0x30
   1d840:	ldr	r5, [r4, #28]
   1d844:	cmp	r6, r3
   1d848:	movge	r6, r3
   1d84c:	cmp	r6, r5
   1d850:	ble	1d8cc <__assert_fail@plt+0xc374>
   1d854:	bl	113d8 <__ctype_toupper_loc@plt>
   1d858:	b	1d878 <__assert_fail@plt+0xc320>
   1d85c:	ldr	r1, [r0]
   1d860:	ldr	r2, [r4, #4]
   1d864:	ldr	r3, [r1, r3, lsl #2]
   1d868:	strb	r3, [r2, r5]
   1d86c:	add	r5, r5, #1
   1d870:	cmp	r6, r5
   1d874:	beq	1d8b4 <__assert_fail@plt+0xc35c>
   1d878:	ldr	r3, [r4]
   1d87c:	ldr	r1, [r4, #24]
   1d880:	ldr	r2, [r4, #64]	; 0x40
   1d884:	add	r3, r3, r5
   1d888:	cmp	r2, #0
   1d88c:	ldrb	r3, [r3, r1]
   1d890:	beq	1d85c <__assert_fail@plt+0xc304>
   1d894:	ldrb	r3, [r2, r3]
   1d898:	ldr	ip, [r0]
   1d89c:	ldr	r1, [r4, #4]
   1d8a0:	ldr	r3, [ip, r3, lsl #2]
   1d8a4:	strb	r3, [r1, r5]
   1d8a8:	add	r5, r5, #1
   1d8ac:	cmp	r6, r5
   1d8b0:	bne	1d878 <__assert_fail@plt+0xc320>
   1d8b4:	str	r6, [r4, #28]
   1d8b8:	str	r6, [r4, #32]
   1d8bc:	mov	r0, #0
   1d8c0:	pop	{r4, r5, r6, pc}
   1d8c4:	mov	r0, #12
   1d8c8:	bx	lr
   1d8cc:	mov	r6, r5
   1d8d0:	b	1d8b4 <__assert_fail@plt+0xc35c>
   1d8d4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8d8:	mov	r3, #0
   1d8dc:	ldr	r7, [r2, #4]
   1d8e0:	str	r3, [r0]
   1d8e4:	cmp	r7, r3
   1d8e8:	beq	1db84 <__assert_fail@plt+0xc62c>
   1d8ec:	ble	1db90 <__assert_fail@plt+0xc638>
   1d8f0:	ldr	r3, [r2, #8]
   1d8f4:	mov	r5, r7
   1d8f8:	add	lr, r3, r7, lsl #2
   1d8fc:	ldr	ip, [r3], #4
   1d900:	cmp	lr, r3
   1d904:	add	r5, r5, ip
   1d908:	bne	1d8fc <__assert_fail@plt+0xc3a4>
   1d90c:	ldr	r3, [r1, #68]	; 0x44
   1d910:	ldr	ip, [r1, #32]
   1d914:	and	r3, r3, r5
   1d918:	add	r3, r3, r3, lsl #1
   1d91c:	lsl	r3, r3, #2
   1d920:	add	lr, ip, r3
   1d924:	ldr	r6, [ip, r3]
   1d928:	cmp	r6, #0
   1d92c:	ble	1d984 <__assert_fail@plt+0xc42c>
   1d930:	ldr	lr, [lr, #8]
   1d934:	sub	sl, r7, #1
   1d938:	sub	lr, lr, #4
   1d93c:	lsl	sl, sl, #2
   1d940:	mov	r3, #0
   1d944:	b	1d954 <__assert_fail@plt+0xc3fc>
   1d948:	add	r3, r3, #1
   1d94c:	cmp	r3, r6
   1d950:	beq	1d984 <__assert_fail@plt+0xc42c>
   1d954:	ldr	r4, [lr, #4]!
   1d958:	ldr	ip, [r4]
   1d95c:	cmp	r5, ip
   1d960:	bne	1d948 <__assert_fail@plt+0xc3f0>
   1d964:	ldr	ip, [r4, #8]
   1d968:	cmp	r7, ip
   1d96c:	moveq	ip, sl
   1d970:	moveq	r8, r7
   1d974:	beq	1daec <__assert_fail@plt+0xc594>
   1d978:	add	r3, r3, #1
   1d97c:	cmp	r3, r6
   1d980:	bne	1d954 <__assert_fail@plt+0xc3fc>
   1d984:	mov	r6, r1
   1d988:	mov	r7, r0
   1d98c:	mov	r1, #1
   1d990:	mov	r0, #56	; 0x38
   1d994:	mov	r9, r2
   1d998:	bl	2b604 <__assert_fail@plt+0x1a0ac>
   1d99c:	subs	r4, r0, #0
   1d9a0:	beq	1db70 <__assert_fail@plt+0xc618>
   1d9a4:	ldr	r0, [r9, #4]
   1d9a8:	add	r8, r4, #4
   1d9ac:	cmp	r0, #0
   1d9b0:	str	r0, [r4, #8]
   1d9b4:	ble	1db0c <__assert_fail@plt+0xc5b4>
   1d9b8:	str	r0, [r4, #4]
   1d9bc:	lsl	r0, r0, #2
   1d9c0:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   1d9c4:	cmp	r0, #0
   1d9c8:	str	r0, [r4, #12]
   1d9cc:	beq	1db98 <__assert_fail@plt+0xc640>
   1d9d0:	ldr	fp, [r9, #4]
   1d9d4:	ldr	r1, [r9, #8]
   1d9d8:	lsl	sl, fp, #2
   1d9dc:	mov	r2, sl
   1d9e0:	bl	11264 <memcpy@plt>
   1d9e4:	cmp	fp, #0
   1d9e8:	str	r8, [r4, #40]	; 0x28
   1d9ec:	ble	1dab0 <__assert_fail@plt+0xc558>
   1d9f0:	ldr	ip, [r9, #8]
   1d9f4:	ldr	r9, [r6]
   1d9f8:	add	lr, ip, sl
   1d9fc:	ldr	sl, [pc, #424]	; 1dbac <__assert_fail@plt+0xc654>
   1da00:	b	1da5c <__assert_fail@plt+0xc504>
   1da04:	ldrb	r3, [r2, #6]
   1da08:	ldrb	r1, [r4, #52]	; 0x34
   1da0c:	cmp	r0, #2
   1da10:	lsr	r3, r3, #4
   1da14:	orr	r3, r3, r1, lsr #5
   1da18:	and	r3, r3, #1
   1da1c:	bic	r1, r1, #32
   1da20:	orr	r3, r1, r3, lsl #5
   1da24:	strb	r3, [r4, #52]	; 0x34
   1da28:	uxtbeq	r3, r3
   1da2c:	orreq	r3, r3, #16
   1da30:	strbeq	r3, [r4, #52]	; 0x34
   1da34:	beq	1da54 <__assert_fail@plt+0xc4fc>
   1da38:	cmp	r0, #4
   1da3c:	beq	1dafc <__assert_fail@plt+0xc5a4>
   1da40:	cmp	r0, #12
   1da44:	beq	1da9c <__assert_fail@plt+0xc544>
   1da48:	ldr	r3, [r2, #4]
   1da4c:	tst	r3, sl
   1da50:	bne	1da9c <__assert_fail@plt+0xc544>
   1da54:	cmp	lr, ip
   1da58:	beq	1dab0 <__assert_fail@plt+0xc558>
   1da5c:	ldr	r2, [ip], #4
   1da60:	add	r2, r9, r2, lsl #3
   1da64:	ldrb	r0, [r2, #4]
   1da68:	cmp	r0, #1
   1da6c:	bne	1da04 <__assert_fail@plt+0xc4ac>
   1da70:	ldr	r3, [r2, #4]
   1da74:	tst	r3, sl
   1da78:	beq	1da54 <__assert_fail@plt+0xc4fc>
   1da7c:	ldrb	r3, [r2, #6]
   1da80:	ldrb	r2, [r4, #52]	; 0x34
   1da84:	lsr	r3, r3, #4
   1da88:	orr	r3, r3, r2, lsr #5
   1da8c:	and	r3, r3, #1
   1da90:	bic	r2, r2, #32
   1da94:	orr	r3, r2, r3, lsl #5
   1da98:	strb	r3, [r4, #52]	; 0x34
   1da9c:	ldrb	r3, [r4, #52]	; 0x34
   1daa0:	cmp	lr, ip
   1daa4:	orr	r3, r3, #128	; 0x80
   1daa8:	strb	r3, [r4, #52]	; 0x34
   1daac:	bne	1da5c <__assert_fail@plt+0xc504>
   1dab0:	mov	r2, r5
   1dab4:	mov	r0, r6
   1dab8:	mov	r1, r4
   1dabc:	bl	17f98 <__assert_fail@plt+0x6a40>
   1dac0:	cmp	r0, #0
   1dac4:	bne	1db24 <__assert_fail@plt+0xc5cc>
   1dac8:	mov	r0, r4
   1dacc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dad0:	ldr	fp, [r4, #12]
   1dad4:	ldr	r9, [r2, #8]
   1dad8:	ldr	fp, [fp, ip]
   1dadc:	ldr	r9, [r9, ip]
   1dae0:	sub	ip, ip, #4
   1dae4:	cmp	fp, r9
   1dae8:	bne	1d948 <__assert_fail@plt+0xc3f0>
   1daec:	subs	r8, r8, #1
   1daf0:	bpl	1dad0 <__assert_fail@plt+0xc578>
   1daf4:	mov	r0, r4
   1daf8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dafc:	ldrb	r3, [r4, #52]	; 0x34
   1db00:	orr	r3, r3, #64	; 0x40
   1db04:	strb	r3, [r4, #52]	; 0x34
   1db08:	b	1da54 <__assert_fail@plt+0xc4fc>
   1db0c:	mov	r3, #0
   1db10:	str	r3, [r4, #4]
   1db14:	str	r3, [r8, #4]
   1db18:	str	r3, [r8, #8]
   1db1c:	str	r8, [r4, #40]	; 0x28
   1db20:	b	1dab0 <__assert_fail@plt+0xc558>
   1db24:	ldr	r0, [r4, #24]
   1db28:	bl	13c04 <__assert_fail@plt+0x26ac>
   1db2c:	ldr	r0, [r4, #36]	; 0x24
   1db30:	bl	13c04 <__assert_fail@plt+0x26ac>
   1db34:	ldr	r3, [r4, #40]	; 0x28
   1db38:	cmp	r8, r3
   1db3c:	beq	1db50 <__assert_fail@plt+0xc5f8>
   1db40:	ldr	r0, [r3, #8]
   1db44:	bl	13c04 <__assert_fail@plt+0x26ac>
   1db48:	ldr	r0, [r4, #40]	; 0x28
   1db4c:	bl	13c04 <__assert_fail@plt+0x26ac>
   1db50:	ldr	r0, [r4, #12]
   1db54:	bl	13c04 <__assert_fail@plt+0x26ac>
   1db58:	ldr	r0, [r4, #48]	; 0x30
   1db5c:	bl	13c04 <__assert_fail@plt+0x26ac>
   1db60:	ldr	r0, [r4, #44]	; 0x2c
   1db64:	bl	13c04 <__assert_fail@plt+0x26ac>
   1db68:	mov	r0, r4
   1db6c:	bl	13c04 <__assert_fail@plt+0x26ac>
   1db70:	mov	r4, #0
   1db74:	mov	r3, #12
   1db78:	str	r3, [r7]
   1db7c:	mov	r0, r4
   1db80:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db84:	mov	r4, r7
   1db88:	mov	r0, r4
   1db8c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db90:	mov	r5, r7
   1db94:	b	1d90c <__assert_fail@plt+0xc3b4>
   1db98:	str	r0, [r4, #8]
   1db9c:	str	r0, [r4, #4]
   1dba0:	mov	r0, r4
   1dba4:	bl	13c04 <__assert_fail@plt+0x26ac>
   1dba8:	b	1db70 <__assert_fail@plt+0xc618>
   1dbac:	andeq	pc, r3, r0, lsl #30
   1dbb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbb4:	mov	r6, #0
   1dbb8:	ldr	r5, [r0, #108]	; 0x6c
   1dbbc:	sub	sp, sp, #36	; 0x24
   1dbc0:	mov	r4, r5
   1dbc4:	cmp	r6, r4
   1dbc8:	bge	1dc24 <__assert_fail@plt+0xc6cc>
   1dbcc:	add	lr, r6, r4
   1dbd0:	ldr	r7, [r0, #116]	; 0x74
   1dbd4:	add	lr, lr, lr, lsr #31
   1dbd8:	asr	lr, lr, #1
   1dbdc:	add	ip, lr, lr, lsl #1
   1dbe0:	add	ip, r7, ip, lsl #3
   1dbe4:	ldr	ip, [ip, #4]
   1dbe8:	cmp	r2, ip
   1dbec:	ble	1dc14 <__assert_fail@plt+0xc6bc>
   1dbf0:	b	1df84 <__assert_fail@plt+0xca2c>
   1dbf4:	asr	ip, ip, #1
   1dbf8:	mov	r8, ip
   1dbfc:	add	r4, ip, ip, lsl #1
   1dc00:	add	r4, r7, r4, lsl #3
   1dc04:	ldr	r4, [r4, #4]
   1dc08:	cmp	r2, r4
   1dc0c:	bgt	1df8c <__assert_fail@plt+0xca34>
   1dc10:	mov	lr, ip
   1dc14:	add	ip, lr, r6
   1dc18:	cmp	lr, r6
   1dc1c:	add	ip, ip, ip, lsr #31
   1dc20:	bgt	1dbf4 <__assert_fail@plt+0xc69c>
   1dc24:	cmp	r5, r6
   1dc28:	ble	1dcf8 <__assert_fail@plt+0xc7a0>
   1dc2c:	add	ip, r6, r6, lsl #1
   1dc30:	ldr	r5, [r0, #116]	; 0x74
   1dc34:	lsl	ip, ip, #3
   1dc38:	add	lr, r5, ip
   1dc3c:	cmn	r6, #1
   1dc40:	ldr	lr, [lr, #4]
   1dc44:	movne	r6, #0
   1dc48:	moveq	r6, #1
   1dc4c:	cmp	lr, r2
   1dc50:	orrne	r6, r6, #1
   1dc54:	cmp	r6, #0
   1dc58:	bne	1dcf8 <__assert_fail@plt+0xc7a0>
   1dc5c:	ldr	r9, [r0, #84]	; 0x54
   1dc60:	mov	r7, r1
   1dc64:	mov	r8, r0
   1dc68:	str	r3, [sp, #12]
   1dc6c:	add	r3, ip, #24
   1dc70:	str	r2, [sp, #4]
   1dc74:	str	r3, [sp, #8]
   1dc78:	add	r5, r5, r3
   1dc7c:	ldr	ip, [r7, #4]
   1dc80:	cmp	ip, #0
   1dc84:	ble	1dce8 <__assert_fail@plt+0xc790>
   1dc88:	sub	ip, ip, #1
   1dc8c:	ldr	r0, [r5, #-24]	; 0xffffffe8
   1dc90:	ldr	r1, [r7, #8]
   1dc94:	mov	r4, ip
   1dc98:	mov	lr, r6
   1dc9c:	cmp	lr, r4
   1dca0:	bcs	1dcdc <__assert_fail@plt+0xc784>
   1dca4:	add	r2, lr, r4
   1dca8:	lsr	r2, r2, #1
   1dcac:	ldr	r3, [r1, r2, lsl #2]
   1dcb0:	cmp	r0, r3
   1dcb4:	ble	1dccc <__assert_fail@plt+0xc774>
   1dcb8:	b	1dd08 <__assert_fail@plt+0xc7b0>
   1dcbc:	ldr	r4, [r1, r3, lsl #2]
   1dcc0:	cmp	r0, r4
   1dcc4:	bgt	1dd10 <__assert_fail@plt+0xc7b8>
   1dcc8:	mov	r2, r3
   1dccc:	add	r3, lr, r2
   1dcd0:	cmp	lr, r2
   1dcd4:	lsr	r3, r3, #1
   1dcd8:	bcc	1dcbc <__assert_fail@plt+0xc764>
   1dcdc:	ldr	r3, [r1, lr, lsl #2]
   1dce0:	cmp	r0, r3
   1dce4:	beq	1dd1c <__assert_fail@plt+0xc7c4>
   1dce8:	add	r5, r5, #24
   1dcec:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   1dcf0:	cmp	r3, #0
   1dcf4:	bne	1dc7c <__assert_fail@plt+0xc724>
   1dcf8:	mov	sl, #0
   1dcfc:	mov	r0, sl
   1dd00:	add	sp, sp, #36	; 0x24
   1dd04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd08:	mov	r3, r2
   1dd0c:	mov	r2, r4
   1dd10:	add	lr, r3, #1
   1dd14:	mov	r4, r2
   1dd18:	b	1dc9c <__assert_fail@plt+0xc744>
   1dd1c:	ldr	r2, [sp, #4]
   1dd20:	ldr	sl, [r5, #-12]
   1dd24:	ldr	r3, [r5, #-16]
   1dd28:	add	sl, r2, sl
   1dd2c:	sub	sl, sl, r3
   1dd30:	cmp	r2, sl
   1dd34:	beq	1de64 <__assert_fail@plt+0xc90c>
   1dd38:	ldr	r2, [r8, #100]	; 0x64
   1dd3c:	ldr	r3, [r9, #12]
   1dd40:	ldr	fp, [r2, sl, lsl #2]
   1dd44:	ldr	r4, [r3, r0, lsl #2]
   1dd48:	cmp	fp, #0
   1dd4c:	beq	1df98 <__assert_fail@plt+0xca40>
   1dd50:	ldr	ip, [fp, #8]
   1dd54:	cmp	ip, #0
   1dd58:	ble	1df70 <__assert_fail@plt+0xca18>
   1dd5c:	ldr	lr, [fp, #12]
   1dd60:	sub	r0, ip, #1
   1dd64:	mov	r1, r6
   1dd68:	cmp	r1, r0
   1dd6c:	bcs	1dda8 <__assert_fail@plt+0xc850>
   1dd70:	add	r2, r1, r0
   1dd74:	lsr	r2, r2, #1
   1dd78:	ldr	r3, [lr, r2, lsl #2]
   1dd7c:	cmp	r4, r3
   1dd80:	ble	1dd98 <__assert_fail@plt+0xc840>
   1dd84:	b	1de50 <__assert_fail@plt+0xc8f8>
   1dd88:	ldr	r0, [lr, r3, lsl #2]
   1dd8c:	cmp	r4, r0
   1dd90:	bgt	1de58 <__assert_fail@plt+0xc900>
   1dd94:	mov	r2, r3
   1dd98:	add	r3, r2, r1
   1dd9c:	cmp	r2, r1
   1dda0:	lsr	r3, r3, #1
   1dda4:	bhi	1dd88 <__assert_fail@plt+0xc830>
   1dda8:	ldr	r3, [lr, r1, lsl #2]
   1ddac:	cmp	r4, r3
   1ddb0:	beq	1dce8 <__assert_fail@plt+0xc790>
   1ddb4:	lsl	r0, ip, #2
   1ddb8:	str	ip, [sp, #24]
   1ddbc:	str	ip, [sp, #20]
   1ddc0:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   1ddc4:	cmp	r0, #0
   1ddc8:	mov	r3, r0
   1ddcc:	str	r0, [sp, #28]
   1ddd0:	beq	1e010 <__assert_fail@plt+0xcab8>
   1ddd4:	ldr	r2, [fp, #8]
   1ddd8:	ldr	r1, [fp, #12]
   1dddc:	lsl	r2, r2, #2
   1dde0:	bl	11264 <memcpy@plt>
   1dde4:	mov	r3, r6
   1dde8:	mov	r1, r4
   1ddec:	add	r0, sp, #20
   1ddf0:	str	r3, [sp, #16]
   1ddf4:	bl	189a4 <__assert_fail@plt+0x744c>
   1ddf8:	ldr	r2, [sp, #16]
   1ddfc:	eor	r3, r0, #1
   1de00:	cmp	r2, #0
   1de04:	orrne	r3, r3, #1
   1de08:	tst	r3, #255	; 0xff
   1de0c:	bne	1dfc4 <__assert_fail@plt+0xca6c>
   1de10:	add	r2, sp, #20
   1de14:	mov	r1, r9
   1de18:	add	r0, sp, #16
   1de1c:	ldr	r4, [r8, #100]	; 0x64
   1de20:	bl	1d8d4 <__assert_fail@plt+0xc37c>
   1de24:	str	r0, [r4, sl, lsl #2]
   1de28:	ldr	r0, [sp, #28]
   1de2c:	bl	13c04 <__assert_fail@plt+0x26ac>
   1de30:	ldr	r3, [r8, #100]	; 0x64
   1de34:	ldr	r3, [r3, sl, lsl #2]
   1de38:	cmp	r3, #0
   1de3c:	bne	1dce8 <__assert_fail@plt+0xc790>
   1de40:	ldr	sl, [sp, #16]
   1de44:	cmp	sl, #0
   1de48:	beq	1dce8 <__assert_fail@plt+0xc790>
   1de4c:	b	1dcfc <__assert_fail@plt+0xc7a4>
   1de50:	mov	r3, r2
   1de54:	mov	r2, r0
   1de58:	add	r1, r3, #1
   1de5c:	mov	r0, r2
   1de60:	b	1dd68 <__assert_fail@plt+0xc810>
   1de64:	add	r0, r0, r0, lsl #1
   1de68:	ldr	r3, [r9, #20]
   1de6c:	mov	lr, r6
   1de70:	add	r3, r3, r0, lsl #2
   1de74:	ldr	r3, [r3, #8]
   1de78:	ldr	r4, [r3]
   1de7c:	cmp	lr, ip
   1de80:	bcs	1debc <__assert_fail@plt+0xc964>
   1de84:	add	r2, lr, ip
   1de88:	lsr	r2, r2, #1
   1de8c:	ldr	r3, [r1, r2, lsl #2]
   1de90:	cmp	r4, r3
   1de94:	ble	1deac <__assert_fail@plt+0xc954>
   1de98:	b	1df5c <__assert_fail@plt+0xca04>
   1de9c:	ldr	r0, [r1, r3, lsl #2]
   1dea0:	cmp	r4, r0
   1dea4:	bgt	1df64 <__assert_fail@plt+0xca0c>
   1dea8:	mov	r2, r3
   1deac:	add	r3, lr, r2
   1deb0:	cmp	lr, r2
   1deb4:	lsr	r3, r3, #1
   1deb8:	bcc	1de9c <__assert_fail@plt+0xc944>
   1debc:	ldr	r3, [r1, lr, lsl #2]
   1dec0:	cmp	r4, r3
   1dec4:	beq	1dce8 <__assert_fail@plt+0xc790>
   1dec8:	mov	r3, #1
   1decc:	mov	r0, #4
   1ded0:	str	r3, [sp, #20]
   1ded4:	str	r3, [sp, #24]
   1ded8:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   1dedc:	cmp	r0, #0
   1dee0:	str	r0, [sp, #28]
   1dee4:	movne	ip, r6
   1dee8:	strne	r4, [r0]
   1deec:	beq	1e020 <__assert_fail@plt+0xcac8>
   1def0:	ldr	r3, [sp, #72]	; 0x48
   1def4:	ldr	r2, [sp, #12]
   1def8:	add	r1, sp, #20
   1defc:	mov	r0, r9
   1df00:	str	ip, [sp, #16]
   1df04:	bl	1c364 <__assert_fail@plt+0xae0c>
   1df08:	ldr	sl, [sp, #24]
   1df0c:	cmp	sl, #0
   1df10:	mov	r4, r0
   1df14:	beq	1df38 <__assert_fail@plt+0xc9e0>
   1df18:	ldm	r7, {r2, r3}
   1df1c:	add	r3, r3, sl, lsl #1
   1df20:	cmp	r2, r3
   1df24:	blt	1dfe8 <__assert_fail@plt+0xca90>
   1df28:	add	r1, sp, #20
   1df2c:	mov	r0, r7
   1df30:	bl	18f28 <__assert_fail@plt+0x79d0>
   1df34:	mov	sl, r0
   1df38:	ldr	r0, [sp, #28]
   1df3c:	bl	13c04 <__assert_fail@plt+0x26ac>
   1df40:	ldr	r3, [sp, #16]
   1df44:	orr	r2, r4, r3
   1df48:	orrs	r2, r2, sl
   1df4c:	bne	1e030 <__assert_fail@plt+0xcad8>
   1df50:	ldr	r5, [r8, #116]	; 0x74
   1df54:	ldr	r3, [sp, #8]
   1df58:	b	1dc78 <__assert_fail@plt+0xc720>
   1df5c:	mov	r3, r2
   1df60:	mov	r2, ip
   1df64:	add	lr, r3, #1
   1df68:	mov	ip, r2
   1df6c:	b	1de7c <__assert_fail@plt+0xc924>
   1df70:	str	r6, [sp, #20]
   1df74:	str	r6, [sp, #24]
   1df78:	str	r6, [sp, #28]
   1df7c:	mov	r3, #0
   1df80:	b	1dde8 <__assert_fail@plt+0xc890>
   1df84:	mov	r8, lr
   1df88:	mov	lr, r4
   1df8c:	add	r6, r8, #1
   1df90:	mov	r4, lr
   1df94:	b	1dbc4 <__assert_fail@plt+0xc66c>
   1df98:	mov	r3, #1
   1df9c:	mov	r0, #4
   1dfa0:	str	r3, [sp, #20]
   1dfa4:	str	r3, [sp, #24]
   1dfa8:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   1dfac:	cmp	r0, #0
   1dfb0:	str	r0, [sp, #28]
   1dfb4:	beq	1dfd8 <__assert_fail@plt+0xca80>
   1dfb8:	str	r4, [r0]
   1dfbc:	str	fp, [sp, #16]
   1dfc0:	b	1de10 <__assert_fail@plt+0xc8b8>
   1dfc4:	ldr	r0, [sp, #28]
   1dfc8:	bl	13c04 <__assert_fail@plt+0x26ac>
   1dfcc:	ldr	sl, [sp, #16]
   1dfd0:	cmp	sl, #0
   1dfd4:	bne	1dcfc <__assert_fail@plt+0xc7a4>
   1dfd8:	mov	sl, #12
   1dfdc:	mov	r0, sl
   1dfe0:	add	sp, sp, #36	; 0x24
   1dfe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dfe8:	add	sl, sl, r2
   1dfec:	ldr	r0, [r7, #8]
   1dff0:	lsl	r1, sl, #3
   1dff4:	bl	2b678 <__assert_fail@plt+0x1a120>
   1dff8:	lsl	sl, sl, #1
   1dffc:	cmp	r0, #0
   1e000:	beq	1e048 <__assert_fail@plt+0xcaf0>
   1e004:	str	r0, [r7, #8]
   1e008:	str	sl, [r7]
   1e00c:	b	1df28 <__assert_fail@plt+0xc9d0>
   1e010:	str	r3, [sp, #24]
   1e014:	str	r3, [sp, #20]
   1e018:	mov	r3, #12
   1e01c:	b	1dde8 <__assert_fail@plt+0xc890>
   1e020:	str	r0, [sp, #24]
   1e024:	str	r0, [sp, #20]
   1e028:	mov	ip, #12
   1e02c:	b	1def0 <__assert_fail@plt+0xc998>
   1e030:	cmp	r3, #0
   1e034:	movne	sl, r3
   1e038:	bne	1dcfc <__assert_fail@plt+0xc7a4>
   1e03c:	cmp	r4, #0
   1e040:	movne	sl, r4
   1e044:	b	1dcfc <__assert_fail@plt+0xc7a4>
   1e048:	mov	sl, #12
   1e04c:	b	1df38 <__assert_fail@plt+0xc9e0>
   1e050:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e054:	mov	sl, r2
   1e058:	ldr	r2, [r0, #100]	; 0x64
   1e05c:	sub	sp, sp, #116	; 0x74
   1e060:	mov	ip, #0
   1e064:	ldr	r8, [r2, sl, lsl #2]
   1e068:	mov	r5, r3
   1e06c:	cmp	r8, ip
   1e070:	lsl	r3, sl, #2
   1e074:	str	r3, [sp, #36]	; 0x24
   1e078:	str	r0, [sp, #32]
   1e07c:	mov	fp, r1
   1e080:	ldr	r6, [r0, #84]	; 0x54
   1e084:	str	ip, [sp, #64]	; 0x40
   1e088:	ldr	r3, [r5, #4]
   1e08c:	beq	1e868 <__assert_fail@plt+0xd310>
   1e090:	add	r2, r8, #4
   1e094:	cmp	r3, ip
   1e098:	str	r2, [sp, #20]
   1e09c:	bne	1e0dc <__assert_fail@plt+0xcb84>
   1e0a0:	ldr	r3, [fp]
   1e0a4:	mov	r2, #0
   1e0a8:	str	r2, [r3, sl, lsl #2]
   1e0ac:	ldr	r3, [sp, #20]
   1e0b0:	cmp	r3, #0
   1e0b4:	beq	1e0d0 <__assert_fail@plt+0xcb78>
   1e0b8:	ldr	r3, [sp, #32]
   1e0bc:	ldr	r3, [r3, #100]	; 0x64
   1e0c0:	ldr	r3, [r3, sl, lsl #2]
   1e0c4:	ldrb	r3, [r3, #52]	; 0x34
   1e0c8:	ands	r3, r3, #64	; 0x40
   1e0cc:	bne	1e1c8 <__assert_fail@plt+0xcc70>
   1e0d0:	mov	r0, r3
   1e0d4:	add	sp, sp, #116	; 0x74
   1e0d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0dc:	add	r0, sp, #112	; 0x70
   1e0e0:	mov	r2, r5
   1e0e4:	str	ip, [r0, #-28]!	; 0xffffffe4
   1e0e8:	mov	r1, r6
   1e0ec:	bl	1d8d4 <__assert_fail@plt+0xc37c>
   1e0f0:	ldr	r3, [sp, #84]	; 0x54
   1e0f4:	cmp	r3, #0
   1e0f8:	mov	r9, r0
   1e0fc:	bne	1e0d0 <__assert_fail@plt+0xcb78>
   1e100:	ldr	r7, [r0, #28]
   1e104:	cmp	r7, #0
   1e108:	addne	r3, r0, #28
   1e10c:	strne	r3, [sp, #16]
   1e110:	bne	1e560 <__assert_fail@plt+0xd008>
   1e114:	ldr	r0, [r5, #4]
   1e118:	str	r7, [r9, #32]
   1e11c:	str	r0, [r9, #28]
   1e120:	lsl	r0, r0, #2
   1e124:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   1e128:	add	r3, r9, #28
   1e12c:	str	r3, [sp, #16]
   1e130:	cmp	r0, #0
   1e134:	str	r0, [r9, #36]	; 0x24
   1e138:	beq	1e6dc <__assert_fail@plt+0xd184>
   1e13c:	ldr	r2, [r5, #4]
   1e140:	str	r7, [sp, #84]	; 0x54
   1e144:	cmp	r2, #0
   1e148:	movgt	r4, r3
   1e14c:	strgt	r8, [sp, #24]
   1e150:	strgt	sl, [sp, #28]
   1e154:	bgt	1e198 <__assert_fail@plt+0xcc40>
   1e158:	b	1e560 <__assert_fail@plt+0xd008>
   1e15c:	ldr	r2, [r9, #32]
   1e160:	ldr	r0, [r9, #28]
   1e164:	add	r2, r2, r1, lsl #1
   1e168:	cmp	r0, r2
   1e16c:	blt	1e840 <__assert_fail@plt+0xd2e8>
   1e170:	mov	r1, r8
   1e174:	mov	r0, r4
   1e178:	bl	18f28 <__assert_fail@plt+0x79d0>
   1e17c:	cmp	r0, #0
   1e180:	str	r0, [sp, #84]	; 0x54
   1e184:	bne	1e6dc <__assert_fail@plt+0xd184>
   1e188:	ldr	r2, [r5, #4]
   1e18c:	add	r7, r7, #1
   1e190:	cmp	r7, r2
   1e194:	bge	1e558 <__assert_fail@plt+0xd000>
   1e198:	ldr	r3, [r5, #8]
   1e19c:	ldr	r1, [r6, #28]
   1e1a0:	ldr	r3, [r3, r7, lsl #2]
   1e1a4:	add	r3, r3, r3, lsl #1
   1e1a8:	adds	r8, r1, r3, lsl #2
   1e1ac:	beq	1e1bc <__assert_fail@plt+0xcc64>
   1e1b0:	ldr	r1, [r8, #4]
   1e1b4:	cmp	r1, #0
   1e1b8:	bne	1e15c <__assert_fail@plt+0xcc04>
   1e1bc:	mov	r3, #0
   1e1c0:	str	r3, [sp, #84]	; 0x54
   1e1c4:	b	1e18c <__assert_fail@plt+0xcc34>
   1e1c8:	ldr	r4, [sp, #32]
   1e1cc:	mov	r3, #0
   1e1d0:	mov	r0, r3
   1e1d4:	ldr	ip, [r4, #108]	; 0x6c
   1e1d8:	mov	r3, ip
   1e1dc:	cmp	r0, r3
   1e1e0:	bge	1e23c <__assert_fail@plt+0xcce4>
   1e1e4:	add	r2, r0, r3
   1e1e8:	ldr	lr, [r4, #116]	; 0x74
   1e1ec:	add	r2, r2, r2, lsr #31
   1e1f0:	asr	r2, r2, #1
   1e1f4:	add	r1, r2, r2, lsl #1
   1e1f8:	add	r1, lr, r1, lsl #3
   1e1fc:	ldr	r1, [r1, #4]
   1e200:	cmp	sl, r1
   1e204:	ble	1e22c <__assert_fail@plt+0xccd4>
   1e208:	b	1e544 <__assert_fail@plt+0xcfec>
   1e20c:	asr	r3, r3, #1
   1e210:	mov	r5, r3
   1e214:	add	r1, r3, r3, lsl #1
   1e218:	add	r1, lr, r1, lsl #3
   1e21c:	ldr	r1, [r1, #4]
   1e220:	cmp	sl, r1
   1e224:	bgt	1e54c <__assert_fail@plt+0xcff4>
   1e228:	mov	r2, r3
   1e22c:	add	r3, r2, r0
   1e230:	cmp	r2, r0
   1e234:	add	r3, r3, r3, lsr #31
   1e238:	bgt	1e20c <__assert_fail@plt+0xccb4>
   1e23c:	cmp	ip, r0
   1e240:	str	r0, [sp, #40]	; 0x28
   1e244:	ble	1e534 <__assert_fail@plt+0xcfdc>
   1e248:	ldr	r3, [sp, #32]
   1e24c:	add	r2, r0, r0, lsl #1
   1e250:	ldr	r3, [r3, #116]	; 0x74
   1e254:	lsl	r2, r2, #3
   1e258:	add	r3, r3, r2
   1e25c:	str	r2, [sp, #56]	; 0x38
   1e260:	ldr	r3, [r3, #4]
   1e264:	cmp	sl, r3
   1e268:	bne	1e534 <__assert_fail@plt+0xcfdc>
   1e26c:	ldr	r3, [sp, #40]	; 0x28
   1e270:	cmn	r3, #1
   1e274:	beq	1e534 <__assert_fail@plt+0xcfdc>
   1e278:	ldr	r3, [sp, #20]
   1e27c:	ldr	r2, [sp, #32]
   1e280:	ldr	r0, [r3, #4]
   1e284:	mov	r3, #0
   1e288:	cmp	r0, r3
   1e28c:	str	r3, [sp, #84]	; 0x54
   1e290:	ldr	r8, [r2, #84]	; 0x54
   1e294:	ble	1e534 <__assert_fail@plt+0xcfdc>
   1e298:	str	r3, [sp, #16]
   1e29c:	add	r3, fp, #24
   1e2a0:	str	r3, [sp, #44]	; 0x2c
   1e2a4:	add	r3, fp, #20
   1e2a8:	str	r3, [sp, #48]	; 0x30
   1e2ac:	b	1e2cc <__assert_fail@plt+0xcd74>
   1e2b0:	cmp	r3, #4
   1e2b4:	beq	1e308 <__assert_fail@plt+0xcdb0>
   1e2b8:	ldr	r3, [sp, #16]
   1e2bc:	add	r3, r3, #1
   1e2c0:	cmp	r3, r0
   1e2c4:	str	r3, [sp, #16]
   1e2c8:	bge	1e524 <__assert_fail@plt+0xcfcc>
   1e2cc:	ldr	r3, [sp, #20]
   1e2d0:	ldr	ip, [sp, #16]
   1e2d4:	ldr	r2, [fp, #8]
   1e2d8:	ldr	r1, [r3, #8]
   1e2dc:	ldr	r3, [r8]
   1e2e0:	ldr	r6, [r1, ip, lsl #2]
   1e2e4:	cmp	r6, r2
   1e2e8:	add	r3, r3, r6, lsl #3
   1e2ec:	ldrb	r3, [r3, #4]
   1e2f0:	bne	1e2b0 <__assert_fail@plt+0xcd58>
   1e2f4:	ldr	r2, [fp, #12]
   1e2f8:	cmp	sl, r2
   1e2fc:	beq	1e2b8 <__assert_fail@plt+0xcd60>
   1e300:	cmp	r3, #4
   1e304:	bne	1e2b8 <__assert_fail@plt+0xcd60>
   1e308:	ldr	r3, [sp, #32]
   1e30c:	ldr	r2, [sp, #56]	; 0x38
   1e310:	ldr	r4, [sp, #40]	; 0x28
   1e314:	ldr	r7, [r3, #116]	; 0x74
   1e318:	add	r3, r6, r6, lsl #1
   1e31c:	add	r7, r7, r2
   1e320:	lsl	r3, r3, #2
   1e324:	str	r3, [sp, #28]
   1e328:	lsl	r3, r6, #2
   1e32c:	str	r3, [sp, #24]
   1e330:	mov	r5, r2
   1e334:	b	1e350 <__assert_fail@plt+0xcdf8>
   1e338:	ldrb	r3, [r7, #20]
   1e33c:	add	r4, r4, #1
   1e340:	add	r5, r5, #24
   1e344:	cmp	r3, #0
   1e348:	add	r7, r7, #24
   1e34c:	beq	1e700 <__assert_fail@plt+0xd1a8>
   1e350:	ldr	r3, [r7]
   1e354:	cmp	r6, r3
   1e358:	bne	1e338 <__assert_fail@plt+0xcde0>
   1e35c:	ldr	r3, [r7, #8]
   1e360:	ldr	r9, [r7, #12]
   1e364:	sub	r9, r9, r3
   1e368:	cmp	r9, #0
   1e36c:	add	r9, sl, r9
   1e370:	ldreq	r3, [r8, #20]
   1e374:	ldreq	r2, [sp, #28]
   1e378:	ldrne	r3, [r8, #12]
   1e37c:	addeq	r3, r3, r2
   1e380:	ldrne	r2, [sp, #24]
   1e384:	ldreq	r3, [r3, #8]
   1e388:	ldrne	ip, [r3, r2]
   1e38c:	ldreq	ip, [r3]
   1e390:	ldr	r3, [fp, #12]
   1e394:	cmp	r9, r3
   1e398:	bgt	1e338 <__assert_fail@plt+0xcde0>
   1e39c:	ldr	r3, [fp]
   1e3a0:	ldr	r3, [r3, r9, lsl #2]
   1e3a4:	cmp	r3, #0
   1e3a8:	beq	1e338 <__assert_fail@plt+0xcde0>
   1e3ac:	ldr	r0, [r3, #8]
   1e3b0:	cmp	r0, #0
   1e3b4:	ble	1e338 <__assert_fail@plt+0xcde0>
   1e3b8:	ldr	lr, [r3, #12]
   1e3bc:	sub	r0, r0, #1
   1e3c0:	mov	r1, #0
   1e3c4:	cmp	r1, r0
   1e3c8:	bcs	1e404 <__assert_fail@plt+0xceac>
   1e3cc:	add	r2, r1, r0
   1e3d0:	lsr	r2, r2, #1
   1e3d4:	ldr	r3, [lr, r2, lsl #2]
   1e3d8:	cmp	r3, ip
   1e3dc:	bge	1e3f4 <__assert_fail@plt+0xce9c>
   1e3e0:	b	1e6ec <__assert_fail@plt+0xd194>
   1e3e4:	ldr	r0, [lr, r3, lsl #2]
   1e3e8:	cmp	ip, r0
   1e3ec:	bgt	1e6f4 <__assert_fail@plt+0xd19c>
   1e3f0:	mov	r2, r3
   1e3f4:	add	r3, r1, r2
   1e3f8:	cmp	r1, r2
   1e3fc:	lsr	r3, r3, #1
   1e400:	bcc	1e3e4 <__assert_fail@plt+0xce8c>
   1e404:	ldr	r3, [lr, r1, lsl #2]
   1e408:	cmp	ip, r3
   1e40c:	bne	1e338 <__assert_fail@plt+0xcde0>
   1e410:	str	r9, [sp, #8]
   1e414:	stm	sp, {sl, ip}
   1e418:	mov	r3, r6
   1e41c:	ldr	r2, [sp, #44]	; 0x2c
   1e420:	ldr	r1, [sp, #48]	; 0x30
   1e424:	ldr	r0, [sp, #32]
   1e428:	bl	1cef4 <__assert_fail@plt+0xb99c>
   1e42c:	cmp	r0, #0
   1e430:	bne	1e338 <__assert_fail@plt+0xcde0>
   1e434:	ldr	r3, [sp, #84]	; 0x54
   1e438:	cmp	r3, #0
   1e43c:	beq	1e7e8 <__assert_fail@plt+0xd290>
   1e440:	mov	r1, r4
   1e444:	add	r0, sp, #100	; 0x64
   1e448:	str	r6, [sp, #92]	; 0x5c
   1e44c:	str	sl, [sp, #96]	; 0x60
   1e450:	bl	189a4 <__assert_fail@plt+0x744c>
   1e454:	cmp	r0, #0
   1e458:	beq	1eaa8 <__assert_fail@plt+0xd550>
   1e45c:	ldr	r3, [sp, #84]	; 0x54
   1e460:	ldr	r2, [sp, #36]	; 0x24
   1e464:	add	r1, sp, #84	; 0x54
   1e468:	ldr	r0, [sp, #32]
   1e46c:	ldr	r3, [r3, r2]
   1e470:	str	r3, [sp, #52]	; 0x34
   1e474:	bl	1eaf0 <__assert_fail@plt+0xd598>
   1e478:	subs	ip, r0, #0
   1e47c:	bne	1e814 <__assert_fail@plt+0xd2bc>
   1e480:	ldr	r7, [fp, #4]
   1e484:	cmp	r7, #0
   1e488:	beq	1e70c <__assert_fail@plt+0xd1b4>
   1e48c:	cmp	sl, #0
   1e490:	ldr	r9, [sp, #84]	; 0x54
   1e494:	blt	1e710 <__assert_fail@plt+0xd1b8>
   1e498:	str	r4, [sp, #60]	; 0x3c
   1e49c:	mov	r4, ip
   1e4a0:	b	1e504 <__assert_fail@plt+0xcfac>
   1e4a4:	ldr	ip, [r9]
   1e4a8:	cmp	ip, #0
   1e4ac:	add	r2, ip, #4
   1e4b0:	beq	1e4f0 <__assert_fail@plt+0xcf98>
   1e4b4:	bl	18ddc <__assert_fail@plt+0x7884>
   1e4b8:	add	r2, sp, #72	; 0x48
   1e4bc:	mov	r1, r8
   1e4c0:	mov	ip, r0
   1e4c4:	cmp	ip, #0
   1e4c8:	add	r0, sp, #68	; 0x44
   1e4cc:	str	ip, [sp, #68]	; 0x44
   1e4d0:	bne	1e814 <__assert_fail@plt+0xd2bc>
   1e4d4:	bl	1d8d4 <__assert_fail@plt+0xc37c>
   1e4d8:	str	r0, [r7]
   1e4dc:	ldr	r0, [sp, #80]	; 0x50
   1e4e0:	bl	13c04 <__assert_fail@plt+0x26ac>
   1e4e4:	ldr	ip, [sp, #68]	; 0x44
   1e4e8:	cmp	ip, #0
   1e4ec:	bne	1e814 <__assert_fail@plt+0xd2bc>
   1e4f0:	add	r4, r4, #1
   1e4f4:	cmp	sl, r4
   1e4f8:	add	r7, r7, #4
   1e4fc:	add	r9, r9, #4
   1e500:	blt	1eab0 <__assert_fail@plt+0xd558>
   1e504:	ldr	r2, [r7]
   1e508:	add	r0, sp, #72	; 0x48
   1e50c:	cmp	r2, #0
   1e510:	add	r1, r2, #4
   1e514:	bne	1e4a4 <__assert_fail@plt+0xcf4c>
   1e518:	ldr	r2, [r9]
   1e51c:	str	r2, [r7]
   1e520:	b	1e4f0 <__assert_fail@plt+0xcf98>
   1e524:	ldr	r3, [sp, #84]	; 0x54
   1e528:	cmp	r3, #0
   1e52c:	movne	r3, #0
   1e530:	bne	1e824 <__assert_fail@plt+0xd2cc>
   1e534:	mov	r3, #0
   1e538:	mov	r0, r3
   1e53c:	add	sp, sp, #116	; 0x74
   1e540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e544:	mov	r5, r2
   1e548:	mov	r2, r3
   1e54c:	add	r0, r5, #1
   1e550:	mov	r3, r2
   1e554:	b	1e1dc <__assert_fail@plt+0xcc84>
   1e558:	ldr	r8, [sp, #24]
   1e55c:	ldr	sl, [sp, #28]
   1e560:	ldr	r3, [r8, #8]
   1e564:	cmp	r3, #0
   1e568:	beq	1e5e4 <__assert_fail@plt+0xd08c>
   1e56c:	ldr	r4, [r9, #32]
   1e570:	cmp	r4, #0
   1e574:	beq	1e5e4 <__assert_fail@plt+0xd08c>
   1e578:	ldr	r2, [r5, #4]
   1e57c:	add	r3, r3, r4
   1e580:	ldr	r4, [r5]
   1e584:	add	r2, r3, r2
   1e588:	cmp	r2, r4
   1e58c:	bgt	1eacc <__assert_fail@plt+0xd574>
   1e590:	ldr	r2, [sp, #16]
   1e594:	ldr	r1, [sp, #20]
   1e598:	mov	r0, r5
   1e59c:	bl	18b50 <__assert_fail@plt+0x75f8>
   1e5a0:	cmp	r0, #0
   1e5a4:	mov	r3, r0
   1e5a8:	str	r0, [sp, #64]	; 0x40
   1e5ac:	bne	1e0d0 <__assert_fail@plt+0xcb78>
   1e5b0:	ldr	r1, [fp, #20]
   1e5b4:	cmp	r1, #0
   1e5b8:	bne	1e5f8 <__assert_fail@plt+0xd0a0>
   1e5bc:	mov	r2, r5
   1e5c0:	mov	r1, r6
   1e5c4:	add	r0, sp, #64	; 0x40
   1e5c8:	ldr	r4, [fp]
   1e5cc:	bl	1d8d4 <__assert_fail@plt+0xc37c>
   1e5d0:	ldr	r3, [sp, #64]	; 0x40
   1e5d4:	cmp	r3, #0
   1e5d8:	str	r0, [r4, sl, lsl #2]
   1e5dc:	beq	1e0ac <__assert_fail@plt+0xcb54>
   1e5e0:	b	1e0d0 <__assert_fail@plt+0xcb78>
   1e5e4:	ldr	r1, [fp, #20]
   1e5e8:	mov	r3, #0
   1e5ec:	cmp	r1, #0
   1e5f0:	str	r3, [sp, #64]	; 0x40
   1e5f4:	beq	1e5bc <__assert_fail@plt+0xd064>
   1e5f8:	ldr	r3, [sp, #32]
   1e5fc:	ldr	r3, [r3, #116]	; 0x74
   1e600:	str	r3, [sp, #16]
   1e604:	ble	1e6d0 <__assert_fail@plt+0xd178>
   1e608:	mov	r9, #0
   1e60c:	ldr	r3, [fp, #24]
   1e610:	ldr	ip, [sp, #16]
   1e614:	ldr	r3, [r3, r9, lsl #2]
   1e618:	add	r3, r3, r3, lsl #1
   1e61c:	add	r2, ip, r3, lsl #3
   1e620:	ldr	r0, [r2, #8]
   1e624:	cmp	sl, r0
   1e628:	ble	1e6c4 <__assert_fail@plt+0xd16c>
   1e62c:	ldr	r0, [r2, #4]
   1e630:	cmp	sl, r0
   1e634:	bgt	1e6c4 <__assert_fail@plt+0xd16c>
   1e638:	ldr	r0, [ip, r3, lsl #3]
   1e63c:	ldr	r2, [r2, #12]
   1e640:	ldr	r3, [r6]
   1e644:	cmp	sl, r2
   1e648:	ldr	r7, [r3, r0, lsl #3]
   1e64c:	beq	1e87c <__assert_fail@plt+0xd324>
   1e650:	ldr	r0, [r5, #4]
   1e654:	cmp	r0, #0
   1e658:	ble	1e6c4 <__assert_fail@plt+0xd16c>
   1e65c:	mov	r4, #0
   1e660:	b	1e670 <__assert_fail@plt+0xd118>
   1e664:	cmp	r4, r0
   1e668:	bge	1e6c0 <__assert_fail@plt+0xd168>
   1e66c:	ldr	r3, [r6]
   1e670:	ldr	r2, [r5, #8]
   1e674:	ldr	r1, [r2, r4, lsl #2]
   1e678:	add	r4, r4, #1
   1e67c:	add	r2, r3, r1, lsl #3
   1e680:	ldrb	r2, [r2, #4]
   1e684:	sub	r2, r2, #8
   1e688:	cmp	r2, #1
   1e68c:	bhi	1e664 <__assert_fail@plt+0xd10c>
   1e690:	ldr	r3, [r3, r1, lsl #3]
   1e694:	cmp	r7, r3
   1e698:	bne	1e664 <__assert_fail@plt+0xd10c>
   1e69c:	ldr	r3, [sp, #20]
   1e6a0:	mov	r2, r5
   1e6a4:	mov	r0, r6
   1e6a8:	bl	1d1cc <__assert_fail@plt+0xbc74>
   1e6ac:	cmp	r0, #0
   1e6b0:	bne	1ea88 <__assert_fail@plt+0xd530>
   1e6b4:	ldr	r0, [r5, #4]
   1e6b8:	cmp	r4, r0
   1e6bc:	blt	1e66c <__assert_fail@plt+0xd114>
   1e6c0:	ldr	r1, [fp, #20]
   1e6c4:	add	r9, r9, #1
   1e6c8:	cmp	r9, r1
   1e6cc:	blt	1e60c <__assert_fail@plt+0xd0b4>
   1e6d0:	mov	r3, #0
   1e6d4:	str	r3, [sp, #64]	; 0x40
   1e6d8:	b	1e5bc <__assert_fail@plt+0xd064>
   1e6dc:	mov	r3, #12
   1e6e0:	mov	r0, r3
   1e6e4:	add	sp, sp, #116	; 0x74
   1e6e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6ec:	mov	r3, r2
   1e6f0:	mov	r2, r0
   1e6f4:	add	r1, r3, #1
   1e6f8:	mov	r0, r2
   1e6fc:	b	1e3c4 <__assert_fail@plt+0xce6c>
   1e700:	ldr	r3, [sp, #20]
   1e704:	ldr	r0, [r3, #4]
   1e708:	b	1e2b8 <__assert_fail@plt+0xcd60>
   1e70c:	ldr	r9, [sp, #84]	; 0x54
   1e710:	ldr	lr, [sp, #104]	; 0x68
   1e714:	ldr	r3, [sp, #36]	; 0x24
   1e718:	ldr	r2, [sp, #52]	; 0x34
   1e71c:	cmp	lr, #0
   1e720:	str	r2, [r9, r3]
   1e724:	ble	1e788 <__assert_fail@plt+0xd230>
   1e728:	sub	r7, lr, #1
   1e72c:	ldr	ip, [sp, #108]	; 0x6c
   1e730:	mov	r0, r7
   1e734:	mov	r1, #0
   1e738:	cmp	r1, r0
   1e73c:	bcs	1e778 <__assert_fail@plt+0xd220>
   1e740:	add	r2, r1, r0
   1e744:	lsr	r2, r2, #1
   1e748:	ldr	r3, [ip, r2, lsl #2]
   1e74c:	cmp	r4, r3
   1e750:	ble	1e768 <__assert_fail@plt+0xd210>
   1e754:	b	1e798 <__assert_fail@plt+0xd240>
   1e758:	ldr	r0, [ip, r3, lsl #2]
   1e75c:	cmp	r4, r0
   1e760:	bgt	1e7a0 <__assert_fail@plt+0xd248>
   1e764:	mov	r2, r3
   1e768:	add	r3, r2, r1
   1e76c:	cmp	r2, r1
   1e770:	lsr	r3, r3, #1
   1e774:	bhi	1e758 <__assert_fail@plt+0xd200>
   1e778:	ldr	r2, [ip, r1, lsl #2]
   1e77c:	add	r3, ip, r1, lsl #2
   1e780:	cmp	r4, r2
   1e784:	beq	1e7ac <__assert_fail@plt+0xd254>
   1e788:	ldr	r3, [sp, #32]
   1e78c:	ldr	r7, [r3, #116]	; 0x74
   1e790:	add	r7, r7, r5
   1e794:	b	1e338 <__assert_fail@plt+0xcde0>
   1e798:	mov	r3, r2
   1e79c:	mov	r2, r0
   1e7a0:	add	r1, r3, #1
   1e7a4:	mov	r0, r2
   1e7a8:	b	1e738 <__assert_fail@plt+0xd1e0>
   1e7ac:	cmp	lr, r1
   1e7b0:	movgt	lr, #0
   1e7b4:	movle	lr, #1
   1e7b8:	orrs	r2, lr, r1, lsr #31
   1e7bc:	bne	1e788 <__assert_fail@plt+0xd230>
   1e7c0:	cmp	r1, r7
   1e7c4:	str	r7, [sp, #104]	; 0x68
   1e7c8:	bge	1e788 <__assert_fail@plt+0xd230>
   1e7cc:	ldr	r2, [r3, #4]
   1e7d0:	add	r1, r1, #1
   1e7d4:	str	r2, [r3], #4
   1e7d8:	ldr	r2, [sp, #104]	; 0x68
   1e7dc:	cmp	r1, r2
   1e7e0:	blt	1e7cc <__assert_fail@plt+0xd274>
   1e7e4:	b	1e788 <__assert_fail@plt+0xd230>
   1e7e8:	mov	ip, fp
   1e7ec:	add	lr, sp, #84	; 0x54
   1e7f0:	ldm	ip!, {r0, r1, r2, r3}
   1e7f4:	stmia	lr!, {r0, r1, r2, r3}
   1e7f8:	ldm	ip, {r0, r1, r2}
   1e7fc:	stm	lr, {r0, r1, r2}
   1e800:	mov	r1, ip
   1e804:	add	r0, sp, #100	; 0x64
   1e808:	bl	18d64 <__assert_fail@plt+0x780c>
   1e80c:	subs	ip, r0, #0
   1e810:	beq	1e440 <__assert_fail@plt+0xcee8>
   1e814:	mov	r3, ip
   1e818:	ldr	r2, [sp, #84]	; 0x54
   1e81c:	cmp	r2, #0
   1e820:	beq	1e0d0 <__assert_fail@plt+0xcb78>
   1e824:	ldr	r0, [sp, #108]	; 0x6c
   1e828:	str	r3, [sp, #16]
   1e82c:	bl	13c04 <__assert_fail@plt+0x26ac>
   1e830:	ldr	r3, [sp, #16]
   1e834:	mov	r0, r3
   1e838:	add	sp, sp, #116	; 0x74
   1e83c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e840:	add	r2, r1, r0
   1e844:	ldr	r0, [r9, #36]	; 0x24
   1e848:	lsl	r1, r2, #3
   1e84c:	lsl	sl, r2, #1
   1e850:	bl	2b678 <__assert_fail@plt+0x1a120>
   1e854:	cmp	r0, #0
   1e858:	beq	1e6dc <__assert_fail@plt+0xd184>
   1e85c:	str	r0, [r9, #36]	; 0x24
   1e860:	str	sl, [r9, #28]
   1e864:	b	1e170 <__assert_fail@plt+0xcc18>
   1e868:	cmp	r3, #0
   1e86c:	strne	r8, [sp, #20]
   1e870:	bne	1e5bc <__assert_fail@plt+0xd064>
   1e874:	str	r3, [sp, #20]
   1e878:	b	1e0a0 <__assert_fail@plt+0xcb48>
   1e87c:	ldr	r2, [r5, #4]
   1e880:	cmp	r2, #0
   1e884:	mov	r1, r2
   1e888:	str	r2, [sp, #24]
   1e88c:	ble	1e6c0 <__assert_fail@plt+0xd168>
   1e890:	ldr	lr, [r5, #8]
   1e894:	mvn	r4, #0
   1e898:	mov	r2, lr
   1e89c:	add	r1, lr, r1, lsl #2
   1e8a0:	mov	r8, r4
   1e8a4:	str	r6, [sp, #28]
   1e8a8:	b	1e8c8 <__assert_fail@plt+0xd370>
   1e8ac:	cmp	ip, #9
   1e8b0:	bne	1e8c0 <__assert_fail@plt+0xd368>
   1e8b4:	ldr	ip, [r6]
   1e8b8:	cmp	r7, ip
   1e8bc:	moveq	r4, r0
   1e8c0:	cmp	r1, r2
   1e8c4:	beq	1e8f0 <__assert_fail@plt+0xd398>
   1e8c8:	ldr	r0, [r2], #4
   1e8cc:	add	r6, r3, r0, lsl #3
   1e8d0:	ldrb	ip, [r6, #4]
   1e8d4:	cmp	ip, #8
   1e8d8:	bne	1e8ac <__assert_fail@plt+0xd354>
   1e8dc:	ldr	ip, [r3, r0, lsl #3]
   1e8e0:	cmp	r7, ip
   1e8e4:	moveq	r8, r0
   1e8e8:	cmp	r1, r2
   1e8ec:	bne	1e8c8 <__assert_fail@plt+0xd370>
   1e8f0:	cmp	r8, #0
   1e8f4:	ldr	r6, [sp, #28]
   1e8f8:	mov	r3, r8
   1e8fc:	blt	1eabc <__assert_fail@plt+0xd564>
   1e900:	mov	r1, r8
   1e904:	ldr	r3, [sp, #20]
   1e908:	mov	r2, r5
   1e90c:	mov	r0, r6
   1e910:	bl	1d1cc <__assert_fail@plt+0xbc74>
   1e914:	cmp	r0, #0
   1e918:	bne	1ea88 <__assert_fail@plt+0xd530>
   1e91c:	cmp	r4, #0
   1e920:	blt	1e6c0 <__assert_fail@plt+0xd168>
   1e924:	ldr	r3, [r5, #4]
   1e928:	cmp	r3, #0
   1e92c:	ble	1e6c0 <__assert_fail@plt+0xd168>
   1e930:	ldr	lr, [r5, #8]
   1e934:	str	sl, [sp, #28]
   1e938:	ldr	sl, [sp, #20]
   1e93c:	str	r9, [sp, #24]
   1e940:	mov	r7, #0
   1e944:	mov	r9, r3
   1e948:	ldr	r1, [lr, r7, lsl #2]
   1e94c:	ldr	r3, [r6, #28]
   1e950:	add	r8, r1, r1, lsl #1
   1e954:	lsl	r8, r8, #2
   1e958:	add	r3, r3, r8
   1e95c:	ldr	ip, [r3, #4]
   1e960:	cmp	ip, #0
   1e964:	ble	1e9c0 <__assert_fail@plt+0xd468>
   1e968:	ldr	lr, [r3, #8]
   1e96c:	sub	ip, ip, #1
   1e970:	mov	r0, #0
   1e974:	cmp	r0, ip
   1e978:	bcs	1e9b4 <__assert_fail@plt+0xd45c>
   1e97c:	add	r2, r0, ip
   1e980:	lsr	r2, r2, #1
   1e984:	ldr	r3, [lr, r2, lsl #2]
   1e988:	cmp	r4, r3
   1e98c:	ble	1e9a4 <__assert_fail@plt+0xd44c>
   1e990:	b	1ea60 <__assert_fail@plt+0xd508>
   1e994:	ldr	ip, [lr, r3, lsl #2]
   1e998:	cmp	r4, ip
   1e99c:	bgt	1ea68 <__assert_fail@plt+0xd510>
   1e9a0:	mov	r2, r3
   1e9a4:	add	r3, r2, r0
   1e9a8:	cmp	r2, r0
   1e9ac:	lsr	r3, r3, #1
   1e9b0:	bhi	1e994 <__assert_fail@plt+0xd43c>
   1e9b4:	ldr	r3, [lr, r0, lsl #2]
   1e9b8:	cmp	r4, r3
   1e9bc:	beq	1ea4c <__assert_fail@plt+0xd4f4>
   1e9c0:	ldr	r3, [r6, #24]
   1e9c4:	add	r8, r3, r8
   1e9c8:	ldr	ip, [r8, #4]
   1e9cc:	cmp	ip, #0
   1e9d0:	ble	1ea2c <__assert_fail@plt+0xd4d4>
   1e9d4:	ldr	lr, [r8, #8]
   1e9d8:	sub	ip, ip, #1
   1e9dc:	mov	r0, #0
   1e9e0:	cmp	r0, ip
   1e9e4:	bcs	1ea20 <__assert_fail@plt+0xd4c8>
   1e9e8:	add	r2, r0, ip
   1e9ec:	lsr	r2, r2, #1
   1e9f0:	ldr	r3, [lr, r2, lsl #2]
   1e9f4:	cmp	r3, r4
   1e9f8:	bge	1ea10 <__assert_fail@plt+0xd4b8>
   1e9fc:	b	1ea74 <__assert_fail@plt+0xd51c>
   1ea00:	ldr	ip, [lr, r3, lsl #2]
   1ea04:	cmp	r4, ip
   1ea08:	bgt	1ea7c <__assert_fail@plt+0xd524>
   1ea0c:	mov	r2, r3
   1ea10:	add	r3, r0, r2
   1ea14:	cmp	r0, r2
   1ea18:	lsr	r3, r3, #1
   1ea1c:	bcc	1ea00 <__assert_fail@plt+0xd4a8>
   1ea20:	ldr	r3, [lr, r0, lsl #2]
   1ea24:	cmp	r4, r3
   1ea28:	beq	1ea4c <__assert_fail@plt+0xd4f4>
   1ea2c:	mov	r3, sl
   1ea30:	mov	r2, r5
   1ea34:	mov	r0, r6
   1ea38:	bl	1d1cc <__assert_fail@plt+0xbc74>
   1ea3c:	cmp	r0, #0
   1ea40:	bne	1ea88 <__assert_fail@plt+0xd530>
   1ea44:	ldr	r9, [r5, #4]
   1ea48:	sub	r7, r7, #1
   1ea4c:	add	r7, r7, #1
   1ea50:	cmp	r7, r9
   1ea54:	bge	1ea98 <__assert_fail@plt+0xd540>
   1ea58:	ldr	lr, [r5, #8]
   1ea5c:	b	1e948 <__assert_fail@plt+0xd3f0>
   1ea60:	mov	r3, r2
   1ea64:	mov	r2, ip
   1ea68:	add	r0, r3, #1
   1ea6c:	mov	ip, r2
   1ea70:	b	1e974 <__assert_fail@plt+0xd41c>
   1ea74:	mov	r3, r2
   1ea78:	mov	r2, ip
   1ea7c:	add	r0, r3, #1
   1ea80:	mov	ip, r2
   1ea84:	b	1e9e0 <__assert_fail@plt+0xd488>
   1ea88:	mov	r3, r0
   1ea8c:	mov	r0, r3
   1ea90:	add	sp, sp, #116	; 0x74
   1ea94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea98:	ldr	r9, [sp, #24]
   1ea9c:	ldr	sl, [sp, #28]
   1eaa0:	ldr	r1, [fp, #20]
   1eaa4:	b	1e6c4 <__assert_fail@plt+0xd16c>
   1eaa8:	mov	r3, #12
   1eaac:	b	1e818 <__assert_fail@plt+0xd2c0>
   1eab0:	ldr	r4, [sp, #60]	; 0x3c
   1eab4:	ldr	r9, [sp, #84]	; 0x54
   1eab8:	b	1e710 <__assert_fail@plt+0xd1b8>
   1eabc:	cmp	r4, #0
   1eac0:	ldrge	r3, [sp, #24]
   1eac4:	bge	1e934 <__assert_fail@plt+0xd3dc>
   1eac8:	b	1e6c0 <__assert_fail@plt+0xd168>
   1eacc:	add	r4, r3, r4
   1ead0:	ldr	r0, [r5, #8]
   1ead4:	lsl	r1, r4, #2
   1ead8:	bl	2b678 <__assert_fail@plt+0x1a120>
   1eadc:	cmp	r0, #0
   1eae0:	beq	1e6dc <__assert_fail@plt+0xd184>
   1eae4:	str	r0, [r5, #8]
   1eae8:	str	r4, [r5]
   1eaec:	b	1e590 <__assert_fail@plt+0xd038>
   1eaf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eaf4:	sub	sp, sp, #68	; 0x44
   1eaf8:	mov	r4, #1
   1eafc:	mov	r7, r0
   1eb00:	mov	r0, #4
   1eb04:	ldr	fp, [r1, #12]
   1eb08:	mov	r9, r1
   1eb0c:	ldr	r5, [r1, #8]
   1eb10:	str	r4, [sp, #52]	; 0x34
   1eb14:	str	r4, [sp, #56]	; 0x38
   1eb18:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   1eb1c:	lsl	r3, fp, #2
   1eb20:	str	r3, [sp, #20]
   1eb24:	cmp	r0, #0
   1eb28:	str	r0, [sp, #60]	; 0x3c
   1eb2c:	beq	1ef88 <__assert_fail@plt+0xda30>
   1eb30:	add	r3, sp, #52	; 0x34
   1eb34:	str	r5, [r0]
   1eb38:	mov	r2, fp
   1eb3c:	mov	r1, r9
   1eb40:	mov	r0, r7
   1eb44:	bl	1e050 <__assert_fail@plt+0xcaf8>
   1eb48:	subs	r3, r0, #0
   1eb4c:	str	r3, [sp, #40]	; 0x28
   1eb50:	bne	1ef98 <__assert_fail@plt+0xda40>
   1eb54:	cmp	fp, #0
   1eb58:	ble	1ee10 <__assert_fail@plt+0xd8b8>
   1eb5c:	str	r3, [sp, #36]	; 0x24
   1eb60:	add	r3, r9, #24
   1eb64:	str	r3, [sp, #28]
   1eb68:	add	r3, r9, #20
   1eb6c:	str	r3, [sp, #32]
   1eb70:	ldr	r3, [sp, #20]
   1eb74:	mov	sl, r9
   1eb78:	str	r4, [sp, #44]	; 0x2c
   1eb7c:	ldr	r0, [sl]
   1eb80:	ldr	r3, [r0, r3]
   1eb84:	cmp	r3, #0
   1eb88:	movne	r3, #0
   1eb8c:	ldreq	r3, [sp, #36]	; 0x24
   1eb90:	addeq	r3, r3, #1
   1eb94:	mov	r2, r3
   1eb98:	str	r3, [sp, #36]	; 0x24
   1eb9c:	ldr	r3, [r7, #120]	; 0x78
   1eba0:	cmp	r2, r3
   1eba4:	bgt	1efa0 <__assert_fail@plt+0xda48>
   1eba8:	mov	r2, #0
   1ebac:	ldr	r3, [r7, #100]	; 0x64
   1ebb0:	str	r2, [sp, #56]	; 0x38
   1ebb4:	ldr	r2, [sp, #20]
   1ebb8:	sub	fp, fp, #1
   1ebbc:	add	r3, r3, r2
   1ebc0:	ldr	r6, [r3, #-4]
   1ebc4:	cmp	r6, #0
   1ebc8:	beq	1ede0 <__assert_fail@plt+0xd888>
   1ebcc:	ldr	r3, [r6, #20]
   1ebd0:	ldr	r2, [r7, #84]	; 0x54
   1ebd4:	cmp	r3, #0
   1ebd8:	mov	r1, r2
   1ebdc:	str	r2, [sp, #16]
   1ebe0:	ble	1ede0 <__assert_fail@plt+0xd888>
   1ebe4:	ldr	r2, [r6, #24]
   1ebe8:	ldr	r3, [r1]
   1ebec:	mov	r4, #0
   1ebf0:	ldr	r5, [r2]
   1ebf4:	lsl	r8, r5, #3
   1ebf8:	add	r3, r3, r8
   1ebfc:	ldrb	r1, [r3, #6]
   1ec00:	ldrb	r2, [r3, #4]
   1ec04:	tst	r1, #16
   1ec08:	bne	1ee5c <__assert_fail@plt+0xd904>
   1ec0c:	ldr	r1, [r7, #4]
   1ec10:	sub	r2, r2, #1
   1ec14:	ldrb	r1, [r1, fp]
   1ec18:	cmp	r2, #6
   1ec1c:	ldrls	pc, [pc, r2, lsl #2]
   1ec20:	b	1ee24 <__assert_fail@plt+0xd8cc>
   1ec24:	andeq	lr, r1, r8, lsl lr
   1ec28:	andeq	lr, r1, r4, lsr #28
   1ec2c:			; <UNDEFINED> instruction: 0x0001edb4
   1ec30:	andeq	lr, r1, r4, lsr #28
   1ec34:	andeq	lr, r1, r8, asr #24
   1ec38:	andeq	lr, r1, r4, lsr #28
   1ec3c:	andeq	lr, r1, r0, asr #24
   1ec40:	tst	r1, #128	; 0x80
   1ec44:	bne	1ee24 <__assert_fail@plt+0xd8cc>
   1ec48:	cmp	r1, #10
   1ec4c:	beq	1ef6c <__assert_fail@plt+0xda14>
   1ec50:	cmp	r1, #0
   1ec54:	bne	1ec68 <__assert_fail@plt+0xd710>
   1ec58:	ldr	r2, [r7, #84]	; 0x54
   1ec5c:	ldr	r2, [r2, #128]	; 0x80
   1ec60:	tst	r2, #128	; 0x80
   1ec64:	bne	1ee24 <__assert_fail@plt+0xd8cc>
   1ec68:	ldr	r8, [r3, #4]
   1ec6c:	ldr	r3, [pc, #848]	; 1efc4 <__assert_fail@plt+0xda6c>
   1ec70:	tst	r8, r3
   1ec74:	beq	1ecc8 <__assert_fail@plt+0xd770>
   1ec78:	ldr	r2, [r7, #88]	; 0x58
   1ec7c:	mov	r1, fp
   1ec80:	mov	r0, r7
   1ec84:	bl	1906c <__assert_fail@plt+0x7b14>
   1ec88:	ldr	r3, [pc, #824]	; 1efc8 <__assert_fail@plt+0xda70>
   1ec8c:	and	r8, r3, r8, lsr #8
   1ec90:	tst	r8, #4
   1ec94:	beq	1ef58 <__assert_fail@plt+0xda00>
   1ec98:	tst	r0, #1
   1ec9c:	beq	1ee24 <__assert_fail@plt+0xd8cc>
   1eca0:	tst	r8, #8
   1eca4:	bne	1ee24 <__assert_fail@plt+0xd8cc>
   1eca8:	tst	r8, #32
   1ecac:	beq	1ecb8 <__assert_fail@plt+0xd760>
   1ecb0:	tst	r0, #2
   1ecb4:	beq	1ee24 <__assert_fail@plt+0xd8cc>
   1ecb8:	tst	r8, #128	; 0x80
   1ecbc:	beq	1ecc8 <__assert_fail@plt+0xd770>
   1ecc0:	tst	r0, #8
   1ecc4:	beq	1ee24 <__assert_fail@plt+0xd8cc>
   1ecc8:	ldr	r3, [sl]
   1eccc:	ldr	r2, [sp, #20]
   1ecd0:	ldr	r3, [r3, r2]
   1ecd4:	cmp	r3, #0
   1ecd8:	beq	1ee24 <__assert_fail@plt+0xd8cc>
   1ecdc:	ldr	lr, [r3, #8]
   1ece0:	ldr	r2, [sp, #16]
   1ece4:	cmp	lr, #0
   1ece8:	ldr	r2, [r2, #12]
   1ecec:	ble	1ee24 <__assert_fail@plt+0xd8cc>
   1ecf0:	ldr	r0, [r2, r5, lsl #2]
   1ecf4:	ldr	ip, [r3, #12]
   1ecf8:	sub	lr, lr, #1
   1ecfc:	mov	r1, #0
   1ed00:	cmp	r1, lr
   1ed04:	bcs	1ed40 <__assert_fail@plt+0xd7e8>
   1ed08:	add	r2, r1, lr
   1ed0c:	lsr	r2, r2, #1
   1ed10:	ldr	r3, [ip, r2, lsl #2]
   1ed14:	cmp	r3, r0
   1ed18:	bge	1ed30 <__assert_fail@plt+0xd7d8>
   1ed1c:	b	1ef28 <__assert_fail@plt+0xd9d0>
   1ed20:	ldr	lr, [ip, r3, lsl #2]
   1ed24:	cmp	r0, lr
   1ed28:	bgt	1ef30 <__assert_fail@plt+0xd9d8>
   1ed2c:	mov	r2, r3
   1ed30:	add	r3, r2, r1
   1ed34:	cmp	r2, r1
   1ed38:	lsr	r3, r3, #1
   1ed3c:	bhi	1ed20 <__assert_fail@plt+0xd7c8>
   1ed40:	ldr	r3, [ip, r1, lsl #2]
   1ed44:	cmp	r0, r3
   1ed48:	bne	1ee24 <__assert_fail@plt+0xd8cc>
   1ed4c:	ldr	r0, [sp, #44]	; 0x2c
   1ed50:	ldr	r3, [sl, #20]
   1ed54:	cmp	r3, #0
   1ed58:	beq	1ed88 <__assert_fail@plt+0xd830>
   1ed5c:	ldr	r3, [sp, #16]
   1ed60:	add	r0, fp, r0
   1ed64:	ldr	r2, [sp, #28]
   1ed68:	ldr	r3, [r3, #12]
   1ed6c:	ldr	r1, [sp, #32]
   1ed70:	ldr	r3, [r3, r5, lsl #2]
   1ed74:	stm	sp, {r0, r5, fp}
   1ed78:	mov	r0, r7
   1ed7c:	bl	1cef4 <__assert_fail@plt+0xb99c>
   1ed80:	cmp	r0, #0
   1ed84:	bne	1ee24 <__assert_fail@plt+0xd8cc>
   1ed88:	mov	r1, r5
   1ed8c:	add	r0, sp, #52	; 0x34
   1ed90:	bl	189a4 <__assert_fail@plt+0x744c>
   1ed94:	cmp	r0, #0
   1ed98:	bne	1ee24 <__assert_fail@plt+0xd8cc>
   1ed9c:	mov	r4, #12
   1eda0:	ldr	r0, [sp, #60]	; 0x3c
   1eda4:	bl	13c04 <__assert_fail@plt+0x26ac>
   1eda8:	mov	r0, r4
   1edac:	add	sp, sp, #68	; 0x44
   1edb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1edb4:	ldr	r2, [r3]
   1edb8:	asr	r0, r1, #5
   1edbc:	and	r1, r1, #31
   1edc0:	ldr	r2, [r2, r0, lsl #2]
   1edc4:	lsr	r1, r2, r1
   1edc8:	tst	r1, #1
   1edcc:	bne	1ec68 <__assert_fail@plt+0xd710>
   1edd0:	ldr	r3, [r6, #20]
   1edd4:	add	r4, r4, #1
   1edd8:	cmp	r4, r3
   1eddc:	blt	1ee34 <__assert_fail@plt+0xd8dc>
   1ede0:	add	r3, sp, #52	; 0x34
   1ede4:	mov	r2, fp
   1ede8:	mov	r1, sl
   1edec:	mov	r0, r7
   1edf0:	bl	1e050 <__assert_fail@plt+0xcaf8>
   1edf4:	cmp	r0, #0
   1edf8:	bne	1ef80 <__assert_fail@plt+0xda28>
   1edfc:	ldr	r3, [sp, #20]
   1ee00:	cmp	fp, #0
   1ee04:	sub	r3, r3, #4
   1ee08:	str	r3, [sp, #20]
   1ee0c:	bne	1eb7c <__assert_fail@plt+0xd624>
   1ee10:	ldr	r4, [sp, #40]	; 0x28
   1ee14:	b	1eda0 <__assert_fail@plt+0xd848>
   1ee18:	ldrb	r2, [r3]
   1ee1c:	cmp	r2, r1
   1ee20:	beq	1ec68 <__assert_fail@plt+0xd710>
   1ee24:	ldr	r3, [r6, #20]
   1ee28:	add	r4, r4, #1
   1ee2c:	cmp	r4, r3
   1ee30:	bge	1ede0 <__assert_fail@plt+0xd888>
   1ee34:	ldr	r2, [r6, #24]
   1ee38:	ldr	r3, [sp, #16]
   1ee3c:	ldr	r5, [r2, r4, lsl #2]
   1ee40:	ldr	r3, [r3]
   1ee44:	lsl	r8, r5, #3
   1ee48:	add	r3, r3, r8
   1ee4c:	ldrb	r1, [r3, #6]
   1ee50:	ldrb	r2, [r3, #4]
   1ee54:	tst	r1, #16
   1ee58:	beq	1ec0c <__assert_fail@plt+0xd6b4>
   1ee5c:	ldr	r9, [r7, #84]	; 0x54
   1ee60:	mov	r3, r7
   1ee64:	add	r1, r9, #128	; 0x80
   1ee68:	ldr	r0, [r9]
   1ee6c:	str	fp, [sp]
   1ee70:	ldr	ip, [sl, #12]
   1ee74:	mov	r2, r5
   1ee78:	str	ip, [sp, #24]
   1ee7c:	bl	1ab48 <__assert_fail@plt+0x95f0>
   1ee80:	cmp	r0, #0
   1ee84:	ble	1ef50 <__assert_fail@plt+0xd9f8>
   1ee88:	ldr	ip, [sp, #24]
   1ee8c:	add	r3, fp, r0
   1ee90:	cmp	ip, r3
   1ee94:	blt	1ed50 <__assert_fail@plt+0xd7f8>
   1ee98:	ldr	r2, [sl]
   1ee9c:	ldr	r3, [r2, r3, lsl #2]
   1eea0:	cmp	r3, #0
   1eea4:	beq	1ef14 <__assert_fail@plt+0xd9bc>
   1eea8:	ldr	ip, [r3, #8]
   1eeac:	ldr	r2, [r9, #12]
   1eeb0:	cmp	ip, #0
   1eeb4:	ble	1ef14 <__assert_fail@plt+0xd9bc>
   1eeb8:	ldr	lr, [r2, r5, lsl #2]
   1eebc:	ldr	r9, [r3, #12]
   1eec0:	sub	ip, ip, #1
   1eec4:	mov	r1, #0
   1eec8:	cmp	r1, ip
   1eecc:	bcs	1ef08 <__assert_fail@plt+0xd9b0>
   1eed0:	add	r2, r1, ip
   1eed4:	lsr	r2, r2, #1
   1eed8:	ldr	r3, [r9, r2, lsl #2]
   1eedc:	cmp	r3, lr
   1eee0:	bge	1eef8 <__assert_fail@plt+0xd9a0>
   1eee4:	b	1ef3c <__assert_fail@plt+0xd9e4>
   1eee8:	ldr	ip, [r9, r3, lsl #2]
   1eeec:	cmp	lr, ip
   1eef0:	bgt	1ef44 <__assert_fail@plt+0xd9ec>
   1eef4:	mov	r2, r3
   1eef8:	add	r3, r1, r2
   1eefc:	cmp	r1, r2
   1ef00:	lsr	r3, r3, #1
   1ef04:	bcc	1eee8 <__assert_fail@plt+0xd990>
   1ef08:	ldr	r3, [r9, r1, lsl #2]
   1ef0c:	cmp	lr, r3
   1ef10:	beq	1ed50 <__assert_fail@plt+0xd7f8>
   1ef14:	ldr	r3, [sp, #16]
   1ef18:	ldr	r3, [r3]
   1ef1c:	add	r3, r3, r8
   1ef20:	ldrb	r2, [r3, #4]
   1ef24:	b	1ec0c <__assert_fail@plt+0xd6b4>
   1ef28:	mov	r3, r2
   1ef2c:	mov	r2, lr
   1ef30:	add	r1, r3, #1
   1ef34:	mov	lr, r2
   1ef38:	b	1ed00 <__assert_fail@plt+0xd7a8>
   1ef3c:	mov	r3, r2
   1ef40:	mov	r2, ip
   1ef44:	add	r1, r3, #1
   1ef48:	mov	ip, r2
   1ef4c:	b	1eec8 <__assert_fail@plt+0xd970>
   1ef50:	beq	1ef14 <__assert_fail@plt+0xd9bc>
   1ef54:	b	1ed50 <__assert_fail@plt+0xd7f8>
   1ef58:	tst	r8, #8
   1ef5c:	beq	1eca8 <__assert_fail@plt+0xd750>
   1ef60:	tst	r0, #1
   1ef64:	beq	1eca8 <__assert_fail@plt+0xd750>
   1ef68:	b	1ee24 <__assert_fail@plt+0xd8cc>
   1ef6c:	ldr	r2, [r7, #84]	; 0x54
   1ef70:	ldr	r2, [r2, #128]	; 0x80
   1ef74:	tst	r2, #64	; 0x40
   1ef78:	bne	1ec68 <__assert_fail@plt+0xd710>
   1ef7c:	b	1ee24 <__assert_fail@plt+0xd8cc>
   1ef80:	mov	r4, r0
   1ef84:	b	1eda0 <__assert_fail@plt+0xd848>
   1ef88:	mov	r4, #12
   1ef8c:	mov	r0, r4
   1ef90:	add	sp, sp, #68	; 0x44
   1ef94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef98:	mov	r4, r3
   1ef9c:	b	1eda0 <__assert_fail@plt+0xd848>
   1efa0:	ldr	r2, [sp, #20]
   1efa4:	mov	r1, #0
   1efa8:	bl	1145c <memset@plt>
   1efac:	ldr	r0, [sp, #60]	; 0x3c
   1efb0:	ldr	r4, [sp, #40]	; 0x28
   1efb4:	bl	13c04 <__assert_fail@plt+0x26ac>
   1efb8:	mov	r0, r4
   1efbc:	add	sp, sp, #68	; 0x44
   1efc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efc4:	andeq	pc, r3, r0, lsl #30
   1efc8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1efcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1efd0:	sub	sp, sp, #44	; 0x2c
   1efd4:	mov	r6, r0
   1efd8:	mov	fp, r1
   1efdc:	mov	r9, #0
   1efe0:	mov	r1, #1
   1efe4:	mov	r0, #32
   1efe8:	mov	sl, r2
   1efec:	mov	r5, r3
   1eff0:	str	r9, [sp, #20]
   1eff4:	ldrb	r8, [sp, #80]	; 0x50
   1eff8:	bl	2b604 <__assert_fail@plt+0x1a0ac>
   1effc:	subs	r4, r0, #0
   1f000:	beq	1f358 <__assert_fail@plt+0xde00>
   1f004:	mov	r1, #1
   1f008:	mov	r0, #40	; 0x28
   1f00c:	bl	2b604 <__assert_fail@plt+0x1a0ac>
   1f010:	subs	r7, r0, #0
   1f014:	beq	1f374 <__assert_fail@plt+0xde1c>
   1f018:	ldrb	r2, [r7, #16]
   1f01c:	and	r3, r8, #1
   1f020:	mov	r0, fp
   1f024:	bic	r2, r2, #1
   1f028:	orr	r3, r3, r2
   1f02c:	add	r2, sp, #20
   1f030:	strb	r3, [r7, #16]
   1f034:	mov	r1, r4
   1f038:	stm	sp, {r2, sl}
   1f03c:	add	r3, r7, #36	; 0x24
   1f040:	str	r9, [sp, #8]
   1f044:	add	r2, r7, #12
   1f048:	bl	19e28 <__assert_fail@plt+0x88d0>
   1f04c:	subs	sl, r0, #0
   1f050:	bne	1f390 <__assert_fail@plt+0xde38>
   1f054:	ldrb	r3, [r5]
   1f058:	cmp	r3, #0
   1f05c:	movne	ip, #1
   1f060:	beq	1f084 <__assert_fail@plt+0xdb2c>
   1f064:	asr	r1, r3, #5
   1f068:	and	r0, r3, #31
   1f06c:	ldr	r2, [r4, r1, lsl #2]
   1f070:	ldrb	r3, [r5, #1]!
   1f074:	orr	r2, r2, ip, lsl r0
   1f078:	cmp	r3, #0
   1f07c:	str	r2, [r4, r1, lsl #2]
   1f080:	bne	1f064 <__assert_fail@plt+0xdb0c>
   1f084:	cmp	r8, #0
   1f088:	bne	1f250 <__assert_fail@plt+0xdcf8>
   1f08c:	ldr	r3, [r6, #92]	; 0x5c
   1f090:	cmp	r3, #1
   1f094:	ble	1f118 <__assert_fail@plt+0xdbc0>
   1f098:	ldr	r3, [r6, #60]	; 0x3c
   1f09c:	ldm	r4, {r1, r2}
   1f0a0:	ldr	r0, [r4, #8]
   1f0a4:	ldr	ip, [r3]
   1f0a8:	and	r1, r1, ip
   1f0ac:	str	r1, [r4]
   1f0b0:	ldr	ip, [r3, #4]
   1f0b4:	ldr	r1, [r4, #12]
   1f0b8:	and	r2, r2, ip
   1f0bc:	str	r2, [r4, #4]
   1f0c0:	ldr	ip, [r3, #8]
   1f0c4:	ldr	r2, [r4, #16]
   1f0c8:	and	r0, r0, ip
   1f0cc:	str	r0, [r4, #8]
   1f0d0:	ldr	ip, [r3, #12]
   1f0d4:	ldr	r0, [r4, #20]
   1f0d8:	and	r1, r1, ip
   1f0dc:	str	r1, [r4, #12]
   1f0e0:	ldr	ip, [r3, #16]
   1f0e4:	ldr	r1, [r4, #24]
   1f0e8:	and	r2, r2, ip
   1f0ec:	str	r2, [r4, #16]
   1f0f0:	ldr	ip, [r3, #20]
   1f0f4:	ldr	r2, [r4, #28]
   1f0f8:	and	r0, r0, ip
   1f0fc:	str	r0, [r4, #20]
   1f100:	ldr	r0, [r3, #24]
   1f104:	and	r1, r1, r0
   1f108:	str	r1, [r4, #24]
   1f10c:	ldr	r3, [r3, #28]
   1f110:	and	r3, r3, r2
   1f114:	str	r3, [r4, #28]
   1f118:	ldr	r3, [r6, #64]	; 0x40
   1f11c:	add	r8, sp, #24
   1f120:	mov	r5, #0
   1f124:	cmp	r3, #31
   1f128:	str	r5, [r8, #4]
   1f12c:	beq	1f3cc <__assert_fail@plt+0xde74>
   1f130:	lsl	ip, r3, #5
   1f134:	add	lr, r3, #1
   1f138:	ldr	r3, [r6, #56]	; 0x38
   1f13c:	add	r9, ip, #4
   1f140:	mov	r2, #3
   1f144:	add	ip, r3, ip
   1f148:	str	r4, [sp, #24]
   1f14c:	strb	r2, [sp, #28]
   1f150:	ldm	r8, {r0, r1}
   1f154:	add	sl, ip, #24
   1f158:	mov	r5, #0
   1f15c:	str	lr, [r6, #64]	; 0x40
   1f160:	str	r5, [ip, #4]
   1f164:	str	r5, [ip, #8]
   1f168:	str	r5, [ip, #12]
   1f16c:	stm	sl, {r0, r1}
   1f170:	ldrb	r2, [ip, #30]
   1f174:	mvn	r1, #0
   1f178:	adds	r9, r3, r9
   1f17c:	and	r2, r2, #243	; 0xf3
   1f180:	str	r5, [ip, #16]
   1f184:	str	r5, [ip, #20]
   1f188:	strb	r2, [ip, #30]
   1f18c:	str	r1, [ip, #32]
   1f190:	beq	1f2d8 <__assert_fail@plt+0xdd80>
   1f194:	ldr	r2, [r6, #92]	; 0x5c
   1f198:	cmp	r2, #1
   1f19c:	ble	1f324 <__assert_fail@plt+0xddcc>
   1f1a0:	ldrb	r2, [r6, #88]	; 0x58
   1f1a4:	ldr	r1, [r6, #64]	; 0x40
   1f1a8:	orr	r2, r2, #2
   1f1ac:	cmp	r1, #31
   1f1b0:	strb	r2, [r6, #88]	; 0x58
   1f1b4:	beq	1f2ac <__assert_fail@plt+0xdd54>
   1f1b8:	lsl	ip, r1, #5
   1f1bc:	add	r2, r1, #1
   1f1c0:	add	r5, ip, #4
   1f1c4:	mov	r1, #6
   1f1c8:	add	ip, r3, ip
   1f1cc:	str	r7, [sp, #24]
   1f1d0:	strb	r1, [sp, #28]
   1f1d4:	ldm	r8, {r0, r1}
   1f1d8:	add	r8, ip, #24
   1f1dc:	mov	lr, #0
   1f1e0:	str	r2, [r6, #64]	; 0x40
   1f1e4:	str	lr, [ip, #4]
   1f1e8:	str	lr, [ip, #8]
   1f1ec:	str	lr, [ip, #12]
   1f1f0:	stm	r8, {r0, r1}
   1f1f4:	ldrb	r2, [ip, #30]
   1f1f8:	mvn	r1, #0
   1f1fc:	adds	r3, r3, r5
   1f200:	and	r2, r2, #243	; 0xf3
   1f204:	str	lr, [ip, #16]
   1f208:	str	lr, [ip, #20]
   1f20c:	strb	r2, [ip, #30]
   1f210:	str	r1, [ip, #32]
   1f214:	beq	1f2d8 <__assert_fail@plt+0xdd80>
   1f218:	add	ip, sp, #32
   1f21c:	mov	r2, r9
   1f220:	str	ip, [sp]
   1f224:	mov	r4, #10
   1f228:	add	r1, r6, #64	; 0x40
   1f22c:	add	r0, r6, #56	; 0x38
   1f230:	str	lr, [sp, #36]	; 0x24
   1f234:	str	lr, [sp, #32]
   1f238:	strb	r4, [sp, #36]	; 0x24
   1f23c:	bl	18ca0 <__assert_fail@plt+0x7748>
   1f240:	mov	r9, r0
   1f244:	mov	r0, r9
   1f248:	add	sp, sp, #44	; 0x2c
   1f24c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f250:	ldm	r4, {r2, r3, lr}
   1f254:	ldr	ip, [r4, #12]
   1f258:	ldr	r0, [r4, #16]
   1f25c:	mvn	r2, r2
   1f260:	mvn	r3, r3
   1f264:	ldr	r1, [r4, #20]
   1f268:	str	r2, [r4]
   1f26c:	str	r3, [r4, #4]
   1f270:	ldr	r2, [r4, #24]
   1f274:	ldr	r3, [r4, #28]
   1f278:	mvn	lr, lr
   1f27c:	mvn	ip, ip
   1f280:	mvn	r0, r0
   1f284:	mvn	r1, r1
   1f288:	mvn	r2, r2
   1f28c:	mvn	r3, r3
   1f290:	str	lr, [r4, #8]
   1f294:	str	ip, [r4, #12]
   1f298:	str	r0, [r4, #16]
   1f29c:	str	r1, [r4, #20]
   1f2a0:	str	r2, [r4, #24]
   1f2a4:	str	r3, [r4, #28]
   1f2a8:	b	1f08c <__assert_fail@plt+0xdb34>
   1f2ac:	mov	r0, #996	; 0x3e4
   1f2b0:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   1f2b4:	subs	r3, r0, #0
   1f2b8:	beq	1f2d8 <__assert_fail@plt+0xdd80>
   1f2bc:	ldr	r1, [r6, #56]	; 0x38
   1f2c0:	mov	ip, r5
   1f2c4:	mov	r2, #1
   1f2c8:	mov	r5, #4
   1f2cc:	str	r1, [r3]
   1f2d0:	str	r3, [r6, #56]	; 0x38
   1f2d4:	b	1f1c4 <__assert_fail@plt+0xdc6c>
   1f2d8:	mov	r0, r4
   1f2dc:	bl	13c04 <__assert_fail@plt+0x26ac>
   1f2e0:	ldr	r0, [r7]
   1f2e4:	bl	13c04 <__assert_fail@plt+0x26ac>
   1f2e8:	ldr	r0, [r7, #4]
   1f2ec:	bl	13c04 <__assert_fail@plt+0x26ac>
   1f2f0:	ldr	r0, [r7, #8]
   1f2f4:	bl	13c04 <__assert_fail@plt+0x26ac>
   1f2f8:	ldr	r0, [r7, #12]
   1f2fc:	bl	13c04 <__assert_fail@plt+0x26ac>
   1f300:	mov	r0, r7
   1f304:	bl	13c04 <__assert_fail@plt+0x26ac>
   1f308:	ldr	r2, [sp, #84]	; 0x54
   1f30c:	mov	r9, #0
   1f310:	mov	r3, #12
   1f314:	mov	r0, r9
   1f318:	str	r3, [r2]
   1f31c:	add	sp, sp, #44	; 0x2c
   1f320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f324:	ldr	r0, [r7]
   1f328:	bl	13c04 <__assert_fail@plt+0x26ac>
   1f32c:	ldr	r0, [r7, #4]
   1f330:	bl	13c04 <__assert_fail@plt+0x26ac>
   1f334:	ldr	r0, [r7, #8]
   1f338:	bl	13c04 <__assert_fail@plt+0x26ac>
   1f33c:	ldr	r0, [r7, #12]
   1f340:	bl	13c04 <__assert_fail@plt+0x26ac>
   1f344:	mov	r0, r7
   1f348:	bl	13c04 <__assert_fail@plt+0x26ac>
   1f34c:	mov	r0, r9
   1f350:	add	sp, sp, #44	; 0x2c
   1f354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f358:	ldr	r2, [sp, #84]	; 0x54
   1f35c:	mov	r3, #12
   1f360:	mov	r9, r4
   1f364:	mov	r0, r9
   1f368:	str	r3, [r2]
   1f36c:	add	sp, sp, #44	; 0x2c
   1f370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f374:	mov	r0, r4
   1f378:	bl	13c04 <__assert_fail@plt+0x26ac>
   1f37c:	ldr	r2, [sp, #84]	; 0x54
   1f380:	mov	r3, #12
   1f384:	mov	r9, r7
   1f388:	str	r3, [r2]
   1f38c:	b	1f244 <__assert_fail@plt+0xdcec>
   1f390:	mov	r0, r4
   1f394:	bl	13c04 <__assert_fail@plt+0x26ac>
   1f398:	ldr	r0, [r7]
   1f39c:	bl	13c04 <__assert_fail@plt+0x26ac>
   1f3a0:	ldr	r0, [r7, #4]
   1f3a4:	bl	13c04 <__assert_fail@plt+0x26ac>
   1f3a8:	ldr	r0, [r7, #8]
   1f3ac:	bl	13c04 <__assert_fail@plt+0x26ac>
   1f3b0:	ldr	r0, [r7, #12]
   1f3b4:	bl	13c04 <__assert_fail@plt+0x26ac>
   1f3b8:	mov	r0, r7
   1f3bc:	bl	13c04 <__assert_fail@plt+0x26ac>
   1f3c0:	ldr	r3, [sp, #84]	; 0x54
   1f3c4:	str	sl, [r3]
   1f3c8:	b	1f244 <__assert_fail@plt+0xdcec>
   1f3cc:	mov	r0, #996	; 0x3e4
   1f3d0:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   1f3d4:	subs	r3, r0, #0
   1f3d8:	beq	1f2d8 <__assert_fail@plt+0xdd80>
   1f3dc:	ldr	r2, [r6, #56]	; 0x38
   1f3e0:	mov	ip, r5
   1f3e4:	mov	lr, #1
   1f3e8:	mov	r9, #4
   1f3ec:	str	r2, [r3]
   1f3f0:	str	r3, [r6, #56]	; 0x38
   1f3f4:	b	1f140 <__assert_fail@plt+0xdbe8>
   1f3f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3fc:	sub	sp, sp, #172	; 0xac
   1f400:	mov	r4, r1
   1f404:	str	r2, [sp, #32]
   1f408:	ldrb	r2, [r2, #4]
   1f40c:	str	r3, [sp, #40]	; 0x28
   1f410:	str	r0, [sp, #44]	; 0x2c
   1f414:	sub	r3, r2, #1
   1f418:	ldr	sl, [r1]
   1f41c:	ldr	r6, [sp, #208]	; 0xd0
   1f420:	cmp	r3, #35	; 0x23
   1f424:	ldrls	pc, [pc, r3, lsl #2]
   1f428:	b	20794 <__assert_fail@plt+0xf23c>
   1f42c:	andeq	r0, r2, r0, lsl #6
   1f430:			; <UNDEFINED> instruction: 0x0001f5b4
   1f434:	muleq	r2, r4, r7
   1f438:	andeq	r0, r2, r8, ror #3
   1f43c:	andeq	r0, r2, r0, lsr #5
   1f440:	muleq	r2, r4, r7
   1f444:	muleq	r2, r4, r7
   1f448:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f44c:	andeq	r0, r2, r4, ror r7
   1f450:			; <UNDEFINED> instruction: 0x0001f5b4
   1f454:	andeq	pc, r1, r8, asr #9
   1f458:	andeq	r0, r2, ip, ror #7
   1f45c:	muleq	r2, r4, r7
   1f460:	muleq	r2, r4, r7
   1f464:	muleq	r2, r4, r7
   1f468:	muleq	r2, r4, r7
   1f46c:	muleq	r2, r4, r7
   1f470:	andeq	pc, r1, r8, asr #9
   1f474:	andeq	pc, r1, r8, asr #9
   1f478:	andeq	r0, r2, ip, lsl #10
   1f47c:	muleq	r2, r4, r7
   1f480:	muleq	r2, r4, r7
   1f484:			; <UNDEFINED> instruction: 0x0001f4bc
   1f488:	andeq	pc, r1, r4, ror #9
   1f48c:	muleq	r2, r4, r7
   1f490:	muleq	r2, r4, r7
   1f494:	muleq	r2, r4, r7
   1f498:	muleq	r2, r4, r7
   1f49c:	muleq	r2, r4, r7
   1f4a0:	muleq	r2, r4, r7
   1f4a4:	muleq	r2, r4, r7
   1f4a8:	andeq	r0, r2, r8, asr #4
   1f4ac:	andeq	r0, r2, r8, asr #4
   1f4b0:	ldrdeq	r0, [r2], -r4
   1f4b4:	ldrdeq	r0, [r2], -r4
   1f4b8:			; <UNDEFINED> instruction: 0x000206b0
   1f4bc:	ldr	r3, [sp, #40]	; 0x28
   1f4c0:	tst	r3, #16777216	; 0x1000000
   1f4c4:	bne	1fad8 <__assert_fail@plt+0xe580>
   1f4c8:	ldr	r3, [sp, #40]	; 0x28
   1f4cc:	tst	r3, #32
   1f4d0:	bne	1fad8 <__assert_fail@plt+0xe580>
   1f4d4:	tst	r3, #16
   1f4d8:	bne	21184 <__assert_fail@plt+0xfc2c>
   1f4dc:	cmp	r2, #9
   1f4e0:	beq	20774 <__assert_fail@plt+0xf21c>
   1f4e4:	ldr	r2, [sp, #32]
   1f4e8:	mov	r3, #1
   1f4ec:	add	r1, sl, #64	; 0x40
   1f4f0:	strb	r3, [r2, #4]
   1f4f4:	add	r0, sl, #56	; 0x38
   1f4f8:	bl	1b7c4 <__assert_fail@plt+0xa26c>
   1f4fc:	subs	r3, r0, #0
   1f500:	str	r3, [sp, #36]	; 0x24
   1f504:	beq	203d4 <__assert_fail@plt+0xee7c>
   1f508:	ldr	r5, [sp, #40]	; 0x28
   1f50c:	ldr	r4, [sp, #44]	; 0x2c
   1f510:	ldr	r6, [sp, #32]
   1f514:	mov	r2, r5
   1f518:	mov	r1, r4
   1f51c:	mov	r0, r6
   1f520:	bl	1ae5c <__assert_fail@plt+0x9904>
   1f524:	ldr	r3, [r4, #40]	; 0x28
   1f528:	mov	fp, #0
   1f52c:	and	lr, r5, #2097152	; 0x200000
   1f530:	and	ip, r5, #16777216	; 0x1000000
   1f534:	ldrb	r2, [r6, #4]
   1f538:	str	lr, [sp, #60]	; 0x3c
   1f53c:	str	ip, [sp, #52]	; 0x34
   1f540:	add	r3, r3, r0
   1f544:	str	r3, [r4, #40]	; 0x28
   1f548:	cmp	r2, #23
   1f54c:	bls	1f5c8 <__assert_fail@plt+0xe070>
   1f550:	ldr	r0, [sp, #36]	; 0x24
   1f554:	add	sp, sp, #172	; 0xac
   1f558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f55c:	ldr	r3, [sp, #212]	; 0xd4
   1f560:	mov	r2, r8
   1f564:	str	r3, [sp, #4]
   1f568:	str	r6, [sp]
   1f56c:	mov	r3, r9
   1f570:	mov	r1, r4
   1f574:	bl	21808 <__assert_fail@plt+0x102b0>
   1f578:	ldr	r3, [sp, #212]	; 0xd4
   1f57c:	ldr	r3, [r3]
   1f580:	cmp	r3, #0
   1f584:	mov	r2, r0
   1f588:	bne	1f5b4 <__assert_fail@plt+0xe05c>
   1f58c:	ldr	r3, [sp, #32]
   1f590:	ldrb	r3, [r3, #4]
   1f594:	cmp	r3, #9
   1f598:	beq	20720 <__assert_fail@plt+0xf1c8>
   1f59c:	cmp	r0, #0
   1f5a0:	beq	1f5a8 <__assert_fail@plt+0xe050>
   1f5a4:	bl	1b870 <__assert_fail@plt+0xa318>
   1f5a8:	ldr	r2, [sp, #212]	; 0xd4
   1f5ac:	mov	r3, #8
   1f5b0:	str	r3, [r2]
   1f5b4:	mov	r3, #0
   1f5b8:	str	r3, [sp, #36]	; 0x24
   1f5bc:	ldr	r0, [sp, #36]	; 0x24
   1f5c0:	add	sp, sp, #172	; 0xac
   1f5c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f5c8:	ldr	r3, [pc, #3864]	; 204e8 <__assert_fail@plt+0xef90>
   1f5cc:	sub	r9, r2, #18
   1f5d0:	clz	r9, r9
   1f5d4:	mvn	r4, r3, lsr r2
   1f5d8:	ands	r4, r4, #1
   1f5dc:	lsr	r9, r9, #5
   1f5e0:	bne	1f550 <__assert_fail@plt+0xdff8>
   1f5e4:	ldr	r3, [sp, #32]
   1f5e8:	cmp	r2, #23
   1f5ec:	ldm	r3, {r0, r1}
   1f5f0:	ldr	r3, [sp, #44]	; 0x2c
   1f5f4:	ldr	r5, [r3, #40]	; 0x28
   1f5f8:	add	r3, sp, #104	; 0x68
   1f5fc:	stm	r3, {r0, r1}
   1f600:	beq	1f9d4 <__assert_fail@plt+0xe47c>
   1f604:	ldr	r4, [sp, #44]	; 0x2c
   1f608:	cmp	r2, #19
   1f60c:	moveq	r3, #1
   1f610:	mvnne	r3, #0
   1f614:	mov	r1, r4
   1f618:	ldr	r2, [sp, #40]	; 0x28
   1f61c:	ldr	r0, [sp, #32]
   1f620:	str	r3, [sp, #24]
   1f624:	bl	1ae5c <__assert_fail@plt+0x9904>
   1f628:	ldr	r3, [r4, #40]	; 0x28
   1f62c:	ldr	r1, [sp, #36]	; 0x24
   1f630:	cmp	r1, #0
   1f634:	add	r0, r3, r0
   1f638:	str	r0, [r4, #40]	; 0x28
   1f63c:	beq	1fa90 <__assert_fail@plt+0xe538>
   1f640:	cmp	r9, #0
   1f644:	bgt	1fc08 <__assert_fail@plt+0xe6b0>
   1f648:	ldr	r5, [sp, #36]	; 0x24
   1f64c:	mov	r8, #0
   1f650:	add	r3, sp, #136	; 0x88
   1f654:	str	r3, [sp, #48]	; 0x30
   1f658:	ldrb	r3, [r5, #24]
   1f65c:	cmp	r3, #17
   1f660:	beq	1faf8 <__assert_fail@plt+0xe5a0>
   1f664:	ldr	r3, [sp, #48]	; 0x30
   1f668:	str	fp, [r3]
   1f66c:	str	fp, [r3, #4]
   1f670:	ldr	r3, [sp, #24]
   1f674:	ldr	r1, [sl, #64]	; 0x40
   1f678:	cmn	r3, #1
   1f67c:	movne	r4, #10
   1f680:	moveq	r4, #11
   1f684:	cmp	r1, #31
   1f688:	beq	1ff1c <__assert_fail@plt+0xe9c4>
   1f68c:	lsl	r2, r1, #5
   1f690:	ldr	r3, [sl, #56]	; 0x38
   1f694:	add	r1, r1, #1
   1f698:	add	lr, r2, #4
   1f69c:	add	r2, r3, r2
   1f6a0:	str	r1, [sl, #64]	; 0x40
   1f6a4:	str	fp, [r2, #4]
   1f6a8:	str	r5, [r2, #8]
   1f6ac:	str	fp, [r2, #12]
   1f6b0:	strb	r4, [sp, #140]	; 0x8c
   1f6b4:	ldr	r4, [sp, #48]	; 0x30
   1f6b8:	add	ip, r2, #24
   1f6bc:	add	r3, r3, lr
   1f6c0:	ldm	r4, {r0, r1}
   1f6c4:	cmp	r3, #0
   1f6c8:	stm	ip, {r0, r1}
   1f6cc:	ldrb	r1, [r2, #30]
   1f6d0:	mvn	r0, #0
   1f6d4:	str	fp, [r2, #16]
   1f6d8:	and	r1, r1, #243	; 0xf3
   1f6dc:	str	fp, [r2, #20]
   1f6e0:	strb	r1, [r2, #30]
   1f6e4:	str	r0, [r2, #32]
   1f6e8:	str	r3, [r5]
   1f6ec:	beq	1f948 <__assert_fail@plt+0xe3f0>
   1f6f0:	ldr	r1, [sp, #24]
   1f6f4:	add	r2, r9, #2
   1f6f8:	cmp	r2, r1
   1f6fc:	str	r2, [sp, #20]
   1f700:	bgt	1fbb0 <__assert_fail@plt+0xe658>
   1f704:	str	r8, [sp, #56]	; 0x38
   1f708:	mov	r9, r0
   1f70c:	mov	r6, r3
   1f710:	mov	r8, r4
   1f714:	mov	r4, r5
   1f718:	mov	r7, r8
   1f71c:	b	1f728 <__assert_fail@plt+0xe1d0>
   1f720:	mov	r4, r2
   1f724:	add	r7, r6, #4
   1f728:	ldr	r1, [sl, #64]	; 0x40
   1f72c:	cmp	r1, #31
   1f730:	beq	1f7f4 <__assert_fail@plt+0xe29c>
   1f734:	lsl	r2, r1, #5
   1f738:	ldr	ip, [sl, #56]	; 0x38
   1f73c:	add	r0, r1, #1
   1f740:	add	lr, r2, #4
   1f744:	add	r2, ip, r2
   1f748:	add	r1, r4, #20
   1f74c:	str	r0, [sl, #64]	; 0x40
   1f750:	str	fp, [r2, #4]
   1f754:	str	fp, [r2, #8]
   1f758:	str	fp, [r2, #12]
   1f75c:	ldm	r1, {r0, r1}
   1f760:	add	r5, r2, #24
   1f764:	add	ip, ip, lr
   1f768:	stm	r5, {r0, r1}
   1f76c:	ldrb	r1, [r2, #30]
   1f770:	cmp	ip, #0
   1f774:	str	fp, [r2, #16]
   1f778:	and	r1, r1, #243	; 0xf3
   1f77c:	str	fp, [r2, #20]
   1f780:	str	r9, [r2, #32]
   1f784:	strb	r1, [r2, #30]
   1f788:	str	ip, [r7]
   1f78c:	beq	1f93c <__assert_fail@plt+0xe3e4>
   1f790:	str	r6, [r2, #4]
   1f794:	ldr	r6, [r7]
   1f798:	ldrb	r2, [r6, #26]
   1f79c:	orr	r2, r2, #4
   1f7a0:	strb	r2, [r6, #26]
   1f7a4:	ldr	r2, [r4, #4]
   1f7a8:	cmp	r2, #0
   1f7ac:	bne	1f720 <__assert_fail@plt+0xe1c8>
   1f7b0:	mov	r1, fp
   1f7b4:	b	1f7d0 <__assert_fail@plt+0xe278>
   1f7b8:	ldr	r2, [r4]
   1f7bc:	ldr	r6, [r6]
   1f7c0:	cmp	r2, #0
   1f7c4:	mov	r1, r4
   1f7c8:	beq	1f828 <__assert_fail@plt+0xe2d0>
   1f7cc:	mov	r4, r2
   1f7d0:	ldr	r2, [r4, #8]
   1f7d4:	cmp	r2, r1
   1f7d8:	cmpne	r2, #0
   1f7dc:	beq	1f7b8 <__assert_fail@plt+0xe260>
   1f7e0:	ldr	r1, [sl, #64]	; 0x40
   1f7e4:	mov	r4, r2
   1f7e8:	cmp	r1, #31
   1f7ec:	add	r7, r6, #8
   1f7f0:	bne	1f734 <__assert_fail@plt+0xe1dc>
   1f7f4:	mov	r0, #996	; 0x3e4
   1f7f8:	str	r3, [sp, #28]
   1f7fc:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   1f800:	ldr	r3, [sp, #28]
   1f804:	subs	ip, r0, #0
   1f808:	beq	1ff7c <__assert_fail@plt+0xea24>
   1f80c:	ldr	r1, [sl, #56]	; 0x38
   1f810:	mov	lr, #4
   1f814:	str	r1, [ip]
   1f818:	mov	r0, #1
   1f81c:	mov	r2, fp
   1f820:	str	ip, [sl, #56]	; 0x38
   1f824:	b	1f744 <__assert_fail@plt+0xe1ec>
   1f828:	ldr	r5, [sp, #136]	; 0x88
   1f82c:	str	fp, [r8]
   1f830:	str	fp, [r8, #4]
   1f834:	ldr	r2, [sl, #64]	; 0x40
   1f838:	cmp	r2, #31
   1f83c:	beq	1f974 <__assert_fail@plt+0xe41c>
   1f840:	lsl	r4, r2, #5
   1f844:	ldr	ip, [sl, #56]	; 0x38
   1f848:	add	r2, r2, #1
   1f84c:	add	r6, r4, #4
   1f850:	add	r4, ip, r4
   1f854:	str	r2, [sl, #64]	; 0x40
   1f858:	mov	r2, #16
   1f85c:	str	fp, [r4, #4]
   1f860:	str	r3, [r4, #8]
   1f864:	str	r5, [r4, #12]
   1f868:	strb	r2, [sp, #140]	; 0x8c
   1f86c:	ldm	r8, {r0, r1}
   1f870:	add	r2, r4, #24
   1f874:	add	r6, ip, r6
   1f878:	stm	r2, {r0, r1}
   1f87c:	ldrb	r2, [r4, #30]
   1f880:	cmp	r5, #0
   1f884:	str	fp, [r4, #16]
   1f888:	and	r2, r2, #243	; 0xf3
   1f88c:	str	fp, [r4, #20]
   1f890:	str	r9, [r4, #32]
   1f894:	strb	r2, [r4, #30]
   1f898:	str	r6, [r3]
   1f89c:	beq	1f948 <__assert_fail@plt+0xe3f0>
   1f8a0:	cmp	r6, #0
   1f8a4:	str	r6, [r5]
   1f8a8:	beq	1f948 <__assert_fail@plt+0xe3f0>
   1f8ac:	str	fp, [r8]
   1f8b0:	str	fp, [r8, #4]
   1f8b4:	ldr	r1, [sl, #64]	; 0x40
   1f8b8:	cmp	r1, #31
   1f8bc:	beq	1f9a8 <__assert_fail@plt+0xe450>
   1f8c0:	lsl	r2, r1, #5
   1f8c4:	add	r3, r2, #4
   1f8c8:	add	r1, r1, #1
   1f8cc:	add	r2, ip, r2
   1f8d0:	mov	r0, #10
   1f8d4:	str	r1, [sl, #64]	; 0x40
   1f8d8:	str	fp, [r2, #4]
   1f8dc:	str	r6, [r2, #8]
   1f8e0:	str	fp, [r2, #12]
   1f8e4:	strb	r0, [sp, #140]	; 0x8c
   1f8e8:	ldm	r8, {r0, r1}
   1f8ec:	add	lr, r2, #24
   1f8f0:	add	r3, ip, r3
   1f8f4:	stm	lr, {r0, r1}
   1f8f8:	ldrb	r1, [r2, #30]
   1f8fc:	cmp	r3, #0
   1f900:	str	fp, [r2, #16]
   1f904:	and	r1, r1, #243	; 0xf3
   1f908:	str	fp, [r2, #20]
   1f90c:	str	r9, [r2, #32]
   1f910:	strb	r1, [r2, #30]
   1f914:	str	r3, [r4, #4]
   1f918:	beq	1f948 <__assert_fail@plt+0xe3f0>
   1f91c:	ldr	r2, [sp, #20]
   1f920:	ldr	r1, [sp, #24]
   1f924:	add	r2, r2, #1
   1f928:	cmp	r2, r1
   1f92c:	str	r2, [sp, #20]
   1f930:	bgt	1fbac <__assert_fail@plt+0xe654>
   1f934:	ldr	r6, [r5]
   1f938:	b	1f714 <__assert_fail@plt+0xe1bc>
   1f93c:	mov	r5, ip
   1f940:	b	1f82c <__assert_fail@plt+0xe2d4>
   1f944:	str	lr, [r6]
   1f948:	ldr	r2, [sp, #212]	; 0xd4
   1f94c:	mov	r3, #12
   1f950:	str	r3, [r2]
   1f954:	ldr	r3, [sp, #36]	; 0x24
   1f958:	cmp	r3, #0
   1f95c:	beq	1f5b4 <__assert_fail@plt+0xe05c>
   1f960:	mov	r0, r3
   1f964:	bl	1b870 <__assert_fail@plt+0xa318>
   1f968:	mov	r3, #0
   1f96c:	str	r3, [sp, #36]	; 0x24
   1f970:	b	1f5bc <__assert_fail@plt+0xe064>
   1f974:	mov	r0, #996	; 0x3e4
   1f978:	str	r3, [sp, #28]
   1f97c:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   1f980:	subs	ip, r0, #0
   1f984:	beq	1f948 <__assert_fail@plt+0xe3f0>
   1f988:	ldr	r1, [sl, #56]	; 0x38
   1f98c:	mov	r6, #4
   1f990:	str	r1, [ip]
   1f994:	mov	r2, #1
   1f998:	mov	r4, fp
   1f99c:	str	ip, [sl, #56]	; 0x38
   1f9a0:	ldr	r3, [sp, #28]
   1f9a4:	b	1f850 <__assert_fail@plt+0xe2f8>
   1f9a8:	mov	r0, #996	; 0x3e4
   1f9ac:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   1f9b0:	subs	ip, r0, #0
   1f9b4:	beq	1f948 <__assert_fail@plt+0xe3f0>
   1f9b8:	ldr	r0, [sl, #56]	; 0x38
   1f9bc:	mov	r1, #1
   1f9c0:	str	r0, [ip]
   1f9c4:	mov	r3, #4
   1f9c8:	mov	r2, fp
   1f9cc:	str	ip, [sl, #56]	; 0x38
   1f9d0:	b	1f8cc <__assert_fail@plt+0xe374>
   1f9d4:	str	r4, [sp, #20]
   1f9d8:	ldr	r8, [sp, #44]	; 0x2c
   1f9dc:	ldr	r4, [sp, #32]
   1f9e0:	mvn	r9, #0
   1f9e4:	mov	r7, #32768	; 0x8000
   1f9e8:	mvn	r6, #1
   1f9ec:	mov	r1, r8
   1f9f0:	ldr	r2, [sp, #40]	; 0x28
   1f9f4:	mov	r0, r4
   1f9f8:	bl	1ae5c <__assert_fail@plt+0x9904>
   1f9fc:	ldrb	ip, [r4, #4]
   1fa00:	ldr	r2, [r8, #40]	; 0x28
   1fa04:	cmn	r9, #2
   1fa08:	movne	r1, #0
   1fa0c:	moveq	r1, #1
   1fa10:	cmp	ip, #2
   1fa14:	add	r0, r2, r0
   1fa18:	str	r0, [r8, #40]	; 0x28
   1fa1c:	ldrb	r2, [r4]
   1fa20:	beq	1fb74 <__assert_fail@plt+0xe61c>
   1fa24:	cmp	ip, #24
   1fa28:	beq	1ff94 <__assert_fail@plt+0xea3c>
   1fa2c:	cmp	r2, #44	; 0x2c
   1fa30:	beq	200b4 <__assert_fail@plt+0xeb5c>
   1fa34:	cmp	ip, #1
   1fa38:	beq	1fa44 <__assert_fail@plt+0xe4ec>
   1fa3c:	mov	r9, r6
   1fa40:	b	1f9ec <__assert_fail@plt+0xe494>
   1fa44:	sub	r0, r2, #48	; 0x30
   1fa48:	uxtb	r1, r0
   1fa4c:	cmp	r1, #9
   1fa50:	movhi	r1, #0
   1fa54:	movls	r1, #1
   1fa58:	cmn	r9, #2
   1fa5c:	moveq	r1, #0
   1fa60:	cmp	r1, #0
   1fa64:	beq	1fa3c <__assert_fail@plt+0xe4e4>
   1fa68:	cmn	r9, #1
   1fa6c:	moveq	r9, r0
   1fa70:	beq	1f9ec <__assert_fail@plt+0xe494>
   1fa74:	add	r3, r9, r9, lsl #2
   1fa78:	add	r3, r2, r3, lsl #1
   1fa7c:	ldr	r2, [pc, #2664]	; 204ec <__assert_fail@plt+0xef94>
   1fa80:	cmp	r3, r2
   1fa84:	suble	r9, r3, #48	; 0x30
   1fa88:	movgt	r9, r7
   1fa8c:	b	1f9ec <__assert_fail@plt+0xe494>
   1fa90:	ldr	r3, [sp, #212]	; 0xd4
   1fa94:	ldr	r3, [r3]
   1fa98:	cmp	r3, #0
   1fa9c:	bne	1f954 <__assert_fail@plt+0xe3fc>
   1faa0:	str	fp, [sp, #36]	; 0x24
   1faa4:	ldr	r3, [sp, #52]	; 0x34
   1faa8:	cmp	r3, #0
   1faac:	ldr	r3, [sp, #32]
   1fab0:	ldrb	r2, [r3, #4]
   1fab4:	beq	1f548 <__assert_fail@plt+0xdff0>
   1fab8:	cmp	r2, #23
   1fabc:	cmpne	r2, #11
   1fac0:	bne	1f548 <__assert_fail@plt+0xdff0>
   1fac4:	ldr	r3, [sp, #36]	; 0x24
   1fac8:	cmp	r3, #0
   1facc:	beq	1fad8 <__assert_fail@plt+0xe580>
   1fad0:	mov	r0, r3
   1fad4:	bl	1b870 <__assert_fail@plt+0xa318>
   1fad8:	ldr	r2, [sp, #212]	; 0xd4
   1fadc:	mov	r3, #13
   1fae0:	str	r3, [r2]
   1fae4:	mov	r3, #0
   1fae8:	str	r3, [sp, #36]	; 0x24
   1faec:	ldr	r0, [sp, #36]	; 0x24
   1faf0:	add	sp, sp, #172	; 0xac
   1faf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1faf8:	ldr	r1, [r5, #20]
   1fafc:	mov	r3, r5
   1fb00:	b	1fb08 <__assert_fail@plt+0xe5b0>
   1fb04:	mov	r3, r2
   1fb08:	ldr	r2, [r3, #4]
   1fb0c:	cmp	r2, #0
   1fb10:	bne	1fb04 <__assert_fail@plt+0xe5ac>
   1fb14:	ldr	r2, [r3, #8]
   1fb18:	cmp	r2, #0
   1fb1c:	bne	1fb04 <__assert_fail@plt+0xe5ac>
   1fb20:	b	1fb44 <__assert_fail@plt+0xe5ec>
   1fb24:	ldr	r2, [r0, #8]
   1fb28:	cmp	r3, r2
   1fb2c:	cmpne	r2, #0
   1fb30:	moveq	r3, #1
   1fb34:	movne	r3, #0
   1fb38:	cmp	r3, #0
   1fb3c:	mov	r3, r0
   1fb40:	beq	1fb04 <__assert_fail@plt+0xe5ac>
   1fb44:	ldrb	r2, [r3, #24]
   1fb48:	cmp	r2, #17
   1fb4c:	bne	1fb64 <__assert_fail@plt+0xe60c>
   1fb50:	ldr	r2, [r3, #20]
   1fb54:	cmp	r1, r2
   1fb58:	ldrbeq	r2, [r3, #26]
   1fb5c:	orreq	r2, r2, #8
   1fb60:	strbeq	r2, [r3, #26]
   1fb64:	ldr	r0, [r3]
   1fb68:	cmp	r0, #0
   1fb6c:	bne	1fb24 <__assert_fail@plt+0xe5cc>
   1fb70:	b	1f664 <__assert_fail@plt+0xe10c>
   1fb74:	mov	r3, ip
   1fb78:	ldr	r2, [sp, #60]	; 0x3c
   1fb7c:	cmp	r2, #0
   1fb80:	beq	2084c <__assert_fail@plt+0xf2f4>
   1fb84:	add	r3, sp, #104	; 0x68
   1fb88:	ldr	r2, [sp, #32]
   1fb8c:	ldm	r3, {r0, r1}
   1fb90:	ldr	r3, [sp, #44]	; 0x2c
   1fb94:	str	r5, [r3, #40]	; 0x28
   1fb98:	mov	r3, #1
   1fb9c:	stm	r2, {r0, r1}
   1fba0:	ldr	r0, [sp, #36]	; 0x24
   1fba4:	strb	r3, [r2, #4]
   1fba8:	b	1fbe0 <__assert_fail@plt+0xe688>
   1fbac:	ldr	r8, [sp, #56]	; 0x38
   1fbb0:	cmp	r8, #0
   1fbb4:	beq	1ff8c <__assert_fail@plt+0xea34>
   1fbb8:	ldr	r0, [sp, #48]	; 0x30
   1fbbc:	mov	ip, #16
   1fbc0:	str	r0, [sp]
   1fbc4:	mov	r2, r8
   1fbc8:	str	fp, [r0, #4]
   1fbcc:	str	fp, [r0]
   1fbd0:	add	r1, sl, #64	; 0x40
   1fbd4:	add	r0, sl, #56	; 0x38
   1fbd8:	strb	ip, [sp, #140]	; 0x8c
   1fbdc:	bl	18ca0 <__assert_fail@plt+0x7748>
   1fbe0:	ldr	r3, [sp, #212]	; 0xd4
   1fbe4:	ldr	r3, [r3]
   1fbe8:	adds	r3, r3, #0
   1fbec:	movne	r3, #1
   1fbf0:	cmp	r0, #0
   1fbf4:	movne	r3, #0
   1fbf8:	cmp	r3, #0
   1fbfc:	bne	1f954 <__assert_fail@plt+0xe3fc>
   1fc00:	str	r0, [sp, #36]	; 0x24
   1fc04:	b	1faa4 <__assert_fail@plt+0xe54c>
   1fc08:	cmp	r9, #1
   1fc0c:	beq	207a0 <__assert_fail@plt+0xf248>
   1fc10:	ldr	r3, [sp, #36]	; 0x24
   1fc14:	str	r9, [sp, #48]	; 0x30
   1fc18:	mov	r2, r3
   1fc1c:	ldr	r8, [r3]
   1fc20:	mov	r5, r3
   1fc24:	mov	r3, #2
   1fc28:	str	r3, [sp, #20]
   1fc2c:	add	r3, sp, #136	; 0x88
   1fc30:	mvn	r7, #0
   1fc34:	mov	r9, r3
   1fc38:	mov	r4, r5
   1fc3c:	mov	r6, r9
   1fc40:	b	1fc4c <__assert_fail@plt+0xe6f4>
   1fc44:	mov	r4, r3
   1fc48:	add	r6, r8, #4
   1fc4c:	ldr	r1, [sl, #64]	; 0x40
   1fc50:	cmp	r1, #31
   1fc54:	beq	1fd18 <__assert_fail@plt+0xe7c0>
   1fc58:	lsl	r3, r1, #5
   1fc5c:	ldr	ip, [sl, #56]	; 0x38
   1fc60:	add	r0, r1, #1
   1fc64:	add	lr, r3, #4
   1fc68:	add	r3, ip, r3
   1fc6c:	add	r1, r4, #20
   1fc70:	str	r0, [sl, #64]	; 0x40
   1fc74:	str	fp, [r3, #4]
   1fc78:	str	fp, [r3, #8]
   1fc7c:	str	fp, [r3, #12]
   1fc80:	ldm	r1, {r0, r1}
   1fc84:	add	r5, r3, #24
   1fc88:	add	ip, ip, lr
   1fc8c:	stm	r5, {r0, r1}
   1fc90:	ldrb	r1, [r3, #30]
   1fc94:	cmp	ip, #0
   1fc98:	str	fp, [r3, #16]
   1fc9c:	and	r1, r1, #243	; 0xf3
   1fca0:	str	fp, [r3, #20]
   1fca4:	str	r7, [r3, #32]
   1fca8:	strb	r1, [r3, #30]
   1fcac:	str	ip, [r6]
   1fcb0:	beq	1ff14 <__assert_fail@plt+0xe9bc>
   1fcb4:	str	r8, [r3, #4]
   1fcb8:	ldr	r8, [r6]
   1fcbc:	ldrb	r3, [r8, #26]
   1fcc0:	orr	r3, r3, #4
   1fcc4:	strb	r3, [r8, #26]
   1fcc8:	ldr	r3, [r4, #4]
   1fccc:	cmp	r3, #0
   1fcd0:	bne	1fc44 <__assert_fail@plt+0xe6ec>
   1fcd4:	mov	r1, fp
   1fcd8:	b	1fcf4 <__assert_fail@plt+0xe79c>
   1fcdc:	ldr	r3, [r4]
   1fce0:	ldr	r8, [r8]
   1fce4:	cmp	r3, #0
   1fce8:	mov	r1, r4
   1fcec:	beq	1fd4c <__assert_fail@plt+0xe7f4>
   1fcf0:	mov	r4, r3
   1fcf4:	ldr	r3, [r4, #8]
   1fcf8:	cmp	r3, #0
   1fcfc:	cmpne	r3, r1
   1fd00:	beq	1fcdc <__assert_fail@plt+0xe784>
   1fd04:	ldr	r1, [sl, #64]	; 0x40
   1fd08:	mov	r4, r3
   1fd0c:	cmp	r1, #31
   1fd10:	add	r6, r8, #8
   1fd14:	bne	1fc58 <__assert_fail@plt+0xe700>
   1fd18:	mov	r0, #996	; 0x3e4
   1fd1c:	str	r2, [sp, #28]
   1fd20:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   1fd24:	ldr	r2, [sp, #28]
   1fd28:	subs	ip, r0, #0
   1fd2c:	beq	20794 <__assert_fail@plt+0xf23c>
   1fd30:	ldr	r1, [sl, #56]	; 0x38
   1fd34:	mov	lr, #4
   1fd38:	str	r1, [ip]
   1fd3c:	mov	r0, #1
   1fd40:	mov	r3, fp
   1fd44:	str	ip, [sl, #56]	; 0x38
   1fd48:	b	1fc68 <__assert_fail@plt+0xe710>
   1fd4c:	ldr	r5, [sp, #136]	; 0x88
   1fd50:	str	fp, [r9]
   1fd54:	str	fp, [r9, #4]
   1fd58:	ldr	r1, [sl, #64]	; 0x40
   1fd5c:	cmp	r1, #31
   1fd60:	beq	1ff48 <__assert_fail@plt+0xe9f0>
   1fd64:	lsl	r3, r1, #5
   1fd68:	ldr	r8, [sl, #56]	; 0x38
   1fd6c:	add	r1, r1, #1
   1fd70:	add	lr, r3, #4
   1fd74:	add	r3, r8, r3
   1fd78:	str	r1, [sl, #64]	; 0x40
   1fd7c:	mov	r1, #16
   1fd80:	str	fp, [r3, #4]
   1fd84:	str	r2, [r3, #8]
   1fd88:	str	r5, [r3, #12]
   1fd8c:	strb	r1, [sp, #140]	; 0x8c
   1fd90:	ldm	r9, {r0, r1}
   1fd94:	add	ip, r3, #24
   1fd98:	add	r8, r8, lr
   1fd9c:	stm	ip, {r0, r1}
   1fda0:	ldrb	r1, [r3, #30]
   1fda4:	cmp	r5, #0
   1fda8:	str	fp, [r3, #16]
   1fdac:	and	r1, r1, #243	; 0xf3
   1fdb0:	str	fp, [r3, #20]
   1fdb4:	str	r7, [r3, #32]
   1fdb8:	strb	r1, [r3, #30]
   1fdbc:	str	r8, [r2]
   1fdc0:	beq	1f948 <__assert_fail@plt+0xe3f0>
   1fdc4:	cmp	r8, #0
   1fdc8:	str	r8, [r5]
   1fdcc:	beq	1f948 <__assert_fail@plt+0xe3f0>
   1fdd0:	ldr	r3, [sp, #20]
   1fdd4:	ldr	r2, [sp, #48]	; 0x30
   1fdd8:	add	r3, r3, #1
   1fddc:	cmp	r3, r2
   1fde0:	str	r3, [sp, #20]
   1fde4:	mov	r2, r8
   1fde8:	ble	1fc38 <__assert_fail@plt+0xe6e0>
   1fdec:	ldr	r9, [sp, #48]	; 0x30
   1fdf0:	ldr	r3, [sp, #24]
   1fdf4:	cmp	r9, r3
   1fdf8:	beq	1ff88 <__assert_fail@plt+0xea30>
   1fdfc:	add	r3, sp, #136	; 0x88
   1fe00:	str	r3, [sp, #48]	; 0x30
   1fe04:	ldr	r4, [r5]
   1fe08:	mov	r6, r3
   1fe0c:	mvn	r7, #0
   1fe10:	b	1fe1c <__assert_fail@plt+0xe8c4>
   1fe14:	mov	r5, r3
   1fe18:	add	r6, r4, #4
   1fe1c:	ldr	r2, [sl, #64]	; 0x40
   1fe20:	cmp	r2, #31
   1fe24:	beq	1fee8 <__assert_fail@plt+0xe990>
   1fe28:	lsl	r3, r2, #5
   1fe2c:	ldr	lr, [sl, #56]	; 0x38
   1fe30:	add	r1, r2, #1
   1fe34:	add	ip, r3, #4
   1fe38:	add	r3, lr, r3
   1fe3c:	add	r2, r5, #20
   1fe40:	str	r1, [sl, #64]	; 0x40
   1fe44:	str	fp, [r3, #4]
   1fe48:	str	fp, [r3, #8]
   1fe4c:	str	fp, [r3, #12]
   1fe50:	ldm	r2, {r0, r1}
   1fe54:	add	r2, r3, #24
   1fe58:	add	ip, lr, ip
   1fe5c:	stm	r2, {r0, r1}
   1fe60:	ldrb	r2, [r3, #30]
   1fe64:	cmp	ip, #0
   1fe68:	str	fp, [r3, #16]
   1fe6c:	and	r2, r2, #243	; 0xf3
   1fe70:	str	fp, [r3, #20]
   1fe74:	str	r7, [r3, #32]
   1fe78:	strb	r2, [r3, #30]
   1fe7c:	str	ip, [r6]
   1fe80:	beq	1f948 <__assert_fail@plt+0xe3f0>
   1fe84:	str	r4, [r3, #4]
   1fe88:	ldr	r4, [r6]
   1fe8c:	ldrb	r3, [r4, #26]
   1fe90:	orr	r3, r3, #4
   1fe94:	strb	r3, [r4, #26]
   1fe98:	ldr	r3, [r5, #4]
   1fe9c:	cmp	r3, #0
   1fea0:	bne	1fe14 <__assert_fail@plt+0xe8bc>
   1fea4:	mov	r2, fp
   1fea8:	b	1fec4 <__assert_fail@plt+0xe96c>
   1feac:	ldr	r3, [r5]
   1feb0:	ldr	r4, [r4]
   1feb4:	cmp	r3, #0
   1feb8:	mov	r2, r5
   1febc:	beq	201d8 <__assert_fail@plt+0xec80>
   1fec0:	mov	r5, r3
   1fec4:	ldr	r3, [r5, #8]
   1fec8:	cmp	r3, r2
   1fecc:	cmpne	r3, #0
   1fed0:	beq	1feac <__assert_fail@plt+0xe954>
   1fed4:	ldr	r2, [sl, #64]	; 0x40
   1fed8:	mov	r5, r3
   1fedc:	cmp	r2, #31
   1fee0:	add	r6, r4, #8
   1fee4:	bne	1fe28 <__assert_fail@plt+0xe8d0>
   1fee8:	mov	r0, #996	; 0x3e4
   1feec:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   1fef0:	subs	lr, r0, #0
   1fef4:	beq	1f944 <__assert_fail@plt+0xe3ec>
   1fef8:	ldr	r2, [sl, #56]	; 0x38
   1fefc:	mov	r1, #1
   1ff00:	str	r2, [lr]
   1ff04:	mov	ip, #4
   1ff08:	mov	r3, fp
   1ff0c:	str	lr, [sl, #56]	; 0x38
   1ff10:	b	1fe38 <__assert_fail@plt+0xe8e0>
   1ff14:	mov	r5, ip
   1ff18:	b	1fd50 <__assert_fail@plt+0xe7f8>
   1ff1c:	mov	r0, #996	; 0x3e4
   1ff20:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   1ff24:	subs	r3, r0, #0
   1ff28:	beq	1f948 <__assert_fail@plt+0xe3f0>
   1ff2c:	ldr	r0, [sl, #56]	; 0x38
   1ff30:	mov	lr, #4
   1ff34:	str	r0, [r3]
   1ff38:	mov	r1, #1
   1ff3c:	mov	r2, fp
   1ff40:	str	r3, [sl, #56]	; 0x38
   1ff44:	b	1f69c <__assert_fail@plt+0xe144>
   1ff48:	mov	r0, #996	; 0x3e4
   1ff4c:	str	r2, [sp, #28]
   1ff50:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   1ff54:	subs	r8, r0, #0
   1ff58:	beq	1f948 <__assert_fail@plt+0xe3f0>
   1ff5c:	ldr	r0, [sl, #56]	; 0x38
   1ff60:	mov	lr, #4
   1ff64:	str	r0, [r8]
   1ff68:	mov	r1, #1
   1ff6c:	mov	r3, fp
   1ff70:	str	r8, [sl, #56]	; 0x38
   1ff74:	ldr	r2, [sp, #28]
   1ff78:	b	1fd74 <__assert_fail@plt+0xe81c>
   1ff7c:	str	ip, [r7]
   1ff80:	mov	r5, fp
   1ff84:	b	1f82c <__assert_fail@plt+0xe2d4>
   1ff88:	mov	r3, r8
   1ff8c:	str	r3, [sp, #36]	; 0x24
   1ff90:	b	1faa4 <__assert_fail@plt+0xe54c>
   1ff94:	cmn	r9, #1
   1ff98:	beq	200e0 <__assert_fail@plt+0xeb88>
   1ff9c:	cmn	r9, #2
   1ffa0:	strne	r9, [sp, #24]
   1ffa4:	beq	200d4 <__assert_fail@plt+0xeb7c>
   1ffa8:	ldr	r3, [sp, #24]
   1ffac:	cmn	r3, #1
   1ffb0:	beq	200f0 <__assert_fail@plt+0xeb98>
   1ffb4:	ldr	r2, [pc, #1332]	; 204f0 <__assert_fail@plt+0xef98>
   1ffb8:	cmp	r3, r2
   1ffbc:	movle	r3, #0
   1ffc0:	movgt	r3, #1
   1ffc4:	cmp	r3, #0
   1ffc8:	bne	20108 <__assert_fail@plt+0xebb0>
   1ffcc:	ldr	r4, [sp, #44]	; 0x2c
   1ffd0:	ldr	r2, [sp, #40]	; 0x28
   1ffd4:	mov	r1, r4
   1ffd8:	ldr	r0, [sp, #32]
   1ffdc:	bl	1ae5c <__assert_fail@plt+0x9904>
   1ffe0:	ldr	r3, [r4, #40]	; 0x28
   1ffe4:	mov	r2, r4
   1ffe8:	ldr	r4, [sp, #36]	; 0x24
   1ffec:	cmp	r4, #0
   1fff0:	add	r3, r3, r0
   1fff4:	str	r3, [r2, #40]	; 0x28
   1fff8:	beq	1fa90 <__assert_fail@plt+0xe538>
   1fffc:	ldr	r3, [sp, #24]
   20000:	orrs	r3, r9, r3
   20004:	beq	20010 <__assert_fail@plt+0xeab8>
   20008:	b	1f640 <__assert_fail@plt+0xe0e8>
   2000c:	mov	r4, r3
   20010:	ldr	r3, [r4, #4]
   20014:	cmp	r3, #0
   20018:	bne	2000c <__assert_fail@plt+0xeab4>
   2001c:	ldr	r3, [r4, #8]
   20020:	cmp	r3, #0
   20024:	bne	2000c <__assert_fail@plt+0xeab4>
   20028:	b	20060 <__assert_fail@plt+0xeb08>
   2002c:	ldr	r0, [r4, #20]
   20030:	bl	13c04 <__assert_fail@plt+0x26ac>
   20034:	ldr	r2, [r4]
   20038:	cmp	r2, #0
   2003c:	beq	1fa90 <__assert_fail@plt+0xe538>
   20040:	ldr	r3, [r2, #8]
   20044:	cmp	r3, #0
   20048:	cmpne	r4, r3
   2004c:	moveq	r4, #1
   20050:	movne	r4, #0
   20054:	cmp	r4, #0
   20058:	mov	r4, r2
   2005c:	beq	2000c <__assert_fail@plt+0xeab4>
   20060:	ldr	r3, [r4, #24]
   20064:	bic	r3, r3, #-16777216	; 0xff000000
   20068:	bic	r3, r3, #16449536	; 0xfb0000
   2006c:	bic	r3, r3, #65280	; 0xff00
   20070:	cmp	r3, #6
   20074:	beq	20084 <__assert_fail@plt+0xeb2c>
   20078:	cmp	r3, #3
   2007c:	bne	20034 <__assert_fail@plt+0xeadc>
   20080:	b	2002c <__assert_fail@plt+0xead4>
   20084:	ldr	r5, [r4, #20]
   20088:	ldr	r0, [r5]
   2008c:	bl	13c04 <__assert_fail@plt+0x26ac>
   20090:	ldr	r0, [r5, #4]
   20094:	bl	13c04 <__assert_fail@plt+0x26ac>
   20098:	ldr	r0, [r5, #8]
   2009c:	bl	13c04 <__assert_fail@plt+0x26ac>
   200a0:	ldr	r0, [r5, #12]
   200a4:	bl	13c04 <__assert_fail@plt+0x26ac>
   200a8:	mov	r0, r5
   200ac:	bl	13c04 <__assert_fail@plt+0x26ac>
   200b0:	b	20034 <__assert_fail@plt+0xeadc>
   200b4:	cmn	r9, #1
   200b8:	ldr	r4, [sp, #20]
   200bc:	beq	20118 <__assert_fail@plt+0xebc0>
   200c0:	cmn	r9, #2
   200c4:	beq	200d4 <__assert_fail@plt+0xeb7c>
   200c8:	cmp	ip, #1
   200cc:	moveq	r4, r1
   200d0:	beq	20124 <__assert_fail@plt+0xebcc>
   200d4:	ldr	r3, [sp, #60]	; 0x3c
   200d8:	cmp	r3, #0
   200dc:	bne	1fb84 <__assert_fail@plt+0xe62c>
   200e0:	ldr	r2, [sp, #212]	; 0xd4
   200e4:	mov	r3, #10
   200e8:	str	r3, [r2]
   200ec:	b	1f954 <__assert_fail@plt+0xe3fc>
   200f0:	add	r3, r3, #32768	; 0x8000
   200f4:	cmp	r9, r3
   200f8:	movle	r3, #0
   200fc:	movgt	r3, #1
   20100:	cmp	r3, #0
   20104:	beq	1ffcc <__assert_fail@plt+0xea74>
   20108:	ldr	r2, [sp, #212]	; 0xd4
   2010c:	mov	r3, #15
   20110:	str	r3, [r2]
   20114:	b	1f954 <__assert_fail@plt+0xe3fc>
   20118:	cmp	ip, #1
   2011c:	bne	200e0 <__assert_fail@plt+0xeb88>
   20120:	mov	r9, fp
   20124:	mvn	r3, #0
   20128:	str	r5, [sp, #20]
   2012c:	ldr	r0, [sp, #32]
   20130:	mov	r5, r4
   20134:	ldr	r4, [sp, #44]	; 0x2c
   20138:	mov	r7, #32768	; 0x8000
   2013c:	mvn	r6, #1
   20140:	mov	r8, r3
   20144:	ldr	r2, [sp, #40]	; 0x28
   20148:	mov	r1, r4
   2014c:	bl	1ae5c <__assert_fail@plt+0x9904>
   20150:	ldr	r1, [sp, #32]
   20154:	ldr	r2, [r4, #40]	; 0x28
   20158:	ldrb	r3, [r1, #4]
   2015c:	cmp	r3, #2
   20160:	add	r2, r2, r0
   20164:	str	r2, [r4, #40]	; 0x28
   20168:	beq	207ac <__assert_fail@plt+0xf254>
   2016c:	ldrb	r2, [r1]
   20170:	cmp	r2, #44	; 0x2c
   20174:	cmpne	r3, #24
   20178:	beq	20800 <__assert_fail@plt+0xf2a8>
   2017c:	cmp	r3, #1
   20180:	movne	r8, r6
   20184:	movne	r0, r1
   20188:	bne	20144 <__assert_fail@plt+0xebec>
   2018c:	sub	r1, r2, #48	; 0x30
   20190:	uxtb	r3, r1
   20194:	cmp	r3, #9
   20198:	movhi	r3, #0
   2019c:	movls	r3, #1
   201a0:	cmn	r8, #2
   201a4:	moveq	r3, #0
   201a8:	cmp	r3, #0
   201ac:	beq	211f4 <__assert_fail@plt+0xfc9c>
   201b0:	cmn	r8, #1
   201b4:	beq	211e8 <__assert_fail@plt+0xfc90>
   201b8:	add	r8, r8, r8, lsl #2
   201bc:	ldr	r3, [pc, #808]	; 204ec <__assert_fail@plt+0xef94>
   201c0:	add	r2, r2, r8, lsl #1
   201c4:	cmp	r2, r3
   201c8:	bgt	20864 <__assert_fail@plt+0xf30c>
   201cc:	sub	r8, r2, #48	; 0x30
   201d0:	ldr	r0, [sp, #32]
   201d4:	b	20144 <__assert_fail@plt+0xebec>
   201d8:	ldr	r5, [sp, #136]	; 0x88
   201dc:	cmp	r5, #0
   201e0:	bne	1f658 <__assert_fail@plt+0xe100>
   201e4:	b	1f948 <__assert_fail@plt+0xe3f0>
   201e8:	ldr	r3, [sp, #32]
   201ec:	ldr	r2, [sl, #84]	; 0x54
   201f0:	ldr	r1, [r3]
   201f4:	mov	r3, #1
   201f8:	lsl	r3, r3, r1
   201fc:	ands	r2, r3, r2
   20200:	beq	211d4 <__assert_fail@plt+0xfc7c>
   20204:	ldr	r1, [sl, #80]	; 0x50
   20208:	ldr	r2, [sp, #32]
   2020c:	orr	r3, r1, r3
   20210:	str	r3, [sl, #80]	; 0x50
   20214:	add	r1, sl, #64	; 0x40
   20218:	add	r0, sl, #56	; 0x38
   2021c:	bl	1b7c4 <__assert_fail@plt+0xa26c>
   20220:	subs	r3, r0, #0
   20224:	str	r3, [sp, #36]	; 0x24
   20228:	beq	203d4 <__assert_fail@plt+0xee7c>
   2022c:	ldrb	r2, [sl, #88]	; 0x58
   20230:	ldr	r3, [sl, #76]	; 0x4c
   20234:	orr	r2, r2, #2
   20238:	add	r3, r3, #1
   2023c:	strb	r2, [sl, #88]	; 0x58
   20240:	str	r3, [sl, #76]	; 0x4c
   20244:	b	1f508 <__assert_fail@plt+0xdfb0>
   20248:	ldr	r3, [sp, #44]	; 0x2c
   2024c:	sub	r2, r2, #33	; 0x21
   20250:	clz	r2, r2
   20254:	ldr	r1, [r3, #64]	; 0x40
   20258:	ldr	r3, [sp, #212]	; 0xd4
   2025c:	lsr	r2, r2, #5
   20260:	str	r2, [sp]
   20264:	str	r3, [sp, #4]
   20268:	ldr	r2, [pc, #644]	; 204f4 <__assert_fail@plt+0xef9c>
   2026c:	ldr	r3, [pc, #644]	; 204f8 <__assert_fail@plt+0xefa0>
   20270:	mov	r0, sl
   20274:	bl	1efcc <__assert_fail@plt+0xda74>
   20278:	ldr	r3, [sp, #212]	; 0xd4
   2027c:	ldr	r3, [r3]
   20280:	adds	r3, r3, #0
   20284:	movne	r3, #1
   20288:	cmp	r0, #0
   2028c:	movne	r3, #0
   20290:	cmp	r3, #0
   20294:	str	r0, [sp, #36]	; 0x24
   20298:	beq	1f508 <__assert_fail@plt+0xdfb0>
   2029c:	b	1f5b4 <__assert_fail@plt+0xe05c>
   202a0:	ldr	r2, [sp, #32]
   202a4:	add	r1, sl, #64	; 0x40
   202a8:	add	r0, sl, #56	; 0x38
   202ac:	bl	1b7c4 <__assert_fail@plt+0xa26c>
   202b0:	subs	r3, r0, #0
   202b4:	str	r3, [sp, #36]	; 0x24
   202b8:	beq	203d4 <__assert_fail@plt+0xee7c>
   202bc:	ldr	r3, [sl, #92]	; 0x5c
   202c0:	cmp	r3, #1
   202c4:	ldrbgt	r3, [sl, #88]	; 0x58
   202c8:	orrgt	r3, r3, #2
   202cc:	strbgt	r3, [sl, #88]	; 0x58
   202d0:	b	1f508 <__assert_fail@plt+0xdfb0>
   202d4:	ldr	r3, [sp, #44]	; 0x2c
   202d8:	sub	r2, r2, #35	; 0x23
   202dc:	clz	r2, r2
   202e0:	ldr	r1, [r3, #64]	; 0x40
   202e4:	ldr	r3, [sp, #212]	; 0xd4
   202e8:	lsr	r2, r2, #5
   202ec:	str	r2, [sp]
   202f0:	str	r3, [sp, #4]
   202f4:	ldr	r2, [pc, #512]	; 204fc <__assert_fail@plt+0xefa4>
   202f8:	ldr	r3, [pc, #512]	; 20500 <__assert_fail@plt+0xefa8>
   202fc:	b	20270 <__assert_fail@plt+0xed18>
   20300:	add	r5, sl, #56	; 0x38
   20304:	add	r6, sl, #64	; 0x40
   20308:	mov	r0, r5
   2030c:	mov	r1, r6
   20310:	ldr	r2, [sp, #32]
   20314:	bl	1b7c4 <__assert_fail@plt+0xa26c>
   20318:	subs	r3, r0, #0
   2031c:	str	r3, [sp, #36]	; 0x24
   20320:	beq	203d4 <__assert_fail@plt+0xee7c>
   20324:	ldr	r3, [sl, #92]	; 0x5c
   20328:	cmp	r3, #1
   2032c:	ble	1f508 <__assert_fail@plt+0xdfb0>
   20330:	ldr	r8, [sp, #44]	; 0x2c
   20334:	add	r4, sp, #136	; 0x88
   20338:	mov	r7, #0
   2033c:	mov	r9, #16
   20340:	ldr	r3, [r8, #40]	; 0x28
   20344:	ldr	r2, [r8, #56]	; 0x38
   20348:	cmp	r2, r3
   2034c:	ble	1f508 <__assert_fail@plt+0xdfb0>
   20350:	ldr	r2, [r8, #28]
   20354:	cmp	r3, r2
   20358:	beq	1f508 <__assert_fail@plt+0xdfb0>
   2035c:	ldr	r2, [r8, #8]
   20360:	ldr	r3, [r2, r3, lsl #2]
   20364:	cmn	r3, #1
   20368:	bne	1f508 <__assert_fail@plt+0xdfb0>
   2036c:	ldr	fp, [sp, #32]
   20370:	ldr	r2, [sp, #40]	; 0x28
   20374:	mov	r1, r8
   20378:	mov	r0, fp
   2037c:	bl	1ae5c <__assert_fail@plt+0x9904>
   20380:	ldr	r3, [r8, #40]	; 0x28
   20384:	mov	r2, fp
   20388:	mov	r1, r6
   2038c:	add	r3, r3, r0
   20390:	str	r3, [r8, #40]	; 0x28
   20394:	mov	r0, r5
   20398:	bl	1b7c4 <__assert_fail@plt+0xa26c>
   2039c:	str	r4, [sp]
   203a0:	ldr	r2, [sp, #36]	; 0x24
   203a4:	str	r7, [r4, #4]
   203a8:	mov	r1, r6
   203ac:	str	r7, [r4]
   203b0:	strb	r9, [sp, #140]	; 0x8c
   203b4:	mov	fp, r0
   203b8:	mov	r3, r0
   203bc:	mov	r0, r5
   203c0:	bl	18ca0 <__assert_fail@plt+0x7748>
   203c4:	cmp	r0, #0
   203c8:	cmpne	fp, #0
   203cc:	str	r0, [sp, #36]	; 0x24
   203d0:	bne	20340 <__assert_fail@plt+0xede8>
   203d4:	ldr	r2, [sp, #212]	; 0xd4
   203d8:	mov	r3, #12
   203dc:	str	r3, [r2]
   203e0:	mov	r3, #0
   203e4:	str	r3, [sp, #36]	; 0x24
   203e8:	b	1f550 <__assert_fail@plt+0xdff8>
   203ec:	ldr	r3, [sp, #32]
   203f0:	ldr	r2, [r3]
   203f4:	ldr	r3, [pc, #264]	; 20504 <__assert_fail@plt+0xefac>
   203f8:	and	r3, r3, r2
   203fc:	cmp	r3, #0
   20400:	beq	20410 <__assert_fail@plt+0xeeb8>
   20404:	ldrb	r3, [sl, #88]	; 0x58
   20408:	ands	r4, r3, #16
   2040c:	beq	20938 <__assert_fail@plt+0xf3e0>
   20410:	sub	r3, r2, #256	; 0x100
   20414:	bics	r3, r3, #256	; 0x100
   20418:	bne	21378 <__assert_fail@plt+0xfe20>
   2041c:	cmp	r2, #256	; 0x100
   20420:	beq	21344 <__assert_fail@plt+0xfdec>
   20424:	ldr	r6, [sp, #32]
   20428:	mov	r3, #5
   2042c:	add	r5, sl, #56	; 0x38
   20430:	add	sl, sl, #64	; 0x40
   20434:	str	r3, [r6]
   20438:	mov	r2, r6
   2043c:	mov	r1, sl
   20440:	mov	r0, r5
   20444:	bl	1b7c4 <__assert_fail@plt+0xa26c>
   20448:	mov	r3, #10
   2044c:	str	r3, [r6]
   20450:	mov	r4, r0
   20454:	ldr	r2, [sp, #32]
   20458:	mov	r1, sl
   2045c:	mov	r0, r5
   20460:	bl	1b7c4 <__assert_fail@plt+0xa26c>
   20464:	mov	r2, #0
   20468:	add	ip, sp, #136	; 0x88
   2046c:	str	r2, [sp, #140]	; 0x8c
   20470:	str	ip, [sp]
   20474:	str	r2, [sp, #136]	; 0x88
   20478:	mov	ip, #10
   2047c:	mov	r1, sl
   20480:	mov	r2, r4
   20484:	strb	ip, [sp, #140]	; 0x8c
   20488:	mov	r7, r0
   2048c:	mov	r3, r7
   20490:	mov	r0, r5
   20494:	bl	18ca0 <__assert_fail@plt+0x7748>
   20498:	cmp	r7, #0
   2049c:	cmpne	r4, #0
   204a0:	moveq	r3, #1
   204a4:	movne	r3, #0
   204a8:	cmp	r0, #0
   204ac:	orreq	r3, r3, #1
   204b0:	cmp	r3, #0
   204b4:	str	r0, [sp, #36]	; 0x24
   204b8:	bne	203d4 <__assert_fail@plt+0xee7c>
   204bc:	ldr	r4, [sp, #44]	; 0x2c
   204c0:	ldr	r2, [sp, #40]	; 0x28
   204c4:	ldr	r0, [sp, #32]
   204c8:	mov	r1, r4
   204cc:	bl	1ae5c <__assert_fail@plt+0x9904>
   204d0:	ldr	r3, [r4, #40]	; 0x28
   204d4:	add	r3, r3, r0
   204d8:	str	r3, [r4, #40]	; 0x28
   204dc:	ldr	r0, [sp, #36]	; 0x24
   204e0:	add	sp, sp, #172	; 0xac
   204e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   204e8:	addeq	r0, ip, r0, lsl #16
   204ec:	andeq	r8, r0, r0, lsr r0
   204f0:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   204f4:	strdeq	sp, [r2], -ip
   204f8:	andeq	sp, r2, r4, asr #4
   204fc:	andeq	sp, r2, ip, lsl #4
   20500:			; <UNDEFINED> instruction: 0x0002c7b0
   20504:	andeq	r0, r0, pc, lsl #6
   20508:	mvnseq	r0, #0
   2050c:	mov	r3, #0
   20510:	mov	r1, #1
   20514:	mov	r0, #32
   20518:	str	r3, [sp, #76]	; 0x4c
   2051c:	bl	2b604 <__assert_fail@plt+0x1a0ac>
   20520:	mov	r1, #1
   20524:	mov	fp, r0
   20528:	mov	r0, #40	; 0x28
   2052c:	bl	2b604 <__assert_fail@plt+0x1a0ac>
   20530:	cmp	r0, #0
   20534:	cmpne	fp, #0
   20538:	moveq	r3, #1
   2053c:	movne	r3, #0
   20540:	mov	r9, r0
   20544:	str	r3, [sp, #24]
   20548:	beq	20918 <__assert_fail@plt+0xf3c0>
   2054c:	ldr	r4, [sp, #32]
   20550:	ldr	r2, [sp, #40]	; 0x28
   20554:	ldr	r1, [sp, #44]	; 0x2c
   20558:	mov	r0, r4
   2055c:	bl	17e18 <__assert_fail@plt+0x68c0>
   20560:	ldrb	r3, [r4, #4]
   20564:	cmp	r3, #2
   20568:	mov	r8, r0
   2056c:	beq	208c4 <__assert_fail@plt+0xf36c>
   20570:	cmp	r3, #25
   20574:	beq	20870 <__assert_fail@plt+0xf318>
   20578:	ldr	r2, [sp, #24]
   2057c:	str	r2, [sp, #48]	; 0x30
   20580:	cmp	r3, #21
   20584:	moveq	r3, #1
   20588:	ldreq	r2, [sp, #32]
   2058c:	ldr	r6, [sp, #44]	; 0x2c
   20590:	ldr	r4, [sp, #32]
   20594:	strbeq	r3, [r2, #4]
   20598:	mov	r3, #0
   2059c:	mov	r2, r3
   205a0:	str	r3, [sp, #36]	; 0x24
   205a4:	ldr	r3, [sp, #40]	; 0x28
   205a8:	mov	lr, #1
   205ac:	str	r2, [sp, #28]
   205b0:	lsr	r3, r3, #16
   205b4:	and	r3, r3, lr
   205b8:	str	r3, [sp, #68]	; 0x44
   205bc:	ldr	r3, [r6, #80]	; 0x50
   205c0:	add	r2, sp, #104	; 0x68
   205c4:	cmp	r3, #1
   205c8:	str	r3, [sp, #52]	; 0x34
   205cc:	str	r2, [sp, #84]	; 0x54
   205d0:	ldr	r3, [r6, #40]	; 0x28
   205d4:	beq	207c0 <__assert_fail@plt+0xf268>
   205d8:	ldr	r2, [r6, #28]
   205dc:	add	r1, r3, #1
   205e0:	cmp	r1, r2
   205e4:	bge	207c0 <__assert_fail@plt+0xf268>
   205e8:	ldr	ip, [r6, #8]
   205ec:	add	r0, ip, r1, lsl #2
   205f0:	ldr	r1, [ip, r1, lsl #2]
   205f4:	cmn	r1, #1
   205f8:	subeq	r2, r2, r3
   205fc:	moveq	ip, r0
   20600:	moveq	r1, #1
   20604:	beq	20618 <__assert_fail@plt+0xf0c0>
   20608:	b	207c0 <__assert_fail@plt+0xf268>
   2060c:	ldr	r5, [ip, #4]!
   20610:	cmn	r5, #1
   20614:	bne	20628 <__assert_fail@plt+0xf0d0>
   20618:	add	r1, r1, #1
   2061c:	cmp	r1, r2
   20620:	add	lr, r1, r3
   20624:	bne	2060c <__assert_fail@plt+0xf0b4>
   20628:	ldr	r3, [r0, #-4]
   2062c:	mov	r5, #1
   20630:	str	lr, [r6, #40]	; 0x28
   20634:	str	r3, [sp, #84]	; 0x54
   20638:	ldr	r2, [sp, #40]	; 0x28
   2063c:	mov	r1, r6
   20640:	mov	r0, r4
   20644:	bl	17e18 <__assert_fail@plt+0x68c0>
   20648:	mov	r8, r0
   2064c:	ldrb	r3, [r4, #4]
   20650:	cmp	r3, #2
   20654:	beq	20f2c <__assert_fail@plt+0xf9d4>
   20658:	cmp	r3, #22
   2065c:	beq	20cf8 <__assert_fail@plt+0xf7a0>
   20660:	cmp	r5, #2
   20664:	beq	20e80 <__assert_fail@plt+0xf928>
   20668:	cmp	r5, #3
   2066c:	beq	20e80 <__assert_fail@plt+0xf928>
   20670:	cmp	r5, #1
   20674:	beq	20cd0 <__assert_fail@plt+0xf778>
   20678:	ldrb	r3, [sp, #84]	; 0x54
   2067c:	mov	r0, #1
   20680:	and	r1, r3, #31
   20684:	asr	r3, r3, #5
   20688:	ldr	r2, [fp, r3, lsl #2]
   2068c:	orr	r2, r2, r0, lsl r1
   20690:	str	r2, [fp, r3, lsl #2]
   20694:	ldrb	r3, [r4, #4]
   20698:	cmp	r3, #2
   2069c:	beq	20f2c <__assert_fail@plt+0xf9d4>
   206a0:	cmp	r3, #21
   206a4:	beq	2098c <__assert_fail@plt+0xf434>
   206a8:	ldr	lr, [sp, #24]
   206ac:	b	205bc <__assert_fail@plt+0xf064>
   206b0:	ldr	r2, [sp, #212]	; 0xd4
   206b4:	mov	r3, #5
   206b8:	str	r3, [r2]
   206bc:	mov	r3, #0
   206c0:	str	r3, [sp, #36]	; 0x24
   206c4:	ldr	r0, [sp, #36]	; 0x24
   206c8:	add	sp, sp, #172	; 0xac
   206cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   206d0:	ldr	r5, [r1, #24]
   206d4:	ldr	r7, [sp, #44]	; 0x2c
   206d8:	ldr	r8, [sp, #32]
   206dc:	ldr	r9, [sp, #40]	; 0x28
   206e0:	add	r3, r5, #1
   206e4:	str	r3, [r1, #24]
   206e8:	orr	r2, r9, #8388608	; 0x800000
   206ec:	mov	r1, r7
   206f0:	mov	r0, r8
   206f4:	bl	1ae5c <__assert_fail@plt+0x9904>
   206f8:	ldrb	r2, [r8, #4]
   206fc:	ldr	r3, [r7, #40]	; 0x28
   20700:	mov	r1, r7
   20704:	cmp	r2, #9
   20708:	add	r6, r6, #1
   2070c:	add	r3, r3, r0
   20710:	str	r3, [r7, #40]	; 0x28
   20714:	mov	r0, r7
   20718:	bne	1f55c <__assert_fail@plt+0xe004>
   2071c:	mov	r2, #0
   20720:	cmp	r5, #8
   20724:	movls	r1, #1
   20728:	ldrls	r3, [sl, #84]	; 0x54
   2072c:	mov	r0, #0
   20730:	orrls	r3, r3, r1, lsl r5
   20734:	add	ip, sp, #136	; 0x88
   20738:	strls	r3, [sl, #84]	; 0x54
   2073c:	mov	lr, #17
   20740:	mov	r3, r0
   20744:	str	r0, [sp, #140]	; 0x8c
   20748:	str	r0, [sp, #136]	; 0x88
   2074c:	str	ip, [sp]
   20750:	add	r1, sl, #64	; 0x40
   20754:	add	r0, sl, #56	; 0x38
   20758:	strb	lr, [sp, #140]	; 0x8c
   2075c:	bl	18ca0 <__assert_fail@plt+0x7748>
   20760:	subs	r3, r0, #0
   20764:	str	r3, [sp, #36]	; 0x24
   20768:	beq	203d4 <__assert_fail@plt+0xee7c>
   2076c:	str	r5, [r3, #20]
   20770:	b	1f508 <__assert_fail@plt+0xdfb0>
   20774:	ldr	r3, [sp, #40]	; 0x28
   20778:	ands	r2, r3, #131072	; 0x20000
   2077c:	bne	1f4e4 <__assert_fail@plt+0xdf8c>
   20780:	str	r2, [sp, #36]	; 0x24
   20784:	ldr	r2, [sp, #212]	; 0xd4
   20788:	mov	r3, #16
   2078c:	str	r3, [r2]
   20790:	b	1f550 <__assert_fail@plt+0xdff8>
   20794:	str	ip, [r6]
   20798:	mov	r5, fp
   2079c:	b	1fd50 <__assert_fail@plt+0xe7f8>
   207a0:	ldr	r5, [sp, #36]	; 0x24
   207a4:	mov	r8, r5
   207a8:	b	1fdf0 <__assert_fail@plt+0xe898>
   207ac:	ldr	r3, [sp, #60]	; 0x3c
   207b0:	ldr	r5, [sp, #20]
   207b4:	cmp	r3, #0
   207b8:	bne	1fb84 <__assert_fail@plt+0xe62c>
   207bc:	b	20854 <__assert_fail@plt+0xf2fc>
   207c0:	ldrb	r2, [r4, #4]
   207c4:	add	r8, r8, r3
   207c8:	str	r8, [r6, #40]	; 0x28
   207cc:	and	r3, r2, #251	; 0xfb
   207d0:	cmp	r2, #28
   207d4:	cmpne	r3, #26
   207d8:	beq	21220 <__assert_fail@plt+0xfcc8>
   207dc:	cmp	r2, #22
   207e0:	moveq	r2, lr
   207e4:	orrne	r2, lr, #1
   207e8:	cmp	r2, #0
   207ec:	beq	21200 <__assert_fail@plt+0xfca8>
   207f0:	ldrb	r3, [r4]
   207f4:	mov	r5, #0
   207f8:	strb	r3, [sp, #84]	; 0x54
   207fc:	b	20638 <__assert_fail@plt+0xf0e0>
   20800:	cmn	r8, #2
   20804:	mov	r2, r8
   20808:	mov	r4, r5
   2080c:	movne	r2, #0
   20810:	moveq	r2, #1
   20814:	orrs	r2, r4, r2
   20818:	ldr	r5, [sp, #20]
   2081c:	str	r8, [sp, #24]
   20820:	bne	1fb78 <__assert_fail@plt+0xe620>
   20824:	ldr	r2, [sp, #24]
   20828:	cmn	r2, #1
   2082c:	cmpne	r9, r2
   20830:	bgt	200e0 <__assert_fail@plt+0xeb88>
   20834:	cmp	r3, #24
   20838:	beq	1ffa8 <__assert_fail@plt+0xea50>
   2083c:	ldr	r2, [sp, #212]	; 0xd4
   20840:	mov	r3, #10
   20844:	str	r3, [r2]
   20848:	b	1f954 <__assert_fail@plt+0xe3fc>
   2084c:	cmp	r3, #2
   20850:	bne	200e0 <__assert_fail@plt+0xeb88>
   20854:	ldr	r2, [sp, #212]	; 0xd4
   20858:	mov	r3, #9
   2085c:	str	r3, [r2]
   20860:	b	1f954 <__assert_fail@plt+0xe3fc>
   20864:	mov	r8, r7
   20868:	ldr	r0, [sp, #32]
   2086c:	b	20144 <__assert_fail@plt+0xebec>
   20870:	ldrb	r3, [r9, #16]
   20874:	ldr	r2, [sp, #40]	; 0x28
   20878:	ldr	r1, [sp, #44]	; 0x2c
   2087c:	tst	r2, #256	; 0x100
   20880:	orr	r3, r3, #1
   20884:	strb	r3, [r9, #16]
   20888:	ldrne	r3, [fp]
   2088c:	ldr	r4, [sp, #32]
   20890:	orrne	r3, r3, #1024	; 0x400
   20894:	strne	r3, [fp]
   20898:	ldr	r3, [r1, #40]	; 0x28
   2089c:	add	r3, r3, r0
   208a0:	str	r3, [r1, #40]	; 0x28
   208a4:	mov	r0, r4
   208a8:	bl	17e18 <__assert_fail@plt+0x68c0>
   208ac:	ldrb	r3, [r4, #4]
   208b0:	cmp	r3, #2
   208b4:	mov	r8, r0
   208b8:	movne	r2, #1
   208bc:	strne	r2, [sp, #48]	; 0x30
   208c0:	bne	20580 <__assert_fail@plt+0xf028>
   208c4:	ldr	r2, [sp, #212]	; 0xd4
   208c8:	mov	r3, #2
   208cc:	str	r3, [r2]
   208d0:	mov	r0, fp
   208d4:	bl	13c04 <__assert_fail@plt+0x26ac>
   208d8:	ldr	r0, [r9]
   208dc:	bl	13c04 <__assert_fail@plt+0x26ac>
   208e0:	ldr	r0, [r9, #4]
   208e4:	bl	13c04 <__assert_fail@plt+0x26ac>
   208e8:	ldr	r0, [r9, #8]
   208ec:	bl	13c04 <__assert_fail@plt+0x26ac>
   208f0:	ldr	r0, [r9, #12]
   208f4:	bl	13c04 <__assert_fail@plt+0x26ac>
   208f8:	mov	r0, r9
   208fc:	bl	13c04 <__assert_fail@plt+0x26ac>
   20900:	ldr	r3, [sp, #212]	; 0xd4
   20904:	ldr	r3, [r3]
   20908:	cmp	r3, #0
   2090c:	bne	1f5b4 <__assert_fail@plt+0xe05c>
   20910:	str	r3, [sp, #36]	; 0x24
   20914:	b	1f508 <__assert_fail@plt+0xdfb0>
   20918:	mov	r0, fp
   2091c:	bl	13c04 <__assert_fail@plt+0x26ac>
   20920:	mov	r0, r9
   20924:	bl	13c04 <__assert_fail@plt+0x26ac>
   20928:	ldr	r2, [sp, #212]	; 0xd4
   2092c:	mov	r3, #12
   20930:	str	r3, [r2]
   20934:	b	1f5b4 <__assert_fail@plt+0xe05c>
   20938:	orr	r3, r3, #16
   2093c:	ands	r2, r3, #8
   20940:	mov	r1, r3
   20944:	strb	r3, [sl, #88]	; 0x58
   20948:	bne	20cc8 <__assert_fail@plt+0xf770>
   2094c:	ldr	r3, [pc, #-1100]	; 20508 <__assert_fail@plt+0xefb0>
   20950:	tst	r1, #4
   20954:	str	r3, [sl, #100]	; 0x64
   20958:	mvn	r1, #2013265921	; 0x78000001
   2095c:	mvn	r3, #-134217727	; 0xf8000001
   20960:	str	r2, [sl, #96]	; 0x60
   20964:	str	r1, [sl, #104]	; 0x68
   20968:	str	r3, [sl, #108]	; 0x6c
   2096c:	beq	20c48 <__assert_fail@plt+0xf6f0>
   20970:	ldr	r3, [sp, #32]
   20974:	str	r2, [sl, #112]	; 0x70
   20978:	str	r2, [sl, #116]	; 0x74
   2097c:	str	r2, [sl, #120]	; 0x78
   20980:	str	r2, [sl, #124]	; 0x7c
   20984:	ldr	r2, [r3]
   20988:	b	20410 <__assert_fail@plt+0xeeb8>
   2098c:	ldr	r2, [sp, #44]	; 0x2c
   20990:	ldr	r1, [sp, #48]	; 0x30
   20994:	ldr	r3, [r2, #40]	; 0x28
   20998:	cmp	r1, #0
   2099c:	add	r3, r3, r8
   209a0:	str	r3, [r2, #40]	; 0x28
   209a4:	beq	20a04 <__assert_fail@plt+0xf4ac>
   209a8:	ldm	fp, {r2, r3}
   209ac:	ldr	r1, [fp, #8]
   209b0:	mvn	r2, r2
   209b4:	mvn	r3, r3
   209b8:	str	r2, [fp]
   209bc:	str	r3, [fp, #4]
   209c0:	ldr	r2, [fp, #12]
   209c4:	ldr	r3, [fp, #16]
   209c8:	mvn	r1, r1
   209cc:	mvn	r2, r2
   209d0:	mvn	r3, r3
   209d4:	str	r1, [fp, #8]
   209d8:	str	r2, [fp, #12]
   209dc:	ldr	r1, [fp, #20]
   209e0:	ldr	r2, [fp, #24]
   209e4:	str	r3, [fp, #16]
   209e8:	ldr	r3, [fp, #28]
   209ec:	mvn	r1, r1
   209f0:	mvn	r2, r2
   209f4:	mvn	r3, r3
   209f8:	str	r1, [fp, #20]
   209fc:	str	r2, [fp, #24]
   20a00:	str	r3, [fp, #28]
   20a04:	ldr	r0, [sl, #92]	; 0x5c
   20a08:	cmp	r0, #1
   20a0c:	ble	20a90 <__assert_fail@plt+0xf538>
   20a10:	ldr	r3, [sl, #60]	; 0x3c
   20a14:	ldm	fp, {r1, r2}
   20a18:	ldr	ip, [r3]
   20a1c:	and	r1, r1, ip
   20a20:	str	r1, [fp]
   20a24:	ldr	ip, [r3, #4]
   20a28:	ldr	r1, [fp, #8]
   20a2c:	and	r2, r2, ip
   20a30:	str	r2, [fp, #4]
   20a34:	ldr	ip, [r3, #8]
   20a38:	ldr	r2, [fp, #12]
   20a3c:	and	r1, r1, ip
   20a40:	str	r1, [fp, #8]
   20a44:	ldr	ip, [r3, #12]
   20a48:	ldr	r1, [fp, #16]
   20a4c:	and	r2, r2, ip
   20a50:	str	r2, [fp, #12]
   20a54:	ldr	ip, [r3, #16]
   20a58:	ldr	r2, [fp, #20]
   20a5c:	and	r1, r1, ip
   20a60:	str	r1, [fp, #16]
   20a64:	ldr	ip, [r3, #20]
   20a68:	ldr	r1, [fp, #24]
   20a6c:	and	r2, r2, ip
   20a70:	str	r2, [fp, #20]
   20a74:	ldr	ip, [r3, #24]
   20a78:	ldr	r2, [fp, #28]
   20a7c:	and	r1, r1, ip
   20a80:	str	r1, [fp, #24]
   20a84:	ldr	r3, [r3, #28]
   20a88:	and	r3, r3, r2
   20a8c:	str	r3, [fp, #28]
   20a90:	ldr	r3, [r9, #20]
   20a94:	cmp	r3, #0
   20a98:	bne	20ae0 <__assert_fail@plt+0xf588>
   20a9c:	ldr	r3, [r9, #24]
   20aa0:	cmp	r3, #0
   20aa4:	bne	20ae0 <__assert_fail@plt+0xf588>
   20aa8:	ldr	r3, [r9, #28]
   20aac:	cmp	r3, #0
   20ab0:	bne	20ae0 <__assert_fail@plt+0xf588>
   20ab4:	ldr	r3, [r9, #32]
   20ab8:	cmp	r3, #0
   20abc:	bne	20ae0 <__assert_fail@plt+0xf588>
   20ac0:	cmp	r0, #1
   20ac4:	ble	20b88 <__assert_fail@plt+0xf630>
   20ac8:	ldr	r3, [r9, #36]	; 0x24
   20acc:	cmp	r3, #0
   20ad0:	bne	20ae0 <__assert_fail@plt+0xf588>
   20ad4:	ldrb	r3, [r9, #16]
   20ad8:	tst	r3, #1
   20adc:	beq	20b88 <__assert_fail@plt+0xf630>
   20ae0:	ldrb	r3, [sl, #88]	; 0x58
   20ae4:	add	r4, sl, #56	; 0x38
   20ae8:	add	r5, sl, #64	; 0x40
   20aec:	orr	r3, r3, #2
   20af0:	strb	r3, [sl, #88]	; 0x58
   20af4:	mov	r0, r4
   20af8:	mov	r3, #6
   20afc:	mov	r1, r5
   20b00:	add	r2, sp, #104	; 0x68
   20b04:	strb	r3, [sp, #108]	; 0x6c
   20b08:	str	r9, [sp, #104]	; 0x68
   20b0c:	bl	1b7c4 <__assert_fail@plt+0xa26c>
   20b10:	subs	r3, r0, #0
   20b14:	str	r3, [sp, #36]	; 0x24
   20b18:	beq	20bd8 <__assert_fail@plt+0xf680>
   20b1c:	ldr	r3, [fp]
   20b20:	cmp	r3, #0
   20b24:	bne	20be8 <__assert_fail@plt+0xf690>
   20b28:	ldr	r3, [fp, #4]
   20b2c:	cmp	r3, #0
   20b30:	bne	20be8 <__assert_fail@plt+0xf690>
   20b34:	ldr	r3, [fp, #8]
   20b38:	cmp	r3, #0
   20b3c:	bne	20be8 <__assert_fail@plt+0xf690>
   20b40:	ldr	r3, [fp, #12]
   20b44:	cmp	r3, #0
   20b48:	bne	20be8 <__assert_fail@plt+0xf690>
   20b4c:	ldr	r3, [fp, #16]
   20b50:	cmp	r3, #0
   20b54:	bne	20be8 <__assert_fail@plt+0xf690>
   20b58:	ldr	r3, [fp, #20]
   20b5c:	cmp	r3, #0
   20b60:	bne	20be8 <__assert_fail@plt+0xf690>
   20b64:	ldr	r3, [fp, #24]
   20b68:	cmp	r3, #0
   20b6c:	bne	20be8 <__assert_fail@plt+0xf690>
   20b70:	ldr	r3, [fp, #28]
   20b74:	cmp	r3, #0
   20b78:	bne	20be8 <__assert_fail@plt+0xf690>
   20b7c:	mov	r0, fp
   20b80:	bl	13c04 <__assert_fail@plt+0x26ac>
   20b84:	b	1f508 <__assert_fail@plt+0xdfb0>
   20b88:	ldr	r0, [r9]
   20b8c:	bl	13c04 <__assert_fail@plt+0x26ac>
   20b90:	ldr	r0, [r9, #4]
   20b94:	bl	13c04 <__assert_fail@plt+0x26ac>
   20b98:	ldr	r0, [r9, #8]
   20b9c:	bl	13c04 <__assert_fail@plt+0x26ac>
   20ba0:	ldr	r0, [r9, #12]
   20ba4:	bl	13c04 <__assert_fail@plt+0x26ac>
   20ba8:	mov	r0, r9
   20bac:	bl	13c04 <__assert_fail@plt+0x26ac>
   20bb0:	mov	r3, #3
   20bb4:	add	r2, sp, #104	; 0x68
   20bb8:	add	r1, sl, #64	; 0x40
   20bbc:	add	r0, sl, #56	; 0x38
   20bc0:	strb	r3, [sp, #108]	; 0x6c
   20bc4:	str	fp, [sp, #104]	; 0x68
   20bc8:	bl	1b7c4 <__assert_fail@plt+0xa26c>
   20bcc:	subs	r3, r0, #0
   20bd0:	str	r3, [sp, #36]	; 0x24
   20bd4:	bne	1f508 <__assert_fail@plt+0xdfb0>
   20bd8:	mov	r3, #12
   20bdc:	ldr	r2, [sp, #212]	; 0xd4
   20be0:	str	r3, [r2]
   20be4:	b	208d0 <__assert_fail@plt+0xf378>
   20be8:	add	r2, sp, #104	; 0x68
   20bec:	mov	r3, #3
   20bf0:	mov	r1, r5
   20bf4:	mov	r0, r4
   20bf8:	str	fp, [sp, #104]	; 0x68
   20bfc:	strb	r3, [sp, #108]	; 0x6c
   20c00:	bl	1b7c4 <__assert_fail@plt+0xa26c>
   20c04:	subs	r2, r0, #0
   20c08:	beq	20bd8 <__assert_fail@plt+0xf680>
   20c0c:	add	ip, sp, #136	; 0x88
   20c10:	mov	lr, #0
   20c14:	ldr	r3, [sp, #36]	; 0x24
   20c18:	mov	r0, r4
   20c1c:	mov	r1, r5
   20c20:	str	ip, [sp]
   20c24:	mov	r4, #10
   20c28:	str	lr, [sp, #140]	; 0x8c
   20c2c:	str	lr, [sp, #136]	; 0x88
   20c30:	strb	r4, [sp, #140]	; 0x8c
   20c34:	bl	18ca0 <__assert_fail@plt+0x7748>
   20c38:	subs	r3, r0, #0
   20c3c:	str	r3, [sp, #36]	; 0x24
   20c40:	bne	1f508 <__assert_fail@plt+0xdfb0>
   20c44:	b	20bd8 <__assert_fail@plt+0xf680>
   20c48:	mov	r4, #128	; 0x80
   20c4c:	mov	r5, #4
   20c50:	bl	113fc <__ctype_b_loc@plt>
   20c54:	sub	r3, r4, #-2147483647	; 0x80000001
   20c58:	mov	ip, #1
   20c5c:	add	r2, r5, #24
   20c60:	add	r2, sl, r2, lsl #2
   20c64:	ldr	r1, [r0]
   20c68:	add	r1, r1, r3, lsl ip
   20c6c:	mov	r6, r1
   20c70:	mov	r3, #0
   20c74:	ldrh	r0, [r6, #2]!
   20c78:	add	lr, r3, r4
   20c7c:	lsr	r0, r0, #3
   20c80:	cmp	lr, #95	; 0x5f
   20c84:	orreq	r0, r0, #1
   20c88:	tst	r0, #1
   20c8c:	ldrne	r0, [r2]
   20c90:	orrne	r0, r0, ip, lsl r3
   20c94:	add	r3, r3, #1
   20c98:	strne	r0, [r2]
   20c9c:	cmp	r3, #32
   20ca0:	bne	20c74 <__assert_fail@plt+0xf71c>
   20ca4:	add	r5, r5, #1
   20ca8:	cmp	r5, #8
   20cac:	add	r4, r4, #32
   20cb0:	add	r1, r1, #64	; 0x40
   20cb4:	add	r2, r2, #4
   20cb8:	bne	20c6c <__assert_fail@plt+0xf714>
   20cbc:	ldr	r3, [sp, #32]
   20cc0:	ldr	r2, [r3]
   20cc4:	b	20410 <__assert_fail@plt+0xeeb8>
   20cc8:	mov	r5, r4
   20ccc:	b	20c50 <__assert_fail@plt+0xf6f8>
   20cd0:	ldr	r3, [r9, #20]
   20cd4:	ldr	r2, [sp, #28]
   20cd8:	cmp	r3, r2
   20cdc:	beq	20f34 <__assert_fail@plt+0xf9dc>
   20ce0:	ldr	r0, [r9]
   20ce4:	ldr	r2, [sp, #84]	; 0x54
   20ce8:	add	r1, r3, #1
   20cec:	str	r1, [r9, #20]
   20cf0:	str	r2, [r0, r3, lsl #2]
   20cf4:	b	20694 <__assert_fail@plt+0xf13c>
   20cf8:	ldr	r3, [r6, #40]	; 0x28
   20cfc:	mov	r1, r6
   20d00:	add	r3, r3, r8
   20d04:	ldr	r2, [sp, #40]	; 0x28
   20d08:	str	r3, [r6, #40]	; 0x28
   20d0c:	add	r0, sp, #96	; 0x60
   20d10:	bl	17e18 <__assert_fail@plt+0x68c0>
   20d14:	ldrb	r1, [sp, #100]	; 0x64
   20d18:	cmp	r1, #2
   20d1c:	mov	r7, r0
   20d20:	beq	20f2c <__assert_fail@plt+0xf9d4>
   20d24:	cmp	r1, #21
   20d28:	beq	2116c <__assert_fail@plt+0xfc14>
   20d2c:	ldr	r3, [r6, #80]	; 0x50
   20d30:	add	r2, sp, #136	; 0x88
   20d34:	cmp	r3, #1
   20d38:	str	r3, [sp, #56]	; 0x38
   20d3c:	str	r2, [sp, #92]	; 0x5c
   20d40:	ldr	r3, [r6, #40]	; 0x28
   20d44:	beq	21130 <__assert_fail@plt+0xfbd8>
   20d48:	ldr	r2, [r6, #28]
   20d4c:	add	r0, r3, #1
   20d50:	cmp	r2, r0
   20d54:	ble	21130 <__assert_fail@plt+0xfbd8>
   20d58:	ldr	lr, [r6, #8]
   20d5c:	add	ip, lr, r0, lsl #2
   20d60:	ldr	r0, [lr, r0, lsl #2]
   20d64:	cmn	r0, #1
   20d68:	subeq	r2, r2, r3
   20d6c:	moveq	r0, ip
   20d70:	moveq	r1, #1
   20d74:	bne	21130 <__assert_fail@plt+0xfbd8>
   20d78:	add	r1, r1, #1
   20d7c:	cmp	r1, r2
   20d80:	add	lr, r1, r3
   20d84:	beq	20d94 <__assert_fail@plt+0xf83c>
   20d88:	ldr	r7, [r0, #4]!
   20d8c:	cmn	r7, #1
   20d90:	beq	20d78 <__assert_fail@plt+0xf820>
   20d94:	ldr	r3, [ip, #-4]
   20d98:	mov	r7, #1
   20d9c:	str	r3, [sp, #92]	; 0x5c
   20da0:	ldr	r3, [sp, #24]
   20da4:	str	lr, [r6, #40]	; 0x28
   20da8:	str	r3, [sp, #20]
   20dac:	ldr	r2, [sp, #40]	; 0x28
   20db0:	mov	r1, r6
   20db4:	mov	r0, r4
   20db8:	bl	17e18 <__assert_fail@plt+0x68c0>
   20dbc:	sub	r3, r5, #2
   20dc0:	bics	r3, r3, #2
   20dc4:	mov	r8, r0
   20dc8:	beq	21128 <__assert_fail@plt+0xfbd0>
   20dcc:	cmp	r5, #3
   20dd0:	moveq	r3, #1
   20dd4:	movne	r3, #0
   20dd8:	str	r3, [sp, #52]	; 0x34
   20ddc:	beq	21110 <__assert_fail@plt+0xfbb8>
   20de0:	cmp	r7, #3
   20de4:	beq	210f4 <__assert_fail@plt+0xfb9c>
   20de8:	cmp	r5, #0
   20dec:	bne	210e0 <__assert_fail@plt+0xfb88>
   20df0:	ldrb	r3, [sp, #84]	; 0x54
   20df4:	cmp	r7, #0
   20df8:	bne	210cc <__assert_fail@plt+0xfb74>
   20dfc:	ldrb	r7, [sp, #92]	; 0x5c
   20e00:	ldr	r2, [sp, #52]	; 0x34
   20e04:	cmp	r5, #0
   20e08:	orreq	r2, r2, #1
   20e0c:	cmp	r2, #0
   20e10:	beq	210c4 <__assert_fail@plt+0xfb6c>
   20e14:	ldr	r2, [sl, #92]	; 0x5c
   20e18:	cmp	r2, #1
   20e1c:	ble	20f78 <__assert_fail@plt+0xfa20>
   20e20:	mov	r0, r3
   20e24:	bl	11468 <btowc@plt>
   20e28:	mov	r3, r0
   20e2c:	ldr	r2, [sp, #20]
   20e30:	cmp	r2, #0
   20e34:	beq	20f70 <__assert_fail@plt+0xfa18>
   20e38:	ldr	r2, [sl, #92]	; 0x5c
   20e3c:	cmp	r2, #1
   20e40:	ble	20e58 <__assert_fail@plt+0xf900>
   20e44:	mov	r0, r7
   20e48:	str	r3, [sp, #20]
   20e4c:	bl	11468 <btowc@plt>
   20e50:	ldr	r3, [sp, #20]
   20e54:	mov	r7, r0
   20e58:	cmn	r3, #1
   20e5c:	cmnne	r7, #1
   20e60:	bne	20f84 <__assert_fail@plt+0xfa2c>
   20e64:	mov	r3, #3
   20e68:	b	20bdc <__assert_fail@plt+0xf684>
   20e6c:	ldr	r2, [sp, #40]	; 0x28
   20e70:	mov	r1, r6
   20e74:	mov	r0, r4
   20e78:	bl	17e18 <__assert_fail@plt+0x68c0>
   20e7c:	mov	r8, r0
   20e80:	ldr	r5, [sp, #84]	; 0x54
   20e84:	mov	r0, r5
   20e88:	bl	11414 <strlen@plt>
   20e8c:	cmp	r0, #1
   20e90:	bne	20f60 <__assert_fail@plt+0xfa08>
   20e94:	ldrb	r3, [r5]
   20e98:	ldr	r2, [sp, #212]	; 0xd4
   20e9c:	mov	r1, #0
   20ea0:	str	r1, [r2]
   20ea4:	and	r1, r3, #31
   20ea8:	asr	r3, r3, #5
   20eac:	ldr	r2, [fp, r3, lsl #2]
   20eb0:	orr	r2, r2, r0, lsl r1
   20eb4:	str	r2, [fp, r3, lsl #2]
   20eb8:	b	20694 <__assert_fail@plt+0xf13c>
   20ebc:	ldr	r2, [r6, #56]	; 0x38
   20ec0:	ldrb	r0, [sp, #96]	; 0x60
   20ec4:	cmp	r3, r2
   20ec8:	str	r2, [sp, #64]	; 0x40
   20ecc:	str	r0, [sp, #60]	; 0x3c
   20ed0:	bge	20f2c <__assert_fail@plt+0xf9d4>
   20ed4:	mov	lr, #0
   20ed8:	add	r2, sp, #136	; 0x88
   20edc:	str	r2, [sp, #52]	; 0x34
   20ee0:	cmp	r1, #30
   20ee4:	beq	213d8 <__assert_fail@plt+0xfe80>
   20ee8:	ldr	r2, [r6, #4]
   20eec:	add	r0, r3, #1
   20ef0:	str	r0, [r6, #40]	; 0x28
   20ef4:	ldrb	r2, [r2, r3]
   20ef8:	mov	r3, r0
   20efc:	ldr	r0, [sp, #64]	; 0x40
   20f00:	cmp	r0, r3
   20f04:	ble	20f2c <__assert_fail@plt+0xf9d4>
   20f08:	ldr	r0, [sp, #60]	; 0x3c
   20f0c:	cmp	r0, r2
   20f10:	beq	21398 <__assert_fail@plt+0xfe40>
   20f14:	ldr	r0, [sp, #52]	; 0x34
   20f18:	add	lr, lr, #1
   20f1c:	cmp	lr, #32
   20f20:	strb	r2, [r0], #1
   20f24:	str	r0, [sp, #52]	; 0x34
   20f28:	bne	20ee0 <__assert_fail@plt+0xf988>
   20f2c:	mov	r3, #7
   20f30:	b	20bdc <__assert_fail@plt+0xf684>
   20f34:	lsl	r3, r2, #1
   20f38:	add	r3, r3, #1
   20f3c:	ldr	r0, [r9]
   20f40:	lsl	r1, r3, #2
   20f44:	str	r3, [sp, #28]
   20f48:	bl	2b678 <__assert_fail@plt+0x1a120>
   20f4c:	cmp	r0, #0
   20f50:	beq	20bd8 <__assert_fail@plt+0xf680>
   20f54:	ldr	r3, [r9, #20]
   20f58:	str	r0, [r9]
   20f5c:	b	20ce4 <__assert_fail@plt+0xf78c>
   20f60:	ldr	r2, [sp, #212]	; 0xd4
   20f64:	mov	r3, #3
   20f68:	str	r3, [r2]
   20f6c:	b	208d0 <__assert_fail@plt+0xf378>
   20f70:	ldr	r7, [sp, #92]	; 0x5c
   20f74:	b	20e58 <__assert_fail@plt+0xf900>
   20f78:	ldr	r2, [sp, #20]
   20f7c:	cmp	r2, #0
   20f80:	beq	20f70 <__assert_fail@plt+0xfa18>
   20f84:	ldr	r2, [sp, #68]	; 0x44
   20f88:	cmp	r7, r3
   20f8c:	movcs	r2, #0
   20f90:	andcc	r2, r2, #1
   20f94:	cmp	r2, #0
   20f98:	bne	21044 <__assert_fail@plt+0xfaec>
   20f9c:	ldr	r2, [sl, #92]	; 0x5c
   20fa0:	cmp	r2, #1
   20fa4:	ble	20fd4 <__assert_fail@plt+0xfa7c>
   20fa8:	ldr	r2, [r9, #32]
   20fac:	ldr	r1, [sp, #36]	; 0x24
   20fb0:	cmp	r2, r1
   20fb4:	beq	2104c <__assert_fail@plt+0xfaf4>
   20fb8:	ldr	r5, [r9, #4]
   20fbc:	ldr	r0, [r9, #8]
   20fc0:	str	r3, [r5, r2, lsl #2]
   20fc4:	ldr	r2, [r9, #32]
   20fc8:	add	r1, r2, #1
   20fcc:	str	r1, [r9, #32]
   20fd0:	str	r7, [r0, r2, lsl #2]
   20fd4:	mov	r2, #0
   20fd8:	cmp	r2, r3
   20fdc:	movcc	r1, #0
   20fe0:	movcs	r1, #1
   20fe4:	cmp	r2, r7
   20fe8:	movhi	r1, #0
   20fec:	cmp	r1, #0
   20ff0:	beq	2100c <__assert_fail@plt+0xfab4>
   20ff4:	asr	ip, r2, #5
   20ff8:	and	r0, r2, #31
   20ffc:	ldr	r1, [fp, ip, lsl #2]
   21000:	mov	lr, #1
   21004:	orr	r1, r1, lr, lsl r0
   21008:	str	r1, [fp, ip, lsl #2]
   2100c:	add	r2, r2, #1
   21010:	cmp	r2, #256	; 0x100
   21014:	bne	20fd8 <__assert_fail@plt+0xfa80>
   21018:	ldr	r3, [sp, #212]	; 0xd4
   2101c:	mov	r2, #0
   21020:	str	r2, [r3]
   21024:	b	20694 <__assert_fail@plt+0xf13c>
   21028:	ldr	r2, [sp, #40]	; 0x28
   2102c:	ldr	r1, [sp, #44]	; 0x2c
   21030:	ldr	r0, [sp, #32]
   21034:	bl	17e18 <__assert_fail@plt+0x68c0>
   21038:	sub	r3, r5, #2
   2103c:	bics	r3, r3, #2
   21040:	beq	21128 <__assert_fail@plt+0xfbd0>
   21044:	mov	r3, #11
   21048:	b	20bdc <__assert_fail@plt+0xf684>
   2104c:	str	r3, [sp, #52]	; 0x34
   21050:	ldr	r3, [sp, #36]	; 0x24
   21054:	ldr	r0, [r9, #4]
   21058:	lsl	r2, r3, #1
   2105c:	add	r3, r2, #1
   21060:	str	r3, [sp, #36]	; 0x24
   21064:	lsl	r2, r3, #2
   21068:	mov	r1, r2
   2106c:	str	r2, [sp, #20]
   21070:	bl	2b678 <__assert_fail@plt+0x1a120>
   21074:	ldr	r2, [sp, #20]
   21078:	mov	r1, r2
   2107c:	mov	r5, r0
   21080:	ldr	r0, [r9, #8]
   21084:	bl	2b678 <__assert_fail@plt+0x1a120>
   21088:	ldr	r3, [sp, #52]	; 0x34
   2108c:	cmp	r0, #0
   21090:	cmpne	r5, #0
   21094:	ldrne	r2, [r9, #32]
   21098:	strne	r5, [r9, #4]
   2109c:	strne	r0, [r9, #8]
   210a0:	bne	20fc0 <__assert_fail@plt+0xfa68>
   210a4:	mov	r4, r5
   210a8:	mov	r5, r0
   210ac:	mov	r0, r4
   210b0:	bl	13c04 <__assert_fail@plt+0x26ac>
   210b4:	mov	r0, r5
   210b8:	bl	13c04 <__assert_fail@plt+0x26ac>
   210bc:	mov	r3, #12
   210c0:	b	20bdc <__assert_fail@plt+0xf684>
   210c4:	ldr	r3, [sp, #84]	; 0x54
   210c8:	b	20e2c <__assert_fail@plt+0xf8d4>
   210cc:	cmp	r7, #3
   210d0:	movne	r7, #0
   210d4:	ldreq	r2, [sp, #92]	; 0x5c
   210d8:	ldrbeq	r7, [r2]
   210dc:	b	20e00 <__assert_fail@plt+0xf8a8>
   210e0:	cmp	r5, #3
   210e4:	movne	r3, #0
   210e8:	ldreq	r3, [sp, #84]	; 0x54
   210ec:	ldrbeq	r3, [r3]
   210f0:	b	20df4 <__assert_fail@plt+0xf89c>
   210f4:	ldr	r0, [sp, #92]	; 0x5c
   210f8:	bl	11414 <strlen@plt>
   210fc:	cmp	r0, #1
   21100:	bls	20de8 <__assert_fail@plt+0xf890>
   21104:	ldr	r3, [sp, #212]	; 0xd4
   21108:	str	r7, [r3]
   2110c:	b	208d0 <__assert_fail@plt+0xf378>
   21110:	ldr	r0, [sp, #84]	; 0x54
   21114:	bl	11414 <strlen@plt>
   21118:	cmp	r0, #1
   2111c:	bls	20de0 <__assert_fail@plt+0xf888>
   21120:	mov	r7, r5
   21124:	b	21104 <__assert_fail@plt+0xfbac>
   21128:	mov	r7, #11
   2112c:	b	21104 <__assert_fail@plt+0xfbac>
   21130:	and	r2, r1, #251	; 0xfb
   21134:	cmp	r1, #28
   21138:	cmpne	r2, #26
   2113c:	add	r3, r7, r3
   21140:	moveq	r2, #1
   21144:	movne	r2, #0
   21148:	str	r2, [sp, #20]
   2114c:	str	r3, [r6, #40]	; 0x28
   21150:	beq	20ebc <__assert_fail@plt+0xf964>
   21154:	ldrb	r3, [sp, #96]	; 0x60
   21158:	mov	r2, #1
   2115c:	str	r2, [sp, #20]
   21160:	mov	r7, #0
   21164:	strb	r3, [sp, #92]	; 0x5c
   21168:	b	20dac <__assert_fail@plt+0xf854>
   2116c:	ldr	r3, [r6, #40]	; 0x28
   21170:	sub	r3, r3, r8
   21174:	str	r3, [r6, #40]	; 0x28
   21178:	mov	r3, #1
   2117c:	strb	r3, [r4, #4]
   21180:	b	20660 <__assert_fail@plt+0xf108>
   21184:	ldr	r5, [sp, #44]	; 0x2c
   21188:	ldr	r7, [sp, #32]
   2118c:	mov	r2, r3
   21190:	mov	r1, r5
   21194:	mov	r0, r7
   21198:	mov	r8, r3
   2119c:	bl	1ae5c <__assert_fail@plt+0x9904>
   211a0:	ldr	ip, [r5, #40]	; 0x28
   211a4:	ldr	r3, [sp, #212]	; 0xd4
   211a8:	str	r6, [sp]
   211ac:	str	r3, [sp, #4]
   211b0:	mov	r2, r7
   211b4:	mov	r3, r8
   211b8:	mov	r1, r4
   211bc:	add	r0, ip, r0
   211c0:	str	r0, [r5, #40]	; 0x28
   211c4:	mov	r0, r5
   211c8:	bl	1f3f8 <__assert_fail@plt+0xdea0>
   211cc:	str	r0, [sp, #36]	; 0x24
   211d0:	b	1f550 <__assert_fail@plt+0xdff8>
   211d4:	str	r2, [sp, #36]	; 0x24
   211d8:	ldr	r2, [sp, #212]	; 0xd4
   211dc:	mov	r3, #6
   211e0:	str	r3, [r2]
   211e4:	b	1f550 <__assert_fail@plt+0xdff8>
   211e8:	mov	r8, r1
   211ec:	ldr	r0, [sp, #32]
   211f0:	b	20144 <__assert_fail@plt+0xebec>
   211f4:	mov	r8, r6
   211f8:	ldr	r0, [sp, #32]
   211fc:	b	20144 <__assert_fail@plt+0xebec>
   21200:	ldr	r2, [sp, #40]	; 0x28
   21204:	mov	r1, r6
   21208:	add	r0, sp, #136	; 0x88
   2120c:	bl	17e18 <__assert_fail@plt+0x68c0>
   21210:	ldrb	r3, [sp, #140]	; 0x8c
   21214:	cmp	r3, #21
   21218:	bne	21044 <__assert_fail@plt+0xfaec>
   2121c:	b	207f0 <__assert_fail@plt+0xf298>
   21220:	ldr	r7, [r6, #56]	; 0x38
   21224:	ldrb	r3, [r4]
   21228:	cmp	r8, r7
   2122c:	str	r3, [sp, #56]	; 0x38
   21230:	bge	20f2c <__assert_fail@plt+0xf9d4>
   21234:	add	r3, sp, #104	; 0x68
   21238:	str	r3, [sp, #20]
   2123c:	mov	ip, #0
   21240:	b	21284 <__assert_fail@plt+0xfd2c>
   21244:	ldr	r3, [r6, #4]
   21248:	add	r1, r8, #1
   2124c:	str	r1, [r6, #40]	; 0x28
   21250:	ldrb	r3, [r3, r8]
   21254:	mov	r8, r1
   21258:	cmp	r7, r8
   2125c:	ble	20f2c <__assert_fail@plt+0xf9d4>
   21260:	ldr	r1, [sp, #56]	; 0x38
   21264:	cmp	r1, r3
   21268:	beq	214fc <__assert_fail@plt+0xffa4>
   2126c:	ldr	r1, [sp, #20]
   21270:	add	ip, ip, #1
   21274:	cmp	ip, #32
   21278:	strb	r3, [r1], #1
   2127c:	str	r1, [sp, #20]
   21280:	beq	20f2c <__assert_fail@plt+0xf9d4>
   21284:	cmp	r2, #30
   21288:	bne	21244 <__assert_fail@plt+0xfcec>
   2128c:	ldrb	r3, [r6, #75]	; 0x4b
   21290:	cmp	r3, #0
   21294:	beq	21244 <__assert_fail@plt+0xfcec>
   21298:	ldrb	r3, [r6, #76]	; 0x4c
   2129c:	cmp	r3, #0
   212a0:	beq	215e8 <__assert_fail@plt+0x10090>
   212a4:	ldr	lr, [r6, #28]
   212a8:	cmp	lr, r8
   212ac:	beq	215dc <__assert_fail@plt+0x10084>
   212b0:	ldr	r1, [r6, #8]
   212b4:	mov	r3, r8
   212b8:	lsl	r0, r8, #2
   212bc:	ldr	r1, [r1, r8, lsl #2]
   212c0:	cmn	r1, #1
   212c4:	movne	r1, r8
   212c8:	beq	215c8 <__assert_fail@plt+0x10070>
   212cc:	ldr	r5, [r6, #12]
   212d0:	ldr	r3, [r6]
   212d4:	ldr	r5, [r5, r0]
   212d8:	ldr	r0, [r6, #24]
   212dc:	add	r3, r3, r5
   212e0:	ldrb	r3, [r3, r0]
   212e4:	tst	r3, #128	; 0x80
   212e8:	bne	215b4 <__assert_fail@plt+0x1005c>
   212ec:	ldr	r1, [sp, #52]	; 0x34
   212f0:	cmp	r1, #1
   212f4:	add	r1, r8, #1
   212f8:	beq	21338 <__assert_fail@plt+0xfde0>
   212fc:	cmp	lr, r1
   21300:	ble	21338 <__assert_fail@plt+0xfde0>
   21304:	ldr	r5, [r6, #8]
   21308:	add	r0, r5, r1, lsl #2
   2130c:	ldr	r5, [r5, r1, lsl #2]
   21310:	cmn	r5, #1
   21314:	addeq	r8, r8, #2
   21318:	bne	21338 <__assert_fail@plt+0xfde0>
   2131c:	cmp	lr, r8
   21320:	mov	r1, r8
   21324:	beq	21338 <__assert_fail@plt+0xfde0>
   21328:	ldr	r5, [r0, #4]!
   2132c:	add	r8, r8, #1
   21330:	cmn	r5, #1
   21334:	beq	2131c <__assert_fail@plt+0xfdc4>
   21338:	str	r1, [r6, #40]	; 0x28
   2133c:	mov	r8, r1
   21340:	b	21258 <__assert_fail@plt+0xfd00>
   21344:	ldr	r6, [sp, #32]
   21348:	mov	r3, #6
   2134c:	add	r5, sl, #56	; 0x38
   21350:	add	sl, sl, #64	; 0x40
   21354:	str	r3, [r6]
   21358:	mov	r2, r6
   2135c:	mov	r1, sl
   21360:	mov	r0, r5
   21364:	bl	1b7c4 <__assert_fail@plt+0xa26c>
   21368:	mov	r3, #9
   2136c:	str	r3, [r6]
   21370:	mov	r4, r0
   21374:	b	20454 <__assert_fail@plt+0xeefc>
   21378:	ldr	r2, [sp, #32]
   2137c:	add	r1, sl, #64	; 0x40
   21380:	add	r0, sl, #56	; 0x38
   21384:	bl	1b7c4 <__assert_fail@plt+0xa26c>
   21388:	subs	r3, r0, #0
   2138c:	str	r3, [sp, #36]	; 0x24
   21390:	bne	204bc <__assert_fail@plt+0xef64>
   21394:	b	203d4 <__assert_fail@plt+0xee7c>
   21398:	ldr	r0, [r6, #4]
   2139c:	ldrb	r0, [r0, r3]
   213a0:	cmp	r0, #93	; 0x5d
   213a4:	bne	20f14 <__assert_fail@plt+0xf9bc>
   213a8:	add	r2, sp, #168	; 0xa8
   213ac:	add	lr, r2, lr
   213b0:	add	r3, r3, #1
   213b4:	mov	r2, #0
   213b8:	cmp	r1, #28
   213bc:	strb	r2, [lr, #-32]	; 0xffffffe0
   213c0:	str	r3, [r6, #40]	; 0x28
   213c4:	beq	21490 <__assert_fail@plt+0xff38>
   213c8:	cmp	r1, #30
   213cc:	beq	21028 <__assert_fail@plt+0xfad0>
   213d0:	mov	r7, #3
   213d4:	b	20dac <__assert_fail@plt+0xf854>
   213d8:	ldrb	r2, [r6, #75]	; 0x4b
   213dc:	cmp	r2, #0
   213e0:	beq	20ee8 <__assert_fail@plt+0xf990>
   213e4:	ldrb	r2, [r6, #76]	; 0x4c
   213e8:	cmp	r2, #0
   213ec:	beq	214dc <__assert_fail@plt+0xff84>
   213f0:	ldr	r7, [r6, #28]
   213f4:	cmp	r7, r3
   213f8:	beq	214d0 <__assert_fail@plt+0xff78>
   213fc:	ldr	r0, [r6, #8]
   21400:	mov	r2, r3
   21404:	lsl	ip, r3, #2
   21408:	ldr	r0, [r0, r3, lsl #2]
   2140c:	cmn	r0, #1
   21410:	movne	r0, r3
   21414:	beq	214bc <__assert_fail@plt+0xff64>
   21418:	ldr	r8, [r6, #12]
   2141c:	ldr	r2, [r6]
   21420:	ldr	r8, [r8, ip]
   21424:	ldr	ip, [r6, #24]
   21428:	add	r2, r2, r8
   2142c:	ldrb	r2, [r2, ip]
   21430:	tst	r2, #128	; 0x80
   21434:	bne	214a8 <__assert_fail@plt+0xff50>
   21438:	ldr	r0, [sp, #56]	; 0x38
   2143c:	cmp	r0, #1
   21440:	add	r0, r3, #1
   21444:	beq	21484 <__assert_fail@plt+0xff2c>
   21448:	cmp	r7, r0
   2144c:	ble	21484 <__assert_fail@plt+0xff2c>
   21450:	ldr	r8, [r6, #8]
   21454:	add	ip, r8, r0, lsl #2
   21458:	ldr	r8, [r8, r0, lsl #2]
   2145c:	cmn	r8, #1
   21460:	addeq	r3, r3, #2
   21464:	bne	21484 <__assert_fail@plt+0xff2c>
   21468:	cmp	r7, r3
   2146c:	mov	r0, r3
   21470:	beq	21484 <__assert_fail@plt+0xff2c>
   21474:	ldr	r8, [ip, #4]!
   21478:	add	r3, r3, #1
   2147c:	cmn	r8, #1
   21480:	beq	21468 <__assert_fail@plt+0xff10>
   21484:	str	r0, [r6, #40]	; 0x28
   21488:	mov	r3, r0
   2148c:	b	20efc <__assert_fail@plt+0xf9a4>
   21490:	ldr	r2, [sp, #40]	; 0x28
   21494:	ldr	r1, [sp, #44]	; 0x2c
   21498:	ldr	r0, [sp, #32]
   2149c:	bl	17e18 <__assert_fail@plt+0x68c0>
   214a0:	mov	r7, #11
   214a4:	b	21104 <__assert_fail@plt+0xfbac>
   214a8:	ldr	r2, [r6, #4]
   214ac:	add	r3, r3, #1
   214b0:	str	r3, [r6, #40]	; 0x28
   214b4:	ldrb	r2, [r2, r0]
   214b8:	b	20efc <__assert_fail@plt+0xf9a4>
   214bc:	ldr	r0, [r6, #4]
   214c0:	add	r3, r3, #1
   214c4:	str	r3, [r6, #40]	; 0x28
   214c8:	ldrb	r2, [r0, r2]
   214cc:	b	20efc <__assert_fail@plt+0xf9a4>
   214d0:	mov	r0, r3
   214d4:	lsl	ip, r3, #2
   214d8:	b	21418 <__assert_fail@plt+0xfec0>
   214dc:	ldr	r2, [r6]
   214e0:	ldr	ip, [r6, #24]
   214e4:	add	r0, r3, #1
   214e8:	add	r2, r2, ip
   214ec:	str	r0, [r6, #40]	; 0x28
   214f0:	ldrb	r2, [r2, r3]
   214f4:	mov	r3, r0
   214f8:	b	20efc <__assert_fail@plt+0xf9a4>
   214fc:	ldr	r1, [r6, #4]
   21500:	ldrb	r1, [r1, r8]
   21504:	cmp	r1, #93	; 0x5d
   21508:	bne	2126c <__assert_fail@plt+0xfd14>
   2150c:	add	r3, sp, #168	; 0xa8
   21510:	add	ip, r3, ip
   21514:	add	r8, r8, #1
   21518:	mov	r3, #0
   2151c:	cmp	r2, #28
   21520:	strb	r3, [ip, #-64]	; 0xffffffc0
   21524:	str	r8, [r6, #40]	; 0x28
   21528:	beq	20e6c <__assert_fail@plt+0xf914>
   2152c:	cmp	r2, #30
   21530:	beq	21560 <__assert_fail@plt+0x10008>
   21534:	cmp	r2, #26
   21538:	beq	21558 <__assert_fail@plt+0x10000>
   2153c:	ldr	r2, [sp, #40]	; 0x28
   21540:	mov	r1, r6
   21544:	mov	r0, r4
   21548:	bl	17e18 <__assert_fail@plt+0x68c0>
   2154c:	mov	r5, #3
   21550:	mov	r8, r0
   21554:	b	2064c <__assert_fail@plt+0xf0f4>
   21558:	mov	r5, #3
   2155c:	b	20638 <__assert_fail@plt+0xf0e0>
   21560:	ldr	r5, [sp, #40]	; 0x28
   21564:	mov	r1, r6
   21568:	mov	r2, r5
   2156c:	mov	r0, r4
   21570:	bl	17e18 <__assert_fail@plt+0x68c0>
   21574:	ldr	r2, [sp, #84]	; 0x54
   21578:	add	r3, sp, #76	; 0x4c
   2157c:	mov	r1, fp
   21580:	mov	r8, r0
   21584:	ldr	r0, [r6, #64]	; 0x40
   21588:	str	r2, [sp, #4]
   2158c:	str	r3, [sp]
   21590:	str	r5, [sp, #8]
   21594:	add	r3, r9, #36	; 0x24
   21598:	add	r2, r9, #12
   2159c:	bl	19e28 <__assert_fail@plt+0x88d0>
   215a0:	ldr	r3, [sp, #212]	; 0xd4
   215a4:	cmp	r0, #0
   215a8:	str	r0, [r3]
   215ac:	beq	20694 <__assert_fail@plt+0xf13c>
   215b0:	b	208d0 <__assert_fail@plt+0xf378>
   215b4:	ldr	r3, [r6, #4]
   215b8:	add	r8, r8, #1
   215bc:	str	r8, [r6, #40]	; 0x28
   215c0:	ldrb	r3, [r3, r1]
   215c4:	b	21258 <__assert_fail@plt+0xfd00>
   215c8:	ldr	r1, [r6, #4]
   215cc:	add	r8, r8, #1
   215d0:	str	r8, [r6, #40]	; 0x28
   215d4:	ldrb	r3, [r1, r3]
   215d8:	b	21258 <__assert_fail@plt+0xfd00>
   215dc:	mov	r1, r8
   215e0:	lsl	r0, r8, #2
   215e4:	b	212cc <__assert_fail@plt+0xfd74>
   215e8:	ldr	r3, [r6]
   215ec:	ldr	r0, [r6, #24]
   215f0:	add	r1, r8, #1
   215f4:	add	r3, r3, r0
   215f8:	str	r1, [r6, #40]	; 0x28
   215fc:	ldrb	r3, [r3, r8]
   21600:	mov	r8, r1
   21604:	b	21258 <__assert_fail@plt+0xfd00>
   21608:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2160c:	sub	sp, sp, #36	; 0x24
   21610:	mov	sl, r3
   21614:	ldr	r5, [sp, #76]	; 0x4c
   21618:	ldr	r7, [sp, #72]	; 0x48
   2161c:	str	r5, [sp, #4]
   21620:	str	r7, [sp]
   21624:	ldr	ip, [r1]
   21628:	mov	r8, r1
   2162c:	str	ip, [sp, #16]
   21630:	mov	r9, r0
   21634:	mov	r6, r2
   21638:	bl	1f3f8 <__assert_fail@plt+0xdea0>
   2163c:	ldr	r3, [r5]
   21640:	adds	r3, r3, #0
   21644:	movne	r3, #1
   21648:	cmp	r0, #0
   2164c:	movne	r3, #0
   21650:	cmp	r3, #0
   21654:	bne	217d8 <__assert_fail@plt+0x10280>
   21658:	mov	r4, r0
   2165c:	str	r3, [sp, #20]
   21660:	str	r8, [sp, #12]
   21664:	ldrb	r3, [r6, #4]
   21668:	and	r2, r3, #247	; 0xf7
   2166c:	cmp	r2, #2
   21670:	beq	216ec <__assert_fail@plt+0x10194>
   21674:	subs	r3, r3, #9
   21678:	movne	r3, #1
   2167c:	cmp	r7, #0
   21680:	orreq	r3, r3, #1
   21684:	cmp	r3, #0
   21688:	beq	216ec <__assert_fail@plt+0x10194>
   2168c:	mov	r3, sl
   21690:	str	r5, [sp, #4]
   21694:	str	r7, [sp]
   21698:	mov	r2, r6
   2169c:	ldr	r1, [sp, #12]
   216a0:	mov	r0, r9
   216a4:	bl	1f3f8 <__assert_fail@plt+0xdea0>
   216a8:	ldr	r3, [r5]
   216ac:	adds	r3, r3, #0
   216b0:	movne	r3, #1
   216b4:	cmp	r0, #0
   216b8:	movne	r3, #0
   216bc:	cmp	r3, #0
   216c0:	mov	fp, r0
   216c4:	bne	217e8 <__assert_fail@plt+0x10290>
   216c8:	cmp	r4, #0
   216cc:	cmpne	r0, #0
   216d0:	bne	216f8 <__assert_fail@plt+0x101a0>
   216d4:	ldrb	r3, [r6, #4]
   216d8:	cmp	r4, #0
   216dc:	moveq	r4, r0
   216e0:	and	r2, r3, #247	; 0xf7
   216e4:	cmp	r2, #2
   216e8:	bne	21674 <__assert_fail@plt+0x1011c>
   216ec:	mov	r0, r4
   216f0:	add	sp, sp, #36	; 0x24
   216f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   216f8:	ldr	r1, [sp, #16]
   216fc:	str	r3, [sp, #24]
   21700:	str	r3, [sp, #28]
   21704:	ldr	r2, [r1, #64]	; 0x40
   21708:	cmp	r2, #31
   2170c:	beq	2178c <__assert_fail@plt+0x10234>
   21710:	lsl	r3, r2, #5
   21714:	add	lr, r2, #1
   21718:	ldr	r2, [r1, #56]	; 0x38
   2171c:	add	ip, r3, #4
   21720:	mov	r8, r1
   21724:	mov	r1, #16
   21728:	strb	r1, [sp, #28]
   2172c:	add	r1, sp, #24
   21730:	add	r3, r2, r3
   21734:	ldm	r1, {r0, r1}
   21738:	str	lr, [r8, #64]	; 0x40
   2173c:	ldr	r8, [sp, #20]
   21740:	add	lr, r3, #24
   21744:	str	r8, [r3, #4]
   21748:	str	r4, [r3, #8]
   2174c:	str	fp, [r3, #12]
   21750:	stm	lr, {r0, r1}
   21754:	ldrb	r1, [r3, #30]
   21758:	add	r2, r2, ip
   2175c:	mvn	r0, #0
   21760:	and	r1, r1, #243	; 0xf3
   21764:	cmp	r2, #0
   21768:	str	r8, [r3, #16]
   2176c:	str	r8, [r3, #20]
   21770:	str	r0, [r3, #32]
   21774:	strb	r1, [r3, #30]
   21778:	str	r2, [r4]
   2177c:	str	r2, [fp]
   21780:	beq	217c0 <__assert_fail@plt+0x10268>
   21784:	mov	r4, r2
   21788:	b	21664 <__assert_fail@plt+0x1010c>
   2178c:	mov	r0, #996	; 0x3e4
   21790:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   21794:	subs	r2, r0, #0
   21798:	beq	217c0 <__assert_fail@plt+0x10268>
   2179c:	ldr	r0, [sp, #16]
   217a0:	mov	lr, #1
   217a4:	mov	ip, #4
   217a8:	ldr	r1, [r0, #56]	; 0x38
   217ac:	ldr	r3, [sp, #20]
   217b0:	str	r1, [r2]
   217b4:	mov	r8, r0
   217b8:	str	r2, [r0, #56]	; 0x38
   217bc:	b	21724 <__assert_fail@plt+0x101cc>
   217c0:	mov	r0, fp
   217c4:	bl	1b870 <__assert_fail@plt+0xa318>
   217c8:	mov	r0, r4
   217cc:	bl	1b870 <__assert_fail@plt+0xa318>
   217d0:	mov	r3, #12
   217d4:	str	r3, [r5]
   217d8:	mov	r4, #0
   217dc:	mov	r0, r4
   217e0:	add	sp, sp, #36	; 0x24
   217e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217e8:	cmp	r4, #0
   217ec:	beq	217d8 <__assert_fail@plt+0x10280>
   217f0:	mov	r0, r4
   217f4:	bl	1b870 <__assert_fail@plt+0xa318>
   217f8:	mov	r4, #0
   217fc:	mov	r0, r4
   21800:	add	sp, sp, #36	; 0x24
   21804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21808:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2180c:	sub	sp, sp, #44	; 0x2c
   21810:	ldr	r5, [r1]
   21814:	ldr	sl, [sp, #84]	; 0x54
   21818:	str	r1, [sp, #24]
   2181c:	ldr	ip, [r5, #84]	; 0x54
   21820:	str	sl, [sp, #4]
   21824:	str	ip, [sp, #20]
   21828:	ldr	ip, [sp, #80]	; 0x50
   2182c:	mov	r9, r0
   21830:	str	ip, [sp]
   21834:	mov	r8, r2
   21838:	str	r3, [sp, #16]
   2183c:	bl	21608 <__assert_fail@plt+0x100b0>
   21840:	ldr	r4, [sl]
   21844:	adds	r4, r4, #0
   21848:	movne	r4, #1
   2184c:	cmp	r0, #0
   21850:	movne	r4, #0
   21854:	cmp	r4, #0
   21858:	bne	219b8 <__assert_fail@plt+0x10460>
   2185c:	ldr	r3, [sp, #16]
   21860:	mov	r6, r0
   21864:	orr	r3, r3, #8388608	; 0x800000
   21868:	str	r3, [sp, #12]
   2186c:	add	r7, sp, #32
   21870:	b	21968 <__assert_fail@plt+0x10410>
   21874:	ldr	r3, [sp, #80]	; 0x50
   21878:	clz	r3, r3
   2187c:	lsr	r3, r3, #5
   21880:	cmp	r2, #9
   21884:	orrne	r3, r3, #1
   21888:	cmp	r3, #0
   2188c:	beq	219a0 <__assert_fail@plt+0x10448>
   21890:	ldr	r2, [sp, #20]
   21894:	ldr	r1, [sp, #80]	; 0x50
   21898:	ldr	fp, [r5, #84]	; 0x54
   2189c:	ldr	r3, [sp, #16]
   218a0:	str	r2, [r5, #84]	; 0x54
   218a4:	mov	r0, r9
   218a8:	mov	r2, r8
   218ac:	str	r1, [sp]
   218b0:	str	sl, [sp, #4]
   218b4:	ldr	r1, [sp, #24]
   218b8:	bl	21608 <__assert_fail@plt+0x100b0>
   218bc:	ldr	r3, [sl]
   218c0:	adds	r3, r3, #0
   218c4:	movne	r3, #1
   218c8:	cmp	r0, #0
   218cc:	movne	r3, #0
   218d0:	cmp	r3, #0
   218d4:	mov	r2, r0
   218d8:	bne	219a8 <__assert_fail@plt+0x10450>
   218dc:	ldr	r3, [r5, #84]	; 0x54
   218e0:	orr	fp, r3, fp
   218e4:	str	fp, [r5, #84]	; 0x54
   218e8:	ldr	lr, [r5, #64]	; 0x40
   218ec:	str	r4, [r7]
   218f0:	cmp	lr, #31
   218f4:	str	r4, [r7, #4]
   218f8:	beq	219e0 <__assert_fail@plt+0x10488>
   218fc:	lsl	r3, lr, #5
   21900:	ldr	ip, [r5, #56]	; 0x38
   21904:	add	lr, lr, #1
   21908:	add	fp, r3, #4
   2190c:	mov	r1, #10
   21910:	add	r3, ip, r3
   21914:	strb	r1, [sp, #36]	; 0x24
   21918:	ldm	r7, {r0, r1}
   2191c:	str	lr, [r5, #64]	; 0x40
   21920:	add	lr, r3, #24
   21924:	stmib	r3, {r4, r6}
   21928:	str	r2, [r3, #12]
   2192c:	stm	lr, {r0, r1}
   21930:	ldrb	r1, [r3, #30]
   21934:	cmp	r6, #0
   21938:	add	ip, ip, fp
   2193c:	mvn	r0, #0
   21940:	and	r1, r1, #243	; 0xf3
   21944:	str	r4, [r3, #16]
   21948:	str	r4, [r3, #20]
   2194c:	strb	r1, [r3, #30]
   21950:	str	r0, [r3, #32]
   21954:	strne	ip, [r6]
   21958:	cmp	r2, #0
   2195c:	strne	ip, [r2]
   21960:	subs	r6, ip, #0
   21964:	beq	219c8 <__assert_fail@plt+0x10470>
   21968:	ldrb	r3, [r8, #4]
   2196c:	cmp	r3, #10
   21970:	bne	219bc <__assert_fail@plt+0x10464>
   21974:	ldr	r2, [sp, #12]
   21978:	mov	r1, r9
   2197c:	mov	r0, r8
   21980:	bl	1ae5c <__assert_fail@plt+0x9904>
   21984:	ldrb	r2, [r8, #4]
   21988:	ldr	r3, [r9, #40]	; 0x28
   2198c:	and	r1, r2, #247	; 0xf7
   21990:	cmp	r1, #2
   21994:	add	r0, r3, r0
   21998:	str	r0, [r9, #40]	; 0x28
   2199c:	bne	21874 <__assert_fail@plt+0x1031c>
   219a0:	mov	r2, r4
   219a4:	b	218e8 <__assert_fail@plt+0x10390>
   219a8:	cmp	r6, #0
   219ac:	beq	219b8 <__assert_fail@plt+0x10460>
   219b0:	mov	r0, r6
   219b4:	bl	1b870 <__assert_fail@plt+0xa318>
   219b8:	mov	r6, #0
   219bc:	mov	r0, r6
   219c0:	add	sp, sp, #44	; 0x2c
   219c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   219c8:	mov	r3, #12
   219cc:	mov	r6, #0
   219d0:	mov	r0, r6
   219d4:	str	r3, [sl]
   219d8:	add	sp, sp, #44	; 0x2c
   219dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   219e0:	mov	r0, #996	; 0x3e4
   219e4:	str	r2, [sp, #28]
   219e8:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   219ec:	subs	ip, r0, #0
   219f0:	beq	219c8 <__assert_fail@plt+0x10470>
   219f4:	ldr	r1, [r5, #56]	; 0x38
   219f8:	mov	lr, #1
   219fc:	str	r1, [ip]
   21a00:	mov	fp, #4
   21a04:	mov	r3, r4
   21a08:	str	ip, [r5, #56]	; 0x38
   21a0c:	ldr	r2, [sp, #28]
   21a10:	b	2190c <__assert_fail@plt+0x103b4>
   21a14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a18:	mov	ip, #0
   21a1c:	ldr	r9, [r2, #4]
   21a20:	sub	sp, sp, #28
   21a24:	cmp	r9, ip
   21a28:	str	r0, [sp]
   21a2c:	str	ip, [r0]
   21a30:	beq	21d88 <__assert_fail@plt+0x10830>
   21a34:	add	fp, r3, r9
   21a38:	ble	21a54 <__assert_fail@plt+0x104fc>
   21a3c:	ldr	ip, [r2, #8]
   21a40:	add	r4, ip, r9, lsl #2
   21a44:	ldr	r0, [ip], #4
   21a48:	cmp	r4, ip
   21a4c:	add	fp, fp, r0
   21a50:	bne	21a44 <__assert_fail@plt+0x104ec>
   21a54:	ldr	ip, [r1, #68]	; 0x44
   21a58:	ldr	lr, [r1, #32]
   21a5c:	and	ip, ip, fp
   21a60:	add	ip, ip, ip, lsl #1
   21a64:	lsl	ip, ip, #2
   21a68:	add	r4, lr, ip
   21a6c:	ldr	r5, [lr, ip]
   21a70:	cmp	r5, #0
   21a74:	ble	21b14 <__assert_fail@plt+0x105bc>
   21a78:	sub	ip, r9, #1
   21a7c:	ldr	lr, [r4, #8]
   21a80:	lsl	r0, ip, #2
   21a84:	sub	lr, lr, #4
   21a88:	str	r0, [sp, #4]
   21a8c:	mov	ip, #0
   21a90:	b	21aa0 <__assert_fail@plt+0x10548>
   21a94:	add	ip, ip, #1
   21a98:	cmp	ip, r5
   21a9c:	beq	21b14 <__assert_fail@plt+0x105bc>
   21aa0:	ldr	r4, [lr, #4]!
   21aa4:	ldr	r0, [r4]
   21aa8:	cmp	r0, fp
   21aac:	bne	21a94 <__assert_fail@plt+0x1053c>
   21ab0:	ldrb	r0, [r4, #52]	; 0x34
   21ab4:	and	r0, r0, #15
   21ab8:	cmp	r3, r0
   21abc:	bne	21a94 <__assert_fail@plt+0x1053c>
   21ac0:	ldr	r7, [r4, #40]	; 0x28
   21ac4:	cmp	r7, #0
   21ac8:	beq	21a94 <__assert_fail@plt+0x1053c>
   21acc:	ldr	r0, [r7, #4]
   21ad0:	cmp	r9, r0
   21ad4:	bne	21a94 <__assert_fail@plt+0x1053c>
   21ad8:	ldr	r0, [sp, #4]
   21adc:	mov	r6, r9
   21ae0:	b	21b00 <__assert_fail@plt+0x105a8>
   21ae4:	ldr	sl, [r7, #8]
   21ae8:	ldr	r8, [r2, #8]
   21aec:	ldr	sl, [sl, r0]
   21af0:	ldr	r8, [r8, r0]
   21af4:	sub	r0, r0, #4
   21af8:	cmp	sl, r8
   21afc:	bne	21a94 <__assert_fail@plt+0x1053c>
   21b00:	subs	r6, r6, #1
   21b04:	bpl	21ae4 <__assert_fail@plt+0x1058c>
   21b08:	mov	r0, r4
   21b0c:	add	sp, sp, #28
   21b10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b14:	mov	r7, r3
   21b18:	ldr	r3, [sp]
   21b1c:	mov	r9, r1
   21b20:	mov	r0, #56	; 0x38
   21b24:	mov	r1, #1
   21b28:	str	r3, [sp, #12]
   21b2c:	mov	r8, r2
   21b30:	bl	2b604 <__assert_fail@plt+0x1a0ac>
   21b34:	subs	r4, r0, #0
   21b38:	beq	21d7c <__assert_fail@plt+0x10824>
   21b3c:	ldr	r0, [r8, #4]
   21b40:	add	r3, r4, #4
   21b44:	cmp	r0, #0
   21b48:	str	r3, [sp, #16]
   21b4c:	str	r0, [r4, #8]
   21b50:	ble	21e00 <__assert_fail@plt+0x108a8>
   21b54:	str	r0, [r4, #4]
   21b58:	lsl	r0, r0, #2
   21b5c:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   21b60:	cmp	r0, #0
   21b64:	str	r0, [r4, #12]
   21b68:	beq	21e30 <__assert_fail@plt+0x108d8>
   21b6c:	ldr	sl, [r8, #4]
   21b70:	ldr	r1, [r8, #8]
   21b74:	lsl	r2, sl, #2
   21b78:	bl	11264 <memcpy@plt>
   21b7c:	ldrb	r2, [r4, #52]	; 0x34
   21b80:	and	r3, r7, #15
   21b84:	cmp	sl, #0
   21b88:	bic	r2, r2, #15
   21b8c:	orr	r3, r3, r2
   21b90:	add	r2, r4, #4
   21b94:	str	r2, [r4, #40]	; 0x28
   21b98:	strb	r3, [r4, #52]	; 0x34
   21b9c:	ble	21d14 <__assert_fail@plt+0x107bc>
   21ba0:	and	r2, r7, #2
   21ba4:	str	r2, [sp]
   21ba8:	and	r2, r7, #4
   21bac:	mov	r0, #0
   21bb0:	and	r3, r7, #1
   21bb4:	stmib	sp, {r2, fp}
   21bb8:	mov	ip, sl
   21bbc:	ldr	r6, [pc, #676]	; 21e68 <__assert_fail@plt+0x10910>
   21bc0:	mov	r5, r0
   21bc4:	mov	fp, r3
   21bc8:	add	sl, r4, #4
   21bcc:	b	21c30 <__assert_fail@plt+0x106d8>
   21bd0:	cmp	fp, #0
   21bd4:	beq	21c08 <__assert_fail@plt+0x106b0>
   21bd8:	tst	r7, #2
   21bdc:	bne	21c08 <__assert_fail@plt+0x106b0>
   21be0:	tst	r7, #16
   21be4:	beq	21bf4 <__assert_fail@plt+0x1069c>
   21be8:	ldr	r3, [sp]
   21bec:	cmp	r3, #0
   21bf0:	beq	21c08 <__assert_fail@plt+0x106b0>
   21bf4:	tst	r7, #64	; 0x40
   21bf8:	beq	21c20 <__assert_fail@plt+0x106c8>
   21bfc:	ldr	r3, [sp, #4]
   21c00:	cmp	r3, #0
   21c04:	bne	21c20 <__assert_fail@plt+0x106c8>
   21c08:	subs	r2, r5, r0
   21c0c:	bmi	21c1c <__assert_fail@plt+0x106c4>
   21c10:	ldr	r1, [r4, #8]
   21c14:	cmp	r2, r1
   21c18:	blt	21cdc <__assert_fail@plt+0x10784>
   21c1c:	add	r0, r0, #1
   21c20:	ldr	ip, [r8, #4]
   21c24:	add	r5, r5, #1
   21c28:	cmp	r5, ip
   21c2c:	bge	21d10 <__assert_fail@plt+0x107b8>
   21c30:	ldr	r1, [r8, #8]
   21c34:	ldr	r2, [r9]
   21c38:	ldr	r1, [r1, r5, lsl #2]
   21c3c:	add	r2, r2, r1, lsl #3
   21c40:	ldr	r7, [r2, #4]
   21c44:	ldrb	r1, [r2, #4]
   21c48:	ands	r7, r6, r7, lsr #8
   21c4c:	moveq	lr, #1
   21c50:	movne	lr, #0
   21c54:	cmp	r1, #1
   21c58:	movne	lr, #0
   21c5c:	andeq	lr, lr, #1
   21c60:	cmp	lr, #0
   21c64:	bne	21c24 <__assert_fail@plt+0x106cc>
   21c68:	ldrb	r2, [r2, #6]
   21c6c:	ldrb	lr, [r4, #52]	; 0x34
   21c70:	cmp	r1, #2
   21c74:	lsr	r2, r2, #4
   21c78:	orr	r2, r2, lr, lsr #5
   21c7c:	and	r2, r2, #1
   21c80:	bic	lr, lr, #32
   21c84:	orr	r2, lr, r2, lsl #5
   21c88:	strb	r2, [r4, #52]	; 0x34
   21c8c:	uxtbeq	r2, r2
   21c90:	orreq	r2, r2, #16
   21c94:	strbeq	r2, [r4, #52]	; 0x34
   21c98:	beq	21cac <__assert_fail@plt+0x10754>
   21c9c:	cmp	r1, #4
   21ca0:	ldrbeq	r2, [r4, #52]	; 0x34
   21ca4:	orreq	r2, r2, #64	; 0x40
   21ca8:	strbeq	r2, [r4, #52]	; 0x34
   21cac:	cmp	r7, #0
   21cb0:	beq	21c24 <__assert_fail@plt+0x106cc>
   21cb4:	ldr	r2, [r4, #40]	; 0x28
   21cb8:	cmp	sl, r2
   21cbc:	beq	21d98 <__assert_fail@plt+0x10840>
   21cc0:	tst	r7, #1
   21cc4:	bne	21bd0 <__assert_fail@plt+0x10678>
   21cc8:	tst	r7, #2
   21ccc:	beq	21be0 <__assert_fail@plt+0x10688>
   21cd0:	cmp	fp, #0
   21cd4:	beq	21be0 <__assert_fail@plt+0x10688>
   21cd8:	b	21c08 <__assert_fail@plt+0x106b0>
   21cdc:	sub	r1, r1, #1
   21ce0:	cmp	r2, r1
   21ce4:	str	r1, [r4, #8]
   21ce8:	bge	21c1c <__assert_fail@plt+0x106c4>
   21cec:	ldr	r1, [r4, #12]
   21cf0:	add	r1, r1, r2, lsl #2
   21cf4:	ldr	r3, [r1, #4]
   21cf8:	add	r2, r2, #1
   21cfc:	str	r3, [r1], #4
   21d00:	ldr	r3, [r4, #8]
   21d04:	cmp	r2, r3
   21d08:	blt	21cf4 <__assert_fail@plt+0x1079c>
   21d0c:	b	21c1c <__assert_fail@plt+0x106c4>
   21d10:	ldr	fp, [sp, #8]
   21d14:	mov	r2, fp
   21d18:	mov	r0, r9
   21d1c:	mov	r1, r4
   21d20:	bl	17f98 <__assert_fail@plt+0x6a40>
   21d24:	cmp	r0, #0
   21d28:	beq	21b08 <__assert_fail@plt+0x105b0>
   21d2c:	ldr	r0, [r4, #24]
   21d30:	bl	13c04 <__assert_fail@plt+0x26ac>
   21d34:	ldr	r0, [r4, #36]	; 0x24
   21d38:	bl	13c04 <__assert_fail@plt+0x26ac>
   21d3c:	ldr	r3, [r4, #40]	; 0x28
   21d40:	ldr	r2, [sp, #16]
   21d44:	cmp	r2, r3
   21d48:	beq	21d5c <__assert_fail@plt+0x10804>
   21d4c:	ldr	r0, [r3, #8]
   21d50:	bl	13c04 <__assert_fail@plt+0x26ac>
   21d54:	ldr	r0, [r4, #40]	; 0x28
   21d58:	bl	13c04 <__assert_fail@plt+0x26ac>
   21d5c:	ldr	r0, [r4, #12]
   21d60:	bl	13c04 <__assert_fail@plt+0x26ac>
   21d64:	ldr	r0, [r4, #48]	; 0x30
   21d68:	bl	13c04 <__assert_fail@plt+0x26ac>
   21d6c:	ldr	r0, [r4, #44]	; 0x2c
   21d70:	bl	13c04 <__assert_fail@plt+0x26ac>
   21d74:	mov	r0, r4
   21d78:	bl	13c04 <__assert_fail@plt+0x26ac>
   21d7c:	ldr	r2, [sp, #12]
   21d80:	mov	r3, #12
   21d84:	str	r3, [r2]
   21d88:	mov	r4, #0
   21d8c:	mov	r0, r4
   21d90:	add	sp, sp, #28
   21d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d98:	mov	r0, #12
   21d9c:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   21da0:	subs	r1, r0, #0
   21da4:	beq	21d2c <__assert_fail@plt+0x107d4>
   21da8:	ldr	r0, [r8, #4]
   21dac:	str	r1, [r4, #40]	; 0x28
   21db0:	cmp	r0, #0
   21db4:	str	r0, [r1, #4]
   21db8:	ble	21e44 <__assert_fail@plt+0x108ec>
   21dbc:	str	r0, [r1]
   21dc0:	lsl	r0, r0, #2
   21dc4:	str	r1, [sp, #20]
   21dc8:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   21dcc:	ldr	r1, [sp, #20]
   21dd0:	cmp	r0, #0
   21dd4:	str	r0, [r1, #8]
   21dd8:	beq	21e58 <__assert_fail@plt+0x10900>
   21ddc:	ldr	r2, [r8, #4]
   21de0:	ldr	r1, [r8, #8]
   21de4:	lsl	r2, r2, #2
   21de8:	bl	11264 <memcpy@plt>
   21dec:	ldrb	r2, [r4, #52]	; 0x34
   21df0:	mov	r0, #0
   21df4:	orr	r2, r2, #128	; 0x80
   21df8:	strb	r2, [r4, #52]	; 0x34
   21dfc:	b	21cc0 <__assert_fail@plt+0x10768>
   21e00:	add	r1, r4, #4
   21e04:	mov	r3, #0
   21e08:	str	r3, [r4, #4]
   21e0c:	str	r3, [r1, #4]
   21e10:	str	r3, [r1, #8]
   21e14:	ldrb	r2, [r4, #52]	; 0x34
   21e18:	and	r3, r7, #15
   21e1c:	str	r1, [r4, #40]	; 0x28
   21e20:	bic	r2, r2, #15
   21e24:	orr	r3, r3, r2
   21e28:	strb	r3, [r4, #52]	; 0x34
   21e2c:	b	21d14 <__assert_fail@plt+0x107bc>
   21e30:	str	r0, [r4, #8]
   21e34:	str	r0, [r4, #4]
   21e38:	mov	r0, r4
   21e3c:	bl	13c04 <__assert_fail@plt+0x26ac>
   21e40:	b	21d7c <__assert_fail@plt+0x10824>
   21e44:	mov	r3, #0
   21e48:	str	r3, [r1]
   21e4c:	str	r3, [r1, #4]
   21e50:	str	r3, [r1, #8]
   21e54:	b	21dec <__assert_fail@plt+0x10894>
   21e58:	mov	sl, r1
   21e5c:	str	r0, [sl, #4]
   21e60:	str	r0, [sl]
   21e64:	b	21d2c <__assert_fail@plt+0x107d4>
   21e68:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   21e6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e70:	sub	sp, sp, #14464	; 0x3880
   21e74:	sub	sp, sp, #36	; 0x24
   21e78:	mov	r4, #0
   21e7c:	mov	r5, r1
   21e80:	add	r9, sp, #2208	; 0x8a0
   21e84:	str	r1, [sp, #72]	; 0x48
   21e88:	str	r0, [sp, #104]	; 0x68
   21e8c:	str	r4, [r1, #44]	; 0x2c
   21e90:	str	r4, [r1, #48]	; 0x30
   21e94:	mov	r0, r9
   21e98:	mov	r1, r4
   21e9c:	mov	r2, #32
   21ea0:	bl	1145c <memset@plt>
   21ea4:	ldr	r1, [r5, #8]
   21ea8:	cmp	r1, r4
   21eac:	ble	22d88 <__assert_fail@plt+0x11830>
   21eb0:	str	r4, [sp, #20]
   21eb4:	str	r4, [sp, #96]	; 0x60
   21eb8:	ldr	r3, [sp, #72]	; 0x48
   21ebc:	ldr	r0, [sp, #96]	; 0x60
   21ec0:	ldr	r2, [r3, #12]
   21ec4:	ldr	r3, [sp, #104]	; 0x68
   21ec8:	lsl	ip, r0, #2
   21ecc:	ldr	r2, [r2, r0, lsl #2]
   21ed0:	ldr	r3, [r3]
   21ed4:	str	ip, [sp, #92]	; 0x5c
   21ed8:	add	r0, r3, r2, lsl #3
   21edc:	str	r0, [sp, #100]	; 0x64
   21ee0:	ldrb	ip, [r0, #4]
   21ee4:	ldr	r4, [r0, #4]
   21ee8:	ldr	r0, [pc, #3984]	; 22e80 <__assert_fail@plt+0x11928>
   21eec:	cmp	ip, #1
   21ef0:	str	ip, [sp, #28]
   21ef4:	and	r4, r0, r4, lsr #8
   21ef8:	beq	2207c <__assert_fail@plt+0x10b24>
   21efc:	cmp	ip, #3
   21f00:	beq	226a4 <__assert_fail@plt+0x1114c>
   21f04:	cmp	ip, #5
   21f08:	beq	227fc <__assert_fail@plt+0x112a4>
   21f0c:	cmp	ip, #7
   21f10:	beq	22bf0 <__assert_fail@plt+0x11698>
   21f14:	ldr	r3, [sp, #96]	; 0x60
   21f18:	add	r3, r3, #1
   21f1c:	cmp	r3, r1
   21f20:	str	r3, [sp, #96]	; 0x60
   21f24:	blt	21eb8 <__assert_fail@plt+0x10960>
   21f28:	ldr	r3, [sp, #20]
   21f2c:	cmp	r3, #0
   21f30:	ble	22d84 <__assert_fail@plt+0x1182c>
   21f34:	add	r3, r3, #1
   21f38:	mov	r4, #0
   21f3c:	lsl	r0, r3, #2
   21f40:	str	r3, [r9, #-2092]	; 0xfffff7d4
   21f44:	str	r4, [r9, #-2088]	; 0xfffff7d8
   21f48:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   21f4c:	cmp	r0, r4
   21f50:	str	r0, [r9, #-2084]	; 0xfffff7dc
   21f54:	beq	22c48 <__assert_fail@plt+0x116f0>
   21f58:	add	r3, sp, #3232	; 0xca0
   21f5c:	str	r3, [sp, #12]
   21f60:	mov	r6, r3
   21f64:	add	r3, sp, #6272	; 0x1880
   21f68:	add	r3, r3, #32
   21f6c:	mov	r7, r3
   21f70:	str	r3, [sp, #28]
   21f74:	add	r0, sp, #128	; 0x80
   21f78:	add	r3, sp, #156	; 0x9c
   21f7c:	mov	r2, #32
   21f80:	mov	r1, r4
   21f84:	str	r3, [sp, #4]
   21f88:	str	r4, [sp, #24]
   21f8c:	str	r4, [r9, #-2096]	; 0xfffff7d0
   21f90:	bl	1145c <memset@plt>
   21f94:	add	r3, sp, #160	; 0xa0
   21f98:	ldr	fp, [sp, #104]	; 0x68
   21f9c:	sub	r3, r3, #48	; 0x30
   21fa0:	mov	sl, r4
   21fa4:	add	r8, sp, #116	; 0x74
   21fa8:	mov	r5, r7
   21fac:	str	r3, [sp, #16]
   21fb0:	add	r3, sp, #1184	; 0x4a0
   21fb4:	str	r3, [sp]
   21fb8:	str	r7, [sp, #32]
   21fbc:	ldr	r0, [r6, #4]
   21fc0:	mov	r3, #0
   21fc4:	cmp	r0, r3
   21fc8:	str	r3, [r9, #-2088]	; 0xfffff7d8
   21fcc:	movgt	r5, #0
   21fd0:	strgt	r7, [sp, #8]
   21fd4:	bgt	22004 <__assert_fail@plt+0x10aac>
   21fd8:	b	2298c <__assert_fail@plt+0x11434>
   21fdc:	mov	r1, r7
   21fe0:	mov	r0, r8
   21fe4:	bl	18f28 <__assert_fail@plt+0x79d0>
   21fe8:	cmp	r0, #0
   21fec:	str	r0, [r9, #-2096]	; 0xfffff7d0
   21ff0:	bne	22bc0 <__assert_fail@plt+0x11668>
   21ff4:	ldr	r0, [r6, #4]
   21ff8:	add	r5, r5, #1
   21ffc:	cmp	r5, r0
   22000:	bge	22988 <__assert_fail@plt+0x11430>
   22004:	ldr	r2, [r6, #8]
   22008:	ldr	r3, [fp, #12]
   2200c:	ldr	r2, [r2, r5, lsl #2]
   22010:	ldr	r3, [r3, r2, lsl #2]
   22014:	cmn	r3, #1
   22018:	beq	21ff8 <__assert_fail@plt+0x10aa0>
   2201c:	add	r3, r3, r3, lsl #1
   22020:	ldr	r2, [fp, #24]
   22024:	adds	r7, r2, r3, lsl #2
   22028:	streq	r7, [r9, #-2096]	; 0xfffff7d0
   2202c:	beq	21ff8 <__assert_fail@plt+0x10aa0>
   22030:	ldr	r2, [r7, #4]
   22034:	cmp	r2, #0
   22038:	streq	r2, [r9, #-2096]	; 0xfffff7d0
   2203c:	beq	21ff8 <__assert_fail@plt+0x10aa0>
   22040:	ldr	r1, [r9, #-2088]	; 0xfffff7d8
   22044:	ldr	r4, [r9, #-2092]	; 0xfffff7d4
   22048:	add	r1, r1, r2, lsl #1
   2204c:	cmp	r4, r1
   22050:	bge	21fdc <__assert_fail@plt+0x10a84>
   22054:	add	r2, r2, r4
   22058:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   2205c:	lsl	r1, r2, #3
   22060:	lsl	r4, r2, #1
   22064:	bl	2b678 <__assert_fail@plt+0x1a120>
   22068:	cmp	r0, #0
   2206c:	beq	22c24 <__assert_fail@plt+0x116cc>
   22070:	str	r0, [r9, #-2084]	; 0xfffff7dc
   22074:	str	r4, [r9, #-2092]	; 0xfffff7d4
   22078:	b	21fdc <__assert_fail@plt+0x10a84>
   2207c:	ldrb	r3, [r3, r2, lsl #3]
   22080:	and	r1, r3, #31
   22084:	asr	r3, r3, #5
   22088:	ldr	r2, [r9, r3, lsl #2]
   2208c:	orr	r2, r2, ip, lsl r1
   22090:	str	r2, [r9, r3, lsl #2]
   22094:	cmp	r4, #0
   22098:	beq	222ec <__assert_fail@plt+0x10d94>
   2209c:	tst	r4, #32
   220a0:	bne	228bc <__assert_fail@plt+0x11364>
   220a4:	tst	r4, #128	; 0x80
   220a8:	bne	2273c <__assert_fail@plt+0x111e4>
   220ac:	tst	r4, #4
   220b0:	beq	221dc <__assert_fail@plt+0x10c84>
   220b4:	ldr	r3, [sp, #28]
   220b8:	cmp	r3, #1
   220bc:	beq	22c34 <__assert_fail@plt+0x116dc>
   220c0:	ldr	r3, [sp, #104]	; 0x68
   220c4:	ldr	r3, [r3, #92]	; 0x5c
   220c8:	cmp	r3, #1
   220cc:	ble	22ccc <__assert_fail@plt+0x11774>
   220d0:	ldr	r6, [sp, #104]	; 0x68
   220d4:	ldr	r3, [r6, #60]	; 0x3c
   220d8:	ldr	r0, [r6, #96]	; 0x60
   220dc:	ldr	r2, [r6, #100]	; 0x64
   220e0:	ldr	lr, [r3]
   220e4:	ldr	r1, [r3, #4]
   220e8:	mvn	lr, lr
   220ec:	orr	lr, lr, r0
   220f0:	ldr	r0, [r9]
   220f4:	mvn	r1, r1
   220f8:	and	lr, lr, r0
   220fc:	ldr	r0, [r9, #4]
   22100:	orr	r1, r1, r2
   22104:	ldr	r2, [r3, #8]
   22108:	and	r1, r1, r0
   2210c:	ldr	ip, [r3, #12]
   22110:	ldr	r0, [r6, #104]	; 0x68
   22114:	mvn	r2, r2
   22118:	orr	r2, r2, r0
   2211c:	mvn	r0, ip
   22120:	ldr	ip, [r9, #8]
   22124:	str	lr, [r9]
   22128:	and	r2, r2, ip
   2212c:	ldr	ip, [r6, #108]	; 0x6c
   22130:	orr	lr, lr, r1
   22134:	str	r1, [r9, #4]
   22138:	ldr	r1, [r9, #12]
   2213c:	orr	r0, r0, ip
   22140:	ldr	ip, [r3, #16]
   22144:	and	r1, r1, r0
   22148:	orr	lr, lr, r2
   2214c:	ldr	r0, [r3, #20]
   22150:	str	r2, [r9, #8]
   22154:	ldr	r2, [r6, #112]	; 0x70
   22158:	mvn	ip, ip
   2215c:	orr	ip, ip, r2
   22160:	mvn	r2, r0
   22164:	ldr	r0, [r9, #16]
   22168:	orr	lr, lr, r1
   2216c:	and	ip, ip, r0
   22170:	ldr	r0, [r6, #116]	; 0x74
   22174:	str	r1, [r9, #12]
   22178:	orr	r2, r2, r0
   2217c:	ldr	r0, [r3, #24]
   22180:	ldr	r3, [r3, #28]
   22184:	mvn	r0, r0
   22188:	mvn	r5, r3
   2218c:	ldr	r3, [r9, #20]
   22190:	ldr	r1, [r9, #28]
   22194:	and	r2, r2, r3
   22198:	ldr	r3, [r6, #120]	; 0x78
   2219c:	orr	lr, lr, ip
   221a0:	orr	r0, r0, r3
   221a4:	ldr	r3, [r9, #24]
   221a8:	orr	lr, lr, r2
   221ac:	and	r0, r0, r3
   221b0:	ldr	r3, [r6, #124]	; 0x7c
   221b4:	orr	lr, lr, r0
   221b8:	orr	r3, r5, r3
   221bc:	and	r3, r3, r1
   221c0:	str	r2, [r9, #20]
   221c4:	orr	r2, lr, r3
   221c8:	str	ip, [r9, #16]
   221cc:	str	r0, [r9, #24]
   221d0:	str	r3, [r9, #28]
   221d4:	cmp	r2, #0
   221d8:	beq	2274c <__assert_fail@plt+0x111f4>
   221dc:	tst	r4, #8
   221e0:	beq	222ec <__assert_fail@plt+0x10d94>
   221e4:	ldr	r3, [sp, #28]
   221e8:	cmp	r3, #1
   221ec:	beq	2272c <__assert_fail@plt+0x111d4>
   221f0:	ldr	r3, [sp, #104]	; 0x68
   221f4:	ldr	r4, [sp, #104]	; 0x68
   221f8:	ldr	r3, [r3, #92]	; 0x5c
   221fc:	cmp	r3, #1
   22200:	ble	228e8 <__assert_fail@plt+0x11390>
   22204:	ldr	r1, [r4, #60]	; 0x3c
   22208:	ldr	r0, [r4, #96]	; 0x60
   2220c:	ldr	ip, [r4, #100]	; 0x64
   22210:	ldr	r3, [r1]
   22214:	ldr	r2, [r1, #4]
   22218:	and	r3, r3, r0
   2221c:	and	r2, r2, ip
   22220:	ldr	r0, [r9]
   22224:	ldr	ip, [r9, #4]
   22228:	bic	r3, r0, r3
   2222c:	bic	r2, ip, r2
   22230:	ldr	r0, [r1, #8]
   22234:	ldr	ip, [r4, #104]	; 0x68
   22238:	ldr	lr, [r1, #12]
   2223c:	and	r0, r0, ip
   22240:	ldr	ip, [r9, #8]
   22244:	str	r3, [r9]
   22248:	bic	r0, ip, r0
   2224c:	ldr	ip, [r4, #108]	; 0x6c
   22250:	orr	r3, r3, r2
   22254:	and	ip, ip, lr
   22258:	ldr	lr, [r9, #12]
   2225c:	str	r2, [r9, #4]
   22260:	bic	ip, lr, ip
   22264:	ldr	r2, [r4, #112]	; 0x70
   22268:	ldr	lr, [r1, #16]
   2226c:	orr	r3, r3, r0
   22270:	and	r2, r2, lr
   22274:	ldr	lr, [r9, #16]
   22278:	str	r0, [r9, #8]
   2227c:	bic	r2, lr, r2
   22280:	ldr	r0, [r4, #116]	; 0x74
   22284:	ldr	lr, [r1, #20]
   22288:	orr	r3, r3, ip
   2228c:	and	r0, r0, lr
   22290:	ldr	lr, [r9, #20]
   22294:	str	ip, [r9, #12]
   22298:	bic	r0, lr, r0
   2229c:	ldr	ip, [r1, #28]
   222a0:	ldr	lr, [r1, #24]
   222a4:	ldr	r1, [r4, #120]	; 0x78
   222a8:	orr	r3, r3, r2
   222ac:	str	r2, [r9, #16]
   222b0:	ldr	r2, [r4, #124]	; 0x7c
   222b4:	and	r1, r1, lr
   222b8:	ldr	lr, [r9, #24]
   222bc:	and	ip, ip, r2
   222c0:	ldr	r2, [r9, #28]
   222c4:	bic	r1, lr, r1
   222c8:	orr	r3, r3, r0
   222cc:	bic	r2, r2, ip
   222d0:	orr	r3, r3, r1
   222d4:	orr	r3, r3, r2
   222d8:	str	r0, [r9, #20]
   222dc:	str	r1, [r9, #24]
   222e0:	str	r2, [r9, #28]
   222e4:	cmp	r3, #0
   222e8:	beq	2274c <__assert_fail@plt+0x111f4>
   222ec:	ldr	r3, [sp, #20]
   222f0:	cmp	r3, #0
   222f4:	movle	r3, #0
   222f8:	strle	r3, [sp, #4]
   222fc:	ble	22758 <__assert_fail@plt+0x11200>
   22300:	add	r3, sp, #6272	; 0x1880
   22304:	add	r3, r3, #32
   22308:	str	r3, [sp, #108]	; 0x6c
   2230c:	mov	r4, r3
   22310:	add	r3, sp, #3232	; 0xca0
   22314:	str	r3, [sp]
   22318:	mov	r3, #0
   2231c:	str	r3, [sp, #4]
   22320:	b	225fc <__assert_fail@plt+0x110a4>
   22324:	ldr	sl, [r9]
   22328:	ldr	fp, [r4]
   2232c:	ldr	r7, [r9, #4]
   22330:	ldr	r8, [r4, #4]
   22334:	ldr	r1, [r9, #12]
   22338:	ldr	r5, [r9, #8]
   2233c:	ldr	r6, [r4, #8]
   22340:	and	r2, r7, r8
   22344:	and	r3, sl, fp
   22348:	mov	r0, r1
   2234c:	ldr	lr, [r4, #12]
   22350:	and	r1, r5, r6
   22354:	str	r3, [sp, #44]	; 0x2c
   22358:	orr	r3, r3, r2
   2235c:	ldr	ip, [r4, #16]
   22360:	str	r1, [sp, #52]	; 0x34
   22364:	orr	r3, r3, r1
   22368:	ldr	r1, [r9, #20]
   2236c:	str	r0, [sp, #32]
   22370:	and	r0, r0, lr
   22374:	str	ip, [sp, #8]
   22378:	mov	ip, r0
   2237c:	mov	r0, r1
   22380:	ldr	r1, [r4, #20]
   22384:	str	r0, [sp, #40]	; 0x28
   22388:	and	r0, r0, r1
   2238c:	str	r0, [sp, #24]
   22390:	ldr	r0, [r9, #28]
   22394:	str	r2, [sp, #48]	; 0x30
   22398:	str	ip, [sp, #56]	; 0x38
   2239c:	ldr	r2, [r9, #16]
   223a0:	orr	r3, r3, ip
   223a4:	ldr	ip, [sp, #8]
   223a8:	str	r0, [sp, #16]
   223ac:	ldr	r0, [r4, #28]
   223b0:	and	ip, r2, ip
   223b4:	str	r2, [sp, #36]	; 0x24
   223b8:	ldr	r2, [r9, #24]
   223bc:	str	ip, [sp, #60]	; 0x3c
   223c0:	orr	r3, r3, ip
   223c4:	mov	ip, r0
   223c8:	ldr	r0, [sp, #24]
   223cc:	str	r2, [sp, #12]
   223d0:	orr	r3, r3, r0
   223d4:	ldr	r2, [r4, #24]
   223d8:	ldr	r0, [sp, #12]
   223dc:	and	r0, r0, r2
   223e0:	orr	r3, r3, r0
   223e4:	str	r0, [sp, #64]	; 0x40
   223e8:	ldr	r0, [sp, #16]
   223ec:	and	r0, r0, ip
   223f0:	orrs	r3, r3, r0
   223f4:	str	r0, [sp, #68]	; 0x44
   223f8:	beq	225d4 <__assert_fail@plt+0x1107c>
   223fc:	bic	r0, r8, r7
   22400:	bic	r3, fp, sl
   22404:	bic	r7, r7, r8
   22408:	str	r3, [sp, #76]	; 0x4c
   2240c:	bic	r8, r6, r5
   22410:	orr	r3, r3, r0
   22414:	bic	sl, sl, fp
   22418:	orr	r3, r3, r8
   2241c:	str	r8, [sp, #84]	; 0x54
   22420:	ldr	r8, [sp, #32]
   22424:	bic	r6, r5, r6
   22428:	orr	r5, sl, r7
   2242c:	bic	fp, lr, r8
   22430:	orr	r5, r5, r6
   22434:	bic	lr, r8, lr
   22438:	str	lr, [sp, #32]
   2243c:	orr	r5, r5, lr
   22440:	str	r0, [sp, #80]	; 0x50
   22444:	ldr	lr, [sp, #36]	; 0x24
   22448:	ldr	r0, [sp, #8]
   2244c:	orr	r3, r3, fp
   22450:	bic	r8, r0, lr
   22454:	bic	r0, lr, r0
   22458:	ldr	lr, [sp, #40]	; 0x28
   2245c:	orr	r3, r3, r8
   22460:	str	r8, [sp, #8]
   22464:	ldr	r8, [sp, #12]
   22468:	str	fp, [sp, #88]	; 0x58
   2246c:	str	sl, [r9]
   22470:	bic	fp, r1, lr
   22474:	ldr	sl, [sp, #16]
   22478:	bic	r1, lr, r1
   2247c:	orr	r3, r3, fp
   22480:	bic	lr, r2, r8
   22484:	orr	r3, r3, lr
   22488:	bic	r2, r8, r2
   2248c:	orr	r5, r5, r0
   22490:	bic	r8, ip, sl
   22494:	orr	r5, r5, r1
   22498:	orrs	r3, r3, r8
   2249c:	bic	r3, sl, ip
   224a0:	ldr	ip, [sp, #32]
   224a4:	orr	r5, r5, r2
   224a8:	str	r7, [r9, #4]
   224ac:	str	r6, [r9, #8]
   224b0:	str	ip, [r9, #12]
   224b4:	str	r0, [r9, #16]
   224b8:	str	r1, [r9, #20]
   224bc:	str	r2, [r9, #24]
   224c0:	orr	r5, r5, r3
   224c4:	str	r3, [r9, #28]
   224c8:	beq	225ac <__assert_fail@plt+0x11054>
   224cc:	ldr	sl, [sp, #20]
   224d0:	ldr	r3, [sp, #108]	; 0x6c
   224d4:	ldr	r6, [sp, #76]	; 0x4c
   224d8:	ldr	r1, [sp]
   224dc:	str	r6, [r3, sl, lsl #5]
   224e0:	add	r3, r3, sl, lsl #5
   224e4:	ldr	r6, [sp, #80]	; 0x50
   224e8:	add	ip, sl, sl, lsl #1
   224ec:	str	r6, [r3, #4]
   224f0:	ldr	r6, [sp, #84]	; 0x54
   224f4:	add	r7, sp, #3232	; 0xca0
   224f8:	str	r6, [r3, #8]
   224fc:	ldr	r6, [sp, #88]	; 0x58
   22500:	str	fp, [r3, #20]
   22504:	str	r6, [r3, #12]
   22508:	ldr	r6, [sp, #8]
   2250c:	str	lr, [r3, #24]
   22510:	str	r6, [r3, #16]
   22514:	str	r8, [r3, #28]
   22518:	ldr	r2, [r1, #4]
   2251c:	ldr	r3, [sp, #44]	; 0x2c
   22520:	ldr	r0, [sp, #56]	; 0x38
   22524:	add	r7, r7, ip, lsl #2
   22528:	str	r3, [r4]
   2252c:	str	r2, [r7, #4]
   22530:	ldr	r3, [sp, #48]	; 0x30
   22534:	ldr	r1, [r1, #4]
   22538:	str	r0, [r4, #12]
   2253c:	ldr	r0, [sp, #24]
   22540:	str	r3, [r4, #4]
   22544:	str	r0, [r4, #20]
   22548:	ldr	r3, [sp, #60]	; 0x3c
   2254c:	ldr	r0, [sp, #64]	; 0x40
   22550:	cmp	r1, #0
   22554:	ldr	r1, [sp, #52]	; 0x34
   22558:	str	r3, [r4, #16]
   2255c:	str	r1, [r4, #8]
   22560:	str	r0, [r4, #24]
   22564:	ldr	r0, [sp, #68]	; 0x44
   22568:	str	r0, [r4, #28]
   2256c:	ble	22648 <__assert_fail@plt+0x110f0>
   22570:	add	r3, sp, #3232	; 0xca0
   22574:	lsl	r0, r2, #2
   22578:	str	r2, [r3, ip, lsl #2]
   2257c:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   22580:	cmp	r0, #0
   22584:	str	r0, [r7, #8]
   22588:	beq	22664 <__assert_fail@plt+0x1110c>
   2258c:	ldr	r3, [sp]
   22590:	ldr	r2, [r3, #4]
   22594:	ldr	r1, [r3, #8]
   22598:	lsl	r2, r2, #2
   2259c:	bl	11264 <memcpy@plt>
   225a0:	ldr	r3, [sp, #20]
   225a4:	add	r3, r3, #1
   225a8:	str	r3, [sp, #20]
   225ac:	ldr	r3, [sp, #72]	; 0x48
   225b0:	ldr	r2, [sp, #92]	; 0x5c
   225b4:	ldr	r0, [sp]
   225b8:	ldr	r3, [r3, #12]
   225bc:	ldr	r1, [r3, r2]
   225c0:	bl	189a4 <__assert_fail@plt+0x744c>
   225c4:	cmp	r0, #0
   225c8:	beq	22670 <__assert_fail@plt+0x11118>
   225cc:	cmp	r5, #0
   225d0:	beq	22758 <__assert_fail@plt+0x11200>
   225d4:	ldr	r3, [sp, #4]
   225d8:	ldr	r2, [sp, #20]
   225dc:	add	r3, r3, #1
   225e0:	str	r3, [sp, #4]
   225e4:	cmp	r3, r2
   225e8:	ldr	r3, [sp]
   225ec:	add	r4, r4, #32
   225f0:	add	r3, r3, #12
   225f4:	str	r3, [sp]
   225f8:	bge	22758 <__assert_fail@plt+0x11200>
   225fc:	ldr	r3, [sp, #28]
   22600:	cmp	r3, #1
   22604:	bne	22324 <__assert_fail@plt+0x10dcc>
   22608:	ldr	r3, [sp, #100]	; 0x64
   2260c:	ldrb	r1, [r3]
   22610:	ldr	r3, [sp, #4]
   22614:	and	r2, r1, #31
   22618:	asr	r1, r1, #5
   2261c:	lsl	r3, r3, #5
   22620:	add	r3, r3, r1, lsl #2
   22624:	add	r1, sp, #14464	; 0x3880
   22628:	add	r1, r1, #32
   2262c:	add	r3, r1, r3
   22630:	sub	r3, r3, #8192	; 0x2000
   22634:	ldr	r3, [r3]
   22638:	lsr	r2, r3, r2
   2263c:	tst	r2, #1
   22640:	beq	225d4 <__assert_fail@plt+0x1107c>
   22644:	b	22324 <__assert_fail@plt+0x10dcc>
   22648:	add	r3, sp, #3232	; 0xca0
   2264c:	mov	r2, #0
   22650:	str	r2, [r3, ip, lsl #2]
   22654:	str	r2, [r7, #4]
   22658:	str	r2, [r7, #8]
   2265c:	mov	r3, sl
   22660:	b	225a4 <__assert_fail@plt+0x1104c>
   22664:	mov	r2, r7
   22668:	str	r0, [r2, #4]
   2266c:	str	r0, [r2]
   22670:	ldr	r6, [sp, #20]
   22674:	add	r4, sp, #3232	; 0xca0
   22678:	mov	r5, #0
   2267c:	ldr	r0, [r4, #8]
   22680:	add	r5, r5, #1
   22684:	bl	13c04 <__assert_fail@plt+0x26ac>
   22688:	cmp	r5, r6
   2268c:	add	r4, r4, #12
   22690:	bne	2267c <__assert_fail@plt+0x11124>
   22694:	mov	r0, #0
   22698:	add	sp, sp, #14464	; 0x3880
   2269c:	add	sp, sp, #36	; 0x24
   226a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   226a4:	ldr	r3, [r3, r2, lsl #3]
   226a8:	ldr	ip, [r9]
   226ac:	ldr	r0, [r9, #4]
   226b0:	ldr	r1, [r3, #4]
   226b4:	ldr	r2, [r3]
   226b8:	orr	r0, r0, r1
   226bc:	orr	r2, ip, r2
   226c0:	ldr	r1, [r3, #8]
   226c4:	ldr	ip, [r9, #8]
   226c8:	str	r2, [r9]
   226cc:	orr	r1, ip, r1
   226d0:	ldr	r2, [r3, #12]
   226d4:	ldr	ip, [r9, #12]
   226d8:	str	r0, [r9, #4]
   226dc:	orr	r2, ip, r2
   226e0:	ldr	r0, [r3, #16]
   226e4:	ldr	ip, [r9, #16]
   226e8:	str	r1, [r9, #8]
   226ec:	orr	r0, ip, r0
   226f0:	ldr	r1, [r3, #20]
   226f4:	ldr	ip, [r9, #20]
   226f8:	str	r2, [r9, #12]
   226fc:	orr	r1, ip, r1
   22700:	ldr	r2, [r3, #24]
   22704:	ldr	ip, [r3, #28]
   22708:	ldr	r3, [r9, #24]
   2270c:	str	r0, [r9, #16]
   22710:	orr	r2, r3, r2
   22714:	ldr	r3, [r9, #28]
   22718:	str	r1, [r9, #20]
   2271c:	orr	r3, r3, ip
   22720:	str	r2, [r9, #24]
   22724:	str	r3, [r9, #28]
   22728:	b	22094 <__assert_fail@plt+0x10b3c>
   2272c:	ldr	r3, [sp, #100]	; 0x64
   22730:	ldrb	r3, [r3, #6]
   22734:	tst	r3, #64	; 0x40
   22738:	beq	221f0 <__assert_fail@plt+0x10c98>
   2273c:	mov	r2, #32
   22740:	mov	r1, #0
   22744:	mov	r0, r9
   22748:	bl	1145c <memset@plt>
   2274c:	ldr	r3, [sp, #72]	; 0x48
   22750:	ldr	r1, [r3, #8]
   22754:	b	21f14 <__assert_fail@plt+0x109bc>
   22758:	ldr	r3, [sp, #20]
   2275c:	ldr	r2, [sp, #4]
   22760:	cmp	r3, r2
   22764:	bne	2274c <__assert_fail@plt+0x111f4>
   22768:	mov	lr, r9
   2276c:	mov	r4, r3
   22770:	add	r5, sp, #14464	; 0x3880
   22774:	ldm	lr!, {r0, r1, r2, r3}
   22778:	add	r5, r5, #32
   2277c:	add	ip, r5, r4, lsl #5
   22780:	sub	ip, ip, #8192	; 0x2000
   22784:	add	r5, r4, r4, lsl #1
   22788:	stmia	ip!, {r0, r1, r2, r3}
   2278c:	add	r3, sp, #3232	; 0xca0
   22790:	add	r4, r3, r5, lsl #2
   22794:	ldm	lr, {r0, r1, r2, r3}
   22798:	ldr	lr, [sp, #72]	; 0x48
   2279c:	stm	ip, {r0, r1, r2, r3}
   227a0:	mov	r2, #1
   227a4:	ldr	r3, [sp, #92]	; 0x5c
   227a8:	ldr	lr, [lr, #12]
   227ac:	mov	r0, #4
   227b0:	ldr	r6, [lr, r3]
   227b4:	add	r3, sp, #3232	; 0xca0
   227b8:	str	r2, [r3, r5, lsl #2]
   227bc:	str	r2, [r4, #4]
   227c0:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   227c4:	cmp	r0, #0
   227c8:	str	r0, [r4, #8]
   227cc:	beq	22da8 <__assert_fail@plt+0x11850>
   227d0:	mov	r1, #0
   227d4:	str	r6, [r0]
   227d8:	mov	r2, #32
   227dc:	mov	r0, r9
   227e0:	bl	1145c <memset@plt>
   227e4:	ldr	r3, [sp, #72]	; 0x48
   227e8:	ldr	r1, [r3, #8]
   227ec:	ldr	r3, [sp, #20]
   227f0:	add	r3, r3, #1
   227f4:	str	r3, [sp, #20]
   227f8:	b	21f14 <__assert_fail@plt+0x109bc>
   227fc:	ldr	r2, [sp, #104]	; 0x68
   22800:	ldr	r3, [r2, #92]	; 0x5c
   22804:	cmp	r3, #1
   22808:	ble	22d70 <__assert_fail@plt+0x11818>
   2280c:	ldr	r2, [r2, #60]	; 0x3c
   22810:	ldr	ip, [r9]
   22814:	ldr	r1, [r9, #4]
   22818:	ldm	r2, {r0, r3}
   2281c:	orr	r0, ip, r0
   22820:	orr	r3, r1, r3
   22824:	ldr	ip, [r9, #8]
   22828:	ldr	r1, [r2, #8]
   2282c:	str	r0, [r9]
   22830:	orr	r1, ip, r1
   22834:	ldr	r0, [r2, #12]
   22838:	ldr	ip, [r9, #12]
   2283c:	str	r3, [r9, #4]
   22840:	orr	r0, ip, r0
   22844:	ldr	r3, [r2, #16]
   22848:	ldr	ip, [r9, #16]
   2284c:	str	r1, [r9, #8]
   22850:	orr	r3, ip, r3
   22854:	ldr	r1, [r2, #20]
   22858:	ldr	ip, [r9, #20]
   2285c:	str	r0, [r9, #12]
   22860:	orr	r1, ip, r1
   22864:	ldr	r0, [r2, #28]
   22868:	ldr	ip, [r2, #24]
   2286c:	str	r3, [r9, #16]
   22870:	ldr	r2, [r9, #24]
   22874:	ldr	r3, [r9, #28]
   22878:	orr	r2, r2, ip
   2287c:	orr	r3, r3, r0
   22880:	str	r1, [r9, #20]
   22884:	str	r2, [r9, #24]
   22888:	str	r3, [r9, #28]
   2288c:	ldr	r3, [sp, #104]	; 0x68
   22890:	ldr	r3, [r3, #128]	; 0x80
   22894:	tst	r3, #64	; 0x40
   22898:	ldreq	r2, [r9]
   2289c:	biceq	r2, r2, #1024	; 0x400
   228a0:	streq	r2, [r9]
   228a4:	tst	r3, #128	; 0x80
   228a8:	beq	22094 <__assert_fail@plt+0x10b3c>
   228ac:	ldr	r3, [r9]
   228b0:	bic	r3, r3, #1
   228b4:	str	r3, [r9]
   228b8:	b	22094 <__assert_fail@plt+0x10b3c>
   228bc:	ldr	r5, [r9]
   228c0:	mov	r2, #32
   228c4:	and	r5, r5, #1024	; 0x400
   228c8:	mov	r1, #0
   228cc:	mov	r0, r9
   228d0:	bl	1145c <memset@plt>
   228d4:	cmp	r5, #0
   228d8:	beq	2274c <__assert_fail@plt+0x111f4>
   228dc:	mov	r3, #1024	; 0x400
   228e0:	str	r3, [r9]
   228e4:	b	220a4 <__assert_fail@plt+0x10b4c>
   228e8:	ldr	r2, [r4, #96]	; 0x60
   228ec:	ldr	r3, [r9]
   228f0:	ldr	r1, [r4, #100]	; 0x64
   228f4:	ldr	r0, [r9, #4]
   228f8:	bic	r3, r3, r2
   228fc:	bic	r0, r0, r1
   22900:	ldr	r2, [r4, #104]	; 0x68
   22904:	ldr	r1, [r9, #8]
   22908:	ldr	ip, [r9, #12]
   2290c:	bic	r1, r1, r2
   22910:	ldr	r2, [r4, #108]	; 0x6c
   22914:	ldr	lr, [r9, #16]
   22918:	bic	ip, ip, r2
   2291c:	ldr	r2, [r4, #112]	; 0x70
   22920:	str	r3, [r9]
   22924:	bic	r2, lr, r2
   22928:	orr	r3, r3, r0
   2292c:	ldr	lr, [r9, #20]
   22930:	str	r0, [r9, #4]
   22934:	ldr	r0, [r4, #116]	; 0x74
   22938:	orr	r3, r3, r1
   2293c:	bic	r0, lr, r0
   22940:	orr	r3, r3, ip
   22944:	ldr	lr, [r9, #24]
   22948:	str	r1, [r9, #8]
   2294c:	ldr	r1, [r4, #120]	; 0x78
   22950:	orr	r3, r3, r2
   22954:	str	ip, [r9, #12]
   22958:	str	r2, [r9, #16]
   2295c:	ldr	ip, [r4, #124]	; 0x7c
   22960:	ldr	r2, [r9, #28]
   22964:	bic	r1, lr, r1
   22968:	orr	r3, r3, r0
   2296c:	bic	r2, r2, ip
   22970:	orr	r3, r3, r1
   22974:	str	r0, [r9, #20]
   22978:	str	r1, [r9, #24]
   2297c:	orr	r3, r3, r2
   22980:	str	r2, [r9, #28]
   22984:	b	222e4 <__assert_fail@plt+0x10d8c>
   22988:	ldr	r7, [sp, #8]
   2298c:	mov	r3, #0
   22990:	mov	r2, r8
   22994:	mov	r1, fp
   22998:	ldr	r0, [sp, #16]
   2299c:	bl	21a14 <__assert_fail@plt+0x104bc>
   229a0:	ldr	r3, [sp, #4]
   229a4:	cmp	r0, #0
   229a8:	str	r0, [r3, #4]!
   229ac:	mov	r4, r0
   229b0:	str	r3, [sp, #4]
   229b4:	beq	22bb4 <__assert_fail@plt+0x1165c>
   229b8:	ldrsb	r3, [r4, #52]	; 0x34
   229bc:	cmp	r3, #0
   229c0:	blt	22c5c <__assert_fail@plt+0x11704>
   229c4:	ldr	r3, [sp]
   229c8:	str	r4, [r9, sl, lsl #2]
   229cc:	str	r4, [r3]
   229d0:	ldr	r3, [r7, #4]
   229d4:	ldr	r0, [r9, #-2076]	; 0xfffff7e4
   229d8:	ldr	r1, [sp, #20]
   229dc:	add	sl, sl, #1
   229e0:	ldr	r2, [r7]
   229e4:	orr	r0, r0, r3
   229e8:	ldr	r4, [r9, #-2080]	; 0xfffff7e0
   229ec:	ldr	r3, [r7, #8]
   229f0:	cmp	sl, r1
   229f4:	ldr	r1, [r9, #-2072]	; 0xfffff7e8
   229f8:	orr	r4, r4, r2
   229fc:	orr	r1, r1, r3
   22a00:	ldr	r2, [r9, #-2068]	; 0xfffff7ec
   22a04:	ldr	r3, [r7, #12]
   22a08:	str	r0, [r9, #-2076]	; 0xfffff7e4
   22a0c:	orr	r2, r2, r3
   22a10:	ldr	r3, [sp]
   22a14:	ldr	r0, [r9, #-2060]	; 0xfffff7f4
   22a18:	add	r3, r3, #4
   22a1c:	str	r1, [r9, #-2072]	; 0xfffff7e8
   22a20:	ldr	r1, [r7, #20]
   22a24:	ldr	ip, [r9, #-2064]	; 0xfffff7f0
   22a28:	str	r3, [sp]
   22a2c:	ldr	r3, [r7, #16]
   22a30:	orr	r1, r0, r1
   22a34:	str	r2, [r9, #-2068]	; 0xfffff7ec
   22a38:	ldr	r0, [r7, #24]
   22a3c:	ldr	r2, [r9, #-2056]	; 0xfffff7f8
   22a40:	orr	r3, ip, r3
   22a44:	orr	r2, r2, r0
   22a48:	str	r3, [r9, #-2064]	; 0xfffff7f0
   22a4c:	ldr	r0, [r7, #28]
   22a50:	ldr	r3, [r9, #-2052]	; 0xfffff7fc
   22a54:	add	r6, r6, #12
   22a58:	orr	r3, r3, r0
   22a5c:	str	r4, [r9, #-2080]	; 0xfffff7e0
   22a60:	str	r1, [r9, #-2060]	; 0xfffff7f4
   22a64:	str	r2, [r9, #-2056]	; 0xfffff7f8
   22a68:	str	r3, [r9, #-2052]	; 0xfffff7fc
   22a6c:	add	r7, r7, #32
   22a70:	bne	21fbc <__assert_fail@plt+0x10a64>
   22a74:	ldr	r3, [sp, #24]
   22a78:	ldr	r5, [sp, #32]
   22a7c:	cmp	r3, #0
   22a80:	bne	22dd8 <__assert_fail@plt+0x11880>
   22a84:	mov	r1, #256	; 0x100
   22a88:	mov	r0, #4
   22a8c:	bl	2b604 <__assert_fail@plt+0x1a0ac>
   22a90:	ldr	r3, [sp, #72]	; 0x48
   22a94:	cmp	r0, #0
   22a98:	str	r0, [r3, #44]	; 0x2c
   22a9c:	beq	22bc0 <__assert_fail@plt+0x11668>
   22aa0:	ldr	r3, [sp, #104]	; 0x68
   22aa4:	add	r8, sp, #128	; 0x80
   22aa8:	add	r6, r3, #96	; 0x60
   22aac:	mov	r7, r0
   22ab0:	add	fp, r0, #1024	; 0x400
   22ab4:	ldr	r1, [r8], #4
   22ab8:	cmp	r1, #0
   22abc:	movne	ip, r7
   22ac0:	movne	r2, #1
   22ac4:	bne	22adc <__assert_fail@plt+0x11584>
   22ac8:	b	22b28 <__assert_fail@plt+0x115d0>
   22acc:	lsrs	r1, r1, #1
   22ad0:	lsl	r2, r2, #1
   22ad4:	add	ip, ip, #4
   22ad8:	beq	22b28 <__assert_fail@plt+0x115d0>
   22adc:	tst	r1, #1
   22ae0:	beq	22acc <__assert_fail@plt+0x11574>
   22ae4:	ldr	r3, [r5]
   22ae8:	ands	r3, r2, r3
   22aec:	bne	22dd0 <__assert_fail@plt+0x11878>
   22af0:	add	r3, r3, #1
   22af4:	ldr	lr, [r5, r3, lsl #5]
   22af8:	tst	r2, lr
   22afc:	beq	22af0 <__assert_fail@plt+0x11598>
   22b00:	ldr	lr, [r6]
   22b04:	add	r3, r9, r3, lsl #2
   22b08:	tst	r2, lr
   22b0c:	add	ip, ip, #4
   22b10:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   22b14:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   22b18:	lsrs	r1, r1, #1
   22b1c:	str	r3, [ip, #-4]
   22b20:	lsl	r2, r2, #1
   22b24:	bne	22adc <__assert_fail@plt+0x11584>
   22b28:	add	r7, r7, #128	; 0x80
   22b2c:	cmp	fp, r7
   22b30:	add	r6, r6, #4
   22b34:	add	r5, r5, #4
   22b38:	bne	22ab4 <__assert_fail@plt+0x1155c>
   22b3c:	tst	r4, #1024	; 0x400
   22b40:	beq	22b7c <__assert_fail@plt+0x11624>
   22b44:	mov	r3, #0
   22b48:	ldr	r1, [sp, #28]
   22b4c:	b	22b5c <__assert_fail@plt+0x11604>
   22b50:	add	r3, r3, #1
   22b54:	cmp	sl, r3
   22b58:	beq	22b7c <__assert_fail@plt+0x11624>
   22b5c:	ldr	r2, [r1, r3, lsl #5]
   22b60:	tst	r2, #1024	; 0x400
   22b64:	beq	22b50 <__assert_fail@plt+0x115f8>
   22b68:	ldr	r2, [sp, #24]
   22b6c:	ldr	r3, [r9, r3, lsl #2]
   22b70:	cmp	r2, #0
   22b74:	str	r3, [r0, #40]	; 0x28
   22b78:	strne	r3, [r0, #1064]	; 0x428
   22b7c:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   22b80:	add	r9, sl, sl, lsl #1
   22b84:	bl	13c04 <__assert_fail@plt+0x26ac>
   22b88:	ldr	r5, [sp, #12]
   22b8c:	mov	r4, #0
   22b90:	lsl	r9, r9, #2
   22b94:	add	r3, r5, r4
   22b98:	add	r4, r4, #12
   22b9c:	ldr	r0, [r3, #8]
   22ba0:	bl	13c04 <__assert_fail@plt+0x26ac>
   22ba4:	cmp	r4, r9
   22ba8:	bne	22b94 <__assert_fail@plt+0x1163c>
   22bac:	mov	r0, #1
   22bb0:	b	22698 <__assert_fail@plt+0x11140>
   22bb4:	ldr	r3, [r9, #-2096]	; 0xfffff7d0
   22bb8:	cmp	r3, #0
   22bbc:	beq	229b8 <__assert_fail@plt+0x11460>
   22bc0:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   22bc4:	bl	13c04 <__assert_fail@plt+0x26ac>
   22bc8:	ldr	r5, [sp, #12]
   22bcc:	ldr	r6, [sp, #20]
   22bd0:	mov	r4, #0
   22bd4:	ldr	r0, [r5, #8]
   22bd8:	add	r4, r4, #1
   22bdc:	bl	13c04 <__assert_fail@plt+0x26ac>
   22be0:	cmp	r4, r6
   22be4:	add	r5, r5, #12
   22be8:	bne	22bd4 <__assert_fail@plt+0x1167c>
   22bec:	b	22694 <__assert_fail@plt+0x1113c>
   22bf0:	ldr	r3, [sp, #104]	; 0x68
   22bf4:	ldr	r2, [r3, #128]	; 0x80
   22bf8:	mvn	r3, #0
   22bfc:	tst	r2, #64	; 0x40
   22c00:	str	r3, [r9]
   22c04:	str	r3, [r9, #4]
   22c08:	str	r3, [r9, #8]
   22c0c:	str	r3, [r9, #12]
   22c10:	mvneq	r3, #1024	; 0x400
   22c14:	streq	r3, [r9]
   22c18:	tst	r2, #128	; 0x80
   22c1c:	beq	22094 <__assert_fail@plt+0x10b3c>
   22c20:	b	228ac <__assert_fail@plt+0x11354>
   22c24:	mov	r3, #12
   22c28:	str	r3, [r9, #-2096]	; 0xfffff7d0
   22c2c:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   22c30:	b	22bc4 <__assert_fail@plt+0x1166c>
   22c34:	ldr	r3, [sp, #100]	; 0x64
   22c38:	ldrb	r3, [r3, #6]
   22c3c:	tst	r3, #64	; 0x40
   22c40:	bne	220c0 <__assert_fail@plt+0x10b68>
   22c44:	b	2273c <__assert_fail@plt+0x111e4>
   22c48:	mov	r3, #12
   22c4c:	str	r3, [r9, #-2096]	; 0xfffff7d0
   22c50:	add	r3, sp, #3232	; 0xca0
   22c54:	str	r3, [sp, #12]
   22c58:	b	22bc4 <__assert_fail@plt+0x1166c>
   22c5c:	mov	r3, #1
   22c60:	mov	r2, r8
   22c64:	mov	r1, fp
   22c68:	ldr	r0, [sp, #16]
   22c6c:	bl	21a14 <__assert_fail@plt+0x104bc>
   22c70:	ldr	r3, [sp]
   22c74:	cmp	r0, #0
   22c78:	str	r0, [r3]
   22c7c:	beq	22dc0 <__assert_fail@plt+0x11868>
   22c80:	cmp	r4, r0
   22c84:	beq	22c9c <__assert_fail@plt+0x11744>
   22c88:	ldr	r3, [fp, #92]	; 0x5c
   22c8c:	ldr	r2, [sp, #24]
   22c90:	cmp	r3, #1
   22c94:	movgt	r2, #1
   22c98:	str	r2, [sp, #24]
   22c9c:	mov	r3, #2
   22ca0:	mov	r2, r8
   22ca4:	mov	r1, fp
   22ca8:	ldr	r0, [sp, #16]
   22cac:	bl	21a14 <__assert_fail@plt+0x104bc>
   22cb0:	cmp	r0, #0
   22cb4:	str	r0, [r9, sl, lsl #2]
   22cb8:	bne	229d0 <__assert_fail@plt+0x11478>
   22cbc:	ldr	r3, [r9, #-2096]	; 0xfffff7d0
   22cc0:	cmp	r3, #0
   22cc4:	beq	229d0 <__assert_fail@plt+0x11478>
   22cc8:	b	22bc0 <__assert_fail@plt+0x11668>
   22ccc:	ldr	r5, [sp, #104]	; 0x68
   22cd0:	ldr	ip, [r9, #4]
   22cd4:	ldr	r1, [r9]
   22cd8:	ldr	r2, [r5, #100]	; 0x64
   22cdc:	ldr	r0, [r9, #8]
   22ce0:	and	ip, ip, r2
   22ce4:	ldr	r3, [r5, #96]	; 0x60
   22ce8:	ldr	r2, [r5, #104]	; 0x68
   22cec:	and	r3, r3, r1
   22cf0:	and	r0, r0, r2
   22cf4:	ldr	r1, [r9, #12]
   22cf8:	ldr	r2, [r5, #108]	; 0x6c
   22cfc:	ldr	lr, [r9, #16]
   22d00:	and	r1, r1, r2
   22d04:	ldr	r2, [r5, #112]	; 0x70
   22d08:	str	r3, [r9]
   22d0c:	and	r2, r2, lr
   22d10:	orr	r3, r3, ip
   22d14:	ldr	lr, [r9, #20]
   22d18:	str	ip, [r9, #4]
   22d1c:	ldr	ip, [r5, #116]	; 0x74
   22d20:	orr	r3, r3, r0
   22d24:	and	ip, ip, lr
   22d28:	orr	r3, r3, r1
   22d2c:	ldr	lr, [r9, #24]
   22d30:	str	r0, [r9, #8]
   22d34:	ldr	r0, [r5, #120]	; 0x78
   22d38:	orr	r3, r3, r2
   22d3c:	str	r1, [r9, #12]
   22d40:	str	r2, [r9, #16]
   22d44:	ldr	r1, [r9, #28]
   22d48:	ldr	r2, [r5, #124]	; 0x7c
   22d4c:	and	r0, r0, lr
   22d50:	orr	r3, r3, ip
   22d54:	and	r1, r1, r2
   22d58:	orr	r3, r3, r0
   22d5c:	str	ip, [r9, #20]
   22d60:	str	r0, [r9, #24]
   22d64:	orr	r2, r3, r1
   22d68:	str	r1, [r9, #28]
   22d6c:	b	221d4 <__assert_fail@plt+0x10c7c>
   22d70:	mov	r2, #32
   22d74:	mvn	r1, #0
   22d78:	mov	r0, r9
   22d7c:	bl	1145c <memset@plt>
   22d80:	b	2288c <__assert_fail@plt+0x11334>
   22d84:	bne	22694 <__assert_fail@plt+0x1113c>
   22d88:	mov	r1, #256	; 0x100
   22d8c:	mov	r0, #4
   22d90:	bl	2b604 <__assert_fail@plt+0x1a0ac>
   22d94:	ldr	r3, [sp, #72]	; 0x48
   22d98:	str	r0, [r3, #44]	; 0x2c
   22d9c:	adds	r0, r0, #0
   22da0:	movne	r0, #1
   22da4:	b	22698 <__assert_fail@plt+0x11140>
   22da8:	ldr	r3, [sp, #20]
   22dac:	str	r0, [r4, #4]
   22db0:	cmp	r3, #0
   22db4:	str	r0, [r4]
   22db8:	beq	22694 <__assert_fail@plt+0x1113c>
   22dbc:	b	22670 <__assert_fail@plt+0x11118>
   22dc0:	ldr	r3, [r9, #-2096]	; 0xfffff7d0
   22dc4:	cmp	r3, #0
   22dc8:	beq	22c88 <__assert_fail@plt+0x11730>
   22dcc:	b	22bc0 <__assert_fail@plt+0x11668>
   22dd0:	mov	r3, #0
   22dd4:	b	22b00 <__assert_fail@plt+0x115a8>
   22dd8:	mov	r1, #512	; 0x200
   22ddc:	mov	r0, #4
   22de0:	bl	2b604 <__assert_fail@plt+0x1a0ac>
   22de4:	ldr	r3, [sp, #72]	; 0x48
   22de8:	cmp	r0, #0
   22dec:	str	r0, [r3, #48]	; 0x30
   22df0:	beq	22bc0 <__assert_fail@plt+0x11668>
   22df4:	add	r7, sp, #128	; 0x80
   22df8:	mov	lr, r0
   22dfc:	add	r8, r0, #1024	; 0x400
   22e00:	ldr	r1, [r7], #4
   22e04:	cmp	r1, #0
   22e08:	movne	ip, lr
   22e0c:	movne	r2, #1
   22e10:	bne	22e28 <__assert_fail@plt+0x118d0>
   22e14:	b	22e64 <__assert_fail@plt+0x1190c>
   22e18:	lsrs	r1, r1, #1
   22e1c:	lsl	r2, r2, #1
   22e20:	add	ip, ip, #4
   22e24:	beq	22e64 <__assert_fail@plt+0x1190c>
   22e28:	tst	r1, #1
   22e2c:	beq	22e18 <__assert_fail@plt+0x118c0>
   22e30:	ldr	r3, [r5]
   22e34:	ands	r3, r2, r3
   22e38:	bne	22e78 <__assert_fail@plt+0x11920>
   22e3c:	add	r3, r3, #1
   22e40:	ldr	r6, [r5, r3, lsl #5]
   22e44:	tst	r2, r6
   22e48:	beq	22e3c <__assert_fail@plt+0x118e4>
   22e4c:	add	r3, r9, r3, lsl #2
   22e50:	ldr	r6, [r3, #-2048]	; 0xfffff800
   22e54:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   22e58:	str	r6, [ip]
   22e5c:	str	r3, [ip, #1024]	; 0x400
   22e60:	b	22e18 <__assert_fail@plt+0x118c0>
   22e64:	add	lr, lr, #128	; 0x80
   22e68:	cmp	r8, lr
   22e6c:	add	r5, r5, #4
   22e70:	bne	22e00 <__assert_fail@plt+0x118a8>
   22e74:	b	22b3c <__assert_fail@plt+0x115e4>
   22e78:	mov	r3, #0
   22e7c:	b	22e4c <__assert_fail@plt+0x118f4>
   22e80:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   22e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22e88:	mov	r5, r0
   22e8c:	ldr	r0, [r0, #84]	; 0x54
   22e90:	sub	sp, sp, #92	; 0x5c
   22e94:	mov	ip, r1
   22e98:	str	r0, [sp, #28]
   22e9c:	ldr	r0, [r0]
   22ea0:	mov	r7, r2
   22ea4:	str	r1, [sp, #40]	; 0x28
   22ea8:	ldr	r2, [sp, #132]	; 0x84
   22eac:	ldr	r1, [r5, #120]	; 0x78
   22eb0:	ldr	r6, [ip, #4]
   22eb4:	mov	r8, #0
   22eb8:	add	r2, r2, r1
   22ebc:	mov	r4, r3
   22ec0:	str	r8, [sp, #56]	; 0x38
   22ec4:	ldr	r3, [r0, r7, lsl #3]
   22ec8:	cmp	r2, r6
   22ecc:	str	r3, [sp, #32]
   22ed0:	bge	23680 <__assert_fail@plt+0x12128>
   22ed4:	ldr	r3, [sp, #40]	; 0x28
   22ed8:	ldr	r6, [r3]
   22edc:	cmp	r6, #0
   22ee0:	beq	230b8 <__assert_fail@plt+0x11b60>
   22ee4:	ldr	r9, [r3, #8]
   22ee8:	ldr	r3, [r5, #100]	; 0x64
   22eec:	ldr	r2, [r5, #88]	; 0x58
   22ef0:	str	r3, [sp, #44]	; 0x2c
   22ef4:	ldr	r3, [r5, #40]	; 0x28
   22ef8:	str	r9, [r5, #100]	; 0x64
   22efc:	str	r6, [r5, #40]	; 0x28
   22f00:	sub	r1, r6, #1
   22f04:	mov	r0, r5
   22f08:	str	r3, [sp, #48]	; 0x30
   22f0c:	bl	1906c <__assert_fail@plt+0x7b14>
   22f10:	cmp	r6, r4
   22f14:	mov	r8, r0
   22f18:	beq	230e8 <__assert_fail@plt+0x11b90>
   22f1c:	ldr	r7, [r9, r6, lsl #2]
   22f20:	cmp	r7, #0
   22f24:	beq	236d4 <__assert_fail@plt+0x1217c>
   22f28:	ldrb	r3, [r7, #52]	; 0x34
   22f2c:	ands	r2, r3, #64	; 0x40
   22f30:	bne	23630 <__assert_fail@plt+0x120d8>
   22f34:	add	r1, sp, #64	; 0x40
   22f38:	str	r1, [sp, #16]
   22f3c:	str	r2, [sp, #64]	; 0x40
   22f40:	str	r2, [sp, #68]	; 0x44
   22f44:	str	r2, [sp, #72]	; 0x48
   22f48:	tst	r3, #64	; 0x40
   22f4c:	beq	22fa8 <__assert_fail@plt+0x11a50>
   22f50:	ldr	r3, [sp, #68]	; 0x44
   22f54:	cmp	r3, #0
   22f58:	beq	22f84 <__assert_fail@plt+0x11a2c>
   22f5c:	ldr	r3, [sp, #136]	; 0x88
   22f60:	mov	r2, r6
   22f64:	str	r3, [sp]
   22f68:	ldr	r1, [sp, #16]
   22f6c:	ldr	r3, [sp, #32]
   22f70:	mov	r0, r5
   22f74:	bl	1dbb0 <__assert_fail@plt+0xc658>
   22f78:	cmp	r0, #0
   22f7c:	str	r0, [sp, #56]	; 0x38
   22f80:	bne	234d8 <__assert_fail@plt+0x11f80>
   22f84:	mov	r3, r8
   22f88:	ldr	r2, [sp, #16]
   22f8c:	ldr	r1, [sp, #28]
   22f90:	add	r0, sp, #56	; 0x38
   22f94:	bl	21a14 <__assert_fail@plt+0x104bc>
   22f98:	subs	r7, r0, #0
   22f9c:	beq	236ec <__assert_fail@plt+0x12194>
   22fa0:	ldr	r3, [r5, #100]	; 0x64
   22fa4:	str	r7, [r3, r6, lsl #2]
   22fa8:	ldr	r3, [sp, #132]	; 0x84
   22fac:	cmp	r3, r6
   22fb0:	ble	233e0 <__assert_fail@plt+0x11e88>
   22fb4:	ldr	r3, [r5, #120]	; 0x78
   22fb8:	cmp	r3, #0
   22fbc:	blt	233e0 <__assert_fail@plt+0x11e88>
   22fc0:	mov	r3, #0
   22fc4:	add	r2, r6, #1
   22fc8:	str	r3, [sp, #24]
   22fcc:	ldr	r3, [r5, #100]	; 0x64
   22fd0:	mov	fp, r6
   22fd4:	lsl	r2, r2, #2
   22fd8:	str	r2, [sp, #12]
   22fdc:	ldr	r2, [sp, #12]
   22fe0:	ldr	r6, [r3, r2]
   22fe4:	mov	r3, #0
   22fe8:	cmp	r6, r3
   22fec:	str	r3, [sp, #68]	; 0x44
   22ff0:	beq	234ac <__assert_fail@plt+0x11f54>
   22ff4:	ldr	r4, [r6, #8]
   22ff8:	cmp	r4, r3
   22ffc:	streq	r4, [sp, #56]	; 0x38
   23000:	beq	234ac <__assert_fail@plt+0x11f54>
   23004:	ldr	r3, [sp, #64]	; 0x40
   23008:	cmp	r3, r4, lsl #1
   2300c:	blt	235e0 <__assert_fail@plt+0x12088>
   23010:	add	r1, r6, #4
   23014:	ldr	r0, [sp, #16]
   23018:	bl	18f28 <__assert_fail@plt+0x79d0>
   2301c:	cmp	r0, #0
   23020:	str	r0, [sp, #56]	; 0x38
   23024:	bne	234d8 <__assert_fail@plt+0x11f80>
   23028:	cmp	r7, #0
   2302c:	beq	23318 <__assert_fail@plt+0x11dc0>
   23030:	ldr	r3, [r7, #20]
   23034:	mov	r2, #0
   23038:	cmp	r3, r2
   2303c:	str	r2, [sp, #60]	; 0x3c
   23040:	str	r2, [sp, #76]	; 0x4c
   23044:	str	r2, [sp, #80]	; 0x50
   23048:	str	r2, [sp, #84]	; 0x54
   2304c:	ldr	r8, [r5, #84]	; 0x54
   23050:	ble	23710 <__assert_fail@plt+0x121b8>
   23054:	ldr	r3, [r7, #24]
   23058:	mov	r4, #0
   2305c:	ldr	r6, [r3]
   23060:	mov	r3, r8
   23064:	ldr	r0, [r3], #128	; 0x80
   23068:	lsl	sl, r6, #3
   2306c:	str	r3, [sp, #20]
   23070:	add	r3, r0, sl
   23074:	ldrb	r1, [r3, #6]
   23078:	ldrb	r2, [r3, #4]
   2307c:	tst	r1, #16
   23080:	bne	23238 <__assert_fail@plt+0x11ce0>
   23084:	ldr	r1, [r5, #4]
   23088:	sub	r2, r2, #1
   2308c:	ldrb	r1, [r1, fp]
   23090:	cmp	r2, #6
   23094:	ldrls	pc, [pc, r2, lsl #2]
   23098:	b	23204 <__assert_fail@plt+0x11cac>
   2309c:	andeq	r3, r2, r4, ror r4
   230a0:	andeq	r3, r2, r4, lsl #4
   230a4:	andeq	r3, r2, r4, lsr r4
   230a8:	andeq	r3, r2, r4, lsl #4
   230ac:	andeq	r3, r2, ip, asr #2
   230b0:	andeq	r3, r2, r4, lsl #4
   230b4:	andeq	r3, r2, r4, asr #2
   230b8:	ldr	r2, [r5, #100]	; 0x64
   230bc:	ldr	r3, [r3, #8]
   230c0:	str	r2, [sp, #44]	; 0x2c
   230c4:	ldr	r2, [r5, #40]	; 0x28
   230c8:	str	r3, [r5, #100]	; 0x64
   230cc:	str	r2, [sp, #48]	; 0x30
   230d0:	str	r4, [r5, #40]	; 0x28
   230d4:	ldr	r2, [r5, #88]	; 0x58
   230d8:	sub	r1, r4, #1
   230dc:	mov	r0, r5
   230e0:	bl	1906c <__assert_fail@plt+0x7b14>
   230e4:	mov	r8, r0
   230e8:	mov	r3, #1
   230ec:	mov	r0, #4
   230f0:	str	r3, [sp, #64]	; 0x40
   230f4:	str	r3, [sp, #68]	; 0x44
   230f8:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   230fc:	cmp	r0, #0
   23100:	str	r0, [sp, #72]	; 0x48
   23104:	beq	23708 <__assert_fail@plt+0x121b0>
   23108:	add	r3, sp, #64	; 0x40
   2310c:	str	r3, [sp, #16]
   23110:	mov	r1, r3
   23114:	mov	ip, #0
   23118:	str	r7, [r0]
   2311c:	ldr	r3, [sp, #136]	; 0x88
   23120:	ldr	r2, [sp, #32]
   23124:	ldr	r0, [sp, #28]
   23128:	str	ip, [sp, #56]	; 0x38
   2312c:	bl	1c364 <__assert_fail@plt+0xae0c>
   23130:	cmp	r0, #0
   23134:	str	r0, [sp, #56]	; 0x38
   23138:	moveq	r6, r4
   2313c:	beq	22f50 <__assert_fail@plt+0x119f8>
   23140:	b	234d8 <__assert_fail@plt+0x11f80>
   23144:	tst	r1, #128	; 0x80
   23148:	bne	23204 <__assert_fail@plt+0x11cac>
   2314c:	cmp	r1, #10
   23150:	beq	23518 <__assert_fail@plt+0x11fc0>
   23154:	cmp	r1, #0
   23158:	bne	2316c <__assert_fail@plt+0x11c14>
   2315c:	ldr	r2, [r5, #84]	; 0x54
   23160:	ldr	r2, [r2, #128]	; 0x80
   23164:	tst	r2, #128	; 0x80
   23168:	bne	23204 <__assert_fail@plt+0x11cac>
   2316c:	ldr	r9, [r3, #4]
   23170:	ldr	r3, [pc, #1472]	; 23738 <__assert_fail@plt+0x121e0>
   23174:	tst	r9, r3
   23178:	beq	231cc <__assert_fail@plt+0x11c74>
   2317c:	ldr	r2, [r5, #88]	; 0x58
   23180:	mov	r1, fp
   23184:	mov	r0, r5
   23188:	bl	1906c <__assert_fail@plt+0x7b14>
   2318c:	ldr	r3, [pc, #1448]	; 2373c <__assert_fail@plt+0x121e4>
   23190:	and	r9, r3, r9, lsr #8
   23194:	tst	r9, #4
   23198:	beq	23504 <__assert_fail@plt+0x11fac>
   2319c:	tst	r0, #1
   231a0:	beq	23204 <__assert_fail@plt+0x11cac>
   231a4:	tst	r9, #8
   231a8:	bne	23204 <__assert_fail@plt+0x11cac>
   231ac:	tst	r9, #32
   231b0:	beq	231bc <__assert_fail@plt+0x11c64>
   231b4:	tst	r0, #2
   231b8:	beq	23204 <__assert_fail@plt+0x11cac>
   231bc:	tst	r9, #128	; 0x80
   231c0:	beq	231cc <__assert_fail@plt+0x11c74>
   231c4:	tst	r0, #8
   231c8:	beq	23204 <__assert_fail@plt+0x11cac>
   231cc:	lsl	sl, r6, #2
   231d0:	ldr	r2, [r8, #12]
   231d4:	ldr	r3, [sp, #64]	; 0x40
   231d8:	cmp	r3, #0
   231dc:	ldr	r6, [r2, sl]
   231e0:	beq	23484 <__assert_fail@plt+0x11f2c>
   231e4:	ldr	r2, [sp, #68]	; 0x44
   231e8:	cmp	r2, #0
   231ec:	bne	2352c <__assert_fail@plt+0x11fd4>
   231f0:	ldr	r3, [sp, #72]	; 0x48
   231f4:	str	r6, [r3]
   231f8:	ldr	r3, [sp, #68]	; 0x44
   231fc:	add	r3, r3, #1
   23200:	str	r3, [sp, #68]	; 0x44
   23204:	ldr	r3, [r7, #20]
   23208:	add	r4, r4, #1
   2320c:	cmp	r4, r3
   23210:	bge	23460 <__assert_fail@plt+0x11f08>
   23214:	ldr	r3, [r7, #24]
   23218:	ldr	r0, [r8]
   2321c:	ldr	r6, [r3, r4, lsl #2]
   23220:	lsl	sl, r6, #3
   23224:	add	r3, r0, sl
   23228:	ldrb	r1, [r3, #6]
   2322c:	ldrb	r2, [r3, #4]
   23230:	tst	r1, #16
   23234:	beq	23084 <__assert_fail@plt+0x11b2c>
   23238:	str	fp, [sp]
   2323c:	mov	r3, r5
   23240:	mov	r2, r6
   23244:	ldr	r1, [sp, #20]
   23248:	bl	1ab48 <__assert_fail@plt+0x95f0>
   2324c:	cmp	r0, #1
   23250:	ble	234ec <__assert_fail@plt+0x11f94>
   23254:	ldr	r3, [r5, #100]	; 0x64
   23258:	add	r9, r0, fp
   2325c:	ldr	r2, [r8, #12]
   23260:	ldr	r3, [r3, r9, lsl #2]
   23264:	mov	r1, #0
   23268:	cmp	r3, #0
   2326c:	ldr	r2, [r2, r6, lsl #2]
   23270:	lsl	sl, r6, #2
   23274:	str	r1, [sp, #80]	; 0x50
   23278:	beq	232b8 <__assert_fail@plt+0x11d60>
   2327c:	ldr	r6, [r3, #8]
   23280:	cmp	r6, r1
   23284:	streq	r6, [sp, #60]	; 0x3c
   23288:	beq	232b8 <__assert_fail@plt+0x11d60>
   2328c:	ldr	r1, [sp, #76]	; 0x4c
   23290:	cmp	r1, r6, lsl #1
   23294:	blt	23574 <__assert_fail@plt+0x1201c>
   23298:	add	r1, r3, #4
   2329c:	add	r0, sp, #76	; 0x4c
   232a0:	str	r2, [sp, #36]	; 0x24
   232a4:	bl	18f28 <__assert_fail@plt+0x79d0>
   232a8:	ldr	r2, [sp, #36]	; 0x24
   232ac:	cmp	r0, #0
   232b0:	str	r0, [sp, #60]	; 0x3c
   232b4:	bne	23300 <__assert_fail@plt+0x11da8>
   232b8:	mov	r1, r2
   232bc:	add	r0, sp, #76	; 0x4c
   232c0:	bl	189a4 <__assert_fail@plt+0x744c>
   232c4:	cmp	r0, #0
   232c8:	beq	234c8 <__assert_fail@plt+0x11f70>
   232cc:	add	r2, sp, #76	; 0x4c
   232d0:	mov	r1, r8
   232d4:	add	r0, sp, #60	; 0x3c
   232d8:	ldr	r6, [r5, #100]	; 0x64
   232dc:	bl	1d8d4 <__assert_fail@plt+0xc37c>
   232e0:	ldr	r3, [r5, #100]	; 0x64
   232e4:	str	r0, [r6, r9, lsl #2]
   232e8:	ldr	r3, [r3, r9, lsl #2]
   232ec:	cmp	r3, #0
   232f0:	bne	231d0 <__assert_fail@plt+0x11c78>
   232f4:	ldr	r3, [sp, #60]	; 0x3c
   232f8:	cmp	r3, #0
   232fc:	beq	231d0 <__assert_fail@plt+0x11c78>
   23300:	ldr	r0, [sp, #84]	; 0x54
   23304:	bl	13c04 <__assert_fail@plt+0x26ac>
   23308:	ldr	r3, [sp, #60]	; 0x3c
   2330c:	cmp	r3, #0
   23310:	str	r3, [sp, #56]	; 0x38
   23314:	bne	234d8 <__assert_fail@plt+0x11f80>
   23318:	ldr	r3, [sp, #68]	; 0x44
   2331c:	add	r4, fp, #1
   23320:	cmp	r3, #0
   23324:	mov	r6, r4
   23328:	beq	23374 <__assert_fail@plt+0x11e1c>
   2332c:	ldr	r3, [sp, #136]	; 0x88
   23330:	ldr	r2, [sp, #32]
   23334:	ldr	r1, [sp, #16]
   23338:	ldr	r0, [sp, #28]
   2333c:	bl	1c364 <__assert_fail@plt+0xae0c>
   23340:	cmp	r0, #0
   23344:	str	r0, [sp, #56]	; 0x38
   23348:	bne	234d8 <__assert_fail@plt+0x11f80>
   2334c:	ldr	r3, [sp, #136]	; 0x88
   23350:	mov	r2, r4
   23354:	str	r3, [sp]
   23358:	ldr	r1, [sp, #16]
   2335c:	ldr	r3, [sp, #32]
   23360:	mov	r0, r5
   23364:	bl	1dbb0 <__assert_fail@plt+0xc658>
   23368:	cmp	r0, #0
   2336c:	str	r0, [sp, #56]	; 0x38
   23370:	bne	234d8 <__assert_fail@plt+0x11f80>
   23374:	ldr	r2, [r5, #88]	; 0x58
   23378:	mov	r1, fp
   2337c:	mov	r0, r5
   23380:	bl	1906c <__assert_fail@plt+0x7b14>
   23384:	ldr	r2, [sp, #16]
   23388:	ldr	r1, [sp, #28]
   2338c:	mov	r3, r0
   23390:	add	r0, sp, #56	; 0x38
   23394:	bl	21a14 <__assert_fail@plt+0x104bc>
   23398:	subs	r7, r0, #0
   2339c:	beq	23608 <__assert_fail@plt+0x120b0>
   233a0:	mov	r2, #0
   233a4:	str	r2, [sp, #24]
   233a8:	ldr	r3, [r5, #100]	; 0x64
   233ac:	ldr	r2, [sp, #12]
   233b0:	str	r7, [r3, r2]
   233b4:	ldr	r2, [sp, #132]	; 0x84
   233b8:	cmp	r2, r4
   233bc:	ble	233e0 <__assert_fail@plt+0x11e88>
   233c0:	ldr	r1, [sp, #12]
   233c4:	ldr	r2, [r5, #120]	; 0x78
   233c8:	add	r1, r1, #4
   233cc:	str	r1, [sp, #12]
   233d0:	ldr	r1, [sp, #24]
   233d4:	mov	fp, r4
   233d8:	cmp	r1, r2
   233dc:	ble	22fdc <__assert_fail@plt+0x11a84>
   233e0:	ldr	r0, [sp, #72]	; 0x48
   233e4:	bl	13c04 <__assert_fail@plt+0x26ac>
   233e8:	ldr	r3, [r5, #100]	; 0x64
   233ec:	ldr	r2, [sp, #132]	; 0x84
   233f0:	ldr	r3, [r3, r2, lsl #2]
   233f4:	cmp	r3, #0
   233f8:	beq	23718 <__assert_fail@plt+0x121c0>
   233fc:	ldr	r2, [sp, #40]	; 0x28
   23400:	add	r1, r3, #12
   23404:	str	r6, [r2]
   23408:	ldr	r2, [sp, #48]	; 0x30
   2340c:	str	r2, [r5, #40]	; 0x28
   23410:	ldr	r2, [sp, #44]	; 0x2c
   23414:	ldr	r0, [r3, #8]
   23418:	str	r2, [r5, #100]	; 0x64
   2341c:	ldr	r2, [sp, #128]	; 0x80
   23420:	bl	18ac0 <__assert_fail@plt+0x7568>
   23424:	clz	r0, r0
   23428:	lsr	r0, r0, #5
   2342c:	add	sp, sp, #92	; 0x5c
   23430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23434:	ldr	r2, [r3]
   23438:	asr	r0, r1, #5
   2343c:	and	r1, r1, #31
   23440:	ldr	r2, [r2, r0, lsl #2]
   23444:	lsr	r1, r2, r1
   23448:	tst	r1, #1
   2344c:	bne	2316c <__assert_fail@plt+0x11c14>
   23450:	ldr	r3, [r7, #20]
   23454:	add	r4, r4, #1
   23458:	cmp	r4, r3
   2345c:	blt	23214 <__assert_fail@plt+0x11cbc>
   23460:	ldr	r0, [sp, #84]	; 0x54
   23464:	bl	13c04 <__assert_fail@plt+0x26ac>
   23468:	mov	r3, #0
   2346c:	str	r3, [sp, #56]	; 0x38
   23470:	b	23318 <__assert_fail@plt+0x11dc0>
   23474:	ldrb	r2, [r3]
   23478:	cmp	r2, r1
   2347c:	bne	23204 <__assert_fail@plt+0x11cac>
   23480:	b	2316c <__assert_fail@plt+0x11c14>
   23484:	mov	r3, #1
   23488:	mov	r0, #4
   2348c:	str	r3, [sp, #64]	; 0x40
   23490:	str	r3, [sp, #68]	; 0x44
   23494:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   23498:	cmp	r0, #0
   2349c:	str	r0, [sp, #72]	; 0x48
   234a0:	beq	234c0 <__assert_fail@plt+0x11f68>
   234a4:	str	r6, [r0]
   234a8:	b	23204 <__assert_fail@plt+0x11cac>
   234ac:	cmp	r7, #0
   234b0:	bne	23030 <__assert_fail@plt+0x11ad8>
   234b4:	add	r4, fp, #1
   234b8:	mov	r6, r4
   234bc:	b	23374 <__assert_fail@plt+0x11e1c>
   234c0:	str	r0, [sp, #68]	; 0x44
   234c4:	str	r0, [sp, #64]	; 0x40
   234c8:	ldr	r0, [sp, #84]	; 0x54
   234cc:	bl	13c04 <__assert_fail@plt+0x26ac>
   234d0:	mov	r3, #12
   234d4:	str	r3, [sp, #56]	; 0x38
   234d8:	ldr	r0, [sp, #72]	; 0x48
   234dc:	bl	13c04 <__assert_fail@plt+0x26ac>
   234e0:	ldr	r0, [sp, #56]	; 0x38
   234e4:	add	sp, sp, #92	; 0x5c
   234e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   234ec:	cmp	r0, #0
   234f0:	bne	231cc <__assert_fail@plt+0x11c74>
   234f4:	ldr	r3, [r8]
   234f8:	add	r3, r3, sl
   234fc:	ldrb	r2, [r3, #4]
   23500:	b	23084 <__assert_fail@plt+0x11b2c>
   23504:	tst	r9, #8
   23508:	beq	231ac <__assert_fail@plt+0x11c54>
   2350c:	tst	r0, #1
   23510:	beq	231ac <__assert_fail@plt+0x11c54>
   23514:	b	23204 <__assert_fail@plt+0x11cac>
   23518:	ldr	r2, [r5, #84]	; 0x54
   2351c:	ldr	r2, [r2, #128]	; 0x80
   23520:	tst	r2, #64	; 0x40
   23524:	bne	2316c <__assert_fail@plt+0x11c14>
   23528:	b	23204 <__assert_fail@plt+0x11cac>
   2352c:	cmp	r3, r2
   23530:	beq	23658 <__assert_fail@plt+0x12100>
   23534:	ldr	r9, [sp, #72]	; 0x48
   23538:	ldr	r3, [r9]
   2353c:	cmp	r6, r3
   23540:	bge	235ac <__assert_fail@plt+0x12054>
   23544:	cmp	r2, #0
   23548:	ble	23560 <__assert_fail@plt+0x12008>
   2354c:	lsl	r2, r2, #2
   23550:	mov	r1, r9
   23554:	add	r0, r9, #4
   23558:	bl	11234 <memmove@plt>
   2355c:	mov	r2, #0
   23560:	str	r6, [r9, r2, lsl #2]
   23564:	ldr	r3, [sp, #68]	; 0x44
   23568:	add	r3, r3, #1
   2356c:	str	r3, [sp, #68]	; 0x44
   23570:	b	23204 <__assert_fail@plt+0x11cac>
   23574:	add	r6, r6, r1
   23578:	ldr	r0, [sp, #84]	; 0x54
   2357c:	lsl	r1, r6, #3
   23580:	str	r3, [sp, #52]	; 0x34
   23584:	str	r2, [sp, #36]	; 0x24
   23588:	bl	2b678 <__assert_fail@plt+0x1a120>
   2358c:	lsl	r6, r6, #1
   23590:	ldr	r2, [sp, #36]	; 0x24
   23594:	ldr	r3, [sp, #52]	; 0x34
   23598:	cmp	r0, #0
   2359c:	beq	236fc <__assert_fail@plt+0x121a4>
   235a0:	str	r0, [sp, #84]	; 0x54
   235a4:	str	r6, [sp, #76]	; 0x4c
   235a8:	b	23298 <__assert_fail@plt+0x11d40>
   235ac:	sub	r3, r2, #-1073741823	; 0xc0000001
   235b0:	ldr	r1, [r9, r3, lsl #2]
   235b4:	lsl	r3, r3, #2
   235b8:	cmp	r6, r1
   235bc:	bge	23560 <__assert_fail@plt+0x12008>
   235c0:	add	r3, r3, #4
   235c4:	add	r3, r9, r3
   235c8:	str	r1, [r3], #-4
   235cc:	ldr	r1, [r3, #-4]
   235d0:	sub	r2, r2, #1
   235d4:	cmp	r6, r1
   235d8:	blt	235c8 <__assert_fail@plt+0x12070>
   235dc:	b	23560 <__assert_fail@plt+0x12008>
   235e0:	add	r4, r4, r3
   235e4:	ldr	r0, [sp, #72]	; 0x48
   235e8:	lsl	r1, r4, #3
   235ec:	bl	2b678 <__assert_fail@plt+0x1a120>
   235f0:	lsl	r4, r4, #1
   235f4:	cmp	r0, #0
   235f8:	beq	234d0 <__assert_fail@plt+0x11f78>
   235fc:	str	r0, [sp, #72]	; 0x48
   23600:	str	r4, [sp, #64]	; 0x40
   23604:	b	23010 <__assert_fail@plt+0x11ab8>
   23608:	ldr	r3, [sp, #56]	; 0x38
   2360c:	cmp	r3, #0
   23610:	bne	234d8 <__assert_fail@plt+0x11f80>
   23614:	ldr	r2, [sp, #24]
   23618:	ldr	r3, [r5, #100]	; 0x64
   2361c:	add	r2, r2, #1
   23620:	str	r2, [sp, #24]
   23624:	ldr	r2, [sp, #12]
   23628:	str	r7, [r3, r2]
   2362c:	b	233b4 <__assert_fail@plt+0x11e5c>
   23630:	add	r3, sp, #64	; 0x40
   23634:	mov	r0, r3
   23638:	add	r1, r7, #4
   2363c:	str	r3, [sp, #16]
   23640:	bl	18d64 <__assert_fail@plt+0x780c>
   23644:	cmp	r0, #0
   23648:	str	r0, [sp, #56]	; 0x38
   2364c:	bne	234e4 <__assert_fail@plt+0x11f8c>
   23650:	ldrb	r3, [r7, #52]	; 0x34
   23654:	b	22f48 <__assert_fail@plt+0x119f0>
   23658:	lsl	r3, r2, #1
   2365c:	lsl	r1, r2, #3
   23660:	ldr	r0, [sp, #72]	; 0x48
   23664:	str	r3, [sp, #64]	; 0x40
   23668:	bl	2b678 <__assert_fail@plt+0x1a120>
   2366c:	subs	r9, r0, #0
   23670:	beq	234c8 <__assert_fail@plt+0x11f70>
   23674:	ldr	r2, [sp, #68]	; 0x44
   23678:	str	r9, [sp, #72]	; 0x48
   2367c:	b	23538 <__assert_fail@plt+0x11fe0>
   23680:	mvn	r3, #-2147483648	; 0x80000000
   23684:	add	r9, r2, #1
   23688:	sub	r3, r3, r6
   2368c:	cmp	r9, r3
   23690:	bgt	23708 <__assert_fail@plt+0x121b0>
   23694:	add	sl, r6, r9
   23698:	cmn	sl, #-1073741823	; 0xc0000001
   2369c:	bhi	23708 <__assert_fail@plt+0x121b0>
   236a0:	lsl	r1, sl, #2
   236a4:	ldr	r0, [ip, #8]
   236a8:	mov	fp, ip
   236ac:	bl	2b678 <__assert_fail@plt+0x1a120>
   236b0:	cmp	r0, #0
   236b4:	beq	23708 <__assert_fail@plt+0x121b0>
   236b8:	str	r0, [fp, #8]
   236bc:	str	sl, [fp, #4]
   236c0:	lsl	r2, r9, #2
   236c4:	mov	r1, r8
   236c8:	add	r0, r0, r6, lsl #2
   236cc:	bl	1145c <memset@plt>
   236d0:	b	22ed4 <__assert_fail@plt+0x1197c>
   236d4:	add	r3, sp, #64	; 0x40
   236d8:	str	r3, [sp, #16]
   236dc:	str	r7, [sp, #64]	; 0x40
   236e0:	str	r7, [sp, #68]	; 0x44
   236e4:	str	r7, [sp, #72]	; 0x48
   236e8:	b	22fa8 <__assert_fail@plt+0x11a50>
   236ec:	ldr	r3, [sp, #56]	; 0x38
   236f0:	cmp	r3, #0
   236f4:	beq	22fa0 <__assert_fail@plt+0x11a48>
   236f8:	b	234d8 <__assert_fail@plt+0x11f80>
   236fc:	mov	r3, #12
   23700:	str	r3, [sp, #60]	; 0x3c
   23704:	b	23300 <__assert_fail@plt+0x11da8>
   23708:	mov	r0, #12
   2370c:	b	234e4 <__assert_fail@plt+0x11f8c>
   23710:	mov	r0, #0
   23714:	b	23464 <__assert_fail@plt+0x11f0c>
   23718:	ldr	r3, [sp, #40]	; 0x28
   2371c:	mov	r0, #1
   23720:	str	r6, [r3]
   23724:	ldr	r3, [sp, #44]	; 0x2c
   23728:	str	r3, [r5, #100]	; 0x64
   2372c:	ldr	r3, [sp, #48]	; 0x30
   23730:	str	r3, [r5, #40]	; 0x28
   23734:	b	234e4 <__assert_fail@plt+0x11f8c>
   23738:	andeq	pc, r3, r0, lsl #30
   2373c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   23740:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23744:	sub	sp, sp, #20
   23748:	mov	ip, r2
   2374c:	ldr	r5, [sp, #56]	; 0x38
   23750:	ldr	r4, [r2, #4]
   23754:	mov	lr, #8
   23758:	mov	r6, r2
   2375c:	ldr	r2, [ip], #8
   23760:	mov	r7, r3
   23764:	str	r3, [sp]
   23768:	mov	r9, r1
   2376c:	mov	r3, r4
   23770:	mov	r1, ip
   23774:	stmib	sp, {r5, lr}
   23778:	mov	r4, r0
   2377c:	bl	22e84 <__assert_fail@plt+0x1192c>
   23780:	subs	r8, r0, #0
   23784:	beq	23794 <__assert_fail@plt+0x1223c>
   23788:	mov	r0, r8
   2378c:	add	sp, sp, #20
   23790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23794:	ldr	r3, [r4, #108]	; 0x6c
   23798:	ldr	r1, [r4, #112]	; 0x70
   2379c:	ldr	sl, [r6, #4]
   237a0:	cmp	r3, r1
   237a4:	ldr	fp, [r9]
   237a8:	movlt	ip, sl
   237ac:	bge	238a8 <__assert_fail@plt+0x12350>
   237b0:	add	r2, r3, r3, lsl #1
   237b4:	cmp	r3, #0
   237b8:	ldr	r0, [r4, #116]	; 0x74
   237bc:	lsl	r2, r2, #3
   237c0:	ble	237dc <__assert_fail@plt+0x12284>
   237c4:	sub	r1, r2, #24
   237c8:	add	r1, r0, r1
   237cc:	ldr	lr, [r1, #4]
   237d0:	cmp	r5, lr
   237d4:	moveq	lr, #1
   237d8:	strbeq	lr, [r1, #20]
   237dc:	add	r1, r0, r2
   237e0:	cmp	fp, sl
   237e4:	str	r7, [r0, r2]
   237e8:	add	r3, r3, #1
   237ec:	movne	r0, #0
   237f0:	mvneq	r0, #0
   237f4:	mov	r2, #0
   237f8:	stmib	r1, {r5, fp}
   237fc:	str	sl, [r1, #12]
   23800:	str	r0, [r1, #16]
   23804:	str	r3, [r4, #108]	; 0x6c
   23808:	strb	r2, [r1, #20]
   2380c:	ldr	r3, [r4, #120]	; 0x78
   23810:	sub	sl, sl, fp
   23814:	cmp	r3, sl
   23818:	strlt	sl, [r4, #120]	; 0x78
   2381c:	ldr	r2, [r9]
   23820:	add	r5, r5, ip
   23824:	ldr	r3, [r4, #36]	; 0x24
   23828:	sub	r5, r5, r2
   2382c:	cmp	r5, r3
   23830:	ldr	r6, [r4, #104]	; 0x68
   23834:	blt	2388c <__assert_fail@plt+0x12334>
   23838:	ldr	r2, [r4, #48]	; 0x30
   2383c:	cmp	r3, r2
   23840:	bge	2388c <__assert_fail@plt+0x12334>
   23844:	add	r1, r5, #1
   23848:	mov	r0, r4
   2384c:	bl	1d6c0 <__assert_fail@plt+0xc168>
   23850:	cmp	r0, #0
   23854:	bne	238fc <__assert_fail@plt+0x123a4>
   23858:	cmp	r5, r6
   2385c:	ble	23788 <__assert_fail@plt+0x12230>
   23860:	sub	r2, r5, r6
   23864:	ldr	r0, [r4, #100]	; 0x64
   23868:	add	r6, r6, #1
   2386c:	lsl	r2, r2, #2
   23870:	add	r0, r0, r6, lsl #2
   23874:	mov	r1, #0
   23878:	bl	1145c <memset@plt>
   2387c:	mov	r0, r8
   23880:	str	r5, [r4, #104]	; 0x68
   23884:	add	sp, sp, #20
   23888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2388c:	ldr	r3, [r4, #28]
   23890:	cmp	r5, r3
   23894:	blt	23858 <__assert_fail@plt+0x12300>
   23898:	ldr	r2, [r4, #48]	; 0x30
   2389c:	cmp	r3, r2
   238a0:	bge	23858 <__assert_fail@plt+0x12300>
   238a4:	b	23844 <__assert_fail@plt+0x122ec>
   238a8:	add	r1, r1, r1, lsl #1
   238ac:	ldr	r0, [r4, #116]	; 0x74
   238b0:	lsl	r1, r1, #4
   238b4:	bl	2b678 <__assert_fail@plt+0x1a120>
   238b8:	cmp	r0, #0
   238bc:	beq	23904 <__assert_fail@plt+0x123ac>
   238c0:	ldr	r2, [r4, #112]	; 0x70
   238c4:	ldr	r3, [r4, #108]	; 0x6c
   238c8:	str	r0, [r4, #116]	; 0x74
   238cc:	add	r2, r2, r2, lsl #1
   238d0:	add	r3, r3, r3, lsl #1
   238d4:	lsl	r2, r2, #3
   238d8:	add	r0, r0, r3, lsl #3
   238dc:	mov	r1, r8
   238e0:	bl	1145c <memset@plt>
   238e4:	ldr	r2, [r4, #112]	; 0x70
   238e8:	ldr	ip, [r6, #4]
   238ec:	ldr	r3, [r4, #108]	; 0x6c
   238f0:	lsl	r2, r2, #1
   238f4:	str	r2, [r4, #112]	; 0x70
   238f8:	b	237b0 <__assert_fail@plt+0x12258>
   238fc:	mov	r8, r0
   23900:	b	23788 <__assert_fail@plt+0x12230>
   23904:	ldr	r0, [r4, #116]	; 0x74
   23908:	bl	13c04 <__assert_fail@plt+0x26ac>
   2390c:	mov	r8, #12
   23910:	b	23788 <__assert_fail@plt+0x12230>
   23914:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23918:	sub	sp, sp, #92	; 0x5c
   2391c:	ldr	r6, [r1]
   23920:	ldr	r3, [r0, #84]	; 0x54
   23924:	cmp	r6, #0
   23928:	str	r3, [sp, #36]	; 0x24
   2392c:	ldr	fp, [r0, #40]	; 0x28
   23930:	ble	23ebc <__assert_fail@plt+0x12964>
   23934:	mov	r3, #0
   23938:	str	r3, [sp, #20]
   2393c:	lsl	r3, fp, #2
   23940:	str	r2, [sp, #40]	; 0x28
   23944:	mov	sl, r0
   23948:	str	r1, [sp, #64]	; 0x40
   2394c:	str	r3, [sp, #52]	; 0x34
   23950:	mov	r9, fp
   23954:	b	2396c <__assert_fail@plt+0x12414>
   23958:	ldr	r3, [sp, #20]
   2395c:	add	r3, r3, #1
   23960:	cmp	r3, r6
   23964:	str	r3, [sp, #20]
   23968:	bge	23ebc <__assert_fail@plt+0x12964>
   2396c:	ldr	r3, [sp, #40]	; 0x28
   23970:	ldr	r1, [sp, #20]
   23974:	ldr	r2, [r3]
   23978:	ldr	r3, [sp, #36]	; 0x24
   2397c:	ldr	fp, [r2, r1, lsl #2]
   23980:	ldr	r3, [r3]
   23984:	add	r3, r3, fp, lsl #3
   23988:	ldrb	r2, [r3, #4]
   2398c:	cmp	r2, #4
   23990:	bne	23958 <__assert_fail@plt+0x12400>
   23994:	ldr	r4, [r3, #4]
   23998:	ldr	r3, [pc, #1928]	; 24128 <__assert_fail@plt+0x12bd0>
   2399c:	tst	r4, r3
   239a0:	beq	239f4 <__assert_fail@plt+0x1249c>
   239a4:	ldr	r2, [sl, #88]	; 0x58
   239a8:	mov	r1, r9
   239ac:	mov	r0, sl
   239b0:	bl	1906c <__assert_fail@plt+0x7b14>
   239b4:	ldr	r3, [pc, #1904]	; 2412c <__assert_fail@plt+0x12bd4>
   239b8:	and	r4, r3, r4, lsr #8
   239bc:	tst	r4, #4
   239c0:	beq	23c54 <__assert_fail@plt+0x126fc>
   239c4:	tst	r0, #1
   239c8:	beq	23958 <__assert_fail@plt+0x12400>
   239cc:	tst	r4, #8
   239d0:	bne	23958 <__assert_fail@plt+0x12400>
   239d4:	tst	r4, #32
   239d8:	beq	239e4 <__assert_fail@plt+0x1248c>
   239dc:	tst	r0, #2
   239e0:	beq	23958 <__assert_fail@plt+0x12400>
   239e4:	tst	r4, #128	; 0x80
   239e8:	beq	239f4 <__assert_fail@plt+0x1249c>
   239ec:	tst	r0, #8
   239f0:	beq	23958 <__assert_fail@plt+0x12400>
   239f4:	ldr	ip, [sl, #108]	; 0x6c
   239f8:	mov	r0, #0
   239fc:	mov	r8, ip
   23a00:	mov	r3, ip
   23a04:	cmp	r0, r3
   23a08:	bge	23a64 <__assert_fail@plt+0x1250c>
   23a0c:	add	r2, r0, r3
   23a10:	ldr	lr, [sl, #116]	; 0x74
   23a14:	add	r2, r2, r2, lsr #31
   23a18:	asr	r2, r2, #1
   23a1c:	add	r1, r2, r2, lsl #1
   23a20:	add	r1, lr, r1, lsl #3
   23a24:	ldr	r1, [r1, #4]
   23a28:	cmp	r9, r1
   23a2c:	ble	23a54 <__assert_fail@plt+0x124fc>
   23a30:	b	23c40 <__assert_fail@plt+0x126e8>
   23a34:	asr	r3, r3, #1
   23a38:	mov	r4, r3
   23a3c:	add	r1, r3, r3, lsl #1
   23a40:	add	r1, lr, r1, lsl #3
   23a44:	ldr	r1, [r1, #4]
   23a48:	cmp	r9, r1
   23a4c:	bgt	23c48 <__assert_fail@plt+0x126f0>
   23a50:	mov	r2, r3
   23a54:	add	r3, r0, r2
   23a58:	cmp	r0, r2
   23a5c:	add	r3, r3, r3, lsr #31
   23a60:	blt	23a34 <__assert_fail@plt+0x124dc>
   23a64:	cmp	ip, r0
   23a68:	ble	23c68 <__assert_fail@plt+0x12710>
   23a6c:	add	r2, r0, r0, lsl #1
   23a70:	ldr	r3, [sl, #116]	; 0x74
   23a74:	cmn	r0, #1
   23a78:	add	r3, r3, r2, lsl #3
   23a7c:	ldr	r2, [r3, #4]
   23a80:	sub	r2, r2, r9
   23a84:	clz	r2, r2
   23a88:	lsr	r2, r2, #5
   23a8c:	moveq	r2, #0
   23a90:	cmp	r2, #0
   23a94:	beq	23c68 <__assert_fail@plt+0x12710>
   23a98:	add	r3, r3, #24
   23a9c:	b	23aac <__assert_fail@plt+0x12554>
   23aa0:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   23aa4:	cmp	r2, #0
   23aa8:	beq	23c68 <__assert_fail@plt+0x12710>
   23aac:	ldr	r2, [r3, #-24]	; 0xffffffe8
   23ab0:	add	r3, r3, #24
   23ab4:	cmp	fp, r2
   23ab8:	bne	23aa0 <__assert_fail@plt+0x12548>
   23abc:	mov	r3, #0
   23ac0:	str	r3, [sp, #72]	; 0x48
   23ac4:	cmp	r8, ip
   23ac8:	lsl	r3, fp, #2
   23acc:	str	r3, [sp, #48]	; 0x30
   23ad0:	bge	23c34 <__assert_fail@plt+0x126dc>
   23ad4:	add	r3, fp, fp, lsl #1
   23ad8:	add	r4, r8, r8, lsl #1
   23adc:	lsl	r3, r3, #2
   23ae0:	str	r3, [sp, #56]	; 0x38
   23ae4:	lsl	r4, r4, #3
   23ae8:	ldr	r6, [sp, #36]	; 0x24
   23aec:	b	23b00 <__assert_fail@plt+0x125a8>
   23af0:	add	r8, r8, #1
   23af4:	cmp	r8, ip
   23af8:	add	r4, r4, #24
   23afc:	bge	23c34 <__assert_fail@plt+0x126dc>
   23b00:	ldr	r3, [sl, #116]	; 0x74
   23b04:	add	r2, r3, r4
   23b08:	ldr	r3, [r3, r4]
   23b0c:	cmp	fp, r3
   23b10:	bne	23af0 <__assert_fail@plt+0x12598>
   23b14:	ldr	r3, [r2, #4]
   23b18:	cmp	r9, r3
   23b1c:	bne	23af0 <__assert_fail@plt+0x12598>
   23b20:	ldr	r3, [r2, #12]
   23b24:	ldr	r5, [r2, #8]
   23b28:	subs	r2, r3, r5
   23b2c:	str	r2, [sp, #28]
   23b30:	ldreq	r0, [sp, #56]	; 0x38
   23b34:	ldreq	r2, [r6, #20]
   23b38:	ldrne	r2, [r6, #12]
   23b3c:	addeq	r2, r2, r0
   23b40:	ldrne	r0, [sp, #48]	; 0x30
   23b44:	ldreq	r2, [r2, #8]
   23b48:	ldreq	r1, [r6, #24]
   23b4c:	ldrne	r2, [r2, r0]
   23b50:	ldreq	r2, [r2]
   23b54:	ldrne	r1, [r6, #24]
   23b58:	add	r3, r9, r3
   23b5c:	add	r2, r2, r2, lsl #1
   23b60:	sub	r5, r3, r5
   23b64:	add	r2, r1, r2, lsl #2
   23b68:	str	r2, [sp, #24]
   23b6c:	sub	r1, r5, #1
   23b70:	ldr	r2, [sl, #88]	; 0x58
   23b74:	mov	r0, sl
   23b78:	bl	1906c <__assert_fail@plt+0x7b14>
   23b7c:	ldr	r7, [sl, #100]	; 0x64
   23b80:	ldr	r2, [sp, #52]	; 0x34
   23b84:	ldr	r1, [r7, r2]
   23b88:	ldr	r2, [r7, r5, lsl #2]
   23b8c:	cmp	r1, #0
   23b90:	moveq	r1, #0
   23b94:	ldrne	r1, [r1, #8]
   23b98:	cmp	r2, #0
   23b9c:	str	r1, [sp, #44]	; 0x2c
   23ba0:	mov	r3, r0
   23ba4:	beq	23e08 <__assert_fail@plt+0x128b0>
   23ba8:	str	r0, [sp, #32]
   23bac:	ldr	r1, [r2, #40]	; 0x28
   23bb0:	add	r0, sp, #76	; 0x4c
   23bb4:	ldr	r2, [sp, #24]
   23bb8:	bl	18ddc <__assert_fail@plt+0x7884>
   23bbc:	ldr	r3, [sp, #32]
   23bc0:	cmp	r0, #0
   23bc4:	str	r0, [sp, #72]	; 0x48
   23bc8:	bne	23ea8 <__assert_fail@plt+0x12950>
   23bcc:	add	r2, sp, #76	; 0x4c
   23bd0:	mov	r1, r6
   23bd4:	add	r0, sp, #72	; 0x48
   23bd8:	ldr	r7, [sl, #100]	; 0x64
   23bdc:	bl	21a14 <__assert_fail@plt+0x104bc>
   23be0:	str	r0, [r7, r5, lsl #2]
   23be4:	ldr	r0, [sp, #84]	; 0x54
   23be8:	bl	13c04 <__assert_fail@plt+0x26ac>
   23bec:	ldr	r3, [sl, #100]	; 0x64
   23bf0:	ldr	r2, [r3, r5, lsl #2]
   23bf4:	cmp	r2, #0
   23bf8:	beq	23e2c <__assert_fail@plt+0x128d4>
   23bfc:	ldr	r2, [sp, #28]
   23c00:	cmp	r2, #0
   23c04:	bne	23c20 <__assert_fail@plt+0x126c8>
   23c08:	ldr	r2, [sp, #52]	; 0x34
   23c0c:	ldr	r3, [r3, r2]
   23c10:	ldr	r2, [sp, #44]	; 0x2c
   23c14:	ldr	r3, [r3, #8]
   23c18:	cmp	r3, r2
   23c1c:	bgt	23e3c <__assert_fail@plt+0x128e4>
   23c20:	ldr	ip, [sl, #108]	; 0x6c
   23c24:	add	r8, r8, #1
   23c28:	cmp	r8, ip
   23c2c:	add	r4, r4, #24
   23c30:	blt	23b00 <__assert_fail@plt+0x125a8>
   23c34:	ldr	r3, [sp, #64]	; 0x40
   23c38:	ldr	r6, [r3]
   23c3c:	b	23958 <__assert_fail@plt+0x12400>
   23c40:	mov	r4, r2
   23c44:	mov	r2, r3
   23c48:	add	r0, r4, #1
   23c4c:	mov	r3, r2
   23c50:	b	23a04 <__assert_fail@plt+0x124ac>
   23c54:	tst	r4, #8
   23c58:	beq	239d4 <__assert_fail@plt+0x1247c>
   23c5c:	tst	r0, #1
   23c60:	beq	239d4 <__assert_fail@plt+0x1247c>
   23c64:	b	23958 <__assert_fail@plt+0x12400>
   23c68:	ldr	r3, [sl, #84]	; 0x54
   23c6c:	ldr	r1, [sl, #124]	; 0x7c
   23c70:	str	r3, [sp, #60]	; 0x3c
   23c74:	ldr	r3, [r3]
   23c78:	cmp	r1, #0
   23c7c:	ldr	r2, [r3, fp, lsl #3]
   23c80:	str	r2, [sp, #56]	; 0x38
   23c84:	ble	23abc <__assert_fail@plt+0x12564>
   23c88:	ldr	r2, [sl, #4]
   23c8c:	str	r9, [sp, #32]
   23c90:	mov	ip, r2
   23c94:	mov	r2, #0
   23c98:	mov	r0, r2
   23c9c:	str	r2, [sp, #44]	; 0x2c
   23ca0:	str	fp, [sp, #48]	; 0x30
   23ca4:	str	r8, [sp, #68]	; 0x44
   23ca8:	ldr	r2, [sl, #132]	; 0x84
   23cac:	ldr	r4, [r2, r0, lsl #2]
   23cb0:	ldr	r2, [r4, #4]
   23cb4:	ldr	r3, [r3, r2, lsl #3]
   23cb8:	ldr	r2, [sp, #56]	; 0x38
   23cbc:	cmp	r2, r3
   23cc0:	beq	23ce8 <__assert_fail@plt+0x12790>
   23cc4:	ldr	r3, [sp, #44]	; 0x2c
   23cc8:	add	r3, r3, #1
   23ccc:	cmp	r3, r1
   23cd0:	str	r3, [sp, #44]	; 0x2c
   23cd4:	bge	240cc <__assert_fail@plt+0x12b74>
   23cd8:	ldr	r3, [sp, #60]	; 0x3c
   23cdc:	ldr	r0, [sp, #44]	; 0x2c
   23ce0:	ldr	r3, [r3]
   23ce4:	b	23ca8 <__assert_fail@plt+0x12750>
   23ce8:	ldr	r2, [r4, #16]
   23cec:	ldr	r7, [r4]
   23cf0:	cmp	r2, #0
   23cf4:	ble	24110 <__assert_fail@plt+0x12bb8>
   23cf8:	ldr	r3, [sp, #32]
   23cfc:	mov	r6, #0
   23d00:	str	r7, [sp, #24]
   23d04:	mov	fp, ip
   23d08:	b	23d24 <__assert_fail@plt+0x127cc>
   23d0c:	ldr	r2, [r4, #16]
   23d10:	add	r6, r6, #1
   23d14:	cmp	r6, r2
   23d18:	str	r7, [sp, #24]
   23d1c:	mov	r3, r8
   23d20:	bge	23ec8 <__assert_fail@plt+0x12970>
   23d24:	ldr	r1, [r4, #20]
   23d28:	ldr	r9, [r1, r6, lsl #2]
   23d2c:	ldr	r1, [sp, #24]
   23d30:	ldr	r7, [r9, #4]
   23d34:	sub	r5, r7, r1
   23d38:	cmp	r5, #0
   23d3c:	addle	r8, r5, r3
   23d40:	ble	23d78 <__assert_fail@plt+0x12820>
   23d44:	ldr	r1, [sl, #28]
   23d48:	add	r8, r5, r3
   23d4c:	cmp	r8, r1
   23d50:	bgt	23da8 <__assert_fail@plt+0x12850>
   23d54:	ldr	r1, [sp, #24]
   23d58:	add	r0, fp, r3
   23d5c:	mov	r2, r5
   23d60:	add	r1, fp, r1
   23d64:	str	r3, [sp, #28]
   23d68:	bl	112b8 <memcmp@plt>
   23d6c:	ldr	r3, [sp, #28]
   23d70:	cmp	r0, #0
   23d74:	bne	24048 <__assert_fail@plt+0x12af0>
   23d78:	ldr	r3, [sp, #32]
   23d7c:	mov	r2, r9
   23d80:	str	r3, [sp]
   23d84:	mov	r1, r4
   23d88:	ldr	r3, [sp, #48]	; 0x30
   23d8c:	mov	r0, sl
   23d90:	bl	23740 <__assert_fail@plt+0x121e8>
   23d94:	ldr	fp, [sl, #4]
   23d98:	cmp	r0, #1
   23d9c:	bls	23d0c <__assert_fail@plt+0x127b4>
   23da0:	add	sp, sp, #92	; 0x5c
   23da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23da8:	ldr	r0, [sl, #48]	; 0x30
   23dac:	cmp	r8, r0
   23db0:	bgt	2411c <__assert_fail@plt+0x12bc4>
   23db4:	ldr	r2, [sl, #36]	; 0x24
   23db8:	ldr	fp, [sl, #104]	; 0x68
   23dbc:	cmp	r8, r2
   23dc0:	cmpge	r0, r2
   23dc4:	bgt	23e88 <__assert_fail@plt+0x12930>
   23dc8:	cmp	r1, r0
   23dcc:	blt	23e88 <__assert_fail@plt+0x12930>
   23dd0:	cmp	r8, fp
   23dd4:	ble	23e00 <__assert_fail@plt+0x128a8>
   23dd8:	sub	r2, r8, fp
   23ddc:	ldr	r0, [sl, #100]	; 0x64
   23de0:	add	fp, fp, #1
   23de4:	lsl	r2, r2, #2
   23de8:	add	r0, r0, fp, lsl #2
   23dec:	mov	r1, #0
   23df0:	str	r3, [sp, #28]
   23df4:	bl	1145c <memset@plt>
   23df8:	ldr	r3, [sp, #28]
   23dfc:	str	r8, [sl, #104]	; 0x68
   23e00:	ldr	fp, [sl, #4]
   23e04:	b	23d54 <__assert_fail@plt+0x127fc>
   23e08:	ldr	r2, [sp, #24]
   23e0c:	mov	r1, r6
   23e10:	add	r0, sp, #72	; 0x48
   23e14:	bl	21a14 <__assert_fail@plt+0x104bc>
   23e18:	ldr	r3, [sl, #100]	; 0x64
   23e1c:	str	r0, [r7, r5, lsl #2]
   23e20:	ldr	r2, [r3, r5, lsl #2]
   23e24:	cmp	r2, #0
   23e28:	bne	23bfc <__assert_fail@plt+0x126a4>
   23e2c:	ldr	r0, [sp, #72]	; 0x48
   23e30:	cmp	r0, #0
   23e34:	beq	23bfc <__assert_fail@plt+0x126a4>
   23e38:	b	23da0 <__assert_fail@plt+0x12848>
   23e3c:	ldr	r3, [sp, #24]
   23e40:	mov	r0, sl
   23e44:	add	r5, r3, #4
   23e48:	add	r7, r3, #8
   23e4c:	mov	r2, r7
   23e50:	mov	r1, r5
   23e54:	mov	r3, r9
   23e58:	bl	19d04 <__assert_fail@plt+0x87ac>
   23e5c:	cmp	r0, #0
   23e60:	str	r0, [sp, #72]	; 0x48
   23e64:	bne	23da0 <__assert_fail@plt+0x12848>
   23e68:	mov	r2, r7
   23e6c:	mov	r1, r5
   23e70:	mov	r0, sl
   23e74:	bl	23914 <__assert_fail@plt+0x123bc>
   23e78:	cmp	r0, #0
   23e7c:	str	r0, [sp, #72]	; 0x48
   23e80:	beq	23c20 <__assert_fail@plt+0x126c8>
   23e84:	b	23da0 <__assert_fail@plt+0x12848>
   23e88:	add	r1, r8, #1
   23e8c:	mov	r0, sl
   23e90:	str	r3, [sp, #28]
   23e94:	bl	1d6c0 <__assert_fail@plt+0xc168>
   23e98:	ldr	r3, [sp, #28]
   23e9c:	cmp	r0, #0
   23ea0:	beq	23dd0 <__assert_fail@plt+0x12878>
   23ea4:	b	23da0 <__assert_fail@plt+0x12848>
   23ea8:	ldr	r0, [sp, #84]	; 0x54
   23eac:	bl	13c04 <__assert_fail@plt+0x26ac>
   23eb0:	ldr	r0, [sp, #72]	; 0x48
   23eb4:	add	sp, sp, #92	; 0x5c
   23eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ebc:	mov	r0, #0
   23ec0:	add	sp, sp, #92	; 0x5c
   23ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ec8:	mov	ip, fp
   23ecc:	mov	fp, r7
   23ed0:	ldr	r3, [sp, #32]
   23ed4:	add	r7, fp, #1
   23ed8:	cmp	r3, r7
   23edc:	blt	24040 <__assert_fail@plt+0x12ae8>
   23ee0:	ldr	r9, [sp, #56]	; 0x38
   23ee4:	lsl	r6, r7, #2
   23ee8:	mov	fp, ip
   23eec:	ldr	r3, [r4]
   23ef0:	sub	r3, r7, r3
   23ef4:	cmp	r3, #0
   23ef8:	ble	23f24 <__assert_fail@plt+0x129cc>
   23efc:	ldr	r3, [sl, #28]
   23f00:	cmp	r3, r8
   23f04:	ble	240a0 <__assert_fail@plt+0x12b48>
   23f08:	add	r5, r8, #1
   23f0c:	add	r3, fp, r7
   23f10:	ldrb	r2, [fp, r8]
   23f14:	ldrb	r3, [r3, #-1]
   23f18:	cmp	r2, r3
   23f1c:	bne	2403c <__assert_fail@plt+0x12ae4>
   23f20:	mov	r8, r5
   23f24:	ldr	r3, [sl, #100]	; 0x64
   23f28:	ldr	r3, [r3, r6]
   23f2c:	cmp	r3, #0
   23f30:	beq	24028 <__assert_fail@plt+0x12ad0>
   23f34:	ldr	ip, [r3, #8]
   23f38:	cmp	ip, #0
   23f3c:	ble	24028 <__assert_fail@plt+0x12ad0>
   23f40:	ldr	r2, [r3, #12]
   23f44:	ldr	r3, [sp, #60]	; 0x3c
   23f48:	sub	r2, r2, #4
   23f4c:	ldr	r0, [r3]
   23f50:	mov	r3, #0
   23f54:	b	23f60 <__assert_fail@plt+0x12a08>
   23f58:	cmp	ip, r3
   23f5c:	beq	24028 <__assert_fail@plt+0x12ad0>
   23f60:	ldr	r5, [r2, #4]!
   23f64:	add	r3, r3, #1
   23f68:	add	r1, r0, r5, lsl #3
   23f6c:	ldrb	r1, [r1, #4]
   23f70:	cmp	r1, #9
   23f74:	bne	23f58 <__assert_fail@plt+0x12a00>
   23f78:	ldr	r1, [r0, r5, lsl #3]
   23f7c:	cmp	r9, r1
   23f80:	bne	23f58 <__assert_fail@plt+0x12a00>
   23f84:	cmn	r5, #1
   23f88:	beq	24028 <__assert_fail@plt+0x12ad0>
   23f8c:	ldr	r1, [r4, #8]
   23f90:	cmp	r1, #0
   23f94:	beq	24078 <__assert_fail@plt+0x12b20>
   23f98:	mov	r0, #9
   23f9c:	ldr	r3, [r4]
   23fa0:	ldr	r2, [r4, #4]
   23fa4:	str	r0, [sp, #8]
   23fa8:	stm	sp, {r5, r7}
   23fac:	mov	r0, sl
   23fb0:	bl	22e84 <__assert_fail@plt+0x1192c>
   23fb4:	cmp	r0, #1
   23fb8:	beq	24028 <__assert_fail@plt+0x12ad0>
   23fbc:	cmp	r0, #0
   23fc0:	bne	23da0 <__assert_fail@plt+0x12848>
   23fc4:	ldr	r3, [r4, #16]
   23fc8:	ldr	r2, [r4, #12]
   23fcc:	cmp	r3, r2
   23fd0:	beq	240e8 <__assert_fail@plt+0x12b90>
   23fd4:	mov	r1, #20
   23fd8:	mov	r0, #1
   23fdc:	bl	2b604 <__assert_fail@plt+0x1a0ac>
   23fe0:	cmp	r0, #0
   23fe4:	beq	240e0 <__assert_fail@plt+0x12b88>
   23fe8:	ldr	r3, [r4, #16]
   23fec:	ldr	r2, [r4, #20]
   23ff0:	add	r1, r3, #1
   23ff4:	str	r0, [r2, r3, lsl #2]
   23ff8:	stm	r0, {r5, r7}
   23ffc:	mov	r2, r0
   24000:	ldr	r0, [sp, #32]
   24004:	str	r1, [r4, #16]
   24008:	ldr	r3, [sp, #48]	; 0x30
   2400c:	str	r0, [sp]
   24010:	mov	r1, r4
   24014:	mov	r0, sl
   24018:	bl	23740 <__assert_fail@plt+0x121e8>
   2401c:	ldr	fp, [sl, #4]
   24020:	cmp	r0, #1
   24024:	bhi	23da0 <__assert_fail@plt+0x12848>
   24028:	ldr	r3, [sp, #32]
   2402c:	add	r7, r7, #1
   24030:	cmp	r3, r7
   24034:	add	r6, r6, #4
   24038:	bge	23eec <__assert_fail@plt+0x12994>
   2403c:	mov	ip, fp
   24040:	ldr	r1, [sl, #124]	; 0x7c
   24044:	b	23cc4 <__assert_fail@plt+0x1276c>
   24048:	ldr	r7, [sp, #24]
   2404c:	ldr	r2, [r4, #16]
   24050:	mov	ip, fp
   24054:	cmp	r6, r2
   24058:	blt	24040 <__assert_fail@plt+0x12ae8>
   2405c:	cmp	r6, #0
   24060:	movle	r8, r3
   24064:	ldrle	r3, [sp, #32]
   24068:	ble	23ed8 <__assert_fail@plt+0x12980>
   2406c:	mov	fp, r7
   24070:	mov	r8, r3
   24074:	b	23ed0 <__assert_fail@plt+0x12978>
   24078:	ldr	r1, [r4]
   2407c:	mov	r0, #12
   24080:	sub	r1, r7, r1
   24084:	add	r1, r1, #1
   24088:	bl	2b604 <__assert_fail@plt+0x1a0ac>
   2408c:	cmp	r0, #0
   24090:	str	r0, [r4, #8]
   24094:	beq	240e0 <__assert_fail@plt+0x12b88>
   24098:	mov	r1, r0
   2409c:	b	23f98 <__assert_fail@plt+0x12a40>
   240a0:	ldr	r3, [sl, #48]	; 0x30
   240a4:	cmp	r3, r8
   240a8:	ble	2403c <__assert_fail@plt+0x12ae4>
   240ac:	add	r5, r8, #1
   240b0:	mov	r1, r5
   240b4:	mov	r0, sl
   240b8:	bl	1d6c0 <__assert_fail@plt+0xc168>
   240bc:	cmp	r0, #0
   240c0:	bne	23da0 <__assert_fail@plt+0x12848>
   240c4:	ldr	fp, [sl, #4]
   240c8:	b	23f0c <__assert_fail@plt+0x129b4>
   240cc:	ldr	r9, [sp, #32]
   240d0:	ldr	fp, [sp, #48]	; 0x30
   240d4:	ldr	r8, [sp, #68]	; 0x44
   240d8:	ldr	ip, [sl, #108]	; 0x6c
   240dc:	b	23abc <__assert_fail@plt+0x12564>
   240e0:	mov	r0, #12
   240e4:	b	23da0 <__assert_fail@plt+0x12848>
   240e8:	lsl	r3, r3, #1
   240ec:	add	fp, r3, #1
   240f0:	ldr	r0, [r4, #20]
   240f4:	lsl	r1, fp, #2
   240f8:	bl	2b678 <__assert_fail@plt+0x1a120>
   240fc:	cmp	r0, #0
   24100:	beq	240e0 <__assert_fail@plt+0x12b88>
   24104:	str	r0, [r4, #20]
   24108:	str	fp, [r4, #12]
   2410c:	b	23fd4 <__assert_fail@plt+0x12a7c>
   24110:	ldr	r8, [sp, #32]
   24114:	mov	r3, r8
   24118:	b	23ed8 <__assert_fail@plt+0x12980>
   2411c:	ldr	r7, [sp, #24]
   24120:	mov	ip, fp
   24124:	b	24054 <__assert_fail@plt+0x12afc>
   24128:	andeq	pc, r3, r0, lsl #30
   2412c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   24130:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24134:	mov	r4, r1
   24138:	ldr	r3, [r1, #104]	; 0x68
   2413c:	ldr	r5, [r1, #40]	; 0x28
   24140:	sub	sp, sp, #20
   24144:	cmp	r5, r3
   24148:	mov	r8, r0
   2414c:	ldr	r7, [r1, #84]	; 0x54
   24150:	ldr	r3, [r1, #100]	; 0x64
   24154:	ble	24180 <__assert_fail@plt+0x12c28>
   24158:	mov	r6, r2
   2415c:	lsl	r9, r5, #2
   24160:	str	r2, [r3, r5, lsl #2]
   24164:	str	r5, [r1, #104]	; 0x68
   24168:	ldr	r3, [r7, #76]	; 0x4c
   2416c:	cmp	r3, #0
   24170:	bne	2424c <__assert_fail@plt+0x12cf4>
   24174:	mov	r0, r6
   24178:	add	sp, sp, #20
   2417c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24180:	ldr	r1, [r3, r5, lsl #2]
   24184:	lsl	r9, r5, #2
   24188:	cmp	r1, #0
   2418c:	add	sl, r3, r9
   24190:	streq	r2, [r3, r5, lsl #2]
   24194:	moveq	r6, r2
   24198:	beq	24168 <__assert_fail@plt+0x12c10>
   2419c:	cmp	r2, #0
   241a0:	ldr	r3, [r1, #40]	; 0x28
   241a4:	beq	24210 <__assert_fail@plt+0x12cb8>
   241a8:	ldr	sl, [r2, #40]	; 0x28
   241ac:	add	r0, sp, #4
   241b0:	mov	r2, r3
   241b4:	mov	r1, sl
   241b8:	bl	18ddc <__assert_fail@plt+0x7884>
   241bc:	cmp	r0, #0
   241c0:	str	r0, [r8]
   241c4:	bne	242ac <__assert_fail@plt+0x12d54>
   241c8:	ldr	r1, [r4, #40]	; 0x28
   241cc:	ldr	r2, [r4, #88]	; 0x58
   241d0:	sub	r1, r1, #1
   241d4:	mov	r0, r4
   241d8:	bl	1906c <__assert_fail@plt+0x7b14>
   241dc:	add	r2, sp, #4
   241e0:	mov	r1, r7
   241e4:	ldr	fp, [r4, #100]	; 0x64
   241e8:	mov	r3, r0
   241ec:	mov	r0, r8
   241f0:	bl	21a14 <__assert_fail@plt+0x104bc>
   241f4:	cmp	sl, #0
   241f8:	mov	r6, r0
   241fc:	str	r0, [fp, r5, lsl #2]
   24200:	beq	24168 <__assert_fail@plt+0x12c10>
   24204:	ldr	r0, [sp, #12]
   24208:	bl	13c04 <__assert_fail@plt+0x26ac>
   2420c:	b	24168 <__assert_fail@plt+0x12c10>
   24210:	ldm	r3, {r0, r1, r2}
   24214:	add	r6, sp, #4
   24218:	stm	r6, {r0, r1, r2}
   2421c:	sub	r1, r5, #1
   24220:	ldr	r2, [r4, #88]	; 0x58
   24224:	mov	r0, r4
   24228:	bl	1906c <__assert_fail@plt+0x7b14>
   2422c:	mov	r2, r6
   24230:	mov	r1, r7
   24234:	mov	r3, r0
   24238:	mov	r0, r8
   2423c:	bl	21a14 <__assert_fail@plt+0x104bc>
   24240:	mov	r6, r0
   24244:	str	r0, [sl]
   24248:	b	24168 <__assert_fail@plt+0x12c10>
   2424c:	cmp	r6, #0
   24250:	beq	242ac <__assert_fail@plt+0x12d54>
   24254:	add	r7, r6, #8
   24258:	add	sl, r6, #12
   2425c:	mov	r3, r5
   24260:	mov	r1, r7
   24264:	mov	r2, sl
   24268:	mov	r0, r4
   2426c:	bl	19d04 <__assert_fail@plt+0x87ac>
   24270:	cmp	r0, #0
   24274:	str	r0, [r8]
   24278:	bne	242ac <__assert_fail@plt+0x12d54>
   2427c:	ldrb	r3, [r6, #52]	; 0x34
   24280:	tst	r3, #64	; 0x40
   24284:	beq	24174 <__assert_fail@plt+0x12c1c>
   24288:	mov	r2, sl
   2428c:	mov	r1, r7
   24290:	mov	r0, r4
   24294:	bl	23914 <__assert_fail@plt+0x123bc>
   24298:	cmp	r0, #0
   2429c:	str	r0, [r8]
   242a0:	ldreq	r3, [r4, #100]	; 0x64
   242a4:	ldreq	r6, [r3, r9]
   242a8:	beq	24174 <__assert_fail@plt+0x12c1c>
   242ac:	mov	r6, #0
   242b0:	b	24174 <__assert_fail@plt+0x12c1c>
   242b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   242b8:	mov	r7, r0
   242bc:	sub	sp, sp, #420	; 0x1a4
   242c0:	mov	r5, r3
   242c4:	ldr	r3, [r7]
   242c8:	str	r0, [sp, #44]	; 0x2c
   242cc:	str	r1, [sp, #60]	; 0x3c
   242d0:	str	r2, [sp, #72]	; 0x48
   242d4:	mov	r1, #0
   242d8:	add	r0, sp, #140	; 0x8c
   242dc:	mov	r2, #136	; 0x88
   242e0:	mov	r8, r3
   242e4:	str	r3, [sp, #28]
   242e8:	ldr	r4, [sp, #456]	; 0x1c8
   242ec:	ldr	r6, [sp, #464]	; 0x1d0
   242f0:	bl	1145c <memset@plt>
   242f4:	ldr	r1, [r7, #16]
   242f8:	str	r8, [sp, #224]	; 0xe0
   242fc:	cmp	r1, #0
   24300:	streq	r1, [sp, #64]	; 0x40
   24304:	beq	24330 <__assert_fail@plt+0x12dd8>
   24308:	ldrb	r2, [r7, #28]
   2430c:	subs	r3, r5, r4
   24310:	movne	r3, #1
   24314:	ands	r3, r3, r2, lsr #3
   24318:	streq	r3, [sp, #64]	; 0x40
   2431c:	beq	24330 <__assert_fail@plt+0x12dd8>
   24320:	tst	r2, #1
   24324:	moveq	r3, r1
   24328:	movne	r3, #0
   2432c:	str	r3, [sp, #64]	; 0x40
   24330:	ldr	r3, [sp, #44]	; 0x2c
   24334:	ldr	r3, [r3, #24]
   24338:	cmp	r3, r6
   2433c:	subcc	r2, r6, #1
   24340:	subcc	r3, r2, r3
   24344:	ldr	r2, [sp, #44]	; 0x2c
   24348:	movcs	r3, #0
   2434c:	str	r3, [sp, #96]	; 0x60
   24350:	ldr	r2, [r2, #8]
   24354:	cmp	r2, #0
   24358:	beq	24a48 <__assert_fail@plt+0x134f0>
   2435c:	ldr	r2, [sp, #28]
   24360:	ldr	r2, [r2, #36]	; 0x24
   24364:	cmp	r2, #0
   24368:	beq	24a48 <__assert_fail@plt+0x134f0>
   2436c:	ldr	r1, [sp, #28]
   24370:	ldr	r1, [r1, #40]	; 0x28
   24374:	cmp	r1, #0
   24378:	beq	24a48 <__assert_fail@plt+0x134f0>
   2437c:	ldr	r0, [sp, #28]
   24380:	ldr	ip, [r0, #44]	; 0x2c
   24384:	cmp	ip, #0
   24388:	beq	24a48 <__assert_fail@plt+0x134f0>
   2438c:	ldr	r0, [r0, #48]	; 0x30
   24390:	cmp	r0, #0
   24394:	beq	24a48 <__assert_fail@plt+0x134f0>
   24398:	ldr	r2, [r2, #8]
   2439c:	cmp	r2, #0
   243a0:	bne	243e4 <__assert_fail@plt+0x12e8c>
   243a4:	ldr	r2, [r1, #8]
   243a8:	cmp	r2, #0
   243ac:	bne	243e4 <__assert_fail@plt+0x12e8c>
   243b0:	ldr	r2, [ip, #8]
   243b4:	cmp	r2, #0
   243b8:	beq	243cc <__assert_fail@plt+0x12e74>
   243bc:	ldr	r2, [sp, #44]	; 0x2c
   243c0:	ldrsb	r2, [r2, #28]
   243c4:	cmp	r2, #0
   243c8:	blt	243e4 <__assert_fail@plt+0x12e8c>
   243cc:	cmp	r5, #0
   243d0:	cmpne	r4, #0
   243d4:	movne	r4, #1
   243d8:	moveq	r4, #0
   243dc:	bne	24a48 <__assert_fail@plt+0x134f0>
   243e0:	mov	r5, r4
   243e4:	subs	r3, r6, r3
   243e8:	str	r3, [sp, #56]	; 0x38
   243ec:	movne	r3, #1
   243f0:	strne	r3, [sp, #36]	; 0x24
   243f4:	beq	246f0 <__assert_fail@plt+0x13198>
   243f8:	ldr	r2, [sp, #28]
   243fc:	ldr	lr, [sp, #44]	; 0x2c
   24400:	ldr	ip, [sp, #72]	; 0x48
   24404:	ldr	r3, [r2, #8]
   24408:	ldr	r0, [r2, #92]	; 0x5c
   2440c:	add	r3, r3, #1
   24410:	cmp	r3, r0
   24414:	ldr	r1, [lr, #12]
   24418:	ldrb	r2, [r2, #88]	; 0x58
   2441c:	movlt	r3, r0
   24420:	add	r6, ip, #1
   24424:	ldr	lr, [lr, #20]
   24428:	cmp	r3, r6
   2442c:	movlt	r6, r3
   24430:	lsr	r1, r1, #22
   24434:	adds	r8, lr, #0
   24438:	and	r1, r1, #1
   2443c:	movne	r8, #1
   24440:	lsr	r3, r2, #2
   24444:	ldr	r7, [sp, #60]	; 0x3c
   24448:	lsr	r2, r2, #3
   2444c:	and	r3, r3, #1
   24450:	and	r2, r2, #1
   24454:	str	ip, [sp, #188]	; 0xbc
   24458:	str	ip, [sp, #184]	; 0xb8
   2445c:	str	ip, [sp, #196]	; 0xc4
   24460:	str	ip, [sp, #192]	; 0xc0
   24464:	cmp	r0, #1
   24468:	orr	ip, r1, r8
   2446c:	str	lr, [sp, #80]	; 0x50
   24470:	str	r7, [sp, #140]	; 0x8c
   24474:	str	r0, [sp, #220]	; 0xdc
   24478:	str	lr, [sp, #204]	; 0xcc
   2447c:	strb	r1, [sp, #212]	; 0xd4
   24480:	strb	ip, [sp, #215]	; 0xd7
   24484:	strb	r3, [sp, #213]	; 0xd5
   24488:	strb	r2, [sp, #214]	; 0xd6
   2448c:	ble	244dc <__assert_fail@plt+0x12f84>
   24490:	cmn	r6, #-1073741823	; 0xc0000001
   24494:	bhi	257f8 <__assert_fail@plt+0x142a0>
   24498:	lsl	r7, r6, #2
   2449c:	mov	r1, r7
   244a0:	mov	r0, #0
   244a4:	bl	2b678 <__assert_fail@plt+0x1a120>
   244a8:	subs	r3, r0, #0
   244ac:	beq	24a80 <__assert_fail@plt+0x13528>
   244b0:	ldr	r0, [sp, #152]	; 0x98
   244b4:	str	r3, [sp, #148]	; 0x94
   244b8:	cmp	r0, #0
   244bc:	ldrbeq	ip, [sp, #215]	; 0xd7
   244c0:	beq	244dc <__assert_fail@plt+0x12f84>
   244c4:	mov	r1, r7
   244c8:	bl	2b678 <__assert_fail@plt+0x1a120>
   244cc:	cmp	r0, #0
   244d0:	beq	24a80 <__assert_fail@plt+0x13528>
   244d4:	ldrb	ip, [sp, #215]	; 0xd7
   244d8:	str	r0, [sp, #152]	; 0x98
   244dc:	cmp	ip, #0
   244e0:	bne	255e8 <__assert_fail@plt+0x14090>
   244e4:	ldr	r2, [sp, #28]
   244e8:	str	r6, [sp, #176]	; 0xb0
   244ec:	add	r2, r2, #96	; 0x60
   244f0:	ldrb	r3, [r2, #-8]
   244f4:	str	r2, [sp, #208]	; 0xd0
   244f8:	lsr	r3, r3, #4
   244fc:	and	r3, r3, #1
   24500:	strb	r3, [sp, #218]	; 0xda
   24504:	ldr	r3, [sp, #28]
   24508:	ldr	r2, [sp, #60]	; 0x3c
   2450c:	ldr	r3, [r3, #92]	; 0x5c
   24510:	str	r2, [sp, #144]	; 0x90
   24514:	cmp	r3, #1
   24518:	ble	25444 <__assert_fail@plt+0x13eec>
   2451c:	mov	r1, #0
   24520:	ldr	r3, [sp, #44]	; 0x2c
   24524:	mvn	r2, #0
   24528:	str	r1, [sp, #168]	; 0xa8
   2452c:	ldrb	r3, [r3, #28]
   24530:	str	r1, [sp, #172]	; 0xac
   24534:	lsr	r3, r3, #7
   24538:	strb	r3, [sp, #217]	; 0xd9
   2453c:	ldr	r3, [sp, #28]
   24540:	ldr	r7, [r3, #76]	; 0x4c
   24544:	ldr	r3, [sp, #460]	; 0x1cc
   24548:	str	r2, [sp, #232]	; 0xe8
   2454c:	str	r3, [sp, #196]	; 0xc4
   24550:	str	r3, [sp, #192]	; 0xc0
   24554:	lsl	r6, r7, #1
   24558:	ldr	r3, [sp, #472]	; 0x1d8
   2455c:	cmp	r6, #0
   24560:	str	r3, [sp, #228]	; 0xe4
   24564:	ble	245a0 <__assert_fail@plt+0x13048>
   24568:	ldr	r3, [pc, #4032]	; 25530 <__assert_fail@plt+0x13fd8>
   2456c:	cmp	r6, r3
   24570:	bgt	24a80 <__assert_fail@plt+0x13528>
   24574:	add	r0, r6, r7, lsl #2
   24578:	lsl	r0, r0, #3
   2457c:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   24580:	str	r0, [sp, #256]	; 0x100
   24584:	lsl	r0, r7, #3
   24588:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   2458c:	ldr	r3, [sp, #256]	; 0x100
   24590:	cmp	r0, #0
   24594:	cmpne	r3, #0
   24598:	str	r0, [sp, #272]	; 0x110
   2459c:	beq	24a80 <__assert_fail@plt+0x13528>
   245a0:	ldr	r3, [sp, #56]	; 0x38
   245a4:	str	r6, [sp, #252]	; 0xfc
   245a8:	cmp	r3, #1
   245ac:	mov	r3, #1
   245b0:	str	r6, [sp, #268]	; 0x10c
   245b4:	str	r3, [sp, #260]	; 0x104
   245b8:	bls	25630 <__assert_fail@plt+0x140d8>
   245bc:	ldr	r3, [sp, #176]	; 0xb0
   245c0:	cmn	r3, #-1073741822	; 0xc0000002
   245c4:	bhi	24a80 <__assert_fail@plt+0x13528>
   245c8:	add	r3, r3, #1
   245cc:	lsl	r0, r3, #2
   245d0:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   245d4:	cmp	r0, #0
   245d8:	str	r0, [sp, #240]	; 0xf0
   245dc:	beq	25048 <__assert_fail@plt+0x13af0>
   245e0:	ldr	r3, [sp, #472]	; 0x1d8
   245e4:	str	r5, [sp, #112]	; 0x70
   245e8:	tst	r3, #1
   245ec:	moveq	r3, #6
   245f0:	movne	r3, #4
   245f4:	cmp	r5, r4
   245f8:	movle	r2, #1
   245fc:	mvngt	r2, #0
   24600:	str	r2, [sp, #92]	; 0x5c
   24604:	str	r3, [sp, #200]	; 0xc8
   24608:	movlt	r2, r5
   2460c:	movge	r2, r4
   24610:	ldr	r3, [sp, #28]
   24614:	str	r2, [sp, #68]	; 0x44
   24618:	movge	r2, r5
   2461c:	movlt	r2, r4
   24620:	str	r2, [sp, #52]	; 0x34
   24624:	ldr	r2, [sp, #64]	; 0x40
   24628:	ldr	r3, [r3, #92]	; 0x5c
   2462c:	cmp	r2, #0
   24630:	str	r3, [sp, #84]	; 0x54
   24634:	beq	25778 <__assert_fail@plt+0x14220>
   24638:	cmp	r3, #1
   2463c:	moveq	r3, #4
   24640:	beq	24668 <__assert_fail@plt+0x13110>
   24644:	ldr	r3, [sp, #44]	; 0x2c
   24648:	ldr	r2, [sp, #80]	; 0x50
   2464c:	ldr	r3, [r3, #12]
   24650:	lsr	r3, r3, #22
   24654:	eor	r3, r3, #1
   24658:	cmp	r2, #0
   2465c:	movne	r3, #0
   24660:	andeq	r3, r3, #1
   24664:	lsl	r3, r3, #2
   24668:	cmp	r5, r4
   2466c:	orr	r3, r8, r3
   24670:	movle	r2, #2
   24674:	movgt	r2, #0
   24678:	orr	r3, r3, r2
   2467c:	ldr	r2, [sp, #68]	; 0x44
   24680:	ldr	r1, [sp, #52]	; 0x34
   24684:	cmp	r5, r2
   24688:	movge	r2, #0
   2468c:	movlt	r2, #1
   24690:	cmp	r5, r1
   24694:	orrgt	r2, r2, #1
   24698:	cmp	r2, #0
   2469c:	str	r2, [sp, #108]	; 0x6c
   246a0:	bne	24a38 <__assert_fail@plt+0x134e0>
   246a4:	sub	r3, r3, #4
   246a8:	cmp	r5, r4
   246ac:	str	r3, [sp, #88]	; 0x58
   246b0:	add	r3, sp, #416	; 0x1a0
   246b4:	suble	r3, r3, #304	; 0x130
   246b8:	movgt	r3, #0
   246bc:	str	r3, [sp, #100]	; 0x64
   246c0:	movle	r3, #1
   246c4:	movgt	r3, #0
   246c8:	str	r3, [sp, #104]	; 0x68
   246cc:	ldr	r3, [sp, #88]	; 0x58
   246d0:	cmp	r3, #4
   246d4:	ldrls	pc, [pc, r3, lsl #2]
   246d8:	b	25474 <__assert_fail@plt+0x13f1c>
   246dc:			; <UNDEFINED> instruction: 0x000253bc
   246e0:			; <UNDEFINED> instruction: 0x000253bc
   246e4:	andeq	r4, r2, r8, lsl #14
   246e8:	andeq	r5, r2, r0, asr r3
   246ec:	andeq	r4, r2, ip, lsr #15
   246f0:	ldr	r3, [sp, #28]
   246f4:	ldr	r3, [r3, #76]	; 0x4c
   246f8:	adds	r3, r3, #0
   246fc:	movne	r3, #1
   24700:	str	r3, [sp, #36]	; 0x24
   24704:	b	243f8 <__assert_fail@plt+0x12ea0>
   24708:	ldr	r3, [sp, #52]	; 0x34
   2470c:	cmp	r3, r5
   24710:	ble	24768 <__assert_fail@plt+0x13210>
   24714:	ldr	r3, [sp, #60]	; 0x3c
   24718:	ldr	r1, [sp, #64]	; 0x40
   2471c:	ldrb	r2, [r3, r5]
   24720:	add	r3, r3, r5
   24724:	ldrb	r2, [r1, r2]
   24728:	cmp	r2, #0
   2472c:	bne	247ac <__assert_fail@plt+0x13254>
   24730:	mov	ip, r1
   24734:	add	r2, r5, #1
   24738:	ldr	r0, [sp, #52]	; 0x34
   2473c:	b	24754 <__assert_fail@plt+0x131fc>
   24740:	ldrb	r1, [r3, #1]!
   24744:	add	r2, r2, #1
   24748:	ldrb	r1, [ip, r1]
   2474c:	cmp	r1, #0
   24750:	bne	25644 <__assert_fail@plt+0x140ec>
   24754:	cmp	r0, r2
   24758:	mov	r5, r2
   2475c:	bne	24740 <__assert_fail@plt+0x131e8>
   24760:	ldr	r3, [sp, #52]	; 0x34
   24764:	str	r3, [sp, #112]	; 0x70
   24768:	cmp	r3, r5
   2476c:	bne	247ac <__assert_fail@plt+0x13254>
   24770:	ldr	r2, [sp, #72]	; 0x48
   24774:	ldr	r1, [sp, #80]	; 0x50
   24778:	cmp	r2, r3
   2477c:	movle	r3, #0
   24780:	ldrgt	r2, [sp, #60]	; 0x3c
   24784:	ldrbgt	r3, [r2, r3]
   24788:	cmp	r1, #0
   2478c:	mov	r2, r3
   24790:	movne	r2, r1
   24794:	ldrbne	r2, [r2, r3]
   24798:	ldr	r3, [sp, #64]	; 0x40
   2479c:	ldrb	r3, [r3, r2]
   247a0:	cmp	r3, #0
   247a4:	beq	24a38 <__assert_fail@plt+0x134e0>
   247a8:	ldr	r5, [sp, #52]	; 0x34
   247ac:	ldr	r2, [sp, #472]	; 0x1d8
   247b0:	mov	r1, r5
   247b4:	add	r0, sp, #140	; 0x8c
   247b8:	bl	19158 <__assert_fail@plt+0x7c00>
   247bc:	subs	r3, r0, #0
   247c0:	str	r3, [sp, #48]	; 0x30
   247c4:	bne	256d4 <__assert_fail@plt+0x1417c>
   247c8:	ldr	r3, [sp, #84]	; 0x54
   247cc:	cmp	r3, #1
   247d0:	beq	247f0 <__assert_fail@plt+0x13298>
   247d4:	ldr	r3, [sp, #168]	; 0xa8
   247d8:	cmp	r3, #0
   247dc:	beq	247f0 <__assert_fail@plt+0x13298>
   247e0:	ldr	r3, [sp, #148]	; 0x94
   247e4:	ldr	r3, [r3]
   247e8:	cmn	r3, #1
   247ec:	beq	24a08 <__assert_fail@plt+0x134b0>
   247f0:	ldr	r4, [sp, #224]	; 0xe0
   247f4:	mov	r3, #0
   247f8:	str	r3, [sp, #260]	; 0x104
   247fc:	ldr	fp, [r4, #36]	; 0x24
   24800:	str	r3, [sp, #248]	; 0xf8
   24804:	str	r3, [sp, #244]	; 0xf4
   24808:	str	r3, [sp, #116]	; 0x74
   2480c:	ldrsb	r3, [fp, #52]	; 0x34
   24810:	ldr	r2, [sp, #180]	; 0xb4
   24814:	cmp	r3, #0
   24818:	str	r2, [sp, #12]
   2481c:	blt	25504 <__assert_fail@plt+0x13fac>
   24820:	ldr	r3, [sp, #240]	; 0xf0
   24824:	cmp	r3, #0
   24828:	beq	25678 <__assert_fail@plt+0x14120>
   2482c:	ldr	r2, [r4, #76]	; 0x4c
   24830:	ldr	r1, [sp, #12]
   24834:	cmp	r2, #0
   24838:	str	fp, [r3, r1, lsl #2]
   2483c:	bne	25718 <__assert_fail@plt+0x141c0>
   24840:	ldrb	r3, [fp, #52]	; 0x34
   24844:	ldr	r2, [sp, #104]	; 0x68
   24848:	str	r2, [sp, #16]
   2484c:	tst	r3, #16
   24850:	bne	256e4 <__assert_fail@plt+0x1418c>
   24854:	mvn	r3, #0
   24858:	str	r3, [sp, #20]
   2485c:	mov	r3, #0
   24860:	str	r3, [sp, #40]	; 0x28
   24864:	ldr	r3, [sp, #100]	; 0x64
   24868:	ldr	r5, [sp, #180]	; 0xb4
   2486c:	str	r3, [sp, #32]
   24870:	b	2487c <__assert_fail@plt+0x13324>
   24874:	ldr	r5, [sp, #180]	; 0xb4
   24878:	mov	fp, r4
   2487c:	ldr	r3, [sp, #196]	; 0xc4
   24880:	cmp	r3, r5
   24884:	ble	24b40 <__assert_fail@plt+0x135e8>
   24888:	ldr	r3, [sp, #176]	; 0xb0
   2488c:	add	r9, r5, #1
   24890:	cmp	r9, r3
   24894:	bge	24f58 <__assert_fail@plt+0x13a00>
   24898:	ldr	r3, [sp, #168]	; 0xa8
   2489c:	cmp	r9, r3
   248a0:	bge	24fb4 <__assert_fail@plt+0x13a5c>
   248a4:	ldrb	r3, [fp, #52]	; 0x34
   248a8:	tst	r3, #32
   248ac:	bne	24d2c <__assert_fail@plt+0x137d4>
   248b0:	ldr	r3, [sp, #144]	; 0x90
   248b4:	add	r2, r5, #1
   248b8:	str	r2, [sp, #180]	; 0xb4
   248bc:	ldrb	r4, [r3, r5]
   248c0:	ldr	r3, [fp, #44]	; 0x2c
   248c4:	cmp	r3, #0
   248c8:	beq	24f84 <__assert_fail@plt+0x13a2c>
   248cc:	ldr	r4, [r3, r4, lsl #2]
   248d0:	ldr	r3, [sp, #240]	; 0xf0
   248d4:	cmp	r3, #0
   248d8:	beq	248f0 <__assert_fail@plt+0x13398>
   248dc:	mov	r2, r4
   248e0:	add	r1, sp, #140	; 0x8c
   248e4:	add	r0, sp, #116	; 0x74
   248e8:	bl	24130 <__assert_fail@plt+0x12bd8>
   248ec:	mov	r4, r0
   248f0:	cmp	r4, #0
   248f4:	beq	24ad4 <__assert_fail@plt+0x1357c>
   248f8:	ldr	r2, [sp, #16]
   248fc:	ldrb	r3, [r4, #52]	; 0x34
   24900:	cmp	fp, r4
   24904:	movne	r2, #0
   24908:	andeq	r2, r2, #1
   2490c:	ldr	r1, [sp, #12]
   24910:	cmp	r2, #0
   24914:	movne	r1, r9
   24918:	tst	r3, #16
   2491c:	str	r2, [sp, #16]
   24920:	str	r1, [sp, #12]
   24924:	beq	24874 <__assert_fail@plt+0x1331c>
   24928:	tst	r3, #128	; 0x80
   2492c:	bne	24cd8 <__assert_fail@plt+0x13780>
   24930:	ldr	r3, [sp, #180]	; 0xb4
   24934:	str	r3, [sp, #20]
   24938:	ldr	r3, [sp, #36]	; 0x24
   2493c:	cmp	r3, #0
   24940:	beq	24b60 <__assert_fail@plt+0x13608>
   24944:	mov	r3, #1
   24948:	str	r3, [sp, #40]	; 0x28
   2494c:	mov	r3, #0
   24950:	ldr	r5, [sp, #20]
   24954:	str	r3, [sp, #32]
   24958:	b	24878 <__assert_fail@plt+0x13320>
   2495c:	ldr	r0, [sp, #12]
   24960:	bl	13c04 <__assert_fail@plt+0x26ac>
   24964:	mov	r0, #0
   24968:	bl	13c04 <__assert_fail@plt+0x26ac>
   2496c:	ldr	r3, [sp, #264]	; 0x108
   24970:	cmp	r3, #0
   24974:	movgt	r4, #0
   24978:	ble	249f8 <__assert_fail@plt+0x134a0>
   2497c:	ldr	r3, [sp, #272]	; 0x110
   24980:	ldr	r7, [r3, r4, lsl #2]
   24984:	ldr	r3, [r7, #16]
   24988:	cmp	r3, #0
   2498c:	movgt	r5, #0
   24990:	ble	249bc <__assert_fail@plt+0x13464>
   24994:	ldr	r3, [r7, #20]
   24998:	ldr	r6, [r3, r5, lsl #2]
   2499c:	add	r5, r5, #1
   249a0:	ldr	r0, [r6, #16]
   249a4:	bl	13c04 <__assert_fail@plt+0x26ac>
   249a8:	mov	r0, r6
   249ac:	bl	13c04 <__assert_fail@plt+0x26ac>
   249b0:	ldr	r3, [r7, #16]
   249b4:	cmp	r5, r3
   249b8:	blt	24994 <__assert_fail@plt+0x1343c>
   249bc:	ldr	r0, [r7, #20]
   249c0:	bl	13c04 <__assert_fail@plt+0x26ac>
   249c4:	ldr	r3, [r7, #8]
   249c8:	cmp	r3, #0
   249cc:	beq	249e0 <__assert_fail@plt+0x13488>
   249d0:	ldr	r0, [r3, #8]
   249d4:	bl	13c04 <__assert_fail@plt+0x26ac>
   249d8:	ldr	r0, [r7, #8]
   249dc:	bl	13c04 <__assert_fail@plt+0x26ac>
   249e0:	mov	r0, r7
   249e4:	bl	13c04 <__assert_fail@plt+0x26ac>
   249e8:	ldr	r3, [sp, #264]	; 0x108
   249ec:	add	r4, r4, #1
   249f0:	cmp	r4, r3
   249f4:	blt	2497c <__assert_fail@plt+0x13424>
   249f8:	ldr	r5, [sp, #112]	; 0x70
   249fc:	mov	r3, #0
   24a00:	str	r3, [sp, #264]	; 0x108
   24a04:	str	r3, [sp, #248]	; 0xf8
   24a08:	ldr	r3, [sp, #92]	; 0x5c
   24a0c:	ldr	r2, [sp, #68]	; 0x44
   24a10:	add	r5, r5, r3
   24a14:	ldr	r3, [sp, #52]	; 0x34
   24a18:	str	r5, [sp, #112]	; 0x70
   24a1c:	cmp	r3, r5
   24a20:	movge	r3, #0
   24a24:	movlt	r3, #1
   24a28:	cmp	r2, r5
   24a2c:	orrgt	r3, r3, #1
   24a30:	cmp	r3, #0
   24a34:	beq	246cc <__assert_fail@plt+0x13174>
   24a38:	mov	r3, #1
   24a3c:	ldr	r7, [sp, #240]	; 0xf0
   24a40:	str	r3, [sp, #48]	; 0x30
   24a44:	b	24a8c <__assert_fail@plt+0x13534>
   24a48:	mov	r3, #1
   24a4c:	str	r3, [sp, #48]	; 0x30
   24a50:	ldr	r0, [sp, #48]	; 0x30
   24a54:	add	sp, sp, #420	; 0x1a4
   24a58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a5c:	tst	r0, #4
   24a60:	beq	24820 <__assert_fail@plt+0x132c8>
   24a64:	mov	r3, r0
   24a68:	ldr	r2, [fp, #40]	; 0x28
   24a6c:	mov	r1, r4
   24a70:	add	r0, sp, #116	; 0x74
   24a74:	bl	21a14 <__assert_fail@plt+0x104bc>
   24a78:	subs	fp, r0, #0
   24a7c:	bne	24820 <__assert_fail@plt+0x132c8>
   24a80:	ldr	r7, [sp, #240]	; 0xf0
   24a84:	mov	r3, #12
   24a88:	str	r3, [sp, #48]	; 0x30
   24a8c:	mov	r0, r7
   24a90:	bl	13c04 <__assert_fail@plt+0x26ac>
   24a94:	ldr	r3, [sp, #28]
   24a98:	ldr	r3, [r3, #76]	; 0x4c
   24a9c:	cmp	r3, #0
   24aa0:	bne	2553c <__assert_fail@plt+0x13fe4>
   24aa4:	ldr	r0, [sp, #148]	; 0x94
   24aa8:	bl	13c04 <__assert_fail@plt+0x26ac>
   24aac:	ldr	r0, [sp, #152]	; 0x98
   24ab0:	bl	13c04 <__assert_fail@plt+0x26ac>
   24ab4:	ldrb	r3, [sp, #215]	; 0xd7
   24ab8:	cmp	r3, #0
   24abc:	beq	24a50 <__assert_fail@plt+0x134f8>
   24ac0:	ldr	r0, [sp, #144]	; 0x90
   24ac4:	bl	13c04 <__assert_fail@plt+0x26ac>
   24ac8:	ldr	r0, [sp, #48]	; 0x30
   24acc:	add	sp, sp, #420	; 0x1a4
   24ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24ad4:	ldr	r3, [sp, #116]	; 0x74
   24ad8:	cmp	r3, #0
   24adc:	bne	25710 <__assert_fail@plt+0x141b8>
   24ae0:	ldr	r2, [sp, #240]	; 0xf0
   24ae4:	cmp	r2, #0
   24ae8:	beq	24b40 <__assert_fail@plt+0x135e8>
   24aec:	ldr	r3, [sp, #36]	; 0x24
   24af0:	eor	r5, r3, #1
   24af4:	ldr	r3, [sp, #40]	; 0x28
   24af8:	ands	r5, r5, r3
   24afc:	bne	24b40 <__assert_fail@plt+0x135e8>
   24b00:	ldr	r3, [sp, #180]	; 0xb4
   24b04:	ldr	lr, [sp, #244]	; 0xf4
   24b08:	mov	r0, r3
   24b0c:	add	r2, r2, r3, lsl #2
   24b10:	mov	ip, r5
   24b14:	b	24b2c <__assert_fail@plt+0x135d4>
   24b18:	ldr	r1, [r2, #4]!
   24b1c:	mov	r0, r3
   24b20:	cmp	r1, #0
   24b24:	mov	ip, #1
   24b28:	bne	24cfc <__assert_fail@plt+0x137a4>
   24b2c:	add	r3, r3, #1
   24b30:	cmp	lr, r3
   24b34:	bge	24b18 <__assert_fail@plt+0x135c0>
   24b38:	cmp	ip, #0
   24b3c:	strne	r0, [sp, #180]	; 0xb4
   24b40:	ldr	r3, [sp, #32]
   24b44:	cmp	r3, #0
   24b48:	beq	24b60 <__assert_fail@plt+0x13608>
   24b4c:	mov	r2, r3
   24b50:	ldr	r1, [sp, #12]
   24b54:	ldr	r3, [r3]
   24b58:	add	r3, r3, r1
   24b5c:	str	r3, [r2]
   24b60:	ldr	r3, [sp, #20]
   24b64:	cmn	r3, #1
   24b68:	beq	2496c <__assert_fail@plt+0x13414>
   24b6c:	cmn	r3, #2
   24b70:	beq	24a80 <__assert_fail@plt+0x13528>
   24b74:	mov	r2, r3
   24b78:	ldr	r3, [sp, #44]	; 0x2c
   24b7c:	str	r2, [sp, #232]	; 0xe8
   24b80:	ldr	r2, [sp, #56]	; 0x38
   24b84:	ldrb	r3, [r3, #28]
   24b88:	lsr	r3, r3, #4
   24b8c:	eor	r3, r3, #1
   24b90:	cmp	r2, #1
   24b94:	movls	r3, #0
   24b98:	andhi	r3, r3, #1
   24b9c:	cmp	r3, #0
   24ba0:	beq	24ffc <__assert_fail@plt+0x13aa4>
   24ba4:	ldr	r3, [sp, #20]
   24ba8:	ldr	r7, [sp, #240]	; 0xf0
   24bac:	mov	r2, r3
   24bb0:	add	r0, sp, #140	; 0x8c
   24bb4:	ldr	r1, [r7, r3, lsl #2]
   24bb8:	bl	199f8 <__assert_fail@plt+0x84a0>
   24bbc:	ldr	r3, [sp, #28]
   24bc0:	ldrb	r3, [r3, #88]	; 0x58
   24bc4:	tst	r3, #1
   24bc8:	str	r0, [sp, #236]	; 0xec
   24bcc:	beq	25430 <__assert_fail@plt+0x13ed8>
   24bd0:	ldr	r3, [sp, #20]
   24bd4:	ldr	r8, [sp, #224]	; 0xe0
   24bd8:	cmn	r3, #-1073741822	; 0xc0000002
   24bdc:	ldr	r9, [sp, #236]	; 0xec
   24be0:	bhi	2504c <__assert_fail@plt+0x13af4>
   24be4:	add	r4, r3, #1
   24be8:	lsl	r5, r4, #2
   24bec:	mov	r0, r5
   24bf0:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   24bf4:	subs	r3, r0, #0
   24bf8:	str	r3, [sp, #12]
   24bfc:	beq	25758 <__assert_fail@plt+0x14200>
   24c00:	ldr	r3, [r8, #76]	; 0x4c
   24c04:	cmp	r3, #0
   24c08:	beq	25058 <__assert_fail@plt+0x13b00>
   24c0c:	mov	r0, r5
   24c10:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   24c14:	subs	sl, r0, #0
   24c18:	beq	25780 <__assert_fail@plt+0x14228>
   24c1c:	ldr	r6, [sp, #20]
   24c20:	ldr	fp, [sp, #12]
   24c24:	add	r5, sp, #292	; 0x124
   24c28:	lsl	r4, r4, #2
   24c2c:	mov	r2, r4
   24c30:	mov	r1, #0
   24c34:	mov	r0, sl
   24c38:	bl	1145c <memset@plt>
   24c3c:	mov	r3, #0
   24c40:	str	fp, [sp, #276]	; 0x114
   24c44:	str	sl, [sp, #280]	; 0x118
   24c48:	str	r9, [sp, #284]	; 0x11c
   24c4c:	str	r6, [sp, #288]	; 0x120
   24c50:	add	r1, sp, #276	; 0x114
   24c54:	str	r3, [r5]
   24c58:	str	r3, [r5, #4]
   24c5c:	str	r3, [r5, #8]
   24c60:	add	r0, sp, #140	; 0x8c
   24c64:	bl	1eaf0 <__assert_fail@plt+0xd598>
   24c68:	mov	r7, r0
   24c6c:	ldr	r0, [sp, #300]	; 0x12c
   24c70:	bl	13c04 <__assert_fail@plt+0x26ac>
   24c74:	cmp	r7, #0
   24c78:	bne	25450 <__assert_fail@plt+0x13ef8>
   24c7c:	ldr	r3, [fp]
   24c80:	cmp	r3, #0
   24c84:	bne	25864 <__assert_fail@plt+0x1430c>
   24c88:	ldr	r3, [sl]
   24c8c:	cmp	r3, #0
   24c90:	bne	25864 <__assert_fail@plt+0x1430c>
   24c94:	ldr	r3, [sp, #240]	; 0xf0
   24c98:	sub	r4, r4, #4
   24c9c:	add	r3, r3, r4
   24ca0:	subs	r6, r6, #1
   24ca4:	bcc	25528 <__assert_fail@plt+0x13fd0>
   24ca8:	ldr	r1, [r3, #-4]!
   24cac:	cmp	r1, #0
   24cb0:	beq	24ca0 <__assert_fail@plt+0x13748>
   24cb4:	ldrb	r2, [r1, #52]	; 0x34
   24cb8:	tst	r2, #16
   24cbc:	beq	24ca0 <__assert_fail@plt+0x13748>
   24cc0:	mov	r2, r6
   24cc4:	add	r0, sp, #140	; 0x8c
   24cc8:	bl	199f8 <__assert_fail@plt+0x84a0>
   24ccc:	add	r4, r6, #1
   24cd0:	mov	r9, r0
   24cd4:	b	24c28 <__assert_fail@plt+0x136d0>
   24cd8:	ldr	r5, [sp, #180]	; 0xb4
   24cdc:	mov	r1, r4
   24ce0:	mov	r2, r5
   24ce4:	add	r0, sp, #140	; 0x8c
   24ce8:	bl	199f8 <__assert_fail@plt+0x84a0>
   24cec:	cmp	r0, #0
   24cf0:	beq	24878 <__assert_fail@plt+0x13320>
   24cf4:	str	r5, [sp, #20]
   24cf8:	b	24938 <__assert_fail@plt+0x133e0>
   24cfc:	mov	r2, #0
   24d00:	add	r1, sp, #140	; 0x8c
   24d04:	add	r0, sp, #116	; 0x74
   24d08:	str	r3, [sp, #180]	; 0xb4
   24d0c:	bl	24130 <__assert_fail@plt+0x12bd8>
   24d10:	ldr	r3, [sp, #116]	; 0x74
   24d14:	cmp	r3, #0
   24d18:	bne	257e8 <__assert_fail@plt+0x14290>
   24d1c:	cmp	r0, #0
   24d20:	bne	25850 <__assert_fail@plt+0x142f8>
   24d24:	ldr	r2, [sp, #240]	; 0xf0
   24d28:	b	24b00 <__assert_fail@plt+0x135a8>
   24d2c:	ldr	r3, [fp, #8]
   24d30:	ldr	sl, [sp, #224]	; 0xe0
   24d34:	cmp	r3, #0
   24d38:	ble	24e24 <__assert_fail@plt+0x138cc>
   24d3c:	add	r2, sl, #128	; 0x80
   24d40:	str	r9, [sp, #76]	; 0x4c
   24d44:	mov	r4, #0
   24d48:	str	r2, [sp, #24]
   24d4c:	mov	r9, r3
   24d50:	b	24db8 <__assert_fail@plt+0x13860>
   24d54:	tst	r0, #1
   24d58:	beq	24dac <__assert_fail@plt+0x13854>
   24d5c:	tst	r6, #8
   24d60:	bne	24dac <__assert_fail@plt+0x13854>
   24d64:	tst	r6, #32
   24d68:	beq	24d74 <__assert_fail@plt+0x1381c>
   24d6c:	tst	r0, #2
   24d70:	beq	24dac <__assert_fail@plt+0x13854>
   24d74:	tst	r6, #128	; 0x80
   24d78:	beq	24d84 <__assert_fail@plt+0x1382c>
   24d7c:	tst	r0, #8
   24d80:	beq	24dac <__assert_fail@plt+0x13854>
   24d84:	str	r5, [sp]
   24d88:	mov	r0, r8
   24d8c:	add	r3, sp, #140	; 0x8c
   24d90:	mov	r2, r7
   24d94:	ldr	r1, [sp, #24]
   24d98:	bl	1ab48 <__assert_fail@plt+0x95f0>
   24d9c:	cmp	r0, #0
   24da0:	bne	24e30 <__assert_fail@plt+0x138d8>
   24da4:	ldr	r5, [sp, #180]	; 0xb4
   24da8:	ldr	r9, [fp, #8]
   24dac:	add	r4, r4, #1
   24db0:	cmp	r4, r9
   24db4:	bge	24e20 <__assert_fail@plt+0x138c8>
   24db8:	ldr	r2, [fp, #12]
   24dbc:	ldr	r8, [sl]
   24dc0:	ldr	r7, [r2, r4, lsl #2]
   24dc4:	add	r2, r8, r7, lsl #3
   24dc8:	ldrb	r1, [r2, #6]
   24dcc:	tst	r1, #16
   24dd0:	beq	24dac <__assert_fail@plt+0x13854>
   24dd4:	ldr	r6, [r2, #4]
   24dd8:	ldr	r3, [pc, #1876]	; 25534 <__assert_fail@plt+0x13fdc>
   24ddc:	tst	r6, r3
   24de0:	beq	24d84 <__assert_fail@plt+0x1382c>
   24de4:	ldr	r2, [sp, #228]	; 0xe4
   24de8:	mov	r1, r5
   24dec:	add	r0, sp, #140	; 0x8c
   24df0:	bl	1906c <__assert_fail@plt+0x7b14>
   24df4:	ldr	r3, [pc, #1852]	; 25538 <__assert_fail@plt+0x13fe0>
   24df8:	and	r6, r3, r6, lsr #8
   24dfc:	tst	r6, #4
   24e00:	bne	24d54 <__assert_fail@plt+0x137fc>
   24e04:	tst	r6, #8
   24e08:	beq	24d64 <__assert_fail@plt+0x1380c>
   24e0c:	tst	r0, #1
   24e10:	beq	24d64 <__assert_fail@plt+0x1380c>
   24e14:	add	r4, r4, #1
   24e18:	cmp	r4, r9
   24e1c:	blt	24db8 <__assert_fail@plt+0x13860>
   24e20:	ldr	r9, [sp, #76]	; 0x4c
   24e24:	mov	r3, #0
   24e28:	str	r3, [sp, #116]	; 0x74
   24e2c:	b	248b0 <__assert_fail@plt+0x13358>
   24e30:	ldr	r3, [sp, #260]	; 0x104
   24e34:	ldr	r6, [sp, #180]	; 0xb4
   24e38:	ldr	r2, [sp, #176]	; 0xb0
   24e3c:	cmp	r3, r0
   24e40:	add	r6, r0, r6
   24e44:	movge	r0, r3
   24e48:	cmp	r6, r2
   24e4c:	str	r0, [sp, #260]	; 0x104
   24e50:	ldr	r8, [sp, #244]	; 0xf4
   24e54:	blt	24f3c <__assert_fail@plt+0x139e4>
   24e58:	ldr	r3, [sp, #188]	; 0xbc
   24e5c:	cmp	r2, r3
   24e60:	bge	24f3c <__assert_fail@plt+0x139e4>
   24e64:	add	r1, r6, #1
   24e68:	add	r0, sp, #140	; 0x8c
   24e6c:	bl	1d6c0 <__assert_fail@plt+0xc168>
   24e70:	cmp	r0, #0
   24e74:	bne	2502c <__assert_fail@plt+0x13ad4>
   24e78:	cmp	r6, r8
   24e7c:	ble	24ea0 <__assert_fail@plt+0x13948>
   24e80:	sub	r2, r6, r8
   24e84:	ldr	r0, [sp, #240]	; 0xf0
   24e88:	add	r8, r8, #1
   24e8c:	lsl	r2, r2, #2
   24e90:	add	r0, r0, r8, lsl #2
   24e94:	mov	r1, #0
   24e98:	bl	1145c <memset@plt>
   24e9c:	str	r6, [sp, #244]	; 0xf4
   24ea0:	ldr	r3, [sl, #12]
   24ea4:	ldr	r8, [sp, #240]	; 0xf0
   24ea8:	mov	r2, #0
   24eac:	ldr	r3, [r3, r7, lsl #2]
   24eb0:	ldr	r1, [r8, r6, lsl #2]
   24eb4:	str	r2, [sp, #128]	; 0x80
   24eb8:	add	r3, r3, r3, lsl #1
   24ebc:	ldr	r2, [sl, #24]
   24ec0:	cmp	r1, #0
   24ec4:	add	r2, r2, r3, lsl #2
   24ec8:	beq	24fc4 <__assert_fail@plt+0x13a6c>
   24ecc:	ldr	r1, [r1, #40]	; 0x28
   24ed0:	add	r0, sp, #276	; 0x114
   24ed4:	bl	18ddc <__assert_fail@plt+0x7884>
   24ed8:	cmp	r0, #0
   24edc:	str	r0, [sp, #128]	; 0x80
   24ee0:	bne	2502c <__assert_fail@plt+0x13ad4>
   24ee4:	ldr	r2, [sp, #228]	; 0xe4
   24ee8:	sub	r1, r6, #1
   24eec:	add	r0, sp, #140	; 0x8c
   24ef0:	bl	1906c <__assert_fail@plt+0x7b14>
   24ef4:	add	r2, sp, #276	; 0x114
   24ef8:	mov	r1, sl
   24efc:	ldr	r7, [sp, #240]	; 0xf0
   24f00:	mov	r3, r0
   24f04:	add	r0, sp, #128	; 0x80
   24f08:	bl	21a14 <__assert_fail@plt+0x104bc>
   24f0c:	str	r0, [r7, r6, lsl #2]
   24f10:	ldr	r0, [sp, #284]	; 0x11c
   24f14:	bl	13c04 <__assert_fail@plt+0x26ac>
   24f18:	ldr	r7, [sp, #240]	; 0xf0
   24f1c:	ldr	r3, [r7, r6, lsl #2]
   24f20:	cmp	r3, #0
   24f24:	bne	24da4 <__assert_fail@plt+0x1384c>
   24f28:	ldr	r0, [sp, #128]	; 0x80
   24f2c:	cmp	r0, #0
   24f30:	beq	24da4 <__assert_fail@plt+0x1384c>
   24f34:	ldr	r9, [sp, #76]	; 0x4c
   24f38:	b	25034 <__assert_fail@plt+0x13adc>
   24f3c:	ldr	r3, [sp, #168]	; 0xa8
   24f40:	cmp	r6, r3
   24f44:	blt	24e78 <__assert_fail@plt+0x13920>
   24f48:	ldr	r2, [sp, #188]	; 0xbc
   24f4c:	cmp	r3, r2
   24f50:	bge	24e78 <__assert_fail@plt+0x13920>
   24f54:	b	24e64 <__assert_fail@plt+0x1390c>
   24f58:	ldr	r2, [sp, #188]	; 0xbc
   24f5c:	cmp	r3, r2
   24f60:	bge	24898 <__assert_fail@plt+0x13340>
   24f64:	add	r1, r5, #2
   24f68:	add	r0, sp, #140	; 0x8c
   24f6c:	bl	1d6c0 <__assert_fail@plt+0xc168>
   24f70:	cmp	r0, #0
   24f74:	str	r0, [sp, #116]	; 0x74
   24f78:	bne	24a80 <__assert_fail@plt+0x13528>
   24f7c:	ldr	r5, [sp, #180]	; 0xb4
   24f80:	b	248a4 <__assert_fail@plt+0x1334c>
   24f84:	ldr	r5, [fp, #48]	; 0x30
   24f88:	cmp	r5, #0
   24f8c:	beq	2564c <__assert_fail@plt+0x140f4>
   24f90:	ldr	r1, [sp, #180]	; 0xb4
   24f94:	ldr	r2, [sp, #228]	; 0xe4
   24f98:	sub	r1, r1, #1
   24f9c:	add	r0, sp, #140	; 0x8c
   24fa0:	bl	1906c <__assert_fail@plt+0x7b14>
   24fa4:	tst	r0, #1
   24fa8:	addne	r4, r4, #256	; 0x100
   24fac:	ldr	r4, [r5, r4, lsl #2]
   24fb0:	b	248d0 <__assert_fail@plt+0x13378>
   24fb4:	ldr	r2, [sp, #188]	; 0xbc
   24fb8:	cmp	r3, r2
   24fbc:	bge	248a4 <__assert_fail@plt+0x1334c>
   24fc0:	b	24f64 <__assert_fail@plt+0x13a0c>
   24fc4:	ldm	r2, {r0, r1, r2}
   24fc8:	add	r3, sp, #276	; 0x114
   24fcc:	stm	r3, {r0, r1, r2}
   24fd0:	sub	r1, r6, #1
   24fd4:	ldr	r2, [sp, #228]	; 0xe4
   24fd8:	add	r0, sp, #140	; 0x8c
   24fdc:	bl	1906c <__assert_fail@plt+0x7b14>
   24fe0:	add	r2, sp, #276	; 0x114
   24fe4:	mov	r1, sl
   24fe8:	mov	r3, r0
   24fec:	add	r0, sp, #128	; 0x80
   24ff0:	bl	21a14 <__assert_fail@plt+0x104bc>
   24ff4:	str	r0, [r8, r6, lsl #2]
   24ff8:	b	24f18 <__assert_fail@plt+0x139c0>
   24ffc:	ldr	r3, [sp, #28]
   25000:	ldr	r7, [sp, #240]	; 0xf0
   25004:	ldr	r4, [r3, #76]	; 0x4c
   25008:	cmp	r4, #0
   2500c:	beq	250d8 <__assert_fail@plt+0x13b80>
   25010:	ldr	r3, [sp, #20]
   25014:	add	r0, sp, #140	; 0x8c
   25018:	mov	r2, r3
   2501c:	ldr	r1, [r7, r3, lsl #2]
   25020:	bl	199f8 <__assert_fail@plt+0x84a0>
   25024:	str	r0, [sp, #236]	; 0xec
   25028:	b	25438 <__assert_fail@plt+0x13ee0>
   2502c:	ldr	r9, [sp, #76]	; 0x4c
   25030:	ldr	r7, [sp, #240]	; 0xf0
   25034:	cmp	r7, #0
   25038:	str	r0, [sp, #116]	; 0x74
   2503c:	beq	2504c <__assert_fail@plt+0x13af4>
   25040:	mov	r4, #0
   25044:	b	248dc <__assert_fail@plt+0x13384>
   25048:	mov	r7, r0
   2504c:	mov	r3, #12
   25050:	str	r3, [sp, #48]	; 0x30
   25054:	b	24a8c <__assert_fail@plt+0x13534>
   25058:	ldr	r2, [sp, #20]
   2505c:	ldr	r4, [sp, #12]
   25060:	add	r1, sp, #276	; 0x114
   25064:	add	r0, sp, #140	; 0x8c
   25068:	str	r3, [sp, #280]	; 0x118
   2506c:	str	r2, [sp, #288]	; 0x120
   25070:	str	r3, [sp, #292]	; 0x124
   25074:	str	r3, [sp, #296]	; 0x128
   25078:	str	r3, [sp, #300]	; 0x12c
   2507c:	str	r4, [sp, #276]	; 0x114
   25080:	str	r9, [sp, #284]	; 0x11c
   25084:	bl	1eaf0 <__assert_fail@plt+0xd598>
   25088:	mov	r7, r0
   2508c:	ldr	r0, [sp, #300]	; 0x12c
   25090:	bl	13c04 <__assert_fail@plt+0x26ac>
   25094:	cmp	r7, #0
   25098:	bne	2544c <__assert_fail@plt+0x13ef4>
   2509c:	ldr	r3, [r4]
   250a0:	cmp	r3, #0
   250a4:	beq	2495c <__assert_fail@plt+0x13404>
   250a8:	ldr	fp, [sp, #12]
   250ac:	ldr	r0, [sp, #240]	; 0xf0
   250b0:	bl	13c04 <__assert_fail@plt+0x26ac>
   250b4:	ldr	r3, [sp, #20]
   250b8:	mov	r0, #0
   250bc:	str	r3, [sp, #232]	; 0xe8
   250c0:	str	fp, [sp, #240]	; 0xf0
   250c4:	str	r9, [sp, #236]	; 0xec
   250c8:	bl	13c04 <__assert_fail@plt+0x26ac>
   250cc:	mov	r0, #0
   250d0:	bl	13c04 <__assert_fail@plt+0x26ac>
   250d4:	ldr	r7, [sp, #240]	; 0xf0
   250d8:	ldr	r3, [sp, #56]	; 0x38
   250dc:	cmp	r3, #0
   250e0:	beq	24a8c <__assert_fail@plt+0x13534>
   250e4:	cmp	r3, #1
   250e8:	bls	2510c <__assert_fail@plt+0x13bb4>
   250ec:	sub	r3, r3, #-536870911	; 0xe0000001
   250f0:	ldr	r2, [sp, #468]	; 0x1d4
   250f4:	mvn	r1, #0
   250f8:	add	r3, r2, r3, lsl #3
   250fc:	str	r1, [r2, #12]
   25100:	str	r1, [r2, #8]!
   25104:	cmp	r3, r2
   25108:	bne	250fc <__assert_fail@plt+0x13ba4>
   2510c:	ldr	r3, [sp, #44]	; 0x2c
   25110:	ldr	r1, [sp, #468]	; 0x1d4
   25114:	ldr	r2, [sp, #232]	; 0xe8
   25118:	ldrb	r3, [r3, #28]
   2511c:	str	r2, [r1, #4]
   25120:	ldr	r2, [sp, #56]	; 0x38
   25124:	mov	r4, #0
   25128:	lsr	r3, r3, #4
   2512c:	eor	r3, r3, #1
   25130:	cmp	r2, #1
   25134:	moveq	r3, #0
   25138:	andne	r3, r3, #1
   2513c:	cmp	r3, #0
   25140:	mov	r3, r1
   25144:	moveq	r3, r2
   25148:	str	r4, [r1]
   2514c:	lsleq	r9, r3, #3
   25150:	beq	25c98 <__assert_fail@plt+0x14740>
   25154:	ldr	r2, [sp, #28]
   25158:	ldrb	r3, [r2, #88]	; 0x58
   2515c:	tst	r3, #1
   25160:	beq	26380 <__assert_fail@plt+0x14e28>
   25164:	ldr	r3, [r2, #76]	; 0x4c
   25168:	cmp	r3, #0
   2516c:	ble	26380 <__assert_fail@plt+0x14e28>
   25170:	ldr	r1, [sp, #44]	; 0x2c
   25174:	mov	r2, #2
   25178:	mov	r3, #16
   2517c:	ldr	r1, [r1]
   25180:	add	r8, sp, #288	; 0x120
   25184:	mov	r0, #48	; 0x30
   25188:	str	r1, [sp, #20]
   2518c:	str	r4, [sp, #128]	; 0x80
   25190:	str	r4, [sp, #276]	; 0x114
   25194:	str	r2, [sp, #132]	; 0x84
   25198:	str	r3, [sp, #280]	; 0x118
   2519c:	str	r8, [sp, #284]	; 0x11c
   251a0:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   251a4:	cmp	r0, #0
   251a8:	str	r0, [sp, #136]	; 0x88
   251ac:	beq	26374 <__assert_fail@plt+0x14e1c>
   251b0:	ldr	r3, [sp, #276]	; 0x114
   251b4:	ldr	r1, [sp, #56]	; 0x38
   251b8:	add	r2, sp, #116	; 0x74
   251bc:	cmp	r1, r3
   251c0:	ldr	r3, [sp, #20]
   251c4:	str	r2, [sp, #16]
   251c8:	addls	sl, sp, #128	; 0x80
   251cc:	ldr	fp, [r3, #72]	; 0x48
   251d0:	movls	r3, r1
   251d4:	str	r4, [sp, #116]	; 0x74
   251d8:	str	r4, [sp, #120]	; 0x78
   251dc:	str	r4, [sp, #124]	; 0x7c
   251e0:	strls	r3, [sp, #276]	; 0x114
   251e4:	bhi	2656c <__assert_fail@plt+0x15014>
   251e8:	ldr	r5, [sp, #56]	; 0x38
   251ec:	ldr	r3, [sp, #284]	; 0x11c
   251f0:	ldr	r1, [sp, #468]	; 0x1d4
   251f4:	lsl	r9, r5, #3
   251f8:	mov	r0, r3
   251fc:	mov	r2, r9
   25200:	mov	r4, r3
   25204:	bl	11264 <memcpy@plt>
   25208:	lsl	r3, r5, #4
   2520c:	str	r3, [sp, #32]
   25210:	ldr	r3, [sp, #468]	; 0x1d4
   25214:	str	r8, [sp, #12]
   25218:	mov	r5, r3
   2521c:	ldr	r7, [r3]
   25220:	mov	r8, r4
   25224:	ldr	r2, [r5, #4]
   25228:	cmp	r2, r7
   2522c:	blt	264fc <__assert_fail@plt+0x14fa4>
   25230:	ldr	r3, [sp, #20]
   25234:	lsl	r6, fp, #3
   25238:	str	fp, [sp, #24]
   2523c:	ldr	r0, [r3]
   25240:	add	r1, r0, r6
   25244:	ldrb	r3, [r1, #4]
   25248:	cmp	r3, #8
   2524c:	beq	26574 <__assert_fail@plt+0x1501c>
   25250:	cmp	r3, #9
   25254:	beq	262c0 <__assert_fail@plt+0x14d68>
   25258:	cmp	r7, r2
   2525c:	beq	25c0c <__assert_fail@plt+0x146b4>
   25260:	cmp	sl, #0
   25264:	beq	252cc <__assert_fail@plt+0x13d74>
   25268:	ldr	r3, [sp, #120]	; 0x78
   2526c:	cmp	r3, #0
   25270:	ble	252cc <__assert_fail@plt+0x13d74>
   25274:	ldr	r0, [sp, #124]	; 0x7c
   25278:	sub	ip, r3, #1
   2527c:	mov	r1, #0
   25280:	cmp	r1, ip
   25284:	bcs	252c0 <__assert_fail@plt+0x13d68>
   25288:	add	r3, r1, ip
   2528c:	lsr	r3, r3, #1
   25290:	ldr	r2, [r0, r3, lsl #2]
   25294:	cmp	fp, r2
   25298:	ble	252b0 <__assert_fail@plt+0x13d58>
   2529c:	b	25a38 <__assert_fail@plt+0x144e0>
   252a0:	ldr	ip, [r0, r2, lsl #2]
   252a4:	cmp	fp, ip
   252a8:	bgt	25a40 <__assert_fail@plt+0x144e8>
   252ac:	mov	r3, r2
   252b0:	add	r2, r1, r3
   252b4:	cmp	r1, r3
   252b8:	lsr	r2, r2, #1
   252bc:	bcc	252a0 <__assert_fail@plt+0x13d48>
   252c0:	ldr	r3, [r0, r1, lsl #2]
   252c4:	cmp	fp, r3
   252c8:	beq	25df0 <__assert_fail@plt+0x14898>
   252cc:	ldr	r4, [sp, #224]	; 0xe0
   252d0:	ldr	r0, [r4]
   252d4:	add	r3, r0, r6
   252d8:	ldrb	r2, [r3, #4]
   252dc:	tst	r2, #8
   252e0:	beq	25ea0 <__assert_fail@plt+0x14948>
   252e4:	ldr	r1, [sp, #240]	; 0xf0
   252e8:	add	r3, fp, fp, lsl #1
   252ec:	ldr	r4, [r4, #20]
   252f0:	ldr	r2, [sp, #120]	; 0x78
   252f4:	add	r4, r4, r3, lsl #2
   252f8:	ldr	r3, [r1, r7, lsl #2]
   252fc:	cmp	r2, #0
   25300:	str	r3, [sp, #24]
   25304:	ble	25aa0 <__assert_fail@plt+0x14548>
   25308:	ldr	r0, [sp, #124]	; 0x7c
   2530c:	sub	r2, r2, #1
   25310:	mov	r1, #0
   25314:	cmp	r1, r2
   25318:	bcs	25a94 <__assert_fail@plt+0x1453c>
   2531c:	add	r3, r1, r2
   25320:	lsr	r3, r3, #1
   25324:	b	2533c <__assert_fail@plt+0x13de4>
   25328:	add	ip, r1, r3
   2532c:	cmp	r1, r3
   25330:	mov	r2, r3
   25334:	lsr	r3, ip, #1
   25338:	bcs	25a94 <__assert_fail@plt+0x1453c>
   2533c:	ldr	ip, [r0, r3, lsl #2]
   25340:	cmp	fp, ip
   25344:	ble	25328 <__assert_fail@plt+0x13dd0>
   25348:	add	r1, r3, #1
   2534c:	b	25314 <__assert_fail@plt+0x13dbc>
   25350:	ldr	r3, [sp, #52]	; 0x34
   25354:	cmp	r3, r5
   25358:	ble	24768 <__assert_fail@plt+0x13210>
   2535c:	ldr	r3, [sp, #60]	; 0x3c
   25360:	ldr	r1, [sp, #80]	; 0x50
   25364:	ldrb	r2, [r3, r5]
   25368:	add	r3, r3, r5
   2536c:	ldrb	r2, [r1, r2]
   25370:	ldr	r1, [sp, #64]	; 0x40
   25374:	ldrb	r2, [r1, r2]
   25378:	cmp	r2, #0
   2537c:	bne	247ac <__assert_fail@plt+0x13254>
   25380:	mov	ip, r1
   25384:	add	r2, r5, #1
   25388:	ldr	lr, [sp, #80]	; 0x50
   2538c:	ldr	r0, [sp, #52]	; 0x34
   25390:	b	253ac <__assert_fail@plt+0x13e54>
   25394:	ldrb	r1, [r3, #1]!
   25398:	add	r2, r2, #1
   2539c:	ldrb	r1, [lr, r1]
   253a0:	ldrb	r1, [ip, r1]
   253a4:	cmp	r1, #0
   253a8:	bne	25644 <__assert_fail@plt+0x140ec>
   253ac:	cmp	r0, r2
   253b0:	mov	r5, r2
   253b4:	bne	25394 <__assert_fail@plt+0x13e3c>
   253b8:	b	24760 <__assert_fail@plt+0x13208>
   253bc:	ldr	r3, [sp, #68]	; 0x44
   253c0:	cmp	r3, r5
   253c4:	bgt	24a38 <__assert_fail@plt+0x134e0>
   253c8:	ldr	r3, [sp, #80]	; 0x50
   253cc:	ldr	r2, [sp, #112]	; 0x70
   253d0:	cmp	r3, #0
   253d4:	beq	25808 <__assert_fail@plt+0x142b0>
   253d8:	mov	ip, r3
   253dc:	ldr	r1, [sp, #108]	; 0x6c
   253e0:	ldr	r0, [sp, #64]	; 0x40
   253e4:	ldr	r4, [sp, #68]	; 0x44
   253e8:	ldr	r6, [sp, #60]	; 0x3c
   253ec:	ldr	lr, [sp, #72]	; 0x48
   253f0:	b	25408 <__assert_fail@plt+0x13eb0>
   253f4:	sub	r5, r5, #1
   253f8:	cmp	r4, r5
   253fc:	mov	r2, r5
   25400:	mov	r1, #1
   25404:	bgt	256dc <__assert_fail@plt+0x14184>
   25408:	cmp	lr, r5
   2540c:	mov	r3, #0
   25410:	ldrbgt	r3, [r6, r5]
   25414:	ldrb	r3, [ip, r3]
   25418:	ldrb	r3, [r0, r3]
   2541c:	cmp	r3, #0
   25420:	beq	253f4 <__assert_fail@plt+0x13e9c>
   25424:	cmp	r1, #0
   25428:	strne	r2, [sp, #112]	; 0x70
   2542c:	b	247ac <__assert_fail@plt+0x13254>
   25430:	ldr	r3, [sp, #28]
   25434:	ldr	r4, [r3, #76]	; 0x4c
   25438:	cmp	r4, #0
   2543c:	bne	24bd0 <__assert_fail@plt+0x13678>
   25440:	b	250d8 <__assert_fail@plt+0x13b80>
   25444:	ldr	r1, [sp, #72]	; 0x48
   25448:	b	24520 <__assert_fail@plt+0x12fc8>
   2544c:	mov	sl, #0
   25450:	ldr	r0, [sp, #12]
   25454:	bl	13c04 <__assert_fail@plt+0x26ac>
   25458:	mov	r0, sl
   2545c:	bl	13c04 <__assert_fail@plt+0x26ac>
   25460:	cmp	r7, #1
   25464:	beq	2496c <__assert_fail@plt+0x13414>
   25468:	str	r7, [sp, #48]	; 0x30
   2546c:	ldr	r7, [sp, #240]	; 0xf0
   25470:	b	24a8c <__assert_fail@plt+0x13534>
   25474:	ldr	r1, [sp, #164]	; 0xa4
   25478:	ldr	r4, [sp, #64]	; 0x40
   2547c:	ldr	r6, [sp, #92]	; 0x5c
   25480:	ldr	r7, [sp, #68]	; 0x44
   25484:	ldr	r8, [sp, #52]	; 0x34
   25488:	b	254d0 <__assert_fail@plt+0x13f78>
   2548c:	ldr	r0, [sp, #168]	; 0xa8
   25490:	mov	r2, #0
   25494:	cmp	r3, r0
   25498:	ldrcc	r2, [sp, #144]	; 0x90
   2549c:	ldrbcc	r2, [r2, r3]
   254a0:	ldrb	r3, [r4, r2]
   254a4:	cmp	r3, #0
   254a8:	bne	247ac <__assert_fail@plt+0x13254>
   254ac:	add	r5, r5, r6
   254b0:	cmp	r8, r5
   254b4:	movge	r3, #0
   254b8:	movlt	r3, #1
   254bc:	cmp	r7, r5
   254c0:	orrgt	r3, r3, #1
   254c4:	cmp	r3, #0
   254c8:	str	r5, [sp, #112]	; 0x70
   254cc:	bne	24a38 <__assert_fail@plt+0x134e0>
   254d0:	ldr	r2, [sp, #172]	; 0xac
   254d4:	sub	r3, r5, r1
   254d8:	cmp	r3, r2
   254dc:	bcc	2548c <__assert_fail@plt+0x13f34>
   254e0:	ldr	r2, [sp, #472]	; 0x1d8
   254e4:	mov	r1, r5
   254e8:	add	r0, sp, #140	; 0x8c
   254ec:	bl	19158 <__assert_fail@plt+0x7c00>
   254f0:	cmp	r0, #0
   254f4:	bne	25858 <__assert_fail@plt+0x14300>
   254f8:	ldr	r1, [sp, #164]	; 0xa4
   254fc:	sub	r3, r5, r1
   25500:	b	2548c <__assert_fail@plt+0x13f34>
   25504:	mov	r3, r2
   25508:	sub	r1, r3, #1
   2550c:	ldr	r2, [sp, #228]	; 0xe4
   25510:	add	r0, sp, #140	; 0x8c
   25514:	bl	1906c <__assert_fail@plt+0x7b14>
   25518:	tst	r0, #1
   2551c:	beq	25688 <__assert_fail@plt+0x14130>
   25520:	ldr	fp, [r4, #40]	; 0x28
   25524:	b	24820 <__assert_fail@plt+0x132c8>
   25528:	mov	r7, #1
   2552c:	b	25450 <__assert_fail@plt+0x13ef8>
   25530:	beq	feacffe0 <optarg@@GLIBC_2.4+0xfea91e20>
   25534:	andeq	pc, r3, r0, lsl #30
   25538:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2553c:	ldr	r3, [sp, #264]	; 0x108
   25540:	cmp	r3, #0
   25544:	movgt	r7, #0
   25548:	ble	255c8 <__assert_fail@plt+0x14070>
   2554c:	ldr	r3, [sp, #272]	; 0x110
   25550:	ldr	r6, [r3, r7, lsl #2]
   25554:	ldr	r3, [r6, #16]
   25558:	cmp	r3, #0
   2555c:	movgt	r4, #0
   25560:	ble	2558c <__assert_fail@plt+0x14034>
   25564:	ldr	r3, [r6, #20]
   25568:	ldr	r5, [r3, r4, lsl #2]
   2556c:	add	r4, r4, #1
   25570:	ldr	r0, [r5, #16]
   25574:	bl	13c04 <__assert_fail@plt+0x26ac>
   25578:	mov	r0, r5
   2557c:	bl	13c04 <__assert_fail@plt+0x26ac>
   25580:	ldr	r3, [r6, #16]
   25584:	cmp	r4, r3
   25588:	blt	25564 <__assert_fail@plt+0x1400c>
   2558c:	ldr	r0, [r6, #20]
   25590:	bl	13c04 <__assert_fail@plt+0x26ac>
   25594:	ldr	r3, [r6, #8]
   25598:	cmp	r3, #0
   2559c:	beq	255b0 <__assert_fail@plt+0x14058>
   255a0:	ldr	r0, [r3, #8]
   255a4:	bl	13c04 <__assert_fail@plt+0x26ac>
   255a8:	ldr	r0, [r6, #8]
   255ac:	bl	13c04 <__assert_fail@plt+0x26ac>
   255b0:	mov	r0, r6
   255b4:	bl	13c04 <__assert_fail@plt+0x26ac>
   255b8:	ldr	r3, [sp, #264]	; 0x108
   255bc:	add	r7, r7, #1
   255c0:	cmp	r7, r3
   255c4:	blt	2554c <__assert_fail@plt+0x13ff4>
   255c8:	mov	r3, #0
   255cc:	ldr	r0, [sp, #272]	; 0x110
   255d0:	str	r3, [sp, #264]	; 0x108
   255d4:	str	r3, [sp, #248]	; 0xf8
   255d8:	bl	13c04 <__assert_fail@plt+0x26ac>
   255dc:	ldr	r0, [sp, #256]	; 0x100
   255e0:	bl	13c04 <__assert_fail@plt+0x26ac>
   255e4:	b	24aa4 <__assert_fail@plt+0x1354c>
   255e8:	mov	r1, r6
   255ec:	ldr	r0, [sp, #144]	; 0x90
   255f0:	bl	2b678 <__assert_fail@plt+0x1a120>
   255f4:	cmp	r0, #0
   255f8:	beq	24a80 <__assert_fail@plt+0x13528>
   255fc:	ldr	r1, [sp, #28]
   25600:	ldrb	r2, [sp, #215]	; 0xd7
   25604:	str	r0, [sp, #144]	; 0x90
   25608:	ldrb	r3, [r1, #88]	; 0x58
   2560c:	cmp	r2, #0
   25610:	add	r2, r1, #96	; 0x60
   25614:	str	r6, [sp, #176]	; 0xb0
   25618:	lsr	r3, r3, #4
   2561c:	and	r3, r3, #1
   25620:	strb	r3, [sp, #218]	; 0xda
   25624:	str	r2, [sp, #208]	; 0xd0
   25628:	bne	2451c <__assert_fail@plt+0x12fc4>
   2562c:	b	24504 <__assert_fail@plt+0x12fac>
   25630:	ldr	r3, [sp, #28]
   25634:	ldrb	r3, [r3, #88]	; 0x58
   25638:	tst	r3, #2
   2563c:	bne	245bc <__assert_fail@plt+0x13064>
   25640:	b	245e0 <__assert_fail@plt+0x13088>
   25644:	str	r5, [sp, #112]	; 0x70
   25648:	b	247ac <__assert_fail@plt+0x13254>
   2564c:	mov	r1, fp
   25650:	ldr	r0, [sp, #224]	; 0xe0
   25654:	bl	21e6c <__assert_fail@plt+0x10914>
   25658:	cmp	r0, #0
   2565c:	bne	248c0 <__assert_fail@plt+0x13368>
   25660:	ldr	r7, [sp, #240]	; 0xf0
   25664:	mov	r3, #12
   25668:	cmp	r7, #0
   2566c:	str	r3, [sp, #116]	; 0x74
   25670:	bne	25040 <__assert_fail@plt+0x13ae8>
   25674:	b	2504c <__assert_fail@plt+0x13af4>
   25678:	ldr	r3, [sp, #104]	; 0x68
   2567c:	str	r3, [sp, #16]
   25680:	ldrb	r3, [fp, #52]	; 0x34
   25684:	b	2484c <__assert_fail@plt+0x132f4>
   25688:	cmp	r0, #0
   2568c:	beq	24820 <__assert_fail@plt+0x132c8>
   25690:	and	r3, r0, #6
   25694:	cmp	r3, #6
   25698:	ldreq	fp, [r4, #48]	; 0x30
   2569c:	beq	24820 <__assert_fail@plt+0x132c8>
   256a0:	tst	r0, #2
   256a4:	beq	24a5c <__assert_fail@plt+0x13504>
   256a8:	ldr	fp, [r4, #44]	; 0x2c
   256ac:	b	24820 <__assert_fail@plt+0x132c8>
   256b0:	ldr	r0, [sp, #124]	; 0x7c
   256b4:	ldr	r8, [sp, #12]
   256b8:	bl	13c04 <__assert_fail@plt+0x26ac>
   256bc:	ldr	r0, [sp, #284]	; 0x11c
   256c0:	cmp	r0, r8
   256c4:	beq	256cc <__assert_fail@plt+0x14174>
   256c8:	bl	13c04 <__assert_fail@plt+0x26ac>
   256cc:	mov	r3, #1
   256d0:	str	r3, [sp, #48]	; 0x30
   256d4:	ldr	r7, [sp, #240]	; 0xf0
   256d8:	b	24a8c <__assert_fail@plt+0x13534>
   256dc:	str	r5, [sp, #112]	; 0x70
   256e0:	b	24a38 <__assert_fail@plt+0x134e0>
   256e4:	ldrsb	r3, [fp, #52]	; 0x34
   256e8:	cmp	r3, #0
   256ec:	blt	257a4 <__assert_fail@plt+0x1424c>
   256f0:	ldr	r3, [sp, #36]	; 0x24
   256f4:	cmp	r3, #0
   256f8:	ldr	r3, [sp, #12]
   256fc:	str	r3, [sp, #20]
   25700:	movne	r3, #1
   25704:	strne	r3, [sp, #40]	; 0x28
   25708:	bne	24864 <__assert_fail@plt+0x1330c>
   2570c:	b	24b60 <__assert_fail@plt+0x13608>
   25710:	ldr	r7, [sp, #240]	; 0xf0
   25714:	b	2504c <__assert_fail@plt+0x13af4>
   25718:	add	r4, fp, #8
   2571c:	add	r5, fp, #12
   25720:	mov	r1, r4
   25724:	mov	r2, r5
   25728:	mov	r3, #0
   2572c:	add	r0, sp, #140	; 0x8c
   25730:	bl	19d04 <__assert_fail@plt+0x87ac>
   25734:	cmp	r0, #0
   25738:	str	r0, [sp, #116]	; 0x74
   2573c:	bne	257e0 <__assert_fail@plt+0x14288>
   25740:	ldrb	r3, [fp, #52]	; 0x34
   25744:	tst	r3, #64	; 0x40
   25748:	bne	257c0 <__assert_fail@plt+0x14268>
   2574c:	ldr	r2, [sp, #108]	; 0x6c
   25750:	str	r2, [sp, #16]
   25754:	b	2484c <__assert_fail@plt+0x132f4>
   25758:	mov	fp, r3
   2575c:	bl	13c04 <__assert_fail@plt+0x26ac>
   25760:	mov	r0, fp
   25764:	bl	13c04 <__assert_fail@plt+0x26ac>
   25768:	mov	r3, #12
   2576c:	str	r3, [sp, #48]	; 0x30
   25770:	ldr	r7, [sp, #240]	; 0xf0
   25774:	b	24a8c <__assert_fail@plt+0x13534>
   25778:	mov	r3, #8
   2577c:	b	2467c <__assert_fail@plt+0x13124>
   25780:	ldr	fp, [sp, #12]
   25784:	mov	r0, fp
   25788:	bl	13c04 <__assert_fail@plt+0x26ac>
   2578c:	mov	r0, sl
   25790:	bl	13c04 <__assert_fail@plt+0x26ac>
   25794:	mov	r3, #12
   25798:	str	r3, [sp, #48]	; 0x30
   2579c:	ldr	r7, [sp, #240]	; 0xf0
   257a0:	b	24a8c <__assert_fail@plt+0x13534>
   257a4:	ldr	r2, [sp, #12]
   257a8:	mov	r1, fp
   257ac:	add	r0, sp, #140	; 0x8c
   257b0:	bl	199f8 <__assert_fail@plt+0x84a0>
   257b4:	cmp	r0, #0
   257b8:	beq	24854 <__assert_fail@plt+0x132fc>
   257bc:	b	256f0 <__assert_fail@plt+0x14198>
   257c0:	mov	r2, r5
   257c4:	mov	r1, r4
   257c8:	add	r0, sp, #140	; 0x8c
   257cc:	bl	23914 <__assert_fail@plt+0x123bc>
   257d0:	cmp	r0, #0
   257d4:	str	r0, [sp, #116]	; 0x74
   257d8:	ldrbeq	r3, [fp, #52]	; 0x34
   257dc:	beq	2574c <__assert_fail@plt+0x141f4>
   257e0:	str	r0, [sp, #20]
   257e4:	b	24b60 <__assert_fail@plt+0x13608>
   257e8:	cmp	r0, #0
   257ec:	mov	r4, r0
   257f0:	bne	248f8 <__assert_fail@plt+0x133a0>
   257f4:	b	24b40 <__assert_fail@plt+0x135e8>
   257f8:	mov	r3, #12
   257fc:	mov	r7, #0
   25800:	str	r3, [sp, #48]	; 0x30
   25804:	b	24a8c <__assert_fail@plt+0x13534>
   25808:	ldr	r1, [sp, #108]	; 0x6c
   2580c:	ldr	r0, [sp, #64]	; 0x40
   25810:	ldr	lr, [sp, #68]	; 0x44
   25814:	ldr	r4, [sp, #60]	; 0x3c
   25818:	ldr	ip, [sp, #72]	; 0x48
   2581c:	b	25834 <__assert_fail@plt+0x142dc>
   25820:	sub	r5, r5, #1
   25824:	cmp	lr, r5
   25828:	mov	r2, r5
   2582c:	mov	r1, #1
   25830:	bgt	256dc <__assert_fail@plt+0x14184>
   25834:	cmp	ip, r5
   25838:	mov	r3, #0
   2583c:	ldrbgt	r3, [r4, r5]
   25840:	ldrb	r3, [r0, r3]
   25844:	cmp	r3, #0
   25848:	beq	25820 <__assert_fail@plt+0x142c8>
   2584c:	b	25424 <__assert_fail@plt+0x13ecc>
   25850:	mov	r4, r0
   25854:	b	248f8 <__assert_fail@plt+0x133a0>
   25858:	str	r0, [sp, #48]	; 0x30
   2585c:	ldr	r7, [sp, #240]	; 0xf0
   25860:	b	24a8c <__assert_fail@plt+0x13534>
   25864:	ldr	r3, [sp, #12]
   25868:	str	r9, [sp, #32]
   2586c:	mov	fp, r3
   25870:	mov	r9, sl
   25874:	add	r2, r3, r4
   25878:	str	r6, [sp, #20]
   2587c:	str	r2, [sp, #24]
   25880:	str	sl, [sp, #16]
   25884:	ldr	r6, [fp]
   25888:	cmp	r6, #0
   2588c:	beq	25a2c <__assert_fail@plt+0x144d4>
   25890:	ldr	r5, [r9]
   25894:	cmp	r5, #0
   25898:	beq	25974 <__assert_fail@plt+0x1441c>
   2589c:	ldr	r3, [r6, #8]
   258a0:	cmp	r3, #0
   258a4:	ble	259a0 <__assert_fail@plt+0x14448>
   258a8:	ldr	r2, [r5, #8]
   258ac:	cmp	r2, #0
   258b0:	ble	259e0 <__assert_fail@plt+0x14488>
   258b4:	add	r3, r3, r2
   258b8:	str	r3, [sp, #128]	; 0x80
   258bc:	lsl	r0, r3, #2
   258c0:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   258c4:	cmp	r0, #0
   258c8:	str	r0, [sp, #136]	; 0x88
   258cc:	beq	26324 <__assert_fail@plt+0x14dcc>
   258d0:	mov	r4, #0
   258d4:	mov	r7, r4
   258d8:	mov	ip, r0
   258dc:	mov	r1, #1
   258e0:	b	25924 <__assert_fail@plt+0x143cc>
   258e4:	ldr	r3, [r5, #8]
   258e8:	cmp	r4, r3
   258ec:	bge	25a4c <__assert_fail@plt+0x144f4>
   258f0:	ldr	r3, [r6, #12]
   258f4:	ldr	r2, [r5, #12]
   258f8:	ldr	r3, [r3, r7, lsl #2]
   258fc:	ldr	r2, [r2, r4, lsl #2]
   25900:	cmp	r3, r2
   25904:	addgt	r4, r4, #1
   25908:	strgt	r2, [ip]
   2590c:	bgt	2591c <__assert_fail@plt+0x143c4>
   25910:	add	r7, r7, #1
   25914:	addeq	r4, r4, #1
   25918:	str	r3, [ip]
   2591c:	add	r1, r1, #1
   25920:	add	ip, ip, #4
   25924:	ldr	r2, [r6, #8]
   25928:	sub	sl, r1, #1
   2592c:	cmp	r7, r2
   25930:	blt	258e4 <__assert_fail@plt+0x1438c>
   25934:	ldr	r2, [r5, #8]
   25938:	cmp	r4, r2
   2593c:	blt	2634c <__assert_fail@plt+0x14df4>
   25940:	add	r2, sp, #128	; 0x80
   25944:	str	sl, [sp, #132]	; 0x84
   25948:	mov	r3, #0
   2594c:	mov	r1, r8
   25950:	add	r0, sp, #116	; 0x74
   25954:	str	r3, [sp, #116]	; 0x74
   25958:	bl	1d8d4 <__assert_fail@plt+0xc37c>
   2595c:	str	r0, [fp]
   25960:	ldr	r0, [sp, #136]	; 0x88
   25964:	bl	13c04 <__assert_fail@plt+0x26ac>
   25968:	ldr	r7, [sp, #116]	; 0x74
   2596c:	cmp	r7, #0
   25970:	bne	25a74 <__assert_fail@plt+0x1451c>
   25974:	ldr	r3, [sp, #24]
   25978:	add	fp, fp, #4
   2597c:	cmp	r3, fp
   25980:	add	r9, r9, #4
   25984:	bne	25884 <__assert_fail@plt+0x1432c>
   25988:	ldr	sl, [sp, #16]
   2598c:	ldr	r9, [sp, #32]
   25990:	mov	r0, sl
   25994:	ldr	fp, [sp, #12]
   25998:	bl	13c04 <__assert_fail@plt+0x26ac>
   2599c:	b	250ac <__assert_fail@plt+0x13b54>
   259a0:	ldr	r3, [r5, #8]
   259a4:	cmp	r3, #0
   259a8:	ble	25a14 <__assert_fail@plt+0x144bc>
   259ac:	lsl	r0, r3, #2
   259b0:	str	r3, [sp, #132]	; 0x84
   259b4:	str	r3, [sp, #128]	; 0x80
   259b8:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   259bc:	cmp	r0, #0
   259c0:	str	r0, [sp, #136]	; 0x88
   259c4:	beq	26324 <__assert_fail@plt+0x14dcc>
   259c8:	ldr	r2, [r5, #8]
   259cc:	ldr	r1, [r5, #12]
   259d0:	lsl	r2, r2, #2
   259d4:	bl	11264 <memcpy@plt>
   259d8:	add	r2, sp, #128	; 0x80
   259dc:	b	25948 <__assert_fail@plt+0x143f0>
   259e0:	lsl	r0, r3, #2
   259e4:	str	r3, [sp, #132]	; 0x84
   259e8:	str	r3, [sp, #128]	; 0x80
   259ec:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   259f0:	cmp	r0, #0
   259f4:	str	r0, [sp, #136]	; 0x88
   259f8:	beq	26324 <__assert_fail@plt+0x14dcc>
   259fc:	ldr	r2, [r6, #8]
   25a00:	ldr	r1, [r6, #12]
   25a04:	lsl	r2, r2, #2
   25a08:	bl	11264 <memcpy@plt>
   25a0c:	add	r2, sp, #128	; 0x80
   25a10:	b	25948 <__assert_fail@plt+0x143f0>
   25a14:	add	r2, sp, #128	; 0x80
   25a18:	mov	r3, #0
   25a1c:	str	r3, [sp, #128]	; 0x80
   25a20:	str	r3, [r2, #4]
   25a24:	str	r3, [r2, #8]
   25a28:	b	25948 <__assert_fail@plt+0x143f0>
   25a2c:	ldr	r3, [r9]
   25a30:	str	r3, [fp]
   25a34:	b	25974 <__assert_fail@plt+0x1441c>
   25a38:	mov	r2, r3
   25a3c:	mov	r3, ip
   25a40:	add	r1, r2, #1
   25a44:	mov	ip, r3
   25a48:	b	25280 <__assert_fail@plt+0x13d28>
   25a4c:	sub	r2, r2, r7
   25a50:	ldr	r1, [r6, #12]
   25a54:	lsl	r2, r2, #2
   25a58:	add	r0, r0, sl, lsl #2
   25a5c:	add	r1, r1, r7, lsl #2
   25a60:	bl	11264 <memcpy@plt>
   25a64:	ldr	r2, [r6, #8]
   25a68:	sub	r7, r2, r7
   25a6c:	add	sl, sl, r7
   25a70:	b	25940 <__assert_fail@plt+0x143e8>
   25a74:	ldr	sl, [sp, #16]
   25a78:	mov	r0, sl
   25a7c:	bl	13c04 <__assert_fail@plt+0x26ac>
   25a80:	ldr	r0, [sp, #12]
   25a84:	bl	13c04 <__assert_fail@plt+0x26ac>
   25a88:	mov	r0, #0
   25a8c:	bl	13c04 <__assert_fail@plt+0x26ac>
   25a90:	b	25460 <__assert_fail@plt+0x13f08>
   25a94:	ldr	r3, [r0, r1, lsl #2]
   25a98:	cmp	fp, r3
   25a9c:	beq	25ab4 <__assert_fail@plt+0x1455c>
   25aa0:	mov	r1, fp
   25aa4:	ldr	r0, [sp, #16]
   25aa8:	bl	189a4 <__assert_fail@plt+0x744c>
   25aac:	cmp	r0, #0
   25ab0:	beq	26210 <__assert_fail@plt+0x14cb8>
   25ab4:	ldr	r6, [r4, #4]
   25ab8:	cmp	r6, #0
   25abc:	ble	25b70 <__assert_fail@plt+0x14618>
   25ac0:	ldr	r3, [sp, #24]
   25ac4:	ldr	r2, [r4, #8]
   25ac8:	mvn	fp, #0
   25acc:	ldr	r3, [r3, #8]
   25ad0:	mov	lr, #0
   25ad4:	str	r3, [sp, #40]	; 0x28
   25ad8:	sub	r3, r3, #1
   25adc:	str	r2, [sp, #36]	; 0x24
   25ae0:	str	r3, [sp, #44]	; 0x2c
   25ae4:	ldr	r3, [sp, #40]	; 0x28
   25ae8:	cmp	r3, #0
   25aec:	ble	25b54 <__assert_fail@plt+0x145fc>
   25af0:	ldr	r3, [sp, #36]	; 0x24
   25af4:	ldr	ip, [sp, #44]	; 0x2c
   25af8:	mov	r1, #0
   25afc:	ldr	r4, [r3, lr, lsl #2]
   25b00:	ldr	r3, [sp, #24]
   25b04:	ldr	r0, [r3, #12]
   25b08:	cmp	r1, ip
   25b0c:	bcs	25b48 <__assert_fail@plt+0x145f0>
   25b10:	add	r2, r1, ip
   25b14:	lsr	r2, r2, #1
   25b18:	ldr	r3, [r0, r2, lsl #2]
   25b1c:	cmp	r4, r3
   25b20:	ble	25b38 <__assert_fail@plt+0x145e0>
   25b24:	b	25be8 <__assert_fail@plt+0x14690>
   25b28:	ldr	ip, [r0, r3, lsl #2]
   25b2c:	cmp	r4, ip
   25b30:	bgt	25bf0 <__assert_fail@plt+0x14698>
   25b34:	mov	r2, r3
   25b38:	add	r3, r1, r2
   25b3c:	cmp	r1, r2
   25b40:	lsr	r3, r3, #1
   25b44:	bcc	25b28 <__assert_fail@plt+0x145d0>
   25b48:	ldr	r3, [r0, r1, lsl #2]
   25b4c:	cmp	r4, r3
   25b50:	beq	25bfc <__assert_fail@plt+0x146a4>
   25b54:	add	lr, lr, #1
   25b58:	cmp	r6, lr
   25b5c:	bne	25ae4 <__assert_fail@plt+0x1458c>
   25b60:	cmp	fp, #0
   25b64:	bge	25224 <__assert_fail@plt+0x13ccc>
   25b68:	cmn	fp, #2
   25b6c:	beq	26210 <__assert_fail@plt+0x14cb8>
   25b70:	cmp	sl, #0
   25b74:	beq	256b0 <__assert_fail@plt+0x14158>
   25b78:	ldr	r4, [sl]
   25b7c:	cmp	r4, #0
   25b80:	beq	26460 <__assert_fail@plt+0x14f08>
   25b84:	sub	r3, r4, #1
   25b88:	ldr	ip, [sl, #8]
   25b8c:	add	lr, r3, r3, lsl #1
   25b90:	str	r3, [sl]
   25b94:	add	r4, ip, lr, lsl #3
   25b98:	mov	r2, r9
   25b9c:	ldr	r1, [r4, #8]
   25ba0:	mov	r0, r5
   25ba4:	ldr	r7, [ip, lr, lsl #3]
   25ba8:	bl	11264 <memcpy@plt>
   25bac:	ldr	r1, [r4, #8]
   25bb0:	mov	r2, r9
   25bb4:	add	r1, r1, r9
   25bb8:	mov	r0, r8
   25bbc:	bl	11264 <memcpy@plt>
   25bc0:	ldr	r0, [sp, #124]	; 0x7c
   25bc4:	bl	13c04 <__assert_fail@plt+0x26ac>
   25bc8:	ldr	r0, [r4, #8]
   25bcc:	bl	13c04 <__assert_fail@plt+0x26ac>
   25bd0:	add	r3, r4, #12
   25bd4:	ldr	fp, [r4, #4]
   25bd8:	ldm	r3, {r0, r1, r2}
   25bdc:	ldr	r3, [sp, #16]
   25be0:	stm	r3, {r0, r1, r2}
   25be4:	b	25224 <__assert_fail@plt+0x13ccc>
   25be8:	mov	r3, r2
   25bec:	mov	r2, ip
   25bf0:	add	r1, r3, #1
   25bf4:	mov	ip, r2
   25bf8:	b	25b08 <__assert_fail@plt+0x145b0>
   25bfc:	cmn	fp, #1
   25c00:	bne	2617c <__assert_fail@plt+0x14c24>
   25c04:	mov	fp, r4
   25c08:	b	25b54 <__assert_fail@plt+0x145fc>
   25c0c:	ldr	r3, [sp, #236]	; 0xec
   25c10:	cmp	fp, r3
   25c14:	bne	25260 <__assert_fail@plt+0x13d08>
   25c18:	cmp	sl, #0
   25c1c:	bne	25df0 <__assert_fail@plt+0x14898>
   25c20:	ldr	r0, [sp, #124]	; 0x7c
   25c24:	ldr	r8, [sp, #12]
   25c28:	bl	13c04 <__assert_fail@plt+0x26ac>
   25c2c:	ldr	r0, [sp, #284]	; 0x11c
   25c30:	cmp	r0, r8
   25c34:	beq	25c94 <__assert_fail@plt+0x1473c>
   25c38:	bl	13c04 <__assert_fail@plt+0x26ac>
   25c3c:	mov	r4, #0
   25c40:	mov	r3, #16
   25c44:	cmp	sl, #0
   25c48:	str	r8, [sp, #284]	; 0x11c
   25c4c:	str	r4, [sp, #276]	; 0x114
   25c50:	str	r3, [sp, #280]	; 0x118
   25c54:	beq	25c94 <__assert_fail@plt+0x1473c>
   25c58:	ldr	r6, [sl]
   25c5c:	ldr	r7, [sl, #8]
   25c60:	cmp	r6, r4
   25c64:	ble	25c8c <__assert_fail@plt+0x14734>
   25c68:	mov	r5, r7
   25c6c:	ldr	r0, [r5, #20]
   25c70:	bl	13c04 <__assert_fail@plt+0x26ac>
   25c74:	add	r4, r4, #1
   25c78:	ldr	r0, [r5, #8]
   25c7c:	bl	13c04 <__assert_fail@plt+0x26ac>
   25c80:	cmp	r6, r4
   25c84:	add	r5, r5, #24
   25c88:	bne	25c6c <__assert_fail@plt+0x14714>
   25c8c:	mov	r0, r7
   25c90:	bl	13c04 <__assert_fail@plt+0x26ac>
   25c94:	ldr	r7, [sp, #240]	; 0xf0
   25c98:	ldrb	r3, [sp, #216]	; 0xd8
   25c9c:	ldr	r2, [sp, #468]	; 0x1d4
   25ca0:	ldr	r5, [sp, #168]	; 0xa8
   25ca4:	cmp	r3, #0
   25ca8:	movne	r1, r2
   25cac:	mov	r3, r2
   25cb0:	ldr	r4, [sp, #152]	; 0x98
   25cb4:	ldr	lr, [sp, #172]	; 0xac
   25cb8:	ldr	r0, [sp, #112]	; 0x70
   25cbc:	addne	r3, r2, #4
   25cc0:	addne	r6, r1, r9
   25cc4:	bne	25da0 <__assert_fail@plt+0x14848>
   25cc8:	add	r1, r3, #4
   25ccc:	add	ip, r3, r9
   25cd0:	ldr	r3, [r1, #-4]
   25cd4:	add	r2, r2, #8
   25cd8:	cmn	r3, #1
   25cdc:	add	r3, r0, r3
   25ce0:	ldrne	lr, [r2, #-4]
   25ce4:	strne	r3, [r1, #-4]
   25ce8:	addne	r3, r0, lr
   25cec:	strne	r3, [r2, #-4]
   25cf0:	cmp	ip, r2
   25cf4:	add	r1, r1, #8
   25cf8:	bne	25cd0 <__assert_fail@plt+0x14778>
   25cfc:	ldr	r3, [sp, #96]	; 0x60
   25d00:	cmp	r3, #0
   25d04:	ble	25d38 <__assert_fail@plt+0x147e0>
   25d08:	ldr	r2, [sp, #56]	; 0x38
   25d0c:	ldr	r1, [sp, #468]	; 0x1d4
   25d10:	add	r2, r3, r2
   25d14:	ldr	r3, [sp, #468]	; 0x1d4
   25d18:	add	r2, r1, r2, lsl #3
   25d1c:	add	r3, r3, r9
   25d20:	mvn	r1, #0
   25d24:	str	r1, [r3]
   25d28:	str	r1, [r3, #4]
   25d2c:	add	r3, r3, #8
   25d30:	cmp	r3, r2
   25d34:	bne	25d24 <__assert_fail@plt+0x147cc>
   25d38:	ldr	r3, [sp, #28]
   25d3c:	ldr	r3, [r3, #132]	; 0x84
   25d40:	cmp	r3, #0
   25d44:	beq	24a8c <__assert_fail@plt+0x13534>
   25d48:	ldr	r0, [sp, #468]	; 0x1d4
   25d4c:	mov	ip, #0
   25d50:	mov	lr, r0
   25d54:	b	25d8c <__assert_fail@plt+0x14834>
   25d58:	ldr	r1, [r3]
   25d5c:	cmp	ip, r1
   25d60:	add	r4, r1, #1
   25d64:	mov	ip, r2
   25d68:	beq	25d84 <__assert_fail@plt+0x1482c>
   25d6c:	ldr	r2, [lr, r4, lsl #3]
   25d70:	str	r2, [r0, #8]
   25d74:	ldr	r2, [r3]
   25d78:	add	r2, lr, r2, lsl #3
   25d7c:	ldr	r2, [r2, #12]
   25d80:	str	r2, [r0, #12]
   25d84:	add	r3, r3, #4
   25d88:	add	r0, r0, #8
   25d8c:	ldr	r1, [sp, #56]	; 0x38
   25d90:	add	r2, ip, #1
   25d94:	cmp	r2, r1
   25d98:	bne	25d58 <__assert_fail@plt+0x14800>
   25d9c:	b	24a8c <__assert_fail@plt+0x13534>
   25da0:	ldr	r1, [r3, #-4]
   25da4:	cmn	r1, #1
   25da8:	beq	25ddc <__assert_fail@plt+0x14884>
   25dac:	cmp	r1, r5
   25db0:	moveq	r1, lr
   25db4:	ldrne	r1, [r4, r1, lsl #2]
   25db8:	str	r1, [r3, #-4]
   25dbc:	ldr	ip, [r2, #4]
   25dc0:	add	r1, r1, r0
   25dc4:	cmp	r5, ip
   25dc8:	moveq	ip, lr
   25dcc:	ldrne	ip, [r4, ip, lsl #2]
   25dd0:	str	r1, [r3, #-4]
   25dd4:	add	ip, ip, r0
   25dd8:	str	ip, [r2, #4]
   25ddc:	add	r2, r2, #8
   25de0:	cmp	r2, r6
   25de4:	add	r3, r3, #8
   25de8:	bne	25da0 <__assert_fail@plt+0x14848>
   25dec:	b	25cfc <__assert_fail@plt+0x147a4>
   25df0:	mov	r2, r5
   25df4:	mov	r3, #0
   25df8:	b	25e0c <__assert_fail@plt+0x148b4>
   25dfc:	ldr	r1, [sp, #56]	; 0x38
   25e00:	add	r2, r2, #8
   25e04:	cmp	r1, r3
   25e08:	beq	264e0 <__assert_fail@plt+0x14f88>
   25e0c:	ldr	r1, [r5, r3, lsl #3]
   25e10:	add	r3, r3, #1
   25e14:	cmp	r1, #0
   25e18:	blt	25dfc <__assert_fail@plt+0x148a4>
   25e1c:	ldr	r1, [r2, #4]
   25e20:	cmn	r1, #1
   25e24:	bne	25dfc <__assert_fail@plt+0x148a4>
   25e28:	ldr	r3, [sl]
   25e2c:	cmp	r3, #0
   25e30:	beq	264e0 <__assert_fail@plt+0x14f88>
   25e34:	sub	r3, r3, #1
   25e38:	ldr	ip, [sl, #8]
   25e3c:	add	lr, r3, r3, lsl #1
   25e40:	str	r3, [sl]
   25e44:	add	r4, ip, lr, lsl #3
   25e48:	mov	r2, r9
   25e4c:	ldr	r1, [r4, #8]
   25e50:	mov	r0, r5
   25e54:	ldr	r7, [ip, lr, lsl #3]
   25e58:	bl	11264 <memcpy@plt>
   25e5c:	ldr	r1, [r4, #8]
   25e60:	mov	r2, r9
   25e64:	add	r1, r1, r9
   25e68:	mov	r0, r8
   25e6c:	bl	11264 <memcpy@plt>
   25e70:	ldr	r0, [sp, #124]	; 0x7c
   25e74:	bl	13c04 <__assert_fail@plt+0x26ac>
   25e78:	ldr	r0, [r4, #8]
   25e7c:	bl	13c04 <__assert_fail@plt+0x26ac>
   25e80:	add	r3, r4, #12
   25e84:	ldr	fp, [r4, #4]
   25e88:	ldm	r3, {r0, r1, r2}
   25e8c:	ldr	r3, [sp, #16]
   25e90:	str	fp, [sp, #24]
   25e94:	lsl	r6, fp, #3
   25e98:	stm	r3, {r0, r1, r2}
   25e9c:	b	252cc <__assert_fail@plt+0x13d74>
   25ea0:	ldrb	r1, [r3, #6]
   25ea4:	tst	r1, #16
   25ea8:	bne	260c8 <__assert_fail@plt+0x14b70>
   25eac:	cmp	r2, #4
   25eb0:	beq	26040 <__assert_fail@plt+0x14ae8>
   25eb4:	ldr	r0, [sp, #144]	; 0x90
   25eb8:	sub	r1, r2, #1
   25ebc:	ldrb	r2, [r0, r7]
   25ec0:	cmp	r1, #6
   25ec4:	ldrls	pc, [pc, r1, lsl #2]
   25ec8:	b	25b70 <__assert_fail@plt+0x14618>
   25ecc:	andeq	r6, r2, r0, lsr r0
   25ed0:	andeq	r5, r2, r0, ror fp
   25ed4:	andeq	r6, r2, r0, lsl r0
   25ed8:	andeq	r5, r2, r0, ror fp
   25edc:	strdeq	r5, [r2], -r0
   25ee0:	andeq	r5, r2, r0, ror fp
   25ee4:	andeq	r5, r2, r8, ror #29
   25ee8:	tst	r2, #128	; 0x80
   25eec:	bne	25b70 <__assert_fail@plt+0x14618>
   25ef0:	cmp	r2, #10
   25ef4:	beq	26168 <__assert_fail@plt+0x14c10>
   25ef8:	cmp	r2, #0
   25efc:	bne	25f10 <__assert_fail@plt+0x149b8>
   25f00:	ldr	r2, [sp, #224]	; 0xe0
   25f04:	ldr	r2, [r2, #128]	; 0x80
   25f08:	tst	r2, #128	; 0x80
   25f0c:	bne	25b70 <__assert_fail@plt+0x14618>
   25f10:	ldr	r6, [r3, #4]
   25f14:	ldr	r3, [pc, #-2536]	; 25534 <__assert_fail@plt+0x13fdc>
   25f18:	tst	r6, r3
   25f1c:	beq	25f70 <__assert_fail@plt+0x14a18>
   25f20:	ldr	r2, [sp, #228]	; 0xe4
   25f24:	mov	r1, r7
   25f28:	add	r0, sp, #140	; 0x8c
   25f2c:	bl	1906c <__assert_fail@plt+0x7b14>
   25f30:	ldr	r3, [pc, #-2560]	; 25538 <__assert_fail@plt+0x13fe0>
   25f34:	and	r3, r3, r6, lsr #8
   25f38:	tst	r3, #4
   25f3c:	beq	26154 <__assert_fail@plt+0x14bfc>
   25f40:	tst	r0, #1
   25f44:	beq	25b70 <__assert_fail@plt+0x14618>
   25f48:	tst	r3, #8
   25f4c:	bne	25b70 <__assert_fail@plt+0x14618>
   25f50:	tst	r3, #32
   25f54:	beq	25f60 <__assert_fail@plt+0x14a08>
   25f58:	tst	r0, #2
   25f5c:	beq	25b70 <__assert_fail@plt+0x14618>
   25f60:	tst	r3, #128	; 0x80
   25f64:	beq	25f70 <__assert_fail@plt+0x14a18>
   25f68:	tst	r0, #8
   25f6c:	beq	25b70 <__assert_fail@plt+0x14618>
   25f70:	ldr	r3, [r4, #12]
   25f74:	ldr	r2, [sp, #24]
   25f78:	add	r7, r7, #1
   25f7c:	ldr	fp, [r3, r2, lsl #2]
   25f80:	cmp	sl, #0
   25f84:	beq	26004 <__assert_fail@plt+0x14aac>
   25f88:	ldr	r3, [sp, #232]	; 0xe8
   25f8c:	cmp	r7, r3
   25f90:	bgt	25b78 <__assert_fail@plt+0x14620>
   25f94:	ldr	r3, [sp, #240]	; 0xf0
   25f98:	ldr	r3, [r3, r7, lsl #2]
   25f9c:	cmp	r3, #0
   25fa0:	beq	25b78 <__assert_fail@plt+0x14620>
   25fa4:	ldr	r2, [r3, #8]
   25fa8:	cmp	r2, #0
   25fac:	ble	25b78 <__assert_fail@plt+0x14620>
   25fb0:	ldr	ip, [r3, #12]
   25fb4:	sub	r2, r2, #1
   25fb8:	mov	r0, #0
   25fbc:	cmp	r0, r2
   25fc0:	bcs	25ff8 <__assert_fail@plt+0x14aa0>
   25fc4:	add	r3, r0, r2
   25fc8:	lsr	r3, r3, #1
   25fcc:	b	25fe4 <__assert_fail@plt+0x14a8c>
   25fd0:	add	r1, r3, r0
   25fd4:	cmp	r3, r0
   25fd8:	mov	r2, r3
   25fdc:	lsr	r3, r1, #1
   25fe0:	bls	25ff8 <__assert_fail@plt+0x14aa0>
   25fe4:	ldr	r1, [ip, r3, lsl #2]
   25fe8:	cmp	r1, fp
   25fec:	bge	25fd0 <__assert_fail@plt+0x14a78>
   25ff0:	add	r0, r3, #1
   25ff4:	b	25fbc <__assert_fail@plt+0x14a64>
   25ff8:	ldr	r3, [ip, r0, lsl #2]
   25ffc:	cmp	r3, fp
   26000:	bne	25b78 <__assert_fail@plt+0x14620>
   26004:	mov	r3, #0
   26008:	str	r3, [sp, #120]	; 0x78
   2600c:	b	25b60 <__assert_fail@plt+0x14608>
   26010:	ldr	r1, [r3]
   26014:	asr	r0, r2, #5
   26018:	and	r2, r2, #31
   2601c:	ldr	r1, [r1, r0, lsl #2]
   26020:	lsr	r2, r1, r2
   26024:	tst	r2, #1
   26028:	bne	25f10 <__assert_fail@plt+0x149b8>
   2602c:	b	25b70 <__assert_fail@plt+0x14618>
   26030:	ldrb	r1, [r3]
   26034:	cmp	r1, r2
   26038:	bne	25b70 <__assert_fail@plt+0x14618>
   2603c:	b	25f10 <__assert_fail@plt+0x149b8>
   26040:	ldr	r3, [r3]
   26044:	ldr	r2, [sp, #56]	; 0x38
   26048:	add	r3, r3, #1
   2604c:	cmp	r2, r3
   26050:	ble	26148 <__assert_fail@plt+0x14bf0>
   26054:	add	r2, r5, r3, lsl #3
   26058:	ldr	r0, [r5, r3, lsl #3]
   2605c:	ldr	r2, [r2, #4]
   26060:	cmp	sl, #0
   26064:	sub	r3, r2, r0
   26068:	beq	260f4 <__assert_fail@plt+0x14b9c>
   2606c:	cmn	r0, #1
   26070:	beq	25b78 <__assert_fail@plt+0x14620>
   26074:	cmn	r2, #1
   26078:	beq	25b78 <__assert_fail@plt+0x14620>
   2607c:	cmp	r3, #0
   26080:	beq	260fc <__assert_fail@plt+0x14ba4>
   26084:	ldr	r2, [sp, #168]	; 0xa8
   26088:	ldr	r1, [sp, #144]	; 0x90
   2608c:	sub	r2, r2, r7
   26090:	cmp	r3, r2
   26094:	bgt	25b78 <__assert_fail@plt+0x14620>
   26098:	add	r0, r1, r0
   2609c:	mov	r2, r3
   260a0:	add	r1, r1, r7
   260a4:	str	r3, [sp, #24]
   260a8:	bl	112b8 <memcmp@plt>
   260ac:	ldr	r3, [sp, #24]
   260b0:	cmp	r0, #0
   260b4:	bne	25b78 <__assert_fail@plt+0x14620>
   260b8:	ldr	r2, [r4, #12]
   260bc:	add	r7, r7, r3
   260c0:	ldr	fp, [r2, fp, lsl #2]
   260c4:	b	25f80 <__assert_fail@plt+0x14a28>
   260c8:	add	r3, sp, #140	; 0x8c
   260cc:	str	r7, [sp]
   260d0:	mov	r2, fp
   260d4:	add	r1, r4, #128	; 0x80
   260d8:	bl	1ab48 <__assert_fail@plt+0x95f0>
   260dc:	subs	r3, r0, #0
   260e0:	bne	260b8 <__assert_fail@plt+0x14b60>
   260e4:	ldr	r3, [r4]
   260e8:	add	r3, r3, r6
   260ec:	ldrb	r2, [r3, #4]
   260f0:	b	25eb4 <__assert_fail@plt+0x1495c>
   260f4:	cmp	r3, #0
   260f8:	bne	260b8 <__assert_fail@plt+0x14b60>
   260fc:	mov	r1, fp
   26100:	ldr	r0, [sp, #16]
   26104:	bl	189a4 <__assert_fail@plt+0x744c>
   26108:	cmp	r0, #0
   2610c:	beq	26210 <__assert_fail@plt+0x14cb8>
   26110:	add	fp, fp, fp, lsl #1
   26114:	ldr	r3, [r4, #20]
   26118:	ldr	r1, [sp, #240]	; 0xf0
   2611c:	add	r3, r3, fp, lsl #2
   26120:	ldr	r2, [r3, #8]
   26124:	ldr	r3, [r1, r7, lsl #2]
   26128:	ldr	fp, [r2]
   2612c:	add	r1, r3, #12
   26130:	mov	r2, fp
   26134:	ldr	r0, [r3, #8]
   26138:	bl	18ac0 <__assert_fail@plt+0x7568>
   2613c:	cmp	r0, #0
   26140:	beq	260e4 <__assert_fail@plt+0x14b8c>
   26144:	b	25b60 <__assert_fail@plt+0x14608>
   26148:	cmp	sl, #0
   2614c:	bne	25b78 <__assert_fail@plt+0x14620>
   26150:	b	260fc <__assert_fail@plt+0x14ba4>
   26154:	tst	r3, #8
   26158:	beq	25f50 <__assert_fail@plt+0x149f8>
   2615c:	tst	r0, #1
   26160:	beq	25f50 <__assert_fail@plt+0x149f8>
   26164:	b	25b70 <__assert_fail@plt+0x14618>
   26168:	ldr	r2, [sp, #224]	; 0xe0
   2616c:	ldr	r2, [r2, #128]	; 0x80
   26170:	tst	r2, #64	; 0x40
   26174:	bne	25f10 <__assert_fail@plt+0x149b8>
   26178:	b	25b70 <__assert_fail@plt+0x14618>
   2617c:	mov	r2, fp
   26180:	add	r1, sp, #124	; 0x7c
   26184:	ldr	r0, [sp, #120]	; 0x78
   26188:	bl	18ac0 <__assert_fail@plt+0x7568>
   2618c:	cmp	r0, #0
   26190:	bne	26458 <__assert_fail@plt+0x14f00>
   26194:	cmp	sl, #0
   26198:	beq	25b60 <__assert_fail@plt+0x14608>
   2619c:	ldr	r6, [sl]
   261a0:	ldr	r3, [sl, #4]
   261a4:	add	r2, r6, #1
   261a8:	cmp	r2, r3
   261ac:	str	r2, [sl]
   261b0:	ldrne	r2, [sl, #8]
   261b4:	beq	26290 <__assert_fail@plt+0x14d38>
   261b8:	add	r3, r6, r6, lsl #1
   261bc:	ldr	r0, [sp, #32]
   261c0:	add	r6, r2, r3, lsl #3
   261c4:	str	r7, [r2, r3, lsl #3]
   261c8:	str	r4, [r6, #4]
   261cc:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   261d0:	cmp	r0, #0
   261d4:	str	r0, [r6, #8]
   261d8:	beq	26210 <__assert_fail@plt+0x14cb8>
   261dc:	mov	r2, r9
   261e0:	mov	r1, r5
   261e4:	bl	11264 <memcpy@plt>
   261e8:	ldr	r0, [r6, #8]
   261ec:	mov	r2, r9
   261f0:	mov	r1, r8
   261f4:	add	r0, r0, r9
   261f8:	bl	11264 <memcpy@plt>
   261fc:	ldr	r1, [sp, #16]
   26200:	add	r0, r6, #12
   26204:	bl	18d64 <__assert_fail@plt+0x780c>
   26208:	cmp	r0, #0
   2620c:	beq	25b60 <__assert_fail@plt+0x14608>
   26210:	ldr	r0, [sp, #124]	; 0x7c
   26214:	ldr	r8, [sp, #12]
   26218:	bl	13c04 <__assert_fail@plt+0x26ac>
   2621c:	ldr	r0, [sp, #284]	; 0x11c
   26220:	cmp	r0, r8
   26224:	beq	2622c <__assert_fail@plt+0x14cd4>
   26228:	bl	13c04 <__assert_fail@plt+0x26ac>
   2622c:	mov	r4, #0
   26230:	mov	r3, #16
   26234:	cmp	sl, #0
   26238:	str	r8, [sp, #284]	; 0x11c
   2623c:	str	r4, [sp, #276]	; 0x114
   26240:	str	r3, [sp, #280]	; 0x118
   26244:	beq	26374 <__assert_fail@plt+0x14e1c>
   26248:	ldr	r7, [sl]
   2624c:	ldr	r6, [sl, #8]
   26250:	cmp	r7, r4
   26254:	ble	2627c <__assert_fail@plt+0x14d24>
   26258:	mov	r5, r6
   2625c:	ldr	r0, [r5, #20]
   26260:	bl	13c04 <__assert_fail@plt+0x26ac>
   26264:	add	r4, r4, #1
   26268:	ldr	r0, [r5, #8]
   2626c:	bl	13c04 <__assert_fail@plt+0x26ac>
   26270:	cmp	r7, r4
   26274:	add	r5, r5, #24
   26278:	bne	2625c <__assert_fail@plt+0x14d04>
   2627c:	mov	r0, r6
   26280:	bl	13c04 <__assert_fail@plt+0x26ac>
   26284:	mov	r3, #12
   26288:	str	r3, [sp, #48]	; 0x30
   2628c:	b	256d4 <__assert_fail@plt+0x1417c>
   26290:	lsl	r3, r2, #1
   26294:	add	r2, r3, r2
   26298:	ldr	r0, [sl, #8]
   2629c:	lsl	r1, r2, #4
   262a0:	str	r3, [sp, #24]
   262a4:	bl	2b678 <__assert_fail@plt+0x1a120>
   262a8:	subs	r2, r0, #0
   262ac:	beq	26210 <__assert_fail@plt+0x14cb8>
   262b0:	ldr	r3, [sp, #24]
   262b4:	str	r2, [sl, #8]
   262b8:	str	r3, [sl, #4]
   262bc:	b	261b8 <__assert_fail@plt+0x14c60>
   262c0:	ldr	r3, [r1]
   262c4:	ldr	r0, [sp, #56]	; 0x38
   262c8:	add	r3, r3, #1
   262cc:	cmp	r0, r3
   262d0:	ble	25258 <__assert_fail@plt+0x13d00>
   262d4:	ldr	r0, [r5, r3, lsl #3]
   262d8:	add	r2, r5, r3, lsl #3
   262dc:	cmp	r0, r7
   262e0:	blt	26308 <__assert_fail@plt+0x14db0>
   262e4:	ldrb	r1, [r1, #6]
   262e8:	tst	r1, #8
   262ec:	beq	262fc <__assert_fail@plt+0x14da4>
   262f0:	ldr	r3, [r8, r3, lsl #3]
   262f4:	cmn	r3, #1
   262f8:	bne	265a0 <__assert_fail@plt+0x15048>
   262fc:	str	r7, [r2, #4]
   26300:	ldr	r2, [r5, #4]
   26304:	b	25258 <__assert_fail@plt+0x13d00>
   26308:	str	r7, [r2, #4]
   2630c:	mov	r1, r5
   26310:	mov	r2, r9
   26314:	mov	r0, r8
   26318:	bl	11264 <memcpy@plt>
   2631c:	ldr	r2, [r5, #4]
   26320:	b	25258 <__assert_fail@plt+0x13d00>
   26324:	ldr	sl, [sp, #16]
   26328:	ldr	fp, [sp, #12]
   2632c:	mov	r0, sl
   26330:	bl	13c04 <__assert_fail@plt+0x26ac>
   26334:	mov	r0, fp
   26338:	bl	13c04 <__assert_fail@plt+0x26ac>
   2633c:	mov	r0, #0
   26340:	bl	13c04 <__assert_fail@plt+0x26ac>
   26344:	mov	r7, #12
   26348:	b	25468 <__assert_fail@plt+0x13f10>
   2634c:	sub	r2, r2, r4
   26350:	ldr	r1, [r5, #12]
   26354:	lsl	r2, r2, #2
   26358:	add	r0, r0, sl, lsl #2
   2635c:	add	r1, r1, r4, lsl #2
   26360:	bl	11264 <memcpy@plt>
   26364:	ldr	r2, [r5, #8]
   26368:	sub	r4, r2, r4
   2636c:	add	sl, sl, r4
   26370:	b	25940 <__assert_fail@plt+0x143e8>
   26374:	mov	r3, #12
   26378:	str	r3, [sp, #48]	; 0x30
   2637c:	b	256d4 <__assert_fail@plt+0x1417c>
   26380:	ldr	r3, [sp, #44]	; 0x2c
   26384:	mov	r1, #16
   26388:	str	r1, [sp, #280]	; 0x118
   2638c:	ldr	r3, [r3]
   26390:	ldr	r1, [sp, #56]	; 0x38
   26394:	mov	ip, r3
   26398:	str	r3, [sp, #20]
   2639c:	add	r3, sp, #116	; 0x74
   263a0:	mov	r0, r3
   263a4:	str	r3, [sp, #16]
   263a8:	mov	r3, #0
   263ac:	mov	sl, r3
   263b0:	add	r8, sp, #288	; 0x120
   263b4:	mov	r2, #2
   263b8:	str	r3, [sp, #276]	; 0x114
   263bc:	str	r8, [sp, #284]	; 0x11c
   263c0:	str	r3, [sp, #128]	; 0x80
   263c4:	ldr	fp, [ip, #72]	; 0x48
   263c8:	str	r3, [sp, #136]	; 0x88
   263cc:	str	r3, [sp, #116]	; 0x74
   263d0:	str	r2, [sp, #132]	; 0x84
   263d4:	str	r3, [r0, #4]
   263d8:	str	r3, [r0, #8]
   263dc:	mov	r3, #8
   263e0:	mov	r2, r8
   263e4:	add	r0, sp, #276	; 0x114
   263e8:	bl	2b750 <__assert_fail@plt+0x1a1f8>
   263ec:	cmp	r0, #0
   263f0:	bne	251e8 <__assert_fail@plt+0x13c90>
   263f4:	ldr	r0, [sp, #284]	; 0x11c
   263f8:	cmp	r0, r8
   263fc:	beq	26404 <__assert_fail@plt+0x14eac>
   26400:	bl	13c04 <__assert_fail@plt+0x26ac>
   26404:	mov	r4, #0
   26408:	mov	r3, #16
   2640c:	cmp	sl, #0
   26410:	str	r8, [sp, #284]	; 0x11c
   26414:	str	r4, [sp, #276]	; 0x114
   26418:	str	r3, [sp, #280]	; 0x118
   2641c:	beq	26374 <__assert_fail@plt+0x14e1c>
   26420:	ldr	r7, [sl]
   26424:	ldr	r6, [sl, #8]
   26428:	cmp	r7, #0
   2642c:	ble	2627c <__assert_fail@plt+0x14d24>
   26430:	mov	r5, r6
   26434:	ldr	r0, [r5, #20]
   26438:	bl	13c04 <__assert_fail@plt+0x26ac>
   2643c:	add	r4, r4, #1
   26440:	ldr	r0, [r5, #8]
   26444:	bl	13c04 <__assert_fail@plt+0x26ac>
   26448:	cmp	r7, r4
   2644c:	add	r5, r5, #24
   26450:	bne	26434 <__assert_fail@plt+0x14edc>
   26454:	b	2627c <__assert_fail@plt+0x14d24>
   26458:	mov	fp, r4
   2645c:	b	25b60 <__assert_fail@plt+0x14608>
   26460:	ldr	r0, [sp, #124]	; 0x7c
   26464:	ldr	r8, [sp, #12]
   26468:	bl	13c04 <__assert_fail@plt+0x26ac>
   2646c:	ldr	r0, [sp, #284]	; 0x11c
   26470:	cmp	r0, r8
   26474:	beq	264c8 <__assert_fail@plt+0x14f70>
   26478:	bl	13c04 <__assert_fail@plt+0x26ac>
   2647c:	ldr	r7, [sl]
   26480:	mov	r3, #16
   26484:	cmp	r7, #0
   26488:	str	r4, [sp, #276]	; 0x114
   2648c:	ldrgt	r6, [sl, #8]
   26490:	str	r8, [sp, #284]	; 0x11c
   26494:	str	r3, [sp, #280]	; 0x118
   26498:	movgt	r5, r6
   2649c:	ble	264d8 <__assert_fail@plt+0x14f80>
   264a0:	ldr	r0, [r5, #20]
   264a4:	bl	13c04 <__assert_fail@plt+0x26ac>
   264a8:	add	r4, r4, #1
   264ac:	ldr	r0, [r5, #8]
   264b0:	bl	13c04 <__assert_fail@plt+0x26ac>
   264b4:	cmp	r4, r7
   264b8:	add	r5, r5, #24
   264bc:	bne	264a0 <__assert_fail@plt+0x14f48>
   264c0:	mov	r0, r6
   264c4:	b	256c8 <__assert_fail@plt+0x14170>
   264c8:	mov	r3, #16
   264cc:	str	r4, [sp, #276]	; 0x114
   264d0:	str	r8, [sp, #284]	; 0x11c
   264d4:	str	r3, [sp, #280]	; 0x118
   264d8:	ldr	r6, [sl, #8]
   264dc:	b	264c0 <__assert_fail@plt+0x14f68>
   264e0:	ldr	r0, [sp, #124]	; 0x7c
   264e4:	ldr	r8, [sp, #12]
   264e8:	bl	13c04 <__assert_fail@plt+0x26ac>
   264ec:	ldr	r0, [sp, #284]	; 0x11c
   264f0:	cmp	r0, r8
   264f4:	bne	25c38 <__assert_fail@plt+0x146e0>
   264f8:	b	25c3c <__assert_fail@plt+0x146e4>
   264fc:	ldr	r0, [sp, #124]	; 0x7c
   26500:	ldr	r8, [sp, #12]
   26504:	bl	13c04 <__assert_fail@plt+0x26ac>
   26508:	ldr	r0, [sp, #284]	; 0x11c
   2650c:	cmp	r0, r8
   26510:	beq	26518 <__assert_fail@plt+0x14fc0>
   26514:	bl	13c04 <__assert_fail@plt+0x26ac>
   26518:	mov	r4, #0
   2651c:	mov	r3, #16
   26520:	cmp	sl, #0
   26524:	str	r8, [sp, #284]	; 0x11c
   26528:	str	r4, [sp, #276]	; 0x114
   2652c:	str	r3, [sp, #280]	; 0x118
   26530:	beq	25c94 <__assert_fail@plt+0x1473c>
   26534:	ldr	r6, [sl]
   26538:	ldr	r7, [sl, #8]
   2653c:	cmp	r6, r4
   26540:	ble	25c8c <__assert_fail@plt+0x14734>
   26544:	mov	r5, r7
   26548:	ldr	r0, [r5, #20]
   2654c:	bl	13c04 <__assert_fail@plt+0x26ac>
   26550:	add	r4, r4, #1
   26554:	ldr	r0, [r5, #8]
   26558:	bl	13c04 <__assert_fail@plt+0x26ac>
   2655c:	cmp	r4, r6
   26560:	add	r5, r5, #24
   26564:	bne	26548 <__assert_fail@plt+0x14ff0>
   26568:	b	25c8c <__assert_fail@plt+0x14734>
   2656c:	add	sl, sp, #128	; 0x80
   26570:	b	263dc <__assert_fail@plt+0x14e84>
   26574:	ldr	r3, [r0, fp, lsl #3]
   26578:	ldr	r1, [sp, #56]	; 0x38
   2657c:	add	r3, r3, #1
   26580:	cmp	r1, r3
   26584:	ble	25258 <__assert_fail@plt+0x13d00>
   26588:	add	r2, r5, r3, lsl #3
   2658c:	str	r7, [r5, r3, lsl #3]
   26590:	mvn	r3, #0
   26594:	str	r3, [r2, #4]
   26598:	ldr	r2, [r5, #4]
   2659c:	b	25258 <__assert_fail@plt+0x13d00>
   265a0:	mov	r2, r9
   265a4:	mov	r1, r8
   265a8:	mov	r0, r5
   265ac:	bl	11264 <memcpy@plt>
   265b0:	ldr	r2, [r5, #4]
   265b4:	b	25258 <__assert_fail@plt+0x13d00>
   265b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   265bc:	sub	sp, sp, #12
   265c0:	ldrb	ip, [r1, #28]
   265c4:	ldr	r4, [r2, #4]
   265c8:	ldr	r5, [r1]
   265cc:	adds	r3, r4, #0
   265d0:	movne	r3, #1
   265d4:	ands	r3, r3, ip, lsr #4
   265d8:	beq	265f8 <__assert_fail@plt+0x150a0>
   265dc:	ldr	r3, [r2, #20]
   265e0:	cmp	r3, #31
   265e4:	bgt	26840 <__assert_fail@plt+0x152e8>
   265e8:	ldr	r1, [r5, #80]	; 0x50
   265ec:	lsr	r3, r1, r3
   265f0:	tst	r3, #1
   265f4:	beq	26840 <__assert_fail@plt+0x152e8>
   265f8:	mov	r8, r2
   265fc:	ldr	r2, [r5, #64]	; 0x40
   26600:	mov	sl, #0
   26604:	cmp	r2, #31
   26608:	mov	r9, r0
   2660c:	mov	r6, sp
   26610:	str	sl, [sp, #4]
   26614:	str	sl, [sp]
   26618:	beq	26864 <__assert_fail@plt+0x1530c>
   2661c:	lsl	r3, r2, #5
   26620:	ldr	r7, [r5, #56]	; 0x38
   26624:	add	r2, r2, #1
   26628:	add	ip, r3, #4
   2662c:	mov	r1, #8
   26630:	add	r3, r7, r3
   26634:	strb	r1, [sp, #4]
   26638:	ldm	r6, {r0, r1}
   2663c:	add	lr, r3, #24
   26640:	str	r2, [r5, #64]	; 0x40
   26644:	mov	r2, #0
   26648:	str	r2, [r3, #4]
   2664c:	str	r2, [r3, #8]
   26650:	str	r2, [r3, #12]
   26654:	stm	lr, {r0, r1}
   26658:	ldrb	r1, [r3, #30]
   2665c:	add	r7, r7, ip
   26660:	mvn	r0, #0
   26664:	and	r1, r1, #243	; 0xf3
   26668:	str	r2, [r3, #16]
   2666c:	str	r2, [r3, #20]
   26670:	strb	r1, [r3, #30]
   26674:	str	r0, [r3, #32]
   26678:	ldr	r2, [r5, #64]	; 0x40
   2667c:	mov	fp, #0
   26680:	cmp	r2, #31
   26684:	str	fp, [sp]
   26688:	str	fp, [r6, #4]
   2668c:	beq	26890 <__assert_fail@plt+0x15338>
   26690:	lsl	r3, r2, #5
   26694:	ldr	sl, [r5, #56]	; 0x38
   26698:	add	r2, r2, #1
   2669c:	add	ip, r3, #4
   266a0:	mov	r1, #9
   266a4:	add	r3, sl, r3
   266a8:	strb	r1, [sp, #4]
   266ac:	ldm	r6, {r0, r1}
   266b0:	add	lr, r3, #24
   266b4:	str	r2, [r5, #64]	; 0x40
   266b8:	mov	r2, #0
   266bc:	str	r2, [r3, #4]
   266c0:	str	r2, [r3, #8]
   266c4:	str	r2, [r3, #12]
   266c8:	stm	lr, {r0, r1}
   266cc:	ldrb	r1, [r3, #30]
   266d0:	add	sl, sl, ip
   266d4:	mvn	r0, #0
   266d8:	and	r1, r1, #243	; 0xf3
   266dc:	str	r2, [r3, #16]
   266e0:	str	r2, [r3, #20]
   266e4:	strb	r1, [r3, #30]
   266e8:	str	r0, [r3, #32]
   266ec:	cmp	r4, #0
   266f0:	moveq	fp, sl
   266f4:	beq	26770 <__assert_fail@plt+0x15218>
   266f8:	ldr	r2, [r5, #64]	; 0x40
   266fc:	mov	fp, #0
   26700:	cmp	r2, #31
   26704:	str	fp, [sp]
   26708:	str	fp, [r6, #4]
   2670c:	beq	268e8 <__assert_fail@plt+0x15390>
   26710:	lsl	r3, r2, #5
   26714:	ldr	ip, [r5, #56]	; 0x38
   26718:	add	r2, r2, #1
   2671c:	add	fp, r3, #4
   26720:	mov	r1, #16
   26724:	add	r3, ip, r3
   26728:	strb	r1, [sp, #4]
   2672c:	ldm	r6, {r0, r1}
   26730:	str	r2, [r5, #64]	; 0x40
   26734:	add	lr, r3, #24
   26738:	mov	r2, #0
   2673c:	add	fp, ip, fp
   26740:	stmib	r3, {r2, r4, sl}
   26744:	cmp	sl, r2
   26748:	stm	lr, {r0, r1}
   2674c:	ldrb	r1, [r3, #30]
   26750:	mvn	r0, #0
   26754:	str	r2, [r3, #16]
   26758:	and	r1, r1, #243	; 0xf3
   2675c:	str	r2, [r3, #20]
   26760:	strb	r1, [r3, #30]
   26764:	str	r0, [r3, #32]
   26768:	str	fp, [r4]
   2676c:	strne	fp, [sl]
   26770:	ldr	r2, [r5, #64]	; 0x40
   26774:	mov	r4, #0
   26778:	cmp	r2, #31
   2677c:	str	r4, [sp]
   26780:	str	r4, [r6, #4]
   26784:	beq	268bc <__assert_fail@plt+0x15364>
   26788:	lsl	r3, r2, #5
   2678c:	ldr	ip, [r5, #56]	; 0x38
   26790:	add	r2, r2, #1
   26794:	add	r4, r3, #4
   26798:	mov	r1, #16
   2679c:	add	r3, ip, r3
   267a0:	strb	r1, [sp, #4]
   267a4:	ldm	r6, {r0, r1}
   267a8:	str	r2, [r5, #64]	; 0x40
   267ac:	add	r2, r3, #24
   267b0:	mov	lr, #0
   267b4:	str	r7, [r3, #8]
   267b8:	str	fp, [r3, #12]
   267bc:	str	lr, [r3, #4]
   267c0:	stm	r2, {r0, r1}
   267c4:	ldrb	r2, [r3, #30]
   267c8:	cmp	r7, lr
   267cc:	mvn	r1, #0
   267d0:	and	r2, r2, #243	; 0xf3
   267d4:	add	r4, ip, r4
   267d8:	str	lr, [r3, #16]
   267dc:	str	lr, [r3, #20]
   267e0:	strb	r2, [r3, #30]
   267e4:	str	r1, [r3, #32]
   267e8:	strne	r4, [r7]
   267ec:	cmp	fp, #0
   267f0:	beq	2684c <__assert_fail@plt+0x152f4>
   267f4:	cmp	r4, #0
   267f8:	str	r4, [fp]
   267fc:	beq	2684c <__assert_fail@plt+0x152f4>
   26800:	cmp	sl, #0
   26804:	cmpne	r7, #0
   26808:	beq	2684c <__assert_fail@plt+0x152f4>
   2680c:	ldr	r3, [r8, #20]
   26810:	str	r3, [sl, #20]
   26814:	str	r3, [r7, #20]
   26818:	ldrb	r3, [r8, #26]
   2681c:	ldrb	r2, [sl, #26]
   26820:	and	r3, r3, #8
   26824:	bic	r2, r2, #8
   26828:	orr	r2, r3, r2
   2682c:	strb	r2, [sl, #26]
   26830:	ldrb	r2, [r7, #26]
   26834:	bic	r2, r2, #8
   26838:	orr	r3, r3, r2
   2683c:	strb	r3, [r7, #26]
   26840:	mov	r0, r4
   26844:	add	sp, sp, #12
   26848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2684c:	mov	r3, #12
   26850:	mov	r4, #0
   26854:	mov	r0, r4
   26858:	str	r3, [r9]
   2685c:	add	sp, sp, #12
   26860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26864:	mov	r0, #996	; 0x3e4
   26868:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   2686c:	subs	r7, r0, #0
   26870:	beq	26678 <__assert_fail@plt+0x15120>
   26874:	ldr	r1, [r5, #56]	; 0x38
   26878:	mov	r3, sl
   2687c:	str	r1, [r7]
   26880:	mov	r2, #1
   26884:	mov	ip, #4
   26888:	str	r7, [r5, #56]	; 0x38
   2688c:	b	2662c <__assert_fail@plt+0x150d4>
   26890:	mov	r0, #996	; 0x3e4
   26894:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   26898:	subs	sl, r0, #0
   2689c:	beq	266ec <__assert_fail@plt+0x15194>
   268a0:	ldr	r1, [r5, #56]	; 0x38
   268a4:	mov	r3, fp
   268a8:	str	r1, [sl]
   268ac:	mov	ip, #4
   268b0:	mov	r2, #1
   268b4:	str	sl, [r5, #56]	; 0x38
   268b8:	b	266a0 <__assert_fail@plt+0x15148>
   268bc:	mov	r0, #996	; 0x3e4
   268c0:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   268c4:	subs	ip, r0, #0
   268c8:	beq	2684c <__assert_fail@plt+0x152f4>
   268cc:	ldr	r1, [r5, #56]	; 0x38
   268d0:	mov	r3, r4
   268d4:	str	r1, [ip]
   268d8:	mov	r4, #4
   268dc:	mov	r2, #1
   268e0:	str	ip, [r5, #56]	; 0x38
   268e4:	b	26798 <__assert_fail@plt+0x15240>
   268e8:	mov	r0, #996	; 0x3e4
   268ec:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   268f0:	subs	ip, r0, #0
   268f4:	beq	26914 <__assert_fail@plt+0x153bc>
   268f8:	ldr	r1, [r5, #56]	; 0x38
   268fc:	mov	r3, fp
   26900:	str	r1, [ip]
   26904:	mov	r2, #1
   26908:	mov	fp, #4
   2690c:	str	ip, [r5, #56]	; 0x38
   26910:	b	26720 <__assert_fail@plt+0x151c8>
   26914:	mov	fp, ip
   26918:	b	26770 <__assert_fail@plt+0x15218>
   2691c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26920:	mov	r8, r0
   26924:	ldrb	r0, [r0, #28]
   26928:	ldr	ip, [r8, #4]
   2692c:	sub	sp, sp, #148	; 0x94
   26930:	mov	r7, r3
   26934:	and	r0, r0, #144	; 0x90
   26938:	mov	r3, #0
   2693c:	cmp	ip, #159	; 0x9f
   26940:	str	r7, [r8, #12]
   26944:	str	r1, [sp, #12]
   26948:	mov	r5, r2
   2694c:	strb	r0, [r8, #28]
   26950:	str	r3, [r8, #8]
   26954:	str	r3, [sp, #36]	; 0x24
   26958:	str	r3, [r8, #24]
   2695c:	ldr	r4, [r8]
   26960:	bls	27400 <__assert_fail@plt+0x15ea8>
   26964:	mov	r2, #160	; 0xa0
   26968:	str	r2, [r8, #8]
   2696c:	mov	r1, #0
   26970:	mov	r0, r4
   26974:	bl	1145c <memset@plt>
   26978:	ldr	r2, [pc, #4084]	; 27974 <__assert_fail@plt+0x1641c>
   2697c:	mov	r3, #31
   26980:	cmp	r5, r2
   26984:	str	r3, [r4, #64]	; 0x40
   26988:	bhi	26d24 <__assert_fail@plt+0x157cc>
   2698c:	add	r3, r5, #1
   26990:	str	r3, [r4, #4]
   26994:	lsl	r0, r3, #3
   26998:	str	r3, [sp, #16]
   2699c:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   269a0:	cmp	r5, #0
   269a4:	str	r0, [r4]
   269a8:	beq	2747c <__assert_fail@plt+0x15f24>
   269ac:	mov	r1, #1
   269b0:	lsl	r1, r1, #1
   269b4:	cmp	r5, r1
   269b8:	bcs	269b0 <__assert_fail@plt+0x15458>
   269bc:	sub	sl, r1, #1
   269c0:	mov	r0, #12
   269c4:	bl	2b604 <__assert_fail@plt+0x1a0ac>
   269c8:	str	sl, [r4, #68]	; 0x44
   269cc:	str	r0, [r4, #32]
   269d0:	bl	11354 <__ctype_get_mb_cur_max@plt>
   269d4:	str	r0, [r4, #92]	; 0x5c
   269d8:	mov	r0, #14
   269dc:	bl	114e0 <nl_langinfo@plt>
   269e0:	ldrb	r3, [r0]
   269e4:	and	r3, r3, #223	; 0xdf
   269e8:	cmp	r3, #85	; 0x55
   269ec:	bne	26a10 <__assert_fail@plt+0x154b8>
   269f0:	ldrb	r3, [r0, #1]
   269f4:	and	r3, r3, #223	; 0xdf
   269f8:	cmp	r3, #84	; 0x54
   269fc:	bne	26a10 <__assert_fail@plt+0x154b8>
   26a00:	ldrb	r3, [r0, #2]
   26a04:	and	r3, r3, #223	; 0xdf
   26a08:	cmp	r3, #70	; 0x46
   26a0c:	beq	27190 <__assert_fail@plt+0x15c38>
   26a10:	ldrb	r3, [r4, #88]	; 0x58
   26a14:	ldr	r2, [r4, #92]	; 0x5c
   26a18:	bic	r3, r3, #8
   26a1c:	cmp	r2, #1
   26a20:	strb	r3, [r4, #88]	; 0x58
   26a24:	ble	26a3c <__assert_fail@plt+0x154e4>
   26a28:	uxtb	r3, r3
   26a2c:	ands	r6, r3, #4
   26a30:	beq	27118 <__assert_fail@plt+0x15bc0>
   26a34:	ldr	r3, [pc, #3900]	; 27978 <__assert_fail@plt+0x16420>
   26a38:	str	r3, [r4, #60]	; 0x3c
   26a3c:	ldr	r3, [r4]
   26a40:	cmp	r3, #0
   26a44:	beq	26d24 <__assert_fail@plt+0x157cc>
   26a48:	ldr	r3, [r4, #32]
   26a4c:	cmp	r3, #0
   26a50:	beq	26d24 <__assert_fail@plt+0x157cc>
   26a54:	ldr	r2, [pc, #3872]	; 2797c <__assert_fail@plt+0x16424>
   26a58:	mov	r3, #0
   26a5c:	ldr	r1, [pc, #3868]	; 27980 <__assert_fail@plt+0x16428>
   26a60:	cmp	r2, r3
   26a64:	str	r3, [sp, #36]	; 0x24
   26a68:	mov	r3, #1
   26a6c:	moveq	r3, r2
   26a70:	cmp	r1, #0
   26a74:	mov	r2, #1
   26a78:	moveq	r2, r1
   26a7c:	orr	r3, r3, r2
   26a80:	ands	r3, r3, #255	; 0xff
   26a84:	str	r3, [sp, #24]
   26a88:	beq	26aac <__assert_fail@plt+0x15554>
   26a8c:	mov	r1, #0
   26a90:	add	r0, r4, #136	; 0x88
   26a94:	bl	11270 <pthread_mutex_init@plt>
   26a98:	cmp	r0, #0
   26a9c:	bne	26d24 <__assert_fail@plt+0x157cc>
   26aa0:	ldr	r3, [sp, #36]	; 0x24
   26aa4:	cmp	r3, #0
   26aa8:	bne	26c30 <__assert_fail@plt+0x156d8>
   26aac:	ands	r3, r7, #4194304	; 0x400000
   26ab0:	mov	r1, #0
   26ab4:	mov	r2, #84	; 0x54
   26ab8:	add	r0, sp, #60	; 0x3c
   26abc:	moveq	fp, r1
   26ac0:	movne	fp, #1
   26ac4:	ldr	sl, [r8, #20]
   26ac8:	str	r3, [sp, #20]
   26acc:	bl	1145c <memset@plt>
   26ad0:	ldrb	r2, [r4, #88]	; 0x58
   26ad4:	ldr	ip, [sp, #12]
   26ad8:	ldr	r1, [r4, #92]	; 0x5c
   26adc:	cmp	sl, #0
   26ae0:	moveq	r3, fp
   26ae4:	orrne	r3, fp, #1
   26ae8:	lsr	r0, r2, #2
   26aec:	lsr	r2, r2, #3
   26af0:	and	r0, r0, #1
   26af4:	and	r2, r2, #1
   26af8:	cmp	r5, #0
   26afc:	str	ip, [sp, #60]	; 0x3c
   26b00:	strb	fp, [sp, #132]	; 0x84
   26b04:	strb	r3, [sp, #135]	; 0x87
   26b08:	str	sl, [sp, #124]	; 0x7c
   26b0c:	str	r5, [sp, #108]	; 0x6c
   26b10:	str	r5, [sp, #104]	; 0x68
   26b14:	str	r5, [sp, #116]	; 0x74
   26b18:	str	r5, [sp, #112]	; 0x70
   26b1c:	mov	ip, r3
   26b20:	strb	r0, [sp, #133]	; 0x85
   26b24:	strb	r2, [sp, #134]	; 0x86
   26b28:	str	r1, [sp, #140]	; 0x8c
   26b2c:	beq	26c50 <__assert_fail@plt+0x156f8>
   26b30:	ldr	r2, [sp, #16]
   26b34:	cmp	r1, #1
   26b38:	mov	sl, r2
   26b3c:	ble	26b94 <__assert_fail@plt+0x1563c>
   26b40:	lsl	fp, r2, #2
   26b44:	mov	r1, fp
   26b48:	mov	r0, #0
   26b4c:	str	r3, [sp, #28]
   26b50:	bl	2b678 <__assert_fail@plt+0x1a120>
   26b54:	subs	r2, r0, #0
   26b58:	beq	26bb0 <__assert_fail@plt+0x15658>
   26b5c:	ldr	r0, [sp, #72]	; 0x48
   26b60:	str	r2, [sp, #68]	; 0x44
   26b64:	cmp	r0, #0
   26b68:	ldr	r3, [sp, #28]
   26b6c:	ldrbeq	ip, [sp, #135]	; 0x87
   26b70:	beq	26b94 <__assert_fail@plt+0x1563c>
   26b74:	mov	r1, fp
   26b78:	str	r3, [sp, #28]
   26b7c:	bl	2b678 <__assert_fail@plt+0x1a120>
   26b80:	cmp	r0, #0
   26b84:	beq	26bb0 <__assert_fail@plt+0x15658>
   26b88:	ldrb	ip, [sp, #135]	; 0x87
   26b8c:	ldr	r3, [sp, #28]
   26b90:	str	r0, [sp, #72]	; 0x48
   26b94:	cmp	ip, #0
   26b98:	bne	273d8 <__assert_fail@plt+0x15e80>
   26b9c:	ldr	r2, [sp, #16]
   26ba0:	ldr	r1, [r4, #92]	; 0x5c
   26ba4:	str	r2, [sp, #96]	; 0x60
   26ba8:	b	26c54 <__assert_fail@plt+0x156fc>
   26bac:	ldr	r4, [sp, #16]
   26bb0:	mov	r0, #12
   26bb4:	str	r0, [sp, #36]	; 0x24
   26bb8:	ldr	r6, [r8]
   26bbc:	ldr	r0, [r6, #56]	; 0x38
   26bc0:	cmp	r0, #0
   26bc4:	beq	26bd8 <__assert_fail@plt+0x15680>
   26bc8:	ldr	r5, [r0]
   26bcc:	bl	13c04 <__assert_fail@plt+0x26ac>
   26bd0:	subs	r0, r5, #0
   26bd4:	bne	26bc8 <__assert_fail@plt+0x15670>
   26bd8:	mov	r3, #31
   26bdc:	mov	r5, #0
   26be0:	str	r3, [r6, #64]	; 0x40
   26be4:	ldr	r0, [r6, #16]
   26be8:	str	r5, [r6, #56]	; 0x38
   26bec:	str	r5, [r6, #52]	; 0x34
   26bf0:	bl	13c04 <__assert_fail@plt+0x26ac>
   26bf4:	ldr	r0, [sp, #68]	; 0x44
   26bf8:	str	r5, [r6, #16]
   26bfc:	bl	13c04 <__assert_fail@plt+0x26ac>
   26c00:	ldr	r0, [sp, #72]	; 0x48
   26c04:	bl	13c04 <__assert_fail@plt+0x26ac>
   26c08:	ldrb	r3, [sp, #135]	; 0x87
   26c0c:	cmp	r3, r5
   26c10:	beq	26c1c <__assert_fail@plt+0x156c4>
   26c14:	ldr	r0, [sp, #64]	; 0x40
   26c18:	bl	13c04 <__assert_fail@plt+0x26ac>
   26c1c:	ldr	r3, [sp, #24]
   26c20:	cmp	r3, #0
   26c24:	beq	26c30 <__assert_fail@plt+0x156d8>
   26c28:	add	r0, r4, #136	; 0x88
   26c2c:	bl	11210 <pthread_mutex_destroy@plt>
   26c30:	mov	r0, r4
   26c34:	bl	1b92c <__assert_fail@plt+0xa3d4>
   26c38:	ldr	r0, [sp, #36]	; 0x24
   26c3c:	mov	r3, #0
   26c40:	str	r3, [r8]
   26c44:	str	r3, [r8, #4]
   26c48:	add	sp, sp, #148	; 0x94
   26c4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26c50:	mov	sl, r5
   26c54:	cmp	ip, #0
   26c58:	ldrne	r6, [sp, #64]	; 0x40
   26c5c:	ldreq	r6, [sp, #12]
   26c60:	ands	r2, r7, #4194304	; 0x400000
   26c64:	cmp	r2, #0
   26c68:	str	r6, [sp, #64]	; 0x40
   26c6c:	beq	27090 <__assert_fail@plt+0x15b38>
   26c70:	cmp	r1, #1
   26c74:	ble	27bdc <__assert_fail@plt+0x16684>
   26c78:	add	r0, sp, #60	; 0x3c
   26c7c:	bl	18274 <__assert_fail@plt+0x6d1c>
   26c80:	cmp	r0, #0
   26c84:	bne	26bb4 <__assert_fail@plt+0x1565c>
   26c88:	ldr	r3, [sp, #92]	; 0x5c
   26c8c:	cmp	r5, r3
   26c90:	ble	26d38 <__assert_fail@plt+0x157e0>
   26c94:	ldr	r2, [sp, #88]	; 0x58
   26c98:	ldr	r1, [r4, #92]	; 0x5c
   26c9c:	ldr	r3, [sp, #96]	; 0x60
   26ca0:	add	r2, r2, r1
   26ca4:	cmp	r3, r2
   26ca8:	bgt	26d38 <__assert_fail@plt+0x157e0>
   26cac:	ldr	r2, [sp, #140]	; 0x8c
   26cb0:	lsl	r9, r3, #1
   26cb4:	cmp	r2, #1
   26cb8:	ble	26d00 <__assert_fail@plt+0x157a8>
   26cbc:	cmn	r9, #-1073741823	; 0xc0000001
   26cc0:	bhi	26bb0 <__assert_fail@plt+0x15658>
   26cc4:	lsl	r6, r3, #3
   26cc8:	mov	r1, r6
   26ccc:	ldr	r0, [sp, #68]	; 0x44
   26cd0:	bl	2b678 <__assert_fail@plt+0x1a120>
   26cd4:	subs	r3, r0, #0
   26cd8:	beq	26bb0 <__assert_fail@plt+0x15658>
   26cdc:	ldr	r0, [sp, #72]	; 0x48
   26ce0:	str	r3, [sp, #68]	; 0x44
   26ce4:	cmp	r0, #0
   26ce8:	beq	26d00 <__assert_fail@plt+0x157a8>
   26cec:	mov	r1, r6
   26cf0:	bl	2b678 <__assert_fail@plt+0x1a120>
   26cf4:	cmp	r0, #0
   26cf8:	beq	26bb0 <__assert_fail@plt+0x15658>
   26cfc:	str	r0, [sp, #72]	; 0x48
   26d00:	ldrb	r3, [sp, #135]	; 0x87
   26d04:	cmp	r3, #0
   26d08:	bne	270fc <__assert_fail@plt+0x15ba4>
   26d0c:	add	r0, sp, #60	; 0x3c
   26d10:	str	r9, [sp, #96]	; 0x60
   26d14:	bl	18274 <__assert_fail@plt+0x6d1c>
   26d18:	cmp	r0, #0
   26d1c:	beq	26c88 <__assert_fail@plt+0x15730>
   26d20:	b	26bb4 <__assert_fail@plt+0x1565c>
   26d24:	mov	r3, #12
   26d28:	str	r3, [sp, #36]	; 0x24
   26d2c:	b	26c30 <__assert_fail@plt+0x156d8>
   26d30:	add	r0, sp, #60	; 0x3c
   26d34:	bl	180d4 <__assert_fail@plt+0x6b7c>
   26d38:	ldr	r5, [r8]
   26d3c:	mov	r6, #0
   26d40:	str	r6, [r8, #24]
   26d44:	orr	r2, r7, #8388608	; 0x800000
   26d48:	add	r1, sp, #60	; 0x3c
   26d4c:	add	r0, sp, #40	; 0x28
   26d50:	str	r7, [r5, #128]	; 0x80
   26d54:	str	r6, [sp, #36]	; 0x24
   26d58:	bl	1ae5c <__assert_fail@plt+0x9904>
   26d5c:	ldr	ip, [sp, #100]	; 0x64
   26d60:	add	r1, sp, #36	; 0x24
   26d64:	str	r6, [sp]
   26d68:	add	r2, sp, #40	; 0x28
   26d6c:	str	r1, [sp, #4]
   26d70:	mov	r3, r7
   26d74:	mov	r1, r8
   26d78:	add	ip, ip, r0
   26d7c:	add	r0, sp, #60	; 0x3c
   26d80:	str	ip, [sp, #100]	; 0x64
   26d84:	bl	21808 <__assert_fail@plt+0x102b0>
   26d88:	ldr	r6, [sp, #36]	; 0x24
   26d8c:	adds	r6, r6, #0
   26d90:	movne	r6, #1
   26d94:	cmp	r0, #0
   26d98:	movne	r6, #0
   26d9c:	cmp	r6, #0
   26da0:	mov	r2, r0
   26da4:	bne	2743c <__assert_fail@plt+0x15ee4>
   26da8:	add	fp, sp, #48	; 0x30
   26dac:	str	r6, [sp, #48]	; 0x30
   26db0:	str	r6, [fp, #4]
   26db4:	ldr	r3, [r5, #64]	; 0x40
   26db8:	cmp	r3, #31
   26dbc:	beq	27448 <__assert_fail@plt+0x15ef0>
   26dc0:	lsl	ip, r3, #5
   26dc4:	ldr	lr, [r5, #56]	; 0x38
   26dc8:	add	r1, r3, #1
   26dcc:	add	r3, ip, #4
   26dd0:	add	ip, lr, ip
   26dd4:	mov	r6, #0
   26dd8:	mov	r0, #2
   26ddc:	str	r1, [r5, #64]	; 0x40
   26de0:	str	r6, [ip, #4]
   26de4:	str	r6, [ip, #8]
   26de8:	str	r6, [ip, #12]
   26dec:	strb	r0, [sp, #52]	; 0x34
   26df0:	ldm	fp, {r0, r1}
   26df4:	add	r7, ip, #24
   26df8:	cmp	r2, r6
   26dfc:	stm	r7, {r0, r1}
   26e00:	ldrb	r1, [ip, #30]
   26e04:	mvn	r0, #0
   26e08:	add	r3, lr, r3
   26e0c:	and	r1, r1, #243	; 0xf3
   26e10:	str	r6, [ip, #16]
   26e14:	str	r6, [ip, #20]
   26e18:	clz	r6, r3
   26e1c:	lsr	r6, r6, #5
   26e20:	strb	r1, [ip, #30]
   26e24:	str	r0, [ip, #32]
   26e28:	moveq	r2, r6
   26e2c:	beq	26e60 <__assert_fail@plt+0x15908>
   26e30:	mov	r1, #0
   26e34:	str	fp, [sp]
   26e38:	mov	ip, #16
   26e3c:	str	r1, [fp, #4]
   26e40:	str	r1, [sp, #48]	; 0x30
   26e44:	add	r0, r5, #56	; 0x38
   26e48:	add	r1, r5, #64	; 0x40
   26e4c:	strb	ip, [sp, #52]	; 0x34
   26e50:	bl	18ca0 <__assert_fail@plt+0x7748>
   26e54:	clz	r2, r0
   26e58:	mov	r3, r0
   26e5c:	lsr	r2, r2, #5
   26e60:	orrs	r2, r6, r2
   26e64:	str	r2, [sp, #12]
   26e68:	bne	27434 <__assert_fail@plt+0x15edc>
   26e6c:	ldr	r6, [r8]
   26e70:	str	r3, [r4, #52]	; 0x34
   26e74:	ldr	r0, [r6, #4]
   26e78:	lsl	r0, r0, #2
   26e7c:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   26e80:	ldr	r3, [r6, #4]
   26e84:	str	r0, [r6, #12]
   26e88:	lsl	r0, r3, #2
   26e8c:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   26e90:	ldr	r3, [r6, #4]
   26e94:	add	r3, r3, r3, lsl #1
   26e98:	str	r0, [r6, #16]
   26e9c:	lsl	r0, r3, #2
   26ea0:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   26ea4:	ldr	r3, [r6, #4]
   26ea8:	add	r3, r3, r3, lsl #1
   26eac:	str	r0, [r6, #20]
   26eb0:	lsl	r0, r3, #2
   26eb4:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   26eb8:	ldr	r3, [r6, #12]
   26ebc:	cmp	r3, #0
   26ec0:	str	r0, [r6, #24]
   26ec4:	beq	26bb0 <__assert_fail@plt+0x15658>
   26ec8:	ldr	r3, [r6, #16]
   26ecc:	cmp	r3, #0
   26ed0:	beq	26bb0 <__assert_fail@plt+0x15658>
   26ed4:	ldr	r3, [r6, #20]
   26ed8:	cmp	r3, #0
   26edc:	beq	27310 <__assert_fail@plt+0x15db8>
   26ee0:	cmp	r0, #0
   26ee4:	beq	26bb0 <__assert_fail@plt+0x15658>
   26ee8:	ldr	r0, [r8, #24]
   26eec:	lsl	r0, r0, #2
   26ef0:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   26ef4:	cmp	r0, #0
   26ef8:	str	r0, [r6, #132]	; 0x84
   26efc:	ldreq	r5, [r6, #52]	; 0x34
   26f00:	beq	26fec <__assert_fail@plt+0x15a94>
   26f04:	ldr	r2, [r8, #24]
   26f08:	cmp	r2, #0
   26f0c:	subne	r1, r0, #4
   26f10:	ldrne	r3, [sp, #12]
   26f14:	beq	26f28 <__assert_fail@plt+0x159d0>
   26f18:	str	r3, [r1, #4]!
   26f1c:	add	r3, r3, #1
   26f20:	cmp	r3, r2
   26f24:	bne	26f18 <__assert_fail@plt+0x159c0>
   26f28:	ldr	r5, [r6, #52]	; 0x34
   26f2c:	mov	r9, #0
   26f30:	mov	r3, r5
   26f34:	ldrb	ip, [r5, #24]
   26f38:	mov	lr, #1
   26f3c:	cmp	ip, #4
   26f40:	beq	26f68 <__assert_fail@plt+0x15a10>
   26f44:	cmp	ip, #17
   26f48:	beq	271c0 <__assert_fail@plt+0x15c68>
   26f4c:	ldr	r1, [r3, #4]
   26f50:	cmp	r1, #0
   26f54:	beq	26f8c <__assert_fail@plt+0x15a34>
   26f58:	ldrb	ip, [r1, #24]
   26f5c:	mov	r3, r1
   26f60:	cmp	ip, #4
   26f64:	bne	26f44 <__assert_fail@plt+0x159ec>
   26f68:	ldr	ip, [r3, #20]
   26f6c:	ldr	r1, [r3, #4]
   26f70:	ldr	r7, [r0, ip, lsl #2]
   26f74:	cmp	r1, #0
   26f78:	str	r7, [r3, #20]
   26f7c:	ldr	ip, [r6, #80]	; 0x50
   26f80:	orr	ip, ip, lr, lsl r7
   26f84:	str	ip, [r6, #80]	; 0x50
   26f88:	bne	26f58 <__assert_fail@plt+0x15a00>
   26f8c:	mov	ip, r9
   26f90:	b	26f98 <__assert_fail@plt+0x15a40>
   26f94:	mov	r3, r1
   26f98:	ldr	r1, [r3, #8]
   26f9c:	cmp	r1, #0
   26fa0:	cmpne	r1, ip
   26fa4:	bne	26f58 <__assert_fail@plt+0x15a00>
   26fa8:	ldr	r1, [r3]
   26fac:	mov	ip, r3
   26fb0:	cmp	r1, #0
   26fb4:	bne	26f94 <__assert_fail@plt+0x15a3c>
   26fb8:	cmp	r2, #0
   26fbc:	beq	27bb4 <__assert_fail@plt+0x1665c>
   26fc0:	ldr	r3, [r0]
   26fc4:	cmp	r3, #0
   26fc8:	beq	26fdc <__assert_fail@plt+0x15a84>
   26fcc:	b	26fec <__assert_fail@plt+0x15a94>
   26fd0:	ldr	r1, [r0, r3, lsl #2]
   26fd4:	cmp	r1, r3
   26fd8:	bne	26fec <__assert_fail@plt+0x15a94>
   26fdc:	add	r3, r3, #1
   26fe0:	cmp	r3, r2
   26fe4:	bcc	26fd0 <__assert_fail@plt+0x15a78>
   26fe8:	beq	27bb4 <__assert_fail@plt+0x1665c>
   26fec:	mov	r7, #0
   26ff0:	b	26ff8 <__assert_fail@plt+0x15aa0>
   26ff4:	mov	r5, r3
   26ff8:	ldr	r3, [r5, #4]
   26ffc:	cmp	r3, #0
   27000:	bne	26ff4 <__assert_fail@plt+0x15a9c>
   27004:	ldr	r3, [r5, #8]
   27008:	cmp	r3, #0
   2700c:	bne	26ff4 <__assert_fail@plt+0x15a9c>
   27010:	mov	r2, r7
   27014:	b	27048 <__assert_fail@plt+0x15af0>
   27018:	ldr	r0, [sp, #48]	; 0x30
   2701c:	cmp	r0, #0
   27020:	bne	26bb4 <__assert_fail@plt+0x1565c>
   27024:	ldr	r1, [r5]
   27028:	cmp	r1, #0
   2702c:	beq	2723c <__assert_fail@plt+0x15ce4>
   27030:	ldr	r2, [r1, #8]
   27034:	cmp	r5, r2
   27038:	cmpne	r2, #0
   2703c:	bne	27bc8 <__assert_fail@plt+0x16670>
   27040:	ldr	r3, [r1, #4]
   27044:	mov	r5, r1
   27048:	cmp	r3, #0
   2704c:	str	r7, [sp, #48]	; 0x30
   27050:	beq	27060 <__assert_fail@plt+0x15b08>
   27054:	ldrb	r1, [r3, #24]
   27058:	cmp	r1, #17
   2705c:	beq	27210 <__assert_fail@plt+0x15cb8>
   27060:	cmp	r2, #0
   27064:	beq	27024 <__assert_fail@plt+0x15acc>
   27068:	ldrb	r3, [r2, #24]
   2706c:	cmp	r3, #17
   27070:	bne	27018 <__assert_fail@plt+0x15ac0>
   27074:	mov	r1, r8
   27078:	mov	r0, fp
   2707c:	bl	265b8 <__assert_fail@plt+0x15060>
   27080:	cmp	r0, #0
   27084:	str	r0, [r5, #8]
   27088:	strne	r5, [r0]
   2708c:	b	27018 <__assert_fail@plt+0x15ac0>
   27090:	cmp	r1, #1
   27094:	bgt	26d30 <__assert_fail@plt+0x157d8>
   27098:	cmp	r3, #0
   2709c:	beq	27bd0 <__assert_fail@plt+0x16678>
   270a0:	ldr	r2, [sp, #108]	; 0x6c
   270a4:	ldr	r3, [sp, #88]	; 0x58
   270a8:	cmp	sl, r2
   270ac:	movge	sl, r2
   270b0:	cmp	sl, r3
   270b4:	bgt	270c8 <__assert_fail@plt+0x15b70>
   270b8:	str	r3, [sp, #88]	; 0x58
   270bc:	str	r3, [sp, #92]	; 0x5c
   270c0:	b	26d38 <__assert_fail@plt+0x157e0>
   270c4:	ldr	r6, [sp, #64]	; 0x40
   270c8:	ldr	r2, [sp, #60]	; 0x3c
   270cc:	ldr	r0, [sp, #84]	; 0x54
   270d0:	add	r2, r2, r3
   270d4:	ldr	r1, [sp, #124]	; 0x7c
   270d8:	ldrb	r2, [r2, r0]
   270dc:	ldrb	r2, [r1, r2]
   270e0:	strb	r2, [r6, r3]
   270e4:	add	r3, r3, #1
   270e8:	cmp	sl, r3
   270ec:	bne	270c4 <__assert_fail@plt+0x15b6c>
   270f0:	str	r3, [sp, #88]	; 0x58
   270f4:	str	r3, [sp, #92]	; 0x5c
   270f8:	b	26d38 <__assert_fail@plt+0x157e0>
   270fc:	mov	r1, r9
   27100:	ldr	r0, [sp, #64]	; 0x40
   27104:	bl	2b678 <__assert_fail@plt+0x1a120>
   27108:	cmp	r0, #0
   2710c:	beq	26bb0 <__assert_fail@plt+0x15658>
   27110:	str	r0, [sp, #64]	; 0x40
   27114:	b	26d0c <__assert_fail@plt+0x157b4>
   27118:	mov	r1, #1
   2711c:	mov	r0, #32
   27120:	bl	2b604 <__assert_fail@plt+0x1a0ac>
   27124:	cmp	r0, #0
   27128:	str	r0, [r4, #60]	; 0x3c
   2712c:	beq	26d24 <__assert_fail@plt+0x157cc>
   27130:	mov	fp, #1
   27134:	lsl	r9, r6, #3
   27138:	mov	sl, #0
   2713c:	mov	r0, r9
   27140:	bl	11468 <btowc@plt>
   27144:	cmn	r0, #1
   27148:	ldrne	r2, [r4, #60]	; 0x3c
   2714c:	ldrne	r3, [r2, r6]
   27150:	orrne	r3, r3, fp, lsl sl
   27154:	strne	r3, [r2, r6]
   27158:	bics	r3, r9, #127	; 0x7f
   2715c:	bne	27170 <__assert_fail@plt+0x15c18>
   27160:	cmp	r0, r9
   27164:	ldrbne	r3, [r4, #88]	; 0x58
   27168:	orrne	r3, r3, #8
   2716c:	strbne	r3, [r4, #88]	; 0x58
   27170:	add	sl, sl, #1
   27174:	cmp	sl, #32
   27178:	add	r9, r9, #1
   2717c:	bne	2713c <__assert_fail@plt+0x15be4>
   27180:	add	r6, r6, #4
   27184:	cmp	r6, #32
   27188:	bne	27134 <__assert_fail@plt+0x15bdc>
   2718c:	b	26a3c <__assert_fail@plt+0x154e4>
   27190:	ldrb	r3, [r0, #3]
   27194:	ldr	r1, [pc, #2024]	; 27984 <__assert_fail@plt+0x1642c>
   27198:	cmp	r3, #45	; 0x2d
   2719c:	moveq	r3, #4
   271a0:	movne	r3, #3
   271a4:	add	r0, r0, r3
   271a8:	bl	111f8 <strcmp@plt>
   271ac:	cmp	r0, #0
   271b0:	ldrbeq	r3, [r4, #88]	; 0x58
   271b4:	orreq	r3, r3, #4
   271b8:	strbeq	r3, [r4, #88]	; 0x58
   271bc:	b	26a10 <__assert_fail@plt+0x154b8>
   271c0:	ldr	r7, [r3, #4]
   271c4:	cmp	r7, #0
   271c8:	beq	26f8c <__assert_fail@plt+0x15a34>
   271cc:	ldrb	ip, [r7, #24]
   271d0:	cmp	ip, #17
   271d4:	movne	r3, r7
   271d8:	bne	26f3c <__assert_fail@plt+0x159e4>
   271dc:	ldr	r1, [r7, #4]
   271e0:	ldr	ip, [r7, #20]
   271e4:	cmp	r1, #0
   271e8:	str	r1, [r3, #4]
   271ec:	strne	r3, [r1]
   271f0:	ldr	r7, [r3, #20]
   271f4:	cmp	ip, #31
   271f8:	ldr	r7, [r0, r7, lsl #2]
   271fc:	str	r7, [r0, ip, lsl #2]
   27200:	ldrle	r7, [r6, #80]	; 0x50
   27204:	bicle	ip, r7, lr, lsl ip
   27208:	strle	ip, [r6, #80]	; 0x50
   2720c:	b	26f50 <__assert_fail@plt+0x159f8>
   27210:	mov	r2, r3
   27214:	mov	r1, r8
   27218:	mov	r0, fp
   2721c:	bl	265b8 <__assert_fail@plt+0x15060>
   27220:	ldr	r2, [r5, #8]
   27224:	cmp	r0, #0
   27228:	str	r0, [r5, #4]
   2722c:	strne	r5, [r0]
   27230:	cmp	r2, #0
   27234:	bne	27068 <__assert_fail@plt+0x15b10>
   27238:	b	27018 <__assert_fail@plt+0x15ac0>
   2723c:	ldr	r9, [r6, #52]	; 0x34
   27240:	ldr	r7, [pc, #1856]	; 27988 <__assert_fail@plt+0x16430>
   27244:	ldr	r5, [pc, #1856]	; 2798c <__assert_fail@plt+0x16434>
   27248:	b	27250 <__assert_fail@plt+0x15cf8>
   2724c:	mov	r9, r3
   27250:	ldr	r3, [r9, #4]
   27254:	cmp	r3, #0
   27258:	bne	2724c <__assert_fail@plt+0x15cf4>
   2725c:	ldr	r3, [r9, #8]
   27260:	cmp	r3, #0
   27264:	bne	2724c <__assert_fail@plt+0x15cf4>
   27268:	b	272e4 <__assert_fail@plt+0x15d8c>
   2726c:	add	r3, r9, #20
   27270:	str	r9, [r9, #12]
   27274:	ldm	r3, {r1, r2}
   27278:	mov	r0, r6
   2727c:	bl	187f0 <__assert_fail@plt+0x7298>
   27280:	cmn	r0, #1
   27284:	str	r0, [r9, #28]
   27288:	beq	26bb0 <__assert_fail@plt+0x15658>
   2728c:	ldrb	r3, [r9, #24]
   27290:	cmp	r3, #12
   27294:	bne	272b8 <__assert_fail@plt+0x15d60>
   27298:	ldr	r3, [r6]
   2729c:	ldr	r2, [r9, #20]
   272a0:	add	r0, r3, r0, lsl #3
   272a4:	and	r2, r2, r7
   272a8:	ldr	r3, [r0, #4]
   272ac:	bic	r3, r3, r5
   272b0:	orr	r3, r3, r2, lsl #8
   272b4:	str	r3, [r0, #4]
   272b8:	ldr	r2, [r9]
   272bc:	cmp	r2, #0
   272c0:	beq	2731c <__assert_fail@plt+0x15dc4>
   272c4:	ldr	r3, [r2, #8]
   272c8:	cmp	r3, #0
   272cc:	cmpne	r9, r3
   272d0:	moveq	r9, #1
   272d4:	movne	r9, #0
   272d8:	cmp	r9, #0
   272dc:	mov	r9, r2
   272e0:	beq	2724c <__assert_fail@plt+0x15cf4>
   272e4:	ldrb	r3, [r9, #24]
   272e8:	cmp	r3, #16
   272ec:	bne	2726c <__assert_fail@plt+0x15d14>
   272f0:	ldr	r3, [r9, #4]
   272f4:	ldr	r2, [r3, #12]
   272f8:	ldr	r3, [r3, #28]
   272fc:	str	r2, [r9, #12]
   27300:	str	r3, [r9, #28]
   27304:	b	272b8 <__assert_fail@plt+0x15d60>
   27308:	ldr	r4, [sp, #12]
   2730c:	ldr	r8, [sp, #16]
   27310:	mov	r3, #12
   27314:	str	r3, [sp, #36]	; 0x24
   27318:	b	26bb8 <__assert_fail@plt+0x15660>
   2731c:	ldr	r7, [r6, #52]	; 0x34
   27320:	mov	r3, r7
   27324:	ldrb	r1, [r3, #24]
   27328:	cmp	r1, #11
   2732c:	beq	2735c <__assert_fail@plt+0x15e04>
   27330:	cmp	r1, #16
   27334:	bne	2736c <__assert_fail@plt+0x15e14>
   27338:	ldmib	r3, {r0, r1}
   2733c:	ldr	ip, [r1, #12]
   27340:	str	ip, [r0, #16]
   27344:	ldr	ip, [r3, #16]
   27348:	mov	r3, r0
   2734c:	str	ip, [r1, #16]
   27350:	ldrb	r1, [r3, #24]
   27354:	cmp	r1, #11
   27358:	bne	27330 <__assert_fail@plt+0x15dd8>
   2735c:	ldr	r1, [r3, #4]
   27360:	str	r3, [r1, #16]
   27364:	mov	r3, r1
   27368:	b	27324 <__assert_fail@plt+0x15dcc>
   2736c:	ldmib	r3, {r0, ip}
   27370:	cmp	r0, #0
   27374:	beq	27b94 <__assert_fail@plt+0x1663c>
   27378:	ldr	r1, [r3, #16]
   2737c:	cmp	ip, #0
   27380:	str	r1, [r0, #16]
   27384:	beq	27398 <__assert_fail@plt+0x15e40>
   27388:	ldr	r1, [r3, #16]
   2738c:	cmp	r0, #0
   27390:	str	r1, [ip, #16]
   27394:	beq	273a0 <__assert_fail@plt+0x15e48>
   27398:	mov	r3, r0
   2739c:	b	27324 <__assert_fail@plt+0x15dcc>
   273a0:	mov	r1, ip
   273a4:	mov	r0, r2
   273a8:	b	273c4 <__assert_fail@plt+0x15e6c>
   273ac:	ldr	r9, [r3]
   273b0:	cmp	r9, #0
   273b4:	beq	27488 <__assert_fail@plt+0x15f30>
   273b8:	ldr	r1, [r9, #8]
   273bc:	mov	r0, r3
   273c0:	mov	r3, r9
   273c4:	cmp	r0, r1
   273c8:	cmpne	r1, #0
   273cc:	beq	273ac <__assert_fail@plt+0x15e54>
   273d0:	mov	r3, r1
   273d4:	b	27324 <__assert_fail@plt+0x15dcc>
   273d8:	ldr	r1, [sp, #16]
   273dc:	ldr	r0, [sp, #64]	; 0x40
   273e0:	str	r3, [sp, #28]
   273e4:	bl	2b678 <__assert_fail@plt+0x1a120>
   273e8:	cmp	r0, #0
   273ec:	beq	26bb0 <__assert_fail@plt+0x15658>
   273f0:	ldrb	ip, [sp, #135]	; 0x87
   273f4:	str	r0, [sp, #64]	; 0x40
   273f8:	ldr	r3, [sp, #28]
   273fc:	b	26b9c <__assert_fail@plt+0x15644>
   27400:	mov	r0, r4
   27404:	mov	r1, #160	; 0xa0
   27408:	bl	2b678 <__assert_fail@plt+0x1a120>
   2740c:	subs	r4, r0, #0
   27410:	beq	27c40 <__assert_fail@plt+0x166e8>
   27414:	mov	r3, #160	; 0xa0
   27418:	str	r4, [r8]
   2741c:	str	r3, [r8, #4]
   27420:	b	26964 <__assert_fail@plt+0x1540c>
   27424:	cmp	r2, #0
   27428:	movne	r3, lr
   2742c:	movne	r6, #1
   27430:	bne	26e30 <__assert_fail@plt+0x158d8>
   27434:	mov	r3, #12
   27438:	str	r3, [sp, #36]	; 0x24
   2743c:	mov	r3, #0
   27440:	str	r3, [r4, #52]	; 0x34
   27444:	b	26bb8 <__assert_fail@plt+0x15660>
   27448:	mov	r0, #996	; 0x3e4
   2744c:	str	r2, [sp, #12]
   27450:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   27454:	ldr	r2, [sp, #12]
   27458:	subs	lr, r0, #0
   2745c:	beq	27424 <__assert_fail@plt+0x15ecc>
   27460:	ldr	r0, [r5, #56]	; 0x38
   27464:	mov	ip, r6
   27468:	str	r0, [lr]
   2746c:	mov	r1, #1
   27470:	mov	r3, #4
   27474:	str	lr, [r5, #56]	; 0x38
   27478:	b	26dd0 <__assert_fail@plt+0x15878>
   2747c:	mov	sl, r5
   27480:	mov	r1, #1
   27484:	b	269c0 <__assert_fail@plt+0x15468>
   27488:	str	r4, [sp, #16]
   2748c:	ldrb	r3, [r7, #24]
   27490:	ldr	r2, [r7, #28]
   27494:	sub	r3, r3, #2
   27498:	cmp	r3, #14
   2749c:	ldrls	pc, [pc, r3, lsl #2]
   274a0:	b	2765c <__assert_fail@plt+0x16104>
   274a4:	andeq	r7, r2, r4, ror #10
   274a8:	andeq	r7, r2, ip, asr r6
   274ac:	andeq	r7, r2, ip, lsr #12
   274b0:	andeq	r7, r2, ip, asr r6
   274b4:	andeq	r7, r2, ip, asr r6
   274b8:	andeq	r7, r2, ip, asr r6
   274bc:	strdeq	r7, [r2], -r0
   274c0:	strdeq	r7, [r2], -r0
   274c4:	andeq	r7, r2, r0, ror #9
   274c8:	andeq	r7, r2, r0, ror #9
   274cc:	strdeq	r7, [r2], -r0
   274d0:	andeq	r7, r2, ip, asr r6
   274d4:	andeq	r7, r2, ip, asr r6
   274d8:	andeq	r7, r2, ip, asr r6
   274dc:	andeq	r7, r2, r4, ror #10
   274e0:	ldrb	r3, [r6, #88]	; 0x58
   274e4:	ldr	r5, [r6, #20]
   274e8:	add	r2, r2, r2, lsl #1
   274ec:	orr	r3, r3, #1
   274f0:	strb	r3, [r6, #88]	; 0x58
   274f4:	ldr	r3, [r7, #4]
   274f8:	mov	r0, #8
   274fc:	cmp	r3, #0
   27500:	ldrne	r3, [r3, #12]
   27504:	ldreq	r3, [r7, #16]
   27508:	ldr	sl, [r3, #28]
   2750c:	ldr	r3, [r7, #8]
   27510:	cmp	r3, #0
   27514:	ldrne	r3, [r3, #12]
   27518:	ldreq	r3, [r7, #16]
   2751c:	ldr	r4, [r3, #28]
   27520:	mov	r3, #2
   27524:	str	r3, [r5, r2, lsl #2]
   27528:	add	r5, r5, r2, lsl r3
   2752c:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   27530:	cmp	r0, #0
   27534:	str	r0, [r5, #8]
   27538:	beq	26bac <__assert_fail@plt+0x15654>
   2753c:	cmp	sl, r4
   27540:	moveq	r3, #1
   27544:	streq	r3, [r5, #4]
   27548:	streq	sl, [r0]
   2754c:	beq	27564 <__assert_fail@plt+0x1600c>
   27550:	mov	r3, #2
   27554:	str	r3, [r5, #4]
   27558:	strlt	sl, [r0]
   2755c:	strlt	r4, [r0, #4]
   27560:	stmge	r0, {r4, sl}
   27564:	ldr	r3, [r7, #4]
   27568:	cmp	r3, #0
   2756c:	moveq	r2, r9
   27570:	beq	27580 <__assert_fail@plt+0x16028>
   27574:	mov	r7, r3
   27578:	b	2748c <__assert_fail@plt+0x15f34>
   2757c:	mov	r7, r5
   27580:	ldr	r3, [r7, #8]
   27584:	cmp	r3, #0
   27588:	cmpne	r3, r2
   2758c:	moveq	sl, #1
   27590:	movne	sl, #0
   27594:	bne	27574 <__assert_fail@plt+0x1601c>
   27598:	ldr	r5, [r7]
   2759c:	mov	r2, r7
   275a0:	cmp	r5, #0
   275a4:	bne	2757c <__assert_fail@plt+0x16024>
   275a8:	ldr	r4, [sp, #16]
   275ac:	ldr	r2, [r6, #24]
   275b0:	ldr	r9, [sp, #12]
   275b4:	add	r7, r5, r5, lsl #1
   275b8:	lsl	r7, r7, #2
   275bc:	add	r3, r2, r7
   275c0:	ldr	r3, [r3, #4]
   275c4:	cmp	r3, #0
   275c8:	beq	27670 <__assert_fail@plt+0x16118>
   275cc:	ldr	r0, [r6, #8]
   275d0:	add	r5, r5, #1
   275d4:	cmp	r0, r5
   275d8:	bne	275b4 <__assert_fail@plt+0x1605c>
   275dc:	cmp	r9, #0
   275e0:	beq	276d0 <__assert_fail@plt+0x16178>
   275e4:	ldr	r9, [sp, #12]
   275e8:	mov	r5, #0
   275ec:	b	275b4 <__assert_fail@plt+0x1605c>
   275f0:	ldr	r1, [r7, #16]
   275f4:	add	r2, r2, r2, lsl #1
   275f8:	ldr	r3, [r6, #20]
   275fc:	ldr	sl, [r1, #28]
   27600:	add	r5, r3, r2, lsl #2
   27604:	mov	r0, #4
   27608:	mov	r1, #1
   2760c:	str	r1, [r3, r2, lsl #2]
   27610:	str	r1, [r5, #4]
   27614:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   27618:	cmp	r0, #0
   2761c:	str	r0, [r5, #8]
   27620:	beq	27c48 <__assert_fail@plt+0x166f0>
   27624:	str	sl, [r0]
   27628:	b	27564 <__assert_fail@plt+0x1600c>
   2762c:	ldr	r1, [r7, #16]
   27630:	ldr	r3, [r6, #12]
   27634:	ldr	sl, [r1, #28]
   27638:	str	sl, [r3, r2, lsl #2]
   2763c:	ldrb	r3, [r7, #24]
   27640:	cmp	r3, #4
   27644:	bne	27564 <__assert_fail@plt+0x1600c>
   27648:	add	r2, r2, r2, lsl #1
   2764c:	ldr	r3, [r6, #20]
   27650:	mov	r0, #4
   27654:	add	r5, r3, r2, lsl #2
   27658:	b	27608 <__assert_fail@plt+0x160b0>
   2765c:	ldr	r1, [r7, #16]
   27660:	ldr	r3, [r6, #12]
   27664:	ldr	r1, [r1, #28]
   27668:	str	r1, [r3, r2, lsl #2]
   2766c:	b	27564 <__assert_fail@plt+0x1600c>
   27670:	mov	r3, #1
   27674:	mov	r2, r5
   27678:	mov	r1, r6
   2767c:	mov	r0, fp
   27680:	bl	1c0e0 <__assert_fail@plt+0xab88>
   27684:	cmp	r0, #0
   27688:	bne	26bb4 <__assert_fail@plt+0x1565c>
   2768c:	ldr	r2, [r6, #24]
   27690:	add	r7, r2, r7
   27694:	ldr	r7, [r7, #4]
   27698:	cmp	r7, #0
   2769c:	bne	275cc <__assert_fail@plt+0x16074>
   276a0:	ldr	r0, [sp, #56]	; 0x38
   276a4:	bl	13c04 <__assert_fail@plt+0x26ac>
   276a8:	ldr	r3, [r6, #8]
   276ac:	add	r5, r5, #1
   276b0:	cmp	r3, r5
   276b4:	movne	r9, sl
   276b8:	beq	276c4 <__assert_fail@plt+0x1616c>
   276bc:	ldr	r2, [r6, #24]
   276c0:	b	275b4 <__assert_fail@plt+0x1605c>
   276c4:	mov	r5, r7
   276c8:	ldr	r9, [sp, #12]
   276cc:	b	276bc <__assert_fail@plt+0x16164>
   276d0:	ldrb	r3, [r8, #28]
   276d4:	tst	r3, #16
   276d8:	bne	276e8 <__assert_fail@plt+0x16190>
   276dc:	ldr	r3, [r8, #24]
   276e0:	cmp	r3, #0
   276e4:	bne	27ba4 <__assert_fail@plt+0x1664c>
   276e8:	ldr	r3, [r6, #76]	; 0x4c
   276ec:	cmp	r3, #0
   276f0:	beq	27820 <__assert_fail@plt+0x162c8>
   276f4:	add	r0, r0, r0, lsl #1
   276f8:	lsl	r0, r0, #2
   276fc:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   27700:	cmp	r0, #0
   27704:	str	r0, [r6, #28]
   27708:	beq	26bb0 <__assert_fail@plt+0x15658>
   2770c:	ldr	r3, [r6, #8]
   27710:	cmp	r3, #0
   27714:	beq	27820 <__assert_fail@plt+0x162c8>
   27718:	mov	r3, #0
   2771c:	mov	r2, r0
   27720:	mov	r1, r3
   27724:	mov	r0, r3
   27728:	b	27730 <__assert_fail@plt+0x161d8>
   2772c:	ldr	r2, [r6, #28]
   27730:	add	ip, r2, r3
   27734:	str	r1, [r2, r3]
   27738:	str	r1, [ip, #4]
   2773c:	str	r1, [ip, #8]
   27740:	ldr	r2, [r6, #8]
   27744:	add	r0, r0, #1
   27748:	cmp	r0, r2
   2774c:	add	r3, r3, #12
   27750:	bcc	2772c <__assert_fail@plt+0x161d4>
   27754:	cmp	r2, #0
   27758:	beq	27820 <__assert_fail@plt+0x162c8>
   2775c:	mov	r3, #0
   27760:	ldr	lr, [r6, #24]
   27764:	str	r8, [sp, #16]
   27768:	mov	sl, r3
   2776c:	mov	r8, r3
   27770:	str	r4, [sp, #12]
   27774:	add	r0, lr, r8
   27778:	ldmib	r0, {r3, r7}
   2777c:	cmp	r3, #0
   27780:	ble	27808 <__assert_fail@plt+0x162b0>
   27784:	sub	r7, r7, #4
   27788:	mov	r5, #0
   2778c:	b	277b0 <__assert_fail@plt+0x16258>
   27790:	ldr	r3, [r4, #8]
   27794:	add	r1, r2, #1
   27798:	str	r1, [r4, #4]
   2779c:	str	sl, [r3, r2, lsl #2]
   277a0:	ldr	r3, [r0, #4]
   277a4:	add	r5, r5, #1
   277a8:	cmp	r5, r3
   277ac:	bge	27804 <__assert_fail@plt+0x162ac>
   277b0:	ldr	r3, [r7, #4]!
   277b4:	ldr	ip, [r6, #28]
   277b8:	add	r3, r3, r3, lsl #1
   277bc:	add	r4, ip, r3, lsl #2
   277c0:	ldr	r1, [ip, r3, lsl #2]
   277c4:	ldr	r2, [r4, #4]
   277c8:	cmp	r1, r2
   277cc:	bne	27790 <__assert_fail@plt+0x16238>
   277d0:	add	r2, r2, #1
   277d4:	ldr	r0, [r4, #8]
   277d8:	lsl	r1, r2, #1
   277dc:	str	r1, [ip, r3, lsl #2]
   277e0:	lsl	r1, r2, #3
   277e4:	bl	2b678 <__assert_fail@plt+0x1a120>
   277e8:	subs	r3, r0, #0
   277ec:	beq	27308 <__assert_fail@plt+0x15db0>
   277f0:	ldr	lr, [r6, #24]
   277f4:	ldr	r2, [r4, #4]
   277f8:	add	r0, lr, r8
   277fc:	str	r3, [r4, #8]
   27800:	b	27794 <__assert_fail@plt+0x1623c>
   27804:	ldr	r2, [r6, #8]
   27808:	add	sl, sl, #1
   2780c:	cmp	sl, r2
   27810:	add	r8, r8, #12
   27814:	bcc	27774 <__assert_fail@plt+0x1621c>
   27818:	ldr	r4, [sp, #12]
   2781c:	ldr	r8, [sp, #16]
   27820:	ldrb	r2, [r4, #88]	; 0x58
   27824:	ldr	r3, [sp, #20]
   27828:	clz	r3, r3
   2782c:	lsr	r3, r3, #5
   27830:	mov	r1, #0
   27834:	ands	r3, r3, r2, lsr #2
   27838:	str	r1, [sp, #36]	; 0x24
   2783c:	beq	2784c <__assert_fail@plt+0x162f4>
   27840:	ldr	r1, [r8, #20]
   27844:	cmp	r1, #0
   27848:	beq	27c5c <__assert_fail@plt+0x16704>
   2784c:	ldr	r3, [r4, #52]	; 0x34
   27850:	ldr	r5, [r4, #24]
   27854:	ldr	r3, [r3, #12]
   27858:	ldr	r3, [r3, #28]
   2785c:	str	r3, [r4, #72]	; 0x48
   27860:	add	r3, r3, r3, lsl #1
   27864:	add	r5, r5, r3, lsl #2
   27868:	ldr	r3, [r5, #4]
   2786c:	str	r3, [sp, #52]	; 0x34
   27870:	ldr	r2, [r5, #4]
   27874:	cmp	r2, #0
   27878:	ble	27ae8 <__assert_fail@plt+0x16590>
   2787c:	lsl	r0, r3, #2
   27880:	str	r3, [sp, #48]	; 0x30
   27884:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   27888:	cmp	r0, #0
   2788c:	mov	r6, r0
   27890:	str	r0, [sp, #56]	; 0x38
   27894:	beq	27b8c <__assert_fail@plt+0x16634>
   27898:	ldr	r2, [r5, #4]
   2789c:	ldr	r1, [r5, #8]
   278a0:	lsl	r2, r2, #2
   278a4:	bl	11264 <memcpy@plt>
   278a8:	mov	r0, r6
   278ac:	ldr	r3, [r4, #76]	; 0x4c
   278b0:	mov	r7, #0
   278b4:	cmp	r3, r7
   278b8:	str	r7, [sp, #40]	; 0x28
   278bc:	ble	27a0c <__assert_fail@plt+0x164b4>
   278c0:	ldr	r6, [sp, #52]	; 0x34
   278c4:	cmp	r6, r7
   278c8:	ble	27a0c <__assert_fail@plt+0x164b4>
   278cc:	mov	r5, r7
   278d0:	b	278e4 <__assert_fail@plt+0x1638c>
   278d4:	add	r7, r7, #1
   278d8:	cmp	r6, r7
   278dc:	ble	27a0c <__assert_fail@plt+0x164b4>
   278e0:	ldr	r0, [sp, #56]	; 0x38
   278e4:	ldr	sl, [r0, r7, lsl #2]
   278e8:	ldr	lr, [r4]
   278ec:	add	r9, lr, sl, lsl #3
   278f0:	ldrb	r3, [r9, #4]
   278f4:	cmp	r3, #4
   278f8:	bne	278d4 <__assert_fail@plt+0x1637c>
   278fc:	sub	r1, r0, #4
   27900:	mov	r3, #0
   27904:	b	27914 <__assert_fail@plt+0x163bc>
   27908:	add	r3, r3, #1
   2790c:	cmp	r6, r3
   27910:	beq	278d4 <__assert_fail@plt+0x1637c>
   27914:	ldr	r2, [r1, #4]!
   27918:	add	ip, lr, r2, lsl #3
   2791c:	ldrb	ip, [ip, #4]
   27920:	cmp	ip, #9
   27924:	bne	27908 <__assert_fail@plt+0x163b0>
   27928:	ldr	ip, [lr, r2, lsl #3]
   2792c:	ldr	r2, [r9]
   27930:	cmp	ip, r2
   27934:	bne	27908 <__assert_fail@plt+0x163b0>
   27938:	ldr	r3, [r4, #20]
   2793c:	add	sl, sl, sl, lsl #1
   27940:	sub	ip, r6, #1
   27944:	add	sl, r3, sl, lsl #2
   27948:	mov	r1, r5
   2794c:	ldr	r3, [sl, #8]
   27950:	ldr	lr, [r3]
   27954:	cmp	r1, ip
   27958:	bcs	279b0 <__assert_fail@plt+0x16458>
   2795c:	add	r2, r1, ip
   27960:	lsr	r2, r2, #1
   27964:	ldr	r3, [r0, r2, lsl #2]
   27968:	cmp	lr, r3
   2796c:	ble	279a8 <__assert_fail@plt+0x16450>
   27970:	b	27acc <__assert_fail@plt+0x16574>
   27974:	beq	fead2420 <optarg@@GLIBC_2.4+0xfea94260>
   27978:	andeq	sp, r2, r0
	...
   27984:	andeq	sp, r2, r8, asr #4
   27988:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2798c:	andeq	pc, r3, r0, lsl #30
   27990:	add	r3, r2, r1
   27994:	lsr	r3, r3, #1
   27998:	ldr	ip, [r0, r3, lsl #2]
   2799c:	cmp	lr, ip
   279a0:	bgt	27ad4 <__assert_fail@plt+0x1657c>
   279a4:	mov	r2, r3
   279a8:	cmp	r2, r1
   279ac:	bhi	27990 <__assert_fail@plt+0x16438>
   279b0:	ldr	r3, [r0, r1, lsl #2]
   279b4:	cmp	lr, r3
   279b8:	beq	278d4 <__assert_fail@plt+0x1637c>
   279bc:	add	lr, lr, lr, lsl #1
   279c0:	ldr	r3, [r4, #24]
   279c4:	adds	r7, r3, lr, lsl #2
   279c8:	beq	27ae0 <__assert_fail@plt+0x16588>
   279cc:	ldr	r3, [r7, #4]
   279d0:	cmp	r3, #0
   279d4:	beq	27ae0 <__assert_fail@plt+0x16588>
   279d8:	ldr	r2, [sp, #48]	; 0x30
   279dc:	add	r6, r6, r3, lsl #1
   279e0:	cmp	r2, r6
   279e4:	blt	27afc <__assert_fail@plt+0x165a4>
   279e8:	mov	r1, r7
   279ec:	mov	r0, fp
   279f0:	bl	18f28 <__assert_fail@plt+0x79d0>
   279f4:	cmp	r0, #0
   279f8:	bne	27a50 <__assert_fail@plt+0x164f8>
   279fc:	ldr	r6, [sp, #52]	; 0x34
   27a00:	mov	r7, #1
   27a04:	cmp	r6, r7
   27a08:	bgt	278e0 <__assert_fail@plt+0x16388>
   27a0c:	mov	r3, #0
   27a10:	mov	r2, fp
   27a14:	mov	r1, r4
   27a18:	add	r0, sp, #40	; 0x28
   27a1c:	bl	21a14 <__assert_fail@plt+0x104bc>
   27a20:	cmp	r0, #0
   27a24:	str	r0, [r4, #36]	; 0x24
   27a28:	beq	27b84 <__assert_fail@plt+0x1662c>
   27a2c:	ldrsb	r3, [r0, #52]	; 0x34
   27a30:	cmp	r3, #0
   27a34:	strge	r0, [r4, #48]	; 0x30
   27a38:	strge	r0, [r4, #44]	; 0x2c
   27a3c:	strge	r0, [r4, #40]	; 0x28
   27a40:	blt	27b20 <__assert_fail@plt+0x165c8>
   27a44:	ldr	r0, [sp, #56]	; 0x38
   27a48:	bl	13c04 <__assert_fail@plt+0x26ac>
   27a4c:	mov	r0, #0
   27a50:	ldr	r6, [r8]
   27a54:	str	r0, [sp, #36]	; 0x24
   27a58:	ldr	r0, [r6, #56]	; 0x38
   27a5c:	cmp	r0, #0
   27a60:	beq	27a74 <__assert_fail@plt+0x1651c>
   27a64:	ldr	r5, [r0]
   27a68:	bl	13c04 <__assert_fail@plt+0x26ac>
   27a6c:	subs	r0, r5, #0
   27a70:	bne	27a64 <__assert_fail@plt+0x1650c>
   27a74:	mov	r3, #31
   27a78:	mov	r5, #0
   27a7c:	str	r3, [r6, #64]	; 0x40
   27a80:	ldr	r0, [r6, #16]
   27a84:	str	r5, [r6, #56]	; 0x38
   27a88:	str	r5, [r6, #52]	; 0x34
   27a8c:	bl	13c04 <__assert_fail@plt+0x26ac>
   27a90:	ldr	r0, [sp, #68]	; 0x44
   27a94:	str	r5, [r6, #16]
   27a98:	bl	13c04 <__assert_fail@plt+0x26ac>
   27a9c:	ldr	r0, [sp, #72]	; 0x48
   27aa0:	bl	13c04 <__assert_fail@plt+0x26ac>
   27aa4:	ldrb	r3, [sp, #135]	; 0x87
   27aa8:	cmp	r3, r5
   27aac:	beq	27ab8 <__assert_fail@plt+0x16560>
   27ab0:	ldr	r0, [sp, #64]	; 0x40
   27ab4:	bl	13c04 <__assert_fail@plt+0x26ac>
   27ab8:	ldr	r0, [sp, #36]	; 0x24
   27abc:	cmp	r0, #0
   27ac0:	bne	26c1c <__assert_fail@plt+0x156c4>
   27ac4:	add	sp, sp, #148	; 0x94
   27ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27acc:	mov	r3, r2
   27ad0:	mov	r2, ip
   27ad4:	add	r1, r3, #1
   27ad8:	mov	ip, r2
   27adc:	b	27954 <__assert_fail@plt+0x163fc>
   27ae0:	mov	r7, #1
   27ae4:	b	278d8 <__assert_fail@plt+0x16380>
   27ae8:	mov	r0, #0
   27aec:	str	r0, [sp, #48]	; 0x30
   27af0:	str	r0, [fp, #4]
   27af4:	str	r0, [fp, #8]
   27af8:	b	278ac <__assert_fail@plt+0x16354>
   27afc:	add	r3, r3, r2
   27b00:	lsl	r1, r3, #3
   27b04:	lsl	r6, r3, #1
   27b08:	bl	2b678 <__assert_fail@plt+0x1a120>
   27b0c:	cmp	r0, #0
   27b10:	beq	27b8c <__assert_fail@plt+0x16634>
   27b14:	str	r0, [sp, #56]	; 0x38
   27b18:	str	r6, [sp, #48]	; 0x30
   27b1c:	b	279e8 <__assert_fail@plt+0x16490>
   27b20:	mov	r3, #1
   27b24:	mov	r2, fp
   27b28:	mov	r1, r4
   27b2c:	add	r0, sp, #40	; 0x28
   27b30:	bl	21a14 <__assert_fail@plt+0x104bc>
   27b34:	mov	r3, #2
   27b38:	mov	r2, fp
   27b3c:	mov	r1, r4
   27b40:	str	r0, [r4, #40]	; 0x28
   27b44:	add	r0, sp, #40	; 0x28
   27b48:	bl	21a14 <__assert_fail@plt+0x104bc>
   27b4c:	mov	r3, #6
   27b50:	mov	r2, fp
   27b54:	mov	r1, r4
   27b58:	str	r0, [r4, #44]	; 0x2c
   27b5c:	add	r0, sp, #40	; 0x28
   27b60:	bl	21a14 <__assert_fail@plt+0x104bc>
   27b64:	ldr	r3, [r4, #40]	; 0x28
   27b68:	cmp	r3, #0
   27b6c:	str	r0, [r4, #48]	; 0x30
   27b70:	beq	27b84 <__assert_fail@plt+0x1662c>
   27b74:	ldr	r3, [r4, #44]	; 0x2c
   27b78:	cmp	r0, #0
   27b7c:	cmpne	r3, #0
   27b80:	bne	27a44 <__assert_fail@plt+0x164ec>
   27b84:	ldr	r0, [sp, #40]	; 0x28
   27b88:	b	27a50 <__assert_fail@plt+0x164f8>
   27b8c:	mov	r0, #12
   27b90:	b	27a50 <__assert_fail@plt+0x164f8>
   27b94:	cmp	ip, #0
   27b98:	mov	r1, ip
   27b9c:	beq	273a4 <__assert_fail@plt+0x15e4c>
   27ba0:	b	27388 <__assert_fail@plt+0x15e30>
   27ba4:	ldrb	r3, [r6, #88]	; 0x58
   27ba8:	tst	r3, #1
   27bac:	bne	276f4 <__assert_fail@plt+0x1619c>
   27bb0:	b	276e8 <__assert_fail@plt+0x16190>
   27bb4:	bl	13c04 <__assert_fail@plt+0x26ac>
   27bb8:	mov	r3, #0
   27bbc:	ldr	r5, [r6, #52]	; 0x34
   27bc0:	str	r3, [r6, #132]	; 0x84
   27bc4:	b	26fec <__assert_fail@plt+0x15a94>
   27bc8:	mov	r3, r2
   27bcc:	b	26ff4 <__assert_fail@plt+0x15a9c>
   27bd0:	str	sl, [sp, #88]	; 0x58
   27bd4:	str	sl, [sp, #92]	; 0x5c
   27bd8:	b	26d38 <__assert_fail@plt+0x157e0>
   27bdc:	ldr	r3, [sp, #108]	; 0x6c
   27be0:	ldr	r5, [sp, #88]	; 0x58
   27be4:	cmp	sl, r3
   27be8:	movge	sl, r3
   27bec:	cmp	sl, r5
   27bf0:	ble	27c34 <__assert_fail@plt+0x166dc>
   27bf4:	bl	113d8 <__ctype_toupper_loc@plt>
   27bf8:	b	27c00 <__assert_fail@plt+0x166a8>
   27bfc:	ldr	r6, [sp, #64]	; 0x40
   27c00:	ldr	r3, [sp, #60]	; 0x3c
   27c04:	ldr	r1, [sp, #84]	; 0x54
   27c08:	add	r3, r3, r5
   27c0c:	ldr	r2, [sp, #124]	; 0x7c
   27c10:	ldrb	r3, [r3, r1]
   27c14:	cmp	r2, #0
   27c18:	ldrbne	r3, [r2, r3]
   27c1c:	ldr	r2, [r0]
   27c20:	ldr	r3, [r2, r3, lsl #2]
   27c24:	strb	r3, [r6, r5]
   27c28:	add	r5, r5, #1
   27c2c:	cmp	sl, r5
   27c30:	bne	27bfc <__assert_fail@plt+0x166a4>
   27c34:	str	r5, [sp, #88]	; 0x58
   27c38:	str	r5, [sp, #92]	; 0x5c
   27c3c:	b	26d38 <__assert_fail@plt+0x157e0>
   27c40:	mov	r0, #12
   27c44:	b	26c48 <__assert_fail@plt+0x156f0>
   27c48:	ldr	r4, [sp, #16]
   27c4c:	str	r0, [r5, #4]
   27c50:	str	r0, [r5]
   27c54:	mov	r0, #12
   27c58:	b	26bb4 <__assert_fail@plt+0x1565c>
   27c5c:	ldr	r5, [r4, #8]
   27c60:	cmp	r5, #0
   27c64:	beq	27d98 <__assert_fail@plt+0x16840>
   27c68:	ldr	r0, [r4]
   27c6c:	mov	r2, r1
   27c70:	mov	r6, r0
   27c74:	mov	r1, r0
   27c78:	mov	lr, r9
   27c7c:	ldrb	ip, [r6, #4]
   27c80:	sub	ip, ip, #1
   27c84:	cmp	ip, #11
   27c88:	ldrls	pc, [pc, ip, lsl #2]
   27c8c:	b	27d34 <__assert_fail@plt+0x167dc>
   27c90:	andeq	r7, r2, r4, lsr #26
   27c94:	andeq	r7, r2, r4, asr #25
   27c98:	andeq	r7, r2, r8, lsr sp
   27c9c:	andeq	r7, r2, r4, asr #25
   27ca0:	andeq	r7, r2, r0, asr #25
   27ca4:	andeq	r7, r2, ip, asr #16
   27ca8:	andeq	r7, r2, r4, lsr sp
   27cac:	andeq	r7, r2, r4, asr #25
   27cb0:	andeq	r7, r2, r4, asr #25
   27cb4:	andeq	r7, r2, r4, asr #25
   27cb8:	andeq	r7, r2, r4, asr #25
   27cbc:	andeq	r7, r2, r0, ror sp
   27cc0:	mov	lr, r3
   27cc4:	add	r2, r2, #1
   27cc8:	cmp	r2, r5
   27ccc:	add	r6, r6, #8
   27cd0:	bne	27c7c <__assert_fail@plt+0x16724>
   27cd4:	orr	r9, r9, lr
   27cd8:	ands	r9, r9, #255	; 0xff
   27cdc:	beq	27d98 <__assert_fail@plt+0x16840>
   27ce0:	add	r2, r0, r2, lsl #3
   27ce4:	mov	r0, #7
   27ce8:	b	27d00 <__assert_fail@plt+0x167a8>
   27cec:	cmp	r3, #5
   27cf0:	strbeq	r0, [r1, #4]
   27cf4:	add	r1, r1, #8
   27cf8:	cmp	r1, r2
   27cfc:	beq	27d94 <__assert_fail@plt+0x1683c>
   27d00:	ldrb	r3, [r1, #4]
   27d04:	cmp	r3, #1
   27d08:	bne	27cec <__assert_fail@plt+0x16794>
   27d0c:	ldrsb	r3, [r1]
   27d10:	cmp	r3, #0
   27d14:	ldrblt	r3, [r1, #6]
   27d18:	biclt	r3, r3, #32
   27d1c:	strblt	r3, [r1, #6]
   27d20:	b	27cf4 <__assert_fail@plt+0x1679c>
   27d24:	ldrb	ip, [r0, r2, lsl #3]
   27d28:	lsrs	ip, ip, #7
   27d2c:	movne	r9, r3
   27d30:	b	27cc4 <__assert_fail@plt+0x1676c>
   27d34:	bl	11534 <abort@plt>
   27d38:	ldr	ip, [r0, r2, lsl #3]
   27d3c:	ldr	r7, [ip, #16]
   27d40:	cmp	r7, #0
   27d44:	bne	2784c <__assert_fail@plt+0x162f4>
   27d48:	ldr	r7, [ip, #20]
   27d4c:	cmp	r7, #0
   27d50:	bne	2784c <__assert_fail@plt+0x162f4>
   27d54:	ldr	r7, [ip, #24]
   27d58:	cmp	r7, #0
   27d5c:	bne	2784c <__assert_fail@plt+0x162f4>
   27d60:	ldr	ip, [ip, #28]
   27d64:	cmp	ip, #0
   27d68:	beq	27cc4 <__assert_fail@plt+0x1676c>
   27d6c:	b	2784c <__assert_fail@plt+0x162f4>
   27d70:	ldr	ip, [r0, r2, lsl #3]
   27d74:	cmp	ip, #32
   27d78:	beq	27cc4 <__assert_fail@plt+0x1676c>
   27d7c:	bls	27dc8 <__assert_fail@plt+0x16870>
   27d80:	cmp	ip, #64	; 0x40
   27d84:	beq	27cc4 <__assert_fail@plt+0x1676c>
   27d88:	cmp	ip, #128	; 0x80
   27d8c:	beq	27cc4 <__assert_fail@plt+0x1676c>
   27d90:	b	2784c <__assert_fail@plt+0x162f4>
   27d94:	mov	r9, lr
   27d98:	ldr	r2, [r4, #76]	; 0x4c
   27d9c:	ldrb	r3, [r4, #88]	; 0x58
   27da0:	cmp	r2, #0
   27da4:	movle	r2, r9
   27da8:	orrgt	r2, r9, #1
   27dac:	and	r2, r2, #1
   27db0:	and	r3, r3, #249	; 0xf9
   27db4:	orr	r3, r3, r2, lsl #1
   27db8:	mov	r2, #1
   27dbc:	strb	r3, [r4, #88]	; 0x58
   27dc0:	str	r2, [r4, #92]	; 0x5c
   27dc4:	b	2784c <__assert_fail@plt+0x162f4>
   27dc8:	cmp	ip, #16
   27dcc:	beq	27cc4 <__assert_fail@plt+0x1676c>
   27dd0:	b	2784c <__assert_fail@plt+0x162f4>
   27dd4:	ldr	r3, [pc, #96]	; 27e3c <__assert_fail@plt+0x168e4>
   27dd8:	push	{r4, lr}
   27ddc:	mov	lr, r2
   27de0:	ldr	r3, [r3]
   27de4:	ldrb	ip, [lr, #28]
   27de8:	mov	r2, r1
   27dec:	mov	r1, r0
   27df0:	lsr	r0, r3, #21
   27df4:	and	r4, r0, #16
   27df8:	and	r0, ip, #239	; 0xef
   27dfc:	orr	r0, r0, r4
   27e00:	orr	r0, r0, #128	; 0x80
   27e04:	strb	r0, [lr, #28]
   27e08:	mov	r0, lr
   27e0c:	bl	2691c <__assert_fail@plt+0x153c4>
   27e10:	subs	r3, r0, #0
   27e14:	popeq	{r4, pc}
   27e18:	ldr	r1, [pc, #32]	; 27e40 <__assert_fail@plt+0x168e8>
   27e1c:	mov	r2, #5
   27e20:	add	r3, r1, r3, lsl #2
   27e24:	add	r1, r1, #32
   27e28:	ldr	r3, [r3, #416]	; 0x1a0
   27e2c:	mov	r0, #0
   27e30:	add	r1, r1, r3
   27e34:	pop	{r4, lr}
   27e38:	b	112d0 <dcgettext@plt>
   27e3c:	strdeq	lr, [r3], -r4
   27e40:	andeq	sp, r2, r0
   27e44:	ldr	r3, [pc, #12]	; 27e58 <__assert_fail@plt+0x16900>
   27e48:	ldr	r2, [r3]
   27e4c:	str	r0, [r3]
   27e50:	mov	r0, r2
   27e54:	bx	lr
   27e58:	strdeq	lr, [r3], -r4
   27e5c:	push	{r4, r5, r6, lr}
   27e60:	mov	r2, #256	; 0x100
   27e64:	ldr	r5, [r0]
   27e68:	ldr	r6, [r0, #16]
   27e6c:	mov	r4, r0
   27e70:	mov	r1, #0
   27e74:	mov	r0, r6
   27e78:	bl	1145c <memset@plt>
   27e7c:	ldr	r1, [r5, #36]	; 0x24
   27e80:	mov	r3, r6
   27e84:	add	r2, r1, #12
   27e88:	mov	r0, r4
   27e8c:	add	r1, r1, #8
   27e90:	bl	1a718 <__assert_fail@plt+0x91c0>
   27e94:	ldr	r0, [r5, #40]	; 0x28
   27e98:	ldr	r3, [r5, #36]	; 0x24
   27e9c:	cmp	r3, r0
   27ea0:	beq	27ebc <__assert_fail@plt+0x16964>
   27ea4:	add	r2, r0, #12
   27ea8:	add	r1, r0, #8
   27eac:	mov	r3, r6
   27eb0:	mov	r0, r4
   27eb4:	bl	1a718 <__assert_fail@plt+0x91c0>
   27eb8:	ldr	r0, [r5, #36]	; 0x24
   27ebc:	ldr	r1, [r5, #44]	; 0x2c
   27ec0:	cmp	r1, r0
   27ec4:	beq	27ee0 <__assert_fail@plt+0x16988>
   27ec8:	add	r2, r1, #12
   27ecc:	mov	r0, r4
   27ed0:	mov	r3, r6
   27ed4:	add	r1, r1, #8
   27ed8:	bl	1a718 <__assert_fail@plt+0x91c0>
   27edc:	ldr	r0, [r5, #36]	; 0x24
   27ee0:	ldr	r1, [r5, #48]	; 0x30
   27ee4:	cmp	r1, r0
   27ee8:	beq	27f00 <__assert_fail@plt+0x169a8>
   27eec:	add	r2, r1, #12
   27ef0:	mov	r3, r6
   27ef4:	add	r1, r1, #8
   27ef8:	mov	r0, r4
   27efc:	bl	1a718 <__assert_fail@plt+0x91c0>
   27f00:	ldrb	r3, [r4, #28]
   27f04:	mov	r0, #0
   27f08:	orr	r3, r3, #8
   27f0c:	strb	r3, [r4, #28]
   27f10:	pop	{r4, r5, r6, pc}
   27f14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27f18:	cmp	r3, r2
   27f1c:	mov	r5, r3
   27f20:	sub	sp, sp, #52	; 0x34
   27f24:	movle	r3, #0
   27f28:	movgt	r3, #1
   27f2c:	orrs	r3, r3, r5, lsr #31
   27f30:	ldrb	r3, [sp, #100]	; 0x64
   27f34:	ldr	ip, [sp, #88]	; 0x58
   27f38:	ldr	sl, [r0]
   27f3c:	add	r8, r5, ip
   27f40:	ldr	r7, [sp, #96]	; 0x60
   27f44:	str	r3, [sp, #32]
   27f48:	bne	281f4 <__assert_fail@plt+0x16c9c>
   27f4c:	cmp	r8, r2
   27f50:	bgt	281ec <__assert_fail@plt+0x16c94>
   27f54:	cmp	ip, #0
   27f58:	cmpge	r5, r8
   27f5c:	movgt	lr, #1
   27f60:	movle	lr, #0
   27f64:	bgt	281ec <__assert_fail@plt+0x16c94>
   27f68:	cmp	r8, #0
   27f6c:	blt	28288 <__assert_fail@plt+0x16d30>
   27f70:	cmp	r5, r8
   27f74:	movgt	lr, #0
   27f78:	movle	lr, #1
   27f7c:	ands	r3, lr, ip, lsr #31
   27f80:	movne	r8, #0
   27f84:	ldr	lr, [pc, #812]	; 282b8 <__assert_fail@plt+0x16d60>
   27f88:	ldr	r4, [pc, #812]	; 282bc <__assert_fail@plt+0x16d64>
   27f8c:	cmp	lr, #0
   27f90:	mov	ip, #1
   27f94:	moveq	ip, lr
   27f98:	cmp	r4, #0
   27f9c:	mov	lr, #1
   27fa0:	moveq	lr, r4
   27fa4:	str	r2, [sp, #40]	; 0x28
   27fa8:	orr	r2, ip, lr
   27fac:	ands	r3, r2, #255	; 0xff
   27fb0:	str	r1, [sp, #44]	; 0x2c
   27fb4:	mov	r6, r0
   27fb8:	str	r3, [sp, #28]
   27fbc:	beq	27fc8 <__assert_fail@plt+0x16a70>
   27fc0:	add	r0, sl, #136	; 0x88
   27fc4:	bl	1124c <pthread_mutex_lock@plt>
   27fc8:	ldrb	r2, [r6, #28]
   27fcc:	cmp	r8, r5
   27fd0:	lsr	fp, r2, #5
   27fd4:	and	r3, fp, #3
   27fd8:	str	r3, [sp, #36]	; 0x24
   27fdc:	bgt	28090 <__assert_fail@plt+0x16b38>
   27fe0:	lsr	r1, r2, #4
   27fe4:	and	r1, r1, #1
   27fe8:	cmp	r7, #0
   27fec:	orreq	r1, r1, #1
   27ff0:	cmp	r1, #0
   27ff4:	bne	28290 <__assert_fail@plt+0x16d38>
   27ff8:	and	r2, r2, #6
   27ffc:	cmp	r2, #4
   28000:	ldrne	r0, [r6, #24]
   28004:	beq	28258 <__assert_fail@plt+0x16d00>
   28008:	add	fp, r0, #1
   2800c:	mov	r4, fp
   28010:	lsl	r0, fp, #3
   28014:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   28018:	subs	r9, r0, #0
   2801c:	beq	28204 <__assert_fail@plt+0x16cac>
   28020:	ldr	r3, [sp, #36]	; 0x24
   28024:	str	r9, [sp, #12]
   28028:	str	r3, [sp, #16]
   2802c:	ldr	r3, [sp, #92]	; 0x5c
   28030:	str	fp, [sp, #8]
   28034:	str	r3, [sp, #4]
   28038:	str	r8, [sp]
   2803c:	ldr	r2, [sp, #40]	; 0x28
   28040:	ldr	r1, [sp, #44]	; 0x2c
   28044:	mov	r3, r5
   28048:	mov	r0, r6
   2804c:	bl	242b4 <__assert_fail@plt+0x12d5c>
   28050:	cmp	r0, #0
   28054:	beq	280b4 <__assert_fail@plt+0x16b5c>
   28058:	cmp	r0, #1
   2805c:	mvneq	r5, #0
   28060:	beq	28068 <__assert_fail@plt+0x16b10>
   28064:	mvn	r5, #1
   28068:	mov	r0, r9
   2806c:	bl	13c04 <__assert_fail@plt+0x26ac>
   28070:	ldr	r3, [sp, #28]
   28074:	cmp	r3, #0
   28078:	beq	28084 <__assert_fail@plt+0x16b2c>
   2807c:	add	r0, sl, #136	; 0x88
   28080:	bl	11198 <pthread_mutex_unlock@plt>
   28084:	mov	r0, r5
   28088:	add	sp, sp, #52	; 0x34
   2808c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28090:	ldr	r1, [r6, #16]
   28094:	cmp	r1, #0
   28098:	beq	27fe0 <__assert_fail@plt+0x16a88>
   2809c:	tst	r2, #8
   280a0:	bne	27fe0 <__assert_fail@plt+0x16a88>
   280a4:	mov	r0, r6
   280a8:	bl	27e5c <__assert_fail@plt+0x16904>
   280ac:	ldrb	r2, [r6, #28]
   280b0:	b	27fe0 <__assert_fail@plt+0x16a88>
   280b4:	cmp	r7, #0
   280b8:	beq	28164 <__assert_fail@plt+0x16c0c>
   280bc:	ldrb	r8, [r6, #28]
   280c0:	add	fp, r4, #1
   280c4:	lsr	r8, r8, #1
   280c8:	ands	r8, r8, #3
   280cc:	beq	2820c <__assert_fail@plt+0x16cb4>
   280d0:	cmp	r8, #1
   280d4:	ldr	r2, [r7]
   280d8:	movne	r8, #2
   280dc:	beq	28180 <__assert_fail@plt+0x16c28>
   280e0:	cmp	r4, #0
   280e4:	ble	282a4 <__assert_fail@plt+0x16d4c>
   280e8:	ldmib	r7, {r1, r2}
   280ec:	mov	r3, r9
   280f0:	add	ip, r9, r4, lsl #3
   280f4:	sub	r1, r1, #4
   280f8:	sub	r2, r2, #4
   280fc:	ldr	r0, [r3]
   28100:	add	r3, r3, #8
   28104:	str	r0, [r1, #4]!
   28108:	ldr	r0, [r3, #-4]
   2810c:	cmp	ip, r3
   28110:	str	r0, [r2, #4]!
   28114:	bne	280fc <__assert_fail@plt+0x16ba4>
   28118:	ldr	r2, [r7]
   2811c:	mov	r3, r4
   28120:	cmp	r3, r2
   28124:	bcs	2814c <__assert_fail@plt+0x16bf4>
   28128:	ldmib	r7, {r0, r1}
   2812c:	mvn	r2, #0
   28130:	str	r2, [r1, r3, lsl #2]
   28134:	str	r2, [r0, r3, lsl #2]
   28138:	ldr	r3, [r7]
   2813c:	add	r4, r4, #1
   28140:	cmp	r4, r3
   28144:	mov	r3, r4
   28148:	bcc	28130 <__assert_fail@plt+0x16bd8>
   2814c:	ldrb	r3, [r6, #28]
   28150:	bic	r3, r3, #6
   28154:	orr	r8, r3, r8, lsl #1
   28158:	tst	r8, #6
   2815c:	strb	r8, [r6, #28]
   28160:	beq	28064 <__assert_fail@plt+0x16b0c>
   28164:	ldr	r3, [sp, #32]
   28168:	cmp	r3, #0
   2816c:	ldrne	r3, [r9, #4]
   28170:	subne	r5, r3, r5
   28174:	bne	28068 <__assert_fail@plt+0x16b10>
   28178:	ldr	r5, [r9]
   2817c:	b	28068 <__assert_fail@plt+0x16b10>
   28180:	cmp	r2, fp
   28184:	bcs	280e0 <__assert_fail@plt+0x16b88>
   28188:	lsl	r2, fp, #2
   2818c:	mov	r1, r2
   28190:	ldr	r0, [r7, #4]
   28194:	str	r2, [sp, #40]	; 0x28
   28198:	bl	2b678 <__assert_fail@plt+0x1a120>
   2819c:	subs	r3, r0, #0
   281a0:	str	r3, [sp, #36]	; 0x24
   281a4:	beq	282b0 <__assert_fail@plt+0x16d58>
   281a8:	ldr	r2, [sp, #40]	; 0x28
   281ac:	ldr	r0, [r7, #8]
   281b0:	mov	r1, r2
   281b4:	bl	2b678 <__assert_fail@plt+0x1a120>
   281b8:	ldr	r3, [sp, #36]	; 0x24
   281bc:	subs	r2, r0, #0
   281c0:	strne	r2, [r7, #8]
   281c4:	strne	r3, [r7, #4]
   281c8:	strne	fp, [r7]
   281cc:	movne	r2, fp
   281d0:	bne	280e0 <__assert_fail@plt+0x16b88>
   281d4:	mov	r0, r3
   281d8:	str	r2, [sp, #36]	; 0x24
   281dc:	bl	13c04 <__assert_fail@plt+0x26ac>
   281e0:	ldr	r2, [sp, #36]	; 0x24
   281e4:	mov	r8, r2
   281e8:	b	2814c <__assert_fail@plt+0x16bf4>
   281ec:	mov	r8, r2
   281f0:	b	27f84 <__assert_fail@plt+0x16a2c>
   281f4:	mvn	r5, #0
   281f8:	mov	r0, r5
   281fc:	add	sp, sp, #52	; 0x34
   28200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28204:	mvn	r5, #1
   28208:	b	28070 <__assert_fail@plt+0x16b18>
   2820c:	lsl	r8, fp, #2
   28210:	mov	r0, r8
   28214:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   28218:	cmp	r0, #0
   2821c:	str	r0, [r7, #4]
   28220:	beq	282b0 <__assert_fail@plt+0x16d58>
   28224:	mov	r0, r8
   28228:	str	fp, [sp, #36]	; 0x24
   2822c:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   28230:	ldr	r2, [sp, #36]	; 0x24
   28234:	cmp	r0, #0
   28238:	mov	r8, r0
   2823c:	str	r0, [r7, #8]
   28240:	strne	r2, [r7]
   28244:	movne	r8, #1
   28248:	bne	280e0 <__assert_fail@plt+0x16b88>
   2824c:	ldr	r0, [r7, #4]
   28250:	bl	13c04 <__assert_fail@plt+0x26ac>
   28254:	b	2814c <__assert_fail@plt+0x16bf4>
   28258:	ldr	fp, [r7]
   2825c:	ldr	r0, [r6, #24]
   28260:	cmp	fp, r0
   28264:	bhi	28008 <__assert_fail@plt+0x16ab0>
   28268:	cmp	fp, #0
   2826c:	mov	r4, fp
   28270:	bgt	28010 <__assert_fail@plt+0x16ab8>
   28274:	mov	fp, #1
   28278:	mov	r7, r1
   2827c:	mov	r4, fp
   28280:	mov	r0, #8
   28284:	b	28014 <__assert_fail@plt+0x16abc>
   28288:	mov	r8, lr
   2828c:	b	27f84 <__assert_fail@plt+0x16a2c>
   28290:	mov	fp, #1
   28294:	mov	r4, fp
   28298:	mov	r0, #8
   2829c:	mov	r7, #0
   282a0:	b	28014 <__assert_fail@plt+0x16abc>
   282a4:	mov	r4, #0
   282a8:	mov	r3, r4
   282ac:	b	28120 <__assert_fail@plt+0x16bc8>
   282b0:	mov	r8, #0
   282b4:	b	2814c <__assert_fail@plt+0x16bf4>
	...
   282c0:	push	{r4, r5, r6, r7, r8, lr}
   282c4:	mov	r5, r2
   282c8:	and	r2, r2, #1
   282cc:	cmp	r2, #0
   282d0:	ldr	ip, [pc, #404]	; 2846c <__assert_fail@plt+0x16f14>
   282d4:	mov	r2, #0
   282d8:	ldr	r3, [pc, #400]	; 28470 <__assert_fail@plt+0x16f18>
   282dc:	mov	r4, r0
   282e0:	str	r2, [r0]
   282e4:	str	r2, [r0, #4]
   282e8:	str	r2, [r0, #8]
   282ec:	sub	sp, sp, #8
   282f0:	mov	r0, #256	; 0x100
   282f4:	ldr	r8, [pc, #376]	; 28474 <__assert_fail@plt+0x16f1c>
   282f8:	ldr	r6, [pc, #376]	; 28478 <__assert_fail@plt+0x16f20>
   282fc:	moveq	r8, ip
   28300:	movne	r6, r3
   28304:	mov	r7, r1
   28308:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   2830c:	cmp	r0, #0
   28310:	str	r0, [r4, #16]
   28314:	beq	28460 <__assert_fail@plt+0x16f08>
   28318:	tst	r5, #2
   2831c:	movne	r6, r8
   28320:	ands	r2, r5, #4
   28324:	moveq	r3, r2
   28328:	ldrb	r2, [r4, #28]
   2832c:	movne	r3, #1
   28330:	lsl	r5, r5, #1
   28334:	bic	r2, r2, #128	; 0x80
   28338:	orr	r2, r2, r3, lsl #7
   2833c:	bic	r2, r2, #16
   28340:	and	r5, r5, #16
   28344:	orr	r5, r5, r2
   28348:	mov	r3, #0
   2834c:	bicne	r6, r6, #64	; 0x40
   28350:	str	r3, [r4, #20]
   28354:	strb	r5, [r4, #28]
   28358:	mov	r0, r7
   2835c:	orrne	r6, r6, #256	; 0x100
   28360:	bl	11414 <strlen@plt>
   28364:	mov	r1, r7
   28368:	mov	r3, r6
   2836c:	mov	r2, r0
   28370:	mov	r0, r4
   28374:	bl	2691c <__assert_fail@plt+0x153c4>
   28378:	cmp	r0, #16
   2837c:	mov	r1, r0
   28380:	beq	2843c <__assert_fail@plt+0x16ee4>
   28384:	cmp	r0, #0
   28388:	bne	28440 <__assert_fail@plt+0x16ee8>
   2838c:	ldr	r5, [r4]
   28390:	ldr	r6, [r4, #16]
   28394:	mov	r2, #256	; 0x100
   28398:	mov	r0, r6
   2839c:	bl	1145c <memset@plt>
   283a0:	ldr	r1, [r5, #36]	; 0x24
   283a4:	mov	r3, r6
   283a8:	add	r2, r1, #12
   283ac:	mov	r0, r4
   283b0:	add	r1, r1, #8
   283b4:	bl	1a718 <__assert_fail@plt+0x91c0>
   283b8:	ldr	r1, [r5, #40]	; 0x28
   283bc:	ldr	r3, [r5, #36]	; 0x24
   283c0:	cmp	r3, r1
   283c4:	beq	283e0 <__assert_fail@plt+0x16e88>
   283c8:	add	r2, r1, #12
   283cc:	mov	r3, r6
   283d0:	add	r1, r1, #8
   283d4:	mov	r0, r4
   283d8:	bl	1a718 <__assert_fail@plt+0x91c0>
   283dc:	ldr	r1, [r5, #36]	; 0x24
   283e0:	ldr	r0, [r5, #44]	; 0x2c
   283e4:	cmp	r1, r0
   283e8:	beq	28404 <__assert_fail@plt+0x16eac>
   283ec:	add	r2, r0, #12
   283f0:	add	r1, r0, #8
   283f4:	mov	r3, r6
   283f8:	mov	r0, r4
   283fc:	bl	1a718 <__assert_fail@plt+0x91c0>
   28400:	ldr	r0, [r5, #36]	; 0x24
   28404:	ldr	r1, [r5, #48]	; 0x30
   28408:	cmp	r0, r1
   2840c:	beq	28424 <__assert_fail@plt+0x16ecc>
   28410:	add	r2, r1, #12
   28414:	mov	r3, r6
   28418:	add	r1, r1, #8
   2841c:	mov	r0, r4
   28420:	bl	1a718 <__assert_fail@plt+0x91c0>
   28424:	ldrb	r3, [r4, #28]
   28428:	mov	r0, #0
   2842c:	orr	r3, r3, #8
   28430:	strb	r3, [r4, #28]
   28434:	add	sp, sp, #8
   28438:	pop	{r4, r5, r6, r7, r8, pc}
   2843c:	mov	r1, #8
   28440:	ldr	r0, [r4, #16]
   28444:	str	r1, [sp, #4]
   28448:	bl	13c04 <__assert_fail@plt+0x26ac>
   2844c:	ldr	r1, [sp, #4]
   28450:	mov	r3, #0
   28454:	mov	r0, r1
   28458:	str	r3, [r4, #16]
   2845c:	b	28434 <__assert_fail@plt+0x16edc>
   28460:	mov	r0, #12
   28464:	add	sp, sp, #8
   28468:	pop	{r4, r5, r6, r7, r8, pc}
   2846c:	smlalbteq	r0, r1, r6, r2
   28470:	strdeq	fp, [r3], -ip
   28474:	strdeq	fp, [r3], #-44	; 0xffffffd4
   28478:	smlabteq	r1, r6, r2, r0
   2847c:	cmp	r0, #16
   28480:	push	{r4, r5, r6, r7, r8, lr}
   28484:	bhi	284ec <__assert_fail@plt+0x16f94>
   28488:	ldr	r1, [pc, #96]	; 284f0 <__assert_fail@plt+0x16f98>
   2848c:	mov	r4, r3
   28490:	add	r0, r1, r0, lsl #2
   28494:	add	r1, r1, #32
   28498:	ldr	r3, [r0, #416]	; 0x1a0
   2849c:	mov	r6, r2
   284a0:	add	r1, r1, r3
   284a4:	mov	r2, #5
   284a8:	mov	r0, #0
   284ac:	bl	112d0 <dcgettext@plt>
   284b0:	mov	r7, r0
   284b4:	bl	11414 <strlen@plt>
   284b8:	cmp	r4, #0
   284bc:	add	r5, r0, #1
   284c0:	beq	284e4 <__assert_fail@plt+0x16f8c>
   284c4:	cmp	r5, r4
   284c8:	subhi	r2, r4, #1
   284cc:	movhi	r3, #0
   284d0:	strbhi	r3, [r6, r2]
   284d4:	movls	r2, r5
   284d8:	mov	r1, r7
   284dc:	mov	r0, r6
   284e0:	bl	11264 <memcpy@plt>
   284e4:	mov	r0, r5
   284e8:	pop	{r4, r5, r6, r7, r8, pc}
   284ec:	bl	11534 <abort@plt>
   284f0:	andeq	sp, r2, r0
   284f4:	push	{r4, r5, r6, lr}
   284f8:	mov	r4, r0
   284fc:	ldr	r5, [r0]
   28500:	cmp	r5, #0
   28504:	beq	28544 <__assert_fail@plt+0x16fec>
   28508:	ldr	r2, [pc, #92]	; 2856c <__assert_fail@plt+0x17014>
   2850c:	ldr	r1, [pc, #92]	; 28570 <__assert_fail@plt+0x17018>
   28510:	cmp	r2, #0
   28514:	mov	r3, #1
   28518:	moveq	r3, r2
   2851c:	cmp	r1, #0
   28520:	mov	r2, #1
   28524:	moveq	r2, r1
   28528:	orr	r3, r3, r2
   2852c:	tst	r3, #1
   28530:	beq	2853c <__assert_fail@plt+0x16fe4>
   28534:	add	r0, r5, #136	; 0x88
   28538:	bl	11210 <pthread_mutex_destroy@plt>
   2853c:	mov	r0, r5
   28540:	bl	1b92c <__assert_fail@plt+0xa3d4>
   28544:	mov	r5, #0
   28548:	ldr	r0, [r4, #16]
   2854c:	str	r5, [r4]
   28550:	str	r5, [r4, #4]
   28554:	bl	13c04 <__assert_fail@plt+0x26ac>
   28558:	str	r5, [r4, #16]
   2855c:	ldr	r0, [r4, #20]
   28560:	bl	13c04 <__assert_fail@plt+0x26ac>
   28564:	str	r5, [r4, #20]
   28568:	pop	{r4, r5, r6, pc}
	...
   28574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28578:	sub	sp, sp, #36	; 0x24
   2857c:	ldr	r4, [sp, #72]	; 0x48
   28580:	bics	ip, r4, #7
   28584:	movne	r0, #2
   28588:	beq	28594 <__assert_fail@plt+0x1703c>
   2858c:	add	sp, sp, #36	; 0x24
   28590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28594:	ands	fp, r4, #4
   28598:	mov	r8, r3
   2859c:	str	r2, [sp, #28]
   285a0:	mov	r7, r1
   285a4:	mov	r5, r0
   285a8:	bne	2864c <__assert_fail@plt+0x170f4>
   285ac:	mov	r0, r1
   285b0:	bl	11414 <strlen@plt>
   285b4:	mov	r9, r0
   285b8:	ldr	r3, [pc, #204]	; 2868c <__assert_fail@plt+0x17134>
   285bc:	ldr	r1, [pc, #204]	; 28690 <__assert_fail@plt+0x17138>
   285c0:	cmp	r3, #0
   285c4:	mov	r6, #1
   285c8:	moveq	r6, r3
   285cc:	cmp	r1, #0
   285d0:	mov	r3, #1
   285d4:	moveq	r3, r1
   285d8:	orr	r6, r6, r3
   285dc:	ands	r6, r6, #255	; 0xff
   285e0:	ldr	sl, [r5]
   285e4:	beq	285f0 <__assert_fail@plt+0x17098>
   285e8:	add	r0, sl, #136	; 0x88
   285ec:	bl	1124c <pthread_mutex_lock@plt>
   285f0:	ldrb	r3, [r5, #28]
   285f4:	tst	r3, #16
   285f8:	beq	28658 <__assert_fail@plt+0x17100>
   285fc:	mov	ip, #0
   28600:	str	r4, [sp, #16]
   28604:	str	r9, [sp, #4]
   28608:	str	r9, [sp]
   2860c:	mov	r3, fp
   28610:	mov	r2, r9
   28614:	mov	r1, r7
   28618:	mov	r0, r5
   2861c:	str	ip, [sp, #12]
   28620:	str	ip, [sp, #8]
   28624:	bl	242b4 <__assert_fail@plt+0x12d5c>
   28628:	mov	r4, r0
   2862c:	cmp	r6, #0
   28630:	beq	2863c <__assert_fail@plt+0x170e4>
   28634:	add	r0, sl, #136	; 0x88
   28638:	bl	11198 <pthread_mutex_unlock@plt>
   2863c:	adds	r0, r4, #0
   28640:	movne	r0, #1
   28644:	add	sp, sp, #36	; 0x24
   28648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2864c:	ldr	fp, [r3]
   28650:	ldr	r9, [r3, #4]
   28654:	b	285b8 <__assert_fail@plt+0x17060>
   28658:	ldr	r3, [sp, #28]
   2865c:	str	r4, [sp, #16]
   28660:	str	r3, [sp, #8]
   28664:	str	r8, [sp, #12]
   28668:	str	r9, [sp, #4]
   2866c:	str	r9, [sp]
   28670:	mov	r3, fp
   28674:	mov	r2, r9
   28678:	mov	r1, r7
   2867c:	mov	r0, r5
   28680:	bl	242b4 <__assert_fail@plt+0x12d5c>
   28684:	mov	r4, r0
   28688:	b	2862c <__assert_fail@plt+0x170d4>
	...
   28694:	push	{r4, lr}
   28698:	sub	sp, sp, #16
   2869c:	mov	lr, #1
   286a0:	ldr	r4, [sp, #24]
   286a4:	mov	ip, #0
   286a8:	str	ip, [sp]
   286ac:	stmib	sp, {r2, r4, lr}
   286b0:	bl	27f14 <__assert_fail@plt+0x169bc>
   286b4:	add	sp, sp, #16
   286b8:	pop	{r4, pc}
   286bc:	push	{r4, lr}
   286c0:	sub	sp, sp, #16
   286c4:	mov	ip, #0
   286c8:	ldr	r4, [sp, #24]
   286cc:	ldr	lr, [sp, #28]
   286d0:	str	r2, [sp, #4]
   286d4:	str	r4, [sp]
   286d8:	str	lr, [sp, #8]
   286dc:	str	ip, [sp, #12]
   286e0:	bl	27f14 <__assert_fail@plt+0x169bc>
   286e4:	add	sp, sp, #16
   286e8:	pop	{r4, pc}
   286ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   286f0:	sub	sp, sp, #20
   286f4:	mov	r5, r2
   286f8:	ldr	r6, [sp, #68]	; 0x44
   286fc:	ldr	r4, [sp, #56]	; 0x38
   28700:	orr	r2, r2, r6
   28704:	orrs	r2, r2, r4
   28708:	bmi	28730 <__assert_fail@plt+0x171d8>
   2870c:	cmp	r4, #0
   28710:	mov	sl, r0
   28714:	mov	fp, r1
   28718:	mov	r7, r3
   2871c:	blt	28740 <__assert_fail@plt+0x171e8>
   28720:	mvn	r3, #-2147483648	; 0x80000000
   28724:	sub	r3, r3, r4
   28728:	cmp	r5, r3
   2872c:	ble	28740 <__assert_fail@plt+0x171e8>
   28730:	mvn	r4, #1
   28734:	mov	r0, r4
   28738:	add	sp, sp, #20
   2873c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28740:	cmp	r4, #0
   28744:	add	r9, r5, r4
   28748:	ble	287d4 <__assert_fail@plt+0x1727c>
   2874c:	cmp	r5, #0
   28750:	beq	287cc <__assert_fail@plt+0x17274>
   28754:	mov	r0, r9
   28758:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   2875c:	subs	r8, r0, #0
   28760:	beq	28730 <__assert_fail@plt+0x171d8>
   28764:	mov	r1, fp
   28768:	mov	r2, r5
   2876c:	bl	11264 <memcpy@plt>
   28770:	mov	r1, r7
   28774:	mov	r2, r4
   28778:	add	r0, r8, r5
   2877c:	bl	11264 <memcpy@plt>
   28780:	mov	r7, r8
   28784:	ldr	r2, [sp, #64]	; 0x40
   28788:	mov	ip, #1
   2878c:	mov	r3, #0
   28790:	str	r2, [sp, #8]
   28794:	mov	r1, r7
   28798:	mov	r2, r9
   2879c:	str	ip, [sp, #12]
   287a0:	str	r3, [sp]
   287a4:	str	r6, [sp, #4]
   287a8:	ldr	r3, [sp, #60]	; 0x3c
   287ac:	mov	r0, sl
   287b0:	bl	27f14 <__assert_fail@plt+0x169bc>
   287b4:	mov	r4, r0
   287b8:	mov	r0, r8
   287bc:	bl	13c04 <__assert_fail@plt+0x26ac>
   287c0:	mov	r0, r4
   287c4:	add	sp, sp, #20
   287c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   287cc:	mov	r8, r5
   287d0:	b	28784 <__assert_fail@plt+0x1722c>
   287d4:	mov	r7, fp
   287d8:	mov	r8, #0
   287dc:	b	28784 <__assert_fail@plt+0x1722c>
   287e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   287e4:	sub	sp, sp, #20
   287e8:	mov	r5, r2
   287ec:	ldr	r6, [sp, #72]	; 0x48
   287f0:	ldr	r4, [sp, #56]	; 0x38
   287f4:	orr	r2, r2, r6
   287f8:	orrs	r2, r2, r4
   287fc:	bmi	28824 <__assert_fail@plt+0x172cc>
   28800:	cmp	r4, #0
   28804:	mov	sl, r0
   28808:	mov	fp, r1
   2880c:	mov	r7, r3
   28810:	blt	28834 <__assert_fail@plt+0x172dc>
   28814:	mvn	r3, #-2147483648	; 0x80000000
   28818:	sub	r3, r3, r4
   2881c:	cmp	r5, r3
   28820:	ble	28834 <__assert_fail@plt+0x172dc>
   28824:	mvn	r4, #1
   28828:	mov	r0, r4
   2882c:	add	sp, sp, #20
   28830:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28834:	cmp	r4, #0
   28838:	add	r9, r5, r4
   2883c:	ble	288c8 <__assert_fail@plt+0x17370>
   28840:	cmp	r5, #0
   28844:	beq	288c0 <__assert_fail@plt+0x17368>
   28848:	mov	r0, r9
   2884c:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   28850:	subs	r8, r0, #0
   28854:	beq	28824 <__assert_fail@plt+0x172cc>
   28858:	mov	r1, fp
   2885c:	mov	r2, r5
   28860:	bl	11264 <memcpy@plt>
   28864:	mov	r1, r7
   28868:	mov	r2, r4
   2886c:	add	r0, r8, r5
   28870:	bl	11264 <memcpy@plt>
   28874:	mov	r7, r8
   28878:	ldr	r2, [sp, #68]	; 0x44
   2887c:	mov	r3, #0
   28880:	str	r2, [sp, #8]
   28884:	ldr	r2, [sp, #64]	; 0x40
   28888:	mov	r1, r7
   2888c:	str	r2, [sp]
   28890:	str	r3, [sp, #12]
   28894:	mov	r2, r9
   28898:	ldr	r3, [sp, #60]	; 0x3c
   2889c:	str	r6, [sp, #4]
   288a0:	mov	r0, sl
   288a4:	bl	27f14 <__assert_fail@plt+0x169bc>
   288a8:	mov	r4, r0
   288ac:	mov	r0, r8
   288b0:	bl	13c04 <__assert_fail@plt+0x26ac>
   288b4:	mov	r0, r4
   288b8:	add	sp, sp, #20
   288bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   288c0:	mov	r8, r5
   288c4:	b	28878 <__assert_fail@plt+0x17320>
   288c8:	mov	r7, fp
   288cc:	mov	r8, #0
   288d0:	b	28878 <__assert_fail@plt+0x17320>
   288d4:	cmp	r2, #0
   288d8:	bne	288f8 <__assert_fail@plt+0x173a0>
   288dc:	ldrb	r3, [r0, #28]
   288e0:	bic	r3, r3, #6
   288e4:	strb	r3, [r0, #28]
   288e8:	str	r2, [r1]
   288ec:	str	r2, [r1, #8]
   288f0:	str	r2, [r1, #4]
   288f4:	bx	lr
   288f8:	ldrb	ip, [r0, #28]
   288fc:	bic	ip, ip, #4
   28900:	orr	ip, ip, #2
   28904:	strb	ip, [r0, #28]
   28908:	stm	r1, {r2, r3}
   2890c:	ldr	r3, [sp]
   28910:	str	r3, [r1, #8]
   28914:	bx	lr
   28918:	push	{r4, r5, r6, r7, r8, lr}
   2891c:	mov	r8, r0
   28920:	ldr	r5, [pc, #84]	; 2897c <__assert_fail@plt+0x17424>
   28924:	mov	r7, r1
   28928:	mov	r4, r2
   2892c:	mov	r2, r4
   28930:	mov	r1, r7
   28934:	mov	r0, r8
   28938:	bl	11204 <read@plt>
   2893c:	subs	r6, r0, #0
   28940:	bge	28974 <__assert_fail@plt+0x1741c>
   28944:	bl	1142c <__errno_location@plt>
   28948:	ldr	r3, [r0]
   2894c:	cmp	r3, #4
   28950:	beq	2892c <__assert_fail@plt+0x173d4>
   28954:	cmp	r4, r5
   28958:	movls	r2, #0
   2895c:	movhi	r2, #1
   28960:	cmp	r3, #22
   28964:	movne	r2, #0
   28968:	cmp	r2, #0
   2896c:	mov	r4, r5
   28970:	bne	2892c <__assert_fail@plt+0x173d4>
   28974:	mov	r0, r6
   28978:	pop	{r4, r5, r6, r7, r8, pc}
   2897c:	svcvc	0x00f00000	; IMB
   28980:	mov	r2, #3
   28984:	mov	r1, #0
   28988:	b	2b818 <__assert_fail@plt+0x1a2c0>
   2898c:	push	{r4, r5, r6, lr}
   28990:	sub	sp, sp, #32
   28994:	cmp	r1, #0
   28998:	mov	r4, r0
   2899c:	ldr	r5, [sp, #48]	; 0x30
   289a0:	ldr	r6, [sp, #52]	; 0x34
   289a4:	beq	28cbc <__assert_fail@plt+0x17764>
   289a8:	stm	sp, {r2, r3}
   289ac:	mov	r3, r1
   289b0:	ldr	r2, [pc, #808]	; 28ce0 <__assert_fail@plt+0x17788>
   289b4:	mov	r1, #1
   289b8:	bl	1148c <__fprintf_chk@plt>
   289bc:	mov	r2, #5
   289c0:	ldr	r1, [pc, #796]	; 28ce4 <__assert_fail@plt+0x1778c>
   289c4:	mov	r0, #0
   289c8:	bl	112d0 <dcgettext@plt>
   289cc:	ldr	r3, [pc, #788]	; 28ce8 <__assert_fail@plt+0x17790>
   289d0:	ldr	r2, [pc, #788]	; 28cec <__assert_fail@plt+0x17794>
   289d4:	str	r3, [sp]
   289d8:	mov	r1, #1
   289dc:	mov	r3, r0
   289e0:	mov	r0, r4
   289e4:	bl	1148c <__fprintf_chk@plt>
   289e8:	mov	r1, r4
   289ec:	mov	r0, #10
   289f0:	bl	112c4 <fputc_unlocked@plt>
   289f4:	mov	r2, #5
   289f8:	ldr	r1, [pc, #752]	; 28cf0 <__assert_fail@plt+0x17798>
   289fc:	mov	r0, #0
   28a00:	bl	112d0 <dcgettext@plt>
   28a04:	mov	r1, #1
   28a08:	ldr	r3, [pc, #740]	; 28cf4 <__assert_fail@plt+0x1779c>
   28a0c:	mov	r2, r0
   28a10:	mov	r0, r4
   28a14:	bl	1148c <__fprintf_chk@plt>
   28a18:	mov	r1, r4
   28a1c:	mov	r0, #10
   28a20:	bl	112c4 <fputc_unlocked@plt>
   28a24:	cmp	r6, #9
   28a28:	ldrls	pc, [pc, r6, lsl #2]
   28a2c:	b	28cd4 <__assert_fail@plt+0x1777c>
   28a30:			; <UNDEFINED> instruction: 0x00028ab4
   28a34:			; <UNDEFINED> instruction: 0x00028abc
   28a38:	andeq	r8, r2, r8, ror #21
   28a3c:	andeq	r8, r2, ip, lsl fp
   28a40:	andeq	r8, r2, r8, asr fp
   28a44:	muleq	r2, r4, fp
   28a48:	ldrdeq	r8, [r2], -r0
   28a4c:	andeq	r8, r2, r4, lsl ip
   28a50:	andeq	r8, r2, r4, ror #24
   28a54:	andeq	r8, r2, r8, asr sl
   28a58:	ldr	r1, [pc, #664]	; 28cf8 <__assert_fail@plt+0x177a0>
   28a5c:	mov	r2, #5
   28a60:	mov	r0, #0
   28a64:	bl	112d0 <dcgettext@plt>
   28a68:	ldr	ip, [r5, #32]
   28a6c:	ldr	r1, [r5, #28]
   28a70:	ldr	r2, [r5, #24]
   28a74:	ldr	r3, [r5]
   28a78:	ldr	r6, [r5, #20]
   28a7c:	str	ip, [sp, #28]
   28a80:	ldr	lr, [r5, #16]
   28a84:	str	r1, [sp, #24]
   28a88:	ldr	ip, [r5, #12]
   28a8c:	str	r2, [sp, #20]
   28a90:	ldr	r1, [r5, #8]
   28a94:	ldr	r2, [r5, #4]
   28a98:	str	r6, [sp, #16]
   28a9c:	stmib	sp, {r1, ip, lr}
   28aa0:	mov	r1, #1
   28aa4:	str	r2, [sp]
   28aa8:	mov	r2, r0
   28aac:	mov	r0, r4
   28ab0:	bl	1148c <__fprintf_chk@plt>
   28ab4:	add	sp, sp, #32
   28ab8:	pop	{r4, r5, r6, pc}
   28abc:	mov	r2, #5
   28ac0:	ldr	r1, [pc, #564]	; 28cfc <__assert_fail@plt+0x177a4>
   28ac4:	mov	r0, #0
   28ac8:	bl	112d0 <dcgettext@plt>
   28acc:	ldr	r3, [r5]
   28ad0:	mov	r1, #1
   28ad4:	mov	r2, r0
   28ad8:	mov	r0, r4
   28adc:	add	sp, sp, #32
   28ae0:	pop	{r4, r5, r6, lr}
   28ae4:	b	1148c <__fprintf_chk@plt>
   28ae8:	mov	r2, #5
   28aec:	ldr	r1, [pc, #524]	; 28d00 <__assert_fail@plt+0x177a8>
   28af0:	mov	r0, #0
   28af4:	bl	112d0 <dcgettext@plt>
   28af8:	ldr	r2, [r5, #4]
   28afc:	ldr	r3, [r5]
   28b00:	mov	r1, #1
   28b04:	str	r2, [sp, #48]	; 0x30
   28b08:	mov	r2, r0
   28b0c:	mov	r0, r4
   28b10:	add	sp, sp, #32
   28b14:	pop	{r4, r5, r6, lr}
   28b18:	b	1148c <__fprintf_chk@plt>
   28b1c:	mov	r2, #5
   28b20:	ldr	r1, [pc, #476]	; 28d04 <__assert_fail@plt+0x177ac>
   28b24:	mov	r0, #0
   28b28:	bl	112d0 <dcgettext@plt>
   28b2c:	ldr	r1, [r5, #8]
   28b30:	ldr	r2, [r5, #4]
   28b34:	ldr	r3, [r5]
   28b38:	str	r1, [sp, #52]	; 0x34
   28b3c:	str	r2, [sp, #48]	; 0x30
   28b40:	mov	r1, #1
   28b44:	mov	r2, r0
   28b48:	mov	r0, r4
   28b4c:	add	sp, sp, #32
   28b50:	pop	{r4, r5, r6, lr}
   28b54:	b	1148c <__fprintf_chk@plt>
   28b58:	mov	r2, #5
   28b5c:	ldr	r1, [pc, #420]	; 28d08 <__assert_fail@plt+0x177b0>
   28b60:	mov	r0, #0
   28b64:	bl	112d0 <dcgettext@plt>
   28b68:	ldr	r1, [r5, #8]
   28b6c:	ldr	ip, [r5, #12]
   28b70:	ldr	r2, [r5, #4]
   28b74:	ldr	r3, [r5]
   28b78:	stmib	sp, {r1, ip}
   28b7c:	str	r2, [sp]
   28b80:	mov	r1, #1
   28b84:	mov	r2, r0
   28b88:	mov	r0, r4
   28b8c:	bl	1148c <__fprintf_chk@plt>
   28b90:	b	28ab4 <__assert_fail@plt+0x1755c>
   28b94:	mov	r2, #5
   28b98:	ldr	r1, [pc, #364]	; 28d0c <__assert_fail@plt+0x177b4>
   28b9c:	mov	r0, #0
   28ba0:	bl	112d0 <dcgettext@plt>
   28ba4:	add	r1, r5, #8
   28ba8:	ldr	r2, [r5, #4]
   28bac:	ldm	r1, {r1, ip, lr}
   28bb0:	ldr	r3, [r5]
   28bb4:	str	r2, [sp]
   28bb8:	stmib	sp, {r1, ip, lr}
   28bbc:	mov	r1, #1
   28bc0:	mov	r2, r0
   28bc4:	mov	r0, r4
   28bc8:	bl	1148c <__fprintf_chk@plt>
   28bcc:	b	28ab4 <__assert_fail@plt+0x1755c>
   28bd0:	mov	r2, #5
   28bd4:	ldr	r1, [pc, #308]	; 28d10 <__assert_fail@plt+0x177b8>
   28bd8:	mov	r0, #0
   28bdc:	bl	112d0 <dcgettext@plt>
   28be0:	add	r1, r5, #8
   28be4:	ldr	r2, [r5, #4]
   28be8:	ldm	r1, {r1, ip, lr}
   28bec:	ldr	r6, [r5, #20]
   28bf0:	ldr	r3, [r5]
   28bf4:	stmib	sp, {r1, ip, lr}
   28bf8:	mov	r1, #1
   28bfc:	str	r2, [sp]
   28c00:	str	r6, [sp, #16]
   28c04:	mov	r2, r0
   28c08:	mov	r0, r4
   28c0c:	bl	1148c <__fprintf_chk@plt>
   28c10:	b	28ab4 <__assert_fail@plt+0x1755c>
   28c14:	mov	r2, #5
   28c18:	ldr	r1, [pc, #244]	; 28d14 <__assert_fail@plt+0x177bc>
   28c1c:	mov	r0, #0
   28c20:	bl	112d0 <dcgettext@plt>
   28c24:	ldr	r2, [r5, #24]
   28c28:	ldr	r3, [r5]
   28c2c:	ldr	r6, [r5, #20]
   28c30:	ldr	lr, [r5, #16]
   28c34:	ldr	ip, [r5, #12]
   28c38:	str	r2, [sp, #20]
   28c3c:	ldr	r1, [r5, #8]
   28c40:	ldr	r2, [r5, #4]
   28c44:	str	r6, [sp, #16]
   28c48:	stmib	sp, {r1, ip, lr}
   28c4c:	mov	r1, #1
   28c50:	str	r2, [sp]
   28c54:	mov	r2, r0
   28c58:	mov	r0, r4
   28c5c:	bl	1148c <__fprintf_chk@plt>
   28c60:	b	28ab4 <__assert_fail@plt+0x1755c>
   28c64:	mov	r2, #5
   28c68:	ldr	r1, [pc, #168]	; 28d18 <__assert_fail@plt+0x177c0>
   28c6c:	mov	r0, #0
   28c70:	bl	112d0 <dcgettext@plt>
   28c74:	ldr	r1, [r5, #28]
   28c78:	ldr	r2, [r5, #24]
   28c7c:	ldr	r3, [r5]
   28c80:	ldr	r6, [r5, #20]
   28c84:	ldr	lr, [r5, #16]
   28c88:	str	r1, [sp, #24]
   28c8c:	ldr	ip, [r5, #12]
   28c90:	str	r2, [sp, #20]
   28c94:	ldr	r1, [r5, #8]
   28c98:	ldr	r2, [r5, #4]
   28c9c:	str	r6, [sp, #16]
   28ca0:	stmib	sp, {r1, ip, lr}
   28ca4:	mov	r1, #1
   28ca8:	str	r2, [sp]
   28cac:	mov	r2, r0
   28cb0:	mov	r0, r4
   28cb4:	bl	1148c <__fprintf_chk@plt>
   28cb8:	b	28ab4 <__assert_fail@plt+0x1755c>
   28cbc:	str	r3, [sp]
   28cc0:	mov	r1, #1
   28cc4:	mov	r3, r2
   28cc8:	ldr	r2, [pc, #76]	; 28d1c <__assert_fail@plt+0x177c4>
   28ccc:	bl	1148c <__fprintf_chk@plt>
   28cd0:	b	289bc <__assert_fail@plt+0x17464>
   28cd4:	mov	r2, #5
   28cd8:	ldr	r1, [pc, #64]	; 28d20 <__assert_fail@plt+0x177c8>
   28cdc:	b	28a60 <__assert_fail@plt+0x17508>
   28ce0:	andeq	sp, r2, ip, asr #4
   28ce4:	andeq	sp, r2, r0, ror #4
   28ce8:	andeq	r0, r0, r6, ror #15
   28cec:	andeq	sp, r2, r8, lsr r5
   28cf0:	andeq	sp, r2, r4, ror #4
   28cf4:	andeq	sp, r2, r0, lsl r3
   28cf8:	andeq	sp, r2, r0, asr #8
   28cfc:	andeq	sp, r2, r4, lsr r3
   28d00:	andeq	sp, r2, r4, asr #6
   28d04:	andeq	sp, r2, ip, asr r3
   28d08:	andeq	sp, r2, r8, ror r3
   28d0c:	muleq	r2, r8, r3
   28d10:			; <UNDEFINED> instruction: 0x0002d3bc
   28d14:	andeq	sp, r2, r4, ror #7
   28d18:	andeq	sp, r2, r0, lsl r4
   28d1c:	andeq	sp, r2, r8, asr r2
   28d20:	andeq	sp, r2, r4, ror r4
   28d24:	push	{r4, r5, lr}
   28d28:	sub	sp, sp, #12
   28d2c:	ldr	r5, [sp, #24]
   28d30:	ldr	ip, [r5]
   28d34:	cmp	ip, #0
   28d38:	beq	28d54 <__assert_fail@plt+0x177fc>
   28d3c:	mov	lr, r5
   28d40:	mov	ip, #0
   28d44:	ldr	r4, [lr, #4]!
   28d48:	add	ip, ip, #1
   28d4c:	cmp	r4, #0
   28d50:	bne	28d44 <__assert_fail@plt+0x177ec>
   28d54:	stm	sp, {r5, ip}
   28d58:	bl	2898c <__assert_fail@plt+0x17434>
   28d5c:	add	sp, sp, #12
   28d60:	pop	{r4, r5, pc}
   28d64:	push	{r4, r5, lr}
   28d68:	sub	sp, sp, #76	; 0x4c
   28d6c:	mov	r5, r0
   28d70:	ldr	ip, [sp, #88]	; 0x58
   28d74:	ldr	r0, [ip]
   28d78:	cmp	r0, #0
   28d7c:	str	r0, [sp, #32]
   28d80:	beq	29154 <__assert_fail@plt+0x17bfc>
   28d84:	ldr	r0, [ip, #4]
   28d88:	cmp	r0, #0
   28d8c:	str	r0, [sp, #36]	; 0x24
   28d90:	beq	2915c <__assert_fail@plt+0x17c04>
   28d94:	ldr	r0, [ip, #8]
   28d98:	cmp	r0, #0
   28d9c:	str	r0, [sp, #40]	; 0x28
   28da0:	beq	29164 <__assert_fail@plt+0x17c0c>
   28da4:	ldr	r0, [ip, #12]
   28da8:	cmp	r0, #0
   28dac:	str	r0, [sp, #44]	; 0x2c
   28db0:	beq	2916c <__assert_fail@plt+0x17c14>
   28db4:	ldr	r0, [ip, #16]
   28db8:	cmp	r0, #0
   28dbc:	str	r0, [sp, #48]	; 0x30
   28dc0:	beq	29174 <__assert_fail@plt+0x17c1c>
   28dc4:	ldr	r0, [ip, #20]
   28dc8:	cmp	r0, #0
   28dcc:	str	r0, [sp, #52]	; 0x34
   28dd0:	beq	2917c <__assert_fail@plt+0x17c24>
   28dd4:	ldr	r0, [ip, #24]
   28dd8:	cmp	r0, #0
   28ddc:	str	r0, [sp, #56]	; 0x38
   28de0:	beq	29184 <__assert_fail@plt+0x17c2c>
   28de4:	ldr	r0, [ip, #28]
   28de8:	cmp	r0, #0
   28dec:	str	r0, [sp, #60]	; 0x3c
   28df0:	beq	2918c <__assert_fail@plt+0x17c34>
   28df4:	ldr	r0, [ip, #32]
   28df8:	cmp	r0, #0
   28dfc:	str	r0, [sp, #64]	; 0x40
   28e00:	beq	29194 <__assert_fail@plt+0x17c3c>
   28e04:	ldr	r0, [ip, #36]	; 0x24
   28e08:	cmp	r0, #0
   28e0c:	movne	r4, #10
   28e10:	moveq	r4, #9
   28e14:	cmp	r1, #0
   28e18:	beq	2912c <__assert_fail@plt+0x17bd4>
   28e1c:	stm	sp, {r2, r3}
   28e20:	mov	r0, r5
   28e24:	mov	r3, r1
   28e28:	ldr	r2, [pc, #876]	; 2919c <__assert_fail@plt+0x17c44>
   28e2c:	mov	r1, #1
   28e30:	bl	1148c <__fprintf_chk@plt>
   28e34:	mov	r2, #5
   28e38:	ldr	r1, [pc, #864]	; 291a0 <__assert_fail@plt+0x17c48>
   28e3c:	mov	r0, #0
   28e40:	bl	112d0 <dcgettext@plt>
   28e44:	ldr	r3, [pc, #856]	; 291a4 <__assert_fail@plt+0x17c4c>
   28e48:	ldr	r2, [pc, #856]	; 291a8 <__assert_fail@plt+0x17c50>
   28e4c:	str	r3, [sp]
   28e50:	mov	r1, #1
   28e54:	mov	r3, r0
   28e58:	mov	r0, r5
   28e5c:	bl	1148c <__fprintf_chk@plt>
   28e60:	mov	r1, r5
   28e64:	mov	r0, #10
   28e68:	bl	112c4 <fputc_unlocked@plt>
   28e6c:	mov	r2, #5
   28e70:	ldr	r1, [pc, #820]	; 291ac <__assert_fail@plt+0x17c54>
   28e74:	mov	r0, #0
   28e78:	bl	112d0 <dcgettext@plt>
   28e7c:	mov	r1, #1
   28e80:	ldr	r3, [pc, #808]	; 291b0 <__assert_fail@plt+0x17c58>
   28e84:	mov	r2, r0
   28e88:	mov	r0, r5
   28e8c:	bl	1148c <__fprintf_chk@plt>
   28e90:	mov	r1, r5
   28e94:	mov	r0, #10
   28e98:	bl	112c4 <fputc_unlocked@plt>
   28e9c:	cmp	r4, #9
   28ea0:	ldrls	pc, [pc, r4, lsl #2]
   28ea4:	b	29148 <__assert_fail@plt+0x17bf0>
   28ea8:	andeq	r8, r2, ip, lsr #30
   28eac:	andeq	r8, r2, r4, lsr pc
   28eb0:	andeq	r8, r2, r0, ror #30
   28eb4:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   28eb8:	andeq	r8, r2, ip, asr #31
   28ebc:	andeq	r9, r2, r8
   28ec0:	andeq	r9, r2, r4, asr #32
   28ec4:	andeq	r9, r2, r8, lsl #1
   28ec8:	ldrdeq	r9, [r2], -r4
   28ecc:	ldrdeq	r8, [r2], -r0
   28ed0:	ldr	r1, [pc, #732]	; 291b4 <__assert_fail@plt+0x17c5c>
   28ed4:	mov	r2, #5
   28ed8:	mov	r0, #0
   28edc:	bl	112d0 <dcgettext@plt>
   28ee0:	ldr	ip, [sp, #64]	; 0x40
   28ee4:	ldr	r1, [sp, #60]	; 0x3c
   28ee8:	ldr	r2, [sp, #56]	; 0x38
   28eec:	ldr	lr, [sp, #48]	; 0x30
   28ef0:	str	ip, [sp, #28]
   28ef4:	str	r1, [sp, #24]
   28ef8:	ldr	ip, [sp, #44]	; 0x2c
   28efc:	ldr	r1, [sp, #40]	; 0x28
   28f00:	ldr	r4, [sp, #52]	; 0x34
   28f04:	str	r2, [sp, #20]
   28f08:	ldr	r2, [sp, #36]	; 0x24
   28f0c:	stmib	sp, {r1, ip, lr}
   28f10:	mov	r1, #1
   28f14:	str	r2, [sp]
   28f18:	ldr	r3, [sp, #32]
   28f1c:	str	r4, [sp, #16]
   28f20:	mov	r2, r0
   28f24:	mov	r0, r5
   28f28:	bl	1148c <__fprintf_chk@plt>
   28f2c:	add	sp, sp, #76	; 0x4c
   28f30:	pop	{r4, r5, pc}
   28f34:	mov	r2, #5
   28f38:	ldr	r1, [pc, #632]	; 291b8 <__assert_fail@plt+0x17c60>
   28f3c:	mov	r0, #0
   28f40:	bl	112d0 <dcgettext@plt>
   28f44:	ldr	r3, [sp, #32]
   28f48:	mov	r1, #1
   28f4c:	mov	r2, r0
   28f50:	mov	r0, r5
   28f54:	add	sp, sp, #76	; 0x4c
   28f58:	pop	{r4, r5, lr}
   28f5c:	b	1148c <__fprintf_chk@plt>
   28f60:	mov	r2, #5
   28f64:	ldr	r1, [pc, #592]	; 291bc <__assert_fail@plt+0x17c64>
   28f68:	mov	r0, #0
   28f6c:	bl	112d0 <dcgettext@plt>
   28f70:	ldr	r2, [sp, #36]	; 0x24
   28f74:	ldr	r3, [sp, #32]
   28f78:	str	r2, [sp, #88]	; 0x58
   28f7c:	mov	r1, #1
   28f80:	mov	r2, r0
   28f84:	mov	r0, r5
   28f88:	add	sp, sp, #76	; 0x4c
   28f8c:	pop	{r4, r5, lr}
   28f90:	b	1148c <__fprintf_chk@plt>
   28f94:	mov	r2, #5
   28f98:	ldr	r1, [pc, #544]	; 291c0 <__assert_fail@plt+0x17c68>
   28f9c:	mov	r0, #0
   28fa0:	bl	112d0 <dcgettext@plt>
   28fa4:	ldr	r1, [sp, #40]	; 0x28
   28fa8:	ldr	r2, [sp, #36]	; 0x24
   28fac:	str	r1, [sp, #4]
   28fb0:	str	r2, [sp]
   28fb4:	ldr	r3, [sp, #32]
   28fb8:	mov	r1, #1
   28fbc:	mov	r2, r0
   28fc0:	mov	r0, r5
   28fc4:	bl	1148c <__fprintf_chk@plt>
   28fc8:	b	28f2c <__assert_fail@plt+0x179d4>
   28fcc:	mov	r2, #5
   28fd0:	ldr	r1, [pc, #492]	; 291c4 <__assert_fail@plt+0x17c6c>
   28fd4:	mov	r0, #0
   28fd8:	bl	112d0 <dcgettext@plt>
   28fdc:	ldr	r1, [sp, #40]	; 0x28
   28fe0:	ldr	ip, [sp, #44]	; 0x2c
   28fe4:	ldr	r2, [sp, #36]	; 0x24
   28fe8:	ldr	r3, [sp, #32]
   28fec:	stmib	sp, {r1, ip}
   28ff0:	str	r2, [sp]
   28ff4:	mov	r1, #1
   28ff8:	mov	r2, r0
   28ffc:	mov	r0, r5
   29000:	bl	1148c <__fprintf_chk@plt>
   29004:	b	28f2c <__assert_fail@plt+0x179d4>
   29008:	mov	r2, #5
   2900c:	ldr	r1, [pc, #436]	; 291c8 <__assert_fail@plt+0x17c70>
   29010:	mov	r0, #0
   29014:	bl	112d0 <dcgettext@plt>
   29018:	add	r1, sp, #40	; 0x28
   2901c:	ldr	r2, [sp, #36]	; 0x24
   29020:	ldm	r1, {r1, ip, lr}
   29024:	ldr	r3, [sp, #32]
   29028:	str	r2, [sp]
   2902c:	stmib	sp, {r1, ip, lr}
   29030:	mov	r1, #1
   29034:	mov	r2, r0
   29038:	mov	r0, r5
   2903c:	bl	1148c <__fprintf_chk@plt>
   29040:	b	28f2c <__assert_fail@plt+0x179d4>
   29044:	mov	r2, #5
   29048:	ldr	r1, [pc, #380]	; 291cc <__assert_fail@plt+0x17c74>
   2904c:	mov	r0, #0
   29050:	bl	112d0 <dcgettext@plt>
   29054:	add	r1, sp, #40	; 0x28
   29058:	ldr	r2, [sp, #36]	; 0x24
   2905c:	ldm	r1, {r1, ip, lr}
   29060:	ldr	r4, [sp, #52]	; 0x34
   29064:	str	r2, [sp]
   29068:	stmib	sp, {r1, ip, lr}
   2906c:	mov	r1, #1
   29070:	ldr	r3, [sp, #32]
   29074:	str	r4, [sp, #16]
   29078:	mov	r2, r0
   2907c:	mov	r0, r5
   29080:	bl	1148c <__fprintf_chk@plt>
   29084:	b	28f2c <__assert_fail@plt+0x179d4>
   29088:	mov	r2, #5
   2908c:	ldr	r1, [pc, #316]	; 291d0 <__assert_fail@plt+0x17c78>
   29090:	mov	r0, #0
   29094:	bl	112d0 <dcgettext@plt>
   29098:	add	r1, sp, #40	; 0x28
   2909c:	ldr	r2, [sp, #56]	; 0x38
   290a0:	ldm	r1, {r1, ip, lr}
   290a4:	ldr	r4, [sp, #52]	; 0x34
   290a8:	str	r2, [sp, #20]
   290ac:	ldr	r2, [sp, #36]	; 0x24
   290b0:	stmib	sp, {r1, ip, lr}
   290b4:	mov	r1, #1
   290b8:	str	r2, [sp]
   290bc:	ldr	r3, [sp, #32]
   290c0:	str	r4, [sp, #16]
   290c4:	mov	r2, r0
   290c8:	mov	r0, r5
   290cc:	bl	1148c <__fprintf_chk@plt>
   290d0:	b	28f2c <__assert_fail@plt+0x179d4>
   290d4:	mov	r2, #5
   290d8:	ldr	r1, [pc, #244]	; 291d4 <__assert_fail@plt+0x17c7c>
   290dc:	mov	r0, #0
   290e0:	bl	112d0 <dcgettext@plt>
   290e4:	ldr	r1, [sp, #60]	; 0x3c
   290e8:	ldr	r2, [sp, #56]	; 0x38
   290ec:	ldr	lr, [sp, #48]	; 0x30
   290f0:	ldr	ip, [sp, #44]	; 0x2c
   290f4:	str	r1, [sp, #24]
   290f8:	ldr	r1, [sp, #40]	; 0x28
   290fc:	ldr	r4, [sp, #52]	; 0x34
   29100:	str	r2, [sp, #20]
   29104:	ldr	r2, [sp, #36]	; 0x24
   29108:	stmib	sp, {r1, ip, lr}
   2910c:	mov	r1, #1
   29110:	str	r2, [sp]
   29114:	ldr	r3, [sp, #32]
   29118:	str	r4, [sp, #16]
   2911c:	mov	r2, r0
   29120:	mov	r0, r5
   29124:	bl	1148c <__fprintf_chk@plt>
   29128:	b	28f2c <__assert_fail@plt+0x179d4>
   2912c:	str	r3, [sp]
   29130:	mov	r1, #1
   29134:	mov	r3, r2
   29138:	mov	r0, r5
   2913c:	ldr	r2, [pc, #148]	; 291d8 <__assert_fail@plt+0x17c80>
   29140:	bl	1148c <__fprintf_chk@plt>
   29144:	b	28e34 <__assert_fail@plt+0x178dc>
   29148:	mov	r2, #5
   2914c:	ldr	r1, [pc, #136]	; 291dc <__assert_fail@plt+0x17c84>
   29150:	b	28ed8 <__assert_fail@plt+0x17980>
   29154:	mov	r4, r0
   29158:	b	28e14 <__assert_fail@plt+0x178bc>
   2915c:	mov	r4, #1
   29160:	b	28e14 <__assert_fail@plt+0x178bc>
   29164:	mov	r4, #2
   29168:	b	28e14 <__assert_fail@plt+0x178bc>
   2916c:	mov	r4, #3
   29170:	b	28e14 <__assert_fail@plt+0x178bc>
   29174:	mov	r4, #4
   29178:	b	28e14 <__assert_fail@plt+0x178bc>
   2917c:	mov	r4, #5
   29180:	b	28e14 <__assert_fail@plt+0x178bc>
   29184:	mov	r4, #6
   29188:	b	28e14 <__assert_fail@plt+0x178bc>
   2918c:	mov	r4, #7
   29190:	b	28e14 <__assert_fail@plt+0x178bc>
   29194:	mov	r4, #8
   29198:	b	28e14 <__assert_fail@plt+0x178bc>
   2919c:	andeq	sp, r2, ip, asr #4
   291a0:	andeq	sp, r2, r0, ror #4
   291a4:	andeq	r0, r0, r6, ror #15
   291a8:	andeq	sp, r2, r8, lsr r5
   291ac:	andeq	sp, r2, r4, ror #4
   291b0:	andeq	sp, r2, r0, lsl r3
   291b4:	andeq	sp, r2, r0, asr #8
   291b8:	andeq	sp, r2, r4, lsr r3
   291bc:	andeq	sp, r2, r4, asr #6
   291c0:	andeq	sp, r2, ip, asr r3
   291c4:	andeq	sp, r2, r8, ror r3
   291c8:	muleq	r2, r8, r3
   291cc:			; <UNDEFINED> instruction: 0x0002d3bc
   291d0:	andeq	sp, r2, r4, ror #7
   291d4:	andeq	sp, r2, r0, lsl r4
   291d8:	andeq	sp, r2, r8, asr r2
   291dc:	andeq	sp, r2, r4, ror r4
   291e0:	push	{r3}		; (str r3, [sp, #-4]!)
   291e4:	push	{lr}		; (str lr, [sp, #-4]!)
   291e8:	sub	sp, sp, #56	; 0x38
   291ec:	add	r3, sp, #64	; 0x40
   291f0:	ldr	ip, [sp, #64]	; 0x40
   291f4:	str	r3, [sp, #12]
   291f8:	cmp	ip, #0
   291fc:	str	ip, [sp, #16]
   29200:	beq	29298 <__assert_fail@plt+0x17d40>
   29204:	ldr	ip, [sp, #68]	; 0x44
   29208:	cmp	ip, #0
   2920c:	str	ip, [sp, #20]
   29210:	beq	292b8 <__assert_fail@plt+0x17d60>
   29214:	ldr	ip, [sp, #72]	; 0x48
   29218:	cmp	ip, #0
   2921c:	str	ip, [sp, #24]
   29220:	beq	292c0 <__assert_fail@plt+0x17d68>
   29224:	ldr	ip, [sp, #76]	; 0x4c
   29228:	cmp	ip, #0
   2922c:	str	ip, [sp, #28]
   29230:	beq	292c8 <__assert_fail@plt+0x17d70>
   29234:	ldr	ip, [sp, #80]	; 0x50
   29238:	cmp	ip, #0
   2923c:	str	ip, [sp, #32]
   29240:	beq	292d0 <__assert_fail@plt+0x17d78>
   29244:	ldr	ip, [sp, #84]	; 0x54
   29248:	cmp	ip, #0
   2924c:	str	ip, [sp, #36]	; 0x24
   29250:	beq	292d8 <__assert_fail@plt+0x17d80>
   29254:	ldr	ip, [sp, #88]	; 0x58
   29258:	cmp	ip, #0
   2925c:	str	ip, [sp, #40]	; 0x28
   29260:	beq	292e0 <__assert_fail@plt+0x17d88>
   29264:	ldr	ip, [sp, #92]	; 0x5c
   29268:	cmp	ip, #0
   2926c:	str	ip, [sp, #44]	; 0x2c
   29270:	beq	292e8 <__assert_fail@plt+0x17d90>
   29274:	ldr	ip, [sp, #96]	; 0x60
   29278:	cmp	ip, #0
   2927c:	str	ip, [sp, #48]	; 0x30
   29280:	beq	292f0 <__assert_fail@plt+0x17d98>
   29284:	ldr	ip, [sp, #100]	; 0x64
   29288:	cmp	ip, #0
   2928c:	str	ip, [sp, #52]	; 0x34
   29290:	movne	ip, #10
   29294:	moveq	ip, #9
   29298:	add	r3, sp, #16
   2929c:	stm	sp, {r3, ip}
   292a0:	ldr	r3, [sp, #60]	; 0x3c
   292a4:	bl	2898c <__assert_fail@plt+0x17434>
   292a8:	add	sp, sp, #56	; 0x38
   292ac:	pop	{lr}		; (ldr lr, [sp], #4)
   292b0:	add	sp, sp, #4
   292b4:	bx	lr
   292b8:	mov	ip, #1
   292bc:	b	29298 <__assert_fail@plt+0x17d40>
   292c0:	mov	ip, #2
   292c4:	b	29298 <__assert_fail@plt+0x17d40>
   292c8:	mov	ip, #3
   292cc:	b	29298 <__assert_fail@plt+0x17d40>
   292d0:	mov	ip, #4
   292d4:	b	29298 <__assert_fail@plt+0x17d40>
   292d8:	mov	ip, #5
   292dc:	b	29298 <__assert_fail@plt+0x17d40>
   292e0:	mov	ip, #6
   292e4:	b	29298 <__assert_fail@plt+0x17d40>
   292e8:	mov	ip, #7
   292ec:	b	29298 <__assert_fail@plt+0x17d40>
   292f0:	mov	ip, #8
   292f4:	b	29298 <__assert_fail@plt+0x17d40>
   292f8:	ldr	r3, [pc, #116]	; 29374 <__assert_fail@plt+0x17e1c>
   292fc:	push	{r4, lr}
   29300:	mov	r0, #10
   29304:	ldr	r1, [r3]
   29308:	bl	112c4 <fputc_unlocked@plt>
   2930c:	mov	r2, #5
   29310:	ldr	r1, [pc, #96]	; 29378 <__assert_fail@plt+0x17e20>
   29314:	mov	r0, #0
   29318:	bl	112d0 <dcgettext@plt>
   2931c:	ldr	r2, [pc, #88]	; 2937c <__assert_fail@plt+0x17e24>
   29320:	mov	r1, r0
   29324:	mov	r0, #1
   29328:	bl	11474 <__printf_chk@plt>
   2932c:	mov	r2, #5
   29330:	ldr	r1, [pc, #72]	; 29380 <__assert_fail@plt+0x17e28>
   29334:	mov	r0, #0
   29338:	bl	112d0 <dcgettext@plt>
   2933c:	ldr	r3, [pc, #64]	; 29384 <__assert_fail@plt+0x17e2c>
   29340:	ldr	r2, [pc, #64]	; 29388 <__assert_fail@plt+0x17e30>
   29344:	mov	r1, r0
   29348:	mov	r0, #1
   2934c:	bl	11474 <__printf_chk@plt>
   29350:	mov	r2, #5
   29354:	ldr	r1, [pc, #48]	; 2938c <__assert_fail@plt+0x17e34>
   29358:	mov	r0, #0
   2935c:	bl	112d0 <dcgettext@plt>
   29360:	ldr	r2, [pc, #40]	; 29390 <__assert_fail@plt+0x17e38>
   29364:	pop	{r4, lr}
   29368:	mov	r1, r0
   2936c:	mov	r0, #1
   29370:	b	11474 <__printf_chk@plt>
   29374:			; <UNDEFINED> instruction: 0x0003e1bc
   29378:			; <UNDEFINED> instruction: 0x0002d4b0
   2937c:	andeq	sp, r2, r4, asr #9
   29380:	ldrdeq	sp, [r2], -ip
   29384:			; <UNDEFINED> instruction: 0x0002c9bc
   29388:	andeq	ip, r2, r4, ror #19
   2938c:	strdeq	sp, [r2], -r0
   29390:	andeq	sp, r2, r8, lsl r5
   29394:	push	{r4, r5, r6, lr}
   29398:	mov	r6, r0
   2939c:	mov	r5, r1
   293a0:	mov	r4, r2
   293a4:	bl	2ba74 <__assert_fail@plt+0x1a51c>
   293a8:	cmp	r0, #0
   293ac:	popne	{r4, r5, r6, pc}
   293b0:	cmp	r6, #0
   293b4:	beq	293c4 <__assert_fail@plt+0x17e6c>
   293b8:	cmp	r5, #0
   293bc:	cmpne	r4, #0
   293c0:	popeq	{r4, r5, r6, pc}
   293c4:	bl	12d78 <__assert_fail@plt+0x1820>
   293c8:	push	{r4, lr}
   293cc:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   293d0:	cmp	r0, #0
   293d4:	popne	{r4, pc}
   293d8:	bl	12d78 <__assert_fail@plt+0x1820>
   293dc:	push	{r4, lr}
   293e0:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   293e4:	cmp	r0, #0
   293e8:	popne	{r4, pc}
   293ec:	bl	12d78 <__assert_fail@plt+0x1820>
   293f0:	push	{r4, lr}
   293f4:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   293f8:	cmp	r0, #0
   293fc:	popne	{r4, pc}
   29400:	bl	12d78 <__assert_fail@plt+0x1820>
   29404:	push	{r4, r5, r6, lr}
   29408:	mov	r5, r0
   2940c:	mov	r4, r1
   29410:	bl	2b678 <__assert_fail@plt+0x1a120>
   29414:	cmp	r0, #0
   29418:	popne	{r4, r5, r6, pc}
   2941c:	adds	r4, r4, #0
   29420:	movne	r4, #1
   29424:	cmp	r5, #0
   29428:	orreq	r4, r4, #1
   2942c:	cmp	r4, #0
   29430:	popeq	{r4, r5, r6, pc}
   29434:	bl	12d78 <__assert_fail@plt+0x1820>
   29438:	push	{r4, lr}
   2943c:	cmp	r1, #0
   29440:	orreq	r1, r1, #1
   29444:	bl	2b678 <__assert_fail@plt+0x1a120>
   29448:	cmp	r0, #0
   2944c:	popne	{r4, pc}
   29450:	bl	12d78 <__assert_fail@plt+0x1820>
   29454:	push	{r4, r5, r6, lr}
   29458:	mov	r6, r0
   2945c:	mov	r5, r1
   29460:	mov	r4, r2
   29464:	bl	2ba74 <__assert_fail@plt+0x1a51c>
   29468:	cmp	r0, #0
   2946c:	popne	{r4, r5, r6, pc}
   29470:	cmp	r6, #0
   29474:	beq	29484 <__assert_fail@plt+0x17f2c>
   29478:	cmp	r5, #0
   2947c:	cmpne	r4, #0
   29480:	popeq	{r4, r5, r6, pc}
   29484:	bl	12d78 <__assert_fail@plt+0x1820>
   29488:	cmp	r2, #0
   2948c:	cmpne	r1, #0
   29490:	moveq	r2, #1
   29494:	moveq	r1, r2
   29498:	push	{r4, lr}
   2949c:	bl	2ba74 <__assert_fail@plt+0x1a51c>
   294a0:	cmp	r0, #0
   294a4:	popne	{r4, pc}
   294a8:	bl	12d78 <__assert_fail@plt+0x1820>
   294ac:	push	{r4, lr}
   294b0:	mov	r2, r1
   294b4:	mov	r1, r0
   294b8:	mov	r0, #0
   294bc:	bl	2ba74 <__assert_fail@plt+0x1a51c>
   294c0:	cmp	r0, #0
   294c4:	popne	{r4, pc}
   294c8:	bl	12d78 <__assert_fail@plt+0x1820>
   294cc:	cmp	r1, #0
   294d0:	cmpne	r0, #0
   294d4:	moveq	r2, #1
   294d8:	movne	r2, r1
   294dc:	moveq	r1, r2
   294e0:	movne	r1, r0
   294e4:	push	{r4, lr}
   294e8:	mov	r0, #0
   294ec:	bl	2ba74 <__assert_fail@plt+0x1a51c>
   294f0:	cmp	r0, #0
   294f4:	popne	{r4, pc}
   294f8:	bl	12d78 <__assert_fail@plt+0x1820>
   294fc:	cmp	r0, #0
   29500:	push	{r4, r5, r6, lr}
   29504:	mov	r5, r1
   29508:	ldr	r4, [r1]
   2950c:	beq	29548 <__assert_fail@plt+0x17ff0>
   29510:	lsr	r2, r4, #1
   29514:	add	r3, r2, #1
   29518:	mvn	r3, r3
   2951c:	cmp	r4, r3
   29520:	bhi	29564 <__assert_fail@plt+0x1800c>
   29524:	add	r4, r4, #1
   29528:	add	r4, r4, r2
   2952c:	mov	r1, r4
   29530:	mov	r2, #1
   29534:	bl	2ba74 <__assert_fail@plt+0x1a51c>
   29538:	cmp	r0, #0
   2953c:	beq	29568 <__assert_fail@plt+0x18010>
   29540:	str	r4, [r5]
   29544:	pop	{r4, r5, r6, pc}
   29548:	cmp	r4, #0
   2954c:	moveq	r4, #64	; 0x40
   29550:	mov	r1, r4
   29554:	mov	r2, #1
   29558:	bl	2ba74 <__assert_fail@plt+0x1a51c>
   2955c:	cmp	r0, #0
   29560:	bne	29540 <__assert_fail@plt+0x17fe8>
   29564:	bl	12d78 <__assert_fail@plt+0x1820>
   29568:	cmp	r4, #0
   2956c:	bne	29564 <__assert_fail@plt+0x1800c>
   29570:	str	r4, [r5]
   29574:	pop	{r4, r5, r6, pc}
   29578:	cmp	r0, #0
   2957c:	push	{r4, r5, r6, lr}
   29580:	mov	r5, r1
   29584:	ldr	r4, [r1]
   29588:	mov	r6, r2
   2958c:	beq	295d0 <__assert_fail@plt+0x18078>
   29590:	lsr	r1, r4, #1
   29594:	add	r3, r1, #1
   29598:	mvn	r3, r3
   2959c:	cmp	r4, r3
   295a0:	bhi	29608 <__assert_fail@plt+0x180b0>
   295a4:	add	r4, r4, #1
   295a8:	add	r4, r4, r1
   295ac:	mov	r1, r4
   295b0:	bl	2ba74 <__assert_fail@plt+0x1a51c>
   295b4:	cmp	r0, #0
   295b8:	bne	295c8 <__assert_fail@plt+0x18070>
   295bc:	cmp	r4, #0
   295c0:	cmpne	r6, #0
   295c4:	bne	29608 <__assert_fail@plt+0x180b0>
   295c8:	str	r4, [r5]
   295cc:	pop	{r4, r5, r6, pc}
   295d0:	cmp	r4, #0
   295d4:	bne	295f0 <__assert_fail@plt+0x18098>
   295d8:	mov	r1, r2
   295dc:	mov	r0, #64	; 0x40
   295e0:	bl	2bbb4 <__assert_fail@plt+0x1a65c>
   295e4:	cmp	r0, #0
   295e8:	movne	r4, r0
   295ec:	addeq	r4, r0, #1
   295f0:	mov	r2, r6
   295f4:	mov	r1, r4
   295f8:	mov	r0, #0
   295fc:	bl	2ba74 <__assert_fail@plt+0x1a51c>
   29600:	cmp	r0, #0
   29604:	bne	295c8 <__assert_fail@plt+0x18070>
   29608:	bl	12d78 <__assert_fail@plt+0x1820>
   2960c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29610:	sub	sp, sp, #12
   29614:	ldr	r6, [r1]
   29618:	mov	r8, r1
   2961c:	mov	r9, r0
   29620:	asrs	r4, r6, #1
   29624:	mov	sl, r2
   29628:	mov	fp, r3
   2962c:	ldr	r7, [sp, #48]	; 0x30
   29630:	bmi	297ac <__assert_fail@plt+0x18254>
   29634:	mvn	r1, #-2147483648	; 0x80000000
   29638:	sub	r1, r1, r4
   2963c:	cmp	r6, r1
   29640:	movle	r1, #0
   29644:	movgt	r1, #1
   29648:	mvn	r3, fp
   2964c:	cmp	r1, #0
   29650:	addeq	r4, r4, r6
   29654:	mvnne	r4, #-2147483648	; 0x80000000
   29658:	lsr	r3, r3, #31
   2965c:	cmp	fp, r4
   29660:	movge	r2, #0
   29664:	andlt	r2, r3, #1
   29668:	cmp	r2, #0
   2966c:	beq	2975c <__assert_fail@plt+0x18204>
   29670:	cmp	r7, #0
   29674:	blt	29844 <__assert_fail@plt+0x182ec>
   29678:	bne	2983c <__assert_fail@plt+0x182e4>
   2967c:	mov	r5, #64	; 0x40
   29680:	mov	r1, r7
   29684:	mov	r0, r5
   29688:	str	r3, [sp, #4]
   2968c:	bl	2bdc0 <__assert_fail@plt+0x1a868>
   29690:	mov	r1, r7
   29694:	mov	r4, r0
   29698:	mov	r0, r5
   2969c:	bl	2bfe0 <__assert_fail@plt+0x1aa88>
   296a0:	ldr	r3, [sp, #4]
   296a4:	sub	r5, r5, r1
   296a8:	cmp	r9, #0
   296ac:	sub	r2, r4, r6
   296b0:	streq	r9, [r8]
   296b4:	cmp	r2, sl
   296b8:	bge	2973c <__assert_fail@plt+0x181e4>
   296bc:	cmp	sl, #0
   296c0:	blt	297dc <__assert_fail@plt+0x18284>
   296c4:	cmp	r6, #0
   296c8:	blt	296e8 <__assert_fail@plt+0x18190>
   296cc:	mvn	r2, #-2147483648	; 0x80000000
   296d0:	sub	r2, r2, sl
   296d4:	cmp	r6, r2
   296d8:	movle	r2, #0
   296dc:	movgt	r2, #1
   296e0:	cmp	r2, #0
   296e4:	bne	297d8 <__assert_fail@plt+0x18280>
   296e8:	add	r6, r6, sl
   296ec:	cmp	fp, r6
   296f0:	movge	r3, #0
   296f4:	andlt	r3, r3, #1
   296f8:	cmp	r3, #0
   296fc:	mov	r4, r6
   29700:	bne	297d8 <__assert_fail@plt+0x18280>
   29704:	cmp	r7, #0
   29708:	blt	297f0 <__assert_fail@plt+0x18298>
   2970c:	beq	29738 <__assert_fail@plt+0x181e0>
   29710:	cmp	r6, #0
   29714:	blt	29894 <__assert_fail@plt+0x1833c>
   29718:	mov	r1, r7
   2971c:	mvn	r0, #-2147483648	; 0x80000000
   29720:	bl	2bdc0 <__assert_fail@plt+0x1a868>
   29724:	cmp	r6, r0
   29728:	movle	r0, #0
   2972c:	movgt	r0, #1
   29730:	cmp	r0, #0
   29734:	bne	297d8 <__assert_fail@plt+0x18280>
   29738:	mul	r5, r6, r7
   2973c:	mov	r1, r5
   29740:	mov	r0, r9
   29744:	bl	2b678 <__assert_fail@plt+0x1a120>
   29748:	cmp	r0, #0
   2974c:	beq	297c0 <__assert_fail@plt+0x18268>
   29750:	str	r4, [r8]
   29754:	add	sp, sp, #12
   29758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2975c:	cmp	r7, #0
   29760:	blt	2981c <__assert_fail@plt+0x182c4>
   29764:	beq	2967c <__assert_fail@plt+0x18124>
   29768:	cmp	r4, #0
   2976c:	blt	2984c <__assert_fail@plt+0x182f4>
   29770:	mov	r1, r7
   29774:	mvn	r0, #-2147483648	; 0x80000000
   29778:	str	r3, [sp, #4]
   2977c:	bl	2bdc0 <__assert_fail@plt+0x1a868>
   29780:	ldr	r3, [sp, #4]
   29784:	cmp	r0, r4
   29788:	movge	r0, #0
   2978c:	movlt	r0, #1
   29790:	cmp	r0, #0
   29794:	mvnne	r5, #-2147483648	; 0x80000000
   29798:	bne	29680 <__assert_fail@plt+0x18128>
   2979c:	mul	r5, r7, r4
   297a0:	cmp	r5, #63	; 0x3f
   297a4:	bgt	296a8 <__assert_fail@plt+0x18150>
   297a8:	b	2967c <__assert_fail@plt+0x18124>
   297ac:	rsb	r1, r4, #-2147483648	; 0x80000000
   297b0:	cmp	r6, r1
   297b4:	movge	r1, #0
   297b8:	movlt	r1, #1
   297bc:	b	29648 <__assert_fail@plt+0x180f0>
   297c0:	adds	r5, r5, #0
   297c4:	movne	r5, #1
   297c8:	cmp	r9, #0
   297cc:	orreq	r5, r5, #1
   297d0:	cmp	r5, #0
   297d4:	beq	29750 <__assert_fail@plt+0x181f8>
   297d8:	bl	12d78 <__assert_fail@plt+0x1820>
   297dc:	rsb	r2, sl, #-2147483648	; 0x80000000
   297e0:	cmp	r6, r2
   297e4:	movge	r2, #0
   297e8:	movlt	r2, #1
   297ec:	b	296e0 <__assert_fail@plt+0x18188>
   297f0:	cmp	r6, #0
   297f4:	blt	29878 <__assert_fail@plt+0x18320>
   297f8:	cmn	r7, #1
   297fc:	beq	29738 <__assert_fail@plt+0x181e0>
   29800:	mov	r1, r7
   29804:	mov	r0, #-2147483648	; 0x80000000
   29808:	bl	2bdc0 <__assert_fail@plt+0x1a868>
   2980c:	cmp	r6, r0
   29810:	movle	r0, #0
   29814:	movgt	r0, #1
   29818:	b	29730 <__assert_fail@plt+0x181d8>
   2981c:	cmp	r4, #0
   29820:	blt	298b8 <__assert_fail@plt+0x18360>
   29824:	cmn	r7, #1
   29828:	beq	2979c <__assert_fail@plt+0x18244>
   2982c:	str	r3, [sp, #4]
   29830:	mov	r1, r7
   29834:	mov	r0, #-2147483648	; 0x80000000
   29838:	b	2977c <__assert_fail@plt+0x18224>
   2983c:	mov	r4, fp
   29840:	b	29770 <__assert_fail@plt+0x18218>
   29844:	mov	r4, fp
   29848:	b	29824 <__assert_fail@plt+0x182cc>
   2984c:	cmn	r4, #1
   29850:	beq	2979c <__assert_fail@plt+0x18244>
   29854:	mov	r1, r4
   29858:	mov	r0, #-2147483648	; 0x80000000
   2985c:	str	r3, [sp, #4]
   29860:	bl	2bdc0 <__assert_fail@plt+0x1a868>
   29864:	ldr	r3, [sp, #4]
   29868:	cmp	r7, r0
   2986c:	movle	r0, #0
   29870:	movgt	r0, #1
   29874:	b	29790 <__assert_fail@plt+0x18238>
   29878:	mov	r1, r7
   2987c:	mvn	r0, #-2147483648	; 0x80000000
   29880:	bl	2bdc0 <__assert_fail@plt+0x1a868>
   29884:	cmp	r6, r0
   29888:	movge	r0, #0
   2988c:	movlt	r0, #1
   29890:	b	29730 <__assert_fail@plt+0x181d8>
   29894:	cmn	r6, #1
   29898:	beq	29738 <__assert_fail@plt+0x181e0>
   2989c:	mov	r1, r6
   298a0:	mov	r0, #-2147483648	; 0x80000000
   298a4:	bl	2bdc0 <__assert_fail@plt+0x1a868>
   298a8:	cmp	r7, r0
   298ac:	movle	r0, #0
   298b0:	movgt	r0, #1
   298b4:	b	29730 <__assert_fail@plt+0x181d8>
   298b8:	mov	r1, r7
   298bc:	mvn	r0, #-2147483648	; 0x80000000
   298c0:	str	r3, [sp, #4]
   298c4:	bl	2bdc0 <__assert_fail@plt+0x1a868>
   298c8:	ldr	r3, [sp, #4]
   298cc:	cmp	r0, r4
   298d0:	movle	r0, #0
   298d4:	movgt	r0, #1
   298d8:	b	29790 <__assert_fail@plt+0x18238>
   298dc:	push	{r4, lr}
   298e0:	mov	r1, #1
   298e4:	bl	2b604 <__assert_fail@plt+0x1a0ac>
   298e8:	cmp	r0, #0
   298ec:	popne	{r4, pc}
   298f0:	bl	12d78 <__assert_fail@plt+0x1820>
   298f4:	push	{r4, lr}
   298f8:	mov	r1, #1
   298fc:	bl	2b604 <__assert_fail@plt+0x1a0ac>
   29900:	cmp	r0, #0
   29904:	popne	{r4, pc}
   29908:	bl	12d78 <__assert_fail@plt+0x1820>
   2990c:	push	{r4, lr}
   29910:	bl	2b604 <__assert_fail@plt+0x1a0ac>
   29914:	cmp	r0, #0
   29918:	popne	{r4, pc}
   2991c:	bl	12d78 <__assert_fail@plt+0x1820>
   29920:	push	{r4, lr}
   29924:	bl	2b604 <__assert_fail@plt+0x1a0ac>
   29928:	cmp	r0, #0
   2992c:	popne	{r4, pc}
   29930:	bl	12d78 <__assert_fail@plt+0x1820>
   29934:	push	{r4, r5, r6, lr}
   29938:	mov	r6, r0
   2993c:	mov	r0, r1
   29940:	mov	r4, r1
   29944:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   29948:	subs	r5, r0, #0
   2994c:	beq	29964 <__assert_fail@plt+0x1840c>
   29950:	mov	r2, r4
   29954:	mov	r1, r6
   29958:	bl	11264 <memcpy@plt>
   2995c:	mov	r0, r5
   29960:	pop	{r4, r5, r6, pc}
   29964:	bl	12d78 <__assert_fail@plt+0x1820>
   29968:	push	{r4, r5, r6, lr}
   2996c:	mov	r6, r0
   29970:	mov	r0, r1
   29974:	mov	r4, r1
   29978:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   2997c:	subs	r5, r0, #0
   29980:	beq	29998 <__assert_fail@plt+0x18440>
   29984:	mov	r2, r4
   29988:	mov	r1, r6
   2998c:	bl	11264 <memcpy@plt>
   29990:	mov	r0, r5
   29994:	pop	{r4, r5, r6, pc}
   29998:	bl	12d78 <__assert_fail@plt+0x1820>
   2999c:	push	{r4, r5, r6, lr}
   299a0:	mov	r6, r0
   299a4:	add	r0, r1, #1
   299a8:	mov	r4, r1
   299ac:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   299b0:	subs	r5, r0, #0
   299b4:	beq	299d4 <__assert_fail@plt+0x1847c>
   299b8:	mov	r3, #0
   299bc:	mov	r1, r6
   299c0:	strb	r3, [r5, r4]
   299c4:	mov	r2, r4
   299c8:	bl	11264 <memcpy@plt>
   299cc:	mov	r0, r5
   299d0:	pop	{r4, r5, r6, pc}
   299d4:	bl	12d78 <__assert_fail@plt+0x1820>
   299d8:	push	{r4, r5, r6, lr}
   299dc:	mov	r6, r0
   299e0:	bl	11414 <strlen@plt>
   299e4:	add	r4, r0, #1
   299e8:	mov	r0, r4
   299ec:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   299f0:	subs	r5, r0, #0
   299f4:	beq	29a0c <__assert_fail@plt+0x184b4>
   299f8:	mov	r2, r4
   299fc:	mov	r1, r6
   29a00:	bl	11264 <memcpy@plt>
   29a04:	mov	r0, r5
   29a08:	pop	{r4, r5, r6, pc}
   29a0c:	bl	12d78 <__assert_fail@plt+0x1820>
   29a10:	push	{r4, r5, r6, r7, lr}
   29a14:	sub	sp, sp, #20
   29a18:	mov	r6, r2
   29a1c:	ldr	ip, [sp, #48]	; 0x30
   29a20:	mov	r2, r1
   29a24:	mov	r7, r3
   29a28:	str	ip, [sp]
   29a2c:	add	r3, sp, #8
   29a30:	mov	r1, #0
   29a34:	mov	r5, r0
   29a38:	ldr	r4, [sp, #56]	; 0x38
   29a3c:	bl	29ca0 <__assert_fail@plt+0x18748>
   29a40:	cmp	r0, #0
   29a44:	bne	29ac0 <__assert_fail@plt+0x18568>
   29a48:	ldrd	r0, [sp, #8]
   29a4c:	cmp	r0, r6
   29a50:	sbcs	r3, r1, r7
   29a54:	ldrd	r6, [sp, #40]	; 0x28
   29a58:	movlt	r3, #1
   29a5c:	movge	r3, #0
   29a60:	cmp	r6, r0
   29a64:	sbcs	r2, r7, r1
   29a68:	orrlt	r3, r3, #1
   29a6c:	cmp	r3, #0
   29a70:	beq	29ab8 <__assert_fail@plt+0x18560>
   29a74:	cmp	r0, #1073741824	; 0x40000000
   29a78:	sbcs	r3, r1, #0
   29a7c:	blt	29aec <__assert_fail@plt+0x18594>
   29a80:	bl	1142c <__errno_location@plt>
   29a84:	mov	r3, #75	; 0x4b
   29a88:	mov	r6, r3
   29a8c:	str	r3, [r0]
   29a90:	cmp	r4, #0
   29a94:	moveq	r4, #1
   29a98:	mov	r0, r5
   29a9c:	bl	17c98 <__assert_fail@plt+0x6740>
   29aa0:	mov	r1, r6
   29aa4:	ldr	r3, [sp, #52]	; 0x34
   29aa8:	ldr	r2, [pc, #164]	; 29b54 <__assert_fail@plt+0x185fc>
   29aac:	str	r0, [sp]
   29ab0:	mov	r0, r4
   29ab4:	bl	11384 <error@plt>
   29ab8:	add	sp, sp, #20
   29abc:	pop	{r4, r5, r6, r7, pc}
   29ac0:	cmp	r0, #1
   29ac4:	beq	29b14 <__assert_fail@plt+0x185bc>
   29ac8:	cmp	r0, #3
   29acc:	beq	29b44 <__assert_fail@plt+0x185ec>
   29ad0:	cmp	r4, #0
   29ad4:	beq	29b34 <__assert_fail@plt+0x185dc>
   29ad8:	bl	1142c <__errno_location@plt>
   29adc:	ldr	r6, [r0]
   29ae0:	cmp	r6, #22
   29ae4:	moveq	r6, #0
   29ae8:	b	29a98 <__assert_fail@plt+0x18540>
   29aec:	mov	r2, #-1073741824	; 0xc0000000
   29af0:	mvn	r3, #0
   29af4:	cmp	r0, r2
   29af8:	sbcs	r3, r1, r3
   29afc:	blt	29a80 <__assert_fail@plt+0x18528>
   29b00:	bl	1142c <__errno_location@plt>
   29b04:	mov	r3, #34	; 0x22
   29b08:	mov	r6, r3
   29b0c:	str	r3, [r0]
   29b10:	b	29a90 <__assert_fail@plt+0x18538>
   29b14:	bl	1142c <__errno_location@plt>
   29b18:	mov	r3, #75	; 0x4b
   29b1c:	mov	r6, r3
   29b20:	str	r3, [r0]
   29b24:	cmp	r4, #0
   29b28:	moveq	r4, #1
   29b2c:	bne	29ae0 <__assert_fail@plt+0x18588>
   29b30:	b	29a98 <__assert_fail@plt+0x18540>
   29b34:	bl	1142c <__errno_location@plt>
   29b38:	mov	r4, #1
   29b3c:	ldr	r6, [r0]
   29b40:	b	29ae0 <__assert_fail@plt+0x18588>
   29b44:	bl	1142c <__errno_location@plt>
   29b48:	mov	r6, #0
   29b4c:	str	r6, [r0]
   29b50:	b	29b24 <__assert_fail@plt+0x185cc>
   29b54:	andeq	ip, r2, r4, ror #29
   29b58:	push	{r4, r5, r6, r7, lr}
   29b5c:	sub	sp, sp, #20
   29b60:	mov	r6, r2
   29b64:	ldr	r1, [sp, #48]	; 0x30
   29b68:	mov	r7, r3
   29b6c:	str	r1, [sp]
   29b70:	add	r3, sp, #8
   29b74:	mov	r2, #10
   29b78:	mov	r1, #0
   29b7c:	mov	r5, r0
   29b80:	ldr	r4, [sp, #56]	; 0x38
   29b84:	bl	29ca0 <__assert_fail@plt+0x18748>
   29b88:	cmp	r0, #0
   29b8c:	bne	29c08 <__assert_fail@plt+0x186b0>
   29b90:	ldrd	r0, [sp, #8]
   29b94:	cmp	r0, r6
   29b98:	sbcs	r3, r1, r7
   29b9c:	ldrd	r6, [sp, #40]	; 0x28
   29ba0:	movlt	r3, #1
   29ba4:	movge	r3, #0
   29ba8:	cmp	r6, r0
   29bac:	sbcs	r2, r7, r1
   29bb0:	orrlt	r3, r3, #1
   29bb4:	cmp	r3, #0
   29bb8:	beq	29c00 <__assert_fail@plt+0x186a8>
   29bbc:	cmp	r0, #1073741824	; 0x40000000
   29bc0:	sbcs	r3, r1, #0
   29bc4:	blt	29c34 <__assert_fail@plt+0x186dc>
   29bc8:	bl	1142c <__errno_location@plt>
   29bcc:	mov	r3, #75	; 0x4b
   29bd0:	mov	r6, r3
   29bd4:	str	r3, [r0]
   29bd8:	cmp	r4, #0
   29bdc:	moveq	r4, #1
   29be0:	mov	r0, r5
   29be4:	bl	17c98 <__assert_fail@plt+0x6740>
   29be8:	mov	r1, r6
   29bec:	ldr	r3, [sp, #52]	; 0x34
   29bf0:	ldr	r2, [pc, #164]	; 29c9c <__assert_fail@plt+0x18744>
   29bf4:	str	r0, [sp]
   29bf8:	mov	r0, r4
   29bfc:	bl	11384 <error@plt>
   29c00:	add	sp, sp, #20
   29c04:	pop	{r4, r5, r6, r7, pc}
   29c08:	cmp	r0, #1
   29c0c:	beq	29c5c <__assert_fail@plt+0x18704>
   29c10:	cmp	r0, #3
   29c14:	beq	29c8c <__assert_fail@plt+0x18734>
   29c18:	cmp	r4, #0
   29c1c:	beq	29c7c <__assert_fail@plt+0x18724>
   29c20:	bl	1142c <__errno_location@plt>
   29c24:	ldr	r6, [r0]
   29c28:	cmp	r6, #22
   29c2c:	moveq	r6, #0
   29c30:	b	29be0 <__assert_fail@plt+0x18688>
   29c34:	mov	r2, #-1073741824	; 0xc0000000
   29c38:	mvn	r3, #0
   29c3c:	cmp	r0, r2
   29c40:	sbcs	r3, r1, r3
   29c44:	blt	29bc8 <__assert_fail@plt+0x18670>
   29c48:	bl	1142c <__errno_location@plt>
   29c4c:	mov	r3, #34	; 0x22
   29c50:	mov	r6, r3
   29c54:	str	r3, [r0]
   29c58:	b	29bd8 <__assert_fail@plt+0x18680>
   29c5c:	bl	1142c <__errno_location@plt>
   29c60:	mov	r3, #75	; 0x4b
   29c64:	mov	r6, r3
   29c68:	str	r3, [r0]
   29c6c:	cmp	r4, #0
   29c70:	moveq	r4, #1
   29c74:	bne	29c28 <__assert_fail@plt+0x186d0>
   29c78:	b	29be0 <__assert_fail@plt+0x18688>
   29c7c:	bl	1142c <__errno_location@plt>
   29c80:	mov	r4, #1
   29c84:	ldr	r6, [r0]
   29c88:	b	29c28 <__assert_fail@plt+0x186d0>
   29c8c:	bl	1142c <__errno_location@plt>
   29c90:	mov	r6, #0
   29c94:	str	r6, [r0]
   29c98:	b	29c6c <__assert_fail@plt+0x18714>
   29c9c:	andeq	ip, r2, r4, ror #29
   29ca0:	cmp	r2, #36	; 0x24
   29ca4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ca8:	sub	sp, sp, #52	; 0x34
   29cac:	bhi	2a820 <__assert_fail@plt+0x192c8>
   29cb0:	cmp	r1, #0
   29cb4:	mov	r5, r1
   29cb8:	mov	r6, r2
   29cbc:	addeq	r5, sp, #44	; 0x2c
   29cc0:	mov	sl, r0
   29cc4:	mov	r9, r3
   29cc8:	bl	1142c <__errno_location@plt>
   29ccc:	mov	r4, #0
   29cd0:	mov	r2, r6
   29cd4:	mov	r3, r4
   29cd8:	mov	r1, r5
   29cdc:	str	r4, [r0]
   29ce0:	mov	fp, r0
   29ce4:	mov	r0, sl
   29ce8:	bl	114f8 <__strtoll_internal@plt>
   29cec:	ldr	r8, [r5]
   29cf0:	cmp	sl, r8
   29cf4:	mov	r6, r0
   29cf8:	mov	r7, r1
   29cfc:	beq	29d4c <__assert_fail@plt+0x187f4>
   29d00:	ldr	r4, [fp]
   29d04:	cmp	r4, #0
   29d08:	bne	29d34 <__assert_fail@plt+0x187dc>
   29d0c:	ldr	r3, [sp, #88]	; 0x58
   29d10:	cmp	r3, #0
   29d14:	beq	29d24 <__assert_fail@plt+0x187cc>
   29d18:	ldrb	sl, [r8]
   29d1c:	cmp	sl, #0
   29d20:	bne	29d80 <__assert_fail@plt+0x18828>
   29d24:	strd	r6, [r9]
   29d28:	mov	r0, r4
   29d2c:	add	sp, sp, #52	; 0x34
   29d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29d34:	cmp	r4, #34	; 0x22
   29d38:	beq	29fe0 <__assert_fail@plt+0x18a88>
   29d3c:	mov	r4, #4
   29d40:	mov	r0, r4
   29d44:	add	sp, sp, #52	; 0x34
   29d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29d4c:	ldr	r3, [sp, #88]	; 0x58
   29d50:	cmp	r3, r4
   29d54:	beq	29d3c <__assert_fail@plt+0x187e4>
   29d58:	ldrb	sl, [sl]
   29d5c:	cmp	sl, r4
   29d60:	beq	29d3c <__assert_fail@plt+0x187e4>
   29d64:	mov	r1, sl
   29d68:	mov	r0, r3
   29d6c:	bl	11420 <strchr@plt>
   29d70:	cmp	r0, r4
   29d74:	movne	r6, #1
   29d78:	movne	r7, #0
   29d7c:	beq	29d3c <__assert_fail@plt+0x187e4>
   29d80:	mov	r1, sl
   29d84:	ldr	r0, [sp, #88]	; 0x58
   29d88:	bl	11420 <strchr@plt>
   29d8c:	cmp	r0, #0
   29d90:	beq	2a398 <__assert_fail@plt+0x18e40>
   29d94:	sub	r3, sl, #69	; 0x45
   29d98:	cmp	r3, #47	; 0x2f
   29d9c:	ldrls	pc, [pc, r3, lsl #2]
   29da0:	b	29e64 <__assert_fail@plt+0x1890c>
   29da4:	andeq	r9, r2, ip, ror pc
   29da8:	andeq	r9, r2, r4, ror #28
   29dac:	andeq	r9, r2, ip, ror pc
   29db0:	andeq	r9, r2, r4, ror #28
   29db4:	andeq	r9, r2, r4, ror #28
   29db8:	andeq	r9, r2, r4, ror #28
   29dbc:	andeq	r9, r2, ip, ror pc
   29dc0:	andeq	r9, r2, r4, ror #28
   29dc4:	andeq	r9, r2, ip, ror pc
   29dc8:	andeq	r9, r2, r4, ror #28
   29dcc:	andeq	r9, r2, r4, ror #28
   29dd0:	andeq	r9, r2, ip, ror pc
   29dd4:	andeq	r9, r2, r4, ror #28
   29dd8:	andeq	r9, r2, r4, ror #28
   29ddc:	andeq	r9, r2, r4, ror #28
   29de0:	andeq	r9, r2, ip, ror pc
   29de4:	andeq	r9, r2, r4, ror #28
   29de8:	andeq	r9, r2, r4, ror #28
   29dec:	andeq	r9, r2, r4, ror #28
   29df0:	andeq	r9, r2, r4, ror #28
   29df4:	andeq	r9, r2, ip, ror pc
   29df8:	andeq	r9, r2, ip, ror pc
   29dfc:	andeq	r9, r2, r4, ror #28
   29e00:	andeq	r9, r2, r4, ror #28
   29e04:	andeq	r9, r2, r4, ror #28
   29e08:	andeq	r9, r2, r4, ror #28
   29e0c:	andeq	r9, r2, r4, ror #28
   29e10:	andeq	r9, r2, r4, ror #28
   29e14:	andeq	r9, r2, r4, ror #28
   29e18:	andeq	r9, r2, r4, ror #28
   29e1c:	andeq	r9, r2, r4, ror #28
   29e20:	andeq	r9, r2, r4, ror #28
   29e24:	andeq	r9, r2, r4, ror #28
   29e28:	andeq	r9, r2, r4, ror #28
   29e2c:	andeq	r9, r2, ip, ror pc
   29e30:	andeq	r9, r2, r4, ror #28
   29e34:	andeq	r9, r2, r4, ror #28
   29e38:	andeq	r9, r2, r4, ror #28
   29e3c:	andeq	r9, r2, ip, ror pc
   29e40:	andeq	r9, r2, r4, ror #28
   29e44:	andeq	r9, r2, ip, ror pc
   29e48:	andeq	r9, r2, r4, ror #28
   29e4c:	andeq	r9, r2, r4, ror #28
   29e50:	andeq	r9, r2, r4, ror #28
   29e54:	andeq	r9, r2, r4, ror #28
   29e58:	andeq	r9, r2, r4, ror #28
   29e5c:	andeq	r9, r2, r4, ror #28
   29e60:	andeq	r9, r2, ip, ror pc
   29e64:	mov	r3, #1024	; 0x400
   29e68:	str	r3, [sp, #12]
   29e6c:	mov	r3, #0
   29e70:	str	r3, [sp, #8]
   29e74:	ldr	r3, [pc, #1292]	; 2a388 <__assert_fail@plt+0x18e30>
   29e78:	mvn	r2, #0
   29e7c:	strd	r2, [sp, #16]
   29e80:	mov	r3, #0
   29e84:	mov	r2, #1024	; 0x400
   29e88:	strd	r2, [sp, #24]
   29e8c:	mov	r3, #1
   29e90:	str	r3, [sp, #4]
   29e94:	sub	sl, sl, #66	; 0x42
   29e98:	cmp	sl, #53	; 0x35
   29e9c:	ldrls	pc, [pc, sl, lsl #2]
   29ea0:	b	2a398 <__assert_fail@plt+0x18e40>
   29ea4:	strdeq	sl, [r2], -ip
   29ea8:	muleq	r2, r8, r3
   29eac:	muleq	r2, r8, r3
   29eb0:	andeq	sl, r2, r0, lsl r1
   29eb4:	muleq	r2, r8, r3
   29eb8:	strheq	sl, [r2], -r0
   29ebc:	muleq	r2, r8, r3
   29ec0:	muleq	r2, r8, r3
   29ec4:	muleq	r2, r8, r3
   29ec8:	andeq	sl, r2, r4, lsr #7
   29ecc:	muleq	r2, r8, r3
   29ed0:	andeq	sl, r2, r0, asr r0
   29ed4:	muleq	r2, r8, r3
   29ed8:	muleq	r2, r8, r3
   29edc:	andeq	sl, r2, r0, lsr #4
   29ee0:	muleq	r2, r8, r3
   29ee4:	muleq	r2, r8, r3
   29ee8:	muleq	r2, r8, r3
   29eec:	andeq	sl, r2, ip, asr #3
   29ef0:	muleq	r2, r8, r3
   29ef4:	muleq	r2, r8, r3
   29ef8:	muleq	r2, r8, r3
   29efc:	muleq	r2, r8, r3
   29f00:	andeq	sl, r2, r4, ror r2
   29f04:	andeq	sl, r2, r4, ror r1
   29f08:	muleq	r2, r8, r3
   29f0c:	muleq	r2, r8, r3
   29f10:	muleq	r2, r8, r3
   29f14:	muleq	r2, r8, r3
   29f18:	muleq	r2, r8, r3
   29f1c:	muleq	r2, r8, r3
   29f20:	muleq	r2, r8, r3
   29f24:	andeq	sl, r2, r4, lsr #6
   29f28:	andeq	sl, r2, ip, lsr #32
   29f2c:	muleq	r2, r8, r3
   29f30:	muleq	r2, r8, r3
   29f34:	muleq	r2, r8, r3
   29f38:	strheq	sl, [r2], -r0
   29f3c:	muleq	r2, r8, r3
   29f40:	muleq	r2, r8, r3
   29f44:	muleq	r2, r8, r3
   29f48:	andeq	sl, r2, r4, lsr #7
   29f4c:	muleq	r2, r8, r3
   29f50:	andeq	sl, r2, r0, asr r0
   29f54:	muleq	r2, r8, r3
   29f58:	muleq	r2, r8, r3
   29f5c:	muleq	r2, r8, r3
   29f60:	muleq	r2, r8, r3
   29f64:	muleq	r2, r8, r3
   29f68:	muleq	r2, r8, r3
   29f6c:	andeq	sl, r2, ip, asr #3
   29f70:	muleq	r2, r8, r3
   29f74:	muleq	r2, r8, r3
   29f78:	andeq	sl, r2, r8, asr r3
   29f7c:	mov	r1, #48	; 0x30
   29f80:	ldr	r0, [sp, #88]	; 0x58
   29f84:	bl	11420 <strchr@plt>
   29f88:	cmp	r0, #0
   29f8c:	beq	2a3e0 <__assert_fail@plt+0x18e88>
   29f90:	ldrb	r3, [r8, #1]
   29f94:	cmp	r3, #68	; 0x44
   29f98:	beq	29fac <__assert_fail@plt+0x18a54>
   29f9c:	cmp	r3, #105	; 0x69
   29fa0:	beq	29fe8 <__assert_fail@plt+0x18a90>
   29fa4:	cmp	r3, #66	; 0x42
   29fa8:	bne	29e64 <__assert_fail@plt+0x1890c>
   29fac:	mov	r3, #1000	; 0x3e8
   29fb0:	str	r3, [sp, #12]
   29fb4:	mov	r3, #0
   29fb8:	str	r3, [sp, #8]
   29fbc:	add	r3, pc, #956	; 0x3bc
   29fc0:	ldrd	r2, [r3]
   29fc4:	strd	r2, [sp, #16]
   29fc8:	mov	r3, #0
   29fcc:	mov	r2, #1000	; 0x3e8
   29fd0:	strd	r2, [sp, #24]
   29fd4:	mov	r3, #2
   29fd8:	str	r3, [sp, #4]
   29fdc:	b	29e94 <__assert_fail@plt+0x1893c>
   29fe0:	mov	r4, #1
   29fe4:	b	29d0c <__assert_fail@plt+0x187b4>
   29fe8:	ldrb	r3, [r8, #2]
   29fec:	mvn	r2, #0
   29ff0:	cmp	r3, #66	; 0x42
   29ff4:	mov	r3, #1024	; 0x400
   29ff8:	str	r3, [sp, #12]
   29ffc:	mov	r3, #0
   2a000:	str	r3, [sp, #8]
   2a004:	ldr	r3, [pc, #892]	; 2a388 <__assert_fail@plt+0x18e30>
   2a008:	strd	r2, [sp, #16]
   2a00c:	mov	r3, #0
   2a010:	mov	r2, #1024	; 0x400
   2a014:	strd	r2, [sp, #24]
   2a018:	moveq	r3, #3
   2a01c:	streq	r3, [sp, #4]
   2a020:	movne	r3, #1
   2a024:	strne	r3, [sp, #4]
   2a028:	b	29e94 <__assert_fail@plt+0x1893c>
   2a02c:	mov	sl, #0
   2a030:	ldr	r2, [sp, #4]
   2a034:	orr	r4, r4, sl
   2a038:	add	r3, r8, r2
   2a03c:	str	r3, [r5]
   2a040:	ldrb	r3, [r8, r2]
   2a044:	cmp	r3, #0
   2a048:	orrne	r4, r4, #2
   2a04c:	b	29d24 <__assert_fail@plt+0x187cc>
   2a050:	mov	sl, #0
   2a054:	mov	r3, r9
   2a058:	mov	fp, #1
   2a05c:	mov	r9, r5
   2a060:	mov	r5, r4
   2a064:	mov	r4, sl
   2a068:	mov	sl, r3
   2a06c:	cmp	r6, #0
   2a070:	sbcs	r3, r7, #0
   2a074:	blt	2a79c <__assert_fail@plt+0x19244>
   2a078:	ldrd	r2, [sp, #16]
   2a07c:	cmp	r2, r6
   2a080:	sbcs	r1, r3, r7
   2a084:	bge	2a6ac <__assert_fail@plt+0x19154>
   2a088:	sub	fp, fp, #1
   2a08c:	cmn	fp, #1
   2a090:	mov	r4, #1
   2a094:	mvn	r6, #0
   2a098:	mvn	r7, #-2147483648	; 0x80000000
   2a09c:	bne	2a07c <__assert_fail@plt+0x18b24>
   2a0a0:	mov	r4, r5
   2a0a4:	mov	r5, r9
   2a0a8:	mov	r9, sl
   2a0ac:	b	2a314 <__assert_fail@plt+0x18dbc>
   2a0b0:	mov	sl, #0
   2a0b4:	str	r9, [sp, #32]
   2a0b8:	mov	r9, r5
   2a0bc:	mov	r5, r4
   2a0c0:	mov	r4, sl
   2a0c4:	ldr	sl, [sp, #12]
   2a0c8:	mov	fp, #2
   2a0cc:	cmp	r6, #0
   2a0d0:	sbcs	r3, r7, #0
   2a0d4:	blt	2a6e8 <__assert_fail@plt+0x19190>
   2a0d8:	ldrd	r2, [sp, #16]
   2a0dc:	cmp	r2, r6
   2a0e0:	sbcs	r1, r3, r7
   2a0e4:	bge	2a750 <__assert_fail@plt+0x191f8>
   2a0e8:	sub	fp, fp, #1
   2a0ec:	cmn	fp, #1
   2a0f0:	mvn	r6, #0
   2a0f4:	mvn	r7, #-2147483648	; 0x80000000
   2a0f8:	mov	r4, #1
   2a0fc:	bne	2a0dc <__assert_fail@plt+0x18b84>
   2a100:	mov	r4, r5
   2a104:	mov	r5, r9
   2a108:	ldr	r9, [sp, #32]
   2a10c:	b	2a314 <__assert_fail@plt+0x18dbc>
   2a110:	mov	sl, #0
   2a114:	str	r4, [sp, #32]
   2a118:	str	r9, [sp, #36]	; 0x24
   2a11c:	mov	r4, sl
   2a120:	mov	r9, r5
   2a124:	ldr	sl, [sp, #12]
   2a128:	ldr	r5, [sp, #8]
   2a12c:	mov	fp, #5
   2a130:	cmp	r6, #0
   2a134:	sbcs	r3, r7, #0
   2a138:	blt	2a55c <__assert_fail@plt+0x19004>
   2a13c:	ldrd	r2, [sp, #16]
   2a140:	cmp	r2, r6
   2a144:	sbcs	r1, r3, r7
   2a148:	bge	2a594 <__assert_fail@plt+0x1903c>
   2a14c:	sub	fp, fp, #1
   2a150:	cmn	fp, #1
   2a154:	mvn	r6, #0
   2a158:	mvn	r7, #-2147483648	; 0x80000000
   2a15c:	mov	r4, #1
   2a160:	bne	2a140 <__assert_fail@plt+0x18be8>
   2a164:	mov	r5, r9
   2a168:	ldr	r4, [sp, #32]
   2a16c:	ldr	r9, [sp, #36]	; 0x24
   2a170:	b	2a314 <__assert_fail@plt+0x18dbc>
   2a174:	mov	sl, #0
   2a178:	str	r4, [sp, #32]
   2a17c:	str	r9, [sp, #36]	; 0x24
   2a180:	mov	r4, sl
   2a184:	mov	r9, r5
   2a188:	ldr	sl, [sp, #12]
   2a18c:	ldr	r5, [sp, #8]
   2a190:	mov	fp, #6
   2a194:	cmp	r6, #0
   2a198:	sbcs	r3, r7, #0
   2a19c:	blt	2a410 <__assert_fail@plt+0x18eb8>
   2a1a0:	ldrd	r2, [sp, #16]
   2a1a4:	cmp	r2, r6
   2a1a8:	sbcs	r1, r3, r7
   2a1ac:	bge	2a3f0 <__assert_fail@plt+0x18e98>
   2a1b0:	sub	fp, fp, #1
   2a1b4:	cmn	fp, #1
   2a1b8:	mov	r4, #1
   2a1bc:	mvn	r6, #0
   2a1c0:	mvn	r7, #-2147483648	; 0x80000000
   2a1c4:	bne	2a1a4 <__assert_fail@plt+0x18c4c>
   2a1c8:	b	2a164 <__assert_fail@plt+0x18c0c>
   2a1cc:	mov	sl, #0
   2a1d0:	str	r9, [sp, #32]
   2a1d4:	mov	r9, r5
   2a1d8:	mov	r5, r4
   2a1dc:	mov	r4, sl
   2a1e0:	ldr	sl, [sp, #12]
   2a1e4:	mov	fp, #3
   2a1e8:	cmp	r6, #0
   2a1ec:	sbcs	r3, r7, #0
   2a1f0:	blt	2a4f0 <__assert_fail@plt+0x18f98>
   2a1f4:	ldrd	r2, [sp, #16]
   2a1f8:	cmp	r2, r6
   2a1fc:	sbcs	r1, r3, r7
   2a200:	bge	2a528 <__assert_fail@plt+0x18fd0>
   2a204:	sub	fp, fp, #1
   2a208:	cmn	fp, #1
   2a20c:	mov	r4, #1
   2a210:	mvn	r6, #0
   2a214:	mvn	r7, #-2147483648	; 0x80000000
   2a218:	bne	2a1f8 <__assert_fail@plt+0x18ca0>
   2a21c:	b	2a100 <__assert_fail@plt+0x18ba8>
   2a220:	mov	sl, #0
   2a224:	str	r9, [sp, #32]
   2a228:	mov	r9, r5
   2a22c:	mov	r5, r4
   2a230:	mov	r4, sl
   2a234:	ldr	sl, [sp, #12]
   2a238:	mov	fp, #4
   2a23c:	cmp	r6, #0
   2a240:	sbcs	r3, r7, #0
   2a244:	blt	2a664 <__assert_fail@plt+0x1910c>
   2a248:	ldrd	r2, [sp, #16]
   2a24c:	cmp	r2, r6
   2a250:	sbcs	r1, r3, r7
   2a254:	bge	2a640 <__assert_fail@plt+0x190e8>
   2a258:	sub	fp, fp, #1
   2a25c:	cmn	fp, #1
   2a260:	mvn	r6, #0
   2a264:	mvn	r7, #-2147483648	; 0x80000000
   2a268:	mov	r4, #1
   2a26c:	bne	2a24c <__assert_fail@plt+0x18cf4>
   2a270:	b	2a100 <__assert_fail@plt+0x18ba8>
   2a274:	mov	sl, #0
   2a278:	str	r4, [sp, #32]
   2a27c:	str	r9, [sp, #36]	; 0x24
   2a280:	mov	r4, sl
   2a284:	mov	r9, r5
   2a288:	ldr	sl, [sp, #12]
   2a28c:	ldr	r5, [sp, #8]
   2a290:	mov	fp, #7
   2a294:	cmp	r6, #0
   2a298:	sbcs	r3, r7, #0
   2a29c:	blt	2a4b4 <__assert_fail@plt+0x18f5c>
   2a2a0:	ldrd	r2, [sp, #16]
   2a2a4:	b	2a2c0 <__assert_fail@plt+0x18d68>
   2a2a8:	sub	fp, fp, #1
   2a2ac:	cmn	fp, #1
   2a2b0:	mvn	r6, #0
   2a2b4:	mvn	r7, #-2147483648	; 0x80000000
   2a2b8:	mov	r4, #1
   2a2bc:	beq	2a164 <__assert_fail@plt+0x18c0c>
   2a2c0:	cmp	r2, r6
   2a2c4:	sbcs	r1, r3, r7
   2a2c8:	blt	2a2a8 <__assert_fail@plt+0x18d50>
   2a2cc:	mul	r3, r6, r5
   2a2d0:	cmp	fp, #0
   2a2d4:	mla	r3, sl, r7, r3
   2a2d8:	umull	r6, r7, r6, sl
   2a2dc:	sub	fp, fp, #1
   2a2e0:	add	r7, r3, r7
   2a2e4:	bne	2a294 <__assert_fail@plt+0x18d3c>
   2a2e8:	mov	sl, r4
   2a2ec:	mov	r5, r9
   2a2f0:	ldr	r4, [sp, #32]
   2a2f4:	ldr	r9, [sp, #36]	; 0x24
   2a2f8:	b	2a030 <__assert_fail@plt+0x18ad8>
   2a2fc:	cmp	r6, #0
   2a300:	sbcs	r3, r7, #0
   2a304:	blt	2a464 <__assert_fail@plt+0x18f0c>
   2a308:	cmp	r6, #0
   2a30c:	sbcs	r3, r7, #2097152	; 0x200000
   2a310:	blt	2a498 <__assert_fail@plt+0x18f40>
   2a314:	mvn	r6, #0
   2a318:	mvn	r7, #-2147483648	; 0x80000000
   2a31c:	mov	sl, #1
   2a320:	b	2a030 <__assert_fail@plt+0x18ad8>
   2a324:	cmp	r6, #0
   2a328:	sbcs	r3, r7, #0
   2a32c:	blt	2a608 <__assert_fail@plt+0x190b0>
   2a330:	cmp	r6, #0
   2a334:	sbcs	r3, r7, #4194304	; 0x400000
   2a338:	bge	2a314 <__assert_fail@plt+0x18dbc>
   2a33c:	lsl	r3, r7, #9
   2a340:	orr	r3, r3, r6, lsr #23
   2a344:	lsl	r2, r6, #9
   2a348:	mov	r6, r2
   2a34c:	mov	r7, r3
   2a350:	mov	sl, #0
   2a354:	b	2a030 <__assert_fail@plt+0x18ad8>
   2a358:	cmp	r6, #0
   2a35c:	sbcs	r3, r7, #0
   2a360:	blt	2a5d0 <__assert_fail@plt+0x19078>
   2a364:	cmp	r6, #0
   2a368:	sbcs	r3, r7, #1073741824	; 0x40000000
   2a36c:	bge	2a314 <__assert_fail@plt+0x18dbc>
   2a370:	adds	r6, r6, r6
   2a374:	adc	r7, r7, r7
   2a378:	mov	sl, #0
   2a37c:	b	2a030 <__assert_fail@plt+0x18ad8>
   2a380:	strbge	r5, [r3, #1015]!	; 0x3f7
   2a384:	mlaeq	r0, fp, r4, ip
   2a388:			; <UNDEFINED> instruction: 0x001fffff
   2a38c:	andeq	sp, r2, r8, ror #10
   2a390:	andeq	sp, r2, r4, ror r5
   2a394:	andeq	sp, r2, r4, lsl #11
   2a398:	strd	r6, [r9]
   2a39c:	orr	r4, r4, #2
   2a3a0:	b	29d28 <__assert_fail@plt+0x187d0>
   2a3a4:	cmp	r6, #0
   2a3a8:	sbcs	r3, r7, #0
   2a3ac:	blt	2a7e4 <__assert_fail@plt+0x1928c>
   2a3b0:	ldrd	r2, [sp, #16]
   2a3b4:	cmp	r2, r6
   2a3b8:	sbcs	r3, r3, r7
   2a3bc:	blt	2a314 <__assert_fail@plt+0x18dbc>
   2a3c0:	ldr	r3, [sp, #8]
   2a3c4:	ldr	r2, [sp, #12]
   2a3c8:	mov	sl, #0
   2a3cc:	mul	r3, r6, r3
   2a3d0:	mla	r3, r2, r7, r3
   2a3d4:	umull	r6, r7, r6, r2
   2a3d8:	add	r7, r3, r7
   2a3dc:	b	2a030 <__assert_fail@plt+0x18ad8>
   2a3e0:	mov	r3, #1024	; 0x400
   2a3e4:	str	r0, [sp, #8]
   2a3e8:	str	r3, [sp, #12]
   2a3ec:	b	29e74 <__assert_fail@plt+0x1891c>
   2a3f0:	mul	r3, r6, r5
   2a3f4:	cmp	fp, #0
   2a3f8:	mla	r3, sl, r7, r3
   2a3fc:	umull	r6, r7, r6, sl
   2a400:	sub	fp, fp, #1
   2a404:	add	r7, r3, r7
   2a408:	bne	2a194 <__assert_fail@plt+0x18c3c>
   2a40c:	b	2a2e8 <__assert_fail@plt+0x18d90>
   2a410:	mvn	r3, #0
   2a414:	mvn	r2, #0
   2a418:	cmp	r7, r3
   2a41c:	cmpeq	r6, r2
   2a420:	beq	2a3f0 <__assert_fail@plt+0x18e98>
   2a424:	mov	r2, r6
   2a428:	mov	r3, r7
   2a42c:	mov	r0, #0
   2a430:	mov	r1, #-2147483648	; 0x80000000
   2a434:	bl	2c000 <__assert_fail@plt+0x1aaa8>
   2a438:	ldrd	r2, [sp, #24]
   2a43c:	cmp	r0, r2
   2a440:	sbcs	r3, r1, r3
   2a444:	bge	2a3f0 <__assert_fail@plt+0x18e98>
   2a448:	mov	r5, r9
   2a44c:	ldr	r4, [sp, #32]
   2a450:	ldr	r9, [sp, #36]	; 0x24
   2a454:	mov	r6, #0
   2a458:	mov	r7, #-2147483648	; 0x80000000
   2a45c:	mov	sl, #1
   2a460:	b	2a030 <__assert_fail@plt+0x18ad8>
   2a464:	mvn	r3, #0
   2a468:	mvn	r2, #0
   2a46c:	cmp	r7, r3
   2a470:	cmpeq	r6, r2
   2a474:	beq	2a498 <__assert_fail@plt+0x18f40>
   2a478:	mov	r3, r7
   2a47c:	mov	r2, r6
   2a480:	mov	r0, #0
   2a484:	mov	r1, #-2147483648	; 0x80000000
   2a488:	bl	2c000 <__assert_fail@plt+0x1aaa8>
   2a48c:	cmp	r0, #1024	; 0x400
   2a490:	sbcs	r3, r1, #0
   2a494:	blt	2a454 <__assert_fail@plt+0x18efc>
   2a498:	lsl	r3, r7, #10
   2a49c:	orr	r3, r3, r6, lsr #22
   2a4a0:	lsl	r2, r6, #10
   2a4a4:	mov	r6, r2
   2a4a8:	mov	r7, r3
   2a4ac:	mov	sl, #0
   2a4b0:	b	2a030 <__assert_fail@plt+0x18ad8>
   2a4b4:	mvn	r3, #0
   2a4b8:	mvn	r2, #0
   2a4bc:	cmp	r7, r3
   2a4c0:	cmpeq	r6, r2
   2a4c4:	beq	2a2cc <__assert_fail@plt+0x18d74>
   2a4c8:	mov	r2, r6
   2a4cc:	mov	r3, r7
   2a4d0:	mov	r0, #0
   2a4d4:	mov	r1, #-2147483648	; 0x80000000
   2a4d8:	bl	2c000 <__assert_fail@plt+0x1aaa8>
   2a4dc:	ldrd	r2, [sp, #24]
   2a4e0:	cmp	r0, r2
   2a4e4:	sbcs	r3, r1, r3
   2a4e8:	bge	2a2cc <__assert_fail@plt+0x18d74>
   2a4ec:	b	2a448 <__assert_fail@plt+0x18ef0>
   2a4f0:	mvn	r3, #0
   2a4f4:	mvn	r2, #0
   2a4f8:	cmp	r7, r3
   2a4fc:	cmpeq	r6, r2
   2a500:	beq	2a528 <__assert_fail@plt+0x18fd0>
   2a504:	mov	r2, r6
   2a508:	mov	r3, r7
   2a50c:	mov	r0, #0
   2a510:	mov	r1, #-2147483648	; 0x80000000
   2a514:	bl	2c000 <__assert_fail@plt+0x1aaa8>
   2a518:	ldrd	r2, [sp, #24]
   2a51c:	cmp	r0, r2
   2a520:	sbcs	r3, r1, r3
   2a524:	blt	2a69c <__assert_fail@plt+0x19144>
   2a528:	ldr	r3, [sp, #8]
   2a52c:	cmp	fp, #0
   2a530:	sub	fp, fp, #1
   2a534:	mul	r3, r6, r3
   2a538:	mla	r3, sl, r7, r3
   2a53c:	umull	r6, r7, r6, sl
   2a540:	add	r7, r3, r7
   2a544:	bne	2a1e8 <__assert_fail@plt+0x18c90>
   2a548:	mov	sl, r4
   2a54c:	mov	r4, r5
   2a550:	mov	r5, r9
   2a554:	ldr	r9, [sp, #32]
   2a558:	b	2a030 <__assert_fail@plt+0x18ad8>
   2a55c:	mvn	r3, #0
   2a560:	mvn	r2, #0
   2a564:	cmp	r7, r3
   2a568:	cmpeq	r6, r2
   2a56c:	beq	2a594 <__assert_fail@plt+0x1903c>
   2a570:	mov	r2, r6
   2a574:	mov	r3, r7
   2a578:	mov	r0, #0
   2a57c:	mov	r1, #-2147483648	; 0x80000000
   2a580:	bl	2c000 <__assert_fail@plt+0x1aaa8>
   2a584:	ldrd	r2, [sp, #24]
   2a588:	cmp	r0, r2
   2a58c:	sbcs	r3, r1, r3
   2a590:	blt	2a5b4 <__assert_fail@plt+0x1905c>
   2a594:	mul	r3, r6, r5
   2a598:	cmp	fp, #0
   2a59c:	mla	r3, sl, r7, r3
   2a5a0:	umull	r6, r7, r6, sl
   2a5a4:	sub	fp, fp, #1
   2a5a8:	add	r7, r3, r7
   2a5ac:	bne	2a130 <__assert_fail@plt+0x18bd8>
   2a5b0:	b	2a2e8 <__assert_fail@plt+0x18d90>
   2a5b4:	sub	fp, fp, #1
   2a5b8:	cmn	fp, #1
   2a5bc:	mov	r6, #0
   2a5c0:	mov	r7, #-2147483648	; 0x80000000
   2a5c4:	mov	r4, #1
   2a5c8:	bne	2a570 <__assert_fail@plt+0x19018>
   2a5cc:	b	2a448 <__assert_fail@plt+0x18ef0>
   2a5d0:	mvn	r3, #0
   2a5d4:	mvn	r2, #0
   2a5d8:	cmp	r7, r3
   2a5dc:	cmpeq	r6, r2
   2a5e0:	beq	2a370 <__assert_fail@plt+0x18e18>
   2a5e4:	mov	r2, r6
   2a5e8:	mov	r3, r7
   2a5ec:	mov	r0, #0
   2a5f0:	mov	r1, #-2147483648	; 0x80000000
   2a5f4:	bl	2c000 <__assert_fail@plt+0x1aaa8>
   2a5f8:	cmp	r1, #0
   2a5fc:	cmpeq	r0, #1
   2a600:	beq	2a454 <__assert_fail@plt+0x18efc>
   2a604:	b	2a370 <__assert_fail@plt+0x18e18>
   2a608:	mvn	r3, #0
   2a60c:	mvn	r2, #0
   2a610:	cmp	r7, r3
   2a614:	cmpeq	r6, r2
   2a618:	beq	2a33c <__assert_fail@plt+0x18de4>
   2a61c:	mov	r3, r7
   2a620:	mov	r2, r6
   2a624:	mov	r0, #0
   2a628:	mov	r1, #-2147483648	; 0x80000000
   2a62c:	bl	2c000 <__assert_fail@plt+0x1aaa8>
   2a630:	cmp	r0, #512	; 0x200
   2a634:	sbcs	r3, r1, #0
   2a638:	blt	2a454 <__assert_fail@plt+0x18efc>
   2a63c:	b	2a33c <__assert_fail@plt+0x18de4>
   2a640:	ldr	r3, [sp, #8]
   2a644:	cmp	fp, #0
   2a648:	sub	fp, fp, #1
   2a64c:	mul	r3, r6, r3
   2a650:	mla	r3, sl, r7, r3
   2a654:	umull	r6, r7, r6, sl
   2a658:	add	r7, r3, r7
   2a65c:	bne	2a23c <__assert_fail@plt+0x18ce4>
   2a660:	b	2a548 <__assert_fail@plt+0x18ff0>
   2a664:	mvn	r3, #0
   2a668:	mvn	r2, #0
   2a66c:	cmp	r7, r3
   2a670:	cmpeq	r6, r2
   2a674:	beq	2a640 <__assert_fail@plt+0x190e8>
   2a678:	mov	r2, r6
   2a67c:	mov	r3, r7
   2a680:	mov	r0, #0
   2a684:	mov	r1, #-2147483648	; 0x80000000
   2a688:	bl	2c000 <__assert_fail@plt+0x1aaa8>
   2a68c:	ldrd	r2, [sp, #24]
   2a690:	cmp	r0, r2
   2a694:	sbcs	r3, r1, r3
   2a698:	bge	2a640 <__assert_fail@plt+0x190e8>
   2a69c:	mov	r4, r5
   2a6a0:	mov	r5, r9
   2a6a4:	ldr	r9, [sp, #32]
   2a6a8:	b	2a454 <__assert_fail@plt+0x18efc>
   2a6ac:	ldr	r3, [sp, #8]
   2a6b0:	ldr	r2, [sp, #12]
   2a6b4:	cmp	fp, #0
   2a6b8:	mul	r3, r6, r3
   2a6bc:	sub	fp, fp, #1
   2a6c0:	mla	r3, r2, r7, r3
   2a6c4:	umull	r6, r7, r6, r2
   2a6c8:	add	r7, r3, r7
   2a6cc:	bne	2a06c <__assert_fail@plt+0x18b14>
   2a6d0:	mov	r3, sl
   2a6d4:	mov	sl, r4
   2a6d8:	mov	r4, r5
   2a6dc:	mov	r5, r9
   2a6e0:	mov	r9, r3
   2a6e4:	b	2a030 <__assert_fail@plt+0x18ad8>
   2a6e8:	mvn	r3, #0
   2a6ec:	mvn	r2, #0
   2a6f0:	cmp	r7, r3
   2a6f4:	cmpeq	r6, r2
   2a6f8:	beq	2a750 <__assert_fail@plt+0x191f8>
   2a6fc:	mov	r3, sl
   2a700:	mov	sl, r9
   2a704:	mov	r9, r5
   2a708:	mov	r5, r4
   2a70c:	mov	r4, fp
   2a710:	mov	fp, r3
   2a714:	mov	r2, r6
   2a718:	mov	r3, r7
   2a71c:	mov	r0, #0
   2a720:	mov	r1, #-2147483648	; 0x80000000
   2a724:	bl	2c000 <__assert_fail@plt+0x1aaa8>
   2a728:	ldrd	r2, [sp, #24]
   2a72c:	cmp	r0, r2
   2a730:	sbcs	r3, r1, r3
   2a734:	blt	2a774 <__assert_fail@plt+0x1921c>
   2a738:	mov	r3, fp
   2a73c:	mov	fp, r4
   2a740:	mov	r4, r5
   2a744:	mov	r5, r9
   2a748:	mov	r9, sl
   2a74c:	mov	sl, r3
   2a750:	ldr	r3, [sp, #8]
   2a754:	cmp	fp, #0
   2a758:	sub	fp, fp, #1
   2a75c:	mul	r3, r6, r3
   2a760:	mla	r3, sl, r7, r3
   2a764:	umull	r6, r7, r6, sl
   2a768:	add	r7, r3, r7
   2a76c:	bne	2a0cc <__assert_fail@plt+0x18b74>
   2a770:	b	2a548 <__assert_fail@plt+0x18ff0>
   2a774:	sub	r4, r4, #1
   2a778:	cmn	r4, #1
   2a77c:	mov	r6, #0
   2a780:	mov	r7, #-2147483648	; 0x80000000
   2a784:	mov	r5, #1
   2a788:	bne	2a714 <__assert_fail@plt+0x191bc>
   2a78c:	mov	r4, r9
   2a790:	mov	r5, sl
   2a794:	ldr	r9, [sp, #32]
   2a798:	b	2a454 <__assert_fail@plt+0x18efc>
   2a79c:	mvn	r3, #0
   2a7a0:	mvn	r2, #0
   2a7a4:	cmp	r7, r3
   2a7a8:	cmpeq	r6, r2
   2a7ac:	beq	2a6ac <__assert_fail@plt+0x19154>
   2a7b0:	mov	r2, r6
   2a7b4:	mov	r3, r7
   2a7b8:	mov	r0, #0
   2a7bc:	mov	r1, #-2147483648	; 0x80000000
   2a7c0:	bl	2c000 <__assert_fail@plt+0x1aaa8>
   2a7c4:	ldrd	r2, [sp, #24]
   2a7c8:	cmp	r0, r2
   2a7cc:	sbcs	r3, r1, r3
   2a7d0:	bge	2a6ac <__assert_fail@plt+0x19154>
   2a7d4:	mov	r4, r5
   2a7d8:	mov	r5, r9
   2a7dc:	mov	r9, sl
   2a7e0:	b	2a454 <__assert_fail@plt+0x18efc>
   2a7e4:	mvn	r3, #0
   2a7e8:	mvn	r2, #0
   2a7ec:	cmp	r7, r3
   2a7f0:	cmpeq	r6, r2
   2a7f4:	beq	2a3c0 <__assert_fail@plt+0x18e68>
   2a7f8:	mov	r2, r6
   2a7fc:	mov	r3, r7
   2a800:	mov	r0, #0
   2a804:	mov	r1, #-2147483648	; 0x80000000
   2a808:	bl	2c000 <__assert_fail@plt+0x1aaa8>
   2a80c:	ldrd	r2, [sp, #24]
   2a810:	cmp	r0, r2
   2a814:	sbcs	r3, r1, r3
   2a818:	blt	2a454 <__assert_fail@plt+0x18efc>
   2a81c:	b	2a3c0 <__assert_fail@plt+0x18e68>
   2a820:	ldr	r3, [pc, #-1180]	; 2a38c <__assert_fail@plt+0x18e34>
   2a824:	mov	r2, #85	; 0x55
   2a828:	ldr	r1, [pc, #-1184]	; 2a390 <__assert_fail@plt+0x18e38>
   2a82c:	ldr	r0, [pc, #-1184]	; 2a394 <__assert_fail@plt+0x18e3c>
   2a830:	bl	11558 <__assert_fail@plt>
   2a834:	andeq	r0, r0, r0
   2a838:	cmp	r2, #36	; 0x24
   2a83c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a840:	sub	sp, sp, #52	; 0x34
   2a844:	bhi	2b5d4 <__assert_fail@plt+0x1a07c>
   2a848:	cmp	r1, #0
   2a84c:	mov	r6, r2
   2a850:	mov	sl, r0
   2a854:	mov	r5, r1
   2a858:	mov	r8, r3
   2a85c:	addeq	r5, sp, #44	; 0x2c
   2a860:	bl	1142c <__errno_location@plt>
   2a864:	mov	r3, #0
   2a868:	str	r3, [r0]
   2a86c:	mov	fp, r0
   2a870:	bl	113fc <__ctype_b_loc@plt>
   2a874:	ldrb	r3, [sl]
   2a878:	mov	r2, sl
   2a87c:	ldr	r0, [r0]
   2a880:	b	2a888 <__assert_fail@plt+0x19330>
   2a884:	ldrb	r3, [r2, #1]!
   2a888:	lsl	r1, r3, #1
   2a88c:	ldrh	r4, [r0, r1]
   2a890:	ands	r4, r4, #8192	; 0x2000
   2a894:	bne	2a884 <__assert_fail@plt+0x1932c>
   2a898:	cmp	r3, #45	; 0x2d
   2a89c:	bne	2a8b0 <__assert_fail@plt+0x19358>
   2a8a0:	mov	r4, #4
   2a8a4:	mov	r0, r4
   2a8a8:	add	sp, sp, #52	; 0x34
   2a8ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a8b0:	mov	r2, r6
   2a8b4:	mov	r3, r4
   2a8b8:	mov	r1, r5
   2a8bc:	mov	r0, sl
   2a8c0:	bl	1127c <__strtoull_internal@plt>
   2a8c4:	ldr	r9, [r5]
   2a8c8:	cmp	sl, r9
   2a8cc:	mov	r6, r0
   2a8d0:	mov	r7, r1
   2a8d4:	beq	2a91c <__assert_fail@plt+0x193c4>
   2a8d8:	ldr	r4, [fp]
   2a8dc:	cmp	r4, #0
   2a8e0:	bne	2a90c <__assert_fail@plt+0x193b4>
   2a8e4:	ldr	r3, [sp, #88]	; 0x58
   2a8e8:	cmp	r3, #0
   2a8ec:	beq	2a8fc <__assert_fail@plt+0x193a4>
   2a8f0:	ldrb	sl, [r9]
   2a8f4:	cmp	sl, #0
   2a8f8:	bne	2a950 <__assert_fail@plt+0x193f8>
   2a8fc:	mov	r0, r4
   2a900:	strd	r6, [r8]
   2a904:	add	sp, sp, #52	; 0x34
   2a908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a90c:	cmp	r4, #34	; 0x22
   2a910:	bne	2a8a0 <__assert_fail@plt+0x19348>
   2a914:	mov	r4, #1
   2a918:	b	2a8e4 <__assert_fail@plt+0x1938c>
   2a91c:	ldr	r3, [sp, #88]	; 0x58
   2a920:	cmp	r3, #0
   2a924:	beq	2a8a0 <__assert_fail@plt+0x19348>
   2a928:	ldrb	sl, [r9]
   2a92c:	cmp	sl, #0
   2a930:	beq	2a8a0 <__assert_fail@plt+0x19348>
   2a934:	mov	r1, sl
   2a938:	mov	r0, r3
   2a93c:	bl	11420 <strchr@plt>
   2a940:	cmp	r0, #0
   2a944:	movne	r6, #1
   2a948:	movne	r7, #0
   2a94c:	beq	2a8a0 <__assert_fail@plt+0x19348>
   2a950:	mov	r1, sl
   2a954:	ldr	r0, [sp, #88]	; 0x58
   2a958:	bl	11420 <strchr@plt>
   2a95c:	cmp	r0, #0
   2a960:	beq	2b4c0 <__assert_fail@plt+0x19f68>
   2a964:	sub	r3, sl, #69	; 0x45
   2a968:	cmp	r3, #47	; 0x2f
   2a96c:	ldrls	pc, [pc, r3, lsl #2]
   2a970:	b	2aa64 <__assert_fail@plt+0x1950c>
   2a974:	andeq	sl, r2, r4, lsr sl
   2a978:	andeq	sl, r2, r4, ror #20
   2a97c:	andeq	sl, r2, r4, lsr sl
   2a980:	andeq	sl, r2, r4, ror #20
   2a984:	andeq	sl, r2, r4, ror #20
   2a988:	andeq	sl, r2, r4, ror #20
   2a98c:	andeq	sl, r2, r4, lsr sl
   2a990:	andeq	sl, r2, r4, ror #20
   2a994:	andeq	sl, r2, r4, lsr sl
   2a998:	andeq	sl, r2, r4, ror #20
   2a99c:	andeq	sl, r2, r4, ror #20
   2a9a0:	andeq	sl, r2, r4, lsr sl
   2a9a4:	andeq	sl, r2, r4, ror #20
   2a9a8:	andeq	sl, r2, r4, ror #20
   2a9ac:	andeq	sl, r2, r4, ror #20
   2a9b0:	andeq	sl, r2, r4, lsr sl
   2a9b4:	andeq	sl, r2, r4, ror #20
   2a9b8:	andeq	sl, r2, r4, ror #20
   2a9bc:	andeq	sl, r2, r4, ror #20
   2a9c0:	andeq	sl, r2, r4, ror #20
   2a9c4:	andeq	sl, r2, r4, lsr sl
   2a9c8:	andeq	sl, r2, r4, lsr sl
   2a9cc:	andeq	sl, r2, r4, ror #20
   2a9d0:	andeq	sl, r2, r4, ror #20
   2a9d4:	andeq	sl, r2, r4, ror #20
   2a9d8:	andeq	sl, r2, r4, ror #20
   2a9dc:	andeq	sl, r2, r4, ror #20
   2a9e0:	andeq	sl, r2, r4, ror #20
   2a9e4:	andeq	sl, r2, r4, ror #20
   2a9e8:	andeq	sl, r2, r4, ror #20
   2a9ec:	andeq	sl, r2, r4, ror #20
   2a9f0:	andeq	sl, r2, r4, ror #20
   2a9f4:	andeq	sl, r2, r4, ror #20
   2a9f8:	andeq	sl, r2, r4, ror #20
   2a9fc:	andeq	sl, r2, r4, lsr sl
   2aa00:	andeq	sl, r2, r4, ror #20
   2aa04:	andeq	sl, r2, r4, ror #20
   2aa08:	andeq	sl, r2, r4, ror #20
   2aa0c:	andeq	sl, r2, r4, lsr sl
   2aa10:	andeq	sl, r2, r4, ror #20
   2aa14:	andeq	sl, r2, r4, lsr sl
   2aa18:	andeq	sl, r2, r4, ror #20
   2aa1c:	andeq	sl, r2, r4, ror #20
   2aa20:	andeq	sl, r2, r4, ror #20
   2aa24:	andeq	sl, r2, r4, ror #20
   2aa28:	andeq	sl, r2, r4, ror #20
   2aa2c:	andeq	sl, r2, r4, ror #20
   2aa30:	andeq	sl, r2, r4, lsr sl
   2aa34:	mov	r1, #48	; 0x30
   2aa38:	ldr	r0, [sp, #88]	; 0x58
   2aa3c:	bl	11420 <strchr@plt>
   2aa40:	cmp	r0, #0
   2aa44:	beq	2b554 <__assert_fail@plt+0x19ffc>
   2aa48:	ldrb	r3, [r9, #1]
   2aa4c:	cmp	r3, #68	; 0x44
   2aa50:	beq	2b534 <__assert_fail@plt+0x19fdc>
   2aa54:	cmp	r3, #105	; 0x69
   2aa58:	beq	2b504 <__assert_fail@plt+0x19fac>
   2aa5c:	cmp	r3, #66	; 0x42
   2aa60:	beq	2b534 <__assert_fail@plt+0x19fdc>
   2aa64:	ldr	r3, [pc, #2948]	; 2b5f0 <__assert_fail@plt+0x1a098>
   2aa68:	mvn	r2, #0
   2aa6c:	mov	r1, #1024	; 0x400
   2aa70:	mov	lr, #0
   2aa74:	strd	r2, [sp]
   2aa78:	mov	r3, #1
   2aa7c:	str	r3, [sp, #12]
   2aa80:	sub	sl, sl, #66	; 0x42
   2aa84:	cmp	sl, #53	; 0x35
   2aa88:	ldrls	pc, [pc, sl, lsl #2]
   2aa8c:	b	2b4c0 <__assert_fail@plt+0x19f68>
   2aa90:	muleq	r2, r0, r4
   2aa94:	andeq	fp, r2, r0, asr #9
   2aa98:	andeq	fp, r2, r0, asr #9
   2aa9c:	andeq	fp, r2, ip, lsl #6
   2aaa0:	andeq	fp, r2, r0, asr #9
   2aaa4:	andeq	fp, r2, r8, asr #4
   2aaa8:	andeq	fp, r2, r0, asr #9
   2aaac:	andeq	fp, r2, r0, asr #9
   2aab0:	andeq	fp, r2, r0, asr #9
   2aab4:	andeq	fp, r2, ip, asr #9
   2aab8:	andeq	fp, r2, r0, asr #9
   2aabc:	andeq	sl, r2, r8, ror #22
   2aac0:	andeq	fp, r2, r0, asr #9
   2aac4:	andeq	fp, r2, r0, asr #9
   2aac8:	strdeq	sl, [r2], -r4
   2aacc:	andeq	fp, r2, r0, asr #9
   2aad0:	andeq	fp, r2, r0, asr #9
   2aad4:	andeq	fp, r2, r0, asr #9
   2aad8:	andeq	sl, r2, r4, ror pc
   2aadc:	andeq	fp, r2, r0, asr #9
   2aae0:	andeq	fp, r2, r0, asr #9
   2aae4:	andeq	fp, r2, r0, asr #9
   2aae8:	andeq	fp, r2, r0, asr #9
   2aaec:	andeq	sl, r2, ip, asr #26
   2aaf0:	andeq	fp, r2, r8, lsr #1
   2aaf4:	andeq	fp, r2, r0, asr #9
   2aaf8:	andeq	fp, r2, r0, asr #9
   2aafc:	andeq	fp, r2, r0, asr #9
   2ab00:	andeq	fp, r2, r0, asr #9
   2ab04:	andeq	fp, r2, r0, asr #9
   2ab08:	andeq	fp, r2, r0, asr #9
   2ab0c:	andeq	fp, r2, r0, asr #9
   2ab10:	andeq	fp, r2, r8, ror r0
   2ab14:	andeq	fp, r2, r0, ror r0
   2ab18:	andeq	fp, r2, r0, asr #9
   2ab1c:	andeq	fp, r2, r0, asr #9
   2ab20:	andeq	fp, r2, r0, asr #9
   2ab24:	andeq	fp, r2, r8, asr #4
   2ab28:	andeq	fp, r2, r0, asr #9
   2ab2c:	andeq	fp, r2, r0, asr #9
   2ab30:	andeq	fp, r2, r0, asr #9
   2ab34:	andeq	fp, r2, ip, asr #9
   2ab38:	andeq	fp, r2, r0, asr #9
   2ab3c:	andeq	sl, r2, r8, ror #22
   2ab40:	andeq	fp, r2, r0, asr #9
   2ab44:	andeq	fp, r2, r0, asr #9
   2ab48:	andeq	fp, r2, r0, asr #9
   2ab4c:	andeq	fp, r2, r0, asr #9
   2ab50:	andeq	fp, r2, r0, asr #9
   2ab54:	andeq	fp, r2, r0, asr #9
   2ab58:	andeq	sl, r2, r4, ror pc
   2ab5c:	andeq	fp, r2, r0, asr #9
   2ab60:	andeq	fp, r2, r0, asr #9
   2ab64:	andeq	fp, r2, r4, asr r0
   2ab68:	mul	r0, r6, lr
   2ab6c:	ldrd	sl, [sp]
   2ab70:	umull	r2, r3, r6, r1
   2ab74:	mla	r0, r1, r7, r0
   2ab78:	cmp	r7, fp
   2ab7c:	cmpeq	r6, sl
   2ab80:	add	r3, r0, r3
   2ab84:	mvnhi	r3, #0
   2ab88:	mvnhi	r2, #0
   2ab8c:	mul	r6, r1, r3
   2ab90:	umull	r0, r1, r1, r2
   2ab94:	mla	lr, lr, r2, r6
   2ab98:	ldrd	r6, [sp]
   2ab9c:	movhi	ip, #1
   2aba0:	movls	ip, #0
   2aba4:	cmp	r7, r3
   2aba8:	cmpeq	r6, r2
   2abac:	mvncc	r0, #0
   2abb0:	add	r1, lr, r1
   2abb4:	mov	sl, r6
   2abb8:	movcc	r1, r0
   2abbc:	mov	fp, r7
   2abc0:	cmp	fp, r3
   2abc4:	cmpeq	sl, r2
   2abc8:	mov	r6, r0
   2abcc:	mov	r7, r1
   2abd0:	orrcc	ip, ip, #1
   2abd4:	ldr	r2, [sp, #12]
   2abd8:	orr	r4, r4, ip
   2abdc:	add	r3, r9, r2
   2abe0:	str	r3, [r5]
   2abe4:	ldrb	r3, [r9, r2]
   2abe8:	cmp	r3, #0
   2abec:	orrne	r4, r4, #2
   2abf0:	b	2a8fc <__assert_fail@plt+0x193a4>
   2abf4:	ldrd	sl, [sp]
   2abf8:	umull	r2, r3, r6, r1
   2abfc:	mul	r0, r6, lr
   2ac00:	cmp	r7, fp
   2ac04:	cmpeq	r6, sl
   2ac08:	mvnhi	r2, #0
   2ac0c:	mla	r0, r1, r7, r0
   2ac10:	umull	sl, fp, r2, r1
   2ac14:	add	r3, r0, r3
   2ac18:	mul	r0, lr, r2
   2ac1c:	mvnhi	r3, #0
   2ac20:	strd	sl, [sp, #16]
   2ac24:	ldrd	sl, [sp]
   2ac28:	mla	r0, r1, r3, r0
   2ac2c:	ldr	ip, [sp, #20]
   2ac30:	cmp	r3, fp
   2ac34:	add	r0, r0, ip
   2ac38:	cmpeq	r2, sl
   2ac3c:	str	r0, [sp, #20]
   2ac40:	bls	2ac58 <__assert_fail@plt+0x19700>
   2ac44:	mvn	sl, #0
   2ac48:	mvn	fp, #0
   2ac4c:	strd	sl, [sp, #16]
   2ac50:	ldr	r0, [sp, #20]
   2ac54:	ldrd	sl, [sp]
   2ac58:	cmp	r7, fp
   2ac5c:	cmpeq	r6, sl
   2ac60:	mul	r0, r1, r0
   2ac64:	ldrd	r6, [sp, #16]
   2ac68:	mla	ip, lr, r6, r0
   2ac6c:	mov	r0, r6
   2ac70:	movhi	r0, #1
   2ac74:	movls	r0, #0
   2ac78:	cmp	r3, fp
   2ac7c:	cmpeq	r2, sl
   2ac80:	ldrd	r2, [sp, #16]
   2ac84:	umull	r6, r7, r1, r6
   2ac88:	orrhi	r0, r0, #1
   2ac8c:	cmp	fp, r3
   2ac90:	cmpeq	sl, r2
   2ac94:	add	r7, ip, r7
   2ac98:	bcc	2b5a4 <__assert_fail@plt+0x1a04c>
   2ac9c:	mov	sl, r6
   2aca0:	mov	fp, r7
   2aca4:	strd	r6, [sp, #24]
   2aca8:	mul	r3, r1, fp
   2acac:	umull	r6, r7, r1, sl
   2acb0:	mla	ip, lr, sl, r3
   2acb4:	ldrd	sl, [sp]
   2acb8:	ldrd	r2, [sp, #16]
   2acbc:	add	r7, ip, r7
   2acc0:	cmp	fp, r3
   2acc4:	cmpeq	sl, r2
   2acc8:	mov	r3, fp
   2accc:	mov	r2, sl
   2acd0:	ldrd	sl, [sp, #24]
   2acd4:	orrcc	r0, r0, #1
   2acd8:	str	r0, [sp, #16]
   2acdc:	cmp	r3, fp
   2ace0:	cmpeq	r2, sl
   2ace4:	bcs	2b23c <__assert_fail@plt+0x19ce4>
   2ace8:	mvn	r2, #0
   2acec:	mvn	r3, #0
   2acf0:	mul	ip, lr, r2
   2acf4:	ldrd	sl, [sp]
   2acf8:	mla	ip, r1, r3, ip
   2acfc:	umull	r6, r7, r2, r1
   2ad00:	ldrd	r0, [sp, #24]
   2ad04:	add	r7, ip, r7
   2ad08:	cmp	fp, r1
   2ad0c:	ldr	r1, [sp, #16]
   2ad10:	cmpeq	sl, r0
   2ad14:	orrcc	r1, r1, #1
   2ad18:	cmp	r3, fp
   2ad1c:	cmpeq	r2, sl
   2ad20:	mvnhi	r0, #0
   2ad24:	movls	ip, r7
   2ad28:	movhi	ip, r0
   2ad2c:	movls	r0, r6
   2ad30:	cmp	r3, fp
   2ad34:	cmpeq	r2, sl
   2ad38:	mov	r7, ip
   2ad3c:	mov	r6, r0
   2ad40:	movls	ip, r1
   2ad44:	orrhi	ip, r1, #1
   2ad48:	b	2abd4 <__assert_fail@plt+0x1967c>
   2ad4c:	ldrd	sl, [sp]
   2ad50:	umull	r2, r3, r6, r1
   2ad54:	mul	r0, r6, lr
   2ad58:	cmp	r7, fp
   2ad5c:	cmpeq	r6, sl
   2ad60:	mvnhi	r2, #0
   2ad64:	mla	r0, r1, r7, r0
   2ad68:	umull	sl, fp, r2, r1
   2ad6c:	add	r3, r0, r3
   2ad70:	mul	r0, lr, r2
   2ad74:	mvnhi	r3, #0
   2ad78:	strd	sl, [sp, #16]
   2ad7c:	ldrd	sl, [sp]
   2ad80:	mla	r0, r1, r3, r0
   2ad84:	ldr	ip, [sp, #20]
   2ad88:	cmp	r3, fp
   2ad8c:	add	r0, r0, ip
   2ad90:	cmpeq	r2, sl
   2ad94:	str	r0, [sp, #20]
   2ad98:	mvnhi	sl, #0
   2ad9c:	mvnhi	fp, #0
   2ada0:	strdhi	sl, [sp, #16]
   2ada4:	ldrdhi	sl, [sp]
   2ada8:	ldr	r0, [sp, #16]
   2adac:	cmp	r3, fp
   2adb0:	ldr	r3, [sp, #20]
   2adb4:	mul	r0, lr, r0
   2adb8:	cmpeq	r2, sl
   2adbc:	mla	r0, r1, r3, r0
   2adc0:	ldr	r3, [sp, #16]
   2adc4:	umull	r2, r3, r3, r1
   2adc8:	strd	r2, [sp, #24]
   2adcc:	movhi	r3, #1
   2add0:	movls	r3, #0
   2add4:	cmp	r7, fp
   2add8:	cmpeq	r6, sl
   2addc:	ldrd	r6, [sp, #16]
   2ade0:	ldr	r2, [sp, #28]
   2ade4:	movls	ip, r3
   2ade8:	orrhi	ip, r3, #1
   2adec:	cmp	r7, fp
   2adf0:	add	r2, r0, r2
   2adf4:	cmpeq	r6, sl
   2adf8:	str	r2, [sp, #28]
   2adfc:	mvnhi	r2, #0
   2ae00:	mvnhi	r3, #0
   2ae04:	strdhi	r2, [sp, #24]
   2ae08:	ldrd	r6, [sp, #24]
   2ae0c:	mul	r2, r1, r7
   2ae10:	umull	sl, fp, r1, r6
   2ae14:	mla	r3, lr, r6, r2
   2ae18:	ldrd	r6, [sp]
   2ae1c:	str	r3, [sp, #32]
   2ae20:	ldrd	r2, [sp, #16]
   2ae24:	cmp	r3, r7
   2ae28:	cmpeq	r2, r6
   2ae2c:	ldrd	r2, [sp, #24]
   2ae30:	orrhi	ip, ip, #1
   2ae34:	cmp	r3, r7
   2ae38:	ldr	r3, [sp, #32]
   2ae3c:	cmpeq	r2, r6
   2ae40:	add	r2, r3, fp
   2ae44:	mov	fp, r2
   2ae48:	bhi	2b58c <__assert_fail@plt+0x1a034>
   2ae4c:	strd	sl, [sp, #16]
   2ae50:	mul	r2, r1, fp
   2ae54:	umull	r6, r7, r1, sl
   2ae58:	mla	r3, lr, sl, r2
   2ae5c:	ldrd	sl, [sp]
   2ae60:	str	r3, [sp, #32]
   2ae64:	ldrd	r2, [sp, #24]
   2ae68:	cmp	r3, fp
   2ae6c:	cmpeq	r2, sl
   2ae70:	ldrd	r2, [sp, #16]
   2ae74:	orrhi	ip, ip, #1
   2ae78:	cmp	fp, r3
   2ae7c:	ldr	r3, [sp, #32]
   2ae80:	cmpeq	sl, r2
   2ae84:	add	r2, r3, r7
   2ae88:	mov	r7, r2
   2ae8c:	mvncc	r7, #0
   2ae90:	mvncc	r6, #0
   2ae94:	mul	r2, r1, r7
   2ae98:	mov	sl, r6
   2ae9c:	strd	r6, [sp, #24]
   2aea0:	mla	r0, lr, sl, r2
   2aea4:	ldrd	r2, [sp, #16]
   2aea8:	ldrd	sl, [sp]
   2aeac:	umull	r6, r7, r1, r6
   2aeb0:	cmp	fp, r3
   2aeb4:	cmpeq	sl, r2
   2aeb8:	mov	r3, fp
   2aebc:	mov	r2, sl
   2aec0:	ldrd	sl, [sp, #24]
   2aec4:	orrcc	ip, ip, #1
   2aec8:	add	r7, r0, r7
   2aecc:	cmp	r3, fp
   2aed0:	cmpeq	r2, sl
   2aed4:	mvncc	r6, #0
   2aed8:	mvncc	r7, #0
   2aedc:	umull	sl, fp, r1, r6
   2aee0:	mul	r3, r1, r7
   2aee4:	strd	sl, [sp, #16]
   2aee8:	mla	r0, lr, r6, r3
   2aeec:	ldrd	sl, [sp, #24]
   2aef0:	ldrd	r2, [sp]
   2aef4:	cmp	r3, fp
   2aef8:	cmpeq	r2, sl
   2aefc:	orrcc	ip, ip, #1
   2af00:	cmp	r3, r7
   2af04:	ldr	r3, [sp, #20]
   2af08:	cmpeq	r2, r6
   2af0c:	add	r3, r0, r3
   2af10:	str	r3, [sp, #20]
   2af14:	mvncc	r2, #0
   2af18:	mvncc	r3, #0
   2af1c:	ldrdcs	r2, [sp, #16]
   2af20:	ldrd	sl, [sp]
   2af24:	mul	r0, r1, r3
   2af28:	cmp	fp, r7
   2af2c:	str	r0, [sp, #16]
   2af30:	cmpeq	sl, r6
   2af34:	ldr	r6, [sp, #16]
   2af38:	umull	r0, r1, r1, r2
   2af3c:	mla	lr, lr, r2, r6
   2af40:	orrcc	ip, ip, #1
   2af44:	cmp	r3, fp
   2af48:	cmpeq	r2, sl
   2af4c:	add	r1, lr, r1
   2af50:	bls	2af5c <__assert_fail@plt+0x19a04>
   2af54:	mvn	r0, #0
   2af58:	mov	r1, r0
   2af5c:	cmp	r3, fp
   2af60:	cmpeq	r2, sl
   2af64:	mov	r6, r0
   2af68:	mov	r7, r1
   2af6c:	orrhi	ip, ip, #1
   2af70:	b	2abd4 <__assert_fail@plt+0x1967c>
   2af74:	ldrd	sl, [sp]
   2af78:	umull	r2, r3, r6, r1
   2af7c:	mul	r0, r6, lr
   2af80:	cmp	r7, fp
   2af84:	cmpeq	r6, sl
   2af88:	mvnhi	r2, #0
   2af8c:	mla	r0, r1, r7, r0
   2af90:	umull	sl, fp, r1, r2
   2af94:	add	r3, r0, r3
   2af98:	mvnhi	r3, #0
   2af9c:	strd	sl, [sp, #16]
   2afa0:	mul	r0, r1, r3
   2afa4:	ldrd	sl, [sp]
   2afa8:	mla	r0, lr, r2, r0
   2afac:	ldr	ip, [sp, #20]
   2afb0:	cmp	fp, r3
   2afb4:	add	r0, r0, ip
   2afb8:	cmpeq	sl, r2
   2afbc:	str	r0, [sp, #20]
   2afc0:	mvncc	sl, #0
   2afc4:	mvncc	fp, #0
   2afc8:	strdcc	sl, [sp, #16]
   2afcc:	ldrdcc	sl, [sp]
   2afd0:	ldr	r0, [sp, #16]
   2afd4:	cmp	fp, r3
   2afd8:	cmpeq	sl, r2
   2afdc:	mul	r0, lr, r0
   2afe0:	ldr	r2, [sp, #20]
   2afe4:	ldr	r3, [sp, #16]
   2afe8:	movcc	ip, #1
   2afec:	movcs	ip, #0
   2aff0:	cmp	r7, fp
   2aff4:	cmpeq	r6, sl
   2aff8:	ldrd	r6, [sp, #16]
   2affc:	mla	r0, r1, r2, r0
   2b000:	umull	r2, r3, r3, r1
   2b004:	orrhi	ip, ip, #1
   2b008:	cmp	r7, fp
   2b00c:	cmpeq	r6, sl
   2b010:	add	r3, r0, r3
   2b014:	mvnhi	r3, #0
   2b018:	mvnhi	r2, #0
   2b01c:	mul	r0, r1, r3
   2b020:	cmp	r7, fp
   2b024:	str	r0, [sp, #24]
   2b028:	cmpeq	r6, sl
   2b02c:	ldr	r6, [sp, #24]
   2b030:	umull	r0, r1, r1, r2
   2b034:	mla	lr, lr, r2, r6
   2b038:	orrhi	ip, ip, #1
   2b03c:	cmp	fp, r3
   2b040:	cmpeq	sl, r2
   2b044:	mvncc	r0, #0
   2b048:	add	r1, lr, r1
   2b04c:	movcc	r1, r0
   2b050:	b	2abc0 <__assert_fail@plt+0x19668>
   2b054:	cmp	r6, #0
   2b058:	sbcs	r3, r7, #0
   2b05c:	blt	2b4f4 <__assert_fail@plt+0x19f9c>
   2b060:	adds	r6, r6, r6
   2b064:	adc	r7, r7, r7
   2b068:	mov	ip, #0
   2b06c:	b	2abd4 <__assert_fail@plt+0x1967c>
   2b070:	mov	ip, #0
   2b074:	b	2abd4 <__assert_fail@plt+0x1967c>
   2b078:	ldr	r3, [pc, #1396]	; 2b5f4 <__assert_fail@plt+0x1a09c>
   2b07c:	mvn	r2, #0
   2b080:	cmp	r7, r3
   2b084:	cmpeq	r6, r2
   2b088:	bhi	2b4f4 <__assert_fail@plt+0x19f9c>
   2b08c:	lsl	r3, r7, #9
   2b090:	orr	r3, r3, r6, lsr #23
   2b094:	lsl	r2, r6, #9
   2b098:	mov	r6, r2
   2b09c:	mov	r7, r3
   2b0a0:	mov	ip, #0
   2b0a4:	b	2abd4 <__assert_fail@plt+0x1967c>
   2b0a8:	ldrd	sl, [sp]
   2b0ac:	umull	r2, r3, r6, r1
   2b0b0:	mul	r0, r6, lr
   2b0b4:	cmp	r7, fp
   2b0b8:	cmpeq	r6, sl
   2b0bc:	mvnhi	r2, #0
   2b0c0:	mla	r0, r1, r7, r0
   2b0c4:	umull	sl, fp, r2, r1
   2b0c8:	add	r3, r0, r3
   2b0cc:	mul	r0, lr, r2
   2b0d0:	mvnhi	r3, #0
   2b0d4:	strd	sl, [sp, #16]
   2b0d8:	ldrd	sl, [sp]
   2b0dc:	mla	r0, r1, r3, r0
   2b0e0:	ldr	ip, [sp, #20]
   2b0e4:	cmp	r3, fp
   2b0e8:	add	r0, r0, ip
   2b0ec:	cmpeq	r2, sl
   2b0f0:	str	r0, [sp, #20]
   2b0f4:	mvnhi	sl, #0
   2b0f8:	mvnhi	fp, #0
   2b0fc:	strdhi	sl, [sp, #16]
   2b100:	ldrdhi	sl, [sp]
   2b104:	ldr	r0, [sp, #16]
   2b108:	cmp	r3, fp
   2b10c:	ldr	r3, [sp, #20]
   2b110:	mul	r0, lr, r0
   2b114:	cmpeq	r2, sl
   2b118:	mla	r0, r1, r3, r0
   2b11c:	ldr	r3, [sp, #16]
   2b120:	umull	r2, r3, r3, r1
   2b124:	strd	r2, [sp, #24]
   2b128:	movhi	r3, #1
   2b12c:	movls	r3, #0
   2b130:	cmp	r7, fp
   2b134:	cmpeq	r6, sl
   2b138:	ldrd	r6, [sp, #16]
   2b13c:	ldr	r2, [sp, #28]
   2b140:	movls	ip, r3
   2b144:	orrhi	ip, r3, #1
   2b148:	cmp	r7, fp
   2b14c:	add	r2, r0, r2
   2b150:	cmpeq	r6, sl
   2b154:	str	r2, [sp, #28]
   2b158:	mvnhi	r2, #0
   2b15c:	mvnhi	r3, #0
   2b160:	strdhi	r2, [sp, #24]
   2b164:	ldrd	r6, [sp, #24]
   2b168:	mul	r2, lr, r6
   2b16c:	umull	sl, fp, r6, r1
   2b170:	mla	r3, r1, r7, r2
   2b174:	ldrd	r6, [sp]
   2b178:	str	r3, [sp, #32]
   2b17c:	ldrd	r2, [sp, #16]
   2b180:	cmp	r3, r7
   2b184:	cmpeq	r2, r6
   2b188:	ldrd	r2, [sp, #24]
   2b18c:	orrhi	ip, ip, #1
   2b190:	cmp	r3, r7
   2b194:	ldr	r3, [sp, #32]
   2b198:	cmpeq	r2, r6
   2b19c:	add	r2, r3, fp
   2b1a0:	mov	fp, r2
   2b1a4:	bhi	2b5bc <__assert_fail@plt+0x1a064>
   2b1a8:	strd	sl, [sp, #16]
   2b1ac:	mul	r2, lr, sl
   2b1b0:	umull	r6, r7, sl, r1
   2b1b4:	mla	r3, r1, fp, r2
   2b1b8:	ldrd	sl, [sp]
   2b1bc:	str	r3, [sp, #32]
   2b1c0:	ldrd	r2, [sp, #24]
   2b1c4:	cmp	r3, fp
   2b1c8:	cmpeq	r2, sl
   2b1cc:	ldrd	r2, [sp, #16]
   2b1d0:	orrhi	ip, ip, #1
   2b1d4:	cmp	r3, fp
   2b1d8:	ldr	r3, [sp, #32]
   2b1dc:	cmpeq	r2, sl
   2b1e0:	add	r2, r3, r7
   2b1e4:	mov	r7, r2
   2b1e8:	mvnhi	r7, #0
   2b1ec:	mvnhi	r6, #0
   2b1f0:	mul	r2, r1, r7
   2b1f4:	mov	sl, r6
   2b1f8:	strd	r6, [sp, #24]
   2b1fc:	mla	r0, lr, sl, r2
   2b200:	ldrd	sl, [sp]
   2b204:	ldrd	r2, [sp, #16]
   2b208:	umull	r6, r7, r1, r6
   2b20c:	cmp	r3, fp
   2b210:	cmpeq	r2, sl
   2b214:	mov	r3, ip
   2b218:	orrhi	r3, r3, #1
   2b21c:	mov	r2, sl
   2b220:	str	r3, [sp, #16]
   2b224:	mov	r3, fp
   2b228:	ldrd	sl, [sp, #24]
   2b22c:	add	r7, r0, r7
   2b230:	cmp	r3, fp
   2b234:	cmpeq	r2, sl
   2b238:	bcc	2ace8 <__assert_fail@plt+0x19790>
   2b23c:	mov	r2, r6
   2b240:	mov	r3, r7
   2b244:	b	2acf0 <__assert_fail@plt+0x19798>
   2b248:	ldrd	sl, [sp]
   2b24c:	umull	r2, r3, r6, r1
   2b250:	mul	r0, r6, lr
   2b254:	cmp	r7, fp
   2b258:	cmpeq	r6, sl
   2b25c:	mvnhi	r2, #0
   2b260:	mla	r0, r1, r7, r0
   2b264:	umull	sl, fp, r2, r1
   2b268:	add	r3, r0, r3
   2b26c:	mul	r0, lr, r2
   2b270:	mvnhi	r3, #0
   2b274:	strd	sl, [sp, #16]
   2b278:	ldrd	sl, [sp]
   2b27c:	mla	r0, r1, r3, r0
   2b280:	ldr	ip, [sp, #20]
   2b284:	cmp	r3, fp
   2b288:	add	r0, r0, ip
   2b28c:	cmpeq	r2, sl
   2b290:	str	r0, [sp, #20]
   2b294:	mvnhi	sl, #0
   2b298:	mvnhi	fp, #0
   2b29c:	strdhi	sl, [sp, #16]
   2b2a0:	ldrdhi	sl, [sp]
   2b2a4:	ldr	r0, [sp, #16]
   2b2a8:	cmp	r3, fp
   2b2ac:	ldr	ip, [sp, #20]
   2b2b0:	mul	r0, lr, r0
   2b2b4:	ldr	r3, [sp, #16]
   2b2b8:	cmpeq	r2, sl
   2b2bc:	mla	r0, r1, ip, r0
   2b2c0:	umull	r2, r3, r3, r1
   2b2c4:	movhi	r1, #1
   2b2c8:	movls	r1, #0
   2b2cc:	cmp	r7, fp
   2b2d0:	cmpeq	r6, sl
   2b2d4:	ldrd	r6, [sp, #16]
   2b2d8:	movls	ip, r1
   2b2dc:	orrhi	ip, r1, #1
   2b2e0:	cmp	r7, fp
   2b2e4:	cmpeq	r6, sl
   2b2e8:	mvnhi	r2, #0
   2b2ec:	add	r3, r0, r3
   2b2f0:	movhi	r3, r2
   2b2f4:	cmp	r7, fp
   2b2f8:	cmpeq	r6, sl
   2b2fc:	mov	r7, r3
   2b300:	mov	r6, r2
   2b304:	orrhi	ip, ip, #1
   2b308:	b	2abd4 <__assert_fail@plt+0x1967c>
   2b30c:	ldrd	sl, [sp]
   2b310:	umull	r2, r3, r6, r1
   2b314:	mul	r0, r6, lr
   2b318:	cmp	r7, fp
   2b31c:	cmpeq	r6, sl
   2b320:	mvnhi	r2, #0
   2b324:	mla	r0, r1, r7, r0
   2b328:	umull	sl, fp, r1, r2
   2b32c:	add	r3, r0, r3
   2b330:	mvnhi	r3, #0
   2b334:	strd	sl, [sp, #16]
   2b338:	mul	r0, r1, r3
   2b33c:	ldrd	sl, [sp]
   2b340:	mla	r0, lr, r2, r0
   2b344:	ldr	ip, [sp, #20]
   2b348:	cmp	fp, r3
   2b34c:	add	r0, r0, ip
   2b350:	cmpeq	sl, r2
   2b354:	str	r0, [sp, #20]
   2b358:	mvncc	sl, #0
   2b35c:	mvncc	fp, #0
   2b360:	strdcc	sl, [sp, #16]
   2b364:	ldrdcc	sl, [sp]
   2b368:	ldr	r0, [sp, #16]
   2b36c:	cmp	fp, r3
   2b370:	ldr	r3, [sp, #20]
   2b374:	mul	r0, lr, r0
   2b378:	cmpeq	sl, r2
   2b37c:	mla	r0, r1, r3, r0
   2b380:	ldr	r3, [sp, #16]
   2b384:	umull	r2, r3, r3, r1
   2b388:	strd	r2, [sp, #24]
   2b38c:	movcc	r3, #1
   2b390:	movcs	r3, #0
   2b394:	cmp	r7, fp
   2b398:	cmpeq	r6, sl
   2b39c:	movls	ip, r3
   2b3a0:	orrhi	ip, r3, #1
   2b3a4:	ldrd	r2, [sp, #16]
   2b3a8:	cmp	r3, fp
   2b3ac:	ldr	r3, [sp, #28]
   2b3b0:	cmpeq	r2, sl
   2b3b4:	add	r3, r0, r3
   2b3b8:	str	r3, [sp, #28]
   2b3bc:	bhi	2b574 <__assert_fail@plt+0x1a01c>
   2b3c0:	ldrd	r2, [sp, #24]
   2b3c4:	mov	sl, r2
   2b3c8:	mov	fp, r3
   2b3cc:	mul	r2, lr, sl
   2b3d0:	umull	r6, r7, sl, r1
   2b3d4:	mla	r0, r1, fp, r2
   2b3d8:	ldrd	r2, [sp]
   2b3dc:	add	r7, r0, r7
   2b3e0:	mov	sl, r2
   2b3e4:	mov	fp, r3
   2b3e8:	strd	r2, [sp, #32]
   2b3ec:	ldrd	r2, [sp, #16]
   2b3f0:	cmp	r3, fp
   2b3f4:	cmpeq	r2, sl
   2b3f8:	ldrd	r2, [sp, #32]
   2b3fc:	ldrd	sl, [sp, #24]
   2b400:	orrhi	ip, ip, #1
   2b404:	cmp	fp, r3
   2b408:	cmpeq	sl, r2
   2b40c:	mvnhi	r6, #0
   2b410:	mvnhi	r7, #0
   2b414:	umull	sl, fp, r6, r1
   2b418:	mul	r3, lr, r6
   2b41c:	strd	sl, [sp, #16]
   2b420:	mla	r0, r1, r7, r3
   2b424:	ldrd	sl, [sp, #24]
   2b428:	ldrd	r2, [sp]
   2b42c:	cmp	fp, r3
   2b430:	cmpeq	sl, r2
   2b434:	orrhi	ip, ip, #1
   2b438:	cmp	r7, r3
   2b43c:	ldr	r3, [sp, #20]
   2b440:	cmpeq	r6, r2
   2b444:	add	r3, r0, r3
   2b448:	str	r3, [sp, #20]
   2b44c:	mvnhi	r2, #0
   2b450:	mvnhi	r3, #0
   2b454:	ldrdls	r2, [sp, #16]
   2b458:	ldrd	sl, [sp]
   2b45c:	mul	r0, r1, r3
   2b460:	cmp	r7, fp
   2b464:	str	r0, [sp, #16]
   2b468:	cmpeq	r6, sl
   2b46c:	ldr	r6, [sp, #16]
   2b470:	umull	r0, r1, r1, r2
   2b474:	mla	lr, lr, r2, r6
   2b478:	orrhi	ip, ip, #1
   2b47c:	cmp	r3, fp
   2b480:	cmpeq	r2, sl
   2b484:	add	r1, lr, r1
   2b488:	bls	2af5c <__assert_fail@plt+0x19a04>
   2b48c:	b	2af54 <__assert_fail@plt+0x199fc>
   2b490:	ldr	r3, [pc, #344]	; 2b5f0 <__assert_fail@plt+0x1a098>
   2b494:	mvn	r2, #0
   2b498:	cmp	r7, r3
   2b49c:	cmpeq	r6, r2
   2b4a0:	bhi	2b4f4 <__assert_fail@plt+0x19f9c>
   2b4a4:	lsl	r3, r7, #10
   2b4a8:	orr	r3, r3, r6, lsr #22
   2b4ac:	lsl	r2, r6, #10
   2b4b0:	mov	r6, r2
   2b4b4:	mov	r7, r3
   2b4b8:	mov	ip, #0
   2b4bc:	b	2abd4 <__assert_fail@plt+0x1967c>
   2b4c0:	strd	r6, [r8]
   2b4c4:	orr	r4, r4, #2
   2b4c8:	b	2a8a4 <__assert_fail@plt+0x1934c>
   2b4cc:	ldrd	r2, [sp]
   2b4d0:	cmp	r7, r3
   2b4d4:	cmpeq	r6, r2
   2b4d8:	bhi	2b4f4 <__assert_fail@plt+0x19f9c>
   2b4dc:	mul	r3, r6, lr
   2b4e0:	mov	ip, #0
   2b4e4:	mla	r3, r1, r7, r3
   2b4e8:	umull	r6, r7, r6, r1
   2b4ec:	add	r7, r3, r7
   2b4f0:	b	2abd4 <__assert_fail@plt+0x1967c>
   2b4f4:	mvn	r6, #0
   2b4f8:	mvn	r7, #0
   2b4fc:	mov	ip, #1
   2b500:	b	2abd4 <__assert_fail@plt+0x1967c>
   2b504:	ldrb	r3, [r9, #2]
   2b508:	mvn	r2, #0
   2b50c:	mov	r1, #1024	; 0x400
   2b510:	cmp	r3, #66	; 0x42
   2b514:	ldr	r3, [pc, #212]	; 2b5f0 <__assert_fail@plt+0x1a098>
   2b518:	mov	lr, #0
   2b51c:	strd	r2, [sp]
   2b520:	moveq	r3, #3
   2b524:	streq	r3, [sp, #12]
   2b528:	movne	r3, #1
   2b52c:	strne	r3, [sp, #12]
   2b530:	b	2aa80 <__assert_fail@plt+0x19528>
   2b534:	add	r3, pc, #172	; 0xac
   2b538:	ldrd	r2, [r3]
   2b53c:	mov	r1, #1000	; 0x3e8
   2b540:	mov	lr, #0
   2b544:	strd	r2, [sp]
   2b548:	mov	r3, #2
   2b54c:	str	r3, [sp, #12]
   2b550:	b	2aa80 <__assert_fail@plt+0x19528>
   2b554:	ldr	r3, [pc, #148]	; 2b5f0 <__assert_fail@plt+0x1a098>
   2b558:	mvn	r2, #0
   2b55c:	mov	lr, r0
   2b560:	strd	r2, [sp]
   2b564:	mov	r3, #1
   2b568:	mov	r1, #1024	; 0x400
   2b56c:	str	r3, [sp, #12]
   2b570:	b	2aa80 <__assert_fail@plt+0x19528>
   2b574:	mvn	r2, #0
   2b578:	mvn	r3, #0
   2b57c:	mov	sl, r2
   2b580:	strd	r2, [sp, #24]
   2b584:	mov	fp, r3
   2b588:	b	2b3cc <__assert_fail@plt+0x19e74>
   2b58c:	mvn	r2, #0
   2b590:	mvn	r3, #0
   2b594:	mov	sl, r2
   2b598:	strd	r2, [sp, #16]
   2b59c:	mov	fp, r3
   2b5a0:	b	2ae50 <__assert_fail@plt+0x198f8>
   2b5a4:	mvn	r2, #0
   2b5a8:	mvn	r3, #0
   2b5ac:	mov	sl, r2
   2b5b0:	strd	r2, [sp, #24]
   2b5b4:	mov	fp, r3
   2b5b8:	b	2aca8 <__assert_fail@plt+0x19750>
   2b5bc:	mvn	r2, #0
   2b5c0:	mvn	r3, #0
   2b5c4:	mov	sl, r2
   2b5c8:	strd	r2, [sp, #16]
   2b5cc:	mov	fp, r3
   2b5d0:	b	2b1ac <__assert_fail@plt+0x19c54>
   2b5d4:	ldr	r3, [pc, #28]	; 2b5f8 <__assert_fail@plt+0x1a0a0>
   2b5d8:	mov	r2, #85	; 0x55
   2b5dc:	ldr	r1, [pc, #24]	; 2b5fc <__assert_fail@plt+0x1a0a4>
   2b5e0:	ldr	r0, [pc, #24]	; 2b600 <__assert_fail@plt+0x1a0a8>
   2b5e4:	bl	11558 <__assert_fail@plt>
   2b5e8:	blmi	ff1d55ac <optarg@@GLIBC_2.4+0xff1973ec>
   2b5ec:	subeq	r8, r1, r7, lsr r9
   2b5f0:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   2b5f4:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   2b5f8:	andeq	sp, r2, ip, lsr #11
   2b5fc:	andeq	sp, r2, r4, ror r5
   2b600:	andeq	sp, r2, r4, lsl #11
   2b604:	cmp	r1, #0
   2b608:	cmpne	r0, #0
   2b60c:	moveq	r1, #1
   2b610:	moveq	r0, r1
   2b614:	umull	r2, r3, r0, r1
   2b618:	adds	r3, r3, #0
   2b61c:	movne	r3, #1
   2b620:	cmp	r2, #0
   2b624:	blt	2b634 <__assert_fail@plt+0x1a0dc>
   2b628:	cmp	r3, #0
   2b62c:	bne	2b634 <__assert_fail@plt+0x1a0dc>
   2b630:	b	111b0 <calloc@plt>
   2b634:	push	{r4, lr}
   2b638:	bl	1142c <__errno_location@plt>
   2b63c:	mov	r3, #12
   2b640:	str	r3, [r0]
   2b644:	mov	r0, #0
   2b648:	pop	{r4, pc}
   2b64c:	cmp	r0, #0
   2b650:	moveq	r0, #1
   2b654:	cmp	r0, #0
   2b658:	blt	2b660 <__assert_fail@plt+0x1a108>
   2b65c:	b	1139c <malloc@plt>
   2b660:	push	{r4, lr}
   2b664:	bl	1142c <__errno_location@plt>
   2b668:	mov	r3, #12
   2b66c:	str	r3, [r0]
   2b670:	mov	r0, #0
   2b674:	pop	{r4, pc}
   2b678:	cmp	r0, #0
   2b67c:	beq	2b6a0 <__assert_fail@plt+0x1a148>
   2b680:	cmp	r1, #0
   2b684:	push	{lr}		; (str lr, [sp, #-4]!)
   2b688:	sub	sp, sp, #12
   2b68c:	beq	2b6a8 <__assert_fail@plt+0x1a150>
   2b690:	blt	2b6c0 <__assert_fail@plt+0x1a168>
   2b694:	add	sp, sp, #12
   2b698:	pop	{lr}		; (ldr lr, [sp], #4)
   2b69c:	b	112f4 <realloc@plt>
   2b6a0:	mov	r0, r1
   2b6a4:	b	2b64c <__assert_fail@plt+0x1a0f4>
   2b6a8:	str	r1, [sp, #4]
   2b6ac:	bl	13c04 <__assert_fail@plt+0x26ac>
   2b6b0:	ldr	r3, [sp, #4]
   2b6b4:	mov	r0, r3
   2b6b8:	add	sp, sp, #12
   2b6bc:	pop	{pc}		; (ldr pc, [sp], #4)
   2b6c0:	bl	1142c <__errno_location@plt>
   2b6c4:	mov	r2, #12
   2b6c8:	mov	r3, #0
   2b6cc:	str	r2, [r0]
   2b6d0:	b	2b6b4 <__assert_fail@plt+0x1a15c>
   2b6d4:	push	{r4, r5, r6, lr}
   2b6d8:	mov	r4, r0
   2b6dc:	bl	1136c <__fpending@plt>
   2b6e0:	ldr	r5, [r4]
   2b6e4:	and	r5, r5, #32
   2b6e8:	mov	r6, r0
   2b6ec:	mov	r0, r4
   2b6f0:	bl	13a08 <__assert_fail@plt+0x24b0>
   2b6f4:	cmp	r5, #0
   2b6f8:	mov	r4, r0
   2b6fc:	bne	2b71c <__assert_fail@plt+0x1a1c4>
   2b700:	cmp	r0, #0
   2b704:	beq	2b714 <__assert_fail@plt+0x1a1bc>
   2b708:	cmp	r6, #0
   2b70c:	beq	2b738 <__assert_fail@plt+0x1a1e0>
   2b710:	mvn	r4, #0
   2b714:	mov	r0, r4
   2b718:	pop	{r4, r5, r6, pc}
   2b71c:	cmp	r0, #0
   2b720:	bne	2b710 <__assert_fail@plt+0x1a1b8>
   2b724:	bl	1142c <__errno_location@plt>
   2b728:	str	r4, [r0]
   2b72c:	mvn	r4, #0
   2b730:	mov	r0, r4
   2b734:	pop	{r4, r5, r6, pc}
   2b738:	bl	1142c <__errno_location@plt>
   2b73c:	ldr	r4, [r0]
   2b740:	subs	r4, r4, #9
   2b744:	mvnne	r4, #0
   2b748:	mov	r0, r4
   2b74c:	pop	{r4, r5, r6, pc}
   2b750:	ldr	ip, [r0, #4]
   2b754:	cmp	ip, r1
   2b758:	bcs	2b7d4 <__assert_fail@plt+0x1a27c>
   2b75c:	cmp	r3, #0
   2b760:	push	{r4, r5, r6, r7, r8, lr}
   2b764:	mov	r6, r3
   2b768:	mov	r7, r2
   2b76c:	mov	r5, r1
   2b770:	mov	r4, r0
   2b774:	bne	2b7a8 <__assert_fail@plt+0x1a250>
   2b778:	ldr	r0, [r4, #8]
   2b77c:	mul	r1, r6, r5
   2b780:	cmp	r0, r7
   2b784:	beq	2b7e4 <__assert_fail@plt+0x1a28c>
   2b788:	bl	2b678 <__assert_fail@plt+0x1a120>
   2b78c:	subs	r7, r0, #0
   2b790:	beq	2b810 <__assert_fail@plt+0x1a2b8>
   2b794:	mov	r3, #1
   2b798:	stmib	r4, {r5, r7}
   2b79c:	str	r5, [r4]
   2b7a0:	mov	r0, r3
   2b7a4:	pop	{r4, r5, r6, r7, r8, pc}
   2b7a8:	mov	r1, r3
   2b7ac:	mvn	r0, #0
   2b7b0:	bl	2bbb4 <__assert_fail@plt+0x1a65c>
   2b7b4:	cmp	r5, r0
   2b7b8:	bls	2b778 <__assert_fail@plt+0x1a220>
   2b7bc:	bl	1142c <__errno_location@plt>
   2b7c0:	mov	r3, #0
   2b7c4:	mov	r2, #12
   2b7c8:	str	r2, [r0]
   2b7cc:	mov	r0, r3
   2b7d0:	pop	{r4, r5, r6, r7, r8, pc}
   2b7d4:	mov	r3, #1
   2b7d8:	str	r1, [r0]
   2b7dc:	mov	r0, r3
   2b7e0:	bx	lr
   2b7e4:	mov	r0, r1
   2b7e8:	bl	2b64c <__assert_fail@plt+0x1a0f4>
   2b7ec:	subs	r7, r0, #0
   2b7f0:	beq	2b810 <__assert_fail@plt+0x1a2b8>
   2b7f4:	ldr	r1, [r4, #8]
   2b7f8:	cmp	r1, #0
   2b7fc:	beq	2b794 <__assert_fail@plt+0x1a23c>
   2b800:	ldr	r2, [r4]
   2b804:	mul	r2, r2, r6
   2b808:	bl	11264 <memcpy@plt>
   2b80c:	b	2b794 <__assert_fail@plt+0x1a23c>
   2b810:	mov	r3, #0
   2b814:	b	2b7a0 <__assert_fail@plt+0x1a248>
   2b818:	push	{r1, r2, r3}
   2b81c:	push	{r4, r5, r6, r7, lr}
   2b820:	sub	sp, sp, #8
   2b824:	add	r3, sp, #32
   2b828:	ldr	r1, [sp, #28]
   2b82c:	str	r3, [sp, #4]
   2b830:	cmp	r1, #0
   2b834:	beq	2b8cc <__assert_fail@plt+0x1a374>
   2b838:	ldr	r2, [pc, #412]	; 2b9dc <__assert_fail@plt+0x1a484>
   2b83c:	mov	r5, r0
   2b840:	cmp	r1, r2
   2b844:	bne	2b890 <__assert_fail@plt+0x1a338>
   2b848:	ldr	r6, [pc, #400]	; 2b9e0 <__assert_fail@plt+0x1a488>
   2b84c:	ldr	r7, [r3]
   2b850:	add	r2, sp, #36	; 0x24
   2b854:	ldr	r3, [r6]
   2b858:	str	r2, [sp, #4]
   2b85c:	cmp	r3, #0
   2b860:	mov	r2, r7
   2b864:	blt	2b990 <__assert_fail@plt+0x1a438>
   2b868:	bl	114b0 <fcntl64@plt>
   2b86c:	subs	r4, r0, #0
   2b870:	blt	2b914 <__assert_fail@plt+0x1a3bc>
   2b874:	mov	r3, #1
   2b878:	str	r3, [r6]
   2b87c:	mov	r0, r4
   2b880:	add	sp, sp, #8
   2b884:	pop	{r4, r5, r6, r7, lr}
   2b888:	add	sp, sp, #12
   2b88c:	bx	lr
   2b890:	cmp	r1, #11
   2b894:	beq	2b8bc <__assert_fail@plt+0x1a364>
   2b898:	bgt	2b8dc <__assert_fail@plt+0x1a384>
   2b89c:	cmp	r1, #3
   2b8a0:	beq	2b8bc <__assert_fail@plt+0x1a364>
   2b8a4:	ble	2b9d0 <__assert_fail@plt+0x1a478>
   2b8a8:	cmp	r1, #8
   2b8ac:	beq	2b8fc <__assert_fail@plt+0x1a3a4>
   2b8b0:	ble	2b8fc <__assert_fail@plt+0x1a3a4>
   2b8b4:	cmp	r1, #9
   2b8b8:	bne	2b8fc <__assert_fail@plt+0x1a3a4>
   2b8bc:	mov	r0, r5
   2b8c0:	bl	114b0 <fcntl64@plt>
   2b8c4:	mov	r4, r0
   2b8c8:	b	2b87c <__assert_fail@plt+0x1a324>
   2b8cc:	ldr	r2, [sp, #32]
   2b8d0:	bl	114b0 <fcntl64@plt>
   2b8d4:	mov	r4, r0
   2b8d8:	b	2b87c <__assert_fail@plt+0x1a324>
   2b8dc:	ldr	r3, [pc, #256]	; 2b9e4 <__assert_fail@plt+0x1a48c>
   2b8e0:	cmp	r1, r3
   2b8e4:	bgt	2b9b0 <__assert_fail@plt+0x1a458>
   2b8e8:	cmp	r1, r2
   2b8ec:	bge	2b8fc <__assert_fail@plt+0x1a3a4>
   2b8f0:	sub	r3, r3, #6
   2b8f4:	cmp	r1, r3
   2b8f8:	beq	2b8bc <__assert_fail@plt+0x1a364>
   2b8fc:	ldr	r3, [sp, #4]
   2b900:	mov	r0, r5
   2b904:	ldr	r2, [r3]
   2b908:	bl	114b0 <fcntl64@plt>
   2b90c:	mov	r4, r0
   2b910:	b	2b87c <__assert_fail@plt+0x1a324>
   2b914:	bl	1142c <__errno_location@plt>
   2b918:	ldr	r3, [r0]
   2b91c:	cmp	r3, #22
   2b920:	bne	2b874 <__assert_fail@plt+0x1a31c>
   2b924:	mov	r2, r7
   2b928:	mov	r0, r5
   2b92c:	mov	r1, #0
   2b930:	bl	114b0 <fcntl64@plt>
   2b934:	subs	r4, r0, #0
   2b938:	blt	2b87c <__assert_fail@plt+0x1a324>
   2b93c:	mvn	r3, #0
   2b940:	str	r3, [r6]
   2b944:	mov	r1, #1
   2b948:	mov	r0, r4
   2b94c:	bl	114b0 <fcntl64@plt>
   2b950:	subs	r2, r0, #0
   2b954:	blt	2b970 <__assert_fail@plt+0x1a418>
   2b958:	orr	r2, r2, #1
   2b95c:	mov	r1, #2
   2b960:	mov	r0, r4
   2b964:	bl	114b0 <fcntl64@plt>
   2b968:	cmn	r0, #1
   2b96c:	bne	2b87c <__assert_fail@plt+0x1a324>
   2b970:	bl	1142c <__errno_location@plt>
   2b974:	mov	r5, r0
   2b978:	mov	r0, r4
   2b97c:	ldr	r6, [r5]
   2b980:	mvn	r4, #0
   2b984:	bl	11540 <close@plt>
   2b988:	str	r6, [r5]
   2b98c:	b	2b87c <__assert_fail@plt+0x1a324>
   2b990:	mov	r1, #0
   2b994:	bl	114b0 <fcntl64@plt>
   2b998:	subs	r4, r0, #0
   2b99c:	blt	2b87c <__assert_fail@plt+0x1a324>
   2b9a0:	ldr	r3, [r6]
   2b9a4:	cmn	r3, #1
   2b9a8:	beq	2b944 <__assert_fail@plt+0x1a3ec>
   2b9ac:	b	2b87c <__assert_fail@plt+0x1a324>
   2b9b0:	ldr	r3, [pc, #48]	; 2b9e8 <__assert_fail@plt+0x1a490>
   2b9b4:	cmp	r1, r3
   2b9b8:	beq	2b8fc <__assert_fail@plt+0x1a3a4>
   2b9bc:	blt	2b8bc <__assert_fail@plt+0x1a364>
   2b9c0:	add	r3, r3, #1
   2b9c4:	cmp	r1, r3
   2b9c8:	bne	2b8fc <__assert_fail@plt+0x1a3a4>
   2b9cc:	b	2b8bc <__assert_fail@plt+0x1a364>
   2b9d0:	cmp	r1, #1
   2b9d4:	bne	2b8fc <__assert_fail@plt+0x1a3a4>
   2b9d8:	b	2b8bc <__assert_fail@plt+0x1a364>
   2b9dc:	andeq	r0, r0, r6, lsl #8
   2b9e0:	strdeq	lr, [r3], -r8
   2b9e4:	andeq	r0, r0, r7, lsl #8
   2b9e8:	andeq	r0, r0, r9, lsl #8
   2b9ec:	push	{r4, lr}
   2b9f0:	mov	r0, #14
   2b9f4:	bl	114e0 <nl_langinfo@plt>
   2b9f8:	cmp	r0, #0
   2b9fc:	beq	2ba14 <__assert_fail@plt+0x1a4bc>
   2ba00:	ldrb	r2, [r0]
   2ba04:	ldr	r3, [pc, #16]	; 2ba1c <__assert_fail@plt+0x1a4c4>
   2ba08:	cmp	r2, #0
   2ba0c:	moveq	r0, r3
   2ba10:	pop	{r4, pc}
   2ba14:	ldr	r0, [pc]	; 2ba1c <__assert_fail@plt+0x1a4c4>
   2ba18:	pop	{r4, pc}
   2ba1c:			; <UNDEFINED> instruction: 0x0002d5b8
   2ba20:	push	{r4, r5, r6, r7, lr}
   2ba24:	subs	r6, r0, #0
   2ba28:	sub	sp, sp, #12
   2ba2c:	addeq	r6, sp, #4
   2ba30:	mov	r0, r6
   2ba34:	mov	r5, r2
   2ba38:	mov	r7, r1
   2ba3c:	bl	11378 <mbrtowc@plt>
   2ba40:	cmp	r5, #0
   2ba44:	cmnne	r0, #3
   2ba48:	mov	r4, r0
   2ba4c:	bls	2ba68 <__assert_fail@plt+0x1a510>
   2ba50:	mov	r0, #0
   2ba54:	bl	2bac0 <__assert_fail@plt+0x1a568>
   2ba58:	cmp	r0, #0
   2ba5c:	moveq	r4, #1
   2ba60:	ldrbeq	r3, [r7]
   2ba64:	streq	r3, [r6]
   2ba68:	mov	r0, r4
   2ba6c:	add	sp, sp, #12
   2ba70:	pop	{r4, r5, r6, r7, pc}
   2ba74:	push	{r4, r5, r6, lr}
   2ba78:	subs	r4, r2, #0
   2ba7c:	mov	r6, r0
   2ba80:	mov	r5, r1
   2ba84:	beq	2bab0 <__assert_fail@plt+0x1a558>
   2ba88:	mov	r1, r4
   2ba8c:	mvn	r0, #0
   2ba90:	bl	2bbb4 <__assert_fail@plt+0x1a65c>
   2ba94:	cmp	r0, r5
   2ba98:	bcs	2bab0 <__assert_fail@plt+0x1a558>
   2ba9c:	bl	1142c <__errno_location@plt>
   2baa0:	mov	r3, #12
   2baa4:	str	r3, [r0]
   2baa8:	mov	r0, #0
   2baac:	pop	{r4, r5, r6, pc}
   2bab0:	mul	r1, r5, r4
   2bab4:	mov	r0, r6
   2bab8:	pop	{r4, r5, r6, lr}
   2babc:	b	2b678 <__assert_fail@plt+0x1a120>
   2bac0:	push	{lr}		; (str lr, [sp, #-4]!)
   2bac4:	sub	sp, sp, #268	; 0x10c
   2bac8:	add	r1, sp, #4
   2bacc:	ldr	r2, [pc, #60]	; 2bb10 <__assert_fail@plt+0x1a5b8>
   2bad0:	bl	2bb1c <__assert_fail@plt+0x1a5c4>
   2bad4:	cmp	r0, #0
   2bad8:	movne	r0, #0
   2badc:	bne	2bb08 <__assert_fail@plt+0x1a5b0>
   2bae0:	ldr	r1, [pc, #44]	; 2bb14 <__assert_fail@plt+0x1a5bc>
   2bae4:	add	r0, sp, #4
   2bae8:	bl	111f8 <strcmp@plt>
   2baec:	cmp	r0, #0
   2baf0:	beq	2bb08 <__assert_fail@plt+0x1a5b0>
   2baf4:	add	r0, sp, #4
   2baf8:	ldr	r1, [pc, #24]	; 2bb18 <__assert_fail@plt+0x1a5c0>
   2bafc:	bl	111f8 <strcmp@plt>
   2bb00:	adds	r0, r0, #0
   2bb04:	movne	r0, #1
   2bb08:	add	sp, sp, #268	; 0x10c
   2bb0c:	pop	{pc}		; (ldr pc, [sp], #4)
   2bb10:	andeq	r0, r0, r1, lsl #2
   2bb14:	andeq	sp, r2, r0, asr #11
   2bb18:	andeq	sp, r2, r4, asr #11
   2bb1c:	push	{r4, r5, r6, lr}
   2bb20:	mov	r5, r1
   2bb24:	mov	r1, #0
   2bb28:	mov	r4, r2
   2bb2c:	bl	114bc <setlocale@plt>
   2bb30:	subs	r6, r0, #0
   2bb34:	beq	2bb90 <__assert_fail@plt+0x1a638>
   2bb38:	bl	11414 <strlen@plt>
   2bb3c:	cmp	r4, r0
   2bb40:	bhi	2bb78 <__assert_fail@plt+0x1a620>
   2bb44:	cmp	r4, #0
   2bb48:	bne	2bb54 <__assert_fail@plt+0x1a5fc>
   2bb4c:	mov	r0, #34	; 0x22
   2bb50:	pop	{r4, r5, r6, pc}
   2bb54:	sub	r4, r4, #1
   2bb58:	mov	r1, r6
   2bb5c:	mov	r2, r4
   2bb60:	mov	r0, r5
   2bb64:	bl	11264 <memcpy@plt>
   2bb68:	mov	r3, #0
   2bb6c:	strb	r3, [r5, r4]
   2bb70:	mov	r0, #34	; 0x22
   2bb74:	pop	{r4, r5, r6, pc}
   2bb78:	add	r2, r0, #1
   2bb7c:	mov	r1, r6
   2bb80:	mov	r0, r5
   2bb84:	bl	11264 <memcpy@plt>
   2bb88:	mov	r0, #0
   2bb8c:	pop	{r4, r5, r6, pc}
   2bb90:	cmp	r4, #0
   2bb94:	beq	2bba4 <__assert_fail@plt+0x1a64c>
   2bb98:	strb	r6, [r5]
   2bb9c:	mov	r0, #22
   2bba0:	pop	{r4, r5, r6, pc}
   2bba4:	mov	r0, #22
   2bba8:	pop	{r4, r5, r6, pc}
   2bbac:	mov	r1, #0
   2bbb0:	b	114bc <setlocale@plt>
   2bbb4:	subs	r2, r1, #1
   2bbb8:	bxeq	lr
   2bbbc:	bcc	2bd94 <__assert_fail@plt+0x1a83c>
   2bbc0:	cmp	r0, r1
   2bbc4:	bls	2bd78 <__assert_fail@plt+0x1a820>
   2bbc8:	tst	r1, r2
   2bbcc:	beq	2bd84 <__assert_fail@plt+0x1a82c>
   2bbd0:	clz	r3, r0
   2bbd4:	clz	r2, r1
   2bbd8:	sub	r3, r2, r3
   2bbdc:	rsbs	r3, r3, #31
   2bbe0:	addne	r3, r3, r3, lsl #1
   2bbe4:	mov	r2, #0
   2bbe8:	addne	pc, pc, r3, lsl #2
   2bbec:	nop			; (mov r0, r0)
   2bbf0:	cmp	r0, r1, lsl #31
   2bbf4:	adc	r2, r2, r2
   2bbf8:	subcs	r0, r0, r1, lsl #31
   2bbfc:	cmp	r0, r1, lsl #30
   2bc00:	adc	r2, r2, r2
   2bc04:	subcs	r0, r0, r1, lsl #30
   2bc08:	cmp	r0, r1, lsl #29
   2bc0c:	adc	r2, r2, r2
   2bc10:	subcs	r0, r0, r1, lsl #29
   2bc14:	cmp	r0, r1, lsl #28
   2bc18:	adc	r2, r2, r2
   2bc1c:	subcs	r0, r0, r1, lsl #28
   2bc20:	cmp	r0, r1, lsl #27
   2bc24:	adc	r2, r2, r2
   2bc28:	subcs	r0, r0, r1, lsl #27
   2bc2c:	cmp	r0, r1, lsl #26
   2bc30:	adc	r2, r2, r2
   2bc34:	subcs	r0, r0, r1, lsl #26
   2bc38:	cmp	r0, r1, lsl #25
   2bc3c:	adc	r2, r2, r2
   2bc40:	subcs	r0, r0, r1, lsl #25
   2bc44:	cmp	r0, r1, lsl #24
   2bc48:	adc	r2, r2, r2
   2bc4c:	subcs	r0, r0, r1, lsl #24
   2bc50:	cmp	r0, r1, lsl #23
   2bc54:	adc	r2, r2, r2
   2bc58:	subcs	r0, r0, r1, lsl #23
   2bc5c:	cmp	r0, r1, lsl #22
   2bc60:	adc	r2, r2, r2
   2bc64:	subcs	r0, r0, r1, lsl #22
   2bc68:	cmp	r0, r1, lsl #21
   2bc6c:	adc	r2, r2, r2
   2bc70:	subcs	r0, r0, r1, lsl #21
   2bc74:	cmp	r0, r1, lsl #20
   2bc78:	adc	r2, r2, r2
   2bc7c:	subcs	r0, r0, r1, lsl #20
   2bc80:	cmp	r0, r1, lsl #19
   2bc84:	adc	r2, r2, r2
   2bc88:	subcs	r0, r0, r1, lsl #19
   2bc8c:	cmp	r0, r1, lsl #18
   2bc90:	adc	r2, r2, r2
   2bc94:	subcs	r0, r0, r1, lsl #18
   2bc98:	cmp	r0, r1, lsl #17
   2bc9c:	adc	r2, r2, r2
   2bca0:	subcs	r0, r0, r1, lsl #17
   2bca4:	cmp	r0, r1, lsl #16
   2bca8:	adc	r2, r2, r2
   2bcac:	subcs	r0, r0, r1, lsl #16
   2bcb0:	cmp	r0, r1, lsl #15
   2bcb4:	adc	r2, r2, r2
   2bcb8:	subcs	r0, r0, r1, lsl #15
   2bcbc:	cmp	r0, r1, lsl #14
   2bcc0:	adc	r2, r2, r2
   2bcc4:	subcs	r0, r0, r1, lsl #14
   2bcc8:	cmp	r0, r1, lsl #13
   2bccc:	adc	r2, r2, r2
   2bcd0:	subcs	r0, r0, r1, lsl #13
   2bcd4:	cmp	r0, r1, lsl #12
   2bcd8:	adc	r2, r2, r2
   2bcdc:	subcs	r0, r0, r1, lsl #12
   2bce0:	cmp	r0, r1, lsl #11
   2bce4:	adc	r2, r2, r2
   2bce8:	subcs	r0, r0, r1, lsl #11
   2bcec:	cmp	r0, r1, lsl #10
   2bcf0:	adc	r2, r2, r2
   2bcf4:	subcs	r0, r0, r1, lsl #10
   2bcf8:	cmp	r0, r1, lsl #9
   2bcfc:	adc	r2, r2, r2
   2bd00:	subcs	r0, r0, r1, lsl #9
   2bd04:	cmp	r0, r1, lsl #8
   2bd08:	adc	r2, r2, r2
   2bd0c:	subcs	r0, r0, r1, lsl #8
   2bd10:	cmp	r0, r1, lsl #7
   2bd14:	adc	r2, r2, r2
   2bd18:	subcs	r0, r0, r1, lsl #7
   2bd1c:	cmp	r0, r1, lsl #6
   2bd20:	adc	r2, r2, r2
   2bd24:	subcs	r0, r0, r1, lsl #6
   2bd28:	cmp	r0, r1, lsl #5
   2bd2c:	adc	r2, r2, r2
   2bd30:	subcs	r0, r0, r1, lsl #5
   2bd34:	cmp	r0, r1, lsl #4
   2bd38:	adc	r2, r2, r2
   2bd3c:	subcs	r0, r0, r1, lsl #4
   2bd40:	cmp	r0, r1, lsl #3
   2bd44:	adc	r2, r2, r2
   2bd48:	subcs	r0, r0, r1, lsl #3
   2bd4c:	cmp	r0, r1, lsl #2
   2bd50:	adc	r2, r2, r2
   2bd54:	subcs	r0, r0, r1, lsl #2
   2bd58:	cmp	r0, r1, lsl #1
   2bd5c:	adc	r2, r2, r2
   2bd60:	subcs	r0, r0, r1, lsl #1
   2bd64:	cmp	r0, r1
   2bd68:	adc	r2, r2, r2
   2bd6c:	subcs	r0, r0, r1
   2bd70:	mov	r0, r2
   2bd74:	bx	lr
   2bd78:	moveq	r0, #1
   2bd7c:	movne	r0, #0
   2bd80:	bx	lr
   2bd84:	clz	r2, r1
   2bd88:	rsb	r2, r2, #31
   2bd8c:	lsr	r0, r0, r2
   2bd90:	bx	lr
   2bd94:	cmp	r0, #0
   2bd98:	mvnne	r0, #0
   2bd9c:	b	2c0d4 <__assert_fail@plt+0x1ab7c>
   2bda0:	cmp	r1, #0
   2bda4:	beq	2bd94 <__assert_fail@plt+0x1a83c>
   2bda8:	push	{r0, r1, lr}
   2bdac:	bl	2bbb4 <__assert_fail@plt+0x1a65c>
   2bdb0:	pop	{r1, r2, lr}
   2bdb4:	mul	r3, r2, r0
   2bdb8:	sub	r1, r1, r3
   2bdbc:	bx	lr
   2bdc0:	cmp	r1, #0
   2bdc4:	beq	2bfd0 <__assert_fail@plt+0x1aa78>
   2bdc8:	eor	ip, r0, r1
   2bdcc:	rsbmi	r1, r1, #0
   2bdd0:	subs	r2, r1, #1
   2bdd4:	beq	2bf9c <__assert_fail@plt+0x1aa44>
   2bdd8:	movs	r3, r0
   2bddc:	rsbmi	r3, r0, #0
   2bde0:	cmp	r3, r1
   2bde4:	bls	2bfa8 <__assert_fail@plt+0x1aa50>
   2bde8:	tst	r1, r2
   2bdec:	beq	2bfb8 <__assert_fail@plt+0x1aa60>
   2bdf0:	clz	r2, r3
   2bdf4:	clz	r0, r1
   2bdf8:	sub	r2, r0, r2
   2bdfc:	rsbs	r2, r2, #31
   2be00:	addne	r2, r2, r2, lsl #1
   2be04:	mov	r0, #0
   2be08:	addne	pc, pc, r2, lsl #2
   2be0c:	nop			; (mov r0, r0)
   2be10:	cmp	r3, r1, lsl #31
   2be14:	adc	r0, r0, r0
   2be18:	subcs	r3, r3, r1, lsl #31
   2be1c:	cmp	r3, r1, lsl #30
   2be20:	adc	r0, r0, r0
   2be24:	subcs	r3, r3, r1, lsl #30
   2be28:	cmp	r3, r1, lsl #29
   2be2c:	adc	r0, r0, r0
   2be30:	subcs	r3, r3, r1, lsl #29
   2be34:	cmp	r3, r1, lsl #28
   2be38:	adc	r0, r0, r0
   2be3c:	subcs	r3, r3, r1, lsl #28
   2be40:	cmp	r3, r1, lsl #27
   2be44:	adc	r0, r0, r0
   2be48:	subcs	r3, r3, r1, lsl #27
   2be4c:	cmp	r3, r1, lsl #26
   2be50:	adc	r0, r0, r0
   2be54:	subcs	r3, r3, r1, lsl #26
   2be58:	cmp	r3, r1, lsl #25
   2be5c:	adc	r0, r0, r0
   2be60:	subcs	r3, r3, r1, lsl #25
   2be64:	cmp	r3, r1, lsl #24
   2be68:	adc	r0, r0, r0
   2be6c:	subcs	r3, r3, r1, lsl #24
   2be70:	cmp	r3, r1, lsl #23
   2be74:	adc	r0, r0, r0
   2be78:	subcs	r3, r3, r1, lsl #23
   2be7c:	cmp	r3, r1, lsl #22
   2be80:	adc	r0, r0, r0
   2be84:	subcs	r3, r3, r1, lsl #22
   2be88:	cmp	r3, r1, lsl #21
   2be8c:	adc	r0, r0, r0
   2be90:	subcs	r3, r3, r1, lsl #21
   2be94:	cmp	r3, r1, lsl #20
   2be98:	adc	r0, r0, r0
   2be9c:	subcs	r3, r3, r1, lsl #20
   2bea0:	cmp	r3, r1, lsl #19
   2bea4:	adc	r0, r0, r0
   2bea8:	subcs	r3, r3, r1, lsl #19
   2beac:	cmp	r3, r1, lsl #18
   2beb0:	adc	r0, r0, r0
   2beb4:	subcs	r3, r3, r1, lsl #18
   2beb8:	cmp	r3, r1, lsl #17
   2bebc:	adc	r0, r0, r0
   2bec0:	subcs	r3, r3, r1, lsl #17
   2bec4:	cmp	r3, r1, lsl #16
   2bec8:	adc	r0, r0, r0
   2becc:	subcs	r3, r3, r1, lsl #16
   2bed0:	cmp	r3, r1, lsl #15
   2bed4:	adc	r0, r0, r0
   2bed8:	subcs	r3, r3, r1, lsl #15
   2bedc:	cmp	r3, r1, lsl #14
   2bee0:	adc	r0, r0, r0
   2bee4:	subcs	r3, r3, r1, lsl #14
   2bee8:	cmp	r3, r1, lsl #13
   2beec:	adc	r0, r0, r0
   2bef0:	subcs	r3, r3, r1, lsl #13
   2bef4:	cmp	r3, r1, lsl #12
   2bef8:	adc	r0, r0, r0
   2befc:	subcs	r3, r3, r1, lsl #12
   2bf00:	cmp	r3, r1, lsl #11
   2bf04:	adc	r0, r0, r0
   2bf08:	subcs	r3, r3, r1, lsl #11
   2bf0c:	cmp	r3, r1, lsl #10
   2bf10:	adc	r0, r0, r0
   2bf14:	subcs	r3, r3, r1, lsl #10
   2bf18:	cmp	r3, r1, lsl #9
   2bf1c:	adc	r0, r0, r0
   2bf20:	subcs	r3, r3, r1, lsl #9
   2bf24:	cmp	r3, r1, lsl #8
   2bf28:	adc	r0, r0, r0
   2bf2c:	subcs	r3, r3, r1, lsl #8
   2bf30:	cmp	r3, r1, lsl #7
   2bf34:	adc	r0, r0, r0
   2bf38:	subcs	r3, r3, r1, lsl #7
   2bf3c:	cmp	r3, r1, lsl #6
   2bf40:	adc	r0, r0, r0
   2bf44:	subcs	r3, r3, r1, lsl #6
   2bf48:	cmp	r3, r1, lsl #5
   2bf4c:	adc	r0, r0, r0
   2bf50:	subcs	r3, r3, r1, lsl #5
   2bf54:	cmp	r3, r1, lsl #4
   2bf58:	adc	r0, r0, r0
   2bf5c:	subcs	r3, r3, r1, lsl #4
   2bf60:	cmp	r3, r1, lsl #3
   2bf64:	adc	r0, r0, r0
   2bf68:	subcs	r3, r3, r1, lsl #3
   2bf6c:	cmp	r3, r1, lsl #2
   2bf70:	adc	r0, r0, r0
   2bf74:	subcs	r3, r3, r1, lsl #2
   2bf78:	cmp	r3, r1, lsl #1
   2bf7c:	adc	r0, r0, r0
   2bf80:	subcs	r3, r3, r1, lsl #1
   2bf84:	cmp	r3, r1
   2bf88:	adc	r0, r0, r0
   2bf8c:	subcs	r3, r3, r1
   2bf90:	cmp	ip, #0
   2bf94:	rsbmi	r0, r0, #0
   2bf98:	bx	lr
   2bf9c:	teq	ip, r0
   2bfa0:	rsbmi	r0, r0, #0
   2bfa4:	bx	lr
   2bfa8:	movcc	r0, #0
   2bfac:	asreq	r0, ip, #31
   2bfb0:	orreq	r0, r0, #1
   2bfb4:	bx	lr
   2bfb8:	clz	r2, r1
   2bfbc:	rsb	r2, r2, #31
   2bfc0:	cmp	ip, #0
   2bfc4:	lsr	r0, r3, r2
   2bfc8:	rsbmi	r0, r0, #0
   2bfcc:	bx	lr
   2bfd0:	cmp	r0, #0
   2bfd4:	mvngt	r0, #-2147483648	; 0x80000000
   2bfd8:	movlt	r0, #-2147483648	; 0x80000000
   2bfdc:	b	2c0d4 <__assert_fail@plt+0x1ab7c>
   2bfe0:	cmp	r1, #0
   2bfe4:	beq	2bfd0 <__assert_fail@plt+0x1aa78>
   2bfe8:	push	{r0, r1, lr}
   2bfec:	bl	2bdc8 <__assert_fail@plt+0x1a870>
   2bff0:	pop	{r1, r2, lr}
   2bff4:	mul	r3, r2, r0
   2bff8:	sub	r1, r1, r3
   2bffc:	bx	lr
   2c000:	cmp	r3, #0
   2c004:	cmpeq	r2, #0
   2c008:	bne	2c02c <__assert_fail@plt+0x1aad4>
   2c00c:	cmp	r1, #0
   2c010:	movlt	r1, #-2147483648	; 0x80000000
   2c014:	movlt	r0, #0
   2c018:	blt	2c028 <__assert_fail@plt+0x1aad0>
   2c01c:	cmpeq	r0, #0
   2c020:	mvnne	r1, #-2147483648	; 0x80000000
   2c024:	mvnne	r0, #0
   2c028:	b	2c0d4 <__assert_fail@plt+0x1ab7c>
   2c02c:	sub	sp, sp, #8
   2c030:	push	{sp, lr}
   2c034:	cmp	r1, #0
   2c038:	blt	2c058 <__assert_fail@plt+0x1ab00>
   2c03c:	cmp	r3, #0
   2c040:	blt	2c08c <__assert_fail@plt+0x1ab34>
   2c044:	bl	2c0e4 <__assert_fail@plt+0x1ab8c>
   2c048:	ldr	lr, [sp, #4]
   2c04c:	add	sp, sp, #8
   2c050:	pop	{r2, r3}
   2c054:	bx	lr
   2c058:	rsbs	r0, r0, #0
   2c05c:	sbc	r1, r1, r1, lsl #1
   2c060:	cmp	r3, #0
   2c064:	blt	2c0b0 <__assert_fail@plt+0x1ab58>
   2c068:	bl	2c0e4 <__assert_fail@plt+0x1ab8c>
   2c06c:	ldr	lr, [sp, #4]
   2c070:	add	sp, sp, #8
   2c074:	pop	{r2, r3}
   2c078:	rsbs	r0, r0, #0
   2c07c:	sbc	r1, r1, r1, lsl #1
   2c080:	rsbs	r2, r2, #0
   2c084:	sbc	r3, r3, r3, lsl #1
   2c088:	bx	lr
   2c08c:	rsbs	r2, r2, #0
   2c090:	sbc	r3, r3, r3, lsl #1
   2c094:	bl	2c0e4 <__assert_fail@plt+0x1ab8c>
   2c098:	ldr	lr, [sp, #4]
   2c09c:	add	sp, sp, #8
   2c0a0:	pop	{r2, r3}
   2c0a4:	rsbs	r0, r0, #0
   2c0a8:	sbc	r1, r1, r1, lsl #1
   2c0ac:	bx	lr
   2c0b0:	rsbs	r2, r2, #0
   2c0b4:	sbc	r3, r3, r3, lsl #1
   2c0b8:	bl	2c0e4 <__assert_fail@plt+0x1ab8c>
   2c0bc:	ldr	lr, [sp, #4]
   2c0c0:	add	sp, sp, #8
   2c0c4:	pop	{r2, r3}
   2c0c8:	rsbs	r2, r2, #0
   2c0cc:	sbc	r3, r3, r3, lsl #1
   2c0d0:	bx	lr
   2c0d4:	push	{r1, lr}
   2c0d8:	mov	r0, #8
   2c0dc:	bl	111d4 <raise@plt>
   2c0e0:	pop	{r1, pc}
   2c0e4:	cmp	r1, r3
   2c0e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   2c0ec:	cmpeq	r0, r2
   2c0f0:	mov	r4, r0
   2c0f4:	mov	r5, r1
   2c0f8:	ldr	r9, [sp, #28]
   2c0fc:	movcc	r0, #0
   2c100:	movcc	r1, #0
   2c104:	bcc	2c1fc <__assert_fail@plt+0x1aca4>
   2c108:	cmp	r3, #0
   2c10c:	clzeq	ip, r2
   2c110:	clzne	ip, r3
   2c114:	addeq	ip, ip, #32
   2c118:	cmp	r5, #0
   2c11c:	clzeq	r1, r4
   2c120:	addeq	r1, r1, #32
   2c124:	clzne	r1, r5
   2c128:	sub	ip, ip, r1
   2c12c:	sub	lr, ip, #32
   2c130:	lsl	r7, r3, ip
   2c134:	rsb	r8, ip, #32
   2c138:	orr	r7, r7, r2, lsl lr
   2c13c:	orr	r7, r7, r2, lsr r8
   2c140:	lsl	r6, r2, ip
   2c144:	cmp	r5, r7
   2c148:	cmpeq	r4, r6
   2c14c:	movcc	r0, #0
   2c150:	movcc	r1, #0
   2c154:	bcc	2c170 <__assert_fail@plt+0x1ac18>
   2c158:	mov	r3, #1
   2c15c:	subs	r4, r4, r6
   2c160:	lsl	r1, r3, lr
   2c164:	lsl	r0, r3, ip
   2c168:	orr	r1, r1, r3, lsr r8
   2c16c:	sbc	r5, r5, r7
   2c170:	cmp	ip, #0
   2c174:	beq	2c1fc <__assert_fail@plt+0x1aca4>
   2c178:	lsrs	r3, r7, #1
   2c17c:	rrx	r2, r6
   2c180:	mov	r6, ip
   2c184:	b	2c1a8 <__assert_fail@plt+0x1ac50>
   2c188:	subs	r4, r4, r2
   2c18c:	sbc	r5, r5, r3
   2c190:	adds	r4, r4, r4
   2c194:	adc	r5, r5, r5
   2c198:	adds	r4, r4, #1
   2c19c:	adc	r5, r5, #0
   2c1a0:	subs	r6, r6, #1
   2c1a4:	beq	2c1c4 <__assert_fail@plt+0x1ac6c>
   2c1a8:	cmp	r5, r3
   2c1ac:	cmpeq	r4, r2
   2c1b0:	bcs	2c188 <__assert_fail@plt+0x1ac30>
   2c1b4:	adds	r4, r4, r4
   2c1b8:	adc	r5, r5, r5
   2c1bc:	subs	r6, r6, #1
   2c1c0:	bne	2c1a8 <__assert_fail@plt+0x1ac50>
   2c1c4:	lsr	r6, r4, ip
   2c1c8:	lsr	r7, r5, ip
   2c1cc:	orr	r6, r6, r5, lsl r8
   2c1d0:	adds	r2, r0, r4
   2c1d4:	orr	r6, r6, r5, lsr lr
   2c1d8:	adc	r3, r1, r5
   2c1dc:	lsl	r1, r7, ip
   2c1e0:	orr	r1, r1, r6, lsl lr
   2c1e4:	lsl	r0, r6, ip
   2c1e8:	orr	r1, r1, r6, lsr r8
   2c1ec:	subs	r0, r2, r0
   2c1f0:	mov	r4, r6
   2c1f4:	mov	r5, r7
   2c1f8:	sbc	r1, r3, r1
   2c1fc:	cmp	r9, #0
   2c200:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   2c204:	strd	r4, [r9]
   2c208:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2c20c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c210:	mov	r7, r0
   2c214:	ldr	r6, [pc, #72]	; 2c264 <__assert_fail@plt+0x1ad0c>
   2c218:	ldr	r5, [pc, #72]	; 2c268 <__assert_fail@plt+0x1ad10>
   2c21c:	add	r6, pc, r6
   2c220:	add	r5, pc, r5
   2c224:	sub	r6, r6, r5
   2c228:	mov	r8, r1
   2c22c:	mov	r9, r2
   2c230:	bl	11178 <pthread_mutex_unlock@plt-0x20>
   2c234:	asrs	r6, r6, #2
   2c238:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c23c:	mov	r4, #0
   2c240:	add	r4, r4, #1
   2c244:	ldr	r3, [r5], #4
   2c248:	mov	r2, r9
   2c24c:	mov	r1, r8
   2c250:	mov	r0, r7
   2c254:	blx	r3
   2c258:	cmp	r6, r4
   2c25c:	bne	2c240 <__assert_fail@plt+0x1ace8>
   2c260:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c264:	andeq	r1, r1, ip, ror #25
   2c268:	andeq	r1, r1, r4, ror #25
   2c26c:	bx	lr
   2c270:	ldr	r3, [pc, #12]	; 2c284 <__assert_fail@plt+0x1ad2c>
   2c274:	mov	r1, #0
   2c278:	add	r3, pc, r3
   2c27c:	ldr	r2, [r3]
   2c280:	b	11450 <__cxa_atexit@plt>
   2c284:	ldrdeq	r1, [r1], -r8

Disassembly of section .fini:

0002c288 <.fini>:
   2c288:	push	{r3, lr}
   2c28c:	pop	{r3, pc}
